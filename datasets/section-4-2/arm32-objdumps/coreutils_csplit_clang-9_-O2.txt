
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011398 <.init>:
   11398:	push	{r3, lr}
   1139c:	bl	117ac <__assert_fail@plt+0x4c>
   113a0:	pop	{r3, pc}

Disassembly of section .plt:

000113a4 <pthread_mutex_unlock@plt-0x14>:
   113a4:	push	{lr}		; (str lr, [sp, #-4]!)
   113a8:	ldr	lr, [pc, #4]	; 113b4 <pthread_mutex_unlock@plt-0x4>
   113ac:	add	lr, pc, lr
   113b0:	ldr	pc, [lr, #8]!
   113b4:	andeq	fp, r2, ip, asr #24

000113b8 <pthread_mutex_unlock@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #176128	; 0x2b000
   113c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113c4 <fdopen@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #176128	; 0x2b000
   113cc:	ldr	pc, [ip, #3140]!	; 0xc44

000113d0 <calloc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #176128	; 0x2b000
   113d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113dc <fputs_unlocked@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #176128	; 0x2b000
   113e4:	ldr	pc, [ip, #3124]!	; 0xc34

000113e8 <wctype@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #176128	; 0x2b000
   113f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f4 <raise@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #176128	; 0x2b000
   113fc:	ldr	pc, [ip, #3108]!	; 0xc24

00011400 <wcrtomb@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #176128	; 0x2b000
   11408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001140c <iswctype@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #176128	; 0x2b000
   11414:	ldr	pc, [ip, #3092]!	; 0xc14

00011418 <strcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #176128	; 0x2b000
   11420:	ldr	pc, [ip, #3084]!	; 0xc0c

00011424 <read@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #176128	; 0x2b000
   1142c:	ldr	pc, [ip, #3076]!	; 0xc04

00011430 <pthread_mutex_destroy@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #176128	; 0x2b000
   11438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001143c <fflush@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #176128	; 0x2b000
   11444:	ldr	pc, [ip, #3060]!	; 0xbf4

00011448 <sigprocmask@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #176128	; 0x2b000
   11450:	ldr	pc, [ip, #3052]!	; 0xbec

00011454 <memmove@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #176128	; 0x2b000
   1145c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011460 <free@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #176128	; 0x2b000
   11468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001146c <pthread_mutex_lock@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #176128	; 0x2b000
   11474:	ldr	pc, [ip, #3028]!	; 0xbd4

00011478 <_exit@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #176128	; 0x2b000
   11480:	ldr	pc, [ip, #3020]!	; 0xbcc

00011484 <memcpy@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #176128	; 0x2b000
   1148c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011490 <pthread_mutex_init@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #176128	; 0x2b000
   11498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001149c <__strtoull_internal@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #176128	; 0x2b000
   114a4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a8 <towlower@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #176128	; 0x2b000
   114b0:	ldr	pc, [ip, #2988]!	; 0xbac

000114b4 <mbsinit@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #176128	; 0x2b000
   114bc:	ldr	pc, [ip, #2980]!	; 0xba4

000114c0 <signal@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #176128	; 0x2b000
   114c8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114cc <fwrite_unlocked@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #176128	; 0x2b000
   114d4:	ldr	pc, [ip, #2964]!	; 0xb94

000114d8 <dcgettext@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #176128	; 0x2b000
   114e0:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e4 <unlink@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #176128	; 0x2b000
   114ec:	ldr	pc, [ip, #2948]!	; 0xb84

000114f0 <dup2@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #176128	; 0x2b000
   114f8:	ldr	pc, [ip, #2940]!	; 0xb7c

000114fc <realloc@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #176128	; 0x2b000
   11504:	ldr	pc, [ip, #2932]!	; 0xb74

00011508 <sigismember@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #176128	; 0x2b000
   11510:	ldr	pc, [ip, #2924]!	; 0xb6c

00011514 <textdomain@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #176128	; 0x2b000
   1151c:	ldr	pc, [ip, #2916]!	; 0xb64

00011520 <rawmemchr@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #176128	; 0x2b000
   11528:	ldr	pc, [ip, #2908]!	; 0xb5c

0001152c <iswprint@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #176128	; 0x2b000
   11534:	ldr	pc, [ip, #2900]!	; 0xb54

00011538 <sigaction@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #176128	; 0x2b000
   11540:	ldr	pc, [ip, #2892]!	; 0xb4c

00011544 <fwrite@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #176128	; 0x2b000
   1154c:	ldr	pc, [ip, #2884]!	; 0xb44

00011550 <lseek64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #176128	; 0x2b000
   11558:	ldr	pc, [ip, #2876]!	; 0xb3c

0001155c <__ctype_get_mb_cur_max@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #176128	; 0x2b000
   11564:	ldr	pc, [ip, #2868]!	; 0xb34

00011568 <strcpy@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #176128	; 0x2b000
   11570:	ldr	pc, [ip, #2860]!	; 0xb2c

00011574 <__fpending@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #176128	; 0x2b000
   1157c:	ldr	pc, [ip, #2852]!	; 0xb24

00011580 <mbrtowc@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #176128	; 0x2b000
   11588:	ldr	pc, [ip, #2844]!	; 0xb1c

0001158c <error@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #176128	; 0x2b000
   11594:	ldr	pc, [ip, #2836]!	; 0xb14

00011598 <open64@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #176128	; 0x2b000
   115a0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a4 <malloc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #176128	; 0x2b000
   115ac:	ldr	pc, [ip, #2820]!	; 0xb04

000115b0 <sigaddset@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #176128	; 0x2b000
   115b8:	ldr	pc, [ip, #2812]!	; 0xafc

000115bc <__libc_start_main@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #176128	; 0x2b000
   115c4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c8 <__freading@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #176128	; 0x2b000
   115d0:	ldr	pc, [ip, #2796]!	; 0xaec

000115d4 <__ctype_tolower_loc@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #176128	; 0x2b000
   115dc:	ldr	pc, [ip, #2788]!	; 0xae4

000115e0 <__ctype_toupper_loc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #176128	; 0x2b000
   115e8:	ldr	pc, [ip, #2780]!	; 0xadc

000115ec <__gmon_start__@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #176128	; 0x2b000
   115f4:	ldr	pc, [ip, #2772]!	; 0xad4

000115f8 <getopt_long@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #176128	; 0x2b000
   11600:	ldr	pc, [ip, #2764]!	; 0xacc

00011604 <__ctype_b_loc@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #176128	; 0x2b000
   1160c:	ldr	pc, [ip, #2756]!	; 0xac4

00011610 <exit@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #176128	; 0x2b000
   11618:	ldr	pc, [ip, #2748]!	; 0xabc

0001161c <bcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #176128	; 0x2b000
   11624:	ldr	pc, [ip, #2740]!	; 0xab4

00011628 <strlen@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #176128	; 0x2b000
   11630:	ldr	pc, [ip, #2732]!	; 0xaac

00011634 <strchr@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #176128	; 0x2b000
   1163c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011640 <__errno_location@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #176128	; 0x2b000
   11648:	ldr	pc, [ip, #2716]!	; 0xa9c

0001164c <iswalnum@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #176128	; 0x2b000
   11654:	ldr	pc, [ip, #2708]!	; 0xa94

00011658 <__sprintf_chk@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #176128	; 0x2b000
   11660:	ldr	pc, [ip, #2700]!	; 0xa8c

00011664 <__cxa_atexit@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #176128	; 0x2b000
   1166c:	ldr	pc, [ip, #2692]!	; 0xa84

00011670 <memset@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #176128	; 0x2b000
   11678:	ldr	pc, [ip, #2684]!	; 0xa7c

0001167c <btowc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #176128	; 0x2b000
   11684:	ldr	pc, [ip, #2676]!	; 0xa74

00011688 <__printf_chk@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #176128	; 0x2b000
   11690:	ldr	pc, [ip, #2668]!	; 0xa6c

00011694 <fileno@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #176128	; 0x2b000
   1169c:	ldr	pc, [ip, #2660]!	; 0xa64

000116a0 <__fprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #176128	; 0x2b000
   116a8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116ac <fclose@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #176128	; 0x2b000
   116b4:	ldr	pc, [ip, #2644]!	; 0xa54

000116b8 <fseeko64@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #176128	; 0x2b000
   116c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c4 <fcntl64@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #176128	; 0x2b000
   116cc:	ldr	pc, [ip, #2628]!	; 0xa44

000116d0 <setlocale@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #176128	; 0x2b000
   116d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116dc <sigemptyset@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #176128	; 0x2b000
   116e4:	ldr	pc, [ip, #2612]!	; 0xa34

000116e8 <strrchr@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #176128	; 0x2b000
   116f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f4 <nl_langinfo@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #176128	; 0x2b000
   116fc:	ldr	pc, [ip, #2596]!	; 0xa24

00011700 <__strtoll_internal@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #176128	; 0x2b000
   11708:	ldr	pc, [ip, #2588]!	; 0xa1c

0001170c <fopen64@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #176128	; 0x2b000
   11714:	ldr	pc, [ip, #2580]!	; 0xa14

00011718 <bindtextdomain@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #176128	; 0x2b000
   11720:	ldr	pc, [ip, #2572]!	; 0xa0c

00011724 <towupper@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #176128	; 0x2b000
   1172c:	ldr	pc, [ip, #2564]!	; 0xa04

00011730 <strncmp@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #176128	; 0x2b000
   11738:	ldr	pc, [ip, #2556]!	; 0x9fc

0001173c <abort@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #176128	; 0x2b000
   11744:	ldr	pc, [ip, #2548]!	; 0x9f4

00011748 <close@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #176128	; 0x2b000
   11750:	ldr	pc, [ip, #2540]!	; 0x9ec

00011754 <__snprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #176128	; 0x2b000
   1175c:	ldr	pc, [ip, #2532]!	; 0x9e4

00011760 <__assert_fail@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #176128	; 0x2b000
   11768:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00011770 <.text>:
   11770:	mov	fp, #0
   11774:	mov	lr, #0
   11778:	pop	{r1}		; (ldr r1, [sp], #4)
   1177c:	mov	r2, sp
   11780:	push	{r2}		; (str r2, [sp, #-4]!)
   11784:	push	{r0}		; (str r0, [sp, #-4]!)
   11788:	ldr	ip, [pc, #16]	; 117a0 <__assert_fail@plt+0x40>
   1178c:	push	{ip}		; (str ip, [sp, #-4]!)
   11790:	ldr	r0, [pc, #12]	; 117a4 <__assert_fail@plt+0x44>
   11794:	ldr	r3, [pc, #12]	; 117a8 <__assert_fail@plt+0x48>
   11798:	bl	115bc <__libc_start_main@plt>
   1179c:	bl	1173c <abort@plt>
   117a0:	muleq	r2, r8, sl
   117a4:	andeq	r1, r1, ip, lsr #17
   117a8:	andeq	fp, r2, r8, lsr sl
   117ac:	ldr	r3, [pc, #20]	; 117c8 <__assert_fail@plt+0x68>
   117b0:	ldr	r2, [pc, #20]	; 117cc <__assert_fail@plt+0x6c>
   117b4:	add	r3, pc, r3
   117b8:	ldr	r2, [r3, r2]
   117bc:	cmp	r2, #0
   117c0:	bxeq	lr
   117c4:	b	115ec <__gmon_start__@plt>
   117c8:	andeq	fp, r2, r4, asr #16
   117cc:	andeq	r0, r0, r8, asr #2
   117d0:	ldr	r0, [pc, #24]	; 117f0 <__assert_fail@plt+0x90>
   117d4:	ldr	r3, [pc, #24]	; 117f4 <__assert_fail@plt+0x94>
   117d8:	cmp	r3, r0
   117dc:	bxeq	lr
   117e0:	ldr	r3, [pc, #16]	; 117f8 <__assert_fail@plt+0x98>
   117e4:	cmp	r3, #0
   117e8:	bxeq	lr
   117ec:	bx	r3
   117f0:	andeq	sp, r3, r8, lsr #3
   117f4:	andeq	sp, r3, r8, lsr #3
   117f8:	andeq	r0, r0, r0
   117fc:	ldr	r0, [pc, #36]	; 11828 <__assert_fail@plt+0xc8>
   11800:	ldr	r1, [pc, #36]	; 1182c <__assert_fail@plt+0xcc>
   11804:	sub	r1, r1, r0
   11808:	asr	r1, r1, #2
   1180c:	add	r1, r1, r1, lsr #31
   11810:	asrs	r1, r1, #1
   11814:	bxeq	lr
   11818:	ldr	r3, [pc, #16]	; 11830 <__assert_fail@plt+0xd0>
   1181c:	cmp	r3, #0
   11820:	bxeq	lr
   11824:	bx	r3
   11828:	andeq	sp, r3, r8, lsr #3
   1182c:	andeq	sp, r3, r8, lsr #3
   11830:	andeq	r0, r0, r0
   11834:	push	{r4, lr}
   11838:	ldr	r4, [pc, #24]	; 11858 <__assert_fail@plt+0xf8>
   1183c:	ldrb	r3, [r4]
   11840:	cmp	r3, #0
   11844:	popne	{r4, pc}
   11848:	bl	117d0 <__assert_fail@plt+0x70>
   1184c:	mov	r3, #1
   11850:	strb	r3, [r4]
   11854:	pop	{r4, pc}
   11858:	andeq	sp, r3, r4, asr #3
   1185c:	b	117fc <__assert_fail@plt+0x9c>
   11860:	push	{fp, lr}
   11864:	mov	fp, sp
   11868:	movw	r1, #47812	; 0xbac4
   1186c:	mov	r0, #0
   11870:	mov	r2, #5
   11874:	movt	r1, #2
   11878:	bl	114d8 <dcgettext@plt>
   1187c:	movw	r2, #49759	; 0xc25f
   11880:	mov	r3, r0
   11884:	mov	r0, #0
   11888:	mov	r1, #0
   1188c:	movt	r2, #2
   11890:	bl	1158c <error@plt>
   11894:	bl	11898 <__assert_fail@plt+0x138>
   11898:	push	{fp, lr}
   1189c:	mov	fp, sp
   118a0:	bl	130ec <__assert_fail@plt+0x198c>
   118a4:	mov	r0, #1
   118a8:	bl	11610 <exit@plt>
   118ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b0:	add	fp, sp, #28
   118b4:	sub	sp, sp, #4
   118b8:	vpush	{d8-d9}
   118bc:	sub	sp, sp, #200	; 0xc8
   118c0:	str	r0, [sp, #32]
   118c4:	ldr	r0, [r1]
   118c8:	mov	r5, r1
   118cc:	bl	14348 <__assert_fail@plt+0x2be8>
   118d0:	movw	r1, #49219	; 0xc043
   118d4:	mov	r0, #6
   118d8:	movt	r1, #2
   118dc:	bl	116d0 <setlocale@plt>
   118e0:	movw	r4, #47893	; 0xbb15
   118e4:	movw	r1, #47829	; 0xbad5
   118e8:	movt	r4, #2
   118ec:	movt	r1, #2
   118f0:	mov	r0, r4
   118f4:	bl	11718 <bindtextdomain@plt>
   118f8:	mov	r0, r4
   118fc:	bl	11514 <textdomain@plt>
   11900:	movw	r0, #16064	; 0x3ec0
   11904:	movt	r0, #1
   11908:	bl	2ba9c <__assert_fail@plt+0x1a33c>
   1190c:	movw	r0, #53717	; 0xd1d5
   11910:	mov	r8, #1
   11914:	mov	sl, #0
   11918:	movw	r7, #53716	; 0xd1d4
   1191c:	movw	r1, #53720	; 0xd1d8
   11920:	movw	r4, #47856	; 0xbaf0
   11924:	movw	r6, #50576	; 0xc590
   11928:	movw	r9, #53696	; 0xd1c0
   1192c:	movt	r0, #3
   11930:	movt	r7, #3
   11934:	movt	r1, #3
   11938:	movt	r4, #2
   1193c:	movt	r6, #2
   11940:	movt	r9, #3
   11944:	strb	r8, [r0]
   11948:	movw	r0, #53704	; 0xd1c8
   1194c:	str	r5, [sp, #36]	; 0x24
   11950:	strb	sl, [r7]
   11954:	movt	r0, #3
   11958:	str	r5, [r0]
   1195c:	movw	r0, #53708	; 0xd1cc
   11960:	movt	r0, #3
   11964:	str	sl, [r0]
   11968:	movw	r0, #53712	; 0xd1d0
   1196c:	movt	r0, #3
   11970:	str	sl, [r0]
   11974:	movw	r0, #53718	; 0xd1d6
   11978:	movt	r0, #3
   1197c:	strb	sl, [r0]
   11980:	movw	r0, #47853	; 0xbaed
   11984:	movt	r0, #2
   11988:	str	r0, [r1]
   1198c:	movw	r5, #47867	; 0xbafb
   11990:	movt	r5, #2
   11994:	ldr	r0, [sp, #32]
   11998:	ldr	r1, [sp, #36]	; 0x24
   1199c:	mov	r2, r4
   119a0:	mov	r3, r6
   119a4:	str	sl, [sp]
   119a8:	bl	115f8 <getopt_long@plt>
   119ac:	cmp	r0, #97	; 0x61
   119b0:	ble	11af8 <__assert_fail@plt+0x398>
   119b4:	sub	r1, r0, #98	; 0x62
   119b8:	cmp	r1, #24
   119bc:	bhi	11a34 <__assert_fail@plt+0x2d4>
   119c0:	add	r0, pc, #0
   119c4:	ldr	pc, [r0, r1, lsl #2]
   119c8:	andeq	r1, r1, ip, asr sl
   119cc:	andeq	r2, r1, r4, ror #24
   119d0:	andeq	r2, r1, r4, ror #24
   119d4:	andeq	r2, r1, r4, ror #24
   119d8:	andeq	r1, r1, r0, lsl #21
   119dc:	andeq	r2, r1, r4, ror #24
   119e0:	andeq	r2, r1, r4, ror #24
   119e4:	andeq	r2, r1, r4, ror #24
   119e8:	andeq	r2, r1, r4, ror #24
   119ec:	andeq	r1, r1, r0, ror sl
   119f0:	andeq	r2, r1, r4, ror #24
   119f4:	andeq	r2, r1, r4, ror #24
   119f8:	muleq	r1, r4, sl
   119fc:	andeq	r2, r1, r4, ror #24
   11a00:	andeq	r2, r1, r4, ror #24
   11a04:	andeq	r1, r1, ip, lsr #20
   11a08:	andeq	r2, r1, r4, ror #24
   11a0c:	andeq	r1, r1, ip, lsr #20
   11a10:	andeq	r2, r1, r4, ror #24
   11a14:	andeq	r2, r1, r4, ror #24
   11a18:	andeq	r2, r1, r4, ror #24
   11a1c:	andeq	r2, r1, r4, ror #24
   11a20:	andeq	r2, r1, r4, ror #24
   11a24:	andeq	r2, r1, r4, ror #24
   11a28:	andeq	r1, r1, ip, asr #20
   11a2c:	strb	r8, [r7]
   11a30:	b	11994 <__assert_fail@plt+0x234>
   11a34:	cmp	r0, #256	; 0x100
   11a38:	bne	12c64 <__assert_fail@plt+0x1504>
   11a3c:	movw	r0, #53718	; 0xd1d6
   11a40:	movt	r0, #3
   11a44:	strb	r8, [r0]
   11a48:	b	11994 <__assert_fail@plt+0x234>
   11a4c:	movw	r0, #53728	; 0xd1e0
   11a50:	movt	r0, #3
   11a54:	strb	r8, [r0]
   11a58:	b	11994 <__assert_fail@plt+0x234>
   11a5c:	ldr	r0, [r9]
   11a60:	movw	r1, #53724	; 0xd1dc
   11a64:	movt	r1, #3
   11a68:	str	r0, [r1]
   11a6c:	b	11994 <__assert_fail@plt+0x234>
   11a70:	movw	r0, #53717	; 0xd1d5
   11a74:	movt	r0, #3
   11a78:	strb	sl, [r0]
   11a7c:	b	11994 <__assert_fail@plt+0x234>
   11a80:	ldr	r0, [r9]
   11a84:	movw	r1, #53720	; 0xd1d8
   11a88:	movt	r1, #3
   11a8c:	str	r0, [r1]
   11a90:	b	11994 <__assert_fail@plt+0x234>
   11a94:	ldr	r8, [r9]
   11a98:	mov	r0, #0
   11a9c:	mov	r1, r5
   11aa0:	mov	r2, #5
   11aa4:	bl	114d8 <dcgettext@plt>
   11aa8:	mvn	r1, #-2147483648	; 0x80000000
   11aac:	mov	r5, r6
   11ab0:	mov	r6, r9
   11ab4:	movw	r9, #53592	; 0xd158
   11ab8:	mov	r2, #0
   11abc:	mov	r3, #0
   11ac0:	stm	sp, {r1, sl}
   11ac4:	movw	r1, #49219	; 0xc043
   11ac8:	str	r0, [sp, #12]
   11acc:	mov	r0, r8
   11ad0:	str	sl, [sp, #16]
   11ad4:	movt	r9, #3
   11ad8:	mov	r8, #1
   11adc:	movt	r1, #2
   11ae0:	str	r1, [sp, #8]
   11ae4:	bl	28c4c <__assert_fail@plt+0x174ec>
   11ae8:	str	r0, [r9]
   11aec:	mov	r9, r6
   11af0:	mov	r6, r5
   11af4:	b	1198c <__assert_fail@plt+0x22c>
   11af8:	cmn	r0, #1
   11afc:	bne	12958 <__assert_fail@plt+0x11f8>
   11b00:	movw	r9, #53680	; 0xd1b0
   11b04:	ldr	r1, [sp, #32]
   11b08:	movt	r9, #3
   11b0c:	ldr	r0, [r9]
   11b10:	sub	r1, r1, r0
   11b14:	cmp	r1, #1
   11b18:	ble	12c18 <__assert_fail@plt+0x14b8>
   11b1c:	movw	r0, #53720	; 0xd1d8
   11b20:	movt	r0, #3
   11b24:	ldr	r0, [r0]
   11b28:	bl	11628 <strlen@plt>
   11b2c:	mov	r8, r0
   11b30:	movw	r0, #53724	; 0xd1dc
   11b34:	movt	r0, #3
   11b38:	ldr	r0, [r0]
   11b3c:	cmp	r0, #0
   11b40:	beq	11d64 <__assert_fail@plt+0x604>
   11b44:	movw	r0, #53724	; 0xd1dc
   11b48:	mov	r5, #0
   11b4c:	mvn	r1, #34	; 0x22
   11b50:	mvn	sl, #47	; 0x2f
   11b54:	mvn	r3, #87	; 0x57
   11b58:	mov	ip, #100	; 0x64
   11b5c:	movt	r0, #3
   11b60:	ldr	lr, [r0]
   11b64:	mov	r0, lr
   11b68:	b	11b78 <__assert_fail@plt+0x418>
   11b6c:	cmp	r4, #0
   11b70:	beq	11d30 <__assert_fail@plt+0x5d0>
   11b74:	add	r0, r0, #1
   11b78:	ldrb	r4, [r0]
   11b7c:	cmp	r4, #37	; 0x25
   11b80:	bne	11b6c <__assert_fail@plt+0x40c>
   11b84:	mov	r4, r0
   11b88:	ldrb	r6, [r4, #1]!
   11b8c:	cmp	r6, #37	; 0x25
   11b90:	bne	11b9c <__assert_fail@plt+0x43c>
   11b94:	mov	r0, r4
   11b98:	b	11b74 <__assert_fail@plt+0x414>
   11b9c:	tst	r5, #1
   11ba0:	bne	12b14 <__assert_fail@plt+0x13b4>
   11ba4:	add	r0, r0, #2
   11ba8:	mov	r5, #0
   11bac:	b	11bb8 <__assert_fail@plt+0x458>
   11bb0:	orr	r5, r5, #2
   11bb4:	ldrb	r6, [r0], #1
   11bb8:	uxtab	r4, r1, r6
   11bbc:	cmp	r4, #13
   11bc0:	bhi	11c10 <__assert_fail@plt+0x4b0>
   11bc4:	add	r7, pc, #0
   11bc8:	ldr	pc, [r7, r4, lsl #2]
   11bcc:			; <UNDEFINED> instruction: 0x00011bb0
   11bd0:	andeq	r1, r1, r0, lsl ip
   11bd4:	andeq	r1, r1, r0, lsl ip
   11bd8:	andeq	r1, r1, r0, lsl ip
   11bdc:	andeq	r1, r1, r4, lsl #24
   11be0:	andeq	r1, r1, r0, lsl ip
   11be4:	andeq	r1, r1, r0, lsl ip
   11be8:	andeq	r1, r1, r0, lsl ip
   11bec:	andeq	r1, r1, r0, lsl ip
   11bf0:	andeq	r1, r1, r0, lsl ip
   11bf4:			; <UNDEFINED> instruction: 0x00011bb4
   11bf8:	andeq	r1, r1, r0, lsl ip
   11bfc:	andeq	r1, r1, r0, lsl ip
   11c00:			; <UNDEFINED> instruction: 0x00011bb4
   11c04:	ldrb	r6, [r0], #1
   11c08:	orr	r5, r5, #1
   11c0c:	b	11bb8 <__assert_fail@plt+0x458>
   11c10:	uxtab	r4, sl, r6
   11c14:	cmp	r4, #9
   11c18:	bhi	11c2c <__assert_fail@plt+0x4cc>
   11c1c:	ldrb	r6, [r0], #1
   11c20:	sub	r4, r6, #48	; 0x30
   11c24:	cmp	r4, #10
   11c28:	bcc	11c1c <__assert_fail@plt+0x4bc>
   11c2c:	uxtb	r4, r6
   11c30:	sub	r0, r0, #1
   11c34:	cmp	r4, #46	; 0x2e
   11c38:	bne	11c4c <__assert_fail@plt+0x4ec>
   11c3c:	ldrb	r6, [r0, #1]!
   11c40:	sub	r4, r6, #48	; 0x30
   11c44:	cmp	r4, #10
   11c48:	bcc	11c3c <__assert_fail@plt+0x4dc>
   11c4c:	uxtab	r7, r3, r6
   11c50:	uxtb	r6, r6
   11c54:	cmp	r7, #32
   11c58:	bhi	12a80 <__assert_fail@plt+0x1320>
   11c5c:	add	r2, pc, #4
   11c60:	mvn	r4, #1
   11c64:	ldr	pc, [r2, r7, lsl #2]
   11c68:	andeq	r1, r1, ip, ror #25
   11c6c:	muleq	r1, r4, sl
   11c70:	muleq	r1, r4, sl
   11c74:	muleq	r1, r4, sl
   11c78:	muleq	r1, r4, sl
   11c7c:	muleq	r1, r4, sl
   11c80:	muleq	r1, r4, sl
   11c84:	muleq	r1, r4, sl
   11c88:	muleq	r1, r4, sl
   11c8c:	muleq	r1, r4, sl
   11c90:	muleq	r1, r4, sl
   11c94:	muleq	r1, r4, sl
   11c98:	strdeq	r1, [r1], -r8
   11c9c:	muleq	r1, r4, sl
   11ca0:	muleq	r1, r4, sl
   11ca4:	muleq	r1, r4, sl
   11ca8:	muleq	r1, r4, sl
   11cac:	strdeq	r1, [r1], -r8
   11cb0:	muleq	r1, r4, sl
   11cb4:	muleq	r1, r4, sl
   11cb8:	muleq	r1, r4, sl
   11cbc:	muleq	r1, r4, sl
   11cc0:	muleq	r1, r4, sl
   11cc4:	andeq	r1, r1, ip, ror #25
   11cc8:	muleq	r1, r4, sl
   11ccc:	muleq	r1, r4, sl
   11cd0:	muleq	r1, r4, sl
   11cd4:	muleq	r1, r4, sl
   11cd8:	muleq	r1, r4, sl
   11cdc:	strdeq	r1, [r1], -r4
   11ce0:	muleq	r1, r4, sl
   11ce4:	muleq	r1, r4, sl
   11ce8:	andeq	r1, r1, ip, ror #25
   11cec:	mvn	r4, #2
   11cf0:	b	11cf8 <__assert_fail@plt+0x598>
   11cf4:	strb	ip, [r0]
   11cf8:	ands	r4, r4, r5
   11cfc:	mov	r5, #1
   11d00:	beq	11b74 <__assert_fail@plt+0x414>
   11d04:	movw	r1, #49566	; 0xc19e
   11d08:	mov	r0, #0
   11d0c:	mov	r2, #5
   11d10:	movt	r1, #2
   11d14:	bl	114d8 <dcgettext@plt>
   11d18:	tst	r4, #2
   11d1c:	mov	r3, #35	; 0x23
   11d20:	mov	r2, r0
   11d24:	str	r6, [sp]
   11d28:	movweq	r3, #39	; 0x27
   11d2c:	b	12b58 <__assert_fail@plt+0x13f8>
   11d30:	tst	r5, #1
   11d34:	beq	12c6c <__assert_fail@plt+0x150c>
   11d38:	mvn	r0, #-2147483648	; 0x80000000
   11d3c:	mov	r1, #0
   11d40:	mov	r2, #1
   11d44:	mvn	r3, #0
   11d48:	str	lr, [sp]
   11d4c:	str	r0, [sp, #4]
   11d50:	mov	r0, #0
   11d54:	bl	11754 <__snprintf_chk@plt>
   11d58:	cmn	r0, #1
   11d5c:	bgt	11d88 <__assert_fail@plt+0x628>
   11d60:	b	12c14 <__assert_fail@plt+0x14b4>
   11d64:	movw	r0, #53592	; 0xd158
   11d68:	movt	r0, #3
   11d6c:	ldr	r1, [r0]
   11d70:	mov	r0, #11
   11d74:	cmp	r1, #11
   11d78:	bcc	11d88 <__assert_fail@plt+0x628>
   11d7c:	movw	r0, #53592	; 0xd158
   11d80:	movt	r0, #3
   11d84:	ldr	r0, [r0]
   11d88:	add	r0, r0, r8
   11d8c:	add	r0, r0, #1
   11d90:	cmp	r0, r8
   11d94:	bvs	12c14 <__assert_fail@plt+0x14b4>
   11d98:	bl	28620 <__assert_fail@plt+0x16ec0>
   11d9c:	movw	r1, #53732	; 0xd1e4
   11da0:	movt	r1, #3
   11da4:	str	r0, [r1]
   11da8:	ldr	r0, [r9]
   11dac:	ldr	r1, [sp, #36]	; 0x24
   11db0:	add	r5, r0, #1
   11db4:	str	r5, [r9]
   11db8:	ldr	r6, [r1, r0, lsl #2]
   11dbc:	movw	r1, #50956	; 0xc70c
   11dc0:	movt	r1, #2
   11dc4:	mov	r0, r6
   11dc8:	bl	11418 <strcmp@plt>
   11dcc:	cmp	r0, #0
   11dd0:	beq	11df4 <__assert_fail@plt+0x694>
   11dd4:	mov	r0, #0
   11dd8:	mov	r1, r6
   11ddc:	mov	r2, #0
   11de0:	mov	r3, #0
   11de4:	bl	14044 <__assert_fail@plt+0x28e4>
   11de8:	cmp	r0, #0
   11dec:	bmi	12c78 <__assert_fail@plt+0x1518>
   11df0:	ldr	r5, [r9]
   11df4:	ldr	r9, [sp, #32]
   11df8:	cmp	r5, r9
   11dfc:	bge	121c0 <__assert_fail@plt+0xa60>
   11e00:	movw	r2, #53896	; 0xd288
   11e04:	vmov.i32	q4, #0	; 0x00000000
   11e08:	movt	r2, #3
   11e0c:	b	11e1c <__assert_fail@plt+0x6bc>
   11e10:	mov	r5, r7
   11e14:	cmp	r5, r9
   11e18:	bge	121c0 <__assert_fail@plt+0xa60>
   11e1c:	ldr	r0, [sp, #36]	; 0x24
   11e20:	ldr	r7, [r0, r5, lsl #2]
   11e24:	ldrb	r4, [r7]
   11e28:	cmp	r4, #47	; 0x2f
   11e2c:	cmpne	r4, #37	; 0x25
   11e30:	bne	11f80 <__assert_fail@plt+0x820>
   11e34:	add	r9, r7, #1
   11e38:	mov	r1, r4
   11e3c:	mov	r0, r9
   11e40:	bl	116e8 <strrchr@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	129f0 <__assert_fail@plt+0x1290>
   11e4c:	movw	sl, #53712	; 0xd1d0
   11e50:	movw	r1, #53896	; 0xd288
   11e54:	mov	r6, r0
   11e58:	mvn	r0, r7
   11e5c:	sub	r2, r4, #37	; 0x25
   11e60:	str	r7, [sp, #24]
   11e64:	movt	sl, #3
   11e68:	movt	r1, #3
   11e6c:	add	r0, r6, r0
   11e70:	clz	r2, r2
   11e74:	str	r0, [sp, #28]
   11e78:	lsr	r4, r2, #5
   11e7c:	ldr	r3, [sl]
   11e80:	ldr	r0, [r1]
   11e84:	cmp	r3, r0
   11e88:	movw	r0, #53708	; 0xd1cc
   11e8c:	movt	r0, #3
   11e90:	bne	11ebc <__assert_fail@plt+0x75c>
   11e94:	mov	r7, r0
   11e98:	ldr	r0, [r0]
   11e9c:	mov	r2, #64	; 0x40
   11ea0:	mvn	r3, #0
   11ea4:	str	r2, [sp]
   11ea8:	mov	r2, #1
   11eac:	bl	28838 <__assert_fail@plt+0x170d8>
   11eb0:	ldr	r3, [sl]
   11eb4:	str	r0, [r7]
   11eb8:	b	11ec0 <__assert_fail@plt+0x760>
   11ebc:	ldr	r0, [r0]
   11ec0:	add	r2, r3, #1
   11ec4:	mov	r7, #0
   11ec8:	mov	r1, #20
   11ecc:	mov	r8, r5
   11ed0:	str	r2, [sl]
   11ed4:	add	sl, r0, r3, lsl #6
   11ed8:	mov	r0, #1
   11edc:	strb	r7, [sl, #28]
   11ee0:	str	r7, [sl, #16]
   11ee4:	str	r7, [sl, #36]	; 0x24
   11ee8:	strb	r0, [sl, #30]
   11eec:	mov	r0, sl
   11ef0:	strb	r4, [sl, #29]
   11ef4:	str	r5, [sl, #24]
   11ef8:	mov	r4, sl
   11efc:	vst1.64	{d8-d9}, [r0], r1
   11f00:	str	r7, [r0]
   11f04:	mov	r0, #256	; 0x100
   11f08:	str	r7, [r4, #32]!
   11f0c:	bl	28608 <__assert_fail@plt+0x16ea8>
   11f10:	str	r0, [sl, #48]	; 0x30
   11f14:	movw	r0, #54260	; 0xd3f4
   11f18:	str	r7, [sl, #52]	; 0x34
   11f1c:	movw	r1, #710	; 0x2c6
   11f20:	mov	r2, r4
   11f24:	mov	r5, #0
   11f28:	movt	r0, #3
   11f2c:	str	r1, [r0]
   11f30:	ldr	r1, [sp, #28]
   11f34:	mov	r0, r9
   11f38:	bl	160f0 <__assert_fail@plt+0x4990>
   11f3c:	cmp	r0, #0
   11f40:	bne	12a1c <__assert_fail@plt+0x12bc>
   11f44:	ldrb	r0, [r6, #1]!
   11f48:	ldr	r9, [sp, #32]
   11f4c:	cmp	r0, #0
   11f50:	beq	120e0 <__assert_fail@plt+0x980>
   11f54:	movw	r0, #49219	; 0xc043
   11f58:	mov	r1, #0
   11f5c:	mov	r2, #10
   11f60:	mov	r3, sl
   11f64:	movt	r0, #2
   11f68:	str	r0, [sp]
   11f6c:	mov	r0, r6
   11f70:	bl	28c54 <__assert_fail@plt+0x174f4>
   11f74:	cmp	r0, #0
   11f78:	beq	120e0 <__assert_fail@plt+0x980>
   11f7c:	b	12ac8 <__assert_fail@plt+0x1368>
   11f80:	movw	r1, #53712	; 0xd1d0
   11f84:	ldr	r0, [r2]
   11f88:	movt	r1, #3
   11f8c:	ldr	r7, [r1]
   11f90:	cmp	r7, r0
   11f94:	bne	11fd8 <__assert_fail@plt+0x878>
   11f98:	movw	r0, #53708	; 0xd1cc
   11f9c:	mov	r1, #64	; 0x40
   11fa0:	mvn	r3, #0
   11fa4:	movt	r0, #3
   11fa8:	str	r1, [sp]
   11fac:	mov	r1, r2
   11fb0:	mov	r2, #1
   11fb4:	mov	r4, r0
   11fb8:	ldr	r0, [r0]
   11fbc:	bl	28838 <__assert_fail@plt+0x170d8>
   11fc0:	movw	r1, #53712	; 0xd1d0
   11fc4:	mov	r6, r0
   11fc8:	str	r0, [r4]
   11fcc:	movt	r1, #3
   11fd0:	ldr	r7, [r1]
   11fd4:	b	11fe4 <__assert_fail@plt+0x884>
   11fd8:	movw	r0, #53708	; 0xd1cc
   11fdc:	movt	r0, #3
   11fe0:	ldr	r6, [r0]
   11fe4:	add	sl, r6, r7, lsl #6
   11fe8:	add	r0, r7, #1
   11fec:	mov	r2, #20
   11ff0:	sub	r3, fp, #64	; 0x40
   11ff4:	str	r0, [r1]
   11ff8:	mov	r1, #0
   11ffc:	mov	r0, sl
   12000:	strb	r1, [sl, #28]
   12004:	strb	r1, [sl, #30]
   12008:	str	r1, [sl, #16]
   1200c:	str	r5, [sl, #24]
   12010:	vst1.64	{d8-d9}, [r0], r2
   12014:	mov	r2, r5
   12018:	mov	r5, #0
   1201c:	str	r1, [r0]
   12020:	ldr	r0, [sp, #36]	; 0x24
   12024:	movw	r1, #49219	; 0xc043
   12028:	mov	r8, r2
   1202c:	movt	r1, #2
   12030:	ldr	r0, [r0, r2, lsl #2]
   12034:	str	r1, [sp]
   12038:	mov	r1, #0
   1203c:	mov	r2, #10
   12040:	bl	2a56c <__assert_fail@plt+0x18e0c>
   12044:	cmp	r0, #0
   12048:	bne	12a5c <__assert_fail@plt+0x12fc>
   1204c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12050:	cmn	r1, #1
   12054:	ble	12a5c <__assert_fail@plt+0x12fc>
   12058:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1205c:	orrs	r2, r0, r1
   12060:	beq	12b38 <__assert_fail@plt+0x13d8>
   12064:	movw	r2, #53888	; 0xd280
   12068:	movt	r2, #3
   1206c:	ldrd	r2, [r2]
   12070:	subs	r4, r0, r2
   12074:	sbcs	r4, r1, r3
   12078:	bcc	12b64 <__assert_fail@plt+0x1404>
   1207c:	eor	r2, r0, r2
   12080:	eor	r3, r1, r3
   12084:	orrs	r2, r2, r3
   12088:	bne	120cc <__assert_fail@plt+0x96c>
   1208c:	movw	r1, #49762	; 0xc262
   12090:	mov	r0, #0
   12094:	mov	r2, #5
   12098:	movt	r1, #2
   1209c:	bl	114d8 <dcgettext@plt>
   120a0:	mov	r4, r0
   120a4:	ldr	r0, [sp, #36]	; 0x24
   120a8:	ldr	r0, [r0, r8, lsl #2]
   120ac:	bl	15f9c <__assert_fail@plt+0x483c>
   120b0:	mov	r3, r0
   120b4:	mov	r0, #0
   120b8:	mov	r1, #0
   120bc:	mov	r2, r4
   120c0:	bl	1158c <error@plt>
   120c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   120cc:	movw	r2, #53888	; 0xd280
   120d0:	movt	r2, #3
   120d4:	strd	r0, [r2]
   120d8:	add	r2, r6, r7, lsl #6
   120dc:	strd	r0, [r2, #8]
   120e0:	movw	r2, #53896	; 0xd288
   120e4:	add	r7, r8, #1
   120e8:	movt	r2, #3
   120ec:	cmp	r7, r9
   120f0:	bge	11e10 <__assert_fail@plt+0x6b0>
   120f4:	ldr	r0, [sp, #36]	; 0x24
   120f8:	ldr	r6, [r0, r7, lsl #2]
   120fc:	ldrb	r0, [r6]
   12100:	cmp	r0, #123	; 0x7b
   12104:	bne	12158 <__assert_fail@plt+0x9f8>
   12108:	mov	r0, r6
   1210c:	bl	11628 <strlen@plt>
   12110:	sub	r4, r0, #1
   12114:	mov	r1, r0
   12118:	ldrb	r0, [r6, r4]
   1211c:	cmp	r0, #125	; 0x7d
   12120:	bne	12be0 <__assert_fail@plt+0x1480>
   12124:	add	r0, r6, #1
   12128:	cmp	r1, #3
   1212c:	strb	r5, [r6, r4]
   12130:	bne	12168 <__assert_fail@plt+0xa08>
   12134:	ldrb	r1, [r0]
   12138:	cmp	r1, #42	; 0x2a
   1213c:	bne	12168 <__assert_fail@plt+0xa08>
   12140:	movw	r2, #53896	; 0xd288
   12144:	mov	r0, #1
   12148:	mov	r5, r8
   1214c:	strb	r0, [sl, #28]
   12150:	movt	r2, #3
   12154:	b	121ac <__assert_fail@plt+0xa4c>
   12158:	mov	r5, r7
   1215c:	cmp	r5, r9
   12160:	blt	11e1c <__assert_fail@plt+0x6bc>
   12164:	b	121c0 <__assert_fail@plt+0xa60>
   12168:	movw	r1, #49219	; 0xc043
   1216c:	mov	r2, #10
   12170:	add	r3, sp, #40	; 0x28
   12174:	movt	r1, #2
   12178:	str	r1, [sp]
   1217c:	mov	r1, #0
   12180:	bl	2a56c <__assert_fail@plt+0x18e0c>
   12184:	cmp	r0, #0
   12188:	bne	12ae8 <__assert_fail@plt+0x1388>
   1218c:	ldr	r1, [sp, #44]	; 0x2c
   12190:	cmn	r1, #1
   12194:	ble	12ae8 <__assert_fail@plt+0x1388>
   12198:	ldr	r0, [sp, #40]	; 0x28
   1219c:	movw	r2, #53896	; 0xd288
   121a0:	mov	r5, r8
   121a4:	movt	r2, #3
   121a8:	strd	r0, [sl, #16]
   121ac:	mov	r0, #125	; 0x7d
   121b0:	add	r5, r5, #2
   121b4:	strb	r0, [r6, r4]
   121b8:	cmp	r5, r9
   121bc:	blt	11e1c <__assert_fail@plt+0x6bc>
   121c0:	movw	r8, #53736	; 0xd1e8
   121c4:	movt	r8, #3
   121c8:	mov	r0, r8
   121cc:	bl	116dc <sigemptyset@plt>
   121d0:	movw	r4, #50752	; 0xc640
   121d4:	mov	r7, #0
   121d8:	add	r5, sp, #40	; 0x28
   121dc:	movt	r4, #2
   121e0:	b	121f0 <__assert_fail@plt+0xa90>
   121e4:	sub	r7, r7, #1
   121e8:	cmn	r7, #11
   121ec:	beq	12220 <__assert_fail@plt+0xac0>
   121f0:	ldr	r6, [r4, -r7, lsl #2]
   121f4:	mov	r1, #0
   121f8:	mov	r2, r5
   121fc:	mov	r0, r6
   12200:	bl	11538 <sigaction@plt>
   12204:	ldr	r0, [sp, #40]	; 0x28
   12208:	cmp	r0, #1
   1220c:	beq	121e4 <__assert_fail@plt+0xa84>
   12210:	mov	r0, r8
   12214:	mov	r1, r6
   12218:	bl	115b0 <sigaddset@plt>
   1221c:	b	121e4 <__assert_fail@plt+0xa84>
   12220:	movw	r0, #12268	; 0x2fec
   12224:	movw	r4, #53736	; 0xd1e8
   12228:	mov	r2, #128	; 0x80
   1222c:	movt	r0, #1
   12230:	movt	r4, #3
   12234:	str	r0, [sp, #40]	; 0x28
   12238:	add	r0, r5, #4
   1223c:	mov	r1, r4
   12240:	bl	11484 <memcpy@plt>
   12244:	mov	r0, #0
   12248:	mov	r1, #14
   1224c:	str	r0, [sp, #172]	; 0xac
   12250:	mov	r0, r4
   12254:	bl	11508 <sigismember@plt>
   12258:	cmp	r0, #0
   1225c:	beq	12270 <__assert_fail@plt+0xb10>
   12260:	add	r1, sp, #40	; 0x28
   12264:	mov	r0, #14
   12268:	mov	r2, #0
   1226c:	bl	11538 <sigaction@plt>
   12270:	movw	r0, #53736	; 0xd1e8
   12274:	mov	r1, #1
   12278:	movt	r0, #3
   1227c:	bl	11508 <sigismember@plt>
   12280:	movw	r4, #53712	; 0xd1d0
   12284:	cmp	r0, #0
   12288:	movt	r4, #3
   1228c:	beq	122a0 <__assert_fail@plt+0xb40>
   12290:	add	r1, sp, #40	; 0x28
   12294:	mov	r0, #1
   12298:	mov	r2, #0
   1229c:	bl	11538 <sigaction@plt>
   122a0:	movw	r0, #53736	; 0xd1e8
   122a4:	mov	r1, #2
   122a8:	movt	r0, #3
   122ac:	bl	11508 <sigismember@plt>
   122b0:	cmp	r0, #0
   122b4:	beq	122c8 <__assert_fail@plt+0xb68>
   122b8:	add	r1, sp, #40	; 0x28
   122bc:	mov	r0, #2
   122c0:	mov	r2, #0
   122c4:	bl	11538 <sigaction@plt>
   122c8:	movw	r0, #53736	; 0xd1e8
   122cc:	mov	r1, #13
   122d0:	movt	r0, #3
   122d4:	bl	11508 <sigismember@plt>
   122d8:	cmp	r0, #0
   122dc:	beq	122f0 <__assert_fail@plt+0xb90>
   122e0:	add	r1, sp, #40	; 0x28
   122e4:	mov	r0, #13
   122e8:	mov	r2, #0
   122ec:	bl	11538 <sigaction@plt>
   122f0:	movw	r0, #53736	; 0xd1e8
   122f4:	mov	r1, #3
   122f8:	movt	r0, #3
   122fc:	bl	11508 <sigismember@plt>
   12300:	cmp	r0, #0
   12304:	beq	12318 <__assert_fail@plt+0xbb8>
   12308:	add	r1, sp, #40	; 0x28
   1230c:	mov	r0, #3
   12310:	mov	r2, #0
   12314:	bl	11538 <sigaction@plt>
   12318:	movw	r0, #53736	; 0xd1e8
   1231c:	mov	r1, #15
   12320:	movt	r0, #3
   12324:	bl	11508 <sigismember@plt>
   12328:	cmp	r0, #0
   1232c:	beq	12340 <__assert_fail@plt+0xbe0>
   12330:	add	r1, sp, #40	; 0x28
   12334:	mov	r0, #15
   12338:	mov	r2, #0
   1233c:	bl	11538 <sigaction@plt>
   12340:	movw	r0, #53736	; 0xd1e8
   12344:	mov	r1, #29
   12348:	movt	r0, #3
   1234c:	bl	11508 <sigismember@plt>
   12350:	cmp	r0, #0
   12354:	beq	12368 <__assert_fail@plt+0xc08>
   12358:	add	r1, sp, #40	; 0x28
   1235c:	mov	r0, #29
   12360:	mov	r2, #0
   12364:	bl	11538 <sigaction@plt>
   12368:	movw	r0, #53736	; 0xd1e8
   1236c:	mov	r1, #27
   12370:	movt	r0, #3
   12374:	bl	11508 <sigismember@plt>
   12378:	cmp	r0, #0
   1237c:	beq	12390 <__assert_fail@plt+0xc30>
   12380:	add	r1, sp, #40	; 0x28
   12384:	mov	r0, #27
   12388:	mov	r2, #0
   1238c:	bl	11538 <sigaction@plt>
   12390:	movw	r0, #53736	; 0xd1e8
   12394:	mov	r1, #26
   12398:	movt	r0, #3
   1239c:	bl	11508 <sigismember@plt>
   123a0:	cmp	r0, #0
   123a4:	beq	123b8 <__assert_fail@plt+0xc58>
   123a8:	add	r1, sp, #40	; 0x28
   123ac:	mov	r0, #26
   123b0:	mov	r2, #0
   123b4:	bl	11538 <sigaction@plt>
   123b8:	movw	r0, #53736	; 0xd1e8
   123bc:	mov	r1, #24
   123c0:	movt	r0, #3
   123c4:	bl	11508 <sigismember@plt>
   123c8:	cmp	r0, #0
   123cc:	beq	123e0 <__assert_fail@plt+0xc80>
   123d0:	add	r1, sp, #40	; 0x28
   123d4:	mov	r0, #24
   123d8:	mov	r2, #0
   123dc:	bl	11538 <sigaction@plt>
   123e0:	movw	r0, #53736	; 0xd1e8
   123e4:	mov	r1, #25
   123e8:	movt	r0, #3
   123ec:	bl	11508 <sigismember@plt>
   123f0:	cmp	r0, #0
   123f4:	beq	12408 <__assert_fail@plt+0xca8>
   123f8:	add	r1, sp, #40	; 0x28
   123fc:	mov	r0, #25
   12400:	mov	r2, #0
   12404:	bl	11538 <sigaction@plt>
   12408:	ldr	r0, [r4]
   1240c:	cmp	r0, #0
   12410:	ble	12810 <__assert_fail@plt+0x10b0>
   12414:	movw	r0, #53708	; 0xd1cc
   12418:	mov	r5, #0
   1241c:	movt	r0, #3
   12420:	ldr	r0, [r0]
   12424:	add	r1, r0, r5, lsl #6
   12428:	str	r5, [sp, #32]
   1242c:	ldrb	r1, [r1, #30]
   12430:	cmp	r1, #0
   12434:	beq	126a8 <__assert_fail@plt+0xf48>
   12438:	mov	r8, #0
   1243c:	mov	r9, #0
   12440:	b	1246c <__assert_fail@plt+0xd0c>
   12444:	movw	r0, #53718	; 0xd1d6
   12448:	movt	r0, #3
   1244c:	ldrb	r0, [r0]
   12450:	cmp	r0, #1
   12454:	bleq	13794 <__assert_fail@plt+0x2034>
   12458:	movw	r0, #53708	; 0xd1cc
   1245c:	adds	r8, r8, #1
   12460:	movt	r0, #3
   12464:	adc	r9, r9, #0
   12468:	ldr	r0, [r0]
   1246c:	add	r4, r0, r5, lsl #6
   12470:	mov	r6, r4
   12474:	ldrb	r1, [r6, #28]!
   12478:	cmp	r1, #0
   1247c:	bne	12490 <__assert_fail@plt+0xd30>
   12480:	ldrd	r2, [r4, #16]
   12484:	subs	r1, r2, r8
   12488:	sbcs	r1, r3, r9
   1248c:	blt	127f8 <__assert_fail@plt+0x1098>
   12490:	ldrb	sl, [r4, #29]
   12494:	cmp	sl, #0
   12498:	bleq	13438 <__assert_fail@plt+0x1cd8>
   1249c:	ldr	r0, [r4, #4]
   124a0:	cmn	r0, #1
   124a4:	ble	12544 <__assert_fail@plt+0xde4>
   124a8:	movw	r0, #53904	; 0xd290
   124ac:	movt	r0, #3
   124b0:	mov	r2, r0
   124b4:	ldrd	r0, [r0]
   124b8:	adds	r0, r0, #1
   124bc:	adc	r1, r1, #0
   124c0:	strd	r0, [r2]
   124c4:	bl	13588 <__assert_fail@plt+0x1e28>
   124c8:	cmp	r0, #0
   124cc:	beq	1287c <__assert_fail@plt+0x111c>
   124d0:	add	r7, r4, #32
   124d4:	ldr	r2, [r0]
   124d8:	ldr	r1, [r0, #4]
   124dc:	sub	r0, r2, #1
   124e0:	ldrb	r3, [r1, r0]
   124e4:	cmp	r3, #10
   124e8:	mov	r3, #0
   124ec:	moveq	r2, r0
   124f0:	mov	r0, #0
   124f4:	str	r0, [sp, #4]
   124f8:	mov	r0, r7
   124fc:	str	r2, [sp]
   12500:	bl	1b24c <__assert_fail@plt+0x9aec>
   12504:	cmn	r0, #1
   12508:	bne	125a8 <__assert_fail@plt+0xe48>
   1250c:	bl	13794 <__assert_fail@plt+0x2034>
   12510:	cmp	sl, #0
   12514:	bleq	1389c <__assert_fail@plt+0x213c>
   12518:	movw	r0, #53904	; 0xd290
   1251c:	movt	r0, #3
   12520:	mov	r2, r0
   12524:	ldrd	r0, [r0]
   12528:	adds	r0, r0, #1
   1252c:	adc	r1, r1, #0
   12530:	strd	r0, [r2]
   12534:	bl	13588 <__assert_fail@plt+0x1e28>
   12538:	cmp	r0, #0
   1253c:	bne	124d4 <__assert_fail@plt+0xd74>
   12540:	b	1287c <__assert_fail@plt+0x111c>
   12544:	add	r7, r4, #32
   12548:	movw	r0, #53904	; 0xd290
   1254c:	movt	r0, #3
   12550:	mov	r2, r0
   12554:	ldrd	r0, [r0]
   12558:	adds	r0, r0, #1
   1255c:	adc	r1, r1, #0
   12560:	strd	r0, [r2]
   12564:	bl	13588 <__assert_fail@plt+0x1e28>
   12568:	cmp	r0, #0
   1256c:	beq	128a4 <__assert_fail@plt+0x1144>
   12570:	ldr	r2, [r0]
   12574:	ldr	r1, [r0, #4]
   12578:	sub	r0, r2, #1
   1257c:	ldrb	r3, [r1, r0]
   12580:	cmp	r3, #10
   12584:	mov	r3, #0
   12588:	moveq	r2, r0
   1258c:	mov	r0, #0
   12590:	str	r0, [sp, #4]
   12594:	mov	r0, r7
   12598:	str	r2, [sp]
   1259c:	bl	1b24c <__assert_fail@plt+0x9aec>
   125a0:	cmn	r0, #1
   125a4:	beq	12548 <__assert_fail@plt+0xde8>
   125a8:	cmn	r0, #2
   125ac:	beq	12930 <__assert_fail@plt+0x11d0>
   125b0:	movw	r0, #53904	; 0xd290
   125b4:	ldrd	r2, [r4]
   125b8:	ldr	r5, [r4, #24]
   125bc:	movt	r0, #3
   125c0:	ldrd	r0, [r0]
   125c4:	adds	r6, r2, r0
   125c8:	movw	r0, #53912	; 0xd298
   125cc:	movt	r0, #3
   125d0:	adc	r3, r3, r1
   125d4:	ldr	r0, [r0]
   125d8:	cmp	r0, #0
   125dc:	bne	12600 <__assert_fail@plt+0xea0>
   125e0:	mov	r7, r3
   125e4:	bl	13940 <__assert_fail@plt+0x21e0>
   125e8:	cmp	r0, #0
   125ec:	beq	129b4 <__assert_fail@plt+0x1254>
   125f0:	movw	r0, #53912	; 0xd298
   125f4:	mov	r3, r7
   125f8:	movt	r0, #3
   125fc:	ldr	r0, [r0]
   12600:	str	r5, [sp, #20]
   12604:	str	r9, [sp, #36]	; 0x24
   12608:	ldrd	r0, [r0, #16]
   1260c:	subs	r2, r6, r0
   12610:	sbcs	r2, r3, r1
   12614:	blt	128e8 <__assert_fail@plt+0x1188>
   12618:	subs	r7, r6, r0
   1261c:	str	r6, [sp, #28]
   12620:	mov	r5, r4
   12624:	mov	r4, r8
   12628:	str	r3, [sp, #24]
   1262c:	sbc	r6, r3, r1
   12630:	subs	r0, r7, #1
   12634:	sbcs	r0, r6, #0
   12638:	blt	1266c <__assert_fail@plt+0xf0c>
   1263c:	mov	r8, #0
   12640:	mov	r9, #0
   12644:	bl	13794 <__assert_fail@plt+0x2034>
   12648:	cmp	r0, #0
   1264c:	beq	128e8 <__assert_fail@plt+0x1188>
   12650:	cmp	sl, #0
   12654:	bleq	1389c <__assert_fail@plt+0x213c>
   12658:	adds	r8, r8, #1
   1265c:	adc	r9, r9, #0
   12660:	subs	r0, r8, r7
   12664:	sbcs	r0, r9, r6
   12668:	blt	12644 <__assert_fail@plt+0xee4>
   1266c:	cmp	sl, #0
   12670:	bleq	13134 <__assert_fail@plt+0x19d4>
   12674:	ldrd	r0, [r5]
   12678:	ldr	r5, [sp, #32]
   1267c:	ldr	r9, [sp, #36]	; 0x24
   12680:	mov	r8, r4
   12684:	subs	r0, r0, #1
   12688:	sbcs	r0, r1, #0
   1268c:	ldr	r1, [sp, #28]
   12690:	blt	12444 <__assert_fail@plt+0xce4>
   12694:	movw	r0, #53904	; 0xd290
   12698:	ldr	r2, [sp, #24]
   1269c:	movt	r0, #3
   126a0:	stm	r0, {r1, r2}
   126a4:	b	12444 <__assert_fail@plt+0xce4>
   126a8:	mov	r6, #0
   126ac:	mov	r7, #0
   126b0:	b	12704 <__assert_fail@plt+0xfa4>
   126b4:	bl	13134 <__assert_fail@plt+0x19d4>
   126b8:	movw	r0, #53718	; 0xd1d6
   126bc:	movt	r0, #3
   126c0:	ldrb	r0, [r0]
   126c4:	cmp	r0, #1
   126c8:	bleq	13794 <__assert_fail@plt+0x2034>
   126cc:	movw	r0, #53904	; 0xd290
   126d0:	movt	r0, #3
   126d4:	ldrd	r0, [r0]
   126d8:	adds	r0, r0, #1
   126dc:	adc	r1, r1, #0
   126e0:	bl	13588 <__assert_fail@plt+0x1e28>
   126e4:	cmp	r0, #0
   126e8:	beq	127e0 <__assert_fail@plt+0x1080>
   126ec:	movw	r0, #53708	; 0xd1cc
   126f0:	ldr	r7, [sp, #36]	; 0x24
   126f4:	ldr	r5, [sp, #32]
   126f8:	mov	r6, r9
   126fc:	movt	r0, #3
   12700:	ldr	r0, [r0]
   12704:	add	r8, r0, r5, lsl #6
   12708:	ldrb	r1, [r8, #28]
   1270c:	cmp	r1, #0
   12710:	bne	12724 <__assert_fail@plt+0xfc4>
   12714:	ldrd	r2, [r8, #16]
   12718:	subs	r1, r2, r6
   1271c:	sbcs	r1, r3, r7
   12720:	blt	127f8 <__assert_fail@plt+0x1098>
   12724:	adds	r9, r6, #1
   12728:	adc	r0, r7, #0
   1272c:	str	r0, [sp, #36]	; 0x24
   12730:	ldrd	r4, [r8, #8]
   12734:	bl	13438 <__assert_fail@plt+0x1cd8>
   12738:	movw	r0, #53904	; 0xd290
   1273c:	movt	r0, #3
   12740:	ldrd	r0, [r0]
   12744:	adds	r0, r0, #1
   12748:	adc	r1, r1, #0
   1274c:	bl	13588 <__assert_fail@plt+0x1e28>
   12750:	cmp	r0, #0
   12754:	bne	1276c <__assert_fail@plt+0x100c>
   12758:	movw	r0, #53718	; 0xd1d6
   1275c:	movt	r0, #3
   12760:	ldrb	r0, [r0]
   12764:	cmp	r0, #1
   12768:	beq	129e0 <__assert_fail@plt+0x1280>
   1276c:	movw	r0, #53912	; 0xd298
   12770:	movt	r0, #3
   12774:	ldr	r0, [r0]
   12778:	cmp	r0, #0
   1277c:	bne	12798 <__assert_fail@plt+0x1038>
   12780:	bl	13940 <__assert_fail@plt+0x21e0>
   12784:	cmp	r0, #0
   12788:	beq	129b4 <__assert_fail@plt+0x1254>
   1278c:	movw	r0, #53912	; 0xd298
   12790:	movt	r0, #3
   12794:	ldr	r0, [r0]
   12798:	ldr	r2, [sp, #36]	; 0x24
   1279c:	umull	sl, r1, r4, r9
   127a0:	str	r7, [sp, #24]
   127a4:	str	r6, [sp, #28]
   127a8:	ldr	r7, [r0, #20]
   127ac:	mla	r1, r4, r2, r1
   127b0:	mla	r4, r5, r9, r1
   127b4:	ldr	r5, [r0, #16]
   127b8:	subs	r0, r5, sl
   127bc:	sbcs	r0, r7, r4
   127c0:	bge	126b4 <__assert_fail@plt+0xf54>
   127c4:	adds	r5, r5, #1
   127c8:	adc	r7, r7, #0
   127cc:	bl	13794 <__assert_fail@plt+0x2034>
   127d0:	cmp	r0, #0
   127d4:	beq	128d8 <__assert_fail@plt+0x1178>
   127d8:	bl	1389c <__assert_fail@plt+0x213c>
   127dc:	b	127b8 <__assert_fail@plt+0x1058>
   127e0:	movw	r0, #53718	; 0xd1d6
   127e4:	movt	r0, #3
   127e8:	ldrb	r0, [r0]
   127ec:	cmp	r0, #0
   127f0:	bne	126ec <__assert_fail@plt+0xf8c>
   127f4:	b	128d8 <__assert_fail@plt+0x1178>
   127f8:	movw	r1, #53712	; 0xd1d0
   127fc:	add	r5, r5, #1
   12800:	movt	r1, #3
   12804:	ldr	r1, [r1]
   12808:	cmp	r5, r1
   1280c:	blt	12424 <__assert_fail@plt+0xcc4>
   12810:	bl	13438 <__assert_fail@plt+0x1cd8>
   12814:	bl	13794 <__assert_fail@plt+0x2034>
   12818:	cmp	r0, #0
   1281c:	beq	12828 <__assert_fail@plt+0x10c8>
   12820:	bl	1389c <__assert_fail@plt+0x213c>
   12824:	b	12814 <__assert_fail@plt+0x10b4>
   12828:	bl	13134 <__assert_fail@plt+0x19d4>
   1282c:	mov	r0, #0
   12830:	bl	11748 <close@plt>
   12834:	cmp	r0, #0
   12838:	moveq	r0, #0
   1283c:	subeq	sp, fp, #48	; 0x30
   12840:	vpopeq	{d8-d9}
   12844:	addeq	sp, sp, #4
   12848:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1284c:	bl	11640 <__errno_location@plt>
   12850:	movw	r1, #47972	; 0xbb64
   12854:	ldr	r4, [r0]
   12858:	mov	r0, #0
   1285c:	mov	r2, #5
   12860:	movt	r1, #2
   12864:	bl	114d8 <dcgettext@plt>
   12868:	mov	r2, r0
   1286c:	mov	r0, #0
   12870:	mov	r1, r4
   12874:	bl	1158c <error@plt>
   12878:	bl	11898 <__assert_fail@plt+0x138>
   1287c:	ldrb	r0, [r6]
   12880:	cmp	r0, #0
   12884:	beq	12cb8 <__assert_fail@plt+0x1558>
   12888:	cmp	sl, #0
   1288c:	bne	128d0 <__assert_fail@plt+0x1170>
   12890:	bl	13794 <__assert_fail@plt+0x2034>
   12894:	cmp	r0, #0
   12898:	beq	128cc <__assert_fail@plt+0x116c>
   1289c:	bl	1389c <__assert_fail@plt+0x213c>
   128a0:	b	12890 <__assert_fail@plt+0x1130>
   128a4:	ldrb	r0, [r6]
   128a8:	cmp	r0, #0
   128ac:	beq	12cb8 <__assert_fail@plt+0x1558>
   128b0:	cmp	sl, #0
   128b4:	bne	128d0 <__assert_fail@plt+0x1170>
   128b8:	bl	13794 <__assert_fail@plt+0x2034>
   128bc:	cmp	r0, #0
   128c0:	beq	128cc <__assert_fail@plt+0x116c>
   128c4:	bl	1389c <__assert_fail@plt+0x213c>
   128c8:	b	128b8 <__assert_fail@plt+0x1158>
   128cc:	bl	13134 <__assert_fail@plt+0x19d4>
   128d0:	mov	r0, #0
   128d4:	bl	11610 <exit@plt>
   128d8:	ldr	r2, [sp, #28]
   128dc:	ldr	r3, [sp, #24]
   128e0:	mov	r0, r8
   128e4:	bl	13dcc <__assert_fail@plt+0x266c>
   128e8:	movw	r1, #50159	; 0xc3ef
   128ec:	mov	r0, #0
   128f0:	mov	r2, #5
   128f4:	movt	r1, #2
   128f8:	bl	114d8 <dcgettext@plt>
   128fc:	mov	r4, r0
   12900:	movw	r0, #53704	; 0xd1c8
   12904:	ldr	r1, [sp, #20]
   12908:	movt	r0, #3
   1290c:	ldr	r0, [r0]
   12910:	ldr	r0, [r0, r1, lsl #2]
   12914:	bl	15f9c <__assert_fail@plt+0x483c>
   12918:	mov	r3, r0
   1291c:	mov	r0, #0
   12920:	mov	r1, #0
   12924:	mov	r2, r4
   12928:	bl	1158c <error@plt>
   1292c:	bl	11898 <__assert_fail@plt+0x138>
   12930:	movw	r1, #50008	; 0xc358
   12934:	mov	r0, #0
   12938:	mov	r2, #5
   1293c:	movt	r1, #2
   12940:	bl	114d8 <dcgettext@plt>
   12944:	mov	r2, r0
   12948:	mov	r0, #0
   1294c:	mov	r1, #0
   12950:	bl	1158c <error@plt>
   12954:	bl	11898 <__assert_fail@plt+0x138>
   12958:	cmn	r0, #3
   1295c:	bne	12ab8 <__assert_fail@plt+0x1358>
   12960:	movw	r0, #53596	; 0xd15c
   12964:	movw	r2, #47915	; 0xbb2b
   12968:	mov	r1, #0
   1296c:	movw	r7, #47903	; 0xbb1f
   12970:	movt	r0, #3
   12974:	movt	r2, #2
   12978:	str	r1, [sp, #8]
   1297c:	movw	r1, #47882	; 0xbb0a
   12980:	movt	r7, #2
   12984:	movt	r1, #2
   12988:	ldr	r3, [r0]
   1298c:	movw	r0, #53692	; 0xd1bc
   12990:	str	r2, [sp, #4]
   12994:	movw	r2, #47889	; 0xbb11
   12998:	str	r7, [sp]
   1299c:	movt	r0, #3
   129a0:	movt	r2, #2
   129a4:	ldr	r0, [r0]
   129a8:	bl	283d4 <__assert_fail@plt+0x16c74>
   129ac:	mov	r0, #0
   129b0:	bl	11610 <exit@plt>
   129b4:	bl	11640 <__errno_location@plt>
   129b8:	movw	r1, #50137	; 0xc3d9
   129bc:	ldr	r4, [r0]
   129c0:	mov	r0, #0
   129c4:	mov	r2, #5
   129c8:	movt	r1, #2
   129cc:	bl	114d8 <dcgettext@plt>
   129d0:	mov	r2, r0
   129d4:	mov	r0, #1
   129d8:	mov	r1, r4
   129dc:	bl	1158c <error@plt>
   129e0:	mov	r0, r8
   129e4:	mov	r2, r6
   129e8:	mov	r3, r7
   129ec:	bl	13dcc <__assert_fail@plt+0x266c>
   129f0:	movw	r1, #49823	; 0xc29f
   129f4:	mov	r0, #0
   129f8:	mov	r2, #5
   129fc:	movt	r1, #2
   12a00:	bl	114d8 <dcgettext@plt>
   12a04:	mov	r2, r0
   12a08:	mov	r0, #1
   12a0c:	mov	r1, #0
   12a10:	mov	r3, r7
   12a14:	str	r4, [sp]
   12a18:	bl	1158c <error@plt>
   12a1c:	movw	r1, #49858	; 0xc2c2
   12a20:	mov	r4, r0
   12a24:	mov	r0, #0
   12a28:	mov	r2, #5
   12a2c:	movt	r1, #2
   12a30:	bl	114d8 <dcgettext@plt>
   12a34:	mov	r5, r0
   12a38:	ldr	r0, [sp, #24]
   12a3c:	bl	15f9c <__assert_fail@plt+0x483c>
   12a40:	mov	r3, r0
   12a44:	mov	r0, #0
   12a48:	mov	r1, #0
   12a4c:	mov	r2, r5
   12a50:	str	r4, [sp]
   12a54:	bl	1158c <error@plt>
   12a58:	bl	11898 <__assert_fail@plt+0x138>
   12a5c:	movw	r1, #49643	; 0xc1eb
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	movt	r1, #2
   12a6c:	bl	114d8 <dcgettext@plt>
   12a70:	mov	r4, r0
   12a74:	ldr	r0, [sp, #36]	; 0x24
   12a78:	ldr	r0, [r0, r8, lsl #2]
   12a7c:	b	12bfc <__assert_fail@plt+0x149c>
   12a80:	cmp	r6, #0
   12a84:	bne	12a94 <__assert_fail@plt+0x1334>
   12a88:	movw	r1, #49438	; 0xc11e
   12a8c:	movt	r1, #2
   12a90:	b	12b1c <__assert_fail@plt+0x13bc>
   12a94:	bl	11604 <__ctype_b_loc@plt>
   12a98:	ldr	r0, [r0]
   12a9c:	add	r0, r0, r6, lsl #1
   12aa0:	ldrb	r0, [r0, #1]
   12aa4:	tst	r0, #64	; 0x40
   12aa8:	bne	12bb8 <__assert_fail@plt+0x1458>
   12aac:	movw	r1, #49520	; 0xc170
   12ab0:	movt	r1, #2
   12ab4:	b	12bc0 <__assert_fail@plt+0x1460>
   12ab8:	cmn	r0, #2
   12abc:	bne	12c64 <__assert_fail@plt+0x1504>
   12ac0:	mov	r0, #0
   12ac4:	bl	12d00 <__assert_fail@plt+0x15a0>
   12ac8:	movw	r1, #49893	; 0xc2e5
   12acc:	mov	r0, #0
   12ad0:	mov	r2, #5
   12ad4:	movt	r1, #2
   12ad8:	bl	114d8 <dcgettext@plt>
   12adc:	mov	r4, r0
   12ae0:	ldr	r0, [sp, #24]
   12ae4:	b	12bfc <__assert_fail@plt+0x149c>
   12ae8:	movw	r1, #49966	; 0xc32e
   12aec:	mov	r0, #0
   12af0:	mov	r2, #5
   12af4:	movt	r1, #2
   12af8:	bl	114d8 <dcgettext@plt>
   12afc:	mov	r4, r0
   12b00:	movw	r0, #53704	; 0xd1c8
   12b04:	movt	r0, #3
   12b08:	ldr	r0, [r0]
   12b0c:	ldr	r0, [r0, r7, lsl #2]
   12b10:	b	12bfc <__assert_fail@plt+0x149c>
   12b14:	movw	r1, #49344	; 0xc0c0
   12b18:	movt	r1, #2
   12b1c:	mov	r0, #0
   12b20:	mov	r2, #5
   12b24:	bl	114d8 <dcgettext@plt>
   12b28:	mov	r2, r0
   12b2c:	mov	r0, #1
   12b30:	mov	r1, #0
   12b34:	bl	1158c <error@plt>
   12b38:	movw	r1, #49663	; 0xc1ff
   12b3c:	mov	r0, #0
   12b40:	mov	r2, #5
   12b44:	movt	r1, #2
   12b48:	bl	114d8 <dcgettext@plt>
   12b4c:	mov	r2, r0
   12b50:	ldr	r0, [sp, #36]	; 0x24
   12b54:	ldr	r3, [r0, r8, lsl #2]
   12b58:	mov	r0, #1
   12b5c:	mov	r1, #0
   12b60:	bl	1158c <error@plt>
   12b64:	movw	r1, #49705	; 0xc229
   12b68:	mov	r0, #0
   12b6c:	mov	r2, #5
   12b70:	movt	r1, #2
   12b74:	bl	114d8 <dcgettext@plt>
   12b78:	mov	r4, r0
   12b7c:	ldr	r0, [sp, #36]	; 0x24
   12b80:	ldr	r0, [r0, r8, lsl #2]
   12b84:	bl	15f9c <__assert_fail@plt+0x483c>
   12b88:	mov	r5, r0
   12b8c:	movw	r0, #53888	; 0xd280
   12b90:	add	r2, sp, #40	; 0x28
   12b94:	movt	r0, #3
   12b98:	ldrd	r0, [r0]
   12b9c:	bl	14288 <__assert_fail@plt+0x2b28>
   12ba0:	str	r0, [sp]
   12ba4:	mov	r0, #1
   12ba8:	mov	r1, #0
   12bac:	mov	r2, r4
   12bb0:	mov	r3, r5
   12bb4:	bl	1158c <error@plt>
   12bb8:	movw	r1, #49477	; 0xc145
   12bbc:	movt	r1, #2
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	bl	114d8 <dcgettext@plt>
   12bcc:	mov	r2, r0
   12bd0:	mov	r0, #1
   12bd4:	mov	r1, #0
   12bd8:	mov	r3, r6
   12bdc:	bl	1158c <error@plt>
   12be0:	movw	r1, #49930	; 0xc30a
   12be4:	mov	r0, #0
   12be8:	mov	r2, #5
   12bec:	movt	r1, #2
   12bf0:	bl	114d8 <dcgettext@plt>
   12bf4:	mov	r4, r0
   12bf8:	mov	r0, r6
   12bfc:	bl	15f9c <__assert_fail@plt+0x483c>
   12c00:	mov	r3, r0
   12c04:	mov	r0, #1
   12c08:	mov	r1, #0
   12c0c:	mov	r2, r4
   12c10:	bl	1158c <error@plt>
   12c14:	bl	11860 <__assert_fail@plt+0x100>
   12c18:	ldr	r1, [sp, #32]
   12c1c:	cmp	r0, r1
   12c20:	bge	12cd4 <__assert_fail@plt+0x1574>
   12c24:	movw	r1, #47947	; 0xbb4b
   12c28:	mov	r0, #0
   12c2c:	mov	r2, #5
   12c30:	movt	r1, #2
   12c34:	bl	114d8 <dcgettext@plt>
   12c38:	mov	r4, r0
   12c3c:	ldr	r0, [sp, #36]	; 0x24
   12c40:	ldr	r1, [sp, #32]
   12c44:	add	r0, r0, r1, lsl #2
   12c48:	ldr	r0, [r0, #-4]
   12c4c:	bl	15f9c <__assert_fail@plt+0x483c>
   12c50:	mov	r3, r0
   12c54:	mov	r0, #0
   12c58:	mov	r1, #0
   12c5c:	mov	r2, r4
   12c60:	bl	1158c <error@plt>
   12c64:	mov	r0, #1
   12c68:	bl	12d00 <__assert_fail@plt+0x15a0>
   12c6c:	movw	r1, #49392	; 0xc0f0
   12c70:	movt	r1, #2
   12c74:	b	12b1c <__assert_fail@plt+0x13bc>
   12c78:	bl	11640 <__errno_location@plt>
   12c7c:	movw	r1, #49616	; 0xc1d0
   12c80:	ldr	r4, [r0]
   12c84:	mov	r0, #0
   12c88:	mov	r2, #5
   12c8c:	movt	r1, #2
   12c90:	bl	114d8 <dcgettext@plt>
   12c94:	mov	r5, r0
   12c98:	mov	r0, #4
   12c9c:	mov	r1, r6
   12ca0:	bl	15a74 <__assert_fail@plt+0x4314>
   12ca4:	mov	r3, r0
   12ca8:	mov	r0, #1
   12cac:	mov	r1, r4
   12cb0:	mov	r2, r5
   12cb4:	bl	1158c <error@plt>
   12cb8:	cmp	sl, #0
   12cbc:	mov	r0, r4
   12cc0:	mov	r2, r8
   12cc4:	mov	r3, r9
   12cc8:	movwne	sl, #1
   12ccc:	str	sl, [sp]
   12cd0:	bl	13694 <__assert_fail@plt+0x1f34>
   12cd4:	movw	r1, #47931	; 0xbb3b
   12cd8:	mov	r0, #0
   12cdc:	mov	r2, #5
   12ce0:	movt	r1, #2
   12ce4:	bl	114d8 <dcgettext@plt>
   12ce8:	mov	r2, r0
   12cec:	mov	r0, #0
   12cf0:	mov	r1, #0
   12cf4:	bl	1158c <error@plt>
   12cf8:	mov	r0, #1
   12cfc:	bl	12d00 <__assert_fail@plt+0x15a0>
   12d00:	push	{fp, lr}
   12d04:	mov	fp, sp
   12d08:	sub	sp, sp, #56	; 0x38
   12d0c:	mov	r4, r0
   12d10:	cmp	r0, #0
   12d14:	bne	12fa8 <__assert_fail@plt+0x1848>
   12d18:	movw	r1, #48022	; 0xbb96
   12d1c:	mov	r0, #0
   12d20:	mov	r2, #5
   12d24:	movt	r1, #2
   12d28:	bl	114d8 <dcgettext@plt>
   12d2c:	mov	r1, r0
   12d30:	movw	r0, #53948	; 0xd2bc
   12d34:	movt	r0, #3
   12d38:	ldr	r2, [r0]
   12d3c:	mov	r0, #1
   12d40:	bl	11688 <__printf_chk@plt>
   12d44:	movw	r1, #48061	; 0xbbbd
   12d48:	mov	r0, #0
   12d4c:	mov	r2, #5
   12d50:	movt	r1, #2
   12d54:	bl	114d8 <dcgettext@plt>
   12d58:	movw	r7, #53692	; 0xd1bc
   12d5c:	movt	r7, #3
   12d60:	ldr	r1, [r7]
   12d64:	bl	113dc <fputs_unlocked@plt>
   12d68:	movw	r1, #48195	; 0xbc43
   12d6c:	mov	r0, #0
   12d70:	mov	r2, #5
   12d74:	movt	r1, #2
   12d78:	bl	114d8 <dcgettext@plt>
   12d7c:	ldr	r1, [r7]
   12d80:	bl	113dc <fputs_unlocked@plt>
   12d84:	movw	r1, #50190	; 0xc40e
   12d88:	mov	r0, #0
   12d8c:	mov	r2, #5
   12d90:	movt	r1, #2
   12d94:	bl	114d8 <dcgettext@plt>
   12d98:	ldr	r1, [r7]
   12d9c:	bl	113dc <fputs_unlocked@plt>
   12da0:	movw	r1, #48230	; 0xbc66
   12da4:	mov	r0, #0
   12da8:	mov	r2, #5
   12dac:	movt	r1, #2
   12db0:	bl	114d8 <dcgettext@plt>
   12db4:	ldr	r1, [r7]
   12db8:	bl	113dc <fputs_unlocked@plt>
   12dbc:	movw	r1, #48418	; 0xbd22
   12dc0:	mov	r0, #0
   12dc4:	mov	r2, #5
   12dc8:	movt	r1, #2
   12dcc:	bl	114d8 <dcgettext@plt>
   12dd0:	ldr	r1, [r7]
   12dd4:	bl	113dc <fputs_unlocked@plt>
   12dd8:	movw	r1, #48484	; 0xbd64
   12ddc:	mov	r0, #0
   12de0:	mov	r2, #5
   12de4:	movt	r1, #2
   12de8:	bl	114d8 <dcgettext@plt>
   12dec:	ldr	r1, [r7]
   12df0:	bl	113dc <fputs_unlocked@plt>
   12df4:	movw	r1, #48683	; 0xbe2b
   12df8:	mov	r0, #0
   12dfc:	mov	r2, #5
   12e00:	movt	r1, #2
   12e04:	bl	114d8 <dcgettext@plt>
   12e08:	ldr	r1, [r7]
   12e0c:	bl	113dc <fputs_unlocked@plt>
   12e10:	movw	r1, #48728	; 0xbe58
   12e14:	mov	r0, #0
   12e18:	mov	r2, #5
   12e1c:	movt	r1, #2
   12e20:	bl	114d8 <dcgettext@plt>
   12e24:	ldr	r1, [r7]
   12e28:	bl	113dc <fputs_unlocked@plt>
   12e2c:	movw	r1, #48782	; 0xbe8e
   12e30:	mov	r0, #0
   12e34:	mov	r2, #5
   12e38:	movt	r1, #2
   12e3c:	bl	114d8 <dcgettext@plt>
   12e40:	ldr	r1, [r7]
   12e44:	bl	113dc <fputs_unlocked@plt>
   12e48:	movw	r0, #50800	; 0xc670
   12e4c:	mov	r2, #48	; 0x30
   12e50:	mov	r6, sp
   12e54:	movw	r5, #47882	; 0xbb0a
   12e58:	movt	r0, #2
   12e5c:	movt	r5, #2
   12e60:	add	r1, r0, #32
   12e64:	add	r3, r0, #16
   12e68:	vld1.64	{d18-d19}, [r0], r2
   12e6c:	vld1.64	{d16-d17}, [r1]
   12e70:	vld1.64	{d20-d21}, [r3]
   12e74:	vldr	d22, [r0]
   12e78:	add	r1, r6, #32
   12e7c:	add	r0, r6, #16
   12e80:	vst1.64	{d16-d17}, [r1]
   12e84:	movw	r1, #50265	; 0xc459
   12e88:	vst1.64	{d20-d21}, [r0]
   12e8c:	mov	r0, r6
   12e90:	movt	r1, #2
   12e94:	vst1.64	{d18-d19}, [r0], r2
   12e98:	vstr	d22, [r0]
   12e9c:	mov	r0, r5
   12ea0:	bl	11418 <strcmp@plt>
   12ea4:	cmp	r0, #0
   12ea8:	ldrne	r1, [r6, #8]!
   12eac:	cmpne	r1, #0
   12eb0:	bne	12e9c <__assert_fail@plt+0x173c>
   12eb4:	movw	r1, #50360	; 0xc4b8
   12eb8:	ldr	r6, [r6, #4]
   12ebc:	mov	r0, #0
   12ec0:	mov	r2, #5
   12ec4:	movt	r1, #2
   12ec8:	bl	114d8 <dcgettext@plt>
   12ecc:	movw	r2, #47889	; 0xbb11
   12ed0:	movw	r3, #50383	; 0xc4cf
   12ed4:	mov	r1, r0
   12ed8:	mov	r0, #1
   12edc:	movt	r2, #2
   12ee0:	movt	r3, #2
   12ee4:	bl	11688 <__printf_chk@plt>
   12ee8:	cmp	r6, #0
   12eec:	mov	r0, #5
   12ef0:	mov	r1, #0
   12ef4:	moveq	r6, r5
   12ef8:	bl	116d0 <setlocale@plt>
   12efc:	cmp	r0, #0
   12f00:	beq	12f38 <__assert_fail@plt+0x17d8>
   12f04:	movw	r1, #50423	; 0xc4f7
   12f08:	mov	r2, #3
   12f0c:	movt	r1, #2
   12f10:	bl	11730 <strncmp@plt>
   12f14:	cmp	r0, #0
   12f18:	beq	12f38 <__assert_fail@plt+0x17d8>
   12f1c:	movw	r1, #50427	; 0xc4fb
   12f20:	mov	r0, #0
   12f24:	mov	r2, #5
   12f28:	movt	r1, #2
   12f2c:	bl	114d8 <dcgettext@plt>
   12f30:	ldr	r1, [r7]
   12f34:	bl	113dc <fputs_unlocked@plt>
   12f38:	movw	r1, #50498	; 0xc542
   12f3c:	mov	r0, #0
   12f40:	mov	r2, #5
   12f44:	movt	r1, #2
   12f48:	bl	114d8 <dcgettext@plt>
   12f4c:	movw	r2, #50383	; 0xc4cf
   12f50:	mov	r1, r0
   12f54:	mov	r0, #1
   12f58:	mov	r3, r5
   12f5c:	movt	r2, #2
   12f60:	bl	11688 <__printf_chk@plt>
   12f64:	movw	r1, #50525	; 0xc55d
   12f68:	mov	r0, #0
   12f6c:	mov	r2, #5
   12f70:	movt	r1, #2
   12f74:	bl	114d8 <dcgettext@plt>
   12f78:	mov	r1, r0
   12f7c:	movw	r0, #50293	; 0xc475
   12f80:	movw	r3, #49219	; 0xc043
   12f84:	cmp	r6, r5
   12f88:	mov	r2, r6
   12f8c:	movt	r0, #2
   12f90:	movt	r3, #2
   12f94:	moveq	r3, r0
   12f98:	mov	r0, #1
   12f9c:	bl	11688 <__printf_chk@plt>
   12fa0:	mov	r0, r4
   12fa4:	bl	11610 <exit@plt>
   12fa8:	movw	r0, #53688	; 0xd1b8
   12fac:	movw	r1, #47983	; 0xbb6f
   12fb0:	mov	r2, #5
   12fb4:	movt	r0, #3
   12fb8:	movt	r1, #2
   12fbc:	ldr	r5, [r0]
   12fc0:	mov	r0, #0
   12fc4:	bl	114d8 <dcgettext@plt>
   12fc8:	mov	r2, r0
   12fcc:	movw	r0, #53948	; 0xd2bc
   12fd0:	mov	r1, #1
   12fd4:	movt	r0, #3
   12fd8:	ldr	r3, [r0]
   12fdc:	mov	r0, r5
   12fe0:	bl	116a0 <__fprintf_chk@plt>
   12fe4:	mov	r0, r4
   12fe8:	bl	11610 <exit@plt>
   12fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff0:	add	fp, sp, #28
   12ff4:	sub	sp, sp, #12
   12ff8:	mov	r4, r0
   12ffc:	movw	r0, #53717	; 0xd1d5
   13000:	movt	r0, #3
   13004:	ldrb	r0, [r0]
   13008:	cmp	r0, #0
   1300c:	beq	130d0 <__assert_fail@plt+0x1970>
   13010:	movw	r0, #53880	; 0xd278
   13014:	str	r4, [sp, #8]
   13018:	movt	r0, #3
   1301c:	ldr	r7, [r0]
   13020:	cmp	r7, #1
   13024:	blt	130bc <__assert_fail@plt+0x195c>
   13028:	movw	r6, #53732	; 0xd1e4
   1302c:	movw	r4, #53720	; 0xd1d8
   13030:	movw	r5, #53724	; 0xd1dc
   13034:	movw	sl, #49239	; 0xc057
   13038:	movt	r6, #3
   1303c:	movt	r4, #3
   13040:	movt	r5, #3
   13044:	movt	sl, #2
   13048:	b	1307c <__assert_fail@plt+0x191c>
   1304c:	movw	r1, #53592	; 0xd158
   13050:	mvn	r2, #0
   13054:	mov	r3, sl
   13058:	movt	r1, #3
   1305c:	ldr	r1, [r1]
   13060:	stm	sp, {r1, r7}
   13064:	mov	r1, #1
   13068:	bl	11658 <__sprintf_chk@plt>
   1306c:	ldr	r0, [r6]
   13070:	bl	114e4 <unlink@plt>
   13074:	cmp	r7, #0
   13078:	ble	130bc <__assert_fail@plt+0x195c>
   1307c:	ldr	r0, [r6]
   13080:	ldr	r1, [r4]
   13084:	bl	11568 <strcpy@plt>
   13088:	ldr	r9, [r5]
   1308c:	ldr	r8, [r6]
   13090:	ldr	r0, [r4]
   13094:	bl	11628 <strlen@plt>
   13098:	add	r0, r8, r0
   1309c:	sub	r7, r7, #1
   130a0:	cmp	r9, #0
   130a4:	beq	1304c <__assert_fail@plt+0x18ec>
   130a8:	ldr	r3, [r5]
   130ac:	str	r7, [sp]
   130b0:	mov	r1, #1
   130b4:	mvn	r2, #0
   130b8:	b	13068 <__assert_fail@plt+0x1908>
   130bc:	movw	r1, #53880	; 0xd278
   130c0:	mov	r0, #0
   130c4:	movt	r1, #3
   130c8:	str	r0, [r1]
   130cc:	ldr	r4, [sp, #8]
   130d0:	mov	r0, r4
   130d4:	mov	r1, #0
   130d8:	bl	114c0 <signal@plt>
   130dc:	mov	r0, r4
   130e0:	sub	sp, fp, #28
   130e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e8:	b	113f4 <raise@plt>
   130ec:	push	{r4, sl, fp, lr}
   130f0:	add	fp, sp, #8
   130f4:	sub	sp, sp, #128	; 0x80
   130f8:	bl	13134 <__assert_fail@plt+0x19d4>
   130fc:	movw	r1, #53736	; 0xd1e8
   13100:	mov	r4, sp
   13104:	mov	r0, #0
   13108:	movt	r1, #3
   1310c:	mov	r2, r4
   13110:	bl	11448 <sigprocmask@plt>
   13114:	mov	r0, #0
   13118:	bl	132fc <__assert_fail@plt+0x1b9c>
   1311c:	mov	r0, #2
   13120:	mov	r1, r4
   13124:	mov	r2, #0
   13128:	bl	11448 <sigprocmask@plt>
   1312c:	sub	sp, fp, #8
   13130:	pop	{r4, sl, fp, pc}
   13134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13138:	add	fp, sp, #24
   1313c:	sub	sp, sp, #128	; 0x80
   13140:	movw	r7, #53864	; 0xd268
   13144:	movt	r7, #3
   13148:	ldr	r0, [r7]
   1314c:	cmp	r0, #0
   13150:	beq	1326c <__assert_fail@plt+0x1b0c>
   13154:	ldrb	r1, [r0]
   13158:	tst	r1, #32
   1315c:	bne	13274 <__assert_fail@plt+0x1b14>
   13160:	bl	13fa8 <__assert_fail@plt+0x2848>
   13164:	cmp	r0, #0
   13168:	bne	132b8 <__assert_fail@plt+0x1b58>
   1316c:	movw	r0, #53872	; 0xd270
   13170:	movt	r0, #3
   13174:	ldrd	r0, [r0]
   13178:	orrs	r2, r0, r1
   1317c:	bne	13224 <__assert_fail@plt+0x1ac4>
   13180:	movw	r2, #53728	; 0xd1e0
   13184:	movt	r2, #3
   13188:	ldrb	r2, [r2]
   1318c:	cmp	r2, #1
   13190:	bne	13224 <__assert_fail@plt+0x1ac4>
   13194:	movw	r1, #53736	; 0xd1e8
   13198:	mov	r5, sp
   1319c:	mov	r0, #0
   131a0:	movt	r1, #3
   131a4:	mov	r2, r5
   131a8:	bl	11448 <sigprocmask@plt>
   131ac:	movw	r8, #53868	; 0xd26c
   131b0:	movt	r8, #3
   131b4:	ldr	r0, [r8]
   131b8:	bl	114e4 <unlink@plt>
   131bc:	mov	r6, r0
   131c0:	bl	11640 <__errno_location@plt>
   131c4:	ldr	r4, [r0]
   131c8:	movw	r0, #53880	; 0xd278
   131cc:	mov	r2, #0
   131d0:	movt	r0, #3
   131d4:	ldr	r1, [r0]
   131d8:	sub	r1, r1, #1
   131dc:	str	r1, [r0]
   131e0:	mov	r0, #2
   131e4:	mov	r1, r5
   131e8:	bl	11448 <sigprocmask@plt>
   131ec:	cmp	r6, #0
   131f0:	cmpne	r4, #2
   131f4:	beq	13264 <__assert_fail@plt+0x1b04>
   131f8:	ldr	r2, [r8]
   131fc:	mov	r0, #0
   13200:	mov	r1, #3
   13204:	bl	15cf0 <__assert_fail@plt+0x4590>
   13208:	movw	r2, #49759	; 0xc25f
   1320c:	mov	r3, r0
   13210:	mov	r0, #0
   13214:	mov	r1, r4
   13218:	movt	r2, #2
   1321c:	bl	1158c <error@plt>
   13220:	b	13264 <__assert_fail@plt+0x1b04>
   13224:	movw	r2, #53716	; 0xd1d4
   13228:	movt	r2, #3
   1322c:	ldrb	r2, [r2]
   13230:	cmp	r2, #0
   13234:	bne	13264 <__assert_fail@plt+0x1b04>
   13238:	movw	r2, #53692	; 0xd1bc
   1323c:	movt	r2, #3
   13240:	ldr	r4, [r2]
   13244:	mov	r2, sp
   13248:	bl	14288 <__assert_fail@plt+0x2b28>
   1324c:	movw	r2, #51721	; 0xca09
   13250:	mov	r3, r0
   13254:	mov	r0, r4
   13258:	mov	r1, #1
   1325c:	movt	r2, #2
   13260:	bl	116a0 <__fprintf_chk@plt>
   13264:	mov	r0, #0
   13268:	str	r0, [r7]
   1326c:	sub	sp, fp, #24
   13270:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13274:	movw	r1, #49220	; 0xc044
   13278:	mov	r0, #0
   1327c:	mov	r2, #5
   13280:	mov	r5, #0
   13284:	movt	r1, #2
   13288:	bl	114d8 <dcgettext@plt>
   1328c:	mov	r4, r0
   13290:	movw	r0, #53868	; 0xd26c
   13294:	movt	r0, #3
   13298:	ldr	r1, [r0]
   1329c:	mov	r0, #4
   132a0:	bl	15a74 <__assert_fail@plt+0x4314>
   132a4:	mov	r3, r0
   132a8:	mov	r0, #0
   132ac:	mov	r1, #0
   132b0:	mov	r2, r4
   132b4:	b	132f0 <__assert_fail@plt+0x1b90>
   132b8:	bl	11640 <__errno_location@plt>
   132bc:	ldr	r4, [r0]
   132c0:	movw	r0, #53868	; 0xd26c
   132c4:	mov	r1, #3
   132c8:	mov	r5, #0
   132cc:	movt	r0, #3
   132d0:	ldr	r2, [r0]
   132d4:	mov	r0, #0
   132d8:	bl	15cf0 <__assert_fail@plt+0x4590>
   132dc:	movw	r2, #49759	; 0xc25f
   132e0:	mov	r3, r0
   132e4:	mov	r0, #0
   132e8:	mov	r1, r4
   132ec:	movt	r2, #2
   132f0:	bl	1158c <error@plt>
   132f4:	str	r5, [r7]
   132f8:	bl	11898 <__assert_fail@plt+0x138>
   132fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13300:	add	fp, sp, #24
   13304:	mov	r4, r0
   13308:	movw	r0, #53717	; 0xd1d5
   1330c:	movt	r0, #3
   13310:	ldrb	r0, [r0]
   13314:	cmp	r0, #0
   13318:	beq	133a8 <__assert_fail@plt+0x1c48>
   1331c:	movw	r9, #53880	; 0xd278
   13320:	movt	r9, #3
   13324:	ldr	r5, [r9]
   13328:	cmp	r5, #1
   1332c:	blt	133a0 <__assert_fail@plt+0x1c40>
   13330:	movw	r8, #49759	; 0xc25f
   13334:	movt	r8, #2
   13338:	b	13344 <__assert_fail@plt+0x1be4>
   1333c:	cmp	r5, #0
   13340:	ble	133a0 <__assert_fail@plt+0x1c40>
   13344:	sub	r5, r5, #1
   13348:	mov	r0, r5
   1334c:	bl	133ac <__assert_fail@plt+0x1c4c>
   13350:	mov	r7, r0
   13354:	bl	114e4 <unlink@plt>
   13358:	cmp	r0, #0
   1335c:	beq	1333c <__assert_fail@plt+0x1bdc>
   13360:	bl	11640 <__errno_location@plt>
   13364:	ldr	r6, [r0]
   13368:	cmp	r6, #2
   1336c:	beq	1333c <__assert_fail@plt+0x1bdc>
   13370:	cmp	r4, #0
   13374:	bne	1333c <__assert_fail@plt+0x1bdc>
   13378:	mov	r0, #0
   1337c:	mov	r1, #3
   13380:	mov	r2, r7
   13384:	bl	15cf0 <__assert_fail@plt+0x4590>
   13388:	mov	r3, r0
   1338c:	mov	r0, #0
   13390:	mov	r1, r6
   13394:	mov	r2, r8
   13398:	bl	1158c <error@plt>
   1339c:	b	1333c <__assert_fail@plt+0x1bdc>
   133a0:	mov	r0, #0
   133a4:	str	r0, [r9]
   133a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   133ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   133b0:	add	fp, sp, #24
   133b4:	sub	sp, sp, #8
   133b8:	movw	r8, #53732	; 0xd1e4
   133bc:	movw	r7, #53720	; 0xd1d8
   133c0:	mov	r4, r0
   133c4:	movt	r8, #3
   133c8:	movt	r7, #3
   133cc:	ldr	r0, [r8]
   133d0:	ldr	r1, [r7]
   133d4:	bl	11568 <strcpy@plt>
   133d8:	movw	r9, #53724	; 0xd1dc
   133dc:	movt	r9, #3
   133e0:	ldr	r5, [r9]
   133e4:	ldr	r6, [r8]
   133e8:	ldr	r0, [r7]
   133ec:	bl	11628 <strlen@plt>
   133f0:	add	r0, r6, r0
   133f4:	cmp	r5, #0
   133f8:	beq	13408 <__assert_fail@plt+0x1ca8>
   133fc:	ldr	r3, [r9]
   13400:	str	r4, [sp]
   13404:	b	13420 <__assert_fail@plt+0x1cc0>
   13408:	movw	r1, #53592	; 0xd158
   1340c:	movw	r3, #49239	; 0xc057
   13410:	movt	r1, #3
   13414:	movt	r3, #2
   13418:	ldr	r1, [r1]
   1341c:	stm	sp, {r1, r4}
   13420:	mov	r1, #1
   13424:	mvn	r2, #0
   13428:	bl	11658 <__sprintf_chk@plt>
   1342c:	ldr	r0, [r8]
   13430:	sub	sp, fp, #24
   13434:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1343c:	add	fp, sp, #28
   13440:	sub	sp, sp, #140	; 0x8c
   13444:	movw	r8, #53880	; 0xd278
   13448:	movw	r9, #53732	; 0xd1e4
   1344c:	movw	r6, #53720	; 0xd1d8
   13450:	movt	r8, #3
   13454:	movt	r9, #3
   13458:	movt	r6, #3
   1345c:	ldr	r7, [r8]
   13460:	ldr	r0, [r9]
   13464:	ldr	r1, [r6]
   13468:	bl	11568 <strcpy@plt>
   1346c:	movw	sl, #53724	; 0xd1dc
   13470:	movt	sl, #3
   13474:	ldr	r4, [sl]
   13478:	ldr	r5, [r9]
   1347c:	ldr	r0, [r6]
   13480:	bl	11628 <strlen@plt>
   13484:	add	r0, r5, r0
   13488:	cmp	r4, #0
   1348c:	beq	1349c <__assert_fail@plt+0x1d3c>
   13490:	ldr	r3, [sl]
   13494:	str	r7, [sp]
   13498:	b	134b4 <__assert_fail@plt+0x1d54>
   1349c:	movw	r1, #53592	; 0xd158
   134a0:	movw	r3, #49239	; 0xc057
   134a4:	movt	r1, #3
   134a8:	movt	r3, #2
   134ac:	ldr	r1, [r1]
   134b0:	stm	sp, {r1, r7}
   134b4:	mov	r1, #1
   134b8:	mvn	r2, #0
   134bc:	bl	11658 <__sprintf_chk@plt>
   134c0:	ldr	r2, [r9]
   134c4:	movw	sl, #53868	; 0xd26c
   134c8:	cmn	r7, #-2147483647	; 0x80000001
   134cc:	movt	sl, #3
   134d0:	str	r2, [sl]
   134d4:	beq	13580 <__assert_fail@plt+0x1e20>
   134d8:	movw	r1, #53736	; 0xd1e8
   134dc:	add	r5, sp, #12
   134e0:	mov	r0, #0
   134e4:	mov	r4, #0
   134e8:	movt	r1, #3
   134ec:	mov	r2, r5
   134f0:	bl	11448 <sigprocmask@plt>
   134f4:	ldr	r0, [sl]
   134f8:	movw	r1, #50188	; 0xc40c
   134fc:	movt	r1, #2
   13500:	bl	14108 <__assert_fail@plt+0x29a8>
   13504:	mov	r6, r0
   13508:	movw	r0, #53864	; 0xd268
   1350c:	movt	r0, #3
   13510:	cmp	r6, #0
   13514:	addne	r7, r7, #1
   13518:	str	r6, [r0]
   1351c:	bl	11640 <__errno_location@plt>
   13520:	ldr	r9, [r0]
   13524:	mov	r0, #2
   13528:	mov	r1, r5
   1352c:	mov	r2, #0
   13530:	str	r7, [r8]
   13534:	bl	11448 <sigprocmask@plt>
   13538:	cmp	r6, #0
   1353c:	movwne	r0, #53872	; 0xd270
   13540:	movtne	r0, #3
   13544:	strne	r4, [r0]
   13548:	strne	r4, [r0, #4]
   1354c:	subne	sp, fp, #28
   13550:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13554:	ldr	r2, [sl]
   13558:	mov	r0, #0
   1355c:	mov	r1, #3
   13560:	bl	15cf0 <__assert_fail@plt+0x4590>
   13564:	movw	r2, #49759	; 0xc25f
   13568:	mov	r3, r0
   1356c:	mov	r0, #0
   13570:	mov	r1, r9
   13574:	movt	r2, #2
   13578:	bl	1158c <error@plt>
   1357c:	bl	11898 <__assert_fail@plt+0x138>
   13580:	mov	r9, #75	; 0x4b
   13584:	b	13558 <__assert_fail@plt+0x1df8>
   13588:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1358c:	add	fp, sp, #24
   13590:	movw	r8, #53912	; 0xd298
   13594:	mov	r5, r1
   13598:	mov	r4, r0
   1359c:	movt	r8, #3
   135a0:	ldr	r7, [r8]
   135a4:	cmp	r7, #0
   135a8:	bne	135c0 <__assert_fail@plt+0x1e60>
   135ac:	mov	r6, #0
   135b0:	bl	13940 <__assert_fail@plt+0x21e0>
   135b4:	cmp	r0, #0
   135b8:	beq	1368c <__assert_fail@plt+0x1f2c>
   135bc:	ldr	r7, [r8]
   135c0:	ldrd	r0, [r7, #8]
   135c4:	mov	r6, #0
   135c8:	subs	r2, r4, r0
   135cc:	sbcs	r2, r5, r1
   135d0:	blt	1368c <__assert_fail@plt+0x1f2c>
   135d4:	cmp	r7, #0
   135d8:	beq	13644 <__assert_fail@plt+0x1ee4>
   135dc:	ldr	r2, [r7, #24]
   135e0:	adds	r3, r0, r2
   135e4:	adc	r1, r1, r2, asr #31
   135e8:	subs	r2, r4, r3
   135ec:	sbcs	r1, r5, r1
   135f0:	bge	13620 <__assert_fail@plt+0x1ec0>
   135f4:	mov	r1, r7
   135f8:	b	13664 <__assert_fail@plt+0x1f04>
   135fc:	ldr	r0, [r1, #8]
   13600:	ldr	r2, [r1, #24]
   13604:	ldr	r3, [r1, #12]
   13608:	adds	r7, r0, r2
   1360c:	adc	r2, r3, r2, asr #31
   13610:	subs	r3, r4, r7
   13614:	mov	r7, r1
   13618:	sbcs	r2, r5, r2
   1361c:	blt	13664 <__assert_fail@plt+0x1f04>
   13620:	ldr	r1, [r7, #40]	; 0x28
   13624:	cmp	r1, #0
   13628:	bne	135fc <__assert_fail@plt+0x1e9c>
   1362c:	bl	13940 <__assert_fail@plt+0x21e0>
   13630:	cmp	r0, #0
   13634:	beq	1368c <__assert_fail@plt+0x1f2c>
   13638:	ldr	r1, [r7, #40]	; 0x28
   1363c:	cmp	r1, #0
   13640:	bne	135fc <__assert_fail@plt+0x1e9c>
   13644:	movw	r0, #50043	; 0xc37b
   13648:	movw	r1, #50045	; 0xc37d
   1364c:	movw	r3, #50058	; 0xc38a
   13650:	movw	r2, #583	; 0x247
   13654:	movt	r0, #2
   13658:	movt	r1, #2
   1365c:	movt	r3, #2
   13660:	bl	11760 <__assert_fail@plt>
   13664:	ldr	r1, [r1, #32]
   13668:	sub	r0, r4, r0
   1366c:	cmp	r0, #80	; 0x50
   13670:	blt	13684 <__assert_fail@plt+0x1f24>
   13674:	ldr	r1, [r1, #652]	; 0x28c
   13678:	sub	r0, r0, #80	; 0x50
   1367c:	cmp	r0, #79	; 0x4f
   13680:	bgt	13674 <__assert_fail@plt+0x1f14>
   13684:	add	r0, r1, r0, lsl #3
   13688:	add	r6, r0, #12
   1368c:	mov	r0, r6
   13690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13694:	push	{fp, lr}
   13698:	mov	fp, sp
   1369c:	sub	sp, sp, #32
   136a0:	movw	r9, #53688	; 0xd1b8
   136a4:	movw	r1, #50094	; 0xc3ae
   136a8:	mov	r5, r2
   136ac:	mov	r6, r0
   136b0:	mov	r0, #0
   136b4:	mov	r2, #5
   136b8:	mov	r8, r3
   136bc:	movt	r9, #3
   136c0:	movt	r1, #2
   136c4:	ldr	r7, [r9]
   136c8:	bl	114d8 <dcgettext@plt>
   136cc:	movw	r1, #53704	; 0xd1c8
   136d0:	mov	r4, r0
   136d4:	ldr	r0, [r6, #24]
   136d8:	movt	r1, #3
   136dc:	ldr	r1, [r1]
   136e0:	ldr	r0, [r1, r0, lsl #2]
   136e4:	movw	r1, #53948	; 0xd2bc
   136e8:	movt	r1, #3
   136ec:	ldr	r6, [r1]
   136f0:	bl	15f9c <__assert_fail@plt+0x483c>
   136f4:	str	r0, [sp]
   136f8:	mov	r0, r7
   136fc:	mov	r1, #1
   13700:	mov	r2, r4
   13704:	mov	r3, r6
   13708:	bl	116a0 <__fprintf_chk@plt>
   1370c:	ldr	r7, [fp, #8]
   13710:	orrs	r0, r5, r8
   13714:	beq	1375c <__assert_fail@plt+0x1ffc>
   13718:	movw	r1, #50118	; 0xc3c6
   1371c:	ldr	r4, [r9]
   13720:	mov	r0, #0
   13724:	mov	r2, #5
   13728:	movt	r1, #2
   1372c:	bl	114d8 <dcgettext@plt>
   13730:	mov	r6, r0
   13734:	add	r2, sp, #11
   13738:	mov	r0, r5
   1373c:	mov	r1, r8
   13740:	bl	14288 <__assert_fail@plt+0x2b28>
   13744:	mov	r3, r0
   13748:	mov	r0, r4
   1374c:	mov	r1, #1
   13750:	mov	r2, r6
   13754:	bl	116a0 <__fprintf_chk@plt>
   13758:	b	13770 <__assert_fail@plt+0x2010>
   1375c:	ldr	r0, [r9]
   13760:	movw	r2, #49218	; 0xc042
   13764:	mov	r1, #1
   13768:	movt	r2, #2
   1376c:	bl	116a0 <__fprintf_chk@plt>
   13770:	cmp	r7, #0
   13774:	beq	13780 <__assert_fail@plt+0x2020>
   13778:	b	13790 <__assert_fail@plt+0x2030>
   1377c:	bl	1389c <__assert_fail@plt+0x213c>
   13780:	bl	13794 <__assert_fail@plt+0x2034>
   13784:	cmp	r0, #0
   13788:	bne	1377c <__assert_fail@plt+0x201c>
   1378c:	bl	13134 <__assert_fail@plt+0x19d4>
   13790:	bl	11898 <__assert_fail@plt+0x138>
   13794:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13798:	add	fp, sp, #24
   1379c:	movw	r7, #53936	; 0xd2b0
   137a0:	movt	r7, #3
   137a4:	ldr	r4, [r7]
   137a8:	cmp	r4, #0
   137ac:	beq	137e8 <__assert_fail@plt+0x2088>
   137b0:	ldr	r0, [r4, #32]
   137b4:	cmp	r0, #0
   137b8:	beq	137d0 <__assert_fail@plt+0x2070>
   137bc:	ldr	r6, [r0, #652]	; 0x28c
   137c0:	bl	141b8 <__assert_fail@plt+0x2a58>
   137c4:	cmp	r6, #0
   137c8:	mov	r0, r6
   137cc:	bne	137bc <__assert_fail@plt+0x205c>
   137d0:	ldr	r0, [r4, #28]
   137d4:	bl	141b8 <__assert_fail@plt+0x2a58>
   137d8:	mov	r0, r4
   137dc:	bl	141b8 <__assert_fail@plt+0x2a58>
   137e0:	mov	r0, #0
   137e4:	str	r0, [r7]
   137e8:	movw	r6, #53912	; 0xd298
   137ec:	movt	r6, #3
   137f0:	ldr	r0, [r6]
   137f4:	cmp	r0, #0
   137f8:	bne	13810 <__assert_fail@plt+0x20b0>
   137fc:	mov	r4, #0
   13800:	bl	13940 <__assert_fail@plt+0x21e0>
   13804:	cmp	r0, #0
   13808:	beq	13880 <__assert_fail@plt+0x2120>
   1380c:	ldr	r0, [r6]
   13810:	movw	r4, #53904	; 0xd290
   13814:	mov	r1, r0
   13818:	movt	r4, #3
   1381c:	ldr	r2, [r1, #16]!
   13820:	ldr	r3, [r1, #4]
   13824:	ldrd	r8, [r4]
   13828:	subs	r5, r8, r2
   1382c:	sbcs	r5, r9, r3
   13830:	strdlt	r2, [r4]
   13834:	adds	r2, r2, #1
   13838:	adc	r3, r3, #0
   1383c:	strd	r2, [r1]
   13840:	ldr	r1, [r0, #36]	; 0x24
   13844:	ldr	r3, [r1, #8]
   13848:	ldr	r2, [r1]
   1384c:	add	r5, r3, #1
   13850:	add	r3, r1, r3, lsl #3
   13854:	cmp	r5, r2
   13858:	str	r5, [r1, #8]
   1385c:	add	r4, r3, #12
   13860:	bne	13880 <__assert_fail@plt+0x2120>
   13864:	ldr	r1, [r1, #652]	; 0x28c
   13868:	cmp	r1, #0
   1386c:	str	r1, [r0, #36]	; 0x24
   13870:	beq	13888 <__assert_fail@plt+0x2128>
   13874:	ldr	r1, [r1]
   13878:	cmp	r1, #0
   1387c:	beq	13888 <__assert_fail@plt+0x2128>
   13880:	mov	r0, r4
   13884:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13888:	str	r0, [r7]
   1388c:	ldr	r0, [r0, #40]	; 0x28
   13890:	str	r0, [r6]
   13894:	mov	r0, r4
   13898:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1389c:	push	{r4, r5, r6, r7, fp, lr}
   138a0:	add	fp, sp, #16
   138a4:	movw	r6, #53864	; 0xd268
   138a8:	mov	r4, r0
   138ac:	ldr	r2, [r0]
   138b0:	ldr	r0, [r0, #4]
   138b4:	mov	r1, #1
   138b8:	movt	r6, #3
   138bc:	ldr	r3, [r6]
   138c0:	bl	114cc <fwrite_unlocked@plt>
   138c4:	ldr	r1, [r4]
   138c8:	cmp	r0, r1
   138cc:	bne	138ec <__assert_fail@plt+0x218c>
   138d0:	movw	r0, #53872	; 0xd270
   138d4:	movt	r0, #3
   138d8:	ldrd	r2, [r0]
   138dc:	adds	r2, r2, r1
   138e0:	adc	r3, r3, r1, asr #31
   138e4:	strd	r2, [r0]
   138e8:	pop	{r4, r5, r6, r7, fp, pc}
   138ec:	bl	11640 <__errno_location@plt>
   138f0:	movw	r1, #49220	; 0xc044
   138f4:	ldr	r4, [r0]
   138f8:	mov	r0, #0
   138fc:	mov	r2, #5
   13900:	mov	r7, #0
   13904:	movt	r1, #2
   13908:	bl	114d8 <dcgettext@plt>
   1390c:	mov	r5, r0
   13910:	movw	r0, #53868	; 0xd26c
   13914:	movt	r0, #3
   13918:	ldr	r1, [r0]
   1391c:	mov	r0, #4
   13920:	bl	15a74 <__assert_fail@plt+0x4314>
   13924:	mov	r3, r0
   13928:	mov	r0, #0
   1392c:	mov	r1, r4
   13930:	mov	r2, r5
   13934:	bl	1158c <error@plt>
   13938:	str	r7, [r6]
   1393c:	bl	11898 <__assert_fail@plt+0x138>
   13940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13944:	add	fp, sp, #28
   13948:	sub	sp, sp, #12
   1394c:	movw	r8, #53916	; 0xd29c
   13950:	mov	r0, #0
   13954:	movt	r8, #3
   13958:	ldrb	r1, [r8]
   1395c:	cmp	r1, #0
   13960:	bne	13d44 <__assert_fail@plt+0x25e4>
   13964:	movw	sl, #53920	; 0xd2a0
   13968:	movw	r1, #8190	; 0x1ffe
   1396c:	movw	r5, #8191	; 0x1fff
   13970:	mov	r9, #0
   13974:	movt	sl, #3
   13978:	ldr	r0, [sl]
   1397c:	cmp	r0, r1
   13980:	addgt	r5, r0, #1
   13984:	b	1399c <__assert_fail@plt+0x223c>
   13988:	ldr	r0, [r4, #28]
   1398c:	lsl	r5, r5, #1
   13990:	bl	141b8 <__assert_fail@plt+0x2a58>
   13994:	mov	r0, r4
   13998:	bl	141b8 <__assert_fail@plt+0x2a58>
   1399c:	mov	r0, #48	; 0x30
   139a0:	bl	28608 <__assert_fail@plt+0x16ea8>
   139a4:	mov	r4, r0
   139a8:	str	r9, [r0]
   139ac:	mov	r0, #1
   139b0:	mov	r2, r5
   139b4:	mvn	r3, #0
   139b8:	str	r0, [sp]
   139bc:	mov	r0, #0
   139c0:	mov	r1, r4
   139c4:	bl	28838 <__assert_fail@plt+0x170d8>
   139c8:	str	r0, [r4, #28]
   139cc:	mov	r5, r0
   139d0:	movw	r0, #53928	; 0xd2a8
   139d4:	str	r9, [r4, #4]
   139d8:	str	r9, [r4, #32]
   139dc:	str	r9, [r4, #40]	; 0x28
   139e0:	str	r9, [r4, #24]
   139e4:	str	r9, [r4, #36]	; 0x24
   139e8:	ldr	r6, [sl]
   139ec:	movt	r0, #3
   139f0:	ldrd	r0, [r0]
   139f4:	adds	r0, r0, #1
   139f8:	vmov.32	d16[0], r0
   139fc:	adc	r1, r1, #0
   13a00:	add	r0, r4, #8
   13a04:	cmp	r6, #0
   13a08:	str	r0, [sp, #8]
   13a0c:	vmov.32	d16[1], r1
   13a10:	vorr	d17, d16, d16
   13a14:	vst1.64	{d16-d17}, [r0]
   13a18:	ldr	r7, [r4]
   13a1c:	beq	13a50 <__assert_fail@plt+0x22f0>
   13a20:	movw	r0, #53924	; 0xd2a4
   13a24:	mov	r2, r6
   13a28:	movt	r0, #3
   13a2c:	ldr	r1, [r0]
   13a30:	mov	r0, r5
   13a34:	bl	11484 <memcpy@plt>
   13a38:	ldr	r0, [r4, #4]
   13a3c:	sub	r7, r7, r6
   13a40:	add	r5, r5, r6
   13a44:	str	r9, [sl]
   13a48:	add	r0, r0, r6
   13a4c:	str	r0, [r4, #4]
   13a50:	subs	r2, r7, #1
   13a54:	mov	r0, #0
   13a58:	beq	13a88 <__assert_fail@plt+0x2328>
   13a5c:	mov	r0, #0
   13a60:	mov	r1, r5
   13a64:	bl	27ee0 <__assert_fail@plt+0x16780>
   13a68:	cmp	r0, #0
   13a6c:	beq	13a7c <__assert_fail@plt+0x231c>
   13a70:	cmn	r0, #1
   13a74:	bne	13a88 <__assert_fail@plt+0x2328>
   13a78:	b	13d9c <__assert_fail@plt+0x263c>
   13a7c:	mov	r0, #1
   13a80:	strb	r0, [r8]
   13a84:	mov	r0, #0
   13a88:	ldr	r1, [r4, #4]
   13a8c:	adds	r0, r1, r0
   13a90:	str	r0, [r4, #4]
   13a94:	beq	13cb4 <__assert_fail@plt+0x2554>
   13a98:	ldr	r5, [r4, #28]
   13a9c:	mov	r1, #10
   13aa0:	mov	sl, r5
   13aa4:	strb	r1, [sl, r0]!
   13aa8:	mov	r0, r5
   13aac:	mov	r1, #10
   13ab0:	bl	11520 <rawmemchr@plt>
   13ab4:	cmp	r0, sl
   13ab8:	beq	13b7c <__assert_fail@plt+0x241c>
   13abc:	mov	r6, r0
   13ac0:	mov	r9, #0
   13ac4:	b	13b04 <__assert_fail@plt+0x23a4>
   13ac8:	ldr	r2, [r0, #4]
   13acc:	add	r1, r1, #1
   13ad0:	add	r3, r0, r2, lsl #3
   13ad4:	add	r2, r2, #1
   13ad8:	str	r8, [r3, #12]
   13adc:	str	r5, [r3, #16]
   13ae0:	add	r5, r6, #1
   13ae4:	stm	r0, {r1, r2}
   13ae8:	mov	r1, #10
   13aec:	mov	r0, r5
   13af0:	bl	11520 <rawmemchr@plt>
   13af4:	mov	r6, r0
   13af8:	add	r9, r9, #1
   13afc:	cmp	r0, sl
   13b00:	beq	13b80 <__assert_fail@plt+0x2420>
   13b04:	ldr	r0, [r4, #32]
   13b08:	sub	r7, r6, r5
   13b0c:	cmp	r0, #0
   13b10:	beq	13b1c <__assert_fail@plt+0x23bc>
   13b14:	ldr	r0, [r4, #36]	; 0x24
   13b18:	b	13b40 <__assert_fail@plt+0x23e0>
   13b1c:	mov	r0, #656	; 0x290
   13b20:	bl	28608 <__assert_fail@plt+0x16ea8>
   13b24:	mov	r1, #0
   13b28:	str	r0, [r4, #32]
   13b2c:	str	r0, [r4, #36]	; 0x24
   13b30:	str	r1, [r0, #652]	; 0x28c
   13b34:	str	r1, [r0]
   13b38:	str	r1, [r0, #4]
   13b3c:	str	r1, [r0, #8]
   13b40:	ldr	r1, [r0]
   13b44:	add	r8, r7, #1
   13b48:	cmp	r1, #80	; 0x50
   13b4c:	bne	13ac8 <__assert_fail@plt+0x2368>
   13b50:	mov	r0, #656	; 0x290
   13b54:	bl	28608 <__assert_fail@plt+0x16ea8>
   13b58:	ldr	r2, [r4, #36]	; 0x24
   13b5c:	mov	r1, #0
   13b60:	str	r1, [r0, #652]	; 0x28c
   13b64:	str	r1, [r0]
   13b68:	str	r1, [r0, #4]
   13b6c:	str	r1, [r0, #8]
   13b70:	str	r0, [r2, #652]	; 0x28c
   13b74:	str	r0, [r4, #36]	; 0x24
   13b78:	b	13ac8 <__assert_fail@plt+0x2368>
   13b7c:	mov	r9, #0
   13b80:	movw	r8, #53916	; 0xd29c
   13b84:	subs	r6, sl, r5
   13b88:	movt	r8, #3
   13b8c:	beq	13bb8 <__assert_fail@plt+0x2458>
   13b90:	ldrb	r0, [r8]
   13b94:	movw	sl, #53920	; 0xd2a0
   13b98:	movt	sl, #3
   13b9c:	cmp	r0, #1
   13ba0:	bne	13bc4 <__assert_fail@plt+0x2464>
   13ba4:	ldr	r0, [r4, #32]
   13ba8:	cmp	r0, #0
   13bac:	beq	13bf4 <__assert_fail@plt+0x2494>
   13bb0:	ldr	r0, [r4, #36]	; 0x24
   13bb4:	b	13c18 <__assert_fail@plt+0x24b8>
   13bb8:	movw	sl, #53920	; 0xd2a0
   13bbc:	movt	sl, #3
   13bc0:	b	13c6c <__assert_fail@plt+0x250c>
   13bc4:	mov	r0, r5
   13bc8:	mov	r1, r6
   13bcc:	bl	28a9c <__assert_fail@plt+0x1733c>
   13bd0:	mov	r5, r0
   13bd4:	movw	r0, #53924	; 0xd2a4
   13bd8:	movt	r0, #3
   13bdc:	mov	r7, r0
   13be0:	ldr	r0, [r0]
   13be4:	bl	141b8 <__assert_fail@plt+0x2a58>
   13be8:	str	r6, [sl]
   13bec:	str	r5, [r7]
   13bf0:	b	13c6c <__assert_fail@plt+0x250c>
   13bf4:	mov	r0, #656	; 0x290
   13bf8:	bl	28608 <__assert_fail@plt+0x16ea8>
   13bfc:	mov	r1, #0
   13c00:	str	r0, [r4, #32]
   13c04:	str	r0, [r4, #36]	; 0x24
   13c08:	str	r1, [r0, #652]	; 0x28c
   13c0c:	str	r1, [r0]
   13c10:	str	r1, [r0, #4]
   13c14:	str	r1, [r0, #8]
   13c18:	ldr	r1, [r0]
   13c1c:	cmp	r1, #80	; 0x50
   13c20:	bne	13c4c <__assert_fail@plt+0x24ec>
   13c24:	mov	r0, #656	; 0x290
   13c28:	bl	28608 <__assert_fail@plt+0x16ea8>
   13c2c:	ldr	r2, [r4, #36]	; 0x24
   13c30:	mov	r1, #0
   13c34:	str	r1, [r0, #652]	; 0x28c
   13c38:	str	r1, [r0]
   13c3c:	str	r1, [r0, #4]
   13c40:	str	r1, [r0, #8]
   13c44:	str	r0, [r2, #652]	; 0x28c
   13c48:	str	r0, [r4, #36]	; 0x24
   13c4c:	ldr	r2, [r0, #4]
   13c50:	add	r1, r1, #1
   13c54:	add	r9, r9, #1
   13c58:	add	r3, r0, r2, lsl #3
   13c5c:	add	r2, r2, #1
   13c60:	str	r6, [r3, #12]
   13c64:	str	r5, [r3, #16]
   13c68:	stm	r0, {r1, r2}
   13c6c:	movw	r0, #53928	; 0xd2a8
   13c70:	str	r9, [r4, #24]
   13c74:	movt	r0, #3
   13c78:	mov	r7, r0
   13c7c:	ldrd	r0, [r0]
   13c80:	adds	r2, r0, #1
   13c84:	vmov.32	d16[0], r2
   13c88:	adc	r3, r1, #0
   13c8c:	ldr	r2, [sp, #8]
   13c90:	adds	r0, r0, r9
   13c94:	adc	r1, r1, r9, asr #31
   13c98:	cmp	r9, #0
   13c9c:	mov	r9, #0
   13ca0:	strd	r0, [r7]
   13ca4:	vmov.32	d16[1], r3
   13ca8:	vorr	d17, d16, d16
   13cac:	vst1.64	{d16-d17}, [r2]
   13cb0:	bne	13d4c <__assert_fail@plt+0x25ec>
   13cb4:	ldrb	r0, [r8]
   13cb8:	cmp	r0, #0
   13cbc:	bne	13d10 <__assert_fail@plt+0x25b0>
   13cc0:	ldr	r5, [r4]
   13cc4:	cmn	r5, #1
   13cc8:	ble	13cd8 <__assert_fail@plt+0x2578>
   13ccc:	cmp	r5, #1073741824	; 0x40000000
   13cd0:	blt	13cec <__assert_fail@plt+0x258c>
   13cd4:	b	13d98 <__assert_fail@plt+0x2638>
   13cd8:	beq	13cec <__assert_fail@plt+0x258c>
   13cdc:	mov	r0, #-2147483648	; 0x80000000
   13ce0:	sdiv	r0, r0, r5
   13ce4:	cmp	r0, #2
   13ce8:	blt	13d98 <__assert_fail@plt+0x2638>
   13cec:	ldr	r0, [r4, #32]
   13cf0:	cmp	r0, #0
   13cf4:	beq	13988 <__assert_fail@plt+0x2228>
   13cf8:	ldr	r6, [r0, #652]	; 0x28c
   13cfc:	bl	141b8 <__assert_fail@plt+0x2a58>
   13d00:	cmp	r6, #0
   13d04:	mov	r0, r6
   13d08:	bne	13cf8 <__assert_fail@plt+0x2598>
   13d0c:	b	13988 <__assert_fail@plt+0x2228>
   13d10:	ldr	r0, [r4, #32]
   13d14:	cmp	r0, #0
   13d18:	beq	13d30 <__assert_fail@plt+0x25d0>
   13d1c:	ldr	r5, [r0, #652]	; 0x28c
   13d20:	bl	141b8 <__assert_fail@plt+0x2a58>
   13d24:	cmp	r5, #0
   13d28:	mov	r0, r5
   13d2c:	bne	13d1c <__assert_fail@plt+0x25bc>
   13d30:	ldr	r0, [r4, #28]
   13d34:	bl	141b8 <__assert_fail@plt+0x2a58>
   13d38:	mov	r0, r4
   13d3c:	bl	141b8 <__assert_fail@plt+0x2a58>
   13d40:	mov	r0, #0
   13d44:	sub	sp, fp, #28
   13d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d4c:	ldr	r1, [r4, #32]
   13d50:	mov	r0, #0
   13d54:	str	r1, [r4, #36]	; 0x24
   13d58:	movw	r1, #53912	; 0xd298
   13d5c:	str	r0, [r4, #40]	; 0x28
   13d60:	movt	r1, #3
   13d64:	ldr	r0, [r1]
   13d68:	cmp	r0, #0
   13d6c:	beq	13d88 <__assert_fail@plt+0x2628>
   13d70:	mov	r1, r0
   13d74:	ldr	r0, [r0, #40]	; 0x28
   13d78:	cmp	r0, #0
   13d7c:	bne	13d70 <__assert_fail@plt+0x2610>
   13d80:	str	r4, [r1, #40]	; 0x28
   13d84:	b	13d8c <__assert_fail@plt+0x262c>
   13d88:	str	r4, [r1]
   13d8c:	mov	r0, #1
   13d90:	sub	sp, fp, #28
   13d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d98:	bl	11860 <__assert_fail@plt+0x100>
   13d9c:	bl	11640 <__errno_location@plt>
   13da0:	movw	r1, #47972	; 0xbb64
   13da4:	ldr	r4, [r0]
   13da8:	mov	r0, #0
   13dac:	mov	r2, #5
   13db0:	movt	r1, #2
   13db4:	bl	114d8 <dcgettext@plt>
   13db8:	mov	r2, r0
   13dbc:	mov	r0, #0
   13dc0:	mov	r1, r4
   13dc4:	bl	1158c <error@plt>
   13dc8:	bl	11898 <__assert_fail@plt+0x138>
   13dcc:	push	{fp, lr}
   13dd0:	mov	fp, sp
   13dd4:	sub	sp, sp, #32
   13dd8:	movw	sl, #53688	; 0xd1b8
   13ddc:	movw	r1, #50155	; 0xc3eb
   13de0:	mov	r9, r2
   13de4:	mov	r6, r0
   13de8:	mov	r0, #0
   13dec:	mov	r2, #5
   13df0:	mov	r8, r3
   13df4:	movt	sl, #3
   13df8:	movt	r1, #2
   13dfc:	ldr	r7, [sl]
   13e00:	bl	114d8 <dcgettext@plt>
   13e04:	mov	r4, r0
   13e08:	movw	r0, #53948	; 0xd2bc
   13e0c:	add	r2, sp, #11
   13e10:	movt	r0, #3
   13e14:	ldr	r5, [r0]
   13e18:	ldrd	r0, [r6, #8]
   13e1c:	bl	14288 <__assert_fail@plt+0x2b28>
   13e20:	bl	15f9c <__assert_fail@plt+0x483c>
   13e24:	str	r0, [sp]
   13e28:	mov	r0, r7
   13e2c:	mov	r1, #1
   13e30:	mov	r2, r4
   13e34:	mov	r3, r5
   13e38:	bl	116a0 <__fprintf_chk@plt>
   13e3c:	ldr	r6, [sl]
   13e40:	orrs	r0, r9, r8
   13e44:	bne	13e60 <__assert_fail@plt+0x2700>
   13e48:	movw	r2, #49218	; 0xc042
   13e4c:	mov	r0, r6
   13e50:	mov	r1, #1
   13e54:	movt	r2, #2
   13e58:	bl	116a0 <__fprintf_chk@plt>
   13e5c:	bl	11898 <__assert_fail@plt+0x138>
   13e60:	movw	r1, #50118	; 0xc3c6
   13e64:	mov	r0, #0
   13e68:	mov	r2, #5
   13e6c:	movt	r1, #2
   13e70:	bl	114d8 <dcgettext@plt>
   13e74:	mov	r4, r0
   13e78:	add	r2, sp, #11
   13e7c:	mov	r0, r9
   13e80:	mov	r1, r8
   13e84:	bl	14288 <__assert_fail@plt+0x2b28>
   13e88:	mov	r3, r0
   13e8c:	mov	r0, r6
   13e90:	mov	r1, #1
   13e94:	mov	r2, r4
   13e98:	bl	116a0 <__fprintf_chk@plt>
   13e9c:	bl	11898 <__assert_fail@plt+0x138>
   13ea0:	movw	r1, #53940	; 0xd2b4
   13ea4:	movt	r1, #3
   13ea8:	str	r0, [r1]
   13eac:	bx	lr
   13eb0:	movw	r1, #53944	; 0xd2b8
   13eb4:	movt	r1, #3
   13eb8:	strb	r0, [r1]
   13ebc:	bx	lr
   13ec0:	push	{r4, r5, r6, sl, fp, lr}
   13ec4:	add	fp, sp, #16
   13ec8:	sub	sp, sp, #8
   13ecc:	movw	r0, #53692	; 0xd1bc
   13ed0:	movt	r0, #3
   13ed4:	ldr	r0, [r0]
   13ed8:	bl	2b2e4 <__assert_fail@plt+0x19b84>
   13edc:	cmp	r0, #0
   13ee0:	beq	13f08 <__assert_fail@plt+0x27a8>
   13ee4:	movw	r0, #53944	; 0xd2b8
   13ee8:	movt	r0, #3
   13eec:	ldrb	r0, [r0]
   13ef0:	cmp	r0, #0
   13ef4:	beq	13f28 <__assert_fail@plt+0x27c8>
   13ef8:	bl	11640 <__errno_location@plt>
   13efc:	ldr	r0, [r0]
   13f00:	cmp	r0, #32
   13f04:	bne	13f28 <__assert_fail@plt+0x27c8>
   13f08:	movw	r0, #53688	; 0xd1b8
   13f0c:	movt	r0, #3
   13f10:	ldr	r0, [r0]
   13f14:	bl	2b2e4 <__assert_fail@plt+0x19b84>
   13f18:	cmp	r0, #0
   13f1c:	subeq	sp, fp, #16
   13f20:	popeq	{r4, r5, r6, sl, fp, pc}
   13f24:	b	13f98 <__assert_fail@plt+0x2838>
   13f28:	movw	r1, #50871	; 0xc6b7
   13f2c:	mov	r0, #0
   13f30:	mov	r2, #5
   13f34:	movt	r1, #2
   13f38:	bl	114d8 <dcgettext@plt>
   13f3c:	mov	r4, r0
   13f40:	movw	r0, #53940	; 0xd2b4
   13f44:	movt	r0, #3
   13f48:	ldr	r6, [r0]
   13f4c:	bl	11640 <__errno_location@plt>
   13f50:	ldr	r5, [r0]
   13f54:	cmp	r6, #0
   13f58:	bne	13f74 <__assert_fail@plt+0x2814>
   13f5c:	movw	r2, #49759	; 0xc25f
   13f60:	mov	r0, #0
   13f64:	mov	r1, r5
   13f68:	mov	r3, r4
   13f6c:	movt	r2, #2
   13f70:	b	13f94 <__assert_fail@plt+0x2834>
   13f74:	mov	r0, r6
   13f78:	bl	15c14 <__assert_fail@plt+0x44b4>
   13f7c:	movw	r2, #50883	; 0xc6c3
   13f80:	mov	r3, r0
   13f84:	str	r4, [sp]
   13f88:	mov	r0, #0
   13f8c:	mov	r1, r5
   13f90:	movt	r2, #2
   13f94:	bl	1158c <error@plt>
   13f98:	movw	r0, #53600	; 0xd160
   13f9c:	movt	r0, #3
   13fa0:	ldr	r0, [r0]
   13fa4:	bl	11478 <_exit@plt>
   13fa8:	push	{r4, r5, r6, sl, fp, lr}
   13fac:	add	fp, sp, #16
   13fb0:	sub	sp, sp, #8
   13fb4:	mov	r4, r0
   13fb8:	bl	11694 <fileno@plt>
   13fbc:	cmn	r0, #1
   13fc0:	ble	14034 <__assert_fail@plt+0x28d4>
   13fc4:	mov	r0, r4
   13fc8:	bl	115c8 <__freading@plt>
   13fcc:	cmp	r0, #0
   13fd0:	beq	13ffc <__assert_fail@plt+0x289c>
   13fd4:	mov	r0, r4
   13fd8:	bl	11694 <fileno@plt>
   13fdc:	mov	r1, #1
   13fe0:	mov	r2, #0
   13fe4:	mov	r3, #0
   13fe8:	str	r1, [sp]
   13fec:	bl	11550 <lseek64@plt>
   13ff0:	and	r0, r0, r1
   13ff4:	cmn	r0, #1
   13ff8:	beq	14034 <__assert_fail@plt+0x28d4>
   13ffc:	mov	r0, r4
   14000:	bl	140ac <__assert_fail@plt+0x294c>
   14004:	cmp	r0, #0
   14008:	beq	14034 <__assert_fail@plt+0x28d4>
   1400c:	bl	11640 <__errno_location@plt>
   14010:	ldr	r6, [r0]
   14014:	mov	r5, r0
   14018:	mov	r0, r4
   1401c:	bl	116ac <fclose@plt>
   14020:	cmp	r6, #0
   14024:	strne	r6, [r5]
   14028:	mvnne	r0, #0
   1402c:	sub	sp, fp, #16
   14030:	pop	{r4, r5, r6, sl, fp, pc}
   14034:	mov	r0, r4
   14038:	sub	sp, fp, #16
   1403c:	pop	{r4, r5, r6, sl, fp, lr}
   14040:	b	116ac <fclose@plt>
   14044:	push	{r4, r5, r6, r7, fp, lr}
   14048:	add	fp, sp, #16
   1404c:	mov	r5, r0
   14050:	mov	r0, r1
   14054:	mov	r1, r2
   14058:	mov	r2, r3
   1405c:	bl	11598 <open64@plt>
   14060:	mov	r4, r0
   14064:	cmp	r0, r5
   14068:	beq	140a4 <__assert_fail@plt+0x2944>
   1406c:	cmp	r4, #0
   14070:	bmi	140a4 <__assert_fail@plt+0x2944>
   14074:	mov	r0, r4
   14078:	mov	r1, r5
   1407c:	bl	114f0 <dup2@plt>
   14080:	mov	r5, r0
   14084:	bl	11640 <__errno_location@plt>
   14088:	ldr	r7, [r0]
   1408c:	mov	r6, r0
   14090:	mov	r0, r4
   14094:	bl	11748 <close@plt>
   14098:	mov	r0, r5
   1409c:	str	r7, [r6]
   140a0:	pop	{r4, r5, r6, r7, fp, pc}
   140a4:	mov	r0, r4
   140a8:	pop	{r4, r5, r6, r7, fp, pc}
   140ac:	push	{r4, sl, fp, lr}
   140b0:	add	fp, sp, #8
   140b4:	sub	sp, sp, #8
   140b8:	mov	r4, r0
   140bc:	cmp	r0, #0
   140c0:	beq	140f8 <__assert_fail@plt+0x2998>
   140c4:	mov	r0, r4
   140c8:	bl	115c8 <__freading@plt>
   140cc:	cmp	r0, #0
   140d0:	beq	140f8 <__assert_fail@plt+0x2998>
   140d4:	ldrb	r0, [r4, #1]
   140d8:	tst	r0, #1
   140dc:	beq	140f8 <__assert_fail@plt+0x2998>
   140e0:	mov	r0, #1
   140e4:	mov	r2, #0
   140e8:	mov	r3, #0
   140ec:	str	r0, [sp]
   140f0:	mov	r0, r4
   140f4:	bl	141e0 <__assert_fail@plt+0x2a80>
   140f8:	mov	r0, r4
   140fc:	sub	sp, fp, #8
   14100:	pop	{r4, sl, fp, lr}
   14104:	b	1143c <fflush@plt>
   14108:	push	{r4, r5, r6, r7, fp, lr}
   1410c:	add	fp, sp, #16
   14110:	mov	r5, r1
   14114:	bl	1170c <fopen64@plt>
   14118:	mov	r4, #0
   1411c:	cmp	r0, #0
   14120:	beq	14188 <__assert_fail@plt+0x2a28>
   14124:	mov	r6, r0
   14128:	bl	11694 <fileno@plt>
   1412c:	cmp	r0, #2
   14130:	bhi	14190 <__assert_fail@plt+0x2a30>
   14134:	bl	27f44 <__assert_fail@plt+0x167e4>
   14138:	cmn	r0, #1
   1413c:	ble	14198 <__assert_fail@plt+0x2a38>
   14140:	mov	r7, r0
   14144:	mov	r0, r6
   14148:	bl	13fa8 <__assert_fail@plt+0x2848>
   1414c:	cmp	r0, #0
   14150:	bne	1416c <__assert_fail@plt+0x2a0c>
   14154:	mov	r0, r7
   14158:	mov	r1, r5
   1415c:	bl	113c4 <fdopen@plt>
   14160:	mov	r4, r0
   14164:	cmp	r0, #0
   14168:	bne	14188 <__assert_fail@plt+0x2a28>
   1416c:	bl	11640 <__errno_location@plt>
   14170:	ldr	r5, [r0]
   14174:	mov	r4, r0
   14178:	mov	r0, r7
   1417c:	bl	11748 <close@plt>
   14180:	str	r5, [r4]
   14184:	mov	r4, #0
   14188:	mov	r0, r4
   1418c:	pop	{r4, r5, r6, r7, fp, pc}
   14190:	mov	r0, r6
   14194:	pop	{r4, r5, r6, r7, fp, pc}
   14198:	bl	11640 <__errno_location@plt>
   1419c:	ldr	r7, [r0]
   141a0:	mov	r5, r0
   141a4:	mov	r0, r6
   141a8:	bl	13fa8 <__assert_fail@plt+0x2848>
   141ac:	mov	r0, r4
   141b0:	str	r7, [r5]
   141b4:	pop	{r4, r5, r6, r7, fp, pc}
   141b8:	push	{r4, r5, r6, sl, fp, lr}
   141bc:	add	fp, sp, #16
   141c0:	mov	r4, r0
   141c4:	bl	11640 <__errno_location@plt>
   141c8:	ldr	r6, [r0]
   141cc:	mov	r5, r0
   141d0:	mov	r0, r4
   141d4:	bl	11460 <free@plt>
   141d8:	str	r6, [r5]
   141dc:	pop	{r4, r5, r6, sl, fp, pc}
   141e0:	push	{r4, r5, r6, r7, fp, lr}
   141e4:	add	fp, sp, #16
   141e8:	sub	sp, sp, #8
   141ec:	mov	r4, r0
   141f0:	ldr	r0, [r0, #4]
   141f4:	mov	r5, r3
   141f8:	mov	r6, r2
   141fc:	ldr	r1, [r4, #8]
   14200:	cmp	r1, r0
   14204:	bne	14220 <__assert_fail@plt+0x2ac0>
   14208:	ldrd	r0, [r4, #16]
   1420c:	cmp	r1, r0
   14210:	bne	14220 <__assert_fail@plt+0x2ac0>
   14214:	ldr	r0, [r4, #36]	; 0x24
   14218:	cmp	r0, #0
   1421c:	beq	14238 <__assert_fail@plt+0x2ad8>
   14220:	mov	r0, r4
   14224:	mov	r2, r6
   14228:	mov	r3, r5
   1422c:	sub	sp, fp, #16
   14230:	pop	{r4, r5, r6, r7, fp, lr}
   14234:	b	116b8 <fseeko64@plt>
   14238:	ldr	r7, [fp, #8]
   1423c:	mov	r0, r4
   14240:	bl	11694 <fileno@plt>
   14244:	mov	r2, r6
   14248:	mov	r3, r5
   1424c:	str	r7, [sp]
   14250:	bl	11550 <lseek64@plt>
   14254:	and	r2, r0, r1
   14258:	cmn	r2, #1
   1425c:	beq	1427c <__assert_fail@plt+0x2b1c>
   14260:	strd	r0, [r4, #80]	; 0x50
   14264:	ldr	r0, [r4]
   14268:	bic	r0, r0, #16
   1426c:	str	r0, [r4]
   14270:	mov	r0, #0
   14274:	sub	sp, fp, #16
   14278:	pop	{r4, r5, r6, r7, fp, pc}
   1427c:	mvn	r0, #0
   14280:	sub	sp, fp, #16
   14284:	pop	{r4, r5, r6, r7, fp, pc}
   14288:	push	{r4, r5, r6, sl, fp, lr}
   1428c:	add	fp, sp, #16
   14290:	mov	r5, r0
   14294:	mov	r0, #0
   14298:	mov	r4, r1
   1429c:	add	r6, r2, #19
   142a0:	cmp	r1, #0
   142a4:	strb	r0, [r2, #20]
   142a8:	bmi	142f8 <__assert_fail@plt+0x2b98>
   142ac:	mov	r0, r5
   142b0:	mov	r1, r4
   142b4:	mov	r2, #10
   142b8:	mov	r3, #0
   142bc:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   142c0:	add	r2, r0, r0, lsl #2
   142c4:	sub	r2, r5, r2, lsl #1
   142c8:	add	r2, r2, #48	; 0x30
   142cc:	strb	r2, [r6], #-1
   142d0:	adds	r2, r5, #9
   142d4:	mov	r5, r0
   142d8:	adc	r3, r4, #0
   142dc:	rsbs	r2, r2, #18
   142e0:	mov	r4, r1
   142e4:	rscs	r2, r3, #0
   142e8:	bcc	142ac <__assert_fail@plt+0x2b4c>
   142ec:	add	r6, r6, #1
   142f0:	mov	r0, r6
   142f4:	pop	{r4, r5, r6, sl, fp, pc}
   142f8:	mov	r0, r5
   142fc:	mov	r1, r4
   14300:	mov	r2, #10
   14304:	mov	r3, #0
   14308:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   1430c:	add	r2, r0, r0, lsl #2
   14310:	rsb	r2, r5, r2, lsl #1
   14314:	add	r2, r2, #48	; 0x30
   14318:	strb	r2, [r6], #-1
   1431c:	adds	r2, r5, #9
   14320:	mov	r5, r0
   14324:	adc	r3, r4, #0
   14328:	rsbs	r2, r2, #18
   1432c:	mov	r4, r1
   14330:	rscs	r2, r3, #0
   14334:	bcc	142f8 <__assert_fail@plt+0x2b98>
   14338:	mov	r0, #45	; 0x2d
   1433c:	strb	r0, [r6]
   14340:	mov	r0, r6
   14344:	pop	{r4, r5, r6, sl, fp, pc}
   14348:	push	{r4, r5, fp, lr}
   1434c:	add	fp, sp, #8
   14350:	cmp	r0, #0
   14354:	beq	143e8 <__assert_fail@plt+0x2c88>
   14358:	mov	r1, #47	; 0x2f
   1435c:	mov	r4, r0
   14360:	bl	116e8 <strrchr@plt>
   14364:	cmp	r0, #0
   14368:	mov	r5, r4
   1436c:	addne	r5, r0, #1
   14370:	sub	r0, r5, r4
   14374:	cmp	r0, #7
   14378:	blt	143cc <__assert_fail@plt+0x2c6c>
   1437c:	movw	r1, #50946	; 0xc702
   14380:	sub	r0, r5, #7
   14384:	mov	r2, #7
   14388:	movt	r1, #2
   1438c:	bl	11730 <strncmp@plt>
   14390:	cmp	r0, #0
   14394:	bne	143cc <__assert_fail@plt+0x2c6c>
   14398:	movw	r1, #50954	; 0xc70a
   1439c:	mov	r0, r5
   143a0:	mov	r2, #3
   143a4:	movt	r1, #2
   143a8:	bl	11730 <strncmp@plt>
   143ac:	cmp	r0, #0
   143b0:	beq	143bc <__assert_fail@plt+0x2c5c>
   143b4:	mov	r4, r5
   143b8:	b	143cc <__assert_fail@plt+0x2c6c>
   143bc:	movw	r0, #53672	; 0xd1a8
   143c0:	add	r4, r5, #3
   143c4:	movt	r0, #3
   143c8:	str	r4, [r0]
   143cc:	movw	r0, #53676	; 0xd1ac
   143d0:	movt	r0, #3
   143d4:	str	r4, [r0]
   143d8:	movw	r0, #53948	; 0xd2bc
   143dc:	movt	r0, #3
   143e0:	str	r4, [r0]
   143e4:	pop	{r4, r5, fp, pc}
   143e8:	movw	r0, #53688	; 0xd1b8
   143ec:	mov	r1, #55	; 0x37
   143f0:	mov	r2, #1
   143f4:	movt	r0, #3
   143f8:	ldr	r3, [r0]
   143fc:	movw	r0, #50890	; 0xc6ca
   14400:	movt	r0, #2
   14404:	bl	11544 <fwrite@plt>
   14408:	bl	1173c <abort@plt>
   1440c:	push	{r4, r5, r6, sl, fp, lr}
   14410:	add	fp, sp, #16
   14414:	mov	r4, r0
   14418:	movw	r0, #53952	; 0xd2c0
   1441c:	movt	r0, #3
   14420:	cmp	r4, #0
   14424:	moveq	r4, r0
   14428:	bl	11640 <__errno_location@plt>
   1442c:	ldr	r6, [r0]
   14430:	mov	r5, r0
   14434:	mov	r0, r4
   14438:	mov	r1, #48	; 0x30
   1443c:	bl	28a68 <__assert_fail@plt+0x17308>
   14440:	str	r6, [r5]
   14444:	pop	{r4, r5, r6, sl, fp, pc}
   14448:	movw	r1, #53952	; 0xd2c0
   1444c:	cmp	r0, #0
   14450:	movt	r1, #3
   14454:	movne	r1, r0
   14458:	ldr	r0, [r1]
   1445c:	bx	lr
   14460:	movw	r2, #53952	; 0xd2c0
   14464:	cmp	r0, #0
   14468:	movt	r2, #3
   1446c:	movne	r2, r0
   14470:	str	r1, [r2]
   14474:	bx	lr
   14478:	movw	r3, #53952	; 0xd2c0
   1447c:	cmp	r0, #0
   14480:	and	r2, r2, #1
   14484:	movt	r3, #3
   14488:	movne	r3, r0
   1448c:	ubfx	r0, r1, #5, #3
   14490:	and	r1, r1, #31
   14494:	add	ip, r3, r0, lsl #2
   14498:	mov	r0, #1
   1449c:	ldr	r3, [ip, #8]
   144a0:	and	r0, r0, r3, lsr r1
   144a4:	eor	r2, r0, r2
   144a8:	eor	r1, r3, r2, lsl r1
   144ac:	str	r1, [ip, #8]
   144b0:	bx	lr
   144b4:	movw	r2, #53952	; 0xd2c0
   144b8:	cmp	r0, #0
   144bc:	movt	r2, #3
   144c0:	movne	r2, r0
   144c4:	ldr	r0, [r2, #4]
   144c8:	str	r1, [r2, #4]
   144cc:	bx	lr
   144d0:	push	{fp, lr}
   144d4:	mov	fp, sp
   144d8:	movw	r3, #53952	; 0xd2c0
   144dc:	cmp	r0, #0
   144e0:	movt	r3, #3
   144e4:	movne	r3, r0
   144e8:	cmp	r1, #0
   144ec:	mov	r0, #10
   144f0:	cmpne	r2, #0
   144f4:	str	r0, [r3]
   144f8:	bne	14500 <__assert_fail@plt+0x2da0>
   144fc:	bl	1173c <abort@plt>
   14500:	str	r1, [r3, #40]	; 0x28
   14504:	str	r2, [r3, #44]	; 0x2c
   14508:	pop	{fp, pc}
   1450c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14510:	add	fp, sp, #28
   14514:	sub	sp, sp, #20
   14518:	mov	r7, r0
   1451c:	ldr	r0, [fp, #8]
   14520:	movw	r5, #53952	; 0xd2c0
   14524:	mov	r8, r3
   14528:	mov	r9, r2
   1452c:	mov	sl, r1
   14530:	movt	r5, #3
   14534:	cmp	r0, #0
   14538:	movne	r5, r0
   1453c:	bl	11640 <__errno_location@plt>
   14540:	ldr	r2, [r5, #40]	; 0x28
   14544:	ldr	r3, [r5, #44]	; 0x2c
   14548:	mov	r4, r0
   1454c:	ldm	r5, {r0, r1}
   14550:	add	r5, r5, #8
   14554:	ldr	r6, [r4]
   14558:	stm	sp, {r0, r1, r5}
   1455c:	mov	r0, r7
   14560:	mov	r1, sl
   14564:	str	r2, [sp, #12]
   14568:	str	r3, [sp, #16]
   1456c:	mov	r2, r9
   14570:	mov	r3, r8
   14574:	bl	14584 <__assert_fail@plt+0x2e24>
   14578:	str	r6, [r4]
   1457c:	sub	sp, fp, #28
   14580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14588:	add	fp, sp, #28
   1458c:	sub	sp, sp, #156	; 0x9c
   14590:	mov	r5, r0
   14594:	add	r0, r2, #1
   14598:	mov	r6, r1
   1459c:	mov	sl, r3
   145a0:	str	r2, [fp, #-80]	; 0xffffffb0
   145a4:	str	r0, [sp, #72]	; 0x48
   145a8:	ldr	r0, [fp, #12]
   145ac:	and	r1, r0, #1
   145b0:	str	r1, [sp, #36]	; 0x24
   145b4:	and	r1, r0, #4
   145b8:	str	r1, [sp, #32]
   145bc:	ubfx	r9, r0, #1, #1
   145c0:	bl	1155c <__ctype_get_mb_cur_max@plt>
   145c4:	str	r0, [sp, #40]	; 0x28
   145c8:	ldr	r0, [fp, #24]
   145cc:	ldr	r7, [fp, #8]
   145d0:	mov	r1, #0
   145d4:	str	r5, [fp, #-84]	; 0xffffffac
   145d8:	str	r1, [fp, #-56]	; 0xffffffc8
   145dc:	mov	r1, #0
   145e0:	str	r1, [sp, #60]	; 0x3c
   145e4:	mov	r1, #1
   145e8:	str	r1, [fp, #-48]	; 0xffffffd0
   145ec:	str	r0, [sp, #80]	; 0x50
   145f0:	ldr	r0, [fp, #20]
   145f4:	str	r0, [sp, #76]	; 0x4c
   145f8:	mov	r0, #0
   145fc:	str	r0, [sp, #56]	; 0x38
   14600:	mov	r0, #0
   14604:	str	r0, [fp, #-88]	; 0xffffffa8
   14608:	mov	r0, #0
   1460c:	str	r0, [fp, #-72]	; 0xffffffb8
   14610:	mov	r0, #0
   14614:	cmp	r7, #10
   14618:	bhi	155ac <__assert_fail@plt+0x3e4c>
   1461c:	add	r1, pc, #24
   14620:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14624:	mov	r4, r6
   14628:	mov	r8, #0
   1462c:	mov	r2, #1
   14630:	mov	r3, #0
   14634:	mov	lr, sl
   14638:	ldr	pc, [r1, r7, lsl #2]
   1463c:	andeq	r4, r1, r0, lsl #14
   14640:	andeq	r4, r1, r4, asr r7
   14644:	andeq	r4, r1, r4, lsl r7
   14648:	strdeq	r4, [r1], -r8
   1464c:	andeq	r4, r1, r8, asr #14
   14650:	andeq	r4, r1, ip, ror r7
   14654:	andeq	r4, r1, r4, lsr #14
   14658:	andeq	r4, r1, r0, lsl #16
   1465c:	andeq	r4, r1, r8, ror #12
   14660:	andeq	r4, r1, r8, ror #12
   14664:	muleq	r1, r0, r6
   14668:	movw	r0, #51036	; 0xc75c
   1466c:	mov	r1, r7
   14670:	movt	r0, #2
   14674:	bl	15fb4 <__assert_fail@plt+0x4854>
   14678:	str	r0, [sp, #76]	; 0x4c
   1467c:	movw	r0, #50006	; 0xc356
   14680:	mov	r1, r7
   14684:	movt	r0, #2
   14688:	bl	15fb4 <__assert_fail@plt+0x4854>
   1468c:	str	r0, [sp, #80]	; 0x50
   14690:	mov	r8, #0
   14694:	tst	r9, #1
   14698:	bne	146d0 <__assert_fail@plt+0x2f70>
   1469c:	ldr	r0, [sp, #76]	; 0x4c
   146a0:	ldrb	r0, [r0]
   146a4:	cmp	r0, #0
   146a8:	beq	146d0 <__assert_fail@plt+0x2f70>
   146ac:	ldr	r1, [sp, #76]	; 0x4c
   146b0:	mov	r8, #0
   146b4:	add	r1, r1, #1
   146b8:	cmp	r8, r4
   146bc:	strbcc	r0, [r5, r8]
   146c0:	ldrb	r0, [r1, r8]
   146c4:	add	r8, r8, #1
   146c8:	cmp	r0, #0
   146cc:	bne	146b8 <__assert_fail@plt+0x2f58>
   146d0:	ldr	r6, [sp, #80]	; 0x50
   146d4:	mov	r0, r6
   146d8:	bl	11628 <strlen@plt>
   146dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   146e0:	str	r0, [fp, #-72]	; 0xffffffb8
   146e4:	str	r6, [fp, #-88]	; 0xffffffa8
   146e8:	mov	r2, #1
   146ec:	mov	r3, r9
   146f0:	mov	lr, sl
   146f4:	b	14800 <__assert_fail@plt+0x30a0>
   146f8:	mov	r0, #1
   146fc:	b	14754 <__assert_fail@plt+0x2ff4>
   14700:	mov	r7, #0
   14704:	mov	r8, #0
   14708:	mov	r2, r0
   1470c:	mov	r3, #0
   14710:	b	14800 <__assert_fail@plt+0x30a0>
   14714:	tst	r9, #1
   14718:	bne	14754 <__assert_fail@plt+0x2ff4>
   1471c:	mov	r2, r0
   14720:	b	147ac <__assert_fail@plt+0x304c>
   14724:	mov	r0, #1
   14728:	mov	r8, #0
   1472c:	mov	r7, #5
   14730:	mov	r2, #1
   14734:	str	r0, [fp, #-72]	; 0xffffffb8
   14738:	movw	r0, #51034	; 0xc75a
   1473c:	movt	r0, #2
   14740:	str	r0, [fp, #-88]	; 0xffffffa8
   14744:	b	14774 <__assert_fail@plt+0x3014>
   14748:	mov	r2, #1
   1474c:	tst	r9, #1
   14750:	beq	147ac <__assert_fail@plt+0x304c>
   14754:	mov	r1, #1
   14758:	mov	r8, #0
   1475c:	mov	r7, #2
   14760:	mov	r2, r0
   14764:	str	r1, [fp, #-72]	; 0xffffffb8
   14768:	movw	r1, #50006	; 0xc356
   1476c:	movt	r1, #2
   14770:	str	r1, [fp, #-88]	; 0xffffffa8
   14774:	mov	r3, #1
   14778:	b	14800 <__assert_fail@plt+0x30a0>
   1477c:	tst	r9, #1
   14780:	beq	147d0 <__assert_fail@plt+0x3070>
   14784:	mov	r0, #1
   14788:	mov	r8, #0
   1478c:	mov	r2, #1
   14790:	mov	r3, #1
   14794:	mov	r7, #5
   14798:	str	r0, [fp, #-72]	; 0xffffffb8
   1479c:	movw	r0, #51034	; 0xc75a
   147a0:	movt	r0, #2
   147a4:	str	r0, [fp, #-88]	; 0xffffffa8
   147a8:	b	14800 <__assert_fail@plt+0x30a0>
   147ac:	cmp	r4, #0
   147b0:	mov	r8, #1
   147b4:	mov	r3, #0
   147b8:	mov	r7, #2
   147bc:	movne	r0, #39	; 0x27
   147c0:	strbne	r0, [r5]
   147c4:	movw	r0, #50006	; 0xc356
   147c8:	movt	r0, #2
   147cc:	b	147f4 <__assert_fail@plt+0x3094>
   147d0:	cmp	r4, #0
   147d4:	mov	r8, #1
   147d8:	mov	r2, #1
   147dc:	mov	r7, #5
   147e0:	mov	r3, #0
   147e4:	movne	r0, #34	; 0x22
   147e8:	strbne	r0, [r5]
   147ec:	movw	r0, #51034	; 0xc75a
   147f0:	movt	r0, #2
   147f4:	str	r0, [fp, #-88]	; 0xffffffa8
   147f8:	mov	r0, #1
   147fc:	str	r0, [fp, #-72]	; 0xffffffb8
   14800:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14804:	eor	r6, r3, #1
   14808:	str	r7, [fp, #-68]	; 0xffffffbc
   1480c:	str	r3, [fp, #-76]	; 0xffffffb4
   14810:	str	r2, [sp, #84]	; 0x54
   14814:	str	r6, [sp, #92]	; 0x5c
   14818:	cmp	r0, #0
   1481c:	movwne	r0, #1
   14820:	and	r1, r0, r3
   14824:	and	r1, r2, r1
   14828:	str	r1, [sp, #48]	; 0x30
   1482c:	sub	r1, r7, #2
   14830:	clz	r1, r1
   14834:	lsr	r1, r1, #5
   14838:	and	r1, r1, r3
   1483c:	str	r1, [sp, #64]	; 0x40
   14840:	subs	r1, r7, #2
   14844:	mov	r7, #0
   14848:	movwne	r1, #1
   1484c:	orr	r6, r1, r6
   14850:	and	r1, r1, r2
   14854:	and	r0, r0, r1
   14858:	str	r6, [sp, #68]	; 0x44
   1485c:	str	r0, [fp, #-60]	; 0xffffffc4
   14860:	orr	r0, r1, r3
   14864:	ldr	r1, [fp, #16]
   14868:	eor	r0, r0, #1
   1486c:	clz	r1, r1
   14870:	lsr	r1, r1, #5
   14874:	orr	r0, r1, r0
   14878:	str	r0, [fp, #-64]	; 0xffffffc0
   1487c:	eor	r0, r2, #1
   14880:	str	r0, [sp, #52]	; 0x34
   14884:	cmn	lr, #1
   14888:	beq	14898 <__assert_fail@plt+0x3138>
   1488c:	cmp	r7, lr
   14890:	bne	148a4 <__assert_fail@plt+0x3144>
   14894:	b	153ec <__assert_fail@plt+0x3c8c>
   14898:	ldrb	r0, [ip, r7]
   1489c:	cmp	r0, #0
   148a0:	beq	153f4 <__assert_fail@plt+0x3c94>
   148a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   148a8:	mov	sl, #0
   148ac:	cmp	r0, #0
   148b0:	beq	148e8 <__assert_fail@plt+0x3188>
   148b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   148b8:	add	r5, r7, r0
   148bc:	cmp	r0, #2
   148c0:	bcc	148dc <__assert_fail@plt+0x317c>
   148c4:	cmn	lr, #1
   148c8:	bne	148dc <__assert_fail@plt+0x317c>
   148cc:	mov	r0, ip
   148d0:	bl	11628 <strlen@plt>
   148d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   148d8:	mov	lr, r0
   148dc:	cmp	r5, lr
   148e0:	bls	148f0 <__assert_fail@plt+0x3190>
   148e4:	ldr	r5, [fp, #-84]	; 0xffffffac
   148e8:	mov	r0, #0
   148ec:	b	1493c <__assert_fail@plt+0x31dc>
   148f0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   148f4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   148f8:	add	r0, ip, r7
   148fc:	mov	r6, r4
   14900:	mov	r4, lr
   14904:	bl	1161c <bcmp@plt>
   14908:	ldr	r2, [sp, #92]	; 0x5c
   1490c:	cmp	r0, #0
   14910:	ldr	r5, [fp, #-84]	; 0xffffffac
   14914:	mov	r1, r0
   14918:	movwne	r1, #1
   1491c:	orr	r1, r1, r2
   14920:	tst	r1, #1
   14924:	beq	1547c <__assert_fail@plt+0x3d1c>
   14928:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1492c:	clz	r0, r0
   14930:	mov	lr, r4
   14934:	mov	r4, r6
   14938:	lsr	r0, r0, #5
   1493c:	str	r0, [fp, #-52]	; 0xffffffcc
   14940:	ldrb	r6, [ip, r7]
   14944:	cmp	r6, #126	; 0x7e
   14948:	bhi	14e78 <__assert_fail@plt+0x3718>
   1494c:	add	r3, pc, #16
   14950:	mov	r9, #1
   14954:	mov	r2, #110	; 0x6e
   14958:	mov	r0, #97	; 0x61
   1495c:	mov	r1, #0
   14960:	ldr	pc, [r3, r6, lsl #2]
   14964:	ldrdeq	r4, [r1], -r8
   14968:	andeq	r4, r1, r8, ror lr
   1496c:	andeq	r4, r1, r8, ror lr
   14970:	andeq	r4, r1, r8, ror lr
   14974:	andeq	r4, r1, r8, ror lr
   14978:	andeq	r4, r1, r8, ror lr
   1497c:	andeq	r4, r1, r8, ror lr
   14980:	andeq	r4, r1, r4, asr pc
   14984:			; <UNDEFINED> instruction: 0x00014cb8
   14988:			; <UNDEFINED> instruction: 0x00014cb0
   1498c:	andeq	r4, r1, r4, asr #25
   14990:	andeq	r4, r1, r0, ror #27
   14994:	andeq	r4, r1, r8, lsr #25
   14998:	andeq	r4, r1, r0, asr #25
   1499c:	andeq	r4, r1, r8, ror lr
   149a0:	andeq	r4, r1, r8, ror lr
   149a4:	andeq	r4, r1, r8, ror lr
   149a8:	andeq	r4, r1, r8, ror lr
   149ac:	andeq	r4, r1, r8, ror lr
   149b0:	andeq	r4, r1, r8, ror lr
   149b4:	andeq	r4, r1, r8, ror lr
   149b8:	andeq	r4, r1, r8, ror lr
   149bc:	andeq	r4, r1, r8, ror lr
   149c0:	andeq	r4, r1, r8, ror lr
   149c4:	andeq	r4, r1, r8, ror lr
   149c8:	andeq	r4, r1, r8, ror lr
   149cc:	andeq	r4, r1, r8, ror lr
   149d0:	andeq	r4, r1, r8, ror lr
   149d4:	andeq	r4, r1, r8, ror lr
   149d8:	andeq	r4, r1, r8, ror lr
   149dc:	andeq	r4, r1, r8, ror lr
   149e0:	andeq	r4, r1, r8, ror lr
   149e4:	andeq	r4, r1, ip, asr ip
   149e8:	andeq	r4, r1, r0, ror #24
   149ec:	andeq	r4, r1, r0, ror #24
   149f0:	andeq	r4, r1, r8, asr #24
   149f4:	andeq	r4, r1, r0, ror #24
   149f8:	andeq	r4, r1, r0, ror #22
   149fc:	andeq	r4, r1, r0, ror #24
   14a00:	andeq	r4, r1, r8, ror #27
   14a04:	andeq	r4, r1, r0, ror #24
   14a08:	andeq	r4, r1, r0, ror #24
   14a0c:	andeq	r4, r1, r0, ror #24
   14a10:	andeq	r4, r1, r0, ror #22
   14a14:	andeq	r4, r1, r0, ror #22
   14a18:	andeq	r4, r1, r0, ror #22
   14a1c:	andeq	r4, r1, r0, ror #22
   14a20:	andeq	r4, r1, r0, ror #22
   14a24:	andeq	r4, r1, r0, ror #22
   14a28:	andeq	r4, r1, r0, ror #22
   14a2c:	andeq	r4, r1, r0, ror #22
   14a30:	andeq	r4, r1, r0, ror #22
   14a34:	andeq	r4, r1, r0, ror #22
   14a38:	andeq	r4, r1, r0, ror #22
   14a3c:	andeq	r4, r1, r0, ror #22
   14a40:	andeq	r4, r1, r0, ror #22
   14a44:	andeq	r4, r1, r0, ror #22
   14a48:	andeq	r4, r1, r0, ror #22
   14a4c:	andeq	r4, r1, r0, ror #22
   14a50:	andeq	r4, r1, r0, ror #24
   14a54:	andeq	r4, r1, r0, ror #24
   14a58:	andeq	r4, r1, r0, ror #24
   14a5c:	andeq	r4, r1, r0, ror #24
   14a60:			; <UNDEFINED> instruction: 0x00014db0
   14a64:	andeq	r4, r1, r8, ror lr
   14a68:	andeq	r4, r1, r0, ror #22
   14a6c:	andeq	r4, r1, r0, ror #22
   14a70:	andeq	r4, r1, r0, ror #22
   14a74:	andeq	r4, r1, r0, ror #22
   14a78:	andeq	r4, r1, r0, ror #22
   14a7c:	andeq	r4, r1, r0, ror #22
   14a80:	andeq	r4, r1, r0, ror #22
   14a84:	andeq	r4, r1, r0, ror #22
   14a88:	andeq	r4, r1, r0, ror #22
   14a8c:	andeq	r4, r1, r0, ror #22
   14a90:	andeq	r4, r1, r0, ror #22
   14a94:	andeq	r4, r1, r0, ror #22
   14a98:	andeq	r4, r1, r0, ror #22
   14a9c:	andeq	r4, r1, r0, ror #22
   14aa0:	andeq	r4, r1, r0, ror #22
   14aa4:	andeq	r4, r1, r0, ror #22
   14aa8:	andeq	r4, r1, r0, ror #22
   14aac:	andeq	r4, r1, r0, ror #22
   14ab0:	andeq	r4, r1, r0, ror #22
   14ab4:	andeq	r4, r1, r0, ror #22
   14ab8:	andeq	r4, r1, r0, ror #22
   14abc:	andeq	r4, r1, r0, ror #22
   14ac0:	andeq	r4, r1, r0, ror #22
   14ac4:	andeq	r4, r1, r0, ror #22
   14ac8:	andeq	r4, r1, r0, ror #22
   14acc:	andeq	r4, r1, r0, ror #22
   14ad0:	andeq	r4, r1, r0, ror #24
   14ad4:	andeq	r4, r1, r8, lsl #25
   14ad8:	andeq	r4, r1, r0, ror #22
   14adc:	andeq	r4, r1, r0, ror #24
   14ae0:	andeq	r4, r1, r0, ror #22
   14ae4:	andeq	r4, r1, r0, ror #24
   14ae8:	andeq	r4, r1, r0, ror #22
   14aec:	andeq	r4, r1, r0, ror #22
   14af0:	andeq	r4, r1, r0, ror #22
   14af4:	andeq	r4, r1, r0, ror #22
   14af8:	andeq	r4, r1, r0, ror #22
   14afc:	andeq	r4, r1, r0, ror #22
   14b00:	andeq	r4, r1, r0, ror #22
   14b04:	andeq	r4, r1, r0, ror #22
   14b08:	andeq	r4, r1, r0, ror #22
   14b0c:	andeq	r4, r1, r0, ror #22
   14b10:	andeq	r4, r1, r0, ror #22
   14b14:	andeq	r4, r1, r0, ror #22
   14b18:	andeq	r4, r1, r0, ror #22
   14b1c:	andeq	r4, r1, r0, ror #22
   14b20:	andeq	r4, r1, r0, ror #22
   14b24:	andeq	r4, r1, r0, ror #22
   14b28:	andeq	r4, r1, r0, ror #22
   14b2c:	andeq	r4, r1, r0, ror #22
   14b30:	andeq	r4, r1, r0, ror #22
   14b34:	andeq	r4, r1, r0, ror #22
   14b38:	andeq	r4, r1, r0, ror #22
   14b3c:	andeq	r4, r1, r0, ror #22
   14b40:	andeq	r4, r1, r0, ror #22
   14b44:	andeq	r4, r1, r0, ror #22
   14b48:	andeq	r4, r1, r0, ror #22
   14b4c:	andeq	r4, r1, r0, ror #22
   14b50:	andeq	r4, r1, ip, lsl ip
   14b54:	andeq	r4, r1, r0, ror #24
   14b58:	andeq	r4, r1, ip, lsl ip
   14b5c:	andeq	r4, r1, r8, asr #24
   14b60:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b64:	tst	r0, #1
   14b68:	bne	14b94 <__assert_fail@plt+0x3434>
   14b6c:	ldr	r1, [fp, #16]
   14b70:	ubfx	r0, r6, #5, #3
   14b74:	mov	r2, #1
   14b78:	ldr	r0, [r1, r0, lsl #2]
   14b7c:	and	r1, r6, #31
   14b80:	tst	r0, r2, lsl r1
   14b84:	beq	14b94 <__assert_fail@plt+0x3434>
   14b88:	mov	r0, r6
   14b8c:	mov	r1, r9
   14b90:	b	14ba8 <__assert_fail@plt+0x3448>
   14b94:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14b98:	mov	r1, r9
   14b9c:	cmp	r0, #0
   14ba0:	mov	r0, r6
   14ba4:	beq	14ee8 <__assert_fail@plt+0x3788>
   14ba8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14bac:	tst	r2, #1
   14bb0:	bne	154b8 <__assert_fail@plt+0x3d58>
   14bb4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14bb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14bbc:	subs	r2, r2, #2
   14bc0:	movwne	r2, #1
   14bc4:	orr	r2, r2, r3
   14bc8:	tst	r2, #1
   14bcc:	bne	14c08 <__assert_fail@plt+0x34a8>
   14bd0:	cmp	r8, r4
   14bd4:	movcc	r2, #39	; 0x27
   14bd8:	strbcc	r2, [r5, r8]
   14bdc:	add	r2, r8, #1
   14be0:	cmp	r2, r4
   14be4:	movcc	r3, #36	; 0x24
   14be8:	strbcc	r3, [r5, r2]
   14bec:	add	r2, r8, #2
   14bf0:	add	r8, r8, #3
   14bf4:	cmp	r2, r4
   14bf8:	movcc	r3, #39	; 0x27
   14bfc:	strbcc	r3, [r5, r2]
   14c00:	mov	r2, #1
   14c04:	str	r2, [fp, #-56]	; 0xffffffc8
   14c08:	cmp	r8, r4
   14c0c:	movcc	r2, #92	; 0x5c
   14c10:	strbcc	r2, [r5, r8]
   14c14:	add	r8, r8, #1
   14c18:	b	14f2c <__assert_fail@plt+0x37cc>
   14c1c:	cmp	lr, #1
   14c20:	beq	14c48 <__assert_fail@plt+0x34e8>
   14c24:	mov	r9, #0
   14c28:	cmn	lr, #1
   14c2c:	bne	14c54 <__assert_fail@plt+0x34f4>
   14c30:	ldrb	r0, [ip, #1]
   14c34:	cmp	r0, #0
   14c38:	beq	14c48 <__assert_fail@plt+0x34e8>
   14c3c:	mvn	lr, #0
   14c40:	mov	sl, #0
   14c44:	b	14b60 <__assert_fail@plt+0x3400>
   14c48:	mov	r9, #0
   14c4c:	cmp	r7, #0
   14c50:	beq	14c5c <__assert_fail@plt+0x34fc>
   14c54:	mov	sl, #0
   14c58:	b	14b60 <__assert_fail@plt+0x3400>
   14c5c:	mov	r1, #1
   14c60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14c64:	cmp	r0, #2
   14c68:	bne	14c80 <__assert_fail@plt+0x3520>
   14c6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14c70:	mov	r9, r1
   14c74:	tst	r0, #1
   14c78:	beq	14b60 <__assert_fail@plt+0x3400>
   14c7c:	b	154b8 <__assert_fail@plt+0x3d58>
   14c80:	mov	r9, r1
   14c84:	b	14b60 <__assert_fail@plt+0x3400>
   14c88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14c8c:	cmp	r0, #2
   14c90:	bne	14ecc <__assert_fail@plt+0x376c>
   14c94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14c98:	tst	r0, #1
   14c9c:	bne	154b8 <__assert_fail@plt+0x3d58>
   14ca0:	mov	sl, #0
   14ca4:	b	14ee0 <__assert_fail@plt+0x3780>
   14ca8:	mov	r0, #102	; 0x66
   14cac:	b	14f54 <__assert_fail@plt+0x37f4>
   14cb0:	mov	r2, #116	; 0x74
   14cb4:	b	14cc4 <__assert_fail@plt+0x3564>
   14cb8:	mov	r0, #98	; 0x62
   14cbc:	b	14f54 <__assert_fail@plt+0x37f4>
   14cc0:	mov	r2, #114	; 0x72
   14cc4:	ldr	r0, [sp, #68]	; 0x44
   14cc8:	tst	r0, #1
   14ccc:	mov	r0, r2
   14cd0:	bne	14f54 <__assert_fail@plt+0x37f4>
   14cd4:	b	154b8 <__assert_fail@plt+0x3d58>
   14cd8:	ldr	r0, [sp, #84]	; 0x54
   14cdc:	tst	r0, #1
   14ce0:	beq	14f70 <__assert_fail@plt+0x3810>
   14ce4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ce8:	tst	r0, #1
   14cec:	bne	155a4 <__assert_fail@plt+0x3e44>
   14cf0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14cf4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14cf8:	subs	r0, r0, #2
   14cfc:	movwne	r0, #1
   14d00:	orr	r0, r0, r1
   14d04:	tst	r0, #1
   14d08:	bne	14d44 <__assert_fail@plt+0x35e4>
   14d0c:	cmp	r8, r4
   14d10:	movcc	r0, #39	; 0x27
   14d14:	strbcc	r0, [r5, r8]
   14d18:	add	r0, r8, #1
   14d1c:	cmp	r0, r4
   14d20:	movcc	r1, #36	; 0x24
   14d24:	strbcc	r1, [r5, r0]
   14d28:	add	r0, r8, #2
   14d2c:	add	r8, r8, #3
   14d30:	cmp	r0, r4
   14d34:	movcc	r1, #39	; 0x27
   14d38:	strbcc	r1, [r5, r0]
   14d3c:	mov	r0, #1
   14d40:	str	r0, [fp, #-56]	; 0xffffffc8
   14d44:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14d48:	cmp	r8, r4
   14d4c:	mov	r9, #0
   14d50:	mov	sl, #1
   14d54:	mov	r6, #48	; 0x30
   14d58:	movcc	r0, #92	; 0x5c
   14d5c:	strbcc	r0, [r5, r8]
   14d60:	add	r0, r8, #1
   14d64:	cmp	r1, #2
   14d68:	beq	15138 <__assert_fail@plt+0x39d8>
   14d6c:	add	r1, r7, #1
   14d70:	cmp	r1, lr
   14d74:	bcs	15138 <__assert_fail@plt+0x39d8>
   14d78:	ldrb	r1, [ip, r1]
   14d7c:	sub	r1, r1, #48	; 0x30
   14d80:	uxtb	r1, r1
   14d84:	cmp	r1, #9
   14d88:	bhi	15138 <__assert_fail@plt+0x39d8>
   14d8c:	cmp	r0, r4
   14d90:	movcc	r1, #48	; 0x30
   14d94:	strbcc	r1, [r5, r0]
   14d98:	add	r0, r8, #2
   14d9c:	add	r8, r8, #3
   14da0:	cmp	r0, r4
   14da4:	movcc	r1, #48	; 0x30
   14da8:	strbcc	r1, [r5, r0]
   14dac:	b	14b60 <__assert_fail@plt+0x3400>
   14db0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14db4:	mov	sl, #0
   14db8:	mov	r6, #63	; 0x3f
   14dbc:	cmp	r0, #5
   14dc0:	beq	15140 <__assert_fail@plt+0x39e0>
   14dc4:	cmp	r0, #2
   14dc8:	bne	151e8 <__assert_fail@plt+0x3a88>
   14dcc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14dd0:	mov	r9, #0
   14dd4:	tst	r0, #1
   14dd8:	beq	14b60 <__assert_fail@plt+0x3400>
   14ddc:	b	154b8 <__assert_fail@plt+0x3d58>
   14de0:	mov	r0, #118	; 0x76
   14de4:	b	14f54 <__assert_fail@plt+0x37f4>
   14de8:	mov	r0, #1
   14dec:	mov	r6, #39	; 0x27
   14df0:	str	r0, [sp, #60]	; 0x3c
   14df4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14df8:	cmp	r0, #2
   14dfc:	bne	14f8c <__assert_fail@plt+0x382c>
   14e00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14e04:	tst	r0, #1
   14e08:	bne	154b8 <__assert_fail@plt+0x3d58>
   14e0c:	ldr	r2, [sp, #56]	; 0x38
   14e10:	clz	r1, r4
   14e14:	mov	sl, #0
   14e18:	mov	r9, #1
   14e1c:	lsr	r1, r1, #5
   14e20:	cmp	r2, #0
   14e24:	mov	r0, r2
   14e28:	movwne	r0, #1
   14e2c:	orrs	r0, r0, r1
   14e30:	moveq	r2, r4
   14e34:	moveq	r4, r0
   14e38:	cmp	r8, r4
   14e3c:	str	r2, [sp, #56]	; 0x38
   14e40:	movcc	r0, #39	; 0x27
   14e44:	strbcc	r0, [r5, r8]
   14e48:	add	r0, r8, #1
   14e4c:	cmp	r0, r4
   14e50:	movcc	r1, #92	; 0x5c
   14e54:	strbcc	r1, [r5, r0]
   14e58:	add	r0, r8, #2
   14e5c:	add	r8, r8, #3
   14e60:	cmp	r0, r4
   14e64:	movcc	r1, #39	; 0x27
   14e68:	strbcc	r1, [r5, r0]
   14e6c:	mov	r0, #0
   14e70:	str	r0, [fp, #-56]	; 0xffffffc8
   14e74:	b	14b60 <__assert_fail@plt+0x3400>
   14e78:	ldr	r0, [sp, #40]	; 0x28
   14e7c:	str	r4, [sp, #88]	; 0x58
   14e80:	cmp	r0, #1
   14e84:	bne	14f94 <__assert_fail@plt+0x3834>
   14e88:	str	lr, [sp, #28]
   14e8c:	bl	11604 <__ctype_b_loc@plt>
   14e90:	ldr	r0, [r0]
   14e94:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14e98:	mov	r2, #1
   14e9c:	add	r0, r0, r6, lsl #1
   14ea0:	ldrb	r0, [r0, #1]
   14ea4:	ubfx	r9, r0, #6, #1
   14ea8:	ldr	r0, [sp, #52]	; 0x34
   14eac:	cmp	r2, #1
   14eb0:	orr	r0, r9, r0
   14eb4:	bhi	151f0 <__assert_fail@plt+0x3a90>
   14eb8:	tst	r0, #1
   14ebc:	beq	151f0 <__assert_fail@plt+0x3a90>
   14ec0:	ldr	lr, [sp, #28]
   14ec4:	ldr	r4, [sp, #88]	; 0x58
   14ec8:	b	14b60 <__assert_fail@plt+0x3400>
   14ecc:	ldr	r1, [sp, #48]	; 0x30
   14ed0:	mov	sl, #0
   14ed4:	mov	r0, #92	; 0x5c
   14ed8:	cmp	r1, #0
   14edc:	beq	14f54 <__assert_fail@plt+0x37f4>
   14ee0:	mov	r6, #92	; 0x5c
   14ee4:	mov	r9, #0
   14ee8:	cmp	sl, #0
   14eec:	bne	14f24 <__assert_fail@plt+0x37c4>
   14ef0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14ef4:	tst	r0, #1
   14ef8:	beq	14f24 <__assert_fail@plt+0x37c4>
   14efc:	cmp	r8, r4
   14f00:	movcc	r0, #39	; 0x27
   14f04:	strbcc	r0, [r5, r8]
   14f08:	add	r0, r8, #1
   14f0c:	add	r8, r8, #2
   14f10:	cmp	r0, r4
   14f14:	movcc	r1, #39	; 0x27
   14f18:	strbcc	r1, [r5, r0]
   14f1c:	mov	r0, #0
   14f20:	str	r0, [fp, #-56]	; 0xffffffc8
   14f24:	mov	r1, r9
   14f28:	mov	r0, r6
   14f2c:	cmp	r8, r4
   14f30:	strbcc	r0, [r5, r8]
   14f34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14f38:	add	r8, r8, #1
   14f3c:	and	r0, r0, r1
   14f40:	str	r0, [fp, #-48]	; 0xffffffd0
   14f44:	add	r7, r7, #1
   14f48:	cmn	lr, #1
   14f4c:	bne	1488c <__assert_fail@plt+0x312c>
   14f50:	b	14898 <__assert_fail@plt+0x3138>
   14f54:	ldr	r1, [sp, #84]	; 0x54
   14f58:	mov	sl, #0
   14f5c:	mov	r9, #0
   14f60:	tst	r1, #1
   14f64:	mov	r1, #0
   14f68:	beq	14b60 <__assert_fail@plt+0x3400>
   14f6c:	b	14ba8 <__assert_fail@plt+0x3448>
   14f70:	ldr	r0, [sp, #36]	; 0x24
   14f74:	mov	r6, #0
   14f78:	mov	sl, #0
   14f7c:	mov	r9, #0
   14f80:	cmp	r0, #0
   14f84:	beq	14b60 <__assert_fail@plt+0x3400>
   14f88:	b	14f44 <__assert_fail@plt+0x37e4>
   14f8c:	mov	r9, #1
   14f90:	b	14b60 <__assert_fail@plt+0x3400>
   14f94:	mov	r0, #0
   14f98:	cmn	lr, #1
   14f9c:	sub	r4, fp, #40	; 0x28
   14fa0:	str	r0, [fp, #-36]	; 0xffffffdc
   14fa4:	str	r0, [fp, #-40]	; 0xffffffd8
   14fa8:	bne	14fbc <__assert_fail@plt+0x385c>
   14fac:	mov	r0, ip
   14fb0:	bl	11628 <strlen@plt>
   14fb4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14fb8:	mov	lr, r0
   14fbc:	ldr	r0, [sp, #72]	; 0x48
   14fc0:	mov	r9, #1
   14fc4:	mov	r2, #0
   14fc8:	str	lr, [sp, #28]
   14fcc:	add	r0, r0, r7
   14fd0:	str	r0, [sp, #20]
   14fd4:	b	15018 <__assert_fail@plt+0x38b8>
   14fd8:	ldr	r5, [sp, #44]	; 0x2c
   14fdc:	add	r5, r0, r5
   14fe0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14fe4:	bl	1152c <iswprint@plt>
   14fe8:	cmp	r0, #0
   14fec:	sub	r4, fp, #40	; 0x28
   14ff0:	movwne	r0, #1
   14ff4:	and	r9, r9, r0
   14ff8:	mov	r0, r4
   14ffc:	bl	114b4 <mbsinit@plt>
   15000:	mov	r2, r5
   15004:	ldr	lr, [sp, #28]
   15008:	ldr	r5, [fp, #-84]	; 0xffffffac
   1500c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15010:	cmp	r0, #0
   15014:	bne	14ea8 <__assert_fail@plt+0x3748>
   15018:	add	r0, r2, r7
   1501c:	str	r2, [sp, #44]	; 0x2c
   15020:	mov	r3, r4
   15024:	add	r1, ip, r0
   15028:	str	r0, [sp, #24]
   1502c:	sub	r2, lr, r0
   15030:	sub	r0, fp, #44	; 0x2c
   15034:	bl	2b644 <__assert_fail@plt+0x19ee4>
   15038:	cmp	r0, #0
   1503c:	beq	153e0 <__assert_fail@plt+0x3c80>
   15040:	cmn	r0, #1
   15044:	beq	1539c <__assert_fail@plt+0x3c3c>
   15048:	ldr	lr, [sp, #28]
   1504c:	cmn	r0, #2
   15050:	beq	153a4 <__assert_fail@plt+0x3c44>
   15054:	ldr	r2, [sp, #64]	; 0x40
   15058:	ldr	r4, [sp, #88]	; 0x58
   1505c:	ldr	ip, [sp, #84]	; 0x54
   15060:	cmp	r0, #2
   15064:	mov	r1, #0
   15068:	movwcc	r1, #1
   1506c:	eor	r2, r2, #1
   15070:	orrs	r1, r2, r1
   15074:	bne	14fd8 <__assert_fail@plt+0x3878>
   15078:	ldr	r1, [sp, #44]	; 0x2c
   1507c:	ldr	r2, [sp, #20]
   15080:	add	r1, r2, r1
   15084:	sub	r2, r0, #1
   15088:	b	15098 <__assert_fail@plt+0x3938>
   1508c:	add	r1, r1, #1
   15090:	subs	r2, r2, #1
   15094:	beq	14fd8 <__assert_fail@plt+0x3878>
   15098:	ldrb	r3, [r1]
   1509c:	sub	r3, r3, #91	; 0x5b
   150a0:	cmp	r3, #33	; 0x21
   150a4:	bhi	1508c <__assert_fail@plt+0x392c>
   150a8:	add	r5, pc, #0
   150ac:	ldr	pc, [r5, r3, lsl #2]
   150b0:	muleq	r1, r4, r4
   150b4:	muleq	r1, r4, r4
   150b8:	andeq	r5, r1, ip, lsl #1
   150bc:	muleq	r1, r4, r4
   150c0:	andeq	r5, r1, ip, lsl #1
   150c4:	muleq	r1, r4, r4
   150c8:	andeq	r5, r1, ip, lsl #1
   150cc:	andeq	r5, r1, ip, lsl #1
   150d0:	andeq	r5, r1, ip, lsl #1
   150d4:	andeq	r5, r1, ip, lsl #1
   150d8:	andeq	r5, r1, ip, lsl #1
   150dc:	andeq	r5, r1, ip, lsl #1
   150e0:	andeq	r5, r1, ip, lsl #1
   150e4:	andeq	r5, r1, ip, lsl #1
   150e8:	andeq	r5, r1, ip, lsl #1
   150ec:	andeq	r5, r1, ip, lsl #1
   150f0:	andeq	r5, r1, ip, lsl #1
   150f4:	andeq	r5, r1, ip, lsl #1
   150f8:	andeq	r5, r1, ip, lsl #1
   150fc:	andeq	r5, r1, ip, lsl #1
   15100:	andeq	r5, r1, ip, lsl #1
   15104:	andeq	r5, r1, ip, lsl #1
   15108:	andeq	r5, r1, ip, lsl #1
   1510c:	andeq	r5, r1, ip, lsl #1
   15110:	andeq	r5, r1, ip, lsl #1
   15114:	andeq	r5, r1, ip, lsl #1
   15118:	andeq	r5, r1, ip, lsl #1
   1511c:	andeq	r5, r1, ip, lsl #1
   15120:	andeq	r5, r1, ip, lsl #1
   15124:	andeq	r5, r1, ip, lsl #1
   15128:	andeq	r5, r1, ip, lsl #1
   1512c:	andeq	r5, r1, ip, lsl #1
   15130:	andeq	r5, r1, ip, lsl #1
   15134:	muleq	r1, r4, r4
   15138:	mov	r8, r0
   1513c:	b	14b60 <__assert_fail@plt+0x3400>
   15140:	ldr	r0, [sp, #32]
   15144:	cmp	r0, #0
   15148:	beq	151e8 <__assert_fail@plt+0x3a88>
   1514c:	add	r0, r7, #2
   15150:	cmp	r0, lr
   15154:	bcs	151e8 <__assert_fail@plt+0x3a88>
   15158:	add	r1, r7, ip
   1515c:	ldrb	r1, [r1, #1]
   15160:	cmp	r1, #63	; 0x3f
   15164:	bne	151e8 <__assert_fail@plt+0x3a88>
   15168:	ldrb	r9, [ip, r0]
   1516c:	sub	r2, r9, #33	; 0x21
   15170:	cmp	r2, #29
   15174:	bhi	151e8 <__assert_fail@plt+0x3a88>
   15178:	movw	r1, #20929	; 0x51c1
   1517c:	mov	r3, #1
   15180:	movt	r1, #14336	; 0x3800
   15184:	tst	r1, r3, lsl r2
   15188:	beq	151e8 <__assert_fail@plt+0x3a88>
   1518c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15190:	tst	r1, #1
   15194:	bne	154b8 <__assert_fail@plt+0x3d58>
   15198:	cmp	r8, r4
   1519c:	add	r2, r8, #1
   151a0:	mov	r6, r9
   151a4:	mov	r7, r0
   151a8:	mov	r9, #0
   151ac:	movcc	r1, #63	; 0x3f
   151b0:	strbcc	r1, [r5, r8]
   151b4:	cmp	r2, r4
   151b8:	movcc	r1, #34	; 0x22
   151bc:	strbcc	r1, [r5, r2]
   151c0:	add	r2, r8, #2
   151c4:	cmp	r2, r4
   151c8:	movcc	r1, #34	; 0x22
   151cc:	strbcc	r1, [r5, r2]
   151d0:	add	r2, r8, #3
   151d4:	add	r8, r8, #4
   151d8:	cmp	r2, r4
   151dc:	movcc	r1, #63	; 0x3f
   151e0:	strbcc	r1, [r5, r2]
   151e4:	b	14b60 <__assert_fail@plt+0x3400>
   151e8:	mov	r9, #0
   151ec:	b	14b60 <__assert_fail@plt+0x3400>
   151f0:	ldr	lr, [sp, #28]
   151f4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   151f8:	add	r1, r2, r7
   151fc:	mov	r2, #0
   15200:	str	r1, [sp, #44]	; 0x2c
   15204:	tst	r0, #1
   15208:	bne	15324 <__assert_fail@plt+0x3bc4>
   1520c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15210:	tst	r1, #1
   15214:	bne	154b4 <__assert_fail@plt+0x3d54>
   15218:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1521c:	subs	r2, r1, #2
   15220:	movwne	r2, #1
   15224:	orr	r2, r2, r4
   15228:	tst	r2, #1
   1522c:	bne	15270 <__assert_fail@plt+0x3b10>
   15230:	ldr	r1, [sp, #88]	; 0x58
   15234:	add	r2, r8, #1
   15238:	mov	r4, #1
   1523c:	cmp	r8, r1
   15240:	movcc	r1, #39	; 0x27
   15244:	strbcc	r1, [r5, r8]
   15248:	ldr	r1, [sp, #88]	; 0x58
   1524c:	cmp	r2, r1
   15250:	movcc	r1, #36	; 0x24
   15254:	strbcc	r1, [r5, r2]
   15258:	ldr	r1, [sp, #88]	; 0x58
   1525c:	add	r2, r8, #2
   15260:	add	r8, r8, #3
   15264:	cmp	r2, r1
   15268:	movcc	r1, #39	; 0x27
   1526c:	strbcc	r1, [r5, r2]
   15270:	ldr	r1, [sp, #88]	; 0x58
   15274:	add	r2, r8, #1
   15278:	cmp	r8, r1
   1527c:	movcc	r1, #92	; 0x5c
   15280:	strbcc	r1, [r5, r8]
   15284:	ldr	r1, [sp, #88]	; 0x58
   15288:	cmp	r2, r1
   1528c:	bcs	152a0 <__assert_fail@plt+0x3b40>
   15290:	uxtb	r3, r6
   15294:	mov	r1, #48	; 0x30
   15298:	orr	r3, r1, r3, lsr #6
   1529c:	strb	r3, [r5, r2]
   152a0:	ldr	r1, [sp, #88]	; 0x58
   152a4:	add	r2, r8, #2
   152a8:	add	r8, r8, #3
   152ac:	cmp	r2, r1
   152b0:	lsrcc	r3, r6, #3
   152b4:	movcc	r1, #6
   152b8:	bficc	r3, r1, #3, #29
   152bc:	mov	r1, #6
   152c0:	bfi	r6, r1, #3, #29
   152c4:	strbcc	r3, [r5, r2]
   152c8:	mov	r2, #1
   152cc:	b	1534c <__assert_fail@plt+0x3bec>
   152d0:	ldr	r1, [sp, #88]	; 0x58
   152d4:	ldr	r5, [fp, #-84]	; 0xffffffac
   152d8:	ldr	r4, [sp, #88]	; 0x58
   152dc:	cmp	r8, r1
   152e0:	movcc	r1, #39	; 0x27
   152e4:	strbcc	r1, [r5, r8]
   152e8:	add	r1, r8, #1
   152ec:	add	r8, r8, #2
   152f0:	cmp	r1, r4
   152f4:	movcc	r4, #39	; 0x27
   152f8:	strbcc	r4, [r5, r1]
   152fc:	mov	r4, #0
   15300:	ldr	r1, [sp, #88]	; 0x58
   15304:	cmp	r8, r1
   15308:	ldr	r1, [sp, #72]	; 0x48
   1530c:	strbcc	r6, [r5, r8]
   15310:	add	r8, r8, #1
   15314:	ldrb	r6, [r1, r7]
   15318:	mov	r7, r3
   1531c:	tst	r0, #1
   15320:	beq	1520c <__assert_fail@plt+0x3aac>
   15324:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15328:	tst	r1, #1
   1532c:	beq	15344 <__assert_fail@plt+0x3be4>
   15330:	ldr	r1, [sp, #88]	; 0x58
   15334:	cmp	r8, r1
   15338:	movcc	r1, #92	; 0x5c
   1533c:	strbcc	r1, [r5, r8]
   15340:	add	r8, r8, #1
   15344:	mov	r1, #0
   15348:	str	r1, [fp, #-52]	; 0xffffffcc
   1534c:	ldr	r1, [sp, #44]	; 0x2c
   15350:	add	r3, r7, #1
   15354:	and	sl, r2, #1
   15358:	cmp	r1, r3
   1535c:	bls	15380 <__assert_fail@plt+0x3c20>
   15360:	cmp	sl, #0
   15364:	mvn	r5, r4
   15368:	movwne	sl, #1
   1536c:	orr	r5, r5, sl
   15370:	tst	r5, #1
   15374:	beq	152d0 <__assert_fail@plt+0x3b70>
   15378:	ldr	r5, [fp, #-84]	; 0xffffffac
   1537c:	b	15300 <__assert_fail@plt+0x3ba0>
   15380:	str	r4, [fp, #-56]	; 0xffffffc8
   15384:	ldr	r4, [sp, #88]	; 0x58
   15388:	cmp	sl, #0
   1538c:	movwne	sl, #1
   15390:	cmp	sl, #0
   15394:	beq	14ef0 <__assert_fail@plt+0x3790>
   15398:	b	14f24 <__assert_fail@plt+0x37c4>
   1539c:	mov	r9, #0
   153a0:	b	153e0 <__assert_fail@plt+0x3c80>
   153a4:	ldr	r0, [sp, #24]
   153a8:	mov	r9, #0
   153ac:	cmp	lr, r0
   153b0:	bls	153e0 <__assert_fail@plt+0x3c80>
   153b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   153b8:	ldr	r2, [sp, #44]	; 0x2c
   153bc:	add	r0, ip, r7
   153c0:	ldrb	r1, [r0, r2]
   153c4:	cmp	r1, #0
   153c8:	beq	14ea8 <__assert_fail@plt+0x3748>
   153cc:	add	r2, r2, #1
   153d0:	add	r1, r7, r2
   153d4:	cmp	r1, lr
   153d8:	bcc	153c0 <__assert_fail@plt+0x3c60>
   153dc:	b	14ea8 <__assert_fail@plt+0x3748>
   153e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   153e4:	ldr	r2, [sp, #44]	; 0x2c
   153e8:	b	14ea8 <__assert_fail@plt+0x3748>
   153ec:	mov	lr, r7
   153f0:	b	153f8 <__assert_fail@plt+0x3c98>
   153f4:	mvn	lr, #0
   153f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   153fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15400:	eor	r0, r1, #2
   15404:	orr	r0, r0, r8
   15408:	clz	r0, r0
   1540c:	lsr	r0, r0, #5
   15410:	tst	r2, r0
   15414:	bne	154b8 <__assert_fail@plt+0x3d58>
   15418:	subs	r0, r1, #2
   1541c:	movwne	r0, #1
   15420:	orr	r0, r2, r0
   15424:	tst	r0, #1
   15428:	ldreq	r0, [sp, #60]	; 0x3c
   1542c:	eoreq	r0, r0, #1
   15430:	tsteq	r0, #1
   15434:	bne	1554c <__assert_fail@plt+0x3dec>
   15438:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1543c:	mov	sl, lr
   15440:	tst	r0, #1
   15444:	bne	15518 <__assert_fail@plt+0x3db8>
   15448:	ldr	r6, [sp, #56]	; 0x38
   1544c:	mov	r9, #0
   15450:	cmp	r6, #0
   15454:	beq	15544 <__assert_fail@plt+0x3de4>
   15458:	ldr	r0, [sp, #84]	; 0x54
   1545c:	mov	r1, #0
   15460:	mov	r7, #2
   15464:	cmp	r4, #0
   15468:	str	r1, [fp, #-48]	; 0xffffffd0
   1546c:	mov	r1, #0
   15470:	str	r1, [fp, #-76]	; 0xffffffb4
   15474:	beq	14614 <__assert_fail@plt+0x2eb4>
   15478:	b	1554c <__assert_fail@plt+0x3dec>
   1547c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15480:	ldr	r1, [fp, #12]
   15484:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15488:	mov	lr, r4
   1548c:	mov	r4, r6
   15490:	b	154d8 <__assert_fail@plt+0x3d78>
   15494:	tst	ip, #1
   15498:	ldr	r5, [fp, #-84]	; 0xffffffac
   1549c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   154a0:	ldr	r1, [fp, #12]
   154a4:	mov	r0, #2
   154a8:	movwne	r0, #4
   154ac:	mov	r2, r0
   154b0:	b	154d8 <__assert_fail@plt+0x3d78>
   154b4:	ldr	r4, [sp, #88]	; 0x58
   154b8:	ldr	r1, [sp, #84]	; 0x54
   154bc:	mov	r0, #2
   154c0:	tst	r1, #1
   154c4:	movwne	r0, #4
   154c8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   154cc:	ldr	r1, [fp, #12]
   154d0:	cmp	r2, #2
   154d4:	moveq	r2, r0
   154d8:	mov	r0, #0
   154dc:	bic	r1, r1, #2
   154e0:	str	r2, [sp]
   154e4:	mov	r2, ip
   154e8:	mov	r3, lr
   154ec:	str	r0, [sp, #8]
   154f0:	ldr	r0, [sp, #76]	; 0x4c
   154f4:	str	r1, [sp, #4]
   154f8:	mov	r1, r4
   154fc:	str	r0, [sp, #12]
   15500:	ldr	r0, [sp, #80]	; 0x50
   15504:	str	r0, [sp, #16]
   15508:	mov	r0, r5
   1550c:	bl	14584 <__assert_fail@plt+0x2e24>
   15510:	mov	r8, r0
   15514:	b	15598 <__assert_fail@plt+0x3e38>
   15518:	mov	r0, #5
   1551c:	ldr	r1, [sp, #56]	; 0x38
   15520:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15524:	mov	r3, sl
   15528:	str	r0, [sp]
   1552c:	ldr	r0, [fp, #12]
   15530:	str	r0, [sp, #4]
   15534:	ldr	r0, [fp, #16]
   15538:	str	r0, [sp, #8]
   1553c:	ldr	r0, [sp, #76]	; 0x4c
   15540:	b	154fc <__assert_fail@plt+0x3d9c>
   15544:	mov	r0, #0
   15548:	str	r0, [fp, #-76]	; 0xffffffb4
   1554c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15550:	cmp	r1, #0
   15554:	beq	1558c <__assert_fail@plt+0x3e2c>
   15558:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1555c:	tst	r0, #1
   15560:	bne	1558c <__assert_fail@plt+0x3e2c>
   15564:	ldrb	r0, [r1]
   15568:	cmp	r0, #0
   1556c:	beq	1558c <__assert_fail@plt+0x3e2c>
   15570:	add	r1, r1, #1
   15574:	cmp	r8, r4
   15578:	strbcc	r0, [r5, r8]
   1557c:	add	r8, r8, #1
   15580:	ldrb	r0, [r1], #1
   15584:	cmp	r0, #0
   15588:	bne	15574 <__assert_fail@plt+0x3e14>
   1558c:	cmp	r8, r4
   15590:	movcc	r0, #0
   15594:	strbcc	r0, [r5, r8]
   15598:	mov	r0, r8
   1559c:	sub	sp, fp, #28
   155a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a4:	mov	r0, #4
   155a8:	b	154c8 <__assert_fail@plt+0x3d68>
   155ac:	bl	1173c <abort@plt>
   155b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b4:	add	fp, sp, #28
   155b8:	sub	sp, sp, #28
   155bc:	movw	r5, #53952	; 0xd2c0
   155c0:	cmp	r2, #0
   155c4:	mov	r4, r1
   155c8:	mov	r7, r0
   155cc:	str	r0, [sp, #20]
   155d0:	movt	r5, #3
   155d4:	movne	r5, r2
   155d8:	bl	11640 <__errno_location@plt>
   155dc:	mov	sl, r0
   155e0:	ldr	r2, [r5, #40]	; 0x28
   155e4:	ldr	r3, [r5, #44]	; 0x2c
   155e8:	ldm	r5, {r0, r1}
   155ec:	orr	r8, r1, #1
   155f0:	add	r9, r5, #8
   155f4:	mov	r1, #0
   155f8:	ldr	r6, [sl]
   155fc:	stm	sp, {r0, r8, r9}
   15600:	mov	r0, #0
   15604:	str	r2, [sp, #12]
   15608:	str	r3, [sp, #16]
   1560c:	mov	r2, r7
   15610:	mov	r3, r4
   15614:	str	r6, [sp, #24]
   15618:	mov	r6, r4
   1561c:	bl	14584 <__assert_fail@plt+0x2e24>
   15620:	add	r7, r0, #1
   15624:	mov	r0, r7
   15628:	bl	28638 <__assert_fail@plt+0x16ed8>
   1562c:	mov	r4, r0
   15630:	ldr	r0, [r5]
   15634:	ldr	r2, [r5, #44]	; 0x2c
   15638:	ldr	r1, [r5, #40]	; 0x28
   1563c:	mov	r3, r6
   15640:	stm	sp, {r0, r8, r9}
   15644:	str	r2, [sp, #16]
   15648:	ldr	r2, [sp, #20]
   1564c:	str	r1, [sp, #12]
   15650:	mov	r0, r4
   15654:	mov	r1, r7
   15658:	bl	14584 <__assert_fail@plt+0x2e24>
   1565c:	ldr	r0, [sp, #24]
   15660:	str	r0, [sl]
   15664:	mov	r0, r4
   15668:	sub	sp, fp, #28
   1566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15674:	add	fp, sp, #28
   15678:	sub	sp, sp, #36	; 0x24
   1567c:	movw	r8, #53952	; 0xd2c0
   15680:	cmp	r3, #0
   15684:	mov	r4, r2
   15688:	str	r2, [sp, #24]
   1568c:	mov	r5, r1
   15690:	mov	r6, r0
   15694:	str	r0, [sp, #20]
   15698:	movt	r8, #3
   1569c:	movne	r8, r3
   156a0:	bl	11640 <__errno_location@plt>
   156a4:	str	r0, [sp, #28]
   156a8:	ldr	r1, [r8, #40]	; 0x28
   156ac:	ldr	r2, [r8, #44]	; 0x2c
   156b0:	ldr	r7, [r0]
   156b4:	cmp	r4, #0
   156b8:	add	sl, r8, #8
   156bc:	mov	r0, #0
   156c0:	ldm	r8, {r3, r9}
   156c4:	orreq	r9, r9, #1
   156c8:	stm	sp, {r3, r9, sl}
   156cc:	str	r1, [sp, #12]
   156d0:	str	r2, [sp, #16]
   156d4:	mov	r1, #0
   156d8:	mov	r2, r6
   156dc:	mov	r3, r5
   156e0:	str	r7, [sp, #32]
   156e4:	mov	r7, r5
   156e8:	bl	14584 <__assert_fail@plt+0x2e24>
   156ec:	add	r4, r0, #1
   156f0:	mov	r5, r0
   156f4:	mov	r0, r4
   156f8:	bl	28638 <__assert_fail@plt+0x16ed8>
   156fc:	mov	r6, r0
   15700:	ldr	r0, [r8]
   15704:	ldr	r2, [r8, #44]	; 0x2c
   15708:	ldr	r1, [r8, #40]	; 0x28
   1570c:	mov	r3, r7
   15710:	stm	sp, {r0, r9, sl}
   15714:	str	r2, [sp, #16]
   15718:	ldr	r2, [sp, #20]
   1571c:	str	r1, [sp, #12]
   15720:	mov	r0, r6
   15724:	mov	r1, r4
   15728:	bl	14584 <__assert_fail@plt+0x2e24>
   1572c:	ldr	r0, [sp, #24]
   15730:	ldr	r1, [sp, #32]
   15734:	ldr	r2, [sp, #28]
   15738:	cmp	r0, #0
   1573c:	str	r1, [r2]
   15740:	strne	r5, [r0]
   15744:	mov	r0, r6
   15748:	sub	sp, fp, #28
   1574c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15750:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15754:	add	fp, sp, #24
   15758:	movw	r5, #53612	; 0xd16c
   1575c:	movw	r8, #53608	; 0xd168
   15760:	movt	r5, #3
   15764:	movt	r8, #3
   15768:	ldr	r0, [r5]
   1576c:	ldr	r4, [r8]
   15770:	cmp	r0, #2
   15774:	blt	157a0 <__assert_fail@plt+0x4040>
   15778:	add	r7, r4, #12
   1577c:	mov	r6, #0
   15780:	ldr	r0, [r7, r6, lsl #3]
   15784:	bl	141b8 <__assert_fail@plt+0x2a58>
   15788:	ldr	r1, [r5]
   1578c:	add	r2, r6, #2
   15790:	add	r0, r6, #1
   15794:	mov	r6, r0
   15798:	cmp	r2, r1
   1579c:	blt	15780 <__assert_fail@plt+0x4020>
   157a0:	ldr	r0, [r4, #4]
   157a4:	movw	r9, #54000	; 0xd2f0
   157a8:	movw	r7, #53616	; 0xd170
   157ac:	movt	r9, #3
   157b0:	movt	r7, #3
   157b4:	cmp	r0, r9
   157b8:	beq	157c8 <__assert_fail@plt+0x4068>
   157bc:	bl	141b8 <__assert_fail@plt+0x2a58>
   157c0:	mov	r0, #256	; 0x100
   157c4:	stm	r7, {r0, r9}
   157c8:	cmp	r4, r7
   157cc:	beq	157dc <__assert_fail@plt+0x407c>
   157d0:	mov	r0, r4
   157d4:	bl	141b8 <__assert_fail@plt+0x2a58>
   157d8:	str	r7, [r8]
   157dc:	mov	r0, #1
   157e0:	str	r0, [r5]
   157e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157e8:	movw	r3, #53952	; 0xd2c0
   157ec:	mvn	r2, #0
   157f0:	movt	r3, #3
   157f4:	b	157f8 <__assert_fail@plt+0x4098>
   157f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157fc:	add	fp, sp, #28
   15800:	sub	sp, sp, #44	; 0x2c
   15804:	mov	r7, r3
   15808:	str	r2, [sp, #36]	; 0x24
   1580c:	str	r1, [sp, #32]
   15810:	mov	r5, r0
   15814:	bl	11640 <__errno_location@plt>
   15818:	cmp	r5, #0
   1581c:	bmi	1598c <__assert_fail@plt+0x422c>
   15820:	cmn	r5, #-2147483647	; 0x80000001
   15824:	beq	1598c <__assert_fail@plt+0x422c>
   15828:	movw	r8, #53612	; 0xd16c
   1582c:	movw	r4, #53608	; 0xd168
   15830:	str	r0, [sp, #28]
   15834:	ldr	r0, [r0]
   15838:	movt	r8, #3
   1583c:	movt	r4, #3
   15840:	ldr	r1, [r8]
   15844:	ldr	r6, [r4]
   15848:	str	r0, [sp, #24]
   1584c:	cmp	r1, r5
   15850:	ble	1585c <__assert_fail@plt+0x40fc>
   15854:	mov	sl, r6
   15858:	b	158c8 <__assert_fail@plt+0x4168>
   1585c:	movw	r9, #53616	; 0xd170
   15860:	mov	r0, #8
   15864:	str	r1, [fp, #-32]	; 0xffffffe0
   15868:	sub	r1, r5, r1
   1586c:	mvn	r3, #-2147483648	; 0x80000000
   15870:	movt	r9, #3
   15874:	str	r0, [sp]
   15878:	add	r2, r1, #1
   1587c:	sub	r1, fp, #32
   15880:	subs	r0, r6, r9
   15884:	movne	r0, r6
   15888:	bl	28838 <__assert_fail@plt+0x170d8>
   1588c:	mov	sl, r0
   15890:	cmp	r6, r9
   15894:	str	r0, [r4]
   15898:	bne	158a4 <__assert_fail@plt+0x4144>
   1589c:	ldrd	r0, [r9]
   158a0:	stm	sl, {r0, r1}
   158a4:	ldr	r1, [r8]
   158a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158ac:	add	r0, sl, r1, lsl #3
   158b0:	sub	r1, r2, r1
   158b4:	lsl	r2, r1, #3
   158b8:	mov	r1, #0
   158bc:	bl	11670 <memset@plt>
   158c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   158c4:	str	r0, [r8]
   158c8:	mov	r9, sl
   158cc:	ldm	r7, {r0, r1}
   158d0:	orr	r8, r1, #1
   158d4:	add	r1, r7, #8
   158d8:	ldr	r2, [r7, #40]	; 0x28
   158dc:	ldr	r3, [r7, #44]	; 0x2c
   158e0:	ldr	r6, [r9, r5, lsl #3]!
   158e4:	str	r1, [sp, #20]
   158e8:	ldr	r4, [r9, #4]!
   158ec:	stm	sp, {r0, r8}
   158f0:	add	r0, sp, #8
   158f4:	stm	r0, {r1, r2, r3}
   158f8:	ldr	r2, [sp, #32]
   158fc:	ldr	r3, [sp, #36]	; 0x24
   15900:	mov	r1, r6
   15904:	mov	r0, r4
   15908:	bl	14584 <__assert_fail@plt+0x2e24>
   1590c:	cmp	r6, r0
   15910:	bhi	15974 <__assert_fail@plt+0x4214>
   15914:	add	r6, r0, #1
   15918:	movw	r0, #54000	; 0xd2f0
   1591c:	movt	r0, #3
   15920:	str	r6, [sl, r5, lsl #3]
   15924:	cmp	r4, r0
   15928:	beq	15934 <__assert_fail@plt+0x41d4>
   1592c:	mov	r0, r4
   15930:	bl	141b8 <__assert_fail@plt+0x2a58>
   15934:	mov	r0, r6
   15938:	bl	28638 <__assert_fail@plt+0x16ed8>
   1593c:	str	r0, [r9]
   15940:	mov	r4, r0
   15944:	add	r3, sp, #8
   15948:	ldr	r0, [r7]
   1594c:	ldr	r1, [r7, #40]	; 0x28
   15950:	ldr	r2, [r7, #44]	; 0x2c
   15954:	stm	sp, {r0, r8}
   15958:	ldr	r0, [sp, #20]
   1595c:	stm	r3, {r0, r1, r2}
   15960:	ldr	r2, [sp, #32]
   15964:	ldr	r3, [sp, #36]	; 0x24
   15968:	mov	r0, r4
   1596c:	mov	r1, r6
   15970:	bl	14584 <__assert_fail@plt+0x2e24>
   15974:	ldr	r0, [sp, #28]
   15978:	ldr	r1, [sp, #24]
   1597c:	str	r1, [r0]
   15980:	mov	r0, r4
   15984:	sub	sp, fp, #28
   15988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1598c:	bl	1173c <abort@plt>
   15990:	movw	r3, #53952	; 0xd2c0
   15994:	movt	r3, #3
   15998:	b	157f8 <__assert_fail@plt+0x4098>
   1599c:	movw	r3, #53952	; 0xd2c0
   159a0:	mov	r1, r0
   159a4:	mov	r0, #0
   159a8:	mvn	r2, #0
   159ac:	movt	r3, #3
   159b0:	b	157f8 <__assert_fail@plt+0x4098>
   159b4:	movw	r3, #53952	; 0xd2c0
   159b8:	mov	r2, r1
   159bc:	mov	r1, r0
   159c0:	mov	r0, #0
   159c4:	movt	r3, #3
   159c8:	b	157f8 <__assert_fail@plt+0x4098>
   159cc:	push	{fp, lr}
   159d0:	mov	fp, sp
   159d4:	sub	sp, sp, #48	; 0x30
   159d8:	vmov.i32	q8, #0	; 0x00000000
   159dc:	mov	ip, #32
   159e0:	mov	r3, sp
   159e4:	mov	lr, r2
   159e8:	cmp	r1, #10
   159ec:	add	r2, r3, #16
   159f0:	vst1.64	{d16-d17}, [r3], ip
   159f4:	vst1.64	{d16-d17}, [r2]
   159f8:	vst1.64	{d16-d17}, [r3]
   159fc:	beq	15a1c <__assert_fail@plt+0x42bc>
   15a00:	str	r1, [sp]
   15a04:	mov	r3, sp
   15a08:	mov	r1, lr
   15a0c:	mvn	r2, #0
   15a10:	bl	157f8 <__assert_fail@plt+0x4098>
   15a14:	mov	sp, fp
   15a18:	pop	{fp, pc}
   15a1c:	bl	1173c <abort@plt>
   15a20:	push	{r4, sl, fp, lr}
   15a24:	add	fp, sp, #8
   15a28:	sub	sp, sp, #48	; 0x30
   15a2c:	vmov.i32	q8, #0	; 0x00000000
   15a30:	mov	ip, r3
   15a34:	mov	r3, sp
   15a38:	mov	lr, #32
   15a3c:	cmp	r1, #10
   15a40:	add	r4, r3, #16
   15a44:	vst1.64	{d16-d17}, [r3], lr
   15a48:	vst1.64	{d16-d17}, [r4]
   15a4c:	vst1.64	{d16-d17}, [r3]
   15a50:	beq	15a70 <__assert_fail@plt+0x4310>
   15a54:	str	r1, [sp]
   15a58:	mov	r1, r2
   15a5c:	mov	r3, sp
   15a60:	mov	r2, ip
   15a64:	bl	157f8 <__assert_fail@plt+0x4098>
   15a68:	sub	sp, fp, #8
   15a6c:	pop	{r4, sl, fp, pc}
   15a70:	bl	1173c <abort@plt>
   15a74:	push	{fp, lr}
   15a78:	mov	fp, sp
   15a7c:	sub	sp, sp, #48	; 0x30
   15a80:	vmov.i32	q8, #0	; 0x00000000
   15a84:	mov	r3, sp
   15a88:	mov	ip, #32
   15a8c:	cmp	r0, #10
   15a90:	add	r2, r3, #16
   15a94:	vst1.64	{d16-d17}, [r3], ip
   15a98:	vst1.64	{d16-d17}, [r2]
   15a9c:	vst1.64	{d16-d17}, [r3]
   15aa0:	beq	15ac0 <__assert_fail@plt+0x4360>
   15aa4:	str	r0, [sp]
   15aa8:	mov	r3, sp
   15aac:	mov	r0, #0
   15ab0:	mvn	r2, #0
   15ab4:	bl	157f8 <__assert_fail@plt+0x4098>
   15ab8:	mov	sp, fp
   15abc:	pop	{fp, pc}
   15ac0:	bl	1173c <abort@plt>
   15ac4:	push	{fp, lr}
   15ac8:	mov	fp, sp
   15acc:	sub	sp, sp, #48	; 0x30
   15ad0:	vmov.i32	q8, #0	; 0x00000000
   15ad4:	mov	r3, sp
   15ad8:	mov	ip, #32
   15adc:	cmp	r0, #10
   15ae0:	add	lr, r3, #16
   15ae4:	vst1.64	{d16-d17}, [r3], ip
   15ae8:	vst1.64	{d16-d17}, [lr]
   15aec:	vst1.64	{d16-d17}, [r3]
   15af0:	beq	15b0c <__assert_fail@plt+0x43ac>
   15af4:	str	r0, [sp]
   15af8:	mov	r3, sp
   15afc:	mov	r0, #0
   15b00:	bl	157f8 <__assert_fail@plt+0x4098>
   15b04:	mov	sp, fp
   15b08:	pop	{fp, pc}
   15b0c:	bl	1173c <abort@plt>
   15b10:	push	{r4, sl, fp, lr}
   15b14:	add	fp, sp, #8
   15b18:	sub	sp, sp, #48	; 0x30
   15b1c:	mov	lr, r0
   15b20:	movw	r0, #53952	; 0xd2c0
   15b24:	mov	ip, r1
   15b28:	mov	r1, #32
   15b2c:	mov	r4, #1
   15b30:	movt	r0, #3
   15b34:	add	r3, r0, #16
   15b38:	vld1.64	{d16-d17}, [r0], r1
   15b3c:	vld1.64	{d20-d21}, [r0]
   15b40:	vld1.64	{d18-d19}, [r3]
   15b44:	mov	r3, sp
   15b48:	add	r0, r3, #32
   15b4c:	add	r1, r3, #16
   15b50:	vst1.64	{d20-d21}, [r0]
   15b54:	mov	r0, #28
   15b58:	vst1.64	{d18-d19}, [r1]
   15b5c:	mov	r1, r3
   15b60:	and	r0, r0, r2, lsr #3
   15b64:	and	r2, r2, #31
   15b68:	vst1.64	{d16-d17}, [r1], r0
   15b6c:	ldr	r0, [r1, #8]
   15b70:	bic	r4, r4, r0, lsr r2
   15b74:	eor	r0, r0, r4, lsl r2
   15b78:	mov	r2, ip
   15b7c:	str	r0, [r1, #8]
   15b80:	mov	r0, #0
   15b84:	mov	r1, lr
   15b88:	bl	157f8 <__assert_fail@plt+0x4098>
   15b8c:	sub	sp, fp, #8
   15b90:	pop	{r4, sl, fp, pc}
   15b94:	push	{fp, lr}
   15b98:	mov	fp, sp
   15b9c:	sub	sp, sp, #48	; 0x30
   15ba0:	mov	ip, r0
   15ba4:	movw	r0, #53952	; 0xd2c0
   15ba8:	mov	r2, #32
   15bac:	movt	r0, #3
   15bb0:	add	r3, r0, #16
   15bb4:	vld1.64	{d16-d17}, [r0], r2
   15bb8:	vld1.64	{d20-d21}, [r0]
   15bbc:	vld1.64	{d18-d19}, [r3]
   15bc0:	mov	r3, sp
   15bc4:	add	r0, r3, #32
   15bc8:	add	r2, r3, #16
   15bcc:	vst1.64	{d20-d21}, [r0]
   15bd0:	mov	r0, #28
   15bd4:	vst1.64	{d18-d19}, [r2]
   15bd8:	mov	r2, r3
   15bdc:	and	r0, r0, r1, lsr #3
   15be0:	and	r1, r1, #31
   15be4:	vst1.64	{d16-d17}, [r2], r0
   15be8:	mov	r0, #1
   15bec:	ldr	lr, [r2, #8]
   15bf0:	bic	r0, r0, lr, lsr r1
   15bf4:	eor	r0, lr, r0, lsl r1
   15bf8:	mov	r1, ip
   15bfc:	str	r0, [r2, #8]
   15c00:	mov	r0, #0
   15c04:	mvn	r2, #0
   15c08:	bl	157f8 <__assert_fail@plt+0x4098>
   15c0c:	mov	sp, fp
   15c10:	pop	{fp, pc}
   15c14:	push	{fp, lr}
   15c18:	mov	fp, sp
   15c1c:	sub	sp, sp, #48	; 0x30
   15c20:	mov	r1, r0
   15c24:	movw	r0, #53952	; 0xd2c0
   15c28:	mov	r3, #32
   15c2c:	movt	r0, #3
   15c30:	add	r2, r0, #16
   15c34:	vld1.64	{d16-d17}, [r0], r3
   15c38:	mov	r3, sp
   15c3c:	vld1.64	{d18-d19}, [r2]
   15c40:	vld1.64	{d20-d21}, [r0]
   15c44:	add	r2, r3, #16
   15c48:	add	r0, r3, #32
   15c4c:	vst1.64	{d18-d19}, [r2]
   15c50:	vst1.64	{d20-d21}, [r0]
   15c54:	mov	r0, #12
   15c58:	mov	r2, r3
   15c5c:	vst1.64	{d16-d17}, [r2], r0
   15c60:	ldr	r0, [r2]
   15c64:	orr	r0, r0, #67108864	; 0x4000000
   15c68:	str	r0, [r2]
   15c6c:	mov	r0, #0
   15c70:	mvn	r2, #0
   15c74:	bl	157f8 <__assert_fail@plt+0x4098>
   15c78:	mov	sp, fp
   15c7c:	pop	{fp, pc}
   15c80:	push	{fp, lr}
   15c84:	mov	fp, sp
   15c88:	sub	sp, sp, #48	; 0x30
   15c8c:	mov	ip, r1
   15c90:	mov	r1, r0
   15c94:	movw	r0, #53952	; 0xd2c0
   15c98:	mov	r2, #32
   15c9c:	movt	r0, #3
   15ca0:	add	r3, r0, #16
   15ca4:	vld1.64	{d16-d17}, [r0], r2
   15ca8:	vld1.64	{d18-d19}, [r3]
   15cac:	vld1.64	{d20-d21}, [r0]
   15cb0:	mov	r3, sp
   15cb4:	add	r2, r3, #16
   15cb8:	add	r0, r3, #32
   15cbc:	vst1.64	{d18-d19}, [r2]
   15cc0:	vst1.64	{d20-d21}, [r0]
   15cc4:	mov	r0, #12
   15cc8:	mov	r2, r3
   15ccc:	vst1.64	{d16-d17}, [r2], r0
   15cd0:	ldr	r0, [r2]
   15cd4:	orr	r0, r0, #67108864	; 0x4000000
   15cd8:	str	r0, [r2]
   15cdc:	mov	r0, #0
   15ce0:	mov	r2, ip
   15ce4:	bl	157f8 <__assert_fail@plt+0x4098>
   15ce8:	mov	sp, fp
   15cec:	pop	{fp, pc}
   15cf0:	push	{r4, sl, fp, lr}
   15cf4:	add	fp, sp, #8
   15cf8:	sub	sp, sp, #96	; 0x60
   15cfc:	vmov.i32	q8, #0	; 0x00000000
   15d00:	mov	ip, r2
   15d04:	mov	r2, sp
   15d08:	mov	r4, #28
   15d0c:	cmp	r1, #10
   15d10:	mov	r3, r2
   15d14:	add	lr, r2, #16
   15d18:	vst1.64	{d16-d17}, [r3], r4
   15d1c:	vst1.64	{d16-d17}, [lr]
   15d20:	vst1.32	{d16-d17}, [r3]
   15d24:	beq	15d74 <__assert_fail@plt+0x4614>
   15d28:	vld1.64	{d16-d17}, [r2], r4
   15d2c:	vld1.64	{d18-d19}, [lr]
   15d30:	add	r3, sp, #48	; 0x30
   15d34:	vld1.32	{d20-d21}, [r2]
   15d38:	add	r2, r3, #20
   15d3c:	add	r4, r3, #4
   15d40:	vst1.32	{d18-d19}, [r2]
   15d44:	add	r2, r3, #32
   15d48:	vst1.32	{d16-d17}, [r4]
   15d4c:	vst1.32	{d20-d21}, [r2]
   15d50:	str	r1, [sp, #48]	; 0x30
   15d54:	mvn	r2, #0
   15d58:	ldr	r1, [sp, #60]	; 0x3c
   15d5c:	orr	r1, r1, #67108864	; 0x4000000
   15d60:	str	r1, [sp, #60]	; 0x3c
   15d64:	mov	r1, ip
   15d68:	bl	157f8 <__assert_fail@plt+0x4098>
   15d6c:	sub	sp, fp, #8
   15d70:	pop	{r4, sl, fp, pc}
   15d74:	bl	1173c <abort@plt>
   15d78:	push	{r4, r5, r6, sl, fp, lr}
   15d7c:	add	fp, sp, #16
   15d80:	sub	sp, sp, #48	; 0x30
   15d84:	mov	ip, r3
   15d88:	movw	r3, #53952	; 0xd2c0
   15d8c:	mov	r6, #32
   15d90:	cmp	r1, #0
   15d94:	mov	r4, sp
   15d98:	movt	r3, #3
   15d9c:	cmpne	r2, #0
   15da0:	add	r5, r4, #16
   15da4:	add	lr, r3, #16
   15da8:	vld1.64	{d16-d17}, [r3], r6
   15dac:	vld1.64	{d18-d19}, [lr]
   15db0:	vld1.64	{d20-d21}, [r3]
   15db4:	mov	r3, #10
   15db8:	vst1.64	{d16-d17}, [r4], r6
   15dbc:	vst1.64	{d18-d19}, [r5]
   15dc0:	vst1.64	{d20-d21}, [r4]
   15dc4:	str	r3, [sp]
   15dc8:	bne	15dd0 <__assert_fail@plt+0x4670>
   15dcc:	bl	1173c <abort@plt>
   15dd0:	str	r2, [sp, #44]	; 0x2c
   15dd4:	str	r1, [sp, #40]	; 0x28
   15dd8:	mov	r3, sp
   15ddc:	mov	r1, ip
   15de0:	mvn	r2, #0
   15de4:	bl	157f8 <__assert_fail@plt+0x4098>
   15de8:	sub	sp, fp, #16
   15dec:	pop	{r4, r5, r6, sl, fp, pc}
   15df0:	push	{r4, r5, r6, sl, fp, lr}
   15df4:	add	fp, sp, #16
   15df8:	sub	sp, sp, #48	; 0x30
   15dfc:	mov	lr, r3
   15e00:	movw	r3, #53952	; 0xd2c0
   15e04:	mov	r6, #32
   15e08:	cmp	r1, #0
   15e0c:	mov	r4, sp
   15e10:	movt	r3, #3
   15e14:	cmpne	r2, #0
   15e18:	add	r5, r4, #16
   15e1c:	add	ip, r3, #16
   15e20:	vld1.64	{d16-d17}, [r3], r6
   15e24:	vld1.64	{d18-d19}, [ip]
   15e28:	vld1.64	{d20-d21}, [r3]
   15e2c:	mov	r3, #10
   15e30:	vst1.64	{d16-d17}, [r4], r6
   15e34:	vst1.64	{d18-d19}, [r5]
   15e38:	vst1.64	{d20-d21}, [r4]
   15e3c:	str	r3, [sp]
   15e40:	bne	15e48 <__assert_fail@plt+0x46e8>
   15e44:	bl	1173c <abort@plt>
   15e48:	ldr	ip, [fp, #8]
   15e4c:	str	r2, [sp, #44]	; 0x2c
   15e50:	str	r1, [sp, #40]	; 0x28
   15e54:	mov	r3, sp
   15e58:	mov	r1, lr
   15e5c:	mov	r2, ip
   15e60:	bl	157f8 <__assert_fail@plt+0x4098>
   15e64:	sub	sp, fp, #16
   15e68:	pop	{r4, r5, r6, sl, fp, pc}
   15e6c:	push	{r4, sl, fp, lr}
   15e70:	add	fp, sp, #8
   15e74:	sub	sp, sp, #48	; 0x30
   15e78:	movw	r3, #53952	; 0xd2c0
   15e7c:	mov	lr, #32
   15e80:	mov	ip, r2
   15e84:	cmp	r0, #0
   15e88:	movt	r3, #3
   15e8c:	cmpne	r1, #0
   15e90:	add	r2, r3, #16
   15e94:	vld1.64	{d16-d17}, [r3], lr
   15e98:	vld1.64	{d20-d21}, [r3]
   15e9c:	vld1.64	{d18-d19}, [r2]
   15ea0:	mov	r2, sp
   15ea4:	add	r4, r2, #16
   15ea8:	vst1.64	{d16-d17}, [r2], lr
   15eac:	vst1.64	{d20-d21}, [r2]
   15eb0:	mov	r2, #10
   15eb4:	vst1.64	{d18-d19}, [r4]
   15eb8:	str	r2, [sp]
   15ebc:	bne	15ec4 <__assert_fail@plt+0x4764>
   15ec0:	bl	1173c <abort@plt>
   15ec4:	str	r1, [sp, #44]	; 0x2c
   15ec8:	str	r0, [sp, #40]	; 0x28
   15ecc:	mov	r3, sp
   15ed0:	mov	r0, #0
   15ed4:	mov	r1, ip
   15ed8:	mvn	r2, #0
   15edc:	bl	157f8 <__assert_fail@plt+0x4098>
   15ee0:	sub	sp, fp, #8
   15ee4:	pop	{r4, sl, fp, pc}
   15ee8:	push	{r4, r5, fp, lr}
   15eec:	add	fp, sp, #8
   15ef0:	sub	sp, sp, #48	; 0x30
   15ef4:	mov	ip, r3
   15ef8:	movw	r3, #53952	; 0xd2c0
   15efc:	mov	r4, #32
   15f00:	mov	lr, r2
   15f04:	cmp	r0, #0
   15f08:	movt	r3, #3
   15f0c:	cmpne	r1, #0
   15f10:	add	r2, r3, #16
   15f14:	vld1.64	{d16-d17}, [r3], r4
   15f18:	vld1.64	{d20-d21}, [r3]
   15f1c:	vld1.64	{d18-d19}, [r2]
   15f20:	mov	r2, sp
   15f24:	add	r5, r2, #16
   15f28:	vst1.64	{d16-d17}, [r2], r4
   15f2c:	vst1.64	{d20-d21}, [r2]
   15f30:	mov	r2, #10
   15f34:	vst1.64	{d18-d19}, [r5]
   15f38:	str	r2, [sp]
   15f3c:	bne	15f44 <__assert_fail@plt+0x47e4>
   15f40:	bl	1173c <abort@plt>
   15f44:	str	r1, [sp, #44]	; 0x2c
   15f48:	str	r0, [sp, #40]	; 0x28
   15f4c:	mov	r3, sp
   15f50:	mov	r0, #0
   15f54:	mov	r1, lr
   15f58:	mov	r2, ip
   15f5c:	bl	157f8 <__assert_fail@plt+0x4098>
   15f60:	sub	sp, fp, #8
   15f64:	pop	{r4, r5, fp, pc}
   15f68:	movw	r3, #53624	; 0xd178
   15f6c:	movt	r3, #3
   15f70:	b	157f8 <__assert_fail@plt+0x4098>
   15f74:	movw	r3, #53624	; 0xd178
   15f78:	mov	r2, r1
   15f7c:	mov	r1, r0
   15f80:	mov	r0, #0
   15f84:	movt	r3, #3
   15f88:	b	157f8 <__assert_fail@plt+0x4098>
   15f8c:	movw	r3, #53624	; 0xd178
   15f90:	mvn	r2, #0
   15f94:	movt	r3, #3
   15f98:	b	157f8 <__assert_fail@plt+0x4098>
   15f9c:	movw	r3, #53624	; 0xd178
   15fa0:	mov	r1, r0
   15fa4:	mov	r0, #0
   15fa8:	mvn	r2, #0
   15fac:	movt	r3, #3
   15fb0:	b	157f8 <__assert_fail@plt+0x4098>
   15fb4:	push	{r4, r5, fp, lr}
   15fb8:	add	fp, sp, #8
   15fbc:	mov	r5, r0
   15fc0:	mov	r4, r1
   15fc4:	mov	r0, #0
   15fc8:	mov	r2, #5
   15fcc:	mov	r1, r5
   15fd0:	bl	114d8 <dcgettext@plt>
   15fd4:	cmp	r0, r5
   15fd8:	popne	{r4, r5, fp, pc}
   15fdc:	bl	2b60c <__assert_fail@plt+0x19eac>
   15fe0:	ldrb	r1, [r0]
   15fe4:	and	r1, r1, #223	; 0xdf
   15fe8:	cmp	r1, #71	; 0x47
   15fec:	beq	16054 <__assert_fail@plt+0x48f4>
   15ff0:	cmp	r1, #85	; 0x55
   15ff4:	bne	160ac <__assert_fail@plt+0x494c>
   15ff8:	ldrb	r1, [r0, #1]
   15ffc:	and	r1, r1, #223	; 0xdf
   16000:	cmp	r1, #84	; 0x54
   16004:	bne	160ac <__assert_fail@plt+0x494c>
   16008:	ldrb	r1, [r0, #2]
   1600c:	and	r1, r1, #223	; 0xdf
   16010:	cmp	r1, #70	; 0x46
   16014:	bne	160ac <__assert_fail@plt+0x494c>
   16018:	ldrb	r1, [r0, #3]
   1601c:	cmp	r1, #45	; 0x2d
   16020:	bne	160ac <__assert_fail@plt+0x494c>
   16024:	ldrb	r1, [r0, #4]
   16028:	cmp	r1, #56	; 0x38
   1602c:	bne	160ac <__assert_fail@plt+0x494c>
   16030:	ldrb	r0, [r0, #5]
   16034:	cmp	r0, #0
   16038:	bne	160ac <__assert_fail@plt+0x494c>
   1603c:	ldrb	r1, [r5]
   16040:	movw	r2, #51038	; 0xc75e
   16044:	movw	r0, #51042	; 0xc762
   16048:	movt	r2, #2
   1604c:	movt	r0, #2
   16050:	b	160dc <__assert_fail@plt+0x497c>
   16054:	ldrb	r1, [r0, #1]
   16058:	and	r1, r1, #223	; 0xdf
   1605c:	cmp	r1, #66	; 0x42
   16060:	bne	160ac <__assert_fail@plt+0x494c>
   16064:	ldrb	r1, [r0, #2]
   16068:	cmp	r1, #49	; 0x31
   1606c:	bne	160ac <__assert_fail@plt+0x494c>
   16070:	ldrb	r1, [r0, #3]
   16074:	cmp	r1, #56	; 0x38
   16078:	bne	160ac <__assert_fail@plt+0x494c>
   1607c:	ldrb	r1, [r0, #4]
   16080:	cmp	r1, #48	; 0x30
   16084:	bne	160ac <__assert_fail@plt+0x494c>
   16088:	ldrb	r1, [r0, #5]
   1608c:	cmp	r1, #51	; 0x33
   16090:	bne	160ac <__assert_fail@plt+0x494c>
   16094:	ldrb	r1, [r0, #6]
   16098:	cmp	r1, #48	; 0x30
   1609c:	bne	160ac <__assert_fail@plt+0x494c>
   160a0:	ldrb	r0, [r0, #7]
   160a4:	cmp	r0, #0
   160a8:	beq	160c8 <__assert_fail@plt+0x4968>
   160ac:	movw	r1, #51034	; 0xc75a
   160b0:	movw	r0, #50006	; 0xc356
   160b4:	cmp	r4, #9
   160b8:	movt	r1, #2
   160bc:	movt	r0, #2
   160c0:	moveq	r0, r1
   160c4:	pop	{r4, r5, fp, pc}
   160c8:	ldrb	r1, [r5]
   160cc:	movw	r2, #51046	; 0xc766
   160d0:	movw	r0, #51050	; 0xc76a
   160d4:	movt	r2, #2
   160d8:	movt	r0, #2
   160dc:	cmp	r1, #96	; 0x60
   160e0:	moveq	r0, r2
   160e4:	pop	{r4, r5, fp, pc}
	...
   160f0:	push	{fp, lr}
   160f4:	mov	fp, sp
   160f8:	mov	lr, r0
   160fc:	movw	r0, #54260	; 0xd3f4
   16100:	mov	ip, r1
   16104:	ldrb	r1, [r2, #28]
   16108:	movt	r0, #3
   1610c:	ldr	r3, [r0]
   16110:	mov	r0, #16
   16114:	and	r1, r1, #111	; 0x6f
   16118:	and	r0, r0, r3, lsr #21
   1611c:	orr	r0, r1, r0
   16120:	mov	r1, lr
   16124:	orr	r0, r0, #128	; 0x80
   16128:	strb	r0, [r2, #28]
   1612c:	mov	r0, r2
   16130:	mov	r2, ip
   16134:	bl	16170 <__assert_fail@plt+0x4a10>
   16138:	cmp	r0, #0
   1613c:	beq	16168 <__assert_fail@plt+0x4a08>
   16140:	movw	r1, #51528	; 0xc948
   16144:	mov	r2, #5
   16148:	movt	r1, #2
   1614c:	ldr	r0, [r1, r0, lsl #2]
   16150:	movw	r1, #51144	; 0xc7c8
   16154:	movt	r1, #2
   16158:	add	r1, r1, r0
   1615c:	mov	r0, #0
   16160:	pop	{fp, lr}
   16164:	b	114d8 <dcgettext@plt>
   16168:	mov	r0, #0
   1616c:	pop	{fp, pc}
   16170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16174:	add	fp, sp, #28
   16178:	sub	sp, sp, #140	; 0x8c
   1617c:	mov	sl, r0
   16180:	mov	r0, #0
   16184:	str	r3, [sp, #24]
   16188:	mov	r5, r1
   1618c:	mov	r9, r2
   16190:	str	r0, [fp, #-52]	; 0xffffffcc
   16194:	str	r0, [sl, #24]
   16198:	str	r0, [sl, #8]
   1619c:	str	r3, [sl, #12]
   161a0:	ldrb	r0, [sl, #28]
   161a4:	and	r0, r0, #144	; 0x90
   161a8:	strb	r0, [sl, #28]
   161ac:	ldm	sl, {r0, r1}
   161b0:	cmp	r1, #159	; 0x9f
   161b4:	bls	16994 <__assert_fail@plt+0x5234>
   161b8:	mov	r1, #160	; 0xa0
   161bc:	mov	r2, #160	; 0xa0
   161c0:	str	r0, [sp, #28]
   161c4:	str	r1, [sl, #8]
   161c8:	mov	r1, #0
   161cc:	bl	11670 <memset@plt>
   161d0:	ldr	r3, [sp, #28]
   161d4:	mov	r0, #31
   161d8:	str	r0, [r3, #64]	; 0x40
   161dc:	movw	r0, #43689	; 0xaaa9
   161e0:	movt	r0, #2730	; 0xaaa
   161e4:	cmp	r9, r0
   161e8:	bhi	16388 <__assert_fail@plt+0x4c28>
   161ec:	add	r7, r9, #1
   161f0:	mov	r4, r3
   161f4:	lsl	r0, r7, #3
   161f8:	str	r7, [r3, #4]
   161fc:	bl	2b260 <__assert_fail@plt+0x19b00>
   16200:	str	r0, [r4]
   16204:	mov	r0, #1
   16208:	mov	r6, r0
   1620c:	lsl	r0, r0, #1
   16210:	cmp	r6, r9
   16214:	bls	16208 <__assert_fail@plt+0x4aa8>
   16218:	mov	r0, #12
   1621c:	mov	r1, r6
   16220:	str	r7, [sp, #12]
   16224:	str	r5, [sp, #20]
   16228:	bl	2b20c <__assert_fail@plt+0x19aac>
   1622c:	ldr	r4, [sp, #28]
   16230:	sub	r1, r6, #1
   16234:	str	r1, [r4, #68]	; 0x44
   16238:	str	r0, [r4, #32]
   1623c:	bl	1155c <__ctype_get_mb_cur_max@plt>
   16240:	str	r0, [r4, #92]	; 0x5c
   16244:	mov	r0, #14
   16248:	bl	116f4 <nl_langinfo@plt>
   1624c:	ldrb	r1, [r0]
   16250:	orr	r1, r1, #32
   16254:	cmp	r1, #117	; 0x75
   16258:	bne	162ac <__assert_fail@plt+0x4b4c>
   1625c:	ldrb	r1, [r0, #1]
   16260:	orr	r1, r1, #32
   16264:	cmp	r1, #116	; 0x74
   16268:	bne	162ac <__assert_fail@plt+0x4b4c>
   1626c:	ldrb	r1, [r0, #2]
   16270:	orr	r1, r1, #32
   16274:	cmp	r1, #102	; 0x66
   16278:	bne	162ac <__assert_fail@plt+0x4b4c>
   1627c:	ldrb	r1, [r0, #3]!
   16280:	cmp	r1, #45	; 0x2d
   16284:	movw	r1, #51644	; 0xc9bc
   16288:	movt	r1, #2
   1628c:	addeq	r0, r0, #1
   16290:	bl	11418 <strcmp@plt>
   16294:	cmp	r0, #0
   16298:	bne	162ac <__assert_fail@plt+0x4b4c>
   1629c:	ldr	r1, [sp, #28]
   162a0:	ldrb	r0, [r1, #88]	; 0x58
   162a4:	orr	r0, r0, #4
   162a8:	strb	r0, [r1, #88]	; 0x58
   162ac:	ldr	r3, [sp, #28]
   162b0:	ldrb	r0, [r3, #88]	; 0x58
   162b4:	and	r1, r0, #247	; 0xf7
   162b8:	strb	r1, [r3, #88]	; 0x58
   162bc:	ldr	r1, [r3, #92]	; 0x5c
   162c0:	cmp	r1, #2
   162c4:	blt	16370 <__assert_fail@plt+0x4c10>
   162c8:	tst	r0, #4
   162cc:	bne	16364 <__assert_fail@plt+0x4c04>
   162d0:	mov	r0, #32
   162d4:	mov	r1, #1
   162d8:	mov	r4, #1
   162dc:	bl	2b20c <__assert_fail@plt+0x19aac>
   162e0:	ldr	r3, [sp, #28]
   162e4:	cmp	r0, #0
   162e8:	str	r0, [r3, #60]	; 0x3c
   162ec:	beq	16388 <__assert_fail@plt+0x4c28>
   162f0:	mov	r5, #0
   162f4:	mov	r7, #0
   162f8:	b	1630c <__assert_fail@plt+0x4bac>
   162fc:	add	r7, r7, #1
   16300:	add	r5, r5, r8
   16304:	cmp	r7, #8
   16308:	beq	16370 <__assert_fail@plt+0x4c10>
   1630c:	mov	r8, #0
   16310:	b	16320 <__assert_fail@plt+0x4bc0>
   16314:	add	r8, r8, #1
   16318:	cmp	r8, #32
   1631c:	beq	162fc <__assert_fail@plt+0x4b9c>
   16320:	add	r6, r5, r8
   16324:	mov	r0, r6
   16328:	bl	1167c <btowc@plt>
   1632c:	ldr	r3, [sp, #28]
   16330:	cmn	r0, #1
   16334:	beq	16348 <__assert_fail@plt+0x4be8>
   16338:	ldr	r1, [r3, #60]	; 0x3c
   1633c:	ldr	r2, [r1, r7, lsl #2]
   16340:	orr	r2, r2, r4, lsl r8
   16344:	str	r2, [r1, r7, lsl #2]
   16348:	cmp	r6, #127	; 0x7f
   1634c:	bhi	16314 <__assert_fail@plt+0x4bb4>
   16350:	cmp	r6, r0
   16354:	ldrbne	r0, [r3, #88]	; 0x58
   16358:	orrne	r0, r0, #8
   1635c:	strbne	r0, [r3, #88]	; 0x58
   16360:	b	16314 <__assert_fail@plt+0x4bb4>
   16364:	movw	r0, #51596	; 0xc98c
   16368:	movt	r0, #2
   1636c:	str	r0, [r3, #60]	; 0x3c
   16370:	ldr	r0, [r3]
   16374:	ldr	r7, [sp, #20]
   16378:	cmp	r0, #0
   1637c:	ldrne	r0, [r3, #32]
   16380:	cmpne	r0, #0
   16384:	bne	163a8 <__assert_fail@plt+0x4c48>
   16388:	mov	r4, #12
   1638c:	mov	r0, r3
   16390:	str	r4, [fp, #-52]	; 0xffffffcc
   16394:	bl	17d1c <__assert_fail@plt+0x65bc>
   16398:	mov	r0, #0
   1639c:	str	r0, [sl]
   163a0:	str	r0, [sl, #4]
   163a4:	b	175b8 <__assert_fail@plt+0x5e58>
   163a8:	movw	r0, #0
   163ac:	movw	r1, #0
   163b0:	mov	r6, #0
   163b4:	movt	r0, #0
   163b8:	movt	r1, #0
   163bc:	str	r6, [fp, #-52]	; 0xffffffcc
   163c0:	orrs	r4, r1, r0
   163c4:	beq	163e0 <__assert_fail@plt+0x4c80>
   163c8:	add	r0, r3, #136	; 0x88
   163cc:	mov	r1, #0
   163d0:	bl	11490 <pthread_mutex_init@plt>
   163d4:	ldr	r3, [sp, #28]
   163d8:	cmp	r0, #0
   163dc:	bne	16388 <__assert_fail@plt+0x4c28>
   163e0:	vmov.i32	q8, #0	; 0x00000000
   163e4:	add	r1, sp, #32
   163e8:	str	r4, [sp, #8]
   163ec:	ldr	r4, [sl, #20]
   163f0:	ldr	r2, [sp, #24]
   163f4:	add	r0, r1, #64	; 0x40
   163f8:	vst1.32	{d16-d17}, [r0]
   163fc:	add	r0, r1, #52	; 0x34
   16400:	vst1.32	{d16-d17}, [r0]
   16404:	add	r0, r1, #36	; 0x24
   16408:	vst1.32	{d16-d17}, [r0]
   1640c:	add	r0, r1, #20
   16410:	vst1.32	{d16-d17}, [r0]
   16414:	add	r0, r1, #4
   16418:	add	r1, r1, #44	; 0x2c
   1641c:	vst1.32	{d16-d17}, [r0]
   16420:	str	r7, [sp, #32]
   16424:	ubfx	r0, r2, #22, #1
   16428:	vdup.32	q8, r9
   1642c:	strb	r0, [sp, #104]	; 0x68
   16430:	and	r0, r2, #4194304	; 0x400000
   16434:	str	r4, [sp, #96]	; 0x60
   16438:	orrs	r5, r0, r4
   1643c:	str	r0, [sp, #16]
   16440:	movwne	r5, #1
   16444:	cmp	r9, #1
   16448:	strb	r5, [sp, #107]	; 0x6b
   1644c:	ldr	r0, [r3, #92]	; 0x5c
   16450:	str	r0, [sp, #112]	; 0x70
   16454:	ldrb	r2, [r3, #88]	; 0x58
   16458:	vst1.32	{d16-d17}, [r1]
   1645c:	ubfx	r1, r2, #3, #1
   16460:	strb	r1, [sp, #106]	; 0x6a
   16464:	ubfx	r1, r2, #2, #1
   16468:	strb	r1, [sp, #105]	; 0x69
   1646c:	blt	164e4 <__assert_fail@plt+0x4d84>
   16470:	ldr	r8, [sp, #12]
   16474:	cmp	r0, #2
   16478:	blt	164a4 <__assert_fail@plt+0x4d44>
   1647c:	mov	r6, #12
   16480:	cmn	r9, #-1073741822	; 0xc0000002
   16484:	bhi	1698c <__assert_fail@plt+0x522c>
   16488:	lsl	r1, r8, #2
   1648c:	mov	r0, #0
   16490:	bl	2b290 <__assert_fail@plt+0x19b30>
   16494:	ldr	r3, [sp, #28]
   16498:	cmp	r0, #0
   1649c:	beq	1698c <__assert_fail@plt+0x522c>
   164a0:	str	r0, [sp, #40]	; 0x28
   164a4:	cmp	r5, #0
   164a8:	mov	r6, #0
   164ac:	mov	r5, #0
   164b0:	beq	164d8 <__assert_fail@plt+0x4d78>
   164b4:	mov	r0, #0
   164b8:	mov	r1, r8
   164bc:	bl	2b290 <__assert_fail@plt+0x19b30>
   164c0:	cmp	r0, #0
   164c4:	beq	16988 <__assert_fail@plt+0x5228>
   164c8:	ldr	r3, [sp, #28]
   164cc:	mov	r6, r0
   164d0:	mov	r5, #1
   164d4:	str	r0, [sp, #36]	; 0x24
   164d8:	str	r8, [sp, #68]	; 0x44
   164dc:	ldr	r0, [r3, #92]	; 0x5c
   164e0:	b	164e8 <__assert_fail@plt+0x4d88>
   164e4:	mov	r8, #0
   164e8:	ldr	r1, [sp, #16]
   164ec:	cmp	r5, #0
   164f0:	moveq	r6, r7
   164f4:	str	r6, [sp, #36]	; 0x24
   164f8:	cmp	r1, #0
   164fc:	beq	165e0 <__assert_fail@plt+0x4e80>
   16500:	cmp	r0, #2
   16504:	blt	165f4 <__assert_fail@plt+0x4e94>
   16508:	add	r0, sp, #32
   1650c:	bl	1b500 <__assert_fail@plt+0x9da0>
   16510:	cmp	r0, #0
   16514:	bne	16980 <__assert_fail@plt+0x5220>
   16518:	ldr	r1, [sp, #28]
   1651c:	add	r5, sp, #32
   16520:	b	1653c <__assert_fail@plt+0x4ddc>
   16524:	mov	r0, r5
   16528:	str	r4, [sp, #68]	; 0x44
   1652c:	bl	1b500 <__assert_fail@plt+0x9da0>
   16530:	ldr	r1, [sp, #28]
   16534:	cmp	r0, #0
   16538:	bne	16980 <__assert_fail@plt+0x5220>
   1653c:	ldr	r0, [sp, #64]	; 0x40
   16540:	cmp	r0, r9
   16544:	bge	166d0 <__assert_fail@plt+0x4f70>
   16548:	ldr	r0, [r1, #92]	; 0x5c
   1654c:	ldr	r2, [sp, #60]	; 0x3c
   16550:	ldr	r1, [sp, #68]	; 0x44
   16554:	add	r0, r0, r2
   16558:	cmp	r1, r0
   1655c:	bgt	166d0 <__assert_fail@plt+0x4f70>
   16560:	ldr	r0, [sp, #112]	; 0x70
   16564:	lsl	r4, r1, #1
   16568:	cmp	r0, #2
   1656c:	blt	165b8 <__assert_fail@plt+0x4e58>
   16570:	mov	r6, #12
   16574:	cmn	r4, #-1073741823	; 0xc0000001
   16578:	bhi	1698c <__assert_fail@plt+0x522c>
   1657c:	ldr	r0, [sp, #40]	; 0x28
   16580:	lsl	r8, r1, #3
   16584:	mov	r1, r8
   16588:	bl	2b290 <__assert_fail@plt+0x19b30>
   1658c:	cmp	r0, #0
   16590:	beq	1698c <__assert_fail@plt+0x522c>
   16594:	str	r0, [sp, #40]	; 0x28
   16598:	ldr	r0, [sp, #44]	; 0x2c
   1659c:	cmp	r0, #0
   165a0:	beq	165b8 <__assert_fail@plt+0x4e58>
   165a4:	mov	r1, r8
   165a8:	bl	2b290 <__assert_fail@plt+0x19b30>
   165ac:	cmp	r0, #0
   165b0:	beq	1698c <__assert_fail@plt+0x522c>
   165b4:	str	r0, [sp, #44]	; 0x2c
   165b8:	ldrb	r0, [sp, #107]	; 0x6b
   165bc:	cmp	r0, #0
   165c0:	beq	16524 <__assert_fail@plt+0x4dc4>
   165c4:	ldr	r0, [sp, #36]	; 0x24
   165c8:	mov	r1, r4
   165cc:	bl	2b290 <__assert_fail@plt+0x19b30>
   165d0:	cmp	r0, #0
   165d4:	beq	16988 <__assert_fail@plt+0x5228>
   165d8:	str	r0, [sp, #36]	; 0x24
   165dc:	b	16524 <__assert_fail@plt+0x4dc4>
   165e0:	cmp	r0, #2
   165e4:	blt	16658 <__assert_fail@plt+0x4ef8>
   165e8:	add	r0, sp, #32
   165ec:	bl	1be00 <__assert_fail@plt+0xa6a0>
   165f0:	b	166d0 <__assert_fail@plt+0x4f70>
   165f4:	cmp	r8, r9
   165f8:	movgt	r8, r9
   165fc:	cmp	r8, #1
   16600:	blt	166c4 <__assert_fail@plt+0x4f64>
   16604:	mov	r5, #0
   16608:	bl	115e0 <__ctype_toupper_loc@plt>
   1660c:	mov	r1, #0
   16610:	add	r2, r7, r5
   16614:	cmp	r4, #0
   16618:	ldrb	r2, [r2, r1]
   1661c:	bne	16650 <__assert_fail@plt+0x4ef0>
   16620:	ldr	r3, [r0]
   16624:	ldr	r2, [r3, r2, lsl #2]
   16628:	ldr	r3, [sp, #36]	; 0x24
   1662c:	strb	r2, [r3, r1]
   16630:	add	r2, r1, #1
   16634:	cmp	r2, r8
   16638:	bge	166bc <__assert_fail@plt+0x4f5c>
   1663c:	ldr	r7, [sp, #32]
   16640:	ldr	r5, [sp, #56]	; 0x38
   16644:	ldr	r4, [sp, #96]	; 0x60
   16648:	mov	r1, r2
   1664c:	b	16610 <__assert_fail@plt+0x4eb0>
   16650:	ldrb	r2, [r4, r2]
   16654:	b	16620 <__assert_fail@plt+0x4ec0>
   16658:	cmp	r4, #0
   1665c:	beq	168e0 <__assert_fail@plt+0x5180>
   16660:	cmp	r8, r9
   16664:	movgt	r8, r9
   16668:	cmp	r8, #1
   1666c:	blt	166c4 <__assert_fail@plt+0x4f64>
   16670:	ldrb	r0, [r7]
   16674:	cmp	r8, #1
   16678:	ldrb	r0, [r4, r0]
   1667c:	strb	r0, [r6]
   16680:	mov	r0, #1
   16684:	beq	166c8 <__assert_fail@plt+0x4f68>
   16688:	mov	r0, #1
   1668c:	ldr	r1, [sp, #32]
   16690:	ldr	r3, [sp, #56]	; 0x38
   16694:	ldr	r7, [sp, #96]	; 0x60
   16698:	ldr	r2, [sp, #36]	; 0x24
   1669c:	add	r1, r1, r3
   166a0:	ldrb	r1, [r1, r0]
   166a4:	ldrb	r1, [r7, r1]
   166a8:	strb	r1, [r2, r0]
   166ac:	add	r0, r0, #1
   166b0:	cmp	r0, r8
   166b4:	blt	1668c <__assert_fail@plt+0x4f2c>
   166b8:	b	166c8 <__assert_fail@plt+0x4f68>
   166bc:	add	r0, r1, #1
   166c0:	b	166c8 <__assert_fail@plt+0x4f68>
   166c4:	mov	r0, #0
   166c8:	str	r0, [sp, #64]	; 0x40
   166cc:	str	r0, [sp, #60]	; 0x3c
   166d0:	mov	r5, #0
   166d4:	ldr	r4, [sp, #24]
   166d8:	sub	r8, fp, #48	; 0x30
   166dc:	add	r6, sp, #32
   166e0:	str	r5, [fp, #-52]	; 0xffffffcc
   166e4:	str	r5, [sl, #24]
   166e8:	mov	r0, r8
   166ec:	mov	r1, r6
   166f0:	ldr	r7, [sl]
   166f4:	orr	r2, r4, #8388608	; 0x800000
   166f8:	str	r4, [r7, #128]	; 0x80
   166fc:	bl	1c270 <__assert_fail@plt+0xab10>
   16700:	ldr	r1, [sp, #72]	; 0x48
   16704:	mov	r2, r8
   16708:	mov	r3, r4
   1670c:	str	r5, [sp]
   16710:	add	r0, r1, r0
   16714:	mov	r1, sl
   16718:	str	r0, [sp, #72]	; 0x48
   1671c:	sub	r0, fp, #52	; 0x34
   16720:	str	r0, [sp, #4]
   16724:	mov	r0, r6
   16728:	bl	1c004 <__assert_fail@plt+0xa8a4>
   1672c:	ldr	r5, [sp, #28]
   16730:	mov	r4, r0
   16734:	cmp	r0, #0
   16738:	bne	16748 <__assert_fail@plt+0x4fe8>
   1673c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16740:	cmp	r0, #0
   16744:	bne	16a18 <__assert_fail@plt+0x52b8>
   16748:	ldr	r1, [r7, #64]	; 0x40
   1674c:	cmp	r1, #31
   16750:	beq	169b0 <__assert_fail@plt+0x5250>
   16754:	ldr	r0, [r7, #56]	; 0x38
   16758:	add	r0, r0, r1, lsl #5
   1675c:	add	r2, r1, #1
   16760:	vmov.i32	q8, #0	; 0x00000000
   16764:	mov	r1, #0
   16768:	str	r2, [r7, #64]	; 0x40
   1676c:	mov	r2, #2
   16770:	add	r6, r0, #4
   16774:	str	r1, [r0, #20]
   16778:	str	r1, [r0, #24]
   1677c:	str	r2, [r0, #28]
   16780:	mov	r0, #28
   16784:	mov	r1, r6
   16788:	vst1.32	{d16-d17}, [r1], r0
   1678c:	mvn	r0, #0
   16790:	str	r0, [r1]
   16794:	cmp	r4, #0
   16798:	mov	r0, r6
   1679c:	beq	167f0 <__assert_fail@plt+0x5090>
   167a0:	ldr	r1, [r7, #64]	; 0x40
   167a4:	cmp	r1, #31
   167a8:	beq	169e4 <__assert_fail@plt+0x5284>
   167ac:	ldr	r0, [r7, #56]	; 0x38
   167b0:	add	r0, r0, r1, lsl #5
   167b4:	add	r2, r1, #1
   167b8:	mov	r1, #0
   167bc:	cmp	r6, #0
   167c0:	mvn	r3, #0
   167c4:	str	r2, [r7, #64]	; 0x40
   167c8:	mov	r2, #16
   167cc:	str	r1, [r0, #4]!
   167d0:	add	ip, r0, #20
   167d4:	stmib	r0, {r4, r6}
   167d8:	str	r1, [r0, #12]
   167dc:	str	r1, [r0, #16]
   167e0:	stm	ip, {r1, r2, r3}
   167e4:	str	r0, [r4]
   167e8:	beq	16a10 <__assert_fail@plt+0x52b0>
   167ec:	str	r0, [r6]
   167f0:	cmp	r6, #0
   167f4:	cmpne	r0, #0
   167f8:	beq	16a10 <__assert_fail@plt+0x52b0>
   167fc:	str	r0, [r5, #52]	; 0x34
   16800:	ldr	r9, [sl]
   16804:	ldr	r0, [r9, #4]
   16808:	lsl	r0, r0, #2
   1680c:	bl	2b260 <__assert_fail@plt+0x19b00>
   16810:	str	r0, [r9, #12]
   16814:	ldr	r0, [r9, #4]
   16818:	lsl	r0, r0, #2
   1681c:	bl	2b260 <__assert_fail@plt+0x19b00>
   16820:	str	r0, [r9, #16]
   16824:	ldr	r0, [r9, #4]
   16828:	add	r0, r0, r0, lsl #1
   1682c:	lsl	r0, r0, #2
   16830:	bl	2b260 <__assert_fail@plt+0x19b00>
   16834:	str	r0, [r9, #20]
   16838:	ldr	r0, [r9, #4]
   1683c:	add	r0, r0, r0, lsl #1
   16840:	lsl	r0, r0, #2
   16844:	bl	2b260 <__assert_fail@plt+0x19b00>
   16848:	str	r0, [r9, #24]
   1684c:	ldr	r1, [r9, #12]
   16850:	cmp	r1, #0
   16854:	ldrne	r1, [r9, #16]
   16858:	cmpne	r1, #0
   1685c:	beq	16870 <__assert_fail@plt+0x5110>
   16860:	cmp	r0, #0
   16864:	ldrne	r0, [r9, #20]
   16868:	cmpne	r0, #0
   1686c:	bne	1687c <__assert_fail@plt+0x511c>
   16870:	mov	r0, #12
   16874:	str	r0, [fp, #-52]	; 0xffffffcc
   16878:	b	16a20 <__assert_fail@plt+0x52c0>
   1687c:	ldr	r0, [sl, #24]
   16880:	lsl	r0, r0, #2
   16884:	bl	2b260 <__assert_fail@plt+0x19b00>
   16888:	cmp	r0, #0
   1688c:	str	r0, [r9, #132]	; 0x84
   16890:	beq	16ca4 <__assert_fail@plt+0x5544>
   16894:	ldr	r1, [sl, #24]
   16898:	cmp	r1, #0
   1689c:	beq	16ad8 <__assert_fail@plt+0x5378>
   168a0:	mov	r2, #0
   168a4:	cmp	r1, #4
   168a8:	bcc	16ac8 <__assert_fail@plt+0x5368>
   168ac:	bic	r2, r1, #3
   168b0:	mov	r3, #1
   168b4:	add	r7, pc, #964	; 0x3c4
   168b8:	sub	r6, r2, #4
   168bc:	add	r3, r3, r6, lsr #2
   168c0:	cmp	r6, #12
   168c4:	and	ip, r3, #3
   168c8:	bcs	168ec <__assert_fail@plt+0x518c>
   168cc:	vld1.64	{d16-d17}, [r7 :128]
   168d0:	mov	r7, #0
   168d4:	cmp	ip, #0
   168d8:	bne	1695c <__assert_fail@plt+0x51fc>
   168dc:	b	16ad0 <__assert_fail@plt+0x5370>
   168e0:	str	r8, [sp, #64]	; 0x40
   168e4:	str	r8, [sp, #60]	; 0x3c
   168e8:	b	166d0 <__assert_fail@plt+0x4f70>
   168ec:	sub	r6, r3, ip
   168f0:	add	r3, pc, #904	; 0x388
   168f4:	vmov.i32	q9, #12	; 0x0000000c
   168f8:	vmov.i32	q10, #8	; 0x00000008
   168fc:	vmov.i32	q11, #4	; 0x00000004
   16900:	vmov.i32	q12, #16	; 0x00000010
   16904:	mov	r7, #0
   16908:	mov	lr, #64	; 0x40
   1690c:	mov	r4, r0
   16910:	vld1.64	{d16-d17}, [r3 :128]
   16914:	mov	r3, r0
   16918:	vadd.i32	q13, q8, q9
   1691c:	add	r5, r3, #48	; 0x30
   16920:	vadd.i32	q14, q8, q10
   16924:	vadd.i32	q15, q8, q11
   16928:	subs	r6, r6, #4
   1692c:	add	r7, r7, #16
   16930:	vst1.32	{d26-d27}, [r5]
   16934:	vst1.32	{d16-d17}, [r4], lr
   16938:	vadd.i32	q8, q8, q12
   1693c:	add	r5, r3, #32
   16940:	add	r3, r3, #16
   16944:	vst1.32	{d28-d29}, [r5]
   16948:	vst1.32	{d30-d31}, [r3]
   1694c:	mov	r3, r4
   16950:	bne	16918 <__assert_fail@plt+0x51b8>
   16954:	cmp	ip, #0
   16958:	beq	16ad0 <__assert_fail@plt+0x5370>
   1695c:	vmov.i32	q9, #4	; 0x00000004
   16960:	add	r3, r0, r7, lsl #2
   16964:	rsb	r7, ip, #0
   16968:	vadd.i32	q10, q8, q9
   1696c:	vst1.32	{d16-d17}, [r3]!
   16970:	adds	r7, r7, #1
   16974:	vorr	q8, q10, q10
   16978:	bcc	16968 <__assert_fail@plt+0x5208>
   1697c:	b	16ad0 <__assert_fail@plt+0x5370>
   16980:	mov	r6, r0
   16984:	b	1698c <__assert_fail@plt+0x522c>
   16988:	mov	r6, #12
   1698c:	str	r6, [fp, #-52]	; 0xffffffcc
   16990:	b	16a20 <__assert_fail@plt+0x52c0>
   16994:	mov	r1, #160	; 0xa0
   16998:	mov	r4, #160	; 0xa0
   1699c:	bl	2b290 <__assert_fail@plt+0x19b30>
   169a0:	cmp	r0, #0
   169a4:	beq	169dc <__assert_fail@plt+0x527c>
   169a8:	stm	sl, {r0, r4}
   169ac:	b	161b8 <__assert_fail@plt+0x4a58>
   169b0:	mov	r0, #996	; 0x3e4
   169b4:	bl	2b260 <__assert_fail@plt+0x19b00>
   169b8:	cmp	r0, #0
   169bc:	beq	16abc <__assert_fail@plt+0x535c>
   169c0:	ldr	r1, [r7, #56]	; 0x38
   169c4:	ldr	r5, [sp, #28]
   169c8:	str	r1, [r0]
   169cc:	mov	r1, #0
   169d0:	str	r1, [r7, #64]	; 0x40
   169d4:	str	r0, [r7, #56]	; 0x38
   169d8:	b	16758 <__assert_fail@plt+0x4ff8>
   169dc:	mov	r4, #12
   169e0:	b	175b8 <__assert_fail@plt+0x5e58>
   169e4:	mov	r0, #996	; 0x3e4
   169e8:	bl	2b260 <__assert_fail@plt+0x19b00>
   169ec:	ldr	r5, [sp, #28]
   169f0:	cmp	r0, #0
   169f4:	beq	16a10 <__assert_fail@plt+0x52b0>
   169f8:	ldr	r1, [r7, #56]	; 0x38
   169fc:	str	r1, [r0]
   16a00:	mov	r1, #0
   16a04:	str	r1, [r7, #64]	; 0x40
   16a08:	str	r0, [r7, #56]	; 0x38
   16a0c:	b	167b0 <__assert_fail@plt+0x5050>
   16a10:	mov	r0, #12
   16a14:	str	r0, [fp, #-52]	; 0xffffffcc
   16a18:	mov	r0, #0
   16a1c:	str	r0, [r5, #52]	; 0x34
   16a20:	ldr	r4, [sl]
   16a24:	ldr	r0, [r4, #56]	; 0x38
   16a28:	cmp	r0, #0
   16a2c:	beq	16a44 <__assert_fail@plt+0x52e4>
   16a30:	ldr	r5, [r0]
   16a34:	bl	141b8 <__assert_fail@plt+0x2a58>
   16a38:	cmp	r5, #0
   16a3c:	mov	r0, r5
   16a40:	bne	16a30 <__assert_fail@plt+0x52d0>
   16a44:	mov	r0, #31
   16a48:	mov	r5, #0
   16a4c:	str	r0, [r4, #64]	; 0x40
   16a50:	str	r5, [r4, #52]	; 0x34
   16a54:	str	r5, [r4, #56]	; 0x38
   16a58:	ldr	r0, [r4, #16]
   16a5c:	bl	141b8 <__assert_fail@plt+0x2a58>
   16a60:	str	r5, [r4, #16]
   16a64:	ldr	r0, [sp, #40]	; 0x28
   16a68:	bl	141b8 <__assert_fail@plt+0x2a58>
   16a6c:	ldr	r0, [sp, #44]	; 0x2c
   16a70:	bl	141b8 <__assert_fail@plt+0x2a58>
   16a74:	ldrb	r0, [sp, #107]	; 0x6b
   16a78:	cmp	r0, #0
   16a7c:	beq	16a88 <__assert_fail@plt+0x5328>
   16a80:	ldr	r0, [sp, #36]	; 0x24
   16a84:	bl	141b8 <__assert_fail@plt+0x2a58>
   16a88:	ldr	r0, [sp, #8]
   16a8c:	cmp	r0, #0
   16a90:	beq	16aa0 <__assert_fail@plt+0x5340>
   16a94:	ldr	r0, [sp, #28]
   16a98:	add	r0, r0, #136	; 0x88
   16a9c:	bl	11430 <pthread_mutex_destroy@plt>
   16aa0:	ldr	r0, [sp, #28]
   16aa4:	bl	17d1c <__assert_fail@plt+0x65bc>
   16aa8:	mov	r0, #0
   16aac:	str	r0, [sl]
   16ab0:	str	r0, [sl, #4]
   16ab4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   16ab8:	b	175b8 <__assert_fail@plt+0x5e58>
   16abc:	ldr	r5, [sp, #28]
   16ac0:	mov	r6, #0
   16ac4:	b	16794 <__assert_fail@plt+0x5034>
   16ac8:	str	r2, [r0, r2, lsl #2]
   16acc:	add	r2, r2, #1
   16ad0:	cmp	r1, r2
   16ad4:	bne	16ac8 <__assert_fail@plt+0x5368>
   16ad8:	ldr	r2, [r9, #52]	; 0x34
   16adc:	ldrb	r1, [r2, #24]
   16ae0:	cmp	r1, #17
   16ae4:	beq	16b10 <__assert_fail@plt+0x53b0>
   16ae8:	cmp	r1, #4
   16aec:	bne	16b60 <__assert_fail@plt+0x5400>
   16af0:	ldr	r1, [r2, #20]
   16af4:	mov	r3, #1
   16af8:	ldr	r0, [r0, r1, lsl #2]
   16afc:	str	r0, [r2, #20]
   16b00:	ldr	r1, [r9, #80]	; 0x50
   16b04:	orr	r0, r1, r3, lsl r0
   16b08:	str	r0, [r9, #80]	; 0x50
   16b0c:	b	16b60 <__assert_fail@plt+0x5400>
   16b10:	ldr	r1, [r2, #4]
   16b14:	cmp	r1, #0
   16b18:	beq	16b60 <__assert_fail@plt+0x5400>
   16b1c:	ldrb	r3, [r1, #24]
   16b20:	cmp	r3, #17
   16b24:	bne	16b60 <__assert_fail@plt+0x5400>
   16b28:	ldr	r3, [r1, #4]
   16b2c:	ldr	r1, [r1, #20]
   16b30:	cmp	r3, #0
   16b34:	str	r3, [r2, #4]
   16b38:	strne	r2, [r3]
   16b3c:	cmp	r1, #31
   16b40:	ldr	r3, [r2, #20]
   16b44:	ldr	r3, [r0, r3, lsl #2]
   16b48:	str	r3, [r0, r1, lsl #2]
   16b4c:	bgt	16b60 <__assert_fail@plt+0x5400>
   16b50:	ldr	r0, [r9, #80]	; 0x50
   16b54:	mov	r3, #1
   16b58:	bic	r0, r0, r3, lsl r1
   16b5c:	b	16b08 <__assert_fail@plt+0x53a8>
   16b60:	mov	r0, #1
   16b64:	ldr	r7, [r2, #4]
   16b68:	cmp	r7, #0
   16b6c:	bne	16b9c <__assert_fail@plt+0x543c>
   16b70:	mov	r3, #0
   16b74:	ldr	r7, [r2, #8]
   16b78:	mov	r1, r2
   16b7c:	cmp	r7, r3
   16b80:	cmpne	r7, #0
   16b84:	bne	16b9c <__assert_fail@plt+0x543c>
   16b88:	ldr	r2, [r1]
   16b8c:	mov	r3, r1
   16b90:	cmp	r2, #0
   16b94:	bne	16b74 <__assert_fail@plt+0x5414>
   16b98:	b	16c40 <__assert_fail@plt+0x54e0>
   16b9c:	ldrb	r1, [r7, #24]
   16ba0:	cmp	r1, #17
   16ba4:	beq	16be4 <__assert_fail@plt+0x5484>
   16ba8:	cmp	r1, #4
   16bac:	mov	r2, r7
   16bb0:	bne	16b64 <__assert_fail@plt+0x5404>
   16bb4:	ldr	r1, [r9, #132]	; 0x84
   16bb8:	mov	r2, r7
   16bbc:	cmp	r1, #0
   16bc0:	beq	16b64 <__assert_fail@plt+0x5404>
   16bc4:	ldr	r2, [r7, #20]
   16bc8:	ldr	r1, [r1, r2, lsl #2]
   16bcc:	str	r1, [r7, #20]
   16bd0:	ldr	r2, [r9, #80]	; 0x50
   16bd4:	orr	r1, r2, r0, lsl r1
   16bd8:	str	r1, [r9, #80]	; 0x50
   16bdc:	mov	r2, r7
   16be0:	b	16b64 <__assert_fail@plt+0x5404>
   16be4:	ldr	r3, [r7, #4]
   16be8:	mov	r2, r7
   16bec:	cmp	r3, #0
   16bf0:	beq	16b64 <__assert_fail@plt+0x5404>
   16bf4:	ldrb	r1, [r3, #24]
   16bf8:	mov	r2, r7
   16bfc:	cmp	r1, #17
   16c00:	bne	16b64 <__assert_fail@plt+0x5404>
   16c04:	ldr	r1, [r3, #4]
   16c08:	ldr	r3, [r3, #20]
   16c0c:	cmp	r1, #0
   16c10:	str	r1, [r7, #4]
   16c14:	strne	r7, [r1]
   16c18:	cmp	r3, #31
   16c1c:	ldr	r1, [r7, #20]
   16c20:	ldr	r2, [r9, #132]	; 0x84
   16c24:	ldr	r1, [r2, r1, lsl #2]
   16c28:	str	r1, [r2, r3, lsl #2]
   16c2c:	mov	r2, r7
   16c30:	bgt	16b64 <__assert_fail@plt+0x5404>
   16c34:	ldr	r1, [r9, #80]	; 0x50
   16c38:	bic	r1, r1, r0, lsl r3
   16c3c:	b	16bd8 <__assert_fail@plt+0x5478>
   16c40:	ldr	r1, [sl, #24]
   16c44:	cmp	r1, #0
   16c48:	beq	16c70 <__assert_fail@plt+0x5510>
   16c4c:	ldr	r0, [r9, #132]	; 0x84
   16c50:	mov	r2, #0
   16c54:	ldr	r3, [r0, r2, lsl #2]
   16c58:	cmp	r2, r3
   16c5c:	bne	16c90 <__assert_fail@plt+0x5530>
   16c60:	add	r2, r2, #1
   16c64:	cmp	r1, r2
   16c68:	bne	16c54 <__assert_fail@plt+0x54f4>
   16c6c:	b	16c98 <__assert_fail@plt+0x5538>
   16c70:	ldr	r0, [r9, #132]	; 0x84
   16c74:	b	16c98 <__assert_fail@plt+0x5538>
   16c78:	nop	{0}
   16c7c:	nop	{0}
   16c80:	andeq	r0, r0, r0
   16c84:	andeq	r0, r0, r1
   16c88:	andeq	r0, r0, r2
   16c8c:	andeq	r0, r0, r3
   16c90:	cmp	r1, r2
   16c94:	bne	16ca4 <__assert_fail@plt+0x5544>
   16c98:	bl	141b8 <__assert_fail@plt+0x2a58>
   16c9c:	mov	r0, #0
   16ca0:	str	r0, [r9, #132]	; 0x84
   16ca4:	ldr	r0, [r9, #52]	; 0x34
   16ca8:	mov	r7, #0
   16cac:	sub	r8, fp, #48	; 0x30
   16cb0:	mov	r4, r0
   16cb4:	ldr	r0, [r0, #4]
   16cb8:	cmp	r0, #0
   16cbc:	bne	16cb0 <__assert_fail@plt+0x5550>
   16cc0:	ldr	r0, [r4, #8]
   16cc4:	cmp	r0, #0
   16cc8:	bne	16cb0 <__assert_fail@plt+0x5550>
   16ccc:	mov	r2, #0
   16cd0:	cmp	r2, #0
   16cd4:	str	r7, [fp, #-48]	; 0xffffffd0
   16cd8:	beq	16d00 <__assert_fail@plt+0x55a0>
   16cdc:	ldrb	r0, [r2, #24]
   16ce0:	cmp	r0, #17
   16ce4:	bne	16d00 <__assert_fail@plt+0x55a0>
   16ce8:	mov	r0, r8
   16cec:	mov	r1, sl
   16cf0:	bl	2061c <__assert_fail@plt+0xeebc>
   16cf4:	cmp	r0, #0
   16cf8:	str	r0, [r4, #4]
   16cfc:	strne	r4, [r0]
   16d00:	ldr	r2, [r4, #8]
   16d04:	cmp	r2, #0
   16d08:	beq	16d30 <__assert_fail@plt+0x55d0>
   16d0c:	ldrb	r0, [r2, #24]
   16d10:	cmp	r0, #17
   16d14:	bne	16d30 <__assert_fail@plt+0x55d0>
   16d18:	mov	r0, r8
   16d1c:	mov	r1, sl
   16d20:	bl	2061c <__assert_fail@plt+0xeebc>
   16d24:	cmp	r0, #0
   16d28:	str	r0, [r4, #8]
   16d2c:	strne	r4, [r0]
   16d30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16d34:	cmp	r0, #0
   16d38:	bne	16874 <__assert_fail@plt+0x5114>
   16d3c:	ldr	r1, [r4]
   16d40:	cmp	r1, #0
   16d44:	beq	16d64 <__assert_fail@plt+0x5604>
   16d48:	ldr	r0, [r1, #8]
   16d4c:	cmp	r0, r4
   16d50:	cmpne	r0, #0
   16d54:	bne	16cb0 <__assert_fail@plt+0x5550>
   16d58:	ldr	r2, [r1, #4]
   16d5c:	mov	r4, r1
   16d60:	b	16cd0 <__assert_fail@plt+0x5570>
   16d64:	ldr	r0, [r9, #52]	; 0x34
   16d68:	mov	r4, r0
   16d6c:	ldr	r0, [r0, #4]
   16d70:	cmp	r0, #0
   16d74:	bne	16d68 <__assert_fail@plt+0x5608>
   16d78:	ldr	r0, [r4, #8]
   16d7c:	cmp	r0, #0
   16d80:	bne	16d68 <__assert_fail@plt+0x5608>
   16d84:	ldr	r2, [r4, #24]
   16d88:	uxtb	r0, r2
   16d8c:	cmp	r0, #16
   16d90:	bne	16dac <__assert_fail@plt+0x564c>
   16d94:	ldr	r0, [r4, #4]
   16d98:	ldr	r1, [r0, #12]
   16d9c:	str	r1, [r4, #12]
   16da0:	ldr	r0, [r0, #28]
   16da4:	str	r0, [r4, #28]
   16da8:	b	16dec <__assert_fail@plt+0x568c>
   16dac:	str	r4, [r4, #12]
   16db0:	mov	r0, r9
   16db4:	ldr	r1, [r4, #20]
   16db8:	bl	208d8 <__assert_fail@plt+0xf178>
   16dbc:	cmn	r0, #1
   16dc0:	str	r0, [r4, #28]
   16dc4:	beq	16870 <__assert_fail@plt+0x5110>
   16dc8:	ldrb	r1, [r4, #24]
   16dcc:	cmp	r1, #12
   16dd0:	bne	16dec <__assert_fail@plt+0x568c>
   16dd4:	ldr	r1, [r9]
   16dd8:	ldr	r2, [r4, #20]
   16ddc:	add	r0, r1, r0, lsl #3
   16de0:	ldr	r1, [r0, #4]
   16de4:	bfi	r1, r2, #8, #10
   16de8:	str	r1, [r0, #4]
   16dec:	ldr	r1, [r4]
   16df0:	cmp	r1, #0
   16df4:	beq	16e18 <__assert_fail@plt+0x56b8>
   16df8:	ldr	r0, [r1, #8]
   16dfc:	cmp	r0, r4
   16e00:	mov	r4, r1
   16e04:	beq	16d84 <__assert_fail@plt+0x5624>
   16e08:	cmp	r0, #0
   16e0c:	mov	r4, r1
   16e10:	beq	16d84 <__assert_fail@plt+0x5624>
   16e14:	b	16d68 <__assert_fail@plt+0x5608>
   16e18:	ldr	r4, [r9, #52]	; 0x34
   16e1c:	ldrb	r0, [r4, #24]
   16e20:	cmp	r0, #16
   16e24:	beq	16e3c <__assert_fail@plt+0x56dc>
   16e28:	cmp	r0, #11
   16e2c:	bne	16e4c <__assert_fail@plt+0x56ec>
   16e30:	ldr	r0, [r4, #4]
   16e34:	str	r4, [r0, #16]
   16e38:	b	16e70 <__assert_fail@plt+0x5710>
   16e3c:	ldmib	r4, {r0, r1}
   16e40:	ldr	r2, [r1, #12]
   16e44:	str	r2, [r0, #16]
   16e48:	b	16e68 <__assert_fail@plt+0x5708>
   16e4c:	ldr	r0, [r4, #4]
   16e50:	cmp	r0, #0
   16e54:	ldrne	r1, [r4, #16]
   16e58:	strne	r1, [r0, #16]
   16e5c:	ldr	r1, [r4, #8]
   16e60:	cmp	r1, #0
   16e64:	beq	16e70 <__assert_fail@plt+0x5710>
   16e68:	ldr	r2, [r4, #16]
   16e6c:	str	r2, [r1, #16]
   16e70:	mov	r1, r4
   16e74:	cmp	r0, #0
   16e78:	bne	16e90 <__assert_fail@plt+0x5730>
   16e7c:	b	16ee4 <__assert_fail@plt+0x5784>
   16e80:	ldr	r0, [r1, #4]
   16e84:	str	r1, [r0, #16]
   16e88:	cmp	r0, #0
   16e8c:	beq	16ee4 <__assert_fail@plt+0x5784>
   16e90:	mov	r1, r0
   16e94:	ldrb	r0, [r0, #24]
   16e98:	cmp	r0, #16
   16e9c:	beq	16ec8 <__assert_fail@plt+0x5768>
   16ea0:	cmp	r0, #11
   16ea4:	beq	16e80 <__assert_fail@plt+0x5720>
   16ea8:	ldr	r0, [r1, #4]
   16eac:	cmp	r0, #0
   16eb0:	ldrne	r2, [r1, #16]
   16eb4:	strne	r2, [r0, #16]
   16eb8:	ldr	r2, [r1, #8]
   16ebc:	cmp	r2, #0
   16ec0:	beq	16e88 <__assert_fail@plt+0x5728>
   16ec4:	b	16ed4 <__assert_fail@plt+0x5774>
   16ec8:	ldmib	r1, {r0, r2}
   16ecc:	ldr	r3, [r2, #12]
   16ed0:	str	r3, [r0, #16]
   16ed4:	ldr	r3, [r1, #16]
   16ed8:	str	r3, [r2, #16]
   16edc:	cmp	r0, #0
   16ee0:	bne	16e90 <__assert_fail@plt+0x5730>
   16ee4:	mov	r3, #0
   16ee8:	ldr	r0, [r1, #8]
   16eec:	mov	r2, r1
   16ef0:	cmp	r0, r3
   16ef4:	cmpne	r0, #0
   16ef8:	bne	16e90 <__assert_fail@plt+0x5730>
   16efc:	ldr	r1, [r2]
   16f00:	mov	r3, r2
   16f04:	cmp	r1, #0
   16f08:	bne	16ee8 <__assert_fail@plt+0x5788>
   16f0c:	mov	r0, r9
   16f10:	mov	r1, r4
   16f14:	bl	20480 <__assert_fail@plt+0xed20>
   16f18:	cmp	r0, #0
   16f1c:	beq	16f3c <__assert_fail@plt+0x57dc>
   16f20:	b	16874 <__assert_fail@plt+0x5114>
   16f24:	mov	r0, r9
   16f28:	mov	r1, r7
   16f2c:	bl	20480 <__assert_fail@plt+0xed20>
   16f30:	cmp	r0, #0
   16f34:	mov	r4, r7
   16f38:	bne	16874 <__assert_fail@plt+0x5114>
   16f3c:	ldr	r7, [r4, #4]
   16f40:	cmp	r7, #0
   16f44:	bne	16f24 <__assert_fail@plt+0x57c4>
   16f48:	mov	r1, #0
   16f4c:	ldr	r7, [r4, #8]
   16f50:	mov	r0, r4
   16f54:	cmp	r7, r1
   16f58:	cmpne	r7, #0
   16f5c:	bne	16f24 <__assert_fail@plt+0x57c4>
   16f60:	ldr	r4, [r0]
   16f64:	mov	r1, r0
   16f68:	cmp	r4, #0
   16f6c:	bne	16f4c <__assert_fail@plt+0x57ec>
   16f70:	mov	r5, #0
   16f74:	sub	r4, fp, #48	; 0x30
   16f78:	mov	r7, #0
   16f7c:	b	16fac <__assert_fail@plt+0x584c>
   16f80:	mov	r1, r5
   16f84:	ldr	r2, [r9, #8]
   16f88:	add	r0, r7, #1
   16f8c:	subs	r3, r0, r2
   16f90:	mov	r7, r3
   16f94:	movwne	r3, #1
   16f98:	movne	r7, r0
   16f9c:	tst	r1, #1
   16fa0:	and	r5, r1, r3
   16fa4:	cmpeq	r0, r2
   16fa8:	beq	17008 <__assert_fail@plt+0x58a8>
   16fac:	ldr	r0, [r9, #24]
   16fb0:	add	r6, r7, r7, lsl #1
   16fb4:	add	r0, r0, r6, lsl #2
   16fb8:	ldr	r0, [r0, #4]
   16fbc:	cmp	r0, #0
   16fc0:	bne	16f80 <__assert_fail@plt+0x5820>
   16fc4:	mov	r0, r4
   16fc8:	mov	r1, r9
   16fcc:	mov	r2, r7
   16fd0:	mov	r3, #1
   16fd4:	bl	20aa8 <__assert_fail@plt+0xf348>
   16fd8:	cmp	r0, #0
   16fdc:	bne	16874 <__assert_fail@plt+0x5114>
   16fe0:	ldr	r0, [r9, #24]
   16fe4:	mov	r1, r5
   16fe8:	add	r0, r0, r6, lsl #2
   16fec:	ldr	r0, [r0, #4]
   16ff0:	cmp	r0, #0
   16ff4:	bne	16f84 <__assert_fail@plt+0x5824>
   16ff8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16ffc:	bl	141b8 <__assert_fail@plt+0x2a58>
   17000:	mov	r1, #1
   17004:	b	16f84 <__assert_fail@plt+0x5824>
   17008:	ldrb	r1, [sl, #28]
   1700c:	str	sl, [sp, #12]
   17010:	tst	r1, #16
   17014:	bne	17034 <__assert_fail@plt+0x58d4>
   17018:	ldr	r1, [sp, #12]
   1701c:	ldr	r1, [r1, #24]
   17020:	cmp	r1, #0
   17024:	beq	17034 <__assert_fail@plt+0x58d4>
   17028:	ldrb	r1, [r9, #88]	; 0x58
   1702c:	tst	r1, #1
   17030:	bne	17040 <__assert_fail@plt+0x58e0>
   17034:	ldr	r1, [r9, #76]	; 0x4c
   17038:	cmp	r1, #0
   1703c:	beq	17188 <__assert_fail@plt+0x5a28>
   17040:	add	r0, r0, r0, lsl #1
   17044:	lsl	r0, r0, #2
   17048:	bl	2b260 <__assert_fail@plt+0x19b00>
   1704c:	cmp	r0, #0
   17050:	str	r0, [r9, #28]
   17054:	beq	175c4 <__assert_fail@plt+0x5e64>
   17058:	ldr	r1, [r9, #8]
   1705c:	cmp	r1, #0
   17060:	beq	17188 <__assert_fail@plt+0x5a28>
   17064:	mov	r1, #0
   17068:	str	r1, [r0]
   1706c:	str	r1, [r0, #4]
   17070:	str	r1, [r0, #8]
   17074:	ldr	r0, [r9, #8]
   17078:	cmp	r0, #2
   1707c:	bcc	170ac <__assert_fail@plt+0x594c>
   17080:	mov	r2, #1
   17084:	mov	r3, #12
   17088:	ldr	r0, [r9, #28]
   1708c:	add	r2, r2, #1
   17090:	str	r1, [r0, r3]!
   17094:	add	r3, r3, #12
   17098:	str	r1, [r0, #4]
   1709c:	str	r1, [r0, #8]
   170a0:	ldr	r0, [r9, #8]
   170a4:	cmp	r2, r0
   170a8:	bcc	17088 <__assert_fail@plt+0x5928>
   170ac:	cmp	r0, #0
   170b0:	beq	17188 <__assert_fail@plt+0x5a28>
   170b4:	ldr	ip, [r9, #24]
   170b8:	mov	r6, #0
   170bc:	b	170d0 <__assert_fail@plt+0x5970>
   170c0:	ldr	r0, [r9, #8]
   170c4:	add	r6, r6, #1
   170c8:	cmp	r6, r0
   170cc:	bcs	17188 <__assert_fail@plt+0x5a28>
   170d0:	add	lr, r6, r6, lsl #1
   170d4:	add	r2, ip, lr, lsl #2
   170d8:	ldr	r3, [r2, #4]
   170dc:	cmp	r3, #1
   170e0:	blt	170c4 <__assert_fail@plt+0x5964>
   170e4:	ldr	r1, [r2, #8]
   170e8:	mov	r5, #0
   170ec:	str	lr, [sp, #24]
   170f0:	str	r1, [sp, #20]
   170f4:	b	17120 <__assert_fail@plt+0x59c0>
   170f8:	add	r0, r4, r0, lsl #2
   170fc:	ldr	r0, [r0, #8]
   17100:	add	r3, r2, #1
   17104:	add	r5, r5, #1
   17108:	str	r3, [r8]
   1710c:	str	r6, [r0, r2, lsl #2]
   17110:	add	r0, ip, lr, lsl #2
   17114:	ldr	r0, [r0, #4]
   17118:	cmp	r5, r0
   1711c:	bge	170c0 <__assert_fail@plt+0x5960>
   17120:	ldr	r0, [r1, r5, lsl #2]
   17124:	ldr	r4, [r9, #28]
   17128:	add	r0, r0, r0, lsl #1
   1712c:	mov	r3, r4
   17130:	ldr	r7, [r3, r0, lsl #2]!
   17134:	mov	r8, r3
   17138:	ldr	r2, [r8, #4]!
   1713c:	cmp	r7, r2
   17140:	bne	170f8 <__assert_fail@plt+0x5998>
   17144:	mov	r1, #2
   17148:	mov	sl, r9
   1714c:	add	r9, r4, r0, lsl #2
   17150:	add	r1, r1, r7, lsl #1
   17154:	str	r1, [r3]
   17158:	lsl	r1, r1, #2
   1715c:	ldr	r0, [r9, #8]!
   17160:	bl	2b290 <__assert_fail@plt+0x19b30>
   17164:	cmp	r0, #0
   17168:	beq	175c4 <__assert_fail@plt+0x5e64>
   1716c:	str	r0, [r9]
   17170:	ldr	lr, [sp, #24]
   17174:	ldr	r1, [sp, #20]
   17178:	mov	r9, sl
   1717c:	ldr	ip, [sl, #24]
   17180:	ldr	r2, [r8]
   17184:	b	17100 <__assert_fail@plt+0x59a0>
   17188:	mov	r0, #0
   1718c:	ldr	sl, [sp, #12]
   17190:	str	r0, [fp, #-52]	; 0xffffffcc
   17194:	ldr	r0, [sp, #16]
   17198:	cmp	r0, #0
   1719c:	bne	172e4 <__assert_fail@plt+0x5b84>
   171a0:	ldr	r0, [sp, #28]
   171a4:	ldrb	r2, [r0, #88]	; 0x58
   171a8:	ands	r0, r2, #4
   171ac:	beq	172e4 <__assert_fail@plt+0x5b84>
   171b0:	ldr	r0, [sl, #20]
   171b4:	cmp	r0, #0
   171b8:	bne	172e4 <__assert_fail@plt+0x5b84>
   171bc:	ldr	r5, [sp, #28]
   171c0:	mov	r9, #0
   171c4:	ldr	r7, [r5, #8]
   171c8:	cmp	r7, #0
   171cc:	beq	171ec <__assert_fail@plt+0x5a8c>
   171d0:	ldr	r3, [r5]
   171d4:	mov	r8, #0
   171d8:	mov	ip, #1
   171dc:	mov	lr, #139	; 0x8b
   171e0:	mov	r6, #0
   171e4:	mov	r4, #0
   171e8:	b	1723c <__assert_fail@plt+0x5adc>
   171ec:	mov	r8, #0
   171f0:	mov	r0, #1
   171f4:	and	r1, r2, #249	; 0xf9
   171f8:	str	r0, [r5, #92]	; 0x5c
   171fc:	ldr	r0, [r5, #76]	; 0x4c
   17200:	cmp	r0, #0
   17204:	movwgt	r9, #1
   17208:	orr	r0, r8, r9
   1720c:	and	r0, r0, #1
   17210:	orr	r0, r1, r0, lsl #1
   17214:	strb	r0, [r5, #88]	; 0x58
   17218:	b	172e4 <__assert_fail@plt+0x5b84>
   1721c:	ldrsb	r0, [r5]
   17220:	cmp	r0, #0
   17224:	mov	r0, #0
   17228:	movwmi	r0, #1
   1722c:	orr	r6, r6, r0
   17230:	add	r4, r4, #1
   17234:	cmp	r7, r4
   17238:	beq	175d4 <__assert_fail@plt+0x5e74>
   1723c:	add	r5, r3, r4, lsl #3
   17240:	ldrb	r1, [r5, #4]
   17244:	sub	r1, r1, #1
   17248:	cmp	r1, #11
   1724c:	bhi	17664 <__assert_fail@plt+0x5f04>
   17250:	add	r0, pc, #0
   17254:	ldr	pc, [r0, r1, lsl #2]
   17258:	andeq	r7, r1, ip, lsl r2
   1725c:	andeq	r7, r1, r0, lsr r2
   17260:	andeq	r7, r1, r8, lsl #5
   17264:	andeq	r7, r1, r0, lsr r2
   17268:	ldrdeq	r7, [r1], -ip
   1726c:	andeq	r7, r1, r4, ror #5
   17270:	andeq	r7, r1, r4, ror #12
   17274:	andeq	r7, r1, r0, lsr r2
   17278:	andeq	r7, r1, r0, lsr r2
   1727c:	andeq	r7, r1, r0, lsr r2
   17280:	andeq	r7, r1, r0, lsr r2
   17284:			; <UNDEFINED> instruction: 0x000172bc
   17288:	ldr	r5, [r3, r4, lsl #3]
   1728c:	ldr	r0, [r5, #16]
   17290:	cmp	r0, #0
   17294:	bne	172e4 <__assert_fail@plt+0x5b84>
   17298:	ldr	r0, [r5, #20]
   1729c:	cmp	r0, #0
   172a0:	ldreq	r0, [r5, #24]
   172a4:	cmpeq	r0, #0
   172a8:	bne	172e4 <__assert_fail@plt+0x5b84>
   172ac:	ldr	r0, [r5, #28]
   172b0:	cmp	r0, #0
   172b4:	beq	17230 <__assert_fail@plt+0x5ad0>
   172b8:	b	172e4 <__assert_fail@plt+0x5b84>
   172bc:	ldr	r0, [r3, r4, lsl #3]
   172c0:	sub	r0, r0, #16
   172c4:	ror	r1, r0, #4
   172c8:	cmp	r1, #7
   172cc:	bhi	172e4 <__assert_fail@plt+0x5b84>
   172d0:	tst	lr, ip, lsl r1
   172d4:	bne	17230 <__assert_fail@plt+0x5ad0>
   172d8:	b	172e4 <__assert_fail@plt+0x5b84>
   172dc:	mov	r8, #1
   172e0:	b	17230 <__assert_fail@plt+0x5ad0>
   172e4:	ldr	lr, [sp, #28]
   172e8:	ldr	r1, [lr, #52]	; 0x34
   172ec:	ldr	r0, [lr, #24]
   172f0:	ldr	r1, [r1, #12]
   172f4:	ldr	r1, [r1, #28]
   172f8:	str	r1, [lr, #72]	; 0x48
   172fc:	add	r1, r1, r1, lsl #1
   17300:	add	r5, r0, r1, lsl #2
   17304:	mov	r4, r5
   17308:	ldr	r7, [r4, #4]!
   1730c:	str	r7, [fp, #-44]	; 0xffffffd4
   17310:	ldr	r0, [r4]
   17314:	cmp	r0, #1
   17318:	blt	17464 <__assert_fail@plt+0x5d04>
   1731c:	lsl	r0, r7, #2
   17320:	str	r7, [fp, #-48]	; 0xffffffd0
   17324:	bl	2b260 <__assert_fail@plt+0x19b00>
   17328:	cmp	r0, #0
   1732c:	str	r0, [fp, #-40]	; 0xffffffd8
   17330:	beq	1764c <__assert_fail@plt+0x5eec>
   17334:	mov	r6, r0
   17338:	ldr	r0, [r4]
   1733c:	ldr	r1, [r5, #8]
   17340:	lsl	r2, r0, #2
   17344:	mov	r0, r6
   17348:	bl	11484 <memcpy@plt>
   1734c:	ldr	lr, [sp, #28]
   17350:	mov	r0, #0
   17354:	cmp	r7, #1
   17358:	str	r0, [fp, #-32]	; 0xffffffe0
   1735c:	ldrge	r0, [lr, #76]	; 0x4c
   17360:	cmpge	r0, #1
   17364:	blt	17478 <__assert_fail@plt+0x5d18>
   17368:	mov	r0, #0
   1736c:	sub	r8, fp, #48	; 0x30
   17370:	mov	r9, #1
   17374:	ldr	r1, [r6, r0, lsl #2]
   17378:	ldr	r2, [lr]
   1737c:	add	r3, r2, r1, lsl #3
   17380:	ldrb	r3, [r3, #4]
   17384:	cmp	r3, #4
   17388:	bne	17450 <__assert_fail@plt+0x5cf0>
   1738c:	mov	r3, #0
   17390:	cmp	r7, #1
   17394:	bge	173a8 <__assert_fail@plt+0x5c48>
   17398:	b	173cc <__assert_fail@plt+0x5c6c>
   1739c:	add	r3, r3, #1
   173a0:	cmp	r7, r3
   173a4:	beq	17450 <__assert_fail@plt+0x5cf0>
   173a8:	ldr	r5, [r6, r3, lsl #2]
   173ac:	add	r4, r2, r5, lsl #3
   173b0:	ldrb	r4, [r4, #4]
   173b4:	cmp	r4, #9
   173b8:	bne	1739c <__assert_fail@plt+0x5c3c>
   173bc:	ldr	r4, [r2, r1, lsl #3]
   173c0:	ldr	r5, [r2, r5, lsl #3]
   173c4:	cmp	r5, r4
   173c8:	bne	1739c <__assert_fail@plt+0x5c3c>
   173cc:	cmp	r3, r7
   173d0:	beq	17450 <__assert_fail@plt+0x5cf0>
   173d4:	ldr	r2, [lr, #20]
   173d8:	add	r1, r1, r1, lsl #1
   173dc:	cmp	r7, #1
   173e0:	add	r1, r2, r1, lsl #2
   173e4:	ldr	r1, [r1, #8]
   173e8:	ldr	ip, [r1]
   173ec:	blt	17428 <__assert_fail@plt+0x5cc8>
   173f0:	mov	r2, #0
   173f4:	subs	r3, r7, #1
   173f8:	beq	1741c <__assert_fail@plt+0x5cbc>
   173fc:	add	r5, r2, r3
   17400:	lsr	r4, r5, #1
   17404:	ldr	r1, [r6, r4, lsl #2]
   17408:	cmp	r1, ip
   1740c:	addlt	r2, r9, r5, lsr #1
   17410:	movge	r3, r4
   17414:	cmp	r2, r3
   17418:	bcc	173fc <__assert_fail@plt+0x5c9c>
   1741c:	ldr	r1, [r6, r2, lsl #2]
   17420:	cmp	r1, ip
   17424:	beq	17450 <__assert_fail@plt+0x5cf0>
   17428:	ldr	r0, [lr, #24]
   1742c:	add	r1, ip, ip, lsl #1
   17430:	add	r1, r0, r1, lsl #2
   17434:	mov	r0, r8
   17438:	bl	21158 <__assert_fail@plt+0xf9f8>
   1743c:	cmp	r0, #0
   17440:	bne	17540 <__assert_fail@plt+0x5de0>
   17444:	ldr	r7, [fp, #-44]	; 0xffffffd4
   17448:	ldr	lr, [sp, #28]
   1744c:	mov	r0, #0
   17450:	add	r0, r0, #1
   17454:	cmp	r0, r7
   17458:	bge	17478 <__assert_fail@plt+0x5d18>
   1745c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   17460:	b	17374 <__assert_fail@plt+0x5c14>
   17464:	mov	r0, #0
   17468:	str	r0, [fp, #-44]	; 0xffffffd4
   1746c:	str	r0, [fp, #-48]	; 0xffffffd0
   17470:	str	r0, [fp, #-40]	; 0xffffffd8
   17474:	str	r0, [fp, #-32]	; 0xffffffe0
   17478:	sub	r0, fp, #32
   1747c:	sub	r2, fp, #48	; 0x30
   17480:	mov	r1, lr
   17484:	mov	r3, #0
   17488:	bl	21458 <__assert_fail@plt+0xfcf8>
   1748c:	ldr	r1, [sp, #28]
   17490:	cmp	r0, #0
   17494:	str	r0, [r1, #36]	; 0x24
   17498:	beq	17520 <__assert_fail@plt+0x5dc0>
   1749c:	ldrsb	r2, [r0, #52]	; 0x34
   174a0:	cmn	r2, #1
   174a4:	ble	174b8 <__assert_fail@plt+0x5d58>
   174a8:	str	r0, [r1, #40]	; 0x28
   174ac:	str	r0, [r1, #44]	; 0x2c
   174b0:	str	r0, [r1, #48]	; 0x30
   174b4:	b	17534 <__assert_fail@plt+0x5dd4>
   174b8:	sub	r4, fp, #32
   174bc:	sub	r6, fp, #48	; 0x30
   174c0:	mov	r3, #1
   174c4:	mov	r0, r4
   174c8:	mov	r2, r6
   174cc:	bl	21458 <__assert_fail@plt+0xfcf8>
   174d0:	ldr	r1, [sp, #28]
   174d4:	mov	r2, r6
   174d8:	mov	r3, #2
   174dc:	str	r0, [r1, #40]	; 0x28
   174e0:	ldr	r1, [sp, #28]
   174e4:	mov	r0, r4
   174e8:	bl	21458 <__assert_fail@plt+0xfcf8>
   174ec:	ldr	r1, [sp, #28]
   174f0:	mov	r2, r6
   174f4:	mov	r3, #6
   174f8:	str	r0, [r1, #44]	; 0x2c
   174fc:	ldr	r1, [sp, #28]
   17500:	mov	r0, r4
   17504:	bl	21458 <__assert_fail@plt+0xfcf8>
   17508:	ldr	r2, [sp, #28]
   1750c:	str	r0, [r2, #48]	; 0x30
   17510:	ldr	r1, [r2, #40]	; 0x28
   17514:	cmp	r1, #0
   17518:	cmpne	r0, #0
   1751c:	bne	17528 <__assert_fail@plt+0x5dc8>
   17520:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17524:	b	17540 <__assert_fail@plt+0x5de0>
   17528:	ldr	r0, [r2, #44]	; 0x2c
   1752c:	cmp	r0, #0
   17530:	beq	17520 <__assert_fail@plt+0x5dc0>
   17534:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17538:	bl	141b8 <__assert_fail@plt+0x2a58>
   1753c:	mov	r0, #0
   17540:	str	r0, [fp, #-52]	; 0xffffffcc
   17544:	ldr	r5, [sl]
   17548:	ldr	r0, [r5, #56]	; 0x38
   1754c:	cmp	r0, #0
   17550:	beq	17568 <__assert_fail@plt+0x5e08>
   17554:	ldr	r4, [r0]
   17558:	bl	141b8 <__assert_fail@plt+0x2a58>
   1755c:	cmp	r4, #0
   17560:	mov	r0, r4
   17564:	bne	17554 <__assert_fail@plt+0x5df4>
   17568:	mov	r0, #31
   1756c:	mov	r4, #0
   17570:	str	r0, [r5, #64]	; 0x40
   17574:	str	r4, [r5, #52]	; 0x34
   17578:	str	r4, [r5, #56]	; 0x38
   1757c:	ldr	r0, [r5, #16]
   17580:	bl	141b8 <__assert_fail@plt+0x2a58>
   17584:	str	r4, [r5, #16]
   17588:	ldr	r0, [sp, #40]	; 0x28
   1758c:	bl	141b8 <__assert_fail@plt+0x2a58>
   17590:	ldr	r0, [sp, #44]	; 0x2c
   17594:	bl	141b8 <__assert_fail@plt+0x2a58>
   17598:	ldrb	r0, [sp, #107]	; 0x6b
   1759c:	cmp	r0, #0
   175a0:	beq	175ac <__assert_fail@plt+0x5e4c>
   175a4:	ldr	r0, [sp, #36]	; 0x24
   175a8:	bl	141b8 <__assert_fail@plt+0x2a58>
   175ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   175b0:	cmp	r0, #0
   175b4:	bne	16a88 <__assert_fail@plt+0x5328>
   175b8:	mov	r0, r4
   175bc:	sub	sp, fp, #28
   175c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175c4:	ldr	sl, [sp, #12]
   175c8:	mov	r0, #12
   175cc:	str	r0, [fp, #-52]	; 0xffffffcc
   175d0:	b	16a20 <__assert_fail@plt+0x52c0>
   175d4:	orr	r0, r6, r8
   175d8:	tst	r0, #1
   175dc:	beq	1763c <__assert_fail@plt+0x5edc>
   175e0:	ldr	r5, [sp, #28]
   175e4:	mov	r2, #0
   175e8:	mov	r7, #7
   175ec:	add	r3, r3, r2, lsl #3
   175f0:	ldr	r6, [r3, #4]
   175f4:	uxtb	r1, r6
   175f8:	cmp	r1, #5
   175fc:	beq	1761c <__assert_fail@plt+0x5ebc>
   17600:	cmp	r1, #1
   17604:	bne	17624 <__assert_fail@plt+0x5ec4>
   17608:	ldrsb	r0, [r3]
   1760c:	cmn	r0, #1
   17610:	bicle	r0, r6, #2097152	; 0x200000
   17614:	strle	r0, [r3, #4]
   17618:	b	17624 <__assert_fail@plt+0x5ec4>
   1761c:	bfi	r6, r7, #0, #8
   17620:	str	r6, [r3, #4]
   17624:	ldr	r0, [r5, #8]
   17628:	add	r2, r2, #1
   1762c:	cmp	r2, r0
   17630:	bcs	17644 <__assert_fail@plt+0x5ee4>
   17634:	ldr	r3, [r5]
   17638:	b	175ec <__assert_fail@plt+0x5e8c>
   1763c:	ldr	r5, [sp, #28]
   17640:	b	171f0 <__assert_fail@plt+0x5a90>
   17644:	ldrb	r2, [r5, #88]	; 0x58
   17648:	b	171f0 <__assert_fail@plt+0x5a90>
   1764c:	mov	r0, #0
   17650:	str	r0, [fp, #-48]	; 0xffffffd0
   17654:	str	r0, [fp, #-44]	; 0xffffffd4
   17658:	mov	r0, #12
   1765c:	str	r0, [fp, #-32]	; 0xffffffe0
   17660:	b	17540 <__assert_fail@plt+0x5de0>
   17664:	bl	1173c <abort@plt>
   17668:	movw	r2, #54260	; 0xd3f4
   1766c:	movt	r2, #3
   17670:	ldr	r1, [r2]
   17674:	str	r0, [r2]
   17678:	mov	r0, r1
   1767c:	bx	lr
   17680:	push	{r4, r5, r6, sl, fp, lr}
   17684:	add	fp, sp, #16
   17688:	ldr	r5, [r0, #16]
   1768c:	ldr	r6, [r0]
   17690:	mov	r4, r0
   17694:	mov	r1, #0
   17698:	mov	r2, #256	; 0x100
   1769c:	mov	r0, r5
   176a0:	bl	11670 <memset@plt>
   176a4:	ldr	r1, [r6, #36]	; 0x24
   176a8:	mov	r0, r4
   176ac:	mov	r2, r5
   176b0:	bl	17718 <__assert_fail@plt+0x5fb8>
   176b4:	ldr	r0, [r6, #36]	; 0x24
   176b8:	ldr	r1, [r6, #40]	; 0x28
   176bc:	cmp	r0, r1
   176c0:	beq	176d4 <__assert_fail@plt+0x5f74>
   176c4:	mov	r0, r4
   176c8:	mov	r2, r5
   176cc:	bl	17718 <__assert_fail@plt+0x5fb8>
   176d0:	ldr	r0, [r6, #36]	; 0x24
   176d4:	ldr	r1, [r6, #44]	; 0x2c
   176d8:	cmp	r0, r1
   176dc:	beq	176f0 <__assert_fail@plt+0x5f90>
   176e0:	mov	r0, r4
   176e4:	mov	r2, r5
   176e8:	bl	17718 <__assert_fail@plt+0x5fb8>
   176ec:	ldr	r0, [r6, #36]	; 0x24
   176f0:	ldr	r1, [r6, #48]	; 0x30
   176f4:	cmp	r0, r1
   176f8:	movne	r0, r4
   176fc:	movne	r2, r5
   17700:	blne	17718 <__assert_fail@plt+0x5fb8>
   17704:	ldrb	r0, [r4, #28]
   17708:	orr	r0, r0, #8
   1770c:	strb	r0, [r4, #28]
   17710:	mov	r0, #0
   17714:	pop	{r4, r5, r6, sl, fp, pc}
   17718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1771c:	add	fp, sp, #28
   17720:	sub	sp, sp, #316	; 0x13c
   17724:	ldr	sl, [r0]
   17728:	str	r0, [sp, #20]
   1772c:	mov	r3, #0
   17730:	str	r2, [sp, #36]	; 0x24
   17734:	ldr	r0, [sl, #92]	; 0x5c
   17738:	cmp	r0, #1
   1773c:	bne	1774c <__assert_fail@plt+0x5fec>
   17740:	ldr	r0, [sp, #20]
   17744:	ldrb	r0, [r0, #14]
   17748:	ubfx	r3, r0, #6, #1
   1774c:	ldr	r0, [r1, #8]
   17750:	cmp	r0, #1
   17754:	blt	17b24 <__assert_fail@plt+0x63c4>
   17758:	add	r0, sp, #40	; 0x28
   1775c:	mov	r4, #1
   17760:	mov	r2, #0
   17764:	str	r3, [sp, #32]
   17768:	str	r1, [sp, #12]
   1776c:	str	sl, [sp, #24]
   17770:	add	r0, r0, #1
   17774:	str	r0, [sp, #8]
   17778:	movw	r0, #1
   1777c:	movt	r0, #32
   17780:	add	r0, r0, #254	; 0xfe
   17784:	str	r0, [sp, #4]
   17788:	b	177a8 <__assert_fail@plt+0x6048>
   1778c:	ldr	r3, [sp, #32]
   17790:	ldr	r1, [sp, #12]
   17794:	ldr	r2, [sp, #16]
   17798:	ldr	r0, [r1, #8]
   1779c:	add	r2, r2, #1
   177a0:	cmp	r2, r0
   177a4:	bge	17b24 <__assert_fail@plt+0x63c4>
   177a8:	ldr	r0, [r1, #12]
   177ac:	str	r2, [sp, #16]
   177b0:	ldr	r5, [r0, r2, lsl #2]
   177b4:	ldr	r0, [sl]
   177b8:	add	r1, r0, r5, lsl #3
   177bc:	ldrb	r6, [r1, #4]
   177c0:	sub	r1, r6, #1
   177c4:	cmp	r1, #6
   177c8:	bhi	17790 <__assert_fail@plt+0x6030>
   177cc:	add	r2, pc, #0
   177d0:	ldr	pc, [r2, r1, lsl #2]
   177d4:	strdeq	r7, [r1], -r0
   177d8:	strdeq	r7, [r1], -ip
   177dc:	andeq	r7, r1, r4, lsl #18
   177e0:	muleq	r1, r0, r7
   177e4:	strdeq	r7, [r1], -ip
   177e8:	andeq	r7, r1, r0, lsr #19
   177ec:	strdeq	r7, [r1], -ip
   177f0:	ldrb	r6, [r0, r5, lsl #3]
   177f4:	ldr	r0, [sp, #36]	; 0x24
   177f8:	cmp	r3, #0
   177fc:	strb	r4, [r0, r6]
   17800:	beq	1781c <__assert_fail@plt+0x60bc>
   17804:	bl	115d4 <__ctype_tolower_loc@plt>
   17808:	ldr	r0, [r0]
   1780c:	ldr	r3, [sp, #32]
   17810:	ldr	r1, [sp, #36]	; 0x24
   17814:	ldr	r0, [r0, r6, lsl #2]
   17818:	strb	r4, [r1, r0]
   1781c:	ldr	r0, [sp, #20]
   17820:	ldrb	r0, [r0, #14]
   17824:	tst	r0, #64	; 0x40
   17828:	beq	17790 <__assert_fail@plt+0x6030>
   1782c:	ldr	r0, [sl, #92]	; 0x5c
   17830:	cmp	r0, #2
   17834:	blt	17790 <__assert_fail@plt+0x6030>
   17838:	ldr	r0, [sl]
   1783c:	add	r1, r5, #1
   17840:	ldr	r7, [sp, #4]
   17844:	movw	r6, #1
   17848:	add	r8, sp, #40	; 0x28
   1784c:	mov	ip, #0
   17850:	sub	r9, fp, #48	; 0x30
   17854:	movt	r6, #32
   17858:	ldrb	r0, [r0, r5, lsl #3]
   1785c:	strb	r0, [sp, #40]	; 0x28
   17860:	ldr	r0, [sl, #8]
   17864:	cmp	r1, r0
   17868:	ldr	r0, [sp, #8]
   1786c:	bcs	178ac <__assert_fail@plt+0x614c>
   17870:	ldr	r0, [sp, #8]
   17874:	ldr	r1, [sl]
   17878:	add	r1, r1, r5, lsl #3
   1787c:	ldr	r2, [r1, #12]
   17880:	and	r2, r2, r7
   17884:	cmp	r2, r6
   17888:	bne	178ac <__assert_fail@plt+0x614c>
   1788c:	ldrb	r1, [r1, #8]
   17890:	add	r3, r5, #2
   17894:	strb	r1, [r0], #1
   17898:	add	r1, r5, #1
   1789c:	ldr	r2, [sl, #8]
   178a0:	mov	r5, r1
   178a4:	cmp	r3, r2
   178a8:	bcc	17874 <__assert_fail@plt+0x6114>
   178ac:	sub	r5, r0, r8
   178b0:	sub	r0, fp, #36	; 0x24
   178b4:	mov	r1, r8
   178b8:	mov	r3, r9
   178bc:	str	ip, [fp, #-44]	; 0xffffffd4
   178c0:	str	ip, [fp, #-48]	; 0xffffffd0
   178c4:	mov	r2, r5
   178c8:	bl	2b644 <__assert_fail@plt+0x19ee4>
   178cc:	cmp	r0, r5
   178d0:	bne	1778c <__assert_fail@plt+0x602c>
   178d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   178d8:	bl	114a8 <towlower@plt>
   178dc:	mov	r1, r0
   178e0:	mov	r0, r8
   178e4:	mov	r2, r9
   178e8:	bl	11400 <wcrtomb@plt>
   178ec:	cmn	r0, #1
   178f0:	beq	1778c <__assert_fail@plt+0x602c>
   178f4:	ldrb	r0, [sp, #40]	; 0x28
   178f8:	ldr	r1, [sp, #36]	; 0x24
   178fc:	strb	r4, [r1, r0]
   17900:	b	1778c <__assert_fail@plt+0x602c>
   17904:	mov	r7, #0
   17908:	mov	r6, #0
   1790c:	str	r5, [sp, #28]
   17910:	ldr	r0, [r0, r5, lsl #3]
   17914:	ldr	r1, [sp, #36]	; 0x24
   17918:	lsl	sl, r7, #2
   1791c:	mov	r8, #0
   17920:	add	r9, r1, r7
   17924:	ldr	r5, [r0, r6, lsl #2]
   17928:	b	17954 <__assert_fail@plt+0x61f4>
   1792c:	bl	115d4 <__ctype_tolower_loc@plt>
   17930:	ldr	r0, [r0]
   17934:	ldr	r3, [sp, #32]
   17938:	add	r0, r0, sl
   1793c:	ldr	r0, [r0, r8, lsl #2]
   17940:	ldr	r1, [sp, #36]	; 0x24
   17944:	strb	r4, [r1, r0]
   17948:	add	r8, r8, #1
   1794c:	cmp	r8, #32
   17950:	beq	17980 <__assert_fail@plt+0x6220>
   17954:	tst	r5, r4, lsl r8
   17958:	strbne	r4, [r9, r8]
   1795c:	cmpne	r3, #0
   17960:	beq	17948 <__assert_fail@plt+0x61e8>
   17964:	add	r0, r7, r8
   17968:	add	r0, r0, #128	; 0x80
   1796c:	lsr	r0, r0, #7
   17970:	cmp	r0, #2
   17974:	bls	1792c <__assert_fail@plt+0x61cc>
   17978:	add	r0, r7, r8
   1797c:	b	17940 <__assert_fail@plt+0x61e0>
   17980:	ldr	sl, [sp, #24]
   17984:	ldr	r5, [sp, #28]
   17988:	add	r6, r6, #1
   1798c:	cmp	r6, #8
   17990:	beq	17790 <__assert_fail@plt+0x6030>
   17994:	ldr	r0, [sl]
   17998:	add	r7, r7, r8
   1799c:	b	17910 <__assert_fail@plt+0x61b0>
   179a0:	ldr	r6, [r0, r5, lsl #3]
   179a4:	ldr	r0, [sl, #92]	; 0x5c
   179a8:	cmp	r0, #2
   179ac:	blt	17a28 <__assert_fail@plt+0x62c8>
   179b0:	ldr	r0, [r6, #36]	; 0x24
   179b4:	cmp	r0, #0
   179b8:	bne	179d4 <__assert_fail@plt+0x6274>
   179bc:	ldrb	r0, [r6, #16]
   179c0:	tst	r0, #1
   179c4:	bne	179d4 <__assert_fail@plt+0x6274>
   179c8:	ldr	r0, [r6, #32]
   179cc:	cmp	r0, #0
   179d0:	beq	17a28 <__assert_fail@plt+0x62c8>
   179d4:	mov	r7, #0
   179d8:	add	r8, sp, #40	; 0x28
   179dc:	sub	r6, fp, #48	; 0x30
   179e0:	strb	r7, [fp, #-48]	; 0xffffffd0
   179e4:	mov	r0, #0
   179e8:	mov	r1, r6
   179ec:	mov	r2, #1
   179f0:	mov	r3, r8
   179f4:	str	r7, [sp, #44]	; 0x2c
   179f8:	str	r7, [sp, #40]	; 0x28
   179fc:	bl	2b644 <__assert_fail@plt+0x19ee4>
   17a00:	cmn	r0, #2
   17a04:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   17a08:	ldreq	r0, [sp, #36]	; 0x24
   17a0c:	strbeq	r4, [r0, r1]
   17a10:	add	r0, r1, #1
   17a14:	uxtb	r1, r0
   17a18:	strb	r0, [fp, #-48]	; 0xffffffd0
   17a1c:	cmp	r1, r0
   17a20:	beq	179e4 <__assert_fail@plt+0x6284>
   17a24:	b	1778c <__assert_fail@plt+0x602c>
   17a28:	ldr	r0, [r6, #20]
   17a2c:	cmp	r0, #1
   17a30:	blt	17790 <__assert_fail@plt+0x6030>
   17a34:	mov	r9, #0
   17a38:	b	17a4c <__assert_fail@plt+0x62ec>
   17a3c:	ldr	r0, [r6, #20]
   17a40:	add	r9, r9, #1
   17a44:	cmp	r9, r0
   17a48:	bge	17790 <__assert_fail@plt+0x6030>
   17a4c:	mov	r0, #0
   17a50:	add	r8, sp, #40	; 0x28
   17a54:	sub	r2, fp, #48	; 0x30
   17a58:	str	r0, [fp, #-44]	; 0xffffffd4
   17a5c:	str	r0, [fp, #-48]	; 0xffffffd0
   17a60:	ldr	r0, [r6]
   17a64:	ldr	r1, [r0, r9, lsl #2]
   17a68:	mov	r0, r8
   17a6c:	bl	11400 <wcrtomb@plt>
   17a70:	ldr	r3, [sp, #32]
   17a74:	cmn	r0, #1
   17a78:	beq	17aa8 <__assert_fail@plt+0x6348>
   17a7c:	ldrb	r7, [sp, #40]	; 0x28
   17a80:	ldr	r0, [sp, #36]	; 0x24
   17a84:	cmp	r3, #0
   17a88:	strb	r4, [r0, r7]
   17a8c:	beq	17aa8 <__assert_fail@plt+0x6348>
   17a90:	bl	115d4 <__ctype_tolower_loc@plt>
   17a94:	ldr	r0, [r0]
   17a98:	ldr	r3, [sp, #32]
   17a9c:	ldr	r1, [sp, #36]	; 0x24
   17aa0:	ldr	r0, [r0, r7, lsl #2]
   17aa4:	strb	r4, [r1, r0]
   17aa8:	ldr	r0, [sp, #20]
   17aac:	ldrb	r0, [r0, #14]
   17ab0:	tst	r0, #64	; 0x40
   17ab4:	beq	17a3c <__assert_fail@plt+0x62dc>
   17ab8:	ldr	r0, [sl, #92]	; 0x5c
   17abc:	cmp	r0, #2
   17ac0:	blt	17a3c <__assert_fail@plt+0x62dc>
   17ac4:	ldr	r0, [r6]
   17ac8:	ldr	r0, [r0, r9, lsl #2]
   17acc:	bl	114a8 <towlower@plt>
   17ad0:	mov	r1, r0
   17ad4:	mov	r0, r8
   17ad8:	sub	r2, fp, #48	; 0x30
   17adc:	bl	11400 <wcrtomb@plt>
   17ae0:	ldr	r3, [sp, #32]
   17ae4:	cmn	r0, #1
   17ae8:	beq	17a3c <__assert_fail@plt+0x62dc>
   17aec:	ldrb	r0, [sp, #40]	; 0x28
   17af0:	ldr	r1, [sp, #36]	; 0x24
   17af4:	strb	r4, [r1, r0]
   17af8:	b	17a3c <__assert_fail@plt+0x62dc>
   17afc:	ldr	r0, [sp, #36]	; 0x24
   17b00:	mov	r1, #1
   17b04:	mov	r2, #256	; 0x100
   17b08:	bl	11670 <memset@plt>
   17b0c:	cmp	r6, #2
   17b10:	bne	17b24 <__assert_fail@plt+0x63c4>
   17b14:	ldr	r1, [sp, #20]
   17b18:	ldrb	r0, [r1, #28]
   17b1c:	orr	r0, r0, #1
   17b20:	strb	r0, [r1, #28]
   17b24:	sub	sp, fp, #28
   17b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b30:	add	fp, sp, #24
   17b34:	mov	r4, r0
   17b38:	mov	r0, #0
   17b3c:	mov	r6, r2
   17b40:	mov	r8, r1
   17b44:	str	r0, [r4]
   17b48:	str	r0, [r4, #4]
   17b4c:	str	r0, [r4, #8]
   17b50:	mov	r0, #256	; 0x100
   17b54:	bl	2b260 <__assert_fail@plt+0x19b00>
   17b58:	cmp	r0, #0
   17b5c:	str	r0, [r4, #16]
   17b60:	beq	17c10 <__assert_fail@plt+0x64b0>
   17b64:	movw	r0, #45820	; 0xb2fc
   17b68:	tst	r6, #1
   17b6c:	and	r1, r6, #2
   17b70:	movt	r0, #3
   17b74:	movweq	r0, #710	; 0x2c6
   17b78:	movteq	r0, #257	; 0x101
   17b7c:	tst	r6, #4
   17b80:	orr	r5, r0, r1, lsl #21
   17b84:	bne	17b98 <__assert_fail@plt+0x6438>
   17b88:	ldrb	r0, [r4, #28]
   17b8c:	and	r0, r0, #127	; 0x7f
   17b90:	strb	r0, [r4, #28]
   17b94:	b	17bb8 <__assert_fail@plt+0x6458>
   17b98:	ldrb	r0, [r4, #28]
   17b9c:	mvn	r1, #127	; 0x7f
   17ba0:	orr	r0, r0, r1
   17ba4:	movw	r1, #45758	; 0xb2be
   17ba8:	movt	r1, #323	; 0x143
   17bac:	strb	r0, [r4, #28]
   17bb0:	and	r1, r5, r1
   17bb4:	orr	r5, r1, #256	; 0x100
   17bb8:	and	r1, r6, #8
   17bbc:	and	r0, r0, #239	; 0xef
   17bc0:	mov	r7, #0
   17bc4:	orr	r0, r0, r1, lsl #1
   17bc8:	str	r7, [r4, #20]
   17bcc:	strb	r0, [r4, #28]
   17bd0:	mov	r0, r8
   17bd4:	bl	11628 <strlen@plt>
   17bd8:	mov	r2, r0
   17bdc:	mov	r0, r4
   17be0:	mov	r1, r8
   17be4:	mov	r3, r5
   17be8:	bl	16170 <__assert_fail@plt+0x4a10>
   17bec:	cmp	r0, #16
   17bf0:	mov	r5, r0
   17bf4:	movweq	r5, #8
   17bf8:	cmp	r5, #0
   17bfc:	bne	17c1c <__assert_fail@plt+0x64bc>
   17c00:	mov	r0, r4
   17c04:	bl	17680 <__assert_fail@plt+0x5f20>
   17c08:	mov	r0, r7
   17c0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c10:	mov	r7, #12
   17c14:	mov	r0, r7
   17c18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c1c:	ldr	r0, [r4, #16]
   17c20:	bl	141b8 <__assert_fail@plt+0x2a58>
   17c24:	mov	r0, r5
   17c28:	str	r7, [r4, #16]
   17c2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c30:	push	{r4, r5, r6, r7, fp, lr}
   17c34:	add	fp, sp, #16
   17c38:	cmp	r0, #17
   17c3c:	bcs	17cb0 <__assert_fail@plt+0x6550>
   17c40:	movw	r1, #51528	; 0xc948
   17c44:	mov	r4, r2
   17c48:	mov	r2, #5
   17c4c:	mov	r5, r3
   17c50:	movt	r1, #2
   17c54:	ldr	r0, [r1, r0, lsl #2]
   17c58:	movw	r1, #51144	; 0xc7c8
   17c5c:	movt	r1, #2
   17c60:	add	r1, r1, r0
   17c64:	mov	r0, #0
   17c68:	bl	114d8 <dcgettext@plt>
   17c6c:	mov	r6, r0
   17c70:	bl	11628 <strlen@plt>
   17c74:	add	r7, r0, #1
   17c78:	cmp	r5, #0
   17c7c:	beq	17c98 <__assert_fail@plt+0x6538>
   17c80:	cmp	r7, r5
   17c84:	mov	r2, r7
   17c88:	bhi	17ca0 <__assert_fail@plt+0x6540>
   17c8c:	mov	r0, r4
   17c90:	mov	r1, r6
   17c94:	bl	11484 <memcpy@plt>
   17c98:	mov	r0, r7
   17c9c:	pop	{r4, r5, r6, r7, fp, pc}
   17ca0:	sub	r2, r5, #1
   17ca4:	mov	r0, #0
   17ca8:	strb	r0, [r4, r2]
   17cac:	b	17c8c <__assert_fail@plt+0x652c>
   17cb0:	bl	1173c <abort@plt>
   17cb4:	push	{r4, r5, fp, lr}
   17cb8:	add	fp, sp, #8
   17cbc:	ldr	r5, [r0]
   17cc0:	mov	r4, r0
   17cc4:	cmp	r5, #0
   17cc8:	beq	17cf4 <__assert_fail@plt+0x6594>
   17ccc:	movw	r0, #0
   17cd0:	movw	r1, #0
   17cd4:	movt	r0, #0
   17cd8:	movt	r1, #0
   17cdc:	orrs	r0, r1, r0
   17ce0:	beq	17cec <__assert_fail@plt+0x658c>
   17ce4:	add	r0, r5, #136	; 0x88
   17ce8:	bl	11430 <pthread_mutex_destroy@plt>
   17cec:	mov	r0, r5
   17cf0:	bl	17d1c <__assert_fail@plt+0x65bc>
   17cf4:	mov	r5, #0
   17cf8:	str	r5, [r4]
   17cfc:	str	r5, [r4, #4]
   17d00:	ldr	r0, [r4, #16]
   17d04:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d08:	str	r5, [r4, #16]
   17d0c:	ldr	r0, [r4, #20]
   17d10:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d14:	str	r5, [r4, #20]
   17d18:	pop	{r4, r5, fp, pc}
   17d1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17d20:	add	fp, sp, #24
   17d24:	mov	r8, r0
   17d28:	ldr	r0, [r0]
   17d2c:	cmp	r0, #0
   17d30:	beq	17db4 <__assert_fail@plt+0x6654>
   17d34:	ldr	r1, [r8, #8]
   17d38:	cmp	r1, #0
   17d3c:	beq	17db4 <__assert_fail@plt+0x6654>
   17d40:	movw	r7, #255	; 0xff
   17d44:	mov	r6, #0
   17d48:	movt	r7, #4
   17d4c:	add	r1, r0, r6, lsl #3
   17d50:	ldr	r1, [r1, #4]
   17d54:	and	r1, r1, r7
   17d58:	cmp	r1, #3
   17d5c:	beq	17d90 <__assert_fail@plt+0x6630>
   17d60:	cmp	r1, #6
   17d64:	bne	17d9c <__assert_fail@plt+0x663c>
   17d68:	ldr	r5, [r0, r6, lsl #3]
   17d6c:	ldr	r0, [r5]
   17d70:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d74:	ldr	r0, [r5, #4]
   17d78:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d7c:	ldr	r0, [r5, #8]
   17d80:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d84:	ldr	r0, [r5, #12]
   17d88:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d8c:	b	17d94 <__assert_fail@plt+0x6634>
   17d90:	ldr	r5, [r0, r6, lsl #3]
   17d94:	mov	r0, r5
   17d98:	bl	141b8 <__assert_fail@plt+0x2a58>
   17d9c:	ldr	r0, [r8, #8]
   17da0:	add	r6, r6, #1
   17da4:	cmp	r6, r0
   17da8:	bcs	17db4 <__assert_fail@plt+0x6654>
   17dac:	ldr	r0, [r8]
   17db0:	b	17d4c <__assert_fail@plt+0x65ec>
   17db4:	ldr	r0, [r8, #12]
   17db8:	bl	141b8 <__assert_fail@plt+0x2a58>
   17dbc:	ldr	r0, [r8, #8]
   17dc0:	cmp	r0, #0
   17dc4:	beq	17e28 <__assert_fail@plt+0x66c8>
   17dc8:	mov	r5, #0
   17dcc:	mov	r6, #8
   17dd0:	b	17de8 <__assert_fail@plt+0x6688>
   17dd4:	ldr	r0, [r8, #8]
   17dd8:	add	r5, r5, #1
   17ddc:	add	r6, r6, #12
   17de0:	cmp	r5, r0
   17de4:	bcs	17e28 <__assert_fail@plt+0x66c8>
   17de8:	ldr	r0, [r8, #24]
   17dec:	cmp	r0, #0
   17df0:	beq	17dfc <__assert_fail@plt+0x669c>
   17df4:	ldr	r0, [r0, r6]
   17df8:	bl	141b8 <__assert_fail@plt+0x2a58>
   17dfc:	ldr	r0, [r8, #28]
   17e00:	cmp	r0, #0
   17e04:	beq	17e10 <__assert_fail@plt+0x66b0>
   17e08:	ldr	r0, [r0, r6]
   17e0c:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e10:	ldr	r0, [r8, #20]
   17e14:	cmp	r0, #0
   17e18:	beq	17dd4 <__assert_fail@plt+0x6674>
   17e1c:	ldr	r0, [r0, r6]
   17e20:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e24:	b	17dd4 <__assert_fail@plt+0x6674>
   17e28:	ldr	r0, [r8, #20]
   17e2c:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e30:	ldr	r0, [r8, #24]
   17e34:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e38:	ldr	r0, [r8, #28]
   17e3c:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e40:	ldr	r0, [r8]
   17e44:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e48:	ldr	r5, [r8, #32]
   17e4c:	cmp	r5, #0
   17e50:	beq	17eb0 <__assert_fail@plt+0x6750>
   17e54:	mov	r6, #0
   17e58:	add	r0, r6, r6, lsl #1
   17e5c:	ldr	r0, [r5, r0, lsl #2]!
   17e60:	add	r7, r5, #8
   17e64:	cmp	r0, #1
   17e68:	blt	17e8c <__assert_fail@plt+0x672c>
   17e6c:	mov	r4, #0
   17e70:	ldr	r0, [r7]
   17e74:	ldr	r0, [r0, r4, lsl #2]
   17e78:	bl	1b498 <__assert_fail@plt+0x9d38>
   17e7c:	ldr	r0, [r5]
   17e80:	add	r4, r4, #1
   17e84:	cmp	r4, r0
   17e88:	blt	17e70 <__assert_fail@plt+0x6710>
   17e8c:	ldr	r0, [r7]
   17e90:	bl	141b8 <__assert_fail@plt+0x2a58>
   17e94:	ldr	r0, [r8, #68]	; 0x44
   17e98:	cmp	r6, r0
   17e9c:	bcs	17eac <__assert_fail@plt+0x674c>
   17ea0:	ldr	r5, [r8, #32]
   17ea4:	add	r6, r6, #1
   17ea8:	b	17e58 <__assert_fail@plt+0x66f8>
   17eac:	ldr	r5, [r8, #32]
   17eb0:	mov	r0, r5
   17eb4:	bl	141b8 <__assert_fail@plt+0x2a58>
   17eb8:	ldr	r0, [r8, #60]	; 0x3c
   17ebc:	movw	r1, #51596	; 0xc98c
   17ec0:	movt	r1, #2
   17ec4:	cmp	r0, r1
   17ec8:	beq	17ed0 <__assert_fail@plt+0x6770>
   17ecc:	bl	141b8 <__assert_fail@plt+0x2a58>
   17ed0:	ldr	r0, [r8, #132]	; 0x84
   17ed4:	bl	141b8 <__assert_fail@plt+0x2a58>
   17ed8:	mov	r0, r8
   17edc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ee0:	b	141b8 <__assert_fail@plt+0x2a58>
   17ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee8:	add	fp, sp, #28
   17eec:	sub	sp, sp, #28
   17ef0:	ldr	sl, [fp, #8]
   17ef4:	mov	r7, #2
   17ef8:	cmp	sl, #7
   17efc:	bhi	17fd0 <__assert_fail@plt+0x6870>
   17f00:	mov	r5, r0
   17f04:	ldr	r0, [r0]
   17f08:	mov	r6, r3
   17f0c:	mov	r9, r2
   17f10:	mov	r4, r1
   17f14:	tst	sl, #4
   17f18:	str	r0, [sp, #24]
   17f1c:	bne	17f34 <__assert_fail@plt+0x67d4>
   17f20:	mov	r0, r4
   17f24:	bl	11628 <strlen@plt>
   17f28:	mov	r7, r0
   17f2c:	mov	r8, #0
   17f30:	b	17f3c <__assert_fail@plt+0x67dc>
   17f34:	ldr	r8, [r6]
   17f38:	ldr	r7, [r6, #4]
   17f3c:	movw	r0, #0
   17f40:	movw	r1, #0
   17f44:	movt	r0, #0
   17f48:	movt	r1, #0
   17f4c:	orrs	r0, r1, r0
   17f50:	str	r0, [sp, #20]
   17f54:	beq	17f64 <__assert_fail@plt+0x6804>
   17f58:	ldr	r0, [sp, #24]
   17f5c:	add	r0, r0, #136	; 0x88
   17f60:	bl	1146c <pthread_mutex_lock@plt>
   17f64:	ldrb	r0, [r5, #28]
   17f68:	tst	r0, #16
   17f6c:	bne	17f80 <__assert_fail@plt+0x6820>
   17f70:	str	r7, [sp]
   17f74:	stmib	sp, {r7, r9}
   17f78:	str	r6, [sp, #12]
   17f7c:	b	17f94 <__assert_fail@plt+0x6834>
   17f80:	mov	r0, #0
   17f84:	str	r7, [sp]
   17f88:	str	r7, [sp, #4]
   17f8c:	str	r0, [sp, #8]
   17f90:	str	r0, [sp, #12]
   17f94:	mov	r0, r5
   17f98:	mov	r1, r4
   17f9c:	mov	r2, r7
   17fa0:	mov	r3, r8
   17fa4:	str	sl, [sp, #16]
   17fa8:	bl	17fdc <__assert_fail@plt+0x687c>
   17fac:	mov	r7, r0
   17fb0:	ldr	r0, [sp, #20]
   17fb4:	cmp	r0, #0
   17fb8:	beq	17fc8 <__assert_fail@plt+0x6868>
   17fbc:	ldr	r0, [sp, #24]
   17fc0:	add	r0, r0, #136	; 0x88
   17fc4:	bl	113b8 <pthread_mutex_unlock@plt>
   17fc8:	cmp	r7, #0
   17fcc:	movwne	r7, #1
   17fd0:	mov	r0, r7
   17fd4:	sub	sp, fp, #28
   17fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fe0:	add	fp, sp, #28
   17fe4:	sub	sp, sp, #412	; 0x19c
   17fe8:	ldr	r8, [r0]
   17fec:	str	r2, [sp, #68]	; 0x44
   17ff0:	str	r1, [sp, #100]	; 0x64
   17ff4:	mov	r4, r0
   17ff8:	add	r0, sp, #104	; 0x68
   17ffc:	mov	r1, #0
   18000:	mov	r2, #136	; 0x88
   18004:	mov	r6, r3
   18008:	mov	r9, #0
   1800c:	bl	11670 <memset@plt>
   18010:	str	r8, [sp, #188]	; 0xbc
   18014:	ldr	lr, [fp, #16]
   18018:	ldr	ip, [fp, #8]
   1801c:	mov	r5, #0
   18020:	ldr	r1, [r4, #16]
   18024:	cmp	r1, #0
   18028:	beq	18044 <__assert_fail@plt+0x68e4>
   1802c:	ldrb	r2, [r4, #28]
   18030:	and	r2, r2, #9
   18034:	cmp	r2, #8
   18038:	movne	r1, #0
   1803c:	subs	r5, r6, ip
   18040:	movne	r5, r1
   18044:	ldr	r2, [r4, #24]
   18048:	ldr	r1, [r4, #8]
   1804c:	mov	sl, #1
   18050:	mvn	r3, r2
   18054:	cmp	r2, lr
   18058:	addcc	r9, r3, lr
   1805c:	cmp	r1, #0
   18060:	beq	1ab28 <__assert_fail@plt+0x93c8>
   18064:	ldr	r1, [r8, #36]	; 0x24
   18068:	cmp	r1, #0
   1806c:	ldrne	r0, [r8, #40]	; 0x28
   18070:	cmpne	r0, #0
   18074:	beq	1ab28 <__assert_fail@plt+0x93c8>
   18078:	ldr	r3, [r8, #44]	; 0x2c
   1807c:	cmp	r3, #0
   18080:	ldrne	r7, [r8, #48]	; 0x30
   18084:	cmpne	r7, #0
   18088:	beq	1ab28 <__assert_fail@plt+0x93c8>
   1808c:	ldr	r1, [r1, #8]
   18090:	ldr	r2, [r4, #20]
   18094:	cmp	r1, #0
   18098:	beq	180a4 <__assert_fail@plt+0x6944>
   1809c:	ldr	r7, [sp, #100]	; 0x64
   180a0:	b	180b4 <__assert_fail@plt+0x6954>
   180a4:	ldr	r1, [r0, #8]
   180a8:	ldr	r7, [sp, #100]	; 0x64
   180ac:	cmp	r1, #0
   180b0:	beq	19c34 <__assert_fail@plt+0x84d4>
   180b4:	str	ip, [sp, #72]	; 0x48
   180b8:	subs	r0, lr, r9
   180bc:	str	r9, [sp, #32]
   180c0:	str	r0, [sp, #84]	; 0x54
   180c4:	mov	r0, #1
   180c8:	str	r0, [sp, #44]	; 0x2c
   180cc:	bne	180e0 <__assert_fail@plt+0x6980>
   180d0:	ldr	r0, [r8, #76]	; 0x4c
   180d4:	cmp	r0, #0
   180d8:	movwne	r0, #1
   180dc:	str	r0, [sp, #44]	; 0x2c
   180e0:	ldr	r0, [r4, #12]
   180e4:	ldr	sl, [r8, #92]	; 0x5c
   180e8:	ldr	ip, [r8, #8]
   180ec:	str	r2, [sp, #168]	; 0xa8
   180f0:	str	r7, [sp, #104]	; 0x68
   180f4:	mov	lr, r4
   180f8:	str	sl, [sp, #184]	; 0xb8
   180fc:	ubfx	r3, r0, #22, #1
   18100:	ldr	r4, [sp, #68]	; 0x44
   18104:	and	r0, r0, #4194304	; 0x400000
   18108:	add	r1, ip, #1
   1810c:	orrs	r9, r2, r0
   18110:	strb	r3, [sp, #176]	; 0xb0
   18114:	add	r3, sp, #104	; 0x68
   18118:	movwne	r9, #1
   1811c:	add	r3, r3, #44	; 0x2c
   18120:	cmp	sl, r1
   18124:	strb	r9, [sp, #179]	; 0xb3
   18128:	movgt	r1, sl
   1812c:	vdup.32	q8, r4
   18130:	ldrb	r0, [r8, #88]	; 0x58
   18134:	vst1.32	{d16-d17}, [r3]
   18138:	ubfx	r3, r0, #3, #1
   1813c:	strb	r3, [sp, #178]	; 0xb2
   18140:	ubfx	r0, r0, #2, #1
   18144:	str	r8, [sp, #96]	; 0x60
   18148:	str	lr, [sp, #52]	; 0x34
   1814c:	str	r5, [sp, #92]	; 0x5c
   18150:	str	r2, [sp, #88]	; 0x58
   18154:	strb	r0, [sp, #177]	; 0xb1
   18158:	add	r0, r4, #1
   1815c:	cmp	r0, r1
   18160:	movlt	r1, r0
   18164:	cmp	sl, #2
   18168:	mov	r0, lr
   1816c:	str	r1, [sp, #80]	; 0x50
   18170:	blt	181b0 <__assert_fail@plt+0x6a50>
   18174:	mov	sl, #12
   18178:	cmn	r1, #-1073741823	; 0xc0000001
   1817c:	bhi	1aad4 <__assert_fail@plt+0x9374>
   18180:	lsl	r1, r1, #2
   18184:	mov	r0, #0
   18188:	bl	2b290 <__assert_fail@plt+0x19b30>
   1818c:	ldr	r1, [sp, #80]	; 0x50
   18190:	ldr	r2, [sp, #88]	; 0x58
   18194:	ldr	r5, [sp, #92]	; 0x5c
   18198:	ldr	r7, [sp, #100]	; 0x64
   1819c:	cmp	r0, #0
   181a0:	beq	1aad4 <__assert_fail@plt+0x9374>
   181a4:	str	r0, [sp, #112]	; 0x70
   181a8:	ldr	r8, [sp, #96]	; 0x60
   181ac:	ldr	r0, [sp, #52]	; 0x34
   181b0:	cmp	r9, #0
   181b4:	mov	r4, #1
   181b8:	mov	r9, r0
   181bc:	beq	181e8 <__assert_fail@plt+0x6a88>
   181c0:	mov	r0, #0
   181c4:	mov	r4, #0
   181c8:	bl	2b290 <__assert_fail@plt+0x19b30>
   181cc:	cmp	r0, #0
   181d0:	beq	1a9bc <__assert_fail@plt+0x925c>
   181d4:	ldr	r7, [sp, #100]	; 0x64
   181d8:	ldr	r5, [sp, #92]	; 0x5c
   181dc:	ldr	r2, [sp, #88]	; 0x58
   181e0:	ldr	r1, [sp, #80]	; 0x50
   181e4:	str	r0, [sp, #108]	; 0x6c
   181e8:	add	r3, r8, #96	; 0x60
   181ec:	str	r1, [sp, #140]	; 0x8c
   181f0:	ldr	r0, [fp, #12]
   181f4:	cmp	r4, #0
   181f8:	str	r3, [sp, #172]	; 0xac
   181fc:	ldrb	r3, [r8, #88]	; 0x58
   18200:	ubfx	r3, r3, #4, #1
   18204:	strb	r3, [sp, #182]	; 0xb6
   18208:	mov	r3, #0
   1820c:	beq	18224 <__assert_fail@plt+0x6ac4>
   18210:	str	r7, [sp, #108]	; 0x6c
   18214:	ldr	r3, [r8, #92]	; 0x5c
   18218:	cmp	r3, #1
   1821c:	ldr	r3, [sp, #68]	; 0x44
   18220:	movwgt	r3, #0
   18224:	str	r0, [sp, #160]	; 0xa0
   18228:	str	r3, [sp, #136]	; 0x88
   1822c:	str	r3, [sp, #132]	; 0x84
   18230:	str	r0, [sp, #156]	; 0x9c
   18234:	ldrb	r0, [r9, #28]
   18238:	lsr	r0, r0, #7
   1823c:	strb	r0, [sp, #181]	; 0xb5
   18240:	mvn	r0, #0
   18244:	ldr	r8, [r8, #76]	; 0x4c
   18248:	str	r0, [sp, #196]	; 0xc4
   1824c:	ldr	r0, [fp, #24]
   18250:	lsl	r9, r8, #1
   18254:	cmp	r8, #1
   18258:	str	r0, [sp, #192]	; 0xc0
   1825c:	blt	182b4 <__assert_fail@plt+0x6b54>
   18260:	movw	r0, #43690	; 0xaaaa
   18264:	mov	sl, #12
   18268:	movt	r0, #2730	; 0xaaa
   1826c:	cmp	r9, r0
   18270:	bhi	1aad4 <__assert_fail@plt+0x9374>
   18274:	add	r0, r8, r8, lsl #1
   18278:	lsl	r0, r0, #4
   1827c:	bl	2b260 <__assert_fail@plt+0x19b00>
   18280:	mov	r5, r0
   18284:	str	r0, [sp, #220]	; 0xdc
   18288:	lsl	r0, r8, #3
   1828c:	bl	2b260 <__assert_fail@plt+0x19b00>
   18290:	cmp	r0, #0
   18294:	str	r0, [sp, #236]	; 0xec
   18298:	beq	1aad4 <__assert_fail@plt+0x9374>
   1829c:	cmp	r5, #0
   182a0:	ldr	r7, [sp, #100]	; 0x64
   182a4:	ldr	r5, [sp, #92]	; 0x5c
   182a8:	ldr	r2, [sp, #88]	; 0x58
   182ac:	ldr	r1, [sp, #80]	; 0x50
   182b0:	beq	1aad4 <__assert_fail@plt+0x9374>
   182b4:	mov	r0, #1
   182b8:	str	r9, [sp, #232]	; 0xe8
   182bc:	str	r0, [sp, #224]	; 0xe0
   182c0:	ldr	r0, [sp, #84]	; 0x54
   182c4:	str	r9, [sp, #216]	; 0xd8
   182c8:	cmp	r0, #1
   182cc:	bhi	182e0 <__assert_fail@plt+0x6b80>
   182d0:	ldr	r0, [sp, #96]	; 0x60
   182d4:	ldrb	r0, [r0, #88]	; 0x58
   182d8:	tst	r0, #2
   182dc:	beq	18310 <__assert_fail@plt+0x6bb0>
   182e0:	mov	sl, #12
   182e4:	cmn	r1, #-1073741822	; 0xc0000002
   182e8:	bhi	1aad4 <__assert_fail@plt+0x9374>
   182ec:	mov	r0, #4
   182f0:	add	r0, r0, r1, lsl #2
   182f4:	bl	2b260 <__assert_fail@plt+0x19b00>
   182f8:	ldr	r2, [sp, #88]	; 0x58
   182fc:	ldr	r5, [sp, #92]	; 0x5c
   18300:	ldr	r7, [sp, #100]	; 0x64
   18304:	cmp	r0, #0
   18308:	str	r0, [sp, #204]	; 0xcc
   1830c:	beq	1aad4 <__assert_fail@plt+0x9374>
   18310:	ldr	r1, [fp, #24]
   18314:	ldr	r3, [sp, #72]	; 0x48
   18318:	str	r6, [fp, #-200]	; 0xffffff38
   1831c:	mov	r0, #4
   18320:	mov	r8, #1
   18324:	mov	r9, r6
   18328:	tst	r1, #1
   1832c:	mov	r1, #4
   18330:	mov	r4, r3
   18334:	movweq	r1, #6
   18338:	cmp	r3, r6
   1833c:	str	r1, [sp, #164]	; 0xa4
   18340:	ldr	r1, [sp, #96]	; 0x60
   18344:	mvnlt	r8, #0
   18348:	movlt	r4, r6
   1834c:	movlt	r9, r3
   18350:	cmp	r5, #0
   18354:	ldr	r1, [r1, #92]	; 0x5c
   18358:	str	r1, [sp, #56]	; 0x38
   1835c:	beq	183a0 <__assert_fail@plt+0x6c40>
   18360:	cmp	r1, #1
   18364:	beq	18384 <__assert_fail@plt+0x6c24>
   18368:	ldr	r0, [sp, #52]	; 0x34
   1836c:	ldr	r0, [r0, #12]
   18370:	and	r0, r0, #4194304	; 0x400000
   18374:	orr	r0, r2, r0
   18378:	clz	r0, r0
   1837c:	lsr	r0, r0, #5
   18380:	lsl	r0, r0, #2
   18384:	cmp	r2, #0
   18388:	mov	r1, r2
   1838c:	movwne	r1, #1
   18390:	cmp	r3, r6
   18394:	orrge	r1, r1, #2
   18398:	orr	r0, r1, r0
   1839c:	b	183a4 <__assert_fail@plt+0x6c44>
   183a0:	mov	r0, #8
   183a4:	add	r1, sp, #104	; 0x68
   183a8:	cmp	r3, r6
   183ac:	sub	r0, r0, #4
   183b0:	str	r8, [sp, #60]	; 0x3c
   183b4:	str	r4, [sp, #80]	; 0x50
   183b8:	str	r9, [sp, #76]	; 0x4c
   183bc:	add	r1, r1, #32
   183c0:	str	r0, [sp, #72]	; 0x48
   183c4:	str	r1, [sp, #28]
   183c8:	sub	r1, fp, #200	; 0xc8
   183cc:	movwlt	r1, #0
   183d0:	cmp	r1, #0
   183d4:	str	r1, [sp, #40]	; 0x28
   183d8:	movwne	r1, #1
   183dc:	str	r1, [sp, #48]	; 0x30
   183e0:	sub	r1, fp, #192	; 0xc0
   183e4:	add	r1, r1, #16
   183e8:	str	r1, [sp, #36]	; 0x24
   183ec:	ldr	r1, [sp, #72]	; 0x48
   183f0:	cmp	r1, #4
   183f4:	bhi	184d8 <__assert_fail@plt+0x6d78>
   183f8:	add	r0, pc, #0
   183fc:	ldr	pc, [r0, r1, lsl #2]
   18400:	andeq	r8, r1, r4, lsl r4
   18404:	andeq	r8, r1, r4, lsl r4
   18408:	andeq	r8, r1, ip, lsl #9
   1840c:	andeq	r8, r1, r4, ror #8
   18410:	andeq	r8, r1, ip, asr r5
   18414:	mov	sl, #1
   18418:	cmp	r6, r9
   1841c:	blt	1aad4 <__assert_fail@plt+0x9374>
   18420:	ldr	r1, [sp, #68]	; 0x44
   18424:	cmp	r6, r1
   18428:	mov	r0, #0
   1842c:	ldrblt	r0, [r7, r6]
   18430:	cmp	r2, #0
   18434:	ldrbne	r0, [r2, r0]
   18438:	ldrb	r0, [r5, r0]
   1843c:	cmp	r0, #0
   18440:	bne	1855c <__assert_fail@plt+0x6dfc>
   18444:	sub	r0, r6, #1
   18448:	cmp	r6, r9
   1844c:	mov	r6, r0
   18450:	str	r0, [fp, #-200]	; 0xffffff38
   18454:	bgt	18424 <__assert_fail@plt+0x6cc4>
   18458:	b	1aad4 <__assert_fail@plt+0x9374>
   1845c:	add	r6, r6, #1
   18460:	str	r6, [fp, #-200]	; 0xffffff38
   18464:	cmp	r6, r4
   18468:	bge	184a4 <__assert_fail@plt+0x6d44>
   1846c:	ldrb	r0, [r7, r6]
   18470:	ldrb	r0, [r2, r0]
   18474:	ldrb	r0, [r5, r0]
   18478:	cmp	r0, #0
   1847c:	beq	1845c <__assert_fail@plt+0x6cfc>
   18480:	b	184a4 <__assert_fail@plt+0x6d44>
   18484:	add	r6, r6, #1
   18488:	str	r6, [fp, #-200]	; 0xffffff38
   1848c:	cmp	r6, r4
   18490:	bge	184a4 <__assert_fail@plt+0x6d44>
   18494:	ldrb	r0, [r7, r6]
   18498:	ldrb	r0, [r5, r0]
   1849c:	cmp	r0, #0
   184a0:	beq	18484 <__assert_fail@plt+0x6d24>
   184a4:	cmp	r6, r4
   184a8:	bne	1855c <__assert_fail@plt+0x6dfc>
   184ac:	ldr	r1, [sp, #68]	; 0x44
   184b0:	mov	r0, #0
   184b4:	mov	r6, r4
   184b8:	cmp	r4, r1
   184bc:	ldrblt	r0, [r7, r4]
   184c0:	cmp	r2, #0
   184c4:	ldrbne	r0, [r2, r0]
   184c8:	ldrb	r0, [r5, r0]
   184cc:	cmp	r0, #0
   184d0:	bne	1855c <__assert_fail@plt+0x6dfc>
   184d4:	b	1ac90 <__assert_fail@plt+0x9530>
   184d8:	ldr	r0, [sp, #128]	; 0x80
   184dc:	ldr	r2, [sp, #136]	; 0x88
   184e0:	sub	r1, r6, r0
   184e4:	cmp	r1, r2
   184e8:	bcs	18530 <__assert_fail@plt+0x6dd0>
   184ec:	ldr	r3, [sp, #132]	; 0x84
   184f0:	mov	r2, #0
   184f4:	cmp	r1, r3
   184f8:	bcs	18504 <__assert_fail@plt+0x6da4>
   184fc:	ldr	r2, [sp, #108]	; 0x6c
   18500:	ldrb	r2, [r2, r1]
   18504:	ldrb	r1, [r5, r2]
   18508:	cmp	r1, #0
   1850c:	bne	1855c <__assert_fail@plt+0x6dfc>
   18510:	add	r6, r6, r8
   18514:	mov	sl, #1
   18518:	cmp	r6, r9
   1851c:	str	r6, [fp, #-200]	; 0xffffff38
   18520:	blt	1aad4 <__assert_fail@plt+0x9374>
   18524:	cmp	r6, r4
   18528:	ble	184dc <__assert_fail@plt+0x6d7c>
   1852c:	b	1aad4 <__assert_fail@plt+0x9374>
   18530:	ldr	r2, [fp, #24]
   18534:	add	r0, sp, #104	; 0x68
   18538:	mov	r1, r6
   1853c:	bl	21a4c <__assert_fail@plt+0x102ec>
   18540:	cmp	r0, #0
   18544:	bne	1ab3c <__assert_fail@plt+0x93dc>
   18548:	ldr	r0, [sp, #128]	; 0x80
   1854c:	ldr	r6, [fp, #-200]	; 0xffffff38
   18550:	ldr	r5, [sp, #92]	; 0x5c
   18554:	sub	r1, r6, r0
   18558:	b	184ec <__assert_fail@plt+0x6d8c>
   1855c:	ldr	r2, [fp, #24]
   18560:	add	r0, sp, #104	; 0x68
   18564:	mov	r1, r6
   18568:	bl	21a4c <__assert_fail@plt+0x102ec>
   1856c:	cmp	r0, #0
   18570:	bne	1ab3c <__assert_fail@plt+0x93dc>
   18574:	ldr	r0, [sp, #56]	; 0x38
   18578:	cmp	r0, #1
   1857c:	ldrne	r0, [sp, #132]	; 0x84
   18580:	cmpne	r0, #0
   18584:	bne	185c4 <__assert_fail@plt+0x6e64>
   18588:	mov	r0, #0
   1858c:	str	r0, [sp, #212]	; 0xd4
   18590:	str	r0, [sp, #224]	; 0xe0
   18594:	str	r0, [sp, #208]	; 0xd0
   18598:	str	r0, [fp, #-196]	; 0xffffff3c
   1859c:	ldr	r4, [sp, #188]	; 0xbc
   185a0:	ldr	r5, [sp, #144]	; 0x90
   185a4:	ldr	r9, [r4, #36]	; 0x24
   185a8:	ldrsb	r0, [r9, #52]	; 0x34
   185ac:	cmn	r0, #1
   185b0:	ble	185d8 <__assert_fail@plt+0x6e78>
   185b4:	ldr	r1, [sp, #48]	; 0x30
   185b8:	cmp	r9, #0
   185bc:	bne	18708 <__assert_fail@plt+0x6fa8>
   185c0:	b	1a9bc <__assert_fail@plt+0x925c>
   185c4:	ldr	r0, [sp, #112]	; 0x70
   185c8:	ldr	r0, [r0]
   185cc:	cmn	r0, #1
   185d0:	bne	18588 <__assert_fail@plt+0x6e28>
   185d4:	b	199b0 <__assert_fail@plt+0x8250>
   185d8:	cmp	r5, #0
   185dc:	ble	18618 <__assert_fail@plt+0x6eb8>
   185e0:	ldr	r1, [sp, #152]	; 0x98
   185e4:	sub	r0, r5, #1
   185e8:	cmp	r1, r0
   185ec:	beq	186e4 <__assert_fail@plt+0x6f84>
   185f0:	ldr	r1, [sp, #184]	; 0xb8
   185f4:	cmp	r1, #2
   185f8:	blt	1862c <__assert_fail@plt+0x6ecc>
   185fc:	ldr	r1, [sp, #112]	; 0x70
   18600:	ldr	r6, [r1, r0, lsl #2]
   18604:	cmn	r6, #1
   18608:	bne	18660 <__assert_fail@plt+0x6f00>
   1860c:	sub	r0, r0, #1
   18610:	cmn	r0, #1
   18614:	bne	18600 <__assert_fail@plt+0x6ea0>
   18618:	ldr	r3, [sp, #164]	; 0xa4
   1861c:	ldr	r1, [sp, #48]	; 0x30
   18620:	tst	r3, #1
   18624:	beq	18690 <__assert_fail@plt+0x6f30>
   18628:	b	186fc <__assert_fail@plt+0x6f9c>
   1862c:	ldr	r1, [sp, #108]	; 0x6c
   18630:	ldr	r2, [sp, #172]	; 0xac
   18634:	mov	r3, #1
   18638:	ldrb	r0, [r1, r0]
   1863c:	ubfx	r1, r0, #5, #3
   18640:	ldr	r1, [r2, r1, lsl #2]
   18644:	and	r2, r0, #31
   18648:	tst	r1, r3, lsl r2
   1864c:	ldr	r1, [sp, #48]	; 0x30
   18650:	bne	186fc <__assert_fail@plt+0x6f9c>
   18654:	cmp	r0, #10
   18658:	beq	18678 <__assert_fail@plt+0x6f18>
   1865c:	b	18700 <__assert_fail@plt+0x6fa0>
   18660:	ldrb	r0, [sp, #182]	; 0xb6
   18664:	ldr	r1, [sp, #48]	; 0x30
   18668:	cmp	r0, #0
   1866c:	bne	195f8 <__assert_fail@plt+0x7e98>
   18670:	cmp	r6, #10
   18674:	bne	18700 <__assert_fail@plt+0x6fa0>
   18678:	ldrb	r0, [sp, #181]	; 0xb5
   1867c:	cmp	r0, #0
   18680:	movwne	r0, #1
   18684:	lsl	r3, r0, #1
   18688:	tst	r3, #1
   1868c:	bne	186fc <__assert_fail@plt+0x6f9c>
   18690:	cmp	r3, #0
   18694:	beq	18700 <__assert_fail@plt+0x6fa0>
   18698:	ands	r1, r3, #2
   1869c:	and	r0, r3, #4
   186a0:	cmpne	r0, #0
   186a4:	bne	186d4 <__assert_fail@plt+0x6f74>
   186a8:	cmp	r1, #0
   186ac:	bne	186dc <__assert_fail@plt+0x6f7c>
   186b0:	ldr	r9, [r4, #36]	; 0x24
   186b4:	cmp	r0, #0
   186b8:	beq	185b4 <__assert_fail@plt+0x6e54>
   186bc:	ldr	r2, [r9, #40]	; 0x28
   186c0:	sub	r0, fp, #196	; 0xc4
   186c4:	mov	r1, r4
   186c8:	bl	21458 <__assert_fail@plt+0xfcf8>
   186cc:	mov	r9, r0
   186d0:	b	185b4 <__assert_fail@plt+0x6e54>
   186d4:	ldr	r9, [r4, #48]	; 0x30
   186d8:	b	185b4 <__assert_fail@plt+0x6e54>
   186dc:	ldr	r9, [r4, #44]	; 0x2c
   186e0:	b	185b4 <__assert_fail@plt+0x6e54>
   186e4:	ldr	r0, [sp, #192]	; 0xc0
   186e8:	ldr	r1, [sp, #48]	; 0x30
   186ec:	and	r0, r0, #2
   186f0:	eor	r3, r0, #10
   186f4:	tst	r3, #1
   186f8:	beq	18690 <__assert_fail@plt+0x6f30>
   186fc:	ldr	r9, [r4, #40]	; 0x28
   18700:	cmp	r9, #0
   18704:	beq	1a9bc <__assert_fail@plt+0x925c>
   18708:	ldr	r0, [sp, #204]	; 0xcc
   1870c:	mov	r6, r1
   18710:	cmp	r0, #0
   18714:	beq	1872c <__assert_fail@plt+0x6fcc>
   18718:	str	r9, [r0, r5, lsl #2]
   1871c:	mov	r6, r1
   18720:	ldr	r0, [r4, #76]	; 0x4c
   18724:	cmp	r0, #0
   18728:	bne	19424 <__assert_fail@plt+0x7cc4>
   1872c:	ldrb	r0, [r9, #52]	; 0x34
   18730:	mvn	sl, #0
   18734:	tst	r0, #16
   18738:	bne	193f8 <__assert_fail@plt+0x7c98>
   1873c:	mov	r0, #0
   18740:	str	r0, [sp, #64]	; 0x40
   18744:	ldr	r0, [sp, #144]	; 0x90
   18748:	ldr	r1, [sp, #160]	; 0xa0
   1874c:	cmp	r1, r0
   18750:	ble	1875c <__assert_fail@plt+0x6ffc>
   18754:	ldr	r8, [sp, #40]	; 0x28
   18758:	b	1877c <__assert_fail@plt+0x701c>
   1875c:	ldr	r8, [sp, #40]	; 0x28
   18760:	b	1901c <__assert_fail@plt+0x78bc>
   18764:	ldr	r6, [sp, #24]
   18768:	mov	r5, lr
   1876c:	ldr	r0, [sp, #144]	; 0x90
   18770:	ldr	r1, [sp, #160]	; 0xa0
   18774:	cmp	r1, r0
   18778:	ble	1901c <__assert_fail@plt+0x78bc>
   1877c:	ldr	r2, [sp, #140]	; 0x8c
   18780:	ldr	r1, [sp, #152]	; 0x98
   18784:	add	r7, r0, #1
   18788:	mov	r4, r9
   1878c:	cmp	r7, r2
   18790:	blt	1879c <__assert_fail@plt+0x703c>
   18794:	cmp	r2, r1
   18798:	blt	18eb4 <__assert_fail@plt+0x7754>
   1879c:	ldr	r2, [sp, #132]	; 0x84
   187a0:	cmp	r7, r2
   187a4:	blt	187b0 <__assert_fail@plt+0x7050>
   187a8:	cmp	r2, r1
   187ac:	blt	18eb4 <__assert_fail@plt+0x7754>
   187b0:	ldrb	r0, [r4, #52]	; 0x34
   187b4:	tst	r0, #32
   187b8:	bne	18a74 <__assert_fail@plt+0x7314>
   187bc:	ldr	r1, [sp, #144]	; 0x90
   187c0:	ldr	r0, [sp, #108]	; 0x6c
   187c4:	add	r2, r1, #1
   187c8:	str	r2, [sp, #144]	; 0x90
   187cc:	ldrb	r9, [r0, r1]
   187d0:	ldr	r0, [r4, #44]	; 0x2c
   187d4:	cmp	r0, #0
   187d8:	bne	1880c <__assert_fail@plt+0x70ac>
   187dc:	ldr	r2, [r4, #48]	; 0x30
   187e0:	cmp	r2, #0
   187e4:	bne	18ed0 <__assert_fail@plt+0x7770>
   187e8:	ldr	r0, [sp, #188]	; 0xbc
   187ec:	mov	r1, r4
   187f0:	bl	2529c <__assert_fail@plt+0x13b3c>
   187f4:	cmp	r0, #0
   187f8:	bne	187d0 <__assert_fail@plt+0x7070>
   187fc:	mov	r0, #12
   18800:	mov	r9, #0
   18804:	str	r0, [fp, #-196]	; 0xffffff3c
   18808:	b	18810 <__assert_fail@plt+0x70b0>
   1880c:	ldr	r9, [r0, r9, lsl #2]
   18810:	ldr	r0, [sp, #204]	; 0xcc
   18814:	cmp	r0, #0
   18818:	beq	18830 <__assert_fail@plt+0x70d0>
   1881c:	sub	r0, fp, #196	; 0xc4
   18820:	add	r1, sp, #104	; 0x68
   18824:	mov	r2, r9
   18828:	bl	2316c <__assert_fail@plt+0x11a0c>
   1882c:	mov	r9, r0
   18830:	cmp	r9, #0
   18834:	beq	18888 <__assert_fail@plt+0x7128>
   18838:	sub	r0, r4, r9
   1883c:	clz	r0, r0
   18840:	lsr	r0, r0, #5
   18844:	ands	r6, r6, r0
   18848:	ldrb	r0, [r9, #52]	; 0x34
   1884c:	moveq	r7, r5
   18850:	mov	r5, r7
   18854:	tst	r0, #16
   18858:	beq	1876c <__assert_fail@plt+0x700c>
   1885c:	sxtb	r0, r0
   18860:	cmn	r0, #1
   18864:	ble	18914 <__assert_fail@plt+0x71b4>
   18868:	ldr	r0, [sp, #44]	; 0x2c
   1886c:	ldr	sl, [sp, #144]	; 0x90
   18870:	cmp	r0, #0
   18874:	beq	19030 <__assert_fail@plt+0x78d0>
   18878:	mov	r8, #0
   1887c:	mov	r0, #1
   18880:	str	r0, [sp, #64]	; 0x40
   18884:	b	1876c <__assert_fail@plt+0x700c>
   18888:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1888c:	cmp	r0, #0
   18890:	bne	1a9bc <__assert_fail@plt+0x925c>
   18894:	ldr	r0, [sp, #64]	; 0x40
   18898:	ldr	r1, [sp, #44]	; 0x2c
   1889c:	cmp	r0, #0
   188a0:	mvn	r1, r1
   188a4:	movwne	r0, #1
   188a8:	tst	r1, r0
   188ac:	bne	1901c <__assert_fail@plt+0x78bc>
   188b0:	ldr	r0, [sp, #204]	; 0xcc
   188b4:	cmp	r0, #0
   188b8:	beq	1901c <__assert_fail@plt+0x78bc>
   188bc:	ldr	r2, [sp, #144]	; 0x90
   188c0:	ldr	r1, [sp, #208]	; 0xd0
   188c4:	add	r0, r0, #4
   188c8:	cmp	r2, r1
   188cc:	bge	1901c <__assert_fail@plt+0x78bc>
   188d0:	add	r3, r2, #1
   188d4:	str	r3, [sp, #144]	; 0x90
   188d8:	ldr	r2, [r0, r2, lsl #2]
   188dc:	cmp	r2, #0
   188e0:	mov	r2, r3
   188e4:	beq	188c8 <__assert_fail@plt+0x7168>
   188e8:	sub	r0, fp, #196	; 0xc4
   188ec:	add	r1, sp, #104	; 0x68
   188f0:	mov	r2, #0
   188f4:	bl	2316c <__assert_fail@plt+0x11a0c>
   188f8:	cmp	r0, #0
   188fc:	mov	r9, r0
   18900:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   18904:	cmpeq	r0, #0
   18908:	bne	1895c <__assert_fail@plt+0x71fc>
   1890c:	ldr	r0, [sp, #204]	; 0xcc
   18910:	b	188bc <__assert_fail@plt+0x715c>
   18914:	ldr	r0, [sp, #144]	; 0x90
   18918:	cmn	r0, #1
   1891c:	ble	18954 <__assert_fail@plt+0x71f4>
   18920:	ldr	r1, [sp, #152]	; 0x98
   18924:	cmp	r1, r0
   18928:	beq	18f88 <__assert_fail@plt+0x7828>
   1892c:	ldr	r1, [sp, #184]	; 0xb8
   18930:	cmp	r1, #2
   18934:	blt	18968 <__assert_fail@plt+0x7208>
   18938:	ldr	r1, [sp, #112]	; 0x70
   1893c:	ldr	r4, [r1, r0, lsl #2]
   18940:	cmn	r4, #1
   18944:	bne	18998 <__assert_fail@plt+0x7238>
   18948:	sub	r0, r0, #1
   1894c:	cmn	r0, #1
   18950:	bne	1893c <__assert_fail@plt+0x71dc>
   18954:	ldr	r3, [sp, #164]	; 0xa4
   18958:	b	189c0 <__assert_fail@plt+0x7260>
   1895c:	cmp	r9, #0
   18960:	bne	18838 <__assert_fail@plt+0x70d8>
   18964:	b	1901c <__assert_fail@plt+0x78bc>
   18968:	ldr	r1, [sp, #108]	; 0x6c
   1896c:	ldr	r2, [sp, #172]	; 0xac
   18970:	mov	r3, #1
   18974:	ldrb	r0, [r1, r0]
   18978:	ubfx	r1, r0, #5, #3
   1897c:	ldr	r1, [r2, r1, lsl #2]
   18980:	and	r2, r0, #31
   18984:	tst	r1, r3, lsl r2
   18988:	moveq	r3, #0
   1898c:	cmpeq	r0, #10
   18990:	bne	189c0 <__assert_fail@plt+0x7260>
   18994:	b	189b0 <__assert_fail@plt+0x7250>
   18998:	ldrb	r0, [sp, #182]	; 0xb6
   1899c:	cmp	r0, #0
   189a0:	bne	18fb0 <__assert_fail@plt+0x7850>
   189a4:	mov	r3, #0
   189a8:	cmp	r4, #10
   189ac:	bne	189c0 <__assert_fail@plt+0x7260>
   189b0:	ldrb	r0, [sp, #181]	; 0xb5
   189b4:	cmp	r0, #0
   189b8:	movwne	r0, #1
   189bc:	lsl	r3, r0, #1
   189c0:	ldr	r0, [r9, #8]
   189c4:	cmp	r0, #1
   189c8:	blt	1876c <__assert_fail@plt+0x700c>
   189cc:	ldr	r1, [sp, #188]	; 0xbc
   189d0:	mov	lr, r5
   189d4:	ldr	r7, [r9, #12]
   189d8:	and	ip, r3, #8
   189dc:	and	r2, r3, #2
   189e0:	and	r3, r3, #1
   189e4:	str	r6, [sp, #24]
   189e8:	ldr	r5, [r1]
   189ec:	b	189fc <__assert_fail@plt+0x729c>
   189f0:	add	r7, r7, #4
   189f4:	subs	r0, r0, #1
   189f8:	beq	18764 <__assert_fail@plt+0x7004>
   189fc:	ldr	r4, [r7]
   18a00:	add	r1, r5, r4, lsl #3
   18a04:	ldr	r1, [r1, #4]
   18a08:	uxtb	r6, r1
   18a0c:	cmp	r6, #2
   18a10:	bne	189f0 <__assert_fail@plt+0x7290>
   18a14:	movw	r6, #65280	; 0xff00
   18a18:	movt	r6, #3
   18a1c:	tst	r1, r6
   18a20:	beq	18a60 <__assert_fail@plt+0x7300>
   18a24:	cmp	r3, #0
   18a28:	bne	18a34 <__assert_fail@plt+0x72d4>
   18a2c:	ands	r6, r1, #1024	; 0x400
   18a30:	bne	189f0 <__assert_fail@plt+0x7290>
   18a34:	cmp	r3, #0
   18a38:	andsne	r6, r1, #2048	; 0x800
   18a3c:	bne	189f0 <__assert_fail@plt+0x7290>
   18a40:	cmp	r2, #0
   18a44:	bne	18a50 <__assert_fail@plt+0x72f0>
   18a48:	ands	r6, r1, #8192	; 0x2000
   18a4c:	bne	189f0 <__assert_fail@plt+0x7290>
   18a50:	cmp	ip, #0
   18a54:	bne	18a60 <__assert_fail@plt+0x7300>
   18a58:	ands	r1, r1, #32768	; 0x8000
   18a5c:	bne	189f0 <__assert_fail@plt+0x7290>
   18a60:	ldr	r6, [sp, #24]
   18a64:	cmp	r4, #0
   18a68:	mov	r5, lr
   18a6c:	bne	18868 <__assert_fail@plt+0x7108>
   18a70:	b	1876c <__assert_fail@plt+0x700c>
   18a74:	ldr	r0, [r4, #8]
   18a78:	str	r6, [sp, #24]
   18a7c:	cmp	r0, #1
   18a80:	blt	18f1c <__assert_fail@plt+0x77bc>
   18a84:	ldr	ip, [sp, #188]	; 0xbc
   18a88:	mov	r6, #0
   18a8c:	str	r5, [sp, #12]
   18a90:	str	ip, [sp, #20]
   18a94:	b	18aa8 <__assert_fail@plt+0x7348>
   18a98:	ldr	r0, [r4, #8]
   18a9c:	add	r6, r6, #1
   18aa0:	cmp	r6, r0
   18aa4:	bge	18f1c <__assert_fail@plt+0x77bc>
   18aa8:	ldr	r0, [r4, #12]
   18aac:	ldr	r1, [r0, r6, lsl #2]
   18ab0:	ldr	r0, [ip]
   18ab4:	add	r0, r0, r1, lsl #3
   18ab8:	ldr	r3, [r0, #4]
   18abc:	tst	r3, #1048576	; 0x100000
   18ac0:	beq	18a98 <__assert_fail@plt+0x7338>
   18ac4:	movw	r0, #65280	; 0xff00
   18ac8:	movt	r0, #3
   18acc:	tst	r3, r0
   18ad0:	beq	18be0 <__assert_fail@plt+0x7480>
   18ad4:	ldr	r0, [sp, #144]	; 0x90
   18ad8:	cmn	r0, #1
   18adc:	ble	18b18 <__assert_fail@plt+0x73b8>
   18ae0:	ldr	r2, [sp, #152]	; 0x98
   18ae4:	cmp	r2, r0
   18ae8:	beq	18dfc <__assert_fail@plt+0x769c>
   18aec:	ldr	r2, [sp, #184]	; 0xb8
   18af0:	cmp	r2, #2
   18af4:	blt	18b20 <__assert_fail@plt+0x73c0>
   18af8:	ldr	r2, [sp, #112]	; 0x70
   18afc:	ldr	r5, [sp, #12]
   18b00:	ldr	r9, [r2, r0, lsl #2]
   18b04:	cmn	r9, #1
   18b08:	bne	18b64 <__assert_fail@plt+0x7404>
   18b0c:	sub	r0, r0, #1
   18b10:	cmn	r0, #1
   18b14:	bne	18b00 <__assert_fail@plt+0x73a0>
   18b18:	ldr	lr, [sp, #164]	; 0xa4
   18b1c:	b	18b8c <__assert_fail@plt+0x742c>
   18b20:	mov	r9, r3
   18b24:	ldr	r3, [sp, #108]	; 0x6c
   18b28:	ldr	r2, [sp, #172]	; 0xac
   18b2c:	mov	lr, #1
   18b30:	ldrb	r0, [r3, r0]
   18b34:	ubfx	r3, r0, #5, #3
   18b38:	and	r5, r0, #31
   18b3c:	ldr	r3, [r2, r3, lsl #2]
   18b40:	mov	r2, #0
   18b44:	tst	r3, lr, lsl r5
   18b48:	ldr	r5, [sp, #12]
   18b4c:	bne	18ba4 <__assert_fail@plt+0x7444>
   18b50:	mov	r3, r9
   18b54:	mov	lr, #0
   18b58:	cmp	r0, #10
   18b5c:	beq	18b7c <__assert_fail@plt+0x741c>
   18b60:	b	18b8c <__assert_fail@plt+0x742c>
   18b64:	ldrb	r0, [sp, #182]	; 0xb6
   18b68:	cmp	r0, #0
   18b6c:	bne	18e34 <__assert_fail@plt+0x76d4>
   18b70:	mov	lr, #0
   18b74:	cmp	r9, #10
   18b78:	bne	18b8c <__assert_fail@plt+0x742c>
   18b7c:	ldrb	r0, [sp, #181]	; 0xb5
   18b80:	cmp	r0, #0
   18b84:	movwne	r0, #1
   18b88:	lsl	lr, r0, #1
   18b8c:	and	r0, lr, #1
   18b90:	tst	r3, #1024	; 0x400
   18b94:	eor	r2, r0, #1
   18b98:	beq	18ba4 <__assert_fail@plt+0x7444>
   18b9c:	cmp	r0, #0
   18ba0:	beq	18a98 <__assert_fail@plt+0x7338>
   18ba4:	ldr	r0, [ip]
   18ba8:	cmp	r2, #0
   18bac:	add	r0, r0, r1, lsl #3
   18bb0:	ldr	r0, [r0, #4]
   18bb4:	bne	18bc0 <__assert_fail@plt+0x7460>
   18bb8:	ands	r2, r0, #2048	; 0x800
   18bbc:	bne	18a98 <__assert_fail@plt+0x7338>
   18bc0:	tst	lr, #2
   18bc4:	bne	18bd0 <__assert_fail@plt+0x7470>
   18bc8:	ands	r2, r0, #8192	; 0x2000
   18bcc:	bne	18a98 <__assert_fail@plt+0x7338>
   18bd0:	tst	lr, #8
   18bd4:	bne	18be0 <__assert_fail@plt+0x7480>
   18bd8:	ands	r0, r0, #32768	; 0x8000
   18bdc:	bne	18a98 <__assert_fail@plt+0x7338>
   18be0:	ldr	r3, [sp, #144]	; 0x90
   18be4:	mov	r0, ip
   18be8:	add	r2, sp, #104	; 0x68
   18bec:	str	r6, [sp, #16]
   18bf0:	mov	r9, r1
   18bf4:	bl	24d28 <__assert_fail@plt+0x135c8>
   18bf8:	ldr	r6, [sp, #16]
   18bfc:	ldr	ip, [sp, #20]
   18c00:	cmp	r0, #0
   18c04:	beq	18a98 <__assert_fail@plt+0x7338>
   18c08:	ldr	r1, [sp, #224]	; 0xe0
   18c0c:	mov	r3, r9
   18c10:	cmp	r1, r0
   18c14:	movlt	r1, r0
   18c18:	str	r1, [sp, #224]	; 0xe0
   18c1c:	ldr	r6, [sp, #144]	; 0x90
   18c20:	ldr	r2, [sp, #140]	; 0x8c
   18c24:	ldr	r1, [sp, #152]	; 0x98
   18c28:	ldr	r5, [sp, #208]	; 0xd0
   18c2c:	add	r6, r6, r0
   18c30:	cmp	r2, r6
   18c34:	cmple	r2, r1
   18c38:	blt	18c4c <__assert_fail@plt+0x74ec>
   18c3c:	ldr	r0, [sp, #132]	; 0x84
   18c40:	cmp	r0, r6
   18c44:	cmple	r0, r1
   18c48:	bge	18c68 <__assert_fail@plt+0x7508>
   18c4c:	add	r1, r6, #1
   18c50:	add	r0, sp, #104	; 0x68
   18c54:	bl	22f70 <__assert_fail@plt+0x11810>
   18c58:	ldr	ip, [sp, #20]
   18c5c:	mov	r3, r9
   18c60:	cmp	r0, #0
   18c64:	bne	18f98 <__assert_fail@plt+0x7838>
   18c68:	cmp	r6, r5
   18c6c:	ble	18c98 <__assert_fail@plt+0x7538>
   18c70:	sub	r0, r6, r5
   18c74:	mov	r1, #0
   18c78:	lsl	r2, r0, #2
   18c7c:	ldr	r0, [sp, #204]	; 0xcc
   18c80:	add	r0, r0, r5, lsl #2
   18c84:	add	r0, r0, #4
   18c88:	bl	11670 <memset@plt>
   18c8c:	ldr	ip, [sp, #20]
   18c90:	mov	r3, r9
   18c94:	str	r6, [sp, #208]	; 0xd0
   18c98:	mov	r0, #0
   18c9c:	str	r0, [fp, #-48]	; 0xffffffd0
   18ca0:	ldr	r0, [sp, #204]	; 0xcc
   18ca4:	ldr	r1, [ip, #24]
   18ca8:	ldr	r9, [r0, r6, lsl #2]
   18cac:	ldr	r0, [ip, #12]
   18cb0:	ldr	r0, [r0, r3, lsl #2]
   18cb4:	cmp	r9, #0
   18cb8:	add	r0, r0, r0, lsl #1
   18cbc:	add	r2, r1, r0, lsl #2
   18cc0:	beq	18ce4 <__assert_fail@plt+0x7584>
   18cc4:	ldr	r1, [r9, #40]	; 0x28
   18cc8:	sub	r0, fp, #192	; 0xc0
   18ccc:	bl	2337c <__assert_fail@plt+0x11c1c>
   18cd0:	ldr	r5, [sp, #12]
   18cd4:	cmp	r0, #0
   18cd8:	str	r0, [fp, #-48]	; 0xffffffd0
   18cdc:	beq	18cf8 <__assert_fail@plt+0x7598>
   18ce0:	b	18fa0 <__assert_fail@plt+0x7840>
   18ce4:	vldr	d16, [r2]
   18ce8:	ldr	r0, [r2, #8]
   18cec:	ldr	r5, [sp, #12]
   18cf0:	str	r0, [fp, #-184]	; 0xffffff48
   18cf4:	vstr	d16, [fp, #-192]	; 0xffffff40
   18cf8:	cmp	r6, #0
   18cfc:	str	r6, [sp, #8]
   18d00:	str	r9, [sp, #4]
   18d04:	ble	18e10 <__assert_fail@plt+0x76b0>
   18d08:	ldr	r1, [sp, #152]	; 0x98
   18d0c:	sub	r3, r6, #1
   18d10:	cmp	r1, r3
   18d14:	ldr	r1, [sp, #20]
   18d18:	beq	18e20 <__assert_fail@plt+0x76c0>
   18d1c:	ldr	r0, [sp, #184]	; 0xb8
   18d20:	cmp	r0, #2
   18d24:	blt	18d50 <__assert_fail@plt+0x75f0>
   18d28:	ldr	r2, [sp, #112]	; 0x70
   18d2c:	sub	r0, fp, #48	; 0x30
   18d30:	ldr	r9, [r2, r3, lsl #2]
   18d34:	cmn	r9, #1
   18d38:	bne	18d84 <__assert_fail@plt+0x7624>
   18d3c:	sub	r3, r3, #1
   18d40:	cmn	r3, #1
   18d44:	bne	18d30 <__assert_fail@plt+0x75d0>
   18d48:	ldr	r3, [sp, #164]	; 0xa4
   18d4c:	b	18dac <__assert_fail@plt+0x764c>
   18d50:	ldr	r0, [sp, #108]	; 0x6c
   18d54:	ldr	r2, [sp, #172]	; 0xac
   18d58:	ldrb	r6, [r0, r3]
   18d5c:	mov	r3, #1
   18d60:	ubfx	r0, r6, #5, #3
   18d64:	ldr	r0, [r2, r0, lsl #2]
   18d68:	and	r2, r6, #31
   18d6c:	tst	r0, r3, lsl r2
   18d70:	sub	r0, fp, #48	; 0x30
   18d74:	moveq	r3, #0
   18d78:	cmpeq	r6, #10
   18d7c:	bne	18dac <__assert_fail@plt+0x764c>
   18d80:	b	18d9c <__assert_fail@plt+0x763c>
   18d84:	ldrb	r2, [sp, #182]	; 0xb6
   18d88:	cmp	r2, #0
   18d8c:	bne	18e70 <__assert_fail@plt+0x7710>
   18d90:	mov	r3, #0
   18d94:	cmp	r9, #10
   18d98:	bne	18dac <__assert_fail@plt+0x764c>
   18d9c:	ldrb	r2, [sp, #181]	; 0xb5
   18da0:	cmp	r2, #0
   18da4:	movwne	r2, #1
   18da8:	lsl	r3, r2, #1
   18dac:	sub	r2, fp, #192	; 0xc0
   18db0:	bl	21458 <__assert_fail@plt+0xfcf8>
   18db4:	ldr	r1, [sp, #204]	; 0xcc
   18db8:	ldr	r6, [sp, #8]
   18dbc:	str	r0, [r1, r6, lsl #2]
   18dc0:	ldr	r0, [sp, #4]
   18dc4:	cmp	r0, #0
   18dc8:	beq	18dd4 <__assert_fail@plt+0x7674>
   18dcc:	ldr	r0, [fp, #-184]	; 0xffffff48
   18dd0:	bl	141b8 <__assert_fail@plt+0x2a58>
   18dd4:	ldr	r0, [sp, #204]	; 0xcc
   18dd8:	ldr	ip, [sp, #20]
   18ddc:	ldr	r0, [r0, r6, lsl #2]
   18de0:	ldr	r6, [sp, #16]
   18de4:	cmp	r0, #0
   18de8:	bne	18a98 <__assert_fail@plt+0x7338>
   18dec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18df0:	cmp	r0, #0
   18df4:	beq	18a98 <__assert_fail@plt+0x7338>
   18df8:	b	18fa0 <__assert_fail@plt+0x7840>
   18dfc:	ldr	r0, [sp, #192]	; 0xc0
   18e00:	ldr	r5, [sp, #12]
   18e04:	and	r0, r0, #2
   18e08:	eor	lr, r0, #10
   18e0c:	b	18b8c <__assert_fail@plt+0x742c>
   18e10:	ldr	r3, [sp, #164]	; 0xa4
   18e14:	ldr	r1, [sp, #20]
   18e18:	sub	r0, fp, #48	; 0x30
   18e1c:	b	18dac <__assert_fail@plt+0x764c>
   18e20:	ldr	r0, [sp, #192]	; 0xc0
   18e24:	and	r0, r0, #2
   18e28:	eor	r3, r0, #10
   18e2c:	sub	r0, fp, #48	; 0x30
   18e30:	b	18dac <__assert_fail@plt+0x764c>
   18e34:	mov	r0, r9
   18e38:	str	r3, [sp, #4]
   18e3c:	str	r1, [sp, #8]
   18e40:	bl	1164c <iswalnum@plt>
   18e44:	mov	lr, #1
   18e48:	mov	r2, #0
   18e4c:	cmp	r9, #95	; 0x5f
   18e50:	beq	18e9c <__assert_fail@plt+0x773c>
   18e54:	ldr	r5, [sp, #12]
   18e58:	ldr	ip, [sp, #20]
   18e5c:	ldr	r1, [sp, #8]
   18e60:	ldr	r3, [sp, #4]
   18e64:	cmp	r0, #0
   18e68:	beq	18b70 <__assert_fail@plt+0x7410>
   18e6c:	b	18ba4 <__assert_fail@plt+0x7444>
   18e70:	mov	r0, r9
   18e74:	bl	1164c <iswalnum@plt>
   18e78:	mov	r3, #1
   18e7c:	cmp	r9, #95	; 0x5f
   18e80:	beq	18eac <__assert_fail@plt+0x774c>
   18e84:	ldr	r5, [sp, #12]
   18e88:	ldr	r1, [sp, #20]
   18e8c:	cmp	r0, #0
   18e90:	sub	r0, fp, #48	; 0x30
   18e94:	beq	18d90 <__assert_fail@plt+0x7630>
   18e98:	b	18dac <__assert_fail@plt+0x764c>
   18e9c:	ldr	r5, [sp, #12]
   18ea0:	ldr	ip, [sp, #20]
   18ea4:	ldr	r1, [sp, #8]
   18ea8:	b	18ba4 <__assert_fail@plt+0x7444>
   18eac:	ldr	r5, [sp, #12]
   18eb0:	b	18e14 <__assert_fail@plt+0x76b4>
   18eb4:	add	r1, r0, #2
   18eb8:	add	r0, sp, #104	; 0x68
   18ebc:	bl	22f70 <__assert_fail@plt+0x11810>
   18ec0:	cmp	r0, #0
   18ec4:	str	r0, [fp, #-196]	; 0xffffff3c
   18ec8:	beq	187b0 <__assert_fail@plt+0x7050>
   18ecc:	b	1a9bc <__assert_fail@plt+0x925c>
   18ed0:	ldr	r0, [sp, #144]	; 0x90
   18ed4:	cmp	r0, #0
   18ed8:	ble	18f14 <__assert_fail@plt+0x77b4>
   18edc:	ldr	r1, [sp, #152]	; 0x98
   18ee0:	sub	r3, r0, #1
   18ee4:	cmp	r1, r3
   18ee8:	beq	18fd0 <__assert_fail@plt+0x7870>
   18eec:	ldr	r1, [sp, #184]	; 0xb8
   18ef0:	cmp	r1, #2
   18ef4:	blt	18f2c <__assert_fail@plt+0x77cc>
   18ef8:	ldr	r1, [sp, #112]	; 0x70
   18efc:	ldr	r0, [r1, r3, lsl #2]
   18f00:	cmn	r0, #1
   18f04:	bne	18f54 <__assert_fail@plt+0x77f4>
   18f08:	sub	r3, r3, #1
   18f0c:	cmn	r3, #1
   18f10:	bne	18efc <__assert_fail@plt+0x779c>
   18f14:	ldr	r1, [sp, #164]	; 0xa4
   18f18:	b	18f7c <__assert_fail@plt+0x781c>
   18f1c:	ldr	r6, [sp, #24]
   18f20:	mov	r0, #0
   18f24:	str	r0, [fp, #-196]	; 0xffffff3c
   18f28:	b	187bc <__assert_fail@plt+0x705c>
   18f2c:	ldr	r1, [sp, #108]	; 0x6c
   18f30:	ldr	ip, [sp, #172]	; 0xac
   18f34:	ldrb	r0, [r1, r3]
   18f38:	ubfx	r1, r0, #5, #3
   18f3c:	and	r3, r0, #31
   18f40:	ldr	ip, [ip, r1, lsl #2]
   18f44:	mov	r1, #1
   18f48:	tst	ip, r1, lsl r3
   18f4c:	bne	18f7c <__assert_fail@plt+0x781c>
   18f50:	b	18f60 <__assert_fail@plt+0x7800>
   18f54:	ldrb	r1, [sp, #182]	; 0xb6
   18f58:	cmp	r1, #0
   18f5c:	bne	18fd8 <__assert_fail@plt+0x7878>
   18f60:	mov	r1, #0
   18f64:	cmp	r0, #10
   18f68:	bne	18f7c <__assert_fail@plt+0x781c>
   18f6c:	ldrb	r0, [sp, #181]	; 0xb5
   18f70:	cmp	r0, #0
   18f74:	movwne	r0, #1
   18f78:	lsl	r1, r0, #1
   18f7c:	bfi	r9, r1, #8, #1
   18f80:	ldr	r9, [r2, r9, lsl #2]
   18f84:	b	18810 <__assert_fail@plt+0x70b0>
   18f88:	ldr	r0, [sp, #192]	; 0xc0
   18f8c:	and	r0, r0, #2
   18f90:	eor	r3, r0, #10
   18f94:	b	189c0 <__assert_fail@plt+0x7260>
   18f98:	ldr	r5, [sp, #12]
   18f9c:	str	r0, [fp, #-48]	; 0xffffffd0
   18fa0:	ldr	r6, [sp, #24]
   18fa4:	str	r0, [fp, #-196]	; 0xffffff3c
   18fa8:	mov	r9, #0
   18fac:	b	18810 <__assert_fail@plt+0x70b0>
   18fb0:	mov	r0, r4
   18fb4:	bl	1164c <iswalnum@plt>
   18fb8:	mov	r3, #1
   18fbc:	cmp	r4, #95	; 0x5f
   18fc0:	beq	189c0 <__assert_fail@plt+0x7260>
   18fc4:	cmp	r0, #0
   18fc8:	beq	189a4 <__assert_fail@plt+0x7244>
   18fcc:	b	189c0 <__assert_fail@plt+0x7260>
   18fd0:	mov	r1, #10
   18fd4:	b	18f7c <__assert_fail@plt+0x781c>
   18fd8:	str	r5, [sp, #12]
   18fdc:	str	r2, [sp, #24]
   18fe0:	mov	r5, r0
   18fe4:	bl	1164c <iswalnum@plt>
   18fe8:	mov	r1, #1
   18fec:	cmp	r5, #95	; 0x5f
   18ff0:	beq	19010 <__assert_fail@plt+0x78b0>
   18ff4:	mov	r3, r5
   18ff8:	ldr	r5, [sp, #12]
   18ffc:	ldr	r2, [sp, #24]
   19000:	cmp	r0, #0
   19004:	mov	r0, r3
   19008:	beq	18f60 <__assert_fail@plt+0x7800>
   1900c:	b	18f7c <__assert_fail@plt+0x781c>
   19010:	ldr	r5, [sp, #12]
   19014:	ldr	r2, [sp, #24]
   19018:	b	18f7c <__assert_fail@plt+0x781c>
   1901c:	cmp	r8, #0
   19020:	beq	19030 <__assert_fail@plt+0x78d0>
   19024:	ldr	r0, [r8]
   19028:	add	r0, r0, r5
   1902c:	str	r0, [r8]
   19030:	ldr	r8, [sp, #60]	; 0x3c
   19034:	ldr	r4, [sp, #80]	; 0x50
   19038:	ldr	r9, [sp, #76]	; 0x4c
   1903c:	cmn	sl, #1
   19040:	beq	199a8 <__assert_fail@plt+0x8248>
   19044:	cmn	sl, #2
   19048:	beq	1a9bc <__assert_fail@plt+0x925c>
   1904c:	ldr	r9, [sp, #52]	; 0x34
   19050:	str	sl, [sp, #196]	; 0xc4
   19054:	ldr	r2, [sp, #84]	; 0x54
   19058:	ldr	lr, [sp, #96]	; 0x60
   1905c:	ldrb	r0, [r9, #28]
   19060:	cmp	r2, #2
   19064:	bcc	19070 <__assert_fail@plt+0x7910>
   19068:	ands	r1, r0, #16
   1906c:	beq	1907c <__assert_fail@plt+0x791c>
   19070:	ldr	r1, [lr, #76]	; 0x4c
   19074:	cmp	r1, #0
   19078:	beq	191dc <__assert_fail@plt+0x7a7c>
   1907c:	ldr	r0, [sp, #204]	; 0xcc
   19080:	cmn	sl, #1
   19084:	ldr	r6, [r0, sl, lsl #2]
   19088:	ble	190c0 <__assert_fail@plt+0x7960>
   1908c:	ldr	r0, [sp, #152]	; 0x98
   19090:	cmp	r0, sl
   19094:	beq	19518 <__assert_fail@plt+0x7db8>
   19098:	ldr	r0, [sp, #184]	; 0xb8
   1909c:	cmp	r0, #2
   190a0:	blt	190d0 <__assert_fail@plt+0x7970>
   190a4:	ldr	r0, [sp, #112]	; 0x70
   190a8:	ldr	r4, [r0, sl, lsl #2]
   190ac:	cmn	r4, #1
   190b0:	bne	19108 <__assert_fail@plt+0x79a8>
   190b4:	sub	sl, sl, #1
   190b8:	cmn	sl, #1
   190bc:	bne	190a8 <__assert_fail@plt+0x7948>
   190c0:	ldr	r3, [sp, #164]	; 0xa4
   190c4:	movw	sl, #65280	; 0xff00
   190c8:	movt	sl, #3
   190cc:	b	19138 <__assert_fail@plt+0x79d8>
   190d0:	ldr	r0, [sp, #108]	; 0x6c
   190d4:	ldr	r1, [sp, #172]	; 0xac
   190d8:	mov	r3, #1
   190dc:	ldrb	r0, [r0, sl]
   190e0:	movw	sl, #65280	; 0xff00
   190e4:	movt	sl, #3
   190e8:	ubfx	r2, r0, #5, #3
   190ec:	ldr	r1, [r1, r2, lsl #2]
   190f0:	and	r2, r0, #31
   190f4:	tst	r1, r3, lsl r2
   190f8:	moveq	r3, #0
   190fc:	cmpeq	r0, #10
   19100:	bne	19138 <__assert_fail@plt+0x79d8>
   19104:	b	19128 <__assert_fail@plt+0x79c8>
   19108:	ldrb	r0, [sp, #182]	; 0xb6
   1910c:	movw	sl, #65280	; 0xff00
   19110:	movt	sl, #3
   19114:	cmp	r0, #0
   19118:	bne	195d0 <__assert_fail@plt+0x7e70>
   1911c:	mov	r3, #0
   19120:	cmp	r4, #10
   19124:	bne	19138 <__assert_fail@plt+0x79d8>
   19128:	ldrb	r0, [sp, #181]	; 0xb5
   1912c:	cmp	r0, #0
   19130:	movwne	r0, #1
   19134:	lsl	r3, r0, #1
   19138:	ldr	r0, [r6, #8]
   1913c:	cmp	r0, #1
   19140:	blt	191cc <__assert_fail@plt+0x7a6c>
   19144:	ldr	r7, [r6, #12]
   19148:	ldr	r6, [sp, #188]	; 0xbc
   1914c:	and	ip, r3, #8
   19150:	and	r2, r3, #2
   19154:	and	r3, r3, #1
   19158:	ldr	r6, [r6]
   1915c:	b	1916c <__assert_fail@plt+0x7a0c>
   19160:	add	r7, r7, #4
   19164:	subs	r0, r0, #1
   19168:	beq	191cc <__assert_fail@plt+0x7a6c>
   1916c:	ldr	r5, [r7]
   19170:	add	r4, r6, r5, lsl #3
   19174:	ldr	r4, [r4, #4]
   19178:	uxtb	r1, r4
   1917c:	cmp	r1, #2
   19180:	bne	19160 <__assert_fail@plt+0x7a00>
   19184:	tst	r4, sl
   19188:	beq	191d0 <__assert_fail@plt+0x7a70>
   1918c:	cmp	r3, #0
   19190:	bne	1919c <__assert_fail@plt+0x7a3c>
   19194:	ands	r1, r4, #1024	; 0x400
   19198:	bne	19160 <__assert_fail@plt+0x7a00>
   1919c:	cmp	r3, #0
   191a0:	andsne	r1, r4, #2048	; 0x800
   191a4:	bne	19160 <__assert_fail@plt+0x7a00>
   191a8:	cmp	r2, #0
   191ac:	bne	191b8 <__assert_fail@plt+0x7a58>
   191b0:	ands	r1, r4, #8192	; 0x2000
   191b4:	bne	19160 <__assert_fail@plt+0x7a00>
   191b8:	cmp	ip, #0
   191bc:	bne	191d0 <__assert_fail@plt+0x7a70>
   191c0:	ands	r1, r4, #32768	; 0x8000
   191c4:	bne	19160 <__assert_fail@plt+0x7a00>
   191c8:	b	191d0 <__assert_fail@plt+0x7a70>
   191cc:	mov	r5, #0
   191d0:	str	r5, [sp, #200]	; 0xc8
   191d4:	ldr	r2, [sp, #84]	; 0x54
   191d8:	ldrb	r0, [r9, #28]
   191dc:	ldr	r4, [sp, #80]	; 0x50
   191e0:	ldr	r9, [sp, #76]	; 0x4c
   191e4:	cmp	r2, #2
   191e8:	bcc	19200 <__assert_fail@plt+0x7aa0>
   191ec:	ands	r0, r0, #16
   191f0:	bne	19200 <__assert_fail@plt+0x7aa0>
   191f4:	ldrb	r0, [lr, #88]	; 0x58
   191f8:	tst	r0, #1
   191fc:	bne	1920c <__assert_fail@plt+0x7aac>
   19200:	ldr	r0, [lr, #76]	; 0x4c
   19204:	cmp	r0, #0
   19208:	beq	19a80 <__assert_fail@plt+0x8320>
   1920c:	ldr	r6, [sp, #196]	; 0xc4
   19210:	cmn	r6, #-1073741823	; 0xc0000001
   19214:	bcs	1a9bc <__assert_fail@plt+0x925c>
   19218:	ldr	r0, [sp, #188]	; 0xbc
   1921c:	ldr	r8, [sp, #200]	; 0xc8
   19220:	str	r0, [sp, #64]	; 0x40
   19224:	mov	r0, #4
   19228:	add	r5, r0, r6, lsl #2
   1922c:	mov	r0, r5
   19230:	bl	2b260 <__assert_fail@plt+0x19b00>
   19234:	mov	r7, r0
   19238:	cmp	r0, #0
   1923c:	beq	1ab44 <__assert_fail@plt+0x93e4>
   19240:	ldr	r0, [sp, #64]	; 0x40
   19244:	ldr	r0, [r0, #76]	; 0x4c
   19248:	cmp	r0, #0
   1924c:	beq	19370 <__assert_fail@plt+0x7c10>
   19250:	mov	r0, r5
   19254:	bl	2b260 <__assert_fail@plt+0x19b00>
   19258:	cmp	r0, #0
   1925c:	beq	1ab44 <__assert_fail@plt+0x93e4>
   19260:	add	r9, r6, #1
   19264:	mov	r1, #0
   19268:	mov	r5, r0
   1926c:	lsl	r2, r9, #2
   19270:	bl	11670 <memset@plt>
   19274:	ldr	r0, [sp, #36]	; 0x24
   19278:	mov	r1, #0
   1927c:	str	r6, [fp, #-180]	; 0xffffff4c
   19280:	str	r8, [fp, #-184]	; 0xffffff48
   19284:	str	r5, [fp, #-188]	; 0xffffff44
   19288:	str	r7, [fp, #-192]	; 0xffffff40
   1928c:	str	r1, [r0]
   19290:	str	r1, [r0, #4]
   19294:	str	r1, [r0, #8]
   19298:	add	r0, sp, #104	; 0x68
   1929c:	sub	r1, fp, #192	; 0xc0
   192a0:	bl	263d0 <__assert_fail@plt+0x14c70>
   192a4:	mov	sl, r0
   192a8:	mov	r0, #0
   192ac:	bl	141b8 <__assert_fail@plt+0x2a58>
   192b0:	cmp	sl, #0
   192b4:	bne	199e0 <__assert_fail@plt+0x8280>
   192b8:	ldr	r0, [r7]
   192bc:	cmp	r0, #0
   192c0:	beq	19774 <__assert_fail@plt+0x8014>
   192c4:	mov	r1, #0
   192c8:	cmp	r6, #0
   192cc:	mov	sl, #0
   192d0:	str	r5, [sp, #20]
   192d4:	str	r7, [sp, #24]
   192d8:	str	r6, [sp, #16]
   192dc:	str	r1, [sp, #12]
   192e0:	bmi	193cc <__assert_fail@plt+0x7c6c>
   192e4:	ldr	r1, [sp, #24]
   192e8:	ldr	r6, [sp, #20]
   192ec:	sub	r7, r9, #1
   192f0:	add	r5, r1, #4
   192f4:	ldr	r2, [r6]
   192f8:	cmp	r0, #0
   192fc:	beq	19354 <__assert_fail@plt+0x7bf4>
   19300:	cmp	r2, #0
   19304:	beq	19358 <__assert_fail@plt+0x7bf8>
   19308:	sub	r4, fp, #48	; 0x30
   1930c:	add	r1, r0, #4
   19310:	add	r2, r2, #4
   19314:	mov	r0, r4
   19318:	bl	2337c <__assert_fail@plt+0x11c1c>
   1931c:	cmp	r0, #0
   19320:	str	r0, [fp, #-196]	; 0xffffff3c
   19324:	bne	193f0 <__assert_fail@plt+0x7c90>
   19328:	ldr	r1, [sp, #64]	; 0x40
   1932c:	sub	r0, fp, #196	; 0xc4
   19330:	mov	r2, r4
   19334:	bl	24a10 <__assert_fail@plt+0x132b0>
   19338:	str	r0, [r5, #-4]
   1933c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19340:	bl	141b8 <__assert_fail@plt+0x2a58>
   19344:	ldr	sl, [fp, #-196]	; 0xffffff3c
   19348:	cmp	sl, #0
   1934c:	beq	19358 <__assert_fail@plt+0x7bf8>
   19350:	b	193cc <__assert_fail@plt+0x7c6c>
   19354:	str	r2, [r5, #-4]
   19358:	cmp	r7, #0
   1935c:	beq	193c8 <__assert_fail@plt+0x7c68>
   19360:	ldr	r0, [r5], #4
   19364:	add	r6, r6, #4
   19368:	sub	r7, r7, #1
   1936c:	b	192f4 <__assert_fail@plt+0x7b94>
   19370:	ldr	r0, [sp, #36]	; 0x24
   19374:	mov	r1, #0
   19378:	str	r6, [fp, #-180]	; 0xffffff4c
   1937c:	str	r8, [fp, #-184]	; 0xffffff48
   19380:	str	r1, [fp, #-188]	; 0xffffff44
   19384:	str	r7, [fp, #-192]	; 0xffffff40
   19388:	str	r1, [r0]
   1938c:	str	r1, [r0, #4]
   19390:	str	r1, [r0, #8]
   19394:	add	r0, sp, #104	; 0x68
   19398:	sub	r1, fp, #192	; 0xc0
   1939c:	bl	263d0 <__assert_fail@plt+0x14c70>
   193a0:	mov	sl, r0
   193a4:	mov	r0, #0
   193a8:	bl	141b8 <__assert_fail@plt+0x2a58>
   193ac:	cmp	sl, #0
   193b0:	bne	195c4 <__assert_fail@plt+0x7e64>
   193b4:	ldr	r0, [r7]
   193b8:	mov	r5, #0
   193bc:	cmp	r0, #0
   193c0:	beq	19994 <__assert_fail@plt+0x8234>
   193c4:	b	19a58 <__assert_fail@plt+0x82f8>
   193c8:	mov	sl, #0
   193cc:	ldr	r0, [sp, #20]
   193d0:	bl	141b8 <__assert_fail@plt+0x2a58>
   193d4:	ldr	r4, [sp, #80]	; 0x50
   193d8:	ldr	r9, [sp, #76]	; 0x4c
   193dc:	ldr	r7, [sp, #24]
   193e0:	ldr	r6, [sp, #16]
   193e4:	cmp	sl, #0
   193e8:	beq	19a58 <__assert_fail@plt+0x82f8>
   193ec:	b	199ec <__assert_fail@plt+0x828c>
   193f0:	mov	sl, r0
   193f4:	b	193cc <__assert_fail@plt+0x7c6c>
   193f8:	sxtb	r0, r0
   193fc:	cmn	r0, #1
   19400:	ble	19528 <__assert_fail@plt+0x7dc8>
   19404:	mov	r0, #1
   19408:	mov	sl, r5
   1940c:	str	r0, [sp, #64]	; 0x40
   19410:	ldr	r0, [sp, #44]	; 0x2c
   19414:	cmp	r0, #0
   19418:	bne	18744 <__assert_fail@plt+0x6fe4>
   1941c:	mov	sl, r5
   19420:	b	19034 <__assert_fail@plt+0x78d4>
   19424:	ldr	r0, [r9, #8]
   19428:	str	r5, [sp, #12]
   1942c:	cmp	r0, #1
   19430:	blt	194fc <__assert_fail@plt+0x7d9c>
   19434:	ldr	r4, [sp, #188]	; 0xbc
   19438:	mov	r6, #0
   1943c:	b	19464 <__assert_fail@plt+0x7d04>
   19440:	add	r1, r1, #1
   19444:	str	r5, [r0, #4]
   19448:	str	r1, [sp, #228]	; 0xe4
   1944c:	mov	r1, #0
   19450:	str	r1, [r0]
   19454:	ldr	r0, [r9, #8]
   19458:	add	r6, r6, #1
   1945c:	cmp	r6, r0
   19460:	bge	194fc <__assert_fail@plt+0x7d9c>
   19464:	ldr	r1, [r9, #12]
   19468:	ldr	r5, [r1, r6, lsl #2]
   1946c:	ldr	r1, [r4]
   19470:	add	r2, r1, r5, lsl #3
   19474:	ldrb	r2, [r2, #4]
   19478:	cmp	r2, #8
   1947c:	bne	19458 <__assert_fail@plt+0x7cf8>
   19480:	ldr	r1, [r1, r5, lsl #3]
   19484:	cmp	r1, #31
   19488:	bgt	19458 <__assert_fail@plt+0x7cf8>
   1948c:	ldr	r2, [r4, #80]	; 0x50
   19490:	mov	r3, #1
   19494:	tst	r2, r3, lsl r1
   19498:	beq	19458 <__assert_fail@plt+0x7cf8>
   1949c:	ldr	r0, [sp, #228]	; 0xe4
   194a0:	ldr	r7, [sp, #232]	; 0xe8
   194a4:	cmp	r0, r7
   194a8:	beq	194d8 <__assert_fail@plt+0x7d78>
   194ac:	mov	r0, #1
   194b0:	mov	r1, #24
   194b4:	bl	2b20c <__assert_fail@plt+0x19aac>
   194b8:	ldr	r1, [sp, #228]	; 0xe4
   194bc:	ldr	r2, [sp, #236]	; 0xec
   194c0:	str	r0, [r2, r1, lsl #2]
   194c4:	ldr	r0, [sp, #236]	; 0xec
   194c8:	ldr	r0, [r0, r1, lsl #2]
   194cc:	cmp	r0, #0
   194d0:	bne	19440 <__assert_fail@plt+0x7ce0>
   194d4:	b	19a20 <__assert_fail@plt+0x82c0>
   194d8:	ldr	r0, [sp, #236]	; 0xec
   194dc:	lsl	r1, r7, #3
   194e0:	bl	2b290 <__assert_fail@plt+0x19b30>
   194e4:	cmp	r0, #0
   194e8:	beq	19a20 <__assert_fail@plt+0x82c0>
   194ec:	str	r0, [sp, #236]	; 0xec
   194f0:	lsl	r0, r7, #1
   194f4:	str	r0, [sp, #232]	; 0xe8
   194f8:	b	194ac <__assert_fail@plt+0x7d4c>
   194fc:	mov	r6, #0
   19500:	str	r6, [fp, #-196]	; 0xffffff3c
   19504:	ldrb	r0, [r9, #52]	; 0x34
   19508:	tst	r0, #64	; 0x40
   1950c:	bne	19570 <__assert_fail@plt+0x7e10>
   19510:	ldr	r5, [sp, #12]
   19514:	b	1872c <__assert_fail@plt+0x6fcc>
   19518:	ldr	r0, [sp, #192]	; 0xc0
   1951c:	and	r0, r0, #2
   19520:	eor	r3, r0, #10
   19524:	b	190c4 <__assert_fail@plt+0x7964>
   19528:	cmn	r5, #1
   1952c:	ble	19568 <__assert_fail@plt+0x7e08>
   19530:	ldr	r0, [sp, #152]	; 0x98
   19534:	cmp	r0, r5
   19538:	beq	19a28 <__assert_fail@plt+0x82c8>
   1953c:	ldr	r0, [sp, #184]	; 0xb8
   19540:	cmp	r0, #2
   19544:	blt	19594 <__assert_fail@plt+0x7e34>
   19548:	ldr	r0, [sp, #112]	; 0x70
   1954c:	mov	r1, r5
   19550:	ldr	r4, [r0, r1, lsl #2]
   19554:	cmn	r4, #1
   19558:	bne	19618 <__assert_fail@plt+0x7eb8>
   1955c:	sub	r1, r1, #1
   19560:	cmn	r1, #1
   19564:	bne	19550 <__assert_fail@plt+0x7df0>
   19568:	ldr	r3, [sp, #164]	; 0xa4
   1956c:	b	19640 <__assert_fail@plt+0x7ee0>
   19570:	add	r1, r9, #4
   19574:	add	r0, sp, #104	; 0x68
   19578:	bl	225f0 <__assert_fail@plt+0x10e90>
   1957c:	ldr	r5, [sp, #12]
   19580:	cmp	r0, #0
   19584:	str	r0, [fp, #-196]	; 0xffffff3c
   19588:	beq	1872c <__assert_fail@plt+0x6fcc>
   1958c:	mov	sl, r0
   19590:	b	19034 <__assert_fail@plt+0x78d4>
   19594:	ldr	r0, [sp, #108]	; 0x6c
   19598:	ldr	r1, [sp, #172]	; 0xac
   1959c:	mov	r3, #1
   195a0:	ldrb	r0, [r0, r5]
   195a4:	ubfx	r2, r0, #5, #3
   195a8:	ldr	r1, [r1, r2, lsl #2]
   195ac:	and	r2, r0, #31
   195b0:	tst	r1, r3, lsl r2
   195b4:	moveq	r3, #0
   195b8:	cmpeq	r0, #10
   195bc:	bne	19640 <__assert_fail@plt+0x7ee0>
   195c0:	b	19630 <__assert_fail@plt+0x7ed0>
   195c4:	mov	r0, #0
   195c8:	str	r0, [sp, #12]
   195cc:	b	199ec <__assert_fail@plt+0x828c>
   195d0:	mov	r0, r4
   195d4:	mov	r5, lr
   195d8:	bl	1164c <iswalnum@plt>
   195dc:	mov	r3, #1
   195e0:	cmp	r4, #95	; 0x5f
   195e4:	beq	19a18 <__assert_fail@plt+0x82b8>
   195e8:	cmp	r0, #0
   195ec:	mov	lr, r5
   195f0:	beq	1911c <__assert_fail@plt+0x79bc>
   195f4:	b	19138 <__assert_fail@plt+0x79d8>
   195f8:	mov	r0, r6
   195fc:	bl	1164c <iswalnum@plt>
   19600:	ldr	r1, [sp, #48]	; 0x30
   19604:	cmp	r6, #95	; 0x5f
   19608:	beq	186fc <__assert_fail@plt+0x6f9c>
   1960c:	cmp	r0, #0
   19610:	beq	18670 <__assert_fail@plt+0x6f10>
   19614:	b	186fc <__assert_fail@plt+0x6f9c>
   19618:	ldrb	r0, [sp, #182]	; 0xb6
   1961c:	cmp	r0, #0
   19620:	bne	19a38 <__assert_fail@plt+0x82d8>
   19624:	mov	r3, #0
   19628:	cmp	r4, #10
   1962c:	bne	19640 <__assert_fail@plt+0x7ee0>
   19630:	ldrb	r0, [sp, #181]	; 0xb5
   19634:	cmp	r0, #0
   19638:	movwne	r0, #1
   1963c:	lsl	r3, r0, #1
   19640:	ldr	r0, [r9, #8]
   19644:	cmp	r0, #1
   19648:	blt	1873c <__assert_fail@plt+0x6fdc>
   1964c:	str	r6, [sp, #24]
   19650:	ldr	r6, [sp, #188]	; 0xbc
   19654:	ldr	r7, [r9, #12]
   19658:	mov	ip, r5
   1965c:	and	r1, r3, #8
   19660:	and	r2, r3, #2
   19664:	and	r3, r3, #1
   19668:	ldr	r6, [r6]
   1966c:	b	1967c <__assert_fail@plt+0x7f1c>
   19670:	add	r7, r7, #4
   19674:	subs	r0, r0, #1
   19678:	beq	1971c <__assert_fail@plt+0x7fbc>
   1967c:	ldr	r4, [r7]
   19680:	add	r5, r6, r4, lsl #3
   19684:	mov	lr, r4
   19688:	ldr	r5, [r5, #4]
   1968c:	uxtb	r4, r5
   19690:	cmp	r4, #2
   19694:	bne	19670 <__assert_fail@plt+0x7f10>
   19698:	movw	r4, #65280	; 0xff00
   1969c:	movt	r4, #3
   196a0:	tst	r5, r4
   196a4:	beq	196e4 <__assert_fail@plt+0x7f84>
   196a8:	cmp	r3, #0
   196ac:	bne	196b8 <__assert_fail@plt+0x7f58>
   196b0:	ands	r4, r5, #1024	; 0x400
   196b4:	bne	19670 <__assert_fail@plt+0x7f10>
   196b8:	cmp	r3, #0
   196bc:	andsne	r4, r5, #2048	; 0x800
   196c0:	bne	19670 <__assert_fail@plt+0x7f10>
   196c4:	cmp	r2, #0
   196c8:	bne	196d4 <__assert_fail@plt+0x7f74>
   196cc:	ands	r4, r5, #8192	; 0x2000
   196d0:	bne	19670 <__assert_fail@plt+0x7f10>
   196d4:	cmp	r1, #0
   196d8:	bne	196e4 <__assert_fail@plt+0x7f84>
   196dc:	ands	r5, r5, #32768	; 0x8000
   196e0:	bne	19670 <__assert_fail@plt+0x7f10>
   196e4:	ldr	r1, [sp, #44]	; 0x2c
   196e8:	clz	r0, lr
   196ec:	ldr	r6, [sp, #24]
   196f0:	cmp	lr, #0
   196f4:	mov	sl, ip
   196f8:	mov	r5, ip
   196fc:	lsr	r0, r0, #5
   19700:	movwne	lr, #1
   19704:	mvneq	sl, #0
   19708:	str	lr, [sp, #64]	; 0x40
   1970c:	orr	r0, r1, r0
   19710:	cmp	r0, #0
   19714:	bne	18744 <__assert_fail@plt+0x6fe4>
   19718:	b	1941c <__assert_fail@plt+0x7cbc>
   1971c:	ldr	r6, [sp, #24]
   19720:	mov	r0, #0
   19724:	mov	r5, ip
   19728:	b	18740 <__assert_fail@plt+0x6fe0>
   1972c:	ldr	r3, [sp, #164]	; 0xa4
   19730:	movw	lr, #65280	; 0xff00
   19734:	movt	lr, #3
   19738:	b	19884 <__assert_fail@plt+0x8124>
   1973c:	ldr	r0, [sp, #192]	; 0xc0
   19740:	and	r0, r0, #2
   19744:	eor	r3, r0, #10
   19748:	b	19884 <__assert_fail@plt+0x8124>
   1974c:	mov	r0, r7
   19750:	bl	1164c <iswalnum@plt>
   19754:	mov	r3, #1
   19758:	cmp	r7, #95	; 0x5f
   1975c:	beq	19730 <__assert_fail@plt+0x7fd0>
   19760:	movw	lr, #65280	; 0xff00
   19764:	cmp	r0, #0
   19768:	movt	lr, #3
   1976c:	beq	19868 <__assert_fail@plt+0x8108>
   19770:	b	19884 <__assert_fail@plt+0x8124>
   19774:	ldr	r1, [r5]
   19778:	cmp	r1, #0
   1977c:	bne	192c4 <__assert_fail@plt+0x7b64>
   19780:	cmp	r6, #1
   19784:	blt	1998c <__assert_fail@plt+0x822c>
   19788:	ldr	r0, [sp, #204]	; 0xcc
   1978c:	lsl	r4, r6, #2
   19790:	mov	r9, r6
   19794:	sub	r0, r0, #4
   19798:	b	197b0 <__assert_fail@plt+0x8050>
   1979c:	sub	r9, r9, #1
   197a0:	sub	r4, r4, #4
   197a4:	add	r1, r9, #1
   197a8:	cmp	r1, #2
   197ac:	blt	1998c <__assert_fail@plt+0x822c>
   197b0:	ldr	r6, [r0, r9, lsl #2]
   197b4:	cmp	r6, #0
   197b8:	beq	1979c <__assert_fail@plt+0x803c>
   197bc:	ldrb	r1, [r6, #52]	; 0x34
   197c0:	tst	r1, #16
   197c4:	beq	1979c <__assert_fail@plt+0x803c>
   197c8:	sub	sl, r9, #1
   197cc:	cmp	r9, #0
   197d0:	str	r7, [sp, #24]
   197d4:	str	r5, [sp, #20]
   197d8:	ble	1972c <__assert_fail@plt+0x7fcc>
   197dc:	ldr	r0, [sp, #152]	; 0x98
   197e0:	movw	lr, #65280	; 0xff00
   197e4:	movt	lr, #3
   197e8:	add	r0, r0, #1
   197ec:	cmp	r0, r9
   197f0:	beq	1973c <__assert_fail@plt+0x7fdc>
   197f4:	ldr	r0, [sp, #184]	; 0xb8
   197f8:	cmp	r0, #2
   197fc:	blt	19828 <__assert_fail@plt+0x80c8>
   19800:	ldr	r0, [sp, #112]	; 0x70
   19804:	mov	r1, sl
   19808:	ldr	r7, [r0, r1, lsl #2]
   1980c:	cmn	r7, #1
   19810:	bne	1985c <__assert_fail@plt+0x80fc>
   19814:	sub	r1, r1, #1
   19818:	cmn	r1, #1
   1981c:	bne	19808 <__assert_fail@plt+0x80a8>
   19820:	ldr	r3, [sp, #164]	; 0xa4
   19824:	b	19884 <__assert_fail@plt+0x8124>
   19828:	ldr	r0, [sp, #108]	; 0x6c
   1982c:	ldr	r1, [sp, #172]	; 0xac
   19830:	mov	r3, #1
   19834:	add	r0, r0, r9
   19838:	ldrb	r0, [r0, #-1]
   1983c:	ubfx	r2, r0, #5, #3
   19840:	ldr	r1, [r1, r2, lsl #2]
   19844:	and	r2, r0, #31
   19848:	tst	r1, r3, lsl r2
   1984c:	moveq	r3, #0
   19850:	cmpeq	r0, #10
   19854:	bne	19884 <__assert_fail@plt+0x8124>
   19858:	b	19874 <__assert_fail@plt+0x8114>
   1985c:	ldrb	r0, [sp, #182]	; 0xb6
   19860:	cmp	r0, #0
   19864:	bne	1974c <__assert_fail@plt+0x7fec>
   19868:	mov	r3, #0
   1986c:	cmp	r7, #10
   19870:	bne	19884 <__assert_fail@plt+0x8124>
   19874:	ldrb	r0, [sp, #181]	; 0xb5
   19878:	cmp	r0, #0
   1987c:	movwne	r0, #1
   19880:	lsl	r3, r0, #1
   19884:	ldr	r0, [r6, #8]
   19888:	cmp	r0, #1
   1988c:	blt	19918 <__assert_fail@plt+0x81b8>
   19890:	ldr	r7, [r6, #12]
   19894:	ldr	r6, [sp, #188]	; 0xbc
   19898:	and	ip, r3, #8
   1989c:	and	r2, r3, #2
   198a0:	and	r3, r3, #1
   198a4:	ldr	r6, [r6]
   198a8:	b	198b8 <__assert_fail@plt+0x8158>
   198ac:	add	r7, r7, #4
   198b0:	subs	r0, r0, #1
   198b4:	beq	19918 <__assert_fail@plt+0x81b8>
   198b8:	ldr	r8, [r7]
   198bc:	add	r5, r6, r8, lsl #3
   198c0:	ldr	r5, [r5, #4]
   198c4:	uxtb	r1, r5
   198c8:	cmp	r1, #2
   198cc:	bne	198ac <__assert_fail@plt+0x814c>
   198d0:	tst	r5, lr
   198d4:	beq	1991c <__assert_fail@plt+0x81bc>
   198d8:	cmp	r3, #0
   198dc:	bne	198e8 <__assert_fail@plt+0x8188>
   198e0:	ands	r1, r5, #1024	; 0x400
   198e4:	bne	198ac <__assert_fail@plt+0x814c>
   198e8:	cmp	r3, #0
   198ec:	andsne	r1, r5, #2048	; 0x800
   198f0:	bne	198ac <__assert_fail@plt+0x814c>
   198f4:	cmp	r2, #0
   198f8:	bne	19904 <__assert_fail@plt+0x81a4>
   198fc:	ands	r1, r5, #8192	; 0x2000
   19900:	bne	198ac <__assert_fail@plt+0x814c>
   19904:	cmp	ip, #0
   19908:	bne	1991c <__assert_fail@plt+0x81bc>
   1990c:	ands	r1, r5, #32768	; 0x8000
   19910:	bne	198ac <__assert_fail@plt+0x814c>
   19914:	b	1991c <__assert_fail@plt+0x81bc>
   19918:	mov	r8, #0
   1991c:	ldr	r5, [sp, #20]
   19920:	mov	r1, #0
   19924:	mov	r2, r4
   19928:	mov	r0, r5
   1992c:	bl	11670 <memset@plt>
   19930:	sub	r0, fp, #188	; 0xbc
   19934:	ldr	r7, [sp, #24]
   19938:	mov	r1, #0
   1993c:	mov	r6, sl
   19940:	stm	r0, {r5, r8, sl}
   19944:	ldr	r0, [sp, #36]	; 0x24
   19948:	str	r7, [fp, #-192]	; 0xffffff40
   1994c:	str	r1, [r0]
   19950:	str	r1, [r0, #4]
   19954:	str	r1, [r0, #8]
   19958:	add	r0, sp, #104	; 0x68
   1995c:	sub	r1, fp, #192	; 0xc0
   19960:	bl	263d0 <__assert_fail@plt+0x14c70>
   19964:	mov	sl, r0
   19968:	mov	r0, #0
   1996c:	bl	141b8 <__assert_fail@plt+0x2a58>
   19970:	cmp	sl, #0
   19974:	bne	199e0 <__assert_fail@plt+0x8280>
   19978:	ldr	r0, [r7]
   1997c:	cmp	r0, #0
   19980:	beq	19774 <__assert_fail@plt+0x8014>
   19984:	sub	r6, r9, #1
   19988:	b	192c4 <__assert_fail@plt+0x7b64>
   1998c:	ldr	r4, [sp, #80]	; 0x50
   19990:	ldr	r9, [sp, #76]	; 0x4c
   19994:	mov	r0, r7
   19998:	bl	141b8 <__assert_fail@plt+0x2a58>
   1999c:	mov	r0, r5
   199a0:	bl	141b8 <__assert_fail@plt+0x2a58>
   199a4:	ldr	r8, [sp, #60]	; 0x3c
   199a8:	add	r0, sp, #104	; 0x68
   199ac:	bl	22440 <__assert_fail@plt+0x10ce0>
   199b0:	ldr	r0, [fp, #-200]	; 0xffffff38
   199b4:	mov	sl, #1
   199b8:	add	r6, r0, r8
   199bc:	cmp	r6, r9
   199c0:	str	r6, [fp, #-200]	; 0xffffff38
   199c4:	blt	1aad4 <__assert_fail@plt+0x9374>
   199c8:	ldr	r7, [sp, #100]	; 0x64
   199cc:	ldr	r5, [sp, #92]	; 0x5c
   199d0:	ldr	r2, [sp, #88]	; 0x58
   199d4:	cmp	r4, r6
   199d8:	bge	183ec <__assert_fail@plt+0x6c8c>
   199dc:	b	1aad4 <__assert_fail@plt+0x9374>
   199e0:	ldr	r4, [sp, #80]	; 0x50
   199e4:	ldr	r9, [sp, #76]	; 0x4c
   199e8:	str	r5, [sp, #12]
   199ec:	mov	r0, r7
   199f0:	bl	141b8 <__assert_fail@plt+0x2a58>
   199f4:	ldr	r0, [sp, #12]
   199f8:	bl	141b8 <__assert_fail@plt+0x2a58>
   199fc:	ldr	r8, [sp, #60]	; 0x3c
   19a00:	ldr	lr, [sp, #96]	; 0x60
   19a04:	cmp	sl, #0
   19a08:	beq	19a80 <__assert_fail@plt+0x8320>
   19a0c:	cmp	sl, #1
   19a10:	beq	199a8 <__assert_fail@plt+0x8248>
   19a14:	b	1aad4 <__assert_fail@plt+0x9374>
   19a18:	mov	lr, r5
   19a1c:	b	19138 <__assert_fail@plt+0x79d8>
   19a20:	mov	sl, #12
   19a24:	b	1904c <__assert_fail@plt+0x78ec>
   19a28:	ldr	r0, [sp, #192]	; 0xc0
   19a2c:	and	r0, r0, #2
   19a30:	eor	r3, r0, #10
   19a34:	b	19640 <__assert_fail@plt+0x7ee0>
   19a38:	mov	r0, r4
   19a3c:	bl	1164c <iswalnum@plt>
   19a40:	mov	r3, #1
   19a44:	cmp	r4, #95	; 0x5f
   19a48:	beq	19640 <__assert_fail@plt+0x7ee0>
   19a4c:	cmp	r0, #0
   19a50:	beq	19624 <__assert_fail@plt+0x7ec4>
   19a54:	b	19640 <__assert_fail@plt+0x7ee0>
   19a58:	ldr	r0, [sp, #204]	; 0xcc
   19a5c:	bl	141b8 <__assert_fail@plt+0x2a58>
   19a60:	mov	r0, #0
   19a64:	str	r8, [sp, #200]	; 0xc8
   19a68:	str	r7, [sp, #204]	; 0xcc
   19a6c:	str	r6, [sp, #196]	; 0xc4
   19a70:	bl	141b8 <__assert_fail@plt+0x2a58>
   19a74:	mov	r0, #0
   19a78:	bl	141b8 <__assert_fail@plt+0x2a58>
   19a7c:	ldr	lr, [sp, #96]	; 0x60
   19a80:	ldr	r4, [sp, #84]	; 0x54
   19a84:	cmp	r4, #0
   19a88:	beq	1aad0 <__assert_fail@plt+0x9370>
   19a8c:	ldr	r5, [sp, #32]
   19a90:	ldr	r9, [fp, #16]
   19a94:	cmp	r4, #1
   19a98:	beq	19ac0 <__assert_fail@plt+0x8360>
   19a9c:	mvn	r0, r5
   19aa0:	mov	r1, #255	; 0xff
   19aa4:	mov	r6, lr
   19aa8:	add	r0, r0, r9
   19aac:	lsl	r2, r0, #3
   19ab0:	ldr	r0, [fp, #20]
   19ab4:	add	r0, r0, #8
   19ab8:	bl	11670 <memset@plt>
   19abc:	mov	lr, r6
   19ac0:	ldr	r2, [fp, #20]
   19ac4:	cmp	r4, #2
   19ac8:	mov	r0, #0
   19acc:	ldr	r1, [sp, #196]	; 0xc4
   19ad0:	stm	r2, {r0, r1}
   19ad4:	bcc	1a9a0 <__assert_fail@plt+0x9240>
   19ad8:	ldr	r0, [sp, #52]	; 0x34
   19adc:	ldrb	r0, [r0, #28]
   19ae0:	ands	r0, r0, #16
   19ae4:	bne	1a9a0 <__assert_fail@plt+0x9240>
   19ae8:	ldrb	r1, [lr, #88]	; 0x58
   19aec:	mov	r0, #0
   19af0:	tst	r1, #1
   19af4:	mov	r1, #0
   19af8:	beq	19b0c <__assert_fail@plt+0x83ac>
   19afc:	ldr	r2, [lr, #76]	; 0x4c
   19b00:	mov	r1, #0
   19b04:	cmp	r2, #0
   19b08:	movwgt	r1, #1
   19b0c:	ldr	r2, [sp, #52]	; 0x34
   19b10:	cmp	r1, #0
   19b14:	mov	r1, #0
   19b18:	ldr	r7, [r2]
   19b1c:	movw	r2, #51632	; 0xc9b0
   19b20:	movt	r2, #2
   19b24:	vldr	d16, [r2]
   19b28:	ldr	r2, [r2, #8]
   19b2c:	str	r2, [fp, #-40]	; 0xffffffd8
   19b30:	sub	r2, fp, #192	; 0xc0
   19b34:	add	r6, r2, #12
   19b38:	mov	r2, #16
   19b3c:	vstr	d16, [fp, #-48]	; 0xffffffd0
   19b40:	str	r6, [fp, #-184]	; 0xffffff48
   19b44:	str	r2, [fp, #-188]	; 0xffffff44
   19b48:	str	r0, [fp, #-192]	; 0xffffff40
   19b4c:	beq	19b6c <__assert_fail@plt+0x840c>
   19b50:	mov	r0, #48	; 0x30
   19b54:	bl	2b260 <__assert_fail@plt+0x19b00>
   19b58:	cmp	r0, #0
   19b5c:	str	r0, [fp, #-40]	; 0xffffffd8
   19b60:	beq	1a9bc <__assert_fail@plt+0x925c>
   19b64:	ldr	r0, [fp, #-192]	; 0xffffff40
   19b68:	sub	r1, fp, #48	; 0x30
   19b6c:	ldr	sl, [r7, #72]	; 0x48
   19b70:	cmp	r0, r4
   19b74:	str	r1, [sp, #88]	; 0x58
   19b78:	str	r6, [sp, #72]	; 0x48
   19b7c:	str	r7, [sp, #76]	; 0x4c
   19b80:	bcs	19c6c <__assert_fail@plt+0x850c>
   19b84:	sub	r0, fp, #192	; 0xc0
   19b88:	mov	r1, r4
   19b8c:	mov	r2, r6
   19b90:	mov	r3, #8
   19b94:	bl	2b368 <__assert_fail@plt+0x19c08>
   19b98:	cmp	r0, #0
   19b9c:	bne	19c70 <__assert_fail@plt+0x8510>
   19ba0:	ldr	r0, [fp, #-184]	; 0xffffff48
   19ba4:	ldr	r1, [sp, #72]	; 0x48
   19ba8:	cmp	r0, r1
   19bac:	beq	19bb4 <__assert_fail@plt+0x8454>
   19bb0:	bl	141b8 <__assert_fail@plt+0x2a58>
   19bb4:	ldr	r0, [sp, #72]	; 0x48
   19bb8:	mov	sl, #12
   19bbc:	str	r0, [fp, #-184]	; 0xffffff48
   19bc0:	mov	r0, #16
   19bc4:	str	r0, [fp, #-188]	; 0xffffff44
   19bc8:	mov	r0, #0
   19bcc:	str	r0, [fp, #-192]	; 0xffffff40
   19bd0:	ldr	r0, [sp, #88]	; 0x58
   19bd4:	cmp	r0, #0
   19bd8:	beq	1aad4 <__assert_fail@plt+0x9374>
   19bdc:	ldr	r0, [sp, #88]	; 0x58
   19be0:	ldr	r1, [r0]
   19be4:	ldr	r0, [r0, #8]
   19be8:	cmp	r1, #1
   19bec:	blt	1abf0 <__assert_fail@plt+0x9490>
   19bf0:	ldr	r4, [sp, #88]	; 0x58
   19bf4:	mov	r5, #0
   19bf8:	mov	r6, #0
   19bfc:	add	r0, r0, r5
   19c00:	ldr	r0, [r0, #20]
   19c04:	bl	141b8 <__assert_fail@plt+0x2a58>
   19c08:	ldr	r0, [r4, #8]
   19c0c:	add	r0, r0, r5
   19c10:	ldr	r0, [r0, #8]
   19c14:	bl	141b8 <__assert_fail@plt+0x2a58>
   19c18:	ldr	r1, [r4]
   19c1c:	ldr	r0, [r4, #8]
   19c20:	add	r6, r6, #1
   19c24:	add	r5, r5, #24
   19c28:	cmp	r6, r1
   19c2c:	blt	19bfc <__assert_fail@plt+0x849c>
   19c30:	b	1abf0 <__assert_fail@plt+0x9490>
   19c34:	ldr	r1, [r3, #8]
   19c38:	cmp	r1, #0
   19c3c:	beq	19c4c <__assert_fail@plt+0x84ec>
   19c40:	ldrsb	r1, [r4, #28]
   19c44:	cmp	r1, #0
   19c48:	bmi	180b4 <__assert_fail@plt+0x6954>
   19c4c:	mov	r0, #0
   19c50:	cmp	r6, #0
   19c54:	str	r0, [sp, #72]	; 0x48
   19c58:	beq	1a9b4 <__assert_fail@plt+0x9254>
   19c5c:	cmp	ip, #0
   19c60:	mov	r6, #0
   19c64:	bne	1ab28 <__assert_fail@plt+0x93c8>
   19c68:	b	180b8 <__assert_fail@plt+0x6958>
   19c6c:	str	r4, [fp, #-192]	; 0xffffff40
   19c70:	ldr	r6, [fp, #20]
   19c74:	ldr	r0, [fp, #-184]	; 0xffffff48
   19c78:	lsl	r2, r4, #3
   19c7c:	str	r2, [sp, #64]	; 0x40
   19c80:	mov	r1, r6
   19c84:	str	r0, [sp, #68]	; 0x44
   19c88:	bl	11484 <memcpy@plt>
   19c8c:	ldr	r3, [r6]
   19c90:	ldr	r0, [r6, #4]
   19c94:	mov	r6, #0
   19c98:	cmp	r3, r0
   19c9c:	ble	19d44 <__assert_fail@plt+0x85e4>
   19ca0:	mov	r0, r6
   19ca4:	bl	141b8 <__assert_fail@plt+0x2a58>
   19ca8:	ldr	r0, [fp, #-184]	; 0xffffff48
   19cac:	ldr	r6, [sp, #72]	; 0x48
   19cb0:	cmp	r0, r6
   19cb4:	beq	19cbc <__assert_fail@plt+0x855c>
   19cb8:	bl	141b8 <__assert_fail@plt+0x2a58>
   19cbc:	str	r6, [fp, #-184]	; 0xffffff48
   19cc0:	ldr	r6, [sp, #88]	; 0x58
   19cc4:	ldr	lr, [sp, #96]	; 0x60
   19cc8:	mov	r0, #16
   19ccc:	str	r0, [fp, #-188]	; 0xffffff44
   19cd0:	mov	r0, #0
   19cd4:	str	r0, [fp, #-192]	; 0xffffff40
   19cd8:	cmp	r6, #0
   19cdc:	beq	1a9a0 <__assert_fail@plt+0x9240>
   19ce0:	ldr	r1, [r6]
   19ce4:	ldr	r0, [r6, #8]
   19ce8:	mov	r7, lr
   19cec:	cmp	r1, #1
   19cf0:	blt	19d30 <__assert_fail@plt+0x85d0>
   19cf4:	mov	r4, #0
   19cf8:	mov	r5, #0
   19cfc:	add	r0, r0, r4
   19d00:	ldr	r0, [r0, #20]
   19d04:	bl	141b8 <__assert_fail@plt+0x2a58>
   19d08:	ldr	r0, [r6, #8]
   19d0c:	add	r0, r0, r4
   19d10:	ldr	r0, [r0, #8]
   19d14:	bl	141b8 <__assert_fail@plt+0x2a58>
   19d18:	ldr	r1, [r6]
   19d1c:	ldr	r0, [r6, #8]
   19d20:	add	r5, r5, #1
   19d24:	add	r4, r4, #24
   19d28:	cmp	r5, r1
   19d2c:	blt	19cfc <__assert_fail@plt+0x859c>
   19d30:	bl	141b8 <__assert_fail@plt+0x2a58>
   19d34:	ldr	r5, [sp, #32]
   19d38:	ldr	r4, [sp, #84]	; 0x54
   19d3c:	mov	lr, r7
   19d40:	b	1a9a0 <__assert_fail@plt+0x9240>
   19d44:	ldr	r0, [fp, #20]
   19d48:	mov	r8, #1
   19d4c:	mov	ip, #0
   19d50:	mov	r6, #0
   19d54:	mov	lr, #0
   19d58:	add	r0, r0, #4
   19d5c:	str	r0, [sp, #52]	; 0x34
   19d60:	lsl	r0, r4, #4
   19d64:	str	r0, [sp, #44]	; 0x2c
   19d68:	mov	r0, #0
   19d6c:	str	r0, [sp, #60]	; 0x3c
   19d70:	ldr	r0, [sp, #76]	; 0x4c
   19d74:	ldr	r0, [r0]
   19d78:	add	r1, r0, sl, lsl #3
   19d7c:	ldr	r7, [r1, #4]
   19d80:	uxtb	r2, r7
   19d84:	cmp	r2, #9
   19d88:	beq	19db8 <__assert_fail@plt+0x8658>
   19d8c:	cmp	r2, #8
   19d90:	bne	19e40 <__assert_fail@plt+0x86e0>
   19d94:	ldr	r0, [r0, sl, lsl #3]
   19d98:	add	r0, r0, #1
   19d9c:	cmp	r0, r4
   19da0:	bge	19e40 <__assert_fail@plt+0x86e0>
   19da4:	ldr	r1, [fp, #20]
   19da8:	str	r3, [r1, r0, lsl #3]!
   19dac:	mvn	r0, #0
   19db0:	str	r0, [r1, #4]
   19db4:	b	19e40 <__assert_fail@plt+0x86e0>
   19db8:	ldr	r0, [r0, sl, lsl #3]
   19dbc:	add	r0, r0, #1
   19dc0:	cmp	r0, r4
   19dc4:	bge	19e40 <__assert_fail@plt+0x86e0>
   19dc8:	ldr	r1, [fp, #20]
   19dcc:	ldr	r2, [r1, r0, lsl #3]
   19dd0:	cmp	r2, r3
   19dd4:	bge	19de8 <__assert_fail@plt+0x8688>
   19dd8:	add	r0, r1, r0, lsl #3
   19ddc:	str	r3, [r0, #4]
   19de0:	ldr	r0, [sp, #68]	; 0x44
   19de4:	b	19e08 <__assert_fail@plt+0x86a8>
   19de8:	tst	r7, #524288	; 0x80000
   19dec:	beq	19e34 <__assert_fail@plt+0x86d4>
   19df0:	ldr	r1, [sp, #68]	; 0x44
   19df4:	ldr	r1, [r1, r0, lsl #3]
   19df8:	cmn	r1, #1
   19dfc:	beq	19e34 <__assert_fail@plt+0x86d4>
   19e00:	ldr	r0, [fp, #20]
   19e04:	ldr	r1, [sp, #68]	; 0x44
   19e08:	ldr	r2, [sp, #64]	; 0x40
   19e0c:	str	r6, [sp, #48]	; 0x30
   19e10:	mov	r7, r3
   19e14:	mov	r6, ip
   19e18:	str	lr, [sp, #56]	; 0x38
   19e1c:	bl	11484 <memcpy@plt>
   19e20:	mov	ip, r6
   19e24:	ldr	lr, [sp, #56]	; 0x38
   19e28:	ldr	r6, [sp, #48]	; 0x30
   19e2c:	mov	r3, r7
   19e30:	b	19e40 <__assert_fail@plt+0x86e0>
   19e34:	ldr	r1, [fp, #20]
   19e38:	add	r0, r1, r0, lsl #3
   19e3c:	str	r3, [r0, #4]
   19e40:	ldr	r0, [fp, #20]
   19e44:	ldr	r0, [r0, #4]
   19e48:	cmp	r3, r0
   19e4c:	ldreq	r0, [sp, #200]	; 0xc8
   19e50:	cmpeq	sl, r0
   19e54:	beq	19ec0 <__assert_fail@plt+0x8760>
   19e58:	ldr	r0, [sp, #88]	; 0x58
   19e5c:	cmp	r0, #0
   19e60:	beq	19f90 <__assert_fail@plt+0x8830>
   19e64:	cmp	lr, #1
   19e68:	blt	19f90 <__assert_fail@plt+0x8830>
   19e6c:	mov	r0, lr
   19e70:	mov	lr, r6
   19e74:	subs	r1, r0, #1
   19e78:	str	r0, [sp, #56]	; 0x38
   19e7c:	beq	19ea8 <__assert_fail@plt+0x8748>
   19e80:	mov	r0, #0
   19e84:	add	r2, r0, r1
   19e88:	lsr	r6, r2, #1
   19e8c:	ldr	r7, [ip, r6, lsl #2]
   19e90:	cmp	r7, sl
   19e94:	addlt	r0, r8, r2, lsr #1
   19e98:	movge	r1, r6
   19e9c:	cmp	r0, r1
   19ea0:	bcc	19e84 <__assert_fail@plt+0x8724>
   19ea4:	b	19eac <__assert_fail@plt+0x874c>
   19ea8:	mov	r0, #0
   19eac:	ldr	r0, [ip, r0, lsl #2]
   19eb0:	mov	r6, lr
   19eb4:	ldr	lr, [sp, #56]	; 0x38
   19eb8:	cmp	r0, sl
   19ebc:	bne	19f90 <__assert_fail@plt+0x8830>
   19ec0:	ldr	r7, [sp, #88]	; 0x58
   19ec4:	cmp	r7, #0
   19ec8:	beq	1a904 <__assert_fail@plt+0x91a4>
   19ecc:	ldr	r1, [sp, #52]	; 0x34
   19ed0:	mov	r0, r4
   19ed4:	b	19ee4 <__assert_fail@plt+0x8784>
   19ed8:	subs	r0, r0, #1
   19edc:	add	r1, r1, #8
   19ee0:	beq	1a904 <__assert_fail@plt+0x91a4>
   19ee4:	ldr	r2, [r1, #-4]
   19ee8:	cmp	r2, #0
   19eec:	bmi	19ed8 <__assert_fail@plt+0x8778>
   19ef0:	ldr	r2, [r1]
   19ef4:	cmn	r2, #1
   19ef8:	bne	19ed8 <__assert_fail@plt+0x8778>
   19efc:	ldr	r0, [r7]
   19f00:	cmp	r0, #0
   19f04:	beq	1a904 <__assert_fail@plt+0x91a4>
   19f08:	sub	r0, r0, #1
   19f0c:	mov	sl, r4
   19f10:	mov	r9, r6
   19f14:	ldr	r6, [sp, #64]	; 0x40
   19f18:	str	r0, [r7]
   19f1c:	add	r5, r0, r0, lsl #1
   19f20:	ldr	r4, [r7, #8]
   19f24:	mov	r2, r6
   19f28:	ldr	r0, [r4, r5, lsl #3]!
   19f2c:	ldr	r1, [r4, #8]
   19f30:	str	r0, [sp, #80]	; 0x50
   19f34:	ldr	r0, [fp, #20]
   19f38:	bl	11484 <memcpy@plt>
   19f3c:	ldr	r0, [r4, #8]
   19f40:	mov	r2, r6
   19f44:	add	r1, r0, sl, lsl #3
   19f48:	ldr	r0, [sp, #68]	; 0x44
   19f4c:	bl	11484 <memcpy@plt>
   19f50:	mov	r0, r9
   19f54:	bl	141b8 <__assert_fail@plt+0x2a58>
   19f58:	ldr	r0, [r7, #8]
   19f5c:	add	r0, r0, r5, lsl #3
   19f60:	ldr	r0, [r0, #8]
   19f64:	bl	141b8 <__assert_fail@plt+0x2a58>
   19f68:	ldr	r0, [r7, #8]
   19f6c:	ldr	r3, [sp, #80]	; 0x50
   19f70:	add	r0, r0, r5, lsl #3
   19f74:	ldr	r5, [sp, #32]
   19f78:	ldr	r6, [r0, #20]
   19f7c:	ldr	r1, [r0, #12]
   19f80:	ldr	sl, [r0, #4]
   19f84:	ldr	lr, [r0, #16]
   19f88:	mov	ip, r6
   19f8c:	str	r1, [sp, #60]	; 0x3c
   19f90:	ldr	r4, [sp, #188]	; 0xbc
   19f94:	str	r3, [sp, #80]	; 0x50
   19f98:	ldr	r0, [r4]
   19f9c:	add	r1, r0, sl, lsl #3
   19fa0:	ldr	r1, [r1, #4]
   19fa4:	tst	r1, #8
   19fa8:	bne	1a040 <__assert_fail@plt+0x88e0>
   19fac:	tst	r1, #1048576	; 0x100000
   19fb0:	bne	1a0b8 <__assert_fail@plt+0x8958>
   19fb4:	uxtb	r1, r1
   19fb8:	cmp	r1, #4
   19fbc:	bne	1a0e0 <__assert_fail@plt+0x8980>
   19fc0:	ldr	r0, [r0, sl, lsl #3]
   19fc4:	ldr	r1, [sp, #84]	; 0x54
   19fc8:	mov	r7, #0
   19fcc:	add	r0, r0, #1
   19fd0:	cmp	r0, r1
   19fd4:	bge	19fe8 <__assert_fail@plt+0x8888>
   19fd8:	ldr	r1, [fp, #20]
   19fdc:	ldr	r2, [r1, r0, lsl #3]!
   19fe0:	ldr	r1, [r1, #4]
   19fe4:	sub	r7, r1, r2
   19fe8:	ldr	r1, [sp, #88]	; 0x58
   19fec:	cmp	r1, #0
   19ff0:	beq	1a3c8 <__assert_fail@plt+0x8c68>
   19ff4:	ldr	r1, [sp, #84]	; 0x54
   19ff8:	cmp	r0, r1
   19ffc:	bge	1a038 <__assert_fail@plt+0x88d8>
   1a000:	ldr	r2, [fp, #20]
   1a004:	ldr	r1, [r2, r0, lsl #3]
   1a008:	cmn	r1, #1
   1a00c:	beq	1a038 <__assert_fail@plt+0x88d8>
   1a010:	add	r0, r2, r0, lsl #3
   1a014:	ldr	r0, [r0, #4]
   1a018:	cmn	r0, #1
   1a01c:	beq	1a038 <__assert_fail@plt+0x88d8>
   1a020:	cmp	r7, #0
   1a024:	beq	1a3ec <__assert_fail@plt+0x8c8c>
   1a028:	ldr	r0, [sp, #132]	; 0x84
   1a02c:	sub	r0, r0, r3
   1a030:	cmp	r0, r7
   1a034:	bge	1a64c <__assert_fail@plt+0x8eec>
   1a038:	ldr	r7, [sp, #88]	; 0x58
   1a03c:	b	1a2c4 <__assert_fail@plt+0x8b64>
   1a040:	ldr	r0, [sp, #204]	; 0xcc
   1a044:	ldr	r4, [r4, #20]
   1a048:	cmp	lr, #1
   1a04c:	ldr	r0, [r0, r3, lsl #2]
   1a050:	str	r0, [sp, #100]	; 0x64
   1a054:	blt	1a098 <__assert_fail@plt+0x8938>
   1a058:	mov	r0, #0
   1a05c:	subs	r1, lr, #1
   1a060:	beq	1a084 <__assert_fail@plt+0x8924>
   1a064:	add	r2, r0, r1
   1a068:	lsr	r3, r2, #1
   1a06c:	ldr	r7, [ip, r3, lsl #2]
   1a070:	cmp	r7, sl
   1a074:	addlt	r0, r8, r2, lsr #1
   1a078:	movge	r1, r3
   1a07c:	cmp	r0, r1
   1a080:	bcc	1a064 <__assert_fail@plt+0x8904>
   1a084:	ldr	r0, [ip, r0, lsl #2]
   1a088:	cmp	r0, sl
   1a08c:	bne	1a098 <__assert_fail@plt+0x8938>
   1a090:	str	lr, [sp, #56]	; 0x38
   1a094:	b	1a1d8 <__assert_fail@plt+0x8a78>
   1a098:	ldr	r0, [sp, #60]	; 0x3c
   1a09c:	cmp	r0, #0
   1a0a0:	beq	1a1ac <__assert_fail@plt+0x8a4c>
   1a0a4:	cmp	lr, #0
   1a0a8:	bne	1a6a4 <__assert_fail@plt+0x8f44>
   1a0ac:	mov	r0, #1
   1a0b0:	str	sl, [ip]
   1a0b4:	b	1a1d4 <__assert_fail@plt+0x8a74>
   1a0b8:	mov	r0, r4
   1a0bc:	mov	r1, sl
   1a0c0:	add	r2, sp, #104	; 0x68
   1a0c4:	mov	r9, ip
   1a0c8:	bl	24d28 <__assert_fail@plt+0x135c8>
   1a0cc:	ldr	r3, [sp, #80]	; 0x50
   1a0d0:	mov	r1, r0
   1a0d4:	cmp	r1, #0
   1a0d8:	mov	ip, r9
   1a0dc:	bne	1a114 <__assert_fail@plt+0x89b4>
   1a0e0:	ldr	r0, [r4]
   1a0e4:	mov	r2, r3
   1a0e8:	mov	r7, r6
   1a0ec:	mov	r6, ip
   1a0f0:	add	r1, r0, sl, lsl #3
   1a0f4:	add	r0, sp, #104	; 0x68
   1a0f8:	bl	2508c <__assert_fail@plt+0x1392c>
   1a0fc:	ldr	r3, [sp, #80]	; 0x50
   1a100:	mov	ip, r6
   1a104:	mov	r6, r7
   1a108:	mov	r1, #1
   1a10c:	cmp	r0, #0
   1a110:	beq	1a2b8 <__assert_fail@plt+0x8b58>
   1a114:	ldr	r0, [r4, #12]
   1a118:	ldr	r7, [sp, #88]	; 0x58
   1a11c:	add	r3, r1, r3
   1a120:	ldr	sl, [r0, sl, lsl #2]
   1a124:	cmp	r7, #0
   1a128:	beq	1a360 <__assert_fail@plt+0x8c00>
   1a12c:	ldr	r0, [sp, #196]	; 0xc4
   1a130:	cmp	r3, r0
   1a134:	bgt	1a2c4 <__assert_fail@plt+0x8b64>
   1a138:	ldr	r0, [sp, #204]	; 0xcc
   1a13c:	ldr	r0, [r0, r3, lsl #2]
   1a140:	cmp	r0, #0
   1a144:	beq	1a2c4 <__assert_fail@plt+0x8b64>
   1a148:	ldr	r1, [r0, #8]
   1a14c:	cmp	r1, #1
   1a150:	blt	1a2c4 <__assert_fail@plt+0x8b64>
   1a154:	ldr	r0, [r0, #12]
   1a158:	mov	lr, ip
   1a15c:	mov	ip, r6
   1a160:	subs	r1, r1, #1
   1a164:	mov	r2, #0
   1a168:	beq	1a190 <__assert_fail@plt+0x8a30>
   1a16c:	mov	r2, #0
   1a170:	add	r4, r2, r1
   1a174:	lsr	r7, r4, #1
   1a178:	ldr	r6, [r0, r7, lsl #2]
   1a17c:	cmp	r6, sl
   1a180:	addlt	r2, r8, r4, lsr #1
   1a184:	movge	r1, r7
   1a188:	cmp	r2, r1
   1a18c:	bcc	1a170 <__assert_fail@plt+0x8a10>
   1a190:	ldr	r0, [r0, r2, lsl #2]
   1a194:	mov	r6, ip
   1a198:	mov	ip, lr
   1a19c:	mov	lr, #0
   1a1a0:	cmp	r0, sl
   1a1a4:	beq	1a568 <__assert_fail@plt+0x8e08>
   1a1a8:	b	1a2b8 <__assert_fail@plt+0x8b58>
   1a1ac:	mov	r0, #4
   1a1b0:	bl	2b260 <__assert_fail@plt+0x19b00>
   1a1b4:	cmp	r0, #0
   1a1b8:	beq	1ac98 <__assert_fail@plt+0x9538>
   1a1bc:	mov	r6, r0
   1a1c0:	str	sl, [r0]
   1a1c4:	mov	r0, #1
   1a1c8:	str	r0, [sp, #60]	; 0x3c
   1a1cc:	mov	r0, #1
   1a1d0:	mov	ip, r6
   1a1d4:	str	r0, [sp, #56]	; 0x38
   1a1d8:	add	r0, sl, sl, lsl #1
   1a1dc:	add	r1, r4, r0, lsl #2
   1a1e0:	ldr	lr, [r1, #4]
   1a1e4:	cmp	lr, #1
   1a1e8:	blt	1a2b8 <__assert_fail@plt+0x8b58>
   1a1ec:	ldr	r0, [sp, #100]	; 0x64
   1a1f0:	str	ip, [sp, #40]	; 0x28
   1a1f4:	ldr	ip, [r1, #8]
   1a1f8:	str	r6, [sp, #48]	; 0x30
   1a1fc:	mov	r6, #0
   1a200:	ldr	r2, [r0, #8]
   1a204:	mvn	r0, #0
   1a208:	str	r0, [sp, #92]	; 0x5c
   1a20c:	sub	sl, r2, #1
   1a210:	cmp	r2, #1
   1a214:	bge	1a234 <__assert_fail@plt+0x8ad4>
   1a218:	b	1a220 <__assert_fail@plt+0x8ac0>
   1a21c:	ldr	r5, [sp, #32]
   1a220:	add	r6, r6, #1
   1a224:	cmp	r6, lr
   1a228:	beq	1a294 <__assert_fail@plt+0x8b34>
   1a22c:	cmp	r2, #1
   1a230:	blt	1a220 <__assert_fail@plt+0x8ac0>
   1a234:	ldr	r0, [sp, #100]	; 0x64
   1a238:	ldr	r4, [ip, r6, lsl #2]
   1a23c:	mov	r5, #0
   1a240:	cmp	sl, #0
   1a244:	ldr	r7, [r0, #12]
   1a248:	beq	1a270 <__assert_fail@plt+0x8b10>
   1a24c:	mov	r3, sl
   1a250:	add	r0, r5, r3
   1a254:	lsr	r1, r0, #1
   1a258:	ldr	r9, [r7, r1, lsl #2]
   1a25c:	cmp	r9, r4
   1a260:	addlt	r5, r8, r0, lsr #1
   1a264:	movge	r3, r1
   1a268:	cmp	r5, r3
   1a26c:	bcc	1a250 <__assert_fail@plt+0x8af0>
   1a270:	ldr	r0, [r7, r5, lsl #2]
   1a274:	cmp	r0, r4
   1a278:	bne	1a21c <__assert_fail@plt+0x8abc>
   1a27c:	ldr	r0, [sp, #92]	; 0x5c
   1a280:	ldr	r5, [sp, #32]
   1a284:	cmn	r0, #1
   1a288:	bne	1a370 <__assert_fail@plt+0x8c10>
   1a28c:	str	r4, [sp, #92]	; 0x5c
   1a290:	b	1a220 <__assert_fail@plt+0x8ac0>
   1a294:	ldr	r6, [sp, #48]	; 0x30
   1a298:	ldr	r3, [sp, #80]	; 0x50
   1a29c:	ldr	ip, [sp, #40]	; 0x28
   1a2a0:	ldr	lr, [sp, #56]	; 0x38
   1a2a4:	ldr	sl, [sp, #92]	; 0x5c
   1a2a8:	cmn	sl, #1
   1a2ac:	bgt	1a570 <__assert_fail@plt+0x8e10>
   1a2b0:	cmn	sl, #2
   1a2b4:	beq	1abfc <__assert_fail@plt+0x949c>
   1a2b8:	ldr	r7, [sp, #88]	; 0x58
   1a2bc:	cmp	r7, #0
   1a2c0:	beq	1ab5c <__assert_fail@plt+0x93fc>
   1a2c4:	ldr	r0, [r7]
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1ab34 <__assert_fail@plt+0x93d4>
   1a2d0:	sub	r0, r0, #1
   1a2d4:	mov	sl, r6
   1a2d8:	ldr	r6, [sp, #64]	; 0x40
   1a2dc:	ldr	r9, [fp, #20]
   1a2e0:	str	r0, [r7]
   1a2e4:	add	r5, r0, r0, lsl #1
   1a2e8:	ldr	r4, [r7, #8]
   1a2ec:	mov	r2, r6
   1a2f0:	ldr	r0, [r4, r5, lsl #3]!
   1a2f4:	ldr	r1, [r4, #8]
   1a2f8:	str	r0, [sp, #80]	; 0x50
   1a2fc:	mov	r0, r9
   1a300:	bl	11484 <memcpy@plt>
   1a304:	ldr	r0, [r4, #8]
   1a308:	ldr	r4, [sp, #84]	; 0x54
   1a30c:	mov	r2, r6
   1a310:	add	r1, r0, r4, lsl #3
   1a314:	ldr	r0, [sp, #68]	; 0x44
   1a318:	bl	11484 <memcpy@plt>
   1a31c:	mov	r0, sl
   1a320:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a324:	ldr	r0, [r7, #8]
   1a328:	add	r0, r0, r5, lsl #3
   1a32c:	ldr	r0, [r0, #8]
   1a330:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a334:	ldr	r0, [r7, #8]
   1a338:	ldr	r3, [sp, #80]	; 0x50
   1a33c:	add	r0, r0, r5, lsl #3
   1a340:	ldr	r5, [sp, #32]
   1a344:	ldr	r6, [r0, #20]
   1a348:	ldr	r1, [r0, #12]
   1a34c:	ldr	sl, [r0, #4]
   1a350:	ldr	lr, [r0, #16]
   1a354:	mov	ip, r6
   1a358:	str	r1, [sp, #60]	; 0x3c
   1a35c:	b	1a578 <__assert_fail@plt+0x8e18>
   1a360:	mov	lr, #0
   1a364:	cmn	sl, #1
   1a368:	bgt	1a570 <__assert_fail@plt+0x8e10>
   1a36c:	b	1a2b0 <__assert_fail@plt+0x8b50>
   1a370:	ldr	lr, [sp, #56]	; 0x38
   1a374:	ldr	sl, [sp, #88]	; 0x58
   1a378:	ldr	r6, [sp, #48]	; 0x30
   1a37c:	ldr	r3, [sp, #80]	; 0x50
   1a380:	ldr	ip, [sp, #40]	; 0x28
   1a384:	cmp	lr, #1
   1a388:	blt	1a434 <__assert_fail@plt+0x8cd4>
   1a38c:	mov	r0, lr
   1a390:	mov	r9, lr
   1a394:	mov	r0, #0
   1a398:	subs	r1, lr, #1
   1a39c:	beq	1a40c <__assert_fail@plt+0x8cac>
   1a3a0:	ldr	lr, [sp, #92]	; 0x5c
   1a3a4:	add	r2, r0, r1
   1a3a8:	lsr	r6, r2, #1
   1a3ac:	ldr	r7, [ip, r6, lsl #2]
   1a3b0:	cmp	r7, lr
   1a3b4:	addlt	r0, r8, r2, lsr #1
   1a3b8:	movge	r1, r6
   1a3bc:	cmp	r0, r1
   1a3c0:	bcc	1a3a4 <__assert_fail@plt+0x8c44>
   1a3c4:	b	1a410 <__assert_fail@plt+0x8cb0>
   1a3c8:	cmp	r7, #0
   1a3cc:	beq	1a3ec <__assert_fail@plt+0x8c8c>
   1a3d0:	ldr	r0, [r4, #12]
   1a3d4:	add	r3, r7, r3
   1a3d8:	mov	lr, #0
   1a3dc:	ldr	sl, [r0, sl, lsl #2]
   1a3e0:	cmn	sl, #1
   1a3e4:	bgt	1a570 <__assert_fail@plt+0x8e10>
   1a3e8:	b	1a2b0 <__assert_fail@plt+0x8b50>
   1a3ec:	ldr	r0, [sp, #60]	; 0x3c
   1a3f0:	cmp	r0, #0
   1a3f4:	beq	1a58c <__assert_fail@plt+0x8e2c>
   1a3f8:	cmp	lr, #0
   1a3fc:	bne	1a7d0 <__assert_fail@plt+0x9070>
   1a400:	str	sl, [ip]
   1a404:	mov	r2, #1
   1a408:	b	1a5b8 <__assert_fail@plt+0x8e58>
   1a40c:	ldr	lr, [sp, #92]	; 0x5c
   1a410:	ldr	r0, [ip, r0, lsl #2]
   1a414:	ldr	r6, [sp, #48]	; 0x30
   1a418:	cmp	r0, lr
   1a41c:	mov	lr, r9
   1a420:	bne	1a434 <__assert_fail@plt+0x8cd4>
   1a424:	mov	sl, r4
   1a428:	cmn	sl, #1
   1a42c:	bgt	1a570 <__assert_fail@plt+0x8e10>
   1a430:	b	1a2b0 <__assert_fail@plt+0x8b50>
   1a434:	cmp	sl, #0
   1a438:	beq	1a2a4 <__assert_fail@plt+0x8b44>
   1a43c:	ldr	r6, [sl]
   1a440:	ldr	r0, [sl, #4]
   1a444:	add	r1, r6, #1
   1a448:	cmp	r1, r0
   1a44c:	str	r1, [sl]
   1a450:	bne	1a484 <__assert_fail@plt+0x8d24>
   1a454:	ldr	r0, [sl, #8]
   1a458:	add	r1, r1, r1, lsl #1
   1a45c:	lsl	r1, r1, #4
   1a460:	bl	2b290 <__assert_fail@plt+0x19b30>
   1a464:	cmp	r0, #0
   1a468:	beq	1abf8 <__assert_fail@plt+0x9498>
   1a46c:	str	r0, [sl, #8]
   1a470:	ldr	r3, [sp, #80]	; 0x50
   1a474:	ldr	r1, [sl, #4]
   1a478:	lsl	r1, r1, #1
   1a47c:	str	r1, [sl, #4]
   1a480:	b	1a488 <__assert_fail@plt+0x8d28>
   1a484:	ldr	r0, [sl, #8]
   1a488:	add	r6, r6, r6, lsl #1
   1a48c:	str	r3, [r0, r6, lsl #3]!
   1a490:	str	r4, [r0, #4]
   1a494:	ldr	r0, [sp, #44]	; 0x2c
   1a498:	bl	2b260 <__assert_fail@plt+0x19b00>
   1a49c:	ldr	r1, [sl, #8]
   1a4a0:	cmp	r0, #0
   1a4a4:	add	r4, r1, r6, lsl #3
   1a4a8:	str	r0, [r4, #8]!
   1a4ac:	beq	1abf8 <__assert_fail@plt+0x9498>
   1a4b0:	ldr	r5, [sp, #64]	; 0x40
   1a4b4:	ldr	r1, [fp, #20]
   1a4b8:	mov	r2, r5
   1a4bc:	bl	11484 <memcpy@plt>
   1a4c0:	ldr	r0, [r4]
   1a4c4:	ldr	r1, [sp, #84]	; 0x54
   1a4c8:	mov	r2, r5
   1a4cc:	add	r0, r0, r1, lsl #3
   1a4d0:	ldr	r1, [sp, #68]	; 0x44
   1a4d4:	bl	11484 <memcpy@plt>
   1a4d8:	ldr	r0, [sl, #8]
   1a4dc:	ldr	lr, [sp, #56]	; 0x38
   1a4e0:	add	r7, r0, r6, lsl #3
   1a4e4:	cmp	lr, #1
   1a4e8:	mov	r6, r7
   1a4ec:	str	lr, [r6, #16]!
   1a4f0:	sub	r5, r6, #4
   1a4f4:	blt	1a544 <__assert_fail@plt+0x8de4>
   1a4f8:	lsl	r4, lr, #2
   1a4fc:	str	lr, [r5]
   1a500:	mov	r0, r4
   1a504:	bl	2b260 <__assert_fail@plt+0x19b00>
   1a508:	ldr	sl, [sp, #92]	; 0x5c
   1a50c:	cmp	r0, #0
   1a510:	str	r0, [r7, #20]
   1a514:	beq	1aca0 <__assert_fail@plt+0x9540>
   1a518:	ldr	r6, [sp, #48]	; 0x30
   1a51c:	mov	r2, r4
   1a520:	mov	r1, r6
   1a524:	bl	11484 <memcpy@plt>
   1a528:	ldr	r5, [sp, #32]
   1a52c:	ldr	r3, [sp, #80]	; 0x50
   1a530:	ldr	ip, [sp, #40]	; 0x28
   1a534:	ldr	lr, [sp, #56]	; 0x38
   1a538:	cmn	sl, #1
   1a53c:	bgt	1a570 <__assert_fail@plt+0x8e10>
   1a540:	b	1a2b0 <__assert_fail@plt+0x8b50>
   1a544:	mov	r0, #0
   1a548:	ldr	r6, [sp, #48]	; 0x30
   1a54c:	ldr	r3, [sp, #80]	; 0x50
   1a550:	ldr	ip, [sp, #40]	; 0x28
   1a554:	ldr	sl, [sp, #92]	; 0x5c
   1a558:	str	r0, [r5]
   1a55c:	str	r0, [r5, #4]
   1a560:	str	r0, [r5, #8]
   1a564:	ldr	r5, [sp, #32]
   1a568:	cmn	sl, #1
   1a56c:	ble	1a2b0 <__assert_fail@plt+0x8b50>
   1a570:	ldr	r4, [sp, #84]	; 0x54
   1a574:	ldr	r9, [fp, #20]
   1a578:	ldr	r0, [r9, #4]
   1a57c:	ldr	r9, [fp, #16]
   1a580:	cmp	r3, r0
   1a584:	ble	19d70 <__assert_fail@plt+0x8610>
   1a588:	b	19ca0 <__assert_fail@plt+0x8540>
   1a58c:	mov	r0, #4
   1a590:	bl	2b260 <__assert_fail@plt+0x19b00>
   1a594:	cmp	r0, #0
   1a598:	beq	1ac98 <__assert_fail@plt+0x9538>
   1a59c:	ldr	r3, [sp, #80]	; 0x50
   1a5a0:	mov	r6, r0
   1a5a4:	str	sl, [r0]
   1a5a8:	mov	r0, #1
   1a5ac:	mov	r2, #1
   1a5b0:	str	r0, [sp, #60]	; 0x3c
   1a5b4:	mov	ip, r6
   1a5b8:	ldr	r0, [sp, #204]	; 0xcc
   1a5bc:	ldr	r0, [r0, r3, lsl #2]
   1a5c0:	ldr	r1, [r0, #8]
   1a5c4:	cmp	r1, #1
   1a5c8:	blt	1a0e0 <__assert_fail@plt+0x8980>
   1a5cc:	str	r2, [sp, #56]	; 0x38
   1a5d0:	ldr	r2, [r4, #20]
   1a5d4:	str	r7, [sp, #100]	; 0x64
   1a5d8:	add	r7, sl, sl, lsl #1
   1a5dc:	ldr	lr, [r0, #12]
   1a5e0:	mov	r9, ip
   1a5e4:	str	r6, [sp, #48]	; 0x30
   1a5e8:	add	r2, r2, r7, lsl #2
   1a5ec:	ldr	r2, [r2, #8]
   1a5f0:	ldr	r2, [r2]
   1a5f4:	str	r2, [sp, #92]	; 0x5c
   1a5f8:	subs	r2, r1, #1
   1a5fc:	mov	r1, #0
   1a600:	beq	1a62c <__assert_fail@plt+0x8ecc>
   1a604:	ldr	ip, [sp, #92]	; 0x5c
   1a608:	add	r0, r1, r2
   1a60c:	lsr	r7, r0, #1
   1a610:	ldr	r6, [lr, r7, lsl #2]
   1a614:	cmp	r6, ip
   1a618:	addlt	r1, r8, r0, lsr #1
   1a61c:	movge	r2, r7
   1a620:	cmp	r1, r2
   1a624:	bcc	1a608 <__assert_fail@plt+0x8ea8>
   1a628:	b	1a630 <__assert_fail@plt+0x8ed0>
   1a62c:	ldr	ip, [sp, #92]	; 0x5c
   1a630:	ldr	r0, [lr, r1, lsl #2]
   1a634:	ldr	r6, [sp, #48]	; 0x30
   1a638:	ldr	r1, [sp, #100]	; 0x64
   1a63c:	cmp	r0, ip
   1a640:	bne	1a0d4 <__assert_fail@plt+0x8974>
   1a644:	mov	ip, r9
   1a648:	b	1a2a0 <__assert_fail@plt+0x8b40>
   1a64c:	ldr	r2, [sp, #108]	; 0x6c
   1a650:	str	r6, [sp, #48]	; 0x30
   1a654:	mov	r6, ip
   1a658:	mov	r9, r3
   1a65c:	add	r0, r2, r1
   1a660:	add	r1, r2, r3
   1a664:	mov	r2, r7
   1a668:	bl	1161c <bcmp@plt>
   1a66c:	cmp	r0, #0
   1a670:	beq	1a684 <__assert_fail@plt+0x8f24>
   1a674:	mov	ip, r6
   1a678:	ldr	r7, [sp, #88]	; 0x58
   1a67c:	ldr	r6, [sp, #48]	; 0x30
   1a680:	b	1a2c4 <__assert_fail@plt+0x8b64>
   1a684:	ldr	r0, [r4, #12]
   1a688:	add	r9, r7, r9
   1a68c:	mov	ip, r6
   1a690:	ldr	r7, [sp, #88]	; 0x58
   1a694:	ldr	r6, [sp, #48]	; 0x30
   1a698:	mov	r3, r9
   1a69c:	ldr	sl, [r0, sl, lsl #2]
   1a6a0:	b	1a12c <__assert_fail@plt+0x89cc>
   1a6a4:	ldr	r1, [sp, #60]	; 0x3c
   1a6a8:	mov	r9, ip
   1a6ac:	mov	r0, r6
   1a6b0:	str	lr, [sp, #56]	; 0x38
   1a6b4:	cmp	r1, lr
   1a6b8:	bne	1a6ec <__assert_fail@plt+0x8f8c>
   1a6bc:	ldr	r1, [sp, #60]	; 0x3c
   1a6c0:	lsl	r1, r1, #3
   1a6c4:	bl	2b290 <__assert_fail@plt+0x19b30>
   1a6c8:	cmp	r0, #0
   1a6cc:	mov	ip, r9
   1a6d0:	beq	1abfc <__assert_fail@plt+0x949c>
   1a6d4:	mov	r1, r0
   1a6d8:	ldr	r0, [sp, #60]	; 0x3c
   1a6dc:	mov	r9, r1
   1a6e0:	lsl	r0, r0, #1
   1a6e4:	str	r0, [sp, #60]	; 0x3c
   1a6e8:	mov	r0, r1
   1a6ec:	ldr	r1, [r9]
   1a6f0:	cmp	r1, sl
   1a6f4:	ble	1a778 <__assert_fail@plt+0x9018>
   1a6f8:	ldr	ip, [sp, #56]	; 0x38
   1a6fc:	cmp	ip, #1
   1a700:	blt	1a7b0 <__assert_fail@plt+0x9050>
   1a704:	ldr	r5, [sp, #56]	; 0x38
   1a708:	ands	r1, r5, #3
   1a70c:	sub	r2, r5, #1
   1a710:	beq	1a738 <__assert_fail@plt+0x8fd8>
   1a714:	ldr	r5, [sp, #56]	; 0x38
   1a718:	add	r7, r9, r5, lsl #2
   1a71c:	mov	r3, r7
   1a720:	ldr	r6, [r3, #-4]!
   1a724:	subs	r1, r1, #1
   1a728:	sub	r5, r5, #1
   1a72c:	str	r6, [r7]
   1a730:	mov	r7, r3
   1a734:	bne	1a720 <__assert_fail@plt+0x8fc0>
   1a738:	mov	ip, #0
   1a73c:	cmp	r2, #3
   1a740:	bcc	1a7b0 <__assert_fail@plt+0x9050>
   1a744:	add	r2, r9, r5, lsl #2
   1a748:	sub	r2, r2, #8
   1a74c:	ldr	r6, [r2]
   1a750:	ldr	r1, [r2, #4]
   1a754:	ldmdb	r2, {r3, r7}
   1a758:	sub	r5, r5, #4
   1a75c:	cmp	r5, #0
   1a760:	stmda	r2, {r3, r7}
   1a764:	str	r6, [r2, #4]
   1a768:	str	r1, [r2, #8]
   1a76c:	sub	r2, r2, #16
   1a770:	bgt	1a74c <__assert_fail@plt+0x8fec>
   1a774:	b	1a7b0 <__assert_fail@plt+0x9050>
   1a778:	ldr	ip, [sp, #56]	; 0x38
   1a77c:	add	r3, r9, ip, lsl #2
   1a780:	ldr	r2, [r3, #-4]
   1a784:	cmp	r2, sl
   1a788:	ble	1a7b0 <__assert_fail@plt+0x9050>
   1a78c:	ldr	r1, [sp, #56]	; 0x38
   1a790:	sub	r1, r1, #2
   1a794:	str	r2, [r3]
   1a798:	sub	r1, r1, #1
   1a79c:	ldr	r2, [r3, #-8]
   1a7a0:	sub	r3, r3, #4
   1a7a4:	cmp	r2, sl
   1a7a8:	bgt	1a794 <__assert_fail@plt+0x9034>
   1a7ac:	add	ip, r1, #2
   1a7b0:	ldr	r1, [sp, #56]	; 0x38
   1a7b4:	ldr	r5, [sp, #32]
   1a7b8:	str	sl, [r9, ip, lsl #2]
   1a7bc:	mov	ip, r9
   1a7c0:	mov	r6, r0
   1a7c4:	add	r1, r1, #1
   1a7c8:	str	r1, [sp, #56]	; 0x38
   1a7cc:	b	1a1d8 <__assert_fail@plt+0x8a78>
   1a7d0:	ldr	r1, [sp, #60]	; 0x3c
   1a7d4:	mov	r9, ip
   1a7d8:	mov	r0, r6
   1a7dc:	str	r7, [sp, #100]	; 0x64
   1a7e0:	str	lr, [sp, #56]	; 0x38
   1a7e4:	cmp	r1, lr
   1a7e8:	bne	1a81c <__assert_fail@plt+0x90bc>
   1a7ec:	ldr	r1, [sp, #60]	; 0x3c
   1a7f0:	lsl	r1, r1, #3
   1a7f4:	bl	2b290 <__assert_fail@plt+0x19b30>
   1a7f8:	cmp	r0, #0
   1a7fc:	mov	ip, r9
   1a800:	beq	1abfc <__assert_fail@plt+0x949c>
   1a804:	mov	r1, r0
   1a808:	ldr	r0, [sp, #60]	; 0x3c
   1a80c:	mov	r9, r1
   1a810:	lsl	r0, r0, #1
   1a814:	str	r0, [sp, #60]	; 0x3c
   1a818:	mov	r0, r1
   1a81c:	ldr	r1, [r9]
   1a820:	cmp	r1, sl
   1a824:	ble	1a8a8 <__assert_fail@plt+0x9148>
   1a828:	ldr	ip, [sp, #56]	; 0x38
   1a82c:	cmp	ip, #1
   1a830:	blt	1a8e0 <__assert_fail@plt+0x9180>
   1a834:	ldr	r5, [sp, #56]	; 0x38
   1a838:	ands	r1, r5, #3
   1a83c:	sub	r2, r5, #1
   1a840:	beq	1a868 <__assert_fail@plt+0x9108>
   1a844:	ldr	r5, [sp, #56]	; 0x38
   1a848:	add	r7, r9, r5, lsl #2
   1a84c:	mov	r3, r7
   1a850:	ldr	r6, [r3, #-4]!
   1a854:	subs	r1, r1, #1
   1a858:	sub	r5, r5, #1
   1a85c:	str	r6, [r7]
   1a860:	mov	r7, r3
   1a864:	bne	1a850 <__assert_fail@plt+0x90f0>
   1a868:	mov	ip, #0
   1a86c:	cmp	r2, #3
   1a870:	bcc	1a8e0 <__assert_fail@plt+0x9180>
   1a874:	add	r2, r9, r5, lsl #2
   1a878:	sub	r2, r2, #8
   1a87c:	ldr	r6, [r2]
   1a880:	ldr	r1, [r2, #4]
   1a884:	ldmdb	r2, {r3, r7}
   1a888:	sub	r5, r5, #4
   1a88c:	cmp	r5, #0
   1a890:	stmda	r2, {r3, r7}
   1a894:	str	r6, [r2, #4]
   1a898:	str	r1, [r2, #8]
   1a89c:	sub	r2, r2, #16
   1a8a0:	bgt	1a87c <__assert_fail@plt+0x911c>
   1a8a4:	b	1a8e0 <__assert_fail@plt+0x9180>
   1a8a8:	ldr	ip, [sp, #56]	; 0x38
   1a8ac:	add	r3, r9, ip, lsl #2
   1a8b0:	ldr	r2, [r3, #-4]
   1a8b4:	cmp	r2, sl
   1a8b8:	ble	1a8e0 <__assert_fail@plt+0x9180>
   1a8bc:	ldr	r1, [sp, #56]	; 0x38
   1a8c0:	sub	r1, r1, #2
   1a8c4:	str	r2, [r3]
   1a8c8:	sub	r1, r1, #1
   1a8cc:	ldr	r2, [r3, #-8]
   1a8d0:	sub	r3, r3, #4
   1a8d4:	cmp	r2, sl
   1a8d8:	bgt	1a8c4 <__assert_fail@plt+0x9164>
   1a8dc:	add	ip, r1, #2
   1a8e0:	ldr	r2, [sp, #56]	; 0x38
   1a8e4:	ldr	r5, [sp, #32]
   1a8e8:	ldr	r3, [sp, #80]	; 0x50
   1a8ec:	ldr	r7, [sp, #100]	; 0x64
   1a8f0:	str	sl, [r9, ip, lsl #2]
   1a8f4:	mov	ip, r9
   1a8f8:	mov	r6, r0
   1a8fc:	add	r2, r2, #1
   1a900:	b	1a5b8 <__assert_fail@plt+0x8e58>
   1a904:	mov	r0, r6
   1a908:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a90c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a910:	ldr	r6, [sp, #72]	; 0x48
   1a914:	cmp	r0, r6
   1a918:	beq	1a920 <__assert_fail@plt+0x91c0>
   1a91c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a920:	ldr	lr, [sp, #96]	; 0x60
   1a924:	mov	r0, #16
   1a928:	str	r6, [fp, #-184]	; 0xffffff48
   1a92c:	cmp	r7, #0
   1a930:	str	r0, [fp, #-188]	; 0xffffff44
   1a934:	mov	r0, #0
   1a938:	str	r0, [fp, #-192]	; 0xffffff40
   1a93c:	beq	1a9a0 <__assert_fail@plt+0x9240>
   1a940:	ldr	r1, [r7]
   1a944:	ldr	r0, [r7, #8]
   1a948:	mov	r6, lr
   1a94c:	cmp	r1, #1
   1a950:	blt	1a990 <__assert_fail@plt+0x9230>
   1a954:	mov	r4, #0
   1a958:	mov	r5, #0
   1a95c:	add	r0, r0, r4
   1a960:	ldr	r0, [r0, #20]
   1a964:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a968:	ldr	r0, [r7, #8]
   1a96c:	add	r0, r0, r4
   1a970:	ldr	r0, [r0, #8]
   1a974:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a978:	ldr	r1, [r7]
   1a97c:	ldr	r0, [r7, #8]
   1a980:	add	r5, r5, #1
   1a984:	add	r4, r4, #24
   1a988:	cmp	r5, r1
   1a98c:	blt	1a95c <__assert_fail@plt+0x91fc>
   1a990:	bl	141b8 <__assert_fail@plt+0x2a58>
   1a994:	ldr	r5, [sp, #32]
   1a998:	ldr	r4, [sp, #84]	; 0x54
   1a99c:	mov	lr, r6
   1a9a0:	ldr	r0, [fp, #20]
   1a9a4:	ldrb	r1, [sp, #180]	; 0xb4
   1a9a8:	mov	r2, r9
   1a9ac:	add	r0, r0, #4
   1a9b0:	b	1aa1c <__assert_fail@plt+0x92bc>
   1a9b4:	mov	r6, #0
   1a9b8:	b	180b8 <__assert_fail@plt+0x6958>
   1a9bc:	mov	sl, #12
   1a9c0:	b	1aad4 <__assert_fail@plt+0x9374>
   1a9c4:	ldr	r7, [sp, #132]	; 0x84
   1a9c8:	ldr	r6, [sp, #28]
   1a9cc:	ldr	ip, [sp, #116]	; 0x74
   1a9d0:	cmp	r3, r7
   1a9d4:	mov	r5, r6
   1a9d8:	addne	r5, ip, r3, lsl #2
   1a9dc:	ldr	r3, [r5]
   1a9e0:	str	r3, [r0, #-4]
   1a9e4:	ldr	r5, [r0]
   1a9e8:	cmp	r5, r7
   1a9ec:	addne	r6, ip, r5, lsl #2
   1a9f0:	ldr	r5, [sp, #32]
   1a9f4:	ldr	r7, [r6]
   1a9f8:	str	r7, [r0]
   1a9fc:	ldr	r6, [fp, #-200]	; 0xffffff38
   1aa00:	add	r3, r3, r6
   1aa04:	add	r7, r7, r6
   1aa08:	stmda	r0, {r3, r7}
   1aa0c:	sub	r2, r2, #1
   1aa10:	add	r0, r0, #8
   1aa14:	cmp	r5, r2
   1aa18:	beq	1aa38 <__assert_fail@plt+0x92d8>
   1aa1c:	ldr	r3, [r0, #-4]
   1aa20:	cmn	r3, #1
   1aa24:	beq	1aa0c <__assert_fail@plt+0x92ac>
   1aa28:	cmp	r1, #0
   1aa2c:	bne	1a9c4 <__assert_fail@plt+0x9264>
   1aa30:	ldr	r7, [r0]
   1aa34:	b	1a9fc <__assert_fail@plt+0x929c>
   1aa38:	cmp	r5, #1
   1aa3c:	blt	1aa5c <__assert_fail@plt+0x92fc>
   1aa40:	ldr	r0, [fp, #20]
   1aa44:	lsl	r2, r5, #3
   1aa48:	mov	r1, #255	; 0xff
   1aa4c:	add	r0, r0, r4, lsl #3
   1aa50:	mov	r4, lr
   1aa54:	bl	11670 <memset@plt>
   1aa58:	mov	lr, r4
   1aa5c:	ldr	r0, [lr, #132]	; 0x84
   1aa60:	mov	sl, #0
   1aa64:	cmp	r0, #0
   1aa68:	beq	1aad4 <__assert_fail@plt+0x9374>
   1aa6c:	ldr	r1, [sp, #84]	; 0x54
   1aa70:	cmp	r1, #2
   1aa74:	bcc	1aad4 <__assert_fail@plt+0x9374>
   1aa78:	ldr	r1, [sp, #32]
   1aa7c:	ldr	r2, [fp, #16]
   1aa80:	ldr	r6, [fp, #20]
   1aa84:	mvn	r1, r1
   1aa88:	add	r1, r1, r2
   1aa8c:	mov	r2, #0
   1aa90:	b	1aaa0 <__assert_fail@plt+0x9340>
   1aa94:	add	r2, r2, #1
   1aa98:	cmp	r1, r2
   1aa9c:	beq	1aad0 <__assert_fail@plt+0x9370>
   1aaa0:	ldr	r3, [r0, r2, lsl #2]
   1aaa4:	cmp	r2, r3
   1aaa8:	beq	1aa94 <__assert_fail@plt+0x9334>
   1aaac:	add	r3, r6, r3, lsl #3
   1aab0:	add	r7, r6, r2, lsl #3
   1aab4:	ldr	r3, [r3, #8]
   1aab8:	str	r3, [r7, #8]
   1aabc:	ldr	r3, [r0, r2, lsl #2]
   1aac0:	add	r3, r6, r3, lsl #3
   1aac4:	ldr	r3, [r3, #12]
   1aac8:	str	r3, [r7, #12]
   1aacc:	b	1aa94 <__assert_fail@plt+0x9334>
   1aad0:	mov	sl, #0
   1aad4:	ldr	r0, [sp, #204]	; 0xcc
   1aad8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1aadc:	ldr	r0, [sp, #96]	; 0x60
   1aae0:	ldr	r0, [r0, #76]	; 0x4c
   1aae4:	cmp	r0, #0
   1aae8:	beq	1ab04 <__assert_fail@plt+0x93a4>
   1aaec:	add	r0, sp, #104	; 0x68
   1aaf0:	bl	22440 <__assert_fail@plt+0x10ce0>
   1aaf4:	ldr	r0, [sp, #236]	; 0xec
   1aaf8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1aafc:	ldr	r0, [sp, #220]	; 0xdc
   1ab00:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab04:	ldr	r0, [sp, #112]	; 0x70
   1ab08:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab0c:	ldr	r0, [sp, #116]	; 0x74
   1ab10:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab14:	ldrb	r0, [sp, #179]	; 0xb3
   1ab18:	cmp	r0, #0
   1ab1c:	beq	1ab28 <__assert_fail@plt+0x93c8>
   1ab20:	ldr	r0, [sp, #108]	; 0x6c
   1ab24:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab28:	mov	r0, sl
   1ab2c:	sub	sp, fp, #28
   1ab30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab34:	mov	r5, #0
   1ab38:	b	1ab60 <__assert_fail@plt+0x9400>
   1ab3c:	mov	sl, r0
   1ab40:	b	1aad4 <__assert_fail@plt+0x9374>
   1ab44:	mov	r0, r7
   1ab48:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab4c:	mov	r0, #0
   1ab50:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab54:	mov	sl, #12
   1ab58:	b	1aad4 <__assert_fail@plt+0x9374>
   1ab5c:	mov	r5, #1
   1ab60:	mov	r0, ip
   1ab64:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab68:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ab6c:	ldr	r4, [sp, #72]	; 0x48
   1ab70:	cmp	r0, r4
   1ab74:	beq	1ab7c <__assert_fail@plt+0x941c>
   1ab78:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ab7c:	mov	r0, #16
   1ab80:	str	r4, [fp, #-184]	; 0xffffff48
   1ab84:	mov	sl, #1
   1ab88:	cmp	r5, #0
   1ab8c:	str	r0, [fp, #-188]	; 0xffffff44
   1ab90:	mov	r0, #0
   1ab94:	str	r0, [fp, #-192]	; 0xffffff40
   1ab98:	bne	1aad4 <__assert_fail@plt+0x9374>
   1ab9c:	ldr	r0, [sp, #88]	; 0x58
   1aba0:	ldr	r1, [r0]
   1aba4:	ldr	r0, [r0, #8]
   1aba8:	cmp	r1, #1
   1abac:	blt	1abf0 <__assert_fail@plt+0x9490>
   1abb0:	ldr	r4, [sp, #88]	; 0x58
   1abb4:	mov	r5, #0
   1abb8:	mov	r6, #0
   1abbc:	add	r0, r0, r5
   1abc0:	ldr	r0, [r0, #20]
   1abc4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1abc8:	ldr	r0, [r4, #8]
   1abcc:	add	r0, r0, r5
   1abd0:	ldr	r0, [r0, #8]
   1abd4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1abd8:	ldr	r1, [r4]
   1abdc:	ldr	r0, [r4, #8]
   1abe0:	add	r6, r6, #1
   1abe4:	add	r5, r5, #24
   1abe8:	cmp	r6, r1
   1abec:	blt	1abbc <__assert_fail@plt+0x945c>
   1abf0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1abf4:	b	1aad4 <__assert_fail@plt+0x9374>
   1abf8:	ldr	ip, [sp, #40]	; 0x28
   1abfc:	mov	r0, ip
   1ac00:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ac04:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ac08:	ldr	r4, [sp, #72]	; 0x48
   1ac0c:	cmp	r0, r4
   1ac10:	beq	1ac18 <__assert_fail@plt+0x94b8>
   1ac14:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ac18:	mov	r0, #16
   1ac1c:	str	r4, [fp, #-184]	; 0xffffff48
   1ac20:	mov	sl, #12
   1ac24:	str	r0, [fp, #-188]	; 0xffffff44
   1ac28:	mov	r0, #0
   1ac2c:	str	r0, [fp, #-192]	; 0xffffff40
   1ac30:	ldr	r0, [sp, #88]	; 0x58
   1ac34:	cmp	r0, #0
   1ac38:	beq	1aad4 <__assert_fail@plt+0x9374>
   1ac3c:	ldr	r1, [r0]
   1ac40:	ldr	r0, [r0, #8]
   1ac44:	cmp	r1, #1
   1ac48:	blt	1abf0 <__assert_fail@plt+0x9490>
   1ac4c:	ldr	r4, [sp, #88]	; 0x58
   1ac50:	mov	r5, #0
   1ac54:	mov	r6, #0
   1ac58:	add	r0, r0, r5
   1ac5c:	ldr	r0, [r0, #20]
   1ac60:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ac64:	ldr	r0, [r4, #8]
   1ac68:	add	r0, r0, r5
   1ac6c:	ldr	r0, [r0, #8]
   1ac70:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ac74:	ldr	r1, [r4]
   1ac78:	ldr	r0, [r4, #8]
   1ac7c:	add	r6, r6, #1
   1ac80:	add	r5, r5, #24
   1ac84:	cmp	r6, r1
   1ac88:	blt	1ac58 <__assert_fail@plt+0x94f8>
   1ac8c:	b	1abf0 <__assert_fail@plt+0x9490>
   1ac90:	mov	sl, #1
   1ac94:	b	1aad4 <__assert_fail@plt+0x9374>
   1ac98:	mov	ip, #0
   1ac9c:	b	1abfc <__assert_fail@plt+0x949c>
   1aca0:	ldr	ip, [sp, #40]	; 0x28
   1aca4:	mov	r0, #0
   1aca8:	str	r0, [r6]
   1acac:	str	r0, [r5]
   1acb0:	b	1abfc <__assert_fail@plt+0x949c>
   1acb4:	push	{fp, lr}
   1acb8:	mov	fp, sp
   1acbc:	sub	sp, sp, #16
   1acc0:	mov	ip, #1
   1acc4:	str	r2, [sp, #4]
   1acc8:	str	ip, [sp, #12]
   1accc:	mov	ip, #0
   1acd0:	str	ip, [sp]
   1acd4:	ldr	ip, [fp, #8]
   1acd8:	str	ip, [sp, #8]
   1acdc:	bl	1ace8 <__assert_fail@plt+0x9588>
   1ace0:	mov	sp, fp
   1ace4:	pop	{fp, pc}
   1ace8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acec:	add	fp, sp, #28
   1acf0:	sub	sp, sp, #60	; 0x3c
   1acf4:	mvn	r4, #0
   1acf8:	cmp	r3, #0
   1acfc:	bmi	1ae84 <__assert_fail@plt+0x9724>
   1ad00:	mov	r5, r3
   1ad04:	mov	r8, r2
   1ad08:	cmp	r3, r2
   1ad0c:	bgt	1ae84 <__assert_fail@plt+0x9724>
   1ad10:	mov	r6, r0
   1ad14:	ldr	r0, [fp, #8]
   1ad18:	mov	sl, r1
   1ad1c:	movw	r1, #0
   1ad20:	mov	r9, r8
   1ad24:	ldr	r7, [r6]
   1ad28:	movt	r1, #0
   1ad2c:	add	r0, r0, r5
   1ad30:	cmp	r0, r8
   1ad34:	bicle	r9, r0, r0, asr #31
   1ad38:	movw	r0, #0
   1ad3c:	movt	r0, #0
   1ad40:	orrs	r4, r1, r0
   1ad44:	beq	1ad50 <__assert_fail@plt+0x95f0>
   1ad48:	add	r0, r7, #136	; 0x88
   1ad4c:	bl	1146c <pthread_mutex_lock@plt>
   1ad50:	ldrb	r0, [r6, #28]
   1ad54:	ldr	r3, [fp, #16]
   1ad58:	str	r6, [fp, #-32]	; 0xffffffe0
   1ad5c:	cmp	r9, r5
   1ad60:	ubfx	r1, r0, #5, #2
   1ad64:	str	r7, [fp, #-36]	; 0xffffffdc
   1ad68:	str	r4, [fp, #-40]	; 0xffffffd8
   1ad6c:	str	sl, [sp, #44]	; 0x2c
   1ad70:	str	r1, [sp, #40]	; 0x28
   1ad74:	ble	1ada8 <__assert_fail@plt+0x9648>
   1ad78:	tst	r0, #8
   1ad7c:	bne	1ada8 <__assert_fail@plt+0x9648>
   1ad80:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ad84:	ldr	r1, [r1, #16]
   1ad88:	cmp	r1, #0
   1ad8c:	beq	1ada8 <__assert_fail@plt+0x9648>
   1ad90:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1ad94:	mov	r6, r3
   1ad98:	mov	r0, r4
   1ad9c:	bl	17680 <__assert_fail@plt+0x5f20>
   1ada0:	ldrb	r0, [r4, #28]
   1ada4:	mov	r3, r6
   1ada8:	mov	sl, #1
   1adac:	mov	r2, #0
   1adb0:	cmp	r3, #0
   1adb4:	beq	1ae04 <__assert_fail@plt+0x96a4>
   1adb8:	ands	r1, r0, #16
   1adbc:	bne	1ae04 <__assert_fail@plt+0x96a4>
   1adc0:	and	r0, r0, #6
   1adc4:	cmp	r0, #4
   1adc8:	bne	1adf4 <__assert_fail@plt+0x9694>
   1adcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1add0:	ldr	sl, [r3]
   1add4:	ldr	r0, [r0, #24]
   1add8:	cmp	sl, r0
   1addc:	bhi	1adfc <__assert_fail@plt+0x969c>
   1ade0:	cmp	sl, #1
   1ade4:	bge	1ae00 <__assert_fail@plt+0x96a0>
   1ade8:	mov	sl, #1
   1adec:	mov	r2, #0
   1adf0:	b	1ae04 <__assert_fail@plt+0x96a4>
   1adf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1adf8:	ldr	r0, [r0, #24]
   1adfc:	add	sl, r0, #1
   1ae00:	mov	r2, r3
   1ae04:	lsl	r0, sl, #3
   1ae08:	str	r2, [sp, #36]	; 0x24
   1ae0c:	bl	2b260 <__assert_fail@plt+0x19b00>
   1ae10:	cmp	r0, #0
   1ae14:	beq	1b1a4 <__assert_fail@plt+0x9a44>
   1ae18:	mov	r6, r0
   1ae1c:	ldr	r0, [fp, #12]
   1ae20:	str	r9, [sp]
   1ae24:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1ae28:	ldr	r1, [sp, #44]	; 0x2c
   1ae2c:	mov	r2, r8
   1ae30:	mov	r3, r5
   1ae34:	stmib	sp, {r0, sl}
   1ae38:	ldr	r0, [sp, #40]	; 0x28
   1ae3c:	str	r6, [sp, #12]
   1ae40:	str	r0, [sp, #16]
   1ae44:	mov	r0, r9
   1ae48:	bl	17fdc <__assert_fail@plt+0x687c>
   1ae4c:	cmp	r0, #0
   1ae50:	mov	r8, r6
   1ae54:	beq	1ae90 <__assert_fail@plt+0x9730>
   1ae58:	cmp	r0, #1
   1ae5c:	mvn	r4, #1
   1ae60:	mvneq	r4, #0
   1ae64:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1ae68:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1ae6c:	mov	r0, r8
   1ae70:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ae74:	cmp	r6, #0
   1ae78:	beq	1ae84 <__assert_fail@plt+0x9724>
   1ae7c:	add	r0, r5, #136	; 0x88
   1ae80:	bl	113b8 <pthread_mutex_unlock@plt>
   1ae84:	mov	r0, r4
   1ae88:	sub	sp, fp, #28
   1ae8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae90:	ldr	lr, [sp, #36]	; 0x24
   1ae94:	str	r5, [sp, #44]	; 0x2c
   1ae98:	cmp	lr, #0
   1ae9c:	beq	1b178 <__assert_fail@plt+0x9a18>
   1aea0:	ldrb	r0, [r9, #28]
   1aea4:	add	r7, sl, #1
   1aea8:	ubfx	r0, r0, #1, #2
   1aeac:	cmp	r0, #1
   1aeb0:	beq	1af10 <__assert_fail@plt+0x97b0>
   1aeb4:	cmp	r0, #0
   1aeb8:	bne	1af3c <__assert_fail@plt+0x97dc>
   1aebc:	mov	r4, r8
   1aec0:	lsl	r8, r7, #2
   1aec4:	mov	r5, lr
   1aec8:	mov	r0, r8
   1aecc:	bl	2b260 <__assert_fail@plt+0x19b00>
   1aed0:	mov	r6, #0
   1aed4:	cmp	r0, #0
   1aed8:	str	r0, [r5, #4]
   1aedc:	beq	1b1bc <__assert_fail@plt+0x9a5c>
   1aee0:	mov	r0, r8
   1aee4:	bl	2b260 <__assert_fail@plt+0x19b00>
   1aee8:	cmp	r0, #0
   1aeec:	mov	lr, r5
   1aef0:	str	r0, [r5, #8]
   1aef4:	beq	1b228 <__assert_fail@plt+0x9ac8>
   1aef8:	str	r7, [lr]
   1aefc:	mov	r6, #1
   1af00:	mov	r8, r4
   1af04:	cmp	sl, #1
   1af08:	bge	1af4c <__assert_fail@plt+0x97ec>
   1af0c:	b	1af2c <__assert_fail@plt+0x97cc>
   1af10:	ldr	r0, [lr]
   1af14:	mov	r6, #1
   1af18:	cmp	r7, r0
   1af1c:	bhi	1b1c4 <__assert_fail@plt+0x9a64>
   1af20:	mov	r7, r0
   1af24:	cmp	sl, #1
   1af28:	bge	1af4c <__assert_fail@plt+0x97ec>
   1af2c:	mov	sl, #0
   1af30:	cmp	sl, r7
   1af34:	bcc	1b140 <__assert_fail@plt+0x99e0>
   1af38:	b	1b160 <__assert_fail@plt+0x9a00>
   1af3c:	ldr	r7, [lr]
   1af40:	mov	r6, #2
   1af44:	cmp	sl, #1
   1af48:	blt	1af2c <__assert_fail@plt+0x97cc>
   1af4c:	ldr	r5, [lr, #4]
   1af50:	ldr	r4, [lr, #8]
   1af54:	mov	r2, #0
   1af58:	cmp	sl, #3
   1af5c:	str	r6, [sp, #40]	; 0x28
   1af60:	bhi	1aff0 <__assert_fail@plt+0x9890>
   1af64:	tst	sl, #1
   1af68:	mov	r3, r2
   1af6c:	beq	1af88 <__assert_fail@plt+0x9828>
   1af70:	mov	r0, r8
   1af74:	orr	r3, r2, #1
   1af78:	ldr	r1, [r0, r2, lsl #3]!
   1af7c:	str	r1, [r5, r2, lsl #2]
   1af80:	ldr	r0, [r0, #4]
   1af84:	str	r0, [r4, r2, lsl #2]
   1af88:	orr	r0, r2, #1
   1af8c:	cmp	sl, r0
   1af90:	beq	1b130 <__assert_fail@plt+0x99d0>
   1af94:	add	r2, r3, #1
   1af98:	add	ip, r8, r3, lsl #3
   1af9c:	sub	r0, sl, r3
   1afa0:	mov	r6, #0
   1afa4:	add	r1, r5, r2, lsl #2
   1afa8:	add	r2, r4, r2, lsl #2
   1afac:	add	r7, ip, #12
   1afb0:	ldr	r4, [r7, #-12]
   1afb4:	add	r5, r1, r6
   1afb8:	subs	r0, r0, #2
   1afbc:	str	r4, [r5, #-4]
   1afc0:	add	r4, ip, r6, lsl #1
   1afc4:	add	r5, r2, r6
   1afc8:	ldr	r3, [r4, #4]
   1afcc:	str	r3, [r5, #-4]
   1afd0:	ldr	r3, [r4, #8]
   1afd4:	str	r3, [r1, r6]
   1afd8:	ldr	r3, [r7]
   1afdc:	add	r7, r7, #16
   1afe0:	str	r3, [r2, r6]
   1afe4:	add	r6, r6, #8
   1afe8:	bne	1afb0 <__assert_fail@plt+0x9850>
   1afec:	b	1b130 <__assert_fail@plt+0x99d0>
   1aff0:	add	lr, r4, sl, lsl #2
   1aff4:	add	r7, r8, sl, lsl #3
   1aff8:	add	r6, r5, sl, lsl #2
   1affc:	mov	r9, #0
   1b000:	mov	r1, #0
   1b004:	mov	r3, #0
   1b008:	mov	r0, #0
   1b00c:	mov	r2, #0
   1b010:	cmp	r8, lr
   1b014:	movwcc	r9, #1
   1b018:	cmp	r7, r4
   1b01c:	movwhi	r1, #1
   1b020:	cmp	r8, r6
   1b024:	movwcc	r3, #1
   1b028:	cmp	r7, r5
   1b02c:	mov	r7, #0
   1b030:	movwhi	r7, #1
   1b034:	cmp	r4, r6
   1b038:	mov	r6, #0
   1b03c:	movwcc	r6, #1
   1b040:	cmp	r5, lr
   1b044:	movwcc	r0, #1
   1b048:	tst	r0, r6
   1b04c:	andseq	r0, r7, r3
   1b050:	bne	1b0dc <__assert_fail@plt+0x997c>
   1b054:	ands	r0, r1, r9
   1b058:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1b05c:	ldr	lr, [sp, #36]	; 0x24
   1b060:	bne	1af64 <__assert_fail@plt+0x9804>
   1b064:	bic	r0, sl, #3
   1b068:	mov	r1, #1
   1b06c:	str	r4, [sp, #32]
   1b070:	str	r0, [sp, #28]
   1b074:	subs	r0, r0, #4
   1b078:	add	r0, r1, r0, lsr #2
   1b07c:	and	r1, r0, #1
   1b080:	str	r1, [sp, #24]
   1b084:	beq	1b0e8 <__assert_fail@plt+0x9988>
   1b088:	sub	r6, r0, r1
   1b08c:	mov	r1, r4
   1b090:	mov	r3, #0
   1b094:	mov	r7, #64	; 0x40
   1b098:	mov	r0, #32
   1b09c:	mov	lr, r5
   1b0a0:	mov	r4, r8
   1b0a4:	mov	r9, r8
   1b0a8:	add	ip, r9, #32
   1b0ac:	vld2.32	{d16-d19}, [r9], r7
   1b0b0:	add	r8, lr, #16
   1b0b4:	add	r2, r1, #16
   1b0b8:	subs	r6, r6, #2
   1b0bc:	add	r3, r3, #8
   1b0c0:	vst1.32	{d16-d17}, [lr], r0
   1b0c4:	vst1.32	{d18-d19}, [r1], r0
   1b0c8:	vld2.32	{d16-d19}, [ip]
   1b0cc:	vst1.32	{d16-d17}, [r8]
   1b0d0:	vst1.32	{d18-d19}, [r2]
   1b0d4:	bne	1b0a8 <__assert_fail@plt+0x9948>
   1b0d8:	b	1b0f0 <__assert_fail@plt+0x9990>
   1b0dc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1b0e0:	ldr	lr, [sp, #36]	; 0x24
   1b0e4:	b	1af64 <__assert_fail@plt+0x9804>
   1b0e8:	mov	r4, r8
   1b0ec:	mov	r3, #0
   1b0f0:	ldr	r0, [sp, #24]
   1b0f4:	mov	r8, r4
   1b0f8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1b0fc:	ldr	lr, [sp, #36]	; 0x24
   1b100:	ldr	r4, [sp, #32]
   1b104:	cmp	r0, #0
   1b108:	beq	1b124 <__assert_fail@plt+0x99c4>
   1b10c:	add	r0, r8, r3, lsl #3
   1b110:	vld2.32	{d16-d19}, [r0]
   1b114:	add	r0, r5, r3, lsl #2
   1b118:	vst1.32	{d16-d17}, [r0]
   1b11c:	add	r0, r4, r3, lsl #2
   1b120:	vst1.32	{d18-d19}, [r0]
   1b124:	ldr	r2, [sp, #28]
   1b128:	cmp	sl, r2
   1b12c:	bne	1af64 <__assert_fail@plt+0x9804>
   1b130:	ldr	r7, [lr]
   1b134:	ldr	r6, [sp, #40]	; 0x28
   1b138:	cmp	sl, r7
   1b13c:	bcs	1b160 <__assert_fail@plt+0x9a00>
   1b140:	ldmib	lr, {r0, r1}
   1b144:	mvn	r2, #0
   1b148:	str	r2, [r1, sl, lsl #2]
   1b14c:	str	r2, [r0, sl, lsl #2]
   1b150:	add	sl, sl, #1
   1b154:	ldr	r3, [lr]
   1b158:	cmp	sl, r3
   1b15c:	bcc	1b148 <__assert_fail@plt+0x99e8>
   1b160:	ldrb	r0, [r9, #28]
   1b164:	cmp	r6, #0
   1b168:	and	r0, r0, #249	; 0xf9
   1b16c:	orr	r0, r0, r6, lsl #1
   1b170:	strb	r0, [r9, #28]
   1b174:	beq	1b19c <__assert_fail@plt+0x9a3c>
   1b178:	ldr	r0, [fp, #20]
   1b17c:	cmp	r0, #0
   1b180:	beq	1b194 <__assert_fail@plt+0x9a34>
   1b184:	ldr	r0, [r8, #4]
   1b188:	ldr	r1, [sp, #44]	; 0x2c
   1b18c:	sub	r4, r0, r1
   1b190:	b	1ae64 <__assert_fail@plt+0x9704>
   1b194:	ldr	r4, [r8]
   1b198:	b	1ae64 <__assert_fail@plt+0x9704>
   1b19c:	mvn	r4, #1
   1b1a0:	b	1ae64 <__assert_fail@plt+0x9704>
   1b1a4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1b1a8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1b1ac:	mvn	r4, #1
   1b1b0:	cmp	r6, #0
   1b1b4:	bne	1ae7c <__assert_fail@plt+0x971c>
   1b1b8:	b	1ae84 <__assert_fail@plt+0x9724>
   1b1bc:	mov	r8, r4
   1b1c0:	b	1b160 <__assert_fail@plt+0x9a00>
   1b1c4:	ldr	r0, [lr, #4]
   1b1c8:	mov	r4, r8
   1b1cc:	lsl	r8, r7, #2
   1b1d0:	mov	r1, r8
   1b1d4:	bl	2b290 <__assert_fail@plt+0x19b30>
   1b1d8:	mov	r6, #0
   1b1dc:	cmp	r0, #0
   1b1e0:	beq	1b240 <__assert_fail@plt+0x9ae0>
   1b1e4:	mov	r5, r0
   1b1e8:	ldr	r0, [sp, #36]	; 0x24
   1b1ec:	mov	r1, r8
   1b1f0:	ldr	r0, [r0, #8]
   1b1f4:	bl	2b290 <__assert_fail@plt+0x19b30>
   1b1f8:	cmp	r0, #0
   1b1fc:	beq	1b238 <__assert_fail@plt+0x9ad8>
   1b200:	ldr	lr, [sp, #36]	; 0x24
   1b204:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1b208:	mov	r8, r4
   1b20c:	mov	r6, #1
   1b210:	str	r7, [lr]
   1b214:	str	r5, [lr, #4]
   1b218:	str	r0, [lr, #8]
   1b21c:	cmp	sl, #1
   1b220:	bge	1af4c <__assert_fail@plt+0x97ec>
   1b224:	b	1af2c <__assert_fail@plt+0x97cc>
   1b228:	ldr	r0, [lr, #4]
   1b22c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b230:	mov	r8, r4
   1b234:	b	1b160 <__assert_fail@plt+0x9a00>
   1b238:	mov	r0, r5
   1b23c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b240:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1b244:	mov	r8, r4
   1b248:	b	1b160 <__assert_fail@plt+0x9a00>
   1b24c:	push	{fp, lr}
   1b250:	mov	fp, sp
   1b254:	sub	sp, sp, #16
   1b258:	mov	ip, #0
   1b25c:	str	r2, [sp, #4]
   1b260:	str	ip, [sp, #12]
   1b264:	ldr	ip, [fp, #12]
   1b268:	str	ip, [sp, #8]
   1b26c:	ldr	ip, [fp, #8]
   1b270:	str	ip, [sp]
   1b274:	bl	1ace8 <__assert_fail@plt+0x9588>
   1b278:	mov	sp, fp
   1b27c:	pop	{fp, pc}
   1b280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b284:	add	fp, sp, #28
   1b288:	sub	sp, sp, #20
   1b28c:	ldr	r4, [fp, #8]
   1b290:	mov	r8, r1
   1b294:	mov	r1, r0
   1b298:	mov	r6, r2
   1b29c:	orr	r0, r4, r2
   1b2a0:	ldr	r2, [fp, #20]
   1b2a4:	orrs	r0, r0, r2
   1b2a8:	bmi	1b368 <__assert_fail@plt+0x9c08>
   1b2ac:	adds	sl, r6, r4
   1b2b0:	bvs	1b368 <__assert_fail@plt+0x9c08>
   1b2b4:	mov	r5, #0
   1b2b8:	cmp	r4, #1
   1b2bc:	blt	1b314 <__assert_fail@plt+0x9bb4>
   1b2c0:	mov	r9, r3
   1b2c4:	cmp	r6, #1
   1b2c8:	blt	1b31c <__assert_fail@plt+0x9bbc>
   1b2cc:	mov	r0, sl
   1b2d0:	mov	r5, r1
   1b2d4:	bl	2b260 <__assert_fail@plt+0x19b00>
   1b2d8:	cmp	r0, #0
   1b2dc:	beq	1b368 <__assert_fail@plt+0x9c08>
   1b2e0:	mov	r1, r8
   1b2e4:	mov	r2, r6
   1b2e8:	mov	r7, r0
   1b2ec:	bl	11484 <memcpy@plt>
   1b2f0:	add	r0, r7, r6
   1b2f4:	mov	r1, r9
   1b2f8:	mov	r2, r4
   1b2fc:	bl	11484 <memcpy@plt>
   1b300:	ldr	r2, [fp, #20]
   1b304:	mov	r1, r5
   1b308:	mov	r4, r7
   1b30c:	mov	r5, #0
   1b310:	b	1b324 <__assert_fail@plt+0x9bc4>
   1b314:	mov	r7, r8
   1b318:	b	1b320 <__assert_fail@plt+0x9bc0>
   1b31c:	mov	r7, r9
   1b320:	mov	r4, #0
   1b324:	ldr	r0, [fp, #16]
   1b328:	ldr	r3, [fp, #12]
   1b32c:	mov	r6, #1
   1b330:	str	r2, [sp, #4]
   1b334:	mov	r2, sl
   1b338:	str	r5, [sp]
   1b33c:	str	r6, [sp, #12]
   1b340:	str	r0, [sp, #8]
   1b344:	mov	r0, r1
   1b348:	mov	r1, r7
   1b34c:	bl	1ace8 <__assert_fail@plt+0x9588>
   1b350:	mov	r5, r0
   1b354:	mov	r0, r4
   1b358:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b35c:	mov	r0, r5
   1b360:	sub	sp, fp, #28
   1b364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b368:	mvn	r0, #1
   1b36c:	sub	sp, fp, #28
   1b370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b378:	add	fp, sp, #28
   1b37c:	sub	sp, sp, #20
   1b380:	ldr	r4, [fp, #8]
   1b384:	mov	r8, r1
   1b388:	mov	r1, r0
   1b38c:	mov	r6, r2
   1b390:	orr	r0, r4, r2
   1b394:	ldr	r2, [fp, #24]
   1b398:	orrs	r0, r0, r2
   1b39c:	bmi	1b45c <__assert_fail@plt+0x9cfc>
   1b3a0:	adds	sl, r6, r4
   1b3a4:	bvs	1b45c <__assert_fail@plt+0x9cfc>
   1b3a8:	mov	r5, #0
   1b3ac:	cmp	r4, #1
   1b3b0:	blt	1b408 <__assert_fail@plt+0x9ca8>
   1b3b4:	mov	r9, r3
   1b3b8:	cmp	r6, #1
   1b3bc:	blt	1b410 <__assert_fail@plt+0x9cb0>
   1b3c0:	mov	r0, sl
   1b3c4:	mov	r5, r1
   1b3c8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1b3cc:	cmp	r0, #0
   1b3d0:	beq	1b45c <__assert_fail@plt+0x9cfc>
   1b3d4:	mov	r1, r8
   1b3d8:	mov	r2, r6
   1b3dc:	mov	r7, r0
   1b3e0:	bl	11484 <memcpy@plt>
   1b3e4:	add	r0, r7, r6
   1b3e8:	mov	r1, r9
   1b3ec:	mov	r2, r4
   1b3f0:	bl	11484 <memcpy@plt>
   1b3f4:	ldr	r2, [fp, #24]
   1b3f8:	mov	r1, r5
   1b3fc:	mov	r4, r7
   1b400:	mov	r5, #0
   1b404:	b	1b418 <__assert_fail@plt+0x9cb8>
   1b408:	mov	r7, r8
   1b40c:	b	1b414 <__assert_fail@plt+0x9cb4>
   1b410:	mov	r7, r9
   1b414:	mov	r4, #0
   1b418:	ldr	r0, [fp, #20]
   1b41c:	ldr	r6, [fp, #16]
   1b420:	ldr	r3, [fp, #12]
   1b424:	str	r2, [sp, #4]
   1b428:	mov	r2, sl
   1b42c:	str	r5, [sp, #12]
   1b430:	str	r0, [sp, #8]
   1b434:	mov	r0, r1
   1b438:	mov	r1, r7
   1b43c:	str	r6, [sp]
   1b440:	bl	1ace8 <__assert_fail@plt+0x9588>
   1b444:	mov	r5, r0
   1b448:	mov	r0, r4
   1b44c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b450:	mov	r0, r5
   1b454:	sub	sp, fp, #28
   1b458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b45c:	mvn	r0, #1
   1b460:	sub	sp, fp, #28
   1b464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b468:	ldrb	ip, [r0, #28]
   1b46c:	cmp	r2, #0
   1b470:	bic	ip, ip, #6
   1b474:	orrne	ip, ip, #2
   1b478:	strb	ip, [r0, #28]
   1b47c:	ldr	r0, [sp]
   1b480:	moveq	r0, r2
   1b484:	cmp	r2, #0
   1b488:	moveq	r3, r2
   1b48c:	stm	r1, {r2, r3}
   1b490:	str	r0, [r1, #8]
   1b494:	bx	lr
   1b498:	push	{r4, sl, fp, lr}
   1b49c:	add	fp, sp, #8
   1b4a0:	mov	r4, r0
   1b4a4:	ldr	r0, [r0, #24]
   1b4a8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4ac:	ldr	r0, [r4, #36]	; 0x24
   1b4b0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4b4:	ldr	r0, [r4, #40]	; 0x28
   1b4b8:	add	r1, r4, #4
   1b4bc:	cmp	r0, r1
   1b4c0:	beq	1b4d4 <__assert_fail@plt+0x9d74>
   1b4c4:	ldr	r0, [r0, #8]
   1b4c8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4cc:	ldr	r0, [r4, #40]	; 0x28
   1b4d0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4d4:	ldr	r0, [r4, #12]
   1b4d8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4dc:	ldr	r0, [r4, #48]	; 0x30
   1b4e0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4e4:	ldr	r0, [r4, #44]	; 0x2c
   1b4e8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1b4ec:	mov	r0, r4
   1b4f0:	pop	{r4, sl, fp, lr}
   1b4f4:	b	141b8 <__assert_fail@plt+0x2a58>
   1b4f8:	nop	{0}
   1b4fc:	nop	{0}
   1b500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b504:	add	fp, sp, #28
   1b508:	sub	sp, sp, #108	; 0x6c
   1b50c:	mov	r3, r0
   1b510:	ldrb	r0, [r0, #74]	; 0x4a
   1b514:	ldr	r9, [r3, #36]	; 0x24
   1b518:	ldr	r1, [r3, #48]	; 0x30
   1b51c:	ldr	r8, [r3, #28]
   1b520:	str	r3, [sp, #20]
   1b524:	cmp	r9, r1
   1b528:	movgt	r9, r1
   1b52c:	cmp	r0, #0
   1b530:	bne	1b54c <__assert_fail@plt+0x9dec>
   1b534:	ldr	r0, [r3, #64]	; 0x40
   1b538:	cmp	r0, #0
   1b53c:	bne	1b54c <__assert_fail@plt+0x9dec>
   1b540:	ldrb	r0, [r3, #76]	; 0x4c
   1b544:	cmp	r0, #0
   1b548:	beq	1b554 <__assert_fail@plt+0x9df4>
   1b54c:	ldr	r7, [r3, #32]
   1b550:	b	1b76c <__assert_fail@plt+0xa00c>
   1b554:	cmp	r9, r8
   1b558:	ble	1b744 <__assert_fail@plt+0x9fe4>
   1b55c:	add	r5, r3, #16
   1b560:	add	sl, sp, #32
   1b564:	str	r9, [sp, #16]
   1b568:	b	1b588 <__assert_fail@plt+0x9e28>
   1b56c:	mov	r8, r9
   1b570:	ldr	r9, [sp, #16]
   1b574:	mov	r3, sl
   1b578:	add	sl, sp, #32
   1b57c:	cmp	r9, r8
   1b580:	mov	r7, r8
   1b584:	ble	1bb3c <__assert_fail@plt+0xa3dc>
   1b588:	ldr	r6, [r3, #24]
   1b58c:	ldr	r4, [r3]
   1b590:	add	r0, r6, r8
   1b594:	ldrb	r7, [r4, r0]
   1b598:	tst	r7, #128	; 0x80
   1b59c:	bne	1b5e8 <__assert_fail@plt+0x9e88>
   1b5a0:	mov	r0, r5
   1b5a4:	bl	114b4 <mbsinit@plt>
   1b5a8:	cmp	r0, #0
   1b5ac:	beq	1b5e8 <__assert_fail@plt+0x9e88>
   1b5b0:	mov	r0, r7
   1b5b4:	bl	11724 <towupper@plt>
   1b5b8:	cmp	r0, #128	; 0x80
   1b5bc:	bcs	1b5dc <__assert_fail@plt+0x9e7c>
   1b5c0:	ldr	r3, [sp, #20]
   1b5c4:	ldr	r1, [r3, #4]
   1b5c8:	strb	r0, [r1, r8]
   1b5cc:	ldr	r1, [r3, #8]
   1b5d0:	str	r0, [r1, r8, lsl #2]
   1b5d4:	add	r8, r8, #1
   1b5d8:	b	1b57c <__assert_fail@plt+0x9e1c>
   1b5dc:	ldr	r0, [sp, #20]
   1b5e0:	ldr	r4, [r0]
   1b5e4:	ldr	r6, [r0, #24]
   1b5e8:	ldm	r5, {r0, r1}
   1b5ec:	str	r1, [fp, #-36]	; 0xffffffdc
   1b5f0:	sub	r2, r9, r8
   1b5f4:	mov	r3, r5
   1b5f8:	str	r0, [fp, #-40]	; 0xffffffd8
   1b5fc:	add	r0, r4, r6
   1b600:	add	r1, r0, r8
   1b604:	add	r0, sp, #28
   1b608:	bl	2b644 <__assert_fail@plt+0x19ee4>
   1b60c:	sub	r4, r0, #1
   1b610:	mov	r6, r0
   1b614:	cmn	r4, #4
   1b618:	bhi	1b6f8 <__assert_fail@plt+0x9f98>
   1b61c:	ldr	r0, [sp, #28]
   1b620:	bl	11724 <towupper@plt>
   1b624:	mov	r7, r0
   1b628:	ldr	r0, [sp, #28]
   1b62c:	cmp	r7, r0
   1b630:	bne	1b654 <__assert_fail@plt+0x9ef4>
   1b634:	ldr	sl, [sp, #20]
   1b638:	ldr	r1, [sl]
   1b63c:	ldr	r2, [sl, #24]
   1b640:	ldr	r0, [sl, #4]
   1b644:	add	r1, r1, r2
   1b648:	add	r0, r0, r8
   1b64c:	add	r1, r1, r8
   1b650:	b	1b67c <__assert_fail@plt+0x9f1c>
   1b654:	mov	r0, sl
   1b658:	mov	r1, r7
   1b65c:	sub	r2, fp, #40	; 0x28
   1b660:	bl	11400 <wcrtomb@plt>
   1b664:	cmp	r6, r0
   1b668:	bne	1b74c <__assert_fail@plt+0x9fec>
   1b66c:	mov	r1, sl
   1b670:	ldr	sl, [sp, #20]
   1b674:	ldr	r0, [sl, #4]
   1b678:	add	r0, r0, r8
   1b67c:	mov	r2, r6
   1b680:	bl	11484 <memcpy@plt>
   1b684:	ldr	r0, [sl, #8]
   1b688:	add	r9, r8, #1
   1b68c:	str	r7, [r0, r8, lsl #2]
   1b690:	add	r7, r6, r8
   1b694:	cmp	r9, r7
   1b698:	bge	1b56c <__assert_fail@plt+0x9e0c>
   1b69c:	add	r0, r0, r8, lsl #2
   1b6a0:	mvn	r1, #3
   1b6a4:	add	r2, r1, r6, lsl #2
   1b6a8:	mov	r1, #255	; 0xff
   1b6ac:	add	r0, r0, #4
   1b6b0:	bl	11670 <memset@plt>
   1b6b4:	sub	r0, r6, #2
   1b6b8:	ands	r1, r4, #7
   1b6bc:	add	sl, sp, #32
   1b6c0:	beq	1b6d0 <__assert_fail@plt+0x9f70>
   1b6c4:	subs	r1, r1, #1
   1b6c8:	add	r9, r9, #1
   1b6cc:	bne	1b6c4 <__assert_fail@plt+0x9f64>
   1b6d0:	ldr	r3, [sp, #20]
   1b6d4:	cmp	r0, #7
   1b6d8:	bcc	1b6ec <__assert_fail@plt+0x9f8c>
   1b6dc:	add	r0, r6, r8
   1b6e0:	sub	r0, r0, r9
   1b6e4:	subs	r0, r0, #8
   1b6e8:	bne	1b6e4 <__assert_fail@plt+0x9f84>
   1b6ec:	ldr	r9, [sp, #16]
   1b6f0:	mov	r8, r7
   1b6f4:	b	1b57c <__assert_fail@plt+0x9e1c>
   1b6f8:	ldr	r3, [sp, #20]
   1b6fc:	add	r0, r6, #1
   1b700:	cmp	r0, #2
   1b704:	bcc	1b718 <__assert_fail@plt+0x9fb8>
   1b708:	ldr	r0, [r3, #36]	; 0x24
   1b70c:	ldr	r1, [r3, #48]	; 0x30
   1b710:	cmp	r0, r1
   1b714:	blt	1b758 <__assert_fail@plt+0x9ff8>
   1b718:	ldr	r0, [r3, #4]
   1b71c:	cmn	r6, #1
   1b720:	strb	r7, [r0, r8]
   1b724:	ldr	r0, [r3, #8]
   1b728:	str	r7, [r0, r8, lsl #2]
   1b72c:	add	r8, r8, #1
   1b730:	bne	1b57c <__assert_fail@plt+0x9e1c>
   1b734:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b738:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b73c:	stm	r5, {r0, r1}
   1b740:	b	1b57c <__assert_fail@plt+0x9e1c>
   1b744:	mov	r7, r8
   1b748:	b	1bb3c <__assert_fail@plt+0xa3dc>
   1b74c:	ldr	r3, [sp, #20]
   1b750:	mov	r7, r8
   1b754:	b	1b774 <__assert_fail@plt+0xa014>
   1b758:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b75c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b760:	mov	r7, r8
   1b764:	stm	r5, {r0, r1}
   1b768:	b	1bb3c <__assert_fail@plt+0xa3dc>
   1b76c:	cmp	r8, r9
   1b770:	bge	1bb3c <__assert_fail@plt+0xa3dc>
   1b774:	mov	r4, r3
   1b778:	mov	sl, r9
   1b77c:	sub	r2, r9, r8
   1b780:	ldr	r0, [r4, #16]!
   1b784:	ldr	r1, [r4, #4]
   1b788:	str	r0, [fp, #-40]	; 0xffffffd8
   1b78c:	str	r1, [fp, #-36]	; 0xffffffdc
   1b790:	ldr	r0, [r4, #48]	; 0x30
   1b794:	cmp	r0, #0
   1b798:	bne	1b8b8 <__assert_fail@plt+0xa158>
   1b79c:	ldr	r0, [r3]
   1b7a0:	ldr	r1, [r3, #24]
   1b7a4:	mov	r9, r7
   1b7a8:	add	r0, r0, r1
   1b7ac:	add	r7, r0, r7
   1b7b0:	add	r0, sp, #24
   1b7b4:	mov	r1, r7
   1b7b8:	mov	r3, r4
   1b7bc:	bl	2b644 <__assert_fail@plt+0x19ee4>
   1b7c0:	mov	r5, r0
   1b7c4:	sub	r0, r0, #1
   1b7c8:	cmn	r0, #4
   1b7cc:	str	r0, [sp, #16]
   1b7d0:	bhi	1b90c <__assert_fail@plt+0xa1ac>
   1b7d4:	ldr	r0, [sp, #24]
   1b7d8:	bl	11724 <towupper@plt>
   1b7dc:	mov	r6, r0
   1b7e0:	ldr	r0, [sp, #24]
   1b7e4:	cmp	r6, r0
   1b7e8:	bne	1b7f8 <__assert_fail@plt+0xa098>
   1b7ec:	ldr	r4, [sp, #20]
   1b7f0:	mov	r1, r7
   1b7f4:	b	1b818 <__assert_fail@plt+0xa0b8>
   1b7f8:	add	r0, sp, #32
   1b7fc:	sub	r2, fp, #40	; 0x28
   1b800:	mov	r1, r6
   1b804:	bl	11400 <wcrtomb@plt>
   1b808:	cmp	r0, r5
   1b80c:	bne	1b98c <__assert_fail@plt+0xa22c>
   1b810:	ldr	r4, [sp, #20]
   1b814:	add	r1, sp, #32
   1b818:	ldr	r0, [r4, #4]
   1b81c:	add	r0, r0, r8
   1b820:	mov	r2, r5
   1b824:	bl	11484 <memcpy@plt>
   1b828:	ldrb	r0, [r4, #76]	; 0x4c
   1b82c:	mov	r7, r9
   1b830:	mov	r9, sl
   1b834:	mov	r3, r4
   1b838:	cmp	r0, #0
   1b83c:	bne	1ba40 <__assert_fail@plt+0xa2e0>
   1b840:	ldr	r0, [r3, #8]
   1b844:	add	r4, r5, r8
   1b848:	add	r7, r5, r7
   1b84c:	str	r6, [r0, r8, lsl #2]
   1b850:	add	r6, r8, #1
   1b854:	cmp	r6, r4
   1b858:	bge	1b8b0 <__assert_fail@plt+0xa150>
   1b85c:	mvn	r1, #3
   1b860:	add	r0, r0, r6, lsl #2
   1b864:	add	r2, r1, r5, lsl #2
   1b868:	mov	r1, #255	; 0xff
   1b86c:	bl	11670 <memset@plt>
   1b870:	ldr	r1, [sp, #16]
   1b874:	sub	r0, r5, #2
   1b878:	ands	r1, r1, #7
   1b87c:	beq	1b88c <__assert_fail@plt+0xa12c>
   1b880:	subs	r1, r1, #1
   1b884:	add	r6, r6, #1
   1b888:	bne	1b880 <__assert_fail@plt+0xa120>
   1b88c:	ldr	r3, [sp, #20]
   1b890:	cmp	r0, #7
   1b894:	bcc	1b8a8 <__assert_fail@plt+0xa148>
   1b898:	add	r0, r5, r8
   1b89c:	sub	r0, r0, r6
   1b8a0:	subs	r0, r0, #8
   1b8a4:	bne	1b8a0 <__assert_fail@plt+0xa140>
   1b8a8:	mov	r8, r4
   1b8ac:	b	1b76c <__assert_fail@plt+0xa00c>
   1b8b0:	mov	r8, r6
   1b8b4:	b	1b76c <__assert_fail@plt+0xa00c>
   1b8b8:	cmp	r2, #1
   1b8bc:	mov	r9, r7
   1b8c0:	add	r7, sp, #32
   1b8c4:	ldrge	r1, [r3, #80]	; 0x50
   1b8c8:	cmpge	r1, #1
   1b8cc:	blt	1b7b0 <__assert_fail@plt+0xa050>
   1b8d0:	ldr	r7, [r3, #24]
   1b8d4:	ldr	r6, [r3]
   1b8d8:	add	r7, r9, r7
   1b8dc:	add	r3, r6, r7
   1b8e0:	mov	r6, #0
   1b8e4:	add	r7, sp, #32
   1b8e8:	ldrb	r5, [r3, r6]
   1b8ec:	ldrb	r5, [r0, r5]
   1b8f0:	strb	r5, [r7, r6]
   1b8f4:	add	r6, r6, #1
   1b8f8:	cmp	r6, r2
   1b8fc:	bge	1b7b0 <__assert_fail@plt+0xa050>
   1b900:	cmp	r6, r1
   1b904:	blt	1b8e8 <__assert_fail@plt+0xa188>
   1b908:	b	1b7b0 <__assert_fail@plt+0xa050>
   1b90c:	ldr	r3, [sp, #20]
   1b910:	add	r0, r5, #1
   1b914:	cmp	r0, #2
   1b918:	bcc	1b92c <__assert_fail@plt+0xa1cc>
   1b91c:	ldr	r0, [r3, #36]	; 0x24
   1b920:	ldr	r1, [r3, #48]	; 0x30
   1b924:	cmp	r0, r1
   1b928:	blt	1bb2c <__assert_fail@plt+0xa3cc>
   1b92c:	ldr	r2, [r3, #24]
   1b930:	ldr	r0, [r3]
   1b934:	ldr	r1, [r3, #64]	; 0x40
   1b938:	mov	r7, r9
   1b93c:	add	r2, r2, r9
   1b940:	cmp	r1, #0
   1b944:	ldrb	r0, [r0, r2]
   1b948:	bne	1bdc0 <__assert_fail@plt+0xa660>
   1b94c:	ldr	r1, [r3, #4]
   1b950:	mov	r9, sl
   1b954:	strb	r0, [r1, r8]
   1b958:	ldrb	r1, [r3, #76]	; 0x4c
   1b95c:	cmp	r1, #0
   1b960:	bne	1bdc8 <__assert_fail@plt+0xa668>
   1b964:	ldr	r1, [r3, #8]
   1b968:	add	r7, r7, #1
   1b96c:	cmn	r5, #1
   1b970:	str	r0, [r1, r8, lsl #2]
   1b974:	add	r8, r8, #1
   1b978:	bne	1b76c <__assert_fail@plt+0xa00c>
   1b97c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b980:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b984:	stm	r4, {r0, r1}
   1b988:	b	1b76c <__assert_fail@plt+0xa00c>
   1b98c:	ldr	r3, [sp, #20]
   1b990:	mov	r2, r0
   1b994:	cmn	r0, #1
   1b998:	beq	1babc <__assert_fail@plt+0xa35c>
   1b99c:	ldr	r1, [r3, #36]	; 0x24
   1b9a0:	add	r0, r2, r8
   1b9a4:	cmp	r0, r1
   1b9a8:	bhi	1bb2c <__assert_fail@plt+0xa3cc>
   1b9ac:	str	r0, [sp, #12]
   1b9b0:	ldr	r0, [r3, #12]
   1b9b4:	mov	r7, r9
   1b9b8:	cmp	r0, #0
   1b9bc:	bne	1b9e0 <__assert_fail@plt+0xa280>
   1b9c0:	lsl	r0, r1, #2
   1b9c4:	mov	r4, r2
   1b9c8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1b9cc:	ldr	r3, [sp, #20]
   1b9d0:	mov	r2, r4
   1b9d4:	cmp	r0, #0
   1b9d8:	str	r0, [r3, #12]
   1b9dc:	beq	1bdb4 <__assert_fail@plt+0xa654>
   1b9e0:	ldrb	r1, [r3, #76]	; 0x4c
   1b9e4:	ldr	r9, [sp, #16]
   1b9e8:	cmp	r1, #0
   1b9ec:	bne	1bc0c <__assert_fail@plt+0xa4ac>
   1b9f0:	cmp	r8, #0
   1b9f4:	beq	1bc04 <__assert_fail@plt+0xa4a4>
   1b9f8:	mov	r1, #0
   1b9fc:	cmp	r8, #4
   1ba00:	bcc	1bbf4 <__assert_fail@plt+0xa494>
   1ba04:	bic	r1, r8, #3
   1ba08:	stmib	sp, {r2, r7}
   1ba0c:	mov	r2, #1
   1ba10:	add	r3, pc, #968	; 0x3c8
   1ba14:	sub	r7, r1, #4
   1ba18:	add	r2, r2, r7, lsr #2
   1ba1c:	cmp	r7, #12
   1ba20:	and	r4, r2, #3
   1ba24:	bcs	1bb50 <__assert_fail@plt+0xa3f0>
   1ba28:	vld1.64	{d16-d17}, [r3 :128]
   1ba2c:	mov	sl, r4
   1ba30:	mov	r3, #0
   1ba34:	cmp	sl, #0
   1ba38:	bne	1bbc4 <__assert_fail@plt+0xa464>
   1ba3c:	b	1bbe4 <__assert_fail@plt+0xa484>
   1ba40:	ldr	lr, [r3, #12]
   1ba44:	mov	r1, #0
   1ba48:	cmp	r5, #4
   1ba4c:	bcc	1bb08 <__assert_fail@plt+0xa3a8>
   1ba50:	vdup.32	q8, r7
   1ba54:	bic	r1, r5, #3
   1ba58:	mov	r3, #1
   1ba5c:	mov	r9, r7
   1ba60:	subs	r2, r1, #4
   1ba64:	add	r2, r3, r2, lsr #2
   1ba68:	add	r3, pc, #880	; 0x370
   1ba6c:	and	ip, r2, #1
   1ba70:	beq	1bad4 <__assert_fail@plt+0xa374>
   1ba74:	sub	r4, r2, ip
   1ba78:	add	r2, pc, #864	; 0x360
   1ba7c:	vmov.i32	q10, #4	; 0x00000004
   1ba80:	vmov.i32	q11, #8	; 0x00000008
   1ba84:	add	r7, lr, r8, lsl #2
   1ba88:	mov	r3, #0
   1ba8c:	vld1.64	{d18-d19}, [r2 :128]
   1ba90:	mov	r2, #32
   1ba94:	vadd.i32	q12, q9, q8
   1ba98:	vadd.i32	q9, q9, q11
   1ba9c:	add	r0, r7, #16
   1baa0:	subs	r4, r4, #2
   1baa4:	add	r3, r3, #8
   1baa8:	vadd.i32	q13, q12, q10
   1baac:	vst1.32	{d24-d25}, [r7], r2
   1bab0:	vst1.32	{d26-d27}, [r0]
   1bab4:	bne	1ba94 <__assert_fail@plt+0xa334>
   1bab8:	b	1badc <__assert_fail@plt+0xa37c>
   1babc:	ldr	r0, [r3, #4]
   1bac0:	mov	r1, r7
   1bac4:	mov	r2, r5
   1bac8:	mov	r4, r3
   1bacc:	add	r0, r0, r8
   1bad0:	b	1b824 <__assert_fail@plt+0xa0c4>
   1bad4:	vld1.64	{d18-d19}, [r3 :128]
   1bad8:	mov	r3, #0
   1badc:	cmp	ip, #0
   1bae0:	beq	1baf4 <__assert_fail@plt+0xa394>
   1bae4:	add	r0, r3, r8
   1bae8:	vadd.i32	q8, q9, q8
   1baec:	add	r0, lr, r0, lsl #2
   1baf0:	vst1.32	{d16-d17}, [r0]
   1baf4:	ldr	r3, [sp, #20]
   1baf8:	mov	r7, r9
   1bafc:	cmp	r5, r1
   1bb00:	mov	r9, sl
   1bb04:	beq	1b840 <__assert_fail@plt+0xa0e0>
   1bb08:	add	r0, r8, r1
   1bb0c:	add	r2, r7, r1
   1bb10:	sub	r4, r5, r1
   1bb14:	add	r0, lr, r0, lsl #2
   1bb18:	str	r2, [r0], #4
   1bb1c:	add	r2, r2, #1
   1bb20:	subs	r4, r4, #1
   1bb24:	bne	1bb18 <__assert_fail@plt+0xa3b8>
   1bb28:	b	1b840 <__assert_fail@plt+0xa0e0>
   1bb2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bb30:	mov	r7, r9
   1bb34:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bb38:	stm	r4, {r0, r1}
   1bb3c:	str	r8, [r3, #28]
   1bb40:	str	r7, [r3, #32]
   1bb44:	mov	r0, #0
   1bb48:	sub	sp, fp, #28
   1bb4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb50:	mov	sl, r4
   1bb54:	sub	r4, r2, r4
   1bb58:	add	r2, pc, #640	; 0x280
   1bb5c:	vmov.i32	q9, #12	; 0x0000000c
   1bb60:	vmov.i32	q10, #8	; 0x00000008
   1bb64:	vmov.i32	q11, #4	; 0x00000004
   1bb68:	vmov.i32	q12, #16	; 0x00000010
   1bb6c:	mov	r3, #0
   1bb70:	mov	lr, #64	; 0x40
   1bb74:	mov	r7, r0
   1bb78:	vld1.64	{d16-d17}, [r2 :128]
   1bb7c:	mov	r2, r0
   1bb80:	vadd.i32	q13, q8, q9
   1bb84:	add	ip, r2, #48	; 0x30
   1bb88:	vadd.i32	q14, q8, q10
   1bb8c:	vadd.i32	q15, q8, q11
   1bb90:	subs	r4, r4, #4
   1bb94:	add	r3, r3, #16
   1bb98:	vst1.32	{d26-d27}, [ip]
   1bb9c:	vst1.32	{d16-d17}, [r7], lr
   1bba0:	vadd.i32	q8, q8, q12
   1bba4:	add	ip, r2, #32
   1bba8:	add	r2, r2, #16
   1bbac:	vst1.32	{d28-d29}, [ip]
   1bbb0:	vst1.32	{d30-d31}, [r2]
   1bbb4:	mov	r2, r7
   1bbb8:	bne	1bb80 <__assert_fail@plt+0xa420>
   1bbbc:	cmp	sl, #0
   1bbc0:	beq	1bbe4 <__assert_fail@plt+0xa484>
   1bbc4:	vmov.i32	q9, #4	; 0x00000004
   1bbc8:	add	r2, r0, r3, lsl #2
   1bbcc:	rsb	r3, sl, #0
   1bbd0:	vadd.i32	q10, q8, q9
   1bbd4:	vst1.32	{d16-d17}, [r2]!
   1bbd8:	adds	r3, r3, #1
   1bbdc:	vorr	q8, q10, q10
   1bbe0:	bcc	1bbd0 <__assert_fail@plt+0xa470>
   1bbe4:	ldr	r3, [sp, #20]
   1bbe8:	ldmib	sp, {r2, r7}
   1bbec:	cmp	r8, r1
   1bbf0:	beq	1bc04 <__assert_fail@plt+0xa4a4>
   1bbf4:	str	r1, [r0, r1, lsl #2]
   1bbf8:	add	r1, r1, #1
   1bbfc:	cmp	r8, r1
   1bc00:	bne	1bbf4 <__assert_fail@plt+0xa494>
   1bc04:	mov	r0, #1
   1bc08:	strb	r0, [r3, #76]	; 0x4c
   1bc0c:	ldr	r0, [r3, #4]
   1bc10:	add	r1, sp, #32
   1bc14:	mov	r4, r3
   1bc18:	mov	sl, r2
   1bc1c:	add	r0, r0, r8
   1bc20:	bl	11484 <memcpy@plt>
   1bc24:	ldr	r0, [r4, #8]
   1bc28:	cmp	sl, #2
   1bc2c:	str	r6, [r0, r8, lsl #2]
   1bc30:	mov	r6, r7
   1bc34:	ldr	r1, [r4, #12]
   1bc38:	str	r7, [r1, r8, lsl #2]
   1bc3c:	bcc	1bd6c <__assert_fail@plt+0xa60c>
   1bc40:	sub	lr, sl, #1
   1bc44:	mov	ip, r6
   1bc48:	mov	r2, #1
   1bc4c:	cmp	lr, #4
   1bc50:	bcc	1bcd4 <__assert_fail@plt+0xa574>
   1bc54:	add	r7, sl, r8
   1bc58:	add	r4, r8, #1
   1bc5c:	str	ip, [sp, #8]
   1bc60:	add	r6, r0, r4, lsl #2
   1bc64:	add	r3, r0, r7, lsl #2
   1bc68:	add	r4, r1, r4, lsl #2
   1bc6c:	cmp	r4, r3
   1bc70:	addcc	r3, r1, r7, lsl #2
   1bc74:	cmpcc	r6, r3
   1bc78:	bcc	1bcd4 <__assert_fail@plt+0xa574>
   1bc7c:	add	r2, pc, #364	; 0x16c
   1bc80:	ldr	r3, [sp, #8]
   1bc84:	vdup.32	q9, r9
   1bc88:	vdup.32	q10, r5
   1bc8c:	vmov.i32	q12, #4	; 0x00000004
   1bc90:	vmov.i8	q13, #255	; 0xff
   1bc94:	vld1.64	{d22-d23}, [r2 :128]
   1bc98:	vdup.32	q8, r3
   1bc9c:	bic	r3, lr, #3
   1bca0:	orr	r2, r3, #1
   1bca4:	mov	r7, r3
   1bca8:	vcgt.u32	q14, q10, q11
   1bcac:	subs	r7, r7, #4
   1bcb0:	vbsl	q14, q11, q9
   1bcb4:	vadd.i32	q11, q11, q12
   1bcb8:	vadd.i32	q14, q14, q8
   1bcbc:	vst1.32	{d28-d29}, [r4]!
   1bcc0:	vst1.32	{d26-d27}, [r6]!
   1bcc4:	bne	1bca8 <__assert_fail@plt+0xa548>
   1bcc8:	cmp	lr, r3
   1bccc:	mov	r6, ip
   1bcd0:	beq	1bd6c <__assert_fail@plt+0xa60c>
   1bcd4:	tst	sl, #1
   1bcd8:	mov	r3, r2
   1bcdc:	bne	1bd04 <__assert_fail@plt+0xa5a4>
   1bce0:	cmp	r2, r5
   1bce4:	mov	r3, r9
   1bce8:	add	r7, r2, r8
   1bcec:	movcc	r3, r2
   1bcf0:	add	r3, r3, ip
   1bcf4:	str	r3, [r1, r7, lsl #2]
   1bcf8:	mvn	r3, #0
   1bcfc:	str	r3, [r0, r7, lsl #2]
   1bd00:	add	r3, r2, #1
   1bd04:	add	r2, r2, #1
   1bd08:	mov	r6, ip
   1bd0c:	cmp	sl, r2
   1bd10:	beq	1bd6c <__assert_fail@plt+0xa60c>
   1bd14:	add	r2, r8, r3
   1bd18:	add	r2, r2, #1
   1bd1c:	add	r1, r1, r2, lsl #2
   1bd20:	add	r0, r0, r2, lsl #2
   1bd24:	mvn	r2, #0
   1bd28:	cmp	r3, r5
   1bd2c:	mov	r7, r9
   1bd30:	movcc	r7, r3
   1bd34:	add	r7, r7, r6
   1bd38:	str	r7, [r1, #-4]
   1bd3c:	add	r7, r3, #1
   1bd40:	add	r3, r3, #2
   1bd44:	str	r2, [r0, #-4]
   1bd48:	cmp	r7, r5
   1bd4c:	movcs	r7, r9
   1bd50:	cmp	r3, sl
   1bd54:	add	r7, r7, r6
   1bd58:	str	r7, [r1]
   1bd5c:	str	r2, [r0]
   1bd60:	add	r1, r1, #8
   1bd64:	add	r0, r0, #8
   1bd68:	bne	1bd28 <__assert_fail@plt+0xa5c8>
   1bd6c:	ldr	r3, [sp, #20]
   1bd70:	sub	r1, sl, r5
   1bd74:	mov	r7, r6
   1bd78:	ldr	r0, [r3, #48]	; 0x30
   1bd7c:	ldr	r2, [r3, #52]	; 0x34
   1bd80:	add	r0, r0, r1
   1bd84:	cmp	r2, r6
   1bd88:	str	r0, [r3, #48]	; 0x30
   1bd8c:	ble	1bd9c <__assert_fail@plt+0xa63c>
   1bd90:	ldr	r2, [r3, #56]	; 0x38
   1bd94:	add	r1, r2, r1
   1bd98:	str	r1, [r3, #56]	; 0x38
   1bd9c:	ldr	r9, [r3, #36]	; 0x24
   1bda0:	ldr	r8, [sp, #12]
   1bda4:	add	r7, r5, r7
   1bda8:	cmp	r9, r0
   1bdac:	movgt	r9, r0
   1bdb0:	b	1b76c <__assert_fail@plt+0xa00c>
   1bdb4:	mov	r0, #12
   1bdb8:	sub	sp, fp, #28
   1bdbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdc0:	ldrb	r0, [r1, r0]
   1bdc4:	b	1b94c <__assert_fail@plt+0xa1ec>
   1bdc8:	ldr	r1, [r3, #12]
   1bdcc:	str	r7, [r1, r8, lsl #2]
   1bdd0:	b	1b964 <__assert_fail@plt+0xa204>
   1bdd4:	nop	{0}
   1bdd8:	nop	{0}
   1bddc:	nop	{0}
   1bde0:	andeq	r0, r0, r0
   1bde4:	andeq	r0, r0, r1
   1bde8:	andeq	r0, r0, r2
   1bdec:	andeq	r0, r0, r3
   1bdf0:	andeq	r0, r0, r1
   1bdf4:	andeq	r0, r0, r2
   1bdf8:	andeq	r0, r0, r3
   1bdfc:	andeq	r0, r0, r4
   1be00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be04:	add	fp, sp, #28
   1be08:	sub	sp, sp, #68	; 0x44
   1be0c:	mov	r4, r0
   1be10:	ldr	r8, [r0, #28]
   1be14:	ldr	r5, [r0, #36]	; 0x24
   1be18:	ldr	r0, [r0, #48]	; 0x30
   1be1c:	cmp	r5, r0
   1be20:	movgt	r5, r0
   1be24:	cmp	r5, r8
   1be28:	ble	1bff4 <__assert_fail@plt+0xa894>
   1be2c:	add	r9, r4, #16
   1be30:	mov	r0, sp
   1be34:	ldr	r3, [r4, #64]	; 0x40
   1be38:	ldm	r9, {r6, sl}
   1be3c:	sub	r2, r5, r8
   1be40:	cmp	r3, #0
   1be44:	bne	1bf38 <__assert_fail@plt+0xa7d8>
   1be48:	ldr	r3, [r4]
   1be4c:	ldr	r1, [r4, #24]
   1be50:	add	r1, r3, r1
   1be54:	add	r1, r1, r8
   1be58:	mov	r3, r9
   1be5c:	bl	2b644 <__assert_fail@plt+0x19ee4>
   1be60:	mov	r7, r0
   1be64:	add	r0, r0, #1
   1be68:	cmp	r0, #2
   1be6c:	bcc	1be88 <__assert_fail@plt+0xa728>
   1be70:	cmn	r7, #2
   1be74:	bne	1beb4 <__assert_fail@plt+0xa754>
   1be78:	ldr	r0, [r4, #36]	; 0x24
   1be7c:	ldr	r1, [r4, #48]	; 0x30
   1be80:	cmp	r0, r1
   1be84:	blt	1bff0 <__assert_fail@plt+0xa890>
   1be88:	ldr	r1, [r4, #24]
   1be8c:	ldr	r0, [r4]
   1be90:	add	r1, r1, r8
   1be94:	ldrb	r0, [r0, r1]
   1be98:	str	r0, [sp]
   1be9c:	ldr	r1, [r4, #64]	; 0x40
   1bea0:	cmp	r1, #0
   1bea4:	bne	1bfe4 <__assert_fail@plt+0xa884>
   1bea8:	mov	r7, #1
   1beac:	stm	r9, {r6, sl}
   1beb0:	b	1beb8 <__assert_fail@plt+0xa758>
   1beb4:	ldr	r0, [sp]
   1beb8:	ldr	r1, [r4, #8]
   1bebc:	add	sl, r7, r8
   1bec0:	add	r6, r8, #1
   1bec4:	cmp	r6, sl
   1bec8:	str	r0, [r1, r8, lsl #2]
   1becc:	bge	1bf24 <__assert_fail@plt+0xa7c4>
   1bed0:	mvn	r0, #3
   1bed4:	add	r2, r0, r7, lsl #2
   1bed8:	add	r0, r1, r8, lsl #2
   1bedc:	mov	r1, #255	; 0xff
   1bee0:	add	r0, r0, #4
   1bee4:	bl	11670 <memset@plt>
   1bee8:	sub	r1, r7, #1
   1beec:	sub	r0, r7, #2
   1bef0:	ands	r1, r1, #7
   1bef4:	beq	1bf04 <__assert_fail@plt+0xa7a4>
   1bef8:	subs	r1, r1, #1
   1befc:	add	r6, r6, #1
   1bf00:	bne	1bef8 <__assert_fail@plt+0xa798>
   1bf04:	cmp	r0, #7
   1bf08:	bcc	1bf1c <__assert_fail@plt+0xa7bc>
   1bf0c:	add	r0, r7, r8
   1bf10:	sub	r0, r0, r6
   1bf14:	subs	r0, r0, #8
   1bf18:	bne	1bf14 <__assert_fail@plt+0xa7b4>
   1bf1c:	mov	r8, sl
   1bf20:	b	1bf28 <__assert_fail@plt+0xa7c8>
   1bf24:	mov	r8, r6
   1bf28:	mov	r0, sp
   1bf2c:	cmp	r5, r8
   1bf30:	bgt	1be34 <__assert_fail@plt+0xa6d4>
   1bf34:	b	1bff4 <__assert_fail@plt+0xa894>
   1bf38:	cmp	r2, #1
   1bf3c:	add	r1, sp, #4
   1bf40:	blt	1be58 <__assert_fail@plt+0xa6f8>
   1bf44:	ldr	r1, [r4, #80]	; 0x50
   1bf48:	cmp	r1, #1
   1bf4c:	add	r1, sp, #4
   1bf50:	blt	1be58 <__assert_fail@plt+0xa6f8>
   1bf54:	ldr	r7, [r4, #24]
   1bf58:	ldm	r4, {r1, ip}
   1bf5c:	cmp	r2, #2
   1bf60:	add	r7, r8, r7
   1bf64:	ldrb	r1, [r1, r7]
   1bf68:	ldrb	r1, [r3, r1]
   1bf6c:	strb	r1, [ip, r8]
   1bf70:	strb	r1, [sp, #4]
   1bf74:	add	r1, sp, #4
   1bf78:	blt	1be58 <__assert_fail@plt+0xa6f8>
   1bf7c:	ldr	r1, [r4, #80]	; 0x50
   1bf80:	cmp	r1, #2
   1bf84:	add	r1, sp, #4
   1bf88:	blt	1be58 <__assert_fail@plt+0xa6f8>
   1bf8c:	mov	lr, r0
   1bf90:	mov	r0, #1
   1bf94:	ldr	r7, [r4, #24]
   1bf98:	ldm	r4, {r1, ip}
   1bf9c:	ldr	r3, [r4, #64]	; 0x40
   1bfa0:	add	r1, r1, r7
   1bfa4:	add	r1, r1, r8
   1bfa8:	ldrb	r1, [r1, r0]
   1bfac:	ldrb	r1, [r3, r1]
   1bfb0:	add	r3, ip, r8
   1bfb4:	strb	r1, [r3, r0]
   1bfb8:	add	r3, sp, #4
   1bfbc:	strb	r1, [r3, r0]
   1bfc0:	add	r0, r0, #1
   1bfc4:	cmp	r0, r2
   1bfc8:	bge	1bfd8 <__assert_fail@plt+0xa878>
   1bfcc:	ldr	r1, [r4, #80]	; 0x50
   1bfd0:	cmp	r0, r1
   1bfd4:	blt	1bf94 <__assert_fail@plt+0xa834>
   1bfd8:	add	r1, sp, #4
   1bfdc:	mov	r0, lr
   1bfe0:	b	1be58 <__assert_fail@plt+0xa6f8>
   1bfe4:	ldrb	r0, [r1, r0]
   1bfe8:	str	r0, [sp]
   1bfec:	b	1bea8 <__assert_fail@plt+0xa748>
   1bff0:	stm	r9, {r6, sl}
   1bff4:	str	r8, [r4, #28]
   1bff8:	str	r8, [r4, #32]
   1bffc:	sub	sp, fp, #28
   1c000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c008:	add	fp, sp, #28
   1c00c:	sub	sp, sp, #28
   1c010:	ldr	r9, [r1]
   1c014:	mov	r5, r0
   1c018:	ldr	r4, [fp, #12]
   1c01c:	mov	r6, r2
   1c020:	str	r1, [sp, #16]
   1c024:	str	r3, [sp, #20]
   1c028:	ldr	r0, [r9, #84]	; 0x54
   1c02c:	str	r4, [sp, #4]
   1c030:	str	r0, [sp, #12]
   1c034:	ldr	r0, [fp, #8]
   1c038:	str	r0, [sp]
   1c03c:	mov	r0, r5
   1c040:	bl	1caac <__assert_fail@plt+0xb34c>
   1c044:	mov	r7, r0
   1c048:	cmp	r0, #0
   1c04c:	bne	1c05c <__assert_fail@plt+0xa8fc>
   1c050:	ldr	r0, [r4]
   1c054:	cmp	r0, #0
   1c058:	bne	1c268 <__assert_fail@plt+0xab08>
   1c05c:	ldrb	r0, [r6, #4]
   1c060:	cmp	r0, #10
   1c064:	bne	1c1a4 <__assert_fail@plt+0xaa44>
   1c068:	ldr	r0, [sp, #20]
   1c06c:	mov	sl, #0
   1c070:	orr	r0, r0, #8388608	; 0x800000
   1c074:	str	r0, [sp, #24]
   1c078:	ldr	r2, [sp, #24]
   1c07c:	mov	r0, r6
   1c080:	mov	r1, r5
   1c084:	bl	1c270 <__assert_fail@plt+0xab10>
   1c088:	ldr	r1, [r5, #40]	; 0x28
   1c08c:	mov	r8, #0
   1c090:	add	r0, r1, r0
   1c094:	str	r0, [r5, #40]	; 0x28
   1c098:	ldrb	r0, [r6, #4]
   1c09c:	orr	r1, r0, #8
   1c0a0:	cmp	r1, #10
   1c0a4:	bne	1c108 <__assert_fail@plt+0xa9a8>
   1c0a8:	ldr	r1, [r9, #64]	; 0x40
   1c0ac:	cmp	r1, #31
   1c0b0:	beq	1c17c <__assert_fail@plt+0xaa1c>
   1c0b4:	ldr	r0, [r9, #56]	; 0x38
   1c0b8:	add	r4, r0, r1, lsl #5
   1c0bc:	add	r2, r1, #1
   1c0c0:	mov	r0, #10
   1c0c4:	cmp	r7, #0
   1c0c8:	str	r2, [r9, #64]	; 0x40
   1c0cc:	str	sl, [r4, #4]!
   1c0d0:	stmib	r4, {r7, r8, sl}
   1c0d4:	str	sl, [r4, #16]
   1c0d8:	str	sl, [r4, #20]
   1c0dc:	str	r0, [r4, #24]
   1c0e0:	mvn	r0, #0
   1c0e4:	str	r0, [r4, #28]
   1c0e8:	strne	r4, [r7]
   1c0ec:	cmp	r8, #0
   1c0f0:	mov	r7, r4
   1c0f4:	strne	r4, [r8]
   1c0f8:	ldrb	r0, [r6, #4]
   1c0fc:	cmp	r0, #10
   1c100:	beq	1c078 <__assert_fail@plt+0xa918>
   1c104:	b	1c1a8 <__assert_fail@plt+0xaa48>
   1c108:	ldr	r1, [fp, #8]
   1c10c:	cmp	r1, #0
   1c110:	beq	1c120 <__assert_fail@plt+0xa9c0>
   1c114:	cmp	r0, #9
   1c118:	mov	r8, #0
   1c11c:	beq	1c0a8 <__assert_fail@plt+0xa948>
   1c120:	ldr	r0, [sp, #12]
   1c124:	ldr	r4, [r9, #84]	; 0x54
   1c128:	ldr	r1, [sp, #16]
   1c12c:	ldr	r3, [sp, #20]
   1c130:	mov	r2, r6
   1c134:	str	r0, [r9, #84]	; 0x54
   1c138:	ldr	r0, [fp, #8]
   1c13c:	str	r0, [sp]
   1c140:	ldr	r0, [fp, #12]
   1c144:	str	r0, [sp, #4]
   1c148:	mov	r0, r5
   1c14c:	bl	1caac <__assert_fail@plt+0xb34c>
   1c150:	mov	r8, r0
   1c154:	cmp	r0, #0
   1c158:	bne	1c16c <__assert_fail@plt+0xaa0c>
   1c15c:	ldr	r0, [fp, #12]
   1c160:	ldr	r0, [r0]
   1c164:	cmp	r0, #0
   1c168:	bne	1c1b4 <__assert_fail@plt+0xaa54>
   1c16c:	ldr	r0, [r9, #84]	; 0x54
   1c170:	orr	r0, r0, r4
   1c174:	str	r0, [r9, #84]	; 0x54
   1c178:	b	1c0a8 <__assert_fail@plt+0xa948>
   1c17c:	mov	r0, #996	; 0x3e4
   1c180:	bl	2b260 <__assert_fail@plt+0x19b00>
   1c184:	cmp	r0, #0
   1c188:	beq	1c25c <__assert_fail@plt+0xaafc>
   1c18c:	ldr	r1, [r9, #56]	; 0x38
   1c190:	str	r1, [r0]
   1c194:	mov	r1, #0
   1c198:	str	r1, [r9, #64]	; 0x40
   1c19c:	str	r0, [r9, #56]	; 0x38
   1c1a0:	b	1c0b8 <__assert_fail@plt+0xa958>
   1c1a4:	mov	r4, r7
   1c1a8:	mov	r0, r4
   1c1ac:	sub	sp, fp, #28
   1c1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1b4:	mov	r4, #0
   1c1b8:	cmp	r7, #0
   1c1bc:	beq	1c1a8 <__assert_fail@plt+0xaa48>
   1c1c0:	movw	r8, #255	; 0xff
   1c1c4:	movt	r8, #4
   1c1c8:	mov	r6, r7
   1c1cc:	ldr	r7, [r7, #4]
   1c1d0:	cmp	r7, #0
   1c1d4:	bne	1c1c8 <__assert_fail@plt+0xaa68>
   1c1d8:	ldr	r7, [r6, #8]
   1c1dc:	cmp	r7, #0
   1c1e0:	bne	1c1c8 <__assert_fail@plt+0xaa68>
   1c1e4:	ldr	r0, [r6, #24]
   1c1e8:	and	r0, r0, r8
   1c1ec:	cmp	r0, #3
   1c1f0:	beq	1c224 <__assert_fail@plt+0xaac4>
   1c1f4:	cmp	r0, #6
   1c1f8:	bne	1c230 <__assert_fail@plt+0xaad0>
   1c1fc:	ldr	r5, [r6, #20]
   1c200:	ldr	r0, [r5]
   1c204:	bl	141b8 <__assert_fail@plt+0x2a58>
   1c208:	ldr	r0, [r5, #4]
   1c20c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1c210:	ldr	r0, [r5, #8]
   1c214:	bl	141b8 <__assert_fail@plt+0x2a58>
   1c218:	ldr	r0, [r5, #12]
   1c21c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1c220:	b	1c228 <__assert_fail@plt+0xaac8>
   1c224:	ldr	r5, [r6, #20]
   1c228:	mov	r0, r5
   1c22c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1c230:	ldr	r0, [r6]
   1c234:	cmp	r0, #0
   1c238:	beq	1c1a8 <__assert_fail@plt+0xaa48>
   1c23c:	ldr	r7, [r0, #8]
   1c240:	cmp	r7, r6
   1c244:	mov	r6, r0
   1c248:	beq	1c1e4 <__assert_fail@plt+0xaa84>
   1c24c:	cmp	r7, #0
   1c250:	mov	r6, r0
   1c254:	beq	1c1e4 <__assert_fail@plt+0xaa84>
   1c258:	b	1c1c8 <__assert_fail@plt+0xaa68>
   1c25c:	ldr	r1, [fp, #12]
   1c260:	mov	r0, #12
   1c264:	str	r0, [r1]
   1c268:	mov	r4, #0
   1c26c:	b	1c1a8 <__assert_fail@plt+0xaa48>
   1c270:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c274:	add	fp, sp, #24
   1c278:	sub	sp, sp, #8
   1c27c:	mov	r9, r0
   1c280:	mov	r7, r1
   1c284:	ldr	r0, [r1, #40]	; 0x28
   1c288:	ldr	r1, [r1, #56]	; 0x38
   1c28c:	cmp	r1, r0
   1c290:	ble	1c378 <__assert_fail@plt+0xac18>
   1c294:	ldr	r1, [r7, #4]
   1c298:	mov	r5, r9
   1c29c:	mov	r8, r2
   1c2a0:	ldrb	r6, [r1, r0]
   1c2a4:	strb	r6, [r5], #4
   1c2a8:	ldr	r0, [r5]
   1c2ac:	bic	r1, r0, #6291456	; 0x600000
   1c2b0:	str	r1, [r5]
   1c2b4:	ldr	r3, [r7, #80]	; 0x50
   1c2b8:	cmp	r3, #2
   1c2bc:	blt	1c2e0 <__assert_fail@plt+0xab80>
   1c2c0:	ldr	r2, [r7, #28]
   1c2c4:	ldr	r1, [r7, #40]	; 0x28
   1c2c8:	cmp	r1, r2
   1c2cc:	beq	1c2e0 <__assert_fail@plt+0xab80>
   1c2d0:	ldr	r2, [r7, #8]
   1c2d4:	ldr	r1, [r2, r1, lsl #2]
   1c2d8:	cmn	r1, #1
   1c2dc:	beq	1c7b4 <__assert_fail@plt+0xb054>
   1c2e0:	movw	r1, #65280	; 0xff00
   1c2e4:	cmp	r6, #92	; 0x5c
   1c2e8:	movt	r1, #65439	; 0xff9f
   1c2ec:	bne	1c388 <__assert_fail@plt+0xac28>
   1c2f0:	ldr	r6, [r7, #40]	; 0x28
   1c2f4:	ldr	r4, [r7, #48]	; 0x30
   1c2f8:	add	r2, r6, #1
   1c2fc:	cmp	r2, r4
   1c300:	bge	1c3dc <__assert_fail@plt+0xac7c>
   1c304:	ldrb	r4, [r7, #75]	; 0x4b
   1c308:	cmp	r4, #0
   1c30c:	bne	1ca38 <__assert_fail@plt+0xb2d8>
   1c310:	ldr	r3, [r7, #4]
   1c314:	ldrb	r6, [r3, r2]
   1c318:	and	r0, r0, r1
   1c31c:	strb	r6, [r9]
   1c320:	orr	r4, r0, #1
   1c324:	str	r4, [r9, #4]
   1c328:	ldr	r0, [r7, #80]	; 0x50
   1c32c:	cmp	r0, #2
   1c330:	blt	1c600 <__assert_fail@plt+0xaea0>
   1c334:	ldr	r0, [r7, #8]
   1c338:	ldr	r1, [r7, #40]	; 0x28
   1c33c:	add	r0, r0, r1, lsl #2
   1c340:	ldr	r4, [r0, #4]
   1c344:	mov	r0, r4
   1c348:	bl	1164c <iswalnum@plt>
   1c34c:	sub	r1, r4, #95	; 0x5f
   1c350:	cmp	r0, #0
   1c354:	clz	r1, r1
   1c358:	movwne	r0, #1
   1c35c:	lsr	r1, r1, #5
   1c360:	orr	r0, r1, r0
   1c364:	ldr	r1, [r5]
   1c368:	bic	r1, r1, #4194304	; 0x400000
   1c36c:	orr	r0, r1, r0, lsl #22
   1c370:	uxtb	r1, r6
   1c374:	b	1c624 <__assert_fail@plt+0xaec4>
   1c378:	mov	r0, #2
   1c37c:	mov	r4, #0
   1c380:	strb	r0, [r9, #4]
   1c384:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c388:	and	r0, r0, r1
   1c38c:	orr	r4, r0, #1
   1c390:	str	r4, [r5]
   1c394:	ldr	r0, [r7, #80]	; 0x50
   1c398:	cmp	r0, #2
   1c39c:	blt	1c3e8 <__assert_fail@plt+0xac88>
   1c3a0:	ldr	r0, [r7, #8]
   1c3a4:	ldr	r1, [r7, #40]	; 0x28
   1c3a8:	ldr	r4, [r0, r1, lsl #2]
   1c3ac:	mov	r0, r4
   1c3b0:	bl	1164c <iswalnum@plt>
   1c3b4:	sub	r1, r4, #95	; 0x5f
   1c3b8:	cmp	r0, #0
   1c3bc:	clz	r1, r1
   1c3c0:	movwne	r0, #1
   1c3c4:	lsr	r1, r1, #5
   1c3c8:	orr	r0, r1, r0
   1c3cc:	ldr	r1, [r5]
   1c3d0:	bic	r1, r1, #4194304	; 0x400000
   1c3d4:	orr	r0, r1, r0, lsl #22
   1c3d8:	b	1c408 <__assert_fail@plt+0xaca8>
   1c3dc:	and	r0, r0, r1
   1c3e0:	orr	r0, r0, #36	; 0x24
   1c3e4:	b	1c7c8 <__assert_fail@plt+0xb068>
   1c3e8:	bl	11604 <__ctype_b_loc@plt>
   1c3ec:	ldr	r0, [r0]
   1c3f0:	cmp	r6, #95	; 0x5f
   1c3f4:	add	r0, r0, r6, lsl #1
   1c3f8:	ldrh	r0, [r0]
   1c3fc:	ubfx	r0, r0, #3, #1
   1c400:	movweq	r0, #1
   1c404:	orr	r0, r4, r0, lsl #22
   1c408:	sub	r1, r6, #10
   1c40c:	mov	r4, #1
   1c410:	str	r0, [r5]
   1c414:	cmp	r1, #115	; 0x73
   1c418:	bhi	1ca2c <__assert_fail@plt+0xb2cc>
   1c41c:	add	r2, pc, #0
   1c420:	ldr	pc, [r2, r1, lsl #2]
   1c424:	strdeq	ip, [r1], -r4
   1c428:	andeq	ip, r1, ip, lsr #20
   1c42c:	andeq	ip, r1, ip, lsr #20
   1c430:	andeq	ip, r1, ip, lsr #20
   1c434:	andeq	ip, r1, ip, lsr #20
   1c438:	andeq	ip, r1, ip, lsr #20
   1c43c:	andeq	ip, r1, ip, lsr #20
   1c440:	andeq	ip, r1, ip, lsr #20
   1c444:	andeq	ip, r1, ip, lsr #20
   1c448:	andeq	ip, r1, ip, lsr #20
   1c44c:	andeq	ip, r1, ip, lsr #20
   1c450:	andeq	ip, r1, ip, lsr #20
   1c454:	andeq	ip, r1, ip, lsr #20
   1c458:	andeq	ip, r1, ip, lsr #20
   1c45c:	andeq	ip, r1, ip, lsr #20
   1c460:	andeq	ip, r1, ip, lsr #20
   1c464:	andeq	ip, r1, ip, lsr #20
   1c468:	andeq	ip, r1, ip, lsr #20
   1c46c:	andeq	ip, r1, ip, lsr #20
   1c470:	andeq	ip, r1, ip, lsr #20
   1c474:	andeq	ip, r1, ip, lsr #20
   1c478:	andeq	ip, r1, ip, lsr #20
   1c47c:	andeq	ip, r1, ip, lsr #20
   1c480:	andeq	ip, r1, ip, lsr #20
   1c484:	andeq	ip, r1, ip, lsr #20
   1c488:	andeq	ip, r1, ip, lsr #20
   1c48c:	ldrdeq	ip, [r1], -r4
   1c490:	andeq	ip, r1, ip, lsr #20
   1c494:	andeq	ip, r1, ip, lsr #20
   1c498:	andeq	ip, r1, ip, lsr #20
   1c49c:	andeq	ip, r1, ip, lsr #16
   1c4a0:	andeq	ip, r1, r8, lsr r8
   1c4a4:	andeq	ip, r1, r4, asr #16
   1c4a8:	andeq	ip, r1, ip, asr #16
   1c4ac:	andeq	ip, r1, ip, lsr #20
   1c4b0:	andeq	ip, r1, ip, lsr #20
   1c4b4:	andeq	ip, r1, ip, asr r8
   1c4b8:	andeq	ip, r1, ip, lsr #20
   1c4bc:	andeq	ip, r1, ip, lsr #20
   1c4c0:	andeq	ip, r1, ip, lsr #20
   1c4c4:	andeq	ip, r1, ip, lsr #20
   1c4c8:	andeq	ip, r1, ip, lsr #20
   1c4cc:	andeq	ip, r1, ip, lsr #20
   1c4d0:	andeq	ip, r1, ip, lsr #20
   1c4d4:	andeq	ip, r1, ip, lsr #20
   1c4d8:	andeq	ip, r1, ip, lsr #20
   1c4dc:	andeq	ip, r1, ip, lsr #20
   1c4e0:	andeq	ip, r1, ip, lsr #20
   1c4e4:	andeq	ip, r1, ip, lsr #20
   1c4e8:	andeq	ip, r1, ip, lsr #20
   1c4ec:	andeq	ip, r1, ip, lsr #20
   1c4f0:	andeq	ip, r1, ip, lsr #20
   1c4f4:	andeq	ip, r1, ip, lsr #20
   1c4f8:	andeq	ip, r1, r4, ror #16
   1c4fc:	andeq	ip, r1, ip, lsr #20
   1c500:	andeq	ip, r1, ip, lsr #20
   1c504:	andeq	ip, r1, ip, lsr #20
   1c508:	andeq	ip, r1, ip, lsr #20
   1c50c:	andeq	ip, r1, ip, lsr #20
   1c510:	andeq	ip, r1, ip, lsr #20
   1c514:	andeq	ip, r1, ip, lsr #20
   1c518:	andeq	ip, r1, ip, lsr #20
   1c51c:	andeq	ip, r1, ip, lsr #20
   1c520:	andeq	ip, r1, ip, lsr #20
   1c524:	andeq	ip, r1, ip, lsr #20
   1c528:	andeq	ip, r1, ip, lsr #20
   1c52c:	andeq	ip, r1, ip, lsr #20
   1c530:	andeq	ip, r1, ip, lsr #20
   1c534:	andeq	ip, r1, ip, lsr #20
   1c538:	andeq	ip, r1, ip, lsr #20
   1c53c:	andeq	ip, r1, ip, lsr #20
   1c540:	andeq	ip, r1, ip, lsr #20
   1c544:	andeq	ip, r1, ip, lsr #20
   1c548:	andeq	ip, r1, ip, lsr #20
   1c54c:	andeq	ip, r1, ip, lsr #20
   1c550:	andeq	ip, r1, ip, lsr #20
   1c554:	andeq	ip, r1, ip, lsr #20
   1c558:	andeq	ip, r1, ip, lsr #20
   1c55c:	andeq	ip, r1, ip, lsr #20
   1c560:	andeq	ip, r1, ip, lsr #20
   1c564:	andeq	ip, r1, ip, lsr #20
   1c568:	andeq	ip, r1, r4, ror r8
   1c56c:	andeq	ip, r1, ip, lsr #20
   1c570:	andeq	ip, r1, ip, lsr #20
   1c574:	andeq	ip, r1, ip, ror r8
   1c578:	andeq	ip, r1, ip, lsr #20
   1c57c:	andeq	ip, r1, ip, lsr #20
   1c580:	andeq	ip, r1, ip, lsr #20
   1c584:	andeq	ip, r1, ip, lsr #20
   1c588:	andeq	ip, r1, ip, lsr #20
   1c58c:	andeq	ip, r1, ip, lsr #20
   1c590:	andeq	ip, r1, ip, lsr #20
   1c594:	andeq	ip, r1, ip, lsr #20
   1c598:	andeq	ip, r1, ip, lsr #20
   1c59c:	andeq	ip, r1, ip, lsr #20
   1c5a0:	andeq	ip, r1, ip, lsr #20
   1c5a4:	andeq	ip, r1, ip, lsr #20
   1c5a8:	andeq	ip, r1, ip, lsr #20
   1c5ac:	andeq	ip, r1, ip, lsr #20
   1c5b0:	andeq	ip, r1, ip, lsr #20
   1c5b4:	andeq	ip, r1, ip, lsr #20
   1c5b8:	andeq	ip, r1, ip, lsr #20
   1c5bc:	andeq	ip, r1, ip, lsr #20
   1c5c0:	andeq	ip, r1, ip, lsr #20
   1c5c4:	andeq	ip, r1, ip, lsr #20
   1c5c8:	andeq	ip, r1, ip, lsr #20
   1c5cc:	andeq	ip, r1, ip, lsr #20
   1c5d0:	andeq	ip, r1, ip, lsr #20
   1c5d4:	andeq	ip, r1, ip, lsr #20
   1c5d8:	andeq	ip, r1, ip, lsr #20
   1c5dc:	andeq	ip, r1, ip, lsr #20
   1c5e0:	andeq	ip, r1, ip, lsr #20
   1c5e4:	andeq	ip, r1, ip, lsr #20
   1c5e8:	andeq	ip, r1, r4, lsr #17
   1c5ec:			; <UNDEFINED> instruction: 0x0001c8b4
   1c5f0:	andeq	ip, r1, r8, asr #17
   1c5f4:	tst	r8, #2048	; 0x800
   1c5f8:	bne	1c8c0 <__assert_fail@plt+0xb160>
   1c5fc:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c600:	bl	11604 <__ctype_b_loc@plt>
   1c604:	ldr	r0, [r0]
   1c608:	uxtb	r1, r6
   1c60c:	cmp	r1, #95	; 0x5f
   1c610:	add	r0, r0, r1, lsl #1
   1c614:	ldrh	r0, [r0]
   1c618:	ubfx	r0, r0, #3, #1
   1c61c:	movweq	r0, #1
   1c620:	orr	r0, r4, r0, lsl #22
   1c624:	mvn	r2, #38	; 0x26
   1c628:	mov	r4, #2
   1c62c:	str	r0, [r5]
   1c630:	uxtab	r2, r2, r6
   1c634:	cmp	r2, #86	; 0x56
   1c638:	bhi	1ca2c <__assert_fail@plt+0xb2cc>
   1c63c:	add	r3, pc, #0
   1c640:	ldr	pc, [r3, r2, lsl #2]
   1c644:	andeq	ip, r1, r4, lsl #18
   1c648:	andeq	ip, r1, r4, lsl r9
   1c64c:	andeq	ip, r1, r4, lsr #18
   1c650:	andeq	ip, r1, ip, lsr #20
   1c654:	andeq	ip, r1, r4, lsr r9
   1c658:	andeq	ip, r1, ip, lsr #20
   1c65c:	andeq	ip, r1, ip, lsr #20
   1c660:	andeq	ip, r1, ip, lsr #20
   1c664:	andeq	ip, r1, ip, lsr #20
   1c668:	andeq	ip, r1, ip, lsr #20
   1c66c:	andeq	ip, r1, r0, lsr #15
   1c670:	andeq	ip, r1, r0, lsr #15
   1c674:	andeq	ip, r1, r0, lsr #15
   1c678:	andeq	ip, r1, r0, lsr #15
   1c67c:	andeq	ip, r1, r0, lsr #15
   1c680:	andeq	ip, r1, r0, lsr #15
   1c684:	andeq	ip, r1, r0, lsr #15
   1c688:	andeq	ip, r1, r0, lsr #15
   1c68c:	andeq	ip, r1, r0, lsr #15
   1c690:	andeq	ip, r1, ip, lsr #20
   1c694:	andeq	ip, r1, ip, lsr #20
   1c698:	andeq	ip, r1, ip, asr #18
   1c69c:	andeq	ip, r1, ip, lsr #20
   1c6a0:	andeq	ip, r1, ip, asr r9
   1c6a4:	andeq	ip, r1, ip, ror #18
   1c6a8:	andeq	ip, r1, ip, lsr #20
   1c6ac:	andeq	ip, r1, ip, lsr #20
   1c6b0:	andeq	ip, r1, r4, lsl #19
   1c6b4:	andeq	ip, r1, ip, lsr #20
   1c6b8:	andeq	ip, r1, ip, lsr #20
   1c6bc:	andeq	ip, r1, ip, lsr #20
   1c6c0:	andeq	ip, r1, ip, lsr #20
   1c6c4:	andeq	ip, r1, ip, lsr #20
   1c6c8:	andeq	ip, r1, ip, lsr #20
   1c6cc:	andeq	ip, r1, ip, lsr #20
   1c6d0:	andeq	ip, r1, ip, lsr #20
   1c6d4:	andeq	ip, r1, ip, lsr #20
   1c6d8:	andeq	ip, r1, ip, lsr #20
   1c6dc:	andeq	ip, r1, ip, lsr #20
   1c6e0:	andeq	ip, r1, ip, lsr #20
   1c6e4:	andeq	ip, r1, ip, lsr #20
   1c6e8:	andeq	ip, r1, ip, lsr #20
   1c6ec:	andeq	ip, r1, ip, lsr #20
   1c6f0:	andeq	ip, r1, ip, lsr #20
   1c6f4:	muleq	r1, r4, r9
   1c6f8:	andeq	ip, r1, ip, lsr #20
   1c6fc:	andeq	ip, r1, ip, lsr #20
   1c700:	andeq	ip, r1, ip, lsr #20
   1c704:	andeq	ip, r1, r4, lsr #19
   1c708:	andeq	ip, r1, ip, lsr #20
   1c70c:	andeq	ip, r1, ip, lsr #20
   1c710:	andeq	ip, r1, ip, lsr #20
   1c714:	andeq	ip, r1, ip, lsr #20
   1c718:	andeq	ip, r1, ip, lsr #20
   1c71c:	andeq	ip, r1, ip, lsr #20
   1c720:	andeq	ip, r1, ip, lsr #20
   1c724:	andeq	ip, r1, ip, lsr #20
   1c728:			; <UNDEFINED> instruction: 0x0001c9b4
   1c72c:	andeq	ip, r1, ip, lsr #20
   1c730:	andeq	ip, r1, r4, asr #19
   1c734:	andeq	ip, r1, ip, lsr #20
   1c738:	andeq	ip, r1, ip, lsr #20
   1c73c:	andeq	ip, r1, ip, lsr #20
   1c740:	andeq	ip, r1, ip, lsr #20
   1c744:	andeq	ip, r1, ip, lsr #20
   1c748:	andeq	ip, r1, ip, lsr #20
   1c74c:	andeq	ip, r1, ip, lsr #20
   1c750:	andeq	ip, r1, ip, lsr #20
   1c754:	andeq	ip, r1, ip, lsr #20
   1c758:	andeq	ip, r1, ip, lsr #20
   1c75c:	andeq	ip, r1, ip, lsr #20
   1c760:	andeq	ip, r1, ip, lsr #20
   1c764:	andeq	ip, r1, ip, lsr #20
   1c768:	andeq	ip, r1, ip, lsr #20
   1c76c:	andeq	ip, r1, ip, lsr #20
   1c770:	andeq	ip, r1, ip, lsr #20
   1c774:	ldrdeq	ip, [r1], -r4
   1c778:	andeq	ip, r1, ip, lsr #20
   1c77c:	andeq	ip, r1, ip, lsr #20
   1c780:	andeq	ip, r1, ip, lsr #20
   1c784:	andeq	ip, r1, r4, ror #19
   1c788:	andeq	ip, r1, ip, lsr #20
   1c78c:	andeq	ip, r1, ip, lsr #20
   1c790:	andeq	ip, r1, ip, lsr #20
   1c794:	strdeq	ip, [r1], -r4
   1c798:	andeq	ip, r1, r8, lsl #20
   1c79c:	andeq	ip, r1, r4, lsl sl
   1c7a0:	tst	r8, #16384	; 0x4000
   1c7a4:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c7a8:	sub	r1, r1, #49	; 0x31
   1c7ac:	mov	r2, #4
   1c7b0:	b	1c894 <__assert_fail@plt+0xb134>
   1c7b4:	movw	r1, #65280	; 0xff00
   1c7b8:	movt	r1, #65439	; 0xff9f
   1c7bc:	and	r0, r0, r1
   1c7c0:	orr	r0, r0, #1
   1c7c4:	orr	r0, r0, #2097152	; 0x200000
   1c7c8:	str	r0, [r5]
   1c7cc:	mov	r4, #1
   1c7d0:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c7d4:	tst	r8, #8
   1c7d8:	bne	1c824 <__assert_fail@plt+0xb0c4>
   1c7dc:	ldr	r1, [r7, #40]	; 0x28
   1c7e0:	ldr	r2, [r7, #48]	; 0x30
   1c7e4:	add	r1, r1, #1
   1c7e8:	cmp	r1, r2
   1c7ec:	beq	1c824 <__assert_fail@plt+0xb0c4>
   1c7f0:	str	r1, [r7, #40]	; 0x28
   1c7f4:	mov	r0, sp
   1c7f8:	mov	r1, r7
   1c7fc:	mov	r2, r8
   1c800:	bl	1c270 <__assert_fail@plt+0xab10>
   1c804:	ldr	r0, [r7, #40]	; 0x28
   1c808:	sub	r0, r0, #1
   1c80c:	str	r0, [r7, #40]	; 0x28
   1c810:	ldrb	r0, [sp, #4]
   1c814:	sub	r0, r0, #9
   1c818:	cmp	r0, #1
   1c81c:	bhi	1ca2c <__assert_fail@plt+0xb2cc>
   1c820:	ldr	r0, [r5]
   1c824:	mov	r1, #32
   1c828:	b	1c890 <__assert_fail@plt+0xb130>
   1c82c:	tst	r8, #8192	; 0x2000
   1c830:	bne	1c91c <__assert_fail@plt+0xb1bc>
   1c834:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c838:	tst	r8, #8192	; 0x2000
   1c83c:	bne	1c92c <__assert_fail@plt+0xb1cc>
   1c840:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c844:	mov	r1, #11
   1c848:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c84c:	movw	r1, #1026	; 0x402
   1c850:	tst	r8, r1
   1c854:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c858:	b	1c944 <__assert_fail@plt+0xb1e4>
   1c85c:	mov	r1, #5
   1c860:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c864:	movw	r1, #1026	; 0x402
   1c868:	tst	r8, r1
   1c86c:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c870:	b	1c97c <__assert_fail@plt+0xb21c>
   1c874:	mov	r1, #20
   1c878:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c87c:	movw	r1, #8
   1c880:	movt	r1, #128	; 0x80
   1c884:	tst	r8, r1
   1c888:	beq	1c8d8 <__assert_fail@plt+0xb178>
   1c88c:	mov	r1, #16
   1c890:	mov	r2, #12
   1c894:	bfi	r0, r2, #0, #8
   1c898:	str	r1, [r9]
   1c89c:	str	r0, [r9, #4]
   1c8a0:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c8a4:	and	r1, r8, #4608	; 0x1200
   1c8a8:	cmp	r1, #4608	; 0x1200
   1c8ac:	beq	1ca00 <__assert_fail@plt+0xb2a0>
   1c8b0:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c8b4:	and	r1, r8, #33792	; 0x8400
   1c8b8:	cmp	r1, #32768	; 0x8000
   1c8bc:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c8c0:	mov	r1, #10
   1c8c4:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c8c8:	and	r1, r8, #4608	; 0x1200
   1c8cc:	cmp	r1, #4608	; 0x1200
   1c8d0:	beq	1ca20 <__assert_fail@plt+0xb2c0>
   1c8d4:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c8d8:	ldr	r1, [r7, #40]	; 0x28
   1c8dc:	cmp	r1, #0
   1c8e0:	beq	1c88c <__assert_fail@plt+0xb12c>
   1c8e4:	tst	r8, #2048	; 0x800
   1c8e8:	beq	1ca2c <__assert_fail@plt+0xb2cc>
   1c8ec:	ldr	r2, [r7, #4]
   1c8f0:	add	r1, r1, r2
   1c8f4:	ldrb	r1, [r1, #-1]
   1c8f8:	cmp	r1, #10
   1c8fc:	beq	1c88c <__assert_fail@plt+0xb12c>
   1c900:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1c904:	tst	r8, #524288	; 0x80000
   1c908:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c90c:	mov	r1, #128	; 0x80
   1c910:	b	1c890 <__assert_fail@plt+0xb130>
   1c914:	tst	r8, #8192	; 0x2000
   1c918:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c91c:	mov	r1, #8
   1c920:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c924:	tst	r8, #8192	; 0x2000
   1c928:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c92c:	mov	r1, #9
   1c930:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c934:	movw	r1, #1026	; 0x402
   1c938:	and	r1, r8, r1
   1c93c:	cmp	r1, #2
   1c940:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c944:	mov	r1, #18
   1c948:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c94c:	tst	r8, #524288	; 0x80000
   1c950:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c954:	mov	r1, #6
   1c958:	b	1c890 <__assert_fail@plt+0xb130>
   1c95c:	tst	r8, #524288	; 0x80000
   1c960:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c964:	mov	r1, #9
   1c968:	b	1c890 <__assert_fail@plt+0xb130>
   1c96c:	movw	r1, #1026	; 0x402
   1c970:	and	r1, r8, r1
   1c974:	cmp	r1, #2
   1c978:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c97c:	mov	r1, #19
   1c980:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c984:	tst	r8, #524288	; 0x80000
   1c988:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c98c:	mov	r1, #512	; 0x200
   1c990:	b	1c890 <__assert_fail@plt+0xb130>
   1c994:	tst	r8, #524288	; 0x80000
   1c998:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c99c:	mov	r1, #35	; 0x23
   1c9a0:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c9a4:	tst	r8, #524288	; 0x80000
   1c9a8:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c9ac:	mov	r1, #33	; 0x21
   1c9b0:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c9b4:	tst	r8, #524288	; 0x80000
   1c9b8:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c9bc:	mov	r1, #64	; 0x40
   1c9c0:	b	1c890 <__assert_fail@plt+0xb130>
   1c9c4:	tst	r8, #524288	; 0x80000
   1c9c8:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c9cc:	mov	r1, #256	; 0x100
   1c9d0:	b	1c890 <__assert_fail@plt+0xb130>
   1c9d4:	tst	r8, #524288	; 0x80000
   1c9d8:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c9dc:	mov	r1, #34	; 0x22
   1c9e0:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c9e4:	tst	r8, #524288	; 0x80000
   1c9e8:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1c9ec:	mov	r1, #32
   1c9f0:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1c9f4:	and	r1, r8, #4608	; 0x1200
   1c9f8:	cmp	r1, #512	; 0x200
   1c9fc:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1ca00:	mov	r1, #23
   1ca04:	b	1ca24 <__assert_fail@plt+0xb2c4>
   1ca08:	tst	r8, #33792	; 0x8400
   1ca0c:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1ca10:	b	1c8c0 <__assert_fail@plt+0xb160>
   1ca14:	and	r1, r8, #4608	; 0x1200
   1ca18:	cmp	r1, #512	; 0x200
   1ca1c:	bne	1ca2c <__assert_fail@plt+0xb2cc>
   1ca20:	mov	r1, #24
   1ca24:	bfi	r0, r1, #0, #8
   1ca28:	str	r0, [r5]
   1ca2c:	mov	r0, r4
   1ca30:	sub	sp, fp, #24
   1ca34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ca38:	cmp	r3, #2
   1ca3c:	blt	1ca6c <__assert_fail@plt+0xb30c>
   1ca40:	ldr	r3, [r7, #8]
   1ca44:	ldr	r4, [r3, r2, lsl #2]
   1ca48:	cmn	r4, #1
   1ca4c:	beq	1c310 <__assert_fail@plt+0xabb0>
   1ca50:	ldr	r4, [r7, #28]
   1ca54:	add	r6, r6, #2
   1ca58:	cmp	r4, r6
   1ca5c:	beq	1ca6c <__assert_fail@plt+0xb30c>
   1ca60:	ldr	r3, [r3, r6, lsl #2]
   1ca64:	cmn	r3, #1
   1ca68:	beq	1c310 <__assert_fail@plt+0xabb0>
   1ca6c:	ldrb	r3, [r7, #76]	; 0x4c
   1ca70:	mov	r6, r2
   1ca74:	cmp	r3, #0
   1ca78:	beq	1ca84 <__assert_fail@plt+0xb324>
   1ca7c:	ldr	r6, [r7, #12]
   1ca80:	ldr	r6, [r6, r2, lsl #2]
   1ca84:	ldr	r4, [r7, #24]
   1ca88:	ldr	ip, [r7]
   1ca8c:	cmp	r3, #0
   1ca90:	add	r6, r4, r6
   1ca94:	add	r6, ip, r6
   1ca98:	ldrsb	r6, [r6]
   1ca9c:	beq	1c318 <__assert_fail@plt+0xabb8>
   1caa0:	cmn	r6, #1
   1caa4:	ble	1c310 <__assert_fail@plt+0xabb0>
   1caa8:	b	1c318 <__assert_fail@plt+0xabb8>
   1caac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cab0:	add	fp, sp, #28
   1cab4:	sub	sp, sp, #20
   1cab8:	ldr	r4, [fp, #12]
   1cabc:	ldr	r7, [fp, #8]
   1cac0:	ldr	sl, [r1]
   1cac4:	mov	r6, r2
   1cac8:	str	r0, [sp, #12]
   1cacc:	str	r1, [sp, #8]
   1cad0:	str	r3, [sp, #16]
   1cad4:	str	r4, [sp, #4]
   1cad8:	str	r7, [sp]
   1cadc:	bl	1ce00 <__assert_fail@plt+0xb6a0>
   1cae0:	mov	r3, r4
   1cae4:	mov	r4, r0
   1cae8:	cmp	r0, #0
   1caec:	bne	1cb18 <__assert_fail@plt+0xb3b8>
   1caf0:	ldr	r0, [r3]
   1caf4:	cmp	r0, #0
   1caf8:	beq	1cb18 <__assert_fail@plt+0xb3b8>
   1cafc:	b	1cde8 <__assert_fail@plt+0xb688>
   1cb00:	cmp	r4, #0
   1cb04:	cmpne	r5, #0
   1cb08:	bne	1cb7c <__assert_fail@plt+0xb41c>
   1cb0c:	cmp	r4, #0
   1cb10:	mov	r7, r8
   1cb14:	moveq	r4, r5
   1cb18:	ldrb	r0, [r6, #4]
   1cb1c:	orr	r1, r0, #8
   1cb20:	cmp	r1, #10
   1cb24:	beq	1cdec <__assert_fail@plt+0xb68c>
   1cb28:	cmp	r7, #0
   1cb2c:	beq	1cb38 <__assert_fail@plt+0xb3d8>
   1cb30:	cmp	r0, #9
   1cb34:	beq	1cdec <__assert_fail@plt+0xb68c>
   1cb38:	str	r3, [sp, #4]
   1cb3c:	mov	r9, r3
   1cb40:	ldr	r0, [sp, #12]
   1cb44:	ldr	r1, [sp, #8]
   1cb48:	ldr	r3, [sp, #16]
   1cb4c:	mov	r2, r6
   1cb50:	mov	r8, r7
   1cb54:	str	r7, [sp]
   1cb58:	bl	1ce00 <__assert_fail@plt+0xb6a0>
   1cb5c:	mov	r3, r9
   1cb60:	mov	r5, r0
   1cb64:	cmp	r0, #0
   1cb68:	bne	1cb00 <__assert_fail@plt+0xb3a0>
   1cb6c:	ldr	r0, [r3]
   1cb70:	cmp	r0, #0
   1cb74:	beq	1cb00 <__assert_fail@plt+0xb3a0>
   1cb78:	b	1cc00 <__assert_fail@plt+0xb4a0>
   1cb7c:	ldr	r1, [sl, #64]	; 0x40
   1cb80:	cmp	r1, #31
   1cb84:	beq	1cbd4 <__assert_fail@plt+0xb474>
   1cb88:	ldr	r0, [sl, #56]	; 0x38
   1cb8c:	add	r0, r0, r1, lsl #5
   1cb90:	add	r2, r1, #1
   1cb94:	mov	r1, #0
   1cb98:	mov	r7, r8
   1cb9c:	str	r2, [sl, #64]	; 0x40
   1cba0:	str	r1, [r0, #4]!
   1cba4:	stmib	r0, {r4, r5}
   1cba8:	str	r1, [r0, #12]
   1cbac:	str	r1, [r0, #16]
   1cbb0:	str	r1, [r0, #20]
   1cbb4:	mov	r1, #16
   1cbb8:	str	r1, [r0, #24]
   1cbbc:	mvn	r1, #0
   1cbc0:	str	r1, [r0, #28]
   1cbc4:	str	r0, [r4]
   1cbc8:	str	r0, [r5]
   1cbcc:	mov	r4, r0
   1cbd0:	b	1cb18 <__assert_fail@plt+0xb3b8>
   1cbd4:	mov	r0, #996	; 0x3e4
   1cbd8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1cbdc:	cmp	r0, #0
   1cbe0:	beq	1cca4 <__assert_fail@plt+0xb544>
   1cbe4:	ldr	r1, [sl, #56]	; 0x38
   1cbe8:	mov	r3, r9
   1cbec:	str	r1, [r0]
   1cbf0:	mov	r1, #0
   1cbf4:	str	r1, [sl, #64]	; 0x40
   1cbf8:	str	r0, [sl, #56]	; 0x38
   1cbfc:	b	1cb8c <__assert_fail@plt+0xb42c>
   1cc00:	cmp	r4, #0
   1cc04:	beq	1cde8 <__assert_fail@plt+0xb688>
   1cc08:	movw	r5, #255	; 0xff
   1cc0c:	movt	r5, #4
   1cc10:	mov	r6, r4
   1cc14:	ldr	r4, [r4, #4]
   1cc18:	cmp	r4, #0
   1cc1c:	bne	1cc10 <__assert_fail@plt+0xb4b0>
   1cc20:	ldr	r4, [r6, #8]
   1cc24:	cmp	r4, #0
   1cc28:	bne	1cc10 <__assert_fail@plt+0xb4b0>
   1cc2c:	ldr	r0, [r6, #24]
   1cc30:	and	r0, r0, r5
   1cc34:	cmp	r0, #3
   1cc38:	beq	1cc6c <__assert_fail@plt+0xb50c>
   1cc3c:	cmp	r0, #6
   1cc40:	bne	1cc78 <__assert_fail@plt+0xb518>
   1cc44:	ldr	r4, [r6, #20]
   1cc48:	ldr	r0, [r4]
   1cc4c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cc50:	ldr	r0, [r4, #4]
   1cc54:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cc58:	ldr	r0, [r4, #8]
   1cc5c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cc60:	ldr	r0, [r4, #12]
   1cc64:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cc68:	b	1cc70 <__assert_fail@plt+0xb510>
   1cc6c:	ldr	r4, [r6, #20]
   1cc70:	mov	r0, r4
   1cc74:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cc78:	ldr	r0, [r6]
   1cc7c:	cmp	r0, #0
   1cc80:	beq	1cde8 <__assert_fail@plt+0xb688>
   1cc84:	ldr	r4, [r0, #8]
   1cc88:	cmp	r4, r6
   1cc8c:	mov	r6, r0
   1cc90:	beq	1cc2c <__assert_fail@plt+0xb4cc>
   1cc94:	cmp	r4, #0
   1cc98:	mov	r6, r0
   1cc9c:	beq	1cc2c <__assert_fail@plt+0xb4cc>
   1cca0:	b	1cc10 <__assert_fail@plt+0xb4b0>
   1cca4:	movw	r6, #255	; 0xff
   1cca8:	mov	r1, r9
   1ccac:	movt	r6, #4
   1ccb0:	mov	r7, r5
   1ccb4:	ldr	r5, [r5, #4]
   1ccb8:	cmp	r5, #0
   1ccbc:	bne	1ccb0 <__assert_fail@plt+0xb550>
   1ccc0:	ldr	r5, [r7, #8]
   1ccc4:	cmp	r5, #0
   1ccc8:	bne	1ccb0 <__assert_fail@plt+0xb550>
   1cccc:	ldr	r0, [r7, #24]
   1ccd0:	and	r0, r0, r6
   1ccd4:	cmp	r0, #3
   1ccd8:	beq	1cd0c <__assert_fail@plt+0xb5ac>
   1ccdc:	cmp	r0, #6
   1cce0:	bne	1cd1c <__assert_fail@plt+0xb5bc>
   1cce4:	ldr	r5, [r7, #20]
   1cce8:	ldr	r0, [r5]
   1ccec:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ccf0:	ldr	r0, [r5, #4]
   1ccf4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ccf8:	ldr	r0, [r5, #8]
   1ccfc:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cd00:	ldr	r0, [r5, #12]
   1cd04:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cd08:	b	1cd10 <__assert_fail@plt+0xb5b0>
   1cd0c:	ldr	r5, [r7, #20]
   1cd10:	mov	r0, r5
   1cd14:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cd18:	mov	r1, r9
   1cd1c:	ldr	r0, [r7]
   1cd20:	cmp	r0, #0
   1cd24:	beq	1cd48 <__assert_fail@plt+0xb5e8>
   1cd28:	ldr	r5, [r0, #8]
   1cd2c:	cmp	r5, r7
   1cd30:	mov	r7, r0
   1cd34:	beq	1cccc <__assert_fail@plt+0xb56c>
   1cd38:	cmp	r5, #0
   1cd3c:	mov	r7, r0
   1cd40:	beq	1cccc <__assert_fail@plt+0xb56c>
   1cd44:	b	1ccb0 <__assert_fail@plt+0xb550>
   1cd48:	mov	r5, r4
   1cd4c:	ldr	r4, [r4, #4]
   1cd50:	cmp	r4, #0
   1cd54:	bne	1cd48 <__assert_fail@plt+0xb5e8>
   1cd58:	ldr	r4, [r5, #8]
   1cd5c:	cmp	r4, #0
   1cd60:	bne	1cd48 <__assert_fail@plt+0xb5e8>
   1cd64:	ldr	r0, [r5, #24]
   1cd68:	and	r0, r0, r6
   1cd6c:	cmp	r0, #3
   1cd70:	beq	1cda4 <__assert_fail@plt+0xb644>
   1cd74:	cmp	r0, #6
   1cd78:	bne	1cdb4 <__assert_fail@plt+0xb654>
   1cd7c:	ldr	r4, [r5, #20]
   1cd80:	ldr	r0, [r4]
   1cd84:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cd88:	ldr	r0, [r4, #4]
   1cd8c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cd90:	ldr	r0, [r4, #8]
   1cd94:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cd98:	ldr	r0, [r4, #12]
   1cd9c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cda0:	b	1cda8 <__assert_fail@plt+0xb648>
   1cda4:	ldr	r4, [r5, #20]
   1cda8:	mov	r0, r4
   1cdac:	bl	141b8 <__assert_fail@plt+0x2a58>
   1cdb0:	mov	r1, r9
   1cdb4:	ldr	r0, [r5]
   1cdb8:	cmp	r0, #0
   1cdbc:	beq	1cde0 <__assert_fail@plt+0xb680>
   1cdc0:	ldr	r4, [r0, #8]
   1cdc4:	cmp	r4, r5
   1cdc8:	mov	r5, r0
   1cdcc:	beq	1cd64 <__assert_fail@plt+0xb604>
   1cdd0:	cmp	r4, #0
   1cdd4:	mov	r5, r0
   1cdd8:	beq	1cd64 <__assert_fail@plt+0xb604>
   1cddc:	b	1cd48 <__assert_fail@plt+0xb5e8>
   1cde0:	mov	r0, #12
   1cde4:	str	r0, [r1]
   1cde8:	mov	r4, #0
   1cdec:	mov	r0, r4
   1cdf0:	sub	sp, fp, #28
   1cdf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdf8:	nop	{0}
   1cdfc:	nop	{0}
   1ce00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce04:	add	fp, sp, #28
   1ce08:	sub	sp, sp, #156	; 0x9c
   1ce0c:	mov	r5, r0
   1ce10:	mov	lr, r2
   1ce14:	ldr	r0, [r2, #4]
   1ce18:	ldr	r2, [fp, #12]
   1ce1c:	mov	r7, r1
   1ce20:	mvn	r1, #0
   1ce24:	mov	r9, #0
   1ce28:	mov	ip, r3
   1ce2c:	ldr	sl, [r7]
   1ce30:	str	r2, [sp, #20]
   1ce34:	uxtab	r1, r1, r0
   1ce38:	ldr	r6, [fp, #8]
   1ce3c:	add	r2, pc, #12
   1ce40:	str	r5, [sp, #28]
   1ce44:	str	r3, [sp, #48]	; 0x30
   1ce48:	str	lr, [sp, #44]	; 0x2c
   1ce4c:	ldr	pc, [r2, r1, lsl #2]
   1ce50:	andeq	sp, r1, r8, lsr #2
   1ce54:	andeq	lr, r1, r8, lsl #26
   1ce58:	andeq	pc, r1, r0, lsr #7
   1ce5c:	andeq	sp, r1, r8, ror #5
   1ce60:	andeq	sp, r1, r8, ror #6
   1ce64:	andeq	pc, r1, r0, lsr #7
   1ce68:	andeq	pc, r1, r0, lsr #7
   1ce6c:	ldrdeq	sp, [r1], -r0
   1ce70:	andeq	ip, r1, r0, lsl #30
   1ce74:	andeq	lr, r1, r8, lsl #26
   1ce78:	strdeq	ip, [r1], -r0
   1ce7c:	strdeq	ip, [r1], -r4
   1ce80:	andeq	pc, r1, r0, lsr #7
   1ce84:	andeq	pc, r1, r0, lsr #7
   1ce88:	andeq	pc, r1, r0, lsr #7
   1ce8c:	andeq	pc, r1, r0, lsr #7
   1ce90:	andeq	pc, r1, r0, lsr #7
   1ce94:	strdeq	ip, [r1], -r0
   1ce98:	strdeq	ip, [r1], -r0
   1ce9c:	strheq	sp, [r1], -r4
   1cea0:	andeq	pc, r1, r0, lsr #7
   1cea4:	andeq	pc, r1, r0, lsr #7
   1cea8:	andeq	sp, r1, ip, asr #8
   1ceac:	andeq	ip, r1, r0, lsl pc
   1ceb0:	andeq	pc, r1, r0, lsr #7
   1ceb4:	andeq	pc, r1, r0, lsr #7
   1ceb8:	andeq	pc, r1, r0, lsr #7
   1cebc:	andeq	pc, r1, r0, lsr #7
   1cec0:	andeq	pc, r1, r0, lsr #7
   1cec4:	andeq	pc, r1, r0, lsr #7
   1cec8:	andeq	pc, r1, r0, lsr #7
   1cecc:	andeq	ip, r1, ip, ror #30
   1ced0:	andeq	ip, r1, ip, ror #30
   1ced4:	andeq	ip, r1, ip, lsl #31
   1ced8:	andeq	ip, r1, ip, lsl #31
   1cedc:	andeq	sp, r1, ip, asr r4
   1cee0:	andeq	r0, r0, r0
   1cee4:	mvnseq	r0, #0
   1cee8:			; <UNDEFINED> instruction: 0x87fffffe
   1ceec:			; <UNDEFINED> instruction: 0x07fffffe
   1cef0:	tst	ip, #32
   1cef4:	bne	1d454 <__assert_fail@plt+0xbcf4>
   1cef8:	tst	ip, #16
   1cefc:	bne	1d46c <__assert_fail@plt+0xbd0c>
   1cf00:	tst	ip, #131072	; 0x20000
   1cf04:	uxtbeq	r1, r0
   1cf08:	cmpeq	r1, #9
   1cf0c:	beq	1d4ac <__assert_fail@plt+0xbd4c>
   1cf10:	mov	r1, #1
   1cf14:	bfi	r0, r1, #0, #8
   1cf18:	str	r0, [lr, #4]
   1cf1c:	ldr	r1, [sl, #64]	; 0x40
   1cf20:	cmp	r1, #31
   1cf24:	beq	1eeb4 <__assert_fail@plt+0xd754>
   1cf28:	ldr	r0, [sl, #56]	; 0x38
   1cf2c:	add	r7, r0, r1, lsl #5
   1cf30:	add	r2, r1, #1
   1cf34:	mov	r0, #0
   1cf38:	mvn	r3, #0
   1cf3c:	str	r2, [sl, #64]	; 0x40
   1cf40:	str	r0, [r7, #4]!
   1cf44:	str	r0, [r7, #8]
   1cf48:	str	r0, [r7, #4]
   1cf4c:	ldm	lr, {r1, r2}
   1cf50:	str	r3, [r7, #28]
   1cf54:	str	r0, [r7, #16]
   1cf58:	str	r0, [r7, #12]
   1cf5c:	bic	r0, r2, #786432	; 0xc0000
   1cf60:	str	r1, [r7, #20]
   1cf64:	str	r0, [r7, #24]
   1cf68:	b	1de90 <__assert_fail@plt+0xc730>
   1cf6c:	mvn	r2, #32
   1cf70:	ldr	r1, [r5, #64]	; 0x40
   1cf74:	movw	r3, #50425	; 0xc4f9
   1cf78:	uxtab	r0, r2, r0
   1cf7c:	movw	r2, #51646	; 0xc9be
   1cf80:	movt	r3, #2
   1cf84:	movt	r2, #2
   1cf88:	b	1cfa8 <__assert_fail@plt+0xb848>
   1cf8c:	mvn	r2, #34	; 0x22
   1cf90:	ldr	r1, [r5, #64]	; 0x40
   1cf94:	movw	r3, #49219	; 0xc043
   1cf98:	uxtab	r0, r2, r0
   1cf9c:	movw	r2, #51652	; 0xc9c4
   1cfa0:	movt	r3, #2
   1cfa4:	movt	r2, #2
   1cfa8:	clz	r0, r0
   1cfac:	lsr	r0, r0, #5
   1cfb0:	str	r0, [sp]
   1cfb4:	ldr	r4, [sp, #20]
   1cfb8:	str	r4, [sp, #4]
   1cfbc:	mov	r0, sl
   1cfc0:	bl	1f3a0 <__assert_fail@plt+0xdc40>
   1cfc4:	mov	r7, r0
   1cfc8:	cmp	r0, #0
   1cfcc:	bne	1cfe8 <__assert_fail@plt+0xb888>
   1cfd0:	ldr	r0, [r4]
   1cfd4:	cmp	r0, #0
   1cfd8:	ldr	ip, [sp, #48]	; 0x30
   1cfdc:	ldr	lr, [sp, #44]	; 0x2c
   1cfe0:	beq	1de90 <__assert_fail@plt+0xc730>
   1cfe4:	b	1ed08 <__assert_fail@plt+0xd5a8>
   1cfe8:	ldr	ip, [sp, #48]	; 0x30
   1cfec:	ldr	lr, [sp, #44]	; 0x2c
   1cff0:	b	1de90 <__assert_fail@plt+0xc730>
   1cff4:	ldr	r0, [lr]
   1cff8:	movw	r1, #783	; 0x30f
   1cffc:	tst	r0, r1
   1d000:	beq	1d048 <__assert_fail@plt+0xb8e8>
   1d004:	ldrb	r0, [sl, #88]	; 0x58
   1d008:	tst	r0, #16
   1d00c:	bne	1d044 <__assert_fail@plt+0xb8e4>
   1d010:	orr	r1, r0, #16
   1d014:	tst	r0, #8
   1d018:	strb	r1, [sl, #88]	; 0x58
   1d01c:	bne	1f1b8 <__assert_fail@plt+0xda58>
   1d020:	sub	r1, pc, #328	; 0x148
   1d024:	tst	r0, #4
   1d028:	vld1.64	{d16-d17}, [r1 :128]
   1d02c:	add	r1, sl, #96	; 0x60
   1d030:	vst1.32	{d16-d17}, [r1]
   1d034:	beq	1f1c4 <__assert_fail@plt+0xda64>
   1d038:	vmov.i32	q8, #0	; 0x00000000
   1d03c:	add	r0, sl, #112	; 0x70
   1d040:	vst1.32	{d16-d17}, [r0]
   1d044:	ldr	r0, [lr]
   1d048:	cmp	r0, #512	; 0x200
   1d04c:	beq	1dc90 <__assert_fail@plt+0xc530>
   1d050:	cmp	r0, #256	; 0x100
   1d054:	bne	1dd9c <__assert_fail@plt+0xc63c>
   1d058:	mov	r0, #6
   1d05c:	str	r0, [lr]
   1d060:	ldr	r1, [sl, #64]	; 0x40
   1d064:	cmp	r1, #31
   1d068:	beq	1f118 <__assert_fail@plt+0xd9b8>
   1d06c:	ldr	r0, [sl, #56]	; 0x38
   1d070:	add	r4, r0, r1, lsl #5
   1d074:	add	r2, r1, #1
   1d078:	mov	r0, #0
   1d07c:	mvn	r3, #0
   1d080:	str	r2, [sl, #64]	; 0x40
   1d084:	str	r0, [r4, #4]!
   1d088:	str	r0, [r4, #8]
   1d08c:	str	r0, [r4, #4]
   1d090:	ldm	lr, {r1, r2}
   1d094:	str	r3, [r4, #28]
   1d098:	str	r0, [r4, #16]
   1d09c:	str	r0, [r4, #12]
   1d0a0:	bic	r0, r2, #786432	; 0xc0000
   1d0a4:	str	r1, [r4, #20]
   1d0a8:	str	r0, [r4, #24]
   1d0ac:	mov	r0, #9
   1d0b0:	b	1dce8 <__assert_fail@plt+0xc588>
   1d0b4:	mov	r9, #0
   1d0b8:	mov	r0, #32
   1d0bc:	mov	r1, #1
   1d0c0:	str	r9, [fp, #-32]	; 0xffffffe0
   1d0c4:	bl	2b20c <__assert_fail@plt+0x19aac>
   1d0c8:	mov	r8, r0
   1d0cc:	mov	r0, #40	; 0x28
   1d0d0:	mov	r1, #1
   1d0d4:	bl	2b20c <__assert_fail@plt+0x19aac>
   1d0d8:	mov	r7, r0
   1d0dc:	cmp	r8, #0
   1d0e0:	cmpne	r7, #0
   1d0e4:	beq	1ef14 <__assert_fail@plt+0xd7b4>
   1d0e8:	ldr	r6, [sp, #44]	; 0x2c
   1d0ec:	ldr	r4, [sp, #48]	; 0x30
   1d0f0:	mov	r1, r5
   1d0f4:	mov	r0, r6
   1d0f8:	mov	r2, r4
   1d0fc:	bl	1f75c <__assert_fail@plt+0xdffc>
   1d100:	mov	r3, r0
   1d104:	ldr	r0, [r6, #4]
   1d108:	str	r7, [sp, #60]	; 0x3c
   1d10c:	uxtb	r1, r0
   1d110:	cmp	r1, #25
   1d114:	beq	1d4b4 <__assert_fail@plt+0xbd54>
   1d118:	cmp	r1, #2
   1d11c:	beq	1ef00 <__assert_fail@plt+0xd7a0>
   1d120:	mov	r1, #0
   1d124:	b	1d50c <__assert_fail@plt+0xbdac>
   1d128:	ldr	r1, [sl, #64]	; 0x40
   1d12c:	cmp	r1, #31
   1d130:	beq	1ef28 <__assert_fail@plt+0xd7c8>
   1d134:	ldr	r0, [sl, #56]	; 0x38
   1d138:	add	r4, r0, r1, lsl #5
   1d13c:	add	r2, r1, #1
   1d140:	mov	r0, #0
   1d144:	mvn	r3, #0
   1d148:	str	r2, [sl, #64]	; 0x40
   1d14c:	str	r0, [r4, #4]!
   1d150:	str	r0, [r4, #8]
   1d154:	str	r0, [r4, #4]
   1d158:	ldm	lr, {r1, r2}
   1d15c:	str	r3, [r4, #28]
   1d160:	str	r0, [r4, #16]
   1d164:	str	r0, [r4, #12]
   1d168:	bic	r0, r2, #786432	; 0xc0000
   1d16c:	str	r1, [r4, #20]
   1d170:	str	r0, [r4, #24]
   1d174:	ldr	r0, [sl, #92]	; 0x5c
   1d178:	cmp	r0, #2
   1d17c:	blt	1d464 <__assert_fail@plt+0xbd04>
   1d180:	ldr	r0, [r5, #40]	; 0x28
   1d184:	ldr	r1, [r5, #56]	; 0x38
   1d188:	cmp	r1, r0
   1d18c:	ble	1d464 <__assert_fail@plt+0xbd04>
   1d190:	mov	r8, #0
   1d194:	mvn	r9, #0
   1d198:	ldr	r1, [r5, #28]
   1d19c:	cmp	r0, r1
   1d1a0:	beq	1d464 <__assert_fail@plt+0xbd04>
   1d1a4:	ldr	r1, [r5, #8]
   1d1a8:	ldr	r0, [r1, r0, lsl #2]
   1d1ac:	cmn	r0, #1
   1d1b0:	bne	1d464 <__assert_fail@plt+0xbd04>
   1d1b4:	mov	r0, lr
   1d1b8:	mov	r1, r5
   1d1bc:	mov	r2, ip
   1d1c0:	bl	1c270 <__assert_fail@plt+0xab10>
   1d1c4:	ldr	r1, [r5, #40]	; 0x28
   1d1c8:	add	r0, r1, r0
   1d1cc:	str	r0, [r5, #40]	; 0x28
   1d1d0:	ldr	r1, [sl, #64]	; 0x40
   1d1d4:	cmp	r1, #31
   1d1d8:	beq	1d280 <__assert_fail@plt+0xbb20>
   1d1dc:	ldr	r0, [sl, #56]	; 0x38
   1d1e0:	add	r6, r0, r1, lsl #5
   1d1e4:	ldr	lr, [sp, #44]	; 0x2c
   1d1e8:	add	r2, r1, #1
   1d1ec:	ldr	ip, [sp, #48]	; 0x30
   1d1f0:	str	r2, [sl, #64]	; 0x40
   1d1f4:	str	r8, [r6, #4]!
   1d1f8:	str	r8, [r6, #8]
   1d1fc:	str	r8, [r6, #4]
   1d200:	ldm	lr, {r0, r1}
   1d204:	str	r9, [r6, #28]
   1d208:	str	r8, [r6, #16]
   1d20c:	str	r8, [r6, #12]
   1d210:	str	r0, [r6, #20]
   1d214:	bic	r0, r1, #786432	; 0xc0000
   1d218:	str	r0, [r6, #24]
   1d21c:	ldr	r1, [sl, #64]	; 0x40
   1d220:	cmp	r1, #31
   1d224:	beq	1d2a8 <__assert_fail@plt+0xbb48>
   1d228:	ldr	r0, [sl, #56]	; 0x38
   1d22c:	add	r7, r0, r1, lsl #5
   1d230:	add	r2, r1, #1
   1d234:	mov	r0, #16
   1d238:	cmp	r6, #0
   1d23c:	str	r2, [sl, #64]	; 0x40
   1d240:	str	r8, [r7, #4]!
   1d244:	stmib	r7, {r4, r6, r8}
   1d248:	str	r8, [r7, #16]
   1d24c:	str	r8, [r7, #20]
   1d250:	str	r0, [r7, #24]
   1d254:	str	r9, [r7, #28]
   1d258:	str	r7, [r4]
   1d25c:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1d260:	ldr	r5, [sp, #28]
   1d264:	str	r7, [r6]
   1d268:	mov	r4, r7
   1d26c:	ldr	r0, [r5, #40]	; 0x28
   1d270:	ldr	r1, [r5, #56]	; 0x38
   1d274:	cmp	r1, r0
   1d278:	bgt	1d198 <__assert_fail@plt+0xba38>
   1d27c:	b	1de90 <__assert_fail@plt+0xc730>
   1d280:	mov	r0, #996	; 0x3e4
   1d284:	bl	2b260 <__assert_fail@plt+0x19b00>
   1d288:	cmp	r0, #0
   1d28c:	beq	1d2d8 <__assert_fail@plt+0xbb78>
   1d290:	ldr	r1, [sl, #56]	; 0x38
   1d294:	str	r1, [r0]
   1d298:	mov	r1, #0
   1d29c:	str	r1, [sl, #64]	; 0x40
   1d2a0:	str	r0, [sl, #56]	; 0x38
   1d2a4:	b	1d1e0 <__assert_fail@plt+0xba80>
   1d2a8:	mov	r0, #996	; 0x3e4
   1d2ac:	bl	2b260 <__assert_fail@plt+0x19b00>
   1d2b0:	ldr	lr, [sp, #44]	; 0x2c
   1d2b4:	ldr	ip, [sp, #48]	; 0x30
   1d2b8:	cmp	r0, #0
   1d2bc:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1d2c0:	ldr	r1, [sl, #56]	; 0x38
   1d2c4:	str	r1, [r0]
   1d2c8:	mov	r1, #0
   1d2cc:	str	r1, [sl, #64]	; 0x40
   1d2d0:	str	r0, [sl, #56]	; 0x38
   1d2d4:	b	1d22c <__assert_fail@plt+0xbacc>
   1d2d8:	ldr	ip, [sp, #48]	; 0x30
   1d2dc:	ldr	lr, [sp, #44]	; 0x2c
   1d2e0:	mov	r6, #0
   1d2e4:	b	1d21c <__assert_fail@plt+0xbabc>
   1d2e8:	ldr	r0, [lr]
   1d2ec:	ldr	r2, [sl, #84]	; 0x54
   1d2f0:	mov	r1, #1
   1d2f4:	tst	r2, r1, lsl r0
   1d2f8:	beq	1ef5c <__assert_fail@plt+0xd7fc>
   1d2fc:	lsl	r0, r1, r0
   1d300:	ldr	r1, [sl, #64]	; 0x40
   1d304:	ldr	r2, [sl, #80]	; 0x50
   1d308:	orr	r0, r2, r0
   1d30c:	cmp	r1, #31
   1d310:	str	r0, [sl, #80]	; 0x50
   1d314:	beq	1ef98 <__assert_fail@plt+0xd838>
   1d318:	ldr	r0, [sl, #56]	; 0x38
   1d31c:	add	r7, r0, r1, lsl #5
   1d320:	add	r2, r1, #1
   1d324:	mov	r0, #0
   1d328:	mvn	r3, #0
   1d32c:	str	r2, [sl, #64]	; 0x40
   1d330:	str	r0, [r7, #4]!
   1d334:	str	r0, [r7, #8]
   1d338:	str	r0, [r7, #4]
   1d33c:	ldm	lr, {r1, r2}
   1d340:	str	r3, [r7, #28]
   1d344:	str	r0, [r7, #16]
   1d348:	str	r0, [r7, #12]
   1d34c:	bic	r0, r2, #786432	; 0xc0000
   1d350:	str	r1, [r7, #20]
   1d354:	str	r0, [r7, #24]
   1d358:	ldr	r0, [sl, #76]	; 0x4c
   1d35c:	add	r0, r0, #1
   1d360:	str	r0, [sl, #76]	; 0x4c
   1d364:	b	1d3c0 <__assert_fail@plt+0xbc60>
   1d368:	ldr	r1, [sl, #64]	; 0x40
   1d36c:	cmp	r1, #31
   1d370:	beq	1ef64 <__assert_fail@plt+0xd804>
   1d374:	ldr	r0, [sl, #56]	; 0x38
   1d378:	add	r7, r0, r1, lsl #5
   1d37c:	add	r2, r1, #1
   1d380:	mov	r0, #0
   1d384:	mvn	r3, #0
   1d388:	str	r2, [sl, #64]	; 0x40
   1d38c:	str	r0, [r7, #4]!
   1d390:	str	r0, [r7, #8]
   1d394:	str	r0, [r7, #4]
   1d398:	ldm	lr, {r1, r2}
   1d39c:	str	r3, [r7, #28]
   1d3a0:	str	r0, [r7, #16]
   1d3a4:	str	r0, [r7, #12]
   1d3a8:	bic	r0, r2, #786432	; 0xc0000
   1d3ac:	str	r1, [r7, #20]
   1d3b0:	str	r0, [r7, #24]
   1d3b4:	ldr	r0, [sl, #92]	; 0x5c
   1d3b8:	cmp	r0, #2
   1d3bc:	blt	1de90 <__assert_fail@plt+0xc730>
   1d3c0:	ldrb	r0, [sl, #88]	; 0x58
   1d3c4:	orr	r0, r0, #2
   1d3c8:	strb	r0, [sl, #88]	; 0x58
   1d3cc:	b	1de90 <__assert_fail@plt+0xc730>
   1d3d0:	ldr	r4, [r7, #24]
   1d3d4:	orr	r2, ip, #8388608	; 0x800000
   1d3d8:	mov	r1, r5
   1d3dc:	add	r0, r4, #1
   1d3e0:	str	r0, [r7, #24]
   1d3e4:	mov	r0, lr
   1d3e8:	bl	1c270 <__assert_fail@plt+0xab10>
   1d3ec:	ldr	r1, [r5, #40]	; 0x28
   1d3f0:	ldr	lr, [sp, #44]	; 0x2c
   1d3f4:	mov	r9, #0
   1d3f8:	add	r0, r1, r0
   1d3fc:	str	r0, [r5, #40]	; 0x28
   1d400:	ldrb	r0, [lr, #4]
   1d404:	cmp	r0, #9
   1d408:	beq	1de20 <__assert_fail@plt+0xc6c0>
   1d40c:	add	r0, r6, #1
   1d410:	mov	r1, r7
   1d414:	mov	r2, lr
   1d418:	mov	r7, lr
   1d41c:	str	r0, [sp]
   1d420:	mov	r0, r5
   1d424:	ldr	r6, [sp, #20]
   1d428:	str	r6, [sp, #4]
   1d42c:	ldr	r3, [sp, #48]	; 0x30
   1d430:	bl	1c004 <__assert_fail@plt+0xa8a4>
   1d434:	mov	r9, r0
   1d438:	ldr	r0, [r6]
   1d43c:	cmp	r0, #0
   1d440:	beq	1de10 <__assert_fail@plt+0xc6b0>
   1d444:	mov	r9, #0
   1d448:	b	1ed08 <__assert_fail@plt+0xd5a8>
   1d44c:	tst	ip, #16777216	; 0x1000000
   1d450:	beq	1cef0 <__assert_fail@plt+0xb790>
   1d454:	mov	r0, #13
   1d458:	b	1dd94 <__assert_fail@plt+0xc634>
   1d45c:	mov	r0, #5
   1d460:	b	1dd94 <__assert_fail@plt+0xc634>
   1d464:	mov	r7, r4
   1d468:	b	1de90 <__assert_fail@plt+0xc730>
   1d46c:	mov	r0, lr
   1d470:	mov	r1, r5
   1d474:	mov	r2, ip
   1d478:	mov	r4, ip
   1d47c:	mov	r6, lr
   1d480:	bl	1c270 <__assert_fail@plt+0xab10>
   1d484:	ldr	r1, [r5, #40]	; 0x28
   1d488:	mov	r2, r6
   1d48c:	mov	r3, r4
   1d490:	add	r0, r1, r0
   1d494:	mov	r1, r7
   1d498:	str	r0, [r5, #40]	; 0x28
   1d49c:	mov	r0, r5
   1d4a0:	sub	sp, fp, #28
   1d4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4a8:	b	1ce00 <__assert_fail@plt+0xb6a0>
   1d4ac:	mov	r0, #16
   1d4b0:	b	1dd94 <__assert_fail@plt+0xc634>
   1d4b4:	ldrb	r0, [r7, #16]
   1d4b8:	tst	r4, #256	; 0x100
   1d4bc:	orr	r0, r0, #1
   1d4c0:	strb	r0, [r7, #16]
   1d4c4:	beq	1d4d4 <__assert_fail@plt+0xbd74>
   1d4c8:	ldr	r0, [r8]
   1d4cc:	orr	r0, r0, #1024	; 0x400
   1d4d0:	str	r0, [r8]
   1d4d4:	ldr	r0, [r5, #40]	; 0x28
   1d4d8:	mov	r1, r5
   1d4dc:	mov	r2, r4
   1d4e0:	add	r0, r0, r3
   1d4e4:	str	r0, [r5, #40]	; 0x28
   1d4e8:	mov	r0, r6
   1d4ec:	bl	1f75c <__assert_fail@plt+0xdffc>
   1d4f0:	ldr	r6, [sp, #44]	; 0x2c
   1d4f4:	mov	r3, r0
   1d4f8:	ldr	r0, [r6, #4]
   1d4fc:	uxtb	r1, r0
   1d500:	cmp	r1, #2
   1d504:	beq	1ef00 <__assert_fail@plt+0xd7a0>
   1d508:	mov	r1, #1
   1d50c:	str	r1, [sp, #56]	; 0x38
   1d510:	uxtb	r1, r0
   1d514:	mov	r2, r6
   1d518:	ldr	r7, [sp, #48]	; 0x30
   1d51c:	cmp	r1, #21
   1d520:	moveq	r1, #1
   1d524:	bfieq	r0, r1, #0, #8
   1d528:	mov	r1, r5
   1d52c:	streq	r0, [r6, #4]
   1d530:	sub	r0, fp, #80	; 0x50
   1d534:	str	r0, [fp, #-36]	; 0xffffffdc
   1d538:	mov	r0, #3
   1d53c:	str	r0, [fp, #-40]	; 0xffffffd8
   1d540:	mov	r0, #1
   1d544:	str	r7, [sp]
   1d548:	str	r0, [sp, #4]
   1d54c:	sub	r0, fp, #40	; 0x28
   1d550:	bl	1f8d4 <__assert_fail@plt+0xe174>
   1d554:	cmp	r0, #0
   1d558:	bne	1eee8 <__assert_fail@plt+0xd788>
   1d55c:	and	r0, r7, #65536	; 0x10000
   1d560:	mov	r2, r7
   1d564:	str	r0, [sp, #40]	; 0x28
   1d568:	mov	r0, #0
   1d56c:	str	r0, [sp, #36]	; 0x24
   1d570:	mov	r0, #0
   1d574:	str	r0, [sp, #32]
   1d578:	ldr	r4, [sp, #44]	; 0x2c
   1d57c:	ldr	r7, [sp, #60]	; 0x3c
   1d580:	mov	r0, r4
   1d584:	mov	r1, r5
   1d588:	bl	1f75c <__assert_fail@plt+0xdffc>
   1d58c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1d590:	mov	r9, r0
   1d594:	cmp	r6, #2
   1d598:	beq	1d778 <__assert_fail@plt+0xc018>
   1d59c:	cmp	r6, #4
   1d5a0:	bne	1d5e4 <__assert_fail@plt+0xbe84>
   1d5a4:	ldr	r5, [sp, #28]
   1d5a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d5ac:	mov	r2, r7
   1d5b0:	sub	r3, fp, #32
   1d5b4:	ldr	r0, [r5, #64]	; 0x40
   1d5b8:	str	r1, [sp]
   1d5bc:	ldr	r1, [sp, #48]	; 0x30
   1d5c0:	str	r1, [sp, #4]
   1d5c4:	mov	r1, r8
   1d5c8:	bl	1fba0 <__assert_fail@plt+0xe440>
   1d5cc:	ldr	r1, [sp, #20]
   1d5d0:	ldr	lr, [sp, #44]	; 0x2c
   1d5d4:	cmp	r0, #0
   1d5d8:	str	r0, [r1]
   1d5dc:	beq	1d7c0 <__assert_fail@plt+0xc060>
   1d5e0:	b	1ee70 <__assert_fail@plt+0xd710>
   1d5e4:	ldr	r0, [sp, #44]	; 0x2c
   1d5e8:	ldr	r2, [sp, #48]	; 0x30
   1d5ec:	mov	r4, r9
   1d5f0:	mov	r9, #7
   1d5f4:	str	sl, [sp, #52]	; 0x34
   1d5f8:	ldrb	r0, [r0, #4]
   1d5fc:	cmp	r0, #22
   1d600:	beq	1d610 <__assert_fail@plt+0xbeb0>
   1d604:	cmp	r0, #2
   1d608:	bne	1d72c <__assert_fail@plt+0xbfcc>
   1d60c:	b	1ee5c <__assert_fail@plt+0xd6fc>
   1d610:	ldr	r7, [sp, #28]
   1d614:	mov	r5, r4
   1d618:	ldr	r0, [r7, #40]	; 0x28
   1d61c:	mov	r1, r7
   1d620:	add	r0, r0, r4
   1d624:	str	r0, [r7, #40]	; 0x28
   1d628:	add	r0, sp, #64	; 0x40
   1d62c:	bl	1f75c <__assert_fail@plt+0xdffc>
   1d630:	mov	r3, r0
   1d634:	ldrb	r0, [sp, #68]	; 0x44
   1d638:	cmp	r0, #21
   1d63c:	beq	1d714 <__assert_fail@plt+0xbfb4>
   1d640:	ldr	r4, [sp, #48]	; 0x30
   1d644:	cmp	r0, #2
   1d648:	beq	1ee5c <__assert_fail@plt+0xd6fc>
   1d64c:	mov	r0, #3
   1d650:	str	r8, [sp, #24]
   1d654:	add	r2, sp, #64	; 0x40
   1d658:	str	r0, [fp, #-48]	; 0xffffffd0
   1d65c:	add	r0, sp, #72	; 0x48
   1d660:	str	r0, [fp, #-44]	; 0xffffffd4
   1d664:	mov	r0, #1
   1d668:	str	r4, [sp]
   1d66c:	str	r0, [sp, #4]
   1d670:	sub	r0, fp, #48	; 0x30
   1d674:	ldr	r7, [sp, #28]
   1d678:	mov	r1, r7
   1d67c:	bl	1f8d4 <__assert_fail@plt+0xe174>
   1d680:	cmp	r0, #0
   1d684:	bne	1f30c <__assert_fail@plt+0xdbac>
   1d688:	ldr	r0, [sp, #44]	; 0x2c
   1d68c:	mov	r1, r7
   1d690:	mov	r2, r4
   1d694:	bl	1f75c <__assert_fail@plt+0xdffc>
   1d698:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1d69c:	mov	r9, #11
   1d6a0:	str	r0, [sp, #16]
   1d6a4:	cmp	r8, #2
   1d6a8:	beq	1ee58 <__assert_fail@plt+0xd6f8>
   1d6ac:	cmp	r8, #4
   1d6b0:	beq	1ee58 <__assert_fail@plt+0xd6f8>
   1d6b4:	cmp	r6, #3
   1d6b8:	bne	1d6cc <__assert_fail@plt+0xbf6c>
   1d6bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d6c0:	bl	11628 <strlen@plt>
   1d6c4:	cmp	r0, #1
   1d6c8:	bhi	1f318 <__assert_fail@plt+0xdbb8>
   1d6cc:	cmp	r8, #3
   1d6d0:	bne	1d6e4 <__assert_fail@plt+0xbf84>
   1d6d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d6d8:	bl	11628 <strlen@plt>
   1d6dc:	cmp	r0, #1
   1d6e0:	bhi	1f318 <__assert_fail@plt+0xdbb8>
   1d6e4:	ldr	lr, [sp, #44]	; 0x2c
   1d6e8:	cmp	r6, #3
   1d6ec:	beq	1d864 <__assert_fail@plt+0xc104>
   1d6f0:	cmp	r6, #0
   1d6f4:	mov	r7, #0
   1d6f8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1d6fc:	cmp	r8, #3
   1d700:	beq	1d874 <__assert_fail@plt+0xc114>
   1d704:	cmp	r8, #0
   1d708:	mov	sl, #0
   1d70c:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1d710:	b	1d87c <__assert_fail@plt+0xc11c>
   1d714:	ldr	r0, [r7, #40]	; 0x28
   1d718:	mov	r1, #1
   1d71c:	sub	r0, r0, r5
   1d720:	str	r0, [r7, #40]	; 0x28
   1d724:	ldr	r0, [sp, #44]	; 0x2c
   1d728:	strb	r1, [r0, #4]
   1d72c:	add	r0, pc, #12
   1d730:	ldr	sl, [sp, #52]	; 0x34
   1d734:	ldr	r7, [sp, #60]	; 0x3c
   1d738:	mov	r9, r4
   1d73c:	ldr	pc, [r0, r6, lsl #2]
   1d740:	andeq	sp, r1, r0, asr r7
   1d744:	andeq	sp, r1, ip, lsl r8
   1d748:	andeq	sp, r1, r8, ror r7
   1d74c:	andeq	sp, r1, ip, asr #16
   1d750:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1d754:	mov	r3, #1
   1d758:	ubfx	r1, r0, #5, #3
   1d75c:	and	r0, r0, #31
   1d760:	ldr	r5, [sp, #28]
   1d764:	ldr	lr, [sp, #44]	; 0x2c
   1d768:	ldr	r2, [r8, r1, lsl #2]
   1d76c:	orr	r0, r2, r3, lsl r0
   1d770:	str	r0, [r8, r1, lsl #2]
   1d774:	b	1d7c0 <__assert_fail@plt+0xc060>
   1d778:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1d77c:	mov	r0, r7
   1d780:	bl	11628 <strlen@plt>
   1d784:	cmp	r0, #1
   1d788:	bne	1f05c <__assert_fail@plt+0xd8fc>
   1d78c:	ldrb	r0, [r7]
   1d790:	mov	r3, #1
   1d794:	ubfx	r1, r0, #5, #3
   1d798:	and	r0, r0, #31
   1d79c:	ldr	r2, [r8, r1, lsl #2]
   1d7a0:	orr	r0, r2, r3, lsl r0
   1d7a4:	str	r0, [r8, r1, lsl #2]
   1d7a8:	mov	r1, #0
   1d7ac:	ldr	r0, [sp, #20]
   1d7b0:	ldr	r5, [sp, #28]
   1d7b4:	ldr	lr, [sp, #44]	; 0x2c
   1d7b8:	ldr	r7, [sp, #60]	; 0x3c
   1d7bc:	str	r1, [r0]
   1d7c0:	ldrb	r0, [lr, #4]
   1d7c4:	cmp	r0, #21
   1d7c8:	beq	1da48 <__assert_fail@plt+0xc2e8>
   1d7cc:	cmp	r0, #2
   1d7d0:	ldr	r0, [sp, #48]	; 0x30
   1d7d4:	beq	1eef4 <__assert_fail@plt+0xd794>
   1d7d8:	sub	r1, fp, #80	; 0x50
   1d7dc:	mov	r2, lr
   1d7e0:	mov	r3, r9
   1d7e4:	mov	r4, lr
   1d7e8:	str	r1, [fp, #-36]	; 0xffffffdc
   1d7ec:	mov	r1, #3
   1d7f0:	str	r1, [fp, #-40]	; 0xffffffd8
   1d7f4:	str	r0, [sp]
   1d7f8:	mov	r0, #0
   1d7fc:	mov	r1, r5
   1d800:	str	r0, [sp, #4]
   1d804:	sub	r0, fp, #40	; 0x28
   1d808:	bl	1f8d4 <__assert_fail@plt+0xe174>
   1d80c:	ldr	r2, [sp, #48]	; 0x30
   1d810:	cmp	r0, #0
   1d814:	beq	1d580 <__assert_fail@plt+0xbe20>
   1d818:	b	1eee8 <__assert_fail@plt+0xd788>
   1d81c:	ldr	r1, [r7, #20]
   1d820:	ldr	r0, [sp, #36]	; 0x24
   1d824:	cmp	r0, r1
   1d828:	beq	1d9ac <__assert_fail@plt+0xc24c>
   1d82c:	ldr	r0, [r7]
   1d830:	ldr	r5, [sp, #28]
   1d834:	ldr	lr, [sp, #44]	; 0x2c
   1d838:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d83c:	add	r2, r1, #1
   1d840:	str	r2, [r7, #20]
   1d844:	str	r3, [r0, r1, lsl #2]
   1d848:	b	1d7c0 <__assert_fail@plt+0xc060>
   1d84c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1d850:	mov	r0, r7
   1d854:	bl	11628 <strlen@plt>
   1d858:	cmp	r0, #1
   1d85c:	beq	1d78c <__assert_fail@plt+0xc02c>
   1d860:	b	1f060 <__assert_fail@plt+0xd900>
   1d864:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d868:	ldrb	r7, [r0]
   1d86c:	cmp	r8, #3
   1d870:	bne	1d704 <__assert_fail@plt+0xbfa4>
   1d874:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d878:	ldrb	sl, [r0]
   1d87c:	cmp	r6, #3
   1d880:	cmpne	r6, #0
   1d884:	bne	1d8ac <__assert_fail@plt+0xc14c>
   1d888:	ldr	r0, [sp, #52]	; 0x34
   1d88c:	ldr	r0, [r0, #92]	; 0x5c
   1d890:	cmp	r0, #2
   1d894:	blt	1d8b0 <__assert_fail@plt+0xc150>
   1d898:	mov	r0, r7
   1d89c:	bl	1167c <btowc@plt>
   1d8a0:	ldr	lr, [sp, #44]	; 0x2c
   1d8a4:	mov	r7, r0
   1d8a8:	b	1d8b0 <__assert_fail@plt+0xc150>
   1d8ac:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1d8b0:	cmp	r8, #3
   1d8b4:	cmpne	r8, #0
   1d8b8:	bne	1d8e0 <__assert_fail@plt+0xc180>
   1d8bc:	ldr	r0, [sp, #52]	; 0x34
   1d8c0:	ldr	r0, [r0, #92]	; 0x5c
   1d8c4:	cmp	r0, #2
   1d8c8:	blt	1d8e4 <__assert_fail@plt+0xc184>
   1d8cc:	mov	r0, sl
   1d8d0:	bl	1167c <btowc@plt>
   1d8d4:	ldr	lr, [sp, #44]	; 0x2c
   1d8d8:	mov	sl, r0
   1d8dc:	b	1d8e4 <__assert_fail@plt+0xc184>
   1d8e0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1d8e4:	ldr	r8, [sp, #24]
   1d8e8:	cmn	r7, #1
   1d8ec:	mov	r9, #3
   1d8f0:	cmnne	sl, #1
   1d8f4:	beq	1ee5c <__assert_fail@plt+0xd6fc>
   1d8f8:	ldr	r0, [sp, #40]	; 0x28
   1d8fc:	cmp	r0, #0
   1d900:	beq	1d910 <__assert_fail@plt+0xc1b0>
   1d904:	cmp	r7, sl
   1d908:	mov	r9, #11
   1d90c:	bhi	1ee5c <__assert_fail@plt+0xd6fc>
   1d910:	ldr	r0, [sp, #52]	; 0x34
   1d914:	ldr	r0, [r0, #92]	; 0x5c
   1d918:	cmp	r0, #2
   1d91c:	blt	1d954 <__assert_fail@plt+0xc1f4>
   1d920:	ldr	r4, [sp, #60]	; 0x3c
   1d924:	ldr	r1, [sp, #32]
   1d928:	ldr	r5, [sp, #28]
   1d92c:	ldr	r0, [r4, #32]
   1d930:	cmp	r1, r0
   1d934:	beq	1d9ec <__assert_fail@plt+0xc28c>
   1d938:	ldmib	r4, {r6, r9}
   1d93c:	str	r7, [r6, r0, lsl #2]
   1d940:	ldr	r0, [r4, #32]
   1d944:	add	r1, r0, #1
   1d948:	str	r1, [r4, #32]
   1d94c:	str	sl, [r9, r0, lsl #2]
   1d950:	b	1d958 <__assert_fail@plt+0xc1f8>
   1d954:	ldr	r5, [sp, #28]
   1d958:	ldr	r9, [sp, #16]
   1d95c:	mov	r0, #0
   1d960:	b	1d970 <__assert_fail@plt+0xc210>
   1d964:	add	r0, r0, #1
   1d968:	cmp	r0, #256	; 0x100
   1d96c:	beq	1d998 <__assert_fail@plt+0xc238>
   1d970:	cmp	r7, r0
   1d974:	cmpls	r0, sl
   1d978:	bhi	1d964 <__assert_fail@plt+0xc204>
   1d97c:	ubfx	r1, r0, #5, #3
   1d980:	and	r3, r0, #31
   1d984:	mov	r4, #1
   1d988:	ldr	r2, [r8, r1, lsl #2]
   1d98c:	orr	r2, r2, r4, lsl r3
   1d990:	str	r2, [r8, r1, lsl #2]
   1d994:	b	1d964 <__assert_fail@plt+0xc204>
   1d998:	ldr	r0, [sp, #20]
   1d99c:	ldr	sl, [sp, #52]	; 0x34
   1d9a0:	ldr	r7, [sp, #60]	; 0x3c
   1d9a4:	mov	r1, #0
   1d9a8:	b	1d7bc <__assert_fail@plt+0xc05c>
   1d9ac:	ldr	r1, [sp, #36]	; 0x24
   1d9b0:	mov	r0, #1
   1d9b4:	orr	r1, r0, r1, lsl #1
   1d9b8:	ldr	r0, [r7]
   1d9bc:	str	r1, [sp, #36]	; 0x24
   1d9c0:	lsl	r1, r1, #2
   1d9c4:	bl	2b290 <__assert_fail@plt+0x19b30>
   1d9c8:	cmp	r0, #0
   1d9cc:	beq	1f36c <__assert_fail@plt+0xdc0c>
   1d9d0:	ldr	r7, [sp, #60]	; 0x3c
   1d9d4:	ldr	r5, [sp, #28]
   1d9d8:	ldr	lr, [sp, #44]	; 0x2c
   1d9dc:	mov	r9, r4
   1d9e0:	str	r0, [r7]
   1d9e4:	ldr	r1, [r7, #20]
   1d9e8:	b	1d838 <__assert_fail@plt+0xc0d8>
   1d9ec:	ldr	r1, [sp, #32]
   1d9f0:	mov	r0, #1
   1d9f4:	orr	r1, r0, r1, lsl #1
   1d9f8:	ldr	r0, [r4, #4]
   1d9fc:	lsl	r9, r1, #2
   1da00:	str	r1, [sp, #32]
   1da04:	mov	r1, r9
   1da08:	bl	2b290 <__assert_fail@plt+0x19b30>
   1da0c:	mov	r6, r0
   1da10:	ldr	r0, [r4, #8]
   1da14:	mov	r1, r9
   1da18:	bl	2b290 <__assert_fail@plt+0x19b30>
   1da1c:	mov	r9, r0
   1da20:	cmp	r6, #0
   1da24:	cmpne	r9, #0
   1da28:	beq	1f384 <__assert_fail@plt+0xdc24>
   1da2c:	ldr	r4, [sp, #60]	; 0x3c
   1da30:	stmib	r4, {r6, r9}
   1da34:	ldr	r0, [r4, #32]
   1da38:	ldr	r5, [sp, #28]
   1da3c:	ldr	lr, [sp, #44]	; 0x2c
   1da40:	ldr	r8, [sp, #24]
   1da44:	b	1d93c <__assert_fail@plt+0xc1dc>
   1da48:	ldr	r0, [r5, #40]	; 0x28
   1da4c:	ldr	ip, [sp, #48]	; 0x30
   1da50:	add	r0, r0, r9
   1da54:	str	r0, [r5, #40]	; 0x28
   1da58:	ldr	r0, [sp, #56]	; 0x38
   1da5c:	cmp	r0, #0
   1da60:	beq	1da80 <__assert_fail@plt+0xc320>
   1da64:	vld1.32	{d16-d17}, [r8]
   1da68:	mov	r0, r8
   1da6c:	vmvn	q8, q8
   1da70:	vst1.32	{d16-d17}, [r0]!
   1da74:	vld1.32	{d16-d17}, [r0]
   1da78:	vmvn	q8, q8
   1da7c:	vst1.32	{d16-d17}, [r0]
   1da80:	ldr	r0, [sl, #92]	; 0x5c
   1da84:	cmp	r0, #2
   1da88:	blt	1db0c <__assert_fail@plt+0xc3ac>
   1da8c:	ldr	r6, [sl, #60]	; 0x3c
   1da90:	ldm	r8, {r1, r2, r3, r7}
   1da94:	ldr	r5, [r6]
   1da98:	and	r1, r1, r5
   1da9c:	ldr	r5, [sp, #28]
   1daa0:	str	r1, [r8]
   1daa4:	ldr	r1, [r6, #4]
   1daa8:	and	r1, r2, r1
   1daac:	str	r1, [r8, #4]
   1dab0:	ldr	r1, [r6, #8]
   1dab4:	and	r1, r3, r1
   1dab8:	str	r1, [r8, #8]
   1dabc:	ldr	r1, [r6, #12]
   1dac0:	and	r1, r7, r1
   1dac4:	ldr	r7, [sp, #60]	; 0x3c
   1dac8:	str	r1, [r8, #12]
   1dacc:	ldr	r1, [r8, #16]
   1dad0:	ldr	r2, [r6, #16]
   1dad4:	and	r1, r1, r2
   1dad8:	str	r1, [r8, #16]
   1dadc:	ldr	r1, [r6, #20]
   1dae0:	ldr	r2, [r8, #20]
   1dae4:	and	r1, r2, r1
   1dae8:	str	r1, [r8, #20]
   1daec:	ldr	r1, [r6, #24]
   1daf0:	ldr	r2, [r8, #24]
   1daf4:	and	r1, r2, r1
   1daf8:	str	r1, [r8, #24]
   1dafc:	ldr	r1, [r6, #28]
   1db00:	ldr	r2, [r8, #28]
   1db04:	and	r1, r2, r1
   1db08:	str	r1, [r8, #28]
   1db0c:	ldr	r1, [r7, #20]
   1db10:	cmp	r1, #0
   1db14:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1db18:	ldr	r1, [r7, #24]
   1db1c:	cmp	r1, #0
   1db20:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1db24:	ldr	r1, [r7, #28]
   1db28:	cmp	r1, #0
   1db2c:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1db30:	ldr	r1, [r7, #32]
   1db34:	cmp	r1, #0
   1db38:	beq	1edb8 <__assert_fail@plt+0xd658>
   1db3c:	ldrb	r0, [sl, #88]	; 0x58
   1db40:	orr	r0, r0, #2
   1db44:	strb	r0, [sl, #88]	; 0x58
   1db48:	ldr	r1, [sl, #64]	; 0x40
   1db4c:	cmp	r1, #31
   1db50:	beq	1efcc <__assert_fail@plt+0xd86c>
   1db54:	ldr	r0, [sl, #56]	; 0x38
   1db58:	add	r0, r0, r1, lsl #5
   1db5c:	add	r2, r1, #1
   1db60:	vmov.i32	q8, #0	; 0x00000000
   1db64:	mov	r1, #6
   1db68:	str	r2, [sl, #64]	; 0x40
   1db6c:	mov	r2, #0
   1db70:	add	r4, r0, #4
   1db74:	str	r2, [r0, #20]
   1db78:	str	r7, [r0, #24]
   1db7c:	str	r1, [r0, #28]
   1db80:	mov	r0, #28
   1db84:	mov	r1, r4
   1db88:	vst1.32	{d16-d17}, [r1], r0
   1db8c:	mvn	r0, #0
   1db90:	str	r0, [r1]
   1db94:	ldr	r0, [r8]
   1db98:	cmp	r0, #0
   1db9c:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dba0:	ldr	r0, [r8, #4]
   1dba4:	cmp	r0, #0
   1dba8:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dbac:	ldr	r0, [r8, #8]
   1dbb0:	cmp	r0, #0
   1dbb4:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dbb8:	ldr	r0, [r8, #12]
   1dbbc:	cmp	r0, #0
   1dbc0:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dbc4:	ldr	r0, [r8, #16]
   1dbc8:	cmp	r0, #0
   1dbcc:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dbd0:	ldr	r0, [r8, #20]
   1dbd4:	cmp	r0, #0
   1dbd8:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dbdc:	ldr	r0, [r8, #24]
   1dbe0:	cmp	r0, #0
   1dbe4:	bne	1dbf4 <__assert_fail@plt+0xc494>
   1dbe8:	ldr	r0, [r8, #28]
   1dbec:	cmp	r0, #0
   1dbf0:	beq	1f068 <__assert_fail@plt+0xd908>
   1dbf4:	ldr	r1, [sl, #64]	; 0x40
   1dbf8:	cmp	r1, #31
   1dbfc:	beq	1effc <__assert_fail@plt+0xd89c>
   1dc00:	ldr	r0, [sl, #56]	; 0x38
   1dc04:	add	r0, r0, r1, lsl #5
   1dc08:	add	r2, r1, #1
   1dc0c:	vmov.i32	q8, #0	; 0x00000000
   1dc10:	mov	r1, #3
   1dc14:	str	r2, [sl, #64]	; 0x40
   1dc18:	mov	r2, #0
   1dc1c:	add	r6, r0, #4
   1dc20:	str	r2, [r0, #20]
   1dc24:	str	r8, [r0, #24]
   1dc28:	str	r1, [r0, #28]
   1dc2c:	mov	r0, #28
   1dc30:	mov	r1, r6
   1dc34:	vst1.32	{d16-d17}, [r1], r0
   1dc38:	mvn	r0, #0
   1dc3c:	str	r0, [r1]
   1dc40:	ldr	r1, [sl, #64]	; 0x40
   1dc44:	cmp	r1, #31
   1dc48:	beq	1f02c <__assert_fail@plt+0xd8cc>
   1dc4c:	ldr	r0, [sl, #56]	; 0x38
   1dc50:	add	r7, r0, r1, lsl #5
   1dc54:	add	r2, r1, #1
   1dc58:	mov	r0, #0
   1dc5c:	mov	r1, #10
   1dc60:	str	r2, [sl, #64]	; 0x40
   1dc64:	mvn	r2, #0
   1dc68:	str	r0, [r7, #4]!
   1dc6c:	add	r3, r7, #20
   1dc70:	str	r6, [r7, #4]
   1dc74:	str	r4, [r7, #8]
   1dc78:	str	r0, [r7, #12]
   1dc7c:	str	r0, [r7, #16]
   1dc80:	stm	r3, {r0, r1, r2}
   1dc84:	str	r7, [r6]
   1dc88:	str	r7, [r4]
   1dc8c:	b	1de90 <__assert_fail@plt+0xc730>
   1dc90:	mov	r0, #5
   1dc94:	str	r0, [lr]
   1dc98:	ldr	r1, [sl, #64]	; 0x40
   1dc9c:	cmp	r1, #31
   1dca0:	beq	1f14c <__assert_fail@plt+0xd9ec>
   1dca4:	ldr	r0, [sl, #56]	; 0x38
   1dca8:	add	r4, r0, r1, lsl #5
   1dcac:	add	r2, r1, #1
   1dcb0:	mov	r0, #0
   1dcb4:	mvn	r3, #0
   1dcb8:	str	r2, [sl, #64]	; 0x40
   1dcbc:	str	r0, [r4, #4]!
   1dcc0:	str	r0, [r4, #8]
   1dcc4:	str	r0, [r4, #4]
   1dcc8:	ldm	lr, {r1, r2}
   1dccc:	str	r3, [r4, #28]
   1dcd0:	str	r0, [r4, #16]
   1dcd4:	str	r0, [r4, #12]
   1dcd8:	bic	r0, r2, #786432	; 0xc0000
   1dcdc:	str	r1, [r4, #20]
   1dce0:	str	r0, [r4, #24]
   1dce4:	mov	r0, #10
   1dce8:	str	r0, [lr]
   1dcec:	ldr	r1, [sl, #64]	; 0x40
   1dcf0:	cmp	r1, #31
   1dcf4:	beq	1f0b4 <__assert_fail@plt+0xd954>
   1dcf8:	ldr	r0, [sl, #56]	; 0x38
   1dcfc:	add	r5, r0, r1, lsl #5
   1dd00:	add	r2, r1, #1
   1dd04:	mov	r0, #0
   1dd08:	mvn	r3, #0
   1dd0c:	str	r2, [sl, #64]	; 0x40
   1dd10:	str	r0, [r5, #4]!
   1dd14:	str	r0, [r5, #8]
   1dd18:	str	r0, [r5, #4]
   1dd1c:	ldm	lr, {r1, r2}
   1dd20:	str	r3, [r5, #28]
   1dd24:	str	r0, [r5, #16]
   1dd28:	str	r0, [r5, #12]
   1dd2c:	bic	r0, r2, #786432	; 0xc0000
   1dd30:	str	r1, [r5, #20]
   1dd34:	str	r0, [r5, #24]
   1dd38:	ldr	r1, [sl, #64]	; 0x40
   1dd3c:	cmp	r1, #31
   1dd40:	beq	1f0e8 <__assert_fail@plt+0xd988>
   1dd44:	ldr	r0, [sl, #56]	; 0x38
   1dd48:	add	r6, r0, r1, lsl #5
   1dd4c:	add	r2, r1, #1
   1dd50:	mov	r0, #0
   1dd54:	cmp	r4, #0
   1dd58:	mov	r1, #10
   1dd5c:	str	r2, [sl, #64]	; 0x40
   1dd60:	mvn	r2, #0
   1dd64:	str	r0, [r6, #4]!
   1dd68:	add	r3, r6, #20
   1dd6c:	stmib	r6, {r4, r5}
   1dd70:	str	r0, [r6, #12]
   1dd74:	str	r0, [r6, #16]
   1dd78:	stm	r3, {r0, r1, r2}
   1dd7c:	strne	r6, [r4]
   1dd80:	cmp	r5, #0
   1dd84:	strne	r6, [r5]
   1dd88:	cmpne	r4, #0
   1dd8c:	bne	1dde8 <__assert_fail@plt+0xc688>
   1dd90:	mov	r0, #12
   1dd94:	ldr	r1, [sp, #20]
   1dd98:	b	1ed04 <__assert_fail@plt+0xd5a4>
   1dd9c:	ldr	r1, [sl, #64]	; 0x40
   1dda0:	cmp	r1, #31
   1dda4:	beq	1f180 <__assert_fail@plt+0xda20>
   1dda8:	ldr	r0, [sl, #56]	; 0x38
   1ddac:	add	r6, r0, r1, lsl #5
   1ddb0:	add	r2, r1, #1
   1ddb4:	mov	r0, #0
   1ddb8:	mvn	r3, #0
   1ddbc:	str	r2, [sl, #64]	; 0x40
   1ddc0:	str	r0, [r6, #4]!
   1ddc4:	str	r0, [r6, #8]
   1ddc8:	str	r0, [r6, #4]
   1ddcc:	ldm	lr, {r1, r2}
   1ddd0:	str	r3, [r6, #28]
   1ddd4:	str	r0, [r6, #16]
   1ddd8:	str	r0, [r6, #12]
   1dddc:	bic	r0, r2, #786432	; 0xc0000
   1dde0:	str	r1, [r6, #20]
   1dde4:	str	r0, [r6, #24]
   1dde8:	ldr	r4, [sp, #28]
   1ddec:	mov	r0, lr
   1ddf0:	mov	r2, ip
   1ddf4:	mov	r1, r4
   1ddf8:	bl	1c270 <__assert_fail@plt+0xab10>
   1ddfc:	ldr	r1, [r4, #40]	; 0x28
   1de00:	mov	r9, r6
   1de04:	add	r0, r1, r0
   1de08:	str	r0, [r4, #40]	; 0x28
   1de0c:	b	1ed08 <__assert_fail@plt+0xd5a8>
   1de10:	ldrb	r0, [r7, #4]
   1de14:	cmp	r0, #9
   1de18:	bne	1f260 <__assert_fail@plt+0xdb00>
   1de1c:	mov	lr, r7
   1de20:	cmp	r4, #8
   1de24:	bhi	1de38 <__assert_fail@plt+0xc6d8>
   1de28:	ldr	r0, [sl, #84]	; 0x54
   1de2c:	mov	r1, #1
   1de30:	orr	r0, r0, r1, lsl r4
   1de34:	str	r0, [sl, #84]	; 0x54
   1de38:	ldr	r1, [sl, #64]	; 0x40
   1de3c:	ldr	ip, [sp, #48]	; 0x30
   1de40:	cmp	r1, #31
   1de44:	beq	1f080 <__assert_fail@plt+0xd920>
   1de48:	ldr	r0, [sl, #56]	; 0x38
   1de4c:	add	r0, r0, r1, lsl #5
   1de50:	add	r2, r1, #1
   1de54:	mov	r1, #0
   1de58:	cmp	r9, #0
   1de5c:	mvn	r3, #0
   1de60:	str	r2, [sl, #64]	; 0x40
   1de64:	mov	r2, #17
   1de68:	mov	r7, r0
   1de6c:	str	r1, [r7, #4]!
   1de70:	add	r6, r7, #20
   1de74:	str	r9, [r7, #4]
   1de78:	str	r1, [r7, #8]
   1de7c:	str	r1, [r7, #12]
   1de80:	str	r1, [r7, #16]
   1de84:	stm	r6, {r1, r2, r3}
   1de88:	strne	r7, [r9]
   1de8c:	str	r4, [r0, #24]
   1de90:	mov	r0, lr
   1de94:	mov	r1, r5
   1de98:	mov	r2, ip
   1de9c:	bl	1c270 <__assert_fail@plt+0xab10>
   1dea0:	ldr	r1, [r5, #40]	; 0x28
   1dea4:	ldr	ip, [sp, #48]	; 0x30
   1dea8:	ldr	lr, [sp, #44]	; 0x2c
   1deac:	mov	r4, #0
   1deb0:	add	r0, r1, r0
   1deb4:	str	r0, [r5, #40]	; 0x28
   1deb8:	and	r0, ip, #16777216	; 0x1000000
   1debc:	str	r0, [sp, #32]
   1dec0:	and	r0, ip, #2097152	; 0x200000
   1dec4:	str	r0, [sp, #16]
   1dec8:	add	r0, sl, #56	; 0x38
   1decc:	str	r0, [sp, #60]	; 0x3c
   1ded0:	add	r0, sl, #64	; 0x40
   1ded4:	str	r0, [sp, #24]
   1ded8:	ldrb	r0, [lr, #4]
   1dedc:	mov	r9, r7
   1dee0:	cmp	r0, #23
   1dee4:	bhi	1ed08 <__assert_fail@plt+0xd5a8>
   1dee8:	movw	r2, #2048	; 0x800
   1deec:	mov	r1, #1
   1def0:	movt	r2, #140	; 0x8c
   1def4:	tst	r2, r1, lsl r0
   1def8:	beq	1ed08 <__assert_fail@plt+0xd5a8>
   1defc:	cmp	r0, #23
   1df00:	str	r9, [sp, #40]	; 0x28
   1df04:	bne	1dfb4 <__assert_fail@plt+0xc854>
   1df08:	ldr	r9, [r5, #40]	; 0x28
   1df0c:	ldm	lr, {r7, sl}
   1df10:	mov	r6, r5
   1df14:	mvn	r2, #0
   1df18:	mov	r8, r2
   1df1c:	mov	r0, lr
   1df20:	mov	r1, r6
   1df24:	mov	r2, ip
   1df28:	mov	r5, r6
   1df2c:	bl	1c270 <__assert_fail@plt+0xab10>
   1df30:	ldr	r1, [r6, #40]	; 0x28
   1df34:	ldr	lr, [sp, #44]	; 0x2c
   1df38:	add	r0, r1, r0
   1df3c:	str	r0, [r6, #40]	; 0x28
   1df40:	ldrb	r0, [lr, #4]
   1df44:	ldrb	r1, [lr]
   1df48:	cmp	r0, #24
   1df4c:	beq	1dfd0 <__assert_fail@plt+0xc870>
   1df50:	cmp	r0, #2
   1df54:	beq	1e5e4 <__assert_fail@plt+0xce84>
   1df58:	cmp	r1, #44	; 0x2c
   1df5c:	beq	1dfd0 <__assert_fail@plt+0xc870>
   1df60:	ldr	ip, [sp, #48]	; 0x30
   1df64:	mvn	r2, #1
   1df68:	cmp	r1, #48	; 0x30
   1df6c:	bcc	1df18 <__assert_fail@plt+0xc7b8>
   1df70:	cmp	r0, #1
   1df74:	bne	1df18 <__assert_fail@plt+0xc7b8>
   1df78:	cmn	r8, #2
   1df7c:	beq	1df18 <__assert_fail@plt+0xc7b8>
   1df80:	cmp	r1, #57	; 0x39
   1df84:	bhi	1df18 <__assert_fail@plt+0xc7b8>
   1df88:	cmn	r8, #1
   1df8c:	beq	1dfac <__assert_fail@plt+0xc84c>
   1df90:	add	r0, r8, r8, lsl #2
   1df94:	add	r0, r1, r0, lsl #1
   1df98:	movw	r1, #32816	; 0x8030
   1df9c:	cmp	r0, r1
   1dfa0:	movge	r0, r1
   1dfa4:	sub	r2, r0, #48	; 0x30
   1dfa8:	b	1df18 <__assert_fail@plt+0xc7b8>
   1dfac:	sub	r2, r1, #48	; 0x30
   1dfb0:	b	1df18 <__assert_fail@plt+0xc7b8>
   1dfb4:	cmp	r0, #19
   1dfb8:	sub	r0, r0, #18
   1dfbc:	mvn	sl, #0
   1dfc0:	clz	r0, r0
   1dfc4:	movweq	sl, #1
   1dfc8:	lsr	r8, r0, #5
   1dfcc:	b	1e164 <__assert_fail@plt+0xca04>
   1dfd0:	cmn	r8, #1
   1dfd4:	bne	1e008 <__assert_fail@plt+0xc8a8>
   1dfd8:	ldr	ip, [sp, #48]	; 0x30
   1dfdc:	cmp	r1, #44	; 0x2c
   1dfe0:	moveq	r8, #0
   1dfe4:	cmpeq	r0, #1
   1dfe8:	beq	1e054 <__assert_fail@plt+0xc8f4>
   1dfec:	ldr	r0, [sp, #20]
   1dff0:	mov	r1, #10
   1dff4:	str	r1, [r0]
   1dff8:	ldr	r9, [sp, #40]	; 0x28
   1dffc:	mov	r7, #0
   1e000:	mov	r5, r6
   1e004:	b	1ec18 <__assert_fail@plt+0xd4b8>
   1e008:	ldr	ip, [sp, #48]	; 0x30
   1e00c:	cmn	r8, #2
   1e010:	beq	1e028 <__assert_fail@plt+0xc8c8>
   1e014:	cmp	r0, #24
   1e018:	beq	1e110 <__assert_fail@plt+0xc9b0>
   1e01c:	cmp	r0, #1
   1e020:	cmpeq	r1, #44	; 0x2c
   1e024:	beq	1e054 <__assert_fail@plt+0xc8f4>
   1e028:	ldr	r1, [sp, #16]
   1e02c:	cmp	r1, #0
   1e030:	beq	1eb74 <__assert_fail@plt+0xd414>
   1e034:	mov	r0, #1
   1e038:	str	r9, [r6, #40]	; 0x28
   1e03c:	mov	r5, r6
   1e040:	bfi	sl, r0, #0, #8
   1e044:	stm	lr, {r7, sl}
   1e048:	ldr	r9, [sp, #40]	; 0x28
   1e04c:	mov	r7, r9
   1e050:	b	1ec18 <__assert_fail@plt+0xd4b8>
   1e054:	mvn	r2, #0
   1e058:	str	r9, [sp, #56]	; 0x38
   1e05c:	mov	r9, r2
   1e060:	mov	r0, lr
   1e064:	mov	r1, r6
   1e068:	mov	r2, ip
   1e06c:	mov	r5, r6
   1e070:	bl	1c270 <__assert_fail@plt+0xab10>
   1e074:	ldr	r1, [r6, #40]	; 0x28
   1e078:	ldr	lr, [sp, #44]	; 0x2c
   1e07c:	add	r0, r1, r0
   1e080:	str	r0, [r6, #40]	; 0x28
   1e084:	ldrb	r0, [lr, #4]
   1e088:	cmp	r0, #24
   1e08c:	beq	1e0f8 <__assert_fail@plt+0xc998>
   1e090:	cmp	r0, #2
   1e094:	beq	1e9e8 <__assert_fail@plt+0xd288>
   1e098:	ldrb	r1, [lr]
   1e09c:	ldr	ip, [sp, #48]	; 0x30
   1e0a0:	cmp	r1, #44	; 0x2c
   1e0a4:	beq	1e0fc <__assert_fail@plt+0xc99c>
   1e0a8:	mvn	r2, #1
   1e0ac:	cmp	r1, #48	; 0x30
   1e0b0:	bcc	1e05c <__assert_fail@plt+0xc8fc>
   1e0b4:	cmp	r0, #1
   1e0b8:	bne	1e05c <__assert_fail@plt+0xc8fc>
   1e0bc:	cmn	r9, #2
   1e0c0:	beq	1e05c <__assert_fail@plt+0xc8fc>
   1e0c4:	cmp	r1, #57	; 0x39
   1e0c8:	bhi	1e05c <__assert_fail@plt+0xc8fc>
   1e0cc:	cmn	r9, #1
   1e0d0:	beq	1e0f0 <__assert_fail@plt+0xc990>
   1e0d4:	add	r0, r9, r9, lsl #2
   1e0d8:	add	r0, r1, r0, lsl #1
   1e0dc:	movw	r1, #32816	; 0x8030
   1e0e0:	cmp	r0, r1
   1e0e4:	movge	r0, r1
   1e0e8:	sub	r2, r0, #48	; 0x30
   1e0ec:	b	1e05c <__assert_fail@plt+0xc8fc>
   1e0f0:	sub	r2, r1, #48	; 0x30
   1e0f4:	b	1e05c <__assert_fail@plt+0xc8fc>
   1e0f8:	ldr	ip, [sp, #48]	; 0x30
   1e0fc:	mov	r2, r9
   1e100:	ldr	r9, [sp, #56]	; 0x38
   1e104:	cmn	r2, #2
   1e108:	bne	1e11c <__assert_fail@plt+0xc9bc>
   1e10c:	b	1e028 <__assert_fail@plt+0xc8c8>
   1e110:	mov	r2, r8
   1e114:	cmn	r2, #2
   1e118:	beq	1e028 <__assert_fail@plt+0xc8c8>
   1e11c:	ldr	r9, [sp, #40]	; 0x28
   1e120:	cmp	r8, r2
   1e124:	mov	r1, #0
   1e128:	mov	r5, r6
   1e12c:	movwle	r1, #1
   1e130:	cmp	r0, #24
   1e134:	bne	1e9a8 <__assert_fail@plt+0xd248>
   1e138:	add	r0, r2, #1
   1e13c:	mov	sl, r2
   1e140:	clz	r0, r0
   1e144:	lsr	r0, r0, #5
   1e148:	orrs	r0, r1, r0
   1e14c:	beq	1e9a8 <__assert_fail@plt+0xd248>
   1e150:	cmn	sl, #1
   1e154:	mov	r0, sl
   1e158:	moveq	r0, r8
   1e15c:	cmp	r0, #32768	; 0x8000
   1e160:	bge	1eb60 <__assert_fail@plt+0xd400>
   1e164:	mov	r0, lr
   1e168:	mov	r1, r5
   1e16c:	mov	r2, ip
   1e170:	bl	1c270 <__assert_fail@plt+0xab10>
   1e174:	ldr	r1, [r5, #40]	; 0x28
   1e178:	mov	r7, #0
   1e17c:	cmp	r9, #0
   1e180:	add	r0, r1, r0
   1e184:	str	r0, [r5, #40]	; 0x28
   1e188:	beq	1e5ec <__assert_fail@plt+0xce8c>
   1e18c:	ldr	ip, [sp, #48]	; 0x30
   1e190:	orrs	r0, sl, r8
   1e194:	beq	1e5f8 <__assert_fail@plt+0xce98>
   1e198:	mov	r0, #0
   1e19c:	cmp	r8, #1
   1e1a0:	mov	r7, r9
   1e1a4:	str	r0, [sp, #36]	; 0x24
   1e1a8:	ldr	lr, [sp, #44]	; 0x2c
   1e1ac:	ldr	r5, [sp, #24]
   1e1b0:	bge	1e6ac <__assert_fail@plt+0xcf4c>
   1e1b4:	ldrb	r0, [r7, #24]
   1e1b8:	cmp	r0, #17
   1e1bc:	bne	1e230 <__assert_fail@plt+0xcad0>
   1e1c0:	ldr	r0, [r7, #20]
   1e1c4:	mov	r2, r7
   1e1c8:	mov	r1, r2
   1e1cc:	ldr	r2, [r2, #4]
   1e1d0:	cmp	r2, #0
   1e1d4:	bne	1e1c8 <__assert_fail@plt+0xca68>
   1e1d8:	ldr	r2, [r1, #8]
   1e1dc:	cmp	r2, #0
   1e1e0:	bne	1e1c8 <__assert_fail@plt+0xca68>
   1e1e4:	ldr	r2, [r1, #24]
   1e1e8:	uxtb	r3, r2
   1e1ec:	cmp	r3, #17
   1e1f0:	bne	1e204 <__assert_fail@plt+0xcaa4>
   1e1f4:	ldr	r3, [r1, #20]
   1e1f8:	cmp	r3, r0
   1e1fc:	orreq	r2, r2, #524288	; 0x80000
   1e200:	streq	r2, [r1, #24]
   1e204:	ldr	r3, [r1]
   1e208:	cmp	r3, #0
   1e20c:	beq	1e230 <__assert_fail@plt+0xcad0>
   1e210:	ldr	r2, [r3, #8]
   1e214:	cmp	r2, r1
   1e218:	mov	r1, r3
   1e21c:	beq	1e1e4 <__assert_fail@plt+0xca84>
   1e220:	cmp	r2, #0
   1e224:	mov	r1, r3
   1e228:	beq	1e1e4 <__assert_fail@plt+0xca84>
   1e22c:	b	1e1c8 <__assert_fail@plt+0xca68>
   1e230:	ldr	r1, [r5]
   1e234:	cmn	sl, #1
   1e238:	mov	r6, #10
   1e23c:	movweq	r6, #11
   1e240:	cmp	r1, #31
   1e244:	beq	1e958 <__assert_fail@plt+0xd1f8>
   1e248:	ldr	r0, [sp, #60]	; 0x3c
   1e24c:	ldr	r0, [r0]
   1e250:	add	r9, r0, r1, lsl #5
   1e254:	add	r2, r1, #1
   1e258:	mvn	r0, #0
   1e25c:	str	r2, [r5]
   1e260:	str	r4, [r9, #4]!
   1e264:	str	r7, [r9, #4]
   1e268:	str	r4, [r9, #8]
   1e26c:	str	r4, [r9, #12]
   1e270:	str	r4, [r9, #16]
   1e274:	str	r4, [r9, #20]
   1e278:	str	r6, [r9, #24]
   1e27c:	str	r0, [r9, #28]
   1e280:	add	r0, r8, #2
   1e284:	str	r9, [r7]
   1e288:	cmp	r0, sl
   1e28c:	bgt	1e570 <__assert_fail@plt+0xce10>
   1e290:	str	sl, [sp, #52]	; 0x34
   1e294:	mov	sl, r9
   1e298:	ldr	r1, [r5]
   1e29c:	str	r0, [sp, #56]	; 0x38
   1e2a0:	cmp	r1, #31
   1e2a4:	beq	1e4b0 <__assert_fail@plt+0xcd50>
   1e2a8:	ldr	r0, [sp, #60]	; 0x3c
   1e2ac:	ldr	r0, [r0]
   1e2b0:	add	r8, r0, r1, lsl #5
   1e2b4:	add	r3, r1, #1
   1e2b8:	add	r2, r7, #20
   1e2bc:	sub	r6, fp, #80	; 0x50
   1e2c0:	str	r3, [r5]
   1e2c4:	str	r4, [r8, #4]!
   1e2c8:	str	r4, [r8, #8]
   1e2cc:	str	r4, [r8, #4]
   1e2d0:	ldm	r2, {r0, r1}
   1e2d4:	mvn	r2, #0
   1e2d8:	str	r2, [r8, #28]
   1e2dc:	str	r4, [r8, #16]
   1e2e0:	str	r4, [r8, #12]
   1e2e4:	str	r0, [r8, #20]
   1e2e8:	bic	r0, r1, #786432	; 0xc0000
   1e2ec:	str	r0, [r8, #24]
   1e2f0:	mov	r0, r8
   1e2f4:	str	r8, [fp, #-80]	; 0xffffffb0
   1e2f8:	str	r9, [r0]
   1e2fc:	ldr	r0, [r6]
   1e300:	ldr	r1, [r0, #24]
   1e304:	orr	r1, r1, #262144	; 0x40000
   1e308:	str	r1, [r0, #24]
   1e30c:	ldr	r0, [r7, #4]
   1e310:	ldr	r9, [r6]
   1e314:	cmp	r0, #0
   1e318:	beq	1e328 <__assert_fail@plt+0xcbc8>
   1e31c:	add	r6, r9, #4
   1e320:	mov	r7, r0
   1e324:	b	1e35c <__assert_fail@plt+0xcbfc>
   1e328:	mov	r1, #0
   1e32c:	mov	r0, r7
   1e330:	ldr	r7, [r7, #8]
   1e334:	cmp	r7, r1
   1e338:	cmpne	r7, #0
   1e33c:	bne	1e358 <__assert_fail@plt+0xcbf8>
   1e340:	ldr	r7, [r0]
   1e344:	ldr	r9, [r9]
   1e348:	mov	r1, r0
   1e34c:	cmp	r7, #0
   1e350:	bne	1e32c <__assert_fail@plt+0xcbcc>
   1e354:	b	1e3e8 <__assert_fail@plt+0xcc88>
   1e358:	add	r6, r9, #8
   1e35c:	ldr	r1, [r5]
   1e360:	cmp	r1, #31
   1e364:	beq	1e3b4 <__assert_fail@plt+0xcc54>
   1e368:	ldr	r0, [sp, #60]	; 0x3c
   1e36c:	ldr	r0, [r0]
   1e370:	add	r0, r0, r1, lsl #5
   1e374:	add	r3, r1, #1
   1e378:	add	r2, r7, #20
   1e37c:	str	r3, [r5]
   1e380:	mvn	r3, #0
   1e384:	str	r4, [r0, #4]!
   1e388:	str	r4, [r0, #8]
   1e38c:	str	r4, [r0, #4]
   1e390:	ldm	r2, {r1, r2}
   1e394:	str	r3, [r0, #28]
   1e398:	str	r4, [r0, #16]
   1e39c:	str	r4, [r0, #12]
   1e3a0:	str	r1, [r0, #20]
   1e3a4:	bic	r1, r2, #786432	; 0xc0000
   1e3a8:	str	r1, [r0, #24]
   1e3ac:	str	r0, [r6]
   1e3b0:	b	1e2f8 <__assert_fail@plt+0xcb98>
   1e3b4:	mov	r0, #996	; 0x3e4
   1e3b8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e3bc:	cmp	r0, #0
   1e3c0:	beq	1e558 <__assert_fail@plt+0xcdf8>
   1e3c4:	ldr	r2, [sp, #60]	; 0x3c
   1e3c8:	ldr	ip, [sp, #48]	; 0x30
   1e3cc:	ldr	lr, [sp, #44]	; 0x2c
   1e3d0:	ldr	r1, [r2]
   1e3d4:	str	r1, [r0]
   1e3d8:	mov	r1, #0
   1e3dc:	str	r0, [r2]
   1e3e0:	str	r1, [r5]
   1e3e4:	b	1e370 <__assert_fail@plt+0xcc10>
   1e3e8:	mov	r7, r8
   1e3ec:	ldr	r1, [r5]
   1e3f0:	cmp	r1, #31
   1e3f4:	beq	1e4e4 <__assert_fail@plt+0xcd84>
   1e3f8:	ldr	r0, [sp, #60]	; 0x3c
   1e3fc:	ldr	r0, [r0]
   1e400:	add	r6, r0, r1, lsl #5
   1e404:	add	r2, r1, #1
   1e408:	mov	r0, #16
   1e40c:	cmp	r7, #0
   1e410:	str	r2, [r5]
   1e414:	str	r4, [r6, #4]!
   1e418:	str	sl, [r6, #4]
   1e41c:	str	r7, [r6, #8]
   1e420:	str	r4, [r6, #12]
   1e424:	str	r4, [r6, #16]
   1e428:	str	r4, [r6, #20]
   1e42c:	str	r0, [r6, #24]
   1e430:	mvn	r0, #0
   1e434:	str	r0, [r6, #28]
   1e438:	str	r6, [sl]
   1e43c:	beq	1ec00 <__assert_fail@plt+0xd4a0>
   1e440:	str	r6, [r7]
   1e444:	ldr	r1, [r5]
   1e448:	cmp	r1, #31
   1e44c:	beq	1e518 <__assert_fail@plt+0xcdb8>
   1e450:	ldr	r0, [sp, #60]	; 0x3c
   1e454:	ldr	r0, [r0]
   1e458:	add	sl, r0, r1, lsl #5
   1e45c:	add	r2, r1, #1
   1e460:	mov	r0, #10
   1e464:	ldr	r1, [sp, #56]	; 0x38
   1e468:	str	r2, [r5]
   1e46c:	str	r4, [sl, #4]!
   1e470:	str	r6, [sl, #4]
   1e474:	str	r4, [sl, #8]
   1e478:	str	r4, [sl, #12]
   1e47c:	str	r4, [sl, #16]
   1e480:	str	r4, [sl, #20]
   1e484:	str	r0, [sl, #24]
   1e488:	mvn	r0, #0
   1e48c:	str	r0, [sl, #28]
   1e490:	ldr	r0, [sp, #52]	; 0x34
   1e494:	str	sl, [r6]
   1e498:	cmp	r1, r0
   1e49c:	bge	1e56c <__assert_fail@plt+0xce0c>
   1e4a0:	ldr	r9, [r7]
   1e4a4:	mov	r0, r1
   1e4a8:	add	r0, r1, #1
   1e4ac:	b	1e298 <__assert_fail@plt+0xcb38>
   1e4b0:	mov	r0, #996	; 0x3e4
   1e4b4:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e4b8:	cmp	r0, #0
   1e4bc:	beq	1e54c <__assert_fail@plt+0xcdec>
   1e4c0:	ldr	r2, [sp, #60]	; 0x3c
   1e4c4:	ldr	ip, [sp, #48]	; 0x30
   1e4c8:	ldr	lr, [sp, #44]	; 0x2c
   1e4cc:	ldr	r1, [r2]
   1e4d0:	str	r1, [r0]
   1e4d4:	mov	r1, #0
   1e4d8:	str	r0, [r2]
   1e4dc:	str	r1, [r5]
   1e4e0:	b	1e2b0 <__assert_fail@plt+0xcb50>
   1e4e4:	mov	r0, #996	; 0x3e4
   1e4e8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e4ec:	ldr	lr, [sp, #44]	; 0x2c
   1e4f0:	ldr	ip, [sp, #48]	; 0x30
   1e4f4:	cmp	r0, #0
   1e4f8:	beq	1ec00 <__assert_fail@plt+0xd4a0>
   1e4fc:	ldr	r2, [sp, #60]	; 0x3c
   1e500:	ldr	r1, [r2]
   1e504:	str	r1, [r0]
   1e508:	mov	r1, #0
   1e50c:	str	r0, [r2]
   1e510:	str	r1, [r5]
   1e514:	b	1e400 <__assert_fail@plt+0xcca0>
   1e518:	mov	r0, #996	; 0x3e4
   1e51c:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e520:	ldr	lr, [sp, #44]	; 0x2c
   1e524:	ldr	ip, [sp, #48]	; 0x30
   1e528:	cmp	r0, #0
   1e52c:	beq	1ec00 <__assert_fail@plt+0xd4a0>
   1e530:	ldr	r2, [sp, #60]	; 0x3c
   1e534:	ldr	r1, [r2]
   1e538:	str	r1, [r0]
   1e53c:	mov	r1, #0
   1e540:	str	r0, [r2]
   1e544:	str	r1, [r5]
   1e548:	b	1e458 <__assert_fail@plt+0xccf8>
   1e54c:	mov	r7, #0
   1e550:	str	r7, [fp, #-80]	; 0xffffffb0
   1e554:	b	1e560 <__assert_fail@plt+0xce00>
   1e558:	mov	r7, #0
   1e55c:	str	r7, [r6]
   1e560:	ldr	ip, [sp, #48]	; 0x30
   1e564:	ldr	lr, [sp, #44]	; 0x2c
   1e568:	b	1e3ec <__assert_fail@plt+0xcc8c>
   1e56c:	mov	r9, sl
   1e570:	ldr	r6, [sp, #36]	; 0x24
   1e574:	ldr	r8, [sp, #28]
   1e578:	cmp	r6, #0
   1e57c:	beq	1e5d4 <__assert_fail@plt+0xce74>
   1e580:	ldr	r1, [r5]
   1e584:	cmp	r1, #31
   1e588:	beq	1e9b4 <__assert_fail@plt+0xd254>
   1e58c:	ldr	r0, [sp, #60]	; 0x3c
   1e590:	ldr	r0, [r0]
   1e594:	add	r7, r0, r1, lsl #5
   1e598:	add	r2, r1, #1
   1e59c:	mov	r0, #0
   1e5a0:	mov	r1, #16
   1e5a4:	str	r2, [r5]
   1e5a8:	str	r0, [r7, #4]!
   1e5ac:	stmib	r7, {r6, r9}
   1e5b0:	str	r0, [r7, #12]
   1e5b4:	str	r0, [r7, #16]
   1e5b8:	str	r0, [r7, #20]
   1e5bc:	str	r1, [r7, #24]
   1e5c0:	mvn	r1, #0
   1e5c4:	str	r1, [r7, #28]
   1e5c8:	str	r7, [r6]
   1e5cc:	str	r7, [r9]
   1e5d0:	b	1e5dc <__assert_fail@plt+0xce7c>
   1e5d4:	mov	r0, #0
   1e5d8:	mov	r7, r9
   1e5dc:	mov	r5, r8
   1e5e0:	b	1ec38 <__assert_fail@plt+0xd4d8>
   1e5e4:	ldr	ip, [sp, #48]	; 0x30
   1e5e8:	b	1e028 <__assert_fail@plt+0xc8c8>
   1e5ec:	ldr	ip, [sp, #48]	; 0x30
   1e5f0:	ldr	lr, [sp, #44]	; 0x2c
   1e5f4:	b	1ec18 <__assert_fail@plt+0xd4b8>
   1e5f8:	ldr	lr, [sp, #44]	; 0x2c
   1e5fc:	mov	r0, r9
   1e600:	mov	r6, r0
   1e604:	ldr	r0, [r0, #4]
   1e608:	cmp	r0, #0
   1e60c:	bne	1e600 <__assert_fail@plt+0xcea0>
   1e610:	ldr	r0, [r6, #8]
   1e614:	cmp	r0, #0
   1e618:	bne	1e600 <__assert_fail@plt+0xcea0>
   1e61c:	ldr	r0, [r6, #24]
   1e620:	movw	r1, #255	; 0xff
   1e624:	movt	r1, #4
   1e628:	and	r0, r0, r1
   1e62c:	cmp	r0, #3
   1e630:	beq	1e664 <__assert_fail@plt+0xcf04>
   1e634:	cmp	r0, #6
   1e638:	bne	1e678 <__assert_fail@plt+0xcf18>
   1e63c:	ldr	r5, [r6, #20]
   1e640:	ldr	r0, [r5]
   1e644:	bl	141b8 <__assert_fail@plt+0x2a58>
   1e648:	ldr	r0, [r5, #4]
   1e64c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1e650:	ldr	r0, [r5, #8]
   1e654:	bl	141b8 <__assert_fail@plt+0x2a58>
   1e658:	ldr	r0, [r5, #12]
   1e65c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1e660:	b	1e668 <__assert_fail@plt+0xcf08>
   1e664:	ldr	r5, [r6, #20]
   1e668:	mov	r0, r5
   1e66c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1e670:	ldr	ip, [sp, #48]	; 0x30
   1e674:	ldr	lr, [sp, #44]	; 0x2c
   1e678:	ldr	r1, [r6]
   1e67c:	cmp	r1, #0
   1e680:	beq	1e6a4 <__assert_fail@plt+0xcf44>
   1e684:	ldr	r0, [r1, #8]
   1e688:	cmp	r0, r6
   1e68c:	mov	r6, r1
   1e690:	beq	1e61c <__assert_fail@plt+0xcebc>
   1e694:	cmp	r0, #0
   1e698:	mov	r6, r1
   1e69c:	beq	1e61c <__assert_fail@plt+0xcebc>
   1e6a0:	b	1e600 <__assert_fail@plt+0xcea0>
   1e6a4:	ldr	r5, [sp, #28]
   1e6a8:	b	1ec18 <__assert_fail@plt+0xd4b8>
   1e6ac:	mov	r3, r9
   1e6b0:	str	sl, [sp, #52]	; 0x34
   1e6b4:	str	r9, [sp, #36]	; 0x24
   1e6b8:	beq	1e98c <__assert_fail@plt+0xd22c>
   1e6bc:	ldr	sl, [sp, #40]	; 0x28
   1e6c0:	ldr	r0, [sl]
   1e6c4:	mov	r3, sl
   1e6c8:	str	r0, [sp, #36]	; 0x24
   1e6cc:	mov	r0, #2
   1e6d0:	ldr	r1, [r5]
   1e6d4:	str	r0, [sp, #56]	; 0x38
   1e6d8:	cmp	r1, #31
   1e6dc:	beq	1e8b0 <__assert_fail@plt+0xd150>
   1e6e0:	ldr	r0, [sp, #60]	; 0x3c
   1e6e4:	ldr	r0, [r0]
   1e6e8:	add	r6, r0, r1, lsl #5
   1e6ec:	add	r2, r3, #20
   1e6f0:	mov	r9, r3
   1e6f4:	add	r3, r1, #1
   1e6f8:	sub	r7, fp, #80	; 0x50
   1e6fc:	str	r3, [r5]
   1e700:	str	r4, [r6, #4]!
   1e704:	str	r4, [r6, #8]
   1e708:	str	r4, [r6, #4]
   1e70c:	ldm	r2, {r0, r1}
   1e710:	mvn	r2, #0
   1e714:	str	r2, [r6, #28]
   1e718:	str	r4, [r6, #16]
   1e71c:	str	r4, [r6, #12]
   1e720:	str	r0, [r6, #20]
   1e724:	bic	r0, r1, #786432	; 0xc0000
   1e728:	str	r0, [r6, #24]
   1e72c:	mov	r0, r6
   1e730:	str	r6, [fp, #-80]	; 0xffffffb0
   1e734:	ldr	r1, [sp, #36]	; 0x24
   1e738:	str	r1, [r0]
   1e73c:	ldr	r0, [r7]
   1e740:	ldr	r1, [r0, #24]
   1e744:	orr	r1, r1, #262144	; 0x40000
   1e748:	str	r1, [r0, #24]
   1e74c:	ldr	r0, [r9, #4]
   1e750:	ldr	r1, [r7]
   1e754:	cmp	r0, #0
   1e758:	str	r1, [sp, #36]	; 0x24
   1e75c:	beq	1e76c <__assert_fail@plt+0xd00c>
   1e760:	add	r7, r1, #4
   1e764:	mov	r9, r0
   1e768:	b	1e7ac <__assert_fail@plt+0xd04c>
   1e76c:	mov	r1, #0
   1e770:	mov	r0, r9
   1e774:	ldr	r9, [r9, #8]
   1e778:	cmp	r9, r1
   1e77c:	cmpne	r9, #0
   1e780:	bne	1e7a4 <__assert_fail@plt+0xd044>
   1e784:	ldr	r1, [sp, #36]	; 0x24
   1e788:	ldr	r9, [r0]
   1e78c:	ldr	r1, [r1]
   1e790:	cmp	r9, #0
   1e794:	str	r1, [sp, #36]	; 0x24
   1e798:	mov	r1, r0
   1e79c:	bne	1e770 <__assert_fail@plt+0xd010>
   1e7a0:	b	1e838 <__assert_fail@plt+0xd0d8>
   1e7a4:	ldr	r0, [sp, #36]	; 0x24
   1e7a8:	add	r7, r0, #8
   1e7ac:	ldr	r1, [r5]
   1e7b0:	cmp	r1, #31
   1e7b4:	beq	1e804 <__assert_fail@plt+0xd0a4>
   1e7b8:	ldr	r0, [sp, #60]	; 0x3c
   1e7bc:	ldr	r0, [r0]
   1e7c0:	add	r0, r0, r1, lsl #5
   1e7c4:	add	r3, r1, #1
   1e7c8:	add	r2, r9, #20
   1e7cc:	str	r3, [r5]
   1e7d0:	mvn	r3, #0
   1e7d4:	str	r4, [r0, #4]!
   1e7d8:	str	r4, [r0, #8]
   1e7dc:	str	r4, [r0, #4]
   1e7e0:	ldm	r2, {r1, r2}
   1e7e4:	str	r3, [r0, #28]
   1e7e8:	str	r4, [r0, #16]
   1e7ec:	str	r4, [r0, #12]
   1e7f0:	str	r1, [r0, #20]
   1e7f4:	bic	r1, r2, #786432	; 0xc0000
   1e7f8:	str	r1, [r0, #24]
   1e7fc:	str	r0, [r7]
   1e800:	b	1e734 <__assert_fail@plt+0xcfd4>
   1e804:	mov	r0, #996	; 0x3e4
   1e808:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e80c:	cmp	r0, #0
   1e810:	beq	1e944 <__assert_fail@plt+0xd1e4>
   1e814:	ldr	r2, [sp, #60]	; 0x3c
   1e818:	ldr	ip, [sp, #48]	; 0x30
   1e81c:	ldr	lr, [sp, #44]	; 0x2c
   1e820:	ldr	r1, [r2]
   1e824:	str	r1, [r0]
   1e828:	mov	r1, #0
   1e82c:	str	r0, [r2]
   1e830:	str	r1, [r5]
   1e834:	b	1e7c0 <__assert_fail@plt+0xd060>
   1e838:	mov	r3, r6
   1e83c:	ldr	r1, [r5]
   1e840:	cmp	r1, #31
   1e844:	beq	1e8f0 <__assert_fail@plt+0xd190>
   1e848:	ldr	r0, [sp, #60]	; 0x3c
   1e84c:	ldr	r0, [r0]
   1e850:	add	r2, r1, #1
   1e854:	add	r1, r0, r1, lsl #5
   1e858:	mov	r0, #16
   1e85c:	cmp	r3, #0
   1e860:	str	r2, [r5]
   1e864:	str	r4, [r1, #4]!
   1e868:	str	sl, [r1, #4]
   1e86c:	str	r3, [r1, #8]
   1e870:	str	r4, [r1, #12]
   1e874:	str	r4, [r1, #16]
   1e878:	str	r4, [r1, #20]
   1e87c:	str	r0, [r1, #24]
   1e880:	mvn	r0, #0
   1e884:	str	r1, [sp, #36]	; 0x24
   1e888:	str	r0, [r1, #28]
   1e88c:	str	r1, [sl]
   1e890:	beq	1ec00 <__assert_fail@plt+0xd4a0>
   1e894:	ldr	r1, [sp, #56]	; 0x38
   1e898:	ldr	sl, [sp, #36]	; 0x24
   1e89c:	add	r0, r1, #1
   1e8a0:	cmp	r1, r8
   1e8a4:	str	sl, [r3]
   1e8a8:	bne	1e6d0 <__assert_fail@plt+0xcf70>
   1e8ac:	b	1e98c <__assert_fail@plt+0xd22c>
   1e8b0:	mov	r0, #996	; 0x3e4
   1e8b4:	mov	r6, r3
   1e8b8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e8bc:	cmp	r0, #0
   1e8c0:	beq	1e92c <__assert_fail@plt+0xd1cc>
   1e8c4:	ldr	r2, [sp, #60]	; 0x3c
   1e8c8:	ldr	r5, [sp, #24]
   1e8cc:	ldr	ip, [sp, #48]	; 0x30
   1e8d0:	ldr	lr, [sp, #44]	; 0x2c
   1e8d4:	mov	r3, r6
   1e8d8:	ldr	r1, [r2]
   1e8dc:	str	r1, [r0]
   1e8e0:	mov	r1, #0
   1e8e4:	str	r0, [r2]
   1e8e8:	str	r1, [r5]
   1e8ec:	b	1e6e8 <__assert_fail@plt+0xcf88>
   1e8f0:	mov	r0, #996	; 0x3e4
   1e8f4:	mov	r6, r3
   1e8f8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e8fc:	ldr	lr, [sp, #44]	; 0x2c
   1e900:	ldr	ip, [sp, #48]	; 0x30
   1e904:	cmp	r0, #0
   1e908:	beq	1ec00 <__assert_fail@plt+0xd4a0>
   1e90c:	ldr	r2, [sp, #60]	; 0x3c
   1e910:	mov	r3, r6
   1e914:	ldr	r1, [r2]
   1e918:	str	r1, [r0]
   1e91c:	mov	r1, #0
   1e920:	str	r0, [r2]
   1e924:	str	r1, [r5]
   1e928:	b	1e850 <__assert_fail@plt+0xd0f0>
   1e92c:	ldr	ip, [sp, #48]	; 0x30
   1e930:	ldr	lr, [sp, #44]	; 0x2c
   1e934:	ldr	r5, [sp, #24]
   1e938:	mov	r3, #0
   1e93c:	str	r3, [fp, #-80]	; 0xffffffb0
   1e940:	b	1e83c <__assert_fail@plt+0xd0dc>
   1e944:	ldr	ip, [sp, #48]	; 0x30
   1e948:	ldr	lr, [sp, #44]	; 0x2c
   1e94c:	mov	r3, #0
   1e950:	str	r3, [r7]
   1e954:	b	1e83c <__assert_fail@plt+0xd0dc>
   1e958:	mov	r0, #996	; 0x3e4
   1e95c:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e960:	ldr	lr, [sp, #44]	; 0x2c
   1e964:	ldr	ip, [sp, #48]	; 0x30
   1e968:	cmp	r0, #0
   1e96c:	beq	1ec00 <__assert_fail@plt+0xd4a0>
   1e970:	ldr	r2, [sp, #60]	; 0x3c
   1e974:	ldr	r1, [r2]
   1e978:	str	r1, [r0]
   1e97c:	mov	r1, #0
   1e980:	str	r0, [r2]
   1e984:	str	r1, [r5]
   1e988:	b	1e250 <__assert_fail@plt+0xcaf0>
   1e98c:	ldr	sl, [sp, #52]	; 0x34
   1e990:	mov	r0, #0
   1e994:	cmp	r8, sl
   1e998:	bne	1e9f4 <__assert_fail@plt+0xd294>
   1e99c:	ldr	r7, [sp, #36]	; 0x24
   1e9a0:	ldr	r5, [sp, #28]
   1e9a4:	b	1ec38 <__assert_fail@plt+0xd4d8>
   1e9a8:	ldr	r0, [sp, #20]
   1e9ac:	mov	r1, #10
   1e9b0:	b	1eb68 <__assert_fail@plt+0xd408>
   1e9b4:	mov	r0, #996	; 0x3e4
   1e9b8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1e9bc:	cmp	r0, #0
   1e9c0:	beq	1eb8c <__assert_fail@plt+0xd42c>
   1e9c4:	ldr	r2, [sp, #60]	; 0x3c
   1e9c8:	ldr	ip, [sp, #48]	; 0x30
   1e9cc:	ldr	lr, [sp, #44]	; 0x2c
   1e9d0:	ldr	r1, [r2]
   1e9d4:	str	r1, [r0]
   1e9d8:	mov	r1, #0
   1e9dc:	str	r0, [r2]
   1e9e0:	str	r1, [r5]
   1e9e4:	b	1e594 <__assert_fail@plt+0xce34>
   1e9e8:	ldr	ip, [sp, #48]	; 0x30
   1e9ec:	ldr	r9, [sp, #56]	; 0x38
   1e9f0:	b	1e028 <__assert_fail@plt+0xc8c8>
   1e9f4:	mov	r6, r3
   1e9f8:	ldr	r1, [r5]
   1e9fc:	ldr	r9, [r6], #20
   1ea00:	cmp	r1, #31
   1ea04:	beq	1eba4 <__assert_fail@plt+0xd444>
   1ea08:	ldr	r0, [sp, #60]	; 0x3c
   1ea0c:	ldr	r0, [r0]
   1ea10:	add	r7, r0, r1, lsl #5
   1ea14:	add	r2, r1, #1
   1ea18:	str	r2, [r5]
   1ea1c:	mvn	r2, #0
   1ea20:	str	r4, [r7, #4]!
   1ea24:	str	r4, [r7, #8]
   1ea28:	str	r4, [r7, #4]
   1ea2c:	ldm	r6, {r0, r1}
   1ea30:	str	r2, [r7, #28]
   1ea34:	str	r4, [r7, #16]
   1ea38:	str	r4, [r7, #12]
   1ea3c:	sub	r6, fp, #80	; 0x50
   1ea40:	str	r0, [r7, #20]
   1ea44:	bic	r0, r1, #786432	; 0xc0000
   1ea48:	str	r0, [r7, #24]
   1ea4c:	mov	r0, r7
   1ea50:	str	r7, [fp, #-80]	; 0xffffffb0
   1ea54:	str	r9, [r0]
   1ea58:	ldr	r0, [r6]
   1ea5c:	ldr	r1, [r0, #24]
   1ea60:	orr	r1, r1, #262144	; 0x40000
   1ea64:	str	r1, [r0, #24]
   1ea68:	ldr	r0, [r3, #4]
   1ea6c:	ldr	r9, [r6]
   1ea70:	cmp	r0, #0
   1ea74:	beq	1ea84 <__assert_fail@plt+0xd324>
   1ea78:	add	r2, r9, #4
   1ea7c:	mov	r6, r0
   1ea80:	b	1eab8 <__assert_fail@plt+0xd358>
   1ea84:	mov	r1, #0
   1ea88:	ldr	r6, [r3, #8]
   1ea8c:	mov	r0, r3
   1ea90:	cmp	r6, r1
   1ea94:	cmpne	r6, #0
   1ea98:	bne	1eab4 <__assert_fail@plt+0xd354>
   1ea9c:	ldr	r3, [r0]
   1eaa0:	ldr	r9, [r9]
   1eaa4:	mov	r1, r0
   1eaa8:	cmp	r3, #0
   1eaac:	bne	1ea88 <__assert_fail@plt+0xd328>
   1eab0:	b	1e1b4 <__assert_fail@plt+0xca54>
   1eab4:	add	r2, r9, #8
   1eab8:	ldr	r1, [r5]
   1eabc:	str	r2, [sp, #56]	; 0x38
   1eac0:	cmp	r1, #31
   1eac4:	beq	1eb1c <__assert_fail@plt+0xd3bc>
   1eac8:	ldr	r0, [sp, #60]	; 0x3c
   1eacc:	ldr	r0, [r0]
   1ead0:	add	r0, r0, r1, lsl #5
   1ead4:	add	r3, r1, #1
   1ead8:	add	r2, r6, #20
   1eadc:	str	r3, [r5]
   1eae0:	mvn	r3, #0
   1eae4:	str	r4, [r0, #4]!
   1eae8:	str	r4, [r0, #8]
   1eaec:	str	r4, [r0, #4]
   1eaf0:	ldm	r2, {r1, r2}
   1eaf4:	str	r3, [r0, #28]
   1eaf8:	mov	r3, r6
   1eafc:	ldr	r6, [sp, #56]	; 0x38
   1eb00:	str	r4, [r0, #16]
   1eb04:	str	r4, [r0, #12]
   1eb08:	str	r1, [r0, #20]
   1eb0c:	bic	r1, r2, #786432	; 0xc0000
   1eb10:	str	r1, [r0, #24]
   1eb14:	str	r0, [r6]
   1eb18:	b	1ea54 <__assert_fail@plt+0xd2f4>
   1eb1c:	mov	r0, #996	; 0x3e4
   1eb20:	str	r6, [sp, #12]
   1eb24:	bl	2b260 <__assert_fail@plt+0x19b00>
   1eb28:	cmp	r0, #0
   1eb2c:	beq	1ebf0 <__assert_fail@plt+0xd490>
   1eb30:	ldr	r2, [sp, #60]	; 0x3c
   1eb34:	ldr	r5, [sp, #24]
   1eb38:	ldr	ip, [sp, #48]	; 0x30
   1eb3c:	ldr	lr, [sp, #44]	; 0x2c
   1eb40:	ldr	sl, [sp, #52]	; 0x34
   1eb44:	ldr	r6, [sp, #12]
   1eb48:	ldr	r1, [r2]
   1eb4c:	str	r1, [r0]
   1eb50:	mov	r1, #0
   1eb54:	str	r0, [r2]
   1eb58:	str	r1, [r5]
   1eb5c:	b	1ead0 <__assert_fail@plt+0xd370>
   1eb60:	ldr	r0, [sp, #20]
   1eb64:	mov	r1, #15
   1eb68:	str	r1, [r0]
   1eb6c:	mov	r7, #0
   1eb70:	b	1ec18 <__assert_fail@plt+0xd4b8>
   1eb74:	ldr	r1, [sp, #20]
   1eb78:	cmp	r0, #2
   1eb7c:	mov	r0, #10
   1eb80:	movweq	r0, #9
   1eb84:	str	r0, [r1]
   1eb88:	b	1dff8 <__assert_fail@plt+0xc898>
   1eb8c:	ldr	ip, [sp, #48]	; 0x30
   1eb90:	ldr	lr, [sp, #44]	; 0x2c
   1eb94:	ldr	r9, [sp, #40]	; 0x28
   1eb98:	mov	r7, #0
   1eb9c:	mov	r5, r8
   1eba0:	b	1ec18 <__assert_fail@plt+0xd4b8>
   1eba4:	mov	r0, #996	; 0x3e4
   1eba8:	mov	r7, r3
   1ebac:	bl	2b260 <__assert_fail@plt+0x19b00>
   1ebb0:	cmp	r0, #0
   1ebb4:	beq	1ebe8 <__assert_fail@plt+0xd488>
   1ebb8:	ldr	r2, [sp, #60]	; 0x3c
   1ebbc:	ldr	r5, [sp, #24]
   1ebc0:	ldr	ip, [sp, #48]	; 0x30
   1ebc4:	ldr	lr, [sp, #44]	; 0x2c
   1ebc8:	ldr	sl, [sp, #52]	; 0x34
   1ebcc:	mov	r3, r7
   1ebd0:	ldr	r1, [r2]
   1ebd4:	str	r1, [r0]
   1ebd8:	mov	r1, #0
   1ebdc:	str	r0, [r2]
   1ebe0:	str	r1, [r5]
   1ebe4:	b	1ea10 <__assert_fail@plt+0xd2b0>
   1ebe8:	str	r4, [fp, #-80]	; 0xffffffb0
   1ebec:	b	1ebf8 <__assert_fail@plt+0xd498>
   1ebf0:	ldr	r0, [sp, #56]	; 0x38
   1ebf4:	str	r4, [r0]
   1ebf8:	ldr	ip, [sp, #48]	; 0x30
   1ebfc:	ldr	lr, [sp, #44]	; 0x2c
   1ec00:	ldr	r0, [sp, #20]
   1ec04:	ldr	r5, [sp, #28]
   1ec08:	ldr	r9, [sp, #40]	; 0x28
   1ec0c:	mov	r1, #12
   1ec10:	mov	r7, #0
   1ec14:	str	r1, [r0]
   1ec18:	clz	r0, r7
   1ec1c:	cmp	r7, #0
   1ec20:	lsr	r0, r0, #5
   1ec24:	bne	1ec38 <__assert_fail@plt+0xd4d8>
   1ec28:	ldr	r1, [sp, #20]
   1ec2c:	ldr	r1, [r1]
   1ec30:	cmp	r1, #0
   1ec34:	bne	1ed14 <__assert_fail@plt+0xd5b4>
   1ec38:	ldr	r1, [sp, #32]
   1ec3c:	cmp	r1, #0
   1ec40:	beq	1ded8 <__assert_fail@plt+0xc778>
   1ec44:	ldrb	r1, [lr, #4]
   1ec48:	cmp	r1, #23
   1ec4c:	cmpne	r1, #11
   1ec50:	bne	1ded8 <__assert_fail@plt+0xc778>
   1ec54:	movw	r6, #255	; 0xff
   1ec58:	cmp	r0, #0
   1ec5c:	movt	r6, #4
   1ec60:	bne	1ecf8 <__assert_fail@plt+0xd598>
   1ec64:	mov	r5, r7
   1ec68:	ldr	r7, [r7, #4]
   1ec6c:	cmp	r7, #0
   1ec70:	bne	1ec64 <__assert_fail@plt+0xd504>
   1ec74:	ldr	r7, [r5, #8]
   1ec78:	cmp	r7, #0
   1ec7c:	bne	1ec64 <__assert_fail@plt+0xd504>
   1ec80:	ldr	r0, [r5, #24]
   1ec84:	and	r0, r0, r6
   1ec88:	cmp	r0, #3
   1ec8c:	beq	1ecc0 <__assert_fail@plt+0xd560>
   1ec90:	cmp	r0, #6
   1ec94:	bne	1eccc <__assert_fail@plt+0xd56c>
   1ec98:	ldr	r4, [r5, #20]
   1ec9c:	ldr	r0, [r4]
   1eca0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1eca4:	ldr	r0, [r4, #4]
   1eca8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ecac:	ldr	r0, [r4, #8]
   1ecb0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ecb4:	ldr	r0, [r4, #12]
   1ecb8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ecbc:	b	1ecc4 <__assert_fail@plt+0xd564>
   1ecc0:	ldr	r4, [r5, #20]
   1ecc4:	mov	r0, r4
   1ecc8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1eccc:	ldr	r0, [r5]
   1ecd0:	cmp	r0, #0
   1ecd4:	beq	1ecf8 <__assert_fail@plt+0xd598>
   1ecd8:	ldr	r7, [r0, #8]
   1ecdc:	cmp	r7, r5
   1ece0:	mov	r5, r0
   1ece4:	beq	1ec80 <__assert_fail@plt+0xd520>
   1ece8:	cmp	r7, #0
   1ecec:	mov	r5, r0
   1ecf0:	beq	1ec80 <__assert_fail@plt+0xd520>
   1ecf4:	b	1ec64 <__assert_fail@plt+0xd504>
   1ecf8:	mov	r0, #13
   1ecfc:	ldr	r1, [sp, #20]
   1ed00:	mov	r9, #0
   1ed04:	str	r0, [r1]
   1ed08:	mov	r0, r9
   1ed0c:	sub	sp, fp, #28
   1ed10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed14:	cmp	r9, #0
   1ed18:	beq	1d444 <__assert_fail@plt+0xbce4>
   1ed1c:	movw	r6, #255	; 0xff
   1ed20:	movt	r6, #4
   1ed24:	mov	r5, r9
   1ed28:	ldr	r9, [r9, #4]
   1ed2c:	cmp	r9, #0
   1ed30:	bne	1ed24 <__assert_fail@plt+0xd5c4>
   1ed34:	ldr	r9, [r5, #8]
   1ed38:	cmp	r9, #0
   1ed3c:	bne	1ed24 <__assert_fail@plt+0xd5c4>
   1ed40:	ldr	r0, [r5, #24]
   1ed44:	and	r0, r0, r6
   1ed48:	cmp	r0, #3
   1ed4c:	beq	1ed80 <__assert_fail@plt+0xd620>
   1ed50:	cmp	r0, #6
   1ed54:	bne	1ed8c <__assert_fail@plt+0xd62c>
   1ed58:	ldr	r4, [r5, #20]
   1ed5c:	ldr	r0, [r4]
   1ed60:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ed64:	ldr	r0, [r4, #4]
   1ed68:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ed6c:	ldr	r0, [r4, #8]
   1ed70:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ed74:	ldr	r0, [r4, #12]
   1ed78:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ed7c:	b	1ed84 <__assert_fail@plt+0xd624>
   1ed80:	ldr	r4, [r5, #20]
   1ed84:	mov	r0, r4
   1ed88:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ed8c:	ldr	r0, [r5]
   1ed90:	cmp	r0, #0
   1ed94:	beq	1d444 <__assert_fail@plt+0xbce4>
   1ed98:	ldr	r9, [r0, #8]
   1ed9c:	cmp	r9, r5
   1eda0:	mov	r5, r0
   1eda4:	beq	1ed40 <__assert_fail@plt+0xd5e0>
   1eda8:	cmp	r9, #0
   1edac:	mov	r5, r0
   1edb0:	beq	1ed40 <__assert_fail@plt+0xd5e0>
   1edb4:	b	1ed24 <__assert_fail@plt+0xd5c4>
   1edb8:	cmp	r0, #2
   1edbc:	blt	1edd8 <__assert_fail@plt+0xd678>
   1edc0:	ldr	r0, [r7, #36]	; 0x24
   1edc4:	cmp	r0, #0
   1edc8:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1edcc:	ldrb	r0, [r7, #16]
   1edd0:	tst	r0, #1
   1edd4:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1edd8:	ldr	r0, [r7]
   1eddc:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ede0:	ldr	r0, [r7, #4]
   1ede4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ede8:	ldr	r0, [r7, #8]
   1edec:	bl	141b8 <__assert_fail@plt+0x2a58>
   1edf0:	ldr	r0, [r7, #12]
   1edf4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1edf8:	mov	r0, r7
   1edfc:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ee00:	ldr	r1, [sl, #64]	; 0x40
   1ee04:	cmp	r1, #31
   1ee08:	beq	1f344 <__assert_fail@plt+0xdbe4>
   1ee0c:	ldr	r0, [sl, #56]	; 0x38
   1ee10:	add	r0, r0, r1, lsl #5
   1ee14:	add	r2, r1, #1
   1ee18:	vmov.i32	q8, #0	; 0x00000000
   1ee1c:	ldr	ip, [sp, #48]	; 0x30
   1ee20:	ldr	lr, [sp, #44]	; 0x2c
   1ee24:	mov	r1, #3
   1ee28:	str	r2, [sl, #64]	; 0x40
   1ee2c:	mov	r2, #0
   1ee30:	add	r7, r0, #4
   1ee34:	str	r2, [r0, #20]
   1ee38:	str	r8, [r0, #24]
   1ee3c:	str	r1, [r0, #28]
   1ee40:	mov	r0, #28
   1ee44:	mov	r1, r7
   1ee48:	vst1.32	{d16-d17}, [r1], r0
   1ee4c:	mvn	r0, #0
   1ee50:	str	r0, [r1]
   1ee54:	b	1de90 <__assert_fail@plt+0xc730>
   1ee58:	ldr	r8, [sp, #24]
   1ee5c:	ldr	r0, [sp, #20]
   1ee60:	ldr	r5, [sp, #28]
   1ee64:	ldr	sl, [sp, #52]	; 0x34
   1ee68:	ldr	r7, [sp, #60]	; 0x3c
   1ee6c:	str	r9, [r0]
   1ee70:	ldr	r4, [sp, #20]
   1ee74:	mov	r0, r8
   1ee78:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ee7c:	ldr	r0, [r7]
   1ee80:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ee84:	ldr	r0, [r7, #4]
   1ee88:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ee8c:	ldr	r0, [r7, #8]
   1ee90:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ee94:	ldr	r0, [r7, #12]
   1ee98:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ee9c:	mov	r0, r7
   1eea0:	bl	141b8 <__assert_fail@plt+0x2a58>
   1eea4:	ldr	r0, [r4]
   1eea8:	mov	r7, #0
   1eeac:	mov	r9, #0
   1eeb0:	b	1cfd4 <__assert_fail@plt+0xb874>
   1eeb4:	mov	r0, #996	; 0x3e4
   1eeb8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1eebc:	cmp	r0, #0
   1eec0:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1eec4:	ldr	r1, [sl, #56]	; 0x38
   1eec8:	ldr	r5, [sp, #28]
   1eecc:	ldr	ip, [sp, #48]	; 0x30
   1eed0:	ldr	lr, [sp, #44]	; 0x2c
   1eed4:	str	r1, [r0]
   1eed8:	mov	r1, #0
   1eedc:	str	r1, [sl, #64]	; 0x40
   1eee0:	str	r0, [sl, #56]	; 0x38
   1eee4:	b	1cf2c <__assert_fail@plt+0xb7cc>
   1eee8:	mov	r9, r0
   1eeec:	str	sl, [sp, #52]	; 0x34
   1eef0:	b	1ee5c <__assert_fail@plt+0xd6fc>
   1eef4:	mov	r9, #7
   1eef8:	str	sl, [sp, #52]	; 0x34
   1eefc:	b	1ee5c <__assert_fail@plt+0xd6fc>
   1ef00:	ldr	r4, [sp, #20]
   1ef04:	ldr	r7, [sp, #60]	; 0x3c
   1ef08:	mov	r0, #2
   1ef0c:	str	r0, [r4]
   1ef10:	b	1ee74 <__assert_fail@plt+0xd714>
   1ef14:	mov	r0, r8
   1ef18:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ef1c:	mov	r0, r7
   1ef20:	bl	141b8 <__assert_fail@plt+0x2a58>
   1ef24:	b	1dd90 <__assert_fail@plt+0xc630>
   1ef28:	mov	r0, #996	; 0x3e4
   1ef2c:	bl	2b260 <__assert_fail@plt+0x19b00>
   1ef30:	cmp	r0, #0
   1ef34:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1ef38:	ldr	r1, [sl, #56]	; 0x38
   1ef3c:	ldr	r5, [sp, #28]
   1ef40:	ldr	ip, [sp, #48]	; 0x30
   1ef44:	ldr	lr, [sp, #44]	; 0x2c
   1ef48:	str	r1, [r0]
   1ef4c:	mov	r1, #0
   1ef50:	str	r1, [sl, #64]	; 0x40
   1ef54:	str	r0, [sl, #56]	; 0x38
   1ef58:	b	1d138 <__assert_fail@plt+0xb9d8>
   1ef5c:	mov	r0, #6
   1ef60:	b	1dd94 <__assert_fail@plt+0xc634>
   1ef64:	mov	r0, #996	; 0x3e4
   1ef68:	bl	2b260 <__assert_fail@plt+0x19b00>
   1ef6c:	cmp	r0, #0
   1ef70:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1ef74:	ldr	r1, [sl, #56]	; 0x38
   1ef78:	ldr	r5, [sp, #28]
   1ef7c:	ldr	ip, [sp, #48]	; 0x30
   1ef80:	ldr	lr, [sp, #44]	; 0x2c
   1ef84:	str	r1, [r0]
   1ef88:	mov	r1, #0
   1ef8c:	str	r1, [sl, #64]	; 0x40
   1ef90:	str	r0, [sl, #56]	; 0x38
   1ef94:	b	1d378 <__assert_fail@plt+0xbc18>
   1ef98:	mov	r0, #996	; 0x3e4
   1ef9c:	bl	2b260 <__assert_fail@plt+0x19b00>
   1efa0:	cmp	r0, #0
   1efa4:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1efa8:	ldr	r1, [sl, #56]	; 0x38
   1efac:	ldr	r5, [sp, #28]
   1efb0:	ldr	ip, [sp, #48]	; 0x30
   1efb4:	ldr	lr, [sp, #44]	; 0x2c
   1efb8:	str	r1, [r0]
   1efbc:	mov	r1, #0
   1efc0:	str	r1, [sl, #64]	; 0x40
   1efc4:	str	r0, [sl, #56]	; 0x38
   1efc8:	b	1d31c <__assert_fail@plt+0xbbbc>
   1efcc:	mov	r0, #996	; 0x3e4
   1efd0:	bl	2b260 <__assert_fail@plt+0x19b00>
   1efd4:	cmp	r0, #0
   1efd8:	beq	1f374 <__assert_fail@plt+0xdc14>
   1efdc:	ldr	r1, [sl, #56]	; 0x38
   1efe0:	ldr	ip, [sp, #48]	; 0x30
   1efe4:	ldr	lr, [sp, #44]	; 0x2c
   1efe8:	str	r1, [r0]
   1efec:	mov	r1, #0
   1eff0:	str	r1, [sl, #64]	; 0x40
   1eff4:	str	r0, [sl, #56]	; 0x38
   1eff8:	b	1db58 <__assert_fail@plt+0xc3f8>
   1effc:	mov	r0, #996	; 0x3e4
   1f000:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f004:	cmp	r0, #0
   1f008:	beq	1f374 <__assert_fail@plt+0xdc14>
   1f00c:	ldr	r1, [sl, #56]	; 0x38
   1f010:	ldr	ip, [sp, #48]	; 0x30
   1f014:	ldr	lr, [sp, #44]	; 0x2c
   1f018:	str	r1, [r0]
   1f01c:	mov	r1, #0
   1f020:	str	r1, [sl, #64]	; 0x40
   1f024:	str	r0, [sl, #56]	; 0x38
   1f028:	b	1dc04 <__assert_fail@plt+0xc4a4>
   1f02c:	mov	r0, #996	; 0x3e4
   1f030:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f034:	cmp	r0, #0
   1f038:	beq	1f374 <__assert_fail@plt+0xdc14>
   1f03c:	ldr	r1, [sl, #56]	; 0x38
   1f040:	ldr	ip, [sp, #48]	; 0x30
   1f044:	ldr	lr, [sp, #44]	; 0x2c
   1f048:	str	r1, [r0]
   1f04c:	mov	r1, #0
   1f050:	str	r1, [sl, #64]	; 0x40
   1f054:	str	r0, [sl, #56]	; 0x38
   1f058:	b	1dc50 <__assert_fail@plt+0xc4f0>
   1f05c:	str	sl, [sp, #52]	; 0x34
   1f060:	mov	r9, #3
   1f064:	b	1ee5c <__assert_fail@plt+0xd6fc>
   1f068:	mov	r0, r8
   1f06c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f070:	ldr	lr, [sp, #44]	; 0x2c
   1f074:	ldr	ip, [sp, #48]	; 0x30
   1f078:	mov	r7, r4
   1f07c:	b	1de90 <__assert_fail@plt+0xc730>
   1f080:	mov	r0, #996	; 0x3e4
   1f084:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f088:	cmp	r0, #0
   1f08c:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1f090:	ldr	r1, [sl, #56]	; 0x38
   1f094:	ldr	r5, [sp, #28]
   1f098:	ldr	ip, [sp, #48]	; 0x30
   1f09c:	ldr	lr, [sp, #44]	; 0x2c
   1f0a0:	str	r1, [r0]
   1f0a4:	mov	r1, #0
   1f0a8:	str	r1, [sl, #64]	; 0x40
   1f0ac:	str	r0, [sl, #56]	; 0x38
   1f0b0:	b	1de4c <__assert_fail@plt+0xc6ec>
   1f0b4:	mov	r0, #996	; 0x3e4
   1f0b8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f0bc:	cmp	r0, #0
   1f0c0:	beq	1f24c <__assert_fail@plt+0xdaec>
   1f0c4:	ldr	r1, [sl, #56]	; 0x38
   1f0c8:	ldr	ip, [sp, #48]	; 0x30
   1f0cc:	ldr	lr, [sp, #44]	; 0x2c
   1f0d0:	mov	r9, #0
   1f0d4:	str	r1, [r0]
   1f0d8:	mov	r1, #0
   1f0dc:	str	r1, [sl, #64]	; 0x40
   1f0e0:	str	r0, [sl, #56]	; 0x38
   1f0e4:	b	1dcfc <__assert_fail@plt+0xc59c>
   1f0e8:	mov	r0, #996	; 0x3e4
   1f0ec:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f0f0:	ldr	lr, [sp, #44]	; 0x2c
   1f0f4:	ldr	ip, [sp, #48]	; 0x30
   1f0f8:	cmp	r0, #0
   1f0fc:	beq	1dd90 <__assert_fail@plt+0xc630>
   1f100:	ldr	r1, [sl, #56]	; 0x38
   1f104:	str	r1, [r0]
   1f108:	mov	r1, #0
   1f10c:	str	r1, [sl, #64]	; 0x40
   1f110:	str	r0, [sl, #56]	; 0x38
   1f114:	b	1dd48 <__assert_fail@plt+0xc5e8>
   1f118:	mov	r0, #996	; 0x3e4
   1f11c:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f120:	cmp	r0, #0
   1f124:	beq	1f320 <__assert_fail@plt+0xdbc0>
   1f128:	ldr	r1, [sl, #56]	; 0x38
   1f12c:	ldr	ip, [sp, #48]	; 0x30
   1f130:	ldr	lr, [sp, #44]	; 0x2c
   1f134:	mov	r9, #0
   1f138:	str	r1, [r0]
   1f13c:	mov	r1, #0
   1f140:	str	r1, [sl, #64]	; 0x40
   1f144:	str	r0, [sl, #56]	; 0x38
   1f148:	b	1d070 <__assert_fail@plt+0xb910>
   1f14c:	mov	r0, #996	; 0x3e4
   1f150:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f154:	cmp	r0, #0
   1f158:	beq	1f32c <__assert_fail@plt+0xdbcc>
   1f15c:	ldr	r1, [sl, #56]	; 0x38
   1f160:	ldr	ip, [sp, #48]	; 0x30
   1f164:	ldr	lr, [sp, #44]	; 0x2c
   1f168:	mov	r9, #0
   1f16c:	str	r1, [r0]
   1f170:	mov	r1, #0
   1f174:	str	r1, [sl, #64]	; 0x40
   1f178:	str	r0, [sl, #56]	; 0x38
   1f17c:	b	1dca8 <__assert_fail@plt+0xc548>
   1f180:	mov	r0, #996	; 0x3e4
   1f184:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f188:	cmp	r0, #0
   1f18c:	beq	1f1b0 <__assert_fail@plt+0xda50>
   1f190:	ldr	r1, [sl, #56]	; 0x38
   1f194:	ldr	ip, [sp, #48]	; 0x30
   1f198:	ldr	lr, [sp, #44]	; 0x2c
   1f19c:	str	r1, [r0]
   1f1a0:	mov	r1, #0
   1f1a4:	str	r1, [sl, #64]	; 0x40
   1f1a8:	str	r0, [sl, #56]	; 0x38
   1f1ac:	b	1ddac <__assert_fail@plt+0xc64c>
   1f1b0:	mov	r0, #12
   1f1b4:	b	1ecfc <__assert_fail@plt+0xd59c>
   1f1b8:	mov	r4, #0
   1f1bc:	mov	r5, #0
   1f1c0:	b	1f1cc <__assert_fail@plt+0xda6c>
   1f1c4:	mov	r5, #4
   1f1c8:	mov	r4, #128	; 0x80
   1f1cc:	bl	11604 <__ctype_b_loc@plt>
   1f1d0:	ldr	r0, [r0]
   1f1d4:	ldr	ip, [sp, #48]	; 0x30
   1f1d8:	ldr	lr, [sp, #44]	; 0x2c
   1f1dc:	mov	r1, #1
   1f1e0:	mov	r9, #0
   1f1e4:	add	r7, r0, r4, lsl #1
   1f1e8:	b	1f200 <__assert_fail@plt+0xdaa0>
   1f1ec:	add	r5, r5, #1
   1f1f0:	add	r7, r7, #64	; 0x40
   1f1f4:	add	r4, r4, #32
   1f1f8:	cmp	r5, #8
   1f1fc:	beq	1d044 <__assert_fail@plt+0xb8e4>
   1f200:	add	r0, sl, r5, lsl #2
   1f204:	mov	r3, #0
   1f208:	add	r2, r0, #96	; 0x60
   1f20c:	mov	r0, r7
   1f210:	b	1f230 <__assert_fail@plt+0xdad0>
   1f214:	ldr	r6, [r2]
   1f218:	orr	r6, r6, r1, lsl r3
   1f21c:	str	r6, [r2]
   1f220:	add	r3, r3, #1
   1f224:	add	r0, r0, #2
   1f228:	cmp	r3, #32
   1f22c:	beq	1f1ec <__assert_fail@plt+0xda8c>
   1f230:	add	r6, r4, r3
   1f234:	cmp	r6, #95	; 0x5f
   1f238:	beq	1f214 <__assert_fail@plt+0xdab4>
   1f23c:	ldrh	r6, [r0]
   1f240:	ands	r6, r6, #8
   1f244:	beq	1f220 <__assert_fail@plt+0xdac0>
   1f248:	b	1f214 <__assert_fail@plt+0xdab4>
   1f24c:	ldr	ip, [sp, #48]	; 0x30
   1f250:	ldr	lr, [sp, #44]	; 0x2c
   1f254:	mov	r5, #0
   1f258:	mov	r9, #0
   1f25c:	b	1dd38 <__assert_fail@plt+0xc5d8>
   1f260:	cmp	r9, #0
   1f264:	beq	1f304 <__assert_fail@plt+0xdba4>
   1f268:	movw	r5, #255	; 0xff
   1f26c:	movt	r5, #4
   1f270:	mov	r6, r9
   1f274:	ldr	r9, [r9, #4]
   1f278:	cmp	r9, #0
   1f27c:	bne	1f270 <__assert_fail@plt+0xdb10>
   1f280:	ldr	r9, [r6, #8]
   1f284:	cmp	r9, #0
   1f288:	bne	1f270 <__assert_fail@plt+0xdb10>
   1f28c:	ldr	r0, [r6, #24]
   1f290:	and	r0, r0, r5
   1f294:	cmp	r0, #3
   1f298:	beq	1f2cc <__assert_fail@plt+0xdb6c>
   1f29c:	cmp	r0, #6
   1f2a0:	bne	1f2d8 <__assert_fail@plt+0xdb78>
   1f2a4:	ldr	r4, [r6, #20]
   1f2a8:	ldr	r0, [r4]
   1f2ac:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f2b0:	ldr	r0, [r4, #4]
   1f2b4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f2b8:	ldr	r0, [r4, #8]
   1f2bc:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f2c0:	ldr	r0, [r4, #12]
   1f2c4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f2c8:	b	1f2d0 <__assert_fail@plt+0xdb70>
   1f2cc:	ldr	r4, [r6, #20]
   1f2d0:	mov	r0, r4
   1f2d4:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f2d8:	ldr	r0, [r6]
   1f2dc:	cmp	r0, #0
   1f2e0:	beq	1f304 <__assert_fail@plt+0xdba4>
   1f2e4:	ldr	r9, [r0, #8]
   1f2e8:	cmp	r9, r6
   1f2ec:	mov	r6, r0
   1f2f0:	beq	1f28c <__assert_fail@plt+0xdb2c>
   1f2f4:	cmp	r9, #0
   1f2f8:	mov	r6, r0
   1f2fc:	beq	1f28c <__assert_fail@plt+0xdb2c>
   1f300:	b	1f270 <__assert_fail@plt+0xdb10>
   1f304:	mov	r0, #8
   1f308:	b	1ecfc <__assert_fail@plt+0xd59c>
   1f30c:	ldr	r8, [sp, #24]
   1f310:	mov	r9, r0
   1f314:	b	1ee5c <__assert_fail@plt+0xd6fc>
   1f318:	ldr	r8, [sp, #24]
   1f31c:	b	1f060 <__assert_fail@plt+0xd900>
   1f320:	mov	r4, #0
   1f324:	mov	r0, #9
   1f328:	b	1f334 <__assert_fail@plt+0xdbd4>
   1f32c:	mov	r4, #0
   1f330:	mov	r0, #10
   1f334:	ldr	ip, [sp, #48]	; 0x30
   1f338:	ldr	lr, [sp, #44]	; 0x2c
   1f33c:	mov	r9, #0
   1f340:	b	1dce8 <__assert_fail@plt+0xc588>
   1f344:	mov	r0, #996	; 0x3e4
   1f348:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f34c:	cmp	r0, #0
   1f350:	beq	1f374 <__assert_fail@plt+0xdc14>
   1f354:	ldr	r1, [sl, #56]	; 0x38
   1f358:	str	r1, [r0]
   1f35c:	mov	r1, #0
   1f360:	str	r1, [sl, #64]	; 0x40
   1f364:	str	r0, [sl, #56]	; 0x38
   1f368:	b	1ee10 <__assert_fail@plt+0xd6b0>
   1f36c:	ldr	r5, [sp, #28]
   1f370:	ldr	r7, [sp, #60]	; 0x3c
   1f374:	ldr	r4, [sp, #20]
   1f378:	mov	r0, #12
   1f37c:	str	r0, [r4]
   1f380:	b	1ee74 <__assert_fail@plt+0xd714>
   1f384:	mov	r0, r6
   1f388:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f38c:	mov	r0, r9
   1f390:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f394:	ldr	r8, [sp, #24]
   1f398:	mov	r9, #12
   1f39c:	b	1ee5c <__assert_fail@plt+0xd6fc>
   1f3a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3a4:	add	fp, sp, #28
   1f3a8:	sub	sp, sp, #12
   1f3ac:	mov	r9, r1
   1f3b0:	mov	r6, r0
   1f3b4:	mov	r4, #0
   1f3b8:	mov	r0, #32
   1f3bc:	mov	r1, #1
   1f3c0:	mov	sl, r3
   1f3c4:	mov	r5, r2
   1f3c8:	str	r4, [sp, #8]
   1f3cc:	bl	2b20c <__assert_fail@plt+0x19aac>
   1f3d0:	ldr	r1, [fp, #12]
   1f3d4:	cmp	r0, #0
   1f3d8:	beq	1f728 <__assert_fail@plt+0xdfc8>
   1f3dc:	mov	r7, r0
   1f3e0:	mov	r0, #40	; 0x28
   1f3e4:	mov	r1, #1
   1f3e8:	bl	2b20c <__assert_fail@plt+0x19aac>
   1f3ec:	cmp	r0, #0
   1f3f0:	beq	1f648 <__assert_fail@plt+0xdee8>
   1f3f4:	mov	r8, r0
   1f3f8:	ldrb	r0, [r0, #16]
   1f3fc:	ldr	r1, [fp, #8]
   1f400:	mov	r4, #0
   1f404:	add	r3, sp, #8
   1f408:	str	r5, [sp]
   1f40c:	mov	r2, r8
   1f410:	str	r4, [sp, #4]
   1f414:	and	r0, r0, #254	; 0xfe
   1f418:	orr	r0, r0, r1
   1f41c:	mov	r1, r7
   1f420:	strb	r0, [r8, #16]
   1f424:	mov	r0, r9
   1f428:	bl	1fba0 <__assert_fail@plt+0xe440>
   1f42c:	cmp	r0, #0
   1f430:	bne	1f664 <__assert_fail@plt+0xdf04>
   1f434:	ldrb	r0, [sl]
   1f438:	cmp	r0, #0
   1f43c:	beq	1f468 <__assert_fail@plt+0xdd08>
   1f440:	add	r1, sl, #1
   1f444:	mov	r2, #1
   1f448:	ubfx	r3, r0, #5, #3
   1f44c:	and	r0, r0, #31
   1f450:	ldr	r5, [r7, r3, lsl #2]
   1f454:	orr	r0, r5, r2, lsl r0
   1f458:	str	r0, [r7, r3, lsl #2]
   1f45c:	ldrb	r0, [r1], #1
   1f460:	cmp	r0, #0
   1f464:	bne	1f448 <__assert_fail@plt+0xdce8>
   1f468:	ldr	r0, [fp, #8]
   1f46c:	cmp	r0, #0
   1f470:	beq	1f490 <__assert_fail@plt+0xdd30>
   1f474:	vld1.32	{d16-d17}, [r7]
   1f478:	mov	r0, r7
   1f47c:	vmvn	q8, q8
   1f480:	vst1.32	{d16-d17}, [r0]!
   1f484:	vld1.32	{d16-d17}, [r0]
   1f488:	vmvn	q8, q8
   1f48c:	vst1.32	{d16-d17}, [r0]
   1f490:	ldr	r0, [r6, #92]	; 0x5c
   1f494:	cmp	r0, #2
   1f498:	blt	1f514 <__assert_fail@plt+0xddb4>
   1f49c:	ldr	r5, [r6, #60]	; 0x3c
   1f4a0:	ldm	r7, {r0, r1, r2, ip}
   1f4a4:	ldr	r3, [r5]
   1f4a8:	and	r0, r0, r3
   1f4ac:	str	r0, [r7]
   1f4b0:	ldr	r0, [r5, #4]
   1f4b4:	and	r0, r1, r0
   1f4b8:	str	r0, [r7, #4]
   1f4bc:	ldr	r0, [r5, #8]
   1f4c0:	and	r0, r2, r0
   1f4c4:	str	r0, [r7, #8]
   1f4c8:	ldr	r0, [r5, #12]
   1f4cc:	and	r0, ip, r0
   1f4d0:	str	r0, [r7, #12]
   1f4d4:	ldr	r0, [r7, #16]
   1f4d8:	ldr	r1, [r5, #16]
   1f4dc:	and	r0, r0, r1
   1f4e0:	str	r0, [r7, #16]
   1f4e4:	ldr	r0, [r5, #20]
   1f4e8:	ldr	r1, [r7, #20]
   1f4ec:	and	r0, r1, r0
   1f4f0:	str	r0, [r7, #20]
   1f4f4:	ldr	r0, [r5, #24]
   1f4f8:	ldr	r1, [r7, #24]
   1f4fc:	and	r0, r1, r0
   1f500:	str	r0, [r7, #24]
   1f504:	ldr	r0, [r5, #28]
   1f508:	ldr	r1, [r7, #28]
   1f50c:	and	r0, r1, r0
   1f510:	str	r0, [r7, #28]
   1f514:	ldr	r1, [r6, #64]	; 0x40
   1f518:	cmp	r1, #31
   1f51c:	beq	1f6a4 <__assert_fail@plt+0xdf44>
   1f520:	ldr	r0, [r6, #56]	; 0x38
   1f524:	add	r0, r0, r1, lsl #5
   1f528:	add	r2, r1, #1
   1f52c:	vmov.i32	q8, #0	; 0x00000000
   1f530:	mov	r1, #3
   1f534:	str	r2, [r6, #64]	; 0x40
   1f538:	mov	r2, #0
   1f53c:	add	r5, r0, #4
   1f540:	str	r2, [r0, #20]
   1f544:	str	r7, [r0, #24]
   1f548:	str	r1, [r0, #28]
   1f54c:	mov	r0, #28
   1f550:	mov	r1, r5
   1f554:	vst1.32	{d16-d17}, [r1], r0
   1f558:	mvn	r0, #0
   1f55c:	str	r0, [r1]
   1f560:	ldr	r0, [r6, #92]	; 0x5c
   1f564:	cmp	r0, #2
   1f568:	blt	1f610 <__assert_fail@plt+0xdeb0>
   1f56c:	ldrb	r0, [r6, #88]	; 0x58
   1f570:	orr	r0, r0, #2
   1f574:	strb	r0, [r6, #88]	; 0x58
   1f578:	ldr	r1, [r6, #64]	; 0x40
   1f57c:	cmp	r1, #31
   1f580:	beq	1f6cc <__assert_fail@plt+0xdf6c>
   1f584:	ldr	r0, [r6, #56]	; 0x38
   1f588:	add	r0, r0, r1, lsl #5
   1f58c:	vmov.i32	q8, #0	; 0x00000000
   1f590:	add	r2, r1, #1
   1f594:	mov	r1, #6
   1f598:	mov	r4, #0
   1f59c:	str	r2, [r6, #64]	; 0x40
   1f5a0:	add	r7, r0, #4
   1f5a4:	str	r4, [r0, #20]
   1f5a8:	str	r8, [r0, #24]
   1f5ac:	str	r1, [r0, #28]
   1f5b0:	mov	r0, #28
   1f5b4:	mov	r1, r7
   1f5b8:	vst1.32	{d16-d17}, [r1], r0
   1f5bc:	mvn	r0, #0
   1f5c0:	str	r0, [r1]
   1f5c4:	ldr	r1, [r6, #64]	; 0x40
   1f5c8:	cmp	r1, #31
   1f5cc:	beq	1f734 <__assert_fail@plt+0xdfd4>
   1f5d0:	ldr	r0, [r6, #56]	; 0x38
   1f5d4:	add	r4, r0, r1, lsl #5
   1f5d8:	add	r2, r1, #1
   1f5dc:	mov	r0, #0
   1f5e0:	mov	r1, #10
   1f5e4:	str	r2, [r6, #64]	; 0x40
   1f5e8:	mvn	r2, #0
   1f5ec:	str	r0, [r4, #4]!
   1f5f0:	add	r3, r4, #20
   1f5f4:	stmib	r4, {r5, r7}
   1f5f8:	str	r0, [r4, #12]
   1f5fc:	str	r0, [r4, #16]
   1f600:	stm	r3, {r0, r1, r2}
   1f604:	str	r4, [r5]
   1f608:	str	r4, [r7]
   1f60c:	b	1f63c <__assert_fail@plt+0xdedc>
   1f610:	ldr	r0, [r8]
   1f614:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f618:	ldr	r0, [r8, #4]
   1f61c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f620:	ldr	r0, [r8, #8]
   1f624:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f628:	ldr	r0, [r8, #12]
   1f62c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f630:	mov	r0, r8
   1f634:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f638:	mov	r4, r5
   1f63c:	mov	r0, r4
   1f640:	sub	sp, fp, #28
   1f644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f648:	mov	r0, r7
   1f64c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f650:	ldr	r1, [fp, #12]
   1f654:	mov	r0, #12
   1f658:	mov	r4, #0
   1f65c:	str	r0, [r1]
   1f660:	b	1f63c <__assert_fail@plt+0xdedc>
   1f664:	mov	r5, r0
   1f668:	mov	r0, r7
   1f66c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f670:	ldr	r0, [r8]
   1f674:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f678:	ldr	r0, [r8, #4]
   1f67c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f680:	ldr	r0, [r8, #8]
   1f684:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f688:	ldr	r0, [r8, #12]
   1f68c:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f690:	mov	r0, r8
   1f694:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f698:	ldr	r0, [fp, #12]
   1f69c:	str	r5, [r0]
   1f6a0:	b	1f63c <__assert_fail@plt+0xdedc>
   1f6a4:	mov	r0, #996	; 0x3e4
   1f6a8:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f6ac:	cmp	r0, #0
   1f6b0:	beq	1f6f4 <__assert_fail@plt+0xdf94>
   1f6b4:	ldr	r1, [r6, #56]	; 0x38
   1f6b8:	str	r1, [r0]
   1f6bc:	mov	r1, #0
   1f6c0:	str	r1, [r6, #64]	; 0x40
   1f6c4:	str	r0, [r6, #56]	; 0x38
   1f6c8:	b	1f524 <__assert_fail@plt+0xddc4>
   1f6cc:	mov	r0, #996	; 0x3e4
   1f6d0:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f6d4:	cmp	r0, #0
   1f6d8:	beq	1f6f4 <__assert_fail@plt+0xdf94>
   1f6dc:	ldr	r1, [r6, #56]	; 0x38
   1f6e0:	str	r1, [r0]
   1f6e4:	mov	r1, #0
   1f6e8:	str	r1, [r6, #64]	; 0x40
   1f6ec:	str	r0, [r6, #56]	; 0x38
   1f6f0:	b	1f588 <__assert_fail@plt+0xde28>
   1f6f4:	mov	r0, r7
   1f6f8:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f6fc:	ldr	r0, [r8]
   1f700:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f704:	ldr	r0, [r8, #4]
   1f708:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f70c:	ldr	r0, [r8, #8]
   1f710:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f714:	ldr	r0, [r8, #12]
   1f718:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f71c:	mov	r0, r8
   1f720:	bl	141b8 <__assert_fail@plt+0x2a58>
   1f724:	ldr	r1, [fp, #12]
   1f728:	mov	r0, #12
   1f72c:	str	r0, [r1]
   1f730:	b	1f63c <__assert_fail@plt+0xdedc>
   1f734:	mov	r0, #996	; 0x3e4
   1f738:	bl	2b260 <__assert_fail@plt+0x19b00>
   1f73c:	cmp	r0, #0
   1f740:	beq	1f63c <__assert_fail@plt+0xdedc>
   1f744:	ldr	r1, [r6, #56]	; 0x38
   1f748:	str	r1, [r0]
   1f74c:	mov	r1, #0
   1f750:	str	r1, [r6, #64]	; 0x40
   1f754:	str	r0, [r6, #56]	; 0x38
   1f758:	b	1f5d4 <__assert_fail@plt+0xde74>
   1f75c:	push	{fp, lr}
   1f760:	mov	fp, sp
   1f764:	ldr	ip, [r1, #40]	; 0x28
   1f768:	ldr	r3, [r1, #56]	; 0x38
   1f76c:	cmp	r3, ip
   1f770:	ble	1f7f0 <__assert_fail@plt+0xe090>
   1f774:	ldr	r3, [r1, #4]
   1f778:	ldrb	lr, [r3, ip]
   1f77c:	strb	lr, [r0]
   1f780:	ldr	r3, [r1, #80]	; 0x50
   1f784:	cmp	r3, #2
   1f788:	blt	1f7ac <__assert_fail@plt+0xe04c>
   1f78c:	ldr	r3, [r1, #28]
   1f790:	ldr	ip, [r1, #40]	; 0x28
   1f794:	cmp	ip, r3
   1f798:	beq	1f7ac <__assert_fail@plt+0xe04c>
   1f79c:	ldr	r3, [r1, #8]
   1f7a0:	ldr	r3, [r3, ip, lsl #2]
   1f7a4:	cmn	r3, #1
   1f7a8:	beq	1f8a0 <__assert_fail@plt+0xe140>
   1f7ac:	tst	r2, #1
   1f7b0:	beq	1f804 <__assert_fail@plt+0xe0a4>
   1f7b4:	cmp	lr, #92	; 0x5c
   1f7b8:	bne	1f804 <__assert_fail@plt+0xe0a4>
   1f7bc:	ldr	r2, [r1, #40]	; 0x28
   1f7c0:	ldr	r3, [r1, #48]	; 0x30
   1f7c4:	add	r2, r2, #1
   1f7c8:	cmp	r2, r3
   1f7cc:	bge	1f8a0 <__assert_fail@plt+0xe140>
   1f7d0:	str	r2, [r1, #40]	; 0x28
   1f7d4:	ldr	r1, [r1, #4]
   1f7d8:	ldrb	r2, [r1, r2]
   1f7dc:	mov	r1, #1
   1f7e0:	strb	r1, [r0, #4]
   1f7e4:	strb	r2, [r0]
   1f7e8:	mov	r0, r1
   1f7ec:	pop	{fp, pc}
   1f7f0:	mov	r1, #2
   1f7f4:	strb	r1, [r0, #4]
   1f7f8:	mov	r1, #0
   1f7fc:	mov	r0, r1
   1f800:	pop	{fp, pc}
   1f804:	cmp	lr, #92	; 0x5c
   1f808:	bgt	1f85c <__assert_fail@plt+0xe0fc>
   1f80c:	cmp	lr, #45	; 0x2d
   1f810:	beq	1f874 <__assert_fail@plt+0xe114>
   1f814:	cmp	lr, #91	; 0x5b
   1f818:	bne	1f8a0 <__assert_fail@plt+0xe140>
   1f81c:	ldr	r3, [r1, #40]	; 0x28
   1f820:	ldr	ip, [r1, #48]	; 0x30
   1f824:	add	r3, r3, #1
   1f828:	cmp	r3, ip
   1f82c:	bge	1f890 <__assert_fail@plt+0xe130>
   1f830:	ldr	r1, [r1, #4]
   1f834:	ldrb	r1, [r1, r3]
   1f838:	cmp	r1, #61	; 0x3d
   1f83c:	strb	r1, [r0]
   1f840:	beq	1f8b0 <__assert_fail@plt+0xe150>
   1f844:	cmp	r1, #58	; 0x3a
   1f848:	beq	1f8b8 <__assert_fail@plt+0xe158>
   1f84c:	cmp	r1, #46	; 0x2e
   1f850:	bne	1f898 <__assert_fail@plt+0xe138>
   1f854:	mov	r1, #26
   1f858:	b	1f8c4 <__assert_fail@plt+0xe164>
   1f85c:	cmp	lr, #93	; 0x5d
   1f860:	beq	1f87c <__assert_fail@plt+0xe11c>
   1f864:	cmp	lr, #94	; 0x5e
   1f868:	bne	1f8a0 <__assert_fail@plt+0xe140>
   1f86c:	mov	r1, #25
   1f870:	b	1f880 <__assert_fail@plt+0xe120>
   1f874:	mov	r1, #22
   1f878:	b	1f880 <__assert_fail@plt+0xe120>
   1f87c:	mov	r1, #21
   1f880:	strb	r1, [r0, #4]
   1f884:	mov	r1, #1
   1f888:	mov	r0, r1
   1f88c:	pop	{fp, pc}
   1f890:	mov	r1, #0
   1f894:	strb	r1, [r0]
   1f898:	mov	r1, #91	; 0x5b
   1f89c:	strb	r1, [r0]
   1f8a0:	mov	r1, #1
   1f8a4:	strb	r1, [r0, #4]
   1f8a8:	mov	r0, r1
   1f8ac:	pop	{fp, pc}
   1f8b0:	mov	r1, #28
   1f8b4:	b	1f8c4 <__assert_fail@plt+0xe164>
   1f8b8:	tst	r2, #4
   1f8bc:	beq	1f898 <__assert_fail@plt+0xe138>
   1f8c0:	mov	r1, #30
   1f8c4:	strb	r1, [r0, #4]
   1f8c8:	mov	r1, #2
   1f8cc:	mov	r0, r1
   1f8d0:	pop	{fp, pc}
   1f8d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f8d8:	add	fp, sp, #24
   1f8dc:	sub	sp, sp, #8
   1f8e0:	mov	r5, r2
   1f8e4:	ldr	r2, [r1, #80]	; 0x50
   1f8e8:	mov	r9, r0
   1f8ec:	ldr	r0, [r1, #40]	; 0x28
   1f8f0:	cmp	r2, #1
   1f8f4:	beq	1f96c <__assert_fail@plt+0xe20c>
   1f8f8:	ldr	r2, [r1, #28]
   1f8fc:	add	r6, r0, #1
   1f900:	cmp	r6, r2
   1f904:	bge	1f96c <__assert_fail@plt+0xe20c>
   1f908:	ldr	lr, [r1, #8]
   1f90c:	sub	r4, r0, r2
   1f910:	sub	ip, r2, r0
   1f914:	mvn	r2, #0
   1f918:	add	r6, lr, r0, lsl #2
   1f91c:	ldr	r7, [r6, -r2, lsl #2]
   1f920:	cmn	r7, #1
   1f924:	bne	1f938 <__assert_fail@plt+0xe1d8>
   1f928:	sub	r2, r2, #1
   1f92c:	cmp	r4, r2
   1f930:	bne	1f91c <__assert_fail@plt+0xe1bc>
   1f934:	b	1f944 <__assert_fail@plt+0xe1e4>
   1f938:	rsb	ip, r2, #0
   1f93c:	cmp	ip, #2
   1f940:	bcc	1f96c <__assert_fail@plt+0xe20c>
   1f944:	mov	r2, #1
   1f948:	str	r2, [r9]
   1f94c:	ldr	r0, [lr, r0, lsl #2]
   1f950:	str	r0, [r9, #4]
   1f954:	ldr	r0, [r1, #40]	; 0x28
   1f958:	add	r0, r0, ip
   1f95c:	str	r0, [r1, #40]	; 0x28
   1f960:	mov	r0, #0
   1f964:	sub	sp, fp, #24
   1f968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f96c:	add	r2, r0, r3
   1f970:	str	r2, [r1, #40]	; 0x28
   1f974:	ldrb	r6, [r5, #4]
   1f978:	sub	r0, r6, #22
   1f97c:	cmp	r0, #8
   1f980:	bhi	1fb88 <__assert_fail@plt+0xe428>
   1f984:	add	r3, pc, #0
   1f988:	ldr	pc, [r3, r0, lsl #2]
   1f98c:	andeq	pc, r1, r0, ror #22
   1f990:	andeq	pc, r1, r8, lsl #23
   1f994:	andeq	pc, r1, r8, lsl #23
   1f998:	andeq	pc, r1, r8, lsl #23
   1f99c:			; <UNDEFINED> instruction: 0x0001f9b0
   1f9a0:	andeq	pc, r1, r8, lsl #23
   1f9a4:			; <UNDEFINED> instruction: 0x0001f9b0
   1f9a8:	andeq	pc, r1, r8, lsl #23
   1f9ac:			; <UNDEFINED> instruction: 0x0001f9b0
   1f9b0:	ldr	r3, [r1, #56]	; 0x38
   1f9b4:	mov	r0, #7
   1f9b8:	cmp	r3, r2
   1f9bc:	ble	1fb98 <__assert_fail@plt+0xe438>
   1f9c0:	ldrb	r3, [r5]
   1f9c4:	mov	r2, #0
   1f9c8:	uxtb	r7, r6
   1f9cc:	cmp	r7, #30
   1f9d0:	bne	1f9e0 <__assert_fail@plt+0xe280>
   1f9d4:	ldrb	r7, [r1, #75]	; 0x4b
   1f9d8:	cmp	r7, #0
   1f9dc:	bne	1fa38 <__assert_fail@plt+0xe2d8>
   1f9e0:	ldr	r4, [r1, #40]	; 0x28
   1f9e4:	ldr	r7, [r1, #4]
   1f9e8:	add	r6, r4, #1
   1f9ec:	str	r6, [r1, #40]	; 0x28
   1f9f0:	ldrb	r4, [r7, r4]
   1f9f4:	ldr	r7, [r1, #56]	; 0x38
   1f9f8:	cmp	r7, r6
   1f9fc:	ble	1fb98 <__assert_fail@plt+0xe438>
   1fa00:	uxtb	r7, r4
   1fa04:	cmp	r7, r3
   1fa08:	bne	1fa1c <__assert_fail@plt+0xe2bc>
   1fa0c:	ldr	r7, [r1, #4]
   1fa10:	ldrb	r7, [r7, r6]
   1fa14:	cmp	r7, #93	; 0x5d
   1fa18:	beq	1fb10 <__assert_fail@plt+0xe3b0>
   1fa1c:	ldr	r7, [r9, #4]
   1fa20:	strb	r4, [r7, r2]
   1fa24:	add	r2, r2, #1
   1fa28:	cmp	r2, #32
   1fa2c:	beq	1fb98 <__assert_fail@plt+0xe438>
   1fa30:	ldrb	r6, [r5, #4]
   1fa34:	b	1f9c8 <__assert_fail@plt+0xe268>
   1fa38:	ldrb	r7, [r1, #76]	; 0x4c
   1fa3c:	cmp	r7, #0
   1fa40:	beq	1fadc <__assert_fail@plt+0xe37c>
   1fa44:	ldr	lr, [r1, #28]
   1fa48:	ldr	ip, [r1, #40]	; 0x28
   1fa4c:	cmp	lr, ip
   1fa50:	beq	1fa64 <__assert_fail@plt+0xe304>
   1fa54:	ldr	r4, [r1, #8]
   1fa58:	ldr	r4, [r4, ip, lsl #2]
   1fa5c:	cmn	r4, #1
   1fa60:	beq	1fafc <__assert_fail@plt+0xe39c>
   1fa64:	ldr	r6, [r1, #12]
   1fa68:	ldr	r7, [r1, #24]
   1fa6c:	ldr	r4, [r1]
   1fa70:	ldr	r6, [r6, ip, lsl #2]
   1fa74:	add	r6, r7, r6
   1fa78:	add	r4, r4, r6
   1fa7c:	ldrsb	r4, [r4]
   1fa80:	cmn	r4, #1
   1fa84:	ble	1fafc <__assert_fail@plt+0xe39c>
   1fa88:	ldr	r7, [r1, #80]	; 0x50
   1fa8c:	mov	r6, #1
   1fa90:	cmp	r7, #1
   1fa94:	beq	1fad0 <__assert_fail@plt+0xe370>
   1fa98:	add	r7, ip, #1
   1fa9c:	cmp	r7, lr
   1faa0:	bge	1fad0 <__assert_fail@plt+0xe370>
   1faa4:	ldr	r6, [r1, #8]
   1faa8:	sub	lr, lr, ip
   1faac:	add	r8, r6, ip, lsl #2
   1fab0:	mov	r6, #1
   1fab4:	ldr	r7, [r8, r6, lsl #2]
   1fab8:	cmn	r7, #1
   1fabc:	bne	1fad0 <__assert_fail@plt+0xe370>
   1fac0:	add	r6, r6, #1
   1fac4:	cmp	lr, r6
   1fac8:	bne	1fab4 <__assert_fail@plt+0xe354>
   1facc:	mov	r6, lr
   1fad0:	add	r6, r6, ip
   1fad4:	str	r6, [r1, #40]	; 0x28
   1fad8:	b	1f9f4 <__assert_fail@plt+0xe294>
   1fadc:	ldr	r7, [r1, #40]	; 0x28
   1fae0:	ldr	r4, [r1, #24]
   1fae4:	ldr	ip, [r1]
   1fae8:	add	r6, r7, #1
   1faec:	add	r7, r7, r4
   1faf0:	str	r6, [r1, #40]	; 0x28
   1faf4:	ldrb	r4, [ip, r7]
   1faf8:	b	1f9f4 <__assert_fail@plt+0xe294>
   1fafc:	add	r6, ip, #1
   1fb00:	str	r6, [r1, #40]	; 0x28
   1fb04:	ldr	r7, [r1, #4]
   1fb08:	ldrb	r4, [r7, ip]
   1fb0c:	b	1f9f4 <__assert_fail@plt+0xe294>
   1fb10:	add	r0, r6, #1
   1fb14:	str	r0, [r1, #40]	; 0x28
   1fb18:	mov	r0, #0
   1fb1c:	ldr	r1, [r9, #4]
   1fb20:	strb	r0, [r1, r2]
   1fb24:	ldrb	r1, [r5, #4]
   1fb28:	cmp	r1, #30
   1fb2c:	beq	1fb48 <__assert_fail@plt+0xe3e8>
   1fb30:	cmp	r1, #28
   1fb34:	beq	1fb50 <__assert_fail@plt+0xe3f0>
   1fb38:	cmp	r1, #26
   1fb3c:	bne	1fb98 <__assert_fail@plt+0xe438>
   1fb40:	mov	r1, #3
   1fb44:	b	1fb54 <__assert_fail@plt+0xe3f4>
   1fb48:	mov	r1, #4
   1fb4c:	b	1fb54 <__assert_fail@plt+0xe3f4>
   1fb50:	mov	r1, #2
   1fb54:	str	r1, [r9]
   1fb58:	sub	sp, fp, #24
   1fb5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fb60:	ldr	r0, [fp, #12]
   1fb64:	cmp	r0, #0
   1fb68:	bne	1fb88 <__assert_fail@plt+0xe428>
   1fb6c:	ldr	r2, [fp, #8]
   1fb70:	mov	r0, sp
   1fb74:	bl	1f75c <__assert_fail@plt+0xdffc>
   1fb78:	ldrb	r1, [sp, #4]
   1fb7c:	mov	r0, #11
   1fb80:	cmp	r1, #21
   1fb84:	bne	1fb98 <__assert_fail@plt+0xe438>
   1fb88:	mov	r0, #0
   1fb8c:	str	r0, [r9]
   1fb90:	ldrb	r1, [r5]
   1fb94:	strb	r1, [r9, #4]
   1fb98:	sub	sp, fp, #24
   1fb9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fba0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fba4:	add	fp, sp, #24
   1fba8:	mov	r8, r0
   1fbac:	ldrb	r0, [fp, #14]
   1fbb0:	ldr	r6, [fp, #8]
   1fbb4:	mov	r5, r3
   1fbb8:	mov	r7, r2
   1fbbc:	mov	r4, r1
   1fbc0:	tst	r0, #64	; 0x40
   1fbc4:	beq	1fc00 <__assert_fail@plt+0xe4a0>
   1fbc8:	movw	r1, #51658	; 0xc9ca
   1fbcc:	mov	r0, r6
   1fbd0:	movt	r1, #2
   1fbd4:	bl	11418 <strcmp@plt>
   1fbd8:	cmp	r0, #0
   1fbdc:	beq	1fbf8 <__assert_fail@plt+0xe498>
   1fbe0:	movw	r1, #51664	; 0xc9d0
   1fbe4:	mov	r0, r6
   1fbe8:	movt	r1, #2
   1fbec:	bl	11418 <strcmp@plt>
   1fbf0:	cmp	r0, #0
   1fbf4:	bne	1fc00 <__assert_fail@plt+0xe4a0>
   1fbf8:	movw	r6, #51670	; 0xc9d6
   1fbfc:	movt	r6, #2
   1fc00:	ldr	r0, [r5]
   1fc04:	ldr	r1, [r7, #36]	; 0x24
   1fc08:	cmp	r0, r1
   1fc0c:	beq	20134 <__assert_fail@plt+0xe9d4>
   1fc10:	mov	r0, r6
   1fc14:	bl	113e8 <wctype@plt>
   1fc18:	ldr	r2, [r7, #36]	; 0x24
   1fc1c:	ldr	r1, [r7, #12]
   1fc20:	add	r3, r2, #1
   1fc24:	str	r3, [r7, #36]	; 0x24
   1fc28:	str	r0, [r1, r2, lsl #2]
   1fc2c:	movw	r1, #51646	; 0xc9be
   1fc30:	mov	r0, r6
   1fc34:	movt	r1, #2
   1fc38:	bl	11418 <strcmp@plt>
   1fc3c:	cmp	r0, #0
   1fc40:	beq	1fd70 <__assert_fail@plt+0xe610>
   1fc44:	movw	r1, #51676	; 0xc9dc
   1fc48:	mov	r0, r6
   1fc4c:	movt	r1, #2
   1fc50:	bl	11418 <strcmp@plt>
   1fc54:	cmp	r0, #0
   1fc58:	beq	1fdc0 <__assert_fail@plt+0xe660>
   1fc5c:	movw	r1, #51664	; 0xc9d0
   1fc60:	mov	r0, r6
   1fc64:	movt	r1, #2
   1fc68:	bl	11418 <strcmp@plt>
   1fc6c:	cmp	r0, #0
   1fc70:	beq	1fe10 <__assert_fail@plt+0xe6b0>
   1fc74:	movw	r1, #51652	; 0xc9c4
   1fc78:	mov	r0, r6
   1fc7c:	movt	r1, #2
   1fc80:	bl	11418 <strcmp@plt>
   1fc84:	cmp	r0, #0
   1fc88:	beq	1fe60 <__assert_fail@plt+0xe700>
   1fc8c:	movw	r1, #51670	; 0xc9d6
   1fc90:	mov	r0, r6
   1fc94:	movt	r1, #2
   1fc98:	bl	11418 <strcmp@plt>
   1fc9c:	cmp	r0, #0
   1fca0:	beq	1fee8 <__assert_fail@plt+0xe788>
   1fca4:	movw	r1, #51707	; 0xc9fb
   1fca8:	mov	r0, r6
   1fcac:	movt	r1, #2
   1fcb0:	bl	11418 <strcmp@plt>
   1fcb4:	cmp	r0, #0
   1fcb8:	beq	1ff38 <__assert_fail@plt+0xe7d8>
   1fcbc:	movw	r1, #51682	; 0xc9e2
   1fcc0:	mov	r0, r6
   1fcc4:	movt	r1, #2
   1fcc8:	bl	11418 <strcmp@plt>
   1fccc:	cmp	r0, #0
   1fcd0:	beq	1ff90 <__assert_fail@plt+0xe830>
   1fcd4:	movw	r1, #51658	; 0xc9ca
   1fcd8:	mov	r0, r6
   1fcdc:	movt	r1, #2
   1fce0:	bl	11418 <strcmp@plt>
   1fce4:	cmp	r0, #0
   1fce8:	beq	1ffe4 <__assert_fail@plt+0xe884>
   1fcec:	movw	r1, #51688	; 0xc9e8
   1fcf0:	mov	r0, r6
   1fcf4:	movt	r1, #2
   1fcf8:	bl	11418 <strcmp@plt>
   1fcfc:	cmp	r0, #0
   1fd00:	beq	20038 <__assert_fail@plt+0xe8d8>
   1fd04:	movw	r1, #51694	; 0xc9ee
   1fd08:	mov	r0, r6
   1fd0c:	movt	r1, #2
   1fd10:	bl	11418 <strcmp@plt>
   1fd14:	cmp	r0, #0
   1fd18:	beq	2008c <__assert_fail@plt+0xe92c>
   1fd1c:	movw	r1, #51700	; 0xc9f4
   1fd20:	mov	r0, r6
   1fd24:	movt	r1, #2
   1fd28:	bl	11418 <strcmp@plt>
   1fd2c:	cmp	r0, #0
   1fd30:	beq	200e0 <__assert_fail@plt+0xe980>
   1fd34:	movw	r1, #51706	; 0xc9fa
   1fd38:	mov	r0, r6
   1fd3c:	movt	r1, #2
   1fd40:	bl	11418 <strcmp@plt>
   1fd44:	mov	r1, r0
   1fd48:	mov	r0, #4
   1fd4c:	cmp	r1, #0
   1fd50:	bne	20474 <__assert_fail@plt+0xed14>
   1fd54:	bl	11604 <__ctype_b_loc@plt>
   1fd58:	ldr	r1, [r0]
   1fd5c:	mov	r2, #0
   1fd60:	mov	r3, #1
   1fd64:	cmp	r8, #0
   1fd68:	beq	1fec4 <__assert_fail@plt+0xe764>
   1fd6c:	b	203bc <__assert_fail@plt+0xec5c>
   1fd70:	bl	11604 <__ctype_b_loc@plt>
   1fd74:	ldr	r1, [r0]
   1fd78:	cmp	r8, #0
   1fd7c:	bne	201d4 <__assert_fail@plt+0xea74>
   1fd80:	mov	r0, #0
   1fd84:	mov	r2, #1
   1fd88:	b	1fd9c <__assert_fail@plt+0xe63c>
   1fd8c:	add	r0, r0, #1
   1fd90:	add	r1, r1, #2
   1fd94:	cmp	r0, #256	; 0x100
   1fd98:	beq	1ff88 <__assert_fail@plt+0xe828>
   1fd9c:	ldrb	r3, [r1]
   1fda0:	tst	r3, #8
   1fda4:	beq	1fd8c <__assert_fail@plt+0xe62c>
   1fda8:	ubfx	r3, r0, #5, #3
   1fdac:	and	r6, r0, #31
   1fdb0:	ldr	r7, [r4, r3, lsl #2]
   1fdb4:	orr	r7, r7, r2, lsl r6
   1fdb8:	str	r7, [r4, r3, lsl #2]
   1fdbc:	b	1fd8c <__assert_fail@plt+0xe62c>
   1fdc0:	bl	11604 <__ctype_b_loc@plt>
   1fdc4:	ldr	r1, [r0]
   1fdc8:	cmp	r8, #0
   1fdcc:	bne	20258 <__assert_fail@plt+0xeaf8>
   1fdd0:	mov	r0, #0
   1fdd4:	mov	r2, #1
   1fdd8:	b	1fdec <__assert_fail@plt+0xe68c>
   1fddc:	add	r0, r0, #1
   1fde0:	add	r1, r1, #2
   1fde4:	cmp	r0, #256	; 0x100
   1fde8:	beq	1ff88 <__assert_fail@plt+0xe828>
   1fdec:	ldrb	r3, [r1]
   1fdf0:	tst	r3, #2
   1fdf4:	beq	1fddc <__assert_fail@plt+0xe67c>
   1fdf8:	ubfx	r3, r0, #5, #3
   1fdfc:	and	r6, r0, #31
   1fe00:	ldr	r7, [r4, r3, lsl #2]
   1fe04:	orr	r7, r7, r2, lsl r6
   1fe08:	str	r7, [r4, r3, lsl #2]
   1fe0c:	b	1fddc <__assert_fail@plt+0xe67c>
   1fe10:	bl	11604 <__ctype_b_loc@plt>
   1fe14:	ldr	r1, [r0]
   1fe18:	cmp	r8, #0
   1fe1c:	bne	202dc <__assert_fail@plt+0xeb7c>
   1fe20:	mov	r0, #0
   1fe24:	mov	r2, #1
   1fe28:	b	1fe3c <__assert_fail@plt+0xe6dc>
   1fe2c:	add	r0, r0, #1
   1fe30:	add	r1, r1, #2
   1fe34:	cmp	r0, #256	; 0x100
   1fe38:	beq	1ff88 <__assert_fail@plt+0xe828>
   1fe3c:	ldrb	r3, [r1, #1]
   1fe40:	tst	r3, #2
   1fe44:	beq	1fe2c <__assert_fail@plt+0xe6cc>
   1fe48:	ubfx	r3, r0, #5, #3
   1fe4c:	and	r6, r0, #31
   1fe50:	ldr	r7, [r4, r3, lsl #2]
   1fe54:	orr	r7, r7, r2, lsl r6
   1fe58:	str	r7, [r4, r3, lsl #2]
   1fe5c:	b	1fe2c <__assert_fail@plt+0xe6cc>
   1fe60:	bl	11604 <__ctype_b_loc@plt>
   1fe64:	ldr	r1, [r0]
   1fe68:	cmp	r8, #0
   1fe6c:	bne	20360 <__assert_fail@plt+0xec00>
   1fe70:	mov	r0, #0
   1fe74:	mov	r2, #1
   1fe78:	b	1fe8c <__assert_fail@plt+0xe72c>
   1fe7c:	add	r0, r0, #1
   1fe80:	add	r1, r1, #2
   1fe84:	cmp	r0, #256	; 0x100
   1fe88:	beq	1ff88 <__assert_fail@plt+0xe828>
   1fe8c:	ldrb	r3, [r1, #1]
   1fe90:	tst	r3, #32
   1fe94:	beq	1fe7c <__assert_fail@plt+0xe71c>
   1fe98:	ubfx	r3, r0, #5, #3
   1fe9c:	and	r6, r0, #31
   1fea0:	ldr	r7, [r4, r3, lsl #2]
   1fea4:	orr	r7, r7, r2, lsl r6
   1fea8:	str	r7, [r4, r3, lsl #2]
   1feac:	b	1fe7c <__assert_fail@plt+0xe71c>
   1feb0:	add	r2, r2, #1
   1feb4:	add	r1, r1, #2
   1feb8:	mov	r0, #0
   1febc:	cmp	r2, #256	; 0x100
   1fec0:	beq	20474 <__assert_fail@plt+0xed14>
   1fec4:	ldrb	r0, [r1, #1]
   1fec8:	tst	r0, #16
   1fecc:	beq	1feb0 <__assert_fail@plt+0xe750>
   1fed0:	ubfx	r0, r2, #5, #3
   1fed4:	and	r6, r2, #31
   1fed8:	ldr	r7, [r4, r0, lsl #2]
   1fedc:	orr	r7, r7, r3, lsl r6
   1fee0:	str	r7, [r4, r0, lsl #2]
   1fee4:	b	1feb0 <__assert_fail@plt+0xe750>
   1fee8:	bl	11604 <__ctype_b_loc@plt>
   1feec:	ldr	r1, [r0]
   1fef0:	cmp	r8, #0
   1fef4:	bne	203e4 <__assert_fail@plt+0xec84>
   1fef8:	mov	r0, #0
   1fefc:	mov	r2, #1
   1ff00:	b	1ff14 <__assert_fail@plt+0xe7b4>
   1ff04:	add	r0, r0, #1
   1ff08:	add	r1, r1, #2
   1ff0c:	cmp	r0, #256	; 0x100
   1ff10:	beq	1ff88 <__assert_fail@plt+0xe828>
   1ff14:	ldrb	r3, [r1, #1]
   1ff18:	tst	r3, #4
   1ff1c:	beq	1ff04 <__assert_fail@plt+0xe7a4>
   1ff20:	ubfx	r3, r0, #5, #3
   1ff24:	and	r6, r0, #31
   1ff28:	ldr	r7, [r4, r3, lsl #2]
   1ff2c:	orr	r7, r7, r2, lsl r6
   1ff30:	str	r7, [r4, r3, lsl #2]
   1ff34:	b	1ff04 <__assert_fail@plt+0xe7a4>
   1ff38:	bl	11604 <__ctype_b_loc@plt>
   1ff3c:	ldr	r1, [r0]
   1ff40:	cmp	r8, #0
   1ff44:	bne	2042c <__assert_fail@plt+0xeccc>
   1ff48:	mov	r0, #0
   1ff4c:	mov	r2, #1
   1ff50:	b	1ff64 <__assert_fail@plt+0xe804>
   1ff54:	add	r0, r0, #1
   1ff58:	add	r1, r1, #2
   1ff5c:	cmp	r0, #256	; 0x100
   1ff60:	beq	1ff88 <__assert_fail@plt+0xe828>
   1ff64:	ldrb	r3, [r1, #1]
   1ff68:	tst	r3, #8
   1ff6c:	beq	1ff54 <__assert_fail@plt+0xe7f4>
   1ff70:	ubfx	r3, r0, #5, #3
   1ff74:	and	r6, r0, #31
   1ff78:	ldr	r7, [r4, r3, lsl #2]
   1ff7c:	orr	r7, r7, r2, lsl r6
   1ff80:	str	r7, [r4, r3, lsl #2]
   1ff84:	b	1ff54 <__assert_fail@plt+0xe7f4>
   1ff88:	mov	r0, #0
   1ff8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff90:	bl	11604 <__ctype_b_loc@plt>
   1ff94:	ldr	r1, [r0]
   1ff98:	mov	r2, #0
   1ff9c:	mov	r3, #1
   1ffa0:	cmp	r8, #0
   1ffa4:	beq	1ffc0 <__assert_fail@plt+0xe860>
   1ffa8:	b	20170 <__assert_fail@plt+0xea10>
   1ffac:	add	r2, r2, #1
   1ffb0:	add	r1, r1, #2
   1ffb4:	mov	r0, #0
   1ffb8:	cmp	r2, #256	; 0x100
   1ffbc:	beq	20474 <__assert_fail@plt+0xed14>
   1ffc0:	ldrb	r0, [r1, #1]
   1ffc4:	tst	r0, #64	; 0x40
   1ffc8:	beq	1ffac <__assert_fail@plt+0xe84c>
   1ffcc:	ubfx	r0, r2, #5, #3
   1ffd0:	and	r6, r2, #31
   1ffd4:	ldr	r7, [r4, r0, lsl #2]
   1ffd8:	orr	r7, r7, r3, lsl r6
   1ffdc:	str	r7, [r4, r0, lsl #2]
   1ffe0:	b	1ffac <__assert_fail@plt+0xe84c>
   1ffe4:	bl	11604 <__ctype_b_loc@plt>
   1ffe8:	ldr	r1, [r0]
   1ffec:	mov	r2, #0
   1fff0:	mov	r3, #1
   1fff4:	cmp	r8, #0
   1fff8:	beq	20014 <__assert_fail@plt+0xe8b4>
   1fffc:	b	201ac <__assert_fail@plt+0xea4c>
   20000:	add	r2, r2, #1
   20004:	add	r1, r1, #2
   20008:	mov	r0, #0
   2000c:	cmp	r2, #256	; 0x100
   20010:	beq	20474 <__assert_fail@plt+0xed14>
   20014:	ldrb	r0, [r1, #1]
   20018:	tst	r0, #1
   2001c:	beq	20000 <__assert_fail@plt+0xe8a0>
   20020:	ubfx	r0, r2, #5, #3
   20024:	and	r6, r2, #31
   20028:	ldr	r7, [r4, r0, lsl #2]
   2002c:	orr	r7, r7, r3, lsl r6
   20030:	str	r7, [r4, r0, lsl #2]
   20034:	b	20000 <__assert_fail@plt+0xe8a0>
   20038:	bl	11604 <__ctype_b_loc@plt>
   2003c:	ldr	r1, [r0]
   20040:	mov	r2, #0
   20044:	mov	r3, #1
   20048:	cmp	r8, #0
   2004c:	beq	20068 <__assert_fail@plt+0xe908>
   20050:	b	20230 <__assert_fail@plt+0xead0>
   20054:	add	r2, r2, #1
   20058:	add	r1, r1, #2
   2005c:	mov	r0, #0
   20060:	cmp	r2, #256	; 0x100
   20064:	beq	20474 <__assert_fail@plt+0xed14>
   20068:	ldrb	r0, [r1]
   2006c:	tst	r0, #1
   20070:	beq	20054 <__assert_fail@plt+0xe8f4>
   20074:	ubfx	r0, r2, #5, #3
   20078:	and	r6, r2, #31
   2007c:	ldr	r7, [r4, r0, lsl #2]
   20080:	orr	r7, r7, r3, lsl r6
   20084:	str	r7, [r4, r0, lsl #2]
   20088:	b	20054 <__assert_fail@plt+0xe8f4>
   2008c:	bl	11604 <__ctype_b_loc@plt>
   20090:	ldr	r1, [r0]
   20094:	mov	r2, #0
   20098:	mov	r3, #1
   2009c:	cmp	r8, #0
   200a0:	beq	200bc <__assert_fail@plt+0xe95c>
   200a4:	b	202b4 <__assert_fail@plt+0xeb54>
   200a8:	add	r2, r2, #1
   200ac:	add	r1, r1, #2
   200b0:	mov	r0, #0
   200b4:	cmp	r2, #256	; 0x100
   200b8:	beq	20474 <__assert_fail@plt+0xed14>
   200bc:	ldrsh	r0, [r1]
   200c0:	cmn	r0, #1
   200c4:	bgt	200a8 <__assert_fail@plt+0xe948>
   200c8:	ubfx	r0, r2, #5, #3
   200cc:	and	r6, r2, #31
   200d0:	ldr	r7, [r4, r0, lsl #2]
   200d4:	orr	r7, r7, r3, lsl r6
   200d8:	str	r7, [r4, r0, lsl #2]
   200dc:	b	200a8 <__assert_fail@plt+0xe948>
   200e0:	bl	11604 <__ctype_b_loc@plt>
   200e4:	ldr	r1, [r0]
   200e8:	mov	r2, #0
   200ec:	mov	r3, #1
   200f0:	cmp	r8, #0
   200f4:	beq	20110 <__assert_fail@plt+0xe9b0>
   200f8:	b	20338 <__assert_fail@plt+0xebd8>
   200fc:	add	r2, r2, #1
   20100:	add	r1, r1, #2
   20104:	mov	r0, #0
   20108:	cmp	r2, #256	; 0x100
   2010c:	beq	20474 <__assert_fail@plt+0xed14>
   20110:	ldrb	r0, [r1]
   20114:	tst	r0, #4
   20118:	beq	200fc <__assert_fail@plt+0xe99c>
   2011c:	ubfx	r0, r2, #5, #3
   20120:	and	r6, r2, #31
   20124:	ldr	r7, [r4, r0, lsl #2]
   20128:	orr	r7, r7, r3, lsl r6
   2012c:	str	r7, [r4, r0, lsl #2]
   20130:	b	200fc <__assert_fail@plt+0xe99c>
   20134:	mov	r1, #1
   20138:	orr	r9, r1, r0, lsl #1
   2013c:	ldr	r0, [r7, #12]
   20140:	lsl	r1, r9, #2
   20144:	bl	2b290 <__assert_fail@plt+0x19b30>
   20148:	cmp	r0, #0
   2014c:	beq	20478 <__assert_fail@plt+0xed18>
   20150:	str	r0, [r7, #12]
   20154:	str	r9, [r5]
   20158:	b	1fc10 <__assert_fail@plt+0xe4b0>
   2015c:	add	r2, r2, #1
   20160:	add	r1, r1, #2
   20164:	mov	r0, #0
   20168:	cmp	r2, #256	; 0x100
   2016c:	beq	20474 <__assert_fail@plt+0xed14>
   20170:	ldrb	r0, [r1, #1]
   20174:	tst	r0, #64	; 0x40
   20178:	beq	2015c <__assert_fail@plt+0xe9fc>
   2017c:	ldrb	r0, [r8, r2]
   20180:	ubfx	r7, r0, #5, #3
   20184:	and	r0, r0, #31
   20188:	ldr	r6, [r4, r7, lsl #2]
   2018c:	orr	r0, r6, r3, lsl r0
   20190:	str	r0, [r4, r7, lsl #2]
   20194:	b	2015c <__assert_fail@plt+0xe9fc>
   20198:	add	r2, r2, #1
   2019c:	add	r1, r1, #2
   201a0:	mov	r0, #0
   201a4:	cmp	r2, #256	; 0x100
   201a8:	beq	20474 <__assert_fail@plt+0xed14>
   201ac:	ldrb	r0, [r1, #1]
   201b0:	tst	r0, #1
   201b4:	beq	20198 <__assert_fail@plt+0xea38>
   201b8:	ldrb	r0, [r8, r2]
   201bc:	ubfx	r7, r0, #5, #3
   201c0:	and	r0, r0, #31
   201c4:	ldr	r6, [r4, r7, lsl #2]
   201c8:	orr	r0, r6, r3, lsl r0
   201cc:	str	r0, [r4, r7, lsl #2]
   201d0:	b	20198 <__assert_fail@plt+0xea38>
   201d4:	mov	r2, #0
   201d8:	mov	r3, #1
   201dc:	b	201f4 <__assert_fail@plt+0xea94>
   201e0:	add	r2, r2, #1
   201e4:	add	r1, r1, #2
   201e8:	mov	r0, #0
   201ec:	cmp	r2, #256	; 0x100
   201f0:	beq	20474 <__assert_fail@plt+0xed14>
   201f4:	ldrb	r0, [r1]
   201f8:	tst	r0, #8
   201fc:	beq	201e0 <__assert_fail@plt+0xea80>
   20200:	ldrb	r0, [r8, r2]
   20204:	ubfx	r7, r0, #5, #3
   20208:	and	r0, r0, #31
   2020c:	ldr	r6, [r4, r7, lsl #2]
   20210:	orr	r0, r6, r3, lsl r0
   20214:	str	r0, [r4, r7, lsl #2]
   20218:	b	201e0 <__assert_fail@plt+0xea80>
   2021c:	add	r2, r2, #1
   20220:	add	r1, r1, #2
   20224:	mov	r0, #0
   20228:	cmp	r2, #256	; 0x100
   2022c:	beq	20474 <__assert_fail@plt+0xed14>
   20230:	ldrb	r0, [r1]
   20234:	tst	r0, #1
   20238:	beq	2021c <__assert_fail@plt+0xeabc>
   2023c:	ldrb	r0, [r8, r2]
   20240:	ubfx	r7, r0, #5, #3
   20244:	and	r0, r0, #31
   20248:	ldr	r6, [r4, r7, lsl #2]
   2024c:	orr	r0, r6, r3, lsl r0
   20250:	str	r0, [r4, r7, lsl #2]
   20254:	b	2021c <__assert_fail@plt+0xeabc>
   20258:	mov	r2, #0
   2025c:	mov	r3, #1
   20260:	b	20278 <__assert_fail@plt+0xeb18>
   20264:	add	r2, r2, #1
   20268:	add	r1, r1, #2
   2026c:	mov	r0, #0
   20270:	cmp	r2, #256	; 0x100
   20274:	beq	20474 <__assert_fail@plt+0xed14>
   20278:	ldrb	r0, [r1]
   2027c:	tst	r0, #2
   20280:	beq	20264 <__assert_fail@plt+0xeb04>
   20284:	ldrb	r0, [r8, r2]
   20288:	ubfx	r7, r0, #5, #3
   2028c:	and	r0, r0, #31
   20290:	ldr	r6, [r4, r7, lsl #2]
   20294:	orr	r0, r6, r3, lsl r0
   20298:	str	r0, [r4, r7, lsl #2]
   2029c:	b	20264 <__assert_fail@plt+0xeb04>
   202a0:	add	r2, r2, #1
   202a4:	add	r1, r1, #2
   202a8:	mov	r0, #0
   202ac:	cmp	r2, #256	; 0x100
   202b0:	beq	20474 <__assert_fail@plt+0xed14>
   202b4:	ldrsh	r0, [r1]
   202b8:	cmn	r0, #1
   202bc:	bgt	202a0 <__assert_fail@plt+0xeb40>
   202c0:	ldrb	r0, [r8, r2]
   202c4:	ubfx	r7, r0, #5, #3
   202c8:	and	r0, r0, #31
   202cc:	ldr	r6, [r4, r7, lsl #2]
   202d0:	orr	r0, r6, r3, lsl r0
   202d4:	str	r0, [r4, r7, lsl #2]
   202d8:	b	202a0 <__assert_fail@plt+0xeb40>
   202dc:	mov	r2, #0
   202e0:	mov	r3, #1
   202e4:	b	202fc <__assert_fail@plt+0xeb9c>
   202e8:	add	r2, r2, #1
   202ec:	add	r1, r1, #2
   202f0:	mov	r0, #0
   202f4:	cmp	r2, #256	; 0x100
   202f8:	beq	20474 <__assert_fail@plt+0xed14>
   202fc:	ldrb	r0, [r1, #1]
   20300:	tst	r0, #2
   20304:	beq	202e8 <__assert_fail@plt+0xeb88>
   20308:	ldrb	r0, [r8, r2]
   2030c:	ubfx	r7, r0, #5, #3
   20310:	and	r0, r0, #31
   20314:	ldr	r6, [r4, r7, lsl #2]
   20318:	orr	r0, r6, r3, lsl r0
   2031c:	str	r0, [r4, r7, lsl #2]
   20320:	b	202e8 <__assert_fail@plt+0xeb88>
   20324:	add	r2, r2, #1
   20328:	add	r1, r1, #2
   2032c:	mov	r0, #0
   20330:	cmp	r2, #256	; 0x100
   20334:	beq	20474 <__assert_fail@plt+0xed14>
   20338:	ldrb	r0, [r1]
   2033c:	tst	r0, #4
   20340:	beq	20324 <__assert_fail@plt+0xebc4>
   20344:	ldrb	r0, [r8, r2]
   20348:	ubfx	r7, r0, #5, #3
   2034c:	and	r0, r0, #31
   20350:	ldr	r6, [r4, r7, lsl #2]
   20354:	orr	r0, r6, r3, lsl r0
   20358:	str	r0, [r4, r7, lsl #2]
   2035c:	b	20324 <__assert_fail@plt+0xebc4>
   20360:	mov	r2, #0
   20364:	mov	r3, #1
   20368:	b	20380 <__assert_fail@plt+0xec20>
   2036c:	add	r2, r2, #1
   20370:	add	r1, r1, #2
   20374:	mov	r0, #0
   20378:	cmp	r2, #256	; 0x100
   2037c:	beq	20474 <__assert_fail@plt+0xed14>
   20380:	ldrb	r0, [r1, #1]
   20384:	tst	r0, #32
   20388:	beq	2036c <__assert_fail@plt+0xec0c>
   2038c:	ldrb	r0, [r8, r2]
   20390:	ubfx	r7, r0, #5, #3
   20394:	and	r0, r0, #31
   20398:	ldr	r6, [r4, r7, lsl #2]
   2039c:	orr	r0, r6, r3, lsl r0
   203a0:	str	r0, [r4, r7, lsl #2]
   203a4:	b	2036c <__assert_fail@plt+0xec0c>
   203a8:	add	r2, r2, #1
   203ac:	add	r1, r1, #2
   203b0:	mov	r0, #0
   203b4:	cmp	r2, #256	; 0x100
   203b8:	beq	20474 <__assert_fail@plt+0xed14>
   203bc:	ldrb	r0, [r1, #1]
   203c0:	tst	r0, #16
   203c4:	beq	203a8 <__assert_fail@plt+0xec48>
   203c8:	ldrb	r0, [r8, r2]
   203cc:	ubfx	r7, r0, #5, #3
   203d0:	and	r0, r0, #31
   203d4:	ldr	r6, [r4, r7, lsl #2]
   203d8:	orr	r0, r6, r3, lsl r0
   203dc:	str	r0, [r4, r7, lsl #2]
   203e0:	b	203a8 <__assert_fail@plt+0xec48>
   203e4:	mov	r2, #0
   203e8:	mov	r3, #1
   203ec:	b	20404 <__assert_fail@plt+0xeca4>
   203f0:	add	r2, r2, #1
   203f4:	add	r1, r1, #2
   203f8:	mov	r0, #0
   203fc:	cmp	r2, #256	; 0x100
   20400:	beq	20474 <__assert_fail@plt+0xed14>
   20404:	ldrb	r0, [r1, #1]
   20408:	tst	r0, #4
   2040c:	beq	203f0 <__assert_fail@plt+0xec90>
   20410:	ldrb	r0, [r8, r2]
   20414:	ubfx	r7, r0, #5, #3
   20418:	and	r0, r0, #31
   2041c:	ldr	r6, [r4, r7, lsl #2]
   20420:	orr	r0, r6, r3, lsl r0
   20424:	str	r0, [r4, r7, lsl #2]
   20428:	b	203f0 <__assert_fail@plt+0xec90>
   2042c:	mov	r2, #0
   20430:	mov	r3, #1
   20434:	b	2044c <__assert_fail@plt+0xecec>
   20438:	add	r2, r2, #1
   2043c:	add	r1, r1, #2
   20440:	mov	r0, #0
   20444:	cmp	r2, #256	; 0x100
   20448:	beq	20474 <__assert_fail@plt+0xed14>
   2044c:	ldrb	r0, [r1, #1]
   20450:	tst	r0, #8
   20454:	beq	20438 <__assert_fail@plt+0xecd8>
   20458:	ldrb	r0, [r8, r2]
   2045c:	ubfx	r7, r0, #5, #3
   20460:	and	r0, r0, #31
   20464:	ldr	r6, [r4, r7, lsl #2]
   20468:	orr	r0, r6, r3, lsl r0
   2046c:	str	r0, [r4, r7, lsl #2]
   20470:	b	20438 <__assert_fail@plt+0xecd8>
   20474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20478:	mov	r0, #12
   2047c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20480:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20484:	add	fp, sp, #24
   20488:	ldr	r3, [r1, #24]
   2048c:	mvn	r7, #1
   20490:	ldr	r2, [r1, #28]
   20494:	mov	r4, #0
   20498:	uxtab	r3, r7, r3
   2049c:	cmp	r3, #14
   204a0:	bhi	205c4 <__assert_fail@plt+0xee64>
   204a4:	add	r7, pc, #0
   204a8:	ldr	pc, [r7, r3, lsl #2]
   204ac:	strdeq	r0, [r2], -r8
   204b0:	andeq	r0, r2, r4, asr #11
   204b4:	ldrdeq	r0, [r2], -ip
   204b8:	andeq	r0, r2, r4, asr #11
   204bc:	andeq	r0, r2, r4, asr #11
   204c0:	andeq	r0, r2, r4, asr #11
   204c4:	andeq	r0, r2, r8, ror #9
   204c8:	andeq	r0, r2, r8, ror #9
   204cc:	andeq	r0, r2, ip, lsr r5
   204d0:	andeq	r0, r2, ip, lsr r5
   204d4:	andeq	r0, r2, r8, ror #9
   204d8:	andeq	r0, r2, r4, asr #11
   204dc:	andeq	r0, r2, r4, asr #11
   204e0:	andeq	r0, r2, r4, asr #11
   204e4:	strdeq	r0, [r2], -r8
   204e8:	ldr	r1, [r1, #16]
   204ec:	ldr	r5, [r1, #28]
   204f0:	ldr	r6, [r0, #20]
   204f4:	add	r0, r2, r2, lsl #1
   204f8:	mov	r1, #1
   204fc:	str	r1, [r6, r0, lsl #2]!
   20500:	mov	r0, #4
   20504:	mov	r7, r6
   20508:	str	r1, [r7, #4]!
   2050c:	bl	2b260 <__assert_fail@plt+0x19b00>
   20510:	cmp	r0, #0
   20514:	str	r0, [r6, #8]
   20518:	strne	r5, [r0]
   2051c:	movne	r0, r4
   20520:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   20524:	mov	r0, #0
   20528:	str	r0, [r7]
   2052c:	str	r0, [r6]
   20530:	mov	r4, #12
   20534:	mov	r0, r4
   20538:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2053c:	ldrb	r3, [r0, #88]	; 0x58
   20540:	add	r6, r1, #16
   20544:	add	r5, r2, r2, lsl #1
   20548:	orr	r3, r3, #1
   2054c:	strb	r3, [r0, #88]	; 0x58
   20550:	mov	r3, r6
   20554:	ldr	r7, [r1, #4]
   20558:	ldr	r1, [r1, #8]
   2055c:	cmp	r1, #0
   20560:	addne	r3, r1, #12
   20564:	cmp	r7, #0
   20568:	ldr	r1, [r3]
   2056c:	addne	r6, r7, #12
   20570:	ldr	r8, [r1, #28]
   20574:	ldr	r1, [r6]
   20578:	ldr	r6, [r0, #20]
   2057c:	mov	r0, #2
   20580:	ldr	r9, [r1, #28]
   20584:	mov	r7, r6
   20588:	str	r0, [r7, r5, lsl #2]!
   2058c:	mov	r0, #8
   20590:	bl	2b260 <__assert_fail@plt+0x19b00>
   20594:	cmp	r0, #0
   20598:	str	r0, [r7, #8]
   2059c:	beq	20530 <__assert_fail@plt+0xedd0>
   205a0:	add	r1, r6, r5, lsl #2
   205a4:	cmp	r9, r8
   205a8:	add	r1, r1, #4
   205ac:	bne	20600 <__assert_fail@plt+0xeea0>
   205b0:	mov	r2, #1
   205b4:	str	r2, [r1]
   205b8:	str	r9, [r0]
   205bc:	mov	r0, r4
   205c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   205c4:	ldr	r1, [r1, #16]
   205c8:	ldr	r0, [r0, #12]
   205cc:	ldr	r1, [r1, #28]
   205d0:	str	r1, [r0, r2, lsl #2]
   205d4:	mov	r0, r4
   205d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   205dc:	ldr	r7, [r1, #16]
   205e0:	ldr	r3, [r0, #12]
   205e4:	ldr	r5, [r7, #28]
   205e8:	str	r5, [r3, r2, lsl #2]
   205ec:	ldrb	r1, [r1, #24]
   205f0:	cmp	r1, #4
   205f4:	beq	204f0 <__assert_fail@plt+0xed90>
   205f8:	mov	r0, r4
   205fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20600:	mov	r2, #2
   20604:	str	r2, [r1]
   20608:	stmcs	r0, {r8, r9}
   2060c:	strcc	r9, [r0]
   20610:	strcc	r8, [r0, #4]
   20614:	mov	r0, r4
   20618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2061c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20620:	add	fp, sp, #28
   20624:	sub	sp, sp, #4
   20628:	ldr	r6, [r2, #4]
   2062c:	mov	r8, r0
   20630:	ldr	r5, [r1]
   20634:	mov	r9, r2
   20638:	cmp	r6, #0
   2063c:	ldrbne	r0, [r1, #28]
   20640:	andsne	r0, r0, #16
   20644:	bne	207e8 <__assert_fail@plt+0xf088>
   20648:	ldr	r1, [r5, #64]	; 0x40
   2064c:	cmp	r1, #31
   20650:	beq	20810 <__assert_fail@plt+0xf0b0>
   20654:	ldr	r0, [r5, #56]	; 0x38
   20658:	add	r0, r0, r1, lsl #5
   2065c:	add	r2, r1, #1
   20660:	vmov.i32	q8, #0	; 0x00000000
   20664:	mov	r1, #0
   20668:	str	r2, [r5, #64]	; 0x40
   2066c:	mov	r2, #8
   20670:	add	sl, r0, #4
   20674:	str	r1, [r0, #20]
   20678:	str	r1, [r0, #24]
   2067c:	str	r2, [r0, #28]
   20680:	mov	r0, #28
   20684:	mov	r1, sl
   20688:	vst1.32	{d16-d17}, [r1], r0
   2068c:	mvn	r0, #0
   20690:	str	r0, [r1]
   20694:	ldr	r1, [r5, #64]	; 0x40
   20698:	cmp	r1, #31
   2069c:	beq	20838 <__assert_fail@plt+0xf0d8>
   206a0:	ldr	r0, [r5, #56]	; 0x38
   206a4:	add	r0, r0, r1, lsl #5
   206a8:	add	r2, r1, #1
   206ac:	vmov.i32	q8, #0	; 0x00000000
   206b0:	mov	r1, #0
   206b4:	str	r2, [r5, #64]	; 0x40
   206b8:	mov	r2, #9
   206bc:	add	r7, r0, #4
   206c0:	str	r1, [r0, #20]
   206c4:	str	r1, [r0, #24]
   206c8:	str	r2, [r0, #28]
   206cc:	mov	r0, #28
   206d0:	mov	r1, r7
   206d4:	vst1.32	{d16-d17}, [r1], r0
   206d8:	mvn	r0, #0
   206dc:	str	r0, [r1]
   206e0:	cmp	r6, #0
   206e4:	mov	r4, r7
   206e8:	beq	20738 <__assert_fail@plt+0xefd8>
   206ec:	ldr	r1, [r5, #64]	; 0x40
   206f0:	cmp	r1, #31
   206f4:	beq	20888 <__assert_fail@plt+0xf128>
   206f8:	ldr	r0, [r5, #56]	; 0x38
   206fc:	add	r4, r0, r1, lsl #5
   20700:	add	r2, r1, #1
   20704:	mov	r0, #0
   20708:	cmp	r7, #0
   2070c:	mov	r1, #16
   20710:	str	r2, [r5, #64]	; 0x40
   20714:	mvn	r2, #0
   20718:	str	r0, [r4, #4]!
   2071c:	add	r3, r4, #20
   20720:	stmib	r4, {r6, r7}
   20724:	str	r0, [r4, #12]
   20728:	str	r0, [r4, #16]
   2072c:	stm	r3, {r0, r1, r2}
   20730:	str	r4, [r6]
   20734:	strne	r4, [r7]
   20738:	ldr	r1, [r5, #64]	; 0x40
   2073c:	cmp	r1, #31
   20740:	beq	20860 <__assert_fail@plt+0xf100>
   20744:	ldr	r0, [r5, #56]	; 0x38
   20748:	add	r6, r0, r1, lsl #5
   2074c:	add	r2, r1, #1
   20750:	mov	r0, #0
   20754:	cmp	sl, #0
   20758:	mov	r1, #16
   2075c:	str	r2, [r5, #64]	; 0x40
   20760:	mvn	r2, #0
   20764:	str	r0, [r6, #4]!
   20768:	add	r3, r6, #20
   2076c:	str	sl, [r6, #4]
   20770:	str	r4, [r6, #8]
   20774:	str	r0, [r6, #12]
   20778:	str	r0, [r6, #16]
   2077c:	stm	r3, {r0, r1, r2}
   20780:	strne	r6, [sl]
   20784:	cmp	r4, #0
   20788:	strne	r6, [r4]
   2078c:	cmp	r7, #0
   20790:	beq	207a0 <__assert_fail@plt+0xf040>
   20794:	cmp	sl, #0
   20798:	cmpne	r4, #0
   2079c:	bne	207b0 <__assert_fail@plt+0xf050>
   207a0:	mov	r0, #12
   207a4:	mov	r6, #0
   207a8:	str	r0, [r8]
   207ac:	b	20804 <__assert_fail@plt+0xf0a4>
   207b0:	cmp	r6, #0
   207b4:	beq	207a0 <__assert_fail@plt+0xf040>
   207b8:	ldr	r0, [r9, #20]
   207bc:	str	r0, [r7, #20]
   207c0:	str	r0, [sl, #20]
   207c4:	ldr	r1, [r9, #24]
   207c8:	ldr	r0, [r7, #24]
   207cc:	lsr	r1, r1, #19
   207d0:	bfi	r0, r1, #19, #1
   207d4:	str	r0, [r7, #24]
   207d8:	ldr	r0, [sl, #24]
   207dc:	bfi	r0, r1, #19, #1
   207e0:	str	r0, [sl, #24]
   207e4:	b	20804 <__assert_fail@plt+0xf0a4>
   207e8:	ldr	r0, [r9, #20]
   207ec:	cmp	r0, #31
   207f0:	bgt	20804 <__assert_fail@plt+0xf0a4>
   207f4:	ldr	r1, [r5, #80]	; 0x50
   207f8:	mov	r2, #1
   207fc:	tst	r1, r2, lsl r0
   20800:	bne	20648 <__assert_fail@plt+0xeee8>
   20804:	mov	r0, r6
   20808:	sub	sp, fp, #28
   2080c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20810:	mov	r0, #996	; 0x3e4
   20814:	bl	2b260 <__assert_fail@plt+0x19b00>
   20818:	cmp	r0, #0
   2081c:	beq	208b0 <__assert_fail@plt+0xf150>
   20820:	ldr	r1, [r5, #56]	; 0x38
   20824:	str	r1, [r0]
   20828:	mov	r1, #0
   2082c:	str	r1, [r5, #64]	; 0x40
   20830:	str	r0, [r5, #56]	; 0x38
   20834:	b	20658 <__assert_fail@plt+0xeef8>
   20838:	mov	r0, #996	; 0x3e4
   2083c:	bl	2b260 <__assert_fail@plt+0x19b00>
   20840:	cmp	r0, #0
   20844:	beq	208b8 <__assert_fail@plt+0xf158>
   20848:	ldr	r1, [r5, #56]	; 0x38
   2084c:	str	r1, [r0]
   20850:	mov	r1, #0
   20854:	str	r1, [r5, #64]	; 0x40
   20858:	str	r0, [r5, #56]	; 0x38
   2085c:	b	206a4 <__assert_fail@plt+0xef44>
   20860:	mov	r0, #996	; 0x3e4
   20864:	bl	2b260 <__assert_fail@plt+0x19b00>
   20868:	cmp	r0, #0
   2086c:	beq	208c0 <__assert_fail@plt+0xf160>
   20870:	ldr	r1, [r5, #56]	; 0x38
   20874:	str	r1, [r0]
   20878:	mov	r1, #0
   2087c:	str	r1, [r5, #64]	; 0x40
   20880:	str	r0, [r5, #56]	; 0x38
   20884:	b	20748 <__assert_fail@plt+0xefe8>
   20888:	mov	r0, #996	; 0x3e4
   2088c:	bl	2b260 <__assert_fail@plt+0x19b00>
   20890:	cmp	r0, #0
   20894:	beq	208d0 <__assert_fail@plt+0xf170>
   20898:	ldr	r1, [r5, #56]	; 0x38
   2089c:	str	r1, [r0]
   208a0:	mov	r1, #0
   208a4:	str	r1, [r5, #64]	; 0x40
   208a8:	str	r0, [r5, #56]	; 0x38
   208ac:	b	206fc <__assert_fail@plt+0xef9c>
   208b0:	mov	sl, #0
   208b4:	b	20694 <__assert_fail@plt+0xef34>
   208b8:	mov	r7, #0
   208bc:	b	206e0 <__assert_fail@plt+0xef80>
   208c0:	mov	r6, #0
   208c4:	cmp	r7, #0
   208c8:	bne	20794 <__assert_fail@plt+0xf034>
   208cc:	b	207a0 <__assert_fail@plt+0xf040>
   208d0:	mov	r4, #0
   208d4:	b	20738 <__assert_fail@plt+0xefd8>
   208d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208dc:	add	fp, sp, #28
   208e0:	sub	sp, sp, #12
   208e4:	mov	r4, r0
   208e8:	ldr	r7, [r0, #4]
   208ec:	ldr	r0, [r0, #8]
   208f0:	mov	r5, r2
   208f4:	mov	r9, r1
   208f8:	cmp	r0, r7
   208fc:	bcs	209c8 <__assert_fail@plt+0xf268>
   20900:	ldr	r1, [r4]
   20904:	str	r9, [r1, r0, lsl #3]!
   20908:	str	r5, [r1, #4]
   2090c:	ldr	r0, [r4]
   20910:	ldr	r1, [r4, #8]
   20914:	add	r0, r0, r1, lsl #3
   20918:	ldr	r1, [r0, #4]
   2091c:	bfc	r1, #8, #10
   20920:	str	r1, [r0, #4]
   20924:	uxtb	r1, r5
   20928:	cmp	r1, #5
   2092c:	bne	20940 <__assert_fail@plt+0xf1e0>
   20930:	ldr	r2, [r4, #92]	; 0x5c
   20934:	mov	r0, #1048576	; 0x100000
   20938:	cmp	r2, #1
   2093c:	bgt	20950 <__assert_fail@plt+0xf1f0>
   20940:	sub	r0, r1, #6
   20944:	clz	r0, r0
   20948:	lsr	r0, r0, #5
   2094c:	lsl	r0, r0, #20
   20950:	ldr	r1, [r4]
   20954:	ldr	r2, [r4, #8]
   20958:	add	r1, r1, r2, lsl #3
   2095c:	ldr	r2, [r1, #4]
   20960:	bic	r2, r2, #1048576	; 0x100000
   20964:	orr	r0, r2, r0
   20968:	mvn	r2, #0
   2096c:	str	r0, [r1, #4]
   20970:	ldr	r0, [r4, #8]
   20974:	ldr	r1, [r4, #12]
   20978:	str	r2, [r1, r0, lsl #2]
   2097c:	mov	r2, #0
   20980:	ldr	r0, [r4, #8]
   20984:	ldr	r1, [r4, #20]
   20988:	add	r0, r0, r0, lsl #1
   2098c:	str	r2, [r1, r0, lsl #2]!
   20990:	str	r2, [r1, #4]
   20994:	str	r2, [r1, #8]
   20998:	ldr	r0, [r4, #8]
   2099c:	ldr	r1, [r4, #24]
   209a0:	add	r0, r0, r0, lsl #1
   209a4:	str	r2, [r1, r0, lsl #2]!
   209a8:	str	r2, [r1, #4]
   209ac:	str	r2, [r1, #8]
   209b0:	ldr	r6, [r4, #8]
   209b4:	add	r0, r6, #1
   209b8:	str	r0, [r4, #8]
   209bc:	mov	r0, r6
   209c0:	sub	sp, fp, #28
   209c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209c8:	movw	r0, #21845	; 0x5555
   209cc:	lsl	r1, r7, #1
   209d0:	mvn	r6, #0
   209d4:	movt	r0, #5461	; 0x1555
   209d8:	cmp	r1, r0
   209dc:	bhi	209bc <__assert_fail@plt+0xf25c>
   209e0:	ldr	r0, [r4]
   209e4:	str	r1, [sp, #8]
   209e8:	lsl	r1, r7, #4
   209ec:	bl	2b290 <__assert_fail@plt+0x19b30>
   209f0:	cmp	r0, #0
   209f4:	beq	209bc <__assert_fail@plt+0xf25c>
   209f8:	str	r0, [r4]
   209fc:	lsl	r8, r7, #3
   20a00:	ldr	r0, [r4, #12]
   20a04:	mov	r1, r8
   20a08:	bl	2b290 <__assert_fail@plt+0x19b30>
   20a0c:	str	r0, [sp, #4]
   20a10:	ldr	r0, [r4, #16]
   20a14:	mov	r1, r8
   20a18:	bl	2b290 <__assert_fail@plt+0x19b30>
   20a1c:	mov	r2, r0
   20a20:	add	r1, r7, r7, lsl #1
   20a24:	ldr	r0, [r4, #20]
   20a28:	mov	r7, r2
   20a2c:	lsl	r8, r1, #3
   20a30:	mov	r1, r8
   20a34:	bl	2b290 <__assert_fail@plt+0x19b30>
   20a38:	mov	sl, r0
   20a3c:	ldr	r0, [r4, #24]
   20a40:	mov	r1, r8
   20a44:	bl	2b290 <__assert_fail@plt+0x19b30>
   20a48:	mov	r8, r0
   20a4c:	ldr	r0, [sp, #4]
   20a50:	cmp	r0, #0
   20a54:	beq	20a64 <__assert_fail@plt+0xf304>
   20a58:	cmp	r7, #0
   20a5c:	cmpne	sl, #0
   20a60:	bne	20a84 <__assert_fail@plt+0xf324>
   20a64:	bl	141b8 <__assert_fail@plt+0x2a58>
   20a68:	mov	r0, r7
   20a6c:	bl	141b8 <__assert_fail@plt+0x2a58>
   20a70:	mov	r0, sl
   20a74:	bl	141b8 <__assert_fail@plt+0x2a58>
   20a78:	mov	r0, r8
   20a7c:	bl	141b8 <__assert_fail@plt+0x2a58>
   20a80:	b	209bc <__assert_fail@plt+0xf25c>
   20a84:	cmp	r8, #0
   20a88:	beq	20a64 <__assert_fail@plt+0xf304>
   20a8c:	add	r1, r4, #12
   20a90:	stm	r1, {r0, r7, sl}
   20a94:	str	r8, [r4, #24]
   20a98:	ldr	r0, [sp, #8]
   20a9c:	str	r0, [r4, #4]
   20aa0:	ldr	r0, [r4, #8]
   20aa4:	b	20900 <__assert_fail@plt+0xf1a0>
   20aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20aac:	add	fp, sp, #28
   20ab0:	sub	sp, sp, #44	; 0x2c
   20ab4:	mov	r8, r0
   20ab8:	ldr	r0, [r1, #20]
   20abc:	add	r4, r2, r2, lsl #1
   20ac0:	mov	r5, r1
   20ac4:	mov	r1, #0
   20ac8:	mov	r9, r3
   20acc:	mov	r6, r2
   20ad0:	add	r0, r0, r4, lsl #2
   20ad4:	ldr	r0, [r0, #4]
   20ad8:	str	r1, [sp, #36]	; 0x24
   20adc:	add	r0, r0, #1
   20ae0:	str	r0, [sp, #32]
   20ae4:	lsl	r0, r0, #2
   20ae8:	bl	2b260 <__assert_fail@plt+0x19b00>
   20aec:	cmp	r0, #0
   20af0:	str	r0, [sp, #40]	; 0x28
   20af4:	beq	20cc4 <__assert_fail@plt+0xf564>
   20af8:	mov	r1, #1
   20afc:	str	r6, [r0]
   20b00:	str	r1, [sp, #36]	; 0x24
   20b04:	mvn	r1, #0
   20b08:	ldr	r0, [r5, #24]
   20b0c:	add	r0, r0, r4, lsl #2
   20b10:	str	r1, [r0, #4]
   20b14:	ldr	r2, [r5]
   20b18:	add	r0, r2, r6, lsl #3
   20b1c:	ldr	r0, [r0, #4]
   20b20:	ubfx	r1, r0, #8, #10
   20b24:	cmp	r1, #0
   20b28:	beq	20b84 <__assert_fail@plt+0xf424>
   20b2c:	ldr	r3, [r5, #20]
   20b30:	add	r3, r3, r4, lsl #2
   20b34:	ldr	r7, [r3, #4]
   20b38:	cmp	r7, #0
   20b3c:	beq	20b84 <__assert_fail@plt+0xf424>
   20b40:	ldr	r3, [r3, #8]
   20b44:	ldr	r3, [r3]
   20b48:	add	r2, r2, r3, lsl #3
   20b4c:	ldrb	r2, [r2, #6]
   20b50:	tst	r2, #4
   20b54:	bne	20b84 <__assert_fail@plt+0xf424>
   20b58:	str	r1, [sp]
   20b5c:	mov	r0, r5
   20b60:	mov	r1, r6
   20b64:	mov	r2, r6
   20b68:	mov	r3, r6
   20b6c:	bl	20cd0 <__assert_fail@plt+0xf570>
   20b70:	cmp	r0, #0
   20b74:	bne	20cbc <__assert_fail@plt+0xf55c>
   20b78:	ldr	r0, [r5]
   20b7c:	add	r0, r0, r6, lsl #3
   20b80:	ldr	r0, [r0, #4]
   20b84:	tst	r0, #8
   20b88:	beq	20c90 <__assert_fail@plt+0xf530>
   20b8c:	ldr	r0, [r5, #20]
   20b90:	add	r1, r0, r4, lsl #2
   20b94:	ldr	r1, [r1, #4]
   20b98:	cmp	r1, #1
   20b9c:	blt	20c90 <__assert_fail@plt+0xf530>
   20ba0:	str	r8, [sp, #12]
   20ba4:	mov	r8, #0
   20ba8:	add	r7, sp, #16
   20bac:	add	sl, sp, #32
   20bb0:	mov	r6, #0
   20bb4:	str	r9, [sp, #8]
   20bb8:	b	20bd8 <__assert_fail@plt+0xf478>
   20bbc:	mov	r8, #1
   20bc0:	ldr	r0, [r5, #20]
   20bc4:	add	r6, r6, #1
   20bc8:	add	r1, r0, r4, lsl #2
   20bcc:	ldr	r1, [r1, #4]
   20bd0:	cmp	r6, r1
   20bd4:	bge	20c64 <__assert_fail@plt+0xf504>
   20bd8:	add	r0, r0, r4, lsl #2
   20bdc:	ldr	r0, [r0, #8]
   20be0:	ldr	r2, [r0, r6, lsl #2]
   20be4:	ldr	r0, [r5, #24]
   20be8:	add	r9, r2, r2, lsl #1
   20bec:	add	r0, r0, r9, lsl #2
   20bf0:	ldr	r1, [r0, #4]
   20bf4:	cmn	r1, #1
   20bf8:	beq	20bbc <__assert_fail@plt+0xf45c>
   20bfc:	cmp	r1, #0
   20c00:	bne	20c20 <__assert_fail@plt+0xf4c0>
   20c04:	mov	r0, r7
   20c08:	mov	r1, r5
   20c0c:	mov	r3, #0
   20c10:	bl	20aa8 <__assert_fail@plt+0xf348>
   20c14:	cmp	r0, #0
   20c18:	beq	20c30 <__assert_fail@plt+0xf4d0>
   20c1c:	b	20cbc <__assert_fail@plt+0xf55c>
   20c20:	vldr	d16, [r0]
   20c24:	ldr	r0, [r0, #8]
   20c28:	str	r0, [sp, #24]
   20c2c:	vstr	d16, [sp, #16]
   20c30:	mov	r0, sl
   20c34:	mov	r1, r7
   20c38:	bl	21158 <__assert_fail@plt+0xf9f8>
   20c3c:	cmp	r0, #0
   20c40:	bne	20cbc <__assert_fail@plt+0xf55c>
   20c44:	ldr	r0, [r5, #24]
   20c48:	add	r0, r0, r9, lsl #2
   20c4c:	ldr	r0, [r0, #4]
   20c50:	cmp	r0, #0
   20c54:	bne	20bc0 <__assert_fail@plt+0xf460>
   20c58:	ldr	r0, [sp, #24]
   20c5c:	bl	141b8 <__assert_fail@plt+0x2a58>
   20c60:	b	20bbc <__assert_fail@plt+0xf45c>
   20c64:	tst	r8, #1
   20c68:	ldr	r8, [sp, #12]
   20c6c:	ldr	r0, [sp, #8]
   20c70:	beq	20c90 <__assert_fail@plt+0xf530>
   20c74:	cmp	r0, #0
   20c78:	bne	20c90 <__assert_fail@plt+0xf530>
   20c7c:	ldr	r0, [r5, #24]
   20c80:	mov	r1, #0
   20c84:	add	r0, r0, r4, lsl #2
   20c88:	str	r1, [r0, #4]
   20c8c:	b	20ca8 <__assert_fail@plt+0xf548>
   20c90:	ldr	r0, [r5, #24]
   20c94:	vldr	d16, [sp, #32]
   20c98:	ldr	r1, [sp, #40]	; 0x28
   20c9c:	add	r0, r0, r4, lsl #2
   20ca0:	str	r1, [r0, #8]
   20ca4:	vstr	d16, [r0]
   20ca8:	ldr	r0, [sp, #40]	; 0x28
   20cac:	vldr	d16, [sp, #32]
   20cb0:	str	r0, [r8, #8]
   20cb4:	mov	r0, #0
   20cb8:	vstr	d16, [r8]
   20cbc:	sub	sp, fp, #28
   20cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cc4:	mov	r0, #12
   20cc8:	sub	sp, fp, #28
   20ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cd4:	add	fp, sp, #28
   20cd8:	sub	sp, sp, #20
   20cdc:	mov	r9, r0
   20ce0:	ldr	r0, [fp, #8]
   20ce4:	mov	r8, r2
   20ce8:	mov	r5, r1
   20cec:	str	r3, [sp, #8]
   20cf0:	str	r0, [sp, #12]
   20cf4:	ldr	r1, [sp, #12]
   20cf8:	movw	r0, #65280	; 0xff00
   20cfc:	movt	r0, #3
   20d00:	and	r0, r0, r1, lsl #8
   20d04:	str	r0, [sp, #16]
   20d08:	ldr	r2, [r9]
   20d0c:	add	r3, r2, r5, lsl #3
   20d10:	ldrb	r0, [r3, #4]!
   20d14:	cmp	r0, #4
   20d18:	bne	20df0 <__assert_fail@plt+0xf690>
   20d1c:	ldr	r0, [r9, #12]
   20d20:	ldr	r1, [r9, #20]
   20d24:	add	r7, r8, r8, lsl #1
   20d28:	ldr	r6, [r0, r5, lsl #2]
   20d2c:	add	r0, r1, r7, lsl #2
   20d30:	mov	r1, #0
   20d34:	str	r1, [r0, #4]
   20d38:	mov	r0, r9
   20d3c:	ldr	r1, [r2, r6, lsl #3]!
   20d40:	ldr	r2, [r2, #4]
   20d44:	bl	208d8 <__assert_fail@plt+0xf178>
   20d48:	cmn	r0, #1
   20d4c:	beq	21150 <__assert_fail@plt+0xf9f0>
   20d50:	mov	r4, r0
   20d54:	ldr	r0, [r9]
   20d58:	movw	r2, #255	; 0xff
   20d5c:	movt	r2, #65532	; 0xfffc
   20d60:	add	r0, r0, r4, lsl #3
   20d64:	ldr	r1, [r0, #4]
   20d68:	and	r1, r1, r2
   20d6c:	ldr	r2, [sp, #16]
   20d70:	orr	r1, r1, r2
   20d74:	movw	r2, #65280	; 0xff00
   20d78:	str	r1, [r0, #4]
   20d7c:	movt	r2, #3
   20d80:	ldr	r0, [r9]
   20d84:	add	r1, r0, r6, lsl #3
   20d88:	add	r0, r0, r4, lsl #3
   20d8c:	ldr	r1, [r1, #4]
   20d90:	and	r1, r1, r2
   20d94:	ldr	r2, [r0, #4]
   20d98:	orr	r1, r1, r2
   20d9c:	str	r1, [r0, #4]
   20da0:	ldr	r0, [r9]
   20da4:	add	r0, r0, r4, lsl #3
   20da8:	ldr	r1, [r0, #4]
   20dac:	orr	r1, r1, #262144	; 0x40000
   20db0:	str	r1, [r0, #4]
   20db4:	ldr	r0, [r9, #16]
   20db8:	str	r6, [r0, r4, lsl #2]
   20dbc:	ldr	r0, [r9, #12]
   20dc0:	ldr	r1, [r0, r5, lsl #2]
   20dc4:	str	r1, [r0, r8, lsl #2]
   20dc8:	mov	r1, r4
   20dcc:	ldr	r0, [r9, #20]
   20dd0:	add	r0, r0, r7, lsl #2
   20dd4:	bl	212e4 <__assert_fail@plt+0xfb84>
   20dd8:	cmp	r0, #0
   20ddc:	mov	r5, r6
   20de0:	mov	r8, r4
   20de4:	mov	r7, #12
   20de8:	bne	20d08 <__assert_fail@plt+0xf5a8>
   20dec:	b	21120 <__assert_fail@plt+0xf9c0>
   20df0:	ldr	r0, [r9, #20]
   20df4:	add	ip, r5, r5, lsl #1
   20df8:	add	r7, r0, ip, lsl #2
   20dfc:	ldr	r1, [r7, #4]
   20e00:	cmp	r1, #0
   20e04:	beq	21104 <__assert_fail@plt+0xf9a4>
   20e08:	ldr	r7, [r7, #8]
   20e0c:	add	r4, r8, r8, lsl #1
   20e10:	cmp	r1, #1
   20e14:	add	r0, r0, r4, lsl #2
   20e18:	ldr	sl, [r7]
   20e1c:	mov	r7, #0
   20e20:	str	r7, [r0, #4]
   20e24:	beq	2102c <__assert_fail@plt+0xf8cc>
   20e28:	ldr	r1, [r9, #8]
   20e2c:	mov	r8, r4
   20e30:	ldr	r4, [sp, #12]
   20e34:	sub	r3, r1, #1
   20e38:	cmp	r3, #1
   20e3c:	blt	20e8c <__assert_fail@plt+0xf72c>
   20e40:	add	r3, r2, r3, lsl #3
   20e44:	ldr	r7, [r3, #4]
   20e48:	ands	r3, r7, #262144	; 0x40000
   20e4c:	beq	20e8c <__assert_fail@plt+0xf72c>
   20e50:	ldr	r6, [r9, #16]
   20e54:	sub	r3, r2, #12
   20e58:	sub	r6, r6, #4
   20e5c:	ldr	r5, [r6, r1, lsl #2]
   20e60:	cmp	r5, sl
   20e64:	ubfxeq	r7, r7, #8, #10
   20e68:	cmpeq	r7, r4
   20e6c:	beq	21010 <__assert_fail@plt+0xf8b0>
   20e70:	sub	r7, r1, #2
   20e74:	cmp	r7, #1
   20e78:	blt	20e8c <__assert_fail@plt+0xf72c>
   20e7c:	ldr	r7, [r3, r1, lsl #3]
   20e80:	sub	r1, r1, #1
   20e84:	ands	r5, r7, #262144	; 0x40000
   20e88:	bne	20e5c <__assert_fail@plt+0xf6fc>
   20e8c:	ldr	r1, [r2, sl, lsl #3]!
   20e90:	mov	r0, r9
   20e94:	mov	r5, ip
   20e98:	ldr	r2, [r2, #4]
   20e9c:	bl	208d8 <__assert_fail@plt+0xf178>
   20ea0:	mov	r7, #12
   20ea4:	cmn	r0, #1
   20ea8:	beq	21120 <__assert_fail@plt+0xf9c0>
   20eac:	mov	r6, r0
   20eb0:	ldr	r0, [r9]
   20eb4:	movw	r2, #255	; 0xff
   20eb8:	mov	r4, r8
   20ebc:	movt	r2, #65532	; 0xfffc
   20ec0:	add	r0, r0, r6, lsl #3
   20ec4:	ldr	r1, [r0, #4]
   20ec8:	and	r1, r1, r2
   20ecc:	ldr	r2, [sp, #16]
   20ed0:	orr	r1, r1, r2
   20ed4:	movw	r2, #65280	; 0xff00
   20ed8:	str	r1, [r0, #4]
   20edc:	movt	r2, #3
   20ee0:	ldr	r0, [r9]
   20ee4:	add	r1, r0, sl, lsl #3
   20ee8:	add	r0, r0, r6, lsl #3
   20eec:	ldr	r1, [r1, #4]
   20ef0:	and	r1, r1, r2
   20ef4:	ldr	r2, [r0, #4]
   20ef8:	orr	r1, r1, r2
   20efc:	str	r1, [r0, #4]
   20f00:	ldr	r0, [r9]
   20f04:	add	r0, r0, r6, lsl #3
   20f08:	ldr	r1, [r0, #4]
   20f0c:	orr	r1, r1, #262144	; 0x40000
   20f10:	str	r1, [r0, #4]
   20f14:	mov	r1, r6
   20f18:	ldr	r0, [r9, #16]
   20f1c:	str	sl, [r0, r6, lsl #2]
   20f20:	ldr	r0, [r9, #20]
   20f24:	add	r0, r0, r8, lsl #2
   20f28:	bl	212e4 <__assert_fail@plt+0xfb84>
   20f2c:	cmp	r0, #0
   20f30:	beq	21120 <__assert_fail@plt+0xf9c0>
   20f34:	ldr	r0, [sp, #12]
   20f38:	ldr	r3, [sp, #8]
   20f3c:	mov	r1, sl
   20f40:	mov	r2, r6
   20f44:	str	r0, [sp]
   20f48:	mov	r0, r9
   20f4c:	bl	20cd0 <__assert_fail@plt+0xf570>
   20f50:	cmp	r0, #0
   20f54:	bne	2111c <__assert_fail@plt+0xf9bc>
   20f58:	ldr	r1, [r9, #20]
   20f5c:	ldr	r0, [r9]
   20f60:	add	r1, r1, r5, lsl #2
   20f64:	ldr	r1, [r1, #8]
   20f68:	ldr	r5, [r1, #4]
   20f6c:	ldr	r1, [r0, r5, lsl #3]!
   20f70:	ldr	r2, [r0, #4]
   20f74:	mov	r0, r9
   20f78:	bl	208d8 <__assert_fail@plt+0xf178>
   20f7c:	mov	r7, #12
   20f80:	cmn	r0, #1
   20f84:	beq	21120 <__assert_fail@plt+0xf9c0>
   20f88:	mov	r8, r0
   20f8c:	ldr	r0, [r9]
   20f90:	movw	r2, #255	; 0xff
   20f94:	movt	r2, #65532	; 0xfffc
   20f98:	add	r0, r0, r8, lsl #3
   20f9c:	ldr	r1, [r0, #4]
   20fa0:	and	r1, r1, r2
   20fa4:	ldr	r2, [sp, #16]
   20fa8:	orr	r1, r1, r2
   20fac:	movw	r2, #65280	; 0xff00
   20fb0:	str	r1, [r0, #4]
   20fb4:	movt	r2, #3
   20fb8:	ldr	r0, [r9]
   20fbc:	add	r1, r0, r5, lsl #3
   20fc0:	add	r0, r0, r8, lsl #3
   20fc4:	ldr	r1, [r1, #4]
   20fc8:	and	r1, r1, r2
   20fcc:	ldr	r2, [r0, #4]
   20fd0:	orr	r1, r1, r2
   20fd4:	str	r1, [r0, #4]
   20fd8:	ldr	r0, [r9]
   20fdc:	add	r0, r0, r8, lsl #3
   20fe0:	ldr	r1, [r0, #4]
   20fe4:	orr	r1, r1, #262144	; 0x40000
   20fe8:	str	r1, [r0, #4]
   20fec:	mov	r1, r8
   20ff0:	ldr	r0, [r9, #16]
   20ff4:	str	r5, [r0, r8, lsl #2]
   20ff8:	ldr	r0, [r9, #20]
   20ffc:	add	r0, r0, r4, lsl #2
   21000:	bl	212e4 <__assert_fail@plt+0xfb84>
   21004:	cmp	r0, #0
   21008:	bne	20d08 <__assert_fail@plt+0xf5a8>
   2100c:	b	21120 <__assert_fail@plt+0xf9c0>
   21010:	sub	r1, r1, #1
   21014:	mov	r5, ip
   21018:	bl	212e4 <__assert_fail@plt+0xfb84>
   2101c:	cmp	r0, #0
   21020:	mov	r4, r8
   21024:	bne	20f58 <__assert_fail@plt+0xf7f8>
   21028:	b	21150 <__assert_fail@plt+0xf9f0>
   2102c:	ldr	r1, [sp, #8]
   21030:	cmp	r5, r1
   21034:	bne	21040 <__assert_fail@plt+0xf8e0>
   21038:	cmp	r8, r5
   2103c:	bne	2112c <__assert_fail@plt+0xf9cc>
   21040:	ldr	r1, [r2, sl, lsl #3]!
   21044:	ldr	r6, [r3]
   21048:	mov	r0, r9
   2104c:	ldr	r2, [r2, #4]
   21050:	bl	208d8 <__assert_fail@plt+0xf178>
   21054:	mov	r8, r0
   21058:	ubfx	r0, r6, #8, #10
   2105c:	mov	r7, #12
   21060:	cmn	r8, #1
   21064:	beq	21120 <__assert_fail@plt+0xf9c0>
   21068:	ldr	r1, [sp, #12]
   2106c:	movw	r7, #255	; 0xff
   21070:	movt	r7, #65532	; 0xfffc
   21074:	orr	r1, r0, r1
   21078:	movw	r0, #65280	; 0xff00
   2107c:	movt	r0, #3
   21080:	str	r1, [sp, #12]
   21084:	mov	r3, r0
   21088:	and	r0, r0, r1, lsl #8
   2108c:	ldr	r1, [r9]
   21090:	add	r1, r1, r8, lsl #3
   21094:	ldr	r2, [r1, #4]
   21098:	and	r2, r2, r7
   2109c:	mov	r7, #12
   210a0:	orr	r0, r2, r0
   210a4:	str	r0, [r1, #4]
   210a8:	ldr	r0, [r9]
   210ac:	add	r1, r0, sl, lsl #3
   210b0:	add	r0, r0, r8, lsl #3
   210b4:	ldr	r1, [r1, #4]
   210b8:	ldr	r2, [r0, #4]
   210bc:	and	r1, r1, r3
   210c0:	orr	r1, r1, r2
   210c4:	str	r1, [r0, #4]
   210c8:	ldr	r0, [r9]
   210cc:	add	r0, r0, r8, lsl #3
   210d0:	ldr	r1, [r0, #4]
   210d4:	orr	r1, r1, #262144	; 0x40000
   210d8:	str	r1, [r0, #4]
   210dc:	mov	r1, r8
   210e0:	ldr	r0, [r9, #16]
   210e4:	str	sl, [r0, r8, lsl #2]
   210e8:	ldr	r0, [r9, #20]
   210ec:	add	r0, r0, r4, lsl #2
   210f0:	bl	212e4 <__assert_fail@plt+0xfb84>
   210f4:	cmp	r0, #0
   210f8:	mov	r5, sl
   210fc:	bne	20cf4 <__assert_fail@plt+0xf594>
   21100:	b	21120 <__assert_fail@plt+0xf9c0>
   21104:	ldr	r0, [r9, #12]
   21108:	ldr	r1, [r0, r5, lsl #2]
   2110c:	str	r1, [r0, r8, lsl #2]
   21110:	mov	r0, #0
   21114:	sub	sp, fp, #28
   21118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2111c:	mov	r7, r0
   21120:	mov	r0, r7
   21124:	sub	sp, fp, #28
   21128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2112c:	mov	r1, sl
   21130:	bl	212e4 <__assert_fail@plt+0xfb84>
   21134:	mov	r1, r0
   21138:	mov	r7, #12
   2113c:	mov	r0, #0
   21140:	cmp	r1, #0
   21144:	moveq	r0, r7
   21148:	sub	sp, fp, #28
   2114c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21150:	mov	r7, #12
   21154:	b	21120 <__assert_fail@plt+0xf9c0>
   21158:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2115c:	add	fp, sp, #24
   21160:	mov	r8, #0
   21164:	cmp	r1, #0
   21168:	beq	212b8 <__assert_fail@plt+0xfb58>
   2116c:	mov	r6, r1
   21170:	ldr	r1, [r1, #4]
   21174:	cmp	r1, #0
   21178:	beq	212b8 <__assert_fail@plt+0xfb58>
   2117c:	mov	r9, r0
   21180:	ldr	r2, [r0]
   21184:	ldr	r0, [r0, #4]
   21188:	add	r3, r0, r1, lsl #1
   2118c:	cmp	r2, r3
   21190:	bge	211bc <__assert_fail@plt+0xfa5c>
   21194:	ldr	r0, [r9, #8]
   21198:	add	r7, r2, r1
   2119c:	lsl	r1, r7, #3
   211a0:	bl	2b290 <__assert_fail@plt+0x19b30>
   211a4:	cmp	r0, #0
   211a8:	beq	212d8 <__assert_fail@plt+0xfb78>
   211ac:	str	r0, [r9, #8]
   211b0:	lsl	r0, r7, #1
   211b4:	str	r0, [r9]
   211b8:	ldr	r0, [r9, #4]
   211bc:	cmp	r0, #0
   211c0:	beq	212c0 <__assert_fail@plt+0xfb60>
   211c4:	ldr	r2, [r6, #4]
   211c8:	sub	r1, r0, #1
   211cc:	add	r7, r0, r2, lsl #1
   211d0:	sub	r0, r2, #1
   211d4:	orrs	r2, r0, r1
   211d8:	bmi	21220 <__assert_fail@plt+0xfac0>
   211dc:	ldr	r2, [r6, #8]
   211e0:	ldr	r3, [r9, #8]
   211e4:	b	21204 <__assert_fail@plt+0xfaa4>
   211e8:	sublt	r7, r7, #1
   211ec:	subge	r1, r1, #1
   211f0:	sublt	r0, r0, #1
   211f4:	strlt	r4, [r3, r7, lsl #2]
   211f8:	orr	r5, r0, r1
   211fc:	cmn	r5, #1
   21200:	ble	21220 <__assert_fail@plt+0xfac0>
   21204:	ldr	r4, [r2, r0, lsl #2]
   21208:	ldr	r5, [r3, r1, lsl #2]
   2120c:	cmp	r5, r4
   21210:	bne	211e8 <__assert_fail@plt+0xfa88>
   21214:	sub	r1, r1, #1
   21218:	sub	r0, r0, #1
   2121c:	b	211f8 <__assert_fail@plt+0xfa98>
   21220:	cmp	r0, #0
   21224:	bmi	21244 <__assert_fail@plt+0xfae4>
   21228:	add	r2, r0, #1
   2122c:	ldr	r0, [r9, #8]
   21230:	ldr	r1, [r6, #8]
   21234:	sub	r7, r7, r2
   21238:	lsl	r2, r2, #2
   2123c:	add	r0, r0, r7, lsl #2
   21240:	bl	11484 <memcpy@plt>
   21244:	ldr	r0, [r9, #4]
   21248:	ldr	r2, [r6, #4]
   2124c:	sub	r1, r0, #1
   21250:	add	r3, r1, r2, lsl #1
   21254:	sub	r2, r3, r7
   21258:	adds	r2, r2, #1
   2125c:	bcs	212b8 <__assert_fail@plt+0xfb58>
   21260:	add	r0, r2, r0
   21264:	str	r0, [r9, #4]
   21268:	ldr	r0, [r9, #8]
   2126c:	ldr	r6, [r0, r1, lsl #2]
   21270:	ldr	r5, [r0, r3, lsl #2]
   21274:	cmp	r5, r6
   21278:	ble	21294 <__assert_fail@plt+0xfb34>
   2127c:	add	r6, r2, r1
   21280:	subs	r2, r2, #1
   21284:	sub	r3, r3, #1
   21288:	str	r5, [r0, r6, lsl #2]
   2128c:	bne	2126c <__assert_fail@plt+0xfb0c>
   21290:	b	212b8 <__assert_fail@plt+0xfb58>
   21294:	add	r5, r2, r1
   21298:	cmp	r1, #0
   2129c:	str	r6, [r0, r5, lsl #2]
   212a0:	sub	r6, r1, #1
   212a4:	mov	r1, r6
   212a8:	bgt	2126c <__assert_fail@plt+0xfb0c>
   212ac:	add	r1, r0, r7, lsl #2
   212b0:	lsl	r2, r2, #2
   212b4:	bl	11484 <memcpy@plt>
   212b8:	mov	r0, r8
   212bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   212c0:	ldr	r0, [r6, #4]
   212c4:	str	r0, [r9, #4]
   212c8:	ldr	r0, [r9, #8]
   212cc:	ldr	r2, [r6, #4]
   212d0:	ldr	r1, [r6, #8]
   212d4:	b	212b0 <__assert_fail@plt+0xfb50>
   212d8:	mov	r8, #12
   212dc:	mov	r0, r8
   212e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   212e4:	push	{r4, r5, r6, sl, fp, lr}
   212e8:	add	fp, sp, #16
   212ec:	ldr	r2, [r0]
   212f0:	mov	r5, r1
   212f4:	mov	r4, r0
   212f8:	cmp	r2, #0
   212fc:	beq	2132c <__assert_fail@plt+0xfbcc>
   21300:	ldr	r1, [r4, #4]
   21304:	cmp	r1, #0
   21308:	bne	21368 <__assert_fail@plt+0xfc08>
   2130c:	ldr	r0, [r4, #8]
   21310:	str	r5, [r0]
   21314:	ldr	r0, [r4, #4]
   21318:	mov	r6, #1
   2131c:	add	r0, r0, #1
   21320:	str	r0, [r4, #4]
   21324:	mov	r0, r6
   21328:	pop	{r4, r5, r6, sl, fp, pc}
   2132c:	mov	r6, #1
   21330:	mov	r0, #4
   21334:	str	r6, [r4]
   21338:	str	r6, [r4, #4]
   2133c:	bl	2b260 <__assert_fail@plt+0x19b00>
   21340:	cmp	r0, #0
   21344:	str	r0, [r4, #8]
   21348:	strne	r5, [r0]
   2134c:	movne	r0, r6
   21350:	popne	{r4, r5, r6, sl, fp, pc}
   21354:	mov	r6, #0
   21358:	mov	r0, r6
   2135c:	str	r6, [r4]
   21360:	str	r6, [r4, #4]
   21364:	pop	{r4, r5, r6, sl, fp, pc}
   21368:	cmp	r2, r1
   2136c:	bne	21398 <__assert_fail@plt+0xfc38>
   21370:	lsl	r0, r2, #1
   21374:	lsl	r1, r2, #3
   21378:	str	r0, [r4]
   2137c:	ldr	r0, [r4, #8]
   21380:	bl	2b290 <__assert_fail@plt+0x19b30>
   21384:	cmp	r0, #0
   21388:	beq	2144c <__assert_fail@plt+0xfcec>
   2138c:	str	r0, [r4, #8]
   21390:	ldr	r1, [r4, #4]
   21394:	b	2139c <__assert_fail@plt+0xfc3c>
   21398:	ldr	r0, [r4, #8]
   2139c:	ldr	r2, [r0]
   213a0:	cmp	r2, r5
   213a4:	ble	21414 <__assert_fail@plt+0xfcb4>
   213a8:	cmp	r1, #1
   213ac:	blt	21444 <__assert_fail@plt+0xfce4>
   213b0:	ands	r3, r1, #3
   213b4:	sub	ip, r1, #1
   213b8:	beq	213dc <__assert_fail@plt+0xfc7c>
   213bc:	add	lr, r0, r1, lsl #2
   213c0:	mov	r6, lr
   213c4:	ldr	r2, [r6, #-4]!
   213c8:	subs	r3, r3, #1
   213cc:	sub	r1, r1, #1
   213d0:	str	r2, [lr]
   213d4:	mov	lr, r6
   213d8:	bne	213c4 <__assert_fail@plt+0xfc64>
   213dc:	cmp	ip, #3
   213e0:	bcc	2140c <__assert_fail@plt+0xfcac>
   213e4:	add	r2, r0, r1, lsl #2
   213e8:	sub	r2, r2, #8
   213ec:	sub	lr, r2, #8
   213f0:	sub	r1, r1, #4
   213f4:	sub	sl, r2, #4
   213f8:	sub	r2, r2, #16
   213fc:	ldm	lr, {r3, r6, ip, lr}
   21400:	cmp	r1, #0
   21404:	stm	sl, {r3, r6, ip, lr}
   21408:	bgt	213ec <__assert_fail@plt+0xfc8c>
   2140c:	mov	r1, #0
   21410:	b	21444 <__assert_fail@plt+0xfce4>
   21414:	add	r2, r0, r1, lsl #2
   21418:	ldr	r3, [r2, #-4]
   2141c:	cmp	r3, r5
   21420:	ble	21444 <__assert_fail@plt+0xfce4>
   21424:	sub	r1, r1, #2
   21428:	str	r3, [r2]
   2142c:	sub	r1, r1, #1
   21430:	ldr	r3, [r2, #-8]
   21434:	sub	r2, r2, #4
   21438:	cmp	r3, r5
   2143c:	bgt	21428 <__assert_fail@plt+0xfcc8>
   21440:	add	r1, r1, #2
   21444:	str	r5, [r0, r1, lsl #2]
   21448:	b	21314 <__assert_fail@plt+0xfbb4>
   2144c:	mov	r6, #0
   21450:	mov	r0, r6
   21454:	pop	{r4, r5, r6, sl, fp, pc}
   21458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2145c:	add	fp, sp, #28
   21460:	sub	sp, sp, #28
   21464:	ldr	r8, [r2, #4]
   21468:	str	r2, [sp, #24]
   2146c:	cmp	r8, #0
   21470:	beq	2167c <__assert_fail@plt+0xff1c>
   21474:	mov	r9, r3
   21478:	add	r7, r8, r3
   2147c:	cmp	r8, #1
   21480:	str	r0, [sp, #4]
   21484:	blt	21568 <__assert_fail@plt+0xfe08>
   21488:	ldr	r0, [sp, #24]
   2148c:	mov	sl, #0
   21490:	cmp	r8, #4
   21494:	ldr	ip, [r0, #8]
   21498:	bcc	21550 <__assert_fail@plt+0xfdf0>
   2149c:	mov	r3, #0
   214a0:	bic	sl, r8, #3
   214a4:	mov	r0, #1
   214a8:	vdup.32	q8, r3
   214ac:	sub	r2, sl, #4
   214b0:	add	r0, r0, r2, lsr #2
   214b4:	cmp	r2, #12
   214b8:	and	lr, r0, #3
   214bc:	vmov.32	d16[0], r7
   214c0:	bcc	21514 <__assert_fail@plt+0xfdb4>
   214c4:	sub	r5, r0, lr
   214c8:	mov	r3, #0
   214cc:	mov	r4, #64	; 0x40
   214d0:	mov	r7, ip
   214d4:	mov	r6, ip
   214d8:	vld1.32	{d18-d19}, [r6], r4
   214dc:	add	r2, r7, #16
   214e0:	add	r0, r7, #32
   214e4:	subs	r5, r5, #4
   214e8:	add	r3, r3, #16
   214ec:	vld1.32	{d20-d21}, [r2]
   214f0:	vadd.i32	q8, q9, q8
   214f4:	vld1.32	{d18-d19}, [r0]
   214f8:	add	r0, r7, #48	; 0x30
   214fc:	mov	r7, r6
   21500:	vadd.i32	q8, q10, q8
   21504:	vld1.32	{d20-d21}, [r0]
   21508:	vadd.i32	q8, q9, q8
   2150c:	vadd.i32	q8, q10, q8
   21510:	bne	214d8 <__assert_fail@plt+0xfd78>
   21514:	cmp	lr, #0
   21518:	beq	21534 <__assert_fail@plt+0xfdd4>
   2151c:	add	r0, ip, r3, lsl #2
   21520:	rsb	r3, lr, #0
   21524:	vld1.32	{d18-d19}, [r0]!
   21528:	adds	r3, r3, #1
   2152c:	vadd.i32	q8, q9, q8
   21530:	bcc	21524 <__assert_fail@plt+0xfdc4>
   21534:	vext.8	q9, q8, q8, #8
   21538:	cmp	r8, sl
   2153c:	vadd.i32	q8, q8, q9
   21540:	vdup.32	q9, d16[1]
   21544:	vadd.i32	q8, q8, q9
   21548:	vmov.32	r7, d16[0]
   2154c:	beq	21568 <__assert_fail@plt+0xfe08>
   21550:	add	r3, ip, sl, lsl #2
   21554:	sub	r2, r8, sl
   21558:	ldr	r0, [r3], #4
   2155c:	subs	r2, r2, #1
   21560:	add	r7, r0, r7
   21564:	bne	21558 <__assert_fail@plt+0xfdf8>
   21568:	ldr	r0, [r1, #32]
   2156c:	mov	sl, r1
   21570:	ldr	r1, [r1, #68]	; 0x44
   21574:	and	r1, r1, r7
   21578:	add	r2, r1, r1, lsl #1
   2157c:	ldr	r1, [r0, r2, lsl #2]
   21580:	cmp	r1, #1
   21584:	blt	2161c <__assert_fail@plt+0xfebc>
   21588:	add	r0, r0, r2, lsl #2
   2158c:	sub	ip, r8, #1
   21590:	mov	r5, #0
   21594:	ldr	lr, [r0, #8]
   21598:	b	215a8 <__assert_fail@plt+0xfe48>
   2159c:	add	r5, r5, #1
   215a0:	cmp	r5, r1
   215a4:	bge	2161c <__assert_fail@plt+0xfebc>
   215a8:	ldr	r4, [lr, r5, lsl #2]
   215ac:	ldr	r0, [r4]
   215b0:	cmp	r0, r7
   215b4:	bne	2159c <__assert_fail@plt+0xfe3c>
   215b8:	ldrb	r0, [r4, #52]	; 0x34
   215bc:	and	r0, r0, #15
   215c0:	cmp	r0, r9
   215c4:	bne	2159c <__assert_fail@plt+0xfe3c>
   215c8:	ldr	r0, [sp, #24]
   215cc:	cmp	r0, #0
   215d0:	ldrne	r3, [r4, #40]	; 0x28
   215d4:	cmpne	r3, #0
   215d8:	beq	2159c <__assert_fail@plt+0xfe3c>
   215dc:	ldr	r0, [r3, #4]
   215e0:	cmp	r0, r8
   215e4:	bne	2159c <__assert_fail@plt+0xfe3c>
   215e8:	mov	r0, ip
   215ec:	add	r6, r0, #1
   215f0:	cmp	r6, #1
   215f4:	blt	218bc <__assert_fail@plt+0x1015c>
   215f8:	ldr	r2, [sp, #24]
   215fc:	ldr	r6, [r2, #8]
   21600:	ldr	r2, [r3, #8]
   21604:	ldr	r6, [r6, r0, lsl #2]
   21608:	ldr	r2, [r2, r0, lsl #2]
   2160c:	sub	r0, r0, #1
   21610:	cmp	r2, r6
   21614:	beq	215ec <__assert_fail@plt+0xfe8c>
   21618:	b	2159c <__assert_fail@plt+0xfe3c>
   2161c:	mov	r0, #56	; 0x38
   21620:	mov	r1, #1
   21624:	bl	2b20c <__assert_fail@plt+0x19aac>
   21628:	cmp	r0, #0
   2162c:	beq	218dc <__assert_fail@plt+0x1017c>
   21630:	mov	r4, r0
   21634:	ldr	r0, [sp, #24]
   21638:	add	r6, r4, #4
   2163c:	ldr	r8, [r0, #4]
   21640:	cmp	r8, #1
   21644:	str	r8, [r4, #8]
   21648:	blt	21688 <__assert_fail@plt+0xff28>
   2164c:	lsl	r0, r8, #2
   21650:	str	r8, [r4, #4]
   21654:	bl	2b260 <__assert_fail@plt+0x19b00>
   21658:	cmp	r0, #0
   2165c:	str	r0, [r4, #12]
   21660:	beq	218f0 <__assert_fail@plt+0x10190>
   21664:	ldr	r1, [sp, #24]
   21668:	ldr	r8, [r1, #4]
   2166c:	ldr	r1, [r1, #8]
   21670:	lsl	r2, r8, #2
   21674:	bl	11484 <memcpy@plt>
   21678:	b	21698 <__assert_fail@plt+0xff38>
   2167c:	mov	r4, #0
   21680:	str	r4, [r0]
   21684:	b	218bc <__assert_fail@plt+0x1015c>
   21688:	mov	r0, #0
   2168c:	str	r0, [r6]
   21690:	str	r0, [r6, #4]
   21694:	str	r0, [r6, #8]
   21698:	str	r6, [r4, #40]	; 0x28
   2169c:	and	r0, r9, #15
   216a0:	cmp	r8, #1
   216a4:	ldrb	r1, [r4, #52]	; 0x34
   216a8:	and	r1, r1, #240	; 0xf0
   216ac:	orr	r0, r1, r0
   216b0:	strb	r0, [r4, #52]	; 0x34
   216b4:	mov	r0, sl
   216b8:	blt	218a8 <__assert_fail@plt+0x10148>
   216bc:	movw	lr, #65280	; 0xff00
   216c0:	and	r1, r9, #4
   216c4:	and	ip, r9, #1
   216c8:	mov	sl, #0
   216cc:	mov	r5, #0
   216d0:	str	r0, [sp, #16]
   216d4:	movt	lr, #3
   216d8:	str	r1, [sp]
   216dc:	and	r1, r9, #2
   216e0:	str	ip, [sp, #12]
   216e4:	str	r1, [sp, #8]
   216e8:	add	r1, lr, #255	; 0xff
   216ec:	str	r1, [sp, #20]
   216f0:	b	21704 <__assert_fail@plt+0xffa4>
   216f4:	add	r5, r5, #1
   216f8:	add	sl, sl, #1
   216fc:	cmp	sl, r8
   21700:	bge	218a8 <__assert_fail@plt+0x10148>
   21704:	ldr	r1, [sp, #24]
   21708:	ldr	r2, [r0]
   2170c:	ldr	r1, [r1, #8]
   21710:	ldr	r1, [r1, sl, lsl #2]
   21714:	add	r1, r2, r1, lsl #3
   21718:	ldr	r9, [r1, #4]
   2171c:	ldr	r1, [sp, #20]
   21720:	and	r1, r9, r1
   21724:	cmp	r1, #1
   21728:	beq	216f8 <__assert_fail@plt+0xff98>
   2172c:	ldrb	r3, [r4, #52]	; 0x34
   21730:	mov	r2, #32
   21734:	and	r1, r9, lr
   21738:	and	r2, r2, r9, lsr #15
   2173c:	orr	r2, r3, r2
   21740:	uxtb	r3, r9
   21744:	strb	r2, [r4, #52]	; 0x34
   21748:	cmp	r3, #2
   2174c:	beq	21760 <__assert_fail@plt+0x10000>
   21750:	cmp	r3, #4
   21754:	bne	2176c <__assert_fail@plt+0x1000c>
   21758:	mov	r3, #64	; 0x40
   2175c:	b	21764 <__assert_fail@plt+0x10004>
   21760:	mov	r3, #16
   21764:	orr	r2, r2, r3
   21768:	strb	r2, [r4, #52]	; 0x34
   2176c:	cmp	r1, #0
   21770:	beq	216f8 <__assert_fail@plt+0xff98>
   21774:	ldr	r1, [r4, #40]	; 0x28
   21778:	cmp	r1, r6
   2177c:	beq	21794 <__assert_fail@plt+0x10034>
   21780:	cmp	ip, #0
   21784:	bne	21828 <__assert_fail@plt+0x100c8>
   21788:	ands	r1, r9, #256	; 0x100
   2178c:	bne	2185c <__assert_fail@plt+0x100fc>
   21790:	b	21828 <__assert_fail@plt+0x100c8>
   21794:	mov	r0, #12
   21798:	bl	2b260 <__assert_fail@plt+0x19b00>
   2179c:	cmp	r0, #0
   217a0:	beq	218d4 <__assert_fail@plt+0x10174>
   217a4:	mov	r5, r0
   217a8:	str	r0, [r4, #40]	; 0x28
   217ac:	ldr	r0, [sp, #24]
   217b0:	ldr	r8, [r0, #4]
   217b4:	cmp	r8, #1
   217b8:	str	r8, [r5, #4]
   217bc:	blt	217f0 <__assert_fail@plt+0x10090>
   217c0:	lsl	r0, r8, #2
   217c4:	str	r8, [r5]
   217c8:	bl	2b260 <__assert_fail@plt+0x19b00>
   217cc:	cmp	r0, #0
   217d0:	str	r0, [r5, #8]
   217d4:	beq	218c8 <__assert_fail@plt+0x10168>
   217d8:	ldr	r1, [sp, #24]
   217dc:	ldr	r8, [r1, #4]
   217e0:	ldr	r1, [r1, #8]
   217e4:	lsl	r2, r8, #2
   217e8:	bl	11484 <memcpy@plt>
   217ec:	b	21800 <__assert_fail@plt+0x100a0>
   217f0:	mov	r0, #0
   217f4:	str	r0, [r5]
   217f8:	str	r0, [r5, #4]
   217fc:	str	r0, [r5, #8]
   21800:	ldrb	r0, [r4, #52]	; 0x34
   21804:	ldr	ip, [sp, #12]
   21808:	movw	lr, #65280	; 0xff00
   2180c:	mov	r5, #0
   21810:	movt	lr, #3
   21814:	orr	r0, r0, #128	; 0x80
   21818:	strb	r0, [r4, #52]	; 0x34
   2181c:	ldr	r0, [sp, #16]
   21820:	cmp	ip, #0
   21824:	beq	21788 <__assert_fail@plt+0x10028>
   21828:	cmp	ip, #0
   2182c:	andsne	r1, r9, #512	; 0x200
   21830:	bne	2185c <__assert_fail@plt+0x100fc>
   21834:	ldr	r1, [sp, #8]
   21838:	cmp	r1, #0
   2183c:	bne	21848 <__assert_fail@plt+0x100e8>
   21840:	ands	r1, r9, #4096	; 0x1000
   21844:	bne	2185c <__assert_fail@plt+0x100fc>
   21848:	ldr	r1, [sp]
   2184c:	cmp	r1, #0
   21850:	bne	216f8 <__assert_fail@plt+0xff98>
   21854:	ands	r1, r9, #16384	; 0x4000
   21858:	beq	216f8 <__assert_fail@plt+0xff98>
   2185c:	subs	r1, sl, r5
   21860:	bmi	216f4 <__assert_fail@plt+0xff94>
   21864:	ldr	r2, [r4, #8]
   21868:	cmp	r2, r1
   2186c:	subgt	r2, r2, #1
   21870:	strgt	r2, [r4, #8]
   21874:	cmpgt	r2, r1
   21878:	ble	216f4 <__assert_fail@plt+0xff94>
   2187c:	ldr	r2, [r4, #12]
   21880:	add	r3, r2, r1, lsl #2
   21884:	ldr	r3, [r3, #4]
   21888:	str	r3, [r2, r1, lsl #2]
   2188c:	add	r1, r1, #1
   21890:	ldr	r3, [r4, #8]
   21894:	cmp	r1, r3
   21898:	blt	21880 <__assert_fail@plt+0x10120>
   2189c:	ldr	r1, [sp, #24]
   218a0:	ldr	r8, [r1, #4]
   218a4:	b	216f4 <__assert_fail@plt+0xff94>
   218a8:	mov	r1, r4
   218ac:	mov	r2, r7
   218b0:	bl	21908 <__assert_fail@plt+0x101a8>
   218b4:	cmp	r0, #0
   218b8:	bne	218d4 <__assert_fail@plt+0x10174>
   218bc:	mov	r0, r4
   218c0:	sub	sp, fp, #28
   218c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218c8:	mov	r0, #0
   218cc:	str	r0, [r5]
   218d0:	str	r0, [r5, #4]
   218d4:	mov	r0, r4
   218d8:	bl	1b498 <__assert_fail@plt+0x9d38>
   218dc:	ldr	r1, [sp, #4]
   218e0:	mov	r0, #12
   218e4:	mov	r4, #0
   218e8:	str	r0, [r1]
   218ec:	b	218bc <__assert_fail@plt+0x1015c>
   218f0:	mov	r0, #0
   218f4:	str	r0, [r4, #4]
   218f8:	str	r0, [r4, #8]
   218fc:	mov	r0, r4
   21900:	bl	141b8 <__assert_fail@plt+0x2a58>
   21904:	b	218dc <__assert_fail@plt+0x1017c>
   21908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2190c:	add	fp, sp, #28
   21910:	sub	sp, sp, #4
   21914:	str	r2, [r1]
   21918:	mov	r4, r1
   2191c:	mov	r7, r0
   21920:	mov	r0, #0
   21924:	mov	r9, r2
   21928:	ldr	r1, [r1, #8]
   2192c:	str	r1, [r4, #16]
   21930:	str	r0, [r4, #20]
   21934:	lsl	r0, r1, #2
   21938:	bl	2b260 <__assert_fail@plt+0x19b00>
   2193c:	mov	r8, #12
   21940:	cmp	r0, #0
   21944:	str	r0, [r4, #24]
   21948:	beq	21a10 <__assert_fail@plt+0x102b0>
   2194c:	ldr	r1, [r4, #8]
   21950:	cmp	r1, #1
   21954:	blt	219d0 <__assert_fail@plt+0x10270>
   21958:	mov	r5, #0
   2195c:	mov	sl, #2
   21960:	b	21980 <__assert_fail@plt+0x10220>
   21964:	add	r2, r1, #1
   21968:	str	r2, [r4, #20]
   2196c:	str	r6, [r0, r1, lsl #2]
   21970:	ldr	r1, [r4, #8]
   21974:	add	r5, r5, #1
   21978:	cmp	r5, r1
   2197c:	bge	219d0 <__assert_fail@plt+0x10270>
   21980:	ldr	r2, [r4, #12]
   21984:	ldr	r6, [r2, r5, lsl #2]
   21988:	ldr	r2, [r7]
   2198c:	add	r2, r2, r6, lsl #3
   21990:	ldrb	r2, [r2, #4]
   21994:	tst	r2, #8
   21998:	bne	21974 <__assert_fail@plt+0x10214>
   2199c:	ldr	r2, [r4, #16]
   219a0:	ldr	r1, [r4, #20]
   219a4:	cmp	r2, r1
   219a8:	bne	21964 <__assert_fail@plt+0x10204>
   219ac:	add	r1, sl, r2, lsl #1
   219b0:	str	r1, [r4, #16]
   219b4:	lsl	r1, r1, #2
   219b8:	bl	2b290 <__assert_fail@plt+0x19b30>
   219bc:	cmp	r0, #0
   219c0:	beq	21a10 <__assert_fail@plt+0x102b0>
   219c4:	str	r0, [r4, #24]
   219c8:	ldr	r1, [r4, #20]
   219cc:	b	21964 <__assert_fail@plt+0x10204>
   219d0:	ldr	r1, [r7, #68]	; 0x44
   219d4:	ldr	r0, [r7, #32]
   219d8:	and	r1, r1, r9
   219dc:	mov	r5, r0
   219e0:	add	r2, r1, r1, lsl #1
   219e4:	ldr	r1, [r5, r2, lsl #2]!
   219e8:	mov	r6, r5
   219ec:	ldr	r3, [r6, #4]!
   219f0:	cmp	r3, r1
   219f4:	ble	21a1c <__assert_fail@plt+0x102bc>
   219f8:	add	r0, r0, r2, lsl #2
   219fc:	ldr	r0, [r0, #8]
   21a00:	add	r2, r1, #1
   21a04:	mov	r8, #0
   21a08:	str	r2, [r5]
   21a0c:	str	r4, [r0, r1, lsl #2]
   21a10:	mov	r0, r8
   21a14:	sub	sp, fp, #28
   21a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a1c:	add	r7, r0, r2, lsl #2
   21a20:	mov	r2, #2
   21a24:	add	r9, r2, r1, lsl #1
   21a28:	ldr	r0, [r7, #8]!
   21a2c:	lsl	r1, r9, #2
   21a30:	bl	2b290 <__assert_fail@plt+0x19b30>
   21a34:	cmp	r0, #0
   21a38:	beq	21a10 <__assert_fail@plt+0x102b0>
   21a3c:	str	r0, [r7]
   21a40:	str	r9, [r6]
   21a44:	ldr	r1, [r5]
   21a48:	b	21a00 <__assert_fail@plt+0x102a0>
   21a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a50:	add	fp, sp, #28
   21a54:	sub	sp, sp, #36	; 0x24
   21a58:	mov	r4, r0
   21a5c:	ldr	r0, [r0, #24]
   21a60:	mov	r6, r2
   21a64:	mov	r9, r1
   21a68:	cmp	r0, r1
   21a6c:	ble	21c68 <__assert_fail@plt+0x10508>
   21a70:	ldr	r0, [r4, #80]	; 0x50
   21a74:	mov	r1, #4
   21a78:	cmp	r0, #2
   21a7c:	movge	r0, #0
   21a80:	strge	r0, [r4, #16]
   21a84:	strge	r0, [r4, #20]
   21a88:	mov	r0, #0
   21a8c:	tst	r6, #1
   21a90:	strb	r0, [r4, #76]	; 0x4c
   21a94:	str	r0, [r4, #24]
   21a98:	str	r0, [r4, #28]
   21a9c:	str	r0, [r4, #32]
   21aa0:	movweq	r1, #6
   21aa4:	ldr	r2, [r4, #44]	; 0x2c
   21aa8:	ldr	r3, [r4, #52]	; 0x34
   21aac:	str	r2, [r4, #48]	; 0x30
   21ab0:	str	r3, [r4, #56]	; 0x38
   21ab4:	str	r1, [r4, #60]	; 0x3c
   21ab8:	ldrb	r1, [r4, #75]	; 0x4b
   21abc:	cmp	r1, #0
   21ac0:	bne	21acc <__assert_fail@plt+0x1036c>
   21ac4:	ldr	r1, [r4]
   21ac8:	str	r1, [r4, #4]
   21acc:	mov	r5, r9
   21ad0:	cmp	r5, #0
   21ad4:	beq	21bf0 <__assert_fail@plt+0x10490>
   21ad8:	ldr	r1, [r4, #32]
   21adc:	cmp	r5, r1
   21ae0:	bge	21c78 <__assert_fail@plt+0x10518>
   21ae4:	ldrb	r0, [r4, #76]	; 0x4c
   21ae8:	cmp	r0, #0
   21aec:	bne	21df4 <__assert_fail@plt+0x10694>
   21af0:	cmp	r5, #0
   21af4:	ble	21b30 <__assert_fail@plt+0x103d0>
   21af8:	ldr	r1, [r4, #48]	; 0x30
   21afc:	sub	r0, r5, #1
   21b00:	cmp	r1, r0
   21b04:	beq	21eac <__assert_fail@plt+0x1074c>
   21b08:	ldr	r1, [r4, #80]	; 0x50
   21b0c:	cmp	r1, #2
   21b10:	blt	21b38 <__assert_fail@plt+0x103d8>
   21b14:	ldr	r1, [r4, #8]
   21b18:	ldr	r6, [r1, r0, lsl #2]
   21b1c:	cmn	r6, #1
   21b20:	bne	21b68 <__assert_fail@plt+0x10408>
   21b24:	sub	r0, r0, #1
   21b28:	cmn	r0, #1
   21b2c:	bne	21b18 <__assert_fail@plt+0x103b8>
   21b30:	ldr	r1, [r4, #60]	; 0x3c
   21b34:	b	21b90 <__assert_fail@plt+0x10430>
   21b38:	ldr	r1, [r4, #4]
   21b3c:	ldr	r2, [r4, #68]	; 0x44
   21b40:	ldrb	r0, [r1, r0]
   21b44:	ubfx	r1, r0, #5, #3
   21b48:	and	r3, r0, #31
   21b4c:	ldr	r2, [r2, r1, lsl #2]
   21b50:	mov	r1, #1
   21b54:	tst	r2, r1, lsl r3
   21b58:	moveq	r1, #0
   21b5c:	cmpeq	r0, #10
   21b60:	bne	21b90 <__assert_fail@plt+0x10430>
   21b64:	b	21b80 <__assert_fail@plt+0x10420>
   21b68:	ldrb	r0, [r4, #78]	; 0x4e
   21b6c:	cmp	r0, #0
   21b70:	bne	22144 <__assert_fail@plt+0x109e4>
   21b74:	mov	r1, #0
   21b78:	cmp	r6, #10
   21b7c:	bne	21b90 <__assert_fail@plt+0x10430>
   21b80:	ldrb	r0, [r4, #77]	; 0x4d
   21b84:	cmp	r0, #0
   21b88:	movwne	r0, #1
   21b8c:	lsl	r1, r0, #1
   21b90:	str	r1, [r4, #60]	; 0x3c
   21b94:	ldr	r0, [r4, #80]	; 0x50
   21b98:	cmp	r0, #2
   21b9c:	blt	21bb8 <__assert_fail@plt+0x10458>
   21ba0:	ldr	r2, [r4, #28]
   21ba4:	ldr	r0, [r4, #8]
   21ba8:	sub	r2, r2, r5
   21bac:	add	r1, r0, r5, lsl #2
   21bb0:	lsl	r2, r2, #2
   21bb4:	bl	11454 <memmove@plt>
   21bb8:	ldrb	r0, [r4, #75]	; 0x4b
   21bbc:	cmp	r0, #0
   21bc0:	bne	21e94 <__assert_fail@plt+0x10734>
   21bc4:	ldr	r0, [r4, #28]
   21bc8:	ldr	r1, [r4, #32]
   21bcc:	sub	r0, r0, r5
   21bd0:	sub	r1, r1, r5
   21bd4:	str	r0, [r4, #28]
   21bd8:	str	r1, [r4, #32]
   21bdc:	ldrb	r0, [r4, #75]	; 0x4b
   21be0:	cmp	r0, #0
   21be4:	ldreq	r0, [r4, #4]
   21be8:	addeq	r0, r0, r5
   21bec:	streq	r0, [r4, #4]
   21bf0:	str	r9, [r4, #24]
   21bf4:	ldr	r0, [r4, #48]	; 0x30
   21bf8:	ldr	r3, [r4, #80]	; 0x50
   21bfc:	ldr	r1, [r4, #56]	; 0x38
   21c00:	sub	r2, r0, r5
   21c04:	cmp	r3, #2
   21c08:	sub	r0, r1, r5
   21c0c:	str	r2, [r4, #48]	; 0x30
   21c10:	str	r0, [r4, #56]	; 0x38
   21c14:	blt	21c3c <__assert_fail@plt+0x104dc>
   21c18:	ldrb	r0, [r4, #72]	; 0x48
   21c1c:	cmp	r0, #0
   21c20:	beq	21c50 <__assert_fail@plt+0x104f0>
   21c24:	mov	r0, r4
   21c28:	bl	1b500 <__assert_fail@plt+0x9da0>
   21c2c:	cmp	r0, #0
   21c30:	beq	21c58 <__assert_fail@plt+0x104f8>
   21c34:	sub	sp, fp, #28
   21c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c3c:	ldrb	r0, [r4, #75]	; 0x4b
   21c40:	cmp	r0, #0
   21c44:	bne	21eb8 <__assert_fail@plt+0x10758>
   21c48:	str	r2, [r4, #28]
   21c4c:	b	21c58 <__assert_fail@plt+0x104f8>
   21c50:	mov	r0, r4
   21c54:	bl	1be00 <__assert_fail@plt+0xa6a0>
   21c58:	mov	r0, #0
   21c5c:	str	r0, [r4, #40]	; 0x28
   21c60:	sub	sp, fp, #28
   21c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c68:	sub	r5, r9, r0
   21c6c:	cmp	r5, #0
   21c70:	bne	21ad8 <__assert_fail@plt+0x10378>
   21c74:	b	21bf0 <__assert_fail@plt+0x10490>
   21c78:	ldrb	r2, [r4, #76]	; 0x4c
   21c7c:	ldr	lr, [r4, #28]
   21c80:	cmp	r2, #0
   21c84:	bne	22304 <__assert_fail@plt+0x10ba4>
   21c88:	mov	r2, #0
   21c8c:	str	r2, [r4, #28]
   21c90:	ldr	r3, [r4, #80]	; 0x50
   21c94:	cmp	r3, #2
   21c98:	blt	21f28 <__assert_fail@plt+0x107c8>
   21c9c:	ldrb	r2, [r4, #73]	; 0x49
   21ca0:	cmp	r2, #0
   21ca4:	beq	21d60 <__assert_fail@plt+0x10600>
   21ca8:	ldr	r7, [r4]
   21cac:	sub	r3, r5, r3
   21cb0:	add	ip, r7, r0
   21cb4:	add	r3, ip, r3
   21cb8:	add	r8, ip, r5
   21cbc:	cmp	r3, r7
   21cc0:	movcc	r3, r7
   21cc4:	mov	r7, r8
   21cc8:	sub	r7, r7, #1
   21ccc:	cmp	r7, r3
   21cd0:	bcc	21d60 <__assert_fail@plt+0x10600>
   21cd4:	ldrb	r2, [r7]
   21cd8:	and	r2, r2, #192	; 0xc0
   21cdc:	cmp	r2, #128	; 0x80
   21ce0:	beq	21cc8 <__assert_fail@plt+0x10568>
   21ce4:	ldr	r0, [r4, #48]	; 0x30
   21ce8:	mov	sl, lr
   21cec:	mov	r1, r7
   21cf0:	add	r0, ip, r0
   21cf4:	sub	r2, r0, r7
   21cf8:	ldr	r0, [r4, #64]	; 0x40
   21cfc:	cmp	r0, #0
   21d00:	bne	223dc <__assert_fail@plt+0x10c7c>
   21d04:	mov	r0, #0
   21d08:	add	r3, sp, #24
   21d0c:	str	r0, [sp, #28]
   21d10:	str	r0, [sp, #24]
   21d14:	add	r0, sp, #20
   21d18:	bl	2b644 <__assert_fail@plt+0x19ee4>
   21d1c:	sub	r1, r8, r7
   21d20:	mvn	r7, #0
   21d24:	cmp	r0, r1
   21d28:	bcc	21d4c <__assert_fail@plt+0x105ec>
   21d2c:	cmn	r0, #3
   21d30:	bhi	21d4c <__assert_fail@plt+0x105ec>
   21d34:	mov	r2, #0
   21d38:	sub	r0, r0, r1
   21d3c:	str	r2, [r4, #16]
   21d40:	str	r2, [r4, #20]
   21d44:	str	r0, [r4, #28]
   21d48:	ldr	r7, [sp, #20]
   21d4c:	cmn	r7, #1
   21d50:	bne	22184 <__assert_fail@plt+0x10a24>
   21d54:	ldr	r0, [r4, #24]
   21d58:	ldr	r1, [r4, #32]
   21d5c:	mov	lr, sl
   21d60:	add	r8, r1, r0
   21d64:	cmp	r8, r9
   21d68:	bge	22164 <__assert_fail@plt+0x10a04>
   21d6c:	add	sl, r4, #16
   21d70:	str	lr, [sp]
   21d74:	ldr	r0, [r4]
   21d78:	ldr	r2, [r4, #44]	; 0x2c
   21d7c:	mov	r3, sl
   21d80:	add	r1, r0, r8
   21d84:	ldr	r0, [sl]
   21d88:	sub	r7, r2, r8
   21d8c:	mov	r2, r7
   21d90:	str	r0, [sp, #8]
   21d94:	ldr	r0, [sl, #4]
   21d98:	str	r0, [sp, #4]
   21d9c:	add	r0, sp, #24
   21da0:	bl	2b644 <__assert_fail@plt+0x19ee4>
   21da4:	sub	r1, r0, #1
   21da8:	cmn	r1, #3
   21dac:	bcs	21dc4 <__assert_fail@plt+0x10664>
   21db0:	ldr	r7, [sp, #24]
   21db4:	add	r8, r0, r8
   21db8:	cmp	r8, r9
   21dbc:	blt	21d74 <__assert_fail@plt+0x10614>
   21dc0:	b	22170 <__assert_fail@plt+0x10a10>
   21dc4:	ldr	r3, [sp, #4]
   21dc8:	ldr	r2, [sp, #8]
   21dcc:	cmp	r7, #0
   21dd0:	mov	r1, #0
   21dd4:	cmpne	r0, #0
   21dd8:	beq	21de4 <__assert_fail@plt+0x10684>
   21ddc:	ldr	r0, [r4]
   21de0:	ldrb	r1, [r0, r8]
   21de4:	stm	sl, {r2, r3}
   21de8:	mov	r0, #1
   21dec:	mov	r7, r1
   21df0:	b	21db4 <__assert_fail@plt+0x10654>
   21df4:	ldr	ip, [r4, #12]
   21df8:	ldr	r0, [r4, #28]
   21dfc:	mov	r2, #0
   21e00:	b	21e10 <__assert_fail@plt+0x106b0>
   21e04:	cmp	r2, r3
   21e08:	mov	r0, r3
   21e0c:	bge	21e3c <__assert_fail@plt+0x106dc>
   21e10:	add	r1, r2, r0
   21e14:	add	r1, r1, r1, lsr #31
   21e18:	asr	r1, r1, #1
   21e1c:	ldr	r7, [ip, r1, lsl #2]
   21e20:	mov	r3, r1
   21e24:	cmp	r7, r5
   21e28:	bgt	21e04 <__assert_fail@plt+0x106a4>
   21e2c:	bge	21e3c <__assert_fail@plt+0x106dc>
   21e30:	add	r2, r1, #1
   21e34:	mov	r3, r0
   21e38:	b	21e04 <__assert_fail@plt+0x106a4>
   21e3c:	cmp	r7, r5
   21e40:	mov	r0, #0
   21e44:	movwlt	r0, #1
   21e48:	add	r7, r1, r0
   21e4c:	cmp	r7, #0
   21e50:	ble	21e8c <__assert_fail@plt+0x1072c>
   21e54:	ldr	r1, [r4, #48]	; 0x30
   21e58:	sub	r0, r7, #1
   21e5c:	cmp	r1, r0
   21e60:	beq	2232c <__assert_fail@plt+0x10bcc>
   21e64:	ldr	r1, [r4, #80]	; 0x50
   21e68:	cmp	r1, #2
   21e6c:	blt	21f74 <__assert_fail@plt+0x10814>
   21e70:	ldr	r1, [r4, #8]
   21e74:	ldr	r6, [r1, r0, lsl #2]
   21e78:	cmn	r6, #1
   21e7c:	bne	21fa4 <__assert_fail@plt+0x10844>
   21e80:	sub	r0, r0, #1
   21e84:	cmn	r0, #1
   21e88:	bne	21e74 <__assert_fail@plt+0x10714>
   21e8c:	ldr	r1, [r4, #60]	; 0x3c
   21e90:	b	21fcc <__assert_fail@plt+0x1086c>
   21e94:	ldr	r2, [r4, #28]
   21e98:	ldr	r0, [r4, #4]
   21e9c:	add	r1, r0, r5
   21ea0:	sub	r2, r2, r5
   21ea4:	bl	11454 <memmove@plt>
   21ea8:	b	21bc4 <__assert_fail@plt+0x10464>
   21eac:	and	r0, r6, #2
   21eb0:	eor	r1, r0, #10
   21eb4:	b	21b90 <__assert_fail@plt+0x10430>
   21eb8:	ldrb	r0, [r4, #72]	; 0x48
   21ebc:	cmp	r0, #0
   21ec0:	beq	221e8 <__assert_fail@plt+0x10a88>
   21ec4:	ldr	r6, [r4, #36]	; 0x24
   21ec8:	ldr	r5, [r4, #28]
   21ecc:	cmp	r6, r2
   21ed0:	movgt	r6, r2
   21ed4:	cmp	r5, r6
   21ed8:	bge	22254 <__assert_fail@plt+0x10af4>
   21edc:	bl	115e0 <__ctype_toupper_loc@plt>
   21ee0:	ldr	r1, [r4]
   21ee4:	ldr	r2, [r4, #64]	; 0x40
   21ee8:	add	r1, r1, r9
   21eec:	cmp	r2, #0
   21ef0:	ldrb	r1, [r1, r5]
   21ef4:	bne	21f20 <__assert_fail@plt+0x107c0>
   21ef8:	ldr	r2, [r0]
   21efc:	ldr	r1, [r2, r1, lsl #2]
   21f00:	ldr	r2, [r4, #4]
   21f04:	strb	r1, [r2, r5]
   21f08:	add	r1, r5, #1
   21f0c:	cmp	r1, r6
   21f10:	bge	22250 <__assert_fail@plt+0x10af0>
   21f14:	ldr	r9, [r4, #24]
   21f18:	mov	r5, r1
   21f1c:	b	21ee0 <__assert_fail@plt+0x10780>
   21f20:	ldrb	r1, [r2, r1]
   21f24:	b	21ef8 <__assert_fail@plt+0x10798>
   21f28:	ldr	r3, [r4]
   21f2c:	add	r0, r5, r0
   21f30:	ldr	r1, [r4, #64]	; 0x40
   21f34:	add	r0, r0, r3
   21f38:	cmp	r1, #0
   21f3c:	ldrb	r0, [r0, #-1]
   21f40:	str	r2, [r4, #32]
   21f44:	ldrbne	r0, [r1, r0]
   21f48:	ldr	r1, [r4, #68]	; 0x44
   21f4c:	ubfx	r2, r0, #5, #3
   21f50:	and	r3, r0, #31
   21f54:	ldr	r2, [r1, r2, lsl #2]
   21f58:	mov	r1, #1
   21f5c:	tst	r2, r1, lsl r3
   21f60:	moveq	r1, #0
   21f64:	cmpeq	r0, #10
   21f68:	beq	222ac <__assert_fail@plt+0x10b4c>
   21f6c:	str	r1, [r4, #60]	; 0x3c
   21f70:	b	21bdc <__assert_fail@plt+0x1047c>
   21f74:	ldr	r1, [r4, #4]
   21f78:	ldr	r2, [r4, #68]	; 0x44
   21f7c:	ldrb	r0, [r1, r0]
   21f80:	ubfx	r1, r0, #5, #3
   21f84:	and	r3, r0, #31
   21f88:	ldr	r2, [r2, r1, lsl #2]
   21f8c:	mov	r1, #1
   21f90:	tst	r2, r1, lsl r3
   21f94:	moveq	r1, #0
   21f98:	cmpeq	r0, #10
   21f9c:	bne	21fcc <__assert_fail@plt+0x1086c>
   21fa0:	b	21fbc <__assert_fail@plt+0x1085c>
   21fa4:	ldrb	r0, [r4, #78]	; 0x4e
   21fa8:	cmp	r0, #0
   21fac:	bne	2238c <__assert_fail@plt+0x10c2c>
   21fb0:	mov	r1, #0
   21fb4:	cmp	r6, #10
   21fb8:	bne	21fcc <__assert_fail@plt+0x1086c>
   21fbc:	ldrb	r0, [r4, #77]	; 0x4d
   21fc0:	cmp	r0, #0
   21fc4:	movwne	r0, #1
   21fc8:	lsl	r1, r0, #1
   21fcc:	str	r1, [r4, #60]	; 0x3c
   21fd0:	cmp	r7, r5
   21fd4:	ldr	r2, [r4, #28]
   21fd8:	bne	22068 <__assert_fail@plt+0x10908>
   21fdc:	cmp	r2, r5
   21fe0:	ble	22068 <__assert_fail@plt+0x10908>
   21fe4:	ldr	r0, [r4, #12]
   21fe8:	ldr	r0, [r0, r5, lsl #2]
   21fec:	cmp	r0, r5
   21ff0:	bne	22068 <__assert_fail@plt+0x10908>
   21ff4:	ldr	r0, [r4, #8]
   21ff8:	sub	r2, r2, r5
   21ffc:	lsl	r2, r2, #2
   22000:	add	r1, r0, r5, lsl #2
   22004:	bl	11454 <memmove@plt>
   22008:	ldr	r2, [r4, #28]
   2200c:	ldr	r0, [r4, #4]
   22010:	add	r1, r0, r5
   22014:	sub	r2, r2, r5
   22018:	bl	11454 <memmove@plt>
   2201c:	ldr	r0, [r4, #28]
   22020:	ldr	r1, [r4, #32]
   22024:	sub	r0, r0, r5
   22028:	sub	r1, r1, r5
   2202c:	cmp	r0, #1
   22030:	str	r0, [r4, #28]
   22034:	str	r1, [r4, #32]
   22038:	blt	21bdc <__assert_fail@plt+0x1047c>
   2203c:	ldr	r0, [r4, #12]
   22040:	mov	r2, #0
   22044:	add	r1, r0, r5, lsl #2
   22048:	ldr	r3, [r1, r2, lsl #2]
   2204c:	sub	r3, r3, r5
   22050:	str	r3, [r0, r2, lsl #2]
   22054:	add	r2, r2, #1
   22058:	ldr	r3, [r4, #28]
   2205c:	cmp	r2, r3
   22060:	blt	22048 <__assert_fail@plt+0x108e8>
   22064:	b	21bdc <__assert_fail@plt+0x1047c>
   22068:	mov	r0, #0
   2206c:	strb	r0, [r4, #76]	; 0x4c
   22070:	sub	r0, r5, r9
   22074:	ldr	r1, [r4, #44]	; 0x2c
   22078:	ldr	r3, [r4, #52]	; 0x34
   2207c:	add	r1, r0, r1
   22080:	add	r0, r0, r3
   22084:	str	r1, [r4, #48]	; 0x30
   22088:	sub	r1, r7, #1
   2208c:	str	r0, [r4, #56]	; 0x38
   22090:	add	r0, r1, #1
   22094:	cmp	r0, #1
   22098:	blt	220b0 <__assert_fail@plt+0x10950>
   2209c:	ldr	r3, [r4, #12]
   220a0:	ldr	r3, [r3, r1, lsl #2]
   220a4:	sub	r1, r1, #1
   220a8:	cmp	r3, r5
   220ac:	beq	22090 <__assert_fail@plt+0x10930>
   220b0:	cmp	r0, r2
   220b4:	bge	220d8 <__assert_fail@plt+0x10978>
   220b8:	ldr	r1, [r4, #8]
   220bc:	ldr	r3, [r1, r0, lsl #2]
   220c0:	cmn	r3, #1
   220c4:	bne	220d8 <__assert_fail@plt+0x10978>
   220c8:	add	r0, r0, #1
   220cc:	cmp	r2, r0
   220d0:	bne	220bc <__assert_fail@plt+0x1095c>
   220d4:	b	220e0 <__assert_fail@plt+0x10980>
   220d8:	cmp	r0, r2
   220dc:	bne	220f0 <__assert_fail@plt+0x10990>
   220e0:	mov	r0, #0
   220e4:	str	r0, [r4, #28]
   220e8:	str	r0, [r4, #32]
   220ec:	b	21bdc <__assert_fail@plt+0x1047c>
   220f0:	ldr	r1, [r4, #12]
   220f4:	ldr	r0, [r1, r0, lsl #2]
   220f8:	subs	r2, r0, r5
   220fc:	str	r2, [r4, #28]
   22100:	beq	222a0 <__assert_fail@plt+0x10b40>
   22104:	cmp	r2, #1
   22108:	blt	2212c <__assert_fail@plt+0x109cc>
   2210c:	ldr	r0, [r4, #8]
   22110:	mov	r1, #0
   22114:	mvn	r3, #0
   22118:	str	r3, [r0, r1, lsl #2]
   2211c:	add	r1, r1, #1
   22120:	ldr	r2, [r4, #28]
   22124:	cmp	r1, r2
   22128:	blt	22118 <__assert_fail@plt+0x109b8>
   2212c:	ldr	r0, [r4, #4]
   22130:	mov	r1, #255	; 0xff
   22134:	bl	11670 <memset@plt>
   22138:	ldr	r0, [r4, #28]
   2213c:	str	r0, [r4, #32]
   22140:	b	21bdc <__assert_fail@plt+0x1047c>
   22144:	mov	r0, r6
   22148:	bl	1164c <iswalnum@plt>
   2214c:	mov	r1, #1
   22150:	cmp	r6, #95	; 0x5f
   22154:	beq	21b90 <__assert_fail@plt+0x10430>
   22158:	cmp	r0, #0
   2215c:	beq	21b74 <__assert_fail@plt+0x10414>
   22160:	b	21b90 <__assert_fail@plt+0x10430>
   22164:	sub	r0, r8, r9
   22168:	str	r0, [r4, #28]
   2216c:	b	221a0 <__assert_fail@plt+0x10a40>
   22170:	ldr	lr, [sp]
   22174:	sub	r0, r8, r9
   22178:	cmn	r7, #1
   2217c:	str	r0, [r4, #28]
   22180:	beq	221a0 <__assert_fail@plt+0x10a40>
   22184:	ldrb	r0, [r4, #78]	; 0x4e
   22188:	cmp	r0, #0
   2218c:	bne	223ac <__assert_fail@plt+0x10c4c>
   22190:	mov	r1, #0
   22194:	cmp	r7, #10
   22198:	beq	222d8 <__assert_fail@plt+0x10b78>
   2219c:	b	222e8 <__assert_fail@plt+0x10b88>
   221a0:	cmp	lr, #0
   221a4:	ble	221e0 <__assert_fail@plt+0x10a80>
   221a8:	ldr	r1, [r4, #48]	; 0x30
   221ac:	sub	r0, lr, #1
   221b0:	cmp	r1, r0
   221b4:	beq	22380 <__assert_fail@plt+0x10c20>
   221b8:	ldr	r1, [r4, #80]	; 0x50
   221bc:	cmp	r1, #2
   221c0:	blt	22260 <__assert_fail@plt+0x10b00>
   221c4:	ldr	r1, [r4, #8]
   221c8:	ldr	r6, [r1, r0, lsl #2]
   221cc:	cmn	r6, #1
   221d0:	bne	222c0 <__assert_fail@plt+0x10b60>
   221d4:	sub	r0, r0, #1
   221d8:	cmn	r0, #1
   221dc:	bne	221c8 <__assert_fail@plt+0x10a68>
   221e0:	ldr	r1, [r4, #60]	; 0x3c
   221e4:	b	222e8 <__assert_fail@plt+0x10b88>
   221e8:	ldr	r3, [r4, #64]	; 0x40
   221ec:	cmp	r3, #0
   221f0:	beq	21c58 <__assert_fail@plt+0x104f8>
   221f4:	ldr	r1, [r4, #36]	; 0x24
   221f8:	ldr	r0, [r4, #28]
   221fc:	cmp	r1, r2
   22200:	movgt	r1, r2
   22204:	cmp	r0, r1
   22208:	bge	22294 <__assert_fail@plt+0x10b34>
   2220c:	ldr	r7, [r4]
   22210:	add	r2, r0, r9
   22214:	ldr	r6, [r4, #4]
   22218:	ldrb	r2, [r7, r2]
   2221c:	ldrb	r2, [r3, r2]
   22220:	strb	r2, [r6, r0]
   22224:	add	r0, r0, #1
   22228:	cmp	r0, r1
   2222c:	bge	22294 <__assert_fail@plt+0x10b34>
   22230:	ldr	r7, [r4, #24]
   22234:	ldm	r4, {r2, r3}
   22238:	ldr	r6, [r4, #64]	; 0x40
   2223c:	add	r2, r2, r7
   22240:	ldrb	r2, [r2, r0]
   22244:	ldrb	r2, [r6, r2]
   22248:	strb	r2, [r3, r0]
   2224c:	b	22224 <__assert_fail@plt+0x10ac4>
   22250:	add	r5, r5, #1
   22254:	str	r5, [r4, #28]
   22258:	str	r5, [r4, #32]
   2225c:	b	21c58 <__assert_fail@plt+0x104f8>
   22260:	ldr	r1, [r4, #4]
   22264:	ldr	r2, [r4, #68]	; 0x44
   22268:	ldrb	r0, [r1, r0]
   2226c:	ubfx	r1, r0, #5, #3
   22270:	and	r3, r0, #31
   22274:	ldr	r2, [r2, r1, lsl #2]
   22278:	mov	r1, #1
   2227c:	tst	r2, r1, lsl r3
   22280:	bne	222e8 <__assert_fail@plt+0x10b88>
   22284:	mov	r1, #0
   22288:	cmp	r0, #10
   2228c:	beq	222d8 <__assert_fail@plt+0x10b78>
   22290:	b	222e8 <__assert_fail@plt+0x10b88>
   22294:	str	r0, [r4, #28]
   22298:	str	r0, [r4, #32]
   2229c:	b	21c58 <__assert_fail@plt+0x104f8>
   222a0:	mov	r0, #0
   222a4:	str	r0, [r4, #32]
   222a8:	b	21bdc <__assert_fail@plt+0x1047c>
   222ac:	ldrb	r0, [r4, #77]	; 0x4d
   222b0:	cmp	r0, #0
   222b4:	movwne	r0, #1
   222b8:	lsl	r1, r0, #1
   222bc:	b	21f6c <__assert_fail@plt+0x1080c>
   222c0:	ldrb	r0, [r4, #78]	; 0x4e
   222c4:	cmp	r0, #0
   222c8:	bne	22418 <__assert_fail@plt+0x10cb8>
   222cc:	mov	r1, #0
   222d0:	cmp	r6, #10
   222d4:	bne	222e8 <__assert_fail@plt+0x10b88>
   222d8:	ldrb	r0, [r4, #77]	; 0x4d
   222dc:	cmp	r0, #0
   222e0:	movwne	r0, #1
   222e4:	lsl	r1, r0, #1
   222e8:	str	r1, [r4, #60]	; 0x3c
   222ec:	mov	r0, #0
   222f0:	ldr	r2, [r4, #28]
   222f4:	cmp	r2, #0
   222f8:	bne	22338 <__assert_fail@plt+0x10bd8>
   222fc:	str	r0, [r4, #32]
   22300:	b	21bdc <__assert_fail@plt+0x1047c>
   22304:	mov	r2, #0
   22308:	strb	r2, [r4, #76]	; 0x4c
   2230c:	sub	r2, r5, r9
   22310:	ldr	r3, [r4, #44]	; 0x2c
   22314:	ldr	r7, [r4, #52]	; 0x34
   22318:	add	r3, r2, r3
   2231c:	add	r2, r2, r7
   22320:	str	r3, [r4, #48]	; 0x30
   22324:	str	r2, [r4, #56]	; 0x38
   22328:	b	21c88 <__assert_fail@plt+0x10528>
   2232c:	and	r0, r6, #2
   22330:	eor	r1, r0, #10
   22334:	b	21fcc <__assert_fail@plt+0x1086c>
   22338:	cmp	r2, #1
   2233c:	blt	22360 <__assert_fail@plt+0x10c00>
   22340:	ldr	r0, [r4, #8]
   22344:	mov	r1, #0
   22348:	mvn	r3, #0
   2234c:	str	r3, [r0, r1, lsl #2]
   22350:	add	r1, r1, #1
   22354:	ldr	r2, [r4, #28]
   22358:	cmp	r1, r2
   2235c:	blt	2234c <__assert_fail@plt+0x10bec>
   22360:	ldrb	r0, [r4, #75]	; 0x4b
   22364:	cmp	r0, #0
   22368:	beq	223d0 <__assert_fail@plt+0x10c70>
   2236c:	ldr	r0, [r4, #4]
   22370:	mov	r1, #255	; 0xff
   22374:	bl	11670 <memset@plt>
   22378:	ldr	r0, [r4, #28]
   2237c:	b	222fc <__assert_fail@plt+0x10b9c>
   22380:	and	r0, r6, #2
   22384:	eor	r1, r0, #10
   22388:	b	222e8 <__assert_fail@plt+0x10b88>
   2238c:	mov	r0, r6
   22390:	bl	1164c <iswalnum@plt>
   22394:	mov	r1, #1
   22398:	cmp	r6, #95	; 0x5f
   2239c:	beq	21fcc <__assert_fail@plt+0x1086c>
   223a0:	cmp	r0, #0
   223a4:	beq	21fb0 <__assert_fail@plt+0x10850>
   223a8:	b	21fcc <__assert_fail@plt+0x1086c>
   223ac:	mov	r0, r7
   223b0:	bl	1164c <iswalnum@plt>
   223b4:	mov	r1, #1
   223b8:	cmp	r7, #95	; 0x5f
   223bc:	beq	222e8 <__assert_fail@plt+0x10b88>
   223c0:	cmp	r0, #0
   223c4:	mov	r2, r7
   223c8:	beq	22190 <__assert_fail@plt+0x10a30>
   223cc:	b	222e8 <__assert_fail@plt+0x10b88>
   223d0:	mov	r0, r2
   223d4:	str	r2, [r4, #32]
   223d8:	b	21bdc <__assert_fail@plt+0x1047c>
   223dc:	cmp	r2, #1
   223e0:	blt	22438 <__assert_fail@plt+0x10cd8>
   223e4:	cmp	r2, #6
   223e8:	mov	r1, r2
   223ec:	movge	r1, #6
   223f0:	sub	ip, r1, #1
   223f4:	add	r1, sp, #14
   223f8:	ldrb	r3, [r7, ip]
   223fc:	cmp	ip, #0
   22400:	ldrb	r3, [r0, r3]
   22404:	strb	r3, [r1, ip]
   22408:	sub	r3, ip, #1
   2240c:	mov	ip, r3
   22410:	bgt	223f8 <__assert_fail@plt+0x10c98>
   22414:	b	21d04 <__assert_fail@plt+0x105a4>
   22418:	mov	r0, r6
   2241c:	bl	1164c <iswalnum@plt>
   22420:	mov	r1, #1
   22424:	cmp	r6, #95	; 0x5f
   22428:	beq	222e8 <__assert_fail@plt+0x10b88>
   2242c:	cmp	r0, #0
   22430:	beq	222cc <__assert_fail@plt+0x10b6c>
   22434:	b	222e8 <__assert_fail@plt+0x10b88>
   22438:	add	r1, sp, #14
   2243c:	b	21d04 <__assert_fail@plt+0x105a4>
   22440:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22444:	add	fp, sp, #24
   22448:	mov	r8, r0
   2244c:	ldr	r0, [r0, #124]	; 0x7c
   22450:	cmp	r0, #1
   22454:	blt	224e0 <__assert_fail@plt+0x10d80>
   22458:	mov	r7, #0
   2245c:	b	22478 <__assert_fail@plt+0x10d18>
   22460:	mov	r0, r5
   22464:	bl	141b8 <__assert_fail@plt+0x2a58>
   22468:	ldr	r0, [r8, #124]	; 0x7c
   2246c:	add	r7, r7, #1
   22470:	cmp	r7, r0
   22474:	bge	224e0 <__assert_fail@plt+0x10d80>
   22478:	ldr	r0, [r8, #132]	; 0x84
   2247c:	ldr	r5, [r0, r7, lsl #2]
   22480:	ldr	r0, [r5, #16]
   22484:	cmp	r0, #1
   22488:	blt	224b8 <__assert_fail@plt+0x10d58>
   2248c:	mov	r4, #0
   22490:	ldr	r0, [r5, #20]
   22494:	ldr	r6, [r0, r4, lsl #2]
   22498:	ldr	r0, [r6, #16]
   2249c:	bl	141b8 <__assert_fail@plt+0x2a58>
   224a0:	mov	r0, r6
   224a4:	bl	141b8 <__assert_fail@plt+0x2a58>
   224a8:	ldr	r0, [r5, #16]
   224ac:	add	r4, r4, #1
   224b0:	cmp	r4, r0
   224b4:	blt	22490 <__assert_fail@plt+0x10d30>
   224b8:	ldr	r0, [r5, #20]
   224bc:	bl	141b8 <__assert_fail@plt+0x2a58>
   224c0:	ldr	r0, [r5, #8]
   224c4:	cmp	r0, #0
   224c8:	beq	22460 <__assert_fail@plt+0x10d00>
   224cc:	ldr	r0, [r0, #8]
   224d0:	bl	141b8 <__assert_fail@plt+0x2a58>
   224d4:	ldr	r0, [r5, #8]
   224d8:	bl	141b8 <__assert_fail@plt+0x2a58>
   224dc:	b	22460 <__assert_fail@plt+0x10d00>
   224e0:	mov	r0, #0
   224e4:	str	r0, [r8, #108]	; 0x6c
   224e8:	str	r0, [r8, #124]	; 0x7c
   224ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   224f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f4:	add	fp, sp, #28
   224f8:	sub	sp, sp, #4
   224fc:	mov	sl, r0
   22500:	ldr	r0, [r1, #4]
   22504:	cmp	r0, #1
   22508:	blt	225d8 <__assert_fail@plt+0x10e78>
   2250c:	ldr	r7, [sl, #84]	; 0x54
   22510:	mov	r8, r2
   22514:	mov	r5, r1
   22518:	mov	r4, #0
   2251c:	b	2252c <__assert_fail@plt+0x10dcc>
   22520:	add	r4, r4, #1
   22524:	cmp	r4, r0
   22528:	bge	225d8 <__assert_fail@plt+0x10e78>
   2252c:	ldr	r1, [r5, #8]
   22530:	ldr	r6, [r1, r4, lsl #2]
   22534:	ldr	r1, [r7]
   22538:	add	r2, r1, r6, lsl #3
   2253c:	ldrb	r2, [r2, #4]
   22540:	cmp	r2, #8
   22544:	bne	22520 <__assert_fail@plt+0x10dc0>
   22548:	ldr	r1, [r1, r6, lsl #3]
   2254c:	cmp	r1, #31
   22550:	bgt	22520 <__assert_fail@plt+0x10dc0>
   22554:	ldr	r2, [r7, #80]	; 0x50
   22558:	mov	r3, #1
   2255c:	tst	r2, r3, lsl r1
   22560:	beq	22520 <__assert_fail@plt+0x10dc0>
   22564:	ldr	r0, [sl, #124]	; 0x7c
   22568:	ldr	r9, [sl, #128]	; 0x80
   2256c:	cmp	r0, r9
   22570:	beq	225b4 <__assert_fail@plt+0x10e54>
   22574:	mov	r0, #1
   22578:	mov	r1, #24
   2257c:	bl	2b20c <__assert_fail@plt+0x19aac>
   22580:	ldr	r1, [sl, #124]	; 0x7c
   22584:	ldr	r2, [sl, #132]	; 0x84
   22588:	str	r0, [r2, r1, lsl #2]
   2258c:	ldr	r0, [sl, #132]	; 0x84
   22590:	ldr	r0, [r0, r1, lsl #2]
   22594:	cmp	r0, #0
   22598:	beq	225e4 <__assert_fail@plt+0x10e84>
   2259c:	add	r1, r1, #1
   225a0:	str	r6, [r0, #4]
   225a4:	str	r1, [sl, #124]	; 0x7c
   225a8:	str	r8, [r0]
   225ac:	ldr	r0, [r5, #4]
   225b0:	b	22520 <__assert_fail@plt+0x10dc0>
   225b4:	ldr	r0, [sl, #132]	; 0x84
   225b8:	lsl	r1, r9, #3
   225bc:	bl	2b290 <__assert_fail@plt+0x19b30>
   225c0:	cmp	r0, #0
   225c4:	beq	225e4 <__assert_fail@plt+0x10e84>
   225c8:	lsl	r1, r9, #1
   225cc:	str	r1, [sl, #128]	; 0x80
   225d0:	str	r0, [sl, #132]	; 0x84
   225d4:	b	22574 <__assert_fail@plt+0x10e14>
   225d8:	mov	r0, #0
   225dc:	sub	sp, fp, #28
   225e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225e4:	mov	r0, #12
   225e8:	sub	sp, fp, #28
   225ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225f4:	add	fp, sp, #28
   225f8:	sub	sp, sp, #76	; 0x4c
   225fc:	mov	ip, r0
   22600:	ldr	r0, [r1, #4]
   22604:	cmp	r0, #1
   22608:	blt	22f34 <__assert_fail@plt+0x117d4>
   2260c:	ldr	r2, [ip, #84]	; 0x54
   22610:	ldr	r0, [ip, #40]	; 0x28
   22614:	mov	r3, #0
   22618:	str	ip, [sp, #44]	; 0x2c
   2261c:	str	r1, [sp, #12]
   22620:	str	r0, [sp, #52]	; 0x34
   22624:	str	r2, [sp, #24]
   22628:	b	22648 <__assert_fail@plt+0x10ee8>
   2262c:	ldr	r1, [sp, #12]
   22630:	ldr	r3, [sp, #16]
   22634:	ldr	r2, [sp, #24]
   22638:	ldr	r0, [r1, #4]
   2263c:	add	r3, r3, #1
   22640:	cmp	r3, r0
   22644:	bge	22f34 <__assert_fail@plt+0x117d4>
   22648:	ldr	r0, [r1, #8]
   2264c:	str	r3, [sp, #16]
   22650:	ldr	r3, [r0, r3, lsl #2]
   22654:	ldr	r0, [r2]
   22658:	add	r4, r0, r3, lsl #3
   2265c:	mov	r1, r3
   22660:	str	r3, [sp, #48]	; 0x30
   22664:	ldr	r5, [r4, #4]!
   22668:	uxtb	r0, r5
   2266c:	cmp	r0, #4
   22670:	bne	2262c <__assert_fail@plt+0x10ecc>
   22674:	movw	r0, #65280	; 0xff00
   22678:	movt	r0, #3
   2267c:	tst	r5, r0
   22680:	beq	22780 <__assert_fail@plt+0x11020>
   22684:	ldr	r1, [sp, #52]	; 0x34
   22688:	cmn	r1, #1
   2268c:	ble	226c8 <__assert_fail@plt+0x10f68>
   22690:	ldr	r0, [ip, #48]	; 0x30
   22694:	cmp	r0, r1
   22698:	beq	22ef4 <__assert_fail@plt+0x11794>
   2269c:	ldr	r0, [ip, #80]	; 0x50
   226a0:	cmp	r0, #2
   226a4:	blt	226d0 <__assert_fail@plt+0x10f70>
   226a8:	ldr	r0, [ip, #8]
   226ac:	ldr	r1, [sp, #52]	; 0x34
   226b0:	ldr	r6, [r0, r1, lsl #2]
   226b4:	cmn	r6, #1
   226b8:	bne	2270c <__assert_fail@plt+0x10fac>
   226bc:	sub	r1, r1, #1
   226c0:	cmn	r1, #1
   226c4:	bne	226b0 <__assert_fail@plt+0x10f50>
   226c8:	ldr	r1, [ip, #60]	; 0x3c
   226cc:	b	22734 <__assert_fail@plt+0x10fd4>
   226d0:	ldr	r0, [ip, #4]
   226d4:	ldr	r2, [sp, #52]	; 0x34
   226d8:	ldr	r1, [ip, #68]	; 0x44
   226dc:	ldrb	r0, [r0, r2]
   226e0:	ubfx	r2, r0, #5, #3
   226e4:	and	r7, r0, #31
   226e8:	ldr	r3, [r1, r2, lsl #2]
   226ec:	mov	r1, #1
   226f0:	mov	r2, #0
   226f4:	tst	r3, r1, lsl r7
   226f8:	bne	2274c <__assert_fail@plt+0x10fec>
   226fc:	mov	r1, #0
   22700:	cmp	r0, #10
   22704:	beq	22724 <__assert_fail@plt+0x10fc4>
   22708:	b	22734 <__assert_fail@plt+0x10fd4>
   2270c:	ldrb	r0, [ip, #78]	; 0x4e
   22710:	cmp	r0, #0
   22714:	bne	22f04 <__assert_fail@plt+0x117a4>
   22718:	mov	r1, #0
   2271c:	cmp	r6, #10
   22720:	bne	22734 <__assert_fail@plt+0x10fd4>
   22724:	ldrb	r0, [ip, #77]	; 0x4d
   22728:	cmp	r0, #0
   2272c:	movwne	r0, #1
   22730:	lsl	r1, r0, #1
   22734:	and	r0, r1, #1
   22738:	tst	r5, #1024	; 0x400
   2273c:	eor	r2, r0, #1
   22740:	beq	2274c <__assert_fail@plt+0x10fec>
   22744:	cmp	r0, #0
   22748:	beq	2262c <__assert_fail@plt+0x10ecc>
   2274c:	ldr	r0, [r4]
   22750:	cmp	r2, #0
   22754:	bne	22760 <__assert_fail@plt+0x11000>
   22758:	ands	r2, r0, #2048	; 0x800
   2275c:	bne	2262c <__assert_fail@plt+0x10ecc>
   22760:	tst	r1, #2
   22764:	bne	22770 <__assert_fail@plt+0x11010>
   22768:	ands	r2, r0, #8192	; 0x2000
   2276c:	bne	2262c <__assert_fail@plt+0x10ecc>
   22770:	tst	r1, #8
   22774:	bne	22780 <__assert_fail@plt+0x11020>
   22778:	ands	r0, r0, #32768	; 0x8000
   2277c:	bne	2262c <__assert_fail@plt+0x10ecc>
   22780:	ldr	r2, [ip, #108]	; 0x6c
   22784:	ldr	r0, [ip, #84]	; 0x54
   22788:	ldr	r9, [ip, #4]
   2278c:	cmp	r2, #1
   22790:	str	r0, [sp, #36]	; 0x24
   22794:	str	r2, [sp, #20]
   22798:	blt	227e0 <__assert_fail@plt+0x11080>
   2279c:	ldr	r4, [sp, #52]	; 0x34
   227a0:	ldr	r1, [ip, #116]	; 0x74
   227a4:	mov	r0, #0
   227a8:	mov	r5, #1
   227ac:	mov	lr, r4
   227b0:	add	r3, r2, r0
   227b4:	add	r3, r3, r3, lsr #31
   227b8:	asr	r7, r3, #1
   227bc:	add	r6, r7, r7, lsl #1
   227c0:	add	r6, r1, r6, lsl #3
   227c4:	ldr	r6, [r6, #4]
   227c8:	cmp	r6, lr
   227cc:	addlt	r0, r5, r3, asr #1
   227d0:	movge	r2, r7
   227d4:	cmp	r0, r2
   227d8:	blt	227b0 <__assert_fail@plt+0x11050>
   227dc:	b	227ec <__assert_fail@plt+0x1108c>
   227e0:	ldr	r4, [sp, #52]	; 0x34
   227e4:	mov	r0, #0
   227e8:	mov	lr, r4
   227ec:	ldr	r1, [sp, #20]
   227f0:	cmp	r0, r1
   227f4:	bge	22838 <__assert_fail@plt+0x110d8>
   227f8:	cmn	r0, #1
   227fc:	beq	22838 <__assert_fail@plt+0x110d8>
   22800:	ldr	r1, [ip, #116]	; 0x74
   22804:	add	r0, r0, r0, lsl #1
   22808:	add	r0, r1, r0, lsl #3
   2280c:	ldr	r1, [r0, #4]
   22810:	cmp	r1, lr
   22814:	bne	22838 <__assert_fail@plt+0x110d8>
   22818:	ldr	r1, [r0]
   2281c:	ldr	r2, [sp, #48]	; 0x30
   22820:	cmp	r1, r2
   22824:	beq	22c40 <__assert_fail@plt+0x114e0>
   22828:	ldrb	r1, [r0, #20]
   2282c:	add	r0, r0, #24
   22830:	cmp	r1, #0
   22834:	bne	22818 <__assert_fail@plt+0x110b8>
   22838:	ldr	r0, [ip, #124]	; 0x7c
   2283c:	cmp	r0, #1
   22840:	ldr	r0, [sp, #20]
   22844:	blt	22c44 <__assert_fail@plt+0x114e4>
   22848:	ldr	r0, [sp, #36]	; 0x24
   2284c:	ldr	r1, [sp, #48]	; 0x30
   22850:	mov	r3, #0
   22854:	ldr	r0, [r0]
   22858:	ldr	r2, [r0, r1, lsl #3]
   2285c:	str	r2, [sp, #32]
   22860:	ldr	r1, [ip, #132]	; 0x84
   22864:	str	r3, [sp, #28]
   22868:	ldr	r6, [r1, r3, lsl #2]
   2286c:	ldr	r1, [r6, #4]
   22870:	ldr	r0, [r0, r1, lsl #3]
   22874:	cmp	r0, r2
   22878:	bne	22c14 <__assert_fail@plt+0x114b4>
   2287c:	ldr	r0, [r6, #16]
   22880:	ldr	r1, [r6]
   22884:	mov	r8, #0
   22888:	mov	r7, lr
   2288c:	str	r6, [sp, #40]	; 0x28
   22890:	cmp	r0, #1
   22894:	blt	229cc <__assert_fail@plt+0x1126c>
   22898:	mov	r5, r1
   2289c:	ldr	r1, [r6, #20]
   228a0:	ldr	r4, [r1, r8, lsl #2]
   228a4:	ldr	r1, [r4, #4]
   228a8:	sub	sl, r1, r5
   228ac:	str	r1, [fp, #-48]	; 0xffffffd0
   228b0:	cmp	sl, #1
   228b4:	blt	228e8 <__assert_fail@plt+0x11188>
   228b8:	ldr	r1, [ip, #28]
   228bc:	add	r3, sl, r7
   228c0:	cmp	r3, r1
   228c4:	bgt	2293c <__assert_fail@plt+0x111dc>
   228c8:	add	r0, r9, r7
   228cc:	add	r1, r9, r5
   228d0:	mov	r2, sl
   228d4:	bl	1161c <bcmp@plt>
   228d8:	ldr	ip, [sp, #44]	; 0x2c
   228dc:	ldr	lr, [sp, #52]	; 0x34
   228e0:	cmp	r0, #0
   228e4:	bne	229c4 <__assert_fail@plt+0x11264>
   228e8:	ldr	r3, [sp, #48]	; 0x30
   228ec:	mov	r2, r4
   228f0:	mov	r0, ip
   228f4:	mov	r1, r6
   228f8:	str	lr, [sp]
   228fc:	mov	r4, ip
   22900:	bl	23604 <__assert_fail@plt+0x11ea4>
   22904:	cmp	r0, #1
   22908:	bhi	22f48 <__assert_fail@plt+0x117e8>
   2290c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22910:	ldr	r0, [r6, #16]
   22914:	ldr	r9, [r4, #4]
   22918:	mov	ip, r4
   2291c:	ldr	r4, [sp, #52]	; 0x34
   22920:	add	r8, r8, #1
   22924:	add	r7, sl, r7
   22928:	cmp	r8, r0
   2292c:	mov	r5, r1
   22930:	mov	lr, r4
   22934:	blt	2289c <__assert_fail@plt+0x1113c>
   22938:	b	229cc <__assert_fail@plt+0x1126c>
   2293c:	ldr	r2, [ip, #48]	; 0x30
   22940:	cmp	r3, r2
   22944:	bgt	22c08 <__assert_fail@plt+0x114a8>
   22948:	ldr	r0, [ip, #36]	; 0x24
   2294c:	ldr	r6, [ip, #104]	; 0x68
   22950:	cmp	r0, r3
   22954:	cmple	r0, r2
   22958:	blt	22968 <__assert_fail@plt+0x11208>
   2295c:	cmp	r1, r3
   22960:	cmple	r1, r2
   22964:	bge	22988 <__assert_fail@plt+0x11228>
   22968:	add	r1, r3, #1
   2296c:	mov	r0, ip
   22970:	mov	r9, r3
   22974:	bl	22f70 <__assert_fail@plt+0x11810>
   22978:	ldr	ip, [sp, #44]	; 0x2c
   2297c:	mov	r3, r9
   22980:	cmp	r0, #0
   22984:	bne	22f48 <__assert_fail@plt+0x117e8>
   22988:	cmp	r3, r6
   2298c:	ble	229b8 <__assert_fail@plt+0x11258>
   22990:	sub	r0, r3, r6
   22994:	mov	r1, #0
   22998:	lsl	r2, r0, #2
   2299c:	ldr	r0, [ip, #100]	; 0x64
   229a0:	add	r0, r0, r6, lsl #2
   229a4:	mov	r6, r3
   229a8:	add	r0, r0, #4
   229ac:	bl	11670 <memset@plt>
   229b0:	ldr	ip, [sp, #44]	; 0x2c
   229b4:	str	r6, [ip, #104]	; 0x68
   229b8:	ldr	r9, [ip, #4]
   229bc:	ldr	r6, [sp, #40]	; 0x28
   229c0:	b	228c8 <__assert_fail@plt+0x11168>
   229c4:	ldr	r0, [r6, #16]
   229c8:	mov	r1, r5
   229cc:	cmp	r8, r0
   229d0:	blt	22c14 <__assert_fail@plt+0x114b4>
   229d4:	cmp	r8, #0
   229d8:	addne	r1, r1, #1
   229dc:	cmp	r1, lr
   229e0:	ble	229fc <__assert_fail@plt+0x1129c>
   229e4:	b	22c14 <__assert_fail@plt+0x114b4>
   229e8:	ldr	r6, [sp, #40]	; 0x28
   229ec:	add	r1, sl, #1
   229f0:	cmp	sl, lr
   229f4:	mov	r9, r8
   229f8:	bge	22c14 <__assert_fail@plt+0x114b4>
   229fc:	ldr	r0, [r6]
   22a00:	mov	sl, r1
   22a04:	cmp	r1, r0
   22a08:	ble	22a34 <__assert_fail@plt+0x112d4>
   22a0c:	ldr	r0, [ip, #28]
   22a10:	cmp	r7, r0
   22a14:	bge	22b98 <__assert_fail@plt+0x11438>
   22a18:	add	r5, r7, #1
   22a1c:	add	r1, sl, r9
   22a20:	ldrb	r0, [r9, r7]
   22a24:	ldrb	r1, [r1, #-1]
   22a28:	cmp	r0, r1
   22a2c:	beq	22a38 <__assert_fail@plt+0x112d8>
   22a30:	b	22c14 <__assert_fail@plt+0x114b4>
   22a34:	mov	r5, r7
   22a38:	ldr	r0, [ip, #100]	; 0x64
   22a3c:	mov	r8, r9
   22a40:	mov	r7, r5
   22a44:	ldr	r2, [r0, sl, lsl #2]
   22a48:	cmp	r2, #0
   22a4c:	beq	229e8 <__assert_fail@plt+0x11288>
   22a50:	ldr	r0, [r2, #8]
   22a54:	cmp	r0, #1
   22a58:	blt	229e8 <__assert_fail@plt+0x11288>
   22a5c:	ldr	r1, [sp, #36]	; 0x24
   22a60:	ldr	r2, [r2, #12]
   22a64:	ldr	r4, [sp, #32]
   22a68:	ldr	r1, [r1]
   22a6c:	b	22a7c <__assert_fail@plt+0x1131c>
   22a70:	add	r2, r2, #4
   22a74:	subs	r0, r0, #1
   22a78:	beq	229e8 <__assert_fail@plt+0x11288>
   22a7c:	ldr	r5, [r2]
   22a80:	add	r3, r1, r5, lsl #3
   22a84:	ldrb	r3, [r3, #4]
   22a88:	cmp	r3, #9
   22a8c:	bne	22a70 <__assert_fail@plt+0x11310>
   22a90:	ldr	r3, [r1, r5, lsl #3]
   22a94:	cmp	r3, r4
   22a98:	bne	22a70 <__assert_fail@plt+0x11310>
   22a9c:	cmn	r5, #1
   22aa0:	beq	229e8 <__assert_fail@plt+0x11288>
   22aa4:	ldr	r1, [r6, #8]
   22aa8:	mov	r4, lr
   22aac:	str	r7, [fp, #-48]	; 0xffffffd0
   22ab0:	cmp	r1, #0
   22ab4:	bne	22ae4 <__assert_fail@plt+0x11384>
   22ab8:	ldr	r0, [r6]
   22abc:	mov	r9, #12
   22ac0:	sub	r0, sl, r0
   22ac4:	add	r1, r0, #1
   22ac8:	mov	r0, #12
   22acc:	bl	2b20c <__assert_fail@plt+0x19aac>
   22ad0:	ldr	ip, [sp, #44]	; 0x2c
   22ad4:	mov	r1, r0
   22ad8:	cmp	r0, #0
   22adc:	str	r0, [r6, #8]
   22ae0:	beq	22f38 <__assert_fail@plt+0x117d8>
   22ae4:	ldr	r3, [r6]
   22ae8:	ldr	r2, [r6, #4]
   22aec:	mov	r0, #9
   22af0:	stm	sp, {r5, sl}
   22af4:	str	r0, [sp, #8]
   22af8:	mov	r0, ip
   22afc:	bl	237cc <__assert_fail@plt+0x1206c>
   22b00:	ldr	ip, [sp, #44]	; 0x2c
   22b04:	ldr	r7, [fp, #-48]	; 0xffffffd0
   22b08:	cmp	r0, #1
   22b0c:	mov	lr, r4
   22b10:	beq	229e8 <__assert_fail@plt+0x11288>
   22b14:	mov	r9, r0
   22b18:	cmp	r0, #0
   22b1c:	bne	22f38 <__assert_fail@plt+0x117d8>
   22b20:	ldr	r7, [sp, #40]	; 0x28
   22b24:	ldr	r1, [r7, #12]
   22b28:	ldr	r0, [r7, #16]
   22b2c:	cmp	r0, r1
   22b30:	beq	22be0 <__assert_fail@plt+0x11480>
   22b34:	mov	r0, #1
   22b38:	mov	r1, #20
   22b3c:	bl	2b20c <__assert_fail@plt+0x19aac>
   22b40:	cmp	r0, #0
   22b44:	beq	22f60 <__assert_fail@plt+0x11800>
   22b48:	mov	r2, r0
   22b4c:	ldr	r0, [r7, #16]
   22b50:	ldr	r1, [r7, #20]
   22b54:	ldr	r3, [sp, #48]	; 0x30
   22b58:	str	r2, [r1, r0, lsl #2]
   22b5c:	stm	r2, {r5, sl}
   22b60:	ldr	r5, [sp, #44]	; 0x2c
   22b64:	add	r0, r0, #1
   22b68:	mov	r1, r7
   22b6c:	str	r0, [r7, #16]
   22b70:	str	r4, [sp]
   22b74:	mov	r0, r5
   22b78:	bl	23604 <__assert_fail@plt+0x11ea4>
   22b7c:	cmp	r0, #1
   22b80:	bhi	22f48 <__assert_fail@plt+0x117e8>
   22b84:	ldr	r8, [r5, #4]
   22b88:	ldr	r7, [fp, #-48]	; 0xffffffd0
   22b8c:	mov	ip, r5
   22b90:	mov	lr, r4
   22b94:	b	229e8 <__assert_fail@plt+0x11288>
   22b98:	ldr	r0, [ip, #48]	; 0x30
   22b9c:	cmp	r7, r0
   22ba0:	bge	22c14 <__assert_fail@plt+0x114b4>
   22ba4:	add	r5, r7, #1
   22ba8:	mov	r0, ip
   22bac:	mov	r8, r7
   22bb0:	mov	r4, ip
   22bb4:	mov	r1, r5
   22bb8:	bl	22f70 <__assert_fail@plt+0x11810>
   22bbc:	cmp	r0, #0
   22bc0:	bne	22f48 <__assert_fail@plt+0x117e8>
   22bc4:	ldr	r9, [r4, #4]
   22bc8:	mov	ip, r4
   22bcc:	ldr	r4, [sp, #52]	; 0x34
   22bd0:	ldr	r6, [sp, #40]	; 0x28
   22bd4:	mov	r7, r8
   22bd8:	mov	lr, r4
   22bdc:	b	22a1c <__assert_fail@plt+0x112bc>
   22be0:	mov	r1, #1
   22be4:	orr	r6, r1, r0, lsl #1
   22be8:	ldr	r0, [r7, #20]
   22bec:	lsl	r1, r6, #2
   22bf0:	bl	2b290 <__assert_fail@plt+0x19b30>
   22bf4:	cmp	r0, #0
   22bf8:	beq	22f60 <__assert_fail@plt+0x11800>
   22bfc:	str	r6, [r7, #12]
   22c00:	str	r0, [r7, #20]
   22c04:	b	22b34 <__assert_fail@plt+0x113d4>
   22c08:	mov	r1, r5
   22c0c:	cmp	r8, r0
   22c10:	bge	229d4 <__assert_fail@plt+0x11274>
   22c14:	ldr	r3, [sp, #28]
   22c18:	ldr	r0, [ip, #124]	; 0x7c
   22c1c:	add	r3, r3, #1
   22c20:	cmp	r3, r0
   22c24:	bge	22c38 <__assert_fail@plt+0x114d8>
   22c28:	ldr	r0, [sp, #36]	; 0x24
   22c2c:	ldr	r2, [sp, #32]
   22c30:	ldr	r0, [r0]
   22c34:	b	22860 <__assert_fail@plt+0x11100>
   22c38:	ldr	r0, [ip, #108]	; 0x6c
   22c3c:	b	22c44 <__assert_fail@plt+0x114e4>
   22c40:	ldr	r0, [sp, #20]
   22c44:	ldr	r7, [sp, #20]
   22c48:	mov	r1, #0
   22c4c:	str	r1, [fp, #-32]	; 0xffffffe0
   22c50:	cmp	r7, r0
   22c54:	blt	22c6c <__assert_fail@plt+0x1150c>
   22c58:	b	2262c <__assert_fail@plt+0x10ecc>
   22c5c:	ldr	r0, [ip, #108]	; 0x6c
   22c60:	add	r7, r7, #1
   22c64:	cmp	r7, r0
   22c68:	bge	2262c <__assert_fail@plt+0x10ecc>
   22c6c:	ldr	r0, [ip, #116]	; 0x74
   22c70:	add	r1, r7, r7, lsl #1
   22c74:	ldr	r3, [sp, #48]	; 0x30
   22c78:	ldr	r2, [r0, r1, lsl #3]
   22c7c:	cmp	r2, r3
   22c80:	bne	22c5c <__assert_fail@plt+0x114fc>
   22c84:	add	r0, r0, r1, lsl #3
   22c88:	ldr	r2, [sp, #52]	; 0x34
   22c8c:	ldr	r1, [r0, #4]
   22c90:	cmp	r1, r2
   22c94:	bne	22c5c <__assert_fail@plt+0x114fc>
   22c98:	str	r7, [sp, #20]
   22c9c:	ldr	r4, [r0, #8]
   22ca0:	ldr	r7, [r0, #12]
   22ca4:	ldr	r0, [sp, #24]
   22ca8:	ldr	r8, [r0, #24]
   22cac:	cmp	r7, r4
   22cb0:	bne	22ccc <__assert_fail@plt+0x1156c>
   22cb4:	ldr	r1, [sp, #48]	; 0x30
   22cb8:	ldr	r0, [r0, #20]
   22cbc:	add	r1, r1, r1, lsl #1
   22cc0:	add	r0, r0, r1, lsl #2
   22cc4:	ldr	r0, [r0, #8]
   22cc8:	b	22cd8 <__assert_fail@plt+0x11578>
   22ccc:	ldr	r0, [r0, #12]
   22cd0:	ldr	r1, [sp, #48]	; 0x30
   22cd4:	add	r0, r0, r1, lsl #2
   22cd8:	ldr	r9, [r0]
   22cdc:	ldr	r0, [sp, #52]	; 0x34
   22ce0:	add	r0, r7, r0
   22ce4:	sub	r5, r0, r4
   22ce8:	cmp	r5, #0
   22cec:	ble	22d28 <__assert_fail@plt+0x115c8>
   22cf0:	ldr	r1, [ip, #48]	; 0x30
   22cf4:	sub	r0, r5, #1
   22cf8:	cmp	r1, r0
   22cfc:	beq	22eb8 <__assert_fail@plt+0x11758>
   22d00:	ldr	r1, [ip, #80]	; 0x50
   22d04:	cmp	r1, #2
   22d08:	blt	22d30 <__assert_fail@plt+0x115d0>
   22d0c:	ldr	r1, [ip, #8]
   22d10:	ldr	r6, [r1, r0, lsl #2]
   22d14:	cmn	r6, #1
   22d18:	bne	22d60 <__assert_fail@plt+0x11600>
   22d1c:	sub	r0, r0, #1
   22d20:	cmn	r0, #1
   22d24:	bne	22d10 <__assert_fail@plt+0x115b0>
   22d28:	ldr	sl, [ip, #60]	; 0x3c
   22d2c:	b	22d88 <__assert_fail@plt+0x11628>
   22d30:	ldr	r1, [ip, #4]
   22d34:	ldr	r2, [ip, #68]	; 0x44
   22d38:	mov	sl, #1
   22d3c:	ldrb	r0, [r1, r0]
   22d40:	ubfx	r1, r0, #5, #3
   22d44:	ldr	r1, [r2, r1, lsl #2]
   22d48:	and	r2, r0, #31
   22d4c:	tst	r1, sl, lsl r2
   22d50:	moveq	sl, #0
   22d54:	cmpeq	r0, #10
   22d58:	bne	22d88 <__assert_fail@plt+0x11628>
   22d5c:	b	22d78 <__assert_fail@plt+0x11618>
   22d60:	ldrb	r0, [ip, #78]	; 0x4e
   22d64:	cmp	r0, #0
   22d68:	bne	22ec8 <__assert_fail@plt+0x11768>
   22d6c:	mov	sl, #0
   22d70:	cmp	r6, #10
   22d74:	bne	22d88 <__assert_fail@plt+0x11628>
   22d78:	ldrb	r0, [ip, #77]	; 0x4d
   22d7c:	cmp	r0, #0
   22d80:	movwne	r0, #1
   22d84:	lsl	sl, r0, #1
   22d88:	ldr	r0, [ip, #100]	; 0x64
   22d8c:	ldr	r2, [sp, #52]	; 0x34
   22d90:	add	r1, r9, r9, lsl #1
   22d94:	ldr	r2, [r0, r2, lsl #2]
   22d98:	ldr	r0, [r0, r5, lsl #2]
   22d9c:	cmp	r2, #0
   22da0:	beq	22dac <__assert_fail@plt+0x1164c>
   22da4:	ldr	r2, [r2, #8]
   22da8:	b	22db0 <__assert_fail@plt+0x11650>
   22dac:	mov	r2, #0
   22db0:	add	r8, r8, r1, lsl #2
   22db4:	sub	r6, fp, #44	; 0x2c
   22db8:	cmp	r0, #0
   22dbc:	str	r2, [fp, #-48]	; 0xffffffd0
   22dc0:	beq	22e14 <__assert_fail@plt+0x116b4>
   22dc4:	ldr	r1, [r0, #40]	; 0x28
   22dc8:	mov	r0, r6
   22dcc:	mov	r2, r8
   22dd0:	bl	2337c <__assert_fail@plt+0x11c1c>
   22dd4:	cmp	r0, #0
   22dd8:	str	r0, [fp, #-32]	; 0xffffffe0
   22ddc:	bne	22f50 <__assert_fail@plt+0x117f0>
   22de0:	ldr	r1, [sp, #24]
   22de4:	sub	r0, fp, #32
   22de8:	mov	r2, r6
   22dec:	mov	r3, sl
   22df0:	bl	21458 <__assert_fail@plt+0xfcf8>
   22df4:	ldr	r6, [sp, #44]	; 0x2c
   22df8:	ldr	r1, [r6, #100]	; 0x64
   22dfc:	str	r0, [r1, r5, lsl #2]
   22e00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22e04:	bl	141b8 <__assert_fail@plt+0x2a58>
   22e08:	ldr	r0, [r6, #100]	; 0x64
   22e0c:	mov	ip, r6
   22e10:	b	22e38 <__assert_fail@plt+0x116d8>
   22e14:	ldr	r1, [sp, #24]
   22e18:	sub	r0, fp, #32
   22e1c:	mov	r2, r8
   22e20:	mov	r3, sl
   22e24:	bl	21458 <__assert_fail@plt+0xfcf8>
   22e28:	ldr	ip, [sp, #44]	; 0x2c
   22e2c:	ldr	r1, [ip, #100]	; 0x64
   22e30:	str	r0, [r1, r5, lsl #2]
   22e34:	ldr	r0, [ip, #100]	; 0x64
   22e38:	ldr	r1, [r0, r5, lsl #2]
   22e3c:	cmp	r1, #0
   22e40:	bne	22e50 <__assert_fail@plt+0x116f0>
   22e44:	ldr	r9, [fp, #-32]	; 0xffffffe0
   22e48:	cmp	r9, #0
   22e4c:	bne	22f3c <__assert_fail@plt+0x117dc>
   22e50:	cmp	r7, r4
   22e54:	ldr	r7, [sp, #20]
   22e58:	bne	22c5c <__assert_fail@plt+0x114fc>
   22e5c:	ldr	r1, [sp, #52]	; 0x34
   22e60:	ldr	r0, [r0, r1, lsl #2]
   22e64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22e68:	ldr	r0, [r0, #8]
   22e6c:	cmp	r0, r1
   22e70:	ble	22c5c <__assert_fail@plt+0x114fc>
   22e74:	ldr	r2, [sp, #52]	; 0x34
   22e78:	mov	r0, ip
   22e7c:	mov	r1, r8
   22e80:	mov	r4, ip
   22e84:	bl	224f0 <__assert_fail@plt+0x10d90>
   22e88:	cmp	r0, #0
   22e8c:	str	r0, [fp, #-32]	; 0xffffffe0
   22e90:	bne	22f68 <__assert_fail@plt+0x11808>
   22e94:	mov	r0, r4
   22e98:	mov	r1, r8
   22e9c:	bl	225f0 <__assert_fail@plt+0x10e90>
   22ea0:	ldr	r7, [sp, #20]
   22ea4:	cmp	r0, #0
   22ea8:	mov	ip, r4
   22eac:	str	r0, [fp, #-32]	; 0xffffffe0
   22eb0:	beq	22c5c <__assert_fail@plt+0x114fc>
   22eb4:	b	22f68 <__assert_fail@plt+0x11808>
   22eb8:	ldr	r0, [ip, #88]	; 0x58
   22ebc:	and	r0, r0, #2
   22ec0:	eor	sl, r0, #10
   22ec4:	b	22d88 <__assert_fail@plt+0x11628>
   22ec8:	mov	r0, r6
   22ecc:	bl	1164c <iswalnum@plt>
   22ed0:	mov	sl, #1
   22ed4:	cmp	r6, #95	; 0x5f
   22ed8:	beq	22eec <__assert_fail@plt+0x1178c>
   22edc:	ldr	ip, [sp, #44]	; 0x2c
   22ee0:	cmp	r0, #0
   22ee4:	beq	22d6c <__assert_fail@plt+0x1160c>
   22ee8:	b	22d88 <__assert_fail@plt+0x11628>
   22eec:	ldr	ip, [sp, #44]	; 0x2c
   22ef0:	b	22d88 <__assert_fail@plt+0x11628>
   22ef4:	ldr	r0, [ip, #88]	; 0x58
   22ef8:	and	r0, r0, #2
   22efc:	eor	r1, r0, #10
   22f00:	b	22734 <__assert_fail@plt+0x10fd4>
   22f04:	mov	r0, r6
   22f08:	bl	1164c <iswalnum@plt>
   22f0c:	mov	r1, #1
   22f10:	mov	r2, #0
   22f14:	cmp	r6, #95	; 0x5f
   22f18:	beq	22f2c <__assert_fail@plt+0x117cc>
   22f1c:	ldr	ip, [sp, #44]	; 0x2c
   22f20:	cmp	r0, #0
   22f24:	beq	22718 <__assert_fail@plt+0x10fb8>
   22f28:	b	2274c <__assert_fail@plt+0x10fec>
   22f2c:	ldr	ip, [sp, #44]	; 0x2c
   22f30:	b	2274c <__assert_fail@plt+0x10fec>
   22f34:	mov	r9, #0
   22f38:	str	r9, [fp, #-32]	; 0xffffffe0
   22f3c:	mov	r0, r9
   22f40:	sub	sp, fp, #28
   22f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f48:	mov	r9, r0
   22f4c:	b	22f38 <__assert_fail@plt+0x117d8>
   22f50:	mov	r9, r0
   22f54:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22f58:	bl	141b8 <__assert_fail@plt+0x2a58>
   22f5c:	b	22f3c <__assert_fail@plt+0x117dc>
   22f60:	mov	r9, #12
   22f64:	b	22f38 <__assert_fail@plt+0x117d8>
   22f68:	mov	r9, r0
   22f6c:	b	22f3c <__assert_fail@plt+0x117dc>
   22f70:	push	{r4, r5, r6, r7, fp, lr}
   22f74:	add	fp, sp, #16
   22f78:	mov	r4, r0
   22f7c:	ldr	r0, [r0, #36]	; 0x24
   22f80:	mov	r5, #12
   22f84:	cmn	r0, #-536870910	; 0xe0000002
   22f88:	bhi	23164 <__assert_fail@plt+0x11a04>
   22f8c:	ldr	r6, [r4, #48]	; 0x30
   22f90:	ldr	r2, [r4, #80]	; 0x50
   22f94:	cmp	r6, r0, lsl #1
   22f98:	lslge	r6, r0, #1
   22f9c:	cmp	r6, r1
   22fa0:	movle	r6, r1
   22fa4:	cmp	r2, #2
   22fa8:	blt	22ff0 <__assert_fail@plt+0x11890>
   22fac:	cmn	r6, #-1073741823	; 0xc0000001
   22fb0:	bhi	23164 <__assert_fail@plt+0x11a04>
   22fb4:	ldr	r0, [r4, #8]
   22fb8:	lsl	r7, r6, #2
   22fbc:	mov	r1, r7
   22fc0:	bl	2b290 <__assert_fail@plt+0x19b30>
   22fc4:	cmp	r0, #0
   22fc8:	beq	23164 <__assert_fail@plt+0x11a04>
   22fcc:	str	r0, [r4, #8]
   22fd0:	ldr	r0, [r4, #12]
   22fd4:	cmp	r0, #0
   22fd8:	beq	22ff0 <__assert_fail@plt+0x11890>
   22fdc:	mov	r1, r7
   22fe0:	bl	2b290 <__assert_fail@plt+0x19b30>
   22fe4:	cmp	r0, #0
   22fe8:	beq	23164 <__assert_fail@plt+0x11a04>
   22fec:	str	r0, [r4, #12]
   22ff0:	ldrb	r0, [r4, #75]	; 0x4b
   22ff4:	cmp	r0, #0
   22ff8:	beq	23014 <__assert_fail@plt+0x118b4>
   22ffc:	ldr	r0, [r4, #4]
   23000:	mov	r1, r6
   23004:	bl	2b290 <__assert_fail@plt+0x19b30>
   23008:	cmp	r0, #0
   2300c:	beq	23164 <__assert_fail@plt+0x11a04>
   23010:	str	r0, [r4, #4]
   23014:	str	r6, [r4, #36]	; 0x24
   23018:	ldr	r0, [r4, #100]	; 0x64
   2301c:	cmp	r0, #0
   23020:	beq	2303c <__assert_fail@plt+0x118dc>
   23024:	mov	r1, #4
   23028:	add	r1, r1, r6, lsl #2
   2302c:	bl	2b290 <__assert_fail@plt+0x19b30>
   23030:	cmp	r0, #0
   23034:	beq	23164 <__assert_fail@plt+0x11a04>
   23038:	str	r0, [r4, #100]	; 0x64
   2303c:	ldrb	r1, [r4, #72]	; 0x48
   23040:	ldr	r0, [r4, #80]	; 0x50
   23044:	cmp	r1, #0
   23048:	beq	23068 <__assert_fail@plt+0x11908>
   2304c:	cmp	r0, #2
   23050:	blt	2307c <__assert_fail@plt+0x1191c>
   23054:	mov	r0, r4
   23058:	bl	1b500 <__assert_fail@plt+0x9da0>
   2305c:	cmp	r0, #0
   23060:	beq	23160 <__assert_fail@plt+0x11a00>
   23064:	pop	{r4, r5, r6, r7, fp, pc}
   23068:	cmp	r0, #2
   2306c:	blt	230ec <__assert_fail@plt+0x1198c>
   23070:	mov	r0, r4
   23074:	bl	1be00 <__assert_fail@plt+0xa6a0>
   23078:	b	23160 <__assert_fail@plt+0x11a00>
   2307c:	ldr	r6, [r4, #36]	; 0x24
   23080:	ldr	r0, [r4, #48]	; 0x30
   23084:	ldr	r5, [r4, #28]
   23088:	cmp	r6, r0
   2308c:	movgt	r6, r0
   23090:	cmp	r5, r6
   23094:	bge	230e0 <__assert_fail@plt+0x11980>
   23098:	bl	115e0 <__ctype_toupper_loc@plt>
   2309c:	ldr	r1, [r4]
   230a0:	ldr	r3, [r4, #24]
   230a4:	ldr	r2, [r4, #64]	; 0x40
   230a8:	add	r1, r1, r3
   230ac:	cmp	r2, #0
   230b0:	ldrb	r1, [r1, r5]
   230b4:	bne	230d8 <__assert_fail@plt+0x11978>
   230b8:	ldr	r2, [r0]
   230bc:	ldr	r1, [r2, r1, lsl #2]
   230c0:	ldr	r2, [r4, #4]
   230c4:	strb	r1, [r2, r5]
   230c8:	add	r5, r5, #1
   230cc:	cmp	r5, r6
   230d0:	blt	2309c <__assert_fail@plt+0x1193c>
   230d4:	b	230e0 <__assert_fail@plt+0x11980>
   230d8:	ldrb	r1, [r2, r1]
   230dc:	b	230b8 <__assert_fail@plt+0x11958>
   230e0:	str	r5, [r4, #28]
   230e4:	str	r5, [r4, #32]
   230e8:	b	23160 <__assert_fail@plt+0x11a00>
   230ec:	ldr	r2, [r4, #64]	; 0x40
   230f0:	cmp	r2, #0
   230f4:	beq	23160 <__assert_fail@plt+0x11a00>
   230f8:	ldr	r1, [r4, #36]	; 0x24
   230fc:	ldr	r3, [r4, #48]	; 0x30
   23100:	ldr	r0, [r4, #28]
   23104:	cmp	r1, r3
   23108:	movgt	r1, r3
   2310c:	cmp	r0, r1
   23110:	bge	23158 <__assert_fail@plt+0x119f8>
   23114:	ldr	r6, [r4, #24]
   23118:	ldm	r4, {r3, r7}
   2311c:	add	r6, r6, r0
   23120:	ldrb	r3, [r3, r6]
   23124:	ldrb	r2, [r2, r3]
   23128:	strb	r2, [r7, r0]
   2312c:	add	r0, r0, #1
   23130:	cmp	r0, r1
   23134:	bge	23158 <__assert_fail@plt+0x119f8>
   23138:	ldr	r7, [r4, #24]
   2313c:	ldm	r4, {r2, r3}
   23140:	ldr	r6, [r4, #64]	; 0x40
   23144:	add	r2, r2, r7
   23148:	ldrb	r2, [r2, r0]
   2314c:	ldrb	r2, [r6, r2]
   23150:	strb	r2, [r3, r0]
   23154:	b	2312c <__assert_fail@plt+0x119cc>
   23158:	str	r0, [r4, #28]
   2315c:	str	r0, [r4, #32]
   23160:	mov	r5, #0
   23164:	mov	r0, r5
   23168:	pop	{r4, r5, r6, r7, fp, pc}
   2316c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23170:	add	fp, sp, #24
   23174:	sub	sp, sp, #16
   23178:	mov	r9, r0
   2317c:	mov	r4, r1
   23180:	ldr	r5, [r1, #40]	; 0x28
   23184:	ldr	r7, [r1, #84]	; 0x54
   23188:	ldr	r0, [r1, #100]	; 0x64
   2318c:	ldr	r1, [r1, #104]	; 0x68
   23190:	mov	r6, r2
   23194:	cmp	r5, r1
   23198:	ble	231a8 <__assert_fail@plt+0x11a48>
   2319c:	str	r6, [r0, r5, lsl #2]
   231a0:	str	r5, [r4, #104]	; 0x68
   231a4:	b	232d8 <__assert_fail@plt+0x11b78>
   231a8:	ldr	r1, [r0, r5, lsl #2]
   231ac:	cmp	r1, #0
   231b0:	beq	231ec <__assert_fail@plt+0x11a8c>
   231b4:	ldr	r2, [r1, #40]	; 0x28
   231b8:	cmp	r6, #0
   231bc:	beq	231f4 <__assert_fail@plt+0x11a94>
   231c0:	ldr	r8, [r6, #40]	; 0x28
   231c4:	mov	r0, sp
   231c8:	mov	r1, r8
   231cc:	bl	2337c <__assert_fail@plt+0x11c1c>
   231d0:	cmp	r0, #0
   231d4:	str	r0, [r9]
   231d8:	bne	23344 <__assert_fail@plt+0x11be4>
   231dc:	ldr	r0, [r4, #40]	; 0x28
   231e0:	cmp	r0, #0
   231e4:	bgt	23214 <__assert_fail@plt+0x11ab4>
   231e8:	b	2324c <__assert_fail@plt+0x11aec>
   231ec:	str	r6, [r0, r5, lsl #2]
   231f0:	b	232d8 <__assert_fail@plt+0x11b78>
   231f4:	vldr	d16, [r2]
   231f8:	ldr	r0, [r2, #8]
   231fc:	mov	r8, #0
   23200:	str	r0, [sp, #8]
   23204:	mov	r0, r5
   23208:	vstr	d16, [sp]
   2320c:	cmp	r0, #0
   23210:	ble	2324c <__assert_fail@plt+0x11aec>
   23214:	ldr	r1, [r4, #48]	; 0x30
   23218:	sub	r0, r0, #1
   2321c:	cmp	r1, r0
   23220:	beq	2334c <__assert_fail@plt+0x11bec>
   23224:	ldr	r1, [r4, #80]	; 0x50
   23228:	cmp	r1, #2
   2322c:	blt	23254 <__assert_fail@plt+0x11af4>
   23230:	ldr	r1, [r4, #8]
   23234:	ldr	r6, [r1, r0, lsl #2]
   23238:	cmn	r6, #1
   2323c:	bne	23284 <__assert_fail@plt+0x11b24>
   23240:	sub	r0, r0, #1
   23244:	cmn	r0, #1
   23248:	bne	23234 <__assert_fail@plt+0x11ad4>
   2324c:	ldr	r3, [r4, #60]	; 0x3c
   23250:	b	232ac <__assert_fail@plt+0x11b4c>
   23254:	ldr	r1, [r4, #4]
   23258:	ldr	r2, [r4, #68]	; 0x44
   2325c:	mov	r3, #1
   23260:	ldrb	r0, [r1, r0]
   23264:	ubfx	r1, r0, #5, #3
   23268:	ldr	r1, [r2, r1, lsl #2]
   2326c:	and	r2, r0, #31
   23270:	tst	r1, r3, lsl r2
   23274:	moveq	r3, #0
   23278:	cmpeq	r0, #10
   2327c:	bne	232ac <__assert_fail@plt+0x11b4c>
   23280:	b	2329c <__assert_fail@plt+0x11b3c>
   23284:	ldrb	r0, [r4, #78]	; 0x4e
   23288:	cmp	r0, #0
   2328c:	bne	2335c <__assert_fail@plt+0x11bfc>
   23290:	mov	r3, #0
   23294:	cmp	r6, #10
   23298:	bne	232ac <__assert_fail@plt+0x11b4c>
   2329c:	ldrb	r0, [r4, #77]	; 0x4d
   232a0:	cmp	r0, #0
   232a4:	movwne	r0, #1
   232a8:	lsl	r3, r0, #1
   232ac:	mov	r2, sp
   232b0:	mov	r0, r9
   232b4:	mov	r1, r7
   232b8:	bl	21458 <__assert_fail@plt+0xfcf8>
   232bc:	mov	r6, r0
   232c0:	ldr	r0, [r4, #100]	; 0x64
   232c4:	cmp	r8, #0
   232c8:	str	r6, [r0, r5, lsl #2]
   232cc:	beq	232d8 <__assert_fail@plt+0x11b78>
   232d0:	ldr	r0, [sp, #8]
   232d4:	bl	141b8 <__assert_fail@plt+0x2a58>
   232d8:	cmp	r6, #0
   232dc:	ldrne	r0, [r7, #76]	; 0x4c
   232e0:	cmpne	r0, #0
   232e4:	bne	232f4 <__assert_fail@plt+0x11b94>
   232e8:	mov	r0, r6
   232ec:	sub	sp, fp, #24
   232f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   232f4:	add	r7, r6, #4
   232f8:	mov	r0, r4
   232fc:	mov	r2, r5
   23300:	mov	r1, r7
   23304:	bl	224f0 <__assert_fail@plt+0x10d90>
   23308:	cmp	r0, #0
   2330c:	str	r0, [r9]
   23310:	bne	23344 <__assert_fail@plt+0x11be4>
   23314:	ldrb	r0, [r6, #52]	; 0x34
   23318:	tst	r0, #64	; 0x40
   2331c:	beq	232e8 <__assert_fail@plt+0x11b88>
   23320:	mov	r0, r4
   23324:	mov	r1, r7
   23328:	bl	225f0 <__assert_fail@plt+0x10e90>
   2332c:	str	r0, [r9]
   23330:	cmp	r0, #0
   23334:	mov	r6, #0
   23338:	ldreq	r0, [r4, #100]	; 0x64
   2333c:	ldreq	r6, [r0, r5, lsl #2]
   23340:	b	232e8 <__assert_fail@plt+0x11b88>
   23344:	mov	r6, #0
   23348:	b	232e8 <__assert_fail@plt+0x11b88>
   2334c:	ldr	r0, [r4, #88]	; 0x58
   23350:	and	r0, r0, #2
   23354:	eor	r3, r0, #10
   23358:	b	232ac <__assert_fail@plt+0x11b4c>
   2335c:	mov	r0, r6
   23360:	bl	1164c <iswalnum@plt>
   23364:	mov	r3, #1
   23368:	cmp	r6, #95	; 0x5f
   2336c:	beq	232ac <__assert_fail@plt+0x11b4c>
   23370:	cmp	r0, #0
   23374:	beq	23290 <__assert_fail@plt+0x11b30>
   23378:	b	232ac <__assert_fail@plt+0x11b4c>
   2337c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23380:	add	fp, sp, #28
   23384:	sub	sp, sp, #20
   23388:	mov	sl, r2
   2338c:	cmp	r1, #0
   23390:	str	r0, [sp, #16]
   23394:	beq	23508 <__assert_fail@plt+0x11da8>
   23398:	ldr	r0, [r1, #4]
   2339c:	mov	r8, r1
   233a0:	cmp	sl, #0
   233a4:	beq	234c4 <__assert_fail@plt+0x11d64>
   233a8:	cmp	r0, #1
   233ac:	blt	234c4 <__assert_fail@plt+0x11d64>
   233b0:	ldr	r1, [sl, #4]
   233b4:	cmp	r1, #1
   233b8:	blt	234c4 <__assert_fail@plt+0x11d64>
   233bc:	ldr	r4, [sp, #16]
   233c0:	add	r0, r1, r0
   233c4:	str	r0, [r4]
   233c8:	lsl	r0, r0, #2
   233cc:	bl	2b260 <__assert_fail@plt+0x19b00>
   233d0:	cmp	r0, #0
   233d4:	str	r0, [r4, #8]
   233d8:	beq	235f8 <__assert_fail@plt+0x11e98>
   233dc:	ldr	r9, [sl, #4]
   233e0:	ldr	lr, [r8, #4]
   233e4:	mov	r7, #0
   233e8:	mov	r1, #0
   233ec:	cmp	r9, #0
   233f0:	movwgt	r1, #1
   233f4:	cmp	lr, #1
   233f8:	blt	2357c <__assert_fail@plt+0x11e1c>
   233fc:	mov	r2, #0
   23400:	mov	ip, #0
   23404:	str	r2, [sp, #8]
   23408:	mov	r2, #0
   2340c:	str	r2, [sp, #12]
   23410:	mov	r2, #0
   23414:	ldr	r4, [sp, #12]
   23418:	mov	r7, ip
   2341c:	tst	r1, #1
   23420:	beq	235ac <__assert_fail@plt+0x11e4c>
   23424:	ldr	r1, [sl, #8]
   23428:	ldr	r5, [r1, r7, lsl #2]
   2342c:	ldr	r1, [r8, #8]
   23430:	ldr	r3, [r1, r2, lsl #2]
   23434:	cmp	r3, r5
   23438:	ble	23460 <__assert_fail@plt+0x11d00>
   2343c:	add	r7, r7, #1
   23440:	str	r5, [r0, r4, lsl #2]
   23444:	mov	r1, #0
   23448:	add	r4, r4, #1
   2344c:	cmp	r9, r7
   23450:	movwgt	r1, #1
   23454:	cmp	lr, r2
   23458:	bgt	2341c <__assert_fail@plt+0x11cbc>
   2345c:	b	23580 <__assert_fail@plt+0x11e20>
   23460:	str	r3, [r0, r4, lsl #2]
   23464:	ldr	r6, [sp, #8]
   23468:	add	r1, r7, #1
   2346c:	mov	ip, r7
   23470:	add	r2, r2, #1
   23474:	ldr	r9, [sl, #4]
   23478:	ldr	lr, [r8, #4]
   2347c:	moveq	ip, r1
   23480:	str	r1, [sp, #4]
   23484:	mov	r1, #0
   23488:	sub	r6, r6, #1
   2348c:	cmp	r9, ip
   23490:	str	r6, [sp, #8]
   23494:	add	r6, r4, #1
   23498:	movwgt	r1, #1
   2349c:	cmp	lr, r2
   234a0:	str	r6, [sp, #12]
   234a4:	bgt	23414 <__assert_fail@plt+0x11cb4>
   234a8:	ldr	r2, [sp, #4]
   234ac:	cmp	r3, r5
   234b0:	add	r4, r4, #1
   234b4:	moveq	r7, r2
   234b8:	cmp	r1, #0
   234bc:	bne	23588 <__assert_fail@plt+0x11e28>
   234c0:	b	235d4 <__assert_fail@plt+0x11e74>
   234c4:	cmp	r0, #1
   234c8:	blt	23508 <__assert_fail@plt+0x11da8>
   234cc:	ldr	r1, [sp, #16]
   234d0:	str	r0, [r1, #4]
   234d4:	ldr	r1, [r8, #4]
   234d8:	cmp	r1, #1
   234dc:	blt	23560 <__assert_fail@plt+0x11e00>
   234e0:	ldr	r4, [sp, #16]
   234e4:	str	r0, [r4]
   234e8:	lsl	r0, r0, #2
   234ec:	bl	2b260 <__assert_fail@plt+0x19b00>
   234f0:	cmp	r0, #0
   234f4:	str	r0, [r4, #8]
   234f8:	beq	235e8 <__assert_fail@plt+0x11e88>
   234fc:	ldr	r2, [r8, #4]
   23500:	ldr	r1, [r8, #8]
   23504:	b	23554 <__assert_fail@plt+0x11df4>
   23508:	cmp	sl, #0
   2350c:	beq	23560 <__assert_fail@plt+0x11e00>
   23510:	ldr	r0, [sl, #4]
   23514:	cmp	r0, #1
   23518:	blt	23560 <__assert_fail@plt+0x11e00>
   2351c:	ldr	r1, [sp, #16]
   23520:	str	r0, [r1, #4]
   23524:	ldr	r1, [sl, #4]
   23528:	cmp	r1, #1
   2352c:	blt	23560 <__assert_fail@plt+0x11e00>
   23530:	ldr	r4, [sp, #16]
   23534:	str	r0, [r4]
   23538:	lsl	r0, r0, #2
   2353c:	bl	2b260 <__assert_fail@plt+0x19b00>
   23540:	cmp	r0, #0
   23544:	str	r0, [r4, #8]
   23548:	beq	235e8 <__assert_fail@plt+0x11e88>
   2354c:	ldr	r2, [sl, #4]
   23550:	ldr	r1, [sl, #8]
   23554:	lsl	r2, r2, #2
   23558:	bl	11484 <memcpy@plt>
   2355c:	b	235dc <__assert_fail@plt+0x11e7c>
   23560:	ldr	r1, [sp, #16]
   23564:	mov	r0, #0
   23568:	str	r0, [r1]
   2356c:	str	r0, [r1, #4]
   23570:	str	r0, [r1, #8]
   23574:	sub	sp, fp, #28
   23578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2357c:	mov	r4, #0
   23580:	cmp	r1, #0
   23584:	beq	235d4 <__assert_fail@plt+0x11e74>
   23588:	ldr	r1, [sl, #8]
   2358c:	sub	r2, r9, r7
   23590:	add	r0, r0, r4, lsl #2
   23594:	lsl	r2, r2, #2
   23598:	add	r1, r1, r7, lsl #2
   2359c:	bl	11484 <memcpy@plt>
   235a0:	sub	r0, r4, r7
   235a4:	add	r4, r0, r9
   235a8:	b	235d4 <__assert_fail@plt+0x11e74>
   235ac:	ldr	r1, [r8, #8]
   235b0:	add	r0, r0, r4, lsl #2
   235b4:	add	r1, r1, r2, lsl #2
   235b8:	sub	r2, lr, r2
   235bc:	lsl	r2, r2, #2
   235c0:	bl	11484 <memcpy@plt>
   235c4:	ldr	r0, [r8, #4]
   235c8:	ldr	r1, [sp, #8]
   235cc:	add	r0, r0, r1
   235d0:	add	r4, r0, r4
   235d4:	ldr	r0, [sp, #16]
   235d8:	str	r4, [r0, #4]
   235dc:	mov	r0, #0
   235e0:	sub	sp, fp, #28
   235e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235e8:	ldr	r1, [sp, #16]
   235ec:	mov	r0, #0
   235f0:	str	r0, [r1]
   235f4:	str	r0, [r1, #4]
   235f8:	mov	r0, #12
   235fc:	sub	sp, fp, #28
   23600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23608:	add	fp, sp, #28
   2360c:	sub	sp, sp, #12
   23610:	mov	r6, r2
   23614:	mov	r7, r3
   23618:	ldr	r2, [r2]
   2361c:	mov	r4, r0
   23620:	mov	r0, #8
   23624:	mov	r8, r1
   23628:	ldr	r9, [fp, #8]
   2362c:	ldr	r3, [r6, #4]
   23630:	str	r0, [sp, #8]
   23634:	add	r1, r6, #8
   23638:	mov	r0, r4
   2363c:	stm	sp, {r7, r9}
   23640:	bl	237cc <__assert_fail@plt+0x1206c>
   23644:	mov	r5, r0
   23648:	cmp	r0, #0
   2364c:	beq	2365c <__assert_fail@plt+0x11efc>
   23650:	mov	r0, r5
   23654:	sub	sp, fp, #28
   23658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2365c:	ldr	r0, [r4, #108]	; 0x6c
   23660:	ldr	r1, [r4, #112]	; 0x70
   23664:	ldr	sl, [r6, #4]
   23668:	ldr	r5, [r8]
   2366c:	cmp	r0, r1
   23670:	blt	236c0 <__assert_fail@plt+0x11f60>
   23674:	ldr	r0, [r4, #116]	; 0x74
   23678:	add	r1, r1, r1, lsl #1
   2367c:	lsl	r1, r1, #4
   23680:	bl	2b290 <__assert_fail@plt+0x19b30>
   23684:	cmp	r0, #0
   23688:	beq	237bc <__assert_fail@plt+0x1205c>
   2368c:	str	r0, [r4, #116]	; 0x74
   23690:	ldr	r1, [r4, #108]	; 0x6c
   23694:	ldr	r2, [r4, #112]	; 0x70
   23698:	add	r1, r1, r1, lsl #1
   2369c:	add	r0, r0, r1, lsl #3
   236a0:	add	r1, r2, r2, lsl #1
   236a4:	lsl	r2, r1, #3
   236a8:	mov	r1, #0
   236ac:	bl	11670 <memset@plt>
   236b0:	ldr	r1, [r4, #112]	; 0x70
   236b4:	ldr	r0, [r4, #108]	; 0x6c
   236b8:	lsl	r1, r1, #1
   236bc:	str	r1, [r4, #112]	; 0x70
   236c0:	ldr	r1, [r4, #116]	; 0x74
   236c4:	cmp	r0, #1
   236c8:	blt	236e8 <__assert_fail@plt+0x11f88>
   236cc:	sub	r2, r0, #1
   236d0:	add	r2, r2, r2, lsl #1
   236d4:	add	r2, r1, r2, lsl #3
   236d8:	ldr	r3, [r2, #4]
   236dc:	cmp	r3, r9
   236e0:	moveq	r3, #1
   236e4:	strbeq	r3, [r2, #20]
   236e8:	add	r2, r0, r0, lsl #1
   236ec:	cmp	sl, r5
   236f0:	mov	r3, #0
   236f4:	mov	ip, #0
   236f8:	add	r0, r0, #1
   236fc:	mvneq	r3, #0
   23700:	str	r7, [r1, r2, lsl #3]!
   23704:	str	r9, [r1, #4]
   23708:	str	r5, [r1, #8]
   2370c:	str	sl, [r1, #12]
   23710:	str	r3, [r1, #16]
   23714:	str	r0, [r4, #108]	; 0x6c
   23718:	strb	ip, [r1, #20]
   2371c:	sub	r0, sl, r5
   23720:	ldr	r1, [r4, #120]	; 0x78
   23724:	cmp	r1, r0
   23728:	strlt	r0, [r4, #120]	; 0x78
   2372c:	ldr	r0, [r6, #4]
   23730:	ldr	r1, [r8]
   23734:	ldr	r7, [r4, #104]	; 0x68
   23738:	add	r0, r0, r9
   2373c:	sub	r6, r0, r1
   23740:	ldr	r0, [r4, #36]	; 0x24
   23744:	cmp	r0, r6
   23748:	bgt	23758 <__assert_fail@plt+0x11ff8>
   2374c:	ldr	r1, [r4, #48]	; 0x30
   23750:	cmp	r0, r1
   23754:	blt	23770 <__assert_fail@plt+0x12010>
   23758:	ldr	r0, [r4, #28]
   2375c:	cmp	r0, r6
   23760:	bgt	23788 <__assert_fail@plt+0x12028>
   23764:	ldr	r1, [r4, #48]	; 0x30
   23768:	cmp	r0, r1
   2376c:	bge	23788 <__assert_fail@plt+0x12028>
   23770:	add	r1, r6, #1
   23774:	mov	r0, r4
   23778:	bl	22f70 <__assert_fail@plt+0x11810>
   2377c:	mov	r5, r0
   23780:	cmp	r0, #0
   23784:	bne	23650 <__assert_fail@plt+0x11ef0>
   23788:	mov	r5, #0
   2378c:	cmp	r6, r7
   23790:	ble	23650 <__assert_fail@plt+0x11ef0>
   23794:	sub	r0, r6, r7
   23798:	mov	r1, #0
   2379c:	mov	r5, #0
   237a0:	lsl	r2, r0, #2
   237a4:	ldr	r0, [r4, #100]	; 0x64
   237a8:	add	r0, r0, r7, lsl #2
   237ac:	add	r0, r0, #4
   237b0:	bl	11670 <memset@plt>
   237b4:	str	r6, [r4, #104]	; 0x68
   237b8:	b	23650 <__assert_fail@plt+0x11ef0>
   237bc:	ldr	r0, [r4, #116]	; 0x74
   237c0:	bl	141b8 <__assert_fail@plt+0x2a58>
   237c4:	mov	r5, #12
   237c8:	b	23650 <__assert_fail@plt+0x11ef0>
   237cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237d0:	add	fp, sp, #28
   237d4:	sub	sp, sp, #84	; 0x54
   237d8:	ldr	r7, [r0, #84]	; 0x54
   237dc:	mov	ip, r1
   237e0:	mov	r1, #0
   237e4:	mov	lr, r2
   237e8:	mov	r9, r3
   237ec:	str	r0, [sp, #44]	; 0x2c
   237f0:	str	r1, [fp, #-52]	; 0xffffffcc
   237f4:	ldr	r4, [ip, #4]
   237f8:	ldr	r1, [r7]
   237fc:	str	r7, [sp, #24]
   23800:	ldr	sl, [r1, r2, lsl #3]
   23804:	ldr	r1, [r0, #120]	; 0x78
   23808:	ldr	r2, [fp, #12]
   2380c:	add	r2, r1, r2
   23810:	cmp	r4, r2
   23814:	str	sl, [sp, #20]
   23818:	ble	24128 <__assert_fail@plt+0x129c8>
   2381c:	ldr	r2, [r0, #100]	; 0x64
   23820:	ldr	r5, [ip]
   23824:	ldr	r4, [r0, #40]	; 0x28
   23828:	ldr	r1, [r0, #88]	; 0x58
   2382c:	str	r2, [sp, #8]
   23830:	ldr	r2, [ip, #8]
   23834:	cmp	r5, #0
   23838:	str	r4, [sp, #12]
   2383c:	moveq	r5, r9
   23840:	cmp	r5, #0
   23844:	str	r2, [r0, #100]	; 0x64
   23848:	str	r5, [r0, #40]	; 0x28
   2384c:	ble	24198 <__assert_fail@plt+0x12a38>
   23850:	ldr	r2, [r0, #48]	; 0x30
   23854:	sub	r3, r5, #1
   23858:	cmp	r2, r3
   2385c:	beq	241a0 <__assert_fail@plt+0x12a40>
   23860:	ldr	r1, [r0, #80]	; 0x50
   23864:	cmp	r1, #2
   23868:	blt	23894 <__assert_fail@plt+0x12134>
   2386c:	ldr	r1, [r0, #8]
   23870:	ldr	r6, [r1, r3, lsl #2]
   23874:	cmn	r6, #1
   23878:	bne	238c4 <__assert_fail@plt+0x12164>
   2387c:	sub	r3, r3, #1
   23880:	cmn	r3, #1
   23884:	bne	23870 <__assert_fail@plt+0x12110>
   23888:	ldr	r0, [sp, #44]	; 0x2c
   2388c:	ldr	r8, [r0, #60]	; 0x3c
   23890:	b	238f4 <__assert_fail@plt+0x12194>
   23894:	ldr	r1, [r0, #4]
   23898:	ldr	r2, [r0, #68]	; 0x44
   2389c:	mov	r8, #1
   238a0:	ldrb	r0, [r1, r3]
   238a4:	ubfx	r1, r0, #5, #3
   238a8:	ldr	r1, [r2, r1, lsl #2]
   238ac:	and	r2, r0, #31
   238b0:	tst	r1, r8, lsl r2
   238b4:	moveq	r8, #0
   238b8:	cmpeq	r0, #10
   238bc:	bne	238f4 <__assert_fail@plt+0x12194>
   238c0:	b	238e0 <__assert_fail@plt+0x12180>
   238c4:	ldr	r0, [sp, #44]	; 0x2c
   238c8:	ldrb	r0, [r0, #78]	; 0x4e
   238cc:	cmp	r0, #0
   238d0:	bne	241d4 <__assert_fail@plt+0x12a74>
   238d4:	mov	r8, #0
   238d8:	cmp	r6, #10
   238dc:	bne	238f4 <__assert_fail@plt+0x12194>
   238e0:	ldr	r0, [sp, #44]	; 0x2c
   238e4:	ldrb	r0, [r0, #77]	; 0x4d
   238e8:	cmp	r0, #0
   238ec:	movwne	r0, #1
   238f0:	lsl	r8, r0, #1
   238f4:	cmp	r5, r9
   238f8:	str	ip, [sp, #16]
   238fc:	bne	239c0 <__assert_fail@plt+0x12260>
   23900:	mov	r0, #1
   23904:	mov	r6, lr
   23908:	str	r0, [sp, #52]	; 0x34
   2390c:	str	r0, [sp, #48]	; 0x30
   23910:	mov	r0, #4
   23914:	bl	2b260 <__assert_fail@plt+0x19b00>
   23918:	cmp	r0, #0
   2391c:	str	r0, [sp, #56]	; 0x38
   23920:	beq	241bc <__assert_fail@plt+0x12a5c>
   23924:	ldr	r3, [fp, #16]
   23928:	str	r6, [r0]
   2392c:	mov	r0, #0
   23930:	add	r1, sp, #48	; 0x30
   23934:	mov	r2, sl
   23938:	str	r0, [fp, #-52]	; 0xffffffcc
   2393c:	mov	r0, r7
   23940:	bl	24210 <__assert_fail@plt+0x12ab0>
   23944:	cmp	r0, #0
   23948:	str	r0, [fp, #-52]	; 0xffffffcc
   2394c:	bne	241ac <__assert_fail@plt+0x12a4c>
   23950:	ldr	r0, [sp, #52]	; 0x34
   23954:	ldr	r9, [sp, #44]	; 0x2c
   23958:	cmp	r0, #0
   2395c:	beq	23988 <__assert_fail@plt+0x12228>
   23960:	ldr	r0, [fp, #16]
   23964:	ldr	r3, [sp, #20]
   23968:	add	r1, sp, #48	; 0x30
   2396c:	mov	r2, r5
   23970:	str	r0, [sp]
   23974:	mov	r0, r9
   23978:	bl	24348 <__assert_fail@plt+0x12be8>
   2397c:	cmp	r0, #0
   23980:	str	r0, [fp, #-52]	; 0xffffffcc
   23984:	bne	241ac <__assert_fail@plt+0x12a4c>
   23988:	ldr	r1, [sp, #24]
   2398c:	sub	r0, fp, #52	; 0x34
   23990:	add	r2, sp, #48	; 0x30
   23994:	mov	r3, r8
   23998:	bl	21458 <__assert_fail@plt+0xfcf8>
   2399c:	mov	r6, r0
   239a0:	cmp	r0, #0
   239a4:	bne	239b4 <__assert_fail@plt+0x12254>
   239a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   239ac:	cmp	r0, #0
   239b0:	bne	24104 <__assert_fail@plt+0x129a4>
   239b4:	ldr	r0, [r9, #100]	; 0x64
   239b8:	str	r6, [r0, r5, lsl #2]
   239bc:	b	23a54 <__assert_fail@plt+0x122f4>
   239c0:	ldr	r9, [sp, #44]	; 0x2c
   239c4:	ldr	r0, [r9, #100]	; 0x64
   239c8:	ldr	r6, [r0, r5, lsl #2]
   239cc:	cmp	r6, #0
   239d0:	beq	239f4 <__assert_fail@plt+0x12294>
   239d4:	ldrb	r0, [r6, #52]	; 0x34
   239d8:	tst	r0, #64	; 0x40
   239dc:	bne	23a08 <__assert_fail@plt+0x122a8>
   239e0:	mov	r0, #0
   239e4:	str	r0, [sp, #52]	; 0x34
   239e8:	str	r0, [sp, #48]	; 0x30
   239ec:	str	r0, [sp, #56]	; 0x38
   239f0:	b	23a54 <__assert_fail@plt+0x122f4>
   239f4:	mov	r6, #0
   239f8:	str	r6, [sp, #52]	; 0x34
   239fc:	str	r6, [sp, #48]	; 0x30
   23a00:	str	r6, [sp, #56]	; 0x38
   23a04:	b	23a54 <__assert_fail@plt+0x122f4>
   23a08:	ldr	r0, [r6, #8]
   23a0c:	cmp	r0, #1
   23a10:	str	r0, [sp, #52]	; 0x34
   23a14:	blt	240c8 <__assert_fail@plt+0x12968>
   23a18:	str	r0, [sp, #48]	; 0x30
   23a1c:	lsl	r0, r0, #2
   23a20:	bl	2b260 <__assert_fail@plt+0x19b00>
   23a24:	cmp	r0, #0
   23a28:	str	r0, [sp, #56]	; 0x38
   23a2c:	beq	241bc <__assert_fail@plt+0x12a5c>
   23a30:	ldr	r2, [r6, #8]
   23a34:	ldr	r1, [r6, #12]
   23a38:	lsl	r2, r2, #2
   23a3c:	bl	11484 <memcpy@plt>
   23a40:	ldrb	r0, [r6, #52]	; 0x34
   23a44:	mov	r1, #0
   23a48:	str	r1, [fp, #-52]	; 0xffffffcc
   23a4c:	tst	r0, #64	; 0x40
   23a50:	bne	23960 <__assert_fail@plt+0x12200>
   23a54:	ldr	r4, [fp, #12]
   23a58:	cmp	r5, r4
   23a5c:	bge	24020 <__assert_fail@plt+0x128c0>
   23a60:	ldr	r7, [sp, #24]
   23a64:	ldr	sl, [sp, #20]
   23a68:	ldr	r4, [fp, #16]
   23a6c:	add	r8, sp, #48	; 0x30
   23a70:	mov	r0, #0
   23a74:	str	r6, [sp, #40]	; 0x28
   23a78:	b	23aa8 <__assert_fail@plt+0x12348>
   23a7c:	ldr	r1, [sp, #40]	; 0x28
   23a80:	ldr	r0, [r9, #100]	; 0x64
   23a84:	ldr	r5, [sp, #28]
   23a88:	str	r1, [r0, r5, lsl #2]
   23a8c:	cmp	r1, #0
   23a90:	ldr	r1, [sp, #32]
   23a94:	mov	r0, #0
   23a98:	addeq	r0, r1, #1
   23a9c:	ldr	r1, [fp, #12]
   23aa0:	cmp	r5, r1
   23aa4:	beq	2401c <__assert_fail@plt+0x128bc>
   23aa8:	str	r0, [sp, #32]
   23aac:	ldr	r0, [r9, #120]	; 0x78
   23ab0:	ldr	r1, [sp, #32]
   23ab4:	cmp	r1, r0
   23ab8:	bgt	24020 <__assert_fail@plt+0x128c0>
   23abc:	mov	r0, #0
   23ac0:	add	r1, r5, #1
   23ac4:	str	r0, [sp, #52]	; 0x34
   23ac8:	str	r1, [sp, #28]
   23acc:	ldr	r0, [r9, #100]	; 0x64
   23ad0:	ldr	r0, [r0, r1, lsl #2]
   23ad4:	cmp	r0, #0
   23ad8:	beq	23af4 <__assert_fail@plt+0x12394>
   23adc:	add	r1, r0, #4
   23ae0:	mov	r0, r8
   23ae4:	bl	21158 <__assert_fail@plt+0xf9f8>
   23ae8:	cmp	r0, #0
   23aec:	str	r0, [fp, #-52]	; 0xffffffcc
   23af0:	bne	24104 <__assert_fail@plt+0x129a4>
   23af4:	ldr	r1, [sp, #40]	; 0x28
   23af8:	cmp	r1, #0
   23afc:	beq	23ed4 <__assert_fail@plt+0x12774>
   23b00:	mov	r0, #0
   23b04:	ldr	r8, [r9, #84]	; 0x54
   23b08:	str	r0, [fp, #-32]	; 0xffffffe0
   23b0c:	str	r0, [fp, #-44]	; 0xffffffd4
   23b10:	str	r0, [fp, #-48]	; 0xffffffd0
   23b14:	str	r0, [fp, #-40]	; 0xffffffd8
   23b18:	ldr	r1, [r1, #20]
   23b1c:	cmp	r1, #1
   23b20:	blt	23ec0 <__assert_fail@plt+0x12760>
   23b24:	ldr	r7, [sp, #40]	; 0x28
   23b28:	mov	r4, #0
   23b2c:	b	23b60 <__assert_fail@plt+0x12400>
   23b30:	ldr	r1, [sp, #52]	; 0x34
   23b34:	cmp	r1, #0
   23b38:	bne	23cdc <__assert_fail@plt+0x1257c>
   23b3c:	ldr	r0, [sp, #56]	; 0x38
   23b40:	str	r6, [r0]
   23b44:	ldr	r0, [sp, #52]	; 0x34
   23b48:	add	r0, r0, #1
   23b4c:	str	r0, [sp, #52]	; 0x34
   23b50:	ldr	r0, [r7, #20]
   23b54:	add	r4, r4, #1
   23b58:	cmp	r4, r0
   23b5c:	bge	23eb4 <__assert_fail@plt+0x12754>
   23b60:	ldr	r0, [r7, #24]
   23b64:	ldr	sl, [r0, r4, lsl #2]
   23b68:	ldr	r0, [r8]
   23b6c:	add	r1, r0, sl, lsl #3
   23b70:	ldrb	r1, [r1, #6]
   23b74:	tst	r1, #16
   23b78:	beq	23c88 <__assert_fail@plt+0x12528>
   23b7c:	mov	r0, r8
   23b80:	mov	r1, sl
   23b84:	mov	r2, r9
   23b88:	mov	r3, r5
   23b8c:	bl	24d28 <__assert_fail@plt+0x135c8>
   23b90:	mov	r9, r0
   23b94:	cmp	r0, #2
   23b98:	blt	23c74 <__assert_fail@plt+0x12514>
   23b9c:	ldr	r0, [sp, #44]	; 0x2c
   23ba0:	ldr	r1, [r8, #12]
   23ba4:	add	r6, r9, r5
   23ba8:	ldr	r0, [r0, #100]	; 0x64
   23bac:	ldr	r1, [r1, sl, lsl #2]
   23bb0:	ldr	r0, [r0, r6, lsl #2]
   23bb4:	str	r1, [sp, #36]	; 0x24
   23bb8:	mov	r1, #0
   23bbc:	str	r1, [fp, #-44]	; 0xffffffd4
   23bc0:	cmp	r0, #0
   23bc4:	beq	23be0 <__assert_fail@plt+0x12480>
   23bc8:	add	r1, r0, #4
   23bcc:	sub	r0, fp, #48	; 0x30
   23bd0:	bl	21158 <__assert_fail@plt+0xf9f8>
   23bd4:	cmp	r0, #0
   23bd8:	str	r0, [fp, #-32]	; 0xffffffe0
   23bdc:	bne	240f4 <__assert_fail@plt+0x12994>
   23be0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   23be4:	cmp	r2, #0
   23be8:	beq	23c14 <__assert_fail@plt+0x124b4>
   23bec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   23bf0:	ldr	r7, [sp, #36]	; 0x24
   23bf4:	cmp	r1, #0
   23bf8:	bne	23dc4 <__assert_fail@plt+0x12664>
   23bfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23c00:	str	r7, [r0]
   23c04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   23c08:	add	r0, r0, #1
   23c0c:	str	r0, [fp, #-44]	; 0xffffffd4
   23c10:	b	23c3c <__assert_fail@plt+0x124dc>
   23c14:	mov	r0, #1
   23c18:	str	r0, [fp, #-44]	; 0xffffffd4
   23c1c:	str	r0, [fp, #-48]	; 0xffffffd0
   23c20:	mov	r0, #4
   23c24:	bl	2b260 <__assert_fail@plt+0x19b00>
   23c28:	ldr	r1, [sp, #36]	; 0x24
   23c2c:	cmp	r0, #0
   23c30:	str	r0, [fp, #-40]	; 0xffffffd8
   23c34:	beq	24114 <__assert_fail@plt+0x129b4>
   23c38:	str	r1, [r0]
   23c3c:	sub	r0, fp, #32
   23c40:	mov	r1, r8
   23c44:	sub	r2, fp, #48	; 0x30
   23c48:	bl	24a10 <__assert_fail@plt+0x132b0>
   23c4c:	ldr	r2, [sp, #44]	; 0x2c
   23c50:	ldr	r1, [r2, #100]	; 0x64
   23c54:	str	r0, [r1, r6, lsl #2]
   23c58:	ldr	r0, [r2, #100]	; 0x64
   23c5c:	ldr	r0, [r0, r6, lsl #2]
   23c60:	cmp	r0, #0
   23c64:	bne	23c74 <__assert_fail@plt+0x12514>
   23c68:	ldr	r7, [fp, #-32]	; 0xffffffe0
   23c6c:	cmp	r7, #0
   23c70:	bne	240f8 <__assert_fail@plt+0x12998>
   23c74:	cmp	r9, #0
   23c78:	ldr	r9, [sp, #44]	; 0x2c
   23c7c:	ldr	r7, [sp, #40]	; 0x28
   23c80:	bne	23ca0 <__assert_fail@plt+0x12540>
   23c84:	ldr	r0, [r8]
   23c88:	add	r1, r0, sl, lsl #3
   23c8c:	mov	r0, r9
   23c90:	mov	r2, r5
   23c94:	bl	2508c <__assert_fail@plt+0x1392c>
   23c98:	cmp	r0, #0
   23c9c:	beq	23b50 <__assert_fail@plt+0x123f0>
   23ca0:	ldr	r0, [r8, #12]
   23ca4:	ldr	r2, [sp, #48]	; 0x30
   23ca8:	ldr	r6, [r0, sl, lsl #2]
   23cac:	cmp	r2, #0
   23cb0:	bne	23b30 <__assert_fail@plt+0x123d0>
   23cb4:	mov	r0, #1
   23cb8:	str	r0, [sp, #52]	; 0x34
   23cbc:	str	r0, [sp, #48]	; 0x30
   23cc0:	mov	r0, #4
   23cc4:	bl	2b260 <__assert_fail@plt+0x19b00>
   23cc8:	cmp	r0, #0
   23ccc:	str	r0, [sp, #56]	; 0x38
   23cd0:	beq	240e0 <__assert_fail@plt+0x12980>
   23cd4:	str	r6, [r0]
   23cd8:	b	23b50 <__assert_fail@plt+0x123f0>
   23cdc:	cmp	r2, r1
   23ce0:	bne	23d0c <__assert_fail@plt+0x125ac>
   23ce4:	lsl	r0, r2, #1
   23ce8:	lsl	r1, r2, #3
   23cec:	str	r0, [sp, #48]	; 0x30
   23cf0:	ldr	r0, [sp, #56]	; 0x38
   23cf4:	bl	2b290 <__assert_fail@plt+0x19b30>
   23cf8:	cmp	r0, #0
   23cfc:	beq	240ec <__assert_fail@plt+0x1298c>
   23d00:	str	r0, [sp, #56]	; 0x38
   23d04:	ldr	r1, [sp, #52]	; 0x34
   23d08:	b	23d10 <__assert_fail@plt+0x125b0>
   23d0c:	ldr	r0, [sp, #56]	; 0x38
   23d10:	ldr	r2, [r0]
   23d14:	cmp	r2, r6
   23d18:	ble	23d8c <__assert_fail@plt+0x1262c>
   23d1c:	cmp	r1, #1
   23d20:	blt	23dbc <__assert_fail@plt+0x1265c>
   23d24:	ands	r7, r1, #3
   23d28:	sub	ip, r1, #1
   23d2c:	beq	23d50 <__assert_fail@plt+0x125f0>
   23d30:	add	lr, r0, r1, lsl #2
   23d34:	mov	r3, lr
   23d38:	ldr	r2, [r3, #-4]!
   23d3c:	subs	r7, r7, #1
   23d40:	sub	r1, r1, #1
   23d44:	str	r2, [lr]
   23d48:	mov	lr, r3
   23d4c:	bne	23d38 <__assert_fail@plt+0x125d8>
   23d50:	cmp	ip, #3
   23d54:	bcc	23d80 <__assert_fail@plt+0x12620>
   23d58:	add	r2, r0, r1, lsl #2
   23d5c:	sub	r2, r2, #8
   23d60:	sub	lr, r2, #8
   23d64:	sub	r1, r1, #4
   23d68:	sub	sl, r2, #4
   23d6c:	sub	r2, r2, #16
   23d70:	ldm	lr, {r3, r7, ip, lr}
   23d74:	cmp	r1, #0
   23d78:	stm	sl, {r3, r7, ip, lr}
   23d7c:	bgt	23d60 <__assert_fail@plt+0x12600>
   23d80:	ldr	r7, [sp, #40]	; 0x28
   23d84:	mov	r1, #0
   23d88:	b	23dbc <__assert_fail@plt+0x1265c>
   23d8c:	add	r2, r0, r1, lsl #2
   23d90:	ldr	r3, [r2, #-4]
   23d94:	cmp	r3, r6
   23d98:	ble	23dbc <__assert_fail@plt+0x1265c>
   23d9c:	sub	r1, r1, #2
   23da0:	str	r3, [r2]
   23da4:	sub	r1, r1, #1
   23da8:	ldr	r3, [r2, #-8]
   23dac:	sub	r2, r2, #4
   23db0:	cmp	r3, r6
   23db4:	bgt	23da0 <__assert_fail@plt+0x12640>
   23db8:	add	r1, r1, #2
   23dbc:	str	r6, [r0, r1, lsl #2]
   23dc0:	b	23b44 <__assert_fail@plt+0x123e4>
   23dc4:	cmp	r2, r1
   23dc8:	bne	23df4 <__assert_fail@plt+0x12694>
   23dcc:	lsl	r0, r2, #1
   23dd0:	lsl	r1, r2, #3
   23dd4:	str	r0, [fp, #-48]	; 0xffffffd0
   23dd8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23ddc:	bl	2b290 <__assert_fail@plt+0x19b30>
   23de0:	cmp	r0, #0
   23de4:	beq	240ec <__assert_fail@plt+0x1298c>
   23de8:	str	r0, [fp, #-40]	; 0xffffffd8
   23dec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   23df0:	b	23df8 <__assert_fail@plt+0x12698>
   23df4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23df8:	ldr	r2, [r0]
   23dfc:	cmp	r2, r7
   23e00:	ble	23e7c <__assert_fail@plt+0x1271c>
   23e04:	cmp	r1, #1
   23e08:	blt	23eac <__assert_fail@plt+0x1274c>
   23e0c:	ands	r3, r1, #3
   23e10:	sub	ip, r1, #1
   23e14:	beq	23e38 <__assert_fail@plt+0x126d8>
   23e18:	add	lr, r0, r1, lsl #2
   23e1c:	mov	r7, lr
   23e20:	ldr	r2, [r7, #-4]!
   23e24:	subs	r3, r3, #1
   23e28:	sub	r1, r1, #1
   23e2c:	str	r2, [lr]
   23e30:	mov	lr, r7
   23e34:	bne	23e20 <__assert_fail@plt+0x126c0>
   23e38:	cmp	ip, #3
   23e3c:	bcc	23e70 <__assert_fail@plt+0x12710>
   23e40:	add	r2, r0, r1, lsl #2
   23e44:	sub	r2, r2, #8
   23e48:	sub	lr, r2, #8
   23e4c:	sub	r1, r1, #4
   23e50:	ldm	lr, {r3, r7, ip, lr}
   23e54:	cmp	r1, #0
   23e58:	str	r3, [r2, #-4]
   23e5c:	str	r7, [r2]
   23e60:	str	ip, [r2, #4]
   23e64:	str	lr, [r2, #8]
   23e68:	sub	r2, r2, #16
   23e6c:	bgt	23e48 <__assert_fail@plt+0x126e8>
   23e70:	ldr	r7, [sp, #36]	; 0x24
   23e74:	mov	r1, #0
   23e78:	b	23eac <__assert_fail@plt+0x1274c>
   23e7c:	add	r2, r0, r1, lsl #2
   23e80:	ldr	r3, [r2, #-4]
   23e84:	cmp	r3, r7
   23e88:	ble	23eac <__assert_fail@plt+0x1274c>
   23e8c:	sub	r1, r1, #2
   23e90:	str	r3, [r2]
   23e94:	sub	r1, r1, #1
   23e98:	ldr	r3, [r2, #-8]
   23e9c:	sub	r2, r2, #4
   23ea0:	cmp	r3, r7
   23ea4:	bgt	23e90 <__assert_fail@plt+0x12730>
   23ea8:	add	r1, r1, #2
   23eac:	str	r7, [r0, r1, lsl #2]
   23eb0:	b	23c04 <__assert_fail@plt+0x124a4>
   23eb4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23eb8:	ldr	r7, [sp, #24]
   23ebc:	ldr	sl, [sp, #20]
   23ec0:	bl	141b8 <__assert_fail@plt+0x2a58>
   23ec4:	ldr	r4, [fp, #16]
   23ec8:	mov	r0, #0
   23ecc:	add	r8, sp, #48	; 0x30
   23ed0:	str	r0, [fp, #-52]	; 0xffffffcc
   23ed4:	ldr	r0, [sp, #52]	; 0x34
   23ed8:	cmp	r0, #0
   23edc:	beq	23f24 <__assert_fail@plt+0x127c4>
   23ee0:	mov	r0, r7
   23ee4:	mov	r1, r8
   23ee8:	mov	r2, sl
   23eec:	mov	r3, r4
   23ef0:	bl	24210 <__assert_fail@plt+0x12ab0>
   23ef4:	cmp	r0, #0
   23ef8:	str	r0, [fp, #-52]	; 0xffffffcc
   23efc:	bne	24104 <__assert_fail@plt+0x129a4>
   23f00:	ldr	r2, [sp, #28]
   23f04:	mov	r0, r9
   23f08:	mov	r1, r8
   23f0c:	mov	r3, sl
   23f10:	str	r4, [sp]
   23f14:	bl	24348 <__assert_fail@plt+0x12be8>
   23f18:	cmp	r0, #0
   23f1c:	str	r0, [fp, #-52]	; 0xffffffcc
   23f20:	bne	24104 <__assert_fail@plt+0x129a4>
   23f24:	cmn	r5, #1
   23f28:	ble	23f60 <__assert_fail@plt+0x12800>
   23f2c:	ldr	r0, [r9, #48]	; 0x30
   23f30:	cmp	r0, r5
   23f34:	beq	23fec <__assert_fail@plt+0x1288c>
   23f38:	ldr	r0, [r9, #80]	; 0x50
   23f3c:	cmp	r0, #2
   23f40:	blt	23f68 <__assert_fail@plt+0x12808>
   23f44:	ldr	r0, [r9, #8]
   23f48:	ldr	r6, [r0, r5, lsl #2]
   23f4c:	cmn	r6, #1
   23f50:	bne	23f98 <__assert_fail@plt+0x12838>
   23f54:	sub	r5, r5, #1
   23f58:	cmn	r5, #1
   23f5c:	bne	23f48 <__assert_fail@plt+0x127e8>
   23f60:	ldr	r3, [r9, #60]	; 0x3c
   23f64:	b	23fc0 <__assert_fail@plt+0x12860>
   23f68:	ldr	r0, [r9, #4]
   23f6c:	ldr	r1, [r9, #68]	; 0x44
   23f70:	mov	r3, #1
   23f74:	ldrb	r0, [r0, r5]
   23f78:	ubfx	r2, r0, #5, #3
   23f7c:	ldr	r1, [r1, r2, lsl #2]
   23f80:	and	r2, r0, #31
   23f84:	tst	r1, r3, lsl r2
   23f88:	moveq	r3, #0
   23f8c:	cmpeq	r0, #10
   23f90:	bne	23fc0 <__assert_fail@plt+0x12860>
   23f94:	b	23fb0 <__assert_fail@plt+0x12850>
   23f98:	ldrb	r0, [r9, #78]	; 0x4e
   23f9c:	cmp	r0, #0
   23fa0:	bne	23ffc <__assert_fail@plt+0x1289c>
   23fa4:	mov	r3, #0
   23fa8:	cmp	r6, #10
   23fac:	bne	23fc0 <__assert_fail@plt+0x12860>
   23fb0:	ldrb	r0, [r9, #77]	; 0x4d
   23fb4:	cmp	r0, #0
   23fb8:	movwne	r0, #1
   23fbc:	lsl	r3, r0, #1
   23fc0:	sub	r0, fp, #52	; 0x34
   23fc4:	mov	r1, r7
   23fc8:	mov	r2, r8
   23fcc:	bl	21458 <__assert_fail@plt+0xfcf8>
   23fd0:	cmp	r0, #0
   23fd4:	str	r0, [sp, #40]	; 0x28
   23fd8:	bne	23a7c <__assert_fail@plt+0x1231c>
   23fdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23fe0:	cmp	r0, #0
   23fe4:	beq	23a7c <__assert_fail@plt+0x1231c>
   23fe8:	b	24104 <__assert_fail@plt+0x129a4>
   23fec:	ldr	r0, [r9, #88]	; 0x58
   23ff0:	and	r0, r0, #2
   23ff4:	eor	r3, r0, #10
   23ff8:	b	23fc0 <__assert_fail@plt+0x12860>
   23ffc:	mov	r0, r6
   24000:	bl	1164c <iswalnum@plt>
   24004:	mov	r3, #1
   24008:	cmp	r6, #95	; 0x5f
   2400c:	beq	23fc0 <__assert_fail@plt+0x12860>
   24010:	cmp	r0, #0
   24014:	beq	23fa4 <__assert_fail@plt+0x12844>
   24018:	b	23fc0 <__assert_fail@plt+0x12860>
   2401c:	ldr	r5, [fp, #12]
   24020:	ldr	r0, [sp, #56]	; 0x38
   24024:	bl	141b8 <__assert_fail@plt+0x2a58>
   24028:	ldr	r0, [r9, #100]	; 0x64
   2402c:	ldr	r1, [fp, #12]
   24030:	mov	sl, #1
   24034:	ldr	r1, [r0, r1, lsl #2]
   24038:	ldr	r0, [sp, #16]
   2403c:	str	r5, [r0]
   24040:	ldr	r0, [sp, #12]
   24044:	cmp	r1, #0
   24048:	addne	r1, r1, #4
   2404c:	str	r0, [r9, #40]	; 0x28
   24050:	ldr	r0, [sp, #8]
   24054:	str	r0, [r9, #100]	; 0x64
   24058:	beq	240bc <__assert_fail@plt+0x1295c>
   2405c:	ldr	r2, [r1, #4]
   24060:	cmp	r2, #1
   24064:	blt	240b8 <__assert_fail@plt+0x12958>
   24068:	ldr	r0, [fp, #8]
   2406c:	ldr	r1, [r1, #8]
   24070:	subs	r2, r2, #1
   24074:	mov	sl, #0
   24078:	mov	r3, #0
   2407c:	beq	240a8 <__assert_fail@plt+0x12948>
   24080:	mov	r3, #0
   24084:	mov	r7, #1
   24088:	add	r5, r3, r2
   2408c:	lsr	r4, r5, #1
   24090:	ldr	r6, [r1, r4, lsl #2]
   24094:	cmp	r6, r0
   24098:	addlt	r3, r7, r5, lsr #1
   2409c:	movge	r2, r4
   240a0:	cmp	r3, r2
   240a4:	bcc	24088 <__assert_fail@plt+0x12928>
   240a8:	ldr	r1, [r1, r3, lsl #2]
   240ac:	cmp	r1, r0
   240b0:	movne	sl, #1
   240b4:	b	240bc <__assert_fail@plt+0x1295c>
   240b8:	mov	sl, #1
   240bc:	mov	r0, sl
   240c0:	sub	sp, fp, #28
   240c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240c8:	mov	r0, #0
   240cc:	str	r0, [sp, #52]	; 0x34
   240d0:	str	r0, [sp, #48]	; 0x30
   240d4:	str	r0, [sp, #56]	; 0x38
   240d8:	str	r0, [fp, #-52]	; 0xffffffcc
   240dc:	b	23988 <__assert_fail@plt+0x12228>
   240e0:	mov	r0, #0
   240e4:	str	r0, [sp, #48]	; 0x30
   240e8:	str	r0, [sp, #52]	; 0x34
   240ec:	mov	r7, #12
   240f0:	b	240f8 <__assert_fail@plt+0x12998>
   240f4:	mov	r7, r0
   240f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   240fc:	bl	141b8 <__assert_fail@plt+0x2a58>
   24100:	str	r7, [fp, #-52]	; 0xffffffcc
   24104:	ldr	r0, [sp, #56]	; 0x38
   24108:	bl	141b8 <__assert_fail@plt+0x2a58>
   2410c:	ldr	sl, [fp, #-52]	; 0xffffffcc
   24110:	b	240bc <__assert_fail@plt+0x1295c>
   24114:	mov	r0, #0
   24118:	mov	r7, #12
   2411c:	str	r0, [fp, #-48]	; 0xffffffd0
   24120:	str	r0, [fp, #-44]	; 0xffffffd4
   24124:	b	240fc <__assert_fail@plt+0x1299c>
   24128:	mvn	r1, #-2147483648	; 0x80000000
   2412c:	mov	sl, #12
   24130:	sub	r1, r1, r4
   24134:	cmp	r1, r2
   24138:	ble	240bc <__assert_fail@plt+0x1295c>
   2413c:	add	r8, r2, #1
   24140:	str	lr, [sp, #40]	; 0x28
   24144:	add	r5, r8, r4
   24148:	cmn	r5, #-1073741823	; 0xc0000001
   2414c:	bhi	240bc <__assert_fail@plt+0x1295c>
   24150:	ldr	r0, [ip, #8]
   24154:	lsl	r1, r5, #2
   24158:	mov	r6, ip
   2415c:	bl	2b290 <__assert_fail@plt+0x19b30>
   24160:	cmp	r0, #0
   24164:	beq	240bc <__assert_fail@plt+0x1295c>
   24168:	str	r5, [r6, #4]
   2416c:	str	r0, [r6, #8]
   24170:	add	r0, r0, r4, lsl #2
   24174:	lsl	r2, r8, #2
   24178:	mov	r1, #0
   2417c:	bl	11670 <memset@plt>
   24180:	ldr	r0, [sp, #44]	; 0x2c
   24184:	ldr	r7, [sp, #24]
   24188:	ldr	sl, [sp, #20]
   2418c:	ldr	lr, [sp, #40]	; 0x28
   24190:	mov	ip, r6
   24194:	b	2381c <__assert_fail@plt+0x120bc>
   24198:	ldr	r8, [r0, #60]	; 0x3c
   2419c:	b	238f4 <__assert_fail@plt+0x12194>
   241a0:	and	r0, r1, #2
   241a4:	eor	r8, r0, #10
   241a8:	b	238f4 <__assert_fail@plt+0x12194>
   241ac:	mov	sl, r0
   241b0:	ldr	r0, [sp, #56]	; 0x38
   241b4:	bl	141b8 <__assert_fail@plt+0x2a58>
   241b8:	b	240bc <__assert_fail@plt+0x1295c>
   241bc:	mov	r0, #0
   241c0:	mov	sl, #12
   241c4:	str	r0, [sp, #48]	; 0x30
   241c8:	str	r0, [sp, #52]	; 0x34
   241cc:	str	sl, [fp, #-52]	; 0xffffffcc
   241d0:	b	240bc <__assert_fail@plt+0x1295c>
   241d4:	mov	r0, r6
   241d8:	str	lr, [sp, #40]	; 0x28
   241dc:	mov	r4, ip
   241e0:	bl	1164c <iswalnum@plt>
   241e4:	mov	r8, #1
   241e8:	cmp	r6, #95	; 0x5f
   241ec:	beq	24204 <__assert_fail@plt+0x12aa4>
   241f0:	ldr	lr, [sp, #40]	; 0x28
   241f4:	cmp	r0, #0
   241f8:	mov	ip, r4
   241fc:	beq	238d4 <__assert_fail@plt+0x12174>
   24200:	b	238f4 <__assert_fail@plt+0x12194>
   24204:	ldr	lr, [sp, #40]	; 0x28
   24208:	mov	ip, r4
   2420c:	b	238f4 <__assert_fail@plt+0x12194>
   24210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24214:	add	fp, sp, #28
   24218:	sub	sp, sp, #20
   2421c:	str	r0, [sp, #4]
   24220:	ldr	r0, [r1, #4]
   24224:	mov	sl, r1
   24228:	mov	r1, #0
   2422c:	mov	r5, r3
   24230:	mov	r8, r2
   24234:	str	r1, [sp, #12]
   24238:	str	r0, [sp, #8]
   2423c:	lsl	r0, r0, #2
   24240:	bl	2b260 <__assert_fail@plt+0x19b00>
   24244:	cmp	r0, #0
   24248:	str	r0, [sp, #16]
   2424c:	beq	24340 <__assert_fail@plt+0x12be0>
   24250:	ldr	r0, [sl, #4]
   24254:	cmp	r0, #1
   24258:	blt	24308 <__assert_fail@plt+0x12ba8>
   2425c:	mov	r9, #0
   24260:	ldr	r0, [sl, #8]
   24264:	ldr	r1, [sp, #4]
   24268:	ldr	r2, [r0, r9, lsl #2]
   2426c:	ldr	r1, [r1, #24]
   24270:	add	r0, r2, r2, lsl #1
   24274:	add	r1, r1, r0, lsl #2
   24278:	ldr	r0, [r1, #4]
   2427c:	cmp	r0, #1
   24280:	blt	242e8 <__assert_fail@plt+0x12b88>
   24284:	ldr	r7, [sp, #4]
   24288:	ldr	r3, [r1, #8]
   2428c:	ldr	r7, [r7]
   24290:	b	242a0 <__assert_fail@plt+0x12b40>
   24294:	add	r3, r3, #4
   24298:	subs	r0, r0, #1
   2429c:	beq	242e8 <__assert_fail@plt+0x12b88>
   242a0:	ldr	r6, [r3]
   242a4:	add	r4, r7, r6, lsl #3
   242a8:	ldrb	r4, [r4, #4]
   242ac:	cmp	r4, r5
   242b0:	bne	24294 <__assert_fail@plt+0x12b34>
   242b4:	ldr	r4, [r7, r6, lsl #3]
   242b8:	cmp	r4, r8
   242bc:	bne	24294 <__assert_fail@plt+0x12b34>
   242c0:	cmn	r6, #1
   242c4:	beq	242e8 <__assert_fail@plt+0x12b88>
   242c8:	ldr	r0, [sp, #4]
   242cc:	add	r1, sp, #8
   242d0:	mov	r3, r8
   242d4:	str	r5, [sp]
   242d8:	bl	248d8 <__assert_fail@plt+0x13178>
   242dc:	cmp	r0, #0
   242e0:	beq	242f8 <__assert_fail@plt+0x12b98>
   242e4:	b	24330 <__assert_fail@plt+0x12bd0>
   242e8:	add	r0, sp, #8
   242ec:	bl	21158 <__assert_fail@plt+0xf9f8>
   242f0:	cmp	r0, #0
   242f4:	bne	24330 <__assert_fail@plt+0x12bd0>
   242f8:	ldr	r0, [sl, #4]
   242fc:	add	r9, r9, #1
   24300:	cmp	r9, r0
   24304:	blt	24260 <__assert_fail@plt+0x12b00>
   24308:	ldr	r0, [sl, #8]
   2430c:	bl	141b8 <__assert_fail@plt+0x2a58>
   24310:	vldr	d16, [sp, #8]
   24314:	ldr	r0, [sp, #16]
   24318:	mov	r7, #0
   2431c:	str	r0, [sl, #8]
   24320:	vstr	d16, [sl]
   24324:	mov	r0, r7
   24328:	sub	sp, fp, #28
   2432c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24330:	mov	r7, r0
   24334:	ldr	r0, [sp, #16]
   24338:	bl	141b8 <__assert_fail@plt+0x2a58>
   2433c:	b	24324 <__assert_fail@plt+0x12bc4>
   24340:	mov	r7, #12
   24344:	b	24324 <__assert_fail@plt+0x12bc4>
   24348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2434c:	add	fp, sp, #28
   24350:	sub	sp, sp, #52	; 0x34
   24354:	ldr	ip, [r0, #108]	; 0x6c
   24358:	mov	lr, r1
   2435c:	ldr	r1, [r0, #84]	; 0x54
   24360:	str	r0, [sp, #24]
   24364:	mov	sl, r2
   24368:	mov	r8, #0
   2436c:	mov	r0, #0
   24370:	cmp	ip, #1
   24374:	str	r1, [sp, #28]
   24378:	blt	243bc <__assert_fail@plt+0x12c5c>
   2437c:	ldr	r0, [sp, #24]
   24380:	mov	r7, #1
   24384:	mov	r1, ip
   24388:	ldr	r2, [r0, #116]	; 0x74
   2438c:	mov	r0, #0
   24390:	add	r6, r1, r0
   24394:	add	r6, r6, r6, lsr #31
   24398:	asr	r4, r6, #1
   2439c:	add	r5, r4, r4, lsl #1
   243a0:	add	r5, r2, r5, lsl #3
   243a4:	ldr	r5, [r5, #4]
   243a8:	cmp	r5, sl
   243ac:	addlt	r0, r7, r6, asr #1
   243b0:	movge	r1, r4
   243b4:	cmp	r0, r1
   243b8:	blt	24390 <__assert_fail@plt+0x12c30>
   243bc:	cmp	r0, ip
   243c0:	bge	248c4 <__assert_fail@plt+0x13164>
   243c4:	cmn	r0, #1
   243c8:	beq	248c4 <__assert_fail@plt+0x13164>
   243cc:	ldr	r1, [sp, #24]
   243d0:	add	r0, r0, r0, lsl #1
   243d4:	str	r0, [sp, #8]
   243d8:	ldr	r1, [r1, #116]	; 0x74
   243dc:	add	r0, r1, r0, lsl #3
   243e0:	ldr	r0, [r0, #4]
   243e4:	cmp	r0, sl
   243e8:	bne	248c4 <__assert_fail@plt+0x13164>
   243ec:	str	r3, [sp, #12]
   243f0:	mov	r9, #1
   243f4:	str	lr, [sp, #16]
   243f8:	ldr	r0, [sp, #8]
   243fc:	add	r0, r1, r0, lsl #3
   24400:	b	244a0 <__assert_fail@plt+0x12d40>
   24404:	mov	r0, #4
   24408:	str	r9, [sp, #36]	; 0x24
   2440c:	mov	r4, r1
   24410:	str	r9, [sp, #32]
   24414:	bl	2b260 <__assert_fail@plt+0x19b00>
   24418:	cmp	r0, #0
   2441c:	str	r0, [sp, #40]	; 0x28
   24420:	beq	24738 <__assert_fail@plt+0x12fd8>
   24424:	str	r4, [r0]
   24428:	mov	r0, #0
   2442c:	str	r0, [fp, #-32]	; 0xffffffe0
   24430:	ldr	r1, [sp, #28]
   24434:	sub	r0, fp, #32
   24438:	add	r2, sp, #32
   2443c:	bl	24a10 <__assert_fail@plt+0x132b0>
   24440:	ldr	r4, [sp, #24]
   24444:	ldr	r1, [r4, #100]	; 0x64
   24448:	str	r0, [r1, r7, lsl #2]
   2444c:	ldr	r0, [sp, #40]	; 0x28
   24450:	bl	141b8 <__assert_fail@plt+0x2a58>
   24454:	ldr	r0, [r4, #100]	; 0x64
   24458:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2445c:	ldr	r0, [r0, r7, lsl #2]
   24460:	cmp	r1, #0
   24464:	mov	r2, r1
   24468:	movwne	r2, #1
   2446c:	clz	r0, r0
   24470:	lsr	r0, r0, #5
   24474:	ands	r0, r0, r2
   24478:	ldreq	r1, [sp, #20]
   2447c:	str	r1, [sp, #20]
   24480:	ldr	lr, [sp, #16]
   24484:	cmp	r0, #0
   24488:	cmpne	r0, #4
   2448c:	bne	248ac <__assert_fail@plt+0x1314c>
   24490:	ldrb	r1, [r8, #20]
   24494:	add	r0, r8, #24
   24498:	cmp	r1, #0
   2449c:	beq	248c0 <__assert_fail@plt+0x13160>
   244a0:	mov	r8, r0
   244a4:	ldr	r0, [lr, #4]
   244a8:	cmp	r0, #1
   244ac:	blt	24490 <__assert_fail@plt+0x12d30>
   244b0:	subs	r6, r0, #1
   244b4:	ldr	r2, [r8]
   244b8:	ldr	r0, [lr, #8]
   244bc:	mov	r3, #0
   244c0:	beq	244e8 <__assert_fail@plt+0x12d88>
   244c4:	mov	r1, r6
   244c8:	add	r7, r3, r1
   244cc:	lsr	r5, r7, #1
   244d0:	ldr	r4, [r0, r5, lsl #2]
   244d4:	cmp	r4, r2
   244d8:	addlt	r3, r9, r7, lsr #1
   244dc:	movge	r1, r5
   244e0:	cmp	r3, r1
   244e4:	bcc	244c8 <__assert_fail@plt+0x12d68>
   244e8:	ldr	r1, [r0, r3, lsl #2]
   244ec:	cmp	r1, r2
   244f0:	bne	24490 <__assert_fail@plt+0x12d30>
   244f4:	ldr	r3, [r8, #12]
   244f8:	ldr	r1, [r8, #8]
   244fc:	add	r3, r3, sl
   24500:	sub	r7, r3, r1
   24504:	cmp	r7, sl
   24508:	bne	245f4 <__assert_fail@plt+0x12e94>
   2450c:	ldr	r1, [sp, #28]
   24510:	add	r2, r2, r2, lsl #1
   24514:	cmp	r6, #0
   24518:	ldr	r1, [r1, #20]
   2451c:	add	r1, r1, r2, lsl #2
   24520:	mov	r2, #0
   24524:	ldr	r1, [r1, #8]
   24528:	ldr	r4, [r1]
   2452c:	beq	24550 <__assert_fail@plt+0x12df0>
   24530:	add	r1, r2, r6
   24534:	lsr	r3, r1, #1
   24538:	ldr	r7, [r0, r3, lsl #2]
   2453c:	cmp	r7, r4
   24540:	addlt	r2, r9, r1, lsr #1
   24544:	movge	r6, r3
   24548:	cmp	r2, r6
   2454c:	bcc	24530 <__assert_fail@plt+0x12dd0>
   24550:	ldr	r1, [r0, r2, lsl #2]
   24554:	mov	r0, #4
   24558:	cmp	r1, r4
   2455c:	beq	24484 <__assert_fail@plt+0x12d24>
   24560:	mov	r0, #4
   24564:	str	r9, [sp, #36]	; 0x24
   24568:	str	r9, [sp, #32]
   2456c:	bl	2b260 <__assert_fail@plt+0x19b00>
   24570:	cmp	r0, #0
   24574:	str	r0, [sp, #40]	; 0x28
   24578:	beq	24724 <__assert_fail@plt+0x12fc4>
   2457c:	mov	r6, #0
   24580:	str	r4, [r0]
   24584:	ldr	r0, [sp, #28]
   24588:	ldr	r2, [sp, #12]
   2458c:	ldr	r3, [fp, #8]
   24590:	add	r4, sp, #32
   24594:	str	r6, [fp, #-32]	; 0xffffffe0
   24598:	mov	r1, r4
   2459c:	bl	24210 <__assert_fail@plt+0x12ab0>
   245a0:	ldr	r5, [sp, #16]
   245a4:	mov	r7, r0
   245a8:	mov	r1, r4
   245ac:	mov	r0, r5
   245b0:	bl	21158 <__assert_fail@plt+0xf9f8>
   245b4:	mov	r4, r0
   245b8:	ldr	r0, [sp, #40]	; 0x28
   245bc:	bl	141b8 <__assert_fail@plt+0x2a58>
   245c0:	orr	r0, r7, r6
   245c4:	mov	lr, r5
   245c8:	orrs	r0, r0, r4
   245cc:	mov	r0, #2
   245d0:	beq	24484 <__assert_fail@plt+0x12d24>
   245d4:	cmp	r7, #0
   245d8:	mov	r0, #1
   245dc:	movne	r4, r7
   245e0:	cmp	r6, #0
   245e4:	movne	r4, r6
   245e8:	str	r4, [fp, #-32]	; 0xffffffe0
   245ec:	str	r4, [sp, #20]
   245f0:	b	24484 <__assert_fail@plt+0x12d24>
   245f4:	ldr	r0, [sp, #24]
   245f8:	ldr	r0, [r0, #100]	; 0x64
   245fc:	ldr	r5, [r0, r7, lsl #2]
   24600:	ldr	r0, [sp, #28]
   24604:	ldr	r0, [r0, #12]
   24608:	cmp	r5, #0
   2460c:	ldr	r1, [r0, r2, lsl #2]
   24610:	beq	24404 <__assert_fail@plt+0x12ca4>
   24614:	ldr	ip, [r5, #8]
   24618:	cmp	ip, #0
   2461c:	ble	246dc <__assert_fail@plt+0x12f7c>
   24620:	ldr	r0, [r5, #12]
   24624:	subs	r3, ip, #1
   24628:	mov	r2, #0
   2462c:	str	r7, [sp, #4]
   24630:	beq	24654 <__assert_fail@plt+0x12ef4>
   24634:	add	r6, r2, r3
   24638:	lsr	r7, r6, #1
   2463c:	ldr	r4, [r0, r7, lsl #2]
   24640:	cmp	r4, r1
   24644:	addlt	r2, r9, r6, lsr #1
   24648:	movge	r3, r7
   2464c:	cmp	r2, r3
   24650:	bcc	24634 <__assert_fail@plt+0x12ed4>
   24654:	ldr	r2, [r0, r2, lsl #2]
   24658:	mov	r0, #4
   2465c:	cmp	r2, r1
   24660:	beq	24484 <__assert_fail@plt+0x12d24>
   24664:	ldr	r7, [sp, #4]
   24668:	mov	r4, r1
   2466c:	cmp	ip, #1
   24670:	str	ip, [sp, #36]	; 0x24
   24674:	blt	246e4 <__assert_fail@plt+0x12f84>
   24678:	lsl	r0, ip, #2
   2467c:	str	ip, [sp, #32]
   24680:	bl	2b260 <__assert_fail@plt+0x19b00>
   24684:	cmp	r0, #0
   24688:	str	r0, [sp, #40]	; 0x28
   2468c:	beq	2478c <__assert_fail@plt+0x1302c>
   24690:	ldr	r2, [r5, #8]
   24694:	ldr	r1, [r5, #12]
   24698:	mov	r5, r0
   2469c:	lsl	r2, r2, #2
   246a0:	bl	11484 <memcpy@plt>
   246a4:	ldr	r1, [sp, #32]
   246a8:	mov	r6, #0
   246ac:	str	r6, [fp, #-32]	; 0xffffffe0
   246b0:	cmp	r1, #0
   246b4:	beq	246f8 <__assert_fail@plt+0x12f98>
   246b8:	ldr	r0, [sp, #36]	; 0x24
   246bc:	cmp	r0, #0
   246c0:	bne	247a0 <__assert_fail@plt+0x13040>
   246c4:	str	r4, [r5]
   246c8:	str	r9, [sp, #36]	; 0x24
   246cc:	mov	r6, #0
   246d0:	cmp	r6, #0
   246d4:	beq	24430 <__assert_fail@plt+0x12cd0>
   246d8:	b	24764 <__assert_fail@plt+0x13004>
   246dc:	mov	r4, r1
   246e0:	str	ip, [sp, #36]	; 0x24
   246e4:	mov	r6, #0
   246e8:	str	r6, [sp, #36]	; 0x24
   246ec:	str	r6, [sp, #32]
   246f0:	str	r6, [sp, #40]	; 0x28
   246f4:	str	r6, [fp, #-32]	; 0xffffffe0
   246f8:	mov	r0, #4
   246fc:	str	r9, [sp, #36]	; 0x24
   24700:	str	r9, [sp, #32]
   24704:	bl	2b260 <__assert_fail@plt+0x19b00>
   24708:	cmp	r0, #0
   2470c:	str	r0, [sp, #40]	; 0x28
   24710:	beq	24758 <__assert_fail@plt+0x12ff8>
   24714:	str	r4, [r0]
   24718:	cmp	r6, #0
   2471c:	beq	24430 <__assert_fail@plt+0x12cd0>
   24720:	b	24764 <__assert_fail@plt+0x13004>
   24724:	mov	r0, #0
   24728:	mov	r6, #12
   2472c:	str	r0, [sp, #32]
   24730:	str	r0, [sp, #36]	; 0x24
   24734:	b	24584 <__assert_fail@plt+0x12e24>
   24738:	mov	r0, #0
   2473c:	mov	r1, #12
   24740:	str	r0, [sp, #32]
   24744:	str	r0, [sp, #36]	; 0x24
   24748:	mov	r0, #12
   2474c:	str	r1, [fp, #-32]	; 0xffffffe0
   24750:	str	r0, [sp, #20]
   24754:	b	24784 <__assert_fail@plt+0x13024>
   24758:	mov	r0, #0
   2475c:	str	r0, [sp, #32]
   24760:	str	r0, [sp, #36]	; 0x24
   24764:	clz	r0, r6
   24768:	lsr	r4, r0, #5
   2476c:	ldr	r0, [sp, #40]	; 0x28
   24770:	bl	141b8 <__assert_fail@plt+0x2a58>
   24774:	cmp	r4, #0
   24778:	movwne	r6, #12
   2477c:	str	r6, [sp, #20]
   24780:	str	r6, [fp, #-32]	; 0xffffffe0
   24784:	mov	r0, #1
   24788:	b	24480 <__assert_fail@plt+0x12d20>
   2478c:	mov	r0, #0
   24790:	mov	r6, #12
   24794:	str	r0, [sp, #32]
   24798:	str	r0, [sp, #36]	; 0x24
   2479c:	b	246f4 <__assert_fail@plt+0x12f94>
   247a0:	cmp	r1, r0
   247a4:	bne	247d0 <__assert_fail@plt+0x13070>
   247a8:	lsl	r0, r1, #1
   247ac:	lsl	r1, r1, #3
   247b0:	str	r0, [sp, #32]
   247b4:	mov	r0, r5
   247b8:	bl	2b290 <__assert_fail@plt+0x19b30>
   247bc:	cmp	r0, #0
   247c0:	beq	248a4 <__assert_fail@plt+0x13144>
   247c4:	str	r0, [sp, #40]	; 0x28
   247c8:	mov	r5, r0
   247cc:	ldr	r0, [sp, #36]	; 0x24
   247d0:	ldr	r1, [r5]
   247d4:	cmp	r1, r4
   247d8:	ble	2484c <__assert_fail@plt+0x130ec>
   247dc:	cmp	r0, #1
   247e0:	blt	24880 <__assert_fail@plt+0x13120>
   247e4:	ands	r2, r0, #3
   247e8:	sub	r1, r0, #1
   247ec:	beq	24810 <__assert_fail@plt+0x130b0>
   247f0:	add	r6, r5, r0, lsl #2
   247f4:	mov	r3, r6
   247f8:	ldr	r7, [r3, #-4]!
   247fc:	subs	r2, r2, #1
   24800:	sub	r0, r0, #1
   24804:	str	r7, [r6]
   24808:	mov	r6, r3
   2480c:	bne	247f8 <__assert_fail@plt+0x13098>
   24810:	cmp	r1, #3
   24814:	bcc	24844 <__assert_fail@plt+0x130e4>
   24818:	add	r1, r5, r0, lsl #2
   2481c:	sub	r1, r1, #8
   24820:	ldr	r6, [r1, #4]
   24824:	ldmda	r1, {r2, r3, r7}
   24828:	sub	ip, r1, #4
   2482c:	sub	r0, r0, #4
   24830:	cmp	r0, #0
   24834:	stm	ip, {r2, r3, r7}
   24838:	str	r6, [r1, #8]
   2483c:	sub	r1, r1, #16
   24840:	bgt	24820 <__assert_fail@plt+0x130c0>
   24844:	mov	r0, #0
   24848:	b	24880 <__assert_fail@plt+0x13120>
   2484c:	add	r1, r5, r0, lsl #2
   24850:	ldr	r2, [r1, #-4]
   24854:	cmp	r2, r4
   24858:	ble	24880 <__assert_fail@plt+0x13120>
   2485c:	sub	r0, r0, #2
   24860:	mov	r3, r4
   24864:	str	r2, [r1]
   24868:	sub	r0, r0, #1
   2486c:	ldr	r2, [r1, #-8]
   24870:	sub	r1, r1, #4
   24874:	cmp	r2, r3
   24878:	bgt	24864 <__assert_fail@plt+0x13104>
   2487c:	add	r0, r0, #2
   24880:	str	r4, [r5, r0, lsl #2]
   24884:	ldr	r7, [sp, #4]
   24888:	mov	r6, #0
   2488c:	ldr	r0, [sp, #36]	; 0x24
   24890:	add	r0, r0, #1
   24894:	str	r0, [sp, #36]	; 0x24
   24898:	cmp	r6, #0
   2489c:	beq	24430 <__assert_fail@plt+0x12cd0>
   248a0:	b	24764 <__assert_fail@plt+0x13004>
   248a4:	mov	r6, #0
   248a8:	b	24764 <__assert_fail@plt+0x13004>
   248ac:	cmp	r0, #2
   248b0:	bne	248d0 <__assert_fail@plt+0x13170>
   248b4:	ldr	r0, [sp, #24]
   248b8:	ldr	r1, [r0, #116]	; 0x74
   248bc:	b	243f8 <__assert_fail@plt+0x12c98>
   248c0:	mov	r8, #0
   248c4:	mov	r0, r8
   248c8:	sub	sp, fp, #28
   248cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248d0:	ldr	r8, [sp, #20]
   248d4:	b	248c4 <__assert_fail@plt+0x13164>
   248d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248dc:	add	fp, sp, #28
   248e0:	sub	sp, sp, #4
   248e4:	ldr	r4, [fp, #8]
   248e8:	mov	r9, r3
   248ec:	mov	r7, r2
   248f0:	mov	r8, r1
   248f4:	mov	sl, r0
   248f8:	mov	r5, #1
   248fc:	b	24914 <__assert_fail@plt+0x131b4>
   24900:	cmp	r2, #0
   24904:	beq	249f8 <__assert_fail@plt+0x13298>
   24908:	add	r0, r0, r7, lsl #2
   2490c:	ldr	r0, [r0, #8]
   24910:	ldr	r7, [r0]
   24914:	ldr	r0, [r8, #4]
   24918:	cmp	r0, #1
   2491c:	blt	24964 <__assert_fail@plt+0x13204>
   24920:	subs	r2, r0, #1
   24924:	ldr	r0, [r8, #8]
   24928:	mov	ip, r4
   2492c:	mov	r1, #0
   24930:	beq	24954 <__assert_fail@plt+0x131f4>
   24934:	add	r3, r1, r2
   24938:	lsr	r6, r3, #1
   2493c:	ldr	r4, [r0, r6, lsl #2]
   24940:	cmp	r4, r7
   24944:	addlt	r1, r5, r3, lsr #1
   24948:	movge	r2, r6
   2494c:	cmp	r1, r2
   24950:	bcc	24934 <__assert_fail@plt+0x131d4>
   24954:	ldr	r0, [r0, r1, lsl #2]
   24958:	mov	r4, ip
   2495c:	cmp	r0, r7
   24960:	beq	249f8 <__assert_fail@plt+0x13298>
   24964:	ldr	r0, [sl]
   24968:	add	r1, r0, r7, lsl #3
   2496c:	ldrb	r1, [r1, #4]
   24970:	cmp	r1, r4
   24974:	bne	24984 <__assert_fail@plt+0x13224>
   24978:	ldr	r0, [r0, r7, lsl #3]
   2497c:	cmp	r0, r9
   24980:	beq	249dc <__assert_fail@plt+0x1327c>
   24984:	mov	r0, r8
   24988:	mov	r1, r7
   2498c:	bl	212e4 <__assert_fail@plt+0xfb84>
   24990:	cmp	r0, #0
   24994:	beq	24a04 <__assert_fail@plt+0x132a4>
   24998:	ldr	r0, [sl, #20]
   2499c:	add	r7, r7, r7, lsl #1
   249a0:	add	r1, r0, r7, lsl #2
   249a4:	ldr	r2, [r1, #4]
   249a8:	cmp	r2, #2
   249ac:	bne	24900 <__assert_fail@plt+0x131a0>
   249b0:	ldr	r0, [r1, #8]
   249b4:	mov	r1, r8
   249b8:	mov	r3, r9
   249bc:	ldr	r2, [r0, #4]
   249c0:	mov	r0, sl
   249c4:	str	r4, [sp]
   249c8:	bl	248d8 <__assert_fail@plt+0x13178>
   249cc:	cmp	r0, #0
   249d0:	bne	249fc <__assert_fail@plt+0x1329c>
   249d4:	ldr	r0, [sl, #20]
   249d8:	b	24908 <__assert_fail@plt+0x131a8>
   249dc:	cmp	r4, #9
   249e0:	bne	249f8 <__assert_fail@plt+0x13298>
   249e4:	mov	r0, r8
   249e8:	mov	r1, r7
   249ec:	bl	212e4 <__assert_fail@plt+0xfb84>
   249f0:	cmp	r0, #0
   249f4:	beq	24a04 <__assert_fail@plt+0x132a4>
   249f8:	mov	r0, #0
   249fc:	sub	sp, fp, #28
   24a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a04:	mov	r0, #12
   24a08:	sub	sp, fp, #28
   24a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a14:	add	fp, sp, #28
   24a18:	sub	sp, sp, #4
   24a1c:	ldr	r9, [r2, #4]
   24a20:	cmp	r9, #0
   24a24:	beq	24ce8 <__assert_fail@plt+0x13588>
   24a28:	mov	r6, r2
   24a2c:	mov	r8, r1
   24a30:	cmp	r9, #1
   24a34:	mov	r7, r9
   24a38:	blt	24b24 <__assert_fail@plt+0x133c4>
   24a3c:	ldr	ip, [r6, #8]
   24a40:	mov	sl, #0
   24a44:	cmp	r9, #4
   24a48:	mov	r7, r9
   24a4c:	bcc	24b0c <__assert_fail@plt+0x133ac>
   24a50:	mov	r3, #0
   24a54:	bic	sl, r9, #3
   24a58:	mov	r1, #1
   24a5c:	str	r8, [sp]
   24a60:	vdup.32	q8, r3
   24a64:	sub	r4, sl, #4
   24a68:	add	r1, r1, r4, lsr #2
   24a6c:	cmp	r4, #12
   24a70:	and	lr, r1, #3
   24a74:	vmov.32	d16[0], r9
   24a78:	bcc	24acc <__assert_fail@plt+0x1336c>
   24a7c:	sub	r5, r1, lr
   24a80:	mov	r3, #0
   24a84:	mov	r4, #64	; 0x40
   24a88:	mov	r7, ip
   24a8c:	mov	r1, ip
   24a90:	vld1.32	{d18-d19}, [r1], r4
   24a94:	add	r8, r7, #16
   24a98:	add	r2, r7, #32
   24a9c:	subs	r5, r5, #4
   24aa0:	add	r3, r3, #16
   24aa4:	vld1.32	{d20-d21}, [r8]
   24aa8:	vadd.i32	q8, q9, q8
   24aac:	vld1.32	{d18-d19}, [r2]
   24ab0:	add	r2, r7, #48	; 0x30
   24ab4:	mov	r7, r1
   24ab8:	vadd.i32	q8, q10, q8
   24abc:	vld1.32	{d20-d21}, [r2]
   24ac0:	vadd.i32	q8, q9, q8
   24ac4:	vadd.i32	q8, q10, q8
   24ac8:	bne	24a90 <__assert_fail@plt+0x13330>
   24acc:	cmp	lr, #0
   24ad0:	beq	24aec <__assert_fail@plt+0x1338c>
   24ad4:	add	r1, ip, r3, lsl #2
   24ad8:	rsb	r3, lr, #0
   24adc:	vld1.32	{d18-d19}, [r1]!
   24ae0:	adds	r3, r3, #1
   24ae4:	vadd.i32	q8, q9, q8
   24ae8:	bcc	24adc <__assert_fail@plt+0x1337c>
   24aec:	vext.8	q9, q8, q8, #8
   24af0:	ldr	r8, [sp]
   24af4:	cmp	r9, sl
   24af8:	vadd.i32	q8, q8, q9
   24afc:	vdup.32	q9, d16[1]
   24b00:	vadd.i32	q8, q8, q9
   24b04:	vmov.32	r7, d16[0]
   24b08:	beq	24b24 <__assert_fail@plt+0x133c4>
   24b0c:	add	r1, ip, sl, lsl #2
   24b10:	sub	r2, r9, sl
   24b14:	ldr	r3, [r1], #4
   24b18:	subs	r2, r2, #1
   24b1c:	add	r7, r3, r7
   24b20:	bne	24b14 <__assert_fail@plt+0x133b4>
   24b24:	ldr	r1, [r8, #68]	; 0x44
   24b28:	ldr	r2, [r8, #32]
   24b2c:	str	r0, [sp]
   24b30:	and	r1, r1, r7
   24b34:	add	r3, r1, r1, lsl #1
   24b38:	ldr	r1, [r2, r3, lsl #2]
   24b3c:	cmp	r1, #1
   24b40:	blt	24bbc <__assert_fail@plt+0x1345c>
   24b44:	add	r2, r2, r3, lsl #2
   24b48:	sub	ip, r9, #1
   24b4c:	mov	r5, #0
   24b50:	ldr	lr, [r2, #8]
   24b54:	cmp	r6, #0
   24b58:	bne	24b70 <__assert_fail@plt+0x13410>
   24b5c:	add	r5, r5, #1
   24b60:	cmp	r5, r1
   24b64:	bge	24bbc <__assert_fail@plt+0x1345c>
   24b68:	cmp	r6, #0
   24b6c:	beq	24b5c <__assert_fail@plt+0x133fc>
   24b70:	ldr	r4, [lr, r5, lsl #2]
   24b74:	ldr	r3, [r4]
   24b78:	cmp	r7, r3
   24b7c:	bne	24b5c <__assert_fail@plt+0x133fc>
   24b80:	ldr	r3, [r4, #8]
   24b84:	cmp	r3, r9
   24b88:	bne	24b5c <__assert_fail@plt+0x133fc>
   24b8c:	mov	r3, ip
   24b90:	add	r0, r3, #1
   24b94:	cmp	r0, #1
   24b98:	blt	24cdc <__assert_fail@plt+0x1357c>
   24b9c:	ldr	r0, [r6, #8]
   24ba0:	ldr	r2, [r4, #12]
   24ba4:	ldr	r0, [r0, r3, lsl #2]
   24ba8:	ldr	r2, [r2, r3, lsl #2]
   24bac:	sub	r3, r3, #1
   24bb0:	cmp	r2, r0
   24bb4:	beq	24b90 <__assert_fail@plt+0x13430>
   24bb8:	b	24b5c <__assert_fail@plt+0x133fc>
   24bbc:	mov	r0, #56	; 0x38
   24bc0:	mov	r1, #1
   24bc4:	bl	2b20c <__assert_fail@plt+0x19aac>
   24bc8:	cmp	r0, #0
   24bcc:	beq	24d14 <__assert_fail@plt+0x135b4>
   24bd0:	mov	r4, r0
   24bd4:	ldr	r0, [r6, #4]
   24bd8:	add	sl, r4, #4
   24bdc:	cmp	r0, #1
   24be0:	str	r0, [r4, #8]
   24be4:	blt	24cac <__assert_fail@plt+0x1354c>
   24be8:	str	r0, [r4, #4]
   24bec:	lsl	r0, r0, #2
   24bf0:	bl	2b260 <__assert_fail@plt+0x19b00>
   24bf4:	cmp	r0, #0
   24bf8:	str	r0, [r4, #12]
   24bfc:	beq	24d00 <__assert_fail@plt+0x135a0>
   24c00:	ldmib	r6, {r5, r6}
   24c04:	mov	r1, r6
   24c08:	mov	r9, r8
   24c0c:	lsl	r2, r5, #2
   24c10:	bl	11484 <memcpy@plt>
   24c14:	cmp	r5, #1
   24c18:	str	sl, [r4, #40]	; 0x28
   24c1c:	blt	24cc4 <__assert_fail@plt+0x13564>
   24c20:	movw	ip, #65280	; 0xff00
   24c24:	ldr	sl, [r9]
   24c28:	mov	lr, #32
   24c2c:	movt	ip, #3
   24c30:	add	r8, ip, #255	; 0xff
   24c34:	b	24c58 <__assert_fail@plt+0x134f8>
   24c38:	ldr	r0, [r1]
   24c3c:	tst	r0, ip
   24c40:	beq	24c4c <__assert_fail@plt+0x134ec>
   24c44:	orr	r0, r3, #128	; 0x80
   24c48:	strb	r0, [r4, #52]	; 0x34
   24c4c:	add	r6, r6, #4
   24c50:	subs	r5, r5, #1
   24c54:	beq	24cc4 <__assert_fail@plt+0x13564>
   24c58:	ldr	r0, [r6]
   24c5c:	add	r1, sl, r0, lsl #3
   24c60:	ldr	r0, [r1, #4]!
   24c64:	and	r3, r0, r8
   24c68:	cmp	r3, #1
   24c6c:	beq	24c4c <__assert_fail@plt+0x134ec>
   24c70:	ldrb	r2, [r4, #52]	; 0x34
   24c74:	and	r3, lr, r0, lsr #15
   24c78:	uxtb	r0, r0
   24c7c:	cmp	r0, #12
   24c80:	orr	r3, r2, r3
   24c84:	strb	r3, [r4, #52]	; 0x34
   24c88:	beq	24c44 <__assert_fail@plt+0x134e4>
   24c8c:	cmp	r0, #4
   24c90:	beq	24ca4 <__assert_fail@plt+0x13544>
   24c94:	cmp	r0, #2
   24c98:	bne	24c38 <__assert_fail@plt+0x134d8>
   24c9c:	orr	r0, r3, #16
   24ca0:	b	24c48 <__assert_fail@plt+0x134e8>
   24ca4:	orr	r0, r3, #64	; 0x40
   24ca8:	b	24c48 <__assert_fail@plt+0x134e8>
   24cac:	mov	r0, #0
   24cb0:	mov	r9, r8
   24cb4:	str	r0, [sl]
   24cb8:	str	r0, [sl, #4]
   24cbc:	str	r0, [sl, #8]
   24cc0:	str	sl, [r4, #40]	; 0x28
   24cc4:	mov	r0, r9
   24cc8:	mov	r1, r4
   24ccc:	mov	r2, r7
   24cd0:	bl	21908 <__assert_fail@plt+0x101a8>
   24cd4:	cmp	r0, #0
   24cd8:	bne	24cf4 <__assert_fail@plt+0x13594>
   24cdc:	mov	r0, r4
   24ce0:	sub	sp, fp, #28
   24ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ce8:	mov	r4, #0
   24cec:	str	r4, [r0]
   24cf0:	b	24cdc <__assert_fail@plt+0x1357c>
   24cf4:	mov	r0, r4
   24cf8:	bl	1b498 <__assert_fail@plt+0x9d38>
   24cfc:	b	24d14 <__assert_fail@plt+0x135b4>
   24d00:	mov	r0, #0
   24d04:	str	r0, [r4, #4]
   24d08:	str	r0, [r4, #8]
   24d0c:	mov	r0, r4
   24d10:	bl	141b8 <__assert_fail@plt+0x2a58>
   24d14:	ldr	r1, [sp]
   24d18:	mov	r0, #12
   24d1c:	mov	r4, #0
   24d20:	str	r0, [r1]
   24d24:	b	24cdc <__assert_fail@plt+0x1357c>
   24d28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24d2c:	add	fp, sp, #24
   24d30:	ldr	lr, [r0]
   24d34:	add	r7, lr, r1, lsl #3
   24d38:	ldrb	r9, [r7, #4]
   24d3c:	cmp	r9, #7
   24d40:	beq	24f18 <__assert_fail@plt+0x137b8>
   24d44:	ldr	ip, [r2, #80]	; 0x50
   24d48:	mov	r6, #1
   24d4c:	cmp	ip, #1
   24d50:	beq	24d90 <__assert_fail@plt+0x13630>
   24d54:	ldr	r5, [r2, #28]
   24d58:	add	r7, r3, #1
   24d5c:	cmp	r7, r5
   24d60:	bge	24d90 <__assert_fail@plt+0x13630>
   24d64:	ldr	r6, [r2, #8]
   24d68:	sub	r5, r5, r3
   24d6c:	add	r7, r6, r3, lsl #2
   24d70:	mov	r6, #1
   24d74:	ldr	r4, [r7, r6, lsl #2]
   24d78:	cmn	r4, #1
   24d7c:	bne	24d90 <__assert_fail@plt+0x13630>
   24d80:	add	r6, r6, #1
   24d84:	cmp	r5, r6
   24d88:	bne	24d74 <__assert_fail@plt+0x13614>
   24d8c:	mov	r6, r5
   24d90:	mov	r8, #0
   24d94:	cmp	r9, #5
   24d98:	bne	24de0 <__assert_fail@plt+0x13680>
   24d9c:	cmp	r6, #2
   24da0:	blt	24f08 <__assert_fail@plt+0x137a8>
   24da4:	ldr	r0, [r0, #128]	; 0x80
   24da8:	tst	r0, #64	; 0x40
   24dac:	bne	24dc0 <__assert_fail@plt+0x13660>
   24db0:	ldr	r1, [r2, #4]
   24db4:	ldrb	r1, [r1, r3]
   24db8:	cmp	r1, #10
   24dbc:	beq	24f08 <__assert_fail@plt+0x137a8>
   24dc0:	tst	r0, #128	; 0x80
   24dc4:	beq	24f04 <__assert_fail@plt+0x137a4>
   24dc8:	ldr	r0, [r2, #4]
   24dcc:	ldrb	r0, [r0, r3]
   24dd0:	cmp	r0, #0
   24dd4:	movne	r8, r6
   24dd8:	mov	r0, r8
   24ddc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24de0:	cmp	r9, #6
   24de4:	bne	24f08 <__assert_fail@plt+0x137a8>
   24de8:	cmp	r6, #2
   24dec:	blt	24f08 <__assert_fail@plt+0x137a8>
   24df0:	ldr	r7, [lr, r1, lsl #3]
   24df4:	ldr	r0, [r7, #32]
   24df8:	cmp	r0, #0
   24dfc:	bne	24e18 <__assert_fail@plt+0x136b8>
   24e00:	ldr	r1, [r7, #36]	; 0x24
   24e04:	cmp	r1, #0
   24e08:	bne	24e18 <__assert_fail@plt+0x136b8>
   24e0c:	ldr	r1, [r7, #20]
   24e10:	cmp	r1, #0
   24e14:	beq	24f10 <__assert_fail@plt+0x137b0>
   24e18:	cmp	ip, #1
   24e1c:	bne	24e2c <__assert_fail@plt+0x136cc>
   24e20:	ldr	r1, [r2, #4]
   24e24:	ldrb	r5, [r1, r3]
   24e28:	b	24e34 <__assert_fail@plt+0x136d4>
   24e2c:	ldr	r1, [r2, #8]
   24e30:	ldr	r5, [r1, r3, lsl #2]
   24e34:	ldr	r1, [r7, #20]
   24e38:	cmp	r1, #1
   24e3c:	blt	24e60 <__assert_fail@plt+0x13700>
   24e40:	ldr	r2, [r7]
   24e44:	mov	r3, #0
   24e48:	ldr	r4, [r2, r3, lsl #2]
   24e4c:	cmp	r5, r4
   24e50:	beq	24ed8 <__assert_fail@plt+0x13778>
   24e54:	add	r3, r3, #1
   24e58:	cmp	r3, r1
   24e5c:	blt	24e48 <__assert_fail@plt+0x136e8>
   24e60:	ldr	r1, [r7, #36]	; 0x24
   24e64:	cmp	r1, #1
   24e68:	blt	24e9c <__assert_fail@plt+0x1373c>
   24e6c:	mov	r4, #0
   24e70:	ldr	r0, [r7, #12]
   24e74:	ldr	r1, [r0, r4, lsl #2]
   24e78:	mov	r0, r5
   24e7c:	bl	1140c <iswctype@plt>
   24e80:	cmp	r0, #0
   24e84:	bne	24ed8 <__assert_fail@plt+0x13778>
   24e88:	ldr	r0, [r7, #36]	; 0x24
   24e8c:	add	r4, r4, #1
   24e90:	cmp	r4, r0
   24e94:	blt	24e70 <__assert_fail@plt+0x13710>
   24e98:	ldr	r0, [r7, #32]
   24e9c:	cmp	r0, #1
   24ea0:	blt	24ee0 <__assert_fail@plt+0x13780>
   24ea4:	ldr	r1, [r7, #4]
   24ea8:	mov	r2, #0
   24eac:	b	24ebc <__assert_fail@plt+0x1375c>
   24eb0:	add	r2, r2, #1
   24eb4:	cmp	r2, r0
   24eb8:	bge	24ee0 <__assert_fail@plt+0x13780>
   24ebc:	ldr	r3, [r1, r2, lsl #2]
   24ec0:	cmp	r3, r5
   24ec4:	bhi	24eb0 <__assert_fail@plt+0x13750>
   24ec8:	ldr	r3, [r7, #8]
   24ecc:	ldr	r3, [r3, r2, lsl #2]
   24ed0:	cmp	r5, r3
   24ed4:	bhi	24eb0 <__assert_fail@plt+0x13750>
   24ed8:	mov	r0, r6
   24edc:	b	24ee4 <__assert_fail@plt+0x13784>
   24ee0:	mov	r0, #0
   24ee4:	ldrb	r1, [r7, #16]
   24ee8:	tst	r1, #1
   24eec:	bne	24ef4 <__assert_fail@plt+0x13794>
   24ef0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24ef4:	cmp	r0, #0
   24ef8:	bgt	24f08 <__assert_fail@plt+0x137a8>
   24efc:	cmp	r6, #1
   24f00:	movle	r6, #1
   24f04:	mov	r8, r6
   24f08:	mov	r0, r8
   24f0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24f10:	mov	r5, #0
   24f14:	b	24e34 <__assert_fail@plt+0x136d4>
   24f18:	ldr	r0, [r2, #4]
   24f1c:	mov	r8, #0
   24f20:	ldrb	r6, [r0, r3]
   24f24:	cmp	r6, #194	; 0xc2
   24f28:	bcc	24f08 <__assert_fail@plt+0x137a8>
   24f2c:	ldr	r2, [r2, #48]	; 0x30
   24f30:	add	r1, r3, #2
   24f34:	cmp	r1, r2
   24f38:	bgt	24f08 <__assert_fail@plt+0x137a8>
   24f3c:	add	r1, r3, r0
   24f40:	cmp	r6, #223	; 0xdf
   24f44:	ldrb	r7, [r1, #1]
   24f48:	bhi	24f70 <__assert_fail@plt+0x13810>
   24f4c:	cmp	r7, #192	; 0xc0
   24f50:	mov	r0, #0
   24f54:	movwcc	r0, #1
   24f58:	lsl	r8, r0, #1
   24f5c:	sxtb	r0, r7
   24f60:	cmn	r0, #1
   24f64:	movwgt	r8, #0
   24f68:	mov	r0, r8
   24f6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24f70:	cmp	r6, #239	; 0xef
   24f74:	bhi	24f90 <__assert_fail@plt+0x13830>
   24f78:	mov	r0, #3
   24f7c:	cmp	r6, #224	; 0xe0
   24f80:	bne	24fec <__assert_fail@plt+0x1388c>
   24f84:	cmp	r7, #160	; 0xa0
   24f88:	bcc	24f08 <__assert_fail@plt+0x137a8>
   24f8c:	b	24fec <__assert_fail@plt+0x1388c>
   24f90:	cmp	r6, #247	; 0xf7
   24f94:	bhi	24fb0 <__assert_fail@plt+0x13850>
   24f98:	mov	r0, #4
   24f9c:	cmp	r6, #240	; 0xf0
   24fa0:	bne	24fec <__assert_fail@plt+0x1388c>
   24fa4:	cmp	r7, #144	; 0x90
   24fa8:	bcc	24f08 <__assert_fail@plt+0x137a8>
   24fac:	b	24fec <__assert_fail@plt+0x1388c>
   24fb0:	cmp	r6, #251	; 0xfb
   24fb4:	bhi	24fd0 <__assert_fail@plt+0x13870>
   24fb8:	mov	r0, #5
   24fbc:	cmp	r6, #248	; 0xf8
   24fc0:	bne	24fec <__assert_fail@plt+0x1388c>
   24fc4:	cmp	r7, #136	; 0x88
   24fc8:	bcc	24f08 <__assert_fail@plt+0x137a8>
   24fcc:	b	24fec <__assert_fail@plt+0x1388c>
   24fd0:	cmp	r6, #253	; 0xfd
   24fd4:	bhi	24f08 <__assert_fail@plt+0x137a8>
   24fd8:	mov	r0, #6
   24fdc:	cmp	r6, #252	; 0xfc
   24fe0:	bne	24fec <__assert_fail@plt+0x1388c>
   24fe4:	cmp	r7, #132	; 0x84
   24fe8:	bcc	24f08 <__assert_fail@plt+0x137a8>
   24fec:	add	r3, r0, r3
   24ff0:	cmp	r3, r2
   24ff4:	bgt	24f08 <__assert_fail@plt+0x137a8>
   24ff8:	ldrb	r2, [r1, #1]
   24ffc:	sxtb	r3, r2
   25000:	cmn	r3, #1
   25004:	bgt	24f08 <__assert_fail@plt+0x137a8>
   25008:	cmp	r2, #191	; 0xbf
   2500c:	bhi	24f08 <__assert_fail@plt+0x137a8>
   25010:	ldrb	r2, [r1, #2]
   25014:	sxtb	r3, r2
   25018:	cmn	r3, #1
   2501c:	bgt	24f08 <__assert_fail@plt+0x137a8>
   25020:	cmp	r2, #191	; 0xbf
   25024:	bhi	24f08 <__assert_fail@plt+0x137a8>
   25028:	cmp	r0, #3
   2502c:	beq	24ef0 <__assert_fail@plt+0x13790>
   25030:	ldrb	r2, [r1, #3]
   25034:	sxtb	r3, r2
   25038:	cmn	r3, #1
   2503c:	bgt	24f08 <__assert_fail@plt+0x137a8>
   25040:	cmp	r2, #191	; 0xbf
   25044:	bhi	24f08 <__assert_fail@plt+0x137a8>
   25048:	cmp	r0, #4
   2504c:	beq	24ef0 <__assert_fail@plt+0x13790>
   25050:	ldrb	r2, [r1, #4]
   25054:	sxtb	r3, r2
   25058:	cmn	r3, #1
   2505c:	bgt	24f08 <__assert_fail@plt+0x137a8>
   25060:	cmp	r2, #191	; 0xbf
   25064:	bhi	24f08 <__assert_fail@plt+0x137a8>
   25068:	cmp	r0, #5
   2506c:	beq	24ef0 <__assert_fail@plt+0x13790>
   25070:	ldrsb	r1, [r1, #5]
   25074:	uxtb	r2, r1
   25078:	cmp	r2, #191	; 0xbf
   2507c:	movwhi	r0, #0
   25080:	cmn	r1, #1
   25084:	movwgt	r0, #0
   25088:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2508c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25090:	add	fp, sp, #24
   25094:	ldr	r4, [r1, #4]
   25098:	mov	r6, r0
   2509c:	mvn	r0, #0
   250a0:	mov	r8, #0
   250a4:	uxtab	r3, r0, r4
   250a8:	cmp	r3, #6
   250ac:	bhi	25248 <__assert_fail@plt+0x13ae8>
   250b0:	ldr	r0, [r6, #4]
   250b4:	mov	r9, r1
   250b8:	ldrb	r1, [r0, r2]
   250bc:	add	r7, pc, #4
   250c0:	sxtb	r0, r1
   250c4:	ldr	pc, [r7, r3, lsl #2]
   250c8:	andeq	r5, r2, r4, ror #1
   250cc:	andeq	r5, r2, r8, asr #4
   250d0:	strdeq	r5, [r2], -r8
   250d4:	andeq	r5, r2, r8, asr #4
   250d8:	andeq	r5, r2, r0, lsr #2
   250dc:	andeq	r5, r2, r8, asr #4
   250e0:	andeq	r5, r2, r8, lsl r1
   250e4:	ldrb	r3, [r9]
   250e8:	uxtb	r7, r0
   250ec:	cmp	r3, r7
   250f0:	beq	25154 <__assert_fail@plt+0x139f4>
   250f4:	b	25248 <__assert_fail@plt+0x13ae8>
   250f8:	ldr	r3, [r9]
   250fc:	ubfx	r7, r1, #5, #3
   25100:	mov	r5, #1
   25104:	ldr	r3, [r3, r7, lsl #2]
   25108:	and	r7, r1, #31
   2510c:	tst	r3, r5, lsl r7
   25110:	bne	25154 <__assert_fail@plt+0x139f4>
   25114:	b	25248 <__assert_fail@plt+0x13ae8>
   25118:	cmp	r0, #0
   2511c:	bmi	25248 <__assert_fail@plt+0x13ae8>
   25120:	cmp	r1, #0
   25124:	beq	25144 <__assert_fail@plt+0x139e4>
   25128:	cmp	r1, #10
   2512c:	bne	25154 <__assert_fail@plt+0x139f4>
   25130:	ldr	r3, [r6, #84]	; 0x54
   25134:	ldrb	r3, [r3, #128]	; 0x80
   25138:	tst	r3, #64	; 0x40
   2513c:	beq	25248 <__assert_fail@plt+0x13ae8>
   25140:	b	25154 <__assert_fail@plt+0x139f4>
   25144:	ldr	r3, [r6, #84]	; 0x54
   25148:	ldrb	r3, [r3, #128]	; 0x80
   2514c:	tst	r3, #128	; 0x80
   25150:	bne	25248 <__assert_fail@plt+0x13ae8>
   25154:	movw	r3, #65280	; 0xff00
   25158:	movt	r3, #3
   2515c:	tst	r4, r3
   25160:	beq	251a8 <__assert_fail@plt+0x13a48>
   25164:	cmn	r2, #1
   25168:	ble	251a0 <__assert_fail@plt+0x13a40>
   2516c:	ldr	r3, [r6, #48]	; 0x30
   25170:	cmp	r3, r2
   25174:	beq	25268 <__assert_fail@plt+0x13b08>
   25178:	ldr	r3, [r6, #80]	; 0x50
   2517c:	cmp	r3, #2
   25180:	blt	251b4 <__assert_fail@plt+0x13a54>
   25184:	ldr	r0, [r6, #8]
   25188:	ldr	r7, [r0, r2, lsl #2]
   2518c:	cmn	r7, #1
   25190:	bne	251e4 <__assert_fail@plt+0x13a84>
   25194:	sub	r2, r2, #1
   25198:	cmn	r2, #1
   2519c:	bne	25188 <__assert_fail@plt+0x13a28>
   251a0:	ldr	r1, [r6, #60]	; 0x3c
   251a4:	b	2520c <__assert_fail@plt+0x13aac>
   251a8:	mov	r8, #1
   251ac:	mov	r0, r8
   251b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   251b4:	ldr	r2, [r6, #68]	; 0x44
   251b8:	ubfx	r3, r1, #5, #3
   251bc:	and	r7, r1, #31
   251c0:	mov	r1, #1
   251c4:	ldr	r3, [r2, r3, lsl #2]
   251c8:	mov	r2, #0
   251cc:	tst	r3, r1, lsl r7
   251d0:	bne	25224 <__assert_fail@plt+0x13ac4>
   251d4:	mov	r1, #0
   251d8:	cmp	r0, #10
   251dc:	beq	251fc <__assert_fail@plt+0x13a9c>
   251e0:	b	2520c <__assert_fail@plt+0x13aac>
   251e4:	ldrb	r0, [r6, #78]	; 0x4e
   251e8:	cmp	r0, #0
   251ec:	bne	25278 <__assert_fail@plt+0x13b18>
   251f0:	mov	r1, #0
   251f4:	cmp	r7, #10
   251f8:	bne	2520c <__assert_fail@plt+0x13aac>
   251fc:	ldrb	r0, [r6, #77]	; 0x4d
   25200:	cmp	r0, #0
   25204:	movwne	r0, #1
   25208:	lsl	r1, r0, #1
   2520c:	and	r0, r1, #1
   25210:	tst	r4, #1024	; 0x400
   25214:	eor	r2, r0, #1
   25218:	beq	25224 <__assert_fail@plt+0x13ac4>
   2521c:	cmp	r0, #0
   25220:	beq	25248 <__assert_fail@plt+0x13ae8>
   25224:	ldr	r0, [r9, #4]
   25228:	cmp	r2, #0
   2522c:	bne	25238 <__assert_fail@plt+0x13ad8>
   25230:	ands	r2, r0, #2048	; 0x800
   25234:	bne	25248 <__assert_fail@plt+0x13ae8>
   25238:	tst	r1, #2
   2523c:	bne	25250 <__assert_fail@plt+0x13af0>
   25240:	ands	r2, r0, #8192	; 0x2000
   25244:	beq	25250 <__assert_fail@plt+0x13af0>
   25248:	mov	r0, r8
   2524c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25250:	uxth	r0, r0
   25254:	mov	r2, #1
   25258:	and	r1, r1, #8
   2525c:	eor	r0, r2, r0, lsr #15
   25260:	orr	r0, r0, r1, lsr #3
   25264:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25268:	ldr	r0, [r6, #88]	; 0x58
   2526c:	and	r0, r0, #2
   25270:	eor	r1, r0, #10
   25274:	b	2520c <__assert_fail@plt+0x13aac>
   25278:	mov	r0, r7
   2527c:	bl	1164c <iswalnum@plt>
   25280:	mov	r1, #1
   25284:	mov	r2, #0
   25288:	cmp	r7, #95	; 0x5f
   2528c:	beq	25224 <__assert_fail@plt+0x13ac4>
   25290:	cmp	r0, #0
   25294:	beq	251f0 <__assert_fail@plt+0x13a90>
   25298:	b	25224 <__assert_fail@plt+0x13ac4>
   2529c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252a0:	add	fp, sp, #28
   252a4:	sub	sp, sp, #4
   252a8:	vpush	{d8-d9}
   252ac:	sub	sp, sp, #2272	; 0x8e0
   252b0:	sub	sp, sp, #12288	; 0x3000
   252b4:	mov	lr, r0
   252b8:	mov	r0, #0
   252bc:	vmov.i32	q4, #0	; 0x00000000
   252c0:	mov	r8, r1
   252c4:	str	r0, [r1, #44]	; 0x2c
   252c8:	str	r0, [r1, #48]	; 0x30
   252cc:	sub	r0, fp, #1024	; 0x400
   252d0:	sub	r1, r0, #56	; 0x38
   252d4:	mov	r0, r1
   252d8:	vst1.64	{d8-d9}, [r0]!
   252dc:	vst1.64	{d8-d9}, [r0]
   252e0:	ldr	r0, [r8, #8]
   252e4:	cmp	r0, #0
   252e8:	ble	262bc <__assert_fail@plt+0x14b5c>
   252ec:	add	r0, lr, #96	; 0x60
   252f0:	mov	r2, #0
   252f4:	mov	r4, #0
   252f8:	str	lr, [sp, #140]	; 0x8c
   252fc:	str	r8, [sp, #12]
   25300:	str	r0, [sp, #4]
   25304:	add	r0, r0, #16
   25308:	str	r0, [sp]
   2530c:	add	r0, r1, #16
   25310:	str	r0, [sp, #8]
   25314:	b	2533c <__assert_fail@plt+0x13bdc>
   25318:	sub	r0, fp, #1024	; 0x400
   2531c:	mov	r4, r6
   25320:	sub	r0, r0, #56	; 0x38
   25324:	vst1.64	{d8-d9}, [r0]!
   25328:	vst1.64	{d8-d9}, [r0]
   2532c:	ldr	r0, [r8, #8]
   25330:	add	r2, r2, #1
   25334:	cmp	r2, r0
   25338:	bge	25ce4 <__assert_fail@plt+0x14584>
   2533c:	ldr	r0, [r8, #12]
   25340:	ldr	r1, [lr]
   25344:	mov	r6, r4
   25348:	str	r2, [sp, #24]
   2534c:	ldr	r0, [r0, r2, lsl #2]
   25350:	add	r5, r1, r0, lsl #3
   25354:	ldr	sl, [r5, #4]!
   25358:	uxtb	r3, sl
   2535c:	cmp	r3, #1
   25360:	str	r3, [sp, #64]	; 0x40
   25364:	bne	253e4 <__assert_fail@plt+0x13c84>
   25368:	ldrb	r2, [r1, r0, lsl #3]
   2536c:	str	r0, [sp, #16]
   25370:	sub	r0, fp, #1024	; 0x400
   25374:	mov	r4, r1
   25378:	sub	r7, r0, #56	; 0x38
   2537c:	mov	r0, #1
   25380:	mov	r1, r7
   25384:	ubfx	r3, r2, #5, #3
   25388:	and	r2, r2, #31
   2538c:	ldr	r7, [r7, r3, lsl #2]
   25390:	orr	r2, r7, r0, lsl r2
   25394:	str	r2, [r1, r3, lsl #2]
   25398:	movw	r2, #65280	; 0xff00
   2539c:	mov	r3, r4
   253a0:	movt	r2, #3
   253a4:	ands	r2, sl, r2
   253a8:	ldr	r2, [sp, #24]
   253ac:	beq	257f0 <__assert_fail@plt+0x14090>
   253b0:	tst	sl, #8192	; 0x2000
   253b4:	beq	25448 <__assert_fail@plt+0x13ce8>
   253b8:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   253bc:	sub	r0, fp, #1024	; 0x400
   253c0:	mov	r1, r3
   253c4:	sub	r3, r0, #56	; 0x38
   253c8:	vst1.64	{d8-d9}, [r3]!
   253cc:	vst1.64	{d8-d9}, [r3]
   253d0:	tst	r2, #1024	; 0x400
   253d4:	bne	25438 <__assert_fail@plt+0x13cd8>
   253d8:	ldr	r2, [sp, #24]
   253dc:	mov	r4, r6
   253e0:	b	2532c <__assert_fail@plt+0x13bcc>
   253e4:	cmp	r3, #7
   253e8:	beq	25484 <__assert_fail@plt+0x13d24>
   253ec:	cmp	r3, #5
   253f0:	beq	254d8 <__assert_fail@plt+0x13d78>
   253f4:	cmp	r3, #3
   253f8:	bne	25cdc <__assert_fail@plt+0x1457c>
   253fc:	ldr	r2, [r1, r0, lsl #3]
   25400:	str	r0, [sp, #16]
   25404:	sub	r0, fp, #1024	; 0x400
   25408:	mov	r4, r1
   2540c:	sub	r3, r0, #56	; 0x38
   25410:	vld1.64	{d16-d17}, [r3]
   25414:	vld1.32	{d18-d19}, [r2]!
   25418:	vorr	q8, q8, q9
   2541c:	vst1.64	{d16-d17}, [r3]
   25420:	vld1.32	{d16-d17}, [r2]
   25424:	ldr	r2, [sp, #8]
   25428:	vld1.32	{d18-d19}, [r2]
   2542c:	vorr	q8, q9, q8
   25430:	vst1.32	{d16-d17}, [r2]
   25434:	b	25398 <__assert_fail@plt+0x13c38>
   25438:	ldr	r2, [sp, #24]
   2543c:	mov	r0, #1024	; 0x400
   25440:	mov	r3, r1
   25444:	str	r0, [fp, #-1080]	; 0xfffffbc8
   25448:	tst	sl, #32768	; 0x8000
   2544c:	bne	25318 <__assert_fail@plt+0x13bb8>
   25450:	tst	sl, #1024	; 0x400
   25454:	beq	25708 <__assert_fail@plt+0x13fa8>
   25458:	ldr	r0, [sp, #64]	; 0x40
   2545c:	cmp	r0, #1
   25460:	bne	25524 <__assert_fail@plt+0x13dc4>
   25464:	ldrb	r2, [r5, #2]
   25468:	tst	r2, #64	; 0x40
   2546c:	bne	25524 <__assert_fail@plt+0x13dc4>
   25470:	sub	r0, fp, #1024	; 0x400
   25474:	sub	r0, r0, #56	; 0x38
   25478:	vst1.64	{d8-d9}, [r0]!
   2547c:	vst1.64	{d8-d9}, [r0]
   25480:	b	253d8 <__assert_fail@plt+0x13c78>
   25484:	str	r0, [sp, #16]
   25488:	mvn	r0, #0
   2548c:	mov	r4, r1
   25490:	str	r0, [fp, #-1068]	; 0xfffffbd4
   25494:	str	r0, [fp, #-1072]	; 0xfffffbd0
   25498:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2549c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   254a0:	ldr	r3, [lr, #128]	; 0x80
   254a4:	and	r2, r3, #128	; 0x80
   254a8:	ands	r3, r3, #64	; 0x40
   254ac:	beq	254b8 <__assert_fail@plt+0x13d58>
   254b0:	cmp	r2, #0
   254b4:	beq	25398 <__assert_fail@plt+0x13c38>
   254b8:	cmp	r3, #0
   254bc:	mvn	r3, #1
   254c0:	movweq	r3, #64510	; 0xfbfe
   254c4:	movteq	r3, #65535	; 0xffff
   254c8:	cmp	r2, #0
   254cc:	mvneq	r3, #1024	; 0x400
   254d0:	str	r3, [fp, #-1080]	; 0xfffffbc8
   254d4:	b	25398 <__assert_fail@plt+0x13c38>
   254d8:	ldr	r2, [lr, #92]	; 0x5c
   254dc:	mov	r4, r1
   254e0:	str	r0, [sp, #16]
   254e4:	cmp	r2, #2
   254e8:	blt	255bc <__assert_fail@plt+0x13e5c>
   254ec:	ldr	r2, [lr, #60]	; 0x3c
   254f0:	sub	r0, fp, #1024	; 0x400
   254f4:	sub	r3, r0, #56	; 0x38
   254f8:	vld1.64	{d16-d17}, [r3]
   254fc:	vld1.32	{d18-d19}, [r2]!
   25500:	vorr	q8, q8, q9
   25504:	vst1.64	{d16-d17}, [r3]
   25508:	vld1.32	{d18-d19}, [r2]
   2550c:	ldr	r2, [sp, #8]
   25510:	vld1.32	{d20-d21}, [r2]
   25514:	vorr	q9, q10, q9
   25518:	vst1.32	{d18-d19}, [r2]
   2551c:	vmov.32	r2, d16[0]
   25520:	b	255e0 <__assert_fail@plt+0x13e80>
   25524:	ldr	r2, [lr, #92]	; 0x5c
   25528:	mov	r1, r3
   2552c:	cmp	r2, #1
   25530:	ble	2560c <__assert_fail@plt+0x13eac>
   25534:	ldr	r2, [lr, #60]	; 0x3c
   25538:	ldr	r3, [sp, #4]
   2553c:	sub	r0, fp, #1024	; 0x400
   25540:	vld1.32	{d16-d17}, [r3]
   25544:	vld1.32	{d18-d19}, [r2]!
   25548:	sub	r3, r0, #56	; 0x38
   2554c:	vld1.64	{d20-d21}, [r3]
   25550:	vorn	q8, q8, q9
   25554:	vand	q8, q10, q8
   25558:	vst1.64	{d16-d17}, [r3]
   2555c:	vmov.32	r3, d16[1]
   25560:	vld1.32	{d18-d19}, [r2]
   25564:	ldr	r2, [sp]
   25568:	vld1.32	{d20-d21}, [r2]
   2556c:	ldr	r2, [sp, #8]
   25570:	vld1.32	{d22-d23}, [r2]
   25574:	vorn	q9, q10, q9
   25578:	vand	q9, q11, q9
   2557c:	vst1.32	{d18-d19}, [r2]
   25580:	vmov.32	r2, d16[0]
   25584:	orr	r2, r3, r2
   25588:	vmov.32	r3, d17[0]
   2558c:	orr	r2, r2, r3
   25590:	vmov.32	r3, d17[1]
   25594:	orr	r2, r2, r3
   25598:	vmov.32	r3, d18[0]
   2559c:	orr	r2, r2, r3
   255a0:	vmov.32	r3, d18[1]
   255a4:	orr	r2, r2, r3
   255a8:	vmov.32	r3, d19[0]
   255ac:	orr	r2, r2, r3
   255b0:	vmov.32	r3, d19[1]
   255b4:	orr	r2, r2, r3
   255b8:	b	256f8 <__assert_fail@plt+0x13f98>
   255bc:	mvn	r2, #0
   255c0:	str	r2, [fp, #-1052]	; 0xfffffbe4
   255c4:	str	r2, [fp, #-1056]	; 0xfffffbe0
   255c8:	str	r2, [fp, #-1060]	; 0xfffffbdc
   255cc:	str	r2, [fp, #-1064]	; 0xfffffbd8
   255d0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   255d4:	str	r2, [fp, #-1072]	; 0xfffffbd0
   255d8:	str	r2, [fp, #-1076]	; 0xfffffbcc
   255dc:	str	r2, [fp, #-1080]	; 0xfffffbc8
   255e0:	ldr	r3, [lr, #128]	; 0x80
   255e4:	ands	r7, r3, #64	; 0x40
   255e8:	and	r3, r3, #128	; 0x80
   255ec:	biceq	r2, r2, #1024	; 0x400
   255f0:	beq	255fc <__assert_fail@plt+0x13e9c>
   255f4:	cmp	r3, #0
   255f8:	beq	25398 <__assert_fail@plt+0x13c38>
   255fc:	cmp	r3, #0
   25600:	bicne	r2, r2, #1
   25604:	str	r2, [fp, #-1080]	; 0xfffffbc8
   25608:	b	25398 <__assert_fail@plt+0x13c38>
   2560c:	ldr	r2, [sp, #140]	; 0x8c
   25610:	ldr	r3, [lr, #96]	; 0x60
   25614:	str	r1, [sp, #60]	; 0x3c
   25618:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2561c:	mov	r9, r5
   25620:	str	r6, [sp, #152]	; 0x98
   25624:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   25628:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2562c:	ldr	lr, [r2, #100]	; 0x64
   25630:	ldr	r2, [sp, #140]	; 0x8c
   25634:	and	r7, r4, r3
   25638:	ldr	r3, [sp, #12]
   2563c:	ldr	r1, [r2, #104]	; 0x68
   25640:	ldr	r2, [sp, #140]	; 0x8c
   25644:	and	lr, r5, lr
   25648:	ldr	r0, [r2, #108]	; 0x6c
   2564c:	ldr	r2, [sp, #140]	; 0x8c
   25650:	and	r1, r6, r1
   25654:	ldr	ip, [r2, #112]	; 0x70
   25658:	ldr	r2, [sp, #140]	; 0x8c
   2565c:	ldr	r8, [r2, #116]	; 0x74
   25660:	ldr	r2, [sp, #140]	; 0x8c
   25664:	ldr	r2, [r2, #120]	; 0x78
   25668:	str	r2, [sp, #160]	; 0xa0
   2566c:	ldr	r2, [sp, #140]	; 0x8c
   25670:	ldr	r2, [r2, #124]	; 0x7c
   25674:	str	r2, [sp, #164]	; 0xa4
   25678:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2567c:	str	r7, [fp, #-1080]	; 0xfffffbc8
   25680:	str	lr, [fp, #-1076]	; 0xfffffbcc
   25684:	str	r1, [fp, #-1072]	; 0xfffffbd0
   25688:	orr	r7, lr, r7
   2568c:	ldr	lr, [sp, #140]	; 0x8c
   25690:	orr	r7, r7, r1
   25694:	ldr	r1, [sp, #60]	; 0x3c
   25698:	and	r2, r2, r0
   2569c:	ldr	r0, [sp, #160]	; 0xa0
   256a0:	str	r2, [fp, #-1068]	; 0xfffffbd4
   256a4:	orr	r2, r7, r2
   256a8:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   256ac:	and	r6, r6, ip
   256b0:	str	r6, [fp, #-1064]	; 0xfffffbd8
   256b4:	orr	r2, r2, r6
   256b8:	ldr	r6, [sp, #152]	; 0x98
   256bc:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   256c0:	and	r4, r4, r8
   256c4:	mov	r8, r3
   256c8:	str	r4, [fp, #-1060]	; 0xfffffbdc
   256cc:	orr	r2, r2, r4
   256d0:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   256d4:	and	r3, r3, r0
   256d8:	ldr	r0, [sp, #164]	; 0xa4
   256dc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   256e0:	orr	r2, r2, r3
   256e4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   256e8:	and	r0, r5, r0
   256ec:	mov	r5, r9
   256f0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   256f4:	orr	r2, r2, r0
   256f8:	cmp	r2, #0
   256fc:	ldr	r2, [sp, #24]
   25700:	mov	r3, r1
   25704:	beq	25cdc <__assert_fail@plt+0x1457c>
   25708:	tst	sl, #2048	; 0x800
   2570c:	beq	257f0 <__assert_fail@plt+0x14090>
   25710:	ldr	r0, [sp, #64]	; 0x40
   25714:	cmp	r0, #1
   25718:	bne	25728 <__assert_fail@plt+0x13fc8>
   2571c:	ldrb	r0, [r5, #2]
   25720:	tst	r0, #64	; 0x40
   25724:	bne	25318 <__assert_fail@plt+0x13bb8>
   25728:	ldr	r0, [lr, #92]	; 0x5c
   2572c:	cmp	r0, #1
   25730:	ble	2577c <__assert_fail@plt+0x1401c>
   25734:	ldr	r0, [lr, #60]	; 0x3c
   25738:	ldr	r1, [sp, #4]
   2573c:	vld1.32	{d16-d17}, [r1]
   25740:	vld1.32	{d18-d19}, [r0]!
   25744:	sub	r1, fp, #1024	; 0x400
   25748:	sub	r1, r1, #56	; 0x38
   2574c:	vld1.64	{d20-d21}, [r1]
   25750:	vand	q8, q9, q8
   25754:	vbic	q9, q10, q8
   25758:	vst1.64	{d18-d19}, [r1]
   2575c:	ldr	r1, [sp]
   25760:	vld1.32	{d20-d21}, [r0]
   25764:	ldr	r0, [sp, #8]
   25768:	vld1.32	{d16-d17}, [r1]
   2576c:	vld1.32	{d22-d23}, [r0]
   25770:	vand	q8, q10, q8
   25774:	vbic	q8, q11, q8
   25778:	b	257ac <__assert_fail@plt+0x1404c>
   2577c:	ldr	r0, [sp, #4]
   25780:	vld1.32	{d16-d17}, [r0]
   25784:	sub	r0, fp, #1024	; 0x400
   25788:	sub	r0, r0, #56	; 0x38
   2578c:	vld1.64	{d18-d19}, [r0]
   25790:	vbic	q9, q9, q8
   25794:	vst1.64	{d18-d19}, [r0]
   25798:	ldr	r0, [sp]
   2579c:	vld1.32	{d16-d17}, [r0]
   257a0:	ldr	r0, [sp, #8]
   257a4:	vld1.32	{d20-d21}, [r0]
   257a8:	vbic	q8, q10, q8
   257ac:	vst1.32	{d16-d17}, [r0]
   257b0:	vmov.32	r0, d18[0]
   257b4:	vmov.32	r1, d18[1]
   257b8:	orr	r0, r1, r0
   257bc:	vmov.32	r1, d19[0]
   257c0:	orr	r0, r0, r1
   257c4:	vmov.32	r1, d19[1]
   257c8:	orr	r0, r0, r1
   257cc:	vmov.32	r1, d16[0]
   257d0:	orr	r0, r0, r1
   257d4:	vmov.32	r1, d16[1]
   257d8:	orr	r0, r0, r1
   257dc:	vmov.32	r1, d17[0]
   257e0:	orr	r0, r0, r1
   257e4:	vmov.32	r1, d17[1]
   257e8:	orrs	r0, r0, r1
   257ec:	beq	25cdc <__assert_fail@plt+0x1457c>
   257f0:	mov	r4, r6
   257f4:	mov	r5, #0
   257f8:	cmp	r6, #1
   257fc:	blt	25c4c <__assert_fail@plt+0x144ec>
   25800:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   25804:	ldr	ip, [fp, #-1056]	; 0xfffffbe0
   25808:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   2580c:	ldr	r8, [fp, #-1072]	; 0xfffffbd0
   25810:	ldr	r9, [sp, #64]	; 0x40
   25814:	mov	r1, #28
   25818:	str	r3, [sp, #60]	; 0x3c
   2581c:	str	r0, [sp, #148]	; 0x94
   25820:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   25824:	str	r0, [sp, #120]	; 0x78
   25828:	ldr	r0, [fp, #-1080]	; 0xfffffbc8
   2582c:	str	r0, [sp, #108]	; 0x6c
   25830:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   25834:	str	r0, [sp, #112]	; 0x70
   25838:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   2583c:	str	r0, [sp, #116]	; 0x74
   25840:	sub	r0, fp, #6144	; 0x1800
   25844:	sub	r7, r0, #104	; 0x68
   25848:	b	25880 <__assert_fail@plt+0x14120>
   2584c:	ldr	r9, [sp, #64]	; 0x40
   25850:	ldr	r7, [sp, #144]	; 0x90
   25854:	ldr	ip, [sp, #164]	; 0xa4
   25858:	ldr	lr, [sp, #160]	; 0xa0
   2585c:	ldr	r5, [sp, #136]	; 0x88
   25860:	ldr	r4, [sp, #152]	; 0x98
   25864:	ldr	r3, [sp, #60]	; 0x3c
   25868:	ldr	r8, [sp, #156]	; 0x9c
   2586c:	add	r1, r1, #32
   25870:	add	r7, r7, #12
   25874:	add	r5, r5, #1
   25878:	cmp	r5, r4
   2587c:	bge	25c0c <__assert_fail@plt+0x144ac>
   25880:	cmp	r9, #1
   25884:	str	lr, [sp, #160]	; 0xa0
   25888:	str	ip, [sp, #164]	; 0xa4
   2588c:	str	r4, [sp, #152]	; 0x98
   25890:	str	r5, [sp, #136]	; 0x88
   25894:	str	r8, [sp, #156]	; 0x9c
   25898:	bne	258cc <__assert_fail@plt+0x1416c>
   2589c:	ldr	r0, [sp, #16]
   258a0:	add	r2, sp, #168	; 0xa8
   258a4:	ldrb	r0, [r3, r0, lsl #3]
   258a8:	mov	r3, r1
   258ac:	ubfx	r1, r0, #5, #3
   258b0:	and	r0, r0, #31
   258b4:	add	r1, r2, r1, lsl #2
   258b8:	mov	r2, #1
   258bc:	ldr	r1, [r1, r5, lsl #5]
   258c0:	tst	r1, r2, lsl r0
   258c4:	mov	r1, r3
   258c8:	beq	25854 <__assert_fail@plt+0x140f4>
   258cc:	add	r4, sp, #168	; 0xa8
   258d0:	str	r7, [sp, #144]	; 0x90
   258d4:	ldr	ip, [sp, #108]	; 0x6c
   258d8:	ldr	r9, [sp, #112]	; 0x70
   258dc:	add	sl, r4, r5, lsl #5
   258e0:	ldr	r5, [sp, #116]	; 0x74
   258e4:	add	r7, sl, #8
   258e8:	ldr	r3, [sl, #4]
   258ec:	ldm	r7, {r0, r6, r7}
   258f0:	str	r6, [sp, #132]	; 0x84
   258f4:	str	r7, [sp, #100]	; 0x64
   258f8:	str	r3, [sp, #128]	; 0x80
   258fc:	and	r3, r3, r9
   25900:	and	r2, r0, r8
   25904:	str	r0, [sp, #124]	; 0x7c
   25908:	add	r0, r4, r1
   2590c:	str	r3, [sp, #84]	; 0x54
   25910:	ldr	r4, [r4, r1]
   25914:	ldr	r8, [sp, #148]	; 0x94
   25918:	ldr	lr, [r0, #-28]	; 0xffffffe4
   2591c:	str	r0, [sp, #92]	; 0x5c
   25920:	str	r2, [sp, #96]	; 0x60
   25924:	and	r0, lr, ip
   25928:	str	r0, [sp, #88]	; 0x58
   2592c:	orr	r0, r3, r0
   25930:	ldr	r3, [sl, #20]
   25934:	orr	r0, r0, r2
   25938:	and	r2, r6, r5
   2593c:	ldr	r6, [sp, #120]	; 0x78
   25940:	str	r2, [sp, #80]	; 0x50
   25944:	orr	r0, r0, r2
   25948:	and	r2, r7, r6
   2594c:	ldr	r7, [sl, #24]
   25950:	str	r2, [sp, #76]	; 0x4c
   25954:	orr	r0, r0, r2
   25958:	ldr	r2, [sp, #160]	; 0xa0
   2595c:	and	r2, r3, r2
   25960:	str	r2, [sp, #72]	; 0x48
   25964:	orr	r0, r0, r2
   25968:	ldr	r2, [sp, #164]	; 0xa4
   2596c:	and	r2, r7, r2
   25970:	str	r2, [sp, #68]	; 0x44
   25974:	orr	r0, r0, r2
   25978:	and	r2, r4, r8
   2597c:	orrs	r0, r0, r2
   25980:	beq	2584c <__assert_fail@plt+0x140ec>
   25984:	bic	r0, ip, lr
   25988:	str	r2, [sp, #20]
   2598c:	ldr	r2, [sp, #156]	; 0x9c
   25990:	ldr	r8, [sp, #100]	; 0x64
   25994:	str	r1, [sp, #104]	; 0x68
   25998:	ldr	r1, [sp, #128]	; 0x80
   2599c:	bic	ip, lr, ip
   259a0:	str	r0, [sp, #56]	; 0x38
   259a4:	ldr	r0, [sp, #128]	; 0x80
   259a8:	bic	lr, r1, r9
   259ac:	bic	r0, r9, r0
   259b0:	orr	r1, lr, ip
   259b4:	str	r0, [sp, #52]	; 0x34
   259b8:	ldr	r0, [sp, #124]	; 0x7c
   259bc:	bic	r0, r2, r0
   259c0:	str	r0, [sp, #48]	; 0x30
   259c4:	ldr	r0, [sp, #132]	; 0x84
   259c8:	bic	r0, r5, r0
   259cc:	str	r0, [sp, #44]	; 0x2c
   259d0:	bic	r0, r6, r8
   259d4:	bic	r6, r8, r6
   259d8:	str	r0, [sp, #40]	; 0x28
   259dc:	ldr	r0, [sp, #160]	; 0xa0
   259e0:	bic	r0, r0, r3
   259e4:	str	r0, [sp, #36]	; 0x24
   259e8:	ldr	r0, [sp, #164]	; 0xa4
   259ec:	bic	r0, r0, r7
   259f0:	str	r0, [sp, #32]
   259f4:	ldr	r0, [sp, #148]	; 0x94
   259f8:	bic	r0, r0, r4
   259fc:	str	r0, [sp, #28]
   25a00:	ldr	r0, [sp, #124]	; 0x7c
   25a04:	bic	r0, r0, r2
   25a08:	mov	r9, r0
   25a0c:	orr	r0, r1, r0
   25a10:	ldr	r1, [sp, #132]	; 0x84
   25a14:	bic	r1, r1, r5
   25a18:	orr	r5, r0, r1
   25a1c:	ldr	r0, [sp, #160]	; 0xa0
   25a20:	orr	r5, r5, r6
   25a24:	bic	r3, r3, r0
   25a28:	ldr	r0, [sp, #164]	; 0xa4
   25a2c:	orr	r5, r5, r3
   25a30:	bic	r7, r7, r0
   25a34:	ldr	r0, [sp, #148]	; 0x94
   25a38:	orr	r2, r5, r7
   25a3c:	bic	r4, r4, r0
   25a40:	orrs	r2, r2, r4
   25a44:	beq	25b24 <__assert_fail@plt+0x143c4>
   25a48:	ldr	r2, [sp, #152]	; 0x98
   25a4c:	add	r5, sp, #168	; 0xa8
   25a50:	add	r0, r5, r2, lsl #5
   25a54:	str	ip, [r5, r2, lsl #5]
   25a58:	str	lr, [r0, #4]
   25a5c:	str	r9, [r0, #8]
   25a60:	str	r1, [r0, #12]
   25a64:	str	r6, [r0, #16]
   25a68:	str	r3, [r0, #20]
   25a6c:	str	r7, [r0, #24]
   25a70:	str	r4, [r0, #28]
   25a74:	ldr	r0, [sp, #92]	; 0x5c
   25a78:	ldr	r1, [sp, #88]	; 0x58
   25a7c:	sub	lr, fp, #6144	; 0x1800
   25a80:	mov	r6, r2
   25a84:	str	r1, [r0, #-28]	; 0xffffffe4
   25a88:	ldr	r0, [sp, #84]	; 0x54
   25a8c:	ldr	r1, [sp, #20]
   25a90:	str	r0, [sl, #4]
   25a94:	ldr	r0, [sp, #96]	; 0x60
   25a98:	str	r0, [sl, #8]
   25a9c:	ldr	r0, [sp, #80]	; 0x50
   25aa0:	str	r0, [sl, #12]
   25aa4:	ldr	r0, [sp, #76]	; 0x4c
   25aa8:	str	r0, [sl, #16]
   25aac:	ldr	r0, [sp, #72]	; 0x48
   25ab0:	str	r0, [sl, #20]
   25ab4:	ldr	r0, [sp, #68]	; 0x44
   25ab8:	str	r0, [sl, #24]
   25abc:	ldr	r0, [sp, #104]	; 0x68
   25ac0:	str	r1, [r5, r0]
   25ac4:	add	r0, r2, r2, lsl #1
   25ac8:	sub	r1, lr, #104	; 0x68
   25acc:	add	r4, r1, r0, lsl #2
   25ad0:	ldr	r1, [sp, #144]	; 0x90
   25ad4:	mov	r5, r4
   25ad8:	ldr	r0, [r1, #4]
   25adc:	str	r0, [r5, #4]!
   25ae0:	ldr	r7, [r1, #4]
   25ae4:	cmp	r7, #1
   25ae8:	blt	25b3c <__assert_fail@plt+0x143dc>
   25aec:	str	r0, [r4]
   25af0:	lsl	r0, r0, #2
   25af4:	bl	2b260 <__assert_fail@plt+0x19b00>
   25af8:	ldr	r8, [sp, #36]	; 0x24
   25afc:	ldr	sl, [sp, #28]
   25b00:	cmp	r0, #0
   25b04:	str	r0, [r4, #8]
   25b08:	beq	26228 <__assert_fail@plt+0x14ac8>
   25b0c:	ldr	r1, [sp, #144]	; 0x90
   25b10:	lsl	r2, r7, #2
   25b14:	ldr	r1, [r1, #8]
   25b18:	bl	11484 <memcpy@plt>
   25b1c:	ldr	r1, [sp, #24]
   25b20:	b	25b58 <__assert_fail@plt+0x143f8>
   25b24:	ldr	r4, [sp, #12]
   25b28:	ldr	r1, [sp, #24]
   25b2c:	ldr	r8, [sp, #36]	; 0x24
   25b30:	ldr	r5, [sp, #32]
   25b34:	ldr	sl, [sp, #28]
   25b38:	b	25b68 <__assert_fail@plt+0x14408>
   25b3c:	ldr	r1, [sp, #24]
   25b40:	ldr	r8, [sp, #36]	; 0x24
   25b44:	ldr	sl, [sp, #28]
   25b48:	mov	r0, #0
   25b4c:	str	r0, [r4]
   25b50:	str	r0, [r4, #4]
   25b54:	str	r0, [r4, #8]
   25b58:	ldr	r4, [sp, #12]
   25b5c:	ldr	r5, [sp, #32]
   25b60:	add	r6, r6, #1
   25b64:	str	r6, [sp, #152]	; 0x98
   25b68:	ldr	r0, [r4, #12]
   25b6c:	ldr	r7, [sp, #144]	; 0x90
   25b70:	ldr	r1, [r0, r1, lsl #2]
   25b74:	mov	r0, r7
   25b78:	bl	212e4 <__assert_fail@plt+0xfb84>
   25b7c:	ldr	r6, [sp, #40]	; 0x28
   25b80:	cmp	r0, #0
   25b84:	beq	261e8 <__assert_fail@plt+0x14a88>
   25b88:	ldr	r2, [sp, #56]	; 0x38
   25b8c:	ldr	r4, [sp, #52]	; 0x34
   25b90:	ldr	r3, [sp, #48]	; 0x30
   25b94:	ldr	r1, [sp, #44]	; 0x2c
   25b98:	ldr	r9, [sp, #64]	; 0x40
   25b9c:	mov	ip, r5
   25ba0:	mov	lr, r8
   25ba4:	str	sl, [sp, #148]	; 0x94
   25ba8:	str	r6, [sp, #120]	; 0x78
   25bac:	orr	r0, r4, r2
   25bb0:	str	r1, [sp, #116]	; 0x74
   25bb4:	str	r3, [sp, #156]	; 0x9c
   25bb8:	str	r4, [sp, #112]	; 0x70
   25bbc:	str	r2, [sp, #108]	; 0x6c
   25bc0:	orr	r0, r0, r3
   25bc4:	orr	r0, r0, r1
   25bc8:	orr	r0, r0, r6
   25bcc:	orr	r0, r0, r8
   25bd0:	orr	r0, r0, r5
   25bd4:	orrs	r0, r0, sl
   25bd8:	mov	r0, r1
   25bdc:	ldr	r1, [sp, #104]	; 0x68
   25be0:	bne	2585c <__assert_fail@plt+0x140fc>
   25be4:	mov	ip, r5
   25be8:	str	r4, [sp, #112]	; 0x70
   25bec:	ldr	r4, [sp, #152]	; 0x98
   25bf0:	ldr	r5, [sp, #136]	; 0x88
   25bf4:	mov	lr, r8
   25bf8:	str	sl, [sp, #148]	; 0x94
   25bfc:	str	r6, [sp, #120]	; 0x78
   25c00:	str	r0, [sp, #116]	; 0x74
   25c04:	mov	r8, r3
   25c08:	str	r2, [sp, #108]	; 0x6c
   25c0c:	ldr	r0, [sp, #148]	; 0x94
   25c10:	ldr	r2, [sp, #24]
   25c14:	str	r0, [fp, #-1052]	; 0xfffffbe4
   25c18:	ldr	r0, [sp, #120]	; 0x78
   25c1c:	str	ip, [fp, #-1056]	; 0xfffffbe0
   25c20:	str	lr, [fp, #-1060]	; 0xfffffbdc
   25c24:	ldr	lr, [sp, #140]	; 0x8c
   25c28:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25c2c:	ldr	r0, [sp, #116]	; 0x74
   25c30:	str	r0, [fp, #-1068]	; 0xfffffbd4
   25c34:	ldr	r0, [sp, #112]	; 0x70
   25c38:	str	r8, [fp, #-1072]	; 0xfffffbd0
   25c3c:	ldr	r8, [sp, #12]
   25c40:	str	r0, [fp, #-1076]	; 0xfffffbcc
   25c44:	ldr	r0, [sp, #108]	; 0x6c
   25c48:	str	r0, [fp, #-1080]	; 0xfffffbc8
   25c4c:	cmp	r5, r4
   25c50:	bne	2532c <__assert_fail@plt+0x13bcc>
   25c54:	sub	lr, fp, #1024	; 0x400
   25c58:	mov	r1, r8
   25c5c:	sub	r7, lr, #56	; 0x38
   25c60:	sub	lr, fp, #6144	; 0x1800
   25c64:	mov	sl, r1
   25c68:	mov	r0, r7
   25c6c:	mov	r8, r7
   25c70:	vld1.32	{d16-d17}, [r0]!
   25c74:	vld1.64	{d18-d19}, [r0]
   25c78:	add	r0, sp, #168	; 0xa8
   25c7c:	add	r0, r0, r5, lsl #5
   25c80:	vst1.32	{d16-d17}, [r0]!
   25c84:	vst1.32	{d18-d19}, [r0]
   25c88:	ldr	r0, [r1, #12]
   25c8c:	mov	r1, #1
   25c90:	ldr	r4, [r0, r2, lsl #2]
   25c94:	add	r0, r5, r5, lsl #1
   25c98:	sub	r2, lr, #104	; 0x68
   25c9c:	add	r7, r2, r0, lsl #2
   25ca0:	str	r1, [r2, r0, lsl #2]
   25ca4:	mov	r0, #4
   25ca8:	mov	r6, r7
   25cac:	str	r1, [r6, #4]!
   25cb0:	bl	2b260 <__assert_fail@plt+0x19b00>
   25cb4:	cmp	r0, #0
   25cb8:	str	r0, [r7, #8]
   25cbc:	beq	26298 <__assert_fail@plt+0x14b38>
   25cc0:	ldr	lr, [sp, #140]	; 0x8c
   25cc4:	ldr	r2, [sp, #24]
   25cc8:	str	r4, [r0]
   25ccc:	mov	r0, r8
   25cd0:	add	r4, r5, #1
   25cd4:	mov	r8, sl
   25cd8:	b	25324 <__assert_fail@plt+0x13bc4>
   25cdc:	mov	r4, r6
   25ce0:	b	2532c <__assert_fail@plt+0x13bcc>
   25ce4:	cmp	r4, #0
   25ce8:	ble	262b4 <__assert_fail@plt+0x14b54>
   25cec:	mov	r6, r4
   25cf0:	mov	r4, #0
   25cf4:	add	r0, r6, #1
   25cf8:	str	r4, [fp, #-3136]	; 0xfffff3c0
   25cfc:	str	r0, [fp, #-3140]	; 0xfffff3bc
   25d00:	lsl	r0, r0, #2
   25d04:	bl	2b260 <__assert_fail@plt+0x19b00>
   25d08:	ldr	r1, [sp, #140]	; 0x8c
   25d0c:	cmp	r0, #0
   25d10:	str	r0, [fp, #-3132]	; 0xfffff3c4
   25d14:	moveq	r4, #12
   25d18:	cmp	r0, #0
   25d1c:	str	r4, [fp, #-56]	; 0xffffffc8
   25d20:	beq	262e4 <__assert_fail@plt+0x14b84>
   25d24:	vmov.i32	q8, #0	; 0x00000000
   25d28:	sub	lr, fp, #3072	; 0xc00
   25d2c:	mov	r3, #0
   25d30:	mov	sl, #0
   25d34:	mov	r7, #0
   25d38:	mov	r2, #0
   25d3c:	mov	r8, #0
   25d40:	str	r6, [sp, #152]	; 0x98
   25d44:	sub	r0, lr, #104	; 0x68
   25d48:	sub	lr, fp, #3072	; 0xc00
   25d4c:	sub	r9, lr, #68	; 0x44
   25d50:	sub	lr, fp, #3072	; 0xc00
   25d54:	vst1.64	{d16-d17}, [r0]!
   25d58:	vst1.64	{d16-d17}, [r0]
   25d5c:	sub	r0, lr, #56	; 0x38
   25d60:	str	r0, [sp, #124]	; 0x7c
   25d64:	mov	r0, #0
   25d68:	str	r0, [sp, #144]	; 0x90
   25d6c:	mov	r0, #0
   25d70:	str	r0, [sp, #148]	; 0x94
   25d74:	mov	r0, #0
   25d78:	str	r0, [sp, #156]	; 0x9c
   25d7c:	mov	r0, #0
   25d80:	str	r0, [sp, #160]	; 0xa0
   25d84:	mov	r0, #0
   25d88:	str	r0, [sp, #164]	; 0xa4
   25d8c:	mov	r0, #0
   25d90:	str	r0, [sp, #128]	; 0x80
   25d94:	b	25e54 <__assert_fail@plt+0x146f4>
   25d98:	ldrsb	r0, [r7, #52]	; 0x34
   25d9c:	cmn	r0, #1
   25da0:	ble	25f10 <__assert_fail@plt+0x147b0>
   25da4:	sub	lr, fp, #3072	; 0xc00
   25da8:	sub	r0, lr, #56	; 0x38
   25dac:	sub	lr, fp, #2048	; 0x800
   25db0:	str	r7, [r0, r8, lsl #2]
   25db4:	sub	r0, lr, #56	; 0x38
   25db8:	str	r7, [r0, r8, lsl #2]
   25dbc:	add	r0, sp, #168	; 0xa8
   25dc0:	ldr	r2, [sp, #164]	; 0xa4
   25dc4:	mov	r1, r0
   25dc8:	ldr	r0, [r0, r8, lsl #5]
   25dcc:	orr	r2, r2, r0
   25dd0:	add	r0, r1, r8, lsl #5
   25dd4:	add	r8, r8, #1
   25dd8:	str	r2, [sp, #164]	; 0xa4
   25ddc:	ldr	r2, [r0, #4]
   25de0:	ldr	r1, [r0, #8]
   25de4:	ldr	r7, [r0, #12]
   25de8:	ldr	r5, [r0, #16]
   25dec:	ldr	r4, [r0, #20]
   25df0:	ldr	r6, [r0, #24]
   25df4:	ldr	r0, [r0, #28]
   25df8:	orr	sl, sl, r0
   25dfc:	ldr	r0, [sp, #144]	; 0x90
   25e00:	orr	r0, r0, r6
   25e04:	ldr	r6, [sp, #148]	; 0x94
   25e08:	str	r0, [sp, #144]	; 0x90
   25e0c:	ldr	r0, [sp, #152]	; 0x98
   25e10:	orr	r6, r6, r4
   25e14:	str	r6, [sp, #148]	; 0x94
   25e18:	ldr	r6, [sp, #156]	; 0x9c
   25e1c:	cmp	r8, r0
   25e20:	orr	r6, r6, r5
   25e24:	str	r6, [sp, #156]	; 0x9c
   25e28:	ldr	r6, [sp, #160]	; 0xa0
   25e2c:	orr	r6, r6, r7
   25e30:	ldr	r7, [sp, #132]	; 0x84
   25e34:	str	r6, [sp, #160]	; 0xa0
   25e38:	mov	r6, r0
   25e3c:	orr	r7, r7, r1
   25e40:	ldr	r1, [sp, #136]	; 0x88
   25e44:	orr	r1, r1, r2
   25e48:	mov	r2, r1
   25e4c:	ldr	r1, [sp, #140]	; 0x8c
   25e50:	beq	25fe4 <__assert_fail@plt+0x14884>
   25e54:	mov	r0, #0
   25e58:	sub	lr, fp, #6144	; 0x1800
   25e5c:	str	r2, [sp, #136]	; 0x88
   25e60:	str	r7, [sp, #132]	; 0x84
   25e64:	str	r0, [fp, #-3136]	; 0xfffff3c0
   25e68:	add	r0, r8, r8, lsl #1
   25e6c:	sub	r2, lr, #104	; 0x68
   25e70:	add	r0, r2, r0, lsl #2
   25e74:	ldr	r7, [r0, #4]
   25e78:	cmp	r7, #1
   25e7c:	blt	25ed8 <__assert_fail@plt+0x14778>
   25e80:	ldr	r4, [r0, #8]
   25e84:	mov	r5, #0
   25e88:	b	25e98 <__assert_fail@plt+0x14738>
   25e8c:	add	r5, r5, #1
   25e90:	cmp	r5, r7
   25e94:	bge	25ed4 <__assert_fail@plt+0x14774>
   25e98:	ldr	r0, [r4, r5, lsl #2]
   25e9c:	ldr	r2, [r1, #12]
   25ea0:	ldr	r0, [r2, r0, lsl #2]
   25ea4:	cmn	r0, #1
   25ea8:	beq	25e8c <__assert_fail@plt+0x1472c>
   25eac:	ldr	r1, [r1, #24]
   25eb0:	add	r0, r0, r0, lsl #1
   25eb4:	add	r1, r1, r0, lsl #2
   25eb8:	mov	r0, r9
   25ebc:	bl	21158 <__assert_fail@plt+0xf9f8>
   25ec0:	ldr	r1, [sp, #140]	; 0x8c
   25ec4:	mov	r3, #0
   25ec8:	cmp	r0, #0
   25ecc:	beq	25e8c <__assert_fail@plt+0x1472c>
   25ed0:	b	26178 <__assert_fail@plt+0x14a18>
   25ed4:	str	r3, [fp, #-56]	; 0xffffffc8
   25ed8:	sub	r0, fp, #56	; 0x38
   25edc:	mov	r2, r9
   25ee0:	mov	r3, #0
   25ee4:	bl	21458 <__assert_fail@plt+0xfcf8>
   25ee8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   25eec:	mov	r7, r0
   25ef0:	sub	lr, fp, #1024	; 0x400
   25ef4:	sub	r0, lr, #56	; 0x38
   25ef8:	cmp	r7, #0
   25efc:	str	r7, [r0, r8, lsl #2]
   25f00:	bne	25d98 <__assert_fail@plt+0x14638>
   25f04:	cmp	r3, #0
   25f08:	beq	25d98 <__assert_fail@plt+0x14638>
   25f0c:	b	25fa4 <__assert_fail@plt+0x14844>
   25f10:	ldr	r1, [sp, #140]	; 0x8c
   25f14:	sub	r0, fp, #56	; 0x38
   25f18:	mov	r2, r9
   25f1c:	mov	r3, #1
   25f20:	bl	21458 <__assert_fail@plt+0xfcf8>
   25f24:	sub	lr, fp, #2048	; 0x800
   25f28:	cmp	r0, #0
   25f2c:	sub	r1, lr, #56	; 0x38
   25f30:	str	r0, [r1, r8, lsl #2]
   25f34:	bne	25f44 <__assert_fail@plt+0x147e4>
   25f38:	ldr	r1, [fp, #-56]	; 0xffffffc8
   25f3c:	cmp	r1, #0
   25f40:	bne	25fa4 <__assert_fail@plt+0x14844>
   25f44:	cmp	r7, r0
   25f48:	beq	25f70 <__assert_fail@plt+0x14810>
   25f4c:	ldr	r1, [sp, #140]	; 0x8c
   25f50:	ldr	r2, [sp, #128]	; 0x80
   25f54:	ldr	r0, [r1, #92]	; 0x5c
   25f58:	cmp	r0, #1
   25f5c:	mov	r0, #0
   25f60:	movwgt	r0, #1
   25f64:	orr	r2, r2, r0
   25f68:	str	r2, [sp, #128]	; 0x80
   25f6c:	b	25f74 <__assert_fail@plt+0x14814>
   25f70:	ldr	r1, [sp, #140]	; 0x8c
   25f74:	sub	r0, fp, #56	; 0x38
   25f78:	mov	r2, r9
   25f7c:	mov	r3, #2
   25f80:	bl	21458 <__assert_fail@plt+0xfcf8>
   25f84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   25f88:	sub	lr, fp, #3072	; 0xc00
   25f8c:	cmp	r0, #0
   25f90:	sub	r1, lr, #56	; 0x38
   25f94:	str	r0, [r1, r8, lsl #2]
   25f98:	bne	25dbc <__assert_fail@plt+0x1465c>
   25f9c:	cmp	r3, #0
   25fa0:	beq	25dbc <__assert_fail@plt+0x1465c>
   25fa4:	ldr	r0, [sp, #144]	; 0x90
   25fa8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   25fac:	str	r0, [fp, #-3152]	; 0xfffff3b0
   25fb0:	ldr	r0, [sp, #148]	; 0x94
   25fb4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   25fb8:	ldr	r0, [sp, #156]	; 0x9c
   25fbc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   25fc0:	ldr	r0, [sp, #160]	; 0xa0
   25fc4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   25fc8:	ldr	r0, [sp, #132]	; 0x84
   25fcc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   25fd0:	ldr	r0, [sp, #136]	; 0x88
   25fd4:	str	r0, [fp, #-3172]	; 0xfffff39c
   25fd8:	ldr	r0, [sp, #164]	; 0xa4
   25fdc:	str	r0, [fp, #-3176]	; 0xfffff398
   25fe0:	b	261b8 <__assert_fail@plt+0x14a58>
   25fe4:	ldr	r0, [sp, #144]	; 0x90
   25fe8:	str	sl, [fp, #-3148]	; 0xfffff3b4
   25fec:	ldr	r9, [sp, #128]	; 0x80
   25ff0:	ldr	sl, [sp, #164]	; 0xa4
   25ff4:	str	r0, [fp, #-3152]	; 0xfffff3b0
   25ff8:	ldr	r0, [sp, #148]	; 0x94
   25ffc:	tst	r9, #1
   26000:	str	r0, [fp, #-3156]	; 0xfffff3ac
   26004:	ldr	r0, [sp, #156]	; 0x9c
   26008:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2600c:	ldr	r0, [sp, #160]	; 0xa0
   26010:	str	r0, [fp, #-3164]	; 0xfffff3a4
   26014:	mov	r0, #4
   26018:	str	r7, [fp, #-3168]	; 0xfffff3a0
   2601c:	str	r2, [fp, #-3172]	; 0xfffff39c
   26020:	str	sl, [fp, #-3176]	; 0xfffff398
   26024:	bne	262f0 <__assert_fail@plt+0x14b90>
   26028:	mov	r1, #256	; 0x100
   2602c:	bl	2b20c <__assert_fail@plt+0x19aac>
   26030:	ldr	r1, [sp, #12]
   26034:	cmp	r0, #0
   26038:	str	r0, [r1, #44]	; 0x2c
   2603c:	beq	261b8 <__assert_fail@plt+0x14a58>
   26040:	ldr	r4, [sp, #140]	; 0x8c
   26044:	mov	r1, #0
   26048:	mov	r3, sl
   2604c:	mov	r2, #0
   26050:	add	r8, sp, #168	; 0xa8
   26054:	cmp	r3, #0
   26058:	bne	26078 <__assert_fail@plt+0x14918>
   2605c:	b	260f0 <__assert_fail@plt+0x14990>
   26060:	sub	lr, fp, #3072	; 0xc00
   26064:	add	r8, r8, #4
   26068:	sub	r3, lr, #104	; 0x68
   2606c:	ldr	r3, [r3, r2, lsl #2]
   26070:	cmp	r3, #0
   26074:	beq	260f0 <__assert_fail@plt+0x14990>
   26078:	add	r7, r4, r2, lsl #2
   2607c:	lsl	r6, r2, #5
   26080:	mov	r5, #1
   26084:	add	ip, r7, #96	; 0x60
   26088:	tst	r3, #1
   2608c:	bne	260ac <__assert_fail@plt+0x1494c>
   26090:	lsr	r7, r3, #1
   26094:	cmp	r1, r3, lsr #1
   26098:	add	r6, r6, #1
   2609c:	lsl	r5, r5, #1
   260a0:	mov	r3, r7
   260a4:	bne	26088 <__assert_fail@plt+0x14928>
   260a8:	b	260f0 <__assert_fail@plt+0x14990>
   260ac:	mov	lr, #0
   260b0:	ldr	r7, [r8, lr, lsl #3]
   260b4:	add	lr, lr, #4
   260b8:	tst	r7, r5
   260bc:	beq	260b0 <__assert_fail@plt+0x14950>
   260c0:	ldr	r7, [ip]
   260c4:	sub	r4, fp, #2048	; 0x800
   260c8:	tst	r7, r5
   260cc:	sub	r7, r4, #56	; 0x38
   260d0:	sub	r4, fp, #1024	; 0x400
   260d4:	sub	r4, r4, #56	; 0x38
   260d8:	moveq	r7, r4
   260dc:	ldr	r4, [sp, #140]	; 0x8c
   260e0:	add	r7, r7, lr
   260e4:	ldr	r7, [r7, #-4]
   260e8:	str	r7, [r0, r6, lsl #2]
   260ec:	b	26090 <__assert_fail@plt+0x14930>
   260f0:	add	r2, r2, #1
   260f4:	cmp	r2, #8
   260f8:	bne	26060 <__assert_fail@plt+0x14900>
   260fc:	ldr	r5, [sp, #152]	; 0x98
   26100:	tst	sl, #1024	; 0x400
   26104:	beq	2614c <__assert_fail@plt+0x149ec>
   26108:	add	r1, sp, #168	; 0xa8
   2610c:	mov	r2, r5
   26110:	ldrb	r3, [r1, #1]
   26114:	tst	r3, #4
   26118:	bne	26138 <__assert_fail@plt+0x149d8>
   2611c:	ldr	r3, [sp, #124]	; 0x7c
   26120:	add	r1, r1, #32
   26124:	subs	r2, r2, #1
   26128:	add	r3, r3, #4
   2612c:	str	r3, [sp, #124]	; 0x7c
   26130:	bne	26110 <__assert_fail@plt+0x149b0>
   26134:	b	2614c <__assert_fail@plt+0x149ec>
   26138:	ldr	r1, [sp, #124]	; 0x7c
   2613c:	tst	r9, #1
   26140:	ldr	r1, [r1]
   26144:	str	r1, [r0, #40]	; 0x28
   26148:	strne	r1, [r0, #1064]	; 0x428
   2614c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   26150:	bl	141b8 <__assert_fail@plt+0x2a58>
   26154:	sub	lr, fp, #6144	; 0x1800
   26158:	sub	r0, lr, #104	; 0x68
   2615c:	add	r4, r0, #8
   26160:	ldr	r0, [r4], #12
   26164:	bl	141b8 <__assert_fail@plt+0x2a58>
   26168:	subs	r5, r5, #1
   2616c:	bne	26160 <__assert_fail@plt+0x14a00>
   26170:	mov	r0, #1
   26174:	b	262d4 <__assert_fail@plt+0x14b74>
   26178:	ldr	r1, [sp, #144]	; 0x90
   2617c:	str	sl, [fp, #-3148]	; 0xfffff3b4
   26180:	str	r0, [fp, #-56]	; 0xffffffc8
   26184:	str	r1, [fp, #-3152]	; 0xfffff3b0
   26188:	ldr	r1, [sp, #148]	; 0x94
   2618c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   26190:	ldr	r1, [sp, #156]	; 0x9c
   26194:	str	r1, [fp, #-3160]	; 0xfffff3a8
   26198:	ldr	r1, [sp, #160]	; 0xa0
   2619c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   261a0:	ldr	r1, [sp, #132]	; 0x84
   261a4:	str	r1, [fp, #-3168]	; 0xfffff3a0
   261a8:	ldr	r1, [sp, #136]	; 0x88
   261ac:	str	r1, [fp, #-3172]	; 0xfffff39c
   261b0:	ldr	r1, [sp, #164]	; 0xa4
   261b4:	str	r1, [fp, #-3176]	; 0xfffff398
   261b8:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   261bc:	bl	141b8 <__assert_fail@plt+0x2a58>
   261c0:	cmp	r6, #1
   261c4:	blt	26290 <__assert_fail@plt+0x14b30>
   261c8:	sub	lr, fp, #6144	; 0x1800
   261cc:	sub	r0, lr, #104	; 0x68
   261d0:	add	r4, r0, #8
   261d4:	ldr	r0, [r4], #12
   261d8:	bl	141b8 <__assert_fail@plt+0x2a58>
   261dc:	subs	r6, r6, #1
   261e0:	bne	261d4 <__assert_fail@plt+0x14a74>
   261e4:	b	26290 <__assert_fail@plt+0x14b30>
   261e8:	ldr	r0, [sp, #44]	; 0x2c
   261ec:	str	sl, [fp, #-1052]	; 0xfffffbe4
   261f0:	str	r5, [fp, #-1056]	; 0xfffffbe0
   261f4:	str	r8, [fp, #-1060]	; 0xfffffbdc
   261f8:	str	r6, [fp, #-1064]	; 0xfffffbd8
   261fc:	ldr	r6, [sp, #152]	; 0x98
   26200:	str	r0, [fp, #-1068]	; 0xfffffbd4
   26204:	ldr	r0, [sp, #48]	; 0x30
   26208:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2620c:	ldr	r0, [sp, #52]	; 0x34
   26210:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26214:	ldr	r0, [sp, #56]	; 0x38
   26218:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2621c:	cmp	r6, #1
   26220:	bge	26274 <__assert_fail@plt+0x14b14>
   26224:	b	26290 <__assert_fail@plt+0x14b30>
   26228:	ldr	r0, [sp, #32]
   2622c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   26230:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26234:	ldr	r0, [sp, #40]	; 0x28
   26238:	str	r8, [fp, #-1060]	; 0xfffffbdc
   2623c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26240:	ldr	r0, [sp, #44]	; 0x2c
   26244:	str	r0, [fp, #-1068]	; 0xfffffbd4
   26248:	ldr	r0, [sp, #48]	; 0x30
   2624c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   26250:	ldr	r0, [sp, #52]	; 0x34
   26254:	str	r0, [fp, #-1076]	; 0xfffffbcc
   26258:	ldr	r0, [sp, #56]	; 0x38
   2625c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   26260:	mov	r0, #0
   26264:	str	r0, [r5]
   26268:	str	r0, [r4]
   2626c:	cmp	r6, #1
   26270:	blt	26290 <__assert_fail@plt+0x14b30>
   26274:	sub	lr, fp, #6144	; 0x1800
   26278:	sub	r0, lr, #104	; 0x68
   2627c:	add	r4, r0, #8
   26280:	ldr	r0, [r4], #12
   26284:	bl	141b8 <__assert_fail@plt+0x2a58>
   26288:	subs	r6, r6, #1
   2628c:	bne	26280 <__assert_fail@plt+0x14b20>
   26290:	mov	r0, #0
   26294:	b	262d4 <__assert_fail@plt+0x14b74>
   26298:	mov	r0, #0
   2629c:	str	r0, [r6]
   262a0:	str	r0, [r7]
   262a4:	mov	r6, r5
   262a8:	cmp	r6, #1
   262ac:	bge	26274 <__assert_fail@plt+0x14b14>
   262b0:	b	26290 <__assert_fail@plt+0x14b30>
   262b4:	mov	r0, #0
   262b8:	bne	262d4 <__assert_fail@plt+0x14b74>
   262bc:	mov	r0, #4
   262c0:	mov	r1, #256	; 0x100
   262c4:	bl	2b20c <__assert_fail@plt+0x19aac>
   262c8:	cmp	r0, #0
   262cc:	str	r0, [r8, #44]	; 0x2c
   262d0:	movwne	r0, #1
   262d4:	sub	sp, fp, #48	; 0x30
   262d8:	vpop	{d8-d9}
   262dc:	add	sp, sp, #4
   262e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262e4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   262e8:	bl	141b8 <__assert_fail@plt+0x2a58>
   262ec:	b	261c8 <__assert_fail@plt+0x14a68>
   262f0:	mov	r1, #512	; 0x200
   262f4:	bl	2b20c <__assert_fail@plt+0x19aac>
   262f8:	ldr	r1, [sp, #12]
   262fc:	cmp	r0, #0
   26300:	str	r0, [r1, #48]	; 0x30
   26304:	beq	261b8 <__assert_fail@plt+0x14a58>
   26308:	sub	lr, fp, #1024	; 0x400
   2630c:	mov	r3, #0
   26310:	add	r8, sp, #168	; 0xa8
   26314:	mov	r5, sl
   26318:	mov	r6, #0
   2631c:	sub	r1, lr, #56	; 0x38
   26320:	sub	lr, fp, #2048	; 0x800
   26324:	sub	ip, r1, #4
   26328:	sub	r1, lr, #56	; 0x38
   2632c:	sub	lr, r1, #4
   26330:	cmp	r5, #0
   26334:	bne	26354 <__assert_fail@plt+0x14bf4>
   26338:	b	263c0 <__assert_fail@plt+0x14c60>
   2633c:	sub	r1, fp, #3072	; 0xc00
   26340:	add	r8, r8, #4
   26344:	sub	r1, r1, #104	; 0x68
   26348:	ldr	r5, [r1, r6, lsl #2]
   2634c:	cmp	r5, #0
   26350:	beq	263c0 <__assert_fail@plt+0x14c60>
   26354:	lsl	r4, r6, #5
   26358:	mov	r1, #1
   2635c:	tst	r5, #1
   26360:	bne	26380 <__assert_fail@plt+0x14c20>
   26364:	lsr	r2, r5, #1
   26368:	cmp	r3, r5, lsr #1
   2636c:	add	r4, r4, #1
   26370:	lsl	r1, r1, #1
   26374:	mov	r5, r2
   26378:	bne	2635c <__assert_fail@plt+0x14bfc>
   2637c:	b	263c0 <__assert_fail@plt+0x14c60>
   26380:	mov	r2, r8
   26384:	mov	sl, ip
   26388:	mov	r9, lr
   2638c:	ldr	r7, [r2], #32
   26390:	add	sl, sl, #4
   26394:	add	r9, r9, #4
   26398:	tst	r7, r1
   2639c:	beq	2638c <__assert_fail@plt+0x14c2c>
   263a0:	ldr	r2, [sl]
   263a4:	mov	r7, r0
   263a8:	str	r2, [r7, r4, lsl #2]!
   263ac:	ldr	r2, [r9]
   263b0:	ldr	r9, [sp, #128]	; 0x80
   263b4:	ldr	sl, [sp, #164]	; 0xa4
   263b8:	str	r2, [r7, #1024]	; 0x400
   263bc:	b	26364 <__assert_fail@plt+0x14c04>
   263c0:	add	r6, r6, #1
   263c4:	cmp	r6, #8
   263c8:	bne	2633c <__assert_fail@plt+0x14bdc>
   263cc:	b	260fc <__assert_fail@plt+0x1499c>
   263d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263d4:	add	fp, sp, #28
   263d8:	sub	sp, sp, #52	; 0x34
   263dc:	ldr	r7, [r1, #8]
   263e0:	ldr	r4, [r1, #12]
   263e4:	mov	r5, r0
   263e8:	mov	r0, #1
   263ec:	mov	r9, r1
   263f0:	str	r0, [sp, #44]	; 0x2c
   263f4:	str	r0, [sp, #40]	; 0x28
   263f8:	mov	r0, #4
   263fc:	bl	2b260 <__assert_fail@plt+0x19b00>
   26400:	cmp	r0, #0
   26404:	str	r0, [sp, #48]	; 0x30
   26408:	beq	2685c <__assert_fail@plt+0x150fc>
   2640c:	str	r7, [r0]
   26410:	add	r3, sp, #40	; 0x28
   26414:	mov	r0, r5
   26418:	mov	r1, r9
   2641c:	mov	r2, r4
   26420:	str	r5, [sp, #20]
   26424:	bl	26878 <__assert_fail@plt+0x15118>
   26428:	cmp	r0, #0
   2642c:	bne	26854 <__assert_fail@plt+0x150f4>
   26430:	add	r0, r9, #16
   26434:	mov	r5, r4
   26438:	mov	r1, #0
   2643c:	str	r9, [sp, #12]
   26440:	str	r0, [sp, #16]
   26444:	cmp	r5, #1
   26448:	bge	26478 <__assert_fail@plt+0x14d18>
   2644c:	b	26814 <__assert_fail@plt+0x150b4>
   26450:	mov	r0, r7
   26454:	mov	r1, r9
   26458:	mov	r2, r5
   2645c:	add	r3, sp, #40	; 0x28
   26460:	bl	26878 <__assert_fail@plt+0x15118>
   26464:	ldr	r1, [sp, #8]
   26468:	cmp	r0, #0
   2646c:	bne	26854 <__assert_fail@plt+0x150f4>
   26470:	cmp	r5, #1
   26474:	blt	26814 <__assert_fail@plt+0x150b4>
   26478:	ldr	r0, [r9]
   2647c:	ldr	r7, [sp, #20]
   26480:	ldr	r2, [r0, r5, lsl #2]
   26484:	cmp	r2, #0
   26488:	mov	r2, #0
   2648c:	addeq	r2, r1, #1
   26490:	ldr	r1, [r7, #120]	; 0x78
   26494:	cmp	r2, r1
   26498:	bgt	2681c <__assert_fail@plt+0x150bc>
   2649c:	mov	r0, #0
   264a0:	str	r5, [sp, #24]
   264a4:	sub	r5, r5, #1
   264a8:	str	r2, [sp, #8]
   264ac:	str	r0, [sp, #44]	; 0x2c
   264b0:	ldr	r0, [r7, #100]	; 0x64
   264b4:	ldr	r1, [r0, r5, lsl #2]
   264b8:	cmp	r1, #0
   264bc:	beq	26450 <__assert_fail@plt+0x14cf0>
   264c0:	ldr	r0, [r1, #20]
   264c4:	cmp	r0, #1
   264c8:	blt	26450 <__assert_fail@plt+0x14cf0>
   264cc:	ldr	r6, [r7, #84]	; 0x54
   264d0:	mov	r8, #0
   264d4:	str	r5, [sp, #28]
   264d8:	str	r1, [sp, #36]	; 0x24
   264dc:	str	r6, [sp, #32]
   264e0:	b	26524 <__assert_fail@plt+0x14dc4>
   264e4:	ldr	r2, [sp, #40]	; 0x28
   264e8:	cmp	r2, #0
   264ec:	beq	266e4 <__assert_fail@plt+0x14f84>
   264f0:	ldr	r1, [sp, #44]	; 0x2c
   264f4:	cmp	r1, #0
   264f8:	bne	2670c <__assert_fail@plt+0x14fac>
   264fc:	ldr	r0, [sp, #48]	; 0x30
   26500:	str	sl, [r0]
   26504:	ldr	r0, [sp, #44]	; 0x2c
   26508:	add	r0, r0, #1
   2650c:	str	r0, [sp, #44]	; 0x2c
   26510:	ldr	r1, [sp, #36]	; 0x24
   26514:	add	r8, r8, #1
   26518:	ldr	r0, [r1, #20]
   2651c:	cmp	r8, r0
   26520:	bge	26450 <__assert_fail@plt+0x14cf0>
   26524:	ldr	r0, [r1, #24]
   26528:	ldr	sl, [r0, r8, lsl #2]
   2652c:	ldr	r0, [r6]
   26530:	add	r0, r0, sl, lsl #3
   26534:	ldrb	r0, [r0, #6]
   26538:	tst	r0, #16
   2653c:	bne	265dc <__assert_fail@plt+0x14e7c>
   26540:	ldr	r0, [r6]
   26544:	mov	r2, r5
   26548:	add	r1, r0, sl, lsl #3
   2654c:	mov	r0, r7
   26550:	bl	2508c <__assert_fail@plt+0x1392c>
   26554:	cmp	r0, #0
   26558:	beq	26510 <__assert_fail@plt+0x14db0>
   2655c:	ldr	r0, [r9]
   26560:	ldr	r1, [sp, #24]
   26564:	ldr	r0, [r0, r1, lsl #2]
   26568:	cmp	r0, #0
   2656c:	beq	26510 <__assert_fail@plt+0x14db0>
   26570:	ldr	r2, [r0, #8]
   26574:	cmp	r2, #1
   26578:	blt	26510 <__assert_fail@plt+0x14db0>
   2657c:	ldr	r1, [r6, #12]
   26580:	ldr	r0, [r0, #12]
   26584:	subs	r3, r2, #1
   26588:	mov	r2, #0
   2658c:	ldr	r1, [r1, sl, lsl #2]
   26590:	beq	265b8 <__assert_fail@plt+0x14e58>
   26594:	mov	r4, #1
   26598:	add	r7, r2, r3
   2659c:	lsr	r6, r7, #1
   265a0:	ldr	r5, [r0, r6, lsl #2]
   265a4:	cmp	r5, r1
   265a8:	addlt	r2, r4, r7, lsr #1
   265ac:	movge	r3, r6
   265b0:	cmp	r2, r3
   265b4:	bcc	26598 <__assert_fail@plt+0x14e38>
   265b8:	ldr	r2, [r0, r2, lsl #2]
   265bc:	ldr	r9, [sp, #12]
   265c0:	ldr	r7, [sp, #20]
   265c4:	ldr	r5, [sp, #28]
   265c8:	ldr	r6, [sp, #32]
   265cc:	mov	r0, #1
   265d0:	cmp	r2, r1
   265d4:	bne	26510 <__assert_fail@plt+0x14db0>
   265d8:	b	266ac <__assert_fail@plt+0x14f4c>
   265dc:	ldr	r4, [r7, #84]	; 0x54
   265e0:	ldr	r6, [r9, #12]
   265e4:	mov	r1, sl
   265e8:	mov	r2, r7
   265ec:	mov	r3, r5
   265f0:	mov	r0, r4
   265f4:	bl	24d28 <__assert_fail@plt+0x135c8>
   265f8:	cmp	r0, #1
   265fc:	blt	26618 <__assert_fail@plt+0x14eb8>
   26600:	add	r1, r0, r5
   26604:	cmp	r1, r6
   26608:	ble	26628 <__assert_fail@plt+0x14ec8>
   2660c:	ldr	r5, [sp, #28]
   26610:	ldr	r6, [sp, #32]
   26614:	b	266ac <__assert_fail@plt+0x14f4c>
   26618:	ldr	r6, [sp, #32]
   2661c:	cmp	r0, #0
   26620:	bne	266ac <__assert_fail@plt+0x14f4c>
   26624:	b	26540 <__assert_fail@plt+0x14de0>
   26628:	ldr	r2, [r9]
   2662c:	ldr	r5, [sp, #28]
   26630:	ldr	r6, [sp, #32]
   26634:	ldr	r2, [r2, r1, lsl #2]
   26638:	cmp	r2, #0
   2663c:	beq	26540 <__assert_fail@plt+0x14de0>
   26640:	ldr	r3, [r2, #8]
   26644:	cmp	r3, #1
   26648:	blt	26540 <__assert_fail@plt+0x14de0>
   2664c:	ldr	r1, [r4, #12]
   26650:	ldr	r2, [r2, #12]
   26654:	subs	r4, r3, #1
   26658:	mov	r3, #0
   2665c:	ldr	r1, [r1, sl, lsl #2]
   26660:	beq	26688 <__assert_fail@plt+0x14f28>
   26664:	mov	ip, #1
   26668:	add	r5, r3, r4
   2666c:	lsr	r6, r5, #1
   26670:	ldr	r7, [r2, r6, lsl #2]
   26674:	cmp	r7, r1
   26678:	addlt	r3, ip, r5, lsr #1
   2667c:	movge	r4, r6
   26680:	cmp	r3, r4
   26684:	bcc	26668 <__assert_fail@plt+0x14f08>
   26688:	ldr	r9, [sp, #12]
   2668c:	ldr	r7, [sp, #20]
   26690:	ldr	r5, [sp, #28]
   26694:	ldr	r6, [sp, #32]
   26698:	cmp	r0, #0
   2669c:	beq	26540 <__assert_fail@plt+0x14de0>
   266a0:	ldr	r2, [r2, r3, lsl #2]
   266a4:	cmp	r2, r1
   266a8:	bne	26540 <__assert_fail@plt+0x14de0>
   266ac:	ldr	r1, [r9, #20]
   266b0:	cmp	r1, #0
   266b4:	beq	264e4 <__assert_fail@plt+0x14d84>
   266b8:	ldr	r1, [r6, #12]
   266bc:	add	r3, r0, r5
   266c0:	mov	r0, r7
   266c4:	ldr	r2, [r1, sl, lsl #2]
   266c8:	ldr	r1, [sp, #16]
   266cc:	str	sl, [sp]
   266d0:	str	r5, [sp, #4]
   266d4:	bl	27a1c <__assert_fail@plt+0x162bc>
   266d8:	cmp	r0, #0
   266dc:	beq	264e4 <__assert_fail@plt+0x14d84>
   266e0:	b	26510 <__assert_fail@plt+0x14db0>
   266e4:	mov	r0, #1
   266e8:	str	r0, [sp, #44]	; 0x2c
   266ec:	str	r0, [sp, #40]	; 0x28
   266f0:	mov	r0, #4
   266f4:	bl	2b260 <__assert_fail@plt+0x19b00>
   266f8:	cmp	r0, #0
   266fc:	str	r0, [sp, #48]	; 0x30
   26700:	beq	26840 <__assert_fail@plt+0x150e0>
   26704:	str	sl, [r0]
   26708:	b	26510 <__assert_fail@plt+0x14db0>
   2670c:	cmp	r2, r1
   26710:	bne	2673c <__assert_fail@plt+0x14fdc>
   26714:	lsl	r0, r2, #1
   26718:	lsl	r1, r2, #3
   2671c:	str	r0, [sp, #40]	; 0x28
   26720:	ldr	r0, [sp, #48]	; 0x30
   26724:	bl	2b290 <__assert_fail@plt+0x19b30>
   26728:	cmp	r0, #0
   2672c:	beq	26870 <__assert_fail@plt+0x15110>
   26730:	str	r0, [sp, #48]	; 0x30
   26734:	ldr	r1, [sp, #44]	; 0x2c
   26738:	b	26740 <__assert_fail@plt+0x14fe0>
   2673c:	ldr	r0, [sp, #48]	; 0x30
   26740:	ldr	r2, [r0]
   26744:	cmp	r2, sl
   26748:	ble	26794 <__assert_fail@plt+0x15034>
   2674c:	cmp	r1, #1
   26750:	blt	2680c <__assert_fail@plt+0x150ac>
   26754:	ands	r3, r1, #3
   26758:	sub	r2, r1, #1
   2675c:	beq	26780 <__assert_fail@plt+0x15020>
   26760:	add	r4, r0, r1, lsl #2
   26764:	mov	r5, r4
   26768:	ldr	r7, [r5, #-4]!
   2676c:	subs	r3, r3, #1
   26770:	sub	r1, r1, #1
   26774:	str	r7, [r4]
   26778:	mov	r4, r5
   2677c:	bne	26768 <__assert_fail@plt+0x15008>
   26780:	cmp	r2, #3
   26784:	bcs	267c8 <__assert_fail@plt+0x15068>
   26788:	ldr	r7, [sp, #20]
   2678c:	ldr	r5, [sp, #28]
   26790:	b	26808 <__assert_fail@plt+0x150a8>
   26794:	add	r2, r0, r1, lsl #2
   26798:	ldr	r3, [r2, #-4]
   2679c:	cmp	r3, sl
   267a0:	ble	2680c <__assert_fail@plt+0x150ac>
   267a4:	sub	r1, r1, #2
   267a8:	str	r3, [r2]
   267ac:	sub	r1, r1, #1
   267b0:	ldr	r3, [r2, #-8]
   267b4:	sub	r2, r2, #4
   267b8:	cmp	r3, sl
   267bc:	bgt	267a8 <__assert_fail@plt+0x15048>
   267c0:	add	r1, r1, #2
   267c4:	b	2680c <__assert_fail@plt+0x150ac>
   267c8:	add	r2, r0, r1, lsl #2
   267cc:	sub	r2, r2, #8
   267d0:	ldr	r6, [r2]
   267d4:	ldr	r5, [r2, #4]
   267d8:	ldmdb	r2, {r3, r7}
   267dc:	sub	r1, r1, #4
   267e0:	cmp	r1, #0
   267e4:	stmda	r2, {r3, r7}
   267e8:	str	r6, [r2, #4]
   267ec:	str	r5, [r2, #8]
   267f0:	sub	r2, r2, #16
   267f4:	bgt	267d0 <__assert_fail@plt+0x15070>
   267f8:	ldr	r9, [sp, #12]
   267fc:	ldr	r7, [sp, #20]
   26800:	ldr	r5, [sp, #28]
   26804:	ldr	r6, [sp, #32]
   26808:	mov	r1, #0
   2680c:	str	sl, [r0, r1, lsl #2]
   26810:	b	26504 <__assert_fail@plt+0x14da4>
   26814:	mov	r7, #0
   26818:	b	2682c <__assert_fail@plt+0x150cc>
   2681c:	lsl	r2, r5, #2
   26820:	mov	r1, #0
   26824:	mov	r7, #0
   26828:	bl	11670 <memset@plt>
   2682c:	ldr	r0, [sp, #48]	; 0x30
   26830:	bl	141b8 <__assert_fail@plt+0x2a58>
   26834:	mov	r0, r7
   26838:	sub	sp, fp, #28
   2683c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26840:	mov	r0, #0
   26844:	mov	r7, #12
   26848:	str	r0, [sp, #40]	; 0x28
   2684c:	str	r0, [sp, #44]	; 0x2c
   26850:	b	2682c <__assert_fail@plt+0x150cc>
   26854:	mov	r7, r0
   26858:	b	2682c <__assert_fail@plt+0x150cc>
   2685c:	mov	r0, #0
   26860:	mov	r7, #12
   26864:	str	r0, [sp, #40]	; 0x28
   26868:	str	r0, [sp, #44]	; 0x2c
   2686c:	b	26834 <__assert_fail@plt+0x150d4>
   26870:	mov	r7, #12
   26874:	b	2682c <__assert_fail@plt+0x150cc>
   26878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2687c:	add	fp, sp, #28
   26880:	sub	sp, sp, #132	; 0x84
   26884:	mov	r6, r0
   26888:	ldr	r8, [r0, #84]	; 0x54
   2688c:	mov	r0, #0
   26890:	mov	sl, r1
   26894:	mov	r5, r2
   26898:	str	r2, [sp, #76]	; 0x4c
   2689c:	str	r0, [fp, #-76]	; 0xffffffb4
   268a0:	str	r6, [sp, #52]	; 0x34
   268a4:	ldr	r1, [r6, #100]	; 0x64
   268a8:	ldr	r7, [r1, r2, lsl #2]
   268ac:	ldr	r1, [r3, #4]
   268b0:	cmp	r7, #0
   268b4:	mov	r9, r7
   268b8:	addne	r9, r9, #4
   268bc:	cmp	r1, #0
   268c0:	beq	26c84 <__assert_fail@plt+0x15524>
   268c4:	mov	lr, r3
   268c8:	cmp	r7, #0
   268cc:	beq	26cac <__assert_fail@plt+0x1554c>
   268d0:	mov	r0, #0
   268d4:	mov	r1, r8
   268d8:	mov	r2, lr
   268dc:	str	r8, [sp, #80]	; 0x50
   268e0:	str	lr, [sp, #60]	; 0x3c
   268e4:	str	r0, [fp, #-72]	; 0xffffffb8
   268e8:	sub	r0, fp, #72	; 0x48
   268ec:	bl	24a10 <__assert_fail@plt+0x132b0>
   268f0:	ldr	r8, [fp, #-72]	; 0xffffffb8
   268f4:	cmp	r8, #0
   268f8:	bne	27474 <__assert_fail@plt+0x15d14>
   268fc:	mov	r5, r0
   26900:	mov	r4, r0
   26904:	ldr	r2, [sp, #60]	; 0x3c
   26908:	ldr	r0, [r5, #28]!
   2690c:	cmp	r0, #0
   26910:	bne	269b0 <__assert_fail@plt+0x15250>
   26914:	ldr	r0, [r2, #4]
   26918:	mov	r1, #0
   2691c:	str	r0, [r4, #28]
   26920:	lsl	r0, r0, #2
   26924:	str	r1, [r4, #32]
   26928:	bl	2b260 <__assert_fail@plt+0x19b00>
   2692c:	cmp	r0, #0
   26930:	mov	r1, #12
   26934:	mov	r8, #12
   26938:	str	r0, [r4, #36]	; 0x24
   2693c:	movne	r1, #0
   26940:	cmp	r0, #0
   26944:	str	r1, [fp, #-72]	; 0xffffffb8
   26948:	beq	27474 <__assert_fail@plt+0x15d14>
   2694c:	ldr	r2, [sp, #60]	; 0x3c
   26950:	ldr	r0, [r2, #4]
   26954:	cmp	r0, #1
   26958:	blt	269b0 <__assert_fail@plt+0x15250>
   2695c:	str	r9, [sp, #72]	; 0x48
   26960:	mov	r4, #0
   26964:	ldr	r0, [r2, #8]
   26968:	ldr	r1, [sp, #80]	; 0x50
   2696c:	mov	r9, r2
   26970:	ldr	r0, [r0, r4, lsl #2]
   26974:	ldr	r1, [r1, #28]
   26978:	add	r0, r0, r0, lsl #1
   2697c:	add	r1, r1, r0, lsl #2
   26980:	mov	r0, r5
   26984:	bl	21158 <__assert_fail@plt+0xf9f8>
   26988:	cmp	r0, #0
   2698c:	bne	27470 <__assert_fail@plt+0x15d10>
   26990:	ldr	r0, [r9, #4]
   26994:	add	r4, r4, #1
   26998:	mov	r2, r9
   2699c:	cmp	r4, r0
   269a0:	blt	26964 <__assert_fail@plt+0x15204>
   269a4:	ldr	r9, [sp, #72]	; 0x48
   269a8:	mov	r0, #0
   269ac:	str	r0, [fp, #-72]	; 0xffffffb8
   269b0:	mov	r0, r2
   269b4:	mov	r1, r9
   269b8:	mov	r2, r5
   269bc:	bl	274b4 <__assert_fail@plt+0x15d54>
   269c0:	cmp	r0, #0
   269c4:	str	r0, [fp, #-76]	; 0xffffffb4
   269c8:	bne	27484 <__assert_fail@plt+0x15d24>
   269cc:	ldr	r0, [sl, #20]
   269d0:	ldr	r5, [sp, #76]	; 0x4c
   269d4:	ldr	lr, [sp, #60]	; 0x3c
   269d8:	ldr	r8, [sp, #80]	; 0x50
   269dc:	cmp	r0, #0
   269e0:	beq	26cac <__assert_fail@plt+0x1554c>
   269e4:	cmp	r0, #1
   269e8:	str	r7, [sp, #48]	; 0x30
   269ec:	str	r9, [sp, #72]	; 0x48
   269f0:	blt	26c98 <__assert_fail@plt+0x15538>
   269f4:	ldr	r0, [sp, #52]	; 0x34
   269f8:	mov	r9, #0
   269fc:	str	sl, [sp, #64]	; 0x40
   26a00:	ldr	r0, [r0, #116]	; 0x74
   26a04:	str	r0, [sp, #68]	; 0x44
   26a08:	b	26a20 <__assert_fail@plt+0x152c0>
   26a0c:	ldr	sl, [sp, #64]	; 0x40
   26a10:	add	r9, r9, #1
   26a14:	ldr	r0, [sl, #20]
   26a18:	cmp	r9, r0
   26a1c:	bge	26c98 <__assert_fail@plt+0x15538>
   26a20:	ldr	r0, [sl, #24]
   26a24:	ldr	r1, [sp, #68]	; 0x44
   26a28:	ldr	r0, [r0, r9, lsl #2]
   26a2c:	add	r0, r0, r0, lsl #1
   26a30:	add	r1, r1, r0, lsl #3
   26a34:	ldr	r2, [r1, #8]
   26a38:	cmp	r2, r5
   26a3c:	bge	26a0c <__assert_fail@plt+0x152ac>
   26a40:	ldr	r1, [r1, #4]
   26a44:	cmp	r1, r5
   26a48:	blt	26a0c <__assert_fail@plt+0x152ac>
   26a4c:	ldr	r1, [sp, #68]	; 0x44
   26a50:	ldr	r2, [r8]
   26a54:	ldr	r0, [r1, r0, lsl #3]!
   26a58:	ldr	r1, [r1, #12]
   26a5c:	ldr	r4, [r2, r0, lsl #3]
   26a60:	ldr	r0, [lr, #4]
   26a64:	cmp	r1, r5
   26a68:	bne	26ac8 <__assert_fail@plt+0x15368>
   26a6c:	cmp	r0, #1
   26a70:	blt	26a0c <__assert_fail@plt+0x152ac>
   26a74:	ldr	r3, [lr, #8]
   26a78:	mvn	sl, #0
   26a7c:	mvn	r1, #0
   26a80:	b	26a9c <__assert_fail@plt+0x1533c>
   26a84:	ldr	r6, [r2, r7, lsl #3]
   26a88:	cmp	r4, r6
   26a8c:	moveq	sl, r7
   26a90:	add	r3, r3, #4
   26a94:	subs	r0, r0, #1
   26a98:	beq	26b38 <__assert_fail@plt+0x153d8>
   26a9c:	ldr	r7, [r3]
   26aa0:	add	r6, r2, r7, lsl #3
   26aa4:	ldrb	r6, [r6, #4]
   26aa8:	cmp	r6, #9
   26aac:	beq	26a84 <__assert_fail@plt+0x15324>
   26ab0:	cmp	r6, #8
   26ab4:	bne	26a90 <__assert_fail@plt+0x15330>
   26ab8:	ldr	r6, [r2, r7, lsl #3]
   26abc:	cmp	r4, r6
   26ac0:	moveq	r1, r7
   26ac4:	b	26a90 <__assert_fail@plt+0x15330>
   26ac8:	cmp	r0, #1
   26acc:	blt	26a0c <__assert_fail@plt+0x152ac>
   26ad0:	mov	r7, #0
   26ad4:	ldr	r1, [lr, #8]
   26ad8:	ldr	r1, [r1, r7, lsl #2]
   26adc:	add	r3, r2, r1, lsl #3
   26ae0:	ldrb	r3, [r3, #4]
   26ae4:	orr	r3, r3, #1
   26ae8:	cmp	r3, #9
   26aec:	bne	26b24 <__assert_fail@plt+0x153c4>
   26af0:	ldr	r2, [r2, r1, lsl #3]
   26af4:	cmp	r4, r2
   26af8:	bne	26b24 <__assert_fail@plt+0x153c4>
   26afc:	ldr	r3, [sp, #72]	; 0x48
   26b00:	mov	r0, r8
   26b04:	mov	r2, lr
   26b08:	mov	r6, lr
   26b0c:	bl	27694 <__assert_fail@plt+0x15f34>
   26b10:	cmp	r0, #0
   26b14:	bne	27430 <__assert_fail@plt+0x15cd0>
   26b18:	ldr	r0, [r6, #4]
   26b1c:	ldr	r8, [sp, #80]	; 0x50
   26b20:	mov	lr, r6
   26b24:	add	r7, r7, #1
   26b28:	cmp	r7, r0
   26b2c:	bge	26a0c <__assert_fail@plt+0x152ac>
   26b30:	ldr	r2, [r8]
   26b34:	b	26ad4 <__assert_fail@plt+0x15374>
   26b38:	cmp	r1, #0
   26b3c:	bmi	26b5c <__assert_fail@plt+0x153fc>
   26b40:	ldr	r0, [sp, #80]	; 0x50
   26b44:	ldr	r3, [sp, #72]	; 0x48
   26b48:	mov	r2, lr
   26b4c:	bl	27694 <__assert_fail@plt+0x15f34>
   26b50:	ldr	lr, [sp, #60]	; 0x3c
   26b54:	cmp	r0, #0
   26b58:	bne	27430 <__assert_fail@plt+0x15cd0>
   26b5c:	ldr	r8, [sp, #80]	; 0x50
   26b60:	cmp	sl, #0
   26b64:	bmi	26a0c <__assert_fail@plt+0x152ac>
   26b68:	ldr	ip, [lr, #4]
   26b6c:	cmp	ip, #1
   26b70:	blt	26a0c <__assert_fail@plt+0x152ac>
   26b74:	mov	r4, #0
   26b78:	b	26b8c <__assert_fail@plt+0x1542c>
   26b7c:	ldr	lr, [sp, #60]	; 0x3c
   26b80:	add	r4, r4, #1
   26b84:	cmp	r4, ip
   26b88:	bge	26a0c <__assert_fail@plt+0x152ac>
   26b8c:	ldr	r0, [lr, #8]
   26b90:	ldr	r1, [r0, r4, lsl #2]
   26b94:	ldr	r0, [r8, #28]
   26b98:	add	lr, r1, r1, lsl #1
   26b9c:	add	r3, r0, lr, lsl #2
   26ba0:	ldr	r0, [r3, #4]
   26ba4:	cmp	r0, #1
   26ba8:	blt	26bf8 <__assert_fail@plt+0x15498>
   26bac:	ldr	r3, [r3, #8]
   26bb0:	mov	r7, #0
   26bb4:	subs	r0, r0, #1
   26bb8:	str	ip, [sp, #56]	; 0x38
   26bbc:	beq	26be4 <__assert_fail@plt+0x15484>
   26bc0:	add	r6, r7, r0
   26bc4:	mov	ip, #1
   26bc8:	lsr	r5, r6, #1
   26bcc:	ldr	r2, [r3, r5, lsl #2]
   26bd0:	cmp	r2, sl
   26bd4:	addlt	r7, ip, r6, lsr #1
   26bd8:	movge	r0, r5
   26bdc:	cmp	r7, r0
   26be0:	bcc	26bc0 <__assert_fail@plt+0x15460>
   26be4:	ldr	r0, [r3, r7, lsl #2]
   26be8:	ldr	r5, [sp, #76]	; 0x4c
   26bec:	ldr	ip, [sp, #56]	; 0x38
   26bf0:	cmp	r0, sl
   26bf4:	beq	26b7c <__assert_fail@plt+0x1541c>
   26bf8:	ldr	r0, [r8, #24]
   26bfc:	add	r2, r0, lr, lsl #2
   26c00:	ldr	lr, [sp, #60]	; 0x3c
   26c04:	ldr	r0, [r2, #4]
   26c08:	cmp	r0, #1
   26c0c:	blt	26c54 <__assert_fail@plt+0x154f4>
   26c10:	ldr	r2, [r2, #8]
   26c14:	mov	r3, #0
   26c18:	subs	r0, r0, #1
   26c1c:	beq	26c44 <__assert_fail@plt+0x154e4>
   26c20:	add	r7, r3, r0
   26c24:	lsr	r6, r7, #1
   26c28:	ldr	r5, [r2, r6, lsl #2]
   26c2c:	cmp	r5, sl
   26c30:	movge	r0, r6
   26c34:	mov	r6, #1
   26c38:	addlt	r3, r6, r7, lsr #1
   26c3c:	cmp	r3, r0
   26c40:	bcc	26c20 <__assert_fail@plt+0x154c0>
   26c44:	ldr	r0, [r2, r3, lsl #2]
   26c48:	ldr	r5, [sp, #76]	; 0x4c
   26c4c:	cmp	r0, sl
   26c50:	beq	26b80 <__assert_fail@plt+0x15420>
   26c54:	ldr	r3, [sp, #72]	; 0x48
   26c58:	mov	r0, r8
   26c5c:	mov	r2, lr
   26c60:	mov	r6, lr
   26c64:	bl	27694 <__assert_fail@plt+0x15f34>
   26c68:	cmp	r0, #0
   26c6c:	bne	27430 <__assert_fail@plt+0x15cd0>
   26c70:	ldr	ip, [r6, #4]
   26c74:	ldr	r8, [sp, #80]	; 0x50
   26c78:	sub	r4, r4, #1
   26c7c:	mov	lr, r6
   26c80:	b	26b80 <__assert_fail@plt+0x15420>
   26c84:	ldr	r1, [sl]
   26c88:	str	r0, [r1, r5, lsl #2]
   26c8c:	cmp	r7, #0
   26c90:	bne	26cd8 <__assert_fail@plt+0x15578>
   26c94:	b	27420 <__assert_fail@plt+0x15cc0>
   26c98:	ldr	r6, [sp, #52]	; 0x34
   26c9c:	ldr	r9, [sp, #72]	; 0x48
   26ca0:	ldr	r7, [sp, #48]	; 0x30
   26ca4:	mov	r0, #0
   26ca8:	str	r0, [fp, #-76]	; 0xffffffb4
   26cac:	sub	r0, fp, #76	; 0x4c
   26cb0:	mov	r1, r8
   26cb4:	mov	r2, lr
   26cb8:	bl	24a10 <__assert_fail@plt+0x132b0>
   26cbc:	ldr	r1, [sl]
   26cc0:	str	r0, [r1, r5, lsl #2]
   26cc4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   26cc8:	cmp	r8, #0
   26ccc:	bne	27424 <__assert_fail@plt+0x15cc4>
   26cd0:	cmp	r7, #0
   26cd4:	beq	27420 <__assert_fail@plt+0x15cc0>
   26cd8:	ldr	r0, [r6, #100]	; 0x64
   26cdc:	ldr	r0, [r0, r5, lsl #2]
   26ce0:	ldrb	r0, [r0, #52]	; 0x34
   26ce4:	tst	r0, #64	; 0x40
   26ce8:	beq	27420 <__assert_fail@plt+0x15cc0>
   26cec:	ldr	r0, [r6, #108]	; 0x6c
   26cf0:	ldr	ip, [r6, #84]	; 0x54
   26cf4:	cmp	r0, #1
   26cf8:	blt	2740c <__assert_fail@plt+0x15cac>
   26cfc:	ldr	r1, [r6, #116]	; 0x74
   26d00:	mov	lr, #0
   26d04:	mov	r2, #1
   26d08:	mov	r3, r0
   26d0c:	add	r7, r3, lr
   26d10:	add	r7, r7, r7, lsr #31
   26d14:	asr	r6, r7, #1
   26d18:	add	r4, r6, r6, lsl #1
   26d1c:	add	r4, r1, r4, lsl #3
   26d20:	ldr	r4, [r4, #4]
   26d24:	cmp	r4, r5
   26d28:	addlt	lr, r2, r7, asr #1
   26d2c:	movge	r3, r6
   26d30:	cmp	lr, r3
   26d34:	blt	26d0c <__assert_fail@plt+0x155ac>
   26d38:	cmp	lr, r0
   26d3c:	bge	27418 <__assert_fail@plt+0x15cb8>
   26d40:	cmn	lr, #1
   26d44:	beq	27418 <__assert_fail@plt+0x15cb8>
   26d48:	ldr	r0, [sp, #52]	; 0x34
   26d4c:	add	r1, lr, lr, lsl #1
   26d50:	str	r1, [sp, #28]
   26d54:	ldr	r0, [r0, #116]	; 0x74
   26d58:	add	r0, r0, r1, lsl #3
   26d5c:	ldr	r0, [r0, #4]
   26d60:	cmp	r0, r5
   26d64:	bne	27418 <__assert_fail@plt+0x15cb8>
   26d68:	mov	r1, #0
   26d6c:	ldr	r4, [sp, #52]	; 0x34
   26d70:	str	r1, [fp, #-72]	; 0xffffffb8
   26d74:	ldr	r0, [r9, #4]
   26d78:	cmp	r0, #0
   26d7c:	ble	2743c <__assert_fail@plt+0x15cdc>
   26d80:	add	r0, r5, #1
   26d84:	mov	r2, #0
   26d88:	mov	r3, ip
   26d8c:	str	ip, [sp, #80]	; 0x50
   26d90:	str	sl, [sp, #64]	; 0x40
   26d94:	str	r9, [sp, #72]	; 0x48
   26d98:	str	lr, [sp, #56]	; 0x38
   26d9c:	str	r0, [sp, #12]
   26da0:	sub	r0, fp, #72	; 0x48
   26da4:	add	r0, r0, #16
   26da8:	str	r0, [sp, #8]
   26dac:	add	r0, sl, #16
   26db0:	str	r0, [sp, #36]	; 0x24
   26db4:	mov	r0, #0
   26db8:	str	r0, [sp, #40]	; 0x28
   26dbc:	b	26dd8 <__assert_fail@plt+0x15678>
   26dc0:	ldr	r9, [sp, #72]	; 0x48
   26dc4:	ldr	r2, [sp, #48]	; 0x30
   26dc8:	ldr	r0, [r9, #4]
   26dcc:	add	r2, r2, #1
   26dd0:	cmp	r2, r0
   26dd4:	bge	27444 <__assert_fail@plt+0x15ce4>
   26dd8:	ldr	r0, [r9, #8]
   26ddc:	ldr	r1, [sl, #8]
   26de0:	str	r2, [sp, #48]	; 0x30
   26de4:	ldr	r7, [r0, r2, lsl #2]
   26de8:	ldr	r0, [r3]
   26dec:	add	r0, r0, r7, lsl #3
   26df0:	cmp	r7, r1
   26df4:	ldrb	r0, [r0, #4]
   26df8:	bne	26e14 <__assert_fail@plt+0x156b4>
   26dfc:	cmp	r0, #4
   26e00:	bne	26dc0 <__assert_fail@plt+0x15660>
   26e04:	ldr	r0, [sl, #12]
   26e08:	cmp	r0, r5
   26e0c:	bne	26e1c <__assert_fail@plt+0x156bc>
   26e10:	b	26dc0 <__assert_fail@plt+0x15660>
   26e14:	cmp	r0, #4
   26e18:	bne	26dc0 <__assert_fail@plt+0x15660>
   26e1c:	ldr	r0, [r4, #116]	; 0x74
   26e20:	ldr	r1, [sp, #28]
   26e24:	mov	r9, lr
   26e28:	str	r7, [sp, #60]	; 0x3c
   26e2c:	add	r6, r0, r1, lsl #3
   26e30:	ldr	r0, [r6]
   26e34:	cmp	r0, r7
   26e38:	bne	26f28 <__assert_fail@plt+0x157c8>
   26e3c:	ldr	r0, [r6, #8]
   26e40:	ldr	r1, [r6, #12]
   26e44:	subs	r0, r1, r0
   26e48:	add	ip, r0, r5
   26e4c:	beq	26e5c <__assert_fail@plt+0x156fc>
   26e50:	ldr	r1, [r3, #12]
   26e54:	add	r1, r1, r7, lsl #2
   26e58:	b	26e6c <__assert_fail@plt+0x1570c>
   26e5c:	ldr	r1, [r3, #20]
   26e60:	add	r2, r7, r7, lsl #1
   26e64:	add	r1, r1, r2, lsl #2
   26e68:	ldr	r1, [r1, #8]
   26e6c:	ldr	r2, [sl, #12]
   26e70:	cmp	ip, r2
   26e74:	bgt	26f28 <__assert_fail@plt+0x157c8>
   26e78:	ldr	r2, [sl]
   26e7c:	ldr	r2, [r2, ip, lsl #2]
   26e80:	cmp	r2, #0
   26e84:	beq	26f28 <__assert_fail@plt+0x157c8>
   26e88:	ldr	r3, [r2, #8]
   26e8c:	cmp	r3, #1
   26e90:	blt	26f24 <__assert_fail@plt+0x157c4>
   26e94:	ldr	r1, [r1]
   26e98:	ldr	r2, [r2, #12]
   26e9c:	subs	r7, r3, #1
   26ea0:	mov	r3, #0
   26ea4:	str	r8, [sp, #68]	; 0x44
   26ea8:	beq	26ed0 <__assert_fail@plt+0x15770>
   26eac:	mov	r8, #1
   26eb0:	add	r5, r3, r7
   26eb4:	lsr	r4, r5, #1
   26eb8:	ldr	r0, [r2, r4, lsl #2]
   26ebc:	cmp	r0, r1
   26ec0:	addlt	r3, r8, r5, lsr #1
   26ec4:	movge	r7, r4
   26ec8:	cmp	r3, r7
   26ecc:	bcc	26eb0 <__assert_fail@plt+0x15750>
   26ed0:	ldr	r0, [r2, r3, lsl #2]
   26ed4:	cmp	r0, r1
   26ed8:	bne	26f14 <__assert_fail@plt+0x157b4>
   26edc:	ldr	r4, [sp, #52]	; 0x34
   26ee0:	ldr	r7, [sp, #60]	; 0x3c
   26ee4:	ldr	r5, [sp, #76]	; 0x4c
   26ee8:	stm	sp, {r1, ip}
   26eec:	ldr	r1, [sp, #36]	; 0x24
   26ef0:	mov	r0, r4
   26ef4:	mov	r2, r7
   26ef8:	mov	r3, r5
   26efc:	bl	27a1c <__assert_fail@plt+0x162bc>
   26f00:	ldr	r8, [sp, #68]	; 0x44
   26f04:	cmp	r0, #0
   26f08:	beq	26f44 <__assert_fail@plt+0x157e4>
   26f0c:	ldr	lr, [sp, #56]	; 0x38
   26f10:	b	26f24 <__assert_fail@plt+0x157c4>
   26f14:	ldr	r5, [sp, #76]	; 0x4c
   26f18:	ldr	r4, [sp, #52]	; 0x34
   26f1c:	ldr	r8, [sp, #68]	; 0x44
   26f20:	ldr	r7, [sp, #60]	; 0x3c
   26f24:	ldr	r3, [sp, #80]	; 0x50
   26f28:	mov	r0, r6
   26f2c:	add	r6, r0, #24
   26f30:	ldrb	r0, [r0, #20]
   26f34:	add	r9, r9, #1
   26f38:	cmp	r0, #0
   26f3c:	bne	26e30 <__assert_fail@plt+0x156d0>
   26f40:	b	26dc0 <__assert_fail@plt+0x15660>
   26f44:	ldr	r0, [sp, #40]	; 0x28
   26f48:	ldr	r6, [sp, #44]	; 0x2c
   26f4c:	cmp	r0, #0
   26f50:	beq	26f80 <__assert_fail@plt+0x15820>
   26f54:	ldr	r0, [sp, #20]
   26f58:	str	r5, [fp, #-60]	; 0xffffffc4
   26f5c:	str	r7, [fp, #-64]	; 0xffffffc0
   26f60:	cmp	r0, #0
   26f64:	beq	270e8 <__assert_fail@plt+0x15988>
   26f68:	cmp	r6, #0
   26f6c:	bne	273f4 <__assert_fail@plt+0x15c94>
   26f70:	mov	r6, #1
   26f74:	str	r9, [r8]
   26f78:	str	r8, [sp, #24]
   26f7c:	b	2716c <__assert_fail@plt+0x15a0c>
   26f80:	add	r0, sl, #12
   26f84:	mov	r3, #20
   26f88:	sub	r2, fp, #72	; 0x48
   26f8c:	vld1.32	{d16-d17}, [r0]
   26f90:	mov	r0, sl
   26f94:	add	r1, r2, #12
   26f98:	vld1.32	{d18-d19}, [r0], r3
   26f9c:	vst1.32	{d16-d17}, [r1]
   26fa0:	mov	r1, r2
   26fa4:	vst1.64	{d18-d19}, [r1], r3
   26fa8:	ldr	r6, [r0]
   26fac:	mov	r0, #0
   26fb0:	cmp	r6, #1
   26fb4:	str	r6, [r1]
   26fb8:	blt	270d0 <__assert_fail@plt+0x15970>
   26fbc:	lsl	r0, r6, #2
   26fc0:	str	r6, [fp, #-56]	; 0xffffffc8
   26fc4:	bl	2b260 <__assert_fail@plt+0x19b00>
   26fc8:	cmp	r0, #0
   26fcc:	str	r0, [fp, #-48]	; 0xffffffd0
   26fd0:	beq	2748c <__assert_fail@plt+0x15d2c>
   26fd4:	mov	r4, r0
   26fd8:	ldr	r0, [sl, #20]
   26fdc:	ldr	r1, [sl, #24]
   26fe0:	lsl	r2, r0, #2
   26fe4:	mov	r0, r4
   26fe8:	bl	11484 <memcpy@plt>
   26fec:	str	r5, [fp, #-60]	; 0xffffffc4
   26ff0:	str	r7, [fp, #-64]	; 0xffffffc0
   26ff4:	mov	r8, r4
   26ff8:	lsl	r0, r6, #1
   26ffc:	lsl	r1, r6, #3
   27000:	str	r0, [sp, #20]
   27004:	str	r0, [fp, #-56]	; 0xffffffc8
   27008:	mov	r0, r4
   2700c:	bl	2b290 <__assert_fail@plt+0x19b30>
   27010:	cmp	r0, #0
   27014:	beq	274a8 <__assert_fail@plt+0x15d48>
   27018:	mov	r8, r0
   2701c:	mov	r4, r0
   27020:	str	r0, [fp, #-48]	; 0xffffffd0
   27024:	str	r0, [sp, #16]
   27028:	ldr	r0, [r8]
   2702c:	str	r4, [sp, #24]
   27030:	cmp	r0, r9
   27034:	ble	27128 <__assert_fail@plt+0x159c8>
   27038:	ldr	r4, [sp, #52]	; 0x34
   2703c:	cmp	r6, #1
   27040:	mov	r1, r6
   27044:	blt	27160 <__assert_fail@plt+0x15a00>
   27048:	ands	r1, r6, #3
   2704c:	sub	r2, r6, #1
   27050:	mov	ip, r6
   27054:	mov	r0, r6
   27058:	beq	27080 <__assert_fail@plt+0x15920>
   2705c:	add	r7, r8, ip, lsl #2
   27060:	mov	r0, ip
   27064:	mov	r3, r7
   27068:	ldr	r6, [r3, #-4]!
   2706c:	subs	r1, r1, #1
   27070:	sub	r0, r0, #1
   27074:	str	r6, [r7]
   27078:	mov	r7, r3
   2707c:	bne	27068 <__assert_fail@plt+0x15908>
   27080:	mov	r1, #0
   27084:	cmp	r2, #3
   27088:	bcc	270c0 <__assert_fail@plt+0x15960>
   2708c:	add	r2, r8, r0, lsl #2
   27090:	sub	r2, r2, #8
   27094:	ldr	r6, [r2]
   27098:	ldr	r5, [r2, #4]
   2709c:	ldmdb	r2, {r3, r7}
   270a0:	sub	r0, r0, #4
   270a4:	cmp	r0, #0
   270a8:	stmda	r2, {r3, r7}
   270ac:	str	r6, [r2, #4]
   270b0:	str	r5, [r2, #8]
   270b4:	sub	r2, r2, #16
   270b8:	bgt	27094 <__assert_fail@plt+0x15934>
   270bc:	ldr	r5, [sp, #76]	; 0x4c
   270c0:	ldr	r4, [sp, #52]	; 0x34
   270c4:	ldr	r7, [sp, #60]	; 0x3c
   270c8:	mov	r6, ip
   270cc:	b	27160 <__assert_fail@plt+0x15a00>
   270d0:	ldr	r1, [sp, #8]
   270d4:	str	r0, [r1]
   270d8:	str	r0, [r1, #4]
   270dc:	str	r0, [r1, #8]
   270e0:	str	r5, [fp, #-60]	; 0xffffffc4
   270e4:	str	r7, [fp, #-64]	; 0xffffffc0
   270e8:	mov	r0, #1
   270ec:	str	r0, [fp, #-52]	; 0xffffffcc
   270f0:	str	r0, [fp, #-56]	; 0xffffffc8
   270f4:	mov	r0, #4
   270f8:	bl	2b260 <__assert_fail@plt+0x19b00>
   270fc:	cmp	r0, #0
   27100:	str	r0, [fp, #-48]	; 0xffffffd0
   27104:	beq	2748c <__assert_fail@plt+0x15d2c>
   27108:	str	r9, [r0]
   2710c:	str	r0, [sp, #16]
   27110:	str	r0, [sp, #68]	; 0x44
   27114:	str	r0, [sp, #24]
   27118:	mov	r0, #1
   2711c:	mov	r6, #1
   27120:	str	r0, [sp, #20]
   27124:	b	27170 <__assert_fail@plt+0x15a10>
   27128:	add	r0, r8, r6, lsl #2
   2712c:	ldr	r4, [sp, #52]	; 0x34
   27130:	mov	r1, r6
   27134:	ldr	r2, [r0, #-4]
   27138:	cmp	r2, r9
   2713c:	ble	27160 <__assert_fail@plt+0x15a00>
   27140:	sub	r1, r6, #2
   27144:	str	r2, [r0]
   27148:	sub	r1, r1, #1
   2714c:	ldr	r2, [r0, #-8]
   27150:	sub	r0, r0, #4
   27154:	cmp	r2, r9
   27158:	bgt	27144 <__assert_fail@plt+0x159e4>
   2715c:	add	r1, r1, #2
   27160:	add	r6, r6, #1
   27164:	str	r9, [r8, r1, lsl #2]
   27168:	str	r8, [sp, #68]	; 0x44
   2716c:	str	r6, [fp, #-52]	; 0xffffffcc
   27170:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27174:	sub	r1, fp, #72	; 0x48
   27178:	str	r6, [sp, #44]	; 0x2c
   2717c:	str	r0, [sp, #40]	; 0x28
   27180:	ldr	r0, [r0, r5, lsl #2]
   27184:	str	r0, [sp, #32]
   27188:	mov	r0, r4
   2718c:	bl	263d0 <__assert_fail@plt+0x14c70>
   27190:	cmp	r0, #0
   27194:	bne	2747c <__assert_fail@plt+0x15d1c>
   27198:	ldr	r6, [sl, #4]
   2719c:	ldr	lr, [sp, #56]	; 0x38
   271a0:	cmp	r6, #0
   271a4:	beq	27244 <__assert_fail@plt+0x15ae4>
   271a8:	cmp	r5, #0
   271ac:	bmi	27238 <__assert_fail@plt+0x15ad8>
   271b0:	ldr	sl, [sp, #40]	; 0x28
   271b4:	ldr	r7, [sp, #12]
   271b8:	b	271d0 <__assert_fail@plt+0x15a70>
   271bc:	str	r0, [r6]
   271c0:	add	r6, r6, #4
   271c4:	add	sl, sl, #4
   271c8:	subs	r7, r7, #1
   271cc:	beq	27238 <__assert_fail@plt+0x15ad8>
   271d0:	ldr	r1, [r6]
   271d4:	ldr	r0, [sl]
   271d8:	cmp	r1, #0
   271dc:	beq	271bc <__assert_fail@plt+0x15a5c>
   271e0:	cmp	r0, #0
   271e4:	beq	271c0 <__assert_fail@plt+0x15a60>
   271e8:	sub	r4, fp, #44	; 0x2c
   271ec:	add	r2, r0, #4
   271f0:	add	r1, r1, #4
   271f4:	mov	r0, r4
   271f8:	bl	2337c <__assert_fail@plt+0x11c1c>
   271fc:	cmp	r0, #0
   27200:	str	r0, [fp, #-32]	; 0xffffffe0
   27204:	bne	2747c <__assert_fail@plt+0x15d1c>
   27208:	ldr	r1, [sp, #80]	; 0x50
   2720c:	sub	r0, fp, #32
   27210:	mov	r2, r4
   27214:	bl	24a10 <__assert_fail@plt+0x132b0>
   27218:	str	r0, [r6]
   2721c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27220:	bl	141b8 <__assert_fail@plt+0x2a58>
   27224:	ldr	r8, [fp, #-32]	; 0xffffffe0
   27228:	ldr	lr, [sp, #56]	; 0x38
   2722c:	cmp	r8, #0
   27230:	beq	271c0 <__assert_fail@plt+0x15a60>
   27234:	b	2744c <__assert_fail@plt+0x15cec>
   27238:	ldr	sl, [sp, #64]	; 0x40
   2723c:	ldr	r4, [sp, #52]	; 0x34
   27240:	ldr	r7, [sp, #60]	; 0x3c
   27244:	ldr	r0, [sp, #40]	; 0x28
   27248:	ldr	r1, [sp, #32]
   2724c:	str	r1, [r0, r5, lsl #2]
   27250:	ldr	r0, [sp, #44]	; 0x2c
   27254:	cmp	r0, #1
   27258:	blt	27334 <__assert_fail@plt+0x15bd4>
   2725c:	ldr	r8, [sp, #68]	; 0x44
   27260:	subs	r0, r0, #1
   27264:	mov	r1, #0
   27268:	beq	27294 <__assert_fail@plt+0x15b34>
   2726c:	mov	r2, r0
   27270:	mov	r4, #1
   27274:	add	r3, r1, r2
   27278:	lsr	r7, r3, #1
   2727c:	ldr	r6, [r8, r7, lsl #2]
   27280:	cmp	r6, r9
   27284:	addlt	r1, r4, r3, lsr #1
   27288:	movge	r2, r7
   2728c:	cmp	r1, r2
   27290:	bcc	27274 <__assert_fail@plt+0x15b14>
   27294:	ldr	r2, [r8, r1, lsl #2]
   27298:	mov	r7, #1
   2729c:	cmp	r2, r9
   272a0:	mov	r2, r1
   272a4:	mvnne	r2, #0
   272a8:	cmp	r2, #0
   272ac:	bmi	27340 <__assert_fail@plt+0x15be0>
   272b0:	ldr	r3, [sp, #44]	; 0x2c
   272b4:	ldr	r4, [sp, #52]	; 0x34
   272b8:	cmp	r3, r2
   272bc:	ble	2734c <__assert_fail@plt+0x15bec>
   272c0:	cmp	r0, r2
   272c4:	str	r0, [fp, #-52]	; 0xffffffcc
   272c8:	ble	2735c <__assert_fail@plt+0x15bfc>
   272cc:	mvn	r2, r1
   272d0:	add	r2, r3, r2
   272d4:	cmp	r2, #4
   272d8:	bcc	273b4 <__assert_fail@plt+0x15c54>
   272dc:	bic	lr, r2, #3
   272e0:	subs	r3, lr, #4
   272e4:	add	r3, r7, r3, lsr #2
   272e8:	and	r7, r3, #1
   272ec:	str	r7, [sp, #32]
   272f0:	beq	27364 <__assert_fail@plt+0x15c04>
   272f4:	sub	r7, r7, r3
   272f8:	add	r3, r8, r1, lsl #2
   272fc:	mov	r6, #0
   27300:	mov	ip, #20
   27304:	add	r4, r3, #4
   27308:	adds	r7, r7, #2
   2730c:	add	r6, r6, #8
   27310:	vld1.32	{d16-d17}, [r4]
   27314:	mov	r4, r3
   27318:	vst1.32	{d16-d17}, [r4], ip
   2731c:	vld1.32	{d16-d17}, [r4]
   27320:	add	r4, r3, #16
   27324:	add	r3, r3, #32
   27328:	vst1.32	{d16-d17}, [r4]
   2732c:	bne	27304 <__assert_fail@plt+0x15ba4>
   27330:	b	27368 <__assert_fail@plt+0x15c08>
   27334:	ldr	r3, [sp, #80]	; 0x50
   27338:	ldr	r8, [sp, #68]	; 0x44
   2733c:	b	273e4 <__assert_fail@plt+0x15c84>
   27340:	ldr	r0, [sp, #16]
   27344:	ldr	r4, [sp, #52]	; 0x34
   27348:	b	27350 <__assert_fail@plt+0x15bf0>
   2734c:	ldr	r0, [sp, #16]
   27350:	ldr	r7, [sp, #60]	; 0x3c
   27354:	str	r0, [sp, #24]
   27358:	b	273e0 <__assert_fail@plt+0x15c80>
   2735c:	ldr	r1, [sp, #16]
   27360:	b	2739c <__assert_fail@plt+0x15c3c>
   27364:	mov	r6, #0
   27368:	ldr	r3, [sp, #32]
   2736c:	cmp	r3, #0
   27370:	beq	27388 <__assert_fail@plt+0x15c28>
   27374:	add	r3, r1, r6
   27378:	add	r3, r8, r3, lsl #2
   2737c:	add	r7, r3, #4
   27380:	vld1.32	{d16-d17}, [r7]
   27384:	vst1.32	{d16-d17}, [r3]
   27388:	cmp	r2, lr
   2738c:	bne	273a4 <__assert_fail@plt+0x15c44>
   27390:	ldr	r1, [sp, #16]
   27394:	ldr	r4, [sp, #52]	; 0x34
   27398:	ldr	lr, [sp, #56]	; 0x38
   2739c:	ldr	r7, [sp, #60]	; 0x3c
   273a0:	b	273d8 <__assert_fail@plt+0x15c78>
   273a4:	add	r1, r1, lr
   273a8:	ldr	r4, [sp, #52]	; 0x34
   273ac:	ldr	lr, [sp, #56]	; 0x38
   273b0:	ldr	r3, [sp, #44]	; 0x2c
   273b4:	ldr	r7, [sp, #60]	; 0x3c
   273b8:	sub	r2, r3, #1
   273bc:	add	r3, r8, r1, lsl #2
   273c0:	ldr	r3, [r3, #4]
   273c4:	str	r3, [r8, r1, lsl #2]
   273c8:	add	r1, r1, #1
   273cc:	cmp	r2, r1
   273d0:	bne	273bc <__assert_fail@plt+0x15c5c>
   273d4:	ldr	r1, [sp, #16]
   273d8:	str	r0, [sp, #44]	; 0x2c
   273dc:	str	r1, [sp, #24]
   273e0:	ldr	r3, [sp, #80]	; 0x50
   273e4:	ldr	r0, [r4, #116]	; 0x74
   273e8:	add	r1, r9, r9, lsl #1
   273ec:	add	r0, r0, r1, lsl #3
   273f0:	b	26f2c <__assert_fail@plt+0x157cc>
   273f4:	ldr	r0, [sp, #20]
   273f8:	ldr	r4, [sp, #24]
   273fc:	cmp	r0, r6
   27400:	ldr	r0, [sp, #16]
   27404:	beq	26ff8 <__assert_fail@plt+0x15898>
   27408:	b	27024 <__assert_fail@plt+0x158c4>
   2740c:	mov	lr, #0
   27410:	cmp	lr, r0
   27414:	blt	26d40 <__assert_fail@plt+0x155e0>
   27418:	mov	r0, #0
   2741c:	str	r0, [fp, #-76]	; 0xffffffb4
   27420:	mov	r8, #0
   27424:	mov	r0, r8
   27428:	sub	sp, fp, #28
   2742c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27430:	mov	r8, r0
   27434:	str	r0, [fp, #-76]	; 0xffffffb4
   27438:	b	27424 <__assert_fail@plt+0x15cc4>
   2743c:	str	r1, [fp, #-76]	; 0xffffffb4
   27440:	b	27420 <__assert_fail@plt+0x15cc0>
   27444:	str	r8, [sp, #68]	; 0x44
   27448:	mov	r8, #0
   2744c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27450:	cmp	r0, #0
   27454:	beq	27460 <__assert_fail@plt+0x15d00>
   27458:	ldr	r0, [sp, #68]	; 0x44
   2745c:	bl	141b8 <__assert_fail@plt+0x2a58>
   27460:	cmp	r8, #0
   27464:	str	r8, [fp, #-76]	; 0xffffffb4
   27468:	moveq	r8, #0
   2746c:	b	27424 <__assert_fail@plt+0x15cc4>
   27470:	str	r0, [fp, #-72]	; 0xffffffb8
   27474:	str	r8, [fp, #-76]	; 0xffffffb4
   27478:	b	27424 <__assert_fail@plt+0x15cc4>
   2747c:	mov	r8, r0
   27480:	b	2744c <__assert_fail@plt+0x15cec>
   27484:	mov	r8, r0
   27488:	b	27424 <__assert_fail@plt+0x15cc4>
   2748c:	mov	r1, #0
   27490:	mov	r0, #0
   27494:	mov	r8, #12
   27498:	str	r1, [fp, #-56]	; 0xffffffc8
   2749c:	str	r0, [sp, #68]	; 0x44
   274a0:	str	r1, [fp, #-52]	; 0xffffffcc
   274a4:	b	2744c <__assert_fail@plt+0x15cec>
   274a8:	str	r8, [sp, #68]	; 0x44
   274ac:	mov	r8, #12
   274b0:	b	2744c <__assert_fail@plt+0x15cec>
   274b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274b8:	add	fp, sp, #28
   274bc:	sub	sp, sp, #4
   274c0:	mov	r9, r0
   274c4:	ldr	r0, [r1, #4]
   274c8:	mov	r8, #0
   274cc:	cmp	r0, #0
   274d0:	beq	27680 <__assert_fail@plt+0x15f20>
   274d4:	mov	r5, r2
   274d8:	ldr	r2, [r2, #4]
   274dc:	cmp	r2, #0
   274e0:	beq	27680 <__assert_fail@plt+0x15f20>
   274e4:	mov	sl, r1
   274e8:	ldr	r1, [r9, #4]
   274ec:	ldr	r7, [r9]
   274f0:	add	r3, r2, r0
   274f4:	add	r6, r1, r3
   274f8:	cmp	r6, r7
   274fc:	ble	2752c <__assert_fail@plt+0x15dcc>
   27500:	ldr	r0, [r9, #8]
   27504:	add	r4, r7, r3
   27508:	lsl	r1, r4, #2
   2750c:	bl	2b290 <__assert_fail@plt+0x19b30>
   27510:	cmp	r0, #0
   27514:	beq	2768c <__assert_fail@plt+0x15f2c>
   27518:	str	r4, [r9]
   2751c:	str	r0, [r9, #8]
   27520:	ldr	r1, [r9, #4]
   27524:	ldr	r2, [r5, #4]
   27528:	ldr	r0, [sl, #4]
   2752c:	ldr	lr, [r5, #8]
   27530:	ldr	r4, [sl, #8]
   27534:	add	r3, r0, r1
   27538:	sub	r7, r1, #1
   2753c:	add	ip, r3, r2
   27540:	sub	r0, r0, #1
   27544:	sub	r3, r2, #1
   27548:	ldr	r1, [lr, r3, lsl #2]
   2754c:	ldr	r6, [r4, r0, lsl #2]
   27550:	cmp	r6, r1
   27554:	beq	27580 <__assert_fail@plt+0x15e20>
   27558:	blt	27570 <__assert_fail@plt+0x15e10>
   2755c:	sub	r6, r0, #1
   27560:	cmp	r0, #0
   27564:	mov	r0, r6
   27568:	bgt	2754c <__assert_fail@plt+0x15dec>
   2756c:	b	275e4 <__assert_fail@plt+0x15e84>
   27570:	cmp	r2, #2
   27574:	mov	r2, r3
   27578:	bge	27544 <__assert_fail@plt+0x15de4>
   2757c:	b	275e4 <__assert_fail@plt+0x15e84>
   27580:	cmp	r7, #0
   27584:	bmi	275c0 <__assert_fail@plt+0x15e60>
   27588:	ldr	r8, [r9, #8]
   2758c:	mov	r1, r7
   27590:	ldr	r7, [r8, r1, lsl #2]
   27594:	cmp	r7, r6
   27598:	ble	275b0 <__assert_fail@plt+0x15e50>
   2759c:	sub	r7, r1, #1
   275a0:	cmp	r1, #0
   275a4:	mov	r1, r7
   275a8:	bgt	27590 <__assert_fail@plt+0x15e30>
   275ac:	b	275c0 <__assert_fail@plt+0x15e60>
   275b0:	mov	r7, r1
   275b4:	bne	275c0 <__assert_fail@plt+0x15e60>
   275b8:	mov	r7, r1
   275bc:	b	275cc <__assert_fail@plt+0x15e6c>
   275c0:	ldr	r1, [r9, #8]
   275c4:	sub	ip, ip, #1
   275c8:	str	r6, [r1, ip, lsl #2]
   275cc:	cmp	r0, #1
   275d0:	mov	r8, #0
   275d4:	blt	275e4 <__assert_fail@plt+0x15e84>
   275d8:	cmp	r2, #2
   275dc:	mov	r2, r3
   275e0:	bge	27540 <__assert_fail@plt+0x15de0>
   275e4:	ldr	r2, [r9, #4]
   275e8:	ldr	lr, [sl, #4]
   275ec:	ldr	r4, [r5, #4]
   275f0:	ldr	r0, [r9, #8]
   275f4:	subs	r1, r2, #1
   275f8:	add	r3, r1, lr
   275fc:	add	r3, r3, r4
   27600:	sub	r7, r3, ip
   27604:	add	r6, r7, #1
   27608:	add	r5, r6, r2
   2760c:	str	r5, [r9, #4]
   27610:	blt	27670 <__assert_fail@plt+0x15f10>
   27614:	cmp	r7, #0
   27618:	bmi	27670 <__assert_fail@plt+0x15f10>
   2761c:	add	r2, r2, r4
   27620:	add	r2, r2, lr
   27624:	sub	r2, r2, ip
   27628:	add	r7, r0, r2, lsl #2
   2762c:	ldr	r2, [r0, r1, lsl #2]
   27630:	ldr	r5, [r0, r3, lsl #2]
   27634:	cmp	r5, r2
   27638:	bgt	27654 <__assert_fail@plt+0x15ef4>
   2763c:	str	r2, [r7, r1, lsl #2]
   27640:	sub	r2, r1, #1
   27644:	cmp	r1, #0
   27648:	mov	r1, r2
   2764c:	bgt	2762c <__assert_fail@plt+0x15ecc>
   27650:	b	27670 <__assert_fail@plt+0x15f10>
   27654:	str	r5, [r7, r1, lsl #2]
   27658:	sub	r7, r7, #4
   2765c:	subs	r6, r6, #1
   27660:	sub	r3, r3, #1
   27664:	mov	r2, #0
   27668:	bne	2762c <__assert_fail@plt+0x15ecc>
   2766c:	b	27674 <__assert_fail@plt+0x15f14>
   27670:	mov	r2, r6
   27674:	add	r1, r0, ip, lsl #2
   27678:	lsl	r2, r2, #2
   2767c:	bl	11484 <memcpy@plt>
   27680:	mov	r0, r8
   27684:	sub	sp, fp, #28
   27688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2768c:	mov	r8, #12
   27690:	b	27680 <__assert_fail@plt+0x15f20>
   27694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27698:	add	fp, sp, #28
   2769c:	sub	sp, sp, #44	; 0x2c
   276a0:	mov	ip, r0
   276a4:	ldr	r0, [r0, #28]
   276a8:	mov	r8, r2
   276ac:	add	r2, r1, r1, lsl #1
   276b0:	mov	r4, #0
   276b4:	str	r3, [sp, #4]
   276b8:	str	r4, [sp, #36]	; 0x24
   276bc:	str	r4, [sp, #32]
   276c0:	str	r4, [sp, #40]	; 0x28
   276c4:	add	r2, r0, r2, lsl #2
   276c8:	mov	r0, r2
   276cc:	ldr	r7, [r0, #4]!
   276d0:	str	r0, [sp, #28]
   276d4:	cmp	r7, #1
   276d8:	blt	279f0 <__assert_fail@plt+0x16290>
   276dc:	add	r4, r2, #8
   276e0:	mov	r9, #0
   276e4:	mov	sl, #1
   276e8:	str	r2, [sp]
   276ec:	str	r1, [sp, #12]
   276f0:	str	ip, [sp, #8]
   276f4:	str	r4, [sp, #20]
   276f8:	b	27708 <__assert_fail@plt+0x15fa8>
   276fc:	add	r9, r9, #1
   27700:	cmp	r9, r7
   27704:	bge	278c8 <__assert_fail@plt+0x16168>
   27708:	ldr	r3, [r4]
   2770c:	ldr	r0, [r3, r9, lsl #2]
   27710:	cmp	r0, r1
   27714:	beq	276fc <__assert_fail@plt+0x15f9c>
   27718:	ldr	r2, [ip]
   2771c:	add	r2, r2, r0, lsl #3
   27720:	ldrb	r2, [r2, #4]
   27724:	tst	r2, #8
   27728:	beq	276fc <__assert_fail@plt+0x15f9c>
   2772c:	ldr	r2, [ip, #20]
   27730:	add	r0, r0, r0, lsl #1
   27734:	mvn	lr, #0
   27738:	str	r7, [sp, #24]
   2773c:	str	r0, [sp, #16]
   27740:	add	r0, r2, r0, lsl #2
   27744:	ldr	r6, [r0, #4]
   27748:	ldr	r0, [r0, #8]
   2774c:	cmp	r6, #2
   27750:	ldr	r5, [r0]
   27754:	ldrge	lr, [r0, #4]
   27758:	cmp	r7, #1
   2775c:	blt	277a0 <__assert_fail@plt+0x16040>
   27760:	mov	r2, #0
   27764:	subs	r6, r7, #1
   27768:	beq	2778c <__assert_fail@plt+0x1602c>
   2776c:	add	r4, r2, r6
   27770:	lsr	r7, r4, #1
   27774:	ldr	r0, [r3, r7, lsl #2]
   27778:	cmp	r0, r5
   2777c:	addlt	r2, sl, r4, lsr #1
   27780:	movge	r6, r7
   27784:	cmp	r2, r6
   27788:	bcc	2776c <__assert_fail@plt+0x1600c>
   2778c:	ldr	r0, [r3, r2, lsl #2]
   27790:	ldr	r4, [sp, #20]
   27794:	ldr	r7, [sp, #24]
   27798:	cmp	r0, r5
   2779c:	beq	277f8 <__assert_fail@plt+0x16098>
   277a0:	ldr	r0, [r8, #4]
   277a4:	cmp	r0, #1
   277a8:	blt	277f8 <__assert_fail@plt+0x16098>
   277ac:	ldr	r1, [r8, #8]
   277b0:	subs	r4, r0, #1
   277b4:	mov	r6, #0
   277b8:	beq	277dc <__assert_fail@plt+0x1607c>
   277bc:	add	r0, r6, r4
   277c0:	lsr	r7, r0, #1
   277c4:	ldr	ip, [r1, r7, lsl #2]
   277c8:	cmp	ip, r5
   277cc:	addlt	r6, sl, r0, lsr #1
   277d0:	movge	r4, r7
   277d4:	cmp	r6, r4
   277d8:	bcc	277bc <__assert_fail@plt+0x1605c>
   277dc:	ldr	r0, [r1, r6, lsl #2]
   277e0:	ldr	r1, [sp, #12]
   277e4:	ldr	ip, [sp, #8]
   277e8:	ldr	r4, [sp, #20]
   277ec:	ldr	r7, [sp, #24]
   277f0:	cmp	r0, r5
   277f4:	beq	27894 <__assert_fail@plt+0x16134>
   277f8:	cmp	lr, #1
   277fc:	blt	276fc <__assert_fail@plt+0x15f9c>
   27800:	cmp	r7, #1
   27804:	blt	27844 <__assert_fail@plt+0x160e4>
   27808:	mov	r2, #0
   2780c:	subs	r6, r7, #1
   27810:	beq	27834 <__assert_fail@plt+0x160d4>
   27814:	add	r0, r2, r6
   27818:	lsr	r7, r0, #1
   2781c:	ldr	r5, [r3, r7, lsl #2]
   27820:	cmp	r5, lr
   27824:	addlt	r2, sl, r0, lsr #1
   27828:	movge	r6, r7
   2782c:	cmp	r2, r6
   27830:	bcc	27814 <__assert_fail@plt+0x160b4>
   27834:	ldr	r0, [r3, r2, lsl #2]
   27838:	ldr	r7, [sp, #24]
   2783c:	cmp	r0, lr
   27840:	beq	276fc <__assert_fail@plt+0x15f9c>
   27844:	ldr	r0, [r8, #4]
   27848:	cmp	r0, #1
   2784c:	blt	276fc <__assert_fail@plt+0x15f9c>
   27850:	ldr	r4, [r8, #8]
   27854:	subs	r6, r0, #1
   27858:	mov	r3, #0
   2785c:	beq	27880 <__assert_fail@plt+0x16120>
   27860:	add	r0, r3, r6
   27864:	lsr	r7, r0, #1
   27868:	ldr	r5, [r4, r7, lsl #2]
   2786c:	cmp	r5, lr
   27870:	addlt	r3, sl, r0, lsr #1
   27874:	movge	r6, r7
   27878:	cmp	r3, r6
   2787c:	bcc	27860 <__assert_fail@plt+0x16100>
   27880:	ldr	r0, [r4, r3, lsl #2]
   27884:	ldr	r4, [sp, #20]
   27888:	ldr	r7, [sp, #24]
   2788c:	cmp	r0, lr
   27890:	bne	276fc <__assert_fail@plt+0x15f9c>
   27894:	ldr	r0, [ip, #28]
   27898:	ldr	r1, [sp, #16]
   2789c:	add	r2, r0, r1, lsl #2
   278a0:	ldr	r1, [sp, #4]
   278a4:	add	r0, sp, #32
   278a8:	bl	274b4 <__assert_fail@plt+0x15d54>
   278ac:	cmp	r0, #0
   278b0:	bne	27a0c <__assert_fail@plt+0x162ac>
   278b4:	ldr	r0, [sp, #28]
   278b8:	ldr	r1, [sp, #12]
   278bc:	ldr	ip, [sp, #8]
   278c0:	ldr	r7, [r0]
   278c4:	b	276fc <__assert_fail@plt+0x15f9c>
   278c8:	ldr	r0, [sp]
   278cc:	cmp	r7, #0
   278d0:	mov	r4, #0
   278d4:	ble	279f0 <__assert_fail@plt+0x16290>
   278d8:	ldr	r9, [sp, #36]	; 0x24
   278dc:	ldr	lr, [r0, #8]
   278e0:	ldr	r0, [sp, #40]	; 0x28
   278e4:	mov	ip, #0
   278e8:	mov	r6, #1
   278ec:	sub	r1, r9, #1
   278f0:	str	lr, [sp, #20]
   278f4:	str	r9, [sp, #16]
   278f8:	str	r1, [sp, #24]
   278fc:	b	27914 <__assert_fail@plt+0x161b4>
   27900:	ldr	r1, [sp, #28]
   27904:	add	ip, ip, #1
   27908:	ldr	r1, [r1]
   2790c:	cmp	ip, r1
   27910:	bge	279f8 <__assert_fail@plt+0x16298>
   27914:	ldr	r5, [lr, ip, lsl #2]
   27918:	cmp	r9, #1
   2791c:	blt	2795c <__assert_fail@plt+0x161fc>
   27920:	ldr	r2, [sp, #24]
   27924:	mov	r1, #0
   27928:	cmp	r2, #0
   2792c:	beq	27950 <__assert_fail@plt+0x161f0>
   27930:	add	r3, r1, r2
   27934:	lsr	r4, r3, #1
   27938:	ldr	r7, [r0, r4, lsl #2]
   2793c:	cmp	r7, r5
   27940:	addlt	r1, r6, r3, lsr #1
   27944:	movge	r2, r4
   27948:	cmp	r1, r2
   2794c:	bcc	27930 <__assert_fail@plt+0x161d0>
   27950:	ldr	r1, [r0, r1, lsl #2]
   27954:	cmp	r1, r5
   27958:	beq	27900 <__assert_fail@plt+0x161a0>
   2795c:	ldr	r3, [r8, #4]
   27960:	cmp	r3, #1
   27964:	blt	27900 <__assert_fail@plt+0x161a0>
   27968:	mov	r1, r8
   2796c:	ldr	r1, [r8, #8]
   27970:	subs	sl, r3, #1
   27974:	mov	r2, #0
   27978:	beq	279a0 <__assert_fail@plt+0x16240>
   2797c:	mov	r4, sl
   27980:	add	r7, r2, r4
   27984:	lsr	lr, r7, #1
   27988:	ldr	r9, [r1, lr, lsl #2]
   2798c:	cmp	r9, r5
   27990:	addlt	r2, r6, r7, lsr #1
   27994:	movge	r4, lr
   27998:	cmp	r2, r4
   2799c:	bcc	27980 <__assert_fail@plt+0x16220>
   279a0:	ldr	r7, [r1, r2, lsl #2]
   279a4:	ldr	lr, [sp, #20]
   279a8:	ldr	r9, [sp, #16]
   279ac:	mov	r4, r2
   279b0:	cmp	r7, r5
   279b4:	mvnne	r4, #0
   279b8:	cmp	r4, #0
   279bc:	bmi	27900 <__assert_fail@plt+0x161a0>
   279c0:	cmp	r3, r4
   279c4:	strgt	sl, [r8, #4]
   279c8:	cmpgt	sl, r4
   279cc:	ble	27900 <__assert_fail@plt+0x161a0>
   279d0:	add	r3, r1, r2, lsl #2
   279d4:	ldr	r3, [r3, #4]
   279d8:	str	r3, [r1, r2, lsl #2]
   279dc:	add	r2, r2, #1
   279e0:	ldr	r3, [r8, #4]
   279e4:	cmp	r2, r3
   279e8:	blt	279d0 <__assert_fail@plt+0x16270>
   279ec:	b	27900 <__assert_fail@plt+0x161a0>
   279f0:	ldr	r0, [sp, #40]	; 0x28
   279f4:	b	279fc <__assert_fail@plt+0x1629c>
   279f8:	mov	r4, #0
   279fc:	bl	141b8 <__assert_fail@plt+0x2a58>
   27a00:	mov	r0, r4
   27a04:	sub	sp, fp, #28
   27a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a0c:	mov	r1, r0
   27a10:	ldr	r0, [sp, #40]	; 0x28
   27a14:	mov	r4, r1
   27a18:	b	279fc <__assert_fail@plt+0x1629c>
   27a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a20:	add	fp, sp, #28
   27a24:	sub	sp, sp, #28
   27a28:	ldr	ip, [r0, #108]	; 0x6c
   27a2c:	str	r1, [sp, #24]
   27a30:	ldr	r1, [r0, #84]	; 0x54
   27a34:	mov	r4, r3
   27a38:	str	r2, [sp, #8]
   27a3c:	str	r0, [sp, #16]
   27a40:	cmp	ip, #1
   27a44:	str	r1, [sp, #20]
   27a48:	blt	27ab0 <__assert_fail@plt+0x16350>
   27a4c:	ldr	r1, [r0, #116]	; 0x74
   27a50:	mov	r9, #0
   27a54:	mov	r2, #1
   27a58:	mov	r3, ip
   27a5c:	add	r7, r3, r9
   27a60:	add	r7, r7, r7, lsr #31
   27a64:	asr	r6, r7, #1
   27a68:	add	r5, r6, r6, lsl #1
   27a6c:	add	r5, r1, r5, lsl #3
   27a70:	ldr	r5, [r5, #4]
   27a74:	cmp	r5, r4
   27a78:	addlt	r9, r2, r7, asr #1
   27a7c:	movge	r3, r6
   27a80:	cmp	r9, r3
   27a84:	blt	27a5c <__assert_fail@plt+0x162fc>
   27a88:	cmp	r9, ip
   27a8c:	bge	27abc <__assert_fail@plt+0x1635c>
   27a90:	ldr	r0, [sp, #16]
   27a94:	add	r2, r9, r9, lsl #1
   27a98:	ldr	r1, [r0, #116]	; 0x74
   27a9c:	add	r1, r1, r2, lsl #3
   27aa0:	ldr	r1, [r1, #4]
   27aa4:	cmp	r1, r4
   27aa8:	mvnne	r9, #0
   27aac:	b	27ac0 <__assert_fail@plt+0x16360>
   27ab0:	mov	r9, #0
   27ab4:	cmp	r9, ip
   27ab8:	blt	27a90 <__assert_fail@plt+0x16330>
   27abc:	mvn	r9, #0
   27ac0:	ldr	r8, [fp, #12]
   27ac4:	cmp	ip, #1
   27ac8:	blt	27b10 <__assert_fail@plt+0x163b0>
   27acc:	ldr	r0, [sp, #16]
   27ad0:	mov	r6, #0
   27ad4:	mov	r2, #1
   27ad8:	mov	r3, ip
   27adc:	ldr	r1, [r0, #116]	; 0x74
   27ae0:	add	r7, r3, r6
   27ae4:	add	r7, r7, r7, lsr #31
   27ae8:	asr	r5, r7, #1
   27aec:	add	r0, r5, r5, lsl #1
   27af0:	add	r0, r1, r0, lsl #3
   27af4:	ldr	r0, [r0, #4]
   27af8:	cmp	r0, r8
   27afc:	addlt	r6, r2, r7, asr #1
   27b00:	movge	r3, r5
   27b04:	cmp	r6, r3
   27b08:	blt	27ae0 <__assert_fail@plt+0x16380>
   27b0c:	b	27b14 <__assert_fail@plt+0x163b4>
   27b10:	mov	r6, #0
   27b14:	cmp	r6, ip
   27b18:	ldr	ip, [sp, #16]
   27b1c:	bge	27b3c <__assert_fail@plt+0x163dc>
   27b20:	ldr	r0, [ip, #116]	; 0x74
   27b24:	add	r1, r6, r6, lsl #1
   27b28:	add	r0, r0, r1, lsl #3
   27b2c:	ldr	r0, [r0, #4]
   27b30:	cmp	r0, r8
   27b34:	mvnne	r6, #0
   27b38:	b	27b40 <__assert_fail@plt+0x163e0>
   27b3c:	mvn	r6, #0
   27b40:	ldr	r0, [sp, #24]
   27b44:	ldr	r0, [r0, #4]
   27b48:	cmp	r0, #1
   27b4c:	blt	27ccc <__assert_fail@plt+0x1656c>
   27b50:	mov	sl, #0
   27b54:	str	r4, [sp, #12]
   27b58:	ldr	r0, [sp, #24]
   27b5c:	ldr	r3, [ip, #116]	; 0x74
   27b60:	ldr	r5, [sp, #20]
   27b64:	ldr	r0, [r0, #8]
   27b68:	ldr	r5, [r5]
   27b6c:	ldr	r2, [r0, sl, lsl #2]
   27b70:	mov	r0, r3
   27b74:	add	r1, r2, r2, lsl #1
   27b78:	ldr	r7, [r0, r1, lsl #3]!
   27b7c:	ldr	r0, [r0, #8]
   27b80:	ldr	r5, [r5, r7, lsl #3]
   27b84:	mvn	r7, #0
   27b88:	cmp	r0, r4
   27b8c:	ble	27b98 <__assert_fail@plt+0x16438>
   27b90:	mvn	r8, #0
   27b94:	b	27c24 <__assert_fail@plt+0x164c4>
   27b98:	add	r1, r3, r1, lsl #3
   27b9c:	mov	r8, #1
   27ba0:	ldr	r1, [r1, #12]
   27ba4:	cmp	r1, r4
   27ba8:	blt	27c24 <__assert_fail@plt+0x164c4>
   27bac:	sub	r1, r1, r4
   27bb0:	cmp	r0, r4
   27bb4:	mov	lr, r5
   27bb8:	mov	r4, #1
   27bbc:	clz	r1, r1
   27bc0:	lsr	r5, r1, #5
   27bc4:	lsl	r1, r5, #1
   27bc8:	orreq	r1, r4, r5, lsl #1
   27bcc:	cmp	r1, #0
   27bd0:	beq	27c18 <__assert_fail@plt+0x164b8>
   27bd4:	ldr	r3, [sp, #8]
   27bd8:	mov	r0, ip
   27bdc:	mov	r2, lr
   27be0:	str	r9, [sp]
   27be4:	mov	r5, lr
   27be8:	bl	27cd8 <__assert_fail@plt+0x16578>
   27bec:	mov	r8, r0
   27bf0:	ldr	r0, [sp, #24]
   27bf4:	ldr	ip, [sp, #16]
   27bf8:	ldr	r4, [sp, #12]
   27bfc:	ldr	r0, [r0, #8]
   27c00:	ldr	r3, [ip, #116]	; 0x74
   27c04:	ldr	r2, [r0, sl, lsl #2]
   27c08:	add	r0, r2, r2, lsl #1
   27c0c:	add	r0, r3, r0, lsl #3
   27c10:	ldr	r0, [r0, #8]
   27c14:	b	27c24 <__assert_fail@plt+0x164c4>
   27c18:	ldr	r4, [sp, #12]
   27c1c:	mov	r8, #0
   27c20:	mov	r5, lr
   27c24:	ldr	r1, [fp, #12]
   27c28:	cmp	r0, r1
   27c2c:	bgt	27c94 <__assert_fail@plt+0x16534>
   27c30:	add	r1, r2, r2, lsl #1
   27c34:	ldr	r2, [fp, #12]
   27c38:	mov	r7, #1
   27c3c:	add	r1, r3, r1, lsl #3
   27c40:	ldr	r1, [r1, #12]
   27c44:	cmp	r1, r2
   27c48:	blt	27c94 <__assert_fail@plt+0x16534>
   27c4c:	ldr	r2, [fp, #12]
   27c50:	sub	r1, r1, r2
   27c54:	mov	r3, r2
   27c58:	clz	r1, r1
   27c5c:	cmp	r0, r3
   27c60:	mov	r0, #1
   27c64:	lsr	r2, r1, #5
   27c68:	lsl	r1, r2, #1
   27c6c:	orreq	r1, r0, r2, lsl #1
   27c70:	cmp	r1, #0
   27c74:	beq	27cb4 <__assert_fail@plt+0x16554>
   27c78:	ldr	r3, [fp, #8]
   27c7c:	mov	r0, ip
   27c80:	mov	r2, r5
   27c84:	str	r6, [sp]
   27c88:	bl	27cd8 <__assert_fail@plt+0x16578>
   27c8c:	ldr	ip, [sp, #16]
   27c90:	mov	r7, r0
   27c94:	cmp	r7, r8
   27c98:	bne	27cc0 <__assert_fail@plt+0x16560>
   27c9c:	ldr	r0, [sp, #24]
   27ca0:	add	sl, sl, #1
   27ca4:	ldr	r0, [r0, #4]
   27ca8:	cmp	sl, r0
   27cac:	blt	27b58 <__assert_fail@plt+0x163f8>
   27cb0:	b	27ccc <__assert_fail@plt+0x1656c>
   27cb4:	mov	r7, #0
   27cb8:	cmp	r7, r8
   27cbc:	beq	27c9c <__assert_fail@plt+0x1653c>
   27cc0:	mov	r0, #1
   27cc4:	sub	sp, fp, #28
   27cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ccc:	mov	r0, #0
   27cd0:	sub	sp, fp, #28
   27cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27cdc:	add	fp, sp, #28
   27ce0:	sub	sp, sp, #36	; 0x24
   27ce4:	ldr	r4, [r0, #84]	; 0x54
   27ce8:	mov	r7, r0
   27cec:	mov	r5, r1
   27cf0:	add	r1, r3, r3, lsl #1
   27cf4:	str	r3, [sp, #32]
   27cf8:	ldr	r0, [r4, #24]
   27cfc:	add	r1, r0, r1, lsl #2
   27d00:	mov	lr, r1
   27d04:	ldr	r0, [lr, #4]!
   27d08:	cmp	r0, #1
   27d0c:	blt	27eb8 <__assert_fail@plt+0x16758>
   27d10:	mov	ip, #1
   27d14:	mov	r6, r2
   27d18:	and	r3, r5, #2
   27d1c:	mov	sl, #0
   27d20:	mvn	r2, ip, lsl r2
   27d24:	cmp	r6, #31
   27d28:	str	r3, [sp, #16]
   27d2c:	str	r2, [sp, #24]
   27d30:	lsl	r2, ip, r6
   27d34:	and	ip, r5, #1
   27d38:	str	r2, [sp, #28]
   27d3c:	mov	r2, #0
   27d40:	movwgt	r2, #1
   27d44:	str	ip, [sp, #12]
   27d48:	orr	r2, r2, r3, lsr #1
   27d4c:	add	r3, r1, #8
   27d50:	stmib	sp, {r3, lr}
   27d54:	str	r2, [sp, #20]
   27d58:	b	27d78 <__assert_fail@plt+0x16618>
   27d5c:	ldr	lr, [sp, #8]
   27d60:	ldr	ip, [sp, #12]
   27d64:	ldr	r3, [sp, #4]
   27d68:	ldr	r0, [lr]
   27d6c:	add	sl, sl, #1
   27d70:	cmp	sl, r0
   27d74:	bge	27eb8 <__assert_fail@plt+0x16758>
   27d78:	ldr	r1, [r3]
   27d7c:	ldr	r9, [r1, sl, lsl #2]
   27d80:	ldr	r1, [r4]
   27d84:	add	r2, r1, r9, lsl #3
   27d88:	ldrb	r2, [r2, #4]
   27d8c:	cmp	r2, #9
   27d90:	beq	27e7c <__assert_fail@plt+0x1671c>
   27d94:	cmp	r2, #8
   27d98:	beq	27e98 <__assert_fail@plt+0x16738>
   27d9c:	cmp	r2, #4
   27da0:	bne	27d6c <__assert_fail@plt+0x1660c>
   27da4:	ldr	r1, [fp, #8]
   27da8:	cmn	r1, #1
   27dac:	beq	27d6c <__assert_fail@plt+0x1660c>
   27db0:	ldr	r1, [fp, #8]
   27db4:	ldr	r0, [r7, #116]	; 0x74
   27db8:	add	r1, r1, r1, lsl #1
   27dbc:	add	r0, r0, r1, lsl #3
   27dc0:	add	r8, r0, #16
   27dc4:	b	27de8 <__assert_fail@plt+0x16688>
   27dc8:	ldr	r0, [r8]
   27dcc:	ldr	r1, [sp, #24]
   27dd0:	and	r0, r0, r1
   27dd4:	str	r0, [r8]
   27dd8:	ldrb	r0, [r8, #4]
   27ddc:	add	r8, r8, #24
   27de0:	cmp	r0, #0
   27de4:	beq	27d5c <__assert_fail@plt+0x165fc>
   27de8:	ldr	r0, [r8, #-16]
   27dec:	cmp	r0, r9
   27df0:	bne	27dd8 <__assert_fail@plt+0x16678>
   27df4:	cmp	r6, #31
   27df8:	bgt	27e0c <__assert_fail@plt+0x166ac>
   27dfc:	ldr	r0, [r8]
   27e00:	ldr	r1, [sp, #28]
   27e04:	tst	r0, r1
   27e08:	beq	27dd8 <__assert_fail@plt+0x16678>
   27e0c:	ldr	r0, [r4, #20]
   27e10:	add	r1, r9, r9, lsl #1
   27e14:	add	r0, r0, r1, lsl #2
   27e18:	ldr	r0, [r0, #8]
   27e1c:	ldr	r3, [r0]
   27e20:	ldr	r0, [sp, #32]
   27e24:	cmp	r3, r0
   27e28:	beq	27ec4 <__assert_fail@plt+0x16764>
   27e2c:	ldr	r0, [fp, #8]
   27e30:	mov	r1, r5
   27e34:	mov	r2, r6
   27e38:	str	r0, [sp]
   27e3c:	mov	r0, r7
   27e40:	bl	27cd8 <__assert_fail@plt+0x16578>
   27e44:	cmp	r0, #0
   27e48:	beq	27e60 <__assert_fail@plt+0x16700>
   27e4c:	cmn	r0, #1
   27e50:	beq	27ed8 <__assert_fail@plt+0x16778>
   27e54:	cmp	r6, #31
   27e58:	ble	27dc8 <__assert_fail@plt+0x16668>
   27e5c:	b	27dd8 <__assert_fail@plt+0x16678>
   27e60:	ldr	r0, [sp, #20]
   27e64:	cmp	r0, #0
   27e68:	beq	27dc8 <__assert_fail@plt+0x16668>
   27e6c:	ldr	r0, [sp, #16]
   27e70:	cmp	r0, #0
   27e74:	beq	27dd8 <__assert_fail@plt+0x16678>
   27e78:	b	27ed4 <__assert_fail@plt+0x16774>
   27e7c:	ldr	r2, [sp, #16]
   27e80:	cmp	r2, #0
   27e84:	beq	27d6c <__assert_fail@plt+0x1660c>
   27e88:	ldr	r1, [r1, r9, lsl #3]
   27e8c:	cmp	r1, r6
   27e90:	bne	27d6c <__assert_fail@plt+0x1660c>
   27e94:	b	27ed4 <__assert_fail@plt+0x16774>
   27e98:	cmp	ip, #0
   27e9c:	beq	27d6c <__assert_fail@plt+0x1660c>
   27ea0:	ldr	r1, [r1, r9, lsl #3]
   27ea4:	cmp	r1, r6
   27ea8:	bne	27d6c <__assert_fail@plt+0x1660c>
   27eac:	mvn	r0, #0
   27eb0:	sub	sp, fp, #28
   27eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27eb8:	ubfx	r0, r5, #1, #1
   27ebc:	sub	sp, fp, #28
   27ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ec4:	ldr	r0, [sp, #12]
   27ec8:	rsb	r0, r0, #0
   27ecc:	sub	sp, fp, #28
   27ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ed4:	mov	r0, #0
   27ed8:	sub	sp, fp, #28
   27edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ee0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27ee4:	add	fp, sp, #24
   27ee8:	movw	r8, #0
   27eec:	mov	r6, r2
   27ef0:	mov	r4, r1
   27ef4:	mov	r5, r0
   27ef8:	movt	r8, #32752	; 0x7ff0
   27efc:	mov	r0, r5
   27f00:	mov	r1, r4
   27f04:	mov	r2, r6
   27f08:	bl	11424 <read@plt>
   27f0c:	mov	r7, r0
   27f10:	cmn	r0, #1
   27f14:	bgt	27f3c <__assert_fail@plt+0x167dc>
   27f18:	bl	11640 <__errno_location@plt>
   27f1c:	ldr	r0, [r0]
   27f20:	cmp	r0, #4
   27f24:	beq	27efc <__assert_fail@plt+0x1679c>
   27f28:	cmp	r6, r8
   27f2c:	bls	27f3c <__assert_fail@plt+0x167dc>
   27f30:	cmp	r0, #22
   27f34:	mov	r6, r8
   27f38:	beq	27efc <__assert_fail@plt+0x1679c>
   27f3c:	mov	r0, r7
   27f40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27f44:	mov	r1, #0
   27f48:	mov	r2, #3
   27f4c:	b	2b42c <__assert_fail@plt+0x19ccc>
   27f50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27f54:	add	fp, sp, #24
   27f58:	sub	sp, sp, #32
   27f5c:	ldr	r6, [fp, #12]
   27f60:	ldr	r7, [fp, #8]
   27f64:	mov	r4, r2
   27f68:	mov	r8, r0
   27f6c:	cmp	r1, #0
   27f70:	beq	27f98 <__assert_fail@plt+0x16838>
   27f74:	movw	r2, #51713	; 0xca01
   27f78:	mov	r5, r1
   27f7c:	str	r3, [sp, #4]
   27f80:	str	r4, [sp]
   27f84:	mov	r0, r8
   27f88:	mov	r1, #1
   27f8c:	movt	r2, #2
   27f90:	mov	r3, r5
   27f94:	b	27fb0 <__assert_fail@plt+0x16850>
   27f98:	movw	r2, #51725	; 0xca0d
   27f9c:	str	r3, [sp]
   27fa0:	mov	r0, r8
   27fa4:	mov	r1, #1
   27fa8:	mov	r3, r4
   27fac:	movt	r2, #2
   27fb0:	bl	116a0 <__fprintf_chk@plt>
   27fb4:	movw	r1, #51732	; 0xca14
   27fb8:	mov	r0, #0
   27fbc:	mov	r2, #5
   27fc0:	movt	r1, #2
   27fc4:	bl	114d8 <dcgettext@plt>
   27fc8:	movw	r2, #52450	; 0xcce2
   27fcc:	mov	r3, r0
   27fd0:	movw	r0, #2022	; 0x7e6
   27fd4:	mov	r1, #1
   27fd8:	movt	r2, #2
   27fdc:	str	r0, [sp]
   27fe0:	mov	r0, r8
   27fe4:	bl	116a0 <__fprintf_chk@plt>
   27fe8:	movw	r4, #49218	; 0xc042
   27fec:	mov	r1, r8
   27ff0:	movt	r4, #2
   27ff4:	mov	r0, r4
   27ff8:	bl	113dc <fputs_unlocked@plt>
   27ffc:	movw	r1, #51736	; 0xca18
   28000:	mov	r0, #0
   28004:	mov	r2, #5
   28008:	movt	r1, #2
   2800c:	bl	114d8 <dcgettext@plt>
   28010:	movw	r3, #51907	; 0xcac3
   28014:	mov	r2, r0
   28018:	mov	r0, r8
   2801c:	mov	r1, #1
   28020:	movt	r3, #2
   28024:	bl	116a0 <__fprintf_chk@plt>
   28028:	mov	r0, r4
   2802c:	mov	r1, r8
   28030:	bl	113dc <fputs_unlocked@plt>
   28034:	cmp	r6, #9
   28038:	bhi	28074 <__assert_fail@plt+0x16914>
   2803c:	add	r0, pc, #0
   28040:	ldr	pc, [r0, r6, lsl #2]
   28044:	andeq	r8, r2, ip, rrx
   28048:	andeq	r8, r2, r0, lsl #1
   2804c:	strheq	r8, [r2], -r0
   28050:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28054:	andeq	r8, r2, r0, lsl #2
   28058:	andeq	r8, r2, r8, lsr #2
   2805c:	andeq	r8, r2, r0, asr r1
   28060:	andeq	r8, r2, r8, lsl #3
   28064:	andeq	r8, r2, r8, lsr #4
   28068:	ldrdeq	r8, [r2], -r0
   2806c:	sub	sp, fp, #24
   28070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28074:	movw	r1, #52260	; 0xcc24
   28078:	movt	r1, #2
   2807c:	b	281d8 <__assert_fail@plt+0x16a78>
   28080:	movw	r1, #51941	; 0xcae5
   28084:	mov	r0, #0
   28088:	mov	r2, #5
   2808c:	movt	r1, #2
   28090:	bl	114d8 <dcgettext@plt>
   28094:	ldr	r3, [r7]
   28098:	mov	r2, r0
   2809c:	mov	r0, r8
   280a0:	mov	r1, #1
   280a4:	sub	sp, fp, #24
   280a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   280ac:	b	116a0 <__fprintf_chk@plt>
   280b0:	movw	r1, #51957	; 0xcaf5
   280b4:	mov	r0, #0
   280b8:	mov	r2, #5
   280bc:	movt	r1, #2
   280c0:	bl	114d8 <dcgettext@plt>
   280c4:	mov	r2, r0
   280c8:	ldr	r3, [r7]
   280cc:	ldr	r0, [r7, #4]
   280d0:	str	r0, [sp]
   280d4:	b	281c4 <__assert_fail@plt+0x16a64>
   280d8:	movw	r1, #51980	; 0xcb0c
   280dc:	mov	r0, #0
   280e0:	mov	r2, #5
   280e4:	movt	r1, #2
   280e8:	bl	114d8 <dcgettext@plt>
   280ec:	mov	r2, r0
   280f0:	ldr	r3, [r7]
   280f4:	ldmib	r7, {r0, r1}
   280f8:	stm	sp, {r0, r1}
   280fc:	b	281c4 <__assert_fail@plt+0x16a64>
   28100:	movw	r1, #52008	; 0xcb28
   28104:	mov	r0, #0
   28108:	mov	r2, #5
   2810c:	movt	r1, #2
   28110:	bl	114d8 <dcgettext@plt>
   28114:	ldr	r3, [r7]
   28118:	mov	r2, r0
   2811c:	ldmib	r7, {r0, r1, r7}
   28120:	stm	sp, {r0, r1, r7}
   28124:	b	281c4 <__assert_fail@plt+0x16a64>
   28128:	movw	r1, #52040	; 0xcb48
   2812c:	mov	r0, #0
   28130:	mov	r2, #5
   28134:	movt	r1, #2
   28138:	bl	114d8 <dcgettext@plt>
   2813c:	ldr	r3, [r7]
   28140:	mov	r2, r0
   28144:	ldmib	r7, {r0, r1, r6, r7}
   28148:	stm	sp, {r0, r1, r6, r7}
   2814c:	b	281c4 <__assert_fail@plt+0x16a64>
   28150:	movw	r1, #52076	; 0xcb6c
   28154:	mov	r0, #0
   28158:	mov	r2, #5
   2815c:	movt	r1, #2
   28160:	bl	114d8 <dcgettext@plt>
   28164:	mov	r2, r0
   28168:	ldr	r3, [r7]
   2816c:	ldmib	r7, {r0, r1, r6}
   28170:	ldr	r5, [r7, #16]
   28174:	ldr	r7, [r7, #20]
   28178:	stm	sp, {r0, r1, r6}
   2817c:	str	r5, [sp, #12]
   28180:	str	r7, [sp, #16]
   28184:	b	281c4 <__assert_fail@plt+0x16a64>
   28188:	movw	r1, #52116	; 0xcb94
   2818c:	mov	r0, #0
   28190:	mov	r2, #5
   28194:	movt	r1, #2
   28198:	bl	114d8 <dcgettext@plt>
   2819c:	mov	r2, r0
   281a0:	ldr	r3, [r7]
   281a4:	ldmib	r7, {r0, r1, r6}
   281a8:	ldr	r5, [r7, #16]
   281ac:	ldr	r4, [r7, #20]
   281b0:	ldr	r7, [r7, #24]
   281b4:	stm	sp, {r0, r1, r6}
   281b8:	str	r5, [sp, #12]
   281bc:	str	r4, [sp, #16]
   281c0:	str	r7, [sp, #20]
   281c4:	mov	r0, r8
   281c8:	mov	r1, #1
   281cc:	b	28278 <__assert_fail@plt+0x16b18>
   281d0:	movw	r1, #52208	; 0xcbf0
   281d4:	movt	r1, #2
   281d8:	mov	r0, #0
   281dc:	mov	r2, #5
   281e0:	bl	114d8 <dcgettext@plt>
   281e4:	mov	ip, r0
   281e8:	ldr	r3, [r7]
   281ec:	ldr	r0, [r7, #4]
   281f0:	ldr	r1, [r7, #8]
   281f4:	ldr	r6, [r7, #12]
   281f8:	ldr	r5, [r7, #16]
   281fc:	ldr	r4, [r7, #20]
   28200:	ldr	r2, [r7, #24]
   28204:	ldr	lr, [r7, #28]
   28208:	ldr	r7, [r7, #32]
   2820c:	stm	sp, {r0, r1, r6}
   28210:	str	r5, [sp, #12]
   28214:	str	r4, [sp, #16]
   28218:	str	r2, [sp, #20]
   2821c:	str	lr, [sp, #24]
   28220:	str	r7, [sp, #28]
   28224:	b	2826c <__assert_fail@plt+0x16b0c>
   28228:	movw	r1, #52160	; 0xcbc0
   2822c:	mov	r0, #0
   28230:	mov	r2, #5
   28234:	movt	r1, #2
   28238:	bl	114d8 <dcgettext@plt>
   2823c:	mov	ip, r0
   28240:	ldr	r3, [r7]
   28244:	ldmib	r7, {r0, r1, r6}
   28248:	ldr	r5, [r7, #16]
   2824c:	ldr	r4, [r7, #20]
   28250:	ldr	r2, [r7, #24]
   28254:	ldr	r7, [r7, #28]
   28258:	stm	sp, {r0, r1, r6}
   2825c:	str	r5, [sp, #12]
   28260:	str	r4, [sp, #16]
   28264:	str	r2, [sp, #20]
   28268:	str	r7, [sp, #24]
   2826c:	mov	r0, r8
   28270:	mov	r1, #1
   28274:	mov	r2, ip
   28278:	bl	116a0 <__fprintf_chk@plt>
   2827c:	sub	sp, fp, #24
   28280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28284:	push	{r4, sl, fp, lr}
   28288:	add	fp, sp, #8
   2828c:	sub	sp, sp, #8
   28290:	ldr	ip, [fp, #8]
   28294:	mov	lr, #0
   28298:	ldr	r4, [ip, lr, lsl #2]
   2829c:	add	lr, lr, #1
   282a0:	cmp	r4, #0
   282a4:	bne	28298 <__assert_fail@plt+0x16b38>
   282a8:	sub	r4, lr, #1
   282ac:	str	ip, [sp]
   282b0:	str	r4, [sp, #4]
   282b4:	bl	27f50 <__assert_fail@plt+0x167f0>
   282b8:	sub	sp, fp, #8
   282bc:	pop	{r4, sl, fp, pc}
   282c0:	push	{fp, lr}
   282c4:	mov	fp, sp
   282c8:	sub	sp, sp, #48	; 0x30
   282cc:	ldr	ip, [fp, #8]
   282d0:	ldr	lr, [ip]
   282d4:	cmp	lr, #0
   282d8:	str	lr, [sp, #8]
   282dc:	beq	28378 <__assert_fail@plt+0x16c18>
   282e0:	ldr	lr, [ip, #4]
   282e4:	cmp	lr, #0
   282e8:	str	lr, [sp, #12]
   282ec:	beq	28380 <__assert_fail@plt+0x16c20>
   282f0:	ldr	lr, [ip, #8]
   282f4:	cmp	lr, #0
   282f8:	str	lr, [sp, #16]
   282fc:	beq	28388 <__assert_fail@plt+0x16c28>
   28300:	ldr	lr, [ip, #12]
   28304:	cmp	lr, #0
   28308:	str	lr, [sp, #20]
   2830c:	beq	28390 <__assert_fail@plt+0x16c30>
   28310:	ldr	lr, [ip, #16]
   28314:	cmp	lr, #0
   28318:	str	lr, [sp, #24]
   2831c:	beq	28398 <__assert_fail@plt+0x16c38>
   28320:	ldr	lr, [ip, #20]
   28324:	cmp	lr, #0
   28328:	str	lr, [sp, #28]
   2832c:	beq	283a0 <__assert_fail@plt+0x16c40>
   28330:	ldr	lr, [ip, #24]
   28334:	cmp	lr, #0
   28338:	str	lr, [sp, #32]
   2833c:	beq	283a8 <__assert_fail@plt+0x16c48>
   28340:	ldr	lr, [ip, #28]
   28344:	cmp	lr, #0
   28348:	str	lr, [sp, #36]	; 0x24
   2834c:	beq	283b0 <__assert_fail@plt+0x16c50>
   28350:	ldr	lr, [ip, #32]
   28354:	cmp	lr, #0
   28358:	str	lr, [sp, #40]	; 0x28
   2835c:	beq	283b8 <__assert_fail@plt+0x16c58>
   28360:	ldr	lr, [ip, #36]	; 0x24
   28364:	mov	ip, #10
   28368:	cmp	lr, #0
   2836c:	str	lr, [sp, #44]	; 0x2c
   28370:	movweq	ip, #9
   28374:	b	283bc <__assert_fail@plt+0x16c5c>
   28378:	mov	ip, #0
   2837c:	b	283bc <__assert_fail@plt+0x16c5c>
   28380:	mov	ip, #1
   28384:	b	283bc <__assert_fail@plt+0x16c5c>
   28388:	mov	ip, #2
   2838c:	b	283bc <__assert_fail@plt+0x16c5c>
   28390:	mov	ip, #3
   28394:	b	283bc <__assert_fail@plt+0x16c5c>
   28398:	mov	ip, #4
   2839c:	b	283bc <__assert_fail@plt+0x16c5c>
   283a0:	mov	ip, #5
   283a4:	b	283bc <__assert_fail@plt+0x16c5c>
   283a8:	mov	ip, #6
   283ac:	b	283bc <__assert_fail@plt+0x16c5c>
   283b0:	mov	ip, #7
   283b4:	b	283bc <__assert_fail@plt+0x16c5c>
   283b8:	mov	ip, #8
   283bc:	add	lr, sp, #8
   283c0:	str	ip, [sp, #4]
   283c4:	str	lr, [sp]
   283c8:	bl	27f50 <__assert_fail@plt+0x167f0>
   283cc:	mov	sp, fp
   283d0:	pop	{fp, pc}
   283d4:	push	{fp, lr}
   283d8:	mov	fp, sp
   283dc:	sub	sp, sp, #56	; 0x38
   283e0:	add	ip, fp, #8
   283e4:	str	ip, [sp, #12]
   283e8:	ldr	lr, [fp, #8]
   283ec:	cmp	lr, #0
   283f0:	str	lr, [sp, #16]
   283f4:	beq	28490 <__assert_fail@plt+0x16d30>
   283f8:	ldr	lr, [ip, #4]
   283fc:	cmp	lr, #0
   28400:	str	lr, [sp, #20]
   28404:	beq	28498 <__assert_fail@plt+0x16d38>
   28408:	ldr	lr, [ip, #8]
   2840c:	cmp	lr, #0
   28410:	str	lr, [sp, #24]
   28414:	beq	284a0 <__assert_fail@plt+0x16d40>
   28418:	ldr	lr, [ip, #12]
   2841c:	cmp	lr, #0
   28420:	str	lr, [sp, #28]
   28424:	beq	284a8 <__assert_fail@plt+0x16d48>
   28428:	ldr	lr, [ip, #16]
   2842c:	cmp	lr, #0
   28430:	str	lr, [sp, #32]
   28434:	beq	284b0 <__assert_fail@plt+0x16d50>
   28438:	ldr	lr, [ip, #20]
   2843c:	cmp	lr, #0
   28440:	str	lr, [sp, #36]	; 0x24
   28444:	beq	284b8 <__assert_fail@plt+0x16d58>
   28448:	ldr	lr, [ip, #24]
   2844c:	cmp	lr, #0
   28450:	str	lr, [sp, #40]	; 0x28
   28454:	beq	284c0 <__assert_fail@plt+0x16d60>
   28458:	ldr	lr, [ip, #28]
   2845c:	cmp	lr, #0
   28460:	str	lr, [sp, #44]	; 0x2c
   28464:	beq	284c8 <__assert_fail@plt+0x16d68>
   28468:	ldr	lr, [ip, #32]
   2846c:	cmp	lr, #0
   28470:	str	lr, [sp, #48]	; 0x30
   28474:	beq	284d0 <__assert_fail@plt+0x16d70>
   28478:	ldr	lr, [ip, #36]	; 0x24
   2847c:	mov	ip, #10
   28480:	cmp	lr, #0
   28484:	str	lr, [sp, #52]	; 0x34
   28488:	movweq	ip, #9
   2848c:	b	284d4 <__assert_fail@plt+0x16d74>
   28490:	mov	ip, #0
   28494:	b	284d4 <__assert_fail@plt+0x16d74>
   28498:	mov	ip, #1
   2849c:	b	284d4 <__assert_fail@plt+0x16d74>
   284a0:	mov	ip, #2
   284a4:	b	284d4 <__assert_fail@plt+0x16d74>
   284a8:	mov	ip, #3
   284ac:	b	284d4 <__assert_fail@plt+0x16d74>
   284b0:	mov	ip, #4
   284b4:	b	284d4 <__assert_fail@plt+0x16d74>
   284b8:	mov	ip, #5
   284bc:	b	284d4 <__assert_fail@plt+0x16d74>
   284c0:	mov	ip, #6
   284c4:	b	284d4 <__assert_fail@plt+0x16d74>
   284c8:	mov	ip, #7
   284cc:	b	284d4 <__assert_fail@plt+0x16d74>
   284d0:	mov	ip, #8
   284d4:	add	lr, sp, #16
   284d8:	str	ip, [sp, #4]
   284dc:	str	lr, [sp]
   284e0:	bl	27f50 <__assert_fail@plt+0x167f0>
   284e4:	mov	sp, fp
   284e8:	pop	{fp, pc}
   284ec:	push	{fp, lr}
   284f0:	mov	fp, sp
   284f4:	movw	r0, #53692	; 0xd1bc
   284f8:	movt	r0, #3
   284fc:	ldr	r1, [r0]
   28500:	movw	r0, #49218	; 0xc042
   28504:	movt	r0, #2
   28508:	bl	113dc <fputs_unlocked@plt>
   2850c:	movw	r1, #52320	; 0xcc60
   28510:	mov	r0, #0
   28514:	mov	r2, #5
   28518:	movt	r1, #2
   2851c:	bl	114d8 <dcgettext@plt>
   28520:	movw	r2, #52340	; 0xcc74
   28524:	mov	r1, r0
   28528:	mov	r0, #1
   2852c:	movt	r2, #2
   28530:	bl	11688 <__printf_chk@plt>
   28534:	movw	r1, #52362	; 0xcc8a
   28538:	mov	r0, #0
   2853c:	mov	r2, #5
   28540:	movt	r1, #2
   28544:	bl	114d8 <dcgettext@plt>
   28548:	movw	r2, #47889	; 0xbb11
   2854c:	movw	r3, #50383	; 0xc4cf
   28550:	mov	r1, r0
   28554:	mov	r0, #1
   28558:	movt	r2, #2
   2855c:	movt	r3, #2
   28560:	bl	11688 <__printf_chk@plt>
   28564:	movw	r1, #52382	; 0xcc9e
   28568:	mov	r0, #0
   2856c:	mov	r2, #5
   28570:	movt	r1, #2
   28574:	bl	114d8 <dcgettext@plt>
   28578:	movw	r2, #52421	; 0xccc5
   2857c:	mov	r1, r0
   28580:	mov	r0, #1
   28584:	movt	r2, #2
   28588:	pop	{fp, lr}
   2858c:	b	11688 <__printf_chk@plt>
   28590:	push	{r4, r5, r6, sl, fp, lr}
   28594:	add	fp, sp, #16
   28598:	mov	r4, r2
   2859c:	mov	r5, r1
   285a0:	mov	r6, r0
   285a4:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   285a8:	cmp	r0, #0
   285ac:	popne	{r4, r5, r6, sl, fp, pc}
   285b0:	cmp	r6, #0
   285b4:	beq	285c8 <__assert_fail@plt+0x16e68>
   285b8:	cmp	r5, #0
   285bc:	cmpne	r4, #0
   285c0:	bne	285c8 <__assert_fail@plt+0x16e68>
   285c4:	pop	{r4, r5, r6, sl, fp, pc}
   285c8:	bl	11860 <__assert_fail@plt+0x100>
   285cc:	push	{r4, r5, r6, sl, fp, lr}
   285d0:	add	fp, sp, #16
   285d4:	mov	r4, r2
   285d8:	mov	r5, r1
   285dc:	mov	r6, r0
   285e0:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   285e4:	cmp	r0, #0
   285e8:	popne	{r4, r5, r6, sl, fp, pc}
   285ec:	cmp	r6, #0
   285f0:	beq	28604 <__assert_fail@plt+0x16ea4>
   285f4:	cmp	r5, #0
   285f8:	cmpne	r4, #0
   285fc:	bne	28604 <__assert_fail@plt+0x16ea4>
   28600:	pop	{r4, r5, r6, sl, fp, pc}
   28604:	bl	11860 <__assert_fail@plt+0x100>
   28608:	push	{fp, lr}
   2860c:	mov	fp, sp
   28610:	bl	2b260 <__assert_fail@plt+0x19b00>
   28614:	cmp	r0, #0
   28618:	popne	{fp, pc}
   2861c:	bl	11860 <__assert_fail@plt+0x100>
   28620:	push	{fp, lr}
   28624:	mov	fp, sp
   28628:	bl	2b260 <__assert_fail@plt+0x19b00>
   2862c:	cmp	r0, #0
   28630:	popne	{fp, pc}
   28634:	bl	11860 <__assert_fail@plt+0x100>
   28638:	push	{fp, lr}
   2863c:	mov	fp, sp
   28640:	bl	2b260 <__assert_fail@plt+0x19b00>
   28644:	cmp	r0, #0
   28648:	popne	{fp, pc}
   2864c:	bl	11860 <__assert_fail@plt+0x100>
   28650:	push	{r4, r5, fp, lr}
   28654:	add	fp, sp, #8
   28658:	mov	r4, r1
   2865c:	mov	r5, r0
   28660:	bl	2b290 <__assert_fail@plt+0x19b30>
   28664:	cmp	r0, #0
   28668:	popne	{r4, r5, fp, pc}
   2866c:	cmp	r5, #0
   28670:	beq	28680 <__assert_fail@plt+0x16f20>
   28674:	cmp	r4, #0
   28678:	bne	28680 <__assert_fail@plt+0x16f20>
   2867c:	pop	{r4, r5, fp, pc}
   28680:	bl	11860 <__assert_fail@plt+0x100>
   28684:	push	{fp, lr}
   28688:	mov	fp, sp
   2868c:	cmp	r1, #0
   28690:	orreq	r1, r1, #1
   28694:	bl	2b290 <__assert_fail@plt+0x19b30>
   28698:	cmp	r0, #0
   2869c:	popne	{fp, pc}
   286a0:	bl	11860 <__assert_fail@plt+0x100>
   286a4:	push	{fp, lr}
   286a8:	mov	fp, sp
   286ac:	clz	r3, r2
   286b0:	lsr	ip, r3, #5
   286b4:	clz	r3, r1
   286b8:	lsr	r3, r3, #5
   286bc:	orrs	r3, r3, ip
   286c0:	movwne	r1, #1
   286c4:	movwne	r2, #1
   286c8:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   286cc:	cmp	r0, #0
   286d0:	popne	{fp, pc}
   286d4:	bl	11860 <__assert_fail@plt+0x100>
   286d8:	push	{fp, lr}
   286dc:	mov	fp, sp
   286e0:	mov	r2, r1
   286e4:	mov	r1, r0
   286e8:	mov	r0, #0
   286ec:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   286f0:	cmp	r0, #0
   286f4:	popne	{fp, pc}
   286f8:	bl	11860 <__assert_fail@plt+0x100>
   286fc:	push	{fp, lr}
   28700:	mov	fp, sp
   28704:	mov	r2, r1
   28708:	mov	r1, r0
   2870c:	clz	r0, r2
   28710:	clz	r3, r1
   28714:	lsr	r0, r0, #5
   28718:	lsr	r3, r3, #5
   2871c:	orrs	r0, r3, r0
   28720:	mov	r0, #0
   28724:	movwne	r1, #1
   28728:	movwne	r2, #1
   2872c:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   28730:	cmp	r0, #0
   28734:	popne	{fp, pc}
   28738:	bl	11860 <__assert_fail@plt+0x100>
   2873c:	push	{r4, r5, r6, sl, fp, lr}
   28740:	add	fp, sp, #16
   28744:	ldr	r5, [r1]
   28748:	mov	r4, r1
   2874c:	mov	r6, r0
   28750:	cmp	r0, #0
   28754:	beq	2876c <__assert_fail@plt+0x1700c>
   28758:	mov	r0, #1
   2875c:	add	r0, r0, r5, lsr #1
   28760:	adds	r5, r5, r0
   28764:	bcc	28774 <__assert_fail@plt+0x17014>
   28768:	b	287b0 <__assert_fail@plt+0x17050>
   2876c:	cmp	r5, #0
   28770:	movweq	r5, #64	; 0x40
   28774:	mov	r0, r6
   28778:	mov	r1, r5
   2877c:	mov	r2, #1
   28780:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   28784:	cmp	r5, #0
   28788:	mov	r1, r5
   2878c:	movwne	r1, #1
   28790:	cmp	r0, #0
   28794:	bne	287a8 <__assert_fail@plt+0x17048>
   28798:	clz	r2, r6
   2879c:	lsr	r2, r2, #5
   287a0:	orrs	r1, r2, r1
   287a4:	bne	287b0 <__assert_fail@plt+0x17050>
   287a8:	str	r5, [r4]
   287ac:	pop	{r4, r5, r6, sl, fp, pc}
   287b0:	bl	11860 <__assert_fail@plt+0x100>
   287b4:	push	{r4, r5, r6, r7, fp, lr}
   287b8:	add	fp, sp, #16
   287bc:	ldr	r5, [r1]
   287c0:	mov	r6, r2
   287c4:	mov	r4, r1
   287c8:	mov	r7, r0
   287cc:	cmp	r0, #0
   287d0:	beq	287e8 <__assert_fail@plt+0x17088>
   287d4:	mov	r0, #1
   287d8:	add	r0, r0, r5, lsr #1
   287dc:	adds	r5, r5, r0
   287e0:	bcc	28800 <__assert_fail@plt+0x170a0>
   287e4:	b	28834 <__assert_fail@plt+0x170d4>
   287e8:	cmp	r5, #0
   287ec:	bne	28800 <__assert_fail@plt+0x170a0>
   287f0:	mov	r0, #64	; 0x40
   287f4:	cmp	r6, #64	; 0x40
   287f8:	udiv	r5, r0, r6
   287fc:	addhi	r5, r5, #1
   28800:	mov	r0, r7
   28804:	mov	r1, r5
   28808:	mov	r2, r6
   2880c:	bl	2b6a8 <__assert_fail@plt+0x19f48>
   28810:	cmp	r0, #0
   28814:	bne	2882c <__assert_fail@plt+0x170cc>
   28818:	cmp	r7, #0
   2881c:	beq	28834 <__assert_fail@plt+0x170d4>
   28820:	cmp	r6, #0
   28824:	cmpne	r5, #0
   28828:	bne	28834 <__assert_fail@plt+0x170d4>
   2882c:	str	r5, [r4]
   28830:	pop	{r4, r5, r6, r7, fp, pc}
   28834:	bl	11860 <__assert_fail@plt+0x100>
   28838:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2883c:	add	fp, sp, #24
   28840:	mov	r8, r1
   28844:	ldr	r1, [r1]
   28848:	mov	r5, r0
   2884c:	add	r0, r1, r1, asr #1
   28850:	cmp	r0, r1
   28854:	mvnvs	r0, #-2147483648	; 0x80000000
   28858:	cmp	r0, r3
   2885c:	mov	r7, r0
   28860:	movgt	r7, r3
   28864:	cmn	r3, #1
   28868:	movle	r7, r0
   2886c:	ldr	r0, [fp, #8]
   28870:	cmn	r0, #1
   28874:	ble	2889c <__assert_fail@plt+0x1713c>
   28878:	cmp	r0, #0
   2887c:	beq	288f0 <__assert_fail@plt+0x17190>
   28880:	cmn	r7, #1
   28884:	ble	288c4 <__assert_fail@plt+0x17164>
   28888:	mvn	r4, #-2147483648	; 0x80000000
   2888c:	udiv	r6, r4, r0
   28890:	cmp	r6, r7
   28894:	bge	288f0 <__assert_fail@plt+0x17190>
   28898:	b	28900 <__assert_fail@plt+0x171a0>
   2889c:	cmn	r7, #1
   288a0:	ble	288e0 <__assert_fail@plt+0x17180>
   288a4:	cmn	r0, #1
   288a8:	beq	288f0 <__assert_fail@plt+0x17190>
   288ac:	mov	r6, #-2147483648	; 0x80000000
   288b0:	mvn	r4, #-2147483648	; 0x80000000
   288b4:	sdiv	r6, r6, r0
   288b8:	cmp	r6, r7
   288bc:	bge	288f0 <__assert_fail@plt+0x17190>
   288c0:	b	28900 <__assert_fail@plt+0x171a0>
   288c4:	beq	288f0 <__assert_fail@plt+0x17190>
   288c8:	mov	r6, #-2147483648	; 0x80000000
   288cc:	mvn	r4, #-2147483648	; 0x80000000
   288d0:	sdiv	r6, r6, r7
   288d4:	cmp	r6, r0
   288d8:	bge	288f0 <__assert_fail@plt+0x17190>
   288dc:	b	28900 <__assert_fail@plt+0x171a0>
   288e0:	mvn	r4, #-2147483648	; 0x80000000
   288e4:	sdiv	r6, r4, r0
   288e8:	cmp	r7, r6
   288ec:	blt	28900 <__assert_fail@plt+0x171a0>
   288f0:	mul	r6, r7, r0
   288f4:	mov	r4, #64	; 0x40
   288f8:	cmp	r6, #63	; 0x3f
   288fc:	bgt	28908 <__assert_fail@plt+0x171a8>
   28900:	sdiv	r7, r4, r0
   28904:	mul	r6, r7, r0
   28908:	cmp	r5, #0
   2890c:	moveq	r4, #0
   28910:	streq	r4, [r8]
   28914:	sub	r4, r7, r1
   28918:	cmp	r4, r2
   2891c:	bge	289c8 <__assert_fail@plt+0x17268>
   28920:	add	r7, r1, r2
   28924:	mov	r6, #0
   28928:	mov	r2, #0
   2892c:	cmp	r7, r3
   28930:	movwgt	r6, #1
   28934:	cmn	r3, #1
   28938:	movwgt	r2, #1
   2893c:	cmp	r7, r1
   28940:	bvs	289fc <__assert_fail@plt+0x1729c>
   28944:	ands	r1, r2, r6
   28948:	bne	289fc <__assert_fail@plt+0x1729c>
   2894c:	cmn	r0, #1
   28950:	ble	28978 <__assert_fail@plt+0x17218>
   28954:	cmp	r0, #0
   28958:	beq	289c4 <__assert_fail@plt+0x17264>
   2895c:	cmn	r7, #1
   28960:	ble	2899c <__assert_fail@plt+0x1723c>
   28964:	mvn	r1, #-2147483648	; 0x80000000
   28968:	udiv	r1, r1, r0
   2896c:	cmp	r1, r7
   28970:	bge	289c4 <__assert_fail@plt+0x17264>
   28974:	b	289fc <__assert_fail@plt+0x1729c>
   28978:	cmn	r7, #1
   2897c:	ble	289b4 <__assert_fail@plt+0x17254>
   28980:	cmn	r0, #1
   28984:	beq	289c4 <__assert_fail@plt+0x17264>
   28988:	mov	r1, #-2147483648	; 0x80000000
   2898c:	sdiv	r1, r1, r0
   28990:	cmp	r1, r7
   28994:	bge	289c4 <__assert_fail@plt+0x17264>
   28998:	b	289fc <__assert_fail@plt+0x1729c>
   2899c:	beq	289c4 <__assert_fail@plt+0x17264>
   289a0:	mov	r1, #-2147483648	; 0x80000000
   289a4:	sdiv	r1, r1, r7
   289a8:	cmp	r1, r0
   289ac:	bge	289c4 <__assert_fail@plt+0x17264>
   289b0:	b	289fc <__assert_fail@plt+0x1729c>
   289b4:	mvn	r1, #-2147483648	; 0x80000000
   289b8:	sdiv	r1, r1, r0
   289bc:	cmp	r7, r1
   289c0:	blt	289fc <__assert_fail@plt+0x1729c>
   289c4:	mul	r6, r7, r0
   289c8:	mov	r0, r5
   289cc:	mov	r1, r6
   289d0:	bl	2b290 <__assert_fail@plt+0x19b30>
   289d4:	cmp	r6, #0
   289d8:	movwne	r6, #1
   289dc:	cmp	r0, #0
   289e0:	bne	289f4 <__assert_fail@plt+0x17294>
   289e4:	clz	r1, r5
   289e8:	lsr	r1, r1, #5
   289ec:	orrs	r1, r1, r6
   289f0:	bne	289fc <__assert_fail@plt+0x1729c>
   289f4:	str	r7, [r8]
   289f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   289fc:	bl	11860 <__assert_fail@plt+0x100>
   28a00:	push	{fp, lr}
   28a04:	mov	fp, sp
   28a08:	mov	r1, #1
   28a0c:	bl	2b20c <__assert_fail@plt+0x19aac>
   28a10:	cmp	r0, #0
   28a14:	popne	{fp, pc}
   28a18:	bl	11860 <__assert_fail@plt+0x100>
   28a1c:	push	{fp, lr}
   28a20:	mov	fp, sp
   28a24:	bl	2b20c <__assert_fail@plt+0x19aac>
   28a28:	cmp	r0, #0
   28a2c:	popne	{fp, pc}
   28a30:	bl	11860 <__assert_fail@plt+0x100>
   28a34:	push	{fp, lr}
   28a38:	mov	fp, sp
   28a3c:	mov	r1, #1
   28a40:	bl	2b20c <__assert_fail@plt+0x19aac>
   28a44:	cmp	r0, #0
   28a48:	popne	{fp, pc}
   28a4c:	bl	11860 <__assert_fail@plt+0x100>
   28a50:	push	{fp, lr}
   28a54:	mov	fp, sp
   28a58:	bl	2b20c <__assert_fail@plt+0x19aac>
   28a5c:	cmp	r0, #0
   28a60:	popne	{fp, pc}
   28a64:	bl	11860 <__assert_fail@plt+0x100>
   28a68:	push	{r4, r5, fp, lr}
   28a6c:	add	fp, sp, #8
   28a70:	mov	r5, r0
   28a74:	mov	r0, r1
   28a78:	mov	r4, r1
   28a7c:	bl	2b260 <__assert_fail@plt+0x19b00>
   28a80:	cmp	r0, #0
   28a84:	beq	28a98 <__assert_fail@plt+0x17338>
   28a88:	mov	r1, r5
   28a8c:	mov	r2, r4
   28a90:	pop	{r4, r5, fp, lr}
   28a94:	b	11484 <memcpy@plt>
   28a98:	bl	11860 <__assert_fail@plt+0x100>
   28a9c:	push	{r4, r5, fp, lr}
   28aa0:	add	fp, sp, #8
   28aa4:	mov	r5, r0
   28aa8:	mov	r0, r1
   28aac:	mov	r4, r1
   28ab0:	bl	2b260 <__assert_fail@plt+0x19b00>
   28ab4:	cmp	r0, #0
   28ab8:	beq	28acc <__assert_fail@plt+0x1736c>
   28abc:	mov	r1, r5
   28ac0:	mov	r2, r4
   28ac4:	pop	{r4, r5, fp, lr}
   28ac8:	b	11484 <memcpy@plt>
   28acc:	bl	11860 <__assert_fail@plt+0x100>
   28ad0:	push	{r4, r5, fp, lr}
   28ad4:	add	fp, sp, #8
   28ad8:	mov	r5, r0
   28adc:	add	r0, r1, #1
   28ae0:	mov	r4, r1
   28ae4:	bl	2b260 <__assert_fail@plt+0x19b00>
   28ae8:	cmp	r0, #0
   28aec:	beq	28b08 <__assert_fail@plt+0x173a8>
   28af0:	mov	r1, #0
   28af4:	mov	r2, r4
   28af8:	strb	r1, [r0, r4]
   28afc:	mov	r1, r5
   28b00:	pop	{r4, r5, fp, lr}
   28b04:	b	11484 <memcpy@plt>
   28b08:	bl	11860 <__assert_fail@plt+0x100>
   28b0c:	push	{r4, r5, fp, lr}
   28b10:	add	fp, sp, #8
   28b14:	mov	r4, r0
   28b18:	bl	11628 <strlen@plt>
   28b1c:	add	r5, r0, #1
   28b20:	mov	r0, r5
   28b24:	bl	2b260 <__assert_fail@plt+0x19b00>
   28b28:	cmp	r0, #0
   28b2c:	beq	28b40 <__assert_fail@plt+0x173e0>
   28b30:	mov	r1, r4
   28b34:	mov	r2, r5
   28b38:	pop	{r4, r5, fp, lr}
   28b3c:	b	11484 <memcpy@plt>
   28b40:	bl	11860 <__assert_fail@plt+0x100>
   28b44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28b48:	add	fp, sp, #24
   28b4c:	sub	sp, sp, #16
   28b50:	mov	r8, r0
   28b54:	ldr	r0, [fp, #16]
   28b58:	mov	r7, r3
   28b5c:	mov	r4, r2
   28b60:	mov	r2, r1
   28b64:	add	r3, sp, #8
   28b68:	mov	r1, #0
   28b6c:	str	r0, [sp]
   28b70:	mov	r0, r8
   28b74:	bl	28c54 <__assert_fail@plt+0x174f4>
   28b78:	cmp	r0, #0
   28b7c:	bne	28c28 <__assert_fail@plt+0x174c8>
   28b80:	ldr	r6, [sp, #8]
   28b84:	ldr	r5, [sp, #12]
   28b88:	subs	r0, r6, r4
   28b8c:	sbcs	r0, r5, r7
   28b90:	blt	28bb4 <__assert_fail@plt+0x17454>
   28b94:	ldr	r1, [fp, #8]
   28b98:	ldr	r0, [fp, #12]
   28b9c:	subs	r1, r1, r6
   28ba0:	sbcs	r0, r0, r5
   28ba4:	movge	r0, r6
   28ba8:	movge	r1, r5
   28bac:	subge	sp, fp, #24
   28bb0:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   28bb4:	subs	r0, r6, #1073741824	; 0x40000000
   28bb8:	sbcs	r0, r5, #0
   28bbc:	blt	28bcc <__assert_fail@plt+0x1746c>
   28bc0:	bl	11640 <__errno_location@plt>
   28bc4:	mov	r1, #75	; 0x4b
   28bc8:	b	28be8 <__assert_fail@plt+0x17488>
   28bcc:	bl	11640 <__errno_location@plt>
   28bd0:	mvn	r2, #1073741824	; 0x40000000
   28bd4:	mvn	r1, #0
   28bd8:	subs	r2, r2, r6
   28bdc:	sbcs	r1, r1, r5
   28be0:	movlt	r1, #34	; 0x22
   28be4:	movge	r1, #75	; 0x4b
   28be8:	str	r1, [r0]
   28bec:	ldr	r6, [r0]
   28bf0:	ldr	r4, [fp, #24]
   28bf4:	ldr	r5, [fp, #20]
   28bf8:	mov	r0, r8
   28bfc:	bl	15f9c <__assert_fail@plt+0x483c>
   28c00:	subs	r1, r6, #22
   28c04:	movw	r2, #50883	; 0xc6c3
   28c08:	str	r0, [sp]
   28c0c:	mov	r3, r5
   28c10:	movne	r1, r6
   28c14:	cmp	r4, #0
   28c18:	movt	r2, #2
   28c1c:	movweq	r4, #1
   28c20:	mov	r0, r4
   28c24:	bl	1158c <error@plt>
   28c28:	cmp	r0, #1
   28c2c:	beq	28bc0 <__assert_fail@plt+0x17460>
   28c30:	cmp	r0, #3
   28c34:	bne	28c44 <__assert_fail@plt+0x174e4>
   28c38:	bl	11640 <__errno_location@plt>
   28c3c:	mov	r1, #0
   28c40:	b	28be8 <__assert_fail@plt+0x17488>
   28c44:	bl	11640 <__errno_location@plt>
   28c48:	b	28bec <__assert_fail@plt+0x1748c>
   28c4c:	mov	r1, #10
   28c50:	b	28b44 <__assert_fail@plt+0x173e4>
   28c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c58:	add	fp, sp, #28
   28c5c:	sub	sp, sp, #36	; 0x24
   28c60:	cmp	r2, #37	; 0x25
   28c64:	bcs	2a54c <__assert_fail@plt+0x18dec>
   28c68:	ldr	r8, [fp, #8]
   28c6c:	mov	r9, r3
   28c70:	mov	r6, r2
   28c74:	mov	r7, r1
   28c78:	mov	r4, r0
   28c7c:	bl	11640 <__errno_location@plt>
   28c80:	cmp	r7, #0
   28c84:	add	sl, sp, #32
   28c88:	mov	r5, r0
   28c8c:	mov	r0, #0
   28c90:	mov	r2, r6
   28c94:	mov	r3, #0
   28c98:	movne	sl, r7
   28c9c:	str	r0, [r5]
   28ca0:	mov	r0, r4
   28ca4:	mov	r1, sl
   28ca8:	bl	11700 <__strtoll_internal@plt>
   28cac:	mov	r7, r1
   28cb0:	ldr	r1, [sl]
   28cb4:	cmp	r1, r4
   28cb8:	beq	28ce8 <__assert_fail@plt+0x17588>
   28cbc:	mov	r6, r0
   28cc0:	ldr	r0, [r5]
   28cc4:	cmp	r0, #0
   28cc8:	beq	28d28 <__assert_fail@plt+0x175c8>
   28ccc:	mov	r5, #4
   28cd0:	cmp	r0, #34	; 0x22
   28cd4:	bne	2a15c <__assert_fail@plt+0x189fc>
   28cd8:	mov	r5, #1
   28cdc:	cmp	r8, #0
   28ce0:	bne	28d34 <__assert_fail@plt+0x175d4>
   28ce4:	b	2a158 <__assert_fail@plt+0x189f8>
   28ce8:	mov	r5, #4
   28cec:	cmp	r8, #0
   28cf0:	beq	2a15c <__assert_fail@plt+0x189fc>
   28cf4:	mov	r6, r1
   28cf8:	ldrb	r1, [r4]
   28cfc:	cmp	r1, #0
   28d00:	beq	2a15c <__assert_fail@plt+0x189fc>
   28d04:	mov	r0, r8
   28d08:	bl	11634 <strchr@plt>
   28d0c:	cmp	r0, #0
   28d10:	beq	2a15c <__assert_fail@plt+0x189fc>
   28d14:	mov	r1, r6
   28d18:	mov	r5, #0
   28d1c:	mov	r6, #1
   28d20:	mov	r7, #0
   28d24:	b	28d34 <__assert_fail@plt+0x175d4>
   28d28:	mov	r5, r0
   28d2c:	cmp	r8, #0
   28d30:	beq	2a158 <__assert_fail@plt+0x189f8>
   28d34:	ldrb	r4, [r1]
   28d38:	cmp	r4, #0
   28d3c:	beq	2a158 <__assert_fail@plt+0x189f8>
   28d40:	str	r1, [sp, #20]
   28d44:	mov	r0, r8
   28d48:	mov	r1, r4
   28d4c:	bl	11634 <strchr@plt>
   28d50:	cmp	r0, #0
   28d54:	beq	28fe0 <__assert_fail@plt+0x17880>
   28d58:	sub	r0, r4, #69	; 0x45
   28d5c:	mov	r1, #1
   28d60:	mov	r3, #0
   28d64:	mov	r2, #1024	; 0x400
   28d68:	cmp	r0, #47	; 0x2f
   28d6c:	str	r1, [sp, #16]
   28d70:	bhi	28eac <__assert_fail@plt+0x1774c>
   28d74:	add	r1, pc, #0
   28d78:	ldr	pc, [r1, r0, lsl #2]
   28d7c:	andeq	r8, r2, ip, lsr lr
   28d80:	andeq	r8, r2, ip, lsr #29
   28d84:	andeq	r8, r2, ip, lsr lr
   28d88:	andeq	r8, r2, ip, lsr #29
   28d8c:	andeq	r8, r2, ip, lsr #29
   28d90:	andeq	r8, r2, ip, lsr #29
   28d94:	andeq	r8, r2, ip, lsr lr
   28d98:	andeq	r8, r2, ip, lsr #29
   28d9c:	andeq	r8, r2, ip, lsr lr
   28da0:	andeq	r8, r2, ip, lsr #29
   28da4:	andeq	r8, r2, ip, lsr #29
   28da8:	andeq	r8, r2, ip, lsr lr
   28dac:	andeq	r8, r2, ip, lsr #29
   28db0:	andeq	r8, r2, ip, lsr #29
   28db4:	andeq	r8, r2, ip, lsr #29
   28db8:	andeq	r8, r2, ip, lsr lr
   28dbc:	andeq	r8, r2, ip, lsr #29
   28dc0:	andeq	r8, r2, ip, lsr #29
   28dc4:	andeq	r8, r2, ip, lsr #29
   28dc8:	andeq	r8, r2, ip, lsr #29
   28dcc:	andeq	r8, r2, ip, lsr lr
   28dd0:	andeq	r8, r2, ip, lsr lr
   28dd4:	andeq	r8, r2, ip, lsr #29
   28dd8:	andeq	r8, r2, ip, lsr #29
   28ddc:	andeq	r8, r2, ip, lsr #29
   28de0:	andeq	r8, r2, ip, lsr #29
   28de4:	andeq	r8, r2, ip, lsr #29
   28de8:	andeq	r8, r2, ip, lsr #29
   28dec:	andeq	r8, r2, ip, lsr #29
   28df0:	andeq	r8, r2, ip, lsr #29
   28df4:	andeq	r8, r2, ip, lsr #29
   28df8:	andeq	r8, r2, ip, lsr #29
   28dfc:	andeq	r8, r2, ip, lsr #29
   28e00:	andeq	r8, r2, ip, lsr #29
   28e04:	andeq	r8, r2, ip, lsr lr
   28e08:	andeq	r8, r2, ip, lsr #29
   28e0c:	andeq	r8, r2, ip, lsr #29
   28e10:	andeq	r8, r2, ip, lsr #29
   28e14:	andeq	r8, r2, ip, lsr lr
   28e18:	andeq	r8, r2, ip, lsr #29
   28e1c:	andeq	r8, r2, ip, lsr lr
   28e20:	andeq	r8, r2, ip, lsr #29
   28e24:	andeq	r8, r2, ip, lsr #29
   28e28:	andeq	r8, r2, ip, lsr #29
   28e2c:	andeq	r8, r2, ip, lsr #29
   28e30:	andeq	r8, r2, ip, lsr #29
   28e34:	andeq	r8, r2, ip, lsr #29
   28e38:	andeq	r8, r2, ip, lsr lr
   28e3c:	mov	r0, r8
   28e40:	mov	r1, #48	; 0x30
   28e44:	bl	11634 <strchr@plt>
   28e48:	cmp	r0, #0
   28e4c:	beq	28e78 <__assert_fail@plt+0x17718>
   28e50:	ldr	r1, [sp, #20]
   28e54:	ldrb	r0, [r1, #1]
   28e58:	cmp	r0, #66	; 0x42
   28e5c:	cmpne	r0, #68	; 0x44
   28e60:	bne	28e80 <__assert_fail@plt+0x17720>
   28e64:	mov	r0, #2
   28e68:	mov	r2, #1000	; 0x3e8
   28e6c:	mov	r3, #0
   28e70:	str	r0, [sp, #16]
   28e74:	b	28eac <__assert_fail@plt+0x1774c>
   28e78:	mov	r3, #0
   28e7c:	b	28ea8 <__assert_fail@plt+0x17748>
   28e80:	cmp	r0, #105	; 0x69
   28e84:	mov	r3, #0
   28e88:	bne	28ea8 <__assert_fail@plt+0x17748>
   28e8c:	ldrb	r0, [r1, #2]
   28e90:	mov	r1, #1
   28e94:	mov	r2, #1024	; 0x400
   28e98:	cmp	r0, #66	; 0x42
   28e9c:	movweq	r1, #3
   28ea0:	str	r1, [sp, #16]
   28ea4:	b	28eac <__assert_fail@plt+0x1774c>
   28ea8:	mov	r2, #1024	; 0x400
   28eac:	sub	r0, r4, #66	; 0x42
   28eb0:	cmp	r0, #53	; 0x35
   28eb4:	bhi	28fe0 <__assert_fail@plt+0x17880>
   28eb8:	add	r1, pc, #8
   28ebc:	str	r3, [sp, #28]
   28ec0:	str	r2, [sp, #24]
   28ec4:	ldr	pc, [r1, r0, lsl #2]
   28ec8:	andeq	r9, r2, r0, ror #1
   28ecc:	andeq	r8, r2, r0, ror #31
   28ed0:	andeq	r8, r2, r0, ror #31
   28ed4:	strdeq	r9, [r2], -r4
   28ed8:	andeq	r8, r2, r0, ror #31
   28edc:	andeq	r8, r2, r0, lsr #31
   28ee0:	andeq	r8, r2, r0, ror #31
   28ee4:	andeq	r8, r2, r0, ror #31
   28ee8:	andeq	r8, r2, r0, ror #31
   28eec:	andeq	r8, r2, r8, ror #31
   28ef0:	andeq	r8, r2, r0, ror #31
   28ef4:	andeq	r9, r2, r8, lsl r0
   28ef8:	andeq	r8, r2, r0, ror #31
   28efc:	andeq	r8, r2, r0, ror #31
   28f00:	andeq	r9, r2, r8, lsr r1
   28f04:	andeq	r8, r2, r0, ror #31
   28f08:	andeq	r8, r2, r0, ror #31
   28f0c:	andeq	r8, r2, r0, ror #31
   28f10:	andeq	r9, r2, r8, asr r0
   28f14:	andeq	r8, r2, r0, ror #31
   28f18:	andeq	r8, r2, r0, ror #31
   28f1c:	andeq	r8, r2, r0, ror #31
   28f20:	andeq	r8, r2, r0, ror #31
   28f24:	andeq	r9, r2, ip, ror r1
   28f28:	muleq	r2, ip, r0
   28f2c:	andeq	r8, r2, r0, ror #31
   28f30:	andeq	r8, r2, r0, ror #31
   28f34:	andeq	r8, r2, r0, ror #31
   28f38:	andeq	r8, r2, r0, ror #31
   28f3c:	andeq	r8, r2, r0, ror #31
   28f40:	andeq	r8, r2, r0, ror #31
   28f44:	andeq	r8, r2, r0, ror #31
   28f48:	andeq	r9, r2, r0, asr #3
   28f4c:	andeq	sl, r2, r8, lsr r1
   28f50:	andeq	r8, r2, r0, ror #31
   28f54:	andeq	r8, r2, r0, ror #31
   28f58:	andeq	r8, r2, r0, ror #31
   28f5c:	andeq	r8, r2, r0, lsr #31
   28f60:	andeq	r8, r2, r0, ror #31
   28f64:	andeq	r8, r2, r0, ror #31
   28f68:	andeq	r8, r2, r0, ror #31
   28f6c:	andeq	r8, r2, r8, ror #31
   28f70:	andeq	r8, r2, r0, ror #31
   28f74:	andeq	r9, r2, r8, lsl r0
   28f78:	andeq	r8, r2, r0, ror #31
   28f7c:	andeq	r8, r2, r0, ror #31
   28f80:	andeq	r8, r2, r0, ror #31
   28f84:	andeq	r8, r2, r0, ror #31
   28f88:	andeq	r8, r2, r0, ror #31
   28f8c:	andeq	r8, r2, r0, ror #31
   28f90:	andeq	r9, r2, r8, asr r0
   28f94:	andeq	r8, r2, r0, ror #31
   28f98:	andeq	r8, r2, r0, ror #31
   28f9c:	ldrdeq	r9, [r2], -r4
   28fa0:	cmn	r7, #1
   28fa4:	str	r9, [sp, #12]
   28fa8:	ble	291e8 <__assert_fail@plt+0x17a88>
   28fac:	ldr	r3, [sp, #28]
   28fb0:	mvn	r0, #0
   28fb4:	mvn	r1, #-2147483648	; 0x80000000
   28fb8:	mvn	r8, #0
   28fbc:	mvn	r9, #-2147483648	; 0x80000000
   28fc0:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   28fc4:	ldr	r2, [sp, #24]
   28fc8:	ldr	r3, [sp, #28]
   28fcc:	subs	r0, r0, r6
   28fd0:	mov	r4, #1
   28fd4:	sbcs	r0, r1, r7
   28fd8:	bge	29228 <__assert_fail@plt+0x17ac8>
   28fdc:	b	29240 <__assert_fail@plt+0x17ae0>
   28fe0:	orr	r5, r5, #2
   28fe4:	b	2a158 <__assert_fail@plt+0x189f8>
   28fe8:	cmn	r7, #1
   28fec:	ble	2927c <__assert_fail@plt+0x17b1c>
   28ff0:	ldr	r3, [sp, #28]
   28ff4:	mvn	r0, #0
   28ff8:	mvn	r1, #-2147483648	; 0x80000000
   28ffc:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29000:	ldr	r2, [sp, #24]
   29004:	ldr	r3, [sp, #28]
   29008:	subs	r0, r0, r6
   2900c:	sbcs	r0, r1, r7
   29010:	bge	292b0 <__assert_fail@plt+0x17b50>
   29014:	b	299c0 <__assert_fail@plt+0x18260>
   29018:	cmn	r7, #1
   2901c:	str	r9, [sp, #12]
   29020:	ble	292c4 <__assert_fail@plt+0x17b64>
   29024:	ldr	r3, [sp, #28]
   29028:	mvn	r0, #0
   2902c:	mvn	r1, #-2147483648	; 0x80000000
   29030:	mvn	r8, #0
   29034:	mvn	r9, #-2147483648	; 0x80000000
   29038:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2903c:	ldr	r2, [sp, #24]
   29040:	ldr	r3, [sp, #28]
   29044:	subs	r0, r0, r6
   29048:	mov	r4, #1
   2904c:	sbcs	r0, r1, r7
   29050:	bge	29304 <__assert_fail@plt+0x17ba4>
   29054:	b	2931c <__assert_fail@plt+0x17bbc>
   29058:	cmn	r7, #1
   2905c:	str	r9, [sp, #12]
   29060:	ble	29354 <__assert_fail@plt+0x17bf4>
   29064:	ldr	r3, [sp, #28]
   29068:	mvn	r0, #0
   2906c:	mvn	r1, #-2147483648	; 0x80000000
   29070:	mvn	r9, #-2147483648	; 0x80000000
   29074:	str	r0, [sp, #8]
   29078:	mvn	r0, #0
   2907c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29080:	ldr	r2, [sp, #24]
   29084:	ldr	r3, [sp, #28]
   29088:	subs	r0, r0, r6
   2908c:	mov	r4, #1
   29090:	sbcs	r0, r1, r7
   29094:	bge	29398 <__assert_fail@plt+0x17c38>
   29098:	b	293b4 <__assert_fail@plt+0x17c54>
   2909c:	cmp	r7, #0
   290a0:	str	r9, [sp, #12]
   290a4:	bmi	2969c <__assert_fail@plt+0x17f3c>
   290a8:	ldr	r3, [sp, #28]
   290ac:	mvn	r0, #0
   290b0:	mvn	r1, #-2147483648	; 0x80000000
   290b4:	mvn	r9, #-2147483648	; 0x80000000
   290b8:	str	r0, [sp, #8]
   290bc:	mvn	r0, #0
   290c0:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   290c4:	ldr	r2, [sp, #24]
   290c8:	ldr	r3, [sp, #28]
   290cc:	subs	r0, r0, r6
   290d0:	mov	r4, #1
   290d4:	sbcs	r0, r1, r7
   290d8:	bge	296e0 <__assert_fail@plt+0x17f80>
   290dc:	b	296fc <__assert_fail@plt+0x17f9c>
   290e0:	cmn	r7, #1
   290e4:	ble	29738 <__assert_fail@plt+0x17fd8>
   290e8:	cmp	r7, #2097152	; 0x200000
   290ec:	blt	29768 <__assert_fail@plt+0x18008>
   290f0:	b	299c0 <__assert_fail@plt+0x18260>
   290f4:	cmp	r7, #0
   290f8:	str	r9, [sp, #12]
   290fc:	bmi	29778 <__assert_fail@plt+0x18018>
   29100:	ldr	r3, [sp, #28]
   29104:	mvn	r0, #0
   29108:	mvn	r1, #-2147483648	; 0x80000000
   2910c:	mvn	r9, #-2147483648	; 0x80000000
   29110:	str	r0, [sp, #8]
   29114:	mvn	r0, #0
   29118:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2911c:	ldr	r2, [sp, #24]
   29120:	ldr	r3, [sp, #28]
   29124:	subs	r0, r0, r6
   29128:	mov	r4, #1
   2912c:	sbcs	r0, r1, r7
   29130:	bge	297bc <__assert_fail@plt+0x1805c>
   29134:	b	297d8 <__assert_fail@plt+0x18078>
   29138:	cmp	r7, #0
   2913c:	str	r9, [sp, #12]
   29140:	bmi	29814 <__assert_fail@plt+0x180b4>
   29144:	ldr	r3, [sp, #28]
   29148:	mvn	r0, #0
   2914c:	mvn	r1, #-2147483648	; 0x80000000
   29150:	mvn	r8, #-2147483648	; 0x80000000
   29154:	str	r0, [sp, #8]
   29158:	mvn	r0, #0
   2915c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29160:	ldr	r2, [sp, #24]
   29164:	ldr	r3, [sp, #28]
   29168:	subs	r0, r0, r6
   2916c:	mov	r4, #1
   29170:	sbcs	r0, r1, r7
   29174:	bge	29858 <__assert_fail@plt+0x180f8>
   29178:	b	29874 <__assert_fail@plt+0x18114>
   2917c:	cmp	r7, #0
   29180:	str	r9, [sp, #12]
   29184:	bmi	298b0 <__assert_fail@plt+0x18150>
   29188:	ldr	r3, [sp, #28]
   2918c:	mvn	r0, #0
   29190:	mvn	r1, #-2147483648	; 0x80000000
   29194:	mvn	r9, #-2147483648	; 0x80000000
   29198:	str	r0, [sp, #8]
   2919c:	mvn	r0, #0
   291a0:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   291a4:	ldr	r2, [sp, #24]
   291a8:	ldr	r3, [sp, #28]
   291ac:	subs	r0, r0, r6
   291b0:	mov	r4, #1
   291b4:	sbcs	r0, r1, r7
   291b8:	bge	298f4 <__assert_fail@plt+0x18194>
   291bc:	b	29910 <__assert_fail@plt+0x181b0>
   291c0:	cmn	r7, #1
   291c4:	ble	29950 <__assert_fail@plt+0x181f0>
   291c8:	cmp	r7, #4194304	; 0x400000
   291cc:	blt	29980 <__assert_fail@plt+0x18220>
   291d0:	b	299c0 <__assert_fail@plt+0x18260>
   291d4:	cmn	r7, #1
   291d8:	ble	29990 <__assert_fail@plt+0x18230>
   291dc:	cmp	r7, #1073741824	; 0x40000000
   291e0:	bge	299c0 <__assert_fail@plt+0x18260>
   291e4:	b	299e0 <__assert_fail@plt+0x18280>
   291e8:	and	r0, r6, r7
   291ec:	cmn	r0, #1
   291f0:	beq	29228 <__assert_fail@plt+0x17ac8>
   291f4:	mov	r0, #0
   291f8:	mov	r1, #-2147483648	; 0x80000000
   291fc:	mov	r2, r6
   29200:	mov	r3, r7
   29204:	mov	r8, #0
   29208:	mov	r9, #-2147483648	; 0x80000000
   2920c:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29210:	ldr	r2, [sp, #24]
   29214:	ldr	r3, [sp, #28]
   29218:	mov	r4, #1
   2921c:	subs	r0, r0, r2
   29220:	sbcs	r0, r1, r3
   29224:	blt	293f0 <__assert_fail@plt+0x17c90>
   29228:	umull	r8, r0, r6, r2
   2922c:	mov	r4, #0
   29230:	mla	r0, r6, r3, r0
   29234:	mla	r9, r7, r2, r0
   29238:	cmp	r9, #0
   2923c:	bmi	293f0 <__assert_fail@plt+0x17c90>
   29240:	ldr	r3, [sp, #28]
   29244:	mvn	r0, #-2147483648	; 0x80000000
   29248:	mvn	r1, #-2147483648	; 0x80000000
   2924c:	mov	r6, r4
   29250:	mvn	r4, #0
   29254:	str	r0, [sp, #8]
   29258:	mvn	r0, #0
   2925c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29260:	ldr	r2, [sp, #24]
   29264:	ldr	r3, [sp, #28]
   29268:	subs	r0, r0, r8
   2926c:	mov	r7, #1
   29270:	sbcs	r0, r1, r9
   29274:	bge	2942c <__assert_fail@plt+0x17ccc>
   29278:	b	29448 <__assert_fail@plt+0x17ce8>
   2927c:	and	r0, r6, r7
   29280:	cmn	r0, #1
   29284:	beq	292b0 <__assert_fail@plt+0x17b50>
   29288:	mov	r0, #0
   2928c:	mov	r1, #-2147483648	; 0x80000000
   29290:	mov	r2, r6
   29294:	mov	r3, r7
   29298:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2929c:	ldr	r2, [sp, #24]
   292a0:	ldr	r3, [sp, #28]
   292a4:	subs	r0, r0, r2
   292a8:	sbcs	r0, r1, r3
   292ac:	blt	299c0 <__assert_fail@plt+0x18260>
   292b0:	umull	r0, r1, r6, r2
   292b4:	mla	r1, r6, r3, r1
   292b8:	mla	r7, r7, r2, r1
   292bc:	mov	r6, r0
   292c0:	b	2a138 <__assert_fail@plt+0x189d8>
   292c4:	and	r0, r6, r7
   292c8:	cmn	r0, #1
   292cc:	beq	29304 <__assert_fail@plt+0x17ba4>
   292d0:	mov	r0, #0
   292d4:	mov	r1, #-2147483648	; 0x80000000
   292d8:	mov	r2, r6
   292dc:	mov	r3, r7
   292e0:	mov	r8, #0
   292e4:	mov	r9, #-2147483648	; 0x80000000
   292e8:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   292ec:	ldr	r2, [sp, #24]
   292f0:	ldr	r3, [sp, #28]
   292f4:	mov	r4, #1
   292f8:	subs	r0, r0, r2
   292fc:	sbcs	r0, r1, r3
   29300:	blt	294dc <__assert_fail@plt+0x17d7c>
   29304:	umull	r8, r0, r6, r2
   29308:	mov	r4, #0
   2930c:	mla	r0, r6, r3, r0
   29310:	mla	r9, r7, r2, r0
   29314:	cmp	r9, #0
   29318:	bmi	294dc <__assert_fail@plt+0x17d7c>
   2931c:	ldr	r3, [sp, #28]
   29320:	mvn	r0, #0
   29324:	mvn	r1, #-2147483648	; 0x80000000
   29328:	str	r4, [sp, #8]
   2932c:	mvn	r6, #0
   29330:	mvn	r7, #-2147483648	; 0x80000000
   29334:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29338:	ldr	r4, [sp, #24]
   2933c:	ldr	r3, [sp, #28]
   29340:	subs	r0, r0, r8
   29344:	mov	r2, #1
   29348:	sbcs	r0, r1, r9
   2934c:	bge	29514 <__assert_fail@plt+0x17db4>
   29350:	b	2964c <__assert_fail@plt+0x17eec>
   29354:	and	r0, r6, r7
   29358:	cmn	r0, #1
   2935c:	beq	29398 <__assert_fail@plt+0x17c38>
   29360:	mov	r0, #0
   29364:	mov	r1, #-2147483648	; 0x80000000
   29368:	mov	r2, r6
   2936c:	mov	r3, r7
   29370:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29374:	ldr	r2, [sp, #24]
   29378:	ldr	r3, [sp, #28]
   2937c:	mov	r4, #1
   29380:	mov	r9, #-2147483648	; 0x80000000
   29384:	subs	r0, r0, r2
   29388:	sbcs	r0, r1, r3
   2938c:	mov	r0, #0
   29390:	str	r0, [sp, #8]
   29394:	blt	29528 <__assert_fail@plt+0x17dc8>
   29398:	umull	r1, r0, r6, r2
   2939c:	mov	r4, #0
   293a0:	mla	r0, r6, r3, r0
   293a4:	mla	r9, r7, r2, r0
   293a8:	str	r1, [sp, #8]
   293ac:	cmp	r9, #0
   293b0:	bmi	29528 <__assert_fail@plt+0x17dc8>
   293b4:	ldr	r3, [sp, #28]
   293b8:	mvn	r0, #0
   293bc:	mvn	r1, #-2147483648	; 0x80000000
   293c0:	str	r4, [sp, #4]
   293c4:	mvn	r6, #0
   293c8:	mvn	r8, #-2147483648	; 0x80000000
   293cc:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   293d0:	ldr	r4, [sp, #8]
   293d4:	ldr	r2, [sp, #24]
   293d8:	ldr	r3, [sp, #28]
   293dc:	mov	r7, #1
   293e0:	subs	r0, r0, r4
   293e4:	sbcs	r0, r1, r9
   293e8:	bge	29564 <__assert_fail@plt+0x17e04>
   293ec:	b	2957c <__assert_fail@plt+0x17e1c>
   293f0:	mov	r0, #-2147483648	; 0x80000000
   293f4:	mov	r1, #-2147483648	; 0x80000000
   293f8:	mov	r2, r8
   293fc:	mov	r3, r9
   29400:	mov	r6, r4
   29404:	mov	r4, #0
   29408:	str	r0, [sp, #8]
   2940c:	mov	r0, #0
   29410:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29414:	ldr	r2, [sp, #24]
   29418:	ldr	r3, [sp, #28]
   2941c:	mov	r7, #1
   29420:	subs	r0, r0, r2
   29424:	sbcs	r0, r1, r3
   29428:	blt	2949c <__assert_fail@plt+0x17d3c>
   2942c:	umull	r4, r0, r8, r2
   29430:	mov	r7, r6
   29434:	mla	r0, r8, r3, r0
   29438:	mla	r0, r9, r2, r0
   2943c:	cmp	r0, #0
   29440:	str	r0, [sp, #8]
   29444:	bmi	2949c <__assert_fail@plt+0x17d3c>
   29448:	ldr	r3, [sp, #28]
   2944c:	mvn	r0, #0
   29450:	mvn	r1, #-2147483648	; 0x80000000
   29454:	mov	r9, r7
   29458:	mvn	r6, #0
   2945c:	mvn	r7, #-2147483648	; 0x80000000
   29460:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29464:	ldr	r8, [sp, #8]
   29468:	ldr	r3, [sp, #24]
   2946c:	ldr	ip, [sp, #28]
   29470:	subs	r0, r0, r4
   29474:	mov	r2, #1
   29478:	sbcs	r0, r1, r8
   2947c:	blt	29490 <__assert_fail@plt+0x17d30>
   29480:	umull	r6, r0, r4, r3
   29484:	mov	r2, #0
   29488:	mla	r0, r4, ip, r0
   2948c:	mla	r7, r8, r3, r0
   29490:	orr	r3, r2, r9
   29494:	ldr	r9, [sp, #12]
   29498:	b	2a138 <__assert_fail@plt+0x189d8>
   2949c:	ldr	r8, [sp, #8]
   294a0:	mov	r0, #0
   294a4:	mov	r1, #-2147483648	; 0x80000000
   294a8:	mov	r2, r4
   294ac:	mov	r9, r7
   294b0:	mov	r6, #0
   294b4:	mov	r7, #-2147483648	; 0x80000000
   294b8:	mov	r3, r8
   294bc:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   294c0:	ldr	r3, [sp, #24]
   294c4:	ldr	ip, [sp, #28]
   294c8:	mov	r2, #1
   294cc:	subs	r0, r0, r3
   294d0:	sbcs	r0, r1, ip
   294d4:	bge	29480 <__assert_fail@plt+0x17d20>
   294d8:	b	29490 <__assert_fail@plt+0x17d30>
   294dc:	mov	r0, #0
   294e0:	mov	r1, #-2147483648	; 0x80000000
   294e4:	mov	r2, r8
   294e8:	mov	r3, r9
   294ec:	str	r4, [sp, #8]
   294f0:	mov	r6, #0
   294f4:	mov	r7, #-2147483648	; 0x80000000
   294f8:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   294fc:	ldr	r4, [sp, #24]
   29500:	ldr	r3, [sp, #28]
   29504:	mov	r2, #1
   29508:	subs	r0, r0, r4
   2950c:	sbcs	r0, r1, r3
   29510:	blt	2964c <__assert_fail@plt+0x17eec>
   29514:	umull	r6, r0, r8, r4
   29518:	mov	r2, #0
   2951c:	mla	r0, r8, r3, r0
   29520:	mla	r7, r9, r4, r0
   29524:	b	2964c <__assert_fail@plt+0x17eec>
   29528:	str	r4, [sp, #4]
   2952c:	ldr	r4, [sp, #8]
   29530:	mov	r0, #0
   29534:	mov	r1, #-2147483648	; 0x80000000
   29538:	mov	r3, r9
   2953c:	mov	r2, r4
   29540:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29544:	ldr	r2, [sp, #24]
   29548:	ldr	r3, [sp, #28]
   2954c:	mov	r7, #1
   29550:	mov	r6, #0
   29554:	mov	r8, #-2147483648	; 0x80000000
   29558:	subs	r0, r0, r2
   2955c:	sbcs	r0, r1, r3
   29560:	blt	295b4 <__assert_fail@plt+0x17e54>
   29564:	umull	r6, r0, r4, r2
   29568:	ldr	r7, [sp, #4]
   2956c:	mla	r0, r4, r3, r0
   29570:	mla	r8, r9, r2, r0
   29574:	cmp	r8, #0
   29578:	bmi	295b4 <__assert_fail@plt+0x17e54>
   2957c:	ldr	r3, [sp, #28]
   29580:	mvn	r0, #0
   29584:	mvn	r1, #-2147483648	; 0x80000000
   29588:	str	r7, [sp, #8]
   2958c:	mvn	r4, #0
   29590:	mvn	r9, #-2147483648	; 0x80000000
   29594:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29598:	ldr	r2, [sp, #24]
   2959c:	ldr	r3, [sp, #28]
   295a0:	subs	r0, r0, r6
   295a4:	mov	r7, #1
   295a8:	sbcs	r0, r1, r8
   295ac:	bge	295ec <__assert_fail@plt+0x17e8c>
   295b0:	b	29604 <__assert_fail@plt+0x17ea4>
   295b4:	mov	r0, #0
   295b8:	mov	r1, #-2147483648	; 0x80000000
   295bc:	mov	r2, r6
   295c0:	mov	r3, r8
   295c4:	str	r7, [sp, #8]
   295c8:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   295cc:	ldr	r2, [sp, #24]
   295d0:	ldr	r3, [sp, #28]
   295d4:	mov	r7, #1
   295d8:	mov	r4, #0
   295dc:	mov	r9, #-2147483648	; 0x80000000
   295e0:	subs	r0, r0, r2
   295e4:	sbcs	r0, r1, r3
   295e8:	blt	2965c <__assert_fail@plt+0x17efc>
   295ec:	umull	r4, r0, r6, r2
   295f0:	ldr	r7, [sp, #8]
   295f4:	mla	r0, r6, r3, r0
   295f8:	mla	r9, r8, r2, r0
   295fc:	cmp	r9, #0
   29600:	bmi	2965c <__assert_fail@plt+0x17efc>
   29604:	ldr	r3, [sp, #28]
   29608:	mvn	r0, #0
   2960c:	mvn	r1, #-2147483648	; 0x80000000
   29610:	str	r7, [sp, #8]
   29614:	mvn	r6, #0
   29618:	mvn	r7, #-2147483648	; 0x80000000
   2961c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29620:	ldr	r3, [sp, #24]
   29624:	ldr	ip, [sp, #28]
   29628:	subs	r0, r0, r4
   2962c:	mov	r2, #1
   29630:	mov	r8, r4
   29634:	sbcs	r0, r1, r9
   29638:	blt	2964c <__assert_fail@plt+0x17eec>
   2963c:	umull	r6, r0, r8, r3
   29640:	mov	r2, #0
   29644:	mla	r0, r8, ip, r0
   29648:	mla	r7, r9, r3, r0
   2964c:	ldr	r0, [sp, #8]
   29650:	ldr	r9, [sp, #12]
   29654:	orr	r3, r2, r0
   29658:	b	2a138 <__assert_fail@plt+0x189d8>
   2965c:	mov	r0, #0
   29660:	mov	r1, #-2147483648	; 0x80000000
   29664:	mov	r2, r4
   29668:	mov	r3, r9
   2966c:	str	r7, [sp, #8]
   29670:	mov	r8, r4
   29674:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29678:	ldr	r3, [sp, #24]
   2967c:	ldr	ip, [sp, #28]
   29680:	mov	r2, #1
   29684:	mov	r6, #0
   29688:	mov	r7, #-2147483648	; 0x80000000
   2968c:	subs	r0, r0, r3
   29690:	sbcs	r0, r1, ip
   29694:	bge	2963c <__assert_fail@plt+0x17edc>
   29698:	b	2964c <__assert_fail@plt+0x17eec>
   2969c:	and	r0, r6, r7
   296a0:	cmn	r0, #1
   296a4:	beq	296e0 <__assert_fail@plt+0x17f80>
   296a8:	mov	r0, #0
   296ac:	mov	r1, #-2147483648	; 0x80000000
   296b0:	mov	r2, r6
   296b4:	mov	r3, r7
   296b8:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   296bc:	ldr	r2, [sp, #24]
   296c0:	ldr	r3, [sp, #28]
   296c4:	mov	r4, #1
   296c8:	mov	r9, #-2147483648	; 0x80000000
   296cc:	subs	r0, r0, r2
   296d0:	sbcs	r0, r1, r3
   296d4:	mov	r0, #0
   296d8:	str	r0, [sp, #8]
   296dc:	blt	299f0 <__assert_fail@plt+0x18290>
   296e0:	umull	r1, r0, r6, r2
   296e4:	mov	r4, #0
   296e8:	mla	r0, r6, r3, r0
   296ec:	mla	r9, r7, r2, r0
   296f0:	str	r1, [sp, #8]
   296f4:	cmp	r9, #0
   296f8:	bmi	299f0 <__assert_fail@plt+0x18290>
   296fc:	ldr	r3, [sp, #28]
   29700:	mvn	r0, #0
   29704:	mvn	r1, #-2147483648	; 0x80000000
   29708:	str	r4, [sp, #4]
   2970c:	mvn	r8, #0
   29710:	mvn	r4, #-2147483648	; 0x80000000
   29714:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29718:	ldr	r6, [sp, #8]
   2971c:	ldr	r2, [sp, #24]
   29720:	ldr	r3, [sp, #28]
   29724:	mov	r7, #1
   29728:	subs	r0, r0, r6
   2972c:	sbcs	r0, r1, r9
   29730:	bge	29a2c <__assert_fail@plt+0x182cc>
   29734:	b	29a44 <__assert_fail@plt+0x182e4>
   29738:	and	r0, r6, r7
   2973c:	cmn	r0, #1
   29740:	beq	29768 <__assert_fail@plt+0x18008>
   29744:	mov	r0, #0
   29748:	mov	r1, #-2147483648	; 0x80000000
   2974c:	mov	r2, r6
   29750:	mov	r3, r7
   29754:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29758:	ldr	r3, [sp, #28]
   2975c:	subs	r0, r0, #1024	; 0x400
   29760:	sbcs	r0, r1, #0
   29764:	blt	299c0 <__assert_fail@plt+0x18260>
   29768:	lsl	r0, r7, #10
   2976c:	orr	r7, r0, r6, lsr #22
   29770:	lsl	r6, r6, #10
   29774:	b	2a138 <__assert_fail@plt+0x189d8>
   29778:	and	r0, r6, r7
   2977c:	cmn	r0, #1
   29780:	beq	297bc <__assert_fail@plt+0x1805c>
   29784:	mov	r0, #0
   29788:	mov	r1, #-2147483648	; 0x80000000
   2978c:	mov	r2, r6
   29790:	mov	r3, r7
   29794:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29798:	ldr	r2, [sp, #24]
   2979c:	ldr	r3, [sp, #28]
   297a0:	mov	r4, #1
   297a4:	mov	r9, #-2147483648	; 0x80000000
   297a8:	subs	r0, r0, r2
   297ac:	sbcs	r0, r1, r3
   297b0:	mov	r0, #0
   297b4:	str	r0, [sp, #8]
   297b8:	blt	29d08 <__assert_fail@plt+0x185a8>
   297bc:	umull	r1, r0, r6, r2
   297c0:	mov	r4, #0
   297c4:	mla	r0, r6, r3, r0
   297c8:	mla	r9, r7, r2, r0
   297cc:	str	r1, [sp, #8]
   297d0:	cmp	r9, #0
   297d4:	bmi	29d08 <__assert_fail@plt+0x185a8>
   297d8:	ldr	r3, [sp, #28]
   297dc:	mvn	r0, #0
   297e0:	mvn	r1, #-2147483648	; 0x80000000
   297e4:	str	r4, [sp, #4]
   297e8:	mvn	r8, #0
   297ec:	mvn	r4, #-2147483648	; 0x80000000
   297f0:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   297f4:	ldr	r6, [sp, #8]
   297f8:	ldr	r2, [sp, #24]
   297fc:	ldr	r3, [sp, #28]
   29800:	mov	r7, #1
   29804:	subs	r0, r0, r6
   29808:	sbcs	r0, r1, r9
   2980c:	bge	29d44 <__assert_fail@plt+0x185e4>
   29810:	b	29d5c <__assert_fail@plt+0x185fc>
   29814:	and	r0, r6, r7
   29818:	cmn	r0, #1
   2981c:	beq	29858 <__assert_fail@plt+0x180f8>
   29820:	mov	r0, #0
   29824:	mov	r1, #-2147483648	; 0x80000000
   29828:	mov	r2, r6
   2982c:	mov	r3, r7
   29830:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29834:	ldr	r2, [sp, #24]
   29838:	ldr	r3, [sp, #28]
   2983c:	mov	r4, #1
   29840:	mov	r8, #-2147483648	; 0x80000000
   29844:	subs	r0, r0, r2
   29848:	sbcs	r0, r1, r3
   2984c:	mov	r0, #0
   29850:	str	r0, [sp, #8]
   29854:	blt	29f84 <__assert_fail@plt+0x18824>
   29858:	umull	r1, r0, r6, r2
   2985c:	mov	r4, #0
   29860:	mla	r0, r6, r3, r0
   29864:	mla	r8, r7, r2, r0
   29868:	str	r1, [sp, #8]
   2986c:	cmp	r8, #0
   29870:	bmi	29f84 <__assert_fail@plt+0x18824>
   29874:	ldr	r3, [sp, #28]
   29878:	mvn	r0, #0
   2987c:	mvn	r1, #-2147483648	; 0x80000000
   29880:	str	r4, [sp, #4]
   29884:	mvn	r9, #0
   29888:	mvn	r4, #-2147483648	; 0x80000000
   2988c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29890:	ldr	r6, [sp, #8]
   29894:	ldr	r2, [sp, #24]
   29898:	ldr	r3, [sp, #28]
   2989c:	mov	r7, #1
   298a0:	subs	r0, r0, r6
   298a4:	sbcs	r0, r1, r8
   298a8:	bge	29fc0 <__assert_fail@plt+0x18860>
   298ac:	b	29fd8 <__assert_fail@plt+0x18878>
   298b0:	and	r0, r6, r7
   298b4:	cmn	r0, #1
   298b8:	beq	298f4 <__assert_fail@plt+0x18194>
   298bc:	mov	r0, #0
   298c0:	mov	r1, #-2147483648	; 0x80000000
   298c4:	mov	r2, r6
   298c8:	mov	r3, r7
   298cc:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   298d0:	ldr	r2, [sp, #24]
   298d4:	ldr	r3, [sp, #28]
   298d8:	mov	r4, #1
   298dc:	mov	r9, #-2147483648	; 0x80000000
   298e0:	subs	r0, r0, r2
   298e4:	sbcs	r0, r1, r3
   298e8:	mov	r0, #0
   298ec:	str	r0, [sp, #8]
   298f0:	blt	2a1a0 <__assert_fail@plt+0x18a40>
   298f4:	umull	r1, r0, r6, r2
   298f8:	mov	r4, #0
   298fc:	mla	r0, r6, r3, r0
   29900:	mla	r9, r7, r2, r0
   29904:	str	r1, [sp, #8]
   29908:	cmp	r9, #0
   2990c:	bmi	2a1a0 <__assert_fail@plt+0x18a40>
   29910:	ldr	r3, [sp, #28]
   29914:	mvn	r0, #0
   29918:	mvn	r1, #-2147483648	; 0x80000000
   2991c:	str	r4, [sp]
   29920:	mvn	r8, #-2147483648	; 0x80000000
   29924:	str	r0, [sp, #4]
   29928:	mvn	r0, #0
   2992c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29930:	ldr	r6, [sp, #8]
   29934:	ldr	r2, [sp, #24]
   29938:	ldr	r3, [sp, #28]
   2993c:	mov	r7, #1
   29940:	subs	r0, r0, r6
   29944:	sbcs	r0, r1, r9
   29948:	bge	2a1e0 <__assert_fail@plt+0x18a80>
   2994c:	b	2a1fc <__assert_fail@plt+0x18a9c>
   29950:	and	r0, r6, r7
   29954:	cmn	r0, #1
   29958:	beq	29980 <__assert_fail@plt+0x18220>
   2995c:	mov	r0, #0
   29960:	mov	r1, #-2147483648	; 0x80000000
   29964:	mov	r2, r6
   29968:	mov	r3, r7
   2996c:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29970:	ldr	r3, [sp, #28]
   29974:	subs	r0, r0, #512	; 0x200
   29978:	sbcs	r0, r1, #0
   2997c:	blt	299c0 <__assert_fail@plt+0x18260>
   29980:	lsl	r0, r7, #9
   29984:	orr	r7, r0, r6, lsr #23
   29988:	lsl	r6, r6, #9
   2998c:	b	2a138 <__assert_fail@plt+0x189d8>
   29990:	and	r0, r6, r7
   29994:	cmn	r0, #1
   29998:	beq	299e0 <__assert_fail@plt+0x18280>
   2999c:	mov	r0, #0
   299a0:	mov	r1, #-2147483648	; 0x80000000
   299a4:	mov	r2, r6
   299a8:	mov	r3, r7
   299ac:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   299b0:	ldr	r3, [sp, #28]
   299b4:	subs	r0, r0, #2
   299b8:	sbcs	r0, r1, #0
   299bc:	bge	299e0 <__assert_fail@plt+0x18280>
   299c0:	cmp	r7, #0
   299c4:	mvn	r0, #-2147483648	; 0x80000000
   299c8:	mvn	r6, #0
   299cc:	mov	r3, #1
   299d0:	movmi	r0, #-2147483648	; 0x80000000
   299d4:	movwmi	r6, #0
   299d8:	mov	r7, r0
   299dc:	b	2a138 <__assert_fail@plt+0x189d8>
   299e0:	lsl	r0, r7, #1
   299e4:	orr	r7, r0, r6, lsr #31
   299e8:	lsl	r6, r6, #1
   299ec:	b	2a138 <__assert_fail@plt+0x189d8>
   299f0:	ldr	r6, [sp, #8]
   299f4:	mov	r0, #0
   299f8:	mov	r1, #-2147483648	; 0x80000000
   299fc:	mov	r3, r9
   29a00:	str	r4, [sp, #4]
   29a04:	mov	r2, r6
   29a08:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29a0c:	ldr	r2, [sp, #24]
   29a10:	ldr	r3, [sp, #28]
   29a14:	mov	r7, #1
   29a18:	mov	r8, #0
   29a1c:	mov	r4, #-2147483648	; 0x80000000
   29a20:	subs	r0, r0, r2
   29a24:	sbcs	r0, r1, r3
   29a28:	blt	29a7c <__assert_fail@plt+0x1831c>
   29a2c:	umull	r8, r0, r6, r2
   29a30:	ldr	r7, [sp, #4]
   29a34:	mla	r0, r6, r3, r0
   29a38:	mla	r4, r9, r2, r0
   29a3c:	cmp	r4, #0
   29a40:	bmi	29a7c <__assert_fail@plt+0x1831c>
   29a44:	ldr	r3, [sp, #28]
   29a48:	mvn	r0, #0
   29a4c:	mvn	r1, #-2147483648	; 0x80000000
   29a50:	str	r7, [sp, #8]
   29a54:	mvn	r7, #0
   29a58:	mvn	r9, #-2147483648	; 0x80000000
   29a5c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29a60:	ldr	r2, [sp, #24]
   29a64:	ldr	r3, [sp, #28]
   29a68:	subs	r0, r0, r8
   29a6c:	mov	r6, #1
   29a70:	sbcs	r0, r1, r4
   29a74:	bge	29ab4 <__assert_fail@plt+0x18354>
   29a78:	b	29acc <__assert_fail@plt+0x1836c>
   29a7c:	mov	r0, #0
   29a80:	mov	r1, #-2147483648	; 0x80000000
   29a84:	mov	r2, r8
   29a88:	mov	r3, r4
   29a8c:	str	r7, [sp, #8]
   29a90:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29a94:	ldr	r2, [sp, #24]
   29a98:	ldr	r3, [sp, #28]
   29a9c:	mov	r6, #1
   29aa0:	mov	r7, #0
   29aa4:	mov	r9, #-2147483648	; 0x80000000
   29aa8:	subs	r0, r0, r2
   29aac:	sbcs	r0, r1, r3
   29ab0:	blt	29b0c <__assert_fail@plt+0x183ac>
   29ab4:	umull	r7, r0, r8, r2
   29ab8:	ldr	r6, [sp, #8]
   29abc:	mla	r0, r8, r3, r0
   29ac0:	mla	r9, r4, r2, r0
   29ac4:	cmp	r9, #0
   29ac8:	bmi	29b0c <__assert_fail@plt+0x183ac>
   29acc:	ldr	r3, [sp, #28]
   29ad0:	mvn	r0, #0
   29ad4:	mvn	r1, #-2147483648	; 0x80000000
   29ad8:	str	r6, [sp, #8]
   29adc:	mvn	r8, #0
   29ae0:	mvn	r4, #-2147483648	; 0x80000000
   29ae4:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29ae8:	ldr	r2, [sp, #24]
   29aec:	ldr	r3, [sp, #28]
   29af0:	subs	r0, r0, r7
   29af4:	sbcs	r0, r1, r9
   29af8:	bge	29b50 <__assert_fail@plt+0x183f0>
   29afc:	mov	r0, #1
   29b00:	mov	r6, #0
   29b04:	str	r0, [sp, #8]
   29b08:	b	29b68 <__assert_fail@plt+0x18408>
   29b0c:	mov	r0, #0
   29b10:	mov	r1, #-2147483648	; 0x80000000
   29b14:	mov	r2, r7
   29b18:	mov	r3, r9
   29b1c:	str	r6, [sp, #8]
   29b20:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29b24:	ldr	r2, [sp, #24]
   29b28:	ldr	r3, [sp, #28]
   29b2c:	subs	r0, r0, r2
   29b30:	sbcs	r0, r1, r3
   29b34:	bge	29b50 <__assert_fail@plt+0x183f0>
   29b38:	mov	r0, #1
   29b3c:	mov	r8, #0
   29b40:	mov	r4, #-2147483648	; 0x80000000
   29b44:	mov	r6, #0
   29b48:	str	r0, [sp, #8]
   29b4c:	b	29ba0 <__assert_fail@plt+0x18440>
   29b50:	umull	r8, r0, r7, r2
   29b54:	mov	r6, #0
   29b58:	mla	r0, r7, r3, r0
   29b5c:	mla	r4, r9, r2, r0
   29b60:	cmp	r4, #0
   29b64:	bmi	29ba0 <__assert_fail@plt+0x18440>
   29b68:	ldr	r3, [sp, #28]
   29b6c:	mvn	r0, #0
   29b70:	mvn	r1, #-2147483648	; 0x80000000
   29b74:	mvn	r9, #0
   29b78:	mvn	r7, #-2147483648	; 0x80000000
   29b7c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29b80:	ldr	r2, [sp, #24]
   29b84:	ldr	r3, [sp, #28]
   29b88:	subs	r0, r0, r8
   29b8c:	sbcs	r0, r1, r4
   29b90:	bge	29bdc <__assert_fail@plt+0x1847c>
   29b94:	mov	r0, #1
   29b98:	str	r0, [sp, #8]
   29b9c:	b	29bf0 <__assert_fail@plt+0x18490>
   29ba0:	mov	r0, #0
   29ba4:	mov	r1, #-2147483648	; 0x80000000
   29ba8:	mov	r2, r8
   29bac:	mov	r3, r4
   29bb0:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29bb4:	ldr	r2, [sp, #24]
   29bb8:	ldr	r3, [sp, #28]
   29bbc:	subs	r0, r0, r2
   29bc0:	sbcs	r0, r1, r3
   29bc4:	bge	29bdc <__assert_fail@plt+0x1847c>
   29bc8:	mov	r0, #1
   29bcc:	mov	r9, #0
   29bd0:	mov	r7, #-2147483648	; 0x80000000
   29bd4:	str	r0, [sp, #8]
   29bd8:	b	29c2c <__assert_fail@plt+0x184cc>
   29bdc:	umull	r9, r0, r8, r2
   29be0:	mla	r0, r8, r3, r0
   29be4:	mla	r7, r4, r2, r0
   29be8:	cmp	r7, #0
   29bec:	bmi	29c2c <__assert_fail@plt+0x184cc>
   29bf0:	ldr	r3, [sp, #28]
   29bf4:	mvn	r0, #0
   29bf8:	mvn	r1, #-2147483648	; 0x80000000
   29bfc:	mvn	r8, #0
   29c00:	mvn	r4, #-2147483648	; 0x80000000
   29c04:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29c08:	ldr	r2, [sp, #24]
   29c0c:	ldr	r3, [sp, #28]
   29c10:	subs	r0, r0, r9
   29c14:	sbcs	r0, r1, r7
   29c18:	bge	29c6c <__assert_fail@plt+0x1850c>
   29c1c:	ldr	r9, [sp, #12]
   29c20:	mov	r0, #1
   29c24:	str	r0, [sp, #8]
   29c28:	b	29c84 <__assert_fail@plt+0x18524>
   29c2c:	mov	r0, #0
   29c30:	mov	r1, #-2147483648	; 0x80000000
   29c34:	mov	r2, r9
   29c38:	mov	r3, r7
   29c3c:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29c40:	ldr	r2, [sp, #24]
   29c44:	ldr	r3, [sp, #28]
   29c48:	subs	r0, r0, r2
   29c4c:	sbcs	r0, r1, r3
   29c50:	bge	29c6c <__assert_fail@plt+0x1850c>
   29c54:	ldr	r9, [sp, #12]
   29c58:	mov	r0, #1
   29c5c:	mov	r8, #0
   29c60:	mov	r4, #-2147483648	; 0x80000000
   29c64:	str	r0, [sp, #8]
   29c68:	b	29cd4 <__assert_fail@plt+0x18574>
   29c6c:	umull	r8, r0, r9, r2
   29c70:	mla	r0, r9, r3, r0
   29c74:	ldr	r9, [sp, #12]
   29c78:	mla	r4, r7, r2, r0
   29c7c:	cmp	r4, #0
   29c80:	bmi	29cd4 <__assert_fail@plt+0x18574>
   29c84:	ldr	r3, [sp, #28]
   29c88:	mvn	r0, #0
   29c8c:	mvn	r1, #-2147483648	; 0x80000000
   29c90:	mvn	r6, #0
   29c94:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29c98:	ldr	r7, [sp, #24]
   29c9c:	ldr	r3, [sp, #28]
   29ca0:	subs	r0, r0, r8
   29ca4:	mov	r2, #1
   29ca8:	sbcs	r0, r1, r4
   29cac:	mvn	r0, #-2147483648	; 0x80000000
   29cb0:	blt	29cc4 <__assert_fail@plt+0x18564>
   29cb4:	umull	r6, r0, r8, r7
   29cb8:	mov	r2, #0
   29cbc:	mla	r0, r8, r3, r0
   29cc0:	mla	r0, r4, r7, r0
   29cc4:	ldr	r1, [sp, #8]
   29cc8:	mov	r7, r0
   29ccc:	orr	r3, r2, r1
   29cd0:	b	2a138 <__assert_fail@plt+0x189d8>
   29cd4:	mov	r0, #0
   29cd8:	mov	r1, #-2147483648	; 0x80000000
   29cdc:	mov	r2, r8
   29ce0:	mov	r3, r4
   29ce4:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29ce8:	ldr	r7, [sp, #24]
   29cec:	ldr	r3, [sp, #28]
   29cf0:	mov	r2, #1
   29cf4:	subs	r0, r0, r7
   29cf8:	sbcs	r0, r1, r3
   29cfc:	mov	r0, #-2147483648	; 0x80000000
   29d00:	bge	29cb4 <__assert_fail@plt+0x18554>
   29d04:	b	29cc4 <__assert_fail@plt+0x18564>
   29d08:	ldr	r6, [sp, #8]
   29d0c:	mov	r0, #0
   29d10:	mov	r1, #-2147483648	; 0x80000000
   29d14:	mov	r3, r9
   29d18:	str	r4, [sp, #4]
   29d1c:	mov	r2, r6
   29d20:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29d24:	ldr	r2, [sp, #24]
   29d28:	ldr	r3, [sp, #28]
   29d2c:	mov	r7, #1
   29d30:	mov	r8, #0
   29d34:	mov	r4, #-2147483648	; 0x80000000
   29d38:	subs	r0, r0, r2
   29d3c:	sbcs	r0, r1, r3
   29d40:	blt	29d98 <__assert_fail@plt+0x18638>
   29d44:	umull	r8, r0, r6, r2
   29d48:	ldr	r7, [sp, #4]
   29d4c:	mla	r0, r6, r3, r0
   29d50:	mla	r4, r9, r2, r0
   29d54:	cmp	r4, #0
   29d58:	bmi	29d98 <__assert_fail@plt+0x18638>
   29d5c:	ldr	r3, [sp, #28]
   29d60:	mvn	r0, #0
   29d64:	mvn	r1, #-2147483648	; 0x80000000
   29d68:	str	r7, [sp, #4]
   29d6c:	mvn	r7, #0
   29d70:	mvn	r9, #-2147483648	; 0x80000000
   29d74:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29d78:	ldr	r2, [sp, #24]
   29d7c:	ldr	r3, [sp, #28]
   29d80:	subs	r0, r0, r8
   29d84:	mov	r6, #1
   29d88:	sbcs	r0, r1, r4
   29d8c:	str	r6, [sp, #8]
   29d90:	bge	29dd4 <__assert_fail@plt+0x18674>
   29d94:	b	29df0 <__assert_fail@plt+0x18690>
   29d98:	mov	r0, #0
   29d9c:	mov	r1, #-2147483648	; 0x80000000
   29da0:	mov	r2, r8
   29da4:	mov	r3, r4
   29da8:	str	r7, [sp, #4]
   29dac:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29db0:	ldr	r2, [sp, #24]
   29db4:	ldr	r3, [sp, #28]
   29db8:	mov	r7, #1
   29dbc:	mov	r9, #-2147483648	; 0x80000000
   29dc0:	str	r7, [sp, #8]
   29dc4:	mov	r7, #0
   29dc8:	subs	r0, r0, r2
   29dcc:	sbcs	r0, r1, r3
   29dd0:	blt	29e28 <__assert_fail@plt+0x186c8>
   29dd4:	umull	r7, r0, r8, r2
   29dd8:	mla	r0, r8, r3, r0
   29ddc:	mla	r9, r4, r2, r0
   29de0:	ldr	r0, [sp, #4]
   29de4:	cmp	r9, #0
   29de8:	str	r0, [sp, #8]
   29dec:	bmi	29e28 <__assert_fail@plt+0x186c8>
   29df0:	ldr	r3, [sp, #28]
   29df4:	mvn	r0, #0
   29df8:	mvn	r1, #-2147483648	; 0x80000000
   29dfc:	mvn	r4, #0
   29e00:	mvn	r8, #-2147483648	; 0x80000000
   29e04:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29e08:	ldr	r2, [sp, #24]
   29e0c:	ldr	r3, [sp, #28]
   29e10:	subs	r0, r0, r7
   29e14:	sbcs	r0, r1, r9
   29e18:	bge	29e64 <__assert_fail@plt+0x18704>
   29e1c:	mov	r0, #1
   29e20:	str	r0, [sp, #8]
   29e24:	b	29e78 <__assert_fail@plt+0x18718>
   29e28:	mov	r0, #0
   29e2c:	mov	r1, #-2147483648	; 0x80000000
   29e30:	mov	r2, r7
   29e34:	mov	r3, r9
   29e38:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29e3c:	ldr	r2, [sp, #24]
   29e40:	ldr	r3, [sp, #28]
   29e44:	subs	r0, r0, r2
   29e48:	sbcs	r0, r1, r3
   29e4c:	bge	29e64 <__assert_fail@plt+0x18704>
   29e50:	mov	r0, #1
   29e54:	mov	r4, #0
   29e58:	mov	r8, #-2147483648	; 0x80000000
   29e5c:	str	r0, [sp, #8]
   29e60:	b	29eac <__assert_fail@plt+0x1874c>
   29e64:	umull	r4, r0, r7, r2
   29e68:	mla	r0, r7, r3, r0
   29e6c:	mla	r8, r9, r2, r0
   29e70:	cmp	r8, #0
   29e74:	bmi	29eac <__assert_fail@plt+0x1874c>
   29e78:	ldr	r3, [sp, #28]
   29e7c:	mvn	r0, #0
   29e80:	mvn	r1, #-2147483648	; 0x80000000
   29e84:	mvn	r6, #0
   29e88:	mvn	r9, #-2147483648	; 0x80000000
   29e8c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29e90:	ldr	r2, [sp, #24]
   29e94:	ldr	r3, [sp, #28]
   29e98:	subs	r0, r0, r4
   29e9c:	sbcs	r0, r1, r8
   29ea0:	bge	29ee4 <__assert_fail@plt+0x18784>
   29ea4:	mov	r8, #1
   29ea8:	b	29efc <__assert_fail@plt+0x1879c>
   29eac:	mov	r0, #0
   29eb0:	mov	r1, #-2147483648	; 0x80000000
   29eb4:	mov	r2, r4
   29eb8:	mov	r3, r8
   29ebc:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29ec0:	ldr	r2, [sp, #24]
   29ec4:	ldr	r3, [sp, #28]
   29ec8:	subs	r0, r0, r2
   29ecc:	sbcs	r0, r1, r3
   29ed0:	bge	29ee4 <__assert_fail@plt+0x18784>
   29ed4:	mov	r8, #1
   29ed8:	mov	r6, #0
   29edc:	mov	r9, #-2147483648	; 0x80000000
   29ee0:	b	29f4c <__assert_fail@plt+0x187ec>
   29ee4:	umull	r6, r0, r4, r2
   29ee8:	mla	r0, r4, r3, r0
   29eec:	mla	r9, r8, r2, r0
   29ef0:	ldr	r8, [sp, #8]
   29ef4:	cmp	r9, #0
   29ef8:	bmi	29f4c <__assert_fail@plt+0x187ec>
   29efc:	ldr	r3, [sp, #28]
   29f00:	mvn	r0, #0
   29f04:	mvn	r1, #-2147483648	; 0x80000000
   29f08:	mvn	r4, #0
   29f0c:	mvn	r7, #-2147483648	; 0x80000000
   29f10:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29f14:	ldr	r3, [sp, #24]
   29f18:	ldr	ip, [sp, #28]
   29f1c:	subs	r0, r0, r6
   29f20:	mov	r2, #1
   29f24:	sbcs	r0, r1, r9
   29f28:	blt	29f3c <__assert_fail@plt+0x187dc>
   29f2c:	umull	r4, r0, r6, r3
   29f30:	mov	r2, #0
   29f34:	mla	r0, r6, ip, r0
   29f38:	mla	r7, r9, r3, r0
   29f3c:	ldr	r9, [sp, #12]
   29f40:	orr	r3, r2, r8
   29f44:	mov	r6, r4
   29f48:	b	2a138 <__assert_fail@plt+0x189d8>
   29f4c:	mov	r0, #0
   29f50:	mov	r1, #-2147483648	; 0x80000000
   29f54:	mov	r2, r6
   29f58:	mov	r3, r9
   29f5c:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29f60:	ldr	r3, [sp, #24]
   29f64:	ldr	ip, [sp, #28]
   29f68:	mov	r2, #1
   29f6c:	mov	r4, #0
   29f70:	mov	r7, #-2147483648	; 0x80000000
   29f74:	subs	r0, r0, r3
   29f78:	sbcs	r0, r1, ip
   29f7c:	bge	29f2c <__assert_fail@plt+0x187cc>
   29f80:	b	29f3c <__assert_fail@plt+0x187dc>
   29f84:	ldr	r6, [sp, #8]
   29f88:	mov	r0, #0
   29f8c:	mov	r1, #-2147483648	; 0x80000000
   29f90:	mov	r3, r8
   29f94:	str	r4, [sp, #4]
   29f98:	mov	r2, r6
   29f9c:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   29fa0:	ldr	r2, [sp, #24]
   29fa4:	ldr	r3, [sp, #28]
   29fa8:	mov	r7, #1
   29fac:	mov	r9, #0
   29fb0:	mov	r4, #-2147483648	; 0x80000000
   29fb4:	subs	r0, r0, r2
   29fb8:	sbcs	r0, r1, r3
   29fbc:	blt	2a014 <__assert_fail@plt+0x188b4>
   29fc0:	umull	r9, r0, r6, r2
   29fc4:	ldr	r7, [sp, #4]
   29fc8:	mla	r0, r6, r3, r0
   29fcc:	mla	r4, r8, r2, r0
   29fd0:	cmp	r4, #0
   29fd4:	bmi	2a014 <__assert_fail@plt+0x188b4>
   29fd8:	ldr	r3, [sp, #28]
   29fdc:	mvn	r0, #0
   29fe0:	mvn	r1, #-2147483648	; 0x80000000
   29fe4:	str	r7, [sp, #4]
   29fe8:	mvn	r8, #0
   29fec:	mvn	r7, #-2147483648	; 0x80000000
   29ff0:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   29ff4:	ldr	r2, [sp, #24]
   29ff8:	ldr	r3, [sp, #28]
   29ffc:	subs	r0, r0, r9
   2a000:	mov	r6, #1
   2a004:	sbcs	r0, r1, r4
   2a008:	str	r6, [sp, #8]
   2a00c:	bge	2a050 <__assert_fail@plt+0x188f0>
   2a010:	b	2a06c <__assert_fail@plt+0x1890c>
   2a014:	mov	r0, #0
   2a018:	mov	r1, #-2147483648	; 0x80000000
   2a01c:	mov	r2, r9
   2a020:	mov	r3, r4
   2a024:	str	r7, [sp, #4]
   2a028:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a02c:	ldr	r2, [sp, #24]
   2a030:	ldr	r3, [sp, #28]
   2a034:	mov	r7, #1
   2a038:	mov	r8, #0
   2a03c:	str	r7, [sp, #8]
   2a040:	mov	r7, #-2147483648	; 0x80000000
   2a044:	subs	r0, r0, r2
   2a048:	sbcs	r0, r1, r3
   2a04c:	blt	2a0a0 <__assert_fail@plt+0x18940>
   2a050:	umull	r8, r0, r9, r2
   2a054:	mla	r0, r9, r3, r0
   2a058:	mla	r7, r4, r2, r0
   2a05c:	ldr	r0, [sp, #4]
   2a060:	cmp	r7, #0
   2a064:	str	r0, [sp, #8]
   2a068:	bmi	2a0a0 <__assert_fail@plt+0x18940>
   2a06c:	ldr	r3, [sp, #28]
   2a070:	mvn	r0, #0
   2a074:	mvn	r1, #-2147483648	; 0x80000000
   2a078:	mvn	r4, #0
   2a07c:	mvn	r9, #-2147483648	; 0x80000000
   2a080:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a084:	ldr	r2, [sp, #24]
   2a088:	ldr	r3, [sp, #28]
   2a08c:	subs	r0, r0, r8
   2a090:	sbcs	r0, r1, r7
   2a094:	bge	2a0d8 <__assert_fail@plt+0x18978>
   2a098:	mov	r8, #1
   2a09c:	b	2a0f0 <__assert_fail@plt+0x18990>
   2a0a0:	mov	r0, #0
   2a0a4:	mov	r1, #-2147483648	; 0x80000000
   2a0a8:	mov	r2, r8
   2a0ac:	mov	r3, r7
   2a0b0:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a0b4:	ldr	r2, [sp, #24]
   2a0b8:	ldr	r3, [sp, #28]
   2a0bc:	subs	r0, r0, r2
   2a0c0:	sbcs	r0, r1, r3
   2a0c4:	bge	2a0d8 <__assert_fail@plt+0x18978>
   2a0c8:	mov	r8, #1
   2a0cc:	mov	r4, #0
   2a0d0:	mov	r9, #-2147483648	; 0x80000000
   2a0d4:	b	2a168 <__assert_fail@plt+0x18a08>
   2a0d8:	umull	r4, r0, r8, r2
   2a0dc:	mla	r0, r8, r3, r0
   2a0e0:	ldr	r8, [sp, #8]
   2a0e4:	mla	r9, r7, r2, r0
   2a0e8:	cmp	r9, #0
   2a0ec:	bmi	2a168 <__assert_fail@plt+0x18a08>
   2a0f0:	ldr	r3, [sp, #28]
   2a0f4:	mvn	r0, #0
   2a0f8:	mvn	r1, #-2147483648	; 0x80000000
   2a0fc:	mvn	r6, #0
   2a100:	mvn	r7, #-2147483648	; 0x80000000
   2a104:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a108:	ldr	r3, [sp, #24]
   2a10c:	ldr	ip, [sp, #28]
   2a110:	subs	r0, r0, r4
   2a114:	mov	r2, #1
   2a118:	sbcs	r0, r1, r9
   2a11c:	blt	2a130 <__assert_fail@plt+0x189d0>
   2a120:	umull	r6, r0, r4, r3
   2a124:	mov	r2, #0
   2a128:	mla	r0, r4, ip, r0
   2a12c:	mla	r7, r9, r3, r0
   2a130:	ldr	r9, [sp, #12]
   2a134:	orr	r3, r2, r8
   2a138:	ldr	r1, [sp, #20]
   2a13c:	ldr	r2, [sp, #16]
   2a140:	orr	r5, r3, r5
   2a144:	add	r0, r1, r2
   2a148:	str	r0, [sl]
   2a14c:	ldrb	r0, [r1, r2]
   2a150:	cmp	r0, #0
   2a154:	orrne	r5, r5, #2
   2a158:	strd	r6, [r9]
   2a15c:	mov	r0, r5
   2a160:	sub	sp, fp, #28
   2a164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a168:	mov	r0, #0
   2a16c:	mov	r1, #-2147483648	; 0x80000000
   2a170:	mov	r2, r4
   2a174:	mov	r3, r9
   2a178:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a17c:	ldr	r3, [sp, #24]
   2a180:	ldr	ip, [sp, #28]
   2a184:	mov	r2, #1
   2a188:	mov	r6, #0
   2a18c:	mov	r7, #-2147483648	; 0x80000000
   2a190:	subs	r0, r0, r3
   2a194:	sbcs	r0, r1, ip
   2a198:	bge	2a120 <__assert_fail@plt+0x189c0>
   2a19c:	b	2a130 <__assert_fail@plt+0x189d0>
   2a1a0:	ldr	r6, [sp, #8]
   2a1a4:	mov	r0, #0
   2a1a8:	mov	r1, #-2147483648	; 0x80000000
   2a1ac:	mov	r3, r9
   2a1b0:	str	r4, [sp]
   2a1b4:	mov	r2, r6
   2a1b8:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a1bc:	ldr	r2, [sp, #24]
   2a1c0:	ldr	r3, [sp, #28]
   2a1c4:	mov	r7, #1
   2a1c8:	mov	r8, #-2147483648	; 0x80000000
   2a1cc:	subs	r0, r0, r2
   2a1d0:	sbcs	r0, r1, r3
   2a1d4:	mov	r0, #0
   2a1d8:	str	r0, [sp, #4]
   2a1dc:	blt	2a23c <__assert_fail@plt+0x18adc>
   2a1e0:	umull	r1, r0, r6, r2
   2a1e4:	ldr	r7, [sp]
   2a1e8:	mla	r0, r6, r3, r0
   2a1ec:	mla	r8, r9, r2, r0
   2a1f0:	str	r1, [sp, #4]
   2a1f4:	cmp	r8, #0
   2a1f8:	bmi	2a23c <__assert_fail@plt+0x18adc>
   2a1fc:	ldr	r3, [sp, #28]
   2a200:	mvn	r0, #0
   2a204:	mvn	r1, #-2147483648	; 0x80000000
   2a208:	str	r7, [sp]
   2a20c:	mvn	r7, #0
   2a210:	mvn	r4, #-2147483648	; 0x80000000
   2a214:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a218:	mov	r6, #1
   2a21c:	ldr	r2, [sp, #24]
   2a220:	ldr	r3, [sp, #28]
   2a224:	str	r6, [sp, #8]
   2a228:	ldr	r6, [sp, #4]
   2a22c:	subs	r0, r0, r6
   2a230:	sbcs	r0, r1, r8
   2a234:	bge	2a27c <__assert_fail@plt+0x18b1c>
   2a238:	b	2a298 <__assert_fail@plt+0x18b38>
   2a23c:	ldr	r6, [sp, #4]
   2a240:	mov	r0, #0
   2a244:	mov	r1, #-2147483648	; 0x80000000
   2a248:	mov	r3, r8
   2a24c:	str	r7, [sp]
   2a250:	mov	r2, r6
   2a254:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a258:	ldr	r2, [sp, #24]
   2a25c:	ldr	r3, [sp, #28]
   2a260:	mov	r7, #1
   2a264:	mov	r4, #-2147483648	; 0x80000000
   2a268:	str	r7, [sp, #8]
   2a26c:	mov	r7, #0
   2a270:	subs	r0, r0, r2
   2a274:	sbcs	r0, r1, r3
   2a278:	blt	2a2d0 <__assert_fail@plt+0x18b70>
   2a27c:	umull	r7, r0, r6, r2
   2a280:	mla	r0, r6, r3, r0
   2a284:	mla	r4, r8, r2, r0
   2a288:	ldr	r0, [sp]
   2a28c:	cmp	r4, #0
   2a290:	str	r0, [sp, #8]
   2a294:	bmi	2a2d0 <__assert_fail@plt+0x18b70>
   2a298:	ldr	r3, [sp, #28]
   2a29c:	mvn	r0, #0
   2a2a0:	mvn	r1, #-2147483648	; 0x80000000
   2a2a4:	mvn	r9, #0
   2a2a8:	mvn	r8, #-2147483648	; 0x80000000
   2a2ac:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a2b0:	ldr	r2, [sp, #24]
   2a2b4:	ldr	r3, [sp, #28]
   2a2b8:	subs	r0, r0, r7
   2a2bc:	sbcs	r0, r1, r4
   2a2c0:	bge	2a30c <__assert_fail@plt+0x18bac>
   2a2c4:	mov	r0, #1
   2a2c8:	str	r0, [sp, #8]
   2a2cc:	b	2a320 <__assert_fail@plt+0x18bc0>
   2a2d0:	mov	r0, #0
   2a2d4:	mov	r1, #-2147483648	; 0x80000000
   2a2d8:	mov	r2, r7
   2a2dc:	mov	r3, r4
   2a2e0:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a2e4:	ldr	r2, [sp, #24]
   2a2e8:	ldr	r3, [sp, #28]
   2a2ec:	subs	r0, r0, r2
   2a2f0:	sbcs	r0, r1, r3
   2a2f4:	bge	2a30c <__assert_fail@plt+0x18bac>
   2a2f8:	mov	r0, #1
   2a2fc:	mov	r9, #0
   2a300:	mov	r8, #-2147483648	; 0x80000000
   2a304:	str	r0, [sp, #8]
   2a308:	b	2a358 <__assert_fail@plt+0x18bf8>
   2a30c:	umull	r9, r0, r7, r2
   2a310:	mla	r0, r7, r3, r0
   2a314:	mla	r8, r4, r2, r0
   2a318:	cmp	r8, #0
   2a31c:	bmi	2a358 <__assert_fail@plt+0x18bf8>
   2a320:	ldr	r3, [sp, #28]
   2a324:	mvn	r0, #0
   2a328:	mvn	r1, #-2147483648	; 0x80000000
   2a32c:	mvn	r4, #0
   2a330:	mvn	r7, #-2147483648	; 0x80000000
   2a334:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a338:	ldr	r2, [sp, #24]
   2a33c:	ldr	r3, [sp, #28]
   2a340:	subs	r0, r0, r9
   2a344:	sbcs	r0, r1, r8
   2a348:	bge	2a394 <__assert_fail@plt+0x18c34>
   2a34c:	mov	r0, #1
   2a350:	str	r0, [sp, #8]
   2a354:	b	2a3a8 <__assert_fail@plt+0x18c48>
   2a358:	mov	r0, #0
   2a35c:	mov	r1, #-2147483648	; 0x80000000
   2a360:	mov	r2, r9
   2a364:	mov	r3, r8
   2a368:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a36c:	ldr	r2, [sp, #24]
   2a370:	ldr	r3, [sp, #28]
   2a374:	subs	r0, r0, r2
   2a378:	sbcs	r0, r1, r3
   2a37c:	bge	2a394 <__assert_fail@plt+0x18c34>
   2a380:	mov	r0, #1
   2a384:	mov	r4, #0
   2a388:	mov	r7, #-2147483648	; 0x80000000
   2a38c:	str	r0, [sp, #8]
   2a390:	b	2a3e0 <__assert_fail@plt+0x18c80>
   2a394:	umull	r4, r0, r9, r2
   2a398:	mla	r0, r9, r3, r0
   2a39c:	mla	r7, r8, r2, r0
   2a3a0:	cmp	r7, #0
   2a3a4:	bmi	2a3e0 <__assert_fail@plt+0x18c80>
   2a3a8:	ldr	r3, [sp, #28]
   2a3ac:	mvn	r0, #0
   2a3b0:	mvn	r1, #-2147483648	; 0x80000000
   2a3b4:	mvn	r8, #0
   2a3b8:	mvn	r9, #-2147483648	; 0x80000000
   2a3bc:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a3c0:	ldr	r2, [sp, #24]
   2a3c4:	ldr	r3, [sp, #28]
   2a3c8:	subs	r0, r0, r4
   2a3cc:	sbcs	r0, r1, r7
   2a3d0:	bge	2a41c <__assert_fail@plt+0x18cbc>
   2a3d4:	mov	r0, #1
   2a3d8:	str	r0, [sp, #8]
   2a3dc:	b	2a430 <__assert_fail@plt+0x18cd0>
   2a3e0:	mov	r0, #0
   2a3e4:	mov	r1, #-2147483648	; 0x80000000
   2a3e8:	mov	r2, r4
   2a3ec:	mov	r3, r7
   2a3f0:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a3f4:	ldr	r2, [sp, #24]
   2a3f8:	ldr	r3, [sp, #28]
   2a3fc:	subs	r0, r0, r2
   2a400:	sbcs	r0, r1, r3
   2a404:	bge	2a41c <__assert_fail@plt+0x18cbc>
   2a408:	mov	r0, #1
   2a40c:	mov	r8, #0
   2a410:	mov	r9, #-2147483648	; 0x80000000
   2a414:	str	r0, [sp, #8]
   2a418:	b	2a46c <__assert_fail@plt+0x18d0c>
   2a41c:	umull	r8, r0, r4, r2
   2a420:	mla	r0, r4, r3, r0
   2a424:	mla	r9, r7, r2, r0
   2a428:	cmp	r9, #0
   2a42c:	bmi	2a46c <__assert_fail@plt+0x18d0c>
   2a430:	ldr	r3, [sp, #28]
   2a434:	mvn	r0, #0
   2a438:	mvn	r1, #-2147483648	; 0x80000000
   2a43c:	mvn	r4, #0
   2a440:	mvn	r6, #-2147483648	; 0x80000000
   2a444:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a448:	ldr	r2, [sp, #24]
   2a44c:	ldr	r3, [sp, #28]
   2a450:	subs	r0, r0, r8
   2a454:	sbcs	r0, r1, r9
   2a458:	bge	2a4ac <__assert_fail@plt+0x18d4c>
   2a45c:	ldr	r9, [sp, #12]
   2a460:	mov	r0, #1
   2a464:	str	r0, [sp, #8]
   2a468:	b	2a4c4 <__assert_fail@plt+0x18d64>
   2a46c:	mov	r0, #0
   2a470:	mov	r1, #-2147483648	; 0x80000000
   2a474:	mov	r2, r8
   2a478:	mov	r3, r9
   2a47c:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a480:	ldr	r2, [sp, #24]
   2a484:	ldr	r3, [sp, #28]
   2a488:	subs	r0, r0, r2
   2a48c:	sbcs	r0, r1, r3
   2a490:	bge	2a4ac <__assert_fail@plt+0x18d4c>
   2a494:	ldr	r9, [sp, #12]
   2a498:	mov	r0, #1
   2a49c:	mov	r4, #0
   2a4a0:	mov	r6, #-2147483648	; 0x80000000
   2a4a4:	str	r0, [sp, #8]
   2a4a8:	b	2a510 <__assert_fail@plt+0x18db0>
   2a4ac:	umull	r4, r0, r8, r2
   2a4b0:	mla	r0, r8, r3, r0
   2a4b4:	mla	r6, r9, r2, r0
   2a4b8:	ldr	r9, [sp, #12]
   2a4bc:	cmp	r6, #0
   2a4c0:	bmi	2a510 <__assert_fail@plt+0x18db0>
   2a4c4:	ldr	r3, [sp, #28]
   2a4c8:	mvn	r0, #0
   2a4cc:	mvn	r1, #-2147483648	; 0x80000000
   2a4d0:	mov	r8, r6
   2a4d4:	mvn	r6, #0
   2a4d8:	mvn	r7, #-2147483648	; 0x80000000
   2a4dc:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a4e0:	ldr	r3, [sp, #24]
   2a4e4:	ldr	ip, [sp, #28]
   2a4e8:	subs	r0, r0, r4
   2a4ec:	mov	r2, #1
   2a4f0:	sbcs	r0, r1, r8
   2a4f4:	blt	2a508 <__assert_fail@plt+0x18da8>
   2a4f8:	umull	r6, r0, r4, r3
   2a4fc:	mov	r2, #0
   2a500:	mla	r0, r4, ip, r0
   2a504:	mla	r7, r8, r3, r0
   2a508:	ldr	r0, [sp, #8]
   2a50c:	b	29654 <__assert_fail@plt+0x17ef4>
   2a510:	mov	r0, #0
   2a514:	mov	r1, #-2147483648	; 0x80000000
   2a518:	mov	r2, r4
   2a51c:	mov	r3, r6
   2a520:	bl	2b7f0 <__assert_fail@plt+0x1a090>
   2a524:	ldr	r3, [sp, #24]
   2a528:	ldr	ip, [sp, #28]
   2a52c:	mov	r8, r6
   2a530:	mov	r2, #1
   2a534:	mov	r6, #0
   2a538:	mov	r7, #-2147483648	; 0x80000000
   2a53c:	subs	r0, r0, r3
   2a540:	sbcs	r0, r1, ip
   2a544:	bge	2a4f8 <__assert_fail@plt+0x18d98>
   2a548:	b	2a508 <__assert_fail@plt+0x18da8>
   2a54c:	movw	r0, #52497	; 0xcd11
   2a550:	movw	r1, #52535	; 0xcd37
   2a554:	movw	r3, #52551	; 0xcd47
   2a558:	mov	r2, #85	; 0x55
   2a55c:	movt	r0, #2
   2a560:	movt	r1, #2
   2a564:	movt	r3, #2
   2a568:	bl	11760 <__assert_fail@plt>
   2a56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a570:	add	fp, sp, #28
   2a574:	sub	sp, sp, #44	; 0x2c
   2a578:	cmp	r2, #37	; 0x25
   2a57c:	bcs	2b1ec <__assert_fail@plt+0x19a8c>
   2a580:	ldr	sl, [fp, #8]
   2a584:	mov	r6, r2
   2a588:	mov	r7, r1
   2a58c:	mov	r4, r0
   2a590:	str	r3, [sp, #36]	; 0x24
   2a594:	bl	11640 <__errno_location@plt>
   2a598:	mov	r5, r0
   2a59c:	mov	r0, #0
   2a5a0:	str	r0, [r5]
   2a5a4:	bl	11604 <__ctype_b_loc@plt>
   2a5a8:	ldr	r1, [r0]
   2a5ac:	mov	r2, r4
   2a5b0:	ldrb	r0, [r2], #1
   2a5b4:	add	r3, r1, r0, lsl #1
   2a5b8:	ldrb	r3, [r3, #1]
   2a5bc:	tst	r3, #32
   2a5c0:	bne	2a5b0 <__assert_fail@plt+0x18e50>
   2a5c4:	cmp	r7, #0
   2a5c8:	sub	r9, fp, #32
   2a5cc:	mov	r8, #4
   2a5d0:	movne	r9, r7
   2a5d4:	cmp	r0, #45	; 0x2d
   2a5d8:	beq	2b1e0 <__assert_fail@plt+0x19a80>
   2a5dc:	mov	r0, r4
   2a5e0:	mov	r1, r9
   2a5e4:	mov	r2, r6
   2a5e8:	mov	r3, #0
   2a5ec:	bl	1149c <__strtoull_internal@plt>
   2a5f0:	mov	r7, r1
   2a5f4:	ldr	r1, [r9]
   2a5f8:	cmp	r1, r4
   2a5fc:	beq	2a628 <__assert_fail@plt+0x18ec8>
   2a600:	mov	r6, r0
   2a604:	ldr	r0, [r5]
   2a608:	cmp	r0, #0
   2a60c:	beq	2a664 <__assert_fail@plt+0x18f04>
   2a610:	cmp	r0, #34	; 0x22
   2a614:	bne	2b1e0 <__assert_fail@plt+0x19a80>
   2a618:	mov	r8, #1
   2a61c:	cmp	sl, #0
   2a620:	bne	2a670 <__assert_fail@plt+0x18f10>
   2a624:	b	2b1d8 <__assert_fail@plt+0x19a78>
   2a628:	cmp	sl, #0
   2a62c:	beq	2b1e0 <__assert_fail@plt+0x19a80>
   2a630:	mov	r5, r1
   2a634:	ldrb	r1, [r4]
   2a638:	cmp	r1, #0
   2a63c:	beq	2b1e0 <__assert_fail@plt+0x19a80>
   2a640:	mov	r0, sl
   2a644:	bl	11634 <strchr@plt>
   2a648:	cmp	r0, #0
   2a64c:	beq	2b1e0 <__assert_fail@plt+0x19a80>
   2a650:	mov	r1, r5
   2a654:	mov	r8, #0
   2a658:	mov	r6, #1
   2a65c:	mov	r7, #0
   2a660:	b	2a670 <__assert_fail@plt+0x18f10>
   2a664:	mov	r8, r0
   2a668:	cmp	sl, #0
   2a66c:	beq	2b1d8 <__assert_fail@plt+0x19a78>
   2a670:	ldrb	r4, [r1]
   2a674:	cmp	r4, #0
   2a678:	beq	2b1d8 <__assert_fail@plt+0x19a78>
   2a67c:	str	r1, [sp, #32]
   2a680:	mov	r0, sl
   2a684:	mov	r1, r4
   2a688:	bl	11634 <strchr@plt>
   2a68c:	cmp	r0, #0
   2a690:	beq	2a958 <__assert_fail@plt+0x191f8>
   2a694:	sub	r0, r4, #69	; 0x45
   2a698:	mov	r1, #1
   2a69c:	mov	r3, #0
   2a6a0:	mov	r5, #1024	; 0x400
   2a6a4:	cmp	r0, #47	; 0x2f
   2a6a8:	str	r1, [sp, #28]
   2a6ac:	bhi	2a7b0 <__assert_fail@plt+0x19050>
   2a6b0:	add	r1, pc, #0
   2a6b4:	ldr	pc, [r1, r0, lsl #2]
   2a6b8:	andeq	sl, r2, r8, ror r7
   2a6bc:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6c0:	andeq	sl, r2, r8, ror r7
   2a6c4:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6c8:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6cc:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6d0:	andeq	sl, r2, r8, ror r7
   2a6d4:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6d8:	andeq	sl, r2, r8, ror r7
   2a6dc:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6e0:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6e4:	andeq	sl, r2, r8, ror r7
   2a6e8:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6ec:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6f0:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6f4:	andeq	sl, r2, r8, ror r7
   2a6f8:			; <UNDEFINED> instruction: 0x0002a7b0
   2a6fc:			; <UNDEFINED> instruction: 0x0002a7b0
   2a700:			; <UNDEFINED> instruction: 0x0002a7b0
   2a704:			; <UNDEFINED> instruction: 0x0002a7b0
   2a708:	andeq	sl, r2, r8, ror r7
   2a70c:	andeq	sl, r2, r8, ror r7
   2a710:			; <UNDEFINED> instruction: 0x0002a7b0
   2a714:			; <UNDEFINED> instruction: 0x0002a7b0
   2a718:			; <UNDEFINED> instruction: 0x0002a7b0
   2a71c:			; <UNDEFINED> instruction: 0x0002a7b0
   2a720:			; <UNDEFINED> instruction: 0x0002a7b0
   2a724:			; <UNDEFINED> instruction: 0x0002a7b0
   2a728:			; <UNDEFINED> instruction: 0x0002a7b0
   2a72c:			; <UNDEFINED> instruction: 0x0002a7b0
   2a730:			; <UNDEFINED> instruction: 0x0002a7b0
   2a734:			; <UNDEFINED> instruction: 0x0002a7b0
   2a738:			; <UNDEFINED> instruction: 0x0002a7b0
   2a73c:			; <UNDEFINED> instruction: 0x0002a7b0
   2a740:	andeq	sl, r2, r8, ror r7
   2a744:			; <UNDEFINED> instruction: 0x0002a7b0
   2a748:			; <UNDEFINED> instruction: 0x0002a7b0
   2a74c:			; <UNDEFINED> instruction: 0x0002a7b0
   2a750:	andeq	sl, r2, r8, ror r7
   2a754:			; <UNDEFINED> instruction: 0x0002a7b0
   2a758:	andeq	sl, r2, r8, ror r7
   2a75c:			; <UNDEFINED> instruction: 0x0002a7b0
   2a760:			; <UNDEFINED> instruction: 0x0002a7b0
   2a764:			; <UNDEFINED> instruction: 0x0002a7b0
   2a768:			; <UNDEFINED> instruction: 0x0002a7b0
   2a76c:			; <UNDEFINED> instruction: 0x0002a7b0
   2a770:			; <UNDEFINED> instruction: 0x0002a7b0
   2a774:	andeq	sl, r2, r8, ror r7
   2a778:	mov	r0, sl
   2a77c:	mov	r1, #48	; 0x30
   2a780:	bl	11634 <strchr@plt>
   2a784:	cmp	r0, #0
   2a788:	beq	2a7ac <__assert_fail@plt+0x1904c>
   2a78c:	ldr	r1, [sp, #32]
   2a790:	ldrb	r0, [r1, #1]
   2a794:	cmp	r0, #66	; 0x42
   2a798:	cmpne	r0, #68	; 0x44
   2a79c:	bne	2a964 <__assert_fail@plt+0x19204>
   2a7a0:	mov	r5, #1000	; 0x3e8
   2a7a4:	mov	r0, #2
   2a7a8:	str	r0, [sp, #28]
   2a7ac:	mov	r3, #0
   2a7b0:	sub	r0, r4, #66	; 0x42
   2a7b4:	cmp	r0, #53	; 0x35
   2a7b8:	bhi	2a958 <__assert_fail@plt+0x191f8>
   2a7bc:	add	r1, pc, #0
   2a7c0:	ldr	pc, [r1, r0, lsl #2]
   2a7c4:	andeq	sl, r2, r0, ror #25
   2a7c8:	andeq	sl, r2, r8, asr r9
   2a7cc:	andeq	sl, r2, r8, asr r9
   2a7d0:	andeq	sl, r2, r8, lsl #26
   2a7d4:	andeq	sl, r2, r8, asr r9
   2a7d8:	muleq	r2, ip, r8
   2a7dc:	andeq	sl, r2, r8, asr r9
   2a7e0:	andeq	sl, r2, r8, asr r9
   2a7e4:	andeq	sl, r2, r8, asr r9
   2a7e8:	andeq	sl, r2, r8, lsl #19
   2a7ec:	andeq	sl, r2, r8, asr r9
   2a7f0:	ldrdeq	sl, [r2], -r0
   2a7f4:	andeq	sl, r2, r8, asr r9
   2a7f8:	andeq	sl, r2, r8, asr r9
   2a7fc:	andeq	sl, r2, r0, ror #28
   2a800:	andeq	sl, r2, r8, asr r9
   2a804:	andeq	sl, r2, r8, asr r9
   2a808:	andeq	sl, r2, r8, asr r9
   2a80c:	andeq	sl, r2, ip, asr sl
   2a810:	andeq	sl, r2, r8, asr r9
   2a814:	andeq	sl, r2, r8, asr r9
   2a818:	andeq	sl, r2, r8, asr r9
   2a81c:	andeq	sl, r2, r8, asr r9
   2a820:	andeq	sl, r2, r8, lsl #31
   2a824:	andeq	sl, r2, r4, asr #22
   2a828:	andeq	sl, r2, r8, asr r9
   2a82c:	andeq	sl, r2, r8, asr r9
   2a830:	andeq	sl, r2, r8, asr r9
   2a834:	andeq	sl, r2, r8, asr r9
   2a838:	andeq	sl, r2, r8, asr r9
   2a83c:	andeq	sl, r2, r8, asr r9
   2a840:	andeq	sl, r2, r8, asr r9
   2a844:	andeq	fp, r2, r0, ror #2
   2a848:			; <UNDEFINED> instruction: 0x0002b1b8
   2a84c:	andeq	sl, r2, r8, asr r9
   2a850:	andeq	sl, r2, r8, asr r9
   2a854:	andeq	sl, r2, r8, asr r9
   2a858:	muleq	r2, ip, r8
   2a85c:	andeq	sl, r2, r8, asr r9
   2a860:	andeq	sl, r2, r8, asr r9
   2a864:	andeq	sl, r2, r8, asr r9
   2a868:	andeq	sl, r2, r8, lsl #19
   2a86c:	andeq	sl, r2, r8, asr r9
   2a870:	ldrdeq	sl, [r2], -r0
   2a874:	andeq	sl, r2, r8, asr r9
   2a878:	andeq	sl, r2, r8, asr r9
   2a87c:	andeq	sl, r2, r8, asr r9
   2a880:	andeq	sl, r2, r8, asr r9
   2a884:	andeq	sl, r2, r8, asr r9
   2a888:	andeq	sl, r2, r8, asr r9
   2a88c:	andeq	sl, r2, ip, asr sl
   2a890:	andeq	sl, r2, r8, asr r9
   2a894:	andeq	sl, r2, r8, asr r9
   2a898:	muleq	r2, r4, r1
   2a89c:	mvn	r0, #0
   2a8a0:	mvn	r1, #0
   2a8a4:	mov	r2, r5
   2a8a8:	mov	sl, r3
   2a8ac:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a8b0:	subs	r3, r0, r6
   2a8b4:	umull	r4, r2, r6, r5
   2a8b8:	mov	lr, #0
   2a8bc:	str	r1, [sp, #20]
   2a8c0:	sbcs	r3, r1, r7
   2a8c4:	movwcc	lr, #1
   2a8c8:	mla	ip, r6, sl, r2
   2a8cc:	mov	r2, r1
   2a8d0:	mov	r2, #0
   2a8d4:	cmp	lr, #0
   2a8d8:	mla	r7, r7, r5, ip
   2a8dc:	mvnne	r4, #0
   2a8e0:	mvnne	r7, #0
   2a8e4:	subs	r6, r0, r4
   2a8e8:	sbcs	r6, r1, r7
   2a8ec:	umull	r3, r6, r4, r5
   2a8f0:	movwcc	r2, #1
   2a8f4:	cmp	r2, #0
   2a8f8:	mvnne	r3, #0
   2a8fc:	cmp	r2, #0
   2a900:	str	r6, [sp, #16]
   2a904:	umull	r6, ip, r3, r5
   2a908:	mla	r1, r3, sl, ip
   2a90c:	ldr	ip, [sp, #16]
   2a910:	str	r1, [sp, #12]
   2a914:	mla	r4, r4, sl, ip
   2a918:	mla	r4, r7, r5, r4
   2a91c:	mvnne	r4, #0
   2a920:	subs	r0, r0, r3
   2a924:	ldr	r0, [sp, #20]
   2a928:	ldr	r7, [sp, #12]
   2a92c:	sbcs	r0, r0, r4
   2a930:	mov	r0, #0
   2a934:	mla	r7, r4, r5, r7
   2a938:	movwcc	r0, #1
   2a93c:	cmp	r0, #0
   2a940:	mov	r1, r0
   2a944:	orr	r0, lr, r2
   2a948:	mvnne	r7, #0
   2a94c:	mvnne	r6, #0
   2a950:	orr	r3, r0, r1
   2a954:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2a958:	ldr	r0, [sp, #36]	; 0x24
   2a95c:	orr	r8, r8, #2
   2a960:	b	2b1dc <__assert_fail@plt+0x19a7c>
   2a964:	cmp	r0, #105	; 0x69
   2a968:	mov	r3, #0
   2a96c:	bne	2a7b0 <__assert_fail@plt+0x19050>
   2a970:	ldrb	r0, [r1, #2]
   2a974:	mov	r1, #1
   2a978:	cmp	r0, #66	; 0x42
   2a97c:	movweq	r1, #3
   2a980:	str	r1, [sp, #28]
   2a984:	b	2a7b0 <__assert_fail@plt+0x19050>
   2a988:	mvn	r0, #0
   2a98c:	mvn	r1, #0
   2a990:	mov	r2, r5
   2a994:	mov	r4, r3
   2a998:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a99c:	subs	r0, r0, r6
   2a9a0:	mov	r2, #0
   2a9a4:	sbcs	r0, r1, r7
   2a9a8:	umull	r0, r1, r6, r5
   2a9ac:	movwcc	r2, #1
   2a9b0:	cmp	r2, #0
   2a9b4:	mla	r1, r6, r4, r1
   2a9b8:	mov	r3, r2
   2a9bc:	mvnne	r0, #0
   2a9c0:	mla	r7, r7, r5, r1
   2a9c4:	mvnne	r7, #0
   2a9c8:	mov	r6, r0
   2a9cc:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2a9d0:	mvn	r0, #0
   2a9d4:	mvn	r1, #0
   2a9d8:	mov	r2, r5
   2a9dc:	str	r3, [sp, #24]
   2a9e0:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2a9e4:	subs	r3, r0, r6
   2a9e8:	mov	ip, r0
   2a9ec:	umull	r4, r0, r6, r5
   2a9f0:	mov	sl, #0
   2a9f4:	sbcs	r3, r1, r7
   2a9f8:	mov	r3, #0
   2a9fc:	movwcc	r3, #1
   2aa00:	cmp	r3, #0
   2aa04:	str	r0, [sp, #20]
   2aa08:	ldr	r0, [sp, #24]
   2aa0c:	mvnne	r4, #0
   2aa10:	cmp	r3, #0
   2aa14:	umull	lr, r2, r4, r5
   2aa18:	mla	r2, r4, r0, r2
   2aa1c:	str	r2, [sp, #16]
   2aa20:	ldr	r2, [sp, #20]
   2aa24:	mla	r6, r6, r0, r2
   2aa28:	ldr	r0, [sp, #16]
   2aa2c:	mla	r6, r7, r5, r6
   2aa30:	mvnne	r6, #0
   2aa34:	mla	r7, r6, r5, r0
   2aa38:	subs	r0, ip, r4
   2aa3c:	sbcs	r0, r1, r6
   2aa40:	movwcc	sl, #1
   2aa44:	cmp	sl, #0
   2aa48:	orr	r3, r3, sl
   2aa4c:	mvnne	lr, #0
   2aa50:	mvnne	r7, #0
   2aa54:	mov	r6, lr
   2aa58:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2aa5c:	mvn	r0, #0
   2aa60:	mvn	r1, #0
   2aa64:	mov	r2, r5
   2aa68:	mov	sl, r3
   2aa6c:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2aa70:	subs	r3, r0, r6
   2aa74:	mov	ip, r1
   2aa78:	umull	r2, lr, r6, r5
   2aa7c:	str	r0, [sp, #20]
   2aa80:	sbcs	r3, r1, r7
   2aa84:	mov	r1, #0
   2aa88:	str	ip, [sp, #16]
   2aa8c:	movwcc	r1, #1
   2aa90:	mla	r6, r6, sl, lr
   2aa94:	mov	lr, #0
   2aa98:	cmp	r1, #0
   2aa9c:	mla	r7, r7, r5, r6
   2aaa0:	mvnne	r2, #0
   2aaa4:	cmp	r1, #0
   2aaa8:	umull	r3, r4, r2, r5
   2aaac:	mvnne	r7, #0
   2aab0:	mla	r4, r2, sl, r4
   2aab4:	subs	r2, r0, r2
   2aab8:	sbcs	r2, ip, r7
   2aabc:	mla	r4, r7, r5, r4
   2aac0:	mov	r2, #0
   2aac4:	movwcc	lr, #1
   2aac8:	cmp	lr, #0
   2aacc:	mvnne	r3, #0
   2aad0:	mvnne	r4, #0
   2aad4:	subs	r7, r0, r3
   2aad8:	mov	r0, r5
   2aadc:	sbcs	r7, ip, r4
   2aae0:	umull	r5, r7, r3, r5
   2aae4:	movwcc	r2, #1
   2aae8:	cmp	r2, #0
   2aaec:	mla	r3, r3, sl, r7
   2aaf0:	mvnne	r5, #0
   2aaf4:	cmp	r2, #0
   2aaf8:	mla	r3, r4, r0, r3
   2aafc:	umull	r6, ip, r5, r0
   2ab00:	mvnne	r3, #0
   2ab04:	mla	ip, r5, sl, ip
   2ab08:	mla	r7, r3, r0, ip
   2ab0c:	ldr	r0, [sp, #20]
   2ab10:	subs	r0, r0, r5
   2ab14:	ldr	r0, [sp, #16]
   2ab18:	sbcs	r0, r0, r3
   2ab1c:	mov	r0, #0
   2ab20:	movwcc	r0, #1
   2ab24:	cmp	r0, #0
   2ab28:	mov	r3, r0
   2ab2c:	orr	r0, r1, lr
   2ab30:	orr	r0, r0, r2
   2ab34:	mvnne	r7, #0
   2ab38:	mvnne	r6, #0
   2ab3c:	orr	r3, r0, r3
   2ab40:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2ab44:	mvn	r0, #0
   2ab48:	mvn	r1, #0
   2ab4c:	mov	r2, r5
   2ab50:	mov	r4, r3
   2ab54:	str	r3, [sp, #24]
   2ab58:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2ab5c:	umull	r3, r2, r6, r5
   2ab60:	mla	r2, r6, r4, r2
   2ab64:	subs	r6, r0, r6
   2ab68:	sbcs	r6, r1, r7
   2ab6c:	mov	r6, #0
   2ab70:	mla	ip, r7, r5, r2
   2ab74:	ldr	r2, [sp, #24]
   2ab78:	movwcc	r6, #1
   2ab7c:	cmp	r6, #0
   2ab80:	str	r6, [sp, #20]
   2ab84:	mov	r6, #0
   2ab88:	mvnne	r3, #0
   2ab8c:	mvnne	ip, #0
   2ab90:	subs	r4, r0, r3
   2ab94:	umull	r7, lr, r3, r5
   2ab98:	sbcs	r4, r1, ip
   2ab9c:	movwcc	r6, #1
   2aba0:	mla	r3, r3, r2, lr
   2aba4:	cmp	r6, #0
   2aba8:	str	r6, [sp, #16]
   2abac:	mvnne	r7, #0
   2abb0:	cmp	r6, #0
   2abb4:	umull	sl, r4, r7, r5
   2abb8:	mla	r4, r7, r2, r4
   2abbc:	mla	r2, ip, r5, r3
   2abc0:	mvnne	r2, #0
   2abc4:	subs	r3, r0, r7
   2abc8:	mov	ip, #0
   2abcc:	mla	r6, r2, r5, r4
   2abd0:	sbcs	r2, r1, r2
   2abd4:	mov	r4, r0
   2abd8:	mov	r0, #0
   2abdc:	movwcc	r0, #1
   2abe0:	mov	r3, r4
   2abe4:	cmp	r0, #0
   2abe8:	str	r0, [sp, #12]
   2abec:	mov	r0, r1
   2abf0:	str	r3, [sp, #4]
   2abf4:	mvnne	sl, #0
   2abf8:	mvnne	r6, #0
   2abfc:	str	r0, [sp, #8]
   2ac00:	subs	r2, r4, sl
   2ac04:	ldr	r4, [sp, #24]
   2ac08:	sbcs	r2, r1, r6
   2ac0c:	umull	r7, r2, sl, r5
   2ac10:	movwcc	ip, #1
   2ac14:	cmp	ip, #0
   2ac18:	mvnne	r7, #0
   2ac1c:	mla	r2, sl, r4, r2
   2ac20:	cmp	ip, #0
   2ac24:	mov	sl, #0
   2ac28:	umull	r1, lr, r7, r5
   2ac2c:	mla	r2, r6, r5, r2
   2ac30:	mvnne	r2, #0
   2ac34:	subs	r6, r3, r7
   2ac38:	mla	lr, r7, r4, lr
   2ac3c:	mla	lr, r2, r5, lr
   2ac40:	sbcs	r2, r0, r2
   2ac44:	mov	r2, #0
   2ac48:	movwcc	sl, #1
   2ac4c:	cmp	sl, #0
   2ac50:	mvnne	r1, #0
   2ac54:	mvnne	lr, #0
   2ac58:	subs	r6, r3, r1
   2ac5c:	ldr	r3, [sp, #24]
   2ac60:	sbcs	r6, r0, lr
   2ac64:	umull	r0, r7, r1, r5
   2ac68:	movwcc	r2, #1
   2ac6c:	cmp	r2, #0
   2ac70:	mvnne	r0, #0
   2ac74:	mla	r1, r1, r3, r7
   2ac78:	cmp	r2, #0
   2ac7c:	umull	r6, r4, r0, r5
   2ac80:	mla	r1, lr, r5, r1
   2ac84:	mvnne	r1, #0
   2ac88:	mla	r4, r0, r3, r4
   2ac8c:	ldr	r3, [sp, #4]
   2ac90:	mla	r7, r1, r5, r4
   2ac94:	ldr	r5, [sp, #16]
   2ac98:	subs	r0, r3, r0
   2ac9c:	ldr	r0, [sp, #8]
   2aca0:	sbcs	r0, r0, r1
   2aca4:	mov	r0, #0
   2aca8:	movwcc	r0, #1
   2acac:	cmp	r0, #0
   2acb0:	mov	r1, r0
   2acb4:	ldr	r0, [sp, #20]
   2acb8:	mvnne	r7, #0
   2acbc:	mvnne	r6, #0
   2acc0:	orr	r0, r0, r5
   2acc4:	ldr	r5, [sp, #12]
   2acc8:	orr	r0, r0, r5
   2accc:	orr	r0, r0, ip
   2acd0:	orr	r0, r0, sl
   2acd4:	orr	r0, r0, r2
   2acd8:	orr	r0, r0, r1
   2acdc:	b	2b158 <__assert_fail@plt+0x199f8>
   2ace0:	mov	r1, #0
   2ace4:	lsl	r2, r7, #10
   2ace8:	lsl	r0, r6, #10
   2acec:	lsr	r3, r7, #22
   2acf0:	cmp	r1, r7, lsr #22
   2acf4:	orr	r2, r2, r6, lsr #22
   2acf8:	mvnne	r0, #0
   2acfc:	movwne	r3, #1
   2ad00:	cmp	r1, r7, lsr #22
   2ad04:	b	2b184 <__assert_fail@plt+0x19a24>
   2ad08:	mvn	r0, #0
   2ad0c:	mvn	r1, #0
   2ad10:	mov	r2, r5
   2ad14:	mov	sl, r3
   2ad18:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2ad1c:	subs	r2, r0, r6
   2ad20:	mov	ip, r0
   2ad24:	mov	r0, #0
   2ad28:	sbcs	r2, r1, r7
   2ad2c:	umull	r4, r2, r6, r5
   2ad30:	movwcc	r0, #1
   2ad34:	cmp	r0, #0
   2ad38:	mla	r2, r6, sl, r2
   2ad3c:	str	r0, [sp, #20]
   2ad40:	mvnne	r4, #0
   2ad44:	cmp	r0, #0
   2ad48:	mla	r2, r7, r5, r2
   2ad4c:	mov	r0, #0
   2ad50:	umull	lr, r3, r4, r5
   2ad54:	mvnne	r2, #0
   2ad58:	mla	r3, r4, sl, r3
   2ad5c:	mla	r6, r2, r5, r3
   2ad60:	subs	r3, ip, r4
   2ad64:	mov	r3, r1
   2ad68:	sbcs	r2, r1, r2
   2ad6c:	str	r3, [sp, #8]
   2ad70:	movwcc	r0, #1
   2ad74:	cmp	r0, #0
   2ad78:	str	r0, [sp, #16]
   2ad7c:	mov	r0, ip
   2ad80:	mvnne	lr, #0
   2ad84:	mvnne	r6, #0
   2ad88:	str	r0, [sp, #12]
   2ad8c:	subs	r2, ip, lr
   2ad90:	umull	r7, r4, lr, r5
   2ad94:	sbcs	r2, r1, r6
   2ad98:	mov	r2, #0
   2ad9c:	movwcc	r2, #1
   2ada0:	mla	r4, lr, sl, r4
   2ada4:	cmp	r2, #0
   2ada8:	mla	r6, r6, r5, r4
   2adac:	mov	r4, #0
   2adb0:	mvnne	r7, #0
   2adb4:	cmp	r2, #0
   2adb8:	umull	r1, ip, r7, r5
   2adbc:	mvnne	r6, #0
   2adc0:	mla	ip, r7, sl, ip
   2adc4:	subs	r7, r0, r7
   2adc8:	sbcs	r7, r3, r6
   2adcc:	mla	lr, r6, r5, ip
   2add0:	mov	ip, #0
   2add4:	movwcc	ip, #1
   2add8:	cmp	ip, #0
   2addc:	mvnne	r1, #0
   2ade0:	mvnne	lr, #0
   2ade4:	subs	r7, r0, r1
   2ade8:	sbcs	r7, r3, lr
   2adec:	umull	r0, r7, r1, r5
   2adf0:	movwcc	r4, #1
   2adf4:	cmp	r4, #0
   2adf8:	mla	r1, r1, sl, r7
   2adfc:	mvnne	r0, #0
   2ae00:	cmp	r4, #0
   2ae04:	mla	r1, lr, r5, r1
   2ae08:	umull	r6, r3, r0, r5
   2ae0c:	mvnne	r1, #0
   2ae10:	mla	r3, r0, sl, r3
   2ae14:	mla	r7, r1, r5, r3
   2ae18:	ldr	r3, [sp, #12]
   2ae1c:	subs	r0, r3, r0
   2ae20:	ldr	r0, [sp, #8]
   2ae24:	ldr	r3, [sp, #16]
   2ae28:	sbcs	r0, r0, r1
   2ae2c:	mov	r0, #0
   2ae30:	movwcc	r0, #1
   2ae34:	cmp	r0, #0
   2ae38:	mov	r1, r0
   2ae3c:	ldr	r0, [sp, #20]
   2ae40:	mvnne	r7, #0
   2ae44:	mvnne	r6, #0
   2ae48:	orr	r0, r0, r3
   2ae4c:	orr	r0, r0, r2
   2ae50:	orr	r0, r0, ip
   2ae54:	orr	r0, r0, r4
   2ae58:	orr	r3, r0, r1
   2ae5c:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2ae60:	mvn	r0, #0
   2ae64:	mvn	r1, #0
   2ae68:	mov	r2, r5
   2ae6c:	mov	sl, r3
   2ae70:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2ae74:	umull	r3, r2, r6, r5
   2ae78:	mov	lr, r1
   2ae7c:	mov	r1, r0
   2ae80:	mla	r2, r6, sl, r2
   2ae84:	subs	r6, r0, r6
   2ae88:	mov	r0, #0
   2ae8c:	sbcs	r6, lr, r7
   2ae90:	mla	r2, r7, r5, r2
   2ae94:	movwcc	r0, #1
   2ae98:	cmp	r0, #0
   2ae9c:	str	r0, [sp, #20]
   2aea0:	mov	r0, r1
   2aea4:	mvnne	r3, #0
   2aea8:	mvnne	r2, #0
   2aeac:	str	r0, [sp, #16]
   2aeb0:	subs	r4, r1, r3
   2aeb4:	umull	r7, ip, r3, r5
   2aeb8:	sbcs	r4, lr, r2
   2aebc:	mov	r4, #0
   2aec0:	movwcc	r4, #1
   2aec4:	mla	r3, r3, sl, ip
   2aec8:	mov	ip, #0
   2aecc:	cmp	r4, #0
   2aed0:	mla	r2, r2, r5, r3
   2aed4:	mvnne	r7, #0
   2aed8:	cmp	r4, #0
   2aedc:	umull	r1, r6, r7, r5
   2aee0:	mvnne	r2, #0
   2aee4:	mla	r6, r7, sl, r6
   2aee8:	mla	r3, r2, r5, r6
   2aeec:	subs	r6, r0, r7
   2aef0:	sbcs	r2, lr, r2
   2aef4:	mov	r2, #0
   2aef8:	movwcc	ip, #1
   2aefc:	cmp	ip, #0
   2af00:	mvnne	r1, #0
   2af04:	mvnne	r3, #0
   2af08:	subs	r6, r0, r1
   2af0c:	sbcs	r6, lr, r3
   2af10:	umull	r0, r6, r1, r5
   2af14:	movwcc	r2, #1
   2af18:	cmp	r2, #0
   2af1c:	mvnne	r0, #0
   2af20:	cmp	r2, #0
   2af24:	str	r6, [sp, #12]
   2af28:	umull	r6, r7, r0, r5
   2af2c:	mla	r7, r0, sl, r7
   2af30:	str	r7, [sp, #8]
   2af34:	ldr	r7, [sp, #12]
   2af38:	mla	r1, r1, sl, r7
   2af3c:	mla	r1, r3, r5, r1
   2af40:	ldr	r3, [sp, #8]
   2af44:	mvnne	r1, #0
   2af48:	mla	r7, r1, r5, r3
   2af4c:	ldr	r3, [sp, #16]
   2af50:	subs	r0, r3, r0
   2af54:	sbcs	r0, lr, r1
   2af58:	mov	r0, #0
   2af5c:	movwcc	r0, #1
   2af60:	cmp	r0, #0
   2af64:	mov	r1, r0
   2af68:	ldr	r0, [sp, #20]
   2af6c:	mvnne	r7, #0
   2af70:	mvnne	r6, #0
   2af74:	orr	r0, r0, r4
   2af78:	orr	r0, r0, ip
   2af7c:	orr	r0, r0, r2
   2af80:	orr	r3, r0, r1
   2af84:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2af88:	mvn	r0, #0
   2af8c:	mvn	r1, #0
   2af90:	mov	r2, r5
   2af94:	mov	sl, r3
   2af98:	bl	2b8c4 <__assert_fail@plt+0x1a164>
   2af9c:	mov	lr, r0
   2afa0:	subs	r0, r0, r6
   2afa4:	mov	r2, #0
   2afa8:	mov	ip, r1
   2afac:	str	sl, [sp, #24]
   2afb0:	sbcs	r0, r1, r7
   2afb4:	umull	r3, r1, r6, r5
   2afb8:	str	lr, [sp, #4]
   2afbc:	movwcc	r2, #1
   2afc0:	cmp	r2, #0
   2afc4:	mla	r6, r6, sl, r1
   2afc8:	mov	r1, #0
   2afcc:	str	r2, [sp, #20]
   2afd0:	mvnne	r3, #0
   2afd4:	cmp	r2, #0
   2afd8:	mla	r7, r7, r5, r6
   2afdc:	mov	r2, #0
   2afe0:	umull	r0, r4, r3, r5
   2afe4:	mvnne	r7, #0
   2afe8:	mla	r4, r3, sl, r4
   2afec:	subs	r3, lr, r3
   2aff0:	sbcs	r3, ip, r7
   2aff4:	mla	r4, r7, r5, r4
   2aff8:	movwcc	r1, #1
   2affc:	cmp	r1, #0
   2b000:	str	r1, [sp, #16]
   2b004:	mvnne	r0, #0
   2b008:	mvnne	r4, #0
   2b00c:	subs	r3, lr, r0
   2b010:	sbcs	r3, ip, r4
   2b014:	umull	r6, r3, r0, r5
   2b018:	movwcc	r2, #1
   2b01c:	cmp	r2, #0
   2b020:	mla	r0, r0, sl, r3
   2b024:	str	r2, [sp, #12]
   2b028:	mvnne	r6, #0
   2b02c:	cmp	r2, #0
   2b030:	mla	r0, r4, r5, r0
   2b034:	ldr	r4, [sp, #24]
   2b038:	umull	r1, r7, r6, r5
   2b03c:	mvnne	r0, #0
   2b040:	subs	r3, lr, r6
   2b044:	mov	r3, ip
   2b048:	str	r3, [sp]
   2b04c:	mla	r7, r6, sl, r7
   2b050:	mla	r7, r0, r5, r7
   2b054:	sbcs	r0, ip, r0
   2b058:	mov	r0, #0
   2b05c:	movwcc	r0, #1
   2b060:	cmp	r0, #0
   2b064:	str	r0, [sp, #8]
   2b068:	mvnne	r1, #0
   2b06c:	mvnne	r7, #0
   2b070:	subs	r0, lr, r1
   2b074:	sbcs	r0, ip, r7
   2b078:	mov	ip, #0
   2b07c:	umull	r6, r0, r1, r5
   2b080:	movwcc	ip, #1
   2b084:	cmp	ip, #0
   2b088:	mla	r1, r1, r4, r0
   2b08c:	mov	r0, lr
   2b090:	mvnne	r6, #0
   2b094:	cmp	ip, #0
   2b098:	mla	r1, r7, r5, r1
   2b09c:	umull	r2, sl, r6, r5
   2b0a0:	mvnne	r1, #0
   2b0a4:	mla	sl, r6, r4, sl
   2b0a8:	subs	r6, lr, r6
   2b0ac:	mov	lr, #0
   2b0b0:	mla	r7, r1, r5, sl
   2b0b4:	sbcs	r1, r3, r1
   2b0b8:	ldr	r1, [sp, #24]
   2b0bc:	movwcc	lr, #1
   2b0c0:	cmp	lr, #0
   2b0c4:	mvnne	r2, #0
   2b0c8:	mvnne	r7, #0
   2b0cc:	subs	r6, r0, r2
   2b0d0:	umull	r0, sl, r2, r5
   2b0d4:	sbcs	r6, r3, r7
   2b0d8:	mov	r3, #0
   2b0dc:	movwcc	r3, #1
   2b0e0:	mla	r2, r2, r1, sl
   2b0e4:	cmp	r3, #0
   2b0e8:	mla	r2, r7, r5, r2
   2b0ec:	mvnne	r0, #0
   2b0f0:	cmp	r3, #0
   2b0f4:	umull	r6, r4, r0, r5
   2b0f8:	mvnne	r2, #0
   2b0fc:	mla	r4, r0, r1, r4
   2b100:	ldr	r1, [sp, #4]
   2b104:	mla	r7, r2, r5, r4
   2b108:	ldr	r5, [sp, #16]
   2b10c:	subs	r0, r1, r0
   2b110:	ldr	r0, [sp]
   2b114:	sbcs	r0, r0, r2
   2b118:	mov	r0, #0
   2b11c:	movwcc	r0, #1
   2b120:	cmp	r0, #0
   2b124:	mov	r2, r0
   2b128:	ldr	r0, [sp, #20]
   2b12c:	mvnne	r7, #0
   2b130:	mvnne	r6, #0
   2b134:	orr	r0, r0, r5
   2b138:	ldr	r5, [sp, #12]
   2b13c:	orr	r0, r0, r5
   2b140:	ldr	r5, [sp, #8]
   2b144:	orr	r0, r0, r5
   2b148:	orr	r0, r0, ip
   2b14c:	orr	r0, r0, lr
   2b150:	orr	r0, r0, r3
   2b154:	orr	r0, r0, r2
   2b158:	and	r3, r0, #1
   2b15c:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2b160:	mov	r1, #0
   2b164:	lsl	r2, r7, #9
   2b168:	lsl	r0, r6, #9
   2b16c:	lsr	r3, r7, #23
   2b170:	cmp	r1, r7, lsr #23
   2b174:	orr	r2, r2, r6, lsr #23
   2b178:	mvnne	r0, #0
   2b17c:	movwne	r3, #1
   2b180:	cmp	r1, r7, lsr #23
   2b184:	mvnne	r2, #0
   2b188:	mov	r6, r0
   2b18c:	mov	r7, r2
   2b190:	b	2b1b8 <__assert_fail@plt+0x19a58>
   2b194:	lsl	r1, r7, #1
   2b198:	cmp	r7, #0
   2b19c:	lsl	r0, r6, #1
   2b1a0:	lsr	r3, r7, #31
   2b1a4:	orr	r1, r1, r6, lsr #31
   2b1a8:	mvnmi	r0, #0
   2b1ac:	mvnmi	r1, #0
   2b1b0:	mov	r6, r0
   2b1b4:	mov	r7, r1
   2b1b8:	ldr	r1, [sp, #32]
   2b1bc:	ldr	r2, [sp, #28]
   2b1c0:	orr	r8, r3, r8
   2b1c4:	add	r0, r1, r2
   2b1c8:	str	r0, [r9]
   2b1cc:	ldrb	r0, [r1, r2]
   2b1d0:	cmp	r0, #0
   2b1d4:	orrne	r8, r8, #2
   2b1d8:	ldr	r0, [sp, #36]	; 0x24
   2b1dc:	strd	r6, [r0]
   2b1e0:	mov	r0, r8
   2b1e4:	sub	sp, fp, #28
   2b1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1ec:	movw	r0, #52497	; 0xcd11
   2b1f0:	movw	r1, #52535	; 0xcd37
   2b1f4:	movw	r3, #52629	; 0xcd95
   2b1f8:	mov	r2, #85	; 0x55
   2b1fc:	movt	r0, #2
   2b200:	movt	r1, #2
   2b204:	movt	r3, #2
   2b208:	bl	11760 <__assert_fail@plt>
   2b20c:	clz	r2, r1
   2b210:	clz	r3, r0
   2b214:	lsr	r2, r2, #5
   2b218:	lsr	r3, r3, #5
   2b21c:	orrs	r2, r3, r2
   2b220:	movwne	r1, #1
   2b224:	movwne	r0, #1
   2b228:	cmp	r1, #0
   2b22c:	beq	2b25c <__assert_fail@plt+0x19afc>
   2b230:	mvn	r2, #-2147483648	; 0x80000000
   2b234:	udiv	r2, r2, r1
   2b238:	cmp	r2, r0
   2b23c:	bcs	2b25c <__assert_fail@plt+0x19afc>
   2b240:	push	{fp, lr}
   2b244:	mov	fp, sp
   2b248:	bl	11640 <__errno_location@plt>
   2b24c:	mov	r1, #12
   2b250:	str	r1, [r0]
   2b254:	mov	r0, #0
   2b258:	pop	{fp, pc}
   2b25c:	b	113d0 <calloc@plt>
   2b260:	cmp	r0, #0
   2b264:	movweq	r0, #1
   2b268:	cmn	r0, #1
   2b26c:	ble	2b274 <__assert_fail@plt+0x19b14>
   2b270:	b	115a4 <malloc@plt>
   2b274:	push	{fp, lr}
   2b278:	mov	fp, sp
   2b27c:	bl	11640 <__errno_location@plt>
   2b280:	mov	r1, #12
   2b284:	str	r1, [r0]
   2b288:	mov	r0, #0
   2b28c:	pop	{fp, pc}
   2b290:	push	{fp, lr}
   2b294:	mov	fp, sp
   2b298:	cmp	r0, #0
   2b29c:	beq	2b2b8 <__assert_fail@plt+0x19b58>
   2b2a0:	cmp	r1, #0
   2b2a4:	beq	2b2c4 <__assert_fail@plt+0x19b64>
   2b2a8:	cmn	r1, #1
   2b2ac:	ble	2b2d0 <__assert_fail@plt+0x19b70>
   2b2b0:	pop	{fp, lr}
   2b2b4:	b	114fc <realloc@plt>
   2b2b8:	mov	r0, r1
   2b2bc:	pop	{fp, lr}
   2b2c0:	b	2b260 <__assert_fail@plt+0x19b00>
   2b2c4:	bl	141b8 <__assert_fail@plt+0x2a58>
   2b2c8:	mov	r0, #0
   2b2cc:	pop	{fp, pc}
   2b2d0:	bl	11640 <__errno_location@plt>
   2b2d4:	mov	r1, #12
   2b2d8:	str	r1, [r0]
   2b2dc:	mov	r0, #0
   2b2e0:	pop	{fp, pc}
   2b2e4:	push	{r4, r5, r6, sl, fp, lr}
   2b2e8:	add	fp, sp, #16
   2b2ec:	mov	r4, r0
   2b2f0:	bl	11574 <__fpending@plt>
   2b2f4:	ldr	r6, [r4]
   2b2f8:	mov	r5, r0
   2b2fc:	mov	r0, r4
   2b300:	bl	13fa8 <__assert_fail@plt+0x2848>
   2b304:	tst	r6, #32
   2b308:	bne	2b340 <__assert_fail@plt+0x19be0>
   2b30c:	cmp	r0, #0
   2b310:	mov	r4, r0
   2b314:	mvnne	r4, #0
   2b318:	cmp	r5, #0
   2b31c:	bne	2b34c <__assert_fail@plt+0x19bec>
   2b320:	cmp	r0, #0
   2b324:	beq	2b34c <__assert_fail@plt+0x19bec>
   2b328:	bl	11640 <__errno_location@plt>
   2b32c:	ldr	r0, [r0]
   2b330:	subs	r4, r0, #9
   2b334:	mvnne	r4, #0
   2b338:	mov	r0, r4
   2b33c:	pop	{r4, r5, r6, sl, fp, pc}
   2b340:	mvn	r4, #0
   2b344:	cmp	r0, #0
   2b348:	beq	2b354 <__assert_fail@plt+0x19bf4>
   2b34c:	mov	r0, r4
   2b350:	pop	{r4, r5, r6, sl, fp, pc}
   2b354:	bl	11640 <__errno_location@plt>
   2b358:	mov	r1, #0
   2b35c:	str	r1, [r0]
   2b360:	mov	r0, r4
   2b364:	pop	{r4, r5, r6, sl, fp, pc}
   2b368:	push	{r4, r5, r6, r7, fp, lr}
   2b36c:	add	fp, sp, #16
   2b370:	mov	r4, r0
   2b374:	ldr	r0, [r0, #4]
   2b378:	mov	r5, r1
   2b37c:	cmp	r0, r1
   2b380:	bcs	2b3b4 <__assert_fail@plt+0x19c54>
   2b384:	mov	r6, r3
   2b388:	cmp	r3, #0
   2b38c:	beq	2b3c0 <__assert_fail@plt+0x19c60>
   2b390:	mvn	r0, #0
   2b394:	udiv	r0, r0, r6
   2b398:	cmp	r0, r5
   2b39c:	bcs	2b3c0 <__assert_fail@plt+0x19c60>
   2b3a0:	bl	11640 <__errno_location@plt>
   2b3a4:	mov	r1, #12
   2b3a8:	str	r1, [r0]
   2b3ac:	mov	r0, #0
   2b3b0:	pop	{r4, r5, r6, r7, fp, pc}
   2b3b4:	mov	r0, #1
   2b3b8:	str	r5, [r4]
   2b3bc:	pop	{r4, r5, r6, r7, fp, pc}
   2b3c0:	ldr	r0, [r4, #8]
   2b3c4:	mul	r1, r6, r5
   2b3c8:	cmp	r0, r2
   2b3cc:	beq	2b3e4 <__assert_fail@plt+0x19c84>
   2b3d0:	bl	2b290 <__assert_fail@plt+0x19b30>
   2b3d4:	mov	r7, r0
   2b3d8:	cmp	r0, #0
   2b3dc:	bne	2b414 <__assert_fail@plt+0x19cb4>
   2b3e0:	b	2b424 <__assert_fail@plt+0x19cc4>
   2b3e4:	mov	r0, r1
   2b3e8:	bl	2b260 <__assert_fail@plt+0x19b00>
   2b3ec:	cmp	r0, #0
   2b3f0:	beq	2b424 <__assert_fail@plt+0x19cc4>
   2b3f4:	ldr	r1, [r4, #8]
   2b3f8:	mov	r7, r0
   2b3fc:	cmp	r1, #0
   2b400:	beq	2b414 <__assert_fail@plt+0x19cb4>
   2b404:	ldr	r0, [r4]
   2b408:	mul	r2, r0, r6
   2b40c:	mov	r0, r7
   2b410:	bl	11484 <memcpy@plt>
   2b414:	mov	r0, #1
   2b418:	str	r5, [r4]
   2b41c:	stmib	r4, {r5, r7}
   2b420:	pop	{r4, r5, r6, r7, fp, pc}
   2b424:	mov	r0, #0
   2b428:	pop	{r4, r5, r6, r7, fp, pc}
   2b42c:	sub	sp, sp, #8
   2b430:	push	{r4, r5, r6, r7, fp, lr}
   2b434:	add	fp, sp, #16
   2b438:	sub	sp, sp, #8
   2b43c:	mov	r5, r0
   2b440:	add	r0, fp, #8
   2b444:	cmp	r1, #11
   2b448:	str	r2, [fp, #8]
   2b44c:	str	r3, [fp, #12]
   2b450:	str	r0, [sp, #4]
   2b454:	bhi	2b490 <__assert_fail@plt+0x19d30>
   2b458:	mov	r0, #1
   2b45c:	movw	r2, #1300	; 0x514
   2b460:	tst	r2, r0, lsl r1
   2b464:	bne	2b550 <__assert_fail@plt+0x19df0>
   2b468:	movw	r2, #2570	; 0xa0a
   2b46c:	tst	r2, r0, lsl r1
   2b470:	bne	2b4b8 <__assert_fail@plt+0x19d58>
   2b474:	cmp	r1, #0
   2b478:	bne	2b490 <__assert_fail@plt+0x19d30>
   2b47c:	ldr	r0, [sp, #4]
   2b480:	add	r1, r0, #4
   2b484:	str	r1, [sp, #4]
   2b488:	mov	r1, #0
   2b48c:	b	2b55c <__assert_fail@plt+0x19dfc>
   2b490:	sub	r0, r1, #1024	; 0x400
   2b494:	cmp	r0, #10
   2b498:	bhi	2b550 <__assert_fail@plt+0x19df0>
   2b49c:	mov	r2, #1
   2b4a0:	movw	r3, #645	; 0x285
   2b4a4:	tst	r3, r2, lsl r0
   2b4a8:	bne	2b550 <__assert_fail@plt+0x19df0>
   2b4ac:	movw	r3, #1282	; 0x502
   2b4b0:	tst	r3, r2, lsl r0
   2b4b4:	beq	2b4c4 <__assert_fail@plt+0x19d64>
   2b4b8:	mov	r0, r5
   2b4bc:	bl	116c4 <fcntl64@plt>
   2b4c0:	b	2b568 <__assert_fail@plt+0x19e08>
   2b4c4:	cmp	r0, #6
   2b4c8:	bne	2b550 <__assert_fail@plt+0x19df0>
   2b4cc:	ldr	r0, [sp, #4]
   2b4d0:	movw	r7, #54256	; 0xd3f0
   2b4d4:	movt	r7, #3
   2b4d8:	add	r1, r0, #4
   2b4dc:	str	r1, [sp, #4]
   2b4e0:	ldr	r6, [r0]
   2b4e4:	ldr	r0, [r7]
   2b4e8:	cmp	r0, #0
   2b4ec:	bmi	2b58c <__assert_fail@plt+0x19e2c>
   2b4f0:	mov	r0, r5
   2b4f4:	movw	r1, #1030	; 0x406
   2b4f8:	mov	r2, r6
   2b4fc:	bl	116c4 <fcntl64@plt>
   2b500:	mov	r4, r0
   2b504:	cmn	r0, #1
   2b508:	bgt	2b580 <__assert_fail@plt+0x19e20>
   2b50c:	bl	11640 <__errno_location@plt>
   2b510:	ldr	r0, [r0]
   2b514:	cmp	r0, #22
   2b518:	bne	2b580 <__assert_fail@plt+0x19e20>
   2b51c:	mov	r0, r5
   2b520:	mov	r1, #0
   2b524:	mov	r2, r6
   2b528:	bl	116c4 <fcntl64@plt>
   2b52c:	mov	r4, r0
   2b530:	cmp	r0, #0
   2b534:	bmi	2b56c <__assert_fail@plt+0x19e0c>
   2b538:	mvn	r0, #0
   2b53c:	str	r0, [r7]
   2b540:	mov	r0, #1
   2b544:	cmp	r0, #0
   2b548:	bne	2b5b8 <__assert_fail@plt+0x19e58>
   2b54c:	b	2b56c <__assert_fail@plt+0x19e0c>
   2b550:	ldr	r0, [sp, #4]
   2b554:	add	r2, r0, #4
   2b558:	str	r2, [sp, #4]
   2b55c:	ldr	r2, [r0]
   2b560:	mov	r0, r5
   2b564:	bl	116c4 <fcntl64@plt>
   2b568:	mov	r4, r0
   2b56c:	mov	r0, r4
   2b570:	sub	sp, fp, #16
   2b574:	pop	{r4, r5, r6, r7, fp, lr}
   2b578:	add	sp, sp, #8
   2b57c:	bx	lr
   2b580:	mov	r0, #1
   2b584:	str	r0, [r7]
   2b588:	b	2b56c <__assert_fail@plt+0x19e0c>
   2b58c:	mov	r0, r5
   2b590:	mov	r1, #0
   2b594:	mov	r2, r6
   2b598:	bl	116c4 <fcntl64@plt>
   2b59c:	mov	r4, r0
   2b5a0:	ldr	r0, [r7]
   2b5a4:	add	r0, r0, #1
   2b5a8:	clz	r0, r0
   2b5ac:	lsr	r0, r0, #5
   2b5b0:	cmp	r0, #0
   2b5b4:	beq	2b56c <__assert_fail@plt+0x19e0c>
   2b5b8:	cmp	r4, #0
   2b5bc:	bmi	2b56c <__assert_fail@plt+0x19e0c>
   2b5c0:	mov	r0, r4
   2b5c4:	mov	r1, #1
   2b5c8:	bl	116c4 <fcntl64@plt>
   2b5cc:	cmp	r0, #0
   2b5d0:	bmi	2b5ec <__assert_fail@plt+0x19e8c>
   2b5d4:	orr	r2, r0, #1
   2b5d8:	mov	r0, r4
   2b5dc:	mov	r1, #2
   2b5e0:	bl	116c4 <fcntl64@plt>
   2b5e4:	cmn	r0, #1
   2b5e8:	bne	2b56c <__assert_fail@plt+0x19e0c>
   2b5ec:	bl	11640 <__errno_location@plt>
   2b5f0:	ldr	r6, [r0]
   2b5f4:	mov	r5, r0
   2b5f8:	mov	r0, r4
   2b5fc:	bl	11748 <close@plt>
   2b600:	str	r6, [r5]
   2b604:	mvn	r4, #0
   2b608:	b	2b56c <__assert_fail@plt+0x19e0c>
   2b60c:	push	{fp, lr}
   2b610:	mov	fp, sp
   2b614:	mov	r0, #14
   2b618:	bl	116f4 <nl_langinfo@plt>
   2b61c:	movw	r1, #49219	; 0xc043
   2b620:	cmp	r0, #0
   2b624:	movt	r1, #2
   2b628:	movne	r1, r0
   2b62c:	movw	r0, #52708	; 0xcde4
   2b630:	ldrb	r2, [r1]
   2b634:	movt	r0, #2
   2b638:	cmp	r2, #0
   2b63c:	movne	r0, r1
   2b640:	pop	{fp, pc}
   2b644:	push	{r4, r5, r6, r7, fp, lr}
   2b648:	add	fp, sp, #16
   2b64c:	sub	sp, sp, #8
   2b650:	cmp	r0, #0
   2b654:	add	r5, sp, #4
   2b658:	mov	r7, r2
   2b65c:	mov	r4, r1
   2b660:	movne	r5, r0
   2b664:	mov	r0, r5
   2b668:	bl	11580 <mbrtowc@plt>
   2b66c:	mov	r6, r0
   2b670:	cmp	r7, #0
   2b674:	beq	2b69c <__assert_fail@plt+0x19f3c>
   2b678:	cmn	r6, #2
   2b67c:	bcc	2b69c <__assert_fail@plt+0x19f3c>
   2b680:	mov	r0, #0
   2b684:	bl	2b6e4 <__assert_fail@plt+0x19f84>
   2b688:	cmp	r0, #0
   2b68c:	bne	2b69c <__assert_fail@plt+0x19f3c>
   2b690:	ldrb	r0, [r4]
   2b694:	mov	r6, #1
   2b698:	str	r0, [r5]
   2b69c:	mov	r0, r6
   2b6a0:	sub	sp, fp, #16
   2b6a4:	pop	{r4, r5, r6, r7, fp, pc}
   2b6a8:	cmp	r2, #0
   2b6ac:	beq	2b6dc <__assert_fail@plt+0x19f7c>
   2b6b0:	mvn	r3, #0
   2b6b4:	udiv	r3, r3, r2
   2b6b8:	cmp	r3, r1
   2b6bc:	bcs	2b6dc <__assert_fail@plt+0x19f7c>
   2b6c0:	push	{fp, lr}
   2b6c4:	mov	fp, sp
   2b6c8:	bl	11640 <__errno_location@plt>
   2b6cc:	mov	r1, #12
   2b6d0:	str	r1, [r0]
   2b6d4:	mov	r0, #0
   2b6d8:	pop	{fp, pc}
   2b6dc:	mul	r1, r2, r1
   2b6e0:	b	2b290 <__assert_fail@plt+0x19b30>
   2b6e4:	push	{r4, sl, fp, lr}
   2b6e8:	add	fp, sp, #8
   2b6ec:	sub	sp, sp, #264	; 0x108
   2b6f0:	add	r1, sp, #7
   2b6f4:	movw	r2, #257	; 0x101
   2b6f8:	bl	2b750 <__assert_fail@plt+0x19ff0>
   2b6fc:	mov	r4, #0
   2b700:	cmp	r0, #0
   2b704:	bne	2b744 <__assert_fail@plt+0x19fe4>
   2b708:	movw	r1, #52714	; 0xcdea
   2b70c:	add	r0, sp, #7
   2b710:	mov	r2, #2
   2b714:	movt	r1, #2
   2b718:	bl	1161c <bcmp@plt>
   2b71c:	cmp	r0, #0
   2b720:	beq	2b744 <__assert_fail@plt+0x19fe4>
   2b724:	movw	r1, #52716	; 0xcdec
   2b728:	add	r0, sp, #7
   2b72c:	mov	r2, #6
   2b730:	movt	r1, #2
   2b734:	bl	1161c <bcmp@plt>
   2b738:	cmp	r0, #0
   2b73c:	mov	r4, r0
   2b740:	movwne	r4, #1
   2b744:	mov	r0, r4
   2b748:	sub	sp, fp, #8
   2b74c:	pop	{r4, sl, fp, pc}
   2b750:	push	{r4, r5, r6, r7, fp, lr}
   2b754:	add	fp, sp, #16
   2b758:	mov	r4, r1
   2b75c:	mov	r1, #0
   2b760:	mov	r6, r2
   2b764:	bl	116d0 <setlocale@plt>
   2b768:	cmp	r0, #0
   2b76c:	beq	2b79c <__assert_fail@plt+0x1a03c>
   2b770:	mov	r7, r0
   2b774:	bl	11628 <strlen@plt>
   2b778:	cmp	r0, r6
   2b77c:	bcs	2b7b8 <__assert_fail@plt+0x1a058>
   2b780:	add	r2, r0, #1
   2b784:	mov	r0, r4
   2b788:	mov	r1, r7
   2b78c:	bl	11484 <memcpy@plt>
   2b790:	mov	r5, #0
   2b794:	mov	r0, r5
   2b798:	pop	{r4, r5, r6, r7, fp, pc}
   2b79c:	mov	r5, #22
   2b7a0:	cmp	r6, #0
   2b7a4:	beq	2b7e0 <__assert_fail@plt+0x1a080>
   2b7a8:	mov	r0, #0
   2b7ac:	strb	r0, [r4]
   2b7b0:	mov	r0, r5
   2b7b4:	pop	{r4, r5, r6, r7, fp, pc}
   2b7b8:	mov	r5, #34	; 0x22
   2b7bc:	cmp	r6, #0
   2b7c0:	beq	2b7e0 <__assert_fail@plt+0x1a080>
   2b7c4:	sub	r6, r6, #1
   2b7c8:	mov	r0, r4
   2b7cc:	mov	r1, r7
   2b7d0:	mov	r2, r6
   2b7d4:	bl	11484 <memcpy@plt>
   2b7d8:	mov	r0, #0
   2b7dc:	strb	r0, [r4, r6]
   2b7e0:	mov	r0, r5
   2b7e4:	pop	{r4, r5, r6, r7, fp, pc}
   2b7e8:	mov	r1, #0
   2b7ec:	b	116d0 <setlocale@plt>
   2b7f0:	cmp	r3, #0
   2b7f4:	cmpeq	r2, #0
   2b7f8:	bne	2b81c <__assert_fail@plt+0x1a0bc>
   2b7fc:	cmp	r1, #0
   2b800:	movlt	r1, #-2147483648	; 0x80000000
   2b804:	movlt	r0, #0
   2b808:	blt	2b818 <__assert_fail@plt+0x1a0b8>
   2b80c:	cmpeq	r0, #0
   2b810:	mvnne	r1, #-2147483648	; 0x80000000
   2b814:	mvnne	r0, #0
   2b818:	b	2b900 <__assert_fail@plt+0x1a1a0>
   2b81c:	sub	sp, sp, #8
   2b820:	push	{sp, lr}
   2b824:	cmp	r1, #0
   2b828:	blt	2b848 <__assert_fail@plt+0x1a0e8>
   2b82c:	cmp	r3, #0
   2b830:	blt	2b87c <__assert_fail@plt+0x1a11c>
   2b834:	bl	2b910 <__assert_fail@plt+0x1a1b0>
   2b838:	ldr	lr, [sp, #4]
   2b83c:	add	sp, sp, #8
   2b840:	pop	{r2, r3}
   2b844:	bx	lr
   2b848:	rsbs	r0, r0, #0
   2b84c:	sbc	r1, r1, r1, lsl #1
   2b850:	cmp	r3, #0
   2b854:	blt	2b8a0 <__assert_fail@plt+0x1a140>
   2b858:	bl	2b910 <__assert_fail@plt+0x1a1b0>
   2b85c:	ldr	lr, [sp, #4]
   2b860:	add	sp, sp, #8
   2b864:	pop	{r2, r3}
   2b868:	rsbs	r0, r0, #0
   2b86c:	sbc	r1, r1, r1, lsl #1
   2b870:	rsbs	r2, r2, #0
   2b874:	sbc	r3, r3, r3, lsl #1
   2b878:	bx	lr
   2b87c:	rsbs	r2, r2, #0
   2b880:	sbc	r3, r3, r3, lsl #1
   2b884:	bl	2b910 <__assert_fail@plt+0x1a1b0>
   2b888:	ldr	lr, [sp, #4]
   2b88c:	add	sp, sp, #8
   2b890:	pop	{r2, r3}
   2b894:	rsbs	r0, r0, #0
   2b898:	sbc	r1, r1, r1, lsl #1
   2b89c:	bx	lr
   2b8a0:	rsbs	r2, r2, #0
   2b8a4:	sbc	r3, r3, r3, lsl #1
   2b8a8:	bl	2b910 <__assert_fail@plt+0x1a1b0>
   2b8ac:	ldr	lr, [sp, #4]
   2b8b0:	add	sp, sp, #8
   2b8b4:	pop	{r2, r3}
   2b8b8:	rsbs	r2, r2, #0
   2b8bc:	sbc	r3, r3, r3, lsl #1
   2b8c0:	bx	lr
   2b8c4:	cmp	r3, #0
   2b8c8:	cmpeq	r2, #0
   2b8cc:	bne	2b8e4 <__assert_fail@plt+0x1a184>
   2b8d0:	cmp	r1, #0
   2b8d4:	cmpeq	r0, #0
   2b8d8:	mvnne	r1, #0
   2b8dc:	mvnne	r0, #0
   2b8e0:	b	2b900 <__assert_fail@plt+0x1a1a0>
   2b8e4:	sub	sp, sp, #8
   2b8e8:	push	{sp, lr}
   2b8ec:	bl	2b910 <__assert_fail@plt+0x1a1b0>
   2b8f0:	ldr	lr, [sp, #4]
   2b8f4:	add	sp, sp, #8
   2b8f8:	pop	{r2, r3}
   2b8fc:	bx	lr
   2b900:	push	{r1, lr}
   2b904:	mov	r0, #8
   2b908:	bl	113f4 <raise@plt>
   2b90c:	pop	{r1, pc}
   2b910:	cmp	r1, r3
   2b914:	cmpeq	r0, r2
   2b918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b91c:	mov	r4, r0
   2b920:	movcc	r0, #0
   2b924:	mov	r5, r1
   2b928:	ldr	lr, [sp, #36]	; 0x24
   2b92c:	movcc	r1, r0
   2b930:	bcc	2ba2c <__assert_fail@plt+0x1a2cc>
   2b934:	cmp	r3, #0
   2b938:	clzeq	ip, r2
   2b93c:	clzne	ip, r3
   2b940:	addeq	ip, ip, #32
   2b944:	cmp	r5, #0
   2b948:	clzeq	r1, r4
   2b94c:	addeq	r1, r1, #32
   2b950:	clzne	r1, r5
   2b954:	sub	ip, ip, r1
   2b958:	sub	sl, ip, #32
   2b95c:	lsl	r9, r3, ip
   2b960:	rsb	fp, ip, #32
   2b964:	orr	r9, r9, r2, lsl sl
   2b968:	orr	r9, r9, r2, lsr fp
   2b96c:	lsl	r8, r2, ip
   2b970:	cmp	r5, r9
   2b974:	cmpeq	r4, r8
   2b978:	movcc	r0, #0
   2b97c:	movcc	r1, r0
   2b980:	bcc	2b99c <__assert_fail@plt+0x1a23c>
   2b984:	mov	r0, #1
   2b988:	subs	r4, r4, r8
   2b98c:	lsl	r1, r0, sl
   2b990:	orr	r1, r1, r0, lsr fp
   2b994:	lsl	r0, r0, ip
   2b998:	sbc	r5, r5, r9
   2b99c:	cmp	ip, #0
   2b9a0:	beq	2ba2c <__assert_fail@plt+0x1a2cc>
   2b9a4:	lsr	r6, r8, #1
   2b9a8:	orr	r6, r6, r9, lsl #31
   2b9ac:	lsr	r7, r9, #1
   2b9b0:	mov	r2, ip
   2b9b4:	b	2b9d8 <__assert_fail@plt+0x1a278>
   2b9b8:	subs	r3, r4, r6
   2b9bc:	sbc	r8, r5, r7
   2b9c0:	adds	r3, r3, r3
   2b9c4:	adc	r8, r8, r8
   2b9c8:	adds	r4, r3, #1
   2b9cc:	adc	r5, r8, #0
   2b9d0:	subs	r2, r2, #1
   2b9d4:	beq	2b9f4 <__assert_fail@plt+0x1a294>
   2b9d8:	cmp	r5, r7
   2b9dc:	cmpeq	r4, r6
   2b9e0:	bcs	2b9b8 <__assert_fail@plt+0x1a258>
   2b9e4:	adds	r4, r4, r4
   2b9e8:	adc	r5, r5, r5
   2b9ec:	subs	r2, r2, #1
   2b9f0:	bne	2b9d8 <__assert_fail@plt+0x1a278>
   2b9f4:	lsr	r3, r4, ip
   2b9f8:	orr	r3, r3, r5, lsl fp
   2b9fc:	lsr	r2, r5, ip
   2ba00:	orr	r3, r3, r5, lsr sl
   2ba04:	adds	r0, r0, r4
   2ba08:	mov	r4, r3
   2ba0c:	lsl	r3, r2, ip
   2ba10:	orr	r3, r3, r4, lsl sl
   2ba14:	lsl	ip, r4, ip
   2ba18:	orr	r3, r3, r4, lsr fp
   2ba1c:	adc	r1, r1, r5
   2ba20:	subs	r0, r0, ip
   2ba24:	mov	r5, r2
   2ba28:	sbc	r1, r1, r3
   2ba2c:	cmp	lr, #0
   2ba30:	strdne	r4, [lr]
   2ba34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ba3c:	mov	r7, r0
   2ba40:	ldr	r6, [pc, #72]	; 2ba90 <__assert_fail@plt+0x1a330>
   2ba44:	ldr	r5, [pc, #72]	; 2ba94 <__assert_fail@plt+0x1a334>
   2ba48:	add	r6, pc, r6
   2ba4c:	add	r5, pc, r5
   2ba50:	sub	r6, r6, r5
   2ba54:	mov	r8, r1
   2ba58:	mov	r9, r2
   2ba5c:	bl	11398 <pthread_mutex_unlock@plt-0x20>
   2ba60:	asrs	r6, r6, #2
   2ba64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ba68:	mov	r4, #0
   2ba6c:	add	r4, r4, #1
   2ba70:	ldr	r3, [r5], #4
   2ba74:	mov	r2, r9
   2ba78:	mov	r1, r8
   2ba7c:	mov	r0, r7
   2ba80:	blx	r3
   2ba84:	cmp	r6, r4
   2ba88:	bne	2ba6c <__assert_fail@plt+0x1a30c>
   2ba8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ba90:			; <UNDEFINED> instruction: 0x000114bc
   2ba94:			; <UNDEFINED> instruction: 0x000114b4
   2ba98:	bx	lr
   2ba9c:	ldr	r3, [pc, #12]	; 2bab0 <__assert_fail@plt+0x1a350>
   2baa0:	mov	r1, #0
   2baa4:	add	r3, pc, r3
   2baa8:	ldr	r2, [r3]
   2baac:	b	11664 <__cxa_atexit@plt>
   2bab0:	andeq	r1, r1, r8, lsr #13

Disassembly of section .fini:

0002bab4 <.fini>:
   2bab4:	push	{r3, lr}
   2bab8:	pop	{r3, pc}
