
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r9, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #102400	; 0x19000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #102400	; 0x19000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <realloc@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #102400	; 0x19000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <malloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #102400	; 0x19000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <__libc_start_main@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #102400	; 0x19000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__gmon_start__@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #102400	; 0x19000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <bcmp@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #102400	; 0x19000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #102400	; 0x19000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #102400	; 0x19000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #102400	; 0x19000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #102400	; 0x19000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #102400	; 0x19000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #102400	; 0x19000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #102400	; 0x19000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	1273c <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	sl, r1, ip, lsr r0
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	ldrdeq	r9, [r1], -ip
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12748 <__gmon_start__@plt>
   1280c:	andeq	r9, r1, r0, lsl #16
   12810:	andeq	r0, r0, r8, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	ip, r2, ip, asr r0
   12838:	andeq	ip, r2, ip, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	ip, r2, ip, asr r0
   12870:	andeq	ip, r2, ip, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	ip, r2, ip, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	1354c <flatcc_builder_init@@Base>
   128bc:	ldr	r1, [pc, #228]	; 129a8 <main@@Base+0x104>
   128c0:	mov	r0, r4
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	add	r1, pc, r1
   128d0:	bl	142f4 <flatcc_builder_start_buffer@@Base>
   128d4:	cmp	r0, #0
   128d8:	bne	128e8 <main@@Base+0x44>
   128dc:	add	r0, sp, #4
   128e0:	mov	r1, #36	; 0x24
   128e4:	bl	158d0 <flatcc_builder_start_table@@Base>
   128e8:	ldr	r1, [pc, #188]	; 129ac <main@@Base+0x108>
   128ec:	add	r0, sp, #4
   128f0:	add	r1, pc, r1
   128f4:	bl	17c08 <flatcc_builder_create_string_str@@Base>
   128f8:	cmp	r0, #0
   128fc:	beq	12918 <main@@Base+0x74>
   12900:	mov	r4, r0
   12904:	add	r0, sp, #4
   12908:	mov	r1, #3
   1290c:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   12910:	cmp	r0, #0
   12914:	strne	r4, [r0]
   12918:	ldr	r1, [pc, #144]	; 129b0 <main@@Base+0x10c>
   1291c:	add	r0, sp, #4
   12920:	mov	r2, #1
   12924:	add	r1, pc, r1
   12928:	bl	1626c <flatcc_builder_check_required@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12988 <main@@Base+0xe4>
   12934:	add	r4, sp, #4
   12938:	mov	r0, r4
   1293c:	bl	162f8 <flatcc_builder_end_table@@Base>
   12940:	mov	r1, r0
   12944:	mov	r0, r4
   12948:	bl	144f4 <flatcc_builder_end_buffer@@Base>
   1294c:	sub	r1, fp, #20
   12950:	mov	r0, r4
   12954:	bl	17f20 <flatcc_builder_get_direct_buffer@@Base>
   12958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1295c:	ldr	r2, [pc, #80]	; 129b4 <main@@Base+0x110>
   12960:	ldr	r3, [pc, #80]	; 129b8 <main@@Base+0x114>
   12964:	add	r2, pc, r2
   12968:	add	r3, pc, r3
   1296c:	bl	193b8 <flatcc_verify_table_as_root@@Base>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	138bc <flatcc_builder_clear@@Base>
   1297c:	mov	r0, r5
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, r7, fp, pc}
   12988:	ldr	r0, [pc, #44]	; 129bc <main@@Base+0x118>
   1298c:	ldr	r1, [pc, #44]	; 129c0 <main@@Base+0x11c>
   12990:	ldr	r3, [pc, #44]	; 129c4 <main@@Base+0x120>
   12994:	movw	r2, #2398	; 0x95e
   12998:	add	r0, pc, r0
   1299c:	add	r1, pc, r1
   129a0:	add	r3, pc, r3
   129a4:	bl	127a8 <__assert_fail@plt>
   129a8:	andeq	r7, r0, r2, lsl #15
   129ac:	andeq	r7, r0, r4, asr r7
   129b0:			; <UNDEFINED> instruction: 0x000078b4
   129b4:	andeq	r7, r0, sl, ror #13
   129b8:	andeq	r0, r0, r8, asr r0
   129bc:			; <UNDEFINED> instruction: 0x000076bb
   129c0:	andeq	r7, r0, r5, ror #14
   129c4:	ldrdeq	r7, [r0], -lr
   129c8:	push	{r4, r5, r6, r7, fp, lr}
   129cc:	add	fp, sp, #16
   129d0:	sub	sp, sp, #8
   129d4:	mov	r1, #0
   129d8:	mov	r2, #32
   129dc:	mov	r3, #16
   129e0:	mov	r4, r0
   129e4:	bl	187a0 <flatcc_verify_field@@Base>
   129e8:	cmp	r0, #0
   129ec:	bne	12df4 <main@@Base+0x550>
   129f0:	mov	r0, r4
   129f4:	mov	r1, #2
   129f8:	mov	r2, #2
   129fc:	mov	r3, #2
   12a00:	bl	187a0 <flatcc_verify_field@@Base>
   12a04:	cmp	r0, #0
   12a08:	bne	12df4 <main@@Base+0x550>
   12a0c:	mov	r0, r4
   12a10:	mov	r1, #1
   12a14:	mov	r2, #2
   12a18:	mov	r3, #2
   12a1c:	bl	187a0 <flatcc_verify_field@@Base>
   12a20:	cmp	r0, #0
   12a24:	bne	12df4 <main@@Base+0x550>
   12a28:	mov	r0, r4
   12a2c:	mov	r1, #3
   12a30:	mov	r2, #1
   12a34:	bl	18824 <flatcc_verify_string_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12df4 <main@@Base+0x550>
   12a40:	mov	r0, r4
   12a44:	mov	r1, #6
   12a48:	mov	r2, #1
   12a4c:	mov	r3, #1
   12a50:	mov	r5, #1
   12a54:	bl	187a0 <flatcc_verify_field@@Base>
   12a58:	cmp	r0, #0
   12a5c:	bne	12df4 <main@@Base+0x550>
   12a60:	mvn	r0, #0
   12a64:	mov	r1, #5
   12a68:	mov	r2, #0
   12a6c:	mov	r3, #1
   12a70:	str	r5, [sp]
   12a74:	str	r0, [sp, #4]
   12a78:	mov	r0, r4
   12a7c:	bl	18904 <flatcc_verify_vector_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	12df4 <main@@Base+0x550>
   12a88:	ldr	r3, [pc, #908]	; 12e1c <main@@Base+0x578>
   12a8c:	mov	r0, r4
   12a90:	mov	r1, #11
   12a94:	mov	r2, #0
   12a98:	add	r3, pc, r3
   12a9c:	bl	18cec <flatcc_verify_table_vector_field@@Base>
   12aa0:	cmp	r0, #0
   12aa4:	bne	12df4 <main@@Base+0x550>
   12aa8:	mov	r0, r4
   12aac:	mov	r1, #10
   12ab0:	mov	r2, #0
   12ab4:	bl	189fc <flatcc_verify_string_vector_field@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	12df4 <main@@Base+0x550>
   12ac0:	mov	r0, r4
   12ac4:	mov	r1, #28
   12ac8:	mov	r2, #0
   12acc:	bl	189fc <flatcc_verify_string_vector_field@@Base>
   12ad0:	cmp	r0, #0
   12ad4:	bne	12df4 <main@@Base+0x550>
   12ad8:	mvn	r0, #0
   12adc:	mov	r1, #1
   12ae0:	mov	r2, #0
   12ae4:	mov	r3, #1
   12ae8:	str	r1, [sp]
   12aec:	str	r0, [sp, #4]
   12af0:	mov	r0, r4
   12af4:	mov	r1, #24
   12af8:	bl	18904 <flatcc_verify_vector_field@@Base>
   12afc:	cmp	r0, #0
   12b00:	bne	12df4 <main@@Base+0x550>
   12b04:	mvn	r0, #-536870912	; 0xe0000000
   12b08:	mov	r1, #4
   12b0c:	mov	r2, #0
   12b10:	mov	r3, #8
   12b14:	str	r1, [sp]
   12b18:	str	r0, [sp, #4]
   12b1c:	mov	r0, r4
   12b20:	mov	r1, #29
   12b24:	bl	18904 <flatcc_verify_vector_field@@Base>
   12b28:	cmp	r0, #0
   12b2c:	bne	12df4 <main@@Base+0x550>
   12b30:	ldr	r5, [pc, #744]	; 12e20 <main@@Base+0x57c>
   12b34:	mov	r0, r4
   12b38:	mov	r1, #12
   12b3c:	mov	r2, #0
   12b40:	add	r5, pc, r5
   12b44:	mov	r3, r5
   12b48:	bl	18b84 <flatcc_verify_table_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12df4 <main@@Base+0x550>
   12b54:	ldr	r3, [pc, #712]	; 12e24 <main@@Base+0x580>
   12b58:	mov	r0, r4
   12b5c:	mov	r1, #8
   12b60:	mov	r2, #0
   12b64:	add	r3, pc, r3
   12b68:	bl	19b14 <flatcc_verify_union_field@@Base>
   12b6c:	cmp	r0, #0
   12b70:	bne	12df4 <main@@Base+0x550>
   12b74:	mvn	r6, #-1073741824	; 0xc0000000
   12b78:	mov	r7, #2
   12b7c:	mov	r0, r4
   12b80:	mov	r1, #9
   12b84:	mov	r2, #0
   12b88:	mov	r3, #4
   12b8c:	str	r7, [sp]
   12b90:	str	r6, [sp, #4]
   12b94:	bl	18904 <flatcc_verify_vector_field@@Base>
   12b98:	cmp	r0, #0
   12b9c:	bne	12df4 <main@@Base+0x550>
   12ba0:	mov	r0, r4
   12ba4:	mov	r1, #31
   12ba8:	mov	r2, #0
   12bac:	mov	r3, #4
   12bb0:	str	r7, [sp]
   12bb4:	str	r6, [sp, #4]
   12bb8:	bl	18904 <flatcc_verify_vector_field@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12df4 <main@@Base+0x550>
   12bc4:	mov	r0, #1
   12bc8:	mov	r1, #13
   12bcc:	mov	r2, #0
   12bd0:	mov	r3, #0
   12bd4:	stm	sp, {r0, r5}
   12bd8:	mov	r0, r4
   12bdc:	bl	197f4 <flatcc_verify_table_as_nested_root@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12df4 <main@@Base+0x550>
   12be8:	ldr	r3, [pc, #568]	; 12e28 <main@@Base+0x584>
   12bec:	mov	r0, r4
   12bf0:	mov	r1, #14
   12bf4:	mov	r2, #0
   12bf8:	add	r3, pc, r3
   12bfc:	bl	18b84 <flatcc_verify_table_field@@Base>
   12c00:	cmp	r0, #0
   12c04:	bne	12df4 <main@@Base+0x550>
   12c08:	mov	r0, r4
   12c0c:	mov	r1, #15
   12c10:	mov	r2, #1
   12c14:	mov	r3, #1
   12c18:	bl	187a0 <flatcc_verify_field@@Base>
   12c1c:	cmp	r0, #0
   12c20:	bne	12df4 <main@@Base+0x550>
   12c24:	mov	r0, r4
   12c28:	mov	r1, #16
   12c2c:	mov	r2, #4
   12c30:	mov	r3, #4
   12c34:	bl	187a0 <flatcc_verify_field@@Base>
   12c38:	cmp	r0, #0
   12c3c:	bne	12df4 <main@@Base+0x550>
   12c40:	mov	r0, r4
   12c44:	mov	r1, #17
   12c48:	mov	r2, #4
   12c4c:	mov	r3, #4
   12c50:	bl	187a0 <flatcc_verify_field@@Base>
   12c54:	cmp	r0, #0
   12c58:	bne	12df4 <main@@Base+0x550>
   12c5c:	mov	r0, r4
   12c60:	mov	r1, #18
   12c64:	mov	r2, #8
   12c68:	mov	r3, #8
   12c6c:	bl	187a0 <flatcc_verify_field@@Base>
   12c70:	cmp	r0, #0
   12c74:	bne	12df4 <main@@Base+0x550>
   12c78:	mov	r0, r4
   12c7c:	mov	r1, #19
   12c80:	mov	r2, #8
   12c84:	mov	r3, #8
   12c88:	bl	187a0 <flatcc_verify_field@@Base>
   12c8c:	cmp	r0, #0
   12c90:	bne	12df4 <main@@Base+0x550>
   12c94:	mov	r0, r4
   12c98:	mov	r1, #20
   12c9c:	mov	r2, #4
   12ca0:	mov	r3, #4
   12ca4:	bl	187a0 <flatcc_verify_field@@Base>
   12ca8:	cmp	r0, #0
   12cac:	bne	12df4 <main@@Base+0x550>
   12cb0:	mov	r0, r4
   12cb4:	mov	r1, #21
   12cb8:	mov	r2, #4
   12cbc:	mov	r3, #4
   12cc0:	bl	187a0 <flatcc_verify_field@@Base>
   12cc4:	cmp	r0, #0
   12cc8:	bne	12df4 <main@@Base+0x550>
   12ccc:	mov	r0, r4
   12cd0:	mov	r1, #22
   12cd4:	mov	r2, #8
   12cd8:	mov	r3, #8
   12cdc:	bl	187a0 <flatcc_verify_field@@Base>
   12ce0:	cmp	r0, #0
   12ce4:	bne	12df4 <main@@Base+0x550>
   12ce8:	mov	r0, r4
   12cec:	mov	r1, #23
   12cf0:	mov	r2, #8
   12cf4:	mov	r3, #8
   12cf8:	bl	187a0 <flatcc_verify_field@@Base>
   12cfc:	cmp	r0, #0
   12d00:	bne	12df4 <main@@Base+0x550>
   12d04:	mov	r0, r4
   12d08:	mov	r1, #25
   12d0c:	mov	r2, #4
   12d10:	mov	r3, #4
   12d14:	bl	187a0 <flatcc_verify_field@@Base>
   12d18:	cmp	r0, #0
   12d1c:	bne	12df4 <main@@Base+0x550>
   12d20:	mov	r0, r4
   12d24:	mov	r1, #26
   12d28:	mov	r2, #4
   12d2c:	mov	r3, #4
   12d30:	bl	187a0 <flatcc_verify_field@@Base>
   12d34:	cmp	r0, #0
   12d38:	bne	12df4 <main@@Base+0x550>
   12d3c:	mov	r0, r4
   12d40:	mov	r1, #27
   12d44:	mov	r2, #4
   12d48:	mov	r3, #4
   12d4c:	bl	187a0 <flatcc_verify_field@@Base>
   12d50:	cmp	r0, #0
   12d54:	bne	12df4 <main@@Base+0x550>
   12d58:	mvn	r0, #0
   12d5c:	mov	r1, #1
   12d60:	mov	r2, #0
   12d64:	mov	r3, #1
   12d68:	str	r1, [sp]
   12d6c:	str	r0, [sp, #4]
   12d70:	mov	r0, r4
   12d74:	mov	r1, #30
   12d78:	bl	18904 <flatcc_verify_vector_field@@Base>
   12d7c:	cmp	r0, #0
   12d80:	bne	12df4 <main@@Base+0x550>
   12d84:	mvn	r5, #-536870912	; 0xe0000000
   12d88:	mov	r6, #8
   12d8c:	mov	r0, r4
   12d90:	mov	r1, #32
   12d94:	mov	r2, #0
   12d98:	mov	r3, #8
   12d9c:	str	r6, [sp]
   12da0:	str	r5, [sp, #4]
   12da4:	bl	18904 <flatcc_verify_vector_field@@Base>
   12da8:	cmp	r0, #0
   12dac:	bne	12df4 <main@@Base+0x550>
   12db0:	mov	r0, r4
   12db4:	mov	r1, #33	; 0x21
   12db8:	mov	r2, #0
   12dbc:	mov	r3, #8
   12dc0:	str	r6, [sp]
   12dc4:	str	r5, [sp, #4]
   12dc8:	bl	18904 <flatcc_verify_vector_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12df4 <main@@Base+0x550>
   12dd4:	ldr	r3, [pc, #80]	; 12e2c <main@@Base+0x588>
   12dd8:	mov	r0, r4
   12ddc:	mov	r1, #34	; 0x22
   12de0:	mov	r2, #0
   12de4:	add	r3, pc, r3
   12de8:	bl	18b84 <flatcc_verify_table_field@@Base>
   12dec:	cmp	r0, #0
   12df0:	beq	12dfc <main@@Base+0x558>
   12df4:	sub	sp, fp, #16
   12df8:	pop	{r4, r5, r6, r7, fp, pc}
   12dfc:	ldr	r3, [pc, #44]	; 12e30 <main@@Base+0x58c>
   12e00:	mov	r0, r4
   12e04:	mov	r1, #35	; 0x23
   12e08:	mov	r2, #0
   12e0c:	add	r3, pc, r3
   12e10:	sub	sp, fp, #16
   12e14:	pop	{r4, r5, r6, r7, fp, lr}
   12e18:	b	18b84 <flatcc_verify_table_field@@Base>
   12e1c:			; <UNDEFINED> instruction: 0xffffff28
   12e20:			; <UNDEFINED> instruction: 0xfffffe80
   12e24:	andeq	r0, r0, r8, asr #5
   12e28:	andeq	r0, r0, r4, ror #4
   12e2c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12e30:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12e34:	ldrb	r1, [r0, #12]
   12e38:	sub	r1, r1, #1
   12e3c:	uxtb	r2, r1
   12e40:	cmp	r2, #3
   12e44:	movhi	r0, #0
   12e48:	bxhi	lr
   12e4c:	ldr	r2, [pc, #12]	; 12e60 <main@@Base+0x5bc>
   12e50:	sxtb	r1, r1
   12e54:	add	r2, pc, r2
   12e58:	ldr	r1, [r2, r1, lsl #2]
   12e5c:	b	18fc4 <flatcc_verify_union_table@@Base>
   12e60:	andeq	r9, r1, r0, lsl r0
   12e64:	push	{r4, sl, fp, lr}
   12e68:	add	fp, sp, #8
   12e6c:	mov	r1, #0
   12e70:	mov	r2, #0
   12e74:	mov	r4, r0
   12e78:	bl	18824 <flatcc_verify_string_field@@Base>
   12e7c:	cmp	r0, #0
   12e80:	popne	{r4, sl, fp, pc}
   12e84:	mov	r0, r4
   12e88:	mov	r1, #1
   12e8c:	mov	r2, #8
   12e90:	mov	r3, #8
   12e94:	bl	187a0 <flatcc_verify_field@@Base>
   12e98:	cmp	r0, #0
   12e9c:	beq	12ea4 <main@@Base+0x600>
   12ea0:	pop	{r4, sl, fp, pc}
   12ea4:	mov	r0, r4
   12ea8:	mov	r1, #2
   12eac:	mov	r2, #2
   12eb0:	mov	r3, #2
   12eb4:	pop	{r4, sl, fp, lr}
   12eb8:	b	187a0 <flatcc_verify_field@@Base>
   12ebc:	mov	r0, #0
   12ec0:	bx	lr
   12ec4:	push	{r4, r5, r6, sl, fp, lr}
   12ec8:	add	fp, sp, #16
   12ecc:	sub	sp, sp, #8
   12ed0:	mvn	r5, #0
   12ed4:	mov	r6, #1
   12ed8:	mov	r1, #0
   12edc:	mov	r2, #0
   12ee0:	mov	r3, #1
   12ee4:	mov	r4, r0
   12ee8:	str	r6, [sp]
   12eec:	str	r5, [sp, #4]
   12ef0:	bl	18904 <flatcc_verify_vector_field@@Base>
   12ef4:	cmp	r0, #0
   12ef8:	bne	12f20 <main@@Base+0x67c>
   12efc:	mov	r0, r4
   12f00:	mov	r1, #1
   12f04:	mov	r2, #0
   12f08:	mov	r3, #1
   12f0c:	str	r6, [sp]
   12f10:	str	r5, [sp, #4]
   12f14:	bl	18904 <flatcc_verify_vector_field@@Base>
   12f18:	cmp	r0, #0
   12f1c:	beq	12f28 <main@@Base+0x684>
   12f20:	sub	sp, fp, #16
   12f24:	pop	{r4, r5, r6, sl, fp, pc}
   12f28:	ldr	r0, [pc, #40]	; 12f58 <main@@Base+0x6b4>
   12f2c:	mov	r1, #1
   12f30:	mov	r2, #0
   12f34:	mov	r3, #0
   12f38:	str	r1, [sp]
   12f3c:	mov	r1, #2
   12f40:	add	r0, pc, r0
   12f44:	str	r0, [sp, #4]
   12f48:	mov	r0, r4
   12f4c:	bl	197f4 <flatcc_verify_table_as_nested_root@@Base>
   12f50:	sub	sp, fp, #16
   12f54:	pop	{r4, r5, r6, sl, fp, pc}
   12f58:			; <UNDEFINED> instruction: 0xfffffa80
   12f5c:	push	{r4, sl, fp, lr}
   12f60:	add	fp, sp, #8
   12f64:	mov	r1, #0
   12f68:	mov	r2, #1
   12f6c:	mov	r3, #1
   12f70:	mov	r4, r0
   12f74:	bl	187a0 <flatcc_verify_field@@Base>
   12f78:	cmp	r0, #0
   12f7c:	bne	12fb8 <main@@Base+0x714>
   12f80:	mov	r0, r4
   12f84:	mov	r1, #1
   12f88:	mov	r2, #1
   12f8c:	mov	r3, #1
   12f90:	bl	187a0 <flatcc_verify_field@@Base>
   12f94:	cmp	r0, #0
   12f98:	popne	{r4, sl, fp, pc}
   12f9c:	mov	r0, r4
   12fa0:	mov	r1, #2
   12fa4:	mov	r2, #1
   12fa8:	mov	r3, #1
   12fac:	bl	187a0 <flatcc_verify_field@@Base>
   12fb0:	cmp	r0, #0
   12fb4:	beq	12fbc <main@@Base+0x718>
   12fb8:	pop	{r4, sl, fp, pc}
   12fbc:	mov	r0, r4
   12fc0:	mov	r1, #3
   12fc4:	mov	r2, #1
   12fc8:	mov	r3, #1
   12fcc:	pop	{r4, sl, fp, lr}
   12fd0:	b	187a0 <flatcc_verify_field@@Base>
   12fd4:	mov	r0, #0
   12fd8:	bx	lr
   12fdc:	push	{r4, sl, fp, lr}
   12fe0:	add	fp, sp, #8
   12fe4:	ldr	r3, [pc, #88]	; 13044 <main@@Base+0x7a0>
   12fe8:	mov	r1, #0
   12fec:	mov	r2, #0
   12ff0:	mov	r4, r0
   12ff4:	add	r3, pc, r3
   12ff8:	bl	18b84 <flatcc_verify_table_field@@Base>
   12ffc:	cmp	r0, #0
   13000:	popne	{r4, sl, fp, pc}
   13004:	ldr	r3, [pc, #60]	; 13048 <main@@Base+0x7a4>
   13008:	mov	r0, r4
   1300c:	mov	r1, #1
   13010:	mov	r2, #0
   13014:	add	r3, pc, r3
   13018:	bl	18b84 <flatcc_verify_table_field@@Base>
   1301c:	cmp	r0, #0
   13020:	beq	13028 <main@@Base+0x784>
   13024:	pop	{r4, sl, fp, pc}
   13028:	ldr	r3, [pc, #28]	; 1304c <main@@Base+0x7a8>
   1302c:	mov	r0, r4
   13030:	mov	r1, #3
   13034:	mov	r2, #0
   13038:	add	r3, pc, r3
   1303c:	pop	{r4, sl, fp, lr}
   13040:	b	19c80 <flatcc_verify_union_vector_field@@Base>
   13044:	andeq	r0, r0, r4, asr r0
   13048:	andeq	r0, r0, r8, lsr #1
   1304c:			; <UNDEFINED> instruction: 0xfffffdf4
   13050:	push	{r4, sl, fp, lr}
   13054:	add	fp, sp, #8
   13058:	ldr	r3, [pc, #88]	; 130b8 <main@@Base+0x814>
   1305c:	mov	r1, #0
   13060:	mov	r2, #0
   13064:	mov	r4, r0
   13068:	add	r3, pc, r3
   1306c:	bl	18b84 <flatcc_verify_table_field@@Base>
   13070:	cmp	r0, #0
   13074:	popne	{r4, sl, fp, pc}
   13078:	ldr	r3, [pc, #60]	; 130bc <main@@Base+0x818>
   1307c:	mov	r0, r4
   13080:	mov	r1, #1
   13084:	mov	r2, #0
   13088:	add	r3, pc, r3
   1308c:	bl	18b84 <flatcc_verify_table_field@@Base>
   13090:	cmp	r0, #0
   13094:	beq	1309c <main@@Base+0x7f8>
   13098:	pop	{r4, sl, fp, pc}
   1309c:	ldr	r3, [pc, #28]	; 130c0 <main@@Base+0x81c>
   130a0:	mov	r0, r4
   130a4:	mov	r1, #2
   130a8:	mov	r2, #0
   130ac:	add	r3, pc, r3
   130b0:	pop	{r4, sl, fp, lr}
   130b4:	b	18b84 <flatcc_verify_table_field@@Base>
   130b8:	andeq	r0, r0, r0, lsl r1
   130bc:	andeq	r0, r0, r8, ror #3
   130c0:	andeq	r0, r0, r0, lsl #4
   130c4:	push	{r4, sl, fp, lr}
   130c8:	add	fp, sp, #8
   130cc:	ldr	r3, [pc, #152]	; 1316c <main@@Base+0x8c8>
   130d0:	mov	r1, #1
   130d4:	mov	r2, #0
   130d8:	mov	r4, r0
   130dc:	add	r3, pc, r3
   130e0:	bl	19b14 <flatcc_verify_union_field@@Base>
   130e4:	cmp	r0, #0
   130e8:	bne	1314c <main@@Base+0x8a8>
   130ec:	ldr	r3, [pc, #124]	; 13170 <main@@Base+0x8cc>
   130f0:	mov	r0, r4
   130f4:	mov	r1, #3
   130f8:	mov	r2, #0
   130fc:	add	r3, pc, r3
   13100:	bl	19b14 <flatcc_verify_union_field@@Base>
   13104:	cmp	r0, #0
   13108:	bne	1314c <main@@Base+0x8a8>
   1310c:	ldr	r3, [pc, #96]	; 13174 <main@@Base+0x8d0>
   13110:	mov	r0, r4
   13114:	mov	r1, #5
   13118:	mov	r2, #0
   1311c:	add	r3, pc, r3
   13120:	bl	19b14 <flatcc_verify_union_field@@Base>
   13124:	cmp	r0, #0
   13128:	popne	{r4, sl, fp, pc}
   1312c:	ldr	r3, [pc, #68]	; 13178 <main@@Base+0x8d4>
   13130:	mov	r0, r4
   13134:	mov	r1, #7
   13138:	mov	r2, #0
   1313c:	add	r3, pc, r3
   13140:	bl	19b14 <flatcc_verify_union_field@@Base>
   13144:	cmp	r0, #0
   13148:	beq	13150 <main@@Base+0x8ac>
   1314c:	pop	{r4, sl, fp, pc}
   13150:	ldr	r3, [pc, #36]	; 1317c <main@@Base+0x8d8>
   13154:	mov	r0, r4
   13158:	mov	r1, #9
   1315c:	mov	r2, #0
   13160:	add	r3, pc, r3
   13164:	pop	{r4, sl, fp, lr}
   13168:	b	19c80 <flatcc_verify_union_vector_field@@Base>
   1316c:	andeq	r0, r0, ip, lsl #4
   13170:	andeq	r0, r0, ip, ror #3
   13174:	andeq	r0, r0, ip, asr #3
   13178:	andeq	r0, r0, ip, lsr #3
   1317c:	andeq	r0, r0, r8, lsl #3
   13180:	push	{r4, sl, fp, lr}
   13184:	add	fp, sp, #8
   13188:	mov	r1, #0
   1318c:	mov	r2, #0
   13190:	mov	r4, r0
   13194:	bl	18824 <flatcc_verify_string_field@@Base>
   13198:	cmp	r0, #0
   1319c:	bne	1325c <main@@Base+0x9b8>
   131a0:	mov	r0, r4
   131a4:	mov	r1, #1
   131a8:	mov	r2, #4
   131ac:	mov	r3, #4
   131b0:	bl	187a0 <flatcc_verify_field@@Base>
   131b4:	cmp	r0, #0
   131b8:	bne	1325c <main@@Base+0x9b8>
   131bc:	mov	r0, r4
   131c0:	mov	r1, #2
   131c4:	mov	r2, #0
   131c8:	bl	18824 <flatcc_verify_string_field@@Base>
   131cc:	cmp	r0, #0
   131d0:	bne	1325c <main@@Base+0x9b8>
   131d4:	mov	r0, r4
   131d8:	mov	r1, #3
   131dc:	mov	r2, #8
   131e0:	mov	r3, #8
   131e4:	bl	187a0 <flatcc_verify_field@@Base>
   131e8:	cmp	r0, #0
   131ec:	bne	1325c <main@@Base+0x9b8>
   131f0:	mov	r0, r4
   131f4:	mov	r1, #4
   131f8:	mov	r2, #0
   131fc:	bl	18824 <flatcc_verify_string_field@@Base>
   13200:	cmp	r0, #0
   13204:	bne	1325c <main@@Base+0x9b8>
   13208:	mov	r0, r4
   1320c:	mov	r1, #5
   13210:	mov	r2, #8
   13214:	mov	r3, #8
   13218:	bl	187a0 <flatcc_verify_field@@Base>
   1321c:	cmp	r0, #0
   13220:	bne	1325c <main@@Base+0x9b8>
   13224:	mov	r0, r4
   13228:	mov	r1, #6
   1322c:	mov	r2, #4
   13230:	mov	r3, #4
   13234:	bl	187a0 <flatcc_verify_field@@Base>
   13238:	cmp	r0, #0
   1323c:	popne	{r4, sl, fp, pc}
   13240:	mov	r0, r4
   13244:	mov	r1, #7
   13248:	mov	r2, #8
   1324c:	mov	r3, #8
   13250:	bl	187a0 <flatcc_verify_field@@Base>
   13254:	cmp	r0, #0
   13258:	beq	13260 <main@@Base+0x9bc>
   1325c:	pop	{r4, sl, fp, pc}
   13260:	mov	r0, r4
   13264:	mov	r1, #8
   13268:	mov	r2, #4
   1326c:	mov	r3, #4
   13270:	pop	{r4, sl, fp, lr}
   13274:	b	187a0 <flatcc_verify_field@@Base>
   13278:	push	{r4, sl, fp, lr}
   1327c:	add	fp, sp, #8
   13280:	mov	r1, #0
   13284:	mov	r2, #8
   13288:	mov	r3, #8
   1328c:	mov	r4, r0
   13290:	bl	187a0 <flatcc_verify_field@@Base>
   13294:	cmp	r0, #0
   13298:	popne	{r4, sl, fp, pc}
   1329c:	mov	r0, r4
   132a0:	mov	r1, #1
   132a4:	mov	r2, #4
   132a8:	mov	r3, #4
   132ac:	pop	{r4, sl, fp, lr}
   132b0:	b	187a0 <flatcc_verify_field@@Base>
   132b4:	push	{r4, sl, fp, lr}
   132b8:	add	fp, sp, #8
   132bc:	mov	r1, #0
   132c0:	mov	r2, #8
   132c4:	mov	r3, #8
   132c8:	mov	r4, r0
   132cc:	bl	187a0 <flatcc_verify_field@@Base>
   132d0:	cmp	r0, #0
   132d4:	popne	{r4, sl, fp, pc}
   132d8:	mov	r0, r4
   132dc:	mov	r1, #1
   132e0:	mov	r2, #4
   132e4:	mov	r3, #4
   132e8:	pop	{r4, sl, fp, lr}
   132ec:	b	187a0 <flatcc_verify_field@@Base>
   132f0:	ldrb	r2, [r0, #12]
   132f4:	sub	r1, r2, #2
   132f8:	cmp	r1, #9
   132fc:	bhi	13340 <main@@Base+0xa9c>
   13300:	add	r2, pc, #4
   13304:	ldr	r1, [r2, r1, lsl #2]
   13308:	add	pc, r2, r1
   1330c:	andeq	r0, r0, r8, asr #32
   13310:	andeq	r0, r0, r0, asr #32
   13314:	andeq	r0, r0, r0, asr #32
   13318:	andeq	r0, r0, r0, asr #32
   1331c:	andeq	r0, r0, r0, asr #32
   13320:	andeq	r0, r0, r0, asr #32
   13324:	andeq	r0, r0, r4, asr r0
   13328:	andeq	r0, r0, r8, lsr #32
   1332c:	andeq	r0, r0, r8, lsr #32
   13330:	andeq	r0, r0, ip, lsr r0
   13334:	mov	r1, #4
   13338:	mov	r2, #4
   1333c:	b	190b0 <flatcc_verify_union_struct@@Base>
   13340:	cmp	r2, #255	; 0xff
   13344:	bne	1334c <main@@Base+0xaa8>
   13348:	b	19108 <flatcc_verify_union_string@@Base>
   1334c:	mov	r0, #0
   13350:	bx	lr
   13354:	ldr	r1, [pc, #16]	; 1336c <main@@Base+0xac8>
   13358:	add	r1, pc, r1
   1335c:	b	18fc4 <flatcc_verify_union_table@@Base>
   13360:	mov	r1, #2
   13364:	mov	r2, #2
   13368:	b	190b0 <flatcc_verify_union_struct@@Base>
   1336c:	andeq	r0, r0, r0, lsl r0
   13370:	mov	r1, #0
   13374:	mov	r2, #4
   13378:	mov	r3, #4
   1337c:	b	187a0 <flatcc_verify_field@@Base>

00013380 <flatcc_builder_default_alloc@@Base>:
   13380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13384:	add	fp, sp, #24
   13388:	mov	r4, r1
   1338c:	cmp	r2, #0
   13390:	beq	133dc <flatcc_builder_default_alloc@@Base+0x5c>
   13394:	ldr	r0, [fp, #8]
   13398:	mov	r8, r3
   1339c:	sub	r1, r0, #1
   133a0:	cmp	r1, #6
   133a4:	bhi	1340c <flatcc_builder_default_alloc@@Base+0x8c>
   133a8:	add	r3, pc, #8
   133ac:	mov	r0, #256	; 0x100
   133b0:	ldr	r1, [r3, r1, lsl #2]
   133b4:	add	pc, r3, r1
   133b8:	andeq	r0, r0, r8, rrx
   133bc:	andeq	r0, r0, r4, asr r0
   133c0:	andeq	r0, r0, r4, asr r0
   133c4:	andeq	r0, r0, ip, lsl r0
   133c8:	andeq	r0, r0, ip, asr r0
   133cc:	andeq	r0, r0, r4, asr r0
   133d0:	andeq	r0, r0, r4, rrx
   133d4:	mov	r0, #288	; 0x120
   133d8:	b	13420 <flatcc_builder_default_alloc@@Base+0xa0>
   133dc:	ldr	r0, [r4]
   133e0:	cmp	r0, #0
   133e4:	beq	13400 <flatcc_builder_default_alloc@@Base+0x80>
   133e8:	bl	1270c <free@plt>
   133ec:	mov	r6, #0
   133f0:	mov	r0, r6
   133f4:	str	r6, [r4]
   133f8:	str	r6, [r4, #4]
   133fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13400:	mov	r6, #0
   13404:	mov	r0, r6
   13408:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1340c:	mov	r0, #32
   13410:	b	13420 <flatcc_builder_default_alloc@@Base+0xa0>
   13414:	mov	r0, r2
   13418:	b	13420 <flatcc_builder_default_alloc@@Base+0xa0>
   1341c:	mov	r0, #64	; 0x40
   13420:	mov	r7, r0
   13424:	lsl	r0, r0, #1
   13428:	cmp	r7, r2
   1342c:	bcc	13420 <flatcc_builder_default_alloc@@Base+0xa0>
   13430:	ldr	r0, [r4, #4]
   13434:	mov	r6, #0
   13438:	cmp	r0, r2
   1343c:	lsrcs	r0, r0, #1
   13440:	cmpcs	r0, r7
   13444:	bcs	13488 <flatcc_builder_default_alloc@@Base+0x108>
   13448:	ldr	r0, [r4]
   1344c:	mov	r1, r7
   13450:	bl	12724 <realloc@plt>
   13454:	cmp	r0, #0
   13458:	beq	13490 <flatcc_builder_default_alloc@@Base+0x110>
   1345c:	mov	r5, r0
   13460:	cmp	r8, #0
   13464:	beq	13484 <flatcc_builder_default_alloc@@Base+0x104>
   13468:	ldr	r1, [r4, #4]
   1346c:	cmp	r7, r1
   13470:	bls	13484 <flatcc_builder_default_alloc@@Base+0x104>
   13474:	add	r0, r5, r1
   13478:	sub	r2, r7, r1
   1347c:	mov	r1, #0
   13480:	bl	12778 <memset@plt>
   13484:	stm	r4, {r5, r7}
   13488:	mov	r0, r6
   1348c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13490:	mvn	r6, #0
   13494:	mov	r0, r6
   13498:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001349c <flatcc_builder_flush_vtable_cache@@Base>:
   1349c:	push	{r4, r5, fp, lr}
   134a0:	add	fp, sp, #8
   134a4:	mov	r4, r0
   134a8:	ldr	r0, [r0, #116]	; 0x74
   134ac:	cmp	r0, #0
   134b0:	popeq	{r4, r5, fp, pc}
   134b4:	ldr	r0, [r4, #92]	; 0x5c
   134b8:	ldr	r2, [r4, #96]	; 0x60
   134bc:	mov	r1, #0
   134c0:	mov	r5, #0
   134c4:	bl	12778 <memset@plt>
   134c8:	mov	r0, #16
   134cc:	str	r5, [r4, #120]	; 0x78
   134d0:	str	r0, [r4, #124]	; 0x7c
   134d4:	pop	{r4, r5, fp, pc}

000134d8 <flatcc_builder_custom_init@@Base>:
   134d8:	push	{r4, r5, r6, r7, fp, lr}
   134dc:	add	fp, sp, #16
   134e0:	mov	r6, r2
   134e4:	mov	r7, r1
   134e8:	mov	r1, #0
   134ec:	mov	r2, #232	; 0xe8
   134f0:	mov	r5, r3
   134f4:	mov	r4, r0
   134f8:	bl	12778 <memset@plt>
   134fc:	ldr	r0, [fp, #8]
   13500:	cmp	r7, #0
   13504:	bne	1351c <flatcc_builder_custom_init@@Base+0x44>
   13508:	mov	r1, #1
   1350c:	add	r6, r4, #188	; 0xbc
   13510:	str	r1, [r4, #184]	; 0xb8
   13514:	ldr	r7, [pc, #40]	; 13544 <flatcc_builder_custom_init@@Base+0x6c>
   13518:	ldr	r7, [pc, r7]
   1351c:	ldr	r1, [pc, #36]	; 13548 <flatcc_builder_custom_init@@Base+0x70>
   13520:	cmp	r5, #0
   13524:	ldr	r1, [pc, r1]
   13528:	str	r6, [r4, #36]	; 0x24
   1352c:	str	r0, [r4, #40]	; 0x28
   13530:	mov	r0, #0
   13534:	movne	r1, r5
   13538:	str	r7, [r4, #44]	; 0x2c
   1353c:	str	r1, [r4, #48]	; 0x30
   13540:	pop	{r4, r5, r6, r7, fp, pc}
   13544:	andeq	r8, r1, r0, lsr fp
   13548:	andeq	r8, r1, r0, lsr #22

0001354c <flatcc_builder_init@@Base>:
   1354c:	push	{r4, r5, fp, lr}
   13550:	add	fp, sp, #8
   13554:	mov	r1, #0
   13558:	mov	r2, #232	; 0xe8
   1355c:	mov	r4, r0
   13560:	mov	r5, #0
   13564:	bl	12778 <memset@plt>
   13568:	mov	r0, #1
   1356c:	str	r0, [r4, #184]	; 0xb8
   13570:	add	r0, r4, #188	; 0xbc
   13574:	ldr	r1, [pc, #32]	; 1359c <flatcc_builder_init@@Base+0x50>
   13578:	ldr	r1, [pc, r1]
   1357c:	ldr	r2, [pc, #28]	; 135a0 <flatcc_builder_init@@Base+0x54>
   13580:	ldr	r2, [pc, r2]
   13584:	str	r0, [r4, #36]	; 0x24
   13588:	mov	r0, #0
   1358c:	str	r5, [r4, #40]	; 0x28
   13590:	str	r2, [r4, #44]	; 0x2c
   13594:	str	r1, [r4, #48]	; 0x30
   13598:	pop	{r4, r5, fp, pc}
   1359c:	andeq	r8, r1, ip, asr #21
   135a0:	andeq	r8, r1, r8, asr #21

000135a4 <flatcc_builder_custom_reset@@Base>:
   135a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	add	fp, sp, #28
   135ac:	sub	sp, sp, #4
   135b0:	mov	r9, r2
   135b4:	mov	r8, r1
   135b8:	mov	sl, r0
   135bc:	add	r7, r0, #52	; 0x34
   135c0:	mov	r5, #0
   135c4:	b	135e4 <flatcc_builder_custom_reset@@Base+0x40>
   135c8:	ldr	r0, [r6, #56]	; 0x38
   135cc:	cmp	r0, #0
   135d0:	bne	136cc <flatcc_builder_custom_reset@@Base+0x128>
   135d4:	add	r5, r5, #1
   135d8:	add	r7, r7, #8
   135dc:	cmp	r5, #8
   135e0:	beq	13638 <flatcc_builder_custom_reset@@Base+0x94>
   135e4:	add	r6, sl, r5, lsl #3
   135e8:	ldr	r0, [r6, #52]	; 0x34
   135ec:	cmp	r0, #0
   135f0:	beq	135c8 <flatcc_builder_custom_reset@@Base+0x24>
   135f4:	cmp	r9, #0
   135f8:	cmpne	r5, #5
   135fc:	beq	13628 <flatcc_builder_custom_reset@@Base+0x84>
   13600:	ldr	r0, [sl, #40]	; 0x28
   13604:	ldr	r4, [sl, #48]	; 0x30
   13608:	mov	r1, r7
   1360c:	mov	r2, #1
   13610:	mov	r3, #1
   13614:	str	r5, [sp]
   13618:	blx	r4
   1361c:	cmp	r0, #0
   13620:	bne	136bc <flatcc_builder_custom_reset@@Base+0x118>
   13624:	ldr	r0, [r6, #52]	; 0x34
   13628:	ldr	r2, [r6, #56]	; 0x38
   1362c:	mov	r1, #0
   13630:	bl	12778 <memset@plt>
   13634:	b	135d4 <flatcc_builder_custom_reset@@Base+0x30>
   13638:	mov	r0, #0
   1363c:	vmov.i32	q8, #0	; 0x00000000
   13640:	mov	r5, #0
   13644:	str	r0, [sl, #120]	; 0x78
   13648:	ldr	r1, [sl, #124]	; 0x7c
   1364c:	cmp	r1, #0
   13650:	movne	r1, #16
   13654:	strne	r1, [sl, #124]	; 0x7c
   13658:	add	r1, sl, #148	; 0x94
   1365c:	str	r0, [sl, #136]	; 0x88
   13660:	str	r0, [sl, #140]	; 0x8c
   13664:	strh	r0, [sl, #128]	; 0x80
   13668:	str	r0, [sl, #32]
   1366c:	cmp	r8, #0
   13670:	vst1.32	{d16-d17}, [r1]
   13674:	ldr	r2, [sl, #60]	; 0x3c
   13678:	ldr	r1, [sl, #52]	; 0x34
   1367c:	ldr	r3, [sl, #76]	; 0x4c
   13680:	str	r2, [sl, #16]
   13684:	str	r0, [sl, #20]
   13688:	str	r0, [sl, #24]
   1368c:	movne	r0, #0
   13690:	str	r3, [sl]
   13694:	str	r1, [sl, #4]
   13698:	strne	r0, [sl, #172]	; 0xac
   1369c:	strne	r0, [sl, #176]	; 0xb0
   136a0:	strne	r0, [sl, #180]	; 0xb4
   136a4:	ldr	r0, [sl, #184]	; 0xb8
   136a8:	cmp	r0, #0
   136ac:	beq	136c0 <flatcc_builder_custom_reset@@Base+0x11c>
   136b0:	add	r0, sl, #188	; 0xbc
   136b4:	bl	18240 <flatcc_emitter_reset@@Base>
   136b8:	b	136c0 <flatcc_builder_custom_reset@@Base+0x11c>
   136bc:	mvn	r5, #0
   136c0:	mov	r0, r5
   136c4:	sub	sp, fp, #28
   136c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136cc:	ldr	r0, [pc, #24]	; 136ec <flatcc_builder_custom_reset@@Base+0x148>
   136d0:	ldr	r1, [pc, #24]	; 136f0 <flatcc_builder_custom_reset@@Base+0x14c>
   136d4:	ldr	r3, [pc, #24]	; 136f4 <flatcc_builder_custom_reset@@Base+0x150>
   136d8:	movw	r2, #434	; 0x1b2
   136dc:	add	r0, pc, r0
   136e0:	add	r1, pc, r1
   136e4:	add	r3, pc, r3
   136e8:	bl	127a8 <__assert_fail@plt>
   136ec:	andeq	r6, r0, r0, lsl #26
   136f0:	andeq	r6, r0, lr, lsl #26
   136f4:	andeq	r6, r0, r7, ror #26

000136f8 <flatcc_builder_reset@@Base>:
   136f8:	push	{r4, sl, fp, lr}
   136fc:	add	fp, sp, #8
   13700:	mov	r4, r0
   13704:	ldr	r0, [r0, #52]	; 0x34
   13708:	ldr	r2, [r4, #56]	; 0x38
   1370c:	cmp	r0, #0
   13710:	beq	13720 <flatcc_builder_reset@@Base+0x28>
   13714:	mov	r1, #0
   13718:	bl	12778 <memset@plt>
   1371c:	b	13728 <flatcc_builder_reset@@Base+0x30>
   13720:	cmp	r2, #0
   13724:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   13728:	ldr	r0, [r4, #60]	; 0x3c
   1372c:	ldr	r2, [r4, #64]	; 0x40
   13730:	cmp	r0, #0
   13734:	beq	13744 <flatcc_builder_reset@@Base+0x4c>
   13738:	mov	r1, #0
   1373c:	bl	12778 <memset@plt>
   13740:	b	1374c <flatcc_builder_reset@@Base+0x54>
   13744:	cmp	r2, #0
   13748:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   1374c:	ldr	r0, [r4, #68]	; 0x44
   13750:	ldr	r2, [r4, #72]	; 0x48
   13754:	cmp	r0, #0
   13758:	beq	13768 <flatcc_builder_reset@@Base+0x70>
   1375c:	mov	r1, #0
   13760:	bl	12778 <memset@plt>
   13764:	b	13770 <flatcc_builder_reset@@Base+0x78>
   13768:	cmp	r2, #0
   1376c:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   13770:	ldr	r0, [r4, #76]	; 0x4c
   13774:	ldr	r2, [r4, #80]	; 0x50
   13778:	cmp	r0, #0
   1377c:	beq	1378c <flatcc_builder_reset@@Base+0x94>
   13780:	mov	r1, #0
   13784:	bl	12778 <memset@plt>
   13788:	b	13794 <flatcc_builder_reset@@Base+0x9c>
   1378c:	cmp	r2, #0
   13790:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   13794:	ldr	r0, [r4, #84]	; 0x54
   13798:	ldr	r2, [r4, #88]	; 0x58
   1379c:	cmp	r0, #0
   137a0:	beq	137b0 <flatcc_builder_reset@@Base+0xb8>
   137a4:	mov	r1, #0
   137a8:	bl	12778 <memset@plt>
   137ac:	b	137b8 <flatcc_builder_reset@@Base+0xc0>
   137b0:	cmp	r2, #0
   137b4:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   137b8:	ldr	r0, [r4, #92]	; 0x5c
   137bc:	ldr	r2, [r4, #96]	; 0x60
   137c0:	cmp	r0, #0
   137c4:	beq	137d4 <flatcc_builder_reset@@Base+0xdc>
   137c8:	mov	r1, #0
   137cc:	bl	12778 <memset@plt>
   137d0:	b	137dc <flatcc_builder_reset@@Base+0xe4>
   137d4:	cmp	r2, #0
   137d8:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   137dc:	ldr	r0, [r4, #100]	; 0x64
   137e0:	ldr	r2, [r4, #104]	; 0x68
   137e4:	cmp	r0, #0
   137e8:	beq	137f8 <flatcc_builder_reset@@Base+0x100>
   137ec:	mov	r1, #0
   137f0:	bl	12778 <memset@plt>
   137f4:	b	13800 <flatcc_builder_reset@@Base+0x108>
   137f8:	cmp	r2, #0
   137fc:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   13800:	ldr	r0, [r4, #108]	; 0x6c
   13804:	ldr	r2, [r4, #112]	; 0x70
   13808:	cmp	r0, #0
   1380c:	beq	1381c <flatcc_builder_reset@@Base+0x124>
   13810:	mov	r1, #0
   13814:	bl	12778 <memset@plt>
   13818:	b	13824 <flatcc_builder_reset@@Base+0x12c>
   1381c:	cmp	r2, #0
   13820:	bne	13890 <flatcc_builder_reset@@Base+0x198>
   13824:	mov	r0, #0
   13828:	str	r0, [r4, #120]	; 0x78
   1382c:	ldr	r1, [r4, #124]	; 0x7c
   13830:	cmp	r1, #0
   13834:	movne	r1, #16
   13838:	strne	r1, [r4, #124]	; 0x7c
   1383c:	vmov.i32	q8, #0	; 0x00000000
   13840:	add	r1, r4, #148	; 0x94
   13844:	str	r0, [r4, #136]	; 0x88
   13848:	str	r0, [r4, #140]	; 0x8c
   1384c:	strh	r0, [r4, #128]	; 0x80
   13850:	str	r0, [r4, #32]
   13854:	vst1.32	{d16-d17}, [r1]
   13858:	ldr	r1, [r4, #184]	; 0xb8
   1385c:	ldr	r2, [r4, #60]	; 0x3c
   13860:	ldr	r3, [r4, #76]	; 0x4c
   13864:	ldr	ip, [r4, #52]	; 0x34
   13868:	cmp	r1, #0
   1386c:	str	r2, [r4, #16]
   13870:	str	r0, [r4, #20]
   13874:	str	r0, [r4, #24]
   13878:	stm	r4, {r3, ip}
   1387c:	beq	13888 <flatcc_builder_reset@@Base+0x190>
   13880:	add	r0, r4, #188	; 0xbc
   13884:	bl	18240 <flatcc_emitter_reset@@Base>
   13888:	mov	r0, #0
   1388c:	pop	{r4, sl, fp, pc}
   13890:	ldr	r0, [pc, #24]	; 138b0 <flatcc_builder_reset@@Base+0x1b8>
   13894:	ldr	r1, [pc, #24]	; 138b4 <flatcc_builder_reset@@Base+0x1bc>
   13898:	ldr	r3, [pc, #24]	; 138b8 <flatcc_builder_reset@@Base+0x1c0>
   1389c:	movw	r2, #434	; 0x1b2
   138a0:	add	r0, pc, r0
   138a4:	add	r1, pc, r1
   138a8:	add	r3, pc, r3
   138ac:	bl	127a8 <__assert_fail@plt>
   138b0:	andeq	r6, r0, ip, lsr fp
   138b4:	andeq	r6, r0, sl, asr #22
   138b8:	andeq	r6, r0, r3, lsr #23

000138bc <flatcc_builder_clear@@Base>:
   138bc:	push	{r4, sl, fp, lr}
   138c0:	add	fp, sp, #8
   138c4:	sub	sp, sp, #8
   138c8:	mov	r4, r0
   138cc:	ldr	r0, [r0, #40]	; 0x28
   138d0:	mov	r1, #0
   138d4:	mov	r2, #0
   138d8:	mov	r3, #0
   138dc:	ldr	ip, [r4, #48]	; 0x30
   138e0:	str	r1, [sp]
   138e4:	add	r1, r4, #52	; 0x34
   138e8:	blx	ip
   138ec:	ldr	r0, [r4, #40]	; 0x28
   138f0:	ldr	ip, [r4, #48]	; 0x30
   138f4:	mov	r1, #1
   138f8:	mov	r2, #0
   138fc:	mov	r3, #0
   13900:	str	r1, [sp]
   13904:	add	r1, r4, #60	; 0x3c
   13908:	blx	ip
   1390c:	ldr	r0, [r4, #40]	; 0x28
   13910:	ldr	ip, [r4, #48]	; 0x30
   13914:	mov	r1, #2
   13918:	mov	r2, #0
   1391c:	mov	r3, #0
   13920:	str	r1, [sp]
   13924:	add	r1, r4, #68	; 0x44
   13928:	blx	ip
   1392c:	ldr	r0, [r4, #40]	; 0x28
   13930:	ldr	ip, [r4, #48]	; 0x30
   13934:	mov	r1, #3
   13938:	mov	r2, #0
   1393c:	mov	r3, #0
   13940:	str	r1, [sp]
   13944:	add	r1, r4, #76	; 0x4c
   13948:	blx	ip
   1394c:	ldr	r0, [r4, #40]	; 0x28
   13950:	ldr	ip, [r4, #48]	; 0x30
   13954:	mov	r1, #4
   13958:	mov	r2, #0
   1395c:	mov	r3, #0
   13960:	str	r1, [sp]
   13964:	add	r1, r4, #84	; 0x54
   13968:	blx	ip
   1396c:	ldr	r0, [r4, #40]	; 0x28
   13970:	ldr	ip, [r4, #48]	; 0x30
   13974:	mov	r1, #5
   13978:	mov	r2, #0
   1397c:	mov	r3, #0
   13980:	str	r1, [sp]
   13984:	add	r1, r4, #92	; 0x5c
   13988:	blx	ip
   1398c:	ldr	r0, [r4, #40]	; 0x28
   13990:	ldr	ip, [r4, #48]	; 0x30
   13994:	mov	r1, #6
   13998:	mov	r2, #0
   1399c:	mov	r3, #0
   139a0:	str	r1, [sp]
   139a4:	add	r1, r4, #100	; 0x64
   139a8:	blx	ip
   139ac:	ldr	r0, [r4, #40]	; 0x28
   139b0:	ldr	ip, [r4, #48]	; 0x30
   139b4:	mov	r1, #7
   139b8:	mov	r2, #0
   139bc:	mov	r3, #0
   139c0:	str	r1, [sp]
   139c4:	add	r1, r4, #108	; 0x6c
   139c8:	blx	ip
   139cc:	ldr	r0, [r4, #184]	; 0xb8
   139d0:	cmp	r0, #0
   139d4:	beq	139e0 <flatcc_builder_clear@@Base+0x124>
   139d8:	add	r0, r4, #188	; 0xbc
   139dc:	bl	1830c <flatcc_emitter_clear@@Base>
   139e0:	mov	r0, r4
   139e4:	mov	r1, #0
   139e8:	mov	r2, #232	; 0xe8
   139ec:	sub	sp, fp, #8
   139f0:	pop	{r4, sl, fp, lr}
   139f4:	b	12778 <memset@plt>

000139f8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   139f8:	push	{r4, r5, r6, r7, fp, lr}
   139fc:	add	fp, sp, #16
   13a00:	sub	sp, sp, #8
   13a04:	mov	r4, r0
   13a08:	ldr	r0, [r0, #112]	; 0x70
   13a0c:	add	r1, r1, #7
   13a10:	ldr	r7, [r4, #228]	; 0xe4
   13a14:	bic	r5, r1, #3
   13a18:	add	r6, r4, #108	; 0x6c
   13a1c:	add	r2, r7, r5
   13a20:	cmp	r2, r0
   13a24:	bls	13a4c <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13a28:	ldr	r0, [r4, #40]	; 0x28
   13a2c:	ldr	ip, [r4, #48]	; 0x30
   13a30:	mov	r1, #7
   13a34:	mov	r3, #0
   13a38:	str	r1, [sp]
   13a3c:	mov	r1, r6
   13a40:	blx	ip
   13a44:	cmp	r0, #0
   13a48:	bne	13a98 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13a4c:	ldr	r0, [r6]
   13a50:	adds	r6, r0, r7
   13a54:	beq	13a88 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13a58:	mov	r0, r6
   13a5c:	mov	r1, #0
   13a60:	mov	r2, r5
   13a64:	bl	12778 <memset@plt>
   13a68:	ldr	r0, [r4, #224]	; 0xe0
   13a6c:	str	r0, [r6], #4
   13a70:	ldr	r0, [r4, #228]	; 0xe4
   13a74:	add	r1, r0, #4
   13a78:	add	r0, r0, r5
   13a7c:	str	r1, [r4, #224]	; 0xe0
   13a80:	str	r0, [r4, #228]	; 0xe4
   13a84:	b	13a8c <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13a88:	mov	r6, #0
   13a8c:	mov	r0, r6
   13a90:	sub	sp, fp, #16
   13a94:	pop	{r4, r5, r6, r7, fp, pc}
   13a98:	ldr	r0, [pc, #24]	; 13ab8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   13a9c:	ldr	r1, [pc, #24]	; 13abc <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13aa0:	ldr	r3, [pc, #24]	; 13ac0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   13aa4:	mov	r2, #308	; 0x134
   13aa8:	add	r0, pc, r0
   13aac:	add	r1, pc, r1
   13ab0:	add	r3, pc, r3
   13ab4:	bl	127a8 <__assert_fail@plt>
   13ab8:	andeq	r7, r0, r3, lsl #22
   13abc:	andeq	r6, r0, r2, asr #18
   13ac0:	andeq	r7, r0, r5, lsr r9

00013ac4 <flatcc_builder_enter_user_frame@@Base>:
   13ac4:	push	{r4, r5, r6, r7, fp, lr}
   13ac8:	add	fp, sp, #16
   13acc:	sub	sp, sp, #8
   13ad0:	mov	r4, r0
   13ad4:	ldr	r0, [r0, #112]	; 0x70
   13ad8:	add	r1, r1, #7
   13adc:	ldr	r7, [r4, #228]	; 0xe4
   13ae0:	bic	r5, r1, #3
   13ae4:	add	r6, r4, #108	; 0x6c
   13ae8:	add	r2, r7, r5
   13aec:	cmp	r2, r0
   13af0:	bls	13b18 <flatcc_builder_enter_user_frame@@Base+0x54>
   13af4:	ldr	r0, [r4, #40]	; 0x28
   13af8:	ldr	ip, [r4, #48]	; 0x30
   13afc:	mov	r1, #7
   13b00:	mov	r3, #0
   13b04:	str	r1, [sp]
   13b08:	mov	r1, r6
   13b0c:	blx	ip
   13b10:	cmp	r0, #0
   13b14:	bne	13b64 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13b18:	ldr	r0, [r6]
   13b1c:	adds	r6, r0, r7
   13b20:	beq	13b58 <flatcc_builder_enter_user_frame@@Base+0x94>
   13b24:	mov	r0, r6
   13b28:	mov	r1, #0
   13b2c:	mov	r2, r5
   13b30:	bl	12778 <memset@plt>
   13b34:	ldr	r0, [r4, #224]	; 0xe0
   13b38:	str	r0, [r6]
   13b3c:	ldr	r1, [r4, #228]	; 0xe4
   13b40:	add	r0, r1, #4
   13b44:	add	r1, r1, r5
   13b48:	str	r0, [r4, #224]	; 0xe0
   13b4c:	str	r1, [r4, #228]	; 0xe4
   13b50:	sub	sp, fp, #16
   13b54:	pop	{r4, r5, r6, r7, fp, pc}
   13b58:	mov	r0, #0
   13b5c:	sub	sp, fp, #16
   13b60:	pop	{r4, r5, r6, r7, fp, pc}
   13b64:	ldr	r0, [pc, #24]	; 13b84 <flatcc_builder_enter_user_frame@@Base+0xc0>
   13b68:	ldr	r1, [pc, #24]	; 13b88 <flatcc_builder_enter_user_frame@@Base+0xc4>
   13b6c:	ldr	r3, [pc, #24]	; 13b8c <flatcc_builder_enter_user_frame@@Base+0xc8>
   13b70:	mov	r2, #308	; 0x134
   13b74:	add	r0, pc, r0
   13b78:	add	r1, pc, r1
   13b7c:	add	r3, pc, r3
   13b80:	bl	127a8 <__assert_fail@plt>
   13b84:	andeq	r7, r0, r7, lsr sl
   13b88:	andeq	r6, r0, r6, ror r8
   13b8c:	andeq	r7, r0, r9, ror #16

00013b90 <flatcc_builder_exit_user_frame@@Base>:
   13b90:	push	{fp, lr}
   13b94:	mov	fp, sp
   13b98:	ldr	r1, [r0, #224]	; 0xe0
   13b9c:	cmp	r1, #0
   13ba0:	subne	r2, r1, #4
   13ba4:	strne	r2, [r0, #228]	; 0xe4
   13ba8:	ldrne	r2, [r0, #108]	; 0x6c
   13bac:	addne	r1, r2, r1
   13bb0:	ldrne	r1, [r1, #-4]
   13bb4:	strne	r1, [r0, #224]	; 0xe0
   13bb8:	movne	r0, r1
   13bbc:	popne	{fp, pc}
   13bc0:	ldr	r0, [pc, #24]	; 13be0 <flatcc_builder_exit_user_frame@@Base+0x50>
   13bc4:	ldr	r1, [pc, #24]	; 13be4 <flatcc_builder_exit_user_frame@@Base+0x54>
   13bc8:	ldr	r3, [pc, #24]	; 13be8 <flatcc_builder_exit_user_frame@@Base+0x58>
   13bcc:	movw	r2, #542	; 0x21e
   13bd0:	add	r0, pc, r0
   13bd4:	add	r1, pc, r1
   13bd8:	add	r3, pc, r3
   13bdc:	bl	127a8 <__assert_fail@plt>
   13be0:			; <UNDEFINED> instruction: 0x000068b9
   13be4:	andeq	r6, r0, sl, lsl r8
   13be8:	andeq	r6, r0, sl, asr #17

00013bec <flatcc_builder_exit_user_frame_at@@Base>:
   13bec:	push	{fp, lr}
   13bf0:	mov	fp, sp
   13bf4:	ldr	r2, [r0, #224]	; 0xe0
   13bf8:	cmp	r2, r1
   13bfc:	bcc	13c48 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13c00:	cmp	r1, #0
   13c04:	str	r1, [r0, #224]	; 0xe0
   13c08:	subne	r2, r1, #4
   13c0c:	strne	r2, [r0, #228]	; 0xe4
   13c10:	ldrne	r2, [r0, #108]	; 0x6c
   13c14:	addne	r1, r2, r1
   13c18:	ldrne	r1, [r1, #-4]
   13c1c:	strne	r1, [r0, #224]	; 0xe0
   13c20:	movne	r0, r1
   13c24:	popne	{fp, pc}
   13c28:	ldr	r0, [pc, #68]	; 13c74 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   13c2c:	ldr	r1, [pc, #68]	; 13c78 <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13c30:	ldr	r3, [pc, #68]	; 13c7c <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13c34:	movw	r2, #542	; 0x21e
   13c38:	add	r0, pc, r0
   13c3c:	add	r1, pc, r1
   13c40:	add	r3, pc, r3
   13c44:	bl	127a8 <__assert_fail@plt>
   13c48:	ldr	r0, [pc, #24]	; 13c68 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   13c4c:	ldr	r1, [pc, #24]	; 13c6c <flatcc_builder_exit_user_frame_at@@Base+0x80>
   13c50:	ldr	r3, [pc, #24]	; 13c70 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   13c54:	movw	r2, #551	; 0x227
   13c58:	add	r0, pc, r0
   13c5c:	add	r1, pc, r1
   13c60:	add	r3, pc, r3
   13c64:	bl	127a8 <__assert_fail@plt>
   13c68:	andeq	r6, r0, r4, lsl #17
   13c6c:	muleq	r0, r2, r7
   13c70:	muleq	r0, fp, r8
   13c74:	andeq	r6, r0, r1, asr r8
   13c78:			; <UNDEFINED> instruction: 0x000067b2
   13c7c:	andeq	r6, r0, r2, ror #16

00013c80 <flatcc_builder_get_current_user_frame@@Base>:
   13c80:	ldr	r0, [r0, #224]	; 0xe0
   13c84:	bx	lr

00013c88 <flatcc_builder_get_user_frame_ptr@@Base>:
   13c88:	ldr	r0, [r0, #108]	; 0x6c
   13c8c:	add	r0, r0, r1
   13c90:	bx	lr

00013c94 <flatcc_builder_embed_buffer@@Base>:
   13c94:	push	{r4, r5, r6, r7, fp, lr}
   13c98:	add	fp, sp, #16
   13c9c:	sub	sp, sp, #88	; 0x58
   13ca0:	mov	r4, r0
   13ca4:	ldr	r0, [fp, #8]
   13ca8:	mov	r5, r3
   13cac:	mov	r7, r2
   13cb0:	mov	r2, r1
   13cb4:	sub	r1, fp, #18
   13cb8:	strh	r0, [fp, #-18]	; 0xffffffee
   13cbc:	mov	r0, r4
   13cc0:	ldr	r3, [r4, #152]	; 0x98
   13cc4:	cmp	r3, #0
   13cc8:	movwne	r3, #1
   13ccc:	bl	13e20 <flatcc_builder_embed_buffer@@Base+0x18c>
   13cd0:	ldr	r1, [fp, #12]
   13cd4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13cd8:	ldr	r0, [r4, #136]	; 0x88
   13cdc:	mov	r2, #0
   13ce0:	str	r2, [sp, #12]
   13ce4:	str	r2, [sp, #8]
   13ce8:	and	r1, r1, #2
   13cec:	sub	r3, r3, #1
   13cf0:	add	r1, r5, r1, lsl #1
   13cf4:	sub	r1, r0, r1
   13cf8:	and	r3, r1, r3
   13cfc:	add	r1, r3, r5
   13d00:	str	r1, [fp, #-24]	; 0xffffffe8
   13d04:	ldr	r1, [r4, #152]	; 0x98
   13d08:	cmp	r1, #0
   13d0c:	mov	r1, #0
   13d10:	beq	13d30 <flatcc_builder_embed_buffer@@Base+0x9c>
   13d14:	mov	r1, #4
   13d18:	sub	r2, fp, #24
   13d1c:	str	r1, [sp, #20]
   13d20:	str	r2, [sp, #16]
   13d24:	mov	r2, #1
   13d28:	str	r1, [sp, #8]
   13d2c:	str	r2, [sp, #12]
   13d30:	cmp	r5, #0
   13d34:	beq	13d58 <flatcc_builder_embed_buffer@@Base+0xc4>
   13d38:	add	r6, sp, #8
   13d3c:	add	r1, r1, r5
   13d40:	add	r6, r6, r2, lsl #3
   13d44:	add	r2, r2, #1
   13d48:	str	r1, [sp, #8]
   13d4c:	str	r7, [r6, #8]
   13d50:	str	r5, [r6, #12]
   13d54:	str	r2, [sp, #12]
   13d58:	cmp	r3, #0
   13d5c:	beq	13d88 <flatcc_builder_embed_buffer@@Base+0xf4>
   13d60:	add	r1, r1, r3
   13d64:	add	r7, sp, #8
   13d68:	str	r1, [sp, #8]
   13d6c:	add	r7, r7, r2, lsl #3
   13d70:	add	r2, r2, #1
   13d74:	ldr	r6, [pc, #136]	; 13e04 <flatcc_builder_embed_buffer@@Base+0x170>
   13d78:	ldr	r6, [pc, r6]
   13d7c:	str	r6, [r7, #8]
   13d80:	str	r3, [r7, #12]
   13d84:	str	r2, [sp, #12]
   13d88:	cmp	r1, #0
   13d8c:	ble	13de4 <flatcc_builder_embed_buffer@@Base+0x150>
   13d90:	sub	r5, r0, r1
   13d94:	ldr	r0, [r4, #36]	; 0x24
   13d98:	ldr	r7, [r4, #44]	; 0x2c
   13d9c:	str	r1, [sp]
   13da0:	add	r1, sp, #8
   13da4:	add	r1, r1, #8
   13da8:	mov	r3, r5
   13dac:	blx	r7
   13db0:	cmp	r0, #0
   13db4:	streq	r5, [r4, #136]	; 0x88
   13db8:	moveq	r0, r5
   13dbc:	subeq	sp, fp, #16
   13dc0:	popeq	{r4, r5, r6, r7, fp, pc}
   13dc4:	ldr	r0, [pc, #72]	; 13e14 <flatcc_builder_embed_buffer@@Base+0x180>
   13dc8:	ldr	r1, [pc, #72]	; 13e18 <flatcc_builder_embed_buffer@@Base+0x184>
   13dcc:	ldr	r3, [pc, #72]	; 13e1c <flatcc_builder_embed_buffer@@Base+0x188>
   13dd0:	movw	r2, #651	; 0x28b
   13dd4:	add	r0, pc, r0
   13dd8:	add	r1, pc, r1
   13ddc:	add	r3, pc, r3
   13de0:	bl	127a8 <__assert_fail@plt>
   13de4:	ldr	r0, [pc, #28]	; 13e08 <flatcc_builder_embed_buffer@@Base+0x174>
   13de8:	ldr	r1, [pc, #28]	; 13e0c <flatcc_builder_embed_buffer@@Base+0x178>
   13dec:	ldr	r3, [pc, #28]	; 13e10 <flatcc_builder_embed_buffer@@Base+0x17c>
   13df0:	movw	r2, #647	; 0x287
   13df4:	add	r0, pc, r0
   13df8:	add	r1, pc, r1
   13dfc:	add	r3, pc, r3
   13e00:	bl	127a8 <__assert_fail@plt>
   13e04:	andeq	r8, r1, r4, asr #5
   13e08:			; <UNDEFINED> instruction: 0x000077b7
   13e0c:	strdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   13e10:	andeq	r7, r0, lr, ror #12
   13e14:	ldrdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   13e18:	andeq	r6, r0, r6, lsl r6
   13e1c:	andeq	r7, r0, lr, lsl #13
   13e20:	push	{r4, sl, fp, lr}
   13e24:	add	fp, sp, #8
   13e28:	sub	sp, sp, #80	; 0x50
   13e2c:	cmp	r2, #0
   13e30:	bne	13e40 <flatcc_builder_embed_buffer@@Base+0x1ac>
   13e34:	ldrh	r2, [r0, #132]	; 0x84
   13e38:	cmp	r2, #0
   13e3c:	movweq	r2, #1
   13e40:	ldrh	r4, [r1]
   13e44:	cmp	r4, #4
   13e48:	movwcc	r4, #4
   13e4c:	cmpcs	r4, r2
   13e50:	bcs	13e60 <flatcc_builder_embed_buffer@@Base+0x1cc>
   13e54:	cmp	r4, r2
   13e58:	movcc	r4, r2
   13e5c:	strh	r4, [r1]
   13e60:	cmp	r3, #0
   13e64:	bne	13ed8 <flatcc_builder_embed_buffer@@Base+0x244>
   13e68:	ldr	r4, [r0, #140]	; 0x8c
   13e6c:	sub	r1, r2, #1
   13e70:	ands	r1, r4, r1
   13e74:	beq	13ed8 <flatcc_builder_embed_buffer@@Base+0x244>
   13e78:	mov	r2, #1
   13e7c:	str	r1, [sp, #20]
   13e80:	str	r1, [sp, #8]
   13e84:	cmn	r1, #1
   13e88:	str	r2, [sp, #12]
   13e8c:	ldr	r2, [pc, #172]	; 13f40 <flatcc_builder_embed_buffer@@Base+0x2ac>
   13e90:	ldr	r2, [pc, r2]
   13e94:	str	r2, [sp, #16]
   13e98:	add	r2, r1, r4
   13e9c:	str	r2, [r0, #140]	; 0x8c
   13ea0:	ble	13ee0 <flatcc_builder_embed_buffer@@Base+0x24c>
   13ea4:	ldr	r2, [r0, #36]	; 0x24
   13ea8:	ldr	ip, [r0, #44]	; 0x2c
   13eac:	add	r0, sp, #8
   13eb0:	str	r1, [sp]
   13eb4:	mov	r3, r4
   13eb8:	add	r1, r0, #8
   13ebc:	mov	r0, r2
   13ec0:	mov	r2, #1
   13ec4:	blx	ip
   13ec8:	cmp	r0, #0
   13ecc:	bne	13f00 <flatcc_builder_embed_buffer@@Base+0x26c>
   13ed0:	cmn	r4, #1
   13ed4:	beq	13f20 <flatcc_builder_embed_buffer@@Base+0x28c>
   13ed8:	sub	sp, fp, #8
   13edc:	pop	{r4, sl, fp, pc}
   13ee0:	ldr	r0, [pc, #92]	; 13f44 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13ee4:	ldr	r1, [pc, #92]	; 13f48 <flatcc_builder_embed_buffer@@Base+0x2b4>
   13ee8:	ldr	r3, [pc, #92]	; 13f4c <flatcc_builder_embed_buffer@@Base+0x2b8>
   13eec:	movw	r2, #673	; 0x2a1
   13ef0:	add	r0, pc, r0
   13ef4:	add	r1, pc, r1
   13ef8:	add	r3, pc, r3
   13efc:	bl	127a8 <__assert_fail@plt>
   13f00:	ldr	r0, [pc, #72]	; 13f50 <flatcc_builder_embed_buffer@@Base+0x2bc>
   13f04:	ldr	r1, [pc, #72]	; 13f54 <flatcc_builder_embed_buffer@@Base+0x2c0>
   13f08:	ldr	r3, [pc, #72]	; 13f58 <flatcc_builder_embed_buffer@@Base+0x2c4>
   13f0c:	movw	r2, #677	; 0x2a5
   13f10:	add	r0, pc, r0
   13f14:	add	r1, pc, r1
   13f18:	add	r3, pc, r3
   13f1c:	bl	127a8 <__assert_fail@plt>
   13f20:	ldr	r0, [pc, #52]	; 13f5c <flatcc_builder_embed_buffer@@Base+0x2c8>
   13f24:	ldr	r1, [pc, #52]	; 13f60 <flatcc_builder_embed_buffer@@Base+0x2cc>
   13f28:	ldr	r3, [pc, #52]	; 13f64 <flatcc_builder_embed_buffer@@Base+0x2d0>
   13f2c:	movw	r2, #702	; 0x2be
   13f30:	add	r0, pc, r0
   13f34:	add	r1, pc, r1
   13f38:	add	r3, pc, r3
   13f3c:	bl	127a8 <__assert_fail@plt>
   13f40:	andeq	r8, r1, ip, lsr #3
   13f44:			; <UNDEFINED> instruction: 0x000076bb
   13f48:	strdeq	r6, [r0], -sl
   13f4c:	andeq	r7, r0, lr, lsr #12
   13f50:	muleq	r0, fp, r6
   13f54:	ldrdeq	r6, [r0], -sl
   13f58:	andeq	r7, r0, lr, lsl #12
   13f5c:	andeq	r7, r0, fp, ror r6
   13f60:			; <UNDEFINED> instruction: 0x000064ba
   13f64:	strdeq	r7, [r0], -r0

00013f68 <flatcc_builder_create_buffer@@Base>:
   13f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f6c:	add	fp, sp, #28
   13f70:	sub	sp, sp, #100	; 0x64
   13f74:	ldr	sl, [fp, #12]
   13f78:	mov	r4, r0
   13f7c:	ldr	r0, [fp, #8]
   13f80:	mov	r7, r1
   13f84:	mov	r5, #0
   13f88:	mov	r6, r3
   13f8c:	sub	r1, fp, #30
   13f90:	str	r5, [sp, #12]
   13f94:	and	r9, sl, #1
   13f98:	strh	r0, [fp, #-30]	; 0xffffffe2
   13f9c:	mov	r0, r4
   13fa0:	mov	r3, r9
   13fa4:	bl	13e20 <flatcc_builder_embed_buffer@@Base+0x18c>
   13fa8:	ldrh	r0, [r4, #128]	; 0x80
   13fac:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13fb0:	str	r6, [sp, #8]
   13fb4:	cmp	r0, r1
   13fb8:	strhcc	r1, [r4, #128]	; 0x80
   13fbc:	cmp	r7, #0
   13fc0:	beq	13fdc <flatcc_builder_create_buffer@@Base+0x74>
   13fc4:	ldr	r5, [r7]
   13fc8:	cmp	r5, #0
   13fcc:	str	r5, [sp, #12]
   13fd0:	movwne	r5, #1
   13fd4:	lsl	r7, r5, #2
   13fd8:	b	13fe0 <flatcc_builder_create_buffer@@Base+0x78>
   13fdc:	mov	r7, #0
   13fe0:	ldr	r0, [r4, #136]	; 0x88
   13fe4:	and	r2, sl, #2
   13fe8:	mov	r3, #0
   13fec:	sub	r6, r1, #1
   13ff0:	ands	ip, sl, #3
   13ff4:	mov	sl, #4
   13ff8:	mov	r1, #4
   13ffc:	str	r3, [sp, #20]
   14000:	str	r3, [sp, #16]
   14004:	sub	r2, r0, r2, lsl #1
   14008:	sub	r2, r2, r7
   1400c:	sub	r2, r2, #4
   14010:	beq	14034 <flatcc_builder_create_buffer@@Base+0xcc>
   14014:	mov	r1, #4
   14018:	sub	r3, fp, #40	; 0x28
   1401c:	str	r1, [sp, #28]
   14020:	str	r3, [sp, #24]
   14024:	str	r1, [sp, #16]
   14028:	mov	r3, #1
   1402c:	mov	r1, #8
   14030:	str	r3, [sp, #20]
   14034:	add	lr, sp, #16
   14038:	and	r6, r2, r6
   1403c:	sub	r8, fp, #36	; 0x24
   14040:	str	r1, [sp, #16]
   14044:	cmp	r5, #0
   14048:	add	r2, lr, r3, lsl #3
   1404c:	str	r8, [r2, #8]
   14050:	str	sl, [r2, #12]
   14054:	add	r2, r3, #1
   14058:	str	r2, [sp, #20]
   1405c:	beq	14080 <flatcc_builder_create_buffer@@Base+0x118>
   14060:	add	r2, lr, r2, lsl #3
   14064:	add	r1, r1, r7
   14068:	add	r5, sp, #12
   1406c:	str	r1, [sp, #16]
   14070:	str	r5, [r2, #8]
   14074:	str	r7, [r2, #12]
   14078:	orr	r2, r3, #2
   1407c:	str	r2, [sp, #20]
   14080:	cmp	r6, #0
   14084:	beq	140ac <flatcc_builder_create_buffer@@Base+0x144>
   14088:	add	r1, r1, r6
   1408c:	add	r3, lr, r2, lsl #3
   14090:	add	r2, r2, #1
   14094:	str	r1, [sp, #16]
   14098:	ldr	r5, [pc, #220]	; 1417c <flatcc_builder_create_buffer@@Base+0x214>
   1409c:	ldr	r5, [pc, r5]
   140a0:	str	r5, [r3, #8]
   140a4:	str	r6, [r3, #12]
   140a8:	str	r2, [sp, #20]
   140ac:	sub	r7, r0, r1
   140b0:	cmp	ip, #0
   140b4:	mov	r6, #144	; 0x90
   140b8:	ldr	r3, [sp, #8]
   140bc:	mov	r0, r7
   140c0:	addne	r0, r0, #4
   140c4:	cmp	r9, #0
   140c8:	movweq	r6, #140	; 0x8c
   140cc:	cmp	r1, #0
   140d0:	ldr	r6, [r4, r6]
   140d4:	sub	r3, r3, r0
   140d8:	str	r3, [fp, #-36]	; 0xffffffdc
   140dc:	sub	r0, r6, r0
   140e0:	str	r0, [fp, #-40]	; 0xffffffd8
   140e4:	ble	1413c <flatcc_builder_create_buffer@@Base+0x1d4>
   140e8:	ldr	r0, [r4, #36]	; 0x24
   140ec:	ldr	r6, [r4, #44]	; 0x2c
   140f0:	str	r1, [sp]
   140f4:	add	r1, lr, #8
   140f8:	mov	r3, r7
   140fc:	blx	r6
   14100:	cmp	r0, #0
   14104:	bne	1415c <flatcc_builder_create_buffer@@Base+0x1f4>
   14108:	cmp	r7, #0
   1410c:	str	r7, [r4, #136]	; 0x88
   14110:	movne	r0, r7
   14114:	subne	sp, fp, #28
   14118:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1411c:	ldr	r0, [pc, #116]	; 14198 <flatcc_builder_create_buffer@@Base+0x230>
   14120:	ldr	r1, [pc, #116]	; 1419c <flatcc_builder_create_buffer@@Base+0x234>
   14124:	ldr	r3, [pc, #116]	; 141a0 <flatcc_builder_create_buffer@@Base+0x238>
   14128:	mov	r2, #772	; 0x304
   1412c:	add	r0, pc, r0
   14130:	add	r1, pc, r1
   14134:	add	r3, pc, r3
   14138:	bl	127a8 <__assert_fail@plt>
   1413c:	ldr	r0, [pc, #60]	; 14180 <flatcc_builder_create_buffer@@Base+0x218>
   14140:	ldr	r1, [pc, #60]	; 14184 <flatcc_builder_create_buffer@@Base+0x21c>
   14144:	ldr	r3, [pc, #60]	; 14188 <flatcc_builder_create_buffer@@Base+0x220>
   14148:	movw	r2, #647	; 0x287
   1414c:	add	r0, pc, r0
   14150:	add	r1, pc, r1
   14154:	add	r3, pc, r3
   14158:	bl	127a8 <__assert_fail@plt>
   1415c:	ldr	r0, [pc, #40]	; 1418c <flatcc_builder_create_buffer@@Base+0x224>
   14160:	ldr	r1, [pc, #40]	; 14190 <flatcc_builder_create_buffer@@Base+0x228>
   14164:	ldr	r3, [pc, #40]	; 14194 <flatcc_builder_create_buffer@@Base+0x22c>
   14168:	movw	r2, #651	; 0x28b
   1416c:	add	r0, pc, r0
   14170:	add	r1, pc, r1
   14174:	add	r3, pc, r3
   14178:	bl	127a8 <__assert_fail@plt>
   1417c:	andeq	r7, r1, r0, lsr #31
   14180:	andeq	r7, r0, pc, asr r4
   14184:	muleq	r0, lr, r2
   14188:	andeq	r7, r0, r6, lsl r3
   1418c:	andeq	r7, r0, pc, lsr r4
   14190:	andeq	r6, r0, lr, ror r2
   14194:	strdeq	r7, [r0], -r6
   14198:	andeq	r7, r0, pc, ror r4
   1419c:			; <UNDEFINED> instruction: 0x000062be
   141a0:	andeq	r6, r0, ip, lsl #8

000141a4 <flatcc_builder_create_struct@@Base>:
   141a4:	push	{r4, r5, r6, sl, fp, lr}
   141a8:	add	fp, sp, #16
   141ac:	sub	sp, sp, #80	; 0x50
   141b0:	cmp	r3, #0
   141b4:	beq	1428c <flatcc_builder_create_struct@@Base+0xe8>
   141b8:	mov	r5, r0
   141bc:	ldrh	r0, [r0, #128]	; 0x80
   141c0:	mov	r4, #0
   141c4:	cmp	r0, r3
   141c8:	strhcc	r3, [r5, #128]	; 0x80
   141cc:	sub	r3, r3, #1
   141d0:	cmp	r2, #0
   141d4:	ldr	r0, [r5, #136]	; 0x88
   141d8:	str	r4, [sp, #12]
   141dc:	str	r4, [sp, #8]
   141e0:	movne	r4, #1
   141e4:	strne	r2, [sp, #20]
   141e8:	strne	r1, [sp, #16]
   141ec:	strne	r2, [sp, #8]
   141f0:	strne	r4, [sp, #12]
   141f4:	sub	r6, r0, r2
   141f8:	and	r3, r6, r3
   141fc:	cmp	r3, #0
   14200:	beq	1422c <flatcc_builder_create_struct@@Base+0x88>
   14204:	add	r2, r3, r2
   14208:	add	r1, sp, #8
   1420c:	str	r2, [sp, #8]
   14210:	add	r1, r1, r4, lsl #3
   14214:	add	r4, r4, #1
   14218:	ldr	r6, [pc, #172]	; 142cc <flatcc_builder_create_struct@@Base+0x128>
   1421c:	ldr	r6, [pc, r6]
   14220:	str	r6, [r1, #8]
   14224:	str	r3, [r1, #12]
   14228:	str	r4, [sp, #12]
   1422c:	cmp	r2, #0
   14230:	ble	142ac <flatcc_builder_create_struct@@Base+0x108>
   14234:	sub	r6, r0, r2
   14238:	ldr	r0, [r5, #36]	; 0x24
   1423c:	ldr	ip, [r5, #44]	; 0x2c
   14240:	add	r1, sp, #8
   14244:	str	r2, [sp]
   14248:	mov	r2, r4
   1424c:	add	r1, r1, #8
   14250:	mov	r3, r6
   14254:	blx	ip
   14258:	cmp	r0, #0
   1425c:	streq	r6, [r5, #136]	; 0x88
   14260:	moveq	r0, r6
   14264:	subeq	sp, fp, #16
   14268:	popeq	{r4, r5, r6, sl, fp, pc}
   1426c:	ldr	r0, [pc, #116]	; 142e8 <flatcc_builder_create_struct@@Base+0x144>
   14270:	ldr	r1, [pc, #116]	; 142ec <flatcc_builder_create_struct@@Base+0x148>
   14274:	ldr	r3, [pc, #116]	; 142f0 <flatcc_builder_create_struct@@Base+0x14c>
   14278:	movw	r2, #651	; 0x28b
   1427c:	add	r0, pc, r0
   14280:	add	r1, pc, r1
   14284:	add	r3, pc, r3
   14288:	bl	127a8 <__assert_fail@plt>
   1428c:	ldr	r0, [pc, #60]	; 142d0 <flatcc_builder_create_struct@@Base+0x12c>
   14290:	ldr	r1, [pc, #60]	; 142d4 <flatcc_builder_create_struct@@Base+0x130>
   14294:	ldr	r3, [pc, #60]	; 142d8 <flatcc_builder_create_struct@@Base+0x134>
   14298:	movw	r2, #783	; 0x30f
   1429c:	add	r0, pc, r0
   142a0:	add	r1, pc, r1
   142a4:	add	r3, pc, r3
   142a8:	bl	127a8 <__assert_fail@plt>
   142ac:	ldr	r0, [pc, #40]	; 142dc <flatcc_builder_create_struct@@Base+0x138>
   142b0:	ldr	r1, [pc, #40]	; 142e0 <flatcc_builder_create_struct@@Base+0x13c>
   142b4:	ldr	r3, [pc, #40]	; 142e4 <flatcc_builder_create_struct@@Base+0x140>
   142b8:	movw	r2, #647	; 0x287
   142bc:	add	r0, pc, r0
   142c0:	add	r1, pc, r1
   142c4:	add	r3, pc, r3
   142c8:	bl	127a8 <__assert_fail@plt>
   142cc:	andeq	r7, r1, r0, lsr #28
   142d0:	andeq	r6, r0, r7, lsr #6
   142d4:	andeq	r6, r0, lr, asr #2
   142d8:	andeq	r6, r0, sl, lsr #6
   142dc:	andeq	r7, r0, pc, ror #5
   142e0:	andeq	r6, r0, lr, lsr #2
   142e4:	andeq	r7, r0, r6, lsr #3
   142e8:	andeq	r7, r0, pc, lsr #6
   142ec:	andeq	r6, r0, lr, ror #2
   142f0:	andeq	r7, r0, r6, ror #3

000142f4 <flatcc_builder_start_buffer@@Base>:
   142f4:	push	{r4, r5, r6, r7, fp, lr}
   142f8:	add	fp, sp, #16
   142fc:	mov	r5, r1
   14300:	ldrh	r1, [r0, #128]	; 0x80
   14304:	mov	r6, r3
   14308:	mov	r7, r2
   1430c:	mov	r4, r0
   14310:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   14314:	mov	r1, r0
   14318:	mvn	r0, #0
   1431c:	cmp	r1, #0
   14320:	popne	{r4, r5, r6, r7, fp, pc}
   14324:	mov	r0, #1
   14328:	cmp	r5, #0
   1432c:	strh	r0, [r4, #128]	; 0x80
   14330:	ldrh	r1, [r4, #132]	; 0x84
   14334:	ldr	r2, [r4, #32]
   14338:	strh	r1, [r2, #34]	; 0x22
   1433c:	strh	r7, [r4, #132]	; 0x84
   14340:	ldrh	r1, [r4, #164]	; 0xa4
   14344:	ldr	r2, [r4, #32]
   14348:	strh	r1, [r2, #32]
   1434c:	strh	r6, [r4, #164]	; 0xa4
   14350:	ldr	r1, [r4, #32]
   14354:	ldr	r2, [r4, #144]	; 0x90
   14358:	str	r2, [r1, #20]
   1435c:	ldr	r1, [r4, #32]
   14360:	ldr	r2, [r4, #152]	; 0x98
   14364:	str	r2, [r1, #28]
   14368:	ldr	r3, [r4, #148]	; 0x94
   1436c:	ldr	r1, [r4, #32]
   14370:	ldr	r2, [r4, #136]	; 0x88
   14374:	ldr	r7, [r4, #168]	; 0xa8
   14378:	add	r6, r3, #1
   1437c:	str	r2, [r4, #144]	; 0x90
   14380:	str	r6, [r4, #148]	; 0x94
   14384:	str	r3, [r4, #152]	; 0x98
   14388:	str	r7, [r1, #16]
   1438c:	ldr	r1, [pc, #28]	; 143b0 <flatcc_builder_start_buffer@@Base+0xbc>
   14390:	ldr	r1, [pc, r1]
   14394:	movne	r1, r5
   14398:	ldr	r1, [r1]
   1439c:	str	r1, [r4, #168]	; 0xa8
   143a0:	ldr	r1, [r4, #32]
   143a4:	strh	r0, [r1, #14]
   143a8:	mov	r0, #0
   143ac:	pop	{r4, r5, r6, r7, fp, pc}
   143b0:	andeq	r7, r1, ip, lsr #25
   143b4:	push	{r4, r5, r6, r7, fp, lr}
   143b8:	add	fp, sp, #16
   143bc:	sub	sp, sp, #8
   143c0:	mov	r5, r1
   143c4:	ldr	r1, [r0, #156]	; 0x9c
   143c8:	ldr	r2, [r0, #160]	; 0xa0
   143cc:	mov	r4, r0
   143d0:	add	r0, r1, #1
   143d4:	cmp	r1, r2
   143d8:	str	r0, [r4, #156]	; 0x9c
   143dc:	bge	143f0 <flatcc_builder_start_buffer@@Base+0xfc>
   143e0:	ldr	r0, [r4, #32]
   143e4:	add	r0, r0, #36	; 0x24
   143e8:	str	r0, [r4, #32]
   143ec:	b	14484 <flatcc_builder_start_buffer@@Base+0x190>
   143f0:	ldr	r2, [r4, #176]	; 0xb0
   143f4:	mvn	r6, #0
   143f8:	cmp	r2, #1
   143fc:	cmpge	r1, r2
   14400:	bge	144bc <flatcc_builder_start_buffer@@Base+0x1c8>
   14404:	add	r7, r0, r0, lsl #3
   14408:	ldr	r0, [r4, #88]	; 0x58
   1440c:	lsl	r2, r7, #2
   14410:	cmp	r2, r0
   14414:	bls	1443c <flatcc_builder_start_buffer@@Base+0x148>
   14418:	ldr	r0, [r4, #40]	; 0x28
   1441c:	ldr	ip, [r4, #48]	; 0x30
   14420:	mov	r3, #4
   14424:	add	r1, r4, #84	; 0x54
   14428:	str	r3, [sp]
   1442c:	mov	r3, #0
   14430:	blx	ip
   14434:	cmp	r0, #0
   14438:	bne	144c8 <flatcc_builder_start_buffer@@Base+0x1d4>
   1443c:	ldr	r1, [r4, #84]	; 0x54
   14440:	mvn	r0, #35	; 0x23
   14444:	add	r0, r0, r7, lsl #2
   14448:	adds	r0, r0, r1
   1444c:	str	r0, [r4, #32]
   14450:	beq	144bc <flatcc_builder_start_buffer@@Base+0x1c8>
   14454:	ldr	r1, [r4, #88]	; 0x58
   14458:	movw	r3, #36409	; 0x8e39
   1445c:	ldr	r2, [r4, #176]	; 0xb0
   14460:	movt	r3, #14563	; 0x38e3
   14464:	umull	r1, r3, r1, r3
   14468:	cmp	r2, r3, lsr #3
   1446c:	lsr	r1, r3, #3
   14470:	mov	r3, r1
   14474:	movlt	r3, r2
   14478:	cmp	r2, #0
   1447c:	movle	r3, r1
   14480:	str	r3, [r4, #160]	; 0xa0
   14484:	ldr	r1, [r4, #20]
   14488:	mvn	r3, #3
   1448c:	mov	r6, #0
   14490:	str	r1, [r0, #8]
   14494:	ldrh	r2, [r4, #130]	; 0x82
   14498:	strh	r2, [r0, #12]
   1449c:	strh	r5, [r4, #130]	; 0x82
   144a0:	ldr	r2, [r4, #28]
   144a4:	stm	r0, {r2, r3}
   144a8:	add	r0, r1, r2
   144ac:	str	r6, [r4, #20]
   144b0:	add	r0, r0, #7
   144b4:	bic	r0, r0, #7
   144b8:	str	r0, [r4, #28]
   144bc:	mov	r0, r6
   144c0:	sub	sp, fp, #16
   144c4:	pop	{r4, r5, r6, r7, fp, pc}
   144c8:	ldr	r0, [pc, #24]	; 144e8 <flatcc_builder_start_buffer@@Base+0x1f4>
   144cc:	ldr	r1, [pc, #24]	; 144ec <flatcc_builder_start_buffer@@Base+0x1f8>
   144d0:	ldr	r3, [pc, #24]	; 144f0 <flatcc_builder_start_buffer@@Base+0x1fc>
   144d4:	mov	r2, #308	; 0x134
   144d8:	add	r0, pc, r0
   144dc:	add	r1, pc, r1
   144e0:	add	r3, pc, r3
   144e4:	bl	127a8 <__assert_fail@plt>
   144e8:	ldrdeq	r7, [r0], -r3
   144ec:	andeq	r5, r0, r2, lsl pc
   144f0:	andeq	r6, r0, r5, lsl #30

000144f4 <flatcc_builder_end_buffer@@Base>:
   144f4:	push	{r4, r5, r6, sl, fp, lr}
   144f8:	add	fp, sp, #16
   144fc:	sub	sp, sp, #8
   14500:	mov	r4, r0
   14504:	ldr	r0, [r0, #32]
   14508:	ldrh	r0, [r0, #14]
   1450c:	cmp	r0, #1
   14510:	bne	14604 <flatcc_builder_end_buffer@@Base+0x110>
   14514:	mov	r3, r1
   14518:	ldr	r1, [r4, #152]	; 0x98
   1451c:	ldrh	r0, [r4, #164]	; 0xa4
   14520:	ldrh	r2, [r4, #132]	; 0x84
   14524:	cmp	r1, #0
   14528:	ldrh	r1, [r4, #128]	; 0x80
   1452c:	and	r0, r0, #2
   14530:	orrne	r0, r0, #1
   14534:	cmp	r1, r2
   14538:	movcc	r1, r2
   1453c:	strhcc	r2, [r4, #128]	; 0x80
   14540:	str	r0, [sp, #4]
   14544:	mov	r0, r4
   14548:	str	r1, [sp]
   1454c:	add	r1, r4, #168	; 0xa8
   14550:	bl	13f68 <flatcc_builder_create_buffer@@Base>
   14554:	mov	r6, r0
   14558:	cmp	r0, #0
   1455c:	beq	145f8 <flatcc_builder_end_buffer@@Base+0x104>
   14560:	ldr	r1, [r4, #32]
   14564:	ldr	r0, [r4, #16]
   14568:	ldr	r2, [r4, #20]
   1456c:	ldr	r3, [r1, #20]
   14570:	str	r3, [r4, #144]	; 0x90
   14574:	ldr	r3, [r1, #28]
   14578:	str	r3, [r4, #152]	; 0x98
   1457c:	ldr	r3, [r1, #16]
   14580:	str	r3, [r4, #168]	; 0xa8
   14584:	ldrh	r1, [r1, #32]
   14588:	strh	r1, [r4, #164]	; 0xa4
   1458c:	mov	r1, #0
   14590:	bl	12778 <memset@plt>
   14594:	ldr	r0, [r4, #32]
   14598:	ldr	r1, [r4, #60]	; 0x3c
   1459c:	ldr	r2, [r4, #64]	; 0x40
   145a0:	ldr	r3, [r0, #8]
   145a4:	str	r3, [r4, #20]
   145a8:	ldr	r3, [r0]
   145ac:	str	r3, [r4, #28]
   145b0:	add	r1, r1, r3
   145b4:	ldr	r5, [r0, #4]
   145b8:	str	r1, [r4, #16]
   145bc:	sub	r1, r2, r3
   145c0:	cmp	r1, r5
   145c4:	movhi	r1, r5
   145c8:	str	r1, [r4, #24]
   145cc:	ldrh	r1, [r4, #130]	; 0x82
   145d0:	ldrh	r2, [r4, #128]	; 0x80
   145d4:	cmp	r2, r1
   145d8:	strhcc	r1, [r4, #128]	; 0x80
   145dc:	ldrh	r1, [r0, #12]
   145e0:	sub	r0, r0, #36	; 0x24
   145e4:	str	r0, [r4, #32]
   145e8:	strh	r1, [r4, #130]	; 0x82
   145ec:	ldr	r0, [r4, #156]	; 0x9c
   145f0:	sub	r0, r0, #1
   145f4:	str	r0, [r4, #156]	; 0x9c
   145f8:	mov	r0, r6
   145fc:	sub	sp, fp, #16
   14600:	pop	{r4, r5, r6, sl, fp, pc}
   14604:	ldr	r0, [pc, #24]	; 14624 <flatcc_builder_end_buffer@@Base+0x130>
   14608:	ldr	r1, [pc, #24]	; 14628 <flatcc_builder_end_buffer@@Base+0x134>
   1460c:	ldr	r3, [pc, #24]	; 1462c <flatcc_builder_end_buffer@@Base+0x138>
   14610:	movw	r2, #838	; 0x346
   14614:	add	r0, pc, r0
   14618:	add	r1, pc, r1
   1461c:	add	r3, pc, r3
   14620:	bl	127a8 <__assert_fail@plt>
   14624:	andeq	r6, r0, r0, lsr #32
   14628:	ldrdeq	r5, [r0], -r6
   1462c:	andeq	r6, r0, r4, asr #32

00014630 <flatcc_builder_start_struct@@Base>:
   14630:	push	{r4, r5, r6, r7, fp, lr}
   14634:	add	fp, sp, #16
   14638:	sub	sp, sp, #8
   1463c:	mov	r6, r1
   14640:	mov	r1, r2
   14644:	mov	r4, r0
   14648:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   1464c:	mov	r5, #0
   14650:	cmp	r0, #0
   14654:	bne	14704 <flatcc_builder_start_struct@@Base+0xd4>
   14658:	ldr	r2, [r4, #32]
   1465c:	mov	r0, #2
   14660:	mvn	r7, #3
   14664:	strh	r0, [r2, #14]
   14668:	ldr	r1, [r4, #28]
   1466c:	ldr	r3, [r4, #64]	; 0x40
   14670:	ldr	r0, [r4, #60]	; 0x3c
   14674:	sub	r3, r3, r1
   14678:	add	r0, r0, r1
   1467c:	cmn	r3, #4
   14680:	str	r0, [r4, #16]
   14684:	movcs	r3, r7
   14688:	str	r3, [r4, #24]
   1468c:	str	r7, [r2, #4]
   14690:	ldr	r7, [r4, #20]
   14694:	add	r2, r7, r6
   14698:	cmp	r2, r3
   1469c:	str	r2, [r4, #20]
   146a0:	bcc	14700 <flatcc_builder_start_struct@@Base+0xd0>
   146a4:	ldr	r0, [r4, #40]	; 0x28
   146a8:	ldr	r6, [r4, #48]	; 0x30
   146ac:	add	r1, r1, r2
   146b0:	mov	r3, #1
   146b4:	str	r3, [sp]
   146b8:	add	r2, r1, #1
   146bc:	add	r1, r4, #60	; 0x3c
   146c0:	mov	r3, #1
   146c4:	blx	r6
   146c8:	cmp	r0, #0
   146cc:	bne	14704 <flatcc_builder_start_struct@@Base+0xd4>
   146d0:	ldr	r1, [r4, #28]
   146d4:	ldr	r0, [r4, #60]	; 0x3c
   146d8:	ldr	r3, [r4, #64]	; 0x40
   146dc:	ldr	r2, [r4, #32]
   146e0:	add	r0, r0, r1
   146e4:	sub	r1, r3, r1
   146e8:	mvn	r3, #3
   146ec:	cmn	r1, #4
   146f0:	str	r0, [r4, #16]
   146f4:	movcs	r1, r3
   146f8:	str	r1, [r4, #24]
   146fc:	str	r3, [r2, #4]
   14700:	add	r5, r0, r7
   14704:	mov	r0, r5
   14708:	sub	sp, fp, #16
   1470c:	pop	{r4, r5, r6, r7, fp, pc}

00014710 <flatcc_builder_struct_edit@@Base>:
   14710:	ldr	r0, [r0, #16]
   14714:	bx	lr

00014718 <flatcc_builder_end_struct@@Base>:
   14718:	push	{r4, r5, fp, lr}
   1471c:	add	fp, sp, #8
   14720:	mov	r4, r0
   14724:	ldr	r0, [r0, #32]
   14728:	ldrh	r0, [r0, #14]
   1472c:	cmp	r0, #2
   14730:	bne	147d0 <flatcc_builder_end_struct@@Base+0xb8>
   14734:	ldrh	r3, [r4, #130]	; 0x82
   14738:	ldr	r1, [r4, #16]
   1473c:	ldr	r2, [r4, #20]
   14740:	mov	r0, r4
   14744:	bl	141a4 <flatcc_builder_create_struct@@Base>
   14748:	mov	r5, r0
   1474c:	cmp	r0, #0
   14750:	beq	147c8 <flatcc_builder_end_struct@@Base+0xb0>
   14754:	ldr	r0, [r4, #16]
   14758:	ldr	r2, [r4, #20]
   1475c:	mov	r1, #0
   14760:	bl	12778 <memset@plt>
   14764:	ldr	r0, [r4, #32]
   14768:	ldr	r1, [r4, #60]	; 0x3c
   1476c:	ldr	ip, [r4, #64]	; 0x40
   14770:	ldr	r3, [r0, #8]
   14774:	str	r3, [r4, #20]
   14778:	ldr	r3, [r0]
   1477c:	str	r3, [r4, #28]
   14780:	add	r1, r1, r3
   14784:	ldr	r2, [r0, #4]
   14788:	str	r1, [r4, #16]
   1478c:	sub	r1, ip, r3
   14790:	cmp	r1, r2
   14794:	movhi	r1, r2
   14798:	str	r1, [r4, #24]
   1479c:	ldrh	r1, [r4, #130]	; 0x82
   147a0:	ldrh	r2, [r4, #128]	; 0x80
   147a4:	cmp	r2, r1
   147a8:	strhcc	r1, [r4, #128]	; 0x80
   147ac:	ldrh	r1, [r0, #12]
   147b0:	sub	r0, r0, #36	; 0x24
   147b4:	str	r0, [r4, #32]
   147b8:	strh	r1, [r4, #130]	; 0x82
   147bc:	ldr	r0, [r4, #156]	; 0x9c
   147c0:	sub	r0, r0, #1
   147c4:	str	r0, [r4, #156]	; 0x9c
   147c8:	mov	r0, r5
   147cc:	pop	{r4, r5, fp, pc}
   147d0:	ldr	r0, [pc, #24]	; 147f0 <flatcc_builder_end_struct@@Base+0xd8>
   147d4:	ldr	r1, [pc, #24]	; 147f4 <flatcc_builder_end_struct@@Base+0xdc>
   147d8:	ldr	r3, [pc, #24]	; 147f8 <flatcc_builder_end_struct@@Base+0xe0>
   147dc:	mov	r2, #872	; 0x368
   147e0:	add	r0, pc, r0
   147e4:	add	r1, pc, r1
   147e8:	add	r3, pc, r3
   147ec:	bl	127a8 <__assert_fail@plt>
   147f0:	ldrdeq	r5, [r0], -r9
   147f4:	andeq	r5, r0, sl, lsl #24
   147f8:	strdeq	r5, [r0], -sp

000147fc <flatcc_builder_extend_vector@@Base>:
   147fc:	push	{r4, r5, fp, lr}
   14800:	add	fp, sp, #8
   14804:	sub	sp, sp, #8
   14808:	mov	r4, r0
   1480c:	ldr	r0, [r0, #32]
   14810:	ldr	r2, [r0, #20]
   14814:	adds	r2, r2, r1
   14818:	bcs	148d0 <flatcc_builder_extend_vector@@Base+0xd4>
   1481c:	ldr	r3, [r0, #24]
   14820:	cmp	r2, r3
   14824:	bhi	148d0 <flatcc_builder_extend_vector@@Base+0xd4>
   14828:	str	r2, [r0, #20]
   1482c:	ldr	r2, [r4, #32]
   14830:	ldr	r5, [r4, #20]
   14834:	ldr	r0, [r4, #24]
   14838:	ldr	r2, [r2, #16]
   1483c:	mla	r1, r2, r1, r5
   14840:	cmp	r1, r0
   14844:	str	r1, [r4, #20]
   14848:	bcs	14854 <flatcc_builder_extend_vector@@Base+0x58>
   1484c:	ldr	r0, [r4, #16]
   14850:	b	148c4 <flatcc_builder_extend_vector@@Base+0xc8>
   14854:	ldr	r2, [r4, #28]
   14858:	ldr	r0, [r4, #40]	; 0x28
   1485c:	ldr	ip, [r4, #48]	; 0x30
   14860:	mov	r3, #1
   14864:	str	r3, [sp]
   14868:	mov	r3, #1
   1486c:	add	r1, r1, r2
   14870:	add	r2, r1, #1
   14874:	add	r1, r4, #60	; 0x3c
   14878:	blx	ip
   1487c:	mov	r1, r0
   14880:	mov	r0, #0
   14884:	cmp	r1, #0
   14888:	beq	14894 <flatcc_builder_extend_vector@@Base+0x98>
   1488c:	sub	sp, fp, #8
   14890:	pop	{r4, r5, fp, pc}
   14894:	ldr	r1, [r4, #28]
   14898:	ldr	r0, [r4, #60]	; 0x3c
   1489c:	ldr	r3, [r4, #64]	; 0x40
   148a0:	ldr	r2, [r4, #32]
   148a4:	add	r0, r0, r1
   148a8:	sub	r1, r3, r1
   148ac:	mvn	r3, #3
   148b0:	cmn	r1, #4
   148b4:	str	r0, [r4, #16]
   148b8:	movcs	r1, r3
   148bc:	str	r1, [r4, #24]
   148c0:	str	r3, [r2, #4]
   148c4:	add	r0, r0, r5
   148c8:	sub	sp, fp, #8
   148cc:	pop	{r4, r5, fp, pc}
   148d0:	ldr	r0, [pc, #24]	; 148f0 <flatcc_builder_extend_vector@@Base+0xf4>
   148d4:	ldr	r1, [pc, #24]	; 148f4 <flatcc_builder_extend_vector@@Base+0xf8>
   148d8:	ldr	r3, [pc, #24]	; 148f8 <flatcc_builder_extend_vector@@Base+0xfc>
   148dc:	mov	r2, #892	; 0x37c
   148e0:	add	r0, pc, r0
   148e4:	add	r1, pc, r1
   148e8:	add	r3, pc, r3
   148ec:	bl	127a8 <__assert_fail@plt>
   148f0:	ldrdeq	r6, [r0], -r4
   148f4:	andeq	r5, r0, sl, lsl #22
   148f8:	andeq	r6, r0, r7, ror #23

000148fc <flatcc_builder_vector_push@@Base>:
   148fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14900:	add	fp, sp, #24
   14904:	sub	sp, sp, #8
   14908:	mov	r5, r0
   1490c:	ldr	r0, [r0, #32]
   14910:	mov	r8, r1
   14914:	ldrh	r1, [r0, #14]
   14918:	cmp	r1, #4
   1491c:	bne	149f4 <flatcc_builder_vector_push@@Base+0xf8>
   14920:	ldr	r1, [r0, #20]
   14924:	ldr	r2, [r0, #24]
   14928:	cmp	r1, r2
   1492c:	bhi	14a14 <flatcc_builder_vector_push@@Base+0x118>
   14930:	add	r1, r1, #1
   14934:	str	r1, [r0, #20]
   14938:	ldr	r1, [r5, #32]
   1493c:	ldr	r4, [r5, #20]
   14940:	ldr	r0, [r5, #24]
   14944:	ldr	r6, [r1, #16]
   14948:	add	r1, r4, r6
   1494c:	cmp	r1, r0
   14950:	str	r1, [r5, #20]
   14954:	bcs	14978 <flatcc_builder_vector_push@@Base+0x7c>
   14958:	ldr	r0, [r5, #16]
   1495c:	adds	r7, r0, r4
   14960:	beq	149e4 <flatcc_builder_vector_push@@Base+0xe8>
   14964:	mov	r0, r7
   14968:	mov	r1, r8
   1496c:	mov	r2, r6
   14970:	bl	12718 <memcpy@plt>
   14974:	b	149e8 <flatcc_builder_vector_push@@Base+0xec>
   14978:	ldr	r2, [r5, #28]
   1497c:	ldr	r0, [r5, #40]	; 0x28
   14980:	ldr	r7, [r5, #48]	; 0x30
   14984:	mov	r3, #1
   14988:	str	r3, [sp]
   1498c:	mov	r3, #1
   14990:	add	r1, r1, r2
   14994:	add	r2, r1, #1
   14998:	add	r1, r5, #60	; 0x3c
   1499c:	blx	r7
   149a0:	mov	r7, #0
   149a4:	cmp	r0, #0
   149a8:	bne	149e8 <flatcc_builder_vector_push@@Base+0xec>
   149ac:	ldr	r1, [r5, #28]
   149b0:	ldr	r0, [r5, #60]	; 0x3c
   149b4:	ldr	r3, [r5, #64]	; 0x40
   149b8:	ldr	r2, [r5, #32]
   149bc:	add	r0, r0, r1
   149c0:	sub	r1, r3, r1
   149c4:	mvn	r3, #3
   149c8:	cmn	r1, #4
   149cc:	str	r0, [r5, #16]
   149d0:	movcs	r1, r3
   149d4:	str	r1, [r5, #24]
   149d8:	str	r3, [r2, #4]
   149dc:	adds	r7, r0, r4
   149e0:	bne	14964 <flatcc_builder_vector_push@@Base+0x68>
   149e4:	mov	r7, #0
   149e8:	mov	r0, r7
   149ec:	sub	sp, fp, #24
   149f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149f4:	ldr	r0, [pc, #56]	; 14a34 <flatcc_builder_vector_push@@Base+0x138>
   149f8:	ldr	r1, [pc, #56]	; 14a38 <flatcc_builder_vector_push@@Base+0x13c>
   149fc:	ldr	r3, [pc, #56]	; 14a3c <flatcc_builder_vector_push@@Base+0x140>
   14a00:	movw	r2, #907	; 0x38b
   14a04:	add	r0, pc, r0
   14a08:	add	r1, pc, r1
   14a0c:	add	r3, pc, r3
   14a10:	bl	127a8 <__assert_fail@plt>
   14a14:	ldr	r0, [pc, #36]	; 14a40 <flatcc_builder_vector_push@@Base+0x144>
   14a18:	ldr	r1, [pc, #36]	; 14a44 <flatcc_builder_vector_push@@Base+0x148>
   14a1c:	ldr	r3, [pc, #36]	; 14a48 <flatcc_builder_vector_push@@Base+0x14c>
   14a20:	mov	r2, #908	; 0x38c
   14a24:	add	r0, pc, r0
   14a28:	add	r1, pc, r1
   14a2c:	add	r3, pc, r3
   14a30:	bl	127a8 <__assert_fail@plt>
   14a34:	andeq	r5, r0, r4, lsr #26
   14a38:	andeq	r5, r0, r6, ror #19
   14a3c:	andeq	r5, r0, r8, asr #26
   14a40:	andeq	r5, r0, r3, ror sp
   14a44:	andeq	r5, r0, r6, asr #19
   14a48:	andeq	r5, r0, r8, lsr #26

00014a4c <flatcc_builder_append_vector@@Base>:
   14a4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a50:	add	fp, sp, #24
   14a54:	sub	sp, sp, #8
   14a58:	mov	r6, r0
   14a5c:	ldr	r0, [r0, #32]
   14a60:	mov	r8, r1
   14a64:	ldrh	r1, [r0, #14]
   14a68:	cmp	r1, #4
   14a6c:	bne	14b6c <flatcc_builder_append_vector@@Base+0x120>
   14a70:	ldr	r1, [r0, #20]
   14a74:	mov	r5, r2
   14a78:	adds	r1, r1, r2
   14a7c:	bcs	14b4c <flatcc_builder_append_vector@@Base+0x100>
   14a80:	ldr	r2, [r0, #24]
   14a84:	cmp	r1, r2
   14a88:	bhi	14b4c <flatcc_builder_append_vector@@Base+0x100>
   14a8c:	str	r1, [r0, #20]
   14a90:	ldr	r1, [r6, #32]
   14a94:	ldr	r4, [r6, #20]
   14a98:	ldr	r0, [r6, #24]
   14a9c:	ldr	r9, [r1, #16]
   14aa0:	mla	r1, r9, r5, r4
   14aa4:	cmp	r1, r0
   14aa8:	str	r1, [r6, #20]
   14aac:	bcs	14ad0 <flatcc_builder_append_vector@@Base+0x84>
   14ab0:	ldr	r0, [r6, #16]
   14ab4:	adds	r7, r0, r4
   14ab8:	beq	14b3c <flatcc_builder_append_vector@@Base+0xf0>
   14abc:	mul	r2, r9, r5
   14ac0:	mov	r0, r7
   14ac4:	mov	r1, r8
   14ac8:	bl	12718 <memcpy@plt>
   14acc:	b	14b40 <flatcc_builder_append_vector@@Base+0xf4>
   14ad0:	ldr	r2, [r6, #28]
   14ad4:	ldr	r0, [r6, #40]	; 0x28
   14ad8:	ldr	r7, [r6, #48]	; 0x30
   14adc:	mov	r3, #1
   14ae0:	str	r3, [sp]
   14ae4:	mov	r3, #1
   14ae8:	add	r1, r1, r2
   14aec:	add	r2, r1, #1
   14af0:	add	r1, r6, #60	; 0x3c
   14af4:	blx	r7
   14af8:	mov	r7, #0
   14afc:	cmp	r0, #0
   14b00:	bne	14b40 <flatcc_builder_append_vector@@Base+0xf4>
   14b04:	ldr	r1, [r6, #28]
   14b08:	ldr	r0, [r6, #60]	; 0x3c
   14b0c:	ldr	r3, [r6, #64]	; 0x40
   14b10:	ldr	r2, [r6, #32]
   14b14:	add	r0, r0, r1
   14b18:	sub	r1, r3, r1
   14b1c:	mvn	r3, #3
   14b20:	cmn	r1, #4
   14b24:	str	r0, [r6, #16]
   14b28:	movcs	r1, r3
   14b2c:	str	r1, [r6, #24]
   14b30:	str	r3, [r2, #4]
   14b34:	adds	r7, r0, r4
   14b38:	bne	14abc <flatcc_builder_append_vector@@Base+0x70>
   14b3c:	mov	r7, #0
   14b40:	mov	r0, r7
   14b44:	sub	sp, fp, #24
   14b48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14b4c:	ldr	r0, [pc, #68]	; 14b98 <flatcc_builder_append_vector@@Base+0x14c>
   14b50:	ldr	r1, [pc, #68]	; 14b9c <flatcc_builder_append_vector@@Base+0x150>
   14b54:	ldr	r3, [pc, #68]	; 14ba0 <flatcc_builder_append_vector@@Base+0x154>
   14b58:	mov	r2, #892	; 0x37c
   14b5c:	add	r0, pc, r0
   14b60:	add	r1, pc, r1
   14b64:	add	r3, pc, r3
   14b68:	bl	127a8 <__assert_fail@plt>
   14b6c:	ldr	r0, [pc, #24]	; 14b8c <flatcc_builder_append_vector@@Base+0x140>
   14b70:	ldr	r1, [pc, #24]	; 14b90 <flatcc_builder_append_vector@@Base+0x144>
   14b74:	ldr	r3, [pc, #24]	; 14b94 <flatcc_builder_append_vector@@Base+0x148>
   14b78:	movw	r2, #915	; 0x393
   14b7c:	add	r0, pc, r0
   14b80:	add	r1, pc, r1
   14b84:	add	r3, pc, r3
   14b88:	bl	127a8 <__assert_fail@plt>
   14b8c:	andeq	r5, r0, ip, lsr #23
   14b90:	andeq	r5, r0, lr, ror #16
   14b94:	andeq	r5, r0, r0, asr ip
   14b98:	andeq	r6, r0, r8, asr r9
   14b9c:	andeq	r5, r0, lr, lsl #17
   14ba0:	andeq	r6, r0, fp, ror #18

00014ba4 <flatcc_builder_extend_offset_vector@@Base>:
   14ba4:	push	{r4, r5, fp, lr}
   14ba8:	add	fp, sp, #8
   14bac:	sub	sp, sp, #8
   14bb0:	mov	r4, r0
   14bb4:	ldr	r0, [r0, #32]
   14bb8:	ldr	r2, [r0, #20]
   14bbc:	adds	r2, r2, r1
   14bc0:	cmpcc	r2, #1073741824	; 0x40000000
   14bc4:	bcc	14be8 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14bc8:	ldr	r0, [pc, #184]	; 14c88 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14bcc:	ldr	r1, [pc, #184]	; 14c8c <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14bd0:	ldr	r3, [pc, #184]	; 14c90 <flatcc_builder_extend_offset_vector@@Base+0xec>
   14bd4:	mov	r2, #892	; 0x37c
   14bd8:	add	r0, pc, r0
   14bdc:	add	r1, pc, r1
   14be0:	add	r3, pc, r3
   14be4:	bl	127a8 <__assert_fail@plt>
   14be8:	str	r2, [r0, #20]
   14bec:	ldr	r5, [r4, #20]
   14bf0:	ldr	r0, [r4, #24]
   14bf4:	add	r1, r5, r1, lsl #2
   14bf8:	cmp	r1, r0
   14bfc:	str	r1, [r4, #20]
   14c00:	bcs	14c0c <flatcc_builder_extend_offset_vector@@Base+0x68>
   14c04:	ldr	r0, [r4, #16]
   14c08:	b	14c7c <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14c0c:	ldr	r2, [r4, #28]
   14c10:	ldr	r0, [r4, #40]	; 0x28
   14c14:	ldr	ip, [r4, #48]	; 0x30
   14c18:	mov	r3, #1
   14c1c:	str	r3, [sp]
   14c20:	mov	r3, #1
   14c24:	add	r1, r1, r2
   14c28:	add	r2, r1, #1
   14c2c:	add	r1, r4, #60	; 0x3c
   14c30:	blx	ip
   14c34:	mov	r1, r0
   14c38:	mov	r0, #0
   14c3c:	cmp	r1, #0
   14c40:	beq	14c4c <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14c44:	sub	sp, fp, #8
   14c48:	pop	{r4, r5, fp, pc}
   14c4c:	ldr	r1, [r4, #28]
   14c50:	ldr	r0, [r4, #60]	; 0x3c
   14c54:	ldr	r3, [r4, #64]	; 0x40
   14c58:	ldr	r2, [r4, #32]
   14c5c:	add	r0, r0, r1
   14c60:	sub	r1, r3, r1
   14c64:	mvn	r3, #3
   14c68:	cmn	r1, #4
   14c6c:	str	r0, [r4, #16]
   14c70:	movcs	r1, r3
   14c74:	str	r1, [r4, #24]
   14c78:	str	r3, [r2, #4]
   14c7c:	add	r0, r0, r5
   14c80:	sub	sp, fp, #8
   14c84:	pop	{r4, r5, fp, pc}
   14c88:	ldrdeq	r6, [r0], -ip
   14c8c:	andeq	r5, r0, r2, lsl r8
   14c90:	andeq	r6, r0, pc, ror #17

00014c94 <flatcc_builder_offset_vector_push@@Base>:
   14c94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c98:	add	fp, sp, #24
   14c9c:	sub	sp, sp, #8
   14ca0:	mov	r6, r0
   14ca4:	ldr	r0, [r0, #32]
   14ca8:	mov	r8, r1
   14cac:	ldrh	r1, [r0, #14]
   14cb0:	cmp	r1, #5
   14cb4:	bne	14d68 <flatcc_builder_offset_vector_push@@Base+0xd4>
   14cb8:	ldr	r1, [r0, #20]
   14cbc:	mov	r5, #0
   14cc0:	cmn	r1, #-1073741823	; 0xc0000001
   14cc4:	beq	14d5c <flatcc_builder_offset_vector_push@@Base+0xc8>
   14cc8:	add	r1, r1, #1
   14ccc:	str	r1, [r0, #20]
   14cd0:	ldr	r7, [r6, #20]
   14cd4:	ldr	r0, [r6, #24]
   14cd8:	add	r1, r7, #4
   14cdc:	cmp	r1, r0
   14ce0:	str	r1, [r6, #20]
   14ce4:	bcs	14cf0 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14ce8:	ldr	r0, [r6, #16]
   14cec:	b	14d50 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14cf0:	ldr	r1, [r6, #28]
   14cf4:	ldr	r0, [r6, #40]	; 0x28
   14cf8:	ldr	r4, [r6, #48]	; 0x30
   14cfc:	mov	r2, #1
   14d00:	mov	r3, #1
   14d04:	str	r2, [sp]
   14d08:	add	r1, r7, r1
   14d0c:	add	r2, r1, #5
   14d10:	add	r1, r6, #60	; 0x3c
   14d14:	blx	r4
   14d18:	cmp	r0, #0
   14d1c:	bne	14d5c <flatcc_builder_offset_vector_push@@Base+0xc8>
   14d20:	ldr	r1, [r6, #28]
   14d24:	ldr	r0, [r6, #60]	; 0x3c
   14d28:	ldr	r3, [r6, #64]	; 0x40
   14d2c:	ldr	r2, [r6, #32]
   14d30:	add	r0, r0, r1
   14d34:	sub	r1, r3, r1
   14d38:	mvn	r3, #3
   14d3c:	cmn	r1, #4
   14d40:	str	r0, [r6, #16]
   14d44:	movcs	r1, r3
   14d48:	str	r1, [r6, #24]
   14d4c:	str	r3, [r2, #4]
   14d50:	adds	r0, r0, r7
   14d54:	movne	r5, r0
   14d58:	strne	r8, [r0]
   14d5c:	mov	r0, r5
   14d60:	sub	sp, fp, #24
   14d64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d68:	ldr	r0, [pc, #24]	; 14d88 <flatcc_builder_offset_vector_push@@Base+0xf4>
   14d6c:	ldr	r1, [pc, #24]	; 14d8c <flatcc_builder_offset_vector_push@@Base+0xf8>
   14d70:	ldr	r3, [pc, #24]	; 14d90 <flatcc_builder_offset_vector_push@@Base+0xfc>
   14d74:	movw	r2, #934	; 0x3a6
   14d78:	add	r0, pc, r0
   14d7c:	add	r1, pc, r1
   14d80:	add	r3, pc, r3
   14d84:	bl	127a8 <__assert_fail@plt>
   14d88:	andeq	r5, r0, r9, lsr #21
   14d8c:	andeq	r5, r0, r2, ror r6
   14d90:	ldrdeq	r5, [r0], -r4

00014d94 <flatcc_builder_append_offset_vector@@Base>:
   14d94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d98:	add	fp, sp, #24
   14d9c:	sub	sp, sp, #8
   14da0:	mov	r6, r0
   14da4:	ldr	r0, [r0, #32]
   14da8:	mov	r8, r1
   14dac:	ldrh	r1, [r0, #14]
   14db0:	cmp	r1, #5
   14db4:	bne	14ea4 <flatcc_builder_append_offset_vector@@Base+0x110>
   14db8:	ldr	r1, [r0, #20]
   14dbc:	mov	r5, r2
   14dc0:	adds	r1, r1, r2
   14dc4:	cmpcc	r1, #1073741824	; 0x40000000
   14dc8:	bcc	14dec <flatcc_builder_append_offset_vector@@Base+0x58>
   14dcc:	ldr	r0, [pc, #252]	; 14ed0 <flatcc_builder_append_offset_vector@@Base+0x13c>
   14dd0:	ldr	r1, [pc, #252]	; 14ed4 <flatcc_builder_append_offset_vector@@Base+0x140>
   14dd4:	ldr	r3, [pc, #252]	; 14ed8 <flatcc_builder_append_offset_vector@@Base+0x144>
   14dd8:	mov	r2, #892	; 0x37c
   14ddc:	add	r0, pc, r0
   14de0:	add	r1, pc, r1
   14de4:	add	r3, pc, r3
   14de8:	bl	127a8 <__assert_fail@plt>
   14dec:	str	r1, [r0, #20]
   14df0:	ldr	r4, [r6, #20]
   14df4:	ldr	r0, [r6, #24]
   14df8:	add	r1, r4, r5, lsl #2
   14dfc:	cmp	r1, r0
   14e00:	str	r1, [r6, #20]
   14e04:	bcs	14e28 <flatcc_builder_append_offset_vector@@Base+0x94>
   14e08:	ldr	r0, [r6, #16]
   14e0c:	adds	r7, r0, r4
   14e10:	beq	14e94 <flatcc_builder_append_offset_vector@@Base+0x100>
   14e14:	lsl	r2, r5, #2
   14e18:	mov	r0, r7
   14e1c:	mov	r1, r8
   14e20:	bl	12718 <memcpy@plt>
   14e24:	b	14e98 <flatcc_builder_append_offset_vector@@Base+0x104>
   14e28:	ldr	r2, [r6, #28]
   14e2c:	ldr	r0, [r6, #40]	; 0x28
   14e30:	ldr	r7, [r6, #48]	; 0x30
   14e34:	mov	r3, #1
   14e38:	str	r3, [sp]
   14e3c:	mov	r3, #1
   14e40:	add	r1, r1, r2
   14e44:	add	r2, r1, #1
   14e48:	add	r1, r6, #60	; 0x3c
   14e4c:	blx	r7
   14e50:	mov	r7, #0
   14e54:	cmp	r0, #0
   14e58:	bne	14e98 <flatcc_builder_append_offset_vector@@Base+0x104>
   14e5c:	ldr	r1, [r6, #28]
   14e60:	ldr	r0, [r6, #60]	; 0x3c
   14e64:	ldr	r3, [r6, #64]	; 0x40
   14e68:	ldr	r2, [r6, #32]
   14e6c:	add	r0, r0, r1
   14e70:	sub	r1, r3, r1
   14e74:	mvn	r3, #3
   14e78:	cmn	r1, #4
   14e7c:	str	r0, [r6, #16]
   14e80:	movcs	r1, r3
   14e84:	str	r1, [r6, #24]
   14e88:	str	r3, [r2, #4]
   14e8c:	adds	r7, r0, r4
   14e90:	bne	14e14 <flatcc_builder_append_offset_vector@@Base+0x80>
   14e94:	mov	r7, #0
   14e98:	mov	r0, r7
   14e9c:	sub	sp, fp, #24
   14ea0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ea4:	ldr	r0, [pc, #24]	; 14ec4 <flatcc_builder_append_offset_vector@@Base+0x130>
   14ea8:	ldr	r1, [pc, #24]	; 14ec8 <flatcc_builder_append_offset_vector@@Base+0x134>
   14eac:	ldr	r3, [pc, #24]	; 14ecc <flatcc_builder_append_offset_vector@@Base+0x138>
   14eb0:	mov	r2, #948	; 0x3b4
   14eb4:	add	r0, pc, r0
   14eb8:	add	r1, pc, r1
   14ebc:	add	r3, pc, r3
   14ec0:	bl	127a8 <__assert_fail@plt>
   14ec4:	andeq	r5, r0, sp, ror #18
   14ec8:	andeq	r5, r0, r6, lsr r5
   14ecc:	strdeq	r5, [r0], -sl
   14ed0:	ldrdeq	r6, [r0], -r8
   14ed4:	andeq	r5, r0, lr, lsl #12
   14ed8:	andeq	r6, r0, fp, ror #13

00014edc <flatcc_builder_extend_string@@Base>:
   14edc:	push	{r4, r5, fp, lr}
   14ee0:	add	fp, sp, #8
   14ee4:	sub	sp, sp, #8
   14ee8:	mov	r4, r0
   14eec:	ldr	r0, [r0, #32]
   14ef0:	ldrh	r2, [r0, #14]
   14ef4:	cmp	r2, #6
   14ef8:	bne	14fa8 <flatcc_builder_extend_string@@Base+0xcc>
   14efc:	ldr	r2, [r0, #20]
   14f00:	adds	r2, r2, r1
   14f04:	bcs	14fc8 <flatcc_builder_extend_string@@Base+0xec>
   14f08:	str	r2, [r0, #20]
   14f0c:	ldr	r5, [r4, #20]
   14f10:	ldr	r0, [r4, #24]
   14f14:	add	r1, r5, r1
   14f18:	cmp	r1, r0
   14f1c:	str	r1, [r4, #20]
   14f20:	bcs	14f2c <flatcc_builder_extend_string@@Base+0x50>
   14f24:	ldr	r0, [r4, #16]
   14f28:	b	14f9c <flatcc_builder_extend_string@@Base+0xc0>
   14f2c:	ldr	r2, [r4, #28]
   14f30:	ldr	r0, [r4, #40]	; 0x28
   14f34:	ldr	ip, [r4, #48]	; 0x30
   14f38:	mov	r3, #1
   14f3c:	str	r3, [sp]
   14f40:	mov	r3, #1
   14f44:	add	r1, r1, r2
   14f48:	add	r2, r1, #1
   14f4c:	add	r1, r4, #60	; 0x3c
   14f50:	blx	ip
   14f54:	mov	r1, r0
   14f58:	mov	r0, #0
   14f5c:	cmp	r1, #0
   14f60:	beq	14f6c <flatcc_builder_extend_string@@Base+0x90>
   14f64:	sub	sp, fp, #8
   14f68:	pop	{r4, r5, fp, pc}
   14f6c:	ldr	r1, [r4, #28]
   14f70:	ldr	r0, [r4, #60]	; 0x3c
   14f74:	ldr	r3, [r4, #64]	; 0x40
   14f78:	ldr	r2, [r4, #32]
   14f7c:	add	r0, r0, r1
   14f80:	sub	r1, r3, r1
   14f84:	mvn	r3, #3
   14f88:	cmn	r1, #4
   14f8c:	str	r0, [r4, #16]
   14f90:	movcs	r1, r3
   14f94:	str	r1, [r4, #24]
   14f98:	str	r3, [r2, #4]
   14f9c:	add	r0, r0, r5
   14fa0:	sub	sp, fp, #8
   14fa4:	pop	{r4, r5, fp, pc}
   14fa8:	ldr	r0, [pc, #56]	; 14fe8 <flatcc_builder_extend_string@@Base+0x10c>
   14fac:	ldr	r1, [pc, #56]	; 14fec <flatcc_builder_extend_string@@Base+0x110>
   14fb0:	ldr	r3, [pc, #56]	; 14ff0 <flatcc_builder_extend_string@@Base+0x114>
   14fb4:	movw	r2, #957	; 0x3bd
   14fb8:	add	r0, pc, r0
   14fbc:	add	r1, pc, r1
   14fc0:	add	r3, pc, r3
   14fc4:	bl	127a8 <__assert_fail@plt>
   14fc8:	ldr	r0, [pc, #36]	; 14ff4 <flatcc_builder_extend_string@@Base+0x118>
   14fcc:	ldr	r1, [pc, #36]	; 14ff8 <flatcc_builder_extend_string@@Base+0x11c>
   14fd0:	ldr	r3, [pc, #36]	; 14ffc <flatcc_builder_extend_string@@Base+0x120>
   14fd4:	mov	r2, #892	; 0x37c
   14fd8:	add	r0, pc, r0
   14fdc:	add	r1, pc, r1
   14fe0:	add	r3, pc, r3
   14fe4:	bl	127a8 <__assert_fail@plt>
   14fe8:	andeq	r5, r0, r2, ror r9
   14fec:	andeq	r5, r0, r2, lsr r4
   14ff0:	muleq	r0, r6, r9
   14ff4:	ldrdeq	r6, [r0], -ip
   14ff8:	andeq	r5, r0, r2, lsl r4
   14ffc:	andeq	r6, r0, pc, ror #9

00015000 <flatcc_builder_append_string@@Base>:
   15000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15004:	add	fp, sp, #24
   15008:	sub	sp, sp, #8
   1500c:	mov	r6, r0
   15010:	ldr	r0, [r0, #32]
   15014:	mov	r8, r1
   15018:	ldrh	r1, [r0, #14]
   1501c:	cmp	r1, #6
   15020:	bne	150ec <flatcc_builder_append_string@@Base+0xec>
   15024:	ldr	r1, [r0, #20]
   15028:	mov	r4, r2
   1502c:	adds	r1, r1, r2
   15030:	bcs	1510c <flatcc_builder_append_string@@Base+0x10c>
   15034:	str	r1, [r0, #20]
   15038:	ldr	r5, [r6, #20]
   1503c:	ldr	r0, [r6, #24]
   15040:	add	r1, r5, r4
   15044:	cmp	r1, r0
   15048:	str	r1, [r6, #20]
   1504c:	bcs	15070 <flatcc_builder_append_string@@Base+0x70>
   15050:	ldr	r0, [r6, #16]
   15054:	adds	r7, r0, r5
   15058:	beq	150dc <flatcc_builder_append_string@@Base+0xdc>
   1505c:	mov	r0, r7
   15060:	mov	r1, r8
   15064:	mov	r2, r4
   15068:	bl	12718 <memcpy@plt>
   1506c:	b	150e0 <flatcc_builder_append_string@@Base+0xe0>
   15070:	ldr	r2, [r6, #28]
   15074:	ldr	r0, [r6, #40]	; 0x28
   15078:	ldr	r7, [r6, #48]	; 0x30
   1507c:	mov	r3, #1
   15080:	str	r3, [sp]
   15084:	mov	r3, #1
   15088:	add	r1, r1, r2
   1508c:	add	r2, r1, #1
   15090:	add	r1, r6, #60	; 0x3c
   15094:	blx	r7
   15098:	mov	r7, #0
   1509c:	cmp	r0, #0
   150a0:	bne	150e0 <flatcc_builder_append_string@@Base+0xe0>
   150a4:	ldr	r1, [r6, #28]
   150a8:	ldr	r0, [r6, #60]	; 0x3c
   150ac:	ldr	r3, [r6, #64]	; 0x40
   150b0:	ldr	r2, [r6, #32]
   150b4:	add	r0, r0, r1
   150b8:	sub	r1, r3, r1
   150bc:	mvn	r3, #3
   150c0:	cmn	r1, #4
   150c4:	str	r0, [r6, #16]
   150c8:	movcs	r1, r3
   150cc:	str	r1, [r6, #24]
   150d0:	str	r3, [r2, #4]
   150d4:	adds	r7, r0, r5
   150d8:	bne	1505c <flatcc_builder_append_string@@Base+0x5c>
   150dc:	mov	r7, #0
   150e0:	mov	r0, r7
   150e4:	sub	sp, fp, #24
   150e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150ec:	ldr	r0, [pc, #56]	; 1512c <flatcc_builder_append_string@@Base+0x12c>
   150f0:	ldr	r1, [pc, #56]	; 15130 <flatcc_builder_append_string@@Base+0x130>
   150f4:	ldr	r3, [pc, #56]	; 15134 <flatcc_builder_append_string@@Base+0x134>
   150f8:	movw	r2, #966	; 0x3c6
   150fc:	add	r0, pc, r0
   15100:	add	r1, pc, r1
   15104:	add	r3, pc, r3
   15108:	bl	127a8 <__assert_fail@plt>
   1510c:	ldr	r0, [pc, #36]	; 15138 <flatcc_builder_append_string@@Base+0x138>
   15110:	ldr	r1, [pc, #36]	; 1513c <flatcc_builder_append_string@@Base+0x13c>
   15114:	ldr	r3, [pc, #36]	; 15140 <flatcc_builder_append_string@@Base+0x140>
   15118:	mov	r2, #892	; 0x37c
   1511c:	add	r0, pc, r0
   15120:	add	r1, pc, r1
   15124:	add	r3, pc, r3
   15128:	bl	127a8 <__assert_fail@plt>
   1512c:	andeq	r5, r0, lr, lsr #16
   15130:	andeq	r5, r0, lr, ror #5
   15134:	muleq	r0, r1, r8
   15138:	muleq	r0, r8, r3
   1513c:	andeq	r5, r0, lr, asr #5
   15140:	andeq	r6, r0, fp, lsr #7

00015144 <flatcc_builder_append_string_str@@Base>:
   15144:	push	{r4, r5, fp, lr}
   15148:	add	fp, sp, #8
   1514c:	mov	r5, r0
   15150:	mov	r0, r1
   15154:	mov	r4, r1
   15158:	bl	12760 <strlen@plt>
   1515c:	mov	r2, r0
   15160:	mov	r0, r5
   15164:	mov	r1, r4
   15168:	pop	{r4, r5, fp, lr}
   1516c:	b	15000 <flatcc_builder_append_string@@Base>

00015170 <flatcc_builder_append_string_strn@@Base>:
   15170:	push	{r4, r5, r6, sl, fp, lr}
   15174:	add	fp, sp, #16
   15178:	mov	r6, r0
   1517c:	mov	r5, r1
   15180:	mov	r0, r1
   15184:	mov	r1, #0
   15188:	mov	r4, r2
   1518c:	bl	12790 <memchr@plt>
   15190:	cmp	r0, #0
   15194:	mov	r1, r5
   15198:	subne	r4, r0, r5
   1519c:	mov	r0, r6
   151a0:	mov	r2, r4
   151a4:	pop	{r4, r5, r6, sl, fp, lr}
   151a8:	b	15000 <flatcc_builder_append_string@@Base>

000151ac <flatcc_builder_truncate_vector@@Base>:
   151ac:	push	{fp, lr}
   151b0:	mov	fp, sp
   151b4:	ldr	r2, [r0, #32]
   151b8:	ldrh	r3, [r2, #14]
   151bc:	cmp	r3, #4
   151c0:	bne	15208 <flatcc_builder_truncate_vector@@Base+0x5c>
   151c4:	ldr	r3, [r2, #20]
   151c8:	cmp	r3, r1
   151cc:	bcc	15228 <flatcc_builder_truncate_vector@@Base+0x7c>
   151d0:	sub	r3, r3, r1
   151d4:	str	r3, [r2, #20]
   151d8:	ldr	r2, [r0, #32]
   151dc:	ldr	r3, [r0, #20]
   151e0:	ldr	ip, [r0, #16]
   151e4:	ldr	r2, [r2, #16]
   151e8:	mls	r3, r2, r1, r3
   151ec:	mul	r2, r2, r1
   151f0:	mov	r1, #0
   151f4:	str	r3, [r0, #20]
   151f8:	add	r0, ip, r3
   151fc:	bl	12778 <memset@plt>
   15200:	mov	r0, #0
   15204:	pop	{fp, pc}
   15208:	ldr	r0, [pc, #56]	; 15248 <flatcc_builder_truncate_vector@@Base+0x9c>
   1520c:	ldr	r1, [pc, #56]	; 1524c <flatcc_builder_truncate_vector@@Base+0xa0>
   15210:	ldr	r3, [pc, #56]	; 15250 <flatcc_builder_truncate_vector@@Base+0xa4>
   15214:	movw	r2, #985	; 0x3d9
   15218:	add	r0, pc, r0
   1521c:	add	r1, pc, r1
   15220:	add	r3, pc, r3
   15224:	bl	127a8 <__assert_fail@plt>
   15228:	ldr	r0, [pc, #36]	; 15254 <flatcc_builder_truncate_vector@@Base+0xa8>
   1522c:	ldr	r1, [pc, #36]	; 15258 <flatcc_builder_truncate_vector@@Base+0xac>
   15230:	ldr	r3, [pc, #36]	; 1525c <flatcc_builder_truncate_vector@@Base+0xb0>
   15234:	movw	r2, #986	; 0x3da
   15238:	add	r0, pc, r0
   1523c:	add	r1, pc, r1
   15240:	add	r3, pc, r3
   15244:	bl	127a8 <__assert_fail@plt>
   15248:	andeq	r5, r0, r0, lsl r5
   1524c:	ldrdeq	r5, [r0], -r2
   15250:	andeq	r5, r0, r2, asr #15
   15254:	andeq	r5, r0, r9, ror #15
   15258:			; <UNDEFINED> instruction: 0x000051b2
   1525c:	andeq	r5, r0, r2, lsr #15

00015260 <flatcc_builder_truncate_offset_vector@@Base>:
   15260:	push	{fp, lr}
   15264:	mov	fp, sp
   15268:	ldr	r2, [r0, #32]
   1526c:	ldrh	r3, [r2, #14]
   15270:	cmp	r3, #5
   15274:	bne	152bc <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15278:	ldr	r3, [r2, #20]
   1527c:	cmp	r3, r1
   15280:	bcc	152dc <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15284:	sub	r3, r3, r1
   15288:	str	r3, [r2, #20]
   1528c:	ldr	r2, [r0, #32]
   15290:	ldr	r3, [r0, #20]
   15294:	ldr	ip, [r0, #16]
   15298:	ldr	r2, [r2, #16]
   1529c:	mls	r3, r2, r1, r3
   152a0:	mul	r2, r2, r1
   152a4:	mov	r1, #0
   152a8:	str	r3, [r0, #20]
   152ac:	add	r0, ip, r3
   152b0:	bl	12778 <memset@plt>
   152b4:	mov	r0, #0
   152b8:	pop	{fp, pc}
   152bc:	ldr	r0, [pc, #56]	; 152fc <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   152c0:	ldr	r1, [pc, #56]	; 15300 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   152c4:	ldr	r3, [pc, #56]	; 15304 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   152c8:	movw	r2, #994	; 0x3e2
   152cc:	add	r0, pc, r0
   152d0:	add	r1, pc, r1
   152d4:	add	r3, pc, r3
   152d8:	bl	127a8 <__assert_fail@plt>
   152dc:	ldr	r0, [pc, #36]	; 15308 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   152e0:	ldr	r1, [pc, #36]	; 1530c <flatcc_builder_truncate_offset_vector@@Base+0xac>
   152e4:	ldr	r3, [pc, #36]	; 15310 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   152e8:	movw	r2, #995	; 0x3e3
   152ec:	add	r0, pc, r0
   152f0:	add	r1, pc, r1
   152f4:	add	r3, pc, r3
   152f8:	bl	127a8 <__assert_fail@plt>
   152fc:	andeq	r5, r0, r5, asr r5
   15300:	andeq	r5, r0, lr, lsl r1
   15304:	andeq	r5, r0, r1, ror r7
   15308:	muleq	r0, pc, r7	; <UNPREDICTABLE>
   1530c:	strdeq	r5, [r0], -lr
   15310:	andeq	r5, r0, r1, asr r7

00015314 <flatcc_builder_truncate_string@@Base>:
   15314:	push	{fp, lr}
   15318:	mov	fp, sp
   1531c:	mov	r2, r1
   15320:	ldr	r1, [r0, #32]
   15324:	ldrh	r3, [r1, #14]
   15328:	cmp	r3, #6
   1532c:	bne	15368 <flatcc_builder_truncate_string@@Base+0x54>
   15330:	ldr	r3, [r1, #20]
   15334:	cmp	r3, r2
   15338:	bcc	15388 <flatcc_builder_truncate_string@@Base+0x74>
   1533c:	sub	r3, r3, r2
   15340:	str	r3, [r1, #20]
   15344:	ldr	r3, [r0, #20]
   15348:	ldr	r1, [r0, #16]
   1534c:	sub	r3, r3, r2
   15350:	str	r3, [r0, #20]
   15354:	add	r0, r1, r3
   15358:	mov	r1, #0
   1535c:	bl	12778 <memset@plt>
   15360:	mov	r0, #0
   15364:	pop	{fp, pc}
   15368:	ldr	r0, [pc, #56]	; 153a8 <flatcc_builder_truncate_string@@Base+0x94>
   1536c:	ldr	r1, [pc, #56]	; 153ac <flatcc_builder_truncate_string@@Base+0x98>
   15370:	ldr	r3, [pc, #56]	; 153b0 <flatcc_builder_truncate_string@@Base+0x9c>
   15374:	movw	r2, #1003	; 0x3eb
   15378:	add	r0, pc, r0
   1537c:	add	r1, pc, r1
   15380:	add	r3, pc, r3
   15384:	bl	127a8 <__assert_fail@plt>
   15388:	ldr	r0, [pc, #36]	; 153b4 <flatcc_builder_truncate_string@@Base+0xa0>
   1538c:	ldr	r1, [pc, #36]	; 153b8 <flatcc_builder_truncate_string@@Base+0xa4>
   15390:	ldr	r3, [pc, #36]	; 153bc <flatcc_builder_truncate_string@@Base+0xa8>
   15394:	mov	r2, #1004	; 0x3ec
   15398:	add	r0, pc, r0
   1539c:	add	r1, pc, r1
   153a0:	add	r3, pc, r3
   153a4:	bl	127a8 <__assert_fail@plt>
   153a8:			; <UNDEFINED> instruction: 0x000055b2
   153ac:	andeq	r5, r0, r2, ror r0
   153b0:	andeq	r5, r0, r6, asr #14
   153b4:	andeq	r5, r0, sp, ror #14
   153b8:	andeq	r5, r0, r2, asr r0
   153bc:	andeq	r5, r0, r6, lsr #14

000153c0 <flatcc_builder_start_vector@@Base>:
   153c0:	push	{r4, r5, r6, r7, fp, lr}
   153c4:	add	fp, sp, #16
   153c8:	mov	r7, #4
   153cc:	cmp	r2, #4
   153d0:	mov	r6, r1
   153d4:	mov	r5, r3
   153d8:	mov	r4, r0
   153dc:	movls	r2, r7
   153e0:	mov	r1, r2
   153e4:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   153e8:	mov	r1, r0
   153ec:	mvn	r0, #0
   153f0:	cmp	r1, #0
   153f4:	popne	{r4, r5, r6, r7, fp, pc}
   153f8:	ldr	r0, [r4, #32]
   153fc:	str	r6, [r0, #16]
   15400:	mov	r0, #0
   15404:	ldr	r1, [r4, #32]
   15408:	str	r0, [r1, #20]
   1540c:	ldr	r1, [r4, #32]
   15410:	str	r5, [r1, #24]
   15414:	ldr	r1, [r4, #32]
   15418:	strh	r7, [r1, #14]
   1541c:	ldr	r2, [r4, #28]
   15420:	ldr	r3, [r4, #60]	; 0x3c
   15424:	ldr	r7, [r4, #64]	; 0x40
   15428:	add	r3, r3, r2
   1542c:	sub	r2, r7, r2
   15430:	str	r3, [r4, #16]
   15434:	mvn	r3, #3
   15438:	cmn	r2, #4
   1543c:	movcs	r2, r3
   15440:	str	r2, [r4, #24]
   15444:	str	r3, [r1, #4]
   15448:	pop	{r4, r5, r6, r7, fp, pc}

0001544c <flatcc_builder_start_offset_vector@@Base>:
   1544c:	push	{r4, r5, fp, lr}
   15450:	add	fp, sp, #8
   15454:	mov	r1, #4
   15458:	mov	r4, r0
   1545c:	mov	r5, #4
   15460:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   15464:	mov	r1, r0
   15468:	mvn	r0, #0
   1546c:	cmp	r1, #0
   15470:	popne	{r4, r5, fp, pc}
   15474:	ldr	r0, [r4, #32]
   15478:	mov	r2, #5
   1547c:	str	r5, [r0, #16]
   15480:	mov	r0, #0
   15484:	ldr	r1, [r4, #32]
   15488:	str	r0, [r1, #20]
   1548c:	ldr	r1, [r4, #32]
   15490:	strh	r2, [r1, #14]
   15494:	ldr	r2, [r4, #28]
   15498:	ldr	r3, [r4, #60]	; 0x3c
   1549c:	ldr	r5, [r4, #64]	; 0x40
   154a0:	add	r3, r3, r2
   154a4:	sub	r2, r5, r2
   154a8:	str	r3, [r4, #16]
   154ac:	mvn	r3, #3
   154b0:	cmn	r2, #4
   154b4:	movcs	r2, r3
   154b8:	str	r2, [r4, #24]
   154bc:	str	r3, [r1, #4]
   154c0:	pop	{r4, r5, fp, pc}

000154c4 <flatcc_builder_create_offset_vector@@Base>:
   154c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154c8:	add	fp, sp, #24
   154cc:	sub	sp, sp, #8
   154d0:	mov	r8, r1
   154d4:	mov	r1, #4
   154d8:	mov	r6, r2
   154dc:	mov	r4, r0
   154e0:	mov	r7, #4
   154e4:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   154e8:	cmp	r0, #0
   154ec:	beq	154fc <flatcc_builder_create_offset_vector@@Base+0x38>
   154f0:	mov	r0, #0
   154f4:	sub	sp, fp, #24
   154f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154fc:	ldr	r0, [r4, #32]
   15500:	mov	r1, #0
   15504:	str	r7, [r0, #16]
   15508:	ldr	r0, [r4, #32]
   1550c:	str	r1, [r0, #20]
   15510:	mov	r1, #5
   15514:	ldr	r0, [r4, #32]
   15518:	strh	r1, [r0, #14]
   1551c:	ldr	r1, [r4, #28]
   15520:	ldr	r2, [r4, #60]	; 0x3c
   15524:	ldr	r3, [r4, #64]	; 0x40
   15528:	add	r2, r2, r1
   1552c:	sub	r1, r3, r1
   15530:	str	r2, [r4, #16]
   15534:	mvn	r2, #3
   15538:	cmn	r1, #4
   1553c:	movcs	r1, r2
   15540:	str	r1, [r4, #24]
   15544:	str	r2, [r0, #4]
   15548:	ldr	r1, [r0, #20]
   1554c:	adds	r1, r1, r6
   15550:	cmpcc	r1, #1073741824	; 0x40000000
   15554:	bcc	15578 <flatcc_builder_create_offset_vector@@Base+0xb4>
   15558:	ldr	r0, [pc, #200]	; 15628 <flatcc_builder_create_offset_vector@@Base+0x164>
   1555c:	ldr	r1, [pc, #200]	; 1562c <flatcc_builder_create_offset_vector@@Base+0x168>
   15560:	ldr	r3, [pc, #200]	; 15630 <flatcc_builder_create_offset_vector@@Base+0x16c>
   15564:	mov	r2, #892	; 0x37c
   15568:	add	r0, pc, r0
   1556c:	add	r1, pc, r1
   15570:	add	r3, pc, r3
   15574:	bl	127a8 <__assert_fail@plt>
   15578:	str	r1, [r0, #20]
   1557c:	ldr	r7, [r4, #20]
   15580:	ldr	r0, [r4, #24]
   15584:	add	r1, r7, r6, lsl #2
   15588:	cmp	r1, r0
   1558c:	str	r1, [r4, #20]
   15590:	bcs	155a4 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15594:	ldr	r0, [r4, #16]
   15598:	adds	r0, r0, r7
   1559c:	bne	1560c <flatcc_builder_create_offset_vector@@Base+0x148>
   155a0:	b	154f0 <flatcc_builder_create_offset_vector@@Base+0x2c>
   155a4:	ldr	r2, [r4, #28]
   155a8:	ldr	r0, [r4, #40]	; 0x28
   155ac:	ldr	r5, [r4, #48]	; 0x30
   155b0:	mov	r3, #1
   155b4:	str	r3, [sp]
   155b8:	mov	r3, #1
   155bc:	add	r1, r1, r2
   155c0:	add	r2, r1, #1
   155c4:	add	r1, r4, #60	; 0x3c
   155c8:	blx	r5
   155cc:	cmp	r0, #0
   155d0:	bne	154f0 <flatcc_builder_create_offset_vector@@Base+0x2c>
   155d4:	ldr	r1, [r4, #28]
   155d8:	ldr	r0, [r4, #60]	; 0x3c
   155dc:	ldr	r3, [r4, #64]	; 0x40
   155e0:	ldr	r2, [r4, #32]
   155e4:	add	r0, r0, r1
   155e8:	sub	r1, r3, r1
   155ec:	mvn	r3, #3
   155f0:	cmn	r1, #4
   155f4:	str	r0, [r4, #16]
   155f8:	movcs	r1, r3
   155fc:	str	r1, [r4, #24]
   15600:	str	r3, [r2, #4]
   15604:	adds	r0, r0, r7
   15608:	beq	154f0 <flatcc_builder_create_offset_vector@@Base+0x2c>
   1560c:	lsl	r2, r6, #2
   15610:	mov	r1, r8
   15614:	bl	12718 <memcpy@plt>
   15618:	mov	r0, r4
   1561c:	sub	sp, fp, #24
   15620:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15624:	b	15634 <flatcc_builder_end_offset_vector@@Base>
   15628:	andeq	r5, r0, ip, asr #30
   1562c:	andeq	r4, r0, r2, lsl #29
   15630:	andeq	r5, r0, pc, asr pc

00015634 <flatcc_builder_end_offset_vector@@Base>:
   15634:	push	{r4, r5, fp, lr}
   15638:	add	fp, sp, #8
   1563c:	mov	r4, r0
   15640:	ldr	r0, [r0, #32]
   15644:	ldrh	r1, [r0, #14]
   15648:	cmp	r1, #5
   1564c:	bne	156ec <flatcc_builder_end_offset_vector@@Base+0xb8>
   15650:	ldr	r2, [r0, #20]
   15654:	ldr	r1, [r4, #16]
   15658:	mov	r0, r4
   1565c:	mov	r3, #0
   15660:	bl	16750 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15664:	mov	r5, r0
   15668:	cmp	r0, #0
   1566c:	beq	156e4 <flatcc_builder_end_offset_vector@@Base+0xb0>
   15670:	ldr	r0, [r4, #16]
   15674:	ldr	r2, [r4, #20]
   15678:	mov	r1, #0
   1567c:	bl	12778 <memset@plt>
   15680:	ldr	r0, [r4, #32]
   15684:	ldr	r1, [r4, #60]	; 0x3c
   15688:	ldr	ip, [r4, #64]	; 0x40
   1568c:	ldr	r3, [r0, #8]
   15690:	str	r3, [r4, #20]
   15694:	ldr	r3, [r0]
   15698:	str	r3, [r4, #28]
   1569c:	add	r1, r1, r3
   156a0:	ldr	r2, [r0, #4]
   156a4:	str	r1, [r4, #16]
   156a8:	sub	r1, ip, r3
   156ac:	cmp	r1, r2
   156b0:	movhi	r1, r2
   156b4:	str	r1, [r4, #24]
   156b8:	ldrh	r1, [r4, #130]	; 0x82
   156bc:	ldrh	r2, [r4, #128]	; 0x80
   156c0:	cmp	r2, r1
   156c4:	strhcc	r1, [r4, #128]	; 0x80
   156c8:	ldrh	r1, [r0, #12]
   156cc:	sub	r0, r0, #36	; 0x24
   156d0:	str	r0, [r4, #32]
   156d4:	strh	r1, [r4, #130]	; 0x82
   156d8:	ldr	r0, [r4, #156]	; 0x9c
   156dc:	sub	r0, r0, #1
   156e0:	str	r0, [r4, #156]	; 0x9c
   156e4:	mov	r0, r5
   156e8:	pop	{r4, r5, fp, pc}
   156ec:	ldr	r0, [pc, #24]	; 1570c <flatcc_builder_end_offset_vector@@Base+0xd8>
   156f0:	ldr	r1, [pc, #24]	; 15710 <flatcc_builder_end_offset_vector@@Base+0xdc>
   156f4:	ldr	r3, [pc, #24]	; 15714 <flatcc_builder_end_offset_vector@@Base+0xe0>
   156f8:	movw	r2, #1480	; 0x5c8
   156fc:	add	r0, pc, r0
   15700:	add	r1, pc, r1
   15704:	add	r3, pc, r3
   15708:	bl	127a8 <__assert_fail@plt>
   1570c:	andeq	r5, r0, r5, lsr #2
   15710:	andeq	r4, r0, lr, ror #25
   15714:	andeq	r5, r0, ip, asr #14

00015718 <flatcc_builder_start_string@@Base>:
   15718:	push	{r4, r5, fp, lr}
   1571c:	add	fp, sp, #8
   15720:	mov	r1, #1
   15724:	mov	r4, r0
   15728:	mov	r5, #1
   1572c:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   15730:	mov	r1, r0
   15734:	mvn	r0, #0
   15738:	cmp	r1, #0
   1573c:	popne	{r4, r5, fp, pc}
   15740:	ldr	r0, [r4, #32]
   15744:	mov	r2, #6
   15748:	str	r5, [r0, #16]
   1574c:	mov	r0, #0
   15750:	ldr	r1, [r4, #32]
   15754:	str	r0, [r1, #20]
   15758:	ldr	r1, [r4, #32]
   1575c:	strh	r2, [r1, #14]
   15760:	ldr	r2, [r4, #28]
   15764:	ldr	r3, [r4, #60]	; 0x3c
   15768:	ldr	r5, [r4, #64]	; 0x40
   1576c:	add	r3, r3, r2
   15770:	sub	r2, r5, r2
   15774:	str	r3, [r4, #16]
   15778:	mvn	r3, #3
   1577c:	cmn	r2, #4
   15780:	movcs	r2, r3
   15784:	str	r2, [r4, #24]
   15788:	str	r3, [r1, #4]
   1578c:	pop	{r4, r5, fp, pc}

00015790 <flatcc_builder_reserve_table@@Base>:
   15790:	push	{r4, r5, r6, sl, fp, lr}
   15794:	add	fp, sp, #16
   15798:	sub	sp, sp, #8
   1579c:	cmn	r1, #1
   157a0:	ble	15878 <flatcc_builder_reserve_table@@Base+0xe8>
   157a4:	mov	r4, r0
   157a8:	ldr	r0, [r0, #32]
   157ac:	mov	r5, r1
   157b0:	ldr	r1, [r4, #56]	; 0x38
   157b4:	ldrh	r2, [r0, #28]
   157b8:	ldr	r0, [r0, #16]
   157bc:	add	r6, r0, r2, lsl #1
   157c0:	add	r0, r6, r5, lsl #1
   157c4:	add	r2, r0, #4
   157c8:	cmp	r2, r1
   157cc:	bls	157f4 <flatcc_builder_reserve_table@@Base+0x64>
   157d0:	ldr	r0, [r4, #40]	; 0x28
   157d4:	ldr	ip, [r4, #48]	; 0x30
   157d8:	mov	r3, #0
   157dc:	add	r1, r4, #52	; 0x34
   157e0:	str	r3, [sp]
   157e4:	mov	r3, #1
   157e8:	blx	ip
   157ec:	cmp	r0, #0
   157f0:	bne	15898 <flatcc_builder_reserve_table@@Base+0x108>
   157f4:	ldr	r0, [r4, #52]	; 0x34
   157f8:	adds	r0, r0, r6
   157fc:	str	r0, [r4, #4]
   15800:	beq	1586c <flatcc_builder_reserve_table@@Base+0xdc>
   15804:	add	r0, r0, #4
   15808:	lsl	r1, r5, #1
   1580c:	str	r0, [r4, #4]
   15810:	ldr	r0, [r4, #32]
   15814:	ldr	r3, [r4, #80]	; 0x50
   15818:	ldr	r5, [r0, #20]
   1581c:	orr	r0, r1, #1
   15820:	add	r2, r5, r0
   15824:	cmp	r2, r3
   15828:	bls	15850 <flatcc_builder_reserve_table@@Base+0xc0>
   1582c:	ldr	r0, [r4, #40]	; 0x28
   15830:	ldr	r6, [r4, #48]	; 0x30
   15834:	mov	r3, #3
   15838:	add	r1, r4, #76	; 0x4c
   1583c:	str	r3, [sp]
   15840:	mov	r3, #0
   15844:	blx	r6
   15848:	cmp	r0, #0
   1584c:	bne	15898 <flatcc_builder_reserve_table@@Base+0x108>
   15850:	ldr	r0, [r4, #76]	; 0x4c
   15854:	adds	r0, r0, r5
   15858:	str	r0, [r4]
   1585c:	mov	r0, #0
   15860:	mvneq	r0, #0
   15864:	sub	sp, fp, #16
   15868:	pop	{r4, r5, r6, sl, fp, pc}
   1586c:	mvn	r0, #0
   15870:	sub	sp, fp, #16
   15874:	pop	{r4, r5, r6, sl, fp, pc}
   15878:	ldr	r0, [pc, #56]	; 158b8 <flatcc_builder_reserve_table@@Base+0x128>
   1587c:	ldr	r1, [pc, #56]	; 158bc <flatcc_builder_reserve_table@@Base+0x12c>
   15880:	ldr	r3, [pc, #56]	; 158c0 <flatcc_builder_reserve_table@@Base+0x130>
   15884:	movw	r2, #1065	; 0x429
   15888:	add	r0, pc, r0
   1588c:	add	r1, pc, r1
   15890:	add	r3, pc, r3
   15894:	bl	127a8 <__assert_fail@plt>
   15898:	ldr	r0, [pc, #36]	; 158c4 <flatcc_builder_reserve_table@@Base+0x134>
   1589c:	ldr	r1, [pc, #36]	; 158c8 <flatcc_builder_reserve_table@@Base+0x138>
   158a0:	ldr	r3, [pc, #36]	; 158cc <flatcc_builder_reserve_table@@Base+0x13c>
   158a4:	mov	r2, #308	; 0x134
   158a8:	add	r0, pc, r0
   158ac:	add	r1, pc, r1
   158b0:	add	r3, pc, r3
   158b4:	bl	127a8 <__assert_fail@plt>
   158b8:	andeq	r5, r0, r0, ror #5
   158bc:	andeq	r4, r0, r2, ror #22
   158c0:	muleq	r0, r7, r2
   158c4:	andeq	r5, r0, r3, lsl #26
   158c8:	andeq	r4, r0, r2, asr #22
   158cc:	andeq	r5, r0, r5, lsr fp

000158d0 <flatcc_builder_start_table@@Base>:
   158d0:	push	{r4, r5, r6, r7, fp, lr}
   158d4:	add	fp, sp, #16
   158d8:	sub	sp, sp, #8
   158dc:	mov	r6, r1
   158e0:	mov	r1, #4
   158e4:	mov	r4, r0
   158e8:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   158ec:	mvn	r5, #0
   158f0:	cmp	r0, #0
   158f4:	beq	15904 <flatcc_builder_start_table@@Base+0x34>
   158f8:	mov	r0, r5
   158fc:	sub	sp, fp, #16
   15900:	pop	{r4, r5, r6, r7, fp, pc}
   15904:	mov	r1, r4
   15908:	ldr	r2, [r4, #4]
   1590c:	ldr	r3, [r4, #32]
   15910:	ldr	r0, [r1, #52]!	; 0x34
   15914:	sub	r0, r2, r0
   15918:	str	r0, [r3, #16]
   1591c:	ldr	r0, [r4]
   15920:	ldr	r3, [r4, #76]	; 0x4c
   15924:	ldr	r2, [r4, #32]
   15928:	sub	r0, r0, r3
   1592c:	mov	r3, #0
   15930:	str	r0, [r2, #20]
   15934:	ldr	r0, [r4, #12]
   15938:	ldr	r2, [r4, #32]
   1593c:	str	r0, [r2, #24]
   15940:	ldr	r0, [r4, #32]
   15944:	ldrh	r2, [r4, #8]
   15948:	strh	r2, [r0, #28]
   1594c:	movw	r0, #15186	; 0x3b52
   15950:	strh	r3, [r4, #8]
   15954:	mov	r2, #3
   15958:	movt	r0, #12137	; 0x2f69
   1595c:	str	r0, [r4, #12]
   15960:	ldr	r0, [r4, #32]
   15964:	strh	r2, [r0, #14]
   15968:	ldrh	r2, [r0, #28]
   1596c:	ldr	r0, [r0, #16]
   15970:	add	r7, r0, r2, lsl #1
   15974:	add	r0, r7, r6, lsl #1
   15978:	add	r2, r0, #4
   1597c:	ldr	r0, [r4, #56]	; 0x38
   15980:	cmp	r2, r0
   15984:	bls	159a4 <flatcc_builder_start_table@@Base+0xd4>
   15988:	ldr	r0, [r4, #40]	; 0x28
   1598c:	ldr	ip, [r4, #48]	; 0x30
   15990:	str	r3, [sp]
   15994:	mov	r3, #1
   15998:	blx	ip
   1599c:	cmp	r0, #0
   159a0:	bne	15a48 <flatcc_builder_start_table@@Base+0x178>
   159a4:	ldr	r0, [r4, #52]	; 0x34
   159a8:	adds	r0, r0, r7
   159ac:	str	r0, [r4, #4]
   159b0:	beq	158f8 <flatcc_builder_start_table@@Base+0x28>
   159b4:	add	r0, r0, #4
   159b8:	lsl	r1, r6, #1
   159bc:	str	r0, [r4, #4]
   159c0:	ldr	r0, [r4, #32]
   159c4:	ldr	r3, [r4, #80]	; 0x50
   159c8:	ldr	r6, [r0, #20]
   159cc:	orr	r0, r1, #1
   159d0:	add	r2, r6, r0
   159d4:	cmp	r2, r3
   159d8:	bls	15a00 <flatcc_builder_start_table@@Base+0x130>
   159dc:	ldr	r0, [r4, #40]	; 0x28
   159e0:	ldr	r7, [r4, #48]	; 0x30
   159e4:	mov	r3, #3
   159e8:	add	r1, r4, #76	; 0x4c
   159ec:	str	r3, [sp]
   159f0:	mov	r3, #0
   159f4:	blx	r7
   159f8:	cmp	r0, #0
   159fc:	bne	15a48 <flatcc_builder_start_table@@Base+0x178>
   15a00:	ldr	r0, [r4, #76]	; 0x4c
   15a04:	adds	r0, r0, r6
   15a08:	str	r0, [r4]
   15a0c:	beq	158f8 <flatcc_builder_start_table@@Base+0x28>
   15a10:	ldr	r0, [r4, #28]
   15a14:	ldr	r2, [r4, #60]	; 0x3c
   15a18:	ldr	r3, [r4, #64]	; 0x40
   15a1c:	ldr	r1, [r4, #32]
   15a20:	mov	r5, #0
   15a24:	add	r2, r2, r0
   15a28:	sub	r0, r3, r0
   15a2c:	str	r2, [r4, #16]
   15a30:	movw	r2, #65532	; 0xfffc
   15a34:	cmp	r0, r2
   15a38:	movcs	r0, r2
   15a3c:	str	r0, [r4, #24]
   15a40:	str	r2, [r1, #4]
   15a44:	b	158f8 <flatcc_builder_start_table@@Base+0x28>
   15a48:	ldr	r0, [pc, #24]	; 15a68 <flatcc_builder_start_table@@Base+0x198>
   15a4c:	ldr	r1, [pc, #24]	; 15a6c <flatcc_builder_start_table@@Base+0x19c>
   15a50:	ldr	r3, [pc, #24]	; 15a70 <flatcc_builder_start_table@@Base+0x1a0>
   15a54:	mov	r2, #308	; 0x134
   15a58:	add	r0, pc, r0
   15a5c:	add	r1, pc, r1
   15a60:	add	r3, pc, r3
   15a64:	bl	127a8 <__assert_fail@plt>
   15a68:	andeq	r5, r0, r3, asr fp
   15a6c:	muleq	r0, r2, r9
   15a70:	andeq	r5, r0, r5, lsl #19

00015a74 <flatcc_builder_create_vtable@@Base>:
   15a74:	push	{r4, r5, fp, lr}
   15a78:	add	fp, sp, #8
   15a7c:	sub	sp, sp, #80	; 0x50
   15a80:	mov	r3, r2
   15a84:	mov	r2, #0
   15a88:	mov	r4, r0
   15a8c:	cmp	r3, #0
   15a90:	str	r2, [sp, #12]
   15a94:	str	r2, [sp, #8]
   15a98:	movne	r2, #1
   15a9c:	strne	r3, [sp, #20]
   15aa0:	strne	r1, [sp, #16]
   15aa4:	strne	r3, [sp, #8]
   15aa8:	strne	r2, [sp, #12]
   15aac:	ldr	r0, [r4, #152]	; 0x98
   15ab0:	cmp	r0, #0
   15ab4:	bne	15ac4 <flatcc_builder_create_vtable@@Base+0x50>
   15ab8:	ldr	r0, [r4, #180]	; 0xb4
   15abc:	cmp	r0, #0
   15ac0:	beq	15b20 <flatcc_builder_create_vtable@@Base+0xac>
   15ac4:	cmp	r3, #0
   15ac8:	beq	15b64 <flatcc_builder_create_vtable@@Base+0xf0>
   15acc:	ldr	r0, [r4, #136]	; 0x88
   15ad0:	ldr	ip, [r4, #44]	; 0x2c
   15ad4:	add	r1, sp, #8
   15ad8:	add	r1, r1, #8
   15adc:	sub	r5, r0, r3
   15ae0:	ldr	r0, [r4, #36]	; 0x24
   15ae4:	str	r3, [sp]
   15ae8:	mov	r3, r5
   15aec:	blx	ip
   15af0:	cmp	r0, #0
   15af4:	bne	15b84 <flatcc_builder_create_vtable@@Base+0x110>
   15af8:	cmp	r5, #0
   15afc:	str	r5, [r4, #136]	; 0x88
   15b00:	beq	15b14 <flatcc_builder_create_vtable@@Base+0xa0>
   15b04:	add	r1, r5, #1
   15b08:	mov	r0, r1
   15b0c:	sub	sp, fp, #8
   15b10:	pop	{r4, r5, fp, pc}
   15b14:	mov	r0, #0
   15b18:	sub	sp, fp, #8
   15b1c:	pop	{r4, r5, fp, pc}
   15b20:	ldr	r5, [r4, #140]	; 0x8c
   15b24:	ldr	r0, [r4, #36]	; 0x24
   15b28:	ldr	ip, [r4, #44]	; 0x2c
   15b2c:	add	r1, r5, r3
   15b30:	str	r1, [r4, #140]	; 0x8c
   15b34:	add	r1, sp, #8
   15b38:	str	r3, [sp]
   15b3c:	mov	r3, r5
   15b40:	add	r1, r1, #8
   15b44:	blx	ip
   15b48:	cmp	r0, #0
   15b4c:	bne	15ba4 <flatcc_builder_create_vtable@@Base+0x130>
   15b50:	adds	r1, r5, #1
   15b54:	mov	r0, #0
   15b58:	movcc	r0, r1
   15b5c:	sub	sp, fp, #8
   15b60:	pop	{r4, r5, fp, pc}
   15b64:	ldr	r0, [pc, #100]	; 15bd0 <flatcc_builder_create_vtable@@Base+0x15c>
   15b68:	ldr	r1, [pc, #100]	; 15bd4 <flatcc_builder_create_vtable@@Base+0x160>
   15b6c:	ldr	r3, [pc, #100]	; 15bd8 <flatcc_builder_create_vtable@@Base+0x164>
   15b70:	movw	r2, #647	; 0x287
   15b74:	add	r0, pc, r0
   15b78:	add	r1, pc, r1
   15b7c:	add	r3, pc, r3
   15b80:	bl	127a8 <__assert_fail@plt>
   15b84:	ldr	r0, [pc, #80]	; 15bdc <flatcc_builder_create_vtable@@Base+0x168>
   15b88:	ldr	r1, [pc, #80]	; 15be0 <flatcc_builder_create_vtable@@Base+0x16c>
   15b8c:	ldr	r3, [pc, #80]	; 15be4 <flatcc_builder_create_vtable@@Base+0x170>
   15b90:	movw	r2, #651	; 0x28b
   15b94:	add	r0, pc, r0
   15b98:	add	r1, pc, r1
   15b9c:	add	r3, pc, r3
   15ba0:	bl	127a8 <__assert_fail@plt>
   15ba4:	ldr	r0, [pc, #24]	; 15bc4 <flatcc_builder_create_vtable@@Base+0x150>
   15ba8:	ldr	r1, [pc, #24]	; 15bc8 <flatcc_builder_create_vtable@@Base+0x154>
   15bac:	ldr	r3, [pc, #24]	; 15bcc <flatcc_builder_create_vtable@@Base+0x158>
   15bb0:	movw	r2, #677	; 0x2a5
   15bb4:	add	r0, pc, r0
   15bb8:	add	r1, pc, r1
   15bbc:	add	r3, pc, r3
   15bc0:	bl	127a8 <__assert_fail@plt>
   15bc4:	strdeq	r5, [r0], -r7
   15bc8:	andeq	r4, r0, r6, lsr r8
   15bcc:	andeq	r5, r0, sl, ror #18
   15bd0:	andeq	r5, r0, r7, lsr sl
   15bd4:	andeq	r4, r0, r6, ror r8
   15bd8:	andeq	r5, r0, lr, ror #17
   15bdc:	andeq	r5, r0, r7, lsl sl
   15be0:	andeq	r4, r0, r6, asr r8
   15be4:	andeq	r5, r0, lr, asr #17

00015be8 <flatcc_builder_create_cached_vtable@@Base>:
   15be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bec:	add	fp, sp, #28
   15bf0:	sub	sp, sp, #20
   15bf4:	mov	sl, r0
   15bf8:	ldr	r0, [r0, #116]	; 0x74
   15bfc:	mov	r8, r3
   15c00:	mov	r5, r2
   15c04:	str	r1, [sp, #16]
   15c08:	cmp	r0, #0
   15c0c:	beq	15cb0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15c10:	ldr	r1, [sl, #92]	; 0x5c
   15c14:	rsb	r0, r0, #32
   15c18:	lsr	r0, r8, r0
   15c1c:	add	r6, r1, r0, lsl #2
   15c20:	cmp	r6, #0
   15c24:	beq	15d74 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15c28:	ldr	r7, [r6]
   15c2c:	str	r6, [sp, #12]
   15c30:	cmp	r7, #0
   15c34:	beq	15d7c <flatcc_builder_create_cached_vtable@@Base+0x194>
   15c38:	ldr	r4, [sl, #68]	; 0x44
   15c3c:	ldr	r8, [sl, #100]	; 0x64
   15c40:	mov	r0, #0
   15c44:	str	r0, [sp, #8]
   15c48:	b	15c5c <flatcc_builder_create_cached_vtable@@Base+0x74>
   15c4c:	ldr	r7, [r9, #12]!
   15c50:	mov	r6, r9
   15c54:	cmp	r7, #0
   15c58:	beq	15d6c <flatcc_builder_create_cached_vtable@@Base+0x184>
   15c5c:	add	r9, r8, r7
   15c60:	mov	r1, r4
   15c64:	ldr	r0, [r9, #8]
   15c68:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15c6c:	cmp	r0, r5
   15c70:	bne	15c4c <flatcc_builder_create_cached_vtable@@Base+0x64>
   15c74:	ldr	r0, [sp, #16]
   15c78:	mov	r2, r5
   15c7c:	bl	12754 <bcmp@plt>
   15c80:	cmp	r0, #0
   15c84:	bne	15c4c <flatcc_builder_create_cached_vtable@@Base+0x64>
   15c88:	ldr	r0, [sl, #152]	; 0x98
   15c8c:	ldr	r1, [r9, #4]
   15c90:	cmp	r1, r0
   15c94:	beq	15ee0 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15c98:	mov	r6, r9
   15c9c:	mov	r0, r9
   15ca0:	ldr	r7, [r6, #12]!
   15ca4:	cmp	r7, #0
   15ca8:	bne	15c44 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15cac:	b	15d80 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15cb0:	ldr	r0, [sl, #124]	; 0x7c
   15cb4:	cmp	r0, #0
   15cb8:	bne	15f2c <flatcc_builder_create_cached_vtable@@Base+0x344>
   15cbc:	ldr	r0, [sl, #104]	; 0x68
   15cc0:	add	r7, sl, #100	; 0x64
   15cc4:	cmp	r0, #15
   15cc8:	bhi	15cf4 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15ccc:	ldr	r0, [sl, #40]	; 0x28
   15cd0:	ldr	r6, [sl, #48]	; 0x30
   15cd4:	mov	r1, #6
   15cd8:	mov	r2, #16
   15cdc:	mov	r3, #0
   15ce0:	str	r1, [sp]
   15ce4:	mov	r1, r7
   15ce8:	blx	r6
   15cec:	cmp	r0, #0
   15cf0:	bne	15f0c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15cf4:	ldr	r0, [r7]
   15cf8:	mov	r7, #0
   15cfc:	cmp	r0, #0
   15d00:	beq	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15d04:	mov	r0, #16
   15d08:	mov	r2, #5
   15d0c:	add	r1, sl, #92	; 0x5c
   15d10:	mov	r3, #1
   15d14:	mov	r4, #256	; 0x100
   15d18:	str	r0, [sl, #124]	; 0x7c
   15d1c:	ldr	r0, [sl, #40]	; 0x28
   15d20:	ldr	r6, [sl, #48]	; 0x30
   15d24:	str	r2, [sp]
   15d28:	mov	r2, #256	; 0x100
   15d2c:	blx	r6
   15d30:	cmp	r0, #0
   15d34:	bne	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15d38:	ldr	r0, [sl, #96]	; 0x60
   15d3c:	mov	r1, r4
   15d40:	lsl	r4, r4, #1
   15d44:	cmp	r0, r1, lsl #1
   15d48:	bcs	15d3c <flatcc_builder_create_cached_vtable@@Base+0x154>
   15d4c:	lsr	r1, r1, #2
   15d50:	mvn	r0, #0
   15d54:	mov	r2, #1
   15d58:	add	r0, r0, #1
   15d5c:	cmp	r1, r2, lsl r0
   15d60:	bhi	15d58 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15d64:	str	r0, [sl, #116]	; 0x74
   15d68:	b	15c10 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15d6c:	ldr	r9, [sp, #8]
   15d70:	b	15d80 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15d74:	mov	r7, #0
   15d78:	b	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15d7c:	mov	r9, #0
   15d80:	ldr	r4, [sl, #124]	; 0x7c
   15d84:	ldr	r0, [sl, #104]	; 0x68
   15d88:	add	r7, sl, #100	; 0x64
   15d8c:	add	r2, r4, #16
   15d90:	cmp	r2, r0
   15d94:	bls	15dbc <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15d98:	ldr	r0, [sl, #40]	; 0x28
   15d9c:	ldr	r6, [sl, #48]	; 0x30
   15da0:	mov	r1, #6
   15da4:	mov	r3, #0
   15da8:	str	r1, [sp]
   15dac:	mov	r1, r7
   15db0:	blx	r6
   15db4:	cmp	r0, #0
   15db8:	bne	15f0c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15dbc:	ldr	r0, [r7]
   15dc0:	mov	r7, #0
   15dc4:	adds	r4, r0, r4
   15dc8:	beq	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15dcc:	ldr	r0, [sl, #124]	; 0x7c
   15dd0:	ldr	r1, [sl, #152]	; 0x98
   15dd4:	add	r2, r0, #16
   15dd8:	str	r2, [sl, #124]	; 0x7c
   15ddc:	ldr	r2, [sp, #12]
   15de0:	str	r1, [r4, #4]
   15de4:	ldr	r1, [r2]
   15de8:	str	r1, [r4, #12]
   15dec:	ldr	r1, [sp, #16]
   15df0:	str	r0, [r2]
   15df4:	mov	r0, sl
   15df8:	mov	r2, r5
   15dfc:	bl	15a74 <flatcc_builder_create_vtable@@Base>
   15e00:	cmp	r0, #0
   15e04:	str	r0, [r4]
   15e08:	beq	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e0c:	cmp	r9, #0
   15e10:	beq	15e2c <flatcc_builder_create_cached_vtable@@Base+0x244>
   15e14:	ldr	r0, [r9, #8]
   15e18:	str	r0, [r4, #8]
   15e1c:	ldr	r7, [r4]
   15e20:	mov	r0, r7
   15e24:	sub	sp, fp, #28
   15e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e2c:	ldr	r6, [sl, #120]	; 0x78
   15e30:	ldr	r0, [sl, #172]	; 0xac
   15e34:	add	r2, r6, r5
   15e38:	cmp	r0, #0
   15e3c:	beq	15e78 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15e40:	cmp	r0, r2
   15e44:	bcs	15e78 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15e48:	ldr	r0, [sl, #116]	; 0x74
   15e4c:	cmp	r0, #0
   15e50:	beq	15e1c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15e54:	ldr	r0, [sl, #92]	; 0x5c
   15e58:	ldr	r2, [sl, #96]	; 0x60
   15e5c:	mov	r1, #0
   15e60:	mov	r5, #0
   15e64:	bl	12778 <memset@plt>
   15e68:	mov	r0, #16
   15e6c:	str	r5, [sl, #120]	; 0x78
   15e70:	str	r0, [sl, #124]	; 0x7c
   15e74:	b	15e1c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15e78:	ldr	r0, [sl, #72]	; 0x48
   15e7c:	add	r7, sl, #68	; 0x44
   15e80:	cmp	r2, r0
   15e84:	bls	15eac <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15e88:	ldr	r0, [sl, #40]	; 0x28
   15e8c:	ldr	ip, [sl, #48]	; 0x30
   15e90:	mov	r1, #2
   15e94:	mov	r3, #0
   15e98:	str	r1, [sp]
   15e9c:	mov	r1, r7
   15ea0:	blx	ip
   15ea4:	cmp	r0, #0
   15ea8:	bne	15f0c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15eac:	ldr	r0, [r7]
   15eb0:	adds	r0, r0, r6
   15eb4:	beq	15ed8 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15eb8:	ldr	r1, [sl, #120]	; 0x78
   15ebc:	mov	r2, r5
   15ec0:	str	r1, [r4, #8]
   15ec4:	add	r1, r1, r5
   15ec8:	str	r1, [sl, #120]	; 0x78
   15ecc:	ldr	r1, [sp, #16]
   15ed0:	bl	12718 <memcpy@plt>
   15ed4:	b	15e1c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15ed8:	mvn	r7, #0
   15edc:	b	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ee0:	ldr	r0, [sp, #12]
   15ee4:	cmp	r6, r0
   15ee8:	beq	15f04 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15eec:	mov	r1, r0
   15ef0:	ldr	r0, [r9, #12]
   15ef4:	str	r0, [r6]
   15ef8:	ldr	r0, [r1]
   15efc:	str	r0, [r9, #12]
   15f00:	str	r7, [r1]
   15f04:	ldr	r7, [r9]
   15f08:	b	15e20 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15f0c:	ldr	r0, [pc, #68]	; 15f58 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15f10:	ldr	r1, [pc, #68]	; 15f5c <flatcc_builder_create_cached_vtable@@Base+0x374>
   15f14:	ldr	r3, [pc, #68]	; 15f60 <flatcc_builder_create_cached_vtable@@Base+0x378>
   15f18:	mov	r2, #308	; 0x134
   15f1c:	add	r0, pc, r0
   15f20:	add	r1, pc, r1
   15f24:	add	r3, pc, r3
   15f28:	bl	127a8 <__assert_fail@plt>
   15f2c:	ldr	r0, [pc, #24]	; 15f4c <flatcc_builder_create_cached_vtable@@Base+0x364>
   15f30:	ldr	r1, [pc, #24]	; 15f50 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15f34:	ldr	r3, [pc, #24]	; 15f54 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   15f38:	movw	r2, #342	; 0x156
   15f3c:	add	r0, pc, r0
   15f40:	add	r1, pc, r1
   15f44:	add	r3, pc, r3
   15f48:	bl	127a8 <__assert_fail@plt>
   15f4c:	andeq	r5, r0, r3, lsr r6
   15f50:	andeq	r4, r0, lr, lsr #9
   15f54:	andeq	r5, r0, sl, lsr r6
   15f58:	andeq	r5, r0, pc, lsl #13
   15f5c:	andeq	r4, r0, lr, asr #9
   15f60:	andeq	r5, r0, r1, asr #9

00015f64 <flatcc_builder_create_table@@Base>:
   15f64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f68:	add	fp, sp, #24
   15f6c:	sub	sp, sp, #80	; 0x50
   15f70:	ldr	r5, [fp, #12]
   15f74:	cmn	r5, #1
   15f78:	ble	160c4 <flatcc_builder_create_table@@Base+0x160>
   15f7c:	ldr	ip, [fp, #16]
   15f80:	tst	ip, #1
   15f84:	beq	160e4 <flatcc_builder_create_table@@Base+0x180>
   15f88:	mov	r8, r0
   15f8c:	ldrh	r0, [r0, #128]	; 0x80
   15f90:	cmp	r3, #4
   15f94:	movls	r3, #4
   15f98:	cmp	r0, r3
   15f9c:	strhcc	r3, [r8, #128]	; 0x80
   15fa0:	cmp	r5, #1
   15fa4:	ldr	r0, [r8, #136]	; 0x88
   15fa8:	sub	r4, r0, r2
   15fac:	sub	r0, r3, #1
   15fb0:	and	r0, r4, r0
   15fb4:	sub	r4, r4, #4
   15fb8:	add	r3, ip, r0
   15fbc:	sub	r3, r4, r3
   15fc0:	add	r3, r3, #1
   15fc4:	str	r3, [fp, #-28]	; 0xffffffe4
   15fc8:	blt	15ff8 <flatcc_builder_create_table@@Base+0x94>
   15fcc:	ldr	r3, [fp, #8]
   15fd0:	sub	ip, r4, r0
   15fd4:	mvn	r4, #3
   15fd8:	sub	r4, r4, ip
   15fdc:	ldrh	r6, [r3], #2
   15fe0:	subs	r5, r5, #1
   15fe4:	ldr	r7, [r6, r1]
   15fe8:	add	r7, r4, r7
   15fec:	sub	r7, r7, r6
   15ff0:	str	r7, [r6, r1]
   15ff4:	bne	15fdc <flatcc_builder_create_table@@Base+0x78>
   15ff8:	mov	r4, #4
   15ffc:	sub	r3, fp, #28
   16000:	cmp	r2, #0
   16004:	str	r4, [sp, #16]
   16008:	str	r3, [sp, #12]
   1600c:	mov	r3, #1
   16010:	str	r4, [sp, #4]
   16014:	addne	r4, r2, #4
   16018:	str	r3, [sp, #8]
   1601c:	movne	r3, #2
   16020:	strne	r2, [sp, #24]
   16024:	strne	r1, [sp, #20]
   16028:	strne	r3, [sp, #8]
   1602c:	strne	r4, [sp, #4]
   16030:	cmp	r0, #0
   16034:	beq	16060 <flatcc_builder_create_table@@Base+0xfc>
   16038:	add	r4, r4, r0
   1603c:	add	r1, sp, #4
   16040:	str	r4, [sp, #4]
   16044:	add	r1, r1, r3, lsl #3
   16048:	add	r3, r3, #1
   1604c:	ldr	r2, [pc, #208]	; 16124 <flatcc_builder_create_table@@Base+0x1c0>
   16050:	ldr	r2, [pc, r2]
   16054:	str	r2, [r1, #8]
   16058:	str	r0, [r1, #12]
   1605c:	str	r3, [sp, #8]
   16060:	cmp	r4, #0
   16064:	ble	16104 <flatcc_builder_create_table@@Base+0x1a0>
   16068:	ldr	r0, [r8, #136]	; 0x88
   1606c:	ldr	r7, [r8, #44]	; 0x2c
   16070:	add	r1, sp, #4
   16074:	mov	r2, r3
   16078:	add	r1, r1, #8
   1607c:	sub	r5, r0, r4
   16080:	ldr	r0, [r8, #36]	; 0x24
   16084:	str	r4, [sp]
   16088:	mov	r3, r5
   1608c:	blx	r7
   16090:	cmp	r0, #0
   16094:	streq	r5, [r8, #136]	; 0x88
   16098:	moveq	r0, r5
   1609c:	subeq	sp, fp, #24
   160a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   160a4:	ldr	r0, [pc, #160]	; 1614c <flatcc_builder_create_table@@Base+0x1e8>
   160a8:	ldr	r1, [pc, #160]	; 16150 <flatcc_builder_create_table@@Base+0x1ec>
   160ac:	ldr	r3, [pc, #160]	; 16154 <flatcc_builder_create_table@@Base+0x1f0>
   160b0:	movw	r2, #651	; 0x28b
   160b4:	add	r0, pc, r0
   160b8:	add	r1, pc, r1
   160bc:	add	r3, pc, r3
   160c0:	bl	127a8 <__assert_fail@plt>
   160c4:	ldr	r0, [pc, #92]	; 16128 <flatcc_builder_create_table@@Base+0x1c4>
   160c8:	ldr	r1, [pc, #92]	; 1612c <flatcc_builder_create_table@@Base+0x1c8>
   160cc:	ldr	r3, [pc, #92]	; 16130 <flatcc_builder_create_table@@Base+0x1cc>
   160d0:	movw	r2, #1237	; 0x4d5
   160d4:	add	r0, pc, r0
   160d8:	add	r1, pc, r1
   160dc:	add	r3, pc, r3
   160e0:	bl	127a8 <__assert_fail@plt>
   160e4:	ldr	r0, [pc, #72]	; 16134 <flatcc_builder_create_table@@Base+0x1d0>
   160e8:	ldr	r1, [pc, #72]	; 16138 <flatcc_builder_create_table@@Base+0x1d4>
   160ec:	ldr	r3, [pc, #72]	; 1613c <flatcc_builder_create_table@@Base+0x1d8>
   160f0:	movw	r2, #1243	; 0x4db
   160f4:	add	r0, pc, r0
   160f8:	add	r1, pc, r1
   160fc:	add	r3, pc, r3
   16100:	bl	127a8 <__assert_fail@plt>
   16104:	ldr	r0, [pc, #52]	; 16140 <flatcc_builder_create_table@@Base+0x1dc>
   16108:	ldr	r1, [pc, #52]	; 16144 <flatcc_builder_create_table@@Base+0x1e0>
   1610c:	ldr	r3, [pc, #52]	; 16148 <flatcc_builder_create_table@@Base+0x1e4>
   16110:	movw	r2, #647	; 0x287
   16114:	add	r0, pc, r0
   16118:	add	r1, pc, r1
   1611c:	add	r3, pc, r3
   16120:	bl	127a8 <__assert_fail@plt>
   16124:	andeq	r5, r1, ip, ror #31
   16128:	andeq	r4, r0, sp, lsl #21
   1612c:	andeq	r4, r0, r6, lsl r3
   16130:	muleq	r0, r7, sl
   16134:	andeq	r4, r0, fp, lsl fp
   16138:	strdeq	r4, [r0], -r6
   1613c:	andeq	r4, r0, r7, ror sl
   16140:	muleq	r0, r7, r4
   16144:	ldrdeq	r4, [r0], -r6
   16148:	andeq	r5, r0, lr, asr #6
   1614c:	strdeq	r5, [r0], -r7
   16150:	andeq	r4, r0, r6, lsr r3
   16154:	andeq	r5, r0, lr, lsr #7

00016158 <flatcc_builder_check_required_field@@Base>:
   16158:	push	{fp, lr}
   1615c:	mov	fp, sp
   16160:	ldr	r2, [r0, #32]
   16164:	ldrh	r2, [r2, #14]
   16168:	cmp	r2, #3
   1616c:	bne	1619c <flatcc_builder_check_required_field@@Base+0x44>
   16170:	ldrh	r3, [r0, #8]
   16174:	mov	r2, #0
   16178:	cmp	r3, r1
   1617c:	bls	16194 <flatcc_builder_check_required_field@@Base+0x3c>
   16180:	ldr	r0, [r0, #4]
   16184:	add	r0, r0, r1, lsl #1
   16188:	ldrh	r2, [r0]
   1618c:	cmp	r2, #0
   16190:	movwne	r2, #1
   16194:	mov	r0, r2
   16198:	pop	{fp, pc}
   1619c:	ldr	r0, [pc, #24]	; 161bc <flatcc_builder_check_required_field@@Base+0x64>
   161a0:	ldr	r1, [pc, #24]	; 161c0 <flatcc_builder_check_required_field@@Base+0x68>
   161a4:	ldr	r3, [pc, #24]	; 161c4 <flatcc_builder_check_required_field@@Base+0x6c>
   161a8:	movw	r2, #1272	; 0x4f8
   161ac:	add	r0, pc, r0
   161b0:	add	r1, pc, r1
   161b4:	add	r3, pc, r3
   161b8:	bl	127a8 <__assert_fail@plt>
   161bc:	andeq	r4, r0, lr, ror #20
   161c0:	andeq	r4, r0, lr, lsr r2
   161c4:	muleq	r0, r1, sl

000161c8 <flatcc_builder_check_union_field@@Base>:
   161c8:	push	{fp, lr}
   161cc:	mov	fp, sp
   161d0:	mov	r2, r0
   161d4:	ldr	r0, [r0, #32]
   161d8:	ldrh	r0, [r0, #14]
   161dc:	cmp	r0, #3
   161e0:	bne	16240 <flatcc_builder_check_union_field@@Base+0x78>
   161e4:	mov	r0, #0
   161e8:	cmp	r1, #0
   161ec:	beq	1622c <flatcc_builder_check_union_field@@Base+0x64>
   161f0:	ldrh	r3, [r2, #8]
   161f4:	cmp	r3, r1
   161f8:	popls	{fp, pc}
   161fc:	ldr	r0, [r2, #4]
   16200:	add	r0, r0, r1, lsl #1
   16204:	ldrh	r1, [r0, #-2]
   16208:	cmp	r1, #0
   1620c:	beq	16230 <flatcc_builder_check_union_field@@Base+0x68>
   16210:	ldr	r2, [r2, #16]
   16214:	ldrh	r0, [r0]
   16218:	ldrb	r1, [r2, r1]
   1621c:	cmp	r1, #0
   16220:	beq	16234 <flatcc_builder_check_union_field@@Base+0x6c>
   16224:	cmp	r0, #0
   16228:	movwne	r0, #1
   1622c:	pop	{fp, pc}
   16230:	ldrh	r0, [r0]
   16234:	clz	r0, r0
   16238:	lsr	r0, r0, #5
   1623c:	pop	{fp, pc}
   16240:	ldr	r0, [pc, #24]	; 16260 <flatcc_builder_check_union_field@@Base+0x98>
   16244:	ldr	r1, [pc, #24]	; 16264 <flatcc_builder_check_union_field@@Base+0x9c>
   16248:	ldr	r3, [pc, #24]	; 16268 <flatcc_builder_check_union_field@@Base+0xa0>
   1624c:	movw	r2, #1279	; 0x4ff
   16250:	add	r0, pc, r0
   16254:	add	r1, pc, r1
   16258:	add	r3, pc, r3
   1625c:	bl	127a8 <__assert_fail@plt>
   16260:	andeq	r4, r0, sl, asr #19
   16264:	muleq	r0, sl, r1
   16268:	andeq	r4, r0, r0, asr #20

0001626c <flatcc_builder_check_required@@Base>:
   1626c:	push	{fp, lr}
   16270:	mov	fp, sp
   16274:	mov	r3, r0
   16278:	ldr	r0, [r0, #32]
   1627c:	ldrh	r0, [r0, #14]
   16280:	cmp	r0, #3
   16284:	bne	162cc <flatcc_builder_check_required@@Base+0x60>
   16288:	ldrh	ip, [r3, #8]
   1628c:	mov	r0, #0
   16290:	cmp	ip, r2
   16294:	poplt	{fp, pc}
   16298:	cmp	r2, #1
   1629c:	blt	162c4 <flatcc_builder_check_required@@Base+0x58>
   162a0:	ldr	ip, [r3, #4]
   162a4:	ldrh	r3, [r1]
   162a8:	add	r3, ip, r3, lsl #1
   162ac:	ldrh	r3, [r3]
   162b0:	cmp	r3, #0
   162b4:	beq	162c8 <flatcc_builder_check_required@@Base+0x5c>
   162b8:	add	r1, r1, #2
   162bc:	subs	r2, r2, #1
   162c0:	bne	162a4 <flatcc_builder_check_required@@Base+0x38>
   162c4:	mov	r0, #1
   162c8:	pop	{fp, pc}
   162cc:	ldr	r0, [pc, #24]	; 162ec <flatcc_builder_check_required@@Base+0x80>
   162d0:	ldr	r1, [pc, #24]	; 162f0 <flatcc_builder_check_required@@Base+0x84>
   162d4:	ldr	r3, [pc, #24]	; 162f4 <flatcc_builder_check_required@@Base+0x88>
   162d8:	movw	r2, #1297	; 0x511
   162dc:	add	r0, pc, r0
   162e0:	add	r1, pc, r1
   162e4:	add	r3, pc, r3
   162e8:	bl	127a8 <__assert_fail@plt>
   162ec:	andeq	r4, r0, lr, lsr r9
   162f0:	andeq	r4, r0, lr, lsl #2
   162f4:	andeq	r4, r0, r4, lsl #20

000162f8 <flatcc_builder_end_table@@Base>:
   162f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   162fc:	add	fp, sp, #24
   16300:	sub	sp, sp, #16
   16304:	mov	r4, r0
   16308:	ldr	r0, [r0, #32]
   1630c:	ldrh	r0, [r0, #14]
   16310:	cmp	r0, #3
   16314:	bne	16490 <flatcc_builder_end_table@@Base+0x198>
   16318:	ldrh	r0, [r4, #8]
   1631c:	ldr	r5, [r4, #4]
   16320:	mov	r1, #4
   16324:	movw	r2, #31153	; 0x79b1
   16328:	movt	r2, #40503	; 0x9e37
   1632c:	add	r0, r1, r0, lsl #1
   16330:	strh	r0, [r5, #-4]!
   16334:	ldrh	r1, [r4, #20]
   16338:	uxth	r6, r0
   1633c:	add	r1, r1, #4
   16340:	strh	r1, [r5, #2]
   16344:	uxth	r1, r1
   16348:	ldr	r0, [r4, #12]
   1634c:	eor	r0, r0, r6
   16350:	mul	r0, r0, r2
   16354:	eor	r0, r0, r1
   16358:	mov	r1, r5
   1635c:	mul	r3, r0, r2
   16360:	mov	r0, r4
   16364:	mov	r2, r6
   16368:	str	r3, [r4, #12]
   1636c:	bl	15be8 <flatcc_builder_create_cached_vtable@@Base>
   16370:	cmp	r0, #0
   16374:	beq	16480 <flatcc_builder_end_table@@Base+0x188>
   16378:	mov	r7, r0
   1637c:	mov	r0, r5
   16380:	mov	r1, #0
   16384:	mov	r2, r6
   16388:	mov	r8, #0
   1638c:	bl	12778 <memset@plt>
   16390:	ldr	r5, [r4, #32]
   16394:	ldr	r0, [r4, #76]	; 0x4c
   16398:	ldr	r6, [r4]
   1639c:	ldrh	r3, [r4, #130]	; 0x82
   163a0:	ldr	r1, [r4, #16]
   163a4:	ldr	r2, [r4, #20]
   163a8:	ldr	r5, [r5, #20]
   163ac:	add	r0, r0, r5
   163b0:	sub	r6, r6, r0
   163b4:	asr	r6, r6, #1
   163b8:	stm	sp, {r0, r6, r7}
   163bc:	mov	r0, r4
   163c0:	bl	15f64 <flatcc_builder_create_table@@Base>
   163c4:	cmp	r0, #0
   163c8:	beq	16484 <flatcc_builder_end_table@@Base+0x18c>
   163cc:	ldr	r1, [r4, #32]
   163d0:	mov	r5, r0
   163d4:	ldr	r0, [r4, #16]
   163d8:	ldr	r2, [r4, #20]
   163dc:	ldr	r3, [r4, #52]	; 0x34
   163e0:	ldr	r7, [r1, #24]
   163e4:	str	r7, [r4, #12]
   163e8:	ldrh	r7, [r1, #28]
   163ec:	strh	r7, [r4, #8]
   163f0:	ldr	r7, [r1, #16]
   163f4:	add	r3, r3, r7
   163f8:	str	r3, [r4, #4]
   163fc:	ldr	r3, [r4, #76]	; 0x4c
   16400:	ldr	r1, [r1, #20]
   16404:	add	r1, r3, r1
   16408:	str	r1, [r4]
   1640c:	mov	r1, #0
   16410:	bl	12778 <memset@plt>
   16414:	ldr	r0, [r4, #32]
   16418:	ldr	r1, [r4, #60]	; 0x3c
   1641c:	ldr	r2, [r4, #64]	; 0x40
   16420:	mov	r8, r5
   16424:	ldr	r3, [r0, #8]
   16428:	str	r3, [r4, #20]
   1642c:	ldr	r3, [r0]
   16430:	str	r3, [r4, #28]
   16434:	add	r1, r1, r3
   16438:	ldr	r7, [r0, #4]
   1643c:	str	r1, [r4, #16]
   16440:	sub	r1, r2, r3
   16444:	cmp	r1, r7
   16448:	movhi	r1, r7
   1644c:	str	r1, [r4, #24]
   16450:	ldrh	r1, [r4, #130]	; 0x82
   16454:	ldrh	r2, [r4, #128]	; 0x80
   16458:	cmp	r2, r1
   1645c:	strhcc	r1, [r4, #128]	; 0x80
   16460:	ldrh	r1, [r0, #12]
   16464:	sub	r0, r0, #36	; 0x24
   16468:	str	r0, [r4, #32]
   1646c:	strh	r1, [r4, #130]	; 0x82
   16470:	ldr	r0, [r4, #156]	; 0x9c
   16474:	sub	r0, r0, #1
   16478:	str	r0, [r4, #156]	; 0x9c
   1647c:	b	16484 <flatcc_builder_end_table@@Base+0x18c>
   16480:	mov	r8, #0
   16484:	mov	r0, r8
   16488:	sub	sp, fp, #24
   1648c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16490:	ldr	r0, [pc, #24]	; 164b0 <flatcc_builder_end_table@@Base+0x1b8>
   16494:	ldr	r1, [pc, #24]	; 164b4 <flatcc_builder_end_table@@Base+0x1bc>
   16498:	ldr	r3, [pc, #24]	; 164b8 <flatcc_builder_end_table@@Base+0x1c0>
   1649c:	movw	r2, #1317	; 0x525
   164a0:	add	r0, pc, r0
   164a4:	add	r1, pc, r1
   164a8:	add	r3, pc, r3
   164ac:	bl	127a8 <__assert_fail@plt>
   164b0:	andeq	r4, r0, sl, ror r7
   164b4:	andeq	r3, r0, sl, asr #30
   164b8:	muleq	r0, sl, r8

000164bc <flatcc_builder_create_vector@@Base>:
   164bc:	push	{r4, r5, r6, r7, fp, lr}
   164c0:	add	fp, sp, #16
   164c4:	sub	sp, sp, #80	; 0x50
   164c8:	mov	r7, r0
   164cc:	ldr	r0, [fp, #12]
   164d0:	cmp	r2, r0
   164d4:	bhi	165d0 <flatcc_builder_create_vector@@Base+0x114>
   164d8:	ldr	r0, [fp, #8]
   164dc:	mov	r4, r2
   164e0:	ldrh	r2, [r7, #128]	; 0x80
   164e4:	mov	r5, #4
   164e8:	cmp	r0, #4
   164ec:	movls	r0, r5
   164f0:	cmp	r2, r0
   164f4:	sub	r2, fp, #20
   164f8:	strhcc	r0, [r7, #128]	; 0x80
   164fc:	str	r4, [fp, #-20]	; 0xffffffec
   16500:	sub	r0, r0, #1
   16504:	ldr	ip, [r7, #136]	; 0x88
   16508:	str	r5, [sp, #16]
   1650c:	str	r2, [sp, #12]
   16510:	mov	r2, #1
   16514:	str	r5, [sp, #4]
   16518:	str	r2, [sp, #8]
   1651c:	mls	r6, r3, r4, ip
   16520:	mul	r3, r3, r4
   16524:	cmp	r3, #0
   16528:	and	r0, r6, r0
   1652c:	movne	r2, #2
   16530:	addne	r5, r3, #4
   16534:	strne	r3, [sp, #24]
   16538:	strne	r1, [sp, #20]
   1653c:	strne	r2, [sp, #8]
   16540:	strne	r5, [sp, #4]
   16544:	cmp	r0, #0
   16548:	beq	16574 <flatcc_builder_create_vector@@Base+0xb8>
   1654c:	add	r5, r5, r0
   16550:	add	r1, sp, #4
   16554:	str	r5, [sp, #4]
   16558:	add	r1, r1, r2, lsl #3
   1655c:	add	r2, r2, #1
   16560:	ldr	r3, [pc, #168]	; 16610 <flatcc_builder_create_vector@@Base+0x154>
   16564:	ldr	r3, [pc, r3]
   16568:	str	r3, [r1, #8]
   1656c:	str	r0, [r1, #12]
   16570:	str	r2, [sp, #8]
   16574:	cmp	r5, #0
   16578:	ble	165f0 <flatcc_builder_create_vector@@Base+0x134>
   1657c:	ldr	r0, [r7, #36]	; 0x24
   16580:	ldr	r6, [r7, #44]	; 0x2c
   16584:	add	r1, sp, #4
   16588:	sub	r4, ip, r5
   1658c:	str	r5, [sp]
   16590:	add	r1, r1, #8
   16594:	mov	r3, r4
   16598:	blx	r6
   1659c:	cmp	r0, #0
   165a0:	streq	r4, [r7, #136]	; 0x88
   165a4:	moveq	r0, r4
   165a8:	subeq	sp, fp, #16
   165ac:	popeq	{r4, r5, r6, r7, fp, pc}
   165b0:	ldr	r0, [pc, #116]	; 1662c <flatcc_builder_create_vector@@Base+0x170>
   165b4:	ldr	r1, [pc, #116]	; 16630 <flatcc_builder_create_vector@@Base+0x174>
   165b8:	ldr	r3, [pc, #116]	; 16634 <flatcc_builder_create_vector@@Base+0x178>
   165bc:	movw	r2, #651	; 0x28b
   165c0:	add	r0, pc, r0
   165c4:	add	r1, pc, r1
   165c8:	add	r3, pc, r3
   165cc:	bl	127a8 <__assert_fail@plt>
   165d0:	ldr	r0, [pc, #60]	; 16614 <flatcc_builder_create_vector@@Base+0x158>
   165d4:	ldr	r1, [pc, #60]	; 16618 <flatcc_builder_create_vector@@Base+0x15c>
   165d8:	ldr	r3, [pc, #60]	; 1661c <flatcc_builder_create_vector@@Base+0x160>
   165dc:	movw	r2, #1365	; 0x555
   165e0:	add	r0, pc, r0
   165e4:	add	r1, pc, r1
   165e8:	add	r3, pc, r3
   165ec:	bl	127a8 <__assert_fail@plt>
   165f0:	ldr	r0, [pc, #40]	; 16620 <flatcc_builder_create_vector@@Base+0x164>
   165f4:	ldr	r1, [pc, #40]	; 16624 <flatcc_builder_create_vector@@Base+0x168>
   165f8:	ldr	r3, [pc, #40]	; 16628 <flatcc_builder_create_vector@@Base+0x16c>
   165fc:	movw	r2, #647	; 0x287
   16600:	add	r0, pc, r0
   16604:	add	r1, pc, r1
   16608:	add	r3, pc, r3
   1660c:	bl	127a8 <__assert_fail@plt>
   16610:	ldrdeq	r5, [r1], -r8
   16614:	andeq	r4, r0, r4, lsr #15
   16618:	andeq	r3, r0, sl, lsl #28
   1661c:	andeq	r4, r0, pc, lsr #15
   16620:	andeq	r4, r0, fp, lsr #31
   16624:	andeq	r3, r0, sl, ror #27
   16628:	andeq	r4, r0, r2, ror #28
   1662c:	andeq	r4, r0, fp, ror #31
   16630:	andeq	r3, r0, sl, lsr #28
   16634:	andeq	r4, r0, r2, lsr #29

00016638 <flatcc_builder_end_vector@@Base>:
   16638:	push	{r4, r5, fp, lr}
   1663c:	add	fp, sp, #8
   16640:	sub	sp, sp, #8
   16644:	mov	r4, r0
   16648:	ldr	r0, [r0, #32]
   1664c:	ldrh	r1, [r0, #14]
   16650:	cmp	r1, #4
   16654:	bne	16708 <flatcc_builder_end_vector@@Base+0xd0>
   16658:	ldr	r3, [r0, #16]
   1665c:	ldr	r2, [r0, #20]
   16660:	ldr	r0, [r0, #24]
   16664:	ldr	r1, [r4, #16]
   16668:	ldrh	r5, [r4, #130]	; 0x82
   1666c:	str	r0, [sp, #4]
   16670:	mov	r0, r4
   16674:	str	r5, [sp]
   16678:	bl	164bc <flatcc_builder_create_vector@@Base>
   1667c:	mov	r5, r0
   16680:	cmp	r0, #0
   16684:	beq	166fc <flatcc_builder_end_vector@@Base+0xc4>
   16688:	ldr	r0, [r4, #16]
   1668c:	ldr	r2, [r4, #20]
   16690:	mov	r1, #0
   16694:	bl	12778 <memset@plt>
   16698:	ldr	r0, [r4, #32]
   1669c:	ldr	r1, [r4, #60]	; 0x3c
   166a0:	ldr	ip, [r4, #64]	; 0x40
   166a4:	ldr	r3, [r0, #8]
   166a8:	str	r3, [r4, #20]
   166ac:	ldr	r3, [r0]
   166b0:	str	r3, [r4, #28]
   166b4:	add	r1, r1, r3
   166b8:	ldr	r2, [r0, #4]
   166bc:	str	r1, [r4, #16]
   166c0:	sub	r1, ip, r3
   166c4:	cmp	r1, r2
   166c8:	movhi	r1, r2
   166cc:	str	r1, [r4, #24]
   166d0:	ldrh	r1, [r4, #130]	; 0x82
   166d4:	ldrh	r2, [r4, #128]	; 0x80
   166d8:	cmp	r2, r1
   166dc:	strhcc	r1, [r4, #128]	; 0x80
   166e0:	ldrh	r1, [r0, #12]
   166e4:	sub	r0, r0, #36	; 0x24
   166e8:	str	r0, [r4, #32]
   166ec:	strh	r1, [r4, #130]	; 0x82
   166f0:	ldr	r0, [r4, #156]	; 0x9c
   166f4:	sub	r0, r0, #1
   166f8:	str	r0, [r4, #156]	; 0x9c
   166fc:	mov	r0, r5
   16700:	sub	sp, fp, #8
   16704:	pop	{r4, r5, fp, pc}
   16708:	ldr	r0, [pc, #24]	; 16728 <flatcc_builder_end_vector@@Base+0xf0>
   1670c:	ldr	r1, [pc, #24]	; 1672c <flatcc_builder_end_vector@@Base+0xf4>
   16710:	ldr	r3, [pc, #24]	; 16730 <flatcc_builder_end_vector@@Base+0xf8>
   16714:	movw	r2, #1400	; 0x578
   16718:	add	r0, pc, r0
   1671c:	add	r1, pc, r1
   16720:	add	r3, pc, r3
   16724:	bl	127a8 <__assert_fail@plt>
   16728:	andeq	r4, r0, r0, lsl r0
   1672c:	ldrdeq	r3, [r0], -r2
   16730:	andeq	r4, r0, sp, ror #13

00016734 <flatcc_builder_vector_count@@Base>:
   16734:	ldr	r0, [r0, #32]
   16738:	ldr	r0, [r0, #20]
   1673c:	bx	lr

00016740 <flatcc_builder_vector_edit@@Base>:
   16740:	ldr	r0, [r0, #16]
   16744:	bx	lr

00016748 <flatcc_builder_create_offset_vector_direct@@Base>:
   16748:	mov	r3, #0
   1674c:	b	16750 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16750:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16754:	add	fp, sp, #24
   16758:	sub	sp, sp, #80	; 0x50
   1675c:	mov	r6, #0
   16760:	cmn	r2, #-1073741823	; 0xc0000001
   16764:	bhi	168c4 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   16768:	mov	r8, r0
   1676c:	ldrh	r0, [r0, #128]	; 0x80
   16770:	mov	r5, #4
   16774:	sub	r7, fp, #28
   16778:	mov	r4, #1
   1677c:	cmp	r0, #3
   16780:	movls	r0, #4
   16784:	strhls	r0, [r8, #128]	; 0x80
   16788:	str	r2, [fp, #-28]	; 0xffffffe4
   1678c:	ldr	ip, [r8, #136]	; 0x88
   16790:	str	r5, [sp, #16]
   16794:	str	r7, [sp, #12]
   16798:	mov	r7, #0
   1679c:	str	r5, [sp, #4]
   167a0:	str	r4, [sp, #8]
   167a4:	cmp	r7, r2, lsl #2
   167a8:	and	r6, ip, #3
   167ac:	beq	167cc <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   167b0:	lsl	r7, r2, #2
   167b4:	mov	r4, #2
   167b8:	add	r5, r7, #4
   167bc:	str	r7, [sp, #24]
   167c0:	str	r1, [sp, #20]
   167c4:	str	r4, [sp, #8]
   167c8:	str	r5, [sp, #4]
   167cc:	cmp	r6, #0
   167d0:	beq	167fc <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   167d4:	add	r5, r5, r6
   167d8:	add	r7, sp, #4
   167dc:	str	r5, [sp, #4]
   167e0:	add	r7, r7, r4, lsl #3
   167e4:	add	r4, r4, #1
   167e8:	ldr	r0, [pc, #352]	; 16950 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   167ec:	ldr	r0, [pc, r0]
   167f0:	str	r0, [r7, #8]
   167f4:	str	r6, [r7, #12]
   167f8:	str	r4, [sp, #8]
   167fc:	cmp	r2, #0
   16800:	beq	1688c <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   16804:	sub	r0, r5, ip
   16808:	mov	r6, r3
   1680c:	sub	r0, r0, #4
   16810:	b	16828 <flatcc_builder_create_offset_vector_direct@@Base+0xe0>
   16814:	sub	r0, r0, #4
   16818:	add	r1, r1, #4
   1681c:	add	r6, r6, #1
   16820:	subs	r2, r2, #1
   16824:	beq	16888 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16828:	ldr	r7, [r1]
   1682c:	cmp	r7, #0
   16830:	beq	16854 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16834:	add	r7, r0, r7
   16838:	cmp	r3, #0
   1683c:	str	r7, [r1]
   16840:	beq	16814 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16844:	ldrb	r7, [r6]
   16848:	cmp	r7, #0
   1684c:	bne	16814 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16850:	b	168d0 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   16854:	cmp	r3, #0
   16858:	beq	168f0 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   1685c:	ldrb	r7, [r6]
   16860:	cmp	r7, #0
   16864:	beq	16814 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16868:	ldr	r0, [pc, #240]	; 16960 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   1686c:	ldr	r1, [pc, #240]	; 16964 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   16870:	ldr	r3, [pc, #240]	; 16968 <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   16874:	movw	r2, #1461	; 0x5b5
   16878:	add	r0, pc, r0
   1687c:	add	r1, pc, r1
   16880:	add	r3, pc, r3
   16884:	bl	127a8 <__assert_fail@plt>
   16888:	ldr	ip, [r8, #136]	; 0x88
   1688c:	cmp	r5, #0
   16890:	ble	16910 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   16894:	ldr	r0, [r8, #36]	; 0x24
   16898:	ldr	r7, [r8, #44]	; 0x2c
   1689c:	add	r1, sp, #4
   168a0:	sub	r6, ip, r5
   168a4:	mov	r2, r4
   168a8:	str	r5, [sp]
   168ac:	add	r1, r1, #8
   168b0:	mov	r3, r6
   168b4:	blx	r7
   168b8:	cmp	r0, #0
   168bc:	bne	16930 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   168c0:	str	r6, [r8, #136]	; 0x88
   168c4:	mov	r0, r6
   168c8:	sub	sp, fp, #24
   168cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168d0:	ldr	r0, [pc, #124]	; 16954 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   168d4:	ldr	r1, [pc, #124]	; 16958 <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   168d8:	ldr	r3, [pc, #124]	; 1695c <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   168dc:	movw	r2, #1457	; 0x5b1
   168e0:	add	r0, pc, r0
   168e4:	add	r1, pc, r1
   168e8:	add	r3, pc, r3
   168ec:	bl	127a8 <__assert_fail@plt>
   168f0:	ldr	r0, [pc, #116]	; 1696c <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   168f4:	ldr	r1, [pc, #116]	; 16970 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   168f8:	ldr	r3, [pc, #116]	; 16974 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   168fc:	movw	r2, #1463	; 0x5b7
   16900:	add	r0, pc, r0
   16904:	add	r1, pc, r1
   16908:	add	r3, pc, r3
   1690c:	bl	127a8 <__assert_fail@plt>
   16910:	ldr	r0, [pc, #96]	; 16978 <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16914:	ldr	r1, [pc, #96]	; 1697c <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   16918:	ldr	r3, [pc, #96]	; 16980 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   1691c:	movw	r2, #647	; 0x287
   16920:	add	r0, pc, r0
   16924:	add	r1, pc, r1
   16928:	add	r3, pc, r3
   1692c:	bl	127a8 <__assert_fail@plt>
   16930:	ldr	r0, [pc, #76]	; 16984 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16934:	ldr	r1, [pc, #76]	; 16988 <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   16938:	ldr	r3, [pc, #76]	; 1698c <flatcc_builder_create_offset_vector_direct@@Base+0x244>
   1693c:	movw	r2, #651	; 0x28b
   16940:	add	r0, pc, r0
   16944:	add	r1, pc, r1
   16948:	add	r3, pc, r3
   1694c:	bl	127a8 <__assert_fail@plt>
   16950:	andeq	r5, r1, r0, asr r8
   16954:			; <UNDEFINED> instruction: 0x00004cbf
   16958:	andeq	r3, r0, sl, lsl #22
   1695c:	andeq	r4, r0, r5, asr #25
   16960:			; <UNDEFINED> instruction: 0x00004db8
   16964:	andeq	r3, r0, r2, ror fp
   16968:	andeq	r4, r0, sp, lsr #26
   1696c:	andeq	r4, r0, fp, lsr #25
   16970:	andeq	r3, r0, sl, ror #21
   16974:	andeq	r4, r0, r5, lsr #25
   16978:	andeq	r4, r0, fp, lsl #25
   1697c:	andeq	r3, r0, sl, asr #21
   16980:	andeq	r4, r0, r2, asr #22
   16984:	andeq	r4, r0, fp, ror #24
   16988:	andeq	r3, r0, sl, lsr #21
   1698c:	andeq	r4, r0, r2, lsr #22

00016990 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16990:	push	{r4, r5, fp, lr}
   16994:	add	fp, sp, #8
   16998:	mov	r4, r0
   1699c:	ldr	r0, [r0, #32]
   169a0:	mov	r3, r1
   169a4:	ldrh	r1, [r0, #14]
   169a8:	cmp	r1, #5
   169ac:	bne	16a48 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   169b0:	ldr	r2, [r0, #20]
   169b4:	ldr	r1, [r4, #16]
   169b8:	mov	r0, r4
   169bc:	bl	16750 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   169c0:	mov	r5, r0
   169c4:	cmp	r0, #0
   169c8:	beq	16a40 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   169cc:	ldr	r0, [r4, #16]
   169d0:	ldr	r2, [r4, #20]
   169d4:	mov	r1, #0
   169d8:	bl	12778 <memset@plt>
   169dc:	ldr	r0, [r4, #32]
   169e0:	ldr	r1, [r4, #60]	; 0x3c
   169e4:	ldr	ip, [r4, #64]	; 0x40
   169e8:	ldr	r3, [r0, #8]
   169ec:	str	r3, [r4, #20]
   169f0:	ldr	r3, [r0]
   169f4:	str	r3, [r4, #28]
   169f8:	add	r1, r1, r3
   169fc:	ldr	r2, [r0, #4]
   16a00:	str	r1, [r4, #16]
   16a04:	sub	r1, ip, r3
   16a08:	cmp	r1, r2
   16a0c:	movhi	r1, r2
   16a10:	str	r1, [r4, #24]
   16a14:	ldrh	r1, [r4, #130]	; 0x82
   16a18:	ldrh	r2, [r4, #128]	; 0x80
   16a1c:	cmp	r2, r1
   16a20:	strhcc	r1, [r4, #128]	; 0x80
   16a24:	ldrh	r1, [r0, #12]
   16a28:	sub	r0, r0, #36	; 0x24
   16a2c:	str	r0, [r4, #32]
   16a30:	strh	r1, [r4, #130]	; 0x82
   16a34:	ldr	r0, [r4, #156]	; 0x9c
   16a38:	sub	r0, r0, #1
   16a3c:	str	r0, [r4, #156]	; 0x9c
   16a40:	mov	r0, r5
   16a44:	pop	{r4, r5, fp, pc}
   16a48:	ldr	r0, [pc, #24]	; 16a68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16a4c:	ldr	r1, [pc, #24]	; 16a6c <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16a50:	ldr	r3, [pc, #24]	; 16a70 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16a54:	movw	r2, #1493	; 0x5d5
   16a58:	add	r0, pc, r0
   16a5c:	add	r1, pc, r1
   16a60:	add	r3, pc, r3
   16a64:	bl	127a8 <__assert_fail@plt>
   16a68:	andeq	r3, r0, r9, asr #27
   16a6c:	muleq	r0, r2, r9
   16a70:	andeq	r4, r0, sl, lsr r4

00016a74 <flatcc_builder_offset_vector_edit@@Base>:
   16a74:	ldr	r0, [r0, #16]
   16a78:	bx	lr

00016a7c <flatcc_builder_offset_vector_count@@Base>:
   16a7c:	ldr	r0, [r0, #32]
   16a80:	ldr	r0, [r0, #20]
   16a84:	bx	lr

00016a88 <flatcc_builder_table_add_union@@Base>:
   16a88:	push	{r4, r5, r6, r7, fp, lr}
   16a8c:	add	fp, sp, #16
   16a90:	mov	r5, r0
   16a94:	ldr	r0, [r0, #32]
   16a98:	ldrh	r0, [r0, #14]
   16a9c:	cmp	r0, #3
   16aa0:	bne	16b28 <flatcc_builder_table_add_union@@Base+0xa0>
   16aa4:	mov	r7, r3
   16aa8:	mov	r4, r2
   16aac:	mov	r6, r1
   16ab0:	cmp	r3, #0
   16ab4:	beq	16ac4 <flatcc_builder_table_add_union@@Base+0x3c>
   16ab8:	uxtb	r0, r4
   16abc:	cmp	r0, #0
   16ac0:	beq	16b48 <flatcc_builder_table_add_union@@Base+0xc0>
   16ac4:	cmp	r7, #0
   16ac8:	beq	16ae4 <flatcc_builder_table_add_union@@Base+0x5c>
   16acc:	mov	r0, r5
   16ad0:	mov	r1, r6
   16ad4:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   16ad8:	cmp	r0, #0
   16adc:	beq	16b68 <flatcc_builder_table_add_union@@Base+0xe0>
   16ae0:	str	r7, [r0]
   16ae4:	sub	r1, r6, #1
   16ae8:	mov	r0, r5
   16aec:	mov	r2, #1
   16af0:	mov	r3, #1
   16af4:	bl	16d6c <flatcc_builder_table_add@@Base>
   16af8:	cmp	r0, #0
   16afc:	strbne	r4, [r0]
   16b00:	movne	r0, #0
   16b04:	popne	{r4, r5, r6, r7, fp, pc}
   16b08:	ldr	r0, [pc, #156]	; 16bac <flatcc_builder_table_add_union@@Base+0x124>
   16b0c:	ldr	r1, [pc, #156]	; 16bb0 <flatcc_builder_table_add_union@@Base+0x128>
   16b10:	ldr	r3, [pc, #156]	; 16bb4 <flatcc_builder_table_add_union@@Base+0x12c>
   16b14:	movw	r2, #1526	; 0x5f6
   16b18:	add	r0, pc, r0
   16b1c:	add	r1, pc, r1
   16b20:	add	r3, pc, r3
   16b24:	bl	127a8 <__assert_fail@plt>
   16b28:	ldr	r0, [pc, #88]	; 16b88 <flatcc_builder_table_add_union@@Base+0x100>
   16b2c:	ldr	r1, [pc, #88]	; 16b8c <flatcc_builder_table_add_union@@Base+0x104>
   16b30:	ldr	r3, [pc, #88]	; 16b90 <flatcc_builder_table_add_union@@Base+0x108>
   16b34:	movw	r2, #1518	; 0x5ee
   16b38:	add	r0, pc, r0
   16b3c:	add	r1, pc, r1
   16b40:	add	r3, pc, r3
   16b44:	bl	127a8 <__assert_fail@plt>
   16b48:	ldr	r0, [pc, #68]	; 16b94 <flatcc_builder_table_add_union@@Base+0x10c>
   16b4c:	ldr	r1, [pc, #68]	; 16b98 <flatcc_builder_table_add_union@@Base+0x110>
   16b50:	ldr	r3, [pc, #68]	; 16b9c <flatcc_builder_table_add_union@@Base+0x114>
   16b54:	movw	r2, #1519	; 0x5ef
   16b58:	add	r0, pc, r0
   16b5c:	add	r1, pc, r1
   16b60:	add	r3, pc, r3
   16b64:	bl	127a8 <__assert_fail@plt>
   16b68:	ldr	r0, [pc, #48]	; 16ba0 <flatcc_builder_table_add_union@@Base+0x118>
   16b6c:	ldr	r1, [pc, #48]	; 16ba4 <flatcc_builder_table_add_union@@Base+0x11c>
   16b70:	ldr	r3, [pc, #48]	; 16ba8 <flatcc_builder_table_add_union@@Base+0x120>
   16b74:	movw	r2, #1522	; 0x5f2
   16b78:	add	r0, pc, r0
   16b7c:	add	r1, pc, r1
   16b80:	add	r3, pc, r3
   16b84:	bl	127a8 <__assert_fail@plt>
   16b88:	andeq	r4, r0, r2, ror #1
   16b8c:			; <UNDEFINED> instruction: 0x000038b2
   16b90:	andeq	r4, r0, ip, asr #7
   16b94:	andeq	r4, r0, ip, lsl #8
   16b98:	muleq	r0, r2, r8
   16b9c:	andeq	r4, r0, ip, lsr #7
   16ba0:	andeq	r4, r0, lr, lsl #8
   16ba4:	andeq	r3, r0, r2, ror r8
   16ba8:	andeq	r4, r0, ip, lsl #7
   16bac:	andeq	r4, r0, r8, ror r4
   16bb0:	ldrdeq	r3, [r0], -r2
   16bb4:	andeq	r4, r0, ip, ror #7

00016bb8 <flatcc_builder_table_add_offset@@Base>:
   16bb8:	push	{r4, r5, r6, r7, fp, lr}
   16bbc:	add	fp, sp, #16
   16bc0:	sub	sp, sp, #8
   16bc4:	mov	r4, r0
   16bc8:	ldr	r0, [r0, #32]
   16bcc:	ldrh	r0, [r0, #14]
   16bd0:	cmp	r0, #3
   16bd4:	bne	16ce8 <flatcc_builder_table_add_offset@@Base+0x130>
   16bd8:	movw	r0, #32765	; 0x7ffd
   16bdc:	mov	r5, r1
   16be0:	cmp	r1, r0
   16be4:	bcs	16d08 <flatcc_builder_table_add_offset@@Base+0x150>
   16be8:	ldr	r0, [r4, #4]
   16bec:	add	r1, r0, r5, lsl #1
   16bf0:	ldrh	r1, [r1]
   16bf4:	cmp	r1, #0
   16bf8:	bne	16d28 <flatcc_builder_table_add_offset@@Base+0x170>
   16bfc:	ldr	r2, [r4, #20]
   16c00:	ldr	r1, [r4, #12]
   16c04:	ldr	r3, [r4, #24]
   16c08:	add	r2, r2, #3
   16c0c:	eor	r1, r1, r5
   16c10:	bic	r6, r2, #3
   16c14:	movw	r2, #31153	; 0x79b1
   16c18:	movt	r2, #40503	; 0x9e37
   16c1c:	add	r7, r6, #4
   16c20:	cmp	r7, r3
   16c24:	str	r7, [r4, #20]
   16c28:	mul	r1, r1, r2
   16c2c:	eor	r1, r1, #4
   16c30:	mul	r1, r1, r2
   16c34:	str	r1, [r4, #12]
   16c38:	bls	16cac <flatcc_builder_table_add_offset@@Base+0xf4>
   16c3c:	ldr	r1, [r4, #28]
   16c40:	ldr	r0, [r4, #40]	; 0x28
   16c44:	ldr	ip, [r4, #48]	; 0x30
   16c48:	mov	r2, #1
   16c4c:	mov	r3, #1
   16c50:	str	r2, [sp]
   16c54:	add	r2, r1, r7
   16c58:	add	r1, r4, #60	; 0x3c
   16c5c:	blx	ip
   16c60:	mov	r1, r0
   16c64:	mov	r0, #0
   16c68:	cmp	r1, #0
   16c6c:	beq	16c78 <flatcc_builder_table_add_offset@@Base+0xc0>
   16c70:	sub	sp, fp, #16
   16c74:	pop	{r4, r5, r6, r7, fp, pc}
   16c78:	ldr	r0, [r4, #28]
   16c7c:	ldr	r2, [r4, #60]	; 0x3c
   16c80:	ldr	r3, [r4, #64]	; 0x40
   16c84:	ldr	r1, [r4, #32]
   16c88:	add	r2, r2, r0
   16c8c:	sub	r0, r3, r0
   16c90:	str	r2, [r4, #16]
   16c94:	movw	r2, #65532	; 0xfffc
   16c98:	cmp	r0, r2
   16c9c:	movcs	r0, r2
   16ca0:	str	r0, [r4, #24]
   16ca4:	str	r2, [r1, #4]
   16ca8:	ldr	r0, [r4, #4]
   16cac:	uxth	r1, r5
   16cb0:	add	r0, r0, r1, lsl #1
   16cb4:	strh	r7, [r0]
   16cb8:	ldrh	r0, [r4, #8]
   16cbc:	cmp	r0, r1
   16cc0:	addls	r0, r5, #1
   16cc4:	strhls	r0, [r4, #8]
   16cc8:	ldr	r0, [r4]
   16ccc:	add	r1, r0, #2
   16cd0:	str	r1, [r4]
   16cd4:	strh	r6, [r0]
   16cd8:	ldr	r0, [r4, #16]
   16cdc:	add	r0, r0, r6
   16ce0:	sub	sp, fp, #16
   16ce4:	pop	{r4, r5, r6, r7, fp, pc}
   16ce8:	ldr	r0, [pc, #88]	; 16d48 <flatcc_builder_table_add_offset@@Base+0x190>
   16cec:	ldr	r1, [pc, #88]	; 16d4c <flatcc_builder_table_add_offset@@Base+0x194>
   16cf0:	ldr	r3, [pc, #88]	; 16d50 <flatcc_builder_table_add_offset@@Base+0x198>
   16cf4:	movw	r2, #1811	; 0x713
   16cf8:	add	r0, pc, r0
   16cfc:	add	r1, pc, r1
   16d00:	add	r3, pc, r3
   16d04:	bl	127a8 <__assert_fail@plt>
   16d08:	ldr	r0, [pc, #68]	; 16d54 <flatcc_builder_table_add_offset@@Base+0x19c>
   16d0c:	ldr	r1, [pc, #68]	; 16d58 <flatcc_builder_table_add_offset@@Base+0x1a0>
   16d10:	ldr	r3, [pc, #68]	; 16d5c <flatcc_builder_table_add_offset@@Base+0x1a4>
   16d14:	movw	r2, #1812	; 0x714
   16d18:	add	r0, pc, r0
   16d1c:	add	r1, pc, r1
   16d20:	add	r3, pc, r3
   16d24:	bl	127a8 <__assert_fail@plt>
   16d28:	ldr	r0, [pc, #48]	; 16d60 <flatcc_builder_table_add_offset@@Base+0x1a8>
   16d2c:	ldr	r1, [pc, #48]	; 16d64 <flatcc_builder_table_add_offset@@Base+0x1ac>
   16d30:	ldr	r3, [pc, #48]	; 16d68 <flatcc_builder_table_add_offset@@Base+0x1b0>
   16d34:	movw	r2, #1819	; 0x71b
   16d38:	add	r0, pc, r0
   16d3c:	add	r1, pc, r1
   16d40:	add	r3, pc, r3
   16d44:	bl	127a8 <__assert_fail@plt>
   16d48:	andeq	r3, r0, r2, lsr #30
   16d4c:	strdeq	r3, [r0], -r2
   16d50:	andeq	r4, r0, lr, lsl #12
   16d54:	andeq	r4, r0, r6, ror r5
   16d58:	ldrdeq	r3, [r0], -r2
   16d5c:	andeq	r4, r0, lr, ror #11
   16d60:	andeq	r4, r0, r3, ror r8
   16d64:			; <UNDEFINED> instruction: 0x000036b2
   16d68:	andeq	r4, r0, lr, asr #11

00016d6c <flatcc_builder_table_add@@Base>:
   16d6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d70:	add	fp, sp, #24
   16d74:	sub	sp, sp, #8
   16d78:	mov	r4, r0
   16d7c:	ldr	r0, [r0, #32]
   16d80:	ldrh	r0, [r0, #14]
   16d84:	cmp	r0, #3
   16d88:	bne	16ea8 <flatcc_builder_table_add@@Base+0x13c>
   16d8c:	movw	r0, #32765	; 0x7ffd
   16d90:	mov	r8, r1
   16d94:	cmp	r1, r0
   16d98:	bcs	16ec8 <flatcc_builder_table_add@@Base+0x15c>
   16d9c:	ldrh	r0, [r4, #130]	; 0x82
   16da0:	cmp	r0, r3
   16da4:	strhcc	r3, [r4, #130]	; 0x82
   16da8:	ldr	r0, [r4, #4]
   16dac:	add	r1, r0, r8, lsl #1
   16db0:	ldrh	r1, [r1]
   16db4:	cmp	r1, #0
   16db8:	bne	16ee8 <flatcc_builder_table_add@@Base+0x17c>
   16dbc:	ldr	r1, [r4, #12]
   16dc0:	movw	r7, #31153	; 0x79b1
   16dc4:	ldr	r6, [r4, #20]
   16dc8:	ldr	r5, [r4, #24]
   16dcc:	movt	r7, #40503	; 0x9e37
   16dd0:	eor	r1, r1, r8
   16dd4:	mul	r1, r1, r7
   16dd8:	eor	r1, r1, r2
   16ddc:	mul	r1, r1, r7
   16de0:	str	r1, [r4, #12]
   16de4:	add	r1, r3, r6
   16de8:	rsb	r3, r3, #0
   16dec:	sub	r1, r1, #1
   16df0:	and	r6, r1, r3
   16df4:	add	r1, r6, r2
   16df8:	cmp	r1, r5
   16dfc:	str	r1, [r4, #20]
   16e00:	bcc	16e78 <flatcc_builder_table_add@@Base+0x10c>
   16e04:	ldr	r2, [r4, #28]
   16e08:	ldr	r0, [r4, #40]	; 0x28
   16e0c:	ldr	r7, [r4, #48]	; 0x30
   16e10:	mov	r3, #1
   16e14:	str	r3, [sp]
   16e18:	mov	r3, #1
   16e1c:	add	r1, r1, r2
   16e20:	add	r2, r1, #1
   16e24:	add	r1, r4, #60	; 0x3c
   16e28:	blx	r7
   16e2c:	mov	r1, r0
   16e30:	mov	r0, #0
   16e34:	cmp	r1, #0
   16e38:	beq	16e44 <flatcc_builder_table_add@@Base+0xd8>
   16e3c:	sub	sp, fp, #24
   16e40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e44:	ldr	r0, [r4, #28]
   16e48:	ldr	r2, [r4, #60]	; 0x3c
   16e4c:	ldr	r3, [r4, #64]	; 0x40
   16e50:	ldr	r1, [r4, #32]
   16e54:	add	r2, r2, r0
   16e58:	sub	r0, r3, r0
   16e5c:	str	r2, [r4, #16]
   16e60:	movw	r2, #65532	; 0xfffc
   16e64:	cmp	r0, r2
   16e68:	movcs	r0, r2
   16e6c:	str	r0, [r4, #24]
   16e70:	str	r2, [r1, #4]
   16e74:	ldr	r0, [r4, #4]
   16e78:	uxth	r1, r8
   16e7c:	add	r2, r6, #4
   16e80:	add	r0, r0, r1, lsl #1
   16e84:	strh	r2, [r0]
   16e88:	ldrh	r0, [r4, #8]
   16e8c:	cmp	r0, r1
   16e90:	addls	r0, r8, #1
   16e94:	strhls	r0, [r4, #8]
   16e98:	ldr	r0, [r4, #16]
   16e9c:	add	r0, r0, r6
   16ea0:	sub	sp, fp, #24
   16ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ea8:	ldr	r0, [pc, #88]	; 16f08 <flatcc_builder_table_add@@Base+0x19c>
   16eac:	ldr	r1, [pc, #88]	; 16f0c <flatcc_builder_table_add@@Base+0x1a0>
   16eb0:	ldr	r3, [pc, #88]	; 16f10 <flatcc_builder_table_add@@Base+0x1a4>
   16eb4:	movw	r2, #1773	; 0x6ed
   16eb8:	add	r0, pc, r0
   16ebc:	add	r1, pc, r1
   16ec0:	add	r3, pc, r3
   16ec4:	bl	127a8 <__assert_fail@plt>
   16ec8:	ldr	r0, [pc, #68]	; 16f14 <flatcc_builder_table_add@@Base+0x1a8>
   16ecc:	ldr	r1, [pc, #68]	; 16f18 <flatcc_builder_table_add@@Base+0x1ac>
   16ed0:	ldr	r3, [pc, #68]	; 16f1c <flatcc_builder_table_add@@Base+0x1b0>
   16ed4:	movw	r2, #1774	; 0x6ee
   16ed8:	add	r0, pc, r0
   16edc:	add	r1, pc, r1
   16ee0:	add	r3, pc, r3
   16ee4:	bl	127a8 <__assert_fail@plt>
   16ee8:	ldr	r0, [pc, #48]	; 16f20 <flatcc_builder_table_add@@Base+0x1b4>
   16eec:	ldr	r1, [pc, #48]	; 16f24 <flatcc_builder_table_add@@Base+0x1b8>
   16ef0:	ldr	r3, [pc, #48]	; 16f28 <flatcc_builder_table_add@@Base+0x1bc>
   16ef4:	movw	r2, #1784	; 0x6f8
   16ef8:	add	r0, pc, r0
   16efc:	add	r1, pc, r1
   16f00:	add	r3, pc, r3
   16f04:	bl	127a8 <__assert_fail@plt>
   16f08:	andeq	r3, r0, r2, ror #26
   16f0c:	andeq	r3, r0, r2, lsr r5
   16f10:	andeq	r4, r0, r4, lsl #7
   16f14:			; <UNDEFINED> instruction: 0x000043b6
   16f18:	andeq	r3, r0, r2, lsl r5
   16f1c:	andeq	r4, r0, r4, ror #6
   16f20:			; <UNDEFINED> instruction: 0x000046b3
   16f24:	strdeq	r3, [r0], -r2
   16f28:	andeq	r4, r0, r4, asr #6

00016f2c <flatcc_builder_table_add_union_vector@@Base>:
   16f2c:	push	{r4, r5, r6, r7, fp, lr}
   16f30:	add	fp, sp, #16
   16f34:	mov	r6, r0
   16f38:	ldr	r0, [r0, #32]
   16f3c:	ldrh	r0, [r0, #14]
   16f40:	cmp	r0, #3
   16f44:	bne	16fb0 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16f48:	mov	r5, r1
   16f4c:	clz	r1, r3
   16f50:	cmp	r2, #0
   16f54:	mov	r0, r2
   16f58:	mov	r4, r3
   16f5c:	mov	r7, r2
   16f60:	movwne	r0, #1
   16f64:	lsr	r1, r1, #5
   16f68:	teq	r1, r0
   16f6c:	beq	16fd0 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   16f70:	cmp	r7, #0
   16f74:	beq	16fa8 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16f78:	sub	r1, r5, #1
   16f7c:	mov	r0, r6
   16f80:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   16f84:	cmp	r0, #0
   16f88:	beq	16ff0 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   16f8c:	str	r7, [r0]
   16f90:	mov	r0, r6
   16f94:	mov	r1, r5
   16f98:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   16f9c:	cmp	r0, #0
   16fa0:	beq	17010 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   16fa4:	str	r4, [r0]
   16fa8:	mov	r0, #0
   16fac:	pop	{r4, r5, r6, r7, fp, pc}
   16fb0:	ldr	r0, [pc, #120]	; 17030 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16fb4:	ldr	r1, [pc, #120]	; 17034 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16fb8:	ldr	r3, [pc, #120]	; 17038 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16fbc:	mov	r2, #1536	; 0x600
   16fc0:	add	r0, pc, r0
   16fc4:	add	r1, pc, r1
   16fc8:	add	r3, pc, r3
   16fcc:	bl	127a8 <__assert_fail@plt>
   16fd0:	ldr	r0, [pc, #100]	; 1703c <flatcc_builder_table_add_union_vector@@Base+0x110>
   16fd4:	ldr	r1, [pc, #100]	; 17040 <flatcc_builder_table_add_union_vector@@Base+0x114>
   16fd8:	ldr	r3, [pc, #100]	; 17044 <flatcc_builder_table_add_union_vector@@Base+0x118>
   16fdc:	movw	r2, #1537	; 0x601
   16fe0:	add	r0, pc, r0
   16fe4:	add	r1, pc, r1
   16fe8:	add	r3, pc, r3
   16fec:	bl	127a8 <__assert_fail@plt>
   16ff0:	ldr	r0, [pc, #80]	; 17048 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   16ff4:	ldr	r1, [pc, #80]	; 1704c <flatcc_builder_table_add_union_vector@@Base+0x120>
   16ff8:	ldr	r3, [pc, #80]	; 17050 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16ffc:	movw	r2, #1540	; 0x604
   17000:	add	r0, pc, r0
   17004:	add	r1, pc, r1
   17008:	add	r3, pc, r3
   1700c:	bl	127a8 <__assert_fail@plt>
   17010:	ldr	r0, [pc, #60]	; 17054 <flatcc_builder_table_add_union_vector@@Base+0x128>
   17014:	ldr	r1, [pc, #60]	; 17058 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   17018:	ldr	r3, [pc, #60]	; 1705c <flatcc_builder_table_add_union_vector@@Base+0x130>
   1701c:	movw	r2, #1544	; 0x608
   17020:	add	r0, pc, r0
   17024:	add	r1, pc, r1
   17028:	add	r3, pc, r3
   1702c:	bl	127a8 <__assert_fail@plt>
   17030:	andeq	r3, r0, sl, asr ip
   17034:	andeq	r3, r0, sl, lsr #8
   17038:	ldrdeq	r3, [r0], -r4
   1703c:	andeq	r4, r0, pc, lsl r0
   17040:	andeq	r3, r0, sl, lsl #8
   17044:			; <UNDEFINED> instruction: 0x00003fb4
   17048:	andeq	r3, r0, r6, lsl #31
   1704c:	andeq	r3, r0, sl, ror #7
   17050:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   17054:	andeq	r3, r0, r6, ror #30
   17058:	andeq	r3, r0, sl, asr #7
   1705c:	andeq	r3, r0, r4, ror pc

00017060 <flatcc_builder_create_union_vector@@Base>:
   17060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17064:	add	fp, sp, #28
   17068:	sub	sp, sp, #12
   1706c:	mov	r6, #0
   17070:	mov	r4, r1
   17074:	mov	r8, r0
   17078:	mov	sl, r3
   1707c:	mov	r9, r2
   17080:	mov	r7, #4
   17084:	str	r6, [r0]
   17088:	str	r6, [r0, #4]
   1708c:	mov	r0, r1
   17090:	mov	r1, #4
   17094:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   17098:	cmp	r0, #0
   1709c:	beq	170a8 <flatcc_builder_create_union_vector@@Base+0x48>
   170a0:	sub	sp, fp, #28
   170a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a8:	ldr	r0, [r4, #32]
   170ac:	mov	r1, #5
   170b0:	str	r7, [r0, #16]
   170b4:	ldr	r0, [r4, #32]
   170b8:	str	r6, [r0, #20]
   170bc:	ldr	r0, [r4, #32]
   170c0:	strh	r1, [r0, #14]
   170c4:	ldr	r1, [r4, #28]
   170c8:	ldr	r2, [r4, #60]	; 0x3c
   170cc:	ldr	r3, [r4, #64]	; 0x40
   170d0:	add	r2, r2, r1
   170d4:	sub	r1, r3, r1
   170d8:	str	r2, [r4, #16]
   170dc:	mvn	r2, #3
   170e0:	cmn	r1, #4
   170e4:	movcs	r1, r2
   170e8:	str	r1, [r4, #24]
   170ec:	str	r2, [r0, #4]
   170f0:	ldr	r1, [r0, #20]
   170f4:	adds	r1, r1, sl
   170f8:	cmpcc	r1, #1073741824	; 0x40000000
   170fc:	bcc	17120 <flatcc_builder_create_union_vector@@Base+0xc0>
   17100:	ldr	r0, [pc, #644]	; 1738c <flatcc_builder_create_union_vector@@Base+0x32c>
   17104:	ldr	r1, [pc, #644]	; 17390 <flatcc_builder_create_union_vector@@Base+0x330>
   17108:	ldr	r3, [pc, #644]	; 17394 <flatcc_builder_create_union_vector@@Base+0x334>
   1710c:	mov	r2, #892	; 0x37c
   17110:	add	r0, pc, r0
   17114:	add	r1, pc, r1
   17118:	add	r3, pc, r3
   1711c:	bl	127a8 <__assert_fail@plt>
   17120:	str	r1, [r0, #20]
   17124:	ldr	r7, [r4, #20]
   17128:	ldr	r0, [r4, #24]
   1712c:	add	r1, r7, sl, lsl #2
   17130:	cmp	r1, r0
   17134:	str	r1, [r4, #20]
   17138:	bcs	1714c <flatcc_builder_create_union_vector@@Base+0xec>
   1713c:	ldr	r1, [r4, #16]
   17140:	adds	r2, r1, r7
   17144:	bne	171b4 <flatcc_builder_create_union_vector@@Base+0x154>
   17148:	b	170a0 <flatcc_builder_create_union_vector@@Base+0x40>
   1714c:	ldr	r2, [r4, #28]
   17150:	ldr	r0, [r4, #40]	; 0x28
   17154:	ldr	r6, [r4, #48]	; 0x30
   17158:	mov	r3, #1
   1715c:	str	r3, [sp]
   17160:	mov	r3, #1
   17164:	add	r1, r1, r2
   17168:	add	r2, r1, #1
   1716c:	add	r1, r4, #60	; 0x3c
   17170:	blx	r6
   17174:	cmp	r0, #0
   17178:	bne	170a0 <flatcc_builder_create_union_vector@@Base+0x40>
   1717c:	ldr	r0, [r4, #28]
   17180:	ldr	r1, [r4, #60]	; 0x3c
   17184:	ldr	r3, [r4, #64]	; 0x40
   17188:	ldr	r2, [r4, #32]
   1718c:	add	r1, r1, r0
   17190:	sub	r0, r3, r0
   17194:	mvn	r3, #3
   17198:	cmn	r0, #4
   1719c:	str	r1, [r4, #16]
   171a0:	movcs	r0, r3
   171a4:	str	r0, [r4, #24]
   171a8:	str	r3, [r2, #4]
   171ac:	adds	r2, r1, r7
   171b0:	beq	170a0 <flatcc_builder_create_union_vector@@Base+0x40>
   171b4:	ldr	r7, [r4, #20]
   171b8:	add	r2, r7, sl
   171bc:	cmp	r2, r0
   171c0:	str	r2, [r4, #20]
   171c4:	bcc	17228 <flatcc_builder_create_union_vector@@Base+0x1c8>
   171c8:	ldr	r1, [r4, #28]
   171cc:	ldr	r0, [r4, #40]	; 0x28
   171d0:	ldr	r6, [r4, #48]	; 0x30
   171d4:	mov	r3, #1
   171d8:	str	r3, [sp]
   171dc:	mov	r3, #1
   171e0:	add	r1, r2, r1
   171e4:	add	r2, r1, #1
   171e8:	add	r1, r4, #60	; 0x3c
   171ec:	blx	r6
   171f0:	cmp	r0, #0
   171f4:	bne	170a0 <flatcc_builder_create_union_vector@@Base+0x40>
   171f8:	ldr	r0, [r4, #28]
   171fc:	ldr	r1, [r4, #60]	; 0x3c
   17200:	ldr	r3, [r4, #64]	; 0x40
   17204:	ldr	r2, [r4, #32]
   17208:	add	r1, r1, r0
   1720c:	sub	r0, r3, r0
   17210:	mvn	r3, #3
   17214:	cmn	r0, #4
   17218:	str	r1, [r4, #16]
   1721c:	movcs	r0, r3
   17220:	str	r0, [r4, #24]
   17224:	str	r3, [r2, #4]
   17228:	adds	r5, r1, r7
   1722c:	beq	170a0 <flatcc_builder_create_union_vector@@Base+0x40>
   17230:	cmp	sl, #0
   17234:	beq	172bc <flatcc_builder_create_union_vector@@Base+0x25c>
   17238:	and	ip, sl, #1
   1723c:	mov	r0, #0
   17240:	cmp	sl, #1
   17244:	str	r5, [sp, #8]
   17248:	beq	172a0 <flatcc_builder_create_union_vector@@Base+0x240>
   1724c:	ldr	r0, [sp, #8]
   17250:	sub	lr, sl, ip
   17254:	add	r2, r1, #4
   17258:	add	r6, r9, #8
   1725c:	add	r7, r0, #1
   17260:	mov	r0, #0
   17264:	ldrb	r3, [r6, #-8]
   17268:	add	r5, r7, r0
   1726c:	strb	r3, [r5, #-1]
   17270:	add	r3, r9, r0, lsl #3
   17274:	ldr	r5, [r3, #4]
   17278:	str	r5, [r2, #-4]
   1727c:	ldrb	r5, [r6]
   17280:	add	r6, r6, #16
   17284:	strb	r5, [r7, r0]
   17288:	add	r0, r0, #2
   1728c:	ldr	r3, [r3, #12]
   17290:	cmp	lr, r0
   17294:	str	r3, [r2]
   17298:	add	r2, r2, #8
   1729c:	bne	17264 <flatcc_builder_create_union_vector@@Base+0x204>
   172a0:	ldr	r5, [sp, #8]
   172a4:	cmp	ip, #0
   172a8:	beq	172bc <flatcc_builder_create_union_vector@@Base+0x25c>
   172ac:	ldrb	r2, [r9, r0, lsl #3]!
   172b0:	strb	r2, [r5, r0]
   172b4:	ldr	r2, [r9, #4]
   172b8:	str	r2, [r1, r0, lsl #2]
   172bc:	mov	r0, r4
   172c0:	mov	r2, sl
   172c4:	mov	r3, r5
   172c8:	bl	16750 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   172cc:	mov	r7, r0
   172d0:	mov	r6, #0
   172d4:	cmp	r0, #0
   172d8:	beq	17304 <flatcc_builder_create_union_vector@@Base+0x2a4>
   172dc:	mvn	r0, #0
   172e0:	mov	r1, #1
   172e4:	mov	r2, sl
   172e8:	mov	r3, #1
   172ec:	str	r1, [sp]
   172f0:	str	r0, [sp, #4]
   172f4:	mov	r0, r4
   172f8:	mov	r1, r5
   172fc:	bl	164bc <flatcc_builder_create_vector@@Base>
   17300:	b	17308 <flatcc_builder_create_union_vector@@Base+0x2a8>
   17304:	mov	r0, #0
   17308:	orr	r1, r6, r7
   1730c:	stm	r8, {r0, r1}
   17310:	mov	r1, #0
   17314:	ldr	r0, [r4, #16]
   17318:	ldr	r2, [r4, #20]
   1731c:	bl	12778 <memset@plt>
   17320:	ldr	r0, [r4, #32]
   17324:	ldr	r1, [r4, #60]	; 0x3c
   17328:	ldr	r2, [r4, #64]	; 0x40
   1732c:	ldr	r3, [r0, #8]
   17330:	str	r3, [r4, #20]
   17334:	ldr	r3, [r0]
   17338:	str	r3, [r4, #28]
   1733c:	add	r1, r1, r3
   17340:	ldr	r7, [r0, #4]
   17344:	str	r1, [r4, #16]
   17348:	sub	r1, r2, r3
   1734c:	cmp	r1, r7
   17350:	movhi	r1, r7
   17354:	str	r1, [r4, #24]
   17358:	ldrh	r1, [r4, #130]	; 0x82
   1735c:	ldrh	r2, [r4, #128]	; 0x80
   17360:	cmp	r2, r1
   17364:	strhcc	r1, [r4, #128]	; 0x80
   17368:	ldrh	r1, [r0, #12]
   1736c:	sub	r0, r0, #36	; 0x24
   17370:	str	r0, [r4, #32]
   17374:	strh	r1, [r4, #130]	; 0x82
   17378:	ldr	r0, [r4, #156]	; 0x9c
   1737c:	sub	r0, r0, #1
   17380:	str	r0, [r4, #156]	; 0x9c
   17384:	sub	sp, fp, #28
   17388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1738c:	andeq	r4, r0, r4, lsr #7
   17390:	ldrdeq	r3, [r0], -sl
   17394:			; <UNDEFINED> instruction: 0x000043b7

00017398 <flatcc_builder_create_union_vector_direct@@Base>:
   17398:	push	{r4, r5, r6, r7, fp, lr}
   1739c:	add	fp, sp, #16
   173a0:	sub	sp, sp, #8
   173a4:	ldr	r7, [fp, #8]
   173a8:	mov	r5, r2
   173ac:	mov	r4, r0
   173b0:	mov	r0, #0
   173b4:	mov	r6, r1
   173b8:	str	r0, [r4]
   173bc:	str	r0, [r4, #4]
   173c0:	mov	r0, r1
   173c4:	mov	r1, r3
   173c8:	mov	r3, r5
   173cc:	mov	r2, r7
   173d0:	bl	16750 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   173d4:	cmp	r0, #0
   173d8:	str	r0, [r4, #4]
   173dc:	beq	17408 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   173e0:	mvn	r0, #0
   173e4:	mov	r1, #1
   173e8:	mov	r2, r7
   173ec:	mov	r3, #1
   173f0:	str	r1, [sp]
   173f4:	str	r0, [sp, #4]
   173f8:	mov	r0, r6
   173fc:	mov	r1, r5
   17400:	bl	164bc <flatcc_builder_create_vector@@Base>
   17404:	str	r0, [r4]
   17408:	sub	sp, fp, #16
   1740c:	pop	{r4, r5, r6, r7, fp, pc}

00017410 <flatcc_builder_start_union_vector@@Base>:
   17410:	push	{r4, sl, fp, lr}
   17414:	add	fp, sp, #8
   17418:	mov	r1, #4
   1741c:	mov	r4, r0
   17420:	bl	143b4 <flatcc_builder_start_buffer@@Base+0xc0>
   17424:	mov	r1, r0
   17428:	mvn	r0, #0
   1742c:	cmp	r1, #0
   17430:	popne	{r4, sl, fp, pc}
   17434:	ldr	r0, [r4, #32]
   17438:	mov	r1, #8
   1743c:	mov	r2, #7
   17440:	str	r1, [r0, #16]
   17444:	mov	r0, #0
   17448:	ldr	r1, [r4, #32]
   1744c:	str	r0, [r1, #20]
   17450:	ldr	r1, [r4, #32]
   17454:	strh	r2, [r1, #14]
   17458:	ldr	r2, [r4, #28]
   1745c:	ldr	r3, [r4, #60]	; 0x3c
   17460:	ldr	ip, [r4, #64]	; 0x40
   17464:	add	r3, r3, r2
   17468:	sub	r2, ip, r2
   1746c:	str	r3, [r4, #16]
   17470:	mvn	r3, #3
   17474:	cmn	r2, #4
   17478:	movcs	r2, r3
   1747c:	str	r2, [r4, #24]
   17480:	str	r3, [r1, #4]
   17484:	pop	{r4, sl, fp, pc}

00017488 <flatcc_builder_end_union_vector@@Base>:
   17488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1748c:	add	fp, sp, #28
   17490:	sub	sp, sp, #20
   17494:	mov	r4, r0
   17498:	mov	r0, #0
   1749c:	mov	r8, r1
   174a0:	str	r0, [r4]
   174a4:	str	r0, [r4, #4]
   174a8:	ldr	r0, [r1, #32]
   174ac:	ldrh	r1, [r0, #14]
   174b0:	cmp	r1, #7
   174b4:	bne	176b8 <flatcc_builder_end_union_vector@@Base+0x230>
   174b8:	ldr	r9, [r0, #20]
   174bc:	ldr	r5, [r8, #20]
   174c0:	ldr	r2, [r8, #24]
   174c4:	add	r0, r9, r9, lsl #2
   174c8:	add	r1, r5, r0
   174cc:	cmp	r1, r2
   174d0:	str	r1, [r8, #20]
   174d4:	bcs	174e8 <flatcc_builder_end_union_vector@@Base+0x60>
   174d8:	ldr	r0, [r8, #16]
   174dc:	adds	r1, r0, r5
   174e0:	bne	17550 <flatcc_builder_end_union_vector@@Base+0xc8>
   174e4:	b	176b0 <flatcc_builder_end_union_vector@@Base+0x228>
   174e8:	ldr	r2, [r8, #28]
   174ec:	ldr	r0, [r8, #40]	; 0x28
   174f0:	ldr	r7, [r8, #48]	; 0x30
   174f4:	mov	r3, #1
   174f8:	str	r3, [sp]
   174fc:	mov	r3, #1
   17500:	add	r1, r1, r2
   17504:	add	r2, r1, #1
   17508:	add	r1, r8, #60	; 0x3c
   1750c:	blx	r7
   17510:	cmp	r0, #0
   17514:	bne	176b0 <flatcc_builder_end_union_vector@@Base+0x228>
   17518:	ldr	r1, [r8, #28]
   1751c:	ldr	r0, [r8, #60]	; 0x3c
   17520:	ldr	r3, [r8, #64]	; 0x40
   17524:	ldr	r2, [r8, #32]
   17528:	add	r0, r0, r1
   1752c:	sub	r1, r3, r1
   17530:	mvn	r3, #3
   17534:	cmn	r1, #4
   17538:	str	r0, [r8, #16]
   1753c:	movcs	r1, r3
   17540:	str	r1, [r8, #24]
   17544:	str	r3, [r2, #4]
   17548:	adds	r1, r0, r5
   1754c:	beq	176b0 <flatcc_builder_end_union_vector@@Base+0x228>
   17550:	add	sl, r1, r9, lsl #2
   17554:	cmp	r9, #0
   17558:	beq	175e8 <flatcc_builder_end_union_vector@@Base+0x160>
   1755c:	and	r2, r9, #1
   17560:	cmp	r9, #1
   17564:	str	r4, [sp, #12]
   17568:	str	r2, [sp, #16]
   1756c:	mov	r2, #0
   17570:	beq	175c8 <flatcc_builder_end_union_vector@@Base+0x140>
   17574:	ldr	r2, [sp, #16]
   17578:	add	r5, r5, #4
   1757c:	add	r6, r0, #8
   17580:	sub	lr, r9, r2
   17584:	mov	r2, #0
   17588:	ldrb	r7, [r6, #-8]
   1758c:	mov	r4, sl
   17590:	add	r3, r0, r2, lsl #3
   17594:	strb	r7, [r4, r2]!
   17598:	add	r7, r0, r5
   1759c:	add	r2, r2, #2
   175a0:	ldr	ip, [r3, #4]
   175a4:	cmp	lr, r2
   175a8:	str	ip, [r7, #-4]
   175ac:	ldrb	r7, [r6]
   175b0:	add	r6, r6, #16
   175b4:	strb	r7, [r4, #1]
   175b8:	ldr	r3, [r3, #12]
   175bc:	str	r3, [r0, r5]
   175c0:	add	r5, r5, #8
   175c4:	bne	17588 <flatcc_builder_end_union_vector@@Base+0x100>
   175c8:	ldr	r3, [sp, #16]
   175cc:	ldr	r4, [sp, #12]
   175d0:	cmp	r3, #0
   175d4:	beq	175e8 <flatcc_builder_end_union_vector@@Base+0x160>
   175d8:	ldrb	r3, [r0, r2, lsl #3]!
   175dc:	strb	r3, [sl, r2]
   175e0:	ldr	r0, [r0, #4]
   175e4:	str	r0, [r1, r2, lsl #2]
   175e8:	mov	r0, r8
   175ec:	mov	r2, r9
   175f0:	mov	r3, sl
   175f4:	bl	16750 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   175f8:	mov	r5, r0
   175fc:	mov	r6, #0
   17600:	cmp	r0, #0
   17604:	beq	17630 <flatcc_builder_end_union_vector@@Base+0x1a8>
   17608:	mvn	r0, #0
   1760c:	mov	r1, #1
   17610:	mov	r2, r9
   17614:	mov	r3, #1
   17618:	str	r1, [sp]
   1761c:	str	r0, [sp, #4]
   17620:	mov	r0, r8
   17624:	mov	r1, sl
   17628:	bl	164bc <flatcc_builder_create_vector@@Base>
   1762c:	b	17634 <flatcc_builder_end_union_vector@@Base+0x1ac>
   17630:	mov	r0, #0
   17634:	orr	r1, r6, r5
   17638:	stm	r4, {r0, r1}
   1763c:	mov	r1, #0
   17640:	ldr	r0, [r8, #16]
   17644:	ldr	r2, [r8, #20]
   17648:	bl	12778 <memset@plt>
   1764c:	ldr	r0, [r8, #32]
   17650:	ldr	r1, [r8, #60]	; 0x3c
   17654:	ldr	r2, [r8, #64]	; 0x40
   17658:	ldr	r3, [r0, #8]
   1765c:	str	r3, [r8, #20]
   17660:	ldr	r3, [r0]
   17664:	str	r3, [r8, #28]
   17668:	add	r1, r1, r3
   1766c:	ldr	r7, [r0, #4]
   17670:	str	r1, [r8, #16]
   17674:	sub	r1, r2, r3
   17678:	cmp	r1, r7
   1767c:	movhi	r1, r7
   17680:	str	r1, [r8, #24]
   17684:	ldrh	r1, [r8, #130]	; 0x82
   17688:	ldrh	r2, [r8, #128]	; 0x80
   1768c:	cmp	r2, r1
   17690:	strhcc	r1, [r8, #128]	; 0x80
   17694:	ldrh	r1, [r0, #12]
   17698:	sub	r0, r0, #36	; 0x24
   1769c:	str	r0, [r8, #32]
   176a0:	strh	r1, [r8, #130]	; 0x82
   176a4:	ldr	r0, [r8, #156]	; 0x9c
   176a8:	sub	r0, r0, #1
   176ac:	str	r0, [r8, #156]	; 0x9c
   176b0:	sub	sp, fp, #28
   176b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b8:	ldr	r0, [pc, #24]	; 176d8 <flatcc_builder_end_union_vector@@Base+0x250>
   176bc:	ldr	r1, [pc, #24]	; 176dc <flatcc_builder_end_union_vector@@Base+0x254>
   176c0:	ldr	r3, [pc, #24]	; 176e0 <flatcc_builder_end_union_vector@@Base+0x258>
   176c4:	movw	r2, #1617	; 0x651
   176c8:	add	r0, pc, r0
   176cc:	add	r1, pc, r1
   176d0:	add	r3, pc, r3
   176d4:	bl	127a8 <__assert_fail@plt>
   176d8:	andeq	r3, r0, pc, asr r9
   176dc:	andeq	r2, r0, r2, lsr #26
   176e0:	andeq	r3, r0, r9, lsl #19

000176e4 <flatcc_builder_union_vector_count@@Base>:
   176e4:	ldr	r0, [r0, #32]
   176e8:	ldr	r0, [r0, #20]
   176ec:	bx	lr

000176f0 <flatcc_builder_union_vector_edit@@Base>:
   176f0:	ldr	r0, [r0, #16]
   176f4:	bx	lr

000176f8 <flatcc_builder_extend_union_vector@@Base>:
   176f8:	push	{r4, r5, fp, lr}
   176fc:	add	fp, sp, #8
   17700:	sub	sp, sp, #8
   17704:	mov	r4, r0
   17708:	ldr	r0, [r0, #32]
   1770c:	ldr	r2, [r0, #20]
   17710:	adds	r2, r2, r1
   17714:	cmpcc	r2, #536870912	; 0x20000000
   17718:	bcc	1773c <flatcc_builder_extend_union_vector@@Base+0x44>
   1771c:	ldr	r0, [pc, #184]	; 177dc <flatcc_builder_extend_union_vector@@Base+0xe4>
   17720:	ldr	r1, [pc, #184]	; 177e0 <flatcc_builder_extend_union_vector@@Base+0xe8>
   17724:	ldr	r3, [pc, #184]	; 177e4 <flatcc_builder_extend_union_vector@@Base+0xec>
   17728:	mov	r2, #892	; 0x37c
   1772c:	add	r0, pc, r0
   17730:	add	r1, pc, r1
   17734:	add	r3, pc, r3
   17738:	bl	127a8 <__assert_fail@plt>
   1773c:	str	r2, [r0, #20]
   17740:	ldr	r5, [r4, #20]
   17744:	ldr	r0, [r4, #24]
   17748:	add	r1, r5, r1, lsl #3
   1774c:	cmp	r1, r0
   17750:	str	r1, [r4, #20]
   17754:	bcs	17760 <flatcc_builder_extend_union_vector@@Base+0x68>
   17758:	ldr	r0, [r4, #16]
   1775c:	b	177d0 <flatcc_builder_extend_union_vector@@Base+0xd8>
   17760:	ldr	r2, [r4, #28]
   17764:	ldr	r0, [r4, #40]	; 0x28
   17768:	ldr	ip, [r4, #48]	; 0x30
   1776c:	mov	r3, #1
   17770:	str	r3, [sp]
   17774:	mov	r3, #1
   17778:	add	r1, r1, r2
   1777c:	add	r2, r1, #1
   17780:	add	r1, r4, #60	; 0x3c
   17784:	blx	ip
   17788:	mov	r1, r0
   1778c:	mov	r0, #0
   17790:	cmp	r1, #0
   17794:	beq	177a0 <flatcc_builder_extend_union_vector@@Base+0xa8>
   17798:	sub	sp, fp, #8
   1779c:	pop	{r4, r5, fp, pc}
   177a0:	ldr	r1, [r4, #28]
   177a4:	ldr	r0, [r4, #60]	; 0x3c
   177a8:	ldr	r3, [r4, #64]	; 0x40
   177ac:	ldr	r2, [r4, #32]
   177b0:	add	r0, r0, r1
   177b4:	sub	r1, r3, r1
   177b8:	mvn	r3, #3
   177bc:	cmn	r1, #4
   177c0:	str	r0, [r4, #16]
   177c4:	movcs	r1, r3
   177c8:	str	r1, [r4, #24]
   177cc:	str	r3, [r2, #4]
   177d0:	add	r0, r0, r5
   177d4:	sub	sp, fp, #8
   177d8:	pop	{r4, r5, fp, pc}
   177dc:	andeq	r3, r0, r8, lsl #27
   177e0:			; <UNDEFINED> instruction: 0x00002cbe
   177e4:	muleq	r0, fp, sp

000177e8 <flatcc_builder_truncate_union_vector@@Base>:
   177e8:	push	{fp, lr}
   177ec:	mov	fp, sp
   177f0:	ldr	r2, [r0, #32]
   177f4:	ldrh	r3, [r2, #14]
   177f8:	cmp	r3, #7
   177fc:	bne	17844 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17800:	ldr	r3, [r2, #20]
   17804:	cmp	r3, r1
   17808:	bcc	17864 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   1780c:	sub	r3, r3, r1
   17810:	str	r3, [r2, #20]
   17814:	ldr	r2, [r0, #32]
   17818:	ldr	r3, [r0, #20]
   1781c:	ldr	ip, [r0, #16]
   17820:	ldr	r2, [r2, #16]
   17824:	mls	r3, r2, r1, r3
   17828:	mul	r2, r2, r1
   1782c:	mov	r1, #0
   17830:	str	r3, [r0, #20]
   17834:	add	r0, ip, r3
   17838:	bl	12778 <memset@plt>
   1783c:	mov	r0, #0
   17840:	pop	{fp, pc}
   17844:	ldr	r0, [pc, #56]	; 17884 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17848:	ldr	r1, [pc, #56]	; 17888 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1784c:	ldr	r3, [pc, #56]	; 1788c <flatcc_builder_truncate_union_vector@@Base+0xa4>
   17850:	movw	r2, #1665	; 0x681
   17854:	add	r0, pc, r0
   17858:	add	r1, pc, r1
   1785c:	add	r3, pc, r3
   17860:	bl	127a8 <__assert_fail@plt>
   17864:	ldr	r0, [pc, #36]	; 17890 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   17868:	ldr	r1, [pc, #36]	; 17894 <flatcc_builder_truncate_union_vector@@Base+0xac>
   1786c:	ldr	r3, [pc, #36]	; 17898 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   17870:	movw	r2, #1666	; 0x682
   17874:	add	r0, pc, r0
   17878:	add	r1, pc, r1
   1787c:	add	r3, pc, r3
   17880:	bl	127a8 <__assert_fail@plt>
   17884:	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   17888:	muleq	r0, r6, fp
   1788c:	andeq	r3, r0, r0, asr r8
   17890:	andeq	r3, r0, r7, lsl r2
   17894:	andeq	r2, r0, r6, ror fp
   17898:	andeq	r3, r0, r0, lsr r8

0001789c <flatcc_builder_union_vector_push@@Base>:
   1789c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178a0:	add	fp, sp, #24
   178a4:	sub	sp, sp, #8
   178a8:	mov	r7, r0
   178ac:	ldr	r0, [r0, #32]
   178b0:	mov	r9, r1
   178b4:	ldrh	r1, [r0, #14]
   178b8:	cmp	r1, #7
   178bc:	bne	17978 <flatcc_builder_union_vector_push@@Base+0xdc>
   178c0:	ldr	r1, [r0, #20]
   178c4:	mov	r6, #0
   178c8:	cmn	r1, #-536870911	; 0xe0000001
   178cc:	beq	1796c <flatcc_builder_union_vector_push@@Base+0xd0>
   178d0:	add	r1, r1, #1
   178d4:	mov	r8, r2
   178d8:	str	r1, [r0, #20]
   178dc:	ldr	r4, [r7, #20]
   178e0:	ldr	r0, [r7, #24]
   178e4:	add	r1, r4, #8
   178e8:	cmp	r1, r0
   178ec:	str	r1, [r7, #20]
   178f0:	bcs	178fc <flatcc_builder_union_vector_push@@Base+0x60>
   178f4:	ldr	r0, [r7, #16]
   178f8:	b	1795c <flatcc_builder_union_vector_push@@Base+0xc0>
   178fc:	ldr	r1, [r7, #28]
   17900:	ldr	r0, [r7, #40]	; 0x28
   17904:	ldr	r5, [r7, #48]	; 0x30
   17908:	mov	r2, #1
   1790c:	mov	r3, #1
   17910:	str	r2, [sp]
   17914:	add	r1, r4, r1
   17918:	add	r2, r1, #9
   1791c:	add	r1, r7, #60	; 0x3c
   17920:	blx	r5
   17924:	cmp	r0, #0
   17928:	bne	1796c <flatcc_builder_union_vector_push@@Base+0xd0>
   1792c:	ldr	r1, [r7, #28]
   17930:	ldr	r0, [r7, #60]	; 0x3c
   17934:	ldr	r3, [r7, #64]	; 0x40
   17938:	ldr	r2, [r7, #32]
   1793c:	add	r0, r0, r1
   17940:	sub	r1, r3, r1
   17944:	mvn	r3, #3
   17948:	cmn	r1, #4
   1794c:	str	r0, [r7, #16]
   17950:	movcs	r1, r3
   17954:	str	r1, [r7, #24]
   17958:	str	r3, [r2, #4]
   1795c:	adds	r0, r0, r4
   17960:	movne	r6, r0
   17964:	strne	r9, [r0]
   17968:	strne	r8, [r0, #4]
   1796c:	mov	r0, r6
   17970:	sub	sp, fp, #24
   17974:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17978:	ldr	r0, [pc, #24]	; 17998 <flatcc_builder_union_vector_push@@Base+0xfc>
   1797c:	ldr	r1, [pc, #24]	; 1799c <flatcc_builder_union_vector_push@@Base+0x100>
   17980:	ldr	r3, [pc, #24]	; 179a0 <flatcc_builder_union_vector_push@@Base+0x104>
   17984:	movw	r2, #1677	; 0x68d
   17988:	add	r0, pc, r0
   1798c:	add	r1, pc, r1
   17990:	add	r3, pc, r3
   17994:	bl	127a8 <__assert_fail@plt>
   17998:	muleq	r0, pc, r6	; <UNPREDICTABLE>
   1799c:	andeq	r2, r0, r2, ror #20
   179a0:	andeq	r3, r0, r1, ror #14

000179a4 <flatcc_builder_append_union_vector@@Base>:
   179a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179a8:	add	fp, sp, #24
   179ac:	sub	sp, sp, #8
   179b0:	mov	r6, r0
   179b4:	ldr	r0, [r0, #32]
   179b8:	mov	r8, r1
   179bc:	ldrh	r1, [r0, #14]
   179c0:	cmp	r1, #7
   179c4:	bne	17ab4 <flatcc_builder_append_union_vector@@Base+0x110>
   179c8:	ldr	r1, [r0, #20]
   179cc:	mov	r5, r2
   179d0:	adds	r1, r1, r2
   179d4:	cmpcc	r1, #536870912	; 0x20000000
   179d8:	bcc	179fc <flatcc_builder_append_union_vector@@Base+0x58>
   179dc:	ldr	r0, [pc, #252]	; 17ae0 <flatcc_builder_append_union_vector@@Base+0x13c>
   179e0:	ldr	r1, [pc, #252]	; 17ae4 <flatcc_builder_append_union_vector@@Base+0x140>
   179e4:	ldr	r3, [pc, #252]	; 17ae8 <flatcc_builder_append_union_vector@@Base+0x144>
   179e8:	mov	r2, #892	; 0x37c
   179ec:	add	r0, pc, r0
   179f0:	add	r1, pc, r1
   179f4:	add	r3, pc, r3
   179f8:	bl	127a8 <__assert_fail@plt>
   179fc:	str	r1, [r0, #20]
   17a00:	ldr	r4, [r6, #20]
   17a04:	ldr	r0, [r6, #24]
   17a08:	add	r1, r4, r5, lsl #3
   17a0c:	cmp	r1, r0
   17a10:	str	r1, [r6, #20]
   17a14:	bcs	17a38 <flatcc_builder_append_union_vector@@Base+0x94>
   17a18:	ldr	r0, [r6, #16]
   17a1c:	adds	r7, r0, r4
   17a20:	beq	17aa4 <flatcc_builder_append_union_vector@@Base+0x100>
   17a24:	lsl	r2, r5, #3
   17a28:	mov	r0, r7
   17a2c:	mov	r1, r8
   17a30:	bl	12718 <memcpy@plt>
   17a34:	b	17aa8 <flatcc_builder_append_union_vector@@Base+0x104>
   17a38:	ldr	r2, [r6, #28]
   17a3c:	ldr	r0, [r6, #40]	; 0x28
   17a40:	ldr	r7, [r6, #48]	; 0x30
   17a44:	mov	r3, #1
   17a48:	str	r3, [sp]
   17a4c:	mov	r3, #1
   17a50:	add	r1, r1, r2
   17a54:	add	r2, r1, #1
   17a58:	add	r1, r6, #60	; 0x3c
   17a5c:	blx	r7
   17a60:	mov	r7, #0
   17a64:	cmp	r0, #0
   17a68:	bne	17aa8 <flatcc_builder_append_union_vector@@Base+0x104>
   17a6c:	ldr	r1, [r6, #28]
   17a70:	ldr	r0, [r6, #60]	; 0x3c
   17a74:	ldr	r3, [r6, #64]	; 0x40
   17a78:	ldr	r2, [r6, #32]
   17a7c:	add	r0, r0, r1
   17a80:	sub	r1, r3, r1
   17a84:	mvn	r3, #3
   17a88:	cmn	r1, #4
   17a8c:	str	r0, [r6, #16]
   17a90:	movcs	r1, r3
   17a94:	str	r1, [r6, #24]
   17a98:	str	r3, [r2, #4]
   17a9c:	adds	r7, r0, r4
   17aa0:	bne	17a24 <flatcc_builder_append_union_vector@@Base+0x80>
   17aa4:	mov	r7, #0
   17aa8:	mov	r0, r7
   17aac:	sub	sp, fp, #24
   17ab0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ab4:	ldr	r0, [pc, #24]	; 17ad4 <flatcc_builder_append_union_vector@@Base+0x130>
   17ab8:	ldr	r1, [pc, #24]	; 17ad8 <flatcc_builder_append_union_vector@@Base+0x134>
   17abc:	ldr	r3, [pc, #24]	; 17adc <flatcc_builder_append_union_vector@@Base+0x138>
   17ac0:	movw	r2, #1692	; 0x69c
   17ac4:	add	r0, pc, r0
   17ac8:	add	r1, pc, r1
   17acc:	add	r3, pc, r3
   17ad0:	bl	127a8 <__assert_fail@plt>
   17ad4:	andeq	r3, r0, r3, ror #10
   17ad8:	andeq	r2, r0, r6, lsr #18
   17adc:	muleq	r0, r2, r6
   17ae0:	andeq	r3, r0, r8, asr #21
   17ae4:	strdeq	r2, [r0], -lr
   17ae8:	ldrdeq	r3, [r0], -fp

00017aec <flatcc_builder_create_string@@Base>:
   17aec:	push	{r4, r5, r6, sl, fp, lr}
   17af0:	add	fp, sp, #16
   17af4:	sub	sp, sp, #80	; 0x50
   17af8:	str	r2, [fp, #-20]	; 0xffffffec
   17afc:	mvn	r5, r2
   17b00:	mov	r6, r0
   17b04:	sub	r3, fp, #20
   17b08:	cmp	r2, #0
   17b0c:	add	lr, sp, #4
   17b10:	ldr	ip, [r0, #136]	; 0x88
   17b14:	mov	r0, #4
   17b18:	str	r0, [sp, #16]
   17b1c:	str	r3, [sp, #12]
   17b20:	str	r0, [sp, #4]
   17b24:	mov	r3, #1
   17b28:	addne	r0, r2, #4
   17b2c:	str	r3, [sp, #8]
   17b30:	strne	r2, [sp, #24]
   17b34:	strne	r1, [sp, #20]
   17b38:	movne	r3, #2
   17b3c:	strne	r3, [sp, #8]
   17b40:	strne	r0, [sp, #4]
   17b44:	add	r5, ip, r5
   17b48:	and	r5, r5, #3
   17b4c:	add	r5, r5, #1
   17b50:	add	r1, r0, r5
   17b54:	add	r0, lr, r3, lsl #3
   17b58:	str	r1, [sp, #4]
   17b5c:	cmp	r1, #0
   17b60:	ldr	r2, [pc, #132]	; 17bec <flatcc_builder_create_string@@Base+0x100>
   17b64:	ldr	r2, [pc, r2]
   17b68:	str	r2, [r0, #8]
   17b6c:	add	r2, r3, #1
   17b70:	str	r5, [r0, #12]
   17b74:	str	r2, [sp, #8]
   17b78:	ble	17bcc <flatcc_builder_create_string@@Base+0xe0>
   17b7c:	ldr	r0, [r6, #36]	; 0x24
   17b80:	ldr	r4, [r6, #44]	; 0x2c
   17b84:	sub	r5, ip, r1
   17b88:	str	r1, [sp]
   17b8c:	add	r1, lr, #8
   17b90:	mov	r3, r5
   17b94:	blx	r4
   17b98:	cmp	r0, #0
   17b9c:	streq	r5, [r6, #136]	; 0x88
   17ba0:	moveq	r0, r5
   17ba4:	subeq	sp, fp, #16
   17ba8:	popeq	{r4, r5, r6, sl, fp, pc}
   17bac:	ldr	r0, [pc, #72]	; 17bfc <flatcc_builder_create_string@@Base+0x110>
   17bb0:	ldr	r1, [pc, #72]	; 17c00 <flatcc_builder_create_string@@Base+0x114>
   17bb4:	ldr	r3, [pc, #72]	; 17c04 <flatcc_builder_create_string@@Base+0x118>
   17bb8:	movw	r2, #651	; 0x28b
   17bbc:	add	r0, pc, r0
   17bc0:	add	r1, pc, r1
   17bc4:	add	r3, pc, r3
   17bc8:	bl	127a8 <__assert_fail@plt>
   17bcc:	ldr	r0, [pc, #28]	; 17bf0 <flatcc_builder_create_string@@Base+0x104>
   17bd0:	ldr	r1, [pc, #28]	; 17bf4 <flatcc_builder_create_string@@Base+0x108>
   17bd4:	ldr	r3, [pc, #28]	; 17bf8 <flatcc_builder_create_string@@Base+0x10c>
   17bd8:	movw	r2, #647	; 0x287
   17bdc:	add	r0, pc, r0
   17be0:	add	r1, pc, r1
   17be4:	add	r3, pc, r3
   17be8:	bl	127a8 <__assert_fail@plt>
   17bec:	ldrdeq	r4, [r1], -r8
   17bf0:	andeq	r3, r0, pc, asr #19
   17bf4:	andeq	r2, r0, lr, lsl #16
   17bf8:	andeq	r3, r0, r6, lsl #17
   17bfc:	andeq	r3, r0, pc, ror #19
   17c00:	andeq	r2, r0, lr, lsr #16
   17c04:	andeq	r3, r0, r6, lsr #17

00017c08 <flatcc_builder_create_string_str@@Base>:
   17c08:	push	{r4, r5, fp, lr}
   17c0c:	add	fp, sp, #8
   17c10:	mov	r5, r0
   17c14:	mov	r0, r1
   17c18:	mov	r4, r1
   17c1c:	bl	12760 <strlen@plt>
   17c20:	mov	r2, r0
   17c24:	mov	r0, r5
   17c28:	mov	r1, r4
   17c2c:	pop	{r4, r5, fp, lr}
   17c30:	b	17aec <flatcc_builder_create_string@@Base>

00017c34 <flatcc_builder_create_string_strn@@Base>:
   17c34:	push	{r4, r5, r6, sl, fp, lr}
   17c38:	add	fp, sp, #16
   17c3c:	mov	r6, r0
   17c40:	mov	r5, r1
   17c44:	mov	r0, r1
   17c48:	mov	r1, #0
   17c4c:	mov	r4, r2
   17c50:	bl	12790 <memchr@plt>
   17c54:	cmp	r0, #0
   17c58:	mov	r1, r5
   17c5c:	subne	r4, r0, r5
   17c60:	mov	r0, r6
   17c64:	mov	r2, r4
   17c68:	pop	{r4, r5, r6, sl, fp, lr}
   17c6c:	b	17aec <flatcc_builder_create_string@@Base>

00017c70 <flatcc_builder_end_string@@Base>:
   17c70:	push	{r4, r5, fp, lr}
   17c74:	add	fp, sp, #8
   17c78:	mov	r4, r0
   17c7c:	ldr	r0, [r0, #32]
   17c80:	ldrh	r1, [r0, #14]
   17c84:	cmp	r1, #6
   17c88:	bne	17d30 <flatcc_builder_end_string@@Base+0xc0>
   17c8c:	ldr	r2, [r0, #20]
   17c90:	ldr	r0, [r4, #20]
   17c94:	cmp	r2, r0
   17c98:	bne	17d50 <flatcc_builder_end_string@@Base+0xe0>
   17c9c:	ldr	r1, [r4, #16]
   17ca0:	mov	r0, r4
   17ca4:	bl	17aec <flatcc_builder_create_string@@Base>
   17ca8:	mov	r5, r0
   17cac:	cmp	r0, #0
   17cb0:	beq	17d28 <flatcc_builder_end_string@@Base+0xb8>
   17cb4:	ldr	r0, [r4, #16]
   17cb8:	ldr	r2, [r4, #20]
   17cbc:	mov	r1, #0
   17cc0:	bl	12778 <memset@plt>
   17cc4:	ldr	r0, [r4, #32]
   17cc8:	ldr	r1, [r4, #60]	; 0x3c
   17ccc:	ldr	ip, [r4, #64]	; 0x40
   17cd0:	ldr	r3, [r0, #8]
   17cd4:	str	r3, [r4, #20]
   17cd8:	ldr	r3, [r0]
   17cdc:	str	r3, [r4, #28]
   17ce0:	add	r1, r1, r3
   17ce4:	ldr	r2, [r0, #4]
   17ce8:	str	r1, [r4, #16]
   17cec:	sub	r1, ip, r3
   17cf0:	cmp	r1, r2
   17cf4:	movhi	r1, r2
   17cf8:	str	r1, [r4, #24]
   17cfc:	ldrh	r1, [r4, #130]	; 0x82
   17d00:	ldrh	r2, [r4, #128]	; 0x80
   17d04:	cmp	r2, r1
   17d08:	strhcc	r1, [r4, #128]	; 0x80
   17d0c:	ldrh	r1, [r0, #12]
   17d10:	sub	r0, r0, #36	; 0x24
   17d14:	str	r0, [r4, #32]
   17d18:	strh	r1, [r4, #130]	; 0x82
   17d1c:	ldr	r0, [r4, #156]	; 0x9c
   17d20:	sub	r0, r0, #1
   17d24:	str	r0, [r4, #156]	; 0x9c
   17d28:	mov	r0, r5
   17d2c:	pop	{r4, r5, fp, pc}
   17d30:	ldr	r0, [pc, #56]	; 17d70 <flatcc_builder_end_string@@Base+0x100>
   17d34:	ldr	r1, [pc, #56]	; 17d74 <flatcc_builder_end_string@@Base+0x104>
   17d38:	ldr	r3, [pc, #56]	; 17d78 <flatcc_builder_end_string@@Base+0x108>
   17d3c:	movw	r2, #1732	; 0x6c4
   17d40:	add	r0, pc, r0
   17d44:	add	r1, pc, r1
   17d48:	add	r3, pc, r3
   17d4c:	bl	127a8 <__assert_fail@plt>
   17d50:	ldr	r0, [pc, #36]	; 17d7c <flatcc_builder_end_string@@Base+0x10c>
   17d54:	ldr	r1, [pc, #36]	; 17d80 <flatcc_builder_end_string@@Base+0x110>
   17d58:	ldr	r3, [pc, #36]	; 17d84 <flatcc_builder_end_string@@Base+0x114>
   17d5c:	movw	r2, #1733	; 0x6c5
   17d60:	add	r0, pc, r0
   17d64:	add	r1, pc, r1
   17d68:	add	r3, pc, r3
   17d6c:	bl	127a8 <__assert_fail@plt>
   17d70:	andeq	r2, r0, sl, ror #23
   17d74:	andeq	r2, r0, sl, lsr #13
   17d78:	muleq	r0, r5, r4
   17d7c:	andeq	r3, r0, r0, asr #9
   17d80:	andeq	r2, r0, sl, lsl #13
   17d84:	andeq	r3, r0, r5, ror r4

00017d88 <flatcc_builder_string_edit@@Base>:
   17d88:	ldr	r0, [r0, #16]
   17d8c:	bx	lr

00017d90 <flatcc_builder_string_len@@Base>:
   17d90:	ldr	r0, [r0, #32]
   17d94:	ldr	r0, [r0, #20]
   17d98:	bx	lr

00017d9c <flatcc_builder_table_edit@@Base>:
   17d9c:	push	{fp, lr}
   17da0:	mov	fp, sp
   17da4:	ldr	r2, [r0, #32]
   17da8:	ldrh	r2, [r2, #14]
   17dac:	cmp	r2, #3
   17db0:	ldreq	r2, [r0, #16]
   17db4:	ldreq	r0, [r0, #20]
   17db8:	addeq	r0, r2, r0
   17dbc:	subeq	r0, r0, r1
   17dc0:	popeq	{fp, pc}
   17dc4:	ldr	r0, [pc, #24]	; 17de4 <flatcc_builder_table_edit@@Base+0x48>
   17dc8:	ldr	r1, [pc, #24]	; 17de8 <flatcc_builder_table_edit@@Base+0x4c>
   17dcc:	ldr	r3, [pc, #24]	; 17dec <flatcc_builder_table_edit@@Base+0x50>
   17dd0:	movw	r2, #1794	; 0x702
   17dd4:	add	r0, pc, r0
   17dd8:	add	r1, pc, r1
   17ddc:	add	r3, pc, r3
   17de0:	bl	127a8 <__assert_fail@plt>
   17de4:	andeq	r2, r0, r6, asr #28
   17de8:	andeq	r2, r0, r6, lsl r6
   17dec:	strdeq	r3, [r0], -r6

00017df0 <flatcc_builder_table_add_copy@@Base>:
   17df0:	push	{r4, r5, r6, sl, fp, lr}
   17df4:	add	fp, sp, #16
   17df8:	mov	r4, r3
   17dfc:	ldr	r3, [fp, #8]
   17e00:	mov	r5, r2
   17e04:	mov	r2, r4
   17e08:	bl	16d6c <flatcc_builder_table_add@@Base>
   17e0c:	mov	r6, r0
   17e10:	cmp	r0, #0
   17e14:	beq	17e28 <flatcc_builder_table_add_copy@@Base+0x38>
   17e18:	mov	r0, r6
   17e1c:	mov	r1, r5
   17e20:	mov	r2, r4
   17e24:	bl	12718 <memcpy@plt>
   17e28:	mov	r0, r6
   17e2c:	pop	{r4, r5, r6, sl, fp, pc}

00017e30 <flatcc_builder_push_buffer_alignment@@Base>:
   17e30:	ldrh	r1, [r0, #128]	; 0x80
   17e34:	mov	r2, #4
   17e38:	strh	r2, [r0, #128]	; 0x80
   17e3c:	mov	r0, r1
   17e40:	bx	lr

00017e44 <flatcc_builder_pop_buffer_alignment@@Base>:
   17e44:	ldrh	r2, [r0, #128]	; 0x80
   17e48:	cmp	r2, r1
   17e4c:	strhcc	r1, [r0, #128]	; 0x80
   17e50:	bx	lr

00017e54 <flatcc_builder_get_buffer_alignment@@Base>:
   17e54:	ldrh	r0, [r0, #128]	; 0x80
   17e58:	bx	lr

00017e5c <flatcc_builder_set_vtable_clustering@@Base>:
   17e5c:	clz	r1, r1
   17e60:	lsr	r1, r1, #5
   17e64:	str	r1, [r0, #180]	; 0xb4
   17e68:	bx	lr

00017e6c <flatcc_builder_set_block_align@@Base>:
   17e6c:	strh	r1, [r0, #132]	; 0x84
   17e70:	bx	lr

00017e74 <flatcc_builder_get_level@@Base>:
   17e74:	ldr	r0, [r0, #156]	; 0x9c
   17e78:	bx	lr

00017e7c <flatcc_builder_set_max_level@@Base>:
   17e7c:	str	r1, [r0, #176]	; 0xb0
   17e80:	ldr	r2, [r0, #160]	; 0xa0
   17e84:	cmp	r2, r1
   17e88:	strlt	r1, [r0, #160]	; 0xa0
   17e8c:	bx	lr

00017e90 <flatcc_builder_get_buffer_size@@Base>:
   17e90:	ldr	r1, [r0, #136]	; 0x88
   17e94:	ldr	r0, [r0, #140]	; 0x8c
   17e98:	sub	r0, r0, r1
   17e9c:	bx	lr

00017ea0 <flatcc_builder_get_buffer_start@@Base>:
   17ea0:	ldr	r0, [r0, #136]	; 0x88
   17ea4:	bx	lr

00017ea8 <flatcc_builder_get_buffer_end@@Base>:
   17ea8:	ldr	r0, [r0, #140]	; 0x8c
   17eac:	bx	lr

00017eb0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17eb0:	str	r1, [r0, #172]	; 0xac
   17eb4:	bx	lr

00017eb8 <flatcc_builder_set_identifier@@Base>:
   17eb8:	ldr	r2, [pc, #20]	; 17ed4 <flatcc_builder_set_identifier@@Base+0x1c>
   17ebc:	cmp	r1, #0
   17ec0:	ldr	r2, [pc, r2]
   17ec4:	movne	r2, r1
   17ec8:	ldr	r1, [r2]
   17ecc:	str	r1, [r0, #168]	; 0xa8
   17ed0:	bx	lr
   17ed4:	andeq	r4, r1, ip, ror r1

00017ed8 <flatcc_builder_get_type@@Base>:
   17ed8:	ldr	r0, [r0, #32]
   17edc:	cmp	r0, #0
   17ee0:	ldrhne	r0, [r0, #14]
   17ee4:	moveq	r0, #0
   17ee8:	bx	lr

00017eec <flatcc_builder_get_type_at@@Base>:
   17eec:	mov	r2, r0
   17ef0:	mov	r0, #0
   17ef4:	cmp	r1, #1
   17ef8:	blt	17f1c <flatcc_builder_get_type_at@@Base+0x30>
   17efc:	ldr	r3, [r2, #156]	; 0x9c
   17f00:	cmp	r3, r1
   17f04:	bxlt	lr
   17f08:	sub	r0, r1, r3
   17f0c:	ldr	r1, [r2, #32]
   17f10:	add	r0, r0, r0, lsl #3
   17f14:	add	r0, r1, r0, lsl #2
   17f18:	ldrh	r0, [r0, #14]
   17f1c:	bx	lr

00017f20 <flatcc_builder_get_direct_buffer@@Base>:
   17f20:	ldr	r2, [r0, #184]	; 0xb8
   17f24:	cmp	r2, #0
   17f28:	beq	17f3c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17f2c:	ldr	r2, [r0, #188]	; 0xbc
   17f30:	ldr	r3, [r0, #192]	; 0xc0
   17f34:	cmp	r2, r3
   17f38:	beq	17f54 <flatcc_builder_get_direct_buffer@@Base+0x34>
   17f3c:	cmp	r1, #0
   17f40:	moveq	r0, #0
   17f44:	bxeq	lr
   17f48:	mov	r0, #0
   17f4c:	str	r0, [r1]
   17f50:	bx	lr
   17f54:	cmp	r1, #0
   17f58:	ldrne	r2, [r0, #212]	; 0xd4
   17f5c:	strne	r2, [r1]
   17f60:	ldr	r0, [r0, #196]	; 0xc4
   17f64:	bx	lr

00017f68 <flatcc_builder_copy_buffer@@Base>:
   17f68:	push	{fp, lr}
   17f6c:	mov	fp, sp
   17f70:	ldr	r3, [r0, #184]	; 0xb8
   17f74:	cmp	r3, #0
   17f78:	beq	17fac <flatcc_builder_copy_buffer@@Base+0x44>
   17f7c:	add	r0, r0, #188	; 0xbc
   17f80:	bl	186b8 <flatcc_emitter_copy_buffer@@Base>
   17f84:	cmp	r0, #0
   17f88:	popne	{fp, pc}
   17f8c:	ldr	r0, [pc, #32]	; 17fb4 <flatcc_builder_copy_buffer@@Base+0x4c>
   17f90:	ldr	r1, [pc, #32]	; 17fb8 <flatcc_builder_copy_buffer@@Base+0x50>
   17f94:	ldr	r3, [pc, #32]	; 17fbc <flatcc_builder_copy_buffer@@Base+0x54>
   17f98:	movw	r2, #1926	; 0x786
   17f9c:	add	r0, pc, r0
   17fa0:	add	r1, pc, r1
   17fa4:	add	r3, pc, r3
   17fa8:	bl	127a8 <__assert_fail@plt>
   17fac:	mov	r0, #0
   17fb0:	pop	{fp, pc}
   17fb4:			; <UNDEFINED> instruction: 0x000026bd
   17fb8:	andeq	r2, r0, lr, asr #8
   17fbc:			; <UNDEFINED> instruction: 0x000033b9

00017fc0 <flatcc_builder_finalize_buffer@@Base>:
   17fc0:	push	{r4, r5, r6, sl, fp, lr}
   17fc4:	add	fp, sp, #16
   17fc8:	mov	r5, r0
   17fcc:	ldr	r0, [r0, #136]	; 0x88
   17fd0:	cmp	r1, #0
   17fd4:	ldr	r2, [r5, #140]	; 0x8c
   17fd8:	sub	r4, r2, r0
   17fdc:	mov	r0, r4
   17fe0:	strne	r4, [r1]
   17fe4:	bl	12730 <malloc@plt>
   17fe8:	cmp	r0, #0
   17fec:	beq	1803c <flatcc_builder_finalize_buffer@@Base+0x7c>
   17ff0:	mov	r6, r0
   17ff4:	ldr	r0, [r5, #184]	; 0xb8
   17ff8:	cmp	r0, #0
   17ffc:	beq	1805c <flatcc_builder_finalize_buffer@@Base+0x9c>
   18000:	add	r0, r5, #188	; 0xbc
   18004:	mov	r1, r6
   18008:	mov	r2, r4
   1800c:	bl	186b8 <flatcc_emitter_copy_buffer@@Base>
   18010:	cmp	r0, #0
   18014:	movne	r0, r6
   18018:	popne	{r4, r5, r6, sl, fp, pc}
   1801c:	ldr	r0, [pc, #88]	; 1807c <flatcc_builder_finalize_buffer@@Base+0xbc>
   18020:	ldr	r1, [pc, #88]	; 18080 <flatcc_builder_finalize_buffer@@Base+0xc0>
   18024:	ldr	r3, [pc, #88]	; 18084 <flatcc_builder_finalize_buffer@@Base+0xc4>
   18028:	movw	r2, #1926	; 0x786
   1802c:	add	r0, pc, r0
   18030:	add	r1, pc, r1
   18034:	add	r3, pc, r3
   18038:	bl	127a8 <__assert_fail@plt>
   1803c:	ldr	r0, [pc, #80]	; 18094 <flatcc_builder_finalize_buffer@@Base+0xd4>
   18040:	ldr	r1, [pc, #80]	; 18098 <flatcc_builder_finalize_buffer@@Base+0xd8>
   18044:	ldr	r3, [pc, #80]	; 1809c <flatcc_builder_finalize_buffer@@Base+0xdc>
   18048:	movw	r2, #1944	; 0x798
   1804c:	add	r0, pc, r0
   18050:	add	r1, pc, r1
   18054:	add	r3, pc, r3
   18058:	bl	127a8 <__assert_fail@plt>
   1805c:	ldr	r0, [pc, #36]	; 18088 <flatcc_builder_finalize_buffer@@Base+0xc8>
   18060:	ldr	r1, [pc, #36]	; 1808c <flatcc_builder_finalize_buffer@@Base+0xcc>
   18064:	ldr	r3, [pc, #36]	; 18090 <flatcc_builder_finalize_buffer@@Base+0xd0>
   18068:	movw	r2, #1948	; 0x79c
   1806c:	add	r0, pc, r0
   18070:	add	r1, pc, r1
   18074:	add	r3, pc, r3
   18078:	bl	127a8 <__assert_fail@plt>
   1807c:	andeq	r2, r0, sp, lsr #12
   18080:			; <UNDEFINED> instruction: 0x000023be
   18084:	andeq	r3, r0, r9, lsr #6
   18088:	andeq	r3, r0, pc, lsr r5
   1808c:	andeq	r2, r0, lr, ror r3
   18090:	andeq	r3, r0, lr, lsr #6
   18094:	andeq	r3, r0, pc, asr r5
   18098:	muleq	r0, lr, r3
   1809c:	andeq	r3, r0, lr, asr #6

000180a0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   180a0:	push	{r4, r5, r6, r7, fp, lr}
   180a4:	add	fp, sp, #16
   180a8:	sub	sp, sp, #8
   180ac:	mov	r5, r0
   180b0:	mov	r4, r1
   180b4:	ldr	r0, [r0, #136]	; 0x88
   180b8:	ldr	r1, [r5, #140]	; 0x8c
   180bc:	cmp	r4, #0
   180c0:	sub	r0, r1, r0
   180c4:	mov	r1, #0
   180c8:	strne	r0, [r4]
   180cc:	ldrh	r2, [r5, #128]	; 0x80
   180d0:	str	r1, [sp, #4]
   180d4:	add	r0, r0, r2
   180d8:	cmp	r2, #4
   180dc:	mov	r1, r2
   180e0:	rsb	r2, r2, #0
   180e4:	sub	r0, r0, #1
   180e8:	movls	r1, #4
   180ec:	and	r7, r0, r2
   180f0:	add	r0, sp, #4
   180f4:	mov	r2, r7
   180f8:	bl	1276c <posix_memalign@plt>
   180fc:	ldr	r6, [sp, #4]
   18100:	cmp	r0, #0
   18104:	cmpne	r6, #0
   18108:	bne	18158 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1810c:	cmp	r6, #0
   18110:	beq	18160 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   18114:	ldr	r0, [r5, #184]	; 0xb8
   18118:	cmp	r0, #0
   1811c:	beq	18158 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18120:	add	r0, r5, #188	; 0xbc
   18124:	mov	r1, r6
   18128:	mov	r2, r7
   1812c:	bl	186b8 <flatcc_emitter_copy_buffer@@Base>
   18130:	cmp	r0, #0
   18134:	bne	1816c <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18138:	ldr	r0, [pc, #56]	; 18178 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   1813c:	ldr	r1, [pc, #56]	; 1817c <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   18140:	ldr	r3, [pc, #56]	; 18180 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   18144:	movw	r2, #1926	; 0x786
   18148:	add	r0, pc, r0
   1814c:	add	r1, pc, r1
   18150:	add	r3, pc, r3
   18154:	bl	127a8 <__assert_fail@plt>
   18158:	mov	r0, r6
   1815c:	bl	1270c <free@plt>
   18160:	mov	r6, #0
   18164:	cmp	r4, #0
   18168:	strne	r6, [r4]
   1816c:	mov	r0, r6
   18170:	sub	sp, fp, #16
   18174:	pop	{r4, r5, r6, r7, fp, pc}
   18178:	andeq	r2, r0, r1, lsl r5
   1817c:	andeq	r2, r0, r2, lsr #5
   18180:	andeq	r3, r0, sp, lsl #4

00018184 <flatcc_builder_aligned_alloc@@Base>:
   18184:	push	{fp, lr}
   18188:	mov	fp, sp
   1818c:	sub	sp, sp, #8
   18190:	mov	r2, r1
   18194:	mov	r1, r0
   18198:	mov	r0, #0
   1819c:	cmp	r1, #4
   181a0:	str	r0, [sp, #4]
   181a4:	add	r0, sp, #4
   181a8:	movls	r1, #4
   181ac:	bl	1276c <posix_memalign@plt>
   181b0:	mov	r1, r0
   181b4:	ldr	r0, [sp, #4]
   181b8:	cmp	r1, #0
   181bc:	cmpne	r0, #0
   181c0:	bne	181cc <flatcc_builder_aligned_alloc@@Base+0x48>
   181c4:	mov	sp, fp
   181c8:	pop	{fp, pc}
   181cc:	bl	1270c <free@plt>
   181d0:	mov	r0, #0
   181d4:	str	r0, [sp, #4]
   181d8:	mov	sp, fp
   181dc:	pop	{fp, pc}

000181e0 <flatcc_builder_aligned_free@@Base>:
   181e0:	b	1270c <free@plt>

000181e4 <flatcc_builder_get_emit_context@@Base>:
   181e4:	ldr	r0, [r0, #36]	; 0x24
   181e8:	bx	lr

000181ec <flatcc_emitter_recycle_page@@Base>:
   181ec:	ldr	r3, [r0]
   181f0:	mov	r2, r0
   181f4:	mvn	r0, #0
   181f8:	cmp	r3, r1
   181fc:	beq	1823c <flatcc_emitter_recycle_page@@Base+0x50>
   18200:	ldr	r2, [r2, #4]
   18204:	cmp	r2, r1
   18208:	bxeq	lr
   1820c:	ldr	r0, [r1, #2944]	; 0xb80
   18210:	ldr	r2, [r1, #2948]	; 0xb84
   18214:	str	r2, [r0, #2948]	; 0xb84
   18218:	ldr	r2, [r1, #2948]	; 0xb84
   1821c:	str	r0, [r2, #2944]	; 0xb80
   18220:	ldr	r0, [r3, #2948]	; 0xb84
   18224:	str	r3, [r1, #2944]	; 0xb80
   18228:	str	r0, [r1, #2948]	; 0xb84
   1822c:	str	r1, [r0, #2944]	; 0xb80
   18230:	ldr	r0, [r1, #2944]	; 0xb80
   18234:	str	r1, [r0, #2948]	; 0xb84
   18238:	mov	r0, #0
   1823c:	bx	lr

00018240 <flatcc_emitter_reset@@Base>:
   18240:	push	{r4, sl, fp, lr}
   18244:	add	fp, sp, #8
   18248:	ldr	r1, [r0]
   1824c:	cmp	r1, #0
   18250:	beq	18308 <flatcc_emitter_reset@@Base+0xc8>
   18254:	mov	r4, r0
   18258:	add	r2, r1, #1472	; 0x5c0
   1825c:	mov	r0, #1472	; 0x5c0
   18260:	mov	r3, #0
   18264:	stmib	r4, {r1, r2}
   18268:	str	r0, [r4, #12]
   1826c:	str	r2, [r4, #16]
   18270:	str	r0, [r4, #20]
   18274:	movw	r0, #64064	; 0xfa40
   18278:	movt	r0, #65535	; 0xffff
   1827c:	str	r0, [r1, #2952]	; 0xb88
   18280:	ldr	r2, [r4, #32]
   18284:	ldr	r0, [r4, #24]
   18288:	cmp	r2, #0
   1828c:	moveq	r2, r0
   18290:	streq	r0, [r4, #32]
   18294:	str	r3, [r4, #24]
   18298:	add	r2, r2, r2, lsl #1
   1829c:	lsr	r2, r2, #2
   182a0:	add	r0, r2, r0, lsr #2
   182a4:	str	r0, [r4, #32]
   182a8:	ldr	r2, [r4, #28]
   182ac:	cmp	r2, r0, lsl #1
   182b0:	bls	18308 <flatcc_emitter_reset@@Base+0xc8>
   182b4:	mov	r2, r1
   182b8:	ldr	r0, [r2, #2944]!	; 0xb80
   182bc:	cmp	r0, r1
   182c0:	popeq	{r4, sl, fp, pc}
   182c4:	ldr	r3, [r0, #2944]	; 0xb80
   182c8:	str	r3, [r2]
   182cc:	ldr	r2, [r0, #2944]	; 0xb80
   182d0:	str	r1, [r2, #2948]	; 0xb84
   182d4:	bl	1270c <free@plt>
   182d8:	ldr	r0, [r4, #28]
   182dc:	ldr	r1, [r4, #32]
   182e0:	sub	r0, r0, #2944	; 0xb80
   182e4:	cmp	r0, r1, lsl #1
   182e8:	str	r0, [r4, #28]
   182ec:	bls	18308 <flatcc_emitter_reset@@Base+0xc8>
   182f0:	ldr	r1, [r4, #4]
   182f4:	ldr	r3, [r4]
   182f8:	mov	r2, r1
   182fc:	ldr	r0, [r2, #2944]!	; 0xb80
   18300:	cmp	r0, r3
   18304:	bne	182c4 <flatcc_emitter_reset@@Base+0x84>
   18308:	pop	{r4, sl, fp, pc}

0001830c <flatcc_emitter_clear@@Base>:
   1830c:	push	{r4, r5, r6, sl, fp, lr}
   18310:	add	fp, sp, #16
   18314:	ldr	r5, [r0]
   18318:	cmp	r5, #0
   1831c:	beq	1836c <flatcc_emitter_clear@@Base+0x60>
   18320:	mov	r4, r0
   18324:	ldr	r0, [r5, #2948]	; 0xb84
   18328:	mov	r6, #0
   1832c:	str	r6, [r0, #2944]	; 0xb80
   18330:	ldr	r0, [r5, #2944]	; 0xb80
   18334:	cmp	r0, #0
   18338:	beq	1834c <flatcc_emitter_clear@@Base+0x40>
   1833c:	mov	r5, r0
   18340:	ldr	r0, [r0, #2948]	; 0xb84
   18344:	bl	1270c <free@plt>
   18348:	b	18330 <flatcc_emitter_clear@@Base+0x24>
   1834c:	mov	r0, r5
   18350:	bl	1270c <free@plt>
   18354:	vmov.i32	q8, #0	; 0x00000000
   18358:	add	r0, r4, #16
   1835c:	vst1.32	{d16-d17}, [r0]
   18360:	mov	r0, #32
   18364:	vst1.32	{d16-d17}, [r4], r0
   18368:	str	r6, [r4]
   1836c:	pop	{r4, r5, r6, sl, fp, pc}

00018370 <flatcc_emitter@@Base>:
   18370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18374:	add	fp, sp, #28
   18378:	sub	sp, sp, #4
   1837c:	mov	r6, r0
   18380:	mov	r7, r1
   18384:	ldr	r0, [r0, #24]
   18388:	ldr	r1, [fp, #8]
   1838c:	mov	r4, r2
   18390:	cmn	r3, #1
   18394:	mov	r9, r6
   18398:	add	r0, r0, r1
   1839c:	str	r0, [r6, #24]
   183a0:	ble	184f4 <flatcc_emitter@@Base+0x184>
   183a4:	ldr	r0, [r9, #20]!
   183a8:	cmp	r0, r1
   183ac:	bcs	18654 <flatcc_emitter@@Base+0x2e4>
   183b0:	mov	r8, #0
   183b4:	cmp	r4, #0
   183b8:	beq	186ac <flatcc_emitter@@Base+0x33c>
   183bc:	movw	sl, #64064	; 0xfa40
   183c0:	movt	sl, #65535	; 0xffff
   183c4:	ldr	r8, [r7, #4]
   183c8:	cmp	r8, #0
   183cc:	beq	184e0 <flatcc_emitter@@Base+0x170>
   183d0:	ldr	r9, [r7]
   183d4:	b	18410 <flatcc_emitter@@Base+0xa0>
   183d8:	mov	r5, r8
   183dc:	ldr	r0, [r6, #16]
   183e0:	mov	r1, r9
   183e4:	mov	r2, r5
   183e8:	bl	12718 <memcpy@plt>
   183ec:	ldr	r0, [r6, #16]
   183f0:	ldr	r1, [r6, #20]
   183f4:	add	r9, r9, r5
   183f8:	subs	r8, r8, r5
   183fc:	add	r2, r0, r5
   18400:	sub	r0, r1, r5
   18404:	str	r2, [r6, #16]
   18408:	str	r0, [r6, #20]
   1840c:	beq	184e0 <flatcc_emitter@@Base+0x170>
   18410:	cmp	r8, r0
   18414:	mov	r5, r8
   18418:	bls	183dc <flatcc_emitter@@Base+0x6c>
   1841c:	mov	r5, r0
   18420:	cmp	r5, #0
   18424:	beq	18470 <flatcc_emitter@@Base+0x100>
   18428:	b	183dc <flatcc_emitter@@Base+0x6c>
   1842c:	ldr	r1, [r6]
   18430:	str	r1, [r0, #2944]	; 0xb80
   18434:	str	r5, [r0, #2948]	; 0xb84
   18438:	str	r0, [r1, #2948]	; 0xb84
   1843c:	str	r0, [r5, #2944]	; 0xb80
   18440:	mov	r5, #2944	; 0xb80
   18444:	str	r0, [r6, #4]
   18448:	str	r0, [r6, #16]
   1844c:	str	r5, [r6, #20]
   18450:	ldr	r1, [r0, #2948]	; 0xb84
   18454:	ldr	r1, [r1, #2952]	; 0xb88
   18458:	add	r1, r1, #2944	; 0xb80
   1845c:	str	r1, [r0, #2952]	; 0xb88
   18460:	cmp	r8, r5
   18464:	bls	183d8 <flatcc_emitter@@Base+0x68>
   18468:	cmp	r5, #0
   1846c:	bne	183dc <flatcc_emitter@@Base+0x6c>
   18470:	ldr	r5, [r6, #4]
   18474:	cmp	r5, #0
   18478:	beq	1848c <flatcc_emitter@@Base+0x11c>
   1847c:	ldr	r0, [r5, #2944]	; 0xb80
   18480:	ldr	r1, [r6]
   18484:	cmp	r0, r1
   18488:	bne	18440 <flatcc_emitter@@Base+0xd0>
   1848c:	movw	r0, #2956	; 0xb8c
   18490:	bl	12730 <malloc@plt>
   18494:	cmp	r0, #0
   18498:	beq	18664 <flatcc_emitter@@Base+0x2f4>
   1849c:	ldr	r1, [r6, #28]
   184a0:	cmp	r5, #0
   184a4:	add	r1, r1, #2944	; 0xb80
   184a8:	str	r1, [r6, #28]
   184ac:	bne	1842c <flatcc_emitter@@Base+0xbc>
   184b0:	add	r1, r0, #1472	; 0x5c0
   184b4:	mov	r5, #1472	; 0x5c0
   184b8:	str	r0, [r6]
   184bc:	stmib	r6, {r0, r1, r5}
   184c0:	str	r1, [r6, #16]
   184c4:	str	r5, [r6, #20]
   184c8:	str	r0, [r0, #2944]	; 0xb80
   184cc:	str	r0, [r0, #2948]	; 0xb84
   184d0:	str	sl, [r0, #2952]	; 0xb88
   184d4:	cmp	r8, r5
   184d8:	bhi	18468 <flatcc_emitter@@Base+0xf8>
   184dc:	b	183d8 <flatcc_emitter@@Base+0x68>
   184e0:	subs	r4, r4, #1
   184e4:	add	r7, r7, #8
   184e8:	bne	183c4 <flatcc_emitter@@Base+0x54>
   184ec:	mov	r8, #0
   184f0:	b	186ac <flatcc_emitter@@Base+0x33c>
   184f4:	ldr	r0, [r9, #12]!
   184f8:	cmp	r0, r1
   184fc:	bcs	1866c <flatcc_emitter@@Base+0x2fc>
   18500:	mov	r8, #0
   18504:	cmp	r4, #0
   18508:	beq	186ac <flatcc_emitter@@Base+0x33c>
   1850c:	add	r0, r7, r4, lsl #3
   18510:	ldr	sl, [r0, #-4]
   18514:	sub	r1, r0, #8
   18518:	str	r1, [sp]
   1851c:	cmp	sl, #0
   18520:	beq	18644 <flatcc_emitter@@Base+0x2d4>
   18524:	ldr	r0, [sp]
   18528:	ldr	r0, [r0]
   1852c:	add	r7, r0, sl
   18530:	ldr	r1, [r9]
   18534:	cmp	sl, r1
   18538:	bhi	18578 <flatcc_emitter@@Base+0x208>
   1853c:	b	18614 <flatcc_emitter@@Base+0x2a4>
   18540:	ldr	r1, [r5, #2952]	; 0xb88
   18544:	sub	r1, r1, #2944	; 0xb80
   18548:	str	r1, [r0, #2952]	; 0xb88
   1854c:	mov	r1, #2944	; 0xb80
   18550:	add	r2, r0, #2944	; 0xb80
   18554:	str	r0, [r6]
   18558:	str	r2, [r6, #8]
   1855c:	str	r1, [r6, #12]
   18560:	ldr	r2, [r0, #2944]	; 0xb80
   18564:	ldr	r2, [r2, #2952]	; 0xb88
   18568:	sub	r2, r2, #2944	; 0xb80
   1856c:	str	r2, [r0, #2952]	; 0xb88
   18570:	cmp	sl, r1
   18574:	bls	18614 <flatcc_emitter@@Base+0x2a4>
   18578:	cmp	r1, #0
   1857c:	mov	r5, r1
   18580:	bne	18618 <flatcc_emitter@@Base+0x2a8>
   18584:	ldr	r5, [r6]
   18588:	cmp	r5, #0
   1858c:	beq	185a0 <flatcc_emitter@@Base+0x230>
   18590:	ldr	r0, [r5, #2948]	; 0xb84
   18594:	ldr	r1, [r6, #4]
   18598:	cmp	r0, r1
   1859c:	bne	18540 <flatcc_emitter@@Base+0x1d0>
   185a0:	movw	r0, #2956	; 0xb8c
   185a4:	bl	12730 <malloc@plt>
   185a8:	cmp	r0, #0
   185ac:	beq	18664 <flatcc_emitter@@Base+0x2f4>
   185b0:	ldr	r1, [r6, #28]
   185b4:	cmp	r5, #0
   185b8:	add	r1, r1, #2944	; 0xb80
   185bc:	str	r1, [r6, #28]
   185c0:	beq	185dc <flatcc_emitter@@Base+0x26c>
   185c4:	ldr	r1, [r6, #4]
   185c8:	str	r5, [r0, #2944]	; 0xb80
   185cc:	str	r1, [r0, #2948]	; 0xb84
   185d0:	str	r0, [r5, #2948]	; 0xb84
   185d4:	str	r0, [r1, #2944]	; 0xb80
   185d8:	b	1854c <flatcc_emitter@@Base+0x1dc>
   185dc:	add	r2, r0, #1472	; 0x5c0
   185e0:	mov	r1, #1472	; 0x5c0
   185e4:	str	r0, [r6]
   185e8:	stmib	r6, {r0, r2}
   185ec:	str	r1, [r6, #12]
   185f0:	str	r2, [r6, #16]
   185f4:	movw	r2, #64064	; 0xfa40
   185f8:	str	r1, [r6, #20]
   185fc:	str	r0, [r0, #2944]	; 0xb80
   18600:	str	r0, [r0, #2948]	; 0xb84
   18604:	movt	r2, #65535	; 0xffff
   18608:	str	r2, [r0, #2952]	; 0xb88
   1860c:	cmp	sl, r1
   18610:	bhi	18578 <flatcc_emitter@@Base+0x208>
   18614:	mov	r5, sl
   18618:	sub	r0, r1, r5
   1861c:	sub	r7, r7, r5
   18620:	mov	r2, r5
   18624:	str	r0, [r6, #12]
   18628:	mov	r1, r7
   1862c:	ldr	r0, [r6, #8]
   18630:	sub	r0, r0, r5
   18634:	str	r0, [r6, #8]
   18638:	bl	12718 <memcpy@plt>
   1863c:	subs	sl, sl, r5
   18640:	bne	18530 <flatcc_emitter@@Base+0x1c0>
   18644:	ldr	r0, [sp]
   18648:	subs	r4, r4, #1
   1864c:	bne	18510 <flatcc_emitter@@Base+0x1a0>
   18650:	b	186ac <flatcc_emitter@@Base+0x33c>
   18654:	ldr	r5, [r6, #16]
   18658:	add	r2, r5, r1
   1865c:	str	r2, [r6, #16]
   18660:	b	18678 <flatcc_emitter@@Base+0x308>
   18664:	mvn	r8, #0
   18668:	b	186ac <flatcc_emitter@@Base+0x33c>
   1866c:	ldr	r2, [r6, #8]
   18670:	sub	r5, r2, r1
   18674:	str	r5, [r6, #8]
   18678:	sub	r0, r0, r1
   1867c:	mov	r8, #0
   18680:	cmp	r4, #0
   18684:	str	r0, [r9]
   18688:	beq	186ac <flatcc_emitter@@Base+0x33c>
   1868c:	ldm	r7, {r1, r2}
   18690:	mov	r0, r5
   18694:	bl	12718 <memcpy@plt>
   18698:	ldr	r0, [r7, #4]
   1869c:	add	r7, r7, #8
   186a0:	subs	r4, r4, #1
   186a4:	add	r5, r5, r0
   186a8:	bne	1868c <flatcc_emitter@@Base+0x31c>
   186ac:	mov	r0, r8
   186b0:	sub	sp, fp, #28
   186b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000186b8 <flatcc_emitter_copy_buffer@@Base>:
   186b8:	push	{r4, r5, r6, sl, fp, lr}
   186bc:	add	fp, sp, #16
   186c0:	mov	r3, r2
   186c4:	ldr	r2, [r0, #24]
   186c8:	mov	r5, #0
   186cc:	cmp	r2, r3
   186d0:	bhi	18758 <flatcc_emitter_copy_buffer@@Base+0xa0>
   186d4:	mov	r4, r0
   186d8:	ldr	r0, [r0]
   186dc:	cmp	r0, #0
   186e0:	beq	18758 <flatcc_emitter_copy_buffer@@Base+0xa0>
   186e4:	mov	r6, r1
   186e8:	ldr	r1, [r4, #4]
   186ec:	cmp	r0, r1
   186f0:	beq	18760 <flatcc_emitter_copy_buffer@@Base+0xa8>
   186f4:	ldr	r0, [r4, #12]
   186f8:	ldr	r1, [r4, #8]
   186fc:	rsb	r5, r0, #2944	; 0xb80
   18700:	mov	r0, r6
   18704:	mov	r2, r5
   18708:	bl	12718 <memcpy@plt>
   1870c:	ldm	r4, {r0, r1}
   18710:	add	r5, r6, r5
   18714:	ldr	r6, [r0, #2944]	; 0xb80
   18718:	cmp	r6, r1
   1871c:	beq	18744 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18720:	mov	r0, r5
   18724:	mov	r1, r6
   18728:	mov	r2, #2944	; 0xb80
   1872c:	bl	12718 <memcpy@plt>
   18730:	ldr	r6, [r6, #2944]	; 0xb80
   18734:	ldr	r0, [r4, #4]
   18738:	add	r5, r5, #2944	; 0xb80
   1873c:	cmp	r6, r0
   18740:	bne	18720 <flatcc_emitter_copy_buffer@@Base+0x68>
   18744:	ldr	r0, [r4, #20]
   18748:	mov	r1, r6
   1874c:	rsb	r2, r0, #2944	; 0xb80
   18750:	mov	r0, r5
   18754:	bl	12718 <memcpy@plt>
   18758:	mov	r0, r5
   1875c:	pop	{r4, r5, r6, sl, fp, pc}
   18760:	ldr	r1, [r4, #8]
   18764:	mov	r0, r6
   18768:	bl	12718 <memcpy@plt>
   1876c:	mov	r0, r6
   18770:	pop	{r4, r5, r6, sl, fp, pc}

00018774 <flatcc_verify_error_string@@Base>:
   18774:	cmp	r0, #36	; 0x24
   18778:	bhi	1878c <flatcc_verify_error_string@@Base+0x18>
   1877c:	ldr	r1, [pc, #20]	; 18798 <flatcc_verify_error_string@@Base+0x24>
   18780:	add	r1, pc, r1
   18784:	ldr	r0, [r1, r0, lsl #2]
   18788:	bx	lr
   1878c:	ldr	r0, [pc, #8]	; 1879c <flatcc_verify_error_string@@Base+0x28>
   18790:	add	r0, pc, r0
   18794:	bx	lr
   18798:	strdeq	r3, [r1], -r4
   1879c:	ldrdeq	r3, [r0], -r9

000187a0 <flatcc_verify_field@@Base>:
   187a0:	push	{r4, sl, fp, lr}
   187a4:	add	fp, sp, #8
   187a8:	mov	ip, #4
   187ac:	ldrh	r4, [r0, #22]
   187b0:	mov	lr, #0
   187b4:	add	r1, ip, r1, lsl #1
   187b8:	uxth	ip, r1
   187bc:	cmp	ip, r4
   187c0:	bcs	1881c <flatcc_verify_field@@Base+0x7c>
   187c4:	ldr	r4, [r0, #12]
   187c8:	uxtah	r1, r4, r1
   187cc:	ldrh	ip, [r1]
   187d0:	cmp	ip, #0
   187d4:	beq	1881c <flatcc_verify_field@@Base+0x7c>
   187d8:	add	r1, ip, r2
   187dc:	ldrh	r2, [r0, #20]
   187e0:	mov	lr, #13
   187e4:	cmp	r1, r2
   187e8:	bhi	1881c <flatcc_verify_field@@Base+0x7c>
   187ec:	ldr	r1, [r0]
   187f0:	mov	lr, #0
   187f4:	add	r2, r1, ip
   187f8:	ldr	r1, [r0, #16]
   187fc:	add	r4, r2, r1
   18800:	sub	r1, r3, #1
   18804:	tst	r4, r1
   18808:	beq	1881c <flatcc_verify_field@@Base+0x7c>
   1880c:	ldr	r0, [r0, #16]
   18810:	add	r0, r2, r0
   18814:	ands	lr, r0, r1
   18818:	movwne	lr, #12
   1881c:	mov	r0, lr
   18820:	pop	{r4, sl, fp, pc}

00018824 <flatcc_verify_string_field@@Base>:
   18824:	push	{fp, lr}
   18828:	mov	fp, sp
   1882c:	mov	lr, r0
   18830:	mov	r0, #4
   18834:	add	r0, r0, r1, lsl #1
   18838:	ldrh	r3, [lr, #22]
   1883c:	uxth	r1, r0
   18840:	cmp	r1, r3
   18844:	bcs	18888 <flatcc_verify_string_field@@Base+0x64>
   18848:	ldr	r1, [lr, #12]
   1884c:	uxtah	r0, r1, r0
   18850:	ldrh	r1, [r0]
   18854:	cmp	r1, #0
   18858:	beq	18888 <flatcc_verify_string_field@@Base+0x64>
   1885c:	ldrh	r2, [lr, #20]
   18860:	add	r3, r1, #4
   18864:	mov	r0, #13
   18868:	cmp	r3, r2
   1886c:	bhi	18884 <flatcc_verify_string_field@@Base+0x60>
   18870:	ldr	r0, [lr, #16]
   18874:	add	r2, r0, r1
   18878:	mov	r0, #12
   1887c:	tst	r2, #3
   18880:	beq	18898 <flatcc_verify_string_field@@Base+0x74>
   18884:	pop	{fp, pc}
   18888:	cmp	r2, #0
   1888c:	movwne	r2, #1
   18890:	lsl	r0, r2, #2
   18894:	pop	{fp, pc}
   18898:	cmp	r2, #0
   1889c:	beq	188fc <flatcc_verify_string_field@@Base+0xd8>
   188a0:	ldr	ip, [lr]
   188a4:	ldr	r0, [ip, r2]
   188a8:	add	r1, r0, r2
   188ac:	mov	r0, #17
   188b0:	tst	r1, #3
   188b4:	bne	18884 <flatcc_verify_string_field@@Base+0x60>
   188b8:	cmp	r1, r2
   188bc:	bls	18884 <flatcc_verify_string_field@@Base+0x60>
   188c0:	ldr	r3, [lr, #4]
   188c4:	add	r2, r1, #4
   188c8:	cmp	r3, r2
   188cc:	bcc	18884 <flatcc_verify_string_field@@Base+0x60>
   188d0:	ldr	r1, [ip, r1]
   188d4:	sub	lr, r3, r2
   188d8:	mov	r0, #8
   188dc:	add	r3, r1, #1
   188e0:	cmp	lr, r3
   188e4:	popcc	{fp, pc}
   188e8:	add	r0, ip, r2
   188ec:	ldrb	r0, [r0, r1]
   188f0:	cmp	r0, #0
   188f4:	movwne	r0, #7
   188f8:	pop	{fp, pc}
   188fc:	mov	r0, #0
   18900:	pop	{fp, pc}

00018904 <flatcc_verify_vector_field@@Base>:
   18904:	push	{r4, sl, fp, lr}
   18908:	add	fp, sp, #8
   1890c:	mov	ip, r0
   18910:	mov	r0, #4
   18914:	add	r0, r0, r1, lsl #1
   18918:	ldrh	r4, [ip, #22]
   1891c:	uxth	r1, r0
   18920:	cmp	r1, r4
   18924:	bcs	18968 <flatcc_verify_vector_field@@Base+0x64>
   18928:	ldr	r1, [ip, #12]
   1892c:	uxtah	r0, r1, r0
   18930:	ldrh	r1, [r0]
   18934:	cmp	r1, #0
   18938:	beq	18968 <flatcc_verify_vector_field@@Base+0x64>
   1893c:	ldrh	r2, [ip, #20]
   18940:	add	r4, r1, #4
   18944:	mov	r0, #13
   18948:	cmp	r4, r2
   1894c:	bhi	18964 <flatcc_verify_vector_field@@Base+0x60>
   18950:	ldr	r0, [ip, #16]
   18954:	add	r2, r0, r1
   18958:	mov	r0, #12
   1895c:	tst	r2, #3
   18960:	beq	18978 <flatcc_verify_vector_field@@Base+0x74>
   18964:	pop	{r4, sl, fp, pc}
   18968:	cmp	r2, #0
   1896c:	movwne	r2, #1
   18970:	lsl	r0, r2, #2
   18974:	pop	{r4, sl, fp, pc}
   18978:	cmp	r2, #0
   1897c:	beq	189f4 <flatcc_verify_vector_field@@Base+0xf0>
   18980:	ldr	lr, [ip]
   18984:	ldr	r4, [fp, #8]
   18988:	ldr	r0, [lr, r2]
   1898c:	cmp	r4, #4
   18990:	movls	r4, #4
   18994:	add	r1, r0, r2
   18998:	mov	r0, #16
   1899c:	cmp	r1, r2
   189a0:	bls	18964 <flatcc_verify_vector_field@@Base+0x60>
   189a4:	ldr	ip, [ip, #4]
   189a8:	add	r2, r1, #4
   189ac:	cmp	r2, ip
   189b0:	bhi	18964 <flatcc_verify_vector_field@@Base+0x60>
   189b4:	sub	r4, r4, #1
   189b8:	orr	r4, r4, #3
   189bc:	tst	r2, r4
   189c0:	bne	18964 <flatcc_verify_vector_field@@Base+0x60>
   189c4:	ldr	r4, [fp, #12]
   189c8:	ldr	r2, [lr, r1]
   189cc:	mov	r0, #25
   189d0:	cmp	r2, r4
   189d4:	pophi	{r4, sl, fp, pc}
   189d8:	mul	r2, r2, r3
   189dc:	sub	r0, ip, r1
   189e0:	sub	r1, r0, #4
   189e4:	mov	r0, #0
   189e8:	cmp	r1, r2
   189ec:	movwcc	r0, #26
   189f0:	pop	{r4, sl, fp, pc}
   189f4:	mov	r0, #0
   189f8:	pop	{r4, sl, fp, pc}

000189fc <flatcc_verify_string_vector_field@@Base>:
   189fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a00:	add	fp, sp, #24
   18a04:	mov	r3, r0
   18a08:	mov	r0, #4
   18a0c:	add	r0, r0, r1, lsl #1
   18a10:	ldrh	r7, [r3, #22]
   18a14:	uxth	r1, r0
   18a18:	cmp	r1, r7
   18a1c:	bcs	18a60 <flatcc_verify_string_vector_field@@Base+0x64>
   18a20:	ldr	r1, [r3, #12]
   18a24:	uxtah	r0, r1, r0
   18a28:	ldrh	r1, [r0]
   18a2c:	cmp	r1, #0
   18a30:	beq	18a60 <flatcc_verify_string_vector_field@@Base+0x64>
   18a34:	ldrh	r2, [r3, #20]
   18a38:	add	r7, r1, #4
   18a3c:	mov	r0, #13
   18a40:	cmp	r7, r2
   18a44:	bhi	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18a48:	ldr	r4, [r3, #16]
   18a4c:	mov	r0, #12
   18a50:	add	r6, r4, r1
   18a54:	tst	r6, #3
   18a58:	beq	18a70 <flatcc_verify_string_vector_field@@Base+0x74>
   18a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a60:	cmp	r2, #0
   18a64:	movwne	r2, #1
   18a68:	lsl	r0, r2, #2
   18a6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a70:	cmp	r6, #0
   18a74:	beq	18b6c <flatcc_verify_string_vector_field@@Base+0x170>
   18a78:	ldr	r5, [r3]
   18a7c:	mov	r0, #16
   18a80:	ldr	r7, [r5, r6]
   18a84:	add	r2, r7, r6
   18a88:	cmp	r2, r6
   18a8c:	bls	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18a90:	ldr	ip, [r3, #4]
   18a94:	add	r3, r2, #4
   18a98:	cmp	r3, ip
   18a9c:	bhi	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18aa0:	ands	r3, r3, #3
   18aa4:	bne	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18aa8:	ldr	lr, [r5, r2]
   18aac:	mov	r0, #25
   18ab0:	cmn	lr, #-1073741823	; 0xc0000001
   18ab4:	bhi	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18ab8:	sub	r0, ip, r2
   18abc:	sub	r2, r0, #4
   18ac0:	mov	r0, #26
   18ac4:	cmp	r2, lr, lsl #2
   18ac8:	bcc	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18acc:	cmp	lr, #0
   18ad0:	beq	18b6c <flatcc_verify_string_vector_field@@Base+0x170>
   18ad4:	sub	r0, ip, r7
   18ad8:	add	r8, r7, r4
   18adc:	sub	r0, r0, r4
   18ae0:	add	r3, r5, r8
   18ae4:	sub	r0, r0, r1
   18ae8:	sub	r4, r0, #8
   18aec:	add	r0, r3, r1
   18af0:	add	r7, r1, r8
   18af4:	ldr	r5, [r0, #4]
   18af8:	mov	r0, #17
   18afc:	add	r6, r7, r5
   18b00:	add	r2, r6, #4
   18b04:	tst	r2, #3
   18b08:	bne	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18b0c:	add	r7, r7, #4
   18b10:	cmp	r2, r7
   18b14:	bls	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18b18:	add	r2, r6, #8
   18b1c:	cmp	ip, r2
   18b20:	bcc	18a5c <flatcc_verify_string_vector_field@@Base+0x60>
   18b24:	add	r0, r1, r5
   18b28:	sub	r2, r4, r5
   18b2c:	add	r0, r3, r0
   18b30:	ldr	r0, [r0, #4]
   18b34:	add	r6, r0, #1
   18b38:	cmp	r2, r6
   18b3c:	bcc	18b74 <flatcc_verify_string_vector_field@@Base+0x178>
   18b40:	add	r0, r5, r0
   18b44:	add	r0, r1, r0
   18b48:	add	r0, r3, r0
   18b4c:	ldrb	r0, [r0, #8]
   18b50:	cmp	r0, #0
   18b54:	bne	18b7c <flatcc_verify_string_vector_field@@Base+0x180>
   18b58:	subs	lr, lr, #1
   18b5c:	sub	r4, r4, #4
   18b60:	add	r8, r8, #4
   18b64:	add	r3, r3, #4
   18b68:	bne	18aec <flatcc_verify_string_vector_field@@Base+0xf0>
   18b6c:	mov	r0, #0
   18b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b74:	mov	r0, #8
   18b78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b7c:	mov	r0, #7
   18b80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00018b84 <flatcc_verify_table_field@@Base>:
   18b84:	push	{r4, r5, r6, sl, fp, lr}
   18b88:	add	fp, sp, #16
   18b8c:	sub	sp, sp, #24
   18b90:	mov	ip, r0
   18b94:	mov	r0, #4
   18b98:	add	r0, r0, r1, lsl #1
   18b9c:	ldrh	r6, [ip, #22]
   18ba0:	uxth	r1, r0
   18ba4:	cmp	r1, r6
   18ba8:	bcs	18bf0 <flatcc_verify_table_field@@Base+0x6c>
   18bac:	ldr	r1, [ip, #12]
   18bb0:	uxtah	r0, r1, r0
   18bb4:	ldrh	r1, [r0]
   18bb8:	cmp	r1, #0
   18bbc:	beq	18bf0 <flatcc_verify_table_field@@Base+0x6c>
   18bc0:	ldrh	r2, [ip, #20]
   18bc4:	add	r6, r1, #4
   18bc8:	mov	r0, #13
   18bcc:	cmp	r6, r2
   18bd0:	bhi	18be8 <flatcc_verify_table_field@@Base+0x64>
   18bd4:	ldr	r0, [ip, #16]
   18bd8:	add	r4, r0, r1
   18bdc:	mov	r0, #12
   18be0:	tst	r4, #3
   18be4:	beq	18c04 <flatcc_verify_table_field@@Base+0x80>
   18be8:	sub	sp, fp, #16
   18bec:	pop	{r4, r5, r6, sl, fp, pc}
   18bf0:	cmp	r2, #0
   18bf4:	movwne	r2, #1
   18bf8:	lsl	r0, r2, #2
   18bfc:	sub	sp, fp, #16
   18c00:	pop	{r4, r5, r6, sl, fp, pc}
   18c04:	cmp	r4, #0
   18c08:	beq	18cd4 <flatcc_verify_table_field@@Base+0x150>
   18c0c:	ldm	ip, {r1, lr}
   18c10:	ldr	r2, [ip, #8]
   18c14:	ldr	r0, [r1, r4]
   18c18:	subs	r2, r2, #1
   18c1c:	str	r2, [sp, #8]
   18c20:	beq	18ce0 <flatcc_verify_table_field@@Base+0x15c>
   18c24:	add	r2, r0, r4
   18c28:	mov	r0, #15
   18c2c:	tst	r2, #3
   18c30:	bne	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c34:	cmp	r2, r4
   18c38:	bls	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c3c:	add	r6, r2, #4
   18c40:	cmp	r6, lr
   18c44:	bhi	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c48:	str	r2, [sp, #16]
   18c4c:	ldr	r0, [r1, r2]
   18c50:	sub	r5, r2, r0
   18c54:	mov	r0, #29
   18c58:	tst	r5, #-2147483647	; 0x80000001
   18c5c:	bne	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c60:	add	r4, r5, #2
   18c64:	mov	r0, #27
   18c68:	cmp	r4, lr
   18c6c:	bhi	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c70:	mov	ip, r1
   18c74:	mov	r0, #30
   18c78:	ldrh	r6, [ip, r5]!
   18c7c:	tst	r6, #1
   18c80:	strh	r6, [sp, #22]
   18c84:	bne	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c88:	add	r5, r5, r6
   18c8c:	cmp	r5, lr
   18c90:	bhi	18be8 <flatcc_verify_table_field@@Base+0x64>
   18c94:	mov	r0, #28
   18c98:	cmp	r6, #4
   18c9c:	bcc	18be8 <flatcc_verify_table_field@@Base+0x64>
   18ca0:	add	r0, r1, r4
   18ca4:	sub	r2, lr, r2
   18ca8:	ldrh	r4, [r0]
   18cac:	mov	r0, #20
   18cb0:	cmp	r2, r4
   18cb4:	strh	r4, [sp, #20]
   18cb8:	bcc	18be8 <flatcc_verify_table_field@@Base+0x64>
   18cbc:	mov	r0, sp
   18cc0:	stm	sp, {r1, lr}
   18cc4:	str	ip, [sp, #12]
   18cc8:	blx	r3
   18ccc:	sub	sp, fp, #16
   18cd0:	pop	{r4, r5, r6, sl, fp, pc}
   18cd4:	mov	r0, #0
   18cd8:	sub	sp, fp, #16
   18cdc:	pop	{r4, r5, r6, sl, fp, pc}
   18ce0:	mov	r0, #3
   18ce4:	sub	sp, fp, #16
   18ce8:	pop	{r4, r5, r6, sl, fp, pc}

00018cec <flatcc_verify_table_vector_field@@Base>:
   18cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cf0:	add	fp, sp, #28
   18cf4:	sub	sp, sp, #28
   18cf8:	mov	r4, r3
   18cfc:	mov	r3, r0
   18d00:	mov	r0, #4
   18d04:	add	r0, r0, r1, lsl #1
   18d08:	ldrh	r7, [r3, #22]
   18d0c:	uxth	r1, r0
   18d10:	cmp	r1, r7
   18d14:	bcs	18d5c <flatcc_verify_table_vector_field@@Base+0x70>
   18d18:	ldr	r1, [r3, #12]
   18d1c:	uxtah	r0, r1, r0
   18d20:	ldrh	r1, [r0]
   18d24:	cmp	r1, #0
   18d28:	beq	18d5c <flatcc_verify_table_vector_field@@Base+0x70>
   18d2c:	ldrh	r2, [r3, #20]
   18d30:	add	r7, r1, #4
   18d34:	mov	r0, #13
   18d38:	cmp	r7, r2
   18d3c:	bhi	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18d40:	ldr	r2, [r3, #16]
   18d44:	mov	r0, #12
   18d48:	add	r6, r2, r1
   18d4c:	tst	r6, #3
   18d50:	beq	18d70 <flatcc_verify_table_vector_field@@Base+0x84>
   18d54:	sub	sp, fp, #28
   18d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d5c:	cmp	r2, #0
   18d60:	movwne	r2, #1
   18d64:	lsl	r0, r2, #2
   18d68:	sub	sp, fp, #28
   18d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d70:	cmp	r6, #0
   18d74:	beq	18ed0 <flatcc_verify_table_vector_field@@Base+0x1e4>
   18d78:	ldr	r7, [r3, #8]
   18d7c:	cmp	r7, #1
   18d80:	blt	18f9c <flatcc_verify_table_vector_field@@Base+0x2b0>
   18d84:	ldr	r9, [r3]
   18d88:	mov	r0, #16
   18d8c:	ldr	ip, [r9, r6]
   18d90:	add	r5, ip, r6
   18d94:	cmp	r5, r6
   18d98:	bls	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18d9c:	ldr	lr, [r3, #4]
   18da0:	add	r8, r5, #4
   18da4:	cmp	r8, lr
   18da8:	bhi	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18dac:	ands	r3, r8, #3
   18db0:	bne	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18db4:	ldr	sl, [r9, r5]
   18db8:	mov	r0, #25
   18dbc:	cmn	sl, #-1073741823	; 0xc0000001
   18dc0:	bhi	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18dc4:	sub	r0, lr, r5
   18dc8:	sub	r3, r0, #4
   18dcc:	mov	r0, #26
   18dd0:	cmp	r3, sl, lsl #2
   18dd4:	bcc	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18dd8:	cmp	sl, #0
   18ddc:	beq	18ed0 <flatcc_verify_table_vector_field@@Base+0x1e4>
   18de0:	sub	r0, lr, ip
   18de4:	sub	r0, r0, r2
   18de8:	sub	r0, r0, r1
   18dec:	sub	r5, r0, #4
   18df0:	sub	r0, r7, #2
   18df4:	str	r0, [sp]
   18df8:	ldr	r1, [sp]
   18dfc:	ldr	r0, [r9, r8]
   18e00:	cmp	r1, #0
   18e04:	str	r1, [sp, #12]
   18e08:	beq	18f94 <flatcc_verify_table_vector_field@@Base+0x2a8>
   18e0c:	add	r1, r8, r0
   18e10:	add	ip, r1, #4
   18e14:	tst	r1, #3
   18e18:	bne	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e1c:	cmp	r1, r8
   18e20:	bls	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e24:	cmp	ip, lr
   18e28:	bhi	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e2c:	str	r1, [sp, #20]
   18e30:	add	r3, r9, r0
   18e34:	ldr	r6, [r3, r8]
   18e38:	sub	r7, r0, r6
   18e3c:	add	r3, r8, r7
   18e40:	tst	r3, #-2147483647	; 0x80000001
   18e44:	bne	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e48:	add	r2, r3, #2
   18e4c:	cmp	r2, lr
   18e50:	bhi	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e54:	add	r2, r9, r7
   18e58:	add	r2, r2, r8
   18e5c:	ldrh	r7, [r2]
   18e60:	cmp	r7, #4
   18e64:	strh	r7, [sp, #26]
   18e68:	bcc	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e6c:	ands	r2, r7, #1
   18e70:	bne	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e74:	add	r2, r0, r7
   18e78:	sub	r2, r2, r6
   18e7c:	add	r2, r8, r2
   18e80:	cmp	r2, lr
   18e84:	bhi	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18e88:	add	r3, r9, r3
   18e8c:	sub	r0, r5, r0
   18e90:	ldrh	r2, [r3, #2]
   18e94:	cmp	r0, r2
   18e98:	strh	r2, [sp, #24]
   18e9c:	bcc	18edc <flatcc_verify_table_vector_field@@Base+0x1f0>
   18ea0:	add	r0, sp, #4
   18ea4:	stmib	sp, {r9, lr}
   18ea8:	mov	r6, lr
   18eac:	str	r3, [sp, #16]
   18eb0:	blx	r4
   18eb4:	cmp	r0, #0
   18eb8:	bne	18fa8 <flatcc_verify_table_vector_field@@Base+0x2bc>
   18ebc:	subs	sl, sl, #1
   18ec0:	sub	r5, r5, #4
   18ec4:	add	r8, r8, #4
   18ec8:	mov	lr, r6
   18ecc:	bne	18df8 <flatcc_verify_table_vector_field@@Base+0x10c>
   18ed0:	mov	r0, #0
   18ed4:	sub	sp, fp, #28
   18ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18edc:	ldr	r0, [sp]
   18ee0:	str	r0, [sp, #12]
   18ee4:	mov	r0, #15
   18ee8:	tst	r1, #3
   18eec:	bne	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18ef0:	cmp	r1, r8
   18ef4:	bls	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18ef8:	cmp	ip, lr
   18efc:	bhi	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f00:	str	r1, [sp, #20]
   18f04:	ldr	r0, [r9, r1]
   18f08:	sub	r7, r1, r0
   18f0c:	mov	r0, #29
   18f10:	tst	r7, #-2147483647	; 0x80000001
   18f14:	bne	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f18:	add	r3, r7, #2
   18f1c:	mov	r0, #27
   18f20:	cmp	r3, lr
   18f24:	bhi	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f28:	mov	r2, r9
   18f2c:	mov	r0, #30
   18f30:	ldrh	r6, [r2, r7]!
   18f34:	tst	r6, #1
   18f38:	strh	r6, [sp, #26]
   18f3c:	bne	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f40:	add	r7, r7, r6
   18f44:	cmp	r7, lr
   18f48:	bhi	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f4c:	mov	r0, #28
   18f50:	cmp	r6, #4
   18f54:	bcc	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f58:	add	r0, r9, r3
   18f5c:	sub	r1, lr, r1
   18f60:	mov	r5, lr
   18f64:	ldrh	r3, [r0]
   18f68:	mov	r0, #20
   18f6c:	cmp	r1, r3
   18f70:	strh	r3, [sp, #24]
   18f74:	bcc	18d54 <flatcc_verify_table_vector_field@@Base+0x68>
   18f78:	add	r0, sp, #4
   18f7c:	str	r5, [sp, #8]
   18f80:	str	r9, [sp, #4]
   18f84:	str	r2, [sp, #16]
   18f88:	blx	r4
   18f8c:	sub	sp, fp, #28
   18f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f94:	mov	r0, #0
   18f98:	str	r0, [sp, #12]
   18f9c:	mov	r0, #3
   18fa0:	sub	sp, fp, #28
   18fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa8:	ldr	r0, [r9, r8]
   18fac:	ldr	r1, [sp]
   18fb0:	mov	lr, r6
   18fb4:	str	r1, [sp, #12]
   18fb8:	add	r1, r0, r8
   18fbc:	add	ip, r1, #4
   18fc0:	b	18ee4 <flatcc_verify_table_vector_field@@Base+0x1f8>

00018fc4 <flatcc_verify_union_table@@Base>:
   18fc4:	push	{r4, r5, r6, sl, fp, lr}
   18fc8:	add	fp, sp, #16
   18fcc:	sub	sp, sp, #24
   18fd0:	ldr	r5, [r0, #16]
   18fd4:	ldr	r2, [r0, #20]
   18fd8:	ldr	ip, [r0]
   18fdc:	ldr	r3, [r0, #4]
   18fe0:	ldr	r0, [r0, #8]
   18fe4:	subs	r0, r0, #1
   18fe8:	str	r0, [sp, #8]
   18fec:	beq	190a4 <flatcc_verify_union_table@@Base+0xe0>
   18ff0:	add	r2, r2, r5
   18ff4:	mov	r0, #15
   18ff8:	tst	r2, #3
   18ffc:	bne	1909c <flatcc_verify_union_table@@Base+0xd8>
   19000:	cmp	r2, r5
   19004:	bls	1909c <flatcc_verify_union_table@@Base+0xd8>
   19008:	add	r6, r2, #4
   1900c:	cmp	r6, r3
   19010:	bhi	1909c <flatcc_verify_union_table@@Base+0xd8>
   19014:	str	r2, [sp, #16]
   19018:	ldr	r0, [ip, r2]
   1901c:	sub	r5, r2, r0
   19020:	mov	r0, #29
   19024:	tst	r5, #-2147483647	; 0x80000001
   19028:	bne	1909c <flatcc_verify_union_table@@Base+0xd8>
   1902c:	add	r4, r5, #2
   19030:	mov	r0, #27
   19034:	cmp	r4, r3
   19038:	bhi	1909c <flatcc_verify_union_table@@Base+0xd8>
   1903c:	mov	lr, ip
   19040:	mov	r0, #30
   19044:	ldrh	r6, [lr, r5]!
   19048:	tst	r6, #1
   1904c:	strh	r6, [sp, #22]
   19050:	bne	1909c <flatcc_verify_union_table@@Base+0xd8>
   19054:	add	r5, r5, r6
   19058:	cmp	r5, r3
   1905c:	bhi	1909c <flatcc_verify_union_table@@Base+0xd8>
   19060:	mov	r0, #28
   19064:	cmp	r6, #4
   19068:	bcc	1909c <flatcc_verify_union_table@@Base+0xd8>
   1906c:	add	r0, ip, r4
   19070:	sub	r2, r3, r2
   19074:	ldrh	r4, [r0]
   19078:	mov	r0, #20
   1907c:	cmp	r2, r4
   19080:	strh	r4, [sp, #20]
   19084:	bcc	1909c <flatcc_verify_union_table@@Base+0xd8>
   19088:	mov	r0, sp
   1908c:	str	r3, [sp, #4]
   19090:	str	ip, [sp]
   19094:	str	lr, [sp, #12]
   19098:	blx	r1
   1909c:	sub	sp, fp, #16
   190a0:	pop	{r4, r5, r6, sl, fp, pc}
   190a4:	mov	r0, #3
   190a8:	sub	sp, fp, #16
   190ac:	pop	{r4, r5, r6, sl, fp, pc}

000190b0 <flatcc_verify_union_struct@@Base>:
   190b0:	push	{fp, lr}
   190b4:	mov	fp, sp
   190b8:	ldr	lr, [r0, #20]
   190bc:	mov	r3, r0
   190c0:	mov	r0, #18
   190c4:	cmp	lr, #0
   190c8:	beq	19104 <flatcc_verify_union_struct@@Base+0x54>
   190cc:	ldr	ip, [r3, #4]
   190d0:	ldr	r3, [r3, #16]
   190d4:	add	r3, r3, lr
   190d8:	cmp	r3, ip
   190dc:	bhi	19104 <flatcc_verify_union_struct@@Base+0x54>
   190e0:	adds	r1, r3, r1
   190e4:	mov	r0, #10
   190e8:	bcs	19104 <flatcc_verify_union_struct@@Base+0x54>
   190ec:	mov	r0, #9
   190f0:	cmp	r1, ip
   190f4:	pophi	{fp, pc}
   190f8:	sub	r0, r2, #1
   190fc:	ands	r0, r3, r0
   19100:	movwne	r0, #11
   19104:	pop	{fp, pc}

00019108 <flatcc_verify_union_string@@Base>:
   19108:	push	{fp, lr}
   1910c:	mov	fp, sp
   19110:	mov	r1, r0
   19114:	ldr	r3, [r0, #16]
   19118:	ldr	r0, [r0, #20]
   1911c:	add	r2, r0, r3
   19120:	mov	r0, #17
   19124:	tst	r2, #3
   19128:	bne	19170 <flatcc_verify_union_string@@Base+0x68>
   1912c:	cmp	r2, r3
   19130:	bls	19170 <flatcc_verify_union_string@@Base+0x68>
   19134:	ldr	r3, [r1, #4]
   19138:	add	ip, r2, #4
   1913c:	cmp	r3, ip
   19140:	bcc	19170 <flatcc_verify_union_string@@Base+0x68>
   19144:	ldr	r1, [r1]
   19148:	sub	lr, r3, ip
   1914c:	mov	r0, #8
   19150:	ldr	r2, [r1, r2]
   19154:	add	r3, r2, #1
   19158:	cmp	lr, r3
   1915c:	popcc	{fp, pc}
   19160:	add	r0, r1, ip
   19164:	ldrb	r0, [r0, r2]
   19168:	cmp	r0, #0
   1916c:	movwne	r0, #7
   19170:	pop	{fp, pc}

00019174 <flatcc_verify_buffer_header@@Base>:
   19174:	push	{r4, sl, fp, lr}
   19178:	add	fp, sp, #8
   1917c:	sub	sp, sp, #8
   19180:	mov	r4, r0
   19184:	mov	r0, #5
   19188:	tst	r4, #3
   1918c:	bne	191e0 <flatcc_verify_buffer_header@@Base+0x6c>
   19190:	mov	r0, #6
   19194:	cmn	r1, #9
   19198:	bhi	191e0 <flatcc_verify_buffer_header@@Base+0x6c>
   1919c:	mov	r0, #1
   191a0:	cmp	r1, #8
   191a4:	bcc	191e0 <flatcc_verify_buffer_header@@Base+0x6c>
   191a8:	cmp	r2, #0
   191ac:	beq	191e8 <flatcc_verify_buffer_header@@Base+0x74>
   191b0:	mov	r0, #0
   191b4:	mov	r1, r2
   191b8:	mov	r2, #4
   191bc:	str	r0, [sp, #4]
   191c0:	add	r0, sp, #4
   191c4:	bl	12784 <strncpy@plt>
   191c8:	ldr	r1, [sp, #4]
   191cc:	cmp	r1, #0
   191d0:	ldrne	r2, [r4, #4]
   191d4:	movne	r0, #2
   191d8:	cmpne	r2, r1
   191dc:	moveq	r0, #0
   191e0:	sub	sp, fp, #8
   191e4:	pop	{r4, sl, fp, pc}
   191e8:	mov	r0, #0
   191ec:	sub	sp, fp, #8
   191f0:	pop	{r4, sl, fp, pc}

000191f4 <flatcc_verify_typed_buffer_header@@Base>:
   191f4:	mov	r3, r0
   191f8:	mov	r0, #5
   191fc:	tst	r3, #3
   19200:	bne	19234 <flatcc_verify_typed_buffer_header@@Base+0x40>
   19204:	mov	r0, #6
   19208:	cmn	r1, #9
   1920c:	bhi	19234 <flatcc_verify_typed_buffer_header@@Base+0x40>
   19210:	mov	r0, #1
   19214:	cmp	r1, #8
   19218:	bxcc	lr
   1921c:	cmp	r2, #0
   19220:	beq	19238 <flatcc_verify_typed_buffer_header@@Base+0x44>
   19224:	ldr	r1, [r3, #4]
   19228:	mov	r0, #2
   1922c:	cmp	r1, r2
   19230:	moveq	r0, #0
   19234:	bx	lr
   19238:	mov	r0, #0
   1923c:	bx	lr

00019240 <flatcc_verify_struct_as_root@@Base>:
   19240:	push	{r4, r5, r6, r7, fp, lr}
   19244:	add	fp, sp, #16
   19248:	sub	sp, sp, #8
   1924c:	mov	r5, r0
   19250:	mov	r0, #5
   19254:	tst	r5, #3
   19258:	bne	192f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   1925c:	mov	r4, r1
   19260:	mov	r0, #6
   19264:	cmn	r1, #9
   19268:	bhi	192f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   1926c:	mov	r0, #1
   19270:	cmp	r4, #8
   19274:	bcc	192f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   19278:	mov	r6, r3
   1927c:	mov	r7, r2
   19280:	cmp	r2, #0
   19284:	beq	192b4 <flatcc_verify_struct_as_root@@Base+0x74>
   19288:	mov	r0, #0
   1928c:	mov	r1, r7
   19290:	mov	r2, #4
   19294:	str	r0, [sp]
   19298:	mov	r0, sp
   1929c:	bl	12784 <strncpy@plt>
   192a0:	ldr	r0, [sp]
   192a4:	cmp	r0, #0
   192a8:	ldrne	r1, [r5, #4]
   192ac:	cmpne	r1, r0
   192b0:	bne	192f8 <flatcc_verify_struct_as_root@@Base+0xb8>
   192b4:	ldr	r1, [r5]
   192b8:	mov	r0, #18
   192bc:	sub	r2, r1, #1
   192c0:	cmp	r2, r4
   192c4:	bcs	192f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   192c8:	adds	r2, r1, r6
   192cc:	mov	r0, #10
   192d0:	bcs	192f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   192d4:	mov	r0, #9
   192d8:	cmp	r2, r4
   192dc:	bhi	192f0 <flatcc_verify_struct_as_root@@Base+0xb0>
   192e0:	ldr	r0, [fp, #8]
   192e4:	sub	r0, r0, #1
   192e8:	ands	r0, r1, r0
   192ec:	movwne	r0, #11
   192f0:	sub	sp, fp, #16
   192f4:	pop	{r4, r5, r6, r7, fp, pc}
   192f8:	mov	r0, #0
   192fc:	mov	r1, r7
   19300:	mov	r2, #4
   19304:	str	r0, [sp, #4]
   19308:	add	r0, sp, #4
   1930c:	bl	12784 <strncpy@plt>
   19310:	ldr	r0, [sp, #4]
   19314:	ldr	r1, [r5, #4]
   19318:	subs	r1, r1, r0
   1931c:	movwne	r1, #1
   19320:	cmp	r0, #0
   19324:	lslne	r0, r1, #1
   19328:	sub	sp, fp, #16
   1932c:	pop	{r4, r5, r6, r7, fp, pc}

00019330 <flatcc_verify_struct_as_typed_root@@Base>:
   19330:	push	{fp, lr}
   19334:	mov	fp, sp
   19338:	mov	ip, r0
   1933c:	mov	r0, #5
   19340:	tst	ip, #3
   19344:	bne	193b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19348:	mov	r0, #6
   1934c:	cmn	r1, #9
   19350:	bhi	193b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19354:	mov	r0, #1
   19358:	cmp	r1, #8
   1935c:	bcc	193b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19360:	cmp	r2, #0
   19364:	beq	19378 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   19368:	ldr	lr, [ip, #4]
   1936c:	mov	r0, #2
   19370:	cmp	lr, r2
   19374:	bne	193b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19378:	ldr	ip, [ip]
   1937c:	mov	r0, #18
   19380:	sub	r2, ip, #1
   19384:	cmp	r2, r1
   19388:	bcs	193b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   1938c:	adds	r3, ip, r3
   19390:	mov	r0, #10
   19394:	bcs	193b4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19398:	mov	r0, #9
   1939c:	cmp	r3, r1
   193a0:	pophi	{fp, pc}
   193a4:	ldr	r0, [fp, #8]
   193a8:	sub	r0, r0, #1
   193ac:	ands	r0, ip, r0
   193b0:	movwne	r0, #11
   193b4:	pop	{fp, pc}

000193b8 <flatcc_verify_table_as_root@@Base>:
   193b8:	push	{r4, r5, r6, r7, fp, lr}
   193bc:	add	fp, sp, #16
   193c0:	sub	sp, sp, #24
   193c4:	mov	r4, r0
   193c8:	mov	r0, #5
   193cc:	tst	r4, #3
   193d0:	bne	194dc <flatcc_verify_table_as_root@@Base+0x124>
   193d4:	mov	r6, r1
   193d8:	mov	r0, #6
   193dc:	cmn	r1, #9
   193e0:	bhi	194dc <flatcc_verify_table_as_root@@Base+0x124>
   193e4:	mov	r0, #1
   193e8:	cmp	r6, #8
   193ec:	bcc	194dc <flatcc_verify_table_as_root@@Base+0x124>
   193f0:	mov	r5, r3
   193f4:	mov	r7, r2
   193f8:	cmp	r2, #0
   193fc:	beq	1942c <flatcc_verify_table_as_root@@Base+0x74>
   19400:	mov	r0, #0
   19404:	mov	r1, r7
   19408:	mov	r2, #4
   1940c:	str	r0, [sp]
   19410:	mov	r0, sp
   19414:	bl	12784 <strncpy@plt>
   19418:	ldr	r0, [sp]
   1941c:	cmp	r0, #0
   19420:	ldrne	r1, [r4, #4]
   19424:	cmpne	r1, r0
   19428:	bne	194e4 <flatcc_verify_table_as_root@@Base+0x12c>
   1942c:	ldr	r1, [r4]
   19430:	mov	r0, #99	; 0x63
   19434:	str	r0, [sp, #8]
   19438:	mov	r0, #15
   1943c:	tst	r1, #3
   19440:	bne	194dc <flatcc_verify_table_as_root@@Base+0x124>
   19444:	cmp	r1, #0
   19448:	beq	194dc <flatcc_verify_table_as_root@@Base+0x124>
   1944c:	add	r2, r1, #4
   19450:	cmp	r2, r6
   19454:	bhi	194dc <flatcc_verify_table_as_root@@Base+0x124>
   19458:	str	r1, [sp, #16]
   1945c:	ldr	r0, [r4, r1]
   19460:	sub	r7, r1, r0
   19464:	mov	r0, #29
   19468:	tst	r7, #-2147483647	; 0x80000001
   1946c:	bne	194dc <flatcc_verify_table_as_root@@Base+0x124>
   19470:	add	r3, r7, #2
   19474:	mov	r0, #27
   19478:	cmp	r3, r6
   1947c:	bhi	194dc <flatcc_verify_table_as_root@@Base+0x124>
   19480:	mov	ip, r4
   19484:	mov	r0, #30
   19488:	ldrh	r2, [ip, r7]!
   1948c:	tst	r2, #1
   19490:	strh	r2, [sp, #22]
   19494:	bne	194dc <flatcc_verify_table_as_root@@Base+0x124>
   19498:	add	r7, r7, r2
   1949c:	cmp	r7, r6
   194a0:	bhi	194dc <flatcc_verify_table_as_root@@Base+0x124>
   194a4:	mov	r0, #28
   194a8:	cmp	r2, #4
   194ac:	bcc	194dc <flatcc_verify_table_as_root@@Base+0x124>
   194b0:	add	r0, r4, r3
   194b4:	sub	r1, r6, r1
   194b8:	ldrh	r2, [r0]
   194bc:	mov	r0, #20
   194c0:	cmp	r1, r2
   194c4:	strh	r2, [sp, #20]
   194c8:	bcc	194dc <flatcc_verify_table_as_root@@Base+0x124>
   194cc:	mov	r0, sp
   194d0:	stm	sp, {r4, r6}
   194d4:	str	ip, [sp, #12]
   194d8:	blx	r5
   194dc:	sub	sp, fp, #16
   194e0:	pop	{r4, r5, r6, r7, fp, pc}
   194e4:	mov	r0, #0
   194e8:	mov	r1, r7
   194ec:	mov	r2, #4
   194f0:	str	r0, [sp]
   194f4:	mov	r0, sp
   194f8:	bl	12784 <strncpy@plt>
   194fc:	ldr	r0, [sp]
   19500:	ldr	r1, [r4, #4]
   19504:	subs	r1, r1, r0
   19508:	movwne	r1, #1
   1950c:	cmp	r0, #0
   19510:	lslne	r0, r1, #1
   19514:	sub	sp, fp, #16
   19518:	pop	{r4, r5, r6, r7, fp, pc}

0001951c <flatcc_verify_table_as_typed_root@@Base>:
   1951c:	push	{r4, r5, r6, sl, fp, lr}
   19520:	add	fp, sp, #16
   19524:	sub	sp, sp, #24
   19528:	mov	ip, #5
   1952c:	tst	r0, #3
   19530:	bne	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19534:	mov	ip, #6
   19538:	cmn	r1, #9
   1953c:	bhi	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19540:	mov	ip, #1
   19544:	cmp	r1, #8
   19548:	bcc	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1954c:	cmp	r2, #0
   19550:	beq	19564 <flatcc_verify_table_as_typed_root@@Base+0x48>
   19554:	ldr	r6, [r0, #4]
   19558:	mov	ip, #2
   1955c:	cmp	r6, r2
   19560:	bne	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19564:	ldr	r2, [r0]
   19568:	mov	r6, #99	; 0x63
   1956c:	mov	ip, #15
   19570:	str	r6, [sp, #8]
   19574:	tst	r2, #3
   19578:	bne	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1957c:	cmp	r2, #0
   19580:	beq	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19584:	add	r6, r2, #4
   19588:	cmp	r6, r1
   1958c:	bhi	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19590:	str	r2, [sp, #16]
   19594:	mov	ip, #29
   19598:	ldr	r6, [r0, r2]
   1959c:	sub	r5, r2, r6
   195a0:	tst	r5, #-2147483647	; 0x80000001
   195a4:	bne	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   195a8:	add	r4, r5, #2
   195ac:	mov	ip, #27
   195b0:	cmp	r4, r1
   195b4:	bhi	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   195b8:	mov	lr, r0
   195bc:	mov	ip, #30
   195c0:	ldrh	r6, [lr, r5]!
   195c4:	tst	r6, #1
   195c8:	strh	r6, [sp, #22]
   195cc:	bne	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   195d0:	add	r5, r5, r6
   195d4:	cmp	r5, r1
   195d8:	bhi	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   195dc:	mov	ip, #28
   195e0:	cmp	r6, #4
   195e4:	bcc	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   195e8:	add	r6, r0, r4
   195ec:	sub	r2, r1, r2
   195f0:	mov	ip, #20
   195f4:	ldrh	r4, [r6]
   195f8:	cmp	r2, r4
   195fc:	strh	r4, [sp, #20]
   19600:	bcc	19618 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19604:	stm	sp, {r0, r1}
   19608:	mov	r0, sp
   1960c:	str	lr, [sp, #12]
   19610:	blx	r3
   19614:	mov	ip, r0
   19618:	mov	r0, ip
   1961c:	sub	sp, fp, #16
   19620:	pop	{r4, r5, r6, sl, fp, pc}

00019624 <flatcc_verify_struct_as_nested_root@@Base>:
   19624:	push	{r4, r5, r6, r7, fp, lr}
   19628:	add	fp, sp, #16
   1962c:	sub	sp, sp, #8
   19630:	mov	r7, #4
   19634:	ldrh	r4, [r0, #22]
   19638:	ldr	lr, [fp, #12]
   1963c:	add	r5, r7, r1, lsl #1
   19640:	uxth	ip, r5
   19644:	cmp	ip, r4
   19648:	bcs	196d0 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   1964c:	ldr	r1, [r0, #12]
   19650:	uxtah	r5, r1, r5
   19654:	ldrh	r5, [r5]
   19658:	cmp	r5, #0
   1965c:	beq	196d0 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   19660:	ldrh	r4, [r0, #20]
   19664:	add	r6, r5, #4
   19668:	cmp	r6, r4
   1966c:	bhi	196e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   19670:	ldr	r4, [r0, #16]
   19674:	add	r6, r4, r5
   19678:	tst	r6, #3
   1967c:	bne	196e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   19680:	cmp	r6, #0
   19684:	beq	19794 <flatcc_verify_struct_as_nested_root@@Base+0x170>
   19688:	ldr	r4, [r0]
   1968c:	ldr	r5, [r4, r6]
   19690:	add	r5, r5, r6
   19694:	cmp	r5, r6
   19698:	bls	196e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   1969c:	ldr	r6, [r0, #4]
   196a0:	add	r7, r5, #4
   196a4:	cmp	r7, r6
   196a8:	bhi	196e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   196ac:	ands	r7, r7, #3
   196b0:	bne	196e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   196b4:	ldr	r4, [r4, r5]
   196b8:	sub	r5, r6, r5
   196bc:	sub	r5, r5, #4
   196c0:	mul	r4, r4, lr
   196c4:	cmp	r5, r4
   196c8:	bcc	196e4 <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   196cc:	b	19794 <flatcc_verify_struct_as_nested_root@@Base+0x170>
   196d0:	cmp	r2, #0
   196d4:	beq	19784 <flatcc_verify_struct_as_nested_root@@Base+0x160>
   196d8:	cmp	ip, r4
   196dc:	bcs	19774 <flatcc_verify_struct_as_nested_root@@Base+0x150>
   196e0:	ldr	r1, [r0, #12]
   196e4:	add	r1, r1, ip
   196e8:	ldrh	r3, [r1]
   196ec:	cmp	r3, #0
   196f0:	beq	19774 <flatcc_verify_struct_as_nested_root@@Base+0x150>
   196f4:	ldrh	r2, [r0, #20]
   196f8:	add	r7, r3, #4
   196fc:	mov	r1, #13
   19700:	cmp	r7, r2
   19704:	bhi	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   19708:	ldr	r1, [r0, #16]
   1970c:	add	r5, r1, r3
   19710:	mov	r1, #12
   19714:	tst	r5, #3
   19718:	bne	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   1971c:	cmp	r5, #0
   19720:	beq	197e4 <flatcc_verify_struct_as_nested_root@@Base+0x1c0>
   19724:	ldr	r2, [r0]
   19728:	ldr	r1, [r2, r5]
   1972c:	add	r3, r1, r5
   19730:	mov	r1, #16
   19734:	cmp	r3, r5
   19738:	bls	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   1973c:	ldr	r0, [r0, #4]
   19740:	add	r7, r3, #4
   19744:	cmp	r7, r0
   19748:	bhi	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   1974c:	ands	r7, r7, #3
   19750:	bne	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   19754:	ldr	r1, [r2, r3]
   19758:	sub	r0, r0, r3
   1975c:	sub	r0, r0, #4
   19760:	mul	r2, r1, lr
   19764:	mov	r1, #0
   19768:	cmp	r0, r2
   1976c:	movwcc	r1, #26
   19770:	b	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   19774:	cmp	r2, #0
   19778:	movwne	r2, #1
   1977c:	lsl	r1, r2, #2
   19780:	b	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   19784:	mov	r1, #0
   19788:	cmp	ip, r4
   1978c:	bcs	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   19790:	ldr	r1, [r0, #12]
   19794:	add	r1, r1, ip
   19798:	ldrh	r2, [r1]
   1979c:	mov	r1, #0
   197a0:	cmp	r2, #0
   197a4:	beq	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   197a8:	ldr	r7, [r0]
   197ac:	ldr	r0, [r0, #16]
   197b0:	add	r0, r7, r0
   197b4:	adds	r0, r0, r2
   197b8:	beq	197e8 <flatcc_verify_struct_as_nested_root@@Base+0x1c4>
   197bc:	ldr	r2, [r0]
   197c0:	ldr	ip, [fp, #8]
   197c4:	ldr	r1, [r2, r0]!
   197c8:	str	lr, [sp]
   197cc:	add	r0, r2, #4
   197d0:	mov	r2, r3
   197d4:	mov	r3, ip
   197d8:	bl	19240 <flatcc_verify_struct_as_root@@Base>
   197dc:	sub	sp, fp, #16
   197e0:	pop	{r4, r5, r6, r7, fp, pc}
   197e4:	mov	r1, #0
   197e8:	mov	r0, r1
   197ec:	sub	sp, fp, #16
   197f0:	pop	{r4, r5, r6, r7, fp, pc}

000197f4 <flatcc_verify_table_as_nested_root@@Base>:
   197f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   197f8:	add	fp, sp, #24
   197fc:	sub	sp, sp, #24
   19800:	mov	r4, r0
   19804:	mov	r0, #4
   19808:	ldr	r8, [fp, #8]
   1980c:	mov	r5, r3
   19810:	add	r6, r0, r1, lsl #1
   19814:	ldrh	r7, [r4, #22]
   19818:	uxth	r3, r6
   1981c:	cmp	r3, r7
   19820:	bcs	198a8 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   19824:	ldr	r0, [r4, #12]
   19828:	uxtah	r6, r0, r6
   1982c:	ldrh	r6, [r6]
   19830:	cmp	r6, #0
   19834:	beq	198a8 <flatcc_verify_table_as_nested_root@@Base+0xb4>
   19838:	ldrh	r7, [r4, #20]
   1983c:	add	r1, r6, #4
   19840:	cmp	r1, r7
   19844:	bhi	198bc <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19848:	ldr	r1, [r4, #16]
   1984c:	add	r7, r1, r6
   19850:	tst	r7, #3
   19854:	bne	198bc <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19858:	cmp	r7, #0
   1985c:	beq	19974 <flatcc_verify_table_as_nested_root@@Base+0x180>
   19860:	ldr	ip, [r4]
   19864:	ldr	r1, [ip, r7]
   19868:	add	r6, r1, r7
   1986c:	cmp	r6, r7
   19870:	bls	198bc <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19874:	ldr	lr, [r4, #4]
   19878:	add	r7, r6, #4
   1987c:	cmp	r7, lr
   19880:	bhi	198bc <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19884:	ands	r1, r7, #3
   19888:	bne	198bc <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1988c:	ldr	r1, [ip, r6]
   19890:	sub	r7, lr, r6
   19894:	sub	r7, r7, #4
   19898:	mul	r1, r1, r8
   1989c:	cmp	r7, r1
   198a0:	bcc	198bc <flatcc_verify_table_as_nested_root@@Base+0xc8>
   198a4:	b	19974 <flatcc_verify_table_as_nested_root@@Base+0x180>
   198a8:	cmp	r2, #0
   198ac:	beq	19964 <flatcc_verify_table_as_nested_root@@Base+0x170>
   198b0:	cmp	r3, r7
   198b4:	bcs	19950 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   198b8:	ldr	r0, [r4, #12]
   198bc:	add	r0, r0, r3
   198c0:	ldrh	r3, [r0]
   198c4:	cmp	r3, #0
   198c8:	beq	19950 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   198cc:	ldrh	r1, [r4, #20]
   198d0:	add	r2, r3, #4
   198d4:	mov	r0, #13
   198d8:	cmp	r2, r1
   198dc:	bhi	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198e0:	ldr	r0, [r4, #16]
   198e4:	add	r7, r0, r3
   198e8:	mov	r0, #12
   198ec:	tst	r7, #3
   198f0:	bne	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198f4:	cmp	r7, #0
   198f8:	beq	19ac4 <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   198fc:	ldr	r2, [r4]
   19900:	ldr	r0, [r2, r7]
   19904:	add	r3, r0, r7
   19908:	mov	r0, #16
   1990c:	cmp	r3, r7
   19910:	bls	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19914:	ldr	r7, [r4, #4]
   19918:	add	r6, r3, #4
   1991c:	cmp	r6, r7
   19920:	bhi	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19924:	ands	r1, r6, #3
   19928:	bne	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1992c:	ldr	r0, [r2, r3]
   19930:	mul	r1, r0, r8
   19934:	sub	r0, r7, r3
   19938:	sub	r2, r0, #4
   1993c:	mov	r0, #0
   19940:	cmp	r2, r1
   19944:	movwcc	r0, #26
   19948:	sub	sp, fp, #24
   1994c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19950:	cmp	r2, #0
   19954:	movwne	r2, #1
   19958:	lsl	r0, r2, #2
   1995c:	sub	sp, fp, #24
   19960:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19964:	mov	r0, #0
   19968:	cmp	r3, r7
   1996c:	bcs	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19970:	ldr	r0, [r4, #12]
   19974:	add	r0, r0, r3
   19978:	ldrh	r1, [r0]
   1997c:	mov	r0, #0
   19980:	cmp	r1, #0
   19984:	beq	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19988:	ldr	r2, [r4]
   1998c:	ldr	r3, [r4, #16]
   19990:	add	r2, r2, r3
   19994:	adds	r1, r2, r1
   19998:	beq	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1999c:	ldr	r6, [r1]
   199a0:	mov	r0, #5
   199a4:	ldr	r8, [r6, r1]!
   199a8:	add	r7, r6, #4
   199ac:	tst	r7, #3
   199b0:	bne	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   199b4:	mov	r0, #6
   199b8:	cmn	r8, #9
   199bc:	bhi	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   199c0:	mov	r0, #1
   199c4:	cmp	r8, #8
   199c8:	bcc	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   199cc:	cmp	r5, #0
   199d0:	beq	19a00 <flatcc_verify_table_as_nested_root@@Base+0x20c>
   199d4:	mov	r0, #0
   199d8:	mov	r1, r5
   199dc:	mov	r2, #4
   199e0:	str	r0, [sp]
   199e4:	mov	r0, sp
   199e8:	bl	12784 <strncpy@plt>
   199ec:	ldr	r0, [sp]
   199f0:	cmp	r0, #0
   199f4:	ldrne	r1, [r6, #8]
   199f8:	cmpne	r1, r0
   199fc:	bne	19ad0 <flatcc_verify_table_as_nested_root@@Base+0x2dc>
   19a00:	ldr	r0, [r4, #8]
   19a04:	ldr	r1, [r7]
   19a08:	subs	r0, r0, #1
   19a0c:	str	r0, [sp, #8]
   19a10:	beq	19b08 <flatcc_verify_table_as_nested_root@@Base+0x314>
   19a14:	mov	r0, #15
   19a18:	tst	r1, #3
   19a1c:	bne	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a20:	cmp	r1, #0
   19a24:	beq	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a28:	add	r2, r1, #4
   19a2c:	cmp	r2, r8
   19a30:	bhi	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a34:	str	r1, [sp, #16]
   19a38:	ldr	r0, [r7, r1]
   19a3c:	sub	r6, r1, r0
   19a40:	mov	r0, #29
   19a44:	tst	r6, #-2147483647	; 0x80000001
   19a48:	bne	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a4c:	add	r3, r6, #2
   19a50:	mov	r0, #27
   19a54:	cmp	r3, r8
   19a58:	bhi	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a5c:	mov	r2, r7
   19a60:	mov	r0, #30
   19a64:	ldrh	r5, [r2, r6]!
   19a68:	tst	r5, #1
   19a6c:	strh	r5, [sp, #22]
   19a70:	bne	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a74:	add	r6, r6, r5
   19a78:	cmp	r6, r8
   19a7c:	bhi	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a80:	mov	r0, #28
   19a84:	cmp	r5, #4
   19a88:	bcc	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a8c:	add	r0, r7, r3
   19a90:	sub	r1, r8, r1
   19a94:	ldrh	r3, [r0]
   19a98:	mov	r0, #20
   19a9c:	cmp	r1, r3
   19aa0:	strh	r3, [sp, #20]
   19aa4:	bcc	19abc <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19aa8:	ldr	r1, [fp, #12]
   19aac:	mov	r0, sp
   19ab0:	stm	sp, {r7, r8}
   19ab4:	str	r2, [sp, #12]
   19ab8:	blx	r1
   19abc:	sub	sp, fp, #24
   19ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19ac4:	mov	r0, #0
   19ac8:	sub	sp, fp, #24
   19acc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19ad0:	mov	r0, #0
   19ad4:	mov	r1, r5
   19ad8:	mov	r2, #4
   19adc:	str	r0, [sp]
   19ae0:	mov	r0, sp
   19ae4:	bl	12784 <strncpy@plt>
   19ae8:	ldr	r0, [sp]
   19aec:	ldr	r1, [r6, #8]
   19af0:	subs	r1, r1, r0
   19af4:	movwne	r1, #1
   19af8:	cmp	r0, #0
   19afc:	lslne	r0, r1, #1
   19b00:	sub	sp, fp, #24
   19b04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b08:	mov	r0, #3
   19b0c:	sub	sp, fp, #24
   19b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00019b14 <flatcc_verify_union_field@@Base>:
   19b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b18:	add	fp, sp, #28
   19b1c:	sub	sp, sp, #28
   19b20:	mov	r7, #2
   19b24:	ldrh	r4, [r0, #22]
   19b28:	lsl	r5, r1, #1
   19b2c:	add	r7, r7, r1, lsl #1
   19b30:	uxth	r6, r7
   19b34:	cmp	r6, r4
   19b38:	bcs	19c30 <flatcc_verify_union_field@@Base+0x11c>
   19b3c:	ldr	r6, [r0, #12]
   19b40:	uxtah	r1, r6, r7
   19b44:	ldrh	ip, [r1]
   19b48:	cmp	ip, #0
   19b4c:	beq	19c30 <flatcc_verify_union_field@@Base+0x11c>
   19b50:	ldrh	r7, [r0, #20]
   19b54:	mov	r1, #13
   19b58:	cmp	ip, r7
   19b5c:	bcs	19c64 <flatcc_verify_union_field@@Base+0x150>
   19b60:	add	r7, r5, #4
   19b64:	ldr	lr, [r0]
   19b68:	mov	r1, #1
   19b6c:	uxth	sl, r7
   19b70:	cmp	sl, r4
   19b74:	bcs	19b88 <flatcc_verify_union_field@@Base+0x74>
   19b78:	uxtah	r1, r6, r7
   19b7c:	ldrh	r1, [r1]
   19b80:	clz	r1, r1
   19b84:	lsr	r1, r1, #5
   19b88:	ldr	r9, [r0, #16]
   19b8c:	cmp	r1, #0
   19b90:	moveq	r1, #24
   19b94:	add	r8, lr, r9
   19b98:	ldrb	r5, [r8, ip]
   19b9c:	cmpeq	r5, #0
   19ba0:	beq	19c64 <flatcc_verify_union_field@@Base+0x150>
   19ba4:	mov	r1, #0
   19ba8:	cmp	r5, #0
   19bac:	beq	19c64 <flatcc_verify_union_field@@Base+0x150>
   19bb0:	cmp	sl, r4
   19bb4:	bcs	19c70 <flatcc_verify_union_field@@Base+0x15c>
   19bb8:	uxtah	r1, r6, r7
   19bbc:	ldrh	r4, [r1]
   19bc0:	cmp	r4, #0
   19bc4:	beq	19c70 <flatcc_verify_union_field@@Base+0x15c>
   19bc8:	ldrh	r1, [r0, #20]
   19bcc:	add	r2, r4, #4
   19bd0:	cmp	r2, r1
   19bd4:	mov	r1, #13
   19bd8:	bhi	19c64 <flatcc_verify_union_field@@Base+0x150>
   19bdc:	add	r2, r9, r4
   19be0:	mov	r1, #12
   19be4:	tst	r2, #3
   19be8:	bne	19c64 <flatcc_verify_union_field@@Base+0x150>
   19bec:	cmp	r2, #0
   19bf0:	mov	r1, #0
   19bf4:	beq	19c64 <flatcc_verify_union_field@@Base+0x150>
   19bf8:	str	lr, [sp, #4]
   19bfc:	ldr	r1, [r0, #4]
   19c00:	ldr	r0, [r0, #8]
   19c04:	str	r1, [sp, #8]
   19c08:	str	r2, [sp, #20]
   19c0c:	str	r0, [sp, #12]
   19c10:	ldr	r0, [lr, r2]
   19c14:	str	r0, [sp, #24]
   19c18:	ldrb	r0, [r8, ip]
   19c1c:	strb	r0, [sp, #16]
   19c20:	add	r0, sp, #4
   19c24:	blx	r3
   19c28:	mov	r1, r0
   19c2c:	b	19c64 <flatcc_verify_union_field@@Base+0x150>
   19c30:	add	r1, r5, #4
   19c34:	uxth	r3, r1
   19c38:	cmp	r3, r4
   19c3c:	bcs	19c58 <flatcc_verify_union_field@@Base+0x144>
   19c40:	ldr	r0, [r0, #12]
   19c44:	uxtah	r0, r0, r1
   19c48:	mov	r1, #23
   19c4c:	ldrh	r0, [r0]
   19c50:	cmp	r0, #0
   19c54:	bne	19c64 <flatcc_verify_union_field@@Base+0x150>
   19c58:	cmp	r2, #0
   19c5c:	movwne	r2, #21
   19c60:	mov	r1, r2
   19c64:	mov	r0, r1
   19c68:	sub	sp, fp, #28
   19c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c70:	cmp	r2, #0
   19c74:	movwne	r2, #1
   19c78:	lsl	r1, r2, #2
   19c7c:	b	19c64 <flatcc_verify_union_field@@Base+0x150>

00019c80 <flatcc_verify_union_vector_field@@Base>:
   19c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c84:	add	fp, sp, #28
   19c88:	sub	sp, sp, #28
   19c8c:	mov	r9, r3
   19c90:	mov	r3, #2
   19c94:	lsl	sl, r1, #1
   19c98:	add	r5, r3, r1, lsl #1
   19c9c:	ldrh	r1, [r0, #22]
   19ca0:	uxth	r3, r5
   19ca4:	cmp	r3, r1
   19ca8:	bcs	19cc0 <flatcc_verify_union_vector_field@@Base+0x40>
   19cac:	ldr	r7, [r0, #12]
   19cb0:	uxtah	r5, r7, r5
   19cb4:	ldrh	r5, [r5]
   19cb8:	cmp	r5, #0
   19cbc:	bne	19cfc <flatcc_verify_union_vector_field@@Base+0x7c>
   19cc0:	add	r7, sl, #4
   19cc4:	uxth	r5, r7
   19cc8:	cmp	r5, r1
   19ccc:	bcs	19d78 <flatcc_verify_union_vector_field@@Base+0xf8>
   19cd0:	cmp	r2, #0
   19cd4:	beq	19cf0 <flatcc_verify_union_vector_field@@Base+0x70>
   19cd8:	ldr	r5, [r0, #12]
   19cdc:	uxtah	r7, r5, r7
   19ce0:	mov	r5, #22
   19ce4:	ldrh	r7, [r7]
   19ce8:	cmp	r7, #0
   19cec:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19cf0:	cmp	r3, r1
   19cf4:	bcs	19d88 <flatcc_verify_union_vector_field@@Base+0x108>
   19cf8:	ldr	r7, [r0, #12]
   19cfc:	add	r5, r7, r3
   19d00:	ldrh	r5, [r5]
   19d04:	cmp	r5, #0
   19d08:	beq	19d88 <flatcc_verify_union_vector_field@@Base+0x108>
   19d0c:	ldrh	r4, [r0, #20]
   19d10:	add	r6, r5, #4
   19d14:	cmp	r6, r4
   19d18:	bhi	19d9c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d1c:	ldr	r6, [r0, #16]
   19d20:	add	r5, r6, r5
   19d24:	tst	r5, #3
   19d28:	bne	19d9c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d2c:	cmp	r5, #0
   19d30:	beq	19e38 <flatcc_verify_union_vector_field@@Base+0x1b8>
   19d34:	ldr	ip, [r0]
   19d38:	ldr	r6, [ip, r5]
   19d3c:	add	lr, r6, r5
   19d40:	cmp	lr, r5
   19d44:	bls	19d9c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d48:	ldr	r8, [r0, #4]
   19d4c:	add	r5, lr, #4
   19d50:	cmp	r5, r8
   19d54:	bhi	19d9c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d58:	ands	r4, r5, #3
   19d5c:	bne	19d9c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d60:	ldr	r6, [ip, lr]
   19d64:	sub	r5, r8, lr
   19d68:	sub	r5, r5, #4
   19d6c:	cmp	r5, r6
   19d70:	bcc	19d9c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d74:	b	19e38 <flatcc_verify_union_vector_field@@Base+0x1b8>
   19d78:	mov	r5, #22
   19d7c:	cmp	r2, #0
   19d80:	bne	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19d84:	b	19cf0 <flatcc_verify_union_vector_field@@Base+0x70>
   19d88:	cmp	r2, #0
   19d8c:	beq	19e28 <flatcc_verify_union_vector_field@@Base+0x1a8>
   19d90:	cmp	r3, r1
   19d94:	bcs	19f48 <flatcc_verify_union_vector_field@@Base+0x2c8>
   19d98:	ldr	r7, [r0, #12]
   19d9c:	add	r1, r7, r3
   19da0:	ldrh	r1, [r1]
   19da4:	cmp	r1, #0
   19da8:	beq	19f48 <flatcc_verify_union_vector_field@@Base+0x2c8>
   19dac:	ldrh	r2, [r0, #20]
   19db0:	add	r3, r1, #4
   19db4:	mov	r5, #13
   19db8:	cmp	r3, r2
   19dbc:	bhi	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19dc0:	ldr	r2, [r0, #16]
   19dc4:	mov	r5, #12
   19dc8:	add	r3, r2, r1
   19dcc:	tst	r3, #3
   19dd0:	bne	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19dd4:	cmp	r3, #0
   19dd8:	beq	19f60 <flatcc_verify_union_vector_field@@Base+0x2e0>
   19ddc:	ldr	r1, [r0]
   19de0:	mov	r5, #16
   19de4:	ldr	r2, [r1, r3]
   19de8:	add	r2, r2, r3
   19dec:	cmp	r2, r3
   19df0:	bls	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19df4:	ldr	r0, [r0, #4]
   19df8:	add	r3, r2, #4
   19dfc:	cmp	r3, r0
   19e00:	bhi	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e04:	ands	r3, r3, #3
   19e08:	bne	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e0c:	ldr	r1, [r1, r2]
   19e10:	sub	r0, r0, r2
   19e14:	mov	r5, #0
   19e18:	sub	r0, r0, #4
   19e1c:	cmp	r0, r1
   19e20:	movwcc	r5, #26
   19e24:	b	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e28:	mov	r5, #0
   19e2c:	cmp	r3, r1
   19e30:	bcs	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e34:	ldr	r7, [r0, #12]
   19e38:	add	r3, r7, r3
   19e3c:	mov	r5, #0
   19e40:	ldrh	r3, [r3]
   19e44:	cmp	r3, #0
   19e48:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e4c:	ldr	r8, [r0]
   19e50:	ldr	lr, [r0, #16]
   19e54:	add	r6, r8, lr
   19e58:	adds	ip, r6, r3
   19e5c:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e60:	add	r3, sl, #4
   19e64:	uxth	r4, r3
   19e68:	cmp	r4, r1
   19e6c:	bcs	19f48 <flatcc_verify_union_vector_field@@Base+0x2c8>
   19e70:	uxtah	r1, r7, r3
   19e74:	ldrh	r1, [r1]
   19e78:	cmp	r1, #0
   19e7c:	beq	19f48 <flatcc_verify_union_vector_field@@Base+0x2c8>
   19e80:	ldrh	r2, [r0, #20]
   19e84:	add	r3, r1, #4
   19e88:	mov	r5, #13
   19e8c:	cmp	r3, r2
   19e90:	bhi	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19e94:	add	r3, lr, r1
   19e98:	mov	r5, #12
   19e9c:	tst	r3, #3
   19ea0:	bne	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19ea4:	cmp	r3, #0
   19ea8:	mov	r5, #0
   19eac:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19eb0:	ldr	r1, [r0, #8]
   19eb4:	cmp	r1, #1
   19eb8:	blt	19f68 <flatcc_verify_union_vector_field@@Base+0x2e8>
   19ebc:	ldr	r2, [r8, r3]
   19ec0:	mov	r5, #16
   19ec4:	add	r2, r2, r3
   19ec8:	cmp	r2, r3
   19ecc:	bls	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19ed0:	ldr	r0, [r0, #4]
   19ed4:	add	r7, r2, #4
   19ed8:	cmp	r7, r0
   19edc:	bhi	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19ee0:	ands	r3, r7, #3
   19ee4:	bne	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19ee8:	ldr	r3, [r8, r2]
   19eec:	mov	r5, #25
   19ef0:	cmn	r3, #-1073741823	; 0xc0000001
   19ef4:	bhi	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19ef8:	sub	r2, r0, r2
   19efc:	mov	r5, #26
   19f00:	sub	r2, r2, #4
   19f04:	cmp	r2, r3, lsl #2
   19f08:	bcc	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f0c:	ldr	r2, [ip]
   19f10:	mov	r5, #34	; 0x22
   19f14:	ldr	sl, [r2, ip]!
   19f18:	cmp	r3, sl
   19f1c:	bne	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f20:	sub	r1, r1, #1
   19f24:	mov	r5, #0
   19f28:	cmp	sl, #0
   19f2c:	str	r1, [sp, #12]
   19f30:	str	r0, [sp, #8]
   19f34:	str	r8, [sp, #4]
   19f38:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f3c:	add	r6, r2, #4
   19f40:	add	r4, sp, #4
   19f44:	b	19f88 <flatcc_verify_union_vector_field@@Base+0x308>
   19f48:	cmp	r2, #0
   19f4c:	movwne	r2, #1
   19f50:	lsl	r5, r2, #2
   19f54:	mov	r0, r5
   19f58:	sub	sp, fp, #28
   19f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f60:	mov	r5, #0
   19f64:	b	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f68:	mov	r5, #3
   19f6c:	b	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f70:	cmp	r0, #0
   19f74:	bne	19fd4 <flatcc_verify_union_vector_field@@Base+0x354>
   19f78:	add	r6, r6, #1
   19f7c:	subs	sl, sl, #1
   19f80:	add	r7, r7, #4
   19f84:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f88:	ldr	r1, [r8, r7]
   19f8c:	ldrb	r0, [r6]
   19f90:	cmp	r1, #0
   19f94:	beq	19f70 <flatcc_verify_union_vector_field@@Base+0x2f0>
   19f98:	cmp	r0, #0
   19f9c:	beq	19fcc <flatcc_verify_union_vector_field@@Base+0x34c>
   19fa0:	str	r1, [sp, #24]
   19fa4:	str	r7, [sp, #20]
   19fa8:	strb	r0, [sp, #16]
   19fac:	mov	r0, r4
   19fb0:	blx	r9
   19fb4:	cmp	r0, #0
   19fb8:	beq	19f78 <flatcc_verify_union_vector_field@@Base+0x2f8>
   19fbc:	add	r0, sp, #4
   19fc0:	blx	r9
   19fc4:	mov	r5, r0
   19fc8:	b	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19fcc:	mov	r5, #33	; 0x21
   19fd0:	b	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19fd4:	mov	r5, #32
   19fd8:	b	19f54 <flatcc_verify_union_vector_field@@Base+0x2d4>

00019fdc <__libc_csu_init@@Base>:
   19fdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fe0:	mov	r7, r0
   19fe4:	ldr	r6, [pc, #72]	; 1a034 <__libc_csu_init@@Base+0x58>
   19fe8:	ldr	r5, [pc, #72]	; 1a038 <__libc_csu_init@@Base+0x5c>
   19fec:	add	r6, pc, r6
   19ff0:	add	r5, pc, r5
   19ff4:	sub	r6, r6, r5
   19ff8:	mov	r8, r1
   19ffc:	mov	r9, r2
   1a000:	bl	126ec <free@plt-0x20>
   1a004:	asrs	r6, r6, #2
   1a008:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a00c:	mov	r4, #0
   1a010:	add	r4, r4, #1
   1a014:	ldr	r3, [r5], #4
   1a018:	mov	r2, r9
   1a01c:	mov	r1, r8
   1a020:	mov	r0, r7
   1a024:	blx	r3
   1a028:	cmp	r6, r4
   1a02c:	bne	1a010 <__libc_csu_init@@Base+0x34>
   1a030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a034:	andeq	r1, r1, r4, ror lr
   1a038:	andeq	r1, r1, ip, ror #28

0001a03c <__libc_csu_fini@@Base>:
   1a03c:	bx	lr

Disassembly of section .fini:

0001a040 <.fini>:
   1a040:	push	{r3, lr}
   1a044:	pop	{r3, pc}
