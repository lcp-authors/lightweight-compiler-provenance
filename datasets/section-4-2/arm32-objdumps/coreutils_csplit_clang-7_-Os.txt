
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	117bc <__assert_fail@plt+0x48>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <pthread_mutex_unlock@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <pthread_mutex_unlock@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	r4, r2, r4, asr #24

000113c0 <pthread_mutex_unlock@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #36, 20	; 0x24000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <fdopen@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #36, 20	; 0x24000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <calloc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #36, 20	; 0x24000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <fputs_unlocked@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #36, 20	; 0x24000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <wctype@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #36, 20	; 0x24000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <raise@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #36, 20	; 0x24000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <wcrtomb@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #36, 20	; 0x24000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <iswctype@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #36, 20	; 0x24000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <strcmp@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #36, 20	; 0x24000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <read@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #36, 20	; 0x24000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <pthread_mutex_destroy@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #36, 20	; 0x24000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <fflush@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #36, 20	; 0x24000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <sigprocmask@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #36, 20	; 0x24000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <memmove@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #36, 20	; 0x24000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <free@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #36, 20	; 0x24000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <pthread_mutex_lock@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #36, 20	; 0x24000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <_exit@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #36, 20	; 0x24000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <memcpy@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #36, 20	; 0x24000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <tolower@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #36, 20	; 0x24000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a4 <pthread_mutex_init@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #36, 20	; 0x24000
   114ac:	ldr	pc, [ip, #2988]!	; 0xbac

000114b0 <towlower@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #36, 20	; 0x24000
   114b8:	ldr	pc, [ip, #2980]!	; 0xba4

000114bc <mbsinit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #36, 20	; 0x24000
   114c4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114c8 <signal@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #36, 20	; 0x24000
   114d0:	ldr	pc, [ip, #2964]!	; 0xb94

000114d4 <fwrite_unlocked@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #36, 20	; 0x24000
   114dc:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e0 <memcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #36, 20	; 0x24000
   114e8:	ldr	pc, [ip, #2948]!	; 0xb84

000114ec <dcgettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #36, 20	; 0x24000
   114f4:	ldr	pc, [ip, #2940]!	; 0xb7c

000114f8 <unlink@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #36, 20	; 0x24000
   11500:	ldr	pc, [ip, #2932]!	; 0xb74

00011504 <dup2@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #36, 20	; 0x24000
   1150c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011510 <realloc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #36, 20	; 0x24000
   11518:	ldr	pc, [ip, #2916]!	; 0xb64

0001151c <sigismember@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #36, 20	; 0x24000
   11524:	ldr	pc, [ip, #2908]!	; 0xb5c

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #36, 20	; 0x24000
   11530:	ldr	pc, [ip, #2900]!	; 0xb54

00011534 <rawmemchr@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #36, 20	; 0x24000
   1153c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011540 <iswprint@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #36, 20	; 0x24000
   11548:	ldr	pc, [ip, #2884]!	; 0xb44

0001154c <sigaction@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #36, 20	; 0x24000
   11554:	ldr	pc, [ip, #2876]!	; 0xb3c

00011558 <lseek64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #36, 20	; 0x24000
   11560:	ldr	pc, [ip, #2868]!	; 0xb34

00011564 <__ctype_get_mb_cur_max@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #36, 20	; 0x24000
   1156c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011570 <strcpy@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #36, 20	; 0x24000
   11578:	ldr	pc, [ip, #2852]!	; 0xb24

0001157c <__fpending@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #36, 20	; 0x24000
   11584:	ldr	pc, [ip, #2844]!	; 0xb1c

00011588 <ferror_unlocked@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #36, 20	; 0x24000
   11590:	ldr	pc, [ip, #2836]!	; 0xb14

00011594 <mbrtowc@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #36, 20	; 0x24000
   1159c:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a0 <error@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #36, 20	; 0x24000
   115a8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ac <open64@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #36, 20	; 0x24000
   115b4:	ldr	pc, [ip, #2812]!	; 0xafc

000115b8 <malloc@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #36, 20	; 0x24000
   115c0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c4 <sigaddset@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #36, 20	; 0x24000
   115cc:	ldr	pc, [ip, #2796]!	; 0xaec

000115d0 <__libc_start_main@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #36, 20	; 0x24000
   115d8:	ldr	pc, [ip, #2788]!	; 0xae4

000115dc <__freading@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #36, 20	; 0x24000
   115e4:	ldr	pc, [ip, #2780]!	; 0xadc

000115e8 <__gmon_start__@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #36, 20	; 0x24000
   115f0:	ldr	pc, [ip, #2772]!	; 0xad4

000115f4 <getopt_long@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #36, 20	; 0x24000
   115fc:	ldr	pc, [ip, #2764]!	; 0xacc

00011600 <__ctype_b_loc@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #36, 20	; 0x24000
   11608:	ldr	pc, [ip, #2756]!	; 0xac4

0001160c <exit@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #36, 20	; 0x24000
   11614:	ldr	pc, [ip, #2748]!	; 0xabc

00011618 <strlen@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #36, 20	; 0x24000
   11620:	ldr	pc, [ip, #2740]!	; 0xab4

00011624 <strchr@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #36, 20	; 0x24000
   1162c:	ldr	pc, [ip, #2732]!	; 0xaac

00011630 <__errno_location@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #36, 20	; 0x24000
   11638:	ldr	pc, [ip, #2724]!	; 0xaa4

0001163c <iswalnum@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #36, 20	; 0x24000
   11644:	ldr	pc, [ip, #2716]!	; 0xa9c

00011648 <__sprintf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #36, 20	; 0x24000
   11650:	ldr	pc, [ip, #2708]!	; 0xa94

00011654 <__cxa_atexit@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #36, 20	; 0x24000
   1165c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011660 <memset@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #36, 20	; 0x24000
   11668:	ldr	pc, [ip, #2692]!	; 0xa84

0001166c <btowc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #36, 20	; 0x24000
   11674:	ldr	pc, [ip, #2684]!	; 0xa7c

00011678 <__printf_chk@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #36, 20	; 0x24000
   11680:	ldr	pc, [ip, #2676]!	; 0xa74

00011684 <fileno@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #36, 20	; 0x24000
   1168c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011690 <strtoumax@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #36, 20	; 0x24000
   11698:	ldr	pc, [ip, #2660]!	; 0xa64

0001169c <__fprintf_chk@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #36, 20	; 0x24000
   116a4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116a8 <strtoimax@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #36, 20	; 0x24000
   116b0:	ldr	pc, [ip, #2644]!	; 0xa54

000116b4 <fclose@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #36, 20	; 0x24000
   116bc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c0 <fseeko64@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #36, 20	; 0x24000
   116c8:	ldr	pc, [ip, #2628]!	; 0xa44

000116cc <fcntl64@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #36, 20	; 0x24000
   116d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116d8 <setlocale@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #36, 20	; 0x24000
   116e0:	ldr	pc, [ip, #2612]!	; 0xa34

000116e4 <sigemptyset@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #36, 20	; 0x24000
   116ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f0 <toupper@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #36, 20	; 0x24000
   116f8:	ldr	pc, [ip, #2596]!	; 0xa24

000116fc <strrchr@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #36, 20	; 0x24000
   11704:	ldr	pc, [ip, #2588]!	; 0xa1c

00011708 <nl_langinfo@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #36, 20	; 0x24000
   11710:	ldr	pc, [ip, #2580]!	; 0xa14

00011714 <fopen64@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #36, 20	; 0x24000
   1171c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011720 <bindtextdomain@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #36, 20	; 0x24000
   11728:	ldr	pc, [ip, #2564]!	; 0xa04

0001172c <towupper@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #36, 20	; 0x24000
   11734:	ldr	pc, [ip, #2556]!	; 0x9fc

00011738 <fputs@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #36, 20	; 0x24000
   11740:	ldr	pc, [ip, #2548]!	; 0x9f4

00011744 <strncmp@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #36, 20	; 0x24000
   1174c:	ldr	pc, [ip, #2540]!	; 0x9ec

00011750 <abort@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #36, 20	; 0x24000
   11758:	ldr	pc, [ip, #2532]!	; 0x9e4

0001175c <close@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #36, 20	; 0x24000
   11764:	ldr	pc, [ip, #2524]!	; 0x9dc

00011768 <__snprintf_chk@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #36, 20	; 0x24000
   11770:	ldr	pc, [ip, #2516]!	; 0x9d4

00011774 <__assert_fail@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #36, 20	; 0x24000
   1177c:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00011780 <.text>:
   11780:	mov	fp, #0
   11784:	mov	lr, #0
   11788:	pop	{r1}		; (ldr r1, [sp], #4)
   1178c:	mov	r2, sp
   11790:	push	{r2}		; (str r2, [sp, #-4]!)
   11794:	push	{r0}		; (str r0, [sp, #-4]!)
   11798:	ldr	ip, [pc, #16]	; 117b0 <__assert_fail@plt+0x3c>
   1179c:	push	{ip}		; (str ip, [sp, #-4]!)
   117a0:	ldr	r0, [pc, #12]	; 117b4 <__assert_fail@plt+0x40>
   117a4:	ldr	r3, [pc, #12]	; 117b8 <__assert_fail@plt+0x44>
   117a8:	bl	115d0 <__libc_start_main@plt>
   117ac:	bl	11750 <abort@plt>
   117b0:	andeq	r4, r2, ip, ror #7
   117b4:			; <UNDEFINED> instruction: 0x000118bc
   117b8:	andeq	r4, r2, ip, lsl #7
   117bc:	ldr	r3, [pc, #20]	; 117d8 <__assert_fail@plt+0x64>
   117c0:	ldr	r2, [pc, #20]	; 117dc <__assert_fail@plt+0x68>
   117c4:	add	r3, pc, r3
   117c8:	ldr	r2, [r3, r2]
   117cc:	cmp	r2, #0
   117d0:	bxeq	lr
   117d4:	b	115e8 <__gmon_start__@plt>
   117d8:	andeq	r4, r2, r4, lsr r8
   117dc:	andeq	r0, r0, ip, asr #2
   117e0:	ldr	r0, [pc, #24]	; 11800 <__assert_fail@plt+0x8c>
   117e4:	ldr	r3, [pc, #24]	; 11804 <__assert_fail@plt+0x90>
   117e8:	cmp	r3, r0
   117ec:	bxeq	lr
   117f0:	ldr	r3, [pc, #16]	; 11808 <__assert_fail@plt+0x94>
   117f4:	cmp	r3, #0
   117f8:	bxeq	lr
   117fc:	bx	r3
   11800:	andeq	r6, r3, r8, lsr #3
   11804:	andeq	r6, r3, r8, lsr #3
   11808:	andeq	r0, r0, r0
   1180c:	ldr	r0, [pc, #36]	; 11838 <__assert_fail@plt+0xc4>
   11810:	ldr	r1, [pc, #36]	; 1183c <__assert_fail@plt+0xc8>
   11814:	sub	r1, r1, r0
   11818:	asr	r1, r1, #2
   1181c:	add	r1, r1, r1, lsr #31
   11820:	asrs	r1, r1, #1
   11824:	bxeq	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0xcc>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	andeq	r6, r3, r8, lsr #3
   1183c:	andeq	r6, r3, r8, lsr #3
   11840:	andeq	r0, r0, r0
   11844:	push	{r4, lr}
   11848:	ldr	r4, [pc, #24]	; 11868 <__assert_fail@plt+0xf4>
   1184c:	ldrb	r3, [r4]
   11850:	cmp	r3, #0
   11854:	popne	{r4, pc}
   11858:	bl	117e0 <__assert_fail@plt+0x6c>
   1185c:	mov	r3, #1
   11860:	strb	r3, [r4]
   11864:	pop	{r4, pc}
   11868:	andeq	r6, r3, r4, asr #3
   1186c:	b	1180c <__assert_fail@plt+0x98>
   11870:	push	{fp, lr}
   11874:	mov	fp, sp
   11878:	movw	r1, #17428	; 0x4414
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #2
   11888:	bl	114ec <dcgettext@plt>
   1188c:	movw	r2, #19375	; 0x4baf
   11890:	mov	r3, r0
   11894:	mov	r0, #0
   11898:	mov	r1, #0
   1189c:	movt	r2, #2
   118a0:	bl	115a0 <error@plt>
   118a4:	bl	118a8 <__assert_fail@plt+0x134>
   118a8:	push	{fp, lr}
   118ac:	mov	fp, sp
   118b0:	bl	12b3c <__assert_fail@plt+0x13c8>
   118b4:	mov	r0, #1
   118b8:	bl	1160c <exit@plt>
   118bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c0:	add	fp, sp, #28
   118c4:	sub	sp, sp, #196	; 0xc4
   118c8:	mov	r6, r0
   118cc:	ldr	r0, [r1]
   118d0:	mov	r5, r1
   118d4:	bl	13d8c <__assert_fail@plt+0x2618>
   118d8:	movw	r1, #18835	; 0x4993
   118dc:	mov	r0, #6
   118e0:	movt	r1, #2
   118e4:	bl	116d8 <setlocale@plt>
   118e8:	movw	r4, #17509	; 0x4465
   118ec:	movw	r1, #17445	; 0x4425
   118f0:	movt	r4, #2
   118f4:	movt	r1, #2
   118f8:	mov	r0, r4
   118fc:	bl	11720 <bindtextdomain@plt>
   11900:	mov	r0, r4
   11904:	mov	r4, r6
   11908:	bl	11528 <textdomain@plt>
   1190c:	movw	r0, #14608	; 0x3910
   11910:	movt	r0, #1
   11914:	bl	243f0 <__assert_fail@plt+0x12c7c>
   11918:	movw	r0, #25045	; 0x61d5
   1191c:	mov	r8, #1
   11920:	mov	sl, #0
   11924:	movw	r1, #25048	; 0x61d8
   11928:	movw	r7, #17472	; 0x4440
   1192c:	movw	r6, #20192	; 0x4ee0
   11930:	movw	r9, #25024	; 0x61c0
   11934:	movt	r0, #3
   11938:	movt	r1, #3
   1193c:	movt	r7, #2
   11940:	movt	r6, #2
   11944:	movt	r9, #3
   11948:	strb	r8, [r0]
   1194c:	movw	r0, #25032	; 0x61c8
   11950:	str	r5, [sp, #36]	; 0x24
   11954:	movt	r0, #3
   11958:	str	r5, [r0]
   1195c:	movw	r0, #25036	; 0x61cc
   11960:	movw	r5, #25044	; 0x61d4
   11964:	movt	r0, #3
   11968:	movt	r5, #3
   1196c:	str	sl, [r0]
   11970:	movw	r0, #25040	; 0x61d0
   11974:	strb	sl, [r5]
   11978:	movt	r0, #3
   1197c:	str	sl, [r0]
   11980:	movw	r0, #25046	; 0x61d6
   11984:	movt	r0, #3
   11988:	strb	sl, [r0]
   1198c:	movw	r0, #17469	; 0x443d
   11990:	movt	r0, #2
   11994:	str	r0, [r1]
   11998:	str	r4, [sp, #32]
   1199c:	b	11a6c <__assert_fail@plt+0x2f8>
   119a0:	cmp	r0, #98	; 0x62
   119a4:	bne	119ec <__assert_fail@plt+0x278>
   119a8:	ldr	r0, [r9]
   119ac:	movw	r1, #25052	; 0x61dc
   119b0:	movt	r1, #3
   119b4:	str	r0, [r1]
   119b8:	b	11a6c <__assert_fail@plt+0x2f8>
   119bc:	cmp	r0, #122	; 0x7a
   119c0:	bne	119d4 <__assert_fail@plt+0x260>
   119c4:	movw	r0, #25056	; 0x61e0
   119c8:	movt	r0, #3
   119cc:	strb	r8, [r0]
   119d0:	b	11a6c <__assert_fail@plt+0x2f8>
   119d4:	cmp	r0, #256	; 0x100
   119d8:	bne	1283c <__assert_fail@plt+0x10c8>
   119dc:	movw	r0, #25046	; 0x61d6
   119e0:	movt	r0, #3
   119e4:	strb	r8, [r0]
   119e8:	b	11a6c <__assert_fail@plt+0x2f8>
   119ec:	cmp	r0, #102	; 0x66
   119f0:	bne	1283c <__assert_fail@plt+0x10c8>
   119f4:	ldr	r0, [r9]
   119f8:	movw	r1, #25048	; 0x61d8
   119fc:	movt	r1, #3
   11a00:	str	r0, [r1]
   11a04:	b	11a6c <__assert_fail@plt+0x2f8>
   11a08:	movw	r0, #25045	; 0x61d5
   11a0c:	movt	r0, #3
   11a10:	strb	sl, [r0]
   11a14:	b	11a6c <__assert_fail@plt+0x2f8>
   11a18:	ldr	r4, [r9]
   11a1c:	movw	r1, #17483	; 0x444b
   11a20:	mov	r0, #0
   11a24:	mov	r2, #5
   11a28:	movt	r1, #2
   11a2c:	bl	114ec <dcgettext@plt>
   11a30:	mvn	r1, #-2147483648	; 0x80000000
   11a34:	mov	r2, #0
   11a38:	mov	r3, #0
   11a3c:	stm	sp, {r1, sl}
   11a40:	str	r0, [sp, #12]
   11a44:	mov	r0, r4
   11a48:	movw	r1, #18835	; 0x4993
   11a4c:	str	sl, [sp, #16]
   11a50:	ldr	r4, [sp, #32]
   11a54:	movt	r1, #2
   11a58:	str	r1, [sp, #8]
   11a5c:	bl	22e64 <__assert_fail@plt+0x116f0>
   11a60:	movw	r1, #24920	; 0x6158
   11a64:	movt	r1, #3
   11a68:	str	r0, [r1]
   11a6c:	ldr	r1, [sp, #36]	; 0x24
   11a70:	mov	r0, r4
   11a74:	mov	r2, r7
   11a78:	mov	r3, r6
   11a7c:	str	sl, [sp]
   11a80:	bl	115f4 <getopt_long@plt>
   11a84:	cmp	r0, #106	; 0x6a
   11a88:	ble	11acc <__assert_fail@plt+0x358>
   11a8c:	sub	r1, r0, #107	; 0x6b
   11a90:	cmp	r1, #8
   11a94:	bhi	119bc <__assert_fail@plt+0x248>
   11a98:	add	r0, pc, #0
   11a9c:	ldr	pc, [r0, r1, lsl #2]
   11aa0:	andeq	r1, r1, r8, lsl #20
   11aa4:	andeq	r2, r1, ip, lsr r8
   11aa8:	andeq	r2, r1, ip, lsr r8
   11aac:	andeq	r1, r1, r8, lsl sl
   11ab0:	andeq	r2, r1, ip, lsr r8
   11ab4:	andeq	r2, r1, ip, lsr r8
   11ab8:	andeq	r1, r1, r4, asr #21
   11abc:	andeq	r2, r1, ip, lsr r8
   11ac0:	andeq	r1, r1, r4, asr #21
   11ac4:	strb	r8, [r5]
   11ac8:	b	11a6c <__assert_fail@plt+0x2f8>
   11acc:	cmp	r0, #97	; 0x61
   11ad0:	bgt	119a0 <__assert_fail@plt+0x22c>
   11ad4:	cmn	r0, #1
   11ad8:	bne	124e8 <__assert_fail@plt+0xd74>
   11adc:	movw	r9, #25008	; 0x61b0
   11ae0:	ldr	r1, [sp, #32]
   11ae4:	ldr	sl, [sp, #36]	; 0x24
   11ae8:	movt	r9, #3
   11aec:	ldr	r0, [r9]
   11af0:	sub	r1, r1, r0
   11af4:	cmp	r1, #1
   11af8:	ble	1277c <__assert_fail@plt+0x1008>
   11afc:	movw	r0, #25048	; 0x61d8
   11b00:	movt	r0, #3
   11b04:	ldr	r0, [r0]
   11b08:	bl	11618 <strlen@plt>
   11b0c:	movw	r1, #25052	; 0x61dc
   11b10:	mov	r8, r0
   11b14:	movt	r1, #3
   11b18:	ldr	r0, [r1]
   11b1c:	cmp	r0, #0
   11b20:	beq	11c88 <__assert_fail@plt+0x514>
   11b24:	ldr	r6, [r1]
   11b28:	mov	r3, #0
   11b2c:	mvn	r1, #47	; 0x2f
   11b30:	mov	r2, #100	; 0x64
   11b34:	mov	r0, r6
   11b38:	b	11c40 <__assert_fail@plt+0x4cc>
   11b3c:	mov	r5, r0
   11b40:	ldrb	r7, [r5, #1]!
   11b44:	cmp	r7, #37	; 0x25
   11b48:	bne	11b54 <__assert_fail@plt+0x3e0>
   11b4c:	mov	r0, r5
   11b50:	b	11c3c <__assert_fail@plt+0x4c8>
   11b54:	tst	r3, #1
   11b58:	bne	126d4 <__assert_fail@plt+0xf60>
   11b5c:	add	r0, r0, #2
   11b60:	mov	r3, #0
   11b64:	b	11b88 <__assert_fail@plt+0x414>
   11b68:	orr	r3, r3, #1
   11b6c:	b	11b84 <__assert_fail@plt+0x410>
   11b70:	cmp	r5, #45	; 0x2d
   11b74:	cmpne	r5, #48	; 0x30
   11b78:	beq	11b84 <__assert_fail@plt+0x410>
   11b7c:	b	11ba4 <__assert_fail@plt+0x430>
   11b80:	orr	r3, r3, #2
   11b84:	ldrb	r7, [r0], #1
   11b88:	uxtb	r5, r7
   11b8c:	cmp	r5, #44	; 0x2c
   11b90:	bgt	11b70 <__assert_fail@plt+0x3fc>
   11b94:	cmp	r5, #35	; 0x23
   11b98:	beq	11b80 <__assert_fail@plt+0x40c>
   11b9c:	cmp	r5, #39	; 0x27
   11ba0:	beq	11b68 <__assert_fail@plt+0x3f4>
   11ba4:	uxtab	r5, r1, r7
   11ba8:	cmp	r5, #9
   11bac:	bhi	11bc0 <__assert_fail@plt+0x44c>
   11bb0:	ldrb	r7, [r0], #1
   11bb4:	sub	r5, r7, #48	; 0x30
   11bb8:	cmp	r5, #10
   11bbc:	bcc	11bb0 <__assert_fail@plt+0x43c>
   11bc0:	uxtb	r5, r7
   11bc4:	sub	r0, r0, #1
   11bc8:	cmp	r5, #46	; 0x2e
   11bcc:	bne	11be0 <__assert_fail@plt+0x46c>
   11bd0:	ldrb	r7, [r0, #1]!
   11bd4:	sub	r5, r7, #48	; 0x30
   11bd8:	cmp	r5, #10
   11bdc:	bcc	11bd0 <__assert_fail@plt+0x45c>
   11be0:	uxtb	r7, r7
   11be4:	mvn	r5, #1
   11be8:	cmp	r7, #110	; 0x6e
   11bec:	bgt	11c08 <__assert_fail@plt+0x494>
   11bf0:	cmp	r7, #99	; 0x63
   11bf4:	ble	11c24 <__assert_fail@plt+0x4b0>
   11bf8:	cmp	r7, #100	; 0x64
   11bfc:	cmpne	r7, #105	; 0x69
   11c00:	beq	11c30 <__assert_fail@plt+0x4bc>
   11c04:	b	1272c <__assert_fail@plt+0xfb8>
   11c08:	cmp	r7, #111	; 0x6f
   11c0c:	cmpne	r7, #120	; 0x78
   11c10:	beq	11c2c <__assert_fail@plt+0x4b8>
   11c14:	cmp	r7, #117	; 0x75
   11c18:	bne	1272c <__assert_fail@plt+0xfb8>
   11c1c:	strb	r2, [r0]
   11c20:	b	11c30 <__assert_fail@plt+0x4bc>
   11c24:	cmp	r7, #88	; 0x58
   11c28:	bne	126c0 <__assert_fail@plt+0xf4c>
   11c2c:	mvn	r5, #2
   11c30:	ands	r5, r5, r3
   11c34:	mov	r3, #1
   11c38:	bne	126f8 <__assert_fail@plt+0xf84>
   11c3c:	add	r0, r0, #1
   11c40:	ldrb	r7, [r0]
   11c44:	cmp	r7, #37	; 0x25
   11c48:	beq	11b3c <__assert_fail@plt+0x3c8>
   11c4c:	cmp	r7, #0
   11c50:	bne	11c3c <__assert_fail@plt+0x4c8>
   11c54:	tst	r3, #1
   11c58:	beq	127cc <__assert_fail@plt+0x1058>
   11c5c:	mvn	r0, #-2147483648	; 0x80000000
   11c60:	mov	r1, #0
   11c64:	mov	r2, #1
   11c68:	mvn	r3, #0
   11c6c:	str	r6, [sp]
   11c70:	str	r0, [sp, #4]
   11c74:	mov	r0, #0
   11c78:	bl	11768 <__snprintf_chk@plt>
   11c7c:	cmn	r0, #1
   11c80:	bgt	11ca0 <__assert_fail@plt+0x52c>
   11c84:	b	12750 <__assert_fail@plt+0xfdc>
   11c88:	movw	r2, #24920	; 0x6158
   11c8c:	mov	r0, #11
   11c90:	movt	r2, #3
   11c94:	ldr	r1, [r2]
   11c98:	cmp	r1, #11
   11c9c:	ldrcs	r0, [r2]
   11ca0:	add	r0, r8, r0
   11ca4:	add	r0, r0, #1
   11ca8:	cmp	r0, r8
   11cac:	bvs	12750 <__assert_fail@plt+0xfdc>
   11cb0:	bl	22920 <__assert_fail@plt+0x111ac>
   11cb4:	movw	r1, #25060	; 0x61e4
   11cb8:	movt	r1, #3
   11cbc:	str	r0, [r1]
   11cc0:	movw	r1, #20572	; 0x505c
   11cc4:	ldr	r0, [r9]
   11cc8:	movt	r1, #2
   11ccc:	add	r4, r0, #1
   11cd0:	str	r4, [r9]
   11cd4:	ldr	r6, [sl, r0, lsl #2]
   11cd8:	mov	r0, r6
   11cdc:	bl	11420 <strcmp@plt>
   11ce0:	cmp	r0, #0
   11ce4:	beq	11d78 <__assert_fail@plt+0x604>
   11ce8:	mov	r0, #0
   11cec:	mov	r1, r6
   11cf0:	mov	r2, #0
   11cf4:	mov	r3, #0
   11cf8:	bl	13a94 <__assert_fail@plt+0x2320>
   11cfc:	cmp	r0, #0
   11d00:	blt	127d8 <__assert_fail@plt+0x1064>
   11d04:	ldr	r4, [r9]
   11d08:	b	11d78 <__assert_fail@plt+0x604>
   11d0c:	mov	r0, #0
   11d10:	cmp	r1, #3
   11d14:	strb	r0, [r6, r8]
   11d18:	add	r0, r6, #1
   11d1c:	ldrbeq	r1, [r0]
   11d20:	cmpeq	r1, #42	; 0x2a
   11d24:	beq	11d64 <__assert_fail@plt+0x5f0>
   11d28:	movw	r1, #18835	; 0x4993
   11d2c:	mov	r2, #10
   11d30:	add	r3, sp, #40	; 0x28
   11d34:	movt	r1, #2
   11d38:	str	r1, [sp]
   11d3c:	mov	r1, #0
   11d40:	bl	234d8 <__assert_fail@plt+0x11d64>
   11d44:	cmp	r0, #0
   11d48:	bne	12680 <__assert_fail@plt+0xf0c>
   11d4c:	ldr	r1, [sp, #44]	; 0x2c
   11d50:	cmn	r1, #1
   11d54:	ble	12680 <__assert_fail@plt+0xf0c>
   11d58:	ldr	r0, [sp, #40]	; 0x28
   11d5c:	strd	r0, [r7, #16]
   11d60:	b	11d6c <__assert_fail@plt+0x5f8>
   11d64:	mov	r0, #1
   11d68:	strb	r0, [r7, #28]
   11d6c:	mov	r0, #125	; 0x7d
   11d70:	add	r4, r4, #2
   11d74:	strb	r0, [r6, r8]
   11d78:	ldr	r9, [sp, #32]
   11d7c:	b	11d84 <__assert_fail@plt+0x610>
   11d80:	mov	r4, r5
   11d84:	cmp	r4, r9
   11d88:	bge	11fa8 <__assert_fail@plt+0x834>
   11d8c:	ldr	r0, [sl, r4, lsl #2]
   11d90:	ldrb	r8, [r0]
   11d94:	cmp	r8, #47	; 0x2f
   11d98:	cmpne	r8, #37	; 0x25
   11d9c:	bne	11e80 <__assert_fail@plt+0x70c>
   11da0:	add	sl, r0, #1
   11da4:	mov	r9, r0
   11da8:	mov	r1, r8
   11dac:	mov	r0, sl
   11db0:	bl	116fc <strrchr@plt>
   11db4:	cmp	r0, #0
   11db8:	beq	12550 <__assert_fail@plt+0xddc>
   11dbc:	mov	r6, r0
   11dc0:	bl	12e88 <__assert_fail@plt+0x1714>
   11dc4:	mov	r7, r0
   11dc8:	str	r4, [r0, #24]
   11dcc:	mov	r0, #1
   11dd0:	mov	r1, #0
   11dd4:	mov	r5, r4
   11dd8:	strb	r0, [r7, #30]
   11ddc:	sub	r0, r8, #37	; 0x25
   11de0:	str	r1, [r7, #36]	; 0x24
   11de4:	mov	r4, r7
   11de8:	mov	r8, #0
   11dec:	clz	r0, r0
   11df0:	lsr	r0, r0, #5
   11df4:	strb	r0, [r7, #29]
   11df8:	mov	r0, #256	; 0x100
   11dfc:	str	r1, [r4, #32]!
   11e00:	bl	22908 <__assert_fail@plt+0x11194>
   11e04:	str	r0, [r7, #48]	; 0x30
   11e08:	movw	r0, #25588	; 0x63f4
   11e0c:	movw	r1, #710	; 0x2c6
   11e10:	str	r8, [r7, #52]	; 0x34
   11e14:	mov	r2, r4
   11e18:	mov	r8, r9
   11e1c:	movt	r0, #3
   11e20:	str	r1, [r0]
   11e24:	mvn	r0, r9
   11e28:	add	r1, r6, r0
   11e2c:	mov	r0, sl
   11e30:	bl	158c8 <__assert_fail@plt+0x4154>
   11e34:	cmp	r0, #0
   11e38:	bne	1257c <__assert_fail@plt+0xe08>
   11e3c:	ldrb	r0, [r6, #1]!
   11e40:	ldr	sl, [sp, #36]	; 0x24
   11e44:	cmp	r0, #0
   11e48:	beq	11f48 <__assert_fail@plt+0x7d4>
   11e4c:	movw	r0, #18835	; 0x4993
   11e50:	mov	r1, #0
   11e54:	mov	r2, #10
   11e58:	mov	r3, r7
   11e5c:	movt	r0, #2
   11e60:	str	r0, [sp]
   11e64:	mov	r0, r6
   11e68:	bl	22e6c <__assert_fail@plt+0x116f8>
   11e6c:	ldr	r9, [sp, #32]
   11e70:	cmp	r0, #0
   11e74:	mov	r4, r5
   11e78:	beq	11f50 <__assert_fail@plt+0x7dc>
   11e7c:	b	125bc <__assert_fail@plt+0xe48>
   11e80:	bl	12e88 <__assert_fail@plt+0x1714>
   11e84:	str	r4, [r0, #24]
   11e88:	mov	r7, r0
   11e8c:	movw	r1, #18835	; 0x4993
   11e90:	mov	r2, #10
   11e94:	sub	r3, fp, #40	; 0x28
   11e98:	ldr	r0, [sl, r4, lsl #2]
   11e9c:	movt	r1, #2
   11ea0:	str	r1, [sp]
   11ea4:	mov	r1, #0
   11ea8:	bl	234d8 <__assert_fail@plt+0x11d64>
   11eac:	cmp	r0, #0
   11eb0:	bne	125dc <__assert_fail@plt+0xe68>
   11eb4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11eb8:	cmn	r1, #1
   11ebc:	ble	125dc <__assert_fail@plt+0xe68>
   11ec0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11ec4:	orrs	r2, r0, r1
   11ec8:	beq	12610 <__assert_fail@plt+0xe9c>
   11ecc:	movw	r2, #25216	; 0x6280
   11ed0:	movt	r2, #3
   11ed4:	ldrd	r2, [r2]
   11ed8:	subs	r6, r0, r2
   11edc:	sbcs	r6, r1, r3
   11ee0:	bcc	12630 <__assert_fail@plt+0xebc>
   11ee4:	eor	r2, r0, r2
   11ee8:	eor	r3, r1, r3
   11eec:	orrs	r2, r2, r3
   11ef0:	bne	11f34 <__assert_fail@plt+0x7c0>
   11ef4:	movw	r1, #19378	; 0x4bb2
   11ef8:	mov	r0, #0
   11efc:	mov	r2, #5
   11f00:	movt	r1, #2
   11f04:	bl	114ec <dcgettext@plt>
   11f08:	mov	r5, r0
   11f0c:	ldr	r0, [sl, r4, lsl #2]
   11f10:	bl	15790 <__assert_fail@plt+0x401c>
   11f14:	ldr	r9, [sp, #32]
   11f18:	mov	r3, r0
   11f1c:	mov	r0, #0
   11f20:	mov	r1, #0
   11f24:	mov	r2, r5
   11f28:	bl	115a0 <error@plt>
   11f2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f30:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11f34:	movw	r2, #25216	; 0x6280
   11f38:	movt	r2, #3
   11f3c:	strd	r0, [r2]
   11f40:	strd	r0, [r7, #8]
   11f44:	b	11f50 <__assert_fail@plt+0x7dc>
   11f48:	ldr	r9, [sp, #32]
   11f4c:	mov	r4, r5
   11f50:	add	r5, r4, #1
   11f54:	cmp	r5, r9
   11f58:	bge	11d80 <__assert_fail@plt+0x60c>
   11f5c:	ldr	r6, [sl, r5, lsl #2]
   11f60:	ldrb	r0, [r6]
   11f64:	cmp	r0, #123	; 0x7b
   11f68:	bne	11d80 <__assert_fail@plt+0x60c>
   11f6c:	mov	r0, r6
   11f70:	bl	11618 <strlen@plt>
   11f74:	sub	r8, r0, #1
   11f78:	mov	r1, r0
   11f7c:	ldrb	r0, [r6, r8]
   11f80:	cmp	r0, #125	; 0x7d
   11f84:	beq	11d0c <__assert_fail@plt+0x598>
   11f88:	movw	r1, #19546	; 0x4c5a
   11f8c:	mov	r0, #0
   11f90:	mov	r2, #5
   11f94:	movt	r1, #2
   11f98:	bl	114ec <dcgettext@plt>
   11f9c:	mov	r4, r0
   11fa0:	mov	r0, r6
   11fa4:	b	126a8 <__assert_fail@plt+0xf34>
   11fa8:	movw	r8, #25064	; 0x61e8
   11fac:	movt	r8, #3
   11fb0:	mov	r0, r8
   11fb4:	bl	116e4 <sigemptyset@plt>
   11fb8:	movw	r7, #20368	; 0x4f90
   11fbc:	mov	r5, #0
   11fc0:	add	r4, sp, #40	; 0x28
   11fc4:	movt	r7, #2
   11fc8:	ldr	r6, [r7, r5, lsl #2]
   11fcc:	mov	r1, #0
   11fd0:	mov	r2, r4
   11fd4:	mov	r0, r6
   11fd8:	bl	1154c <sigaction@plt>
   11fdc:	ldr	r0, [sp, #40]	; 0x28
   11fe0:	cmp	r0, #1
   11fe4:	beq	11ff4 <__assert_fail@plt+0x880>
   11fe8:	mov	r0, r8
   11fec:	mov	r1, r6
   11ff0:	bl	115c4 <sigaddset@plt>
   11ff4:	add	r5, r5, #1
   11ff8:	cmp	r5, #11
   11ffc:	bne	11fc8 <__assert_fail@plt+0x854>
   12000:	movw	r0, #11024	; 0x2b10
   12004:	movw	r8, #25064	; 0x61e8
   12008:	mov	r2, #128	; 0x80
   1200c:	movt	r0, #1
   12010:	movt	r8, #3
   12014:	str	r0, [sp, #40]	; 0x28
   12018:	add	r0, r4, #4
   1201c:	mov	r1, r8
   12020:	bl	1148c <memcpy@plt>
   12024:	mov	r5, #0
   12028:	str	r5, [sp, #172]	; 0xac
   1202c:	ldr	r6, [r7, r5, lsl #2]
   12030:	mov	r0, r8
   12034:	mov	r1, r6
   12038:	bl	1151c <sigismember@plt>
   1203c:	cmp	r0, #0
   12040:	beq	12054 <__assert_fail@plt+0x8e0>
   12044:	mov	r0, r6
   12048:	mov	r1, r4
   1204c:	mov	r2, #0
   12050:	bl	1154c <sigaction@plt>
   12054:	add	r5, r5, #1
   12058:	cmp	r5, #11
   1205c:	bne	1202c <__assert_fail@plt+0x8b8>
   12060:	movw	r0, #25040	; 0x61d0
   12064:	movt	r0, #3
   12068:	ldr	r0, [r0]
   1206c:	cmp	r0, #1
   12070:	blt	123d4 <__assert_fail@plt+0xc60>
   12074:	movw	r0, #25036	; 0x61cc
   12078:	movw	r5, #25232	; 0x6290
   1207c:	mov	r4, #0
   12080:	movt	r0, #3
   12084:	movt	r5, #3
   12088:	ldr	r0, [r0]
   1208c:	add	r1, r0, r4, lsl #6
   12090:	str	r4, [sp, #24]
   12094:	ldrb	r1, [r1, #30]
   12098:	cmp	r1, #0
   1209c:	beq	122a0 <__assert_fail@plt+0xb2c>
   120a0:	mov	r8, #0
   120a4:	mov	r9, #0
   120a8:	b	12278 <__assert_fail@plt+0xb04>
   120ac:	ldrb	r4, [r6, #29]
   120b0:	cmp	r4, #0
   120b4:	bleq	12f2c <__assert_fail@plt+0x17b8>
   120b8:	ldr	r0, [r6, #4]
   120bc:	cmn	r0, #1
   120c0:	ble	12148 <__assert_fail@plt+0x9d4>
   120c4:	ldrd	r0, [r5]
   120c8:	adds	r0, r0, #1
   120cc:	adc	r1, r1, #0
   120d0:	strd	r0, [r5]
   120d4:	bl	13030 <__assert_fail@plt+0x18bc>
   120d8:	cmp	r0, #0
   120dc:	beq	12480 <__assert_fail@plt+0xd0c>
   120e0:	add	r7, r6, #32
   120e4:	ldr	r2, [r0]
   120e8:	ldr	r1, [r0, #4]
   120ec:	sub	r0, r2, #1
   120f0:	ldrb	r3, [r1, r0]
   120f4:	cmp	r3, #10
   120f8:	mov	r3, #0
   120fc:	moveq	r2, r0
   12100:	mov	r0, #0
   12104:	str	r0, [sp, #4]
   12108:	mov	r0, r7
   1210c:	str	r2, [sp]
   12110:	bl	18b2c <__assert_fail@plt+0x73b8>
   12114:	cmn	r0, #1
   12118:	bne	121a0 <__assert_fail@plt+0xa2c>
   1211c:	bl	13238 <__assert_fail@plt+0x1ac4>
   12120:	cmp	r4, #0
   12124:	bleq	13308 <__assert_fail@plt+0x1b94>
   12128:	ldrd	r0, [r5]
   1212c:	adds	r0, r0, #1
   12130:	adc	r1, r1, #0
   12134:	strd	r0, [r5]
   12138:	bl	13030 <__assert_fail@plt+0x18bc>
   1213c:	cmp	r0, #0
   12140:	bne	120e4 <__assert_fail@plt+0x970>
   12144:	b	12480 <__assert_fail@plt+0xd0c>
   12148:	add	r7, r6, #32
   1214c:	ldrd	r0, [r5]
   12150:	adds	r0, r0, #1
   12154:	adc	r1, r1, #0
   12158:	strd	r0, [r5]
   1215c:	bl	13030 <__assert_fail@plt+0x18bc>
   12160:	cmp	r0, #0
   12164:	beq	12480 <__assert_fail@plt+0xd0c>
   12168:	ldr	r2, [r0]
   1216c:	ldr	r1, [r0, #4]
   12170:	sub	r0, r2, #1
   12174:	ldrb	r3, [r1, r0]
   12178:	cmp	r3, #10
   1217c:	mov	r3, #0
   12180:	moveq	r2, r0
   12184:	mov	r0, #0
   12188:	str	r0, [sp, #4]
   1218c:	mov	r0, r7
   12190:	str	r2, [sp]
   12194:	bl	18b2c <__assert_fail@plt+0x73b8>
   12198:	cmn	r0, #1
   1219c:	beq	1214c <__assert_fail@plt+0x9d8>
   121a0:	cmn	r0, #2
   121a4:	beq	124a8 <__assert_fail@plt+0xd34>
   121a8:	ldr	r0, [r6, #24]
   121ac:	str	r9, [sp, #32]
   121b0:	str	r8, [sp, #36]	; 0x24
   121b4:	str	r6, [sp, #28]
   121b8:	str	r0, [sp, #20]
   121bc:	ldrd	r0, [r5]
   121c0:	ldrd	r2, [r6]
   121c4:	adds	r6, r2, r0
   121c8:	adc	r7, r3, r1
   121cc:	bl	137bc <__assert_fail@plt+0x2048>
   121d0:	subs	r2, r6, r0
   121d4:	sbcs	r2, r7, r1
   121d8:	blt	12428 <__assert_fail@plt+0xcb4>
   121dc:	subs	r8, r6, r0
   121e0:	sbc	r9, r7, r1
   121e4:	subs	r0, r8, #1
   121e8:	sbcs	r0, r9, #0
   121ec:	blt	12220 <__assert_fail@plt+0xaac>
   121f0:	mov	sl, #0
   121f4:	mov	r5, #0
   121f8:	bl	13238 <__assert_fail@plt+0x1ac4>
   121fc:	cmp	r0, #0
   12200:	beq	12428 <__assert_fail@plt+0xcb4>
   12204:	cmp	r4, #0
   12208:	bleq	13308 <__assert_fail@plt+0x1b94>
   1220c:	adds	sl, sl, #1
   12210:	adc	r5, r5, #0
   12214:	subs	r0, sl, r8
   12218:	sbcs	r0, r5, r9
   1221c:	blt	121f8 <__assert_fail@plt+0xa84>
   12220:	cmp	r4, #0
   12224:	bleq	12b84 <__assert_fail@plt+0x1410>
   12228:	ldr	r0, [sp, #28]
   1222c:	movw	r5, #25232	; 0x6290
   12230:	ldr	r4, [sp, #24]
   12234:	ldr	r8, [sp, #36]	; 0x24
   12238:	ldr	r9, [sp, #32]
   1223c:	movt	r5, #3
   12240:	ldrd	r0, [r0]
   12244:	subs	r0, r0, #1
   12248:	sbcs	r0, r1, #0
   1224c:	movw	r0, #25046	; 0x61d6
   12250:	strdge	r6, [r5]
   12254:	movt	r0, #3
   12258:	ldrb	r0, [r0]
   1225c:	cmp	r0, #1
   12260:	bleq	13238 <__assert_fail@plt+0x1ac4>
   12264:	movw	r0, #25036	; 0x61cc
   12268:	adds	r8, r8, #1
   1226c:	movt	r0, #3
   12270:	adc	r9, r9, #0
   12274:	ldr	r0, [r0]
   12278:	add	r6, r0, r4, lsl #6
   1227c:	mov	sl, r6
   12280:	ldrb	r1, [sl, #28]!
   12284:	cmp	r1, #0
   12288:	bne	120ac <__assert_fail@plt+0x938>
   1228c:	ldrd	r2, [r6, #16]
   12290:	subs	r1, r2, r8
   12294:	sbcs	r1, r3, r9
   12298:	bge	120ac <__assert_fail@plt+0x938>
   1229c:	b	123bc <__assert_fail@plt+0xc48>
   122a0:	mov	r6, #0
   122a4:	mov	sl, #0
   122a8:	b	1239c <__assert_fail@plt+0xc28>
   122ac:	str	r6, [sp, #36]	; 0x24
   122b0:	str	sl, [sp, #32]
   122b4:	str	r7, [sp, #28]
   122b8:	adds	r6, r6, #1
   122bc:	ldr	r4, [r7, #8]
   122c0:	ldr	r7, [r7, #12]
   122c4:	adc	sl, sl, #0
   122c8:	bl	12f2c <__assert_fail@plt+0x17b8>
   122cc:	ldrd	r0, [r5]
   122d0:	adds	r0, r0, #1
   122d4:	adc	r1, r1, #0
   122d8:	bl	13030 <__assert_fail@plt+0x18bc>
   122dc:	cmp	r0, #0
   122e0:	bne	122f8 <__assert_fail@plt+0xb84>
   122e4:	movw	r0, #25046	; 0x61d6
   122e8:	movt	r0, #3
   122ec:	ldrb	r0, [r0]
   122f0:	cmp	r0, #1
   122f4:	beq	12470 <__assert_fail@plt+0xcfc>
   122f8:	umull	r8, r0, r4, r6
   122fc:	mla	r0, r4, sl, r0
   12300:	mla	r9, r7, r6, r0
   12304:	bl	137bc <__assert_fail@plt+0x2048>
   12308:	mov	r7, r0
   1230c:	subs	r0, r0, r8
   12310:	sbcs	r0, r1, r9
   12314:	bge	12340 <__assert_fail@plt+0xbcc>
   12318:	mov	r4, r1
   1231c:	adds	r7, r7, #1
   12320:	adc	r4, r4, #0
   12324:	bl	13238 <__assert_fail@plt+0x1ac4>
   12328:	cmp	r0, #0
   1232c:	beq	12470 <__assert_fail@plt+0xcfc>
   12330:	bl	13308 <__assert_fail@plt+0x1b94>
   12334:	subs	r0, r7, r8
   12338:	sbcs	r0, r4, r9
   1233c:	blt	1231c <__assert_fail@plt+0xba8>
   12340:	bl	12b84 <__assert_fail@plt+0x1410>
   12344:	movw	r0, #25046	; 0x61d6
   12348:	movt	r0, #3
   1234c:	ldrb	r0, [r0]
   12350:	cmp	r0, #1
   12354:	bleq	13238 <__assert_fail@plt+0x1ac4>
   12358:	movw	r5, #25232	; 0x6290
   1235c:	movt	r5, #3
   12360:	ldrd	r0, [r5]
   12364:	adds	r0, r0, #1
   12368:	adc	r1, r1, #0
   1236c:	bl	13030 <__assert_fail@plt+0x18bc>
   12370:	ldr	r4, [sp, #24]
   12374:	cmp	r0, #0
   12378:	bne	12390 <__assert_fail@plt+0xc1c>
   1237c:	movw	r0, #25046	; 0x61d6
   12380:	movt	r0, #3
   12384:	ldrb	r0, [r0]
   12388:	cmp	r0, #0
   1238c:	beq	12470 <__assert_fail@plt+0xcfc>
   12390:	movw	r0, #25036	; 0x61cc
   12394:	movt	r0, #3
   12398:	ldr	r0, [r0]
   1239c:	add	r7, r0, r4, lsl #6
   123a0:	ldrb	r1, [r7, #28]
   123a4:	cmp	r1, #0
   123a8:	bne	122ac <__assert_fail@plt+0xb38>
   123ac:	ldrd	r2, [r7, #16]
   123b0:	subs	r1, r2, r6
   123b4:	sbcs	r1, r3, sl
   123b8:	bge	122ac <__assert_fail@plt+0xb38>
   123bc:	movw	r1, #25040	; 0x61d0
   123c0:	add	r4, r4, #1
   123c4:	movt	r1, #3
   123c8:	ldr	r1, [r1]
   123cc:	cmp	r4, r1
   123d0:	blt	1208c <__assert_fail@plt+0x918>
   123d4:	bl	12f2c <__assert_fail@plt+0x17b8>
   123d8:	bl	13014 <__assert_fail@plt+0x18a0>
   123dc:	bl	12b84 <__assert_fail@plt+0x1410>
   123e0:	mov	r0, #0
   123e4:	bl	1175c <close@plt>
   123e8:	cmp	r0, #0
   123ec:	moveq	r0, #0
   123f0:	subeq	sp, fp, #28
   123f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f8:	bl	11630 <__errno_location@plt>
   123fc:	ldr	r4, [r0]
   12400:	movw	r1, #17588	; 0x44b4
   12404:	mov	r0, #0
   12408:	mov	r2, #5
   1240c:	movt	r1, #2
   12410:	bl	114ec <dcgettext@plt>
   12414:	mov	r2, r0
   12418:	mov	r0, #0
   1241c:	mov	r1, r4
   12420:	bl	115a0 <error@plt>
   12424:	bl	118a8 <__assert_fail@plt+0x134>
   12428:	movw	r1, #19775	; 0x4d3f
   1242c:	mov	r0, #0
   12430:	mov	r2, #5
   12434:	movt	r1, #2
   12438:	bl	114ec <dcgettext@plt>
   1243c:	mov	r4, r0
   12440:	movw	r0, #25032	; 0x61c8
   12444:	ldr	r1, [sp, #20]
   12448:	movt	r0, #3
   1244c:	ldr	r0, [r0]
   12450:	ldr	r0, [r0, r1, lsl #2]
   12454:	bl	15790 <__assert_fail@plt+0x401c>
   12458:	mov	r3, r0
   1245c:	mov	r0, #0
   12460:	mov	r1, #0
   12464:	mov	r2, r4
   12468:	bl	115a0 <error@plt>
   1246c:	bl	118a8 <__assert_fail@plt+0x134>
   12470:	ldr	r0, [sp, #28]
   12474:	ldr	r2, [sp, #36]	; 0x24
   12478:	ldr	r3, [sp, #32]
   1247c:	bl	1381c <__assert_fail@plt+0x20a8>
   12480:	ldrb	r0, [sl]
   12484:	cmp	r0, #0
   12488:	bne	124d0 <__assert_fail@plt+0xd5c>
   1248c:	cmp	r4, #0
   12490:	mov	r3, r9
   12494:	mov	r2, r8
   12498:	mov	r0, r6
   1249c:	movwne	r4, #1
   124a0:	str	r4, [sp]
   124a4:	bl	13148 <__assert_fail@plt+0x19d4>
   124a8:	movw	r1, #19624	; 0x4ca8
   124ac:	mov	r0, #0
   124b0:	mov	r2, #5
   124b4:	movt	r1, #2
   124b8:	bl	114ec <dcgettext@plt>
   124bc:	mov	r2, r0
   124c0:	mov	r0, #0
   124c4:	mov	r1, #0
   124c8:	bl	115a0 <error@plt>
   124cc:	bl	118a8 <__assert_fail@plt+0x134>
   124d0:	cmp	r4, #0
   124d4:	bne	124e0 <__assert_fail@plt+0xd6c>
   124d8:	bl	13014 <__assert_fail@plt+0x18a0>
   124dc:	bl	12b84 <__assert_fail@plt+0x1410>
   124e0:	mov	r0, #0
   124e4:	bl	1160c <exit@plt>
   124e8:	cmn	r0, #3
   124ec:	bne	12540 <__assert_fail@plt+0xdcc>
   124f0:	movw	r0, #24924	; 0x615c
   124f4:	movw	r2, #17531	; 0x447b
   124f8:	mov	r1, #0
   124fc:	movw	r7, #17519	; 0x446f
   12500:	movt	r0, #3
   12504:	movt	r2, #2
   12508:	str	r1, [sp, #8]
   1250c:	movw	r1, #17498	; 0x445a
   12510:	movt	r7, #2
   12514:	ldr	r3, [r0]
   12518:	movw	r0, #25020	; 0x61bc
   1251c:	str	r2, [sp, #4]
   12520:	movw	r2, #17505	; 0x4461
   12524:	movt	r1, #2
   12528:	str	r7, [sp]
   1252c:	movt	r0, #3
   12530:	movt	r2, #2
   12534:	ldr	r0, [r0]
   12538:	bl	22800 <__assert_fail@plt+0x1108c>
   1253c:	b	124e0 <__assert_fail@plt+0xd6c>
   12540:	cmn	r0, #2
   12544:	bne	1283c <__assert_fail@plt+0x10c8>
   12548:	mov	r0, #0
   1254c:	bl	12844 <__assert_fail@plt+0x10d0>
   12550:	movw	r1, #19439	; 0x4bef
   12554:	mov	r0, #0
   12558:	mov	r2, #5
   1255c:	movt	r1, #2
   12560:	bl	114ec <dcgettext@plt>
   12564:	mov	r2, r0
   12568:	mov	r0, #1
   1256c:	mov	r1, #0
   12570:	mov	r3, r9
   12574:	str	r8, [sp]
   12578:	bl	115a0 <error@plt>
   1257c:	movw	r1, #19474	; 0x4c12
   12580:	mov	r4, r0
   12584:	mov	r0, #0
   12588:	mov	r2, #5
   1258c:	movt	r1, #2
   12590:	bl	114ec <dcgettext@plt>
   12594:	mov	r6, r0
   12598:	mov	r0, r8
   1259c:	bl	15790 <__assert_fail@plt+0x401c>
   125a0:	mov	r3, r0
   125a4:	mov	r0, #0
   125a8:	mov	r1, #0
   125ac:	mov	r2, r6
   125b0:	str	r4, [sp]
   125b4:	bl	115a0 <error@plt>
   125b8:	bl	118a8 <__assert_fail@plt+0x134>
   125bc:	movw	r1, #19509	; 0x4c35
   125c0:	mov	r0, #0
   125c4:	mov	r2, #5
   125c8:	movt	r1, #2
   125cc:	bl	114ec <dcgettext@plt>
   125d0:	mov	r4, r0
   125d4:	mov	r0, r8
   125d8:	b	126a8 <__assert_fail@plt+0xf34>
   125dc:	movw	r1, #19259	; 0x4b3b
   125e0:	mov	r0, #0
   125e4:	mov	r2, #5
   125e8:	movt	r1, #2
   125ec:	bl	114ec <dcgettext@plt>
   125f0:	mov	r5, r0
   125f4:	ldr	r0, [sl, r4, lsl #2]
   125f8:	bl	15790 <__assert_fail@plt+0x401c>
   125fc:	mov	r3, r0
   12600:	mov	r0, #1
   12604:	mov	r1, #0
   12608:	mov	r2, r5
   1260c:	bl	115a0 <error@plt>
   12610:	movw	r1, #19279	; 0x4b4f
   12614:	mov	r0, #0
   12618:	mov	r2, #5
   1261c:	movt	r1, #2
   12620:	bl	114ec <dcgettext@plt>
   12624:	ldr	r3, [sl, r4, lsl #2]
   12628:	mov	r2, r0
   1262c:	b	12720 <__assert_fail@plt+0xfac>
   12630:	movw	r1, #19321	; 0x4b79
   12634:	mov	r0, #0
   12638:	mov	r2, #5
   1263c:	movt	r1, #2
   12640:	bl	114ec <dcgettext@plt>
   12644:	mov	r6, r0
   12648:	ldr	r0, [sl, r4, lsl #2]
   1264c:	bl	15790 <__assert_fail@plt+0x401c>
   12650:	mov	r5, r0
   12654:	movw	r0, #25216	; 0x6280
   12658:	add	r2, sp, #40	; 0x28
   1265c:	movt	r0, #3
   12660:	ldrd	r0, [r0]
   12664:	bl	13cd0 <__assert_fail@plt+0x255c>
   12668:	str	r0, [sp]
   1266c:	mov	r0, #1
   12670:	mov	r1, #0
   12674:	mov	r2, r6
   12678:	mov	r3, r5
   1267c:	bl	115a0 <error@plt>
   12680:	movw	r1, #19582	; 0x4c7e
   12684:	mov	r0, #0
   12688:	mov	r2, #5
   1268c:	movt	r1, #2
   12690:	bl	114ec <dcgettext@plt>
   12694:	mov	r4, r0
   12698:	movw	r0, #25032	; 0x61c8
   1269c:	movt	r0, #3
   126a0:	ldr	r0, [r0]
   126a4:	ldr	r0, [r0, r5, lsl #2]
   126a8:	bl	15790 <__assert_fail@plt+0x401c>
   126ac:	mov	r3, r0
   126b0:	mov	r0, #1
   126b4:	mov	r1, #0
   126b8:	mov	r2, r4
   126bc:	bl	115a0 <error@plt>
   126c0:	cmp	r7, #0
   126c4:	bne	1272c <__assert_fail@plt+0xfb8>
   126c8:	movw	r1, #19054	; 0x4a6e
   126cc:	movt	r1, #2
   126d0:	b	126dc <__assert_fail@plt+0xf68>
   126d4:	movw	r1, #18960	; 0x4a10
   126d8:	movt	r1, #2
   126dc:	mov	r0, #0
   126e0:	mov	r2, #5
   126e4:	bl	114ec <dcgettext@plt>
   126e8:	mov	r2, r0
   126ec:	mov	r0, #1
   126f0:	mov	r1, #0
   126f4:	bl	115a0 <error@plt>
   126f8:	movw	r1, #19182	; 0x4aee
   126fc:	mov	r0, #0
   12700:	mov	r2, #5
   12704:	movt	r1, #2
   12708:	bl	114ec <dcgettext@plt>
   1270c:	mov	r3, #35	; 0x23
   12710:	tst	r5, #2
   12714:	mov	r2, r0
   12718:	str	r7, [sp]
   1271c:	movweq	r3, #39	; 0x27
   12720:	mov	r0, #1
   12724:	mov	r1, #0
   12728:	bl	115a0 <error@plt>
   1272c:	bl	11600 <__ctype_b_loc@plt>
   12730:	ldr	r0, [r0]
   12734:	add	r0, r0, r7, lsl #1
   12738:	ldrb	r0, [r0, #1]
   1273c:	tst	r0, #64	; 0x40
   12740:	bne	12754 <__assert_fail@plt+0xfe0>
   12744:	movw	r1, #19136	; 0x4ac0
   12748:	movt	r1, #2
   1274c:	b	1275c <__assert_fail@plt+0xfe8>
   12750:	bl	11870 <__assert_fail@plt+0xfc>
   12754:	movw	r1, #19093	; 0x4a95
   12758:	movt	r1, #2
   1275c:	mov	r0, #0
   12760:	mov	r2, #5
   12764:	bl	114ec <dcgettext@plt>
   12768:	mov	r2, r0
   1276c:	mov	r0, #1
   12770:	mov	r1, #0
   12774:	mov	r3, r7
   12778:	bl	115a0 <error@plt>
   1277c:	ldr	r1, [sp, #32]
   12780:	cmp	r0, r1
   12784:	bge	12818 <__assert_fail@plt+0x10a4>
   12788:	movw	r1, #17563	; 0x449b
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	movt	r1, #2
   12798:	bl	114ec <dcgettext@plt>
   1279c:	mov	r4, r0
   127a0:	ldr	r0, [sp, #36]	; 0x24
   127a4:	ldr	r1, [sp, #32]
   127a8:	add	r0, r0, r1, lsl #2
   127ac:	ldr	r0, [r0, #-4]
   127b0:	bl	15790 <__assert_fail@plt+0x401c>
   127b4:	mov	r3, r0
   127b8:	mov	r0, #0
   127bc:	mov	r1, #0
   127c0:	mov	r2, r4
   127c4:	bl	115a0 <error@plt>
   127c8:	b	1283c <__assert_fail@plt+0x10c8>
   127cc:	movw	r1, #19008	; 0x4a40
   127d0:	movt	r1, #2
   127d4:	b	126dc <__assert_fail@plt+0xf68>
   127d8:	bl	11630 <__errno_location@plt>
   127dc:	ldr	r4, [r0]
   127e0:	movw	r1, #19232	; 0x4b20
   127e4:	mov	r0, #0
   127e8:	mov	r2, #5
   127ec:	movt	r1, #2
   127f0:	bl	114ec <dcgettext@plt>
   127f4:	mov	r5, r0
   127f8:	mov	r0, #4
   127fc:	mov	r1, r6
   12800:	bl	15458 <__assert_fail@plt+0x3ce4>
   12804:	mov	r3, r0
   12808:	mov	r0, #1
   1280c:	mov	r1, r4
   12810:	mov	r2, r5
   12814:	bl	115a0 <error@plt>
   12818:	movw	r1, #17547	; 0x448b
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	movt	r1, #2
   12828:	bl	114ec <dcgettext@plt>
   1282c:	mov	r2, r0
   12830:	mov	r0, #0
   12834:	mov	r1, #0
   12838:	bl	115a0 <error@plt>
   1283c:	mov	r0, #1
   12840:	bl	12844 <__assert_fail@plt+0x10d0>
   12844:	push	{fp, lr}
   12848:	mov	fp, sp
   1284c:	sub	sp, sp, #56	; 0x38
   12850:	mov	r8, r0
   12854:	cmp	r0, #0
   12858:	bne	12ad0 <__assert_fail@plt+0x135c>
   1285c:	movw	r1, #17638	; 0x44e6
   12860:	mov	r0, #0
   12864:	mov	r2, #5
   12868:	movt	r1, #2
   1286c:	bl	114ec <dcgettext@plt>
   12870:	mov	r1, r0
   12874:	movw	r0, #25276	; 0x62bc
   12878:	movt	r0, #3
   1287c:	ldr	r2, [r0]
   12880:	mov	r0, #1
   12884:	bl	11678 <__printf_chk@plt>
   12888:	movw	r1, #17677	; 0x450d
   1288c:	mov	r0, #0
   12890:	mov	r2, #5
   12894:	movt	r1, #2
   12898:	bl	114ec <dcgettext@plt>
   1289c:	movw	r9, #25020	; 0x61bc
   128a0:	movt	r9, #3
   128a4:	ldr	r1, [r9]
   128a8:	bl	113e4 <fputs_unlocked@plt>
   128ac:	movw	r1, #17811	; 0x4593
   128b0:	mov	r0, #0
   128b4:	mov	r2, #5
   128b8:	movt	r1, #2
   128bc:	bl	114ec <dcgettext@plt>
   128c0:	ldr	r1, [r9]
   128c4:	bl	113e4 <fputs_unlocked@plt>
   128c8:	movw	r1, #19806	; 0x4d5e
   128cc:	mov	r0, #0
   128d0:	mov	r2, #5
   128d4:	movt	r1, #2
   128d8:	bl	114ec <dcgettext@plt>
   128dc:	ldr	r1, [r9]
   128e0:	bl	113e4 <fputs_unlocked@plt>
   128e4:	movw	r1, #17846	; 0x45b6
   128e8:	mov	r0, #0
   128ec:	mov	r2, #5
   128f0:	movt	r1, #2
   128f4:	bl	114ec <dcgettext@plt>
   128f8:	ldr	r1, [r9]
   128fc:	bl	113e4 <fputs_unlocked@plt>
   12900:	movw	r1, #18034	; 0x4672
   12904:	mov	r0, #0
   12908:	mov	r2, #5
   1290c:	movt	r1, #2
   12910:	bl	114ec <dcgettext@plt>
   12914:	ldr	r1, [r9]
   12918:	bl	113e4 <fputs_unlocked@plt>
   1291c:	movw	r1, #18100	; 0x46b4
   12920:	mov	r0, #0
   12924:	mov	r2, #5
   12928:	movt	r1, #2
   1292c:	bl	114ec <dcgettext@plt>
   12930:	ldr	r1, [r9]
   12934:	bl	113e4 <fputs_unlocked@plt>
   12938:	movw	r1, #18299	; 0x477b
   1293c:	mov	r0, #0
   12940:	mov	r2, #5
   12944:	movt	r1, #2
   12948:	bl	114ec <dcgettext@plt>
   1294c:	ldr	r1, [r9]
   12950:	bl	113e4 <fputs_unlocked@plt>
   12954:	movw	r1, #18344	; 0x47a8
   12958:	mov	r0, #0
   1295c:	mov	r2, #5
   12960:	movt	r1, #2
   12964:	bl	114ec <dcgettext@plt>
   12968:	ldr	r1, [r9]
   1296c:	bl	113e4 <fputs_unlocked@plt>
   12970:	movw	r1, #18398	; 0x47de
   12974:	mov	r0, #0
   12978:	mov	r2, #5
   1297c:	movt	r1, #2
   12980:	bl	114ec <dcgettext@plt>
   12984:	ldr	r1, [r9]
   12988:	bl	113e4 <fputs_unlocked@plt>
   1298c:	movw	r0, #20416	; 0x4fc0
   12990:	mov	r6, sp
   12994:	movt	r0, #2
   12998:	mov	r1, r6
   1299c:	ldm	r0!, {r2, r3, r4, r5}
   129a0:	stmia	r1!, {r2, r3, r4, r5}
   129a4:	ldm	r0!, {r2, r3, r4, r5, r7}
   129a8:	stmia	r1!, {r2, r3, r4, r5, r7}
   129ac:	ldm	r0, {r2, r3, r4, r5, r7}
   129b0:	stm	r1, {r2, r3, r4, r5, r7}
   129b4:	movw	r1, #19881	; 0x4da9
   129b8:	movw	r5, #17498	; 0x445a
   129bc:	movt	r1, #2
   129c0:	movt	r5, #2
   129c4:	mov	r0, r5
   129c8:	bl	11420 <strcmp@plt>
   129cc:	cmp	r0, #0
   129d0:	ldrne	r1, [r6, #8]!
   129d4:	cmpne	r1, #0
   129d8:	bne	129c4 <__assert_fail@plt+0x1250>
   129dc:	ldr	r6, [r6, #4]
   129e0:	movw	r1, #19976	; 0x4e08
   129e4:	mov	r0, #0
   129e8:	mov	r2, #5
   129ec:	movt	r1, #2
   129f0:	bl	114ec <dcgettext@plt>
   129f4:	movw	r2, #17505	; 0x4461
   129f8:	movw	r3, #19999	; 0x4e1f
   129fc:	mov	r1, r0
   12a00:	mov	r0, #1
   12a04:	movt	r2, #2
   12a08:	movt	r3, #2
   12a0c:	bl	11678 <__printf_chk@plt>
   12a10:	cmp	r6, #0
   12a14:	mov	r0, #5
   12a18:	mov	r1, #0
   12a1c:	moveq	r6, r5
   12a20:	bl	116d8 <setlocale@plt>
   12a24:	cmp	r0, #0
   12a28:	beq	12a60 <__assert_fail@plt+0x12ec>
   12a2c:	movw	r1, #20039	; 0x4e47
   12a30:	mov	r2, #3
   12a34:	movt	r1, #2
   12a38:	bl	11744 <strncmp@plt>
   12a3c:	cmp	r0, #0
   12a40:	beq	12a60 <__assert_fail@plt+0x12ec>
   12a44:	movw	r1, #20043	; 0x4e4b
   12a48:	mov	r0, #0
   12a4c:	mov	r2, #5
   12a50:	movt	r1, #2
   12a54:	bl	114ec <dcgettext@plt>
   12a58:	ldr	r1, [r9]
   12a5c:	bl	113e4 <fputs_unlocked@plt>
   12a60:	movw	r1, #20114	; 0x4e92
   12a64:	mov	r0, #0
   12a68:	mov	r2, #5
   12a6c:	movt	r1, #2
   12a70:	bl	114ec <dcgettext@plt>
   12a74:	movw	r2, #19999	; 0x4e1f
   12a78:	mov	r1, r0
   12a7c:	mov	r0, #1
   12a80:	mov	r3, r5
   12a84:	movt	r2, #2
   12a88:	bl	11678 <__printf_chk@plt>
   12a8c:	movw	r1, #20141	; 0x4ead
   12a90:	mov	r0, #0
   12a94:	mov	r2, #5
   12a98:	movt	r1, #2
   12a9c:	bl	114ec <dcgettext@plt>
   12aa0:	movw	r3, #18835	; 0x4993
   12aa4:	mov	r1, r0
   12aa8:	movw	r0, #19909	; 0x4dc5
   12aac:	cmp	r6, r5
   12ab0:	mov	r2, r6
   12ab4:	movt	r0, #2
   12ab8:	movt	r3, #2
   12abc:	moveq	r3, r0
   12ac0:	mov	r0, #1
   12ac4:	bl	11678 <__printf_chk@plt>
   12ac8:	mov	r0, r8
   12acc:	bl	1160c <exit@plt>
   12ad0:	movw	r0, #25016	; 0x61b8
   12ad4:	movw	r1, #17599	; 0x44bf
   12ad8:	mov	r2, #5
   12adc:	movt	r0, #3
   12ae0:	movt	r1, #2
   12ae4:	ldr	r5, [r0]
   12ae8:	mov	r0, #0
   12aec:	bl	114ec <dcgettext@plt>
   12af0:	mov	r2, r0
   12af4:	movw	r0, #25276	; 0x62bc
   12af8:	mov	r1, #1
   12afc:	movt	r0, #3
   12b00:	ldr	r3, [r0]
   12b04:	mov	r0, r5
   12b08:	bl	1169c <__fprintf_chk@plt>
   12b0c:	b	12ac8 <__assert_fail@plt+0x1354>
   12b10:	push	{r4, sl, fp, lr}
   12b14:	add	fp, sp, #8
   12b18:	mov	r4, r0
   12b1c:	mov	r0, #1
   12b20:	bl	12d50 <__assert_fail@plt+0x15dc>
   12b24:	mov	r0, r4
   12b28:	mov	r1, #0
   12b2c:	bl	114c8 <signal@plt>
   12b30:	mov	r0, r4
   12b34:	pop	{r4, sl, fp, lr}
   12b38:	b	113fc <raise@plt>
   12b3c:	push	{r4, sl, fp, lr}
   12b40:	add	fp, sp, #8
   12b44:	sub	sp, sp, #128	; 0x80
   12b48:	bl	12b84 <__assert_fail@plt+0x1410>
   12b4c:	movw	r1, #25064	; 0x61e8
   12b50:	mov	r4, sp
   12b54:	mov	r0, #0
   12b58:	movt	r1, #3
   12b5c:	mov	r2, r4
   12b60:	bl	11450 <sigprocmask@plt>
   12b64:	mov	r0, #0
   12b68:	bl	12d50 <__assert_fail@plt+0x15dc>
   12b6c:	mov	r0, #2
   12b70:	mov	r1, r4
   12b74:	mov	r2, #0
   12b78:	bl	11450 <sigprocmask@plt>
   12b7c:	sub	sp, fp, #8
   12b80:	pop	{r4, sl, fp, pc}
   12b84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b88:	add	fp, sp, #24
   12b8c:	sub	sp, sp, #128	; 0x80
   12b90:	movw	r7, #25192	; 0x6268
   12b94:	movt	r7, #3
   12b98:	ldr	r0, [r7]
   12b9c:	cmp	r0, #0
   12ba0:	beq	12cc0 <__assert_fail@plt+0x154c>
   12ba4:	bl	11588 <ferror_unlocked@plt>
   12ba8:	cmp	r0, #0
   12bac:	bne	12cc8 <__assert_fail@plt+0x1554>
   12bb0:	ldr	r0, [r7]
   12bb4:	bl	139f8 <__assert_fail@plt+0x2284>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12d0c <__assert_fail@plt+0x1598>
   12bc0:	movw	r0, #25200	; 0x6270
   12bc4:	movt	r0, #3
   12bc8:	ldrd	r0, [r0]
   12bcc:	orrs	r2, r0, r1
   12bd0:	bne	12c78 <__assert_fail@plt+0x1504>
   12bd4:	movw	r2, #25056	; 0x61e0
   12bd8:	movt	r2, #3
   12bdc:	ldrb	r2, [r2]
   12be0:	cmp	r2, #1
   12be4:	bne	12c78 <__assert_fail@plt+0x1504>
   12be8:	movw	r1, #25064	; 0x61e8
   12bec:	mov	r5, sp
   12bf0:	mov	r0, #0
   12bf4:	movt	r1, #3
   12bf8:	mov	r2, r5
   12bfc:	bl	11450 <sigprocmask@plt>
   12c00:	movw	r8, #25196	; 0x626c
   12c04:	movt	r8, #3
   12c08:	ldr	r0, [r8]
   12c0c:	bl	114f8 <unlink@plt>
   12c10:	mov	r6, r0
   12c14:	bl	11630 <__errno_location@plt>
   12c18:	ldr	r4, [r0]
   12c1c:	movw	r0, #25208	; 0x6278
   12c20:	mov	r2, #0
   12c24:	movt	r0, #3
   12c28:	ldr	r1, [r0]
   12c2c:	sub	r1, r1, #1
   12c30:	str	r1, [r0]
   12c34:	mov	r0, #2
   12c38:	mov	r1, r5
   12c3c:	bl	11450 <sigprocmask@plt>
   12c40:	cmp	r6, #0
   12c44:	cmpne	r4, #2
   12c48:	beq	12cb8 <__assert_fail@plt+0x1544>
   12c4c:	ldr	r2, [r8]
   12c50:	mov	r0, #0
   12c54:	mov	r1, #3
   12c58:	bl	155fc <__assert_fail@plt+0x3e88>
   12c5c:	movw	r2, #19375	; 0x4baf
   12c60:	mov	r3, r0
   12c64:	mov	r0, #0
   12c68:	mov	r1, r4
   12c6c:	movt	r2, #2
   12c70:	bl	115a0 <error@plt>
   12c74:	b	12cb8 <__assert_fail@plt+0x1544>
   12c78:	movw	r2, #25044	; 0x61d4
   12c7c:	movt	r2, #3
   12c80:	ldrb	r2, [r2]
   12c84:	cmp	r2, #0
   12c88:	bne	12cb8 <__assert_fail@plt+0x1544>
   12c8c:	movw	r2, #25020	; 0x61bc
   12c90:	movt	r2, #3
   12c94:	ldr	r4, [r2]
   12c98:	mov	r2, sp
   12c9c:	bl	13cd0 <__assert_fail@plt+0x255c>
   12ca0:	movw	r2, #21337	; 0x5359
   12ca4:	mov	r3, r0
   12ca8:	mov	r0, r4
   12cac:	mov	r1, #1
   12cb0:	movt	r2, #2
   12cb4:	bl	1169c <__fprintf_chk@plt>
   12cb8:	mov	r0, #0
   12cbc:	str	r0, [r7]
   12cc0:	sub	sp, fp, #24
   12cc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cc8:	movw	r1, #18836	; 0x4994
   12ccc:	mov	r0, #0
   12cd0:	mov	r2, #5
   12cd4:	mov	r5, #0
   12cd8:	movt	r1, #2
   12cdc:	bl	114ec <dcgettext@plt>
   12ce0:	mov	r4, r0
   12ce4:	movw	r0, #25196	; 0x626c
   12ce8:	movt	r0, #3
   12cec:	ldr	r1, [r0]
   12cf0:	mov	r0, #4
   12cf4:	bl	15458 <__assert_fail@plt+0x3ce4>
   12cf8:	mov	r3, r0
   12cfc:	mov	r0, #0
   12d00:	mov	r1, #0
   12d04:	mov	r2, r4
   12d08:	b	12d44 <__assert_fail@plt+0x15d0>
   12d0c:	bl	11630 <__errno_location@plt>
   12d10:	ldr	r4, [r0]
   12d14:	movw	r0, #25196	; 0x626c
   12d18:	mov	r1, #3
   12d1c:	mov	r5, #0
   12d20:	movt	r0, #3
   12d24:	ldr	r2, [r0]
   12d28:	mov	r0, #0
   12d2c:	bl	155fc <__assert_fail@plt+0x3e88>
   12d30:	movw	r2, #19375	; 0x4baf
   12d34:	mov	r3, r0
   12d38:	mov	r0, #0
   12d3c:	mov	r1, r4
   12d40:	movt	r2, #2
   12d44:	bl	115a0 <error@plt>
   12d48:	str	r5, [r7]
   12d4c:	bl	118a8 <__assert_fail@plt+0x134>
   12d50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d54:	add	fp, sp, #24
   12d58:	mov	r4, r0
   12d5c:	movw	r0, #25045	; 0x61d5
   12d60:	movt	r0, #3
   12d64:	ldrb	r0, [r0]
   12d68:	cmp	r0, #0
   12d6c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d70:	movw	r8, #25208	; 0x6278
   12d74:	movt	r8, #3
   12d78:	ldr	r0, [r8]
   12d7c:	cmp	r0, #1
   12d80:	blt	12df0 <__assert_fail@plt+0x167c>
   12d84:	movw	r9, #19375	; 0x4baf
   12d88:	add	r5, r0, #1
   12d8c:	movt	r9, #2
   12d90:	sub	r0, r5, #2
   12d94:	bl	12dfc <__assert_fail@plt+0x1688>
   12d98:	mov	r6, r0
   12d9c:	bl	114f8 <unlink@plt>
   12da0:	cmp	r0, #0
   12da4:	beq	12de4 <__assert_fail@plt+0x1670>
   12da8:	bl	11630 <__errno_location@plt>
   12dac:	ldr	r7, [r0]
   12db0:	cmp	r7, #2
   12db4:	beq	12de4 <__assert_fail@plt+0x1670>
   12db8:	cmp	r4, #0
   12dbc:	bne	12de4 <__assert_fail@plt+0x1670>
   12dc0:	mov	r0, #0
   12dc4:	mov	r1, #3
   12dc8:	mov	r2, r6
   12dcc:	bl	155fc <__assert_fail@plt+0x3e88>
   12dd0:	mov	r3, r0
   12dd4:	mov	r0, #0
   12dd8:	mov	r1, r7
   12ddc:	mov	r2, r9
   12de0:	bl	115a0 <error@plt>
   12de4:	sub	r5, r5, #1
   12de8:	cmp	r5, #1
   12dec:	bgt	12d90 <__assert_fail@plt+0x161c>
   12df0:	mov	r0, #0
   12df4:	str	r0, [r8]
   12df8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12dfc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e00:	add	fp, sp, #24
   12e04:	sub	sp, sp, #8
   12e08:	movw	r8, #25060	; 0x61e4
   12e0c:	movw	r7, #25048	; 0x61d8
   12e10:	mov	r4, r0
   12e14:	movt	r8, #3
   12e18:	movt	r7, #3
   12e1c:	ldr	r0, [r8]
   12e20:	ldr	r1, [r7]
   12e24:	bl	11570 <strcpy@plt>
   12e28:	movw	r9, #25052	; 0x61dc
   12e2c:	movt	r9, #3
   12e30:	ldr	r5, [r9]
   12e34:	ldr	r6, [r8]
   12e38:	ldr	r0, [r7]
   12e3c:	bl	11618 <strlen@plt>
   12e40:	add	r0, r6, r0
   12e44:	cmp	r5, #0
   12e48:	beq	12e58 <__assert_fail@plt+0x16e4>
   12e4c:	ldr	r3, [r9]
   12e50:	str	r4, [sp]
   12e54:	b	12e70 <__assert_fail@plt+0x16fc>
   12e58:	movw	r1, #24920	; 0x6158
   12e5c:	movw	r3, #18855	; 0x49a7
   12e60:	movt	r1, #3
   12e64:	movt	r3, #2
   12e68:	ldr	r1, [r1]
   12e6c:	stm	sp, {r1, r4}
   12e70:	mov	r1, #1
   12e74:	mvn	r2, #0
   12e78:	bl	11648 <__sprintf_chk@plt>
   12e7c:	ldr	r0, [r8]
   12e80:	sub	sp, fp, #24
   12e84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e88:	push	{r4, r5, fp, lr}
   12e8c:	add	fp, sp, #8
   12e90:	sub	sp, sp, #8
   12e94:	movw	r4, #25040	; 0x61d0
   12e98:	movw	r0, #25224	; 0x6288
   12e9c:	movt	r0, #3
   12ea0:	movt	r4, #3
   12ea4:	ldr	r1, [r4]
   12ea8:	ldr	r0, [r0]
   12eac:	cmp	r1, r0
   12eb0:	bne	12ee8 <__assert_fail@plt+0x1774>
   12eb4:	movw	r5, #25036	; 0x61cc
   12eb8:	mov	r1, #64	; 0x40
   12ebc:	mov	r2, #1
   12ec0:	mvn	r3, #0
   12ec4:	movt	r5, #3
   12ec8:	str	r1, [sp]
   12ecc:	movw	r1, #25224	; 0x6288
   12ed0:	ldr	r0, [r5]
   12ed4:	movt	r1, #3
   12ed8:	bl	22a68 <__assert_fail@plt+0x112f4>
   12edc:	ldr	r1, [r4]
   12ee0:	str	r0, [r5]
   12ee4:	b	12ef4 <__assert_fail@plt+0x1780>
   12ee8:	movw	r0, #25036	; 0x61cc
   12eec:	movt	r0, #3
   12ef0:	ldr	r0, [r0]
   12ef4:	add	r2, r1, #1
   12ef8:	add	r0, r0, r1, lsl #6
   12efc:	mov	r1, #0
   12f00:	vmov.i32	q8, #0	; 0x00000000
   12f04:	str	r2, [r4]
   12f08:	mov	r2, #20
   12f0c:	mov	r3, r0
   12f10:	strb	r1, [r0, #28]
   12f14:	strb	r1, [r0, #30]
   12f18:	str	r1, [r0, #16]
   12f1c:	vst1.64	{d16-d17}, [r3], r2
   12f20:	str	r1, [r3]
   12f24:	sub	sp, fp, #8
   12f28:	pop	{r4, r5, fp, pc}
   12f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f30:	add	fp, sp, #28
   12f34:	sub	sp, sp, #132	; 0x84
   12f38:	movw	r5, #25208	; 0x6278
   12f3c:	movt	r5, #3
   12f40:	ldr	r4, [r5]
   12f44:	mov	r0, r4
   12f48:	bl	12dfc <__assert_fail@plt+0x1688>
   12f4c:	movw	r9, #25196	; 0x626c
   12f50:	cmn	r4, #-2147483647	; 0x80000001
   12f54:	movt	r9, #3
   12f58:	str	r0, [r9]
   12f5c:	beq	13008 <__assert_fail@plt+0x1894>
   12f60:	movw	r1, #25064	; 0x61e8
   12f64:	add	r6, sp, #4
   12f68:	mov	r0, #0
   12f6c:	mov	sl, #0
   12f70:	movt	r1, #3
   12f74:	mov	r2, r6
   12f78:	bl	11450 <sigprocmask@plt>
   12f7c:	ldr	r0, [r9]
   12f80:	movw	r1, #19804	; 0x4d5c
   12f84:	movt	r1, #2
   12f88:	bl	13b58 <__assert_fail@plt+0x23e4>
   12f8c:	mov	r7, r0
   12f90:	movw	r0, #25192	; 0x6268
   12f94:	movt	r0, #3
   12f98:	cmp	r7, #0
   12f9c:	str	r7, [r0]
   12fa0:	addne	r4, r4, #1
   12fa4:	bl	11630 <__errno_location@plt>
   12fa8:	ldr	r8, [r0]
   12fac:	mov	r0, #2
   12fb0:	mov	r1, r6
   12fb4:	mov	r2, #0
   12fb8:	str	r4, [r5]
   12fbc:	bl	11450 <sigprocmask@plt>
   12fc0:	cmp	r7, #0
   12fc4:	movwne	r0, #25200	; 0x6270
   12fc8:	movtne	r0, #3
   12fcc:	strne	sl, [r0]
   12fd0:	strne	sl, [r0, #4]
   12fd4:	subne	sp, fp, #28
   12fd8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fdc:	ldr	r2, [r9]
   12fe0:	mov	r0, #0
   12fe4:	mov	r1, #3
   12fe8:	bl	155fc <__assert_fail@plt+0x3e88>
   12fec:	movw	r2, #19375	; 0x4baf
   12ff0:	mov	r3, r0
   12ff4:	mov	r0, #0
   12ff8:	mov	r1, r8
   12ffc:	movt	r2, #2
   13000:	bl	115a0 <error@plt>
   13004:	bl	118a8 <__assert_fail@plt+0x134>
   13008:	mov	r2, r0
   1300c:	mov	r8, #75	; 0x4b
   13010:	b	12fe0 <__assert_fail@plt+0x186c>
   13014:	push	{fp, lr}
   13018:	mov	fp, sp
   1301c:	bl	13238 <__assert_fail@plt+0x1ac4>
   13020:	cmp	r0, #0
   13024:	popeq	{fp, pc}
   13028:	bl	13308 <__assert_fail@plt+0x1b94>
   1302c:	b	1301c <__assert_fail@plt+0x18a8>
   13030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13034:	add	fp, sp, #24
   13038:	movw	r8, #25240	; 0x6298
   1303c:	mov	r5, r1
   13040:	mov	r4, r0
   13044:	movt	r8, #3
   13048:	ldr	r7, [r8]
   1304c:	cmp	r7, #0
   13050:	bne	13068 <__assert_fail@plt+0x18f4>
   13054:	mov	r6, #0
   13058:	bl	133ac <__assert_fail@plt+0x1c38>
   1305c:	cmp	r0, #0
   13060:	beq	13120 <__assert_fail@plt+0x19ac>
   13064:	ldr	r7, [r8]
   13068:	ldrd	r0, [r7, #8]
   1306c:	mov	r6, #0
   13070:	subs	r2, r4, r0
   13074:	sbcs	r2, r5, r1
   13078:	blt	13120 <__assert_fail@plt+0x19ac>
   1307c:	cmp	r7, #0
   13080:	beq	13128 <__assert_fail@plt+0x19b4>
   13084:	ldr	r2, [r7, #24]
   13088:	adds	r3, r0, r2
   1308c:	adc	r1, r1, r2, asr #31
   13090:	subs	r2, r4, r3
   13094:	sbcs	r1, r5, r1
   13098:	bge	130a4 <__assert_fail@plt+0x1930>
   1309c:	mov	r1, r7
   130a0:	b	130ec <__assert_fail@plt+0x1978>
   130a4:	ldr	r1, [r7, #40]	; 0x28
   130a8:	cmp	r1, #0
   130ac:	bne	130c8 <__assert_fail@plt+0x1954>
   130b0:	bl	133ac <__assert_fail@plt+0x1c38>
   130b4:	cmp	r0, #0
   130b8:	beq	13120 <__assert_fail@plt+0x19ac>
   130bc:	ldr	r1, [r7, #40]	; 0x28
   130c0:	cmp	r1, #0
   130c4:	beq	13128 <__assert_fail@plt+0x19b4>
   130c8:	ldr	r0, [r1, #8]
   130cc:	ldr	r3, [r1, #12]
   130d0:	ldr	r2, [r1, #24]
   130d4:	adds	r7, r0, r2
   130d8:	adc	r2, r3, r2, asr #31
   130dc:	subs	r3, r4, r7
   130e0:	mov	r7, r1
   130e4:	sbcs	r2, r5, r2
   130e8:	bge	130a4 <__assert_fail@plt+0x1930>
   130ec:	ldr	r1, [r1, #32]
   130f0:	sub	r2, r4, r0
   130f4:	cmp	r2, #80	; 0x50
   130f8:	blt	13118 <__assert_fail@plt+0x19a4>
   130fc:	add	r2, r4, #80	; 0x50
   13100:	sub	r0, r2, r0
   13104:	ldr	r1, [r1, #652]	; 0x28c
   13108:	sub	r0, r0, #80	; 0x50
   1310c:	cmp	r0, #159	; 0x9f
   13110:	bgt	13104 <__assert_fail@plt+0x1990>
   13114:	sub	r2, r0, #80	; 0x50
   13118:	add	r0, r1, r2, lsl #3
   1311c:	add	r6, r0, #12
   13120:	mov	r0, r6
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	movw	r0, #19659	; 0x4ccb
   1312c:	movw	r1, #19661	; 0x4ccd
   13130:	movw	r3, #19674	; 0x4cda
   13134:	movw	r2, #583	; 0x247
   13138:	movt	r0, #2
   1313c:	movt	r1, #2
   13140:	movt	r3, #2
   13144:	bl	11774 <__assert_fail@plt>
   13148:	push	{fp, lr}
   1314c:	mov	fp, sp
   13150:	sub	sp, sp, #32
   13154:	movw	r9, #25016	; 0x61b8
   13158:	movw	r1, #19710	; 0x4cfe
   1315c:	mov	r5, r2
   13160:	mov	r6, r0
   13164:	mov	r0, #0
   13168:	mov	r2, #5
   1316c:	mov	r8, r3
   13170:	movt	r9, #3
   13174:	movt	r1, #2
   13178:	ldr	r7, [r9]
   1317c:	bl	114ec <dcgettext@plt>
   13180:	movw	r1, #25032	; 0x61c8
   13184:	mov	r4, r0
   13188:	ldr	r0, [r6, #24]
   1318c:	movt	r1, #3
   13190:	ldr	r1, [r1]
   13194:	ldr	r0, [r1, r0, lsl #2]
   13198:	movw	r1, #25276	; 0x62bc
   1319c:	movt	r1, #3
   131a0:	ldr	r6, [r1]
   131a4:	bl	15790 <__assert_fail@plt+0x401c>
   131a8:	str	r0, [sp]
   131ac:	mov	r0, r7
   131b0:	mov	r1, #1
   131b4:	mov	r2, r4
   131b8:	mov	r3, r6
   131bc:	bl	1169c <__fprintf_chk@plt>
   131c0:	ldr	r7, [fp, #8]
   131c4:	orrs	r0, r5, r8
   131c8:	bne	131e4 <__assert_fail@plt+0x1a70>
   131cc:	ldr	r0, [r9]
   131d0:	movw	r2, #18834	; 0x4992
   131d4:	mov	r1, #1
   131d8:	movt	r2, #2
   131dc:	bl	1169c <__fprintf_chk@plt>
   131e0:	b	13224 <__assert_fail@plt+0x1ab0>
   131e4:	ldr	r4, [r9]
   131e8:	movw	r1, #19734	; 0x4d16
   131ec:	mov	r0, #0
   131f0:	mov	r2, #5
   131f4:	movt	r1, #2
   131f8:	bl	114ec <dcgettext@plt>
   131fc:	mov	r6, r0
   13200:	add	r2, sp, #11
   13204:	mov	r0, r5
   13208:	mov	r1, r8
   1320c:	bl	13cd0 <__assert_fail@plt+0x255c>
   13210:	mov	r3, r0
   13214:	mov	r0, r4
   13218:	mov	r1, #1
   1321c:	mov	r2, r6
   13220:	bl	1169c <__fprintf_chk@plt>
   13224:	cmp	r7, #0
   13228:	bne	13234 <__assert_fail@plt+0x1ac0>
   1322c:	bl	13014 <__assert_fail@plt+0x18a0>
   13230:	bl	12b84 <__assert_fail@plt+0x1410>
   13234:	bl	118a8 <__assert_fail@plt+0x134>
   13238:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1323c:	add	fp, sp, #24
   13240:	movw	r5, #25264	; 0x62b0
   13244:	movt	r5, #3
   13248:	ldr	r0, [r5]
   1324c:	cmp	r0, #0
   13250:	beq	13260 <__assert_fail@plt+0x1aec>
   13254:	bl	136d4 <__assert_fail@plt+0x1f60>
   13258:	mov	r0, #0
   1325c:	str	r0, [r5]
   13260:	movw	r7, #25240	; 0x6298
   13264:	movt	r7, #3
   13268:	ldr	r0, [r7]
   1326c:	cmp	r0, #0
   13270:	bne	13288 <__assert_fail@plt+0x1b14>
   13274:	mov	r4, #0
   13278:	bl	133ac <__assert_fail@plt+0x1c38>
   1327c:	cmp	r0, #0
   13280:	beq	13300 <__assert_fail@plt+0x1b8c>
   13284:	ldr	r0, [r7]
   13288:	mov	r1, r0
   1328c:	movw	r4, #25232	; 0x6290
   13290:	ldr	r2, [r1, #16]!
   13294:	movt	r4, #3
   13298:	ldrd	r8, [r4]
   1329c:	ldr	r3, [r1, #4]
   132a0:	subs	r6, r8, r2
   132a4:	sbcs	r6, r9, r3
   132a8:	strdlt	r2, [r4]
   132ac:	adds	r2, r2, #1
   132b0:	adc	r3, r3, #0
   132b4:	strd	r2, [r1]
   132b8:	ldr	r1, [r0, #36]	; 0x24
   132bc:	ldr	r3, [r1, #8]
   132c0:	ldr	r2, [r1]
   132c4:	add	r6, r3, #1
   132c8:	add	r3, r1, r3, lsl #3
   132cc:	add	r4, r3, #12
   132d0:	cmp	r6, r2
   132d4:	str	r6, [r1, #8]
   132d8:	bne	13300 <__assert_fail@plt+0x1b8c>
   132dc:	ldr	r1, [r1, #652]	; 0x28c
   132e0:	str	r1, [r0, #36]	; 0x24
   132e4:	cmp	r1, #0
   132e8:	ldrne	r1, [r1]
   132ec:	cmpne	r1, #0
   132f0:	bne	13300 <__assert_fail@plt+0x1b8c>
   132f4:	str	r0, [r5]
   132f8:	ldr	r0, [r0, #40]	; 0x28
   132fc:	str	r0, [r7]
   13300:	mov	r0, r4
   13304:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13308:	push	{r4, r5, r6, r7, fp, lr}
   1330c:	add	fp, sp, #16
   13310:	movw	r6, #25192	; 0x6268
   13314:	mov	r4, r0
   13318:	ldr	r2, [r0]
   1331c:	ldr	r0, [r0, #4]
   13320:	mov	r1, #1
   13324:	movt	r6, #3
   13328:	ldr	r3, [r6]
   1332c:	bl	114d4 <fwrite_unlocked@plt>
   13330:	ldr	r1, [r4]
   13334:	cmp	r0, r1
   13338:	bne	13358 <__assert_fail@plt+0x1be4>
   1333c:	movw	r1, #25200	; 0x6270
   13340:	movt	r1, #3
   13344:	ldrd	r2, [r1]
   13348:	adds	r2, r2, r0
   1334c:	adc	r3, r3, r0, asr #31
   13350:	strd	r2, [r1]
   13354:	pop	{r4, r5, r6, r7, fp, pc}
   13358:	bl	11630 <__errno_location@plt>
   1335c:	ldr	r4, [r0]
   13360:	movw	r1, #18836	; 0x4994
   13364:	mov	r0, #0
   13368:	mov	r2, #5
   1336c:	mov	r7, #0
   13370:	movt	r1, #2
   13374:	bl	114ec <dcgettext@plt>
   13378:	mov	r5, r0
   1337c:	movw	r0, #25196	; 0x626c
   13380:	movt	r0, #3
   13384:	ldr	r1, [r0]
   13388:	mov	r0, #4
   1338c:	bl	15458 <__assert_fail@plt+0x3ce4>
   13390:	mov	r3, r0
   13394:	mov	r0, #0
   13398:	mov	r1, r4
   1339c:	mov	r2, r5
   133a0:	bl	115a0 <error@plt>
   133a4:	str	r7, [r6]
   133a8:	bl	118a8 <__assert_fail@plt+0x134>
   133ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b0:	add	fp, sp, #28
   133b4:	sub	sp, sp, #4
   133b8:	movw	r0, #25244	; 0x629c
   133bc:	movt	r0, #3
   133c0:	ldrb	r1, [r0]
   133c4:	mov	r0, #0
   133c8:	cmp	r1, #0
   133cc:	bne	13698 <__assert_fail@plt+0x1f24>
   133d0:	movw	r9, #25248	; 0x62a0
   133d4:	movw	r1, #8190	; 0x1ffe
   133d8:	movw	r5, #8191	; 0x1fff
   133dc:	mov	sl, #0
   133e0:	movt	r9, #3
   133e4:	ldr	r0, [r9]
   133e8:	cmp	r0, r1
   133ec:	addgt	r5, r0, #1
   133f0:	b	1342c <__assert_fail@plt+0x1cb8>
   133f4:	ldr	r5, [r4]
   133f8:	cmn	r5, #1
   133fc:	ble	1340c <__assert_fail@plt+0x1c98>
   13400:	cmp	r5, #1073741824	; 0x40000000
   13404:	blt	13420 <__assert_fail@plt+0x1cac>
   13408:	b	136a0 <__assert_fail@plt+0x1f2c>
   1340c:	beq	13420 <__assert_fail@plt+0x1cac>
   13410:	mov	r0, #-2147483648	; 0x80000000
   13414:	sdiv	r0, r0, r5
   13418:	cmp	r0, #2
   1341c:	blt	136a0 <__assert_fail@plt+0x1f2c>
   13420:	mov	r0, r4
   13424:	bl	136d4 <__assert_fail@plt+0x1f60>
   13428:	lsl	r5, r5, #1
   1342c:	mov	r0, #48	; 0x30
   13430:	bl	22908 <__assert_fail@plt+0x11194>
   13434:	mov	r4, r0
   13438:	str	sl, [r0]
   1343c:	mov	r0, #1
   13440:	mov	r2, r5
   13444:	mvn	r3, #0
   13448:	str	r0, [sp]
   1344c:	mov	r0, #0
   13450:	mov	r1, r4
   13454:	bl	22a68 <__assert_fail@plt+0x112f4>
   13458:	str	r0, [r4, #28]
   1345c:	mov	r5, r0
   13460:	movw	r0, #25256	; 0x62a8
   13464:	add	r8, r4, #8
   13468:	str	sl, [r4, #4]
   1346c:	str	sl, [r4, #24]
   13470:	str	sl, [r4, #36]	; 0x24
   13474:	str	sl, [r4, #32]
   13478:	str	sl, [r4, #40]	; 0x28
   1347c:	ldr	r6, [r9]
   13480:	movt	r0, #3
   13484:	ldrd	r0, [r0]
   13488:	adds	r0, r0, #1
   1348c:	adc	r1, r1, #0
   13490:	vmov.32	d16[0], r0
   13494:	cmp	r6, #0
   13498:	vmov.32	d16[1], r1
   1349c:	vorr	d17, d16, d16
   134a0:	vst1.64	{d16-d17}, [r8]
   134a4:	ldr	r7, [r4]
   134a8:	beq	134dc <__assert_fail@plt+0x1d68>
   134ac:	movw	r0, #25252	; 0x62a4
   134b0:	mov	r2, r6
   134b4:	movt	r0, #3
   134b8:	ldr	r1, [r0]
   134bc:	mov	r0, r5
   134c0:	bl	1148c <memcpy@plt>
   134c4:	ldr	r0, [r4, #4]
   134c8:	sub	r7, r7, r6
   134cc:	add	r5, r5, r6
   134d0:	str	sl, [r9]
   134d4:	add	r0, r0, r6
   134d8:	str	r0, [r4, #4]
   134dc:	subs	r2, r7, #1
   134e0:	mov	r0, #0
   134e4:	beq	1351c <__assert_fail@plt+0x1da8>
   134e8:	mov	r0, #0
   134ec:	mov	r1, r5
   134f0:	bl	223dc <__assert_fail@plt+0x10c68>
   134f4:	cmp	r0, #0
   134f8:	beq	13508 <__assert_fail@plt+0x1d94>
   134fc:	cmn	r0, #1
   13500:	bne	1351c <__assert_fail@plt+0x1da8>
   13504:	b	136a4 <__assert_fail@plt+0x1f30>
   13508:	movw	r0, #25244	; 0x629c
   1350c:	mov	r1, #1
   13510:	movt	r0, #3
   13514:	strb	r1, [r0]
   13518:	mov	r0, #0
   1351c:	ldr	r1, [r4, #4]
   13520:	adds	r0, r1, r0
   13524:	str	r0, [r4, #4]
   13528:	beq	13630 <__assert_fail@plt+0x1ebc>
   1352c:	ldr	r5, [r4, #28]
   13530:	mov	r1, #10
   13534:	mov	r7, r9
   13538:	mov	r6, r5
   1353c:	strb	r1, [r6, r0]!
   13540:	mov	r0, r5
   13544:	mov	r1, #10
   13548:	bl	11534 <rawmemchr@plt>
   1354c:	mov	r9, #0
   13550:	cmp	r0, r6
   13554:	beq	13588 <__assert_fail@plt+0x1e14>
   13558:	mov	r1, r5
   1355c:	add	r5, r0, #1
   13560:	mov	r0, r4
   13564:	sub	r2, r5, r1
   13568:	bl	13714 <__assert_fail@plt+0x1fa0>
   1356c:	mov	r0, r5
   13570:	mov	r1, #10
   13574:	bl	11534 <rawmemchr@plt>
   13578:	add	r9, r9, #1
   1357c:	cmp	r0, r6
   13580:	mov	r1, r5
   13584:	bne	1355c <__assert_fail@plt+0x1de8>
   13588:	subs	r6, r6, r5
   1358c:	beq	135ec <__assert_fail@plt+0x1e78>
   13590:	movw	r0, #25244	; 0x629c
   13594:	movt	r0, #3
   13598:	ldrb	r0, [r0]
   1359c:	cmp	r0, #1
   135a0:	bne	135bc <__assert_fail@plt+0x1e48>
   135a4:	mov	r0, r4
   135a8:	mov	r1, r5
   135ac:	mov	r2, r6
   135b0:	bl	13714 <__assert_fail@plt+0x1fa0>
   135b4:	add	r9, r9, #1
   135b8:	b	135ec <__assert_fail@plt+0x1e78>
   135bc:	mov	r0, r5
   135c0:	mov	r1, r6
   135c4:	bl	22c94 <__assert_fail@plt+0x11520>
   135c8:	mov	r5, r0
   135cc:	movw	r0, #25252	; 0x62a4
   135d0:	movt	r0, #3
   135d4:	ldr	r0, [r0]
   135d8:	bl	13c04 <__assert_fail@plt+0x2490>
   135dc:	movw	r0, #25252	; 0x62a4
   135e0:	str	r6, [r7]
   135e4:	movt	r0, #3
   135e8:	str	r5, [r0]
   135ec:	movw	r0, #25256	; 0x62a8
   135f0:	str	r9, [r4, #24]
   135f4:	movt	r0, #3
   135f8:	mov	r6, r0
   135fc:	ldrd	r0, [r0]
   13600:	adds	r2, r0, #1
   13604:	adc	r3, r1, #0
   13608:	vmov.32	d16[0], r2
   1360c:	adds	r0, r0, r9
   13610:	vmov.32	d16[1], r3
   13614:	adc	r1, r1, r9, asr #31
   13618:	cmp	r9, #0
   1361c:	mov	r9, r7
   13620:	vorr	d17, d16, d16
   13624:	strd	r0, [r6]
   13628:	vst1.64	{d16-d17}, [r8]
   1362c:	bne	13654 <__assert_fail@plt+0x1ee0>
   13630:	movw	r0, #25244	; 0x629c
   13634:	movt	r0, #3
   13638:	ldrb	r0, [r0]
   1363c:	cmp	r0, #0
   13640:	beq	133f4 <__assert_fail@plt+0x1c80>
   13644:	mov	r0, r4
   13648:	bl	136d4 <__assert_fail@plt+0x1f60>
   1364c:	mov	r0, #0
   13650:	b	13698 <__assert_fail@plt+0x1f24>
   13654:	ldr	r1, [r4, #32]
   13658:	mov	r0, #0
   1365c:	str	r1, [r4, #36]	; 0x24
   13660:	movw	r1, #25240	; 0x6298
   13664:	str	r0, [r4, #40]	; 0x28
   13668:	movt	r1, #3
   1366c:	ldr	r0, [r1]
   13670:	cmp	r0, #0
   13674:	beq	13690 <__assert_fail@plt+0x1f1c>
   13678:	mov	r1, r0
   1367c:	ldr	r0, [r0, #40]	; 0x28
   13680:	cmp	r0, #0
   13684:	bne	13678 <__assert_fail@plt+0x1f04>
   13688:	str	r4, [r1, #40]	; 0x28
   1368c:	b	13694 <__assert_fail@plt+0x1f20>
   13690:	str	r4, [r1]
   13694:	mov	r0, #1
   13698:	sub	sp, fp, #28
   1369c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a0:	bl	11870 <__assert_fail@plt+0xfc>
   136a4:	bl	11630 <__errno_location@plt>
   136a8:	ldr	r4, [r0]
   136ac:	movw	r1, #17588	; 0x44b4
   136b0:	mov	r0, #0
   136b4:	mov	r2, #5
   136b8:	movt	r1, #2
   136bc:	bl	114ec <dcgettext@plt>
   136c0:	mov	r2, r0
   136c4:	mov	r0, #0
   136c8:	mov	r1, r4
   136cc:	bl	115a0 <error@plt>
   136d0:	bl	118a8 <__assert_fail@plt+0x134>
   136d4:	push	{r4, r5, fp, lr}
   136d8:	add	fp, sp, #8
   136dc:	mov	r4, r0
   136e0:	ldr	r0, [r0, #32]
   136e4:	cmp	r0, #0
   136e8:	beq	13700 <__assert_fail@plt+0x1f8c>
   136ec:	ldr	r5, [r0, #652]	; 0x28c
   136f0:	bl	13c04 <__assert_fail@plt+0x2490>
   136f4:	cmp	r5, #0
   136f8:	mov	r0, r5
   136fc:	bne	136ec <__assert_fail@plt+0x1f78>
   13700:	ldr	r0, [r4, #28]
   13704:	bl	13c04 <__assert_fail@plt+0x2490>
   13708:	mov	r0, r4
   1370c:	pop	{r4, r5, fp, lr}
   13710:	b	13c04 <__assert_fail@plt+0x2490>
   13714:	push	{r4, r5, r6, sl, fp, lr}
   13718:	add	fp, sp, #16
   1371c:	mov	r6, r0
   13720:	ldr	r0, [r0, #32]
   13724:	mov	r5, r2
   13728:	mov	r4, r1
   1372c:	cmp	r0, #0
   13730:	beq	1373c <__assert_fail@plt+0x1fc8>
   13734:	ldr	r0, [r6, #36]!	; 0x24
   13738:	b	13760 <__assert_fail@plt+0x1fec>
   1373c:	mov	r0, #656	; 0x290
   13740:	bl	22908 <__assert_fail@plt+0x11194>
   13744:	mov	r1, #0
   13748:	str	r1, [r0, #652]	; 0x28c
   1374c:	str	r1, [r0]
   13750:	str	r1, [r0, #4]
   13754:	str	r1, [r0, #8]
   13758:	str	r0, [r6, #36]!	; 0x24
   1375c:	str	r0, [r6, #-4]
   13760:	ldr	r1, [r0]
   13764:	cmp	r1, #80	; 0x50
   13768:	bne	13794 <__assert_fail@plt+0x2020>
   1376c:	mov	r0, #656	; 0x290
   13770:	bl	22908 <__assert_fail@plt+0x11194>
   13774:	mov	r1, #0
   13778:	str	r1, [r0, #652]	; 0x28c
   1377c:	str	r1, [r0]
   13780:	str	r1, [r0, #4]
   13784:	str	r1, [r0, #8]
   13788:	ldr	r1, [r6]
   1378c:	str	r0, [r1, #652]	; 0x28c
   13790:	str	r0, [r6]
   13794:	ldr	r1, [r0, #4]
   13798:	add	r2, r0, r1, lsl #3
   1379c:	add	r1, r1, #1
   137a0:	str	r5, [r2, #12]
   137a4:	str	r4, [r2, #16]
   137a8:	str	r1, [r0, #4]
   137ac:	ldr	r1, [r0]
   137b0:	add	r1, r1, #1
   137b4:	str	r1, [r0]
   137b8:	pop	{r4, r5, r6, sl, fp, pc}
   137bc:	push	{r4, sl, fp, lr}
   137c0:	add	fp, sp, #8
   137c4:	movw	r4, #25240	; 0x6298
   137c8:	movt	r4, #3
   137cc:	ldr	r0, [r4]
   137d0:	cmp	r0, #0
   137d4:	bne	137e8 <__assert_fail@plt+0x2074>
   137d8:	bl	133ac <__assert_fail@plt+0x1c38>
   137dc:	cmp	r0, #0
   137e0:	beq	137f0 <__assert_fail@plt+0x207c>
   137e4:	ldr	r0, [r4]
   137e8:	ldrd	r0, [r0, #16]
   137ec:	pop	{r4, sl, fp, pc}
   137f0:	bl	11630 <__errno_location@plt>
   137f4:	ldr	r4, [r0]
   137f8:	movw	r1, #19753	; 0x4d29
   137fc:	mov	r0, #0
   13800:	mov	r2, #5
   13804:	movt	r1, #2
   13808:	bl	114ec <dcgettext@plt>
   1380c:	mov	r2, r0
   13810:	mov	r0, #1
   13814:	mov	r1, r4
   13818:	bl	115a0 <error@plt>
   1381c:	push	{fp, lr}
   13820:	mov	fp, sp
   13824:	sub	sp, sp, #32
   13828:	movw	sl, #25016	; 0x61b8
   1382c:	movw	r1, #19771	; 0x4d3b
   13830:	mov	r9, r2
   13834:	mov	r6, r0
   13838:	mov	r0, #0
   1383c:	mov	r2, #5
   13840:	mov	r8, r3
   13844:	movt	sl, #3
   13848:	movt	r1, #2
   1384c:	ldr	r7, [sl]
   13850:	bl	114ec <dcgettext@plt>
   13854:	mov	r4, r0
   13858:	movw	r0, #25276	; 0x62bc
   1385c:	add	r2, sp, #11
   13860:	movt	r0, #3
   13864:	ldr	r5, [r0]
   13868:	ldrd	r0, [r6, #8]
   1386c:	bl	13cd0 <__assert_fail@plt+0x255c>
   13870:	bl	15790 <__assert_fail@plt+0x401c>
   13874:	str	r0, [sp]
   13878:	mov	r0, r7
   1387c:	mov	r1, #1
   13880:	mov	r2, r4
   13884:	mov	r3, r5
   13888:	bl	1169c <__fprintf_chk@plt>
   1388c:	ldr	r6, [sl]
   13890:	orrs	r0, r9, r8
   13894:	bne	138b0 <__assert_fail@plt+0x213c>
   13898:	movw	r2, #18834	; 0x4992
   1389c:	mov	r0, r6
   138a0:	mov	r1, #1
   138a4:	movt	r2, #2
   138a8:	bl	1169c <__fprintf_chk@plt>
   138ac:	bl	118a8 <__assert_fail@plt+0x134>
   138b0:	movw	r1, #19734	; 0x4d16
   138b4:	mov	r0, #0
   138b8:	mov	r2, #5
   138bc:	movt	r1, #2
   138c0:	bl	114ec <dcgettext@plt>
   138c4:	mov	r4, r0
   138c8:	add	r2, sp, #11
   138cc:	mov	r0, r9
   138d0:	mov	r1, r8
   138d4:	bl	13cd0 <__assert_fail@plt+0x255c>
   138d8:	mov	r3, r0
   138dc:	mov	r0, r6
   138e0:	mov	r1, #1
   138e4:	mov	r2, r4
   138e8:	bl	1169c <__fprintf_chk@plt>
   138ec:	bl	118a8 <__assert_fail@plt+0x134>
   138f0:	movw	r1, #25268	; 0x62b4
   138f4:	movt	r1, #3
   138f8:	str	r0, [r1]
   138fc:	bx	lr
   13900:	movw	r1, #25272	; 0x62b8
   13904:	movt	r1, #3
   13908:	strb	r0, [r1]
   1390c:	bx	lr
   13910:	push	{r4, r5, r6, sl, fp, lr}
   13914:	add	fp, sp, #16
   13918:	sub	sp, sp, #8
   1391c:	movw	r0, #25020	; 0x61bc
   13920:	movt	r0, #3
   13924:	ldr	r0, [r0]
   13928:	bl	23c64 <__assert_fail@plt+0x124f0>
   1392c:	cmp	r0, #0
   13930:	beq	13958 <__assert_fail@plt+0x21e4>
   13934:	movw	r0, #25272	; 0x62b8
   13938:	movt	r0, #3
   1393c:	ldrb	r0, [r0]
   13940:	cmp	r0, #0
   13944:	beq	13978 <__assert_fail@plt+0x2204>
   13948:	bl	11630 <__errno_location@plt>
   1394c:	ldr	r0, [r0]
   13950:	cmp	r0, #32
   13954:	bne	13978 <__assert_fail@plt+0x2204>
   13958:	movw	r0, #25016	; 0x61b8
   1395c:	movt	r0, #3
   13960:	ldr	r0, [r0]
   13964:	bl	23c64 <__assert_fail@plt+0x124f0>
   13968:	cmp	r0, #0
   1396c:	subeq	sp, fp, #16
   13970:	popeq	{r4, r5, r6, sl, fp, pc}
   13974:	b	139e8 <__assert_fail@plt+0x2274>
   13978:	movw	r1, #20487	; 0x5007
   1397c:	mov	r0, #0
   13980:	mov	r2, #5
   13984:	movt	r1, #2
   13988:	bl	114ec <dcgettext@plt>
   1398c:	mov	r4, r0
   13990:	movw	r0, #25268	; 0x62b4
   13994:	movt	r0, #3
   13998:	ldr	r6, [r0]
   1399c:	bl	11630 <__errno_location@plt>
   139a0:	ldr	r5, [r0]
   139a4:	cmp	r6, #0
   139a8:	bne	139c4 <__assert_fail@plt+0x2250>
   139ac:	movw	r2, #19375	; 0x4baf
   139b0:	mov	r0, #0
   139b4:	mov	r1, r5
   139b8:	mov	r3, r4
   139bc:	movt	r2, #2
   139c0:	b	139e4 <__assert_fail@plt+0x2270>
   139c4:	mov	r0, r6
   139c8:	bl	15550 <__assert_fail@plt+0x3ddc>
   139cc:	movw	r2, #20499	; 0x5013
   139d0:	mov	r3, r0
   139d4:	str	r4, [sp]
   139d8:	mov	r0, #0
   139dc:	mov	r1, r5
   139e0:	movt	r2, #2
   139e4:	bl	115a0 <error@plt>
   139e8:	movw	r0, #24928	; 0x6160
   139ec:	movt	r0, #3
   139f0:	ldr	r0, [r0]
   139f4:	bl	11480 <_exit@plt>
   139f8:	push	{r4, r5, r6, sl, fp, lr}
   139fc:	add	fp, sp, #16
   13a00:	sub	sp, sp, #8
   13a04:	mov	r4, r0
   13a08:	bl	11684 <fileno@plt>
   13a0c:	cmn	r0, #1
   13a10:	ble	13a84 <__assert_fail@plt+0x2310>
   13a14:	mov	r0, r4
   13a18:	bl	115dc <__freading@plt>
   13a1c:	cmp	r0, #0
   13a20:	beq	13a4c <__assert_fail@plt+0x22d8>
   13a24:	mov	r0, r4
   13a28:	bl	11684 <fileno@plt>
   13a2c:	mov	r1, #1
   13a30:	mov	r2, #0
   13a34:	mov	r3, #0
   13a38:	str	r1, [sp]
   13a3c:	bl	11558 <lseek64@plt>
   13a40:	and	r0, r0, r1
   13a44:	cmn	r0, #1
   13a48:	beq	13a84 <__assert_fail@plt+0x2310>
   13a4c:	mov	r0, r4
   13a50:	bl	13afc <__assert_fail@plt+0x2388>
   13a54:	cmp	r0, #0
   13a58:	beq	13a84 <__assert_fail@plt+0x2310>
   13a5c:	bl	11630 <__errno_location@plt>
   13a60:	ldr	r6, [r0]
   13a64:	mov	r5, r0
   13a68:	mov	r0, r4
   13a6c:	bl	116b4 <fclose@plt>
   13a70:	cmp	r6, #0
   13a74:	strne	r6, [r5]
   13a78:	mvnne	r0, #0
   13a7c:	sub	sp, fp, #16
   13a80:	pop	{r4, r5, r6, sl, fp, pc}
   13a84:	mov	r0, r4
   13a88:	sub	sp, fp, #16
   13a8c:	pop	{r4, r5, r6, sl, fp, lr}
   13a90:	b	116b4 <fclose@plt>
   13a94:	push	{r4, r5, r6, r7, fp, lr}
   13a98:	add	fp, sp, #16
   13a9c:	mov	r5, r0
   13aa0:	mov	r0, r1
   13aa4:	mov	r1, r2
   13aa8:	mov	r2, r3
   13aac:	bl	115ac <open64@plt>
   13ab0:	mov	r4, r0
   13ab4:	cmp	r0, r5
   13ab8:	beq	13af4 <__assert_fail@plt+0x2380>
   13abc:	cmp	r4, #0
   13ac0:	blt	13af4 <__assert_fail@plt+0x2380>
   13ac4:	mov	r0, r4
   13ac8:	mov	r1, r5
   13acc:	bl	11504 <dup2@plt>
   13ad0:	mov	r5, r0
   13ad4:	bl	11630 <__errno_location@plt>
   13ad8:	ldr	r7, [r0]
   13adc:	mov	r6, r0
   13ae0:	mov	r0, r4
   13ae4:	bl	1175c <close@plt>
   13ae8:	mov	r0, r5
   13aec:	str	r7, [r6]
   13af0:	pop	{r4, r5, r6, r7, fp, pc}
   13af4:	mov	r0, r4
   13af8:	pop	{r4, r5, r6, r7, fp, pc}
   13afc:	push	{r4, sl, fp, lr}
   13b00:	add	fp, sp, #8
   13b04:	sub	sp, sp, #8
   13b08:	mov	r4, r0
   13b0c:	cmp	r0, #0
   13b10:	beq	13b2c <__assert_fail@plt+0x23b8>
   13b14:	mov	r0, r4
   13b18:	bl	115dc <__freading@plt>
   13b1c:	cmp	r0, #0
   13b20:	ldrbne	r0, [r4, #1]
   13b24:	tstne	r0, #1
   13b28:	bne	13b3c <__assert_fail@plt+0x23c8>
   13b2c:	mov	r0, r4
   13b30:	sub	sp, fp, #8
   13b34:	pop	{r4, sl, fp, lr}
   13b38:	b	11444 <fflush@plt>
   13b3c:	mov	r0, #1
   13b40:	mov	r2, #0
   13b44:	mov	r3, #0
   13b48:	str	r0, [sp]
   13b4c:	mov	r0, r4
   13b50:	bl	13c2c <__assert_fail@plt+0x24b8>
   13b54:	b	13b2c <__assert_fail@plt+0x23b8>
   13b58:	push	{r4, r5, r6, r7, fp, lr}
   13b5c:	add	fp, sp, #16
   13b60:	mov	r5, r1
   13b64:	bl	11714 <fopen64@plt>
   13b68:	mov	r4, #0
   13b6c:	cmp	r0, #0
   13b70:	beq	13bfc <__assert_fail@plt+0x2488>
   13b74:	mov	r6, r0
   13b78:	bl	11684 <fileno@plt>
   13b7c:	cmp	r0, #2
   13b80:	bhi	13bdc <__assert_fail@plt+0x2468>
   13b84:	bl	22440 <__assert_fail@plt+0x10ccc>
   13b88:	cmn	r0, #1
   13b8c:	ble	13be4 <__assert_fail@plt+0x2470>
   13b90:	mov	r7, r0
   13b94:	mov	r0, r6
   13b98:	bl	139f8 <__assert_fail@plt+0x2284>
   13b9c:	cmp	r0, #0
   13ba0:	bne	13bbc <__assert_fail@plt+0x2448>
   13ba4:	mov	r0, r7
   13ba8:	mov	r1, r5
   13bac:	bl	113cc <fdopen@plt>
   13bb0:	mov	r4, r0
   13bb4:	cmp	r0, #0
   13bb8:	bne	13bfc <__assert_fail@plt+0x2488>
   13bbc:	bl	11630 <__errno_location@plt>
   13bc0:	ldr	r5, [r0]
   13bc4:	mov	r4, r0
   13bc8:	mov	r0, r7
   13bcc:	bl	1175c <close@plt>
   13bd0:	str	r5, [r4]
   13bd4:	mov	r4, #0
   13bd8:	b	13bfc <__assert_fail@plt+0x2488>
   13bdc:	mov	r4, r6
   13be0:	b	13bfc <__assert_fail@plt+0x2488>
   13be4:	bl	11630 <__errno_location@plt>
   13be8:	ldr	r7, [r0]
   13bec:	mov	r5, r0
   13bf0:	mov	r0, r6
   13bf4:	bl	139f8 <__assert_fail@plt+0x2284>
   13bf8:	str	r7, [r5]
   13bfc:	mov	r0, r4
   13c00:	pop	{r4, r5, r6, r7, fp, pc}
   13c04:	push	{r4, r5, r6, sl, fp, lr}
   13c08:	add	fp, sp, #16
   13c0c:	mov	r4, r0
   13c10:	bl	11630 <__errno_location@plt>
   13c14:	ldr	r6, [r0]
   13c18:	mov	r5, r0
   13c1c:	mov	r0, r4
   13c20:	bl	11468 <free@plt>
   13c24:	str	r6, [r5]
   13c28:	pop	{r4, r5, r6, sl, fp, pc}
   13c2c:	push	{r4, r5, r6, r7, fp, lr}
   13c30:	add	fp, sp, #16
   13c34:	sub	sp, sp, #8
   13c38:	mov	r4, r0
   13c3c:	ldr	r0, [r0, #4]
   13c40:	mov	r5, r3
   13c44:	mov	r6, r2
   13c48:	ldr	r1, [r4, #8]
   13c4c:	cmp	r1, r0
   13c50:	bne	13c6c <__assert_fail@plt+0x24f8>
   13c54:	ldrd	r0, [r4, #16]
   13c58:	cmp	r1, r0
   13c5c:	bne	13c6c <__assert_fail@plt+0x24f8>
   13c60:	ldr	r0, [r4, #36]	; 0x24
   13c64:	cmp	r0, #0
   13c68:	beq	13c84 <__assert_fail@plt+0x2510>
   13c6c:	mov	r0, r4
   13c70:	mov	r2, r6
   13c74:	mov	r3, r5
   13c78:	sub	sp, fp, #16
   13c7c:	pop	{r4, r5, r6, r7, fp, lr}
   13c80:	b	116c0 <fseeko64@plt>
   13c84:	ldr	r7, [fp, #8]
   13c88:	mov	r0, r4
   13c8c:	bl	11684 <fileno@plt>
   13c90:	mov	r2, r6
   13c94:	mov	r3, r5
   13c98:	str	r7, [sp]
   13c9c:	bl	11558 <lseek64@plt>
   13ca0:	and	r2, r0, r1
   13ca4:	cmn	r2, #1
   13ca8:	beq	13cc4 <__assert_fail@plt+0x2550>
   13cac:	strd	r0, [r4, #80]	; 0x50
   13cb0:	ldr	r0, [r4]
   13cb4:	bic	r0, r0, #16
   13cb8:	str	r0, [r4]
   13cbc:	mov	r0, #0
   13cc0:	b	13cc8 <__assert_fail@plt+0x2554>
   13cc4:	mvn	r0, #0
   13cc8:	sub	sp, fp, #16
   13ccc:	pop	{r4, r5, r6, r7, fp, pc}
   13cd0:	push	{r4, r5, r6, sl, fp, lr}
   13cd4:	add	fp, sp, #16
   13cd8:	mov	r5, r0
   13cdc:	mov	r0, #0
   13ce0:	mov	r4, r1
   13ce4:	add	r6, r2, #19
   13ce8:	cmp	r1, #0
   13cec:	strb	r0, [r2, #20]
   13cf0:	blt	13d3c <__assert_fail@plt+0x25c8>
   13cf4:	mov	r0, r5
   13cf8:	mov	r1, r4
   13cfc:	mov	r2, #10
   13d00:	mov	r3, #0
   13d04:	bl	24144 <__assert_fail@plt+0x129d0>
   13d08:	add	r2, r0, r0, lsl #2
   13d0c:	sub	r2, r5, r2, lsl #1
   13d10:	add	r2, r2, #48	; 0x30
   13d14:	strb	r2, [r6], #-1
   13d18:	adds	r2, r5, #9
   13d1c:	mov	r5, r0
   13d20:	adc	r3, r4, #0
   13d24:	rsbs	r2, r2, #18
   13d28:	mov	r4, r1
   13d2c:	rscs	r2, r3, #0
   13d30:	bcc	13cf4 <__assert_fail@plt+0x2580>
   13d34:	add	r6, r6, #1
   13d38:	b	13d84 <__assert_fail@plt+0x2610>
   13d3c:	mov	r0, r5
   13d40:	mov	r1, r4
   13d44:	mov	r2, #10
   13d48:	mov	r3, #0
   13d4c:	bl	24144 <__assert_fail@plt+0x129d0>
   13d50:	add	r2, r0, r0, lsl #2
   13d54:	rsb	r2, r5, r2, lsl #1
   13d58:	add	r2, r2, #48	; 0x30
   13d5c:	strb	r2, [r6], #-1
   13d60:	adds	r2, r5, #9
   13d64:	mov	r5, r0
   13d68:	adc	r3, r4, #0
   13d6c:	rsbs	r2, r2, #18
   13d70:	mov	r4, r1
   13d74:	rscs	r2, r3, #0
   13d78:	bcc	13d3c <__assert_fail@plt+0x25c8>
   13d7c:	mov	r0, #45	; 0x2d
   13d80:	strb	r0, [r6]
   13d84:	mov	r0, r6
   13d88:	pop	{r4, r5, r6, sl, fp, pc}
   13d8c:	push	{r4, r5, fp, lr}
   13d90:	add	fp, sp, #8
   13d94:	cmp	r0, #0
   13d98:	beq	13e2c <__assert_fail@plt+0x26b8>
   13d9c:	mov	r1, #47	; 0x2f
   13da0:	mov	r4, r0
   13da4:	bl	116fc <strrchr@plt>
   13da8:	cmp	r0, #0
   13dac:	mov	r5, r4
   13db0:	addne	r5, r0, #1
   13db4:	sub	r0, r5, r4
   13db8:	cmp	r0, #7
   13dbc:	blt	13e10 <__assert_fail@plt+0x269c>
   13dc0:	movw	r1, #20562	; 0x5052
   13dc4:	sub	r0, r5, #7
   13dc8:	mov	r2, #7
   13dcc:	movt	r1, #2
   13dd0:	bl	11744 <strncmp@plt>
   13dd4:	cmp	r0, #0
   13dd8:	bne	13e10 <__assert_fail@plt+0x269c>
   13ddc:	movw	r1, #20570	; 0x505a
   13de0:	mov	r0, r5
   13de4:	mov	r2, #3
   13de8:	movt	r1, #2
   13dec:	bl	11744 <strncmp@plt>
   13df0:	cmp	r0, #0
   13df4:	beq	13e00 <__assert_fail@plt+0x268c>
   13df8:	mov	r4, r5
   13dfc:	b	13e10 <__assert_fail@plt+0x269c>
   13e00:	movw	r0, #25000	; 0x61a8
   13e04:	add	r4, r5, #3
   13e08:	movt	r0, #3
   13e0c:	str	r4, [r0]
   13e10:	movw	r0, #25004	; 0x61ac
   13e14:	movt	r0, #3
   13e18:	str	r4, [r0]
   13e1c:	movw	r0, #25276	; 0x62bc
   13e20:	movt	r0, #3
   13e24:	str	r4, [r0]
   13e28:	pop	{r4, r5, fp, pc}
   13e2c:	movw	r0, #25016	; 0x61b8
   13e30:	movt	r0, #3
   13e34:	ldr	r1, [r0]
   13e38:	movw	r0, #20506	; 0x501a
   13e3c:	movt	r0, #2
   13e40:	bl	11738 <fputs@plt>
   13e44:	bl	11750 <abort@plt>
   13e48:	push	{r4, r5, r6, sl, fp, lr}
   13e4c:	add	fp, sp, #16
   13e50:	mov	r4, r0
   13e54:	movw	r0, #25280	; 0x62c0
   13e58:	movt	r0, #3
   13e5c:	cmp	r4, #0
   13e60:	moveq	r4, r0
   13e64:	bl	11630 <__errno_location@plt>
   13e68:	ldr	r6, [r0]
   13e6c:	mov	r5, r0
   13e70:	mov	r0, r4
   13e74:	mov	r1, #48	; 0x30
   13e78:	bl	22c58 <__assert_fail@plt+0x114e4>
   13e7c:	str	r6, [r5]
   13e80:	pop	{r4, r5, r6, sl, fp, pc}
   13e84:	movw	r1, #25280	; 0x62c0
   13e88:	cmp	r0, #0
   13e8c:	movt	r1, #3
   13e90:	movne	r1, r0
   13e94:	ldr	r0, [r1]
   13e98:	bx	lr
   13e9c:	movw	r2, #25280	; 0x62c0
   13ea0:	cmp	r0, #0
   13ea4:	movt	r2, #3
   13ea8:	movne	r2, r0
   13eac:	str	r1, [r2]
   13eb0:	bx	lr
   13eb4:	movw	r3, #25280	; 0x62c0
   13eb8:	cmp	r0, #0
   13ebc:	movt	r3, #3
   13ec0:	movne	r3, r0
   13ec4:	ubfx	r0, r1, #5, #3
   13ec8:	and	r1, r1, #31
   13ecc:	add	r0, r3, r0, lsl #2
   13ed0:	ldr	r3, [r0, #8]
   13ed4:	eor	r2, r2, r3, lsr r1
   13ed8:	and	r2, r2, #1
   13edc:	eor	r2, r3, r2, lsl r1
   13ee0:	str	r2, [r0, #8]
   13ee4:	mov	r0, #1
   13ee8:	and	r0, r0, r3, lsr r1
   13eec:	bx	lr
   13ef0:	movw	r2, #25280	; 0x62c0
   13ef4:	cmp	r0, #0
   13ef8:	movt	r2, #3
   13efc:	movne	r2, r0
   13f00:	ldr	r0, [r2, #4]
   13f04:	str	r1, [r2, #4]
   13f08:	bx	lr
   13f0c:	movw	r3, #25280	; 0x62c0
   13f10:	cmp	r0, #0
   13f14:	movt	r3, #3
   13f18:	movne	r3, r0
   13f1c:	cmp	r1, #0
   13f20:	mov	r0, #10
   13f24:	cmpne	r2, #0
   13f28:	str	r0, [r3]
   13f2c:	bne	13f3c <__assert_fail@plt+0x27c8>
   13f30:	push	{fp, lr}
   13f34:	mov	fp, sp
   13f38:	bl	11750 <abort@plt>
   13f3c:	str	r1, [r3, #40]	; 0x28
   13f40:	str	r2, [r3, #44]	; 0x2c
   13f44:	bx	lr
   13f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f4c:	add	fp, sp, #28
   13f50:	sub	sp, sp, #20
   13f54:	mov	r7, r0
   13f58:	ldr	r0, [fp, #8]
   13f5c:	movw	r5, #25280	; 0x62c0
   13f60:	mov	r8, r3
   13f64:	mov	r9, r2
   13f68:	mov	sl, r1
   13f6c:	movt	r5, #3
   13f70:	cmp	r0, #0
   13f74:	movne	r5, r0
   13f78:	bl	11630 <__errno_location@plt>
   13f7c:	mov	r4, r0
   13f80:	ldm	r5, {r0, r1}
   13f84:	ldr	r2, [r5, #40]	; 0x28
   13f88:	ldr	r3, [r5, #44]	; 0x2c
   13f8c:	add	r5, r5, #8
   13f90:	ldr	r6, [r4]
   13f94:	stm	sp, {r0, r1, r5}
   13f98:	str	r2, [sp, #12]
   13f9c:	str	r3, [sp, #16]
   13fa0:	mov	r0, r7
   13fa4:	mov	r1, sl
   13fa8:	mov	r2, r9
   13fac:	mov	r3, r8
   13fb0:	bl	13fc0 <__assert_fail@plt+0x284c>
   13fb4:	str	r6, [r4]
   13fb8:	sub	sp, fp, #28
   13fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc4:	add	fp, sp, #28
   13fc8:	sub	sp, sp, #156	; 0x9c
   13fcc:	str	r0, [fp, #-56]	; 0xffffffc8
   13fd0:	ldr	r0, [fp, #12]
   13fd4:	mov	r4, r1
   13fd8:	str	r3, [sp, #80]	; 0x50
   13fdc:	str	r2, [fp, #-84]	; 0xffffffac
   13fe0:	and	r1, r0, #4
   13fe4:	str	r1, [sp, #24]
   13fe8:	and	r1, r0, #1
   13fec:	str	r1, [sp, #28]
   13ff0:	ubfx	r7, r0, #1, #1
   13ff4:	bl	11564 <__ctype_get_mb_cur_max@plt>
   13ff8:	str	r0, [sp, #32]
   13ffc:	ldr	r0, [fp, #24]
   14000:	ldr	r9, [fp, #8]
   14004:	mov	r2, #0
   14008:	mov	r1, #0
   1400c:	mov	r5, #0
   14010:	str	r2, [sp, #52]	; 0x34
   14014:	mov	r2, #1
   14018:	str	r0, [sp, #72]	; 0x48
   1401c:	ldr	r0, [fp, #20]
   14020:	str	r0, [sp, #64]	; 0x40
   14024:	mov	r0, #0
   14028:	str	r0, [sp, #92]	; 0x5c
   1402c:	mov	r0, #0
   14030:	str	r0, [fp, #-76]	; 0xffffffb4
   14034:	mov	r0, #0
   14038:	cmp	r9, #10
   1403c:	str	r1, [sp, #68]	; 0x44
   14040:	bhi	15040 <__assert_fail@plt+0x38cc>
   14044:	add	r1, pc, #28
   14048:	ldr	ip, [fp, #-84]	; 0xffffffac
   1404c:	ldr	lr, [sp, #80]	; 0x50
   14050:	mov	r6, r4
   14054:	mov	r8, #0
   14058:	mov	r3, #1
   1405c:	mov	sl, #0
   14060:	mov	r4, r2
   14064:	ldr	pc, [r1, r9, lsl #2]
   14068:	andeq	r4, r1, r8, lsr r1
   1406c:	andeq	r4, r1, r4, ror r1
   14070:	andeq	r4, r1, r8, asr #2
   14074:	andeq	r4, r1, r0, lsr r1
   14078:	andeq	r4, r1, r8, ror #2
   1407c:	andeq	r4, r1, r0, asr #3
   14080:	andeq	r4, r1, r8, asr r1
   14084:	andeq	r4, r1, r0, lsr #4
   14088:	muleq	r1, r4, r0
   1408c:	muleq	r1, r4, r0
   14090:	strheq	r4, [r1], -ip
   14094:	movw	r0, #20652	; 0x50ac
   14098:	mov	r1, r9
   1409c:	movt	r0, #2
   140a0:	bl	157a8 <__assert_fail@plt+0x4034>
   140a4:	str	r0, [sp, #64]	; 0x40
   140a8:	movw	r0, #19622	; 0x4ca6
   140ac:	mov	r1, r9
   140b0:	movt	r0, #2
   140b4:	bl	157a8 <__assert_fail@plt+0x4034>
   140b8:	str	r0, [sp, #72]	; 0x48
   140bc:	mov	r8, #0
   140c0:	mov	sl, r7
   140c4:	tst	r7, #1
   140c8:	str	r5, [fp, #-48]	; 0xffffffd0
   140cc:	bne	14108 <__assert_fail@plt+0x2994>
   140d0:	ldr	r0, [sp, #64]	; 0x40
   140d4:	ldrb	r0, [r0]
   140d8:	cmp	r0, #0
   140dc:	beq	14108 <__assert_fail@plt+0x2994>
   140e0:	ldr	r1, [sp, #64]	; 0x40
   140e4:	mov	r8, #0
   140e8:	add	r1, r1, #1
   140ec:	cmp	r8, r6
   140f0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   140f4:	strbcc	r0, [r2, r8]
   140f8:	ldrb	r0, [r1, r8]
   140fc:	add	r8, r8, #1
   14100:	cmp	r0, #0
   14104:	bne	140ec <__assert_fail@plt+0x2978>
   14108:	ldr	r7, [sp, #72]	; 0x48
   1410c:	mov	r0, r7
   14110:	bl	11618 <strlen@plt>
   14114:	ldr	ip, [fp, #-84]	; 0xffffffac
   14118:	ldr	lr, [sp, #80]	; 0x50
   1411c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14120:	str	r0, [fp, #-76]	; 0xffffffb4
   14124:	str	r7, [sp, #92]	; 0x5c
   14128:	mov	r3, #1
   1412c:	b	14220 <__assert_fail@plt+0x2aac>
   14130:	mov	r0, #1
   14134:	b	14174 <__assert_fail@plt+0x2a00>
   14138:	mov	r9, #0
   1413c:	mov	r8, #0
   14140:	mov	r3, r0
   14144:	b	1421c <__assert_fail@plt+0x2aa8>
   14148:	tst	r7, #1
   1414c:	bne	14174 <__assert_fail@plt+0x2a00>
   14150:	mov	r3, r0
   14154:	b	1419c <__assert_fail@plt+0x2a28>
   14158:	mov	r0, #1
   1415c:	mov	r8, #0
   14160:	mov	r9, #5
   14164:	b	141d4 <__assert_fail@plt+0x2a60>
   14168:	mov	r3, #1
   1416c:	tst	r7, #1
   14170:	beq	1419c <__assert_fail@plt+0x2a28>
   14174:	mov	r1, #1
   14178:	mov	r8, #0
   1417c:	mov	r9, #2
   14180:	mov	r3, r0
   14184:	mov	sl, #1
   14188:	str	r1, [fp, #-76]	; 0xffffffb4
   1418c:	movw	r1, #19622	; 0x4ca6
   14190:	movt	r1, #2
   14194:	str	r1, [sp, #92]	; 0x5c
   14198:	b	14220 <__assert_fail@plt+0x2aac>
   1419c:	cmp	r6, #0
   141a0:	mov	r8, #1
   141a4:	mov	r9, #2
   141a8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   141ac:	movne	r0, #39	; 0x27
   141b0:	strbne	r0, [r1]
   141b4:	movw	r0, #19622	; 0x4ca6
   141b8:	movt	r0, #2
   141bc:	b	14210 <__assert_fail@plt+0x2a9c>
   141c0:	mov	r9, #5
   141c4:	tst	r7, #1
   141c8:	beq	141f0 <__assert_fail@plt+0x2a7c>
   141cc:	mov	r0, #1
   141d0:	mov	r8, #0
   141d4:	str	r0, [fp, #-76]	; 0xffffffb4
   141d8:	movw	r0, #20650	; 0x50aa
   141dc:	mov	r3, #1
   141e0:	mov	sl, #1
   141e4:	movt	r0, #2
   141e8:	str	r0, [sp, #92]	; 0x5c
   141ec:	b	14220 <__assert_fail@plt+0x2aac>
   141f0:	cmp	r6, #0
   141f4:	mov	r8, #1
   141f8:	mov	r3, #1
   141fc:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   14200:	movne	r0, #34	; 0x22
   14204:	strbne	r0, [r1]
   14208:	movw	r0, #20650	; 0x50aa
   1420c:	movt	r0, #2
   14210:	str	r0, [sp, #92]	; 0x5c
   14214:	mov	r0, #1
   14218:	str	r0, [fp, #-76]	; 0xffffffb4
   1421c:	mov	sl, #0
   14220:	ldr	r0, [fp, #16]
   14224:	mov	r7, #0
   14228:	str	r9, [fp, #-64]	; 0xffffffc0
   1422c:	str	sl, [fp, #-72]	; 0xffffffb8
   14230:	str	r3, [sp, #84]	; 0x54
   14234:	cmp	r0, #0
   14238:	movwne	r0, #1
   1423c:	and	r0, r0, sl
   14240:	str	r0, [fp, #-88]	; 0xffffffa8
   14244:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14248:	cmp	r0, #0
   1424c:	movwne	r0, #1
   14250:	subs	r2, r9, #2
   14254:	and	r1, r0, sl
   14258:	str	r2, [fp, #-80]	; 0xffffffb0
   1425c:	and	r1, r3, r1
   14260:	str	r1, [sp, #44]	; 0x2c
   14264:	clz	r1, r2
   14268:	lsr	r1, r1, #5
   1426c:	and	r1, r1, sl
   14270:	str	r1, [sp, #56]	; 0x38
   14274:	mov	r1, r2
   14278:	eor	r2, sl, #1
   1427c:	movwne	r1, #1
   14280:	str	r2, [sp, #88]	; 0x58
   14284:	orr	r2, r1, r2
   14288:	and	r1, r1, r3
   1428c:	and	r0, r0, r1
   14290:	str	r2, [sp, #60]	; 0x3c
   14294:	str	r1, [fp, #-68]	; 0xffffffbc
   14298:	str	r0, [fp, #-60]	; 0xffffffc4
   1429c:	eor	r0, r3, #1
   142a0:	str	r0, [sp, #48]	; 0x30
   142a4:	cmn	lr, #1
   142a8:	beq	142b8 <__assert_fail@plt+0x2b44>
   142ac:	cmp	r7, lr
   142b0:	bne	142c4 <__assert_fail@plt+0x2b50>
   142b4:	b	14e70 <__assert_fail@plt+0x36fc>
   142b8:	ldrb	r0, [ip, r7]
   142bc:	cmp	r0, #0
   142c0:	beq	14e78 <__assert_fail@plt+0x3704>
   142c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   142c8:	mov	r9, #0
   142cc:	str	r5, [fp, #-48]	; 0xffffffd0
   142d0:	str	r6, [fp, #-52]	; 0xffffffcc
   142d4:	cmp	r0, #0
   142d8:	beq	14318 <__assert_fail@plt+0x2ba4>
   142dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142e0:	mov	r5, r4
   142e4:	add	r4, r7, r0
   142e8:	cmp	r0, #2
   142ec:	bcc	14308 <__assert_fail@plt+0x2b94>
   142f0:	cmn	lr, #1
   142f4:	bne	14308 <__assert_fail@plt+0x2b94>
   142f8:	mov	r0, ip
   142fc:	bl	11618 <strlen@plt>
   14300:	ldr	ip, [fp, #-84]	; 0xffffffac
   14304:	mov	lr, r0
   14308:	cmp	r4, lr
   1430c:	bls	14320 <__assert_fail@plt+0x2bac>
   14310:	mov	r6, #0
   14314:	b	14360 <__assert_fail@plt+0x2bec>
   14318:	mov	r6, #0
   1431c:	b	14364 <__assert_fail@plt+0x2bf0>
   14320:	ldr	r1, [sp, #92]	; 0x5c
   14324:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14328:	add	r0, ip, r7
   1432c:	mov	r4, lr
   14330:	bl	114e0 <memcmp@plt>
   14334:	ldr	r2, [sp, #88]	; 0x58
   14338:	cmp	r0, #0
   1433c:	mov	r1, r0
   14340:	movwne	r1, #1
   14344:	orr	r1, r1, r2
   14348:	tst	r1, #1
   1434c:	beq	14f0c <__assert_fail@plt+0x3798>
   14350:	ldr	ip, [fp, #-84]	; 0xffffffac
   14354:	clz	r0, r0
   14358:	mov	lr, r4
   1435c:	lsr	r6, r0, #5
   14360:	mov	r4, r5
   14364:	ldrb	r5, [ip, r7]
   14368:	cmp	r5, #126	; 0x7e
   1436c:	bhi	14734 <__assert_fail@plt+0x2fc0>
   14370:	add	r3, pc, #16
   14374:	mov	sl, #1
   14378:	mov	r2, #110	; 0x6e
   1437c:	mov	r0, #97	; 0x61
   14380:	mov	r1, #0
   14384:	ldr	pc, [r3, r5, lsl #2]
   14388:	andeq	r4, r1, r8, lsl r6
   1438c:	andeq	r4, r1, r4, lsr r7
   14390:	andeq	r4, r1, r4, lsr r7
   14394:	andeq	r4, r1, r4, lsr r7
   14398:	andeq	r4, r1, r4, lsr r7
   1439c:	andeq	r4, r1, r4, lsr r7
   143a0:	andeq	r4, r1, r4, lsr r7
   143a4:	ldrdeq	r4, [r1], -r8
   143a8:	strdeq	r4, [r1], -r8
   143ac:	strdeq	r4, [r1], -r0
   143b0:	andeq	r4, r1, r4, lsl #12
   143b4:	andeq	r4, r1, r8, lsl #13
   143b8:	andeq	r4, r1, r8, ror #11
   143bc:	andeq	r4, r1, r0, lsl #12
   143c0:	andeq	r4, r1, r4, lsr r7
   143c4:	andeq	r4, r1, r4, lsr r7
   143c8:	andeq	r4, r1, r4, lsr r7
   143cc:	andeq	r4, r1, r4, lsr r7
   143d0:	andeq	r4, r1, r4, lsr r7
   143d4:	andeq	r4, r1, r4, lsr r7
   143d8:	andeq	r4, r1, r4, lsr r7
   143dc:	andeq	r4, r1, r4, lsr r7
   143e0:	andeq	r4, r1, r4, lsr r7
   143e4:	andeq	r4, r1, r4, lsr r7
   143e8:	andeq	r4, r1, r4, lsr r7
   143ec:	andeq	r4, r1, r4, lsr r7
   143f0:	andeq	r4, r1, r4, lsr r7
   143f4:	andeq	r4, r1, r4, lsr r7
   143f8:	andeq	r4, r1, r4, lsr r7
   143fc:	andeq	r4, r1, r4, lsr r7
   14400:	andeq	r4, r1, r4, lsr r7
   14404:	andeq	r4, r1, r4, lsr r7
   14408:	muleq	r1, r8, r7
   1440c:	muleq	r1, ip, r7
   14410:	muleq	r1, ip, r7
   14414:	muleq	r1, r8, r5
   14418:	muleq	r1, ip, r7
   1441c:	andeq	r4, r1, r4, lsl #11
   14420:	muleq	r1, ip, r7
   14424:	muleq	r1, r0, r6
   14428:	muleq	r1, ip, r7
   1442c:	muleq	r1, ip, r7
   14430:	muleq	r1, ip, r7
   14434:	andeq	r4, r1, r4, lsl #11
   14438:	andeq	r4, r1, r4, lsl #11
   1443c:	andeq	r4, r1, r4, lsl #11
   14440:	andeq	r4, r1, r4, lsl #11
   14444:	andeq	r4, r1, r4, lsl #11
   14448:	andeq	r4, r1, r4, lsl #11
   1444c:	andeq	r4, r1, r4, lsl #11
   14450:	andeq	r4, r1, r4, lsl #11
   14454:	andeq	r4, r1, r4, lsl #11
   14458:	andeq	r4, r1, r4, lsl #11
   1445c:	andeq	r4, r1, r4, lsl #11
   14460:	andeq	r4, r1, r4, lsl #11
   14464:	andeq	r4, r1, r4, lsl #11
   14468:	andeq	r4, r1, r4, lsl #11
   1446c:	andeq	r4, r1, r4, lsl #11
   14470:	andeq	r4, r1, r4, lsl #11
   14474:	muleq	r1, ip, r7
   14478:	muleq	r1, ip, r7
   1447c:	muleq	r1, ip, r7
   14480:	muleq	r1, ip, r7
   14484:	andeq	r4, r1, ip, asr r6
   14488:	andeq	r4, r1, r4, lsr r7
   1448c:	andeq	r4, r1, r4, lsl #11
   14490:	andeq	r4, r1, r4, lsl #11
   14494:	andeq	r4, r1, r4, lsl #11
   14498:	andeq	r4, r1, r4, lsl #11
   1449c:	andeq	r4, r1, r4, lsl #11
   144a0:	andeq	r4, r1, r4, lsl #11
   144a4:	andeq	r4, r1, r4, lsl #11
   144a8:	andeq	r4, r1, r4, lsl #11
   144ac:	andeq	r4, r1, r4, lsl #11
   144b0:	andeq	r4, r1, r4, lsl #11
   144b4:	andeq	r4, r1, r4, lsl #11
   144b8:	andeq	r4, r1, r4, lsl #11
   144bc:	andeq	r4, r1, r4, lsl #11
   144c0:	andeq	r4, r1, r4, lsl #11
   144c4:	andeq	r4, r1, r4, lsl #11
   144c8:	andeq	r4, r1, r4, lsl #11
   144cc:	andeq	r4, r1, r4, lsl #11
   144d0:	andeq	r4, r1, r4, lsl #11
   144d4:	andeq	r4, r1, r4, lsl #11
   144d8:	andeq	r4, r1, r4, lsl #11
   144dc:	andeq	r4, r1, r4, lsl #11
   144e0:	andeq	r4, r1, r4, lsl #11
   144e4:	andeq	r4, r1, r4, lsl #11
   144e8:	andeq	r4, r1, r4, lsl #11
   144ec:	andeq	r4, r1, r4, lsl #11
   144f0:	andeq	r4, r1, r4, lsl #11
   144f4:	muleq	r1, ip, r7
   144f8:	andeq	r4, r1, r4, asr #11
   144fc:	andeq	r4, r1, r4, lsl #11
   14500:	muleq	r1, ip, r7
   14504:	andeq	r4, r1, r4, lsl #11
   14508:	muleq	r1, ip, r7
   1450c:	andeq	r4, r1, r4, lsl #11
   14510:	andeq	r4, r1, r4, lsl #11
   14514:	andeq	r4, r1, r4, lsl #11
   14518:	andeq	r4, r1, r4, lsl #11
   1451c:	andeq	r4, r1, r4, lsl #11
   14520:	andeq	r4, r1, r4, lsl #11
   14524:	andeq	r4, r1, r4, lsl #11
   14528:	andeq	r4, r1, r4, lsl #11
   1452c:	andeq	r4, r1, r4, lsl #11
   14530:	andeq	r4, r1, r4, lsl #11
   14534:	andeq	r4, r1, r4, lsl #11
   14538:	andeq	r4, r1, r4, lsl #11
   1453c:	andeq	r4, r1, r4, lsl #11
   14540:	andeq	r4, r1, r4, lsl #11
   14544:	andeq	r4, r1, r4, lsl #11
   14548:	andeq	r4, r1, r4, lsl #11
   1454c:	andeq	r4, r1, r4, lsl #11
   14550:	andeq	r4, r1, r4, lsl #11
   14554:	andeq	r4, r1, r4, lsl #11
   14558:	andeq	r4, r1, r4, lsl #11
   1455c:	andeq	r4, r1, r4, lsl #11
   14560:	andeq	r4, r1, r4, lsl #11
   14564:	andeq	r4, r1, r4, lsl #11
   14568:	andeq	r4, r1, r4, lsl #11
   1456c:	andeq	r4, r1, r4, lsl #11
   14570:	andeq	r4, r1, r4, lsl #11
   14574:	andeq	r4, r1, r8, lsr #11
   14578:	muleq	r1, ip, r7
   1457c:	andeq	r4, r1, r8, lsr #11
   14580:	muleq	r1, r8, r5
   14584:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14588:	cmp	r0, #0
   1458c:	beq	147ec <__assert_fail@plt+0x3078>
   14590:	ldr	r0, [fp, #16]
   14594:	b	147f0 <__assert_fail@plt+0x307c>
   14598:	mov	sl, #0
   1459c:	cmp	r7, #0
   145a0:	bne	14a08 <__assert_fail@plt+0x3294>
   145a4:	b	14798 <__assert_fail@plt+0x3024>
   145a8:	mov	sl, #0
   145ac:	cmn	lr, #1
   145b0:	beq	14784 <__assert_fail@plt+0x3010>
   145b4:	cmp	r7, #0
   145b8:	cmpeq	lr, #1
   145bc:	bne	14a08 <__assert_fail@plt+0x3294>
   145c0:	b	14798 <__assert_fail@plt+0x3024>
   145c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145c8:	cmp	r0, #2
   145cc:	bne	147bc <__assert_fail@plt+0x3048>
   145d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145d4:	tst	r0, #1
   145d8:	bne	14f28 <__assert_fail@plt+0x37b4>
   145dc:	mov	r9, #0
   145e0:	mov	r0, #92	; 0x5c
   145e4:	b	147d0 <__assert_fail@plt+0x305c>
   145e8:	mov	r0, #102	; 0x66
   145ec:	b	147d8 <__assert_fail@plt+0x3064>
   145f0:	mov	r2, #116	; 0x74
   145f4:	b	14604 <__assert_fail@plt+0x2e90>
   145f8:	mov	r0, #98	; 0x62
   145fc:	b	147d8 <__assert_fail@plt+0x3064>
   14600:	mov	r2, #114	; 0x72
   14604:	ldr	r0, [sp, #60]	; 0x3c
   14608:	tst	r0, #1
   1460c:	mov	r0, r2
   14610:	bne	147d8 <__assert_fail@plt+0x3064>
   14614:	b	14f28 <__assert_fail@plt+0x37b4>
   14618:	ldr	r0, [sp, #84]	; 0x54
   1461c:	tst	r0, #1
   14620:	beq	148c4 <__assert_fail@plt+0x3150>
   14624:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14628:	tst	r0, #1
   1462c:	bne	15030 <__assert_fail@plt+0x38bc>
   14630:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14634:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14638:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1463c:	cmp	r0, #2
   14640:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14644:	movwne	r0, #1
   14648:	orr	r0, r0, r3
   1464c:	tst	r0, #1
   14650:	beq	14d44 <__assert_fail@plt+0x35d0>
   14654:	mov	r0, r8
   14658:	b	14d84 <__assert_fail@plt+0x3610>
   1465c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14660:	mov	r9, #0
   14664:	mov	r5, #63	; 0x3f
   14668:	cmp	r0, #5
   1466c:	beq	14a10 <__assert_fail@plt+0x329c>
   14670:	cmp	r0, #2
   14674:	bne	14ad0 <__assert_fail@plt+0x335c>
   14678:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1467c:	tst	r0, #1
   14680:	beq	14ad4 <__assert_fail@plt+0x3360>
   14684:	b	14f28 <__assert_fail@plt+0x37b4>
   14688:	mov	r0, #118	; 0x76
   1468c:	b	147d8 <__assert_fail@plt+0x3064>
   14690:	mov	r0, #1
   14694:	mov	r5, #39	; 0x27
   14698:	str	r0, [sp, #52]	; 0x34
   1469c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   146a0:	cmp	r0, #2
   146a4:	bne	1472c <__assert_fail@plt+0x2fb8>
   146a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   146ac:	tst	r0, #1
   146b0:	bne	14f28 <__assert_fail@plt+0x37b4>
   146b4:	ldr	r3, [sp, #68]	; 0x44
   146b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   146bc:	mov	r9, #0
   146c0:	clz	r1, r2
   146c4:	cmp	r3, #0
   146c8:	mov	r0, r3
   146cc:	movwne	r0, #1
   146d0:	lsr	r1, r1, #5
   146d4:	orrs	r0, r0, r1
   146d8:	moveq	r3, r2
   146dc:	moveq	r2, r0
   146e0:	cmp	r8, r2
   146e4:	str	r3, [sp, #68]	; 0x44
   146e8:	str	r2, [fp, #-52]	; 0xffffffcc
   146ec:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   146f0:	movcc	r0, #39	; 0x27
   146f4:	strbcc	r0, [r1, r8]
   146f8:	add	r0, r8, #1
   146fc:	cmp	r0, r2
   14700:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14704:	movcc	r1, #92	; 0x5c
   14708:	strbcc	r1, [r3, r0]
   1470c:	add	r0, r8, #2
   14710:	add	r8, r8, #3
   14714:	cmp	r0, r2
   14718:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1471c:	movcc	r1, #39	; 0x27
   14720:	strbcc	r1, [r2, r0]
   14724:	mov	r0, #0
   14728:	str	r0, [fp, #-48]	; 0xffffffd0
   1472c:	mov	sl, #1
   14730:	b	14584 <__assert_fail@plt+0x2e10>
   14734:	ldr	r0, [sp, #32]
   14738:	cmp	r0, #1
   1473c:	bne	148e8 <__assert_fail@plt+0x3174>
   14740:	str	lr, [sp, #80]	; 0x50
   14744:	bl	11600 <__ctype_b_loc@plt>
   14748:	ldr	r0, [r0]
   1474c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14750:	mov	r1, #1
   14754:	add	r0, r0, r5, lsl #1
   14758:	ldrb	r0, [r0, #1]
   1475c:	ubfx	sl, r0, #6, #1
   14760:	ldr	r0, [sp, #48]	; 0x30
   14764:	mov	r2, r1
   14768:	cmp	r1, #1
   1476c:	orr	r0, sl, r0
   14770:	bhi	14adc <__assert_fail@plt+0x3368>
   14774:	tst	r0, #1
   14778:	beq	14adc <__assert_fail@plt+0x3368>
   1477c:	ldr	lr, [sp, #80]	; 0x50
   14780:	b	14584 <__assert_fail@plt+0x2e10>
   14784:	cmp	r7, #0
   14788:	bne	14a04 <__assert_fail@plt+0x3290>
   1478c:	ldrb	r0, [ip, #1]
   14790:	cmp	r0, #0
   14794:	bne	14a04 <__assert_fail@plt+0x3290>
   14798:	mov	r1, #1
   1479c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   147a0:	cmp	r0, #2
   147a4:	bne	147b4 <__assert_fail@plt+0x3040>
   147a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147ac:	tst	r0, #1
   147b0:	bne	14f28 <__assert_fail@plt+0x37b4>
   147b4:	mov	sl, r1
   147b8:	b	14584 <__assert_fail@plt+0x2e10>
   147bc:	ldr	r1, [sp, #44]	; 0x2c
   147c0:	mov	r9, #0
   147c4:	mov	r0, #92	; 0x5c
   147c8:	cmp	r1, #0
   147cc:	beq	147d8 <__assert_fail@plt+0x3064>
   147d0:	mov	sl, #0
   147d4:	b	14cf0 <__assert_fail@plt+0x357c>
   147d8:	ldr	r1, [sp, #84]	; 0x54
   147dc:	mov	sl, #0
   147e0:	mov	r9, #0
   147e4:	tst	r1, #1
   147e8:	bne	14824 <__assert_fail@plt+0x30b0>
   147ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   147f0:	cmp	r0, #0
   147f4:	mov	r0, r5
   147f8:	beq	1481c <__assert_fail@plt+0x30a8>
   147fc:	ldr	r1, [fp, #16]
   14800:	ubfx	r0, r5, #5, #3
   14804:	mov	r2, #1
   14808:	ldr	r0, [r1, r0, lsl #2]
   1480c:	and	r1, r5, #31
   14810:	tst	r0, r2, lsl r1
   14814:	mov	r0, r5
   14818:	bne	14824 <__assert_fail@plt+0x30b0>
   1481c:	cmp	r6, #0
   14820:	beq	14cf0 <__assert_fail@plt+0x357c>
   14824:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14828:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1482c:	tst	r1, #1
   14830:	bne	14f04 <__assert_fail@plt+0x3790>
   14834:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14838:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1483c:	cmp	r1, #2
   14840:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14844:	movwne	r1, #1
   14848:	orr	r1, r1, r5
   1484c:	tst	r1, #1
   14850:	bne	14894 <__assert_fail@plt+0x3120>
   14854:	cmp	r8, r6
   14858:	mov	r5, #1
   1485c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14860:	movcc	r1, #39	; 0x27
   14864:	strbcc	r1, [r2, r8]
   14868:	add	r1, r8, #1
   1486c:	cmp	r1, r6
   14870:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14874:	movcc	r2, #36	; 0x24
   14878:	strbcc	r2, [r3, r1]
   1487c:	add	r1, r8, #2
   14880:	add	r8, r8, #3
   14884:	cmp	r1, r6
   14888:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1488c:	movcc	r2, #39	; 0x27
   14890:	strbcc	r2, [r3, r1]
   14894:	cmp	r8, r6
   14898:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1489c:	movcc	r1, #92	; 0x5c
   148a0:	strbcc	r1, [r2, r8]
   148a4:	add	r8, r8, #1
   148a8:	cmp	r8, r6
   148ac:	and	r4, r4, sl
   148b0:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   148b4:	strbcc	r0, [r1, r8]
   148b8:	add	r8, r8, #1
   148bc:	add	r7, r7, #1
   148c0:	b	142a4 <__assert_fail@plt+0x2b30>
   148c4:	ldr	r0, [sp, #28]
   148c8:	mov	sl, #0
   148cc:	mov	r9, #0
   148d0:	mov	r5, #0
   148d4:	cmp	r0, #0
   148d8:	beq	147ec <__assert_fail@plt+0x3078>
   148dc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   148e0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   148e4:	b	148bc <__assert_fail@plt+0x3148>
   148e8:	mov	r0, #0
   148ec:	cmn	lr, #1
   148f0:	str	r6, [sp, #76]	; 0x4c
   148f4:	str	r4, [sp, #20]
   148f8:	str	r0, [fp, #-36]	; 0xffffffdc
   148fc:	str	r0, [fp, #-40]	; 0xffffffd8
   14900:	bne	14914 <__assert_fail@plt+0x31a0>
   14904:	mov	r0, ip
   14908:	bl	11618 <strlen@plt>
   1490c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14910:	mov	lr, r0
   14914:	add	r0, ip, r7
   14918:	mov	sl, #1
   1491c:	mov	r6, #0
   14920:	sub	r4, fp, #40	; 0x28
   14924:	str	lr, [sp, #80]	; 0x50
   14928:	str	r0, [sp, #36]	; 0x24
   1492c:	str	r6, [sp, #40]	; 0x28
   14930:	add	r6, r6, r7
   14934:	sub	r0, fp, #44	; 0x2c
   14938:	mov	r3, r4
   1493c:	add	r1, ip, r6
   14940:	sub	r2, lr, r6
   14944:	bl	23fb0 <__assert_fail@plt+0x1283c>
   14948:	cmp	r0, #0
   1494c:	beq	14e58 <__assert_fail@plt+0x36e4>
   14950:	cmn	r0, #1
   14954:	beq	14e18 <__assert_fail@plt+0x36a4>
   14958:	ldr	lr, [sp, #80]	; 0x50
   1495c:	cmn	r0, #2
   14960:	beq	14e20 <__assert_fail@plt+0x36ac>
   14964:	ldr	r2, [sp, #56]	; 0x38
   14968:	cmp	r0, #2
   1496c:	mov	r1, #0
   14970:	movwcc	r1, #1
   14974:	eor	r2, r2, #1
   14978:	orrs	r1, r2, r1
   1497c:	bne	149c8 <__assert_fail@plt+0x3254>
   14980:	ldr	r1, [sp, #40]	; 0x28
   14984:	ldr	r2, [sp, #36]	; 0x24
   14988:	add	ip, r2, r1
   1498c:	mov	r2, #1
   14990:	ldrb	r3, [ip, r2]
   14994:	sub	r6, r3, #94	; 0x5e
   14998:	cmp	r6, #30
   1499c:	bhi	149b0 <__assert_fail@plt+0x323c>
   149a0:	mov	r4, #1
   149a4:	mov	r1, #1073741829	; 0x40000005
   149a8:	tst	r1, r4, lsl r6
   149ac:	bne	14f24 <__assert_fail@plt+0x37b0>
   149b0:	sub	r3, r3, #91	; 0x5b
   149b4:	cmp	r3, #2
   149b8:	bcc	14f24 <__assert_fail@plt+0x37b0>
   149bc:	add	r2, r2, #1
   149c0:	cmp	r2, r0
   149c4:	bcc	14990 <__assert_fail@plt+0x321c>
   149c8:	ldr	r6, [sp, #40]	; 0x28
   149cc:	add	r6, r0, r6
   149d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   149d4:	bl	11540 <iswprint@plt>
   149d8:	cmp	r0, #0
   149dc:	sub	r4, fp, #40	; 0x28
   149e0:	movwne	r0, #1
   149e4:	and	sl, sl, r0
   149e8:	mov	r0, r4
   149ec:	bl	114bc <mbsinit@plt>
   149f0:	ldr	lr, [sp, #80]	; 0x50
   149f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   149f8:	cmp	r0, #0
   149fc:	beq	1492c <__assert_fail@plt+0x31b8>
   14a00:	b	14e60 <__assert_fail@plt+0x36ec>
   14a04:	mvn	lr, #0
   14a08:	mov	r9, #0
   14a0c:	b	14584 <__assert_fail@plt+0x2e10>
   14a10:	ldr	r0, [sp, #24]
   14a14:	cmp	r0, #0
   14a18:	beq	14ad0 <__assert_fail@plt+0x335c>
   14a1c:	add	r0, r7, #2
   14a20:	cmp	r0, lr
   14a24:	bcs	14ad0 <__assert_fail@plt+0x335c>
   14a28:	add	r1, ip, r7
   14a2c:	ldrb	r1, [r1, #1]
   14a30:	cmp	r1, #63	; 0x3f
   14a34:	bne	14ad0 <__assert_fail@plt+0x335c>
   14a38:	ldrb	r5, [ip, r0]
   14a3c:	sub	r1, r5, #33	; 0x21
   14a40:	cmp	r1, #29
   14a44:	bhi	14ad0 <__assert_fail@plt+0x335c>
   14a48:	movw	r3, #20929	; 0x51c1
   14a4c:	mov	r2, #1
   14a50:	movt	r3, #14336	; 0x3800
   14a54:	tst	r3, r2, lsl r1
   14a58:	beq	14ad0 <__assert_fail@plt+0x335c>
   14a5c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14a60:	tst	r1, #1
   14a64:	bne	15038 <__assert_fail@plt+0x38c4>
   14a68:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14a6c:	mov	r7, r0
   14a70:	cmp	r8, r1
   14a74:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14a78:	movcc	r1, #63	; 0x3f
   14a7c:	strbcc	r1, [r2, r8]
   14a80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14a84:	add	r1, r8, #1
   14a88:	cmp	r1, r2
   14a8c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14a90:	movcc	r2, #34	; 0x22
   14a94:	strbcc	r2, [r3, r1]
   14a98:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14a9c:	add	r1, r8, #2
   14aa0:	cmp	r1, r2
   14aa4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14aa8:	movcc	r2, #34	; 0x22
   14aac:	strbcc	r2, [r3, r1]
   14ab0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14ab4:	add	r1, r8, #3
   14ab8:	add	r8, r8, #4
   14abc:	cmp	r1, r2
   14ac0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14ac4:	movcc	r2, #63	; 0x3f
   14ac8:	strbcc	r2, [r3, r1]
   14acc:	b	14ad4 <__assert_fail@plt+0x3360>
   14ad0:	mov	r5, #63	; 0x3f
   14ad4:	mov	sl, #0
   14ad8:	b	14584 <__assert_fail@plt+0x2e10>
   14adc:	str	r0, [sp, #40]	; 0x28
   14ae0:	add	r0, r2, r7
   14ae4:	str	r6, [sp, #76]	; 0x4c
   14ae8:	add	r1, r7, #1
   14aec:	ldr	lr, [sp, #80]	; 0x50
   14af0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14af4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14af8:	mov	r3, #0
   14afc:	str	r0, [sp, #36]	; 0x24
   14b00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b04:	b	14b98 <__assert_fail@plt+0x3424>
   14b08:	str	r0, [sp, #76]	; 0x4c
   14b0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b10:	cmp	r9, #0
   14b14:	movwne	r9, #1
   14b18:	mvn	r7, r0
   14b1c:	orr	r7, r7, r9
   14b20:	tst	r7, #1
   14b24:	bne	14b74 <__assert_fail@plt+0x3400>
   14b28:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14b2c:	cmp	r8, r6
   14b30:	bcs	14b48 <__assert_fail@plt+0x33d4>
   14b34:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14b38:	mov	r2, r4
   14b3c:	mov	r4, #39	; 0x27
   14b40:	strb	r4, [r7, r8]
   14b44:	mov	r4, r2
   14b48:	add	r7, r8, #1
   14b4c:	cmp	r7, r6
   14b50:	bcs	14b68 <__assert_fail@plt+0x33f4>
   14b54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14b58:	mov	r2, r4
   14b5c:	mov	r4, #39	; 0x27
   14b60:	strb	r4, [r0, r7]
   14b64:	mov	r4, r2
   14b68:	add	r8, r8, #2
   14b6c:	mov	r0, #0
   14b70:	b	14b7c <__assert_fail@plt+0x3408>
   14b74:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14b78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b7c:	cmp	r8, r6
   14b80:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14b84:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14b88:	strbcc	r5, [r2, r8]
   14b8c:	add	r8, r8, #1
   14b90:	ldrb	r5, [ip, r1]
   14b94:	add	r1, r1, #1
   14b98:	ldr	r2, [sp, #40]	; 0x28
   14b9c:	tst	r2, #1
   14ba0:	beq	14bdc <__assert_fail@plt+0x3468>
   14ba4:	ldr	r2, [sp, #76]	; 0x4c
   14ba8:	str	r0, [fp, #-48]	; 0xffffffd0
   14bac:	tst	r2, #1
   14bb0:	beq	14bd4 <__assert_fail@plt+0x3460>
   14bb4:	cmp	r8, r6
   14bb8:	bcs	14bd0 <__assert_fail@plt+0x345c>
   14bbc:	ldr	r6, [fp, #-56]	; 0xffffffc8
   14bc0:	mov	r2, r4
   14bc4:	mov	r4, #92	; 0x5c
   14bc8:	strb	r4, [r6, r8]
   14bcc:	mov	r4, r2
   14bd0:	add	r8, r8, #1
   14bd4:	mov	r0, #0
   14bd8:	b	14cd0 <__assert_fail@plt+0x355c>
   14bdc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14be0:	tst	r2, #1
   14be4:	bne	14f30 <__assert_fail@plt+0x37bc>
   14be8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14bec:	cmp	r7, #2
   14bf0:	movwne	r3, #1
   14bf4:	orr	r3, r3, r0
   14bf8:	tst	r3, #1
   14bfc:	bne	14c58 <__assert_fail@plt+0x34e4>
   14c00:	cmp	r8, r6
   14c04:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14c08:	movcc	r3, #39	; 0x27
   14c0c:	strbcc	r3, [r2, r8]
   14c10:	add	r3, r8, #1
   14c14:	cmp	r3, r6
   14c18:	bcs	14c30 <__assert_fail@plt+0x34bc>
   14c1c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14c20:	mov	r7, r4
   14c24:	mov	r4, #36	; 0x24
   14c28:	strb	r4, [r2, r3]
   14c2c:	mov	r4, r7
   14c30:	add	r3, r8, #2
   14c34:	cmp	r3, r6
   14c38:	bcs	14c50 <__assert_fail@plt+0x34dc>
   14c3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14c40:	mov	r7, r4
   14c44:	mov	r4, #39	; 0x27
   14c48:	strb	r4, [r2, r3]
   14c4c:	mov	r4, r7
   14c50:	add	r8, r8, #3
   14c54:	mov	r0, #1
   14c58:	cmp	r8, r6
   14c5c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14c60:	movcc	r3, #92	; 0x5c
   14c64:	strbcc	r3, [r2, r8]
   14c68:	add	r3, r8, #1
   14c6c:	cmp	r3, r6
   14c70:	bcs	14c90 <__assert_fail@plt+0x351c>
   14c74:	mov	r2, r4
   14c78:	and	r7, r5, #192	; 0xc0
   14c7c:	mov	r4, #48	; 0x30
   14c80:	orr	r7, r4, r7, lsr #6
   14c84:	mov	r4, r2
   14c88:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14c8c:	strb	r7, [r2, r3]
   14c90:	add	r3, r8, #2
   14c94:	cmp	r3, r6
   14c98:	bcs	14cb8 <__assert_fail@plt+0x3544>
   14c9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14ca0:	mov	r6, r4
   14ca4:	lsr	r7, r5, #3
   14ca8:	mov	r4, #6
   14cac:	bfi	r7, r4, #3, #29
   14cb0:	mov	r4, r6
   14cb4:	strb	r7, [r2, r3]
   14cb8:	str	r0, [fp, #-48]	; 0xffffffd0
   14cbc:	ldr	r0, [sp, #76]	; 0x4c
   14cc0:	mov	r3, #6
   14cc4:	add	r8, r8, #3
   14cc8:	bfi	r5, r3, #3, #29
   14ccc:	mov	r3, #1
   14cd0:	ldr	r2, [sp, #36]	; 0x24
   14cd4:	and	r9, r3, #1
   14cd8:	cmp	r2, r1
   14cdc:	bhi	14b08 <__assert_fail@plt+0x3394>
   14ce0:	cmp	r9, #0
   14ce4:	sub	r7, r1, #1
   14ce8:	mov	r0, r5
   14cec:	movwne	r9, #1
   14cf0:	cmp	r9, #0
   14cf4:	bne	14d38 <__assert_fail@plt+0x35c4>
   14cf8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14cfc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14d00:	tst	r5, #1
   14d04:	beq	148a8 <__assert_fail@plt+0x3134>
   14d08:	cmp	r8, r6
   14d0c:	mov	r5, #0
   14d10:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14d14:	movcc	r1, #39	; 0x27
   14d18:	strbcc	r1, [r2, r8]
   14d1c:	add	r1, r8, #1
   14d20:	add	r8, r8, #2
   14d24:	cmp	r1, r6
   14d28:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14d2c:	movcc	r2, #39	; 0x27
   14d30:	strbcc	r2, [r3, r1]
   14d34:	b	148a8 <__assert_fail@plt+0x3134>
   14d38:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14d3c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d40:	b	148a8 <__assert_fail@plt+0x3134>
   14d44:	cmp	r8, r1
   14d48:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14d4c:	movcc	r0, #39	; 0x27
   14d50:	strbcc	r0, [r2, r8]
   14d54:	add	r0, r8, #1
   14d58:	cmp	r0, r1
   14d5c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14d60:	movcc	r2, #36	; 0x24
   14d64:	strbcc	r2, [r3, r0]
   14d68:	add	r0, r8, #2
   14d6c:	cmp	r0, r1
   14d70:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14d74:	movcc	r2, #39	; 0x27
   14d78:	strbcc	r2, [r3, r0]
   14d7c:	add	r0, r8, #3
   14d80:	mov	r3, #1
   14d84:	cmp	r0, r1
   14d88:	add	r8, r0, #1
   14d8c:	str	r3, [fp, #-48]	; 0xffffffd0
   14d90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14d94:	movcc	r1, #92	; 0x5c
   14d98:	strbcc	r1, [r2, r0]
   14d9c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14da0:	cmp	r1, #2
   14da4:	beq	14e08 <__assert_fail@plt+0x3694>
   14da8:	add	r1, r7, #1
   14dac:	mov	sl, #0
   14db0:	mov	r9, #1
   14db4:	mov	r5, #48	; 0x30
   14db8:	cmp	r1, lr
   14dbc:	bcs	14584 <__assert_fail@plt+0x2e10>
   14dc0:	ldrb	r1, [ip, r1]
   14dc4:	sub	r1, r1, #48	; 0x30
   14dc8:	uxtb	r1, r1
   14dcc:	cmp	r1, #9
   14dd0:	bhi	14584 <__assert_fail@plt+0x2e10>
   14dd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14dd8:	cmp	r8, r1
   14ddc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14de0:	movcc	r1, #48	; 0x30
   14de4:	strbcc	r1, [r2, r8]
   14de8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14dec:	add	r1, r0, #2
   14df0:	add	r8, r0, #3
   14df4:	cmp	r1, r2
   14df8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14dfc:	movcc	r2, #48	; 0x30
   14e00:	strbcc	r2, [r3, r1]
   14e04:	b	14584 <__assert_fail@plt+0x2e10>
   14e08:	mov	r0, #48	; 0x30
   14e0c:	mov	r9, #1
   14e10:	mov	sl, #0
   14e14:	b	1481c <__assert_fail@plt+0x30a8>
   14e18:	mov	sl, #0
   14e1c:	b	14e58 <__assert_fail@plt+0x36e4>
   14e20:	mov	sl, #0
   14e24:	cmp	lr, r6
   14e28:	bls	14e58 <__assert_fail@plt+0x36e4>
   14e2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e30:	ldr	r6, [sp, #40]	; 0x28
   14e34:	ldr	r0, [sp, #36]	; 0x24
   14e38:	ldrb	r0, [r0, r6]
   14e3c:	cmp	r0, #0
   14e40:	beq	14e60 <__assert_fail@plt+0x36ec>
   14e44:	add	r6, r6, #1
   14e48:	add	r0, r7, r6
   14e4c:	cmp	r0, lr
   14e50:	bcc	14e34 <__assert_fail@plt+0x36c0>
   14e54:	b	14e60 <__assert_fail@plt+0x36ec>
   14e58:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e5c:	ldr	r6, [sp, #40]	; 0x28
   14e60:	mov	r1, r6
   14e64:	ldr	r4, [sp, #20]
   14e68:	ldr	r6, [sp, #76]	; 0x4c
   14e6c:	b	14760 <__assert_fail@plt+0x2fec>
   14e70:	mov	lr, r7
   14e74:	b	14e7c <__assert_fail@plt+0x3708>
   14e78:	mvn	lr, #0
   14e7c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14e80:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14e84:	eor	r0, r9, #2
   14e88:	orr	r0, r0, r8
   14e8c:	clz	r0, r0
   14e90:	lsr	r0, r0, #5
   14e94:	tst	r1, r0
   14e98:	bne	14f94 <__assert_fail@plt+0x3820>
   14e9c:	mov	r0, r1
   14ea0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14ea4:	cmp	r9, #2
   14ea8:	movwne	r1, #1
   14eac:	orr	r0, r0, r1
   14eb0:	tst	r0, #1
   14eb4:	bne	14fd4 <__assert_fail@plt+0x3860>
   14eb8:	ldr	r0, [sp, #52]	; 0x34
   14ebc:	ldr	r1, [sp, #68]	; 0x44
   14ec0:	str	lr, [sp, #80]	; 0x50
   14ec4:	eor	r0, r0, #1
   14ec8:	tst	r0, #1
   14ecc:	bne	14fd4 <__assert_fail@plt+0x3860>
   14ed0:	tst	r4, #1
   14ed4:	bne	14f9c <__assert_fail@plt+0x3828>
   14ed8:	mov	r7, #0
   14edc:	cmp	r1, #0
   14ee0:	beq	14fcc <__assert_fail@plt+0x3858>
   14ee4:	ldr	r0, [sp, #84]	; 0x54
   14ee8:	mov	r3, #0
   14eec:	cmp	r6, #0
   14ef0:	mov	r2, #0
   14ef4:	mov	r4, r1
   14ef8:	str	r3, [fp, #-72]	; 0xffffffb8
   14efc:	beq	14038 <__assert_fail@plt+0x28c4>
   14f00:	b	14fd4 <__assert_fail@plt+0x3860>
   14f04:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14f08:	b	14f30 <__assert_fail@plt+0x37bc>
   14f0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f10:	mov	r2, #1
   14f14:	mov	lr, r4
   14f18:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14f1c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14f20:	b	14f34 <__assert_fail@plt+0x37c0>
   14f24:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f28:	mov	r7, #2
   14f2c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14f30:	ldr	r2, [sp, #84]	; 0x54
   14f34:	mov	r0, #0
   14f38:	ldr	r1, [fp, #12]
   14f3c:	tst	r2, #1
   14f40:	mov	r2, r7
   14f44:	mov	r3, lr
   14f48:	str	r0, [sp, #8]
   14f4c:	ldr	r0, [sp, #64]	; 0x40
   14f50:	movwne	r2, #4
   14f54:	cmp	r7, #2
   14f58:	movne	r2, r7
   14f5c:	str	r2, [sp]
   14f60:	mov	r2, ip
   14f64:	bic	r1, r1, #2
   14f68:	str	r0, [sp, #12]
   14f6c:	ldr	r0, [sp, #72]	; 0x48
   14f70:	str	r1, [sp, #4]
   14f74:	mov	r1, r6
   14f78:	str	r0, [sp, #16]
   14f7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14f80:	bl	13fc0 <__assert_fail@plt+0x284c>
   14f84:	mov	r8, r0
   14f88:	mov	r0, r8
   14f8c:	sub	sp, fp, #28
   14f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f94:	mov	r7, #2
   14f98:	b	14f30 <__assert_fail@plt+0x37bc>
   14f9c:	mov	r0, #5
   14fa0:	ldr	r2, [fp, #-84]	; 0xffffffac
   14fa4:	ldr	r3, [sp, #80]	; 0x50
   14fa8:	str	r0, [sp]
   14fac:	ldr	r0, [fp, #12]
   14fb0:	str	r0, [sp, #4]
   14fb4:	ldr	r0, [fp, #16]
   14fb8:	str	r0, [sp, #8]
   14fbc:	ldr	r0, [sp, #64]	; 0x40
   14fc0:	str	r0, [sp, #12]
   14fc4:	ldr	r0, [sp, #72]	; 0x48
   14fc8:	b	14f78 <__assert_fail@plt+0x3804>
   14fcc:	mov	r0, #0
   14fd0:	str	r0, [fp, #-72]	; 0xffffffb8
   14fd4:	ldr	r1, [sp, #92]	; 0x5c
   14fd8:	cmp	r1, #0
   14fdc:	beq	1501c <__assert_fail@plt+0x38a8>
   14fe0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14fe4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14fe8:	tst	r0, #1
   14fec:	bne	15020 <__assert_fail@plt+0x38ac>
   14ff0:	ldrb	r0, [r1]
   14ff4:	cmp	r0, #0
   14ff8:	beq	15020 <__assert_fail@plt+0x38ac>
   14ffc:	add	r1, r1, #1
   15000:	cmp	r8, r6
   15004:	strbcc	r0, [r2, r8]
   15008:	add	r8, r8, #1
   1500c:	ldrb	r0, [r1], #1
   15010:	cmp	r0, #0
   15014:	bne	15000 <__assert_fail@plt+0x388c>
   15018:	b	15020 <__assert_fail@plt+0x38ac>
   1501c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15020:	cmp	r8, r6
   15024:	movcc	r0, #0
   15028:	strbcc	r0, [r2, r8]
   1502c:	b	14f88 <__assert_fail@plt+0x3814>
   15030:	mov	r2, #1
   15034:	b	14f18 <__assert_fail@plt+0x37a4>
   15038:	mov	r7, #5
   1503c:	b	14f2c <__assert_fail@plt+0x37b8>
   15040:	bl	11750 <abort@plt>
   15044:	mov	r3, r2
   15048:	mov	r2, #0
   1504c:	b	15050 <__assert_fail@plt+0x38dc>
   15050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15054:	add	fp, sp, #28
   15058:	sub	sp, sp, #36	; 0x24
   1505c:	movw	r8, #25280	; 0x62c0
   15060:	cmp	r3, #0
   15064:	mov	r4, r2
   15068:	str	r2, [sp, #24]
   1506c:	mov	r5, r1
   15070:	mov	r6, r0
   15074:	str	r0, [sp, #20]
   15078:	movt	r8, #3
   1507c:	movne	r8, r3
   15080:	bl	11630 <__errno_location@plt>
   15084:	str	r0, [sp, #28]
   15088:	cmp	r4, #0
   1508c:	add	sl, r8, #8
   15090:	ldm	r8, {r3, r9}
   15094:	ldr	r7, [r0]
   15098:	ldr	r1, [r8, #40]	; 0x28
   1509c:	ldr	r2, [r8, #44]	; 0x2c
   150a0:	mov	r0, #0
   150a4:	orreq	r9, r9, #1
   150a8:	str	r7, [sp, #32]
   150ac:	mov	r7, r5
   150b0:	stm	sp, {r3, r9, sl}
   150b4:	str	r1, [sp, #12]
   150b8:	str	r2, [sp, #16]
   150bc:	mov	r1, #0
   150c0:	mov	r2, r6
   150c4:	mov	r3, r5
   150c8:	bl	13fc0 <__assert_fail@plt+0x284c>
   150cc:	add	r4, r0, #1
   150d0:	mov	r5, r0
   150d4:	mov	r0, r4
   150d8:	bl	22938 <__assert_fail@plt+0x111c4>
   150dc:	mov	r6, r0
   150e0:	ldr	r0, [r8]
   150e4:	ldr	r2, [r8, #44]	; 0x2c
   150e8:	ldr	r1, [r8, #40]	; 0x28
   150ec:	mov	r3, r7
   150f0:	stm	sp, {r0, r9, sl}
   150f4:	str	r2, [sp, #16]
   150f8:	str	r1, [sp, #12]
   150fc:	mov	r0, r6
   15100:	mov	r1, r4
   15104:	ldr	r2, [sp, #20]
   15108:	bl	13fc0 <__assert_fail@plt+0x284c>
   1510c:	ldr	r0, [sp, #24]
   15110:	ldr	r1, [sp, #32]
   15114:	ldr	r2, [sp, #28]
   15118:	cmp	r0, #0
   1511c:	str	r1, [r2]
   15120:	strne	r5, [r0]
   15124:	mov	r0, r6
   15128:	sub	sp, fp, #28
   1512c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15130:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15134:	add	fp, sp, #24
   15138:	movw	r5, #24940	; 0x616c
   1513c:	movw	r8, #24936	; 0x6168
   15140:	movt	r5, #3
   15144:	movt	r8, #3
   15148:	ldr	r0, [r5]
   1514c:	ldr	r4, [r8]
   15150:	cmp	r0, #2
   15154:	blt	15180 <__assert_fail@plt+0x3a0c>
   15158:	add	r7, r4, #12
   1515c:	mov	r6, #0
   15160:	ldr	r0, [r7, r6, lsl #3]
   15164:	bl	13c04 <__assert_fail@plt+0x2490>
   15168:	ldr	r1, [r5]
   1516c:	add	r2, r6, #2
   15170:	add	r0, r6, #1
   15174:	mov	r6, r0
   15178:	cmp	r2, r1
   1517c:	blt	15160 <__assert_fail@plt+0x39ec>
   15180:	ldr	r0, [r4, #4]
   15184:	movw	r7, #25328	; 0x62f0
   15188:	movt	r7, #3
   1518c:	cmp	r0, r7
   15190:	beq	151a8 <__assert_fail@plt+0x3a34>
   15194:	bl	13c04 <__assert_fail@plt+0x2490>
   15198:	movw	r0, #24944	; 0x6170
   1519c:	mov	r6, #256	; 0x100
   151a0:	movt	r0, #3
   151a4:	strd	r6, [r0]
   151a8:	movw	r6, #24944	; 0x6170
   151ac:	movt	r6, #3
   151b0:	cmp	r4, r6
   151b4:	beq	151c4 <__assert_fail@plt+0x3a50>
   151b8:	mov	r0, r4
   151bc:	bl	13c04 <__assert_fail@plt+0x2490>
   151c0:	str	r6, [r8]
   151c4:	mov	r0, #1
   151c8:	str	r0, [r5]
   151cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151d0:	movw	r3, #25280	; 0x62c0
   151d4:	mvn	r2, #0
   151d8:	movt	r3, #3
   151dc:	b	151e0 <__assert_fail@plt+0x3a6c>
   151e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e4:	add	fp, sp, #28
   151e8:	sub	sp, sp, #44	; 0x2c
   151ec:	mov	r7, r3
   151f0:	str	r2, [sp, #36]	; 0x24
   151f4:	str	r1, [sp, #32]
   151f8:	mov	r5, r0
   151fc:	bl	11630 <__errno_location@plt>
   15200:	cmp	r5, #0
   15204:	blt	15370 <__assert_fail@plt+0x3bfc>
   15208:	cmn	r5, #-2147483647	; 0x80000001
   1520c:	beq	15370 <__assert_fail@plt+0x3bfc>
   15210:	movw	r8, #24940	; 0x616c
   15214:	movw	r4, #24936	; 0x6168
   15218:	str	r0, [sp, #28]
   1521c:	ldr	r0, [r0]
   15220:	movt	r8, #3
   15224:	movt	r4, #3
   15228:	ldr	r1, [r8]
   1522c:	ldr	r6, [r4]
   15230:	str	r0, [sp, #24]
   15234:	cmp	r1, r5
   15238:	ble	15244 <__assert_fail@plt+0x3ad0>
   1523c:	mov	sl, r6
   15240:	b	152ac <__assert_fail@plt+0x3b38>
   15244:	movw	r9, #24944	; 0x6170
   15248:	mov	r0, #8
   1524c:	add	r2, r5, #1
   15250:	str	r1, [fp, #-32]	; 0xffffffe0
   15254:	mvn	r3, #-2147483648	; 0x80000000
   15258:	movt	r9, #3
   1525c:	str	r0, [sp]
   15260:	sub	r2, r2, r1
   15264:	sub	r1, fp, #32
   15268:	subs	r0, r6, r9
   1526c:	movne	r0, r6
   15270:	bl	22a68 <__assert_fail@plt+0x112f4>
   15274:	cmp	r6, r9
   15278:	mov	sl, r0
   1527c:	str	r0, [r4]
   15280:	ldrdeq	r0, [r9]
   15284:	stmeq	sl, {r0, r1}
   15288:	ldr	r1, [r8]
   1528c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15290:	add	r0, sl, r1, lsl #3
   15294:	sub	r1, r2, r1
   15298:	lsl	r2, r1, #3
   1529c:	mov	r1, #0
   152a0:	bl	11660 <memset@plt>
   152a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   152a8:	str	r0, [r8]
   152ac:	mov	r9, sl
   152b0:	ldr	r6, [r9, r5, lsl #3]!
   152b4:	ldr	r4, [r9, #4]!
   152b8:	ldm	r7, {r0, r1}
   152bc:	ldr	r2, [r7, #40]	; 0x28
   152c0:	ldr	r3, [r7, #44]	; 0x2c
   152c4:	orr	r8, r1, #1
   152c8:	add	r1, r7, #8
   152cc:	stm	sp, {r0, r8}
   152d0:	add	r0, sp, #8
   152d4:	str	r1, [sp, #20]
   152d8:	stm	r0, {r1, r2, r3}
   152dc:	mov	r0, r4
   152e0:	mov	r1, r6
   152e4:	ldr	r2, [sp, #32]
   152e8:	ldr	r3, [sp, #36]	; 0x24
   152ec:	bl	13fc0 <__assert_fail@plt+0x284c>
   152f0:	cmp	r6, r0
   152f4:	bhi	15358 <__assert_fail@plt+0x3be4>
   152f8:	add	r6, r0, #1
   152fc:	movw	r0, #25328	; 0x62f0
   15300:	movt	r0, #3
   15304:	str	r6, [sl, r5, lsl #3]
   15308:	cmp	r4, r0
   1530c:	beq	15318 <__assert_fail@plt+0x3ba4>
   15310:	mov	r0, r4
   15314:	bl	13c04 <__assert_fail@plt+0x2490>
   15318:	mov	r0, r6
   1531c:	bl	22938 <__assert_fail@plt+0x111c4>
   15320:	str	r0, [r9]
   15324:	mov	r4, r0
   15328:	add	r3, sp, #8
   1532c:	ldr	r0, [r7]
   15330:	ldr	r1, [r7, #40]	; 0x28
   15334:	ldr	r2, [r7, #44]	; 0x2c
   15338:	stm	sp, {r0, r8}
   1533c:	ldr	r0, [sp, #20]
   15340:	stm	r3, {r0, r1, r2}
   15344:	mov	r0, r4
   15348:	mov	r1, r6
   1534c:	ldr	r2, [sp, #32]
   15350:	ldr	r3, [sp, #36]	; 0x24
   15354:	bl	13fc0 <__assert_fail@plt+0x284c>
   15358:	ldr	r0, [sp, #28]
   1535c:	ldr	r1, [sp, #24]
   15360:	str	r1, [r0]
   15364:	mov	r0, r4
   15368:	sub	sp, fp, #28
   1536c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15370:	bl	11750 <abort@plt>
   15374:	movw	r3, #25280	; 0x62c0
   15378:	movt	r3, #3
   1537c:	b	151e0 <__assert_fail@plt+0x3a6c>
   15380:	movw	r3, #25280	; 0x62c0
   15384:	mov	r1, r0
   15388:	mov	r0, #0
   1538c:	mvn	r2, #0
   15390:	movt	r3, #3
   15394:	b	151e0 <__assert_fail@plt+0x3a6c>
   15398:	movw	r3, #25280	; 0x62c0
   1539c:	mov	r2, r1
   153a0:	mov	r1, r0
   153a4:	mov	r0, #0
   153a8:	movt	r3, #3
   153ac:	b	151e0 <__assert_fail@plt+0x3a6c>
   153b0:	push	{fp, lr}
   153b4:	mov	fp, sp
   153b8:	sub	sp, sp, #48	; 0x30
   153bc:	vmov.i32	q8, #0	; 0x00000000
   153c0:	mov	ip, #32
   153c4:	mov	r3, sp
   153c8:	mov	lr, r2
   153cc:	cmp	r1, #10
   153d0:	add	r2, r3, #16
   153d4:	vst1.64	{d16-d17}, [r3], ip
   153d8:	vst1.64	{d16-d17}, [r3]
   153dc:	vst1.64	{d16-d17}, [r2]
   153e0:	beq	15400 <__assert_fail@plt+0x3c8c>
   153e4:	str	r1, [sp]
   153e8:	mov	r3, sp
   153ec:	mov	r1, lr
   153f0:	mvn	r2, #0
   153f4:	bl	151e0 <__assert_fail@plt+0x3a6c>
   153f8:	mov	sp, fp
   153fc:	pop	{fp, pc}
   15400:	bl	11750 <abort@plt>
   15404:	push	{r4, sl, fp, lr}
   15408:	add	fp, sp, #8
   1540c:	sub	sp, sp, #48	; 0x30
   15410:	mov	ip, r3
   15414:	mov	r3, sp
   15418:	vmov.i32	q8, #0	; 0x00000000
   1541c:	mov	lr, #32
   15420:	cmp	r1, #10
   15424:	add	r4, r3, #16
   15428:	vst1.64	{d16-d17}, [r3], lr
   1542c:	vst1.64	{d16-d17}, [r3]
   15430:	vst1.64	{d16-d17}, [r4]
   15434:	beq	15454 <__assert_fail@plt+0x3ce0>
   15438:	str	r1, [sp]
   1543c:	mov	r1, r2
   15440:	mov	r3, sp
   15444:	mov	r2, ip
   15448:	bl	151e0 <__assert_fail@plt+0x3a6c>
   1544c:	sub	sp, fp, #8
   15450:	pop	{r4, sl, fp, pc}
   15454:	bl	11750 <abort@plt>
   15458:	mov	r2, r1
   1545c:	mov	r1, r0
   15460:	mov	r0, #0
   15464:	b	153b0 <__assert_fail@plt+0x3c3c>
   15468:	mov	r3, r2
   1546c:	mov	r2, r1
   15470:	mov	r1, r0
   15474:	mov	r0, #0
   15478:	b	15404 <__assert_fail@plt+0x3c90>
   1547c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15480:	add	fp, sp, #24
   15484:	sub	sp, sp, #48	; 0x30
   15488:	movw	r8, #25280	; 0x62c0
   1548c:	mov	lr, r0
   15490:	mov	r3, sp
   15494:	mov	ip, r1
   15498:	movt	r8, #3
   1549c:	mov	r1, r3
   154a0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   154a4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   154a8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   154ac:	stm	r1, {r0, r4, r5, r6, r7, r9}
   154b0:	ubfx	r0, r2, #5, #3
   154b4:	and	r2, r2, #31
   154b8:	mov	r4, #1
   154bc:	add	r0, r3, r0, lsl #2
   154c0:	ldr	r1, [r0, #8]
   154c4:	bic	r4, r4, r1, lsr r2
   154c8:	eor	r1, r1, r4, lsl r2
   154cc:	mov	r2, ip
   154d0:	str	r1, [r0, #8]
   154d4:	mov	r0, #0
   154d8:	mov	r1, lr
   154dc:	bl	151e0 <__assert_fail@plt+0x3a6c>
   154e0:	sub	sp, fp, #24
   154e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154ec:	add	fp, sp, #24
   154f0:	sub	sp, sp, #48	; 0x30
   154f4:	movw	lr, #25280	; 0x62c0
   154f8:	mov	ip, r0
   154fc:	mov	r3, sp
   15500:	movt	lr, #3
   15504:	mov	r2, r3
   15508:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1550c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   15510:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   15514:	stm	r2, {r0, r4, r5, r6, r7, r8}
   15518:	ubfx	r0, r1, #5, #3
   1551c:	and	r1, r1, #31
   15520:	mov	r7, #1
   15524:	add	r0, r3, r0, lsl #2
   15528:	ldr	r2, [r0, #8]
   1552c:	bic	r7, r7, r2, lsr r1
   15530:	eor	r1, r2, r7, lsl r1
   15534:	mvn	r2, #0
   15538:	str	r1, [r0, #8]
   1553c:	mov	r0, #0
   15540:	mov	r1, ip
   15544:	bl	151e0 <__assert_fail@plt+0x3a6c>
   15548:	sub	sp, fp, #24
   1554c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15550:	push	{r4, r5, r6, r7, fp, lr}
   15554:	add	fp, sp, #16
   15558:	sub	sp, sp, #48	; 0x30
   1555c:	movw	lr, #25280	; 0x62c0
   15560:	mov	ip, r0
   15564:	mov	r3, sp
   15568:	movt	lr, #3
   1556c:	mov	r2, r3
   15570:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15574:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15578:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1557c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15580:	mov	r1, ip
   15584:	mvn	r2, #0
   15588:	ldr	r0, [sp, #12]
   1558c:	orr	r0, r0, #67108864	; 0x4000000
   15590:	str	r0, [sp, #12]
   15594:	mov	r0, #0
   15598:	bl	151e0 <__assert_fail@plt+0x3a6c>
   1559c:	sub	sp, fp, #16
   155a0:	pop	{r4, r5, r6, r7, fp, pc}
   155a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155a8:	add	fp, sp, #24
   155ac:	sub	sp, sp, #48	; 0x30
   155b0:	movw	r8, #25280	; 0x62c0
   155b4:	mov	ip, r1
   155b8:	mov	lr, r0
   155bc:	mov	r3, sp
   155c0:	movt	r8, #3
   155c4:	mov	r2, r3
   155c8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   155cc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   155d0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   155d4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   155d8:	mov	r1, lr
   155dc:	mov	r2, ip
   155e0:	ldr	r0, [sp, #12]
   155e4:	orr	r0, r0, #67108864	; 0x4000000
   155e8:	str	r0, [sp, #12]
   155ec:	mov	r0, #0
   155f0:	bl	151e0 <__assert_fail@plt+0x3a6c>
   155f4:	sub	sp, fp, #24
   155f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15600:	add	fp, sp, #24
   15604:	sub	sp, sp, #96	; 0x60
   15608:	mov	lr, sp
   1560c:	vmov.i32	q8, #0	; 0x00000000
   15610:	mov	ip, r2
   15614:	cmp	r1, #10
   15618:	add	r3, lr, #16
   1561c:	mov	r2, lr
   15620:	vst1.64	{d16-d17}, [r3]
   15624:	mov	r3, #28
   15628:	vst1.64	{d16-d17}, [r2], r3
   1562c:	vst1.32	{d16-d17}, [r2]
   15630:	beq	15670 <__assert_fail@plt+0x3efc>
   15634:	str	r1, [sp, #48]	; 0x30
   15638:	add	r3, sp, #48	; 0x30
   1563c:	ldm	lr!, {r2, r4, r5, r6, r7}
   15640:	add	r1, r3, #4
   15644:	stmia	r1!, {r2, r4, r5, r6, r7}
   15648:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1564c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15650:	mvn	r2, #0
   15654:	ldr	r1, [sp, #60]	; 0x3c
   15658:	orr	r1, r1, #67108864	; 0x4000000
   1565c:	str	r1, [sp, #60]	; 0x3c
   15660:	mov	r1, ip
   15664:	bl	151e0 <__assert_fail@plt+0x3a6c>
   15668:	sub	sp, fp, #24
   1566c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15670:	bl	11750 <abort@plt>
   15674:	push	{fp, lr}
   15678:	mov	fp, sp
   1567c:	sub	sp, sp, #8
   15680:	mvn	ip, #0
   15684:	str	ip, [sp]
   15688:	bl	15694 <__assert_fail@plt+0x3f20>
   1568c:	mov	sp, fp
   15690:	pop	{fp, pc}
   15694:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15698:	add	fp, sp, #24
   1569c:	sub	sp, sp, #48	; 0x30
   156a0:	movw	ip, #25280	; 0x62c0
   156a4:	mov	lr, r3
   156a8:	mov	r3, sp
   156ac:	cmp	r1, #0
   156b0:	movt	ip, #3
   156b4:	cmpne	r2, #0
   156b8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   156bc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   156c0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   156c4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   156c8:	mov	r3, #10
   156cc:	str	r3, [sp]
   156d0:	bne	156d8 <__assert_fail@plt+0x3f64>
   156d4:	bl	11750 <abort@plt>
   156d8:	ldr	ip, [fp, #8]
   156dc:	str	r2, [sp, #44]	; 0x2c
   156e0:	str	r1, [sp, #40]	; 0x28
   156e4:	mov	r3, sp
   156e8:	mov	r1, lr
   156ec:	mov	r2, ip
   156f0:	bl	151e0 <__assert_fail@plt+0x3a6c>
   156f4:	sub	sp, fp, #24
   156f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156fc:	push	{fp, lr}
   15700:	mov	fp, sp
   15704:	sub	sp, sp, #8
   15708:	mov	r3, r2
   1570c:	mov	r2, r1
   15710:	mov	r1, r0
   15714:	mvn	r0, #0
   15718:	str	r0, [sp]
   1571c:	mov	r0, #0
   15720:	bl	15694 <__assert_fail@plt+0x3f20>
   15724:	mov	sp, fp
   15728:	pop	{fp, pc}
   1572c:	push	{fp, lr}
   15730:	mov	fp, sp
   15734:	sub	sp, sp, #8
   15738:	mov	ip, r2
   1573c:	mov	r2, r1
   15740:	mov	r1, r0
   15744:	str	r3, [sp]
   15748:	mov	r0, #0
   1574c:	mov	r3, ip
   15750:	bl	15694 <__assert_fail@plt+0x3f20>
   15754:	mov	sp, fp
   15758:	pop	{fp, pc}
   1575c:	movw	r3, #24952	; 0x6178
   15760:	movt	r3, #3
   15764:	b	151e0 <__assert_fail@plt+0x3a6c>
   15768:	movw	r3, #24952	; 0x6178
   1576c:	mov	r2, r1
   15770:	mov	r1, r0
   15774:	mov	r0, #0
   15778:	movt	r3, #3
   1577c:	b	151e0 <__assert_fail@plt+0x3a6c>
   15780:	movw	r3, #24952	; 0x6178
   15784:	mvn	r2, #0
   15788:	movt	r3, #3
   1578c:	b	151e0 <__assert_fail@plt+0x3a6c>
   15790:	movw	r3, #24952	; 0x6178
   15794:	mov	r1, r0
   15798:	mov	r0, #0
   1579c:	mvn	r2, #0
   157a0:	movt	r3, #3
   157a4:	b	151e0 <__assert_fail@plt+0x3a6c>
   157a8:	push	{r4, r5, fp, lr}
   157ac:	add	fp, sp, #8
   157b0:	mov	r5, r0
   157b4:	mov	r4, r1
   157b8:	mov	r0, #0
   157bc:	mov	r2, #5
   157c0:	mov	r1, r5
   157c4:	bl	114ec <dcgettext@plt>
   157c8:	cmp	r0, r5
   157cc:	popne	{r4, r5, fp, pc}
   157d0:	bl	23f78 <__assert_fail@plt+0x12804>
   157d4:	ldrb	r1, [r0]
   157d8:	and	r1, r1, #223	; 0xdf
   157dc:	cmp	r1, #71	; 0x47
   157e0:	beq	15848 <__assert_fail@plt+0x40d4>
   157e4:	cmp	r1, #85	; 0x55
   157e8:	bne	1586c <__assert_fail@plt+0x40f8>
   157ec:	ldrb	r1, [r0, #1]
   157f0:	and	r1, r1, #223	; 0xdf
   157f4:	cmp	r1, #84	; 0x54
   157f8:	bne	1586c <__assert_fail@plt+0x40f8>
   157fc:	ldrb	r1, [r0, #2]
   15800:	and	r1, r1, #223	; 0xdf
   15804:	cmp	r1, #70	; 0x46
   15808:	ldrbeq	r1, [r0, #3]
   1580c:	cmpeq	r1, #45	; 0x2d
   15810:	bne	1586c <__assert_fail@plt+0x40f8>
   15814:	ldrb	r1, [r0, #4]
   15818:	cmp	r1, #56	; 0x38
   1581c:	ldrbeq	r0, [r0, #5]
   15820:	cmpeq	r0, #0
   15824:	bne	1586c <__assert_fail@plt+0x40f8>
   15828:	ldrb	r1, [r5]
   1582c:	movw	r2, #20654	; 0x50ae
   15830:	movw	r0, #20658	; 0x50b2
   15834:	movt	r2, #2
   15838:	movt	r0, #2
   1583c:	cmp	r1, #96	; 0x60
   15840:	moveq	r0, r2
   15844:	pop	{r4, r5, fp, pc}
   15848:	ldrb	r1, [r0, #1]
   1584c:	and	r1, r1, #223	; 0xdf
   15850:	cmp	r1, #66	; 0x42
   15854:	bne	1586c <__assert_fail@plt+0x40f8>
   15858:	ldrb	r1, [r0, #2]
   1585c:	cmp	r1, #49	; 0x31
   15860:	ldrbeq	r1, [r0, #3]
   15864:	cmpeq	r1, #56	; 0x38
   15868:	beq	15888 <__assert_fail@plt+0x4114>
   1586c:	movw	r1, #20650	; 0x50aa
   15870:	movw	r0, #19622	; 0x4ca6
   15874:	cmp	r4, #9
   15878:	movt	r1, #2
   1587c:	movt	r0, #2
   15880:	moveq	r0, r1
   15884:	pop	{r4, r5, fp, pc}
   15888:	ldrb	r1, [r0, #4]
   1588c:	cmp	r1, #48	; 0x30
   15890:	ldrbeq	r1, [r0, #5]
   15894:	cmpeq	r1, #51	; 0x33
   15898:	bne	1586c <__assert_fail@plt+0x40f8>
   1589c:	ldrb	r1, [r0, #6]
   158a0:	cmp	r1, #48	; 0x30
   158a4:	ldrbeq	r0, [r0, #7]
   158a8:	cmpeq	r0, #0
   158ac:	bne	1586c <__assert_fail@plt+0x40f8>
   158b0:	ldrb	r1, [r5]
   158b4:	movw	r2, #20662	; 0x50b6
   158b8:	movw	r0, #20666	; 0x50ba
   158bc:	movt	r2, #2
   158c0:	movt	r0, #2
   158c4:	b	1583c <__assert_fail@plt+0x40c8>
   158c8:	push	{fp, lr}
   158cc:	mov	fp, sp
   158d0:	mov	lr, r0
   158d4:	movw	r0, #25588	; 0x63f4
   158d8:	mov	ip, r1
   158dc:	ldrb	r1, [r2, #28]
   158e0:	movt	r0, #3
   158e4:	ldr	r3, [r0]
   158e8:	mov	r0, #16
   158ec:	and	r1, r1, #111	; 0x6f
   158f0:	and	r0, r0, r3, lsr #21
   158f4:	orr	r0, r1, r0
   158f8:	mov	r1, lr
   158fc:	orr	r0, r0, #128	; 0x80
   15900:	strb	r0, [r2, #28]
   15904:	mov	r0, r2
   15908:	mov	r2, ip
   1590c:	bl	15944 <__assert_fail@plt+0x41d0>
   15910:	cmp	r0, #0
   15914:	moveq	r0, #0
   15918:	popeq	{fp, pc}
   1591c:	movw	r1, #21144	; 0x5298
   15920:	mov	r2, #5
   15924:	movt	r1, #2
   15928:	ldr	r0, [r1, r0, lsl #2]
   1592c:	movw	r1, #20760	; 0x5118
   15930:	movt	r1, #2
   15934:	add	r1, r1, r0
   15938:	mov	r0, #0
   1593c:	pop	{fp, lr}
   15940:	b	114ec <dcgettext@plt>
   15944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15948:	add	fp, sp, #28
   1594c:	sub	sp, sp, #140	; 0x8c
   15950:	str	r1, [sp, #24]
   15954:	mov	r1, #0
   15958:	str	r0, [sp, #28]
   1595c:	mov	sl, r2
   15960:	str	r3, [sp, #20]
   15964:	str	r1, [fp, #-52]	; 0xffffffcc
   15968:	str	r1, [r0, #8]
   1596c:	str	r3, [r0, #12]
   15970:	str	r1, [r0, #24]
   15974:	ldrb	r1, [r0, #28]
   15978:	and	r1, r1, #144	; 0x90
   1597c:	strb	r1, [r0, #28]
   15980:	ldr	r9, [r0]
   15984:	ldr	r0, [r0, #4]
   15988:	cmp	r0, #159	; 0x9f
   1598c:	bls	1653c <__assert_fail@plt+0x4dc8>
   15990:	ldr	r1, [sp, #28]
   15994:	mov	r0, #160	; 0xa0
   15998:	mov	r2, #160	; 0xa0
   1599c:	str	r0, [r1, #8]
   159a0:	mov	r0, r9
   159a4:	mov	r1, #0
   159a8:	bl	11660 <memset@plt>
   159ac:	mov	r0, #31
   159b0:	str	r0, [r9, #64]	; 0x40
   159b4:	movw	r0, #43689	; 0xaaa9
   159b8:	movt	r0, #2730	; 0xaaa
   159bc:	cmp	sl, r0
   159c0:	bhi	15b30 <__assert_fail@plt+0x43bc>
   159c4:	add	r0, sl, #1
   159c8:	str	r0, [r9, #4]
   159cc:	str	r0, [sp, #12]
   159d0:	lsl	r0, r0, #3
   159d4:	bl	23be4 <__assert_fail@plt+0x12470>
   159d8:	str	r0, [r9]
   159dc:	mov	r0, #1
   159e0:	mov	r4, r0
   159e4:	lsl	r0, r0, #1
   159e8:	cmp	r4, sl
   159ec:	bls	159e0 <__assert_fail@plt+0x426c>
   159f0:	mov	r0, #12
   159f4:	mov	r1, r4
   159f8:	bl	23b90 <__assert_fail@plt+0x1241c>
   159fc:	str	r0, [r9, #32]
   15a00:	sub	r0, r4, #1
   15a04:	str	r0, [r9, #68]	; 0x44
   15a08:	bl	11564 <__ctype_get_mb_cur_max@plt>
   15a0c:	str	r0, [r9, #92]	; 0x5c
   15a10:	mov	r0, #14
   15a14:	bl	11708 <nl_langinfo@plt>
   15a18:	ldrb	r1, [r0]
   15a1c:	orr	r1, r1, #32
   15a20:	cmp	r1, #117	; 0x75
   15a24:	bne	15a70 <__assert_fail@plt+0x42fc>
   15a28:	ldrb	r1, [r0, #1]
   15a2c:	orr	r1, r1, #32
   15a30:	cmp	r1, #116	; 0x74
   15a34:	bne	15a70 <__assert_fail@plt+0x42fc>
   15a38:	ldrb	r1, [r0, #2]
   15a3c:	orr	r1, r1, #32
   15a40:	cmp	r1, #102	; 0x66
   15a44:	bne	15a70 <__assert_fail@plt+0x42fc>
   15a48:	ldrb	r1, [r0, #3]!
   15a4c:	cmp	r1, #45	; 0x2d
   15a50:	movw	r1, #21260	; 0x530c
   15a54:	addeq	r0, r0, #1
   15a58:	movt	r1, #2
   15a5c:	bl	11420 <strcmp@plt>
   15a60:	cmp	r0, #0
   15a64:	ldrbeq	r0, [r9, #88]	; 0x58
   15a68:	orreq	r0, r0, #4
   15a6c:	strbeq	r0, [r9, #88]	; 0x58
   15a70:	ldrb	r0, [r9, #88]	; 0x58
   15a74:	and	r1, r0, #247	; 0xf7
   15a78:	strb	r1, [r9, #88]	; 0x58
   15a7c:	ldr	r1, [r9, #92]	; 0x5c
   15a80:	cmp	r1, #2
   15a84:	blt	15b1c <__assert_fail@plt+0x43a8>
   15a88:	tst	r0, #4
   15a8c:	bne	15b10 <__assert_fail@plt+0x439c>
   15a90:	mov	r0, #32
   15a94:	mov	r1, #1
   15a98:	mov	r8, #1
   15a9c:	bl	23b90 <__assert_fail@plt+0x1241c>
   15aa0:	cmp	r0, #0
   15aa4:	str	r0, [r9, #60]	; 0x3c
   15aa8:	beq	15b30 <__assert_fail@plt+0x43bc>
   15aac:	mov	r7, #0
   15ab0:	mov	r5, #0
   15ab4:	mov	r6, #0
   15ab8:	add	r4, r7, r6
   15abc:	mov	r0, r4
   15ac0:	bl	1166c <btowc@plt>
   15ac4:	cmn	r0, #1
   15ac8:	ldrne	r1, [r9, #60]	; 0x3c
   15acc:	ldrne	r2, [r1, r5, lsl #2]
   15ad0:	orrne	r2, r2, r8, lsl r6
   15ad4:	strne	r2, [r1, r5, lsl #2]
   15ad8:	cmp	r4, #127	; 0x7f
   15adc:	bhi	15af0 <__assert_fail@plt+0x437c>
   15ae0:	cmp	r4, r0
   15ae4:	ldrbne	r0, [r9, #88]	; 0x58
   15ae8:	orrne	r0, r0, #8
   15aec:	strbne	r0, [r9, #88]	; 0x58
   15af0:	add	r6, r6, #1
   15af4:	cmp	r6, #32
   15af8:	bne	15ab8 <__assert_fail@plt+0x4344>
   15afc:	add	r5, r5, #1
   15b00:	add	r7, r7, #32
   15b04:	cmp	r5, #8
   15b08:	bne	15ab4 <__assert_fail@plt+0x4340>
   15b0c:	b	15b1c <__assert_fail@plt+0x43a8>
   15b10:	movw	r0, #21212	; 0x52dc
   15b14:	movt	r0, #2
   15b18:	str	r0, [r9, #60]	; 0x3c
   15b1c:	ldr	r0, [r9]
   15b20:	cmp	r0, #0
   15b24:	ldrne	r0, [r9, #32]
   15b28:	cmpne	r0, #0
   15b2c:	bne	15b54 <__assert_fail@plt+0x43e0>
   15b30:	mov	r4, #12
   15b34:	mov	r0, r9
   15b38:	str	r4, [fp, #-52]	; 0xffffffcc
   15b3c:	bl	16be4 <__assert_fail@plt+0x5470>
   15b40:	ldr	r0, [sp, #28]
   15b44:	mov	r1, #0
   15b48:	str	r1, [r0]
   15b4c:	str	r1, [r0, #4]
   15b50:	b	164c4 <__assert_fail@plt+0x4d50>
   15b54:	movw	r0, #0
   15b58:	movw	r1, #0
   15b5c:	mov	r4, #0
   15b60:	movt	r0, #0
   15b64:	movt	r1, #0
   15b68:	str	r4, [fp, #-52]	; 0xffffffcc
   15b6c:	orrs	r0, r1, r0
   15b70:	str	r0, [sp, #8]
   15b74:	beq	15b8c <__assert_fail@plt+0x4418>
   15b78:	add	r0, r9, #136	; 0x88
   15b7c:	mov	r1, #0
   15b80:	bl	114a4 <pthread_mutex_init@plt>
   15b84:	cmp	r0, #0
   15b88:	bne	15b30 <__assert_fail@plt+0x43bc>
   15b8c:	ldr	r0, [sp, #28]
   15b90:	add	r5, sp, #32
   15b94:	mov	r1, #0
   15b98:	mov	r2, #76	; 0x4c
   15b9c:	ldr	r8, [r0, #20]
   15ba0:	add	r0, r5, #4
   15ba4:	bl	11660 <memset@plt>
   15ba8:	ldr	r0, [sp, #24]
   15bac:	ldr	r1, [sp, #20]
   15bb0:	add	r3, r5, #44	; 0x2c
   15bb4:	vdup.32	q8, sl
   15bb8:	str	r0, [sp, #32]
   15bbc:	str	r8, [sp, #96]	; 0x60
   15bc0:	ubfx	r0, r1, #22, #1
   15bc4:	strb	r0, [sp, #104]	; 0x68
   15bc8:	and	r0, r1, #4194304	; 0x400000
   15bcc:	orrs	r1, r0, r8
   15bd0:	str	r0, [sp, #16]
   15bd4:	movwne	r1, #1
   15bd8:	cmp	sl, #1
   15bdc:	strb	r1, [sp, #107]	; 0x6b
   15be0:	ldr	r0, [r9, #92]	; 0x5c
   15be4:	str	r0, [sp, #112]	; 0x70
   15be8:	ldrb	r2, [r9, #88]	; 0x58
   15bec:	vst1.32	{d16-d17}, [r3]
   15bf0:	ubfx	r3, r2, #3, #1
   15bf4:	strb	r3, [sp, #106]	; 0x6a
   15bf8:	ubfx	r2, r2, #2, #1
   15bfc:	strb	r2, [sp, #105]	; 0x69
   15c00:	blt	15c24 <__assert_fail@plt+0x44b0>
   15c04:	ldr	r1, [sp, #12]
   15c08:	add	r0, sp, #32
   15c0c:	bl	18e58 <__assert_fail@plt+0x76e4>
   15c10:	cmp	r0, #0
   15c14:	bne	15c94 <__assert_fail@plt+0x4520>
   15c18:	ldr	r0, [r9, #92]	; 0x5c
   15c1c:	ldr	r4, [sp, #36]	; 0x24
   15c20:	ldrb	r1, [sp, #107]	; 0x6b
   15c24:	cmp	r1, #0
   15c28:	ldr	r1, [sp, #24]
   15c2c:	moveq	r4, r1
   15c30:	ldr	r1, [sp, #16]
   15c34:	str	r4, [sp, #36]	; 0x24
   15c38:	cmp	r1, #0
   15c3c:	beq	15c9c <__assert_fail@plt+0x4528>
   15c40:	cmp	r0, #2
   15c44:	blt	15cb0 <__assert_fail@plt+0x453c>
   15c48:	add	r4, sp, #32
   15c4c:	mov	r0, r4
   15c50:	bl	18ef8 <__assert_fail@plt+0x7784>
   15c54:	cmp	r0, #0
   15c58:	bne	15c94 <__assert_fail@plt+0x4520>
   15c5c:	ldr	r0, [sp, #64]	; 0x40
   15c60:	cmp	r0, sl
   15c64:	bge	15d44 <__assert_fail@plt+0x45d0>
   15c68:	ldr	r1, [r9, #92]	; 0x5c
   15c6c:	ldr	r2, [sp, #60]	; 0x3c
   15c70:	ldr	r0, [sp, #68]	; 0x44
   15c74:	add	r1, r1, r2
   15c78:	cmp	r0, r1
   15c7c:	bgt	15d44 <__assert_fail@plt+0x45d0>
   15c80:	lsl	r1, r0, #1
   15c84:	mov	r0, r4
   15c88:	bl	18e58 <__assert_fail@plt+0x76e4>
   15c8c:	cmp	r0, #0
   15c90:	beq	15c4c <__assert_fail@plt+0x44d8>
   15c94:	ldr	sl, [sp, #28]
   15c98:	b	15e98 <__assert_fail@plt+0x4724>
   15c9c:	cmp	r0, #2
   15ca0:	blt	15cbc <__assert_fail@plt+0x4548>
   15ca4:	add	r0, sp, #32
   15ca8:	bl	194d4 <__assert_fail@plt+0x7d60>
   15cac:	b	15d44 <__assert_fail@plt+0x45d0>
   15cb0:	add	r0, sp, #32
   15cb4:	bl	19468 <__assert_fail@plt+0x7cf4>
   15cb8:	b	15d44 <__assert_fail@plt+0x45d0>
   15cbc:	ldr	r0, [sp, #68]	; 0x44
   15cc0:	cmp	r8, #0
   15cc4:	beq	15d3c <__assert_fail@plt+0x45c8>
   15cc8:	ldr	r2, [sp, #80]	; 0x50
   15ccc:	ldr	r1, [sp, #60]	; 0x3c
   15cd0:	cmp	r0, r2
   15cd4:	movgt	r0, r2
   15cd8:	cmp	r1, r0
   15cdc:	bge	15d30 <__assert_fail@plt+0x45bc>
   15ce0:	ldr	r3, [sp, #56]	; 0x38
   15ce4:	ldr	r2, [sp, #32]
   15ce8:	ldr	r7, [sp, #96]	; 0x60
   15cec:	add	r3, r3, r1
   15cf0:	ldrb	r2, [r2, r3]
   15cf4:	ldrb	r2, [r7, r2]
   15cf8:	strb	r2, [r4, r1]
   15cfc:	b	15d20 <__assert_fail@plt+0x45ac>
   15d00:	ldr	r2, [sp, #32]
   15d04:	ldr	r7, [sp, #56]	; 0x38
   15d08:	ldr	r6, [sp, #96]	; 0x60
   15d0c:	ldr	r3, [sp, #36]	; 0x24
   15d10:	add	r2, r2, r7
   15d14:	ldrb	r2, [r2, r1]
   15d18:	ldrb	r2, [r6, r2]
   15d1c:	strb	r2, [r3, r1]
   15d20:	add	r1, r1, #1
   15d24:	cmp	r1, r0
   15d28:	blt	15d00 <__assert_fail@plt+0x458c>
   15d2c:	mov	r1, r0
   15d30:	str	r1, [sp, #64]	; 0x40
   15d34:	str	r1, [sp, #60]	; 0x3c
   15d38:	b	15d44 <__assert_fail@plt+0x45d0>
   15d3c:	str	r0, [sp, #64]	; 0x40
   15d40:	str	r0, [sp, #60]	; 0x3c
   15d44:	ldr	sl, [sp, #28]
   15d48:	mov	r5, #0
   15d4c:	ldr	r6, [sp, #20]
   15d50:	sub	r8, fp, #48	; 0x30
   15d54:	add	r7, sp, #32
   15d58:	str	r5, [fp, #-52]	; 0xffffffcc
   15d5c:	mov	r0, r8
   15d60:	mov	r1, r7
   15d64:	str	r5, [sl, #24]
   15d68:	orr	r2, r6, #8388608	; 0x800000
   15d6c:	ldr	r4, [sl]
   15d70:	str	r6, [r4, #128]	; 0x80
   15d74:	bl	198c0 <__assert_fail@plt+0x814c>
   15d78:	ldr	r1, [sp, #72]	; 0x48
   15d7c:	mov	r2, r8
   15d80:	mov	r3, r6
   15d84:	str	r5, [sp]
   15d88:	add	r0, r1, r0
   15d8c:	mov	r1, sl
   15d90:	str	r0, [sp, #72]	; 0x48
   15d94:	sub	r0, fp, #52	; 0x34
   15d98:	str	r0, [sp, #4]
   15d9c:	mov	r0, r7
   15da0:	bl	19710 <__assert_fail@plt+0x7f9c>
   15da4:	mov	r6, r0
   15da8:	cmp	r0, #0
   15dac:	bne	15dbc <__assert_fail@plt+0x4648>
   15db0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15db4:	cmp	r0, #0
   15db8:	bne	16570 <__assert_fail@plt+0x4dfc>
   15dbc:	mov	r0, #2
   15dc0:	sub	r3, fp, #40	; 0x28
   15dc4:	mov	r1, #0
   15dc8:	mov	r2, #0
   15dcc:	str	r0, [fp, #-36]	; 0xffffffdc
   15dd0:	mov	r0, r4
   15dd4:	str	r5, [fp, #-40]	; 0xffffffd8
   15dd8:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   15ddc:	mov	r7, r0
   15de0:	cmp	r6, #0
   15de4:	beq	15e10 <__assert_fail@plt+0x469c>
   15de8:	mov	r0, #16
   15dec:	sub	r3, fp, #40	; 0x28
   15df0:	mov	r1, r6
   15df4:	mov	r2, r7
   15df8:	str	r0, [fp, #-36]	; 0xffffffdc
   15dfc:	mov	r0, #0
   15e00:	str	r0, [fp, #-40]	; 0xffffffd8
   15e04:	mov	r0, r4
   15e08:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   15e0c:	b	15e14 <__assert_fail@plt+0x46a0>
   15e10:	mov	r0, r7
   15e14:	cmp	r7, #0
   15e18:	cmpne	r0, #0
   15e1c:	beq	16568 <__assert_fail@plt+0x4df4>
   15e20:	str	r0, [r9, #52]	; 0x34
   15e24:	ldr	r8, [sl]
   15e28:	ldr	r0, [r8, #4]
   15e2c:	lsl	r0, r0, #2
   15e30:	bl	23be4 <__assert_fail@plt+0x12470>
   15e34:	str	r0, [r8, #12]
   15e38:	ldr	r0, [r8, #4]
   15e3c:	lsl	r0, r0, #2
   15e40:	bl	23be4 <__assert_fail@plt+0x12470>
   15e44:	str	r0, [r8, #16]
   15e48:	ldr	r0, [r8, #4]
   15e4c:	add	r0, r0, r0, lsl #1
   15e50:	lsl	r0, r0, #2
   15e54:	bl	23be4 <__assert_fail@plt+0x12470>
   15e58:	str	r0, [r8, #20]
   15e5c:	ldr	r0, [r8, #4]
   15e60:	add	r0, r0, r0, lsl #1
   15e64:	lsl	r0, r0, #2
   15e68:	bl	23be4 <__assert_fail@plt+0x12470>
   15e6c:	str	r0, [r8, #24]
   15e70:	ldr	r1, [r8, #12]
   15e74:	cmp	r1, #0
   15e78:	ldrne	r1, [r8, #16]
   15e7c:	cmpne	r1, #0
   15e80:	beq	15e94 <__assert_fail@plt+0x4720>
   15e84:	cmp	r0, #0
   15e88:	ldrne	r0, [r8, #20]
   15e8c:	cmpne	r0, #0
   15e90:	bne	15edc <__assert_fail@plt+0x4768>
   15e94:	mov	r0, #12
   15e98:	str	r0, [fp, #-52]	; 0xffffffcc
   15e9c:	mov	r0, sl
   15ea0:	bl	18dd4 <__assert_fail@plt+0x7660>
   15ea4:	add	r0, sp, #32
   15ea8:	bl	18e24 <__assert_fail@plt+0x76b0>
   15eac:	ldr	r0, [sp, #8]
   15eb0:	cmp	r0, #0
   15eb4:	beq	15ec0 <__assert_fail@plt+0x474c>
   15eb8:	add	r0, r9, #136	; 0x88
   15ebc:	bl	11438 <pthread_mutex_destroy@plt>
   15ec0:	mov	r0, r9
   15ec4:	bl	16be4 <__assert_fail@plt+0x5470>
   15ec8:	mov	r0, #0
   15ecc:	str	r0, [sl]
   15ed0:	str	r0, [sl, #4]
   15ed4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15ed8:	b	164c4 <__assert_fail@plt+0x4d50>
   15edc:	ldr	r0, [sl, #24]
   15ee0:	lsl	r0, r0, #2
   15ee4:	bl	23be4 <__assert_fail@plt+0x12470>
   15ee8:	cmp	r0, #0
   15eec:	str	r0, [r8, #132]	; 0x84
   15ef0:	beq	15f64 <__assert_fail@plt+0x47f0>
   15ef4:	ldr	r1, [sl, #24]
   15ef8:	cmp	r1, #0
   15efc:	beq	15f14 <__assert_fail@plt+0x47a0>
   15f00:	mov	r2, #0
   15f04:	str	r2, [r0, r2, lsl #2]
   15f08:	add	r2, r2, #1
   15f0c:	cmp	r1, r2
   15f10:	bne	15f04 <__assert_fail@plt+0x4790>
   15f14:	mov	r4, r8
   15f18:	movw	r1, #51336	; 0xc888
   15f1c:	mov	r2, r8
   15f20:	ldr	r0, [r4, #52]!	; 0x34
   15f24:	movt	r1, #1
   15f28:	bl	1c808 <__assert_fail@plt+0xb094>
   15f2c:	ldr	r1, [sl, #24]
   15f30:	cmp	r1, #0
   15f34:	beq	15f6c <__assert_fail@plt+0x47f8>
   15f38:	ldr	r0, [r8, #132]	; 0x84
   15f3c:	mov	r2, #0
   15f40:	ldr	r3, [r0, r2, lsl #2]
   15f44:	cmp	r2, r3
   15f48:	bne	15f58 <__assert_fail@plt+0x47e4>
   15f4c:	add	r2, r2, #1
   15f50:	cmp	r2, r1
   15f54:	bcc	15f40 <__assert_fail@plt+0x47cc>
   15f58:	cmp	r2, r1
   15f5c:	beq	15f70 <__assert_fail@plt+0x47fc>
   15f60:	b	15f7c <__assert_fail@plt+0x4808>
   15f64:	add	r4, r8, #52	; 0x34
   15f68:	b	15f7c <__assert_fail@plt+0x4808>
   15f6c:	ldr	r0, [r8, #132]	; 0x84
   15f70:	bl	13c04 <__assert_fail@plt+0x2490>
   15f74:	mov	r0, #0
   15f78:	str	r0, [r8, #132]	; 0x84
   15f7c:	ldr	r0, [r4]
   15f80:	movw	r1, #51488	; 0xc920
   15f84:	mov	r2, sl
   15f88:	movt	r1, #1
   15f8c:	bl	1a168 <__assert_fail@plt+0x89f4>
   15f90:	cmp	r0, #0
   15f94:	bne	15e98 <__assert_fail@plt+0x4724>
   15f98:	ldr	r0, [r8, #52]	; 0x34
   15f9c:	movw	r1, #51624	; 0xc9a8
   15fa0:	mov	r2, r8
   15fa4:	movt	r1, #1
   15fa8:	bl	1a168 <__assert_fail@plt+0x89f4>
   15fac:	cmp	r0, #0
   15fb0:	bne	15e98 <__assert_fail@plt+0x4724>
   15fb4:	ldr	r0, [r8, #52]	; 0x34
   15fb8:	movw	r1, #51764	; 0xca34
   15fbc:	mov	r2, r8
   15fc0:	movt	r1, #1
   15fc4:	bl	1c808 <__assert_fail@plt+0xb094>
   15fc8:	ldr	r0, [r8, #52]	; 0x34
   15fcc:	movw	r1, #51860	; 0xca94
   15fd0:	mov	r2, r8
   15fd4:	movt	r1, #1
   15fd8:	bl	1c808 <__assert_fail@plt+0xb094>
   15fdc:	cmp	r0, #0
   15fe0:	bne	15e98 <__assert_fail@plt+0x4724>
   15fe4:	ldr	r0, [r8, #8]
   15fe8:	cmp	r0, #0
   15fec:	beq	16090 <__assert_fail@plt+0x491c>
   15ff0:	mov	r5, #0
   15ff4:	sub	r7, fp, #40	; 0x28
   15ff8:	mov	r4, #0
   15ffc:	ldr	r0, [r8, #24]
   16000:	add	r6, r4, r4, lsl #1
   16004:	add	r0, r0, r6, lsl #2
   16008:	ldr	r0, [r0, #4]
   1600c:	cmp	r0, #0
   16010:	beq	1601c <__assert_fail@plt+0x48a8>
   16014:	mov	r1, r5
   16018:	b	1605c <__assert_fail@plt+0x48e8>
   1601c:	mov	r0, r7
   16020:	mov	r1, r8
   16024:	mov	r2, r4
   16028:	mov	r3, #1
   1602c:	bl	1cf48 <__assert_fail@plt+0xb7d4>
   16030:	cmp	r0, #0
   16034:	bne	15e98 <__assert_fail@plt+0x4724>
   16038:	ldr	r0, [r8, #24]
   1603c:	mov	r1, r5
   16040:	add	r0, r0, r6, lsl #2
   16044:	ldr	r0, [r0, #4]
   16048:	cmp	r0, #0
   1604c:	bne	1605c <__assert_fail@plt+0x48e8>
   16050:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16054:	bl	13c04 <__assert_fail@plt+0x2490>
   16058:	mov	r1, #1
   1605c:	ldr	r2, [r8, #8]
   16060:	add	r0, r4, #1
   16064:	subs	r3, r0, r2
   16068:	mov	r4, r3
   1606c:	movwne	r3, #1
   16070:	movne	r4, r0
   16074:	tst	r1, #1
   16078:	and	r5, r1, r3
   1607c:	cmpeq	r0, r2
   16080:	bne	15ffc <__assert_fail@plt+0x4888>
   16084:	add	r0, r0, r0, lsl #1
   16088:	lsl	r0, r0, #2
   1608c:	b	16094 <__assert_fail@plt+0x4920>
   16090:	mov	r0, #0
   16094:	ldrb	r1, [sl, #28]
   16098:	tst	r1, #16
   1609c:	bne	160b4 <__assert_fail@plt+0x4940>
   160a0:	ldr	r1, [sl, #24]
   160a4:	cmp	r1, #0
   160a8:	ldrbne	r1, [r8, #88]	; 0x58
   160ac:	tstne	r1, #1
   160b0:	bne	160c0 <__assert_fail@plt+0x494c>
   160b4:	ldr	r1, [r8, #76]	; 0x4c
   160b8:	cmp	r1, #0
   160bc:	beq	16198 <__assert_fail@plt+0x4a24>
   160c0:	bl	23be4 <__assert_fail@plt+0x12470>
   160c4:	cmp	r0, #0
   160c8:	str	r0, [r8, #28]
   160cc:	beq	15e94 <__assert_fail@plt+0x4720>
   160d0:	ldr	r1, [r8, #8]
   160d4:	cmp	r1, #0
   160d8:	beq	16198 <__assert_fail@plt+0x4a24>
   160dc:	mov	r1, #0
   160e0:	str	r1, [r0]
   160e4:	str	r1, [r0, #4]
   160e8:	str	r1, [r0, #8]
   160ec:	ldr	r0, [r8, #8]
   160f0:	cmp	r0, #2
   160f4:	bcc	16124 <__assert_fail@plt+0x49b0>
   160f8:	mov	r2, #1
   160fc:	mov	r3, #12
   16100:	ldr	r0, [r8, #28]
   16104:	add	r2, r2, #1
   16108:	str	r1, [r0, r3]!
   1610c:	add	r3, r3, #12
   16110:	str	r1, [r0, #4]
   16114:	str	r1, [r0, #8]
   16118:	ldr	r0, [r8, #8]
   1611c:	cmp	r2, r0
   16120:	bcc	16100 <__assert_fail@plt+0x498c>
   16124:	cmp	r0, #0
   16128:	beq	16198 <__assert_fail@plt+0x4a24>
   1612c:	ldr	r1, [r8, #24]
   16130:	mov	r4, #0
   16134:	add	r5, r4, r4, lsl #1
   16138:	add	r2, r1, r5, lsl #2
   1613c:	ldr	r3, [r2, #4]
   16140:	cmp	r3, #1
   16144:	blt	1618c <__assert_fail@plt+0x4a18>
   16148:	ldr	r7, [r2, #8]
   1614c:	mov	r6, #0
   16150:	ldr	r0, [r7, r6, lsl #2]
   16154:	ldr	r1, [r8, #28]
   16158:	add	r0, r0, r0, lsl #1
   1615c:	add	r0, r1, r0, lsl #2
   16160:	mov	r1, r4
   16164:	bl	1d788 <__assert_fail@plt+0xc014>
   16168:	cmp	r0, #0
   1616c:	beq	15e94 <__assert_fail@plt+0x4720>
   16170:	ldr	r1, [r8, #24]
   16174:	add	r6, r6, #1
   16178:	add	r0, r1, r5, lsl #2
   1617c:	ldr	r0, [r0, #4]
   16180:	cmp	r6, r0
   16184:	blt	16150 <__assert_fail@plt+0x49dc>
   16188:	ldr	r0, [r8, #8]
   1618c:	add	r4, r4, #1
   16190:	cmp	r4, r0
   16194:	bcc	16134 <__assert_fail@plt+0x49c0>
   16198:	mov	r0, #0
   1619c:	str	r0, [fp, #-52]	; 0xffffffcc
   161a0:	ldr	r0, [sp, #16]
   161a4:	cmp	r0, #0
   161a8:	bne	162dc <__assert_fail@plt+0x4b68>
   161ac:	ldrb	r2, [r9, #88]	; 0x58
   161b0:	ands	r0, r2, #4
   161b4:	beq	162dc <__assert_fail@plt+0x4b68>
   161b8:	ldr	r0, [sp, #28]
   161bc:	ldr	r0, [r0, #20]
   161c0:	cmp	r0, #0
   161c4:	bne	162dc <__assert_fail@plt+0x4b68>
   161c8:	ldr	r7, [r9, #8]
   161cc:	mov	sl, #0
   161d0:	cmp	r7, #0
   161d4:	beq	162b0 <__assert_fail@plt+0x4b3c>
   161d8:	ldr	r3, [r9]
   161dc:	mov	r8, #0
   161e0:	mov	ip, #1
   161e4:	mov	lr, #139	; 0x8b
   161e8:	mov	r6, #0
   161ec:	mov	r4, #0
   161f0:	add	r1, r3, r4, lsl #3
   161f4:	ldrb	r5, [r1, #4]
   161f8:	sub	r5, r5, #1
   161fc:	cmp	r5, #11
   16200:	bhi	1658c <__assert_fail@plt+0x4e18>
   16204:	add	r0, pc, #0
   16208:	ldr	pc, [r0, r5, lsl #2]
   1620c:	muleq	r1, r0, r2
   16210:	andeq	r6, r1, ip, lsr r2
   16214:	andeq	r6, r1, ip, asr #4
   16218:	andeq	r6, r1, ip, lsr r2
   1621c:	andeq	r6, r1, r8, lsr #5
   16220:	ldrdeq	r6, [r1], -ip
   16224:	andeq	r6, r1, ip, lsl #11
   16228:	andeq	r6, r1, ip, lsr r2
   1622c:	andeq	r6, r1, ip, lsr r2
   16230:	andeq	r6, r1, ip, lsr r2
   16234:	andeq	r6, r1, ip, lsr r2
   16238:	andeq	r6, r1, r0, ror r2
   1623c:	add	r4, r4, #1
   16240:	cmp	r4, r7
   16244:	bcc	161f0 <__assert_fail@plt+0x4a7c>
   16248:	b	164d0 <__assert_fail@plt+0x4d5c>
   1624c:	ldr	r5, [r3, r4, lsl #3]
   16250:	mov	r1, #4
   16254:	ldr	r0, [r5, r1, lsl #2]
   16258:	cmp	r0, #0
   1625c:	bne	162dc <__assert_fail@plt+0x4b68>
   16260:	add	r1, r1, #1
   16264:	cmp	r1, #7
   16268:	bls	16254 <__assert_fail@plt+0x4ae0>
   1626c:	b	1623c <__assert_fail@plt+0x4ac8>
   16270:	ldr	r0, [r3, r4, lsl #3]
   16274:	sub	r0, r0, #16
   16278:	ror	r1, r0, #4
   1627c:	cmp	r1, #7
   16280:	bhi	162dc <__assert_fail@plt+0x4b68>
   16284:	tst	lr, ip, lsl r1
   16288:	bne	1623c <__assert_fail@plt+0x4ac8>
   1628c:	b	162dc <__assert_fail@plt+0x4b68>
   16290:	ldrsb	r0, [r1]
   16294:	cmp	r0, #0
   16298:	mov	r0, #0
   1629c:	movwlt	r0, #1
   162a0:	orr	r6, r6, r0
   162a4:	b	1623c <__assert_fail@plt+0x4ac8>
   162a8:	mov	r8, #1
   162ac:	b	1623c <__assert_fail@plt+0x4ac8>
   162b0:	mov	r8, #0
   162b4:	mov	r0, #1
   162b8:	and	r1, r2, #249	; 0xf9
   162bc:	str	r0, [r9, #92]	; 0x5c
   162c0:	ldr	r0, [r9, #76]	; 0x4c
   162c4:	cmp	r0, #0
   162c8:	movwgt	sl, #1
   162cc:	orr	r0, r8, sl
   162d0:	and	r0, r0, #1
   162d4:	orr	r0, r1, r0, lsl #1
   162d8:	strb	r0, [r9, #88]	; 0x58
   162dc:	ldr	r1, [r9, #52]	; 0x34
   162e0:	ldr	r0, [r9, #24]
   162e4:	ldr	r1, [r1, #12]
   162e8:	ldr	r1, [r1, #28]
   162ec:	str	r1, [r9, #72]	; 0x48
   162f0:	add	r1, r1, r1, lsl #1
   162f4:	add	r1, r0, r1, lsl #2
   162f8:	sub	r0, fp, #40	; 0x28
   162fc:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   16300:	cmp	r0, #0
   16304:	str	r0, [fp, #-48]	; 0xffffffd0
   16308:	bne	16584 <__assert_fail@plt+0x4e10>
   1630c:	ldr	r0, [r9, #76]	; 0x4c
   16310:	ldr	sl, [sp, #28]
   16314:	cmp	r0, #1
   16318:	ldrge	r7, [fp, #-36]	; 0xffffffdc
   1631c:	cmpge	r7, #1
   16320:	blt	163e4 <__assert_fail@plt+0x4c70>
   16324:	mov	r6, #0
   16328:	sub	r8, fp, #40	; 0x28
   1632c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16330:	ldr	r2, [r9]
   16334:	ldr	r0, [r1, r6, lsl #2]
   16338:	add	r3, r2, r0, lsl #3
   1633c:	ldrb	r3, [r3, #4]
   16340:	cmp	r3, #4
   16344:	bne	163d8 <__assert_fail@plt+0x4c64>
   16348:	mov	r3, #0
   1634c:	cmp	r7, #1
   16350:	blt	16384 <__assert_fail@plt+0x4c10>
   16354:	ldr	r5, [r1, r3, lsl #2]
   16358:	add	r4, r2, r5, lsl #3
   1635c:	ldrb	r4, [r4, #4]
   16360:	cmp	r4, #9
   16364:	bne	16378 <__assert_fail@plt+0x4c04>
   16368:	ldr	r4, [r2, r0, lsl #3]
   1636c:	ldr	r5, [r2, r5, lsl #3]
   16370:	cmp	r5, r4
   16374:	beq	16384 <__assert_fail@plt+0x4c10>
   16378:	add	r3, r3, #1
   1637c:	cmp	r3, r7
   16380:	blt	16354 <__assert_fail@plt+0x4be0>
   16384:	cmp	r3, r7
   16388:	beq	163d8 <__assert_fail@plt+0x4c64>
   1638c:	ldr	r1, [r9, #20]
   16390:	add	r0, r0, r0, lsl #1
   16394:	add	r0, r1, r0, lsl #2
   16398:	ldr	r0, [r0, #8]
   1639c:	ldr	r4, [r0]
   163a0:	mov	r0, r8
   163a4:	mov	r1, r4
   163a8:	bl	1d86c <__assert_fail@plt+0xc0f8>
   163ac:	cmp	r0, #0
   163b0:	bne	163d8 <__assert_fail@plt+0x4c64>
   163b4:	ldr	r0, [r9, #24]
   163b8:	add	r1, r4, r4, lsl #1
   163bc:	add	r1, r0, r1, lsl #2
   163c0:	mov	r0, r8
   163c4:	bl	1d440 <__assert_fail@plt+0xbccc>
   163c8:	cmp	r0, #0
   163cc:	bne	164a0 <__assert_fail@plt+0x4d2c>
   163d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   163d4:	mov	r6, #0
   163d8:	add	r6, r6, #1
   163dc:	cmp	r6, r7
   163e0:	blt	1632c <__assert_fail@plt+0x4bb8>
   163e4:	sub	r0, fp, #48	; 0x30
   163e8:	sub	r2, fp, #40	; 0x28
   163ec:	mov	r1, r9
   163f0:	mov	r3, #0
   163f4:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   163f8:	cmp	r0, #0
   163fc:	str	r0, [r9, #36]	; 0x24
   16400:	beq	16480 <__assert_fail@plt+0x4d0c>
   16404:	ldrsb	r1, [r0, #52]	; 0x34
   16408:	cmn	r1, #1
   1640c:	ble	16420 <__assert_fail@plt+0x4cac>
   16410:	str	r0, [r9, #40]	; 0x28
   16414:	str	r0, [r9, #44]	; 0x2c
   16418:	str	r0, [r9, #48]	; 0x30
   1641c:	b	16494 <__assert_fail@plt+0x4d20>
   16420:	sub	r4, fp, #48	; 0x30
   16424:	sub	r6, fp, #40	; 0x28
   16428:	mov	r1, r9
   1642c:	mov	r3, #1
   16430:	mov	r0, r4
   16434:	mov	r2, r6
   16438:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1643c:	str	r0, [r9, #40]	; 0x28
   16440:	mov	r0, r4
   16444:	mov	r1, r9
   16448:	mov	r2, r6
   1644c:	mov	r3, #2
   16450:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   16454:	str	r0, [r9, #44]	; 0x2c
   16458:	mov	r0, r4
   1645c:	mov	r1, r9
   16460:	mov	r2, r6
   16464:	mov	r3, #6
   16468:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1646c:	str	r0, [r9, #48]	; 0x30
   16470:	ldr	r1, [r9, #40]	; 0x28
   16474:	cmp	r1, #0
   16478:	cmpne	r0, #0
   1647c:	bne	16488 <__assert_fail@plt+0x4d14>
   16480:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16484:	b	164a0 <__assert_fail@plt+0x4d2c>
   16488:	ldr	r0, [r9, #44]	; 0x2c
   1648c:	cmp	r0, #0
   16490:	beq	16480 <__assert_fail@plt+0x4d0c>
   16494:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16498:	bl	13c04 <__assert_fail@plt+0x2490>
   1649c:	mov	r0, #0
   164a0:	str	r0, [fp, #-52]	; 0xffffffcc
   164a4:	mov	r0, sl
   164a8:	bl	18dd4 <__assert_fail@plt+0x7660>
   164ac:	add	r0, sp, #32
   164b0:	bl	18e24 <__assert_fail@plt+0x76b0>
   164b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   164b8:	mov	r4, #0
   164bc:	cmp	r0, #0
   164c0:	bne	15eac <__assert_fail@plt+0x4738>
   164c4:	mov	r0, r4
   164c8:	sub	sp, fp, #28
   164cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164d0:	orr	r0, r6, r8
   164d4:	tst	r0, #1
   164d8:	beq	162b4 <__assert_fail@plt+0x4b40>
   164dc:	mov	r2, #0
   164e0:	mov	r7, #7
   164e4:	b	164ec <__assert_fail@plt+0x4d78>
   164e8:	ldr	r3, [r9]
   164ec:	add	r3, r3, r2, lsl #3
   164f0:	ldr	r6, [r3, #4]
   164f4:	uxtb	r1, r6
   164f8:	cmp	r1, #5
   164fc:	beq	1651c <__assert_fail@plt+0x4da8>
   16500:	cmp	r1, #1
   16504:	bne	16524 <__assert_fail@plt+0x4db0>
   16508:	ldrsb	r0, [r3]
   1650c:	cmn	r0, #1
   16510:	bicle	r0, r6, #2097152	; 0x200000
   16514:	strle	r0, [r3, #4]
   16518:	b	16524 <__assert_fail@plt+0x4db0>
   1651c:	bfi	r6, r7, #0, #8
   16520:	str	r6, [r3, #4]
   16524:	ldr	r0, [r9, #8]
   16528:	add	r2, r2, #1
   1652c:	cmp	r2, r0
   16530:	bcc	164e8 <__assert_fail@plt+0x4d74>
   16534:	ldrb	r2, [r9, #88]	; 0x58
   16538:	b	162b4 <__assert_fail@plt+0x4b40>
   1653c:	mov	r0, r9
   16540:	mov	r1, #160	; 0xa0
   16544:	mov	r4, #160	; 0xa0
   16548:	bl	23c14 <__assert_fail@plt+0x124a0>
   1654c:	cmp	r0, #0
   16550:	beq	1657c <__assert_fail@plt+0x4e08>
   16554:	mov	r9, r0
   16558:	ldr	r0, [sp, #28]
   1655c:	str	r9, [r0]
   16560:	str	r4, [r0, #4]
   16564:	b	15990 <__assert_fail@plt+0x421c>
   16568:	mov	r0, #12
   1656c:	str	r0, [fp, #-52]	; 0xffffffcc
   16570:	mov	r0, #0
   16574:	str	r0, [r9, #52]	; 0x34
   16578:	b	15e9c <__assert_fail@plt+0x4728>
   1657c:	mov	r4, #12
   16580:	b	164c4 <__assert_fail@plt+0x4d50>
   16584:	ldr	sl, [sp, #28]
   16588:	b	164a0 <__assert_fail@plt+0x4d2c>
   1658c:	bl	11750 <abort@plt>
   16590:	movw	r2, #25588	; 0x63f4
   16594:	movt	r2, #3
   16598:	ldr	r1, [r2]
   1659c:	str	r0, [r2]
   165a0:	mov	r0, r1
   165a4:	bx	lr
   165a8:	push	{r4, r5, r6, sl, fp, lr}
   165ac:	add	fp, sp, #16
   165b0:	ldr	r5, [r0, #16]
   165b4:	ldr	r6, [r0]
   165b8:	mov	r4, r0
   165bc:	mov	r1, #0
   165c0:	mov	r2, #256	; 0x100
   165c4:	mov	r0, r5
   165c8:	bl	11660 <memset@plt>
   165cc:	ldr	r1, [r6, #36]	; 0x24
   165d0:	mov	r0, r4
   165d4:	mov	r2, r5
   165d8:	bl	16644 <__assert_fail@plt+0x4ed0>
   165dc:	ldr	r0, [r6, #36]	; 0x24
   165e0:	ldr	r1, [r6, #40]	; 0x28
   165e4:	cmp	r0, r1
   165e8:	beq	165fc <__assert_fail@plt+0x4e88>
   165ec:	mov	r0, r4
   165f0:	mov	r2, r5
   165f4:	bl	16644 <__assert_fail@plt+0x4ed0>
   165f8:	ldr	r0, [r6, #36]	; 0x24
   165fc:	ldr	r1, [r6, #44]	; 0x2c
   16600:	cmp	r0, r1
   16604:	beq	16618 <__assert_fail@plt+0x4ea4>
   16608:	mov	r0, r4
   1660c:	mov	r2, r5
   16610:	bl	16644 <__assert_fail@plt+0x4ed0>
   16614:	ldr	r0, [r6, #36]	; 0x24
   16618:	ldr	r1, [r6, #48]	; 0x30
   1661c:	cmp	r0, r1
   16620:	beq	16630 <__assert_fail@plt+0x4ebc>
   16624:	mov	r0, r4
   16628:	mov	r2, r5
   1662c:	bl	16644 <__assert_fail@plt+0x4ed0>
   16630:	ldrb	r0, [r4, #28]
   16634:	orr	r0, r0, #8
   16638:	strb	r0, [r4, #28]
   1663c:	mov	r0, #0
   16640:	pop	{r4, r5, r6, sl, fp, pc}
   16644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16648:	add	fp, sp, #28
   1664c:	sub	sp, sp, #308	; 0x134
   16650:	ldr	r8, [r0]
   16654:	str	r0, [sp, #16]
   16658:	mov	sl, #0
   1665c:	str	r2, [sp, #28]
   16660:	ldr	r0, [r8, #92]	; 0x5c
   16664:	cmp	r0, #1
   16668:	ldreq	r0, [sp, #16]
   1666c:	ldrbeq	r0, [r0, #14]
   16670:	ubfxeq	sl, r0, #6, #1
   16674:	ldr	r0, [r1, #8]
   16678:	cmp	r0, #1
   1667c:	blt	169f0 <__assert_fail@plt+0x527c>
   16680:	add	r0, sp, #32
   16684:	mov	r4, #1
   16688:	mov	r2, #0
   1668c:	str	r1, [sp, #8]
   16690:	str	r8, [sp, #20]
   16694:	add	r0, r0, #1
   16698:	str	r0, [sp, #4]
   1669c:	movw	r0, #1
   166a0:	movt	r0, #32
   166a4:	add	r0, r0, #254	; 0xfe
   166a8:	str	r0, [sp]
   166ac:	ldr	r0, [r1, #12]
   166b0:	str	r2, [sp, #12]
   166b4:	ldr	r9, [r0, r2, lsl #2]
   166b8:	ldr	r0, [r8]
   166bc:	add	r1, r0, r9, lsl #3
   166c0:	ldrb	r5, [r1, #4]
   166c4:	sub	r1, r5, #1
   166c8:	cmp	r1, #6
   166cc:	bhi	169b0 <__assert_fail@plt+0x523c>
   166d0:	add	r2, pc, #0
   166d4:	ldr	pc, [r2, r1, lsl #2]
   166d8:	strdeq	r6, [r1], -r4
   166dc:	andeq	r6, r1, ip, asr #19
   166e0:	andeq	r6, r1, r0, lsl #16
   166e4:			; <UNDEFINED> instruction: 0x000169b0
   166e8:	andeq	r6, r1, ip, asr #19
   166ec:	andeq	r6, r1, r8, ror r8
   166f0:	andeq	r6, r1, ip, asr #19
   166f4:	ldrb	r0, [r0, r9, lsl #3]
   166f8:	ldr	r1, [sp, #28]
   166fc:	cmp	sl, #0
   16700:	strb	r4, [r1, r0]
   16704:	beq	16714 <__assert_fail@plt+0x4fa0>
   16708:	bl	11498 <tolower@plt>
   1670c:	ldr	r1, [sp, #28]
   16710:	strb	r4, [r1, r0]
   16714:	ldr	r0, [sp, #16]
   16718:	ldrb	r0, [r0, #14]
   1671c:	tst	r0, #64	; 0x40
   16720:	beq	169b0 <__assert_fail@plt+0x523c>
   16724:	ldr	r0, [r8, #92]	; 0x5c
   16728:	cmp	r0, #2
   1672c:	blt	169b0 <__assert_fail@plt+0x523c>
   16730:	ldr	r0, [r8]
   16734:	add	r1, r9, #1
   16738:	add	r5, sp, #32
   1673c:	mov	r3, r9
   16740:	movw	r6, #1
   16744:	mov	r7, #0
   16748:	movt	r6, #32
   1674c:	ldrb	r0, [r0, r9, lsl #3]
   16750:	mov	r9, r5
   16754:	ldr	r5, [sp]
   16758:	strb	r0, [sp, #32]
   1675c:	ldr	r0, [r8, #8]
   16760:	cmp	r1, r0
   16764:	ldr	r0, [sp, #4]
   16768:	bcs	167a8 <__assert_fail@plt+0x5034>
   1676c:	ldr	r0, [sp, #4]
   16770:	ldr	r1, [r8]
   16774:	add	r1, r1, r3, lsl #3
   16778:	ldr	r2, [r1, #12]
   1677c:	and	r2, r2, r5
   16780:	cmp	r2, r6
   16784:	bne	167a8 <__assert_fail@plt+0x5034>
   16788:	ldrb	r1, [r1, #8]
   1678c:	strb	r1, [r0], #1
   16790:	add	r1, r3, #1
   16794:	add	r3, r3, #2
   16798:	ldr	r2, [r8, #8]
   1679c:	cmp	r3, r2
   167a0:	mov	r3, r1
   167a4:	bcc	16770 <__assert_fail@plt+0x4ffc>
   167a8:	sub	r6, r0, r9
   167ac:	sub	r5, fp, #48	; 0x30
   167b0:	sub	r0, fp, #36	; 0x24
   167b4:	mov	r1, r9
   167b8:	str	r7, [fp, #-44]	; 0xffffffd4
   167bc:	str	r7, [fp, #-48]	; 0xffffffd0
   167c0:	mov	r2, r6
   167c4:	mov	r3, r5
   167c8:	bl	23fb0 <__assert_fail@plt+0x1283c>
   167cc:	cmp	r0, r6
   167d0:	bne	169b0 <__assert_fail@plt+0x523c>
   167d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   167d8:	bl	114b0 <towlower@plt>
   167dc:	mov	r1, r0
   167e0:	mov	r0, r9
   167e4:	mov	r2, r5
   167e8:	bl	11408 <wcrtomb@plt>
   167ec:	cmn	r0, #1
   167f0:	ldrbne	r0, [sp, #32]
   167f4:	ldrne	r1, [sp, #28]
   167f8:	strbne	r4, [r1, r0]
   167fc:	b	169b0 <__assert_fail@plt+0x523c>
   16800:	ldr	r5, [sp, #28]
   16804:	mov	r7, #0
   16808:	mov	r6, #0
   1680c:	str	r9, [sp, #24]
   16810:	b	16820 <__assert_fail@plt+0x50ac>
   16814:	ldr	r0, [r8]
   16818:	add	r5, r5, #32
   1681c:	add	r7, r7, #32
   16820:	ldr	r0, [r0, r9, lsl #3]
   16824:	mov	r8, #0
   16828:	ldr	r9, [r0, r6, lsl #2]
   1682c:	b	16844 <__assert_fail@plt+0x50d0>
   16830:	add	r0, r7, r8
   16834:	bl	11498 <tolower@plt>
   16838:	ldr	r1, [sp, #28]
   1683c:	strb	r4, [r1, r0]
   16840:	b	16854 <__assert_fail@plt+0x50e0>
   16844:	tst	r9, r4, lsl r8
   16848:	strbne	r4, [r5, r8]
   1684c:	cmpne	sl, #0
   16850:	bne	16830 <__assert_fail@plt+0x50bc>
   16854:	add	r8, r8, #1
   16858:	cmp	r8, #32
   1685c:	bne	16844 <__assert_fail@plt+0x50d0>
   16860:	ldr	r8, [sp, #20]
   16864:	ldr	r9, [sp, #24]
   16868:	add	r6, r6, #1
   1686c:	cmp	r6, #8
   16870:	bne	16814 <__assert_fail@plt+0x50a0>
   16874:	b	169b0 <__assert_fail@plt+0x523c>
   16878:	ldr	r6, [r0, r9, lsl #3]
   1687c:	ldr	r0, [r8, #92]	; 0x5c
   16880:	cmp	r0, #2
   16884:	blt	168f8 <__assert_fail@plt+0x5184>
   16888:	ldr	r0, [r6, #36]	; 0x24
   1688c:	cmp	r0, #0
   16890:	bne	168a8 <__assert_fail@plt+0x5134>
   16894:	ldrb	r0, [r6, #16]
   16898:	tst	r0, #1
   1689c:	ldreq	r0, [r6, #32]
   168a0:	cmpeq	r0, #0
   168a4:	beq	168f8 <__assert_fail@plt+0x5184>
   168a8:	mov	r6, #0
   168ac:	add	r5, sp, #32
   168b0:	sub	r7, fp, #48	; 0x30
   168b4:	strb	r6, [fp, #-48]	; 0xffffffd0
   168b8:	mov	r0, #0
   168bc:	mov	r1, r7
   168c0:	mov	r2, #1
   168c4:	mov	r3, r5
   168c8:	str	r6, [sp, #36]	; 0x24
   168cc:	str	r6, [sp, #32]
   168d0:	bl	23fb0 <__assert_fail@plt+0x1283c>
   168d4:	cmn	r0, #2
   168d8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   168dc:	ldreq	r0, [sp, #28]
   168e0:	strbeq	r4, [r0, r1]
   168e4:	add	r0, r1, #1
   168e8:	tst	r0, #255	; 0xff
   168ec:	strb	r0, [fp, #-48]	; 0xffffffd0
   168f0:	bne	168b8 <__assert_fail@plt+0x5144>
   168f4:	b	169b0 <__assert_fail@plt+0x523c>
   168f8:	ldr	r0, [r6, #20]
   168fc:	cmp	r0, #1
   16900:	blt	169b0 <__assert_fail@plt+0x523c>
   16904:	mov	r9, #0
   16908:	mov	r0, #0
   1690c:	sub	r7, fp, #48	; 0x30
   16910:	add	r5, sp, #32
   16914:	str	r0, [fp, #-44]	; 0xffffffd4
   16918:	str	r0, [fp, #-48]	; 0xffffffd0
   1691c:	mov	r2, r7
   16920:	ldr	r0, [r6]
   16924:	ldr	r1, [r0, r9, lsl #2]
   16928:	mov	r0, r5
   1692c:	bl	11408 <wcrtomb@plt>
   16930:	cmn	r0, #1
   16934:	beq	16958 <__assert_fail@plt+0x51e4>
   16938:	ldrb	r0, [sp, #32]
   1693c:	ldr	r1, [sp, #28]
   16940:	cmp	sl, #0
   16944:	strb	r4, [r1, r0]
   16948:	beq	16958 <__assert_fail@plt+0x51e4>
   1694c:	bl	11498 <tolower@plt>
   16950:	ldr	r1, [sp, #28]
   16954:	strb	r4, [r1, r0]
   16958:	ldr	r0, [sp, #16]
   1695c:	ldrb	r0, [r0, #14]
   16960:	tst	r0, #64	; 0x40
   16964:	beq	169a0 <__assert_fail@plt+0x522c>
   16968:	ldr	r0, [r8, #92]	; 0x5c
   1696c:	cmp	r0, #2
   16970:	blt	169a0 <__assert_fail@plt+0x522c>
   16974:	ldr	r0, [r6]
   16978:	ldr	r0, [r0, r9, lsl #2]
   1697c:	bl	114b0 <towlower@plt>
   16980:	mov	r1, r0
   16984:	mov	r0, r5
   16988:	mov	r2, r7
   1698c:	bl	11408 <wcrtomb@plt>
   16990:	cmn	r0, #1
   16994:	ldrbne	r0, [sp, #32]
   16998:	ldrne	r1, [sp, #28]
   1699c:	strbne	r4, [r1, r0]
   169a0:	ldr	r0, [r6, #20]
   169a4:	add	r9, r9, #1
   169a8:	cmp	r9, r0
   169ac:	blt	16908 <__assert_fail@plt+0x5194>
   169b0:	ldr	r1, [sp, #8]
   169b4:	ldr	r2, [sp, #12]
   169b8:	ldr	r0, [r1, #8]
   169bc:	add	r2, r2, #1
   169c0:	cmp	r2, r0
   169c4:	blt	166ac <__assert_fail@plt+0x4f38>
   169c8:	b	169f0 <__assert_fail@plt+0x527c>
   169cc:	ldr	r0, [sp, #28]
   169d0:	mov	r1, #1
   169d4:	mov	r2, #256	; 0x100
   169d8:	bl	11660 <memset@plt>
   169dc:	cmp	r5, #2
   169e0:	ldreq	r1, [sp, #16]
   169e4:	ldrbeq	r0, [r1, #28]
   169e8:	orreq	r0, r0, #1
   169ec:	strbeq	r0, [r1, #28]
   169f0:	sub	sp, fp, #28
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169fc:	add	fp, sp, #24
   16a00:	mov	r4, r0
   16a04:	mov	r0, #0
   16a08:	mov	r6, r2
   16a0c:	mov	r8, r1
   16a10:	str	r0, [r4]
   16a14:	str	r0, [r4, #4]
   16a18:	str	r0, [r4, #8]
   16a1c:	mov	r0, #256	; 0x100
   16a20:	bl	23be4 <__assert_fail@plt+0x12470>
   16a24:	cmp	r0, #0
   16a28:	str	r0, [r4, #16]
   16a2c:	beq	16adc <__assert_fail@plt+0x5368>
   16a30:	movw	r0, #45820	; 0xb2fc
   16a34:	tst	r6, #1
   16a38:	and	r1, r6, #2
   16a3c:	movt	r0, #3
   16a40:	movweq	r0, #710	; 0x2c6
   16a44:	movteq	r0, #257	; 0x101
   16a48:	tst	r6, #4
   16a4c:	orr	r5, r0, r1, lsl #21
   16a50:	bne	16a64 <__assert_fail@plt+0x52f0>
   16a54:	ldrb	r0, [r4, #28]
   16a58:	and	r0, r0, #127	; 0x7f
   16a5c:	strb	r0, [r4, #28]
   16a60:	b	16a84 <__assert_fail@plt+0x5310>
   16a64:	ldrb	r0, [r4, #28]
   16a68:	mvn	r1, #127	; 0x7f
   16a6c:	orr	r0, r0, r1
   16a70:	movw	r1, #45758	; 0xb2be
   16a74:	movt	r1, #323	; 0x143
   16a78:	strb	r0, [r4, #28]
   16a7c:	and	r1, r5, r1
   16a80:	orr	r5, r1, #256	; 0x100
   16a84:	and	r1, r6, #8
   16a88:	and	r0, r0, #239	; 0xef
   16a8c:	mov	r7, #0
   16a90:	orr	r0, r0, r1, lsl #1
   16a94:	str	r7, [r4, #20]
   16a98:	strb	r0, [r4, #28]
   16a9c:	mov	r0, r8
   16aa0:	bl	11618 <strlen@plt>
   16aa4:	mov	r2, r0
   16aa8:	mov	r0, r4
   16aac:	mov	r1, r8
   16ab0:	mov	r3, r5
   16ab4:	bl	15944 <__assert_fail@plt+0x41d0>
   16ab8:	mov	r5, r0
   16abc:	cmp	r0, #16
   16ac0:	movweq	r5, #8
   16ac4:	cmp	r5, #0
   16ac8:	bne	16ae4 <__assert_fail@plt+0x5370>
   16acc:	mov	r0, r4
   16ad0:	bl	165a8 <__assert_fail@plt+0x4e34>
   16ad4:	mov	r0, r7
   16ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16adc:	mov	r7, #12
   16ae0:	b	16ad4 <__assert_fail@plt+0x5360>
   16ae4:	ldr	r0, [r4, #16]
   16ae8:	bl	13c04 <__assert_fail@plt+0x2490>
   16aec:	str	r7, [r4, #16]
   16af0:	mov	r7, r5
   16af4:	b	16ad4 <__assert_fail@plt+0x5360>
   16af8:	push	{r4, r5, r6, r7, fp, lr}
   16afc:	add	fp, sp, #16
   16b00:	cmp	r0, #17
   16b04:	bcs	16b78 <__assert_fail@plt+0x5404>
   16b08:	movw	r1, #21144	; 0x5298
   16b0c:	mov	r4, r2
   16b10:	mov	r2, #5
   16b14:	mov	r5, r3
   16b18:	movt	r1, #2
   16b1c:	ldr	r0, [r1, r0, lsl #2]
   16b20:	movw	r1, #20760	; 0x5118
   16b24:	movt	r1, #2
   16b28:	add	r1, r1, r0
   16b2c:	mov	r0, #0
   16b30:	bl	114ec <dcgettext@plt>
   16b34:	mov	r6, r0
   16b38:	bl	11618 <strlen@plt>
   16b3c:	add	r7, r0, #1
   16b40:	cmp	r5, #0
   16b44:	beq	16b60 <__assert_fail@plt+0x53ec>
   16b48:	cmp	r7, r5
   16b4c:	mov	r2, r7
   16b50:	bhi	16b68 <__assert_fail@plt+0x53f4>
   16b54:	mov	r0, r4
   16b58:	mov	r1, r6
   16b5c:	bl	1148c <memcpy@plt>
   16b60:	mov	r0, r7
   16b64:	pop	{r4, r5, r6, r7, fp, pc}
   16b68:	sub	r2, r5, #1
   16b6c:	mov	r0, #0
   16b70:	strb	r0, [r4, r2]
   16b74:	b	16b54 <__assert_fail@plt+0x53e0>
   16b78:	bl	11750 <abort@plt>
   16b7c:	push	{r4, r5, fp, lr}
   16b80:	add	fp, sp, #8
   16b84:	ldr	r5, [r0]
   16b88:	mov	r4, r0
   16b8c:	cmp	r5, #0
   16b90:	beq	16bbc <__assert_fail@plt+0x5448>
   16b94:	movw	r0, #0
   16b98:	movw	r1, #0
   16b9c:	movt	r0, #0
   16ba0:	movt	r1, #0
   16ba4:	orrs	r0, r1, r0
   16ba8:	beq	16bb4 <__assert_fail@plt+0x5440>
   16bac:	add	r0, r5, #136	; 0x88
   16bb0:	bl	11438 <pthread_mutex_destroy@plt>
   16bb4:	mov	r0, r5
   16bb8:	bl	16be4 <__assert_fail@plt+0x5470>
   16bbc:	mov	r5, #0
   16bc0:	str	r5, [r4]
   16bc4:	str	r5, [r4, #4]
   16bc8:	ldr	r0, [r4, #16]
   16bcc:	bl	13c04 <__assert_fail@plt+0x2490>
   16bd0:	str	r5, [r4, #16]
   16bd4:	ldr	r0, [r4, #20]
   16bd8:	bl	13c04 <__assert_fail@plt+0x2490>
   16bdc:	str	r5, [r4, #20]
   16be0:	pop	{r4, r5, fp, pc}
   16be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16be8:	add	fp, sp, #28
   16bec:	sub	sp, sp, #4
   16bf0:	mov	sl, r0
   16bf4:	ldr	r0, [r0]
   16bf8:	cmp	r0, #0
   16bfc:	ldrne	r1, [sl, #8]
   16c00:	cmpne	r1, #0
   16c04:	bne	16d50 <__assert_fail@plt+0x55dc>
   16c08:	ldr	r0, [sl, #12]
   16c0c:	bl	13c04 <__assert_fail@plt+0x2490>
   16c10:	ldr	r0, [sl, #8]
   16c14:	cmp	r0, #0
   16c18:	beq	16c84 <__assert_fail@plt+0x5510>
   16c1c:	add	r7, sl, #20
   16c20:	add	r8, sl, #28
   16c24:	add	r9, sl, #24
   16c28:	mov	r5, #0
   16c2c:	mov	r6, #8
   16c30:	ldr	r0, [r9]
   16c34:	cmp	r0, #0
   16c38:	beq	16c44 <__assert_fail@plt+0x54d0>
   16c3c:	ldr	r0, [r0, r6]
   16c40:	bl	13c04 <__assert_fail@plt+0x2490>
   16c44:	ldr	r0, [r8]
   16c48:	cmp	r0, #0
   16c4c:	beq	16c58 <__assert_fail@plt+0x54e4>
   16c50:	ldr	r0, [r0, r6]
   16c54:	bl	13c04 <__assert_fail@plt+0x2490>
   16c58:	ldr	r0, [r7]
   16c5c:	cmp	r0, #0
   16c60:	beq	16c6c <__assert_fail@plt+0x54f8>
   16c64:	ldr	r0, [r0, r6]
   16c68:	bl	13c04 <__assert_fail@plt+0x2490>
   16c6c:	ldr	r0, [sl, #8]
   16c70:	add	r5, r5, #1
   16c74:	add	r6, r6, #12
   16c78:	cmp	r5, r0
   16c7c:	bcc	16c30 <__assert_fail@plt+0x54bc>
   16c80:	b	16c90 <__assert_fail@plt+0x551c>
   16c84:	add	r8, sl, #28
   16c88:	add	r9, sl, #24
   16c8c:	add	r7, sl, #20
   16c90:	ldr	r0, [r7]
   16c94:	bl	13c04 <__assert_fail@plt+0x2490>
   16c98:	ldr	r0, [r9]
   16c9c:	bl	13c04 <__assert_fail@plt+0x2490>
   16ca0:	ldr	r0, [r8]
   16ca4:	bl	13c04 <__assert_fail@plt+0x2490>
   16ca8:	ldr	r0, [sl]
   16cac:	bl	13c04 <__assert_fail@plt+0x2490>
   16cb0:	ldr	r5, [sl, #32]
   16cb4:	cmp	r5, #0
   16cb8:	beq	16d18 <__assert_fail@plt+0x55a4>
   16cbc:	mov	r6, #0
   16cc0:	b	16ccc <__assert_fail@plt+0x5558>
   16cc4:	ldr	r5, [sl, #32]
   16cc8:	add	r6, r6, #1
   16ccc:	add	r0, r6, r6, lsl #1
   16cd0:	ldr	r0, [r5, r0, lsl #2]!
   16cd4:	add	r7, r5, #8
   16cd8:	cmp	r0, #1
   16cdc:	blt	16d00 <__assert_fail@plt+0x558c>
   16ce0:	mov	r4, #0
   16ce4:	ldr	r0, [r7]
   16ce8:	ldr	r0, [r0, r4, lsl #2]
   16cec:	bl	18d3c <__assert_fail@plt+0x75c8>
   16cf0:	ldr	r0, [r5]
   16cf4:	add	r4, r4, #1
   16cf8:	cmp	r4, r0
   16cfc:	blt	16ce4 <__assert_fail@plt+0x5570>
   16d00:	ldr	r0, [r7]
   16d04:	bl	13c04 <__assert_fail@plt+0x2490>
   16d08:	ldr	r0, [sl, #68]	; 0x44
   16d0c:	cmp	r6, r0
   16d10:	bcc	16cc4 <__assert_fail@plt+0x5550>
   16d14:	ldr	r5, [sl, #32]
   16d18:	mov	r0, r5
   16d1c:	bl	13c04 <__assert_fail@plt+0x2490>
   16d20:	ldr	r0, [sl, #60]	; 0x3c
   16d24:	movw	r1, #21212	; 0x52dc
   16d28:	movt	r1, #2
   16d2c:	cmp	r0, r1
   16d30:	beq	16d38 <__assert_fail@plt+0x55c4>
   16d34:	bl	13c04 <__assert_fail@plt+0x2490>
   16d38:	ldr	r0, [sl, #132]	; 0x84
   16d3c:	bl	13c04 <__assert_fail@plt+0x2490>
   16d40:	mov	r0, sl
   16d44:	sub	sp, fp, #28
   16d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d4c:	b	13c04 <__assert_fail@plt+0x2490>
   16d50:	bl	18d0c <__assert_fail@plt+0x7598>
   16d54:	ldr	r0, [sl, #8]
   16d58:	cmp	r0, #2
   16d5c:	bcc	16c08 <__assert_fail@plt+0x5494>
   16d60:	mov	r5, #1
   16d64:	mov	r6, #8
   16d68:	ldr	r0, [sl]
   16d6c:	add	r0, r0, r6
   16d70:	bl	18d0c <__assert_fail@plt+0x7598>
   16d74:	ldr	r0, [sl, #8]
   16d78:	add	r5, r5, #1
   16d7c:	add	r6, r6, #8
   16d80:	cmp	r5, r0
   16d84:	bcc	16d68 <__assert_fail@plt+0x55f4>
   16d88:	b	16c08 <__assert_fail@plt+0x5494>
   16d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d90:	add	fp, sp, #28
   16d94:	sub	sp, sp, #28
   16d98:	ldr	sl, [fp, #8]
   16d9c:	mov	r7, #2
   16da0:	cmp	sl, #7
   16da4:	bhi	16e78 <__assert_fail@plt+0x5704>
   16da8:	mov	r5, r0
   16dac:	ldr	r0, [r0]
   16db0:	mov	r6, r3
   16db4:	mov	r9, r2
   16db8:	mov	r4, r1
   16dbc:	tst	sl, #4
   16dc0:	str	r0, [sp, #24]
   16dc4:	bne	16ddc <__assert_fail@plt+0x5668>
   16dc8:	mov	r0, r4
   16dcc:	bl	11618 <strlen@plt>
   16dd0:	mov	r7, r0
   16dd4:	mov	r8, #0
   16dd8:	b	16de4 <__assert_fail@plt+0x5670>
   16ddc:	ldr	r8, [r6]
   16de0:	ldr	r7, [r6, #4]
   16de4:	movw	r0, #0
   16de8:	movw	r1, #0
   16dec:	movt	r0, #0
   16df0:	movt	r1, #0
   16df4:	orrs	r0, r1, r0
   16df8:	str	r0, [sp, #20]
   16dfc:	beq	16e0c <__assert_fail@plt+0x5698>
   16e00:	ldr	r0, [sp, #24]
   16e04:	add	r0, r0, #136	; 0x88
   16e08:	bl	11474 <pthread_mutex_lock@plt>
   16e0c:	ldrb	r0, [r5, #28]
   16e10:	tst	r0, #16
   16e14:	bne	16e28 <__assert_fail@plt+0x56b4>
   16e18:	str	r7, [sp]
   16e1c:	stmib	sp, {r7, r9}
   16e20:	str	r6, [sp, #12]
   16e24:	b	16e3c <__assert_fail@plt+0x56c8>
   16e28:	mov	r0, #0
   16e2c:	str	r7, [sp]
   16e30:	str	r7, [sp, #4]
   16e34:	str	r0, [sp, #8]
   16e38:	str	r0, [sp, #12]
   16e3c:	mov	r0, r5
   16e40:	mov	r1, r4
   16e44:	mov	r2, r7
   16e48:	mov	r3, r8
   16e4c:	str	sl, [sp, #16]
   16e50:	bl	16e84 <__assert_fail@plt+0x5710>
   16e54:	mov	r7, r0
   16e58:	ldr	r0, [sp, #20]
   16e5c:	cmp	r0, #0
   16e60:	beq	16e70 <__assert_fail@plt+0x56fc>
   16e64:	ldr	r0, [sp, #24]
   16e68:	add	r0, r0, #136	; 0x88
   16e6c:	bl	113c0 <pthread_mutex_unlock@plt>
   16e70:	cmp	r7, #0
   16e74:	movwne	r7, #1
   16e78:	mov	r0, r7
   16e7c:	sub	sp, fp, #28
   16e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e88:	add	fp, sp, #28
   16e8c:	sub	sp, sp, #436	; 0x1b4
   16e90:	ldr	r5, [r0]
   16e94:	str	r2, [sp, #108]	; 0x6c
   16e98:	str	r1, [sp, #104]	; 0x68
   16e9c:	mov	r9, r0
   16ea0:	add	r0, sp, #112	; 0x70
   16ea4:	mov	r1, #0
   16ea8:	mov	r2, #136	; 0x88
   16eac:	mov	r7, r3
   16eb0:	mov	r8, #0
   16eb4:	bl	11660 <memset@plt>
   16eb8:	str	r5, [sp, #196]	; 0xc4
   16ebc:	ldr	r0, [fp, #8]
   16ec0:	mov	sl, #0
   16ec4:	ldr	r1, [r9, #16]
   16ec8:	cmp	r1, #0
   16ecc:	beq	16ee8 <__assert_fail@plt+0x5774>
   16ed0:	ldrb	r2, [r9, #28]
   16ed4:	and	r2, r2, #9
   16ed8:	cmp	r2, #8
   16edc:	movne	r1, #0
   16ee0:	subs	sl, r7, r0
   16ee4:	movne	sl, r1
   16ee8:	ldr	r2, [r9, #24]
   16eec:	ldr	r6, [fp, #16]
   16ef0:	ldr	r1, [r9, #8]
   16ef4:	mov	r4, #1
   16ef8:	mvn	r3, r2
   16efc:	cmp	r2, r6
   16f00:	addcc	r8, r3, r6
   16f04:	cmp	r1, #0
   16f08:	beq	1874c <__assert_fail@plt+0x6fd8>
   16f0c:	ldr	r1, [r5, #36]	; 0x24
   16f10:	cmp	r1, #0
   16f14:	ldrne	r2, [r5, #40]	; 0x28
   16f18:	cmpne	r2, #0
   16f1c:	beq	1874c <__assert_fail@plt+0x6fd8>
   16f20:	ldr	r3, [r5, #44]	; 0x2c
   16f24:	cmp	r3, #0
   16f28:	ldrne	r6, [r5, #48]	; 0x30
   16f2c:	cmpne	r6, #0
   16f30:	beq	1874c <__assert_fail@plt+0x6fd8>
   16f34:	ldr	r1, [r1, #8]
   16f38:	ldr	r6, [r9, #20]
   16f3c:	cmp	r1, #0
   16f40:	beq	16f50 <__assert_fail@plt+0x57dc>
   16f44:	ldr	lr, [sp, #108]	; 0x6c
   16f48:	ldr	ip, [sp, #104]	; 0x68
   16f4c:	b	16f64 <__assert_fail@plt+0x57f0>
   16f50:	ldr	r1, [r2, #8]
   16f54:	ldr	lr, [sp, #108]	; 0x6c
   16f58:	ldr	ip, [sp, #104]	; 0x68
   16f5c:	cmp	r1, #0
   16f60:	beq	17f74 <__assert_fail@plt+0x6800>
   16f64:	str	r0, [sp, #96]	; 0x60
   16f68:	ldr	r0, [fp, #16]
   16f6c:	subs	r0, r0, r8
   16f70:	str	r0, [sp, #92]	; 0x5c
   16f74:	mov	r0, #1
   16f78:	str	r0, [sp, #68]	; 0x44
   16f7c:	bne	16f90 <__assert_fail@plt+0x581c>
   16f80:	ldr	r0, [r5, #76]	; 0x4c
   16f84:	cmp	r0, #0
   16f88:	movwne	r0, #1
   16f8c:	str	r0, [sp, #68]	; 0x44
   16f90:	ldr	r0, [r9, #12]
   16f94:	ldr	r2, [r5, #92]	; 0x5c
   16f98:	ldr	r1, [r5, #8]
   16f9c:	str	r6, [sp, #176]	; 0xb0
   16fa0:	str	ip, [sp, #112]	; 0x70
   16fa4:	vdup.32	q8, lr
   16fa8:	str	r2, [sp, #192]	; 0xc0
   16fac:	ubfx	r3, r0, #22, #1
   16fb0:	and	r0, r0, #4194304	; 0x400000
   16fb4:	str	r6, [sp, #100]	; 0x64
   16fb8:	add	r1, r1, #1
   16fbc:	orrs	r0, r6, r0
   16fc0:	strb	r3, [sp, #184]	; 0xb8
   16fc4:	movwne	r0, #1
   16fc8:	cmp	r2, r1
   16fcc:	strb	r0, [sp, #187]	; 0xbb
   16fd0:	add	r0, sp, #112	; 0x70
   16fd4:	movgt	r1, r2
   16fd8:	add	r2, lr, #1
   16fdc:	ldrb	r6, [r5, #88]	; 0x58
   16fe0:	add	r3, r0, #44	; 0x2c
   16fe4:	cmp	r2, r1
   16fe8:	vst1.32	{d16-d17}, [r3]
   16fec:	movlt	r1, r2
   16ff0:	ubfx	r3, r6, #3, #1
   16ff4:	strb	r3, [sp, #186]	; 0xba
   16ff8:	ubfx	r3, r6, #2, #1
   16ffc:	strb	r3, [sp, #185]	; 0xb9
   17000:	bl	18e58 <__assert_fail@plt+0x76e4>
   17004:	cmp	r0, #0
   17008:	bne	187c4 <__assert_fail@plt+0x7050>
   1700c:	add	r1, r5, #96	; 0x60
   17010:	ldr	r2, [fp, #24]
   17014:	ldr	r0, [fp, #12]
   17018:	str	r1, [sp, #180]	; 0xb4
   1701c:	ldrb	r1, [r5, #88]	; 0x58
   17020:	ubfx	r1, r1, #4, #1
   17024:	ldr	ip, [sp, #108]	; 0x6c
   17028:	strb	r1, [sp, #190]	; 0xbe
   1702c:	mov	r1, #0
   17030:	ldrb	r3, [sp, #187]	; 0xbb
   17034:	cmp	r3, #0
   17038:	ldr	r3, [sp, #104]	; 0x68
   1703c:	bne	17054 <__assert_fail@plt+0x58e0>
   17040:	str	r3, [sp, #116]	; 0x74
   17044:	ldr	r1, [r5, #92]	; 0x5c
   17048:	cmp	r1, #1
   1704c:	mov	r1, ip
   17050:	movwgt	r1, #0
   17054:	str	r1, [sp, #144]	; 0x90
   17058:	str	r1, [sp, #140]	; 0x8c
   1705c:	str	r0, [sp, #168]	; 0xa8
   17060:	str	r0, [sp, #164]	; 0xa4
   17064:	mov	r1, r5
   17068:	str	r9, [sp, #44]	; 0x2c
   1706c:	ldrb	r0, [r9, #28]
   17070:	str	r1, [sp, #84]	; 0x54
   17074:	lsr	r0, r0, #7
   17078:	strb	r0, [sp, #189]	; 0xbd
   1707c:	mov	r0, r5
   17080:	ldr	r5, [sp, #100]	; 0x64
   17084:	ldr	r6, [r0, #76]!	; 0x4c
   17088:	str	r0, [sp, #64]	; 0x40
   1708c:	mvn	r0, #0
   17090:	lsl	r9, r6, #1
   17094:	cmp	r6, #1
   17098:	str	r0, [sp, #204]	; 0xcc
   1709c:	str	r2, [sp, #200]	; 0xc8
   170a0:	blt	17100 <__assert_fail@plt+0x598c>
   170a4:	movw	r0, #43690	; 0xaaaa
   170a8:	mov	r4, #12
   170ac:	movt	r0, #2730	; 0xaaa
   170b0:	cmp	r9, r0
   170b4:	bhi	18714 <__assert_fail@plt+0x6fa0>
   170b8:	add	r0, r6, r6, lsl #1
   170bc:	mov	r5, r8
   170c0:	lsl	r0, r0, #4
   170c4:	bl	23be4 <__assert_fail@plt+0x12470>
   170c8:	mov	r8, r0
   170cc:	str	r0, [sp, #228]	; 0xe4
   170d0:	lsl	r0, r6, #3
   170d4:	bl	23be4 <__assert_fail@plt+0x12470>
   170d8:	cmp	r0, #0
   170dc:	str	r0, [sp, #244]	; 0xf4
   170e0:	beq	18714 <__assert_fail@plt+0x6fa0>
   170e4:	cmp	r8, #0
   170e8:	mov	r8, r5
   170ec:	ldr	ip, [sp, #108]	; 0x6c
   170f0:	ldr	r3, [sp, #104]	; 0x68
   170f4:	ldr	r5, [sp, #100]	; 0x64
   170f8:	ldr	r2, [fp, #24]
   170fc:	beq	18714 <__assert_fail@plt+0x6fa0>
   17100:	mov	r0, #1
   17104:	str	r0, [sp, #232]	; 0xe8
   17108:	ldr	r0, [sp, #92]	; 0x5c
   1710c:	str	r9, [sp, #224]	; 0xe0
   17110:	str	r9, [sp, #240]	; 0xf0
   17114:	cmp	r0, #1
   17118:	bhi	1712c <__assert_fail@plt+0x59b8>
   1711c:	ldr	r0, [sp, #84]	; 0x54
   17120:	ldrb	r0, [r0, #88]	; 0x58
   17124:	tst	r0, #2
   17128:	beq	17164 <__assert_fail@plt+0x59f0>
   1712c:	ldr	r0, [sp, #148]	; 0x94
   17130:	mov	r4, #12
   17134:	cmn	r0, #-1073741822	; 0xc0000002
   17138:	bhi	18714 <__assert_fail@plt+0x6fa0>
   1713c:	mov	r1, #4
   17140:	add	r0, r1, r0, lsl #2
   17144:	bl	23be4 <__assert_fail@plt+0x12470>
   17148:	ldr	r2, [fp, #24]
   1714c:	ldr	r5, [sp, #100]	; 0x64
   17150:	ldr	r3, [sp, #104]	; 0x68
   17154:	ldr	ip, [sp, #108]	; 0x6c
   17158:	cmp	r0, #0
   1715c:	str	r0, [sp, #212]	; 0xd4
   17160:	beq	18714 <__assert_fail@plt+0x6fa0>
   17164:	ldr	r6, [sp, #96]	; 0x60
   17168:	tst	r2, #1
   1716c:	mov	r1, #4
   17170:	str	r7, [fp, #-212]	; 0xffffff2c
   17174:	str	r8, [sp, #36]	; 0x24
   17178:	mov	r9, r7
   1717c:	mov	r0, #4
   17180:	movweq	r1, #6
   17184:	str	r1, [sp, #172]	; 0xac
   17188:	mov	r1, #1
   1718c:	cmp	r6, r7
   17190:	mov	r8, r6
   17194:	mvnlt	r1, #0
   17198:	movlt	r8, r7
   1719c:	movlt	r9, r6
   171a0:	cmp	sl, #0
   171a4:	str	r1, [sp, #80]	; 0x50
   171a8:	ldr	r1, [sp, #84]	; 0x54
   171ac:	ldr	r1, [r1, #92]	; 0x5c
   171b0:	str	r1, [sp, #76]	; 0x4c
   171b4:	beq	171f8 <__assert_fail@plt+0x5a84>
   171b8:	cmp	r1, #1
   171bc:	beq	171dc <__assert_fail@plt+0x5a68>
   171c0:	ldr	r0, [sp, #44]	; 0x2c
   171c4:	ldr	r0, [r0, #12]
   171c8:	and	r0, r0, #4194304	; 0x400000
   171cc:	orr	r0, r5, r0
   171d0:	clz	r0, r0
   171d4:	lsr	r0, r0, #5
   171d8:	lsl	r0, r0, #2
   171dc:	cmp	r5, #0
   171e0:	mov	r1, r5
   171e4:	movwne	r1, #1
   171e8:	cmp	r6, r7
   171ec:	orrge	r1, r1, #2
   171f0:	orr	r0, r1, r0
   171f4:	b	171fc <__assert_fail@plt+0x5a88>
   171f8:	mov	r0, #8
   171fc:	add	r1, sp, #112	; 0x70
   17200:	cmp	r6, r7
   17204:	sub	lr, r0, #4
   17208:	str	r9, [sp, #56]	; 0x38
   1720c:	add	r1, r1, #32
   17210:	str	lr, [sp, #60]	; 0x3c
   17214:	str	r1, [sp, #32]
   17218:	sub	r1, fp, #212	; 0xd4
   1721c:	movwlt	r1, #0
   17220:	cmp	r1, #0
   17224:	str	r1, [sp, #48]	; 0x30
   17228:	movwne	r1, #1
   1722c:	str	r1, [sp, #52]	; 0x34
   17230:	sub	r1, fp, #208	; 0xd0
   17234:	add	r1, r1, #16
   17238:	str	r1, [sp, #40]	; 0x28
   1723c:	cmp	lr, #4
   17240:	bhi	1731c <__assert_fail@plt+0x5ba8>
   17244:	add	r0, pc, #0
   17248:	ldr	pc, [r0, lr, lsl #2]
   1724c:	andeq	r7, r1, r0, ror #4
   17250:	andeq	r7, r1, r0, ror #4
   17254:	ldrdeq	r7, [r1], -r4
   17258:	andeq	r7, r1, ip, lsr #5
   1725c:	andeq	r7, r1, r4, lsr #7
   17260:	mov	r4, #1
   17264:	cmp	r7, r9
   17268:	blt	18714 <__assert_fail@plt+0x6fa0>
   1726c:	mov	r0, #0
   17270:	cmp	r7, ip
   17274:	ldrblt	r0, [r3, r7]
   17278:	cmp	r5, #0
   1727c:	ldrbne	r0, [r5, r0]
   17280:	ldrb	r0, [sl, r0]
   17284:	cmp	r0, #0
   17288:	bne	173a4 <__assert_fail@plt+0x5c30>
   1728c:	sub	r0, r7, #1
   17290:	cmp	r7, r9
   17294:	mov	r7, r0
   17298:	str	r0, [fp, #-212]	; 0xffffff2c
   1729c:	bgt	1726c <__assert_fail@plt+0x5af8>
   172a0:	b	18714 <__assert_fail@plt+0x6fa0>
   172a4:	add	r7, r7, #1
   172a8:	str	r7, [fp, #-212]	; 0xffffff2c
   172ac:	cmp	r7, r8
   172b0:	bge	172ec <__assert_fail@plt+0x5b78>
   172b4:	ldrb	r0, [r3, r7]
   172b8:	ldrb	r0, [r5, r0]
   172bc:	ldrb	r0, [sl, r0]
   172c0:	cmp	r0, #0
   172c4:	beq	172a4 <__assert_fail@plt+0x5b30>
   172c8:	b	172ec <__assert_fail@plt+0x5b78>
   172cc:	add	r7, r7, #1
   172d0:	str	r7, [fp, #-212]	; 0xffffff2c
   172d4:	cmp	r7, r8
   172d8:	bge	172ec <__assert_fail@plt+0x5b78>
   172dc:	ldrb	r0, [r3, r7]
   172e0:	ldrb	r0, [sl, r0]
   172e4:	cmp	r0, #0
   172e8:	beq	172cc <__assert_fail@plt+0x5b58>
   172ec:	cmp	r7, r8
   172f0:	bne	173a4 <__assert_fail@plt+0x5c30>
   172f4:	mov	r0, #0
   172f8:	cmp	r8, ip
   172fc:	mov	r7, r8
   17300:	ldrblt	r0, [r3, r8]
   17304:	cmp	r5, #0
   17308:	ldrbne	r0, [r5, r0]
   1730c:	ldrb	r0, [sl, r0]
   17310:	cmp	r0, #0
   17314:	bne	173a4 <__assert_fail@plt+0x5c30>
   17318:	b	187d4 <__assert_fail@plt+0x7060>
   1731c:	ldr	r0, [sp, #136]	; 0x88
   17320:	ldr	r5, [sp, #80]	; 0x50
   17324:	ldr	r3, [sp, #144]	; 0x90
   17328:	sub	r1, r7, r0
   1732c:	cmp	r1, r3
   17330:	bcs	17374 <__assert_fail@plt+0x5c00>
   17334:	ldr	r3, [sp, #140]	; 0x8c
   17338:	mov	r6, #0
   1733c:	cmp	r1, r3
   17340:	ldrcc	r3, [sp, #116]	; 0x74
   17344:	ldrbcc	r6, [r3, r1]
   17348:	ldrb	r1, [sl, r6]
   1734c:	cmp	r1, #0
   17350:	bne	173a4 <__assert_fail@plt+0x5c30>
   17354:	add	r7, r7, r5
   17358:	mov	r4, #1
   1735c:	cmp	r7, r9
   17360:	str	r7, [fp, #-212]	; 0xffffff2c
   17364:	blt	18714 <__assert_fail@plt+0x6fa0>
   17368:	cmp	r7, r8
   1736c:	ble	17324 <__assert_fail@plt+0x5bb0>
   17370:	b	18714 <__assert_fail@plt+0x6fa0>
   17374:	add	r0, sp, #112	; 0x70
   17378:	mov	r1, r7
   1737c:	mov	r6, lr
   17380:	bl	1dd14 <__assert_fail@plt+0xc5a0>
   17384:	cmp	r0, #0
   17388:	bne	18768 <__assert_fail@plt+0x6ff4>
   1738c:	ldr	r0, [sp, #136]	; 0x88
   17390:	ldr	r7, [fp, #-212]	; 0xffffff2c
   17394:	ldr	r2, [fp, #24]
   17398:	mov	lr, r6
   1739c:	sub	r1, r7, r0
   173a0:	b	17334 <__assert_fail@plt+0x5bc0>
   173a4:	add	r0, sp, #112	; 0x70
   173a8:	mov	r1, r7
   173ac:	bl	1dd14 <__assert_fail@plt+0xc5a0>
   173b0:	cmp	r0, #0
   173b4:	bne	18768 <__assert_fail@plt+0x6ff4>
   173b8:	ldr	r0, [sp, #76]	; 0x4c
   173bc:	cmp	r0, #1
   173c0:	ldrne	r0, [sp, #140]	; 0x8c
   173c4:	cmpne	r0, #0
   173c8:	bne	17400 <__assert_fail@plt+0x5c8c>
   173cc:	mov	r0, #0
   173d0:	str	r0, [sp, #220]	; 0xdc
   173d4:	str	r0, [sp, #232]	; 0xe8
   173d8:	str	r0, [sp, #216]	; 0xd8
   173dc:	str	r0, [fp, #-64]	; 0xffffffc0
   173e0:	ldr	r4, [sp, #196]	; 0xc4
   173e4:	ldr	r3, [sp, #152]	; 0x98
   173e8:	ldr	r7, [r4, #36]	; 0x24
   173ec:	ldrsb	r0, [r7, #52]	; 0x34
   173f0:	cmn	r0, #1
   173f4:	ble	17414 <__assert_fail@plt+0x5ca0>
   173f8:	sub	r5, fp, #208	; 0xd0
   173fc:	b	17480 <__assert_fail@plt+0x5d0c>
   17400:	ldr	r0, [sp, #120]	; 0x78
   17404:	ldr	r0, [r0]
   17408:	cmn	r0, #1
   1740c:	bne	173cc <__assert_fail@plt+0x5c58>
   17410:	b	17c88 <__assert_fail@plt+0x6514>
   17414:	ldr	r2, [sp, #200]	; 0xc8
   17418:	sub	r1, r3, #1
   1741c:	add	r0, sp, #112	; 0x70
   17420:	mov	r6, r3
   17424:	bl	1e540 <__assert_fail@plt+0xcdcc>
   17428:	tst	r0, #1
   1742c:	sub	r5, fp, #208	; 0xd0
   17430:	bne	17478 <__assert_fail@plt+0x5d04>
   17434:	mov	r3, r0
   17438:	cmp	r0, #0
   1743c:	beq	1747c <__assert_fail@plt+0x5d08>
   17440:	ands	r1, r3, #2
   17444:	and	r0, r3, #4
   17448:	cmpne	r0, #0
   1744c:	bne	17cc8 <__assert_fail@plt+0x6554>
   17450:	cmp	r1, #0
   17454:	bne	17cd0 <__assert_fail@plt+0x655c>
   17458:	cmp	r0, #0
   1745c:	beq	1747c <__assert_fail@plt+0x5d08>
   17460:	ldr	r2, [r7, #40]	; 0x28
   17464:	sub	r0, fp, #64	; 0x40
   17468:	mov	r1, r4
   1746c:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   17470:	mov	r7, r0
   17474:	b	1747c <__assert_fail@plt+0x5d08>
   17478:	ldr	r7, [r4, #40]	; 0x28
   1747c:	mov	r3, r6
   17480:	ldr	r1, [sp, #52]	; 0x34
   17484:	cmp	r7, #0
   17488:	beq	18760 <__assert_fail@plt+0x6fec>
   1748c:	ldr	r0, [sp, #212]	; 0xd4
   17490:	mov	ip, r1
   17494:	cmp	r0, #0
   17498:	beq	174b0 <__assert_fail@plt+0x5d3c>
   1749c:	str	r7, [r0, r3, lsl #2]
   174a0:	mov	ip, r1
   174a4:	ldr	r0, [r4, #76]	; 0x4c
   174a8:	cmp	r0, #0
   174ac:	bne	17d20 <__assert_fail@plt+0x65ac>
   174b0:	ldrb	r0, [r7, #52]	; 0x34
   174b4:	sxtb	r5, r0
   174b8:	tst	r0, #16
   174bc:	bne	17cd8 <__assert_fail@plt+0x6564>
   174c0:	mov	r0, #0
   174c4:	mvn	r2, #0
   174c8:	str	r0, [sp, #72]	; 0x48
   174cc:	ldr	r6, [sp, #152]	; 0x98
   174d0:	ldr	r0, [sp, #168]	; 0xa8
   174d4:	str	r2, [sp, #96]	; 0x60
   174d8:	cmp	r0, r6
   174dc:	ble	174e8 <__assert_fail@plt+0x5d74>
   174e0:	ldr	r1, [sp, #48]	; 0x30
   174e4:	b	177cc <__assert_fail@plt+0x6058>
   174e8:	ldr	r1, [sp, #48]	; 0x30
   174ec:	b	17984 <__assert_fail@plt+0x6210>
   174f0:	ldr	r0, [sp, #212]	; 0xd4
   174f4:	ldr	r2, [sp, #152]	; 0x98
   174f8:	ldr	r1, [sp, #216]	; 0xd8
   174fc:	add	r2, r2, #1
   17500:	sub	r3, r2, #1
   17504:	cmp	r3, r1
   17508:	bge	1797c <__assert_fail@plt+0x6208>
   1750c:	str	r2, [sp, #152]	; 0x98
   17510:	ldr	r3, [r0, r2, lsl #2]
   17514:	add	r2, r2, #1
   17518:	cmp	r3, #0
   1751c:	beq	17500 <__assert_fail@plt+0x5d8c>
   17520:	sub	r0, fp, #64	; 0x40
   17524:	add	r1, sp, #112	; 0x70
   17528:	mov	r2, #0
   1752c:	bl	1ef28 <__assert_fail@plt+0xd7b4>
   17530:	cmp	r0, #0
   17534:	mov	r7, r0
   17538:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   1753c:	cmpeq	r0, #0
   17540:	beq	174f0 <__assert_fail@plt+0x5d7c>
   17544:	cmp	r7, #0
   17548:	mov	r3, r5
   1754c:	mov	ip, r6
   17550:	bne	178ac <__assert_fail@plt+0x6138>
   17554:	b	17980 <__assert_fail@plt+0x620c>
   17558:	ldr	r0, [r4, #8]
   1755c:	cmp	r0, #1
   17560:	blt	17744 <__assert_fail@plt+0x5fd0>
   17564:	ldr	r7, [sp, #196]	; 0xc4
   17568:	mov	r5, #0
   1756c:	str	r3, [sp, #12]
   17570:	str	ip, [sp, #24]
   17574:	str	r4, [sp, #8]
   17578:	str	r7, [sp, #16]
   1757c:	ldr	r0, [r4, #12]
   17580:	ldr	r1, [r0, r5, lsl #2]
   17584:	ldr	r0, [r7]
   17588:	add	r0, r0, r1, lsl #3
   1758c:	ldr	r6, [r0, #4]
   17590:	tst	r6, #1048576	; 0x100000
   17594:	beq	17734 <__assert_fail@plt+0x5fc0>
   17598:	ldr	lr, [sp, #152]	; 0x98
   1759c:	movw	r0, #65280	; 0xff00
   175a0:	str	r1, [sp, #28]
   175a4:	movt	r0, #3
   175a8:	tst	r6, r0
   175ac:	beq	1761c <__assert_fail@plt+0x5ea8>
   175b0:	ldr	r2, [sp, #200]	; 0xc8
   175b4:	add	r0, sp, #112	; 0x70
   175b8:	mov	r1, lr
   175bc:	mov	r7, r3
   175c0:	str	lr, [sp, #20]
   175c4:	bl	1e540 <__assert_fail@plt+0xcdcc>
   175c8:	mov	r3, r7
   175cc:	ldr	lr, [sp, #20]
   175d0:	ldr	r1, [sp, #28]
   175d4:	ldr	ip, [sp, #24]
   175d8:	ldr	r7, [sp, #16]
   175dc:	and	r2, r0, #1
   175e0:	tst	r6, #1024	; 0x400
   175e4:	beq	175f0 <__assert_fail@plt+0x5e7c>
   175e8:	cmp	r2, #0
   175ec:	beq	17734 <__assert_fail@plt+0x5fc0>
   175f0:	tst	r6, #2048	; 0x800
   175f4:	cmpne	r2, #0
   175f8:	bne	17734 <__assert_fail@plt+0x5fc0>
   175fc:	tst	r6, #8192	; 0x2000
   17600:	beq	1760c <__assert_fail@plt+0x5e98>
   17604:	ands	r2, r0, #2
   17608:	beq	17734 <__assert_fail@plt+0x5fc0>
   1760c:	tst	r6, #32768	; 0x8000
   17610:	beq	1761c <__assert_fail@plt+0x5ea8>
   17614:	ands	r0, r0, #8
   17618:	beq	17734 <__assert_fail@plt+0x5fc0>
   1761c:	mov	r0, r7
   17620:	add	r2, sp, #112	; 0x70
   17624:	mov	r3, lr
   17628:	bl	201c8 <__assert_fail@plt+0xea54>
   1762c:	ldr	r4, [sp, #8]
   17630:	ldr	ip, [sp, #24]
   17634:	ldr	r3, [sp, #12]
   17638:	cmp	r0, #0
   1763c:	beq	17734 <__assert_fail@plt+0x5fc0>
   17640:	ldr	r1, [sp, #152]	; 0x98
   17644:	ldr	r2, [sp, #232]	; 0xe8
   17648:	cmp	r2, r0
   1764c:	add	r6, r1, r0
   17650:	movlt	r2, r0
   17654:	add	r0, sp, #112	; 0x70
   17658:	mov	r1, r6
   1765c:	str	r2, [sp, #232]	; 0xe8
   17660:	bl	1f308 <__assert_fail@plt+0xdb94>
   17664:	cmp	r0, #0
   17668:	str	r0, [fp, #-48]	; 0xffffffd0
   1766c:	bne	177ac <__assert_fail@plt+0x6038>
   17670:	ldr	r0, [sp, #212]	; 0xd4
   17674:	ldr	r2, [sp, #28]
   17678:	ldr	r1, [r7, #24]
   1767c:	ldr	r4, [r0, r6, lsl #2]
   17680:	ldr	r0, [r7, #12]
   17684:	ldr	r0, [r0, r2, lsl #2]
   17688:	cmp	r4, #0
   1768c:	add	r0, r0, r0, lsl #1
   17690:	add	r2, r1, r0, lsl #2
   17694:	beq	176b8 <__assert_fail@plt+0x5f44>
   17698:	ldr	r1, [r4, #40]	; 0x28
   1769c:	sub	r7, fp, #208	; 0xd0
   176a0:	mov	r0, r7
   176a4:	bl	1f07c <__assert_fail@plt+0xd908>
   176a8:	cmp	r0, #0
   176ac:	str	r0, [fp, #-48]	; 0xffffffd0
   176b0:	beq	176cc <__assert_fail@plt+0x5f58>
   176b4:	b	177ac <__assert_fail@plt+0x6038>
   176b8:	vldr	d16, [r2]
   176bc:	ldr	r0, [r2, #8]
   176c0:	sub	r7, fp, #208	; 0xd0
   176c4:	str	r0, [fp, #-200]	; 0xffffff38
   176c8:	vstr	d16, [fp, #-208]	; 0xffffff30
   176cc:	ldr	r2, [sp, #200]	; 0xc8
   176d0:	sub	r1, r6, #1
   176d4:	add	r0, sp, #112	; 0x70
   176d8:	bl	1e540 <__assert_fail@plt+0xcdcc>
   176dc:	ldr	r1, [sp, #16]
   176e0:	mov	r3, r0
   176e4:	sub	r0, fp, #48	; 0x30
   176e8:	mov	r2, r7
   176ec:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   176f0:	ldr	r1, [sp, #212]	; 0xd4
   176f4:	cmp	r4, #0
   176f8:	str	r0, [r1, r6, lsl #2]
   176fc:	beq	17708 <__assert_fail@plt+0x5f94>
   17700:	ldr	r0, [fp, #-200]	; 0xffffff38
   17704:	bl	13c04 <__assert_fail@plt+0x2490>
   17708:	ldr	r0, [sp, #212]	; 0xd4
   1770c:	ldr	r3, [sp, #12]
   17710:	ldr	ip, [sp, #24]
   17714:	ldr	r4, [sp, #8]
   17718:	ldr	r7, [sp, #16]
   1771c:	ldr	r0, [r0, r6, lsl #2]
   17720:	cmp	r0, #0
   17724:	bne	17734 <__assert_fail@plt+0x5fc0>
   17728:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1772c:	cmp	r0, #0
   17730:	bne	177c0 <__assert_fail@plt+0x604c>
   17734:	ldr	r0, [r4, #8]
   17738:	add	r5, r5, #1
   1773c:	cmp	r5, r0
   17740:	blt	1757c <__assert_fail@plt+0x5e08>
   17744:	mov	r0, #0
   17748:	str	r0, [fp, #-64]	; 0xffffffc0
   1774c:	b	1780c <__assert_fail@plt+0x6098>
   17750:	add	r1, r6, #2
   17754:	add	r0, sp, #112	; 0x70
   17758:	mov	r5, r3
   1775c:	mov	r6, ip
   17760:	bl	1ee50 <__assert_fail@plt+0xd6dc>
   17764:	cmp	r0, #0
   17768:	str	r0, [fp, #-64]	; 0xffffffc0
   1776c:	bne	18760 <__assert_fail@plt+0x6fec>
   17770:	mov	r3, r5
   17774:	ldrb	r5, [r4, #52]	; 0x34
   17778:	mov	ip, r6
   1777c:	b	17804 <__assert_fail@plt+0x6090>
   17780:	ldr	r0, [sp, #152]	; 0x98
   17784:	ldr	r2, [sp, #200]	; 0xc8
   17788:	sub	r1, r0, #1
   1778c:	add	r0, sp, #112	; 0x70
   17790:	bl	1e540 <__assert_fail@plt+0xcdcc>
   17794:	bfi	r5, r0, #8, #1
   17798:	ldr	r3, [sp, #12]
   1779c:	ldr	ip, [sp, #24]
   177a0:	ldr	r4, [sp, #8]
   177a4:	ldr	r7, [r6, r5, lsl #2]
   177a8:	b	17874 <__assert_fail@plt+0x6100>
   177ac:	ldr	r2, [sp, #72]	; 0x48
   177b0:	ldr	r3, [sp, #12]
   177b4:	ldr	ip, [sp, #24]
   177b8:	ldr	r4, [sp, #8]
   177bc:	str	r2, [sp, #72]	; 0x48
   177c0:	mov	r7, #0
   177c4:	str	r0, [fp, #-64]	; 0xffffffc0
   177c8:	b	17874 <__assert_fail@plt+0x6100>
   177cc:	str	r1, [sp, #88]	; 0x58
   177d0:	ldr	r1, [sp, #148]	; 0x94
   177d4:	ldr	r0, [sp, #160]	; 0xa0
   177d8:	add	r9, r6, #1
   177dc:	mov	r4, r7
   177e0:	cmp	r9, r1
   177e4:	blt	177f0 <__assert_fail@plt+0x607c>
   177e8:	cmp	r1, r0
   177ec:	blt	17750 <__assert_fail@plt+0x5fdc>
   177f0:	ldr	r1, [sp, #140]	; 0x8c
   177f4:	cmp	r9, r1
   177f8:	blt	17804 <__assert_fail@plt+0x6090>
   177fc:	cmp	r1, r0
   17800:	blt	17750 <__assert_fail@plt+0x5fdc>
   17804:	tst	r5, #32
   17808:	bne	17558 <__assert_fail@plt+0x5de4>
   1780c:	ldr	r1, [sp, #152]	; 0x98
   17810:	ldr	r0, [sp, #116]	; 0x74
   17814:	add	r2, r1, #1
   17818:	str	r2, [sp, #152]	; 0x98
   1781c:	ldrb	r5, [r0, r1]
   17820:	ldr	r0, [r4, #44]	; 0x2c
   17824:	cmp	r0, #0
   17828:	bne	17870 <__assert_fail@plt+0x60fc>
   1782c:	ldr	r6, [r4, #48]	; 0x30
   17830:	str	ip, [sp, #24]
   17834:	str	r3, [sp, #12]
   17838:	str	r4, [sp, #8]
   1783c:	cmp	r6, #0
   17840:	bne	17780 <__assert_fail@plt+0x600c>
   17844:	ldr	r6, [sp, #8]
   17848:	ldr	r0, [sp, #196]	; 0xc4
   1784c:	mov	r1, r6
   17850:	bl	205ec <__assert_fail@plt+0xee78>
   17854:	ldr	r3, [sp, #12]
   17858:	ldr	ip, [sp, #24]
   1785c:	mov	r4, r6
   17860:	cmp	r0, #0
   17864:	bne	17820 <__assert_fail@plt+0x60ac>
   17868:	mov	r0, #12
   1786c:	b	177c0 <__assert_fail@plt+0x604c>
   17870:	ldr	r7, [r0, r5, lsl #2]
   17874:	ldr	r0, [sp, #212]	; 0xd4
   17878:	cmp	r0, #0
   1787c:	beq	178a4 <__assert_fail@plt+0x6130>
   17880:	sub	r0, fp, #64	; 0x40
   17884:	add	r1, sp, #112	; 0x70
   17888:	mov	r2, r7
   1788c:	mov	r5, r3
   17890:	mov	r6, ip
   17894:	bl	1ef28 <__assert_fail@plt+0xd7b4>
   17898:	mov	ip, r6
   1789c:	mov	r3, r5
   178a0:	mov	r7, r0
   178a4:	cmp	r7, #0
   178a8:	beq	178dc <__assert_fail@plt+0x6168>
   178ac:	sub	r0, r4, r7
   178b0:	clz	r0, r0
   178b4:	lsr	r0, r0, #5
   178b8:	ands	ip, ip, r0
   178bc:	ldrb	r0, [r7, #52]	; 0x34
   178c0:	movne	r3, r9
   178c4:	sxtb	r5, r0
   178c8:	tst	r0, #16
   178cc:	bne	1791c <__assert_fail@plt+0x61a8>
   178d0:	ldr	r6, [sp, #152]	; 0x98
   178d4:	ldr	r1, [sp, #88]	; 0x58
   178d8:	b	1796c <__assert_fail@plt+0x61f8>
   178dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178e0:	cmp	r0, #0
   178e4:	bne	18760 <__assert_fail@plt+0x6fec>
   178e8:	ldr	r0, [sp, #72]	; 0x48
   178ec:	ldr	r1, [sp, #68]	; 0x44
   178f0:	clz	r0, r0
   178f4:	lsr	r0, r0, #5
   178f8:	orr	r0, r1, r0
   178fc:	cmp	r0, #1
   17900:	bne	17980 <__assert_fail@plt+0x620c>
   17904:	ldr	r0, [sp, #212]	; 0xd4
   17908:	cmp	r0, #0
   1790c:	beq	17980 <__assert_fail@plt+0x620c>
   17910:	mov	r6, ip
   17914:	mov	r5, r3
   17918:	b	174f4 <__assert_fail@plt+0x5d80>
   1791c:	ldr	r6, [sp, #152]	; 0x98
   17920:	cmn	r5, #1
   17924:	bgt	17950 <__assert_fail@plt+0x61dc>
   17928:	add	r0, sp, #112	; 0x70
   1792c:	mov	r1, r7
   17930:	mov	r2, r6
   17934:	mov	r4, r3
   17938:	mov	r9, ip
   1793c:	bl	1e3d8 <__assert_fail@plt+0xcc64>
   17940:	mov	ip, r9
   17944:	mov	r3, r4
   17948:	cmp	r0, #0
   1794c:	beq	178d4 <__assert_fail@plt+0x6160>
   17950:	ldr	r0, [sp, #68]	; 0x44
   17954:	cmp	r0, #0
   17958:	beq	17dac <__assert_fail@plt+0x6638>
   1795c:	mov	r1, #0
   17960:	mov	r0, #1
   17964:	str	r6, [sp, #96]	; 0x60
   17968:	str	r0, [sp, #72]	; 0x48
   1796c:	ldr	r0, [sp, #168]	; 0xa8
   17970:	cmp	r0, r6
   17974:	bgt	177cc <__assert_fail@plt+0x6058>
   17978:	b	17984 <__assert_fail@plt+0x6210>
   1797c:	mov	r3, r5
   17980:	ldr	r1, [sp, #88]	; 0x58
   17984:	cmp	r1, #0
   17988:	ldr	r6, [sp, #96]	; 0x60
   1798c:	sub	r5, fp, #208	; 0xd0
   17990:	ldrne	r0, [r1]
   17994:	addne	r0, r0, r3
   17998:	strne	r0, [r1]
   1799c:	cmn	r6, #1
   179a0:	beq	17c80 <__assert_fail@plt+0x650c>
   179a4:	mov	r4, #12
   179a8:	cmn	r6, #2
   179ac:	beq	18714 <__assert_fail@plt+0x6fa0>
   179b0:	ldr	r0, [sp, #92]	; 0x5c
   179b4:	str	r6, [sp, #204]	; 0xcc
   179b8:	cmp	r0, #2
   179bc:	bcc	17a10 <__assert_fail@plt+0x629c>
   179c0:	ldr	r0, [sp, #44]	; 0x2c
   179c4:	ldrb	r0, [r0, #28]
   179c8:	ands	r0, r0, #16
   179cc:	bne	17a10 <__assert_fail@plt+0x629c>
   179d0:	ldr	r0, [sp, #212]	; 0xd4
   179d4:	mov	r2, r6
   179d8:	ldr	r1, [r0, r6, lsl #2]
   179dc:	add	r0, sp, #112	; 0x70
   179e0:	bl	1e3d8 <__assert_fail@plt+0xcc64>
   179e4:	str	r0, [sp, #88]	; 0x58
   179e8:	str	r0, [sp, #208]	; 0xd0
   179ec:	ldr	r0, [sp, #84]	; 0x54
   179f0:	ldrb	r0, [r0, #88]	; 0x58
   179f4:	tst	r0, #1
   179f8:	bne	17a3c <__assert_fail@plt+0x62c8>
   179fc:	ldr	r0, [sp, #64]	; 0x40
   17a00:	ldr	r0, [r0]
   17a04:	cmp	r0, #0
   17a08:	bne	17a3c <__assert_fail@plt+0x62c8>
   17a0c:	b	17e04 <__assert_fail@plt+0x6690>
   17a10:	ldr	r0, [sp, #64]	; 0x40
   17a14:	ldr	r0, [r0]
   17a18:	cmp	r0, #0
   17a1c:	beq	17e04 <__assert_fail@plt+0x6690>
   17a20:	ldr	r0, [sp, #212]	; 0xd4
   17a24:	mov	r2, r6
   17a28:	ldr	r1, [r0, r6, lsl #2]
   17a2c:	add	r0, sp, #112	; 0x70
   17a30:	bl	1e3d8 <__assert_fail@plt+0xcc64>
   17a34:	str	r0, [sp, #88]	; 0x58
   17a38:	str	r0, [sp, #208]	; 0xd0
   17a3c:	cmn	r6, #-1073741823	; 0xc0000001
   17a40:	bcs	18714 <__assert_fail@plt+0x6fa0>
   17a44:	ldr	r0, [sp, #196]	; 0xc4
   17a48:	mov	r9, r6
   17a4c:	str	r0, [sp, #72]	; 0x48
   17a50:	mov	r0, #4
   17a54:	add	r6, r0, r6, lsl #2
   17a58:	mov	r0, r6
   17a5c:	bl	23be4 <__assert_fail@plt+0x12470>
   17a60:	mov	r7, r0
   17a64:	cmp	r0, #0
   17a68:	beq	187b0 <__assert_fail@plt+0x703c>
   17a6c:	ldr	r0, [sp, #72]	; 0x48
   17a70:	ldr	r0, [r0, #76]	; 0x4c
   17a74:	cmp	r0, #0
   17a78:	beq	17b30 <__assert_fail@plt+0x63bc>
   17a7c:	mov	r0, r6
   17a80:	bl	23be4 <__assert_fail@plt+0x12470>
   17a84:	cmp	r0, #0
   17a88:	beq	187b0 <__assert_fail@plt+0x703c>
   17a8c:	mov	r6, r0
   17a90:	add	r0, r9, #1
   17a94:	mov	r1, #0
   17a98:	mov	r4, r9
   17a9c:	str	r0, [sp, #28]
   17aa0:	lsl	r2, r0, #2
   17aa4:	mov	r0, r6
   17aa8:	bl	11660 <memset@plt>
   17aac:	ldr	r0, [sp, #88]	; 0x58
   17ab0:	str	r7, [fp, #-208]	; 0xffffff30
   17ab4:	str	r6, [fp, #-204]	; 0xffffff34
   17ab8:	mov	r1, #0
   17abc:	str	r0, [fp, #-200]	; 0xffffff38
   17ac0:	ldr	r0, [sp, #40]	; 0x28
   17ac4:	str	r9, [fp, #-196]	; 0xffffff3c
   17ac8:	str	r1, [r0]
   17acc:	str	r1, [r0, #4]
   17ad0:	str	r1, [r0, #8]
   17ad4:	add	r0, sp, #112	; 0x70
   17ad8:	mov	r1, r5
   17adc:	bl	210f8 <__assert_fail@plt+0xf984>
   17ae0:	mov	r4, r0
   17ae4:	mov	r0, #0
   17ae8:	bl	13c04 <__assert_fail@plt+0x2490>
   17aec:	cmp	r4, #0
   17af0:	bne	17cfc <__assert_fail@plt+0x6588>
   17af4:	ldr	r0, [r7]
   17af8:	cmp	r0, #0
   17afc:	beq	17b8c <__assert_fail@plt+0x6418>
   17b00:	ldr	r0, [sp, #72]	; 0x48
   17b04:	ldr	r3, [sp, #28]
   17b08:	mov	r1, r7
   17b0c:	mov	r2, r6
   17b10:	bl	21390 <__assert_fail@plt+0xfc1c>
   17b14:	mov	r4, r0
   17b18:	mov	r0, r6
   17b1c:	bl	13c04 <__assert_fail@plt+0x2490>
   17b20:	cmp	r4, #0
   17b24:	beq	17ddc <__assert_fail@plt+0x6668>
   17b28:	mov	r6, #0
   17b2c:	b	17cfc <__assert_fail@plt+0x6588>
   17b30:	ldr	r0, [sp, #88]	; 0x58
   17b34:	mov	r6, #0
   17b38:	mov	r1, r5
   17b3c:	str	r6, [fp, #-204]	; 0xffffff34
   17b40:	str	r7, [fp, #-208]	; 0xffffff30
   17b44:	str	r0, [fp, #-200]	; 0xffffff38
   17b48:	ldr	r0, [sp, #40]	; 0x28
   17b4c:	str	r9, [fp, #-196]	; 0xffffff3c
   17b50:	str	r6, [r0]
   17b54:	str	r6, [r0, #4]
   17b58:	str	r6, [r0, #8]
   17b5c:	add	r0, sp, #112	; 0x70
   17b60:	bl	210f8 <__assert_fail@plt+0xf984>
   17b64:	mov	r4, r0
   17b68:	mov	r0, #0
   17b6c:	bl	13c04 <__assert_fail@plt+0x2490>
   17b70:	cmp	r4, #0
   17b74:	bne	17cfc <__assert_fail@plt+0x6588>
   17b78:	ldr	r0, [r7]
   17b7c:	mov	r6, #0
   17b80:	cmp	r0, #0
   17b84:	beq	17c70 <__assert_fail@plt+0x64fc>
   17b88:	b	17ddc <__assert_fail@plt+0x6668>
   17b8c:	ldr	r0, [r6]
   17b90:	cmp	r0, #0
   17b94:	bne	17b00 <__assert_fail@plt+0x638c>
   17b98:	cmp	r9, #1
   17b9c:	blt	17c70 <__assert_fail@plt+0x64fc>
   17ba0:	ldr	r0, [sp, #212]	; 0xd4
   17ba4:	lsl	r4, r9, #2
   17ba8:	add	r5, r9, #1
   17bac:	sub	r0, r0, #4
   17bb0:	ldr	r1, [r0, r4]
   17bb4:	cmp	r1, #0
   17bb8:	ldrbne	r2, [r1, #52]	; 0x34
   17bbc:	tstne	r2, #16
   17bc0:	bne	17bd8 <__assert_fail@plt+0x6464>
   17bc4:	sub	r5, r5, #1
   17bc8:	sub	r4, r4, #4
   17bcc:	cmp	r5, #2
   17bd0:	bge	17bb0 <__assert_fail@plt+0x643c>
   17bd4:	b	17c70 <__assert_fail@plt+0x64fc>
   17bd8:	sub	r2, r5, #2
   17bdc:	add	r0, sp, #112	; 0x70
   17be0:	str	r2, [sp, #96]	; 0x60
   17be4:	bl	1e3d8 <__assert_fail@plt+0xcc64>
   17be8:	mov	r9, r0
   17bec:	mov	r0, r6
   17bf0:	mov	r1, #0
   17bf4:	mov	r2, r4
   17bf8:	bl	11660 <memset@plt>
   17bfc:	ldr	r0, [sp, #96]	; 0x60
   17c00:	str	r7, [fp, #-208]	; 0xffffff30
   17c04:	str	r6, [fp, #-204]	; 0xffffff34
   17c08:	str	r9, [fp, #-200]	; 0xffffff38
   17c0c:	str	r9, [sp, #88]	; 0x58
   17c10:	mov	r1, #0
   17c14:	mov	r9, r0
   17c18:	str	r0, [fp, #-196]	; 0xffffff3c
   17c1c:	ldr	r0, [sp, #40]	; 0x28
   17c20:	str	r1, [r0]
   17c24:	str	r1, [r0, #4]
   17c28:	str	r1, [r0, #8]
   17c2c:	add	r0, sp, #112	; 0x70
   17c30:	sub	r1, fp, #208	; 0xd0
   17c34:	bl	210f8 <__assert_fail@plt+0xf984>
   17c38:	mov	r4, r0
   17c3c:	mov	r0, #0
   17c40:	bl	13c04 <__assert_fail@plt+0x2490>
   17c44:	cmp	r4, #0
   17c48:	bne	17cfc <__assert_fail@plt+0x6588>
   17c4c:	sub	r0, r5, #1
   17c50:	str	r0, [sp, #28]
   17c54:	ldr	r0, [r7]
   17c58:	cmp	r0, #0
   17c5c:	beq	17b8c <__assert_fail@plt+0x6418>
   17c60:	sub	r9, r5, #2
   17c64:	sub	r0, r5, #1
   17c68:	str	r0, [sp, #28]
   17c6c:	b	17b00 <__assert_fail@plt+0x638c>
   17c70:	mov	r0, r7
   17c74:	bl	13c04 <__assert_fail@plt+0x2490>
   17c78:	mov	r0, r6
   17c7c:	bl	13c04 <__assert_fail@plt+0x2490>
   17c80:	add	r0, sp, #112	; 0x70
   17c84:	bl	1e498 <__assert_fail@plt+0xcd24>
   17c88:	ldr	r0, [fp, #-212]	; 0xffffff2c
   17c8c:	ldr	r1, [sp, #80]	; 0x50
   17c90:	ldr	r9, [sp, #56]	; 0x38
   17c94:	ldr	ip, [sp, #108]	; 0x6c
   17c98:	ldr	r3, [sp, #104]	; 0x68
   17c9c:	ldr	r5, [sp, #100]	; 0x64
   17ca0:	ldr	r2, [fp, #24]
   17ca4:	ldr	lr, [sp, #60]	; 0x3c
   17ca8:	mov	r4, #1
   17cac:	add	r7, r0, r1
   17cb0:	cmp	r7, r9
   17cb4:	str	r7, [fp, #-212]	; 0xffffff2c
   17cb8:	blt	18714 <__assert_fail@plt+0x6fa0>
   17cbc:	cmp	r8, r7
   17cc0:	bge	1723c <__assert_fail@plt+0x5ac8>
   17cc4:	b	18714 <__assert_fail@plt+0x6fa0>
   17cc8:	ldr	r7, [r4, #48]	; 0x30
   17ccc:	b	1747c <__assert_fail@plt+0x5d08>
   17cd0:	ldr	r7, [r4, #44]	; 0x2c
   17cd4:	b	1747c <__assert_fail@plt+0x5d08>
   17cd8:	cmn	r5, #1
   17cdc:	ble	17d5c <__assert_fail@plt+0x65e8>
   17ce0:	mov	r0, #1
   17ce4:	mov	r2, r3
   17ce8:	str	r0, [sp, #72]	; 0x48
   17cec:	ldr	r0, [sp, #68]	; 0x44
   17cf0:	cmp	r0, #0
   17cf4:	bne	174cc <__assert_fail@plt+0x5d58>
   17cf8:	b	17da8 <__assert_fail@plt+0x6634>
   17cfc:	mov	r0, r7
   17d00:	bl	13c04 <__assert_fail@plt+0x2490>
   17d04:	mov	r0, r6
   17d08:	bl	13c04 <__assert_fail@plt+0x2490>
   17d0c:	cmp	r4, #0
   17d10:	beq	17e04 <__assert_fail@plt+0x6690>
   17d14:	cmp	r4, #1
   17d18:	beq	17c80 <__assert_fail@plt+0x650c>
   17d1c:	b	18714 <__assert_fail@plt+0x6fa0>
   17d20:	add	r4, r7, #4
   17d24:	add	r0, sp, #112	; 0x70
   17d28:	mov	r2, #0
   17d2c:	mov	r9, r3
   17d30:	mov	r1, r4
   17d34:	bl	1e620 <__assert_fail@plt+0xceac>
   17d38:	cmp	r0, #0
   17d3c:	str	r0, [fp, #-64]	; 0xffffffc0
   17d40:	bne	17dd4 <__assert_fail@plt+0x6660>
   17d44:	ldrb	r0, [r7, #52]	; 0x34
   17d48:	mov	ip, #0
   17d4c:	tst	r0, #64	; 0x40
   17d50:	bne	17db4 <__assert_fail@plt+0x6640>
   17d54:	mov	r3, r9
   17d58:	b	174b0 <__assert_fail@plt+0x5d3c>
   17d5c:	add	r0, sp, #112	; 0x70
   17d60:	mov	r1, r7
   17d64:	mov	r2, r3
   17d68:	mov	r4, r3
   17d6c:	mov	r6, ip
   17d70:	bl	1e3d8 <__assert_fail@plt+0xcc64>
   17d74:	clz	r1, r0
   17d78:	mov	ip, r6
   17d7c:	cmp	r0, #0
   17d80:	mov	r2, r4
   17d84:	mov	r3, r4
   17d88:	lsr	r6, r1, #5
   17d8c:	ldr	r1, [sp, #68]	; 0x44
   17d90:	movwne	r0, #1
   17d94:	mvneq	r2, #0
   17d98:	str	r0, [sp, #72]	; 0x48
   17d9c:	orr	r1, r1, r6
   17da0:	cmp	r1, #0
   17da4:	bne	174cc <__assert_fail@plt+0x5d58>
   17da8:	mov	r6, r3
   17dac:	sub	r5, fp, #208	; 0xd0
   17db0:	b	1799c <__assert_fail@plt+0x6228>
   17db4:	add	r0, sp, #112	; 0x70
   17db8:	mov	r1, r4
   17dbc:	bl	1e718 <__assert_fail@plt+0xcfa4>
   17dc0:	mov	ip, #0
   17dc4:	cmp	r0, #0
   17dc8:	mov	r3, r9
   17dcc:	str	r0, [fp, #-64]	; 0xffffffc0
   17dd0:	beq	174b0 <__assert_fail@plt+0x5d3c>
   17dd4:	mov	r6, r0
   17dd8:	b	1799c <__assert_fail@plt+0x6228>
   17ddc:	ldr	r0, [sp, #212]	; 0xd4
   17de0:	bl	13c04 <__assert_fail@plt+0x2490>
   17de4:	ldr	r0, [sp, #88]	; 0x58
   17de8:	str	r0, [sp, #208]	; 0xd0
   17dec:	mov	r0, #0
   17df0:	str	r7, [sp, #212]	; 0xd4
   17df4:	str	r9, [sp, #204]	; 0xcc
   17df8:	bl	13c04 <__assert_fail@plt+0x2490>
   17dfc:	mov	r0, #0
   17e00:	bl	13c04 <__assert_fail@plt+0x2490>
   17e04:	ldr	r4, [sp, #92]	; 0x5c
   17e08:	cmp	r4, #0
   17e0c:	beq	18710 <__assert_fail@plt+0x6f9c>
   17e10:	ldr	r8, [sp, #36]	; 0x24
   17e14:	ldr	sl, [fp, #20]
   17e18:	cmp	r4, #1
   17e1c:	beq	17e3c <__assert_fail@plt+0x66c8>
   17e20:	ldr	r1, [fp, #16]
   17e24:	mvn	r0, r8
   17e28:	add	r0, r0, r1
   17e2c:	mov	r1, #255	; 0xff
   17e30:	lsl	r2, r0, #3
   17e34:	add	r0, sl, #8
   17e38:	bl	11660 <memset@plt>
   17e3c:	ldr	r0, [sp, #204]	; 0xcc
   17e40:	mov	r5, #0
   17e44:	cmp	r4, #2
   17e48:	str	r5, [sl]
   17e4c:	str	r0, [sl, #4]
   17e50:	bcc	185e8 <__assert_fail@plt+0x6e74>
   17e54:	ldr	r0, [sp, #44]	; 0x2c
   17e58:	ldrb	r0, [r0, #28]
   17e5c:	ands	r0, r0, #16
   17e60:	bne	185e8 <__assert_fail@plt+0x6e74>
   17e64:	ldr	r0, [sp, #84]	; 0x54
   17e68:	ldrb	r1, [r0, #88]	; 0x58
   17e6c:	mov	r0, #0
   17e70:	tst	r1, #1
   17e74:	mov	r1, #0
   17e78:	beq	17e90 <__assert_fail@plt+0x671c>
   17e7c:	ldr	r1, [sp, #64]	; 0x40
   17e80:	ldr	r2, [r1]
   17e84:	mov	r1, #0
   17e88:	cmp	r2, #0
   17e8c:	movwgt	r1, #1
   17e90:	ldr	r2, [sp, #44]	; 0x2c
   17e94:	ldr	r4, [sp, #92]	; 0x5c
   17e98:	cmp	r1, #0
   17e9c:	ldr	r6, [r2]
   17ea0:	movw	r2, #21248	; 0x5300
   17ea4:	movt	r2, #2
   17ea8:	vldr	d16, [r2]
   17eac:	ldr	r2, [r2, #8]
   17eb0:	str	r2, [fp, #-56]	; 0xffffffc8
   17eb4:	mov	r2, #16
   17eb8:	vstr	d16, [fp, #-64]	; 0xffffffc0
   17ebc:	str	r2, [fp, #-204]	; 0xffffff34
   17ec0:	sub	r2, fp, #208	; 0xd0
   17ec4:	str	r0, [fp, #-208]	; 0xffffff30
   17ec8:	add	r9, r2, #12
   17ecc:	mov	r2, #0
   17ed0:	str	r9, [fp, #-200]	; 0xffffff38
   17ed4:	beq	17ef8 <__assert_fail@plt+0x6784>
   17ed8:	mov	r0, #48	; 0x30
   17edc:	bl	23be4 <__assert_fail@plt+0x12470>
   17ee0:	cmp	r0, #0
   17ee4:	str	r0, [fp, #-56]	; 0xffffffc8
   17ee8:	beq	18600 <__assert_fail@plt+0x6e8c>
   17eec:	ldr	r0, [fp, #-208]	; 0xffffff30
   17ef0:	sub	r1, fp, #64	; 0x40
   17ef4:	mov	r2, r1
   17ef8:	ldr	sl, [r6, #72]	; 0x48
   17efc:	mov	r1, #0
   17f00:	cmp	r0, r4
   17f04:	str	r6, [sp, #104]	; 0x68
   17f08:	str	r2, [sp, #108]	; 0x6c
   17f0c:	str	r1, [fp, #-44]	; 0xffffffd4
   17f10:	str	r1, [fp, #-48]	; 0xffffffd0
   17f14:	str	r1, [fp, #-40]	; 0xffffffd8
   17f18:	bcs	17fac <__assert_fail@plt+0x6838>
   17f1c:	sub	r0, fp, #208	; 0xd0
   17f20:	mov	r1, r4
   17f24:	mov	r2, r9
   17f28:	mov	r3, #8
   17f2c:	bl	23ce4 <__assert_fail@plt+0x12570>
   17f30:	cmp	r0, #0
   17f34:	bne	17fb0 <__assert_fail@plt+0x683c>
   17f38:	ldr	r0, [fp, #-200]	; 0xffffff38
   17f3c:	ldr	r6, [sp, #108]	; 0x6c
   17f40:	mov	r4, r9
   17f44:	cmp	r0, r9
   17f48:	beq	17f50 <__assert_fail@plt+0x67dc>
   17f4c:	bl	13c04 <__assert_fail@plt+0x2490>
   17f50:	mov	r0, #16
   17f54:	str	r0, [fp, #-204]	; 0xffffff34
   17f58:	mov	r0, #0
   17f5c:	str	r0, [fp, #-208]	; 0xffffff30
   17f60:	mov	r0, r6
   17f64:	str	r4, [fp, #-200]	; 0xffffff38
   17f68:	bl	222bc <__assert_fail@plt+0x10b48>
   17f6c:	ldr	r8, [sp, #36]	; 0x24
   17f70:	b	185a0 <__assert_fail@plt+0x6e2c>
   17f74:	ldr	r1, [r3, #8]
   17f78:	cmp	r1, #0
   17f7c:	beq	17f8c <__assert_fail@plt+0x6818>
   17f80:	ldrsb	r1, [r9, #28]
   17f84:	cmp	r1, #0
   17f88:	blt	16f64 <__assert_fail@plt+0x57f0>
   17f8c:	mov	r1, #0
   17f90:	cmp	r7, #0
   17f94:	str	r1, [sp, #96]	; 0x60
   17f98:	beq	185f8 <__assert_fail@plt+0x6e84>
   17f9c:	cmp	r0, #0
   17fa0:	mov	r7, #0
   17fa4:	bne	1874c <__assert_fail@plt+0x6fd8>
   17fa8:	b	16f68 <__assert_fail@plt+0x57f4>
   17fac:	str	r4, [fp, #-208]	; 0xffffff30
   17fb0:	ldr	r6, [fp, #20]
   17fb4:	ldr	r0, [fp, #-200]	; 0xffffff38
   17fb8:	lsl	r2, r4, #3
   17fbc:	str	r2, [sp, #96]	; 0x60
   17fc0:	mov	r1, r6
   17fc4:	str	r0, [sp, #100]	; 0x64
   17fc8:	bl	1148c <memcpy@plt>
   17fcc:	ldr	r7, [r6]
   17fd0:	ldr	r1, [r6, #4]
   17fd4:	mov	r0, #0
   17fd8:	cmp	r7, r1
   17fdc:	str	r7, [fp, #-36]	; 0xffffffdc
   17fe0:	ble	18014 <__assert_fail@plt+0x68a0>
   17fe4:	bl	13c04 <__assert_fail@plt+0x2490>
   17fe8:	ldr	r0, [fp, #-200]	; 0xffffff38
   17fec:	cmp	r0, r9
   17ff0:	beq	17ff8 <__assert_fail@plt+0x6884>
   17ff4:	bl	13c04 <__assert_fail@plt+0x2490>
   17ff8:	mov	r0, #16
   17ffc:	mov	r4, #0
   18000:	str	r0, [fp, #-204]	; 0xffffff34
   18004:	ldr	r0, [sp, #108]	; 0x6c
   18008:	str	r4, [fp, #-208]	; 0xffffff30
   1800c:	str	r9, [fp, #-200]	; 0xffffff38
   18010:	b	185d8 <__assert_fail@plt+0x6e64>
   18014:	ldr	r1, [sp, #104]	; 0x68
   18018:	lsl	r0, r4, #4
   1801c:	str	r9, [sp, #88]	; 0x58
   18020:	str	r0, [sp, #80]	; 0x50
   18024:	ldr	r0, [r1]
   18028:	add	r1, r0, sl, lsl #3
   1802c:	ldr	r3, [r1, #4]
   18030:	uxtb	r2, r3
   18034:	cmp	r2, #9
   18038:	beq	18068 <__assert_fail@plt+0x68f4>
   1803c:	cmp	r2, #8
   18040:	bne	180d0 <__assert_fail@plt+0x695c>
   18044:	ldr	r0, [r0, sl, lsl #3]
   18048:	add	r0, r0, #1
   1804c:	cmp	r0, r4
   18050:	bge	180d0 <__assert_fail@plt+0x695c>
   18054:	ldr	r1, [fp, #20]
   18058:	str	r7, [r1, r0, lsl #3]!
   1805c:	mvn	r0, #0
   18060:	str	r0, [r1, #4]
   18064:	b	180d0 <__assert_fail@plt+0x695c>
   18068:	ldr	r0, [r0, sl, lsl #3]
   1806c:	add	r0, r0, #1
   18070:	cmp	r0, r4
   18074:	bge	180d0 <__assert_fail@plt+0x695c>
   18078:	ldr	r1, [fp, #20]
   1807c:	ldr	r2, [r1, r0, lsl #3]
   18080:	cmp	r2, r7
   18084:	bge	18098 <__assert_fail@plt+0x6924>
   18088:	add	r0, r1, r0, lsl #3
   1808c:	str	r7, [r0, #4]
   18090:	ldr	r0, [sp, #100]	; 0x64
   18094:	b	180b8 <__assert_fail@plt+0x6944>
   18098:	tst	r3, #524288	; 0x80000
   1809c:	beq	180c4 <__assert_fail@plt+0x6950>
   180a0:	ldr	r1, [sp, #100]	; 0x64
   180a4:	ldr	r1, [r1, r0, lsl #3]
   180a8:	cmn	r1, #1
   180ac:	beq	180c4 <__assert_fail@plt+0x6950>
   180b0:	ldr	r0, [fp, #20]
   180b4:	ldr	r1, [sp, #100]	; 0x64
   180b8:	ldr	r2, [sp, #96]	; 0x60
   180bc:	bl	1148c <memcpy@plt>
   180c0:	b	180d0 <__assert_fail@plt+0x695c>
   180c4:	ldr	r1, [fp, #20]
   180c8:	add	r0, r1, r0, lsl #3
   180cc:	str	r7, [r0, #4]
   180d0:	ldr	r0, [fp, #20]
   180d4:	ldr	r0, [r0, #4]
   180d8:	cmp	r7, r0
   180dc:	ldreq	r0, [sp, #208]	; 0xd0
   180e0:	cmpeq	sl, r0
   180e4:	beq	1810c <__assert_fail@plt+0x6998>
   180e8:	ldr	r7, [sp, #108]	; 0x6c
   180ec:	cmp	r7, #0
   180f0:	beq	18178 <__assert_fail@plt+0x6a04>
   180f4:	sub	r0, fp, #48	; 0x30
   180f8:	mov	r1, sl
   180fc:	bl	1d86c <__assert_fail@plt+0xc0f8>
   18100:	cmp	r0, #0
   18104:	bne	18118 <__assert_fail@plt+0x69a4>
   18108:	b	18178 <__assert_fail@plt+0x6a04>
   1810c:	ldr	r7, [sp, #108]	; 0x6c
   18110:	cmp	r7, #0
   18114:	beq	185a8 <__assert_fail@plt+0x6e34>
   18118:	mov	r0, #0
   1811c:	ldr	r3, [fp, #20]
   18120:	ldr	r1, [r3, r0, lsl #3]
   18124:	cmp	r1, #0
   18128:	blt	1813c <__assert_fail@plt+0x69c8>
   1812c:	add	r1, r3, r0, lsl #3
   18130:	ldr	r1, [r1, #4]
   18134:	cmn	r1, #1
   18138:	beq	1814c <__assert_fail@plt+0x69d8>
   1813c:	add	r0, r0, #1
   18140:	cmp	r0, r4
   18144:	bcc	1811c <__assert_fail@plt+0x69a8>
   18148:	b	185a8 <__assert_fail@plt+0x6e34>
   1814c:	ldr	r0, [sp, #100]	; 0x64
   18150:	sub	r1, fp, #36	; 0x24
   18154:	mov	r2, r4
   18158:	str	r0, [sp]
   1815c:	sub	r0, fp, #48	; 0x30
   18160:	str	r0, [sp, #4]
   18164:	mov	r0, r7
   18168:	bl	22324 <__assert_fail@plt+0x10bb0>
   1816c:	mov	sl, r0
   18170:	cmn	r0, #1
   18174:	ble	185a8 <__assert_fail@plt+0x6e34>
   18178:	ldr	r6, [sp, #196]	; 0xc4
   1817c:	ldr	r0, [r6]
   18180:	add	r1, r0, sl, lsl #3
   18184:	ldr	r1, [r1, #4]
   18188:	tst	r1, #8
   1818c:	bne	1824c <__assert_fail@plt+0x6ad8>
   18190:	tst	r1, #1048576	; 0x100000
   18194:	bne	182e4 <__assert_fail@plt+0x6b70>
   18198:	uxtb	r1, r1
   1819c:	cmp	r1, #4
   181a0:	bne	18308 <__assert_fail@plt+0x6b94>
   181a4:	ldr	r0, [r0, sl, lsl #3]
   181a8:	ldr	r1, [sp, #92]	; 0x5c
   181ac:	mov	r4, #0
   181b0:	add	r0, r0, #1
   181b4:	cmp	r0, r1
   181b8:	ldrlt	r1, [fp, #20]
   181bc:	ldrlt	r2, [r1, r0, lsl #3]!
   181c0:	ldrlt	r1, [r1, #4]
   181c4:	sublt	r4, r1, r2
   181c8:	cmp	r7, #0
   181cc:	beq	183dc <__assert_fail@plt+0x6c68>
   181d0:	ldr	r1, [sp, #92]	; 0x5c
   181d4:	cmp	r0, r1
   181d8:	bge	1837c <__assert_fail@plt+0x6c08>
   181dc:	ldr	r1, [fp, #20]
   181e0:	ldr	r1, [r1, r0, lsl #3]
   181e4:	cmn	r1, #1
   181e8:	beq	1837c <__assert_fail@plt+0x6c08>
   181ec:	ldr	r2, [fp, #20]
   181f0:	add	r0, r2, r0, lsl #3
   181f4:	ldr	r0, [r0, #4]
   181f8:	cmn	r0, #1
   181fc:	beq	1837c <__assert_fail@plt+0x6c08>
   18200:	cmp	r4, #0
   18204:	beq	18488 <__assert_fail@plt+0x6d14>
   18208:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1820c:	ldr	r0, [sp, #140]	; 0x8c
   18210:	sub	r0, r0, r7
   18214:	cmp	r0, r4
   18218:	blt	1837c <__assert_fail@plt+0x6c08>
   1821c:	ldr	r2, [sp, #116]	; 0x74
   18220:	add	r0, r2, r1
   18224:	add	r1, r2, r7
   18228:	mov	r2, r4
   1822c:	bl	114e0 <memcmp@plt>
   18230:	cmp	r0, #0
   18234:	bne	1837c <__assert_fail@plt+0x6c08>
   18238:	ldr	r0, [r6, #12]
   1823c:	add	r7, r7, r4
   18240:	ldr	r9, [r0, sl, lsl #2]
   18244:	str	r7, [fp, #-36]	; 0xffffffdc
   18248:	b	1834c <__assert_fail@plt+0x6bd8>
   1824c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18250:	ldr	r0, [sp, #212]	; 0xd4
   18254:	ldr	r4, [r6, #20]
   18258:	ldr	r7, [r0, r1, lsl #2]
   1825c:	str	r1, [sp, #76]	; 0x4c
   18260:	sub	r0, fp, #48	; 0x30
   18264:	mov	r1, sl
   18268:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1826c:	cmp	r0, #0
   18270:	bne	18288 <__assert_fail@plt+0x6b14>
   18274:	sub	r0, fp, #48	; 0x30
   18278:	mov	r1, sl
   1827c:	bl	1d654 <__assert_fail@plt+0xbee0>
   18280:	cmp	r0, #0
   18284:	beq	18568 <__assert_fail@plt+0x6df4>
   18288:	add	r0, sl, sl, lsl #1
   1828c:	add	r0, r4, r0, lsl #2
   18290:	ldr	r4, [r0, #4]
   18294:	cmp	r4, #1
   18298:	blt	1837c <__assert_fail@plt+0x6c08>
   1829c:	add	r6, r7, #4
   182a0:	ldr	r7, [r0, #8]
   182a4:	mov	r8, #0
   182a8:	mvn	sl, #0
   182ac:	ldr	r9, [r7, r8, lsl #2]
   182b0:	mov	r0, r6
   182b4:	mov	r1, r9
   182b8:	bl	1d86c <__assert_fail@plt+0xc0f8>
   182bc:	cmp	r0, #0
   182c0:	beq	182d0 <__assert_fail@plt+0x6b5c>
   182c4:	cmn	sl, #1
   182c8:	bne	183bc <__assert_fail@plt+0x6c48>
   182cc:	mov	sl, r9
   182d0:	add	r8, r8, #1
   182d4:	cmp	r8, r4
   182d8:	blt	182ac <__assert_fail@plt+0x6b38>
   182dc:	mov	r9, sl
   182e0:	b	183d0 <__assert_fail@plt+0x6c5c>
   182e4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   182e8:	mov	r0, r6
   182ec:	mov	r1, sl
   182f0:	add	r2, sp, #112	; 0x70
   182f4:	mov	r3, r7
   182f8:	bl	201c8 <__assert_fail@plt+0xea54>
   182fc:	cmp	r0, #0
   18300:	bne	18330 <__assert_fail@plt+0x6bbc>
   18304:	b	1830c <__assert_fail@plt+0x6b98>
   18308:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1830c:	ldr	r0, [r6]
   18310:	mov	r2, r7
   18314:	add	r1, r0, sl, lsl #3
   18318:	add	r0, sp, #112	; 0x70
   1831c:	bl	204b8 <__assert_fail@plt+0xed44>
   18320:	mov	r1, r0
   18324:	mov	r0, #1
   18328:	cmp	r1, #0
   1832c:	beq	1837c <__assert_fail@plt+0x6c08>
   18330:	ldr	r1, [r6, #12]
   18334:	add	r7, r0, r7
   18338:	ldr	r0, [sp, #108]	; 0x6c
   1833c:	ldr	r9, [r1, sl, lsl #2]
   18340:	cmp	r0, #0
   18344:	str	r7, [fp, #-36]	; 0xffffffdc
   18348:	beq	183f8 <__assert_fail@plt+0x6c84>
   1834c:	ldr	r0, [sp, #204]	; 0xcc
   18350:	cmp	r7, r0
   18354:	bgt	1837c <__assert_fail@plt+0x6c08>
   18358:	ldr	r0, [sp, #212]	; 0xd4
   1835c:	ldr	r0, [r0, r7, lsl #2]
   18360:	cmp	r0, #0
   18364:	beq	1837c <__assert_fail@plt+0x6c08>
   18368:	add	r0, r0, #4
   1836c:	mov	r1, r9
   18370:	bl	1d86c <__assert_fail@plt+0xc0f8>
   18374:	cmp	r0, #0
   18378:	bne	183f8 <__assert_fail@plt+0x6c84>
   1837c:	ldr	r0, [sp, #100]	; 0x64
   18380:	ldr	r4, [sp, #92]	; 0x5c
   18384:	ldr	r6, [sp, #108]	; 0x6c
   18388:	ldr	r3, [fp, #20]
   1838c:	sub	r1, fp, #36	; 0x24
   18390:	str	r0, [sp]
   18394:	sub	r0, fp, #48	; 0x30
   18398:	mov	r2, r4
   1839c:	str	r0, [sp, #4]
   183a0:	mov	r0, r6
   183a4:	bl	22324 <__assert_fail@plt+0x10bb0>
   183a8:	cmp	r0, #0
   183ac:	blt	18770 <__assert_fail@plt+0x6ffc>
   183b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   183b4:	mov	sl, r0
   183b8:	b	18410 <__assert_fail@plt+0x6c9c>
   183bc:	sub	r0, fp, #48	; 0x30
   183c0:	mov	r1, sl
   183c4:	bl	1d86c <__assert_fail@plt+0xc0f8>
   183c8:	cmp	r0, #0
   183cc:	beq	1842c <__assert_fail@plt+0x6cb8>
   183d0:	ldr	r8, [sp, #36]	; 0x24
   183d4:	ldr	r7, [sp, #76]	; 0x4c
   183d8:	b	18400 <__assert_fail@plt+0x6c8c>
   183dc:	cmp	r4, #0
   183e0:	beq	18488 <__assert_fail@plt+0x6d14>
   183e4:	ldr	r0, [r6, #12]
   183e8:	ldr	r9, [r0, sl, lsl #2]
   183ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   183f0:	add	r7, r0, r4
   183f4:	str	r7, [fp, #-36]	; 0xffffffdc
   183f8:	mov	r0, #0
   183fc:	str	r0, [fp, #-44]	; 0xffffffd4
   18400:	cmn	r9, #1
   18404:	ble	18560 <__assert_fail@plt+0x6dec>
   18408:	ldr	r4, [sp, #92]	; 0x5c
   1840c:	mov	sl, r9
   18410:	ldr	r0, [fp, #20]
   18414:	ldr	r9, [sp, #88]	; 0x58
   18418:	ldr	r1, [sp, #104]	; 0x68
   1841c:	ldr	r0, [r0, #4]
   18420:	cmp	r7, r0
   18424:	ble	18024 <__assert_fail@plt+0x68b0>
   18428:	b	18758 <__assert_fail@plt+0x6fe4>
   1842c:	ldr	r4, [sp, #108]	; 0x6c
   18430:	ldr	r8, [sp, #36]	; 0x24
   18434:	ldr	r7, [sp, #76]	; 0x4c
   18438:	cmp	r4, #0
   1843c:	beq	184d4 <__assert_fail@plt+0x6d60>
   18440:	ldr	r6, [r4]
   18444:	ldr	r0, [r4, #4]
   18448:	add	r1, r6, #1
   1844c:	cmp	r1, r0
   18450:	str	r1, [r4]
   18454:	bne	184dc <__assert_fail@plt+0x6d68>
   18458:	ldr	r0, [r4, #8]
   1845c:	add	r1, r1, r1, lsl #1
   18460:	lsl	r1, r1, #4
   18464:	bl	23c14 <__assert_fail@plt+0x124a0>
   18468:	cmp	r0, #0
   1846c:	beq	18558 <__assert_fail@plt+0x6de4>
   18470:	str	r0, [r4, #8]
   18474:	ldr	r7, [sp, #76]	; 0x4c
   18478:	ldr	r1, [r4, #4]
   1847c:	lsl	r1, r1, #1
   18480:	str	r1, [r4, #4]
   18484:	b	184e0 <__assert_fail@plt+0x6d6c>
   18488:	sub	r0, fp, #48	; 0x30
   1848c:	mov	r1, sl
   18490:	bl	1d654 <__assert_fail@plt+0xbee0>
   18494:	cmp	r0, #0
   18498:	beq	18568 <__assert_fail@plt+0x6df4>
   1849c:	ldr	r0, [r6, #20]
   184a0:	add	r1, sl, sl, lsl #1
   184a4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   184a8:	add	r0, r0, r1, lsl #2
   184ac:	ldr	r0, [r0, #8]
   184b0:	ldr	r9, [r0]
   184b4:	ldr	r0, [sp, #212]	; 0xd4
   184b8:	ldr	r0, [r0, r7, lsl #2]
   184bc:	mov	r1, r9
   184c0:	add	r0, r0, #4
   184c4:	bl	1d86c <__assert_fail@plt+0xc0f8>
   184c8:	cmp	r0, #0
   184cc:	bne	18400 <__assert_fail@plt+0x6c8c>
   184d0:	b	1830c <__assert_fail@plt+0x6b98>
   184d4:	mov	r9, sl
   184d8:	b	18400 <__assert_fail@plt+0x6c8c>
   184dc:	ldr	r0, [r4, #8]
   184e0:	add	r1, r6, r6, lsl #1
   184e4:	str	r7, [r0, r1, lsl #3]!
   184e8:	mov	r7, r1
   184ec:	str	r9, [r0, #4]
   184f0:	ldr	r0, [sp, #80]	; 0x50
   184f4:	bl	23be4 <__assert_fail@plt+0x12470>
   184f8:	ldr	r1, [r4, #8]
   184fc:	mvn	r9, #1
   18500:	cmp	r0, #0
   18504:	add	r6, r1, r7, lsl #3
   18508:	str	r0, [r6, #8]!
   1850c:	beq	183d4 <__assert_fail@plt+0x6c60>
   18510:	ldr	r1, [fp, #20]
   18514:	ldr	r2, [sp, #96]	; 0x60
   18518:	bl	1148c <memcpy@plt>
   1851c:	ldr	r0, [r6]
   18520:	ldr	r1, [sp, #92]	; 0x5c
   18524:	ldr	r2, [sp, #96]	; 0x60
   18528:	add	r0, r0, r1, lsl #3
   1852c:	ldr	r1, [sp, #100]	; 0x64
   18530:	bl	1148c <memcpy@plt>
   18534:	ldr	r0, [r4, #8]
   18538:	sub	r1, fp, #48	; 0x30
   1853c:	add	r0, r0, r7, lsl #3
   18540:	add	r0, r0, #12
   18544:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   18548:	ldr	r7, [sp, #76]	; 0x4c
   1854c:	cmp	r0, #0
   18550:	moveq	r9, sl
   18554:	b	18400 <__assert_fail@plt+0x6c8c>
   18558:	mvn	r9, #1
   1855c:	b	183d4 <__assert_fail@plt+0x6c60>
   18560:	cmn	r9, #2
   18564:	bne	1837c <__assert_fail@plt+0x6c08>
   18568:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1856c:	bl	13c04 <__assert_fail@plt+0x2490>
   18570:	ldr	r0, [fp, #-200]	; 0xffffff38
   18574:	ldr	r4, [sp, #88]	; 0x58
   18578:	cmp	r0, r4
   1857c:	beq	18584 <__assert_fail@plt+0x6e10>
   18580:	bl	13c04 <__assert_fail@plt+0x2490>
   18584:	mov	r0, #16
   18588:	str	r0, [fp, #-204]	; 0xffffff34
   1858c:	mov	r0, #0
   18590:	str	r0, [fp, #-208]	; 0xffffff30
   18594:	ldr	r0, [sp, #108]	; 0x6c
   18598:	str	r4, [fp, #-200]	; 0xffffff38
   1859c:	bl	222bc <__assert_fail@plt+0x10b48>
   185a0:	mov	r4, #12
   185a4:	b	185dc <__assert_fail@plt+0x6e68>
   185a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   185ac:	bl	13c04 <__assert_fail@plt+0x2490>
   185b0:	ldr	r0, [fp, #-200]	; 0xffffff38
   185b4:	cmp	r0, r9
   185b8:	beq	185c0 <__assert_fail@plt+0x6e4c>
   185bc:	bl	13c04 <__assert_fail@plt+0x2490>
   185c0:	mov	r0, #16
   185c4:	mov	r4, #0
   185c8:	str	r0, [fp, #-204]	; 0xffffff34
   185cc:	str	r4, [fp, #-208]	; 0xffffff30
   185d0:	str	r9, [fp, #-200]	; 0xffffff38
   185d4:	mov	r0, r7
   185d8:	bl	222bc <__assert_fail@plt+0x10b48>
   185dc:	ldr	sl, [fp, #20]
   185e0:	cmp	r4, #0
   185e4:	bne	18714 <__assert_fail@plt+0x6fa0>
   185e8:	ldrb	r1, [sp, #188]	; 0xbc
   185ec:	ldr	r2, [fp, #16]
   185f0:	add	r0, sl, #4
   185f4:	b	18648 <__assert_fail@plt+0x6ed4>
   185f8:	mov	r7, #0
   185fc:	b	16f68 <__assert_fail@plt+0x57f4>
   18600:	mov	r4, #12
   18604:	b	185e0 <__assert_fail@plt+0x6e6c>
   18608:	ldr	r7, [sp, #140]	; 0x8c
   1860c:	ldr	r6, [sp, #32]
   18610:	ldr	ip, [sp, #124]	; 0x7c
   18614:	cmp	r3, r7
   18618:	mov	r4, r6
   1861c:	addne	r4, ip, r3, lsl #2
   18620:	ldr	r3, [r4]
   18624:	str	r3, [r0, #-4]
   18628:	ldr	r4, [r0]
   1862c:	cmp	r4, r7
   18630:	addne	r6, ip, r4, lsl #2
   18634:	ldr	r7, [r6]
   18638:	add	r6, sl, r5, lsl #3
   1863c:	add	r6, r6, #4
   18640:	str	r7, [r0]
   18644:	b	18664 <__assert_fail@plt+0x6ef0>
   18648:	ldr	r3, [r0, #-4]
   1864c:	cmn	r3, #1
   18650:	beq	18678 <__assert_fail@plt+0x6f04>
   18654:	cmp	r1, #0
   18658:	bne	18608 <__assert_fail@plt+0x6e94>
   1865c:	ldr	r7, [r0]
   18660:	mov	r6, r0
   18664:	ldr	r4, [fp, #-212]	; 0xffffff2c
   18668:	add	r3, r3, r4
   1866c:	str	r3, [r0, #-4]
   18670:	add	r3, r7, r4
   18674:	str	r3, [r6]
   18678:	sub	r2, r2, #1
   1867c:	add	r0, r0, #8
   18680:	add	r5, r5, #1
   18684:	cmp	r8, r2
   18688:	bne	18648 <__assert_fail@plt+0x6ed4>
   1868c:	ldr	r0, [sp, #92]	; 0x5c
   18690:	cmp	r8, #1
   18694:	blt	186a8 <__assert_fail@plt+0x6f34>
   18698:	add	r0, sl, r0, lsl #3
   1869c:	lsl	r2, r8, #3
   186a0:	mov	r1, #255	; 0xff
   186a4:	bl	11660 <memset@plt>
   186a8:	ldr	r0, [sp, #84]	; 0x54
   186ac:	mov	r4, #0
   186b0:	ldr	r0, [r0, #132]	; 0x84
   186b4:	cmp	r0, #0
   186b8:	beq	18714 <__assert_fail@plt+0x6fa0>
   186bc:	ldr	r1, [sp, #92]	; 0x5c
   186c0:	cmp	r1, #2
   186c4:	bcc	18714 <__assert_fail@plt+0x6fa0>
   186c8:	ldr	r1, [fp, #16]
   186cc:	mov	r2, #0
   186d0:	sub	r1, r1, #1
   186d4:	sub	r1, r1, r8
   186d8:	ldr	r3, [r0, r2, lsl #2]
   186dc:	cmp	r2, r3
   186e0:	beq	18704 <__assert_fail@plt+0x6f90>
   186e4:	add	r3, sl, r3, lsl #3
   186e8:	add	r7, sl, r2, lsl #3
   186ec:	ldr	r3, [r3, #8]
   186f0:	str	r3, [r7, #8]
   186f4:	ldr	r3, [r0, r2, lsl #2]
   186f8:	add	r3, sl, r3, lsl #3
   186fc:	ldr	r3, [r3, #12]
   18700:	str	r3, [r7, #12]
   18704:	add	r2, r2, #1
   18708:	cmp	r1, r2
   1870c:	bne	186d8 <__assert_fail@plt+0x6f64>
   18710:	mov	r4, #0
   18714:	ldr	r0, [sp, #212]	; 0xd4
   18718:	bl	13c04 <__assert_fail@plt+0x2490>
   1871c:	ldr	r0, [sp, #64]	; 0x40
   18720:	ldr	r0, [r0]
   18724:	cmp	r0, #0
   18728:	beq	18744 <__assert_fail@plt+0x6fd0>
   1872c:	add	r0, sp, #112	; 0x70
   18730:	bl	1e498 <__assert_fail@plt+0xcd24>
   18734:	ldr	r0, [sp, #244]	; 0xf4
   18738:	bl	13c04 <__assert_fail@plt+0x2490>
   1873c:	ldr	r0, [sp, #228]	; 0xe4
   18740:	bl	13c04 <__assert_fail@plt+0x2490>
   18744:	add	r0, sp, #112	; 0x70
   18748:	bl	18e24 <__assert_fail@plt+0x76b0>
   1874c:	mov	r0, r4
   18750:	sub	sp, fp, #28
   18754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18758:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1875c:	b	17fe4 <__assert_fail@plt+0x6870>
   18760:	mov	r4, #12
   18764:	b	18714 <__assert_fail@plt+0x6fa0>
   18768:	mov	r4, r0
   1876c:	b	18714 <__assert_fail@plt+0x6fa0>
   18770:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18774:	bl	13c04 <__assert_fail@plt+0x2490>
   18778:	ldr	r0, [fp, #-200]	; 0xffffff38
   1877c:	ldr	r4, [sp, #88]	; 0x58
   18780:	cmp	r0, r4
   18784:	beq	1878c <__assert_fail@plt+0x7018>
   18788:	bl	13c04 <__assert_fail@plt+0x2490>
   1878c:	mov	r0, #16
   18790:	str	r0, [fp, #-204]	; 0xffffff34
   18794:	mov	r0, #0
   18798:	str	r0, [fp, #-208]	; 0xffffff30
   1879c:	mov	r0, r6
   187a0:	str	r4, [fp, #-200]	; 0xffffff38
   187a4:	bl	222bc <__assert_fail@plt+0x10b48>
   187a8:	mov	r4, #1
   187ac:	b	185dc <__assert_fail@plt+0x6e68>
   187b0:	mov	r0, r7
   187b4:	bl	13c04 <__assert_fail@plt+0x2490>
   187b8:	mov	r0, #0
   187bc:	bl	13c04 <__assert_fail@plt+0x2490>
   187c0:	b	18714 <__assert_fail@plt+0x6fa0>
   187c4:	mov	r4, r0
   187c8:	add	r0, r5, #76	; 0x4c
   187cc:	str	r0, [sp, #64]	; 0x40
   187d0:	b	18714 <__assert_fail@plt+0x6fa0>
   187d4:	mov	r4, #1
   187d8:	b	18714 <__assert_fail@plt+0x6fa0>
   187dc:	push	{fp, lr}
   187e0:	mov	fp, sp
   187e4:	sub	sp, sp, #16
   187e8:	mov	ip, #1
   187ec:	str	r2, [sp, #4]
   187f0:	str	ip, [sp, #12]
   187f4:	mov	ip, #0
   187f8:	str	ip, [sp]
   187fc:	ldr	ip, [fp, #8]
   18800:	str	ip, [sp, #8]
   18804:	bl	18810 <__assert_fail@plt+0x709c>
   18808:	mov	sp, fp
   1880c:	pop	{fp, pc}
   18810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18814:	add	fp, sp, #28
   18818:	sub	sp, sp, #44	; 0x2c
   1881c:	mvn	r6, #0
   18820:	cmp	r3, #0
   18824:	blt	18ab8 <__assert_fail@plt+0x7344>
   18828:	mov	r4, r3
   1882c:	mov	r9, r2
   18830:	cmp	r3, r2
   18834:	bgt	18ab8 <__assert_fail@plt+0x7344>
   18838:	mov	r7, r0
   1883c:	ldr	r0, [fp, #8]
   18840:	mov	r8, r9
   18844:	mov	sl, r1
   18848:	movw	r1, #0
   1884c:	ldr	r6, [r7]
   18850:	movt	r1, #0
   18854:	add	r0, r0, r4
   18858:	cmp	r0, r9
   1885c:	bicle	r8, r0, r0, asr #31
   18860:	movw	r0, #0
   18864:	movt	r0, #0
   18868:	orrs	r5, r1, r0
   1886c:	beq	18878 <__assert_fail@plt+0x7104>
   18870:	add	r0, r6, #136	; 0x88
   18874:	bl	11474 <pthread_mutex_lock@plt>
   18878:	ldrb	r0, [r7, #28]
   1887c:	ldr	r2, [fp, #16]
   18880:	cmp	r8, r4
   18884:	ubfx	r1, r0, #5, #2
   18888:	str	r6, [sp, #20]
   1888c:	str	r5, [sp, #36]	; 0x24
   18890:	str	r4, [sp, #32]
   18894:	str	sl, [sp, #28]
   18898:	str	r1, [sp, #24]
   1889c:	ble	188c8 <__assert_fail@plt+0x7154>
   188a0:	tst	r0, #8
   188a4:	bne	188c8 <__assert_fail@plt+0x7154>
   188a8:	ldr	r1, [r7, #16]
   188ac:	cmp	r1, #0
   188b0:	beq	188c8 <__assert_fail@plt+0x7154>
   188b4:	mov	r0, r7
   188b8:	mov	r4, r2
   188bc:	bl	165a8 <__assert_fail@plt+0x4e34>
   188c0:	ldrb	r0, [r7, #28]
   188c4:	mov	r2, r4
   188c8:	mov	sl, #1
   188cc:	mov	r6, #0
   188d0:	cmp	r2, #0
   188d4:	str	r7, [fp, #-32]	; 0xffffffe0
   188d8:	beq	18924 <__assert_fail@plt+0x71b0>
   188dc:	ands	r1, r0, #16
   188e0:	bne	18924 <__assert_fail@plt+0x71b0>
   188e4:	and	r0, r0, #6
   188e8:	cmp	r0, #4
   188ec:	bne	18914 <__assert_fail@plt+0x71a0>
   188f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   188f4:	ldr	sl, [r2]
   188f8:	ldr	r0, [r0, #24]
   188fc:	cmp	sl, r0
   18900:	bhi	1891c <__assert_fail@plt+0x71a8>
   18904:	cmp	sl, #1
   18908:	movwlt	r2, #0
   1890c:	movwlt	sl, #1
   18910:	b	18920 <__assert_fail@plt+0x71ac>
   18914:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18918:	ldr	r0, [r0, #24]
   1891c:	add	sl, r0, #1
   18920:	mov	r6, r2
   18924:	lsl	r0, sl, #3
   18928:	bl	23be4 <__assert_fail@plt+0x12470>
   1892c:	cmp	r0, #0
   18930:	beq	18ac4 <__assert_fail@plt+0x7350>
   18934:	mov	r4, r0
   18938:	ldr	r0, [fp, #12]
   1893c:	str	r8, [sp]
   18940:	mov	r2, r9
   18944:	stmib	sp, {r0, sl}
   18948:	str	r4, [sp, #12]
   1894c:	ldr	r0, [sp, #24]
   18950:	ldr	r5, [sp, #32]
   18954:	ldr	r1, [sp, #28]
   18958:	str	r0, [sp, #16]
   1895c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18960:	mov	r3, r5
   18964:	bl	16e84 <__assert_fail@plt+0x5710>
   18968:	cmp	r0, #0
   1896c:	beq	18980 <__assert_fail@plt+0x720c>
   18970:	mvn	r6, #1
   18974:	cmp	r0, #1
   18978:	mvneq	r6, #0
   1897c:	b	18a98 <__assert_fail@plt+0x7324>
   18980:	cmp	r6, #0
   18984:	beq	18a7c <__assert_fail@plt+0x7308>
   18988:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1898c:	add	r9, sl, #1
   18990:	ldrb	r0, [r0, #28]
   18994:	ubfx	r0, r0, #1, #2
   18998:	cmp	r0, #1
   1899c:	beq	189e8 <__assert_fail@plt+0x7274>
   189a0:	mov	r8, #2
   189a4:	cmp	r0, #0
   189a8:	bne	189f8 <__assert_fail@plt+0x7284>
   189ac:	lsl	r8, r9, #2
   189b0:	mov	r0, r8
   189b4:	bl	23be4 <__assert_fail@plt+0x12470>
   189b8:	mov	r7, #0
   189bc:	cmp	r0, #0
   189c0:	str	r0, [r6, #4]
   189c4:	beq	18a60 <__assert_fail@plt+0x72ec>
   189c8:	mov	r0, r8
   189cc:	bl	23be4 <__assert_fail@plt+0x12470>
   189d0:	cmp	r0, #0
   189d4:	str	r0, [r6, #8]
   189d8:	beq	18b18 <__assert_fail@plt+0x73a4>
   189dc:	str	r9, [r6]
   189e0:	mov	r8, #1
   189e4:	b	189f8 <__assert_fail@plt+0x7284>
   189e8:	ldr	r0, [r6]
   189ec:	mov	r8, #1
   189f0:	cmp	r9, r0
   189f4:	bhi	18ad0 <__assert_fail@plt+0x735c>
   189f8:	cmp	sl, #1
   189fc:	blt	18a2c <__assert_fail@plt+0x72b8>
   18a00:	ldmib	r6, {r1, r2}
   18a04:	add	r0, r4, #4
   18a08:	mov	r3, sl
   18a0c:	ldr	r7, [r0, #-4]
   18a10:	subs	r3, r3, #1
   18a14:	str	r7, [r1], #4
   18a18:	ldr	r7, [r0]
   18a1c:	add	r0, r0, #8
   18a20:	str	r7, [r2], #4
   18a24:	bne	18a0c <__assert_fail@plt+0x7298>
   18a28:	b	18a30 <__assert_fail@plt+0x72bc>
   18a2c:	mov	sl, #0
   18a30:	ldr	r0, [r6]
   18a34:	cmp	sl, r0
   18a38:	bcs	18a5c <__assert_fail@plt+0x72e8>
   18a3c:	ldmib	r6, {r0, r1}
   18a40:	mvn	r2, #0
   18a44:	str	r2, [r1, sl, lsl #2]
   18a48:	str	r2, [r0, sl, lsl #2]
   18a4c:	add	sl, sl, #1
   18a50:	ldr	r3, [r6]
   18a54:	cmp	sl, r3
   18a58:	bcc	18a44 <__assert_fail@plt+0x72d0>
   18a5c:	mov	r7, r8
   18a60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18a64:	cmp	r7, #0
   18a68:	ldrb	r0, [r1, #28]
   18a6c:	and	r0, r0, #249	; 0xf9
   18a70:	orr	r0, r0, r7, lsl #1
   18a74:	strb	r0, [r1, #28]
   18a78:	beq	18a94 <__assert_fail@plt+0x7320>
   18a7c:	ldr	r0, [fp, #20]
   18a80:	cmp	r0, #0
   18a84:	ldreq	r6, [r4]
   18a88:	ldrne	r0, [r4, #4]
   18a8c:	subne	r6, r0, r5
   18a90:	b	18a98 <__assert_fail@plt+0x7324>
   18a94:	mvn	r6, #1
   18a98:	ldr	r5, [sp, #36]	; 0x24
   18a9c:	mov	r0, r4
   18aa0:	bl	13c04 <__assert_fail@plt+0x2490>
   18aa4:	cmp	r5, #0
   18aa8:	beq	18ab8 <__assert_fail@plt+0x7344>
   18aac:	ldr	r0, [sp, #20]
   18ab0:	add	r0, r0, #136	; 0x88
   18ab4:	bl	113c0 <pthread_mutex_unlock@plt>
   18ab8:	mov	r0, r6
   18abc:	sub	sp, fp, #28
   18ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ac4:	ldr	r5, [sp, #36]	; 0x24
   18ac8:	mvn	r6, #1
   18acc:	b	18aa4 <__assert_fail@plt+0x7330>
   18ad0:	ldr	r0, [r6, #4]
   18ad4:	lsl	r1, r9, #2
   18ad8:	str	r1, [sp, #28]
   18adc:	bl	23c14 <__assert_fail@plt+0x124a0>
   18ae0:	mov	r7, #0
   18ae4:	cmp	r0, #0
   18ae8:	str	r0, [sp, #24]
   18aec:	beq	18a60 <__assert_fail@plt+0x72ec>
   18af0:	ldr	r0, [r6, #8]
   18af4:	ldr	r1, [sp, #28]
   18af8:	bl	23c14 <__assert_fail@plt+0x124a0>
   18afc:	cmp	r0, #0
   18b00:	beq	18b24 <__assert_fail@plt+0x73b0>
   18b04:	ldr	r1, [sp, #24]
   18b08:	str	r9, [r6]
   18b0c:	str	r1, [r6, #4]
   18b10:	str	r0, [r6, #8]
   18b14:	b	189f8 <__assert_fail@plt+0x7284>
   18b18:	ldr	r0, [r6, #4]
   18b1c:	bl	13c04 <__assert_fail@plt+0x2490>
   18b20:	b	18a60 <__assert_fail@plt+0x72ec>
   18b24:	ldr	r0, [sp, #24]
   18b28:	b	18b1c <__assert_fail@plt+0x73a8>
   18b2c:	push	{fp, lr}
   18b30:	mov	fp, sp
   18b34:	sub	sp, sp, #16
   18b38:	mov	ip, #0
   18b3c:	str	r2, [sp, #4]
   18b40:	str	ip, [sp, #12]
   18b44:	ldr	ip, [fp, #12]
   18b48:	str	ip, [sp, #8]
   18b4c:	ldr	ip, [fp, #8]
   18b50:	str	ip, [sp]
   18b54:	bl	18810 <__assert_fail@plt+0x709c>
   18b58:	mov	sp, fp
   18b5c:	pop	{fp, pc}
   18b60:	push	{fp, lr}
   18b64:	mov	fp, sp
   18b68:	sub	sp, sp, #24
   18b6c:	mov	ip, #1
   18b70:	str	ip, [sp, #20]
   18b74:	mov	ip, #0
   18b78:	str	ip, [sp, #8]
   18b7c:	ldr	ip, [fp, #20]
   18b80:	str	ip, [sp, #16]
   18b84:	ldr	ip, [fp, #16]
   18b88:	str	ip, [sp, #12]
   18b8c:	ldr	ip, [fp, #12]
   18b90:	str	ip, [sp, #4]
   18b94:	ldr	ip, [fp, #8]
   18b98:	str	ip, [sp]
   18b9c:	bl	18ba8 <__assert_fail@plt+0x7434>
   18ba0:	mov	sp, fp
   18ba4:	pop	{fp, pc}
   18ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bac:	add	fp, sp, #28
   18bb0:	sub	sp, sp, #20
   18bb4:	ldr	r4, [fp, #8]
   18bb8:	mov	r8, r1
   18bbc:	mov	r1, r0
   18bc0:	mov	r6, r2
   18bc4:	orr	r0, r4, r2
   18bc8:	ldr	r2, [fp, #24]
   18bcc:	orr	r0, r0, r2
   18bd0:	cmp	r0, #0
   18bd4:	blt	18c88 <__assert_fail@plt+0x7514>
   18bd8:	adds	sl, r6, r4
   18bdc:	bvs	18c88 <__assert_fail@plt+0x7514>
   18be0:	mov	r5, #0
   18be4:	cmp	r4, #1
   18be8:	blt	18c3c <__assert_fail@plt+0x74c8>
   18bec:	mov	r9, r3
   18bf0:	cmp	r6, #1
   18bf4:	blt	18c44 <__assert_fail@plt+0x74d0>
   18bf8:	mov	r0, sl
   18bfc:	mov	r5, r1
   18c00:	bl	23be4 <__assert_fail@plt+0x12470>
   18c04:	cmp	r0, #0
   18c08:	beq	18c88 <__assert_fail@plt+0x7514>
   18c0c:	mov	r1, r8
   18c10:	mov	r2, r6
   18c14:	mov	r7, r0
   18c18:	bl	1148c <memcpy@plt>
   18c1c:	add	r0, r7, r6
   18c20:	mov	r1, r9
   18c24:	mov	r2, r4
   18c28:	bl	1148c <memcpy@plt>
   18c2c:	ldr	r2, [fp, #24]
   18c30:	mov	r1, r5
   18c34:	mov	r5, r7
   18c38:	b	18c48 <__assert_fail@plt+0x74d4>
   18c3c:	mov	r7, r8
   18c40:	b	18c48 <__assert_fail@plt+0x74d4>
   18c44:	mov	r7, r9
   18c48:	add	r6, fp, #12
   18c4c:	ldr	r0, [fp, #28]
   18c50:	ldm	r6, {r3, r4, r6}
   18c54:	str	r4, [sp]
   18c58:	stmib	sp, {r2, r6}
   18c5c:	str	r0, [sp, #12]
   18c60:	mov	r0, r1
   18c64:	mov	r1, r7
   18c68:	mov	r2, sl
   18c6c:	bl	18810 <__assert_fail@plt+0x709c>
   18c70:	mov	r4, r0
   18c74:	mov	r0, r5
   18c78:	bl	13c04 <__assert_fail@plt+0x2490>
   18c7c:	mov	r0, r4
   18c80:	sub	sp, fp, #28
   18c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c88:	mvn	r0, #1
   18c8c:	sub	sp, fp, #28
   18c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c94:	push	{fp, lr}
   18c98:	mov	fp, sp
   18c9c:	sub	sp, sp, #24
   18ca0:	mov	ip, #0
   18ca4:	str	ip, [sp, #20]
   18ca8:	ldr	ip, [fp, #24]
   18cac:	str	ip, [sp, #16]
   18cb0:	ldr	ip, [fp, #20]
   18cb4:	str	ip, [sp, #12]
   18cb8:	ldr	ip, [fp, #16]
   18cbc:	str	ip, [sp, #8]
   18cc0:	ldr	ip, [fp, #12]
   18cc4:	str	ip, [sp, #4]
   18cc8:	ldr	ip, [fp, #8]
   18ccc:	str	ip, [sp]
   18cd0:	bl	18ba8 <__assert_fail@plt+0x7434>
   18cd4:	mov	sp, fp
   18cd8:	pop	{fp, pc}
   18cdc:	ldrb	ip, [r0, #28]
   18ce0:	cmp	r2, #0
   18ce4:	bic	ip, ip, #6
   18ce8:	orrne	ip, ip, #2
   18cec:	strb	ip, [r0, #28]
   18cf0:	ldr	r0, [sp]
   18cf4:	moveq	r0, r2
   18cf8:	cmp	r2, #0
   18cfc:	moveq	r3, r2
   18d00:	stm	r1, {r2, r3}
   18d04:	str	r0, [r1, #8]
   18d08:	bx	lr
   18d0c:	ldr	r1, [r0, #4]
   18d10:	movw	r2, #255	; 0xff
   18d14:	movt	r2, #4
   18d18:	and	r1, r1, r2
   18d1c:	cmp	r1, #3
   18d20:	beq	18d34 <__assert_fail@plt+0x75c0>
   18d24:	cmp	r1, #6
   18d28:	bxne	lr
   18d2c:	ldr	r0, [r0]
   18d30:	b	18d9c <__assert_fail@plt+0x7628>
   18d34:	ldr	r0, [r0]
   18d38:	b	13c04 <__assert_fail@plt+0x2490>
   18d3c:	push	{r4, sl, fp, lr}
   18d40:	add	fp, sp, #8
   18d44:	mov	r4, r0
   18d48:	ldr	r0, [r0, #24]
   18d4c:	bl	13c04 <__assert_fail@plt+0x2490>
   18d50:	ldr	r0, [r4, #36]	; 0x24
   18d54:	bl	13c04 <__assert_fail@plt+0x2490>
   18d58:	ldr	r0, [r4, #40]	; 0x28
   18d5c:	add	r1, r4, #4
   18d60:	cmp	r0, r1
   18d64:	beq	18d78 <__assert_fail@plt+0x7604>
   18d68:	ldr	r0, [r0, #8]
   18d6c:	bl	13c04 <__assert_fail@plt+0x2490>
   18d70:	ldr	r0, [r4, #40]	; 0x28
   18d74:	bl	13c04 <__assert_fail@plt+0x2490>
   18d78:	ldr	r0, [r4, #12]
   18d7c:	bl	13c04 <__assert_fail@plt+0x2490>
   18d80:	ldr	r0, [r4, #48]	; 0x30
   18d84:	bl	13c04 <__assert_fail@plt+0x2490>
   18d88:	ldr	r0, [r4, #44]	; 0x2c
   18d8c:	bl	13c04 <__assert_fail@plt+0x2490>
   18d90:	mov	r0, r4
   18d94:	pop	{r4, sl, fp, lr}
   18d98:	b	13c04 <__assert_fail@plt+0x2490>
   18d9c:	push	{r4, sl, fp, lr}
   18da0:	add	fp, sp, #8
   18da4:	mov	r4, r0
   18da8:	ldr	r0, [r0]
   18dac:	bl	13c04 <__assert_fail@plt+0x2490>
   18db0:	ldr	r0, [r4, #4]
   18db4:	bl	13c04 <__assert_fail@plt+0x2490>
   18db8:	ldr	r0, [r4, #8]
   18dbc:	bl	13c04 <__assert_fail@plt+0x2490>
   18dc0:	ldr	r0, [r4, #12]
   18dc4:	bl	13c04 <__assert_fail@plt+0x2490>
   18dc8:	mov	r0, r4
   18dcc:	pop	{r4, sl, fp, lr}
   18dd0:	b	13c04 <__assert_fail@plt+0x2490>
   18dd4:	push	{r4, r5, fp, lr}
   18dd8:	add	fp, sp, #8
   18ddc:	ldr	r4, [r0]
   18de0:	ldr	r0, [r4, #56]	; 0x38
   18de4:	cmp	r0, #0
   18de8:	beq	18e00 <__assert_fail@plt+0x768c>
   18dec:	ldr	r5, [r0]
   18df0:	bl	13c04 <__assert_fail@plt+0x2490>
   18df4:	cmp	r5, #0
   18df8:	mov	r0, r5
   18dfc:	bne	18dec <__assert_fail@plt+0x7678>
   18e00:	mov	r0, #31
   18e04:	mov	r5, #0
   18e08:	str	r0, [r4, #64]	; 0x40
   18e0c:	str	r5, [r4, #52]	; 0x34
   18e10:	str	r5, [r4, #56]	; 0x38
   18e14:	ldr	r0, [r4, #16]
   18e18:	bl	13c04 <__assert_fail@plt+0x2490>
   18e1c:	str	r5, [r4, #16]
   18e20:	pop	{r4, r5, fp, pc}
   18e24:	push	{r4, sl, fp, lr}
   18e28:	add	fp, sp, #8
   18e2c:	mov	r4, r0
   18e30:	ldr	r0, [r0, #8]
   18e34:	bl	13c04 <__assert_fail@plt+0x2490>
   18e38:	ldr	r0, [r4, #12]
   18e3c:	bl	13c04 <__assert_fail@plt+0x2490>
   18e40:	ldrb	r0, [r4, #75]	; 0x4b
   18e44:	cmp	r0, #0
   18e48:	popeq	{r4, sl, fp, pc}
   18e4c:	ldr	r0, [r4, #4]
   18e50:	pop	{r4, sl, fp, lr}
   18e54:	b	13c04 <__assert_fail@plt+0x2490>
   18e58:	push	{r4, r5, r6, r7, fp, lr}
   18e5c:	add	fp, sp, #16
   18e60:	mov	r5, r0
   18e64:	ldr	r0, [r0, #80]	; 0x50
   18e68:	mov	r4, r1
   18e6c:	cmp	r0, #2
   18e70:	blt	18ebc <__assert_fail@plt+0x7748>
   18e74:	mov	r6, #12
   18e78:	cmn	r4, #-1073741823	; 0xc0000001
   18e7c:	bhi	18ee8 <__assert_fail@plt+0x7774>
   18e80:	ldr	r0, [r5, #8]
   18e84:	lsl	r7, r4, #2
   18e88:	mov	r1, r7
   18e8c:	bl	23c14 <__assert_fail@plt+0x124a0>
   18e90:	cmp	r0, #0
   18e94:	beq	18ee8 <__assert_fail@plt+0x7774>
   18e98:	str	r0, [r5, #8]
   18e9c:	ldr	r0, [r5, #12]
   18ea0:	cmp	r0, #0
   18ea4:	beq	18ebc <__assert_fail@plt+0x7748>
   18ea8:	mov	r1, r7
   18eac:	bl	23c14 <__assert_fail@plt+0x124a0>
   18eb0:	cmp	r0, #0
   18eb4:	beq	18ee8 <__assert_fail@plt+0x7774>
   18eb8:	str	r0, [r5, #12]
   18ebc:	ldrb	r0, [r5, #75]	; 0x4b
   18ec0:	cmp	r0, #0
   18ec4:	beq	18ee0 <__assert_fail@plt+0x776c>
   18ec8:	ldr	r0, [r5, #4]
   18ecc:	mov	r1, r4
   18ed0:	bl	23c14 <__assert_fail@plt+0x124a0>
   18ed4:	cmp	r0, #0
   18ed8:	beq	18ef0 <__assert_fail@plt+0x777c>
   18edc:	str	r0, [r5, #4]
   18ee0:	mov	r6, #0
   18ee4:	str	r4, [r5, #36]	; 0x24
   18ee8:	mov	r0, r6
   18eec:	pop	{r4, r5, r6, r7, fp, pc}
   18ef0:	mov	r6, #12
   18ef4:	b	18ee8 <__assert_fail@plt+0x7774>
   18ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18efc:	add	fp, sp, #28
   18f00:	sub	sp, sp, #92	; 0x5c
   18f04:	mov	r4, r0
   18f08:	ldrb	r0, [r0, #74]	; 0x4a
   18f0c:	ldr	r2, [r4, #36]	; 0x24
   18f10:	ldr	r1, [r4, #48]	; 0x30
   18f14:	ldr	r5, [r4, #28]
   18f18:	cmp	r2, r1
   18f1c:	movgt	r2, r1
   18f20:	cmp	r0, #0
   18f24:	str	r2, [sp, #4]
   18f28:	bne	18f48 <__assert_fail@plt+0x77d4>
   18f2c:	mov	r8, r4
   18f30:	ldr	r0, [r8, #64]!	; 0x40
   18f34:	cmp	r0, #0
   18f38:	bne	18f48 <__assert_fail@plt+0x77d4>
   18f3c:	ldrb	r0, [r4, #76]	; 0x4c
   18f40:	cmp	r0, #0
   18f44:	beq	18f50 <__assert_fail@plt+0x77dc>
   18f48:	ldr	r7, [r4, #32]
   18f4c:	b	1911c <__assert_fail@plt+0x79a8>
   18f50:	ldr	r0, [sp, #4]
   18f54:	cmp	r0, r5
   18f58:	ble	18f68 <__assert_fail@plt+0x77f4>
   18f5c:	add	r9, r4, #16
   18f60:	mov	sl, r5
   18f64:	b	18fbc <__assert_fail@plt+0x7848>
   18f68:	mov	sl, r5
   18f6c:	mov	r7, r5
   18f70:	b	19228 <__assert_fail@plt+0x7ab4>
   18f74:	add	r0, r5, #1
   18f78:	cmp	r0, #2
   18f7c:	bcc	18f90 <__assert_fail@plt+0x781c>
   18f80:	ldr	r0, [r4, #36]	; 0x24
   18f84:	ldr	r1, [r4, #48]	; 0x30
   18f88:	cmp	r0, r1
   18f8c:	blt	19108 <__assert_fail@plt+0x7994>
   18f90:	ldr	r0, [r4, #4]
   18f94:	cmn	r5, #1
   18f98:	strb	sl, [r0, r7]
   18f9c:	ldr	r0, [r4, #8]
   18fa0:	str	sl, [r0, r7, lsl #2]
   18fa4:	add	sl, r7, #1
   18fa8:	bne	190ec <__assert_fail@plt+0x7978>
   18fac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18fb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18fb4:	stm	r9, {r0, r1}
   18fb8:	b	190ec <__assert_fail@plt+0x7978>
   18fbc:	ldr	r7, [r4, #24]
   18fc0:	ldr	r5, [r4]
   18fc4:	mov	r6, sl
   18fc8:	add	r0, r7, sl
   18fcc:	ldrb	sl, [r5, r0]
   18fd0:	tst	sl, #128	; 0x80
   18fd4:	bne	19018 <__assert_fail@plt+0x78a4>
   18fd8:	mov	r0, r9
   18fdc:	bl	114bc <mbsinit@plt>
   18fe0:	cmp	r0, #0
   18fe4:	beq	19018 <__assert_fail@plt+0x78a4>
   18fe8:	mov	r0, sl
   18fec:	bl	1172c <towupper@plt>
   18ff0:	cmp	r0, #128	; 0x80
   18ff4:	bcs	19010 <__assert_fail@plt+0x789c>
   18ff8:	ldr	r1, [r4, #4]
   18ffc:	add	sl, r6, #1
   19000:	strb	r0, [r1, r6]
   19004:	ldr	r1, [r4, #8]
   19008:	str	r0, [r1, r6, lsl #2]
   1900c:	b	190ec <__assert_fail@plt+0x7978>
   19010:	ldr	r5, [r4]
   19014:	ldr	r7, [r4, #24]
   19018:	ldm	r9, {r0, r1}
   1901c:	mov	r3, r9
   19020:	str	r0, [fp, #-40]	; 0xffffffd8
   19024:	ldr	r0, [sp, #4]
   19028:	str	r1, [fp, #-36]	; 0xffffffdc
   1902c:	sub	r2, r0, r6
   19030:	add	r0, r5, r7
   19034:	mov	r7, r6
   19038:	add	r1, r0, r6
   1903c:	add	r0, sp, #12
   19040:	bl	23fb0 <__assert_fail@plt+0x1283c>
   19044:	mov	r5, r0
   19048:	sub	r0, r0, #1
   1904c:	cmn	r0, #4
   19050:	bhi	18f74 <__assert_fail@plt+0x7800>
   19054:	ldr	r0, [sp, #12]
   19058:	bl	1172c <towupper@plt>
   1905c:	mov	r6, r0
   19060:	ldr	r0, [sp, #12]
   19064:	cmp	r6, r0
   19068:	bne	19088 <__assert_fail@plt+0x7914>
   1906c:	ldr	r1, [r4]
   19070:	ldr	r2, [r4, #24]
   19074:	ldr	r0, [r4, #4]
   19078:	add	r1, r1, r2
   1907c:	add	r0, r0, r7
   19080:	add	r1, r1, r7
   19084:	b	190b0 <__assert_fail@plt+0x793c>
   19088:	add	sl, sp, #16
   1908c:	mov	r1, r6
   19090:	sub	r2, fp, #40	; 0x28
   19094:	mov	r0, sl
   19098:	bl	11408 <wcrtomb@plt>
   1909c:	cmp	r5, r0
   190a0:	bne	19100 <__assert_fail@plt+0x798c>
   190a4:	ldr	r0, [r4, #4]
   190a8:	mov	r1, sl
   190ac:	add	r0, r0, r7
   190b0:	mov	r2, r5
   190b4:	bl	1148c <memcpy@plt>
   190b8:	ldr	r0, [r4, #8]
   190bc:	add	sl, r7, #1
   190c0:	str	r6, [r0, r7, lsl #2]
   190c4:	add	r6, r5, r7
   190c8:	cmp	sl, r6
   190cc:	bge	190ec <__assert_fail@plt+0x7978>
   190d0:	add	r0, r0, r7, lsl #2
   190d4:	mvn	r1, #3
   190d8:	add	r2, r1, r5, lsl #2
   190dc:	add	r0, r0, #4
   190e0:	mov	r1, #255	; 0xff
   190e4:	bl	11660 <memset@plt>
   190e8:	mov	sl, r6
   190ec:	ldr	r0, [sp, #4]
   190f0:	mov	r7, sl
   190f4:	cmp	r0, sl
   190f8:	bgt	18fbc <__assert_fail@plt+0x7848>
   190fc:	b	19228 <__assert_fail@plt+0x7ab4>
   19100:	mov	sl, r7
   19104:	b	19134 <__assert_fail@plt+0x79c0>
   19108:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1910c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19110:	mov	sl, r7
   19114:	stm	r9, {r0, r1}
   19118:	b	19228 <__assert_fail@plt+0x7ab4>
   1911c:	ldr	r0, [sp, #4]
   19120:	cmp	r5, r0
   19124:	bge	19224 <__assert_fail@plt+0x7ab0>
   19128:	add	r8, r4, #64	; 0x40
   1912c:	add	r9, r4, #16
   19130:	mov	sl, r5
   19134:	ldm	r9, {r0, r1}
   19138:	str	r7, [sp]
   1913c:	str	r0, [fp, #-40]	; 0xffffffd8
   19140:	ldr	r0, [sp, #4]
   19144:	str	r1, [fp, #-36]	; 0xffffffdc
   19148:	sub	r2, r0, sl
   1914c:	ldr	r0, [r8]
   19150:	cmp	r0, #0
   19154:	bne	1923c <__assert_fail@plt+0x7ac8>
   19158:	ldr	r0, [r4]
   1915c:	ldr	r1, [r4, #24]
   19160:	add	r0, r0, r1
   19164:	add	r5, r0, r7
   19168:	add	r0, sp, #8
   1916c:	mov	r1, r5
   19170:	mov	r3, r9
   19174:	bl	23fb0 <__assert_fail@plt+0x1283c>
   19178:	sub	r8, r0, #1
   1917c:	mov	r6, r0
   19180:	cmn	r8, #4
   19184:	bhi	19290 <__assert_fail@plt+0x7b1c>
   19188:	ldr	r0, [sp, #8]
   1918c:	bl	1172c <towupper@plt>
   19190:	mov	r7, r0
   19194:	ldr	r0, [sp, #8]
   19198:	cmp	r7, r0
   1919c:	bne	191ac <__assert_fail@plt+0x7a38>
   191a0:	ldr	r0, [r4, #4]
   191a4:	mov	r1, r5
   191a8:	b	191cc <__assert_fail@plt+0x7a58>
   191ac:	add	r0, sp, #16
   191b0:	sub	r2, fp, #40	; 0x28
   191b4:	mov	r1, r7
   191b8:	bl	11408 <wcrtomb@plt>
   191bc:	cmp	r0, r6
   191c0:	bne	1930c <__assert_fail@plt+0x7b98>
   191c4:	ldr	r0, [r4, #4]
   191c8:	add	r1, sp, #16
   191cc:	add	r0, r0, sl
   191d0:	mov	r2, r6
   191d4:	bl	1148c <memcpy@plt>
   191d8:	ldrb	r0, [r4, #76]	; 0x4c
   191dc:	cmp	r0, #0
   191e0:	bne	19428 <__assert_fail@plt+0x7cb4>
   191e4:	ldr	r0, [r4, #8]
   191e8:	add	r5, r6, sl
   191ec:	add	r1, sl, #1
   191f0:	cmp	r1, r5
   191f4:	str	r7, [r0, sl, lsl #2]
   191f8:	ldr	r7, [sp]
   191fc:	add	r7, r6, r7
   19200:	bge	1921c <__assert_fail@plt+0x7aa8>
   19204:	add	r0, r0, r1, lsl #2
   19208:	mvn	r1, #3
   1920c:	add	r2, r1, r6, lsl #2
   19210:	mov	r1, #255	; 0xff
   19214:	bl	11660 <memset@plt>
   19218:	b	1911c <__assert_fail@plt+0x79a8>
   1921c:	mov	r5, r1
   19220:	b	1911c <__assert_fail@plt+0x79a8>
   19224:	mov	sl, r5
   19228:	mov	r0, #0
   1922c:	str	sl, [r4, #28]
   19230:	str	r7, [r4, #32]
   19234:	sub	sp, fp, #28
   19238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1923c:	cmp	r2, #1
   19240:	add	r5, sp, #16
   19244:	ldrge	r1, [r4, #80]	; 0x50
   19248:	cmpge	r1, #1
   1924c:	blt	19168 <__assert_fail@plt+0x79f4>
   19250:	mov	r6, r7
   19254:	ldr	r7, [r4, #24]
   19258:	ldr	r3, [r4]
   1925c:	add	r5, sp, #16
   19260:	add	r7, r6, r7
   19264:	add	r3, r3, r7
   19268:	mov	r7, #0
   1926c:	ldrb	r6, [r3, r7]
   19270:	ldrb	r6, [r0, r6]
   19274:	strb	r6, [r5, r7]
   19278:	add	r7, r7, #1
   1927c:	cmp	r7, r2
   19280:	bge	19168 <__assert_fail@plt+0x79f4>
   19284:	cmp	r7, r1
   19288:	blt	1926c <__assert_fail@plt+0x7af8>
   1928c:	b	19168 <__assert_fail@plt+0x79f4>
   19290:	add	r0, r6, #1
   19294:	cmp	r0, #2
   19298:	bcc	192ac <__assert_fail@plt+0x7b38>
   1929c:	ldr	r0, [r4, #36]	; 0x24
   192a0:	ldr	r1, [r4, #48]	; 0x30
   192a4:	cmp	r0, r1
   192a8:	blt	1944c <__assert_fail@plt+0x7cd8>
   192ac:	ldr	r2, [r4, #24]
   192b0:	ldr	r7, [sp]
   192b4:	ldr	r0, [r4]
   192b8:	ldr	r1, [r4, #64]	; 0x40
   192bc:	add	r5, sl, #1
   192c0:	add	r2, r2, r7
   192c4:	cmp	r1, #0
   192c8:	ldrb	r0, [r0, r2]
   192cc:	ldrbne	r0, [r1, r0]
   192d0:	ldr	r1, [r4, #4]
   192d4:	strb	r0, [r1, sl]
   192d8:	ldrb	r1, [r4, #76]	; 0x4c
   192dc:	cmp	r1, #0
   192e0:	ldrne	r1, [r4, #12]
   192e4:	strne	r7, [r1, sl, lsl #2]
   192e8:	add	r7, r7, #1
   192ec:	cmn	r6, #1
   192f0:	ldr	r1, [r4, #8]
   192f4:	str	r0, [r1, sl, lsl #2]
   192f8:	bne	1911c <__assert_fail@plt+0x79a8>
   192fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19300:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19304:	stm	r9, {r0, r1}
   19308:	b	1911c <__assert_fail@plt+0x79a8>
   1930c:	mov	r2, r0
   19310:	cmn	r0, #1
   19314:	beq	191a0 <__assert_fail@plt+0x7a2c>
   19318:	ldr	r1, [r4, #36]	; 0x24
   1931c:	add	r5, r2, sl
   19320:	cmp	r5, r1
   19324:	bhi	1944c <__assert_fail@plt+0x7cd8>
   19328:	ldr	r0, [r4, #12]
   1932c:	cmp	r0, #0
   19330:	bne	19350 <__assert_fail@plt+0x7bdc>
   19334:	lsl	r0, r1, #2
   19338:	mov	r9, r2
   1933c:	bl	23be4 <__assert_fail@plt+0x12470>
   19340:	mov	r2, r9
   19344:	cmp	r0, #0
   19348:	str	r0, [r4, #12]
   1934c:	beq	19460 <__assert_fail@plt+0x7cec>
   19350:	ldrb	r1, [r4, #76]	; 0x4c
   19354:	cmp	r1, #0
   19358:	bne	19380 <__assert_fail@plt+0x7c0c>
   1935c:	cmp	sl, #0
   19360:	beq	19378 <__assert_fail@plt+0x7c04>
   19364:	mov	r1, #0
   19368:	str	r1, [r0, r1, lsl #2]
   1936c:	add	r1, r1, #1
   19370:	cmp	sl, r1
   19374:	bne	19368 <__assert_fail@plt+0x7bf4>
   19378:	mov	r0, #1
   1937c:	strb	r0, [r4, #76]	; 0x4c
   19380:	ldr	r0, [r4, #4]
   19384:	add	r1, sp, #16
   19388:	mov	r9, r2
   1938c:	add	r0, r0, sl
   19390:	bl	1148c <memcpy@plt>
   19394:	ldr	r1, [r4, #8]
   19398:	ldr	r3, [sp]
   1939c:	mov	lr, r9
   193a0:	cmp	r9, #2
   193a4:	str	r7, [r1, sl, lsl #2]
   193a8:	ldr	r0, [r4, #12]
   193ac:	str	r3, [r0, sl, lsl #2]
   193b0:	bcc	193e8 <__assert_fail@plt+0x7c74>
   193b4:	add	r0, r0, sl, lsl #2
   193b8:	add	r1, r1, sl, lsl #2
   193bc:	mov	r2, #1
   193c0:	mvn	ip, #0
   193c4:	cmp	r2, r6
   193c8:	mov	r7, r8
   193cc:	movcc	r7, r2
   193d0:	add	r7, r7, r3
   193d4:	str	r7, [r0, r2, lsl #2]
   193d8:	str	ip, [r1, r2, lsl #2]
   193dc:	add	r2, r2, #1
   193e0:	cmp	lr, r2
   193e4:	bne	193c4 <__assert_fail@plt+0x7c50>
   193e8:	ldr	r0, [r4, #48]	; 0x30
   193ec:	ldr	r2, [r4, #52]	; 0x34
   193f0:	sub	r1, lr, r6
   193f4:	mov	r7, r3
   193f8:	add	r7, r6, r7
   193fc:	add	r0, r0, r1
   19400:	cmp	r2, r3
   19404:	str	r0, [r4, #48]	; 0x30
   19408:	ldrgt	r2, [r4, #56]	; 0x38
   1940c:	addgt	r1, r2, r1
   19410:	strgt	r1, [r4, #56]	; 0x38
   19414:	ldr	r1, [r4, #36]	; 0x24
   19418:	cmp	r1, r0
   1941c:	movgt	r1, r0
   19420:	str	r1, [sp, #4]
   19424:	b	1911c <__assert_fail@plt+0x79a8>
   19428:	ldr	r0, [r4, #12]
   1942c:	ldr	r1, [sp]
   19430:	mov	r2, r6
   19434:	add	r0, r0, sl, lsl #2
   19438:	str	r1, [r0], #4
   1943c:	add	r1, r1, #1
   19440:	subs	r2, r2, #1
   19444:	bne	19438 <__assert_fail@plt+0x7cc4>
   19448:	b	191e4 <__assert_fail@plt+0x7a70>
   1944c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19450:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19454:	stm	r9, {r0, r1}
   19458:	ldr	r7, [sp]
   1945c:	b	19228 <__assert_fail@plt+0x7ab4>
   19460:	mov	r0, #12
   19464:	b	19234 <__assert_fail@plt+0x7ac0>
   19468:	push	{r4, r5, r6, sl, fp, lr}
   1946c:	add	fp, sp, #16
   19470:	mov	r4, r0
   19474:	ldr	r5, [r0, #28]
   19478:	ldr	r6, [r0, #36]	; 0x24
   1947c:	ldr	r0, [r0, #48]	; 0x30
   19480:	cmp	r6, r0
   19484:	movgt	r6, r0
   19488:	cmp	r5, r6
   1948c:	bge	194c8 <__assert_fail@plt+0x7d54>
   19490:	ldr	r0, [r4]
   19494:	ldr	r2, [r4, #24]
   19498:	ldr	r1, [r4, #64]	; 0x40
   1949c:	add	r0, r0, r2
   194a0:	cmp	r1, #0
   194a4:	ldrb	r0, [r0, r5]
   194a8:	ldrbne	r0, [r1, r0]
   194ac:	bl	116f0 <toupper@plt>
   194b0:	ldr	r1, [r4, #4]
   194b4:	strb	r0, [r1, r5]
   194b8:	add	r5, r5, #1
   194bc:	cmp	r5, r6
   194c0:	blt	19490 <__assert_fail@plt+0x7d1c>
   194c4:	mov	r5, r6
   194c8:	str	r5, [r4, #28]
   194cc:	str	r5, [r4, #32]
   194d0:	pop	{r4, r5, r6, sl, fp, pc}
   194d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194d8:	add	fp, sp, #28
   194dc:	sub	sp, sp, #68	; 0x44
   194e0:	mov	r4, r0
   194e4:	ldr	r6, [r0, #28]
   194e8:	ldr	r7, [r0, #36]	; 0x24
   194ec:	ldr	r0, [r0, #48]	; 0x30
   194f0:	cmp	r7, r0
   194f4:	movgt	r7, r0
   194f8:	cmp	r7, r6
   194fc:	ble	1969c <__assert_fail@plt+0x7f28>
   19500:	add	r8, r4, #16
   19504:	mov	r5, sp
   19508:	ldm	r8, {r9, sl}
   1950c:	ldr	r0, [r4, #64]	; 0x40
   19510:	sub	r2, r7, r6
   19514:	cmp	r0, #0
   19518:	bne	195e8 <__assert_fail@plt+0x7e74>
   1951c:	ldr	r0, [r4]
   19520:	ldr	r1, [r4, #24]
   19524:	add	r0, r0, r1
   19528:	add	r1, r0, r6
   1952c:	mov	r0, r5
   19530:	mov	r3, r8
   19534:	bl	23fb0 <__assert_fail@plt+0x1283c>
   19538:	add	r1, r0, #1
   1953c:	cmp	r1, #2
   19540:	bcc	1955c <__assert_fail@plt+0x7de8>
   19544:	cmn	r0, #2
   19548:	bne	19598 <__assert_fail@plt+0x7e24>
   1954c:	ldr	r0, [r4, #36]	; 0x24
   19550:	ldr	r1, [r4, #48]	; 0x30
   19554:	cmp	r0, r1
   19558:	blt	19698 <__assert_fail@plt+0x7f24>
   1955c:	ldr	r1, [r4, #24]
   19560:	ldr	r0, [r4]
   19564:	mov	r2, sl
   19568:	mov	sl, r5
   1956c:	add	r1, r1, r6
   19570:	ldrb	r1, [r0, r1]
   19574:	str	r1, [sp]
   19578:	ldr	r0, [r4, #64]	; 0x40
   1957c:	cmp	r0, #0
   19580:	ldrbne	r1, [r0, r1]
   19584:	mov	r0, #1
   19588:	strne	r1, [sp]
   1958c:	str	r9, [r8]
   19590:	str	r2, [r8, #4]
   19594:	b	195a0 <__assert_fail@plt+0x7e2c>
   19598:	ldr	r1, [sp]
   1959c:	mov	sl, r5
   195a0:	ldr	r3, [r4, #8]
   195a4:	add	r5, r0, r6
   195a8:	str	r1, [r3, r6, lsl #2]
   195ac:	add	r1, r6, #1
   195b0:	cmp	r1, r5
   195b4:	bge	195d4 <__assert_fail@plt+0x7e60>
   195b8:	mvn	r1, #3
   195bc:	add	r2, r1, r0, lsl #2
   195c0:	add	r0, r3, r6, lsl #2
   195c4:	mov	r1, #255	; 0xff
   195c8:	add	r0, r0, #4
   195cc:	bl	11660 <memset@plt>
   195d0:	mov	r1, r5
   195d4:	cmp	r7, r1
   195d8:	mov	r6, r1
   195dc:	mov	r5, sl
   195e0:	bgt	19508 <__assert_fail@plt+0x7d94>
   195e4:	b	196a0 <__assert_fail@plt+0x7f2c>
   195e8:	cmp	r2, #1
   195ec:	add	r1, sp, #4
   195f0:	blt	1952c <__assert_fail@plt+0x7db8>
   195f4:	ldr	r1, [r4, #80]	; 0x50
   195f8:	cmp	r1, #1
   195fc:	add	r1, sp, #4
   19600:	blt	1952c <__assert_fail@plt+0x7db8>
   19604:	ldm	r4, {r1, r3}
   19608:	mov	lr, r5
   1960c:	ldr	r5, [r4, #24]
   19610:	cmp	r2, #2
   19614:	add	r5, r6, r5
   19618:	ldrb	r1, [r1, r5]
   1961c:	mov	r5, lr
   19620:	ldrb	r0, [r0, r1]
   19624:	add	r1, sp, #4
   19628:	strb	r0, [r3, r6]
   1962c:	strb	r0, [sp, #4]
   19630:	blt	1952c <__assert_fail@plt+0x7db8>
   19634:	ldr	r0, [r4, #80]	; 0x50
   19638:	add	r1, sp, #4
   1963c:	cmp	r0, #2
   19640:	blt	1952c <__assert_fail@plt+0x7db8>
   19644:	mov	r0, #1
   19648:	ldm	r4, {r1, ip}
   1964c:	ldr	r5, [r4, #24]
   19650:	ldr	r3, [r4, #64]	; 0x40
   19654:	add	r1, r1, r5
   19658:	add	r1, r1, r6
   1965c:	ldrb	r1, [r1, r0]
   19660:	ldrb	r1, [r3, r1]
   19664:	add	r3, ip, r6
   19668:	strb	r1, [r3, r0]
   1966c:	add	r3, sp, #4
   19670:	strb	r1, [r3, r0]
   19674:	add	r0, r0, #1
   19678:	cmp	r0, r2
   1967c:	bge	1968c <__assert_fail@plt+0x7f18>
   19680:	ldr	r1, [r4, #80]	; 0x50
   19684:	cmp	r0, r1
   19688:	blt	19648 <__assert_fail@plt+0x7ed4>
   1968c:	add	r1, sp, #4
   19690:	mov	r5, lr
   19694:	b	1952c <__assert_fail@plt+0x7db8>
   19698:	stm	r8, {r9, sl}
   1969c:	mov	r1, r6
   196a0:	str	r1, [r4, #28]
   196a4:	str	r1, [r4, #32]
   196a8:	sub	sp, fp, #28
   196ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196b0:	ldr	ip, [r0, #36]	; 0x24
   196b4:	ldr	r3, [r0, #48]	; 0x30
   196b8:	ldr	r1, [r0, #28]
   196bc:	cmp	ip, r3
   196c0:	movgt	ip, r3
   196c4:	cmp	r1, ip
   196c8:	bge	19704 <__assert_fail@plt+0x7f90>
   196cc:	push	{r4, sl, fp, lr}
   196d0:	add	fp, sp, #8
   196d4:	ldm	r0, {r3, lr}
   196d8:	ldr	r2, [r0, #24]
   196dc:	ldr	r4, [r0, #64]	; 0x40
   196e0:	add	r2, r3, r2
   196e4:	ldrb	r2, [r2, r1]
   196e8:	ldrb	r2, [r4, r2]
   196ec:	strb	r2, [lr, r1]
   196f0:	add	r1, r1, #1
   196f4:	cmp	r1, ip
   196f8:	blt	196d4 <__assert_fail@plt+0x7f60>
   196fc:	mov	r1, ip
   19700:	pop	{r4, sl, fp, lr}
   19704:	str	r1, [r0, #28]
   19708:	str	r1, [r0, #32]
   1970c:	bx	lr
   19710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19714:	add	fp, sp, #28
   19718:	sub	sp, sp, #28
   1971c:	ldr	r9, [r1]
   19720:	mov	r5, r0
   19724:	ldr	r8, [fp, #12]
   19728:	mov	r6, r2
   1972c:	str	r1, [sp, #12]
   19730:	str	r3, [sp, #16]
   19734:	ldr	r0, [r9, #84]	; 0x54
   19738:	str	r8, [sp, #4]
   1973c:	str	r0, [sp, #8]
   19740:	ldr	r0, [fp, #8]
   19744:	str	r0, [sp]
   19748:	mov	r0, r5
   1974c:	bl	19f4c <__assert_fail@plt+0x87d8>
   19750:	mov	r4, r0
   19754:	cmp	r0, #0
   19758:	bne	19768 <__assert_fail@plt+0x7ff4>
   1975c:	ldr	r0, [r8]
   19760:	cmp	r0, #0
   19764:	bne	19858 <__assert_fail@plt+0x80e4>
   19768:	ldr	r0, [sp, #16]
   1976c:	ldr	r8, [fp, #8]
   19770:	mov	r7, #10
   19774:	orr	sl, r0, #8388608	; 0x800000
   19778:	ldrb	r0, [r6, #4]
   1977c:	cmp	r0, #10
   19780:	bne	1985c <__assert_fail@plt+0x80e8>
   19784:	mov	r0, r6
   19788:	mov	r1, r5
   1978c:	mov	r2, sl
   19790:	bl	198c0 <__assert_fail@plt+0x814c>
   19794:	ldr	r1, [r5, #40]	; 0x28
   19798:	mov	r2, #0
   1979c:	add	r0, r1, r0
   197a0:	str	r0, [r5, #40]	; 0x28
   197a4:	ldrb	r0, [r6, #4]
   197a8:	orr	r1, r0, #8
   197ac:	cmp	r1, #10
   197b0:	bne	197e0 <__assert_fail@plt+0x806c>
   197b4:	mov	r0, #0
   197b8:	str	r7, [sp, #24]
   197bc:	mov	r1, r4
   197c0:	add	r3, sp, #20
   197c4:	str	r0, [sp, #20]
   197c8:	mov	r0, r9
   197cc:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   197d0:	mov	r4, r0
   197d4:	cmp	r0, #0
   197d8:	bne	19778 <__assert_fail@plt+0x8004>
   197dc:	b	1984c <__assert_fail@plt+0x80d8>
   197e0:	cmp	r8, #0
   197e4:	beq	197f0 <__assert_fail@plt+0x807c>
   197e8:	cmp	r0, #9
   197ec:	beq	197b4 <__assert_fail@plt+0x8040>
   197f0:	ldr	r0, [sp, #8]
   197f4:	ldr	r7, [r9, #84]	; 0x54
   197f8:	ldr	r1, [sp, #12]
   197fc:	ldr	r3, [sp, #16]
   19800:	mov	r2, r6
   19804:	str	r0, [r9, #84]	; 0x54
   19808:	str	r8, [sp]
   1980c:	ldr	r8, [fp, #12]
   19810:	mov	r0, r5
   19814:	str	r8, [sp, #4]
   19818:	bl	19f4c <__assert_fail@plt+0x87d8>
   1981c:	mov	r2, r0
   19820:	cmp	r0, #0
   19824:	bne	19834 <__assert_fail@plt+0x80c0>
   19828:	ldr	r0, [r8]
   1982c:	cmp	r0, #0
   19830:	bne	19868 <__assert_fail@plt+0x80f4>
   19834:	ldr	r0, [r9, #84]	; 0x54
   19838:	ldr	r8, [fp, #8]
   1983c:	orr	r0, r0, r7
   19840:	mov	r7, #10
   19844:	str	r0, [r9, #84]	; 0x54
   19848:	b	197b4 <__assert_fail@plt+0x8040>
   1984c:	ldr	r1, [fp, #12]
   19850:	mov	r0, #12
   19854:	str	r0, [r1]
   19858:	mov	r4, #0
   1985c:	mov	r0, r4
   19860:	sub	sp, fp, #28
   19864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19868:	cmp	r4, #0
   1986c:	beq	19858 <__assert_fail@plt+0x80e4>
   19870:	mov	r5, r4
   19874:	ldr	r4, [r4, #4]
   19878:	cmp	r4, #0
   1987c:	bne	19870 <__assert_fail@plt+0x80fc>
   19880:	ldr	r4, [r5, #8]
   19884:	cmp	r4, #0
   19888:	bne	19870 <__assert_fail@plt+0x80fc>
   1988c:	add	r0, r5, #20
   19890:	bl	18d0c <__assert_fail@plt+0x7598>
   19894:	ldr	r0, [r5]
   19898:	cmp	r0, #0
   1989c:	beq	19858 <__assert_fail@plt+0x80e4>
   198a0:	ldr	r4, [r0, #8]
   198a4:	cmp	r4, r5
   198a8:	mov	r5, r0
   198ac:	beq	1988c <__assert_fail@plt+0x8118>
   198b0:	cmp	r4, #0
   198b4:	mov	r5, r0
   198b8:	beq	1988c <__assert_fail@plt+0x8118>
   198bc:	b	19870 <__assert_fail@plt+0x80fc>
   198c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   198c4:	add	fp, sp, #24
   198c8:	sub	sp, sp, #8
   198cc:	mov	r9, r0
   198d0:	mov	r7, r1
   198d4:	ldr	r0, [r1, #40]	; 0x28
   198d8:	ldr	r1, [r1, #56]	; 0x38
   198dc:	cmp	r1, r0
   198e0:	ble	199c8 <__assert_fail@plt+0x8254>
   198e4:	ldr	r1, [r7, #4]
   198e8:	mov	r5, r9
   198ec:	mov	r8, r2
   198f0:	ldrb	r6, [r1, r0]
   198f4:	strb	r6, [r5], #4
   198f8:	ldr	r0, [r5]
   198fc:	bic	r1, r0, #6291456	; 0x600000
   19900:	str	r1, [r5]
   19904:	ldr	r3, [r7, #80]	; 0x50
   19908:	cmp	r3, #2
   1990c:	blt	19930 <__assert_fail@plt+0x81bc>
   19910:	ldr	r2, [r7, #28]
   19914:	ldr	r1, [r7, #40]	; 0x28
   19918:	cmp	r1, r2
   1991c:	beq	19930 <__assert_fail@plt+0x81bc>
   19920:	ldr	r2, [r7, #8]
   19924:	ldr	r1, [r2, r1, lsl #2]
   19928:	cmn	r1, #1
   1992c:	beq	19c84 <__assert_fail@plt+0x8510>
   19930:	movw	r1, #65280	; 0xff00
   19934:	cmp	r6, #92	; 0x5c
   19938:	movt	r1, #65439	; 0xff9f
   1993c:	bne	199d8 <__assert_fail@plt+0x8264>
   19940:	ldr	r6, [r7, #40]	; 0x28
   19944:	ldr	r4, [r7, #48]	; 0x30
   19948:	add	r2, r6, #1
   1994c:	cmp	r2, r4
   19950:	bge	19a2c <__assert_fail@plt+0x82b8>
   19954:	ldrb	r4, [r7, #75]	; 0x4b
   19958:	cmp	r4, #0
   1995c:	bne	19edc <__assert_fail@plt+0x8768>
   19960:	ldr	r3, [r7, #4]
   19964:	ldrb	r6, [r3, r2]
   19968:	and	r0, r0, r1
   1996c:	strb	r6, [r9]
   19970:	orr	r4, r0, #1
   19974:	str	r4, [r9, #4]
   19978:	ldr	r0, [r7, #80]	; 0x50
   1997c:	cmp	r0, #2
   19980:	blt	19b3c <__assert_fail@plt+0x83c8>
   19984:	ldr	r0, [r7, #8]
   19988:	ldr	r1, [r7, #40]	; 0x28
   1998c:	add	r0, r0, r1, lsl #2
   19990:	ldr	r4, [r0, #4]
   19994:	mov	r0, r4
   19998:	bl	1163c <iswalnum@plt>
   1999c:	sub	r1, r4, #95	; 0x5f
   199a0:	cmp	r0, #0
   199a4:	clz	r1, r1
   199a8:	movwne	r0, #1
   199ac:	lsr	r1, r1, #5
   199b0:	orr	r0, r1, r0
   199b4:	ldr	r1, [r5]
   199b8:	bic	r1, r1, #4194304	; 0x400000
   199bc:	orr	r0, r1, r0, lsl #22
   199c0:	uxtb	r1, r6
   199c4:	b	19b60 <__assert_fail@plt+0x83ec>
   199c8:	mov	r0, #2
   199cc:	mov	r4, #0
   199d0:	strb	r0, [r9, #4]
   199d4:	b	19eb0 <__assert_fail@plt+0x873c>
   199d8:	and	r0, r0, r1
   199dc:	orr	r4, r0, #1
   199e0:	str	r4, [r5]
   199e4:	ldr	r0, [r7, #80]	; 0x50
   199e8:	cmp	r0, #2
   199ec:	blt	19a38 <__assert_fail@plt+0x82c4>
   199f0:	ldr	r0, [r7, #8]
   199f4:	ldr	r1, [r7, #40]	; 0x28
   199f8:	ldr	r4, [r0, r1, lsl #2]
   199fc:	mov	r0, r4
   19a00:	bl	1163c <iswalnum@plt>
   19a04:	sub	r1, r4, #95	; 0x5f
   19a08:	cmp	r0, #0
   19a0c:	clz	r1, r1
   19a10:	movwne	r0, #1
   19a14:	lsr	r1, r1, #5
   19a18:	orr	r0, r1, r0
   19a1c:	ldr	r1, [r5]
   19a20:	bic	r1, r1, #4194304	; 0x400000
   19a24:	orr	r0, r1, r0, lsl #22
   19a28:	b	19a58 <__assert_fail@plt+0x82e4>
   19a2c:	and	r0, r0, r1
   19a30:	orr	r0, r0, #36	; 0x24
   19a34:	b	19c98 <__assert_fail@plt+0x8524>
   19a38:	bl	11600 <__ctype_b_loc@plt>
   19a3c:	ldr	r0, [r0]
   19a40:	cmp	r6, #95	; 0x5f
   19a44:	add	r0, r0, r6, lsl #1
   19a48:	ldrh	r0, [r0]
   19a4c:	ubfx	r0, r0, #3, #1
   19a50:	movweq	r0, #1
   19a54:	orr	r0, r4, r0, lsl #22
   19a58:	mov	r4, #1
   19a5c:	cmp	r6, #62	; 0x3e
   19a60:	str	r0, [r5]
   19a64:	bgt	19b00 <__assert_fail@plt+0x838c>
   19a68:	sub	r1, r6, #36	; 0x24
   19a6c:	cmp	r1, #10
   19a70:	bhi	19cf4 <__assert_fail@plt+0x8580>
   19a74:	add	r2, pc, #0
   19a78:	ldr	pc, [r2, r1, lsl #2]
   19a7c:	andeq	r9, r1, r8, lsr #21
   19a80:			; <UNDEFINED> instruction: 0x00019eb0
   19a84:			; <UNDEFINED> instruction: 0x00019eb0
   19a88:			; <UNDEFINED> instruction: 0x00019eb0
   19a8c:	andeq	r9, r1, r8, lsl #26
   19a90:	andeq	r9, r1, r8, lsl sp
   19a94:	andeq	r9, r1, r8, lsr #26
   19a98:	andeq	r9, r1, r0, lsr sp
   19a9c:			; <UNDEFINED> instruction: 0x00019eb0
   19aa0:			; <UNDEFINED> instruction: 0x00019eb0
   19aa4:	andeq	r9, r1, r0, asr #26
   19aa8:	tst	r8, #8
   19aac:	bne	19af8 <__assert_fail@plt+0x8384>
   19ab0:	ldr	r1, [r7, #40]	; 0x28
   19ab4:	ldr	r2, [r7, #48]	; 0x30
   19ab8:	add	r1, r1, #1
   19abc:	cmp	r1, r2
   19ac0:	beq	19af8 <__assert_fail@plt+0x8384>
   19ac4:	str	r1, [r7, #40]	; 0x28
   19ac8:	mov	r0, sp
   19acc:	mov	r1, r7
   19ad0:	mov	r2, r8
   19ad4:	bl	198c0 <__assert_fail@plt+0x814c>
   19ad8:	ldr	r0, [r7, #40]	; 0x28
   19adc:	sub	r0, r0, #1
   19ae0:	str	r0, [r7, #40]	; 0x28
   19ae4:	ldrb	r0, [sp, #4]
   19ae8:	sub	r0, r0, #9
   19aec:	cmp	r0, #1
   19af0:	bhi	19eb0 <__assert_fail@plt+0x873c>
   19af4:	ldr	r0, [r5]
   19af8:	mov	r1, #32
   19afc:	b	19b34 <__assert_fail@plt+0x83c0>
   19b00:	cmp	r6, #122	; 0x7a
   19b04:	bgt	19c5c <__assert_fail@plt+0x84e8>
   19b08:	cmp	r6, #63	; 0x3f
   19b0c:	beq	19d48 <__assert_fail@plt+0x85d4>
   19b10:	cmp	r6, #91	; 0x5b
   19b14:	beq	19d58 <__assert_fail@plt+0x85e4>
   19b18:	cmp	r6, #94	; 0x5e
   19b1c:	bne	19eb0 <__assert_fail@plt+0x873c>
   19b20:	movw	r1, #8
   19b24:	movt	r1, #128	; 0x80
   19b28:	tst	r8, r1
   19b2c:	beq	19da0 <__assert_fail@plt+0x862c>
   19b30:	mov	r1, #16
   19b34:	mov	r2, #12
   19b38:	b	19c4c <__assert_fail@plt+0x84d8>
   19b3c:	bl	11600 <__ctype_b_loc@plt>
   19b40:	ldr	r0, [r0]
   19b44:	uxtb	r1, r6
   19b48:	cmp	r1, #95	; 0x5f
   19b4c:	add	r0, r0, r1, lsl #1
   19b50:	ldrh	r0, [r0]
   19b54:	ubfx	r0, r0, #3, #1
   19b58:	movweq	r0, #1
   19b5c:	orr	r0, r4, r0, lsl #22
   19b60:	uxtb	r2, r6
   19b64:	mov	r4, #2
   19b68:	str	r0, [r5]
   19b6c:	cmp	r2, #95	; 0x5f
   19b70:	bgt	19ca4 <__assert_fail@plt+0x8530>
   19b74:	sub	r3, r2, #39	; 0x27
   19b78:	cmp	r3, #44	; 0x2c
   19b7c:	bhi	19dcc <__assert_fail@plt+0x8658>
   19b80:	add	r2, pc, #0
   19b84:	ldr	pc, [r2, r3, lsl #2]
   19b88:	andeq	r9, r1, r4, lsr lr
   19b8c:	andeq	r9, r1, r4, asr #28
   19b90:	andeq	r9, r1, r0, asr lr
   19b94:			; <UNDEFINED> instruction: 0x00019eb0
   19b98:	andeq	r9, r1, ip, asr lr
   19b9c:			; <UNDEFINED> instruction: 0x00019eb0
   19ba0:			; <UNDEFINED> instruction: 0x00019eb0
   19ba4:			; <UNDEFINED> instruction: 0x00019eb0
   19ba8:			; <UNDEFINED> instruction: 0x00019eb0
   19bac:			; <UNDEFINED> instruction: 0x00019eb0
   19bb0:	andeq	r9, r1, ip, lsr ip
   19bb4:	andeq	r9, r1, ip, lsr ip
   19bb8:	andeq	r9, r1, ip, lsr ip
   19bbc:	andeq	r9, r1, ip, lsr ip
   19bc0:	andeq	r9, r1, ip, lsr ip
   19bc4:	andeq	r9, r1, ip, lsr ip
   19bc8:	andeq	r9, r1, ip, lsr ip
   19bcc:	andeq	r9, r1, ip, lsr ip
   19bd0:	andeq	r9, r1, ip, lsr ip
   19bd4:			; <UNDEFINED> instruction: 0x00019eb0
   19bd8:			; <UNDEFINED> instruction: 0x00019eb0
   19bdc:	andeq	r9, r1, r4, ror lr
   19be0:			; <UNDEFINED> instruction: 0x00019eb0
   19be4:	andeq	r9, r1, r4, lsl #29
   19be8:	muleq	r1, r4, lr
   19bec:			; <UNDEFINED> instruction: 0x00019eb0
   19bf0:			; <UNDEFINED> instruction: 0x00019eb0
   19bf4:			; <UNDEFINED> instruction: 0x00019ebc
   19bf8:			; <UNDEFINED> instruction: 0x00019eb0
   19bfc:			; <UNDEFINED> instruction: 0x00019eb0
   19c00:			; <UNDEFINED> instruction: 0x00019eb0
   19c04:			; <UNDEFINED> instruction: 0x00019eb0
   19c08:			; <UNDEFINED> instruction: 0x00019eb0
   19c0c:			; <UNDEFINED> instruction: 0x00019eb0
   19c10:			; <UNDEFINED> instruction: 0x00019eb0
   19c14:			; <UNDEFINED> instruction: 0x00019eb0
   19c18:			; <UNDEFINED> instruction: 0x00019eb0
   19c1c:			; <UNDEFINED> instruction: 0x00019eb0
   19c20:			; <UNDEFINED> instruction: 0x00019eb0
   19c24:			; <UNDEFINED> instruction: 0x00019eb0
   19c28:			; <UNDEFINED> instruction: 0x00019eb0
   19c2c:			; <UNDEFINED> instruction: 0x00019eb0
   19c30:			; <UNDEFINED> instruction: 0x00019eb0
   19c34:			; <UNDEFINED> instruction: 0x00019eb0
   19c38:	andeq	r9, r1, ip, asr #29
   19c3c:	tst	r8, #16384	; 0x4000
   19c40:	bne	19eb0 <__assert_fail@plt+0x873c>
   19c44:	sub	r1, r1, #49	; 0x31
   19c48:	mov	r2, #4
   19c4c:	bfi	r0, r2, #0, #8
   19c50:	str	r1, [r9]
   19c54:	str	r0, [r9, #4]
   19c58:	b	19eb0 <__assert_fail@plt+0x873c>
   19c5c:	cmp	r6, #123	; 0x7b
   19c60:	beq	19d60 <__assert_fail@plt+0x85ec>
   19c64:	cmp	r6, #124	; 0x7c
   19c68:	beq	19d70 <__assert_fail@plt+0x85fc>
   19c6c:	cmp	r6, #125	; 0x7d
   19c70:	bne	19eb0 <__assert_fail@plt+0x873c>
   19c74:	and	r1, r8, #4608	; 0x1200
   19c78:	cmp	r1, #4608	; 0x1200
   19c7c:	beq	19e1c <__assert_fail@plt+0x86a8>
   19c80:	b	19eb0 <__assert_fail@plt+0x873c>
   19c84:	movw	r1, #65280	; 0xff00
   19c88:	movt	r1, #65439	; 0xff9f
   19c8c:	and	r0, r0, r1
   19c90:	orr	r0, r0, #1
   19c94:	orr	r0, r0, #2097152	; 0x200000
   19c98:	str	r0, [r5]
   19c9c:	mov	r4, #1
   19ca0:	b	19eb0 <__assert_fail@plt+0x873c>
   19ca4:	sub	r1, r2, #115	; 0x73
   19ca8:	cmp	r1, #10
   19cac:	bhi	19d84 <__assert_fail@plt+0x8610>
   19cb0:	add	r2, pc, #0
   19cb4:	ldr	pc, [r2, r1, lsl #2]
   19cb8:	andeq	r9, r1, r4, ror #25
   19cbc:			; <UNDEFINED> instruction: 0x00019eb0
   19cc0:			; <UNDEFINED> instruction: 0x00019eb0
   19cc4:			; <UNDEFINED> instruction: 0x00019eb0
   19cc8:	andeq	r9, r1, r0, ror #27
   19ccc:			; <UNDEFINED> instruction: 0x00019eb0
   19cd0:			; <UNDEFINED> instruction: 0x00019eb0
   19cd4:			; <UNDEFINED> instruction: 0x00019eb0
   19cd8:	strdeq	r9, [r1], -r0
   19cdc:	andeq	r9, r1, r4, lsl #28
   19ce0:	andeq	r9, r1, r0, lsl lr
   19ce4:	tst	r8, #524288	; 0x80000
   19ce8:	bne	19eb0 <__assert_fail@plt+0x873c>
   19cec:	mov	r1, #34	; 0x22
   19cf0:	b	19ea8 <__assert_fail@plt+0x8734>
   19cf4:	cmp	r6, #10
   19cf8:	bne	19eb0 <__assert_fail@plt+0x873c>
   19cfc:	tst	r8, #2048	; 0x800
   19d00:	bne	19d7c <__assert_fail@plt+0x8608>
   19d04:	b	19eb0 <__assert_fail@plt+0x873c>
   19d08:	tst	r8, #8192	; 0x2000
   19d0c:	beq	19eb0 <__assert_fail@plt+0x873c>
   19d10:	mov	r1, #8
   19d14:	b	19ea8 <__assert_fail@plt+0x8734>
   19d18:	tst	r8, #8192	; 0x2000
   19d1c:	beq	19eb0 <__assert_fail@plt+0x873c>
   19d20:	mov	r1, #9
   19d24:	b	19ea8 <__assert_fail@plt+0x8734>
   19d28:	mov	r1, #11
   19d2c:	b	19ea8 <__assert_fail@plt+0x8734>
   19d30:	movw	r1, #1026	; 0x402
   19d34:	tst	r8, r1
   19d38:	bne	19eb0 <__assert_fail@plt+0x873c>
   19d3c:	b	19e6c <__assert_fail@plt+0x86f8>
   19d40:	mov	r1, #5
   19d44:	b	19ea8 <__assert_fail@plt+0x8734>
   19d48:	movw	r1, #1026	; 0x402
   19d4c:	tst	r8, r1
   19d50:	bne	19eb0 <__assert_fail@plt+0x873c>
   19d54:	b	19ea4 <__assert_fail@plt+0x8730>
   19d58:	mov	r1, #20
   19d5c:	b	19ea8 <__assert_fail@plt+0x8734>
   19d60:	and	r1, r8, #4608	; 0x1200
   19d64:	cmp	r1, #4608	; 0x1200
   19d68:	beq	19dfc <__assert_fail@plt+0x8688>
   19d6c:	b	19eb0 <__assert_fail@plt+0x873c>
   19d70:	and	r1, r8, #33792	; 0x8400
   19d74:	cmp	r1, #32768	; 0x8000
   19d78:	bne	19eb0 <__assert_fail@plt+0x873c>
   19d7c:	mov	r1, #10
   19d80:	b	19ea8 <__assert_fail@plt+0x8734>
   19d84:	cmp	r2, #96	; 0x60
   19d88:	beq	19e24 <__assert_fail@plt+0x86b0>
   19d8c:	cmp	r2, #98	; 0x62
   19d90:	tsteq	r8, #524288	; 0x80000
   19d94:	bne	19eb0 <__assert_fail@plt+0x873c>
   19d98:	mov	r1, #256	; 0x100
   19d9c:	b	19b34 <__assert_fail@plt+0x83c0>
   19da0:	ldr	r1, [r7, #40]	; 0x28
   19da4:	cmp	r1, #0
   19da8:	beq	19b30 <__assert_fail@plt+0x83bc>
   19dac:	tst	r8, #2048	; 0x800
   19db0:	beq	19eb0 <__assert_fail@plt+0x873c>
   19db4:	ldr	r2, [r7, #4]
   19db8:	add	r1, r2, r1
   19dbc:	ldrb	r1, [r1, #-1]
   19dc0:	cmp	r1, #10
   19dc4:	beq	19b30 <__assert_fail@plt+0x83bc>
   19dc8:	b	19eb0 <__assert_fail@plt+0x873c>
   19dcc:	cmp	r2, #87	; 0x57
   19dd0:	tsteq	r8, #524288	; 0x80000
   19dd4:	bne	19eb0 <__assert_fail@plt+0x873c>
   19dd8:	mov	r1, #33	; 0x21
   19ddc:	b	19ea8 <__assert_fail@plt+0x8734>
   19de0:	tst	r8, #524288	; 0x80000
   19de4:	bne	19eb0 <__assert_fail@plt+0x873c>
   19de8:	mov	r1, #32
   19dec:	b	19ea8 <__assert_fail@plt+0x8734>
   19df0:	and	r1, r8, #4608	; 0x1200
   19df4:	cmp	r1, #512	; 0x200
   19df8:	bne	19eb0 <__assert_fail@plt+0x873c>
   19dfc:	mov	r1, #23
   19e00:	b	19ea8 <__assert_fail@plt+0x8734>
   19e04:	tst	r8, #33792	; 0x8400
   19e08:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e0c:	b	19d7c <__assert_fail@plt+0x8608>
   19e10:	and	r1, r8, #4608	; 0x1200
   19e14:	cmp	r1, #512	; 0x200
   19e18:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e1c:	mov	r1, #24
   19e20:	b	19ea8 <__assert_fail@plt+0x8734>
   19e24:	tst	r8, #524288	; 0x80000
   19e28:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e2c:	mov	r1, #64	; 0x40
   19e30:	b	19b34 <__assert_fail@plt+0x83c0>
   19e34:	tst	r8, #524288	; 0x80000
   19e38:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e3c:	mov	r1, #128	; 0x80
   19e40:	b	19b34 <__assert_fail@plt+0x83c0>
   19e44:	tst	r8, #8192	; 0x2000
   19e48:	beq	19d10 <__assert_fail@plt+0x859c>
   19e4c:	b	19eb0 <__assert_fail@plt+0x873c>
   19e50:	tst	r8, #8192	; 0x2000
   19e54:	beq	19d20 <__assert_fail@plt+0x85ac>
   19e58:	b	19eb0 <__assert_fail@plt+0x873c>
   19e5c:	movw	r1, #1026	; 0x402
   19e60:	and	r1, r8, r1
   19e64:	cmp	r1, #2
   19e68:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e6c:	mov	r1, #18
   19e70:	b	19ea8 <__assert_fail@plt+0x8734>
   19e74:	tst	r8, #524288	; 0x80000
   19e78:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e7c:	mov	r1, #6
   19e80:	b	19b34 <__assert_fail@plt+0x83c0>
   19e84:	tst	r8, #524288	; 0x80000
   19e88:	bne	19eb0 <__assert_fail@plt+0x873c>
   19e8c:	mov	r1, #9
   19e90:	b	19b34 <__assert_fail@plt+0x83c0>
   19e94:	movw	r1, #1026	; 0x402
   19e98:	and	r1, r8, r1
   19e9c:	cmp	r1, #2
   19ea0:	bne	19eb0 <__assert_fail@plt+0x873c>
   19ea4:	mov	r1, #19
   19ea8:	bfi	r0, r1, #0, #8
   19eac:	str	r0, [r5]
   19eb0:	mov	r0, r4
   19eb4:	sub	sp, fp, #24
   19eb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19ebc:	tst	r8, #524288	; 0x80000
   19ec0:	bne	19eb0 <__assert_fail@plt+0x873c>
   19ec4:	mov	r1, #512	; 0x200
   19ec8:	b	19b34 <__assert_fail@plt+0x83c0>
   19ecc:	tst	r8, #524288	; 0x80000
   19ed0:	bne	19eb0 <__assert_fail@plt+0x873c>
   19ed4:	mov	r1, #35	; 0x23
   19ed8:	b	19ea8 <__assert_fail@plt+0x8734>
   19edc:	cmp	r3, #2
   19ee0:	blt	19f10 <__assert_fail@plt+0x879c>
   19ee4:	ldr	r3, [r7, #8]
   19ee8:	ldr	r4, [r3, r2, lsl #2]
   19eec:	cmn	r4, #1
   19ef0:	beq	19960 <__assert_fail@plt+0x81ec>
   19ef4:	ldr	r4, [r7, #28]
   19ef8:	add	r6, r6, #2
   19efc:	cmp	r4, r6
   19f00:	beq	19f10 <__assert_fail@plt+0x879c>
   19f04:	ldr	r3, [r3, r6, lsl #2]
   19f08:	cmn	r3, #1
   19f0c:	beq	19960 <__assert_fail@plt+0x81ec>
   19f10:	ldrb	r3, [r7, #76]	; 0x4c
   19f14:	mov	r6, r2
   19f18:	ldr	r4, [r7, #24]
   19f1c:	ldr	ip, [r7]
   19f20:	cmp	r3, #0
   19f24:	ldrne	r6, [r7, #12]
   19f28:	ldrne	r6, [r6, r2, lsl #2]
   19f2c:	cmp	r3, #0
   19f30:	add	r6, r4, r6
   19f34:	add	r6, ip, r6
   19f38:	ldrsb	r6, [r6]
   19f3c:	beq	19968 <__assert_fail@plt+0x81f4>
   19f40:	cmn	r6, #1
   19f44:	ble	19960 <__assert_fail@plt+0x81ec>
   19f48:	b	19968 <__assert_fail@plt+0x81f4>
   19f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f50:	add	fp, sp, #28
   19f54:	sub	sp, sp, #28
   19f58:	mov	r7, r1
   19f5c:	mov	r1, r0
   19f60:	ldr	r4, [fp, #12]
   19f64:	ldr	r5, [fp, #8]
   19f68:	mov	r6, r2
   19f6c:	str	r3, [sp, #16]
   19f70:	ldr	r0, [r7]
   19f74:	str	r1, [sp, #12]
   19f78:	str	r4, [sp, #4]
   19f7c:	str	r5, [sp]
   19f80:	str	r0, [sp, #8]
   19f84:	mov	r0, r1
   19f88:	mov	r1, r7
   19f8c:	bl	1a1d8 <__assert_fail@plt+0x8a64>
   19f90:	cmp	r0, #0
   19f94:	bne	19fa4 <__assert_fail@plt+0x8830>
   19f98:	ldr	r1, [r4]
   19f9c:	cmp	r1, #0
   19fa0:	bne	1a100 <__assert_fail@plt+0x898c>
   19fa4:	mov	r4, r0
   19fa8:	ldrb	r0, [r6, #4]
   19fac:	orr	r1, r0, #8
   19fb0:	cmp	r1, #10
   19fb4:	beq	1a104 <__assert_fail@plt+0x8990>
   19fb8:	cmp	r5, #0
   19fbc:	beq	19fc8 <__assert_fail@plt+0x8854>
   19fc0:	cmp	r0, #9
   19fc4:	beq	1a104 <__assert_fail@plt+0x8990>
   19fc8:	ldr	r8, [fp, #12]
   19fcc:	ldr	r0, [sp, #12]
   19fd0:	ldr	r3, [sp, #16]
   19fd4:	mov	r1, r7
   19fd8:	mov	r2, r6
   19fdc:	mov	r9, r5
   19fe0:	str	r5, [sp]
   19fe4:	str	r8, [sp, #4]
   19fe8:	bl	1a1d8 <__assert_fail@plt+0x8a64>
   19fec:	mov	sl, r0
   19ff0:	cmp	r0, #0
   19ff4:	bne	1a004 <__assert_fail@plt+0x8890>
   19ff8:	ldr	r0, [r8]
   19ffc:	cmp	r0, #0
   1a000:	bne	1a110 <__assert_fail@plt+0x899c>
   1a004:	cmp	r4, #0
   1a008:	cmpne	sl, #0
   1a00c:	bne	1a024 <__assert_fail@plt+0x88b0>
   1a010:	cmp	r4, #0
   1a014:	mov	r5, r9
   1a018:	movne	sl, r4
   1a01c:	mov	r0, sl
   1a020:	b	19fa4 <__assert_fail@plt+0x8830>
   1a024:	mov	r0, #16
   1a028:	mov	r1, r4
   1a02c:	mov	r2, sl
   1a030:	add	r3, sp, #20
   1a034:	str	r0, [sp, #24]
   1a038:	mov	r0, #0
   1a03c:	str	r0, [sp, #20]
   1a040:	ldr	r0, [sp, #8]
   1a044:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a048:	cmp	r0, #0
   1a04c:	mov	r5, r9
   1a050:	bne	19fa4 <__assert_fail@plt+0x8830>
   1a054:	mov	r5, sl
   1a058:	ldr	sl, [sl, #4]
   1a05c:	cmp	sl, #0
   1a060:	bne	1a054 <__assert_fail@plt+0x88e0>
   1a064:	ldr	sl, [r5, #8]
   1a068:	cmp	sl, #0
   1a06c:	bne	1a054 <__assert_fail@plt+0x88e0>
   1a070:	add	r0, r5, #20
   1a074:	bl	18d0c <__assert_fail@plt+0x7598>
   1a078:	ldr	r0, [r5]
   1a07c:	cmp	r0, #0
   1a080:	beq	1a0a4 <__assert_fail@plt+0x8930>
   1a084:	ldr	sl, [r0, #8]
   1a088:	cmp	sl, r5
   1a08c:	mov	r5, r0
   1a090:	beq	1a070 <__assert_fail@plt+0x88fc>
   1a094:	cmp	sl, #0
   1a098:	mov	r5, r0
   1a09c:	beq	1a070 <__assert_fail@plt+0x88fc>
   1a0a0:	b	1a054 <__assert_fail@plt+0x88e0>
   1a0a4:	mov	r5, r4
   1a0a8:	ldr	r4, [r4, #4]
   1a0ac:	cmp	r4, #0
   1a0b0:	bne	1a0a4 <__assert_fail@plt+0x8930>
   1a0b4:	ldr	r4, [r5, #8]
   1a0b8:	cmp	r4, #0
   1a0bc:	bne	1a0a4 <__assert_fail@plt+0x8930>
   1a0c0:	add	r0, r5, #20
   1a0c4:	bl	18d0c <__assert_fail@plt+0x7598>
   1a0c8:	ldr	r0, [r5]
   1a0cc:	cmp	r0, #0
   1a0d0:	beq	1a0f4 <__assert_fail@plt+0x8980>
   1a0d4:	ldr	r4, [r0, #8]
   1a0d8:	cmp	r4, r5
   1a0dc:	mov	r5, r0
   1a0e0:	beq	1a0c0 <__assert_fail@plt+0x894c>
   1a0e4:	cmp	r4, #0
   1a0e8:	mov	r5, r0
   1a0ec:	beq	1a0c0 <__assert_fail@plt+0x894c>
   1a0f0:	b	1a0a4 <__assert_fail@plt+0x8930>
   1a0f4:	ldr	r1, [fp, #12]
   1a0f8:	mov	r0, #12
   1a0fc:	str	r0, [r1]
   1a100:	mov	r4, #0
   1a104:	mov	r0, r4
   1a108:	sub	sp, fp, #28
   1a10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a110:	cmp	r4, #0
   1a114:	beq	1a100 <__assert_fail@plt+0x898c>
   1a118:	mov	r5, r4
   1a11c:	ldr	r4, [r4, #4]
   1a120:	cmp	r4, #0
   1a124:	bne	1a118 <__assert_fail@plt+0x89a4>
   1a128:	ldr	r4, [r5, #8]
   1a12c:	cmp	r4, #0
   1a130:	bne	1a118 <__assert_fail@plt+0x89a4>
   1a134:	add	r0, r5, #20
   1a138:	bl	18d0c <__assert_fail@plt+0x7598>
   1a13c:	ldr	r0, [r5]
   1a140:	cmp	r0, #0
   1a144:	beq	1a100 <__assert_fail@plt+0x898c>
   1a148:	ldr	r4, [r0, #8]
   1a14c:	cmp	r4, r5
   1a150:	mov	r5, r0
   1a154:	beq	1a134 <__assert_fail@plt+0x89c0>
   1a158:	cmp	r4, #0
   1a15c:	mov	r5, r0
   1a160:	beq	1a134 <__assert_fail@plt+0x89c0>
   1a164:	b	1a118 <__assert_fail@plt+0x89a4>
   1a168:	push	{r4, r5, r6, sl, fp, lr}
   1a16c:	add	fp, sp, #16
   1a170:	mov	r4, r2
   1a174:	mov	r5, r1
   1a178:	mov	r6, r0
   1a17c:	ldr	r0, [r0, #4]
   1a180:	cmp	r0, #0
   1a184:	bne	1a178 <__assert_fail@plt+0x8a04>
   1a188:	ldr	r0, [r6, #8]
   1a18c:	cmp	r0, #0
   1a190:	bne	1a178 <__assert_fail@plt+0x8a04>
   1a194:	mov	r0, r4
   1a198:	mov	r1, r6
   1a19c:	blx	r5
   1a1a0:	cmp	r0, #0
   1a1a4:	bne	1a1d4 <__assert_fail@plt+0x8a60>
   1a1a8:	ldr	r1, [r6]
   1a1ac:	cmp	r1, #0
   1a1b0:	popeq	{r4, r5, r6, sl, fp, pc}
   1a1b4:	ldr	r0, [r1, #8]
   1a1b8:	cmp	r0, r6
   1a1bc:	mov	r6, r1
   1a1c0:	beq	1a194 <__assert_fail@plt+0x8a20>
   1a1c4:	cmp	r0, #0
   1a1c8:	mov	r6, r1
   1a1cc:	beq	1a194 <__assert_fail@plt+0x8a20>
   1a1d0:	b	1a178 <__assert_fail@plt+0x8a04>
   1a1d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1dc:	add	fp, sp, #28
   1a1e0:	sub	sp, sp, #148	; 0x94
   1a1e4:	mov	r5, r1
   1a1e8:	mov	r6, r0
   1a1ec:	mov	r7, r2
   1a1f0:	ldr	r0, [r2, #4]
   1a1f4:	mvn	r1, #0
   1a1f8:	mov	sl, #0
   1a1fc:	ldr	r2, [r5]
   1a200:	uxtab	r1, r1, r0
   1a204:	str	r2, [sp, #52]	; 0x34
   1a208:	cmp	r1, #35	; 0x23
   1a20c:	ldr	r9, [fp, #12]
   1a210:	str	r6, [sp, #48]	; 0x30
   1a214:	str	r3, [sp, #44]	; 0x2c
   1a218:	str	r7, [sp, #28]
   1a21c:	bhi	1a348 <__assert_fail@plt+0x8bd4>
   1a220:	add	r2, pc, #0
   1a224:	ldr	pc, [r2, r1, lsl #2]
   1a228:	muleq	r1, r8, r5
   1a22c:	andeq	fp, r1, r4, ror r5
   1a230:	andeq	sl, r1, r8, asr #6
   1a234:	andeq	sl, r1, ip, lsr #7
   1a238:	andeq	sl, r1, r8, lsl #8
   1a23c:	andeq	sl, r1, r8, asr #6
   1a240:	andeq	sl, r1, r8, asr #6
   1a244:	andeq	sl, r1, ip, asr #8
   1a248:	andeq	sl, r1, r8, asr r3
   1a24c:	andeq	fp, r1, r4, ror r5
   1a250:	andeq	sl, r1, r8, asr #6
   1a254:	andeq	sl, r1, r8, lsl r5
   1a258:	andeq	sl, r1, r8, asr #6
   1a25c:	andeq	sl, r1, r8, asr #6
   1a260:	andeq	sl, r1, r8, asr #6
   1a264:	andeq	sl, r1, r8, asr #6
   1a268:	andeq	sl, r1, r8, asr #6
   1a26c:	andeq	sl, r1, r8, asr #6
   1a270:	andeq	sl, r1, r8, asr #6
   1a274:	andeq	sl, r1, r8, lsl #13
   1a278:	andeq	sl, r1, r8, asr #6
   1a27c:	andeq	sl, r1, r8, asr #6
   1a280:	andeq	sl, r1, r0, asr #6
   1a284:	andeq	sl, r1, r8, ror #6
   1a288:	andeq	sl, r1, r8, asr #6
   1a28c:	andeq	sl, r1, r8, asr #6
   1a290:	andeq	sl, r1, r8, asr #6
   1a294:	andeq	sl, r1, r8, asr #6
   1a298:	andeq	sl, r1, r8, asr #6
   1a29c:	andeq	sl, r1, r8, asr #6
   1a2a0:	andeq	sl, r1, r8, asr #6
   1a2a4:	andeq	sl, r1, r8, asr #5
   1a2a8:	andeq	sl, r1, r8, asr #5
   1a2ac:	andeq	sl, r1, ip, ror #5
   1a2b0:	andeq	sl, r1, ip, ror #5
   1a2b4:	andeq	sl, r1, r0, lsl #13
   1a2b8:	andeq	r0, r0, r0
   1a2bc:	mvnseq	r0, #0
   1a2c0:			; <UNDEFINED> instruction: 0x87fffffe
   1a2c4:			; <UNDEFINED> instruction: 0x07fffffe
   1a2c8:	mvn	r2, #32
   1a2cc:	ldr	r1, [r6, #64]	; 0x40
   1a2d0:	movw	r3, #20041	; 0x4e49
   1a2d4:	uxtab	r0, r2, r0
   1a2d8:	movw	r2, #21262	; 0x530e
   1a2dc:	movt	r3, #2
   1a2e0:	clz	r0, r0
   1a2e4:	movt	r2, #2
   1a2e8:	b	1a30c <__assert_fail@plt+0x8b98>
   1a2ec:	mvn	r2, #34	; 0x22
   1a2f0:	ldr	r1, [r6, #64]	; 0x40
   1a2f4:	movw	r3, #18835	; 0x4993
   1a2f8:	uxtab	r0, r2, r0
   1a2fc:	movw	r2, #21268	; 0x5314
   1a300:	movt	r3, #2
   1a304:	clz	r0, r0
   1a308:	movt	r2, #2
   1a30c:	lsr	r0, r0, #5
   1a310:	stm	sp, {r0, r9}
   1a314:	ldr	r0, [sp, #52]	; 0x34
   1a318:	bl	1b798 <__assert_fail@plt+0xa024>
   1a31c:	mov	r4, r0
   1a320:	cmp	r0, #0
   1a324:	bne	1afe8 <__assert_fail@plt+0x9874>
   1a328:	ldr	r0, [r9]
   1a32c:	ldr	r2, [sp, #44]	; 0x2c
   1a330:	ldr	r3, [sp, #28]
   1a334:	cmp	r0, #0
   1a338:	beq	1aff0 <__assert_fail@plt+0x987c>
   1a33c:	b	1b574 <__assert_fail@plt+0x9e00>
   1a340:	tst	r3, #16777216	; 0x1000000
   1a344:	bne	1a3a4 <__assert_fail@plt+0x8c30>
   1a348:	tst	r3, #32
   1a34c:	bne	1a3a4 <__assert_fail@plt+0x8c30>
   1a350:	tst	r3, #16
   1a354:	bne	1a6fc <__assert_fail@plt+0x8f88>
   1a358:	tst	r3, #131072	; 0x20000
   1a35c:	uxtbeq	r1, r0
   1a360:	cmpeq	r1, #9
   1a364:	beq	1a738 <__assert_fail@plt+0x8fc4>
   1a368:	mov	r1, #1
   1a36c:	mov	r2, #0
   1a370:	mov	r3, r7
   1a374:	mov	sl, #0
   1a378:	bfi	r0, r1, #0, #8
   1a37c:	mov	r1, #0
   1a380:	str	r0, [r7, #4]
   1a384:	ldr	r0, [sp, #52]	; 0x34
   1a388:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a38c:	ldr	r3, [sp, #28]
   1a390:	ldr	r2, [sp, #44]	; 0x2c
   1a394:	mov	r4, r0
   1a398:	cmp	r0, #0
   1a39c:	bne	1aff0 <__assert_fail@plt+0x987c>
   1a3a0:	b	1aea4 <__assert_fail@plt+0x9730>
   1a3a4:	mov	r0, #13
   1a3a8:	b	1aea8 <__assert_fail@plt+0x9734>
   1a3ac:	ldr	r5, [sp, #52]	; 0x34
   1a3b0:	ldr	r0, [r7]
   1a3b4:	mov	r1, #1
   1a3b8:	ldr	r2, [r5, #84]	; 0x54
   1a3bc:	tst	r2, r1, lsl r0
   1a3c0:	beq	1af74 <__assert_fail@plt+0x9800>
   1a3c4:	lsl	r0, r1, r0
   1a3c8:	ldr	r1, [r5, #80]	; 0x50
   1a3cc:	mov	r2, #0
   1a3d0:	mov	r3, r7
   1a3d4:	mov	sl, #0
   1a3d8:	orr	r0, r1, r0
   1a3dc:	mov	r1, #0
   1a3e0:	str	r0, [r5, #80]	; 0x50
   1a3e4:	mov	r0, r5
   1a3e8:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a3ec:	cmp	r0, #0
   1a3f0:	beq	1aea4 <__assert_fail@plt+0x9730>
   1a3f4:	mov	r4, r0
   1a3f8:	ldr	r0, [r5, #76]	; 0x4c
   1a3fc:	add	r0, r0, #1
   1a400:	str	r0, [r5, #76]	; 0x4c
   1a404:	b	1a43c <__assert_fail@plt+0x8cc8>
   1a408:	ldr	r5, [sp, #52]	; 0x34
   1a40c:	mov	r1, #0
   1a410:	mov	r2, #0
   1a414:	mov	r3, r7
   1a418:	mov	sl, #0
   1a41c:	mov	r0, r5
   1a420:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a424:	cmp	r0, #0
   1a428:	beq	1aea4 <__assert_fail@plt+0x9730>
   1a42c:	mov	r4, r0
   1a430:	ldr	r0, [r5, #92]	; 0x5c
   1a434:	cmp	r0, #2
   1a438:	blt	1afe8 <__assert_fail@plt+0x9874>
   1a43c:	ldrb	r0, [r5, #88]	; 0x58
   1a440:	orr	r0, r0, #2
   1a444:	strb	r0, [r5, #88]	; 0x58
   1a448:	b	1afe8 <__assert_fail@plt+0x9874>
   1a44c:	ldr	r8, [r5, #24]
   1a450:	ldr	r4, [fp, #8]
   1a454:	orr	r2, r3, #8388608	; 0x800000
   1a458:	mov	r1, r6
   1a45c:	add	r0, r8, #1
   1a460:	str	r0, [r5, #24]
   1a464:	mov	r0, r7
   1a468:	bl	198c0 <__assert_fail@plt+0x814c>
   1a46c:	ldr	r1, [r6, #40]	; 0x28
   1a470:	ldr	r2, [sp, #28]
   1a474:	add	r0, r1, r0
   1a478:	mov	r1, #0
   1a47c:	str	r0, [r6, #40]	; 0x28
   1a480:	ldrb	r0, [r2, #4]
   1a484:	cmp	r0, #9
   1a488:	beq	1a4c8 <__assert_fail@plt+0x8d54>
   1a48c:	add	r0, r4, #1
   1a490:	mov	r1, r5
   1a494:	mov	r5, r2
   1a498:	stm	sp, {r0, r9}
   1a49c:	mov	r0, r6
   1a4a0:	ldr	r3, [sp, #44]	; 0x2c
   1a4a4:	bl	19710 <__assert_fail@plt+0x7f9c>
   1a4a8:	mov	r1, r0
   1a4ac:	ldr	r0, [r9]
   1a4b0:	mov	sl, #0
   1a4b4:	cmp	r0, #0
   1a4b8:	bne	1b574 <__assert_fail@plt+0x9e00>
   1a4bc:	ldrb	r0, [r5, #4]
   1a4c0:	cmp	r0, #9
   1a4c4:	bne	1b664 <__assert_fail@plt+0x9ef0>
   1a4c8:	ldr	r0, [sp, #52]	; 0x34
   1a4cc:	cmp	r8, #8
   1a4d0:	mov	sl, #0
   1a4d4:	movls	r2, #1
   1a4d8:	ldrls	r3, [r0, #84]	; 0x54
   1a4dc:	orrls	r2, r3, r2, lsl r8
   1a4e0:	sub	r3, fp, #80	; 0x50
   1a4e4:	strls	r2, [r0, #84]	; 0x54
   1a4e8:	mov	r2, #17
   1a4ec:	str	r2, [fp, #-76]	; 0xffffffb4
   1a4f0:	mov	r2, #0
   1a4f4:	str	sl, [fp, #-80]	; 0xffffffb0
   1a4f8:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a4fc:	cmp	r0, #0
   1a500:	beq	1aea4 <__assert_fail@plt+0x9730>
   1a504:	ldr	r2, [sp, #44]	; 0x2c
   1a508:	ldr	r3, [sp, #28]
   1a50c:	str	r8, [r0, #20]
   1a510:	mov	r4, r0
   1a514:	b	1aff0 <__assert_fail@plt+0x987c>
   1a518:	ldr	r2, [r7]
   1a51c:	movw	r1, #783	; 0x30f
   1a520:	tst	r2, r1
   1a524:	beq	1a578 <__assert_fail@plt+0x8e04>
   1a528:	ldr	r0, [sp, #52]	; 0x34
   1a52c:	ldrb	r0, [r0, #88]	; 0x58
   1a530:	tst	r0, #16
   1a534:	bne	1a570 <__assert_fail@plt+0x8dfc>
   1a538:	ldr	r2, [sp, #52]	; 0x34
   1a53c:	orr	r1, r0, #16
   1a540:	tst	r0, #8
   1a544:	strb	r1, [r2, #88]	; 0x58
   1a548:	bne	1b5dc <__assert_fail@plt+0x9e68>
   1a54c:	sub	r1, pc, #668	; 0x29c
   1a550:	tst	r0, #4
   1a554:	vld1.64	{d16-d17}, [r1]
   1a558:	add	r1, r2, #96	; 0x60
   1a55c:	vst1.32	{d16-d17}, [r1]
   1a560:	beq	1b5e8 <__assert_fail@plt+0x9e74>
   1a564:	vmov.i32	q8, #0	; 0x00000000
   1a568:	add	r0, r2, #112	; 0x70
   1a56c:	vst1.32	{d16-d17}, [r0]
   1a570:	ldr	r2, [r7]
   1a574:	ldr	r6, [sp, #48]	; 0x30
   1a578:	ldr	r0, [sp, #52]	; 0x34
   1a57c:	cmp	r2, #256	; 0x100
   1a580:	beq	1ae30 <__assert_fail@plt+0x96bc>
   1a584:	cmp	r2, #512	; 0x200
   1a588:	bne	1aeb0 <__assert_fail@plt+0x973c>
   1a58c:	mov	r4, #10
   1a590:	mov	r0, #5
   1a594:	b	1ae38 <__assert_fail@plt+0x96c4>
   1a598:	ldr	r5, [sp, #52]	; 0x34
   1a59c:	mov	r1, #0
   1a5a0:	mov	r2, #0
   1a5a4:	mov	r3, r7
   1a5a8:	mov	sl, #0
   1a5ac:	mov	r0, r5
   1a5b0:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a5b4:	cmp	r0, #0
   1a5b8:	beq	1aea4 <__assert_fail@plt+0x9730>
   1a5bc:	mov	r4, r0
   1a5c0:	ldr	r0, [r5, #92]	; 0x5c
   1a5c4:	cmp	r0, #2
   1a5c8:	blt	1afe8 <__assert_fail@plt+0x9874>
   1a5cc:	ldr	r7, [sp, #52]	; 0x34
   1a5d0:	mov	sl, #16
   1a5d4:	sub	r8, fp, #80	; 0x50
   1a5d8:	ldr	r5, [sp, #48]	; 0x30
   1a5dc:	ldr	r0, [r5, #40]	; 0x28
   1a5e0:	ldr	r1, [r5, #56]	; 0x38
   1a5e4:	cmp	r1, r0
   1a5e8:	ble	1aefc <__assert_fail@plt+0x9788>
   1a5ec:	ldr	r1, [r5, #28]
   1a5f0:	ldr	r2, [sp, #44]	; 0x2c
   1a5f4:	ldr	r3, [sp, #28]
   1a5f8:	cmp	r0, r1
   1a5fc:	beq	1aef4 <__assert_fail@plt+0x9780>
   1a600:	ldr	r1, [r5, #8]
   1a604:	ldr	r0, [r1, r0, lsl #2]
   1a608:	cmn	r0, #1
   1a60c:	bne	1aef4 <__assert_fail@plt+0x9780>
   1a610:	mov	r0, r3
   1a614:	mov	r1, r5
   1a618:	mov	r6, r3
   1a61c:	bl	198c0 <__assert_fail@plt+0x814c>
   1a620:	ldr	r1, [r5, #40]	; 0x28
   1a624:	mov	r2, #0
   1a628:	mov	r3, r6
   1a62c:	add	r0, r1, r0
   1a630:	mov	r1, #0
   1a634:	str	r0, [r5, #40]	; 0x28
   1a638:	mov	r0, r7
   1a63c:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a640:	mov	r5, r0
   1a644:	mov	r0, #0
   1a648:	str	sl, [fp, #-76]	; 0xffffffb4
   1a64c:	mov	r1, r4
   1a650:	mov	r3, r8
   1a654:	str	r0, [fp, #-80]	; 0xffffffb0
   1a658:	mov	r0, r7
   1a65c:	mov	r2, r5
   1a660:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1a664:	cmp	r5, #0
   1a668:	movne	r4, r0
   1a66c:	cmpne	r0, #0
   1a670:	bne	1a5d8 <__assert_fail@plt+0x8e64>
   1a674:	mov	r0, #12
   1a678:	str	r0, [r9]
   1a67c:	b	1b570 <__assert_fail@plt+0x9dfc>
   1a680:	mov	r0, #5
   1a684:	b	1aea8 <__assert_fail@plt+0x9734>
   1a688:	mov	r0, #0
   1a68c:	mov	r1, #1
   1a690:	mov	r7, #0
   1a694:	str	r0, [fp, #-32]	; 0xffffffe0
   1a698:	mov	r0, #32
   1a69c:	bl	23b90 <__assert_fail@plt+0x1241c>
   1a6a0:	mov	r4, r0
   1a6a4:	mov	r0, #40	; 0x28
   1a6a8:	mov	r1, #1
   1a6ac:	bl	23b90 <__assert_fail@plt+0x1241c>
   1a6b0:	mov	r8, r0
   1a6b4:	cmp	r4, #0
   1a6b8:	cmpne	r8, #0
   1a6bc:	beq	1af7c <__assert_fail@plt+0x9808>
   1a6c0:	ldr	r7, [sp, #28]
   1a6c4:	ldr	r5, [sp, #44]	; 0x2c
   1a6c8:	mov	r1, r6
   1a6cc:	mov	r0, r7
   1a6d0:	mov	r2, r5
   1a6d4:	bl	1b9c4 <__assert_fail@plt+0xa250>
   1a6d8:	mov	r3, r0
   1a6dc:	ldr	r0, [r7, #4]
   1a6e0:	uxtb	r1, r0
   1a6e4:	cmp	r1, #25
   1a6e8:	beq	1a740 <__assert_fail@plt+0x8fcc>
   1a6ec:	cmp	r1, #2
   1a6f0:	beq	1af68 <__assert_fail@plt+0x97f4>
   1a6f4:	mov	r1, #0
   1a6f8:	b	1a794 <__assert_fail@plt+0x9020>
   1a6fc:	mov	r0, r7
   1a700:	mov	r1, r6
   1a704:	mov	r2, r3
   1a708:	mov	r4, r3
   1a70c:	bl	198c0 <__assert_fail@plt+0x814c>
   1a710:	ldr	r1, [r6, #40]	; 0x28
   1a714:	mov	r2, r7
   1a718:	mov	r3, r4
   1a71c:	add	r0, r1, r0
   1a720:	mov	r1, r5
   1a724:	str	r0, [r6, #40]	; 0x28
   1a728:	mov	r0, r6
   1a72c:	sub	sp, fp, #28
   1a730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a734:	b	1a1d8 <__assert_fail@plt+0x8a64>
   1a738:	mov	r0, #16
   1a73c:	b	1aea8 <__assert_fail@plt+0x9734>
   1a740:	ldrb	r0, [r8, #16]
   1a744:	tst	r5, #256	; 0x100
   1a748:	ldr	r2, [sp, #44]	; 0x2c
   1a74c:	mov	r1, r6
   1a750:	orr	r0, r0, #1
   1a754:	strb	r0, [r8, #16]
   1a758:	ldrne	r0, [r4]
   1a75c:	orrne	r0, r0, #1024	; 0x400
   1a760:	strne	r0, [r4]
   1a764:	ldr	r0, [r6, #40]	; 0x28
   1a768:	add	r0, r0, r3
   1a76c:	str	r0, [r6, #40]	; 0x28
   1a770:	mov	r0, r7
   1a774:	bl	1b9c4 <__assert_fail@plt+0xa250>
   1a778:	ldr	r7, [sp, #28]
   1a77c:	mov	r3, r0
   1a780:	ldr	r0, [r7, #4]
   1a784:	uxtb	r1, r0
   1a788:	cmp	r1, #2
   1a78c:	beq	1af68 <__assert_fail@plt+0x97f4>
   1a790:	mov	r1, #1
   1a794:	str	r1, [sp, #36]	; 0x24
   1a798:	uxtb	r1, r0
   1a79c:	str	r8, [sp, #40]	; 0x28
   1a7a0:	mov	r2, r7
   1a7a4:	cmp	r1, #21
   1a7a8:	ldr	r5, [sp, #44]	; 0x2c
   1a7ac:	moveq	r1, #1
   1a7b0:	bfieq	r0, r1, #0, #8
   1a7b4:	mov	r1, r6
   1a7b8:	streq	r0, [r7, #4]
   1a7bc:	mov	r0, #3
   1a7c0:	str	r0, [fp, #-40]	; 0xffffffd8
   1a7c4:	sub	r0, fp, #80	; 0x50
   1a7c8:	str	r0, [fp, #-36]	; 0xffffffdc
   1a7cc:	mov	r0, #1
   1a7d0:	str	r5, [sp]
   1a7d4:	str	r0, [sp, #4]
   1a7d8:	sub	r0, fp, #40	; 0x28
   1a7dc:	bl	1bb2c <__assert_fail@plt+0xa3b8>
   1a7e0:	cmp	r0, #0
   1a7e4:	bne	1af54 <__assert_fail@plt+0x97e0>
   1a7e8:	and	r0, r5, #65536	; 0x10000
   1a7ec:	mov	r2, r5
   1a7f0:	mov	r8, #0
   1a7f4:	str	r0, [sp, #20]
   1a7f8:	mov	r0, #0
   1a7fc:	str	r0, [sp, #16]
   1a800:	mov	r0, #0
   1a804:	str	r0, [sp, #12]
   1a808:	ldr	r5, [sp, #28]
   1a80c:	mov	r0, r5
   1a810:	mov	r1, r6
   1a814:	bl	1b9c4 <__assert_fail@plt+0xa250>
   1a818:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1a81c:	mov	sl, r0
   1a820:	cmp	r7, #2
   1a824:	beq	1a9fc <__assert_fail@plt+0x9288>
   1a828:	cmp	r7, #4
   1a82c:	bne	1a870 <__assert_fail@plt+0x90fc>
   1a830:	ldr	r6, [sp, #48]	; 0x30
   1a834:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a838:	sub	r3, fp, #32
   1a83c:	ldr	r0, [r6, #64]	; 0x40
   1a840:	str	r1, [sp]
   1a844:	ldr	r1, [sp, #44]	; 0x2c
   1a848:	str	r1, [sp, #4]
   1a84c:	mov	r1, r4
   1a850:	ldr	r2, [sp, #40]	; 0x28
   1a854:	bl	1bde4 <__assert_fail@plt+0xa670>
   1a858:	ldr	r2, [sp, #28]
   1a85c:	ldr	r5, [sp, #52]	; 0x34
   1a860:	cmp	r0, #0
   1a864:	str	r0, [r9]
   1a868:	beq	1aa3c <__assert_fail@plt+0x92c8>
   1a86c:	b	1afac <__assert_fail@plt+0x9838>
   1a870:	str	sl, [sp, #32]
   1a874:	mov	sl, #7
   1a878:	ldr	r2, [sp, #28]
   1a87c:	str	r9, [sp, #24]
   1a880:	ldrb	r0, [r2, #4]
   1a884:	cmp	r0, #22
   1a888:	beq	1a898 <__assert_fail@plt+0x9124>
   1a88c:	cmp	r0, #2
   1a890:	bne	1a99c <__assert_fail@plt+0x9228>
   1a894:	b	1afa0 <__assert_fail@plt+0x982c>
   1a898:	ldr	r5, [sp, #48]	; 0x30
   1a89c:	ldr	r6, [sp, #32]
   1a8a0:	ldr	r2, [sp, #44]	; 0x2c
   1a8a4:	ldr	r0, [r5, #40]	; 0x28
   1a8a8:	mov	r1, r5
   1a8ac:	add	r0, r0, r6
   1a8b0:	str	r0, [r5, #40]	; 0x28
   1a8b4:	add	r0, sp, #56	; 0x38
   1a8b8:	bl	1b9c4 <__assert_fail@plt+0xa250>
   1a8bc:	mov	r3, r0
   1a8c0:	ldrb	r0, [sp, #60]	; 0x3c
   1a8c4:	cmp	r0, #21
   1a8c8:	beq	1a984 <__assert_fail@plt+0x9210>
   1a8cc:	cmp	r0, #2
   1a8d0:	beq	1afa0 <__assert_fail@plt+0x982c>
   1a8d4:	ldr	r8, [sp, #44]	; 0x2c
   1a8d8:	mov	r0, #3
   1a8dc:	add	r2, sp, #56	; 0x38
   1a8e0:	str	r0, [fp, #-48]	; 0xffffffd0
   1a8e4:	add	r0, sp, #64	; 0x40
   1a8e8:	str	r0, [fp, #-44]	; 0xffffffd4
   1a8ec:	mov	r0, #1
   1a8f0:	str	r0, [sp, #4]
   1a8f4:	sub	r0, fp, #48	; 0x30
   1a8f8:	str	r8, [sp]
   1a8fc:	ldr	r5, [sp, #48]	; 0x30
   1a900:	mov	r1, r5
   1a904:	bl	1bb2c <__assert_fail@plt+0xa3b8>
   1a908:	cmp	r0, #0
   1a90c:	bne	1b6c4 <__assert_fail@plt+0x9f50>
   1a910:	ldr	r0, [sp, #28]
   1a914:	mov	r1, r5
   1a918:	mov	r2, r8
   1a91c:	bl	1b9c4 <__assert_fail@plt+0xa250>
   1a920:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1a924:	mov	sl, #11
   1a928:	str	r0, [sp, #32]
   1a92c:	cmp	r6, #2
   1a930:	cmpne	r6, #4
   1a934:	beq	1afa0 <__assert_fail@plt+0x982c>
   1a938:	cmp	r7, #3
   1a93c:	bne	1a950 <__assert_fail@plt+0x91dc>
   1a940:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a944:	bl	11618 <strlen@plt>
   1a948:	cmp	r0, #1
   1a94c:	bhi	1af9c <__assert_fail@plt+0x9828>
   1a950:	cmp	r6, #3
   1a954:	bne	1a968 <__assert_fail@plt+0x91f4>
   1a958:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a95c:	bl	11618 <strlen@plt>
   1a960:	cmp	r0, #1
   1a964:	bhi	1af9c <__assert_fail@plt+0x9828>
   1a968:	ldr	r2, [sp, #28]
   1a96c:	cmp	r7, #3
   1a970:	beq	1aae8 <__assert_fail@plt+0x9374>
   1a974:	mov	r8, #0
   1a978:	cmp	r7, #0
   1a97c:	ldrbeq	r8, [fp, #-36]	; 0xffffffdc
   1a980:	b	1aaf0 <__assert_fail@plt+0x937c>
   1a984:	ldr	r0, [r5, #40]	; 0x28
   1a988:	ldr	r2, [sp, #28]
   1a98c:	sub	r0, r0, r6
   1a990:	str	r0, [r5, #40]	; 0x28
   1a994:	mov	r0, #1
   1a998:	strb	r0, [r2, #4]
   1a99c:	cmp	r7, #1
   1a9a0:	beq	1aa8c <__assert_fail@plt+0x9318>
   1a9a4:	ldr	r9, [sp, #24]
   1a9a8:	ldr	sl, [sp, #32]
   1a9ac:	cmp	r7, #2
   1a9b0:	mov	r8, #0
   1a9b4:	beq	1a9fc <__assert_fail@plt+0x9288>
   1a9b8:	cmp	r7, #3
   1a9bc:	mov	r7, #1
   1a9c0:	bne	1aacc <__assert_fail@plt+0x9358>
   1a9c4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a9c8:	mov	r0, r5
   1a9cc:	bl	11618 <strlen@plt>
   1a9d0:	ldr	r6, [sp, #48]	; 0x30
   1a9d4:	cmp	r0, #1
   1a9d8:	bne	1af9c <__assert_fail@plt+0x9828>
   1a9dc:	ldrb	r0, [r5]
   1a9e0:	ubfx	r1, r0, #5, #3
   1a9e4:	and	r0, r0, #31
   1a9e8:	ldr	r2, [r4, r1, lsl #2]
   1a9ec:	orr	r0, r2, r7, lsl r0
   1a9f0:	str	r0, [r4, r1, lsl #2]
   1a9f4:	str	r8, [r9]
   1a9f8:	b	1aa34 <__assert_fail@plt+0x92c0>
   1a9fc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1aa00:	mov	r0, r5
   1aa04:	bl	11618 <strlen@plt>
   1aa08:	cmp	r0, #1
   1aa0c:	mov	r3, #1
   1aa10:	bne	1af98 <__assert_fail@plt+0x9824>
   1aa14:	ldrb	r0, [r5]
   1aa18:	ubfx	r1, r0, #5, #3
   1aa1c:	and	r0, r0, #31
   1aa20:	ldr	r2, [r4, r1, lsl #2]
   1aa24:	orr	r0, r2, r3, lsl r0
   1aa28:	str	r0, [r4, r1, lsl #2]
   1aa2c:	str	r8, [r9]
   1aa30:	ldr	r6, [sp, #48]	; 0x30
   1aa34:	ldr	r2, [sp, #28]
   1aa38:	ldr	r5, [sp, #52]	; 0x34
   1aa3c:	ldrb	r0, [r2, #4]
   1aa40:	cmp	r0, #21
   1aa44:	beq	1acd0 <__assert_fail@plt+0x955c>
   1aa48:	cmp	r0, #2
   1aa4c:	ldr	r0, [sp, #44]	; 0x2c
   1aa50:	beq	1af5c <__assert_fail@plt+0x97e8>
   1aa54:	mov	r1, #3
   1aa58:	mov	r3, sl
   1aa5c:	mov	r5, r2
   1aa60:	str	r1, [fp, #-40]	; 0xffffffd8
   1aa64:	sub	r1, fp, #80	; 0x50
   1aa68:	str	r1, [fp, #-36]	; 0xffffffdc
   1aa6c:	stm	sp, {r0, r8}
   1aa70:	sub	r0, fp, #40	; 0x28
   1aa74:	mov	r1, r6
   1aa78:	bl	1bb2c <__assert_fail@plt+0xa3b8>
   1aa7c:	ldr	r2, [sp, #44]	; 0x2c
   1aa80:	cmp	r0, #0
   1aa84:	beq	1a80c <__assert_fail@plt+0x9098>
   1aa88:	b	1af54 <__assert_fail@plt+0x97e0>
   1aa8c:	ldr	r3, [sp, #40]	; 0x28
   1aa90:	ldr	r0, [sp, #16]
   1aa94:	mov	r8, #0
   1aa98:	ldr	r1, [r3, #20]
   1aa9c:	cmp	r0, r1
   1aaa0:	beq	1ac30 <__assert_fail@plt+0x94bc>
   1aaa4:	ldr	r0, [r3]
   1aaa8:	ldr	r9, [sp, #24]
   1aaac:	ldr	r6, [sp, #48]	; 0x30
   1aab0:	ldr	r5, [sp, #52]	; 0x34
   1aab4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1aab8:	ldr	sl, [sp, #32]
   1aabc:	add	r7, r1, #1
   1aac0:	str	r7, [r3, #20]
   1aac4:	str	ip, [r0, r1, lsl #2]
   1aac8:	b	1aa3c <__assert_fail@plt+0x92c8>
   1aacc:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1aad0:	ubfx	r1, r0, #5, #3
   1aad4:	and	r0, r0, #31
   1aad8:	ldr	r2, [r4, r1, lsl #2]
   1aadc:	orr	r0, r2, r7, lsl r0
   1aae0:	str	r0, [r4, r1, lsl #2]
   1aae4:	b	1aa30 <__assert_fail@plt+0x92bc>
   1aae8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1aaec:	ldrb	r8, [r0]
   1aaf0:	cmp	r6, #3
   1aaf4:	beq	1ab08 <__assert_fail@plt+0x9394>
   1aaf8:	mov	r9, #0
   1aafc:	cmp	r6, #0
   1ab00:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   1ab04:	b	1ab10 <__assert_fail@plt+0x939c>
   1ab08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ab0c:	ldrb	r9, [r0]
   1ab10:	cmp	r7, #3
   1ab14:	cmpne	r7, #0
   1ab18:	bne	1ab40 <__assert_fail@plt+0x93cc>
   1ab1c:	ldr	r0, [sp, #52]	; 0x34
   1ab20:	ldr	r0, [r0, #92]	; 0x5c
   1ab24:	cmp	r0, #2
   1ab28:	blt	1ab44 <__assert_fail@plt+0x93d0>
   1ab2c:	mov	r0, r8
   1ab30:	bl	1166c <btowc@plt>
   1ab34:	ldr	r2, [sp, #28]
   1ab38:	mov	r8, r0
   1ab3c:	b	1ab44 <__assert_fail@plt+0x93d0>
   1ab40:	ldr	r8, [fp, #-36]	; 0xffffffdc
   1ab44:	cmp	r6, #3
   1ab48:	cmpne	r6, #0
   1ab4c:	bne	1ab74 <__assert_fail@plt+0x9400>
   1ab50:	ldr	r0, [sp, #52]	; 0x34
   1ab54:	ldr	r0, [r0, #92]	; 0x5c
   1ab58:	cmp	r0, #2
   1ab5c:	blt	1ab78 <__assert_fail@plt+0x9404>
   1ab60:	mov	r0, r9
   1ab64:	bl	1166c <btowc@plt>
   1ab68:	ldr	r2, [sp, #28]
   1ab6c:	mov	r9, r0
   1ab70:	b	1ab78 <__assert_fail@plt+0x9404>
   1ab74:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1ab78:	cmn	r8, #1
   1ab7c:	mov	sl, #3
   1ab80:	cmnne	r9, #1
   1ab84:	beq	1afa0 <__assert_fail@plt+0x982c>
   1ab88:	ldr	r0, [sp, #20]
   1ab8c:	cmp	r0, #0
   1ab90:	beq	1aba0 <__assert_fail@plt+0x942c>
   1ab94:	cmp	r8, r9
   1ab98:	mov	sl, #11
   1ab9c:	bhi	1afa0 <__assert_fail@plt+0x982c>
   1aba0:	ldr	r0, [sp, #52]	; 0x34
   1aba4:	ldr	r0, [r0, #92]	; 0x5c
   1aba8:	cmp	r0, #2
   1abac:	blt	1abe4 <__assert_fail@plt+0x9470>
   1abb0:	ldr	r7, [sp, #40]	; 0x28
   1abb4:	ldr	r1, [sp, #12]
   1abb8:	ldr	r6, [sp, #48]	; 0x30
   1abbc:	ldr	r0, [r7, #32]
   1abc0:	cmp	r1, r0
   1abc4:	beq	1ac78 <__assert_fail@plt+0x9504>
   1abc8:	ldmib	r7, {r5, sl}
   1abcc:	str	r8, [r5, r0, lsl #2]
   1abd0:	ldr	r0, [r7, #32]
   1abd4:	add	r1, r0, #1
   1abd8:	str	r1, [r7, #32]
   1abdc:	str	r9, [sl, r0, lsl #2]
   1abe0:	b	1abe8 <__assert_fail@plt+0x9474>
   1abe4:	ldr	r6, [sp, #48]	; 0x30
   1abe8:	ldr	sl, [sp, #32]
   1abec:	mov	r0, #0
   1abf0:	mov	r5, #1
   1abf4:	cmp	r8, r0
   1abf8:	cmpls	r0, r9
   1abfc:	ubfxls	r1, r0, #5, #3
   1ac00:	andls	r3, r0, #31
   1ac04:	add	r0, r0, #1
   1ac08:	ldrls	r7, [r4, r1, lsl #2]
   1ac0c:	orrls	r3, r7, r5, lsl r3
   1ac10:	strls	r3, [r4, r1, lsl #2]
   1ac14:	cmp	r0, #256	; 0x100
   1ac18:	bne	1abf4 <__assert_fail@plt+0x9480>
   1ac1c:	ldr	r9, [sp, #24]
   1ac20:	ldr	r5, [sp, #52]	; 0x34
   1ac24:	mov	r8, #0
   1ac28:	str	r8, [r9]
   1ac2c:	b	1aa3c <__assert_fail@plt+0x92c8>
   1ac30:	ldr	r1, [sp, #16]
   1ac34:	mov	r0, #1
   1ac38:	orr	r1, r0, r1, lsl #1
   1ac3c:	ldr	r0, [r3]
   1ac40:	str	r1, [sp, #16]
   1ac44:	lsl	r1, r1, #2
   1ac48:	bl	23c14 <__assert_fail@plt+0x124a0>
   1ac4c:	cmp	r0, #0
   1ac50:	beq	1b6cc <__assert_fail@plt+0x9f58>
   1ac54:	ldr	r3, [sp, #40]	; 0x28
   1ac58:	ldr	r9, [sp, #24]
   1ac5c:	ldr	r6, [sp, #48]	; 0x30
   1ac60:	ldr	r2, [sp, #28]
   1ac64:	ldr	r5, [sp, #52]	; 0x34
   1ac68:	mov	r8, #0
   1ac6c:	str	r0, [r3]
   1ac70:	ldr	r1, [r3, #20]
   1ac74:	b	1aab4 <__assert_fail@plt+0x9340>
   1ac78:	ldr	r1, [sp, #12]
   1ac7c:	mov	r0, #1
   1ac80:	orr	r1, r0, r1, lsl #1
   1ac84:	ldr	r0, [r7, #4]
   1ac88:	lsl	r6, r1, #2
   1ac8c:	str	r1, [sp, #12]
   1ac90:	mov	r1, r6
   1ac94:	bl	23c14 <__assert_fail@plt+0x124a0>
   1ac98:	mov	r5, r0
   1ac9c:	ldr	r0, [r7, #8]
   1aca0:	mov	r1, r6
   1aca4:	bl	23c14 <__assert_fail@plt+0x124a0>
   1aca8:	mov	sl, r0
   1acac:	cmp	r5, #0
   1acb0:	cmpne	sl, #0
   1acb4:	beq	1b6dc <__assert_fail@plt+0x9f68>
   1acb8:	ldr	r7, [sp, #40]	; 0x28
   1acbc:	stmib	r7, {r5, sl}
   1acc0:	ldr	r0, [r7, #32]
   1acc4:	ldr	r6, [sp, #48]	; 0x30
   1acc8:	ldr	r2, [sp, #28]
   1accc:	b	1abcc <__assert_fail@plt+0x9458>
   1acd0:	ldr	r0, [r6, #40]	; 0x28
   1acd4:	add	r0, r0, sl
   1acd8:	str	r0, [r6, #40]	; 0x28
   1acdc:	ldr	r0, [sp, #36]	; 0x24
   1ace0:	cmp	r0, #0
   1ace4:	beq	1ad08 <__assert_fail@plt+0x9594>
   1ace8:	mov	r0, #0
   1acec:	add	r1, r4, r0
   1acf0:	add	r0, r0, #16
   1acf4:	vld1.32	{d16-d17}, [r1]
   1acf8:	cmp	r0, #32
   1acfc:	vmvn	q8, q8
   1ad00:	vst1.32	{d16-d17}, [r1]
   1ad04:	bne	1acec <__assert_fail@plt+0x9578>
   1ad08:	ldr	r0, [r5, #92]	; 0x5c
   1ad0c:	ldr	r8, [sp, #40]	; 0x28
   1ad10:	cmp	r0, #2
   1ad14:	blt	1ad3c <__assert_fail@plt+0x95c8>
   1ad18:	ldr	r1, [r5, #60]	; 0x3c
   1ad1c:	mov	r2, #0
   1ad20:	ldr	r3, [r1, r2, lsl #2]
   1ad24:	ldr	r7, [r4, r2, lsl #2]
   1ad28:	and	r3, r7, r3
   1ad2c:	str	r3, [r4, r2, lsl #2]
   1ad30:	add	r2, r2, #1
   1ad34:	cmp	r2, #8
   1ad38:	bne	1ad20 <__assert_fail@plt+0x95ac>
   1ad3c:	ldr	r1, [r8, #20]
   1ad40:	cmp	r1, #0
   1ad44:	bne	1ad6c <__assert_fail@plt+0x95f8>
   1ad48:	ldr	r1, [r8, #24]
   1ad4c:	cmp	r1, #0
   1ad50:	bne	1ad6c <__assert_fail@plt+0x95f8>
   1ad54:	ldr	r1, [r8, #28]
   1ad58:	cmp	r1, #0
   1ad5c:	bne	1ad6c <__assert_fail@plt+0x95f8>
   1ad60:	ldr	r1, [r8, #32]
   1ad64:	cmp	r1, #0
   1ad68:	beq	1af04 <__assert_fail@plt+0x9790>
   1ad6c:	ldrb	r0, [r5, #88]	; 0x58
   1ad70:	add	r3, sp, #64	; 0x40
   1ad74:	mov	r1, #0
   1ad78:	mov	r2, #0
   1ad7c:	orr	r0, r0, #2
   1ad80:	strb	r0, [r5, #88]	; 0x58
   1ad84:	mov	r0, #6
   1ad88:	str	r8, [sp, #64]	; 0x40
   1ad8c:	str	r0, [sp, #68]	; 0x44
   1ad90:	mov	r0, r5
   1ad94:	mov	r5, #0
   1ad98:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ad9c:	ldr	r6, [sp, #48]	; 0x30
   1ada0:	cmp	r0, #0
   1ada4:	beq	1ae28 <__assert_fail@plt+0x96b4>
   1ada8:	mov	r7, r0
   1adac:	ldr	r0, [r4, r5, lsl #2]
   1adb0:	cmp	r0, #0
   1adb4:	bne	1add0 <__assert_fail@plt+0x965c>
   1adb8:	add	r5, r5, #1
   1adbc:	cmp	r5, #7
   1adc0:	bls	1adac <__assert_fail@plt+0x9638>
   1adc4:	mov	r0, r4
   1adc8:	bl	13c04 <__assert_fail@plt+0x2490>
   1adcc:	b	1afc4 <__assert_fail@plt+0x9850>
   1add0:	mov	r0, #3
   1add4:	str	r4, [sp, #64]	; 0x40
   1add8:	add	r3, sp, #64	; 0x40
   1addc:	mov	r1, #0
   1ade0:	mov	r2, #0
   1ade4:	mov	r5, #0
   1ade8:	str	r0, [sp, #68]	; 0x44
   1adec:	ldr	r0, [sp, #52]	; 0x34
   1adf0:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1adf4:	cmp	r0, #0
   1adf8:	beq	1ae28 <__assert_fail@plt+0x96b4>
   1adfc:	mov	r1, r0
   1ae00:	mov	r0, #10
   1ae04:	sub	r3, fp, #80	; 0x50
   1ae08:	mov	r2, r7
   1ae0c:	str	r0, [fp, #-76]	; 0xffffffb4
   1ae10:	ldr	r0, [sp, #52]	; 0x34
   1ae14:	str	r5, [fp, #-80]	; 0xffffffb0
   1ae18:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ae1c:	mov	r7, r0
   1ae20:	cmp	r0, #0
   1ae24:	bne	1afc4 <__assert_fail@plt+0x9850>
   1ae28:	mov	r0, #12
   1ae2c:	b	1af6c <__assert_fail@plt+0x97f8>
   1ae30:	mov	r4, #9
   1ae34:	mov	r0, #6
   1ae38:	ldr	r5, [sp, #52]	; 0x34
   1ae3c:	str	r0, [r7]
   1ae40:	mov	r1, #0
   1ae44:	mov	r2, #0
   1ae48:	mov	r3, r7
   1ae4c:	mov	sl, #0
   1ae50:	mov	r0, r5
   1ae54:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ae58:	mov	r8, r0
   1ae5c:	mov	r0, r5
   1ae60:	mov	r1, #0
   1ae64:	mov	r2, #0
   1ae68:	mov	r3, r7
   1ae6c:	str	r4, [r7]
   1ae70:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ae74:	mov	r7, r0
   1ae78:	mov	r0, #10
   1ae7c:	sub	r3, fp, #80	; 0x50
   1ae80:	mov	r1, r8
   1ae84:	str	r0, [fp, #-76]	; 0xffffffb4
   1ae88:	mov	r0, r5
   1ae8c:	mov	r2, r7
   1ae90:	str	sl, [fp, #-80]	; 0xffffffb0
   1ae94:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ae98:	cmp	r8, #0
   1ae9c:	cmpne	r7, #0
   1aea0:	bne	1aec4 <__assert_fail@plt+0x9750>
   1aea4:	mov	r0, #12
   1aea8:	str	r0, [r9]
   1aeac:	b	1b574 <__assert_fail@plt+0x9e00>
   1aeb0:	mov	r1, #0
   1aeb4:	mov	r2, #0
   1aeb8:	mov	r3, r7
   1aebc:	mov	sl, #0
   1aec0:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1aec4:	mov	r5, r0
   1aec8:	cmp	r0, #0
   1aecc:	beq	1aea4 <__assert_fail@plt+0x9730>
   1aed0:	ldr	r0, [sp, #28]
   1aed4:	ldr	r2, [sp, #44]	; 0x2c
   1aed8:	mov	r1, r6
   1aedc:	bl	198c0 <__assert_fail@plt+0x814c>
   1aee0:	ldr	r1, [r6, #40]	; 0x28
   1aee4:	mov	sl, r5
   1aee8:	add	r0, r1, r0
   1aeec:	str	r0, [r6, #40]	; 0x28
   1aef0:	b	1b574 <__assert_fail@plt+0x9e00>
   1aef4:	mov	r6, r5
   1aef8:	b	1aff0 <__assert_fail@plt+0x987c>
   1aefc:	mov	r6, r5
   1af00:	b	1afe8 <__assert_fail@plt+0x9874>
   1af04:	cmp	r0, #2
   1af08:	blt	1af24 <__assert_fail@plt+0x97b0>
   1af0c:	ldr	r0, [r8, #36]	; 0x24
   1af10:	cmp	r0, #0
   1af14:	bne	1ad6c <__assert_fail@plt+0x95f8>
   1af18:	ldrb	r0, [r8, #16]
   1af1c:	tst	r0, #1
   1af20:	bne	1ad6c <__assert_fail@plt+0x95f8>
   1af24:	mov	r0, r8
   1af28:	bl	18d9c <__assert_fail@plt+0x7628>
   1af2c:	mov	r0, #3
   1af30:	str	r4, [sp, #64]	; 0x40
   1af34:	add	r3, sp, #64	; 0x40
   1af38:	mov	r1, #0
   1af3c:	mov	r2, #0
   1af40:	str	r0, [sp, #68]	; 0x44
   1af44:	mov	r0, r5
   1af48:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1af4c:	ldr	r6, [sp, #48]	; 0x30
   1af50:	b	1ae1c <__assert_fail@plt+0x96a8>
   1af54:	mov	sl, r0
   1af58:	b	1af60 <__assert_fail@plt+0x97ec>
   1af5c:	mov	sl, #7
   1af60:	str	r9, [sp, #24]
   1af64:	b	1afa0 <__assert_fail@plt+0x982c>
   1af68:	mov	r0, #2
   1af6c:	str	r0, [r9]
   1af70:	b	1afb0 <__assert_fail@plt+0x983c>
   1af74:	mov	r0, #6
   1af78:	b	1aea8 <__assert_fail@plt+0x9734>
   1af7c:	mov	r0, r4
   1af80:	bl	13c04 <__assert_fail@plt+0x2490>
   1af84:	mov	r0, r8
   1af88:	bl	13c04 <__assert_fail@plt+0x2490>
   1af8c:	mov	r0, #12
   1af90:	str	r0, [r9]
   1af94:	b	1afc4 <__assert_fail@plt+0x9850>
   1af98:	str	r9, [sp, #24]
   1af9c:	mov	sl, #3
   1afa0:	ldr	r9, [sp, #24]
   1afa4:	ldr	r6, [sp, #48]	; 0x30
   1afa8:	str	sl, [r9]
   1afac:	ldr	r8, [sp, #40]	; 0x28
   1afb0:	mov	r0, r4
   1afb4:	bl	13c04 <__assert_fail@plt+0x2490>
   1afb8:	mov	r0, r8
   1afbc:	bl	18d9c <__assert_fail@plt+0x7628>
   1afc0:	mov	r7, #0
   1afc4:	mov	r4, r7
   1afc8:	cmp	r7, #0
   1afcc:	bne	1afe8 <__assert_fail@plt+0x9874>
   1afd0:	ldr	r0, [r9]
   1afd4:	ldr	r2, [sp, #44]	; 0x2c
   1afd8:	ldr	r3, [sp, #28]
   1afdc:	cmp	r0, #0
   1afe0:	beq	1aff0 <__assert_fail@plt+0x987c>
   1afe4:	b	1b570 <__assert_fail@plt+0x9dfc>
   1afe8:	ldr	r2, [sp, #44]	; 0x2c
   1afec:	ldr	r3, [sp, #28]
   1aff0:	mov	r0, r3
   1aff4:	mov	r1, r6
   1aff8:	str	r9, [sp, #24]
   1affc:	bl	198c0 <__assert_fail@plt+0x814c>
   1b000:	ldr	r1, [r6, #40]	; 0x28
   1b004:	ldr	r2, [sp, #44]	; 0x2c
   1b008:	ldr	r3, [sp, #28]
   1b00c:	sub	r7, fp, #80	; 0x50
   1b010:	add	r0, r1, r0
   1b014:	str	r0, [r6, #40]	; 0x28
   1b018:	and	r0, r2, #2097152	; 0x200000
   1b01c:	str	r0, [sp, #20]
   1b020:	and	r0, r2, #16777216	; 0x1000000
   1b024:	str	r0, [sp, #32]
   1b028:	ldrb	r0, [r3, #4]
   1b02c:	cmp	r0, #23
   1b030:	bhi	1b504 <__assert_fail@plt+0x9d90>
   1b034:	movw	r6, #2048	; 0x800
   1b038:	mov	r1, #1
   1b03c:	movt	r6, #140	; 0x8c
   1b040:	tst	r6, r1, lsl r0
   1b044:	beq	1b504 <__assert_fail@plt+0x9d90>
   1b048:	cmp	r0, #23
   1b04c:	bne	1b0a4 <__assert_fail@plt+0x9930>
   1b050:	ldr	r0, [sp, #48]	; 0x30
   1b054:	ldr	sl, [r3]
   1b058:	ldr	r8, [r3, #4]
   1b05c:	mov	r1, r3
   1b060:	mov	r5, r3
   1b064:	ldr	r9, [r0, #40]	; 0x28
   1b068:	bl	1c670 <__assert_fail@plt+0xaefc>
   1b06c:	cmn	r0, #1
   1b070:	bne	1b0c0 <__assert_fail@plt+0x994c>
   1b074:	ldrb	r0, [r5, #4]
   1b078:	mov	r3, r5
   1b07c:	cmp	r0, #1
   1b080:	ldrbeq	r1, [r3]
   1b084:	cmpeq	r1, #44	; 0x2c
   1b088:	beq	1b128 <__assert_fail@plt+0x99b4>
   1b08c:	ldr	r0, [sp, #24]
   1b090:	ldr	r2, [sp, #44]	; 0x2c
   1b094:	mov	r1, #10
   1b098:	mov	r5, #0
   1b09c:	str	r1, [r0]
   1b0a0:	b	1b478 <__assert_fail@plt+0x9d04>
   1b0a4:	cmp	r0, #19
   1b0a8:	sub	r0, r0, #18
   1b0ac:	mvn	sl, #0
   1b0b0:	clz	r0, r0
   1b0b4:	movweq	sl, #1
   1b0b8:	lsr	r6, r0, #5
   1b0bc:	b	1b188 <__assert_fail@plt+0x9a14>
   1b0c0:	str	sl, [sp, #40]	; 0x28
   1b0c4:	mov	r6, r0
   1b0c8:	cmn	r0, #2
   1b0cc:	mov	r3, r5
   1b0d0:	ldr	r2, [sp, #44]	; 0x2c
   1b0d4:	beq	1b0fc <__assert_fail@plt+0x9988>
   1b0d8:	ldr	r0, [r3, #4]
   1b0dc:	uxtb	r0, r0
   1b0e0:	mov	sl, r6
   1b0e4:	cmp	r0, #24
   1b0e8:	beq	1b158 <__assert_fail@plt+0x99e4>
   1b0ec:	cmp	r0, #1
   1b0f0:	ldrbeq	r0, [r3]
   1b0f4:	cmpeq	r0, #44	; 0x2c
   1b0f8:	beq	1b138 <__assert_fail@plt+0x99c4>
   1b0fc:	ldr	r0, [sp, #20]
   1b100:	cmp	r0, #0
   1b104:	beq	1b4d0 <__assert_fail@plt+0x9d5c>
   1b108:	ldr	r0, [sp, #48]	; 0x30
   1b10c:	mov	r5, r4
   1b110:	str	r9, [r0, #40]	; 0x28
   1b114:	mov	r0, #1
   1b118:	bfi	r8, r0, #0, #8
   1b11c:	ldr	r0, [sp, #40]	; 0x28
   1b120:	stm	r3, {r0, r8}
   1b124:	b	1b478 <__assert_fail@plt+0x9d04>
   1b128:	str	sl, [sp, #40]	; 0x28
   1b12c:	mov	r6, #0
   1b130:	ldr	r2, [sp, #44]	; 0x2c
   1b134:	b	1b0dc <__assert_fail@plt+0x9968>
   1b138:	ldr	r0, [sp, #48]	; 0x30
   1b13c:	mov	r1, r3
   1b140:	bl	1c670 <__assert_fail@plt+0xaefc>
   1b144:	ldr	r3, [sp, #28]
   1b148:	ldr	r2, [sp, #44]	; 0x2c
   1b14c:	mov	sl, r0
   1b150:	cmn	r0, #2
   1b154:	beq	1b0fc <__assert_fail@plt+0x9988>
   1b158:	cmn	sl, #1
   1b15c:	beq	1b168 <__assert_fail@plt+0x99f4>
   1b160:	cmp	r6, sl
   1b164:	bgt	1b4c4 <__assert_fail@plt+0x9d50>
   1b168:	ldrb	r0, [r3, #4]
   1b16c:	cmp	r0, #24
   1b170:	bne	1b4c4 <__assert_fail@plt+0x9d50>
   1b174:	cmn	sl, #1
   1b178:	mov	r0, sl
   1b17c:	moveq	r0, r6
   1b180:	cmp	r0, #32768	; 0x8000
   1b184:	bge	1b4f0 <__assert_fail@plt+0x9d7c>
   1b188:	ldr	r5, [sp, #48]	; 0x30
   1b18c:	mov	r0, r3
   1b190:	mov	r1, r5
   1b194:	bl	198c0 <__assert_fail@plt+0x814c>
   1b198:	ldr	r1, [r5, #40]	; 0x28
   1b19c:	cmp	r4, #0
   1b1a0:	add	r0, r1, r0
   1b1a4:	str	r0, [r5, #40]	; 0x28
   1b1a8:	mov	r5, #0
   1b1ac:	beq	1b3b0 <__assert_fail@plt+0x9c3c>
   1b1b0:	orrs	r0, sl, r6
   1b1b4:	beq	1b35c <__assert_fail@plt+0x9be8>
   1b1b8:	mov	r0, #0
   1b1bc:	cmp	r6, #1
   1b1c0:	mov	r8, r4
   1b1c4:	str	r0, [sp, #40]	; 0x28
   1b1c8:	str	r4, [sp, #36]	; 0x24
   1b1cc:	mov	r4, #10
   1b1d0:	bge	1b3bc <__assert_fail@plt+0x9c48>
   1b1d4:	ldrb	r0, [r8, #24]
   1b1d8:	cmp	r0, #17
   1b1dc:	ldr	r0, [sp, #52]	; 0x34
   1b1e0:	bne	1b250 <__assert_fail@plt+0x9adc>
   1b1e4:	ldr	r5, [r8, #20]
   1b1e8:	mov	r2, r8
   1b1ec:	mov	r1, r2
   1b1f0:	ldr	r2, [r2, #4]
   1b1f4:	cmp	r2, #0
   1b1f8:	bne	1b1ec <__assert_fail@plt+0x9a78>
   1b1fc:	ldr	r2, [r1, #8]
   1b200:	cmp	r2, #0
   1b204:	bne	1b1ec <__assert_fail@plt+0x9a78>
   1b208:	ldr	r2, [r1, #24]
   1b20c:	uxtb	r3, r2
   1b210:	cmp	r3, #17
   1b214:	ldreq	r3, [r1, #20]
   1b218:	cmpeq	r3, r5
   1b21c:	orreq	r2, r2, #524288	; 0x80000
   1b220:	streq	r2, [r1, #24]
   1b224:	ldr	r3, [r1]
   1b228:	cmp	r3, #0
   1b22c:	beq	1b250 <__assert_fail@plt+0x9adc>
   1b230:	ldr	r2, [r3, #8]
   1b234:	cmp	r2, r1
   1b238:	mov	r1, r3
   1b23c:	beq	1b208 <__assert_fail@plt+0x9a94>
   1b240:	cmp	r2, #0
   1b244:	mov	r1, r3
   1b248:	beq	1b208 <__assert_fail@plt+0x9a94>
   1b24c:	b	1b1ec <__assert_fail@plt+0x9a78>
   1b250:	mov	r1, #0
   1b254:	cmn	sl, #1
   1b258:	mov	r2, #0
   1b25c:	mov	r3, r7
   1b260:	str	r1, [fp, #-80]	; 0xffffffb0
   1b264:	mov	r1, #10
   1b268:	movweq	r1, #11
   1b26c:	str	r1, [fp, #-76]	; 0xffffffb4
   1b270:	mov	r1, r8
   1b274:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b278:	cmp	r0, #0
   1b27c:	beq	1b45c <__assert_fail@plt+0x9ce8>
   1b280:	mov	r5, r0
   1b284:	add	r0, r6, #2
   1b288:	cmp	r0, sl
   1b28c:	ble	1b2c4 <__assert_fail@plt+0x9b50>
   1b290:	ldr	r1, [sp, #40]	; 0x28
   1b294:	cmp	r1, #0
   1b298:	beq	1b348 <__assert_fail@plt+0x9bd4>
   1b29c:	mov	r0, #16
   1b2a0:	mov	r2, r5
   1b2a4:	mov	r3, r7
   1b2a8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b2ac:	mov	r0, #0
   1b2b0:	str	r0, [fp, #-80]	; 0xffffffb0
   1b2b4:	ldr	r0, [sp, #52]	; 0x34
   1b2b8:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b2bc:	mov	r5, r0
   1b2c0:	b	1b46c <__assert_fail@plt+0x9cf8>
   1b2c4:	add	r6, r6, #1
   1b2c8:	ldr	r9, [sp, #52]	; 0x34
   1b2cc:	mov	r0, r8
   1b2d0:	mov	r1, r9
   1b2d4:	bl	1c728 <__assert_fail@plt+0xafb4>
   1b2d8:	mov	r8, r0
   1b2dc:	mov	r0, #16
   1b2e0:	mov	r1, r5
   1b2e4:	mov	r3, r7
   1b2e8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b2ec:	mov	r0, #0
   1b2f0:	mov	r2, r8
   1b2f4:	str	r0, [fp, #-80]	; 0xffffffb0
   1b2f8:	mov	r0, r9
   1b2fc:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b300:	cmp	r8, #0
   1b304:	movne	r1, r0
   1b308:	cmpne	r0, #0
   1b30c:	beq	1b45c <__assert_fail@plt+0x9ce8>
   1b310:	mov	r0, #0
   1b314:	str	r4, [fp, #-76]	; 0xffffffb4
   1b318:	mov	r2, #0
   1b31c:	mov	r3, r7
   1b320:	str	r0, [fp, #-80]	; 0xffffffb0
   1b324:	ldr	r0, [sp, #52]	; 0x34
   1b328:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b32c:	cmp	r0, #0
   1b330:	beq	1b45c <__assert_fail@plt+0x9ce8>
   1b334:	add	r6, r6, #1
   1b338:	mov	r5, r0
   1b33c:	cmp	r6, sl
   1b340:	blt	1b2c8 <__assert_fail@plt+0x9b54>
   1b344:	b	1b290 <__assert_fail@plt+0x9b1c>
   1b348:	ldr	r2, [sp, #44]	; 0x2c
   1b34c:	ldr	r3, [sp, #28]
   1b350:	clz	r0, r5
   1b354:	lsr	r0, r0, #5
   1b358:	b	1b498 <__assert_fail@plt+0x9d24>
   1b35c:	mov	r0, r4
   1b360:	mov	r6, r0
   1b364:	ldr	r0, [r0, #4]
   1b368:	cmp	r0, #0
   1b36c:	bne	1b360 <__assert_fail@plt+0x9bec>
   1b370:	ldr	r0, [r6, #8]
   1b374:	cmp	r0, #0
   1b378:	bne	1b360 <__assert_fail@plt+0x9bec>
   1b37c:	add	r0, r6, #20
   1b380:	bl	18d0c <__assert_fail@plt+0x7598>
   1b384:	ldr	r1, [r6]
   1b388:	cmp	r1, #0
   1b38c:	beq	1b3b0 <__assert_fail@plt+0x9c3c>
   1b390:	ldr	r0, [r1, #8]
   1b394:	cmp	r0, r6
   1b398:	mov	r6, r1
   1b39c:	beq	1b37c <__assert_fail@plt+0x9c08>
   1b3a0:	cmp	r0, #0
   1b3a4:	mov	r6, r1
   1b3a8:	beq	1b37c <__assert_fail@plt+0x9c08>
   1b3ac:	b	1b360 <__assert_fail@plt+0x9bec>
   1b3b0:	ldr	r2, [sp, #44]	; 0x2c
   1b3b4:	ldr	r3, [sp, #28]
   1b3b8:	b	1b478 <__assert_fail@plt+0x9d04>
   1b3bc:	ldr	r9, [sp, #36]	; 0x24
   1b3c0:	str	r9, [sp, #40]	; 0x28
   1b3c4:	beq	1b430 <__assert_fail@plt+0x9cbc>
   1b3c8:	ldr	r0, [sp, #36]	; 0x24
   1b3cc:	mov	r5, #1
   1b3d0:	mov	r9, r0
   1b3d4:	str	r0, [sp, #40]	; 0x28
   1b3d8:	ldr	r8, [sp, #52]	; 0x34
   1b3dc:	mov	r0, r9
   1b3e0:	mov	r1, r8
   1b3e4:	bl	1c728 <__assert_fail@plt+0xafb4>
   1b3e8:	ldr	r1, [sp, #40]	; 0x28
   1b3ec:	mov	r9, r0
   1b3f0:	mov	r0, #16
   1b3f4:	mov	r3, r7
   1b3f8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b3fc:	mov	r0, #0
   1b400:	mov	r2, r9
   1b404:	str	r0, [fp, #-80]	; 0xffffffb0
   1b408:	mov	r0, r8
   1b40c:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b410:	str	r0, [sp, #40]	; 0x28
   1b414:	cmp	r9, #0
   1b418:	ldrne	r0, [sp, #40]	; 0x28
   1b41c:	cmpne	r0, #0
   1b420:	beq	1b45c <__assert_fail@plt+0x9ce8>
   1b424:	add	r5, r5, #1
   1b428:	cmp	r5, r6
   1b42c:	blt	1b3d8 <__assert_fail@plt+0x9c64>
   1b430:	cmp	r6, sl
   1b434:	bne	1b444 <__assert_fail@plt+0x9cd0>
   1b438:	ldr	r2, [sp, #44]	; 0x2c
   1b43c:	ldr	r5, [sp, #40]	; 0x28
   1b440:	b	1b34c <__assert_fail@plt+0x9bd8>
   1b444:	ldr	r1, [sp, #52]	; 0x34
   1b448:	mov	r0, r9
   1b44c:	bl	1c728 <__assert_fail@plt+0xafb4>
   1b450:	mov	r8, r0
   1b454:	cmp	r0, #0
   1b458:	bne	1b1d4 <__assert_fail@plt+0x9a60>
   1b45c:	ldr	r0, [sp, #24]
   1b460:	mov	r1, #12
   1b464:	mov	r5, #0
   1b468:	str	r1, [r0]
   1b46c:	ldr	r2, [sp, #44]	; 0x2c
   1b470:	ldr	r3, [sp, #28]
   1b474:	ldr	r4, [sp, #36]	; 0x24
   1b478:	clz	r0, r5
   1b47c:	cmp	r5, #0
   1b480:	lsr	r0, r0, #5
   1b484:	bne	1b498 <__assert_fail@plt+0x9d24>
   1b488:	ldr	r1, [sp, #24]
   1b48c:	ldr	r1, [r1]
   1b490:	cmp	r1, #0
   1b494:	bne	1b580 <__assert_fail@plt+0x9e0c>
   1b498:	ldr	r1, [sp, #32]
   1b49c:	mov	r4, r5
   1b4a0:	cmp	r1, #0
   1b4a4:	beq	1b028 <__assert_fail@plt+0x98b4>
   1b4a8:	ldrb	r1, [r3, #4]
   1b4ac:	cmp	r1, #23
   1b4b0:	beq	1b50c <__assert_fail@plt+0x9d98>
   1b4b4:	cmp	r1, #11
   1b4b8:	mov	r4, r5
   1b4bc:	bne	1b028 <__assert_fail@plt+0x98b4>
   1b4c0:	b	1b50c <__assert_fail@plt+0x9d98>
   1b4c4:	ldr	r0, [sp, #24]
   1b4c8:	mov	r1, #10
   1b4cc:	b	1b4f8 <__assert_fail@plt+0x9d84>
   1b4d0:	ldrb	r0, [r3, #4]
   1b4d4:	ldr	r1, [sp, #24]
   1b4d8:	mov	r5, #0
   1b4dc:	cmp	r0, #2
   1b4e0:	mov	r0, #10
   1b4e4:	movweq	r0, #9
   1b4e8:	str	r0, [r1]
   1b4ec:	b	1b478 <__assert_fail@plt+0x9d04>
   1b4f0:	ldr	r0, [sp, #24]
   1b4f4:	mov	r1, #15
   1b4f8:	str	r1, [r0]
   1b4fc:	mov	r5, #0
   1b500:	b	1b478 <__assert_fail@plt+0x9d04>
   1b504:	mov	sl, r4
   1b508:	b	1b574 <__assert_fail@plt+0x9e00>
   1b50c:	cmp	r0, #0
   1b510:	bne	1b564 <__assert_fail@plt+0x9df0>
   1b514:	mov	r4, r5
   1b518:	ldr	r5, [r5, #4]
   1b51c:	cmp	r5, #0
   1b520:	bne	1b514 <__assert_fail@plt+0x9da0>
   1b524:	ldr	r5, [r4, #8]
   1b528:	cmp	r5, #0
   1b52c:	bne	1b514 <__assert_fail@plt+0x9da0>
   1b530:	add	r0, r4, #20
   1b534:	bl	18d0c <__assert_fail@plt+0x7598>
   1b538:	ldr	r0, [r4]
   1b53c:	cmp	r0, #0
   1b540:	beq	1b564 <__assert_fail@plt+0x9df0>
   1b544:	ldr	r5, [r0, #8]
   1b548:	cmp	r5, r4
   1b54c:	mov	r4, r0
   1b550:	beq	1b530 <__assert_fail@plt+0x9dbc>
   1b554:	cmp	r5, #0
   1b558:	mov	r4, r0
   1b55c:	beq	1b530 <__assert_fail@plt+0x9dbc>
   1b560:	b	1b514 <__assert_fail@plt+0x9da0>
   1b564:	ldr	r1, [sp, #24]
   1b568:	mov	r0, #13
   1b56c:	str	r0, [r1]
   1b570:	mov	sl, #0
   1b574:	mov	r0, sl
   1b578:	sub	sp, fp, #28
   1b57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b580:	mov	sl, #0
   1b584:	cmp	r4, #0
   1b588:	beq	1b574 <__assert_fail@plt+0x9e00>
   1b58c:	mov	r5, r4
   1b590:	ldr	r4, [r4, #4]
   1b594:	cmp	r4, #0
   1b598:	bne	1b58c <__assert_fail@plt+0x9e18>
   1b59c:	ldr	r4, [r5, #8]
   1b5a0:	cmp	r4, #0
   1b5a4:	bne	1b58c <__assert_fail@plt+0x9e18>
   1b5a8:	add	r0, r5, #20
   1b5ac:	bl	18d0c <__assert_fail@plt+0x7598>
   1b5b0:	ldr	r0, [r5]
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1b574 <__assert_fail@plt+0x9e00>
   1b5bc:	ldr	r4, [r0, #8]
   1b5c0:	cmp	r4, r5
   1b5c4:	mov	r5, r0
   1b5c8:	beq	1b5a8 <__assert_fail@plt+0x9e34>
   1b5cc:	cmp	r4, #0
   1b5d0:	mov	r5, r0
   1b5d4:	beq	1b5a8 <__assert_fail@plt+0x9e34>
   1b5d8:	b	1b58c <__assert_fail@plt+0x9e18>
   1b5dc:	mov	r4, #0
   1b5e0:	mov	r8, #0
   1b5e4:	b	1b5f0 <__assert_fail@plt+0x9e7c>
   1b5e8:	mov	r8, #4
   1b5ec:	mov	r4, #128	; 0x80
   1b5f0:	bl	11600 <__ctype_b_loc@plt>
   1b5f4:	ldr	r0, [r0]
   1b5f8:	ldr	r7, [sp, #28]
   1b5fc:	mov	r1, #1
   1b600:	add	r5, r0, r4, lsl #1
   1b604:	ldr	r0, [sp, #52]	; 0x34
   1b608:	mov	r3, #0
   1b60c:	add	r0, r0, r8, lsl #2
   1b610:	add	r2, r0, #96	; 0x60
   1b614:	mov	r0, r5
   1b618:	add	r6, r4, r3
   1b61c:	cmp	r6, #95	; 0x5f
   1b620:	beq	1b630 <__assert_fail@plt+0x9ebc>
   1b624:	ldrh	r6, [r0]
   1b628:	ands	r6, r6, #8
   1b62c:	beq	1b63c <__assert_fail@plt+0x9ec8>
   1b630:	ldr	r6, [r2]
   1b634:	orr	r6, r6, r1, lsl r3
   1b638:	str	r6, [r2]
   1b63c:	add	r3, r3, #1
   1b640:	add	r0, r0, #2
   1b644:	cmp	r3, #32
   1b648:	bne	1b618 <__assert_fail@plt+0x9ea4>
   1b64c:	add	r8, r8, #1
   1b650:	add	r5, r5, #64	; 0x40
   1b654:	add	r4, r4, #32
   1b658:	cmp	r8, #8
   1b65c:	bne	1b604 <__assert_fail@plt+0x9e90>
   1b660:	b	1a570 <__assert_fail@plt+0x8dfc>
   1b664:	cmp	r1, #0
   1b668:	beq	1b6bc <__assert_fail@plt+0x9f48>
   1b66c:	mov	r5, r1
   1b670:	ldr	r1, [r1, #4]
   1b674:	cmp	r1, #0
   1b678:	bne	1b66c <__assert_fail@plt+0x9ef8>
   1b67c:	ldr	r1, [r5, #8]
   1b680:	cmp	r1, #0
   1b684:	bne	1b66c <__assert_fail@plt+0x9ef8>
   1b688:	add	r0, r5, #20
   1b68c:	bl	18d0c <__assert_fail@plt+0x7598>
   1b690:	ldr	r0, [r5]
   1b694:	cmp	r0, #0
   1b698:	beq	1b6bc <__assert_fail@plt+0x9f48>
   1b69c:	ldr	r1, [r0, #8]
   1b6a0:	cmp	r1, r5
   1b6a4:	mov	r5, r0
   1b6a8:	beq	1b688 <__assert_fail@plt+0x9f14>
   1b6ac:	cmp	r1, #0
   1b6b0:	mov	r5, r0
   1b6b4:	beq	1b688 <__assert_fail@plt+0x9f14>
   1b6b8:	b	1b66c <__assert_fail@plt+0x9ef8>
   1b6bc:	mov	r0, #8
   1b6c0:	b	1aea8 <__assert_fail@plt+0x9734>
   1b6c4:	mov	sl, r0
   1b6c8:	b	1afa0 <__assert_fail@plt+0x982c>
   1b6cc:	ldr	r9, [sp, #24]
   1b6d0:	ldr	r6, [sp, #48]	; 0x30
   1b6d4:	ldr	r8, [sp, #40]	; 0x28
   1b6d8:	b	1ae28 <__assert_fail@plt+0x96b4>
   1b6dc:	mov	r0, r5
   1b6e0:	bl	13c04 <__assert_fail@plt+0x2490>
   1b6e4:	mov	r0, sl
   1b6e8:	bl	13c04 <__assert_fail@plt+0x2490>
   1b6ec:	mov	sl, #12
   1b6f0:	b	1afa0 <__assert_fail@plt+0x982c>
   1b6f4:	push	{r4, r5, r6, r7, fp, lr}
   1b6f8:	add	fp, sp, #16
   1b6fc:	mov	r5, r1
   1b700:	ldr	r1, [r0, #64]	; 0x40
   1b704:	mov	r6, r3
   1b708:	mov	r4, r2
   1b70c:	mov	r7, r0
   1b710:	cmp	r1, #31
   1b714:	beq	1b76c <__assert_fail@plt+0x9ff8>
   1b718:	ldr	r0, [r7, #56]	; 0x38
   1b71c:	add	r2, r1, #1
   1b720:	add	r0, r0, r1, lsl #5
   1b724:	mov	r1, #0
   1b728:	cmp	r5, #0
   1b72c:	str	r2, [r7, #64]	; 0x40
   1b730:	str	r1, [r0, #4]!
   1b734:	str	r5, [r0, #4]
   1b738:	str	r4, [r0, #8]
   1b73c:	ldm	r6, {r2, r3}
   1b740:	str	r1, [r0, #12]
   1b744:	str	r1, [r0, #16]
   1b748:	mvn	r1, #0
   1b74c:	str	r1, [r0, #28]
   1b750:	bic	r1, r3, #786432	; 0xc0000
   1b754:	str	r2, [r0, #20]
   1b758:	str	r1, [r0, #24]
   1b75c:	strne	r0, [r5]
   1b760:	cmp	r4, #0
   1b764:	strne	r0, [r4]
   1b768:	pop	{r4, r5, r6, r7, fp, pc}
   1b76c:	mov	r0, #996	; 0x3e4
   1b770:	bl	23be4 <__assert_fail@plt+0x12470>
   1b774:	cmp	r0, #0
   1b778:	moveq	r0, #0
   1b77c:	popeq	{r4, r5, r6, r7, fp, pc}
   1b780:	ldr	r1, [r7, #56]	; 0x38
   1b784:	str	r1, [r0]
   1b788:	mov	r1, #0
   1b78c:	str	r1, [r7, #64]	; 0x40
   1b790:	str	r0, [r7, #56]	; 0x38
   1b794:	b	1b71c <__assert_fail@plt+0x9fa8>
   1b798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b79c:	add	fp, sp, #28
   1b7a0:	sub	sp, sp, #28
   1b7a4:	mov	sl, r1
   1b7a8:	mov	r9, r0
   1b7ac:	mov	r7, #0
   1b7b0:	mov	r0, #32
   1b7b4:	mov	r1, #1
   1b7b8:	mov	r8, r3
   1b7bc:	mov	r4, r2
   1b7c0:	str	r7, [sp, #16]
   1b7c4:	bl	23b90 <__assert_fail@plt+0x1241c>
   1b7c8:	ldr	r1, [fp, #12]
   1b7cc:	cmp	r0, #0
   1b7d0:	beq	1b980 <__assert_fail@plt+0xa20c>
   1b7d4:	mov	r5, r0
   1b7d8:	mov	r0, #40	; 0x28
   1b7dc:	mov	r1, #1
   1b7e0:	bl	23b90 <__assert_fail@plt+0x1241c>
   1b7e4:	cmp	r0, #0
   1b7e8:	beq	1b988 <__assert_fail@plt+0xa214>
   1b7ec:	mov	r6, r0
   1b7f0:	ldrb	r0, [r0, #16]
   1b7f4:	ldr	r1, [fp, #8]
   1b7f8:	mov	r7, #0
   1b7fc:	add	r3, sp, #16
   1b800:	mov	r2, r6
   1b804:	and	r0, r0, #254	; 0xfe
   1b808:	orr	r0, r0, r1
   1b80c:	mov	r1, r5
   1b810:	strb	r0, [r6, #16]
   1b814:	mov	r0, sl
   1b818:	stm	sp, {r4, r7}
   1b81c:	bl	1bde4 <__assert_fail@plt+0xa670>
   1b820:	cmp	r0, #0
   1b824:	bne	1b9a4 <__assert_fail@plt+0xa230>
   1b828:	ldrb	r0, [r8]
   1b82c:	cmp	r0, #0
   1b830:	beq	1b85c <__assert_fail@plt+0xa0e8>
   1b834:	add	r1, r8, #1
   1b838:	mov	r2, #1
   1b83c:	ubfx	r3, r0, #5, #3
   1b840:	and	r0, r0, #31
   1b844:	ldr	r7, [r5, r3, lsl #2]
   1b848:	orr	r0, r7, r2, lsl r0
   1b84c:	str	r0, [r5, r3, lsl #2]
   1b850:	ldrb	r0, [r1], #1
   1b854:	cmp	r0, #0
   1b858:	bne	1b83c <__assert_fail@plt+0xa0c8>
   1b85c:	ldr	r0, [fp, #8]
   1b860:	cmp	r0, #0
   1b864:	beq	1b888 <__assert_fail@plt+0xa114>
   1b868:	mov	r0, #0
   1b86c:	add	r1, r5, r0
   1b870:	add	r0, r0, #16
   1b874:	vld1.32	{d16-d17}, [r1]
   1b878:	cmp	r0, #32
   1b87c:	vmvn	q8, q8
   1b880:	vst1.32	{d16-d17}, [r1]
   1b884:	bne	1b86c <__assert_fail@plt+0xa0f8>
   1b888:	ldr	r0, [r9, #92]	; 0x5c
   1b88c:	cmp	r0, #2
   1b890:	blt	1b8b8 <__assert_fail@plt+0xa144>
   1b894:	ldr	r0, [r9, #60]	; 0x3c
   1b898:	mov	r1, #0
   1b89c:	ldr	r2, [r0, r1, lsl #2]
   1b8a0:	ldr	r3, [r5, r1, lsl #2]
   1b8a4:	and	r2, r3, r2
   1b8a8:	str	r2, [r5, r1, lsl #2]
   1b8ac:	add	r1, r1, #1
   1b8b0:	cmp	r1, #8
   1b8b4:	bne	1b89c <__assert_fail@plt+0xa128>
   1b8b8:	mov	r0, #3
   1b8bc:	add	r3, sp, #8
   1b8c0:	mov	r1, #0
   1b8c4:	mov	r2, #0
   1b8c8:	mov	r7, #0
   1b8cc:	str	r0, [sp, #12]
   1b8d0:	mov	r0, r9
   1b8d4:	str	r5, [sp, #8]
   1b8d8:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b8dc:	cmp	r0, #0
   1b8e0:	beq	1b96c <__assert_fail@plt+0xa1f8>
   1b8e4:	mov	r4, r0
   1b8e8:	ldr	r0, [r9, #92]	; 0x5c
   1b8ec:	cmp	r0, #2
   1b8f0:	blt	1b954 <__assert_fail@plt+0xa1e0>
   1b8f4:	mov	r0, #6
   1b8f8:	str	r6, [sp, #8]
   1b8fc:	add	r3, sp, #8
   1b900:	mov	r1, #0
   1b904:	mov	r2, #0
   1b908:	mov	r8, #0
   1b90c:	str	r0, [sp, #12]
   1b910:	ldrb	r0, [r9, #88]	; 0x58
   1b914:	orr	r0, r0, #2
   1b918:	strb	r0, [r9, #88]	; 0x58
   1b91c:	mov	r0, r9
   1b920:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b924:	cmp	r0, #0
   1b928:	beq	1b96c <__assert_fail@plt+0xa1f8>
   1b92c:	mov	r2, r0
   1b930:	mov	r0, #10
   1b934:	add	r3, sp, #20
   1b938:	mov	r1, r4
   1b93c:	str	r0, [sp, #24]
   1b940:	mov	r0, r9
   1b944:	str	r8, [sp, #20]
   1b948:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1b94c:	mov	r7, r0
   1b950:	b	1b960 <__assert_fail@plt+0xa1ec>
   1b954:	mov	r0, r6
   1b958:	bl	18d9c <__assert_fail@plt+0x7628>
   1b95c:	mov	r7, r4
   1b960:	mov	r0, r7
   1b964:	sub	sp, fp, #28
   1b968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b96c:	mov	r0, r5
   1b970:	bl	13c04 <__assert_fail@plt+0x2490>
   1b974:	mov	r0, r6
   1b978:	bl	18d9c <__assert_fail@plt+0x7628>
   1b97c:	ldr	r1, [fp, #12]
   1b980:	mov	r0, #12
   1b984:	b	1b99c <__assert_fail@plt+0xa228>
   1b988:	mov	r0, r5
   1b98c:	bl	13c04 <__assert_fail@plt+0x2490>
   1b990:	ldr	r1, [fp, #12]
   1b994:	mov	r0, #12
   1b998:	mov	r7, #0
   1b99c:	str	r0, [r1]
   1b9a0:	b	1b960 <__assert_fail@plt+0xa1ec>
   1b9a4:	mov	r4, r0
   1b9a8:	mov	r0, r5
   1b9ac:	bl	13c04 <__assert_fail@plt+0x2490>
   1b9b0:	mov	r0, r6
   1b9b4:	bl	18d9c <__assert_fail@plt+0x7628>
   1b9b8:	ldr	r0, [fp, #12]
   1b9bc:	str	r4, [r0]
   1b9c0:	b	1b960 <__assert_fail@plt+0xa1ec>
   1b9c4:	push	{fp, lr}
   1b9c8:	mov	fp, sp
   1b9cc:	ldr	ip, [r1, #40]	; 0x28
   1b9d0:	ldr	r3, [r1, #56]	; 0x38
   1b9d4:	cmp	r3, ip
   1b9d8:	ble	1ba54 <__assert_fail@plt+0xa2e0>
   1b9dc:	ldr	r3, [r1, #4]
   1b9e0:	ldrb	lr, [r3, ip]
   1b9e4:	strb	lr, [r0]
   1b9e8:	ldr	r3, [r1, #80]	; 0x50
   1b9ec:	cmp	r3, #2
   1b9f0:	blt	1ba14 <__assert_fail@plt+0xa2a0>
   1b9f4:	ldr	r3, [r1, #28]
   1b9f8:	ldr	ip, [r1, #40]	; 0x28
   1b9fc:	cmp	ip, r3
   1ba00:	beq	1ba14 <__assert_fail@plt+0xa2a0>
   1ba04:	ldr	r3, [r1, #8]
   1ba08:	ldr	r3, [r3, ip, lsl #2]
   1ba0c:	cmn	r3, #1
   1ba10:	beq	1bafc <__assert_fail@plt+0xa388>
   1ba14:	tst	r2, #1
   1ba18:	beq	1ba64 <__assert_fail@plt+0xa2f0>
   1ba1c:	cmp	lr, #92	; 0x5c
   1ba20:	bne	1ba64 <__assert_fail@plt+0xa2f0>
   1ba24:	ldr	r2, [r1, #40]	; 0x28
   1ba28:	ldr	r3, [r1, #48]	; 0x30
   1ba2c:	add	r2, r2, #1
   1ba30:	cmp	r2, r3
   1ba34:	bge	1bafc <__assert_fail@plt+0xa388>
   1ba38:	str	r2, [r1, #40]	; 0x28
   1ba3c:	ldr	r1, [r1, #4]
   1ba40:	ldrb	r2, [r1, r2]
   1ba44:	mov	r1, #1
   1ba48:	strb	r1, [r0, #4]
   1ba4c:	strb	r2, [r0]
   1ba50:	b	1bb04 <__assert_fail@plt+0xa390>
   1ba54:	mov	r1, #2
   1ba58:	strb	r1, [r0, #4]
   1ba5c:	mov	r1, #0
   1ba60:	b	1bb04 <__assert_fail@plt+0xa390>
   1ba64:	cmp	lr, #92	; 0x5c
   1ba68:	bgt	1babc <__assert_fail@plt+0xa348>
   1ba6c:	cmp	lr, #45	; 0x2d
   1ba70:	beq	1bad4 <__assert_fail@plt+0xa360>
   1ba74:	cmp	lr, #91	; 0x5b
   1ba78:	bne	1bafc <__assert_fail@plt+0xa388>
   1ba7c:	ldr	r3, [r1, #40]	; 0x28
   1ba80:	ldr	ip, [r1, #48]	; 0x30
   1ba84:	add	r3, r3, #1
   1ba88:	cmp	r3, ip
   1ba8c:	bge	1baec <__assert_fail@plt+0xa378>
   1ba90:	ldr	r1, [r1, #4]
   1ba94:	ldrb	r1, [r1, r3]
   1ba98:	cmp	r1, #61	; 0x3d
   1ba9c:	strb	r1, [r0]
   1baa0:	beq	1bb0c <__assert_fail@plt+0xa398>
   1baa4:	cmp	r1, #58	; 0x3a
   1baa8:	beq	1bb14 <__assert_fail@plt+0xa3a0>
   1baac:	cmp	r1, #46	; 0x2e
   1bab0:	bne	1baf4 <__assert_fail@plt+0xa380>
   1bab4:	mov	r1, #26
   1bab8:	b	1bb20 <__assert_fail@plt+0xa3ac>
   1babc:	cmp	lr, #93	; 0x5d
   1bac0:	beq	1badc <__assert_fail@plt+0xa368>
   1bac4:	cmp	lr, #94	; 0x5e
   1bac8:	bne	1bafc <__assert_fail@plt+0xa388>
   1bacc:	mov	r1, #25
   1bad0:	b	1bae0 <__assert_fail@plt+0xa36c>
   1bad4:	mov	r1, #22
   1bad8:	b	1bae0 <__assert_fail@plt+0xa36c>
   1badc:	mov	r1, #21
   1bae0:	strb	r1, [r0, #4]
   1bae4:	mov	r1, #1
   1bae8:	b	1bb04 <__assert_fail@plt+0xa390>
   1baec:	mov	r1, #0
   1baf0:	strb	r1, [r0]
   1baf4:	mov	r1, #91	; 0x5b
   1baf8:	strb	r1, [r0]
   1bafc:	mov	r1, #1
   1bb00:	strb	r1, [r0, #4]
   1bb04:	mov	r0, r1
   1bb08:	pop	{fp, pc}
   1bb0c:	mov	r1, #28
   1bb10:	b	1bb20 <__assert_fail@plt+0xa3ac>
   1bb14:	tst	r2, #4
   1bb18:	beq	1baf4 <__assert_fail@plt+0xa380>
   1bb1c:	mov	r1, #30
   1bb20:	strb	r1, [r0, #4]
   1bb24:	mov	r1, #2
   1bb28:	b	1bb04 <__assert_fail@plt+0xa390>
   1bb2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bb30:	add	fp, sp, #24
   1bb34:	sub	sp, sp, #8
   1bb38:	mov	r5, r2
   1bb3c:	ldr	r2, [r1, #80]	; 0x50
   1bb40:	mov	r9, r0
   1bb44:	ldr	r0, [r1, #40]	; 0x28
   1bb48:	cmp	r2, #1
   1bb4c:	beq	1bbb8 <__assert_fail@plt+0xa444>
   1bb50:	ldr	r4, [r1, #28]
   1bb54:	add	r2, r0, #1
   1bb58:	cmp	r2, r4
   1bb5c:	bge	1bbb8 <__assert_fail@plt+0xa444>
   1bb60:	ldr	ip, [r1, #8]
   1bb64:	mov	r2, #1
   1bb68:	add	r6, ip, r0, lsl #2
   1bb6c:	ldr	r7, [r6, r2, lsl #2]
   1bb70:	cmn	r7, #1
   1bb74:	bne	1bb8c <__assert_fail@plt+0xa418>
   1bb78:	add	r2, r2, #1
   1bb7c:	add	r7, r0, r2
   1bb80:	cmp	r7, r4
   1bb84:	blt	1bb6c <__assert_fail@plt+0xa3f8>
   1bb88:	b	1bb94 <__assert_fail@plt+0xa420>
   1bb8c:	cmp	r2, #2
   1bb90:	bcc	1bbb8 <__assert_fail@plt+0xa444>
   1bb94:	mov	r3, #1
   1bb98:	str	r3, [r9]
   1bb9c:	ldr	r0, [ip, r0, lsl #2]
   1bba0:	str	r0, [r9, #4]
   1bba4:	ldr	r0, [r1, #40]	; 0x28
   1bba8:	add	r0, r0, r2
   1bbac:	str	r0, [r1, #40]	; 0x28
   1bbb0:	mov	r0, #0
   1bbb4:	b	1bddc <__assert_fail@plt+0xa668>
   1bbb8:	add	r2, r0, r3
   1bbbc:	str	r2, [r1, #40]	; 0x28
   1bbc0:	ldrb	r6, [r5, #4]
   1bbc4:	sub	r0, r6, #22
   1bbc8:	cmp	r0, #8
   1bbcc:	bhi	1bdcc <__assert_fail@plt+0xa658>
   1bbd0:	add	r3, pc, #0
   1bbd4:	ldr	pc, [r3, r0, lsl #2]
   1bbd8:	andeq	fp, r1, r4, lsr #27
   1bbdc:	andeq	fp, r1, ip, asr #27
   1bbe0:	andeq	fp, r1, ip, asr #27
   1bbe4:	andeq	fp, r1, ip, asr #27
   1bbe8:	strdeq	fp, [r1], -ip
   1bbec:	andeq	fp, r1, ip, asr #27
   1bbf0:	strdeq	fp, [r1], -ip
   1bbf4:	andeq	fp, r1, ip, asr #27
   1bbf8:	strdeq	fp, [r1], -ip
   1bbfc:	ldr	r3, [r1, #56]	; 0x38
   1bc00:	mov	r0, #7
   1bc04:	cmp	r3, r2
   1bc08:	ble	1bddc <__assert_fail@plt+0xa668>
   1bc0c:	ldrb	r3, [r5]
   1bc10:	mov	r2, #0
   1bc14:	uxtb	r7, r6
   1bc18:	cmp	r7, #30
   1bc1c:	bne	1bc2c <__assert_fail@plt+0xa4b8>
   1bc20:	ldrb	r7, [r1, #75]	; 0x4b
   1bc24:	cmp	r7, #0
   1bc28:	bne	1bc84 <__assert_fail@plt+0xa510>
   1bc2c:	ldr	r4, [r1, #40]	; 0x28
   1bc30:	ldr	r7, [r1, #4]
   1bc34:	add	r6, r4, #1
   1bc38:	str	r6, [r1, #40]	; 0x28
   1bc3c:	ldrb	r4, [r7, r4]
   1bc40:	ldr	r7, [r1, #56]	; 0x38
   1bc44:	cmp	r7, r6
   1bc48:	ble	1bddc <__assert_fail@plt+0xa668>
   1bc4c:	uxtb	r7, r4
   1bc50:	cmp	r7, r3
   1bc54:	bne	1bc68 <__assert_fail@plt+0xa4f4>
   1bc58:	ldr	r7, [r1, #4]
   1bc5c:	ldrb	r7, [r7, r6]
   1bc60:	cmp	r7, #93	; 0x5d
   1bc64:	beq	1bd58 <__assert_fail@plt+0xa5e4>
   1bc68:	ldr	r7, [r9, #4]
   1bc6c:	cmp	r2, #30
   1bc70:	strb	r4, [r7, r2]
   1bc74:	bhi	1bddc <__assert_fail@plt+0xa668>
   1bc78:	ldrb	r6, [r5, #4]
   1bc7c:	add	r2, r2, #1
   1bc80:	b	1bc14 <__assert_fail@plt+0xa4a0>
   1bc84:	ldrb	r7, [r1, #76]	; 0x4c
   1bc88:	cmp	r7, #0
   1bc8c:	beq	1bd24 <__assert_fail@plt+0xa5b0>
   1bc90:	ldr	lr, [r1, #28]
   1bc94:	ldr	ip, [r1, #40]	; 0x28
   1bc98:	cmp	ip, lr
   1bc9c:	beq	1bcb0 <__assert_fail@plt+0xa53c>
   1bca0:	ldr	r4, [r1, #8]
   1bca4:	ldr	r4, [r4, ip, lsl #2]
   1bca8:	cmn	r4, #1
   1bcac:	beq	1bd44 <__assert_fail@plt+0xa5d0>
   1bcb0:	ldr	r6, [r1, #12]
   1bcb4:	ldr	r7, [r1, #24]
   1bcb8:	ldr	r4, [r1]
   1bcbc:	ldr	r6, [r6, ip, lsl #2]
   1bcc0:	add	r6, r7, r6
   1bcc4:	add	r4, r4, r6
   1bcc8:	ldrsb	r4, [r4]
   1bccc:	cmn	r4, #1
   1bcd0:	ble	1bd44 <__assert_fail@plt+0xa5d0>
   1bcd4:	ldr	r7, [r1, #80]	; 0x50
   1bcd8:	mov	r6, #1
   1bcdc:	cmp	r7, #1
   1bce0:	beq	1bd18 <__assert_fail@plt+0xa5a4>
   1bce4:	add	r7, ip, #1
   1bce8:	cmp	r7, lr
   1bcec:	bge	1bd18 <__assert_fail@plt+0xa5a4>
   1bcf0:	ldr	r6, [r1, #8]
   1bcf4:	add	r8, r6, ip, lsl #2
   1bcf8:	mov	r6, #1
   1bcfc:	ldr	r7, [r8, r6, lsl #2]
   1bd00:	cmn	r7, #1
   1bd04:	bne	1bd18 <__assert_fail@plt+0xa5a4>
   1bd08:	add	r6, r6, #1
   1bd0c:	add	r7, ip, r6
   1bd10:	cmp	r7, lr
   1bd14:	blt	1bcfc <__assert_fail@plt+0xa588>
   1bd18:	add	r6, r6, ip
   1bd1c:	str	r6, [r1, #40]	; 0x28
   1bd20:	b	1bc40 <__assert_fail@plt+0xa4cc>
   1bd24:	ldr	r7, [r1, #40]	; 0x28
   1bd28:	ldr	r4, [r1, #24]
   1bd2c:	ldr	ip, [r1]
   1bd30:	add	r6, r7, #1
   1bd34:	add	r7, r7, r4
   1bd38:	str	r6, [r1, #40]	; 0x28
   1bd3c:	ldrb	r4, [ip, r7]
   1bd40:	b	1bc40 <__assert_fail@plt+0xa4cc>
   1bd44:	add	r6, ip, #1
   1bd48:	str	r6, [r1, #40]	; 0x28
   1bd4c:	ldr	r7, [r1, #4]
   1bd50:	ldrb	r4, [r7, ip]
   1bd54:	b	1bc40 <__assert_fail@plt+0xa4cc>
   1bd58:	add	r0, r6, #1
   1bd5c:	str	r0, [r1, #40]	; 0x28
   1bd60:	mov	r0, #0
   1bd64:	ldr	r1, [r9, #4]
   1bd68:	strb	r0, [r1, r2]
   1bd6c:	ldrb	r1, [r5, #4]
   1bd70:	cmp	r1, #30
   1bd74:	beq	1bd90 <__assert_fail@plt+0xa61c>
   1bd78:	cmp	r1, #28
   1bd7c:	beq	1bd98 <__assert_fail@plt+0xa624>
   1bd80:	cmp	r1, #26
   1bd84:	moveq	r1, #3
   1bd88:	streq	r1, [r9]
   1bd8c:	b	1bddc <__assert_fail@plt+0xa668>
   1bd90:	mov	r1, #4
   1bd94:	b	1bd9c <__assert_fail@plt+0xa628>
   1bd98:	mov	r1, #2
   1bd9c:	str	r1, [r9]
   1bda0:	b	1bddc <__assert_fail@plt+0xa668>
   1bda4:	ldr	r0, [fp, #12]
   1bda8:	cmp	r0, #0
   1bdac:	bne	1bdcc <__assert_fail@plt+0xa658>
   1bdb0:	ldr	r2, [fp, #8]
   1bdb4:	mov	r0, sp
   1bdb8:	bl	1b9c4 <__assert_fail@plt+0xa250>
   1bdbc:	ldrb	r1, [sp, #4]
   1bdc0:	mov	r0, #11
   1bdc4:	cmp	r1, #21
   1bdc8:	bne	1bddc <__assert_fail@plt+0xa668>
   1bdcc:	mov	r0, #0
   1bdd0:	str	r0, [r9]
   1bdd4:	ldrb	r1, [r5]
   1bdd8:	strb	r1, [r9, #4]
   1bddc:	sub	sp, fp, #24
   1bde0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bde4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bde8:	add	fp, sp, #24
   1bdec:	mov	r8, r0
   1bdf0:	ldrb	r0, [fp, #14]
   1bdf4:	ldr	r6, [fp, #8]
   1bdf8:	mov	r5, r3
   1bdfc:	mov	r7, r2
   1be00:	mov	r4, r1
   1be04:	tst	r0, #64	; 0x40
   1be08:	beq	1be44 <__assert_fail@plt+0xa6d0>
   1be0c:	movw	r1, #21274	; 0x531a
   1be10:	mov	r0, r6
   1be14:	movt	r1, #2
   1be18:	bl	11420 <strcmp@plt>
   1be1c:	cmp	r0, #0
   1be20:	beq	1be3c <__assert_fail@plt+0xa6c8>
   1be24:	movw	r1, #21280	; 0x5320
   1be28:	mov	r0, r6
   1be2c:	movt	r1, #2
   1be30:	bl	11420 <strcmp@plt>
   1be34:	cmp	r0, #0
   1be38:	bne	1be44 <__assert_fail@plt+0xa6d0>
   1be3c:	movw	r6, #21286	; 0x5326
   1be40:	movt	r6, #2
   1be44:	ldr	r0, [r5]
   1be48:	ldr	r1, [r7, #36]	; 0x24
   1be4c:	cmp	r0, r1
   1be50:	beq	1c344 <__assert_fail@plt+0xabd0>
   1be54:	mov	r0, r6
   1be58:	bl	113f0 <wctype@plt>
   1be5c:	ldr	r2, [r7, #36]	; 0x24
   1be60:	ldr	r1, [r7, #12]
   1be64:	add	r3, r2, #1
   1be68:	str	r3, [r7, #36]	; 0x24
   1be6c:	str	r0, [r1, r2, lsl #2]
   1be70:	movw	r1, #21262	; 0x530e
   1be74:	mov	r0, r6
   1be78:	movt	r1, #2
   1be7c:	bl	11420 <strcmp@plt>
   1be80:	cmp	r0, #0
   1be84:	beq	1bfe8 <__assert_fail@plt+0xa874>
   1be88:	movw	r1, #21292	; 0x532c
   1be8c:	mov	r0, r6
   1be90:	movt	r1, #2
   1be94:	bl	11420 <strcmp@plt>
   1be98:	cmp	r0, #0
   1be9c:	beq	1c034 <__assert_fail@plt+0xa8c0>
   1bea0:	movw	r1, #21280	; 0x5320
   1bea4:	mov	r0, r6
   1bea8:	movt	r1, #2
   1beac:	bl	11420 <strcmp@plt>
   1beb0:	cmp	r0, #0
   1beb4:	beq	1c080 <__assert_fail@plt+0xa90c>
   1beb8:	movw	r1, #21268	; 0x5314
   1bebc:	mov	r0, r6
   1bec0:	movt	r1, #2
   1bec4:	bl	11420 <strcmp@plt>
   1bec8:	cmp	r0, #0
   1becc:	beq	1c0cc <__assert_fail@plt+0xa958>
   1bed0:	movw	r1, #21286	; 0x5326
   1bed4:	mov	r0, r6
   1bed8:	movt	r1, #2
   1bedc:	bl	11420 <strcmp@plt>
   1bee0:	cmp	r0, #0
   1bee4:	beq	1c118 <__assert_fail@plt+0xa9a4>
   1bee8:	movw	r1, #21323	; 0x534b
   1beec:	mov	r0, r6
   1bef0:	movt	r1, #2
   1bef4:	bl	11420 <strcmp@plt>
   1bef8:	cmp	r0, #0
   1befc:	beq	1c164 <__assert_fail@plt+0xa9f0>
   1bf00:	movw	r1, #21298	; 0x5332
   1bf04:	mov	r0, r6
   1bf08:	movt	r1, #2
   1bf0c:	bl	11420 <strcmp@plt>
   1bf10:	cmp	r0, #0
   1bf14:	beq	1c1b4 <__assert_fail@plt+0xaa40>
   1bf18:	movw	r1, #21274	; 0x531a
   1bf1c:	mov	r0, r6
   1bf20:	movt	r1, #2
   1bf24:	bl	11420 <strcmp@plt>
   1bf28:	cmp	r0, #0
   1bf2c:	beq	1c204 <__assert_fail@plt+0xaa90>
   1bf30:	movw	r1, #21304	; 0x5338
   1bf34:	mov	r0, r6
   1bf38:	movt	r1, #2
   1bf3c:	bl	11420 <strcmp@plt>
   1bf40:	cmp	r0, #0
   1bf44:	beq	1c254 <__assert_fail@plt+0xaae0>
   1bf48:	movw	r1, #21310	; 0x533e
   1bf4c:	mov	r0, r6
   1bf50:	movt	r1, #2
   1bf54:	bl	11420 <strcmp@plt>
   1bf58:	cmp	r0, #0
   1bf5c:	beq	1c2a4 <__assert_fail@plt+0xab30>
   1bf60:	movw	r1, #21316	; 0x5344
   1bf64:	mov	r0, r6
   1bf68:	movt	r1, #2
   1bf6c:	bl	11420 <strcmp@plt>
   1bf70:	cmp	r0, #0
   1bf74:	beq	1c2f4 <__assert_fail@plt+0xab80>
   1bf78:	movw	r1, #21322	; 0x534a
   1bf7c:	mov	r0, r6
   1bf80:	movt	r1, #2
   1bf84:	bl	11420 <strcmp@plt>
   1bf88:	mov	r1, r0
   1bf8c:	mov	r0, #4
   1bf90:	cmp	r1, #0
   1bf94:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bf98:	bl	11600 <__ctype_b_loc@plt>
   1bf9c:	ldr	r1, [r0]
   1bfa0:	mov	r2, #0
   1bfa4:	mov	r3, #1
   1bfa8:	cmp	r8, #0
   1bfac:	bne	1c4ac <__assert_fail@plt+0xad38>
   1bfb0:	ldrb	r0, [r1, #1]
   1bfb4:	tst	r0, #16
   1bfb8:	beq	1bfd0 <__assert_fail@plt+0xa85c>
   1bfbc:	ubfx	r0, r2, #5, #3
   1bfc0:	and	r6, r2, #31
   1bfc4:	ldr	r7, [r4, r0, lsl #2]
   1bfc8:	orr	r7, r7, r3, lsl r6
   1bfcc:	str	r7, [r4, r0, lsl #2]
   1bfd0:	add	r2, r2, #1
   1bfd4:	add	r1, r1, #2
   1bfd8:	mov	r0, #0
   1bfdc:	cmp	r2, #256	; 0x100
   1bfe0:	bne	1bfb0 <__assert_fail@plt+0xa83c>
   1bfe4:	b	1c340 <__assert_fail@plt+0xabcc>
   1bfe8:	bl	11600 <__ctype_b_loc@plt>
   1bfec:	ldr	r1, [r0]
   1bff0:	cmp	r8, #0
   1bff4:	bne	1c3e8 <__assert_fail@plt+0xac74>
   1bff8:	mov	r0, #0
   1bffc:	mov	r2, #1
   1c000:	ldrb	r3, [r1]
   1c004:	tst	r3, #8
   1c008:	beq	1c020 <__assert_fail@plt+0xa8ac>
   1c00c:	ubfx	r3, r0, #5, #3
   1c010:	and	r6, r0, #31
   1c014:	ldr	r7, [r4, r3, lsl #2]
   1c018:	orr	r7, r7, r2, lsl r6
   1c01c:	str	r7, [r4, r3, lsl #2]
   1c020:	add	r0, r0, #1
   1c024:	add	r1, r1, #2
   1c028:	cmp	r0, #256	; 0x100
   1c02c:	bne	1c000 <__assert_fail@plt+0xa88c>
   1c030:	b	1c1ac <__assert_fail@plt+0xaa38>
   1c034:	bl	11600 <__ctype_b_loc@plt>
   1c038:	ldr	r1, [r0]
   1c03c:	cmp	r8, #0
   1c040:	bne	1c468 <__assert_fail@plt+0xacf4>
   1c044:	mov	r0, #0
   1c048:	mov	r2, #1
   1c04c:	ldrb	r3, [r1]
   1c050:	tst	r3, #2
   1c054:	beq	1c06c <__assert_fail@plt+0xa8f8>
   1c058:	ubfx	r3, r0, #5, #3
   1c05c:	and	r6, r0, #31
   1c060:	ldr	r7, [r4, r3, lsl #2]
   1c064:	orr	r7, r7, r2, lsl r6
   1c068:	str	r7, [r4, r3, lsl #2]
   1c06c:	add	r0, r0, #1
   1c070:	add	r1, r1, #2
   1c074:	cmp	r0, #256	; 0x100
   1c078:	bne	1c04c <__assert_fail@plt+0xa8d8>
   1c07c:	b	1c1ac <__assert_fail@plt+0xaa38>
   1c080:	bl	11600 <__ctype_b_loc@plt>
   1c084:	ldr	r1, [r0]
   1c088:	cmp	r8, #0
   1c08c:	bne	1c524 <__assert_fail@plt+0xadb0>
   1c090:	mov	r0, #0
   1c094:	mov	r2, #1
   1c098:	ldrb	r3, [r1, #1]
   1c09c:	tst	r3, #2
   1c0a0:	beq	1c0b8 <__assert_fail@plt+0xa944>
   1c0a4:	ubfx	r3, r0, #5, #3
   1c0a8:	and	r6, r0, #31
   1c0ac:	ldr	r7, [r4, r3, lsl #2]
   1c0b0:	orr	r7, r7, r2, lsl r6
   1c0b4:	str	r7, [r4, r3, lsl #2]
   1c0b8:	add	r0, r0, #1
   1c0bc:	add	r1, r1, #2
   1c0c0:	cmp	r0, #256	; 0x100
   1c0c4:	bne	1c098 <__assert_fail@plt+0xa924>
   1c0c8:	b	1c1ac <__assert_fail@plt+0xaa38>
   1c0cc:	bl	11600 <__ctype_b_loc@plt>
   1c0d0:	ldr	r1, [r0]
   1c0d4:	cmp	r8, #0
   1c0d8:	bne	1c5a4 <__assert_fail@plt+0xae30>
   1c0dc:	mov	r0, #0
   1c0e0:	mov	r2, #1
   1c0e4:	ldrb	r3, [r1, #1]
   1c0e8:	tst	r3, #32
   1c0ec:	beq	1c104 <__assert_fail@plt+0xa990>
   1c0f0:	ubfx	r3, r0, #5, #3
   1c0f4:	and	r6, r0, #31
   1c0f8:	ldr	r7, [r4, r3, lsl #2]
   1c0fc:	orr	r7, r7, r2, lsl r6
   1c100:	str	r7, [r4, r3, lsl #2]
   1c104:	add	r0, r0, #1
   1c108:	add	r1, r1, #2
   1c10c:	cmp	r0, #256	; 0x100
   1c110:	bne	1c0e4 <__assert_fail@plt+0xa970>
   1c114:	b	1c1ac <__assert_fail@plt+0xaa38>
   1c118:	bl	11600 <__ctype_b_loc@plt>
   1c11c:	ldr	r1, [r0]
   1c120:	cmp	r8, #0
   1c124:	bne	1c5e8 <__assert_fail@plt+0xae74>
   1c128:	mov	r0, #0
   1c12c:	mov	r2, #1
   1c130:	ldrb	r3, [r1, #1]
   1c134:	tst	r3, #4
   1c138:	beq	1c150 <__assert_fail@plt+0xa9dc>
   1c13c:	ubfx	r3, r0, #5, #3
   1c140:	and	r6, r0, #31
   1c144:	ldr	r7, [r4, r3, lsl #2]
   1c148:	orr	r7, r7, r2, lsl r6
   1c14c:	str	r7, [r4, r3, lsl #2]
   1c150:	add	r0, r0, #1
   1c154:	add	r1, r1, #2
   1c158:	cmp	r0, #256	; 0x100
   1c15c:	bne	1c130 <__assert_fail@plt+0xa9bc>
   1c160:	b	1c1ac <__assert_fail@plt+0xaa38>
   1c164:	bl	11600 <__ctype_b_loc@plt>
   1c168:	ldr	r1, [r0]
   1c16c:	cmp	r8, #0
   1c170:	bne	1c62c <__assert_fail@plt+0xaeb8>
   1c174:	mov	r0, #0
   1c178:	mov	r2, #1
   1c17c:	ldrb	r3, [r1, #1]
   1c180:	tst	r3, #8
   1c184:	beq	1c19c <__assert_fail@plt+0xaa28>
   1c188:	ubfx	r3, r0, #5, #3
   1c18c:	and	r6, r0, #31
   1c190:	ldr	r7, [r4, r3, lsl #2]
   1c194:	orr	r7, r7, r2, lsl r6
   1c198:	str	r7, [r4, r3, lsl #2]
   1c19c:	add	r0, r0, #1
   1c1a0:	add	r1, r1, #2
   1c1a4:	cmp	r0, #256	; 0x100
   1c1a8:	bne	1c17c <__assert_fail@plt+0xaa08>
   1c1ac:	mov	r0, #0
   1c1b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c1b4:	bl	11600 <__ctype_b_loc@plt>
   1c1b8:	ldr	r1, [r0]
   1c1bc:	mov	r2, #0
   1c1c0:	mov	r3, #1
   1c1c4:	cmp	r8, #0
   1c1c8:	bne	1c370 <__assert_fail@plt+0xabfc>
   1c1cc:	ldrb	r0, [r1, #1]
   1c1d0:	tst	r0, #64	; 0x40
   1c1d4:	beq	1c1ec <__assert_fail@plt+0xaa78>
   1c1d8:	ubfx	r0, r2, #5, #3
   1c1dc:	and	r6, r2, #31
   1c1e0:	ldr	r7, [r4, r0, lsl #2]
   1c1e4:	orr	r7, r7, r3, lsl r6
   1c1e8:	str	r7, [r4, r0, lsl #2]
   1c1ec:	add	r2, r2, #1
   1c1f0:	add	r1, r1, #2
   1c1f4:	mov	r0, #0
   1c1f8:	cmp	r2, #256	; 0x100
   1c1fc:	bne	1c1cc <__assert_fail@plt+0xaa58>
   1c200:	b	1c340 <__assert_fail@plt+0xabcc>
   1c204:	bl	11600 <__ctype_b_loc@plt>
   1c208:	ldr	r1, [r0]
   1c20c:	mov	r2, #0
   1c210:	mov	r3, #1
   1c214:	cmp	r8, #0
   1c218:	bne	1c3ac <__assert_fail@plt+0xac38>
   1c21c:	ldrb	r0, [r1, #1]
   1c220:	tst	r0, #1
   1c224:	beq	1c23c <__assert_fail@plt+0xaac8>
   1c228:	ubfx	r0, r2, #5, #3
   1c22c:	and	r6, r2, #31
   1c230:	ldr	r7, [r4, r0, lsl #2]
   1c234:	orr	r7, r7, r3, lsl r6
   1c238:	str	r7, [r4, r0, lsl #2]
   1c23c:	add	r2, r2, #1
   1c240:	add	r1, r1, #2
   1c244:	mov	r0, #0
   1c248:	cmp	r2, #256	; 0x100
   1c24c:	bne	1c21c <__assert_fail@plt+0xaaa8>
   1c250:	b	1c340 <__assert_fail@plt+0xabcc>
   1c254:	bl	11600 <__ctype_b_loc@plt>
   1c258:	ldr	r1, [r0]
   1c25c:	mov	r2, #0
   1c260:	mov	r3, #1
   1c264:	cmp	r8, #0
   1c268:	bne	1c42c <__assert_fail@plt+0xacb8>
   1c26c:	ldrb	r0, [r1]
   1c270:	tst	r0, #1
   1c274:	beq	1c28c <__assert_fail@plt+0xab18>
   1c278:	ubfx	r0, r2, #5, #3
   1c27c:	and	r6, r2, #31
   1c280:	ldr	r7, [r4, r0, lsl #2]
   1c284:	orr	r7, r7, r3, lsl r6
   1c288:	str	r7, [r4, r0, lsl #2]
   1c28c:	add	r2, r2, #1
   1c290:	add	r1, r1, #2
   1c294:	mov	r0, #0
   1c298:	cmp	r2, #256	; 0x100
   1c29c:	bne	1c26c <__assert_fail@plt+0xaaf8>
   1c2a0:	b	1c340 <__assert_fail@plt+0xabcc>
   1c2a4:	bl	11600 <__ctype_b_loc@plt>
   1c2a8:	ldr	r1, [r0]
   1c2ac:	mov	r2, #0
   1c2b0:	mov	r3, #1
   1c2b4:	cmp	r8, #0
   1c2b8:	bne	1c4e8 <__assert_fail@plt+0xad74>
   1c2bc:	ldrsh	r0, [r1]
   1c2c0:	cmn	r0, #1
   1c2c4:	bgt	1c2dc <__assert_fail@plt+0xab68>
   1c2c8:	ubfx	r0, r2, #5, #3
   1c2cc:	and	r6, r2, #31
   1c2d0:	ldr	r7, [r4, r0, lsl #2]
   1c2d4:	orr	r7, r7, r3, lsl r6
   1c2d8:	str	r7, [r4, r0, lsl #2]
   1c2dc:	add	r2, r2, #1
   1c2e0:	add	r1, r1, #2
   1c2e4:	mov	r0, #0
   1c2e8:	cmp	r2, #256	; 0x100
   1c2ec:	bne	1c2bc <__assert_fail@plt+0xab48>
   1c2f0:	b	1c340 <__assert_fail@plt+0xabcc>
   1c2f4:	bl	11600 <__ctype_b_loc@plt>
   1c2f8:	ldr	r1, [r0]
   1c2fc:	mov	r2, #0
   1c300:	mov	r3, #1
   1c304:	cmp	r8, #0
   1c308:	bne	1c568 <__assert_fail@plt+0xadf4>
   1c30c:	ldrb	r0, [r1]
   1c310:	tst	r0, #4
   1c314:	beq	1c32c <__assert_fail@plt+0xabb8>
   1c318:	ubfx	r0, r2, #5, #3
   1c31c:	and	r6, r2, #31
   1c320:	ldr	r7, [r4, r0, lsl #2]
   1c324:	orr	r7, r7, r3, lsl r6
   1c328:	str	r7, [r4, r0, lsl #2]
   1c32c:	add	r2, r2, #1
   1c330:	add	r1, r1, #2
   1c334:	mov	r0, #0
   1c338:	cmp	r2, #256	; 0x100
   1c33c:	bne	1c30c <__assert_fail@plt+0xab98>
   1c340:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c344:	mov	r1, #1
   1c348:	orr	r9, r1, r0, lsl #1
   1c34c:	ldr	r0, [r7, #12]
   1c350:	lsl	r1, r9, #2
   1c354:	bl	23c14 <__assert_fail@plt+0x124a0>
   1c358:	cmp	r0, #0
   1c35c:	moveq	r0, #12
   1c360:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c364:	str	r0, [r7, #12]
   1c368:	str	r9, [r5]
   1c36c:	b	1be54 <__assert_fail@plt+0xa6e0>
   1c370:	ldrb	r0, [r1, #1]
   1c374:	tst	r0, #64	; 0x40
   1c378:	beq	1c394 <__assert_fail@plt+0xac20>
   1c37c:	ldrb	r0, [r8, r2]
   1c380:	ubfx	r7, r0, #5, #3
   1c384:	and	r0, r0, #31
   1c388:	ldr	r6, [r4, r7, lsl #2]
   1c38c:	orr	r0, r6, r3, lsl r0
   1c390:	str	r0, [r4, r7, lsl #2]
   1c394:	add	r2, r2, #1
   1c398:	add	r1, r1, #2
   1c39c:	mov	r0, #0
   1c3a0:	cmp	r2, #256	; 0x100
   1c3a4:	bne	1c370 <__assert_fail@plt+0xabfc>
   1c3a8:	b	1c340 <__assert_fail@plt+0xabcc>
   1c3ac:	ldrb	r0, [r1, #1]
   1c3b0:	tst	r0, #1
   1c3b4:	beq	1c3d0 <__assert_fail@plt+0xac5c>
   1c3b8:	ldrb	r0, [r8, r2]
   1c3bc:	ubfx	r7, r0, #5, #3
   1c3c0:	and	r0, r0, #31
   1c3c4:	ldr	r6, [r4, r7, lsl #2]
   1c3c8:	orr	r0, r6, r3, lsl r0
   1c3cc:	str	r0, [r4, r7, lsl #2]
   1c3d0:	add	r2, r2, #1
   1c3d4:	add	r1, r1, #2
   1c3d8:	mov	r0, #0
   1c3dc:	cmp	r2, #256	; 0x100
   1c3e0:	bne	1c3ac <__assert_fail@plt+0xac38>
   1c3e4:	b	1c340 <__assert_fail@plt+0xabcc>
   1c3e8:	mov	r2, #0
   1c3ec:	mov	r3, #1
   1c3f0:	ldrb	r0, [r1]
   1c3f4:	tst	r0, #8
   1c3f8:	beq	1c414 <__assert_fail@plt+0xaca0>
   1c3fc:	ldrb	r0, [r8, r2]
   1c400:	ubfx	r7, r0, #5, #3
   1c404:	and	r0, r0, #31
   1c408:	ldr	r6, [r4, r7, lsl #2]
   1c40c:	orr	r0, r6, r3, lsl r0
   1c410:	str	r0, [r4, r7, lsl #2]
   1c414:	add	r2, r2, #1
   1c418:	add	r1, r1, #2
   1c41c:	mov	r0, #0
   1c420:	cmp	r2, #256	; 0x100
   1c424:	bne	1c3f0 <__assert_fail@plt+0xac7c>
   1c428:	b	1c340 <__assert_fail@plt+0xabcc>
   1c42c:	ldrb	r0, [r1]
   1c430:	tst	r0, #1
   1c434:	beq	1c450 <__assert_fail@plt+0xacdc>
   1c438:	ldrb	r0, [r8, r2]
   1c43c:	ubfx	r7, r0, #5, #3
   1c440:	and	r0, r0, #31
   1c444:	ldr	r6, [r4, r7, lsl #2]
   1c448:	orr	r0, r6, r3, lsl r0
   1c44c:	str	r0, [r4, r7, lsl #2]
   1c450:	add	r2, r2, #1
   1c454:	add	r1, r1, #2
   1c458:	mov	r0, #0
   1c45c:	cmp	r2, #256	; 0x100
   1c460:	bne	1c42c <__assert_fail@plt+0xacb8>
   1c464:	b	1c340 <__assert_fail@plt+0xabcc>
   1c468:	mov	r2, #0
   1c46c:	mov	r3, #1
   1c470:	ldrb	r0, [r1]
   1c474:	tst	r0, #2
   1c478:	beq	1c494 <__assert_fail@plt+0xad20>
   1c47c:	ldrb	r0, [r8, r2]
   1c480:	ubfx	r7, r0, #5, #3
   1c484:	and	r0, r0, #31
   1c488:	ldr	r6, [r4, r7, lsl #2]
   1c48c:	orr	r0, r6, r3, lsl r0
   1c490:	str	r0, [r4, r7, lsl #2]
   1c494:	add	r2, r2, #1
   1c498:	add	r1, r1, #2
   1c49c:	mov	r0, #0
   1c4a0:	cmp	r2, #256	; 0x100
   1c4a4:	bne	1c470 <__assert_fail@plt+0xacfc>
   1c4a8:	b	1c340 <__assert_fail@plt+0xabcc>
   1c4ac:	ldrb	r0, [r1, #1]
   1c4b0:	tst	r0, #16
   1c4b4:	beq	1c4d0 <__assert_fail@plt+0xad5c>
   1c4b8:	ldrb	r0, [r8, r2]
   1c4bc:	ubfx	r7, r0, #5, #3
   1c4c0:	and	r0, r0, #31
   1c4c4:	ldr	r6, [r4, r7, lsl #2]
   1c4c8:	orr	r0, r6, r3, lsl r0
   1c4cc:	str	r0, [r4, r7, lsl #2]
   1c4d0:	add	r2, r2, #1
   1c4d4:	add	r1, r1, #2
   1c4d8:	mov	r0, #0
   1c4dc:	cmp	r2, #256	; 0x100
   1c4e0:	bne	1c4ac <__assert_fail@plt+0xad38>
   1c4e4:	b	1c340 <__assert_fail@plt+0xabcc>
   1c4e8:	ldrsh	r0, [r1]
   1c4ec:	cmn	r0, #1
   1c4f0:	bgt	1c50c <__assert_fail@plt+0xad98>
   1c4f4:	ldrb	r0, [r8, r2]
   1c4f8:	ubfx	r7, r0, #5, #3
   1c4fc:	and	r0, r0, #31
   1c500:	ldr	r6, [r4, r7, lsl #2]
   1c504:	orr	r0, r6, r3, lsl r0
   1c508:	str	r0, [r4, r7, lsl #2]
   1c50c:	add	r2, r2, #1
   1c510:	add	r1, r1, #2
   1c514:	mov	r0, #0
   1c518:	cmp	r2, #256	; 0x100
   1c51c:	bne	1c4e8 <__assert_fail@plt+0xad74>
   1c520:	b	1c340 <__assert_fail@plt+0xabcc>
   1c524:	mov	r2, #0
   1c528:	mov	r3, #1
   1c52c:	ldrb	r0, [r1, #1]
   1c530:	tst	r0, #2
   1c534:	beq	1c550 <__assert_fail@plt+0xaddc>
   1c538:	ldrb	r0, [r8, r2]
   1c53c:	ubfx	r7, r0, #5, #3
   1c540:	and	r0, r0, #31
   1c544:	ldr	r6, [r4, r7, lsl #2]
   1c548:	orr	r0, r6, r3, lsl r0
   1c54c:	str	r0, [r4, r7, lsl #2]
   1c550:	add	r2, r2, #1
   1c554:	add	r1, r1, #2
   1c558:	mov	r0, #0
   1c55c:	cmp	r2, #256	; 0x100
   1c560:	bne	1c52c <__assert_fail@plt+0xadb8>
   1c564:	b	1c340 <__assert_fail@plt+0xabcc>
   1c568:	ldrb	r0, [r1]
   1c56c:	tst	r0, #4
   1c570:	beq	1c58c <__assert_fail@plt+0xae18>
   1c574:	ldrb	r0, [r8, r2]
   1c578:	ubfx	r7, r0, #5, #3
   1c57c:	and	r0, r0, #31
   1c580:	ldr	r6, [r4, r7, lsl #2]
   1c584:	orr	r0, r6, r3, lsl r0
   1c588:	str	r0, [r4, r7, lsl #2]
   1c58c:	add	r2, r2, #1
   1c590:	add	r1, r1, #2
   1c594:	mov	r0, #0
   1c598:	cmp	r2, #256	; 0x100
   1c59c:	bne	1c568 <__assert_fail@plt+0xadf4>
   1c5a0:	b	1c340 <__assert_fail@plt+0xabcc>
   1c5a4:	mov	r2, #0
   1c5a8:	mov	r3, #1
   1c5ac:	ldrb	r0, [r1, #1]
   1c5b0:	tst	r0, #32
   1c5b4:	beq	1c5d0 <__assert_fail@plt+0xae5c>
   1c5b8:	ldrb	r0, [r8, r2]
   1c5bc:	ubfx	r7, r0, #5, #3
   1c5c0:	and	r0, r0, #31
   1c5c4:	ldr	r6, [r4, r7, lsl #2]
   1c5c8:	orr	r0, r6, r3, lsl r0
   1c5cc:	str	r0, [r4, r7, lsl #2]
   1c5d0:	add	r2, r2, #1
   1c5d4:	add	r1, r1, #2
   1c5d8:	mov	r0, #0
   1c5dc:	cmp	r2, #256	; 0x100
   1c5e0:	bne	1c5ac <__assert_fail@plt+0xae38>
   1c5e4:	b	1c340 <__assert_fail@plt+0xabcc>
   1c5e8:	mov	r2, #0
   1c5ec:	mov	r3, #1
   1c5f0:	ldrb	r0, [r1, #1]
   1c5f4:	tst	r0, #4
   1c5f8:	beq	1c614 <__assert_fail@plt+0xaea0>
   1c5fc:	ldrb	r0, [r8, r2]
   1c600:	ubfx	r7, r0, #5, #3
   1c604:	and	r0, r0, #31
   1c608:	ldr	r6, [r4, r7, lsl #2]
   1c60c:	orr	r0, r6, r3, lsl r0
   1c610:	str	r0, [r4, r7, lsl #2]
   1c614:	add	r2, r2, #1
   1c618:	add	r1, r1, #2
   1c61c:	mov	r0, #0
   1c620:	cmp	r2, #256	; 0x100
   1c624:	bne	1c5f0 <__assert_fail@plt+0xae7c>
   1c628:	b	1c340 <__assert_fail@plt+0xabcc>
   1c62c:	mov	r2, #0
   1c630:	mov	r3, #1
   1c634:	ldrb	r0, [r1, #1]
   1c638:	tst	r0, #8
   1c63c:	beq	1c658 <__assert_fail@plt+0xaee4>
   1c640:	ldrb	r0, [r8, r2]
   1c644:	ubfx	r7, r0, #5, #3
   1c648:	and	r0, r0, #31
   1c64c:	ldr	r6, [r4, r7, lsl #2]
   1c650:	orr	r0, r6, r3, lsl r0
   1c654:	str	r0, [r4, r7, lsl #2]
   1c658:	add	r2, r2, #1
   1c65c:	add	r1, r1, #2
   1c660:	mov	r0, #0
   1c664:	cmp	r2, #256	; 0x100
   1c668:	bne	1c634 <__assert_fail@plt+0xaec0>
   1c66c:	b	1c340 <__assert_fail@plt+0xabcc>
   1c670:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c674:	add	fp, sp, #24
   1c678:	mov	r6, r0
   1c67c:	mov	r4, r2
   1c680:	mov	r5, r1
   1c684:	mvn	r0, #0
   1c688:	movw	r8, #32816	; 0x8030
   1c68c:	b	1c6ec <__assert_fail@plt+0xaf78>
   1c690:	cmp	r2, #2
   1c694:	beq	1c720 <__assert_fail@plt+0xafac>
   1c698:	ldrb	r1, [r5]
   1c69c:	cmp	r1, #44	; 0x2c
   1c6a0:	beq	1c718 <__assert_fail@plt+0xafa4>
   1c6a4:	mvn	r0, #1
   1c6a8:	cmp	r1, #48	; 0x30
   1c6ac:	bcc	1c6ec <__assert_fail@plt+0xaf78>
   1c6b0:	cmp	r2, #1
   1c6b4:	bne	1c6ec <__assert_fail@plt+0xaf78>
   1c6b8:	cmn	r7, #2
   1c6bc:	beq	1c6ec <__assert_fail@plt+0xaf78>
   1c6c0:	cmp	r1, #57	; 0x39
   1c6c4:	bhi	1c6ec <__assert_fail@plt+0xaf78>
   1c6c8:	cmn	r7, #1
   1c6cc:	beq	1c6e8 <__assert_fail@plt+0xaf74>
   1c6d0:	add	r0, r7, r7, lsl #2
   1c6d4:	add	r1, r1, r0, lsl #1
   1c6d8:	sub	r0, r1, #48	; 0x30
   1c6dc:	cmp	r1, r8
   1c6e0:	movwgt	r0, #32768	; 0x8000
   1c6e4:	b	1c6ec <__assert_fail@plt+0xaf78>
   1c6e8:	sub	r0, r1, #48	; 0x30
   1c6ec:	mov	r7, r0
   1c6f0:	mov	r0, r5
   1c6f4:	mov	r1, r6
   1c6f8:	mov	r2, r4
   1c6fc:	bl	198c0 <__assert_fail@plt+0x814c>
   1c700:	ldr	r1, [r6, #40]	; 0x28
   1c704:	add	r0, r1, r0
   1c708:	str	r0, [r6, #40]	; 0x28
   1c70c:	ldrb	r2, [r5, #4]
   1c710:	cmp	r2, #24
   1c714:	bne	1c690 <__assert_fail@plt+0xaf1c>
   1c718:	mov	r0, r7
   1c71c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c720:	mvn	r7, #1
   1c724:	b	1c718 <__assert_fail@plt+0xafa4>
   1c728:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c72c:	add	fp, sp, #24
   1c730:	sub	sp, sp, #8
   1c734:	mov	r3, r0
   1c738:	mov	r5, r0
   1c73c:	mov	r8, r1
   1c740:	mov	r0, r1
   1c744:	mov	r1, #0
   1c748:	mov	r2, #0
   1c74c:	mov	r7, #0
   1c750:	ldr	r4, [r3], #20
   1c754:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1c758:	cmp	r0, #0
   1c75c:	str	r0, [sp, #4]
   1c760:	beq	1c7fc <__assert_fail@plt+0xb088>
   1c764:	mov	r9, r0
   1c768:	add	r6, sp, #4
   1c76c:	mov	r7, #0
   1c770:	str	r4, [r0]
   1c774:	ldr	r0, [r6]
   1c778:	ldr	r1, [r0, #24]
   1c77c:	orr	r1, r1, #262144	; 0x40000
   1c780:	str	r1, [r0, #24]
   1c784:	ldr	r0, [r5, #4]
   1c788:	ldr	r4, [r6]
   1c78c:	cmp	r0, #0
   1c790:	beq	1c7a0 <__assert_fail@plt+0xb02c>
   1c794:	add	r6, r4, #4
   1c798:	mov	r5, r0
   1c79c:	b	1c7d4 <__assert_fail@plt+0xb060>
   1c7a0:	mov	r1, #0
   1c7a4:	mov	r0, r5
   1c7a8:	ldr	r5, [r5, #8]
   1c7ac:	cmp	r5, r1
   1c7b0:	cmpne	r5, #0
   1c7b4:	bne	1c7d0 <__assert_fail@plt+0xb05c>
   1c7b8:	ldr	r5, [r0]
   1c7bc:	ldr	r4, [r4]
   1c7c0:	mov	r1, r0
   1c7c4:	cmp	r5, #0
   1c7c8:	bne	1c7a4 <__assert_fail@plt+0xb030>
   1c7cc:	b	1c7f8 <__assert_fail@plt+0xb084>
   1c7d0:	add	r6, r4, #8
   1c7d4:	add	r3, r5, #20
   1c7d8:	mov	r0, r8
   1c7dc:	mov	r1, #0
   1c7e0:	mov	r2, #0
   1c7e4:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1c7e8:	cmp	r0, #0
   1c7ec:	str	r0, [r6]
   1c7f0:	bne	1c770 <__assert_fail@plt+0xaffc>
   1c7f4:	b	1c7fc <__assert_fail@plt+0xb088>
   1c7f8:	mov	r7, r9
   1c7fc:	mov	r0, r7
   1c800:	sub	sp, fp, #24
   1c804:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c808:	push	{r4, r5, r6, r7, fp, lr}
   1c80c:	add	fp, sp, #16
   1c810:	mov	r6, r0
   1c814:	mov	r5, r1
   1c818:	mov	r0, r2
   1c81c:	mov	r4, r2
   1c820:	mov	r1, r6
   1c824:	blx	r5
   1c828:	cmp	r0, #0
   1c82c:	popne	{r4, r5, r6, r7, fp, pc}
   1c830:	ldr	r7, [r6, #4]
   1c834:	cmp	r7, #0
   1c838:	bne	1c86c <__assert_fail@plt+0xb0f8>
   1c83c:	mov	r1, #0
   1c840:	b	1c858 <__assert_fail@plt+0xb0e4>
   1c844:	ldr	r6, [r0]
   1c848:	mov	r1, r0
   1c84c:	cmp	r6, #0
   1c850:	moveq	r0, #0
   1c854:	popeq	{r4, r5, r6, r7, fp, pc}
   1c858:	ldr	r7, [r6, #8]
   1c85c:	mov	r0, r6
   1c860:	cmp	r7, r1
   1c864:	cmpne	r7, #0
   1c868:	beq	1c844 <__assert_fail@plt+0xb0d0>
   1c86c:	mov	r0, r4
   1c870:	mov	r1, r7
   1c874:	blx	r5
   1c878:	cmp	r0, #0
   1c87c:	mov	r6, r7
   1c880:	beq	1c830 <__assert_fail@plt+0xb0bc>
   1c884:	pop	{r4, r5, r6, r7, fp, pc}
   1c888:	ldrb	r2, [r1, #24]
   1c88c:	cmp	r2, #17
   1c890:	beq	1c8c4 <__assert_fail@plt+0xb150>
   1c894:	cmp	r2, #4
   1c898:	bne	1c918 <__assert_fail@plt+0xb1a4>
   1c89c:	ldr	r2, [r0, #132]	; 0x84
   1c8a0:	cmp	r2, #0
   1c8a4:	beq	1c918 <__assert_fail@plt+0xb1a4>
   1c8a8:	ldr	r3, [r1, #20]
   1c8ac:	ldr	r2, [r2, r3, lsl #2]
   1c8b0:	mov	r3, #1
   1c8b4:	str	r2, [r1, #20]
   1c8b8:	ldr	r1, [r0, #80]	; 0x50
   1c8bc:	orr	r1, r1, r3, lsl r2
   1c8c0:	b	1c914 <__assert_fail@plt+0xb1a0>
   1c8c4:	ldr	r2, [r1, #4]
   1c8c8:	cmp	r2, #0
   1c8cc:	beq	1c918 <__assert_fail@plt+0xb1a4>
   1c8d0:	ldrb	r3, [r2, #24]
   1c8d4:	cmp	r3, #17
   1c8d8:	bne	1c918 <__assert_fail@plt+0xb1a4>
   1c8dc:	ldr	r3, [r2, #4]
   1c8e0:	ldr	r2, [r2, #20]
   1c8e4:	cmp	r3, #0
   1c8e8:	str	r3, [r1, #4]
   1c8ec:	strne	r1, [r3]
   1c8f0:	cmp	r2, #31
   1c8f4:	ldr	r1, [r1, #20]
   1c8f8:	ldr	r3, [r0, #132]	; 0x84
   1c8fc:	ldr	r1, [r3, r1, lsl #2]
   1c900:	str	r1, [r3, r2, lsl #2]
   1c904:	bgt	1c918 <__assert_fail@plt+0xb1a4>
   1c908:	ldr	r1, [r0, #80]	; 0x50
   1c90c:	mov	r3, #1
   1c910:	bic	r1, r1, r3, lsl r2
   1c914:	str	r1, [r0, #80]	; 0x50
   1c918:	mov	r0, #0
   1c91c:	bx	lr
   1c920:	push	{r4, r5, fp, lr}
   1c924:	add	fp, sp, #8
   1c928:	sub	sp, sp, #8
   1c92c:	mov	r5, r0
   1c930:	mov	r0, #0
   1c934:	mov	r4, r1
   1c938:	str	r0, [sp, #4]
   1c93c:	ldr	r2, [r1, #4]
   1c940:	cmp	r2, #0
   1c944:	beq	1c96c <__assert_fail@plt+0xb1f8>
   1c948:	ldrb	r0, [r2, #24]
   1c94c:	cmp	r0, #17
   1c950:	bne	1c96c <__assert_fail@plt+0xb1f8>
   1c954:	add	r0, sp, #4
   1c958:	mov	r1, r5
   1c95c:	bl	1cc24 <__assert_fail@plt+0xb4b0>
   1c960:	cmp	r0, #0
   1c964:	str	r0, [r4, #4]
   1c968:	strne	r4, [r0]
   1c96c:	ldr	r2, [r4, #8]
   1c970:	cmp	r2, #0
   1c974:	beq	1c99c <__assert_fail@plt+0xb228>
   1c978:	ldrb	r0, [r2, #24]
   1c97c:	cmp	r0, #17
   1c980:	bne	1c99c <__assert_fail@plt+0xb228>
   1c984:	add	r0, sp, #4
   1c988:	mov	r1, r5
   1c98c:	bl	1cc24 <__assert_fail@plt+0xb4b0>
   1c990:	cmp	r0, #0
   1c994:	str	r0, [r4, #8]
   1c998:	strne	r4, [r0]
   1c99c:	ldr	r0, [sp, #4]
   1c9a0:	sub	sp, fp, #8
   1c9a4:	pop	{r4, r5, fp, pc}
   1c9a8:	push	{r4, r5, fp, lr}
   1c9ac:	add	fp, sp, #8
   1c9b0:	ldr	r2, [r1, #24]
   1c9b4:	mov	r5, r0
   1c9b8:	mov	r4, r1
   1c9bc:	uxtb	r0, r2
   1c9c0:	cmp	r0, #16
   1c9c4:	bne	1c9e4 <__assert_fail@plt+0xb270>
   1c9c8:	ldr	r0, [r4, #4]
   1c9cc:	ldr	r1, [r0, #12]
   1c9d0:	str	r1, [r4, #12]
   1c9d4:	ldr	r0, [r0, #28]
   1c9d8:	str	r0, [r4, #28]
   1c9dc:	mov	r0, #0
   1c9e0:	pop	{r4, r5, fp, pc}
   1c9e4:	str	r4, [r4, #12]
   1c9e8:	mov	r0, r5
   1c9ec:	ldr	r1, [r4, #20]
   1c9f0:	bl	1cd78 <__assert_fail@plt+0xb604>
   1c9f4:	cmn	r0, #1
   1c9f8:	str	r0, [r4, #28]
   1c9fc:	moveq	r0, #12
   1ca00:	popeq	{r4, r5, fp, pc}
   1ca04:	ldrb	r2, [r4, #24]
   1ca08:	mov	r1, r0
   1ca0c:	mov	r0, #0
   1ca10:	cmp	r2, #12
   1ca14:	popne	{r4, r5, fp, pc}
   1ca18:	ldr	r2, [r5]
   1ca1c:	ldr	r3, [r4, #20]
   1ca20:	add	r1, r2, r1, lsl #3
   1ca24:	ldr	r2, [r1, #4]
   1ca28:	bfi	r2, r3, #8, #10
   1ca2c:	str	r2, [r1, #4]
   1ca30:	pop	{r4, r5, fp, pc}
   1ca34:	ldrb	r0, [r1, #24]
   1ca38:	cmp	r0, #16
   1ca3c:	beq	1ca50 <__assert_fail@plt+0xb2dc>
   1ca40:	cmp	r0, #11
   1ca44:	bne	1ca68 <__assert_fail@plt+0xb2f4>
   1ca48:	ldr	r0, [r1, #4]
   1ca4c:	b	1ca88 <__assert_fail@plt+0xb314>
   1ca50:	ldmib	r1, {r0, r2}
   1ca54:	ldr	r3, [r2, #12]
   1ca58:	str	r3, [r0, #16]
   1ca5c:	ldr	r0, [r1, #16]
   1ca60:	str	r0, [r2, #16]
   1ca64:	b	1ca8c <__assert_fail@plt+0xb318>
   1ca68:	ldr	r0, [r1, #4]
   1ca6c:	cmp	r0, #0
   1ca70:	ldrne	r2, [r1, #16]
   1ca74:	strne	r2, [r0, #16]
   1ca78:	ldr	r0, [r1, #8]
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1ca8c <__assert_fail@plt+0xb318>
   1ca84:	ldr	r1, [r1, #16]
   1ca88:	str	r1, [r0, #16]
   1ca8c:	mov	r0, #0
   1ca90:	bx	lr
   1ca94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ca98:	add	fp, sp, #24
   1ca9c:	ldrb	r3, [r1, #24]
   1caa0:	ldr	r2, [r1, #28]
   1caa4:	mov	r4, #0
   1caa8:	sub	r3, r3, #2
   1caac:	cmp	r3, #14
   1cab0:	bhi	1cbb8 <__assert_fail@plt+0xb444>
   1cab4:	add	r7, pc, #0
   1cab8:	ldr	pc, [r7, r3, lsl #2]
   1cabc:	andeq	ip, r1, r8, lsl #24
   1cac0:			; <UNDEFINED> instruction: 0x0001cbb8
   1cac4:	andeq	ip, r1, ip, asr #23
   1cac8:			; <UNDEFINED> instruction: 0x0001cbb8
   1cacc:			; <UNDEFINED> instruction: 0x0001cbb8
   1cad0:			; <UNDEFINED> instruction: 0x0001cbb8
   1cad4:	strdeq	ip, [r1], -r8
   1cad8:	strdeq	ip, [r1], -r8
   1cadc:	andeq	ip, r1, r4, lsr fp
   1cae0:	andeq	ip, r1, r4, lsr fp
   1cae4:	strdeq	ip, [r1], -r8
   1cae8:			; <UNDEFINED> instruction: 0x0001cbb8
   1caec:			; <UNDEFINED> instruction: 0x0001cbb8
   1caf0:			; <UNDEFINED> instruction: 0x0001cbb8
   1caf4:	andeq	ip, r1, r8, lsl #24
   1caf8:	ldr	r1, [r1, #16]
   1cafc:	ldr	r5, [r1, #28]
   1cb00:	ldr	r6, [r0, #20]
   1cb04:	add	r0, r2, r2, lsl #1
   1cb08:	mov	r1, #1
   1cb0c:	str	r1, [r6, r0, lsl #2]!
   1cb10:	mov	r0, #4
   1cb14:	mov	r7, r6
   1cb18:	str	r1, [r7, #4]!
   1cb1c:	bl	23be4 <__assert_fail@plt+0x12470>
   1cb20:	cmp	r0, #0
   1cb24:	str	r0, [r6, #8]
   1cb28:	beq	1cc10 <__assert_fail@plt+0xb49c>
   1cb2c:	str	r5, [r0]
   1cb30:	b	1cc08 <__assert_fail@plt+0xb494>
   1cb34:	ldrb	r3, [r0, #88]	; 0x58
   1cb38:	add	r6, r1, #16
   1cb3c:	add	r5, r2, r2, lsl #1
   1cb40:	orr	r3, r3, #1
   1cb44:	strb	r3, [r0, #88]	; 0x58
   1cb48:	mov	r3, r6
   1cb4c:	ldr	r7, [r1, #4]
   1cb50:	ldr	r1, [r1, #8]
   1cb54:	cmp	r1, #0
   1cb58:	addne	r3, r1, #12
   1cb5c:	cmp	r7, #0
   1cb60:	ldr	r1, [r3]
   1cb64:	addne	r6, r7, #12
   1cb68:	ldr	r8, [r1, #28]
   1cb6c:	ldr	r1, [r6]
   1cb70:	ldr	r6, [r0, #20]
   1cb74:	mov	r0, #2
   1cb78:	ldr	r9, [r1, #28]
   1cb7c:	mov	r7, r6
   1cb80:	str	r0, [r7, r5, lsl #2]!
   1cb84:	mov	r0, #8
   1cb88:	bl	23be4 <__assert_fail@plt+0x12470>
   1cb8c:	cmp	r0, #0
   1cb90:	str	r0, [r7, #8]
   1cb94:	beq	1cc1c <__assert_fail@plt+0xb4a8>
   1cb98:	add	r1, r6, r5, lsl #2
   1cb9c:	cmp	r9, r8
   1cba0:	add	r1, r1, #4
   1cba4:	bne	1cbec <__assert_fail@plt+0xb478>
   1cba8:	mov	r2, #1
   1cbac:	str	r2, [r1]
   1cbb0:	str	r9, [r0]
   1cbb4:	b	1cc08 <__assert_fail@plt+0xb494>
   1cbb8:	ldr	r1, [r1, #16]
   1cbbc:	ldr	r0, [r0, #12]
   1cbc0:	ldr	r1, [r1, #28]
   1cbc4:	str	r1, [r0, r2, lsl #2]
   1cbc8:	b	1cc08 <__assert_fail@plt+0xb494>
   1cbcc:	ldr	r7, [r1, #16]
   1cbd0:	ldr	r3, [r0, #12]
   1cbd4:	ldr	r5, [r7, #28]
   1cbd8:	str	r5, [r3, r2, lsl #2]
   1cbdc:	ldrb	r1, [r1, #24]
   1cbe0:	cmp	r1, #4
   1cbe4:	beq	1cb00 <__assert_fail@plt+0xb38c>
   1cbe8:	b	1cc08 <__assert_fail@plt+0xb494>
   1cbec:	mov	r2, #2
   1cbf0:	str	r2, [r1]
   1cbf4:	bge	1cc04 <__assert_fail@plt+0xb490>
   1cbf8:	str	r9, [r0]
   1cbfc:	str	r8, [r0, #4]
   1cc00:	b	1cc08 <__assert_fail@plt+0xb494>
   1cc04:	stm	r0, {r8, r9}
   1cc08:	mov	r0, r4
   1cc0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cc10:	mov	r0, #0
   1cc14:	str	r0, [r7]
   1cc18:	str	r0, [r6]
   1cc1c:	mov	r4, #12
   1cc20:	b	1cc08 <__assert_fail@plt+0xb494>
   1cc24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc28:	add	fp, sp, #28
   1cc2c:	sub	sp, sp, #12
   1cc30:	ldr	r5, [r2, #4]
   1cc34:	ldr	sl, [r1]
   1cc38:	mov	r9, r2
   1cc3c:	cmp	r5, #0
   1cc40:	ldrbne	r1, [r1, #28]
   1cc44:	andsne	r1, r1, #16
   1cc48:	bne	1cd50 <__assert_fail@plt+0xb5dc>
   1cc4c:	str	r0, [sp]
   1cc50:	mov	r0, #8
   1cc54:	mov	r8, #0
   1cc58:	add	r3, sp, #4
   1cc5c:	mov	r1, #0
   1cc60:	mov	r2, #0
   1cc64:	str	r0, [sp, #8]
   1cc68:	mov	r0, sl
   1cc6c:	str	r8, [sp, #4]
   1cc70:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1cc74:	mov	r7, r0
   1cc78:	mov	r0, #9
   1cc7c:	add	r3, sp, #4
   1cc80:	mov	r1, #0
   1cc84:	mov	r2, #0
   1cc88:	str	r0, [sp, #8]
   1cc8c:	mov	r0, sl
   1cc90:	str	r8, [sp, #4]
   1cc94:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1cc98:	mov	r4, r0
   1cc9c:	cmp	r5, #0
   1cca0:	mov	r6, r0
   1cca4:	beq	1cccc <__assert_fail@plt+0xb558>
   1cca8:	mov	r0, #16
   1ccac:	add	r3, sp, #4
   1ccb0:	mov	r1, r5
   1ccb4:	mov	r2, r4
   1ccb8:	str	r0, [sp, #8]
   1ccbc:	mov	r0, sl
   1ccc0:	str	r8, [sp, #4]
   1ccc4:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ccc8:	mov	r6, r0
   1cccc:	mov	r0, #16
   1ccd0:	add	r3, sp, #4
   1ccd4:	mov	r1, r7
   1ccd8:	mov	r2, r6
   1ccdc:	str	r0, [sp, #8]
   1cce0:	mov	r0, sl
   1cce4:	str	r8, [sp, #4]
   1cce8:	bl	1b6f4 <__assert_fail@plt+0x9f80>
   1ccec:	cmp	r4, #0
   1ccf0:	beq	1cd00 <__assert_fail@plt+0xb58c>
   1ccf4:	cmp	r7, #0
   1ccf8:	cmpne	r6, #0
   1ccfc:	bne	1cd14 <__assert_fail@plt+0xb5a0>
   1cd00:	ldr	r1, [sp]
   1cd04:	mov	r0, #12
   1cd08:	mov	r5, #0
   1cd0c:	str	r0, [r1]
   1cd10:	b	1cd6c <__assert_fail@plt+0xb5f8>
   1cd14:	mov	r5, r0
   1cd18:	cmp	r0, #0
   1cd1c:	beq	1cd00 <__assert_fail@plt+0xb58c>
   1cd20:	ldr	r0, [r9, #20]
   1cd24:	str	r0, [r4, #20]
   1cd28:	str	r0, [r7, #20]
   1cd2c:	ldr	r1, [r9, #24]
   1cd30:	ldr	r0, [r4, #24]
   1cd34:	lsr	r1, r1, #19
   1cd38:	bfi	r0, r1, #19, #1
   1cd3c:	str	r0, [r4, #24]
   1cd40:	ldr	r0, [r7, #24]
   1cd44:	bfi	r0, r1, #19, #1
   1cd48:	str	r0, [r7, #24]
   1cd4c:	b	1cd6c <__assert_fail@plt+0xb5f8>
   1cd50:	ldr	r3, [r9, #20]
   1cd54:	cmp	r3, #31
   1cd58:	bgt	1cd6c <__assert_fail@plt+0xb5f8>
   1cd5c:	ldr	r1, [sl, #80]	; 0x50
   1cd60:	mov	r2, #1
   1cd64:	tst	r1, r2, lsl r3
   1cd68:	bne	1cc4c <__assert_fail@plt+0xb4d8>
   1cd6c:	mov	r0, r5
   1cd70:	sub	sp, fp, #28
   1cd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd7c:	add	fp, sp, #28
   1cd80:	sub	sp, sp, #12
   1cd84:	mov	r4, r0
   1cd88:	ldr	r7, [r0, #4]
   1cd8c:	ldr	r0, [r0, #8]
   1cd90:	mov	r5, r2
   1cd94:	mov	r9, r1
   1cd98:	cmp	r0, r7
   1cd9c:	bcs	1ce68 <__assert_fail@plt+0xb6f4>
   1cda0:	ldr	r1, [r4]
   1cda4:	str	r9, [r1, r0, lsl #3]!
   1cda8:	str	r5, [r1, #4]
   1cdac:	ldr	r0, [r4]
   1cdb0:	ldr	r1, [r4, #8]
   1cdb4:	add	r0, r0, r1, lsl #3
   1cdb8:	ldr	r1, [r0, #4]
   1cdbc:	bfc	r1, #8, #10
   1cdc0:	str	r1, [r0, #4]
   1cdc4:	uxtb	r1, r5
   1cdc8:	cmp	r1, #5
   1cdcc:	bne	1cde0 <__assert_fail@plt+0xb66c>
   1cdd0:	ldr	r2, [r4, #92]	; 0x5c
   1cdd4:	mov	r0, #1048576	; 0x100000
   1cdd8:	cmp	r2, #1
   1cddc:	bgt	1cdf0 <__assert_fail@plt+0xb67c>
   1cde0:	sub	r0, r1, #6
   1cde4:	clz	r0, r0
   1cde8:	lsr	r0, r0, #5
   1cdec:	lsl	r0, r0, #20
   1cdf0:	ldr	r1, [r4]
   1cdf4:	ldr	r2, [r4, #8]
   1cdf8:	add	r1, r1, r2, lsl #3
   1cdfc:	ldr	r2, [r1, #4]
   1ce00:	bic	r2, r2, #1048576	; 0x100000
   1ce04:	orr	r0, r2, r0
   1ce08:	mvn	r2, #0
   1ce0c:	str	r0, [r1, #4]
   1ce10:	ldr	r0, [r4, #8]
   1ce14:	ldr	r1, [r4, #12]
   1ce18:	str	r2, [r1, r0, lsl #2]
   1ce1c:	mov	r2, #0
   1ce20:	ldr	r0, [r4, #8]
   1ce24:	ldr	r1, [r4, #20]
   1ce28:	add	r0, r0, r0, lsl #1
   1ce2c:	str	r2, [r1, r0, lsl #2]!
   1ce30:	str	r2, [r1, #4]
   1ce34:	str	r2, [r1, #8]
   1ce38:	ldr	r0, [r4, #8]
   1ce3c:	ldr	r1, [r4, #24]
   1ce40:	add	r0, r0, r0, lsl #1
   1ce44:	str	r2, [r1, r0, lsl #2]!
   1ce48:	str	r2, [r1, #4]
   1ce4c:	str	r2, [r1, #8]
   1ce50:	ldr	r6, [r4, #8]
   1ce54:	add	r0, r6, #1
   1ce58:	str	r0, [r4, #8]
   1ce5c:	mov	r0, r6
   1ce60:	sub	sp, fp, #28
   1ce64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce68:	movw	r0, #21845	; 0x5555
   1ce6c:	lsl	r1, r7, #1
   1ce70:	mvn	r6, #0
   1ce74:	movt	r0, #5461	; 0x1555
   1ce78:	cmp	r1, r0
   1ce7c:	bhi	1ce5c <__assert_fail@plt+0xb6e8>
   1ce80:	ldr	r0, [r4]
   1ce84:	str	r1, [sp, #8]
   1ce88:	lsl	r1, r7, #4
   1ce8c:	bl	23c14 <__assert_fail@plt+0x124a0>
   1ce90:	cmp	r0, #0
   1ce94:	beq	1ce5c <__assert_fail@plt+0xb6e8>
   1ce98:	str	r0, [r4]
   1ce9c:	lsl	r8, r7, #3
   1cea0:	ldr	r0, [r4, #12]
   1cea4:	mov	r1, r8
   1cea8:	bl	23c14 <__assert_fail@plt+0x124a0>
   1ceac:	str	r0, [sp, #4]
   1ceb0:	ldr	r0, [r4, #16]
   1ceb4:	mov	r1, r8
   1ceb8:	bl	23c14 <__assert_fail@plt+0x124a0>
   1cebc:	mov	r2, r0
   1cec0:	ldr	r0, [r4, #20]
   1cec4:	add	r1, r7, r7, lsl #1
   1cec8:	lsl	r8, r1, #3
   1cecc:	mov	r7, r2
   1ced0:	mov	r1, r8
   1ced4:	bl	23c14 <__assert_fail@plt+0x124a0>
   1ced8:	mov	sl, r0
   1cedc:	ldr	r0, [r4, #24]
   1cee0:	mov	r1, r8
   1cee4:	bl	23c14 <__assert_fail@plt+0x124a0>
   1cee8:	mov	r8, r0
   1ceec:	ldr	r0, [sp, #4]
   1cef0:	cmp	r0, #0
   1cef4:	beq	1cf04 <__assert_fail@plt+0xb790>
   1cef8:	cmp	r7, #0
   1cefc:	cmpne	sl, #0
   1cf00:	bne	1cf24 <__assert_fail@plt+0xb7b0>
   1cf04:	bl	13c04 <__assert_fail@plt+0x2490>
   1cf08:	mov	r0, r7
   1cf0c:	bl	13c04 <__assert_fail@plt+0x2490>
   1cf10:	mov	r0, sl
   1cf14:	bl	13c04 <__assert_fail@plt+0x2490>
   1cf18:	mov	r0, r8
   1cf1c:	bl	13c04 <__assert_fail@plt+0x2490>
   1cf20:	b	1ce5c <__assert_fail@plt+0xb6e8>
   1cf24:	cmp	r8, #0
   1cf28:	beq	1cf04 <__assert_fail@plt+0xb790>
   1cf2c:	add	r1, r4, #12
   1cf30:	stm	r1, {r0, r7, sl}
   1cf34:	str	r8, [r4, #24]
   1cf38:	ldr	r0, [sp, #8]
   1cf3c:	str	r0, [r4, #4]
   1cf40:	ldr	r0, [r4, #8]
   1cf44:	b	1cda0 <__assert_fail@plt+0xb62c>
   1cf48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf4c:	add	fp, sp, #28
   1cf50:	sub	sp, sp, #44	; 0x2c
   1cf54:	mov	r8, r0
   1cf58:	ldr	r0, [r1, #20]
   1cf5c:	add	r4, r2, r2, lsl #1
   1cf60:	mov	r5, r1
   1cf64:	mov	r1, #0
   1cf68:	mov	r9, r3
   1cf6c:	mov	r6, r2
   1cf70:	add	r0, r0, r4, lsl #2
   1cf74:	ldr	r0, [r0, #4]
   1cf78:	str	r1, [sp, #36]	; 0x24
   1cf7c:	add	r0, r0, #1
   1cf80:	str	r0, [sp, #32]
   1cf84:	lsl	r0, r0, #2
   1cf88:	bl	23be4 <__assert_fail@plt+0x12470>
   1cf8c:	cmp	r0, #0
   1cf90:	str	r0, [sp, #40]	; 0x28
   1cf94:	beq	1d15c <__assert_fail@plt+0xb9e8>
   1cf98:	mov	r1, #1
   1cf9c:	str	r6, [r0]
   1cfa0:	str	r1, [sp, #36]	; 0x24
   1cfa4:	mvn	r1, #0
   1cfa8:	ldr	r0, [r5, #24]
   1cfac:	add	r0, r0, r4, lsl #2
   1cfb0:	str	r1, [r0, #4]
   1cfb4:	ldr	r2, [r5]
   1cfb8:	add	r0, r2, r6, lsl #3
   1cfbc:	ldr	r0, [r0, #4]
   1cfc0:	ubfx	r1, r0, #8, #10
   1cfc4:	cmp	r1, #0
   1cfc8:	beq	1d024 <__assert_fail@plt+0xb8b0>
   1cfcc:	ldr	r3, [r5, #20]
   1cfd0:	add	r3, r3, r4, lsl #2
   1cfd4:	ldr	r7, [r3, #4]
   1cfd8:	cmp	r7, #0
   1cfdc:	beq	1d024 <__assert_fail@plt+0xb8b0>
   1cfe0:	ldr	r3, [r3, #8]
   1cfe4:	ldr	r3, [r3]
   1cfe8:	add	r2, r2, r3, lsl #3
   1cfec:	ldrb	r2, [r2, #6]
   1cff0:	tst	r2, #4
   1cff4:	bne	1d024 <__assert_fail@plt+0xb8b0>
   1cff8:	str	r1, [sp]
   1cffc:	mov	r0, r5
   1d000:	mov	r1, r6
   1d004:	mov	r2, r6
   1d008:	mov	r3, r6
   1d00c:	bl	1d164 <__assert_fail@plt+0xb9f0>
   1d010:	cmp	r0, #0
   1d014:	bne	1d154 <__assert_fail@plt+0xb9e0>
   1d018:	ldr	r0, [r5]
   1d01c:	add	r0, r0, r6, lsl #3
   1d020:	ldr	r0, [r0, #4]
   1d024:	tst	r0, #8
   1d028:	beq	1d128 <__assert_fail@plt+0xb9b4>
   1d02c:	ldr	r0, [r5, #20]
   1d030:	add	r1, r0, r4, lsl #2
   1d034:	ldr	r1, [r1, #4]
   1d038:	cmp	r1, #1
   1d03c:	blt	1d128 <__assert_fail@plt+0xb9b4>
   1d040:	str	r8, [sp, #12]
   1d044:	mov	r8, #0
   1d048:	add	r7, sp, #16
   1d04c:	add	sl, sp, #32
   1d050:	mov	r6, #0
   1d054:	str	r9, [sp, #8]
   1d058:	add	r0, r0, r4, lsl #2
   1d05c:	ldr	r0, [r0, #8]
   1d060:	ldr	r2, [r0, r6, lsl #2]
   1d064:	ldr	r0, [r5, #24]
   1d068:	add	r9, r2, r2, lsl #1
   1d06c:	add	r0, r0, r9, lsl #2
   1d070:	ldr	r1, [r0, #4]
   1d074:	cmn	r1, #1
   1d078:	beq	1d0e0 <__assert_fail@plt+0xb96c>
   1d07c:	cmp	r1, #0
   1d080:	bne	1d0a0 <__assert_fail@plt+0xb92c>
   1d084:	mov	r0, r7
   1d088:	mov	r1, r5
   1d08c:	mov	r3, #0
   1d090:	bl	1cf48 <__assert_fail@plt+0xb7d4>
   1d094:	cmp	r0, #0
   1d098:	beq	1d0b0 <__assert_fail@plt+0xb93c>
   1d09c:	b	1d154 <__assert_fail@plt+0xb9e0>
   1d0a0:	vldr	d16, [r0]
   1d0a4:	ldr	r0, [r0, #8]
   1d0a8:	str	r0, [sp, #24]
   1d0ac:	vstr	d16, [sp, #16]
   1d0b0:	mov	r0, sl
   1d0b4:	mov	r1, r7
   1d0b8:	bl	1d440 <__assert_fail@plt+0xbccc>
   1d0bc:	cmp	r0, #0
   1d0c0:	bne	1d154 <__assert_fail@plt+0xb9e0>
   1d0c4:	ldr	r0, [r5, #24]
   1d0c8:	add	r0, r0, r9, lsl #2
   1d0cc:	ldr	r0, [r0, #4]
   1d0d0:	cmp	r0, #0
   1d0d4:	bne	1d0e4 <__assert_fail@plt+0xb970>
   1d0d8:	ldr	r0, [sp, #24]
   1d0dc:	bl	13c04 <__assert_fail@plt+0x2490>
   1d0e0:	mov	r8, #1
   1d0e4:	ldr	r0, [r5, #20]
   1d0e8:	add	r6, r6, #1
   1d0ec:	add	r1, r0, r4, lsl #2
   1d0f0:	ldr	r1, [r1, #4]
   1d0f4:	cmp	r6, r1
   1d0f8:	blt	1d058 <__assert_fail@plt+0xb8e4>
   1d0fc:	tst	r8, #1
   1d100:	ldr	r8, [sp, #12]
   1d104:	ldr	r0, [sp, #8]
   1d108:	beq	1d128 <__assert_fail@plt+0xb9b4>
   1d10c:	cmp	r0, #0
   1d110:	bne	1d128 <__assert_fail@plt+0xb9b4>
   1d114:	ldr	r0, [r5, #24]
   1d118:	mov	r1, #0
   1d11c:	add	r0, r0, r4, lsl #2
   1d120:	str	r1, [r0, #4]
   1d124:	b	1d140 <__assert_fail@plt+0xb9cc>
   1d128:	ldr	r0, [r5, #24]
   1d12c:	vldr	d16, [sp, #32]
   1d130:	ldr	r1, [sp, #40]	; 0x28
   1d134:	add	r0, r0, r4, lsl #2
   1d138:	str	r1, [r0, #8]
   1d13c:	vstr	d16, [r0]
   1d140:	ldr	r0, [sp, #40]	; 0x28
   1d144:	vldr	d16, [sp, #32]
   1d148:	str	r0, [r8, #8]
   1d14c:	mov	r0, #0
   1d150:	vstr	d16, [r8]
   1d154:	sub	sp, fp, #28
   1d158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d15c:	mov	r0, #12
   1d160:	b	1d154 <__assert_fail@plt+0xb9e0>
   1d164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d168:	add	fp, sp, #28
   1d16c:	sub	sp, sp, #20
   1d170:	ldr	sl, [fp, #8]
   1d174:	mov	r8, r2
   1d178:	mov	r4, r1
   1d17c:	mov	r7, r0
   1d180:	str	r3, [sp, #8]
   1d184:	ldr	r2, [r7]
   1d188:	add	r1, r2, r4, lsl #3
   1d18c:	ldrb	r0, [r1, #4]!
   1d190:	cmp	r0, #4
   1d194:	bne	1d214 <__assert_fail@plt+0xbaa0>
   1d198:	ldr	r0, [r7, #12]
   1d19c:	ldr	r1, [r7, #20]
   1d1a0:	add	r9, r8, r8, lsl #1
   1d1a4:	mov	r2, sl
   1d1a8:	mov	r6, r7
   1d1ac:	ldr	r5, [r0, r4, lsl #2]
   1d1b0:	add	r0, r1, r9, lsl #2
   1d1b4:	mov	r1, #0
   1d1b8:	str	r1, [r0, #4]
   1d1bc:	mov	r0, r7
   1d1c0:	mov	r1, r5
   1d1c4:	bl	1d5cc <__assert_fail@plt+0xbe58>
   1d1c8:	mov	r7, r0
   1d1cc:	mov	r0, #12
   1d1d0:	cmn	r7, #1
   1d1d4:	str	r0, [sp, #16]
   1d1d8:	beq	1d434 <__assert_fail@plt+0xbcc0>
   1d1dc:	ldr	r0, [r6, #12]
   1d1e0:	ldr	r1, [r0, r4, lsl #2]
   1d1e4:	str	r1, [r0, r8, lsl #2]
   1d1e8:	mov	r1, r7
   1d1ec:	ldr	r0, [r6, #20]
   1d1f0:	add	r0, r0, r9, lsl #2
   1d1f4:	bl	1d654 <__assert_fail@plt+0xbee0>
   1d1f8:	mov	r8, r7
   1d1fc:	mov	r1, #0
   1d200:	cmp	r0, #0
   1d204:	mov	r4, r5
   1d208:	mov	r7, r6
   1d20c:	bne	1d3e4 <__assert_fail@plt+0xbc70>
   1d210:	b	1d434 <__assert_fail@plt+0xbcc0>
   1d214:	ldr	r0, [r7, #20]
   1d218:	add	r9, r4, r4, lsl #1
   1d21c:	add	r6, r0, r9, lsl #2
   1d220:	ldr	r3, [r6, #4]
   1d224:	cmp	r3, #0
   1d228:	beq	1d420 <__assert_fail@plt+0xbcac>
   1d22c:	ldr	r6, [r6, #8]
   1d230:	cmp	r3, #1
   1d234:	ldr	r5, [r6]
   1d238:	add	r6, r8, r8, lsl #1
   1d23c:	add	r0, r0, r6, lsl #2
   1d240:	str	r6, [sp, #12]
   1d244:	mov	r6, #0
   1d248:	str	r6, [r0, #4]
   1d24c:	bne	1d280 <__assert_fail@plt+0xbb0c>
   1d250:	ldr	r2, [sp, #8]
   1d254:	cmp	r4, r2
   1d258:	bne	1d390 <__assert_fail@plt+0xbc1c>
   1d25c:	cmp	r8, r4
   1d260:	beq	1d390 <__assert_fail@plt+0xbc1c>
   1d264:	mov	r1, r5
   1d268:	bl	1d654 <__assert_fail@plt+0xbee0>
   1d26c:	ldr	r4, [sp, #8]
   1d270:	cmp	r0, #0
   1d274:	mov	r1, #1
   1d278:	movwne	r1, #2
   1d27c:	b	1d3e4 <__assert_fail@plt+0xbc70>
   1d280:	ldr	r1, [r7, #8]
   1d284:	sub	r3, r1, #1
   1d288:	cmp	r3, #1
   1d28c:	blt	1d2dc <__assert_fail@plt+0xbb68>
   1d290:	add	r3, r2, r3, lsl #3
   1d294:	ldr	r6, [r3, #4]
   1d298:	ands	r3, r6, #262144	; 0x40000
   1d29c:	beq	1d2dc <__assert_fail@plt+0xbb68>
   1d2a0:	ldr	r3, [r7, #16]
   1d2a4:	sub	r2, r2, #12
   1d2a8:	sub	r3, r3, #4
   1d2ac:	ldr	r4, [r3, r1, lsl #2]
   1d2b0:	cmp	r4, r5
   1d2b4:	ubfxeq	r6, r6, #8, #10
   1d2b8:	cmpeq	r6, sl
   1d2bc:	beq	1d3f0 <__assert_fail@plt+0xbc7c>
   1d2c0:	sub	r6, r1, #2
   1d2c4:	cmp	r6, #1
   1d2c8:	blt	1d2dc <__assert_fail@plt+0xbb68>
   1d2cc:	ldr	r6, [r2, r1, lsl #3]
   1d2d0:	sub	r1, r1, #1
   1d2d4:	ands	r4, r6, #262144	; 0x40000
   1d2d8:	bne	1d2ac <__assert_fail@plt+0xbb38>
   1d2dc:	mov	r0, r7
   1d2e0:	mov	r1, r5
   1d2e4:	mov	r2, sl
   1d2e8:	bl	1d5cc <__assert_fail@plt+0xbe58>
   1d2ec:	mov	r4, r0
   1d2f0:	mov	r0, #12
   1d2f4:	cmn	r4, #1
   1d2f8:	str	r0, [sp, #16]
   1d2fc:	beq	1d434 <__assert_fail@plt+0xbcc0>
   1d300:	ldr	r0, [r7, #20]
   1d304:	ldr	r6, [sp, #12]
   1d308:	mov	r1, r4
   1d30c:	add	r0, r0, r6, lsl #2
   1d310:	bl	1d654 <__assert_fail@plt+0xbee0>
   1d314:	cmp	r0, #0
   1d318:	beq	1d434 <__assert_fail@plt+0xbcc0>
   1d31c:	ldr	r3, [sp, #8]
   1d320:	mov	r0, r7
   1d324:	mov	r1, r5
   1d328:	mov	r2, r4
   1d32c:	str	sl, [sp]
   1d330:	bl	1d164 <__assert_fail@plt+0xb9f0>
   1d334:	cmp	r0, #0
   1d338:	bne	1d430 <__assert_fail@plt+0xbcbc>
   1d33c:	ldr	r0, [r7, #20]
   1d340:	mov	r2, sl
   1d344:	add	r0, r0, r9, lsl #2
   1d348:	ldr	r0, [r0, #8]
   1d34c:	ldr	r4, [r0, #4]
   1d350:	mov	r0, r7
   1d354:	mov	r1, r4
   1d358:	bl	1d5cc <__assert_fail@plt+0xbe58>
   1d35c:	mov	r8, r0
   1d360:	mov	r0, #12
   1d364:	cmn	r8, #1
   1d368:	str	r0, [sp, #16]
   1d36c:	beq	1d434 <__assert_fail@plt+0xbcc0>
   1d370:	ldr	r0, [r7, #20]
   1d374:	mov	r1, r8
   1d378:	add	r0, r0, r6, lsl #2
   1d37c:	bl	1d654 <__assert_fail@plt+0xbee0>
   1d380:	mov	r1, #0
   1d384:	cmp	r0, #0
   1d388:	bne	1d3e4 <__assert_fail@plt+0xbc70>
   1d38c:	b	1d434 <__assert_fail@plt+0xbcc0>
   1d390:	ldr	r0, [r1]
   1d394:	mov	r1, r5
   1d398:	ubfx	r0, r0, #8, #10
   1d39c:	orr	sl, r0, sl
   1d3a0:	mov	r0, r7
   1d3a4:	mov	r2, sl
   1d3a8:	bl	1d5cc <__assert_fail@plt+0xbe58>
   1d3ac:	mov	r8, r0
   1d3b0:	mov	r0, #12
   1d3b4:	cmn	r8, #1
   1d3b8:	str	r0, [sp, #16]
   1d3bc:	beq	1d434 <__assert_fail@plt+0xbcc0>
   1d3c0:	ldr	r0, [r7, #20]
   1d3c4:	ldr	r1, [sp, #12]
   1d3c8:	add	r0, r0, r1, lsl #2
   1d3cc:	mov	r1, r8
   1d3d0:	bl	1d654 <__assert_fail@plt+0xbee0>
   1d3d4:	mov	r1, #0
   1d3d8:	cmp	r0, #0
   1d3dc:	mov	r4, r5
   1d3e0:	beq	1d434 <__assert_fail@plt+0xbcc0>
   1d3e4:	cmp	r1, #0
   1d3e8:	beq	1d184 <__assert_fail@plt+0xba10>
   1d3ec:	b	1d40c <__assert_fail@plt+0xbc98>
   1d3f0:	sub	r1, r1, #1
   1d3f4:	bl	1d654 <__assert_fail@plt+0xbee0>
   1d3f8:	ldr	r6, [sp, #12]
   1d3fc:	cmp	r0, #0
   1d400:	bne	1d33c <__assert_fail@plt+0xbbc8>
   1d404:	mov	r0, #12
   1d408:	b	1d430 <__assert_fail@plt+0xbcbc>
   1d40c:	mov	r0, #12
   1d410:	cmp	r1, #2
   1d414:	str	r0, [sp, #16]
   1d418:	beq	1d42c <__assert_fail@plt+0xbcb8>
   1d41c:	b	1d434 <__assert_fail@plt+0xbcc0>
   1d420:	ldr	r0, [r7, #12]
   1d424:	ldr	r1, [r0, r4, lsl #2]
   1d428:	str	r1, [r0, r8, lsl #2]
   1d42c:	mov	r0, #0
   1d430:	str	r0, [sp, #16]
   1d434:	ldr	r0, [sp, #16]
   1d438:	sub	sp, fp, #28
   1d43c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d440:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d444:	add	fp, sp, #24
   1d448:	mov	r8, #0
   1d44c:	cmp	r1, #0
   1d450:	beq	1d5a8 <__assert_fail@plt+0xbe34>
   1d454:	mov	r5, r0
   1d458:	ldr	r0, [r1, #4]
   1d45c:	mov	r9, r1
   1d460:	cmp	r0, #0
   1d464:	beq	1d5a8 <__assert_fail@plt+0xbe34>
   1d468:	ldr	r1, [r5, #4]
   1d46c:	ldr	r2, [r5]
   1d470:	add	r3, r1, r0, lsl #1
   1d474:	cmp	r2, r3
   1d478:	bge	1d4a8 <__assert_fail@plt+0xbd34>
   1d47c:	add	r7, r2, r0
   1d480:	ldr	r0, [r5, #8]
   1d484:	lsl	r1, r7, #3
   1d488:	bl	23c14 <__assert_fail@plt+0x124a0>
   1d48c:	cmp	r0, #0
   1d490:	beq	1d5c4 <__assert_fail@plt+0xbe50>
   1d494:	str	r0, [r5, #8]
   1d498:	lsl	r0, r7, #1
   1d49c:	str	r0, [r5]
   1d4a0:	ldr	r1, [r5, #4]
   1d4a4:	ldr	r0, [r9, #4]
   1d4a8:	cmp	r1, #0
   1d4ac:	beq	1d5b0 <__assert_fail@plt+0xbe3c>
   1d4b0:	add	r7, r1, r0, lsl #1
   1d4b4:	sub	r1, r1, #1
   1d4b8:	sub	r0, r0, #1
   1d4bc:	orr	r2, r0, r1
   1d4c0:	cmp	r2, #0
   1d4c4:	blt	1d510 <__assert_fail@plt+0xbd9c>
   1d4c8:	ldr	r2, [r9, #8]
   1d4cc:	ldr	r3, [r5, #8]
   1d4d0:	ldr	r4, [r2, r0, lsl #2]
   1d4d4:	ldr	r6, [r3, r1, lsl #2]
   1d4d8:	cmp	r6, r4
   1d4dc:	bne	1d4ec <__assert_fail@plt+0xbd78>
   1d4e0:	sub	r1, r1, #1
   1d4e4:	sub	r0, r0, #1
   1d4e8:	b	1d504 <__assert_fail@plt+0xbd90>
   1d4ec:	bge	1d500 <__assert_fail@plt+0xbd8c>
   1d4f0:	sub	r7, r7, #1
   1d4f4:	sub	r0, r0, #1
   1d4f8:	str	r4, [r3, r7, lsl #2]
   1d4fc:	b	1d504 <__assert_fail@plt+0xbd90>
   1d500:	sub	r1, r1, #1
   1d504:	orr	r6, r0, r1
   1d508:	cmn	r6, #1
   1d50c:	bgt	1d4d0 <__assert_fail@plt+0xbd5c>
   1d510:	cmp	r0, #0
   1d514:	blt	1d534 <__assert_fail@plt+0xbdc0>
   1d518:	add	r2, r0, #1
   1d51c:	ldr	r0, [r5, #8]
   1d520:	ldr	r1, [r9, #8]
   1d524:	sub	r7, r7, r2
   1d528:	lsl	r2, r2, #2
   1d52c:	add	r0, r0, r7, lsl #2
   1d530:	bl	1148c <memcpy@plt>
   1d534:	ldr	r0, [r5, #4]
   1d538:	ldr	r2, [r9, #4]
   1d53c:	sub	r1, r0, #1
   1d540:	add	r3, r1, r2, lsl #1
   1d544:	sub	r2, r3, r7
   1d548:	adds	r2, r2, #1
   1d54c:	beq	1d5a8 <__assert_fail@plt+0xbe34>
   1d550:	add	r0, r2, r0
   1d554:	str	r0, [r5, #4]
   1d558:	ldr	r0, [r5, #8]
   1d55c:	ldr	r6, [r0, r1, lsl #2]
   1d560:	ldr	r5, [r0, r3, lsl #2]
   1d564:	cmp	r5, r6
   1d568:	ble	1d584 <__assert_fail@plt+0xbe10>
   1d56c:	add	r6, r2, r1
   1d570:	subs	r2, r2, #1
   1d574:	sub	r3, r3, #1
   1d578:	str	r5, [r0, r6, lsl #2]
   1d57c:	bne	1d55c <__assert_fail@plt+0xbde8>
   1d580:	b	1d5a8 <__assert_fail@plt+0xbe34>
   1d584:	add	r5, r2, r1
   1d588:	cmp	r1, #0
   1d58c:	str	r6, [r0, r5, lsl #2]
   1d590:	sub	r6, r1, #1
   1d594:	mov	r1, r6
   1d598:	bgt	1d55c <__assert_fail@plt+0xbde8>
   1d59c:	add	r1, r0, r7, lsl #2
   1d5a0:	lsl	r2, r2, #2
   1d5a4:	bl	1148c <memcpy@plt>
   1d5a8:	mov	r0, r8
   1d5ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d5b0:	str	r0, [r5, #4]
   1d5b4:	ldr	r0, [r5, #8]
   1d5b8:	ldr	r2, [r9, #4]
   1d5bc:	ldr	r1, [r9, #8]
   1d5c0:	b	1d5a0 <__assert_fail@plt+0xbe2c>
   1d5c4:	mov	r8, #12
   1d5c8:	b	1d5a8 <__assert_fail@plt+0xbe34>
   1d5cc:	push	{r4, r5, r6, sl, fp, lr}
   1d5d0:	add	fp, sp, #16
   1d5d4:	mov	r5, r0
   1d5d8:	ldr	r0, [r0]
   1d5dc:	mov	r4, r1
   1d5e0:	mov	r6, r2
   1d5e4:	ldr	r1, [r0, r1, lsl #3]!
   1d5e8:	ldr	r2, [r0, #4]
   1d5ec:	mov	r0, r5
   1d5f0:	bl	1cd78 <__assert_fail@plt+0xb604>
   1d5f4:	cmn	r0, #1
   1d5f8:	ldrne	r1, [r5]
   1d5fc:	movwne	r3, #65280	; 0xff00
   1d600:	movtne	r3, #3
   1d604:	addne	r1, r1, r0, lsl #3
   1d608:	ldrne	r2, [r1, #4]
   1d60c:	bfine	r2, r6, #8, #10
   1d610:	strne	r2, [r1, #4]
   1d614:	ldrne	r1, [r5]
   1d618:	addne	r2, r1, r4, lsl #3
   1d61c:	addne	r1, r1, r0, lsl #3
   1d620:	ldrne	r2, [r2, #4]
   1d624:	andne	r2, r2, r3
   1d628:	ldrne	r3, [r1, #4]
   1d62c:	orrne	r2, r2, r3
   1d630:	strne	r2, [r1, #4]
   1d634:	ldrne	r1, [r5]
   1d638:	addne	r1, r1, r0, lsl #3
   1d63c:	ldrne	r2, [r1, #4]
   1d640:	orrne	r2, r2, #262144	; 0x40000
   1d644:	strne	r2, [r1, #4]
   1d648:	ldrne	r1, [r5, #16]
   1d64c:	strne	r4, [r1, r0, lsl #2]
   1d650:	pop	{r4, r5, r6, sl, fp, pc}
   1d654:	push	{r4, r5, r6, sl, fp, lr}
   1d658:	add	fp, sp, #16
   1d65c:	ldr	r2, [r0]
   1d660:	mov	r5, r1
   1d664:	mov	r4, r0
   1d668:	cmp	r2, #0
   1d66c:	beq	1d698 <__assert_fail@plt+0xbf24>
   1d670:	ldr	r1, [r4, #4]
   1d674:	cmp	r1, #0
   1d678:	bne	1d6c4 <__assert_fail@plt+0xbf50>
   1d67c:	ldr	r0, [r4, #8]
   1d680:	str	r5, [r0]
   1d684:	ldr	r0, [r4, #4]
   1d688:	mov	r6, #1
   1d68c:	add	r0, r0, #1
   1d690:	str	r0, [r4, #4]
   1d694:	b	1d6bc <__assert_fail@plt+0xbf48>
   1d698:	mov	r6, #1
   1d69c:	mov	r0, #4
   1d6a0:	str	r6, [r4]
   1d6a4:	str	r6, [r4, #4]
   1d6a8:	bl	23be4 <__assert_fail@plt+0x12470>
   1d6ac:	cmp	r0, #0
   1d6b0:	str	r0, [r4, #8]
   1d6b4:	beq	1d6f4 <__assert_fail@plt+0xbf80>
   1d6b8:	str	r5, [r0]
   1d6bc:	mov	r0, r6
   1d6c0:	pop	{r4, r5, r6, sl, fp, pc}
   1d6c4:	cmp	r2, r1
   1d6c8:	bne	1d704 <__assert_fail@plt+0xbf90>
   1d6cc:	lsl	r0, r2, #1
   1d6d0:	lsl	r1, r2, #3
   1d6d4:	str	r0, [r4]
   1d6d8:	ldr	r0, [r4, #8]
   1d6dc:	bl	23c14 <__assert_fail@plt+0x124a0>
   1d6e0:	cmp	r0, #0
   1d6e4:	beq	1d780 <__assert_fail@plt+0xc00c>
   1d6e8:	str	r0, [r4, #8]
   1d6ec:	ldr	r1, [r4, #4]
   1d6f0:	b	1d708 <__assert_fail@plt+0xbf94>
   1d6f4:	mov	r6, #0
   1d6f8:	str	r6, [r4]
   1d6fc:	str	r6, [r4, #4]
   1d700:	b	1d6bc <__assert_fail@plt+0xbf48>
   1d704:	ldr	r0, [r4, #8]
   1d708:	ldr	r2, [r0]
   1d70c:	cmp	r2, r5
   1d710:	ble	1d748 <__assert_fail@plt+0xbfd4>
   1d714:	cmp	r1, #1
   1d718:	blt	1d778 <__assert_fail@plt+0xc004>
   1d71c:	add	r2, r0, r1, lsl #2
   1d720:	add	r1, r1, #1
   1d724:	mov	r3, r2
   1d728:	ldr	r6, [r3, #-4]!
   1d72c:	sub	r1, r1, #1
   1d730:	cmp	r1, #1
   1d734:	str	r6, [r2]
   1d738:	mov	r2, r3
   1d73c:	bgt	1d728 <__assert_fail@plt+0xbfb4>
   1d740:	sub	r1, r1, #1
   1d744:	b	1d778 <__assert_fail@plt+0xc004>
   1d748:	add	r2, r0, r1, lsl #2
   1d74c:	ldr	r3, [r2, #-4]
   1d750:	cmp	r3, r5
   1d754:	ble	1d778 <__assert_fail@plt+0xc004>
   1d758:	sub	r1, r1, #2
   1d75c:	str	r3, [r2]
   1d760:	sub	r1, r1, #1
   1d764:	ldr	r3, [r2, #-8]
   1d768:	sub	r2, r2, #4
   1d76c:	cmp	r3, r5
   1d770:	bgt	1d75c <__assert_fail@plt+0xbfe8>
   1d774:	add	r1, r1, #2
   1d778:	str	r5, [r0, r1, lsl #2]
   1d77c:	b	1d684 <__assert_fail@plt+0xbf10>
   1d780:	mov	r6, #0
   1d784:	b	1d6bc <__assert_fail@plt+0xbf48>
   1d788:	push	{r4, r5, fp, lr}
   1d78c:	add	fp, sp, #8
   1d790:	mov	r5, r0
   1d794:	mov	r4, r1
   1d798:	ldr	r0, [r0]
   1d79c:	ldr	r1, [r5, #4]
   1d7a0:	cmp	r0, r1
   1d7a4:	bne	1d7d8 <__assert_fail@plt+0xc064>
   1d7a8:	mov	r1, #2
   1d7ac:	add	r0, r1, r0, lsl #1
   1d7b0:	str	r0, [r5]
   1d7b4:	lsl	r1, r0, #2
   1d7b8:	ldr	r0, [r5, #8]
   1d7bc:	bl	23c14 <__assert_fail@plt+0x124a0>
   1d7c0:	cmp	r0, #0
   1d7c4:	moveq	r0, #0
   1d7c8:	popeq	{r4, r5, fp, pc}
   1d7cc:	str	r0, [r5, #8]
   1d7d0:	ldr	r1, [r5, #4]
   1d7d4:	b	1d7dc <__assert_fail@plt+0xc068>
   1d7d8:	ldr	r0, [r5, #8]
   1d7dc:	add	r2, r1, #1
   1d7e0:	str	r2, [r5, #4]
   1d7e4:	str	r4, [r0, r1, lsl #2]
   1d7e8:	mov	r0, #1
   1d7ec:	pop	{r4, r5, fp, pc}
   1d7f0:	push	{r4, r5, fp, lr}
   1d7f4:	add	fp, sp, #8
   1d7f8:	mov	r4, r0
   1d7fc:	ldr	r0, [r1, #4]
   1d800:	mov	r5, r1
   1d804:	str	r0, [r4, #4]
   1d808:	ldr	r1, [r1, #4]
   1d80c:	cmp	r1, #1
   1d810:	blt	1d844 <__assert_fail@plt+0xc0d0>
   1d814:	str	r0, [r4]
   1d818:	lsl	r0, r0, #2
   1d81c:	bl	23be4 <__assert_fail@plt+0x12470>
   1d820:	cmp	r0, #0
   1d824:	str	r0, [r4, #8]
   1d828:	beq	1d858 <__assert_fail@plt+0xc0e4>
   1d82c:	ldr	r2, [r5, #4]
   1d830:	ldr	r1, [r5, #8]
   1d834:	lsl	r2, r2, #2
   1d838:	bl	1148c <memcpy@plt>
   1d83c:	mov	r0, #0
   1d840:	pop	{r4, r5, fp, pc}
   1d844:	mov	r0, #0
   1d848:	str	r0, [r4]
   1d84c:	str	r0, [r4, #4]
   1d850:	str	r0, [r4, #8]
   1d854:	pop	{r4, r5, fp, pc}
   1d858:	mov	r0, #0
   1d85c:	str	r0, [r4]
   1d860:	str	r0, [r4, #4]
   1d864:	mov	r0, #12
   1d868:	pop	{r4, r5, fp, pc}
   1d86c:	ldr	r2, [r0, #4]
   1d870:	cmp	r2, #1
   1d874:	movlt	r0, #0
   1d878:	bxlt	lr
   1d87c:	push	{r4, r5, r6, sl, fp, lr}
   1d880:	add	fp, sp, #16
   1d884:	ldr	ip, [r0, #8]
   1d888:	subs	r2, r2, #1
   1d88c:	mov	r0, #0
   1d890:	mov	r3, #0
   1d894:	beq	1d8c0 <__assert_fail@plt+0xc14c>
   1d898:	mov	r3, #0
   1d89c:	mov	lr, #1
   1d8a0:	add	r4, r2, r3
   1d8a4:	lsr	r5, r4, #1
   1d8a8:	ldr	r6, [ip, r5, lsl #2]
   1d8ac:	cmp	r6, r1
   1d8b0:	movge	r2, r5
   1d8b4:	addlt	r3, lr, r4, lsr #1
   1d8b8:	cmp	r3, r2
   1d8bc:	bcc	1d8a0 <__assert_fail@plt+0xc12c>
   1d8c0:	ldr	r2, [ip, r3, lsl #2]
   1d8c4:	cmp	r2, r1
   1d8c8:	addeq	r0, r3, #1
   1d8cc:	pop	{r4, r5, r6, sl, fp, pc}
   1d8d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8d4:	add	fp, sp, #28
   1d8d8:	sub	sp, sp, #20
   1d8dc:	ldr	lr, [r2, #4]
   1d8e0:	cmp	lr, #0
   1d8e4:	beq	1dbec <__assert_fail@plt+0xc478>
   1d8e8:	mov	r8, r3
   1d8ec:	mov	sl, r2
   1d8f0:	add	r7, lr, r3
   1d8f4:	cmp	lr, #1
   1d8f8:	str	r0, [sp, #4]
   1d8fc:	blt	1d918 <__assert_fail@plt+0xc1a4>
   1d900:	ldr	r3, [sl, #8]
   1d904:	mov	r2, lr
   1d908:	ldr	r0, [r3], #4
   1d90c:	subs	r2, r2, #1
   1d910:	add	r7, r0, r7
   1d914:	bne	1d908 <__assert_fail@plt+0xc194>
   1d918:	ldr	r0, [r1, #32]
   1d91c:	str	r1, [sp, #12]
   1d920:	ldr	r1, [r1, #68]	; 0x44
   1d924:	and	r1, r1, r7
   1d928:	add	r2, r1, r1, lsl #1
   1d92c:	ldr	r1, [r0, r2, lsl #2]
   1d930:	cmp	r1, #1
   1d934:	blt	1d9c4 <__assert_fail@plt+0xc250>
   1d938:	add	r0, r0, r2, lsl #2
   1d93c:	sub	ip, lr, #1
   1d940:	mov	r3, #0
   1d944:	ldr	r9, [r0, #8]
   1d948:	b	1d988 <__assert_fail@plt+0xc214>
   1d94c:	ldr	r0, [r5, #4]
   1d950:	cmp	r0, lr
   1d954:	bne	1d9b8 <__assert_fail@plt+0xc244>
   1d958:	mov	r0, ip
   1d95c:	add	r6, r0, #1
   1d960:	cmp	r6, #1
   1d964:	blt	1dbf4 <__assert_fail@plt+0xc480>
   1d968:	ldr	r6, [sl, #8]
   1d96c:	ldr	r2, [r5, #8]
   1d970:	ldr	r6, [r6, r0, lsl #2]
   1d974:	ldr	r2, [r2, r0, lsl #2]
   1d978:	sub	r0, r0, #1
   1d97c:	cmp	r2, r6
   1d980:	beq	1d95c <__assert_fail@plt+0xc1e8>
   1d984:	b	1d9b8 <__assert_fail@plt+0xc244>
   1d988:	ldr	r4, [r9, r3, lsl #2]
   1d98c:	ldr	r0, [r4]
   1d990:	cmp	r0, r7
   1d994:	bne	1d9b8 <__assert_fail@plt+0xc244>
   1d998:	ldrb	r0, [r4, #52]	; 0x34
   1d99c:	and	r0, r0, #15
   1d9a0:	cmp	r0, r8
   1d9a4:	bne	1d9b8 <__assert_fail@plt+0xc244>
   1d9a8:	cmp	sl, #0
   1d9ac:	ldrne	r5, [r4, #40]	; 0x28
   1d9b0:	cmpne	r5, #0
   1d9b4:	bne	1d94c <__assert_fail@plt+0xc1d8>
   1d9b8:	add	r3, r3, #1
   1d9bc:	cmp	r3, r1
   1d9c0:	blt	1d988 <__assert_fail@plt+0xc214>
   1d9c4:	mov	r0, #56	; 0x38
   1d9c8:	mov	r1, #1
   1d9cc:	bl	23b90 <__assert_fail@plt+0x1241c>
   1d9d0:	cmp	r0, #0
   1d9d4:	beq	1dbd8 <__assert_fail@plt+0xc464>
   1d9d8:	add	r5, r0, #4
   1d9dc:	mov	r4, r0
   1d9e0:	mov	r1, sl
   1d9e4:	mov	r0, r5
   1d9e8:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   1d9ec:	cmp	r0, #0
   1d9f0:	bne	1dc00 <__assert_fail@plt+0xc48c>
   1d9f4:	str	r5, [r4, #40]	; 0x28
   1d9f8:	and	r0, r8, #15
   1d9fc:	ldr	r6, [sp, #12]
   1da00:	ldrb	r1, [r4, #52]	; 0x34
   1da04:	and	r1, r1, #240	; 0xf0
   1da08:	orr	r0, r1, r0
   1da0c:	strb	r0, [r4, #52]	; 0x34
   1da10:	ldr	r0, [sl, #4]
   1da14:	cmp	r0, #1
   1da18:	blt	1dbb8 <__assert_fail@plt+0xc444>
   1da1c:	movw	r9, #65280	; 0xff00
   1da20:	and	r0, r8, #4
   1da24:	mov	ip, r5
   1da28:	and	lr, r8, #1
   1da2c:	str	r0, [sp]
   1da30:	and	r0, r8, #2
   1da34:	movt	r9, #3
   1da38:	mov	r8, #0
   1da3c:	str	r0, [sp, #8]
   1da40:	add	r3, r9, #255	; 0xff
   1da44:	mov	r0, #0
   1da48:	str	r3, [sp, #16]
   1da4c:	b	1da84 <__assert_fail@plt+0xc310>
   1da50:	sub	r2, r2, #1
   1da54:	cmp	r2, r1
   1da58:	str	r2, [r4, #8]
   1da5c:	ble	1dba0 <__assert_fail@plt+0xc42c>
   1da60:	ldr	r2, [r4, #12]
   1da64:	add	r3, r2, r1, lsl #2
   1da68:	ldr	r3, [r3, #4]
   1da6c:	str	r3, [r2, r1, lsl #2]
   1da70:	add	r1, r1, #1
   1da74:	ldr	r3, [r4, #8]
   1da78:	cmp	r1, r3
   1da7c:	blt	1da64 <__assert_fail@plt+0xc2f0>
   1da80:	b	1dba0 <__assert_fail@plt+0xc42c>
   1da84:	ldr	r1, [sl, #8]
   1da88:	ldr	r2, [r6]
   1da8c:	ldr	r1, [r1, r8, lsl #2]
   1da90:	add	r1, r2, r1, lsl #3
   1da94:	ldr	r5, [r1, #4]
   1da98:	and	r1, r5, r3
   1da9c:	cmp	r1, #1
   1daa0:	beq	1dba8 <__assert_fail@plt+0xc434>
   1daa4:	ldrb	r3, [r4, #52]	; 0x34
   1daa8:	mov	r2, #32
   1daac:	and	r1, r5, r9
   1dab0:	and	r2, r2, r5, lsr #15
   1dab4:	orr	r2, r3, r2
   1dab8:	uxtb	r3, r5
   1dabc:	cmp	r3, #2
   1dac0:	strb	r2, [r4, #52]	; 0x34
   1dac4:	beq	1dad8 <__assert_fail@plt+0xc364>
   1dac8:	cmp	r3, #4
   1dacc:	bne	1dae4 <__assert_fail@plt+0xc370>
   1dad0:	mov	r3, #64	; 0x40
   1dad4:	b	1dadc <__assert_fail@plt+0xc368>
   1dad8:	mov	r3, #16
   1dadc:	orr	r2, r2, r3
   1dae0:	strb	r2, [r4, #52]	; 0x34
   1dae4:	cmp	r1, #0
   1dae8:	beq	1dba4 <__assert_fail@plt+0xc430>
   1daec:	ldr	r1, [r4, #40]	; 0x28
   1daf0:	cmp	r1, ip
   1daf4:	bne	1db48 <__assert_fail@plt+0xc3d4>
   1daf8:	mov	r0, #12
   1dafc:	mov	r6, lr
   1db00:	mov	r9, ip
   1db04:	bl	23be4 <__assert_fail@plt+0x12470>
   1db08:	cmp	r0, #0
   1db0c:	beq	1dbd0 <__assert_fail@plt+0xc45c>
   1db10:	mov	r1, sl
   1db14:	str	r0, [r4, #40]	; 0x28
   1db18:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   1db1c:	cmp	r0, #0
   1db20:	bne	1dbd0 <__assert_fail@plt+0xc45c>
   1db24:	ldrb	r0, [r4, #52]	; 0x34
   1db28:	mov	lr, r6
   1db2c:	ldr	r6, [sp, #12]
   1db30:	mov	ip, r9
   1db34:	movw	r9, #65280	; 0xff00
   1db38:	movt	r9, #3
   1db3c:	orr	r0, r0, #128	; 0x80
   1db40:	strb	r0, [r4, #52]	; 0x34
   1db44:	mov	r0, #0
   1db48:	cmp	lr, #0
   1db4c:	bne	1db58 <__assert_fail@plt+0xc3e4>
   1db50:	ands	r1, r5, #256	; 0x100
   1db54:	bne	1db8c <__assert_fail@plt+0xc418>
   1db58:	cmp	lr, #0
   1db5c:	andsne	r1, r5, #512	; 0x200
   1db60:	bne	1db8c <__assert_fail@plt+0xc418>
   1db64:	ldr	r1, [sp, #8]
   1db68:	cmp	r1, #0
   1db6c:	bne	1db78 <__assert_fail@plt+0xc404>
   1db70:	ands	r1, r5, #4096	; 0x1000
   1db74:	bne	1db8c <__assert_fail@plt+0xc418>
   1db78:	ldr	r1, [sp]
   1db7c:	cmp	r1, #0
   1db80:	bne	1dba4 <__assert_fail@plt+0xc430>
   1db84:	ands	r1, r5, #16384	; 0x4000
   1db88:	beq	1dba4 <__assert_fail@plt+0xc430>
   1db8c:	sub	r1, r8, r0
   1db90:	cmp	r1, #0
   1db94:	ldrge	r2, [r4, #8]
   1db98:	cmpge	r2, r1
   1db9c:	bgt	1da50 <__assert_fail@plt+0xc2dc>
   1dba0:	add	r0, r0, #1
   1dba4:	ldr	r3, [sp, #16]
   1dba8:	ldr	r1, [sl, #4]
   1dbac:	add	r8, r8, #1
   1dbb0:	cmp	r8, r1
   1dbb4:	blt	1da84 <__assert_fail@plt+0xc310>
   1dbb8:	mov	r0, r6
   1dbbc:	mov	r1, r4
   1dbc0:	mov	r2, r7
   1dbc4:	bl	1dc0c <__assert_fail@plt+0xc498>
   1dbc8:	cmp	r0, #0
   1dbcc:	beq	1dbf4 <__assert_fail@plt+0xc480>
   1dbd0:	mov	r0, r4
   1dbd4:	bl	18d3c <__assert_fail@plt+0x75c8>
   1dbd8:	ldr	r1, [sp, #4]
   1dbdc:	mov	r0, #12
   1dbe0:	mov	r4, #0
   1dbe4:	str	r0, [r1]
   1dbe8:	b	1dbf4 <__assert_fail@plt+0xc480>
   1dbec:	mov	r4, #0
   1dbf0:	str	r4, [r0]
   1dbf4:	mov	r0, r4
   1dbf8:	sub	sp, fp, #28
   1dbfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc00:	mov	r0, r4
   1dc04:	bl	13c04 <__assert_fail@plt+0x2490>
   1dc08:	b	1dbd8 <__assert_fail@plt+0xc464>
   1dc0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dc10:	add	fp, sp, #24
   1dc14:	str	r2, [r1]
   1dc18:	mov	r4, r1
   1dc1c:	mov	r7, r0
   1dc20:	mov	r0, #0
   1dc24:	mov	r9, r2
   1dc28:	ldr	r1, [r1, #8]
   1dc2c:	str	r1, [r4, #16]
   1dc30:	str	r0, [r4, #20]
   1dc34:	lsl	r0, r1, #2
   1dc38:	bl	23be4 <__assert_fail@plt+0x12470>
   1dc3c:	mov	r8, #12
   1dc40:	cmp	r0, #0
   1dc44:	str	r0, [r4, #24]
   1dc48:	beq	1dcdc <__assert_fail@plt+0xc568>
   1dc4c:	ldr	r0, [r4, #8]
   1dc50:	cmp	r0, #1
   1dc54:	blt	1dc9c <__assert_fail@plt+0xc528>
   1dc58:	add	r5, r4, #16
   1dc5c:	mov	r6, #0
   1dc60:	ldr	r1, [r4, #12]
   1dc64:	ldr	r2, [r7]
   1dc68:	ldr	r1, [r1, r6, lsl #2]
   1dc6c:	add	r2, r2, r1, lsl #3
   1dc70:	ldrb	r2, [r2, #4]
   1dc74:	tst	r2, #8
   1dc78:	bne	1dc90 <__assert_fail@plt+0xc51c>
   1dc7c:	mov	r0, r5
   1dc80:	bl	1d788 <__assert_fail@plt+0xc014>
   1dc84:	cmp	r0, #0
   1dc88:	beq	1dcdc <__assert_fail@plt+0xc568>
   1dc8c:	ldr	r0, [r4, #8]
   1dc90:	add	r6, r6, #1
   1dc94:	cmp	r6, r0
   1dc98:	blt	1dc60 <__assert_fail@plt+0xc4ec>
   1dc9c:	ldr	r1, [r7, #68]	; 0x44
   1dca0:	ldr	r0, [r7, #32]
   1dca4:	and	r1, r1, r9
   1dca8:	mov	r5, r0
   1dcac:	add	r2, r1, r1, lsl #1
   1dcb0:	ldr	r1, [r5, r2, lsl #2]!
   1dcb4:	mov	r6, r5
   1dcb8:	ldr	r3, [r6, #4]!
   1dcbc:	cmp	r3, r1
   1dcc0:	ble	1dce4 <__assert_fail@plt+0xc570>
   1dcc4:	add	r0, r0, r2, lsl #2
   1dcc8:	ldr	r0, [r0, #8]
   1dccc:	add	r2, r1, #1
   1dcd0:	mov	r8, #0
   1dcd4:	str	r2, [r5]
   1dcd8:	str	r4, [r0, r1, lsl #2]
   1dcdc:	mov	r0, r8
   1dce0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dce4:	add	r7, r0, r2, lsl #2
   1dce8:	mov	r2, #2
   1dcec:	ldr	r0, [r7, #8]!
   1dcf0:	add	r9, r2, r1, lsl #1
   1dcf4:	lsl	r1, r9, #2
   1dcf8:	bl	23c14 <__assert_fail@plt+0x124a0>
   1dcfc:	cmp	r0, #0
   1dd00:	beq	1dcdc <__assert_fail@plt+0xc568>
   1dd04:	str	r0, [r7]
   1dd08:	str	r9, [r6]
   1dd0c:	ldr	r1, [r5]
   1dd10:	b	1dccc <__assert_fail@plt+0xc558>
   1dd14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd18:	add	fp, sp, #28
   1dd1c:	sub	sp, sp, #36	; 0x24
   1dd20:	mov	r4, r0
   1dd24:	ldr	r0, [r0, #24]
   1dd28:	mov	r6, r2
   1dd2c:	mov	r9, r1
   1dd30:	cmp	r0, r1
   1dd34:	ble	1de98 <__assert_fail@plt+0xc724>
   1dd38:	ldr	r0, [r4, #80]	; 0x50
   1dd3c:	mov	r1, #4
   1dd40:	mov	r5, r9
   1dd44:	cmp	r0, #2
   1dd48:	movge	r0, #0
   1dd4c:	strge	r0, [r4, #16]
   1dd50:	strge	r0, [r4, #20]
   1dd54:	mov	r0, #0
   1dd58:	tst	r6, #1
   1dd5c:	str	r0, [r4, #24]
   1dd60:	str	r0, [r4, #28]
   1dd64:	str	r0, [r4, #32]
   1dd68:	strb	r0, [r4, #76]	; 0x4c
   1dd6c:	movweq	r1, #6
   1dd70:	ldr	r2, [r4, #44]	; 0x2c
   1dd74:	ldr	r3, [r4, #52]	; 0x34
   1dd78:	str	r2, [r4, #48]	; 0x30
   1dd7c:	str	r3, [r4, #56]	; 0x38
   1dd80:	str	r1, [r4, #60]	; 0x3c
   1dd84:	ldrb	r1, [r4, #75]	; 0x4b
   1dd88:	cmp	r1, #0
   1dd8c:	ldreq	r1, [r4]
   1dd90:	streq	r1, [r4, #4]
   1dd94:	cmp	r5, #0
   1dd98:	beq	1de24 <__assert_fail@plt+0xc6b0>
   1dd9c:	ldr	r1, [r4, #32]
   1dda0:	cmp	r5, r1
   1dda4:	bge	1dea0 <__assert_fail@plt+0xc72c>
   1dda8:	ldrb	r0, [r4, #76]	; 0x4c
   1ddac:	cmp	r0, #0
   1ddb0:	bne	1dfa0 <__assert_fail@plt+0xc82c>
   1ddb4:	sub	r1, r5, #1
   1ddb8:	mov	r0, r4
   1ddbc:	mov	r2, r6
   1ddc0:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1ddc4:	str	r0, [r4, #60]	; 0x3c
   1ddc8:	ldr	r0, [r4, #80]	; 0x50
   1ddcc:	cmp	r0, #2
   1ddd0:	blt	1ddec <__assert_fail@plt+0xc678>
   1ddd4:	ldr	r2, [r4, #28]
   1ddd8:	ldr	r0, [r4, #8]
   1dddc:	sub	r2, r2, r5
   1dde0:	add	r1, r0, r5, lsl #2
   1dde4:	lsl	r2, r2, #2
   1dde8:	bl	1145c <memmove@plt>
   1ddec:	ldrb	r0, [r4, #75]	; 0x4b
   1ddf0:	cmp	r0, #0
   1ddf4:	bne	1e094 <__assert_fail@plt+0xc920>
   1ddf8:	ldr	r0, [r4, #28]
   1ddfc:	ldr	r1, [r4, #32]
   1de00:	sub	r0, r0, r5
   1de04:	sub	r1, r1, r5
   1de08:	str	r0, [r4, #28]
   1de0c:	str	r1, [r4, #32]
   1de10:	ldrb	r0, [r4, #75]	; 0x4b
   1de14:	cmp	r0, #0
   1de18:	ldreq	r0, [r4, #4]
   1de1c:	addeq	r0, r0, r5
   1de20:	streq	r0, [r4, #4]
   1de24:	str	r9, [r4, #24]
   1de28:	ldr	r0, [r4, #48]	; 0x30
   1de2c:	ldr	r1, [r4, #56]	; 0x38
   1de30:	ldr	r2, [r4, #80]	; 0x50
   1de34:	sub	r0, r0, r5
   1de38:	cmp	r2, #2
   1de3c:	sub	r1, r1, r5
   1de40:	str	r0, [r4, #48]	; 0x30
   1de44:	str	r1, [r4, #56]	; 0x38
   1de48:	blt	1de6c <__assert_fail@plt+0xc6f8>
   1de4c:	ldrb	r0, [r4, #72]	; 0x48
   1de50:	cmp	r0, #0
   1de54:	beq	1de80 <__assert_fail@plt+0xc70c>
   1de58:	mov	r0, r4
   1de5c:	bl	18ef8 <__assert_fail@plt+0x7784>
   1de60:	cmp	r0, #0
   1de64:	bne	1de90 <__assert_fail@plt+0xc71c>
   1de68:	b	1de88 <__assert_fail@plt+0xc714>
   1de6c:	ldrb	r1, [r4, #75]	; 0x4b
   1de70:	cmp	r1, #0
   1de74:	bne	1e0ac <__assert_fail@plt+0xc938>
   1de78:	str	r0, [r4, #28]
   1de7c:	b	1de88 <__assert_fail@plt+0xc714>
   1de80:	mov	r0, r4
   1de84:	bl	194d4 <__assert_fail@plt+0x7d60>
   1de88:	mov	r0, #0
   1de8c:	str	r0, [r4, #40]	; 0x28
   1de90:	sub	sp, fp, #28
   1de94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de98:	sub	r5, r9, r0
   1de9c:	b	1dd94 <__assert_fail@plt+0xc620>
   1dea0:	ldrb	r2, [r4, #76]	; 0x4c
   1dea4:	ldr	lr, [r4, #28]
   1dea8:	cmp	r2, #0
   1deac:	bne	1e2ec <__assert_fail@plt+0xcb78>
   1deb0:	mov	r2, #0
   1deb4:	str	r2, [r4, #28]
   1deb8:	ldr	r3, [r4, #80]	; 0x50
   1debc:	cmp	r3, #2
   1dec0:	blt	1e0c4 <__assert_fail@plt+0xc950>
   1dec4:	ldrb	r2, [r4, #73]	; 0x49
   1dec8:	cmp	r2, #0
   1decc:	beq	1df88 <__assert_fail@plt+0xc814>
   1ded0:	ldr	r7, [r4]
   1ded4:	sub	r3, r5, r3
   1ded8:	add	ip, r7, r0
   1dedc:	add	r3, ip, r3
   1dee0:	add	r8, ip, r5
   1dee4:	cmp	r3, r7
   1dee8:	movcc	r3, r7
   1deec:	mov	r7, r8
   1def0:	sub	r7, r7, #1
   1def4:	cmp	r7, r3
   1def8:	bcc	1df88 <__assert_fail@plt+0xc814>
   1defc:	ldrb	r2, [r7]
   1df00:	and	r2, r2, #192	; 0xc0
   1df04:	cmp	r2, #128	; 0x80
   1df08:	beq	1def0 <__assert_fail@plt+0xc77c>
   1df0c:	ldr	r0, [r4, #48]	; 0x30
   1df10:	mov	sl, lr
   1df14:	mov	r1, r7
   1df18:	add	r3, ip, r0
   1df1c:	ldr	r0, [r4, #64]	; 0x40
   1df20:	sub	r2, r3, r7
   1df24:	cmp	r0, #0
   1df28:	bne	1e388 <__assert_fail@plt+0xcc14>
   1df2c:	mov	r0, #0
   1df30:	add	r3, sp, #24
   1df34:	str	r0, [sp, #28]
   1df38:	str	r0, [sp, #24]
   1df3c:	add	r0, sp, #20
   1df40:	bl	23fb0 <__assert_fail@plt+0x1283c>
   1df44:	sub	r1, r8, r7
   1df48:	mvn	r2, #0
   1df4c:	cmp	r0, r1
   1df50:	bcc	1df74 <__assert_fail@plt+0xc800>
   1df54:	cmn	r0, #3
   1df58:	bhi	1df74 <__assert_fail@plt+0xc800>
   1df5c:	mov	r2, #0
   1df60:	sub	r0, r0, r1
   1df64:	str	r2, [r4, #16]
   1df68:	str	r2, [r4, #20]
   1df6c:	str	r0, [r4, #28]
   1df70:	ldr	r2, [sp, #20]
   1df74:	cmn	r2, #1
   1df78:	bne	1e294 <__assert_fail@plt+0xcb20>
   1df7c:	ldr	r0, [r4, #24]
   1df80:	ldr	r1, [r4, #32]
   1df84:	mov	lr, sl
   1df88:	add	r8, r1, r0
   1df8c:	cmp	r8, r9
   1df90:	bge	1e16c <__assert_fail@plt+0xc9f8>
   1df94:	add	sl, r4, #16
   1df98:	str	lr, [sp]
   1df9c:	b	1e234 <__assert_fail@plt+0xcac0>
   1dfa0:	ldr	r8, [r4, #28]
   1dfa4:	ldr	sl, [r4, #12]
   1dfa8:	mov	r0, #0
   1dfac:	mov	r1, r8
   1dfb0:	add	r2, r0, r1
   1dfb4:	add	r2, r2, r2, lsr #31
   1dfb8:	asr	r7, r2, #1
   1dfbc:	ldr	r2, [sl, r7, lsl #2]
   1dfc0:	mov	r3, r7
   1dfc4:	cmp	r2, r5
   1dfc8:	bgt	1dfd8 <__assert_fail@plt+0xc864>
   1dfcc:	bge	1dfe4 <__assert_fail@plt+0xc870>
   1dfd0:	add	r0, r7, #1
   1dfd4:	mov	r3, r1
   1dfd8:	cmp	r0, r3
   1dfdc:	mov	r1, r3
   1dfe0:	blt	1dfb0 <__assert_fail@plt+0xc83c>
   1dfe4:	cmp	r2, r5
   1dfe8:	mov	r0, r4
   1dfec:	mov	r2, r6
   1dff0:	addlt	r7, r7, #1
   1dff4:	sub	r1, r7, #1
   1dff8:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1dffc:	cmp	r8, r5
   1e000:	str	r0, [r4, #60]	; 0x3c
   1e004:	ble	1e018 <__assert_fail@plt+0xc8a4>
   1e008:	cmp	r7, r5
   1e00c:	ldreq	r0, [sl, r5, lsl #2]
   1e010:	cmpeq	r0, r5
   1e014:	beq	1e190 <__assert_fail@plt+0xca1c>
   1e018:	mov	r0, #0
   1e01c:	strb	r0, [r4, #76]	; 0x4c
   1e020:	sub	r0, r5, r9
   1e024:	ldr	r1, [r4, #44]	; 0x2c
   1e028:	ldr	r2, [r4, #52]	; 0x34
   1e02c:	add	r1, r0, r1
   1e030:	add	r0, r0, r2
   1e034:	str	r1, [r4, #48]	; 0x30
   1e038:	sub	r1, sl, #4
   1e03c:	str	r0, [r4, #56]	; 0x38
   1e040:	mov	r0, r7
   1e044:	cmp	r7, #1
   1e048:	blt	1e05c <__assert_fail@plt+0xc8e8>
   1e04c:	ldr	r2, [r1, r0, lsl #2]
   1e050:	sub	r7, r0, #1
   1e054:	cmp	r2, r5
   1e058:	beq	1e040 <__assert_fail@plt+0xc8cc>
   1e05c:	cmp	r0, r8
   1e060:	bge	1e080 <__assert_fail@plt+0xc90c>
   1e064:	ldr	r1, [r4, #8]
   1e068:	ldr	r2, [r1, r0, lsl #2]
   1e06c:	cmn	r2, #1
   1e070:	bne	1e080 <__assert_fail@plt+0xc90c>
   1e074:	add	r0, r0, #1
   1e078:	cmp	r0, r8
   1e07c:	blt	1e068 <__assert_fail@plt+0xc8f4>
   1e080:	cmp	r0, r8
   1e084:	bne	1e120 <__assert_fail@plt+0xc9ac>
   1e088:	mov	r0, #0
   1e08c:	str	r0, [r4, #28]
   1e090:	b	1e2e4 <__assert_fail@plt+0xcb70>
   1e094:	ldr	r2, [r4, #28]
   1e098:	ldr	r0, [r4, #4]
   1e09c:	add	r1, r0, r5
   1e0a0:	sub	r2, r2, r5
   1e0a4:	bl	1145c <memmove@plt>
   1e0a8:	b	1ddf8 <__assert_fail@plt+0xc684>
   1e0ac:	ldrb	r0, [r4, #72]	; 0x48
   1e0b0:	cmp	r0, #0
   1e0b4:	beq	1e178 <__assert_fail@plt+0xca04>
   1e0b8:	mov	r0, r4
   1e0bc:	bl	19468 <__assert_fail@plt+0x7cf4>
   1e0c0:	b	1de88 <__assert_fail@plt+0xc714>
   1e0c4:	ldr	r3, [r4]
   1e0c8:	add	r0, r5, r0
   1e0cc:	ldr	r1, [r4, #64]	; 0x40
   1e0d0:	add	r0, r3, r0
   1e0d4:	cmp	r1, #0
   1e0d8:	ldrb	r0, [r0, #-1]
   1e0dc:	str	r2, [r4, #32]
   1e0e0:	ldrbne	r0, [r1, r0]
   1e0e4:	ldr	r1, [r4, #68]	; 0x44
   1e0e8:	ubfx	r2, r0, #5, #3
   1e0ec:	and	r3, r0, #31
   1e0f0:	ldr	r2, [r1, r2, lsl #2]
   1e0f4:	mov	r1, #1
   1e0f8:	tst	r2, r1, lsl r3
   1e0fc:	bne	1e118 <__assert_fail@plt+0xc9a4>
   1e100:	mov	r1, #0
   1e104:	cmp	r0, #10
   1e108:	bne	1e118 <__assert_fail@plt+0xc9a4>
   1e10c:	ldrb	r1, [r4, #77]	; 0x4d
   1e110:	cmp	r1, #0
   1e114:	movwne	r1, #2
   1e118:	str	r1, [r4, #60]	; 0x3c
   1e11c:	b	1de10 <__assert_fail@plt+0xc69c>
   1e120:	ldr	r0, [sl, r0, lsl #2]
   1e124:	subs	r2, r0, r5
   1e128:	str	r2, [r4, #28]
   1e12c:	beq	1e204 <__assert_fail@plt+0xca90>
   1e130:	cmp	r2, #1
   1e134:	blt	1e158 <__assert_fail@plt+0xc9e4>
   1e138:	ldr	r0, [r4, #8]
   1e13c:	mov	r1, #0
   1e140:	mvn	r3, #0
   1e144:	str	r3, [r0, r1, lsl #2]
   1e148:	add	r1, r1, #1
   1e14c:	ldr	r2, [r4, #28]
   1e150:	cmp	r1, r2
   1e154:	blt	1e144 <__assert_fail@plt+0xc9d0>
   1e158:	ldr	r0, [r4, #4]
   1e15c:	mov	r1, #255	; 0xff
   1e160:	bl	11660 <memset@plt>
   1e164:	ldr	r0, [r4, #28]
   1e168:	b	1e2e4 <__assert_fail@plt+0xcb70>
   1e16c:	sub	r7, r8, r9
   1e170:	str	r7, [r4, #28]
   1e174:	b	1e2c4 <__assert_fail@plt+0xcb50>
   1e178:	ldr	r0, [r4, #64]	; 0x40
   1e17c:	cmp	r0, #0
   1e180:	beq	1de88 <__assert_fail@plt+0xc714>
   1e184:	mov	r0, r4
   1e188:	bl	196b0 <__assert_fail@plt+0x7f3c>
   1e18c:	b	1de88 <__assert_fail@plt+0xc714>
   1e190:	ldr	r0, [r4, #8]
   1e194:	sub	r2, r8, r5
   1e198:	lsl	r2, r2, #2
   1e19c:	add	r1, r0, r5, lsl #2
   1e1a0:	bl	1145c <memmove@plt>
   1e1a4:	ldr	r2, [r4, #28]
   1e1a8:	ldr	r0, [r4, #4]
   1e1ac:	add	r1, r0, r5
   1e1b0:	sub	r2, r2, r5
   1e1b4:	bl	1145c <memmove@plt>
   1e1b8:	ldr	r0, [r4, #28]
   1e1bc:	ldr	r1, [r4, #32]
   1e1c0:	sub	r0, r0, r5
   1e1c4:	sub	r1, r1, r5
   1e1c8:	cmp	r0, #1
   1e1cc:	str	r0, [r4, #28]
   1e1d0:	str	r1, [r4, #32]
   1e1d4:	blt	1de10 <__assert_fail@plt+0xc69c>
   1e1d8:	ldr	r0, [r4, #12]
   1e1dc:	mov	r2, #0
   1e1e0:	add	r1, r0, r5, lsl #2
   1e1e4:	ldr	r3, [r1, r2, lsl #2]
   1e1e8:	sub	r3, r3, r5
   1e1ec:	str	r3, [r0, r2, lsl #2]
   1e1f0:	add	r2, r2, #1
   1e1f4:	ldr	r3, [r4, #28]
   1e1f8:	cmp	r2, r3
   1e1fc:	blt	1e1e4 <__assert_fail@plt+0xca70>
   1e200:	b	1de10 <__assert_fail@plt+0xc69c>
   1e204:	mov	r0, #0
   1e208:	b	1e2e4 <__assert_fail@plt+0xcb70>
   1e20c:	cmp	r7, #0
   1e210:	ldr	r3, [sp, #4]
   1e214:	ldr	r1, [sp, #8]
   1e218:	mov	r2, #0
   1e21c:	cmpne	r0, #0
   1e220:	ldrne	r0, [r4]
   1e224:	ldrbne	r2, [r0, r8]
   1e228:	stm	sl, {r1, r3}
   1e22c:	mov	r0, #1
   1e230:	b	1e274 <__assert_fail@plt+0xcb00>
   1e234:	ldr	r0, [r4]
   1e238:	ldr	r2, [r4, #44]	; 0x2c
   1e23c:	mov	r3, sl
   1e240:	add	r1, r0, r8
   1e244:	ldr	r0, [sl]
   1e248:	sub	r7, r2, r8
   1e24c:	mov	r2, r7
   1e250:	str	r0, [sp, #8]
   1e254:	ldr	r0, [sl, #4]
   1e258:	str	r0, [sp, #4]
   1e25c:	add	r0, sp, #24
   1e260:	bl	23fb0 <__assert_fail@plt+0x1283c>
   1e264:	sub	r1, r0, #1
   1e268:	cmn	r1, #3
   1e26c:	bcs	1e20c <__assert_fail@plt+0xca98>
   1e270:	ldr	r2, [sp, #24]
   1e274:	add	r8, r0, r8
   1e278:	cmp	r8, r9
   1e27c:	blt	1e234 <__assert_fail@plt+0xcac0>
   1e280:	ldr	lr, [sp]
   1e284:	sub	r7, r8, r9
   1e288:	cmn	r2, #1
   1e28c:	str	r7, [r4, #28]
   1e290:	beq	1e2c4 <__assert_fail@plt+0xcb50>
   1e294:	ldrb	r0, [r4, #78]	; 0x4e
   1e298:	cmp	r0, #0
   1e29c:	bne	1e358 <__assert_fail@plt+0xcbe4>
   1e2a0:	mov	r1, #0
   1e2a4:	cmp	r2, #10
   1e2a8:	bne	1e2b8 <__assert_fail@plt+0xcb44>
   1e2ac:	ldrb	r1, [r4, #77]	; 0x4d
   1e2b0:	cmp	r1, #0
   1e2b4:	movwne	r1, #2
   1e2b8:	str	r1, [r4, #60]	; 0x3c
   1e2bc:	ldr	r7, [r4, #28]
   1e2c0:	b	1e2d8 <__assert_fail@plt+0xcb64>
   1e2c4:	sub	r1, lr, #1
   1e2c8:	mov	r0, r4
   1e2cc:	mov	r2, r6
   1e2d0:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1e2d4:	str	r0, [r4, #60]	; 0x3c
   1e2d8:	mov	r0, #0
   1e2dc:	cmp	r7, #0
   1e2e0:	bne	1e314 <__assert_fail@plt+0xcba0>
   1e2e4:	str	r0, [r4, #32]
   1e2e8:	b	1de10 <__assert_fail@plt+0xc69c>
   1e2ec:	mov	r2, #0
   1e2f0:	strb	r2, [r4, #76]	; 0x4c
   1e2f4:	sub	r2, r5, r9
   1e2f8:	ldr	r3, [r4, #44]	; 0x2c
   1e2fc:	ldr	r7, [r4, #52]	; 0x34
   1e300:	add	r3, r2, r3
   1e304:	add	r2, r2, r7
   1e308:	str	r3, [r4, #48]	; 0x30
   1e30c:	str	r2, [r4, #56]	; 0x38
   1e310:	b	1deb0 <__assert_fail@plt+0xc73c>
   1e314:	cmp	r7, #1
   1e318:	blt	1e33c <__assert_fail@plt+0xcbc8>
   1e31c:	ldr	r0, [r4, #8]
   1e320:	mov	r1, #0
   1e324:	mvn	r2, #0
   1e328:	str	r2, [r0, r1, lsl #2]
   1e32c:	add	r1, r1, #1
   1e330:	ldr	r7, [r4, #28]
   1e334:	cmp	r1, r7
   1e338:	blt	1e328 <__assert_fail@plt+0xcbb4>
   1e33c:	ldrb	r0, [r4, #75]	; 0x4b
   1e340:	cmp	r0, #0
   1e344:	beq	1e380 <__assert_fail@plt+0xcc0c>
   1e348:	ldr	r0, [r4, #4]
   1e34c:	mov	r1, #255	; 0xff
   1e350:	mov	r2, r7
   1e354:	b	1e160 <__assert_fail@plt+0xc9ec>
   1e358:	mov	r0, r2
   1e35c:	mov	r6, r2
   1e360:	bl	1163c <iswalnum@plt>
   1e364:	mov	r1, #1
   1e368:	cmp	r6, #95	; 0x5f
   1e36c:	beq	1e2b8 <__assert_fail@plt+0xcb44>
   1e370:	mov	r2, r6
   1e374:	cmp	r0, #0
   1e378:	beq	1e2a0 <__assert_fail@plt+0xcb2c>
   1e37c:	b	1e2b8 <__assert_fail@plt+0xcb44>
   1e380:	mov	r0, r7
   1e384:	b	1e2e4 <__assert_fail@plt+0xcb70>
   1e388:	cmp	r2, #1
   1e38c:	blt	1e3d0 <__assert_fail@plt+0xcc5c>
   1e390:	sub	r1, r7, #1
   1e394:	sub	r1, r1, r3
   1e398:	mvn	r3, #1
   1e39c:	cmn	r1, #7
   1e3a0:	mvnle	r1, #6
   1e3a4:	sub	ip, r3, r1
   1e3a8:	add	r1, sp, #14
   1e3ac:	ldrb	r3, [r7, ip]
   1e3b0:	sub	lr, ip, #1
   1e3b4:	ldrb	r3, [r0, r3]
   1e3b8:	strb	r3, [r1, ip]
   1e3bc:	add	r3, ip, #1
   1e3c0:	mov	ip, lr
   1e3c4:	cmp	r3, #1
   1e3c8:	bgt	1e3ac <__assert_fail@plt+0xcc38>
   1e3cc:	b	1df2c <__assert_fail@plt+0xc7b8>
   1e3d0:	add	r1, sp, #14
   1e3d4:	b	1df2c <__assert_fail@plt+0xc7b8>
   1e3d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e3dc:	add	fp, sp, #24
   1e3e0:	mov	r3, r2
   1e3e4:	ldr	r2, [r0, #88]	; 0x58
   1e3e8:	mov	r5, r1
   1e3ec:	mov	r4, r0
   1e3f0:	mov	r1, r3
   1e3f4:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1e3f8:	ldr	r1, [r5, #8]
   1e3fc:	cmp	r1, #1
   1e400:	blt	1e490 <__assert_fail@plt+0xcd1c>
   1e404:	and	ip, r0, #8
   1e408:	and	lr, r0, #2
   1e40c:	and	r2, r0, #1
   1e410:	ldr	r0, [r4, #84]	; 0x54
   1e414:	ldr	r5, [r5, #12]
   1e418:	movw	r8, #65280	; 0xff00
   1e41c:	mov	r3, #0
   1e420:	movt	r8, #3
   1e424:	ldr	r4, [r0]
   1e428:	ldr	r0, [r5, r3, lsl #2]
   1e42c:	add	r7, r4, r0, lsl #3
   1e430:	ldr	r7, [r7, #4]
   1e434:	uxtb	r6, r7
   1e438:	cmp	r6, #2
   1e43c:	bne	1e484 <__assert_fail@plt+0xcd10>
   1e440:	tst	r7, r8
   1e444:	beq	1e494 <__assert_fail@plt+0xcd20>
   1e448:	cmp	r2, #0
   1e44c:	bne	1e458 <__assert_fail@plt+0xcce4>
   1e450:	ands	r6, r7, #1024	; 0x400
   1e454:	bne	1e484 <__assert_fail@plt+0xcd10>
   1e458:	cmp	r2, #0
   1e45c:	andsne	r6, r7, #2048	; 0x800
   1e460:	bne	1e484 <__assert_fail@plt+0xcd10>
   1e464:	cmp	lr, #0
   1e468:	bne	1e474 <__assert_fail@plt+0xcd00>
   1e46c:	ands	r6, r7, #8192	; 0x2000
   1e470:	bne	1e484 <__assert_fail@plt+0xcd10>
   1e474:	cmp	ip, #0
   1e478:	bne	1e494 <__assert_fail@plt+0xcd20>
   1e47c:	ands	r6, r7, #32768	; 0x8000
   1e480:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e484:	add	r3, r3, #1
   1e488:	cmp	r3, r1
   1e48c:	blt	1e428 <__assert_fail@plt+0xccb4>
   1e490:	mov	r0, #0
   1e494:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e498:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e49c:	add	fp, sp, #24
   1e4a0:	mov	r8, r0
   1e4a4:	ldr	r0, [r0, #124]	; 0x7c
   1e4a8:	cmp	r0, #1
   1e4ac:	blt	1e530 <__assert_fail@plt+0xcdbc>
   1e4b0:	mov	r7, #0
   1e4b4:	ldr	r0, [r8, #132]	; 0x84
   1e4b8:	ldr	r5, [r0, r7, lsl #2]
   1e4bc:	ldr	r0, [r5, #16]
   1e4c0:	cmp	r0, #1
   1e4c4:	blt	1e4f4 <__assert_fail@plt+0xcd80>
   1e4c8:	mov	r4, #0
   1e4cc:	ldr	r0, [r5, #20]
   1e4d0:	ldr	r6, [r0, r4, lsl #2]
   1e4d4:	ldr	r0, [r6, #16]
   1e4d8:	bl	13c04 <__assert_fail@plt+0x2490>
   1e4dc:	mov	r0, r6
   1e4e0:	bl	13c04 <__assert_fail@plt+0x2490>
   1e4e4:	ldr	r0, [r5, #16]
   1e4e8:	add	r4, r4, #1
   1e4ec:	cmp	r4, r0
   1e4f0:	blt	1e4cc <__assert_fail@plt+0xcd58>
   1e4f4:	ldr	r0, [r5, #20]
   1e4f8:	bl	13c04 <__assert_fail@plt+0x2490>
   1e4fc:	ldr	r0, [r5, #8]
   1e500:	cmp	r0, #0
   1e504:	beq	1e518 <__assert_fail@plt+0xcda4>
   1e508:	ldr	r0, [r0, #8]
   1e50c:	bl	13c04 <__assert_fail@plt+0x2490>
   1e510:	ldr	r0, [r5, #8]
   1e514:	bl	13c04 <__assert_fail@plt+0x2490>
   1e518:	mov	r0, r5
   1e51c:	bl	13c04 <__assert_fail@plt+0x2490>
   1e520:	ldr	r0, [r8, #124]	; 0x7c
   1e524:	add	r7, r7, #1
   1e528:	cmp	r7, r0
   1e52c:	blt	1e4b4 <__assert_fail@plt+0xcd40>
   1e530:	mov	r0, #0
   1e534:	str	r0, [r8, #108]	; 0x6c
   1e538:	str	r0, [r8, #124]	; 0x7c
   1e53c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e540:	push	{r4, r5, fp, lr}
   1e544:	add	fp, sp, #8
   1e548:	mov	r4, r0
   1e54c:	cmn	r1, #1
   1e550:	ble	1e58c <__assert_fail@plt+0xce18>
   1e554:	ldr	r0, [r4, #48]	; 0x30
   1e558:	cmp	r0, r1
   1e55c:	beq	1e5f0 <__assert_fail@plt+0xce7c>
   1e560:	ldr	r0, [r4, #80]	; 0x50
   1e564:	cmp	r0, #2
   1e568:	blt	1e594 <__assert_fail@plt+0xce20>
   1e56c:	ldr	r0, [r4, #8]
   1e570:	ldr	r5, [r0, r1, lsl #2]
   1e574:	cmn	r5, #1
   1e578:	bne	1e5c8 <__assert_fail@plt+0xce54>
   1e57c:	sub	r2, r1, #1
   1e580:	cmp	r1, #0
   1e584:	mov	r1, r2
   1e588:	bgt	1e570 <__assert_fail@plt+0xcdfc>
   1e58c:	ldr	r0, [r4, #60]	; 0x3c
   1e590:	pop	{r4, r5, fp, pc}
   1e594:	ldr	r0, [r4, #4]
   1e598:	ldr	r2, [r4, #68]	; 0x44
   1e59c:	ldrb	r1, [r0, r1]
   1e5a0:	ubfx	r0, r1, #5, #3
   1e5a4:	and	r3, r1, #31
   1e5a8:	ldr	r2, [r2, r0, lsl #2]
   1e5ac:	mov	r0, #1
   1e5b0:	tst	r2, r0, lsl r3
   1e5b4:	bne	1e5ec <__assert_fail@plt+0xce78>
   1e5b8:	mov	r0, #0
   1e5bc:	cmp	r1, #10
   1e5c0:	popne	{r4, r5, fp, pc}
   1e5c4:	b	1e5e0 <__assert_fail@plt+0xce6c>
   1e5c8:	ldrb	r0, [r4, #78]	; 0x4e
   1e5cc:	cmp	r0, #0
   1e5d0:	bne	1e5fc <__assert_fail@plt+0xce88>
   1e5d4:	mov	r0, #0
   1e5d8:	cmp	r5, #10
   1e5dc:	bne	1e5ec <__assert_fail@plt+0xce78>
   1e5e0:	ldrb	r0, [r4, #77]	; 0x4d
   1e5e4:	cmp	r0, #0
   1e5e8:	movwne	r0, #2
   1e5ec:	pop	{r4, r5, fp, pc}
   1e5f0:	and	r0, r2, #2
   1e5f4:	eor	r0, r0, #10
   1e5f8:	pop	{r4, r5, fp, pc}
   1e5fc:	mov	r0, r5
   1e600:	bl	1163c <iswalnum@plt>
   1e604:	mov	r1, r0
   1e608:	mov	r0, #1
   1e60c:	cmp	r5, #95	; 0x5f
   1e610:	beq	1e5ec <__assert_fail@plt+0xce78>
   1e614:	cmp	r1, #0
   1e618:	beq	1e5d4 <__assert_fail@plt+0xce60>
   1e61c:	b	1e5ec <__assert_fail@plt+0xce78>
   1e620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e624:	add	fp, sp, #28
   1e628:	sub	sp, sp, #4
   1e62c:	mov	sl, r0
   1e630:	ldr	r0, [r1, #4]
   1e634:	cmp	r0, #1
   1e638:	blt	1e704 <__assert_fail@plt+0xcf90>
   1e63c:	ldr	r7, [sl, #84]	; 0x54
   1e640:	mov	r8, r2
   1e644:	mov	r5, r1
   1e648:	mov	r4, #0
   1e64c:	b	1e674 <__assert_fail@plt+0xcf00>
   1e650:	ldr	r0, [sl, #132]	; 0x84
   1e654:	lsl	r1, r9, #3
   1e658:	bl	23c14 <__assert_fail@plt+0x124a0>
   1e65c:	cmp	r0, #0
   1e660:	beq	1e710 <__assert_fail@plt+0xcf9c>
   1e664:	lsl	r1, r9, #1
   1e668:	str	r1, [sl, #128]	; 0x80
   1e66c:	str	r0, [sl, #132]	; 0x84
   1e670:	b	1e6bc <__assert_fail@plt+0xcf48>
   1e674:	ldr	r1, [r5, #8]
   1e678:	ldr	r6, [r1, r4, lsl #2]
   1e67c:	ldr	r1, [r7]
   1e680:	add	r2, r1, r6, lsl #3
   1e684:	ldrb	r2, [r2, #4]
   1e688:	cmp	r2, #8
   1e68c:	bne	1e6f8 <__assert_fail@plt+0xcf84>
   1e690:	ldr	r1, [r1, r6, lsl #3]
   1e694:	cmp	r1, #31
   1e698:	bgt	1e6f8 <__assert_fail@plt+0xcf84>
   1e69c:	ldr	r2, [r7, #80]	; 0x50
   1e6a0:	mov	r3, #1
   1e6a4:	tst	r2, r3, lsl r1
   1e6a8:	beq	1e6f8 <__assert_fail@plt+0xcf84>
   1e6ac:	ldr	r9, [sl, #124]	; 0x7c
   1e6b0:	ldr	r0, [sl, #128]	; 0x80
   1e6b4:	cmp	r9, r0
   1e6b8:	beq	1e650 <__assert_fail@plt+0xcedc>
   1e6bc:	mov	r0, #1
   1e6c0:	mov	r1, #24
   1e6c4:	bl	23b90 <__assert_fail@plt+0x1241c>
   1e6c8:	ldr	r1, [sl, #124]	; 0x7c
   1e6cc:	ldr	r2, [sl, #132]	; 0x84
   1e6d0:	str	r0, [r2, r1, lsl #2]
   1e6d4:	ldr	r0, [sl, #132]	; 0x84
   1e6d8:	ldr	r0, [r0, r1, lsl #2]
   1e6dc:	cmp	r0, #0
   1e6e0:	beq	1e710 <__assert_fail@plt+0xcf9c>
   1e6e4:	add	r1, r1, #1
   1e6e8:	str	r6, [r0, #4]
   1e6ec:	str	r1, [sl, #124]	; 0x7c
   1e6f0:	str	r8, [r0]
   1e6f4:	ldr	r0, [r5, #4]
   1e6f8:	add	r4, r4, #1
   1e6fc:	cmp	r4, r0
   1e700:	blt	1e674 <__assert_fail@plt+0xcf00>
   1e704:	mov	r0, #0
   1e708:	sub	sp, fp, #28
   1e70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e710:	mov	r0, #12
   1e714:	b	1e708 <__assert_fail@plt+0xcf94>
   1e718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e71c:	add	fp, sp, #28
   1e720:	sub	sp, sp, #76	; 0x4c
   1e724:	mov	lr, r0
   1e728:	ldr	r0, [r1, #4]
   1e72c:	cmp	r0, #1
   1e730:	blt	1ee10 <__assert_fail@plt+0xd69c>
   1e734:	ldr	r2, [lr, #84]	; 0x54
   1e738:	ldr	r0, [lr, #40]	; 0x28
   1e73c:	mov	r3, #0
   1e740:	str	lr, [sp, #48]	; 0x30
   1e744:	str	r1, [sp, #16]
   1e748:	str	r0, [fp, #-48]	; 0xffffffd0
   1e74c:	str	r2, [sp, #32]
   1e750:	ldr	r0, [r1, #8]
   1e754:	str	r3, [sp, #36]	; 0x24
   1e758:	ldr	r3, [r0, r3, lsl #2]
   1e75c:	ldr	r0, [r2]
   1e760:	add	r0, r0, r3, lsl #3
   1e764:	mov	r1, r3
   1e768:	str	r3, [sp, #52]	; 0x34
   1e76c:	ldr	r4, [r0, #4]
   1e770:	uxtb	r0, r4
   1e774:	cmp	r0, #4
   1e778:	bne	1edf4 <__assert_fail@plt+0xd680>
   1e77c:	movw	r0, #65280	; 0xff00
   1e780:	movt	r0, #3
   1e784:	tst	r4, r0
   1e788:	beq	1e7e4 <__assert_fail@plt+0xd070>
   1e78c:	ldr	r2, [lr, #88]	; 0x58
   1e790:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e794:	mov	r0, lr
   1e798:	mov	r5, lr
   1e79c:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1e7a0:	mov	lr, r5
   1e7a4:	and	r1, r0, #1
   1e7a8:	tst	r4, #1024	; 0x400
   1e7ac:	beq	1e7b8 <__assert_fail@plt+0xd044>
   1e7b0:	cmp	r1, #0
   1e7b4:	beq	1edf4 <__assert_fail@plt+0xd680>
   1e7b8:	tst	r4, #2048	; 0x800
   1e7bc:	cmpne	r1, #0
   1e7c0:	bne	1edf4 <__assert_fail@plt+0xd680>
   1e7c4:	tst	r4, #8192	; 0x2000
   1e7c8:	beq	1e7d4 <__assert_fail@plt+0xd060>
   1e7cc:	ands	r1, r0, #2
   1e7d0:	beq	1edf4 <__assert_fail@plt+0xd680>
   1e7d4:	tst	r4, #32768	; 0x8000
   1e7d8:	beq	1e7e4 <__assert_fail@plt+0xd070>
   1e7dc:	ands	r0, r0, #8
   1e7e0:	beq	1edf4 <__assert_fail@plt+0xd680>
   1e7e4:	ldr	r0, [lr, #108]	; 0x6c
   1e7e8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e7ec:	ldr	r4, [lr, #4]
   1e7f0:	ldr	r7, [lr, #84]	; 0x54
   1e7f4:	mov	r5, lr
   1e7f8:	str	r0, [sp, #12]
   1e7fc:	mov	r0, lr
   1e800:	bl	1f280 <__assert_fail@plt+0xdb0c>
   1e804:	mov	lr, r5
   1e808:	cmn	r0, #1
   1e80c:	beq	1e83c <__assert_fail@plt+0xd0c8>
   1e810:	ldr	r1, [lr, #116]	; 0x74
   1e814:	add	r0, r0, r0, lsl #1
   1e818:	add	r0, r1, r0, lsl #3
   1e81c:	ldr	r1, [r0]
   1e820:	ldr	r2, [sp, #52]	; 0x34
   1e824:	cmp	r1, r2
   1e828:	beq	1ebe4 <__assert_fail@plt+0xd470>
   1e82c:	ldrb	r1, [r0, #20]
   1e830:	add	r0, r0, #24
   1e834:	cmp	r1, #0
   1e838:	bne	1e81c <__assert_fail@plt+0xd0a8>
   1e83c:	ldr	r0, [lr, #124]	; 0x7c
   1e840:	cmp	r0, #1
   1e844:	blt	1ebe4 <__assert_fail@plt+0xd470>
   1e848:	ldr	r0, [r7]
   1e84c:	ldr	r1, [sp, #52]	; 0x34
   1e850:	mov	r2, #0
   1e854:	mov	ip, r4
   1e858:	str	r7, [sp, #24]
   1e85c:	ldr	r8, [r0, r1, lsl #3]
   1e860:	str	r8, [sp, #28]
   1e864:	ldr	r1, [lr, #132]	; 0x84
   1e868:	str	r2, [sp, #40]	; 0x28
   1e86c:	ldr	r6, [r1, r2, lsl #2]
   1e870:	ldr	r1, [r6, #4]
   1e874:	ldr	r0, [r0, r1, lsl #3]
   1e878:	cmp	r0, r8
   1e87c:	bne	1e9a0 <__assert_fail@plt+0xd22c>
   1e880:	ldr	r0, [r6, #16]
   1e884:	ldr	r9, [r6]
   1e888:	mov	r8, #0
   1e88c:	str	r6, [sp, #44]	; 0x2c
   1e890:	cmp	r0, #1
   1e894:	blt	1e8a4 <__assert_fail@plt+0xd130>
   1e898:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1e89c:	mov	r7, r9
   1e8a0:	b	1e8d8 <__assert_fail@plt+0xd164>
   1e8a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1e8a8:	b	1e97c <__assert_fail@plt+0xd208>
   1e8ac:	ldr	r2, [lr, #48]	; 0x30
   1e8b0:	cmp	r1, r2
   1e8b4:	bgt	1e978 <__assert_fail@plt+0xd204>
   1e8b8:	mov	r0, lr
   1e8bc:	mov	r6, lr
   1e8c0:	bl	1f308 <__assert_fail@plt+0xdb94>
   1e8c4:	cmp	r0, #0
   1e8c8:	bne	1ee20 <__assert_fail@plt+0xd6ac>
   1e8cc:	ldr	ip, [r6, #4]
   1e8d0:	mov	r1, r6
   1e8d4:	b	1e900 <__assert_fail@plt+0xd18c>
   1e8d8:	ldr	r1, [r6, #20]
   1e8dc:	ldr	sl, [r1, r8, lsl #2]
   1e8e0:	ldr	r9, [sl, #4]
   1e8e4:	sub	r4, r9, r7
   1e8e8:	cmp	r4, #1
   1e8ec:	blt	1e928 <__assert_fail@plt+0xd1b4>
   1e8f0:	ldr	r2, [lr, #28]
   1e8f4:	add	r1, r4, r5
   1e8f8:	cmp	r1, r2
   1e8fc:	bgt	1e8ac <__assert_fail@plt+0xd138>
   1e900:	add	r0, ip, r5
   1e904:	add	r1, ip, r7
   1e908:	mov	r2, r4
   1e90c:	mov	r6, ip
   1e910:	bl	114e0 <memcmp@plt>
   1e914:	mov	ip, r6
   1e918:	ldr	r6, [sp, #44]	; 0x2c
   1e91c:	ldr	lr, [sp, #48]	; 0x30
   1e920:	cmp	r0, #0
   1e924:	bne	1e974 <__assert_fail@plt+0xd200>
   1e928:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e92c:	ldr	r3, [sp, #52]	; 0x34
   1e930:	mov	r1, r6
   1e934:	mov	r2, sl
   1e938:	mov	r7, lr
   1e93c:	str	r0, [sp]
   1e940:	mov	r0, lr
   1e944:	bl	1f398 <__assert_fail@plt+0xdc24>
   1e948:	cmp	r0, #1
   1e94c:	bhi	1ee20 <__assert_fail@plt+0xd6ac>
   1e950:	ldr	r0, [r6, #16]
   1e954:	ldr	ip, [r7, #4]
   1e958:	add	r8, r8, #1
   1e95c:	mov	lr, r7
   1e960:	add	r5, r4, r5
   1e964:	mov	r7, r9
   1e968:	cmp	r8, r0
   1e96c:	blt	1e8d8 <__assert_fail@plt+0xd164>
   1e970:	b	1e97c <__assert_fail@plt+0xd208>
   1e974:	ldr	r0, [r6, #16]
   1e978:	mov	r9, r7
   1e97c:	cmp	r8, r0
   1e980:	blt	1e998 <__assert_fail@plt+0xd224>
   1e984:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e988:	cmp	r8, #0
   1e98c:	addne	r9, r9, #1
   1e990:	cmp	r9, r0
   1e994:	ble	1e9bc <__assert_fail@plt+0xd248>
   1e998:	ldr	r7, [sp, #24]
   1e99c:	ldr	r8, [sp, #28]
   1e9a0:	ldr	r2, [sp, #40]	; 0x28
   1e9a4:	ldr	r0, [lr, #124]	; 0x7c
   1e9a8:	add	r2, r2, #1
   1e9ac:	cmp	r2, r0
   1e9b0:	bge	1ebf0 <__assert_fail@plt+0xd47c>
   1e9b4:	ldr	r0, [r7]
   1e9b8:	b	1e864 <__assert_fail@plt+0xd0f0>
   1e9bc:	ldr	r7, [sp, #24]
   1e9c0:	ldr	r8, [sp, #28]
   1e9c4:	b	1eb34 <__assert_fail@plt+0xd3c0>
   1e9c8:	cmn	r4, #1
   1e9cc:	beq	1ebc8 <__assert_fail@plt+0xd454>
   1e9d0:	ldr	r1, [r6, #8]
   1e9d4:	mov	r7, ip
   1e9d8:	str	r5, [sp, #20]
   1e9dc:	cmp	r1, #0
   1e9e0:	bne	1ea10 <__assert_fail@plt+0xd29c>
   1e9e4:	ldr	r0, [r6]
   1e9e8:	add	r1, sl, #1
   1e9ec:	mov	r5, #12
   1e9f0:	sub	r1, r1, r0
   1e9f4:	mov	r0, #12
   1e9f8:	bl	23b90 <__assert_fail@plt+0x1241c>
   1e9fc:	ldr	r6, [sp, #44]	; 0x2c
   1ea00:	mov	r1, r0
   1ea04:	cmp	r0, #0
   1ea08:	str	r0, [r6, #8]
   1ea0c:	beq	1ee24 <__assert_fail@plt+0xd6b0>
   1ea10:	ldr	r3, [r6]
   1ea14:	ldr	r2, [r6, #4]
   1ea18:	stm	sp, {r4, sl}
   1ea1c:	mov	r0, #9
   1ea20:	str	r0, [sp, #8]
   1ea24:	ldr	r0, [sp, #48]	; 0x30
   1ea28:	bl	1f4e8 <__assert_fail@plt+0xdd74>
   1ea2c:	ldr	r6, [sp, #44]	; 0x2c
   1ea30:	ldr	r5, [sp, #20]
   1ea34:	mov	ip, r7
   1ea38:	cmp	r0, #1
   1ea3c:	mov	r7, r9
   1ea40:	beq	1ebcc <__assert_fail@plt+0xd458>
   1ea44:	cmp	r0, #0
   1ea48:	bne	1ee20 <__assert_fail@plt+0xd6ac>
   1ea4c:	ldr	r1, [r6, #12]
   1ea50:	ldr	r0, [r6, #16]
   1ea54:	ldr	r7, [sp, #48]	; 0x30
   1ea58:	cmp	r0, r1
   1ea5c:	beq	1eb08 <__assert_fail@plt+0xd394>
   1ea60:	mov	r0, #1
   1ea64:	mov	r1, #20
   1ea68:	bl	23b90 <__assert_fail@plt+0x1241c>
   1ea6c:	cmp	r0, #0
   1ea70:	beq	1ee30 <__assert_fail@plt+0xd6bc>
   1ea74:	ldr	r1, [sp, #44]	; 0x2c
   1ea78:	mov	r2, r0
   1ea7c:	ldr	r0, [r1, #16]
   1ea80:	ldr	r3, [r1, #20]
   1ea84:	str	r2, [r3, r0, lsl #2]
   1ea88:	stm	r2, {r4, sl}
   1ea8c:	add	r0, r0, #1
   1ea90:	str	r0, [r1, #16]
   1ea94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ea98:	ldr	r3, [sp, #52]	; 0x34
   1ea9c:	str	r0, [sp]
   1eaa0:	mov	r0, r7
   1eaa4:	bl	1f398 <__assert_fail@plt+0xdc24>
   1eaa8:	cmp	r0, #1
   1eaac:	bhi	1ee20 <__assert_fail@plt+0xd6ac>
   1eab0:	ldr	ip, [r7, #4]
   1eab4:	ldr	r6, [sp, #44]	; 0x2c
   1eab8:	ldr	r5, [sp, #20]
   1eabc:	b	1ebc8 <__assert_fail@plt+0xd454>
   1eac0:	ldr	r0, [lr, #48]	; 0x30
   1eac4:	cmp	r5, r0
   1eac8:	bge	1e9a0 <__assert_fail@plt+0xd22c>
   1eacc:	add	r4, r5, #1
   1ead0:	mov	r0, lr
   1ead4:	mov	r9, r7
   1ead8:	mov	r7, r5
   1eadc:	mov	r5, lr
   1eae0:	mov	r1, r4
   1eae4:	bl	1ee50 <__assert_fail@plt+0xd6dc>
   1eae8:	cmp	r0, #0
   1eaec:	bne	1ee20 <__assert_fail@plt+0xd6ac>
   1eaf0:	ldr	ip, [r5, #4]
   1eaf4:	ldr	r6, [sp, #44]	; 0x2c
   1eaf8:	mov	lr, r5
   1eafc:	mov	r5, r7
   1eb00:	mov	r7, r9
   1eb04:	b	1eb54 <__assert_fail@plt+0xd3e0>
   1eb08:	mov	r1, #1
   1eb0c:	orr	r5, r1, r0, lsl #1
   1eb10:	ldr	r0, [r6, #20]
   1eb14:	lsl	r1, r5, #2
   1eb18:	bl	23c14 <__assert_fail@plt+0x124a0>
   1eb1c:	cmp	r0, #0
   1eb20:	beq	1ee30 <__assert_fail@plt+0xd6bc>
   1eb24:	ldr	r8, [sp, #28]
   1eb28:	str	r5, [r6, #12]
   1eb2c:	str	r0, [r6, #20]
   1eb30:	b	1ea60 <__assert_fail@plt+0xd2ec>
   1eb34:	ldr	r0, [r6]
   1eb38:	mov	sl, r9
   1eb3c:	cmp	r9, r0
   1eb40:	ble	1eb6c <__assert_fail@plt+0xd3f8>
   1eb44:	ldr	r0, [lr, #28]
   1eb48:	cmp	r5, r0
   1eb4c:	bge	1eac0 <__assert_fail@plt+0xd34c>
   1eb50:	add	r4, r5, #1
   1eb54:	add	r1, ip, sl
   1eb58:	ldrb	r0, [ip, r5]
   1eb5c:	ldrb	r1, [r1, #-1]
   1eb60:	cmp	r0, r1
   1eb64:	beq	1eb70 <__assert_fail@plt+0xd3fc>
   1eb68:	b	1e9a0 <__assert_fail@plt+0xd22c>
   1eb6c:	mov	r4, r5
   1eb70:	ldr	r0, [lr, #100]	; 0x64
   1eb74:	mov	r5, r4
   1eb78:	ldr	r2, [r0, sl, lsl #2]
   1eb7c:	cmp	r2, #0
   1eb80:	beq	1ebcc <__assert_fail@plt+0xd458>
   1eb84:	ldr	r0, [r2, #8]
   1eb88:	cmp	r0, #1
   1eb8c:	blt	1ebcc <__assert_fail@plt+0xd458>
   1eb90:	ldr	r1, [r7]
   1eb94:	ldr	r2, [r2, #12]
   1eb98:	mov	r9, r7
   1eb9c:	mov	r3, #0
   1eba0:	ldr	r4, [r2, r3, lsl #2]
   1eba4:	add	r7, r1, r4, lsl #3
   1eba8:	ldrb	r7, [r7, #4]
   1ebac:	cmp	r7, #9
   1ebb0:	ldreq	r7, [r1, r4, lsl #3]
   1ebb4:	cmpeq	r7, r8
   1ebb8:	beq	1e9c8 <__assert_fail@plt+0xd254>
   1ebbc:	add	r3, r3, #1
   1ebc0:	cmp	r3, r0
   1ebc4:	blt	1eba0 <__assert_fail@plt+0xd42c>
   1ebc8:	mov	r7, r9
   1ebcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ebd0:	ldr	lr, [sp, #48]	; 0x30
   1ebd4:	add	r9, sl, #1
   1ebd8:	cmp	sl, r0
   1ebdc:	blt	1eb34 <__assert_fail@plt+0xd3c0>
   1ebe0:	b	1e9a0 <__assert_fail@plt+0xd22c>
   1ebe4:	mov	r0, #0
   1ebe8:	str	r0, [fp, #-32]	; 0xffffffe0
   1ebec:	b	1edf4 <__assert_fail@plt+0xd680>
   1ebf0:	ldr	r0, [lr, #108]	; 0x6c
   1ebf4:	ldr	r7, [sp, #12]
   1ebf8:	mov	r1, #0
   1ebfc:	str	r1, [fp, #-32]	; 0xffffffe0
   1ec00:	cmp	r7, r0
   1ec04:	bge	1edf4 <__assert_fail@plt+0xd680>
   1ec08:	add	r0, r7, r7, lsl #1
   1ec0c:	lsl	r5, r0, #3
   1ec10:	ldr	r0, [lr, #116]	; 0x74
   1ec14:	ldr	r2, [sp, #52]	; 0x34
   1ec18:	ldr	r1, [r0, r5]
   1ec1c:	cmp	r1, r2
   1ec20:	bne	1eddc <__assert_fail@plt+0xd668>
   1ec24:	add	r0, r0, r5
   1ec28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ec2c:	ldr	r1, [r0, #4]
   1ec30:	cmp	r1, r2
   1ec34:	bne	1eddc <__assert_fail@plt+0xd668>
   1ec38:	ldr	r2, [r0, #8]
   1ec3c:	ldr	r3, [r0, #12]
   1ec40:	ldr	r0, [sp, #32]
   1ec44:	ldr	r4, [r0, #24]
   1ec48:	cmp	r3, r2
   1ec4c:	bne	1ec68 <__assert_fail@plt+0xd4f4>
   1ec50:	ldr	r1, [sp, #52]	; 0x34
   1ec54:	ldr	r0, [r0, #20]
   1ec58:	add	r1, r1, r1, lsl #1
   1ec5c:	add	r0, r0, r1, lsl #2
   1ec60:	ldr	r0, [r0, #8]
   1ec64:	b	1ec74 <__assert_fail@plt+0xd500>
   1ec68:	ldr	r0, [r0, #12]
   1ec6c:	ldr	r1, [sp, #52]	; 0x34
   1ec70:	add	r0, r0, r1, lsl #2
   1ec74:	ldr	r0, [r0]
   1ec78:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1ec7c:	ldr	r6, [sp, #48]	; 0x30
   1ec80:	str	r2, [sp, #44]	; 0x2c
   1ec84:	str	r3, [sp, #40]	; 0x28
   1ec88:	add	r9, r0, r0, lsl #1
   1ec8c:	add	r0, r3, r8
   1ec90:	sub	sl, r0, r2
   1ec94:	ldr	r2, [r6, #88]	; 0x58
   1ec98:	mov	r0, r6
   1ec9c:	sub	r1, sl, #1
   1eca0:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1eca4:	mov	r3, r0
   1eca8:	ldr	r0, [r6, #100]	; 0x64
   1ecac:	ldr	r1, [r0, r8, lsl #2]
   1ecb0:	ldr	r2, [r0, sl, lsl #2]
   1ecb4:	add	r8, r4, r9, lsl #2
   1ecb8:	cmp	r1, #0
   1ecbc:	ldrne	r0, [r1, #8]
   1ecc0:	moveq	r0, #0
   1ecc4:	cmp	r2, #0
   1ecc8:	str	r0, [sp, #28]
   1eccc:	sub	r0, fp, #44	; 0x2c
   1ecd0:	beq	1ed3c <__assert_fail@plt+0xd5c8>
   1ecd4:	ldr	r1, [r2, #40]	; 0x28
   1ecd8:	mov	r2, r8
   1ecdc:	mov	r4, r3
   1ece0:	mov	r6, r0
   1ece4:	bl	1f07c <__assert_fail@plt+0xd908>
   1ece8:	cmp	r0, #0
   1ecec:	str	r0, [fp, #-32]	; 0xffffffe0
   1ecf0:	bne	1ee38 <__assert_fail@plt+0xd6c4>
   1ecf4:	ldr	r1, [sp, #32]
   1ecf8:	sub	r0, fp, #32
   1ecfc:	mov	r2, r6
   1ed00:	mov	r3, r4
   1ed04:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1ed08:	ldr	r4, [sp, #48]	; 0x30
   1ed0c:	ldr	r1, [r4, #100]	; 0x64
   1ed10:	str	r0, [r1, sl, lsl #2]
   1ed14:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ed18:	bl	13c04 <__assert_fail@plt+0x2490>
   1ed1c:	ldr	r3, [r4, #100]	; 0x64
   1ed20:	ldr	r1, [r3, sl, lsl #2]
   1ed24:	cmp	r1, #0
   1ed28:	bne	1ed7c <__assert_fail@plt+0xd608>
   1ed2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ed30:	cmp	r0, #0
   1ed34:	beq	1ed7c <__assert_fail@plt+0xd608>
   1ed38:	b	1ee18 <__assert_fail@plt+0xd6a4>
   1ed3c:	ldr	r1, [sp, #32]
   1ed40:	sub	r0, fp, #32
   1ed44:	mov	r2, r8
   1ed48:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1ed4c:	ldr	r1, [r6, #100]	; 0x64
   1ed50:	str	r0, [r1, sl, lsl #2]
   1ed54:	ldr	r3, [r6, #100]	; 0x64
   1ed58:	ldr	r1, [r3, sl, lsl #2]
   1ed5c:	cmp	r1, #0
   1ed60:	bne	1ed7c <__assert_fail@plt+0xd608>
   1ed64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ed68:	ldr	r1, [sp, #44]	; 0x2c
   1ed6c:	ldr	r2, [sp, #40]	; 0x28
   1ed70:	cmp	r0, #0
   1ed74:	beq	1ed84 <__assert_fail@plt+0xd610>
   1ed78:	b	1ee18 <__assert_fail@plt+0xd6a4>
   1ed7c:	ldr	r1, [sp, #44]	; 0x2c
   1ed80:	ldr	r2, [sp, #40]	; 0x28
   1ed84:	cmp	r2, r1
   1ed88:	bne	1eddc <__assert_fail@plt+0xd668>
   1ed8c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1ed90:	ldr	r0, [r3, r1, lsl #2]
   1ed94:	ldr	r1, [sp, #28]
   1ed98:	ldr	r0, [r0, #8]
   1ed9c:	cmp	r0, r1
   1eda0:	ble	1eddc <__assert_fail@plt+0xd668>
   1eda4:	ldr	r4, [sp, #48]	; 0x30
   1eda8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1edac:	mov	r1, r8
   1edb0:	mov	r0, r4
   1edb4:	bl	1e620 <__assert_fail@plt+0xceac>
   1edb8:	cmp	r0, #0
   1edbc:	str	r0, [fp, #-32]	; 0xffffffe0
   1edc0:	bne	1ee18 <__assert_fail@plt+0xd6a4>
   1edc4:	mov	r0, r4
   1edc8:	mov	r1, r8
   1edcc:	bl	1e718 <__assert_fail@plt+0xcfa4>
   1edd0:	cmp	r0, #0
   1edd4:	str	r0, [fp, #-32]	; 0xffffffe0
   1edd8:	bne	1ee18 <__assert_fail@plt+0xd6a4>
   1eddc:	ldr	lr, [sp, #48]	; 0x30
   1ede0:	add	r7, r7, #1
   1ede4:	add	r5, r5, #24
   1ede8:	ldr	r0, [lr, #108]	; 0x6c
   1edec:	cmp	r7, r0
   1edf0:	blt	1ec10 <__assert_fail@plt+0xd49c>
   1edf4:	ldr	r1, [sp, #16]
   1edf8:	ldr	r3, [sp, #36]	; 0x24
   1edfc:	ldr	r2, [sp, #32]
   1ee00:	ldr	r0, [r1, #4]
   1ee04:	add	r3, r3, #1
   1ee08:	cmp	r3, r0
   1ee0c:	blt	1e750 <__assert_fail@plt+0xcfdc>
   1ee10:	mov	r0, #0
   1ee14:	str	r0, [fp, #-32]	; 0xffffffe0
   1ee18:	sub	sp, fp, #28
   1ee1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee20:	mov	r5, r0
   1ee24:	str	r5, [fp, #-32]	; 0xffffffe0
   1ee28:	mov	r0, r5
   1ee2c:	b	1ee18 <__assert_fail@plt+0xd6a4>
   1ee30:	mov	r5, #12
   1ee34:	b	1ee24 <__assert_fail@plt+0xd6b0>
   1ee38:	mov	r1, r0
   1ee3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ee40:	mov	r4, r1
   1ee44:	bl	13c04 <__assert_fail@plt+0x2490>
   1ee48:	mov	r0, r4
   1ee4c:	b	1ee18 <__assert_fail@plt+0xd6a4>
   1ee50:	push	{r4, r5, fp, lr}
   1ee54:	add	fp, sp, #8
   1ee58:	mov	r4, r0
   1ee5c:	ldr	r0, [r0, #36]	; 0x24
   1ee60:	mov	r5, #12
   1ee64:	cmn	r0, #-536870910	; 0xe0000002
   1ee68:	bhi	1ef20 <__assert_fail@plt+0xd7ac>
   1ee6c:	ldr	r2, [r4, #48]	; 0x30
   1ee70:	cmp	r2, r0, lsl #1
   1ee74:	lslge	r2, r0, #1
   1ee78:	mov	r0, r4
   1ee7c:	cmp	r2, r1
   1ee80:	movle	r2, r1
   1ee84:	mov	r1, r2
   1ee88:	bl	18e58 <__assert_fail@plt+0x76e4>
   1ee8c:	cmp	r0, #0
   1ee90:	bne	1eee4 <__assert_fail@plt+0xd770>
   1ee94:	ldr	r0, [r4, #100]	; 0x64
   1ee98:	cmp	r0, #0
   1ee9c:	beq	1eebc <__assert_fail@plt+0xd748>
   1eea0:	ldr	r1, [r4, #36]	; 0x24
   1eea4:	mov	r2, #4
   1eea8:	add	r1, r2, r1, lsl #2
   1eeac:	bl	23c14 <__assert_fail@plt+0x124a0>
   1eeb0:	cmp	r0, #0
   1eeb4:	beq	1ef20 <__assert_fail@plt+0xd7ac>
   1eeb8:	str	r0, [r4, #100]	; 0x64
   1eebc:	ldrb	r1, [r4, #72]	; 0x48
   1eec0:	ldr	r0, [r4, #80]	; 0x50
   1eec4:	cmp	r1, #0
   1eec8:	beq	1eeec <__assert_fail@plt+0xd778>
   1eecc:	cmp	r0, #2
   1eed0:	blt	1ef00 <__assert_fail@plt+0xd78c>
   1eed4:	mov	r0, r4
   1eed8:	bl	18ef8 <__assert_fail@plt+0x7784>
   1eedc:	cmp	r0, #0
   1eee0:	beq	1ef1c <__assert_fail@plt+0xd7a8>
   1eee4:	mov	r5, r0
   1eee8:	b	1ef20 <__assert_fail@plt+0xd7ac>
   1eeec:	cmp	r0, #2
   1eef0:	blt	1ef0c <__assert_fail@plt+0xd798>
   1eef4:	mov	r0, r4
   1eef8:	bl	194d4 <__assert_fail@plt+0x7d60>
   1eefc:	b	1ef1c <__assert_fail@plt+0xd7a8>
   1ef00:	mov	r0, r4
   1ef04:	bl	19468 <__assert_fail@plt+0x7cf4>
   1ef08:	b	1ef1c <__assert_fail@plt+0xd7a8>
   1ef0c:	ldr	r0, [r4, #64]	; 0x40
   1ef10:	cmp	r0, #0
   1ef14:	movne	r0, r4
   1ef18:	blne	196b0 <__assert_fail@plt+0x7f3c>
   1ef1c:	mov	r5, #0
   1ef20:	mov	r0, r5
   1ef24:	pop	{r4, r5, fp, pc}
   1ef28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef2c:	add	fp, sp, #24
   1ef30:	sub	sp, sp, #16
   1ef34:	mov	r8, r0
   1ef38:	mov	r4, r1
   1ef3c:	ldr	r5, [r1, #40]	; 0x28
   1ef40:	ldr	r7, [r1, #84]	; 0x54
   1ef44:	ldr	r0, [r1, #100]	; 0x64
   1ef48:	ldr	r1, [r1, #104]	; 0x68
   1ef4c:	mov	r6, r2
   1ef50:	cmp	r5, r1
   1ef54:	ble	1ef64 <__assert_fail@plt+0xd7f0>
   1ef58:	str	r6, [r0, r5, lsl #2]
   1ef5c:	str	r5, [r4, #104]	; 0x68
   1ef60:	b	1f008 <__assert_fail@plt+0xd894>
   1ef64:	ldr	r1, [r0, r5, lsl #2]
   1ef68:	cmp	r1, #0
   1ef6c:	beq	1efa8 <__assert_fail@plt+0xd834>
   1ef70:	ldr	r2, [r1, #40]	; 0x28
   1ef74:	cmp	r6, #0
   1ef78:	beq	1efb0 <__assert_fail@plt+0xd83c>
   1ef7c:	ldr	r6, [r6, #40]	; 0x28
   1ef80:	mov	r0, sp
   1ef84:	mov	r1, r6
   1ef88:	bl	1f07c <__assert_fail@plt+0xd908>
   1ef8c:	cmp	r0, #0
   1ef90:	str	r0, [r8]
   1ef94:	bne	1f074 <__assert_fail@plt+0xd900>
   1ef98:	ldr	r0, [r4, #40]	; 0x28
   1ef9c:	clz	r1, r6
   1efa0:	lsr	r9, r1, #5
   1efa4:	b	1efc8 <__assert_fail@plt+0xd854>
   1efa8:	str	r6, [r0, r5, lsl #2]
   1efac:	b	1f008 <__assert_fail@plt+0xd894>
   1efb0:	ldr	r0, [r2, #8]
   1efb4:	vldr	d16, [r2]
   1efb8:	mov	r9, #1
   1efbc:	str	r0, [sp, #8]
   1efc0:	mov	r0, r5
   1efc4:	vstr	d16, [sp]
   1efc8:	ldr	r2, [r4, #88]	; 0x58
   1efcc:	sub	r1, r0, #1
   1efd0:	mov	r0, r4
   1efd4:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1efd8:	mov	r3, r0
   1efdc:	mov	r2, sp
   1efe0:	mov	r0, r8
   1efe4:	mov	r1, r7
   1efe8:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1efec:	mov	r6, r0
   1eff0:	ldr	r0, [r4, #100]	; 0x64
   1eff4:	cmp	r9, #0
   1eff8:	str	r6, [r0, r5, lsl #2]
   1effc:	bne	1f008 <__assert_fail@plt+0xd894>
   1f000:	ldr	r0, [sp, #8]
   1f004:	bl	13c04 <__assert_fail@plt+0x2490>
   1f008:	cmp	r6, #0
   1f00c:	ldrne	r0, [r7, #76]	; 0x4c
   1f010:	cmpne	r0, #0
   1f014:	bne	1f024 <__assert_fail@plt+0xd8b0>
   1f018:	mov	r0, r6
   1f01c:	sub	sp, fp, #24
   1f020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f024:	add	r7, r6, #4
   1f028:	mov	r0, r4
   1f02c:	mov	r2, r5
   1f030:	mov	r1, r7
   1f034:	bl	1e620 <__assert_fail@plt+0xceac>
   1f038:	cmp	r0, #0
   1f03c:	str	r0, [r8]
   1f040:	bne	1f074 <__assert_fail@plt+0xd900>
   1f044:	ldrb	r0, [r6, #52]	; 0x34
   1f048:	tst	r0, #64	; 0x40
   1f04c:	beq	1f018 <__assert_fail@plt+0xd8a4>
   1f050:	mov	r0, r4
   1f054:	mov	r1, r7
   1f058:	bl	1e718 <__assert_fail@plt+0xcfa4>
   1f05c:	str	r0, [r8]
   1f060:	cmp	r0, #0
   1f064:	mov	r6, #0
   1f068:	ldreq	r0, [r4, #100]	; 0x64
   1f06c:	ldreq	r6, [r0, r5, lsl #2]
   1f070:	b	1f018 <__assert_fail@plt+0xd8a4>
   1f074:	mov	r6, #0
   1f078:	b	1f018 <__assert_fail@plt+0xd8a4>
   1f07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f080:	add	fp, sp, #28
   1f084:	sub	sp, sp, #20
   1f088:	mov	r8, r2
   1f08c:	cmp	r1, #0
   1f090:	str	r0, [sp, #16]
   1f094:	beq	1f0cc <__assert_fail@plt+0xd958>
   1f098:	ldr	r0, [r1, #4]
   1f09c:	mov	r6, r1
   1f0a0:	cmp	r8, #0
   1f0a4:	beq	1f0b8 <__assert_fail@plt+0xd944>
   1f0a8:	cmp	r0, #1
   1f0ac:	ldrge	r1, [r8, #4]
   1f0b0:	cmpge	r1, #1
   1f0b4:	bge	1f10c <__assert_fail@plt+0xd998>
   1f0b8:	cmp	r0, #1
   1f0bc:	blt	1f0cc <__assert_fail@plt+0xd958>
   1f0c0:	ldr	r0, [sp, #16]
   1f0c4:	mov	r1, r6
   1f0c8:	b	1f0e8 <__assert_fail@plt+0xd974>
   1f0cc:	cmp	r8, #0
   1f0d0:	beq	1f0f4 <__assert_fail@plt+0xd980>
   1f0d4:	ldr	r0, [r8, #4]
   1f0d8:	cmp	r0, #1
   1f0dc:	blt	1f0f4 <__assert_fail@plt+0xd980>
   1f0e0:	ldr	r0, [sp, #16]
   1f0e4:	mov	r1, r8
   1f0e8:	sub	sp, fp, #28
   1f0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0f0:	b	1d7f0 <__assert_fail@plt+0xc07c>
   1f0f4:	ldr	r1, [sp, #16]
   1f0f8:	mov	r0, #0
   1f0fc:	str	r0, [r1]
   1f100:	str	r0, [r1, #4]
   1f104:	str	r0, [r1, #8]
   1f108:	b	1f270 <__assert_fail@plt+0xdafc>
   1f10c:	ldr	r4, [sp, #16]
   1f110:	add	r0, r1, r0
   1f114:	str	r0, [r4]
   1f118:	lsl	r0, r0, #2
   1f11c:	bl	23be4 <__assert_fail@plt+0x12470>
   1f120:	cmp	r0, #0
   1f124:	str	r0, [r4, #8]
   1f128:	beq	1f278 <__assert_fail@plt+0xdb04>
   1f12c:	ldr	r9, [r8, #4]
   1f130:	ldr	lr, [r6, #4]
   1f134:	mov	r1, #0
   1f138:	mov	r7, #0
   1f13c:	cmp	r9, #0
   1f140:	movwgt	r1, #1
   1f144:	cmp	lr, #1
   1f148:	blt	1f20c <__assert_fail@plt+0xda98>
   1f14c:	mov	r2, #0
   1f150:	mov	ip, #0
   1f154:	str	r2, [sp, #8]
   1f158:	mov	r2, #0
   1f15c:	str	r2, [sp, #12]
   1f160:	mov	r2, #0
   1f164:	ldr	r4, [sp, #12]
   1f168:	mov	r7, ip
   1f16c:	tst	r1, #1
   1f170:	beq	1f23c <__assert_fail@plt+0xdac8>
   1f174:	ldr	r1, [r8, #8]
   1f178:	ldr	r3, [r1, r7, lsl #2]
   1f17c:	ldr	r1, [r6, #8]
   1f180:	ldr	sl, [r1, r2, lsl #2]
   1f184:	cmp	sl, r3
   1f188:	ble	1f1b0 <__assert_fail@plt+0xda3c>
   1f18c:	add	r7, r7, #1
   1f190:	mov	r1, #0
   1f194:	str	r3, [r0, r4, lsl #2]
   1f198:	add	r4, r4, #1
   1f19c:	cmp	r9, r7
   1f1a0:	movwgt	r1, #1
   1f1a4:	cmp	lr, r2
   1f1a8:	bgt	1f16c <__assert_fail@plt+0xd9f8>
   1f1ac:	b	1f210 <__assert_fail@plt+0xda9c>
   1f1b0:	add	r1, r7, #1
   1f1b4:	str	sl, [r0, r4, lsl #2]
   1f1b8:	mov	ip, r7
   1f1bc:	add	r2, r2, #1
   1f1c0:	str	r1, [sp, #4]
   1f1c4:	ldr	r9, [r8, #4]
   1f1c8:	ldr	lr, [r6, #4]
   1f1cc:	moveq	ip, r1
   1f1d0:	mov	r1, #0
   1f1d4:	ldr	r5, [sp, #8]
   1f1d8:	cmp	r9, ip
   1f1dc:	sub	r5, r5, #1
   1f1e0:	movwgt	r1, #1
   1f1e4:	cmp	lr, r2
   1f1e8:	str	r5, [sp, #8]
   1f1ec:	add	r5, r4, #1
   1f1f0:	str	r5, [sp, #12]
   1f1f4:	bgt	1f164 <__assert_fail@plt+0xd9f0>
   1f1f8:	ldr	r2, [sp, #4]
   1f1fc:	cmp	sl, r3
   1f200:	add	r4, r4, #1
   1f204:	moveq	r7, r2
   1f208:	b	1f210 <__assert_fail@plt+0xda9c>
   1f20c:	mov	r4, #0
   1f210:	cmp	r1, #0
   1f214:	beq	1f264 <__assert_fail@plt+0xdaf0>
   1f218:	ldr	r1, [r8, #8]
   1f21c:	sub	r2, r9, r7
   1f220:	add	r0, r0, r4, lsl #2
   1f224:	lsl	r2, r2, #2
   1f228:	add	r1, r1, r7, lsl #2
   1f22c:	bl	1148c <memcpy@plt>
   1f230:	sub	r0, r4, r7
   1f234:	add	r4, r0, r9
   1f238:	b	1f264 <__assert_fail@plt+0xdaf0>
   1f23c:	ldr	r1, [r6, #8]
   1f240:	add	r0, r0, r4, lsl #2
   1f244:	add	r1, r1, r2, lsl #2
   1f248:	sub	r2, lr, r2
   1f24c:	lsl	r2, r2, #2
   1f250:	bl	1148c <memcpy@plt>
   1f254:	ldr	r0, [r6, #4]
   1f258:	ldr	r1, [sp, #8]
   1f25c:	add	r0, r0, r1
   1f260:	add	r4, r0, r4
   1f264:	ldr	r0, [sp, #16]
   1f268:	str	r4, [r0, #4]
   1f26c:	mov	r0, #0
   1f270:	sub	sp, fp, #28
   1f274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f278:	mov	r0, #12
   1f27c:	b	1f270 <__assert_fail@plt+0xdafc>
   1f280:	push	{r4, r5, r6, r7, fp, lr}
   1f284:	add	fp, sp, #16
   1f288:	ldr	lr, [r0, #108]	; 0x6c
   1f28c:	mov	ip, r0
   1f290:	cmp	lr, #1
   1f294:	blt	1f2d8 <__assert_fail@plt+0xdb64>
   1f298:	ldr	r2, [ip, #116]	; 0x74
   1f29c:	mov	r0, #0
   1f2a0:	mov	r3, #1
   1f2a4:	mov	r4, lr
   1f2a8:	add	r5, r0, r4
   1f2ac:	add	r5, r5, r5, lsr #31
   1f2b0:	asr	r6, r5, #1
   1f2b4:	add	r7, r6, r6, lsl #1
   1f2b8:	add	r7, r2, r7, lsl #3
   1f2bc:	ldr	r7, [r7, #4]
   1f2c0:	cmp	r7, r1
   1f2c4:	addlt	r0, r3, r5, asr #1
   1f2c8:	movge	r4, r6
   1f2cc:	cmp	r0, r4
   1f2d0:	blt	1f2a8 <__assert_fail@plt+0xdb34>
   1f2d4:	b	1f2dc <__assert_fail@plt+0xdb68>
   1f2d8:	mov	r0, #0
   1f2dc:	cmp	r0, lr
   1f2e0:	bge	1f300 <__assert_fail@plt+0xdb8c>
   1f2e4:	ldr	r2, [ip, #116]	; 0x74
   1f2e8:	add	r3, r0, r0, lsl #1
   1f2ec:	add	r2, r2, r3, lsl #3
   1f2f0:	ldr	r2, [r2, #4]
   1f2f4:	cmp	r2, r1
   1f2f8:	mvnne	r0, #0
   1f2fc:	pop	{r4, r5, r6, r7, fp, pc}
   1f300:	mvn	r0, #0
   1f304:	pop	{r4, r5, r6, r7, fp, pc}
   1f308:	push	{r4, r5, r6, r7, fp, lr}
   1f30c:	add	fp, sp, #16
   1f310:	mov	r5, r0
   1f314:	ldr	r0, [r0, #36]	; 0x24
   1f318:	mov	r4, r1
   1f31c:	ldr	r7, [r5, #104]	; 0x68
   1f320:	cmp	r0, r1
   1f324:	ldrle	r1, [r5, #48]	; 0x30
   1f328:	cmple	r0, r1
   1f32c:	blt	1f378 <__assert_fail@plt+0xdc04>
   1f330:	ldr	r0, [r5, #28]
   1f334:	cmp	r0, r4
   1f338:	ldrle	r1, [r5, #48]	; 0x30
   1f33c:	cmple	r0, r1
   1f340:	blt	1f378 <__assert_fail@plt+0xdc04>
   1f344:	mov	r6, #0
   1f348:	cmp	r7, r4
   1f34c:	bge	1f390 <__assert_fail@plt+0xdc1c>
   1f350:	sub	r0, r4, r7
   1f354:	mov	r1, #0
   1f358:	mov	r6, #0
   1f35c:	lsl	r2, r0, #2
   1f360:	ldr	r0, [r5, #100]	; 0x64
   1f364:	add	r0, r0, r7, lsl #2
   1f368:	add	r0, r0, #4
   1f36c:	bl	11660 <memset@plt>
   1f370:	str	r4, [r5, #104]	; 0x68
   1f374:	b	1f390 <__assert_fail@plt+0xdc1c>
   1f378:	add	r1, r4, #1
   1f37c:	mov	r0, r5
   1f380:	bl	1ee50 <__assert_fail@plt+0xd6dc>
   1f384:	mov	r6, r0
   1f388:	cmp	r0, #0
   1f38c:	beq	1f344 <__assert_fail@plt+0xdbd0>
   1f390:	mov	r0, r6
   1f394:	pop	{r4, r5, r6, r7, fp, pc}
   1f398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f39c:	add	fp, sp, #28
   1f3a0:	sub	sp, sp, #12
   1f3a4:	mov	r6, r2
   1f3a8:	mov	r4, r0
   1f3ac:	mov	r0, #8
   1f3b0:	mov	r7, r3
   1f3b4:	ldr	r2, [r2]
   1f3b8:	mov	r8, r1
   1f3bc:	ldr	r3, [r6, #4]
   1f3c0:	str	r0, [sp, #8]
   1f3c4:	add	r1, r6, #8
   1f3c8:	mov	r0, r4
   1f3cc:	ldr	r5, [fp, #8]
   1f3d0:	str	r7, [sp]
   1f3d4:	str	r5, [sp, #4]
   1f3d8:	bl	1f4e8 <__assert_fail@plt+0xdd74>
   1f3dc:	cmp	r0, #0
   1f3e0:	beq	1f3ec <__assert_fail@plt+0xdc78>
   1f3e4:	sub	sp, fp, #28
   1f3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3ec:	ldr	r0, [r4, #108]	; 0x6c
   1f3f0:	ldr	r1, [r4, #112]	; 0x70
   1f3f4:	ldr	r9, [r6, #4]
   1f3f8:	ldr	sl, [r8]
   1f3fc:	cmp	r0, r1
   1f400:	blt	1f450 <__assert_fail@plt+0xdcdc>
   1f404:	ldr	r0, [r4, #116]	; 0x74
   1f408:	add	r1, r1, r1, lsl #1
   1f40c:	lsl	r1, r1, #4
   1f410:	bl	23c14 <__assert_fail@plt+0x124a0>
   1f414:	cmp	r0, #0
   1f418:	beq	1f4d8 <__assert_fail@plt+0xdd64>
   1f41c:	str	r0, [r4, #116]	; 0x74
   1f420:	ldr	r1, [r4, #108]	; 0x6c
   1f424:	ldr	r2, [r4, #112]	; 0x70
   1f428:	add	r1, r1, r1, lsl #1
   1f42c:	add	r0, r0, r1, lsl #3
   1f430:	add	r1, r2, r2, lsl #1
   1f434:	lsl	r2, r1, #3
   1f438:	mov	r1, #0
   1f43c:	bl	11660 <memset@plt>
   1f440:	ldr	r1, [r4, #112]	; 0x70
   1f444:	ldr	r0, [r4, #108]	; 0x6c
   1f448:	lsl	r1, r1, #1
   1f44c:	str	r1, [r4, #112]	; 0x70
   1f450:	ldr	r1, [r4, #116]	; 0x74
   1f454:	cmp	r0, #1
   1f458:	blt	1f478 <__assert_fail@plt+0xdd04>
   1f45c:	sub	r2, r0, #1
   1f460:	add	r2, r2, r2, lsl #1
   1f464:	add	r2, r1, r2, lsl #3
   1f468:	ldr	r3, [r2, #4]
   1f46c:	cmp	r3, r5
   1f470:	moveq	r3, #1
   1f474:	strbeq	r3, [r2, #20]
   1f478:	add	r2, r0, r0, lsl #1
   1f47c:	cmp	r9, sl
   1f480:	mov	r3, #0
   1f484:	add	r0, r0, #1
   1f488:	str	r7, [r1, r2, lsl #3]!
   1f48c:	mov	r2, #0
   1f490:	mvneq	r3, #0
   1f494:	stmib	r1, {r5, sl}
   1f498:	str	r9, [r1, #12]
   1f49c:	str	r3, [r1, #16]
   1f4a0:	str	r0, [r4, #108]	; 0x6c
   1f4a4:	strb	r2, [r1, #20]
   1f4a8:	sub	r0, r9, sl
   1f4ac:	ldr	r1, [r4, #120]	; 0x78
   1f4b0:	cmp	r1, r0
   1f4b4:	strlt	r0, [r4, #120]	; 0x78
   1f4b8:	ldr	r0, [r6, #4]
   1f4bc:	ldr	r1, [r8]
   1f4c0:	add	r0, r0, r5
   1f4c4:	sub	r1, r0, r1
   1f4c8:	mov	r0, r4
   1f4cc:	sub	sp, fp, #28
   1f4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4d4:	b	1f308 <__assert_fail@plt+0xdb94>
   1f4d8:	ldr	r0, [r4, #116]	; 0x74
   1f4dc:	bl	13c04 <__assert_fail@plt+0x2490>
   1f4e0:	mov	r0, #12
   1f4e4:	b	1f3e4 <__assert_fail@plt+0xdc70>
   1f4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4ec:	add	fp, sp, #28
   1f4f0:	sub	sp, sp, #84	; 0x54
   1f4f4:	ldr	r9, [r0, #84]	; 0x54
   1f4f8:	mov	r6, r3
   1f4fc:	mov	r3, r1
   1f500:	mov	r1, #0
   1f504:	str	r0, [sp, #44]	; 0x2c
   1f508:	ldr	sl, [fp, #12]
   1f50c:	mov	r8, r2
   1f510:	str	r1, [fp, #-52]	; 0xffffffcc
   1f514:	ldr	r0, [r0, #120]	; 0x78
   1f518:	ldr	r5, [r3, #4]
   1f51c:	ldr	r1, [r9]
   1f520:	str	r9, [sp, #20]
   1f524:	add	r0, r0, sl
   1f528:	cmp	r5, r0
   1f52c:	ldr	r1, [r1, r2, lsl #3]
   1f530:	str	r1, [sp, #24]
   1f534:	ble	1fa08 <__assert_fail@plt+0xe294>
   1f538:	add	r4, r3, #8
   1f53c:	ldr	r0, [sp, #44]	; 0x2c
   1f540:	ldr	r5, [r3]
   1f544:	ldr	r4, [r4]
   1f548:	str	r3, [sp, #16]
   1f54c:	ldr	r1, [r0, #40]	; 0x28
   1f550:	ldr	r2, [r0, #88]	; 0x58
   1f554:	cmp	r5, #0
   1f558:	moveq	r5, r6
   1f55c:	str	r1, [sp, #12]
   1f560:	ldr	r1, [r0, #100]	; 0x64
   1f564:	str	r4, [r0, #100]	; 0x64
   1f568:	str	r5, [r0, #40]	; 0x28
   1f56c:	str	r1, [sp, #8]
   1f570:	sub	r1, r5, #1
   1f574:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1f578:	mov	r7, r0
   1f57c:	cmp	r5, r6
   1f580:	bne	1f64c <__assert_fail@plt+0xded8>
   1f584:	mov	r0, #1
   1f588:	str	r0, [sp, #52]	; 0x34
   1f58c:	str	r0, [sp, #48]	; 0x30
   1f590:	mov	r0, #4
   1f594:	bl	23be4 <__assert_fail@plt+0x12470>
   1f598:	cmp	r0, #0
   1f59c:	str	r0, [sp, #56]	; 0x38
   1f5a0:	beq	1fa8c <__assert_fail@plt+0xe318>
   1f5a4:	ldr	r6, [sp, #24]
   1f5a8:	ldr	r4, [fp, #16]
   1f5ac:	str	r8, [r0]
   1f5b0:	mov	r0, #0
   1f5b4:	add	r1, sp, #48	; 0x30
   1f5b8:	str	r7, [sp, #40]	; 0x28
   1f5bc:	str	r0, [fp, #-52]	; 0xffffffcc
   1f5c0:	mov	r0, r9
   1f5c4:	mov	r2, r6
   1f5c8:	mov	r3, r4
   1f5cc:	bl	1faac <__assert_fail@plt+0xe338>
   1f5d0:	ldr	r8, [sp, #44]	; 0x2c
   1f5d4:	cmp	r0, #0
   1f5d8:	str	r0, [fp, #-52]	; 0xffffffcc
   1f5dc:	bne	1fa7c <__assert_fail@plt+0xe308>
   1f5e0:	ldr	r0, [sp, #52]	; 0x34
   1f5e4:	cmp	r0, #0
   1f5e8:	beq	1f610 <__assert_fail@plt+0xde9c>
   1f5ec:	add	r1, sp, #48	; 0x30
   1f5f0:	mov	r0, r8
   1f5f4:	mov	r2, r5
   1f5f8:	mov	r3, r6
   1f5fc:	str	r4, [sp]
   1f600:	bl	1fbe4 <__assert_fail@plt+0xe470>
   1f604:	cmp	r0, #0
   1f608:	str	r0, [fp, #-52]	; 0xffffffcc
   1f60c:	bne	1fa7c <__assert_fail@plt+0xe308>
   1f610:	ldr	r3, [sp, #40]	; 0x28
   1f614:	sub	r0, fp, #52	; 0x34
   1f618:	add	r2, sp, #48	; 0x30
   1f61c:	mov	r1, r9
   1f620:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1f624:	mov	r6, r0
   1f628:	cmp	r0, #0
   1f62c:	bne	1f63c <__assert_fail@plt+0xdec8>
   1f630:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f634:	cmp	r0, #0
   1f638:	bne	1f9f8 <__assert_fail@plt+0xe284>
   1f63c:	ldr	r0, [r8, #100]	; 0x64
   1f640:	mov	r4, r5
   1f644:	str	r6, [r0, r5, lsl #2]
   1f648:	b	1f6c0 <__assert_fail@plt+0xdf4c>
   1f64c:	ldr	r6, [r4, r5, lsl #2]
   1f650:	mov	r4, r5
   1f654:	cmp	r6, #0
   1f658:	beq	1f680 <__assert_fail@plt+0xdf0c>
   1f65c:	ldrb	r0, [r6, #52]	; 0x34
   1f660:	ldr	r8, [sp, #44]	; 0x2c
   1f664:	tst	r0, #64	; 0x40
   1f668:	bne	1f698 <__assert_fail@plt+0xdf24>
   1f66c:	mov	r0, #0
   1f670:	str	r0, [sp, #52]	; 0x34
   1f674:	str	r0, [sp, #48]	; 0x30
   1f678:	str	r0, [sp, #56]	; 0x38
   1f67c:	b	1f6c0 <__assert_fail@plt+0xdf4c>
   1f680:	ldr	r8, [sp, #44]	; 0x2c
   1f684:	mov	r6, #0
   1f688:	str	r6, [sp, #52]	; 0x34
   1f68c:	str	r6, [sp, #48]	; 0x30
   1f690:	str	r6, [sp, #56]	; 0x38
   1f694:	b	1f6c0 <__assert_fail@plt+0xdf4c>
   1f698:	add	r1, r6, #4
   1f69c:	add	r0, sp, #48	; 0x30
   1f6a0:	str	r7, [sp, #40]	; 0x28
   1f6a4:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   1f6a8:	cmp	r0, #0
   1f6ac:	str	r0, [fp, #-52]	; 0xffffffcc
   1f6b0:	bne	1faa4 <__assert_fail@plt+0xe330>
   1f6b4:	ldrb	r0, [r6, #52]	; 0x34
   1f6b8:	tst	r0, #64	; 0x40
   1f6bc:	bne	1f9c8 <__assert_fail@plt+0xe254>
   1f6c0:	cmp	r4, sl
   1f6c4:	bge	1f964 <__assert_fail@plt+0xe1f0>
   1f6c8:	add	r5, sp, #48	; 0x30
   1f6cc:	mov	r2, #0
   1f6d0:	ldr	r0, [r8, #120]	; 0x78
   1f6d4:	cmp	r2, r0
   1f6d8:	bgt	1f964 <__assert_fail@plt+0xe1f0>
   1f6dc:	mov	r0, #0
   1f6e0:	add	r1, r4, #1
   1f6e4:	str	r2, [sp, #28]
   1f6e8:	str	r0, [sp, #52]	; 0x34
   1f6ec:	str	r1, [sp, #32]
   1f6f0:	ldr	r0, [r8, #100]	; 0x64
   1f6f4:	ldr	r0, [r0, r1, lsl #2]
   1f6f8:	cmp	r0, #0
   1f6fc:	beq	1f718 <__assert_fail@plt+0xdfa4>
   1f700:	add	r1, r0, #4
   1f704:	mov	r0, r5
   1f708:	bl	1d440 <__assert_fail@plt+0xbccc>
   1f70c:	cmp	r0, #0
   1f710:	str	r0, [fp, #-52]	; 0xffffffcc
   1f714:	bne	1f9f8 <__assert_fail@plt+0xe284>
   1f718:	cmp	r6, #0
   1f71c:	beq	1f898 <__assert_fail@plt+0xe124>
   1f720:	mov	r0, #0
   1f724:	ldr	r7, [r8, #84]	; 0x54
   1f728:	str	r0, [fp, #-32]	; 0xffffffe0
   1f72c:	str	r0, [fp, #-44]	; 0xffffffd4
   1f730:	str	r0, [fp, #-48]	; 0xffffffd0
   1f734:	str	r0, [fp, #-40]	; 0xffffffd8
   1f738:	ldr	r1, [r6, #20]
   1f73c:	cmp	r1, #1
   1f740:	blt	1f888 <__assert_fail@plt+0xe114>
   1f744:	mov	r5, #0
   1f748:	str	r4, [sp, #40]	; 0x28
   1f74c:	str	r6, [sp, #36]	; 0x24
   1f750:	b	1f75c <__assert_fail@plt+0xdfe8>
   1f754:	ldr	r0, [r7]
   1f758:	b	1f778 <__assert_fail@plt+0xe004>
   1f75c:	ldr	r0, [r6, #24]
   1f760:	ldr	sl, [r0, r5, lsl #2]
   1f764:	ldr	r0, [r7]
   1f768:	add	r1, r0, sl, lsl #3
   1f76c:	ldrb	r1, [r1, #6]
   1f770:	tst	r1, #16
   1f774:	bne	1f794 <__assert_fail@plt+0xe020>
   1f778:	add	r1, r0, sl, lsl #3
   1f77c:	mov	r0, r8
   1f780:	mov	r2, r4
   1f784:	bl	204b8 <__assert_fail@plt+0xed44>
   1f788:	cmp	r0, #0
   1f78c:	bne	1f850 <__assert_fail@plt+0xe0dc>
   1f790:	b	1f868 <__assert_fail@plt+0xe0f4>
   1f794:	mov	r0, r7
   1f798:	mov	r1, sl
   1f79c:	mov	r2, r8
   1f7a0:	mov	r3, r4
   1f7a4:	bl	201c8 <__assert_fail@plt+0xea54>
   1f7a8:	cmp	r0, #2
   1f7ac:	blt	1f848 <__assert_fail@plt+0xe0d4>
   1f7b0:	add	r4, r0, r4
   1f7b4:	ldr	r0, [r8, #100]	; 0x64
   1f7b8:	ldr	r1, [r7, #12]
   1f7bc:	sub	r8, fp, #48	; 0x30
   1f7c0:	ldr	r0, [r0, r4, lsl #2]
   1f7c4:	ldr	r6, [r1, sl, lsl #2]
   1f7c8:	mov	r1, #0
   1f7cc:	str	r1, [fp, #-44]	; 0xffffffd4
   1f7d0:	cmp	r0, #0
   1f7d4:	beq	1f7f0 <__assert_fail@plt+0xe07c>
   1f7d8:	add	r1, r0, #4
   1f7dc:	mov	r0, r8
   1f7e0:	bl	1d440 <__assert_fail@plt+0xbccc>
   1f7e4:	cmp	r0, #0
   1f7e8:	str	r0, [fp, #-32]	; 0xffffffe0
   1f7ec:	bne	1f9e8 <__assert_fail@plt+0xe274>
   1f7f0:	mov	r0, r8
   1f7f4:	mov	r1, r6
   1f7f8:	bl	1d654 <__assert_fail@plt+0xbee0>
   1f7fc:	cmp	r0, #0
   1f800:	beq	1f9d8 <__assert_fail@plt+0xe264>
   1f804:	sub	r0, fp, #32
   1f808:	mov	r1, r7
   1f80c:	mov	r2, r8
   1f810:	bl	1ffcc <__assert_fail@plt+0xe858>
   1f814:	ldr	r8, [sp, #44]	; 0x2c
   1f818:	ldr	r6, [sp, #36]	; 0x24
   1f81c:	ldr	r1, [r8, #100]	; 0x64
   1f820:	str	r0, [r1, r4, lsl #2]
   1f824:	ldr	r0, [r8, #100]	; 0x64
   1f828:	ldr	r0, [r0, r4, lsl #2]
   1f82c:	ldr	r4, [sp, #40]	; 0x28
   1f830:	cmp	r0, #0
   1f834:	bne	1f850 <__assert_fail@plt+0xe0dc>
   1f838:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1f83c:	cmp	r9, #0
   1f840:	beq	1f850 <__assert_fail@plt+0xe0dc>
   1f844:	b	1f9ec <__assert_fail@plt+0xe278>
   1f848:	cmp	r0, #0
   1f84c:	beq	1f754 <__assert_fail@plt+0xdfe0>
   1f850:	ldr	r0, [r7, #12]
   1f854:	ldr	r1, [r0, sl, lsl #2]
   1f858:	add	r0, sp, #48	; 0x30
   1f85c:	bl	1d654 <__assert_fail@plt+0xbee0>
   1f860:	cmp	r0, #0
   1f864:	beq	1f9d8 <__assert_fail@plt+0xe264>
   1f868:	ldr	r0, [r6, #20]
   1f86c:	add	r5, r5, #1
   1f870:	cmp	r5, r0
   1f874:	blt	1f75c <__assert_fail@plt+0xdfe8>
   1f878:	ldr	r5, [fp, #12]
   1f87c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f880:	ldr	r9, [sp, #20]
   1f884:	mov	sl, r5
   1f888:	bl	13c04 <__assert_fail@plt+0x2490>
   1f88c:	mov	r0, #0
   1f890:	add	r5, sp, #48	; 0x30
   1f894:	str	r0, [fp, #-52]	; 0xffffffcc
   1f898:	ldr	r0, [sp, #52]	; 0x34
   1f89c:	cmp	r0, #0
   1f8a0:	beq	1f8f8 <__assert_fail@plt+0xe184>
   1f8a4:	mov	r6, r4
   1f8a8:	ldr	r4, [sp, #24]
   1f8ac:	ldr	r7, [fp, #16]
   1f8b0:	mov	r0, r9
   1f8b4:	mov	r1, r5
   1f8b8:	mov	r2, r4
   1f8bc:	mov	r3, r7
   1f8c0:	bl	1faac <__assert_fail@plt+0xe338>
   1f8c4:	cmp	r0, #0
   1f8c8:	str	r0, [fp, #-52]	; 0xffffffcc
   1f8cc:	bne	1f9f8 <__assert_fail@plt+0xe284>
   1f8d0:	ldr	r2, [sp, #32]
   1f8d4:	mov	r0, r8
   1f8d8:	mov	r1, r5
   1f8dc:	mov	r3, r4
   1f8e0:	str	r7, [sp]
   1f8e4:	bl	1fbe4 <__assert_fail@plt+0xe470>
   1f8e8:	cmp	r0, #0
   1f8ec:	mov	r4, r6
   1f8f0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f8f4:	bne	1f9f8 <__assert_fail@plt+0xe284>
   1f8f8:	ldr	r2, [r8, #88]	; 0x58
   1f8fc:	mov	r0, r8
   1f900:	mov	r1, r4
   1f904:	bl	1e540 <__assert_fail@plt+0xcdcc>
   1f908:	mov	r3, r0
   1f90c:	sub	r0, fp, #52	; 0x34
   1f910:	mov	r1, r9
   1f914:	mov	r2, r5
   1f918:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   1f91c:	mov	r6, r0
   1f920:	cmp	r0, #0
   1f924:	bne	1f934 <__assert_fail@plt+0xe1c0>
   1f928:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f92c:	cmp	r0, #0
   1f930:	bne	1f9f8 <__assert_fail@plt+0xe284>
   1f934:	ldr	r1, [sp, #32]
   1f938:	ldr	r0, [r8, #100]	; 0x64
   1f93c:	ldr	r2, [sp, #28]
   1f940:	cmp	r6, #0
   1f944:	str	r6, [r0, r1, lsl #2]
   1f948:	mov	r0, #0
   1f94c:	mov	r4, r1
   1f950:	addeq	r0, r2, #1
   1f954:	cmp	r1, sl
   1f958:	mov	r2, r0
   1f95c:	blt	1f6d0 <__assert_fail@plt+0xdf5c>
   1f960:	b	1f968 <__assert_fail@plt+0xe1f4>
   1f964:	mov	r1, r4
   1f968:	ldr	r0, [sp, #56]	; 0x38
   1f96c:	mov	r4, r1
   1f970:	bl	13c04 <__assert_fail@plt+0x2490>
   1f974:	ldr	r0, [r8, #100]	; 0x64
   1f978:	ldr	r1, [sp, #16]
   1f97c:	ldr	r0, [r0, sl, lsl #2]
   1f980:	str	r4, [r1]
   1f984:	ldr	r1, [sp, #12]
   1f988:	str	r1, [r8, #40]	; 0x28
   1f98c:	ldr	r1, [sp, #8]
   1f990:	cmp	r0, #0
   1f994:	str	r1, [r8, #100]	; 0x64
   1f998:	beq	1f9b8 <__assert_fail@plt+0xe244>
   1f99c:	ldr	r1, [fp, #8]
   1f9a0:	add	r0, r0, #4
   1f9a4:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1f9a8:	mov	r7, #0
   1f9ac:	cmp	r0, #0
   1f9b0:	moveq	r7, #1
   1f9b4:	b	1f9bc <__assert_fail@plt+0xe248>
   1f9b8:	mov	r7, #1
   1f9bc:	mov	r0, r7
   1f9c0:	sub	sp, fp, #28
   1f9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9c8:	mov	r5, r4
   1f9cc:	ldr	r6, [sp, #24]
   1f9d0:	ldr	r4, [fp, #16]
   1f9d4:	b	1f5e0 <__assert_fail@plt+0xde6c>
   1f9d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f9dc:	bl	13c04 <__assert_fail@plt+0x2490>
   1f9e0:	mov	r9, #12
   1f9e4:	b	1f9f4 <__assert_fail@plt+0xe280>
   1f9e8:	mov	r9, r0
   1f9ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f9f0:	bl	13c04 <__assert_fail@plt+0x2490>
   1f9f4:	str	r9, [fp, #-52]	; 0xffffffcc
   1f9f8:	ldr	r0, [sp, #56]	; 0x38
   1f9fc:	bl	13c04 <__assert_fail@plt+0x2490>
   1fa00:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1fa04:	b	1f9bc <__assert_fail@plt+0xe248>
   1fa08:	mvn	r1, #-2147483648	; 0x80000000
   1fa0c:	mov	r7, #12
   1fa10:	sub	r1, r1, r5
   1fa14:	cmp	r1, r0
   1fa18:	ble	1f9bc <__assert_fail@plt+0xe248>
   1fa1c:	add	r0, r0, #1
   1fa20:	add	sl, r0, r5
   1fa24:	str	r0, [sp, #40]	; 0x28
   1fa28:	cmn	sl, #-1073741823	; 0xc0000001
   1fa2c:	bhi	1f9bc <__assert_fail@plt+0xe248>
   1fa30:	mov	r4, r3
   1fa34:	lsl	r1, sl, #2
   1fa38:	mov	r9, r3
   1fa3c:	ldr	r0, [r4, #8]!
   1fa40:	bl	23c14 <__assert_fail@plt+0x124a0>
   1fa44:	cmp	r0, #0
   1fa48:	beq	1f9bc <__assert_fail@plt+0xe248>
   1fa4c:	ldr	r1, [sp, #40]	; 0x28
   1fa50:	str	sl, [r9, #4]
   1fa54:	str	r0, [r9, #8]
   1fa58:	add	r0, r0, r5, lsl #2
   1fa5c:	lsl	r2, r1, #2
   1fa60:	mov	r1, #0
   1fa64:	bl	11660 <memset@plt>
   1fa68:	ldr	r5, [fp, #12]
   1fa6c:	mov	r3, r9
   1fa70:	ldr	r9, [sp, #20]
   1fa74:	mov	sl, r5
   1fa78:	b	1f53c <__assert_fail@plt+0xddc8>
   1fa7c:	mov	r7, r0
   1fa80:	ldr	r0, [sp, #56]	; 0x38
   1fa84:	bl	13c04 <__assert_fail@plt+0x2490>
   1fa88:	b	1f9bc <__assert_fail@plt+0xe248>
   1fa8c:	mov	r0, #0
   1fa90:	mov	r7, #12
   1fa94:	str	r0, [sp, #48]	; 0x30
   1fa98:	str	r0, [sp, #52]	; 0x34
   1fa9c:	str	r7, [fp, #-52]	; 0xffffffcc
   1faa0:	b	1f9bc <__assert_fail@plt+0xe248>
   1faa4:	mov	r7, r0
   1faa8:	b	1f9bc <__assert_fail@plt+0xe248>
   1faac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fab0:	add	fp, sp, #28
   1fab4:	sub	sp, sp, #28
   1fab8:	str	r0, [sp, #12]
   1fabc:	ldr	r0, [r1, #4]
   1fac0:	mov	r4, r1
   1fac4:	mov	r1, #0
   1fac8:	mov	sl, r3
   1facc:	mov	r8, r2
   1fad0:	str	r1, [sp, #20]
   1fad4:	str	r0, [sp, #16]
   1fad8:	lsl	r0, r0, #2
   1fadc:	bl	23be4 <__assert_fail@plt+0x12470>
   1fae0:	cmp	r0, #0
   1fae4:	str	r0, [sp, #24]
   1fae8:	beq	1fbdc <__assert_fail@plt+0xe468>
   1faec:	ldr	r0, [r4, #4]
   1faf0:	cmp	r0, #1
   1faf4:	blt	1fba4 <__assert_fail@plt+0xe430>
   1faf8:	mov	r9, #0
   1fafc:	str	r4, [sp, #8]
   1fb00:	b	1fb24 <__assert_fail@plt+0xe3b0>
   1fb04:	cmn	r4, #1
   1fb08:	beq	1fb80 <__assert_fail@plt+0xe40c>
   1fb0c:	ldr	r0, [sp, #12]
   1fb10:	add	r1, sp, #16
   1fb14:	mov	r3, r8
   1fb18:	str	sl, [sp]
   1fb1c:	bl	1fec8 <__assert_fail@plt+0xe754>
   1fb20:	b	1fb88 <__assert_fail@plt+0xe414>
   1fb24:	ldr	r0, [r4, #8]
   1fb28:	ldr	r1, [sp, #12]
   1fb2c:	ldr	r2, [r0, r9, lsl #2]
   1fb30:	ldr	r1, [r1, #24]
   1fb34:	add	r0, r2, r2, lsl #1
   1fb38:	add	r1, r1, r0, lsl #2
   1fb3c:	ldr	r0, [r1, #4]
   1fb40:	cmp	r0, #1
   1fb44:	blt	1fb80 <__assert_fail@plt+0xe40c>
   1fb48:	ldr	r7, [sp, #12]
   1fb4c:	ldr	r3, [r1, #8]
   1fb50:	mov	r6, #0
   1fb54:	ldr	r7, [r7]
   1fb58:	ldr	r4, [r3, r6, lsl #2]
   1fb5c:	add	r5, r7, r4, lsl #3
   1fb60:	ldrb	r5, [r5, #4]
   1fb64:	cmp	r5, sl
   1fb68:	ldreq	r5, [r7, r4, lsl #3]
   1fb6c:	cmpeq	r5, r8
   1fb70:	beq	1fb04 <__assert_fail@plt+0xe390>
   1fb74:	add	r6, r6, #1
   1fb78:	cmp	r6, r0
   1fb7c:	blt	1fb58 <__assert_fail@plt+0xe3e4>
   1fb80:	add	r0, sp, #16
   1fb84:	bl	1d440 <__assert_fail@plt+0xbccc>
   1fb88:	cmp	r0, #0
   1fb8c:	bne	1fbcc <__assert_fail@plt+0xe458>
   1fb90:	ldr	r4, [sp, #8]
   1fb94:	add	r9, r9, #1
   1fb98:	ldr	r0, [r4, #4]
   1fb9c:	cmp	r9, r0
   1fba0:	blt	1fb24 <__assert_fail@plt+0xe3b0>
   1fba4:	ldr	r0, [r4, #8]
   1fba8:	bl	13c04 <__assert_fail@plt+0x2490>
   1fbac:	vldr	d16, [sp, #16]
   1fbb0:	ldr	r0, [sp, #24]
   1fbb4:	mov	r7, #0
   1fbb8:	str	r0, [r4, #8]
   1fbbc:	vstr	d16, [r4]
   1fbc0:	mov	r0, r7
   1fbc4:	sub	sp, fp, #28
   1fbc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbcc:	mov	r7, r0
   1fbd0:	ldr	r0, [sp, #24]
   1fbd4:	bl	13c04 <__assert_fail@plt+0x2490>
   1fbd8:	b	1fbc0 <__assert_fail@plt+0xe44c>
   1fbdc:	mov	r7, #12
   1fbe0:	b	1fbc0 <__assert_fail@plt+0xe44c>
   1fbe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbe8:	add	fp, sp, #28
   1fbec:	sub	sp, sp, #44	; 0x2c
   1fbf0:	ldr	r6, [r0, #84]	; 0x54
   1fbf4:	mov	r4, r1
   1fbf8:	mov	r1, r2
   1fbfc:	str	r3, [sp, #4]
   1fc00:	mov	r5, r2
   1fc04:	str	r0, [sp, #24]
   1fc08:	bl	1f280 <__assert_fail@plt+0xdb0c>
   1fc0c:	cmn	r0, #1
   1fc10:	beq	1febc <__assert_fail@plt+0xe748>
   1fc14:	add	r1, r0, r0, lsl #1
   1fc18:	str	r5, [sp, #16]
   1fc1c:	str	r6, [sp, #12]
   1fc20:	str	r4, [sp, #8]
   1fc24:	str	r1, [sp]
   1fc28:	b	1fc30 <__assert_fail@plt+0xe4bc>
   1fc2c:	ldr	r1, [sp]
   1fc30:	ldr	r0, [sp, #24]
   1fc34:	ldr	r0, [r0, #116]	; 0x74
   1fc38:	add	r0, r0, r1, lsl #3
   1fc3c:	add	r0, r0, #8
   1fc40:	ldr	r7, [r0, #-8]
   1fc44:	mov	sl, r0
   1fc48:	mov	r0, r4
   1fc4c:	mov	r1, r7
   1fc50:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1fc54:	cmp	r0, #0
   1fc58:	beq	1fe20 <__assert_fail@plt+0xe6ac>
   1fc5c:	ldm	sl, {r0, r1}
   1fc60:	add	r1, r1, r5
   1fc64:	sub	r9, r1, r0
   1fc68:	cmp	r9, r5
   1fc6c:	bne	1fd14 <__assert_fail@plt+0xe5a0>
   1fc70:	ldr	r0, [r6, #20]
   1fc74:	add	r1, r7, r7, lsl #1
   1fc78:	add	r0, r0, r1, lsl #2
   1fc7c:	ldr	r0, [r0, #8]
   1fc80:	ldr	r7, [r0]
   1fc84:	mov	r0, r4
   1fc88:	mov	r1, r7
   1fc8c:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1fc90:	mov	r1, #4
   1fc94:	cmp	r0, #0
   1fc98:	bne	1fd0c <__assert_fail@plt+0xe598>
   1fc9c:	mov	r0, #1
   1fca0:	str	r0, [sp, #32]
   1fca4:	str	r0, [sp, #28]
   1fca8:	mov	r0, #4
   1fcac:	bl	23be4 <__assert_fail@plt+0x12470>
   1fcb0:	cmp	r0, #0
   1fcb4:	str	r0, [sp, #36]	; 0x24
   1fcb8:	beq	1fe34 <__assert_fail@plt+0xe6c0>
   1fcbc:	mov	r5, #0
   1fcc0:	str	r7, [r0]
   1fcc4:	ldr	r2, [sp, #4]
   1fcc8:	ldr	r3, [fp, #8]
   1fccc:	add	r7, sp, #28
   1fcd0:	mov	r0, r6
   1fcd4:	str	r5, [fp, #-32]	; 0xffffffe0
   1fcd8:	mov	r1, r7
   1fcdc:	bl	1faac <__assert_fail@plt+0xe338>
   1fce0:	mov	r9, r0
   1fce4:	mov	r0, r4
   1fce8:	mov	r1, r7
   1fcec:	bl	1d440 <__assert_fail@plt+0xbccc>
   1fcf0:	mov	r8, r0
   1fcf4:	ldr	r0, [sp, #36]	; 0x24
   1fcf8:	bl	13c04 <__assert_fail@plt+0x2490>
   1fcfc:	orr	r0, r9, r5
   1fd00:	mov	r1, #2
   1fd04:	orrs	r0, r0, r8
   1fd08:	bne	1fe48 <__assert_fail@plt+0xe6d4>
   1fd0c:	ldr	r5, [sp, #16]
   1fd10:	b	1fe14 <__assert_fail@plt+0xe6a0>
   1fd14:	ldr	r0, [sp, #24]
   1fd18:	ldr	r1, [r6, #12]
   1fd1c:	ldr	r0, [r0, #100]	; 0x64
   1fd20:	ldr	r8, [r1, r7, lsl #2]
   1fd24:	ldr	r0, [r0, r9, lsl #2]
   1fd28:	cmp	r0, #0
   1fd2c:	beq	1fd54 <__assert_fail@plt+0xe5e0>
   1fd30:	add	r4, r0, #4
   1fd34:	mov	r1, r8
   1fd38:	mov	r0, r4
   1fd3c:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1fd40:	mov	r1, #4
   1fd44:	cmp	r0, #0
   1fd48:	beq	1fd84 <__assert_fail@plt+0xe610>
   1fd4c:	ldr	r6, [sp, #12]
   1fd50:	b	1fe10 <__assert_fail@plt+0xe69c>
   1fd54:	mov	r0, #1
   1fd58:	str	r0, [sp, #32]
   1fd5c:	str	r0, [sp, #28]
   1fd60:	mov	r0, #4
   1fd64:	bl	23be4 <__assert_fail@plt+0x12470>
   1fd68:	cmp	r0, #0
   1fd6c:	str	r0, [sp, #36]	; 0x24
   1fd70:	beq	1fe68 <__assert_fail@plt+0xe6f4>
   1fd74:	str	r8, [r0]
   1fd78:	mov	r0, #0
   1fd7c:	str	r0, [fp, #-32]	; 0xffffffe0
   1fd80:	b	1fdb8 <__assert_fail@plt+0xe644>
   1fd84:	add	r6, sp, #28
   1fd88:	mov	r1, r4
   1fd8c:	mov	r0, r6
   1fd90:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   1fd94:	mov	r4, r0
   1fd98:	str	r0, [fp, #-32]	; 0xffffffe0
   1fd9c:	mov	r0, r6
   1fda0:	mov	r1, r8
   1fda4:	bl	1d654 <__assert_fail@plt+0xbee0>
   1fda8:	cmp	r4, #0
   1fdac:	bne	1fe8c <__assert_fail@plt+0xe718>
   1fdb0:	cmp	r0, #0
   1fdb4:	beq	1fe8c <__assert_fail@plt+0xe718>
   1fdb8:	ldr	r6, [sp, #12]
   1fdbc:	sub	r0, fp, #32
   1fdc0:	add	r2, sp, #28
   1fdc4:	mov	r1, r6
   1fdc8:	bl	1ffcc <__assert_fail@plt+0xe858>
   1fdcc:	ldr	r4, [sp, #24]
   1fdd0:	ldr	r1, [r4, #100]	; 0x64
   1fdd4:	str	r0, [r1, r9, lsl #2]
   1fdd8:	ldr	r0, [sp, #36]	; 0x24
   1fddc:	bl	13c04 <__assert_fail@plt+0x2490>
   1fde0:	ldr	r0, [r4, #100]	; 0x64
   1fde4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fde8:	ldr	r0, [r0, r9, lsl #2]
   1fdec:	cmp	r2, #0
   1fdf0:	mov	r1, r2
   1fdf4:	movwne	r1, #1
   1fdf8:	clz	r0, r0
   1fdfc:	lsr	r0, r0, #5
   1fe00:	ands	r1, r0, r1
   1fe04:	ldr	r0, [sp, #20]
   1fe08:	movne	r0, r2
   1fe0c:	str	r0, [sp, #20]
   1fe10:	ldr	r4, [sp, #8]
   1fe14:	cmp	r1, #0
   1fe18:	cmpne	r1, #4
   1fe1c:	bne	1feac <__assert_fail@plt+0xe738>
   1fe20:	ldrb	r1, [sl, #12]
   1fe24:	add	r0, sl, #24
   1fe28:	cmp	r1, #0
   1fe2c:	bne	1fc40 <__assert_fail@plt+0xe4cc>
   1fe30:	b	1febc <__assert_fail@plt+0xe748>
   1fe34:	mov	r0, #0
   1fe38:	mov	r5, #12
   1fe3c:	str	r0, [sp, #28]
   1fe40:	str	r0, [sp, #32]
   1fe44:	b	1fcc4 <__assert_fail@plt+0xe550>
   1fe48:	cmp	r9, #0
   1fe4c:	mov	r1, #1
   1fe50:	movne	r8, r9
   1fe54:	cmp	r5, #0
   1fe58:	movne	r8, r5
   1fe5c:	str	r8, [fp, #-32]	; 0xffffffe0
   1fe60:	str	r8, [sp, #20]
   1fe64:	b	1fd0c <__assert_fail@plt+0xe598>
   1fe68:	mov	r0, #0
   1fe6c:	mov	r1, #12
   1fe70:	str	r0, [sp, #28]
   1fe74:	str	r0, [sp, #32]
   1fe78:	mov	r0, #12
   1fe7c:	str	r1, [fp, #-32]	; 0xffffffe0
   1fe80:	mov	r1, #1
   1fe84:	str	r0, [sp, #20]
   1fe88:	b	1fd4c <__assert_fail@plt+0xe5d8>
   1fe8c:	ldr	r0, [sp, #36]	; 0x24
   1fe90:	bl	13c04 <__assert_fail@plt+0x2490>
   1fe94:	cmp	r4, #0
   1fe98:	mov	r1, #1
   1fe9c:	movweq	r4, #12
   1fea0:	str	r4, [fp, #-32]	; 0xffffffe0
   1fea4:	str	r4, [sp, #20]
   1fea8:	b	1fd4c <__assert_fail@plt+0xe5d8>
   1feac:	cmp	r1, #2
   1feb0:	beq	1fc2c <__assert_fail@plt+0xe4b8>
   1feb4:	ldr	r0, [sp, #20]
   1feb8:	b	1fec0 <__assert_fail@plt+0xe74c>
   1febc:	mov	r0, #0
   1fec0:	sub	sp, fp, #28
   1fec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fec8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fecc:	add	fp, sp, #24
   1fed0:	sub	sp, sp, #8
   1fed4:	mov	r6, r0
   1fed8:	mov	r4, r1
   1fedc:	mov	r0, r1
   1fee0:	mov	r1, r2
   1fee4:	mov	r5, r3
   1fee8:	mov	r7, r2
   1feec:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1fef0:	cmp	r0, #0
   1fef4:	beq	1ff04 <__assert_fail@plt+0xe790>
   1fef8:	mov	r0, #0
   1fefc:	sub	sp, fp, #24
   1ff00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ff04:	ldr	r8, [fp, #8]
   1ff08:	ldr	r0, [r6]
   1ff0c:	add	r1, r0, r7, lsl #3
   1ff10:	ldrb	r1, [r1, #4]
   1ff14:	cmp	r1, r8
   1ff18:	ldreq	r0, [r0, r7, lsl #3]
   1ff1c:	cmpeq	r0, r5
   1ff20:	beq	1ffa8 <__assert_fail@plt+0xe834>
   1ff24:	mov	r0, r4
   1ff28:	mov	r1, r7
   1ff2c:	bl	1d654 <__assert_fail@plt+0xbee0>
   1ff30:	cmp	r0, #0
   1ff34:	beq	1ffc4 <__assert_fail@plt+0xe850>
   1ff38:	ldr	r0, [r6, #20]
   1ff3c:	add	r7, r7, r7, lsl #1
   1ff40:	add	r1, r0, r7, lsl #2
   1ff44:	ldr	r2, [r1, #4]
   1ff48:	cmp	r2, #2
   1ff4c:	beq	1ff5c <__assert_fail@plt+0xe7e8>
   1ff50:	cmp	r2, #0
   1ff54:	bne	1ff84 <__assert_fail@plt+0xe810>
   1ff58:	b	1fef8 <__assert_fail@plt+0xe784>
   1ff5c:	ldr	r0, [r1, #8]
   1ff60:	mov	r1, r4
   1ff64:	mov	r3, r5
   1ff68:	ldr	r2, [r0, #4]
   1ff6c:	mov	r0, r6
   1ff70:	str	r8, [sp]
   1ff74:	bl	1fec8 <__assert_fail@plt+0xe754>
   1ff78:	cmp	r0, #0
   1ff7c:	bne	1fefc <__assert_fail@plt+0xe788>
   1ff80:	ldr	r0, [r6, #20]
   1ff84:	add	r0, r0, r7, lsl #2
   1ff88:	ldr	r0, [r0, #8]
   1ff8c:	ldr	r7, [r0]
   1ff90:	mov	r0, r4
   1ff94:	mov	r1, r7
   1ff98:	bl	1d86c <__assert_fail@plt+0xc0f8>
   1ff9c:	cmp	r0, #0
   1ffa0:	beq	1ff08 <__assert_fail@plt+0xe794>
   1ffa4:	b	1fef8 <__assert_fail@plt+0xe784>
   1ffa8:	cmp	r8, #9
   1ffac:	bne	1fef8 <__assert_fail@plt+0xe784>
   1ffb0:	mov	r0, r4
   1ffb4:	mov	r1, r7
   1ffb8:	bl	1d654 <__assert_fail@plt+0xbee0>
   1ffbc:	cmp	r0, #0
   1ffc0:	bne	1fef8 <__assert_fail@plt+0xe784>
   1ffc4:	mov	r0, #12
   1ffc8:	b	1fefc <__assert_fail@plt+0xe788>
   1ffcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffd0:	add	fp, sp, #28
   1ffd4:	sub	sp, sp, #4
   1ffd8:	ldr	sl, [r2, #4]
   1ffdc:	cmp	sl, #0
   1ffe0:	beq	20194 <__assert_fail@plt+0xea20>
   1ffe4:	mov	r4, r2
   1ffe8:	mov	r9, r1
   1ffec:	cmp	sl, #1
   1fff0:	mov	r6, sl
   1fff4:	str	r0, [sp]
   1fff8:	blt	20018 <__assert_fail@plt+0xe8a4>
   1fffc:	ldr	r1, [r4, #8]
   20000:	mov	r2, sl
   20004:	mov	r6, sl
   20008:	ldr	r3, [r1], #4
   2000c:	subs	r2, r2, #1
   20010:	add	r6, r3, r6
   20014:	bne	20008 <__assert_fail@plt+0xe894>
   20018:	ldr	r1, [r9, #68]	; 0x44
   2001c:	ldr	r2, [r9, #32]
   20020:	and	r1, r1, r6
   20024:	add	r3, r1, r1, lsl #1
   20028:	ldr	r1, [r2, r3, lsl #2]
   2002c:	cmp	r1, #1
   20030:	blt	200a4 <__assert_fail@plt+0xe930>
   20034:	add	r2, r2, r3, lsl #2
   20038:	sub	ip, sl, #1
   2003c:	mov	r5, #0
   20040:	ldr	lr, [r2, #8]
   20044:	b	20078 <__assert_fail@plt+0xe904>
   20048:	mov	r3, ip
   2004c:	add	r2, r3, #1
   20050:	cmp	r2, #1
   20054:	blt	20188 <__assert_fail@plt+0xea14>
   20058:	ldr	r2, [r4, #8]
   2005c:	ldr	r0, [r7, #12]
   20060:	ldr	r2, [r2, r3, lsl #2]
   20064:	ldr	r0, [r0, r3, lsl #2]
   20068:	sub	r3, r3, #1
   2006c:	cmp	r0, r2
   20070:	beq	2004c <__assert_fail@plt+0xe8d8>
   20074:	b	20098 <__assert_fail@plt+0xe924>
   20078:	cmp	r4, #0
   2007c:	beq	20098 <__assert_fail@plt+0xe924>
   20080:	ldr	r7, [lr, r5, lsl #2]
   20084:	ldr	r3, [r7]
   20088:	cmp	r6, r3
   2008c:	ldreq	r3, [r7, #8]
   20090:	cmpeq	r3, sl
   20094:	beq	20048 <__assert_fail@plt+0xe8d4>
   20098:	add	r5, r5, #1
   2009c:	cmp	r5, r1
   200a0:	blt	20078 <__assert_fail@plt+0xe904>
   200a4:	mov	r0, #56	; 0x38
   200a8:	mov	r1, #1
   200ac:	bl	23b90 <__assert_fail@plt+0x1241c>
   200b0:	cmp	r0, #0
   200b4:	beq	201b4 <__assert_fail@plt+0xea40>
   200b8:	add	r5, r0, #4
   200bc:	mov	r7, r0
   200c0:	mov	r1, r4
   200c4:	mov	r0, r5
   200c8:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   200cc:	cmp	r0, #0
   200d0:	bne	201a0 <__assert_fail@plt+0xea2c>
   200d4:	str	r5, [r7, #40]	; 0x28
   200d8:	ldr	r0, [r4, #4]
   200dc:	cmp	r0, #1
   200e0:	blt	20170 <__assert_fail@plt+0xe9fc>
   200e4:	ldr	r1, [r4, #8]
   200e8:	ldr	sl, [r9]
   200ec:	movw	ip, #65280	; 0xff00
   200f0:	mov	lr, #32
   200f4:	movt	ip, #3
   200f8:	add	r5, ip, #255	; 0xff
   200fc:	ldr	r2, [r1]
   20100:	add	r3, sl, r2, lsl #3
   20104:	ldr	r2, [r3, #4]!
   20108:	and	r4, r2, r5
   2010c:	cmp	r4, #1
   20110:	beq	20164 <__assert_fail@plt+0xe9f0>
   20114:	ldrb	r8, [r7, #52]	; 0x34
   20118:	and	r4, lr, r2, lsr #15
   2011c:	uxtb	r2, r2
   20120:	cmp	r2, #12
   20124:	orr	r4, r8, r4
   20128:	strb	r4, [r7, #52]	; 0x34
   2012c:	beq	2015c <__assert_fail@plt+0xe9e8>
   20130:	cmp	r2, #4
   20134:	beq	20148 <__assert_fail@plt+0xe9d4>
   20138:	cmp	r2, #2
   2013c:	bne	20150 <__assert_fail@plt+0xe9dc>
   20140:	orr	r2, r4, #16
   20144:	b	20160 <__assert_fail@plt+0xe9ec>
   20148:	orr	r2, r4, #64	; 0x40
   2014c:	b	20160 <__assert_fail@plt+0xe9ec>
   20150:	ldr	r2, [r3]
   20154:	tst	r2, ip
   20158:	beq	20164 <__assert_fail@plt+0xe9f0>
   2015c:	orr	r2, r4, #128	; 0x80
   20160:	strb	r2, [r7, #52]	; 0x34
   20164:	add	r1, r1, #4
   20168:	subs	r0, r0, #1
   2016c:	bne	200fc <__assert_fail@plt+0xe988>
   20170:	mov	r0, r9
   20174:	mov	r1, r7
   20178:	mov	r2, r6
   2017c:	bl	1dc0c <__assert_fail@plt+0xc498>
   20180:	cmp	r0, #0
   20184:	bne	201ac <__assert_fail@plt+0xea38>
   20188:	mov	r0, r7
   2018c:	sub	sp, fp, #28
   20190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20194:	mov	r7, #0
   20198:	str	r7, [r0]
   2019c:	b	20188 <__assert_fail@plt+0xea14>
   201a0:	mov	r0, r7
   201a4:	bl	13c04 <__assert_fail@plt+0x2490>
   201a8:	b	201b4 <__assert_fail@plt+0xea40>
   201ac:	mov	r0, r7
   201b0:	bl	18d3c <__assert_fail@plt+0x75c8>
   201b4:	ldr	r1, [sp]
   201b8:	mov	r0, #12
   201bc:	mov	r7, #0
   201c0:	str	r0, [r1]
   201c4:	b	20188 <__assert_fail@plt+0xea14>
   201c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   201cc:	add	fp, sp, #24
   201d0:	ldr	lr, [r0]
   201d4:	add	r7, lr, r1, lsl #3
   201d8:	ldrb	r9, [r7, #4]
   201dc:	cmp	r9, #7
   201e0:	beq	203b0 <__assert_fail@plt+0xec3c>
   201e4:	ldr	ip, [r2, #80]	; 0x50
   201e8:	mov	r6, #1
   201ec:	cmp	ip, #1
   201f0:	beq	2022c <__assert_fail@plt+0xeab8>
   201f4:	ldr	r5, [r2, #28]
   201f8:	add	r7, r3, #1
   201fc:	cmp	r7, r5
   20200:	bge	2022c <__assert_fail@plt+0xeab8>
   20204:	ldr	r6, [r2, #8]
   20208:	add	r7, r6, r3, lsl #2
   2020c:	mov	r6, #1
   20210:	ldr	r4, [r7, r6, lsl #2]
   20214:	cmn	r4, #1
   20218:	bne	2022c <__assert_fail@plt+0xeab8>
   2021c:	add	r6, r6, #1
   20220:	add	r4, r3, r6
   20224:	cmp	r4, r5
   20228:	blt	20210 <__assert_fail@plt+0xea9c>
   2022c:	mov	r8, #0
   20230:	cmp	r9, #5
   20234:	bne	20278 <__assert_fail@plt+0xeb04>
   20238:	cmp	r6, #2
   2023c:	blt	203a0 <__assert_fail@plt+0xec2c>
   20240:	ldr	r0, [r0, #128]	; 0x80
   20244:	tst	r0, #64	; 0x40
   20248:	bne	2025c <__assert_fail@plt+0xeae8>
   2024c:	ldr	r1, [r2, #4]
   20250:	ldrb	r1, [r1, r3]
   20254:	cmp	r1, #10
   20258:	beq	203a0 <__assert_fail@plt+0xec2c>
   2025c:	tst	r0, #128	; 0x80
   20260:	beq	2039c <__assert_fail@plt+0xec28>
   20264:	ldr	r0, [r2, #4]
   20268:	ldrb	r0, [r0, r3]
   2026c:	cmp	r0, #0
   20270:	movne	r8, r6
   20274:	b	203a0 <__assert_fail@plt+0xec2c>
   20278:	cmp	r9, #6
   2027c:	bne	203a0 <__assert_fail@plt+0xec2c>
   20280:	cmp	r6, #2
   20284:	blt	203a0 <__assert_fail@plt+0xec2c>
   20288:	ldr	r7, [lr, r1, lsl #3]
   2028c:	ldr	r0, [r7, #32]
   20290:	cmp	r0, #0
   20294:	bne	202b0 <__assert_fail@plt+0xeb3c>
   20298:	ldr	r1, [r7, #36]	; 0x24
   2029c:	cmp	r1, #0
   202a0:	bne	202b0 <__assert_fail@plt+0xeb3c>
   202a4:	ldr	r1, [r7, #20]
   202a8:	cmp	r1, #0
   202ac:	beq	203a8 <__assert_fail@plt+0xec34>
   202b0:	cmp	ip, #1
   202b4:	bne	202c4 <__assert_fail@plt+0xeb50>
   202b8:	ldr	r1, [r2, #4]
   202bc:	ldrb	r5, [r1, r3]
   202c0:	b	202cc <__assert_fail@plt+0xeb58>
   202c4:	ldr	r1, [r2, #8]
   202c8:	ldr	r5, [r1, r3, lsl #2]
   202cc:	ldr	r1, [r7, #20]
   202d0:	cmp	r1, #1
   202d4:	blt	202f8 <__assert_fail@plt+0xeb84>
   202d8:	ldr	r2, [r7]
   202dc:	mov	r3, #0
   202e0:	ldr	r4, [r2, r3, lsl #2]
   202e4:	cmp	r5, r4
   202e8:	beq	20374 <__assert_fail@plt+0xec00>
   202ec:	add	r3, r3, #1
   202f0:	cmp	r3, r1
   202f4:	blt	202e0 <__assert_fail@plt+0xeb6c>
   202f8:	ldr	r1, [r7, #36]	; 0x24
   202fc:	cmp	r1, #1
   20300:	blt	20334 <__assert_fail@plt+0xebc0>
   20304:	mov	r4, #0
   20308:	ldr	r0, [r7, #12]
   2030c:	ldr	r1, [r0, r4, lsl #2]
   20310:	mov	r0, r5
   20314:	bl	11414 <iswctype@plt>
   20318:	cmp	r0, #0
   2031c:	bne	20374 <__assert_fail@plt+0xec00>
   20320:	ldr	r0, [r7, #36]	; 0x24
   20324:	add	r4, r4, #1
   20328:	cmp	r4, r0
   2032c:	blt	20308 <__assert_fail@plt+0xeb94>
   20330:	ldr	r0, [r7, #32]
   20334:	cmp	r0, #1
   20338:	blt	2036c <__assert_fail@plt+0xebf8>
   2033c:	ldr	r1, [r7, #4]
   20340:	mov	r2, #0
   20344:	ldr	r3, [r1, r2, lsl #2]
   20348:	cmp	r3, r5
   2034c:	bhi	20360 <__assert_fail@plt+0xebec>
   20350:	ldr	r3, [r7, #8]
   20354:	ldr	r3, [r3, r2, lsl #2]
   20358:	cmp	r5, r3
   2035c:	bls	20374 <__assert_fail@plt+0xec00>
   20360:	add	r2, r2, #1
   20364:	cmp	r2, r0
   20368:	blt	20344 <__assert_fail@plt+0xebd0>
   2036c:	mov	r0, #0
   20370:	b	20378 <__assert_fail@plt+0xec04>
   20374:	mov	r0, r6
   20378:	ldrb	r1, [r7, #16]
   2037c:	tst	r1, #1
   20380:	bne	2038c <__assert_fail@plt+0xec18>
   20384:	mov	r8, r0
   20388:	b	203a0 <__assert_fail@plt+0xec2c>
   2038c:	cmp	r0, #0
   20390:	bgt	203a0 <__assert_fail@plt+0xec2c>
   20394:	cmp	r6, #1
   20398:	movle	r6, #1
   2039c:	mov	r8, r6
   203a0:	mov	r0, r8
   203a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   203a8:	mov	r5, #0
   203ac:	b	202cc <__assert_fail@plt+0xeb58>
   203b0:	ldr	r0, [r2, #4]
   203b4:	mov	r8, #0
   203b8:	ldrb	r6, [r0, r3]
   203bc:	cmp	r6, #194	; 0xc2
   203c0:	bcc	203a0 <__assert_fail@plt+0xec2c>
   203c4:	ldr	r1, [r2, #48]	; 0x30
   203c8:	add	r2, r3, #2
   203cc:	cmp	r2, r1
   203d0:	bgt	203a0 <__assert_fail@plt+0xec2c>
   203d4:	add	r0, r0, r3
   203d8:	cmp	r6, #223	; 0xdf
   203dc:	ldrb	r7, [r0, #1]
   203e0:	bhi	20400 <__assert_fail@plt+0xec8c>
   203e4:	mov	r8, #2
   203e8:	cmp	r7, #191	; 0xbf
   203ec:	sxtb	r0, r7
   203f0:	movwhi	r8, #0
   203f4:	cmn	r0, #1
   203f8:	movwgt	r8, #0
   203fc:	b	203a0 <__assert_fail@plt+0xec2c>
   20400:	cmp	r6, #239	; 0xef
   20404:	bhi	20420 <__assert_fail@plt+0xecac>
   20408:	mov	r2, #3
   2040c:	cmp	r6, #224	; 0xe0
   20410:	bne	2047c <__assert_fail@plt+0xed08>
   20414:	cmp	r7, #160	; 0xa0
   20418:	bcc	203a0 <__assert_fail@plt+0xec2c>
   2041c:	b	2047c <__assert_fail@plt+0xed08>
   20420:	cmp	r6, #247	; 0xf7
   20424:	bhi	20440 <__assert_fail@plt+0xeccc>
   20428:	mov	r2, #4
   2042c:	cmp	r6, #240	; 0xf0
   20430:	bne	2047c <__assert_fail@plt+0xed08>
   20434:	cmp	r7, #144	; 0x90
   20438:	bcc	203a0 <__assert_fail@plt+0xec2c>
   2043c:	b	2047c <__assert_fail@plt+0xed08>
   20440:	cmp	r6, #251	; 0xfb
   20444:	bhi	20460 <__assert_fail@plt+0xecec>
   20448:	mov	r2, #5
   2044c:	cmp	r6, #248	; 0xf8
   20450:	bne	2047c <__assert_fail@plt+0xed08>
   20454:	cmp	r7, #136	; 0x88
   20458:	bcc	203a0 <__assert_fail@plt+0xec2c>
   2045c:	b	2047c <__assert_fail@plt+0xed08>
   20460:	cmp	r6, #253	; 0xfd
   20464:	bhi	203a0 <__assert_fail@plt+0xec2c>
   20468:	mov	r2, #6
   2046c:	cmp	r6, #252	; 0xfc
   20470:	bne	2047c <__assert_fail@plt+0xed08>
   20474:	cmp	r7, #132	; 0x84
   20478:	bcc	203a0 <__assert_fail@plt+0xec2c>
   2047c:	add	r3, r2, r3
   20480:	cmp	r3, r1
   20484:	bgt	203a0 <__assert_fail@plt+0xec2c>
   20488:	mov	r1, #1
   2048c:	ldrb	r3, [r0, r1]
   20490:	sxtb	r7, r3
   20494:	cmn	r7, #1
   20498:	bgt	203a0 <__assert_fail@plt+0xec2c>
   2049c:	cmp	r3, #191	; 0xbf
   204a0:	bhi	203a0 <__assert_fail@plt+0xec2c>
   204a4:	add	r1, r1, #1
   204a8:	cmp	r1, r2
   204ac:	bcc	2048c <__assert_fail@plt+0xed18>
   204b0:	mov	r8, r2
   204b4:	b	203a0 <__assert_fail@plt+0xec2c>
   204b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   204bc:	add	fp, sp, #24
   204c0:	ldr	r5, [r1, #4]
   204c4:	mvn	r3, #0
   204c8:	mov	r8, #0
   204cc:	uxtab	r4, r3, r5
   204d0:	cmp	r4, #6
   204d4:	bhi	205e4 <__assert_fail@plt+0xee70>
   204d8:	ldr	r3, [r0, #4]
   204dc:	ldrb	r3, [r3, r2]
   204e0:	add	r7, pc, #4
   204e4:	sxtb	r6, r3
   204e8:	ldr	pc, [r7, r4, lsl #2]
   204ec:	andeq	r0, r2, r8, lsl #10
   204f0:	andeq	r0, r2, r4, ror #11
   204f4:	andeq	r0, r2, ip, lsl r5
   204f8:	andeq	r0, r2, r4, ror #11
   204fc:	andeq	r0, r2, r4, asr #10
   20500:	andeq	r0, r2, r4, ror #11
   20504:	andeq	r0, r2, ip, lsr r5
   20508:	ldrb	r1, [r1]
   2050c:	uxtb	r3, r6
   20510:	cmp	r1, r3
   20514:	beq	20578 <__assert_fail@plt+0xee04>
   20518:	b	205e4 <__assert_fail@plt+0xee70>
   2051c:	ldr	r1, [r1]
   20520:	ubfx	r7, r3, #5, #3
   20524:	and	r3, r3, #31
   20528:	ldr	r1, [r1, r7, lsl #2]
   2052c:	mov	r7, #1
   20530:	tst	r1, r7, lsl r3
   20534:	bne	20578 <__assert_fail@plt+0xee04>
   20538:	b	205e4 <__assert_fail@plt+0xee70>
   2053c:	cmp	r6, #0
   20540:	blt	205e4 <__assert_fail@plt+0xee70>
   20544:	cmp	r3, #0
   20548:	beq	20568 <__assert_fail@plt+0xedf4>
   2054c:	cmp	r3, #10
   20550:	bne	20578 <__assert_fail@plt+0xee04>
   20554:	ldr	r1, [r0, #84]	; 0x54
   20558:	ldrb	r1, [r1, #128]	; 0x80
   2055c:	tst	r1, #64	; 0x40
   20560:	bne	20578 <__assert_fail@plt+0xee04>
   20564:	b	205e4 <__assert_fail@plt+0xee70>
   20568:	ldr	r1, [r0, #84]	; 0x54
   2056c:	ldrb	r1, [r1, #128]	; 0x80
   20570:	tst	r1, #128	; 0x80
   20574:	bne	205e4 <__assert_fail@plt+0xee70>
   20578:	movw	r1, #65280	; 0xff00
   2057c:	movt	r1, #3
   20580:	tst	r5, r1
   20584:	beq	205e0 <__assert_fail@plt+0xee6c>
   20588:	ldr	r3, [r0, #88]	; 0x58
   2058c:	mov	r1, r2
   20590:	mov	r2, r3
   20594:	bl	1e540 <__assert_fail@plt+0xcdcc>
   20598:	and	r1, r0, #1
   2059c:	tst	r5, #1024	; 0x400
   205a0:	beq	205ac <__assert_fail@plt+0xee38>
   205a4:	cmp	r1, #0
   205a8:	beq	205e4 <__assert_fail@plt+0xee70>
   205ac:	tst	r5, #2048	; 0x800
   205b0:	cmpne	r1, #0
   205b4:	bne	205e4 <__assert_fail@plt+0xee70>
   205b8:	tst	r5, #8192	; 0x2000
   205bc:	beq	205c8 <__assert_fail@plt+0xee54>
   205c0:	ands	r1, r0, #2
   205c4:	beq	205e4 <__assert_fail@plt+0xee70>
   205c8:	and	r1, r5, #32768	; 0x8000
   205cc:	mov	r2, #1
   205d0:	and	r0, r0, #8
   205d4:	eor	r1, r2, r1, lsr #15
   205d8:	orr	r0, r1, r0, lsr #3
   205dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   205e0:	mov	r8, #1
   205e4:	mov	r0, r8
   205e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   205ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205f0:	add	fp, sp, #28
   205f4:	sub	sp, sp, #4
   205f8:	vpush	{d8-d11}
   205fc:	sub	sp, sp, #2128	; 0x850
   20600:	sub	sp, sp, #12288	; 0x3000
   20604:	sub	lr, fp, #1024	; 0x400
   20608:	mov	r8, #0
   2060c:	vmov.i32	q4, #0	; 0x00000000
   20610:	sub	r4, lr, #72	; 0x48
   20614:	str	r8, [r1, #44]	; 0x2c
   20618:	str	r8, [r1, #48]	; 0x30
   2061c:	mov	r2, r4
   20620:	vst1.64	{d8-d9}, [r2]!
   20624:	vst1.64	{d8-d9}, [r2]
   20628:	ldr	r2, [r1, #8]
   2062c:	cmp	r2, #1
   20630:	blt	20fe4 <__assert_fail@plt+0xf870>
   20634:	sub	lr, fp, #2048	; 0x800
   20638:	add	sl, r0, #96	; 0x60
   2063c:	mov	r3, #0
   20640:	mov	r8, #0
   20644:	str	r1, [sp, #12]
   20648:	str	r0, [sp, #20]
   2064c:	sub	r9, lr, #72	; 0x48
   20650:	str	sl, [sp]
   20654:	ldr	r2, [r1, #12]
   20658:	ldr	r5, [r0]
   2065c:	str	r3, [sp, #16]
   20660:	ldr	r6, [r2, r3, lsl #2]
   20664:	add	r2, r5, r6, lsl #3
   20668:	ldr	r7, [r2, #4]
   2066c:	uxtb	ip, r7
   20670:	cmp	ip, #1
   20674:	bne	2074c <__assert_fail@plt+0xefd8>
   20678:	ldrb	r0, [r5, r6, lsl #3]
   2067c:	mov	r3, #1
   20680:	ubfx	r1, r0, #5, #3
   20684:	and	r0, r0, #31
   20688:	ldr	r2, [r4, r1, lsl #2]
   2068c:	orr	r0, r2, r3, lsl r0
   20690:	str	r0, [r4, r1, lsl #2]
   20694:	movw	r0, #65280	; 0xff00
   20698:	sub	lr, fp, #3072	; 0xc00
   2069c:	movt	r0, #3
   206a0:	sub	r3, lr, #72	; 0x48
   206a4:	ands	r0, r7, r0
   206a8:	beq	20980 <__assert_fail@plt+0xf20c>
   206ac:	tst	r7, #8192	; 0x2000
   206b0:	beq	206d4 <__assert_fail@plt+0xef60>
   206b4:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   206b8:	mov	r1, r4
   206bc:	vst1.64	{d8-d9}, [r1]!
   206c0:	vst1.64	{d8-d9}, [r1]
   206c4:	tst	r0, #1024	; 0x400
   206c8:	beq	208d4 <__assert_fail@plt+0xf160>
   206cc:	mov	r0, #1024	; 0x400
   206d0:	str	r0, [fp, #-1096]	; 0xfffffbb8
   206d4:	tst	r7, #32768	; 0x8000
   206d8:	bne	208c8 <__assert_fail@plt+0xf154>
   206dc:	tst	r7, #1024	; 0x400
   206e0:	beq	208b0 <__assert_fail@plt+0xf13c>
   206e4:	movw	r0, #255	; 0xff
   206e8:	movt	r0, #64	; 0x40
   206ec:	and	r0, r7, r0
   206f0:	cmp	r0, #1
   206f4:	beq	208c8 <__assert_fail@plt+0xf154>
   206f8:	ldr	r1, [sp, #20]
   206fc:	vmov.i32	q8, #0	; 0x00000000
   20700:	ldr	r0, [r1, #92]	; 0x5c
   20704:	cmp	r0, #1
   20708:	ble	20860 <__assert_fail@plt+0xf0ec>
   2070c:	ldr	r0, [r1, #60]	; 0x3c
   20710:	mov	r1, #0
   20714:	add	r2, sl, r1
   20718:	add	r3, r0, r1
   2071c:	vld1.32	{d20-d21}, [r2]
   20720:	vld1.32	{d18-d19}, [r3]
   20724:	add	r2, r4, r1
   20728:	add	r1, r1, #16
   2072c:	vld1.32	{d22-d23}, [r2]
   20730:	cmp	r1, #32
   20734:	vorn	q9, q10, q9
   20738:	vand	q9, q11, q9
   2073c:	vorr	q8, q9, q8
   20740:	vst1.32	{d18-d19}, [r2]
   20744:	bne	20714 <__assert_fail@plt+0xefa0>
   20748:	b	2088c <__assert_fail@plt+0xf118>
   2074c:	cmp	ip, #7
   20750:	beq	20794 <__assert_fail@plt+0xf020>
   20754:	cmp	ip, #5
   20758:	beq	207e0 <__assert_fail@plt+0xf06c>
   2075c:	cmp	ip, #3
   20760:	bne	20be4 <__assert_fail@plt+0xf470>
   20764:	ldr	r0, [r5, r6, lsl #3]
   20768:	mov	r1, #0
   2076c:	add	r2, r4, r1
   20770:	add	r3, r0, r1
   20774:	add	r1, r1, #16
   20778:	vld1.32	{d16-d17}, [r3]
   2077c:	vld1.32	{d18-d19}, [r2]
   20780:	cmp	r1, #32
   20784:	vorr	q8, q9, q8
   20788:	vst1.32	{d16-d17}, [r2]
   2078c:	bne	2076c <__assert_fail@plt+0xeff8>
   20790:	b	20694 <__assert_fail@plt+0xef20>
   20794:	mvn	r1, #0
   20798:	str	r1, [fp, #-1084]	; 0xfffffbc4
   2079c:	str	r1, [fp, #-1088]	; 0xfffffbc0
   207a0:	str	r1, [fp, #-1092]	; 0xfffffbbc
   207a4:	str	r1, [fp, #-1096]	; 0xfffffbb8
   207a8:	ldr	r1, [r0, #128]	; 0x80
   207ac:	and	r0, r1, #128	; 0x80
   207b0:	ands	r1, r1, #64	; 0x40
   207b4:	beq	207c0 <__assert_fail@plt+0xf04c>
   207b8:	cmp	r0, #0
   207bc:	beq	20694 <__assert_fail@plt+0xef20>
   207c0:	cmp	r1, #0
   207c4:	mvn	r1, #1
   207c8:	movweq	r1, #64510	; 0xfbfe
   207cc:	movteq	r1, #65535	; 0xffff
   207d0:	cmp	r0, #0
   207d4:	mvneq	r1, #1024	; 0x400
   207d8:	str	r1, [fp, #-1096]	; 0xfffffbb8
   207dc:	b	20694 <__assert_fail@plt+0xef20>
   207e0:	ldr	r1, [r0, #92]	; 0x5c
   207e4:	cmp	r1, #2
   207e8:	blt	2081c <__assert_fail@plt+0xf0a8>
   207ec:	ldr	r0, [r0, #60]	; 0x3c
   207f0:	mov	r1, #0
   207f4:	add	r2, r4, r1
   207f8:	add	r3, r0, r1
   207fc:	add	r1, r1, #16
   20800:	vld1.32	{d16-d17}, [r3]
   20804:	vld1.32	{d18-d19}, [r2]
   20808:	cmp	r1, #32
   2080c:	vorr	q8, q9, q8
   20810:	vst1.32	{d16-d17}, [r2]
   20814:	bne	207f4 <__assert_fail@plt+0xf080>
   20818:	b	20834 <__assert_fail@plt+0xf0c0>
   2081c:	mov	r0, r4
   20820:	mov	r1, #255	; 0xff
   20824:	mov	r2, #32
   20828:	str	ip, [sp, #8]
   2082c:	bl	11660 <memset@plt>
   20830:	ldr	ip, [sp, #8]
   20834:	ldr	r0, [sp, #20]
   20838:	ldr	r0, [r0, #128]	; 0x80
   2083c:	tst	r0, #64	; 0x40
   20840:	ldreq	r1, [fp, #-1096]	; 0xfffffbb8
   20844:	biceq	r1, r1, #1024	; 0x400
   20848:	streq	r1, [fp, #-1096]	; 0xfffffbb8
   2084c:	tst	r0, #128	; 0x80
   20850:	ldrne	r0, [fp, #-1096]	; 0xfffffbb8
   20854:	bicne	r0, r0, #1
   20858:	strne	r0, [fp, #-1096]	; 0xfffffbb8
   2085c:	b	20694 <__assert_fail@plt+0xef20>
   20860:	mov	r0, #0
   20864:	add	r1, r4, r0
   20868:	add	r2, sl, r0
   2086c:	add	r0, r0, #16
   20870:	vld1.32	{d18-d19}, [r2]
   20874:	vld1.32	{d20-d21}, [r1]
   20878:	cmp	r0, #32
   2087c:	vand	q9, q10, q9
   20880:	vorr	q8, q9, q8
   20884:	vst1.32	{d18-d19}, [r1]
   20888:	bne	20864 <__assert_fail@plt+0xf0f0>
   2088c:	vext.8	q9, q8, q8, #8
   20890:	sub	lr, fp, #3072	; 0xc00
   20894:	vorr	q8, q8, q9
   20898:	sub	r3, lr, #72	; 0x48
   2089c:	vdup.32	q9, d16[1]
   208a0:	vorr	q8, q8, q9
   208a4:	vmov.32	r0, d16[0]
   208a8:	cmp	r0, #0
   208ac:	beq	208d4 <__assert_fail@plt+0xf160>
   208b0:	tst	r7, #2048	; 0x800
   208b4:	beq	20980 <__assert_fail@plt+0xf20c>
   208b8:	tst	r7, #4194304	; 0x400000
   208bc:	beq	208dc <__assert_fail@plt+0xf168>
   208c0:	cmp	ip, #1
   208c4:	bne	208dc <__assert_fail@plt+0xf168>
   208c8:	mov	r0, r4
   208cc:	vst1.64	{d8-d9}, [r0]!
   208d0:	vst1.64	{d8-d9}, [r0]
   208d4:	ldr	r1, [sp, #12]
   208d8:	b	20be4 <__assert_fail@plt+0xf470>
   208dc:	ldr	r1, [sp, #20]
   208e0:	vmov.i32	q8, #0	; 0x00000000
   208e4:	ldr	r0, [r1, #92]	; 0x5c
   208e8:	cmp	r0, #1
   208ec:	ble	20930 <__assert_fail@plt+0xf1bc>
   208f0:	ldr	r0, [r1, #60]	; 0x3c
   208f4:	mov	r1, #0
   208f8:	add	r2, r0, r1
   208fc:	add	r3, sl, r1
   20900:	vld1.32	{d20-d21}, [r2]
   20904:	vld1.32	{d18-d19}, [r3]
   20908:	add	r2, r4, r1
   2090c:	add	r1, r1, #16
   20910:	vld1.32	{d22-d23}, [r2]
   20914:	cmp	r1, #32
   20918:	vand	q9, q10, q9
   2091c:	vbic	q9, q11, q9
   20920:	vorr	q8, q9, q8
   20924:	vst1.32	{d18-d19}, [r2]
   20928:	bne	208f8 <__assert_fail@plt+0xf184>
   2092c:	b	2095c <__assert_fail@plt+0xf1e8>
   20930:	mov	r0, #0
   20934:	add	r1, r4, r0
   20938:	add	r2, sl, r0
   2093c:	add	r0, r0, #16
   20940:	vld1.32	{d18-d19}, [r2]
   20944:	vld1.32	{d20-d21}, [r1]
   20948:	cmp	r0, #32
   2094c:	vbic	q9, q10, q9
   20950:	vorr	q8, q9, q8
   20954:	vst1.32	{d18-d19}, [r1]
   20958:	bne	20934 <__assert_fail@plt+0xf1c0>
   2095c:	vext.8	q9, q8, q8, #8
   20960:	sub	lr, fp, #3072	; 0xc00
   20964:	vorr	q8, q8, q9
   20968:	sub	r3, lr, #72	; 0x48
   2096c:	vdup.32	q9, d16[1]
   20970:	vorr	q8, q8, q9
   20974:	vmov.32	r0, d16[0]
   20978:	cmp	r0, #0
   2097c:	beq	208d4 <__assert_fail@plt+0xf160>
   20980:	mov	r7, #0
   20984:	cmp	r8, #1
   20988:	blt	20b5c <__assert_fail@plt+0xf3e8>
   2098c:	add	sl, sp, #24
   20990:	stmib	sp, {r5, ip}
   20994:	cmp	ip, #1
   20998:	bne	209c0 <__assert_fail@plt+0xf24c>
   2099c:	ldrb	r1, [r5, r6, lsl #3]
   209a0:	add	r0, sp, #24
   209a4:	add	r0, r0, r7, lsl #5
   209a8:	ubfx	r2, r1, #5, #3
   209ac:	and	r1, r1, #31
   209b0:	ldr	r0, [r0, r2, lsl #2]
   209b4:	mov	r2, #1
   209b8:	tst	r0, r2, lsl r1
   209bc:	beq	20b40 <__assert_fail@plt+0xf3cc>
   209c0:	vmov.i32	q8, #0	; 0x00000000
   209c4:	mov	r0, #0
   209c8:	add	r1, sl, r0
   209cc:	add	r2, r4, r0
   209d0:	vld1.32	{d20-d21}, [r1]
   209d4:	vld1.32	{d18-d19}, [r2]
   209d8:	add	r1, r9, r0
   209dc:	add	r0, r0, #16
   209e0:	cmp	r0, #32
   209e4:	vand	q9, q10, q9
   209e8:	vorr	q8, q9, q8
   209ec:	vst1.32	{d18-d19}, [r1]
   209f0:	bne	209c8 <__assert_fail@plt+0xf254>
   209f4:	vext.8	q9, q8, q8, #8
   209f8:	vorr	q8, q8, q9
   209fc:	vdup.32	q9, d16[1]
   20a00:	vorr	q8, q8, q9
   20a04:	vmov.32	r0, d16[0]
   20a08:	cmp	r0, #0
   20a0c:	beq	20b40 <__assert_fail@plt+0xf3cc>
   20a10:	vmov.i32	q5, #0	; 0x00000000
   20a14:	mov	r0, #0
   20a18:	vmov.i32	q8, #0	; 0x00000000
   20a1c:	add	r1, r4, r0
   20a20:	add	r2, sl, r0
   20a24:	vld1.32	{d18-d19}, [r2]
   20a28:	vld1.32	{d20-d21}, [r1]
   20a2c:	add	r2, r3, r0
   20a30:	add	r0, r0, #16
   20a34:	cmp	r0, #32
   20a38:	vbic	q11, q10, q9
   20a3c:	vbic	q9, q9, q10
   20a40:	vorr	q5, q11, q5
   20a44:	vorr	q8, q9, q8
   20a48:	vst1.32	{d18-d19}, [r2]
   20a4c:	vst1.32	{d22-d23}, [r1]
   20a50:	bne	20a1c <__assert_fail@plt+0xf2a8>
   20a54:	vext.8	q9, q8, q8, #8
   20a58:	vorr	q8, q8, q9
   20a5c:	vdup.32	q9, d16[1]
   20a60:	vorr	q8, q8, q9
   20a64:	vmov.32	r0, d16[0]
   20a68:	cmp	r0, #0
   20a6c:	beq	20adc <__assert_fail@plt+0xf368>
   20a70:	mov	r0, r3
   20a74:	mov	r1, r9
   20a78:	add	r2, sp, #24
   20a7c:	sub	lr, fp, #6144	; 0x1800
   20a80:	vld1.32	{d16-d17}, [r0]!
   20a84:	vld1.32	{d18-d19}, [r1]!
   20a88:	mov	r3, r2
   20a8c:	add	r2, r2, r8, lsl #5
   20a90:	vld1.64	{d20-d21}, [r0]
   20a94:	vst1.32	{d16-d17}, [r2]!
   20a98:	vld1.64	{d16-d17}, [r1]
   20a9c:	add	r0, r3, r7, lsl #5
   20aa0:	sub	r1, lr, #120	; 0x78
   20aa4:	vst1.32	{d20-d21}, [r2]
   20aa8:	vst1.32	{d18-d19}, [r0]!
   20aac:	mov	r2, r1
   20ab0:	vst1.32	{d16-d17}, [r0]
   20ab4:	add	r0, r8, r8, lsl #1
   20ab8:	add	r0, r1, r0, lsl #2
   20abc:	add	r1, r7, r7, lsl #1
   20ac0:	add	r5, r2, r1, lsl #2
   20ac4:	mov	r1, r5
   20ac8:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   20acc:	cmp	r0, #0
   20ad0:	bne	20fb0 <__assert_fail@plt+0xf83c>
   20ad4:	add	r8, r8, #1
   20ad8:	b	20aec <__assert_fail@plt+0xf378>
   20adc:	sub	lr, fp, #6144	; 0x1800
   20ae0:	add	r0, r7, r7, lsl #1
   20ae4:	sub	r1, lr, #120	; 0x78
   20ae8:	add	r5, r1, r0, lsl #2
   20aec:	ldr	r0, [sp, #12]
   20af0:	ldr	r1, [sp, #16]
   20af4:	ldr	r0, [r0, #12]
   20af8:	ldr	r1, [r0, r1, lsl #2]
   20afc:	mov	r0, r5
   20b00:	bl	1d654 <__assert_fail@plt+0xbee0>
   20b04:	cmp	r0, #0
   20b08:	beq	20fb0 <__assert_fail@plt+0xf83c>
   20b0c:	vext.8	q8, q5, q8, #8
   20b10:	mov	r1, #0
   20b14:	vorr	q8, q5, q8
   20b18:	vdup.32	q9, d16[1]
   20b1c:	vorr	q8, q8, q9
   20b20:	vmov.32	r0, d16[0]
   20b24:	cmp	r0, #0
   20b28:	movweq	r1, #17
   20b2c:	cmp	r1, #0
   20b30:	bne	20b54 <__assert_fail@plt+0xf3e0>
   20b34:	ldmib	sp, {r5, ip}
   20b38:	sub	lr, fp, #3072	; 0xc00
   20b3c:	sub	r3, lr, #72	; 0x48
   20b40:	add	r7, r7, #1
   20b44:	add	sl, sl, #32
   20b48:	cmp	r7, r8
   20b4c:	blt	20994 <__assert_fail@plt+0xf220>
   20b50:	b	20b5c <__assert_fail@plt+0xf3e8>
   20b54:	cmp	r1, #17
   20b58:	bne	20c00 <__assert_fail@plt+0xf48c>
   20b5c:	ldr	r1, [sp, #12]
   20b60:	ldr	sl, [sp]
   20b64:	cmp	r7, r8
   20b68:	bne	20be4 <__assert_fail@plt+0xf470>
   20b6c:	mov	r0, r4
   20b70:	sub	lr, fp, #6144	; 0x1800
   20b74:	vld1.32	{d16-d17}, [r0]!
   20b78:	sub	r2, lr, #120	; 0x78
   20b7c:	vld1.64	{d18-d19}, [r0]
   20b80:	add	r0, sp, #24
   20b84:	add	r0, r0, r7, lsl #5
   20b88:	vst1.32	{d16-d17}, [r0]!
   20b8c:	vst1.32	{d18-d19}, [r0]
   20b90:	ldr	r0, [r1, #12]
   20b94:	ldr	r1, [sp, #16]
   20b98:	ldr	r8, [r0, r1, lsl #2]
   20b9c:	add	r0, r7, r7, lsl #1
   20ba0:	mov	r1, #1
   20ba4:	add	r5, r2, r0, lsl #2
   20ba8:	str	r1, [r2, r0, lsl #2]
   20bac:	mov	r0, #4
   20bb0:	mov	r6, r5
   20bb4:	str	r1, [r6, #4]!
   20bb8:	bl	23be4 <__assert_fail@plt+0x12470>
   20bbc:	cmp	r0, #0
   20bc0:	str	r0, [r5, #8]
   20bc4:	beq	2101c <__assert_fail@plt+0xf8a8>
   20bc8:	ldr	r1, [sp, #12]
   20bcc:	ldr	sl, [sp]
   20bd0:	str	r8, [r0]
   20bd4:	mov	r0, r4
   20bd8:	add	r8, r7, #1
   20bdc:	vst1.64	{d8-d9}, [r0]!
   20be0:	vst1.64	{d8-d9}, [r0]
   20be4:	ldr	r3, [sp, #16]
   20be8:	ldr	r0, [r1, #8]
   20bec:	add	r3, r3, #1
   20bf0:	cmp	r3, r0
   20bf4:	ldr	r0, [sp, #20]
   20bf8:	blt	20654 <__assert_fail@plt+0xeee0>
   20bfc:	b	20c14 <__assert_fail@plt+0xf4a0>
   20c00:	ldr	r1, [sp, #12]
   20c04:	ldr	sl, [sp]
   20c08:	cmp	r0, #0
   20c0c:	bne	20be4 <__assert_fail@plt+0xf470>
   20c10:	b	20c1c <__assert_fail@plt+0xf4a8>
   20c14:	cmp	r8, #0
   20c18:	ble	20fe4 <__assert_fail@plt+0xf870>
   20c1c:	mov	r0, #0
   20c20:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20c24:	add	r0, r8, #1
   20c28:	str	r0, [fp, #-3156]	; 0xfffff3ac
   20c2c:	lsl	r0, r0, #2
   20c30:	bl	23be4 <__assert_fail@plt+0x12470>
   20c34:	cmp	r0, #0
   20c38:	str	r0, [fp, #-3148]	; 0xfffff3b4
   20c3c:	mov	r0, #0
   20c40:	movweq	r0, #12
   20c44:	str	r0, [fp, #-72]	; 0xffffffb8
   20c48:	beq	2102c <__assert_fail@plt+0xf8b8>
   20c4c:	sub	lr, fp, #3072	; 0xc00
   20c50:	vmov.i32	q8, #0	; 0x00000000
   20c54:	add	r7, sp, #24
   20c58:	mov	r6, #0
   20c5c:	mov	r1, #0
   20c60:	sub	sl, lr, #120	; 0x78
   20c64:	mov	r0, sl
   20c68:	vst1.64	{d16-d17}, [r0]!
   20c6c:	vst1.64	{d16-d17}, [r0]
   20c70:	mov	r0, #0
   20c74:	stmib	sp, {r0, r8}
   20c78:	mov	r0, #0
   20c7c:	sub	lr, fp, #6144	; 0x1800
   20c80:	str	r1, [sp, #16]
   20c84:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20c88:	add	r0, r1, r1, lsl #1
   20c8c:	sub	r2, lr, #120	; 0x78
   20c90:	ldr	r1, [sp, #20]
   20c94:	add	r0, r2, r0, lsl #2
   20c98:	ldr	r5, [r0, #4]
   20c9c:	cmp	r5, #1
   20ca0:	blt	20d04 <__assert_fail@plt+0xf590>
   20ca4:	ldr	sl, [r0, #8]
   20ca8:	mov	r8, #0
   20cac:	ldr	r0, [sl, r8, lsl #2]
   20cb0:	ldr	r2, [r1, #12]
   20cb4:	ldr	r0, [r2, r0, lsl #2]
   20cb8:	cmn	r0, #1
   20cbc:	beq	20ce8 <__assert_fail@plt+0xf574>
   20cc0:	ldr	r1, [r1, #24]
   20cc4:	add	r0, r0, r0, lsl #1
   20cc8:	sub	lr, fp, #3072	; 0xc00
   20ccc:	add	r1, r1, r0, lsl #2
   20cd0:	sub	r0, lr, #84	; 0x54
   20cd4:	bl	1d440 <__assert_fail@plt+0xbccc>
   20cd8:	ldr	r1, [sp, #20]
   20cdc:	mov	r6, #0
   20ce0:	cmp	r0, #0
   20ce4:	bne	20f74 <__assert_fail@plt+0xf800>
   20ce8:	add	r8, r8, #1
   20cec:	cmp	r8, r5
   20cf0:	blt	20cac <__assert_fail@plt+0xf538>
   20cf4:	ldr	r8, [sp, #8]
   20cf8:	sub	lr, fp, #3072	; 0xc00
   20cfc:	str	r6, [fp, #-72]	; 0xffffffb8
   20d00:	sub	sl, lr, #120	; 0x78
   20d04:	sub	lr, fp, #3072	; 0xc00
   20d08:	sub	r0, fp, #72	; 0x48
   20d0c:	mov	r3, #0
   20d10:	sub	r2, lr, #84	; 0x54
   20d14:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   20d18:	ldr	r1, [sp, #16]
   20d1c:	ldr	r6, [fp, #-72]	; 0xffffffb8
   20d20:	mov	r5, r0
   20d24:	cmp	r0, #0
   20d28:	str	r0, [r4, r1, lsl #2]
   20d2c:	bne	20d38 <__assert_fail@plt+0xf5c4>
   20d30:	cmp	r6, #0
   20d34:	bne	20f7c <__assert_fail@plt+0xf808>
   20d38:	ldrsb	r0, [r5, #52]	; 0x34
   20d3c:	cmn	r0, #1
   20d40:	ble	20d58 <__assert_fail@plt+0xf5e4>
   20d44:	sub	lr, fp, #3072	; 0xc00
   20d48:	str	r5, [r9, r1, lsl #2]
   20d4c:	sub	r0, lr, #72	; 0x48
   20d50:	str	r5, [r0, r1, lsl #2]
   20d54:	b	20df8 <__assert_fail@plt+0xf684>
   20d58:	ldr	r1, [sp, #20]
   20d5c:	sub	lr, fp, #3072	; 0xc00
   20d60:	sub	r0, fp, #72	; 0x48
   20d64:	mov	r3, #1
   20d68:	sub	r2, lr, #84	; 0x54
   20d6c:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   20d70:	ldr	r1, [sp, #16]
   20d74:	cmp	r0, #0
   20d78:	str	r0, [r9, r1, lsl #2]
   20d7c:	bne	20d8c <__assert_fail@plt+0xf618>
   20d80:	ldr	r1, [fp, #-72]	; 0xffffffb8
   20d84:	cmp	r1, #0
   20d88:	bne	20f7c <__assert_fail@plt+0xf808>
   20d8c:	cmp	r5, r0
   20d90:	beq	20db8 <__assert_fail@plt+0xf644>
   20d94:	ldr	r1, [sp, #20]
   20d98:	ldr	r2, [sp, #4]
   20d9c:	ldr	r0, [r1, #92]	; 0x5c
   20da0:	cmp	r0, #1
   20da4:	mov	r0, #0
   20da8:	movwgt	r0, #1
   20dac:	orr	r2, r2, r0
   20db0:	str	r2, [sp, #4]
   20db4:	b	20dbc <__assert_fail@plt+0xf648>
   20db8:	ldr	r1, [sp, #20]
   20dbc:	sub	lr, fp, #3072	; 0xc00
   20dc0:	sub	r0, fp, #72	; 0x48
   20dc4:	mov	r3, #2
   20dc8:	sub	r2, lr, #84	; 0x54
   20dcc:	bl	1d8d0 <__assert_fail@plt+0xc15c>
   20dd0:	ldr	r2, [sp, #16]
   20dd4:	ldr	r6, [fp, #-72]	; 0xffffffb8
   20dd8:	sub	lr, fp, #3072	; 0xc00
   20ddc:	cmp	r0, #0
   20de0:	sub	r1, lr, #72	; 0x48
   20de4:	str	r0, [r1, r2, lsl #2]
   20de8:	mov	r1, r2
   20dec:	bne	20df8 <__assert_fail@plt+0xf684>
   20df0:	cmp	r6, #0
   20df4:	bne	20f7c <__assert_fail@plt+0xf808>
   20df8:	mov	r0, #0
   20dfc:	add	r2, sl, r0
   20e00:	add	r3, r7, r0
   20e04:	add	r0, r0, #16
   20e08:	vld1.32	{d16-d17}, [r3]
   20e0c:	vld1.32	{d18-d19}, [r2]
   20e10:	cmp	r0, #32
   20e14:	vorr	q8, q9, q8
   20e18:	vst1.32	{d16-d17}, [r2]
   20e1c:	bne	20dfc <__assert_fail@plt+0xf688>
   20e20:	add	r1, r1, #1
   20e24:	add	r7, r7, #32
   20e28:	cmp	r1, r8
   20e2c:	blt	20c78 <__assert_fail@plt+0xf504>
   20e30:	ldr	r0, [sp, #4]
   20e34:	tst	r0, #1
   20e38:	bne	21038 <__assert_fail@plt+0xf8c4>
   20e3c:	mov	r0, #4
   20e40:	mov	r1, #256	; 0x100
   20e44:	bl	23b90 <__assert_fail@plt+0x1241c>
   20e48:	ldr	r1, [sp, #12]
   20e4c:	cmp	r0, #0
   20e50:	str	r0, [r1, #44]	; 0x2c
   20e54:	beq	20f7c <__assert_fail@plt+0xf808>
   20e58:	mov	r1, #0
   20e5c:	add	sl, sp, #24
   20e60:	mov	r3, #0
   20e64:	sub	lr, fp, #3072	; 0xc00
   20e68:	sub	r2, lr, #120	; 0x78
   20e6c:	ldr	r7, [r2, r3, lsl #2]
   20e70:	cmp	r7, #0
   20e74:	beq	20ee8 <__assert_fail@plt+0xf774>
   20e78:	ldr	r2, [sp, #20]
   20e7c:	lsl	r5, r3, #5
   20e80:	add	r6, r2, r3, lsl #2
   20e84:	add	ip, r6, #96	; 0x60
   20e88:	mov	r6, #1
   20e8c:	b	20ec8 <__assert_fail@plt+0xf754>
   20e90:	mov	lr, #0
   20e94:	ldr	r8, [sl, lr, lsl #3]
   20e98:	add	lr, lr, #4
   20e9c:	tst	r8, r6
   20ea0:	beq	20e94 <__assert_fail@plt+0xf720>
   20ea4:	ldr	r2, [ip]
   20ea8:	ldr	r8, [sp, #8]
   20eac:	tst	r2, r6
   20eb0:	mov	r2, r9
   20eb4:	moveq	r2, r4
   20eb8:	add	r2, r2, lr
   20ebc:	ldr	r2, [r2, #-4]
   20ec0:	str	r2, [r0, r5, lsl #2]
   20ec4:	b	20ed0 <__assert_fail@plt+0xf75c>
   20ec8:	tst	r7, #1
   20ecc:	bne	20e90 <__assert_fail@plt+0xf71c>
   20ed0:	lsr	r2, r7, #1
   20ed4:	cmp	r1, r7, lsr #1
   20ed8:	add	r5, r5, #1
   20edc:	lsl	r6, r6, #1
   20ee0:	mov	r7, r2
   20ee4:	bne	20ec8 <__assert_fail@plt+0xf754>
   20ee8:	add	r3, r3, #1
   20eec:	add	sl, sl, #4
   20ef0:	cmp	r3, #8
   20ef4:	bne	20e64 <__assert_fail@plt+0xf6f0>
   20ef8:	ldrb	r1, [fp, #-3191]	; 0xfffff389
   20efc:	sub	lr, fp, #6144	; 0x1800
   20f00:	sub	r4, lr, #120	; 0x78
   20f04:	tst	r1, #4
   20f08:	beq	20f50 <__assert_fail@plt+0xf7dc>
   20f0c:	mov	r1, #0
   20f10:	add	r2, sp, #24
   20f14:	add	r3, r2, r1, lsl #5
   20f18:	ldrb	r3, [r3, #1]
   20f1c:	tst	r3, #4
   20f20:	bne	20f34 <__assert_fail@plt+0xf7c0>
   20f24:	add	r1, r1, #1
   20f28:	cmp	r1, r8
   20f2c:	blt	20f14 <__assert_fail@plt+0xf7a0>
   20f30:	b	20f50 <__assert_fail@plt+0xf7dc>
   20f34:	sub	lr, fp, #3072	; 0xc00
   20f38:	sub	r2, lr, #72	; 0x48
   20f3c:	ldr	r1, [r2, r1, lsl #2]
   20f40:	ldr	r2, [sp, #4]
   20f44:	tst	r2, #1
   20f48:	str	r1, [r0, #40]	; 0x28
   20f4c:	strne	r1, [r0, #1064]	; 0x428
   20f50:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20f54:	bl	13c04 <__assert_fail@plt+0x2490>
   20f58:	add	r4, r4, #8
   20f5c:	ldr	r0, [r4], #12
   20f60:	bl	13c04 <__assert_fail@plt+0x2490>
   20f64:	subs	r8, r8, #1
   20f68:	bne	20f5c <__assert_fail@plt+0xf7e8>
   20f6c:	mov	r0, #1
   20f70:	b	2100c <__assert_fail@plt+0xf898>
   20f74:	ldr	r8, [sp, #8]
   20f78:	str	r0, [fp, #-72]	; 0xffffffb8
   20f7c:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20f80:	bl	13c04 <__assert_fail@plt+0x2490>
   20f84:	cmp	r8, #1
   20f88:	blt	20fa8 <__assert_fail@plt+0xf834>
   20f8c:	sub	lr, fp, #6144	; 0x1800
   20f90:	sub	r0, lr, #120	; 0x78
   20f94:	add	r4, r0, #8
   20f98:	ldr	r0, [r4], #12
   20f9c:	bl	13c04 <__assert_fail@plt+0x2490>
   20fa0:	subs	r8, r8, #1
   20fa4:	bne	20f98 <__assert_fail@plt+0xf824>
   20fa8:	mov	r0, #0
   20fac:	b	2100c <__assert_fail@plt+0xf898>
   20fb0:	mov	r7, r8
   20fb4:	ldr	r1, [sp, #12]
   20fb8:	mvn	r8, #0
   20fbc:	cmp	r7, #1
   20fc0:	blt	20fe4 <__assert_fail@plt+0xf870>
   20fc4:	sub	lr, fp, #6144	; 0x1800
   20fc8:	sub	r0, lr, #120	; 0x78
   20fcc:	add	r4, r0, #8
   20fd0:	ldr	r0, [r4], #12
   20fd4:	bl	13c04 <__assert_fail@plt+0x2490>
   20fd8:	subs	r7, r7, #1
   20fdc:	bne	20fd0 <__assert_fail@plt+0xf85c>
   20fe0:	ldr	r1, [sp, #12]
   20fe4:	mov	r0, #0
   20fe8:	cmp	r8, #0
   20fec:	bne	2100c <__assert_fail@plt+0xf898>
   20ff0:	mov	r4, r1
   20ff4:	mov	r0, #4
   20ff8:	mov	r1, #256	; 0x100
   20ffc:	bl	23b90 <__assert_fail@plt+0x1241c>
   21000:	cmp	r0, #0
   21004:	str	r0, [r4, #44]	; 0x2c
   21008:	movwne	r0, #1
   2100c:	sub	sp, fp, #64	; 0x40
   21010:	vpop	{d8-d11}
   21014:	add	sp, sp, #4
   21018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2101c:	mov	r0, #0
   21020:	str	r0, [r6]
   21024:	str	r0, [r5]
   21028:	b	20fb4 <__assert_fail@plt+0xf840>
   2102c:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   21030:	bl	13c04 <__assert_fail@plt+0x2490>
   21034:	b	20f8c <__assert_fail@plt+0xf818>
   21038:	mov	r0, #4
   2103c:	mov	r1, #512	; 0x200
   21040:	bl	23b90 <__assert_fail@plt+0x1241c>
   21044:	ldr	r1, [sp, #12]
   21048:	cmp	r0, #0
   2104c:	str	r0, [r1, #48]	; 0x30
   21050:	beq	20f7c <__assert_fail@plt+0xf808>
   21054:	sub	ip, r4, #4
   21058:	sub	lr, r9, #4
   2105c:	mov	r3, #0
   21060:	add	r7, sp, #24
   21064:	mov	r6, #0
   21068:	ldr	r5, [sl, r6, lsl #2]
   2106c:	cmp	r5, #0
   21070:	beq	210e4 <__assert_fail@plt+0xf970>
   21074:	lsl	r4, r6, #5
   21078:	mov	r1, #1
   2107c:	b	210c4 <__assert_fail@plt+0xf950>
   21080:	mov	sl, r7
   21084:	mov	r9, ip
   21088:	mov	r8, lr
   2108c:	ldr	r2, [sl], #32
   21090:	add	r9, r9, #4
   21094:	add	r8, r8, #4
   21098:	tst	r2, r1
   2109c:	beq	2108c <__assert_fail@plt+0xf918>
   210a0:	ldr	r9, [r9]
   210a4:	mov	sl, r0
   210a8:	str	r9, [sl, r4, lsl #2]!
   210ac:	ldr	r2, [r8]
   210b0:	ldr	r8, [sp, #8]
   210b4:	str	r2, [sl, #1024]	; 0x400
   210b8:	sub	r2, fp, #3072	; 0xc00
   210bc:	sub	sl, r2, #120	; 0x78
   210c0:	b	210cc <__assert_fail@plt+0xf958>
   210c4:	tst	r5, #1
   210c8:	bne	21080 <__assert_fail@plt+0xf90c>
   210cc:	lsr	r2, r5, #1
   210d0:	cmp	r3, r5, lsr #1
   210d4:	add	r4, r4, #1
   210d8:	lsl	r1, r1, #1
   210dc:	mov	r5, r2
   210e0:	bne	210c4 <__assert_fail@plt+0xf950>
   210e4:	add	r6, r6, #1
   210e8:	add	r7, r7, #4
   210ec:	cmp	r6, #8
   210f0:	bne	21068 <__assert_fail@plt+0xf8f4>
   210f4:	b	20ef8 <__assert_fail@plt+0xf784>
   210f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210fc:	add	fp, sp, #28
   21100:	sub	sp, sp, #44	; 0x2c
   21104:	ldr	r4, [r1, #8]
   21108:	ldr	r6, [r1, #12]
   2110c:	mov	r9, r0
   21110:	mov	r0, #1
   21114:	mov	sl, r1
   21118:	str	r0, [sp, #36]	; 0x24
   2111c:	str	r0, [sp, #32]
   21120:	mov	r0, #4
   21124:	bl	23be4 <__assert_fail@plt+0x12470>
   21128:	cmp	r0, #0
   2112c:	str	r0, [sp, #40]	; 0x28
   21130:	beq	2137c <__assert_fail@plt+0xfc08>
   21134:	str	r4, [r0]
   21138:	add	r3, sp, #32
   2113c:	mov	r0, r9
   21140:	mov	r1, sl
   21144:	mov	r2, r6
   21148:	bl	2143c <__assert_fail@plt+0xfcc8>
   2114c:	cmp	r0, #0
   21150:	bne	21340 <__assert_fail@plt+0xfbcc>
   21154:	add	r0, sl, #16
   21158:	mov	r1, #0
   2115c:	str	r0, [sp, #12]
   21160:	cmp	r6, #1
   21164:	blt	21350 <__assert_fail@plt+0xfbdc>
   21168:	ldr	r0, [sl]
   2116c:	ldr	r2, [r0, r6, lsl #2]
   21170:	cmp	r2, #0
   21174:	mov	r2, #0
   21178:	addeq	r2, r1, #1
   2117c:	ldr	r1, [r9, #120]	; 0x78
   21180:	cmp	r2, r1
   21184:	bgt	21358 <__assert_fail@plt+0xfbe4>
   21188:	mov	r0, #0
   2118c:	str	r6, [sp, #16]
   21190:	sub	r6, r6, #1
   21194:	str	r2, [sp, #8]
   21198:	str	r0, [sp, #36]	; 0x24
   2119c:	ldr	r0, [r9, #100]	; 0x64
   211a0:	ldr	r1, [r0, r6, lsl #2]
   211a4:	cmp	r1, #0
   211a8:	beq	21320 <__assert_fail@plt+0xfbac>
   211ac:	ldr	r0, [r1, #20]
   211b0:	cmp	r0, #1
   211b4:	blt	21320 <__assert_fail@plt+0xfbac>
   211b8:	ldr	r0, [r9, #84]	; 0x54
   211bc:	mov	r5, #0
   211c0:	str	r1, [sp, #24]
   211c4:	str	r0, [sp, #28]
   211c8:	ldr	r0, [r1, #24]
   211cc:	ldr	r7, [r0, r5, lsl #2]
   211d0:	ldr	r0, [sp, #28]
   211d4:	ldr	r0, [r0]
   211d8:	add	r0, r0, r7, lsl #3
   211dc:	ldrb	r0, [r0, #6]
   211e0:	tst	r0, #16
   211e4:	bne	21240 <__assert_fail@plt+0xfacc>
   211e8:	ldr	r0, [sp, #28]
   211ec:	mov	r2, r6
   211f0:	ldr	r0, [r0]
   211f4:	add	r1, r0, r7, lsl #3
   211f8:	mov	r0, r9
   211fc:	bl	204b8 <__assert_fail@plt+0xed44>
   21200:	cmp	r0, #0
   21204:	beq	2130c <__assert_fail@plt+0xfb98>
   21208:	ldr	r0, [sl]
   2120c:	ldr	r1, [sp, #16]
   21210:	ldr	r0, [r0, r1, lsl #2]
   21214:	cmp	r0, #0
   21218:	beq	2130c <__assert_fail@plt+0xfb98>
   2121c:	ldr	r1, [sp, #28]
   21220:	add	r0, r0, #4
   21224:	ldr	r1, [r1, #12]
   21228:	ldr	r1, [r1, r7, lsl #2]
   2122c:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21230:	mov	r4, #1
   21234:	cmp	r0, #0
   21238:	bne	212c0 <__assert_fail@plt+0xfb4c>
   2123c:	b	2130c <__assert_fail@plt+0xfb98>
   21240:	ldr	r0, [sl, #12]
   21244:	ldr	r8, [r9, #84]	; 0x54
   21248:	mov	r2, r9
   2124c:	mov	r1, r7
   21250:	mov	r3, r6
   21254:	str	r0, [sp, #20]
   21258:	mov	r0, r8
   2125c:	bl	201c8 <__assert_fail@plt+0xea54>
   21260:	mov	r4, r0
   21264:	cmp	r0, #1
   21268:	blt	21288 <__assert_fail@plt+0xfb14>
   2126c:	ldr	r1, [sp, #20]
   21270:	add	r0, r4, r6
   21274:	mov	r2, r6
   21278:	cmp	r0, r1
   2127c:	ble	21294 <__assert_fail@plt+0xfb20>
   21280:	mov	r6, r2
   21284:	b	212c0 <__assert_fail@plt+0xfb4c>
   21288:	cmp	r4, #0
   2128c:	bne	212c0 <__assert_fail@plt+0xfb4c>
   21290:	b	211e8 <__assert_fail@plt+0xfa74>
   21294:	ldr	r1, [sl]
   21298:	mov	r6, r2
   2129c:	ldr	r0, [r1, r0, lsl #2]
   212a0:	cmp	r0, #0
   212a4:	beq	211e8 <__assert_fail@plt+0xfa74>
   212a8:	ldr	r1, [r8, #12]
   212ac:	add	r0, r0, #4
   212b0:	ldr	r1, [r1, r7, lsl #2]
   212b4:	bl	1d86c <__assert_fail@plt+0xc0f8>
   212b8:	cmp	r0, #0
   212bc:	beq	211e8 <__assert_fail@plt+0xfa74>
   212c0:	ldr	r0, [sl, #20]
   212c4:	cmp	r0, #0
   212c8:	beq	212f8 <__assert_fail@plt+0xfb84>
   212cc:	ldr	r0, [sp, #28]
   212d0:	ldr	r1, [sp, #12]
   212d4:	add	r3, r4, r6
   212d8:	ldr	r0, [r0, #12]
   212dc:	ldr	r2, [r0, r7, lsl #2]
   212e0:	mov	r0, r9
   212e4:	str	r7, [sp]
   212e8:	str	r6, [sp, #4]
   212ec:	bl	21f68 <__assert_fail@plt+0x107f4>
   212f0:	cmp	r0, #0
   212f4:	bne	2130c <__assert_fail@plt+0xfb98>
   212f8:	add	r0, sp, #32
   212fc:	mov	r1, r7
   21300:	bl	1d654 <__assert_fail@plt+0xbee0>
   21304:	cmp	r0, #0
   21308:	beq	21348 <__assert_fail@plt+0xfbd4>
   2130c:	ldr	r1, [sp, #24]
   21310:	add	r5, r5, #1
   21314:	ldr	r0, [r1, #20]
   21318:	cmp	r5, r0
   2131c:	blt	211c8 <__assert_fail@plt+0xfa54>
   21320:	mov	r0, r9
   21324:	mov	r1, sl
   21328:	mov	r2, r6
   2132c:	add	r3, sp, #32
   21330:	bl	2143c <__assert_fail@plt+0xfcc8>
   21334:	ldr	r1, [sp, #8]
   21338:	cmp	r0, #0
   2133c:	beq	21160 <__assert_fail@plt+0xf9ec>
   21340:	mov	r4, r0
   21344:	b	21368 <__assert_fail@plt+0xfbf4>
   21348:	mov	r4, #12
   2134c:	b	21368 <__assert_fail@plt+0xfbf4>
   21350:	mov	r4, #0
   21354:	b	21368 <__assert_fail@plt+0xfbf4>
   21358:	lsl	r2, r6, #2
   2135c:	mov	r1, #0
   21360:	mov	r4, #0
   21364:	bl	11660 <memset@plt>
   21368:	ldr	r0, [sp, #40]	; 0x28
   2136c:	bl	13c04 <__assert_fail@plt+0x2490>
   21370:	mov	r0, r4
   21374:	sub	sp, fp, #28
   21378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2137c:	mov	r0, #0
   21380:	mov	r4, #12
   21384:	str	r0, [sp, #32]
   21388:	str	r0, [sp, #36]	; 0x24
   2138c:	b	21370 <__assert_fail@plt+0xfbfc>
   21390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21394:	add	fp, sp, #28
   21398:	sub	sp, sp, #20
   2139c:	cmp	r3, #1
   213a0:	blt	21430 <__assert_fail@plt+0xfcbc>
   213a4:	mov	r4, r3
   213a8:	mov	r5, r2
   213ac:	mov	r6, r1
   213b0:	mov	sl, r0
   213b4:	mov	r7, #0
   213b8:	add	r8, sp, #4
   213bc:	add	r9, sp, #16
   213c0:	ldr	r1, [r6, r7, lsl #2]
   213c4:	ldr	r0, [r5, r7, lsl #2]
   213c8:	cmp	r1, #0
   213cc:	beq	21420 <__assert_fail@plt+0xfcac>
   213d0:	cmp	r0, #0
   213d4:	beq	21424 <__assert_fail@plt+0xfcb0>
   213d8:	add	r2, r0, #4
   213dc:	add	r1, r1, #4
   213e0:	mov	r0, r8
   213e4:	bl	1f07c <__assert_fail@plt+0xd908>
   213e8:	cmp	r0, #0
   213ec:	str	r0, [sp, #16]
   213f0:	bne	21434 <__assert_fail@plt+0xfcc0>
   213f4:	mov	r0, r9
   213f8:	mov	r1, sl
   213fc:	mov	r2, r8
   21400:	bl	1ffcc <__assert_fail@plt+0xe858>
   21404:	str	r0, [r6, r7, lsl #2]
   21408:	ldr	r0, [sp, #12]
   2140c:	bl	13c04 <__assert_fail@plt+0x2490>
   21410:	ldr	r0, [sp, #16]
   21414:	cmp	r0, #0
   21418:	beq	21424 <__assert_fail@plt+0xfcb0>
   2141c:	b	21434 <__assert_fail@plt+0xfcc0>
   21420:	str	r0, [r6, r7, lsl #2]
   21424:	add	r7, r7, #1
   21428:	cmp	r7, r4
   2142c:	blt	213c0 <__assert_fail@plt+0xfc4c>
   21430:	mov	r0, #0
   21434:	sub	sp, fp, #28
   21438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2143c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21440:	add	fp, sp, #28
   21444:	sub	sp, sp, #84	; 0x54
   21448:	mov	r6, r3
   2144c:	mov	r3, #0
   21450:	ldr	r7, [r0, #84]	; 0x54
   21454:	mov	r4, r2
   21458:	str	r0, [sp, #44]	; 0x2c
   2145c:	str	r1, [sp, #48]	; 0x30
   21460:	str	r3, [sp, #52]	; 0x34
   21464:	str	r4, [sp, #40]	; 0x28
   21468:	ldr	r2, [r0, #100]	; 0x64
   2146c:	ldr	r8, [r2, r4, lsl #2]
   21470:	ldr	r2, [r6, #4]
   21474:	cmp	r8, #0
   21478:	mov	r0, r8
   2147c:	addne	r0, r0, #4
   21480:	cmp	r2, #0
   21484:	str	r0, [sp, #36]	; 0x24
   21488:	beq	21808 <__assert_fail@plt+0x10094>
   2148c:	cmp	r8, #0
   21490:	beq	217dc <__assert_fail@plt+0x10068>
   21494:	mov	r0, #0
   21498:	mov	r1, r7
   2149c:	mov	r2, r6
   214a0:	str	r7, [sp, #28]
   214a4:	str	r6, [sp, #20]
   214a8:	str	r0, [sp, #56]	; 0x38
   214ac:	add	r0, sp, #56	; 0x38
   214b0:	bl	1ffcc <__assert_fail@plt+0xe858>
   214b4:	ldr	r9, [sp, #56]	; 0x38
   214b8:	cmp	r9, #0
   214bc:	bne	21b24 <__assert_fail@plt+0x103b0>
   214c0:	mov	r6, r0
   214c4:	mov	r5, r0
   214c8:	ldr	r2, [sp, #20]
   214cc:	ldr	r0, [r6, #28]!
   214d0:	cmp	r0, #0
   214d4:	bne	21568 <__assert_fail@plt+0xfdf4>
   214d8:	ldr	r0, [r2, #4]
   214dc:	mov	r4, #0
   214e0:	mov	r7, r2
   214e4:	str	r0, [r5, #28]
   214e8:	lsl	r0, r0, #2
   214ec:	str	r4, [r5, #32]
   214f0:	bl	23be4 <__assert_fail@plt+0x12470>
   214f4:	cmp	r0, #0
   214f8:	mov	r9, #12
   214fc:	str	r0, [r5, #36]	; 0x24
   21500:	movweq	r4, #12
   21504:	str	r4, [sp, #56]	; 0x38
   21508:	beq	21b24 <__assert_fail@plt+0x103b0>
   2150c:	ldr	r0, [r7, #4]
   21510:	mov	r2, r7
   21514:	cmp	r0, #1
   21518:	blt	21568 <__assert_fail@plt+0xfdf4>
   2151c:	mov	r5, #0
   21520:	ldr	r0, [r2, #8]
   21524:	ldr	r1, [sp, #28]
   21528:	mov	r4, r2
   2152c:	ldr	r0, [r0, r5, lsl #2]
   21530:	ldr	r1, [r1, #28]
   21534:	add	r0, r0, r0, lsl #1
   21538:	add	r1, r1, r0, lsl #2
   2153c:	mov	r0, r6
   21540:	bl	1d440 <__assert_fail@plt+0xbccc>
   21544:	cmp	r0, #0
   21548:	bne	21b34 <__assert_fail@plt+0x103c0>
   2154c:	ldr	r0, [r4, #4]
   21550:	add	r5, r5, #1
   21554:	mov	r2, r4
   21558:	cmp	r5, r0
   2155c:	blt	21520 <__assert_fail@plt+0xfdac>
   21560:	mov	r0, #0
   21564:	str	r0, [sp, #56]	; 0x38
   21568:	ldr	r1, [sp, #36]	; 0x24
   2156c:	mov	r0, r2
   21570:	mov	r2, r6
   21574:	bl	21b50 <__assert_fail@plt+0x103dc>
   21578:	cmp	r0, #0
   2157c:	str	r0, [sp, #52]	; 0x34
   21580:	bne	21b48 <__assert_fail@plt+0x103d4>
   21584:	ldr	ip, [sp, #48]	; 0x30
   21588:	ldr	r4, [sp, #40]	; 0x28
   2158c:	ldr	r7, [sp, #28]
   21590:	ldr	r6, [sp, #20]
   21594:	ldr	r0, [ip, #20]
   21598:	cmp	r0, #0
   2159c:	beq	217dc <__assert_fail@plt+0x10068>
   215a0:	cmp	r0, #1
   215a4:	str	r8, [sp, #12]
   215a8:	blt	217d0 <__assert_fail@plt+0x1005c>
   215ac:	ldr	r0, [sp, #44]	; 0x2c
   215b0:	mov	r8, #0
   215b4:	ldr	r0, [r0, #116]	; 0x74
   215b8:	str	r0, [sp, #24]
   215bc:	ldr	r0, [ip, #24]
   215c0:	ldr	r1, [sp, #24]
   215c4:	ldr	r0, [r0, r8, lsl #2]
   215c8:	add	r0, r0, r0, lsl #1
   215cc:	add	r1, r1, r0, lsl #3
   215d0:	ldr	r2, [r1, #8]
   215d4:	cmp	r2, r4
   215d8:	bge	217c0 <__assert_fail@plt+0x1004c>
   215dc:	ldr	r1, [r1, #4]
   215e0:	cmp	r1, r4
   215e4:	blt	217c0 <__assert_fail@plt+0x1004c>
   215e8:	ldr	r1, [sp, #24]
   215ec:	ldr	r2, [r7]
   215f0:	ldr	r0, [r1, r0, lsl #3]!
   215f4:	ldr	r1, [r1, #12]
   215f8:	ldr	sl, [r2, r0, lsl #3]
   215fc:	ldr	r0, [r6, #4]
   21600:	cmp	r1, r4
   21604:	bne	216c0 <__assert_fail@plt+0xff4c>
   21608:	cmp	r0, #1
   2160c:	blt	217c0 <__assert_fail@plt+0x1004c>
   21610:	ldr	r3, [r6, #8]
   21614:	mvn	r1, #0
   21618:	str	r1, [sp, #32]
   2161c:	mvn	r1, #0
   21620:	ldr	r5, [r3]
   21624:	add	r4, r2, r5, lsl #3
   21628:	ldrb	r4, [r4, #4]
   2162c:	cmp	r4, #9
   21630:	beq	2164c <__assert_fail@plt+0xfed8>
   21634:	cmp	r4, #8
   21638:	bne	21660 <__assert_fail@plt+0xfeec>
   2163c:	ldr	r4, [r2, r5, lsl #3]
   21640:	cmp	sl, r4
   21644:	moveq	r1, r5
   21648:	b	21660 <__assert_fail@plt+0xfeec>
   2164c:	ldr	r4, [r2, r5, lsl #3]
   21650:	cmp	sl, r4
   21654:	ldr	r4, [sp, #32]
   21658:	moveq	r4, r5
   2165c:	str	r4, [sp, #32]
   21660:	add	r3, r3, #4
   21664:	subs	r0, r0, #1
   21668:	bne	21620 <__assert_fail@plt+0xfeac>
   2166c:	cmp	r1, #0
   21670:	blt	21698 <__assert_fail@plt+0xff24>
   21674:	ldr	r3, [sp, #36]	; 0x24
   21678:	mov	r0, r7
   2167c:	mov	r2, r6
   21680:	bl	21d58 <__assert_fail@plt+0x105e4>
   21684:	ldr	r6, [sp, #20]
   21688:	ldr	r7, [sp, #28]
   2168c:	ldr	ip, [sp, #48]	; 0x30
   21690:	cmp	r0, #0
   21694:	bne	21b20 <__assert_fail@plt+0x103ac>
   21698:	ldr	sl, [sp, #32]
   2169c:	ldr	r4, [sp, #40]	; 0x28
   216a0:	cmp	sl, #0
   216a4:	blt	217c0 <__assert_fail@plt+0x1004c>
   216a8:	ldr	r0, [r6, #4]
   216ac:	cmp	r0, #1
   216b0:	str	r0, [sp, #16]
   216b4:	blt	217c0 <__assert_fail@plt+0x1004c>
   216b8:	mov	r5, #0
   216bc:	b	21768 <__assert_fail@plt+0xfff4>
   216c0:	cmp	r0, #1
   216c4:	blt	217c0 <__assert_fail@plt+0x1004c>
   216c8:	mov	r5, #0
   216cc:	ldr	r1, [r6, #8]
   216d0:	ldr	r1, [r1, r5, lsl #2]
   216d4:	add	r3, r2, r1, lsl #3
   216d8:	ldr	r3, [r3, #4]
   216dc:	and	r3, r3, #254	; 0xfe
   216e0:	orr	r3, r3, #1
   216e4:	cmp	r3, #9
   216e8:	ldreq	r2, [r2, r1, lsl #3]
   216ec:	cmpeq	sl, r2
   216f0:	beq	21708 <__assert_fail@plt+0xff94>
   216f4:	add	r5, r5, #1
   216f8:	cmp	r5, r0
   216fc:	bge	217c0 <__assert_fail@plt+0x1004c>
   21700:	ldr	r2, [r7]
   21704:	b	216cc <__assert_fail@plt+0xff58>
   21708:	ldr	r3, [sp, #36]	; 0x24
   2170c:	mov	r0, r7
   21710:	mov	r2, r6
   21714:	bl	21d58 <__assert_fail@plt+0x105e4>
   21718:	cmp	r0, #0
   2171c:	bne	21b20 <__assert_fail@plt+0x103ac>
   21720:	ldr	r0, [r6, #4]
   21724:	ldr	r4, [sp, #40]	; 0x28
   21728:	ldr	ip, [sp, #48]	; 0x30
   2172c:	ldr	r7, [sp, #28]
   21730:	b	216f4 <__assert_fail@plt+0xff80>
   21734:	mov	r1, r6
   21738:	ldr	r6, [sp, #20]
   2173c:	ldr	r3, [sp, #36]	; 0x24
   21740:	mov	r0, r7
   21744:	mov	r2, r6
   21748:	bl	21d58 <__assert_fail@plt+0x105e4>
   2174c:	cmp	r0, #0
   21750:	bne	21b20 <__assert_fail@plt+0x103ac>
   21754:	ldr	r0, [r6, #4]
   21758:	ldr	r7, [sp, #28]
   2175c:	sub	r5, r5, #1
   21760:	str	r0, [sp, #16]
   21764:	b	217a8 <__assert_fail@plt+0x10034>
   21768:	ldr	r0, [r6, #8]
   2176c:	mov	r1, sl
   21770:	ldr	r6, [r0, r5, lsl #2]
   21774:	ldr	r0, [r7, #28]
   21778:	add	r9, r6, r6, lsl #1
   2177c:	add	r0, r0, r9, lsl #2
   21780:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21784:	cmp	r0, #0
   21788:	bne	217a4 <__assert_fail@plt+0x10030>
   2178c:	ldr	r0, [r7, #24]
   21790:	mov	r1, sl
   21794:	add	r0, r0, r9, lsl #2
   21798:	bl	1d86c <__assert_fail@plt+0xc0f8>
   2179c:	cmp	r0, #0
   217a0:	beq	21734 <__assert_fail@plt+0xffc0>
   217a4:	ldr	r6, [sp, #20]
   217a8:	ldr	r0, [sp, #16]
   217ac:	ldr	r4, [sp, #40]	; 0x28
   217b0:	ldr	ip, [sp, #48]	; 0x30
   217b4:	add	r5, r5, #1
   217b8:	cmp	r5, r0
   217bc:	blt	21768 <__assert_fail@plt+0xfff4>
   217c0:	ldr	r0, [ip, #20]
   217c4:	add	r8, r8, #1
   217c8:	cmp	r8, r0
   217cc:	blt	215bc <__assert_fail@plt+0xfe48>
   217d0:	ldr	r8, [sp, #12]
   217d4:	mov	r0, #0
   217d8:	str	r0, [sp, #52]	; 0x34
   217dc:	add	r0, sp, #52	; 0x34
   217e0:	mov	r1, r7
   217e4:	mov	r2, r6
   217e8:	bl	1ffcc <__assert_fail@plt+0xe858>
   217ec:	ldr	r1, [sp, #48]	; 0x30
   217f0:	ldr	r1, [r1]
   217f4:	str	r0, [r1, r4, lsl #2]
   217f8:	ldr	r9, [sp, #52]	; 0x34
   217fc:	cmp	r9, #0
   21800:	beq	21810 <__assert_fail@plt+0x1009c>
   21804:	b	21b14 <__assert_fail@plt+0x103a0>
   21808:	ldr	r1, [r1]
   2180c:	str	r3, [r1, r4, lsl #2]
   21810:	cmp	r8, #0
   21814:	beq	21b10 <__assert_fail@plt+0x1039c>
   21818:	ldr	r0, [sp, #44]	; 0x2c
   2181c:	ldr	r1, [sp, #40]	; 0x28
   21820:	ldr	r0, [r0, #100]	; 0x64
   21824:	ldr	r0, [r0, r1, lsl #2]
   21828:	ldrb	r0, [r0, #52]	; 0x34
   2182c:	tst	r0, #64	; 0x40
   21830:	beq	21b10 <__assert_fail@plt+0x1039c>
   21834:	ldr	r0, [sp, #44]	; 0x2c
   21838:	ldr	r9, [sp, #40]	; 0x28
   2183c:	ldr	r8, [r0, #84]	; 0x54
   21840:	mov	r1, r9
   21844:	bl	1f280 <__assert_fail@plt+0xdb0c>
   21848:	cmn	r0, #1
   2184c:	str	r0, [sp, #16]
   21850:	beq	21b00 <__assert_fail@plt+0x1038c>
   21854:	ldr	r0, [sp, #36]	; 0x24
   21858:	mov	r6, #0
   2185c:	str	r6, [sp, #56]	; 0x38
   21860:	ldr	r0, [r0, #4]
   21864:	cmp	r0, #0
   21868:	ble	21b0c <__assert_fail@plt+0x10398>
   2186c:	ldr	r3, [sp, #48]	; 0x30
   21870:	add	r1, r9, #1
   21874:	mov	r7, #0
   21878:	str	r1, [sp, #8]
   2187c:	add	r1, sp, #56	; 0x38
   21880:	add	r1, r1, #16
   21884:	str	r1, [sp, #24]
   21888:	add	r1, r3, #16
   2188c:	str	r1, [sp, #28]
   21890:	ldr	r1, [sp, #16]
   21894:	add	r1, r1, r1, lsl #1
   21898:	str	r1, [sp, #12]
   2189c:	ldr	r1, [sp, #36]	; 0x24
   218a0:	ldr	r2, [r3, #8]
   218a4:	ldr	r1, [r1, #8]
   218a8:	ldr	sl, [r1, r7, lsl #2]
   218ac:	ldr	r1, [r8]
   218b0:	add	r1, r1, sl, lsl #3
   218b4:	cmp	sl, r2
   218b8:	ldrb	r1, [r1, #4]
   218bc:	bne	218d8 <__assert_fail@plt+0x10164>
   218c0:	cmp	r1, #4
   218c4:	bne	21ad0 <__assert_fail@plt+0x1035c>
   218c8:	ldr	r1, [r3, #12]
   218cc:	cmp	r1, r9
   218d0:	bne	218e0 <__assert_fail@plt+0x1016c>
   218d4:	b	21ad0 <__assert_fail@plt+0x1035c>
   218d8:	cmp	r1, #4
   218dc:	bne	21ad0 <__assert_fail@plt+0x1035c>
   218e0:	ldr	r0, [sp, #44]	; 0x2c
   218e4:	ldr	r1, [sp, #12]
   218e8:	str	r7, [sp, #20]
   218ec:	ldr	r7, [sp, #16]
   218f0:	str	r6, [sp, #32]
   218f4:	ldr	r0, [r0, #116]	; 0x74
   218f8:	add	r5, r0, r1, lsl #3
   218fc:	b	21a10 <__assert_fail@plt+0x1029c>
   21900:	ldr	r0, [sp, #32]
   21904:	cmp	r0, #0
   21908:	bne	2193c <__assert_fail@plt+0x101c8>
   2190c:	ldr	r0, [sp, #48]	; 0x30
   21910:	mov	r1, #12
   21914:	vld1.32	{d16-d17}, [r0], r1
   21918:	vld1.32	{d18-d19}, [r0]
   2191c:	add	r0, sp, #56	; 0x38
   21920:	vst1.64	{d16-d17}, [r0], r1
   21924:	ldr	r1, [sp, #28]
   21928:	vst1.32	{d18-d19}, [r0]
   2192c:	ldr	r0, [sp, #24]
   21930:	bl	1d7f0 <__assert_fail@plt+0xc07c>
   21934:	cmp	r0, #0
   21938:	bne	21b2c <__assert_fail@plt+0x103b8>
   2193c:	ldr	r4, [sp, #40]	; 0x28
   21940:	ldr	r0, [sp, #24]
   21944:	mov	r1, r7
   21948:	str	r4, [sp, #68]	; 0x44
   2194c:	str	sl, [sp, #64]	; 0x40
   21950:	bl	1d654 <__assert_fail@plt+0xbee0>
   21954:	cmp	r0, #0
   21958:	beq	21b3c <__assert_fail@plt+0x103c8>
   2195c:	ldr	r5, [sp, #56]	; 0x38
   21960:	ldr	r0, [sp, #44]	; 0x2c
   21964:	add	r1, sp, #56	; 0x38
   21968:	ldr	r4, [r5, r4, lsl #2]
   2196c:	bl	210f8 <__assert_fail@plt+0xf984>
   21970:	cmp	r0, #0
   21974:	bne	21b2c <__assert_fail@plt+0x103b8>
   21978:	ldr	r0, [sp, #48]	; 0x30
   2197c:	ldr	r1, [r0, #4]
   21980:	cmp	r1, #0
   21984:	beq	219a0 <__assert_fail@plt+0x1022c>
   21988:	ldr	r3, [sp, #8]
   2198c:	mov	r0, r8
   21990:	mov	r2, r5
   21994:	bl	21390 <__assert_fail@plt+0xfc1c>
   21998:	cmp	r0, #0
   2199c:	bne	21b2c <__assert_fail@plt+0x103b8>
   219a0:	ldr	r9, [sp, #40]	; 0x28
   219a4:	ldr	r0, [sp, #24]
   219a8:	mov	r1, r7
   219ac:	str	r5, [sp, #32]
   219b0:	str	r4, [r5, r9, lsl #2]
   219b4:	bl	1d86c <__assert_fail@plt+0xc0f8>
   219b8:	subs	r1, r0, #1
   219bc:	blt	219d4 <__assert_fail@plt+0x10260>
   219c0:	ldr	r2, [sp, #76]	; 0x4c
   219c4:	cmp	r2, r0
   219c8:	subge	r2, r2, #1
   219cc:	strge	r2, [sp, #76]	; 0x4c
   219d0:	bgt	219ec <__assert_fail@plt+0x10278>
   219d4:	ldr	r0, [sp, #44]	; 0x2c
   219d8:	add	r1, r7, r7, lsl #1
   219dc:	ldr	r0, [r0, #116]	; 0x74
   219e0:	add	r0, r0, r1, lsl #3
   219e4:	ldr	r3, [sp, #48]	; 0x30
   219e8:	b	21aac <__assert_fail@plt+0x10338>
   219ec:	ldr	r3, [sp, #80]	; 0x50
   219f0:	add	r0, r3, r0, lsl #2
   219f4:	ldr	r3, [r0]
   219f8:	add	r1, r1, #1
   219fc:	cmp	r1, r2
   21a00:	str	r3, [r0, #-4]
   21a04:	add	r0, r0, #4
   21a08:	blt	219f4 <__assert_fail@plt+0x10280>
   21a0c:	b	219d4 <__assert_fail@plt+0x10260>
   21a10:	ldr	r0, [r5]
   21a14:	cmp	r0, sl
   21a18:	bne	21aa8 <__assert_fail@plt+0x10334>
   21a1c:	ldr	r0, [r5, #8]
   21a20:	ldr	r1, [r5, #12]
   21a24:	subs	r0, r1, r0
   21a28:	add	r6, r0, r9
   21a2c:	beq	21a3c <__assert_fail@plt+0x102c8>
   21a30:	ldr	r0, [r8, #12]
   21a34:	add	r0, r0, sl, lsl #2
   21a38:	b	21a4c <__assert_fail@plt+0x102d8>
   21a3c:	ldr	r0, [r8, #20]
   21a40:	add	r1, sl, sl, lsl #1
   21a44:	add	r0, r0, r1, lsl #2
   21a48:	ldr	r0, [r0, #8]
   21a4c:	ldr	r1, [r3, #12]
   21a50:	cmp	r6, r1
   21a54:	bgt	21aa8 <__assert_fail@plt+0x10334>
   21a58:	ldr	r1, [r3]
   21a5c:	ldr	r1, [r1, r6, lsl #2]
   21a60:	cmp	r1, #0
   21a64:	beq	21aa8 <__assert_fail@plt+0x10334>
   21a68:	ldr	r4, [r0]
   21a6c:	add	r0, r1, #4
   21a70:	mov	r1, r4
   21a74:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21a78:	cmp	r0, #0
   21a7c:	beq	21aa0 <__assert_fail@plt+0x1032c>
   21a80:	stm	sp, {r4, r6}
   21a84:	mov	r2, sl
   21a88:	mov	r3, r9
   21a8c:	ldr	r0, [sp, #44]	; 0x2c
   21a90:	ldr	r1, [sp, #28]
   21a94:	bl	21f68 <__assert_fail@plt+0x107f4>
   21a98:	cmp	r0, #0
   21a9c:	beq	21900 <__assert_fail@plt+0x1018c>
   21aa0:	mov	r0, r5
   21aa4:	b	219e4 <__assert_fail@plt+0x10270>
   21aa8:	mov	r0, r5
   21aac:	add	r5, r0, #24
   21ab0:	ldrb	r0, [r0, #20]
   21ab4:	add	r7, r7, #1
   21ab8:	cmp	r0, #0
   21abc:	bne	21a10 <__assert_fail@plt+0x1029c>
   21ac0:	ldr	r0, [sp, #36]	; 0x24
   21ac4:	ldr	r7, [sp, #20]
   21ac8:	ldr	r6, [sp, #32]
   21acc:	ldr	r0, [r0, #4]
   21ad0:	add	r7, r7, #1
   21ad4:	cmp	r7, r0
   21ad8:	blt	2189c <__assert_fail@plt+0x10128>
   21adc:	mov	r9, #0
   21ae0:	cmp	r6, #0
   21ae4:	beq	21af0 <__assert_fail@plt+0x1037c>
   21ae8:	ldr	r0, [sp, #80]	; 0x50
   21aec:	bl	13c04 <__assert_fail@plt+0x2490>
   21af0:	cmp	r9, #0
   21af4:	str	r9, [sp, #52]	; 0x34
   21af8:	moveq	r9, #0
   21afc:	b	21b14 <__assert_fail@plt+0x103a0>
   21b00:	mov	r0, #0
   21b04:	str	r0, [sp, #52]	; 0x34
   21b08:	b	21b10 <__assert_fail@plt+0x1039c>
   21b0c:	str	r6, [sp, #52]	; 0x34
   21b10:	mov	r9, #0
   21b14:	mov	r0, r9
   21b18:	sub	sp, fp, #28
   21b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b20:	mov	r9, r0
   21b24:	str	r9, [sp, #52]	; 0x34
   21b28:	b	21b14 <__assert_fail@plt+0x103a0>
   21b2c:	mov	r9, r0
   21b30:	b	21b40 <__assert_fail@plt+0x103cc>
   21b34:	str	r0, [sp, #56]	; 0x38
   21b38:	b	21b24 <__assert_fail@plt+0x103b0>
   21b3c:	mov	r9, #12
   21b40:	ldr	r6, [sp, #56]	; 0x38
   21b44:	b	21ae0 <__assert_fail@plt+0x1036c>
   21b48:	mov	r9, r0
   21b4c:	b	21b14 <__assert_fail@plt+0x103a0>
   21b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b54:	add	fp, sp, #28
   21b58:	sub	sp, sp, #12
   21b5c:	ldr	ip, [r1, #4]
   21b60:	mov	sl, r0
   21b64:	mov	r0, #0
   21b68:	cmp	ip, #0
   21b6c:	ldrne	lr, [r2, #4]
   21b70:	cmpne	lr, #0
   21b74:	beq	21d48 <__assert_fail@plt+0x105d4>
   21b78:	mov	r7, r1
   21b7c:	ldr	r1, [sl, #4]
   21b80:	ldr	r6, [sl]
   21b84:	add	r3, lr, ip
   21b88:	add	r4, r1, r3
   21b8c:	cmp	r4, r6
   21b90:	ble	21bd4 <__assert_fail@plt+0x10460>
   21b94:	mov	r5, r2
   21b98:	mov	r2, sl
   21b9c:	add	r4, r6, r3
   21ba0:	ldr	r0, [r2, #8]!
   21ba4:	lsl	r1, r4, #2
   21ba8:	str	r2, [sp, #8]
   21bac:	bl	23c14 <__assert_fail@plt+0x124a0>
   21bb0:	cmp	r0, #0
   21bb4:	beq	21d50 <__assert_fail@plt+0x105dc>
   21bb8:	str	r4, [sl]
   21bbc:	str	r0, [sl, #8]
   21bc0:	mov	r2, r5
   21bc4:	ldr	r1, [sl, #4]
   21bc8:	ldr	lr, [r5, #4]
   21bcc:	ldr	ip, [r7, #4]
   21bd0:	b	21bdc <__assert_fail@plt+0x10468>
   21bd4:	add	r0, sl, #8
   21bd8:	str	r0, [sp, #8]
   21bdc:	str	r2, [sp, #4]
   21be0:	ldr	r2, [r2, #8]
   21be4:	ldr	r4, [r7, #8]
   21be8:	add	r3, ip, r1
   21bec:	sub	r8, r1, #1
   21bf0:	add	r9, r3, lr
   21bf4:	sub	ip, ip, #1
   21bf8:	sub	r3, lr, #1
   21bfc:	ldr	r1, [r2, r3, lsl #2]
   21c00:	ldr	r6, [r4, ip, lsl #2]
   21c04:	cmp	r6, r1
   21c08:	beq	21c34 <__assert_fail@plt+0x104c0>
   21c0c:	blt	21c24 <__assert_fail@plt+0x104b0>
   21c10:	sub	r5, ip, #1
   21c14:	cmp	ip, #0
   21c18:	mov	ip, r5
   21c1c:	bgt	21c00 <__assert_fail@plt+0x1048c>
   21c20:	b	21ca8 <__assert_fail@plt+0x10534>
   21c24:	cmp	lr, #2
   21c28:	mov	lr, r3
   21c2c:	bge	21bf8 <__assert_fail@plt+0x10484>
   21c30:	b	21ca8 <__assert_fail@plt+0x10534>
   21c34:	mov	r0, r9
   21c38:	cmp	r8, #0
   21c3c:	blt	21c80 <__assert_fail@plt+0x1050c>
   21c40:	ldr	r1, [sp, #8]
   21c44:	ldr	r9, [r1]
   21c48:	mov	r1, r8
   21c4c:	ldr	r5, [r9, r1, lsl #2]
   21c50:	cmp	r5, r6
   21c54:	ble	21c6c <__assert_fail@plt+0x104f8>
   21c58:	sub	r8, r1, #1
   21c5c:	cmp	r1, #0
   21c60:	mov	r1, r8
   21c64:	bgt	21c4c <__assert_fail@plt+0x104d8>
   21c68:	b	21c80 <__assert_fail@plt+0x1050c>
   21c6c:	mov	r8, r1
   21c70:	bne	21c80 <__assert_fail@plt+0x1050c>
   21c74:	mov	r8, r1
   21c78:	mov	r9, r0
   21c7c:	b	21c94 <__assert_fail@plt+0x10520>
   21c80:	ldr	r1, [sp, #8]
   21c84:	mov	r9, r0
   21c88:	sub	r9, r0, #1
   21c8c:	ldr	r1, [r1]
   21c90:	str	r6, [r1, r9, lsl #2]
   21c94:	cmp	ip, #1
   21c98:	blt	21ca8 <__assert_fail@plt+0x10534>
   21c9c:	cmp	lr, #2
   21ca0:	mov	lr, r3
   21ca4:	bge	21bf4 <__assert_fail@plt+0x10480>
   21ca8:	ldr	lr, [r7, #4]
   21cac:	ldr	r7, [sp, #4]
   21cb0:	ldr	r2, [sl, #4]
   21cb4:	ldr	r0, [sl, #8]
   21cb8:	ldr	r4, [r7, #4]
   21cbc:	subs	r1, r2, #1
   21cc0:	add	r3, r1, lr
   21cc4:	add	r3, r3, r4
   21cc8:	sub	r5, r3, r9
   21ccc:	add	r6, r5, #1
   21cd0:	cmpge	r5, #0
   21cd4:	add	r7, r6, r2
   21cd8:	str	r7, [sl, #4]
   21cdc:	blt	21d34 <__assert_fail@plt+0x105c0>
   21ce0:	add	r2, r2, r4
   21ce4:	add	r2, r2, lr
   21ce8:	sub	r2, r2, r9
   21cec:	add	r7, r0, r2, lsl #2
   21cf0:	ldr	r2, [r0, r1, lsl #2]
   21cf4:	ldr	r5, [r0, r3, lsl #2]
   21cf8:	cmp	r5, r2
   21cfc:	bgt	21d18 <__assert_fail@plt+0x105a4>
   21d00:	str	r2, [r7, r1, lsl #2]
   21d04:	sub	r2, r1, #1
   21d08:	cmp	r1, #0
   21d0c:	mov	r1, r2
   21d10:	bgt	21cf0 <__assert_fail@plt+0x1057c>
   21d14:	b	21d34 <__assert_fail@plt+0x105c0>
   21d18:	str	r5, [r7, r1, lsl #2]
   21d1c:	sub	r7, r7, #4
   21d20:	subs	r6, r6, #1
   21d24:	sub	r3, r3, #1
   21d28:	mov	r2, #0
   21d2c:	bne	21cf0 <__assert_fail@plt+0x1057c>
   21d30:	b	21d38 <__assert_fail@plt+0x105c4>
   21d34:	mov	r2, r6
   21d38:	add	r1, r0, r9, lsl #2
   21d3c:	lsl	r2, r2, #2
   21d40:	bl	1148c <memcpy@plt>
   21d44:	mov	r0, #0
   21d48:	sub	sp, fp, #28
   21d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d50:	mov	r0, #12
   21d54:	b	21d48 <__assert_fail@plt+0x105d4>
   21d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d5c:	add	fp, sp, #28
   21d60:	sub	sp, sp, #36	; 0x24
   21d64:	mov	r5, r2
   21d68:	mov	r2, r0
   21d6c:	ldr	r0, [r0, #28]
   21d70:	str	r1, [sp, #20]
   21d74:	add	r1, r1, r1, lsl #1
   21d78:	mov	r9, #0
   21d7c:	str	r3, [sp, #4]
   21d80:	str	r9, [sp, #28]
   21d84:	str	r9, [sp, #24]
   21d88:	str	r9, [sp, #32]
   21d8c:	add	r1, r0, r1, lsl #2
   21d90:	mov	r0, r1
   21d94:	ldr	r4, [r0, #4]!
   21d98:	cmp	r4, #1
   21d9c:	blt	21f40 <__assert_fail@plt+0x107cc>
   21da0:	add	r9, r1, #8
   21da4:	mov	r6, #0
   21da8:	str	r0, [sp, #8]
   21dac:	str	r1, [sp, #16]
   21db0:	ldr	r0, [r9]
   21db4:	ldr	r1, [sp, #20]
   21db8:	ldr	r0, [r0, r6, lsl #2]
   21dbc:	cmp	r0, r1
   21dc0:	beq	21e98 <__assert_fail@plt+0x10724>
   21dc4:	ldr	r1, [r2]
   21dc8:	add	r1, r1, r0, lsl #3
   21dcc:	ldrb	r1, [r1, #4]
   21dd0:	tst	r1, #8
   21dd4:	beq	21e98 <__assert_fail@plt+0x10724>
   21dd8:	ldr	r1, [r2, #20]
   21ddc:	add	r0, r0, r0, lsl #1
   21de0:	mvn	sl, #0
   21de4:	mov	r7, r2
   21de8:	str	r0, [sp, #12]
   21dec:	add	r0, r1, r0, lsl #2
   21df0:	ldr	r1, [r0, #4]
   21df4:	ldr	r0, [r0, #8]
   21df8:	cmp	r1, #2
   21dfc:	ldr	r8, [r0]
   21e00:	ldrge	sl, [r0, #4]
   21e04:	ldr	r0, [sp, #16]
   21e08:	mov	r1, r8
   21e0c:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21e10:	cmp	r0, #0
   21e14:	mov	r2, r7
   21e18:	beq	21e54 <__assert_fail@plt+0x106e0>
   21e1c:	cmp	sl, #1
   21e20:	blt	21e98 <__assert_fail@plt+0x10724>
   21e24:	ldr	r0, [sp, #16]
   21e28:	mov	r1, sl
   21e2c:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21e30:	cmp	r0, #0
   21e34:	bne	21e94 <__assert_fail@plt+0x10720>
   21e38:	mov	r0, r5
   21e3c:	mov	r1, sl
   21e40:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21e44:	cmp	r0, #0
   21e48:	mov	r2, r7
   21e4c:	bne	21e6c <__assert_fail@plt+0x106f8>
   21e50:	b	21e98 <__assert_fail@plt+0x10724>
   21e54:	mov	r0, r5
   21e58:	mov	r1, r8
   21e5c:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21e60:	mov	r2, r7
   21e64:	cmp	r0, #0
   21e68:	beq	21e1c <__assert_fail@plt+0x106a8>
   21e6c:	ldr	r0, [r2, #28]
   21e70:	ldr	r1, [sp, #12]
   21e74:	add	r2, r0, r1, lsl #2
   21e78:	ldr	r1, [sp, #4]
   21e7c:	add	r0, sp, #24
   21e80:	bl	21b50 <__assert_fail@plt+0x103dc>
   21e84:	cmp	r0, #0
   21e88:	bne	21f54 <__assert_fail@plt+0x107e0>
   21e8c:	ldr	r0, [sp, #8]
   21e90:	ldr	r4, [r0]
   21e94:	mov	r2, r7
   21e98:	add	r6, r6, #1
   21e9c:	cmp	r6, r4
   21ea0:	blt	21db0 <__assert_fail@plt+0x1063c>
   21ea4:	ldr	sl, [sp, #8]
   21ea8:	ldr	r0, [sp, #16]
   21eac:	cmp	r4, #1
   21eb0:	mov	r9, #0
   21eb4:	blt	21f40 <__assert_fail@plt+0x107cc>
   21eb8:	ldr	r7, [r0, #8]
   21ebc:	mov	r4, #0
   21ec0:	add	r8, sp, #24
   21ec4:	b	21ef0 <__assert_fail@plt+0x1077c>
   21ec8:	ldr	r2, [r5, #8]
   21ecc:	add	r0, r2, r0, lsl #2
   21ed0:	ldr	r2, [r0]
   21ed4:	add	r1, r1, #1
   21ed8:	str	r2, [r0, #-4]
   21edc:	add	r0, r0, #4
   21ee0:	ldr	r2, [r5, #4]
   21ee4:	cmp	r1, r2
   21ee8:	blt	21ed0 <__assert_fail@plt+0x1075c>
   21eec:	b	21f30 <__assert_fail@plt+0x107bc>
   21ef0:	ldr	r6, [r7, r4, lsl #2]
   21ef4:	mov	r0, r8
   21ef8:	mov	r1, r6
   21efc:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21f00:	cmp	r0, #0
   21f04:	bne	21f30 <__assert_fail@plt+0x107bc>
   21f08:	mov	r0, r5
   21f0c:	mov	r1, r6
   21f10:	bl	1d86c <__assert_fail@plt+0xc0f8>
   21f14:	subs	r1, r0, #1
   21f18:	blt	21f30 <__assert_fail@plt+0x107bc>
   21f1c:	ldr	r2, [r5, #4]
   21f20:	cmp	r2, r0
   21f24:	subge	r2, r2, #1
   21f28:	strge	r2, [r5, #4]
   21f2c:	bgt	21ec8 <__assert_fail@plt+0x10754>
   21f30:	ldr	r0, [sl]
   21f34:	add	r4, r4, #1
   21f38:	cmp	r4, r0
   21f3c:	blt	21ef0 <__assert_fail@plt+0x1077c>
   21f40:	ldr	r0, [sp, #32]
   21f44:	bl	13c04 <__assert_fail@plt+0x2490>
   21f48:	mov	r0, r9
   21f4c:	sub	sp, fp, #28
   21f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f54:	mov	r4, r0
   21f58:	ldr	r0, [sp, #32]
   21f5c:	bl	13c04 <__assert_fail@plt+0x2490>
   21f60:	mov	r9, r4
   21f64:	b	21f48 <__assert_fail@plt+0x107d4>
   21f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f6c:	add	fp, sp, #28
   21f70:	sub	sp, sp, #20
   21f74:	mov	r6, r1
   21f78:	mov	r1, r3
   21f7c:	str	r2, [sp, #12]
   21f80:	mov	r7, r0
   21f84:	str	r3, [sp, #16]
   21f88:	bl	1f280 <__assert_fail@plt+0xdb0c>
   21f8c:	ldr	r1, [fp, #12]
   21f90:	str	r0, [sp, #8]
   21f94:	mov	r0, r7
   21f98:	bl	1f280 <__assert_fail@plt+0xdb0c>
   21f9c:	mov	r4, r0
   21fa0:	ldr	r0, [r6, #4]
   21fa4:	cmp	r0, #1
   21fa8:	blt	2202c <__assert_fail@plt+0x108b8>
   21fac:	ldr	sl, [r7, #84]	; 0x54
   21fb0:	mov	r5, #0
   21fb4:	ldr	r0, [r6, #8]
   21fb8:	ldr	r2, [r7, #116]	; 0x74
   21fbc:	ldr	r3, [sp, #12]
   21fc0:	ldr	r1, [r0, r5, lsl #2]
   21fc4:	add	r0, r1, r1, lsl #1
   21fc8:	ldr	r0, [r2, r0, lsl #3]
   21fcc:	ldr	r2, [sl]
   21fd0:	ldr	r9, [r2, r0, lsl #3]
   21fd4:	ldr	r0, [sp, #16]
   21fd8:	str	r0, [sp]
   21fdc:	ldr	r0, [sp, #8]
   21fe0:	mov	r2, r9
   21fe4:	str	r0, [sp, #4]
   21fe8:	mov	r0, r7
   21fec:	bl	22040 <__assert_fail@plt+0x108cc>
   21ff0:	mov	r8, r0
   21ff4:	ldr	r0, [r6, #8]
   21ff8:	ldr	r3, [fp, #8]
   21ffc:	mov	r2, r9
   22000:	ldr	r1, [r0, r5, lsl #2]
   22004:	ldr	r0, [fp, #12]
   22008:	stm	sp, {r0, r4}
   2200c:	mov	r0, r7
   22010:	bl	22040 <__assert_fail@plt+0x108cc>
   22014:	cmp	r0, r8
   22018:	bne	22034 <__assert_fail@plt+0x108c0>
   2201c:	ldr	r0, [r6, #4]
   22020:	add	r5, r5, #1
   22024:	cmp	r5, r0
   22028:	blt	21fb4 <__assert_fail@plt+0x10840>
   2202c:	mov	r0, #0
   22030:	b	22038 <__assert_fail@plt+0x108c4>
   22034:	mov	r0, #1
   22038:	sub	sp, fp, #28
   2203c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22040:	push	{r4, r5, fp, lr}
   22044:	add	fp, sp, #8
   22048:	sub	sp, sp, #8
   2204c:	ldr	r4, [r0, #116]	; 0x74
   22050:	add	r1, r1, r1, lsl #1
   22054:	ldr	lr, [fp, #8]
   22058:	add	r4, r4, r1, lsl #3
   2205c:	mvn	r1, #0
   22060:	ldr	ip, [r4, #8]
   22064:	cmp	ip, lr
   22068:	bgt	220b8 <__assert_fail@plt+0x10944>
   2206c:	ldr	r4, [r4, #12]
   22070:	mov	r1, #1
   22074:	cmp	r4, lr
   22078:	blt	220b8 <__assert_fail@plt+0x10944>
   2207c:	sub	r1, r4, lr
   22080:	mov	r5, #1
   22084:	cmp	ip, lr
   22088:	clz	r1, r1
   2208c:	lsr	r4, r1, #5
   22090:	lsl	r1, r4, #1
   22094:	orreq	r1, r5, r4, lsl #1
   22098:	cmp	r1, #0
   2209c:	beq	220b4 <__assert_fail@plt+0x10940>
   220a0:	ldr	r5, [fp, #12]
   220a4:	str	r5, [sp]
   220a8:	bl	220c4 <__assert_fail@plt+0x10950>
   220ac:	sub	sp, fp, #8
   220b0:	pop	{r4, r5, fp, pc}
   220b4:	mov	r1, #0
   220b8:	mov	r0, r1
   220bc:	sub	sp, fp, #8
   220c0:	pop	{r4, r5, fp, pc}
   220c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220c8:	add	fp, sp, #28
   220cc:	sub	sp, sp, #36	; 0x24
   220d0:	ldr	r4, [r0, #84]	; 0x54
   220d4:	mov	r7, r0
   220d8:	mov	r5, r1
   220dc:	add	r1, r3, r3, lsl #1
   220e0:	str	r3, [sp, #32]
   220e4:	ldr	r0, [r4, #24]
   220e8:	add	r1, r0, r1, lsl #2
   220ec:	mov	lr, r1
   220f0:	ldr	r0, [lr, #4]!
   220f4:	cmp	r0, #1
   220f8:	blt	22294 <__assert_fail@plt+0x10b20>
   220fc:	mov	ip, #1
   22100:	mov	r6, r2
   22104:	and	r3, r5, #2
   22108:	mov	sl, #0
   2210c:	mvn	r2, ip, lsl r2
   22110:	cmp	r6, #31
   22114:	str	r3, [sp, #16]
   22118:	str	r2, [sp, #24]
   2211c:	lsl	r2, ip, r6
   22120:	and	ip, r5, #1
   22124:	str	r2, [sp, #28]
   22128:	mov	r2, #0
   2212c:	str	ip, [sp, #12]
   22130:	movwgt	r2, #1
   22134:	orr	r2, r2, r3, lsr #1
   22138:	add	r3, r1, #8
   2213c:	str	r2, [sp, #20]
   22140:	stmib	sp, {r3, lr}
   22144:	ldr	r1, [r3]
   22148:	ldr	r9, [r1, sl, lsl #2]
   2214c:	ldr	r1, [r4]
   22150:	add	r2, r1, r9, lsl #3
   22154:	ldrb	r2, [r2, #4]
   22158:	cmp	r2, #9
   2215c:	beq	22258 <__assert_fail@plt+0x10ae4>
   22160:	cmp	r2, #8
   22164:	beq	22274 <__assert_fail@plt+0x10b00>
   22168:	cmp	r2, #4
   2216c:	bne	22288 <__assert_fail@plt+0x10b14>
   22170:	ldr	r1, [fp, #8]
   22174:	cmn	r1, #1
   22178:	beq	22288 <__assert_fail@plt+0x10b14>
   2217c:	ldr	r1, [fp, #8]
   22180:	ldr	r0, [r7, #116]	; 0x74
   22184:	add	r1, r1, r1, lsl #1
   22188:	add	r0, r0, r1, lsl #3
   2218c:	add	r8, r0, #16
   22190:	ldr	r0, [r8, #-16]
   22194:	cmp	r0, r9
   22198:	bne	22234 <__assert_fail@plt+0x10ac0>
   2219c:	cmp	r6, #31
   221a0:	bgt	221b4 <__assert_fail@plt+0x10a40>
   221a4:	ldr	r0, [r8]
   221a8:	ldr	r1, [sp, #28]
   221ac:	tst	r0, r1
   221b0:	beq	22234 <__assert_fail@plt+0x10ac0>
   221b4:	ldr	r0, [r4, #20]
   221b8:	add	r1, r9, r9, lsl #1
   221bc:	add	r0, r0, r1, lsl #2
   221c0:	ldr	r0, [r0, #8]
   221c4:	ldr	r3, [r0]
   221c8:	ldr	r0, [sp, #32]
   221cc:	cmp	r3, r0
   221d0:	beq	2229c <__assert_fail@plt+0x10b28>
   221d4:	ldr	r0, [fp, #8]
   221d8:	mov	r1, r5
   221dc:	mov	r2, r6
   221e0:	str	r0, [sp]
   221e4:	mov	r0, r7
   221e8:	bl	220c4 <__assert_fail@plt+0x10950>
   221ec:	cmp	r0, #0
   221f0:	beq	22208 <__assert_fail@plt+0x10a94>
   221f4:	cmn	r0, #1
   221f8:	beq	222b4 <__assert_fail@plt+0x10b40>
   221fc:	cmp	r6, #31
   22200:	ble	22224 <__assert_fail@plt+0x10ab0>
   22204:	b	22234 <__assert_fail@plt+0x10ac0>
   22208:	ldr	r0, [sp, #20]
   2220c:	cmp	r0, #0
   22210:	beq	22224 <__assert_fail@plt+0x10ab0>
   22214:	ldr	r0, [sp, #16]
   22218:	cmp	r0, #0
   2221c:	beq	22234 <__assert_fail@plt+0x10ac0>
   22220:	b	222a8 <__assert_fail@plt+0x10b34>
   22224:	ldr	r0, [r8]
   22228:	ldr	r1, [sp, #24]
   2222c:	and	r0, r0, r1
   22230:	str	r0, [r8]
   22234:	ldrb	r0, [r8, #4]
   22238:	add	r8, r8, #24
   2223c:	cmp	r0, #0
   22240:	bne	22190 <__assert_fail@plt+0x10a1c>
   22244:	ldr	lr, [sp, #8]
   22248:	ldr	ip, [sp, #12]
   2224c:	ldr	r3, [sp, #4]
   22250:	ldr	r0, [lr]
   22254:	b	22288 <__assert_fail@plt+0x10b14>
   22258:	ldr	r2, [sp, #16]
   2225c:	cmp	r2, #0
   22260:	beq	22288 <__assert_fail@plt+0x10b14>
   22264:	ldr	r1, [r1, r9, lsl #3]
   22268:	cmp	r1, r6
   2226c:	bne	22288 <__assert_fail@plt+0x10b14>
   22270:	b	222a8 <__assert_fail@plt+0x10b34>
   22274:	cmp	ip, #0
   22278:	beq	22288 <__assert_fail@plt+0x10b14>
   2227c:	ldr	r1, [r1, r9, lsl #3]
   22280:	cmp	r1, r6
   22284:	beq	222b0 <__assert_fail@plt+0x10b3c>
   22288:	add	sl, sl, #1
   2228c:	cmp	sl, r0
   22290:	blt	22144 <__assert_fail@plt+0x109d0>
   22294:	ubfx	r0, r5, #1, #1
   22298:	b	222b4 <__assert_fail@plt+0x10b40>
   2229c:	ldr	r0, [sp, #12]
   222a0:	rsb	r0, r0, #0
   222a4:	b	222b4 <__assert_fail@plt+0x10b40>
   222a8:	mov	r0, #0
   222ac:	b	222b4 <__assert_fail@plt+0x10b40>
   222b0:	mvn	r0, #0
   222b4:	sub	sp, fp, #28
   222b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222bc:	cmp	r0, #0
   222c0:	bxeq	lr
   222c4:	push	{r4, r5, r6, sl, fp, lr}
   222c8:	add	fp, sp, #16
   222cc:	ldr	r1, [r0]
   222d0:	mov	r4, r0
   222d4:	ldr	r0, [r0, #8]
   222d8:	cmp	r1, #1
   222dc:	blt	2231c <__assert_fail@plt+0x10ba8>
   222e0:	mov	r5, #0
   222e4:	mov	r6, #0
   222e8:	add	r0, r0, r5
   222ec:	ldr	r0, [r0, #20]
   222f0:	bl	13c04 <__assert_fail@plt+0x2490>
   222f4:	ldr	r0, [r4, #8]
   222f8:	add	r0, r0, r5
   222fc:	ldr	r0, [r0, #8]
   22300:	bl	13c04 <__assert_fail@plt+0x2490>
   22304:	ldr	r1, [r4]
   22308:	ldr	r0, [r4, #8]
   2230c:	add	r6, r6, #1
   22310:	add	r5, r5, #24
   22314:	cmp	r6, r1
   22318:	blt	222e8 <__assert_fail@plt+0x10b74>
   2231c:	pop	{r4, r5, r6, sl, fp, lr}
   22320:	b	13c04 <__assert_fail@plt+0x2490>
   22324:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22328:	add	fp, sp, #24
   2232c:	mov	r4, r0
   22330:	mvn	r0, #0
   22334:	cmp	r4, #0
   22338:	beq	223d8 <__assert_fail@plt+0x10c64>
   2233c:	mov	r5, r2
   22340:	ldr	r2, [r4]
   22344:	cmp	r2, #0
   22348:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2234c:	sub	r0, r2, #1
   22350:	ldr	r9, [fp, #12]
   22354:	ldr	r8, [fp, #8]
   22358:	lsl	r7, r5, #3
   2235c:	str	r0, [r4]
   22360:	add	r6, r0, r0, lsl #1
   22364:	ldr	r2, [r4, #8]
   22368:	ldr	r0, [r2, r6, lsl #3]!
   2236c:	str	r0, [r1]
   22370:	mov	r0, r3
   22374:	ldr	r1, [r2, #8]
   22378:	mov	r2, r7
   2237c:	bl	1148c <memcpy@plt>
   22380:	ldr	r0, [r4, #8]
   22384:	mov	r2, r7
   22388:	add	r0, r0, r6, lsl #3
   2238c:	ldr	r0, [r0, #8]
   22390:	add	r1, r0, r5, lsl #3
   22394:	mov	r0, r8
   22398:	bl	1148c <memcpy@plt>
   2239c:	ldr	r0, [r9, #8]
   223a0:	bl	13c04 <__assert_fail@plt+0x2490>
   223a4:	ldr	r0, [r4, #8]
   223a8:	add	r0, r0, r6, lsl #3
   223ac:	ldr	r0, [r0, #8]
   223b0:	bl	13c04 <__assert_fail@plt+0x2490>
   223b4:	ldr	r0, [r4, #8]
   223b8:	add	r0, r0, r6, lsl #3
   223bc:	vldr	d16, [r0, #12]
   223c0:	ldr	r0, [r0, #20]
   223c4:	str	r0, [r9, #8]
   223c8:	vstr	d16, [r9]
   223cc:	ldr	r0, [r4, #8]
   223d0:	add	r0, r0, r6, lsl #3
   223d4:	ldr	r0, [r0, #4]
   223d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   223dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   223e0:	add	fp, sp, #24
   223e4:	movw	r8, #0
   223e8:	mov	r6, r2
   223ec:	mov	r4, r1
   223f0:	mov	r5, r0
   223f4:	movt	r8, #32752	; 0x7ff0
   223f8:	mov	r0, r5
   223fc:	mov	r1, r4
   22400:	mov	r2, r6
   22404:	bl	1142c <read@plt>
   22408:	mov	r7, r0
   2240c:	cmn	r0, #1
   22410:	bgt	22438 <__assert_fail@plt+0x10cc4>
   22414:	bl	11630 <__errno_location@plt>
   22418:	ldr	r0, [r0]
   2241c:	cmp	r0, #4
   22420:	beq	223f8 <__assert_fail@plt+0x10c84>
   22424:	cmp	r6, r8
   22428:	bls	22438 <__assert_fail@plt+0x10cc4>
   2242c:	cmp	r0, #22
   22430:	mov	r6, r8
   22434:	beq	223f8 <__assert_fail@plt+0x10c84>
   22438:	mov	r0, r7
   2243c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22440:	mov	r1, #0
   22444:	mov	r2, #3
   22448:	b	23da0 <__assert_fail@plt+0x1262c>
   2244c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22450:	add	fp, sp, #24
   22454:	sub	sp, sp, #32
   22458:	ldr	r6, [fp, #12]
   2245c:	ldr	r7, [fp, #8]
   22460:	mov	r4, r2
   22464:	mov	r8, r0
   22468:	cmp	r1, #0
   2246c:	beq	22494 <__assert_fail@plt+0x10d20>
   22470:	movw	r2, #21329	; 0x5351
   22474:	mov	r5, r1
   22478:	str	r3, [sp, #4]
   2247c:	str	r4, [sp]
   22480:	mov	r0, r8
   22484:	mov	r1, #1
   22488:	movt	r2, #2
   2248c:	mov	r3, r5
   22490:	b	224ac <__assert_fail@plt+0x10d38>
   22494:	movw	r2, #21341	; 0x535d
   22498:	str	r3, [sp]
   2249c:	mov	r0, r8
   224a0:	mov	r1, #1
   224a4:	mov	r3, r4
   224a8:	movt	r2, #2
   224ac:	bl	1169c <__fprintf_chk@plt>
   224b0:	movw	r1, #21348	; 0x5364
   224b4:	mov	r0, #0
   224b8:	mov	r2, #5
   224bc:	movt	r1, #2
   224c0:	bl	114ec <dcgettext@plt>
   224c4:	movw	r2, #22066	; 0x5632
   224c8:	mov	r3, r0
   224cc:	movw	r0, #2022	; 0x7e6
   224d0:	mov	r1, #1
   224d4:	str	r0, [sp]
   224d8:	movt	r2, #2
   224dc:	mov	r0, r8
   224e0:	bl	1169c <__fprintf_chk@plt>
   224e4:	movw	r4, #18834	; 0x4992
   224e8:	mov	r1, r8
   224ec:	movt	r4, #2
   224f0:	mov	r0, r4
   224f4:	bl	113e4 <fputs_unlocked@plt>
   224f8:	movw	r1, #21352	; 0x5368
   224fc:	mov	r0, #0
   22500:	mov	r2, #5
   22504:	movt	r1, #2
   22508:	bl	114ec <dcgettext@plt>
   2250c:	movw	r3, #21523	; 0x5413
   22510:	mov	r2, r0
   22514:	mov	r0, r8
   22518:	mov	r1, #1
   2251c:	movt	r3, #2
   22520:	bl	1169c <__fprintf_chk@plt>
   22524:	mov	r0, r4
   22528:	mov	r1, r8
   2252c:	bl	113e4 <fputs_unlocked@plt>
   22530:	cmp	r6, #9
   22534:	bhi	22598 <__assert_fail@plt+0x10e24>
   22538:	add	r0, pc, #0
   2253c:	ldr	pc, [r0, r6, lsl #2]
   22540:	andeq	r2, r2, r0, ror r7
   22544:	andeq	r2, r2, r8, ror #10
   22548:	andeq	r2, r2, r4, lsr #11
   2254c:	andeq	r2, r2, ip, asr #11
   22550:	strdeq	r2, [r2], -r4
   22554:	andeq	r2, r2, ip, lsl r6
   22558:	andeq	r2, r2, r4, asr #12
   2255c:	andeq	r2, r2, ip, ror r6
   22560:	andeq	r2, r2, ip, lsl r7
   22564:	andeq	r2, r2, r4, asr #13
   22568:	movw	r1, #21557	; 0x5435
   2256c:	mov	r0, #0
   22570:	mov	r2, #5
   22574:	movt	r1, #2
   22578:	bl	114ec <dcgettext@plt>
   2257c:	ldr	r3, [r7]
   22580:	mov	r2, r0
   22584:	mov	r0, r8
   22588:	mov	r1, #1
   2258c:	sub	sp, fp, #24
   22590:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22594:	b	1169c <__fprintf_chk@plt>
   22598:	movw	r1, #21876	; 0x5574
   2259c:	movt	r1, #2
   225a0:	b	226cc <__assert_fail@plt+0x10f58>
   225a4:	movw	r1, #21573	; 0x5445
   225a8:	mov	r0, #0
   225ac:	mov	r2, #5
   225b0:	movt	r1, #2
   225b4:	bl	114ec <dcgettext@plt>
   225b8:	mov	r2, r0
   225bc:	ldr	r3, [r7]
   225c0:	ldr	r0, [r7, #4]
   225c4:	str	r0, [sp]
   225c8:	b	226b8 <__assert_fail@plt+0x10f44>
   225cc:	movw	r1, #21596	; 0x545c
   225d0:	mov	r0, #0
   225d4:	mov	r2, #5
   225d8:	movt	r1, #2
   225dc:	bl	114ec <dcgettext@plt>
   225e0:	ldr	r3, [r7]
   225e4:	mov	r2, r0
   225e8:	ldmib	r7, {r0, r1}
   225ec:	stm	sp, {r0, r1}
   225f0:	b	226b8 <__assert_fail@plt+0x10f44>
   225f4:	movw	r1, #21624	; 0x5478
   225f8:	mov	r0, #0
   225fc:	mov	r2, #5
   22600:	movt	r1, #2
   22604:	bl	114ec <dcgettext@plt>
   22608:	ldr	r3, [r7]
   2260c:	mov	r2, r0
   22610:	ldmib	r7, {r0, r1, r7}
   22614:	stm	sp, {r0, r1, r7}
   22618:	b	226b8 <__assert_fail@plt+0x10f44>
   2261c:	movw	r1, #21656	; 0x5498
   22620:	mov	r0, #0
   22624:	mov	r2, #5
   22628:	movt	r1, #2
   2262c:	bl	114ec <dcgettext@plt>
   22630:	ldr	r3, [r7]
   22634:	mov	r2, r0
   22638:	ldmib	r7, {r0, r1, r6, r7}
   2263c:	stm	sp, {r0, r1, r6, r7}
   22640:	b	226b8 <__assert_fail@plt+0x10f44>
   22644:	movw	r1, #21692	; 0x54bc
   22648:	mov	r0, #0
   2264c:	mov	r2, #5
   22650:	movt	r1, #2
   22654:	bl	114ec <dcgettext@plt>
   22658:	ldr	r3, [r7]
   2265c:	mov	r2, r0
   22660:	ldmib	r7, {r0, r1, r6}
   22664:	ldr	r5, [r7, #16]
   22668:	ldr	r7, [r7, #20]
   2266c:	stm	sp, {r0, r1, r6}
   22670:	str	r5, [sp, #12]
   22674:	str	r7, [sp, #16]
   22678:	b	226b8 <__assert_fail@plt+0x10f44>
   2267c:	movw	r1, #21732	; 0x54e4
   22680:	mov	r0, #0
   22684:	mov	r2, #5
   22688:	movt	r1, #2
   2268c:	bl	114ec <dcgettext@plt>
   22690:	ldr	r3, [r7]
   22694:	mov	r2, r0
   22698:	ldmib	r7, {r0, r1, r6}
   2269c:	ldr	r5, [r7, #16]
   226a0:	ldr	r4, [r7, #20]
   226a4:	ldr	r7, [r7, #24]
   226a8:	stm	sp, {r0, r1, r6}
   226ac:	str	r5, [sp, #12]
   226b0:	str	r4, [sp, #16]
   226b4:	str	r7, [sp, #20]
   226b8:	mov	r0, r8
   226bc:	mov	r1, #1
   226c0:	b	2276c <__assert_fail@plt+0x10ff8>
   226c4:	movw	r1, #21824	; 0x5540
   226c8:	movt	r1, #2
   226cc:	mov	r0, #0
   226d0:	mov	r2, #5
   226d4:	bl	114ec <dcgettext@plt>
   226d8:	mov	ip, r0
   226dc:	ldr	r3, [r7]
   226e0:	ldr	r0, [r7, #4]
   226e4:	ldr	r1, [r7, #8]
   226e8:	ldr	r6, [r7, #12]
   226ec:	ldr	r5, [r7, #16]
   226f0:	ldr	r4, [r7, #20]
   226f4:	ldr	r2, [r7, #24]
   226f8:	ldr	lr, [r7, #28]
   226fc:	ldr	r7, [r7, #32]
   22700:	stm	sp, {r0, r1, r6}
   22704:	str	r5, [sp, #12]
   22708:	str	r4, [sp, #16]
   2270c:	str	r2, [sp, #20]
   22710:	str	lr, [sp, #24]
   22714:	str	r7, [sp, #28]
   22718:	b	22760 <__assert_fail@plt+0x10fec>
   2271c:	movw	r1, #21776	; 0x5510
   22720:	mov	r0, #0
   22724:	mov	r2, #5
   22728:	movt	r1, #2
   2272c:	bl	114ec <dcgettext@plt>
   22730:	mov	ip, r0
   22734:	ldr	r3, [r7]
   22738:	ldmib	r7, {r0, r1, r6}
   2273c:	ldr	r5, [r7, #16]
   22740:	ldr	r4, [r7, #20]
   22744:	ldr	r2, [r7, #24]
   22748:	ldr	r7, [r7, #28]
   2274c:	stm	sp, {r0, r1, r6}
   22750:	str	r5, [sp, #12]
   22754:	str	r4, [sp, #16]
   22758:	str	r2, [sp, #20]
   2275c:	str	r7, [sp, #24]
   22760:	mov	r0, r8
   22764:	mov	r1, #1
   22768:	mov	r2, ip
   2276c:	bl	1169c <__fprintf_chk@plt>
   22770:	sub	sp, fp, #24
   22774:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22778:	push	{r4, sl, fp, lr}
   2277c:	add	fp, sp, #8
   22780:	sub	sp, sp, #8
   22784:	ldr	ip, [fp, #8]
   22788:	mov	lr, #0
   2278c:	ldr	r4, [ip, lr, lsl #2]
   22790:	add	lr, lr, #1
   22794:	cmp	r4, #0
   22798:	bne	2278c <__assert_fail@plt+0x11018>
   2279c:	sub	r4, lr, #1
   227a0:	str	ip, [sp]
   227a4:	str	r4, [sp, #4]
   227a8:	bl	2244c <__assert_fail@plt+0x10cd8>
   227ac:	sub	sp, fp, #8
   227b0:	pop	{r4, sl, fp, pc}
   227b4:	push	{r4, r5, fp, lr}
   227b8:	add	fp, sp, #8
   227bc:	sub	sp, sp, #48	; 0x30
   227c0:	ldr	r4, [fp, #8]
   227c4:	mov	ip, #0
   227c8:	add	lr, sp, #8
   227cc:	ldr	r5, [r4]
   227d0:	cmp	r5, #0
   227d4:	str	r5, [lr, ip, lsl #2]
   227d8:	beq	227ec <__assert_fail@plt+0x11078>
   227dc:	add	ip, ip, #1
   227e0:	add	r4, r4, #4
   227e4:	cmp	ip, #10
   227e8:	bcc	227cc <__assert_fail@plt+0x11058>
   227ec:	str	lr, [sp]
   227f0:	str	ip, [sp, #4]
   227f4:	bl	2244c <__assert_fail@plt+0x10cd8>
   227f8:	sub	sp, fp, #8
   227fc:	pop	{r4, r5, fp, pc}
   22800:	push	{fp, lr}
   22804:	mov	fp, sp
   22808:	sub	sp, sp, #8
   2280c:	add	ip, fp, #8
   22810:	str	ip, [sp, #4]
   22814:	str	ip, [sp]
   22818:	bl	227b4 <__assert_fail@plt+0x11040>
   2281c:	mov	sp, fp
   22820:	pop	{fp, pc}
   22824:	push	{fp, lr}
   22828:	mov	fp, sp
   2282c:	movw	r0, #25020	; 0x61bc
   22830:	movt	r0, #3
   22834:	ldr	r1, [r0]
   22838:	movw	r0, #18834	; 0x4992
   2283c:	movt	r0, #2
   22840:	bl	113e4 <fputs_unlocked@plt>
   22844:	movw	r1, #21936	; 0x55b0
   22848:	mov	r0, #0
   2284c:	mov	r2, #5
   22850:	movt	r1, #2
   22854:	bl	114ec <dcgettext@plt>
   22858:	movw	r2, #21956	; 0x55c4
   2285c:	mov	r1, r0
   22860:	mov	r0, #1
   22864:	movt	r2, #2
   22868:	bl	11678 <__printf_chk@plt>
   2286c:	movw	r1, #21978	; 0x55da
   22870:	mov	r0, #0
   22874:	mov	r2, #5
   22878:	movt	r1, #2
   2287c:	bl	114ec <dcgettext@plt>
   22880:	movw	r2, #17505	; 0x4461
   22884:	movw	r3, #19999	; 0x4e1f
   22888:	mov	r1, r0
   2288c:	mov	r0, #1
   22890:	movt	r2, #2
   22894:	movt	r3, #2
   22898:	bl	11678 <__printf_chk@plt>
   2289c:	movw	r1, #21998	; 0x55ee
   228a0:	mov	r0, #0
   228a4:	mov	r2, #5
   228a8:	movt	r1, #2
   228ac:	bl	114ec <dcgettext@plt>
   228b0:	movw	r2, #22037	; 0x5615
   228b4:	mov	r1, r0
   228b8:	mov	r0, #1
   228bc:	movt	r2, #2
   228c0:	pop	{fp, lr}
   228c4:	b	11678 <__printf_chk@plt>
   228c8:	b	228cc <__assert_fail@plt+0x11158>
   228cc:	push	{r4, r5, r6, sl, fp, lr}
   228d0:	add	fp, sp, #16
   228d4:	mov	r4, r2
   228d8:	mov	r5, r1
   228dc:	mov	r6, r0
   228e0:	bl	24010 <__assert_fail@plt+0x1289c>
   228e4:	cmp	r0, #0
   228e8:	popne	{r4, r5, r6, sl, fp, pc}
   228ec:	cmp	r6, #0
   228f0:	beq	22904 <__assert_fail@plt+0x11190>
   228f4:	cmp	r5, #0
   228f8:	cmpne	r4, #0
   228fc:	bne	22904 <__assert_fail@plt+0x11190>
   22900:	pop	{r4, r5, r6, sl, fp, pc}
   22904:	bl	11870 <__assert_fail@plt+0xfc>
   22908:	push	{fp, lr}
   2290c:	mov	fp, sp
   22910:	bl	23be4 <__assert_fail@plt+0x12470>
   22914:	cmp	r0, #0
   22918:	popne	{fp, pc}
   2291c:	bl	11870 <__assert_fail@plt+0xfc>
   22920:	push	{fp, lr}
   22924:	mov	fp, sp
   22928:	bl	23be4 <__assert_fail@plt+0x12470>
   2292c:	cmp	r0, #0
   22930:	popne	{fp, pc}
   22934:	bl	11870 <__assert_fail@plt+0xfc>
   22938:	push	{fp, lr}
   2293c:	mov	fp, sp
   22940:	bl	23be4 <__assert_fail@plt+0x12470>
   22944:	cmp	r0, #0
   22948:	popne	{fp, pc}
   2294c:	bl	11870 <__assert_fail@plt+0xfc>
   22950:	push	{r4, r5, fp, lr}
   22954:	add	fp, sp, #8
   22958:	mov	r4, r1
   2295c:	mov	r5, r0
   22960:	bl	23c14 <__assert_fail@plt+0x124a0>
   22964:	cmp	r0, #0
   22968:	popne	{r4, r5, fp, pc}
   2296c:	cmp	r5, #0
   22970:	beq	22980 <__assert_fail@plt+0x1120c>
   22974:	cmp	r4, #0
   22978:	bne	22980 <__assert_fail@plt+0x1120c>
   2297c:	pop	{r4, r5, fp, pc}
   22980:	bl	11870 <__assert_fail@plt+0xfc>
   22984:	push	{fp, lr}
   22988:	mov	fp, sp
   2298c:	cmp	r1, #0
   22990:	orreq	r1, r1, #1
   22994:	bl	23c14 <__assert_fail@plt+0x124a0>
   22998:	cmp	r0, #0
   2299c:	popne	{fp, pc}
   229a0:	bl	11870 <__assert_fail@plt+0xfc>
   229a4:	push	{fp, lr}
   229a8:	mov	fp, sp
   229ac:	clz	r3, r2
   229b0:	lsr	ip, r3, #5
   229b4:	clz	r3, r1
   229b8:	lsr	r3, r3, #5
   229bc:	orrs	r3, r3, ip
   229c0:	movwne	r1, #1
   229c4:	movwne	r2, #1
   229c8:	bl	24010 <__assert_fail@plt+0x1289c>
   229cc:	cmp	r0, #0
   229d0:	popne	{fp, pc}
   229d4:	bl	11870 <__assert_fail@plt+0xfc>
   229d8:	push	{fp, lr}
   229dc:	mov	fp, sp
   229e0:	mov	r2, r1
   229e4:	mov	r1, r0
   229e8:	mov	r0, #0
   229ec:	bl	24010 <__assert_fail@plt+0x1289c>
   229f0:	cmp	r0, #0
   229f4:	popne	{fp, pc}
   229f8:	bl	11870 <__assert_fail@plt+0xfc>
   229fc:	mov	r2, r1
   22a00:	mov	r1, r0
   22a04:	mov	r0, #0
   22a08:	b	229a4 <__assert_fail@plt+0x11230>
   22a0c:	mov	r2, #1
   22a10:	b	22a14 <__assert_fail@plt+0x112a0>
   22a14:	push	{r4, r5, fp, lr}
   22a18:	add	fp, sp, #8
   22a1c:	ldr	r5, [r1]
   22a20:	mov	r4, r1
   22a24:	cmp	r0, #0
   22a28:	beq	22a40 <__assert_fail@plt+0x112cc>
   22a2c:	mov	r1, #1
   22a30:	add	r1, r1, r5, lsr #1
   22a34:	adds	r5, r5, r1
   22a38:	bcc	22a58 <__assert_fail@plt+0x112e4>
   22a3c:	bl	11870 <__assert_fail@plt+0xfc>
   22a40:	cmp	r5, #0
   22a44:	bne	22a58 <__assert_fail@plt+0x112e4>
   22a48:	mov	r1, #64	; 0x40
   22a4c:	cmp	r2, #64	; 0x40
   22a50:	udiv	r5, r1, r2
   22a54:	addhi	r5, r5, #1
   22a58:	mov	r1, r5
   22a5c:	bl	228cc <__assert_fail@plt+0x11158>
   22a60:	str	r5, [r4]
   22a64:	pop	{r4, r5, fp, pc}
   22a68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22a6c:	add	fp, sp, #24
   22a70:	ldr	r6, [r1]
   22a74:	mov	r8, r1
   22a78:	ldr	r4, [fp, #8]
   22a7c:	add	r1, r6, r6, asr #1
   22a80:	cmp	r1, r6
   22a84:	mvnvs	r1, #-2147483648	; 0x80000000
   22a88:	cmp	r1, r3
   22a8c:	mov	r5, r1
   22a90:	movgt	r5, r3
   22a94:	cmn	r3, #1
   22a98:	movle	r5, r1
   22a9c:	cmn	r4, #1
   22aa0:	ble	22ac0 <__assert_fail@plt+0x1134c>
   22aa4:	cmp	r4, #0
   22aa8:	beq	22b14 <__assert_fail@plt+0x113a0>
   22aac:	cmn	r5, #1
   22ab0:	ble	22ae8 <__assert_fail@plt+0x11374>
   22ab4:	mvn	r7, #-2147483648	; 0x80000000
   22ab8:	udiv	r1, r7, r4
   22abc:	b	22adc <__assert_fail@plt+0x11368>
   22ac0:	cmn	r5, #1
   22ac4:	ble	22b04 <__assert_fail@plt+0x11390>
   22ac8:	cmn	r4, #1
   22acc:	beq	22b14 <__assert_fail@plt+0x113a0>
   22ad0:	mov	r1, #-2147483648	; 0x80000000
   22ad4:	mvn	r7, #-2147483648	; 0x80000000
   22ad8:	sdiv	r1, r1, r4
   22adc:	cmp	r1, r5
   22ae0:	bge	22b14 <__assert_fail@plt+0x113a0>
   22ae4:	b	22b24 <__assert_fail@plt+0x113b0>
   22ae8:	beq	22b14 <__assert_fail@plt+0x113a0>
   22aec:	mov	r1, #-2147483648	; 0x80000000
   22af0:	mvn	r7, #-2147483648	; 0x80000000
   22af4:	sdiv	r1, r1, r5
   22af8:	cmp	r1, r4
   22afc:	bge	22b14 <__assert_fail@plt+0x113a0>
   22b00:	b	22b24 <__assert_fail@plt+0x113b0>
   22b04:	mvn	r7, #-2147483648	; 0x80000000
   22b08:	sdiv	r1, r7, r4
   22b0c:	cmp	r5, r1
   22b10:	blt	22b24 <__assert_fail@plt+0x113b0>
   22b14:	mul	r1, r5, r4
   22b18:	mov	r7, #64	; 0x40
   22b1c:	cmp	r1, #63	; 0x3f
   22b20:	bgt	22b2c <__assert_fail@plt+0x113b8>
   22b24:	sdiv	r5, r7, r4
   22b28:	mul	r1, r5, r4
   22b2c:	cmp	r0, #0
   22b30:	moveq	r7, #0
   22b34:	streq	r7, [r8]
   22b38:	sub	r7, r5, r6
   22b3c:	cmp	r7, r2
   22b40:	bge	22be4 <__assert_fail@plt+0x11470>
   22b44:	add	r5, r6, r2
   22b48:	mov	r2, #0
   22b4c:	mov	r1, #0
   22b50:	cmp	r5, r3
   22b54:	movwgt	r2, #1
   22b58:	cmn	r3, #1
   22b5c:	movwgt	r1, #1
   22b60:	cmp	r5, r6
   22b64:	bvs	22bcc <__assert_fail@plt+0x11458>
   22b68:	ands	r1, r1, r2
   22b6c:	bne	22bcc <__assert_fail@plt+0x11458>
   22b70:	cmn	r4, #1
   22b74:	ble	22b94 <__assert_fail@plt+0x11420>
   22b78:	cmp	r4, #0
   22b7c:	beq	22be0 <__assert_fail@plt+0x1146c>
   22b80:	cmn	r5, #1
   22b84:	ble	22bb8 <__assert_fail@plt+0x11444>
   22b88:	mvn	r1, #-2147483648	; 0x80000000
   22b8c:	udiv	r1, r1, r4
   22b90:	b	22bac <__assert_fail@plt+0x11438>
   22b94:	cmn	r5, #1
   22b98:	ble	22bd0 <__assert_fail@plt+0x1145c>
   22b9c:	cmn	r4, #1
   22ba0:	beq	22be0 <__assert_fail@plt+0x1146c>
   22ba4:	mov	r1, #-2147483648	; 0x80000000
   22ba8:	sdiv	r1, r1, r4
   22bac:	cmp	r1, r5
   22bb0:	bge	22be0 <__assert_fail@plt+0x1146c>
   22bb4:	b	22bcc <__assert_fail@plt+0x11458>
   22bb8:	beq	22be0 <__assert_fail@plt+0x1146c>
   22bbc:	mov	r1, #-2147483648	; 0x80000000
   22bc0:	sdiv	r1, r1, r5
   22bc4:	cmp	r1, r4
   22bc8:	bge	22be0 <__assert_fail@plt+0x1146c>
   22bcc:	bl	11870 <__assert_fail@plt+0xfc>
   22bd0:	mvn	r1, #-2147483648	; 0x80000000
   22bd4:	sdiv	r1, r1, r4
   22bd8:	cmp	r5, r1
   22bdc:	blt	22bcc <__assert_fail@plt+0x11458>
   22be0:	mul	r1, r5, r4
   22be4:	bl	22950 <__assert_fail@plt+0x111dc>
   22be8:	str	r5, [r8]
   22bec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22bf0:	push	{fp, lr}
   22bf4:	mov	fp, sp
   22bf8:	mov	r1, #1
   22bfc:	bl	23b90 <__assert_fail@plt+0x1241c>
   22c00:	cmp	r0, #0
   22c04:	popne	{fp, pc}
   22c08:	bl	11870 <__assert_fail@plt+0xfc>
   22c0c:	push	{fp, lr}
   22c10:	mov	fp, sp
   22c14:	bl	23b90 <__assert_fail@plt+0x1241c>
   22c18:	cmp	r0, #0
   22c1c:	popne	{fp, pc}
   22c20:	bl	11870 <__assert_fail@plt+0xfc>
   22c24:	push	{fp, lr}
   22c28:	mov	fp, sp
   22c2c:	mov	r1, #1
   22c30:	bl	23b90 <__assert_fail@plt+0x1241c>
   22c34:	cmp	r0, #0
   22c38:	popne	{fp, pc}
   22c3c:	bl	11870 <__assert_fail@plt+0xfc>
   22c40:	push	{fp, lr}
   22c44:	mov	fp, sp
   22c48:	bl	23b90 <__assert_fail@plt+0x1241c>
   22c4c:	cmp	r0, #0
   22c50:	popne	{fp, pc}
   22c54:	bl	11870 <__assert_fail@plt+0xfc>
   22c58:	push	{r4, r5, r6, sl, fp, lr}
   22c5c:	add	fp, sp, #16
   22c60:	mov	r5, r0
   22c64:	mov	r0, r1
   22c68:	mov	r4, r1
   22c6c:	bl	23be4 <__assert_fail@plt+0x12470>
   22c70:	cmp	r0, #0
   22c74:	beq	22c90 <__assert_fail@plt+0x1151c>
   22c78:	mov	r1, r5
   22c7c:	mov	r2, r4
   22c80:	mov	r6, r0
   22c84:	bl	1148c <memcpy@plt>
   22c88:	mov	r0, r6
   22c8c:	pop	{r4, r5, r6, sl, fp, pc}
   22c90:	bl	11870 <__assert_fail@plt+0xfc>
   22c94:	push	{r4, r5, r6, sl, fp, lr}
   22c98:	add	fp, sp, #16
   22c9c:	mov	r5, r0
   22ca0:	mov	r0, r1
   22ca4:	mov	r4, r1
   22ca8:	bl	23be4 <__assert_fail@plt+0x12470>
   22cac:	cmp	r0, #0
   22cb0:	beq	22ccc <__assert_fail@plt+0x11558>
   22cb4:	mov	r1, r5
   22cb8:	mov	r2, r4
   22cbc:	mov	r6, r0
   22cc0:	bl	1148c <memcpy@plt>
   22cc4:	mov	r0, r6
   22cc8:	pop	{r4, r5, r6, sl, fp, pc}
   22ccc:	bl	11870 <__assert_fail@plt+0xfc>
   22cd0:	push	{r4, r5, r6, sl, fp, lr}
   22cd4:	add	fp, sp, #16
   22cd8:	mov	r5, r0
   22cdc:	add	r0, r1, #1
   22ce0:	mov	r4, r1
   22ce4:	bl	23be4 <__assert_fail@plt+0x12470>
   22ce8:	cmp	r0, #0
   22cec:	beq	22d14 <__assert_fail@plt+0x115a0>
   22cf0:	mov	r6, r0
   22cf4:	mov	r0, #0
   22cf8:	mov	r1, r5
   22cfc:	mov	r2, r4
   22d00:	strb	r0, [r6, r4]
   22d04:	mov	r0, r6
   22d08:	bl	1148c <memcpy@plt>
   22d0c:	mov	r0, r6
   22d10:	pop	{r4, r5, r6, sl, fp, pc}
   22d14:	bl	11870 <__assert_fail@plt+0xfc>
   22d18:	push	{r4, r5, r6, sl, fp, lr}
   22d1c:	add	fp, sp, #16
   22d20:	mov	r4, r0
   22d24:	bl	11618 <strlen@plt>
   22d28:	add	r5, r0, #1
   22d2c:	mov	r0, r5
   22d30:	bl	23be4 <__assert_fail@plt+0x12470>
   22d34:	cmp	r0, #0
   22d38:	beq	22d54 <__assert_fail@plt+0x115e0>
   22d3c:	mov	r1, r4
   22d40:	mov	r2, r5
   22d44:	mov	r6, r0
   22d48:	bl	1148c <memcpy@plt>
   22d4c:	mov	r0, r6
   22d50:	pop	{r4, r5, r6, sl, fp, pc}
   22d54:	bl	11870 <__assert_fail@plt+0xfc>
   22d58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22d5c:	add	fp, sp, #24
   22d60:	sub	sp, sp, #16
   22d64:	mov	r8, r0
   22d68:	ldr	r0, [fp, #16]
   22d6c:	mov	r7, r3
   22d70:	mov	r4, r2
   22d74:	mov	r2, r1
   22d78:	add	r3, sp, #8
   22d7c:	mov	r1, #0
   22d80:	str	r0, [sp]
   22d84:	mov	r0, r8
   22d88:	bl	22e6c <__assert_fail@plt+0x116f8>
   22d8c:	cmp	r0, #0
   22d90:	bne	22e40 <__assert_fail@plt+0x116cc>
   22d94:	ldr	r6, [sp, #8]
   22d98:	ldr	r5, [sp, #12]
   22d9c:	subs	r0, r6, r4
   22da0:	sbcs	r0, r5, r7
   22da4:	blt	22dc8 <__assert_fail@plt+0x11654>
   22da8:	ldr	r1, [fp, #8]
   22dac:	ldr	r0, [fp, #12]
   22db0:	subs	r1, r1, r6
   22db4:	sbcs	r0, r0, r5
   22db8:	movge	r0, r6
   22dbc:	movge	r1, r5
   22dc0:	subge	sp, fp, #24
   22dc4:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   22dc8:	subs	r0, r6, #1073741824	; 0x40000000
   22dcc:	sbcs	r0, r5, #0
   22dd0:	blt	22ddc <__assert_fail@plt+0x11668>
   22dd4:	bl	11630 <__errno_location@plt>
   22dd8:	b	22df4 <__assert_fail@plt+0x11680>
   22ddc:	bl	11630 <__errno_location@plt>
   22de0:	mvn	r2, #1073741824	; 0x40000000
   22de4:	mvn	r1, #0
   22de8:	subs	r2, r2, r6
   22dec:	sbcs	r1, r1, r5
   22df0:	blt	22dfc <__assert_fail@plt+0x11688>
   22df4:	mov	r1, #75	; 0x4b
   22df8:	b	22e00 <__assert_fail@plt+0x1168c>
   22dfc:	mov	r1, #34	; 0x22
   22e00:	str	r1, [r0]
   22e04:	ldr	r6, [r0]
   22e08:	ldr	r4, [fp, #24]
   22e0c:	ldr	r5, [fp, #20]
   22e10:	mov	r0, r8
   22e14:	bl	15790 <__assert_fail@plt+0x401c>
   22e18:	subs	r1, r6, #22
   22e1c:	movw	r2, #20499	; 0x5013
   22e20:	str	r0, [sp]
   22e24:	mov	r3, r5
   22e28:	movne	r1, r6
   22e2c:	cmp	r4, #0
   22e30:	movt	r2, #2
   22e34:	movweq	r4, #1
   22e38:	mov	r0, r4
   22e3c:	bl	115a0 <error@plt>
   22e40:	cmp	r0, #1
   22e44:	beq	22dd4 <__assert_fail@plt+0x11660>
   22e48:	cmp	r0, #3
   22e4c:	bne	22e5c <__assert_fail@plt+0x116e8>
   22e50:	bl	11630 <__errno_location@plt>
   22e54:	mov	r1, #0
   22e58:	b	22e00 <__assert_fail@plt+0x1168c>
   22e5c:	bl	11630 <__errno_location@plt>
   22e60:	b	22e04 <__assert_fail@plt+0x11690>
   22e64:	mov	r1, #10
   22e68:	b	22d58 <__assert_fail@plt+0x115e4>
   22e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e70:	add	fp, sp, #28
   22e74:	sub	sp, sp, #28
   22e78:	cmp	r2, #37	; 0x25
   22e7c:	str	r3, [sp, #12]
   22e80:	bcs	23390 <__assert_fail@plt+0x11c1c>
   22e84:	ldr	sl, [fp, #8]
   22e88:	mov	r4, r2
   22e8c:	mov	r6, r1
   22e90:	mov	r5, r0
   22e94:	bl	11630 <__errno_location@plt>
   22e98:	add	r8, sp, #24
   22e9c:	cmp	r6, #0
   22ea0:	mov	r7, r0
   22ea4:	mov	r0, #0
   22ea8:	mov	r2, r4
   22eac:	movne	r8, r6
   22eb0:	str	r0, [r7]
   22eb4:	mov	r0, r5
   22eb8:	mov	r1, r8
   22ebc:	bl	116a8 <strtoimax@plt>
   22ec0:	str	r1, [sp, #20]
   22ec4:	str	r0, [sp, #16]
   22ec8:	ldr	r4, [r8]
   22ecc:	cmp	r4, r5
   22ed0:	beq	22efc <__assert_fail@plt+0x11788>
   22ed4:	mov	r6, r0
   22ed8:	ldr	r0, [r7]
   22edc:	mov	r9, r1
   22ee0:	cmp	r0, #0
   22ee4:	beq	22f38 <__assert_fail@plt+0x117c4>
   22ee8:	mov	r7, #4
   22eec:	cmp	r0, #34	; 0x22
   22ef0:	bne	23384 <__assert_fail@plt+0x11c10>
   22ef4:	mov	r7, #1
   22ef8:	b	22f3c <__assert_fail@plt+0x117c8>
   22efc:	cmp	sl, #0
   22f00:	mov	r7, #4
   22f04:	ldrbne	r1, [r5]
   22f08:	cmpne	r1, #0
   22f0c:	beq	23384 <__assert_fail@plt+0x11c10>
   22f10:	mov	r0, sl
   22f14:	bl	11624 <strchr@plt>
   22f18:	cmp	r0, #0
   22f1c:	beq	23384 <__assert_fail@plt+0x11c10>
   22f20:	mov	r9, #0
   22f24:	mov	r6, #1
   22f28:	mov	r7, #0
   22f2c:	str	r9, [sp, #20]
   22f30:	str	r6, [sp, #16]
   22f34:	b	22f44 <__assert_fail@plt+0x117d0>
   22f38:	mov	r7, r0
   22f3c:	cmp	sl, #0
   22f40:	beq	22fe8 <__assert_fail@plt+0x11874>
   22f44:	ldrb	r5, [r4]
   22f48:	cmp	r5, #0
   22f4c:	beq	22ff0 <__assert_fail@plt+0x1187c>
   22f50:	mov	r0, sl
   22f54:	mov	r1, r5
   22f58:	bl	11624 <strchr@plt>
   22f5c:	cmp	r0, #0
   22f60:	beq	22ff8 <__assert_fail@plt+0x11884>
   22f64:	sub	r0, r5, #69	; 0x45
   22f68:	str	r7, [sp, #4]
   22f6c:	mov	r1, #1
   22f70:	mov	r7, #1024	; 0x400
   22f74:	cmp	r0, #21
   22f78:	str	r1, [sp, #8]
   22f7c:	bhi	22f94 <__assert_fail@plt+0x11820>
   22f80:	movw	r2, #35141	; 0x8945
   22f84:	mov	r1, #1
   22f88:	movt	r2, #48	; 0x30
   22f8c:	tst	r2, r1, lsl r0
   22f90:	bne	22fb0 <__assert_fail@plt+0x1183c>
   22f94:	sub	r0, r5, #103	; 0x67
   22f98:	cmp	r0, #13
   22f9c:	bhi	23008 <__assert_fail@plt+0x11894>
   22fa0:	mov	r1, #1
   22fa4:	movw	r2, #8273	; 0x2051
   22fa8:	tst	r2, r1, lsl r0
   22fac:	beq	23008 <__assert_fail@plt+0x11894>
   22fb0:	ldr	r0, [fp, #8]
   22fb4:	mov	r1, #48	; 0x30
   22fb8:	bl	11624 <strchr@plt>
   22fbc:	cmp	r0, #0
   22fc0:	beq	23008 <__assert_fail@plt+0x11894>
   22fc4:	ldrb	r0, [r4, #1]
   22fc8:	ldr	sl, [sp, #12]
   22fcc:	cmp	r0, #66	; 0x42
   22fd0:	cmpne	r0, #68	; 0x44
   22fd4:	bne	230dc <__assert_fail@plt+0x11968>
   22fd8:	mov	r0, #2
   22fdc:	mov	r7, #1000	; 0x3e8
   22fe0:	str	r0, [sp, #8]
   22fe4:	b	2300c <__assert_fail@plt+0x11898>
   22fe8:	ldr	r0, [sp, #12]
   22fec:	b	23000 <__assert_fail@plt+0x1188c>
   22ff0:	ldr	sl, [sp, #12]
   22ff4:	b	23380 <__assert_fail@plt+0x11c0c>
   22ff8:	ldr	r0, [sp, #12]
   22ffc:	orr	r7, r7, #2
   23000:	stm	r0, {r6, r9}
   23004:	b	23384 <__assert_fail@plt+0x11c10>
   23008:	ldr	sl, [sp, #12]
   2300c:	cmp	r5, #89	; 0x59
   23010:	bgt	23078 <__assert_fail@plt+0x11904>
   23014:	sub	r0, r5, #66	; 0x42
   23018:	cmp	r0, #14
   2301c:	bhi	230fc <__assert_fail@plt+0x11988>
   23020:	add	r1, pc, #0
   23024:	ldr	pc, [r1, r0, lsl #2]
   23028:	andeq	r3, r2, r4, rrx
   2302c:	andeq	r3, r2, r4, lsl r2
   23030:	andeq	r3, r2, r4, lsl r2
   23034:	andeq	r3, r2, r4, lsr #4
   23038:	andeq	r3, r2, r4, lsl r2
   2303c:	andeq	r3, r2, r8, asr r1
   23040:	andeq	r3, r2, r4, lsl r2
   23044:	andeq	r3, r2, r4, lsl r2
   23048:	andeq	r3, r2, r4, lsl r2
   2304c:	andeq	r3, r2, r0, lsl #3
   23050:	andeq	r3, r2, r4, lsl r2
   23054:	muleq	r2, r4, r1
   23058:	andeq	r3, r2, r4, lsl r2
   2305c:	andeq	r3, r2, r4, lsl r2
   23060:	andeq	r3, r2, ip, asr #4
   23064:	cmn	r9, #1
   23068:	ble	23274 <__assert_fail@plt+0x11b00>
   2306c:	cmp	r9, #2097152	; 0x200000
   23070:	blt	232a0 <__assert_fail@plt+0x11b2c>
   23074:	b	23320 <__assert_fail@plt+0x11bac>
   23078:	cmp	r5, #115	; 0x73
   2307c:	bgt	23134 <__assert_fail@plt+0x119c0>
   23080:	sub	r0, r5, #98	; 0x62
   23084:	cmp	r0, #11
   23088:	bhi	231e4 <__assert_fail@plt+0x11a70>
   2308c:	add	r1, pc, #4
   23090:	mov	r4, #0
   23094:	ldr	pc, [r1, r0, lsl #2]
   23098:	andeq	r3, r2, r8, asr #1
   2309c:	andeq	r3, r2, r4, asr r3
   230a0:	andeq	r3, r2, r4, lsl r2
   230a4:	andeq	r3, r2, r4, lsl r2
   230a8:	andeq	r3, r2, r4, lsl r2
   230ac:	andeq	r3, r2, r8, asr r1
   230b0:	andeq	r3, r2, r4, lsl r2
   230b4:	andeq	r3, r2, r4, lsl r2
   230b8:	andeq	r3, r2, r4, lsl r2
   230bc:	andeq	r3, r2, r0, lsl #3
   230c0:	andeq	r3, r2, r4, lsl r2
   230c4:	muleq	r2, r4, r1
   230c8:	cmn	r9, #1
   230cc:	ble	232b4 <__assert_fail@plt+0x11b40>
   230d0:	cmp	r9, #4194304	; 0x400000
   230d4:	blt	232e0 <__assert_fail@plt+0x11b6c>
   230d8:	b	23320 <__assert_fail@plt+0x11bac>
   230dc:	cmp	r0, #105	; 0x69
   230e0:	bne	2300c <__assert_fail@plt+0x11898>
   230e4:	ldrb	r0, [r4, #2]
   230e8:	mov	r1, #1
   230ec:	cmp	r0, #66	; 0x42
   230f0:	movweq	r1, #3
   230f4:	str	r1, [sp, #8]
   230f8:	b	2300c <__assert_fail@plt+0x11898>
   230fc:	cmp	r5, #84	; 0x54
   23100:	beq	231bc <__assert_fail@plt+0x11a48>
   23104:	cmp	r5, #89	; 0x59
   23108:	bne	23214 <__assert_fail@plt+0x11aa0>
   2310c:	mov	r4, #0
   23110:	mvn	r6, #7
   23114:	add	r5, sp, #16
   23118:	mov	r0, r5
   2311c:	mov	r1, r7
   23120:	bl	233b0 <__assert_fail@plt+0x11c3c>
   23124:	orr	r4, r0, r4
   23128:	adds	r6, r6, #1
   2312c:	bne	23118 <__assert_fail@plt+0x119a4>
   23130:	b	23354 <__assert_fail@plt+0x11be0>
   23134:	cmp	r5, #116	; 0x74
   23138:	beq	231bc <__assert_fail@plt+0x11a48>
   2313c:	cmp	r5, #119	; 0x77
   23140:	bne	23214 <__assert_fail@plt+0x11aa0>
   23144:	cmn	r9, #1
   23148:	ble	232f4 <__assert_fail@plt+0x11b80>
   2314c:	cmp	r9, #1073741824	; 0x40000000
   23150:	bge	23320 <__assert_fail@plt+0x11bac>
   23154:	b	2333c <__assert_fail@plt+0x11bc8>
   23158:	mov	r4, #0
   2315c:	mvn	r6, #2
   23160:	add	r5, sp, #16
   23164:	mov	r0, r5
   23168:	mov	r1, r7
   2316c:	bl	233b0 <__assert_fail@plt+0x11c3c>
   23170:	orr	r4, r0, r4
   23174:	adds	r6, r6, #1
   23178:	bne	23164 <__assert_fail@plt+0x119f0>
   2317c:	b	23354 <__assert_fail@plt+0x11be0>
   23180:	add	r0, sp, #16
   23184:	mov	r1, r7
   23188:	bl	233b0 <__assert_fail@plt+0x11c3c>
   2318c:	mov	r4, r0
   23190:	b	23354 <__assert_fail@plt+0x11be0>
   23194:	mov	r4, #0
   23198:	mvn	r6, #1
   2319c:	add	r5, sp, #16
   231a0:	mov	r0, r5
   231a4:	mov	r1, r7
   231a8:	bl	233b0 <__assert_fail@plt+0x11c3c>
   231ac:	orr	r4, r0, r4
   231b0:	adds	r6, r6, #1
   231b4:	bne	231a0 <__assert_fail@plt+0x11a2c>
   231b8:	b	23354 <__assert_fail@plt+0x11be0>
   231bc:	mov	r4, #0
   231c0:	mvn	r6, #3
   231c4:	add	r5, sp, #16
   231c8:	mov	r0, r5
   231cc:	mov	r1, r7
   231d0:	bl	233b0 <__assert_fail@plt+0x11c3c>
   231d4:	orr	r4, r0, r4
   231d8:	adds	r6, r6, #1
   231dc:	bne	231c8 <__assert_fail@plt+0x11a54>
   231e0:	b	23354 <__assert_fail@plt+0x11be0>
   231e4:	cmp	r5, #90	; 0x5a
   231e8:	bne	23214 <__assert_fail@plt+0x11aa0>
   231ec:	mov	r4, #0
   231f0:	mvn	r6, #6
   231f4:	add	r5, sp, #16
   231f8:	mov	r0, r5
   231fc:	mov	r1, r7
   23200:	bl	233b0 <__assert_fail@plt+0x11c3c>
   23204:	orr	r4, r0, r4
   23208:	adds	r6, r6, #1
   2320c:	bne	231f8 <__assert_fail@plt+0x11a84>
   23210:	b	23354 <__assert_fail@plt+0x11be0>
   23214:	stm	sl, {r6, r9}
   23218:	ldr	r7, [sp, #4]
   2321c:	orr	r7, r7, #2
   23220:	b	23384 <__assert_fail@plt+0x11c10>
   23224:	mov	r4, #0
   23228:	mvn	r6, #5
   2322c:	add	r5, sp, #16
   23230:	mov	r0, r5
   23234:	mov	r1, r7
   23238:	bl	233b0 <__assert_fail@plt+0x11c3c>
   2323c:	orr	r4, r0, r4
   23240:	adds	r6, r6, #1
   23244:	bne	23230 <__assert_fail@plt+0x11abc>
   23248:	b	23354 <__assert_fail@plt+0x11be0>
   2324c:	mov	r4, #0
   23250:	mvn	r6, #4
   23254:	add	r5, sp, #16
   23258:	mov	r0, r5
   2325c:	mov	r1, r7
   23260:	bl	233b0 <__assert_fail@plt+0x11c3c>
   23264:	orr	r4, r0, r4
   23268:	adds	r6, r6, #1
   2326c:	bne	23258 <__assert_fail@plt+0x11ae4>
   23270:	b	23354 <__assert_fail@plt+0x11be0>
   23274:	and	r0, r6, r9
   23278:	cmn	r0, #1
   2327c:	beq	232a0 <__assert_fail@plt+0x11b2c>
   23280:	mov	r0, #0
   23284:	mov	r1, #-2147483648	; 0x80000000
   23288:	mov	r2, r6
   2328c:	mov	r3, r9
   23290:	bl	24144 <__assert_fail@plt+0x129d0>
   23294:	subs	r0, r0, #1024	; 0x400
   23298:	sbcs	r0, r1, #0
   2329c:	blt	23320 <__assert_fail@plt+0x11bac>
   232a0:	lsl	r0, r9, #10
   232a4:	lsl	r1, r6, #10
   232a8:	mov	r4, #0
   232ac:	orr	r0, r0, r6, lsr #22
   232b0:	b	2334c <__assert_fail@plt+0x11bd8>
   232b4:	and	r0, r6, r9
   232b8:	cmn	r0, #1
   232bc:	beq	232e0 <__assert_fail@plt+0x11b6c>
   232c0:	mov	r0, #0
   232c4:	mov	r1, #-2147483648	; 0x80000000
   232c8:	mov	r2, r6
   232cc:	mov	r3, r9
   232d0:	bl	24144 <__assert_fail@plt+0x129d0>
   232d4:	subs	r0, r0, #512	; 0x200
   232d8:	sbcs	r0, r1, #0
   232dc:	blt	23320 <__assert_fail@plt+0x11bac>
   232e0:	lsl	r0, r9, #9
   232e4:	lsl	r1, r6, #9
   232e8:	mov	r4, #0
   232ec:	orr	r0, r0, r6, lsr #23
   232f0:	b	2334c <__assert_fail@plt+0x11bd8>
   232f4:	and	r0, r6, r9
   232f8:	cmn	r0, #1
   232fc:	beq	2333c <__assert_fail@plt+0x11bc8>
   23300:	mov	r0, #0
   23304:	mov	r1, #-2147483648	; 0x80000000
   23308:	mov	r2, r6
   2330c:	mov	r3, r9
   23310:	bl	24144 <__assert_fail@plt+0x129d0>
   23314:	subs	r0, r0, #2
   23318:	sbcs	r0, r1, #0
   2331c:	bge	2333c <__assert_fail@plt+0x11bc8>
   23320:	mvn	r0, #-2147483648	; 0x80000000
   23324:	cmp	r9, #0
   23328:	mvn	r1, #0
   2332c:	mov	r4, #1
   23330:	movlt	r0, #-2147483648	; 0x80000000
   23334:	movwlt	r1, #0
   23338:	b	2334c <__assert_fail@plt+0x11bd8>
   2333c:	lsl	r0, r9, #1
   23340:	lsl	r1, r6, #1
   23344:	mov	r4, #0
   23348:	orr	r0, r0, r6, lsr #31
   2334c:	str	r1, [sp, #16]
   23350:	str	r0, [sp, #20]
   23354:	ldr	r0, [r8]
   23358:	ldr	r2, [sp, #8]
   2335c:	ldr	r7, [sp, #4]
   23360:	add	r1, r0, r2
   23364:	orr	r7, r4, r7
   23368:	str	r1, [r8]
   2336c:	ldrb	r0, [r0, r2]
   23370:	ldr	r6, [sp, #16]
   23374:	ldr	r9, [sp, #20]
   23378:	cmp	r0, #0
   2337c:	orrne	r7, r7, #2
   23380:	stm	sl, {r6, r9}
   23384:	mov	r0, r7
   23388:	sub	sp, fp, #28
   2338c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23390:	movw	r0, #22113	; 0x5661
   23394:	movw	r1, #22151	; 0x5687
   23398:	movw	r3, #22167	; 0x5697
   2339c:	mov	r2, #85	; 0x55
   233a0:	movt	r0, #2
   233a4:	movt	r1, #2
   233a8:	movt	r3, #2
   233ac:	bl	11774 <__assert_fail@plt>
   233b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   233b4:	add	fp, sp, #24
   233b8:	mov	r5, r1
   233bc:	mov	r4, r0
   233c0:	cmn	r1, #1
   233c4:	ble	233fc <__assert_fail@plt+0x11c88>
   233c8:	ldrd	r8, [r4]
   233cc:	cmp	r5, #0
   233d0:	beq	23434 <__assert_fail@plt+0x11cc0>
   233d4:	cmn	r9, #1
   233d8:	ble	23440 <__assert_fail@plt+0x11ccc>
   233dc:	asr	r3, r5, #31
   233e0:	mvn	r0, #0
   233e4:	mvn	r1, #-2147483648	; 0x80000000
   233e8:	mov	r2, r5
   233ec:	bl	24144 <__assert_fail@plt+0x129d0>
   233f0:	subs	r0, r0, r8
   233f4:	sbcs	r0, r1, r9
   233f8:	b	23470 <__assert_fail@plt+0x11cfc>
   233fc:	ldrd	r6, [r4]
   23400:	cmn	r7, #1
   23404:	ble	23498 <__assert_fail@plt+0x11d24>
   23408:	cmn	r5, #1
   2340c:	beq	234b8 <__assert_fail@plt+0x11d44>
   23410:	asr	r3, r5, #31
   23414:	mov	r0, #0
   23418:	mov	r1, #-2147483648	; 0x80000000
   2341c:	mov	r2, r5
   23420:	bl	24144 <__assert_fail@plt+0x129d0>
   23424:	subs	r0, r0, r6
   23428:	sbcs	r0, r1, r7
   2342c:	blt	2347c <__assert_fail@plt+0x11d08>
   23430:	b	234b8 <__assert_fail@plt+0x11d44>
   23434:	mov	r6, r8
   23438:	mov	r7, r9
   2343c:	b	234b8 <__assert_fail@plt+0x11d44>
   23440:	and	r0, r8, r9
   23444:	mvn	r6, #0
   23448:	mvn	r7, #0
   2344c:	cmn	r0, #1
   23450:	beq	234b8 <__assert_fail@plt+0x11d44>
   23454:	mov	r0, #0
   23458:	mov	r1, #-2147483648	; 0x80000000
   2345c:	mov	r2, r8
   23460:	mov	r3, r9
   23464:	bl	24144 <__assert_fail@plt+0x129d0>
   23468:	subs	r0, r0, r5
   2346c:	sbcs	r0, r1, r5, asr #31
   23470:	mov	r7, r9
   23474:	mov	r6, r8
   23478:	bge	234b8 <__assert_fail@plt+0x11d44>
   2347c:	mvn	r1, #-2147483648	; 0x80000000
   23480:	cmp	r7, #0
   23484:	mvn	r2, #0
   23488:	mov	r0, #1
   2348c:	movlt	r1, #-2147483648	; 0x80000000
   23490:	movwlt	r2, #0
   23494:	b	234cc <__assert_fail@plt+0x11d58>
   23498:	asr	r3, r5, #31
   2349c:	mvn	r0, #0
   234a0:	mvn	r1, #-2147483648	; 0x80000000
   234a4:	mov	r2, r5
   234a8:	bl	24144 <__assert_fail@plt+0x129d0>
   234ac:	subs	r0, r6, r0
   234b0:	sbcs	r0, r7, r1
   234b4:	blt	2347c <__assert_fail@plt+0x11d08>
   234b8:	umull	r2, r0, r6, r5
   234bc:	asr	r1, r5, #31
   234c0:	mla	r0, r6, r1, r0
   234c4:	mla	r1, r7, r5, r0
   234c8:	mov	r0, #0
   234cc:	str	r2, [r4]
   234d0:	str	r1, [r4, #4]
   234d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   234d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234dc:	add	fp, sp, #28
   234e0:	sub	sp, sp, #20
   234e4:	cmp	r2, #37	; 0x25
   234e8:	bcs	23b70 <__assert_fail@plt+0x123fc>
   234ec:	mov	r8, r3
   234f0:	mov	r5, r2
   234f4:	mov	r6, r1
   234f8:	mov	r4, r0
   234fc:	bl	11630 <__errno_location@plt>
   23500:	mov	r7, r0
   23504:	mov	r0, #0
   23508:	str	r0, [r7]
   2350c:	bl	11600 <__ctype_b_loc@plt>
   23510:	ldr	r1, [r0]
   23514:	mov	r2, r4
   23518:	ldrb	r0, [r2], #1
   2351c:	add	r3, r1, r0, lsl #1
   23520:	ldrb	r3, [r3, #1]
   23524:	tst	r3, #32
   23528:	bne	23518 <__assert_fail@plt+0x11da4>
   2352c:	add	sl, sp, #16
   23530:	cmp	r6, #0
   23534:	movne	sl, r6
   23538:	mov	r6, #4
   2353c:	cmp	r0, #45	; 0x2d
   23540:	beq	23b64 <__assert_fail@plt+0x123f0>
   23544:	mov	r0, r4
   23548:	mov	r1, sl
   2354c:	mov	r2, r5
   23550:	str	r8, [sp, #12]
   23554:	bl	11690 <strtoumax@plt>
   23558:	ldr	r5, [sl]
   2355c:	cmp	r5, r4
   23560:	beq	23588 <__assert_fail@plt+0x11e14>
   23564:	mov	r8, r0
   23568:	ldr	r0, [r7]
   2356c:	mov	r9, r1
   23570:	cmp	r0, #0
   23574:	beq	235b8 <__assert_fail@plt+0x11e44>
   23578:	cmp	r0, #34	; 0x22
   2357c:	bne	23b64 <__assert_fail@plt+0x123f0>
   23580:	mov	r6, #1
   23584:	b	235bc <__assert_fail@plt+0x11e48>
   23588:	ldr	r0, [fp, #8]
   2358c:	cmp	r0, #0
   23590:	ldrbne	r1, [r4]
   23594:	cmpne	r1, #0
   23598:	beq	23b64 <__assert_fail@plt+0x123f0>
   2359c:	bl	11624 <strchr@plt>
   235a0:	cmp	r0, #0
   235a4:	beq	23b64 <__assert_fail@plt+0x123f0>
   235a8:	mov	r6, #0
   235ac:	mov	r8, #1
   235b0:	mov	r9, #0
   235b4:	b	235c8 <__assert_fail@plt+0x11e54>
   235b8:	mov	r6, r0
   235bc:	ldr	r0, [fp, #8]
   235c0:	cmp	r0, #0
   235c4:	beq	23b5c <__assert_fail@plt+0x123e8>
   235c8:	ldrb	r7, [r5]
   235cc:	cmp	r7, #0
   235d0:	beq	23b5c <__assert_fail@plt+0x123e8>
   235d4:	ldr	r0, [fp, #8]
   235d8:	mov	r1, r7
   235dc:	bl	11624 <strchr@plt>
   235e0:	cmp	r0, #0
   235e4:	beq	236ec <__assert_fail@plt+0x11f78>
   235e8:	sub	r0, r7, #69	; 0x45
   235ec:	mov	r1, #1
   235f0:	mov	r3, #0
   235f4:	mov	r4, #1024	; 0x400
   235f8:	cmp	r0, #21
   235fc:	str	r1, [sp, #8]
   23600:	bhi	23618 <__assert_fail@plt+0x11ea4>
   23604:	movw	r2, #35141	; 0x8945
   23608:	mov	r1, #1
   2360c:	movt	r2, #48	; 0x30
   23610:	tst	r2, r1, lsl r0
   23614:	bne	23634 <__assert_fail@plt+0x11ec0>
   23618:	sub	r0, r7, #103	; 0x67
   2361c:	cmp	r0, #13
   23620:	bhi	23668 <__assert_fail@plt+0x11ef4>
   23624:	mov	r1, #1
   23628:	movw	r2, #8273	; 0x2051
   2362c:	tst	r2, r1, lsl r0
   23630:	beq	23668 <__assert_fail@plt+0x11ef4>
   23634:	ldr	r0, [fp, #8]
   23638:	mov	r1, #48	; 0x30
   2363c:	bl	11624 <strchr@plt>
   23640:	cmp	r0, #0
   23644:	beq	23664 <__assert_fail@plt+0x11ef0>
   23648:	ldrb	r0, [r5, #1]
   2364c:	cmp	r0, #66	; 0x42
   23650:	cmpne	r0, #68	; 0x44
   23654:	bne	2377c <__assert_fail@plt+0x12008>
   23658:	mov	r4, #1000	; 0x3e8
   2365c:	mov	r0, #2
   23660:	str	r0, [sp, #8]
   23664:	mov	r3, #0
   23668:	cmp	r7, #89	; 0x59
   2366c:	stm	sp, {r5, r6}
   23670:	bgt	236f8 <__assert_fail@plt+0x11f84>
   23674:	sub	r0, r7, #66	; 0x42
   23678:	cmp	r0, #14
   2367c:	bhi	237a0 <__assert_fail@plt+0x1202c>
   23680:	add	r1, pc, #0
   23684:	ldr	pc, [r1, r0, lsl #2]
   23688:	andeq	r3, r2, r4, asr #13
   2368c:	andeq	r3, r2, r0, asr sl
   23690:	andeq	r3, r2, r0, asr sl
   23694:	andeq	r3, r2, r4, ror #20
   23698:	andeq	r3, r2, r0, asr sl
   2369c:	andeq	r3, r2, r4, asr r8
   236a0:	andeq	r3, r2, r0, asr sl
   236a4:	andeq	r3, r2, r0, asr sl
   236a8:	andeq	r3, r2, r0, asr sl
   236ac:	andeq	r3, r2, r0, asr #17
   236b0:	andeq	r3, r2, r0, asr sl
   236b4:	andeq	r3, r2, r4, lsl #18
   236b8:	andeq	r3, r2, r0, asr sl
   236bc:	andeq	r3, r2, r0, asr sl
   236c0:	ldrdeq	r3, [r2], -r0
   236c4:	mov	r1, #0
   236c8:	lsl	r3, r9, #10
   236cc:	lsl	r0, r8, #10
   236d0:	lsr	r2, r9, #22
   236d4:	cmp	r1, r9, lsr #22
   236d8:	orr	r3, r3, r8, lsr #22
   236dc:	mvnne	r0, #0
   236e0:	movwne	r2, #1
   236e4:	cmp	r1, r9, lsr #22
   236e8:	b	2376c <__assert_fail@plt+0x11ff8>
   236ec:	ldr	r0, [sp, #12]
   236f0:	orr	r6, r6, #2
   236f4:	b	23b60 <__assert_fail@plt+0x123ec>
   236f8:	cmp	r7, #115	; 0x73
   236fc:	bgt	2381c <__assert_fail@plt+0x120a8>
   23700:	sub	r0, r7, #98	; 0x62
   23704:	cmp	r0, #11
   23708:	bhi	239dc <__assert_fail@plt+0x12268>
   2370c:	add	r1, pc, #4
   23710:	mov	r2, #0
   23714:	ldr	pc, [r1, r0, lsl #2]
   23718:	andeq	r3, r2, r8, asr #14
   2371c:	andeq	r3, r2, r8, lsr fp
   23720:	andeq	r3, r2, r0, asr sl
   23724:	andeq	r3, r2, r0, asr sl
   23728:	andeq	r3, r2, r0, asr sl
   2372c:	andeq	r3, r2, r4, asr r8
   23730:	andeq	r3, r2, r0, asr sl
   23734:	andeq	r3, r2, r0, asr sl
   23738:	andeq	r3, r2, r0, asr sl
   2373c:	andeq	r3, r2, r0, asr #17
   23740:	andeq	r3, r2, r0, asr sl
   23744:	andeq	r3, r2, r4, lsl #18
   23748:	mov	r1, #0
   2374c:	lsl	r3, r9, #9
   23750:	lsl	r0, r8, #9
   23754:	lsr	r2, r9, #23
   23758:	cmp	r1, r9, lsr #23
   2375c:	orr	r3, r3, r8, lsr #23
   23760:	mvnne	r0, #0
   23764:	movwne	r2, #1
   23768:	cmp	r1, r9, lsr #23
   2376c:	mvnne	r3, #0
   23770:	mov	r8, r0
   23774:	mov	r9, r3
   23778:	b	23b38 <__assert_fail@plt+0x123c4>
   2377c:	cmp	r0, #105	; 0x69
   23780:	mov	r3, #0
   23784:	bne	23668 <__assert_fail@plt+0x11ef4>
   23788:	ldrb	r0, [r5, #2]
   2378c:	mov	r1, #1
   23790:	cmp	r0, #66	; 0x42
   23794:	movweq	r1, #3
   23798:	str	r1, [sp, #8]
   2379c:	b	23668 <__assert_fail@plt+0x11ef4>
   237a0:	cmp	r7, #84	; 0x54
   237a4:	beq	23970 <__assert_fail@plt+0x121fc>
   237a8:	cmp	r7, #89	; 0x59
   237ac:	bne	23a50 <__assert_fail@plt+0x122dc>
   237b0:	mvn	r0, #0
   237b4:	mvn	r1, #0
   237b8:	mov	r2, r4
   237bc:	mov	r5, r3
   237c0:	bl	24218 <__assert_fail@plt+0x12aa4>
   237c4:	mov	ip, r5
   237c8:	mvn	lr, #0
   237cc:	mov	r2, #0
   237d0:	mvn	r3, #7
   237d4:	mov	r5, r8
   237d8:	mov	r7, r9
   237dc:	umull	r8, r6, r5, r4
   237e0:	mvn	r9, #0
   237e4:	mla	r6, r5, ip, r6
   237e8:	subs	r5, r0, r5
   237ec:	sbcs	r5, r1, r7
   237f0:	mov	r5, #0
   237f4:	movwcc	r5, #1
   237f8:	cmp	r5, #0
   237fc:	mlaeq	r9, r7, r4, r6
   23800:	movne	r8, lr
   23804:	orrne	r2, r2, #1
   23808:	adds	r3, r3, #1
   2380c:	mov	r5, r8
   23810:	mov	r7, r9
   23814:	bne	237dc <__assert_fail@plt+0x12068>
   23818:	b	23b38 <__assert_fail@plt+0x123c4>
   2381c:	cmp	r7, #116	; 0x74
   23820:	beq	23970 <__assert_fail@plt+0x121fc>
   23824:	cmp	r7, #119	; 0x77
   23828:	bne	23a50 <__assert_fail@plt+0x122dc>
   2382c:	lsl	r1, r9, #1
   23830:	lsl	r0, r8, #1
   23834:	cmp	r9, #0
   23838:	lsr	r2, r9, #31
   2383c:	orr	r1, r1, r8, lsr #31
   23840:	mvnlt	r0, #0
   23844:	mvnlt	r1, #0
   23848:	mov	r8, r0
   2384c:	mov	r9, r1
   23850:	b	23b38 <__assert_fail@plt+0x123c4>
   23854:	mvn	r0, #0
   23858:	mvn	r1, #0
   2385c:	mov	r2, r4
   23860:	mov	r5, r3
   23864:	bl	24218 <__assert_fail@plt+0x12aa4>
   23868:	mov	ip, r5
   2386c:	mvn	lr, #0
   23870:	mov	r2, #0
   23874:	mvn	r3, #2
   23878:	mov	r6, r8
   2387c:	mov	r5, r9
   23880:	umull	r8, r7, r6, r4
   23884:	mvn	r9, #0
   23888:	mla	r7, r6, ip, r7
   2388c:	subs	r6, r0, r6
   23890:	sbcs	r6, r1, r5
   23894:	mov	r6, #0
   23898:	movwcc	r6, #1
   2389c:	cmp	r6, #0
   238a0:	mlaeq	r9, r5, r4, r7
   238a4:	movne	r8, lr
   238a8:	orrne	r2, r2, #1
   238ac:	adds	r3, r3, #1
   238b0:	mov	r6, r8
   238b4:	mov	r5, r9
   238b8:	bne	23880 <__assert_fail@plt+0x1210c>
   238bc:	b	23b38 <__assert_fail@plt+0x123c4>
   238c0:	mvn	r0, #0
   238c4:	mvn	r1, #0
   238c8:	mov	r2, r4
   238cc:	mov	r5, r3
   238d0:	bl	24218 <__assert_fail@plt+0x12aa4>
   238d4:	subs	r0, r0, r8
   238d8:	mov	r2, #0
   238dc:	sbcs	r0, r1, r9
   238e0:	movwcc	r2, #1
   238e4:	umull	r0, r1, r8, r4
   238e8:	mla	r1, r8, r5, r1
   238ec:	cmp	r2, #0
   238f0:	mla	r9, r9, r4, r1
   238f4:	mvnne	r0, #0
   238f8:	mvnne	r9, #0
   238fc:	mov	r8, r0
   23900:	b	23b38 <__assert_fail@plt+0x123c4>
   23904:	mvn	r0, #0
   23908:	mvn	r1, #0
   2390c:	mov	r2, r4
   23910:	mov	r5, r3
   23914:	bl	24218 <__assert_fail@plt+0x12aa4>
   23918:	mov	ip, r5
   2391c:	mvn	lr, #0
   23920:	mov	r2, #0
   23924:	mvn	r3, #1
   23928:	mov	r6, r8
   2392c:	mov	r5, r9
   23930:	umull	r8, r7, r6, r4
   23934:	mvn	r9, #0
   23938:	mla	r7, r6, ip, r7
   2393c:	subs	r6, r0, r6
   23940:	sbcs	r6, r1, r5
   23944:	mov	r6, #0
   23948:	movwcc	r6, #1
   2394c:	cmp	r6, #0
   23950:	mlaeq	r9, r5, r4, r7
   23954:	movne	r8, lr
   23958:	orrne	r2, r2, #1
   2395c:	adds	r3, r3, #1
   23960:	mov	r6, r8
   23964:	mov	r5, r9
   23968:	bne	23930 <__assert_fail@plt+0x121bc>
   2396c:	b	23b38 <__assert_fail@plt+0x123c4>
   23970:	mvn	r0, #0
   23974:	mvn	r1, #0
   23978:	mov	r2, r4
   2397c:	mov	r5, r3
   23980:	bl	24218 <__assert_fail@plt+0x12aa4>
   23984:	mov	ip, r5
   23988:	mvn	lr, #0
   2398c:	mov	r2, #0
   23990:	mvn	r3, #3
   23994:	mov	r6, r8
   23998:	mov	r5, r9
   2399c:	umull	r8, r7, r6, r4
   239a0:	mvn	r9, #0
   239a4:	mla	r7, r6, ip, r7
   239a8:	subs	r6, r0, r6
   239ac:	sbcs	r6, r1, r5
   239b0:	mov	r6, #0
   239b4:	movwcc	r6, #1
   239b8:	cmp	r6, #0
   239bc:	mlaeq	r9, r5, r4, r7
   239c0:	movne	r8, lr
   239c4:	orrne	r2, r2, #1
   239c8:	adds	r3, r3, #1
   239cc:	mov	r6, r8
   239d0:	mov	r5, r9
   239d4:	bne	2399c <__assert_fail@plt+0x12228>
   239d8:	b	23b38 <__assert_fail@plt+0x123c4>
   239dc:	cmp	r7, #90	; 0x5a
   239e0:	bne	23a50 <__assert_fail@plt+0x122dc>
   239e4:	mvn	r0, #0
   239e8:	mvn	r1, #0
   239ec:	mov	r2, r4
   239f0:	mov	r5, r3
   239f4:	bl	24218 <__assert_fail@plt+0x12aa4>
   239f8:	mov	ip, r5
   239fc:	mvn	lr, #0
   23a00:	mov	r2, #0
   23a04:	mvn	r3, #6
   23a08:	mov	r5, r8
   23a0c:	mov	r7, r9
   23a10:	umull	r8, r6, r5, r4
   23a14:	mvn	r9, #0
   23a18:	mla	r6, r5, ip, r6
   23a1c:	subs	r5, r0, r5
   23a20:	sbcs	r5, r1, r7
   23a24:	mov	r5, #0
   23a28:	movwcc	r5, #1
   23a2c:	cmp	r5, #0
   23a30:	mlaeq	r9, r7, r4, r6
   23a34:	movne	r8, lr
   23a38:	orrne	r2, r2, #1
   23a3c:	adds	r3, r3, #1
   23a40:	mov	r5, r8
   23a44:	mov	r7, r9
   23a48:	bne	23a10 <__assert_fail@plt+0x1229c>
   23a4c:	b	23b38 <__assert_fail@plt+0x123c4>
   23a50:	ldr	r0, [sp, #12]
   23a54:	strd	r8, [r0]
   23a58:	ldr	r6, [sp, #4]
   23a5c:	orr	r6, r6, #2
   23a60:	b	23b64 <__assert_fail@plt+0x123f0>
   23a64:	mvn	r0, #0
   23a68:	mvn	r1, #0
   23a6c:	mov	r2, r4
   23a70:	mov	r5, r3
   23a74:	bl	24218 <__assert_fail@plt+0x12aa4>
   23a78:	mov	ip, r5
   23a7c:	mvn	lr, #0
   23a80:	mov	r2, #0
   23a84:	mvn	r3, #5
   23a88:	mov	r5, r8
   23a8c:	mov	r7, r9
   23a90:	umull	r8, r6, r5, r4
   23a94:	mvn	r9, #0
   23a98:	mla	r6, r5, ip, r6
   23a9c:	subs	r5, r0, r5
   23aa0:	sbcs	r5, r1, r7
   23aa4:	mov	r5, #0
   23aa8:	movwcc	r5, #1
   23aac:	cmp	r5, #0
   23ab0:	mlaeq	r9, r7, r4, r6
   23ab4:	movne	r8, lr
   23ab8:	orrne	r2, r2, #1
   23abc:	adds	r3, r3, #1
   23ac0:	mov	r5, r8
   23ac4:	mov	r7, r9
   23ac8:	bne	23a90 <__assert_fail@plt+0x1231c>
   23acc:	b	23b38 <__assert_fail@plt+0x123c4>
   23ad0:	mvn	r0, #0
   23ad4:	mvn	r1, #0
   23ad8:	mov	r2, r4
   23adc:	mov	r5, r3
   23ae0:	bl	24218 <__assert_fail@plt+0x12aa4>
   23ae4:	mov	ip, r5
   23ae8:	mvn	lr, #0
   23aec:	mov	r2, #0
   23af0:	mvn	r3, #4
   23af4:	mov	r5, r8
   23af8:	mov	r7, r9
   23afc:	umull	r8, r6, r5, r4
   23b00:	mvn	r9, #0
   23b04:	mla	r6, r5, ip, r6
   23b08:	subs	r5, r0, r5
   23b0c:	sbcs	r5, r1, r7
   23b10:	mov	r5, #0
   23b14:	movwcc	r5, #1
   23b18:	cmp	r5, #0
   23b1c:	mlaeq	r9, r7, r4, r6
   23b20:	movne	r8, lr
   23b24:	orrne	r2, r2, #1
   23b28:	adds	r3, r3, #1
   23b2c:	mov	r5, r8
   23b30:	mov	r7, r9
   23b34:	bne	23afc <__assert_fail@plt+0x12388>
   23b38:	ldr	r1, [sp]
   23b3c:	ldr	r3, [sp, #8]
   23b40:	ldr	r6, [sp, #4]
   23b44:	add	r0, r1, r3
   23b48:	orr	r6, r2, r6
   23b4c:	str	r0, [sl]
   23b50:	ldrb	r0, [r1, r3]
   23b54:	cmp	r0, #0
   23b58:	orrne	r6, r6, #2
   23b5c:	ldr	r0, [sp, #12]
   23b60:	strd	r8, [r0]
   23b64:	mov	r0, r6
   23b68:	sub	sp, fp, #28
   23b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b70:	movw	r0, #22113	; 0x5661
   23b74:	movw	r1, #22151	; 0x5687
   23b78:	movw	r3, #22245	; 0x56e5
   23b7c:	mov	r2, #85	; 0x55
   23b80:	movt	r0, #2
   23b84:	movt	r1, #2
   23b88:	movt	r3, #2
   23b8c:	bl	11774 <__assert_fail@plt>
   23b90:	clz	r2, r1
   23b94:	clz	r3, r0
   23b98:	lsr	r2, r2, #5
   23b9c:	lsr	r3, r3, #5
   23ba0:	orrs	r2, r3, r2
   23ba4:	movwne	r1, #1
   23ba8:	movwne	r0, #1
   23bac:	cmp	r1, #0
   23bb0:	beq	23be0 <__assert_fail@plt+0x1246c>
   23bb4:	mvn	r2, #-2147483648	; 0x80000000
   23bb8:	udiv	r2, r2, r1
   23bbc:	cmp	r2, r0
   23bc0:	bcs	23be0 <__assert_fail@plt+0x1246c>
   23bc4:	push	{fp, lr}
   23bc8:	mov	fp, sp
   23bcc:	bl	11630 <__errno_location@plt>
   23bd0:	mov	r1, #12
   23bd4:	str	r1, [r0]
   23bd8:	mov	r0, #0
   23bdc:	pop	{fp, pc}
   23be0:	b	113d8 <calloc@plt>
   23be4:	cmp	r0, #0
   23be8:	movweq	r0, #1
   23bec:	cmn	r0, #1
   23bf0:	ble	23bf8 <__assert_fail@plt+0x12484>
   23bf4:	b	115b8 <malloc@plt>
   23bf8:	push	{fp, lr}
   23bfc:	mov	fp, sp
   23c00:	bl	11630 <__errno_location@plt>
   23c04:	mov	r1, #12
   23c08:	str	r1, [r0]
   23c0c:	mov	r0, #0
   23c10:	pop	{fp, pc}
   23c14:	push	{fp, lr}
   23c18:	mov	fp, sp
   23c1c:	cmp	r0, #0
   23c20:	beq	23c3c <__assert_fail@plt+0x124c8>
   23c24:	cmp	r1, #0
   23c28:	beq	23c48 <__assert_fail@plt+0x124d4>
   23c2c:	cmn	r1, #1
   23c30:	ble	23c50 <__assert_fail@plt+0x124dc>
   23c34:	pop	{fp, lr}
   23c38:	b	11510 <realloc@plt>
   23c3c:	mov	r0, r1
   23c40:	pop	{fp, lr}
   23c44:	b	23be4 <__assert_fail@plt+0x12470>
   23c48:	bl	13c04 <__assert_fail@plt+0x2490>
   23c4c:	b	23c5c <__assert_fail@plt+0x124e8>
   23c50:	bl	11630 <__errno_location@plt>
   23c54:	mov	r1, #12
   23c58:	str	r1, [r0]
   23c5c:	mov	r0, #0
   23c60:	pop	{fp, pc}
   23c64:	push	{r4, r5, r6, sl, fp, lr}
   23c68:	add	fp, sp, #16
   23c6c:	mov	r4, r0
   23c70:	bl	1157c <__fpending@plt>
   23c74:	mov	r5, r0
   23c78:	mov	r0, r4
   23c7c:	bl	11588 <ferror_unlocked@plt>
   23c80:	mov	r6, r0
   23c84:	mov	r0, r4
   23c88:	bl	139f8 <__assert_fail@plt+0x2284>
   23c8c:	cmp	r6, #0
   23c90:	beq	23cb0 <__assert_fail@plt+0x1253c>
   23c94:	mvn	r4, #0
   23c98:	cmp	r0, #0
   23c9c:	bne	23cdc <__assert_fail@plt+0x12568>
   23ca0:	bl	11630 <__errno_location@plt>
   23ca4:	mov	r1, #0
   23ca8:	str	r1, [r0]
   23cac:	b	23cdc <__assert_fail@plt+0x12568>
   23cb0:	cmp	r0, #0
   23cb4:	mov	r4, r0
   23cb8:	mvnne	r4, #0
   23cbc:	cmp	r5, #0
   23cc0:	bne	23cdc <__assert_fail@plt+0x12568>
   23cc4:	cmp	r0, #0
   23cc8:	beq	23cdc <__assert_fail@plt+0x12568>
   23ccc:	bl	11630 <__errno_location@plt>
   23cd0:	ldr	r0, [r0]
   23cd4:	subs	r4, r0, #9
   23cd8:	mvnne	r4, #0
   23cdc:	mov	r0, r4
   23ce0:	pop	{r4, r5, r6, sl, fp, pc}
   23ce4:	push	{r4, r5, r6, r7, fp, lr}
   23ce8:	add	fp, sp, #16
   23cec:	mov	r4, r0
   23cf0:	ldr	r0, [r0, #4]
   23cf4:	mov	r5, r1
   23cf8:	cmp	r0, r1
   23cfc:	bcs	23d2c <__assert_fail@plt+0x125b8>
   23d00:	mov	r6, r3
   23d04:	cmp	r3, #0
   23d08:	beq	23d34 <__assert_fail@plt+0x125c0>
   23d0c:	mvn	r0, #0
   23d10:	udiv	r0, r0, r6
   23d14:	cmp	r0, r5
   23d18:	bcs	23d34 <__assert_fail@plt+0x125c0>
   23d1c:	bl	11630 <__errno_location@plt>
   23d20:	mov	r1, #12
   23d24:	str	r1, [r0]
   23d28:	b	23d98 <__assert_fail@plt+0x12624>
   23d2c:	str	r5, [r4]
   23d30:	b	23d90 <__assert_fail@plt+0x1261c>
   23d34:	ldr	r0, [r4, #8]
   23d38:	mul	r1, r6, r5
   23d3c:	cmp	r0, r2
   23d40:	beq	23d58 <__assert_fail@plt+0x125e4>
   23d44:	bl	23c14 <__assert_fail@plt+0x124a0>
   23d48:	mov	r7, r0
   23d4c:	cmp	r0, #0
   23d50:	bne	23d88 <__assert_fail@plt+0x12614>
   23d54:	b	23d98 <__assert_fail@plt+0x12624>
   23d58:	mov	r0, r1
   23d5c:	bl	23be4 <__assert_fail@plt+0x12470>
   23d60:	cmp	r0, #0
   23d64:	beq	23d98 <__assert_fail@plt+0x12624>
   23d68:	ldr	r1, [r4, #8]
   23d6c:	mov	r7, r0
   23d70:	cmp	r1, #0
   23d74:	beq	23d88 <__assert_fail@plt+0x12614>
   23d78:	ldr	r0, [r4]
   23d7c:	mul	r2, r0, r6
   23d80:	mov	r0, r7
   23d84:	bl	1148c <memcpy@plt>
   23d88:	str	r5, [r4]
   23d8c:	stmib	r4, {r5, r7}
   23d90:	mov	r0, #1
   23d94:	pop	{r4, r5, r6, r7, fp, pc}
   23d98:	mov	r0, #0
   23d9c:	pop	{r4, r5, r6, r7, fp, pc}
   23da0:	sub	sp, sp, #8
   23da4:	push	{r4, r5, r6, r7, fp, lr}
   23da8:	add	fp, sp, #16
   23dac:	sub	sp, sp, #8
   23db0:	mov	r5, r0
   23db4:	add	r0, fp, #8
   23db8:	cmp	r1, #11
   23dbc:	str	r3, [fp, #12]
   23dc0:	str	r2, [fp, #8]
   23dc4:	str	r0, [sp, #4]
   23dc8:	bhi	23e04 <__assert_fail@plt+0x12690>
   23dcc:	mov	r0, #1
   23dd0:	movw	r2, #1300	; 0x514
   23dd4:	tst	r2, r0, lsl r1
   23dd8:	bne	23ebc <__assert_fail@plt+0x12748>
   23ddc:	movw	r2, #2570	; 0xa0a
   23de0:	tst	r2, r0, lsl r1
   23de4:	bne	23e2c <__assert_fail@plt+0x126b8>
   23de8:	cmp	r1, #0
   23dec:	bne	23e04 <__assert_fail@plt+0x12690>
   23df0:	ldr	r0, [sp, #4]
   23df4:	add	r1, r0, #4
   23df8:	str	r1, [sp, #4]
   23dfc:	mov	r1, #0
   23e00:	b	23ec8 <__assert_fail@plt+0x12754>
   23e04:	sub	r0, r1, #1024	; 0x400
   23e08:	cmp	r0, #10
   23e0c:	bhi	23ebc <__assert_fail@plt+0x12748>
   23e10:	mov	r2, #1
   23e14:	movw	r3, #645	; 0x285
   23e18:	tst	r3, r2, lsl r0
   23e1c:	bne	23ebc <__assert_fail@plt+0x12748>
   23e20:	movw	r3, #1282	; 0x502
   23e24:	tst	r3, r2, lsl r0
   23e28:	beq	23e38 <__assert_fail@plt+0x126c4>
   23e2c:	mov	r0, r5
   23e30:	bl	116cc <fcntl64@plt>
   23e34:	b	23ed4 <__assert_fail@plt+0x12760>
   23e38:	cmp	r0, #6
   23e3c:	bne	23ebc <__assert_fail@plt+0x12748>
   23e40:	ldr	r0, [sp, #4]
   23e44:	movw	r7, #25584	; 0x63f0
   23e48:	movt	r7, #3
   23e4c:	add	r1, r0, #4
   23e50:	str	r1, [sp, #4]
   23e54:	ldr	r6, [r0]
   23e58:	ldr	r0, [r7]
   23e5c:	cmp	r0, #0
   23e60:	blt	23ef8 <__assert_fail@plt+0x12784>
   23e64:	mov	r0, r5
   23e68:	movw	r1, #1030	; 0x406
   23e6c:	mov	r2, r6
   23e70:	bl	116cc <fcntl64@plt>
   23e74:	mov	r4, r0
   23e78:	cmn	r0, #1
   23e7c:	bgt	23eec <__assert_fail@plt+0x12778>
   23e80:	bl	11630 <__errno_location@plt>
   23e84:	ldr	r0, [r0]
   23e88:	cmp	r0, #22
   23e8c:	bne	23eec <__assert_fail@plt+0x12778>
   23e90:	mov	r0, r5
   23e94:	mov	r1, #0
   23e98:	mov	r2, r6
   23e9c:	bl	116cc <fcntl64@plt>
   23ea0:	mov	r4, r0
   23ea4:	cmp	r0, #0
   23ea8:	blt	23ed8 <__assert_fail@plt+0x12764>
   23eac:	mvn	r0, #0
   23eb0:	str	r0, [r7]
   23eb4:	mov	r0, #1
   23eb8:	b	23f1c <__assert_fail@plt+0x127a8>
   23ebc:	ldr	r0, [sp, #4]
   23ec0:	add	r2, r0, #4
   23ec4:	str	r2, [sp, #4]
   23ec8:	ldr	r2, [r0]
   23ecc:	mov	r0, r5
   23ed0:	bl	116cc <fcntl64@plt>
   23ed4:	mov	r4, r0
   23ed8:	mov	r0, r4
   23edc:	sub	sp, fp, #16
   23ee0:	pop	{r4, r5, r6, r7, fp, lr}
   23ee4:	add	sp, sp, #8
   23ee8:	bx	lr
   23eec:	mov	r0, #1
   23ef0:	str	r0, [r7]
   23ef4:	b	23ed8 <__assert_fail@plt+0x12764>
   23ef8:	mov	r0, r5
   23efc:	mov	r1, #0
   23f00:	mov	r2, r6
   23f04:	bl	116cc <fcntl64@plt>
   23f08:	mov	r4, r0
   23f0c:	ldr	r0, [r7]
   23f10:	add	r0, r0, #1
   23f14:	clz	r0, r0
   23f18:	lsr	r0, r0, #5
   23f1c:	cmp	r0, #0
   23f20:	beq	23ed8 <__assert_fail@plt+0x12764>
   23f24:	cmp	r4, #0
   23f28:	blt	23ed8 <__assert_fail@plt+0x12764>
   23f2c:	mov	r0, r4
   23f30:	mov	r1, #1
   23f34:	bl	116cc <fcntl64@plt>
   23f38:	cmp	r0, #0
   23f3c:	blt	23f58 <__assert_fail@plt+0x127e4>
   23f40:	orr	r2, r0, #1
   23f44:	mov	r0, r4
   23f48:	mov	r1, #2
   23f4c:	bl	116cc <fcntl64@plt>
   23f50:	cmn	r0, #1
   23f54:	bne	23ed8 <__assert_fail@plt+0x12764>
   23f58:	bl	11630 <__errno_location@plt>
   23f5c:	ldr	r6, [r0]
   23f60:	mov	r5, r0
   23f64:	mov	r0, r4
   23f68:	bl	1175c <close@plt>
   23f6c:	str	r6, [r5]
   23f70:	mvn	r4, #0
   23f74:	b	23ed8 <__assert_fail@plt+0x12764>
   23f78:	push	{fp, lr}
   23f7c:	mov	fp, sp
   23f80:	mov	r0, #14
   23f84:	bl	11708 <nl_langinfo@plt>
   23f88:	movw	r1, #18835	; 0x4993
   23f8c:	cmp	r0, #0
   23f90:	movt	r1, #2
   23f94:	movne	r1, r0
   23f98:	movw	r0, #22324	; 0x5734
   23f9c:	ldrb	r2, [r1]
   23fa0:	movt	r0, #2
   23fa4:	cmp	r2, #0
   23fa8:	movne	r0, r1
   23fac:	pop	{fp, pc}
   23fb0:	push	{r4, r5, r6, r7, fp, lr}
   23fb4:	add	fp, sp, #16
   23fb8:	sub	sp, sp, #8
   23fbc:	add	r5, sp, #4
   23fc0:	cmp	r0, #0
   23fc4:	mov	r7, r2
   23fc8:	mov	r4, r1
   23fcc:	movne	r5, r0
   23fd0:	mov	r0, r5
   23fd4:	bl	11594 <mbrtowc@plt>
   23fd8:	mov	r6, r0
   23fdc:	cmp	r7, #0
   23fe0:	beq	24004 <__assert_fail@plt+0x12890>
   23fe4:	cmn	r6, #2
   23fe8:	bcc	24004 <__assert_fail@plt+0x12890>
   23fec:	mov	r0, #0
   23ff0:	bl	2404c <__assert_fail@plt+0x128d8>
   23ff4:	cmp	r0, #0
   23ff8:	ldrbeq	r0, [r4]
   23ffc:	moveq	r6, #1
   24000:	streq	r0, [r5]
   24004:	mov	r0, r6
   24008:	sub	sp, fp, #16
   2400c:	pop	{r4, r5, r6, r7, fp, pc}
   24010:	cmp	r2, #0
   24014:	beq	24044 <__assert_fail@plt+0x128d0>
   24018:	mvn	r3, #0
   2401c:	udiv	r3, r3, r2
   24020:	cmp	r3, r1
   24024:	bcs	24044 <__assert_fail@plt+0x128d0>
   24028:	push	{fp, lr}
   2402c:	mov	fp, sp
   24030:	bl	11630 <__errno_location@plt>
   24034:	mov	r1, #12
   24038:	str	r1, [r0]
   2403c:	mov	r0, #0
   24040:	pop	{fp, pc}
   24044:	mul	r1, r2, r1
   24048:	b	23c14 <__assert_fail@plt+0x124a0>
   2404c:	push	{r4, sl, fp, lr}
   24050:	add	fp, sp, #8
   24054:	sub	sp, sp, #264	; 0x108
   24058:	add	r1, sp, #7
   2405c:	movw	r2, #257	; 0x101
   24060:	bl	240b0 <__assert_fail@plt+0x1293c>
   24064:	mov	r4, #0
   24068:	cmp	r0, #0
   2406c:	bne	240a4 <__assert_fail@plt+0x12930>
   24070:	movw	r1, #22330	; 0x573a
   24074:	add	r0, sp, #7
   24078:	movt	r1, #2
   2407c:	bl	11420 <strcmp@plt>
   24080:	cmp	r0, #0
   24084:	beq	240a4 <__assert_fail@plt+0x12930>
   24088:	movw	r1, #22332	; 0x573c
   2408c:	add	r0, sp, #7
   24090:	movt	r1, #2
   24094:	bl	11420 <strcmp@plt>
   24098:	mov	r4, r0
   2409c:	cmp	r0, #0
   240a0:	movwne	r4, #1
   240a4:	mov	r0, r4
   240a8:	sub	sp, fp, #8
   240ac:	pop	{r4, sl, fp, pc}
   240b0:	push	{r4, r5, r6, r7, fp, lr}
   240b4:	add	fp, sp, #16
   240b8:	mov	r4, r1
   240bc:	mov	r1, #0
   240c0:	mov	r6, r2
   240c4:	bl	116d8 <setlocale@plt>
   240c8:	cmp	r0, #0
   240cc:	beq	240f8 <__assert_fail@plt+0x12984>
   240d0:	mov	r7, r0
   240d4:	bl	11618 <strlen@plt>
   240d8:	cmp	r0, r6
   240dc:	bcs	2410c <__assert_fail@plt+0x12998>
   240e0:	add	r2, r0, #1
   240e4:	mov	r0, r4
   240e8:	mov	r1, r7
   240ec:	bl	1148c <memcpy@plt>
   240f0:	mov	r5, #0
   240f4:	b	24134 <__assert_fail@plt+0x129c0>
   240f8:	cmp	r6, #0
   240fc:	mov	r5, #22
   24100:	movne	r0, #0
   24104:	strbne	r0, [r4]
   24108:	b	24134 <__assert_fail@plt+0x129c0>
   2410c:	mov	r5, #34	; 0x22
   24110:	cmp	r6, #0
   24114:	beq	24134 <__assert_fail@plt+0x129c0>
   24118:	sub	r6, r6, #1
   2411c:	mov	r0, r4
   24120:	mov	r1, r7
   24124:	mov	r2, r6
   24128:	bl	1148c <memcpy@plt>
   2412c:	mov	r0, #0
   24130:	strb	r0, [r4, r6]
   24134:	mov	r0, r5
   24138:	pop	{r4, r5, r6, r7, fp, pc}
   2413c:	mov	r1, #0
   24140:	b	116d8 <setlocale@plt>
   24144:	cmp	r3, #0
   24148:	cmpeq	r2, #0
   2414c:	bne	24170 <__assert_fail@plt+0x129fc>
   24150:	cmp	r1, #0
   24154:	movlt	r1, #-2147483648	; 0x80000000
   24158:	movlt	r0, #0
   2415c:	blt	2416c <__assert_fail@plt+0x129f8>
   24160:	cmpeq	r0, #0
   24164:	mvnne	r1, #-2147483648	; 0x80000000
   24168:	mvnne	r0, #0
   2416c:	b	24254 <__assert_fail@plt+0x12ae0>
   24170:	sub	sp, sp, #8
   24174:	push	{sp, lr}
   24178:	cmp	r1, #0
   2417c:	blt	2419c <__assert_fail@plt+0x12a28>
   24180:	cmp	r3, #0
   24184:	blt	241d0 <__assert_fail@plt+0x12a5c>
   24188:	bl	24264 <__assert_fail@plt+0x12af0>
   2418c:	ldr	lr, [sp, #4]
   24190:	add	sp, sp, #8
   24194:	pop	{r2, r3}
   24198:	bx	lr
   2419c:	rsbs	r0, r0, #0
   241a0:	sbc	r1, r1, r1, lsl #1
   241a4:	cmp	r3, #0
   241a8:	blt	241f4 <__assert_fail@plt+0x12a80>
   241ac:	bl	24264 <__assert_fail@plt+0x12af0>
   241b0:	ldr	lr, [sp, #4]
   241b4:	add	sp, sp, #8
   241b8:	pop	{r2, r3}
   241bc:	rsbs	r0, r0, #0
   241c0:	sbc	r1, r1, r1, lsl #1
   241c4:	rsbs	r2, r2, #0
   241c8:	sbc	r3, r3, r3, lsl #1
   241cc:	bx	lr
   241d0:	rsbs	r2, r2, #0
   241d4:	sbc	r3, r3, r3, lsl #1
   241d8:	bl	24264 <__assert_fail@plt+0x12af0>
   241dc:	ldr	lr, [sp, #4]
   241e0:	add	sp, sp, #8
   241e4:	pop	{r2, r3}
   241e8:	rsbs	r0, r0, #0
   241ec:	sbc	r1, r1, r1, lsl #1
   241f0:	bx	lr
   241f4:	rsbs	r2, r2, #0
   241f8:	sbc	r3, r3, r3, lsl #1
   241fc:	bl	24264 <__assert_fail@plt+0x12af0>
   24200:	ldr	lr, [sp, #4]
   24204:	add	sp, sp, #8
   24208:	pop	{r2, r3}
   2420c:	rsbs	r2, r2, #0
   24210:	sbc	r3, r3, r3, lsl #1
   24214:	bx	lr
   24218:	cmp	r3, #0
   2421c:	cmpeq	r2, #0
   24220:	bne	24238 <__assert_fail@plt+0x12ac4>
   24224:	cmp	r1, #0
   24228:	cmpeq	r0, #0
   2422c:	mvnne	r1, #0
   24230:	mvnne	r0, #0
   24234:	b	24254 <__assert_fail@plt+0x12ae0>
   24238:	sub	sp, sp, #8
   2423c:	push	{sp, lr}
   24240:	bl	24264 <__assert_fail@plt+0x12af0>
   24244:	ldr	lr, [sp, #4]
   24248:	add	sp, sp, #8
   2424c:	pop	{r2, r3}
   24250:	bx	lr
   24254:	push	{r1, lr}
   24258:	mov	r0, #8
   2425c:	bl	113fc <raise@plt>
   24260:	pop	{r1, pc}
   24264:	cmp	r1, r3
   24268:	cmpeq	r0, r2
   2426c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24270:	mov	r4, r0
   24274:	movcc	r0, #0
   24278:	mov	r5, r1
   2427c:	ldr	lr, [sp, #36]	; 0x24
   24280:	movcc	r1, r0
   24284:	bcc	24380 <__assert_fail@plt+0x12c0c>
   24288:	cmp	r3, #0
   2428c:	clzeq	ip, r2
   24290:	clzne	ip, r3
   24294:	addeq	ip, ip, #32
   24298:	cmp	r5, #0
   2429c:	clzeq	r1, r4
   242a0:	addeq	r1, r1, #32
   242a4:	clzne	r1, r5
   242a8:	sub	ip, ip, r1
   242ac:	sub	sl, ip, #32
   242b0:	lsl	r9, r3, ip
   242b4:	rsb	fp, ip, #32
   242b8:	orr	r9, r9, r2, lsl sl
   242bc:	orr	r9, r9, r2, lsr fp
   242c0:	lsl	r8, r2, ip
   242c4:	cmp	r5, r9
   242c8:	cmpeq	r4, r8
   242cc:	movcc	r0, #0
   242d0:	movcc	r1, r0
   242d4:	bcc	242f0 <__assert_fail@plt+0x12b7c>
   242d8:	mov	r0, #1
   242dc:	subs	r4, r4, r8
   242e0:	lsl	r1, r0, sl
   242e4:	orr	r1, r1, r0, lsr fp
   242e8:	lsl	r0, r0, ip
   242ec:	sbc	r5, r5, r9
   242f0:	cmp	ip, #0
   242f4:	beq	24380 <__assert_fail@plt+0x12c0c>
   242f8:	lsr	r6, r8, #1
   242fc:	orr	r6, r6, r9, lsl #31
   24300:	lsr	r7, r9, #1
   24304:	mov	r2, ip
   24308:	b	2432c <__assert_fail@plt+0x12bb8>
   2430c:	subs	r3, r4, r6
   24310:	sbc	r8, r5, r7
   24314:	adds	r3, r3, r3
   24318:	adc	r8, r8, r8
   2431c:	adds	r4, r3, #1
   24320:	adc	r5, r8, #0
   24324:	subs	r2, r2, #1
   24328:	beq	24348 <__assert_fail@plt+0x12bd4>
   2432c:	cmp	r5, r7
   24330:	cmpeq	r4, r6
   24334:	bcs	2430c <__assert_fail@plt+0x12b98>
   24338:	adds	r4, r4, r4
   2433c:	adc	r5, r5, r5
   24340:	subs	r2, r2, #1
   24344:	bne	2432c <__assert_fail@plt+0x12bb8>
   24348:	lsr	r3, r4, ip
   2434c:	orr	r3, r3, r5, lsl fp
   24350:	lsr	r2, r5, ip
   24354:	orr	r3, r3, r5, lsr sl
   24358:	adds	r0, r0, r4
   2435c:	mov	r4, r3
   24360:	lsl	r3, r2, ip
   24364:	orr	r3, r3, r4, lsl sl
   24368:	lsl	ip, r4, ip
   2436c:	orr	r3, r3, r4, lsr fp
   24370:	adc	r1, r1, r5
   24374:	subs	r0, r0, ip
   24378:	mov	r5, r2
   2437c:	sbc	r1, r1, r3
   24380:	cmp	lr, #0
   24384:	strdne	r4, [lr]
   24388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2438c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24390:	mov	r7, r0
   24394:	ldr	r6, [pc, #72]	; 243e4 <__assert_fail@plt+0x12c70>
   24398:	ldr	r5, [pc, #72]	; 243e8 <__assert_fail@plt+0x12c74>
   2439c:	add	r6, pc, r6
   243a0:	add	r5, pc, r5
   243a4:	sub	r6, r6, r5
   243a8:	mov	r8, r1
   243ac:	mov	r9, r2
   243b0:	bl	113a0 <pthread_mutex_unlock@plt-0x20>
   243b4:	asrs	r6, r6, #2
   243b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   243bc:	mov	r4, #0
   243c0:	add	r4, r4, #1
   243c4:	ldr	r3, [r5], #4
   243c8:	mov	r2, r9
   243cc:	mov	r1, r8
   243d0:	mov	r0, r7
   243d4:	blx	r3
   243d8:	cmp	r6, r4
   243dc:	bne	243c0 <__assert_fail@plt+0x12c4c>
   243e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   243e4:	andeq	r1, r1, r8, ror #22
   243e8:	andeq	r1, r1, r0, ror #22
   243ec:	bx	lr
   243f0:	ldr	r3, [pc, #12]	; 24404 <__assert_fail@plt+0x12c90>
   243f4:	mov	r1, #0
   243f8:	add	r3, pc, r3
   243fc:	ldr	r2, [r3]
   24400:	b	11654 <__cxa_atexit@plt>
   24404:	andeq	r1, r1, r4, asr sp

Disassembly of section .fini:

00024408 <.fini>:
   24408:	push	{r3, lr}
   2440c:	pop	{r3, pc}
