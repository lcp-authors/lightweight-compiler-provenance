
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

00011338 <.init>:
   11338:	push	{r3, lr}
   1133c:	bl	1171c <__assert_fail@plt+0x4c>
   11340:	pop	{r3, pc}

Disassembly of section .plt:

00011344 <calloc@plt-0x14>:
   11344:	push	{lr}		; (str lr, [sp, #-4]!)
   11348:	ldr	lr, [pc, #4]	; 11354 <calloc@plt-0x4>
   1134c:	add	lr, pc, lr
   11350:	ldr	pc, [lr, #8]!
   11354:	andeq	sp, r1, ip, lsr #25

00011358 <calloc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3244]!	; 0xcac

00011364 <fputs_unlocked@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3236]!	; 0xca4

00011370 <raise@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3228]!	; 0xc9c

0001137c <fsync@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3220]!	; 0xc94

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3212]!	; 0xc8c

00011394 <posix_fadvise64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3204]!	; 0xc84

000113a0 <read@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3196]!	; 0xc7c

000113ac <fflush@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3188]!	; 0xc74

000113b8 <sigprocmask@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3172]!	; 0xc64

000113d0 <free@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113dc <clock_gettime@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3156]!	; 0xc54

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3140]!	; 0xc44

00011400 <__strtoull_internal@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3132]!	; 0xc3c

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3124]!	; 0xc34

00011418 <ftruncate64@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3116]!	; 0xc2c

00011424 <memcmp@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3108]!	; 0xc24

00011430 <dcgettext@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3100]!	; 0xc1c

0001143c <dup2@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3092]!	; 0xc14

00011448 <realloc@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3084]!	; 0xc0c

00011454 <sigismember@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3076]!	; 0xc04

00011460 <textdomain@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3068]!	; 0xbfc

0001146c <iswprint@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3060]!	; 0xbf4

00011478 <__fxstat64@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3052]!	; 0xbec

00011484 <sigaction@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011490 <fwrite@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3036]!	; 0xbdc

0001149c <lseek64@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3028]!	; 0xbd4

000114a8 <__ctype_get_mb_cur_max@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114b4 <__fpending@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3012]!	; 0xbc4

000114c0 <mbrtowc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114cc <error@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114d8 <open64@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #2988]!	; 0xbac

000114e4 <getenv@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #2980]!	; 0xba4

000114f0 <malloc@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114fc <error_at_line@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #2964]!	; 0xb94

00011508 <sigaddset@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #2956]!	; 0xb8c

00011514 <__libc_start_main@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #2948]!	; 0xb84

00011520 <__freading@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #2940]!	; 0xb7c

0001152c <__ctype_tolower_loc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #2932]!	; 0xb74

00011538 <__ctype_toupper_loc@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #2924]!	; 0xb6c

00011544 <__gmon_start__@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #2916]!	; 0xb64

00011550 <getopt_long@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #2908]!	; 0xb5c

0001155c <__ctype_b_loc@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #2900]!	; 0xb54

00011568 <exit@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2892]!	; 0xb4c

00011574 <strlen@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2884]!	; 0xb44

00011580 <strchr@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2876]!	; 0xb3c

0001158c <getpagesize@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2868]!	; 0xb34

00011598 <__errno_location@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2860]!	; 0xb2c

000115a4 <__sprintf_chk@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2852]!	; 0xb24

000115b0 <__cxa_atexit@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115bc <__vasprintf_chk@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2836]!	; 0xb14

000115c8 <memset@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115d4 <__printf_chk@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2820]!	; 0xb04

000115e0 <write@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2812]!	; 0xafc

000115ec <fileno@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115f8 <__fprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2796]!	; 0xaec

00011604 <fclose@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2788]!	; 0xae4

00011610 <fseeko64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #118784	; 0x1d000
   11618:	ldr	pc, [ip, #2780]!	; 0xadc

0001161c <fcntl64@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #118784	; 0x1d000
   11624:	ldr	pc, [ip, #2772]!	; 0xad4

00011628 <__overflow@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #118784	; 0x1d000
   11630:	ldr	pc, [ip, #2764]!	; 0xacc

00011634 <setlocale@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #118784	; 0x1d000
   1163c:	ldr	pc, [ip, #2756]!	; 0xac4

00011640 <sigemptyset@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #118784	; 0x1d000
   11648:	ldr	pc, [ip, #2748]!	; 0xabc

0001164c <strrchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #118784	; 0x1d000
   11654:	ldr	pc, [ip, #2740]!	; 0xab4

00011658 <nl_langinfo@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #118784	; 0x1d000
   11660:	ldr	pc, [ip, #2732]!	; 0xaac

00011664 <localeconv@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #118784	; 0x1d000
   1166c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011670 <bindtextdomain@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #118784	; 0x1d000
   11678:	ldr	pc, [ip, #2716]!	; 0xa9c

0001167c <aligned_alloc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #118784	; 0x1d000
   11684:	ldr	pc, [ip, #2708]!	; 0xa94

00011688 <strncmp@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #118784	; 0x1d000
   11690:	ldr	pc, [ip, #2700]!	; 0xa8c

00011694 <fdatasync@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #118784	; 0x1d000
   1169c:	ldr	pc, [ip, #2692]!	; 0xa84

000116a0 <abort@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #118784	; 0x1d000
   116a8:	ldr	pc, [ip, #2684]!	; 0xa7c

000116ac <close@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #118784	; 0x1d000
   116b4:	ldr	pc, [ip, #2676]!	; 0xa74

000116b8 <dcngettext@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #118784	; 0x1d000
   116c0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116c4 <__snprintf_chk@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #118784	; 0x1d000
   116cc:	ldr	pc, [ip, #2660]!	; 0xa64

000116d0 <__assert_fail@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #118784	; 0x1d000
   116d8:	ldr	pc, [ip, #2652]!	; 0xa5c

Disassembly of section .text:

000116e0 <.text>:
   116e0:	mov	fp, #0
   116e4:	mov	lr, #0
   116e8:	pop	{r1}		; (ldr r1, [sp], #4)
   116ec:	mov	r2, sp
   116f0:	push	{r2}		; (str r2, [sp, #-4]!)
   116f4:	push	{r0}		; (str r0, [sp, #-4]!)
   116f8:	ldr	ip, [pc, #16]	; 11710 <__assert_fail@plt+0x40>
   116fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11700:	ldr	r0, [pc, #12]	; 11714 <__assert_fail@plt+0x44>
   11704:	ldr	r3, [pc, #12]	; 11718 <__assert_fail@plt+0x48>
   11708:	bl	11514 <__libc_start_main@plt>
   1170c:	bl	116a0 <abort@plt>
   11710:	andeq	ip, r1, r0, lsl #3
   11714:	andeq	r1, r1, r0, asr #24
   11718:	andeq	ip, r1, r0, lsr #2
   1171c:	ldr	r3, [pc, #20]	; 11738 <__assert_fail@plt+0x68>
   11720:	ldr	r2, [pc, #20]	; 1173c <__assert_fail@plt+0x6c>
   11724:	add	r3, pc, r3
   11728:	ldr	r2, [r3, r2]
   1172c:	cmp	r2, #0
   11730:	bxeq	lr
   11734:	b	11544 <__gmon_start__@plt>
   11738:	ldrdeq	sp, [r1], -r4
   1173c:	andeq	r0, r0, r8, lsr r1
   11740:	ldr	r0, [pc, #24]	; 11760 <__assert_fail@plt+0x90>
   11744:	ldr	r3, [pc, #24]	; 11764 <__assert_fail@plt+0x94>
   11748:	cmp	r3, r0
   1174c:	bxeq	lr
   11750:	ldr	r3, [pc, #16]	; 11768 <__assert_fail@plt+0x98>
   11754:	cmp	r3, #0
   11758:	bxeq	lr
   1175c:	bx	r3
   11760:			; <UNDEFINED> instruction: 0x0002f1b4
   11764:			; <UNDEFINED> instruction: 0x0002f1b4
   11768:	andeq	r0, r0, r0
   1176c:	ldr	r0, [pc, #36]	; 11798 <__assert_fail@plt+0xc8>
   11770:	ldr	r1, [pc, #36]	; 1179c <__assert_fail@plt+0xcc>
   11774:	sub	r1, r1, r0
   11778:	asr	r1, r1, #2
   1177c:	add	r1, r1, r1, lsr #31
   11780:	asrs	r1, r1, #1
   11784:	bxeq	lr
   11788:	ldr	r3, [pc, #16]	; 117a0 <__assert_fail@plt+0xd0>
   1178c:	cmp	r3, #0
   11790:	bxeq	lr
   11794:	bx	r3
   11798:			; <UNDEFINED> instruction: 0x0002f1b4
   1179c:			; <UNDEFINED> instruction: 0x0002f1b4
   117a0:	andeq	r0, r0, r0
   117a4:	push	{r4, lr}
   117a8:	ldr	r4, [pc, #24]	; 117c8 <__assert_fail@plt+0xf8>
   117ac:	ldrb	r3, [r4]
   117b0:	cmp	r3, #0
   117b4:	popne	{r4, pc}
   117b8:	bl	11740 <__assert_fail@plt+0x70>
   117bc:	mov	r3, #1
   117c0:	strb	r3, [r4]
   117c4:	pop	{r4, pc}
   117c8:	ldrdeq	pc, [r2], -ip
   117cc:	b	1176c <__assert_fail@plt+0x9c>
   117d0:	push	{fp, lr}
   117d4:	mov	fp, sp
   117d8:	sub	sp, sp, #56	; 0x38
   117dc:	mov	r4, r0
   117e0:	cmp	r0, #0
   117e4:	bne	11bf4 <__assert_fail@plt+0x524>
   117e8:	movw	r1, #49619	; 0xc1d3
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	movt	r1, #1
   117f8:	bl	11430 <dcgettext@plt>
   117fc:	mov	r1, r0
   11800:	movw	r0, #62564	; 0xf464
   11804:	movt	r0, #2
   11808:	ldr	r2, [r0]
   1180c:	mov	r0, #1
   11810:	mov	r3, r2
   11814:	bl	115d4 <__printf_chk@plt>
   11818:	movw	r1, #49660	; 0xc1fc
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	11430 <dcgettext@plt>
   1182c:	movw	r7, #61908	; 0xf1d4
   11830:	movt	r7, #2
   11834:	ldr	r1, [r7]
   11838:	bl	11364 <fputs_unlocked@plt>
   1183c:	movw	r1, #50076	; 0xc39c
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	11430 <dcgettext@plt>
   11850:	ldr	r1, [r7]
   11854:	bl	11364 <fputs_unlocked@plt>
   11858:	movw	r1, #50747	; 0xc63b
   1185c:	mov	r0, #0
   11860:	mov	r2, #5
   11864:	movt	r1, #1
   11868:	bl	11430 <dcgettext@plt>
   1186c:	ldr	r1, [r7]
   11870:	bl	11364 <fputs_unlocked@plt>
   11874:	movw	r1, #51038	; 0xc75e
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	11430 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	11364 <fputs_unlocked@plt>
   11890:	movw	r1, #51614	; 0xc99e
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	11430 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	11364 <fputs_unlocked@plt>
   118ac:	movw	r1, #51901	; 0xcabd
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #1
   118bc:	bl	11430 <dcgettext@plt>
   118c0:	ldr	r1, [r7]
   118c4:	bl	11364 <fputs_unlocked@plt>
   118c8:	movw	r1, #52007	; 0xcb27
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #1
   118d8:	bl	11430 <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	11364 <fputs_unlocked@plt>
   118e4:	movw	r1, #52044	; 0xcb4c
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11430 <dcgettext@plt>
   118f8:	ldr	r1, [r7]
   118fc:	bl	11364 <fputs_unlocked@plt>
   11900:	movw	r1, #52082	; 0xcb72
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #1
   11910:	bl	11430 <dcgettext@plt>
   11914:	ldr	r1, [r7]
   11918:	bl	11364 <fputs_unlocked@plt>
   1191c:	movw	r1, #52125	; 0xcb9d
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #1
   1192c:	bl	11430 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	11364 <fputs_unlocked@plt>
   11938:	movw	r1, #52170	; 0xcbca
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	movt	r1, #1
   11948:	bl	11430 <dcgettext@plt>
   1194c:	ldr	r1, [r7]
   11950:	bl	11364 <fputs_unlocked@plt>
   11954:	movw	r1, #52229	; 0xcc05
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #1
   11964:	bl	11430 <dcgettext@plt>
   11968:	ldr	r1, [r7]
   1196c:	bl	11364 <fputs_unlocked@plt>
   11970:	movw	r1, #52263	; 0xcc27
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #1
   11980:	bl	11430 <dcgettext@plt>
   11984:	ldr	r1, [r7]
   11988:	bl	11364 <fputs_unlocked@plt>
   1198c:	movw	r1, #52302	; 0xcc4e
   11990:	mov	r0, #0
   11994:	mov	r2, #5
   11998:	movt	r1, #1
   1199c:	bl	11430 <dcgettext@plt>
   119a0:	ldr	r1, [r7]
   119a4:	bl	11364 <fputs_unlocked@plt>
   119a8:	movw	r1, #52359	; 0xcc87
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	movt	r1, #1
   119b8:	bl	11430 <dcgettext@plt>
   119bc:	ldr	r1, [r7]
   119c0:	bl	11364 <fputs_unlocked@plt>
   119c4:	movw	r1, #52417	; 0xccc1
   119c8:	mov	r0, #0
   119cc:	mov	r2, #5
   119d0:	movt	r1, #1
   119d4:	bl	11430 <dcgettext@plt>
   119d8:	ldr	r1, [r7]
   119dc:	bl	11364 <fputs_unlocked@plt>
   119e0:	movw	r1, #52453	; 0xcce5
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	movt	r1, #1
   119f0:	bl	11430 <dcgettext@plt>
   119f4:	ldr	r1, [r7]
   119f8:	bl	11364 <fputs_unlocked@plt>
   119fc:	movw	r1, #52514	; 0xcd22
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #1
   11a0c:	bl	11430 <dcgettext@plt>
   11a10:	ldr	r1, [r7]
   11a14:	bl	11364 <fputs_unlocked@plt>
   11a18:	movw	r1, #52573	; 0xcd5d
   11a1c:	mov	r0, #0
   11a20:	mov	r2, #5
   11a24:	movt	r1, #1
   11a28:	bl	11430 <dcgettext@plt>
   11a2c:	ldr	r1, [r7]
   11a30:	bl	11364 <fputs_unlocked@plt>
   11a34:	movw	r1, #52632	; 0xcd98
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	11430 <dcgettext@plt>
   11a48:	movw	r2, #52768	; 0xce20
   11a4c:	mov	r1, r0
   11a50:	mov	r0, #1
   11a54:	movt	r2, #1
   11a58:	bl	115d4 <__printf_chk@plt>
   11a5c:	movw	r1, #52773	; 0xce25
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	movt	r1, #1
   11a6c:	bl	11430 <dcgettext@plt>
   11a70:	ldr	r1, [r7]
   11a74:	bl	11364 <fputs_unlocked@plt>
   11a78:	movw	r1, #52818	; 0xce52
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	movt	r1, #1
   11a88:	bl	11430 <dcgettext@plt>
   11a8c:	ldr	r1, [r7]
   11a90:	bl	11364 <fputs_unlocked@plt>
   11a94:	movw	r0, #54824	; 0xd628
   11a98:	mov	r2, #48	; 0x30
   11a9c:	mov	r6, sp
   11aa0:	movw	r5, #52872	; 0xce88
   11aa4:	movt	r0, #1
   11aa8:	movt	r5, #1
   11aac:	add	r1, r0, #32
   11ab0:	add	r3, r0, #16
   11ab4:	vld1.64	{d18-d19}, [r0], r2
   11ab8:	vld1.64	{d16-d17}, [r1]
   11abc:	vld1.64	{d20-d21}, [r3]
   11ac0:	add	r1, r6, #32
   11ac4:	vldr	d22, [r0]
   11ac8:	add	r0, r6, #16
   11acc:	vst1.64	{d16-d17}, [r1]
   11ad0:	movw	r1, #53163	; 0xcfab
   11ad4:	vst1.64	{d20-d21}, [r0]
   11ad8:	mov	r0, r6
   11adc:	vst1.64	{d18-d19}, [r0], r2
   11ae0:	movt	r1, #1
   11ae4:	vstr	d22, [r0]
   11ae8:	mov	r0, r5
   11aec:	bl	11388 <strcmp@plt>
   11af0:	cmp	r0, #0
   11af4:	ldrne	r1, [r6, #8]!
   11af8:	cmpne	r1, #0
   11afc:	bne	11ae8 <__assert_fail@plt+0x418>
   11b00:	ldr	r6, [r6, #4]
   11b04:	movw	r1, #53258	; 0xd00a
   11b08:	mov	r0, #0
   11b0c:	mov	r2, #5
   11b10:	movt	r1, #1
   11b14:	bl	11430 <dcgettext@plt>
   11b18:	movw	r2, #53281	; 0xd021
   11b1c:	movw	r3, #53295	; 0xd02f
   11b20:	mov	r1, r0
   11b24:	mov	r0, #1
   11b28:	movt	r2, #1
   11b2c:	movt	r3, #1
   11b30:	bl	115d4 <__printf_chk@plt>
   11b34:	cmp	r6, #0
   11b38:	mov	r0, #5
   11b3c:	mov	r1, #0
   11b40:	moveq	r6, r5
   11b44:	bl	11634 <setlocale@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b50:	movw	r1, #53335	; 0xd057
   11b54:	mov	r2, #3
   11b58:	movt	r1, #1
   11b5c:	bl	11688 <strncmp@plt>
   11b60:	cmp	r0, #0
   11b64:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b68:	movw	r1, #53339	; 0xd05b
   11b6c:	mov	r0, #0
   11b70:	mov	r2, #5
   11b74:	movt	r1, #1
   11b78:	bl	11430 <dcgettext@plt>
   11b7c:	ldr	r1, [r7]
   11b80:	bl	11364 <fputs_unlocked@plt>
   11b84:	movw	r1, #53410	; 0xd0a2
   11b88:	mov	r0, #0
   11b8c:	mov	r2, #5
   11b90:	movt	r1, #1
   11b94:	bl	11430 <dcgettext@plt>
   11b98:	movw	r2, #53295	; 0xd02f
   11b9c:	mov	r1, r0
   11ba0:	mov	r0, #1
   11ba4:	mov	r3, r5
   11ba8:	movt	r2, #1
   11bac:	bl	115d4 <__printf_chk@plt>
   11bb0:	movw	r1, #53437	; 0xd0bd
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11430 <dcgettext@plt>
   11bc4:	movw	r3, #51037	; 0xc75d
   11bc8:	mov	r1, r0
   11bcc:	movw	r0, #53191	; 0xcfc7
   11bd0:	cmp	r6, r5
   11bd4:	mov	r2, r6
   11bd8:	movt	r0, #1
   11bdc:	movt	r3, #1
   11be0:	moveq	r3, r0
   11be4:	mov	r0, #1
   11be8:	bl	115d4 <__printf_chk@plt>
   11bec:	mov	r0, r4
   11bf0:	bl	11568 <exit@plt>
   11bf4:	movw	r0, #61904	; 0xf1d0
   11bf8:	movw	r1, #49580	; 0xc1ac
   11bfc:	mov	r2, #5
   11c00:	movt	r0, #2
   11c04:	movt	r1, #1
   11c08:	ldr	r5, [r0]
   11c0c:	mov	r0, #0
   11c10:	bl	11430 <dcgettext@plt>
   11c14:	mov	r2, r0
   11c18:	movw	r0, #62564	; 0xf464
   11c1c:	mov	r1, #1
   11c20:	movt	r0, #2
   11c24:	ldr	r3, [r0]
   11c28:	mov	r0, r5
   11c2c:	bl	115f8 <__fprintf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	11568 <exit@plt>
   11c38:	nop	{0}
   11c3c:	nop	{0}
   11c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c44:	add	fp, sp, #28
   11c48:	sub	sp, sp, #212	; 0xd4
   11c4c:	str	r0, [sp, #60]	; 0x3c
   11c50:	movw	r0, #53488	; 0xd0f0
   11c54:	mov	r6, r1
   11c58:	movt	r0, #1
   11c5c:	bl	114e4 <getenv@plt>
   11c60:	mov	r5, r0
   11c64:	movw	r0, #62280	; 0xf348
   11c68:	movt	r0, #2
   11c6c:	bl	11640 <sigemptyset@plt>
   11c70:	cmp	r5, #0
   11c74:	bne	11c88 <__assert_fail@plt+0x5b8>
   11c78:	movw	r0, #62280	; 0xf348
   11c7c:	mov	r1, #10
   11c80:	movt	r0, #2
   11c84:	bl	11508 <sigaddset@plt>
   11c88:	add	r4, sp, #64	; 0x40
   11c8c:	mov	r0, #2
   11c90:	mov	r1, #0
   11c94:	mov	r2, r4
   11c98:	bl	11484 <sigaction@plt>
   11c9c:	ldr	r0, [sp, #64]	; 0x40
   11ca0:	cmp	r0, #1
   11ca4:	beq	11cb8 <__assert_fail@plt+0x5e8>
   11ca8:	movw	r0, #62280	; 0xf348
   11cac:	mov	r1, #2
   11cb0:	movt	r0, #2
   11cb4:	bl	11508 <sigaddset@plt>
   11cb8:	movw	r5, #62280	; 0xf348
   11cbc:	add	r0, r4, #4
   11cc0:	mov	r2, #128	; 0x80
   11cc4:	movt	r5, #2
   11cc8:	mov	r1, r5
   11ccc:	bl	113f4 <memcpy@plt>
   11cd0:	mov	r0, r5
   11cd4:	mov	r1, #10
   11cd8:	bl	11454 <sigismember@plt>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d08 <__assert_fail@plt+0x638>
   11ce4:	mov	r0, #0
   11ce8:	add	r1, sp, #64	; 0x40
   11cec:	mov	r2, #0
   11cf0:	str	r0, [sp, #196]	; 0xc4
   11cf4:	movw	r0, #19892	; 0x4db4
   11cf8:	movt	r0, #1
   11cfc:	str	r0, [sp, #64]	; 0x40
   11d00:	mov	r0, #10
   11d04:	bl	11484 <sigaction@plt>
   11d08:	movw	r0, #62280	; 0xf348
   11d0c:	mov	r1, #2
   11d10:	movt	r0, #2
   11d14:	bl	11454 <sigismember@plt>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d44 <__assert_fail@plt+0x674>
   11d20:	mov	r0, #-1073741824	; 0xc0000000
   11d24:	add	r1, sp, #64	; 0x40
   11d28:	mov	r2, #0
   11d2c:	str	r0, [sp, #196]	; 0xc4
   11d30:	movw	r0, #19916	; 0x4dcc
   11d34:	movt	r0, #1
   11d38:	str	r0, [sp, #64]	; 0x40
   11d3c:	mov	r0, #2
   11d40:	bl	11484 <sigaction@plt>
   11d44:	ldr	r0, [r6]
   11d48:	bl	179e0 <__assert_fail@plt+0x6310>
   11d4c:	movw	r1, #51037	; 0xc75d
   11d50:	mov	r0, #6
   11d54:	movt	r1, #1
   11d58:	bl	11634 <setlocale@plt>
   11d5c:	movw	r5, #53285	; 0xd025
   11d60:	movw	r1, #52875	; 0xce8b
   11d64:	movt	r5, #1
   11d68:	movt	r1, #1
   11d6c:	mov	r0, r5
   11d70:	bl	11670 <bindtextdomain@plt>
   11d74:	mov	r0, r5
   11d78:	bl	11460 <textdomain@plt>
   11d7c:	movw	r0, #18372	; 0x47c4
   11d80:	movt	r0, #1
   11d84:	bl	1c184 <__assert_fail@plt+0xaab4>
   11d88:	bl	1158c <getpagesize@plt>
   11d8c:	movw	r1, #61920	; 0xf1e0
   11d90:	movw	r7, #6096	; 0x17d0
   11d94:	movw	r2, #52910	; 0xceae
   11d98:	movw	r3, #52899	; 0xcea3
   11d9c:	mov	r4, #1
   11da0:	mov	r8, #0
   11da4:	movt	r1, #2
   11da8:	movt	r7, #1
   11dac:	movt	r2, #1
   11db0:	movt	r3, #1
   11db4:	str	r0, [r1]
   11db8:	movw	r0, #61800	; 0xf168
   11dbc:	mov	r1, r6
   11dc0:	movw	r6, #52926	; 0xcebe
   11dc4:	movt	r0, #2
   11dc8:	movt	r6, #1
   11dcc:	ldr	r0, [r0]
   11dd0:	stm	sp, {r0, r4, r7}
   11dd4:	add	r0, sp, #16
   11dd8:	str	r3, [sp, #12]
   11ddc:	mov	r3, r5
   11de0:	stm	r0, {r2, r6, r8}
   11de4:	movw	r2, #52872	; 0xce88
   11de8:	str	r1, [sp, #56]	; 0x38
   11dec:	ldr	r6, [sp, #60]	; 0x3c
   11df0:	movt	r2, #1
   11df4:	mov	r0, r6
   11df8:	bl	17918 <__assert_fail@plt+0x6248>
   11dfc:	add	r0, pc, #972	; 0x3cc
   11e00:	add	r1, pc, #984	; 0x3d8
   11e04:	add	r2, pc, #852	; 0x354
   11e08:	add	r3, pc, #864	; 0x360
   11e0c:	movw	r7, #61936	; 0xf1f0
   11e10:	vld1.64	{d18-d19}, [r3 :128]
   11e14:	add	r3, pc, #868	; 0x364
   11e18:	vld1.64	{d16-d17}, [r0 :128]
   11e1c:	movt	r7, #2
   11e20:	vld1.64	{d2-d3}, [r1 :128]
   11e24:	vld1.64	{d0-d1}, [r2 :128]
   11e28:	vld1.64	{d20-d21}, [r3 :128]
   11e2c:	add	r3, pc, #860	; 0x35c
   11e30:	add	r0, r7, #16
   11e34:	vld1.64	{d22-d23}, [r3 :128]
   11e38:	add	r3, pc, #864	; 0x360
   11e3c:	vld1.64	{d24-d25}, [r3 :128]
   11e40:	add	r3, pc, #872	; 0x368
   11e44:	vld1.64	{d26-d27}, [r3 :128]
   11e48:	add	r3, pc, #880	; 0x370
   11e4c:	vld1.64	{d28-d29}, [r3 :128]
   11e50:	add	r3, pc, #968	; 0x3c8
   11e54:	vst1.64	{d16-d17}, [r0 :128]
   11e58:	add	r0, r7, #32
   11e5c:	add	r1, pc, #972	; 0x3cc
   11e60:	vst1.64	{d18-d19}, [r0 :128]
   11e64:	add	r0, r7, #48	; 0x30
   11e68:	vld1.64	{d16-d17}, [r1 :128]
   11e6c:	add	r1, pc, #972	; 0x3cc
   11e70:	vld1.64	{d30-d31}, [r3 :128]
   11e74:	vst1.64	{d20-d21}, [r0 :128]
   11e78:	add	r0, r7, #64	; 0x40
   11e7c:	vld1.64	{d18-d19}, [r1 :128]
   11e80:	add	r1, pc, #968	; 0x3c8
   11e84:	vst1.64	{d22-d23}, [r0 :128]
   11e88:	add	r0, r7, #80	; 0x50
   11e8c:	vld1.64	{d20-d21}, [r1 :128]
   11e90:	add	r1, pc, #968	; 0x3c8
   11e94:	vst1.64	{d24-d25}, [r0 :128]
   11e98:	add	r0, r7, #96	; 0x60
   11e9c:	vld1.64	{d22-d23}, [r1 :128]
   11ea0:	add	r1, pc, #968	; 0x3c8
   11ea4:	vst1.64	{d26-d27}, [r0 :128]
   11ea8:	movw	r0, #61924	; 0xf1e4
   11eac:	vld1.64	{d24-d25}, [r1 :128]
   11eb0:	add	r1, pc, #968	; 0x3c8
   11eb4:	str	r8, [sp, #64]	; 0x40
   11eb8:	movt	r0, #2
   11ebc:	vld1.64	{d26-d27}, [r1 :128]
   11ec0:	mov	r1, r7
   11ec4:	strb	r4, [r0]
   11ec8:	add	r0, r7, #112	; 0x70
   11ecc:	vst1.64	{d28-d29}, [r0 :128]
   11ed0:	add	r0, r7, #128	; 0x80
   11ed4:	vst1.64	{d30-d31}, [r0 :128]
   11ed8:	add	r0, r7, #144	; 0x90
   11edc:	vst1.64	{d0-d1}, [r0 :128]
   11ee0:	add	r0, r7, #160	; 0xa0
   11ee4:	vst1.64	{d2-d3}, [r0 :128]
   11ee8:	add	r0, r7, #176	; 0xb0
   11eec:	vst1.64	{d16-d17}, [r0 :128]
   11ef0:	add	r0, r7, #192	; 0xc0
   11ef4:	vst1.64	{d18-d19}, [r0 :128]
   11ef8:	add	r0, r7, #208	; 0xd0
   11efc:	vst1.64	{d20-d21}, [r0 :128]
   11f00:	add	r0, r7, #224	; 0xe0
   11f04:	vst1.64	{d22-d23}, [r0 :128]
   11f08:	mov	r0, #240	; 0xf0
   11f0c:	vst1.8	{d24-d25}, [r1 :128], r0
   11f10:	mov	r0, #0
   11f14:	str	r0, [sp, #52]	; 0x34
   11f18:	movw	r0, #61896	; 0xf1c8
   11f1c:	vst1.64	{d26-d27}, [r1 :128]
   11f20:	movt	r0, #2
   11f24:	ldr	r5, [r0]
   11f28:	cmp	r5, r6
   11f2c:	bge	125ec <__assert_fail@plt+0xf1c>
   11f30:	mov	r0, #0
   11f34:	movw	r7, #53528	; 0xd118
   11f38:	movw	r9, #53531	; 0xd11b
   11f3c:	movw	r3, #53534	; 0xd11e
   11f40:	str	r0, [sp, #52]	; 0x34
   11f44:	mvn	r0, #-2147483648	; 0x80000000
   11f48:	movt	r7, #1
   11f4c:	movt	r9, #1
   11f50:	movt	r3, #1
   11f54:	str	r0, [sp, #44]	; 0x2c
   11f58:	mvn	r0, #0
   11f5c:	str	r0, [sp, #48]	; 0x30
   11f60:	mov	r0, #0
   11f64:	str	r0, [sp, #36]	; 0x24
   11f68:	mov	r0, #0
   11f6c:	str	r0, [sp, #32]
   11f70:	mov	r0, #0
   11f74:	str	r0, [sp, #28]
   11f78:	b	123b8 <__assert_fail@plt+0xce8>
   11f7c:	movw	r3, #53609	; 0xd169
   11f80:	mov	r0, #0
   11f84:	movt	r3, #1
   11f88:	ldrb	r1, [r3, r0]
   11f8c:	cmp	r1, #0
   11f90:	beq	11fa8 <__assert_fail@plt+0x8d8>
   11f94:	ldrb	r2, [sl, r0]
   11f98:	add	r0, r0, #1
   11f9c:	cmp	r2, r1
   11fa0:	beq	11f88 <__assert_fail@plt+0x8b8>
   11fa4:	b	11fe8 <__assert_fail@plt+0x918>
   11fa8:	ldrb	r0, [sl, r0]
   11fac:	cmp	r0, #61	; 0x3d
   11fb0:	cmpne	r0, #0
   11fb4:	bne	11fe8 <__assert_fail@plt+0x918>
   11fb8:	movw	r1, #55456	; 0xd8a0
   11fbc:	movw	r3, #53616	; 0xd170
   11fc0:	mov	r0, r4
   11fc4:	mov	r2, #1
   11fc8:	movt	r1, #1
   11fcc:	movt	r3, #1
   11fd0:	bl	14ddc <__assert_fail@plt+0x370c>
   11fd4:	movw	r1, #61776	; 0xf150
   11fd8:	mov	r3, r8
   11fdc:	movt	r1, #2
   11fe0:	str	r0, [r1]
   11fe4:	b	125a4 <__assert_fail@plt+0xed4>
   11fe8:	mov	r6, #0
   11fec:	mov	r0, r4
   11ff0:	sub	r1, fp, #36	; 0x24
   11ff4:	str	r4, [sp, #40]	; 0x28
   11ff8:	str	r6, [fp, #-36]	; 0xffffffdc
   11ffc:	bl	14ee8 <__assert_fail@plt+0x3818>
   12000:	movw	r3, #53637	; 0xd185
   12004:	mov	r4, r1
   12008:	movt	r3, #1
   1200c:	ldrb	r1, [r3, r6]
   12010:	cmp	r1, #0
   12014:	beq	1202c <__assert_fail@plt+0x95c>
   12018:	ldrb	r2, [sl, r6]
   1201c:	add	r6, r6, #1
   12020:	cmp	r2, r1
   12024:	beq	1200c <__assert_fail@plt+0x93c>
   12028:	b	12058 <__assert_fail@plt+0x988>
   1202c:	ldrb	r3, [sl, r6]
   12030:	mov	r2, #0
   12034:	mvn	r1, #-2147483647	; 0x80000001
   12038:	mov	lr, #1
   1203c:	cmp	r3, #0
   12040:	cmpne	r3, #61	; 0x3d
   12044:	bne	12058 <__assert_fail@plt+0x988>
   12048:	movw	ip, #62416	; 0xf3d0
   1204c:	mov	r3, #0
   12050:	movt	ip, #2
   12054:	b	12384 <__assert_fail@plt+0xcb4>
   12058:	movw	r6, #53641	; 0xd189
   1205c:	mov	r1, #0
   12060:	movt	r6, #1
   12064:	ldrb	r2, [r6, r1]
   12068:	cmp	r2, #0
   1206c:	beq	12084 <__assert_fail@plt+0x9b4>
   12070:	ldrb	r3, [sl, r1]
   12074:	add	r1, r1, #1
   12078:	cmp	r3, r2
   1207c:	beq	12064 <__assert_fail@plt+0x994>
   12080:	b	120b0 <__assert_fail@plt+0x9e0>
   12084:	ldrb	r3, [sl, r1]
   12088:	mov	r2, #0
   1208c:	mvn	r1, #-2147483647	; 0x80000001
   12090:	mov	lr, #1
   12094:	cmp	r3, #0
   12098:	cmpne	r3, #61	; 0x3d
   1209c:	bne	120b0 <__assert_fail@plt+0x9e0>
   120a0:	movw	ip, #62240	; 0xf320
   120a4:	mov	r3, #0
   120a8:	movt	ip, #2
   120ac:	b	12384 <__assert_fail@plt+0xcb4>
   120b0:	movw	r6, #53646	; 0xd18e
   120b4:	mov	r1, #0
   120b8:	movt	r6, #1
   120bc:	ldrb	r2, [r6, r1]
   120c0:	cmp	r2, #0
   120c4:	beq	120dc <__assert_fail@plt+0xa0c>
   120c8:	ldrb	r3, [sl, r1]
   120cc:	add	r1, r1, #1
   120d0:	cmp	r3, r2
   120d4:	beq	120bc <__assert_fail@plt+0x9ec>
   120d8:	b	12104 <__assert_fail@plt+0xa34>
   120dc:	ldrb	r3, [sl, r1]
   120e0:	mov	r2, #0
   120e4:	mvn	r1, #-2147483647	; 0x80000001
   120e8:	mov	lr, #1
   120ec:	cmp	r3, #0
   120f0:	cmpne	r3, #61	; 0x3d
   120f4:	bne	12104 <__assert_fail@plt+0xa34>
   120f8:	mov	r3, #0
   120fc:	add	ip, sp, #64	; 0x40
   12100:	b	12384 <__assert_fail@plt+0xcb4>
   12104:	movw	r6, #53645	; 0xd18d
   12108:	mov	r1, #0
   1210c:	movt	r6, #1
   12110:	ldrb	r2, [r6, r1]
   12114:	cmp	r2, #0
   12118:	beq	12130 <__assert_fail@plt+0xa60>
   1211c:	ldrb	r3, [sl, r1]
   12120:	add	r1, r1, #1
   12124:	cmp	r3, r2
   12128:	beq	12110 <__assert_fail@plt+0xa40>
   1212c:	b	121f0 <__assert_fail@plt+0xb20>
   12130:	ldrb	r3, [sl, r1]
   12134:	mov	r2, #0
   12138:	mvn	r1, #-2147483648	; 0x80000000
   1213c:	mov	lr, #1
   12140:	cmp	r3, #0
   12144:	cmpne	r3, #61	; 0x3d
   12148:	bne	121f0 <__assert_fail@plt+0xb20>
   1214c:	movw	ip, #62420	; 0xf3d4
   12150:	mov	r3, #0
   12154:	movt	ip, #2
   12158:	b	12384 <__assert_fail@plt+0xcb4>
   1215c:	nop	{0}
   12160:	orrsls	r9, r2, #144, 2	; 0x24
   12164:			; <UNDEFINED> instruction: 0x97969594
   12168:	blls	fe6b87d0 <opterr@@GLIBC_2.4+0xfe6895f8>
   1216c:	svcls	0x009e9d9c
   12170:			; <UNDEFINED> instruction: 0x23222120
   12174:	strcs	r2, [r6, -r4, lsr #10]!
   12178:	blcs	a9c620 <opterr@@GLIBC_2.4+0xa6d448>
   1217c:	svccs	0x002e2d2c
   12180:	teqcc	r2, #48, 2
   12184:			; <UNDEFINED> instruction: 0x37363534
   12188:	blcc	ea0670 <opterr@@GLIBC_2.4+0xe71498>
   1218c:	svccc	0x003e3d3c
   12190:	movtmi	r4, #8512	; 0x2140
   12194:	strbmi	r4, [r6, -r4, asr #10]
   12198:	blmi	12a46c0 <opterr@@GLIBC_2.4+0x12754e8>
   1219c:	svcmi	0x004e4d4c
   121a0:	cmppl	r2, #80, 2
   121a4:			; <UNDEFINED> instruction: 0x57565554
   121a8:	blpl	16a8710 <opterr@@GLIBC_2.4+0x1679538>
   121ac:	svcpl	0x005e5d5c
   121b0:	cmnvs	r2, #96, 2
   121b4:	strbvs	r6, [r6, -r4, ror #10]!
   121b8:	blvs	1aac760 <opterr@@GLIBC_2.4+0x1a7d588>
   121bc:	svcvs	0x006e6d6c
   121c0:	cmnvc	r2, #112, 2
   121c4:			; <UNDEFINED> instruction: 0x77767574
   121c8:	blvc	1eb07b0 <opterr@@GLIBC_2.4+0x1e815d8>
   121cc:	svcvc	0x007e7d7c
   121d0:	tstne	r2, #16, 2
   121d4:			; <UNDEFINED> instruction: 0x17161514
   121d8:	blne	698640 <opterr@@GLIBC_2.4+0x669468>
   121dc:	svcne	0x001e1d1c
   121e0:			; <UNDEFINED> instruction: 0xa3a2a1a0
   121e4:	strge	sl, [r6, r4, lsr #11]!
   121e8:	blge	feabc890 <opterr@@GLIBC_2.4+0xfea8d6b8>
   121ec:	svcge	0x00aeadac
   121f0:	movw	r6, #54483	; 0xd4d3
   121f4:	mov	r1, #0
   121f8:	movt	r6, #1
   121fc:	ldrb	r2, [r6, r1]
   12200:	cmp	r2, #0
   12204:	beq	12290 <__assert_fail@plt+0xbc0>
   12208:	ldrb	r3, [sl, r1]
   1220c:	add	r1, r1, #1
   12210:	cmp	r3, r2
   12214:	beq	121fc <__assert_fail@plt+0xb2c>
   12218:	b	122b8 <__assert_fail@plt+0xbe8>
   1221c:	nop	{0}
   12220:	orrhi	r8, r2, #128, 2
   12224:	strhi	r8, [r6, r4, lsl #11]
   12228:	blhi	fe2b4850 <opterr@@GLIBC_2.4+0xfe285678>
   1222c:	svchi	0x008e8d8c
   12230:			; <UNDEFINED> instruction: 0xb3b2b1b0
   12234:			; <UNDEFINED> instruction: 0xb7b6b5b4
   12238:	bllt	feec0920 <opterr@@GLIBC_2.4+0xfee91748>
   1223c:	svclt	0x00bebdbc
   12240:	bicgt	ip, r2, #192, 2	; 0x30
   12244:	strbgt	ip, [r6, r4, asr #11]
   12248:	blgt	ff2c4970 <opterr@@GLIBC_2.4+0xff295798>
   1224c:	svcgt	0x00cecdcc
   12250:	bicsle	sp, r2, #208, 2	; 0x34
   12254:			; <UNDEFINED> instruction: 0xd7d6d5d4
   12258:	blle	ff6c89c0 <opterr@@GLIBC_2.4+0xff6997e8>
   1225c:	svcle	0x00dedddc
   12260:	mvn	lr, #224, 2	; 0x38
   12264:	strb	lr, [r6, r4, ror #11]!
   12268:	bl	ffacca10 <opterr@@GLIBC_2.4+0xffa9d838>
   1226c:	svc	0x00eeedec
   12270:	movweq	r0, #8448	; 0x2100
   12274:	streq	r0, [r6, -r4, lsl #10]
   12278:	bleq	2946a0 <opterr@@GLIBC_2.4+0x2654c8>
   1227c:	svceq	0x000e0d0c
   12280:	vsra.u64	<illegal reg q15.5>, q8, #14
   12284:			; <UNDEFINED> instruction: 0xf7f6f5f4
   12288:	blx	ffed0a72 <opterr@@GLIBC_2.4+0xffea189a>
   1228c:			; <UNDEFINED> instruction: 0xfffefdfc
   12290:	ldrb	r2, [sl, r1]
   12294:	mvn	r3, #-2147483648	; 0x80000000
   12298:	mvn	r1, #0
   1229c:	mov	lr, #0
   122a0:	cmp	r2, #0
   122a4:	cmpne	r2, #61	; 0x3d
   122a8:	bne	122b8 <__assert_fail@plt+0xbe8>
   122ac:	str	r0, [sp, #52]	; 0x34
   122b0:	str	r4, [sp, #36]	; 0x24
   122b4:	b	12308 <__assert_fail@plt+0xc38>
   122b8:	movw	r6, #54499	; 0xd4e3
   122bc:	mov	r1, #0
   122c0:	movt	r6, #1
   122c4:	ldrb	r2, [r6, r1]
   122c8:	cmp	r2, #0
   122cc:	beq	122e4 <__assert_fail@plt+0xc14>
   122d0:	ldrb	r3, [sl, r1]
   122d4:	add	r1, r1, #1
   122d8:	cmp	r3, r2
   122dc:	beq	122c4 <__assert_fail@plt+0xbf4>
   122e0:	b	12314 <__assert_fail@plt+0xc44>
   122e4:	ldrb	r2, [sl, r1]
   122e8:	mvn	r3, #-2147483648	; 0x80000000
   122ec:	mvn	r1, #0
   122f0:	mov	lr, #0
   122f4:	cmp	r2, #0
   122f8:	cmpne	r2, #61	; 0x3d
   122fc:	bne	12314 <__assert_fail@plt+0xc44>
   12300:	str	r0, [sp, #32]
   12304:	str	r4, [sp, #28]
   12308:	mov	r2, #0
   1230c:	mov	ip, #0
   12310:	b	12384 <__assert_fail@plt+0xcb4>
   12314:	movw	r6, #53649	; 0xd191
   12318:	mov	r1, #0
   1231c:	movt	r6, #1
   12320:	ldrb	r2, [r6, r1]
   12324:	cmp	r2, #0
   12328:	beq	12340 <__assert_fail@plt+0xc70>
   1232c:	ldrb	r3, [sl, r1]
   12330:	add	r1, r1, #1
   12334:	cmp	r3, r2
   12338:	beq	12320 <__assert_fail@plt+0xc50>
   1233c:	b	145a8 <__assert_fail@plt+0x2ed8>
   12340:	ldrb	r2, [sl, r1]
   12344:	mvn	r3, #-2147483648	; 0x80000000
   12348:	mvn	r1, #0
   1234c:	mov	lr, #0
   12350:	cmp	r2, #0
   12354:	beq	12374 <__assert_fail@plt+0xca4>
   12358:	cmp	r2, #61	; 0x3d
   1235c:	mov	r2, #0
   12360:	mov	ip, #0
   12364:	str	r0, [sp, #48]	; 0x30
   12368:	str	r4, [sp, #44]	; 0x2c
   1236c:	beq	12384 <__assert_fail@plt+0xcb4>
   12370:	b	145a8 <__assert_fail@plt+0x2ed8>
   12374:	mov	r2, #0
   12378:	mov	ip, #0
   1237c:	str	r0, [sp, #48]	; 0x30
   12380:	str	r4, [sp, #44]	; 0x2c
   12384:	subs	r6, r0, lr
   12388:	sbcs	r2, r4, r2
   1238c:	blt	14648 <__assert_fail@plt+0x2f78>
   12390:	subs	r1, r1, r0
   12394:	sbcs	r1, r3, r4
   12398:	blt	14658 <__assert_fail@plt+0x2f88>
   1239c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   123a0:	cmp	r1, #0
   123a4:	bne	14630 <__assert_fail@plt+0x2f60>
   123a8:	cmp	ip, #0
   123ac:	mov	r3, r8
   123b0:	strne	r0, [ip]
   123b4:	b	125a4 <__assert_fail@plt+0xed4>
   123b8:	ldr	r0, [sp, #56]	; 0x38
   123bc:	mov	r1, #61	; 0x3d
   123c0:	mov	r8, r3
   123c4:	ldr	sl, [r0, r5, lsl #2]
   123c8:	mov	r0, sl
   123cc:	bl	11580 <strchr@plt>
   123d0:	cmp	r0, #0
   123d4:	beq	145a8 <__assert_fail@plt+0x2ed8>
   123d8:	movw	r6, #53558	; 0xd136
   123dc:	add	r4, r0, #1
   123e0:	mov	r0, #0
   123e4:	mov	r3, r8
   123e8:	movt	r6, #1
   123ec:	ldrb	r1, [r7, r0]
   123f0:	cmp	r1, #0
   123f4:	beq	1240c <__assert_fail@plt+0xd3c>
   123f8:	ldrb	r2, [sl, r0]
   123fc:	add	r0, r0, #1
   12400:	cmp	r2, r1
   12404:	beq	123ec <__assert_fail@plt+0xd1c>
   12408:	b	1242c <__assert_fail@plt+0xd5c>
   1240c:	ldrb	r0, [sl, r0]
   12410:	cmp	r0, #0
   12414:	cmpne	r0, #61	; 0x3d
   12418:	bne	1242c <__assert_fail@plt+0xd5c>
   1241c:	movw	r0, #62192	; 0xf2f0
   12420:	movt	r0, #2
   12424:	str	r4, [r0]
   12428:	b	125a4 <__assert_fail@plt+0xed4>
   1242c:	mov	r0, #0
   12430:	ldrb	r1, [r9, r0]
   12434:	cmp	r1, #0
   12438:	beq	12450 <__assert_fail@plt+0xd80>
   1243c:	ldrb	r2, [sl, r0]
   12440:	add	r0, r0, #1
   12444:	cmp	r2, r1
   12448:	beq	12430 <__assert_fail@plt+0xd60>
   1244c:	b	12470 <__assert_fail@plt+0xda0>
   12450:	ldrb	r0, [sl, r0]
   12454:	cmp	r0, #0
   12458:	cmpne	r0, #61	; 0x3d
   1245c:	bne	12470 <__assert_fail@plt+0xda0>
   12460:	movw	r0, #62220	; 0xf30c
   12464:	movt	r0, #2
   12468:	str	r4, [r0]
   1246c:	b	125a4 <__assert_fail@plt+0xed4>
   12470:	mov	r0, #0
   12474:	ldrb	r1, [r3, r0]
   12478:	cmp	r1, #0
   1247c:	beq	12494 <__assert_fail@plt+0xdc4>
   12480:	ldrb	r2, [sl, r0]
   12484:	add	r0, r0, #1
   12488:	cmp	r2, r1
   1248c:	beq	12474 <__assert_fail@plt+0xda4>
   12490:	b	124d0 <__assert_fail@plt+0xe00>
   12494:	ldrb	r0, [sl, r0]
   12498:	cmp	r0, #0
   1249c:	cmpne	r0, #61	; 0x3d
   124a0:	bne	124d0 <__assert_fail@plt+0xe00>
   124a4:	movw	r1, #54880	; 0xd660
   124a8:	movw	r3, #53539	; 0xd123
   124ac:	mov	r0, r4
   124b0:	mov	r2, #0
   124b4:	movt	r1, #1
   124b8:	movt	r3, #1
   124bc:	bl	14ddc <__assert_fail@plt+0x370c>
   124c0:	movw	r1, #62228	; 0xf314
   124c4:	mov	r3, r8
   124c8:	movt	r1, #2
   124cc:	b	12594 <__assert_fail@plt+0xec4>
   124d0:	mov	r0, #0
   124d4:	ldrb	r1, [r6, r0]
   124d8:	cmp	r1, #0
   124dc:	beq	124f4 <__assert_fail@plt+0xe24>
   124e0:	ldrb	r2, [sl, r0]
   124e4:	add	r0, r0, #1
   124e8:	cmp	r2, r1
   124ec:	beq	124d4 <__assert_fail@plt+0xe04>
   124f0:	b	12530 <__assert_fail@plt+0xe60>
   124f4:	ldrb	r0, [sl, r0]
   124f8:	cmp	r0, #0
   124fc:	cmpne	r0, #61	; 0x3d
   12500:	bne	12530 <__assert_fail@plt+0xe60>
   12504:	movw	r1, #55152	; 0xd770
   12508:	movw	r3, #53564	; 0xd13c
   1250c:	mov	r0, r4
   12510:	mov	r2, #0
   12514:	movt	r1, #1
   12518:	movt	r3, #1
   1251c:	bl	14ddc <__assert_fail@plt+0x370c>
   12520:	movw	r1, #62196	; 0xf2f4
   12524:	mov	r3, r8
   12528:	movt	r1, #2
   1252c:	b	12594 <__assert_fail@plt+0xec4>
   12530:	movw	r3, #53583	; 0xd14f
   12534:	mov	r0, #0
   12538:	movt	r3, #1
   1253c:	ldrb	r1, [r3, r0]
   12540:	cmp	r1, #0
   12544:	beq	1255c <__assert_fail@plt+0xe8c>
   12548:	ldrb	r2, [sl, r0]
   1254c:	add	r0, r0, #1
   12550:	cmp	r2, r1
   12554:	beq	1253c <__assert_fail@plt+0xe6c>
   12558:	b	11f7c <__assert_fail@plt+0x8ac>
   1255c:	ldrb	r0, [sl, r0]
   12560:	cmp	r0, #0
   12564:	cmpne	r0, #61	; 0x3d
   12568:	bne	11f7c <__assert_fail@plt+0x8ac>
   1256c:	movw	r1, #55152	; 0xd770
   12570:	movw	r3, #53589	; 0xd155
   12574:	mov	r0, r4
   12578:	mov	r2, #0
   1257c:	movt	r1, #1
   12580:	movt	r3, #1
   12584:	bl	14ddc <__assert_fail@plt+0x370c>
   12588:	movw	r1, #62224	; 0xf310
   1258c:	mov	r3, r8
   12590:	movt	r1, #2
   12594:	mov	r2, r1
   12598:	ldr	r1, [r1]
   1259c:	orr	r0, r1, r0
   125a0:	str	r0, [r2]
   125a4:	ldr	r0, [sp, #60]	; 0x3c
   125a8:	add	r5, r5, #1
   125ac:	cmp	r5, r0
   125b0:	blt	123b8 <__assert_fail@plt+0xce8>
   125b4:	ldr	r4, [sp, #64]	; 0x40
   125b8:	cmp	r4, #0
   125bc:	beq	1260c <__assert_fail@plt+0xf3c>
   125c0:	movw	r0, #62416	; 0xf3d0
   125c4:	ldr	r9, [sp, #32]
   125c8:	ldr	r8, [sp, #28]
   125cc:	ldr	r2, [sp, #36]	; 0x24
   125d0:	mov	r5, r4
   125d4:	movt	r0, #2
   125d8:	str	r4, [r0]
   125dc:	movw	r0, #62240	; 0xf320
   125e0:	movt	r0, #2
   125e4:	str	r4, [r0]
   125e8:	b	1265c <__assert_fail@plt+0xf8c>
   125ec:	mvn	r0, #-2147483648	; 0x80000000
   125f0:	mov	r2, #0
   125f4:	mov	r9, #0
   125f8:	mov	r8, #0
   125fc:	str	r0, [sp, #44]	; 0x2c
   12600:	mvn	r0, #0
   12604:	str	r0, [sp, #48]	; 0x30
   12608:	b	12618 <__assert_fail@plt+0xf48>
   1260c:	ldr	r9, [sp, #32]
   12610:	ldr	r8, [sp, #28]
   12614:	ldr	r2, [sp, #36]	; 0x24
   12618:	movw	r0, #62228	; 0xf314
   1261c:	movt	r0, #2
   12620:	ldr	r1, [r0]
   12624:	orr	r1, r1, #2048	; 0x800
   12628:	str	r1, [r0]
   1262c:	movw	r0, #62416	; 0xf3d0
   12630:	movt	r0, #2
   12634:	ldr	r5, [r0]
   12638:	cmp	r5, #0
   1263c:	moveq	r5, #512	; 0x200
   12640:	streq	r5, [r0]
   12644:	movw	r0, #62240	; 0xf320
   12648:	movt	r0, #2
   1264c:	ldr	r4, [r0]
   12650:	cmp	r4, #0
   12654:	moveq	r4, #512	; 0x200
   12658:	streq	r4, [r0]
   1265c:	movw	r0, #62420	; 0xf3d4
   12660:	movt	r0, #2
   12664:	ldr	r0, [r0]
   12668:	cmp	r0, #0
   1266c:	bne	12684 <__assert_fail@plt+0xfb4>
   12670:	movw	r0, #62228	; 0xf314
   12674:	movt	r0, #2
   12678:	ldr	r1, [r0]
   1267c:	bic	r1, r1, #24
   12680:	str	r1, [r0]
   12684:	movw	r1, #62196	; 0xf2f4
   12688:	movw	r0, #4096	; 0x1000
   1268c:	movt	r1, #2
   12690:	movt	r0, #16
   12694:	ldr	r6, [r1]
   12698:	tst	r6, r0
   1269c:	orrne	r6, r6, r0
   126a0:	movw	r0, #62224	; 0xf310
   126a4:	movt	r0, #2
   126a8:	strne	r6, [r1]
   126ac:	ldr	sl, [r0]
   126b0:	tst	sl, #1
   126b4:	bne	146a0 <__assert_fail@plt+0x2fd0>
   126b8:	tst	r6, #16
   126bc:	bne	146c4 <__assert_fail@plt+0x2ff4>
   126c0:	tst	sl, #12
   126c4:	bne	146e8 <__assert_fail@plt+0x3018>
   126c8:	ldr	r0, [sp, #52]	; 0x34
   126cc:	orrs	r0, r0, r2
   126d0:	andsne	r1, r6, #8
   126d4:	bne	126f0 <__assert_fail@plt+0x1020>
   126d8:	cmp	r0, #0
   126dc:	ldrne	r1, [sp, #52]	; 0x34
   126e0:	movwne	r0, #62424	; 0xf3d8
   126e4:	movtne	r0, #2
   126e8:	stmne	r0, {r1, r2}
   126ec:	b	12724 <__assert_fail@plt+0x1054>
   126f0:	ldr	r7, [sp, #52]	; 0x34
   126f4:	mov	r1, r2
   126f8:	asr	r3, r5, #31
   126fc:	mov	r2, r5
   12700:	mov	r0, r7
   12704:	bl	1be94 <__assert_fail@plt+0xa7c4>
   12708:	movw	r2, #62424	; 0xf3d8
   1270c:	movt	r2, #2
   12710:	strd	r0, [r2]
   12714:	movw	r1, #62432	; 0xf3e0
   12718:	mls	r0, r0, r5, r7
   1271c:	movt	r1, #2
   12720:	str	r0, [r1]
   12724:	ldr	r1, [sp, #44]	; 0x2c
   12728:	mvn	r0, #-2147483648	; 0x80000000
   1272c:	eor	r0, r1, r0
   12730:	ldr	r1, [sp, #48]	; 0x30
   12734:	mvn	r1, r1
   12738:	orrs	r0, r1, r0
   1273c:	andsne	r1, r6, #4
   12740:	bne	12764 <__assert_fail@plt+0x1094>
   12744:	cmp	r0, #0
   12748:	beq	12798 <__assert_fail@plt+0x10c8>
   1274c:	ldr	r1, [sp, #48]	; 0x30
   12750:	ldr	r2, [sp, #44]	; 0x2c
   12754:	movw	r0, #61768	; 0xf148
   12758:	movt	r0, #2
   1275c:	stm	r0, {r1, r2}
   12760:	b	12798 <__assert_fail@plt+0x10c8>
   12764:	ldr	r7, [sp, #48]	; 0x30
   12768:	ldr	r1, [sp, #44]	; 0x2c
   1276c:	asr	r3, r5, #31
   12770:	mov	r2, r5
   12774:	mov	r0, r7
   12778:	bl	1be94 <__assert_fail@plt+0xa7c4>
   1277c:	movw	r2, #61768	; 0xf148
   12780:	movt	r2, #2
   12784:	strd	r0, [r2]
   12788:	movw	r1, #62272	; 0xf340
   1278c:	mls	r0, r0, r5, r7
   12790:	movt	r1, #2
   12794:	str	r0, [r1]
   12798:	orrs	r0, r9, r8
   1279c:	andsne	r1, sl, #16
   127a0:	bne	127bc <__assert_fail@plt+0x10ec>
   127a4:	cmp	r0, #0
   127a8:	movwne	r0, #62232	; 0xf318
   127ac:	movtne	r0, #2
   127b0:	strne	r9, [r0]
   127b4:	strne	r8, [r0, #4]
   127b8:	b	12800 <__assert_fail@plt+0x1130>
   127bc:	asr	r5, r4, #31
   127c0:	mov	r0, r9
   127c4:	mov	r1, r8
   127c8:	mov	r2, r4
   127cc:	mov	r3, r5
   127d0:	bl	1be94 <__assert_fail@plt+0xa7c4>
   127d4:	movw	r2, #62232	; 0xf318
   127d8:	movw	ip, #62248	; 0xf328
   127dc:	movt	r2, #2
   127e0:	movt	ip, #2
   127e4:	strd	r0, [r2]
   127e8:	umull	r2, r3, r0, r4
   127ec:	mla	r0, r0, r5, r3
   127f0:	subs	r2, r9, r2
   127f4:	mla	r0, r1, r4, r0
   127f8:	sbc	r3, r8, r0
   127fc:	strd	r2, [ip]
   12800:	movw	r1, #62228	; 0xf314
   12804:	and	r0, r6, #1
   12808:	movw	r8, #62224	; 0xf310
   1280c:	movw	r7, #62196	; 0xf2f4
   12810:	movt	r1, #2
   12814:	movt	r8, #2
   12818:	movt	r7, #2
   1281c:	ldr	r5, [r1]
   12820:	and	r1, r5, #2048	; 0x800
   12824:	orrs	r1, r1, r0
   12828:	mov	r1, #0
   1282c:	bne	1287c <__assert_fail@plt+0x11ac>
   12830:	movw	r1, #62424	; 0xf3d8
   12834:	movt	r1, #2
   12838:	ldrd	r2, [r1]
   1283c:	orrs	r1, r2, r3
   12840:	mov	r1, #1
   12844:	bne	1287c <__assert_fail@plt+0x11ac>
   12848:	movw	r2, #61768	; 0xf148
   1284c:	movt	r2, #2
   12850:	ldrd	r2, [r2]
   12854:	subs	r4, r2, #1
   12858:	sbcs	r4, r3, #0
   1285c:	blt	12874 <__assert_fail@plt+0x11a4>
   12860:	mvn	r4, #-2147483648	; 0x80000000
   12864:	mvn	r2, r2
   12868:	eor	r3, r3, r4
   1286c:	orrs	r2, r2, r3
   12870:	bne	1287c <__assert_fail@plt+0x11ac>
   12874:	orr	r1, sl, r6
   12878:	ubfx	r1, r1, #16, #1
   1287c:	movw	r2, #62436	; 0xf3e4
   12880:	cmp	r0, #0
   12884:	movw	r0, #62440	; 0xf3e8
   12888:	bic	r4, r6, #1
   1288c:	movt	r2, #2
   12890:	movt	r0, #2
   12894:	str	r4, [r7]
   12898:	strb	r1, [r2]
   1289c:	movw	r1, #20824	; 0x5158
   128a0:	movw	r2, #20724	; 0x50f4
   128a4:	movt	r1, #1
   128a8:	movt	r2, #1
   128ac:	moveq	r2, r1
   128b0:	str	r2, [r0]
   128b4:	sub	r0, r5, #1
   128b8:	and	r0, r5, r0
   128bc:	tst	r0, #7
   128c0:	bne	14744 <__assert_fail@plt+0x3074>
   128c4:	and	r0, r5, #24
   128c8:	sub	r1, r0, #1
   128cc:	tst	r1, r0
   128d0:	bne	14750 <__assert_fail@plt+0x3080>
   128d4:	and	r0, r5, #96	; 0x60
   128d8:	sub	r1, r0, #1
   128dc:	tst	r1, r0
   128e0:	bne	1475c <__assert_fail@plt+0x308c>
   128e4:	and	r0, r5, #12288	; 0x3000
   128e8:	sub	r1, r0, #1
   128ec:	tst	r1, r0
   128f0:	bne	14768 <__assert_fail@plt+0x3098>
   128f4:	movw	r0, #2
   128f8:	movt	r0, #1
   128fc:	and	r1, r6, r0
   12900:	sub	r2, r1, #1
   12904:	tst	r2, r1
   12908:	movweq	r1, #65535	; 0xffff
   1290c:	andeq	r0, sl, r0
   12910:	movteq	r1, #1
   12914:	addeq	r1, r0, r1
   12918:	tsteq	r1, r0
   1291c:	bne	1463c <__assert_fail@plt+0x2f6c>
   12920:	tst	r6, #2
   12924:	beq	12974 <__assert_fail@plt+0x12a4>
   12928:	movw	r0, #62276	; 0xf344
   1292c:	mov	r1, #1
   12930:	bic	r4, r6, #3
   12934:	movt	r0, #2
   12938:	str	r4, [r7]
   1293c:	strb	r1, [r0]
   12940:	movw	r1, #61768	; 0xf148
   12944:	movw	r0, #62272	; 0xf340
   12948:	movt	r1, #2
   1294c:	movt	r0, #2
   12950:	ldrd	r2, [r1]
   12954:	ldr	r0, [r0]
   12958:	orr	r1, r2, r3
   1295c:	orr	r0, r1, r0
   12960:	movw	r1, #62278	; 0xf346
   12964:	clz	r0, r0
   12968:	movt	r1, #2
   1296c:	lsr	r0, r0, #5
   12970:	strb	r0, [r1]
   12974:	tst	sl, #2
   12978:	beq	129c8 <__assert_fail@plt+0x12f8>
   1297c:	movw	r0, #62277	; 0xf345
   12980:	mov	r1, #1
   12984:	movt	r0, #2
   12988:	strb	r1, [r0]
   1298c:	movw	r1, #61768	; 0xf148
   12990:	bic	r0, sl, #2
   12994:	str	r0, [r8]
   12998:	movw	r0, #62272	; 0xf340
   1299c:	movt	r1, #2
   129a0:	ldrd	r2, [r1]
   129a4:	movt	r0, #2
   129a8:	ldr	r0, [r0]
   129ac:	orr	r1, r2, r3
   129b0:	orr	r0, r1, r0
   129b4:	movw	r1, #62279	; 0xf347
   129b8:	clz	r0, r0
   129bc:	movt	r1, #2
   129c0:	lsr	r0, r0, #5
   129c4:	strb	r0, [r1]
   129c8:	movw	r6, #61936	; 0xf1f0
   129cc:	tst	r5, #1
   129d0:	movt	r6, #2
   129d4:	beq	12a0c <__assert_fail@plt+0x133c>
   129d8:	movw	r1, #55520	; 0xd8e0
   129dc:	mov	r0, #0
   129e0:	movt	r1, #1
   129e4:	ldrb	r2, [r6, r0]
   129e8:	ldrb	r2, [r1, r2]
   129ec:	strb	r2, [r6, r0]
   129f0:	add	r0, r0, #1
   129f4:	cmp	r0, #256	; 0x100
   129f8:	bne	129e4 <__assert_fail@plt+0x1314>
   129fc:	movw	r0, #62504	; 0xf428
   12a00:	mov	r1, #1
   12a04:	movt	r0, #2
   12a08:	strb	r1, [r0]
   12a0c:	tst	r5, #64	; 0x40
   12a10:	bne	12a44 <__assert_fail@plt+0x1374>
   12a14:	tst	r5, #32
   12a18:	beq	12a78 <__assert_fail@plt+0x13a8>
   12a1c:	bl	1152c <__ctype_tolower_loc@plt>
   12a20:	ldr	r0, [r0]
   12a24:	mov	r1, #0
   12a28:	ldrb	r2, [r6, r1]
   12a2c:	ldr	r2, [r0, r2, lsl #2]
   12a30:	strb	r2, [r6, r1]
   12a34:	add	r1, r1, #1
   12a38:	cmp	r1, #256	; 0x100
   12a3c:	bne	12a28 <__assert_fail@plt+0x1358>
   12a40:	b	12a68 <__assert_fail@plt+0x1398>
   12a44:	bl	11538 <__ctype_toupper_loc@plt>
   12a48:	ldr	r0, [r0]
   12a4c:	mov	r1, #0
   12a50:	ldrb	r2, [r6, r1]
   12a54:	ldr	r2, [r0, r2, lsl #2]
   12a58:	strb	r2, [r6, r1]
   12a5c:	add	r1, r1, #1
   12a60:	cmp	r1, #256	; 0x100
   12a64:	bne	12a50 <__assert_fail@plt+0x1380>
   12a68:	movw	r0, #62504	; 0xf428
   12a6c:	mov	r1, #1
   12a70:	movt	r0, #2
   12a74:	strb	r1, [r0]
   12a78:	tst	r5, #2
   12a7c:	bne	12ab0 <__assert_fail@plt+0x13e0>
   12a80:	tst	r5, #4
   12a84:	beq	12afc <__assert_fail@plt+0x142c>
   12a88:	movw	r1, #56032	; 0xdae0
   12a8c:	mov	r0, #0
   12a90:	movt	r1, #1
   12a94:	ldrb	r2, [r6, r0]
   12a98:	ldrb	r2, [r1, r2]
   12a9c:	strb	r2, [r6, r0]
   12aa0:	add	r0, r0, #1
   12aa4:	cmp	r0, #256	; 0x100
   12aa8:	bne	12a94 <__assert_fail@plt+0x13c4>
   12aac:	b	12ad4 <__assert_fail@plt+0x1404>
   12ab0:	movw	r1, #55776	; 0xd9e0
   12ab4:	mov	r0, #0
   12ab8:	movt	r1, #1
   12abc:	ldrb	r2, [r6, r0]
   12ac0:	ldrb	r2, [r1, r2]
   12ac4:	strb	r2, [r6, r0]
   12ac8:	add	r0, r0, #1
   12acc:	cmp	r0, #256	; 0x100
   12ad0:	bne	12abc <__assert_fail@plt+0x13ec>
   12ad4:	movw	r0, #62505	; 0xf429
   12ad8:	mov	r1, #1
   12adc:	movt	r0, #2
   12ae0:	strb	r1, [r0]
   12ae4:	movw	r0, #62504	; 0xf428
   12ae8:	movt	r0, #2
   12aec:	strb	r1, [r0]
   12af0:	movw	r0, #62506	; 0xf42a
   12af4:	movt	r0, #2
   12af8:	strb	r1, [r0]
   12afc:	movw	r9, #62192	; 0xf2f0
   12b00:	movt	r9, #2
   12b04:	ldr	r5, [r9]
   12b08:	cmp	r5, #0
   12b0c:	beq	12b78 <__assert_fail@plt+0x14a8>
   12b10:	bl	152ac <__assert_fail@plt+0x3bdc>
   12b14:	mov	r0, #0
   12b18:	mov	r1, r5
   12b1c:	mov	r2, r4
   12b20:	mov	r3, #0
   12b24:	bl	16b60 <__assert_fail@plt+0x5490>
   12b28:	cmn	r0, #1
   12b2c:	bgt	12ba0 <__assert_fail@plt+0x14d0>
   12b30:	bl	11598 <__errno_location@plt>
   12b34:	ldr	r6, [r0]
   12b38:	cmp	r6, #4
   12b3c:	beq	12b10 <__assert_fail@plt+0x1440>
   12b40:	movw	r1, #52953	; 0xced9
   12b44:	mov	r0, #0
   12b48:	mov	r2, #5
   12b4c:	movt	r1, #1
   12b50:	bl	11430 <dcgettext@plt>
   12b54:	ldr	r1, [r9]
   12b58:	mov	r4, r0
   12b5c:	mov	r0, #4
   12b60:	bl	190ec <__assert_fail@plt+0x7a1c>
   12b64:	mov	r3, r0
   12b68:	mov	r0, #1
   12b6c:	mov	r1, r6
   12b70:	mov	r2, r4
   12b74:	bl	14914 <__assert_fail@plt+0x3244>
   12b78:	movw	r1, #52938	; 0xceca
   12b7c:	mov	r0, #0
   12b80:	mov	r2, #5
   12b84:	movt	r1, #1
   12b88:	bl	11430 <dcgettext@plt>
   12b8c:	ldr	r1, [r7]
   12b90:	mov	r2, r0
   12b94:	str	r0, [r9]
   12b98:	mov	r0, #0
   12b9c:	bl	14808 <__assert_fail@plt+0x3138>
   12ba0:	mov	r4, #1
   12ba4:	mov	r0, #0
   12ba8:	mov	r2, #0
   12bac:	mov	r3, #0
   12bb0:	mov	r6, #0
   12bb4:	str	r4, [sp]
   12bb8:	bl	1149c <lseek64@plt>
   12bbc:	movw	r2, #62200	; 0xf2f8
   12bc0:	mov	r7, r1
   12bc4:	eor	r1, r4, r1, lsr #31
   12bc8:	movt	r2, #2
   12bcc:	strb	r1, [r2]
   12bd0:	rsbs	r1, r0, #0
   12bd4:	rscs	r1, r7, #0
   12bd8:	movwlt	r6, #1
   12bdc:	movw	r1, #62208	; 0xf300
   12be0:	cmp	r6, #0
   12be4:	movt	r1, #2
   12be8:	moveq	r7, r6
   12bec:	movne	r6, r0
   12bf0:	strd	r6, [r1]
   12bf4:	bl	11598 <__errno_location@plt>
   12bf8:	movw	r6, #62220	; 0xf30c
   12bfc:	str	r0, [sp, #60]	; 0x3c
   12c00:	ldr	r0, [r0]
   12c04:	movw	r1, #62216	; 0xf308
   12c08:	mvn	ip, #0
   12c0c:	movt	r6, #2
   12c10:	movt	r1, #2
   12c14:	ldr	r5, [r6]
   12c18:	str	r0, [r1]
   12c1c:	cmp	r5, #0
   12c20:	beq	12ca0 <__assert_fail@plt+0x15d0>
   12c24:	movw	r0, #62228	; 0xf314
   12c28:	ldr	r3, [r8]
   12c2c:	mov	r2, #128	; 0x80
   12c30:	mov	r1, #64	; 0x40
   12c34:	movt	r0, #2
   12c38:	ldr	r0, [r0]
   12c3c:	and	r2, r2, r0, lsr #6
   12c40:	bic	r1, r1, r0, lsr #6
   12c44:	orr	r2, r2, r3
   12c48:	orr	r1, r2, r1
   12c4c:	movw	r2, #62232	; 0xf318
   12c50:	movt	r2, #2
   12c54:	mov	sl, r1
   12c58:	ldrd	r8, [r2]
   12c5c:	orrs	r4, r8, r9
   12c60:	orreq	sl, sl, #512	; 0x200
   12c64:	ands	lr, r0, #512	; 0x200
   12c68:	movw	r0, #62240	; 0xf320
   12c6c:	movt	r0, #2
   12c70:	movne	sl, r1
   12c74:	ldr	r7, [r0]
   12c78:	cmn	r7, #1
   12c7c:	ble	12ccc <__assert_fail@plt+0x15fc>
   12c80:	cmp	r7, #0
   12c84:	beq	12da4 <__assert_fail@plt+0x16d4>
   12c88:	cmn	r9, #1
   12c8c:	ble	12d10 <__assert_fail@plt+0x1640>
   12c90:	asr	r3, r7, #31
   12c94:	mvn	r0, #0
   12c98:	mvn	r1, #-2147483648	; 0x80000000
   12c9c:	b	12ce8 <__assert_fail@plt+0x1618>
   12ca0:	movw	r1, #52971	; 0xceeb
   12ca4:	mov	r0, #0
   12ca8:	mov	r2, #5
   12cac:	movt	r1, #1
   12cb0:	bl	11430 <dcgettext@plt>
   12cb4:	ldr	r1, [r8]
   12cb8:	mov	r2, r0
   12cbc:	str	r0, [r6]
   12cc0:	mov	r0, #1
   12cc4:	bl	14808 <__assert_fail@plt+0x3138>
   12cc8:	b	12fa8 <__assert_fail@plt+0x18d8>
   12ccc:	cmn	r9, #1
   12cd0:	ble	12d54 <__assert_fail@plt+0x1684>
   12cd4:	cmn	r7, #1
   12cd8:	beq	12da4 <__assert_fail@plt+0x16d4>
   12cdc:	asr	r3, r7, #31
   12ce0:	mov	r0, #0
   12ce4:	mov	r1, #-2147483648	; 0x80000000
   12ce8:	mov	r2, r7
   12cec:	mov	r6, r3
   12cf0:	str	r3, [sp, #56]	; 0x38
   12cf4:	mov	r6, lr
   12cf8:	bl	1be94 <__assert_fail@plt+0xa7c4>
   12cfc:	subs	r0, r0, r8
   12d00:	mov	lr, r6
   12d04:	sbcs	r0, r1, r9
   12d08:	blt	12d84 <__assert_fail@plt+0x16b4>
   12d0c:	b	12da4 <__assert_fail@plt+0x16d4>
   12d10:	eor	r0, r8, ip
   12d14:	eor	r1, r9, ip
   12d18:	orrs	r0, r0, r1
   12d1c:	beq	12da4 <__assert_fail@plt+0x16d4>
   12d20:	mov	r0, #0
   12d24:	mov	r1, #-2147483648	; 0x80000000
   12d28:	mov	r2, r8
   12d2c:	mov	r3, r9
   12d30:	mov	r6, lr
   12d34:	bl	1be94 <__assert_fail@plt+0xa7c4>
   12d38:	subs	r0, r0, r7
   12d3c:	mov	lr, r6
   12d40:	sbcs	r0, r1, r7, asr #31
   12d44:	bge	12da4 <__assert_fail@plt+0x16d4>
   12d48:	asr	r0, r7, #31
   12d4c:	str	r0, [sp, #56]	; 0x38
   12d50:	b	12d84 <__assert_fail@plt+0x16b4>
   12d54:	asr	r3, r7, #31
   12d58:	mvn	r0, #0
   12d5c:	mvn	r1, #-2147483648	; 0x80000000
   12d60:	mov	r2, r7
   12d64:	mov	r6, r3
   12d68:	str	r3, [sp, #56]	; 0x38
   12d6c:	mov	r6, lr
   12d70:	bl	1be94 <__assert_fail@plt+0xa7c4>
   12d74:	subs	r0, r8, r0
   12d78:	mov	lr, r6
   12d7c:	sbcs	r0, r9, r1
   12d80:	bge	12da4 <__assert_fail@plt+0x16d4>
   12d84:	ldr	r1, [sp, #56]	; 0x38
   12d88:	umull	r2, r0, r8, r7
   12d8c:	mla	r0, r8, r1, r0
   12d90:	mla	r8, r9, r7, r0
   12d94:	mov	r9, r2
   12d98:	cmp	lr, #0
   12d9c:	bne	12e14 <__assert_fail@plt+0x1744>
   12da0:	b	1478c <__assert_fail@plt+0x30bc>
   12da4:	umull	r0, r1, r8, r7
   12da8:	asr	r2, r7, #31
   12dac:	mla	r1, r8, r2, r1
   12db0:	movw	r2, #62248	; 0xf328
   12db4:	movt	r2, #2
   12db8:	mla	r1, r9, r7, r1
   12dbc:	ldrd	r2, [r2]
   12dc0:	adds	r9, r2, r0
   12dc4:	mov	r2, #0
   12dc8:	mov	r0, #0
   12dcc:	adc	r8, r3, r1
   12dd0:	cmn	r8, #1
   12dd4:	movwgt	r2, #1
   12dd8:	cmn	r3, #1
   12ddc:	mov	r3, #0
   12de0:	movwgt	r3, #1
   12de4:	subs	r2, r3, r2
   12de8:	movwne	r2, #1
   12dec:	cmn	r1, #1
   12df0:	movwgt	r0, #1
   12df4:	sub	r0, r3, r0
   12df8:	clz	r0, r0
   12dfc:	lsr	r0, r0, #5
   12e00:	and	r0, r0, r2
   12e04:	cmp	r0, #1
   12e08:	bne	12e14 <__assert_fail@plt+0x1744>
   12e0c:	cmp	lr, #0
   12e10:	beq	1478c <__assert_fail@plt+0x30bc>
   12e14:	ldr	r7, [sp, #60]	; 0x3c
   12e18:	cmp	r4, #0
   12e1c:	beq	12e5c <__assert_fail@plt+0x178c>
   12e20:	orr	r4, sl, #2
   12e24:	bl	152ac <__assert_fail@plt+0x3bdc>
   12e28:	mov	r0, #1
   12e2c:	mov	r1, r5
   12e30:	mov	r2, r4
   12e34:	movw	r3, #438	; 0x1b6
   12e38:	bl	16b60 <__assert_fail@plt+0x5490>
   12e3c:	cmn	r0, #1
   12e40:	bgt	12ecc <__assert_fail@plt+0x17fc>
   12e44:	ldr	r0, [r7]
   12e48:	cmp	r0, #4
   12e4c:	beq	12e24 <__assert_fail@plt+0x1754>
   12e50:	movw	r0, #62220	; 0xf30c
   12e54:	movt	r0, #2
   12e58:	ldr	r5, [r0]
   12e5c:	orr	r6, sl, #1
   12e60:	bl	152ac <__assert_fail@plt+0x3bdc>
   12e64:	mov	r0, #1
   12e68:	mov	r1, r5
   12e6c:	mov	r2, r6
   12e70:	movw	r3, #438	; 0x1b6
   12e74:	bl	16b60 <__assert_fail@plt+0x5490>
   12e78:	cmn	r0, #1
   12e7c:	bgt	12ecc <__assert_fail@plt+0x17fc>
   12e80:	ldr	r4, [r7]
   12e84:	cmp	r4, #4
   12e88:	beq	12e60 <__assert_fail@plt+0x1790>
   12e8c:	movw	r1, #52953	; 0xced9
   12e90:	mov	r0, #0
   12e94:	mov	r2, #5
   12e98:	movt	r1, #1
   12e9c:	bl	11430 <dcgettext@plt>
   12ea0:	mov	r5, r0
   12ea4:	movw	r0, #62220	; 0xf30c
   12ea8:	movt	r0, #2
   12eac:	ldr	r1, [r0]
   12eb0:	mov	r0, #4
   12eb4:	bl	190ec <__assert_fail@plt+0x7a1c>
   12eb8:	mov	r3, r0
   12ebc:	mov	r0, #1
   12ec0:	mov	r1, r4
   12ec4:	mov	r2, r5
   12ec8:	bl	14914 <__assert_fail@plt+0x3244>
   12ecc:	movw	r0, #62232	; 0xf318
   12ed0:	movt	r0, #2
   12ed4:	ldrd	r0, [r0]
   12ed8:	orrs	r0, r0, r1
   12edc:	beq	12fa8 <__assert_fail@plt+0x18d8>
   12ee0:	movw	r0, #62228	; 0xf314
   12ee4:	movt	r0, #2
   12ee8:	ldrb	r0, [r0, #1]
   12eec:	tst	r0, #2
   12ef0:	bne	12fa8 <__assert_fail@plt+0x18d8>
   12ef4:	bl	152ac <__assert_fail@plt+0x3bdc>
   12ef8:	mov	r0, #1
   12efc:	mov	r2, r9
   12f00:	mov	r3, r8
   12f04:	bl	11418 <ftruncate64@plt>
   12f08:	cmn	r0, #1
   12f0c:	bgt	12f20 <__assert_fail@plt+0x1850>
   12f10:	ldr	r5, [r7]
   12f14:	cmp	r5, #4
   12f18:	beq	12ef4 <__assert_fail@plt+0x1824>
   12f1c:	b	12f2c <__assert_fail@plt+0x185c>
   12f20:	cmp	r0, #0
   12f24:	beq	12fa8 <__assert_fail@plt+0x18d8>
   12f28:	ldr	r5, [r7]
   12f2c:	add	r6, sp, #64	; 0x40
   12f30:	bl	152ac <__assert_fail@plt+0x3bdc>
   12f34:	mov	r0, #3
   12f38:	mov	r1, #1
   12f3c:	mov	r2, r6
   12f40:	bl	11478 <__fxstat64@plt>
   12f44:	cmn	r0, #1
   12f48:	bgt	12f5c <__assert_fail@plt+0x188c>
   12f4c:	ldr	r4, [r7]
   12f50:	cmp	r4, #4
   12f54:	beq	12f30 <__assert_fail@plt+0x1860>
   12f58:	b	12f68 <__assert_fail@plt+0x1898>
   12f5c:	cmp	r0, #0
   12f60:	beq	13f08 <__assert_fail@plt+0x2838>
   12f64:	ldr	r4, [r7]
   12f68:	movw	r1, #53064	; 0xcf48
   12f6c:	mov	r0, #0
   12f70:	mov	r2, #5
   12f74:	movt	r1, #1
   12f78:	bl	11430 <dcgettext@plt>
   12f7c:	mov	r5, r0
   12f80:	movw	r0, #62220	; 0xf30c
   12f84:	movt	r0, #2
   12f88:	ldr	r1, [r0]
   12f8c:	mov	r0, #4
   12f90:	bl	190ec <__assert_fail@plt+0x7a1c>
   12f94:	mov	r3, r0
   12f98:	mov	r0, #0
   12f9c:	mov	r1, r4
   12fa0:	mov	r2, r5
   12fa4:	bl	14914 <__assert_fail@plt+0x3244>
   12fa8:	bl	16cc8 <__assert_fail@plt+0x55f8>
   12fac:	movw	r2, #62256	; 0xf330
   12fb0:	movw	r3, #51712	; 0xca00
   12fb4:	movw	ip, #62432	; 0xf3e0
   12fb8:	movt	r2, #2
   12fbc:	movt	r3, #15258	; 0x3b9a
   12fc0:	movt	ip, #2
   12fc4:	strd	r0, [r2]
   12fc8:	movw	r2, #62264	; 0xf338
   12fcc:	adds	r0, r0, r3
   12fd0:	ldr	r6, [ip]
   12fd4:	movt	r2, #2
   12fd8:	adc	r1, r1, #0
   12fdc:	strd	r0, [r2]
   12fe0:	movw	r0, #62424	; 0xf3d8
   12fe4:	movt	r0, #2
   12fe8:	ldm	r0, {r4, r7}
   12fec:	orrs	r0, r4, r7
   12ff0:	cmpeq	r6, #0
   12ff4:	beq	13220 <__assert_fail@plt+0x1b50>
   12ff8:	movw	r0, #62416	; 0xf3d0
   12ffc:	movt	r0, #2
   13000:	ldr	r5, [r0]
   13004:	cmn	r5, #1
   13008:	ble	13030 <__assert_fail@plt+0x1960>
   1300c:	cmp	r5, #0
   13010:	mvn	r1, #0
   13014:	beq	130f4 <__assert_fail@plt+0x1a24>
   13018:	cmn	r7, #1
   1301c:	ble	13070 <__assert_fail@plt+0x19a0>
   13020:	asr	r8, r5, #31
   13024:	mvn	r0, #0
   13028:	mvn	r1, #-2147483648	; 0x80000000
   1302c:	b	1304c <__assert_fail@plt+0x197c>
   13030:	cmn	r7, #1
   13034:	ble	130b0 <__assert_fail@plt+0x19e0>
   13038:	cmn	r5, #1
   1303c:	beq	130f4 <__assert_fail@plt+0x1a24>
   13040:	asr	r8, r5, #31
   13044:	mov	r0, #0
   13048:	mov	r1, #-2147483648	; 0x80000000
   1304c:	mov	r2, r5
   13050:	mov	r3, r8
   13054:	mov	r9, ip
   13058:	bl	1be94 <__assert_fail@plt+0xa7c4>
   1305c:	subs	r0, r0, r4
   13060:	mov	ip, r9
   13064:	sbcs	r0, r1, r7
   13068:	blt	130dc <__assert_fail@plt+0x1a0c>
   1306c:	b	130f4 <__assert_fail@plt+0x1a24>
   13070:	eor	r0, r4, r1
   13074:	eor	r1, r7, r1
   13078:	orrs	r0, r0, r1
   1307c:	beq	130f4 <__assert_fail@plt+0x1a24>
   13080:	mov	r0, #0
   13084:	mov	r1, #-2147483648	; 0x80000000
   13088:	mov	r2, r4
   1308c:	mov	r3, r7
   13090:	mov	r8, ip
   13094:	bl	1be94 <__assert_fail@plt+0xa7c4>
   13098:	subs	r0, r0, r5
   1309c:	mov	ip, r8
   130a0:	sbcs	r0, r1, r5, asr #31
   130a4:	bge	130f4 <__assert_fail@plt+0x1a24>
   130a8:	asr	r8, r5, #31
   130ac:	b	130dc <__assert_fail@plt+0x1a0c>
   130b0:	asr	r8, r5, #31
   130b4:	mvn	r0, #0
   130b8:	mvn	r1, #-2147483648	; 0x80000000
   130bc:	mov	r2, r5
   130c0:	mov	r9, ip
   130c4:	mov	r3, r8
   130c8:	bl	1be94 <__assert_fail@plt+0xa7c4>
   130cc:	subs	r0, r4, r0
   130d0:	mov	ip, r9
   130d4:	sbcs	r0, r7, r1
   130d8:	bge	130f4 <__assert_fail@plt+0x1a24>
   130dc:	umull	r1, r0, r5, r4
   130e0:	mov	sl, #1
   130e4:	mla	r0, r5, r7, r0
   130e8:	str	r1, [sp, #56]	; 0x38
   130ec:	mla	r6, r8, r4, r0
   130f0:	b	13150 <__assert_fail@plt+0x1a80>
   130f4:	umull	r0, r1, r4, r5
   130f8:	asr	r2, r5, #31
   130fc:	mov	r3, #0
   13100:	mla	r1, r4, r2, r1
   13104:	adds	r0, r6, r0
   13108:	asr	r2, r6, #31
   1310c:	mla	r1, r7, r5, r1
   13110:	str	r0, [sp, #56]	; 0x38
   13114:	mov	r0, #0
   13118:	adc	r6, r2, r1
   1311c:	cmn	r6, #1
   13120:	movwgt	r3, #1
   13124:	cmn	r2, #1
   13128:	mov	r2, #0
   1312c:	movwgt	r2, #1
   13130:	subs	r3, r2, r3
   13134:	movwne	r3, #1
   13138:	cmn	r1, #1
   1313c:	movwgt	r0, #1
   13140:	sub	r0, r2, r0
   13144:	clz	r0, r0
   13148:	lsr	r0, r0, #5
   1314c:	and	sl, r0, r3
   13150:	movw	r0, #62208	; 0xf300
   13154:	mov	r2, r4
   13158:	mov	r3, r7
   1315c:	movt	r0, #2
   13160:	ldrd	r8, [r0]
   13164:	movw	r0, #62192	; 0xf2f0
   13168:	movt	r0, #2
   1316c:	ldr	r1, [r0]
   13170:	mov	r0, #0
   13174:	stm	sp, {r5, ip}
   13178:	bl	15990 <__assert_fail@plt+0x42c0>
   1317c:	orrs	r0, r0, r1
   13180:	beq	131e0 <__assert_fail@plt+0x1b10>
   13184:	movw	r0, #61776	; 0xf150
   13188:	movt	r0, #2
   1318c:	ldr	r0, [r0]
   13190:	cmp	r0, #1
   13194:	beq	13220 <__assert_fail@plt+0x1b50>
   13198:	movw	r1, #54388	; 0xd474
   1319c:	mov	r0, #0
   131a0:	mov	r2, #5
   131a4:	movt	r1, #1
   131a8:	bl	11430 <dcgettext@plt>
   131ac:	mov	r4, r0
   131b0:	movw	r0, #62192	; 0xf2f0
   131b4:	mov	r1, #3
   131b8:	movt	r0, #2
   131bc:	ldr	r2, [r0]
   131c0:	mov	r0, #0
   131c4:	bl	19368 <__assert_fail@plt+0x7c98>
   131c8:	mov	r3, r0
   131cc:	mov	r0, #0
   131d0:	mov	r1, #0
   131d4:	mov	r2, r4
   131d8:	bl	14914 <__assert_fail@plt+0x3244>
   131dc:	b	13220 <__assert_fail@plt+0x1b50>
   131e0:	movw	r0, #62208	; 0xf300
   131e4:	mvn	r3, #0
   131e8:	movt	r0, #2
   131ec:	ldrd	r0, [r0]
   131f0:	subs	r2, r3, r0
   131f4:	sbcs	r2, r3, r1
   131f8:	bge	13220 <__assert_fail@plt+0x1b50>
   131fc:	cmp	sl, #0
   13200:	bne	13184 <__assert_fail@plt+0x1ab4>
   13204:	ldr	r2, [sp, #56]	; 0x38
   13208:	subs	r0, r0, r8
   1320c:	sbc	r1, r1, r9
   13210:	eor	r1, r6, r1
   13214:	eor	r0, r2, r0
   13218:	orrs	r0, r0, r1
   1321c:	bne	13184 <__assert_fail@plt+0x1ab4>
   13220:	movw	r0, #62232	; 0xf318
   13224:	movt	r0, #2
   13228:	ldrd	r2, [r0]
   1322c:	movw	r0, #62248	; 0xf328
   13230:	movt	r0, #2
   13234:	ldrd	r0, [r0]
   13238:	orr	r1, r1, r3
   1323c:	orr	r7, r0, r2
   13240:	orrs	r1, r7, r1
   13244:	beq	13300 <__assert_fail@plt+0x1c30>
   13248:	movw	r8, #62240	; 0xf320
   1324c:	str	r0, [sp, #64]	; 0x40
   13250:	movw	r0, #62220	; 0xf30c
   13254:	movt	r0, #2
   13258:	movt	r8, #2
   1325c:	ldr	r1, [r0]
   13260:	ldr	r0, [r8]
   13264:	str	r0, [sp]
   13268:	add	r0, sp, #64	; 0x40
   1326c:	str	r0, [sp, #4]
   13270:	mov	r0, #1
   13274:	bl	15990 <__assert_fail@plt+0x42c0>
   13278:	ldr	sl, [sp, #64]	; 0x40
   1327c:	mov	r5, r0
   13280:	orrs	r0, r0, r1
   13284:	mov	r6, r1
   13288:	cmpeq	sl, #0
   1328c:	beq	13300 <__assert_fail@plt+0x1c30>
   13290:	movw	r9, #62508	; 0xf42c
   13294:	ldr	r2, [r8]
   13298:	cmp	r0, #0
   1329c:	mov	r1, #0
   132a0:	movt	r9, #2
   132a4:	ldr	r0, [r9]
   132a8:	moveq	r2, sl
   132ac:	bl	115c8 <memset@plt>
   132b0:	ldr	r4, [r8]
   132b4:	ldr	r0, [r9]
   132b8:	orrs	r7, r5, r6
   132bc:	moveq	r4, sl
   132c0:	mov	r1, r4
   132c4:	bl	15efc <__assert_fail@plt+0x482c>
   132c8:	cmp	r0, r4
   132cc:	bne	145e4 <__assert_fail@plt+0x2f14>
   132d0:	subs	r5, r5, #1
   132d4:	sbc	r6, r6, #0
   132d8:	cmp	r7, #0
   132dc:	moveq	r6, r7
   132e0:	moveq	r5, r7
   132e4:	moveq	sl, r7
   132e8:	orr	r0, r5, r6
   132ec:	cmp	r0, #0
   132f0:	cmpeq	sl, #0
   132f4:	bne	132b0 <__assert_fail@plt+0x1be0>
   132f8:	mov	r0, #0
   132fc:	str	r0, [sp, #64]	; 0x40
   13300:	movw	r0, #61768	; 0xf148
   13304:	mvn	sl, #0
   13308:	movt	r0, #2
   1330c:	ldrd	r0, [r0]
   13310:	orrs	r0, r0, r1
   13314:	bne	13330 <__assert_fail@plt+0x1c60>
   13318:	movw	r0, #62272	; 0xf340
   1331c:	mov	r6, #0
   13320:	movt	r0, #2
   13324:	ldr	r0, [r0]
   13328:	cmp	r0, #0
   1332c:	beq	14078 <__assert_fail@plt+0x29a8>
   13330:	bl	161f4 <__assert_fail@plt+0x4b24>
   13334:	bl	162b4 <__assert_fail@plt+0x4be4>
   13338:	mvn	r0, #0
   1333c:	mov	r8, #0
   13340:	str	r0, [sp, #52]	; 0x34
   13344:	mov	r0, #0
   13348:	str	r0, [sp, #56]	; 0x38
   1334c:	b	13370 <__assert_fail@plt+0x1ca0>
   13350:	mov	r8, r9
   13354:	mvn	sl, #0
   13358:	b	13370 <__assert_fail@plt+0x1ca0>
   1335c:	mov	r0, sl
   13360:	mov	r1, r4
   13364:	bl	164e8 <__assert_fail@plt+0x4e18>
   13368:	str	r5, [sp, #52]	; 0x34
   1336c:	b	13350 <__assert_fail@plt+0x1c80>
   13370:	movw	r0, #61776	; 0xf150
   13374:	movt	r0, #2
   13378:	ldr	r0, [r0]
   1337c:	cmp	r0, #4
   13380:	bne	133c8 <__assert_fail@plt+0x1cf8>
   13384:	bl	16cc8 <__assert_fail@plt+0x55f8>
   13388:	movw	r2, #62264	; 0xf338
   1338c:	movt	r2, #2
   13390:	ldrd	r2, [r2]
   13394:	subs	r2, r0, r2
   13398:	sbcs	r2, r1, r3
   1339c:	blt	133c8 <__assert_fail@plt+0x1cf8>
   133a0:	bl	155e8 <__assert_fail@plt+0x3f18>
   133a4:	movw	r0, #62264	; 0xf338
   133a8:	movw	r3, #51712	; 0xca00
   133ac:	movt	r0, #2
   133b0:	movt	r3, #15258	; 0x3b9a
   133b4:	mov	r2, r0
   133b8:	ldrd	r0, [r0]
   133bc:	adds	r0, r0, r3
   133c0:	adc	r1, r1, #0
   133c4:	strd	r0, [r2]
   133c8:	movw	r0, #61768	; 0xf148
   133cc:	movw	r2, #62456	; 0xf3f8
   133d0:	movw	r7, #62464	; 0xf400
   133d4:	movt	r2, #2
   133d8:	movt	r0, #2
   133dc:	movt	r7, #2
   133e0:	ldrd	r4, [r0]
   133e4:	ldrd	r2, [r2]
   133e8:	ldm	r7, {r6, r9}
   133ec:	movw	r7, #62272	; 0xf340
   133f0:	movt	r7, #2
   133f4:	ldr	r7, [r7]
   133f8:	adds	r0, r4, #1
   133fc:	adc	r1, r5, #0
   13400:	cmp	r7, #0
   13404:	moveq	r0, r4
   13408:	adds	r6, r2, r6
   1340c:	adc	r9, r3, r9
   13410:	cmp	r7, #0
   13414:	moveq	r1, r5
   13418:	subs	r0, r6, r0
   1341c:	sbcs	r0, r9, r1
   13420:	bge	13b38 <__assert_fail@plt+0x2468>
   13424:	movw	r0, #62228	; 0xf314
   13428:	movt	r0, #2
   1342c:	ldr	r1, [r0]
   13430:	and	r0, r1, #1280	; 0x500
   13434:	cmp	r0, #1280	; 0x500
   13438:	bne	13460 <__assert_fail@plt+0x1d90>
   1343c:	movw	r0, #62416	; 0xf3d0
   13440:	ands	r1, r1, #24
   13444:	movt	r0, #2
   13448:	movwne	r1, #32
   1344c:	ldr	r2, [r0]
   13450:	movw	r0, #62512	; 0xf430
   13454:	movt	r0, #2
   13458:	ldr	r0, [r0]
   1345c:	bl	115c8 <memset@plt>
   13460:	movw	r0, #62416	; 0xf3d0
   13464:	subs	r1, r6, r4
   13468:	movt	r0, #2
   1346c:	sbcs	r1, r9, r5
   13470:	ldr	r0, [r0]
   13474:	movlt	r7, r0
   13478:	movw	r0, #62512	; 0xf430
   1347c:	movt	r0, #2
   13480:	mov	r2, r7
   13484:	ldr	r1, [r0]
   13488:	movw	r0, #62440	; 0xf3e8
   1348c:	movt	r0, #2
   13490:	ldr	r3, [r0]
   13494:	mov	r0, #0
   13498:	blx	r3
   1349c:	mov	r9, r0
   134a0:	cmp	r0, #1
   134a4:	bge	13778 <__assert_fail@plt+0x20a8>
   134a8:	cmp	r9, #0
   134ac:	beq	13b48 <__assert_fail@plt+0x2478>
   134b0:	movw	r0, #62228	; 0xf314
   134b4:	movt	r0, #2
   134b8:	ldr	r0, [r0]
   134bc:	tst	r0, #256	; 0x100
   134c0:	beq	134d8 <__assert_fail@plt+0x1e08>
   134c4:	movw	r0, #61776	; 0xf150
   134c8:	movt	r0, #2
   134cc:	ldr	r0, [r0]
   134d0:	cmp	r0, #1
   134d4:	beq	13534 <__assert_fail@plt+0x1e64>
   134d8:	ldr	r0, [sp, #60]	; 0x3c
   134dc:	movw	r1, #54438	; 0xd4a6
   134e0:	mov	r2, #5
   134e4:	movt	r1, #1
   134e8:	ldr	r4, [r0]
   134ec:	mov	r0, #0
   134f0:	bl	11430 <dcgettext@plt>
   134f4:	mov	r5, r0
   134f8:	movw	r0, #62192	; 0xf2f0
   134fc:	movt	r0, #2
   13500:	ldr	r1, [r0]
   13504:	mov	r0, #4
   13508:	bl	190ec <__assert_fail@plt+0x7a1c>
   1350c:	mov	r3, r0
   13510:	mov	r0, #0
   13514:	mov	r1, r4
   13518:	mov	r2, r5
   1351c:	bl	14914 <__assert_fail@plt+0x3244>
   13520:	movw	r0, #62228	; 0xf314
   13524:	movt	r0, #2
   13528:	ldrb	r0, [r0, #1]
   1352c:	tst	r0, #1
   13530:	beq	13c3c <__assert_fail@plt+0x256c>
   13534:	bl	15454 <__assert_fail@plt+0x3d84>
   13538:	movw	r0, #62416	; 0xf3d0
   1353c:	movt	r0, #2
   13540:	ldr	r0, [r0]
   13544:	sub	r7, r0, r8
   13548:	mov	r0, #0
   1354c:	asr	r5, r7, #31
   13550:	mov	r2, r7
   13554:	mov	r3, r5
   13558:	bl	14af4 <__assert_fail@plt+0x3424>
   1355c:	movw	r0, #62200	; 0xf2f8
   13560:	movt	r0, #2
   13564:	ldrb	r0, [r0]
   13568:	cmp	r0, #0
   1356c:	beq	1367c <__assert_fail@plt+0x1fac>
   13570:	movw	r0, #62208	; 0xf300
   13574:	movt	r0, #2
   13578:	ldrd	r0, [r0]
   1357c:	subs	r2, sl, r0
   13580:	sbcs	r2, sl, r1
   13584:	bge	1363c <__assert_fail@plt+0x1f6c>
   13588:	cmn	r1, #1
   1358c:	mov	r2, #0
   13590:	mov	r3, #0
   13594:	mov	r6, #0
   13598:	movwgt	r2, #1
   1359c:	adds	r0, r0, r7
   135a0:	adc	r1, r1, r7, asr #31
   135a4:	cmn	r1, #1
   135a8:	movwgt	r3, #1
   135ac:	subs	r3, r2, r3
   135b0:	movwne	r3, #1
   135b4:	cmn	r5, #1
   135b8:	movwgt	r6, #1
   135bc:	sub	r2, r2, r6
   135c0:	clz	r2, r2
   135c4:	lsr	r2, r2, #5
   135c8:	ands	r2, r2, r3
   135cc:	movw	r2, #62208	; 0xf300
   135d0:	movne	r1, sl
   135d4:	movne	r0, sl
   135d8:	movt	r2, #2
   135dc:	cmn	r1, #1
   135e0:	strd	r0, [r2]
   135e4:	ble	1363c <__assert_fail@plt+0x1f6c>
   135e8:	mov	r0, #1
   135ec:	mov	r2, #0
   135f0:	mov	r3, #0
   135f4:	str	r0, [sp]
   135f8:	mov	r0, #0
   135fc:	bl	1149c <lseek64@plt>
   13600:	subs	r2, sl, r0
   13604:	sbcs	r2, sl, r1
   13608:	bge	136a0 <__assert_fail@plt+0x1fd0>
   1360c:	movw	r2, #62208	; 0xf300
   13610:	movt	r2, #2
   13614:	ldrd	r2, [r2]
   13618:	eor	r6, r3, r1
   1361c:	eor	r5, r2, r0
   13620:	orrs	r6, r5, r6
   13624:	bne	13744 <__assert_fail@plt+0x2074>
   13628:	movw	r6, #61936	; 0xf1f0
   1362c:	movt	r6, #2
   13630:	cmp	r8, #0
   13634:	beq	13724 <__assert_fail@plt+0x2054>
   13638:	b	13370 <__assert_fail@plt+0x1ca0>
   1363c:	movw	r1, #54649	; 0xd579
   13640:	mov	r0, #0
   13644:	mov	r2, #5
   13648:	movt	r1, #1
   1364c:	bl	11430 <dcgettext@plt>
   13650:	mov	r4, r0
   13654:	movw	r0, #62192	; 0xf2f0
   13658:	movt	r0, #2
   1365c:	ldr	r1, [r0]
   13660:	mov	r0, #4
   13664:	bl	190ec <__assert_fail@plt+0x7a1c>
   13668:	mov	r3, r0
   1366c:	mov	r0, #0
   13670:	mov	r1, #0
   13674:	mov	r2, r4
   13678:	b	136e8 <__assert_fail@plt+0x2018>
   1367c:	movw	r0, #62216	; 0xf308
   13680:	movw	r6, #61936	; 0xf1f0
   13684:	movt	r0, #2
   13688:	movt	r6, #2
   1368c:	ldr	r0, [r0]
   13690:	cmp	r0, #29
   13694:	beq	1371c <__assert_fail@plt+0x204c>
   13698:	ldr	r1, [sp, #60]	; 0x3c
   1369c:	str	r0, [r1]
   136a0:	ldr	r0, [sp, #60]	; 0x3c
   136a4:	movw	r1, #54488	; 0xd4d8
   136a8:	mov	r2, #5
   136ac:	movt	r1, #1
   136b0:	ldr	r4, [r0]
   136b4:	mov	r0, #0
   136b8:	bl	11430 <dcgettext@plt>
   136bc:	mov	r5, r0
   136c0:	movw	r0, #62192	; 0xf2f0
   136c4:	mov	r1, #3
   136c8:	movt	r0, #2
   136cc:	ldr	r2, [r0]
   136d0:	mov	r0, #0
   136d4:	bl	19368 <__assert_fail@plt+0x7c98>
   136d8:	mov	r3, r0
   136dc:	mov	r0, #0
   136e0:	mov	r1, r4
   136e4:	mov	r2, r5
   136e8:	bl	14914 <__assert_fail@plt+0x3244>
   136ec:	movw	r0, #62216	; 0xf308
   136f0:	mov	r1, #29
   136f4:	movw	r6, #61936	; 0xf1f0
   136f8:	movt	r0, #2
   136fc:	movt	r6, #2
   13700:	str	r1, [r0]
   13704:	movw	r0, #62200	; 0xf2f8
   13708:	mov	r1, #0
   1370c:	movt	r0, #2
   13710:	strb	r1, [r0]
   13714:	mov	r0, #1
   13718:	str	r0, [sp, #56]	; 0x38
   1371c:	cmp	r8, #0
   13720:	bne	13370 <__assert_fail@plt+0x1ca0>
   13724:	movw	r0, #62228	; 0xf314
   13728:	movt	r0, #2
   1372c:	ldr	r0, [r0]
   13730:	ands	r0, r0, #1024	; 0x400
   13734:	beq	13370 <__assert_fail@plt+0x1ca0>
   13738:	ldr	r5, [sp, #60]	; 0x3c
   1373c:	mov	r9, #0
   13740:	b	1381c <__assert_fail@plt+0x214c>
   13744:	subs	r4, r2, r0
   13748:	sbc	r5, r3, r1
   1374c:	subs	r0, sl, r4
   13750:	sbcs	r0, sl, r5
   13754:	bge	13910 <__assert_fail@plt+0x2240>
   13758:	subs	r0, r7, r4
   1375c:	movw	r6, #61936	; 0xf1f0
   13760:	rscs	r0, r5, r7, asr #31
   13764:	movt	r6, #2
   13768:	bge	13950 <__assert_fail@plt+0x2280>
   1376c:	movw	r0, #61776	; 0xf150
   13770:	movt	r0, #2
   13774:	b	13920 <__assert_fail@plt+0x2250>
   13778:	movw	r0, #62208	; 0xf300
   1377c:	movt	r0, #2
   13780:	ldrd	r0, [r0]
   13784:	subs	r2, sl, r0
   13788:	sbcs	r2, sl, r1
   1378c:	bge	137ec <__assert_fail@plt+0x211c>
   13790:	cmn	r1, #1
   13794:	mov	r2, #0
   13798:	mov	r3, #0
   1379c:	asr	r7, r9, #31
   137a0:	movwgt	r2, #1
   137a4:	adds	r0, r0, r9
   137a8:	adc	r1, r1, r9, asr #31
   137ac:	cmn	r1, #1
   137b0:	movwgt	r3, #1
   137b4:	subs	r3, r2, r3
   137b8:	movwne	r3, #1
   137bc:	cmn	r7, #1
   137c0:	mov	r7, #0
   137c4:	movwgt	r7, #1
   137c8:	sub	r2, r2, r7
   137cc:	clz	r2, r2
   137d0:	lsr	r2, r2, #5
   137d4:	ands	r2, r2, r3
   137d8:	movw	r2, #62208	; 0xf300
   137dc:	movne	r1, sl
   137e0:	movne	r0, sl
   137e4:	movt	r2, #2
   137e8:	strd	r0, [r2]
   137ec:	movw	r0, #62276	; 0xf344
   137f0:	ldr	r5, [sp, #60]	; 0x3c
   137f4:	movw	r6, #61936	; 0xf1f0
   137f8:	movt	r0, #2
   137fc:	movt	r6, #2
   13800:	ldrb	r0, [r0]
   13804:	cmp	r0, #1
   13808:	bne	1381c <__assert_fail@plt+0x214c>
   1380c:	asr	r3, r9, #31
   13810:	mov	r0, #0
   13814:	mov	r2, r9
   13818:	bl	14af4 <__assert_fail@plt+0x3424>
   1381c:	movw	r0, #62416	; 0xf3d0
   13820:	movt	r0, #2
   13824:	ldr	r4, [r0]
   13828:	cmp	r4, r9
   1382c:	ble	13868 <__assert_fail@plt+0x2198>
   13830:	movw	r0, #62464	; 0xf400
   13834:	movt	r0, #2
   13838:	mov	r2, r0
   1383c:	ldrd	r0, [r0]
   13840:	adds	r0, r0, #1
   13844:	adc	r1, r1, #0
   13848:	strd	r0, [r2]
   1384c:	movw	r0, #62228	; 0xf314
   13850:	movt	r0, #2
   13854:	ldr	r1, [r0]
   13858:	tst	r1, #1024	; 0x400
   1385c:	bne	139ac <__assert_fail@plt+0x22dc>
   13860:	mov	r4, r9
   13864:	b	1388c <__assert_fail@plt+0x21bc>
   13868:	movw	r0, #62456	; 0xf3f8
   1386c:	mov	r4, r9
   13870:	mov	r9, #0
   13874:	movt	r0, #2
   13878:	mov	r2, r0
   1387c:	ldrd	r0, [r0]
   13880:	adds	r0, r0, #1
   13884:	adc	r1, r1, #0
   13888:	strd	r0, [r2]
   1388c:	movw	r0, #62512	; 0xf430
   13890:	movt	r0, #2
   13894:	ldr	sl, [r0]
   13898:	movw	r0, #62508	; 0xf42c
   1389c:	movt	r0, #2
   138a0:	ldr	r0, [r0]
   138a4:	cmp	sl, r0
   138a8:	bne	139e4 <__assert_fail@plt+0x2314>
   138ac:	mov	r0, sl
   138b0:	mov	r1, r4
   138b4:	bl	15efc <__assert_fail@plt+0x482c>
   138b8:	movw	r1, #62496	; 0xf420
   138bc:	movt	r1, #2
   138c0:	ldrd	r2, [r1]
   138c4:	adds	r2, r2, r0
   138c8:	adc	r3, r3, r0, asr #31
   138cc:	cmp	r0, r4
   138d0:	strd	r2, [r1]
   138d4:	bne	13f68 <__assert_fail@plt+0x2898>
   138d8:	movw	r0, #62416	; 0xf3d0
   138dc:	movw	r1, #62472	; 0xf408
   138e0:	movt	r0, #2
   138e4:	movt	r1, #2
   138e8:	ldr	r0, [r0]
   138ec:	cmp	r4, r0
   138f0:	movw	r0, #62480	; 0xf410
   138f4:	movt	r0, #2
   138f8:	moveq	r0, r1
   138fc:	ldrd	r2, [r0]
   13900:	adds	r2, r2, #1
   13904:	adc	r3, r3, #0
   13908:	strd	r2, [r0]
   1390c:	b	13350 <__assert_fail@plt+0x1c80>
   13910:	movw	r0, #61776	; 0xf150
   13914:	movw	r6, #61936	; 0xf1f0
   13918:	movt	r0, #2
   1391c:	movt	r6, #2
   13920:	ldr	r0, [r0]
   13924:	cmp	r0, #1
   13928:	beq	13950 <__assert_fail@plt+0x2280>
   1392c:	movw	r1, #54687	; 0xd59f
   13930:	mov	r0, #0
   13934:	mov	r2, #5
   13938:	movt	r1, #1
   1393c:	bl	11430 <dcgettext@plt>
   13940:	mov	r2, r0
   13944:	mov	r0, #0
   13948:	mov	r1, #0
   1394c:	bl	14914 <__assert_fail@plt+0x3244>
   13950:	mov	r0, #1
   13954:	mov	r2, r4
   13958:	mov	r3, r5
   1395c:	str	r0, [sp]
   13960:	mov	r0, #0
   13964:	bl	1149c <lseek64@plt>
   13968:	subs	r0, sl, r0
   1396c:	sbcs	r0, sl, r1
   13970:	blt	1371c <__assert_fail@plt+0x204c>
   13974:	ldr	r0, [sp, #60]	; 0x3c
   13978:	ldr	r0, [r0]
   1397c:	cmp	r0, #0
   13980:	bne	136a0 <__assert_fail@plt+0x1fd0>
   13984:	movw	r1, #54734	; 0xd5ce
   13988:	mov	r0, #0
   1398c:	mov	r2, #5
   13990:	movt	r1, #1
   13994:	bl	11430 <dcgettext@plt>
   13998:	mov	r2, r0
   1399c:	mov	r0, #0
   139a0:	mov	r1, #0
   139a4:	bl	14914 <__assert_fail@plt+0x3244>
   139a8:	b	136a0 <__assert_fail@plt+0x1fd0>
   139ac:	tst	r1, #256	; 0x100
   139b0:	bne	1388c <__assert_fail@plt+0x21bc>
   139b4:	movw	r0, #62512	; 0xf430
   139b8:	ands	r1, r1, #24
   139bc:	sub	r2, r4, r9
   139c0:	movt	r0, #2
   139c4:	movwne	r1, #32
   139c8:	ldr	r0, [r0]
   139cc:	add	r0, r0, r9
   139d0:	bl	115c8 <memset@plt>
   139d4:	movw	r0, #62416	; 0xf3d0
   139d8:	movt	r0, #2
   139dc:	ldr	r4, [r0]
   139e0:	b	1388c <__assert_fail@plt+0x21bc>
   139e4:	cmp	r4, #0
   139e8:	movwne	r0, #62504	; 0xf428
   139ec:	movtne	r0, #2
   139f0:	ldrbne	r0, [r0]
   139f4:	cmpne	r0, #0
   139f8:	beq	13a20 <__assert_fail@plt+0x2350>
   139fc:	mov	r0, r4
   13a00:	ldrb	r1, [sl]
   13a04:	subs	r0, r0, #1
   13a08:	ldrb	r1, [r6, r1]
   13a0c:	strb	r1, [sl], #1
   13a10:	bne	13a00 <__assert_fail@plt+0x2330>
   13a14:	movw	r0, #62512	; 0xf430
   13a18:	movt	r0, #2
   13a1c:	ldr	sl, [r0]
   13a20:	movw	r0, #62228	; 0xf314
   13a24:	mov	r1, #0
   13a28:	movt	r0, #2
   13a2c:	ldr	r0, [r0]
   13a30:	ands	r2, r0, #128	; 0x80
   13a34:	moveq	r1, r4
   13a38:	cmp	r4, #0
   13a3c:	cmpne	r2, #0
   13a40:	bne	13acc <__assert_fail@plt+0x23fc>
   13a44:	ldr	r5, [sp, #52]	; 0x34
   13a48:	mov	r4, r1
   13a4c:	tst	r0, #8
   13a50:	bne	13b28 <__assert_fail@plt+0x2458>
   13a54:	tst	r0, #16
   13a58:	bne	1335c <__assert_fail@plt+0x1c8c>
   13a5c:	str	r5, [sp, #52]	; 0x34
   13a60:	movw	r0, #62516	; 0xf434
   13a64:	movw	r8, #62240	; 0xf320
   13a68:	movt	r0, #2
   13a6c:	movt	r8, #2
   13a70:	ldr	r7, [r0]
   13a74:	ldr	r1, [r8]
   13a78:	mov	r6, r0
   13a7c:	movw	r0, #62508	; 0xf42c
   13a80:	movt	r0, #2
   13a84:	ldr	r0, [r0]
   13a88:	sub	r5, r1, r7
   13a8c:	mov	r1, sl
   13a90:	cmp	r4, r5
   13a94:	movlt	r5, r4
   13a98:	add	r0, r0, r7
   13a9c:	mov	r2, r5
   13aa0:	bl	113f4 <memcpy@plt>
   13aa4:	ldr	r1, [r8]
   13aa8:	add	r0, r5, r7
   13aac:	sub	r4, r4, r5
   13ab0:	str	r0, [r6]
   13ab4:	cmp	r0, r1
   13ab8:	blge	16674 <__assert_fail@plt+0x4fa4>
   13abc:	add	sl, sl, r5
   13ac0:	cmp	r4, #0
   13ac4:	bne	13a60 <__assert_fail@plt+0x2390>
   13ac8:	b	13350 <__assert_fail@plt+0x1c80>
   13acc:	ldr	r2, [sp, #52]	; 0x34
   13ad0:	and	r1, r4, #1
   13ad4:	mvn	r5, #0
   13ad8:	cmp	r1, r2, lsr #31
   13adc:	subeq	r4, r4, #1
   13ae0:	ldrbeq	r5, [sl, r4]
   13ae4:	cmp	r4, #2
   13ae8:	mov	r1, r4
   13aec:	blt	13b0c <__assert_fail@plt+0x243c>
   13af0:	add	r2, sl, r1
   13af4:	cmp	r1, #3
   13af8:	ldrb	r2, [r2, #-2]
   13afc:	strb	r2, [sl, r1]
   13b00:	sub	r2, r1, #2
   13b04:	mov	r1, r2
   13b08:	bgt	13af0 <__assert_fail@plt+0x2420>
   13b0c:	ldr	r1, [sp, #52]	; 0x34
   13b10:	cmp	r1, #0
   13b14:	strbge	r1, [sl, #1]
   13b18:	addge	r4, r4, #1
   13b1c:	addlt	sl, sl, #1
   13b20:	tst	r0, #8
   13b24:	beq	13a54 <__assert_fail@plt+0x2384>
   13b28:	mov	r0, sl
   13b2c:	mov	r1, r4
   13b30:	bl	16390 <__assert_fail@plt+0x4cc0>
   13b34:	b	13368 <__assert_fail@plt+0x1c98>
   13b38:	ldr	r9, [sp, #60]	; 0x3c
   13b3c:	movw	r5, #62420	; 0xf3d4
   13b40:	movt	r5, #2
   13b44:	b	13bb8 <__assert_fail@plt+0x24e8>
   13b48:	movw	r0, #62276	; 0xf344
   13b4c:	movw	r1, #62278	; 0xf346
   13b50:	ldr	r9, [sp, #60]	; 0x3c
   13b54:	movw	r5, #62420	; 0xf3d4
   13b58:	movt	r0, #2
   13b5c:	movt	r1, #2
   13b60:	movt	r5, #2
   13b64:	ldrb	r0, [r0]
   13b68:	ldrb	r2, [r1]
   13b6c:	orr	r0, r2, r0
   13b70:	strb	r0, [r1]
   13b74:	movw	r0, #62277	; 0xf345
   13b78:	movt	r0, #2
   13b7c:	ldrb	r1, [r0]
   13b80:	mov	r0, #0
   13b84:	cmp	r1, #1
   13b88:	bne	13ba4 <__assert_fail@plt+0x24d4>
   13b8c:	movw	r0, #62228	; 0xf314
   13b90:	mov	r1, #1
   13b94:	movt	r0, #2
   13b98:	ldrb	r0, [r0, #1]
   13b9c:	and	r0, r0, #2
   13ba0:	eor	r0, r1, r0, lsr #1
   13ba4:	movw	r1, #62279	; 0xf347
   13ba8:	movt	r1, #2
   13bac:	ldrb	r2, [r1]
   13bb0:	orr	r0, r2, r0
   13bb4:	strb	r0, [r1]
   13bb8:	ldr	r7, [sp, #56]	; 0x38
   13bbc:	ldr	r1, [sp, #52]	; 0x34
   13bc0:	cmp	r1, #0
   13bc4:	blt	13c5c <__assert_fail@plt+0x258c>
   13bc8:	movw	r0, #62228	; 0xf314
   13bcc:	strb	r1, [sp, #64]	; 0x40
   13bd0:	movt	r0, #2
   13bd4:	ldr	r0, [r0]
   13bd8:	tst	r0, #8
   13bdc:	bne	13c2c <__assert_fail@plt+0x255c>
   13be0:	tst	r0, #16
   13be4:	bne	13c50 <__assert_fail@plt+0x2580>
   13be8:	movw	r0, #62516	; 0xf434
   13bec:	mov	r3, r1
   13bf0:	movt	r0, #2
   13bf4:	mov	r2, r0
   13bf8:	ldr	r0, [r0]
   13bfc:	add	r1, r0, #1
   13c00:	str	r1, [r2]
   13c04:	movw	r2, #62508	; 0xf42c
   13c08:	movt	r2, #2
   13c0c:	ldr	r2, [r2]
   13c10:	strb	r3, [r2, r0]
   13c14:	movw	r0, #62240	; 0xf320
   13c18:	movt	r0, #2
   13c1c:	ldr	r0, [r0]
   13c20:	cmp	r1, r0
   13c24:	blge	16674 <__assert_fail@plt+0x4fa4>
   13c28:	b	13c5c <__assert_fail@plt+0x258c>
   13c2c:	add	r0, sp, #64	; 0x40
   13c30:	mov	r1, #1
   13c34:	bl	16390 <__assert_fail@plt+0x4cc0>
   13c38:	b	13c5c <__assert_fail@plt+0x258c>
   13c3c:	ldr	r9, [sp, #60]	; 0x3c
   13c40:	movw	r5, #62420	; 0xf3d4
   13c44:	mov	r7, #1
   13c48:	movt	r5, #2
   13c4c:	b	13bbc <__assert_fail@plt+0x24ec>
   13c50:	add	r0, sp, #64	; 0x40
   13c54:	mov	r1, #1
   13c58:	bl	164e8 <__assert_fail@plt+0x4e18>
   13c5c:	movw	r0, #62228	; 0xf314
   13c60:	movw	r8, #62520	; 0xf438
   13c64:	movt	r0, #2
   13c68:	movt	r8, #2
   13c6c:	ldr	r0, [r0]
   13c70:	ldr	r4, [r8]
   13c74:	tst	r0, #8
   13c78:	beq	13cf8 <__assert_fail@plt+0x2628>
   13c7c:	cmp	r4, #1
   13c80:	blt	13cf8 <__assert_fail@plt+0x2628>
   13c84:	ldr	r1, [r5]
   13c88:	cmp	r4, r1
   13c8c:	bge	13d10 <__assert_fail@plt+0x2640>
   13c90:	movw	r6, #62506	; 0xf42a
   13c94:	movt	r6, #2
   13c98:	movw	r0, #62516	; 0xf434
   13c9c:	movw	r3, #62508	; 0xf42c
   13ca0:	movt	r0, #2
   13ca4:	movt	r3, #2
   13ca8:	mov	r2, r0
   13cac:	ldr	r0, [r0]
   13cb0:	ldr	r3, [r3]
   13cb4:	add	r1, r0, #1
   13cb8:	str	r1, [r2]
   13cbc:	ldrb	r2, [r6]
   13cc0:	cmp	r2, #0
   13cc4:	mov	r2, #32
   13cc8:	movwne	r2, #64	; 0x40
   13ccc:	strb	r2, [r3, r0]
   13cd0:	movw	r0, #62240	; 0xf320
   13cd4:	movt	r0, #2
   13cd8:	ldr	r0, [r0]
   13cdc:	cmp	r1, r0
   13ce0:	blge	16674 <__assert_fail@plt+0x4fa4>
   13ce4:	ldr	r0, [r5]
   13ce8:	add	r4, r4, #1
   13cec:	cmp	r4, r0
   13cf0:	blt	13c98 <__assert_fail@plt+0x25c8>
   13cf4:	ldr	r4, [r8]
   13cf8:	mov	r6, r7
   13cfc:	cmp	r4, #0
   13d00:	beq	13d74 <__assert_fail@plt+0x26a4>
   13d04:	movw	r0, #62228	; 0xf314
   13d08:	movt	r0, #2
   13d0c:	ldr	r0, [r0]
   13d10:	tst	r0, #16
   13d14:	mov	r6, r7
   13d18:	beq	13d74 <__assert_fail@plt+0x26a4>
   13d1c:	movw	r0, #62516	; 0xf434
   13d20:	mov	r3, #10
   13d24:	movt	r0, #2
   13d28:	mov	r2, r0
   13d2c:	ldr	r0, [r0]
   13d30:	add	r1, r0, #1
   13d34:	str	r1, [r2]
   13d38:	movw	r2, #62505	; 0xf429
   13d3c:	movt	r2, #2
   13d40:	ldrb	r2, [r2]
   13d44:	cmp	r2, #0
   13d48:	movw	r2, #62508	; 0xf42c
   13d4c:	movt	r2, #2
   13d50:	movwne	r3, #37	; 0x25
   13d54:	ldr	r2, [r2]
   13d58:	strb	r3, [r2, r0]
   13d5c:	movw	r0, #62240	; 0xf320
   13d60:	movt	r0, #2
   13d64:	ldr	r0, [r0]
   13d68:	cmp	r1, r0
   13d6c:	blt	13d80 <__assert_fail@plt+0x26b0>
   13d70:	bl	16674 <__assert_fail@plt+0x4fa4>
   13d74:	movw	r0, #62516	; 0xf434
   13d78:	movt	r0, #2
   13d7c:	ldr	r1, [r0]
   13d80:	cmp	r1, #0
   13d84:	beq	13de4 <__assert_fail@plt+0x2714>
   13d88:	movw	r0, #62508	; 0xf42c
   13d8c:	movt	r0, #2
   13d90:	ldr	r0, [r0]
   13d94:	bl	15efc <__assert_fail@plt+0x482c>
   13d98:	movw	r1, #62496	; 0xf420
   13d9c:	movt	r1, #2
   13da0:	ldrd	r2, [r1]
   13da4:	adds	r2, r2, r0
   13da8:	adc	r3, r3, r0, asr #31
   13dac:	cmp	r0, #0
   13db0:	strd	r2, [r1]
   13db4:	beq	13dd0 <__assert_fail@plt+0x2700>
   13db8:	movw	r1, #62480	; 0xf410
   13dbc:	movt	r1, #2
   13dc0:	ldrd	r2, [r1]
   13dc4:	adds	r2, r2, #1
   13dc8:	adc	r3, r3, #0
   13dcc:	strd	r2, [r1]
   13dd0:	movw	r1, #62516	; 0xf434
   13dd4:	movt	r1, #2
   13dd8:	ldr	r1, [r1]
   13ddc:	cmp	r0, r1
   13de0:	bne	13e28 <__assert_fail@plt+0x2758>
   13de4:	movw	r0, #62524	; 0xf43c
   13de8:	movt	r0, #2
   13dec:	ldrb	r0, [r0]
   13df0:	cmp	r0, #1
   13df4:	bne	14014 <__assert_fail@plt+0x2944>
   13df8:	add	r5, sp, #64	; 0x40
   13dfc:	bl	152ac <__assert_fail@plt+0x3bdc>
   13e00:	mov	r0, #3
   13e04:	mov	r1, #1
   13e08:	mov	r2, r5
   13e0c:	bl	11478 <__fxstat64@plt>
   13e10:	cmn	r0, #1
   13e14:	bgt	13e38 <__assert_fail@plt+0x2768>
   13e18:	ldr	r4, [r9]
   13e1c:	cmp	r4, #4
   13e20:	beq	13dfc <__assert_fail@plt+0x272c>
   13e24:	b	13e44 <__assert_fail@plt+0x2774>
   13e28:	ldr	r4, [r9]
   13e2c:	movw	r1, #54455	; 0xd4b7
   13e30:	movt	r1, #1
   13e34:	b	13e4c <__assert_fail@plt+0x277c>
   13e38:	cmp	r0, #0
   13e3c:	beq	13e8c <__assert_fail@plt+0x27bc>
   13e40:	ldr	r4, [r9]
   13e44:	movw	r1, #53064	; 0xcf48
   13e48:	movt	r1, #1
   13e4c:	mov	r0, #0
   13e50:	mov	r2, #5
   13e54:	bl	11430 <dcgettext@plt>
   13e58:	mov	r5, r0
   13e5c:	movw	r0, #62220	; 0xf30c
   13e60:	movt	r0, #2
   13e64:	ldr	r1, [r0]
   13e68:	mov	r0, #4
   13e6c:	bl	190ec <__assert_fail@plt+0x7a1c>
   13e70:	mov	r3, r0
   13e74:	mov	r0, #0
   13e78:	mov	r1, r4
   13e7c:	mov	r2, r5
   13e80:	bl	14914 <__assert_fail@plt+0x3244>
   13e84:	mov	r6, #1
   13e88:	b	14078 <__assert_fail@plt+0x29a8>
   13e8c:	ldr	r0, [sp, #80]	; 0x50
   13e90:	and	r0, r0, #61440	; 0xf000
   13e94:	cmp	r0, #32768	; 0x8000
   13e98:	bne	14014 <__assert_fail@plt+0x2944>
   13e9c:	mov	r0, #1
   13ea0:	mov	r2, #0
   13ea4:	mov	r3, #0
   13ea8:	str	r0, [sp]
   13eac:	mov	r0, #1
   13eb0:	bl	1149c <lseek64@plt>
   13eb4:	mov	r8, r0
   13eb8:	subs	r0, sl, r0
   13ebc:	sbcs	r0, sl, r1
   13ec0:	bge	14014 <__assert_fail@plt+0x2944>
   13ec4:	ldr	r0, [sp, #112]	; 0x70
   13ec8:	mov	r4, r1
   13ecc:	ldr	r1, [sp, #116]	; 0x74
   13ed0:	subs	r0, r0, r8
   13ed4:	sbcs	r0, r1, r4
   13ed8:	bge	14014 <__assert_fail@plt+0x2944>
   13edc:	bl	152ac <__assert_fail@plt+0x3bdc>
   13ee0:	mov	r0, #1
   13ee4:	mov	r2, r8
   13ee8:	mov	r3, r4
   13eec:	bl	11418 <ftruncate64@plt>
   13ef0:	cmn	r0, #1
   13ef4:	bgt	13fb8 <__assert_fail@plt+0x28e8>
   13ef8:	ldr	r5, [r9]
   13efc:	cmp	r5, #4
   13f00:	beq	13edc <__assert_fail@plt+0x280c>
   13f04:	b	13fc4 <__assert_fail@plt+0x28f4>
   13f08:	ldr	r0, [sp, #80]	; 0x50
   13f0c:	and	r0, r0, #61440	; 0xf000
   13f10:	cmp	r0, #32768	; 0x8000
   13f14:	cmpne	r0, #16384	; 0x4000
   13f18:	bne	12fa8 <__assert_fail@plt+0x18d8>
   13f1c:	movw	r1, #53080	; 0xcf58
   13f20:	mov	r0, #0
   13f24:	mov	r2, #5
   13f28:	movt	r1, #1
   13f2c:	bl	11430 <dcgettext@plt>
   13f30:	mov	r4, r0
   13f34:	movw	r0, #62220	; 0xf30c
   13f38:	movt	r0, #2
   13f3c:	ldr	r1, [r0]
   13f40:	mov	r0, #4
   13f44:	bl	190ec <__assert_fail@plt+0x7a1c>
   13f48:	str	r0, [sp, #8]
   13f4c:	mov	r0, #0
   13f50:	mov	r1, r5
   13f54:	mov	r2, r4
   13f58:	str	r9, [sp]
   13f5c:	str	r8, [sp, #4]
   13f60:	bl	14914 <__assert_fail@plt+0x3244>
   13f64:	b	12fa8 <__assert_fail@plt+0x18d8>
   13f68:	ldr	r4, [r5]
   13f6c:	movw	r1, #54455	; 0xd4b7
   13f70:	mov	r0, #0
   13f74:	mov	r2, #5
   13f78:	movt	r1, #1
   13f7c:	bl	11430 <dcgettext@plt>
   13f80:	mov	r5, r0
   13f84:	movw	r0, #62220	; 0xf30c
   13f88:	movt	r0, #2
   13f8c:	ldr	r1, [r0]
   13f90:	mov	r0, #4
   13f94:	bl	190ec <__assert_fail@plt+0x7a1c>
   13f98:	mov	r3, r0
   13f9c:	mov	r0, #0
   13fa0:	mov	r1, r4
   13fa4:	mov	r2, r5
   13fa8:	bl	14914 <__assert_fail@plt+0x3244>
   13fac:	mov	r6, #1
   13fb0:	mvn	sl, #0
   13fb4:	b	14078 <__assert_fail@plt+0x29a8>
   13fb8:	cmp	r0, #0
   13fbc:	beq	14014 <__assert_fail@plt+0x2944>
   13fc0:	ldr	r5, [r9]
   13fc4:	movw	r1, #53080	; 0xcf58
   13fc8:	mov	r0, #0
   13fcc:	mov	r2, #5
   13fd0:	movt	r1, #1
   13fd4:	bl	11430 <dcgettext@plt>
   13fd8:	mov	r7, r0
   13fdc:	movw	r0, #62220	; 0xf30c
   13fe0:	movt	r0, #2
   13fe4:	ldr	r1, [r0]
   13fe8:	mov	r0, #4
   13fec:	bl	190ec <__assert_fail@plt+0x7a1c>
   13ff0:	str	r0, [sp, #8]
   13ff4:	mov	r0, #0
   13ff8:	mov	r1, r5
   13ffc:	mov	r2, r7
   14000:	str	r8, [sp]
   14004:	str	r4, [sp, #4]
   14008:	bl	14914 <__assert_fail@plt+0x3244>
   1400c:	mov	r6, #1
   14010:	b	14078 <__assert_fail@plt+0x29a8>
   14014:	movw	r0, #62228	; 0xf314
   14018:	movt	r0, #2
   1401c:	ldr	r0, [r0]
   14020:	tst	r0, #49152	; 0xc000
   14024:	beq	14078 <__assert_fail@plt+0x29a8>
   14028:	movw	r0, #61776	; 0xf150
   1402c:	movt	r0, #2
   14030:	ldr	r0, [r0]
   14034:	cmp	r0, #4
   14038:	bne	14078 <__assert_fail@plt+0x29a8>
   1403c:	movw	r0, #61784	; 0xf158
   14040:	movt	r0, #2
   14044:	ldrd	r0, [r0]
   14048:	subs	r2, sl, r0
   1404c:	sbcs	r2, sl, r1
   14050:	bge	14078 <__assert_fail@plt+0x29a8>
   14054:	movw	r2, #62496	; 0xf420
   14058:	movt	r2, #2
   1405c:	ldrd	r2, [r2]
   14060:	subs	r0, r0, r2
   14064:	sbcs	r0, r1, r3
   14068:	bge	14078 <__assert_fail@plt+0x29a8>
   1406c:	mov	r0, #0
   14070:	mov	r1, #0
   14074:	bl	155e8 <__assert_fail@plt+0x3f18>
   14078:	bl	149b0 <__assert_fail@plt+0x32e0>
   1407c:	cmp	r0, #0
   14080:	movne	r6, r0
   14084:	movw	r0, #62276	; 0xf344
   14088:	movt	r0, #2
   1408c:	ldrb	r1, [r0]
   14090:	movw	r0, #61768	; 0xf148
   14094:	movt	r0, #2
   14098:	ldm	r0, {r0, r3}
   1409c:	ldr	r5, [sp, #60]	; 0x3c
   140a0:	orrs	r0, r0, r3
   140a4:	movweq	r0, #62272	; 0xf340
   140a8:	movteq	r0, #2
   140ac:	ldreq	r0, [r0]
   140b0:	cmpeq	r0, #0
   140b4:	beq	141b0 <__assert_fail@plt+0x2ae0>
   140b8:	movw	r0, #62278	; 0xf346
   140bc:	movt	r0, #2
   140c0:	ldrb	r0, [r0]
   140c4:	cmp	r0, #0
   140c8:	bne	140d4 <__assert_fail@plt+0x2a04>
   140cc:	eors	r1, r1, #1
   140d0:	bne	142b4 <__assert_fail@plt+0x2be4>
   140d4:	movw	r1, #62536	; 0xf448
   140d8:	cmp	r0, #0
   140dc:	movt	r1, #2
   140e0:	ldr	r2, [r1]
   140e4:	ldr	r1, [r1, #4]
   140e8:	orrseq	r3, r2, r1
   140ec:	beq	142b4 <__assert_fail@plt+0x2be4>
   140f0:	movw	r3, #62200	; 0xf2f8
   140f4:	movt	r3, #2
   140f8:	ldrb	r3, [r3]
   140fc:	cmp	r3, #0
   14100:	beq	142ac <__assert_fail@plt+0x2bdc>
   14104:	movw	r3, #62208	; 0xf300
   14108:	movt	r3, #2
   1410c:	ldr	r4, [r3]
   14110:	ldr	r3, [r3, #4]
   14114:	subs	r7, sl, r4
   14118:	sbcs	r7, sl, r3
   1411c:	bge	142b4 <__assert_fail@plt+0x2be4>
   14120:	orrs	r7, r2, r1
   14124:	mov	r5, r1
   14128:	movwne	r7, #1
   1412c:	cmp	r0, #0
   14130:	movwne	r0, #1
   14134:	ands	ip, r0, r7
   14138:	mov	r7, r2
   1413c:	movwne	r7, #0
   14140:	movwne	r5, #0
   14144:	subs	r0, r4, r7
   14148:	sbc	r3, r3, r5
   1414c:	subs	r4, r0, r2
   14150:	sbc	r8, r3, r1
   14154:	cmp	ip, #0
   14158:	moveq	r4, r0
   1415c:	moveq	r8, r3
   14160:	orrs	r0, r7, r5
   14164:	bne	1418c <__assert_fail@plt+0x2abc>
   14168:	movw	r0, #61920	; 0xf1e0
   1416c:	mov	r1, r8
   14170:	movt	r0, #2
   14174:	ldr	r2, [r0]
   14178:	mov	r0, r4
   1417c:	asr	r3, r2, #31
   14180:	bl	1be94 <__assert_fail@plt+0xa7c4>
   14184:	subs	r4, r4, r2
   14188:	sbc	r8, r8, r3
   1418c:	mov	r0, #4
   14190:	mov	r2, r4
   14194:	mov	r3, r8
   14198:	str	r7, [sp]
   1419c:	str	r5, [sp, #4]
   141a0:	str	r0, [sp, #8]
   141a4:	mov	r0, #0
   141a8:	bl	11394 <posix_fadvise64@plt>
   141ac:	b	142b4 <__assert_fail@plt+0x2be4>
   141b0:	cmp	r1, #0
   141b4:	beq	14424 <__assert_fail@plt+0x2d54>
   141b8:	movw	r2, #62278	; 0xf346
   141bc:	movw	r0, #62536	; 0xf448
   141c0:	movt	r2, #2
   141c4:	movt	r0, #2
   141c8:	ldrb	r2, [r2]
   141cc:	ldrd	r0, [r0]
   141d0:	cmp	r2, #0
   141d4:	orrseq	r3, r0, r1
   141d8:	beq	14424 <__assert_fail@plt+0x2d54>
   141dc:	movw	r3, #62200	; 0xf2f8
   141e0:	movt	r3, #2
   141e4:	ldrb	r3, [r3]
   141e8:	cmp	r3, #0
   141ec:	beq	143d0 <__assert_fail@plt+0x2d00>
   141f0:	movw	r3, #62208	; 0xf300
   141f4:	movt	r3, #2
   141f8:	ldr	r8, [r3]
   141fc:	ldr	r3, [r3, #4]
   14200:	subs	r7, sl, r8
   14204:	sbcs	r7, sl, r3
   14208:	bge	143d8 <__assert_fail@plt+0x2d08>
   1420c:	orrs	r7, r0, r1
   14210:	mov	r4, r1
   14214:	mov	r9, r6
   14218:	movwne	r7, #1
   1421c:	cmp	r2, #0
   14220:	movwne	r2, #1
   14224:	ands	ip, r2, r7
   14228:	mov	r7, r0
   1422c:	movwne	r7, #0
   14230:	movwne	r4, #0
   14234:	subs	r2, r8, r7
   14238:	sbc	r3, r3, r4
   1423c:	subs	r8, r2, r0
   14240:	sbc	r6, r3, r1
   14244:	cmp	ip, #0
   14248:	moveq	r8, r2
   1424c:	moveq	r6, r3
   14250:	orrs	r0, r7, r4
   14254:	bne	1427c <__assert_fail@plt+0x2bac>
   14258:	movw	r0, #61920	; 0xf1e0
   1425c:	mov	r1, r6
   14260:	movt	r0, #2
   14264:	ldr	r2, [r0]
   14268:	mov	r0, r8
   1426c:	asr	r3, r2, #31
   14270:	bl	1be94 <__assert_fail@plt+0xa7c4>
   14274:	subs	r8, r8, r2
   14278:	sbc	r6, r6, r3
   1427c:	mov	r0, #4
   14280:	mov	r2, r8
   14284:	mov	r3, r6
   14288:	str	r7, [sp]
   1428c:	str	r4, [sp, #4]
   14290:	str	r0, [sp, #8]
   14294:	mov	r0, #0
   14298:	bl	11394 <posix_fadvise64@plt>
   1429c:	cmn	r0, #1
   142a0:	mov	r6, r9
   142a4:	bne	14424 <__assert_fail@plt+0x2d54>
   142a8:	b	143d8 <__assert_fail@plt+0x2d08>
   142ac:	mov	r0, #29
   142b0:	str	r0, [r5]
   142b4:	movw	r0, #62279	; 0xf347
   142b8:	mov	r7, r6
   142bc:	movt	r0, #2
   142c0:	ldrb	r4, [r0]
   142c4:	cmp	r4, #0
   142c8:	movweq	r0, #62277	; 0xf345
   142cc:	movteq	r0, #2
   142d0:	ldrbeq	r0, [r0]
   142d4:	cmpeq	r0, #0
   142d8:	beq	14590 <__assert_fail@plt+0x2ec0>
   142dc:	movw	r0, #62544	; 0xf450
   142e0:	cmp	r4, #0
   142e4:	movt	r0, #2
   142e8:	ldr	r6, [r0]
   142ec:	ldr	r5, [r0, #4]
   142f0:	orrseq	r0, r6, r5
   142f4:	beq	14590 <__assert_fail@plt+0x2ec0>
   142f8:	movw	r8, #61792	; 0xf160
   142fc:	movt	r8, #2
   14300:	ldrd	r0, [r8]
   14304:	eor	r2, r1, sl
   14308:	eor	r3, r0, sl
   1430c:	orrs	r2, r3, r2
   14310:	beq	14590 <__assert_fail@plt+0x2ec0>
   14314:	cmn	r1, #1
   14318:	bgt	14344 <__assert_fail@plt+0x2c74>
   1431c:	mov	r0, #1
   14320:	mov	r2, #0
   14324:	mov	r3, #0
   14328:	str	r0, [sp]
   1432c:	mov	r0, #1
   14330:	bl	1149c <lseek64@plt>
   14334:	subs	r2, sl, r0
   14338:	strd	r0, [r8]
   1433c:	sbcs	r2, sl, r1
   14340:	bge	14590 <__assert_fail@plt+0x2ec0>
   14344:	orrs	r2, r6, r5
   14348:	mov	r8, r5
   1434c:	movwne	r2, #1
   14350:	cmp	r4, #0
   14354:	movwne	r4, #1
   14358:	ands	r2, r4, r2
   1435c:	mov	r4, r6
   14360:	movwne	r4, #0
   14364:	movwne	r8, #0
   14368:	subs	r0, r0, r4
   1436c:	sbc	r1, r1, r8
   14370:	subs	r6, r0, r6
   14374:	sbc	r5, r1, r5
   14378:	cmp	r2, #0
   1437c:	moveq	r6, r0
   14380:	moveq	r5, r1
   14384:	orrs	r0, r4, r8
   14388:	bne	143b0 <__assert_fail@plt+0x2ce0>
   1438c:	movw	r0, #61920	; 0xf1e0
   14390:	mov	r1, r5
   14394:	movt	r0, #2
   14398:	ldr	r2, [r0]
   1439c:	mov	r0, r6
   143a0:	asr	r3, r2, #31
   143a4:	bl	1be94 <__assert_fail@plt+0xa7c4>
   143a8:	subs	r6, r6, r2
   143ac:	sbc	r5, r5, r3
   143b0:	mov	r0, #4
   143b4:	stm	sp, {r4, r8}
   143b8:	mov	r2, r6
   143bc:	mov	r3, r5
   143c0:	str	r0, [sp, #8]
   143c4:	mov	r0, #1
   143c8:	bl	11394 <posix_fadvise64@plt>
   143cc:	b	14590 <__assert_fail@plt+0x2ec0>
   143d0:	mov	r0, #29
   143d4:	str	r0, [r5]
   143d8:	ldr	r4, [r5]
   143dc:	movw	r1, #53131	; 0xcf8b
   143e0:	mov	r0, #0
   143e4:	mov	r2, #5
   143e8:	movt	r1, #1
   143ec:	bl	11430 <dcgettext@plt>
   143f0:	mov	r6, r0
   143f4:	movw	r0, #62192	; 0xf2f0
   143f8:	mov	r1, #3
   143fc:	movt	r0, #2
   14400:	ldr	r2, [r0]
   14404:	mov	r0, #0
   14408:	bl	19368 <__assert_fail@plt+0x7c98>
   1440c:	mov	r3, r0
   14410:	mov	r0, #0
   14414:	mov	r1, r4
   14418:	mov	r2, r6
   1441c:	bl	14914 <__assert_fail@plt+0x3244>
   14420:	mov	r6, #1
   14424:	movw	r0, #62277	; 0xf345
   14428:	mov	r7, r6
   1442c:	movt	r0, #2
   14430:	ldrb	r0, [r0]
   14434:	cmp	r0, #1
   14438:	bne	14590 <__assert_fail@plt+0x2ec0>
   1443c:	movw	r0, #62544	; 0xf450
   14440:	movt	r0, #2
   14444:	ldm	r0, {r6, r9}
   14448:	movw	r0, #62279	; 0xf347
   1444c:	movt	r0, #2
   14450:	ldrb	r4, [r0]
   14454:	cmp	r4, #0
   14458:	orrseq	r0, r6, r9
   1445c:	beq	14590 <__assert_fail@plt+0x2ec0>
   14460:	movw	r8, #61792	; 0xf160
   14464:	movt	r8, #2
   14468:	ldrd	r0, [r8]
   1446c:	eor	r2, r1, sl
   14470:	eor	r3, r0, sl
   14474:	orrs	r2, r3, r2
   14478:	beq	14544 <__assert_fail@plt+0x2e74>
   1447c:	cmn	r1, #1
   14480:	bgt	144ac <__assert_fail@plt+0x2ddc>
   14484:	mov	r0, #1
   14488:	mov	r2, #0
   1448c:	mov	r3, #0
   14490:	str	r0, [sp]
   14494:	mov	r0, #1
   14498:	bl	1149c <lseek64@plt>
   1449c:	subs	r2, sl, r0
   144a0:	strd	r0, [r8]
   144a4:	sbcs	r2, sl, r1
   144a8:	bge	14544 <__assert_fail@plt+0x2e74>
   144ac:	orrs	r2, r6, r9
   144b0:	mov	r5, r6
   144b4:	movwne	r2, #1
   144b8:	cmp	r4, #0
   144bc:	movwne	r4, #1
   144c0:	ands	r2, r4, r2
   144c4:	mov	r4, r9
   144c8:	movwne	r5, #0
   144cc:	movwne	r4, #0
   144d0:	subs	r0, r0, r5
   144d4:	sbc	r1, r1, r4
   144d8:	subs	r8, r0, r6
   144dc:	sbc	r6, r1, r9
   144e0:	cmp	r2, #0
   144e4:	moveq	r8, r0
   144e8:	moveq	r6, r1
   144ec:	orrs	r0, r5, r4
   144f0:	bne	14518 <__assert_fail@plt+0x2e48>
   144f4:	movw	r0, #61920	; 0xf1e0
   144f8:	mov	r1, r6
   144fc:	movt	r0, #2
   14500:	ldr	r2, [r0]
   14504:	mov	r0, r8
   14508:	asr	r3, r2, #31
   1450c:	bl	1be94 <__assert_fail@plt+0xa7c4>
   14510:	subs	r8, r8, r2
   14514:	sbc	r6, r6, r3
   14518:	mov	r0, #4
   1451c:	mov	r2, r8
   14520:	mov	r3, r6
   14524:	str	r5, [sp]
   14528:	str	r4, [sp, #4]
   1452c:	str	r0, [sp, #8]
   14530:	mov	r0, #1
   14534:	bl	11394 <posix_fadvise64@plt>
   14538:	ldr	r5, [sp, #60]	; 0x3c
   1453c:	cmn	r0, #1
   14540:	bne	14590 <__assert_fail@plt+0x2ec0>
   14544:	ldr	r4, [r5]
   14548:	movw	r1, #53131	; 0xcf8b
   1454c:	mov	r0, #0
   14550:	mov	r2, #5
   14554:	movt	r1, #1
   14558:	bl	11430 <dcgettext@plt>
   1455c:	mov	r5, r0
   14560:	movw	r0, #62220	; 0xf30c
   14564:	mov	r1, #3
   14568:	movt	r0, #2
   1456c:	ldr	r2, [r0]
   14570:	mov	r0, #0
   14574:	bl	19368 <__assert_fail@plt+0x7c98>
   14578:	mov	r3, r0
   1457c:	mov	r0, #0
   14580:	mov	r1, r4
   14584:	mov	r2, r5
   14588:	bl	14914 <__assert_fail@plt+0x3244>
   1458c:	mov	r7, #1
   14590:	bl	152ac <__assert_fail@plt+0x3bdc>
   14594:	bl	15348 <__assert_fail@plt+0x3c78>
   14598:	bl	15454 <__assert_fail@plt+0x3d84>
   1459c:	mov	r0, r7
   145a0:	sub	sp, fp, #28
   145a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	movw	r1, #53504	; 0xd100
   145ac:	mov	r0, #0
   145b0:	mov	r2, #5
   145b4:	movt	r1, #1
   145b8:	bl	11430 <dcgettext@plt>
   145bc:	mov	r4, r0
   145c0:	mov	r0, sl
   145c4:	bl	19614 <__assert_fail@plt+0x7f44>
   145c8:	mov	r3, r0
   145cc:	mov	r0, #0
   145d0:	mov	r1, #0
   145d4:	mov	r2, r4
   145d8:	bl	14914 <__assert_fail@plt+0x3244>
   145dc:	mov	r0, #1
   145e0:	bl	117d0 <__assert_fail@plt+0x100>
   145e4:	ldr	r0, [sp, #60]	; 0x3c
   145e8:	movw	r1, #54424	; 0xd498
   145ec:	mov	r2, #5
   145f0:	movt	r1, #1
   145f4:	ldr	r4, [r0]
   145f8:	mov	r0, #0
   145fc:	bl	11430 <dcgettext@plt>
   14600:	mov	r5, r0
   14604:	movw	r0, #62220	; 0xf30c
   14608:	movt	r0, #2
   1460c:	ldr	r1, [r0]
   14610:	mov	r0, #4
   14614:	bl	190ec <__assert_fail@plt+0x7a1c>
   14618:	mov	r3, r0
   1461c:	mov	r0, #0
   14620:	mov	r1, r4
   14624:	mov	r2, r5
   14628:	bl	14914 <__assert_fail@plt+0x3244>
   1462c:	bl	161e0 <__assert_fail@plt+0x4b10>
   14630:	cmp	r1, #1
   14634:	bne	14650 <__assert_fail@plt+0x2f80>
   14638:	b	14660 <__assert_fail@plt+0x2f90>
   1463c:	movw	r1, #53852	; 0xd25c
   14640:	movt	r1, #1
   14644:	b	14770 <__assert_fail@plt+0x30a0>
   14648:	mov	r0, #4
   1464c:	str	r0, [fp, #-36]	; 0xffffffdc
   14650:	mov	r4, #0
   14654:	b	14664 <__assert_fail@plt+0x2f94>
   14658:	mov	r0, #1
   1465c:	str	r0, [fp, #-36]	; 0xffffffdc
   14660:	mov	r4, #75	; 0x4b
   14664:	movw	r1, #53662	; 0xd19e
   14668:	mov	r0, #0
   1466c:	mov	r2, #5
   14670:	movt	r1, #1
   14674:	bl	11430 <dcgettext@plt>
   14678:	mov	r5, r0
   1467c:	ldr	r0, [sp, #40]	; 0x28
   14680:	bl	19614 <__assert_fail@plt+0x7f44>
   14684:	movw	r2, #53655	; 0xd197
   14688:	str	r0, [sp]
   1468c:	mov	r0, #1
   14690:	mov	r1, r4
   14694:	mov	r3, r5
   14698:	movt	r2, #1
   1469c:	bl	14914 <__assert_fail@plt+0x3244>
   146a0:	movw	r1, #53589	; 0xd155
   146a4:	mov	r0, #0
   146a8:	mov	r2, #5
   146ac:	movt	r1, #1
   146b0:	bl	11430 <dcgettext@plt>
   146b4:	mov	r4, r0
   146b8:	movw	r0, #54013	; 0xd2fd
   146bc:	movt	r0, #1
   146c0:	b	14724 <__assert_fail@plt+0x3054>
   146c4:	movw	r1, #53564	; 0xd13c
   146c8:	mov	r0, #0
   146cc:	mov	r2, #5
   146d0:	movt	r1, #1
   146d4:	bl	11430 <dcgettext@plt>
   146d8:	mov	r4, r0
   146dc:	movw	r0, #53677	; 0xd1ad
   146e0:	movt	r0, #1
   146e4:	b	14724 <__assert_fail@plt+0x3054>
   146e8:	movw	r1, #53589	; 0xd155
   146ec:	mov	r0, #0
   146f0:	mov	r2, #5
   146f4:	movt	r1, #1
   146f8:	bl	11430 <dcgettext@plt>
   146fc:	mov	r4, r0
   14700:	movw	r0, #62224	; 0xf310
   14704:	movw	r2, #53700	; 0xd1c4
   14708:	movt	r0, #2
   1470c:	movt	r2, #1
   14710:	ldr	r1, [r0]
   14714:	movw	r0, #53688	; 0xd1b8
   14718:	movt	r0, #1
   1471c:	tst	r1, #4
   14720:	moveq	r0, r2
   14724:	bl	19614 <__assert_fail@plt+0x7f44>
   14728:	movw	r2, #53655	; 0xd197
   1472c:	str	r0, [sp]
   14730:	mov	r0, #0
   14734:	mov	r1, #0
   14738:	mov	r3, r4
   1473c:	movt	r2, #1
   14740:	b	145d8 <__assert_fail@plt+0x2f08>
   14744:	movw	r1, #53711	; 0xd1cf
   14748:	movt	r1, #1
   1474c:	b	14770 <__assert_fail@plt+0x30a0>
   14750:	movw	r1, #53756	; 0xd1fc
   14754:	movt	r1, #1
   14758:	b	14770 <__assert_fail@plt+0x30a0>
   1475c:	movw	r1, #53789	; 0xd21d
   14760:	movt	r1, #1
   14764:	b	14770 <__assert_fail@plt+0x30a0>
   14768:	movw	r1, #53820	; 0xd23c
   1476c:	movt	r1, #1
   14770:	mov	r0, #0
   14774:	mov	r2, #5
   14778:	bl	11430 <dcgettext@plt>
   1477c:	mov	r2, r0
   14780:	mov	r0, #1
   14784:	mov	r1, #0
   14788:	bl	14914 <__assert_fail@plt+0x3244>
   1478c:	movw	r1, #52987	; 0xcefb
   14790:	mov	r0, #0
   14794:	mov	r2, #5
   14798:	movt	r1, #1
   1479c:	bl	11430 <dcgettext@plt>
   147a0:	movw	r3, #62240	; 0xf320
   147a4:	mov	r2, r0
   147a8:	movw	r0, #62232	; 0xf318
   147ac:	movt	r0, #2
   147b0:	movt	r3, #2
   147b4:	ldrd	r0, [r0]
   147b8:	ldr	r3, [r3]
   147bc:	stm	sp, {r0, r1, r3}
   147c0:	b	14780 <__assert_fail@plt+0x30b0>
   147c4:	push	{fp, lr}
   147c8:	mov	fp, sp
   147cc:	movw	r0, #61924	; 0xf1e4
   147d0:	movt	r0, #2
   147d4:	ldrb	r0, [r0]
   147d8:	cmp	r0, #0
   147dc:	beq	14800 <__assert_fail@plt+0x3130>
   147e0:	movw	r0, #61904	; 0xf1d0
   147e4:	movt	r0, #2
   147e8:	ldr	r0, [r0]
   147ec:	bl	16758 <__assert_fail@plt+0x5088>
   147f0:	cmp	r0, #0
   147f4:	popeq	{fp, pc}
   147f8:	mov	r0, #1
   147fc:	bl	113e8 <_exit@plt>
   14800:	pop	{fp, lr}
   14804:	b	167fc <__assert_fail@plt+0x512c>
   14808:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1480c:	add	fp, sp, #24
   14810:	sub	sp, sp, #104	; 0x68
   14814:	bic	r4, r1, #33024	; 0x8100
   14818:	cmp	r4, #0
   1481c:	beq	148fc <__assert_fail@plt+0x322c>
   14820:	mov	r1, #3
   14824:	mov	r8, r2
   14828:	mov	r5, r0
   1482c:	bl	16980 <__assert_fail@plt+0x52b0>
   14830:	cmp	r0, #0
   14834:	blt	14880 <__assert_fail@plt+0x31b0>
   14838:	orr	r6, r0, r4
   1483c:	mov	r7, r0
   14840:	cmp	r0, r6
   14844:	beq	148fc <__assert_fail@plt+0x322c>
   14848:	tst	r6, #16384	; 0x4000
   1484c:	beq	148dc <__assert_fail@plt+0x320c>
   14850:	mov	r4, sp
   14854:	bl	152ac <__assert_fail@plt+0x3bdc>
   14858:	mov	r0, #3
   1485c:	mov	r1, r5
   14860:	mov	r2, r4
   14864:	bl	11478 <__fxstat64@plt>
   14868:	cmn	r0, #1
   1486c:	bgt	148c0 <__assert_fail@plt+0x31f0>
   14870:	bl	11598 <__errno_location@plt>
   14874:	ldr	r0, [r0]
   14878:	cmp	r0, #4
   1487c:	beq	14854 <__assert_fail@plt+0x3184>
   14880:	bl	11598 <__errno_location@plt>
   14884:	ldr	r4, [r0]
   14888:	movw	r1, #54367	; 0xd45f
   1488c:	mov	r0, #0
   14890:	mov	r2, #5
   14894:	movt	r1, #1
   14898:	bl	11430 <dcgettext@plt>
   1489c:	mov	r5, r0
   148a0:	mov	r0, #4
   148a4:	mov	r1, r8
   148a8:	bl	190ec <__assert_fail@plt+0x7a1c>
   148ac:	mov	r3, r0
   148b0:	mov	r0, #1
   148b4:	mov	r1, r4
   148b8:	mov	r2, r5
   148bc:	bl	14914 <__assert_fail@plt+0x3244>
   148c0:	cmp	r0, #0
   148c4:	bne	14880 <__assert_fail@plt+0x31b0>
   148c8:	ldr	r0, [sp, #16]
   148cc:	and	r0, r0, #61440	; 0xf000
   148d0:	cmp	r0, #16384	; 0x4000
   148d4:	bne	14904 <__assert_fail@plt+0x3234>
   148d8:	bic	r6, r6, #16384	; 0x4000
   148dc:	cmp	r7, r6
   148e0:	beq	148fc <__assert_fail@plt+0x322c>
   148e4:	mov	r0, r5
   148e8:	mov	r1, #4
   148ec:	mov	r2, r6
   148f0:	bl	16980 <__assert_fail@plt+0x52b0>
   148f4:	cmn	r0, #1
   148f8:	beq	14880 <__assert_fail@plt+0x31b0>
   148fc:	sub	sp, fp, #24
   14900:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14904:	bl	11598 <__errno_location@plt>
   14908:	mov	r1, #20
   1490c:	str	r1, [r0]
   14910:	b	14880 <__assert_fail@plt+0x31b0>
   14914:	sub	sp, sp, #4
   14918:	push	{r4, r5, r6, r7, fp, lr}
   1491c:	add	fp, sp, #16
   14920:	sub	sp, sp, #4
   14924:	movw	r7, #62448	; 0xf3f0
   14928:	mov	r6, r0
   1492c:	mov	r4, r2
   14930:	mov	r5, r1
   14934:	str	r3, [fp, #8]
   14938:	movt	r7, #2
   1493c:	ldr	r0, [r7]
   14940:	cmp	r0, #1
   14944:	blt	1497c <__assert_fail@plt+0x32ac>
   14948:	movw	r0, #61904	; 0xf1d0
   1494c:	movt	r0, #2
   14950:	ldr	r0, [r0]
   14954:	ldr	r1, [r0, #20]
   14958:	ldr	r2, [r0, #24]
   1495c:	cmp	r1, r2
   14960:	bcs	149a4 <__assert_fail@plt+0x32d4>
   14964:	add	r2, r1, #1
   14968:	str	r2, [r0, #20]
   1496c:	mov	r0, #10
   14970:	strb	r0, [r1]
   14974:	mov	r0, #0
   14978:	str	r0, [r7]
   1497c:	add	r3, fp, #8
   14980:	mov	r0, r6
   14984:	mov	r1, r5
   14988:	mov	r2, r4
   1498c:	str	r3, [sp]
   14990:	bl	1974c <__assert_fail@plt+0x807c>
   14994:	sub	sp, fp, #16
   14998:	pop	{r4, r5, r6, r7, fp, lr}
   1499c:	add	sp, sp, #4
   149a0:	bx	lr
   149a4:	mov	r1, #10
   149a8:	bl	11628 <__overflow@plt>
   149ac:	b	14974 <__assert_fail@plt+0x32a4>
   149b0:	push	{r4, r5, r6, sl, fp, lr}
   149b4:	add	fp, sp, #16
   149b8:	movw	r0, #62228	; 0xf314
   149bc:	mov	r4, #0
   149c0:	movt	r0, #2
   149c4:	ldr	r6, [r0]
   149c8:	bic	r1, r6, #49152	; 0xc000
   149cc:	tst	r6, #16384	; 0x4000
   149d0:	str	r1, [r0]
   149d4:	beq	14a68 <__assert_fail@plt+0x3398>
   149d8:	bl	152ac <__assert_fail@plt+0x3bdc>
   149dc:	mov	r0, #1
   149e0:	bl	11694 <fdatasync@plt>
   149e4:	cmn	r0, #1
   149e8:	bgt	14a00 <__assert_fail@plt+0x3330>
   149ec:	bl	11598 <__errno_location@plt>
   149f0:	ldr	r5, [r0]
   149f4:	cmp	r5, #4
   149f8:	beq	149d8 <__assert_fail@plt+0x3308>
   149fc:	b	14a10 <__assert_fail@plt+0x3340>
   14a00:	cmp	r0, #0
   14a04:	beq	14a68 <__assert_fail@plt+0x3398>
   14a08:	bl	11598 <__errno_location@plt>
   14a0c:	ldr	r5, [r0]
   14a10:	cmp	r5, #22
   14a14:	mov	r4, #0
   14a18:	cmpne	r5, #38	; 0x26
   14a1c:	beq	14a64 <__assert_fail@plt+0x3394>
   14a20:	movw	r1, #54774	; 0xd5f6
   14a24:	mov	r0, #0
   14a28:	mov	r2, #5
   14a2c:	movt	r1, #1
   14a30:	bl	11430 <dcgettext@plt>
   14a34:	mov	r4, r0
   14a38:	movw	r0, #62220	; 0xf30c
   14a3c:	movt	r0, #2
   14a40:	ldr	r1, [r0]
   14a44:	mov	r0, #4
   14a48:	bl	190ec <__assert_fail@plt+0x7a1c>
   14a4c:	mov	r3, r0
   14a50:	mov	r0, #0
   14a54:	mov	r1, r5
   14a58:	mov	r2, r4
   14a5c:	bl	14914 <__assert_fail@plt+0x3244>
   14a60:	mov	r4, #1
   14a64:	orr	r6, r6, #32768	; 0x8000
   14a68:	tst	r6, #32768	; 0x8000
   14a6c:	beq	14aec <__assert_fail@plt+0x341c>
   14a70:	bl	152ac <__assert_fail@plt+0x3bdc>
   14a74:	mov	r0, #1
   14a78:	bl	1137c <fsync@plt>
   14a7c:	cmn	r0, #1
   14a80:	bgt	14a98 <__assert_fail@plt+0x33c8>
   14a84:	bl	11598 <__errno_location@plt>
   14a88:	ldr	r1, [r0]
   14a8c:	cmp	r1, #4
   14a90:	beq	14a70 <__assert_fail@plt+0x33a0>
   14a94:	b	14aa4 <__assert_fail@plt+0x33d4>
   14a98:	cmp	r0, #0
   14a9c:	beq	14aec <__assert_fail@plt+0x341c>
   14aa0:	bl	11598 <__errno_location@plt>
   14aa4:	ldr	r4, [r0]
   14aa8:	movw	r1, #54798	; 0xd60e
   14aac:	mov	r0, #0
   14ab0:	mov	r2, #5
   14ab4:	movt	r1, #1
   14ab8:	bl	11430 <dcgettext@plt>
   14abc:	mov	r5, r0
   14ac0:	movw	r0, #62220	; 0xf30c
   14ac4:	movt	r0, #2
   14ac8:	ldr	r1, [r0]
   14acc:	mov	r0, #4
   14ad0:	bl	190ec <__assert_fail@plt+0x7a1c>
   14ad4:	mov	r3, r0
   14ad8:	mov	r0, #0
   14adc:	mov	r1, r4
   14ae0:	mov	r2, r5
   14ae4:	bl	14914 <__assert_fail@plt+0x3244>
   14ae8:	mov	r4, #1
   14aec:	mov	r0, r4
   14af0:	pop	{r4, r5, r6, sl, fp, pc}
   14af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14af8:	add	fp, sp, #28
   14afc:	sub	sp, sp, #20
   14b00:	mov	sl, r0
   14b04:	movw	r1, #62536	; 0xf448
   14b08:	movw	r0, #62544	; 0xf450
   14b0c:	movw	r5, #62279	; 0xf347
   14b10:	movt	r1, #2
   14b14:	movt	r0, #2
   14b18:	cmp	sl, #0
   14b1c:	movt	r5, #2
   14b20:	moveq	r0, r1
   14b24:	movw	r1, #62278	; 0xf346
   14b28:	cmp	sl, #0
   14b2c:	movt	r1, #2
   14b30:	ldr	r8, [r0]
   14b34:	ldr	r7, [r0, #4]
   14b38:	moveq	r5, r1
   14b3c:	orrs	lr, r2, r3
   14b40:	ldrb	ip, [r5]
   14b44:	beq	14bd4 <__assert_fail@plt+0x3504>
   14b48:	cmn	r7, #1
   14b4c:	mov	r6, #0
   14b50:	mov	r5, #0
   14b54:	mov	r9, #1
   14b58:	movwgt	r6, #1
   14b5c:	adds	r1, r8, r2
   14b60:	adc	r4, r7, r3
   14b64:	mov	r7, #0
   14b68:	cmn	r4, #1
   14b6c:	movwgt	r7, #1
   14b70:	subs	r7, r6, r7
   14b74:	movwne	r7, #1
   14b78:	cmn	r3, #1
   14b7c:	movwgt	r5, #1
   14b80:	sub	r6, r6, r5
   14b84:	clz	r6, r6
   14b88:	lsr	r6, r6, #5
   14b8c:	ands	r7, r6, r7
   14b90:	mvnne	r4, #-2147483648	; 0x80000000
   14b94:	mvnne	r1, #0
   14b98:	asr	r7, r4, #31
   14b9c:	adds	r5, r1, r7, lsr #15
   14ba0:	bfc	r5, #0, #17
   14ba4:	adc	r6, r4, #0
   14ba8:	subs	r8, r1, r5
   14bac:	sbc	r7, r4, r6
   14bb0:	str	r8, [r0]
   14bb4:	str	r7, [r0, #4]
   14bb8:	orrs	r0, r5, r6
   14bbc:	beq	14c58 <__assert_fail@plt+0x3588>
   14bc0:	subs	r0, r8, r1
   14bc4:	sbcs	r0, r7, r4
   14bc8:	mov	r0, #1
   14bcc:	blt	14be4 <__assert_fail@plt+0x3514>
   14bd0:	b	14d94 <__assert_fail@plt+0x36c4>
   14bd4:	orrs	r9, r8, r7
   14bd8:	mov	r5, r8
   14bdc:	mov	r6, r7
   14be0:	movwne	r9, #1
   14be4:	tst	ip, #255	; 0xff
   14be8:	orreq	r1, r5, r2
   14bec:	orreq	r2, r6, r3
   14bf0:	moveq	r0, #1
   14bf4:	orrseq	r1, r1, r2
   14bf8:	beq	14d94 <__assert_fail@plt+0x36c4>
   14bfc:	cmp	lr, #0
   14c00:	mvn	r4, #0
   14c04:	moveq	r7, lr
   14c08:	moveq	r8, lr
   14c0c:	cmp	sl, #0
   14c10:	beq	14c64 <__assert_fail@plt+0x3594>
   14c14:	movw	r0, #61792	; 0xf160
   14c18:	movt	r0, #2
   14c1c:	ldrd	r2, [r0]
   14c20:	eor	r0, r3, r4
   14c24:	eor	r1, r2, r4
   14c28:	orrs	r0, r1, r0
   14c2c:	mov	r0, #0
   14c30:	beq	14d94 <__assert_fail@plt+0x36c4>
   14c34:	cmn	r3, #1
   14c38:	ble	14ca0 <__assert_fail@plt+0x35d0>
   14c3c:	cmp	lr, #0
   14c40:	beq	14cf0 <__assert_fail@plt+0x3620>
   14c44:	adds	r0, r8, r5
   14c48:	adc	r1, r7, r6
   14c4c:	adds	r2, r0, r2
   14c50:	adc	r3, r1, r3
   14c54:	b	14cd4 <__assert_fail@plt+0x3604>
   14c58:	mov	r0, #1
   14c5c:	sub	sp, fp, #28
   14c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c64:	movw	r0, #62200	; 0xf2f8
   14c68:	movt	r0, #2
   14c6c:	ldrb	r0, [r0]
   14c70:	cmp	r0, #0
   14c74:	beq	14c88 <__assert_fail@plt+0x35b8>
   14c78:	movw	r0, #62208	; 0xf300
   14c7c:	movt	r0, #2
   14c80:	ldrd	r2, [r0]
   14c84:	b	14ce0 <__assert_fail@plt+0x3610>
   14c88:	bl	11598 <__errno_location@plt>
   14c8c:	mov	r1, #29
   14c90:	str	r1, [r0]
   14c94:	mov	r0, #0
   14c98:	sub	sp, fp, #28
   14c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ca0:	mov	r0, #1
   14ca4:	mov	r2, #0
   14ca8:	mov	r3, #0
   14cac:	str	ip, [sp, #16]
   14cb0:	mov	r4, lr
   14cb4:	str	r0, [sp]
   14cb8:	mov	r0, sl
   14cbc:	bl	1149c <lseek64@plt>
   14cc0:	ldr	ip, [sp, #16]
   14cc4:	mov	lr, r4
   14cc8:	mvn	r4, #0
   14ccc:	mov	r2, r0
   14cd0:	mov	r3, r1
   14cd4:	movw	r0, #61792	; 0xf160
   14cd8:	movt	r0, #2
   14cdc:	strd	r2, [r0]
   14ce0:	subs	r1, r4, r2
   14ce4:	mov	r0, #0
   14ce8:	sbcs	r1, r4, r3
   14cec:	bge	14d94 <__assert_fail@plt+0x36c4>
   14cf0:	clz	r0, lr
   14cf4:	uxtb	r1, ip
   14cf8:	mov	r4, r6
   14cfc:	lsr	r0, r0, #5
   14d00:	cmp	r1, #0
   14d04:	and	r0, r0, r9
   14d08:	movwne	r1, #1
   14d0c:	mov	r9, r5
   14d10:	ands	r0, r1, r0
   14d14:	movwne	r9, #0
   14d18:	movwne	r4, #0
   14d1c:	subs	r1, r2, r9
   14d20:	sbc	r2, r3, r4
   14d24:	cmp	r0, #0
   14d28:	movne	r8, r5
   14d2c:	movne	r7, r6
   14d30:	subs	r5, r1, r8
   14d34:	sbc	r6, r2, r7
   14d38:	orrs	r0, r9, r4
   14d3c:	bne	14d64 <__assert_fail@plt+0x3694>
   14d40:	movw	r0, #61920	; 0xf1e0
   14d44:	mov	r1, r6
   14d48:	movt	r0, #2
   14d4c:	ldr	r2, [r0]
   14d50:	mov	r0, r5
   14d54:	asr	r3, r2, #31
   14d58:	bl	1be94 <__assert_fail@plt+0xa7c4>
   14d5c:	subs	r5, r5, r2
   14d60:	sbc	r6, r6, r3
   14d64:	mov	r0, #4
   14d68:	mov	r2, r5
   14d6c:	mov	r3, r6
   14d70:	str	r9, [sp]
   14d74:	str	r4, [sp, #4]
   14d78:	str	r0, [sp, #8]
   14d7c:	mov	r0, sl
   14d80:	bl	11394 <posix_fadvise64@plt>
   14d84:	mov	r1, r0
   14d88:	add	r0, r0, #1
   14d8c:	cmn	r1, #1
   14d90:	movwne	r0, #1
   14d94:	sub	sp, fp, #28
   14d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d9c:	push	{fp, lr}
   14da0:	mov	fp, sp
   14da4:	bl	152ac <__assert_fail@plt+0x3bdc>
   14da8:	bl	15348 <__assert_fail@plt+0x3c78>
   14dac:	pop	{fp, lr}
   14db0:	b	15454 <__assert_fail@plt+0x3d84>
   14db4:	movw	r0, #62408	; 0xf3c8
   14db8:	movt	r0, #2
   14dbc:	ldr	r1, [r0]
   14dc0:	add	r1, r1, #1
   14dc4:	str	r1, [r0]
   14dc8:	bx	lr
   14dcc:	movw	r1, #62412	; 0xf3cc
   14dd0:	movt	r1, #2
   14dd4:	str	r0, [r1]
   14dd8:	bx	lr
   14ddc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14de0:	add	fp, sp, #24
   14de4:	sub	sp, sp, #8
   14de8:	mov	r8, r3
   14dec:	mov	r9, r2
   14df0:	mov	r7, r1
   14df4:	mov	r4, r0
   14df8:	mov	r5, #0
   14dfc:	mov	r0, r4
   14e00:	mov	r1, #44	; 0x2c
   14e04:	bl	11580 <strchr@plt>
   14e08:	mov	r2, r7
   14e0c:	mov	r1, #0
   14e10:	ldrb	r3, [r2, r1]
   14e14:	cmp	r3, #0
   14e18:	beq	14e30 <__assert_fail@plt+0x3760>
   14e1c:	ldrb	r6, [r4, r1]
   14e20:	add	r1, r1, #1
   14e24:	cmp	r6, r3
   14e28:	beq	14e10 <__assert_fail@plt+0x3740>
   14e2c:	b	14e4c <__assert_fail@plt+0x377c>
   14e30:	ldrb	r1, [r4, r1]
   14e34:	cmp	r1, #44	; 0x2c
   14e38:	cmpne	r1, #0
   14e3c:	bne	14e4c <__assert_fail@plt+0x377c>
   14e40:	ldr	r1, [r2, #12]
   14e44:	cmp	r1, #0
   14e48:	bne	14e5c <__assert_fail@plt+0x378c>
   14e4c:	ldrb	r1, [r2], #16
   14e50:	cmp	r1, #0
   14e54:	bne	14e0c <__assert_fail@plt+0x373c>
   14e58:	b	14e80 <__assert_fail@plt+0x37b0>
   14e5c:	cmp	r9, #0
   14e60:	add	r4, r0, #1
   14e64:	orreq	r1, r1, r5
   14e68:	cmp	r0, #0
   14e6c:	mov	r5, r1
   14e70:	bne	14dfc <__assert_fail@plt+0x372c>
   14e74:	mov	r0, r1
   14e78:	sub	sp, fp, #24
   14e7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e80:	cmp	r0, #0
   14e84:	bne	14e98 <__assert_fail@plt+0x37c8>
   14e88:	mov	r0, r4
   14e8c:	bl	11574 <strlen@plt>
   14e90:	mov	r6, r0
   14e94:	b	14e9c <__assert_fail@plt+0x37cc>
   14e98:	sub	r6, r0, r4
   14e9c:	mov	r0, #0
   14ea0:	mov	r1, r8
   14ea4:	mov	r2, #5
   14ea8:	bl	11430 <dcgettext@plt>
   14eac:	mov	r5, r0
   14eb0:	mov	r0, #0
   14eb4:	mov	r1, #8
   14eb8:	mov	r2, r4
   14ebc:	mov	r3, r6
   14ec0:	bl	19098 <__assert_fail@plt+0x79c8>
   14ec4:	movw	r2, #53655	; 0xd197
   14ec8:	str	r0, [sp]
   14ecc:	mov	r0, #0
   14ed0:	mov	r1, #0
   14ed4:	mov	r3, r5
   14ed8:	movt	r2, #1
   14edc:	bl	14914 <__assert_fail@plt+0x3244>
   14ee0:	mov	r0, #1
   14ee4:	bl	117d0 <__assert_fail@plt+0x100>
   14ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eec:	add	fp, sp, #28
   14ef0:	sub	sp, sp, #28
   14ef4:	mov	r6, r0
   14ef8:	mov	r0, #0
   14efc:	mov	r8, r1
   14f00:	add	r1, sp, #12
   14f04:	add	r3, sp, #16
   14f08:	mov	r2, #10
   14f0c:	str	r0, [sp, #20]
   14f10:	str	r0, [sp, #16]
   14f14:	movw	r0, #53886	; 0xd27e
   14f18:	movt	r0, #1
   14f1c:	str	r0, [sp]
   14f20:	mov	r0, r6
   14f24:	bl	1a480 <__assert_fail@plt+0x8db0>
   14f28:	mov	r7, r0
   14f2c:	bic	r0, r0, #1
   14f30:	cmp	r0, #2
   14f34:	bne	14f7c <__assert_fail@plt+0x38ac>
   14f38:	ldr	r0, [sp, #12]
   14f3c:	ldrb	r1, [r0]
   14f40:	cmp	r1, #120	; 0x78
   14f44:	bne	14f7c <__assert_fail@plt+0x38ac>
   14f48:	mov	r1, #0
   14f4c:	add	r0, r0, #1
   14f50:	str	r1, [sp, #8]
   14f54:	add	r1, sp, #8
   14f58:	bl	14ee8 <__assert_fail@plt+0x3818>
   14f5c:	ldr	sl, [sp, #8]
   14f60:	mov	r9, r0
   14f64:	mov	r5, r1
   14f68:	cmp	sl, #2
   14f6c:	bcc	14fa0 <__assert_fail@plt+0x38d0>
   14f70:	str	sl, [r8]
   14f74:	mov	r4, r9
   14f78:	b	150e4 <__assert_fail@plt+0x3a14>
   14f7c:	ldr	r5, [sp, #20]
   14f80:	cmn	r5, #1
   14f84:	ble	14f98 <__assert_fail@plt+0x38c8>
   14f88:	ldr	r4, [sp, #16]
   14f8c:	cmp	r7, #0
   14f90:	strne	r7, [r8]
   14f94:	b	150e4 <__assert_fail@plt+0x3a14>
   14f98:	orr	r0, r7, #1
   14f9c:	b	150d8 <__assert_fail@plt+0x3a08>
   14fa0:	cmn	r5, #1
   14fa4:	ble	14fd4 <__assert_fail@plt+0x3904>
   14fa8:	ldr	r4, [sp, #16]
   14fac:	ldr	r2, [sp, #20]
   14fb0:	orrs	r0, r9, r5
   14fb4:	beq	15010 <__assert_fail@plt+0x3940>
   14fb8:	str	r2, [sp, #4]
   14fbc:	mvn	r0, #0
   14fc0:	mvn	r1, #-2147483648	; 0x80000000
   14fc4:	mov	r2, r9
   14fc8:	mov	r3, r5
   14fcc:	bl	1bf68 <__assert_fail@plt+0xa898>
   14fd0:	b	15000 <__assert_fail@plt+0x3930>
   14fd4:	ldr	r4, [sp, #16]
   14fd8:	ldr	r2, [sp, #20]
   14fdc:	and	r0, r9, r5
   14fe0:	cmn	r0, #1
   14fe4:	beq	150bc <__assert_fail@plt+0x39ec>
   14fe8:	str	r2, [sp, #4]
   14fec:	mov	r0, #0
   14ff0:	mov	r1, #-2147483648	; 0x80000000
   14ff4:	mov	r2, r9
   14ff8:	mov	r3, r5
   14ffc:	bl	1be94 <__assert_fail@plt+0xa7c4>
   15000:	ldr	r2, [sp, #4]
   15004:	subs	r0, r0, r4
   15008:	sbcs	r0, r1, r2
   1500c:	bcc	150d4 <__assert_fail@plt+0x3a04>
   15010:	mov	r1, r4
   15014:	umull	r4, r0, r4, r9
   15018:	mla	r0, r1, r5, r0
   1501c:	mla	r5, r2, r9, r0
   15020:	orrs	r0, r4, r5
   15024:	beq	15038 <__assert_fail@plt+0x3968>
   15028:	orr	r0, sl, r7
   1502c:	tst	r0, #1
   15030:	bne	150d4 <__assert_fail@plt+0x3a04>
   15034:	b	150e4 <__assert_fail@plt+0x3a14>
   15038:	movw	r1, #53962	; 0xd2ca
   1503c:	mov	r0, r6
   15040:	mov	r2, #2
   15044:	movt	r1, #1
   15048:	bl	11688 <strncmp@plt>
   1504c:	mov	r4, #0
   15050:	cmp	r0, #0
   15054:	mov	r5, #0
   15058:	bne	150e4 <__assert_fail@plt+0x3a14>
   1505c:	movw	r1, #53900	; 0xd28c
   15060:	mov	r0, #0
   15064:	mov	r2, #5
   15068:	mov	r4, #0
   1506c:	movt	r1, #1
   15070:	bl	11430 <dcgettext@plt>
   15074:	movw	r1, #53962	; 0xd2ca
   15078:	mov	r5, r0
   1507c:	mov	r0, #0
   15080:	movt	r1, #1
   15084:	bl	19604 <__assert_fail@plt+0x7f34>
   15088:	movw	r1, #53961	; 0xd2c9
   1508c:	mov	r6, r0
   15090:	mov	r0, #1
   15094:	movt	r1, #1
   15098:	bl	19604 <__assert_fail@plt+0x7f34>
   1509c:	str	r0, [sp]
   150a0:	mov	r0, #0
   150a4:	mov	r1, #0
   150a8:	mov	r2, r5
   150ac:	mov	r3, r6
   150b0:	bl	14914 <__assert_fail@plt+0x3244>
   150b4:	mov	r5, #0
   150b8:	b	150e4 <__assert_fail@plt+0x3a14>
   150bc:	subs	r0, r4, #1
   150c0:	sbc	r0, r2, #0
   150c4:	orrs	r1, r4, r2
   150c8:	beq	15010 <__assert_fail@plt+0x3940>
   150cc:	cmp	r0, #0
   150d0:	bge	15010 <__assert_fail@plt+0x3940>
   150d4:	mov	r0, #1
   150d8:	str	r0, [r8]
   150dc:	mvn	r5, #-2147483648	; 0x80000000
   150e0:	mvn	r4, #0
   150e4:	mov	r0, r4
   150e8:	mov	r1, r5
   150ec:	sub	sp, fp, #28
   150f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f4:	push	{r4, r5, r6, r7, fp, lr}
   150f8:	add	fp, sp, #16
   150fc:	cmp	r2, #1
   15100:	blt	1514c <__assert_fail@plt+0x3a7c>
   15104:	mov	r5, r2
   15108:	mov	r6, r1
   1510c:	mov	r7, r0
   15110:	mov	r4, #0
   15114:	mov	r0, r7
   15118:	mov	r1, r6
   1511c:	mov	r2, r5
   15120:	bl	15158 <__assert_fail@plt+0x3a88>
   15124:	cmp	r0, #0
   15128:	poplt	{r4, r5, r6, r7, fp, pc}
   1512c:	beq	15144 <__assert_fail@plt+0x3a74>
   15130:	sub	r5, r5, r0
   15134:	add	r6, r6, r0
   15138:	add	r4, r0, r4
   1513c:	cmp	r5, #0
   15140:	bgt	15114 <__assert_fail@plt+0x3a44>
   15144:	mov	r0, r4
   15148:	pop	{r4, r5, r6, r7, fp, pc}
   1514c:	mov	r4, #0
   15150:	mov	r0, r4
   15154:	pop	{r4, r5, r6, r7, fp, pc}
   15158:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1515c:	add	fp, sp, #24
   15160:	sub	sp, sp, #8
   15164:	movw	r8, #62444	; 0xf3ec
   15168:	movw	r9, #62196	; 0xf2f4
   1516c:	mov	r5, r2
   15170:	mov	r6, r1
   15174:	mov	r7, r0
   15178:	movt	r8, #2
   1517c:	movt	r9, #2
   15180:	bl	152ac <__assert_fail@plt+0x3bdc>
   15184:	mov	r0, r7
   15188:	mov	r1, r6
   1518c:	mov	r2, r5
   15190:	bl	113a0 <read@plt>
   15194:	mov	r4, r0
   15198:	cmn	r0, #1
   1519c:	beq	151ac <__assert_fail@plt+0x3adc>
   151a0:	bgt	151ec <__assert_fail@plt+0x3b1c>
   151a4:	bl	11598 <__errno_location@plt>
   151a8:	b	151dc <__assert_fail@plt+0x3b0c>
   151ac:	bl	11598 <__errno_location@plt>
   151b0:	ldr	r1, [r8]
   151b4:	cmp	r1, r5
   151b8:	bge	151dc <__assert_fail@plt+0x3b0c>
   151bc:	ldr	r2, [r0]
   151c0:	cmp	r2, #22
   151c4:	bne	151dc <__assert_fail@plt+0x3b0c>
   151c8:	cmp	r1, #1
   151cc:	blt	151dc <__assert_fail@plt+0x3b0c>
   151d0:	ldrb	r1, [r9, #2]
   151d4:	tst	r1, #1
   151d8:	bne	1528c <__assert_fail@plt+0x3bbc>
   151dc:	ldr	r0, [r0]
   151e0:	cmp	r0, #4
   151e4:	beq	15180 <__assert_fail@plt+0x3ab0>
   151e8:	b	1529c <__assert_fail@plt+0x3bcc>
   151ec:	cmp	r4, #0
   151f0:	beq	15204 <__assert_fail@plt+0x3b34>
   151f4:	cmp	r4, r5
   151f8:	bge	15204 <__assert_fail@plt+0x3b34>
   151fc:	bl	152ac <__assert_fail@plt+0x3bdc>
   15200:	b	1520c <__assert_fail@plt+0x3b3c>
   15204:	cmp	r4, #0
   15208:	beq	15298 <__assert_fail@plt+0x3bc8>
   1520c:	ldr	r6, [r8]
   15210:	cmp	r6, r5
   15214:	bge	1529c <__assert_fail@plt+0x3bcc>
   15218:	movw	r5, #62436	; 0xf3e4
   1521c:	movt	r5, #2
   15220:	ldrb	r0, [r5]
   15224:	cmp	r0, #0
   15228:	beq	1529c <__assert_fail@plt+0x3bcc>
   1522c:	cmp	r6, #1
   15230:	blt	1529c <__assert_fail@plt+0x3bcc>
   15234:	movw	r0, #61776	; 0xf150
   15238:	movt	r0, #2
   1523c:	ldr	r0, [r0]
   15240:	cmp	r0, #1
   15244:	beq	15280 <__assert_fail@plt+0x3bb0>
   15248:	movw	r1, #53965	; 0xd2cd
   1524c:	movw	r2, #54023	; 0xd307
   15250:	mov	r0, #5
   15254:	mov	r3, r6
   15258:	str	r0, [sp]
   1525c:	movt	r1, #1
   15260:	movt	r2, #1
   15264:	mov	r0, #0
   15268:	bl	116b8 <dcngettext@plt>
   1526c:	mov	r2, r0
   15270:	mov	r0, #0
   15274:	mov	r1, #0
   15278:	mov	r3, r6
   1527c:	bl	14914 <__assert_fail@plt+0x3244>
   15280:	mov	r0, #0
   15284:	strb	r0, [r5]
   15288:	b	1529c <__assert_fail@plt+0x3bcc>
   1528c:	mov	r4, #0
   15290:	str	r4, [r0]
   15294:	b	1529c <__assert_fail@plt+0x3bcc>
   15298:	mov	r4, #0
   1529c:	str	r4, [r8]
   152a0:	mov	r0, r4
   152a4:	sub	sp, fp, #24
   152a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152b0:	add	fp, sp, #24
   152b4:	sub	sp, sp, #128	; 0x80
   152b8:	movw	r7, #62412	; 0xf3cc
   152bc:	movw	r4, #62408	; 0xf3c8
   152c0:	movw	r8, #62280	; 0xf348
   152c4:	mov	r5, sp
   152c8:	movt	r7, #2
   152cc:	movt	r4, #2
   152d0:	movt	r8, #2
   152d4:	b	152e8 <__assert_fail@plt+0x3c18>
   152d8:	bl	15348 <__assert_fail@plt+0x3c78>
   152dc:	bl	15454 <__assert_fail@plt+0x3d84>
   152e0:	mov	r0, r6
   152e4:	bl	11370 <raise@plt>
   152e8:	ldr	r0, [r7]
   152ec:	cmp	r0, #0
   152f0:	bne	15304 <__assert_fail@plt+0x3c34>
   152f4:	ldr	r0, [r4]
   152f8:	cmp	r0, #0
   152fc:	subeq	sp, fp, #24
   15300:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15304:	mov	r0, #0
   15308:	mov	r1, r8
   1530c:	mov	r2, r5
   15310:	bl	113b8 <sigprocmask@plt>
   15314:	ldr	r6, [r7]
   15318:	ldr	r0, [r4]
   1531c:	mov	r1, r5
   15320:	mov	r2, #0
   15324:	cmp	r0, #0
   15328:	subne	r0, r0, #1
   1532c:	strne	r0, [r4]
   15330:	mov	r0, #2
   15334:	bl	113b8 <sigprocmask@plt>
   15338:	cmp	r6, #0
   1533c:	bne	152d8 <__assert_fail@plt+0x3c08>
   15340:	bl	15454 <__assert_fail@plt+0x3d84>
   15344:	b	152e8 <__assert_fail@plt+0x3c18>
   15348:	push	{r4, r5, fp, lr}
   1534c:	add	fp, sp, #8
   15350:	movw	r0, #62412	; 0xf3cc
   15354:	movt	r0, #2
   15358:	ldr	r0, [r0]
   1535c:	cmp	r0, #0
   15360:	bne	15370 <__assert_fail@plt+0x3ca0>
   15364:	bl	149b0 <__assert_fail@plt+0x32e0>
   15368:	cmp	r0, #0
   1536c:	bne	15450 <__assert_fail@plt+0x3d80>
   15370:	mov	r0, #0
   15374:	bl	116ac <close@plt>
   15378:	cmp	r0, #0
   1537c:	beq	153ac <__assert_fail@plt+0x3cdc>
   15380:	bl	11598 <__errno_location@plt>
   15384:	ldr	r4, [r0]
   15388:	mov	r5, r0
   1538c:	cmp	r4, #4
   15390:	bne	15410 <__assert_fail@plt+0x3d40>
   15394:	mov	r0, #0
   15398:	bl	116ac <close@plt>
   1539c:	cmp	r0, #0
   153a0:	ldrne	r4, [r5]
   153a4:	cmpne	r4, #9
   153a8:	bne	1538c <__assert_fail@plt+0x3cbc>
   153ac:	mov	r0, #1
   153b0:	bl	116ac <close@plt>
   153b4:	cmp	r0, #0
   153b8:	popeq	{r4, r5, fp, pc}
   153bc:	bl	11598 <__errno_location@plt>
   153c0:	ldr	r4, [r0]
   153c4:	mov	r5, r0
   153c8:	cmp	r4, #4
   153cc:	bne	153ec <__assert_fail@plt+0x3d1c>
   153d0:	mov	r0, #1
   153d4:	bl	116ac <close@plt>
   153d8:	cmp	r0, #0
   153dc:	ldrne	r4, [r5]
   153e0:	cmpne	r4, #9
   153e4:	bne	153c8 <__assert_fail@plt+0x3cf8>
   153e8:	pop	{r4, r5, fp, pc}
   153ec:	movw	r1, #54104	; 0xd358
   153f0:	mov	r0, #0
   153f4:	mov	r2, #5
   153f8:	movt	r1, #1
   153fc:	bl	11430 <dcgettext@plt>
   15400:	mov	r5, r0
   15404:	movw	r0, #62220	; 0xf30c
   15408:	movt	r0, #2
   1540c:	b	15430 <__assert_fail@plt+0x3d60>
   15410:	movw	r1, #54082	; 0xd342
   15414:	mov	r0, #0
   15418:	mov	r2, #5
   1541c:	movt	r1, #1
   15420:	bl	11430 <dcgettext@plt>
   15424:	mov	r5, r0
   15428:	movw	r0, #62192	; 0xf2f0
   1542c:	movt	r0, #2
   15430:	ldr	r1, [r0]
   15434:	mov	r0, #4
   15438:	bl	190ec <__assert_fail@plt+0x7a1c>
   1543c:	mov	r3, r0
   15440:	mov	r0, #1
   15444:	mov	r1, r4
   15448:	mov	r2, r5
   1544c:	bl	14914 <__assert_fail@plt+0x3244>
   15450:	bl	11568 <exit@plt>
   15454:	movw	r0, #61776	; 0xf150
   15458:	movt	r0, #2
   1545c:	ldr	r0, [r0]
   15460:	cmp	r0, #1
   15464:	bxeq	lr
   15468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1546c:	add	fp, sp, #28
   15470:	sub	sp, sp, #36	; 0x24
   15474:	movw	r4, #62448	; 0xf3f0
   15478:	movt	r4, #2
   1547c:	ldr	r0, [r4]
   15480:	cmp	r0, #1
   15484:	blt	154bc <__assert_fail@plt+0x3dec>
   15488:	movw	r0, #61904	; 0xf1d0
   1548c:	movt	r0, #2
   15490:	ldr	r0, [r0]
   15494:	ldr	r1, [r0, #20]
   15498:	ldr	r2, [r0, #24]
   1549c:	cmp	r1, r2
   154a0:	bcs	155dc <__assert_fail@plt+0x3f0c>
   154a4:	add	r2, r1, #1
   154a8:	str	r2, [r0, #20]
   154ac:	mov	r0, #10
   154b0:	strb	r0, [r1]
   154b4:	mov	r0, #0
   154b8:	str	r0, [r4]
   154bc:	movw	sl, #61904	; 0xf1d0
   154c0:	movw	r1, #54127	; 0xd36f
   154c4:	mov	r0, #0
   154c8:	mov	r2, #5
   154cc:	movt	sl, #2
   154d0:	movt	r1, #1
   154d4:	ldr	r4, [sl]
   154d8:	bl	11430 <dcgettext@plt>
   154dc:	movw	r3, #62464	; 0xf400
   154e0:	mov	r2, r0
   154e4:	movw	r0, #62456	; 0xf3f8
   154e8:	movw	r6, #62480	; 0xf410
   154ec:	movt	r3, #2
   154f0:	movt	r0, #2
   154f4:	movt	r6, #2
   154f8:	ldrd	r8, [r3]
   154fc:	movw	r3, #62472	; 0xf408
   15500:	ldrd	r0, [r0]
   15504:	movt	r3, #2
   15508:	ldm	r3, {r3, r7}
   1550c:	ldr	r5, [r6, #4]
   15510:	ldr	r6, [r6]
   15514:	stm	sp, {r0, r1, r8, r9}
   15518:	mov	r0, r4
   1551c:	mov	r1, #1
   15520:	str	r3, [sp, #16]
   15524:	str	r7, [sp, #20]
   15528:	str	r6, [sp, #24]
   1552c:	str	r5, [sp, #28]
   15530:	bl	115f8 <__fprintf_chk@plt>
   15534:	movw	r7, #62488	; 0xf418
   15538:	movt	r7, #2
   1553c:	ldrd	r8, [r7]
   15540:	orrs	r0, r8, r9
   15544:	beq	155b0 <__assert_fail@plt+0x3ee0>
   15548:	ldr	r4, [sl]
   1554c:	cmp	r9, #0
   15550:	beq	15574 <__assert_fail@plt+0x3ea4>
   15554:	movw	r5, #16960	; 0x4240
   15558:	mov	r0, r8
   1555c:	mov	r1, r9
   15560:	mov	r3, #0
   15564:	movt	r5, #15
   15568:	mov	r2, r5
   1556c:	bl	1bf68 <__assert_fail@plt+0xa898>
   15570:	add	r8, r2, r5
   15574:	movw	r1, #54171	; 0xd39b
   15578:	movw	r2, #54194	; 0xd3b2
   1557c:	mov	r0, #5
   15580:	mov	r3, r8
   15584:	str	r0, [sp]
   15588:	movt	r1, #1
   1558c:	movt	r2, #1
   15590:	mov	r0, #0
   15594:	bl	116b8 <dcngettext@plt>
   15598:	mov	r2, r0
   1559c:	ldrd	r0, [r7]
   155a0:	stm	sp, {r0, r1}
   155a4:	mov	r0, r4
   155a8:	mov	r1, #1
   155ac:	bl	115f8 <__fprintf_chk@plt>
   155b0:	movw	r0, #61776	; 0xf150
   155b4:	movt	r0, #2
   155b8:	ldr	r0, [r0]
   155bc:	cmp	r0, #2
   155c0:	sub	sp, fp, #28
   155c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c8:	bne	155d0 <__assert_fail@plt+0x3f00>
   155cc:	bx	lr
   155d0:	mov	r0, #0
   155d4:	mov	r1, #0
   155d8:	b	155e8 <__assert_fail@plt+0x3f18>
   155dc:	mov	r1, #10
   155e0:	bl	11628 <__overflow@plt>
   155e4:	b	154b4 <__assert_fail@plt+0x3de4>
   155e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155ec:	add	fp, sp, #28
   155f0:	sub	sp, sp, #4
   155f4:	vpush	{d8-d9}
   155f8:	sub	sp, sp, #2032	; 0x7f0
   155fc:	mov	r6, r0
   15600:	orrs	r0, r0, r1
   15604:	str	r0, [sp, #36]	; 0x24
   15608:	bne	15614 <__assert_fail@plt+0x3f44>
   1560c:	bl	16cc8 <__assert_fail@plt+0x55f8>
   15610:	mov	r6, r0
   15614:	movw	r9, #62496	; 0xf420
   15618:	mov	r7, r1
   1561c:	add	r4, sp, #66	; 0x42
   15620:	mov	r8, #0
   15624:	mov	r5, #1
   15628:	movw	r3, #465	; 0x1d1
   1562c:	movt	r9, #2
   15630:	mov	r2, r4
   15634:	ldrd	r0, [r9]
   15638:	stm	sp, {r5, r8}
   1563c:	str	r5, [sp, #8]
   15640:	str	r8, [sp, #12]
   15644:	bl	16d40 <__assert_fail@plt+0x5670>
   15648:	str	r0, [sp, #32]
   1564c:	ldrd	r0, [r9]
   15650:	movw	r2, #654	; 0x28e
   15654:	movw	r3, #497	; 0x1f1
   15658:	stm	sp, {r5, r8}
   1565c:	str	r5, [sp, #8]
   15660:	str	r8, [sp, #12]
   15664:	add	r2, r4, r2
   15668:	bl	16d40 <__assert_fail@plt+0x5670>
   1566c:	str	r0, [sp, #28]
   15670:	movw	r0, #1308	; 0x51c
   15674:	add	r4, r4, r0
   15678:	movw	r0, #62256	; 0xf330
   1567c:	movt	r0, #2
   15680:	ldrd	r0, [r0]
   15684:	subs	r2, r0, r6
   15688:	sbcs	r2, r1, r7
   1568c:	bge	156fc <__assert_fail@plt+0x402c>
   15690:	subs	r6, r6, r0
   15694:	sbc	r7, r7, r1
   15698:	mov	r0, r6
   1569c:	mov	r1, r7
   156a0:	bl	1be34 <__assert_fail@plt+0xa764>
   156a4:	mov	r2, r4
   156a8:	mov	r5, r0
   156ac:	mov	r4, r1
   156b0:	ldrd	r0, [r9]
   156b4:	movw	r3, #51712	; 0xca00
   156b8:	mov	sl, r9
   156bc:	movt	r3, #15258	; 0x3b9a
   156c0:	stm	sp, {r3, r8}
   156c4:	movw	r3, #465	; 0x1d1
   156c8:	str	r6, [sp, #8]
   156cc:	str	r7, [sp, #12]
   156d0:	bl	16d40 <__assert_fail@plt+0x5670>
   156d4:	vldr	d8, [pc, #684]	; 15988 <__assert_fail@plt+0x42b8>
   156d8:	vmov	d9, r5, r4
   156dc:	movw	r6, #29487	; 0x732f
   156e0:	mov	r4, r0
   156e4:	bl	11574 <strlen@plt>
   156e8:	mov	r1, r4
   156ec:	vdiv.f64	d8, d9, d8
   156f0:	strh	r6, [r1, r0]!
   156f4:	strb	r8, [r1, #2]
   156f8:	b	1573c <__assert_fail@plt+0x406c>
   156fc:	movw	r1, #54225	; 0xd3d1
   15700:	mov	r0, #0
   15704:	mov	r2, #5
   15708:	mov	sl, r9
   1570c:	movt	r1, #1
   15710:	bl	11430 <dcgettext@plt>
   15714:	movw	r1, #54218	; 0xd3ca
   15718:	str	r0, [sp, #4]
   1571c:	mov	r0, r4
   15720:	mov	r2, #1
   15724:	movw	r3, #654	; 0x28e
   15728:	movt	r1, #1
   1572c:	str	r1, [sp]
   15730:	movw	r1, #654	; 0x28e
   15734:	bl	116c4 <__snprintf_chk@plt>
   15738:	vmov.i32	d8, #0	; 0x00000000
   1573c:	ldr	r7, [sp, #36]	; 0x24
   15740:	ldr	r5, [sp, #32]
   15744:	ldr	r6, [sp, #28]
   15748:	cmp	r7, #0
   1574c:	beq	1577c <__assert_fail@plt+0x40ac>
   15750:	movw	r0, #61904	; 0xf1d0
   15754:	movt	r0, #2
   15758:	ldr	r0, [r0]
   1575c:	ldr	r1, [r0, #20]
   15760:	ldr	r2, [r0, #24]
   15764:	cmp	r1, r2
   15768:	bcs	1596c <__assert_fail@plt+0x429c>
   1576c:	add	r2, r1, #1
   15770:	str	r2, [r0, #20]
   15774:	mov	r0, #13
   15778:	strb	r0, [r1]
   1577c:	movw	r0, #54234	; 0xd3da
   15780:	movw	r1, #54241	; 0xd3e1
   15784:	cmp	r7, #0
   15788:	add	r8, sp, #42	; 0x2a
   1578c:	mov	r2, #1
   15790:	mov	r3, #24
   15794:	vstr	d8, [sp, #8]
   15798:	movt	r0, #1
   1579c:	movt	r1, #1
   157a0:	movne	r1, r0
   157a4:	mov	r0, r8
   157a8:	str	r1, [sp]
   157ac:	mov	r1, #24
   157b0:	bl	116c4 <__snprintf_chk@plt>
   157b4:	mov	r0, r5
   157b8:	bl	11574 <strlen@plt>
   157bc:	add	r0, r5, r0
   157c0:	ldrb	r0, [r0, #-2]
   157c4:	cmp	r0, #32
   157c8:	bne	15840 <__assert_fail@plt+0x4170>
   157cc:	movw	r0, #61904	; 0xf1d0
   157d0:	ldr	r6, [sl]
   157d4:	ldr	r1, [sl, #4]
   157d8:	movt	r0, #2
   157dc:	ldr	r5, [r0]
   157e0:	cmp	r1, #0
   157e4:	beq	15804 <__assert_fail@plt+0x4134>
   157e8:	movw	r9, #16960	; 0x4240
   157ec:	mov	r0, r6
   157f0:	mov	r3, #0
   157f4:	movt	r9, #15
   157f8:	mov	r2, r9
   157fc:	bl	1bf68 <__assert_fail@plt+0xa898>
   15800:	add	r6, r2, r9
   15804:	movw	r1, #54246	; 0xd3e6
   15808:	movw	r2, #54271	; 0xd3ff
   1580c:	mov	r0, #5
   15810:	mov	r3, r6
   15814:	str	r0, [sp]
   15818:	movt	r1, #1
   1581c:	movt	r2, #1
   15820:	mov	r0, #0
   15824:	bl	116b8 <dcngettext@plt>
   15828:	mov	r2, r0
   1582c:	ldrd	r0, [sl]
   15830:	stm	sp, {r0, r1, r8}
   15834:	str	r4, [sp, #12]
   15838:	mov	r0, r5
   1583c:	b	158b4 <__assert_fail@plt+0x41e4>
   15840:	mov	r0, r6
   15844:	bl	11574 <strlen@plt>
   15848:	add	r0, r6, r0
   1584c:	movw	r1, #61904	; 0xf1d0
   15850:	ldrb	r0, [r0, #-2]
   15854:	movt	r1, #2
   15858:	ldr	r9, [r1]
   1585c:	cmp	r0, #32
   15860:	bne	1588c <__assert_fail@plt+0x41bc>
   15864:	movw	r1, #54297	; 0xd419
   15868:	mov	r0, #0
   1586c:	mov	r2, #5
   15870:	movt	r1, #1
   15874:	bl	11430 <dcgettext@plt>
   15878:	mov	r2, r0
   1587c:	ldrd	r0, [sl]
   15880:	stm	sp, {r0, r1, r5, r8}
   15884:	str	r4, [sp, #16]
   15888:	b	158b0 <__assert_fail@plt+0x41e0>
   1588c:	movw	r1, #54328	; 0xd438
   15890:	mov	r0, #0
   15894:	mov	r2, #5
   15898:	movt	r1, #1
   1589c:	bl	11430 <dcgettext@plt>
   158a0:	mov	r2, r0
   158a4:	ldrd	r0, [sl]
   158a8:	stm	sp, {r0, r1, r5, r6, r8}
   158ac:	str	r4, [sp, #20]
   158b0:	mov	r0, r9
   158b4:	mov	r1, #1
   158b8:	bl	115f8 <__fprintf_chk@plt>
   158bc:	mov	r4, r0
   158c0:	cmp	r7, #0
   158c4:	beq	15920 <__assert_fail@plt+0x4250>
   158c8:	cmp	r4, #0
   158cc:	blt	15910 <__assert_fail@plt+0x4240>
   158d0:	movw	r0, #62448	; 0xf3f0
   158d4:	movt	r0, #2
   158d8:	ldr	r1, [r0]
   158dc:	cmp	r1, r4
   158e0:	ble	15910 <__assert_fail@plt+0x4240>
   158e4:	movw	r0, #61904	; 0xf1d0
   158e8:	movw	r2, #51037	; 0xc75d
   158ec:	sub	r3, r1, r4
   158f0:	mov	r1, #1
   158f4:	movt	r0, #2
   158f8:	movt	r2, #1
   158fc:	ldr	r0, [r0]
   15900:	str	r2, [sp]
   15904:	movw	r2, #54363	; 0xd45b
   15908:	movt	r2, #1
   1590c:	bl	115f8 <__fprintf_chk@plt>
   15910:	movw	r0, #62448	; 0xf3f0
   15914:	movt	r0, #2
   15918:	str	r4, [r0]
   1591c:	b	1594c <__assert_fail@plt+0x427c>
   15920:	movw	r0, #61904	; 0xf1d0
   15924:	movt	r0, #2
   15928:	ldr	r0, [r0]
   1592c:	ldr	r1, [r0, #20]
   15930:	ldr	r2, [r0, #24]
   15934:	cmp	r1, r2
   15938:	bcs	15978 <__assert_fail@plt+0x42a8>
   1593c:	add	r2, r1, #1
   15940:	str	r2, [r0, #20]
   15944:	mov	r0, #10
   15948:	strb	r0, [r1]
   1594c:	ldrd	r0, [sl]
   15950:	movw	r2, #61784	; 0xf158
   15954:	movt	r2, #2
   15958:	strd	r0, [r2]
   1595c:	sub	sp, fp, #48	; 0x30
   15960:	vpop	{d8-d9}
   15964:	add	sp, sp, #4
   15968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1596c:	mov	r1, #13
   15970:	bl	11628 <__overflow@plt>
   15974:	b	1577c <__assert_fail@plt+0x40ac>
   15978:	mov	r1, #10
   1597c:	bl	11628 <__overflow@plt>
   15980:	b	1594c <__assert_fail@plt+0x427c>
   15984:	nop	{0}
   15988:	andeq	r0, r0, r0
   1598c:	bicmi	ip, sp, r5, ror #26
   15990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15994:	add	fp, sp, #28
   15998:	sub	sp, sp, #124	; 0x7c
   1599c:	mov	r6, r3
   159a0:	mov	r5, r2
   159a4:	str	r1, [sp, #12]
   159a8:	mov	r9, r0
   159ac:	bl	11598 <__errno_location@plt>
   159b0:	ldr	r8, [fp, #8]
   159b4:	mov	sl, r0
   159b8:	mov	r0, #0
   159bc:	mvn	r4, #0
   159c0:	str	r0, [sl]
   159c4:	cmn	r8, #1
   159c8:	ble	159ec <__assert_fail@plt+0x431c>
   159cc:	cmp	r8, #0
   159d0:	beq	15a80 <__assert_fail@plt+0x43b0>
   159d4:	cmn	r6, #1
   159d8:	ble	15a24 <__assert_fail@plt+0x4354>
   159dc:	asr	r3, r8, #31
   159e0:	mvn	r0, #0
   159e4:	mvn	r1, #-2147483648	; 0x80000000
   159e8:	b	15a08 <__assert_fail@plt+0x4338>
   159ec:	cmn	r6, #1
   159f0:	ble	15a5c <__assert_fail@plt+0x438c>
   159f4:	cmn	r8, #1
   159f8:	beq	15a80 <__assert_fail@plt+0x43b0>
   159fc:	asr	r3, r8, #31
   15a00:	mov	r0, #0
   15a04:	mov	r1, #-2147483648	; 0x80000000
   15a08:	mov	r2, r8
   15a0c:	bl	1be94 <__assert_fail@plt+0xa7c4>
   15a10:	subs	r0, r0, r5
   15a14:	mov	ip, #0
   15a18:	sbcs	r0, r1, r6
   15a1c:	bge	15a80 <__assert_fail@plt+0x43b0>
   15a20:	b	15b80 <__assert_fail@plt+0x44b0>
   15a24:	eor	r0, r5, r4
   15a28:	eor	r1, r6, r4
   15a2c:	orrs	r0, r0, r1
   15a30:	beq	15a80 <__assert_fail@plt+0x43b0>
   15a34:	mov	r0, #0
   15a38:	mov	r1, #-2147483648	; 0x80000000
   15a3c:	mov	r2, r5
   15a40:	mov	r3, r6
   15a44:	bl	1be94 <__assert_fail@plt+0xa7c4>
   15a48:	subs	r0, r0, r8
   15a4c:	mov	ip, #0
   15a50:	sbcs	r0, r1, r8, asr #31
   15a54:	bge	15a80 <__assert_fail@plt+0x43b0>
   15a58:	b	15b80 <__assert_fail@plt+0x44b0>
   15a5c:	asr	r3, r8, #31
   15a60:	mvn	r0, #0
   15a64:	mvn	r1, #-2147483648	; 0x80000000
   15a68:	mov	r2, r8
   15a6c:	bl	1be94 <__assert_fail@plt+0xa7c4>
   15a70:	subs	r0, r5, r0
   15a74:	mov	ip, #0
   15a78:	sbcs	r0, r6, r1
   15a7c:	blt	15b80 <__assert_fail@plt+0x44b0>
   15a80:	ldr	r2, [fp, #12]
   15a84:	umull	r0, r1, r8, r5
   15a88:	asr	lr, r8, #31
   15a8c:	mov	ip, #0
   15a90:	mla	r1, r8, r6, r1
   15a94:	mla	r1, lr, r5, r1
   15a98:	ldr	r7, [r2]
   15a9c:	adds	r2, r0, r7
   15aa0:	mov	r0, #0
   15aa4:	adc	r3, r1, r7, asr #31
   15aa8:	asr	r7, r7, #31
   15aac:	cmn	r3, #1
   15ab0:	movwgt	r0, #1
   15ab4:	cmn	r1, #1
   15ab8:	mov	r1, #0
   15abc:	movwgt	r1, #1
   15ac0:	subs	r0, r1, r0
   15ac4:	movwne	r0, #1
   15ac8:	cmn	r7, #1
   15acc:	mov	r7, #0
   15ad0:	movwgt	r7, #1
   15ad4:	sub	r1, r1, r7
   15ad8:	clz	r1, r1
   15adc:	lsr	r1, r1, #5
   15ae0:	tst	r1, r0
   15ae4:	bne	15b80 <__assert_fail@plt+0x44b0>
   15ae8:	mov	r0, #1
   15aec:	str	lr, [sp, #4]
   15af0:	str	r2, [sp, #8]
   15af4:	mov	r7, r3
   15af8:	str	r0, [sp]
   15afc:	mov	r0, r9
   15b00:	bl	1149c <lseek64@plt>
   15b04:	subs	r0, r4, r0
   15b08:	sbcs	r0, r4, r1
   15b0c:	bge	15b7c <__assert_fail@plt+0x44ac>
   15b10:	cmp	r9, #0
   15b14:	bne	15cc4 <__assert_fail@plt+0x45f4>
   15b18:	add	r5, sp, #16
   15b1c:	bl	152ac <__assert_fail@plt+0x3bdc>
   15b20:	mov	r0, #3
   15b24:	mov	r1, #0
   15b28:	mov	r2, r5
   15b2c:	bl	11478 <__fxstat64@plt>
   15b30:	cmn	r0, #1
   15b34:	bgt	15ce4 <__assert_fail@plt+0x4614>
   15b38:	ldr	r4, [sl]
   15b3c:	cmp	r4, #4
   15b40:	beq	15b1c <__assert_fail@plt+0x444c>
   15b44:	movw	r1, #53064	; 0xcf48
   15b48:	mov	r0, #0
   15b4c:	mov	r2, #5
   15b50:	movt	r1, #1
   15b54:	bl	11430 <dcgettext@plt>
   15b58:	ldr	r1, [sp, #12]
   15b5c:	mov	r5, r0
   15b60:	mov	r0, #4
   15b64:	bl	190ec <__assert_fail@plt+0x7a1c>
   15b68:	mov	r3, r0
   15b6c:	mov	r0, #1
   15b70:	mov	r1, r4
   15b74:	mov	r2, r5
   15b78:	bl	14914 <__assert_fail@plt+0x3244>
   15b7c:	ldr	ip, [sl]
   15b80:	mov	r0, #2
   15b84:	mov	r2, #0
   15b88:	mov	r3, #0
   15b8c:	str	ip, [sp, #4]
   15b90:	str	r0, [sp]
   15b94:	mov	r0, r9
   15b98:	bl	1149c <lseek64@plt>
   15b9c:	subs	r0, r4, r0
   15ba0:	sbcs	r0, r4, r1
   15ba4:	blt	15e98 <__assert_fail@plt+0x47c8>
   15ba8:	cmp	r9, #0
   15bac:	str	sl, [sp, #8]
   15bb0:	beq	15bc4 <__assert_fail@plt+0x44f4>
   15bb4:	bl	162b4 <__assert_fail@plt+0x4be4>
   15bb8:	movw	r0, #62508	; 0xf42c
   15bbc:	movt	r0, #2
   15bc0:	b	15bd0 <__assert_fail@plt+0x4500>
   15bc4:	bl	161f4 <__assert_fail@plt+0x4b24>
   15bc8:	movw	r0, #62512	; 0xf430
   15bcc:	movt	r0, #2
   15bd0:	ldr	r7, [r0]
   15bd4:	movw	r0, #62440	; 0xf3e8
   15bd8:	orrs	sl, r5, r6
   15bdc:	mov	r2, r8
   15be0:	mov	r1, r7
   15be4:	movt	r0, #2
   15be8:	ldr	r3, [r0]
   15bec:	ldreq	r0, [fp, #12]
   15bf0:	ldreq	r2, [r0]
   15bf4:	mov	r0, r9
   15bf8:	blx	r3
   15bfc:	cmn	r0, #1
   15c00:	ble	15df4 <__assert_fail@plt+0x4724>
   15c04:	cmp	r0, #0
   15c08:	beq	15cd4 <__assert_fail@plt+0x4604>
   15c0c:	cmp	r9, #0
   15c10:	bne	15c94 <__assert_fail@plt+0x45c4>
   15c14:	movw	r1, #62208	; 0xf300
   15c18:	movt	r1, #2
   15c1c:	ldr	r2, [r1]
   15c20:	ldr	r1, [r1, #4]
   15c24:	subs	r3, r4, r2
   15c28:	sbcs	r3, r4, r1
   15c2c:	bge	15c94 <__assert_fail@plt+0x45c4>
   15c30:	cmn	r1, #1
   15c34:	mov	r3, #0
   15c38:	mov	r4, #0
   15c3c:	movwgt	r3, #1
   15c40:	adds	r2, r2, r0
   15c44:	adc	r1, r1, r0, asr #31
   15c48:	asr	r0, r0, #31
   15c4c:	cmn	r1, #1
   15c50:	movwgt	r4, #1
   15c54:	subs	r4, r3, r4
   15c58:	movwne	r4, #1
   15c5c:	cmn	r0, #1
   15c60:	mov	r0, #0
   15c64:	movwgt	r0, #1
   15c68:	sub	r0, r3, r0
   15c6c:	clz	r0, r0
   15c70:	lsr	r0, r0, #5
   15c74:	ands	r0, r0, r4
   15c78:	mvn	r4, #0
   15c7c:	movw	r0, #62208	; 0xf300
   15c80:	movne	r1, r4
   15c84:	movne	r2, r4
   15c88:	movt	r0, #2
   15c8c:	str	r2, [r0]
   15c90:	str	r1, [r0, #4]
   15c94:	cmp	sl, #0
   15c98:	beq	15cc4 <__assert_fail@plt+0x45f4>
   15c9c:	subs	r5, r5, #1
   15ca0:	sbc	r6, r6, #0
   15ca4:	orrs	r0, r5, r6
   15ca8:	bne	15bd4 <__assert_fail@plt+0x4504>
   15cac:	ldr	r0, [fp, #12]
   15cb0:	ldr	r0, [r0]
   15cb4:	cmp	r0, #0
   15cb8:	bne	15bd4 <__assert_fail@plt+0x4504>
   15cbc:	mov	r5, #0
   15cc0:	b	15cd0 <__assert_fail@plt+0x4600>
   15cc4:	ldr	r0, [fp, #12]
   15cc8:	mov	r5, #0
   15ccc:	str	r5, [r0]
   15cd0:	mov	r6, #0
   15cd4:	mov	r0, r5
   15cd8:	mov	r1, r6
   15cdc:	sub	sp, fp, #28
   15ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ce4:	cmp	r0, #0
   15ce8:	bne	15ef4 <__assert_fail@plt+0x4824>
   15cec:	ldr	r0, [sp, #32]
   15cf0:	ldr	lr, [sp, #8]
   15cf4:	mvn	r1, #0
   15cf8:	and	r0, r0, #53248	; 0xd000
   15cfc:	orr	r0, r0, #8192	; 0x2000
   15d00:	cmp	r0, #40960	; 0xa000
   15d04:	movw	r0, #62208	; 0xf300
   15d08:	movt	r0, #2
   15d0c:	bne	15d70 <__assert_fail@plt+0x46a0>
   15d10:	ldm	r0, {r4, r9}
   15d14:	mov	r5, #0
   15d18:	mov	r6, #0
   15d1c:	subs	r0, r1, r4
   15d20:	sbcs	r0, r1, r9
   15d24:	bge	15cd4 <__assert_fail@plt+0x4604>
   15d28:	ldr	r0, [sp, #64]	; 0x40
   15d2c:	ldr	r1, [sp, #68]	; 0x44
   15d30:	mov	r2, r8
   15d34:	mov	r5, #0
   15d38:	subs	r8, r0, r4
   15d3c:	sbc	sl, r1, r9
   15d40:	subs	r3, r8, lr
   15d44:	sbcs	r3, sl, r7
   15d48:	bge	15d90 <__assert_fail@plt+0x46c0>
   15d4c:	ldr	r3, [sp, #4]
   15d50:	subs	r0, lr, r0
   15d54:	sbc	r1, r7, r1
   15d58:	bl	1be94 <__assert_fail@plt+0xa7c4>
   15d5c:	mov	r5, r0
   15d60:	mov	r6, r1
   15d64:	mov	lr, r8
   15d68:	mov	r7, sl
   15d6c:	b	15d94 <__assert_fail@plt+0x46c4>
   15d70:	ldm	r0, {r4, r9}
   15d74:	mov	r5, #0
   15d78:	mov	r6, #0
   15d7c:	mvn	ip, #0
   15d80:	subs	r0, r1, r4
   15d84:	sbcs	r0, r1, r9
   15d88:	bge	15cd4 <__assert_fail@plt+0x4604>
   15d8c:	b	15d98 <__assert_fail@plt+0x46c8>
   15d90:	mov	r6, #0
   15d94:	mvn	ip, #0
   15d98:	cmn	r9, #1
   15d9c:	mov	r1, #0
   15da0:	mov	r0, #0
   15da4:	movwgt	r1, #1
   15da8:	adds	r2, r4, lr
   15dac:	mov	r4, #0
   15db0:	adc	r3, r9, r7
   15db4:	cmn	r3, #1
   15db8:	movwgt	r4, #1
   15dbc:	subs	r4, r1, r4
   15dc0:	movwne	r4, #1
   15dc4:	cmn	r7, #1
   15dc8:	movwgt	r0, #1
   15dcc:	sub	r0, r1, r0
   15dd0:	clz	r0, r0
   15dd4:	lsr	r0, r0, #5
   15dd8:	ands	r0, r0, r4
   15ddc:	movw	r0, #62208	; 0xf300
   15de0:	movne	r3, ip
   15de4:	movne	r2, ip
   15de8:	movt	r0, #2
   15dec:	strd	r2, [r0]
   15df0:	b	15cd4 <__assert_fail@plt+0x4604>
   15df4:	cmp	r9, #0
   15df8:	bne	15e58 <__assert_fail@plt+0x4788>
   15dfc:	ldr	r0, [sp, #8]
   15e00:	movw	r1, #54438	; 0xd4a6
   15e04:	mov	r2, #5
   15e08:	movt	r1, #1
   15e0c:	ldr	r4, [r0]
   15e10:	mov	r0, #0
   15e14:	bl	11430 <dcgettext@plt>
   15e18:	ldr	r1, [sp, #12]
   15e1c:	mov	r5, r0
   15e20:	mov	r0, #4
   15e24:	bl	190ec <__assert_fail@plt+0x7a1c>
   15e28:	mov	r3, r0
   15e2c:	mov	r0, #0
   15e30:	mov	r1, r4
   15e34:	mov	r2, r5
   15e38:	bl	14914 <__assert_fail@plt+0x3244>
   15e3c:	movw	r0, #62228	; 0xf314
   15e40:	movt	r0, #2
   15e44:	ldrb	r0, [r0, #1]
   15e48:	tst	r0, #1
   15e4c:	beq	15e94 <__assert_fail@plt+0x47c4>
   15e50:	bl	15454 <__assert_fail@plt+0x3d84>
   15e54:	bl	161e0 <__assert_fail@plt+0x4b10>
   15e58:	movw	r1, #54488	; 0xd4d8
   15e5c:	mov	r0, #0
   15e60:	mov	r2, #5
   15e64:	movt	r1, #1
   15e68:	bl	11430 <dcgettext@plt>
   15e6c:	ldr	r2, [sp, #12]
   15e70:	mov	r4, r0
   15e74:	mov	r0, #0
   15e78:	mov	r1, #3
   15e7c:	bl	19368 <__assert_fail@plt+0x7c98>
   15e80:	ldr	r1, [sp, #4]
   15e84:	mov	r3, r0
   15e88:	mov	r0, #0
   15e8c:	mov	r2, r4
   15e90:	bl	14914 <__assert_fail@plt+0x3244>
   15e94:	bl	161e0 <__assert_fail@plt+0x4b10>
   15e98:	ldr	r5, [sp, #4]
   15e9c:	ldr	r8, [sp, #12]
   15ea0:	cmp	r5, #0
   15ea4:	movweq	r5, #75	; 0x4b
   15ea8:	cmp	r9, #0
   15eac:	bne	15ebc <__assert_fail@plt+0x47ec>
   15eb0:	movw	r1, #54472	; 0xd4c8
   15eb4:	movt	r1, #1
   15eb8:	b	15ec4 <__assert_fail@plt+0x47f4>
   15ebc:	movw	r1, #54488	; 0xd4d8
   15ec0:	movt	r1, #1
   15ec4:	mov	r0, #0
   15ec8:	mov	r2, #5
   15ecc:	bl	11430 <dcgettext@plt>
   15ed0:	mov	r4, r0
   15ed4:	mov	r0, #0
   15ed8:	mov	r1, #3
   15edc:	mov	r2, r8
   15ee0:	bl	19368 <__assert_fail@plt+0x7c98>
   15ee4:	mov	r3, r0
   15ee8:	mov	r0, #0
   15eec:	mov	r1, r5
   15ef0:	b	15e8c <__assert_fail@plt+0x47bc>
   15ef4:	ldr	r4, [sl]
   15ef8:	b	15b44 <__assert_fail@plt+0x4474>
   15efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f00:	add	fp, sp, #28
   15f04:	sub	sp, sp, #20
   15f08:	mov	sl, r0
   15f0c:	movw	r0, #62224	; 0xf310
   15f10:	mov	r4, r1
   15f14:	movt	r0, #2
   15f18:	ldr	r0, [r0]
   15f1c:	tst	r0, #65536	; 0x10000
   15f20:	beq	1607c <__assert_fail@plt+0x49ac>
   15f24:	movw	r0, #62240	; 0xf320
   15f28:	movt	r0, #2
   15f2c:	ldr	r0, [r0]
   15f30:	cmp	r0, r4
   15f34:	ble	1607c <__assert_fail@plt+0x49ac>
   15f38:	mov	r0, #1
   15f3c:	mov	r1, #3
   15f40:	mov	r8, #1
   15f44:	bl	16980 <__assert_fail@plt+0x52b0>
   15f48:	bic	r2, r0, #65536	; 0x10000
   15f4c:	mov	r0, #1
   15f50:	mov	r1, #4
   15f54:	bl	16980 <__assert_fail@plt+0x52b0>
   15f58:	cmp	r0, #0
   15f5c:	movwne	r0, #61776	; 0xf150
   15f60:	movtne	r0, #2
   15f64:	ldrne	r0, [r0]
   15f68:	cmpne	r0, #1
   15f6c:	beq	15fbc <__assert_fail@plt+0x48ec>
   15f70:	bl	11598 <__errno_location@plt>
   15f74:	ldr	r6, [r0]
   15f78:	movw	r1, #54504	; 0xd4e8
   15f7c:	mov	r0, #0
   15f80:	mov	r2, #5
   15f84:	movt	r1, #1
   15f88:	bl	11430 <dcgettext@plt>
   15f8c:	mov	r7, r0
   15f90:	movw	r0, #62220	; 0xf30c
   15f94:	mov	r1, #3
   15f98:	movt	r0, #2
   15f9c:	ldr	r2, [r0]
   15fa0:	mov	r0, #0
   15fa4:	bl	19368 <__assert_fail@plt+0x7c98>
   15fa8:	mov	r3, r0
   15fac:	mov	r0, #0
   15fb0:	mov	r1, r6
   15fb4:	mov	r2, r7
   15fb8:	bl	14914 <__assert_fail@plt+0x3244>
   15fbc:	movw	r0, #62279	; 0xf347
   15fc0:	movw	r7, #61792	; 0xf160
   15fc4:	movt	r0, #2
   15fc8:	movt	r7, #2
   15fcc:	strb	r8, [r0]
   15fd0:	ldrd	r0, [r7]
   15fd4:	and	r2, r0, r1
   15fd8:	cmn	r2, #1
   15fdc:	beq	16068 <__assert_fail@plt+0x4998>
   15fe0:	movw	r2, #62544	; 0xf450
   15fe4:	cmn	r1, #1
   15fe8:	movt	r2, #2
   15fec:	ldm	r2, {r6, r9}
   15ff0:	bgt	16020 <__assert_fail@plt+0x4950>
   15ff4:	mov	r0, #1
   15ff8:	mov	r2, #0
   15ffc:	mov	r3, #0
   16000:	mvn	r8, #0
   16004:	str	r0, [sp]
   16008:	mov	r0, #1
   1600c:	bl	1149c <lseek64@plt>
   16010:	subs	r2, r8, r0
   16014:	strd	r0, [r7]
   16018:	sbcs	r2, r8, r1
   1601c:	bge	16068 <__assert_fail@plt+0x4998>
   16020:	subs	r6, r0, r6
   16024:	movw	r0, #61920	; 0xf1e0
   16028:	movt	r0, #2
   1602c:	sbc	r7, r1, r9
   16030:	ldr	r2, [r0]
   16034:	mov	r0, r6
   16038:	mov	r1, r7
   1603c:	asr	r3, r2, #31
   16040:	bl	1be94 <__assert_fail@plt+0xa7c4>
   16044:	mov	r0, #4
   16048:	subs	r2, r6, r2
   1604c:	mov	r1, #0
   16050:	str	r0, [sp, #8]
   16054:	sbc	r3, r7, r3
   16058:	mov	r0, #1
   1605c:	str	r1, [sp]
   16060:	str	r1, [sp, #4]
   16064:	bl	11394 <posix_fadvise64@plt>
   16068:	movw	r0, #62228	; 0xf314
   1606c:	movt	r0, #2
   16070:	ldr	r1, [r0]
   16074:	orr	r1, r1, #32768	; 0x8000
   16078:	str	r1, [r0]
   1607c:	cmp	r4, #1
   16080:	blt	16198 <__assert_fail@plt+0x4ac8>
   16084:	movw	r5, #62524	; 0xf43c
   16088:	movw	r8, #62228	; 0xf314
   1608c:	asr	r0, r4, #31
   16090:	sub	r7, r4, #1
   16094:	mov	r9, #0
   16098:	mov	r6, #0
   1609c:	movt	r5, #2
   160a0:	movt	r8, #2
   160a4:	str	r0, [sp, #16]
   160a8:	b	160c0 <__assert_fail@plt+0x49f0>
   160ac:	ldr	r0, [r8]
   160b0:	mov	r9, #0
   160b4:	bic	r0, r0, #65536	; 0x10000
   160b8:	str	r0, [r8]
   160bc:	b	16118 <__assert_fail@plt+0x4a48>
   160c0:	bl	152ac <__assert_fail@plt+0x3bdc>
   160c4:	ldrb	r0, [r8, #2]
   160c8:	strb	r9, [r5]
   160cc:	tst	r0, #1
   160d0:	beq	16118 <__assert_fail@plt+0x4a48>
   160d4:	mov	r0, #0
   160d8:	ldrb	r1, [sl, -r0]
   160dc:	cmp	r1, #0
   160e0:	bne	16118 <__assert_fail@plt+0x4a48>
   160e4:	add	r1, r4, r0
   160e8:	cmp	r1, #1
   160ec:	beq	16148 <__assert_fail@plt+0x4a78>
   160f0:	add	r1, r7, r0
   160f4:	sub	r0, r0, #1
   160f8:	tst	r1, #15
   160fc:	bne	160d8 <__assert_fail@plt+0x4a08>
   16100:	sub	r1, sl, r0
   16104:	add	r2, r4, r0
   16108:	mov	r0, sl
   1610c:	bl	11424 <memcmp@plt>
   16110:	cmp	r0, #0
   16114:	beq	16148 <__assert_fail@plt+0x4a78>
   16118:	add	r1, sl, r6
   1611c:	sub	r2, r4, r6
   16120:	mov	r0, #1
   16124:	bl	115e0 <write@plt>
   16128:	cmn	r0, #1
   1612c:	ble	1617c <__assert_fail@plt+0x4aac>
   16130:	cmp	r0, #0
   16134:	beq	161a0 <__assert_fail@plt+0x4ad0>
   16138:	add	r6, r0, r6
   1613c:	cmp	r6, r4
   16140:	blt	160c0 <__assert_fail@plt+0x49f0>
   16144:	b	161ac <__assert_fail@plt+0x4adc>
   16148:	ldr	r3, [sp, #16]
   1614c:	mov	r9, #1
   16150:	mov	r0, #1
   16154:	mov	r2, r4
   16158:	str	r9, [sp]
   1615c:	bl	1149c <lseek64@plt>
   16160:	cmn	r1, #1
   16164:	ble	160ac <__assert_fail@plt+0x49dc>
   16168:	strb	r9, [r5]
   1616c:	mov	r0, r4
   16170:	mov	r9, #0
   16174:	cmn	r0, #1
   16178:	bgt	16130 <__assert_fail@plt+0x4a60>
   1617c:	bl	11598 <__errno_location@plt>
   16180:	ldr	r0, [r0]
   16184:	cmp	r0, #4
   16188:	bne	161ac <__assert_fail@plt+0x4adc>
   1618c:	cmp	r6, r4
   16190:	blt	160c0 <__assert_fail@plt+0x49f0>
   16194:	b	161ac <__assert_fail@plt+0x4adc>
   16198:	mov	r6, #0
   1619c:	b	161d4 <__assert_fail@plt+0x4b04>
   161a0:	bl	11598 <__errno_location@plt>
   161a4:	mov	r1, #28
   161a8:	str	r1, [r0]
   161ac:	cmp	r6, #0
   161b0:	movwne	r0, #62277	; 0xf345
   161b4:	movtne	r0, #2
   161b8:	ldrbne	r0, [r0]
   161bc:	cmpne	r0, #0
   161c0:	beq	161d4 <__assert_fail@plt+0x4b04>
   161c4:	asr	r3, r6, #31
   161c8:	mov	r0, #1
   161cc:	mov	r2, r6
   161d0:	bl	14af4 <__assert_fail@plt+0x3424>
   161d4:	mov	r0, r6
   161d8:	sub	sp, fp, #28
   161dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161e0:	push	{fp, lr}
   161e4:	mov	fp, sp
   161e8:	bl	14d9c <__assert_fail@plt+0x36cc>
   161ec:	mov	r0, #1
   161f0:	bl	11568 <exit@plt>
   161f4:	push	{r4, r5, r6, sl, fp, lr}
   161f8:	add	fp, sp, #16
   161fc:	sub	sp, sp, #672	; 0x2a0
   16200:	movw	r4, #62512	; 0xf430
   16204:	movt	r4, #2
   16208:	ldr	r0, [r4]
   1620c:	cmp	r0, #0
   16210:	bne	16250 <__assert_fail@plt+0x4b80>
   16214:	movw	r1, #62228	; 0xf314
   16218:	movw	r5, #62416	; 0xf3d0
   1621c:	movt	r1, #2
   16220:	movt	r5, #2
   16224:	ldr	r1, [r1]
   16228:	ldr	r0, [r5]
   1622c:	ubfx	r1, r1, #7, #1
   16230:	add	r1, r0, r1
   16234:	movw	r0, #61920	; 0xf1e0
   16238:	movt	r0, #2
   1623c:	ldr	r0, [r0]
   16240:	bl	1167c <aligned_alloc@plt>
   16244:	cmp	r0, #0
   16248:	str	r0, [r4]
   1624c:	beq	16258 <__assert_fail@plt+0x4b88>
   16250:	sub	sp, fp, #16
   16254:	pop	{r4, r5, r6, sl, fp, pc}
   16258:	movw	r1, #54536	; 0xd508
   1625c:	mov	r0, #0
   16260:	mov	r2, #5
   16264:	mov	r6, #0
   16268:	movt	r1, #1
   1626c:	bl	11430 <dcgettext@plt>
   16270:	ldr	r5, [r5]
   16274:	mov	r4, r0
   16278:	mov	r0, #1
   1627c:	add	r2, sp, #20
   16280:	movw	r3, #497	; 0x1f1
   16284:	stm	sp, {r0, r6}
   16288:	str	r0, [sp, #8]
   1628c:	str	r6, [sp, #12]
   16290:	asr	r1, r5, #31
   16294:	mov	r0, r5
   16298:	bl	16d40 <__assert_fail@plt+0x5670>
   1629c:	str	r0, [sp]
   162a0:	mov	r0, #1
   162a4:	mov	r1, #0
   162a8:	mov	r2, r4
   162ac:	mov	r3, r5
   162b0:	bl	14914 <__assert_fail@plt+0x3244>
   162b4:	push	{r4, r5, r6, sl, fp, lr}
   162b8:	add	fp, sp, #16
   162bc:	sub	sp, sp, #672	; 0x2a0
   162c0:	movw	r4, #62508	; 0xf42c
   162c4:	movt	r4, #2
   162c8:	ldr	r0, [r4]
   162cc:	cmp	r0, #0
   162d0:	bne	1632c <__assert_fail@plt+0x4c5c>
   162d4:	movw	r0, #62228	; 0xf314
   162d8:	movt	r0, #2
   162dc:	ldrb	r0, [r0, #1]
   162e0:	tst	r0, #8
   162e4:	bne	16304 <__assert_fail@plt+0x4c34>
   162e8:	bl	161f4 <__assert_fail@plt+0x4b24>
   162ec:	movw	r0, #62512	; 0xf430
   162f0:	movt	r0, #2
   162f4:	ldr	r0, [r0]
   162f8:	str	r0, [r4]
   162fc:	sub	sp, fp, #16
   16300:	pop	{r4, r5, r6, sl, fp, pc}
   16304:	movw	r5, #62240	; 0xf320
   16308:	movw	r0, #61920	; 0xf1e0
   1630c:	movt	r0, #2
   16310:	movt	r5, #2
   16314:	ldr	r1, [r5]
   16318:	ldr	r0, [r0]
   1631c:	bl	1167c <aligned_alloc@plt>
   16320:	cmp	r0, #0
   16324:	str	r0, [r4]
   16328:	beq	16334 <__assert_fail@plt+0x4c64>
   1632c:	sub	sp, fp, #16
   16330:	pop	{r4, r5, r6, sl, fp, pc}
   16334:	movw	r1, #54592	; 0xd540
   16338:	mov	r0, #0
   1633c:	mov	r2, #5
   16340:	mov	r6, #0
   16344:	movt	r1, #1
   16348:	bl	11430 <dcgettext@plt>
   1634c:	ldr	r5, [r5]
   16350:	mov	r4, r0
   16354:	mov	r0, #1
   16358:	add	r2, sp, #20
   1635c:	movw	r3, #497	; 0x1f1
   16360:	stm	sp, {r0, r6}
   16364:	str	r0, [sp, #8]
   16368:	str	r6, [sp, #12]
   1636c:	asr	r1, r5, #31
   16370:	mov	r0, r5
   16374:	bl	16d40 <__assert_fail@plt+0x5670>
   16378:	str	r0, [sp]
   1637c:	mov	r0, #1
   16380:	mov	r1, #0
   16384:	mov	r2, r4
   16388:	mov	r3, r5
   1638c:	bl	14914 <__assert_fail@plt+0x3244>
   16390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16394:	add	fp, sp, #28
   16398:	sub	sp, sp, #4
   1639c:	cmp	r1, #0
   163a0:	beq	164e0 <__assert_fail@plt+0x4e10>
   163a4:	movw	r3, #62520	; 0xf438
   163a8:	movw	r7, #62420	; 0xf3d4
   163ac:	movw	r6, #62516	; 0xf434
   163b0:	movw	r9, #62508	; 0xf42c
   163b4:	movw	sl, #62240	; 0xf320
   163b8:	mov	r4, r1
   163bc:	mov	r5, r0
   163c0:	movt	r3, #2
   163c4:	movt	r7, #2
   163c8:	movt	r6, #2
   163cc:	movt	r9, #2
   163d0:	movt	sl, #2
   163d4:	ldr	r8, [r3]
   163d8:	movw	r0, #62505	; 0xf429
   163dc:	ldr	r1, [r7]
   163e0:	mov	r2, #10
   163e4:	movt	r0, #2
   163e8:	ldrb	r0, [r0]
   163ec:	cmp	r0, #0
   163f0:	ldrb	r0, [r5]
   163f4:	movwne	r2, #37	; 0x25
   163f8:	cmp	r2, r0
   163fc:	bne	16460 <__assert_fail@plt+0x4d90>
   16400:	cmp	r8, r1
   16404:	bge	16488 <__assert_fail@plt+0x4db8>
   16408:	movw	r2, #62506	; 0xf42a
   1640c:	ldr	r0, [r6]
   16410:	ldr	r3, [r9]
   16414:	movt	r2, #2
   16418:	ldrb	r2, [r2]
   1641c:	add	r1, r0, #1
   16420:	str	r1, [r6]
   16424:	cmp	r2, #0
   16428:	mov	r2, #32
   1642c:	movwne	r2, #64	; 0x40
   16430:	strb	r2, [r3, r0]
   16434:	ldr	r0, [sl]
   16438:	cmp	r1, r0
   1643c:	blge	16674 <__assert_fail@plt+0x4fa4>
   16440:	ldr	r0, [r7]
   16444:	add	r8, r8, #1
   16448:	cmp	r8, r0
   1644c:	blt	16408 <__assert_fail@plt+0x4d38>
   16450:	movw	r3, #62520	; 0xf438
   16454:	mov	r8, #0
   16458:	movt	r3, #2
   1645c:	b	164d0 <__assert_fail@plt+0x4e00>
   16460:	cmp	r8, r1
   16464:	bne	16490 <__assert_fail@plt+0x4dc0>
   16468:	movw	r0, #62488	; 0xf418
   1646c:	movt	r0, #2
   16470:	mov	r2, r0
   16474:	ldrd	r0, [r0]
   16478:	adds	r0, r0, #1
   1647c:	adc	r1, r1, #0
   16480:	strd	r0, [r2]
   16484:	b	164cc <__assert_fail@plt+0x4dfc>
   16488:	mov	r8, #0
   1648c:	b	164d0 <__assert_fail@plt+0x4e00>
   16490:	bge	164cc <__assert_fail@plt+0x4dfc>
   16494:	ldr	r1, [r6]
   16498:	ldr	r3, [r9]
   1649c:	add	r2, r1, #1
   164a0:	str	r2, [r6]
   164a4:	strb	r0, [r3, r1]
   164a8:	movw	r3, #62520	; 0xf438
   164ac:	ldr	r0, [sl]
   164b0:	movt	r3, #2
   164b4:	cmp	r2, r0
   164b8:	blt	164cc <__assert_fail@plt+0x4dfc>
   164bc:	bl	16674 <__assert_fail@plt+0x4fa4>
   164c0:	movw	r3, #62520	; 0xf438
   164c4:	movt	r3, #2
   164c8:	ldr	r8, [r3]
   164cc:	add	r8, r8, #1
   164d0:	add	r5, r5, #1
   164d4:	subs	r4, r4, #1
   164d8:	str	r8, [r3]
   164dc:	bne	163d8 <__assert_fail@plt+0x4d08>
   164e0:	sub	sp, fp, #28
   164e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164ec:	add	fp, sp, #28
   164f0:	sub	sp, sp, #12
   164f4:	cmp	r1, #1
   164f8:	str	r0, [sp, #8]
   164fc:	blt	1666c <__assert_fail@plt+0x4f9c>
   16500:	movw	r3, #62520	; 0xf438
   16504:	movw	r5, #62528	; 0xf440
   16508:	movw	r8, #62516	; 0xf434
   1650c:	movw	r9, #62508	; 0xf42c
   16510:	movw	sl, #62240	; 0xf320
   16514:	mov	r6, r1
   16518:	mov	r4, #0
   1651c:	str	r1, [sp, #4]
   16520:	movt	r3, #2
   16524:	movt	r5, #2
   16528:	movt	r8, #2
   1652c:	movt	r9, #2
   16530:	movt	sl, #2
   16534:	ldr	r0, [sp, #8]
   16538:	ldrb	r7, [r0, r4]
   1653c:	ldr	r0, [r3]
   16540:	add	r1, r0, #1
   16544:	str	r1, [r3]
   16548:	movw	r1, #62420	; 0xf3d4
   1654c:	movt	r1, #2
   16550:	ldr	r1, [r1]
   16554:	cmp	r0, r1
   16558:	bge	1658c <__assert_fail@plt+0x4ebc>
   1655c:	movw	r0, #62506	; 0xf42a
   16560:	mov	r2, #32
   16564:	movt	r0, #2
   16568:	ldrb	r1, [r0]
   1656c:	ldr	r0, [r5]
   16570:	cmp	r1, #0
   16574:	movwne	r2, #64	; 0x40
   16578:	cmp	r2, r7
   1657c:	bne	165dc <__assert_fail@plt+0x4f0c>
   16580:	add	r0, r0, #1
   16584:	str	r0, [r5]
   16588:	b	16660 <__assert_fail@plt+0x4f90>
   1658c:	movw	r2, #62505	; 0xf429
   16590:	mov	r0, #0
   16594:	sub	r4, r4, #1
   16598:	movt	r2, #2
   1659c:	str	r0, [r3]
   165a0:	str	r0, [r5]
   165a4:	ldr	r0, [r8]
   165a8:	ldr	r3, [r9]
   165ac:	ldrb	r2, [r2]
   165b0:	add	r1, r0, #1
   165b4:	cmp	r2, #0
   165b8:	mov	r2, #10
   165bc:	str	r1, [r8]
   165c0:	movwne	r2, #37	; 0x25
   165c4:	strb	r2, [r3, r0]
   165c8:	ldr	r0, [sl]
   165cc:	cmp	r1, r0
   165d0:	blt	16658 <__assert_fail@plt+0x4f88>
   165d4:	bl	16674 <__assert_fail@plt+0x4fa4>
   165d8:	b	16658 <__assert_fail@plt+0x4f88>
   165dc:	cmp	r0, #0
   165e0:	bne	165f4 <__assert_fail@plt+0x4f24>
   165e4:	b	16634 <__assert_fail@plt+0x4f64>
   165e8:	movw	r1, #62506	; 0xf42a
   165ec:	movt	r1, #2
   165f0:	ldrb	r1, [r1]
   165f4:	ldr	r2, [r8]
   165f8:	ldr	r6, [r9]
   165fc:	tst	r1, #1
   16600:	mov	r1, #32
   16604:	movwne	r1, #64	; 0x40
   16608:	add	r3, r2, #1
   1660c:	str	r3, [r8]
   16610:	strb	r1, [r6, r2]
   16614:	ldr	r1, [sl]
   16618:	cmp	r3, r1
   1661c:	blt	16628 <__assert_fail@plt+0x4f58>
   16620:	bl	16674 <__assert_fail@plt+0x4fa4>
   16624:	ldr	r0, [r5]
   16628:	subs	r0, r0, #1
   1662c:	str	r0, [r5]
   16630:	bne	165e8 <__assert_fail@plt+0x4f18>
   16634:	ldr	r0, [r8]
   16638:	ldr	r2, [r9]
   1663c:	add	r1, r0, #1
   16640:	str	r1, [r8]
   16644:	strb	r7, [r2, r0]
   16648:	ldr	r0, [sl]
   1664c:	cmp	r1, r0
   16650:	blge	16674 <__assert_fail@plt+0x4fa4>
   16654:	ldr	r6, [sp, #4]
   16658:	movw	r3, #62520	; 0xf438
   1665c:	movt	r3, #2
   16660:	add	r4, r4, #1
   16664:	cmp	r4, r6
   16668:	blt	16534 <__assert_fail@plt+0x4e64>
   1666c:	sub	sp, fp, #28
   16670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16674:	push	{r4, r5, r6, sl, fp, lr}
   16678:	add	fp, sp, #16
   1667c:	movw	r5, #62240	; 0xf320
   16680:	movw	r0, #62508	; 0xf42c
   16684:	movt	r0, #2
   16688:	movt	r5, #2
   1668c:	ldr	r1, [r5]
   16690:	ldr	r0, [r0]
   16694:	bl	15efc <__assert_fail@plt+0x482c>
   16698:	mov	r4, r0
   1669c:	movw	r0, #62496	; 0xf420
   166a0:	movt	r0, #2
   166a4:	ldrd	r2, [r0]
   166a8:	adds	r2, r2, r4
   166ac:	adc	r3, r3, r4, asr #31
   166b0:	strd	r2, [r0]
   166b4:	ldr	r0, [r5]
   166b8:	cmp	r4, r0
   166bc:	bne	166ec <__assert_fail@plt+0x501c>
   166c0:	movw	r0, #62516	; 0xf434
   166c4:	mov	r1, #0
   166c8:	movt	r0, #2
   166cc:	str	r1, [r0]
   166d0:	movw	r0, #62472	; 0xf408
   166d4:	movt	r0, #2
   166d8:	ldrd	r2, [r0]
   166dc:	adds	r2, r2, #1
   166e0:	adc	r3, r3, #0
   166e4:	strd	r2, [r0]
   166e8:	pop	{r4, r5, r6, sl, fp, pc}
   166ec:	bl	11598 <__errno_location@plt>
   166f0:	ldr	r5, [r0]
   166f4:	movw	r1, #54424	; 0xd498
   166f8:	mov	r0, #0
   166fc:	mov	r2, #5
   16700:	movt	r1, #1
   16704:	bl	11430 <dcgettext@plt>
   16708:	mov	r6, r0
   1670c:	movw	r0, #62220	; 0xf30c
   16710:	movt	r0, #2
   16714:	ldr	r1, [r0]
   16718:	mov	r0, #4
   1671c:	bl	190ec <__assert_fail@plt+0x7a1c>
   16720:	mov	r3, r0
   16724:	mov	r0, #0
   16728:	mov	r1, r5
   1672c:	mov	r2, r6
   16730:	bl	14914 <__assert_fail@plt+0x3244>
   16734:	cmp	r4, #0
   16738:	beq	16754 <__assert_fail@plt+0x5084>
   1673c:	movw	r0, #62480	; 0xf410
   16740:	movt	r0, #2
   16744:	ldrd	r2, [r0]
   16748:	adds	r2, r2, #1
   1674c:	adc	r3, r3, #0
   16750:	strd	r2, [r0]
   16754:	bl	161e0 <__assert_fail@plt+0x4b10>
   16758:	push	{r4, r5, r6, sl, fp, lr}
   1675c:	add	fp, sp, #16
   16760:	mov	r4, r0
   16764:	bl	114b4 <__fpending@plt>
   16768:	ldr	r6, [r4]
   1676c:	mov	r5, r0
   16770:	mov	r0, r4
   16774:	bl	168e4 <__assert_fail@plt+0x5214>
   16778:	tst	r6, #32
   1677c:	bne	167b4 <__assert_fail@plt+0x50e4>
   16780:	cmp	r0, #0
   16784:	mov	r4, r0
   16788:	mvnne	r4, #0
   1678c:	cmp	r5, #0
   16790:	bne	167c0 <__assert_fail@plt+0x50f0>
   16794:	cmp	r0, #0
   16798:	beq	167c0 <__assert_fail@plt+0x50f0>
   1679c:	bl	11598 <__errno_location@plt>
   167a0:	ldr	r0, [r0]
   167a4:	subs	r4, r0, #9
   167a8:	mvnne	r4, #0
   167ac:	mov	r0, r4
   167b0:	pop	{r4, r5, r6, sl, fp, pc}
   167b4:	mvn	r4, #0
   167b8:	cmp	r0, #0
   167bc:	beq	167c8 <__assert_fail@plt+0x50f8>
   167c0:	mov	r0, r4
   167c4:	pop	{r4, r5, r6, sl, fp, pc}
   167c8:	bl	11598 <__errno_location@plt>
   167cc:	mov	r1, #0
   167d0:	str	r1, [r0]
   167d4:	mov	r0, r4
   167d8:	pop	{r4, r5, r6, sl, fp, pc}
   167dc:	movw	r1, #62552	; 0xf458
   167e0:	movt	r1, #2
   167e4:	str	r0, [r1]
   167e8:	bx	lr
   167ec:	movw	r1, #62556	; 0xf45c
   167f0:	movt	r1, #2
   167f4:	strb	r0, [r1]
   167f8:	bx	lr
   167fc:	push	{r4, r5, r6, sl, fp, lr}
   16800:	add	fp, sp, #16
   16804:	sub	sp, sp, #8
   16808:	movw	r0, #61908	; 0xf1d4
   1680c:	movt	r0, #2
   16810:	ldr	r0, [r0]
   16814:	bl	16758 <__assert_fail@plt+0x5088>
   16818:	cmp	r0, #0
   1681c:	beq	16844 <__assert_fail@plt+0x5174>
   16820:	movw	r0, #62556	; 0xf45c
   16824:	movt	r0, #2
   16828:	ldrb	r0, [r0]
   1682c:	cmp	r0, #0
   16830:	beq	16864 <__assert_fail@plt+0x5194>
   16834:	bl	11598 <__errno_location@plt>
   16838:	ldr	r0, [r0]
   1683c:	cmp	r0, #32
   16840:	bne	16864 <__assert_fail@plt+0x5194>
   16844:	movw	r0, #61904	; 0xf1d0
   16848:	movt	r0, #2
   1684c:	ldr	r0, [r0]
   16850:	bl	16758 <__assert_fail@plt+0x5088>
   16854:	cmp	r0, #0
   16858:	subeq	sp, fp, #16
   1685c:	popeq	{r4, r5, r6, sl, fp, pc}
   16860:	b	168d4 <__assert_fail@plt+0x5204>
   16864:	movw	r1, #56303	; 0xdbef
   16868:	mov	r0, #0
   1686c:	mov	r2, #5
   16870:	movt	r1, #1
   16874:	bl	11430 <dcgettext@plt>
   16878:	mov	r4, r0
   1687c:	movw	r0, #62552	; 0xf458
   16880:	movt	r0, #2
   16884:	ldr	r6, [r0]
   16888:	bl	11598 <__errno_location@plt>
   1688c:	ldr	r5, [r0]
   16890:	cmp	r6, #0
   16894:	bne	168b0 <__assert_fail@plt+0x51e0>
   16898:	movw	r2, #54360	; 0xd458
   1689c:	mov	r0, #0
   168a0:	mov	r1, r5
   168a4:	mov	r3, r4
   168a8:	movt	r2, #1
   168ac:	b	168d0 <__assert_fail@plt+0x5200>
   168b0:	mov	r0, r6
   168b4:	bl	1928c <__assert_fail@plt+0x7bbc>
   168b8:	movw	r2, #53655	; 0xd197
   168bc:	mov	r3, r0
   168c0:	str	r4, [sp]
   168c4:	mov	r0, #0
   168c8:	mov	r1, r5
   168cc:	movt	r2, #1
   168d0:	bl	114cc <error@plt>
   168d4:	movw	r0, #61804	; 0xf16c
   168d8:	movt	r0, #2
   168dc:	ldr	r0, [r0]
   168e0:	bl	113e8 <_exit@plt>
   168e4:	push	{r4, r5, r6, sl, fp, lr}
   168e8:	add	fp, sp, #16
   168ec:	sub	sp, sp, #8
   168f0:	mov	r4, r0
   168f4:	bl	115ec <fileno@plt>
   168f8:	cmn	r0, #1
   168fc:	ble	16970 <__assert_fail@plt+0x52a0>
   16900:	mov	r0, r4
   16904:	bl	11520 <__freading@plt>
   16908:	cmp	r0, #0
   1690c:	beq	16938 <__assert_fail@plt+0x5268>
   16910:	mov	r0, r4
   16914:	bl	115ec <fileno@plt>
   16918:	mov	r1, #1
   1691c:	mov	r2, #0
   16920:	mov	r3, #0
   16924:	str	r1, [sp]
   16928:	bl	1149c <lseek64@plt>
   1692c:	and	r0, r0, r1
   16930:	cmn	r0, #1
   16934:	beq	16970 <__assert_fail@plt+0x52a0>
   16938:	mov	r0, r4
   1693c:	bl	16bc8 <__assert_fail@plt+0x54f8>
   16940:	cmp	r0, #0
   16944:	beq	16970 <__assert_fail@plt+0x52a0>
   16948:	bl	11598 <__errno_location@plt>
   1694c:	ldr	r6, [r0]
   16950:	mov	r5, r0
   16954:	mov	r0, r4
   16958:	bl	11604 <fclose@plt>
   1695c:	cmp	r6, #0
   16960:	strne	r6, [r5]
   16964:	mvnne	r0, #0
   16968:	sub	sp, fp, #16
   1696c:	pop	{r4, r5, r6, sl, fp, pc}
   16970:	mov	r0, r4
   16974:	sub	sp, fp, #16
   16978:	pop	{r4, r5, r6, sl, fp, lr}
   1697c:	b	11604 <fclose@plt>
   16980:	sub	sp, sp, #8
   16984:	push	{r4, r5, r6, r7, fp, lr}
   16988:	add	fp, sp, #16
   1698c:	sub	sp, sp, #8
   16990:	mov	r5, r0
   16994:	add	r0, fp, #8
   16998:	cmp	r1, #11
   1699c:	str	r3, [fp, #12]
   169a0:	str	r2, [fp, #8]
   169a4:	str	r0, [sp, #4]
   169a8:	bhi	169e4 <__assert_fail@plt+0x5314>
   169ac:	mov	r0, #1
   169b0:	movw	r2, #1300	; 0x514
   169b4:	tst	r2, r0, lsl r1
   169b8:	bne	16aa4 <__assert_fail@plt+0x53d4>
   169bc:	movw	r2, #2570	; 0xa0a
   169c0:	tst	r2, r0, lsl r1
   169c4:	bne	16a0c <__assert_fail@plt+0x533c>
   169c8:	cmp	r1, #0
   169cc:	bne	169e4 <__assert_fail@plt+0x5314>
   169d0:	ldr	r0, [sp, #4]
   169d4:	add	r1, r0, #4
   169d8:	str	r1, [sp, #4]
   169dc:	mov	r1, #0
   169e0:	b	16ab0 <__assert_fail@plt+0x53e0>
   169e4:	sub	r0, r1, #1024	; 0x400
   169e8:	cmp	r0, #10
   169ec:	bhi	16aa4 <__assert_fail@plt+0x53d4>
   169f0:	mov	r2, #1
   169f4:	movw	r3, #645	; 0x285
   169f8:	tst	r3, r2, lsl r0
   169fc:	bne	16aa4 <__assert_fail@plt+0x53d4>
   16a00:	movw	r3, #1282	; 0x502
   16a04:	tst	r3, r2, lsl r0
   16a08:	beq	16a18 <__assert_fail@plt+0x5348>
   16a0c:	mov	r0, r5
   16a10:	bl	1161c <fcntl64@plt>
   16a14:	b	16abc <__assert_fail@plt+0x53ec>
   16a18:	cmp	r0, #6
   16a1c:	bne	16aa4 <__assert_fail@plt+0x53d4>
   16a20:	ldr	r0, [sp, #4]
   16a24:	movw	r7, #62560	; 0xf460
   16a28:	movt	r7, #2
   16a2c:	add	r1, r0, #4
   16a30:	str	r1, [sp, #4]
   16a34:	ldr	r6, [r0]
   16a38:	ldr	r0, [r7]
   16a3c:	cmp	r0, #0
   16a40:	blt	16ae0 <__assert_fail@plt+0x5410>
   16a44:	mov	r0, r5
   16a48:	movw	r1, #1030	; 0x406
   16a4c:	mov	r2, r6
   16a50:	bl	1161c <fcntl64@plt>
   16a54:	mov	r4, r0
   16a58:	cmn	r0, #1
   16a5c:	bgt	16ad4 <__assert_fail@plt+0x5404>
   16a60:	bl	11598 <__errno_location@plt>
   16a64:	ldr	r0, [r0]
   16a68:	cmp	r0, #22
   16a6c:	bne	16ad4 <__assert_fail@plt+0x5404>
   16a70:	mov	r0, r5
   16a74:	mov	r1, #0
   16a78:	mov	r2, r6
   16a7c:	bl	1161c <fcntl64@plt>
   16a80:	mov	r4, r0
   16a84:	cmp	r0, #0
   16a88:	blt	16ac0 <__assert_fail@plt+0x53f0>
   16a8c:	mvn	r0, #0
   16a90:	str	r0, [r7]
   16a94:	mov	r0, #1
   16a98:	cmp	r0, #0
   16a9c:	bne	16b0c <__assert_fail@plt+0x543c>
   16aa0:	b	16ac0 <__assert_fail@plt+0x53f0>
   16aa4:	ldr	r0, [sp, #4]
   16aa8:	add	r2, r0, #4
   16aac:	str	r2, [sp, #4]
   16ab0:	ldr	r2, [r0]
   16ab4:	mov	r0, r5
   16ab8:	bl	1161c <fcntl64@plt>
   16abc:	mov	r4, r0
   16ac0:	mov	r0, r4
   16ac4:	sub	sp, fp, #16
   16ac8:	pop	{r4, r5, r6, r7, fp, lr}
   16acc:	add	sp, sp, #8
   16ad0:	bx	lr
   16ad4:	mov	r0, #1
   16ad8:	str	r0, [r7]
   16adc:	b	16ac0 <__assert_fail@plt+0x53f0>
   16ae0:	mov	r0, r5
   16ae4:	mov	r1, #0
   16ae8:	mov	r2, r6
   16aec:	bl	1161c <fcntl64@plt>
   16af0:	mov	r4, r0
   16af4:	ldr	r0, [r7]
   16af8:	add	r0, r0, #1
   16afc:	clz	r0, r0
   16b00:	lsr	r0, r0, #5
   16b04:	cmp	r0, #0
   16b08:	beq	16ac0 <__assert_fail@plt+0x53f0>
   16b0c:	cmp	r4, #0
   16b10:	blt	16ac0 <__assert_fail@plt+0x53f0>
   16b14:	mov	r0, r4
   16b18:	mov	r1, #1
   16b1c:	bl	1161c <fcntl64@plt>
   16b20:	cmp	r0, #0
   16b24:	blt	16b40 <__assert_fail@plt+0x5470>
   16b28:	orr	r2, r0, #1
   16b2c:	mov	r0, r4
   16b30:	mov	r1, #2
   16b34:	bl	1161c <fcntl64@plt>
   16b38:	cmn	r0, #1
   16b3c:	bne	16ac0 <__assert_fail@plt+0x53f0>
   16b40:	bl	11598 <__errno_location@plt>
   16b44:	ldr	r6, [r0]
   16b48:	mov	r5, r0
   16b4c:	mov	r0, r4
   16b50:	bl	116ac <close@plt>
   16b54:	str	r6, [r5]
   16b58:	mvn	r4, #0
   16b5c:	b	16ac0 <__assert_fail@plt+0x53f0>
   16b60:	push	{r4, r5, r6, r7, fp, lr}
   16b64:	add	fp, sp, #16
   16b68:	mov	r5, r0
   16b6c:	mov	r0, r1
   16b70:	mov	r1, r2
   16b74:	mov	r2, r3
   16b78:	bl	114d8 <open64@plt>
   16b7c:	mov	r4, r0
   16b80:	cmp	r0, r5
   16b84:	beq	16bc0 <__assert_fail@plt+0x54f0>
   16b88:	cmp	r4, #0
   16b8c:	blt	16bc0 <__assert_fail@plt+0x54f0>
   16b90:	mov	r0, r4
   16b94:	mov	r1, r5
   16b98:	bl	1143c <dup2@plt>
   16b9c:	mov	r5, r0
   16ba0:	bl	11598 <__errno_location@plt>
   16ba4:	ldr	r7, [r0]
   16ba8:	mov	r6, r0
   16bac:	mov	r0, r4
   16bb0:	bl	116ac <close@plt>
   16bb4:	mov	r0, r5
   16bb8:	str	r7, [r6]
   16bbc:	pop	{r4, r5, r6, r7, fp, pc}
   16bc0:	mov	r0, r4
   16bc4:	pop	{r4, r5, r6, r7, fp, pc}
   16bc8:	push	{r4, sl, fp, lr}
   16bcc:	add	fp, sp, #8
   16bd0:	sub	sp, sp, #8
   16bd4:	mov	r4, r0
   16bd8:	cmp	r0, #0
   16bdc:	beq	16bf8 <__assert_fail@plt+0x5528>
   16be0:	mov	r0, r4
   16be4:	bl	11520 <__freading@plt>
   16be8:	cmp	r0, #0
   16bec:	ldrbne	r0, [r4, #1]
   16bf0:	tstne	r0, #1
   16bf4:	bne	16c08 <__assert_fail@plt+0x5538>
   16bf8:	mov	r0, r4
   16bfc:	sub	sp, fp, #8
   16c00:	pop	{r4, sl, fp, lr}
   16c04:	b	113ac <fflush@plt>
   16c08:	mov	r0, #1
   16c0c:	mov	r2, #0
   16c10:	mov	r3, #0
   16c14:	str	r0, [sp]
   16c18:	mov	r0, r4
   16c1c:	bl	16c24 <__assert_fail@plt+0x5554>
   16c20:	b	16bf8 <__assert_fail@plt+0x5528>
   16c24:	push	{r4, r5, r6, r7, fp, lr}
   16c28:	add	fp, sp, #16
   16c2c:	sub	sp, sp, #8
   16c30:	mov	r4, r0
   16c34:	ldr	r0, [r0, #4]
   16c38:	mov	r5, r3
   16c3c:	mov	r6, r2
   16c40:	ldr	r1, [r4, #8]
   16c44:	cmp	r1, r0
   16c48:	bne	16c64 <__assert_fail@plt+0x5594>
   16c4c:	ldrd	r0, [r4, #16]
   16c50:	cmp	r1, r0
   16c54:	bne	16c64 <__assert_fail@plt+0x5594>
   16c58:	ldr	r0, [r4, #36]	; 0x24
   16c5c:	cmp	r0, #0
   16c60:	beq	16c7c <__assert_fail@plt+0x55ac>
   16c64:	mov	r0, r4
   16c68:	mov	r2, r6
   16c6c:	mov	r3, r5
   16c70:	sub	sp, fp, #16
   16c74:	pop	{r4, r5, r6, r7, fp, lr}
   16c78:	b	11610 <fseeko64@plt>
   16c7c:	ldr	r7, [fp, #8]
   16c80:	mov	r0, r4
   16c84:	bl	115ec <fileno@plt>
   16c88:	mov	r2, r6
   16c8c:	mov	r3, r5
   16c90:	str	r7, [sp]
   16c94:	bl	1149c <lseek64@plt>
   16c98:	and	r2, r0, r1
   16c9c:	cmn	r2, #1
   16ca0:	mvneq	r0, #0
   16ca4:	subeq	sp, fp, #16
   16ca8:	popeq	{r4, r5, r6, r7, fp, pc}
   16cac:	strd	r0, [r4, #80]	; 0x50
   16cb0:	ldr	r0, [r4]
   16cb4:	bic	r0, r0, #16
   16cb8:	str	r0, [r4]
   16cbc:	mov	r0, #0
   16cc0:	sub	sp, fp, #16
   16cc4:	pop	{r4, r5, r6, r7, fp, pc}
   16cc8:	push	{r4, sl, fp, lr}
   16ccc:	add	fp, sp, #8
   16cd0:	sub	sp, sp, #8
   16cd4:	mov	r1, sp
   16cd8:	mov	r0, #1
   16cdc:	bl	113dc <clock_gettime@plt>
   16ce0:	movw	r4, #51712	; 0xca00
   16ce4:	cmp	r0, #0
   16ce8:	movt	r4, #15258	; 0x3b9a
   16cec:	beq	16cf8 <__assert_fail@plt+0x5628>
   16cf0:	mov	r0, sp
   16cf4:	bl	16d1c <__assert_fail@plt+0x564c>
   16cf8:	ldr	r0, [sp]
   16cfc:	ldr	r1, [sp, #4]
   16d00:	umull	r2, r3, r0, r4
   16d04:	asr	r0, r0, #31
   16d08:	mla	r3, r0, r4, r3
   16d0c:	adds	r0, r2, r1
   16d10:	adc	r1, r3, r1, asr #31
   16d14:	sub	sp, fp, #8
   16d18:	pop	{r4, sl, fp, pc}
   16d1c:	mov	r1, r0
   16d20:	mov	r0, #0
   16d24:	b	113dc <clock_gettime@plt>
   16d28:	push	{fp, lr}
   16d2c:	mov	fp, sp
   16d30:	mov	r1, r0
   16d34:	mov	r0, #0
   16d38:	bl	113dc <clock_gettime@plt>
   16d3c:	pop	{fp, pc}
   16d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d44:	add	fp, sp, #28
   16d48:	sub	sp, sp, #4
   16d4c:	vpush	{d8-d9}
   16d50:	sub	sp, sp, #104	; 0x68
   16d54:	mov	r7, r3
   16d58:	mov	r6, r2
   16d5c:	mov	r9, r1
   16d60:	str	r0, [sp, #44]	; 0x2c
   16d64:	bl	11664 <localeconv@plt>
   16d68:	ldr	r5, [r0]
   16d6c:	mov	r4, r0
   16d70:	mov	r0, r5
   16d74:	bl	11574 <strlen@plt>
   16d78:	movw	r2, #56315	; 0xdbfb
   16d7c:	sub	r1, r0, #1
   16d80:	cmp	r1, #16
   16d84:	movt	r2, #1
   16d88:	movcc	r2, r5
   16d8c:	ldr	r5, [r4, #4]
   16d90:	ldr	r4, [r4, #8]
   16d94:	movcs	r0, #1
   16d98:	str	r0, [sp, #16]
   16d9c:	str	r2, [sp, #12]
   16da0:	mov	r0, r5
   16da4:	bl	11574 <strlen@plt>
   16da8:	movw	r3, #51037	; 0xc75d
   16dac:	cmp	r0, #17
   16db0:	movw	r0, #647	; 0x287
   16db4:	ldr	r2, [fp, #16]
   16db8:	ldr	sl, [fp, #8]
   16dbc:	ldr	r8, [fp, #12]
   16dc0:	str	r6, [sp, #28]
   16dc4:	str	r7, [sp, #36]	; 0x24
   16dc8:	str	r4, [sp, #20]
   16dcc:	movt	r3, #1
   16dd0:	add	r1, r6, r0
   16dd4:	movcc	r3, r5
   16dd8:	ands	r0, r7, #32
   16ddc:	ldr	r5, [fp, #20]
   16de0:	str	r1, [sp, #32]
   16de4:	str	r0, [sp, #24]
   16de8:	mov	r0, #1000	; 0x3e8
   16dec:	str	r3, [sp, #52]	; 0x34
   16df0:	movwne	r0, #1024	; 0x400
   16df4:	str	r0, [sp, #40]	; 0x28
   16df8:	and	r0, r7, #3
   16dfc:	str	r0, [sp, #48]	; 0x30
   16e00:	subs	r0, sl, r2
   16e04:	sbcs	r0, r8, r5
   16e08:	bcs	16efc <__assert_fail@plt+0x582c>
   16e0c:	orrs	r0, sl, r8
   16e10:	mov	r4, r9
   16e14:	beq	16fe4 <__assert_fail@plt+0x5914>
   16e18:	ldr	r5, [fp, #20]
   16e1c:	mov	r0, r2
   16e20:	mov	r2, sl
   16e24:	mov	r3, r8
   16e28:	mov	r1, r5
   16e2c:	bl	1bf68 <__assert_fail@plt+0xa898>
   16e30:	ldr	r2, [fp, #16]
   16e34:	mov	r6, r0
   16e38:	mov	r3, r1
   16e3c:	umull	r0, r1, r0, sl
   16e40:	mla	r1, r6, r8, r1
   16e44:	mla	r1, r3, sl, r1
   16e48:	subs	r0, r2, r0
   16e4c:	sbc	r1, r5, r1
   16e50:	orrs	r0, r0, r1
   16e54:	bne	16fe4 <__assert_fail@plt+0x5914>
   16e58:	ldr	r5, [sp, #44]	; 0x2c
   16e5c:	mov	r1, r4
   16e60:	mov	r2, r6
   16e64:	mov	r8, r3
   16e68:	mov	r0, r5
   16e6c:	bl	1bf68 <__assert_fail@plt+0xa898>
   16e70:	mov	r7, r0
   16e74:	mov	r9, r1
   16e78:	umull	r0, r1, r0, r6
   16e7c:	mov	r2, #10
   16e80:	mov	r3, r8
   16e84:	mla	r1, r7, r8, r1
   16e88:	subs	r0, r5, r0
   16e8c:	mla	r1, r9, r6, r1
   16e90:	umull	sl, r0, r0, r2
   16e94:	mov	r2, r6
   16e98:	sbc	r1, r4, r1
   16e9c:	add	r1, r1, r1, lsl #2
   16ea0:	add	r5, r0, r1, lsl #1
   16ea4:	mov	r0, sl
   16ea8:	mov	r1, r5
   16eac:	bl	1bf68 <__assert_fail@plt+0xa898>
   16eb0:	mov	r4, r0
   16eb4:	umull	r0, r2, r0, r6
   16eb8:	mla	r2, r4, r8, r2
   16ebc:	subs	r0, sl, r0
   16ec0:	mla	r1, r1, r6, r2
   16ec4:	mov	r2, #2
   16ec8:	sbc	r1, r5, r1
   16ecc:	subs	r3, r6, r0, lsl #1
   16ed0:	lsl	r1, r1, #1
   16ed4:	orr	r1, r1, r0, lsr #31
   16ed8:	sbcs	r3, r8, r1
   16edc:	orr	r5, r1, r0, lsl #1
   16ee0:	movwcc	r2, #3
   16ee4:	cmp	r5, #0
   16ee8:	movwne	r5, #1
   16eec:	rsbs	r0, r6, r0, lsl #1
   16ef0:	sbcs	r0, r1, r8
   16ef4:	movcs	r5, r2
   16ef8:	b	16f74 <__assert_fail@plt+0x58a4>
   16efc:	mov	r0, sl
   16f00:	mov	r1, r8
   16f04:	mov	r3, r5
   16f08:	bl	1bf68 <__assert_fail@plt+0xa898>
   16f0c:	ldr	r2, [fp, #16]
   16f10:	mov	r6, r0
   16f14:	mov	r3, r1
   16f18:	mov	r4, r9
   16f1c:	umull	r0, r1, r0, r2
   16f20:	mla	r1, r6, r5, r1
   16f24:	subs	r0, sl, r0
   16f28:	mla	r1, r3, r2, r1
   16f2c:	sbc	r1, r8, r1
   16f30:	orrs	r0, r0, r1
   16f34:	bne	16fe4 <__assert_fail@plt+0x5914>
   16f38:	ldr	r5, [sp, #44]	; 0x2c
   16f3c:	mov	r2, r6
   16f40:	umull	r7, r0, r6, r5
   16f44:	mla	r0, r6, r4, r0
   16f48:	mla	r9, r3, r5, r0
   16f4c:	mov	r0, r7
   16f50:	mov	r1, r9
   16f54:	bl	1bf68 <__assert_fail@plt+0xa898>
   16f58:	ldr	r2, [fp, #16]
   16f5c:	eor	r1, r1, r4
   16f60:	eor	r0, r0, r5
   16f64:	orrs	r0, r0, r1
   16f68:	bne	16fe4 <__assert_fail@plt+0x5914>
   16f6c:	mov	r5, #0
   16f70:	mov	r4, #0
   16f74:	ldr	r0, [sp, #36]	; 0x24
   16f78:	ldr	r2, [sp, #40]	; 0x28
   16f7c:	mvn	r6, #0
   16f80:	ands	r8, r0, #16
   16f84:	beq	16f98 <__assert_fail@plt+0x58c8>
   16f88:	subs	r0, r7, r2
   16f8c:	mov	r6, #0
   16f90:	sbcs	r0, r9, #0
   16f94:	bcs	174c0 <__assert_fail@plt+0x5df0>
   16f98:	ldr	r0, [sp, #32]
   16f9c:	mov	sl, r7
   16fa0:	str	r0, [sp, #44]	; 0x2c
   16fa4:	ldr	r0, [sp, #48]	; 0x30
   16fa8:	cmp	r0, #0
   16fac:	beq	172d4 <__assert_fail@plt+0x5c04>
   16fb0:	cmp	r0, #1
   16fb4:	bne	17348 <__assert_fail@plt+0x5c78>
   16fb8:	rsbs	r1, r5, #0
   16fbc:	mov	r0, #0
   16fc0:	and	r3, sl, #1
   16fc4:	ldr	r5, [sp, #44]	; 0x2c
   16fc8:	sbc	r0, r0, #0
   16fcc:	eor	r1, r3, r1
   16fd0:	orrs	r0, r1, r0
   16fd4:	addne	r4, r4, #1
   16fd8:	cmp	r4, #5
   16fdc:	bgt	172e4 <__assert_fail@plt+0x5c14>
   16fe0:	b	17338 <__assert_fail@plt+0x5c68>
   16fe4:	ldr	r9, [fp, #20]
   16fe8:	mov	r0, r2
   16fec:	mov	r1, r9
   16ff0:	bl	1be20 <__assert_fail@plt+0xa750>
   16ff4:	vmov	d8, r0, r1
   16ff8:	ldr	r0, [sp, #44]	; 0x2c
   16ffc:	mov	r1, r4
   17000:	bl	1be20 <__assert_fail@plt+0xa750>
   17004:	mov	r6, r0
   17008:	mov	r7, r1
   1700c:	mov	r0, sl
   17010:	mov	r1, r8
   17014:	bl	1be20 <__assert_fail@plt+0xa750>
   17018:	vmov	d17, r6, r7
   1701c:	ldr	r7, [sp, #36]	; 0x24
   17020:	vmov	d16, r0, r1
   17024:	vdiv.f64	d16, d16, d8
   17028:	vmul.f64	d8, d16, d17
   1702c:	tst	r7, #16
   17030:	bne	170a4 <__assert_fail@plt+0x59d4>
   17034:	ldr	r0, [sp, #48]	; 0x30
   17038:	ldr	sl, [sp, #28]
   1703c:	cmp	r0, #1
   17040:	beq	1722c <__assert_fail@plt+0x5b5c>
   17044:	vldr	d16, [pc, #756]	; 17340 <__assert_fail@plt+0x5c70>
   17048:	ldr	r8, [sp, #32]
   1704c:	vcmpe.f64	d8, d16
   17050:	vmrs	APSR_nzcv, fpscr
   17054:	bpl	17230 <__assert_fail@plt+0x5b60>
   17058:	mov	r6, r0
   1705c:	vmov	r0, r1, d8
   17060:	bl	1bfb8 <__assert_fail@plt+0xa8e8>
   17064:	mov	r4, r0
   17068:	mov	r5, r1
   1706c:	bl	1be20 <__assert_fail@plt+0xa750>
   17070:	vmov	d16, r0, r1
   17074:	clz	r0, r6
   17078:	mov	r2, #0
   1707c:	vcmp.f64	d8, d16
   17080:	lsr	r0, r0, #5
   17084:	vmrs	APSR_nzcv, fpscr
   17088:	movwne	r2, #1
   1708c:	and	r0, r0, r2
   17090:	adds	r0, r0, r4
   17094:	adc	r1, r5, #0
   17098:	bl	1be20 <__assert_fail@plt+0xa750>
   1709c:	vmov	d8, r0, r1
   170a0:	b	17230 <__assert_fail@plt+0x5b60>
   170a4:	ldr	r0, [sp, #40]	; 0x28
   170a8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   170ac:	mov	r6, #0
   170b0:	vmov	s0, r0
   170b4:	vcvt.f64.u32	d17, s0
   170b8:	ldr	sl, [sp, #28]
   170bc:	add	r6, r6, #1
   170c0:	vmul.f64	d16, d16, d17
   170c4:	cmp	r6, #7
   170c8:	vmulls.f64	d18, d16, d17
   170cc:	vcmpels.f64	d18, d8
   170d0:	vmrsls	APSR_nzcv, fpscr
   170d4:	bls	170bc <__assert_fail@plt+0x59ec>
   170d8:	ldr	r0, [sp, #48]	; 0x30
   170dc:	ldr	r8, [sp, #32]
   170e0:	ldr	r5, [sp, #16]
   170e4:	vdiv.f64	d8, d8, d16
   170e8:	vmov.f64	d16, d8
   170ec:	cmp	r0, #1
   170f0:	beq	17154 <__assert_fail@plt+0x5a84>
   170f4:	vldr	d16, [pc, #580]	; 17340 <__assert_fail@plt+0x5c70>
   170f8:	vcmpe.f64	d8, d16
   170fc:	vmov.f64	d16, d8
   17100:	vmrs	APSR_nzcv, fpscr
   17104:	bpl	17154 <__assert_fail@plt+0x5a84>
   17108:	vmov	r0, r1, d8
   1710c:	bl	1bfb8 <__assert_fail@plt+0xa8e8>
   17110:	mov	r4, r0
   17114:	mov	r5, r1
   17118:	bl	1be20 <__assert_fail@plt+0xa750>
   1711c:	vmov	d16, r0, r1
   17120:	ldr	r0, [sp, #48]	; 0x30
   17124:	mov	r2, #0
   17128:	vcmp.f64	d8, d16
   1712c:	vmrs	APSR_nzcv, fpscr
   17130:	movwne	r2, #1
   17134:	clz	r0, r0
   17138:	lsr	r0, r0, #5
   1713c:	and	r0, r0, r2
   17140:	adds	r0, r0, r4
   17144:	adc	r1, r5, #0
   17148:	ldr	r5, [sp, #16]
   1714c:	bl	1be20 <__assert_fail@plt+0xa750>
   17150:	vmov	d16, r0, r1
   17154:	movw	r3, #56323	; 0xdc03
   17158:	mov	r0, sl
   1715c:	mov	r1, #1
   17160:	mvn	r2, #0
   17164:	vstr	d16, [sp]
   17168:	movt	r3, #1
   1716c:	bl	115a4 <__sprintf_chk@plt>
   17170:	ldr	r1, [sp, #24]
   17174:	mov	r0, #3
   17178:	cmp	r1, #0
   1717c:	movwne	r0, #2
   17180:	add	r4, r0, r5
   17184:	mov	r0, sl
   17188:	bl	11574 <strlen@plt>
   1718c:	cmp	r4, r0
   17190:	bcc	171b4 <__assert_fail@plt+0x5ae4>
   17194:	mov	r2, r0
   17198:	add	r5, r5, #1
   1719c:	tst	r7, #8
   171a0:	beq	17260 <__assert_fail@plt+0x5b90>
   171a4:	add	r0, sl, r2
   171a8:	ldrb	r0, [r0, #-1]
   171ac:	cmp	r0, #48	; 0x30
   171b0:	bne	17260 <__assert_fail@plt+0x5b90>
   171b4:	ldr	r0, [sp, #48]	; 0x30
   171b8:	vmov.f64	d9, #36	; 0x41200000  10.0
   171bc:	vmul.f64	d8, d8, d9
   171c0:	cmp	r0, #1
   171c4:	beq	17220 <__assert_fail@plt+0x5b50>
   171c8:	vldr	d16, [pc, #368]	; 17340 <__assert_fail@plt+0x5c70>
   171cc:	vcmpe.f64	d8, d16
   171d0:	vmrs	APSR_nzcv, fpscr
   171d4:	bpl	17220 <__assert_fail@plt+0x5b50>
   171d8:	vmov	r0, r1, d8
   171dc:	bl	1bfb8 <__assert_fail@plt+0xa8e8>
   171e0:	mov	r4, r0
   171e4:	mov	r5, r1
   171e8:	bl	1be20 <__assert_fail@plt+0xa750>
   171ec:	vmov	d16, r0, r1
   171f0:	ldr	r0, [sp, #48]	; 0x30
   171f4:	mov	r2, #0
   171f8:	vcmp.f64	d8, d16
   171fc:	vmrs	APSR_nzcv, fpscr
   17200:	movwne	r2, #1
   17204:	clz	r0, r0
   17208:	lsr	r0, r0, #5
   1720c:	and	r0, r0, r2
   17210:	adds	r0, r0, r4
   17214:	adc	r1, r5, #0
   17218:	bl	1be20 <__assert_fail@plt+0xa750>
   1721c:	vmov	d8, r0, r1
   17220:	vdiv.f64	d16, d8, d9
   17224:	vstr	d16, [sp]
   17228:	b	17238 <__assert_fail@plt+0x5b68>
   1722c:	ldr	r8, [sp, #32]
   17230:	mvn	r6, #0
   17234:	vstr	d8, [sp]
   17238:	movw	r3, #56317	; 0xdbfd
   1723c:	mov	r0, sl
   17240:	mov	r1, #1
   17244:	mvn	r2, #0
   17248:	movt	r3, #1
   1724c:	bl	115a4 <__sprintf_chk@plt>
   17250:	mov	r0, sl
   17254:	bl	11574 <strlen@plt>
   17258:	mov	r2, r0
   1725c:	mov	r5, #0
   17260:	sub	r4, r8, r2
   17264:	mov	r1, sl
   17268:	mov	r0, r4
   1726c:	bl	113c4 <memmove@plt>
   17270:	sub	r5, r8, r5
   17274:	tst	r7, #4
   17278:	bne	173a0 <__assert_fail@plt+0x5cd0>
   1727c:	ldr	r3, [sp, #40]	; 0x28
   17280:	ldr	r5, [fp, #16]
   17284:	tst	r7, #128	; 0x80
   17288:	beq	175dc <__assert_fail@plt+0x5f0c>
   1728c:	cmn	r6, #1
   17290:	bgt	17574 <__assert_fail@plt+0x5ea4>
   17294:	subs	r0, r5, #2
   17298:	mov	r6, #0
   1729c:	sbcs	r0, r9, #0
   172a0:	bcc	17574 <__assert_fail@plt+0x5ea4>
   172a4:	mov	r0, #0
   172a8:	mov	r1, #1
   172ac:	mov	r6, #0
   172b0:	cmp	r6, #7
   172b4:	beq	17570 <__assert_fail@plt+0x5ea0>
   172b8:	umull	r1, r2, r1, r3
   172bc:	add	r6, r6, #1
   172c0:	mla	r0, r0, r3, r2
   172c4:	subs	r2, r1, r5
   172c8:	sbcs	r2, r0, r9
   172cc:	bcc	172b0 <__assert_fail@plt+0x5be0>
   172d0:	b	17574 <__assert_fail@plt+0x5ea4>
   172d4:	add	r0, r4, r5
   172d8:	ldr	r5, [sp, #44]	; 0x2c
   172dc:	cmp	r0, #1
   172e0:	blt	17338 <__assert_fail@plt+0x5c68>
   172e4:	adds	sl, sl, #1
   172e8:	adc	r9, r9, #0
   172ec:	cmp	r6, #7
   172f0:	bgt	17338 <__assert_fail@plt+0x5c68>
   172f4:	cmp	r8, #0
   172f8:	beq	17338 <__assert_fail@plt+0x5c68>
   172fc:	eor	r0, sl, r2
   17300:	orrs	r0, r0, r9
   17304:	ldreq	r0, [sp, #36]	; 0x24
   17308:	addeq	r6, r6, #1
   1730c:	moveq	r9, #0
   17310:	moveq	sl, #1
   17314:	tsteq	r0, #8
   17318:	bne	17338 <__assert_fail@plt+0x5c68>
   1731c:	ldr	r2, [sp, #16]
   17320:	mov	r0, #48	; 0x30
   17324:	ldr	r1, [sp, #12]
   17328:	strb	r0, [r5, #-1]!
   1732c:	sub	r5, r5, r2
   17330:	mov	r0, r5
   17334:	bl	113f4 <memcpy@plt>
   17338:	ldr	r8, [sp, #32]
   1733c:	b	17350 <__assert_fail@plt+0x5c80>
   17340:	andeq	r0, r0, r0
   17344:	mvnsmi	r0, #0
   17348:	ldr	r8, [sp, #32]
   1734c:	ldr	r5, [sp, #44]	; 0x2c
   17350:	mov	r4, r5
   17354:	mov	r0, sl
   17358:	mov	r1, r9
   1735c:	mov	r2, #10
   17360:	mov	r3, #0
   17364:	bl	1bf68 <__assert_fail@plt+0xa898>
   17368:	add	r2, r0, r0, lsl #2
   1736c:	sub	r2, sl, r2, lsl #1
   17370:	orr	r2, r2, #48	; 0x30
   17374:	strb	r2, [r4, #-1]!
   17378:	rsbs	r2, sl, #9
   1737c:	mov	sl, r0
   17380:	rscs	r2, r9, #0
   17384:	mov	r9, r1
   17388:	bcc	17354 <__assert_fail@plt+0x5c84>
   1738c:	ldr	r7, [sp, #36]	; 0x24
   17390:	ldr	r9, [fp, #20]
   17394:	ldr	sl, [sp, #28]
   17398:	tst	r7, #4
   1739c:	beq	1727c <__assert_fail@plt+0x5bac>
   173a0:	ldr	r0, [sp, #52]	; 0x34
   173a4:	mov	r7, r5
   173a8:	str	r6, [sp, #16]
   173ac:	sub	r5, r5, r4
   173b0:	bl	11574 <strlen@plt>
   173b4:	add	r8, sp, #56	; 0x38
   173b8:	str	r0, [sp, #48]	; 0x30
   173bc:	mov	r1, r4
   173c0:	mov	r2, r5
   173c4:	mov	r0, r8
   173c8:	bl	113f4 <memcpy@plt>
   173cc:	ldr	r0, [sp, #20]
   173d0:	ldrb	r6, [r0]
   173d4:	cmp	r6, #255	; 0xff
   173d8:	mov	r9, r6
   173dc:	moveq	r9, r5
   173e0:	cmp	r6, #0
   173e4:	mvneq	r9, #0
   173e8:	cmp	r9, r5
   173ec:	movhi	r9, r5
   173f0:	sub	r4, r7, r9
   173f4:	sub	r7, r5, r9
   173f8:	mov	r2, r9
   173fc:	add	r1, r8, r7
   17400:	mov	r0, r4
   17404:	bl	113f4 <memcpy@plt>
   17408:	cmp	r7, #0
   1740c:	beq	17498 <__assert_fail@plt+0x5dc8>
   17410:	clz	r0, r6
   17414:	ldr	r8, [sp, #20]
   17418:	lsr	sl, r0, #5
   1741c:	ldr	r0, [sp, #48]	; 0x30
   17420:	rsb	r0, r0, #0
   17424:	str	r0, [sp, #44]	; 0x2c
   17428:	ldr	r0, [sp, #44]	; 0x2c
   1742c:	ldr	r1, [sp, #52]	; 0x34
   17430:	ldr	r2, [sp, #48]	; 0x30
   17434:	add	r4, r4, r0
   17438:	mov	r0, r4
   1743c:	bl	113f4 <memcpy@plt>
   17440:	tst	sl, #1
   17444:	add	r0, sp, #56	; 0x38
   17448:	addeq	r8, r8, #1
   1744c:	ldrb	r6, [r8]
   17450:	cmp	r6, #255	; 0xff
   17454:	mov	r5, r6
   17458:	moveq	r5, r7
   1745c:	cmp	r6, #0
   17460:	moveq	r5, r9
   17464:	cmp	r7, r5
   17468:	movcc	r5, r7
   1746c:	sub	r7, r7, r5
   17470:	sub	r4, r4, r5
   17474:	mov	r2, r5
   17478:	add	r1, r0, r7
   1747c:	mov	r0, r4
   17480:	bl	113f4 <memcpy@plt>
   17484:	clz	r0, r6
   17488:	cmp	r7, #0
   1748c:	mov	r9, r5
   17490:	lsr	sl, r0, #5
   17494:	bne	17428 <__assert_fail@plt+0x5d58>
   17498:	ldr	r8, [sp, #32]
   1749c:	ldr	sl, [sp, #28]
   174a0:	ldr	r7, [sp, #36]	; 0x24
   174a4:	ldr	r3, [sp, #40]	; 0x28
   174a8:	ldr	r9, [fp, #20]
   174ac:	ldr	r5, [fp, #16]
   174b0:	ldr	r6, [sp, #16]
   174b4:	tst	r7, #128	; 0x80
   174b8:	bne	1728c <__assert_fail@plt+0x5bbc>
   174bc:	b	175dc <__assert_fail@plt+0x5f0c>
   174c0:	mov	r6, #0
   174c4:	mov	r0, r7
   174c8:	mov	r1, r9
   174cc:	mov	r3, #0
   174d0:	bl	1bf68 <__assert_fail@plt+0xa898>
   174d4:	ldr	r2, [sp, #40]	; 0x28
   174d8:	mov	sl, r0
   174dc:	mov	r9, r1
   174e0:	mls	r0, r0, r2, r7
   174e4:	add	r0, r0, r0, lsl #2
   174e8:	add	r0, r4, r0, lsl #1
   174ec:	udiv	r4, r0, r2
   174f0:	mls	r0, r4, r2, r0
   174f4:	lsl	r0, r0, #1
   174f8:	add	r0, r0, r5, lsr #1
   174fc:	cmp	r0, r2
   17500:	bcs	17518 <__assert_fail@plt+0x5e48>
   17504:	add	r1, r0, r5
   17508:	cmn	r0, r5
   1750c:	movwne	r1, #1
   17510:	mov	r5, r1
   17514:	b	17528 <__assert_fail@plt+0x5e58>
   17518:	add	r0, r0, r5
   1751c:	mov	r5, #2
   17520:	cmp	r2, r0
   17524:	movwcc	r5, #3
   17528:	add	r6, r6, #1
   1752c:	cmp	r6, #7
   17530:	bhi	17544 <__assert_fail@plt+0x5e74>
   17534:	subs	r0, sl, r2
   17538:	mov	r7, sl
   1753c:	sbcs	r0, r9, #0
   17540:	bcs	174c4 <__assert_fail@plt+0x5df4>
   17544:	rsbs	r0, sl, #9
   17548:	rscs	r0, r9, #0
   1754c:	bcc	175f8 <__assert_fail@plt+0x5f28>
   17550:	ldr	r0, [sp, #48]	; 0x30
   17554:	cmp	r0, #1
   17558:	bne	17600 <__assert_fail@plt+0x5f30>
   1755c:	and	r0, r4, #1
   17560:	add	r0, r5, r0
   17564:	cmp	r0, #2
   17568:	bhi	17610 <__assert_fail@plt+0x5f40>
   1756c:	b	17644 <__assert_fail@plt+0x5f74>
   17570:	mov	r6, #8
   17574:	and	r0, r7, #256	; 0x100
   17578:	tst	r7, #64	; 0x40
   1757c:	orrsne	r1, r6, r0
   17580:	movne	r1, #32
   17584:	addne	r8, sl, #648	; 0x288
   17588:	strbne	r1, [sl, #647]	; 0x287
   1758c:	cmp	r6, #0
   17590:	beq	175b8 <__assert_fail@plt+0x5ee8>
   17594:	ldr	r1, [sp, #24]
   17598:	cmp	r1, #0
   1759c:	moveq	r1, #107	; 0x6b
   175a0:	cmpeq	r6, #1
   175a4:	beq	175b4 <__assert_fail@plt+0x5ee4>
   175a8:	movw	r1, #56388	; 0xdc44
   175ac:	movt	r1, #1
   175b0:	ldrb	r1, [r1, r6]
   175b4:	strb	r1, [r8], #1
   175b8:	cmp	r0, #0
   175bc:	beq	175dc <__assert_fail@plt+0x5f0c>
   175c0:	ldr	r0, [sp, #24]
   175c4:	cmp	r0, #0
   175c8:	cmpne	r6, #0
   175cc:	movne	r0, #105	; 0x69
   175d0:	strbne	r0, [r8], #1
   175d4:	mov	r0, #66	; 0x42
   175d8:	strb	r0, [r8], #1
   175dc:	mov	r0, #0
   175e0:	strb	r0, [r8]
   175e4:	mov	r0, r4
   175e8:	sub	sp, fp, #48	; 0x30
   175ec:	vpop	{d8-d9}
   175f0:	add	sp, sp, #4
   175f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f8:	ldr	r0, [sp, #32]
   175fc:	b	16fa0 <__assert_fail@plt+0x58d0>
   17600:	cmp	r0, #0
   17604:	bne	17644 <__assert_fail@plt+0x5f74>
   17608:	cmp	r5, #0
   1760c:	beq	17644 <__assert_fail@plt+0x5f74>
   17610:	adds	r0, sl, #1
   17614:	add	r4, r4, #1
   17618:	mov	r5, #0
   1761c:	adc	r1, r9, #0
   17620:	cmp	r4, #10
   17624:	bne	17644 <__assert_fail@plt+0x5f74>
   17628:	rsbs	r3, r0, #9
   1762c:	mov	r4, #0
   17630:	mov	sl, r0
   17634:	mov	r9, r1
   17638:	mov	r5, #0
   1763c:	rscs	r3, r1, #0
   17640:	bcc	17694 <__assert_fail@plt+0x5fc4>
   17644:	ldr	r0, [sp, #36]	; 0x24
   17648:	tst	r0, #8
   1764c:	beq	17664 <__assert_fail@plt+0x5f94>
   17650:	cmp	r4, #0
   17654:	bne	17664 <__assert_fail@plt+0x5f94>
   17658:	ldr	r0, [sp, #32]
   1765c:	str	r0, [sp, #44]	; 0x2c
   17660:	b	1768c <__assert_fail@plt+0x5fbc>
   17664:	ldr	r1, [sp, #28]
   17668:	ldr	r2, [sp, #16]
   1766c:	add	r0, r4, #48	; 0x30
   17670:	strb	r0, [r1, #646]!	; 0x286
   17674:	sub	r0, r1, r2
   17678:	ldr	r1, [sp, #12]
   1767c:	str	r0, [sp, #44]	; 0x2c
   17680:	bl	113f4 <memcpy@plt>
   17684:	ldr	r2, [sp, #40]	; 0x28
   17688:	mov	r5, #0
   1768c:	mov	r4, #0
   17690:	b	16fa4 <__assert_fail@plt+0x58d4>
   17694:	ldr	r0, [sp, #32]
   17698:	mov	r5, #0
   1769c:	mov	sl, #10
   176a0:	mov	r9, #0
   176a4:	b	16fa0 <__assert_fail@plt+0x58d0>
   176a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   176ac:	add	fp, sp, #24
   176b0:	sub	sp, sp, #8
   176b4:	mov	r4, r2
   176b8:	mov	r8, r1
   176bc:	cmp	r0, #0
   176c0:	bne	176ec <__assert_fail@plt+0x601c>
   176c4:	movw	r0, #56329	; 0xdc09
   176c8:	movt	r0, #1
   176cc:	bl	114e4 <getenv@plt>
   176d0:	cmp	r0, #0
   176d4:	bne	176ec <__assert_fail@plt+0x601c>
   176d8:	movw	r0, #56340	; 0xdc14
   176dc:	movt	r0, #1
   176e0:	bl	114e4 <getenv@plt>
   176e4:	cmp	r0, #0
   176e8:	beq	17810 <__assert_fail@plt+0x6140>
   176ec:	mov	r6, r0
   176f0:	movw	r7, #56412	; 0xdc5c
   176f4:	movw	r1, #56400	; 0xdc50
   176f8:	mov	r3, #4
   176fc:	ldrb	r5, [r6], #1
   17700:	movt	r7, #1
   17704:	movt	r1, #1
   17708:	mov	r2, r7
   1770c:	cmp	r5, #39	; 0x27
   17710:	movne	r6, r0
   17714:	mov	r0, r6
   17718:	bl	1b384 <__assert_fail@plt+0x9cb4>
   1771c:	sub	r1, r5, #39	; 0x27
   17720:	cmp	r0, #0
   17724:	clz	r1, r1
   17728:	lsr	r1, r1, #5
   1772c:	lsl	r5, r1, #2
   17730:	blt	17758 <__assert_fail@plt+0x6088>
   17734:	ldr	r0, [r7, r0, lsl #2]
   17738:	mov	r2, #1
   1773c:	mov	r1, #0
   17740:	str	r2, [r4]
   17744:	str	r1, [r4, #4]
   17748:	orr	r1, r0, r5
   1774c:	mov	r0, #0
   17750:	str	r1, [r8]
   17754:	b	17788 <__assert_fail@plt+0x60b8>
   17758:	movw	r0, #56350	; 0xdc1e
   1775c:	add	r1, sp, #4
   17760:	mov	r2, #0
   17764:	mov	r3, r4
   17768:	mov	r7, #0
   1776c:	movt	r0, #1
   17770:	str	r0, [sp]
   17774:	mov	r0, r6
   17778:	bl	1a480 <__assert_fail@plt+0x8db0>
   1777c:	cmp	r0, #0
   17780:	beq	177cc <__assert_fail@plt+0x60fc>
   17784:	str	r7, [r8]
   17788:	ldrd	r2, [r4]
   1778c:	orrs	r1, r2, r3
   17790:	beq	1779c <__assert_fail@plt+0x60cc>
   17794:	sub	sp, fp, #24
   17798:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1779c:	movw	r0, #53488	; 0xd0f0
   177a0:	movt	r0, #1
   177a4:	bl	114e4 <getenv@plt>
   177a8:	cmp	r0, #0
   177ac:	mov	r2, #512	; 0x200
   177b0:	mov	r0, #4
   177b4:	mov	r1, #0
   177b8:	movweq	r2, #1024	; 0x400
   177bc:	str	r2, [r4]
   177c0:	str	r1, [r4, #4]
   177c4:	sub	sp, fp, #24
   177c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   177cc:	ldrb	r0, [r6]
   177d0:	sub	r0, r0, #48	; 0x30
   177d4:	uxtb	r0, r0
   177d8:	cmp	r0, #10
   177dc:	bcc	17808 <__assert_fail@plt+0x6138>
   177e0:	ldr	r0, [sp, #4]
   177e4:	cmp	r0, r6
   177e8:	beq	17838 <__assert_fail@plt+0x6168>
   177ec:	ldrb	r2, [r6, #1]
   177f0:	add	r1, r6, #1
   177f4:	mov	r6, r1
   177f8:	sub	r2, r2, #48	; 0x30
   177fc:	uxtb	r2, r2
   17800:	cmp	r2, #10
   17804:	bcs	177e4 <__assert_fail@plt+0x6114>
   17808:	mov	r1, r5
   1780c:	b	1774c <__assert_fail@plt+0x607c>
   17810:	movw	r0, #53488	; 0xd0f0
   17814:	movt	r0, #1
   17818:	bl	114e4 <getenv@plt>
   1781c:	mov	r2, #512	; 0x200
   17820:	cmp	r0, #0
   17824:	mov	r1, #0
   17828:	movweq	r2, #1024	; 0x400
   1782c:	str	r2, [r4]
   17830:	str	r1, [r4, #4]
   17834:	b	1774c <__assert_fail@plt+0x607c>
   17838:	ldrb	r2, [r0, #-1]
   1783c:	orr	r1, r5, #384	; 0x180
   17840:	cmp	r2, #66	; 0x42
   17844:	mov	r2, r1
   17848:	orrne	r2, r5, #128	; 0x80
   1784c:	bne	17860 <__assert_fail@plt+0x6190>
   17850:	ldrb	r0, [r0, #-2]
   17854:	cmp	r0, #105	; 0x69
   17858:	orreq	r1, r2, #32
   1785c:	b	1774c <__assert_fail@plt+0x607c>
   17860:	orr	r1, r2, #32
   17864:	b	1774c <__assert_fail@plt+0x607c>
   17868:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1786c:	add	fp, sp, #24
   17870:	sub	sp, sp, #8
   17874:	movw	r6, #61912	; 0xf1d8
   17878:	mov	r4, #0
   1787c:	cmp	r0, #2
   17880:	movt	r6, #2
   17884:	ldr	r7, [r6]
   17888:	str	r4, [r6]
   1788c:	bne	17900 <__assert_fail@plt+0x6230>
   17890:	mov	r8, r3
   17894:	movw	r3, #56428	; 0xdc6c
   17898:	mov	r5, r2
   1789c:	movw	r2, #56420	; 0xdc64
   178a0:	mov	r0, #2
   178a4:	str	r4, [sp]
   178a8:	movt	r2, #1
   178ac:	movt	r3, #1
   178b0:	bl	11550 <getopt_long@plt>
   178b4:	cmp	r0, #104	; 0x68
   178b8:	beq	178f4 <__assert_fail@plt+0x6224>
   178bc:	cmp	r0, #118	; 0x76
   178c0:	bne	17900 <__assert_fail@plt+0x6230>
   178c4:	movw	r0, #61908	; 0xf1d4
   178c8:	ldr	r3, [fp, #8]
   178cc:	add	r1, fp, #16
   178d0:	mov	r2, r8
   178d4:	movt	r0, #2
   178d8:	str	r1, [sp, #4]
   178dc:	str	r1, [sp]
   178e0:	mov	r1, r5
   178e4:	ldr	r0, [r0]
   178e8:	bl	19b94 <__assert_fail@plt+0x84c4>
   178ec:	mov	r0, #0
   178f0:	bl	11568 <exit@plt>
   178f4:	ldr	r1, [fp, #12]
   178f8:	mov	r0, #0
   178fc:	blx	r1
   17900:	movw	r0, #61896	; 0xf1c8
   17904:	str	r7, [r6]
   17908:	movt	r0, #2
   1790c:	str	r4, [r0]
   17910:	sub	sp, fp, #24
   17914:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17918:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1791c:	add	fp, sp, #24
   17920:	sub	sp, sp, #8
   17924:	movw	r6, #61912	; 0xf1d8
   17928:	mov	r8, r3
   1792c:	ldr	r3, [fp, #12]
   17930:	mov	r5, r2
   17934:	mov	r2, #1
   17938:	movw	r4, #51037	; 0xc75d
   1793c:	movt	r6, #2
   17940:	movt	r4, #1
   17944:	ldr	r7, [r6]
   17948:	str	r2, [r6]
   1794c:	mov	r2, #0
   17950:	str	r2, [sp]
   17954:	movw	r2, #56420	; 0xdc64
   17958:	cmp	r3, #0
   1795c:	movt	r2, #1
   17960:	movw	r3, #56428	; 0xdc6c
   17964:	movne	r2, r4
   17968:	movt	r3, #1
   1796c:	bl	11550 <getopt_long@plt>
   17970:	cmn	r0, #1
   17974:	beq	179a4 <__assert_fail@plt+0x62d4>
   17978:	ldr	r1, [fp, #16]
   1797c:	cmp	r0, #104	; 0x68
   17980:	beq	1799c <__assert_fail@plt+0x62cc>
   17984:	cmp	r0, #118	; 0x76
   17988:	beq	179b0 <__assert_fail@plt+0x62e0>
   1798c:	movw	r0, #61804	; 0xf16c
   17990:	movt	r0, #2
   17994:	ldr	r0, [r0]
   17998:	b	179a0 <__assert_fail@plt+0x62d0>
   1799c:	mov	r0, #0
   179a0:	blx	r1
   179a4:	str	r7, [r6]
   179a8:	sub	sp, fp, #24
   179ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179b0:	movw	r0, #61908	; 0xf1d4
   179b4:	ldr	r3, [fp, #8]
   179b8:	add	r1, fp, #20
   179bc:	mov	r2, r8
   179c0:	movt	r0, #2
   179c4:	str	r1, [sp, #4]
   179c8:	str	r1, [sp]
   179cc:	mov	r1, r5
   179d0:	ldr	r0, [r0]
   179d4:	bl	19b94 <__assert_fail@plt+0x84c4>
   179d8:	mov	r0, #0
   179dc:	bl	11568 <exit@plt>
   179e0:	push	{r4, r5, fp, lr}
   179e4:	add	fp, sp, #8
   179e8:	cmp	r0, #0
   179ec:	beq	17a80 <__assert_fail@plt+0x63b0>
   179f0:	mov	r1, #47	; 0x2f
   179f4:	mov	r4, r0
   179f8:	bl	1164c <strrchr@plt>
   179fc:	cmp	r0, #0
   17a00:	mov	r5, r4
   17a04:	addne	r5, r0, #1
   17a08:	sub	r0, r5, r4
   17a0c:	cmp	r0, #7
   17a10:	blt	17a64 <__assert_fail@plt+0x6394>
   17a14:	movw	r1, #56532	; 0xdcd4
   17a18:	sub	r0, r5, #7
   17a1c:	mov	r2, #7
   17a20:	movt	r1, #1
   17a24:	bl	11688 <strncmp@plt>
   17a28:	cmp	r0, #0
   17a2c:	bne	17a64 <__assert_fail@plt+0x6394>
   17a30:	movw	r1, #56540	; 0xdcdc
   17a34:	mov	r0, r5
   17a38:	mov	r2, #3
   17a3c:	movt	r1, #1
   17a40:	bl	11688 <strncmp@plt>
   17a44:	cmp	r0, #0
   17a48:	beq	17a54 <__assert_fail@plt+0x6384>
   17a4c:	mov	r4, r5
   17a50:	b	17a64 <__assert_fail@plt+0x6394>
   17a54:	movw	r0, #61888	; 0xf1c0
   17a58:	add	r4, r5, #3
   17a5c:	movt	r0, #2
   17a60:	str	r4, [r0]
   17a64:	movw	r0, #61892	; 0xf1c4
   17a68:	movt	r0, #2
   17a6c:	str	r4, [r0]
   17a70:	movw	r0, #62564	; 0xf464
   17a74:	movt	r0, #2
   17a78:	str	r4, [r0]
   17a7c:	pop	{r4, r5, fp, pc}
   17a80:	movw	r0, #61904	; 0xf1d0
   17a84:	mov	r1, #55	; 0x37
   17a88:	mov	r2, #1
   17a8c:	movt	r0, #2
   17a90:	ldr	r3, [r0]
   17a94:	movw	r0, #56476	; 0xdc9c
   17a98:	movt	r0, #1
   17a9c:	bl	11490 <fwrite@plt>
   17aa0:	bl	116a0 <abort@plt>
   17aa4:	push	{r4, r5, r6, sl, fp, lr}
   17aa8:	add	fp, sp, #16
   17aac:	mov	r4, r0
   17ab0:	movw	r0, #62568	; 0xf468
   17ab4:	movt	r0, #2
   17ab8:	cmp	r4, #0
   17abc:	moveq	r4, r0
   17ac0:	bl	11598 <__errno_location@plt>
   17ac4:	ldr	r6, [r0]
   17ac8:	mov	r5, r0
   17acc:	mov	r0, r4
   17ad0:	mov	r1, #48	; 0x30
   17ad4:	bl	1a33c <__assert_fail@plt+0x8c6c>
   17ad8:	str	r6, [r5]
   17adc:	pop	{r4, r5, r6, sl, fp, pc}
   17ae0:	movw	r1, #62568	; 0xf468
   17ae4:	cmp	r0, #0
   17ae8:	movt	r1, #2
   17aec:	movne	r1, r0
   17af0:	ldr	r0, [r1]
   17af4:	bx	lr
   17af8:	movw	r2, #62568	; 0xf468
   17afc:	cmp	r0, #0
   17b00:	movt	r2, #2
   17b04:	movne	r2, r0
   17b08:	str	r1, [r2]
   17b0c:	bx	lr
   17b10:	movw	r3, #62568	; 0xf468
   17b14:	cmp	r0, #0
   17b18:	movt	r3, #2
   17b1c:	movne	r3, r0
   17b20:	ubfx	r0, r1, #5, #3
   17b24:	and	r1, r1, #31
   17b28:	add	r0, r3, r0, lsl #2
   17b2c:	ldr	r3, [r0, #8]
   17b30:	eor	r2, r2, r3, lsr r1
   17b34:	and	r2, r2, #1
   17b38:	eor	r2, r3, r2, lsl r1
   17b3c:	str	r2, [r0, #8]
   17b40:	mov	r0, #1
   17b44:	and	r0, r0, r3, lsr r1
   17b48:	bx	lr
   17b4c:	movw	r2, #62568	; 0xf468
   17b50:	cmp	r0, #0
   17b54:	movt	r2, #2
   17b58:	movne	r2, r0
   17b5c:	ldr	r0, [r2, #4]
   17b60:	str	r1, [r2, #4]
   17b64:	bx	lr
   17b68:	movw	r3, #62568	; 0xf468
   17b6c:	cmp	r0, #0
   17b70:	movt	r3, #2
   17b74:	movne	r3, r0
   17b78:	cmp	r1, #0
   17b7c:	mov	r0, #10
   17b80:	cmpne	r2, #0
   17b84:	str	r0, [r3]
   17b88:	bne	17b98 <__assert_fail@plt+0x64c8>
   17b8c:	push	{fp, lr}
   17b90:	mov	fp, sp
   17b94:	bl	116a0 <abort@plt>
   17b98:	str	r1, [r3, #40]	; 0x28
   17b9c:	str	r2, [r3, #44]	; 0x2c
   17ba0:	bx	lr
   17ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba8:	add	fp, sp, #28
   17bac:	sub	sp, sp, #20
   17bb0:	mov	r7, r0
   17bb4:	ldr	r0, [fp, #8]
   17bb8:	movw	r5, #62568	; 0xf468
   17bbc:	mov	r8, r3
   17bc0:	mov	r9, r2
   17bc4:	mov	sl, r1
   17bc8:	movt	r5, #2
   17bcc:	cmp	r0, #0
   17bd0:	movne	r5, r0
   17bd4:	bl	11598 <__errno_location@plt>
   17bd8:	mov	r4, r0
   17bdc:	ldm	r5, {r0, r1}
   17be0:	ldr	r2, [r5, #40]	; 0x28
   17be4:	ldr	r3, [r5, #44]	; 0x2c
   17be8:	add	r5, r5, #8
   17bec:	ldr	r6, [r4]
   17bf0:	stm	sp, {r0, r1, r5}
   17bf4:	str	r2, [sp, #12]
   17bf8:	str	r3, [sp, #16]
   17bfc:	mov	r0, r7
   17c00:	mov	r1, sl
   17c04:	mov	r2, r9
   17c08:	mov	r3, r8
   17c0c:	bl	17c1c <__assert_fail@plt+0x654c>
   17c10:	str	r6, [r4]
   17c14:	sub	sp, fp, #28
   17c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c20:	add	fp, sp, #28
   17c24:	sub	sp, sp, #156	; 0x9c
   17c28:	str	r0, [sp, #80]	; 0x50
   17c2c:	ldr	r0, [fp, #12]
   17c30:	mov	r6, r1
   17c34:	mov	r9, r3
   17c38:	str	r2, [fp, #-84]	; 0xffffffac
   17c3c:	and	r1, r0, #4
   17c40:	str	r1, [sp, #32]
   17c44:	and	r1, r0, #1
   17c48:	str	r1, [sp, #36]	; 0x24
   17c4c:	ubfx	r4, r0, #1, #1
   17c50:	bl	114a8 <__ctype_get_mb_cur_max@plt>
   17c54:	str	r0, [sp, #40]	; 0x28
   17c58:	ldr	r0, [fp, #24]
   17c5c:	ldr	r7, [fp, #8]
   17c60:	mov	r1, #0
   17c64:	mov	r5, #1
   17c68:	str	r1, [fp, #-56]	; 0xffffffc8
   17c6c:	mov	r1, #0
   17c70:	str	r1, [sp, #60]	; 0x3c
   17c74:	str	r0, [sp, #76]	; 0x4c
   17c78:	ldr	r0, [fp, #20]
   17c7c:	str	r0, [sp, #72]	; 0x48
   17c80:	mov	r0, #0
   17c84:	str	r0, [sp, #56]	; 0x38
   17c88:	mov	r0, #0
   17c8c:	str	r0, [sp, #92]	; 0x5c
   17c90:	mov	r0, #0
   17c94:	str	r0, [fp, #-76]	; 0xffffffb4
   17c98:	mov	r0, #0
   17c9c:	cmp	r7, #10
   17ca0:	bhi	18c20 <__assert_fail@plt+0x7550>
   17ca4:	add	r1, pc, #28
   17ca8:	mov	sl, r6
   17cac:	ldr	r6, [sp, #80]	; 0x50
   17cb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17cb4:	mov	r8, #0
   17cb8:	mov	r2, #1
   17cbc:	mov	r3, #0
   17cc0:	mov	lr, r9
   17cc4:	ldr	pc, [r1, r7, lsl #2]
   17cc8:	andeq	r7, r1, ip, lsr #27
   17ccc:	ldrdeq	r7, [r1], -r8
   17cd0:	muleq	r1, ip, sp
   17cd4:	muleq	r1, r4, sp
   17cd8:	andeq	r7, r1, ip, asr #27
   17cdc:	andeq	r7, r1, r0, lsr #28
   17ce0:			; <UNDEFINED> instruction: 0x00017dbc
   17ce4:	andeq	r7, r1, ip, ror lr
   17ce8:	strdeq	r7, [r1], -r4
   17cec:	strdeq	r7, [r1], -r4
   17cf0:	andeq	r7, r1, ip, lsl sp
   17cf4:	movw	r0, #56622	; 0xdd2e
   17cf8:	mov	r1, r7
   17cfc:	movt	r0, #1
   17d00:	bl	1962c <__assert_fail@plt+0x7f5c>
   17d04:	str	r0, [sp, #72]	; 0x48
   17d08:	movw	r0, #56624	; 0xdd30
   17d0c:	mov	r1, r7
   17d10:	movt	r0, #1
   17d14:	bl	1962c <__assert_fail@plt+0x7f5c>
   17d18:	str	r0, [sp, #76]	; 0x4c
   17d1c:	str	r5, [fp, #-48]	; 0xffffffd0
   17d20:	mov	r8, #0
   17d24:	mov	r5, r7
   17d28:	tst	r4, #1
   17d2c:	bne	17d64 <__assert_fail@plt+0x6694>
   17d30:	ldr	r0, [sp, #72]	; 0x48
   17d34:	ldrb	r0, [r0]
   17d38:	cmp	r0, #0
   17d3c:	beq	17d64 <__assert_fail@plt+0x6694>
   17d40:	ldr	r1, [sp, #72]	; 0x48
   17d44:	mov	r8, #0
   17d48:	add	r1, r1, #1
   17d4c:	cmp	r8, sl
   17d50:	strbcc	r0, [r6, r8]
   17d54:	ldrb	r0, [r1, r8]
   17d58:	add	r8, r8, #1
   17d5c:	cmp	r0, #0
   17d60:	bne	17d4c <__assert_fail@plt+0x667c>
   17d64:	ldr	r7, [sp, #76]	; 0x4c
   17d68:	mov	r0, r7
   17d6c:	bl	11574 <strlen@plt>
   17d70:	str	r7, [sp, #92]	; 0x5c
   17d74:	mov	r7, r5
   17d78:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d7c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17d80:	str	r0, [fp, #-76]	; 0xffffffb4
   17d84:	mov	r2, #1
   17d88:	mov	r3, r4
   17d8c:	mov	lr, r9
   17d90:	b	17e7c <__assert_fail@plt+0x67ac>
   17d94:	mov	r0, #1
   17d98:	b	17dd8 <__assert_fail@plt+0x6708>
   17d9c:	tst	r4, #1
   17da0:	bne	17dd8 <__assert_fail@plt+0x6708>
   17da4:	mov	r2, r0
   17da8:	b	17e00 <__assert_fail@plt+0x6730>
   17dac:	mov	r7, #0
   17db0:	mov	r8, #0
   17db4:	mov	r2, r0
   17db8:	b	17e78 <__assert_fail@plt+0x67a8>
   17dbc:	mov	r0, #1
   17dc0:	mov	r8, #0
   17dc4:	mov	r7, #5
   17dc8:	b	17e34 <__assert_fail@plt+0x6764>
   17dcc:	mov	r2, #1
   17dd0:	tst	r4, #1
   17dd4:	beq	17e00 <__assert_fail@plt+0x6730>
   17dd8:	mov	r1, #1
   17ddc:	mov	r8, #0
   17de0:	mov	r7, #2
   17de4:	mov	r2, r0
   17de8:	mov	r3, #1
   17dec:	str	r1, [fp, #-76]	; 0xffffffb4
   17df0:	movw	r1, #56624	; 0xdd30
   17df4:	movt	r1, #1
   17df8:	str	r1, [sp, #92]	; 0x5c
   17dfc:	b	17e7c <__assert_fail@plt+0x67ac>
   17e00:	cmp	sl, #0
   17e04:	mov	r8, #1
   17e08:	mov	r7, #2
   17e0c:	movne	r0, #39	; 0x27
   17e10:	strbne	r0, [r6]
   17e14:	movw	r0, #56624	; 0xdd30
   17e18:	movt	r0, #1
   17e1c:	b	17e6c <__assert_fail@plt+0x679c>
   17e20:	mov	r7, #5
   17e24:	tst	r4, #1
   17e28:	beq	17e50 <__assert_fail@plt+0x6780>
   17e2c:	mov	r0, #1
   17e30:	mov	r8, #0
   17e34:	str	r0, [fp, #-76]	; 0xffffffb4
   17e38:	movw	r0, #56620	; 0xdd2c
   17e3c:	mov	r2, #1
   17e40:	mov	r3, #1
   17e44:	movt	r0, #1
   17e48:	str	r0, [sp, #92]	; 0x5c
   17e4c:	b	17e7c <__assert_fail@plt+0x67ac>
   17e50:	cmp	sl, #0
   17e54:	mov	r8, #1
   17e58:	mov	r2, #1
   17e5c:	movne	r0, #34	; 0x22
   17e60:	strbne	r0, [r6]
   17e64:	movw	r0, #56620	; 0xdd2c
   17e68:	movt	r0, #1
   17e6c:	str	r0, [sp, #92]	; 0x5c
   17e70:	mov	r0, #1
   17e74:	str	r0, [fp, #-76]	; 0xffffffb4
   17e78:	mov	r3, #0
   17e7c:	ldr	r0, [fp, #16]
   17e80:	str	r3, [fp, #-72]	; 0xffffffb8
   17e84:	str	r7, [fp, #-64]	; 0xffffffc0
   17e88:	str	r2, [sp, #84]	; 0x54
   17e8c:	cmp	r0, #0
   17e90:	movwne	r0, #1
   17e94:	and	r0, r0, r3
   17e98:	str	r0, [fp, #-88]	; 0xffffffa8
   17e9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17ea0:	cmp	r0, #0
   17ea4:	movwne	r0, #1
   17ea8:	subs	r4, r7, #2
   17eac:	mov	r7, #0
   17eb0:	and	r1, r0, r3
   17eb4:	str	r4, [fp, #-80]	; 0xffffffb0
   17eb8:	and	r1, r2, r1
   17ebc:	str	r1, [sp, #48]	; 0x30
   17ec0:	clz	r1, r4
   17ec4:	lsr	r1, r1, #5
   17ec8:	and	r1, r1, r3
   17ecc:	eor	r3, r3, #1
   17ed0:	str	r1, [sp, #64]	; 0x40
   17ed4:	mov	r1, r4
   17ed8:	str	r3, [sp, #88]	; 0x58
   17edc:	movwne	r1, #1
   17ee0:	orr	r3, r1, r3
   17ee4:	and	r1, r1, r2
   17ee8:	and	r0, r0, r1
   17eec:	str	r3, [sp, #68]	; 0x44
   17ef0:	str	r1, [fp, #-68]	; 0xffffffbc
   17ef4:	str	r0, [fp, #-60]	; 0xffffffc4
   17ef8:	eor	r0, r2, #1
   17efc:	str	r0, [sp, #52]	; 0x34
   17f00:	cmn	lr, #1
   17f04:	beq	17f14 <__assert_fail@plt+0x6844>
   17f08:	cmp	r7, lr
   17f0c:	bne	17f20 <__assert_fail@plt+0x6850>
   17f10:	b	18a48 <__assert_fail@plt+0x7378>
   17f14:	ldrb	r0, [ip, r7]
   17f18:	cmp	r0, #0
   17f1c:	beq	18a50 <__assert_fail@plt+0x7380>
   17f20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17f24:	mov	r9, #0
   17f28:	str	r5, [fp, #-48]	; 0xffffffd0
   17f2c:	cmp	r0, #0
   17f30:	beq	17f64 <__assert_fail@plt+0x6894>
   17f34:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17f38:	add	r4, r7, r0
   17f3c:	cmp	r0, #2
   17f40:	bcc	17f5c <__assert_fail@plt+0x688c>
   17f44:	cmn	lr, #1
   17f48:	bne	17f5c <__assert_fail@plt+0x688c>
   17f4c:	mov	r0, ip
   17f50:	bl	11574 <strlen@plt>
   17f54:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f58:	mov	lr, r0
   17f5c:	cmp	r4, lr
   17f60:	bls	17f6c <__assert_fail@plt+0x689c>
   17f64:	mov	r0, #0
   17f68:	b	17fac <__assert_fail@plt+0x68dc>
   17f6c:	ldr	r1, [sp, #92]	; 0x5c
   17f70:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17f74:	add	r0, ip, r7
   17f78:	mov	r4, lr
   17f7c:	bl	11424 <memcmp@plt>
   17f80:	ldr	r2, [sp, #88]	; 0x58
   17f84:	cmp	r0, #0
   17f88:	mov	r1, r0
   17f8c:	movwne	r1, #1
   17f90:	orr	r1, r1, r2
   17f94:	tst	r1, #1
   17f98:	beq	18ae0 <__assert_fail@plt+0x7410>
   17f9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17fa0:	clz	r0, r0
   17fa4:	mov	lr, r4
   17fa8:	lsr	r0, r0, #5
   17fac:	str	r0, [fp, #-52]	; 0xffffffcc
   17fb0:	ldrb	r5, [ip, r7]
   17fb4:	cmp	r5, #126	; 0x7e
   17fb8:	bhi	18370 <__assert_fail@plt+0x6ca0>
   17fbc:	add	r3, pc, #16
   17fc0:	mov	r4, #1
   17fc4:	mov	r2, #110	; 0x6e
   17fc8:	mov	r0, #97	; 0x61
   17fcc:	mov	r1, #0
   17fd0:	ldr	pc, [r3, r5, lsl #2]
   17fd4:	andeq	r8, r1, ip, ror #4
   17fd8:	andeq	r8, r1, r0, ror r3
   17fdc:	andeq	r8, r1, r0, ror r3
   17fe0:	andeq	r8, r1, r0, ror r3
   17fe4:	andeq	r8, r1, r0, ror r3
   17fe8:	andeq	r8, r1, r0, ror r3
   17fec:	andeq	r8, r1, r0, ror r3
   17ff0:	andeq	r8, r1, r4, lsr #8
   17ff4:	andeq	r8, r1, ip, asr #4
   17ff8:	andeq	r8, r1, r4, asr #4
   17ffc:	andeq	r8, r1, r8, asr r2
   18000:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18004:	andeq	r8, r1, ip, lsr r2
   18008:	andeq	r8, r1, r4, asr r2
   1800c:	andeq	r8, r1, r0, ror r3
   18010:	andeq	r8, r1, r0, ror r3
   18014:	andeq	r8, r1, r0, ror r3
   18018:	andeq	r8, r1, r0, ror r3
   1801c:	andeq	r8, r1, r0, ror r3
   18020:	andeq	r8, r1, r0, ror r3
   18024:	andeq	r8, r1, r0, ror r3
   18028:	andeq	r8, r1, r0, ror r3
   1802c:	andeq	r8, r1, r0, ror r3
   18030:	andeq	r8, r1, r0, ror r3
   18034:	andeq	r8, r1, r0, ror r3
   18038:	andeq	r8, r1, r0, ror r3
   1803c:	andeq	r8, r1, r0, ror r3
   18040:	andeq	r8, r1, r0, ror r3
   18044:	andeq	r8, r1, r0, ror r3
   18048:	andeq	r8, r1, r0, ror r3
   1804c:	andeq	r8, r1, r0, ror r3
   18050:	andeq	r8, r1, r0, ror r3
   18054:	ldrdeq	r8, [r1], -ip
   18058:	andeq	r8, r1, r0, ror #7
   1805c:	andeq	r8, r1, r0, ror #7
   18060:	andeq	r8, r1, r4, ror #3
   18064:	andeq	r8, r1, r0, ror #7
   18068:	ldrdeq	r8, [r1], -r0
   1806c:	andeq	r8, r1, r0, ror #7
   18070:	andeq	r8, r1, r0, ror #5
   18074:	andeq	r8, r1, r0, ror #7
   18078:	andeq	r8, r1, r0, ror #7
   1807c:	andeq	r8, r1, r0, ror #7
   18080:	ldrdeq	r8, [r1], -r0
   18084:	ldrdeq	r8, [r1], -r0
   18088:	ldrdeq	r8, [r1], -r0
   1808c:	ldrdeq	r8, [r1], -r0
   18090:	ldrdeq	r8, [r1], -r0
   18094:	ldrdeq	r8, [r1], -r0
   18098:	ldrdeq	r8, [r1], -r0
   1809c:	ldrdeq	r8, [r1], -r0
   180a0:	ldrdeq	r8, [r1], -r0
   180a4:	ldrdeq	r8, [r1], -r0
   180a8:	ldrdeq	r8, [r1], -r0
   180ac:	ldrdeq	r8, [r1], -r0
   180b0:	ldrdeq	r8, [r1], -r0
   180b4:	ldrdeq	r8, [r1], -r0
   180b8:	ldrdeq	r8, [r1], -r0
   180bc:	ldrdeq	r8, [r1], -r0
   180c0:	andeq	r8, r1, r0, ror #7
   180c4:	andeq	r8, r1, r0, ror #7
   180c8:	andeq	r8, r1, r0, ror #7
   180cc:	andeq	r8, r1, r0, ror #7
   180d0:	andeq	r8, r1, ip, lsr #5
   180d4:	andeq	r8, r1, r0, ror r3
   180d8:	ldrdeq	r8, [r1], -r0
   180dc:	ldrdeq	r8, [r1], -r0
   180e0:	ldrdeq	r8, [r1], -r0
   180e4:	ldrdeq	r8, [r1], -r0
   180e8:	ldrdeq	r8, [r1], -r0
   180ec:	ldrdeq	r8, [r1], -r0
   180f0:	ldrdeq	r8, [r1], -r0
   180f4:	ldrdeq	r8, [r1], -r0
   180f8:	ldrdeq	r8, [r1], -r0
   180fc:	ldrdeq	r8, [r1], -r0
   18100:	ldrdeq	r8, [r1], -r0
   18104:	ldrdeq	r8, [r1], -r0
   18108:	ldrdeq	r8, [r1], -r0
   1810c:	ldrdeq	r8, [r1], -r0
   18110:	ldrdeq	r8, [r1], -r0
   18114:	ldrdeq	r8, [r1], -r0
   18118:	ldrdeq	r8, [r1], -r0
   1811c:	ldrdeq	r8, [r1], -r0
   18120:	ldrdeq	r8, [r1], -r0
   18124:	ldrdeq	r8, [r1], -r0
   18128:	ldrdeq	r8, [r1], -r0
   1812c:	ldrdeq	r8, [r1], -r0
   18130:	ldrdeq	r8, [r1], -r0
   18134:	ldrdeq	r8, [r1], -r0
   18138:	ldrdeq	r8, [r1], -r0
   1813c:	ldrdeq	r8, [r1], -r0
   18140:	andeq	r8, r1, r0, ror #7
   18144:	andeq	r8, r1, r8, lsl r2
   18148:	ldrdeq	r8, [r1], -r0
   1814c:	andeq	r8, r1, r0, ror #7
   18150:	ldrdeq	r8, [r1], -r0
   18154:	andeq	r8, r1, r0, ror #7
   18158:	ldrdeq	r8, [r1], -r0
   1815c:	ldrdeq	r8, [r1], -r0
   18160:	ldrdeq	r8, [r1], -r0
   18164:	ldrdeq	r8, [r1], -r0
   18168:	ldrdeq	r8, [r1], -r0
   1816c:	ldrdeq	r8, [r1], -r0
   18170:	ldrdeq	r8, [r1], -r0
   18174:	ldrdeq	r8, [r1], -r0
   18178:	ldrdeq	r8, [r1], -r0
   1817c:	ldrdeq	r8, [r1], -r0
   18180:	ldrdeq	r8, [r1], -r0
   18184:	ldrdeq	r8, [r1], -r0
   18188:	ldrdeq	r8, [r1], -r0
   1818c:	ldrdeq	r8, [r1], -r0
   18190:	ldrdeq	r8, [r1], -r0
   18194:	ldrdeq	r8, [r1], -r0
   18198:	ldrdeq	r8, [r1], -r0
   1819c:	ldrdeq	r8, [r1], -r0
   181a0:	ldrdeq	r8, [r1], -r0
   181a4:	ldrdeq	r8, [r1], -r0
   181a8:	ldrdeq	r8, [r1], -r0
   181ac:	ldrdeq	r8, [r1], -r0
   181b0:	ldrdeq	r8, [r1], -r0
   181b4:	ldrdeq	r8, [r1], -r0
   181b8:	ldrdeq	r8, [r1], -r0
   181bc:	ldrdeq	r8, [r1], -r0
   181c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181c4:	andeq	r8, r1, r0, ror #7
   181c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181cc:	andeq	r8, r1, r4, ror #3
   181d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   181d4:	cmp	r0, #0
   181d8:	beq	18438 <__assert_fail@plt+0x6d68>
   181dc:	ldr	r0, [fp, #16]
   181e0:	b	1843c <__assert_fail@plt+0x6d6c>
   181e4:	mov	r4, #0
   181e8:	cmp	r7, #0
   181ec:	beq	183dc <__assert_fail@plt+0x6d0c>
   181f0:	mov	r9, #0
   181f4:	b	181d0 <__assert_fail@plt+0x6b00>
   181f8:	mov	r4, #0
   181fc:	cmn	lr, #1
   18200:	beq	183c0 <__assert_fail@plt+0x6cf0>
   18204:	cmp	r7, #0
   18208:	bne	181f0 <__assert_fail@plt+0x6b20>
   1820c:	cmp	lr, #1
   18210:	beq	183dc <__assert_fail@plt+0x6d0c>
   18214:	b	181f0 <__assert_fail@plt+0x6b20>
   18218:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1821c:	cmp	r0, #2
   18220:	bne	18400 <__assert_fail@plt+0x6d30>
   18224:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18228:	tst	r0, #1
   1822c:	bne	18afc <__assert_fail@plt+0x742c>
   18230:	mov	r9, #0
   18234:	mov	r0, #92	; 0x5c
   18238:	b	18414 <__assert_fail@plt+0x6d44>
   1823c:	mov	r0, #102	; 0x66
   18240:	b	18424 <__assert_fail@plt+0x6d54>
   18244:	mov	r2, #116	; 0x74
   18248:	b	18258 <__assert_fail@plt+0x6b88>
   1824c:	mov	r0, #98	; 0x62
   18250:	b	18424 <__assert_fail@plt+0x6d54>
   18254:	mov	r2, #114	; 0x72
   18258:	ldr	r0, [sp, #68]	; 0x44
   1825c:	tst	r0, #1
   18260:	mov	r0, r2
   18264:	bne	18424 <__assert_fail@plt+0x6d54>
   18268:	b	18afc <__assert_fail@plt+0x742c>
   1826c:	ldr	r0, [sp, #84]	; 0x54
   18270:	tst	r0, #1
   18274:	beq	18514 <__assert_fail@plt+0x6e44>
   18278:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1827c:	tst	r0, #1
   18280:	bne	18c0c <__assert_fail@plt+0x753c>
   18284:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18288:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1828c:	cmp	r0, #2
   18290:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18294:	movwne	r0, #1
   18298:	orr	r0, r0, r2
   1829c:	tst	r0, #1
   182a0:	beq	188e4 <__assert_fail@plt+0x7214>
   182a4:	mov	r0, r8
   182a8:	b	18918 <__assert_fail@plt+0x7248>
   182ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182b0:	mov	r9, #0
   182b4:	mov	r5, #63	; 0x3f
   182b8:	cmp	r0, #5
   182bc:	beq	186c8 <__assert_fail@plt+0x6ff8>
   182c0:	cmp	r0, #2
   182c4:	bne	1876c <__assert_fail@plt+0x709c>
   182c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   182cc:	tst	r0, #1
   182d0:	beq	18770 <__assert_fail@plt+0x70a0>
   182d4:	b	18afc <__assert_fail@plt+0x742c>
   182d8:	mov	r0, #118	; 0x76
   182dc:	b	18424 <__assert_fail@plt+0x6d54>
   182e0:	mov	r0, #1
   182e4:	mov	r5, #39	; 0x27
   182e8:	str	r0, [sp, #60]	; 0x3c
   182ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182f0:	cmp	r0, #2
   182f4:	bne	18368 <__assert_fail@plt+0x6c98>
   182f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   182fc:	tst	r0, #1
   18300:	bne	18afc <__assert_fail@plt+0x742c>
   18304:	ldr	r2, [sp, #56]	; 0x38
   18308:	clz	r1, sl
   1830c:	mov	r9, #0
   18310:	lsr	r1, r1, #5
   18314:	cmp	r2, #0
   18318:	mov	r0, r2
   1831c:	movwne	r0, #1
   18320:	orrs	r0, r0, r1
   18324:	moveq	r2, sl
   18328:	moveq	sl, r0
   1832c:	cmp	r8, sl
   18330:	str	r2, [sp, #56]	; 0x38
   18334:	movcc	r0, #39	; 0x27
   18338:	strbcc	r0, [r6, r8]
   1833c:	add	r0, r8, #1
   18340:	cmp	r0, sl
   18344:	movcc	r1, #92	; 0x5c
   18348:	strbcc	r1, [r6, r0]
   1834c:	add	r0, r8, #2
   18350:	add	r8, r8, #3
   18354:	cmp	r0, sl
   18358:	movcc	r1, #39	; 0x27
   1835c:	strbcc	r1, [r6, r0]
   18360:	mov	r0, #0
   18364:	str	r0, [fp, #-56]	; 0xffffffc8
   18368:	mov	r4, #1
   1836c:	b	181d0 <__assert_fail@plt+0x6b00>
   18370:	ldr	r0, [sp, #40]	; 0x28
   18374:	cmp	r0, #1
   18378:	bne	18540 <__assert_fail@plt+0x6e70>
   1837c:	str	lr, [sp, #28]
   18380:	bl	1155c <__ctype_b_loc@plt>
   18384:	ldr	r0, [r0]
   18388:	ldr	ip, [fp, #-84]	; 0xffffffac
   1838c:	mov	r1, #1
   18390:	add	r0, r0, r5, lsl #1
   18394:	ldrb	r0, [r0, #1]
   18398:	ubfx	r4, r0, #6, #1
   1839c:	ldr	r0, [sp, #52]	; 0x34
   183a0:	mov	r2, r1
   183a4:	cmp	r1, #1
   183a8:	orr	r0, r4, r0
   183ac:	bhi	18778 <__assert_fail@plt+0x70a8>
   183b0:	tst	r0, #1
   183b4:	beq	18778 <__assert_fail@plt+0x70a8>
   183b8:	ldr	lr, [sp, #28]
   183bc:	b	181d0 <__assert_fail@plt+0x6b00>
   183c0:	cmp	r7, #0
   183c4:	ldrbeq	r0, [ip, #1]
   183c8:	cmpeq	r0, #0
   183cc:	beq	183dc <__assert_fail@plt+0x6d0c>
   183d0:	mvn	lr, #0
   183d4:	mov	r9, #0
   183d8:	b	181d0 <__assert_fail@plt+0x6b00>
   183dc:	mov	r1, #1
   183e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   183e4:	cmp	r0, #2
   183e8:	bne	183f8 <__assert_fail@plt+0x6d28>
   183ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   183f0:	tst	r0, #1
   183f4:	bne	18afc <__assert_fail@plt+0x742c>
   183f8:	mov	r4, r1
   183fc:	b	181d0 <__assert_fail@plt+0x6b00>
   18400:	ldr	r1, [sp, #48]	; 0x30
   18404:	mov	r9, #0
   18408:	mov	r0, #92	; 0x5c
   1840c:	cmp	r1, #0
   18410:	beq	18424 <__assert_fail@plt+0x6d54>
   18414:	mov	r4, #0
   18418:	cmp	r9, #0
   1841c:	beq	189b0 <__assert_fail@plt+0x72e0>
   18420:	b	189ec <__assert_fail@plt+0x731c>
   18424:	ldr	r1, [sp, #84]	; 0x54
   18428:	mov	r4, #0
   1842c:	mov	r9, #0
   18430:	tst	r1, #1
   18434:	bne	18474 <__assert_fail@plt+0x6da4>
   18438:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1843c:	cmp	r0, #0
   18440:	mov	r0, r5
   18444:	beq	18468 <__assert_fail@plt+0x6d98>
   18448:	ldr	r1, [fp, #16]
   1844c:	ubfx	r0, r5, #5, #3
   18450:	mov	r2, #1
   18454:	ldr	r0, [r1, r0, lsl #2]
   18458:	and	r1, r5, #31
   1845c:	tst	r0, r2, lsl r1
   18460:	mov	r0, r5
   18464:	bne	18474 <__assert_fail@plt+0x6da4>
   18468:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1846c:	cmp	r1, #0
   18470:	beq	189a8 <__assert_fail@plt+0x72d8>
   18474:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18478:	tst	r1, #1
   1847c:	bne	18ad4 <__assert_fail@plt+0x7404>
   18480:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18484:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18488:	cmp	r1, #2
   1848c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18490:	movwne	r1, #1
   18494:	orr	r1, r1, r2
   18498:	tst	r1, #1
   1849c:	beq	184a8 <__assert_fail@plt+0x6dd8>
   184a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   184a4:	b	184e4 <__assert_fail@plt+0x6e14>
   184a8:	cmp	r8, sl
   184ac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   184b0:	movcc	r1, #39	; 0x27
   184b4:	strbcc	r1, [r6, r8]
   184b8:	add	r1, r8, #1
   184bc:	cmp	r1, sl
   184c0:	movcc	r2, #36	; 0x24
   184c4:	strbcc	r2, [r6, r1]
   184c8:	add	r1, r8, #2
   184cc:	add	r8, r8, #3
   184d0:	cmp	r1, sl
   184d4:	movcc	r2, #39	; 0x27
   184d8:	strbcc	r2, [r6, r1]
   184dc:	mov	r1, #1
   184e0:	str	r1, [fp, #-56]	; 0xffffffc8
   184e4:	cmp	r8, sl
   184e8:	movcc	r1, #92	; 0x5c
   184ec:	strbcc	r1, [r6, r8]
   184f0:	add	r8, r8, #1
   184f4:	cmp	r8, sl
   184f8:	and	r5, r5, r4
   184fc:	add	r7, r7, #1
   18500:	strbcc	r0, [r6, r8]
   18504:	add	r8, r8, #1
   18508:	cmn	lr, #1
   1850c:	bne	17f08 <__assert_fail@plt+0x6838>
   18510:	b	17f14 <__assert_fail@plt+0x6844>
   18514:	ldr	r0, [sp, #36]	; 0x24
   18518:	mov	r4, #0
   1851c:	mov	r9, #0
   18520:	mov	r5, #0
   18524:	cmp	r0, #0
   18528:	beq	18438 <__assert_fail@plt+0x6d68>
   1852c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18530:	add	r7, r7, #1
   18534:	cmn	lr, #1
   18538:	bne	17f08 <__assert_fail@plt+0x6838>
   1853c:	b	17f14 <__assert_fail@plt+0x6844>
   18540:	mov	r0, #0
   18544:	cmn	lr, #1
   18548:	str	r0, [fp, #-36]	; 0xffffffdc
   1854c:	str	r0, [fp, #-40]	; 0xffffffd8
   18550:	bne	18564 <__assert_fail@plt+0x6e94>
   18554:	mov	r0, ip
   18558:	bl	11574 <strlen@plt>
   1855c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18560:	mov	lr, r0
   18564:	add	r0, ip, r7
   18568:	mov	r4, #1
   1856c:	mov	r6, #0
   18570:	str	lr, [sp, #28]
   18574:	str	r0, [sp, #24]
   18578:	sub	r0, fp, #40	; 0x28
   1857c:	mov	r3, r0
   18580:	str	r6, [sp, #44]	; 0x2c
   18584:	add	r6, r6, r7
   18588:	sub	r0, fp, #44	; 0x2c
   1858c:	add	r1, ip, r6
   18590:	sub	r2, lr, r6
   18594:	bl	1b930 <__assert_fail@plt+0xa260>
   18598:	cmp	r0, #0
   1859c:	beq	18a34 <__assert_fail@plt+0x7364>
   185a0:	cmn	r0, #1
   185a4:	beq	189f4 <__assert_fail@plt+0x7324>
   185a8:	ldr	lr, [sp, #28]
   185ac:	cmn	r0, #2
   185b0:	beq	189fc <__assert_fail@plt+0x732c>
   185b4:	ldr	r2, [sp, #64]	; 0x40
   185b8:	cmp	r0, #2
   185bc:	mov	r1, #0
   185c0:	movwcc	r1, #1
   185c4:	eor	r2, r2, #1
   185c8:	orrs	r1, r2, r1
   185cc:	bne	1868c <__assert_fail@plt+0x6fbc>
   185d0:	ldr	r1, [sp, #44]	; 0x2c
   185d4:	ldr	r2, [sp, #24]
   185d8:	add	r1, r2, r1
   185dc:	mov	r2, #1
   185e0:	ldrb	r3, [r1, r2]
   185e4:	sub	r3, r3, #91	; 0x5b
   185e8:	cmp	r3, #33	; 0x21
   185ec:	bhi	18680 <__assert_fail@plt+0x6fb0>
   185f0:	add	r6, pc, #0
   185f4:	ldr	pc, [r6, r3, lsl #2]
   185f8:	strdeq	r8, [r1], -r4
   185fc:	strdeq	r8, [r1], -r4
   18600:	andeq	r8, r1, r0, lsl #13
   18604:	strdeq	r8, [r1], -r4
   18608:	andeq	r8, r1, r0, lsl #13
   1860c:	strdeq	r8, [r1], -r4
   18610:	andeq	r8, r1, r0, lsl #13
   18614:	andeq	r8, r1, r0, lsl #13
   18618:	andeq	r8, r1, r0, lsl #13
   1861c:	andeq	r8, r1, r0, lsl #13
   18620:	andeq	r8, r1, r0, lsl #13
   18624:	andeq	r8, r1, r0, lsl #13
   18628:	andeq	r8, r1, r0, lsl #13
   1862c:	andeq	r8, r1, r0, lsl #13
   18630:	andeq	r8, r1, r0, lsl #13
   18634:	andeq	r8, r1, r0, lsl #13
   18638:	andeq	r8, r1, r0, lsl #13
   1863c:	andeq	r8, r1, r0, lsl #13
   18640:	andeq	r8, r1, r0, lsl #13
   18644:	andeq	r8, r1, r0, lsl #13
   18648:	andeq	r8, r1, r0, lsl #13
   1864c:	andeq	r8, r1, r0, lsl #13
   18650:	andeq	r8, r1, r0, lsl #13
   18654:	andeq	r8, r1, r0, lsl #13
   18658:	andeq	r8, r1, r0, lsl #13
   1865c:	andeq	r8, r1, r0, lsl #13
   18660:	andeq	r8, r1, r0, lsl #13
   18664:	andeq	r8, r1, r0, lsl #13
   18668:	andeq	r8, r1, r0, lsl #13
   1866c:	andeq	r8, r1, r0, lsl #13
   18670:	andeq	r8, r1, r0, lsl #13
   18674:	andeq	r8, r1, r0, lsl #13
   18678:	andeq	r8, r1, r0, lsl #13
   1867c:	strdeq	r8, [r1], -r4
   18680:	add	r2, r2, #1
   18684:	cmp	r2, r0
   18688:	bcc	185e0 <__assert_fail@plt+0x6f10>
   1868c:	ldr	r6, [sp, #44]	; 0x2c
   18690:	add	r6, r0, r6
   18694:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18698:	bl	1146c <iswprint@plt>
   1869c:	cmp	r0, #0
   186a0:	movwne	r0, #1
   186a4:	and	r4, r4, r0
   186a8:	sub	r0, fp, #40	; 0x28
   186ac:	bl	1140c <mbsinit@plt>
   186b0:	ldr	lr, [sp, #28]
   186b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   186b8:	sub	r3, fp, #40	; 0x28
   186bc:	cmp	r0, #0
   186c0:	beq	18580 <__assert_fail@plt+0x6eb0>
   186c4:	b	18a3c <__assert_fail@plt+0x736c>
   186c8:	ldr	r0, [sp, #32]
   186cc:	cmp	r0, #0
   186d0:	beq	1876c <__assert_fail@plt+0x709c>
   186d4:	add	r0, r7, #2
   186d8:	cmp	r0, lr
   186dc:	bcs	1876c <__assert_fail@plt+0x709c>
   186e0:	add	r1, ip, r7
   186e4:	ldrb	r1, [r1, #1]
   186e8:	cmp	r1, #63	; 0x3f
   186ec:	bne	1876c <__assert_fail@plt+0x709c>
   186f0:	ldrb	r5, [ip, r0]
   186f4:	sub	r1, r5, #33	; 0x21
   186f8:	cmp	r1, #29
   186fc:	bhi	1876c <__assert_fail@plt+0x709c>
   18700:	movw	r3, #20929	; 0x51c1
   18704:	mov	r2, #1
   18708:	movt	r3, #14336	; 0x3800
   1870c:	tst	r3, r2, lsl r1
   18710:	beq	1876c <__assert_fail@plt+0x709c>
   18714:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18718:	tst	r1, #1
   1871c:	bne	18c14 <__assert_fail@plt+0x7544>
   18720:	cmp	r8, sl
   18724:	mov	r7, r0
   18728:	mov	r4, #0
   1872c:	movcc	r1, #63	; 0x3f
   18730:	strbcc	r1, [r6, r8]
   18734:	add	r1, r8, #1
   18738:	cmp	r1, sl
   1873c:	movcc	r2, #34	; 0x22
   18740:	strbcc	r2, [r6, r1]
   18744:	add	r1, r8, #2
   18748:	cmp	r1, sl
   1874c:	movcc	r2, #34	; 0x22
   18750:	strbcc	r2, [r6, r1]
   18754:	add	r1, r8, #3
   18758:	add	r8, r8, #4
   1875c:	cmp	r1, sl
   18760:	movcc	r2, #63	; 0x3f
   18764:	strbcc	r2, [r6, r1]
   18768:	b	181d0 <__assert_fail@plt+0x6b00>
   1876c:	mov	r5, #63	; 0x3f
   18770:	mov	r4, #0
   18774:	b	181d0 <__assert_fail@plt+0x6b00>
   18778:	add	r1, r2, r7
   1877c:	ldr	lr, [sp, #28]
   18780:	mov	r3, #0
   18784:	str	r1, [sp, #44]	; 0x2c
   18788:	add	r1, r7, #1
   1878c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18790:	tst	r0, #1
   18794:	bne	18868 <__assert_fail@plt+0x7198>
   18798:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1879c:	tst	r2, #1
   187a0:	bne	18b5c <__assert_fail@plt+0x748c>
   187a4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   187a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   187ac:	cmp	r7, #2
   187b0:	movwne	r3, #1
   187b4:	orr	r3, r3, r2
   187b8:	tst	r3, #1
   187bc:	bne	187f8 <__assert_fail@plt+0x7128>
   187c0:	cmp	r8, sl
   187c4:	add	r3, r8, #1
   187c8:	movcc	r2, #39	; 0x27
   187cc:	strbcc	r2, [r6, r8]
   187d0:	cmp	r3, sl
   187d4:	movcc	r2, #36	; 0x24
   187d8:	strbcc	r2, [r6, r3]
   187dc:	add	r3, r8, #2
   187e0:	add	r8, r8, #3
   187e4:	cmp	r3, sl
   187e8:	movcc	r2, #39	; 0x27
   187ec:	strbcc	r2, [r6, r3]
   187f0:	mov	r2, #1
   187f4:	str	r2, [fp, #-56]	; 0xffffffc8
   187f8:	cmp	r8, sl
   187fc:	movcc	r3, #92	; 0x5c
   18800:	strbcc	r3, [r6, r8]
   18804:	add	r3, r8, #1
   18808:	cmp	r3, sl
   1880c:	andcc	r7, r5, #192	; 0xc0
   18810:	movcc	r2, #48	; 0x30
   18814:	orrcc	r7, r2, r7, lsr #6
   18818:	strbcc	r7, [r6, r3]
   1881c:	add	r3, r8, #2
   18820:	add	r8, r8, #3
   18824:	cmp	r3, sl
   18828:	lsrcc	r7, r5, #3
   1882c:	movcc	r2, #6
   18830:	bficc	r7, r2, #3, #29
   18834:	mov	r2, #6
   18838:	strbcc	r7, [r6, r3]
   1883c:	bfi	r5, r2, #3, #29
   18840:	mov	r3, #1
   18844:	b	1888c <__assert_fail@plt+0x71bc>
   18848:	cmp	r8, sl
   1884c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18850:	strbcc	r5, [r6, r8]
   18854:	add	r8, r8, #1
   18858:	ldrb	r5, [ip, r1]
   1885c:	add	r1, r1, #1
   18860:	tst	r0, #1
   18864:	beq	18798 <__assert_fail@plt+0x70c8>
   18868:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1886c:	tst	r2, #1
   18870:	beq	18884 <__assert_fail@plt+0x71b4>
   18874:	cmp	r8, sl
   18878:	movcc	r7, #92	; 0x5c
   1887c:	strbcc	r7, [r6, r8]
   18880:	add	r8, r8, #1
   18884:	mov	r2, #0
   18888:	str	r2, [fp, #-52]	; 0xffffffcc
   1888c:	ldr	r2, [sp, #44]	; 0x2c
   18890:	and	r9, r3, #1
   18894:	cmp	r2, r1
   18898:	bls	18998 <__assert_fail@plt+0x72c8>
   1889c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   188a0:	cmp	r9, #0
   188a4:	movwne	r9, #1
   188a8:	mvn	r7, r2
   188ac:	orr	r7, r7, r9
   188b0:	tst	r7, #1
   188b4:	bne	18848 <__assert_fail@plt+0x7178>
   188b8:	cmp	r8, sl
   188bc:	movcc	r7, #39	; 0x27
   188c0:	strbcc	r7, [r6, r8]
   188c4:	add	r7, r8, #1
   188c8:	add	r8, r8, #2
   188cc:	cmp	r7, sl
   188d0:	movcc	r2, #39	; 0x27
   188d4:	strbcc	r2, [r6, r7]
   188d8:	mov	r2, #0
   188dc:	str	r2, [fp, #-56]	; 0xffffffc8
   188e0:	b	18848 <__assert_fail@plt+0x7178>
   188e4:	cmp	r8, sl
   188e8:	mov	r2, #1
   188ec:	movcc	r0, #39	; 0x27
   188f0:	strbcc	r0, [r6, r8]
   188f4:	add	r0, r8, #1
   188f8:	cmp	r0, sl
   188fc:	movcc	r1, #36	; 0x24
   18900:	strbcc	r1, [r6, r0]
   18904:	add	r0, r8, #2
   18908:	cmp	r0, sl
   1890c:	movcc	r1, #39	; 0x27
   18910:	strbcc	r1, [r6, r0]
   18914:	add	r0, r8, #3
   18918:	cmp	r0, sl
   1891c:	add	r8, r0, #1
   18920:	str	r2, [fp, #-56]	; 0xffffffc8
   18924:	movcc	r1, #92	; 0x5c
   18928:	strbcc	r1, [r6, r0]
   1892c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18930:	cmp	r1, #2
   18934:	beq	18988 <__assert_fail@plt+0x72b8>
   18938:	add	r1, r7, #1
   1893c:	mov	r4, #0
   18940:	mov	r9, #1
   18944:	mov	r5, #48	; 0x30
   18948:	cmp	r1, lr
   1894c:	bcs	181d0 <__assert_fail@plt+0x6b00>
   18950:	ldrb	r1, [ip, r1]
   18954:	sub	r1, r1, #48	; 0x30
   18958:	uxtb	r1, r1
   1895c:	cmp	r1, #9
   18960:	bhi	181d0 <__assert_fail@plt+0x6b00>
   18964:	cmp	r8, sl
   18968:	movcc	r1, #48	; 0x30
   1896c:	strbcc	r1, [r6, r8]
   18970:	add	r1, r0, #2
   18974:	add	r8, r0, #3
   18978:	cmp	r1, sl
   1897c:	movcc	r2, #48	; 0x30
   18980:	strbcc	r2, [r6, r1]
   18984:	b	181d0 <__assert_fail@plt+0x6b00>
   18988:	mov	r0, #48	; 0x30
   1898c:	mov	r9, #1
   18990:	mov	r4, #0
   18994:	b	18468 <__assert_fail@plt+0x6d98>
   18998:	cmp	r9, #0
   1899c:	sub	r7, r1, #1
   189a0:	mov	r0, r5
   189a4:	movwne	r9, #1
   189a8:	cmp	r9, #0
   189ac:	bne	189ec <__assert_fail@plt+0x731c>
   189b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   189b4:	tst	r1, #1
   189b8:	beq	189ec <__assert_fail@plt+0x731c>
   189bc:	cmp	r8, sl
   189c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   189c4:	movcc	r1, #39	; 0x27
   189c8:	strbcc	r1, [r6, r8]
   189cc:	add	r1, r8, #1
   189d0:	add	r8, r8, #2
   189d4:	cmp	r1, sl
   189d8:	movcc	r2, #39	; 0x27
   189dc:	strbcc	r2, [r6, r1]
   189e0:	mov	r1, #0
   189e4:	str	r1, [fp, #-56]	; 0xffffffc8
   189e8:	b	184f4 <__assert_fail@plt+0x6e24>
   189ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   189f0:	b	184f4 <__assert_fail@plt+0x6e24>
   189f4:	mov	r4, #0
   189f8:	b	18a34 <__assert_fail@plt+0x7364>
   189fc:	mov	r4, #0
   18a00:	cmp	lr, r6
   18a04:	bls	18a34 <__assert_fail@plt+0x7364>
   18a08:	ldr	ip, [fp, #-84]	; 0xffffffac
   18a0c:	ldr	r6, [sp, #44]	; 0x2c
   18a10:	ldr	r0, [sp, #24]
   18a14:	ldrb	r0, [r0, r6]
   18a18:	cmp	r0, #0
   18a1c:	beq	18a3c <__assert_fail@plt+0x736c>
   18a20:	add	r6, r6, #1
   18a24:	add	r0, r7, r6
   18a28:	cmp	r0, lr
   18a2c:	bcc	18a10 <__assert_fail@plt+0x7340>
   18a30:	b	18a3c <__assert_fail@plt+0x736c>
   18a34:	ldr	ip, [fp, #-84]	; 0xffffffac
   18a38:	ldr	r6, [sp, #44]	; 0x2c
   18a3c:	mov	r1, r6
   18a40:	ldr	r6, [sp, #80]	; 0x50
   18a44:	b	1839c <__assert_fail@plt+0x6ccc>
   18a48:	mov	lr, r7
   18a4c:	b	18a54 <__assert_fail@plt+0x7384>
   18a50:	mvn	lr, #0
   18a54:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18a58:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18a5c:	eor	r0, r7, #2
   18a60:	orr	r0, r0, r8
   18a64:	clz	r0, r0
   18a68:	lsr	r0, r0, #5
   18a6c:	tst	r1, r0
   18a70:	bne	18afc <__assert_fail@plt+0x742c>
   18a74:	mov	r0, r1
   18a78:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18a7c:	cmp	r7, #2
   18a80:	movwne	r1, #1
   18a84:	orr	r0, r0, r1
   18a88:	tst	r0, #1
   18a8c:	ldreq	r0, [sp, #60]	; 0x3c
   18a90:	eoreq	r0, r0, #1
   18a94:	tsteq	r0, #1
   18a98:	bne	18ba8 <__assert_fail@plt+0x74d8>
   18a9c:	mov	r9, lr
   18aa0:	tst	r5, #1
   18aa4:	bne	18b64 <__assert_fail@plt+0x7494>
   18aa8:	ldr	r6, [sp, #56]	; 0x38
   18aac:	mov	r4, #0
   18ab0:	cmp	r6, #0
   18ab4:	beq	18ba0 <__assert_fail@plt+0x74d0>
   18ab8:	ldr	r0, [sp, #84]	; 0x54
   18abc:	mov	r1, #0
   18ac0:	cmp	sl, #0
   18ac4:	mov	r5, #0
   18ac8:	str	r1, [fp, #-72]	; 0xffffffb8
   18acc:	beq	17c9c <__assert_fail@plt+0x65cc>
   18ad0:	b	18ba8 <__assert_fail@plt+0x74d8>
   18ad4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18ad8:	ldr	r2, [sp, #84]	; 0x54
   18adc:	b	18b04 <__assert_fail@plt+0x7434>
   18ae0:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ae4:	mov	r2, #1
   18ae8:	mov	lr, r4
   18aec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18af0:	b	18b04 <__assert_fail@plt+0x7434>
   18af4:	ldr	r6, [sp, #80]	; 0x50
   18af8:	ldr	ip, [fp, #-84]	; 0xffffffac
   18afc:	ldr	r2, [sp, #84]	; 0x54
   18b00:	mov	r7, #2
   18b04:	mov	r0, #0
   18b08:	ldr	r1, [fp, #12]
   18b0c:	tst	r2, #1
   18b10:	mov	r2, r7
   18b14:	mov	r3, lr
   18b18:	str	r0, [sp, #8]
   18b1c:	ldr	r0, [sp, #72]	; 0x48
   18b20:	movwne	r2, #4
   18b24:	cmp	r7, #2
   18b28:	movne	r2, r7
   18b2c:	str	r2, [sp]
   18b30:	mov	r2, ip
   18b34:	bic	r1, r1, #2
   18b38:	str	r0, [sp, #12]
   18b3c:	ldr	r0, [sp, #76]	; 0x4c
   18b40:	str	r1, [sp, #4]
   18b44:	mov	r1, sl
   18b48:	str	r0, [sp, #16]
   18b4c:	mov	r0, r6
   18b50:	bl	17c1c <__assert_fail@plt+0x654c>
   18b54:	mov	r8, r0
   18b58:	b	18c00 <__assert_fail@plt+0x7530>
   18b5c:	ldr	r2, [sp, #84]	; 0x54
   18b60:	b	18b04 <__assert_fail@plt+0x7434>
   18b64:	mov	r0, #5
   18b68:	ldr	r1, [sp, #56]	; 0x38
   18b6c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18b70:	mov	r3, r9
   18b74:	str	r0, [sp]
   18b78:	ldr	r0, [fp, #12]
   18b7c:	str	r0, [sp, #4]
   18b80:	ldr	r0, [fp, #16]
   18b84:	str	r0, [sp, #8]
   18b88:	ldr	r0, [sp, #72]	; 0x48
   18b8c:	str	r0, [sp, #12]
   18b90:	ldr	r0, [sp, #76]	; 0x4c
   18b94:	str	r0, [sp, #16]
   18b98:	ldr	r0, [sp, #80]	; 0x50
   18b9c:	b	18b50 <__assert_fail@plt+0x7480>
   18ba0:	mov	r0, #0
   18ba4:	str	r0, [fp, #-72]	; 0xffffffb8
   18ba8:	ldr	r1, [sp, #92]	; 0x5c
   18bac:	cmp	r1, #0
   18bb0:	beq	18bf0 <__assert_fail@plt+0x7520>
   18bb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18bb8:	ldr	r2, [sp, #80]	; 0x50
   18bbc:	tst	r0, #1
   18bc0:	bne	18bf4 <__assert_fail@plt+0x7524>
   18bc4:	ldrb	r0, [r1]
   18bc8:	cmp	r0, #0
   18bcc:	beq	18bf4 <__assert_fail@plt+0x7524>
   18bd0:	add	r1, r1, #1
   18bd4:	cmp	r8, sl
   18bd8:	strbcc	r0, [r2, r8]
   18bdc:	add	r8, r8, #1
   18be0:	ldrb	r0, [r1], #1
   18be4:	cmp	r0, #0
   18be8:	bne	18bd4 <__assert_fail@plt+0x7504>
   18bec:	b	18bf4 <__assert_fail@plt+0x7524>
   18bf0:	ldr	r2, [sp, #80]	; 0x50
   18bf4:	cmp	r8, sl
   18bf8:	movcc	r0, #0
   18bfc:	strbcc	r0, [r2, r8]
   18c00:	mov	r0, r8
   18c04:	sub	sp, fp, #28
   18c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c0c:	mov	r2, #1
   18c10:	b	18aec <__assert_fail@plt+0x741c>
   18c14:	ldr	r2, [sp, #84]	; 0x54
   18c18:	mov	r7, #5
   18c1c:	b	18b04 <__assert_fail@plt+0x7434>
   18c20:	bl	116a0 <abort@plt>
   18c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c28:	add	fp, sp, #28
   18c2c:	sub	sp, sp, #28
   18c30:	movw	r5, #62568	; 0xf468
   18c34:	cmp	r2, #0
   18c38:	mov	r4, r1
   18c3c:	mov	r7, r0
   18c40:	str	r0, [sp, #20]
   18c44:	movt	r5, #2
   18c48:	movne	r5, r2
   18c4c:	bl	11598 <__errno_location@plt>
   18c50:	mov	sl, r0
   18c54:	ldm	r5, {r0, r1}
   18c58:	ldr	r2, [r5, #40]	; 0x28
   18c5c:	ldr	r3, [r5, #44]	; 0x2c
   18c60:	add	r9, r5, #8
   18c64:	ldr	r6, [sl]
   18c68:	orr	r8, r1, #1
   18c6c:	mov	r1, #0
   18c70:	str	r6, [sp, #24]
   18c74:	stm	sp, {r0, r8, r9}
   18c78:	str	r2, [sp, #12]
   18c7c:	str	r3, [sp, #16]
   18c80:	mov	r0, #0
   18c84:	mov	r2, r7
   18c88:	mov	r3, r4
   18c8c:	mov	r6, r4
   18c90:	bl	17c1c <__assert_fail@plt+0x654c>
   18c94:	add	r7, r0, #1
   18c98:	mov	r0, r7
   18c9c:	bl	19f0c <__assert_fail@plt+0x883c>
   18ca0:	mov	r4, r0
   18ca4:	ldr	r0, [r5]
   18ca8:	ldr	r2, [r5, #44]	; 0x2c
   18cac:	ldr	r1, [r5, #40]	; 0x28
   18cb0:	mov	r3, r6
   18cb4:	stm	sp, {r0, r8, r9}
   18cb8:	str	r2, [sp, #16]
   18cbc:	str	r1, [sp, #12]
   18cc0:	mov	r0, r4
   18cc4:	mov	r1, r7
   18cc8:	ldr	r2, [sp, #20]
   18ccc:	bl	17c1c <__assert_fail@plt+0x654c>
   18cd0:	ldr	r0, [sp, #24]
   18cd4:	str	r0, [sl]
   18cd8:	mov	r0, r4
   18cdc:	sub	sp, fp, #28
   18ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce8:	add	fp, sp, #28
   18cec:	sub	sp, sp, #36	; 0x24
   18cf0:	movw	r8, #62568	; 0xf468
   18cf4:	cmp	r3, #0
   18cf8:	mov	r4, r2
   18cfc:	str	r2, [sp, #24]
   18d00:	mov	r5, r1
   18d04:	mov	r6, r0
   18d08:	str	r0, [sp, #20]
   18d0c:	movt	r8, #2
   18d10:	movne	r8, r3
   18d14:	bl	11598 <__errno_location@plt>
   18d18:	str	r0, [sp, #28]
   18d1c:	cmp	r4, #0
   18d20:	add	sl, r8, #8
   18d24:	ldm	r8, {r3, r9}
   18d28:	ldr	r7, [r0]
   18d2c:	ldr	r1, [r8, #40]	; 0x28
   18d30:	ldr	r2, [r8, #44]	; 0x2c
   18d34:	mov	r0, #0
   18d38:	orreq	r9, r9, #1
   18d3c:	str	r7, [sp, #32]
   18d40:	mov	r7, r5
   18d44:	stm	sp, {r3, r9, sl}
   18d48:	str	r1, [sp, #12]
   18d4c:	str	r2, [sp, #16]
   18d50:	mov	r1, #0
   18d54:	mov	r2, r6
   18d58:	mov	r3, r5
   18d5c:	bl	17c1c <__assert_fail@plt+0x654c>
   18d60:	add	r4, r0, #1
   18d64:	mov	r5, r0
   18d68:	mov	r0, r4
   18d6c:	bl	19f0c <__assert_fail@plt+0x883c>
   18d70:	mov	r6, r0
   18d74:	ldr	r0, [r8]
   18d78:	ldr	r2, [r8, #44]	; 0x2c
   18d7c:	ldr	r1, [r8, #40]	; 0x28
   18d80:	mov	r3, r7
   18d84:	stm	sp, {r0, r9, sl}
   18d88:	str	r2, [sp, #16]
   18d8c:	str	r1, [sp, #12]
   18d90:	mov	r0, r6
   18d94:	mov	r1, r4
   18d98:	ldr	r2, [sp, #20]
   18d9c:	bl	17c1c <__assert_fail@plt+0x654c>
   18da0:	ldr	r0, [sp, #24]
   18da4:	ldr	r1, [sp, #32]
   18da8:	ldr	r2, [sp, #28]
   18dac:	cmp	r0, #0
   18db0:	str	r1, [r2]
   18db4:	strne	r5, [r0]
   18db8:	mov	r0, r6
   18dbc:	sub	sp, fp, #28
   18dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18dc8:	add	fp, sp, #24
   18dcc:	movw	r5, #61812	; 0xf174
   18dd0:	movw	r8, #61808	; 0xf170
   18dd4:	movt	r5, #2
   18dd8:	movt	r8, #2
   18ddc:	ldr	r0, [r5]
   18de0:	ldr	r4, [r8]
   18de4:	cmp	r0, #2
   18de8:	blt	18e14 <__assert_fail@plt+0x7744>
   18dec:	add	r7, r4, #12
   18df0:	mov	r6, #0
   18df4:	ldr	r0, [r7, r6, lsl #3]
   18df8:	bl	1b8d0 <__assert_fail@plt+0xa200>
   18dfc:	ldr	r1, [r5]
   18e00:	add	r2, r6, #2
   18e04:	add	r0, r6, #1
   18e08:	mov	r6, r0
   18e0c:	cmp	r2, r1
   18e10:	blt	18df4 <__assert_fail@plt+0x7724>
   18e14:	ldr	r0, [r4, #4]
   18e18:	movw	r7, #62616	; 0xf498
   18e1c:	movt	r7, #2
   18e20:	cmp	r0, r7
   18e24:	beq	18e3c <__assert_fail@plt+0x776c>
   18e28:	bl	1b8d0 <__assert_fail@plt+0xa200>
   18e2c:	movw	r0, #61816	; 0xf178
   18e30:	mov	r6, #256	; 0x100
   18e34:	movt	r0, #2
   18e38:	strd	r6, [r0]
   18e3c:	movw	r6, #61816	; 0xf178
   18e40:	movt	r6, #2
   18e44:	cmp	r4, r6
   18e48:	beq	18e58 <__assert_fail@plt+0x7788>
   18e4c:	mov	r0, r4
   18e50:	bl	1b8d0 <__assert_fail@plt+0xa200>
   18e54:	str	r6, [r8]
   18e58:	mov	r0, #1
   18e5c:	str	r0, [r5]
   18e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e64:	movw	r3, #62568	; 0xf468
   18e68:	mvn	r2, #0
   18e6c:	movt	r3, #2
   18e70:	b	18e74 <__assert_fail@plt+0x77a4>
   18e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e78:	add	fp, sp, #28
   18e7c:	sub	sp, sp, #44	; 0x2c
   18e80:	mov	r7, r3
   18e84:	str	r2, [sp, #36]	; 0x24
   18e88:	str	r1, [sp, #32]
   18e8c:	mov	r5, r0
   18e90:	bl	11598 <__errno_location@plt>
   18e94:	cmp	r5, #0
   18e98:	blt	19004 <__assert_fail@plt+0x7934>
   18e9c:	cmn	r5, #-2147483647	; 0x80000001
   18ea0:	beq	19004 <__assert_fail@plt+0x7934>
   18ea4:	movw	r8, #61812	; 0xf174
   18ea8:	movw	r4, #61808	; 0xf170
   18eac:	str	r0, [sp, #28]
   18eb0:	ldr	r0, [r0]
   18eb4:	movt	r8, #2
   18eb8:	movt	r4, #2
   18ebc:	ldr	r1, [r8]
   18ec0:	ldr	r6, [r4]
   18ec4:	str	r0, [sp, #24]
   18ec8:	cmp	r1, r5
   18ecc:	ble	18ed8 <__assert_fail@plt+0x7808>
   18ed0:	mov	sl, r6
   18ed4:	b	18f40 <__assert_fail@plt+0x7870>
   18ed8:	movw	r9, #61816	; 0xf178
   18edc:	mov	r0, #8
   18ee0:	add	r2, r5, #1
   18ee4:	str	r1, [fp, #-32]	; 0xffffffe0
   18ee8:	mvn	r3, #-2147483648	; 0x80000000
   18eec:	movt	r9, #2
   18ef0:	str	r0, [sp]
   18ef4:	sub	r2, r2, r1
   18ef8:	sub	r1, fp, #32
   18efc:	subs	r0, r6, r9
   18f00:	movne	r0, r6
   18f04:	bl	1a10c <__assert_fail@plt+0x8a3c>
   18f08:	cmp	r6, r9
   18f0c:	mov	sl, r0
   18f10:	str	r0, [r4]
   18f14:	ldrdeq	r0, [r9]
   18f18:	stmeq	sl, {r0, r1}
   18f1c:	ldr	r1, [r8]
   18f20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18f24:	add	r0, sl, r1, lsl #3
   18f28:	sub	r1, r2, r1
   18f2c:	lsl	r2, r1, #3
   18f30:	mov	r1, #0
   18f34:	bl	115c8 <memset@plt>
   18f38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18f3c:	str	r0, [r8]
   18f40:	mov	r9, sl
   18f44:	ldr	r6, [r9, r5, lsl #3]!
   18f48:	ldr	r4, [r9, #4]!
   18f4c:	ldm	r7, {r0, r1}
   18f50:	ldr	r2, [r7, #40]	; 0x28
   18f54:	ldr	r3, [r7, #44]	; 0x2c
   18f58:	orr	r8, r1, #1
   18f5c:	add	r1, r7, #8
   18f60:	stm	sp, {r0, r8}
   18f64:	add	r0, sp, #8
   18f68:	str	r1, [sp, #20]
   18f6c:	stm	r0, {r1, r2, r3}
   18f70:	mov	r0, r4
   18f74:	mov	r1, r6
   18f78:	ldr	r2, [sp, #32]
   18f7c:	ldr	r3, [sp, #36]	; 0x24
   18f80:	bl	17c1c <__assert_fail@plt+0x654c>
   18f84:	cmp	r6, r0
   18f88:	bhi	18fec <__assert_fail@plt+0x791c>
   18f8c:	add	r6, r0, #1
   18f90:	movw	r0, #62616	; 0xf498
   18f94:	movt	r0, #2
   18f98:	str	r6, [sl, r5, lsl #3]
   18f9c:	cmp	r4, r0
   18fa0:	beq	18fac <__assert_fail@plt+0x78dc>
   18fa4:	mov	r0, r4
   18fa8:	bl	1b8d0 <__assert_fail@plt+0xa200>
   18fac:	mov	r0, r6
   18fb0:	bl	19f0c <__assert_fail@plt+0x883c>
   18fb4:	str	r0, [r9]
   18fb8:	mov	r4, r0
   18fbc:	add	r3, sp, #8
   18fc0:	ldr	r0, [r7]
   18fc4:	ldr	r1, [r7, #40]	; 0x28
   18fc8:	ldr	r2, [r7, #44]	; 0x2c
   18fcc:	stm	sp, {r0, r8}
   18fd0:	ldr	r0, [sp, #20]
   18fd4:	stm	r3, {r0, r1, r2}
   18fd8:	mov	r0, r4
   18fdc:	mov	r1, r6
   18fe0:	ldr	r2, [sp, #32]
   18fe4:	ldr	r3, [sp, #36]	; 0x24
   18fe8:	bl	17c1c <__assert_fail@plt+0x654c>
   18fec:	ldr	r0, [sp, #28]
   18ff0:	ldr	r1, [sp, #24]
   18ff4:	str	r1, [r0]
   18ff8:	mov	r0, r4
   18ffc:	sub	sp, fp, #28
   19000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19004:	bl	116a0 <abort@plt>
   19008:	movw	r3, #62568	; 0xf468
   1900c:	movt	r3, #2
   19010:	b	18e74 <__assert_fail@plt+0x77a4>
   19014:	movw	r3, #62568	; 0xf468
   19018:	mov	r1, r0
   1901c:	mov	r0, #0
   19020:	mvn	r2, #0
   19024:	movt	r3, #2
   19028:	b	18e74 <__assert_fail@plt+0x77a4>
   1902c:	movw	r3, #62568	; 0xf468
   19030:	mov	r2, r1
   19034:	mov	r1, r0
   19038:	mov	r0, #0
   1903c:	movt	r3, #2
   19040:	b	18e74 <__assert_fail@plt+0x77a4>
   19044:	push	{fp, lr}
   19048:	mov	fp, sp
   1904c:	sub	sp, sp, #48	; 0x30
   19050:	vmov.i32	q8, #0	; 0x00000000
   19054:	mov	ip, #32
   19058:	mov	r3, sp
   1905c:	mov	lr, r2
   19060:	cmp	r1, #10
   19064:	add	r2, r3, #16
   19068:	vst1.64	{d16-d17}, [r3], ip
   1906c:	vst1.64	{d16-d17}, [r3]
   19070:	vst1.64	{d16-d17}, [r2]
   19074:	beq	19094 <__assert_fail@plt+0x79c4>
   19078:	str	r1, [sp]
   1907c:	mov	r3, sp
   19080:	mov	r1, lr
   19084:	mvn	r2, #0
   19088:	bl	18e74 <__assert_fail@plt+0x77a4>
   1908c:	mov	sp, fp
   19090:	pop	{fp, pc}
   19094:	bl	116a0 <abort@plt>
   19098:	push	{r4, sl, fp, lr}
   1909c:	add	fp, sp, #8
   190a0:	sub	sp, sp, #48	; 0x30
   190a4:	mov	ip, r3
   190a8:	mov	r3, sp
   190ac:	vmov.i32	q8, #0	; 0x00000000
   190b0:	mov	lr, #32
   190b4:	cmp	r1, #10
   190b8:	add	r4, r3, #16
   190bc:	vst1.64	{d16-d17}, [r3], lr
   190c0:	vst1.64	{d16-d17}, [r3]
   190c4:	vst1.64	{d16-d17}, [r4]
   190c8:	beq	190e8 <__assert_fail@plt+0x7a18>
   190cc:	str	r1, [sp]
   190d0:	mov	r1, r2
   190d4:	mov	r3, sp
   190d8:	mov	r2, ip
   190dc:	bl	18e74 <__assert_fail@plt+0x77a4>
   190e0:	sub	sp, fp, #8
   190e4:	pop	{r4, sl, fp, pc}
   190e8:	bl	116a0 <abort@plt>
   190ec:	push	{fp, lr}
   190f0:	mov	fp, sp
   190f4:	sub	sp, sp, #48	; 0x30
   190f8:	mov	r3, sp
   190fc:	vmov.i32	q8, #0	; 0x00000000
   19100:	mov	ip, #32
   19104:	cmp	r0, #10
   19108:	add	r2, r3, #16
   1910c:	vst1.64	{d16-d17}, [r3], ip
   19110:	vst1.64	{d16-d17}, [r3]
   19114:	vst1.64	{d16-d17}, [r2]
   19118:	beq	19138 <__assert_fail@plt+0x7a68>
   1911c:	str	r0, [sp]
   19120:	mov	r3, sp
   19124:	mov	r0, #0
   19128:	mvn	r2, #0
   1912c:	bl	18e74 <__assert_fail@plt+0x77a4>
   19130:	mov	sp, fp
   19134:	pop	{fp, pc}
   19138:	bl	116a0 <abort@plt>
   1913c:	push	{fp, lr}
   19140:	mov	fp, sp
   19144:	sub	sp, sp, #48	; 0x30
   19148:	mov	r3, sp
   1914c:	vmov.i32	q8, #0	; 0x00000000
   19150:	mov	ip, #32
   19154:	cmp	r0, #10
   19158:	add	lr, r3, #16
   1915c:	vst1.64	{d16-d17}, [r3], ip
   19160:	vst1.64	{d16-d17}, [r3]
   19164:	vst1.64	{d16-d17}, [lr]
   19168:	beq	19184 <__assert_fail@plt+0x7ab4>
   1916c:	str	r0, [sp]
   19170:	mov	r3, sp
   19174:	mov	r0, #0
   19178:	bl	18e74 <__assert_fail@plt+0x77a4>
   1917c:	mov	sp, fp
   19180:	pop	{fp, pc}
   19184:	bl	116a0 <abort@plt>
   19188:	push	{r4, sl, fp, lr}
   1918c:	add	fp, sp, #8
   19190:	sub	sp, sp, #48	; 0x30
   19194:	mov	lr, r0
   19198:	movw	r0, #62568	; 0xf468
   1919c:	mov	r3, #32
   191a0:	mov	ip, r1
   191a4:	mov	r4, #1
   191a8:	movt	r0, #2
   191ac:	add	r1, r0, #16
   191b0:	vld1.64	{d16-d17}, [r0], r3
   191b4:	mov	r3, sp
   191b8:	vld1.64	{d18-d19}, [r1]
   191bc:	add	r1, r3, #16
   191c0:	vld1.64	{d20-d21}, [r0]
   191c4:	add	r0, r3, #32
   191c8:	vst1.64	{d18-d19}, [r1]
   191cc:	mov	r1, r3
   191d0:	vst1.64	{d20-d21}, [r0]
   191d4:	mov	r0, #28
   191d8:	and	r0, r0, r2, lsr #3
   191dc:	and	r2, r2, #31
   191e0:	vst1.64	{d16-d17}, [r1], r0
   191e4:	ldr	r0, [r1, #8]
   191e8:	bic	r4, r4, r0, lsr r2
   191ec:	eor	r0, r0, r4, lsl r2
   191f0:	mov	r2, ip
   191f4:	str	r0, [r1, #8]
   191f8:	mov	r0, #0
   191fc:	mov	r1, lr
   19200:	bl	18e74 <__assert_fail@plt+0x77a4>
   19204:	sub	sp, fp, #8
   19208:	pop	{r4, sl, fp, pc}
   1920c:	push	{fp, lr}
   19210:	mov	fp, sp
   19214:	sub	sp, sp, #48	; 0x30
   19218:	mov	ip, r0
   1921c:	movw	r0, #62568	; 0xf468
   19220:	mov	r3, #32
   19224:	movt	r0, #2
   19228:	add	r2, r0, #16
   1922c:	vld1.64	{d16-d17}, [r0], r3
   19230:	mov	r3, sp
   19234:	vld1.64	{d18-d19}, [r2]
   19238:	add	r2, r3, #16
   1923c:	vld1.64	{d20-d21}, [r0]
   19240:	add	r0, r3, #32
   19244:	vst1.64	{d18-d19}, [r2]
   19248:	mov	r2, r3
   1924c:	vst1.64	{d20-d21}, [r0]
   19250:	mov	r0, #28
   19254:	and	r0, r0, r1, lsr #3
   19258:	and	r1, r1, #31
   1925c:	vst1.64	{d16-d17}, [r2], r0
   19260:	mov	r0, #1
   19264:	ldr	lr, [r2, #8]
   19268:	bic	r0, r0, lr, lsr r1
   1926c:	eor	r0, lr, r0, lsl r1
   19270:	mov	r1, ip
   19274:	str	r0, [r2, #8]
   19278:	mov	r0, #0
   1927c:	mvn	r2, #0
   19280:	bl	18e74 <__assert_fail@plt+0x77a4>
   19284:	mov	sp, fp
   19288:	pop	{fp, pc}
   1928c:	push	{fp, lr}
   19290:	mov	fp, sp
   19294:	sub	sp, sp, #48	; 0x30
   19298:	movw	r2, #62568	; 0xf468
   1929c:	mov	r3, #32
   192a0:	mov	r1, r0
   192a4:	movt	r2, #2
   192a8:	add	r0, r2, #16
   192ac:	vld1.64	{d16-d17}, [r2], r3
   192b0:	mov	r3, sp
   192b4:	vld1.64	{d18-d19}, [r0]
   192b8:	add	r0, r3, #16
   192bc:	vld1.64	{d20-d21}, [r2]
   192c0:	mov	r2, r3
   192c4:	vst1.64	{d18-d19}, [r0]
   192c8:	add	r0, r3, #32
   192cc:	vst1.64	{d20-d21}, [r0]
   192d0:	mov	r0, #12
   192d4:	vst1.64	{d16-d17}, [r2], r0
   192d8:	ldr	r0, [r2]
   192dc:	orr	r0, r0, #67108864	; 0x4000000
   192e0:	str	r0, [r2]
   192e4:	mov	r0, #0
   192e8:	mvn	r2, #0
   192ec:	bl	18e74 <__assert_fail@plt+0x77a4>
   192f0:	mov	sp, fp
   192f4:	pop	{fp, pc}
   192f8:	push	{fp, lr}
   192fc:	mov	fp, sp
   19300:	sub	sp, sp, #48	; 0x30
   19304:	mov	ip, r1
   19308:	mov	r1, r0
   1930c:	movw	r0, #62568	; 0xf468
   19310:	mov	r3, #32
   19314:	movt	r0, #2
   19318:	add	r2, r0, #16
   1931c:	vld1.64	{d16-d17}, [r0], r3
   19320:	mov	r3, sp
   19324:	vld1.64	{d18-d19}, [r2]
   19328:	add	r2, r3, #16
   1932c:	vld1.64	{d20-d21}, [r0]
   19330:	add	r0, r3, #32
   19334:	vst1.64	{d18-d19}, [r2]
   19338:	mov	r2, r3
   1933c:	vst1.64	{d20-d21}, [r0]
   19340:	mov	r0, #12
   19344:	vst1.64	{d16-d17}, [r2], r0
   19348:	ldr	r0, [r2]
   1934c:	orr	r0, r0, #67108864	; 0x4000000
   19350:	str	r0, [r2]
   19354:	mov	r0, #0
   19358:	mov	r2, ip
   1935c:	bl	18e74 <__assert_fail@plt+0x77a4>
   19360:	mov	sp, fp
   19364:	pop	{fp, pc}
   19368:	push	{r4, sl, fp, lr}
   1936c:	add	fp, sp, #8
   19370:	sub	sp, sp, #96	; 0x60
   19374:	mov	ip, r2
   19378:	mov	r2, sp
   1937c:	vmov.i32	q8, #0	; 0x00000000
   19380:	mov	r4, #28
   19384:	cmp	r1, #10
   19388:	mov	r3, r2
   1938c:	add	lr, r2, #16
   19390:	vst1.64	{d16-d17}, [r3], r4
   19394:	vst1.64	{d16-d17}, [lr]
   19398:	vst1.32	{d16-d17}, [r3]
   1939c:	beq	193ec <__assert_fail@plt+0x7d1c>
   193a0:	vld1.64	{d16-d17}, [r2], r4
   193a4:	vld1.64	{d18-d19}, [lr]
   193a8:	add	r3, sp, #48	; 0x30
   193ac:	add	r4, r3, #4
   193b0:	vld1.32	{d20-d21}, [r2]
   193b4:	add	r2, r3, #20
   193b8:	vst1.32	{d16-d17}, [r4]
   193bc:	vst1.32	{d18-d19}, [r2]
   193c0:	add	r2, r3, #32
   193c4:	vst1.32	{d20-d21}, [r2]
   193c8:	str	r1, [sp, #48]	; 0x30
   193cc:	mvn	r2, #0
   193d0:	ldr	r1, [sp, #60]	; 0x3c
   193d4:	orr	r1, r1, #67108864	; 0x4000000
   193d8:	str	r1, [sp, #60]	; 0x3c
   193dc:	mov	r1, ip
   193e0:	bl	18e74 <__assert_fail@plt+0x77a4>
   193e4:	sub	sp, fp, #8
   193e8:	pop	{r4, sl, fp, pc}
   193ec:	bl	116a0 <abort@plt>
   193f0:	push	{r4, r5, fp, lr}
   193f4:	add	fp, sp, #8
   193f8:	sub	sp, sp, #48	; 0x30
   193fc:	mov	ip, r3
   19400:	movw	r3, #62568	; 0xf468
   19404:	mov	lr, #32
   19408:	cmp	r1, #0
   1940c:	mov	r5, sp
   19410:	movt	r3, #2
   19414:	cmpne	r2, #0
   19418:	add	r4, r3, #16
   1941c:	vld1.64	{d16-d17}, [r3], lr
   19420:	vld1.64	{d18-d19}, [r4]
   19424:	add	r4, r5, #16
   19428:	vld1.64	{d20-d21}, [r3]
   1942c:	vst1.64	{d16-d17}, [r5], lr
   19430:	mov	r3, #10
   19434:	vst1.64	{d18-d19}, [r4]
   19438:	vst1.64	{d20-d21}, [r5]
   1943c:	str	r3, [sp]
   19440:	bne	19448 <__assert_fail@plt+0x7d78>
   19444:	bl	116a0 <abort@plt>
   19448:	str	r2, [sp, #44]	; 0x2c
   1944c:	str	r1, [sp, #40]	; 0x28
   19450:	mov	r3, sp
   19454:	mov	r1, ip
   19458:	mvn	r2, #0
   1945c:	bl	18e74 <__assert_fail@plt+0x77a4>
   19460:	sub	sp, fp, #8
   19464:	pop	{r4, r5, fp, pc}
   19468:	push	{r4, r5, fp, lr}
   1946c:	add	fp, sp, #8
   19470:	sub	sp, sp, #48	; 0x30
   19474:	mov	lr, r3
   19478:	movw	r3, #62568	; 0xf468
   1947c:	mov	ip, #32
   19480:	cmp	r1, #0
   19484:	mov	r5, sp
   19488:	movt	r3, #2
   1948c:	cmpne	r2, #0
   19490:	add	r4, r3, #16
   19494:	vld1.64	{d16-d17}, [r3], ip
   19498:	vld1.64	{d18-d19}, [r4]
   1949c:	add	r4, r5, #16
   194a0:	vld1.64	{d20-d21}, [r3]
   194a4:	vst1.64	{d16-d17}, [r5], ip
   194a8:	mov	r3, #10
   194ac:	vst1.64	{d18-d19}, [r4]
   194b0:	vst1.64	{d20-d21}, [r5]
   194b4:	str	r3, [sp]
   194b8:	bne	194c0 <__assert_fail@plt+0x7df0>
   194bc:	bl	116a0 <abort@plt>
   194c0:	ldr	ip, [fp, #8]
   194c4:	str	r2, [sp, #44]	; 0x2c
   194c8:	str	r1, [sp, #40]	; 0x28
   194cc:	mov	r3, sp
   194d0:	mov	r1, lr
   194d4:	mov	r2, ip
   194d8:	bl	18e74 <__assert_fail@plt+0x77a4>
   194dc:	sub	sp, fp, #8
   194e0:	pop	{r4, r5, fp, pc}
   194e4:	push	{r4, sl, fp, lr}
   194e8:	add	fp, sp, #8
   194ec:	sub	sp, sp, #48	; 0x30
   194f0:	mov	ip, r2
   194f4:	movw	r2, #62568	; 0xf468
   194f8:	mov	lr, #32
   194fc:	cmp	r0, #0
   19500:	mov	r4, sp
   19504:	movt	r2, #2
   19508:	cmpne	r1, #0
   1950c:	add	r3, r2, #16
   19510:	vld1.64	{d16-d17}, [r2], lr
   19514:	vld1.64	{d18-d19}, [r3]
   19518:	add	r3, r4, #16
   1951c:	vld1.64	{d20-d21}, [r2]
   19520:	vst1.64	{d16-d17}, [r4], lr
   19524:	mov	r2, #10
   19528:	vst1.64	{d18-d19}, [r3]
   1952c:	vst1.64	{d20-d21}, [r4]
   19530:	str	r2, [sp]
   19534:	bne	1953c <__assert_fail@plt+0x7e6c>
   19538:	bl	116a0 <abort@plt>
   1953c:	str	r1, [sp, #44]	; 0x2c
   19540:	str	r0, [sp, #40]	; 0x28
   19544:	mov	r3, sp
   19548:	mov	r0, #0
   1954c:	mov	r1, ip
   19550:	mvn	r2, #0
   19554:	bl	18e74 <__assert_fail@plt+0x77a4>
   19558:	sub	sp, fp, #8
   1955c:	pop	{r4, sl, fp, pc}
   19560:	push	{r4, r5, fp, lr}
   19564:	add	fp, sp, #8
   19568:	sub	sp, sp, #48	; 0x30
   1956c:	mov	lr, r2
   19570:	movw	r2, #62568	; 0xf468
   19574:	mov	ip, r3
   19578:	mov	r3, #32
   1957c:	cmp	r0, #0
   19580:	mov	r5, sp
   19584:	movt	r2, #2
   19588:	cmpne	r1, #0
   1958c:	add	r4, r2, #16
   19590:	vld1.64	{d16-d17}, [r2], r3
   19594:	vld1.64	{d18-d19}, [r4]
   19598:	add	r4, r5, #16
   1959c:	vld1.64	{d20-d21}, [r2]
   195a0:	vst1.64	{d16-d17}, [r5], r3
   195a4:	mov	r2, #10
   195a8:	vst1.64	{d18-d19}, [r4]
   195ac:	vst1.64	{d20-d21}, [r5]
   195b0:	str	r2, [sp]
   195b4:	bne	195bc <__assert_fail@plt+0x7eec>
   195b8:	bl	116a0 <abort@plt>
   195bc:	str	r1, [sp, #44]	; 0x2c
   195c0:	str	r0, [sp, #40]	; 0x28
   195c4:	mov	r3, sp
   195c8:	mov	r0, #0
   195cc:	mov	r1, lr
   195d0:	mov	r2, ip
   195d4:	bl	18e74 <__assert_fail@plt+0x77a4>
   195d8:	sub	sp, fp, #8
   195dc:	pop	{r4, r5, fp, pc}
   195e0:	movw	r3, #61824	; 0xf180
   195e4:	movt	r3, #2
   195e8:	b	18e74 <__assert_fail@plt+0x77a4>
   195ec:	movw	r3, #61824	; 0xf180
   195f0:	mov	r2, r1
   195f4:	mov	r1, r0
   195f8:	mov	r0, #0
   195fc:	movt	r3, #2
   19600:	b	18e74 <__assert_fail@plt+0x77a4>
   19604:	movw	r3, #61824	; 0xf180
   19608:	mvn	r2, #0
   1960c:	movt	r3, #2
   19610:	b	18e74 <__assert_fail@plt+0x77a4>
   19614:	movw	r3, #61824	; 0xf180
   19618:	mov	r1, r0
   1961c:	mov	r0, #0
   19620:	mvn	r2, #0
   19624:	movt	r3, #2
   19628:	b	18e74 <__assert_fail@plt+0x77a4>
   1962c:	push	{r4, r5, fp, lr}
   19630:	add	fp, sp, #8
   19634:	mov	r5, r0
   19638:	mov	r4, r1
   1963c:	mov	r0, #0
   19640:	mov	r2, #5
   19644:	mov	r1, r5
   19648:	bl	11430 <dcgettext@plt>
   1964c:	cmp	r0, r5
   19650:	popne	{r4, r5, fp, pc}
   19654:	bl	1b8f8 <__assert_fail@plt+0xa228>
   19658:	ldrb	r1, [r0]
   1965c:	and	r1, r1, #223	; 0xdf
   19660:	cmp	r1, #71	; 0x47
   19664:	beq	196cc <__assert_fail@plt+0x7ffc>
   19668:	cmp	r1, #85	; 0x55
   1966c:	bne	196f0 <__assert_fail@plt+0x8020>
   19670:	ldrb	r1, [r0, #1]
   19674:	and	r1, r1, #223	; 0xdf
   19678:	cmp	r1, #84	; 0x54
   1967c:	bne	196f0 <__assert_fail@plt+0x8020>
   19680:	ldrb	r1, [r0, #2]
   19684:	and	r1, r1, #223	; 0xdf
   19688:	cmp	r1, #70	; 0x46
   1968c:	ldrbeq	r1, [r0, #3]
   19690:	cmpeq	r1, #45	; 0x2d
   19694:	bne	196f0 <__assert_fail@plt+0x8020>
   19698:	ldrb	r1, [r0, #4]
   1969c:	cmp	r1, #56	; 0x38
   196a0:	ldrbeq	r0, [r0, #5]
   196a4:	cmpeq	r0, #0
   196a8:	bne	196f0 <__assert_fail@plt+0x8020>
   196ac:	ldrb	r1, [r5]
   196b0:	movw	r2, #56626	; 0xdd32
   196b4:	movw	r0, #56630	; 0xdd36
   196b8:	movt	r2, #1
   196bc:	movt	r0, #1
   196c0:	cmp	r1, #96	; 0x60
   196c4:	moveq	r0, r2
   196c8:	pop	{r4, r5, fp, pc}
   196cc:	ldrb	r1, [r0, #1]
   196d0:	and	r1, r1, #223	; 0xdf
   196d4:	cmp	r1, #66	; 0x42
   196d8:	bne	196f0 <__assert_fail@plt+0x8020>
   196dc:	ldrb	r1, [r0, #2]
   196e0:	cmp	r1, #49	; 0x31
   196e4:	ldrbeq	r1, [r0, #3]
   196e8:	cmpeq	r1, #56	; 0x38
   196ec:	beq	1970c <__assert_fail@plt+0x803c>
   196f0:	movw	r1, #56620	; 0xdd2c
   196f4:	movw	r0, #56624	; 0xdd30
   196f8:	cmp	r4, #9
   196fc:	movt	r1, #1
   19700:	movt	r0, #1
   19704:	moveq	r0, r1
   19708:	pop	{r4, r5, fp, pc}
   1970c:	ldrb	r1, [r0, #4]
   19710:	cmp	r1, #48	; 0x30
   19714:	ldrbeq	r1, [r0, #5]
   19718:	cmpeq	r1, #51	; 0x33
   1971c:	bne	196f0 <__assert_fail@plt+0x8020>
   19720:	ldrb	r1, [r0, #6]
   19724:	cmp	r1, #48	; 0x30
   19728:	ldrbeq	r0, [r0, #7]
   1972c:	cmpeq	r0, #0
   19730:	bne	196f0 <__assert_fail@plt+0x8020>
   19734:	ldrb	r1, [r5]
   19738:	movw	r2, #56634	; 0xdd3a
   1973c:	movw	r0, #56638	; 0xdd3e
   19740:	movt	r2, #1
   19744:	movt	r0, #1
   19748:	b	196c0 <__assert_fail@plt+0x7ff0>
   1974c:	push	{fp, lr}
   19750:	mov	fp, sp
   19754:	push	{r2, r3}
   19758:	mov	r2, #0
   1975c:	mov	r3, #0
   19760:	bl	1976c <__assert_fail@plt+0x809c>
   19764:	mov	sp, fp
   19768:	pop	{fp, pc}
   1976c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19770:	add	fp, sp, #24
   19774:	sub	sp, sp, #8
   19778:	mov	r5, r1
   1977c:	mov	r6, r0
   19780:	ldr	r0, [fp, #8]
   19784:	ldr	r1, [fp, #12]
   19788:	mov	r8, r3
   1978c:	mov	r7, r2
   19790:	bl	1b120 <__assert_fail@plt+0x9a50>
   19794:	cmp	r0, #0
   19798:	beq	197f4 <__assert_fail@plt+0x8124>
   1979c:	mov	r4, r0
   197a0:	cmp	r7, #0
   197a4:	beq	197cc <__assert_fail@plt+0x80fc>
   197a8:	movw	r0, #54360	; 0xd458
   197ac:	mov	r1, r5
   197b0:	mov	r2, r7
   197b4:	mov	r3, r8
   197b8:	movt	r0, #1
   197bc:	stm	sp, {r0, r4}
   197c0:	mov	r0, r6
   197c4:	bl	114fc <error_at_line@plt>
   197c8:	b	197e4 <__assert_fail@plt+0x8114>
   197cc:	movw	r2, #54360	; 0xd458
   197d0:	mov	r0, r6
   197d4:	mov	r1, r5
   197d8:	mov	r3, r4
   197dc:	movt	r2, #1
   197e0:	bl	114cc <error@plt>
   197e4:	mov	r0, r4
   197e8:	sub	sp, fp, #24
   197ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   197f0:	b	1b8d0 <__assert_fail@plt+0xa200>
   197f4:	bl	11598 <__errno_location@plt>
   197f8:	ldr	r4, [r0]
   197fc:	movw	r1, #56728	; 0xdd98
   19800:	mov	r0, #0
   19804:	mov	r2, #5
   19808:	movt	r1, #1
   1980c:	bl	11430 <dcgettext@plt>
   19810:	mov	r2, r0
   19814:	mov	r0, #0
   19818:	mov	r1, r4
   1981c:	bl	114cc <error@plt>
   19820:	bl	116a0 <abort@plt>
   19824:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19828:	add	fp, sp, #24
   1982c:	sub	sp, sp, #32
   19830:	ldr	r6, [fp, #12]
   19834:	ldr	r7, [fp, #8]
   19838:	mov	r4, r2
   1983c:	mov	r8, r0
   19840:	cmp	r1, #0
   19844:	beq	1986c <__assert_fail@plt+0x819c>
   19848:	movw	r2, #56760	; 0xddb8
   1984c:	mov	r5, r1
   19850:	str	r3, [sp, #4]
   19854:	str	r4, [sp]
   19858:	mov	r0, r8
   1985c:	mov	r1, #1
   19860:	movt	r2, #1
   19864:	mov	r3, r5
   19868:	b	19884 <__assert_fail@plt+0x81b4>
   1986c:	movw	r2, #56772	; 0xddc4
   19870:	str	r3, [sp]
   19874:	mov	r0, r8
   19878:	mov	r1, #1
   1987c:	mov	r3, r4
   19880:	movt	r2, #1
   19884:	bl	115f8 <__fprintf_chk@plt>
   19888:	movw	r1, #56779	; 0xddcb
   1988c:	mov	r0, #0
   19890:	mov	r2, #5
   19894:	movt	r1, #1
   19898:	bl	11430 <dcgettext@plt>
   1989c:	movw	r2, #57497	; 0xe099
   198a0:	mov	r3, r0
   198a4:	movw	r0, #2022	; 0x7e6
   198a8:	mov	r1, #1
   198ac:	str	r0, [sp]
   198b0:	movt	r2, #1
   198b4:	mov	r0, r8
   198b8:	bl	115f8 <__fprintf_chk@plt>
   198bc:	movw	r4, #51036	; 0xc75c
   198c0:	mov	r1, r8
   198c4:	movt	r4, #1
   198c8:	mov	r0, r4
   198cc:	bl	11364 <fputs_unlocked@plt>
   198d0:	movw	r1, #56783	; 0xddcf
   198d4:	mov	r0, #0
   198d8:	mov	r2, #5
   198dc:	movt	r1, #1
   198e0:	bl	11430 <dcgettext@plt>
   198e4:	movw	r3, #56954	; 0xde7a
   198e8:	mov	r2, r0
   198ec:	mov	r0, r8
   198f0:	mov	r1, #1
   198f4:	movt	r3, #1
   198f8:	bl	115f8 <__fprintf_chk@plt>
   198fc:	mov	r0, r4
   19900:	mov	r1, r8
   19904:	bl	11364 <fputs_unlocked@plt>
   19908:	cmp	r6, #9
   1990c:	bhi	19948 <__assert_fail@plt+0x8278>
   19910:	add	r0, pc, #0
   19914:	ldr	pc, [r0, r6, lsl #2]
   19918:	andeq	r9, r1, r0, asr #18
   1991c:	andeq	r9, r1, r4, asr r9
   19920:	andeq	r9, r1, r4, lsl #19
   19924:	andeq	r9, r1, ip, lsr #19
   19928:	ldrdeq	r9, [r1], -r4
   1992c:	strdeq	r9, [r1], -ip
   19930:	andeq	r9, r1, r4, lsr #20
   19934:	andeq	r9, r1, ip, asr sl
   19938:	strdeq	r9, [r1], -ip
   1993c:	andeq	r9, r1, r4, lsr #21
   19940:	sub	sp, fp, #24
   19944:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19948:	movw	r1, #57307	; 0xdfdb
   1994c:	movt	r1, #1
   19950:	b	19aac <__assert_fail@plt+0x83dc>
   19954:	movw	r1, #56988	; 0xde9c
   19958:	mov	r0, #0
   1995c:	mov	r2, #5
   19960:	movt	r1, #1
   19964:	bl	11430 <dcgettext@plt>
   19968:	ldr	r3, [r7]
   1996c:	mov	r2, r0
   19970:	mov	r0, r8
   19974:	mov	r1, #1
   19978:	sub	sp, fp, #24
   1997c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19980:	b	115f8 <__fprintf_chk@plt>
   19984:	movw	r1, #57004	; 0xdeac
   19988:	mov	r0, #0
   1998c:	mov	r2, #5
   19990:	movt	r1, #1
   19994:	bl	11430 <dcgettext@plt>
   19998:	mov	r2, r0
   1999c:	ldr	r3, [r7]
   199a0:	ldr	r0, [r7, #4]
   199a4:	str	r0, [sp]
   199a8:	b	19a98 <__assert_fail@plt+0x83c8>
   199ac:	movw	r1, #57027	; 0xdec3
   199b0:	mov	r0, #0
   199b4:	mov	r2, #5
   199b8:	movt	r1, #1
   199bc:	bl	11430 <dcgettext@plt>
   199c0:	ldr	r3, [r7]
   199c4:	mov	r2, r0
   199c8:	ldmib	r7, {r0, r1}
   199cc:	stm	sp, {r0, r1}
   199d0:	b	19a98 <__assert_fail@plt+0x83c8>
   199d4:	movw	r1, #57055	; 0xdedf
   199d8:	mov	r0, #0
   199dc:	mov	r2, #5
   199e0:	movt	r1, #1
   199e4:	bl	11430 <dcgettext@plt>
   199e8:	ldr	r3, [r7]
   199ec:	mov	r2, r0
   199f0:	ldmib	r7, {r0, r1, r7}
   199f4:	stm	sp, {r0, r1, r7}
   199f8:	b	19a98 <__assert_fail@plt+0x83c8>
   199fc:	movw	r1, #57087	; 0xdeff
   19a00:	mov	r0, #0
   19a04:	mov	r2, #5
   19a08:	movt	r1, #1
   19a0c:	bl	11430 <dcgettext@plt>
   19a10:	ldr	r3, [r7]
   19a14:	mov	r2, r0
   19a18:	ldmib	r7, {r0, r1, r6, r7}
   19a1c:	stm	sp, {r0, r1, r6, r7}
   19a20:	b	19a98 <__assert_fail@plt+0x83c8>
   19a24:	movw	r1, #57123	; 0xdf23
   19a28:	mov	r0, #0
   19a2c:	mov	r2, #5
   19a30:	movt	r1, #1
   19a34:	bl	11430 <dcgettext@plt>
   19a38:	ldr	r3, [r7]
   19a3c:	mov	r2, r0
   19a40:	ldmib	r7, {r0, r1, r6}
   19a44:	ldr	r5, [r7, #16]
   19a48:	ldr	r7, [r7, #20]
   19a4c:	stm	sp, {r0, r1, r6}
   19a50:	str	r5, [sp, #12]
   19a54:	str	r7, [sp, #16]
   19a58:	b	19a98 <__assert_fail@plt+0x83c8>
   19a5c:	movw	r1, #57163	; 0xdf4b
   19a60:	mov	r0, #0
   19a64:	mov	r2, #5
   19a68:	movt	r1, #1
   19a6c:	bl	11430 <dcgettext@plt>
   19a70:	ldr	r3, [r7]
   19a74:	mov	r2, r0
   19a78:	ldmib	r7, {r0, r1, r6}
   19a7c:	ldr	r5, [r7, #16]
   19a80:	ldr	r4, [r7, #20]
   19a84:	ldr	r7, [r7, #24]
   19a88:	stm	sp, {r0, r1, r6}
   19a8c:	str	r5, [sp, #12]
   19a90:	str	r4, [sp, #16]
   19a94:	str	r7, [sp, #20]
   19a98:	mov	r0, r8
   19a9c:	mov	r1, #1
   19aa0:	b	19b4c <__assert_fail@plt+0x847c>
   19aa4:	movw	r1, #57255	; 0xdfa7
   19aa8:	movt	r1, #1
   19aac:	mov	r0, #0
   19ab0:	mov	r2, #5
   19ab4:	bl	11430 <dcgettext@plt>
   19ab8:	mov	ip, r0
   19abc:	ldr	r3, [r7]
   19ac0:	ldr	r0, [r7, #4]
   19ac4:	ldr	r1, [r7, #8]
   19ac8:	ldr	r6, [r7, #12]
   19acc:	ldr	r5, [r7, #16]
   19ad0:	ldr	r4, [r7, #20]
   19ad4:	ldr	r2, [r7, #24]
   19ad8:	ldr	lr, [r7, #28]
   19adc:	ldr	r7, [r7, #32]
   19ae0:	stm	sp, {r0, r1, r6}
   19ae4:	str	r5, [sp, #12]
   19ae8:	str	r4, [sp, #16]
   19aec:	str	r2, [sp, #20]
   19af0:	str	lr, [sp, #24]
   19af4:	str	r7, [sp, #28]
   19af8:	b	19b40 <__assert_fail@plt+0x8470>
   19afc:	movw	r1, #57207	; 0xdf77
   19b00:	mov	r0, #0
   19b04:	mov	r2, #5
   19b08:	movt	r1, #1
   19b0c:	bl	11430 <dcgettext@plt>
   19b10:	mov	ip, r0
   19b14:	ldr	r3, [r7]
   19b18:	ldmib	r7, {r0, r1, r6}
   19b1c:	ldr	r5, [r7, #16]
   19b20:	ldr	r4, [r7, #20]
   19b24:	ldr	r2, [r7, #24]
   19b28:	ldr	r7, [r7, #28]
   19b2c:	stm	sp, {r0, r1, r6}
   19b30:	str	r5, [sp, #12]
   19b34:	str	r4, [sp, #16]
   19b38:	str	r2, [sp, #20]
   19b3c:	str	r7, [sp, #24]
   19b40:	mov	r0, r8
   19b44:	mov	r1, #1
   19b48:	mov	r2, ip
   19b4c:	bl	115f8 <__fprintf_chk@plt>
   19b50:	sub	sp, fp, #24
   19b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b58:	push	{r4, sl, fp, lr}
   19b5c:	add	fp, sp, #8
   19b60:	sub	sp, sp, #8
   19b64:	ldr	ip, [fp, #8]
   19b68:	mov	lr, #0
   19b6c:	ldr	r4, [ip, lr, lsl #2]
   19b70:	add	lr, lr, #1
   19b74:	cmp	r4, #0
   19b78:	bne	19b6c <__assert_fail@plt+0x849c>
   19b7c:	sub	r4, lr, #1
   19b80:	str	ip, [sp]
   19b84:	str	r4, [sp, #4]
   19b88:	bl	19824 <__assert_fail@plt+0x8154>
   19b8c:	sub	sp, fp, #8
   19b90:	pop	{r4, sl, fp, pc}
   19b94:	push	{fp, lr}
   19b98:	mov	fp, sp
   19b9c:	sub	sp, sp, #48	; 0x30
   19ba0:	ldr	ip, [fp, #8]
   19ba4:	ldr	lr, [ip]
   19ba8:	cmp	lr, #0
   19bac:	str	lr, [sp, #8]
   19bb0:	beq	19c4c <__assert_fail@plt+0x857c>
   19bb4:	ldr	lr, [ip, #4]
   19bb8:	cmp	lr, #0
   19bbc:	str	lr, [sp, #12]
   19bc0:	beq	19c54 <__assert_fail@plt+0x8584>
   19bc4:	ldr	lr, [ip, #8]
   19bc8:	cmp	lr, #0
   19bcc:	str	lr, [sp, #16]
   19bd0:	beq	19c5c <__assert_fail@plt+0x858c>
   19bd4:	ldr	lr, [ip, #12]
   19bd8:	cmp	lr, #0
   19bdc:	str	lr, [sp, #20]
   19be0:	beq	19c64 <__assert_fail@plt+0x8594>
   19be4:	ldr	lr, [ip, #16]
   19be8:	cmp	lr, #0
   19bec:	str	lr, [sp, #24]
   19bf0:	beq	19c6c <__assert_fail@plt+0x859c>
   19bf4:	ldr	lr, [ip, #20]
   19bf8:	cmp	lr, #0
   19bfc:	str	lr, [sp, #28]
   19c00:	beq	19c74 <__assert_fail@plt+0x85a4>
   19c04:	ldr	lr, [ip, #24]
   19c08:	cmp	lr, #0
   19c0c:	str	lr, [sp, #32]
   19c10:	beq	19c7c <__assert_fail@plt+0x85ac>
   19c14:	ldr	lr, [ip, #28]
   19c18:	cmp	lr, #0
   19c1c:	str	lr, [sp, #36]	; 0x24
   19c20:	beq	19c84 <__assert_fail@plt+0x85b4>
   19c24:	ldr	lr, [ip, #32]
   19c28:	cmp	lr, #0
   19c2c:	str	lr, [sp, #40]	; 0x28
   19c30:	beq	19c8c <__assert_fail@plt+0x85bc>
   19c34:	ldr	lr, [ip, #36]	; 0x24
   19c38:	mov	ip, #10
   19c3c:	cmp	lr, #0
   19c40:	str	lr, [sp, #44]	; 0x2c
   19c44:	movweq	ip, #9
   19c48:	b	19c90 <__assert_fail@plt+0x85c0>
   19c4c:	mov	ip, #0
   19c50:	b	19c90 <__assert_fail@plt+0x85c0>
   19c54:	mov	ip, #1
   19c58:	b	19c90 <__assert_fail@plt+0x85c0>
   19c5c:	mov	ip, #2
   19c60:	b	19c90 <__assert_fail@plt+0x85c0>
   19c64:	mov	ip, #3
   19c68:	b	19c90 <__assert_fail@plt+0x85c0>
   19c6c:	mov	ip, #4
   19c70:	b	19c90 <__assert_fail@plt+0x85c0>
   19c74:	mov	ip, #5
   19c78:	b	19c90 <__assert_fail@plt+0x85c0>
   19c7c:	mov	ip, #6
   19c80:	b	19c90 <__assert_fail@plt+0x85c0>
   19c84:	mov	ip, #7
   19c88:	b	19c90 <__assert_fail@plt+0x85c0>
   19c8c:	mov	ip, #8
   19c90:	add	lr, sp, #8
   19c94:	str	ip, [sp, #4]
   19c98:	str	lr, [sp]
   19c9c:	bl	19824 <__assert_fail@plt+0x8154>
   19ca0:	mov	sp, fp
   19ca4:	pop	{fp, pc}
   19ca8:	push	{fp, lr}
   19cac:	mov	fp, sp
   19cb0:	sub	sp, sp, #56	; 0x38
   19cb4:	add	ip, fp, #8
   19cb8:	str	ip, [sp, #12]
   19cbc:	ldr	lr, [fp, #8]
   19cc0:	cmp	lr, #0
   19cc4:	str	lr, [sp, #16]
   19cc8:	beq	19d64 <__assert_fail@plt+0x8694>
   19ccc:	ldr	lr, [ip, #4]
   19cd0:	cmp	lr, #0
   19cd4:	str	lr, [sp, #20]
   19cd8:	beq	19d6c <__assert_fail@plt+0x869c>
   19cdc:	ldr	lr, [ip, #8]
   19ce0:	cmp	lr, #0
   19ce4:	str	lr, [sp, #24]
   19ce8:	beq	19d74 <__assert_fail@plt+0x86a4>
   19cec:	ldr	lr, [ip, #12]
   19cf0:	cmp	lr, #0
   19cf4:	str	lr, [sp, #28]
   19cf8:	beq	19d7c <__assert_fail@plt+0x86ac>
   19cfc:	ldr	lr, [ip, #16]
   19d00:	cmp	lr, #0
   19d04:	str	lr, [sp, #32]
   19d08:	beq	19d84 <__assert_fail@plt+0x86b4>
   19d0c:	ldr	lr, [ip, #20]
   19d10:	cmp	lr, #0
   19d14:	str	lr, [sp, #36]	; 0x24
   19d18:	beq	19d8c <__assert_fail@plt+0x86bc>
   19d1c:	ldr	lr, [ip, #24]
   19d20:	cmp	lr, #0
   19d24:	str	lr, [sp, #40]	; 0x28
   19d28:	beq	19d94 <__assert_fail@plt+0x86c4>
   19d2c:	ldr	lr, [ip, #28]
   19d30:	cmp	lr, #0
   19d34:	str	lr, [sp, #44]	; 0x2c
   19d38:	beq	19d9c <__assert_fail@plt+0x86cc>
   19d3c:	ldr	lr, [ip, #32]
   19d40:	cmp	lr, #0
   19d44:	str	lr, [sp, #48]	; 0x30
   19d48:	beq	19da4 <__assert_fail@plt+0x86d4>
   19d4c:	ldr	lr, [ip, #36]	; 0x24
   19d50:	mov	ip, #10
   19d54:	cmp	lr, #0
   19d58:	str	lr, [sp, #52]	; 0x34
   19d5c:	movweq	ip, #9
   19d60:	b	19da8 <__assert_fail@plt+0x86d8>
   19d64:	mov	ip, #0
   19d68:	b	19da8 <__assert_fail@plt+0x86d8>
   19d6c:	mov	ip, #1
   19d70:	b	19da8 <__assert_fail@plt+0x86d8>
   19d74:	mov	ip, #2
   19d78:	b	19da8 <__assert_fail@plt+0x86d8>
   19d7c:	mov	ip, #3
   19d80:	b	19da8 <__assert_fail@plt+0x86d8>
   19d84:	mov	ip, #4
   19d88:	b	19da8 <__assert_fail@plt+0x86d8>
   19d8c:	mov	ip, #5
   19d90:	b	19da8 <__assert_fail@plt+0x86d8>
   19d94:	mov	ip, #6
   19d98:	b	19da8 <__assert_fail@plt+0x86d8>
   19d9c:	mov	ip, #7
   19da0:	b	19da8 <__assert_fail@plt+0x86d8>
   19da4:	mov	ip, #8
   19da8:	add	lr, sp, #16
   19dac:	str	ip, [sp, #4]
   19db0:	str	lr, [sp]
   19db4:	bl	19824 <__assert_fail@plt+0x8154>
   19db8:	mov	sp, fp
   19dbc:	pop	{fp, pc}
   19dc0:	push	{fp, lr}
   19dc4:	mov	fp, sp
   19dc8:	movw	r0, #61908	; 0xf1d4
   19dcc:	movt	r0, #2
   19dd0:	ldr	r1, [r0]
   19dd4:	movw	r0, #51036	; 0xc75c
   19dd8:	movt	r0, #1
   19ddc:	bl	11364 <fputs_unlocked@plt>
   19de0:	movw	r1, #57367	; 0xe017
   19de4:	mov	r0, #0
   19de8:	mov	r2, #5
   19dec:	movt	r1, #1
   19df0:	bl	11430 <dcgettext@plt>
   19df4:	movw	r2, #57387	; 0xe02b
   19df8:	mov	r1, r0
   19dfc:	mov	r0, #1
   19e00:	movt	r2, #1
   19e04:	bl	115d4 <__printf_chk@plt>
   19e08:	movw	r1, #57409	; 0xe041
   19e0c:	mov	r0, #0
   19e10:	mov	r2, #5
   19e14:	movt	r1, #1
   19e18:	bl	11430 <dcgettext@plt>
   19e1c:	movw	r2, #53281	; 0xd021
   19e20:	movw	r3, #53295	; 0xd02f
   19e24:	mov	r1, r0
   19e28:	mov	r0, #1
   19e2c:	movt	r2, #1
   19e30:	movt	r3, #1
   19e34:	bl	115d4 <__printf_chk@plt>
   19e38:	movw	r1, #57429	; 0xe055
   19e3c:	mov	r0, #0
   19e40:	mov	r2, #5
   19e44:	movt	r1, #1
   19e48:	bl	11430 <dcgettext@plt>
   19e4c:	movw	r2, #57468	; 0xe07c
   19e50:	mov	r1, r0
   19e54:	mov	r0, #1
   19e58:	movt	r2, #1
   19e5c:	pop	{fp, lr}
   19e60:	b	115d4 <__printf_chk@plt>
   19e64:	push	{r4, r5, r6, sl, fp, lr}
   19e68:	add	fp, sp, #16
   19e6c:	mov	r4, r2
   19e70:	mov	r5, r1
   19e74:	mov	r6, r0
   19e78:	bl	1b990 <__assert_fail@plt+0xa2c0>
   19e7c:	cmp	r0, #0
   19e80:	popne	{r4, r5, r6, sl, fp, pc}
   19e84:	cmp	r6, #0
   19e88:	beq	19e9c <__assert_fail@plt+0x87cc>
   19e8c:	cmp	r5, #0
   19e90:	cmpne	r4, #0
   19e94:	bne	19e9c <__assert_fail@plt+0x87cc>
   19e98:	pop	{r4, r5, r6, sl, fp, pc}
   19e9c:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19ea0:	push	{r4, r5, r6, sl, fp, lr}
   19ea4:	add	fp, sp, #16
   19ea8:	mov	r4, r2
   19eac:	mov	r5, r1
   19eb0:	mov	r6, r0
   19eb4:	bl	1b990 <__assert_fail@plt+0xa2c0>
   19eb8:	cmp	r0, #0
   19ebc:	popne	{r4, r5, r6, sl, fp, pc}
   19ec0:	cmp	r6, #0
   19ec4:	beq	19ed8 <__assert_fail@plt+0x8808>
   19ec8:	cmp	r5, #0
   19ecc:	cmpne	r4, #0
   19ed0:	bne	19ed8 <__assert_fail@plt+0x8808>
   19ed4:	pop	{r4, r5, r6, sl, fp, pc}
   19ed8:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19edc:	push	{fp, lr}
   19ee0:	mov	fp, sp
   19ee4:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   19ee8:	cmp	r0, #0
   19eec:	popne	{fp, pc}
   19ef0:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19ef4:	push	{fp, lr}
   19ef8:	mov	fp, sp
   19efc:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   19f00:	cmp	r0, #0
   19f04:	popne	{fp, pc}
   19f08:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19f0c:	push	{fp, lr}
   19f10:	mov	fp, sp
   19f14:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   19f18:	cmp	r0, #0
   19f1c:	popne	{fp, pc}
   19f20:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19f24:	push	{r4, r5, fp, lr}
   19f28:	add	fp, sp, #8
   19f2c:	mov	r4, r1
   19f30:	mov	r5, r0
   19f34:	bl	1b328 <__assert_fail@plt+0x9c58>
   19f38:	cmp	r0, #0
   19f3c:	popne	{r4, r5, fp, pc}
   19f40:	cmp	r5, #0
   19f44:	beq	19f54 <__assert_fail@plt+0x8884>
   19f48:	cmp	r4, #0
   19f4c:	bne	19f54 <__assert_fail@plt+0x8884>
   19f50:	pop	{r4, r5, fp, pc}
   19f54:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19f58:	push	{fp, lr}
   19f5c:	mov	fp, sp
   19f60:	cmp	r1, #0
   19f64:	orreq	r1, r1, #1
   19f68:	bl	1b328 <__assert_fail@plt+0x9c58>
   19f6c:	cmp	r0, #0
   19f70:	popne	{fp, pc}
   19f74:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19f78:	push	{fp, lr}
   19f7c:	mov	fp, sp
   19f80:	clz	r3, r2
   19f84:	lsr	ip, r3, #5
   19f88:	clz	r3, r1
   19f8c:	lsr	r3, r3, #5
   19f90:	orrs	r3, r3, ip
   19f94:	movwne	r1, #1
   19f98:	movwne	r2, #1
   19f9c:	bl	1b990 <__assert_fail@plt+0xa2c0>
   19fa0:	cmp	r0, #0
   19fa4:	popne	{fp, pc}
   19fa8:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19fac:	push	{fp, lr}
   19fb0:	mov	fp, sp
   19fb4:	mov	r2, r1
   19fb8:	mov	r1, r0
   19fbc:	mov	r0, #0
   19fc0:	bl	1b990 <__assert_fail@plt+0xa2c0>
   19fc4:	cmp	r0, #0
   19fc8:	popne	{fp, pc}
   19fcc:	bl	1a43c <__assert_fail@plt+0x8d6c>
   19fd0:	push	{fp, lr}
   19fd4:	mov	fp, sp
   19fd8:	mov	r2, r1
   19fdc:	mov	r1, r0
   19fe0:	clz	r0, r2
   19fe4:	clz	r3, r1
   19fe8:	lsr	r0, r0, #5
   19fec:	lsr	r3, r3, #5
   19ff0:	orrs	r0, r3, r0
   19ff4:	movwne	r1, #1
   19ff8:	movwne	r2, #1
   19ffc:	mov	r0, #0
   1a000:	bl	1b990 <__assert_fail@plt+0xa2c0>
   1a004:	cmp	r0, #0
   1a008:	popne	{fp, pc}
   1a00c:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a010:	push	{r4, r5, r6, sl, fp, lr}
   1a014:	add	fp, sp, #16
   1a018:	ldr	r5, [r1]
   1a01c:	mov	r4, r1
   1a020:	mov	r6, r0
   1a024:	cmp	r0, #0
   1a028:	beq	1a040 <__assert_fail@plt+0x8970>
   1a02c:	mov	r0, #1
   1a030:	add	r0, r0, r5, lsr #1
   1a034:	adds	r5, r5, r0
   1a038:	bcc	1a048 <__assert_fail@plt+0x8978>
   1a03c:	b	1a084 <__assert_fail@plt+0x89b4>
   1a040:	cmp	r5, #0
   1a044:	movweq	r5, #64	; 0x40
   1a048:	mov	r0, r6
   1a04c:	mov	r1, r5
   1a050:	mov	r2, #1
   1a054:	bl	1b990 <__assert_fail@plt+0xa2c0>
   1a058:	cmp	r5, #0
   1a05c:	mov	r1, r5
   1a060:	movwne	r1, #1
   1a064:	cmp	r0, #0
   1a068:	bne	1a07c <__assert_fail@plt+0x89ac>
   1a06c:	clz	r2, r6
   1a070:	lsr	r2, r2, #5
   1a074:	orrs	r1, r2, r1
   1a078:	bne	1a084 <__assert_fail@plt+0x89b4>
   1a07c:	str	r5, [r4]
   1a080:	pop	{r4, r5, r6, sl, fp, pc}
   1a084:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a088:	push	{r4, r5, r6, r7, fp, lr}
   1a08c:	add	fp, sp, #16
   1a090:	ldr	r5, [r1]
   1a094:	mov	r6, r2
   1a098:	mov	r4, r1
   1a09c:	mov	r7, r0
   1a0a0:	cmp	r0, #0
   1a0a4:	beq	1a0bc <__assert_fail@plt+0x89ec>
   1a0a8:	mov	r0, #1
   1a0ac:	add	r0, r0, r5, lsr #1
   1a0b0:	adds	r5, r5, r0
   1a0b4:	bcc	1a0d4 <__assert_fail@plt+0x8a04>
   1a0b8:	b	1a108 <__assert_fail@plt+0x8a38>
   1a0bc:	cmp	r5, #0
   1a0c0:	bne	1a0d4 <__assert_fail@plt+0x8a04>
   1a0c4:	mov	r0, #64	; 0x40
   1a0c8:	cmp	r6, #64	; 0x40
   1a0cc:	udiv	r5, r0, r6
   1a0d0:	addhi	r5, r5, #1
   1a0d4:	mov	r0, r7
   1a0d8:	mov	r1, r5
   1a0dc:	mov	r2, r6
   1a0e0:	bl	1b990 <__assert_fail@plt+0xa2c0>
   1a0e4:	cmp	r0, #0
   1a0e8:	bne	1a100 <__assert_fail@plt+0x8a30>
   1a0ec:	cmp	r7, #0
   1a0f0:	beq	1a108 <__assert_fail@plt+0x8a38>
   1a0f4:	cmp	r6, #0
   1a0f8:	cmpne	r5, #0
   1a0fc:	bne	1a108 <__assert_fail@plt+0x8a38>
   1a100:	str	r5, [r4]
   1a104:	pop	{r4, r5, r6, r7, fp, pc}
   1a108:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a10c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a110:	add	fp, sp, #24
   1a114:	mov	r8, r1
   1a118:	ldr	r1, [r1]
   1a11c:	mov	r5, r0
   1a120:	add	r0, r1, r1, asr #1
   1a124:	cmp	r0, r1
   1a128:	mvnvs	r0, #-2147483648	; 0x80000000
   1a12c:	cmp	r0, r3
   1a130:	mov	r7, r0
   1a134:	movgt	r7, r3
   1a138:	cmn	r3, #1
   1a13c:	movle	r7, r0
   1a140:	ldr	r0, [fp, #8]
   1a144:	cmn	r0, #1
   1a148:	ble	1a170 <__assert_fail@plt+0x8aa0>
   1a14c:	cmp	r0, #0
   1a150:	beq	1a1c4 <__assert_fail@plt+0x8af4>
   1a154:	cmn	r7, #1
   1a158:	ble	1a198 <__assert_fail@plt+0x8ac8>
   1a15c:	mvn	r4, #-2147483648	; 0x80000000
   1a160:	udiv	r6, r4, r0
   1a164:	cmp	r6, r7
   1a168:	bge	1a1c4 <__assert_fail@plt+0x8af4>
   1a16c:	b	1a1d4 <__assert_fail@plt+0x8b04>
   1a170:	cmn	r7, #1
   1a174:	ble	1a1b4 <__assert_fail@plt+0x8ae4>
   1a178:	cmn	r0, #1
   1a17c:	beq	1a1c4 <__assert_fail@plt+0x8af4>
   1a180:	mov	r6, #-2147483648	; 0x80000000
   1a184:	mvn	r4, #-2147483648	; 0x80000000
   1a188:	sdiv	r6, r6, r0
   1a18c:	cmp	r6, r7
   1a190:	bge	1a1c4 <__assert_fail@plt+0x8af4>
   1a194:	b	1a1d4 <__assert_fail@plt+0x8b04>
   1a198:	beq	1a1c4 <__assert_fail@plt+0x8af4>
   1a19c:	mov	r6, #-2147483648	; 0x80000000
   1a1a0:	mvn	r4, #-2147483648	; 0x80000000
   1a1a4:	sdiv	r6, r6, r7
   1a1a8:	cmp	r6, r0
   1a1ac:	bge	1a1c4 <__assert_fail@plt+0x8af4>
   1a1b0:	b	1a1d4 <__assert_fail@plt+0x8b04>
   1a1b4:	mvn	r4, #-2147483648	; 0x80000000
   1a1b8:	sdiv	r6, r4, r0
   1a1bc:	cmp	r7, r6
   1a1c0:	blt	1a1d4 <__assert_fail@plt+0x8b04>
   1a1c4:	mul	r6, r7, r0
   1a1c8:	mov	r4, #64	; 0x40
   1a1cc:	cmp	r6, #63	; 0x3f
   1a1d0:	bgt	1a1dc <__assert_fail@plt+0x8b0c>
   1a1d4:	sdiv	r7, r4, r0
   1a1d8:	mul	r6, r7, r0
   1a1dc:	cmp	r5, #0
   1a1e0:	moveq	r4, #0
   1a1e4:	streq	r4, [r8]
   1a1e8:	sub	r4, r7, r1
   1a1ec:	cmp	r4, r2
   1a1f0:	bge	1a29c <__assert_fail@plt+0x8bcc>
   1a1f4:	add	r7, r1, r2
   1a1f8:	mov	r6, #0
   1a1fc:	mov	r2, #0
   1a200:	cmp	r7, r3
   1a204:	movwgt	r6, #1
   1a208:	cmn	r3, #1
   1a20c:	movwgt	r2, #1
   1a210:	cmp	r7, r1
   1a214:	bvs	1a2d0 <__assert_fail@plt+0x8c00>
   1a218:	ands	r1, r2, r6
   1a21c:	bne	1a2d0 <__assert_fail@plt+0x8c00>
   1a220:	cmn	r0, #1
   1a224:	ble	1a24c <__assert_fail@plt+0x8b7c>
   1a228:	cmp	r0, #0
   1a22c:	beq	1a298 <__assert_fail@plt+0x8bc8>
   1a230:	cmn	r7, #1
   1a234:	ble	1a270 <__assert_fail@plt+0x8ba0>
   1a238:	mvn	r1, #-2147483648	; 0x80000000
   1a23c:	udiv	r1, r1, r0
   1a240:	cmp	r1, r7
   1a244:	bge	1a298 <__assert_fail@plt+0x8bc8>
   1a248:	b	1a2d0 <__assert_fail@plt+0x8c00>
   1a24c:	cmn	r7, #1
   1a250:	ble	1a288 <__assert_fail@plt+0x8bb8>
   1a254:	cmn	r0, #1
   1a258:	beq	1a298 <__assert_fail@plt+0x8bc8>
   1a25c:	mov	r1, #-2147483648	; 0x80000000
   1a260:	sdiv	r1, r1, r0
   1a264:	cmp	r1, r7
   1a268:	bge	1a298 <__assert_fail@plt+0x8bc8>
   1a26c:	b	1a2d0 <__assert_fail@plt+0x8c00>
   1a270:	beq	1a298 <__assert_fail@plt+0x8bc8>
   1a274:	mov	r1, #-2147483648	; 0x80000000
   1a278:	sdiv	r1, r1, r7
   1a27c:	cmp	r1, r0
   1a280:	bge	1a298 <__assert_fail@plt+0x8bc8>
   1a284:	b	1a2d0 <__assert_fail@plt+0x8c00>
   1a288:	mvn	r1, #-2147483648	; 0x80000000
   1a28c:	sdiv	r1, r1, r0
   1a290:	cmp	r7, r1
   1a294:	blt	1a2d0 <__assert_fail@plt+0x8c00>
   1a298:	mul	r6, r7, r0
   1a29c:	mov	r0, r5
   1a2a0:	mov	r1, r6
   1a2a4:	bl	1b328 <__assert_fail@plt+0x9c58>
   1a2a8:	cmp	r6, #0
   1a2ac:	movwne	r6, #1
   1a2b0:	cmp	r0, #0
   1a2b4:	bne	1a2c8 <__assert_fail@plt+0x8bf8>
   1a2b8:	clz	r1, r5
   1a2bc:	lsr	r1, r1, #5
   1a2c0:	orrs	r1, r1, r6
   1a2c4:	bne	1a2d0 <__assert_fail@plt+0x8c00>
   1a2c8:	str	r7, [r8]
   1a2cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a2d0:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a2d4:	push	{fp, lr}
   1a2d8:	mov	fp, sp
   1a2dc:	mov	r1, #1
   1a2e0:	bl	1b2a4 <__assert_fail@plt+0x9bd4>
   1a2e4:	cmp	r0, #0
   1a2e8:	popne	{fp, pc}
   1a2ec:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a2f0:	push	{fp, lr}
   1a2f4:	mov	fp, sp
   1a2f8:	bl	1b2a4 <__assert_fail@plt+0x9bd4>
   1a2fc:	cmp	r0, #0
   1a300:	popne	{fp, pc}
   1a304:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a308:	push	{fp, lr}
   1a30c:	mov	fp, sp
   1a310:	mov	r1, #1
   1a314:	bl	1b2a4 <__assert_fail@plt+0x9bd4>
   1a318:	cmp	r0, #0
   1a31c:	popne	{fp, pc}
   1a320:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a324:	push	{fp, lr}
   1a328:	mov	fp, sp
   1a32c:	bl	1b2a4 <__assert_fail@plt+0x9bd4>
   1a330:	cmp	r0, #0
   1a334:	popne	{fp, pc}
   1a338:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a33c:	push	{r4, r5, r6, sl, fp, lr}
   1a340:	add	fp, sp, #16
   1a344:	mov	r5, r0
   1a348:	mov	r0, r1
   1a34c:	mov	r4, r1
   1a350:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   1a354:	cmp	r0, #0
   1a358:	beq	1a374 <__assert_fail@plt+0x8ca4>
   1a35c:	mov	r1, r5
   1a360:	mov	r2, r4
   1a364:	mov	r6, r0
   1a368:	bl	113f4 <memcpy@plt>
   1a36c:	mov	r0, r6
   1a370:	pop	{r4, r5, r6, sl, fp, pc}
   1a374:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a378:	push	{r4, r5, r6, sl, fp, lr}
   1a37c:	add	fp, sp, #16
   1a380:	mov	r5, r0
   1a384:	mov	r0, r1
   1a388:	mov	r4, r1
   1a38c:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   1a390:	cmp	r0, #0
   1a394:	beq	1a3b0 <__assert_fail@plt+0x8ce0>
   1a398:	mov	r1, r5
   1a39c:	mov	r2, r4
   1a3a0:	mov	r6, r0
   1a3a4:	bl	113f4 <memcpy@plt>
   1a3a8:	mov	r0, r6
   1a3ac:	pop	{r4, r5, r6, sl, fp, pc}
   1a3b0:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a3b4:	push	{r4, r5, r6, sl, fp, lr}
   1a3b8:	add	fp, sp, #16
   1a3bc:	mov	r5, r0
   1a3c0:	add	r0, r1, #1
   1a3c4:	mov	r4, r1
   1a3c8:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   1a3cc:	cmp	r0, #0
   1a3d0:	beq	1a3f8 <__assert_fail@plt+0x8d28>
   1a3d4:	mov	r6, r0
   1a3d8:	mov	r0, #0
   1a3dc:	mov	r1, r5
   1a3e0:	mov	r2, r4
   1a3e4:	strb	r0, [r6, r4]
   1a3e8:	mov	r0, r6
   1a3ec:	bl	113f4 <memcpy@plt>
   1a3f0:	mov	r0, r6
   1a3f4:	pop	{r4, r5, r6, sl, fp, pc}
   1a3f8:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a3fc:	push	{r4, r5, r6, sl, fp, lr}
   1a400:	add	fp, sp, #16
   1a404:	mov	r4, r0
   1a408:	bl	11574 <strlen@plt>
   1a40c:	add	r5, r0, #1
   1a410:	mov	r0, r5
   1a414:	bl	1b2f8 <__assert_fail@plt+0x9c28>
   1a418:	cmp	r0, #0
   1a41c:	beq	1a438 <__assert_fail@plt+0x8d68>
   1a420:	mov	r1, r4
   1a424:	mov	r2, r5
   1a428:	mov	r6, r0
   1a42c:	bl	113f4 <memcpy@plt>
   1a430:	mov	r0, r6
   1a434:	pop	{r4, r5, r6, sl, fp, pc}
   1a438:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1a43c:	push	{fp, lr}
   1a440:	mov	fp, sp
   1a444:	movw	r0, #61804	; 0xf16c
   1a448:	movw	r1, #57544	; 0xe0c8
   1a44c:	mov	r2, #5
   1a450:	movt	r0, #2
   1a454:	movt	r1, #1
   1a458:	ldr	r4, [r0]
   1a45c:	mov	r0, #0
   1a460:	bl	11430 <dcgettext@plt>
   1a464:	movw	r2, #54360	; 0xd458
   1a468:	mov	r3, r0
   1a46c:	mov	r0, r4
   1a470:	mov	r1, #0
   1a474:	movt	r2, #1
   1a478:	bl	114cc <error@plt>
   1a47c:	bl	116a0 <abort@plt>
   1a480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a484:	add	fp, sp, #28
   1a488:	sub	sp, sp, #44	; 0x2c
   1a48c:	cmp	r2, #37	; 0x25
   1a490:	bcs	1b100 <__assert_fail@plt+0x9a30>
   1a494:	ldr	sl, [fp, #8]
   1a498:	mov	r6, r2
   1a49c:	mov	r7, r1
   1a4a0:	mov	r4, r0
   1a4a4:	str	r3, [sp, #36]	; 0x24
   1a4a8:	bl	11598 <__errno_location@plt>
   1a4ac:	mov	r5, r0
   1a4b0:	mov	r0, #0
   1a4b4:	str	r0, [r5]
   1a4b8:	bl	1155c <__ctype_b_loc@plt>
   1a4bc:	ldr	r1, [r0]
   1a4c0:	mov	r2, r4
   1a4c4:	ldrb	r0, [r2], #1
   1a4c8:	add	r3, r1, r0, lsl #1
   1a4cc:	ldrb	r3, [r3, #1]
   1a4d0:	tst	r3, #32
   1a4d4:	bne	1a4c4 <__assert_fail@plt+0x8df4>
   1a4d8:	sub	r9, fp, #32
   1a4dc:	cmp	r7, #0
   1a4e0:	mov	r8, #4
   1a4e4:	movne	r9, r7
   1a4e8:	cmp	r0, #45	; 0x2d
   1a4ec:	beq	1b0f4 <__assert_fail@plt+0x9a24>
   1a4f0:	mov	r0, r4
   1a4f4:	mov	r1, r9
   1a4f8:	mov	r2, r6
   1a4fc:	mov	r3, #0
   1a500:	bl	11400 <__strtoull_internal@plt>
   1a504:	mov	r7, r1
   1a508:	ldr	r1, [r9]
   1a50c:	cmp	r1, r4
   1a510:	beq	1a53c <__assert_fail@plt+0x8e6c>
   1a514:	mov	r6, r0
   1a518:	ldr	r0, [r5]
   1a51c:	cmp	r0, #0
   1a520:	beq	1a578 <__assert_fail@plt+0x8ea8>
   1a524:	cmp	r0, #34	; 0x22
   1a528:	bne	1b0f4 <__assert_fail@plt+0x9a24>
   1a52c:	mov	r8, #1
   1a530:	cmp	sl, #0
   1a534:	bne	1a584 <__assert_fail@plt+0x8eb4>
   1a538:	b	1b0ec <__assert_fail@plt+0x9a1c>
   1a53c:	cmp	sl, #0
   1a540:	beq	1b0f4 <__assert_fail@plt+0x9a24>
   1a544:	mov	r5, r1
   1a548:	ldrb	r1, [r4]
   1a54c:	cmp	r1, #0
   1a550:	beq	1b0f4 <__assert_fail@plt+0x9a24>
   1a554:	mov	r0, sl
   1a558:	bl	11580 <strchr@plt>
   1a55c:	cmp	r0, #0
   1a560:	beq	1b0f4 <__assert_fail@plt+0x9a24>
   1a564:	mov	r1, r5
   1a568:	mov	r8, #0
   1a56c:	mov	r6, #1
   1a570:	mov	r7, #0
   1a574:	b	1a584 <__assert_fail@plt+0x8eb4>
   1a578:	mov	r8, r0
   1a57c:	cmp	sl, #0
   1a580:	beq	1b0ec <__assert_fail@plt+0x9a1c>
   1a584:	ldrb	r4, [r1]
   1a588:	cmp	r4, #0
   1a58c:	beq	1b0ec <__assert_fail@plt+0x9a1c>
   1a590:	str	r1, [sp, #32]
   1a594:	mov	r0, sl
   1a598:	mov	r1, r4
   1a59c:	bl	11580 <strchr@plt>
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a86c <__assert_fail@plt+0x919c>
   1a5a8:	sub	r0, r4, #69	; 0x45
   1a5ac:	mov	r1, #1
   1a5b0:	mov	r3, #0
   1a5b4:	mov	r5, #1024	; 0x400
   1a5b8:	cmp	r0, #47	; 0x2f
   1a5bc:	str	r1, [sp, #28]
   1a5c0:	bhi	1a6c4 <__assert_fail@plt+0x8ff4>
   1a5c4:	add	r1, pc, #0
   1a5c8:	ldr	pc, [r1, r0, lsl #2]
   1a5cc:	andeq	sl, r1, ip, lsl #13
   1a5d0:	andeq	sl, r1, r4, asr #13
   1a5d4:	andeq	sl, r1, ip, lsl #13
   1a5d8:	andeq	sl, r1, r4, asr #13
   1a5dc:	andeq	sl, r1, r4, asr #13
   1a5e0:	andeq	sl, r1, r4, asr #13
   1a5e4:	andeq	sl, r1, ip, lsl #13
   1a5e8:	andeq	sl, r1, r4, asr #13
   1a5ec:	andeq	sl, r1, ip, lsl #13
   1a5f0:	andeq	sl, r1, r4, asr #13
   1a5f4:	andeq	sl, r1, r4, asr #13
   1a5f8:	andeq	sl, r1, ip, lsl #13
   1a5fc:	andeq	sl, r1, r4, asr #13
   1a600:	andeq	sl, r1, r4, asr #13
   1a604:	andeq	sl, r1, r4, asr #13
   1a608:	andeq	sl, r1, ip, lsl #13
   1a60c:	andeq	sl, r1, r4, asr #13
   1a610:	andeq	sl, r1, r4, asr #13
   1a614:	andeq	sl, r1, r4, asr #13
   1a618:	andeq	sl, r1, r4, asr #13
   1a61c:	andeq	sl, r1, ip, lsl #13
   1a620:	andeq	sl, r1, ip, lsl #13
   1a624:	andeq	sl, r1, r4, asr #13
   1a628:	andeq	sl, r1, r4, asr #13
   1a62c:	andeq	sl, r1, r4, asr #13
   1a630:	andeq	sl, r1, r4, asr #13
   1a634:	andeq	sl, r1, r4, asr #13
   1a638:	andeq	sl, r1, r4, asr #13
   1a63c:	andeq	sl, r1, r4, asr #13
   1a640:	andeq	sl, r1, r4, asr #13
   1a644:	andeq	sl, r1, r4, asr #13
   1a648:	andeq	sl, r1, r4, asr #13
   1a64c:	andeq	sl, r1, r4, asr #13
   1a650:	andeq	sl, r1, r4, asr #13
   1a654:	andeq	sl, r1, ip, lsl #13
   1a658:	andeq	sl, r1, r4, asr #13
   1a65c:	andeq	sl, r1, r4, asr #13
   1a660:	andeq	sl, r1, r4, asr #13
   1a664:	andeq	sl, r1, ip, lsl #13
   1a668:	andeq	sl, r1, r4, asr #13
   1a66c:	andeq	sl, r1, ip, lsl #13
   1a670:	andeq	sl, r1, r4, asr #13
   1a674:	andeq	sl, r1, r4, asr #13
   1a678:	andeq	sl, r1, r4, asr #13
   1a67c:	andeq	sl, r1, r4, asr #13
   1a680:	andeq	sl, r1, r4, asr #13
   1a684:	andeq	sl, r1, r4, asr #13
   1a688:	andeq	sl, r1, ip, lsl #13
   1a68c:	mov	r0, sl
   1a690:	mov	r1, #48	; 0x30
   1a694:	bl	11580 <strchr@plt>
   1a698:	cmp	r0, #0
   1a69c:	beq	1a6c0 <__assert_fail@plt+0x8ff0>
   1a6a0:	ldr	r1, [sp, #32]
   1a6a4:	ldrb	r0, [r1, #1]
   1a6a8:	cmp	r0, #66	; 0x42
   1a6ac:	cmpne	r0, #68	; 0x44
   1a6b0:	bne	1a878 <__assert_fail@plt+0x91a8>
   1a6b4:	mov	r5, #1000	; 0x3e8
   1a6b8:	mov	r0, #2
   1a6bc:	str	r0, [sp, #28]
   1a6c0:	mov	r3, #0
   1a6c4:	sub	r0, r4, #66	; 0x42
   1a6c8:	cmp	r0, #53	; 0x35
   1a6cc:	bhi	1a86c <__assert_fail@plt+0x919c>
   1a6d0:	add	r1, pc, #0
   1a6d4:	ldr	pc, [r1, r0, lsl #2]
   1a6d8:	strdeq	sl, [r1], -r4
   1a6dc:	andeq	sl, r1, ip, ror #16
   1a6e0:	andeq	sl, r1, ip, ror #16
   1a6e4:	andeq	sl, r1, ip, lsl ip
   1a6e8:	andeq	sl, r1, ip, ror #16
   1a6ec:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6f0:	andeq	sl, r1, ip, ror #16
   1a6f4:	andeq	sl, r1, ip, ror #16
   1a6f8:	andeq	sl, r1, ip, ror #16
   1a6fc:	muleq	r1, ip, r8
   1a700:	andeq	sl, r1, ip, ror #16
   1a704:	andeq	sl, r1, r4, ror #17
   1a708:	andeq	sl, r1, ip, ror #16
   1a70c:	andeq	sl, r1, ip, ror #16
   1a710:	andeq	sl, r1, r4, ror sp
   1a714:	andeq	sl, r1, ip, ror #16
   1a718:	andeq	sl, r1, ip, ror #16
   1a71c:	andeq	sl, r1, ip, ror #16
   1a720:	andeq	sl, r1, r0, ror r9
   1a724:	andeq	sl, r1, ip, ror #16
   1a728:	andeq	sl, r1, ip, ror #16
   1a72c:	andeq	sl, r1, ip, ror #16
   1a730:	andeq	sl, r1, ip, ror #16
   1a734:	muleq	r1, ip, lr
   1a738:	andeq	sl, r1, r8, asr sl
   1a73c:	andeq	sl, r1, ip, ror #16
   1a740:	andeq	sl, r1, ip, ror #16
   1a744:	andeq	sl, r1, ip, ror #16
   1a748:	andeq	sl, r1, ip, ror #16
   1a74c:	andeq	sl, r1, ip, ror #16
   1a750:	andeq	sl, r1, ip, ror #16
   1a754:	andeq	sl, r1, ip, ror #16
   1a758:	andeq	fp, r1, r4, ror r0
   1a75c:	andeq	fp, r1, ip, asr #1
   1a760:	andeq	sl, r1, ip, ror #16
   1a764:	andeq	sl, r1, ip, ror #16
   1a768:	andeq	sl, r1, ip, ror #16
   1a76c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a770:	andeq	sl, r1, ip, ror #16
   1a774:	andeq	sl, r1, ip, ror #16
   1a778:	andeq	sl, r1, ip, ror #16
   1a77c:	muleq	r1, ip, r8
   1a780:	andeq	sl, r1, ip, ror #16
   1a784:	andeq	sl, r1, r4, ror #17
   1a788:	andeq	sl, r1, ip, ror #16
   1a78c:	andeq	sl, r1, ip, ror #16
   1a790:	andeq	sl, r1, ip, ror #16
   1a794:	andeq	sl, r1, ip, ror #16
   1a798:	andeq	sl, r1, ip, ror #16
   1a79c:	andeq	sl, r1, ip, ror #16
   1a7a0:	andeq	sl, r1, r0, ror r9
   1a7a4:	andeq	sl, r1, ip, ror #16
   1a7a8:	andeq	sl, r1, ip, ror #16
   1a7ac:	andeq	fp, r1, r8, lsr #1
   1a7b0:	mvn	r0, #0
   1a7b4:	mvn	r1, #0
   1a7b8:	mov	r2, r5
   1a7bc:	mov	sl, r3
   1a7c0:	bl	1bf68 <__assert_fail@plt+0xa898>
   1a7c4:	subs	r3, r0, r6
   1a7c8:	mov	lr, #0
   1a7cc:	umull	r4, r2, r6, r5
   1a7d0:	str	r1, [sp, #20]
   1a7d4:	sbcs	r3, r1, r7
   1a7d8:	mla	ip, r6, sl, r2
   1a7dc:	mov	r2, r1
   1a7e0:	movwcc	lr, #1
   1a7e4:	mla	r7, r7, r5, ip
   1a7e8:	mov	r2, #0
   1a7ec:	cmp	lr, #0
   1a7f0:	mvnne	r4, #0
   1a7f4:	mvnne	r7, #0
   1a7f8:	subs	r6, r0, r4
   1a7fc:	sbcs	r6, r1, r7
   1a800:	movwcc	r2, #1
   1a804:	umull	r3, r6, r4, r5
   1a808:	cmp	r2, #0
   1a80c:	str	r6, [sp, #16]
   1a810:	mvnne	r3, #0
   1a814:	cmp	r2, #0
   1a818:	umull	r6, ip, r3, r5
   1a81c:	mla	r1, r3, sl, ip
   1a820:	ldr	ip, [sp, #16]
   1a824:	str	r1, [sp, #12]
   1a828:	mla	r4, r4, sl, ip
   1a82c:	mla	r4, r7, r5, r4
   1a830:	ldr	r7, [sp, #12]
   1a834:	mvnne	r4, #0
   1a838:	subs	r0, r0, r3
   1a83c:	ldr	r0, [sp, #20]
   1a840:	mla	r7, r4, r5, r7
   1a844:	sbcs	r0, r0, r4
   1a848:	mov	r0, #0
   1a84c:	movwcc	r0, #1
   1a850:	cmp	r0, #0
   1a854:	mov	r1, r0
   1a858:	orr	r0, lr, r2
   1a85c:	mvnne	r7, #0
   1a860:	mvnne	r6, #0
   1a864:	orr	r3, r0, r1
   1a868:	b	1b0cc <__assert_fail@plt+0x99fc>
   1a86c:	ldr	r0, [sp, #36]	; 0x24
   1a870:	orr	r8, r8, #2
   1a874:	b	1b0f0 <__assert_fail@plt+0x9a20>
   1a878:	cmp	r0, #105	; 0x69
   1a87c:	mov	r3, #0
   1a880:	bne	1a6c4 <__assert_fail@plt+0x8ff4>
   1a884:	ldrb	r0, [r1, #2]
   1a888:	mov	r1, #1
   1a88c:	cmp	r0, #66	; 0x42
   1a890:	movweq	r1, #3
   1a894:	str	r1, [sp, #28]
   1a898:	b	1a6c4 <__assert_fail@plt+0x8ff4>
   1a89c:	mvn	r0, #0
   1a8a0:	mvn	r1, #0
   1a8a4:	mov	r2, r5
   1a8a8:	mov	r4, r3
   1a8ac:	bl	1bf68 <__assert_fail@plt+0xa898>
   1a8b0:	subs	r0, r0, r6
   1a8b4:	mov	r2, #0
   1a8b8:	sbcs	r0, r1, r7
   1a8bc:	movwcc	r2, #1
   1a8c0:	umull	r0, r1, r6, r5
   1a8c4:	mla	r1, r6, r4, r1
   1a8c8:	cmp	r2, #0
   1a8cc:	mov	r3, r2
   1a8d0:	mla	r7, r7, r5, r1
   1a8d4:	mvnne	r0, #0
   1a8d8:	mvnne	r7, #0
   1a8dc:	mov	r6, r0
   1a8e0:	b	1b0cc <__assert_fail@plt+0x99fc>
   1a8e4:	mvn	r0, #0
   1a8e8:	mvn	r1, #0
   1a8ec:	mov	r2, r5
   1a8f0:	str	r3, [sp, #24]
   1a8f4:	bl	1bf68 <__assert_fail@plt+0xa898>
   1a8f8:	subs	r3, r0, r6
   1a8fc:	mov	ip, r0
   1a900:	umull	r4, r0, r6, r5
   1a904:	mov	sl, #0
   1a908:	sbcs	r3, r1, r7
   1a90c:	str	r0, [sp, #20]
   1a910:	ldr	r0, [sp, #24]
   1a914:	mov	r3, #0
   1a918:	movwcc	r3, #1
   1a91c:	cmp	r3, #0
   1a920:	mvnne	r4, #0
   1a924:	cmp	r3, #0
   1a928:	umull	lr, r2, r4, r5
   1a92c:	mla	r2, r4, r0, r2
   1a930:	str	r2, [sp, #16]
   1a934:	ldr	r2, [sp, #20]
   1a938:	mla	r6, r6, r0, r2
   1a93c:	ldr	r0, [sp, #16]
   1a940:	mla	r6, r7, r5, r6
   1a944:	mvnne	r6, #0
   1a948:	mla	r7, r6, r5, r0
   1a94c:	subs	r0, ip, r4
   1a950:	sbcs	r0, r1, r6
   1a954:	movwcc	sl, #1
   1a958:	cmp	sl, #0
   1a95c:	orr	r3, r3, sl
   1a960:	mvnne	lr, #0
   1a964:	mvnne	r7, #0
   1a968:	mov	r6, lr
   1a96c:	b	1b0cc <__assert_fail@plt+0x99fc>
   1a970:	mvn	r0, #0
   1a974:	mvn	r1, #0
   1a978:	mov	r2, r5
   1a97c:	mov	sl, r3
   1a980:	bl	1bf68 <__assert_fail@plt+0xa898>
   1a984:	subs	r3, r0, r6
   1a988:	mov	ip, r1
   1a98c:	umull	r2, lr, r6, r5
   1a990:	str	r0, [sp, #20]
   1a994:	sbcs	r3, r1, r7
   1a998:	mov	r1, #0
   1a99c:	mla	r6, r6, sl, lr
   1a9a0:	mov	lr, #0
   1a9a4:	str	ip, [sp, #16]
   1a9a8:	movwcc	r1, #1
   1a9ac:	mla	r7, r7, r5, r6
   1a9b0:	cmp	r1, #0
   1a9b4:	mvnne	r2, #0
   1a9b8:	cmp	r1, #0
   1a9bc:	umull	r3, r4, r2, r5
   1a9c0:	mvnne	r7, #0
   1a9c4:	mla	r4, r2, sl, r4
   1a9c8:	subs	r2, r0, r2
   1a9cc:	sbcs	r2, ip, r7
   1a9d0:	mla	r4, r7, r5, r4
   1a9d4:	movwcc	lr, #1
   1a9d8:	mov	r2, #0
   1a9dc:	cmp	lr, #0
   1a9e0:	mvnne	r3, #0
   1a9e4:	mvnne	r4, #0
   1a9e8:	subs	r7, r0, r3
   1a9ec:	mov	r0, r5
   1a9f0:	sbcs	r7, ip, r4
   1a9f4:	movwcc	r2, #1
   1a9f8:	umull	r5, r7, r3, r5
   1a9fc:	cmp	r2, #0
   1aa00:	mla	r3, r3, sl, r7
   1aa04:	mvnne	r5, #0
   1aa08:	mla	r3, r4, r0, r3
   1aa0c:	cmp	r2, #0
   1aa10:	umull	r6, ip, r5, r0
   1aa14:	mvnne	r3, #0
   1aa18:	mla	ip, r5, sl, ip
   1aa1c:	mla	r7, r3, r0, ip
   1aa20:	ldr	r0, [sp, #20]
   1aa24:	subs	r0, r0, r5
   1aa28:	ldr	r0, [sp, #16]
   1aa2c:	sbcs	r0, r0, r3
   1aa30:	mov	r0, #0
   1aa34:	movwcc	r0, #1
   1aa38:	cmp	r0, #0
   1aa3c:	mov	r3, r0
   1aa40:	orr	r0, r1, lr
   1aa44:	orr	r0, r0, r2
   1aa48:	mvnne	r7, #0
   1aa4c:	mvnne	r6, #0
   1aa50:	orr	r3, r0, r3
   1aa54:	b	1b0cc <__assert_fail@plt+0x99fc>
   1aa58:	mvn	r0, #0
   1aa5c:	mvn	r1, #0
   1aa60:	mov	r2, r5
   1aa64:	mov	r4, r3
   1aa68:	str	r3, [sp, #24]
   1aa6c:	bl	1bf68 <__assert_fail@plt+0xa898>
   1aa70:	umull	r3, r2, r6, r5
   1aa74:	mla	r2, r6, r4, r2
   1aa78:	subs	r6, r0, r6
   1aa7c:	sbcs	r6, r1, r7
   1aa80:	mla	ip, r7, r5, r2
   1aa84:	ldr	r2, [sp, #24]
   1aa88:	mov	r6, #0
   1aa8c:	movwcc	r6, #1
   1aa90:	cmp	r6, #0
   1aa94:	str	r6, [sp, #20]
   1aa98:	mov	r6, #0
   1aa9c:	mvnne	r3, #0
   1aaa0:	mvnne	ip, #0
   1aaa4:	subs	r4, r0, r3
   1aaa8:	umull	r7, lr, r3, r5
   1aaac:	sbcs	r4, r1, ip
   1aab0:	mla	r3, r3, r2, lr
   1aab4:	movwcc	r6, #1
   1aab8:	cmp	r6, #0
   1aabc:	str	r6, [sp, #16]
   1aac0:	mvnne	r7, #0
   1aac4:	cmp	r6, #0
   1aac8:	umull	sl, r4, r7, r5
   1aacc:	mla	r4, r7, r2, r4
   1aad0:	mla	r2, ip, r5, r3
   1aad4:	mov	ip, #0
   1aad8:	mvnne	r2, #0
   1aadc:	subs	r3, r0, r7
   1aae0:	mla	r6, r2, r5, r4
   1aae4:	mov	r4, r0
   1aae8:	sbcs	r2, r1, r2
   1aaec:	mov	r0, #0
   1aaf0:	movwcc	r0, #1
   1aaf4:	mov	r3, r4
   1aaf8:	cmp	r0, #0
   1aafc:	str	r0, [sp, #12]
   1ab00:	mov	r0, r1
   1ab04:	str	r3, [sp, #4]
   1ab08:	mvnne	sl, #0
   1ab0c:	mvnne	r6, #0
   1ab10:	str	r0, [sp, #8]
   1ab14:	subs	r2, r4, sl
   1ab18:	ldr	r4, [sp, #24]
   1ab1c:	sbcs	r2, r1, r6
   1ab20:	movwcc	ip, #1
   1ab24:	umull	r7, r2, sl, r5
   1ab28:	cmp	ip, #0
   1ab2c:	mla	r2, sl, r4, r2
   1ab30:	mvnne	r7, #0
   1ab34:	cmp	ip, #0
   1ab38:	mov	sl, #0
   1ab3c:	umull	r1, lr, r7, r5
   1ab40:	mla	r2, r6, r5, r2
   1ab44:	mvnne	r2, #0
   1ab48:	mla	lr, r7, r4, lr
   1ab4c:	subs	r6, r3, r7
   1ab50:	mla	lr, r2, r5, lr
   1ab54:	sbcs	r2, r0, r2
   1ab58:	movwcc	sl, #1
   1ab5c:	mov	r2, #0
   1ab60:	cmp	sl, #0
   1ab64:	mvnne	r1, #0
   1ab68:	mvnne	lr, #0
   1ab6c:	subs	r6, r3, r1
   1ab70:	ldr	r3, [sp, #24]
   1ab74:	sbcs	r6, r0, lr
   1ab78:	umull	r0, r7, r1, r5
   1ab7c:	movwcc	r2, #1
   1ab80:	cmp	r2, #0
   1ab84:	mvnne	r0, #0
   1ab88:	mla	r1, r1, r3, r7
   1ab8c:	cmp	r2, #0
   1ab90:	umull	r6, r4, r0, r5
   1ab94:	mla	r1, lr, r5, r1
   1ab98:	mla	r4, r0, r3, r4
   1ab9c:	ldr	r3, [sp, #4]
   1aba0:	mvnne	r1, #0
   1aba4:	mla	r7, r1, r5, r4
   1aba8:	ldr	r5, [sp, #16]
   1abac:	subs	r0, r3, r0
   1abb0:	ldr	r0, [sp, #8]
   1abb4:	sbcs	r0, r0, r1
   1abb8:	mov	r0, #0
   1abbc:	movwcc	r0, #1
   1abc0:	cmp	r0, #0
   1abc4:	mov	r1, r0
   1abc8:	ldr	r0, [sp, #20]
   1abcc:	mvnne	r7, #0
   1abd0:	mvnne	r6, #0
   1abd4:	orr	r0, r0, r5
   1abd8:	ldr	r5, [sp, #12]
   1abdc:	orr	r0, r0, r5
   1abe0:	orr	r0, r0, ip
   1abe4:	orr	r0, r0, sl
   1abe8:	orr	r0, r0, r2
   1abec:	orr	r0, r0, r1
   1abf0:	b	1b06c <__assert_fail@plt+0x999c>
   1abf4:	mov	r1, #0
   1abf8:	lsl	r2, r7, #10
   1abfc:	lsl	r0, r6, #10
   1ac00:	lsr	r3, r7, #22
   1ac04:	cmp	r1, r7, lsr #22
   1ac08:	orr	r2, r2, r6, lsr #22
   1ac0c:	mvnne	r0, #0
   1ac10:	movwne	r3, #1
   1ac14:	cmp	r1, r7, lsr #22
   1ac18:	b	1b098 <__assert_fail@plt+0x99c8>
   1ac1c:	mvn	r0, #0
   1ac20:	mvn	r1, #0
   1ac24:	mov	r2, r5
   1ac28:	mov	sl, r3
   1ac2c:	bl	1bf68 <__assert_fail@plt+0xa898>
   1ac30:	subs	r2, r0, r6
   1ac34:	mov	ip, r0
   1ac38:	mov	r0, #0
   1ac3c:	sbcs	r2, r1, r7
   1ac40:	movwcc	r0, #1
   1ac44:	umull	r4, r2, r6, r5
   1ac48:	cmp	r0, #0
   1ac4c:	mla	r2, r6, sl, r2
   1ac50:	str	r0, [sp, #20]
   1ac54:	mvnne	r4, #0
   1ac58:	cmp	r0, #0
   1ac5c:	mla	r2, r7, r5, r2
   1ac60:	mov	r0, #0
   1ac64:	umull	lr, r3, r4, r5
   1ac68:	mvnne	r2, #0
   1ac6c:	mla	r3, r4, sl, r3
   1ac70:	mla	r6, r2, r5, r3
   1ac74:	subs	r3, ip, r4
   1ac78:	sbcs	r2, r1, r2
   1ac7c:	mov	r3, r1
   1ac80:	movwcc	r0, #1
   1ac84:	str	r3, [sp, #8]
   1ac88:	cmp	r0, #0
   1ac8c:	str	r0, [sp, #16]
   1ac90:	mov	r0, ip
   1ac94:	mvnne	lr, #0
   1ac98:	mvnne	r6, #0
   1ac9c:	str	r0, [sp, #12]
   1aca0:	subs	r2, ip, lr
   1aca4:	umull	r7, r4, lr, r5
   1aca8:	sbcs	r2, r1, r6
   1acac:	mla	r4, lr, sl, r4
   1acb0:	mov	r2, #0
   1acb4:	mla	r6, r6, r5, r4
   1acb8:	mov	r4, #0
   1acbc:	movwcc	r2, #1
   1acc0:	cmp	r2, #0
   1acc4:	mvnne	r7, #0
   1acc8:	cmp	r2, #0
   1accc:	umull	r1, ip, r7, r5
   1acd0:	mvnne	r6, #0
   1acd4:	mla	ip, r7, sl, ip
   1acd8:	subs	r7, r0, r7
   1acdc:	mla	lr, r6, r5, ip
   1ace0:	sbcs	r7, r3, r6
   1ace4:	mov	ip, #0
   1ace8:	movwcc	ip, #1
   1acec:	cmp	ip, #0
   1acf0:	mvnne	r1, #0
   1acf4:	mvnne	lr, #0
   1acf8:	subs	r7, r0, r1
   1acfc:	sbcs	r7, r3, lr
   1ad00:	movwcc	r4, #1
   1ad04:	umull	r0, r7, r1, r5
   1ad08:	cmp	r4, #0
   1ad0c:	mla	r1, r1, sl, r7
   1ad10:	mvnne	r0, #0
   1ad14:	mla	r1, lr, r5, r1
   1ad18:	cmp	r4, #0
   1ad1c:	umull	r6, r3, r0, r5
   1ad20:	mvnne	r1, #0
   1ad24:	mla	r3, r0, sl, r3
   1ad28:	mla	r7, r1, r5, r3
   1ad2c:	ldr	r3, [sp, #12]
   1ad30:	subs	r0, r3, r0
   1ad34:	ldr	r3, [sp, #16]
   1ad38:	ldr	r0, [sp, #8]
   1ad3c:	sbcs	r0, r0, r1
   1ad40:	mov	r0, #0
   1ad44:	movwcc	r0, #1
   1ad48:	cmp	r0, #0
   1ad4c:	mov	r1, r0
   1ad50:	ldr	r0, [sp, #20]
   1ad54:	mvnne	r7, #0
   1ad58:	mvnne	r6, #0
   1ad5c:	orr	r0, r0, r3
   1ad60:	orr	r0, r0, r2
   1ad64:	orr	r0, r0, ip
   1ad68:	orr	r0, r0, r4
   1ad6c:	orr	r3, r0, r1
   1ad70:	b	1b0cc <__assert_fail@plt+0x99fc>
   1ad74:	mvn	r0, #0
   1ad78:	mvn	r1, #0
   1ad7c:	mov	r2, r5
   1ad80:	mov	sl, r3
   1ad84:	bl	1bf68 <__assert_fail@plt+0xa898>
   1ad88:	umull	r3, r2, r6, r5
   1ad8c:	mov	lr, r1
   1ad90:	mov	r1, r0
   1ad94:	mla	r2, r6, sl, r2
   1ad98:	subs	r6, r0, r6
   1ad9c:	mov	r0, #0
   1ada0:	sbcs	r6, lr, r7
   1ada4:	mla	r2, r7, r5, r2
   1ada8:	movwcc	r0, #1
   1adac:	cmp	r0, #0
   1adb0:	str	r0, [sp, #20]
   1adb4:	mov	r0, r1
   1adb8:	mvnne	r3, #0
   1adbc:	mvnne	r2, #0
   1adc0:	str	r0, [sp, #16]
   1adc4:	subs	r4, r1, r3
   1adc8:	umull	r7, ip, r3, r5
   1adcc:	sbcs	r4, lr, r2
   1add0:	mla	r3, r3, sl, ip
   1add4:	mov	ip, #0
   1add8:	mov	r4, #0
   1addc:	mla	r2, r2, r5, r3
   1ade0:	movwcc	r4, #1
   1ade4:	cmp	r4, #0
   1ade8:	mvnne	r7, #0
   1adec:	cmp	r4, #0
   1adf0:	umull	r1, r6, r7, r5
   1adf4:	mvnne	r2, #0
   1adf8:	mla	r6, r7, sl, r6
   1adfc:	mla	r3, r2, r5, r6
   1ae00:	subs	r6, r0, r7
   1ae04:	sbcs	r2, lr, r2
   1ae08:	movwcc	ip, #1
   1ae0c:	mov	r2, #0
   1ae10:	cmp	ip, #0
   1ae14:	mvnne	r1, #0
   1ae18:	mvnne	r3, #0
   1ae1c:	subs	r6, r0, r1
   1ae20:	sbcs	r6, lr, r3
   1ae24:	movwcc	r2, #1
   1ae28:	umull	r0, r6, r1, r5
   1ae2c:	cmp	r2, #0
   1ae30:	str	r6, [sp, #12]
   1ae34:	mvnne	r0, #0
   1ae38:	cmp	r2, #0
   1ae3c:	umull	r6, r7, r0, r5
   1ae40:	mla	r7, r0, sl, r7
   1ae44:	str	r7, [sp, #8]
   1ae48:	ldr	r7, [sp, #12]
   1ae4c:	mla	r1, r1, sl, r7
   1ae50:	mla	r1, r3, r5, r1
   1ae54:	ldr	r3, [sp, #8]
   1ae58:	mvnne	r1, #0
   1ae5c:	mla	r7, r1, r5, r3
   1ae60:	ldr	r3, [sp, #16]
   1ae64:	subs	r0, r3, r0
   1ae68:	sbcs	r0, lr, r1
   1ae6c:	mov	r0, #0
   1ae70:	movwcc	r0, #1
   1ae74:	cmp	r0, #0
   1ae78:	mov	r1, r0
   1ae7c:	ldr	r0, [sp, #20]
   1ae80:	mvnne	r7, #0
   1ae84:	mvnne	r6, #0
   1ae88:	orr	r0, r0, r4
   1ae8c:	orr	r0, r0, ip
   1ae90:	orr	r0, r0, r2
   1ae94:	orr	r3, r0, r1
   1ae98:	b	1b0cc <__assert_fail@plt+0x99fc>
   1ae9c:	mvn	r0, #0
   1aea0:	mvn	r1, #0
   1aea4:	mov	r2, r5
   1aea8:	mov	sl, r3
   1aeac:	bl	1bf68 <__assert_fail@plt+0xa898>
   1aeb0:	mov	lr, r0
   1aeb4:	subs	r0, r0, r6
   1aeb8:	mov	r2, #0
   1aebc:	mov	ip, r1
   1aec0:	str	sl, [sp, #24]
   1aec4:	sbcs	r0, r1, r7
   1aec8:	umull	r3, r1, r6, r5
   1aecc:	str	lr, [sp, #4]
   1aed0:	movwcc	r2, #1
   1aed4:	mla	r6, r6, sl, r1
   1aed8:	mov	r1, #0
   1aedc:	cmp	r2, #0
   1aee0:	mla	r7, r7, r5, r6
   1aee4:	str	r2, [sp, #20]
   1aee8:	mvnne	r3, #0
   1aeec:	cmp	r2, #0
   1aef0:	mov	r2, #0
   1aef4:	umull	r0, r4, r3, r5
   1aef8:	mvnne	r7, #0
   1aefc:	mla	r4, r3, sl, r4
   1af00:	subs	r3, lr, r3
   1af04:	sbcs	r3, ip, r7
   1af08:	mla	r4, r7, r5, r4
   1af0c:	movwcc	r1, #1
   1af10:	cmp	r1, #0
   1af14:	str	r1, [sp, #16]
   1af18:	mvnne	r0, #0
   1af1c:	mvnne	r4, #0
   1af20:	subs	r3, lr, r0
   1af24:	sbcs	r3, ip, r4
   1af28:	movwcc	r2, #1
   1af2c:	umull	r6, r3, r0, r5
   1af30:	cmp	r2, #0
   1af34:	mla	r0, r0, sl, r3
   1af38:	str	r2, [sp, #12]
   1af3c:	mvnne	r6, #0
   1af40:	mla	r0, r4, r5, r0
   1af44:	cmp	r2, #0
   1af48:	ldr	r4, [sp, #24]
   1af4c:	umull	r1, r7, r6, r5
   1af50:	mvnne	r0, #0
   1af54:	subs	r3, lr, r6
   1af58:	mla	r7, r6, sl, r7
   1af5c:	mov	r3, ip
   1af60:	mla	r7, r0, r5, r7
   1af64:	sbcs	r0, ip, r0
   1af68:	str	r3, [sp]
   1af6c:	mov	r0, #0
   1af70:	movwcc	r0, #1
   1af74:	cmp	r0, #0
   1af78:	str	r0, [sp, #8]
   1af7c:	mvnne	r1, #0
   1af80:	mvnne	r7, #0
   1af84:	subs	r0, lr, r1
   1af88:	sbcs	r0, ip, r7
   1af8c:	mov	ip, #0
   1af90:	movwcc	ip, #1
   1af94:	umull	r6, r0, r1, r5
   1af98:	cmp	ip, #0
   1af9c:	mla	r1, r1, r4, r0
   1afa0:	mov	r0, lr
   1afa4:	mvnne	r6, #0
   1afa8:	mla	r1, r7, r5, r1
   1afac:	cmp	ip, #0
   1afb0:	umull	r2, sl, r6, r5
   1afb4:	mvnne	r1, #0
   1afb8:	mla	sl, r6, r4, sl
   1afbc:	subs	r6, lr, r6
   1afc0:	mov	lr, #0
   1afc4:	mla	r7, r1, r5, sl
   1afc8:	sbcs	r1, r3, r1
   1afcc:	movwcc	lr, #1
   1afd0:	ldr	r1, [sp, #24]
   1afd4:	cmp	lr, #0
   1afd8:	mvnne	r2, #0
   1afdc:	mvnne	r7, #0
   1afe0:	subs	r6, r0, r2
   1afe4:	umull	r0, sl, r2, r5
   1afe8:	sbcs	r6, r3, r7
   1afec:	mov	r3, #0
   1aff0:	mla	r2, r2, r1, sl
   1aff4:	movwcc	r3, #1
   1aff8:	mla	r2, r7, r5, r2
   1affc:	cmp	r3, #0
   1b000:	mvnne	r0, #0
   1b004:	cmp	r3, #0
   1b008:	umull	r6, r4, r0, r5
   1b00c:	mvnne	r2, #0
   1b010:	mla	r4, r0, r1, r4
   1b014:	ldr	r1, [sp, #4]
   1b018:	mla	r7, r2, r5, r4
   1b01c:	ldr	r5, [sp, #16]
   1b020:	subs	r0, r1, r0
   1b024:	ldr	r0, [sp]
   1b028:	sbcs	r0, r0, r2
   1b02c:	mov	r0, #0
   1b030:	movwcc	r0, #1
   1b034:	cmp	r0, #0
   1b038:	mov	r2, r0
   1b03c:	ldr	r0, [sp, #20]
   1b040:	mvnne	r7, #0
   1b044:	mvnne	r6, #0
   1b048:	orr	r0, r0, r5
   1b04c:	ldr	r5, [sp, #12]
   1b050:	orr	r0, r0, r5
   1b054:	ldr	r5, [sp, #8]
   1b058:	orr	r0, r0, r5
   1b05c:	orr	r0, r0, ip
   1b060:	orr	r0, r0, lr
   1b064:	orr	r0, r0, r3
   1b068:	orr	r0, r0, r2
   1b06c:	and	r3, r0, #1
   1b070:	b	1b0cc <__assert_fail@plt+0x99fc>
   1b074:	mov	r1, #0
   1b078:	lsl	r2, r7, #9
   1b07c:	lsl	r0, r6, #9
   1b080:	lsr	r3, r7, #23
   1b084:	cmp	r1, r7, lsr #23
   1b088:	orr	r2, r2, r6, lsr #23
   1b08c:	mvnne	r0, #0
   1b090:	movwne	r3, #1
   1b094:	cmp	r1, r7, lsr #23
   1b098:	mvnne	r2, #0
   1b09c:	mov	r6, r0
   1b0a0:	mov	r7, r2
   1b0a4:	b	1b0cc <__assert_fail@plt+0x99fc>
   1b0a8:	lsl	r1, r7, #1
   1b0ac:	lsl	r0, r6, #1
   1b0b0:	cmp	r7, #0
   1b0b4:	lsr	r3, r7, #31
   1b0b8:	orr	r1, r1, r6, lsr #31
   1b0bc:	mvnlt	r0, #0
   1b0c0:	mvnlt	r1, #0
   1b0c4:	mov	r6, r0
   1b0c8:	mov	r7, r1
   1b0cc:	ldr	r1, [sp, #32]
   1b0d0:	ldr	r2, [sp, #28]
   1b0d4:	orr	r8, r3, r8
   1b0d8:	add	r0, r1, r2
   1b0dc:	str	r0, [r9]
   1b0e0:	ldrb	r0, [r1, r2]
   1b0e4:	cmp	r0, #0
   1b0e8:	orrne	r8, r8, #2
   1b0ec:	ldr	r0, [sp, #36]	; 0x24
   1b0f0:	strd	r6, [r0]
   1b0f4:	mov	r0, r8
   1b0f8:	sub	sp, fp, #28
   1b0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b100:	movw	r0, #57561	; 0xe0d9
   1b104:	movw	r1, #57599	; 0xe0ff
   1b108:	movw	r3, #57615	; 0xe10f
   1b10c:	mov	r2, #85	; 0x55
   1b110:	movt	r0, #1
   1b114:	movt	r1, #1
   1b118:	movt	r3, #1
   1b11c:	bl	116d0 <__assert_fail@plt>
   1b120:	push	{fp, lr}
   1b124:	mov	fp, sp
   1b128:	sub	sp, sp, #8
   1b12c:	mov	r2, r0
   1b130:	mov	ip, r1
   1b134:	mov	r0, #0
   1b138:	b	1b140 <__assert_fail@plt+0x9a70>
   1b13c:	add	r0, r0, #1
   1b140:	mov	r1, r2
   1b144:	ldrb	r3, [r1, r0, lsl #1]!
   1b148:	cmp	r3, #37	; 0x25
   1b14c:	bne	1b160 <__assert_fail@plt+0x9a90>
   1b150:	ldrb	r1, [r1, #1]
   1b154:	cmp	r1, #115	; 0x73
   1b158:	beq	1b13c <__assert_fail@plt+0x9a6c>
   1b15c:	b	1b178 <__assert_fail@plt+0x9aa8>
   1b160:	cmp	r3, #0
   1b164:	bne	1b178 <__assert_fail@plt+0x9aa8>
   1b168:	mov	r1, ip
   1b16c:	bl	1b1bc <__assert_fail@plt+0x9aec>
   1b170:	mov	sp, fp
   1b174:	pop	{fp, pc}
   1b178:	add	r0, sp, #4
   1b17c:	mov	r1, #1
   1b180:	mov	r3, ip
   1b184:	bl	115bc <__vasprintf_chk@plt>
   1b188:	cmn	r0, #1
   1b18c:	ble	1b19c <__assert_fail@plt+0x9acc>
   1b190:	ldr	r0, [sp, #4]
   1b194:	mov	sp, fp
   1b198:	pop	{fp, pc}
   1b19c:	bl	11598 <__errno_location@plt>
   1b1a0:	ldr	r1, [r0]
   1b1a4:	mov	r0, #0
   1b1a8:	cmp	r1, #12
   1b1ac:	beq	1b1b8 <__assert_fail@plt+0x9ae8>
   1b1b0:	mov	sp, fp
   1b1b4:	pop	{fp, pc}
   1b1b8:	bl	1a43c <__assert_fail@plt+0x8d6c>
   1b1bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b1c0:	add	fp, sp, #24
   1b1c4:	sub	sp, sp, #8
   1b1c8:	str	r1, [sp, #4]
   1b1cc:	mov	r4, r0
   1b1d0:	ldr	r0, [sp, #4]
   1b1d4:	cmp	r4, #0
   1b1d8:	str	r0, [sp]
   1b1dc:	beq	1b26c <__assert_fail@plt+0x9b9c>
   1b1e0:	ldr	r0, [sp]
   1b1e4:	mov	r5, #0
   1b1e8:	mov	r7, r4
   1b1ec:	add	r6, r0, #4
   1b1f0:	str	r6, [sp]
   1b1f4:	ldr	r0, [r6, #-4]
   1b1f8:	bl	11574 <strlen@plt>
   1b1fc:	adds	r5, r0, r5
   1b200:	add	r6, r6, #4
   1b204:	mvncs	r5, #0
   1b208:	subs	r7, r7, #1
   1b20c:	bne	1b1f0 <__assert_fail@plt+0x9b20>
   1b210:	cmn	r5, #1
   1b214:	ble	1b288 <__assert_fail@plt+0x9bb8>
   1b218:	add	r0, r5, #1
   1b21c:	bl	19edc <__assert_fail@plt+0x880c>
   1b220:	mov	r8, r0
   1b224:	mov	r6, r0
   1b228:	cmp	r4, #0
   1b22c:	beq	1b27c <__assert_fail@plt+0x9bac>
   1b230:	ldr	r0, [sp, #4]
   1b234:	add	r1, r0, #4
   1b238:	str	r1, [sp, #4]
   1b23c:	ldr	r7, [r0]
   1b240:	mov	r0, r7
   1b244:	bl	11574 <strlen@plt>
   1b248:	mov	r5, r0
   1b24c:	mov	r0, r6
   1b250:	mov	r1, r7
   1b254:	mov	r2, r5
   1b258:	bl	113f4 <memcpy@plt>
   1b25c:	add	r6, r6, r5
   1b260:	subs	r4, r4, #1
   1b264:	bne	1b230 <__assert_fail@plt+0x9b60>
   1b268:	b	1b27c <__assert_fail@plt+0x9bac>
   1b26c:	mov	r0, #1
   1b270:	bl	19edc <__assert_fail@plt+0x880c>
   1b274:	mov	r8, r0
   1b278:	mov	r6, r0
   1b27c:	mov	r0, #0
   1b280:	strb	r0, [r6]
   1b284:	b	1b298 <__assert_fail@plt+0x9bc8>
   1b288:	bl	11598 <__errno_location@plt>
   1b28c:	mov	r1, #75	; 0x4b
   1b290:	mov	r8, #0
   1b294:	str	r1, [r0]
   1b298:	mov	r0, r8
   1b29c:	sub	sp, fp, #24
   1b2a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b2a4:	clz	r2, r1
   1b2a8:	clz	r3, r0
   1b2ac:	lsr	r2, r2, #5
   1b2b0:	lsr	r3, r3, #5
   1b2b4:	orrs	r2, r3, r2
   1b2b8:	movwne	r1, #1
   1b2bc:	movwne	r0, #1
   1b2c0:	cmp	r1, #0
   1b2c4:	beq	1b2f4 <__assert_fail@plt+0x9c24>
   1b2c8:	mvn	r2, #-2147483648	; 0x80000000
   1b2cc:	udiv	r2, r2, r1
   1b2d0:	cmp	r2, r0
   1b2d4:	bcs	1b2f4 <__assert_fail@plt+0x9c24>
   1b2d8:	push	{fp, lr}
   1b2dc:	mov	fp, sp
   1b2e0:	bl	11598 <__errno_location@plt>
   1b2e4:	mov	r1, #12
   1b2e8:	str	r1, [r0]
   1b2ec:	mov	r0, #0
   1b2f0:	pop	{fp, pc}
   1b2f4:	b	11358 <calloc@plt>
   1b2f8:	cmp	r0, #0
   1b2fc:	movweq	r0, #1
   1b300:	cmn	r0, #1
   1b304:	ble	1b30c <__assert_fail@plt+0x9c3c>
   1b308:	b	114f0 <malloc@plt>
   1b30c:	push	{fp, lr}
   1b310:	mov	fp, sp
   1b314:	bl	11598 <__errno_location@plt>
   1b318:	mov	r1, #12
   1b31c:	str	r1, [r0]
   1b320:	mov	r0, #0
   1b324:	pop	{fp, pc}
   1b328:	push	{fp, lr}
   1b32c:	mov	fp, sp
   1b330:	cmp	r0, #0
   1b334:	beq	1b350 <__assert_fail@plt+0x9c80>
   1b338:	cmp	r1, #0
   1b33c:	beq	1b35c <__assert_fail@plt+0x9c8c>
   1b340:	cmn	r1, #1
   1b344:	ble	1b368 <__assert_fail@plt+0x9c98>
   1b348:	pop	{fp, lr}
   1b34c:	b	11448 <realloc@plt>
   1b350:	mov	r0, r1
   1b354:	pop	{fp, lr}
   1b358:	b	1b2f8 <__assert_fail@plt+0x9c28>
   1b35c:	bl	1b8d0 <__assert_fail@plt+0xa200>
   1b360:	mov	r0, #0
   1b364:	pop	{fp, pc}
   1b368:	bl	11598 <__errno_location@plt>
   1b36c:	mov	r1, #12
   1b370:	str	r1, [r0]
   1b374:	mov	r0, #0
   1b378:	pop	{fp, pc}
   1b37c:	mov	r0, #1
   1b380:	b	117d0 <__assert_fail@plt+0x100>
   1b384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b388:	add	fp, sp, #28
   1b38c:	sub	sp, sp, #12
   1b390:	mov	r4, r3
   1b394:	mov	r6, r2
   1b398:	mov	r5, r1
   1b39c:	mov	sl, r0
   1b3a0:	bl	11574 <strlen@plt>
   1b3a4:	ldr	r8, [r5]
   1b3a8:	cmp	r8, #0
   1b3ac:	beq	1b468 <__assert_fail@plt+0x9d98>
   1b3b0:	mov	r7, r0
   1b3b4:	mov	r0, #0
   1b3b8:	add	r9, r5, #4
   1b3bc:	mov	r5, #0
   1b3c0:	str	r6, [sp, #4]
   1b3c4:	str	r0, [sp]
   1b3c8:	mvn	r0, #0
   1b3cc:	str	r0, [sp, #8]
   1b3d0:	mov	r0, r8
   1b3d4:	mov	r1, sl
   1b3d8:	mov	r2, r7
   1b3dc:	bl	11688 <strncmp@plt>
   1b3e0:	cmp	r0, #0
   1b3e4:	bne	1b43c <__assert_fail@plt+0x9d6c>
   1b3e8:	mov	r0, r8
   1b3ec:	bl	11574 <strlen@plt>
   1b3f0:	cmp	r0, r7
   1b3f4:	beq	1b46c <__assert_fail@plt+0x9d9c>
   1b3f8:	ldr	r0, [sp, #8]
   1b3fc:	cmn	r0, #1
   1b400:	beq	1b438 <__assert_fail@plt+0x9d68>
   1b404:	ldr	r0, [sp, #4]
   1b408:	cmp	r0, #0
   1b40c:	beq	1b42c <__assert_fail@plt+0x9d5c>
   1b410:	ldr	r1, [sp, #8]
   1b414:	mov	r2, r4
   1b418:	mla	r0, r1, r4, r0
   1b41c:	mov	r1, r6
   1b420:	bl	11424 <memcmp@plt>
   1b424:	cmp	r0, #0
   1b428:	beq	1b43c <__assert_fail@plt+0x9d6c>
   1b42c:	mov	r0, #1
   1b430:	str	r0, [sp]
   1b434:	b	1b43c <__assert_fail@plt+0x9d6c>
   1b438:	str	r5, [sp, #8]
   1b43c:	ldr	r8, [r9, r5, lsl #2]
   1b440:	add	r6, r6, r4
   1b444:	add	r5, r5, #1
   1b448:	cmp	r8, #0
   1b44c:	bne	1b3d0 <__assert_fail@plt+0x9d00>
   1b450:	ldr	r0, [sp]
   1b454:	tst	r0, #1
   1b458:	ldr	r0, [sp, #8]
   1b45c:	mvnne	r0, #1
   1b460:	sub	sp, fp, #28
   1b464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b468:	mvn	r5, #0
   1b46c:	mov	r0, r5
   1b470:	sub	sp, fp, #28
   1b474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b478:	push	{r4, r5, r6, r7, fp, lr}
   1b47c:	add	fp, sp, #16
   1b480:	mov	r5, r0
   1b484:	ldr	r0, [r1]
   1b488:	mvn	r4, #0
   1b48c:	cmp	r0, #0
   1b490:	beq	1b4c0 <__assert_fail@plt+0x9df0>
   1b494:	add	r7, r1, #4
   1b498:	mov	r6, #0
   1b49c:	mov	r1, r5
   1b4a0:	bl	11388 <strcmp@plt>
   1b4a4:	cmp	r0, #0
   1b4a8:	moveq	r0, r6
   1b4ac:	popeq	{r4, r5, r6, r7, fp, pc}
   1b4b0:	ldr	r0, [r7, r6, lsl #2]
   1b4b4:	add	r6, r6, #1
   1b4b8:	cmp	r0, #0
   1b4bc:	bne	1b49c <__assert_fail@plt+0x9dcc>
   1b4c0:	mov	r0, r4
   1b4c4:	pop	{r4, r5, r6, r7, fp, pc}
   1b4c8:	push	{r4, r5, r6, sl, fp, lr}
   1b4cc:	add	fp, sp, #16
   1b4d0:	sub	sp, sp, #8
   1b4d4:	mov	r4, r1
   1b4d8:	movw	r1, #57721	; 0xe179
   1b4dc:	mov	r5, r0
   1b4e0:	movw	r0, #57694	; 0xe15e
   1b4e4:	cmn	r2, #1
   1b4e8:	mov	r2, #5
   1b4ec:	movt	r0, #1
   1b4f0:	movt	r1, #1
   1b4f4:	moveq	r1, r0
   1b4f8:	mov	r0, #0
   1b4fc:	bl	11430 <dcgettext@plt>
   1b500:	mov	r6, r0
   1b504:	mov	r0, #0
   1b508:	mov	r1, #8
   1b50c:	mov	r2, r4
   1b510:	bl	19044 <__assert_fail@plt+0x7974>
   1b514:	mov	r4, r0
   1b518:	mov	r0, #1
   1b51c:	mov	r1, r5
   1b520:	bl	19604 <__assert_fail@plt+0x7f34>
   1b524:	str	r0, [sp]
   1b528:	mov	r0, #0
   1b52c:	mov	r1, #0
   1b530:	mov	r2, r6
   1b534:	mov	r3, r4
   1b538:	bl	114cc <error@plt>
   1b53c:	sub	sp, fp, #16
   1b540:	pop	{r4, r5, r6, sl, fp, pc}
   1b544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b548:	add	fp, sp, #28
   1b54c:	sub	sp, sp, #4
   1b550:	mov	r5, r1
   1b554:	movw	r1, #57750	; 0xe196
   1b558:	mov	sl, r2
   1b55c:	mov	r7, r0
   1b560:	mov	r0, #0
   1b564:	mov	r2, #5
   1b568:	mov	r8, #0
   1b56c:	movt	r1, #1
   1b570:	bl	11430 <dcgettext@plt>
   1b574:	movw	r4, #61904	; 0xf1d0
   1b578:	movt	r4, #2
   1b57c:	ldr	r1, [r4]
   1b580:	bl	11364 <fputs_unlocked@plt>
   1b584:	ldr	r6, [r7]
   1b588:	cmp	r6, #0
   1b58c:	beq	1b62c <__assert_fail@plt+0x9f5c>
   1b590:	add	r9, r7, #4
   1b594:	mov	r7, #0
   1b598:	str	sl, [sp]
   1b59c:	cmp	r8, #0
   1b5a0:	beq	1b5bc <__assert_fail@plt+0x9eec>
   1b5a4:	mov	r0, r7
   1b5a8:	mov	r1, r5
   1b5ac:	mov	r2, sl
   1b5b0:	bl	11424 <memcmp@plt>
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1b5e8 <__assert_fail@plt+0x9f18>
   1b5bc:	ldr	r7, [r4]
   1b5c0:	mov	r0, r6
   1b5c4:	bl	19614 <__assert_fail@plt+0x7f44>
   1b5c8:	movw	r2, #57771	; 0xe1ab
   1b5cc:	mov	r3, r0
   1b5d0:	mov	r0, r7
   1b5d4:	mov	r1, #1
   1b5d8:	movt	r2, #1
   1b5dc:	bl	115f8 <__fprintf_chk@plt>
   1b5e0:	mov	r7, r5
   1b5e4:	b	1b618 <__assert_fail@plt+0x9f48>
   1b5e8:	mov	sl, r9
   1b5ec:	ldr	r9, [r4]
   1b5f0:	mov	r0, r6
   1b5f4:	bl	19614 <__assert_fail@plt+0x7f44>
   1b5f8:	mov	r3, r0
   1b5fc:	mov	r0, r9
   1b600:	mov	r9, sl
   1b604:	ldr	sl, [sp]
   1b608:	movw	r2, #54358	; 0xd456
   1b60c:	mov	r1, #1
   1b610:	movt	r2, #1
   1b614:	bl	115f8 <__fprintf_chk@plt>
   1b618:	ldr	r6, [r9, -r8, lsl #2]
   1b61c:	add	r5, r5, sl
   1b620:	sub	r8, r8, #1
   1b624:	cmp	r6, #0
   1b628:	bne	1b59c <__assert_fail@plt+0x9ecc>
   1b62c:	ldr	r0, [r4]
   1b630:	ldr	r1, [r0, #20]
   1b634:	ldr	r2, [r0, #24]
   1b638:	cmp	r1, r2
   1b63c:	addcc	r2, r1, #1
   1b640:	strcc	r2, [r0, #20]
   1b644:	movcc	r0, #10
   1b648:	strbcc	r0, [r1]
   1b64c:	subcc	sp, fp, #28
   1b650:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b654:	mov	r1, #10
   1b658:	sub	sp, fp, #28
   1b65c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b660:	b	11628 <__overflow@plt>
   1b664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b668:	add	fp, sp, #28
   1b66c:	sub	sp, sp, #20
   1b670:	mov	r9, r0
   1b674:	ldr	r0, [fp, #16]
   1b678:	mov	r8, r3
   1b67c:	mov	sl, r2
   1b680:	mov	r7, r1
   1b684:	cmp	r0, #0
   1b688:	beq	1b760 <__assert_fail@plt+0xa090>
   1b68c:	mov	r0, r7
   1b690:	str	r9, [sp, #8]
   1b694:	str	r8, [sp, #16]
   1b698:	bl	11574 <strlen@plt>
   1b69c:	ldr	r9, [sl]
   1b6a0:	cmp	r9, #0
   1b6a4:	beq	1b7a0 <__assert_fail@plt+0xa0d0>
   1b6a8:	str	sl, [sp, #4]
   1b6ac:	add	r8, sl, #4
   1b6b0:	ldr	sl, [sp, #16]
   1b6b4:	mov	r4, r0
   1b6b8:	mov	r0, #0
   1b6bc:	mvn	r6, #0
   1b6c0:	mov	r5, #0
   1b6c4:	str	r0, [sp, #12]
   1b6c8:	mov	r0, r9
   1b6cc:	mov	r1, r7
   1b6d0:	mov	r2, r4
   1b6d4:	bl	11688 <strncmp@plt>
   1b6d8:	cmp	r0, #0
   1b6dc:	bne	1b72c <__assert_fail@plt+0xa05c>
   1b6e0:	mov	r0, r9
   1b6e4:	bl	11574 <strlen@plt>
   1b6e8:	cmp	r0, r4
   1b6ec:	beq	1b7ac <__assert_fail@plt+0xa0dc>
   1b6f0:	cmn	r6, #1
   1b6f4:	beq	1b728 <__assert_fail@plt+0xa058>
   1b6f8:	ldr	r0, [sp, #16]
   1b6fc:	cmp	r0, #0
   1b700:	beq	1b71c <__assert_fail@plt+0xa04c>
   1b704:	ldr	r2, [fp, #8]
   1b708:	mov	r1, sl
   1b70c:	mla	r0, r6, r2, r0
   1b710:	bl	11424 <memcmp@plt>
   1b714:	cmp	r0, #0
   1b718:	beq	1b72c <__assert_fail@plt+0xa05c>
   1b71c:	mov	r0, #1
   1b720:	str	r0, [sp, #12]
   1b724:	b	1b72c <__assert_fail@plt+0xa05c>
   1b728:	mov	r6, r5
   1b72c:	ldr	r9, [r8, r5, lsl #2]
   1b730:	ldr	r0, [fp, #8]
   1b734:	add	r5, r5, #1
   1b738:	add	sl, sl, r0
   1b73c:	cmp	r9, #0
   1b740:	bne	1b6c8 <__assert_fail@plt+0x9ff8>
   1b744:	ldr	r0, [sp, #12]
   1b748:	ldr	r8, [sp, #16]
   1b74c:	ldr	sl, [sp, #4]
   1b750:	ldr	r9, [sp, #8]
   1b754:	tst	r0, #1
   1b758:	beq	1b7bc <__assert_fail@plt+0xa0ec>
   1b75c:	b	1b7c8 <__assert_fail@plt+0xa0f8>
   1b760:	ldr	r0, [sl]
   1b764:	movw	r4, #57694	; 0xe15e
   1b768:	movt	r4, #1
   1b76c:	cmp	r0, #0
   1b770:	beq	1b7dc <__assert_fail@plt+0xa10c>
   1b774:	add	r5, sl, #4
   1b778:	mov	r6, #0
   1b77c:	mov	r1, r7
   1b780:	bl	11388 <strcmp@plt>
   1b784:	cmp	r0, #0
   1b788:	beq	1b7bc <__assert_fail@plt+0xa0ec>
   1b78c:	ldr	r0, [r5, r6, lsl #2]
   1b790:	add	r6, r6, #1
   1b794:	cmp	r0, #0
   1b798:	bne	1b77c <__assert_fail@plt+0xa0ac>
   1b79c:	b	1b7dc <__assert_fail@plt+0xa10c>
   1b7a0:	ldr	r8, [sp, #16]
   1b7a4:	ldr	r9, [sp, #8]
   1b7a8:	b	1b7d4 <__assert_fail@plt+0xa104>
   1b7ac:	ldr	r8, [sp, #16]
   1b7b0:	ldr	sl, [sp, #4]
   1b7b4:	ldr	r9, [sp, #8]
   1b7b8:	mov	r6, r5
   1b7bc:	cmn	r6, #1
   1b7c0:	bgt	1b844 <__assert_fail@plt+0xa174>
   1b7c4:	beq	1b7d4 <__assert_fail@plt+0xa104>
   1b7c8:	movw	r4, #57721	; 0xe179
   1b7cc:	movt	r4, #1
   1b7d0:	b	1b7dc <__assert_fail@plt+0xa10c>
   1b7d4:	movw	r4, #57694	; 0xe15e
   1b7d8:	movt	r4, #1
   1b7dc:	ldr	r6, [fp, #12]
   1b7e0:	mov	r0, #0
   1b7e4:	mov	r1, r4
   1b7e8:	mov	r2, #5
   1b7ec:	bl	11430 <dcgettext@plt>
   1b7f0:	mov	r4, r0
   1b7f4:	mov	r0, #0
   1b7f8:	mov	r1, #8
   1b7fc:	mov	r2, r7
   1b800:	bl	19044 <__assert_fail@plt+0x7974>
   1b804:	mov	r5, r0
   1b808:	mov	r0, #1
   1b80c:	mov	r1, r9
   1b810:	bl	19604 <__assert_fail@plt+0x7f34>
   1b814:	str	r0, [sp]
   1b818:	mov	r0, #0
   1b81c:	mov	r1, #0
   1b820:	mov	r2, r4
   1b824:	mov	r3, r5
   1b828:	bl	114cc <error@plt>
   1b82c:	ldr	r2, [fp, #8]
   1b830:	mov	r0, sl
   1b834:	mov	r1, r8
   1b838:	bl	1b544 <__assert_fail@plt+0x9e74>
   1b83c:	blx	r6
   1b840:	mvn	r6, #0
   1b844:	mov	r0, r6
   1b848:	sub	sp, fp, #28
   1b84c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b854:	add	fp, sp, #24
   1b858:	ldr	r6, [r1]
   1b85c:	cmp	r6, #0
   1b860:	beq	1b8c4 <__assert_fail@plt+0xa1f4>
   1b864:	mov	r8, r1
   1b868:	mov	r7, r2
   1b86c:	mov	r1, r2
   1b870:	mov	r2, r3
   1b874:	mov	r4, r3
   1b878:	mov	r9, r0
   1b87c:	bl	11424 <memcmp@plt>
   1b880:	cmp	r0, #0
   1b884:	beq	1b8bc <__assert_fail@plt+0xa1ec>
   1b888:	add	r7, r7, r4
   1b88c:	add	r5, r8, #4
   1b890:	ldr	r6, [r5]
   1b894:	cmp	r6, #0
   1b898:	beq	1b8c4 <__assert_fail@plt+0xa1f4>
   1b89c:	mov	r0, r9
   1b8a0:	mov	r1, r7
   1b8a4:	mov	r2, r4
   1b8a8:	bl	11424 <memcmp@plt>
   1b8ac:	add	r7, r7, r4
   1b8b0:	add	r5, r5, #4
   1b8b4:	cmp	r0, #0
   1b8b8:	bne	1b890 <__assert_fail@plt+0xa1c0>
   1b8bc:	mov	r0, r6
   1b8c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b8c4:	mov	r6, #0
   1b8c8:	mov	r0, r6
   1b8cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b8d0:	push	{r4, r5, r6, sl, fp, lr}
   1b8d4:	add	fp, sp, #16
   1b8d8:	mov	r4, r0
   1b8dc:	bl	11598 <__errno_location@plt>
   1b8e0:	ldr	r6, [r0]
   1b8e4:	mov	r5, r0
   1b8e8:	mov	r0, r4
   1b8ec:	bl	113d0 <free@plt>
   1b8f0:	str	r6, [r5]
   1b8f4:	pop	{r4, r5, r6, sl, fp, pc}
   1b8f8:	push	{fp, lr}
   1b8fc:	mov	fp, sp
   1b900:	mov	r0, #14
   1b904:	bl	11658 <nl_langinfo@plt>
   1b908:	movw	r1, #51037	; 0xc75d
   1b90c:	cmp	r0, #0
   1b910:	movt	r1, #1
   1b914:	movne	r1, r0
   1b918:	movw	r0, #57779	; 0xe1b3
   1b91c:	ldrb	r2, [r1]
   1b920:	movt	r0, #1
   1b924:	cmp	r2, #0
   1b928:	movne	r0, r1
   1b92c:	pop	{fp, pc}
   1b930:	push	{r4, r5, r6, r7, fp, lr}
   1b934:	add	fp, sp, #16
   1b938:	sub	sp, sp, #8
   1b93c:	add	r5, sp, #4
   1b940:	cmp	r0, #0
   1b944:	mov	r7, r2
   1b948:	mov	r4, r1
   1b94c:	movne	r5, r0
   1b950:	mov	r0, r5
   1b954:	bl	114c0 <mbrtowc@plt>
   1b958:	mov	r6, r0
   1b95c:	cmp	r7, #0
   1b960:	beq	1b984 <__assert_fail@plt+0xa2b4>
   1b964:	cmn	r6, #2
   1b968:	bcc	1b984 <__assert_fail@plt+0xa2b4>
   1b96c:	mov	r0, #0
   1b970:	bl	1b9cc <__assert_fail@plt+0xa2fc>
   1b974:	cmp	r0, #0
   1b978:	ldrbeq	r0, [r4]
   1b97c:	moveq	r6, #1
   1b980:	streq	r0, [r5]
   1b984:	mov	r0, r6
   1b988:	sub	sp, fp, #16
   1b98c:	pop	{r4, r5, r6, r7, fp, pc}
   1b990:	cmp	r2, #0
   1b994:	beq	1b9c4 <__assert_fail@plt+0xa2f4>
   1b998:	mvn	r3, #0
   1b99c:	udiv	r3, r3, r2
   1b9a0:	cmp	r3, r1
   1b9a4:	bcs	1b9c4 <__assert_fail@plt+0xa2f4>
   1b9a8:	push	{fp, lr}
   1b9ac:	mov	fp, sp
   1b9b0:	bl	11598 <__errno_location@plt>
   1b9b4:	mov	r1, #12
   1b9b8:	str	r1, [r0]
   1b9bc:	mov	r0, #0
   1b9c0:	pop	{fp, pc}
   1b9c4:	mul	r1, r2, r1
   1b9c8:	b	1b328 <__assert_fail@plt+0x9c58>
   1b9cc:	push	{r4, sl, fp, lr}
   1b9d0:	add	fp, sp, #8
   1b9d4:	sub	sp, sp, #264	; 0x108
   1b9d8:	add	r1, sp, #7
   1b9dc:	movw	r2, #257	; 0x101
   1b9e0:	bl	1ba30 <__assert_fail@plt+0xa360>
   1b9e4:	mov	r4, #0
   1b9e8:	cmp	r0, #0
   1b9ec:	bne	1ba24 <__assert_fail@plt+0xa354>
   1b9f0:	movw	r1, #57785	; 0xe1b9
   1b9f4:	add	r0, sp, #7
   1b9f8:	movt	r1, #1
   1b9fc:	bl	11388 <strcmp@plt>
   1ba00:	cmp	r0, #0
   1ba04:	beq	1ba24 <__assert_fail@plt+0xa354>
   1ba08:	movw	r1, #57787	; 0xe1bb
   1ba0c:	add	r0, sp, #7
   1ba10:	movt	r1, #1
   1ba14:	bl	11388 <strcmp@plt>
   1ba18:	mov	r4, r0
   1ba1c:	cmp	r0, #0
   1ba20:	movwne	r4, #1
   1ba24:	mov	r0, r4
   1ba28:	sub	sp, fp, #8
   1ba2c:	pop	{r4, sl, fp, pc}
   1ba30:	push	{r4, r5, r6, r7, fp, lr}
   1ba34:	add	fp, sp, #16
   1ba38:	mov	r4, r1
   1ba3c:	mov	r1, #0
   1ba40:	mov	r6, r2
   1ba44:	bl	11634 <setlocale@plt>
   1ba48:	cmp	r0, #0
   1ba4c:	beq	1ba7c <__assert_fail@plt+0xa3ac>
   1ba50:	mov	r7, r0
   1ba54:	bl	11574 <strlen@plt>
   1ba58:	cmp	r0, r6
   1ba5c:	bcs	1ba9c <__assert_fail@plt+0xa3cc>
   1ba60:	add	r2, r0, #1
   1ba64:	mov	r0, r4
   1ba68:	mov	r1, r7
   1ba6c:	bl	113f4 <memcpy@plt>
   1ba70:	mov	r5, #0
   1ba74:	mov	r0, r5
   1ba78:	pop	{r4, r5, r6, r7, fp, pc}
   1ba7c:	cmp	r6, #0
   1ba80:	mov	r5, #22
   1ba84:	movne	r0, #0
   1ba88:	strbne	r0, [r4]
   1ba8c:	movne	r0, r5
   1ba90:	popne	{r4, r5, r6, r7, fp, pc}
   1ba94:	mov	r0, r5
   1ba98:	pop	{r4, r5, r6, r7, fp, pc}
   1ba9c:	mov	r5, #34	; 0x22
   1baa0:	cmp	r6, #0
   1baa4:	beq	1bac4 <__assert_fail@plt+0xa3f4>
   1baa8:	sub	r6, r6, #1
   1baac:	mov	r0, r4
   1bab0:	mov	r1, r7
   1bab4:	mov	r2, r6
   1bab8:	bl	113f4 <memcpy@plt>
   1babc:	mov	r0, #0
   1bac0:	strb	r0, [r4, r6]
   1bac4:	mov	r0, r5
   1bac8:	pop	{r4, r5, r6, r7, fp, pc}
   1bacc:	mov	r1, #0
   1bad0:	b	11634 <setlocale@plt>
   1bad4:	eor	r1, r1, #-2147483648	; 0x80000000
   1bad8:	b	1bae0 <__assert_fail@plt+0xa410>
   1badc:	eor	r3, r3, #-2147483648	; 0x80000000
   1bae0:	push	{r4, r5, lr}
   1bae4:	lsl	r4, r1, #1
   1bae8:	lsl	r5, r3, #1
   1baec:	teq	r4, r5
   1baf0:	teqeq	r0, r2
   1baf4:	orrsne	ip, r4, r0
   1baf8:	orrsne	ip, r5, r2
   1bafc:	mvnsne	ip, r4, asr #21
   1bb00:	mvnsne	ip, r5, asr #21
   1bb04:	beq	1bcf0 <__assert_fail@plt+0xa620>
   1bb08:	lsr	r4, r4, #21
   1bb0c:	rsbs	r5, r4, r5, lsr #21
   1bb10:	rsblt	r5, r5, #0
   1bb14:	ble	1bb34 <__assert_fail@plt+0xa464>
   1bb18:	add	r4, r4, r5
   1bb1c:	eor	r2, r0, r2
   1bb20:	eor	r3, r1, r3
   1bb24:	eor	r0, r2, r0
   1bb28:	eor	r1, r3, r1
   1bb2c:	eor	r2, r0, r2
   1bb30:	eor	r3, r1, r3
   1bb34:	cmp	r5, #54	; 0x36
   1bb38:	pophi	{r4, r5, pc}
   1bb3c:	tst	r1, #-2147483648	; 0x80000000
   1bb40:	lsl	r1, r1, #12
   1bb44:	mov	ip, #1048576	; 0x100000
   1bb48:	orr	r1, ip, r1, lsr #12
   1bb4c:	beq	1bb58 <__assert_fail@plt+0xa488>
   1bb50:	rsbs	r0, r0, #0
   1bb54:	rsc	r1, r1, #0
   1bb58:	tst	r3, #-2147483648	; 0x80000000
   1bb5c:	lsl	r3, r3, #12
   1bb60:	orr	r3, ip, r3, lsr #12
   1bb64:	beq	1bb70 <__assert_fail@plt+0xa4a0>
   1bb68:	rsbs	r2, r2, #0
   1bb6c:	rsc	r3, r3, #0
   1bb70:	teq	r4, r5
   1bb74:	beq	1bcd8 <__assert_fail@plt+0xa608>
   1bb78:	sub	r4, r4, #1
   1bb7c:	rsbs	lr, r5, #32
   1bb80:	blt	1bb9c <__assert_fail@plt+0xa4cc>
   1bb84:	lsl	ip, r2, lr
   1bb88:	adds	r0, r0, r2, lsr r5
   1bb8c:	adc	r1, r1, #0
   1bb90:	adds	r0, r0, r3, lsl lr
   1bb94:	adcs	r1, r1, r3, asr r5
   1bb98:	b	1bbb8 <__assert_fail@plt+0xa4e8>
   1bb9c:	sub	r5, r5, #32
   1bba0:	add	lr, lr, #32
   1bba4:	cmp	r2, #1
   1bba8:	lsl	ip, r3, lr
   1bbac:	orrcs	ip, ip, #2
   1bbb0:	adds	r0, r0, r3, asr r5
   1bbb4:	adcs	r1, r1, r3, asr #31
   1bbb8:	and	r5, r1, #-2147483648	; 0x80000000
   1bbbc:	bpl	1bbcc <__assert_fail@plt+0xa4fc>
   1bbc0:	rsbs	ip, ip, #0
   1bbc4:	rscs	r0, r0, #0
   1bbc8:	rsc	r1, r1, #0
   1bbcc:	cmp	r1, #1048576	; 0x100000
   1bbd0:	bcc	1bc10 <__assert_fail@plt+0xa540>
   1bbd4:	cmp	r1, #2097152	; 0x200000
   1bbd8:	bcc	1bbf8 <__assert_fail@plt+0xa528>
   1bbdc:	lsrs	r1, r1, #1
   1bbe0:	rrxs	r0, r0
   1bbe4:	rrx	ip, ip
   1bbe8:	add	r4, r4, #1
   1bbec:	lsl	r2, r4, #21
   1bbf0:	cmn	r2, #4194304	; 0x400000
   1bbf4:	bcs	1bd50 <__assert_fail@plt+0xa680>
   1bbf8:	cmp	ip, #-2147483648	; 0x80000000
   1bbfc:	lsrseq	ip, r0, #1
   1bc00:	adcs	r0, r0, #0
   1bc04:	adc	r1, r1, r4, lsl #20
   1bc08:	orr	r1, r1, r5
   1bc0c:	pop	{r4, r5, pc}
   1bc10:	lsls	ip, ip, #1
   1bc14:	adcs	r0, r0, r0
   1bc18:	adc	r1, r1, r1
   1bc1c:	tst	r1, #1048576	; 0x100000
   1bc20:	sub	r4, r4, #1
   1bc24:	bne	1bbf8 <__assert_fail@plt+0xa528>
   1bc28:	teq	r1, #0
   1bc2c:	moveq	r1, r0
   1bc30:	moveq	r0, #0
   1bc34:	clz	r3, r1
   1bc38:	addeq	r3, r3, #32
   1bc3c:	sub	r3, r3, #11
   1bc40:	subs	r2, r3, #32
   1bc44:	bge	1bc68 <__assert_fail@plt+0xa598>
   1bc48:	adds	r2, r2, #12
   1bc4c:	ble	1bc64 <__assert_fail@plt+0xa594>
   1bc50:	add	ip, r2, #20
   1bc54:	rsb	r2, r2, #12
   1bc58:	lsl	r0, r1, ip
   1bc5c:	lsr	r1, r1, r2
   1bc60:	b	1bc78 <__assert_fail@plt+0xa5a8>
   1bc64:	add	r2, r2, #20
   1bc68:	rsble	ip, r2, #32
   1bc6c:	lsl	r1, r1, r2
   1bc70:	orrle	r1, r1, r0, lsr ip
   1bc74:	lslle	r0, r0, r2
   1bc78:	subs	r4, r4, r3
   1bc7c:	addge	r1, r1, r4, lsl #20
   1bc80:	orrge	r1, r1, r5
   1bc84:	popge	{r4, r5, pc}
   1bc88:	mvn	r4, r4
   1bc8c:	subs	r4, r4, #31
   1bc90:	bge	1bccc <__assert_fail@plt+0xa5fc>
   1bc94:	adds	r4, r4, #12
   1bc98:	bgt	1bcb4 <__assert_fail@plt+0xa5e4>
   1bc9c:	add	r4, r4, #20
   1bca0:	rsb	r2, r4, #32
   1bca4:	lsr	r0, r0, r4
   1bca8:	orr	r0, r0, r1, lsl r2
   1bcac:	orr	r1, r5, r1, lsr r4
   1bcb0:	pop	{r4, r5, pc}
   1bcb4:	rsb	r4, r4, #12
   1bcb8:	rsb	r2, r4, #32
   1bcbc:	lsr	r0, r0, r2
   1bcc0:	orr	r0, r0, r1, lsl r4
   1bcc4:	mov	r1, r5
   1bcc8:	pop	{r4, r5, pc}
   1bccc:	lsr	r0, r1, r4
   1bcd0:	mov	r1, r5
   1bcd4:	pop	{r4, r5, pc}
   1bcd8:	teq	r4, #0
   1bcdc:	eor	r3, r3, #1048576	; 0x100000
   1bce0:	eoreq	r1, r1, #1048576	; 0x100000
   1bce4:	addeq	r4, r4, #1
   1bce8:	subne	r5, r5, #1
   1bcec:	b	1bb78 <__assert_fail@plt+0xa4a8>
   1bcf0:	mvns	ip, r4, asr #21
   1bcf4:	mvnsne	ip, r5, asr #21
   1bcf8:	beq	1bd60 <__assert_fail@plt+0xa690>
   1bcfc:	teq	r4, r5
   1bd00:	teqeq	r0, r2
   1bd04:	beq	1bd18 <__assert_fail@plt+0xa648>
   1bd08:	orrs	ip, r4, r0
   1bd0c:	moveq	r1, r3
   1bd10:	moveq	r0, r2
   1bd14:	pop	{r4, r5, pc}
   1bd18:	teq	r1, r3
   1bd1c:	movne	r1, #0
   1bd20:	movne	r0, #0
   1bd24:	popne	{r4, r5, pc}
   1bd28:	lsrs	ip, r4, #21
   1bd2c:	bne	1bd40 <__assert_fail@plt+0xa670>
   1bd30:	lsls	r0, r0, #1
   1bd34:	adcs	r1, r1, r1
   1bd38:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1bd3c:	pop	{r4, r5, pc}
   1bd40:	adds	r4, r4, #4194304	; 0x400000
   1bd44:	addcc	r1, r1, #1048576	; 0x100000
   1bd48:	popcc	{r4, r5, pc}
   1bd4c:	and	r5, r1, #-2147483648	; 0x80000000
   1bd50:	orr	r1, r5, #2130706432	; 0x7f000000
   1bd54:	orr	r1, r1, #15728640	; 0xf00000
   1bd58:	mov	r0, #0
   1bd5c:	pop	{r4, r5, pc}
   1bd60:	mvns	ip, r4, asr #21
   1bd64:	movne	r1, r3
   1bd68:	movne	r0, r2
   1bd6c:	mvnseq	ip, r5, asr #21
   1bd70:	movne	r3, r1
   1bd74:	movne	r2, r0
   1bd78:	orrs	r4, r0, r1, lsl #12
   1bd7c:	orrseq	r5, r2, r3, lsl #12
   1bd80:	teqeq	r1, r3
   1bd84:	orrne	r1, r1, #524288	; 0x80000
   1bd88:	pop	{r4, r5, pc}
   1bd8c:	teq	r0, #0
   1bd90:	moveq	r1, #0
   1bd94:	bxeq	lr
   1bd98:	push	{r4, r5, lr}
   1bd9c:	mov	r4, #1024	; 0x400
   1bda0:	add	r4, r4, #50	; 0x32
   1bda4:	mov	r5, #0
   1bda8:	mov	r1, #0
   1bdac:	b	1bc28 <__assert_fail@plt+0xa558>
   1bdb0:	teq	r0, #0
   1bdb4:	moveq	r1, #0
   1bdb8:	bxeq	lr
   1bdbc:	push	{r4, r5, lr}
   1bdc0:	mov	r4, #1024	; 0x400
   1bdc4:	add	r4, r4, #50	; 0x32
   1bdc8:	ands	r5, r0, #-2147483648	; 0x80000000
   1bdcc:	rsbmi	r0, r0, #0
   1bdd0:	mov	r1, #0
   1bdd4:	b	1bc28 <__assert_fail@plt+0xa558>
   1bdd8:	lsls	r2, r0, #1
   1bddc:	asr	r1, r2, #3
   1bde0:	rrx	r1, r1
   1bde4:	lsl	r0, r2, #28
   1bde8:	andsne	r3, r2, #-16777216	; 0xff000000
   1bdec:	teqne	r3, #-16777216	; 0xff000000
   1bdf0:	eorne	r1, r1, #939524096	; 0x38000000
   1bdf4:	bxne	lr
   1bdf8:	bics	r2, r2, #-16777216	; 0xff000000
   1bdfc:	bxeq	lr
   1be00:	teq	r3, #-16777216	; 0xff000000
   1be04:	orreq	r1, r1, #524288	; 0x80000
   1be08:	bxeq	lr
   1be0c:	push	{r4, r5, lr}
   1be10:	mov	r4, #896	; 0x380
   1be14:	and	r5, r1, #-2147483648	; 0x80000000
   1be18:	bic	r1, r1, #-2147483648	; 0x80000000
   1be1c:	b	1bc28 <__assert_fail@plt+0xa558>
   1be20:	orrs	r2, r0, r1
   1be24:	bxeq	lr
   1be28:	push	{r4, r5, lr}
   1be2c:	mov	r5, #0
   1be30:	b	1be50 <__assert_fail@plt+0xa780>
   1be34:	orrs	r2, r0, r1
   1be38:	bxeq	lr
   1be3c:	push	{r4, r5, lr}
   1be40:	ands	r5, r1, #-2147483648	; 0x80000000
   1be44:	bpl	1be50 <__assert_fail@plt+0xa780>
   1be48:	rsbs	r0, r0, #0
   1be4c:	rsc	r1, r1, #0
   1be50:	mov	r4, #1024	; 0x400
   1be54:	add	r4, r4, #50	; 0x32
   1be58:	lsrs	ip, r1, #22
   1be5c:	beq	1bbcc <__assert_fail@plt+0xa4fc>
   1be60:	mov	r2, #3
   1be64:	lsrs	ip, ip, #3
   1be68:	addne	r2, r2, #3
   1be6c:	lsrs	ip, ip, #3
   1be70:	addne	r2, r2, #3
   1be74:	add	r2, r2, ip, lsr #3
   1be78:	rsb	r3, r2, #32
   1be7c:	lsl	ip, r0, r3
   1be80:	lsr	r0, r0, r2
   1be84:	orr	r0, r0, r1, lsl r3
   1be88:	lsr	r1, r1, r2
   1be8c:	add	r4, r4, r2
   1be90:	b	1bbcc <__assert_fail@plt+0xa4fc>
   1be94:	cmp	r3, #0
   1be98:	cmpeq	r2, #0
   1be9c:	bne	1bec0 <__assert_fail@plt+0xa7f0>
   1bea0:	cmp	r1, #0
   1bea4:	movlt	r1, #-2147483648	; 0x80000000
   1bea8:	movlt	r0, #0
   1beac:	blt	1bebc <__assert_fail@plt+0xa7ec>
   1beb0:	cmpeq	r0, #0
   1beb4:	mvnne	r1, #-2147483648	; 0x80000000
   1beb8:	mvnne	r0, #0
   1bebc:	b	1bfa4 <__assert_fail@plt+0xa8d4>
   1bec0:	sub	sp, sp, #8
   1bec4:	push	{sp, lr}
   1bec8:	cmp	r1, #0
   1becc:	blt	1beec <__assert_fail@plt+0xa81c>
   1bed0:	cmp	r3, #0
   1bed4:	blt	1bf20 <__assert_fail@plt+0xa850>
   1bed8:	bl	1bff8 <__assert_fail@plt+0xa928>
   1bedc:	ldr	lr, [sp, #4]
   1bee0:	add	sp, sp, #8
   1bee4:	pop	{r2, r3}
   1bee8:	bx	lr
   1beec:	rsbs	r0, r0, #0
   1bef0:	sbc	r1, r1, r1, lsl #1
   1bef4:	cmp	r3, #0
   1bef8:	blt	1bf44 <__assert_fail@plt+0xa874>
   1befc:	bl	1bff8 <__assert_fail@plt+0xa928>
   1bf00:	ldr	lr, [sp, #4]
   1bf04:	add	sp, sp, #8
   1bf08:	pop	{r2, r3}
   1bf0c:	rsbs	r0, r0, #0
   1bf10:	sbc	r1, r1, r1, lsl #1
   1bf14:	rsbs	r2, r2, #0
   1bf18:	sbc	r3, r3, r3, lsl #1
   1bf1c:	bx	lr
   1bf20:	rsbs	r2, r2, #0
   1bf24:	sbc	r3, r3, r3, lsl #1
   1bf28:	bl	1bff8 <__assert_fail@plt+0xa928>
   1bf2c:	ldr	lr, [sp, #4]
   1bf30:	add	sp, sp, #8
   1bf34:	pop	{r2, r3}
   1bf38:	rsbs	r0, r0, #0
   1bf3c:	sbc	r1, r1, r1, lsl #1
   1bf40:	bx	lr
   1bf44:	rsbs	r2, r2, #0
   1bf48:	sbc	r3, r3, r3, lsl #1
   1bf4c:	bl	1bff8 <__assert_fail@plt+0xa928>
   1bf50:	ldr	lr, [sp, #4]
   1bf54:	add	sp, sp, #8
   1bf58:	pop	{r2, r3}
   1bf5c:	rsbs	r2, r2, #0
   1bf60:	sbc	r3, r3, r3, lsl #1
   1bf64:	bx	lr
   1bf68:	cmp	r3, #0
   1bf6c:	cmpeq	r2, #0
   1bf70:	bne	1bf88 <__assert_fail@plt+0xa8b8>
   1bf74:	cmp	r1, #0
   1bf78:	cmpeq	r0, #0
   1bf7c:	mvnne	r1, #0
   1bf80:	mvnne	r0, #0
   1bf84:	b	1bfa4 <__assert_fail@plt+0xa8d4>
   1bf88:	sub	sp, sp, #8
   1bf8c:	push	{sp, lr}
   1bf90:	bl	1bff8 <__assert_fail@plt+0xa928>
   1bf94:	ldr	lr, [sp, #4]
   1bf98:	add	sp, sp, #8
   1bf9c:	pop	{r2, r3}
   1bfa0:	bx	lr
   1bfa4:	push	{r1, lr}
   1bfa8:	mov	r0, #8
   1bfac:	bl	11370 <raise@plt>
   1bfb0:	pop	{r1, pc}
   1bfb4:	andeq	r0, r0, r0
   1bfb8:	vmov	d6, r0, r1
   1bfbc:	vldr	d7, [pc, #36]	; 1bfe8 <__assert_fail@plt+0xa918>
   1bfc0:	vldr	d5, [pc, #40]	; 1bff0 <__assert_fail@plt+0xa920>
   1bfc4:	vmul.f64	d7, d6, d7
   1bfc8:	vcvt.u32.f64	s14, d7
   1bfcc:	vcvt.f64.u32	d4, s14
   1bfd0:	vmov	r1, s14
   1bfd4:	vmls.f64	d6, d4, d5
   1bfd8:	vcvt.u32.f64	s15, d6
   1bfdc:	vmov	r0, s15
   1bfe0:	bx	lr
   1bfe4:	nop			; (mov r0, r0)
   1bfe8:	andeq	r0, r0, r0
   1bfec:	ldclcc	0, cr0, [r0]
   1bff0:	andeq	r0, r0, r0
   1bff4:	mvnsmi	r0, r0
   1bff8:	cmp	r1, r3
   1bffc:	cmpeq	r0, r2
   1c000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c004:	mov	r4, r0
   1c008:	movcc	r0, #0
   1c00c:	mov	r5, r1
   1c010:	ldr	lr, [sp, #36]	; 0x24
   1c014:	movcc	r1, r0
   1c018:	bcc	1c114 <__assert_fail@plt+0xaa44>
   1c01c:	cmp	r3, #0
   1c020:	clzeq	ip, r2
   1c024:	clzne	ip, r3
   1c028:	addeq	ip, ip, #32
   1c02c:	cmp	r5, #0
   1c030:	clzeq	r1, r4
   1c034:	addeq	r1, r1, #32
   1c038:	clzne	r1, r5
   1c03c:	sub	ip, ip, r1
   1c040:	sub	sl, ip, #32
   1c044:	lsl	r9, r3, ip
   1c048:	rsb	fp, ip, #32
   1c04c:	orr	r9, r9, r2, lsl sl
   1c050:	orr	r9, r9, r2, lsr fp
   1c054:	lsl	r8, r2, ip
   1c058:	cmp	r5, r9
   1c05c:	cmpeq	r4, r8
   1c060:	movcc	r0, #0
   1c064:	movcc	r1, r0
   1c068:	bcc	1c084 <__assert_fail@plt+0xa9b4>
   1c06c:	mov	r0, #1
   1c070:	subs	r4, r4, r8
   1c074:	lsl	r1, r0, sl
   1c078:	orr	r1, r1, r0, lsr fp
   1c07c:	lsl	r0, r0, ip
   1c080:	sbc	r5, r5, r9
   1c084:	cmp	ip, #0
   1c088:	beq	1c114 <__assert_fail@plt+0xaa44>
   1c08c:	lsr	r6, r8, #1
   1c090:	orr	r6, r6, r9, lsl #31
   1c094:	lsr	r7, r9, #1
   1c098:	mov	r2, ip
   1c09c:	b	1c0c0 <__assert_fail@plt+0xa9f0>
   1c0a0:	subs	r3, r4, r6
   1c0a4:	sbc	r8, r5, r7
   1c0a8:	adds	r3, r3, r3
   1c0ac:	adc	r8, r8, r8
   1c0b0:	adds	r4, r3, #1
   1c0b4:	adc	r5, r8, #0
   1c0b8:	subs	r2, r2, #1
   1c0bc:	beq	1c0dc <__assert_fail@plt+0xaa0c>
   1c0c0:	cmp	r5, r7
   1c0c4:	cmpeq	r4, r6
   1c0c8:	bcs	1c0a0 <__assert_fail@plt+0xa9d0>
   1c0cc:	adds	r4, r4, r4
   1c0d0:	adc	r5, r5, r5
   1c0d4:	subs	r2, r2, #1
   1c0d8:	bne	1c0c0 <__assert_fail@plt+0xa9f0>
   1c0dc:	lsr	r3, r4, ip
   1c0e0:	orr	r3, r3, r5, lsl fp
   1c0e4:	lsr	r2, r5, ip
   1c0e8:	orr	r3, r3, r5, lsr sl
   1c0ec:	adds	r0, r0, r4
   1c0f0:	mov	r4, r3
   1c0f4:	lsl	r3, r2, ip
   1c0f8:	orr	r3, r3, r4, lsl sl
   1c0fc:	lsl	ip, r4, ip
   1c100:	orr	r3, r3, r4, lsr fp
   1c104:	adc	r1, r1, r5
   1c108:	subs	r0, r0, ip
   1c10c:	mov	r5, r2
   1c110:	sbc	r1, r1, r3
   1c114:	cmp	lr, #0
   1c118:	strdne	r4, [lr]
   1c11c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c120:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c124:	mov	r7, r0
   1c128:	ldr	r6, [pc, #72]	; 1c178 <__assert_fail@plt+0xaaa8>
   1c12c:	ldr	r5, [pc, #72]	; 1c17c <__assert_fail@plt+0xaaac>
   1c130:	add	r6, pc, r6
   1c134:	add	r5, pc, r5
   1c138:	sub	r6, r6, r5
   1c13c:	mov	r8, r1
   1c140:	mov	r9, r2
   1c144:	bl	11338 <calloc@plt-0x20>
   1c148:	asrs	r6, r6, #2
   1c14c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c150:	mov	r4, #0
   1c154:	add	r4, r4, #1
   1c158:	ldr	r3, [r5], #4
   1c15c:	mov	r2, r9
   1c160:	mov	r1, r8
   1c164:	mov	r0, r7
   1c168:	blx	r3
   1c16c:	cmp	r6, r4
   1c170:	bne	1c154 <__assert_fail@plt+0xaa84>
   1c174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c178:	ldrdeq	r2, [r1], -r4
   1c17c:	andeq	r2, r1, ip, asr #27
   1c180:	bx	lr
   1c184:	ldr	r3, [pc, #12]	; 1c198 <__assert_fail@plt+0xaac8>
   1c188:	mov	r1, #0
   1c18c:	add	r3, pc, r3
   1c190:	ldr	r2, [r3]
   1c194:	b	115b0 <__cxa_atexit@plt>
   1c198:			; <UNDEFINED> instruction: 0x00012fb0

Disassembly of section .fini:

0001c19c <.fini>:
   1c19c:	push	{r3, lr}
   1c1a0:	pop	{r3, pc}
