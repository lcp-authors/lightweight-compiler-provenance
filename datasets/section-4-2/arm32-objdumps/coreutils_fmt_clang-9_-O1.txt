
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	11148 <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r6, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <posix_fadvise64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <memmove@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <_exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <memcpy@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <mbsinit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <fwrite_unlocked@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <getc_unlocked@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <dcgettext@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <realloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <textdomain@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <iswprint@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <fwrite@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <lseek64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <__ctype_get_mb_cur_max@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <__fpending@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <ferror_unlocked@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <mbrtowc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <error@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <malloc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <__libc_start_main@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <__freading@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <__gmon_start__@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <getopt_long@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <__ctype_b_loc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <exit@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <bcmp@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <strlen@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <strchr@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__errno_location@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <__cxa_atexit@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <memset@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <fileno@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <strtoumax@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <__fprintf_chk@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <memchr@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <fclose@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fseeko64@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <setlocale@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <strrchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #24]!

000110ac <nl_langinfo@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <clearerr_unlocked@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <fopen64@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <bindtextdomain@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <strncmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <abort@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <putchar_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <__assert_fail@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

Disassembly of section .text:

0001110c <.text>:
   1110c:	mov	fp, #0
   11110:	mov	lr, #0
   11114:	pop	{r1}		; (ldr r1, [sp], #4)
   11118:	mov	r2, sp
   1111c:	push	{r2}		; (str r2, [sp, #-4]!)
   11120:	push	{r0}		; (str r0, [sp, #-4]!)
   11124:	ldr	ip, [pc, #16]	; 1113c <__assert_fail@plt+0x3c>
   11128:	push	{ip}		; (str ip, [sp, #-4]!)
   1112c:	ldr	r0, [pc, #12]	; 11140 <__assert_fail@plt+0x40>
   11130:	ldr	r3, [pc, #12]	; 11144 <__assert_fail@plt+0x44>
   11134:	bl	10fb0 <__libc_start_main@plt>
   11138:	bl	110e8 <abort@plt>
   1113c:	andeq	r6, r1, r4, ror #1
   11140:	andeq	r1, r1, r0, lsl r5
   11144:	andeq	r6, r1, r4, lsl #1
   11148:	ldr	r3, [pc, #20]	; 11164 <__assert_fail@plt+0x64>
   1114c:	ldr	r2, [pc, #20]	; 11168 <__assert_fail@plt+0x68>
   11150:	add	r3, pc, r3
   11154:	ldr	r2, [r3, r2]
   11158:	cmp	r2, #0
   1115c:	bxeq	lr
   11160:	b	10fc8 <__gmon_start__@plt>
   11164:	andeq	r5, r1, r8, lsr #29
   11168:	andeq	r0, r0, r4, ror #1
   1116c:	ldr	r0, [pc, #24]	; 1118c <__assert_fail@plt+0x8c>
   11170:	ldr	r3, [pc, #24]	; 11190 <__assert_fail@plt+0x90>
   11174:	cmp	r3, r0
   11178:	bxeq	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x94>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r7, r2, r8, lsr r1
   11194:	andeq	r0, r0, r0
   11198:	ldr	r0, [pc, #36]	; 111c4 <__assert_fail@plt+0xc4>
   1119c:	ldr	r1, [pc, #36]	; 111c8 <__assert_fail@plt+0xc8>
   111a0:	sub	r1, r1, r0
   111a4:	asr	r1, r1, #2
   111a8:	add	r1, r1, r1, lsr #31
   111ac:	asrs	r1, r1, #1
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <__assert_fail@plt+0xcc>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r7, r2, r8, lsr r1
   111cc:	andeq	r0, r0, r0
   111d0:	push	{r4, lr}
   111d4:	ldr	r4, [pc, #24]	; 111f4 <__assert_fail@plt+0xf4>
   111d8:	ldrb	r3, [r4]
   111dc:	cmp	r3, #0
   111e0:	popne	{r4, pc}
   111e4:	bl	1116c <__assert_fail@plt+0x6c>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4]
   111f0:	pop	{r4, pc}
   111f4:	andeq	r7, r2, ip, asr r1
   111f8:	b	11198 <__assert_fail@plt+0x98>
   111fc:	push	{fp, lr}
   11200:	mov	fp, sp
   11204:	mov	r4, r0
   11208:	cmp	r0, #0
   1120c:	bne	112e4 <__assert_fail@plt+0x1e4>
   11210:	movw	r1, #24883	; 0x6133
   11214:	movt	r1, #1
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	bl	10f20 <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #62108	; 0xf29c
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11040 <__printf_chk@plt>
   1123c:	movw	r1, #24925	; 0x615d
   11240:	movt	r1, #1
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	bl	10f20 <dcgettext@plt>
   11250:	movw	r5, #29012	; 0x7154
   11254:	movt	r5, #2
   11258:	ldr	r1, [r5]
   1125c:	bl	10e90 <fputs_unlocked@plt>
   11260:	bl	11328 <__assert_fail@plt+0x228>
   11264:	bl	11358 <__assert_fail@plt+0x258>
   11268:	movw	r1, #25054	; 0x61de
   1126c:	movt	r1, #1
   11270:	mov	r0, #0
   11274:	mov	r2, #5
   11278:	bl	10f20 <dcgettext@plt>
   1127c:	ldr	r1, [r5]
   11280:	bl	10e90 <fputs_unlocked@plt>
   11284:	movw	r1, #25332	; 0x62f4
   11288:	movt	r1, #1
   1128c:	mov	r0, #0
   11290:	mov	r2, #5
   11294:	bl	10f20 <dcgettext@plt>
   11298:	ldr	r1, [r5]
   1129c:	bl	10e90 <fputs_unlocked@plt>
   112a0:	movw	r1, #25618	; 0x6412
   112a4:	movt	r1, #1
   112a8:	mov	r0, #0
   112ac:	mov	r2, #5
   112b0:	bl	10f20 <dcgettext@plt>
   112b4:	ldr	r1, [r5]
   112b8:	bl	10e90 <fputs_unlocked@plt>
   112bc:	movw	r1, #25663	; 0x643f
   112c0:	movt	r1, #1
   112c4:	mov	r0, #0
   112c8:	mov	r2, #5
   112cc:	bl	10f20 <dcgettext@plt>
   112d0:	ldr	r1, [r5]
   112d4:	bl	10e90 <fputs_unlocked@plt>
   112d8:	bl	11388 <__assert_fail@plt+0x288>
   112dc:	mov	r0, r4
   112e0:	bl	10fec <exit@plt>
   112e4:	movw	r0, #29000	; 0x7148
   112e8:	movt	r0, #2
   112ec:	ldr	r5, [r0]
   112f0:	movw	r1, #24844	; 0x610c
   112f4:	movt	r1, #1
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	bl	10f20 <dcgettext@plt>
   11304:	mov	r2, r0
   11308:	movw	r0, #62108	; 0xf29c
   1130c:	movt	r0, #2
   11310:	ldr	r3, [r0]
   11314:	mov	r0, r5
   11318:	mov	r1, #1
   1131c:	bl	11064 <__fprintf_chk@plt>
   11320:	mov	r0, r4
   11324:	bl	10fec <exit@plt>
   11328:	push	{fp, lr}
   1132c:	mov	fp, sp
   11330:	movw	r1, #25952	; 0x6560
   11334:	movt	r1, #1
   11338:	mov	r0, #0
   1133c:	mov	r2, #5
   11340:	bl	10f20 <dcgettext@plt>
   11344:	movw	r1, #29012	; 0x7154
   11348:	movt	r1, #2
   1134c:	ldr	r1, [r1]
   11350:	pop	{fp, lr}
   11354:	b	10e90 <fputs_unlocked@plt>
   11358:	push	{fp, lr}
   1135c:	mov	fp, sp
   11360:	movw	r1, #26008	; 0x6598
   11364:	movt	r1, #1
   11368:	mov	r0, #0
   1136c:	mov	r2, #5
   11370:	bl	10f20 <dcgettext@plt>
   11374:	movw	r1, #29012	; 0x7154
   11378:	movt	r1, #2
   1137c:	ldr	r1, [r1]
   11380:	pop	{fp, lr}
   11384:	b	10e90 <fputs_unlocked@plt>
   11388:	push	{r4, r5, r6, sl, fp, lr}
   1138c:	add	fp, sp, #16
   11390:	sub	sp, sp, #56	; 0x38
   11394:	movw	r0, #26720	; 0x6860
   11398:	movt	r0, #1
   1139c:	add	r1, r0, #32
   113a0:	mov	r2, #48	; 0x30
   113a4:	vld1.64	{d16-d17}, [r1]
   113a8:	mov	r6, sp
   113ac:	add	r1, r6, #32
   113b0:	add	r3, r0, #16
   113b4:	vld1.64	{d18-d19}, [r0], r2
   113b8:	vld1.64	{d20-d21}, [r3]
   113bc:	vldr	d22, [r0]
   113c0:	vst1.64	{d16-d17}, [r1]
   113c4:	add	r0, r6, #16
   113c8:	vst1.64	{d20-d21}, [r0]
   113cc:	mov	r0, r6
   113d0:	vst1.64	{d18-d19}, [r0], r2
   113d4:	vstr	d22, [r0]
   113d8:	ldr	r1, [sp]
   113dc:	cmp	r1, #0
   113e0:	movw	r4, #25717	; 0x6475
   113e4:	movt	r4, #1
   113e8:	beq	11410 <__assert_fail@plt+0x310>
   113ec:	mov	r6, sp
   113f0:	movw	r5, #25717	; 0x6475
   113f4:	movt	r5, #1
   113f8:	mov	r0, r5
   113fc:	bl	10ea8 <strcmp@plt>
   11400:	cmp	r0, #0
   11404:	ldrne	r1, [r6, #8]!
   11408:	cmpne	r1, #0
   1140c:	bne	113f8 <__assert_fail@plt+0x2f8>
   11410:	ldr	r5, [r6, #4]
   11414:	movw	r1, #26178	; 0x6642
   11418:	movt	r1, #1
   1141c:	mov	r0, #0
   11420:	mov	r2, #5
   11424:	bl	10f20 <dcgettext@plt>
   11428:	mov	r1, r0
   1142c:	movw	r2, #25860	; 0x6504
   11430:	movt	r2, #1
   11434:	movw	r3, #26201	; 0x6659
   11438:	movt	r3, #1
   1143c:	mov	r0, #1
   11440:	bl	11040 <__printf_chk@plt>
   11444:	cmp	r5, #0
   11448:	moveq	r5, r4
   1144c:	mov	r0, #5
   11450:	mov	r1, #0
   11454:	bl	11094 <setlocale@plt>
   11458:	cmp	r0, #0
   1145c:	beq	1149c <__assert_fail@plt+0x39c>
   11460:	movw	r1, #26241	; 0x6681
   11464:	movt	r1, #1
   11468:	mov	r2, #3
   1146c:	bl	110dc <strncmp@plt>
   11470:	cmp	r0, #0
   11474:	beq	1149c <__assert_fail@plt+0x39c>
   11478:	movw	r1, #26245	; 0x6685
   1147c:	movt	r1, #1
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	bl	10f20 <dcgettext@plt>
   1148c:	movw	r1, #29012	; 0x7154
   11490:	movt	r1, #2
   11494:	ldr	r1, [r1]
   11498:	bl	10e90 <fputs_unlocked@plt>
   1149c:	movw	r1, #26316	; 0x66cc
   114a0:	movt	r1, #1
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	bl	10f20 <dcgettext@plt>
   114b0:	mov	r1, r0
   114b4:	movw	r2, #26201	; 0x6659
   114b8:	movt	r2, #1
   114bc:	mov	r0, #1
   114c0:	mov	r3, r4
   114c4:	bl	11040 <__printf_chk@plt>
   114c8:	movw	r0, #26111	; 0x65ff
   114cc:	movt	r0, #1
   114d0:	movw	r6, #26393	; 0x6719
   114d4:	movt	r6, #1
   114d8:	cmp	r5, r4
   114dc:	moveq	r6, r0
   114e0:	movw	r1, #26343	; 0x66e7
   114e4:	movt	r1, #1
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	bl	10f20 <dcgettext@plt>
   114f4:	mov	r1, r0
   114f8:	mov	r0, #1
   114fc:	mov	r2, r5
   11500:	mov	r3, r6
   11504:	sub	sp, fp, #16
   11508:	pop	{r4, r5, r6, sl, fp, lr}
   1150c:	b	11040 <__printf_chk@plt>
   11510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11514:	add	fp, sp, #28
   11518:	sub	sp, sp, #36	; 0x24
   1151c:	mov	r6, r1
   11520:	mov	r4, r0
   11524:	ldr	r0, [r1]
   11528:	bl	12d5c <__assert_fail@plt+0x1c5c>
   1152c:	movw	r7, #26393	; 0x6719
   11530:	movt	r7, #1
   11534:	mov	r0, #6
   11538:	mov	r1, r7
   1153c:	bl	11094 <setlocale@plt>
   11540:	movw	r5, #25864	; 0x6508
   11544:	movt	r5, #1
   11548:	movw	r1, #25721	; 0x6479
   1154c:	movt	r1, #1
   11550:	mov	r0, r5
   11554:	bl	110d0 <bindtextdomain@plt>
   11558:	mov	r0, r5
   1155c:	bl	10f38 <textdomain@plt>
   11560:	movw	r0, #10884	; 0x2a84
   11564:	movt	r0, #1
   11568:	bl	160e8 <__assert_fail@plt+0x4fe8>
   1156c:	movw	r0, #29024	; 0x7160
   11570:	movt	r0, #2
   11574:	mov	r9, #0
   11578:	strb	r9, [r0]
   1157c:	movw	r0, #29025	; 0x7161
   11580:	movt	r0, #2
   11584:	strb	r9, [r0]
   11588:	movw	r0, #29026	; 0x7162
   1158c:	movt	r0, #2
   11590:	strb	r9, [r0]
   11594:	movw	r0, #29027	; 0x7163
   11598:	movt	r0, #2
   1159c:	strb	r9, [r0]
   115a0:	movw	r1, #29028	; 0x7164
   115a4:	movt	r1, #2
   115a8:	mov	r0, #75	; 0x4b
   115ac:	str	r0, [r1]
   115b0:	movw	r0, #29032	; 0x7168
   115b4:	movt	r0, #2
   115b8:	str	r7, [r0]
   115bc:	movw	r0, #29036	; 0x716c
   115c0:	movt	r0, #2
   115c4:	str	r9, [r0]
   115c8:	movw	r0, #29040	; 0x7170
   115cc:	movt	r0, #2
   115d0:	str	r9, [r0]
   115d4:	movw	r0, #29044	; 0x7174
   115d8:	movt	r0, #2
   115dc:	str	r9, [r0]
   115e0:	cmp	r4, #2
   115e4:	blt	1161c <__assert_fail@plt+0x51c>
   115e8:	mov	r5, r6
   115ec:	ldr	sl, [r5, #4]!
   115f0:	ldrb	r0, [sl]
   115f4:	cmp	r0, #45	; 0x2d
   115f8:	bne	1161c <__assert_fail@plt+0x51c>
   115fc:	ldrb	r0, [sl, #1]!
   11600:	sub	r0, r0, #48	; 0x30
   11604:	cmp	r0, #9
   11608:	bhi	1161c <__assert_fail@plt+0x51c>
   1160c:	ldr	r0, [r6]
   11610:	str	r0, [r6, #4]
   11614:	sub	r4, r4, #1
   11618:	b	11624 <__assert_fail@plt+0x524>
   1161c:	mov	r5, r6
   11620:	mov	sl, #0
   11624:	movw	r6, #25745	; 0x6491
   11628:	movt	r6, #1
   1162c:	movw	r7, #26560	; 0x67c0
   11630:	movt	r7, #1
   11634:	mov	r0, #0
   11638:	str	r0, [sp, #32]
   1163c:	b	11650 <__assert_fail@plt+0x550>
   11640:	movw	r0, #29025	; 0x7161
   11644:	movt	r0, #2
   11648:	mov	r1, #1
   1164c:	strb	r1, [r0]
   11650:	str	r9, [sp]
   11654:	mov	r0, r4
   11658:	mov	r1, r5
   1165c:	mov	r2, r6
   11660:	mov	r3, r7
   11664:	bl	10fd4 <getopt_long@plt>
   11668:	mov	r8, r0
   1166c:	cmp	r0, #98	; 0x62
   11670:	ble	11734 <__assert_fail@plt+0x634>
   11674:	sub	r0, r8, #99	; 0x63
   11678:	cmp	r0, #20
   1167c:	bhi	11a0c <__assert_fail@plt+0x90c>
   11680:	add	r1, pc, #0
   11684:	ldr	pc, [r1, r0, lsl #2]
   11688:	ldrdeq	r1, [r1], -ip
   1168c:	andeq	r1, r1, ip, lsl #20
   11690:	andeq	r1, r1, ip, lsl #20
   11694:	andeq	r1, r1, ip, lsl #20
   11698:	andeq	r1, r1, r4, lsr #14
   1169c:	andeq	r1, r1, ip, lsl #20
   116a0:	andeq	r1, r1, ip, lsl #20
   116a4:	andeq	r1, r1, ip, lsl #20
   116a8:	andeq	r1, r1, ip, lsl #20
   116ac:	andeq	r1, r1, ip, lsl #20
   116b0:	andeq	r1, r1, ip, lsl #20
   116b4:	andeq	r1, r1, ip, lsl #20
   116b8:	andeq	r1, r1, ip, lsl #20
   116bc:	andeq	r1, r1, r8, ror #13
   116c0:	andeq	r1, r1, ip, lsl #20
   116c4:	andeq	r1, r1, ip, lsl #20
   116c8:	andeq	r1, r1, r0, asr #12
   116cc:	andeq	r1, r1, r8, lsl r7
   116d0:	strdeq	r1, [r1], -ip
   116d4:	andeq	r1, r1, ip, lsl #20
   116d8:	andeq	r1, r1, r8, lsl #14
   116dc:	movw	r0, #29027	; 0x7163
   116e0:	movt	r0, #2
   116e4:	b	11648 <__assert_fail@plt+0x548>
   116e8:	movw	r0, #29016	; 0x7158
   116ec:	movt	r0, #2
   116f0:	ldr	r0, [r0]
   116f4:	bl	11a48 <__assert_fail@plt+0x948>
   116f8:	b	11650 <__assert_fail@plt+0x550>
   116fc:	movw	r0, #29024	; 0x7160
   11700:	movt	r0, #2
   11704:	b	11648 <__assert_fail@plt+0x548>
   11708:	movw	r0, #29016	; 0x7158
   1170c:	movt	r0, #2
   11710:	ldr	sl, [r0]
   11714:	b	11650 <__assert_fail@plt+0x550>
   11718:	movw	r0, #29026	; 0x7162
   1171c:	movt	r0, #2
   11720:	b	11648 <__assert_fail@plt+0x548>
   11724:	movw	r0, #29016	; 0x7158
   11728:	movt	r0, #2
   1172c:	ldr	r0, [r0]
   11730:	b	11638 <__assert_fail@plt+0x538>
   11734:	cmn	r8, #1
   11738:	bne	119ac <__assert_fail@plt+0x8ac>
   1173c:	cmp	sl, #0
   11740:	movw	r7, #26393	; 0x6719
   11744:	movt	r7, #1
   11748:	movw	r9, #29028	; 0x7164
   1174c:	movt	r9, #2
   11750:	beq	11790 <__assert_fail@plt+0x690>
   11754:	mov	r6, #0
   11758:	movw	r1, #25888	; 0x6520
   1175c:	movt	r1, #1
   11760:	mov	r0, #0
   11764:	mov	r2, #5
   11768:	bl	10f20 <dcgettext@plt>
   1176c:	movw	r1, #2500	; 0x9c4
   11770:	stm	sp, {r1, r6, r7}
   11774:	str	r0, [sp, #12]
   11778:	str	r6, [sp, #16]
   1177c:	mov	r0, sl
   11780:	mov	r2, #0
   11784:	mov	r3, #0
   11788:	bl	152ec <__assert_fail@plt+0x41ec>
   1178c:	str	r0, [r9]
   11790:	ldr	r6, [r9]
   11794:	ldr	r8, [sp, #32]
   11798:	cmp	r8, #0
   1179c:	beq	117f8 <__assert_fail@plt+0x6f8>
   117a0:	movw	r1, #25888	; 0x6520
   117a4:	movt	r1, #1
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	bl	10f20 <dcgettext@plt>
   117b4:	asr	r1, r6, #31
   117b8:	str	r6, [sp]
   117bc:	stmib	sp, {r1, r7}
   117c0:	str	r0, [sp, #12]
   117c4:	mov	r0, #0
   117c8:	str	r0, [sp, #16]
   117cc:	mov	r0, r8
   117d0:	mov	r2, #0
   117d4:	mov	r3, #0
   117d8:	bl	152ec <__assert_fail@plt+0x41ec>
   117dc:	movw	r1, #29048	; 0x7178
   117e0:	movt	r1, #2
   117e4:	str	r0, [r1]
   117e8:	cmp	sl, #0
   117ec:	addeq	r0, r0, #10
   117f0:	streq	r0, [r9]
   117f4:	b	11820 <__assert_fail@plt+0x720>
   117f8:	mov	r0, #187	; 0xbb
   117fc:	mul	r0, r6, r0
   11800:	movw	r1, #34079	; 0x851f
   11804:	movt	r1, #20971	; 0x51eb
   11808:	smmul	r0, r0, r1
   1180c:	asr	r1, r0, #6
   11810:	add	r0, r1, r0, lsr #31
   11814:	movw	r1, #29048	; 0x7178
   11818:	movt	r1, #2
   1181c:	str	r0, [r1]
   11820:	movw	sl, #28992	; 0x7140
   11824:	movt	sl, #2
   11828:	ldr	r0, [sl]
   1182c:	cmp	r0, r4
   11830:	bne	1189c <__assert_fail@plt+0x79c>
   11834:	movw	r0, #29008	; 0x7150
   11838:	movt	r0, #2
   1183c:	ldr	r0, [r0]
   11840:	movw	r1, #26876	; 0x68fc
   11844:	movt	r1, #1
   11848:	bl	11ae0 <__assert_fail@plt+0x9e0>
   1184c:	mov	r6, r0
   11850:	movw	r0, #29008	; 0x7150
   11854:	movt	r0, #2
   11858:	ldr	r0, [r0]
   1185c:	bl	12bac <__assert_fail@plt+0x1aac>
   11860:	cmp	r0, #0
   11864:	beq	119a0 <__assert_fail@plt+0x8a0>
   11868:	bl	1101c <__errno_location@plt>
   1186c:	ldr	r4, [r0]
   11870:	movw	r1, #25929	; 0x6549
   11874:	movt	r1, #1
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	bl	10f20 <dcgettext@plt>
   11884:	mov	r3, r0
   11888:	movw	r2, #26807	; 0x68b7
   1188c:	movt	r2, #1
   11890:	mov	r0, #1
   11894:	mov	r1, r4
   11898:	bl	10f98 <error@plt>
   1189c:	ldr	r0, [sl]
   118a0:	mov	r6, #1
   118a4:	cmp	r0, r4
   118a8:	bge	119a0 <__assert_fail@plt+0x8a0>
   118ac:	str	r5, [sp, #32]
   118b0:	str	r4, [sp, #28]
   118b4:	mov	r6, #1
   118b8:	mov	r1, #0
   118bc:	str	r1, [sp, #24]
   118c0:	movw	r4, #26876	; 0x68fc
   118c4:	movt	r4, #1
   118c8:	movw	r5, #26485	; 0x6775
   118cc:	movt	r5, #1
   118d0:	b	1190c <__assert_fail@plt+0x80c>
   118d4:	movw	r0, #29008	; 0x7150
   118d8:	movt	r0, #2
   118dc:	ldr	r0, [r0]
   118e0:	mov	r1, r7
   118e4:	bl	11ae0 <__assert_fail@plt+0x9e0>
   118e8:	and	r6, r6, r0
   118ec:	mov	r0, #1
   118f0:	str	r0, [sp, #24]
   118f4:	ldr	r0, [sl]
   118f8:	add	r0, r0, #1
   118fc:	str	r0, [sl]
   11900:	ldr	r1, [sp, #28]
   11904:	cmp	r0, r1
   11908:	bge	11994 <__assert_fail@plt+0x894>
   1190c:	ldr	r1, [sp, #32]
   11910:	ldr	r7, [r1, r0, lsl #2]
   11914:	mov	r0, r7
   11918:	mov	r1, r4
   1191c:	bl	10ea8 <strcmp@plt>
   11920:	cmp	r0, #0
   11924:	beq	118d4 <__assert_fail@plt+0x7d4>
   11928:	mov	r0, r7
   1192c:	mov	r1, r5
   11930:	bl	110c4 <fopen64@plt>
   11934:	cmp	r0, #0
   11938:	beq	1194c <__assert_fail@plt+0x84c>
   1193c:	mov	r1, r7
   11940:	bl	11ae0 <__assert_fail@plt+0x9e0>
   11944:	and	r6, r6, r0
   11948:	b	118f4 <__assert_fail@plt+0x7f4>
   1194c:	bl	1101c <__errno_location@plt>
   11950:	ldr	r9, [r0]
   11954:	mov	r6, #0
   11958:	mov	r0, #0
   1195c:	movw	r1, #25902	; 0x652e
   11960:	movt	r1, #1
   11964:	mov	r2, #5
   11968:	bl	10f20 <dcgettext@plt>
   1196c:	mov	r8, r0
   11970:	mov	r0, #4
   11974:	mov	r1, r7
   11978:	bl	1435c <__assert_fail@plt+0x325c>
   1197c:	mov	r3, r0
   11980:	mov	r0, #0
   11984:	mov	r1, r9
   11988:	mov	r2, r8
   1198c:	bl	10f98 <error@plt>
   11990:	b	118f4 <__assert_fail@plt+0x7f4>
   11994:	ldr	r0, [sp, #24]
   11998:	tst	r0, #1
   1199c:	bne	11850 <__assert_fail@plt+0x750>
   119a0:	eor	r0, r6, #1
   119a4:	sub	sp, fp, #28
   119a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ac:	cmn	r8, #3
   119b0:	bne	119fc <__assert_fail@plt+0x8fc>
   119b4:	movw	r0, #28912	; 0x70f0
   119b8:	movt	r0, #2
   119bc:	ldr	r3, [r0]
   119c0:	movw	r0, #29012	; 0x7154
   119c4:	movt	r0, #2
   119c8:	ldr	r0, [r0]
   119cc:	mov	r1, #0
   119d0:	movw	r2, #25874	; 0x6512
   119d4:	movt	r2, #1
   119d8:	str	r2, [sp]
   119dc:	str	r1, [sp, #4]
   119e0:	movw	r1, #25717	; 0x6475
   119e4:	movt	r1, #1
   119e8:	movw	r2, #25860	; 0x6504
   119ec:	movt	r2, #1
   119f0:	bl	14d28 <__assert_fail@plt+0x3c28>
   119f4:	mov	r0, #0
   119f8:	bl	10fec <exit@plt>
   119fc:	cmn	r8, #2
   11a00:	bne	11a0c <__assert_fail@plt+0x90c>
   11a04:	mov	r0, #0
   11a08:	bl	111fc <__assert_fail@plt+0xfc>
   11a0c:	sub	r0, r8, #48	; 0x30
   11a10:	cmp	r0, #9
   11a14:	bhi	11a40 <__assert_fail@plt+0x940>
   11a18:	movw	r1, #25766	; 0x64a6
   11a1c:	movt	r1, #1
   11a20:	mov	r0, #0
   11a24:	mov	r2, #5
   11a28:	bl	10f20 <dcgettext@plt>
   11a2c:	mov	r2, r0
   11a30:	mov	r0, #0
   11a34:	mov	r1, #0
   11a38:	mov	r3, r8
   11a3c:	bl	10f98 <error@plt>
   11a40:	mov	r0, #1
   11a44:	bl	111fc <__assert_fail@plt+0xfc>
   11a48:	push	{r4, sl, fp, lr}
   11a4c:	add	fp, sp, #8
   11a50:	mov	r4, r0
   11a54:	movw	r0, #29040	; 0x7170
   11a58:	movt	r0, #2
   11a5c:	mov	r1, #0
   11a60:	str	r1, [r0]
   11a64:	ldrb	r1, [r4]
   11a68:	cmp	r1, #32
   11a6c:	bne	11a88 <__assert_fail@plt+0x988>
   11a70:	ldr	r1, [r0]
   11a74:	add	r1, r1, #1
   11a78:	ldrb	r2, [r4, #1]!
   11a7c:	cmp	r2, #32
   11a80:	beq	11a74 <__assert_fail@plt+0x974>
   11a84:	str	r1, [r0]
   11a88:	movw	r0, #29032	; 0x7168
   11a8c:	movt	r0, #2
   11a90:	str	r4, [r0]
   11a94:	mov	r0, r4
   11a98:	bl	11004 <strlen@plt>
   11a9c:	movw	r1, #29036	; 0x716c
   11aa0:	movt	r1, #2
   11aa4:	str	r0, [r1]
   11aa8:	add	r1, r4, r0
   11aac:	mov	r0, r1
   11ab0:	cmp	r1, r4
   11ab4:	bls	11ac8 <__assert_fail@plt+0x9c8>
   11ab8:	mov	r1, r0
   11abc:	ldrb	r2, [r1, #-1]!
   11ac0:	cmp	r2, #32
   11ac4:	beq	11aac <__assert_fail@plt+0x9ac>
   11ac8:	mov	r1, #0
   11acc:	strb	r1, [r0], -r4
   11ad0:	movw	r1, #29044	; 0x7174
   11ad4:	movt	r1, #2
   11ad8:	str	r0, [r1]
   11adc:	pop	{r4, sl, fp, pc}
   11ae0:	push	{r4, r5, r6, r7, fp, lr}
   11ae4:	add	fp, sp, #16
   11ae8:	mov	r4, r1
   11aec:	mov	r6, r0
   11af0:	mov	r1, #2
   11af4:	bl	12b70 <__assert_fail@plt+0x1a70>
   11af8:	movw	r0, #29056	; 0x7180
   11afc:	movt	r0, #2
   11b00:	mov	r5, #0
   11b04:	str	r5, [r0]
   11b08:	movw	r0, #29052	; 0x717c
   11b0c:	movt	r0, #2
   11b10:	strb	r5, [r0]
   11b14:	mov	r0, r6
   11b18:	bl	11c18 <__assert_fail@plt+0xb18>
   11b1c:	movw	r1, #29060	; 0x7184
   11b20:	movt	r1, #2
   11b24:	str	r0, [r1]
   11b28:	mov	r0, r6
   11b2c:	bl	11cf4 <__assert_fail@plt+0xbf4>
   11b30:	cmp	r0, #0
   11b34:	beq	11b5c <__assert_fail@plt+0xa5c>
   11b38:	movw	r7, #29064	; 0x7188
   11b3c:	movt	r7, #2
   11b40:	bl	11f64 <__assert_fail@plt+0xe64>
   11b44:	ldr	r0, [r7]
   11b48:	bl	120c8 <__assert_fail@plt+0xfc8>
   11b4c:	mov	r0, r6
   11b50:	bl	11cf4 <__assert_fail@plt+0xbf4>
   11b54:	cmp	r0, #0
   11b58:	bne	11b40 <__assert_fail@plt+0xa40>
   11b5c:	mov	r0, r6
   11b60:	bl	10f80 <ferror_unlocked@plt>
   11b64:	mov	r7, r0
   11b68:	cmp	r0, #0
   11b6c:	mvneq	r5, #0
   11b70:	movw	r0, #29008	; 0x7150
   11b74:	movt	r0, #2
   11b78:	ldr	r0, [r0]
   11b7c:	cmp	r0, r6
   11b80:	beq	11bbc <__assert_fail@plt+0xabc>
   11b84:	mov	r0, r6
   11b88:	bl	12bac <__assert_fail@plt+0x1aac>
   11b8c:	cmp	r7, #0
   11b90:	bne	11ba4 <__assert_fail@plt+0xaa4>
   11b94:	cmp	r0, #0
   11b98:	beq	11ba4 <__assert_fail@plt+0xaa4>
   11b9c:	bl	1101c <__errno_location@plt>
   11ba0:	ldr	r5, [r0]
   11ba4:	cmp	r5, #0
   11ba8:	bmi	11bcc <__assert_fail@plt+0xacc>
   11bac:	beq	11bd4 <__assert_fail@plt+0xad4>
   11bb0:	movw	r6, #26807	; 0x68b7
   11bb4:	movt	r6, #1
   11bb8:	b	11bec <__assert_fail@plt+0xaec>
   11bbc:	mov	r0, r6
   11bc0:	bl	110b8 <clearerr_unlocked@plt>
   11bc4:	cmp	r5, #0
   11bc8:	bpl	11bac <__assert_fail@plt+0xaac>
   11bcc:	lsr	r0, r5, #31
   11bd0:	pop	{r4, r5, r6, r7, fp, pc}
   11bd4:	movw	r1, #26476	; 0x676c
   11bd8:	movt	r1, #1
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	bl	10f20 <dcgettext@plt>
   11be8:	mov	r6, r0
   11bec:	mov	r0, #0
   11bf0:	mov	r1, #3
   11bf4:	mov	r2, r4
   11bf8:	bl	14410 <__assert_fail@plt+0x3310>
   11bfc:	mov	r3, r0
   11c00:	mov	r0, #0
   11c04:	mov	r1, r5
   11c08:	mov	r2, r6
   11c0c:	bl	10f98 <error@plt>
   11c10:	lsr	r0, r5, #31
   11c14:	pop	{r4, r5, r6, r7, fp, pc}
   11c18:	push	{r4, r5, r6, sl, fp, lr}
   11c1c:	add	fp, sp, #16
   11c20:	mov	r4, r0
   11c24:	movw	r5, #29068	; 0x718c
   11c28:	movt	r5, #2
   11c2c:	mov	r0, #0
   11c30:	str	r0, [r5]
   11c34:	mov	r0, r4
   11c38:	bl	10f14 <getc_unlocked@plt>
   11c3c:	mov	r1, r0
   11c40:	mov	r0, r4
   11c44:	bl	12120 <__assert_fail@plt+0x1020>
   11c48:	mov	r1, r0
   11c4c:	movw	r0, #29044	; 0x7174
   11c50:	movt	r0, #2
   11c54:	ldr	r0, [r0]
   11c58:	cmp	r0, #0
   11c5c:	beq	11cc8 <__assert_fail@plt+0xbc8>
   11c60:	ldr	r0, [r5]
   11c64:	movw	r2, #29072	; 0x7190
   11c68:	movt	r2, #2
   11c6c:	str	r0, [r2]
   11c70:	movw	r0, #29032	; 0x7168
   11c74:	movt	r0, #2
   11c78:	ldr	r2, [r0]
   11c7c:	ldrb	r0, [r2]
   11c80:	cmp	r0, #0
   11c84:	beq	11cbc <__assert_fail@plt+0xbbc>
   11c88:	add	r6, r2, #1
   11c8c:	uxtb	r0, r0
   11c90:	cmp	r1, r0
   11c94:	bne	11cec <__assert_fail@plt+0xbec>
   11c98:	ldr	r0, [r5]
   11c9c:	add	r0, r0, #1
   11ca0:	str	r0, [r5]
   11ca4:	mov	r0, r4
   11ca8:	bl	10f14 <getc_unlocked@plt>
   11cac:	mov	r1, r0
   11cb0:	ldrb	r0, [r6], #1
   11cb4:	cmp	r0, #0
   11cb8:	bne	11c8c <__assert_fail@plt+0xb8c>
   11cbc:	mov	r0, r4
   11cc0:	pop	{r4, r5, r6, sl, fp, lr}
   11cc4:	b	12120 <__assert_fail@plt+0x1020>
   11cc8:	movw	r0, #29040	; 0x7170
   11ccc:	movt	r0, #2
   11cd0:	ldr	r0, [r0]
   11cd4:	ldr	r2, [r5]
   11cd8:	cmp	r0, r2
   11cdc:	movlt	r2, r0
   11ce0:	movw	r0, #29072	; 0x7190
   11ce4:	movt	r0, #2
   11ce8:	str	r2, [r0]
   11cec:	mov	r0, r1
   11cf0:	pop	{r4, r5, r6, sl, fp, pc}
   11cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf8:	add	fp, sp, #28
   11cfc:	sub	sp, sp, #4
   11d00:	mov	r4, r0
   11d04:	movw	r0, #29076	; 0x7194
   11d08:	movt	r0, #2
   11d0c:	mov	r1, #0
   11d10:	str	r1, [r0]
   11d14:	movw	r8, #29060	; 0x7184
   11d18:	movt	r8, #2
   11d1c:	ldr	r1, [r8]
   11d20:	movw	r5, #29072	; 0x7190
   11d24:	movt	r5, #2
   11d28:	movw	r6, #29040	; 0x7170
   11d2c:	movt	r6, #2
   11d30:	movw	r7, #29036	; 0x716c
   11d34:	movt	r7, #2
   11d38:	movw	r9, #29068	; 0x718c
   11d3c:	movt	r9, #2
   11d40:	cmn	r1, #1
   11d44:	cmpne	r1, #10
   11d48:	bne	11d74 <__assert_fail@plt+0xc74>
   11d4c:	mov	r0, r4
   11d50:	bl	12194 <__assert_fail@plt+0x1094>
   11d54:	cmn	r0, #1
   11d58:	beq	11e28 <__assert_fail@plt+0xd28>
   11d5c:	mov	r0, #10
   11d60:	bl	110f4 <putchar_unlocked@plt>
   11d64:	mov	r0, r4
   11d68:	bl	11c18 <__assert_fail@plt+0xb18>
   11d6c:	mov	r1, r0
   11d70:	b	11d40 <__assert_fail@plt+0xc40>
   11d74:	ldr	r0, [r5]
   11d78:	ldr	r2, [r6]
   11d7c:	cmp	r0, r2
   11d80:	blt	11d4c <__assert_fail@plt+0xc4c>
   11d84:	ldr	r2, [r7]
   11d88:	add	r3, r2, r0
   11d8c:	ldr	r2, [r9]
   11d90:	cmp	r2, r3
   11d94:	blt	11d4c <__assert_fail@plt+0xc4c>
   11d98:	movw	sl, #29084	; 0x719c
   11d9c:	movt	sl, #2
   11da0:	str	r2, [sl]
   11da4:	movw	r2, #29080	; 0x7198
   11da8:	movt	r2, #2
   11dac:	str	r0, [r2]
   11db0:	movw	r0, #34088	; 0x8528
   11db4:	movt	r0, #2
   11db8:	movw	r2, #29088	; 0x71a0
   11dbc:	movt	r2, #2
   11dc0:	str	r2, [r0]
   11dc4:	movw	r0, #29064	; 0x7188
   11dc8:	movt	r0, #2
   11dcc:	movw	r7, #34096	; 0x8530
   11dd0:	movt	r7, #2
   11dd4:	str	r7, [r0]
   11dd8:	mov	r0, r4
   11ddc:	bl	122a8 <__assert_fail@plt+0x11a8>
   11de0:	mov	r5, r0
   11de4:	bl	12538 <__assert_fail@plt+0x1438>
   11de8:	bl	12468 <__assert_fail@plt+0x1368>
   11dec:	movw	r0, #29025	; 0x7161
   11df0:	movt	r0, #2
   11df4:	ldrb	r0, [r0]
   11df8:	cmp	r0, #0
   11dfc:	beq	11e3c <__assert_fail@plt+0xd3c>
   11e00:	movw	r0, #29064	; 0x7188
   11e04:	movt	r0, #2
   11e08:	ldr	r0, [r0]
   11e0c:	cmp	r0, r7
   11e10:	bls	11f44 <__assert_fail@plt+0xe44>
   11e14:	ldrb	r1, [r0, #-16]
   11e18:	orr	r1, r1, #10
   11e1c:	strb	r1, [r0, #-16]
   11e20:	mov	r0, #1
   11e24:	b	11e30 <__assert_fail@plt+0xd30>
   11e28:	mov	r0, #0
   11e2c:	mvn	r5, #0
   11e30:	str	r5, [r8]
   11e34:	sub	sp, fp, #28
   11e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e3c:	movw	r0, #29027	; 0x7163
   11e40:	movt	r0, #2
   11e44:	ldrb	r0, [r0]
   11e48:	cmp	r0, #1
   11e4c:	bne	11e98 <__assert_fail@plt+0xd98>
   11e50:	mov	r0, r5
   11e54:	bl	12538 <__assert_fail@plt+0x1438>
   11e58:	cmp	r0, #0
   11e5c:	beq	11e00 <__assert_fail@plt+0xd00>
   11e60:	movw	r6, #29056	; 0x7180
   11e64:	movt	r6, #2
   11e68:	mov	r0, r4
   11e6c:	mov	r1, r5
   11e70:	bl	122a8 <__assert_fail@plt+0x11a8>
   11e74:	mov	r5, r0
   11e78:	bl	12538 <__assert_fail@plt+0x1438>
   11e7c:	cmp	r0, #0
   11e80:	beq	11e00 <__assert_fail@plt+0xd00>
   11e84:	ldr	r0, [r6]
   11e88:	ldr	r1, [r9]
   11e8c:	cmp	r1, r0
   11e90:	beq	11e68 <__assert_fail@plt+0xd68>
   11e94:	b	11e00 <__assert_fail@plt+0xd00>
   11e98:	movw	r0, #29026	; 0x7162
   11e9c:	movt	r0, #2
   11ea0:	ldrb	r6, [r0]
   11ea4:	mov	r0, r5
   11ea8:	bl	12538 <__assert_fail@plt+0x1438>
   11eac:	cmp	r6, #0
   11eb0:	beq	11f04 <__assert_fail@plt+0xe04>
   11eb4:	cmp	r0, #0
   11eb8:	beq	11e00 <__assert_fail@plt+0xd00>
   11ebc:	ldr	r0, [sl]
   11ec0:	ldr	r1, [r9]
   11ec4:	cmp	r1, r0
   11ec8:	beq	11e00 <__assert_fail@plt+0xd00>
   11ecc:	movw	r6, #29056	; 0x7180
   11ed0:	movt	r6, #2
   11ed4:	mov	r0, r4
   11ed8:	mov	r1, r5
   11edc:	bl	122a8 <__assert_fail@plt+0x11a8>
   11ee0:	mov	r5, r0
   11ee4:	bl	12538 <__assert_fail@plt+0x1438>
   11ee8:	cmp	r0, #0
   11eec:	beq	11e00 <__assert_fail@plt+0xd00>
   11ef0:	ldr	r0, [r6]
   11ef4:	ldr	r1, [r9]
   11ef8:	cmp	r1, r0
   11efc:	beq	11ed4 <__assert_fail@plt+0xdd4>
   11f00:	b	11e00 <__assert_fail@plt+0xd00>
   11f04:	cmp	r0, #0
   11f08:	beq	11e00 <__assert_fail@plt+0xd00>
   11f0c:	movw	r6, #29056	; 0x7180
   11f10:	movt	r6, #2
   11f14:	ldr	r0, [r6]
   11f18:	ldr	r1, [r9]
   11f1c:	cmp	r1, r0
   11f20:	bne	11e00 <__assert_fail@plt+0xd00>
   11f24:	mov	r0, r4
   11f28:	mov	r1, r5
   11f2c:	bl	122a8 <__assert_fail@plt+0x11a8>
   11f30:	mov	r5, r0
   11f34:	bl	12538 <__assert_fail@plt+0x1438>
   11f38:	cmp	r0, #0
   11f3c:	bne	11f14 <__assert_fail@plt+0xe14>
   11f40:	b	11e00 <__assert_fail@plt+0xd00>
   11f44:	movw	r0, #26487	; 0x6777
   11f48:	movt	r0, #1
   11f4c:	movw	r1, #26505	; 0x6789
   11f50:	movt	r1, #1
   11f54:	movw	r3, #26515	; 0x6793
   11f58:	movt	r3, #1
   11f5c:	movw	r2, #623	; 0x26f
   11f60:	bl	11100 <__assert_fail@plt>
   11f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f68:	add	fp, sp, #28
   11f6c:	sub	sp, sp, #20
   11f70:	movw	r0, #29064	; 0x7188
   11f74:	movt	r0, #2
   11f78:	ldr	r1, [r0]
   11f7c:	mov	r2, #0
   11f80:	mov	r0, #0
   11f84:	str	r0, [sp, #16]
   11f88:	str	r2, [r1, #20]
   11f8c:	ldr	r0, [r1, #4]
   11f90:	str	r0, [sp, #4]
   11f94:	movw	r0, #29028	; 0x7164
   11f98:	movt	r0, #2
   11f9c:	ldr	r0, [r0]
   11fa0:	str	r0, [sp, #12]
   11fa4:	str	r0, [r1, #4]
   11fa8:	str	r1, [sp, #8]
   11fac:	sub	r4, r1, #28
   11fb0:	movw	r0, #34096	; 0x8530
   11fb4:	movt	r0, #2
   11fb8:	cmp	r4, r0
   11fbc:	bcc	120b4 <__assert_fail@plt+0xfb4>
   11fc0:	ldr	r8, [sp, #8]
   11fc4:	b	11ff8 <__assert_fail@plt+0xef8>
   11fc8:	mov	r0, r4
   11fcc:	bl	128ac <__assert_fail@plt+0x17ac>
   11fd0:	add	r0, r0, r9
   11fd4:	str	r0, [r8, #-8]
   11fd8:	ldr	r0, [sp, #16]
   11fdc:	add	r0, r0, #28
   11fe0:	str	r0, [sp, #16]
   11fe4:	sub	r8, r8, #28
   11fe8:	sub	r4, r4, #28
   11fec:	mov	r0, r7
   11ff0:	cmp	r4, r7
   11ff4:	bcc	120b4 <__assert_fail@plt+0xfb4>
   11ff8:	mov	r7, r0
   11ffc:	cmp	r4, r0
   12000:	movw	r0, #29056	; 0x7180
   12004:	movt	r0, #2
   12008:	movw	r1, #29084	; 0x719c
   1200c:	movt	r1, #2
   12010:	moveq	r0, r1
   12014:	ldr	r0, [r0]
   12018:	ldr	r1, [r8, #-24]	; 0xffffffe8
   1201c:	add	r5, r0, r1
   12020:	mvn	r9, #-2147483648	; 0x80000000
   12024:	mov	sl, #0
   12028:	add	r6, r8, sl
   1202c:	mov	r0, r6
   12030:	mov	r1, r5
   12034:	bl	1284c <__assert_fail@plt+0x174c>
   12038:	ldr	r1, [r6, #20]
   1203c:	add	r0, r1, r0
   12040:	mov	r1, r7
   12044:	cmp	r4, r7
   12048:	bne	12074 <__assert_fail@plt+0xf74>
   1204c:	movw	r1, #29076	; 0x7194
   12050:	movt	r1, #2
   12054:	ldr	r1, [r1]
   12058:	cmp	r1, #1
   1205c:	blt	12074 <__assert_fail@plt+0xf74>
   12060:	sub	r1, r5, r1
   12064:	add	r1, r1, r1, lsl #2
   12068:	lsl	r1, r1, #1
   1206c:	mul	r1, r1, r1
   12070:	add	r0, r0, r1, lsr #1
   12074:	cmp	r0, r9
   12078:	strlt	r5, [r8, #-12]
   1207c:	strlt	r6, [r8, #-4]
   12080:	movlt	r9, r0
   12084:	ldr	r0, [sp, #16]
   12088:	cmp	r0, sl
   1208c:	beq	11fc8 <__assert_fail@plt+0xec8>
   12090:	ldr	r0, [r6, #-20]	; 0xffffffec
   12094:	ldr	r1, [r6, #4]
   12098:	add	r0, r0, r5
   1209c:	add	r5, r0, r1
   120a0:	add	sl, sl, #28
   120a4:	ldr	r0, [sp, #12]
   120a8:	cmp	r5, r0
   120ac:	blt	12028 <__assert_fail@plt+0xf28>
   120b0:	b	11fc8 <__assert_fail@plt+0xec8>
   120b4:	ldr	r0, [sp, #8]
   120b8:	ldr	r1, [sp, #4]
   120bc:	str	r1, [r0, #4]
   120c0:	sub	sp, fp, #28
   120c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c8:	push	{r4, r5, r6, sl, fp, lr}
   120cc:	add	fp, sp, #16
   120d0:	mov	r4, r0
   120d4:	movw	r0, #29084	; 0x719c
   120d8:	movt	r0, #2
   120dc:	ldr	r1, [r0]
   120e0:	movw	r5, #34096	; 0x8530
   120e4:	movt	r5, #2
   120e8:	mov	r0, r5
   120ec:	bl	1295c <__assert_fail@plt+0x185c>
   120f0:	ldr	r5, [r5, #24]
   120f4:	cmp	r5, r4
   120f8:	beq	1211c <__assert_fail@plt+0x101c>
   120fc:	movw	r6, #29056	; 0x7180
   12100:	movt	r6, #2
   12104:	ldr	r1, [r6]
   12108:	mov	r0, r5
   1210c:	bl	1295c <__assert_fail@plt+0x185c>
   12110:	ldr	r5, [r5, #24]
   12114:	cmp	r5, r4
   12118:	bne	12104 <__assert_fail@plt+0x1004>
   1211c:	pop	{r4, r5, r6, sl, fp, pc}
   12120:	push	{r4, r5, r6, r7, fp, lr}
   12124:	add	fp, sp, #16
   12128:	mov	r4, r0
   1212c:	movw	r5, #29052	; 0x717c
   12130:	movt	r5, #2
   12134:	mov	r6, #1
   12138:	movw	r7, #29068	; 0x718c
   1213c:	movt	r7, #2
   12140:	cmp	r1, #9
   12144:	bne	12178 <__assert_fail@plt+0x1078>
   12148:	strb	r6, [r5]
   1214c:	ldr	r0, [r7]
   12150:	asr	r1, r0, #31
   12154:	add	r0, r0, r1, lsr #29
   12158:	bic	r0, r0, #7
   1215c:	add	r0, r0, #8
   12160:	str	r0, [r7]
   12164:	mov	r0, r4
   12168:	bl	10f14 <getc_unlocked@plt>
   1216c:	mov	r1, r0
   12170:	cmp	r1, #9
   12174:	beq	12148 <__assert_fail@plt+0x1048>
   12178:	cmp	r1, #32
   1217c:	bne	1218c <__assert_fail@plt+0x108c>
   12180:	ldr	r0, [r7]
   12184:	add	r0, r0, #1
   12188:	b	12160 <__assert_fail@plt+0x1060>
   1218c:	mov	r0, r1
   12190:	pop	{r4, r5, r6, r7, fp, pc}
   12194:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12198:	add	fp, sp, #24
   1219c:	mov	r5, r1
   121a0:	mov	r4, r0
   121a4:	movw	r7, #62096	; 0xf290
   121a8:	movt	r7, #2
   121ac:	mov	r0, #0
   121b0:	str	r0, [r7]
   121b4:	movw	r8, #29072	; 0x7190
   121b8:	movt	r8, #2
   121bc:	ldr	r0, [r8]
   121c0:	movw	r9, #29068	; 0x718c
   121c4:	movt	r9, #2
   121c8:	ldr	r1, [r9]
   121cc:	cmp	r1, r0
   121d0:	bgt	121e0 <__assert_fail@plt+0x10e0>
   121d4:	cmn	r5, #1
   121d8:	cmpne	r5, #10
   121dc:	beq	12294 <__assert_fail@plt+0x1194>
   121e0:	bl	125a4 <__assert_fail@plt+0x14a4>
   121e4:	ldr	r0, [r9]
   121e8:	ldr	r1, [r7]
   121ec:	cmp	r0, r1
   121f0:	beq	1223c <__assert_fail@plt+0x113c>
   121f4:	movw	r2, #29032	; 0x7168
   121f8:	movt	r2, #2
   121fc:	ldr	r3, [r2]
   12200:	ldrb	r2, [r3]
   12204:	cmp	r2, #0
   12208:	beq	1223c <__assert_fail@plt+0x113c>
   1220c:	add	r6, r3, #1
   12210:	uxtb	r0, r2
   12214:	bl	110f4 <putchar_unlocked@plt>
   12218:	ldr	r0, [r7]
   1221c:	add	r1, r0, #1
   12220:	str	r1, [r7]
   12224:	ldr	r0, [r9]
   12228:	cmp	r0, r1
   1222c:	beq	1223c <__assert_fail@plt+0x113c>
   12230:	ldrb	r2, [r6], #1
   12234:	cmp	r2, #0
   12238:	bne	12210 <__assert_fail@plt+0x1110>
   1223c:	cmn	r5, #1
   12240:	beq	12258 <__assert_fail@plt+0x1158>
   12244:	cmp	r5, #10
   12248:	beq	12294 <__assert_fail@plt+0x1194>
   1224c:	sub	r0, r0, r1
   12250:	bl	125a4 <__assert_fail@plt+0x14a4>
   12254:	b	12294 <__assert_fail@plt+0x1194>
   12258:	ldr	r1, [r8]
   1225c:	movw	r2, #29044	; 0x7174
   12260:	movt	r2, #2
   12264:	ldr	r2, [r2]
   12268:	add	r1, r2, r1
   1226c:	cmp	r0, r1
   12270:	blt	12294 <__assert_fail@plt+0x1194>
   12274:	mov	r0, #10
   12278:	bl	110f4 <putchar_unlocked@plt>
   1227c:	b	12294 <__assert_fail@plt+0x1194>
   12280:	mov	r0, r5
   12284:	bl	110f4 <putchar_unlocked@plt>
   12288:	mov	r0, r4
   1228c:	bl	10f14 <getc_unlocked@plt>
   12290:	mov	r5, r0
   12294:	cmn	r5, #1
   12298:	cmpne	r5, #10
   1229c:	bne	12280 <__assert_fail@plt+0x1180>
   122a0:	mov	r0, r5
   122a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   122a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ac:	add	fp, sp, #28
   122b0:	sub	sp, sp, #4
   122b4:	mov	r5, r1
   122b8:	mov	r4, r0
   122bc:	movw	r8, #29064	; 0x7188
   122c0:	movt	r8, #2
   122c4:	movw	r7, #34088	; 0x8528
   122c8:	movt	r7, #2
   122cc:	movw	r0, #5000	; 0x1388
   122d0:	movw	r1, #29088	; 0x71a0
   122d4:	movt	r1, #2
   122d8:	add	r6, r1, r0
   122dc:	movw	r9, #29068	; 0x718c
   122e0:	movt	r9, #2
   122e4:	movw	r0, #27944	; 0x6d28
   122e8:	movw	r1, #34096	; 0x8530
   122ec:	movt	r1, #2
   122f0:	add	r0, r1, r0
   122f4:	str	r0, [sp]
   122f8:	b	12314 <__assert_fail@plt+0x1214>
   122fc:	ldr	r0, [r8]
   12300:	add	r0, r0, #28
   12304:	str	r0, [r8]
   12308:	cmp	r5, #10
   1230c:	cmnne	r5, #1
   12310:	beq	12458 <__assert_fail@plt+0x1358>
   12314:	ldr	r1, [r8]
   12318:	ldr	r0, [r7]
   1231c:	str	r0, [r1]
   12320:	cmp	r0, r6
   12324:	bne	12334 <__assert_fail@plt+0x1234>
   12328:	mov	r0, #1
   1232c:	bl	12468 <__assert_fail@plt+0x1368>
   12330:	bl	12648 <__assert_fail@plt+0x1548>
   12334:	ldr	r0, [r7]
   12338:	add	r1, r0, #1
   1233c:	str	r1, [r7]
   12340:	strb	r5, [r0]
   12344:	mov	r0, r4
   12348:	bl	10f14 <getc_unlocked@plt>
   1234c:	mov	r5, r0
   12350:	cmn	r0, #1
   12354:	beq	12380 <__assert_fail@plt+0x1280>
   12358:	bl	10fe0 <__ctype_b_loc@plt>
   1235c:	ldr	r0, [r0]
   12360:	add	r0, r0, r5, lsl #1
   12364:	ldrb	r0, [r0, #1]
   12368:	tst	r0, #32
   1236c:	bne	12380 <__assert_fail@plt+0x1280>
   12370:	ldr	r0, [r7]
   12374:	cmp	r0, r6
   12378:	bne	12334 <__assert_fail@plt+0x1234>
   1237c:	b	12328 <__assert_fail@plt+0x1228>
   12380:	ldr	r1, [r7]
   12384:	ldr	r0, [r8]
   12388:	ldr	r2, [r0]
   1238c:	sub	r1, r1, r2
   12390:	str	r1, [r0, #4]
   12394:	ldr	r2, [r9]
   12398:	add	sl, r2, r1
   1239c:	str	sl, [r9]
   123a0:	bl	12788 <__assert_fail@plt+0x1688>
   123a4:	mov	r0, r4
   123a8:	mov	r1, r5
   123ac:	bl	12120 <__assert_fail@plt+0x1020>
   123b0:	mov	r5, r0
   123b4:	ldr	r0, [r9]
   123b8:	sub	r1, r0, sl
   123bc:	ldr	r0, [r8]
   123c0:	str	r1, [r0, #8]
   123c4:	cmn	r5, #1
   123c8:	beq	123e4 <__assert_fail@plt+0x12e4>
   123cc:	ldrb	r3, [r0, #12]
   123d0:	mov	r2, #0
   123d4:	tst	r3, #2
   123d8:	beq	12400 <__assert_fail@plt+0x1300>
   123dc:	cmp	r5, #10
   123e0:	bne	123f4 <__assert_fail@plt+0x12f4>
   123e4:	ldrb	r1, [r0, #12]
   123e8:	orr	r1, r1, #8
   123ec:	strb	r1, [r0, #12]
   123f0:	b	1242c <__assert_fail@plt+0x132c>
   123f4:	cmp	r1, #1
   123f8:	mov	r2, #0
   123fc:	movwgt	r2, #1
   12400:	ldrb	r1, [r0, #12]
   12404:	bic	r1, r1, #8
   12408:	orr	r1, r1, r2, lsl #3
   1240c:	strb	r1, [r0, #12]
   12410:	cmp	r5, #10
   12414:	beq	1242c <__assert_fail@plt+0x132c>
   12418:	movw	r2, #29024	; 0x7160
   1241c:	movt	r2, #2
   12420:	ldrb	r2, [r2]
   12424:	cmp	r2, #1
   12428:	bne	1243c <__assert_fail@plt+0x133c>
   1242c:	tst	r1, #8
   12430:	mov	r1, #2
   12434:	movweq	r1, #1
   12438:	str	r1, [r0, #8]
   1243c:	ldr	r1, [sp]
   12440:	cmp	r0, r1
   12444:	bne	122fc <__assert_fail@plt+0x11fc>
   12448:	mov	r0, #1
   1244c:	bl	12468 <__assert_fail@plt+0x1368>
   12450:	bl	12648 <__assert_fail@plt+0x1548>
   12454:	b	122fc <__assert_fail@plt+0x11fc>
   12458:	mov	r0, r4
   1245c:	sub	sp, fp, #28
   12460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12464:	b	11c18 <__assert_fail@plt+0xb18>
   12468:	movw	r1, #29025	; 0x7161
   1246c:	movt	r1, #2
   12470:	ldrb	r1, [r1]
   12474:	cmp	r1, #1
   12478:	movw	r1, #29056	; 0x7180
   1247c:	movt	r1, #2
   12480:	beq	12524 <__assert_fail@plt+0x1424>
   12484:	movw	r2, #29027	; 0x7163
   12488:	movt	r2, #2
   1248c:	ldrb	r2, [r2]
   12490:	cmp	r2, #1
   12494:	bne	124bc <__assert_fail@plt+0x13bc>
   12498:	movw	r2, #29068	; 0x718c
   1249c:	movt	r2, #2
   124a0:	movw	r3, #29084	; 0x719c
   124a4:	movt	r3, #2
   124a8:	cmp	r0, #0
   124ac:	movne	r3, r2
   124b0:	ldr	r0, [r3]
   124b4:	str	r0, [r1]
   124b8:	bx	lr
   124bc:	movw	r2, #29026	; 0x7162
   124c0:	movt	r2, #2
   124c4:	ldrb	r2, [r2]
   124c8:	cmp	r2, #1
   124cc:	bne	12524 <__assert_fail@plt+0x1424>
   124d0:	cmp	r0, #0
   124d4:	beq	124f8 <__assert_fail@plt+0x13f8>
   124d8:	movw	r0, #29068	; 0x718c
   124dc:	movt	r0, #2
   124e0:	ldr	r0, [r0]
   124e4:	movw	r2, #29084	; 0x719c
   124e8:	movt	r2, #2
   124ec:	ldr	r2, [r2]
   124f0:	cmp	r0, r2
   124f4:	bne	1251c <__assert_fail@plt+0x141c>
   124f8:	movw	r0, #29084	; 0x719c
   124fc:	movt	r0, #2
   12500:	ldr	r2, [r0]
   12504:	ldr	r0, [r1]
   12508:	cmp	r0, r2
   1250c:	bxne	lr
   12510:	mov	r0, #0
   12514:	cmp	r2, #0
   12518:	movweq	r0, #3
   1251c:	str	r0, [r1]
   12520:	bx	lr
   12524:	movw	r0, #29084	; 0x719c
   12528:	movt	r0, #2
   1252c:	ldr	r0, [r0]
   12530:	str	r0, [r1]
   12534:	bx	lr
   12538:	movw	r1, #29072	; 0x7190
   1253c:	movt	r1, #2
   12540:	ldr	r1, [r1]
   12544:	movw	r2, #29080	; 0x7198
   12548:	movt	r2, #2
   1254c:	ldr	r2, [r2]
   12550:	cmp	r1, r2
   12554:	movne	r0, #0
   12558:	bxne	lr
   1255c:	mvn	r2, #0
   12560:	subs	r2, r0, r2
   12564:	movwne	r2, #1
   12568:	movw	r3, #29036	; 0x716c
   1256c:	movt	r3, #2
   12570:	ldr	r3, [r3]
   12574:	add	ip, r3, r1
   12578:	movw	r3, #29068	; 0x718c
   1257c:	movt	r3, #2
   12580:	ldr	r3, [r3]
   12584:	mov	r1, #0
   12588:	cmp	r3, ip
   1258c:	movwge	r1, #1
   12590:	subs	r0, r0, #10
   12594:	movwne	r0, #1
   12598:	and	r0, r0, r1
   1259c:	and	r0, r2, r0
   125a0:	bx	lr
   125a4:	push	{r4, r5, r6, sl, fp, lr}
   125a8:	add	fp, sp, #16
   125ac:	movw	r4, #62096	; 0xf290
   125b0:	movt	r4, #2
   125b4:	ldr	r1, [r4]
   125b8:	add	r5, r1, r0
   125bc:	movw	r0, #29052	; 0x717c
   125c0:	movt	r0, #2
   125c4:	ldrb	r0, [r0]
   125c8:	cmp	r0, #1
   125cc:	bne	1261c <__assert_fail@plt+0x151c>
   125d0:	asr	r0, r5, #31
   125d4:	add	r0, r5, r0, lsr #29
   125d8:	bic	r6, r0, #7
   125dc:	add	r0, r1, #1
   125e0:	cmp	r0, r6
   125e4:	bge	1261c <__assert_fail@plt+0x151c>
   125e8:	ldr	r0, [r4]
   125ec:	cmp	r0, r6
   125f0:	bge	1261c <__assert_fail@plt+0x151c>
   125f4:	mov	r0, #9
   125f8:	bl	110f4 <putchar_unlocked@plt>
   125fc:	ldr	r0, [r4]
   12600:	asr	r1, r0, #31
   12604:	add	r0, r0, r1, lsr #29
   12608:	bic	r0, r0, #7
   1260c:	add	r0, r0, #8
   12610:	str	r0, [r4]
   12614:	cmp	r0, r6
   12618:	blt	125f4 <__assert_fail@plt+0x14f4>
   1261c:	ldr	r0, [r4]
   12620:	cmp	r0, r5
   12624:	bge	12644 <__assert_fail@plt+0x1544>
   12628:	mov	r0, #32
   1262c:	bl	110f4 <putchar_unlocked@plt>
   12630:	ldr	r0, [r4]
   12634:	add	r0, r0, #1
   12638:	str	r0, [r4]
   1263c:	cmp	r0, r5
   12640:	blt	12628 <__assert_fail@plt+0x1528>
   12644:	pop	{r4, r5, r6, sl, fp, pc}
   12648:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1264c:	add	fp, sp, #24
   12650:	movw	r9, #29064	; 0x7188
   12654:	movt	r9, #2
   12658:	ldr	r6, [r9]
   1265c:	movw	r8, #34096	; 0x8530
   12660:	movt	r8, #2
   12664:	cmp	r6, r8
   12668:	beq	126c4 <__assert_fail@plt+0x15c4>
   1266c:	bl	11f64 <__assert_fail@plt+0xe64>
   12670:	ldr	r0, [r8, #24]
   12674:	cmp	r0, r6
   12678:	beq	126fc <__assert_fail@plt+0x15fc>
   1267c:	mvn	r2, #-2147483648	; 0x80000000
   12680:	mov	r5, r6
   12684:	mov	r1, r2
   12688:	ldr	r3, [r0, #20]
   1268c:	ldr	r4, [r0, #24]
   12690:	ldr	r7, [r4, #20]
   12694:	sub	r3, r3, r7
   12698:	cmp	r3, r2
   1269c:	movlt	r1, r3
   126a0:	cmn	r1, #-2147483639	; 0x80000009
   126a4:	addlt	r1, r1, #9
   126a8:	cmp	r3, r2
   126ac:	movlt	r5, r0
   126b0:	cmp	r4, r6
   126b4:	mov	r0, r4
   126b8:	mov	r2, r1
   126bc:	bne	12688 <__assert_fail@plt+0x1588>
   126c0:	b	12700 <__assert_fail@plt+0x1600>
   126c4:	movw	r5, #34088	; 0x8528
   126c8:	movt	r5, #2
   126cc:	ldr	r0, [r5]
   126d0:	movw	r4, #29088	; 0x71a0
   126d4:	movt	r4, #2
   126d8:	sub	r2, r0, r4
   126dc:	movw	r0, #29012	; 0x7154
   126e0:	movt	r0, #2
   126e4:	ldr	r3, [r0]
   126e8:	mov	r0, r4
   126ec:	mov	r1, #1
   126f0:	bl	10f08 <fwrite_unlocked@plt>
   126f4:	str	r4, [r5]
   126f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126fc:	mov	r5, r6
   12700:	mov	r0, r5
   12704:	bl	120c8 <__assert_fail@plt+0xfc8>
   12708:	ldr	r1, [r5]
   1270c:	movw	r4, #34088	; 0x8528
   12710:	movt	r4, #2
   12714:	ldr	r7, [r4]
   12718:	sub	r2, r7, r1
   1271c:	movw	r6, #29088	; 0x71a0
   12720:	movt	r6, #2
   12724:	mov	r0, r6
   12728:	bl	10ecc <memmove@plt>
   1272c:	ldr	r0, [r5]
   12730:	sub	r0, r6, r0
   12734:	add	r1, r7, r0
   12738:	str	r1, [r4]
   1273c:	ldr	r6, [r9]
   12740:	cmp	r5, r6
   12744:	bhi	12764 <__assert_fail@plt+0x1664>
   12748:	mov	r1, r5
   1274c:	ldr	r2, [r1]
   12750:	add	r2, r2, r0
   12754:	str	r2, [r1], #28
   12758:	ldr	r6, [r9]
   1275c:	cmp	r1, r6
   12760:	bls	1274c <__assert_fail@plt+0x164c>
   12764:	sub	r0, r6, r5
   12768:	add	r2, r0, #28
   1276c:	mov	r0, r8
   12770:	mov	r1, r5
   12774:	bl	10ecc <memmove@plt>
   12778:	sub	r0, r8, r5
   1277c:	add	r0, r6, r0
   12780:	str	r0, [r9]
   12784:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12788:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1278c:	add	fp, sp, #24
   12790:	mov	r8, r0
   12794:	ldr	r4, [r0]
   12798:	ldr	r0, [r0, #4]
   1279c:	sub	r5, r0, #1
   127a0:	mov	r6, r4
   127a4:	ldrb	r9, [r6, r5]!
   127a8:	ldrb	r1, [r4]
   127ac:	movw	r0, #26543	; 0x67af
   127b0:	movt	r0, #1
   127b4:	mov	r2, #6
   127b8:	bl	11070 <memchr@plt>
   127bc:	cmp	r0, #0
   127c0:	movwne	r0, #1
   127c4:	ldrb	r1, [r8, #12]
   127c8:	bic	r1, r1, #1
   127cc:	orr	r7, r1, r0
   127d0:	strb	r7, [r8, #12]
   127d4:	bl	10fe0 <__ctype_b_loc@plt>
   127d8:	ldr	r0, [r0]
   127dc:	ldrb	r0, [r0, r9, lsl #1]
   127e0:	lsr	r0, r0, #2
   127e4:	bfi	r7, r0, #2, #1
   127e8:	strb	r7, [r8, #12]
   127ec:	cmp	r5, #1
   127f0:	blt	12820 <__assert_fail@plt+0x1720>
   127f4:	movw	r5, #26549	; 0x67b5
   127f8:	movt	r5, #1
   127fc:	ldrb	r1, [r6]
   12800:	mov	r0, r5
   12804:	mov	r2, #5
   12808:	bl	11070 <memchr@plt>
   1280c:	cmp	r0, #0
   12810:	beq	12820 <__assert_fail@plt+0x1720>
   12814:	sub	r6, r6, #1
   12818:	cmp	r4, r6
   1281c:	bcc	127fc <__assert_fail@plt+0x16fc>
   12820:	ldrb	r1, [r6]
   12824:	movw	r0, #26554	; 0x67ba
   12828:	movt	r0, #1
   1282c:	mov	r2, #4
   12830:	bl	11070 <memchr@plt>
   12834:	cmp	r0, #0
   12838:	movwne	r0, #1
   1283c:	and	r1, r7, #253	; 0xfd
   12840:	orr	r0, r1, r0, lsl #1
   12844:	strb	r0, [r8, #12]
   12848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1284c:	mov	r2, r0
   12850:	movw	r0, #29064	; 0x7188
   12854:	movt	r0, #2
   12858:	ldr	ip, [r0]
   1285c:	cmp	ip, r2
   12860:	moveq	r0, #0
   12864:	bxeq	lr
   12868:	movw	r0, #29048	; 0x7178
   1286c:	movt	r0, #2
   12870:	ldr	r0, [r0]
   12874:	sub	r0, r0, r1
   12878:	add	r0, r0, r0, lsl #2
   1287c:	lsl	r0, r0, #1
   12880:	mul	r0, r0, r0
   12884:	ldr	r3, [r2, #24]
   12888:	cmp	r3, ip
   1288c:	bxeq	lr
   12890:	ldr	r2, [r2, #16]
   12894:	sub	r1, r1, r2
   12898:	add	r1, r1, r1, lsl #2
   1289c:	lsl	r1, r1, #1
   128a0:	mul	r1, r1, r1
   128a4:	add	r0, r0, r1, lsr #1
   128a8:	bx	lr
   128ac:	movw	r2, #34096	; 0x8530
   128b0:	movt	r2, #2
   128b4:	cmp	r0, r2
   128b8:	bls	1290c <__assert_fail@plt+0x180c>
   128bc:	ldrb	r3, [r0, #-16]
   128c0:	tst	r3, #2
   128c4:	bne	12914 <__assert_fail@plt+0x1814>
   128c8:	movw	r1, #3300	; 0xce4
   128cc:	tst	r3, #4
   128d0:	bne	12924 <__assert_fail@plt+0x1824>
   128d4:	add	r1, r2, #28
   128d8:	cmp	r0, r1
   128dc:	bls	1290c <__assert_fail@plt+0x180c>
   128e0:	ldrb	r1, [r0, #-44]	; 0xffffffd4
   128e4:	tst	r1, #8
   128e8:	movw	r1, #4900	; 0x1324
   128ec:	beq	12924 <__assert_fail@plt+0x1824>
   128f0:	ldr	r1, [r0, #-24]	; 0xffffffe8
   128f4:	add	r1, r1, #2
   128f8:	movw	r2, #40000	; 0x9c40
   128fc:	sdiv	r1, r2, r1
   12900:	movw	r2, #4900	; 0x1324
   12904:	add	r1, r1, r2
   12908:	b	12924 <__assert_fail@plt+0x1824>
   1290c:	movw	r1, #4900	; 0x1324
   12910:	b	12924 <__assert_fail@plt+0x1824>
   12914:	mov	r1, #2400	; 0x960
   12918:	tst	r3, #8
   1291c:	movweq	r1, #37220	; 0x9164
   12920:	movteq	r1, #5
   12924:	ldrb	r2, [r0, #12]
   12928:	tst	r2, #1
   1292c:	subne	r1, r1, #1600	; 0x640
   12930:	movne	r0, r1
   12934:	bxne	lr
   12938:	tst	r2, #8
   1293c:	beq	12954 <__assert_fail@plt+0x1854>
   12940:	ldr	r0, [r0, #4]
   12944:	add	r0, r0, #2
   12948:	movw	r2, #22500	; 0x57e4
   1294c:	sdiv	r0, r2, r0
   12950:	add	r1, r0, r1
   12954:	mov	r0, r1
   12958:	bx	lr
   1295c:	push	{r4, r5, r6, sl, fp, lr}
   12960:	add	fp, sp, #16
   12964:	mov	r5, r1
   12968:	mov	r4, r0
   1296c:	movw	r6, #62096	; 0xf290
   12970:	movt	r6, #2
   12974:	mov	r0, #0
   12978:	str	r0, [r6]
   1297c:	movw	r0, #29080	; 0x7198
   12980:	movt	r0, #2
   12984:	ldr	r0, [r0]
   12988:	bl	125a4 <__assert_fail@plt+0x14a4>
   1298c:	movw	r0, #29012	; 0x7154
   12990:	movt	r0, #2
   12994:	ldr	r1, [r0]
   12998:	movw	r0, #29032	; 0x7168
   1299c:	movt	r0, #2
   129a0:	ldr	r0, [r0]
   129a4:	bl	10e90 <fputs_unlocked@plt>
   129a8:	movw	r0, #29044	; 0x7174
   129ac:	movt	r0, #2
   129b0:	ldr	r0, [r0]
   129b4:	ldr	r1, [r6]
   129b8:	add	r0, r1, r0
   129bc:	str	r0, [r6]
   129c0:	sub	r0, r5, r0
   129c4:	bl	125a4 <__assert_fail@plt+0x14a4>
   129c8:	ldr	r5, [r4, #24]
   129cc:	mov	r0, r4
   129d0:	bl	12a1c <__assert_fail@plt+0x191c>
   129d4:	sub	r0, r5, #28
   129d8:	cmp	r0, r4
   129dc:	beq	12a00 <__assert_fail@plt+0x1900>
   129e0:	add	r4, r4, #28
   129e4:	ldr	r0, [r4, #-20]	; 0xffffffec
   129e8:	bl	125a4 <__assert_fail@plt+0x14a4>
   129ec:	mov	r0, r4
   129f0:	bl	12a1c <__assert_fail@plt+0x191c>
   129f4:	add	r4, r4, #28
   129f8:	cmp	r5, r4
   129fc:	bne	129e4 <__assert_fail@plt+0x18e4>
   12a00:	ldr	r0, [r6]
   12a04:	movw	r1, #29076	; 0x7194
   12a08:	movt	r1, #2
   12a0c:	str	r0, [r1]
   12a10:	mov	r0, #10
   12a14:	pop	{r4, r5, r6, sl, fp, lr}
   12a18:	b	110f4 <putchar_unlocked@plt>
   12a1c:	push	{r4, r5, r6, sl, fp, lr}
   12a20:	add	fp, sp, #16
   12a24:	mov	r4, r0
   12a28:	ldr	r5, [r0, #4]
   12a2c:	cmp	r5, #0
   12a30:	beq	12a48 <__assert_fail@plt+0x1948>
   12a34:	ldr	r6, [r4]
   12a38:	ldrb	r0, [r6], #1
   12a3c:	bl	110f4 <putchar_unlocked@plt>
   12a40:	subs	r5, r5, #1
   12a44:	bne	12a38 <__assert_fail@plt+0x1938>
   12a48:	ldr	r0, [r4, #4]
   12a4c:	movw	r1, #62096	; 0xf290
   12a50:	movt	r1, #2
   12a54:	ldr	r2, [r1]
   12a58:	add	r0, r2, r0
   12a5c:	str	r0, [r1]
   12a60:	pop	{r4, r5, r6, sl, fp, pc}
   12a64:	movw	r1, #62100	; 0xf294
   12a68:	movt	r1, #2
   12a6c:	str	r0, [r1]
   12a70:	bx	lr
   12a74:	movw	r1, #62104	; 0xf298
   12a78:	movt	r1, #2
   12a7c:	strb	r0, [r1]
   12a80:	bx	lr
   12a84:	push	{r4, r5, r6, sl, fp, lr}
   12a88:	add	fp, sp, #16
   12a8c:	sub	sp, sp, #8
   12a90:	movw	r0, #29012	; 0x7154
   12a94:	movt	r0, #2
   12a98:	ldr	r0, [r0]
   12a9c:	bl	15c2c <__assert_fail@plt+0x4b2c>
   12aa0:	cmp	r0, #0
   12aa4:	beq	12acc <__assert_fail@plt+0x19cc>
   12aa8:	movw	r0, #62104	; 0xf298
   12aac:	movt	r0, #2
   12ab0:	ldrb	r0, [r0]
   12ab4:	cmp	r0, #0
   12ab8:	beq	12aec <__assert_fail@plt+0x19ec>
   12abc:	bl	1101c <__errno_location@plt>
   12ac0:	ldr	r0, [r0]
   12ac4:	cmp	r0, #32
   12ac8:	bne	12aec <__assert_fail@plt+0x19ec>
   12acc:	movw	r0, #29000	; 0x7148
   12ad0:	movt	r0, #2
   12ad4:	ldr	r0, [r0]
   12ad8:	bl	15c2c <__assert_fail@plt+0x4b2c>
   12adc:	cmp	r0, #0
   12ae0:	subeq	sp, fp, #16
   12ae4:	popeq	{r4, r5, r6, sl, fp, pc}
   12ae8:	b	12b5c <__assert_fail@plt+0x1a5c>
   12aec:	movw	r1, #26791	; 0x68a7
   12af0:	movt	r1, #1
   12af4:	mov	r0, #0
   12af8:	mov	r2, #5
   12afc:	bl	10f20 <dcgettext@plt>
   12b00:	mov	r4, r0
   12b04:	movw	r0, #62100	; 0xf294
   12b08:	movt	r0, #2
   12b0c:	ldr	r6, [r0]
   12b10:	bl	1101c <__errno_location@plt>
   12b14:	ldr	r5, [r0]
   12b18:	cmp	r6, #0
   12b1c:	bne	12b38 <__assert_fail@plt+0x1a38>
   12b20:	movw	r2, #26807	; 0x68b7
   12b24:	movt	r2, #1
   12b28:	mov	r0, #0
   12b2c:	mov	r1, r5
   12b30:	mov	r3, r4
   12b34:	b	12b58 <__assert_fail@plt+0x1a58>
   12b38:	mov	r0, r6
   12b3c:	bl	14400 <__assert_fail@plt+0x3300>
   12b40:	mov	r3, r0
   12b44:	str	r4, [sp]
   12b48:	movw	r2, #26803	; 0x68b3
   12b4c:	movt	r2, #1
   12b50:	mov	r0, #0
   12b54:	mov	r1, r5
   12b58:	bl	10f98 <error@plt>
   12b5c:	movw	r0, #28916	; 0x70f4
   12b60:	movt	r0, #2
   12b64:	ldr	r0, [r0]
   12b68:	bl	10ee4 <_exit@plt>
   12b6c:	b	10eb4 <posix_fadvise64@plt>
   12b70:	cmp	r0, #0
   12b74:	bxeq	lr
   12b78:	push	{r4, sl, fp, lr}
   12b7c:	add	fp, sp, #8
   12b80:	sub	sp, sp, #16
   12b84:	mov	r4, r1
   12b88:	bl	1104c <fileno@plt>
   12b8c:	mov	r1, #0
   12b90:	str	r1, [sp]
   12b94:	stmib	sp, {r1, r4}
   12b98:	mov	r2, #0
   12b9c:	mov	r3, #0
   12ba0:	bl	12b6c <__assert_fail@plt+0x1a6c>
   12ba4:	sub	sp, fp, #8
   12ba8:	pop	{r4, sl, fp, pc}
   12bac:	push	{r4, r5, fp, lr}
   12bb0:	add	fp, sp, #8
   12bb4:	sub	sp, sp, #8
   12bb8:	mov	r4, r0
   12bbc:	bl	1104c <fileno@plt>
   12bc0:	cmn	r0, #1
   12bc4:	ble	12c3c <__assert_fail@plt+0x1b3c>
   12bc8:	mov	r0, r4
   12bcc:	bl	10fbc <__freading@plt>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c00 <__assert_fail@plt+0x1b00>
   12bd8:	mov	r0, r4
   12bdc:	bl	1104c <fileno@plt>
   12be0:	mov	r1, #1
   12be4:	str	r1, [sp]
   12be8:	mov	r2, #0
   12bec:	mov	r3, #0
   12bf0:	bl	10f5c <lseek64@plt>
   12bf4:	and	r0, r0, r1
   12bf8:	cmn	r0, #1
   12bfc:	beq	12c3c <__assert_fail@plt+0x1b3c>
   12c00:	mov	r0, r4
   12c04:	bl	12c4c <__assert_fail@plt+0x1b4c>
   12c08:	cmp	r0, #0
   12c0c:	beq	12c3c <__assert_fail@plt+0x1b3c>
   12c10:	bl	1101c <__errno_location@plt>
   12c14:	ldr	r5, [r0]
   12c18:	mov	r0, r4
   12c1c:	bl	1107c <fclose@plt>
   12c20:	cmp	r5, #0
   12c24:	beq	12c34 <__assert_fail@plt+0x1b34>
   12c28:	bl	1101c <__errno_location@plt>
   12c2c:	str	r5, [r0]
   12c30:	mvn	r0, #0
   12c34:	sub	sp, fp, #8
   12c38:	pop	{r4, r5, fp, pc}
   12c3c:	mov	r0, r4
   12c40:	sub	sp, fp, #8
   12c44:	pop	{r4, r5, fp, lr}
   12c48:	b	1107c <fclose@plt>
   12c4c:	push	{r4, sl, fp, lr}
   12c50:	add	fp, sp, #8
   12c54:	mov	r4, r0
   12c58:	cmp	r0, #0
   12c5c:	beq	12c74 <__assert_fail@plt+0x1b74>
   12c60:	mov	r0, r4
   12c64:	bl	10fbc <__freading@plt>
   12c68:	cmp	r0, #0
   12c6c:	movne	r0, r4
   12c70:	blne	12c80 <__assert_fail@plt+0x1b80>
   12c74:	mov	r0, r4
   12c78:	pop	{r4, sl, fp, lr}
   12c7c:	b	10ec0 <fflush@plt>
   12c80:	push	{fp, lr}
   12c84:	mov	fp, sp
   12c88:	sub	sp, sp, #8
   12c8c:	ldrb	r1, [r0, #1]
   12c90:	tst	r1, #1
   12c94:	beq	12cac <__assert_fail@plt+0x1bac>
   12c98:	mov	r1, #1
   12c9c:	str	r1, [sp]
   12ca0:	mov	r2, #0
   12ca4:	mov	r3, #0
   12ca8:	bl	12cb4 <__assert_fail@plt+0x1bb4>
   12cac:	mov	sp, fp
   12cb0:	pop	{fp, pc}
   12cb4:	push	{r4, r5, r6, r7, fp, lr}
   12cb8:	add	fp, sp, #16
   12cbc:	sub	sp, sp, #8
   12cc0:	mov	r5, r3
   12cc4:	mov	r6, r2
   12cc8:	mov	r4, r0
   12ccc:	ldr	r0, [r0, #4]
   12cd0:	ldr	r1, [r4, #8]
   12cd4:	cmp	r1, r0
   12cd8:	bne	12cf4 <__assert_fail@plt+0x1bf4>
   12cdc:	ldrd	r0, [r4, #16]
   12ce0:	cmp	r1, r0
   12ce4:	bne	12cf4 <__assert_fail@plt+0x1bf4>
   12ce8:	ldr	r0, [r4, #36]	; 0x24
   12cec:	cmp	r0, #0
   12cf0:	beq	12d0c <__assert_fail@plt+0x1c0c>
   12cf4:	mov	r0, r4
   12cf8:	mov	r2, r6
   12cfc:	mov	r3, r5
   12d00:	sub	sp, fp, #16
   12d04:	pop	{r4, r5, r6, r7, fp, lr}
   12d08:	b	11088 <fseeko64@plt>
   12d0c:	ldr	r7, [fp, #8]
   12d10:	mov	r0, r4
   12d14:	bl	1104c <fileno@plt>
   12d18:	str	r7, [sp]
   12d1c:	mov	r2, r6
   12d20:	mov	r3, r5
   12d24:	bl	10f5c <lseek64@plt>
   12d28:	and	r2, r0, r1
   12d2c:	cmn	r2, #1
   12d30:	beq	12d50 <__assert_fail@plt+0x1c50>
   12d34:	strd	r0, [r4, #80]	; 0x50
   12d38:	ldr	r0, [r4]
   12d3c:	bic	r0, r0, #16
   12d40:	str	r0, [r4]
   12d44:	mov	r0, #0
   12d48:	sub	sp, fp, #16
   12d4c:	pop	{r4, r5, r6, r7, fp, pc}
   12d50:	mvn	r0, #0
   12d54:	sub	sp, fp, #16
   12d58:	pop	{r4, r5, r6, r7, fp, pc}
   12d5c:	push	{r4, r5, fp, lr}
   12d60:	add	fp, sp, #8
   12d64:	cmp	r0, #0
   12d68:	beq	12dfc <__assert_fail@plt+0x1cfc>
   12d6c:	mov	r4, r0
   12d70:	mov	r1, #47	; 0x2f
   12d74:	bl	110a0 <strrchr@plt>
   12d78:	cmp	r0, #0
   12d7c:	mov	r5, r4
   12d80:	addne	r5, r0, #1
   12d84:	sub	r0, r5, r4
   12d88:	cmp	r0, #7
   12d8c:	blt	12de0 <__assert_fail@plt+0x1ce0>
   12d90:	sub	r0, r5, #7
   12d94:	movw	r1, #26866	; 0x68f2
   12d98:	movt	r1, #1
   12d9c:	mov	r2, #7
   12da0:	bl	110dc <strncmp@plt>
   12da4:	cmp	r0, #0
   12da8:	bne	12de0 <__assert_fail@plt+0x1ce0>
   12dac:	movw	r1, #26874	; 0x68fa
   12db0:	movt	r1, #1
   12db4:	mov	r0, r5
   12db8:	mov	r2, #3
   12dbc:	bl	110dc <strncmp@plt>
   12dc0:	cmp	r0, #0
   12dc4:	beq	12dd0 <__assert_fail@plt+0x1cd0>
   12dc8:	mov	r4, r5
   12dcc:	b	12de0 <__assert_fail@plt+0x1ce0>
   12dd0:	add	r4, r5, #3
   12dd4:	movw	r0, #28984	; 0x7138
   12dd8:	movt	r0, #2
   12ddc:	str	r4, [r0]
   12de0:	movw	r0, #28988	; 0x713c
   12de4:	movt	r0, #2
   12de8:	str	r4, [r0]
   12dec:	movw	r0, #62108	; 0xf29c
   12df0:	movt	r0, #2
   12df4:	str	r4, [r0]
   12df8:	pop	{r4, r5, fp, pc}
   12dfc:	movw	r0, #29000	; 0x7148
   12e00:	movt	r0, #2
   12e04:	ldr	r3, [r0]
   12e08:	movw	r0, #26810	; 0x68ba
   12e0c:	movt	r0, #1
   12e10:	mov	r1, #55	; 0x37
   12e14:	mov	r2, #1
   12e18:	bl	10f50 <fwrite@plt>
   12e1c:	bl	110e8 <abort@plt>
   12e20:	push	{r4, r5, r6, sl, fp, lr}
   12e24:	add	fp, sp, #16
   12e28:	mov	r4, r0
   12e2c:	movw	r0, #62112	; 0xf2a0
   12e30:	movt	r0, #2
   12e34:	cmp	r4, #0
   12e38:	moveq	r4, r0
   12e3c:	bl	1101c <__errno_location@plt>
   12e40:	mov	r5, r0
   12e44:	ldr	r6, [r0]
   12e48:	mov	r0, r4
   12e4c:	mov	r1, #48	; 0x30
   12e50:	bl	15118 <__assert_fail@plt+0x4018>
   12e54:	str	r6, [r5]
   12e58:	pop	{r4, r5, r6, sl, fp, pc}
   12e5c:	movw	r1, #62112	; 0xf2a0
   12e60:	movt	r1, #2
   12e64:	cmp	r0, #0
   12e68:	movne	r1, r0
   12e6c:	ldr	r0, [r1]
   12e70:	bx	lr
   12e74:	movw	r2, #62112	; 0xf2a0
   12e78:	movt	r2, #2
   12e7c:	cmp	r0, #0
   12e80:	movne	r2, r0
   12e84:	str	r1, [r2]
   12e88:	bx	lr
   12e8c:	movw	r3, #62112	; 0xf2a0
   12e90:	movt	r3, #2
   12e94:	cmp	r0, #0
   12e98:	movne	r3, r0
   12e9c:	ubfx	r0, r1, #5, #3
   12ea0:	add	ip, r3, r0, lsl #2
   12ea4:	ldr	r3, [ip, #8]
   12ea8:	and	r1, r1, #31
   12eac:	mov	r0, #1
   12eb0:	and	r0, r0, r3, lsr r1
   12eb4:	and	r2, r2, #1
   12eb8:	eor	r2, r0, r2
   12ebc:	eor	r1, r3, r2, lsl r1
   12ec0:	str	r1, [ip, #8]
   12ec4:	bx	lr
   12ec8:	movw	r2, #62112	; 0xf2a0
   12ecc:	movt	r2, #2
   12ed0:	cmp	r0, #0
   12ed4:	movne	r2, r0
   12ed8:	ldr	r0, [r2, #4]
   12edc:	str	r1, [r2, #4]
   12ee0:	bx	lr
   12ee4:	push	{fp, lr}
   12ee8:	mov	fp, sp
   12eec:	movw	r3, #62112	; 0xf2a0
   12ef0:	movt	r3, #2
   12ef4:	cmp	r0, #0
   12ef8:	movne	r3, r0
   12efc:	mov	r0, #10
   12f00:	str	r0, [r3]
   12f04:	cmp	r1, #0
   12f08:	cmpne	r2, #0
   12f0c:	bne	12f14 <__assert_fail@plt+0x1e14>
   12f10:	bl	110e8 <abort@plt>
   12f14:	str	r1, [r3, #40]	; 0x28
   12f18:	str	r2, [r3, #44]	; 0x2c
   12f1c:	pop	{fp, pc}
   12f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f24:	add	fp, sp, #28
   12f28:	sub	sp, sp, #20
   12f2c:	mov	r8, r3
   12f30:	mov	r9, r2
   12f34:	mov	sl, r1
   12f38:	mov	r7, r0
   12f3c:	ldr	r0, [fp, #8]
   12f40:	movw	r5, #62112	; 0xf2a0
   12f44:	movt	r5, #2
   12f48:	cmp	r0, #0
   12f4c:	movne	r5, r0
   12f50:	bl	1101c <__errno_location@plt>
   12f54:	mov	r4, r0
   12f58:	ldm	r5, {r0, r1}
   12f5c:	ldr	r2, [r5, #40]	; 0x28
   12f60:	ldr	r3, [r5, #44]	; 0x2c
   12f64:	ldr	r6, [r4]
   12f68:	add	r5, r5, #8
   12f6c:	stm	sp, {r0, r1, r5}
   12f70:	str	r2, [sp, #12]
   12f74:	str	r3, [sp, #16]
   12f78:	mov	r0, r7
   12f7c:	mov	r1, sl
   12f80:	mov	r2, r9
   12f84:	mov	r3, r8
   12f88:	bl	12f98 <__assert_fail@plt+0x1e98>
   12f8c:	str	r6, [r4]
   12f90:	sub	sp, fp, #28
   12f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f9c:	add	fp, sp, #28
   12fa0:	sub	sp, sp, #156	; 0x9c
   12fa4:	mov	r9, r3
   12fa8:	mov	r7, r1
   12fac:	mov	r6, r0
   12fb0:	str	r2, [fp, #-80]	; 0xffffffb0
   12fb4:	add	r0, r2, #1
   12fb8:	str	r0, [sp, #76]	; 0x4c
   12fbc:	ldr	r0, [fp, #12]
   12fc0:	and	r1, r0, #1
   12fc4:	str	r1, [sp, #40]	; 0x28
   12fc8:	and	r1, r0, #4
   12fcc:	str	r1, [sp, #36]	; 0x24
   12fd0:	ubfx	r4, r0, #1, #1
   12fd4:	bl	10f68 <__ctype_get_mb_cur_max@plt>
   12fd8:	str	r0, [sp, #44]	; 0x2c
   12fdc:	ldr	r0, [fp, #24]
   12fe0:	str	r0, [sp, #88]	; 0x58
   12fe4:	ldr	r0, [fp, #20]
   12fe8:	str	r0, [sp, #80]	; 0x50
   12fec:	ldr	r1, [fp, #8]
   12ff0:	mov	r0, #0
   12ff4:	str	r0, [sp, #84]	; 0x54
   12ff8:	mov	r0, #0
   12ffc:	str	r0, [fp, #-84]	; 0xffffffac
   13000:	mov	r0, #0
   13004:	str	r0, [fp, #-72]	; 0xffffffb8
   13008:	mov	r0, #0
   1300c:	mov	r2, #0
   13010:	str	r2, [fp, #-56]	; 0xffffffc8
   13014:	mov	r2, #0
   13018:	str	r2, [sp, #64]	; 0x40
   1301c:	mov	r2, #1
   13020:	str	r2, [fp, #-48]	; 0xffffffd0
   13024:	cmp	r1, #10
   13028:	bhi	13f54 <__assert_fail@plt+0x2e54>
   1302c:	mov	sl, r7
   13030:	mov	r7, r1
   13034:	add	r1, pc, #24
   13038:	mov	r8, #0
   1303c:	mov	r2, #1
   13040:	mov	r3, #0
   13044:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13048:	mov	lr, r9
   1304c:	mov	r5, r6
   13050:	ldr	pc, [r1, r7, lsl #2]
   13054:	andeq	r3, r1, r8, lsr #2
   13058:	andeq	r3, r1, r8, ror #2
   1305c:	andeq	r3, r1, r8, lsr r1
   13060:	andeq	r3, r1, r0, lsr #2
   13064:	andeq	r3, r1, ip, asr r1
   13068:			; <UNDEFINED> instruction: 0x000131bc
   1306c:	andeq	r3, r1, r8, asr #2
   13070:	andeq	r3, r1, r8, lsl r2
   13074:	andeq	r3, r1, r0, lsl #1
   13078:	andeq	r3, r1, r0, lsl #1
   1307c:	andeq	r3, r1, ip, lsr #1
   13080:	movw	r0, #26954	; 0x694a
   13084:	movt	r0, #1
   13088:	mov	r1, r7
   1308c:	bl	1455c <__assert_fail@plt+0x345c>
   13090:	str	r0, [sp, #80]	; 0x50
   13094:	movw	r0, #26956	; 0x694c
   13098:	movt	r0, #1
   1309c:	mov	r1, r7
   130a0:	bl	1455c <__assert_fail@plt+0x345c>
   130a4:	mov	r5, r6
   130a8:	str	r0, [sp, #88]	; 0x58
   130ac:	mov	r8, #0
   130b0:	tst	r4, #1
   130b4:	str	r7, [fp, #-64]	; 0xffffffc0
   130b8:	bne	130f0 <__assert_fail@plt+0x1ff0>
   130bc:	ldr	r0, [sp, #80]	; 0x50
   130c0:	ldrb	r0, [r0]
   130c4:	cmp	r0, #0
   130c8:	beq	130f0 <__assert_fail@plt+0x1ff0>
   130cc:	ldr	r1, [sp, #80]	; 0x50
   130d0:	add	r1, r1, #1
   130d4:	mov	r8, #0
   130d8:	cmp	r8, sl
   130dc:	strbcc	r0, [r5, r8]
   130e0:	ldrb	r0, [r1, r8]
   130e4:	add	r8, r8, #1
   130e8:	cmp	r0, #0
   130ec:	bne	130d8 <__assert_fail@plt+0x1fd8>
   130f0:	ldr	r7, [sp, #88]	; 0x58
   130f4:	mov	r0, r7
   130f8:	bl	11004 <strlen@plt>
   130fc:	mov	r5, r6
   13100:	str	r0, [fp, #-72]	; 0xffffffb8
   13104:	str	r7, [fp, #-84]	; 0xffffffac
   13108:	mov	r2, #1
   1310c:	mov	r3, r4
   13110:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13114:	mov	lr, r9
   13118:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1311c:	b	13218 <__assert_fail@plt+0x2118>
   13120:	mov	r0, #1
   13124:	b	13168 <__assert_fail@plt+0x2068>
   13128:	mov	r7, #0
   1312c:	mov	r8, #0
   13130:	mov	r2, r0
   13134:	b	13214 <__assert_fail@plt+0x2114>
   13138:	tst	r4, #1
   1313c:	bne	13168 <__assert_fail@plt+0x2068>
   13140:	mov	r2, r0
   13144:	b	13190 <__assert_fail@plt+0x2090>
   13148:	mov	r0, #1
   1314c:	str	r0, [fp, #-72]	; 0xffffffb8
   13150:	mov	r8, #0
   13154:	mov	r7, #5
   13158:	b	131d4 <__assert_fail@plt+0x20d4>
   1315c:	mov	r2, #1
   13160:	tst	r4, #1
   13164:	beq	13190 <__assert_fail@plt+0x2090>
   13168:	mov	r1, #1
   1316c:	str	r1, [fp, #-72]	; 0xffffffb8
   13170:	mov	r8, #0
   13174:	mov	r7, #2
   13178:	movw	r1, #26956	; 0x694c
   1317c:	movt	r1, #1
   13180:	str	r1, [fp, #-84]	; 0xffffffac
   13184:	mov	r2, r0
   13188:	mov	r3, #1
   1318c:	b	13218 <__assert_fail@plt+0x2118>
   13190:	mov	r8, #1
   13194:	mov	r7, #2
   13198:	cmp	sl, #0
   1319c:	movne	r0, #39	; 0x27
   131a0:	strbne	r0, [r5]
   131a4:	movw	r0, #26956	; 0x694c
   131a8:	movt	r0, #1
   131ac:	str	r0, [fp, #-84]	; 0xffffffac
   131b0:	mov	r0, #1
   131b4:	str	r0, [fp, #-72]	; 0xffffffb8
   131b8:	b	13214 <__assert_fail@plt+0x2114>
   131bc:	mov	r7, #5
   131c0:	tst	r4, #1
   131c4:	beq	131ec <__assert_fail@plt+0x20ec>
   131c8:	mov	r0, #1
   131cc:	str	r0, [fp, #-72]	; 0xffffffb8
   131d0:	mov	r8, #0
   131d4:	movw	r0, #26552	; 0x67b8
   131d8:	movt	r0, #1
   131dc:	str	r0, [fp, #-84]	; 0xffffffac
   131e0:	mov	r2, #1
   131e4:	mov	r3, #1
   131e8:	b	13218 <__assert_fail@plt+0x2118>
   131ec:	cmp	sl, #0
   131f0:	movne	r0, #34	; 0x22
   131f4:	strbne	r0, [r5]
   131f8:	mov	r8, #1
   131fc:	movw	r0, #26552	; 0x67b8
   13200:	movt	r0, #1
   13204:	str	r0, [fp, #-84]	; 0xffffffac
   13208:	mov	r0, #1
   1320c:	str	r0, [fp, #-72]	; 0xffffffb8
   13210:	mov	r2, #1
   13214:	mov	r3, #0
   13218:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1321c:	cmp	r0, #0
   13220:	movwne	r0, #1
   13224:	and	r1, r0, r3
   13228:	and	r1, r2, r1
   1322c:	str	r1, [sp, #56]	; 0x38
   13230:	sub	r1, r7, #2
   13234:	clz	r1, r1
   13238:	lsr	r1, r1, #5
   1323c:	and	r1, r1, r3
   13240:	str	r1, [sp, #68]	; 0x44
   13244:	str	r7, [fp, #-64]	; 0xffffffc0
   13248:	subs	r1, r7, #2
   1324c:	movwne	r1, #1
   13250:	eor	r4, r3, #1
   13254:	str	r4, [fp, #-88]	; 0xffffffa8
   13258:	orr	r4, r1, r4
   1325c:	str	r4, [sp, #72]	; 0x48
   13260:	and	r1, r1, r2
   13264:	and	r0, r0, r1
   13268:	str	r0, [fp, #-60]	; 0xffffffc4
   1326c:	str	r3, [fp, #-76]	; 0xffffffb4
   13270:	orr	r0, r1, r3
   13274:	eor	r0, r0, #1
   13278:	ldr	r1, [fp, #16]
   1327c:	clz	r1, r1
   13280:	lsr	r1, r1, #5
   13284:	orr	r0, r1, r0
   13288:	str	r0, [fp, #-68]	; 0xffffffbc
   1328c:	str	r2, [sp, #92]	; 0x5c
   13290:	eor	r0, r2, #1
   13294:	str	r0, [sp, #60]	; 0x3c
   13298:	mov	r7, #0
   1329c:	cmn	lr, #1
   132a0:	beq	132b0 <__assert_fail@plt+0x21b0>
   132a4:	cmp	r7, lr
   132a8:	bne	132bc <__assert_fail@plt+0x21bc>
   132ac:	b	13dc8 <__assert_fail@plt+0x2cc8>
   132b0:	ldrb	r0, [ip, r7]
   132b4:	cmp	r0, #0
   132b8:	beq	13dc8 <__assert_fail@plt+0x2cc8>
   132bc:	mov	r9, #0
   132c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   132c4:	cmp	r0, #0
   132c8:	beq	132fc <__assert_fail@plt+0x21fc>
   132cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132d0:	add	r4, r7, r0
   132d4:	cmp	r0, #2
   132d8:	bcc	132f4 <__assert_fail@plt+0x21f4>
   132dc:	cmn	lr, #1
   132e0:	bne	132f4 <__assert_fail@plt+0x21f4>
   132e4:	mov	r0, ip
   132e8:	bl	11004 <strlen@plt>
   132ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132f0:	mov	lr, r0
   132f4:	cmp	r4, lr
   132f8:	bls	13308 <__assert_fail@plt+0x2208>
   132fc:	mov	r0, #0
   13300:	str	r0, [fp, #-52]	; 0xffffffcc
   13304:	b	1334c <__assert_fail@plt+0x224c>
   13308:	mov	r4, lr
   1330c:	add	r0, ip, r7
   13310:	ldr	r1, [fp, #-84]	; 0xffffffac
   13314:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13318:	bl	10ff8 <bcmp@plt>
   1331c:	cmp	r0, #0
   13320:	mov	r1, r0
   13324:	movwne	r1, #1
   13328:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1332c:	orr	r1, r1, r2
   13330:	tst	r1, #1
   13334:	beq	13e9c <__assert_fail@plt+0x2d9c>
   13338:	clz	r0, r0
   1333c:	lsr	r0, r0, #5
   13340:	str	r0, [fp, #-52]	; 0xffffffcc
   13344:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13348:	mov	lr, r4
   1334c:	ldrb	r4, [ip, r7]
   13350:	cmp	r4, #126	; 0x7e
   13354:	bhi	13884 <__assert_fail@plt+0x2784>
   13358:	mov	r6, #1
   1335c:	mov	r2, #110	; 0x6e
   13360:	mov	r0, #97	; 0x61
   13364:	add	r3, pc, #4
   13368:	mov	r1, #0
   1336c:	ldr	pc, [r3, r4, lsl #2]
   13370:	andeq	r3, r1, r4, ror #13
   13374:	andeq	r3, r1, r4, lsl #17
   13378:	andeq	r3, r1, r4, lsl #17
   1337c:	andeq	r3, r1, r4, lsl #17
   13380:	andeq	r3, r1, r4, lsl #17
   13384:	andeq	r3, r1, r4, lsl #17
   13388:	andeq	r3, r1, r4, lsl #17
   1338c:	andeq	r3, r1, r8, asr r9
   13390:	andeq	r3, r1, r4, asr #13
   13394:			; <UNDEFINED> instruction: 0x000136bc
   13398:	ldrdeq	r3, [r1], -r0
   1339c:	andeq	r3, r1, ip, ror #15
   133a0:			; <UNDEFINED> instruction: 0x000136b4
   133a4:	andeq	r3, r1, ip, asr #13
   133a8:	andeq	r3, r1, r4, lsl #17
   133ac:	andeq	r3, r1, r4, lsl #17
   133b0:	andeq	r3, r1, r4, lsl #17
   133b4:	andeq	r3, r1, r4, lsl #17
   133b8:	andeq	r3, r1, r4, lsl #17
   133bc:	andeq	r3, r1, r4, lsl #17
   133c0:	andeq	r3, r1, r4, lsl #17
   133c4:	andeq	r3, r1, r4, lsl #17
   133c8:	andeq	r3, r1, r4, lsl #17
   133cc:	andeq	r3, r1, r4, lsl #17
   133d0:	andeq	r3, r1, r4, lsl #17
   133d4:	andeq	r3, r1, r4, lsl #17
   133d8:	andeq	r3, r1, r4, lsl #17
   133dc:	andeq	r3, r1, r4, lsl #17
   133e0:	andeq	r3, r1, r4, lsl #17
   133e4:	andeq	r3, r1, r4, lsl #17
   133e8:	andeq	r3, r1, r4, lsl #17
   133ec:	andeq	r3, r1, r4, lsl #17
   133f0:	andeq	r3, r1, r8, ror #12
   133f4:	andeq	r3, r1, ip, ror #12
   133f8:	andeq	r3, r1, ip, ror #12
   133fc:	andeq	r3, r1, r4, asr r6
   13400:	andeq	r3, r1, ip, ror #12
   13404:	andeq	r3, r1, ip, ror #10
   13408:	andeq	r3, r1, ip, ror #12
   1340c:	strdeq	r3, [r1], -r4
   13410:	andeq	r3, r1, ip, ror #12
   13414:	andeq	r3, r1, ip, ror #12
   13418:	andeq	r3, r1, ip, ror #12
   1341c:	andeq	r3, r1, ip, ror #10
   13420:	andeq	r3, r1, ip, ror #10
   13424:	andeq	r3, r1, ip, ror #10
   13428:	andeq	r3, r1, ip, ror #10
   1342c:	andeq	r3, r1, ip, ror #10
   13430:	andeq	r3, r1, ip, ror #10
   13434:	andeq	r3, r1, ip, ror #10
   13438:	andeq	r3, r1, ip, ror #10
   1343c:	andeq	r3, r1, ip, ror #10
   13440:	andeq	r3, r1, ip, ror #10
   13444:	andeq	r3, r1, ip, ror #10
   13448:	andeq	r3, r1, ip, ror #10
   1344c:	andeq	r3, r1, ip, ror #10
   13450:	andeq	r3, r1, ip, ror #10
   13454:	andeq	r3, r1, ip, ror #10
   13458:	andeq	r3, r1, ip, ror #10
   1345c:	andeq	r3, r1, ip, ror #12
   13460:	andeq	r3, r1, ip, ror #12
   13464:	andeq	r3, r1, ip, ror #12
   13468:	andeq	r3, r1, ip, ror #12
   1346c:			; <UNDEFINED> instruction: 0x000137bc
   13470:	andeq	r3, r1, r4, lsl #17
   13474:	andeq	r3, r1, ip, ror #10
   13478:	andeq	r3, r1, ip, ror #10
   1347c:	andeq	r3, r1, ip, ror #10
   13480:	andeq	r3, r1, ip, ror #10
   13484:	andeq	r3, r1, ip, ror #10
   13488:	andeq	r3, r1, ip, ror #10
   1348c:	andeq	r3, r1, ip, ror #10
   13490:	andeq	r3, r1, ip, ror #10
   13494:	andeq	r3, r1, ip, ror #10
   13498:	andeq	r3, r1, ip, ror #10
   1349c:	andeq	r3, r1, ip, ror #10
   134a0:	andeq	r3, r1, ip, ror #10
   134a4:	andeq	r3, r1, ip, ror #10
   134a8:	andeq	r3, r1, ip, ror #10
   134ac:	andeq	r3, r1, ip, ror #10
   134b0:	andeq	r3, r1, ip, ror #10
   134b4:	andeq	r3, r1, ip, ror #10
   134b8:	andeq	r3, r1, ip, ror #10
   134bc:	andeq	r3, r1, ip, ror #10
   134c0:	andeq	r3, r1, ip, ror #10
   134c4:	andeq	r3, r1, ip, ror #10
   134c8:	andeq	r3, r1, ip, ror #10
   134cc:	andeq	r3, r1, ip, ror #10
   134d0:	andeq	r3, r1, ip, ror #10
   134d4:	andeq	r3, r1, ip, ror #10
   134d8:	andeq	r3, r1, ip, ror #10
   134dc:	andeq	r3, r1, ip, ror #12
   134e0:	muleq	r1, r4, r6
   134e4:	andeq	r3, r1, ip, ror #10
   134e8:	andeq	r3, r1, ip, ror #12
   134ec:	andeq	r3, r1, ip, ror #10
   134f0:	andeq	r3, r1, ip, ror #12
   134f4:	andeq	r3, r1, ip, ror #10
   134f8:	andeq	r3, r1, ip, ror #10
   134fc:	andeq	r3, r1, ip, ror #10
   13500:	andeq	r3, r1, ip, ror #10
   13504:	andeq	r3, r1, ip, ror #10
   13508:	andeq	r3, r1, ip, ror #10
   1350c:	andeq	r3, r1, ip, ror #10
   13510:	andeq	r3, r1, ip, ror #10
   13514:	andeq	r3, r1, ip, ror #10
   13518:	andeq	r3, r1, ip, ror #10
   1351c:	andeq	r3, r1, ip, ror #10
   13520:	andeq	r3, r1, ip, ror #10
   13524:	andeq	r3, r1, ip, ror #10
   13528:	andeq	r3, r1, ip, ror #10
   1352c:	andeq	r3, r1, ip, ror #10
   13530:	andeq	r3, r1, ip, ror #10
   13534:	andeq	r3, r1, ip, ror #10
   13538:	andeq	r3, r1, ip, ror #10
   1353c:	andeq	r3, r1, ip, ror #10
   13540:	andeq	r3, r1, ip, ror #10
   13544:	andeq	r3, r1, ip, ror #10
   13548:	andeq	r3, r1, ip, ror #10
   1354c:	andeq	r3, r1, ip, ror #10
   13550:	andeq	r3, r1, ip, ror #10
   13554:	andeq	r3, r1, ip, ror #10
   13558:	andeq	r3, r1, ip, ror #10
   1355c:	andeq	r3, r1, r8, lsr #12
   13560:	andeq	r3, r1, ip, ror #12
   13564:	andeq	r3, r1, r8, lsr #12
   13568:	andeq	r3, r1, r4, asr r6
   1356c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13570:	tst	r0, #1
   13574:	bne	135a0 <__assert_fail@plt+0x24a0>
   13578:	ubfx	r0, r4, #5, #3
   1357c:	ldr	r1, [fp, #16]
   13580:	ldr	r0, [r1, r0, lsl #2]
   13584:	and	r1, r4, #31
   13588:	mov	r2, #1
   1358c:	tst	r0, r2, lsl r1
   13590:	beq	135a0 <__assert_fail@plt+0x24a0>
   13594:	mov	r0, r4
   13598:	mov	r1, r6
   1359c:	b	135b4 <__assert_fail@plt+0x24b4>
   135a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   135a4:	cmp	r0, #0
   135a8:	mov	r0, r4
   135ac:	mov	r1, r6
   135b0:	beq	138ec <__assert_fail@plt+0x27ec>
   135b4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135b8:	tst	r2, #1
   135bc:	bne	13eb0 <__assert_fail@plt+0x2db0>
   135c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   135c4:	subs	r2, r2, #2
   135c8:	movwne	r2, #1
   135cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   135d0:	orr	r2, r2, r3
   135d4:	tst	r2, #1
   135d8:	bne	13614 <__assert_fail@plt+0x2514>
   135dc:	cmp	r8, sl
   135e0:	movcc	r2, #39	; 0x27
   135e4:	strbcc	r2, [r5, r8]
   135e8:	add	r2, r8, #1
   135ec:	cmp	r2, sl
   135f0:	movcc	r3, #36	; 0x24
   135f4:	strbcc	r3, [r5, r2]
   135f8:	add	r2, r8, #2
   135fc:	cmp	r2, sl
   13600:	movcc	r3, #39	; 0x27
   13604:	strbcc	r3, [r5, r2]
   13608:	add	r8, r8, #3
   1360c:	mov	r2, #1
   13610:	str	r2, [fp, #-56]	; 0xffffffc8
   13614:	cmp	r8, sl
   13618:	movcc	r2, #92	; 0x5c
   1361c:	strbcc	r2, [r5, r8]
   13620:	add	r8, r8, #1
   13624:	b	13930 <__assert_fail@plt+0x2830>
   13628:	cmp	lr, #1
   1362c:	beq	13654 <__assert_fail@plt+0x2554>
   13630:	mov	r6, #0
   13634:	cmn	lr, #1
   13638:	bne	13660 <__assert_fail@plt+0x2560>
   1363c:	ldrb	r0, [ip, #1]
   13640:	cmp	r0, #0
   13644:	beq	13654 <__assert_fail@plt+0x2554>
   13648:	mvn	lr, #0
   1364c:	mov	r9, #0
   13650:	b	1356c <__assert_fail@plt+0x246c>
   13654:	mov	r6, #0
   13658:	cmp	r7, #0
   1365c:	beq	13668 <__assert_fail@plt+0x2568>
   13660:	mov	r9, #0
   13664:	b	1356c <__assert_fail@plt+0x246c>
   13668:	mov	r1, #1
   1366c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13670:	cmp	r0, #2
   13674:	bne	1368c <__assert_fail@plt+0x258c>
   13678:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1367c:	tst	r0, #1
   13680:	mov	r6, r1
   13684:	beq	1356c <__assert_fail@plt+0x246c>
   13688:	b	13eb0 <__assert_fail@plt+0x2db0>
   1368c:	mov	r6, r1
   13690:	b	1356c <__assert_fail@plt+0x246c>
   13694:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13698:	cmp	r0, #2
   1369c:	bne	138d0 <__assert_fail@plt+0x27d0>
   136a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136a4:	tst	r0, #1
   136a8:	bne	13eb0 <__assert_fail@plt+0x2db0>
   136ac:	mov	r9, #0
   136b0:	b	138e4 <__assert_fail@plt+0x27e4>
   136b4:	mov	r0, #102	; 0x66
   136b8:	b	13958 <__assert_fail@plt+0x2858>
   136bc:	mov	r2, #116	; 0x74
   136c0:	b	136d0 <__assert_fail@plt+0x25d0>
   136c4:	mov	r0, #98	; 0x62
   136c8:	b	13958 <__assert_fail@plt+0x2858>
   136cc:	mov	r2, #114	; 0x72
   136d0:	ldr	r0, [sp, #72]	; 0x48
   136d4:	tst	r0, #1
   136d8:	mov	r0, r2
   136dc:	bne	13958 <__assert_fail@plt+0x2858>
   136e0:	b	13eb0 <__assert_fail@plt+0x2db0>
   136e4:	ldr	r0, [sp, #92]	; 0x5c
   136e8:	tst	r0, #1
   136ec:	beq	13974 <__assert_fail@plt+0x2874>
   136f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136f4:	tst	r0, #1
   136f8:	bne	13eb0 <__assert_fail@plt+0x2db0>
   136fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13700:	subs	r0, r0, #2
   13704:	movwne	r0, #1
   13708:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1370c:	orr	r0, r0, r1
   13710:	tst	r0, #1
   13714:	bne	13750 <__assert_fail@plt+0x2650>
   13718:	cmp	r8, sl
   1371c:	movcc	r0, #39	; 0x27
   13720:	strbcc	r0, [r5, r8]
   13724:	add	r0, r8, #1
   13728:	cmp	r0, sl
   1372c:	movcc	r1, #36	; 0x24
   13730:	strbcc	r1, [r5, r0]
   13734:	add	r0, r8, #2
   13738:	cmp	r0, sl
   1373c:	movcc	r1, #39	; 0x27
   13740:	strbcc	r1, [r5, r0]
   13744:	add	r8, r8, #3
   13748:	mov	r0, #1
   1374c:	str	r0, [fp, #-56]	; 0xffffffc8
   13750:	cmp	r8, sl
   13754:	movcc	r0, #92	; 0x5c
   13758:	strbcc	r0, [r5, r8]
   1375c:	add	r0, r8, #1
   13760:	mov	r6, #0
   13764:	mov	r9, #1
   13768:	mov	r4, #48	; 0x30
   1376c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13770:	cmp	r1, #2
   13774:	beq	13b38 <__assert_fail@plt+0x2a38>
   13778:	add	r1, r7, #1
   1377c:	cmp	r1, lr
   13780:	bcs	13b38 <__assert_fail@plt+0x2a38>
   13784:	ldrb	r1, [ip, r1]
   13788:	sub	r1, r1, #48	; 0x30
   1378c:	uxtb	r1, r1
   13790:	cmp	r1, #9
   13794:	bhi	13b38 <__assert_fail@plt+0x2a38>
   13798:	cmp	r0, sl
   1379c:	movcc	r1, #48	; 0x30
   137a0:	strbcc	r1, [r5, r0]
   137a4:	add	r0, r8, #2
   137a8:	cmp	r0, sl
   137ac:	movcc	r1, #48	; 0x30
   137b0:	strbcc	r1, [r5, r0]
   137b4:	add	r8, r8, #3
   137b8:	b	1356c <__assert_fail@plt+0x246c>
   137bc:	mov	r9, #0
   137c0:	mov	r4, #63	; 0x3f
   137c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137c8:	cmp	r0, #5
   137cc:	beq	13b40 <__assert_fail@plt+0x2a40>
   137d0:	cmp	r0, #2
   137d4:	bne	13be8 <__assert_fail@plt+0x2ae8>
   137d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137dc:	tst	r0, #1
   137e0:	mov	r6, #0
   137e4:	beq	1356c <__assert_fail@plt+0x246c>
   137e8:	b	13eb0 <__assert_fail@plt+0x2db0>
   137ec:	mov	r0, #118	; 0x76
   137f0:	b	13958 <__assert_fail@plt+0x2858>
   137f4:	mov	r4, #39	; 0x27
   137f8:	mov	r0, #1
   137fc:	str	r0, [sp, #64]	; 0x40
   13800:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13804:	cmp	r0, #2
   13808:	bne	13990 <__assert_fail@plt+0x2890>
   1380c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13810:	tst	r0, #1
   13814:	bne	13eb0 <__assert_fail@plt+0x2db0>
   13818:	ldr	r2, [sp, #84]	; 0x54
   1381c:	cmp	r2, #0
   13820:	mov	r0, r2
   13824:	movwne	r0, #1
   13828:	clz	r1, sl
   1382c:	lsr	r1, r1, #5
   13830:	orrs	r0, r0, r1
   13834:	moveq	r2, sl
   13838:	str	r2, [sp, #84]	; 0x54
   1383c:	moveq	sl, r0
   13840:	cmp	r8, sl
   13844:	movcc	r0, #39	; 0x27
   13848:	strbcc	r0, [r5, r8]
   1384c:	add	r0, r8, #1
   13850:	cmp	r0, sl
   13854:	movcc	r1, #92	; 0x5c
   13858:	strbcc	r1, [r5, r0]
   1385c:	add	r0, r8, #2
   13860:	cmp	r0, sl
   13864:	movcc	r1, #39	; 0x27
   13868:	strbcc	r1, [r5, r0]
   1386c:	add	r8, r8, #3
   13870:	mov	r0, #0
   13874:	str	r0, [fp, #-56]	; 0xffffffc8
   13878:	mov	r9, #0
   1387c:	mov	r6, #1
   13880:	b	1356c <__assert_fail@plt+0x246c>
   13884:	ldr	r0, [sp, #44]	; 0x2c
   13888:	cmp	r0, #1
   1388c:	bne	13998 <__assert_fail@plt+0x2898>
   13890:	str	lr, [sp, #32]
   13894:	bl	10fe0 <__ctype_b_loc@plt>
   13898:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1389c:	ldr	r0, [r0]
   138a0:	add	r0, r0, r4, lsl #1
   138a4:	ldrb	r0, [r0, #1]
   138a8:	ubfx	r6, r0, #6, #1
   138ac:	mov	r2, #1
   138b0:	ldr	r0, [sp, #60]	; 0x3c
   138b4:	orr	r1, r6, r0
   138b8:	cmp	r2, #1
   138bc:	bhi	13bf0 <__assert_fail@plt+0x2af0>
   138c0:	tst	r1, #1
   138c4:	beq	13bf0 <__assert_fail@plt+0x2af0>
   138c8:	ldr	lr, [sp, #32]
   138cc:	b	1356c <__assert_fail@plt+0x246c>
   138d0:	mov	r9, #0
   138d4:	mov	r0, #92	; 0x5c
   138d8:	ldr	r1, [sp, #56]	; 0x38
   138dc:	cmp	r1, #0
   138e0:	beq	13958 <__assert_fail@plt+0x2858>
   138e4:	mov	r4, #92	; 0x5c
   138e8:	mov	r6, #0
   138ec:	cmp	r9, #0
   138f0:	bne	13928 <__assert_fail@plt+0x2828>
   138f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   138f8:	tst	r0, #1
   138fc:	beq	13928 <__assert_fail@plt+0x2828>
   13900:	cmp	r8, sl
   13904:	movcc	r0, #39	; 0x27
   13908:	strbcc	r0, [r5, r8]
   1390c:	add	r0, r8, #1
   13910:	cmp	r0, sl
   13914:	movcc	r1, #39	; 0x27
   13918:	strbcc	r1, [r5, r0]
   1391c:	add	r8, r8, #2
   13920:	mov	r0, #0
   13924:	str	r0, [fp, #-56]	; 0xffffffc8
   13928:	mov	r1, r6
   1392c:	mov	r0, r4
   13930:	cmp	r8, sl
   13934:	strbcc	r0, [r5, r8]
   13938:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1393c:	and	r0, r0, r1
   13940:	str	r0, [fp, #-48]	; 0xffffffd0
   13944:	add	r8, r8, #1
   13948:	add	r7, r7, #1
   1394c:	cmn	lr, #1
   13950:	bne	132a4 <__assert_fail@plt+0x21a4>
   13954:	b	132b0 <__assert_fail@plt+0x21b0>
   13958:	mov	r9, #0
   1395c:	ldr	r1, [sp, #92]	; 0x5c
   13960:	tst	r1, #1
   13964:	mov	r6, #0
   13968:	mov	r1, #0
   1396c:	beq	1356c <__assert_fail@plt+0x246c>
   13970:	b	135b4 <__assert_fail@plt+0x24b4>
   13974:	mov	r4, #0
   13978:	ldr	r0, [sp, #40]	; 0x28
   1397c:	cmp	r0, #0
   13980:	mov	r9, #0
   13984:	mov	r6, #0
   13988:	beq	1356c <__assert_fail@plt+0x246c>
   1398c:	b	13948 <__assert_fail@plt+0x2848>
   13990:	mov	r6, #1
   13994:	b	1356c <__assert_fail@plt+0x246c>
   13998:	mov	r0, #0
   1399c:	str	r0, [fp, #-36]	; 0xffffffdc
   139a0:	str	r0, [fp, #-40]	; 0xffffffd8
   139a4:	cmn	lr, #1
   139a8:	bne	139bc <__assert_fail@plt+0x28bc>
   139ac:	mov	r0, ip
   139b0:	bl	11004 <strlen@plt>
   139b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   139b8:	mov	lr, r0
   139bc:	ldr	r0, [sp, #76]	; 0x4c
   139c0:	add	r0, r0, r7
   139c4:	str	r0, [sp, #24]
   139c8:	mov	r6, #1
   139cc:	mov	r2, #0
   139d0:	sub	r0, fp, #40	; 0x28
   139d4:	mov	r3, r0
   139d8:	str	r5, [sp, #28]
   139dc:	str	lr, [sp, #32]
   139e0:	b	13a24 <__assert_fail@plt+0x2924>
   139e4:	ldr	r5, [sp, #52]	; 0x34
   139e8:	add	r5, r0, r5
   139ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   139f0:	bl	10f44 <iswprint@plt>
   139f4:	cmp	r0, #0
   139f8:	movwne	r0, #1
   139fc:	and	r6, r6, r0
   13a00:	sub	r0, fp, #40	; 0x28
   13a04:	bl	10efc <mbsinit@plt>
   13a08:	sub	r3, fp, #40	; 0x28
   13a0c:	mov	r2, r5
   13a10:	ldr	lr, [sp, #32]
   13a14:	cmp	r0, #0
   13a18:	ldr	r5, [sp, #28]
   13a1c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a20:	bne	138b0 <__assert_fail@plt+0x27b0>
   13a24:	str	r2, [sp, #52]	; 0x34
   13a28:	add	r0, r2, r7
   13a2c:	add	r1, ip, r0
   13a30:	str	r0, [sp, #48]	; 0x30
   13a34:	sub	r2, lr, r0
   13a38:	sub	r0, fp, #44	; 0x2c
   13a3c:	bl	15d60 <__assert_fail@plt+0x4c60>
   13a40:	cmp	r0, #0
   13a44:	beq	13dbc <__assert_fail@plt+0x2cbc>
   13a48:	cmn	r0, #1
   13a4c:	beq	13d78 <__assert_fail@plt+0x2c78>
   13a50:	cmn	r0, #2
   13a54:	ldr	lr, [sp, #32]
   13a58:	beq	13d80 <__assert_fail@plt+0x2c80>
   13a5c:	cmp	r0, #2
   13a60:	mov	r1, #0
   13a64:	movwcc	r1, #1
   13a68:	ldr	r2, [sp, #68]	; 0x44
   13a6c:	eor	r2, r2, #1
   13a70:	orrs	r1, r2, r1
   13a74:	bne	139e4 <__assert_fail@plt+0x28e4>
   13a78:	ldr	r1, [sp, #52]	; 0x34
   13a7c:	ldr	r2, [sp, #24]
   13a80:	add	r1, r2, r1
   13a84:	sub	r2, r0, #1
   13a88:	b	13a98 <__assert_fail@plt+0x2998>
   13a8c:	add	r1, r1, #1
   13a90:	subs	r2, r2, #1
   13a94:	beq	139e4 <__assert_fail@plt+0x28e4>
   13a98:	ldrb	r3, [r1]
   13a9c:	sub	r3, r3, #91	; 0x5b
   13aa0:	cmp	r3, #33	; 0x21
   13aa4:	bhi	13a8c <__assert_fail@plt+0x298c>
   13aa8:	add	r5, pc, #0
   13aac:	ldr	pc, [r5, r3, lsl #2]
   13ab0:	andeq	r3, r1, r8, lsr #29
   13ab4:	andeq	r3, r1, r8, lsr #29
   13ab8:	andeq	r3, r1, ip, lsl #21
   13abc:	andeq	r3, r1, r8, lsr #29
   13ac0:	andeq	r3, r1, ip, lsl #21
   13ac4:	andeq	r3, r1, r8, lsr #29
   13ac8:	andeq	r3, r1, ip, lsl #21
   13acc:	andeq	r3, r1, ip, lsl #21
   13ad0:	andeq	r3, r1, ip, lsl #21
   13ad4:	andeq	r3, r1, ip, lsl #21
   13ad8:	andeq	r3, r1, ip, lsl #21
   13adc:	andeq	r3, r1, ip, lsl #21
   13ae0:	andeq	r3, r1, ip, lsl #21
   13ae4:	andeq	r3, r1, ip, lsl #21
   13ae8:	andeq	r3, r1, ip, lsl #21
   13aec:	andeq	r3, r1, ip, lsl #21
   13af0:	andeq	r3, r1, ip, lsl #21
   13af4:	andeq	r3, r1, ip, lsl #21
   13af8:	andeq	r3, r1, ip, lsl #21
   13afc:	andeq	r3, r1, ip, lsl #21
   13b00:	andeq	r3, r1, ip, lsl #21
   13b04:	andeq	r3, r1, ip, lsl #21
   13b08:	andeq	r3, r1, ip, lsl #21
   13b0c:	andeq	r3, r1, ip, lsl #21
   13b10:	andeq	r3, r1, ip, lsl #21
   13b14:	andeq	r3, r1, ip, lsl #21
   13b18:	andeq	r3, r1, ip, lsl #21
   13b1c:	andeq	r3, r1, ip, lsl #21
   13b20:	andeq	r3, r1, ip, lsl #21
   13b24:	andeq	r3, r1, ip, lsl #21
   13b28:	andeq	r3, r1, ip, lsl #21
   13b2c:	andeq	r3, r1, ip, lsl #21
   13b30:	andeq	r3, r1, ip, lsl #21
   13b34:	andeq	r3, r1, r8, lsr #29
   13b38:	mov	r8, r0
   13b3c:	b	1356c <__assert_fail@plt+0x246c>
   13b40:	ldr	r0, [sp, #36]	; 0x24
   13b44:	cmp	r0, #0
   13b48:	beq	13be8 <__assert_fail@plt+0x2ae8>
   13b4c:	add	r0, r7, #2
   13b50:	cmp	r0, lr
   13b54:	bcs	13be8 <__assert_fail@plt+0x2ae8>
   13b58:	add	r1, r7, ip
   13b5c:	ldrb	r1, [r1, #1]
   13b60:	cmp	r1, #63	; 0x3f
   13b64:	bne	13be8 <__assert_fail@plt+0x2ae8>
   13b68:	ldrb	r1, [ip, r0]
   13b6c:	sub	r2, r1, #33	; 0x21
   13b70:	cmp	r2, #29
   13b74:	bhi	13be8 <__assert_fail@plt+0x2ae8>
   13b78:	mov	r3, #1
   13b7c:	movw	r6, #20929	; 0x51c1
   13b80:	movt	r6, #14336	; 0x3800
   13b84:	tst	r6, r3, lsl r2
   13b88:	beq	13be8 <__assert_fail@plt+0x2ae8>
   13b8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b90:	tst	r2, #1
   13b94:	bne	13eb0 <__assert_fail@plt+0x2db0>
   13b98:	cmp	r8, sl
   13b9c:	movcc	r2, #63	; 0x3f
   13ba0:	strbcc	r2, [r5, r8]
   13ba4:	add	r2, r8, #1
   13ba8:	cmp	r2, sl
   13bac:	movcc	r3, #34	; 0x22
   13bb0:	strbcc	r3, [r5, r2]
   13bb4:	add	r2, r8, #2
   13bb8:	cmp	r2, sl
   13bbc:	movcc	r3, #34	; 0x22
   13bc0:	strbcc	r3, [r5, r2]
   13bc4:	add	r2, r8, #3
   13bc8:	cmp	r2, sl
   13bcc:	movcc	r3, #63	; 0x3f
   13bd0:	strbcc	r3, [r5, r2]
   13bd4:	add	r8, r8, #4
   13bd8:	mov	r7, r0
   13bdc:	mov	r4, r1
   13be0:	mov	r6, #0
   13be4:	b	1356c <__assert_fail@plt+0x246c>
   13be8:	mov	r6, #0
   13bec:	b	1356c <__assert_fail@plt+0x246c>
   13bf0:	add	r0, r2, r7
   13bf4:	str	r0, [sp, #52]	; 0x34
   13bf8:	mov	r2, #0
   13bfc:	ldr	lr, [sp, #32]
   13c00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c04:	str	r1, [sp, #48]	; 0x30
   13c08:	tst	r1, #1
   13c0c:	bne	13ce8 <__assert_fail@plt+0x2be8>
   13c10:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13c14:	tst	r1, #1
   13c18:	bne	13eb0 <__assert_fail@plt+0x2db0>
   13c1c:	mov	r3, r0
   13c20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c24:	subs	r1, r0, #2
   13c28:	movwne	r1, #1
   13c2c:	orr	r1, r1, r3
   13c30:	tst	r1, #1
   13c34:	bne	13c6c <__assert_fail@plt+0x2b6c>
   13c38:	cmp	r8, sl
   13c3c:	movcc	r0, #39	; 0x27
   13c40:	strbcc	r0, [r5, r8]
   13c44:	add	r2, r8, #1
   13c48:	cmp	r2, sl
   13c4c:	movcc	r0, #36	; 0x24
   13c50:	strbcc	r0, [r5, r2]
   13c54:	add	r2, r8, #2
   13c58:	cmp	r2, sl
   13c5c:	movcc	r0, #39	; 0x27
   13c60:	strbcc	r0, [r5, r2]
   13c64:	add	r8, r8, #3
   13c68:	mov	r3, #1
   13c6c:	cmp	r8, sl
   13c70:	movcc	r1, #92	; 0x5c
   13c74:	strbcc	r1, [r5, r8]
   13c78:	add	r2, r8, #1
   13c7c:	cmp	r2, sl
   13c80:	bcs	13c94 <__assert_fail@plt+0x2b94>
   13c84:	uxtb	r1, r4
   13c88:	mov	r0, #48	; 0x30
   13c8c:	orr	r1, r0, r1, lsr #6
   13c90:	strb	r1, [r5, r2]
   13c94:	add	r2, r8, #2
   13c98:	cmp	r2, sl
   13c9c:	lsrcc	r1, r4, #3
   13ca0:	movcc	r0, #6
   13ca4:	bficc	r1, r0, #3, #29
   13ca8:	strbcc	r1, [r5, r2]
   13cac:	mov	r0, #6
   13cb0:	bfi	r4, r0, #3, #29
   13cb4:	add	r8, r8, #3
   13cb8:	mov	r2, #1
   13cbc:	mov	r0, r3
   13cc0:	b	13d0c <__assert_fail@plt+0x2c0c>
   13cc4:	cmp	r8, sl
   13cc8:	strbcc	r4, [r5, r8]
   13ccc:	ldr	r1, [sp, #76]	; 0x4c
   13cd0:	ldrb	r4, [r1, r7]
   13cd4:	add	r8, r8, #1
   13cd8:	mov	r7, r3
   13cdc:	ldr	r1, [sp, #48]	; 0x30
   13ce0:	tst	r1, #1
   13ce4:	beq	13c10 <__assert_fail@plt+0x2b10>
   13ce8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13cec:	tst	r1, #1
   13cf0:	beq	13d04 <__assert_fail@plt+0x2c04>
   13cf4:	cmp	r8, sl
   13cf8:	movcc	r1, #92	; 0x5c
   13cfc:	strbcc	r1, [r5, r8]
   13d00:	add	r8, r8, #1
   13d04:	mov	r1, #0
   13d08:	str	r1, [fp, #-52]	; 0xffffffcc
   13d0c:	and	r9, r2, #1
   13d10:	add	r3, r7, #1
   13d14:	ldr	r1, [sp, #52]	; 0x34
   13d18:	cmp	r1, r3
   13d1c:	bls	13d60 <__assert_fail@plt+0x2c60>
   13d20:	cmp	r9, #0
   13d24:	movwne	r9, #1
   13d28:	mvn	r1, r0
   13d2c:	orr	r1, r1, r9
   13d30:	tst	r1, #1
   13d34:	bne	13cc4 <__assert_fail@plt+0x2bc4>
   13d38:	cmp	r8, sl
   13d3c:	movcc	r1, #39	; 0x27
   13d40:	strbcc	r1, [r5, r8]
   13d44:	add	r1, r8, #1
   13d48:	cmp	r1, sl
   13d4c:	movcc	r0, #39	; 0x27
   13d50:	strbcc	r0, [r5, r1]
   13d54:	add	r8, r8, #2
   13d58:	mov	r0, #0
   13d5c:	b	13cc4 <__assert_fail@plt+0x2bc4>
   13d60:	str	r0, [fp, #-56]	; 0xffffffc8
   13d64:	cmp	r9, #0
   13d68:	movwne	r9, #1
   13d6c:	cmp	r9, #0
   13d70:	beq	138f4 <__assert_fail@plt+0x27f4>
   13d74:	b	13928 <__assert_fail@plt+0x2828>
   13d78:	mov	r6, #0
   13d7c:	b	13dbc <__assert_fail@plt+0x2cbc>
   13d80:	mov	r6, #0
   13d84:	ldr	r0, [sp, #48]	; 0x30
   13d88:	cmp	r0, lr
   13d8c:	bcs	13dbc <__assert_fail@plt+0x2cbc>
   13d90:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13d94:	add	r0, ip, r7
   13d98:	ldr	r2, [sp, #52]	; 0x34
   13d9c:	ldrb	r1, [r0, r2]
   13da0:	cmp	r1, #0
   13da4:	beq	138b0 <__assert_fail@plt+0x27b0>
   13da8:	add	r2, r2, #1
   13dac:	add	r1, r7, r2
   13db0:	cmp	r1, lr
   13db4:	bcc	13d9c <__assert_fail@plt+0x2c9c>
   13db8:	b	138b0 <__assert_fail@plt+0x27b0>
   13dbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13dc0:	ldr	r2, [sp, #52]	; 0x34
   13dc4:	b	138b0 <__assert_fail@plt+0x27b0>
   13dc8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13dcc:	eor	r0, r1, #2
   13dd0:	orr	r0, r0, r8
   13dd4:	clz	r0, r0
   13dd8:	lsr	r0, r0, #5
   13ddc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13de0:	tst	r3, r0
   13de4:	bne	13eb0 <__assert_fail@plt+0x2db0>
   13de8:	mov	r6, r5
   13dec:	subs	r0, r1, #2
   13df0:	movwne	r0, #1
   13df4:	orr	r0, r3, r0
   13df8:	tst	r0, #1
   13dfc:	ldr	r2, [sp, #92]	; 0x5c
   13e00:	ldreq	r0, [sp, #64]	; 0x40
   13e04:	eoreq	r0, r0, #1
   13e08:	tsteq	r0, #1
   13e0c:	bne	13e4c <__assert_fail@plt+0x2d4c>
   13e10:	mov	r9, lr
   13e14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e18:	tst	r0, #1
   13e1c:	bne	13f18 <__assert_fail@plt+0x2e18>
   13e20:	ldr	r0, [sp, #84]	; 0x54
   13e24:	cmp	r0, #0
   13e28:	beq	13e4c <__assert_fail@plt+0x2d4c>
   13e2c:	mov	r0, #0
   13e30:	str	r0, [fp, #-48]	; 0xffffffd0
   13e34:	mov	r1, #2
   13e38:	cmp	sl, #0
   13e3c:	mov	r0, r2
   13e40:	mov	r4, r3
   13e44:	ldr	r7, [sp, #84]	; 0x54
   13e48:	beq	13024 <__assert_fail@plt+0x1f24>
   13e4c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13e50:	clz	r0, r1
   13e54:	lsr	r0, r0, #5
   13e58:	orr	r0, r0, r3
   13e5c:	tst	r0, #1
   13e60:	bne	13e8c <__assert_fail@plt+0x2d8c>
   13e64:	ldrb	r0, [r1]
   13e68:	cmp	r0, #0
   13e6c:	beq	13e8c <__assert_fail@plt+0x2d8c>
   13e70:	add	r1, r1, #1
   13e74:	cmp	r8, sl
   13e78:	strbcc	r0, [r6, r8]
   13e7c:	add	r8, r8, #1
   13e80:	ldrb	r0, [r1], #1
   13e84:	cmp	r0, #0
   13e88:	bne	13e74 <__assert_fail@plt+0x2d74>
   13e8c:	cmp	r8, sl
   13e90:	movcc	r0, #0
   13e94:	strbcc	r0, [r6, r8]
   13e98:	b	13f0c <__assert_fail@plt+0x2e0c>
   13e9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ea0:	mov	lr, r4
   13ea4:	b	13eb0 <__assert_fail@plt+0x2db0>
   13ea8:	ldr	r5, [sp, #28]
   13eac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13eb0:	mov	r0, #0
   13eb4:	ldr	r1, [fp, #12]
   13eb8:	bic	r1, r1, #2
   13ebc:	mov	r2, #2
   13ec0:	ldr	r3, [sp, #92]	; 0x5c
   13ec4:	tst	r3, #1
   13ec8:	movwne	r2, #4
   13ecc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13ed0:	cmp	r3, #2
   13ed4:	movne	r2, r3
   13ed8:	str	r2, [sp]
   13edc:	str	r1, [sp, #4]
   13ee0:	str	r0, [sp, #8]
   13ee4:	ldr	r0, [sp, #80]	; 0x50
   13ee8:	str	r0, [sp, #12]
   13eec:	ldr	r0, [sp, #88]	; 0x58
   13ef0:	str	r0, [sp, #16]
   13ef4:	mov	r0, r5
   13ef8:	mov	r1, sl
   13efc:	mov	r2, ip
   13f00:	mov	r3, lr
   13f04:	bl	12f98 <__assert_fail@plt+0x1e98>
   13f08:	mov	r8, r0
   13f0c:	mov	r0, r8
   13f10:	sub	sp, fp, #28
   13f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f18:	mov	r0, #5
   13f1c:	str	r0, [sp]
   13f20:	ldr	r0, [fp, #12]
   13f24:	str	r0, [sp, #4]
   13f28:	ldr	r0, [fp, #16]
   13f2c:	str	r0, [sp, #8]
   13f30:	ldr	r0, [sp, #80]	; 0x50
   13f34:	str	r0, [sp, #12]
   13f38:	ldr	r0, [sp, #88]	; 0x58
   13f3c:	str	r0, [sp, #16]
   13f40:	mov	r0, r6
   13f44:	ldr	r1, [sp, #84]	; 0x54
   13f48:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13f4c:	mov	r3, r9
   13f50:	b	13f04 <__assert_fail@plt+0x2e04>
   13f54:	bl	110e8 <abort@plt>
   13f58:	mov	r3, r2
   13f5c:	mov	r2, #0
   13f60:	b	13f64 <__assert_fail@plt+0x2e64>
   13f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f68:	add	fp, sp, #28
   13f6c:	sub	sp, sp, #36	; 0x24
   13f70:	mov	r4, r2
   13f74:	str	r2, [sp, #24]
   13f78:	mov	r5, r1
   13f7c:	mov	r6, r0
   13f80:	str	r0, [sp, #20]
   13f84:	movw	r8, #62112	; 0xf2a0
   13f88:	movt	r8, #2
   13f8c:	cmp	r3, #0
   13f90:	movne	r8, r3
   13f94:	bl	1101c <__errno_location@plt>
   13f98:	str	r0, [sp, #28]
   13f9c:	ldm	r8, {r3, r9}
   13fa0:	ldr	r1, [r8, #40]	; 0x28
   13fa4:	ldr	r2, [r8, #44]	; 0x2c
   13fa8:	ldr	r7, [r0]
   13fac:	str	r7, [sp, #32]
   13fb0:	add	sl, r8, #8
   13fb4:	cmp	r4, #0
   13fb8:	orreq	r9, r9, #1
   13fbc:	stm	sp, {r3, r9, sl}
   13fc0:	str	r1, [sp, #12]
   13fc4:	str	r2, [sp, #16]
   13fc8:	mov	r0, #0
   13fcc:	mov	r1, #0
   13fd0:	mov	r2, r6
   13fd4:	mov	r3, r5
   13fd8:	mov	r7, r5
   13fdc:	bl	12f98 <__assert_fail@plt+0x1e98>
   13fe0:	mov	r5, r0
   13fe4:	add	r4, r0, #1
   13fe8:	mov	r0, r4
   13fec:	bl	14e6c <__assert_fail@plt+0x3d6c>
   13ff0:	mov	r6, r0
   13ff4:	ldr	r0, [r8]
   13ff8:	ldr	r1, [r8, #40]	; 0x28
   13ffc:	ldr	r2, [r8, #44]	; 0x2c
   14000:	stm	sp, {r0, r9, sl}
   14004:	str	r1, [sp, #12]
   14008:	str	r2, [sp, #16]
   1400c:	mov	r0, r6
   14010:	mov	r1, r4
   14014:	ldr	r2, [sp, #20]
   14018:	mov	r3, r7
   1401c:	bl	12f98 <__assert_fail@plt+0x1e98>
   14020:	ldr	r0, [sp, #24]
   14024:	ldr	r1, [sp, #32]
   14028:	ldr	r2, [sp, #28]
   1402c:	str	r1, [r2]
   14030:	cmp	r0, #0
   14034:	strne	r5, [r0]
   14038:	mov	r0, r6
   1403c:	sub	sp, fp, #28
   14040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14044:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14048:	add	fp, sp, #24
   1404c:	movw	r8, #28920	; 0x70f8
   14050:	movt	r8, #2
   14054:	ldr	r4, [r8]
   14058:	movw	r5, #28924	; 0x70fc
   1405c:	movt	r5, #2
   14060:	ldr	r0, [r5]
   14064:	cmp	r0, #2
   14068:	blt	14094 <__assert_fail@plt+0x2f94>
   1406c:	add	r7, r4, #12
   14070:	mov	r6, #0
   14074:	ldr	r0, [r7, r6, lsl #3]
   14078:	bl	15cb0 <__assert_fail@plt+0x4bb0>
   1407c:	add	r0, r6, #1
   14080:	ldr	r1, [r5]
   14084:	add	r2, r6, #2
   14088:	cmp	r2, r1
   1408c:	mov	r6, r0
   14090:	blt	14074 <__assert_fail@plt+0x2f74>
   14094:	ldr	r0, [r4, #4]
   14098:	movw	r9, #62160	; 0xf2d0
   1409c:	movt	r9, #2
   140a0:	cmp	r0, r9
   140a4:	movw	r7, #28928	; 0x7100
   140a8:	movt	r7, #2
   140ac:	beq	140bc <__assert_fail@plt+0x2fbc>
   140b0:	bl	15cb0 <__assert_fail@plt+0x4bb0>
   140b4:	mov	r0, #256	; 0x100
   140b8:	stm	r7, {r0, r9}
   140bc:	cmp	r4, r7
   140c0:	beq	140d0 <__assert_fail@plt+0x2fd0>
   140c4:	mov	r0, r4
   140c8:	bl	15cb0 <__assert_fail@plt+0x4bb0>
   140cc:	str	r7, [r8]
   140d0:	mov	r0, #1
   140d4:	str	r0, [r5]
   140d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140dc:	movw	r3, #62112	; 0xf2a0
   140e0:	movt	r3, #2
   140e4:	mvn	r2, #0
   140e8:	b	140ec <__assert_fail@plt+0x2fec>
   140ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140f0:	add	fp, sp, #28
   140f4:	sub	sp, sp, #44	; 0x2c
   140f8:	mov	r7, r3
   140fc:	str	r2, [sp, #36]	; 0x24
   14100:	str	r1, [sp, #32]
   14104:	mov	r5, r0
   14108:	bl	1101c <__errno_location@plt>
   1410c:	cmp	r5, #0
   14110:	bmi	14280 <__assert_fail@plt+0x3180>
   14114:	cmn	r5, #-2147483647	; 0x80000001
   14118:	beq	14280 <__assert_fail@plt+0x3180>
   1411c:	movw	r4, #28920	; 0x70f8
   14120:	movt	r4, #2
   14124:	ldr	r6, [r4]
   14128:	str	r0, [sp, #28]
   1412c:	ldr	r0, [r0]
   14130:	str	r0, [sp, #24]
   14134:	movw	r8, #28924	; 0x70fc
   14138:	movt	r8, #2
   1413c:	ldr	r1, [r8]
   14140:	cmp	r1, r5
   14144:	ble	14150 <__assert_fail@plt+0x3050>
   14148:	mov	sl, r6
   1414c:	b	141bc <__assert_fail@plt+0x30bc>
   14150:	str	r1, [fp, #-32]	; 0xffffffe0
   14154:	mov	r0, #8
   14158:	str	r0, [sp]
   1415c:	movw	r9, #28928	; 0x7100
   14160:	movt	r9, #2
   14164:	subs	r0, r6, r9
   14168:	movne	r0, r6
   1416c:	sub	r1, r5, r1
   14170:	add	r2, r1, #1
   14174:	sub	r1, fp, #32
   14178:	mvn	r3, #-2147483648	; 0x80000000
   1417c:	bl	14f48 <__assert_fail@plt+0x3e48>
   14180:	mov	sl, r0
   14184:	str	r0, [r4]
   14188:	cmp	r6, r9
   1418c:	bne	14198 <__assert_fail@plt+0x3098>
   14190:	ldrd	r0, [r9]
   14194:	stm	sl, {r0, r1}
   14198:	ldr	r1, [r8]
   1419c:	add	r0, sl, r1, lsl #3
   141a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   141a4:	sub	r1, r2, r1
   141a8:	lsl	r2, r1, #3
   141ac:	mov	r1, #0
   141b0:	bl	11034 <memset@plt>
   141b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141b8:	str	r0, [r8]
   141bc:	mov	r9, sl
   141c0:	ldr	r6, [r9, r5, lsl #3]!
   141c4:	ldr	r4, [r9, #4]!
   141c8:	ldm	r7, {r0, r1}
   141cc:	ldr	r2, [r7, #40]	; 0x28
   141d0:	ldr	r3, [r7, #44]	; 0x2c
   141d4:	orr	r8, r1, #1
   141d8:	add	r1, r7, #8
   141dc:	stm	sp, {r0, r8}
   141e0:	str	r1, [sp, #20]
   141e4:	add	r0, sp, #8
   141e8:	stm	r0, {r1, r2, r3}
   141ec:	mov	r0, r4
   141f0:	mov	r1, r6
   141f4:	ldr	r2, [sp, #32]
   141f8:	ldr	r3, [sp, #36]	; 0x24
   141fc:	bl	12f98 <__assert_fail@plt+0x1e98>
   14200:	cmp	r6, r0
   14204:	bhi	14268 <__assert_fail@plt+0x3168>
   14208:	add	r6, r0, #1
   1420c:	str	r6, [sl, r5, lsl #3]
   14210:	movw	r0, #62160	; 0xf2d0
   14214:	movt	r0, #2
   14218:	cmp	r4, r0
   1421c:	beq	14228 <__assert_fail@plt+0x3128>
   14220:	mov	r0, r4
   14224:	bl	15cb0 <__assert_fail@plt+0x4bb0>
   14228:	mov	r0, r6
   1422c:	bl	14e6c <__assert_fail@plt+0x3d6c>
   14230:	mov	r4, r0
   14234:	str	r0, [r9]
   14238:	ldr	r0, [r7]
   1423c:	ldr	r1, [r7, #40]	; 0x28
   14240:	ldr	r2, [r7, #44]	; 0x2c
   14244:	stm	sp, {r0, r8}
   14248:	ldr	r0, [sp, #20]
   1424c:	add	r3, sp, #8
   14250:	stm	r3, {r0, r1, r2}
   14254:	mov	r0, r4
   14258:	mov	r1, r6
   1425c:	ldr	r2, [sp, #32]
   14260:	ldr	r3, [sp, #36]	; 0x24
   14264:	bl	12f98 <__assert_fail@plt+0x1e98>
   14268:	ldr	r0, [sp, #28]
   1426c:	ldr	r1, [sp, #24]
   14270:	str	r1, [r0]
   14274:	mov	r0, r4
   14278:	sub	sp, fp, #28
   1427c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14280:	bl	110e8 <abort@plt>
   14284:	movw	r3, #62112	; 0xf2a0
   14288:	movt	r3, #2
   1428c:	b	140ec <__assert_fail@plt+0x2fec>
   14290:	mov	r1, r0
   14294:	mov	r0, #0
   14298:	b	140dc <__assert_fail@plt+0x2fdc>
   1429c:	mov	r2, r1
   142a0:	mov	r1, r0
   142a4:	mov	r0, #0
   142a8:	b	14284 <__assert_fail@plt+0x3184>
   142ac:	push	{r4, r5, r6, sl, fp, lr}
   142b0:	add	fp, sp, #16
   142b4:	sub	sp, sp, #48	; 0x30
   142b8:	mov	r4, r2
   142bc:	mov	r5, r0
   142c0:	mov	r6, sp
   142c4:	mov	r0, r6
   142c8:	bl	142e8 <__assert_fail@plt+0x31e8>
   142cc:	mov	r0, r5
   142d0:	mov	r1, r4
   142d4:	mvn	r2, #0
   142d8:	mov	r3, r6
   142dc:	bl	140ec <__assert_fail@plt+0x2fec>
   142e0:	sub	sp, fp, #16
   142e4:	pop	{r4, r5, r6, sl, fp, pc}
   142e8:	push	{fp, lr}
   142ec:	mov	fp, sp
   142f0:	vmov.i32	q8, #0	; 0x00000000
   142f4:	mov	r2, #32
   142f8:	mov	r3, r0
   142fc:	vst1.32	{d16-d17}, [r3], r2
   14300:	vst1.32	{d16-d17}, [r3]
   14304:	add	r2, r0, #16
   14308:	vst1.32	{d16-d17}, [r2]
   1430c:	cmp	r1, #10
   14310:	strne	r1, [r0]
   14314:	popne	{fp, pc}
   14318:	bl	110e8 <abort@plt>
   1431c:	push	{r4, r5, r6, r7, fp, lr}
   14320:	add	fp, sp, #16
   14324:	sub	sp, sp, #48	; 0x30
   14328:	mov	r4, r3
   1432c:	mov	r5, r2
   14330:	mov	r6, r0
   14334:	mov	r7, sp
   14338:	mov	r0, r7
   1433c:	bl	142e8 <__assert_fail@plt+0x31e8>
   14340:	mov	r0, r6
   14344:	mov	r1, r5
   14348:	mov	r2, r4
   1434c:	mov	r3, r7
   14350:	bl	140ec <__assert_fail@plt+0x2fec>
   14354:	sub	sp, fp, #16
   14358:	pop	{r4, r5, r6, r7, fp, pc}
   1435c:	mov	r2, r1
   14360:	mov	r1, r0
   14364:	mov	r0, #0
   14368:	b	142ac <__assert_fail@plt+0x31ac>
   1436c:	mov	r3, r2
   14370:	mov	r2, r1
   14374:	mov	r1, r0
   14378:	mov	r0, #0
   1437c:	b	1431c <__assert_fail@plt+0x321c>
   14380:	push	{r4, r5, r6, sl, fp, lr}
   14384:	add	fp, sp, #16
   14388:	sub	sp, sp, #48	; 0x30
   1438c:	mov	r4, r1
   14390:	mov	r5, r0
   14394:	movw	r0, #62112	; 0xf2a0
   14398:	movt	r0, #2
   1439c:	add	r1, r0, #16
   143a0:	mov	r3, #32
   143a4:	vld1.64	{d16-d17}, [r0], r3
   143a8:	vld1.64	{d18-d19}, [r1]
   143ac:	mov	r6, sp
   143b0:	add	r1, r6, #16
   143b4:	vld1.64	{d20-d21}, [r0]
   143b8:	vst1.64	{d18-d19}, [r1]
   143bc:	mov	r0, r6
   143c0:	vst1.64	{d16-d17}, [r0], r3
   143c4:	vst1.64	{d20-d21}, [r0]
   143c8:	mov	r0, r6
   143cc:	mov	r1, r2
   143d0:	mov	r2, #1
   143d4:	bl	12e8c <__assert_fail@plt+0x1d8c>
   143d8:	mov	r0, #0
   143dc:	mov	r1, r5
   143e0:	mov	r2, r4
   143e4:	mov	r3, r6
   143e8:	bl	140ec <__assert_fail@plt+0x2fec>
   143ec:	sub	sp, fp, #16
   143f0:	pop	{r4, r5, r6, sl, fp, pc}
   143f4:	mov	r2, r1
   143f8:	mvn	r1, #0
   143fc:	b	14380 <__assert_fail@plt+0x3280>
   14400:	mov	r1, #58	; 0x3a
   14404:	b	143f4 <__assert_fail@plt+0x32f4>
   14408:	mov	r2, #58	; 0x3a
   1440c:	b	14380 <__assert_fail@plt+0x3280>
   14410:	push	{r4, r5, r6, sl, fp, lr}
   14414:	add	fp, sp, #16
   14418:	sub	sp, sp, #48	; 0x30
   1441c:	mov	r4, r2
   14420:	mov	r5, r0
   14424:	mov	r6, sp
   14428:	mov	r0, r6
   1442c:	bl	142e8 <__assert_fail@plt+0x31e8>
   14430:	mov	r0, r6
   14434:	mov	r1, #58	; 0x3a
   14438:	mov	r2, #1
   1443c:	bl	12e8c <__assert_fail@plt+0x1d8c>
   14440:	mov	r0, r5
   14444:	mov	r1, r4
   14448:	mvn	r2, #0
   1444c:	mov	r3, r6
   14450:	bl	140ec <__assert_fail@plt+0x2fec>
   14454:	sub	sp, fp, #16
   14458:	pop	{r4, r5, r6, sl, fp, pc}
   1445c:	push	{fp, lr}
   14460:	mov	fp, sp
   14464:	sub	sp, sp, #8
   14468:	mvn	ip, #0
   1446c:	str	ip, [sp]
   14470:	bl	1447c <__assert_fail@plt+0x337c>
   14474:	mov	sp, fp
   14478:	pop	{fp, pc}
   1447c:	push	{r4, r5, r6, r7, fp, lr}
   14480:	add	fp, sp, #16
   14484:	sub	sp, sp, #48	; 0x30
   14488:	mov	r7, r3
   1448c:	mov	r5, r0
   14490:	movw	r0, #62112	; 0xf2a0
   14494:	movt	r0, #2
   14498:	add	r3, r0, #16
   1449c:	mov	r4, #32
   144a0:	vld1.64	{d16-d17}, [r0], r4
   144a4:	vld1.64	{d18-d19}, [r3]
   144a8:	mov	r6, sp
   144ac:	add	r3, r6, #16
   144b0:	vld1.64	{d20-d21}, [r0]
   144b4:	vst1.64	{d18-d19}, [r3]
   144b8:	mov	r0, r6
   144bc:	vst1.64	{d16-d17}, [r0], r4
   144c0:	vst1.64	{d20-d21}, [r0]
   144c4:	mov	r0, r6
   144c8:	bl	12ee4 <__assert_fail@plt+0x1de4>
   144cc:	ldr	r2, [fp, #8]
   144d0:	mov	r0, r5
   144d4:	mov	r1, r7
   144d8:	mov	r3, r6
   144dc:	bl	140ec <__assert_fail@plt+0x2fec>
   144e0:	sub	sp, fp, #16
   144e4:	pop	{r4, r5, r6, r7, fp, pc}
   144e8:	mov	r3, r2
   144ec:	mov	r2, r1
   144f0:	mov	r1, r0
   144f4:	mov	r0, #0
   144f8:	b	1445c <__assert_fail@plt+0x335c>
   144fc:	push	{fp, lr}
   14500:	mov	fp, sp
   14504:	sub	sp, sp, #8
   14508:	mov	ip, r2
   1450c:	mov	r2, r1
   14510:	mov	r1, r0
   14514:	str	r3, [sp]
   14518:	mov	r0, #0
   1451c:	mov	r3, ip
   14520:	bl	1447c <__assert_fail@plt+0x337c>
   14524:	mov	sp, fp
   14528:	pop	{fp, pc}
   1452c:	movw	r3, #28936	; 0x7108
   14530:	movt	r3, #2
   14534:	b	140ec <__assert_fail@plt+0x2fec>
   14538:	mov	r2, r1
   1453c:	mov	r1, r0
   14540:	mov	r0, #0
   14544:	b	1452c <__assert_fail@plt+0x342c>
   14548:	mvn	r2, #0
   1454c:	b	1452c <__assert_fail@plt+0x342c>
   14550:	mov	r1, r0
   14554:	mov	r0, #0
   14558:	b	14548 <__assert_fail@plt+0x3448>
   1455c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14560:	add	fp, sp, #24
   14564:	sub	sp, sp, #16
   14568:	mov	r4, r1
   1456c:	mov	r5, r0
   14570:	mov	r7, #0
   14574:	mov	r0, #0
   14578:	mov	r1, r5
   1457c:	mov	r2, #5
   14580:	bl	10f20 <dcgettext@plt>
   14584:	cmp	r0, r5
   14588:	beq	14594 <__assert_fail@plt+0x3494>
   1458c:	sub	sp, fp, #24
   14590:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14594:	bl	15d28 <__assert_fail@plt+0x4c28>
   14598:	mov	r6, r0
   1459c:	mov	r8, #56	; 0x38
   145a0:	mov	r0, #45	; 0x2d
   145a4:	stm	sp, {r0, r8}
   145a8:	str	r7, [sp, #8]
   145ac:	str	r7, [sp, #12]
   145b0:	mov	r0, r6
   145b4:	mov	r1, #85	; 0x55
   145b8:	mov	r2, #84	; 0x54
   145bc:	mov	r3, #70	; 0x46
   145c0:	bl	14658 <__assert_fail@plt+0x3558>
   145c4:	cmp	r0, #0
   145c8:	beq	145e4 <__assert_fail@plt+0x34e4>
   145cc:	ldrb	r1, [r5]
   145d0:	movw	r2, #26958	; 0x694e
   145d4:	movt	r2, #1
   145d8:	movw	r0, #26962	; 0x6952
   145dc:	movt	r0, #1
   145e0:	b	14628 <__assert_fail@plt+0x3528>
   145e4:	mov	r0, #48	; 0x30
   145e8:	mov	r1, #51	; 0x33
   145ec:	str	r8, [sp]
   145f0:	stmib	sp, {r0, r1}
   145f4:	str	r0, [sp, #12]
   145f8:	mov	r0, r6
   145fc:	mov	r1, #71	; 0x47
   14600:	mov	r2, #66	; 0x42
   14604:	mov	r3, #49	; 0x31
   14608:	bl	14658 <__assert_fail@plt+0x3558>
   1460c:	cmp	r0, #0
   14610:	beq	14638 <__assert_fail@plt+0x3538>
   14614:	ldrb	r1, [r5]
   14618:	movw	r2, #26966	; 0x6956
   1461c:	movt	r2, #1
   14620:	movw	r0, #26970	; 0x695a
   14624:	movt	r0, #1
   14628:	cmp	r1, #96	; 0x60
   1462c:	moveq	r0, r2
   14630:	sub	sp, fp, #24
   14634:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14638:	movw	r1, #26552	; 0x67b8
   1463c:	movt	r1, #1
   14640:	movw	r0, #26956	; 0x694c
   14644:	movt	r0, #1
   14648:	cmp	r4, #9
   1464c:	moveq	r0, r1
   14650:	sub	sp, fp, #24
   14654:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14658:	push	{r4, r5, r6, r7, fp, lr}
   1465c:	add	fp, sp, #16
   14660:	sub	sp, sp, #16
   14664:	mov	r4, r3
   14668:	mov	r5, r2
   1466c:	mov	r7, r1
   14670:	mov	r6, r0
   14674:	mov	r0, r1
   14678:	bl	15bbc <__assert_fail@plt+0x4abc>
   1467c:	ldrb	r1, [r6]
   14680:	cmp	r0, #0
   14684:	andne	r1, r1, #223	; 0xdf
   14688:	mov	r0, #0
   1468c:	cmp	r1, r7
   14690:	bne	146c8 <__assert_fail@plt+0x35c8>
   14694:	cmp	r7, #0
   14698:	beq	146d0 <__assert_fail@plt+0x35d0>
   1469c:	ldr	r0, [fp, #20]
   146a0:	ldr	r1, [fp, #16]
   146a4:	ldr	r2, [fp, #12]
   146a8:	ldr	r3, [fp, #8]
   146ac:	str	r2, [sp]
   146b0:	str	r1, [sp, #4]
   146b4:	str	r0, [sp, #8]
   146b8:	mov	r0, r6
   146bc:	mov	r1, r5
   146c0:	mov	r2, r4
   146c4:	bl	146dc <__assert_fail@plt+0x35dc>
   146c8:	sub	sp, fp, #16
   146cc:	pop	{r4, r5, r6, r7, fp, pc}
   146d0:	mov	r0, #1
   146d4:	sub	sp, fp, #16
   146d8:	pop	{r4, r5, r6, r7, fp, pc}
   146dc:	push	{r4, r5, r6, r7, fp, lr}
   146e0:	add	fp, sp, #16
   146e4:	sub	sp, sp, #8
   146e8:	mov	r4, r3
   146ec:	mov	r5, r2
   146f0:	mov	r7, r1
   146f4:	mov	r6, r0
   146f8:	mov	r0, r1
   146fc:	bl	15bbc <__assert_fail@plt+0x4abc>
   14700:	ldrb	r1, [r6, #1]
   14704:	cmp	r0, #0
   14708:	andne	r1, r1, #223	; 0xdf
   1470c:	mov	r0, #0
   14710:	cmp	r1, r7
   14714:	bne	14744 <__assert_fail@plt+0x3644>
   14718:	cmp	r7, #0
   1471c:	beq	1474c <__assert_fail@plt+0x364c>
   14720:	ldr	r0, [fp, #16]
   14724:	ldr	r1, [fp, #12]
   14728:	ldr	r3, [fp, #8]
   1472c:	str	r1, [sp]
   14730:	str	r0, [sp, #4]
   14734:	mov	r0, r6
   14738:	mov	r1, r5
   1473c:	mov	r2, r4
   14740:	bl	14758 <__assert_fail@plt+0x3658>
   14744:	sub	sp, fp, #16
   14748:	pop	{r4, r5, r6, r7, fp, pc}
   1474c:	mov	r0, #1
   14750:	sub	sp, fp, #16
   14754:	pop	{r4, r5, r6, r7, fp, pc}
   14758:	push	{r4, r5, r6, r7, fp, lr}
   1475c:	add	fp, sp, #16
   14760:	sub	sp, sp, #8
   14764:	mov	r4, r3
   14768:	mov	r5, r2
   1476c:	mov	r7, r1
   14770:	mov	r6, r0
   14774:	mov	r0, r1
   14778:	bl	15bbc <__assert_fail@plt+0x4abc>
   1477c:	ldrb	r1, [r6, #2]
   14780:	cmp	r0, #0
   14784:	andne	r1, r1, #223	; 0xdf
   14788:	mov	r0, #0
   1478c:	cmp	r1, r7
   14790:	bne	147b8 <__assert_fail@plt+0x36b8>
   14794:	cmp	r7, #0
   14798:	beq	147c0 <__assert_fail@plt+0x36c0>
   1479c:	ldr	r0, [fp, #12]
   147a0:	ldr	r3, [fp, #8]
   147a4:	str	r0, [sp]
   147a8:	mov	r0, r6
   147ac:	mov	r1, r5
   147b0:	mov	r2, r4
   147b4:	bl	147cc <__assert_fail@plt+0x36cc>
   147b8:	sub	sp, fp, #16
   147bc:	pop	{r4, r5, r6, r7, fp, pc}
   147c0:	mov	r0, #1
   147c4:	sub	sp, fp, #16
   147c8:	pop	{r4, r5, r6, r7, fp, pc}
   147cc:	push	{r4, r5, r6, r7, fp, lr}
   147d0:	add	fp, sp, #16
   147d4:	mov	r4, r3
   147d8:	mov	r5, r2
   147dc:	mov	r7, r1
   147e0:	mov	r6, r0
   147e4:	mov	r0, r1
   147e8:	bl	15bbc <__assert_fail@plt+0x4abc>
   147ec:	ldrb	r1, [r6, #3]
   147f0:	ldr	r3, [fp, #8]
   147f4:	cmp	r0, #0
   147f8:	andne	r1, r1, #223	; 0xdf
   147fc:	mov	r0, #0
   14800:	cmp	r1, r7
   14804:	bne	14828 <__assert_fail@plt+0x3728>
   14808:	cmp	r7, #0
   1480c:	beq	14824 <__assert_fail@plt+0x3724>
   14810:	mov	r0, r6
   14814:	mov	r1, r5
   14818:	mov	r2, r4
   1481c:	pop	{r4, r5, r6, r7, fp, lr}
   14820:	b	1482c <__assert_fail@plt+0x372c>
   14824:	mov	r0, #1
   14828:	pop	{r4, r5, r6, r7, fp, pc}
   1482c:	push	{r4, r5, r6, r7, fp, lr}
   14830:	add	fp, sp, #16
   14834:	mov	r4, r3
   14838:	mov	r5, r2
   1483c:	mov	r7, r1
   14840:	mov	r6, r0
   14844:	mov	r0, r1
   14848:	bl	15bbc <__assert_fail@plt+0x4abc>
   1484c:	ldrb	r1, [r6, #4]
   14850:	cmp	r0, #0
   14854:	andne	r1, r1, #223	; 0xdf
   14858:	mov	r0, #0
   1485c:	cmp	r1, r7
   14860:	bne	14884 <__assert_fail@plt+0x3784>
   14864:	cmp	r7, #0
   14868:	beq	14880 <__assert_fail@plt+0x3780>
   1486c:	mov	r0, r6
   14870:	mov	r1, r5
   14874:	mov	r2, r4
   14878:	pop	{r4, r5, r6, r7, fp, lr}
   1487c:	b	14888 <__assert_fail@plt+0x3788>
   14880:	mov	r0, #1
   14884:	pop	{r4, r5, r6, r7, fp, pc}
   14888:	push	{r4, r5, r6, sl, fp, lr}
   1488c:	add	fp, sp, #16
   14890:	mov	r4, r2
   14894:	mov	r6, r1
   14898:	mov	r5, r0
   1489c:	mov	r0, r1
   148a0:	bl	15bbc <__assert_fail@plt+0x4abc>
   148a4:	ldrb	r1, [r5, #5]
   148a8:	cmp	r0, #0
   148ac:	andne	r1, r1, #223	; 0xdf
   148b0:	mov	r0, #0
   148b4:	cmp	r1, r6
   148b8:	bne	148d8 <__assert_fail@plt+0x37d8>
   148bc:	cmp	r6, #0
   148c0:	beq	148d4 <__assert_fail@plt+0x37d4>
   148c4:	mov	r0, r5
   148c8:	mov	r1, r4
   148cc:	pop	{r4, r5, r6, sl, fp, lr}
   148d0:	b	148dc <__assert_fail@plt+0x37dc>
   148d4:	mov	r0, #1
   148d8:	pop	{r4, r5, r6, sl, fp, pc}
   148dc:	push	{r4, r5, fp, lr}
   148e0:	add	fp, sp, #8
   148e4:	mov	r5, r1
   148e8:	mov	r4, r0
   148ec:	mov	r0, r1
   148f0:	bl	15bbc <__assert_fail@plt+0x4abc>
   148f4:	ldrb	r1, [r4, #6]
   148f8:	cmp	r0, #0
   148fc:	andne	r1, r1, #223	; 0xdf
   14900:	mov	r0, #0
   14904:	cmp	r1, r5
   14908:	popne	{r4, r5, fp, pc}
   1490c:	cmp	r5, #0
   14910:	beq	14920 <__assert_fail@plt+0x3820>
   14914:	mov	r0, r4
   14918:	pop	{r4, r5, fp, lr}
   1491c:	b	14928 <__assert_fail@plt+0x3828>
   14920:	mov	r0, #1
   14924:	pop	{r4, r5, fp, pc}
   14928:	push	{r4, sl, fp, lr}
   1492c:	add	fp, sp, #8
   14930:	mov	r4, r0
   14934:	mov	r0, #0
   14938:	bl	15bbc <__assert_fail@plt+0x4abc>
   1493c:	ldrb	r1, [r4, #7]
   14940:	cmp	r0, #0
   14944:	beq	14958 <__assert_fail@plt+0x3858>
   14948:	tst	r1, #223	; 0xdf
   1494c:	bne	14960 <__assert_fail@plt+0x3860>
   14950:	mov	r0, #1
   14954:	pop	{r4, sl, fp, pc}
   14958:	cmp	r1, #0
   1495c:	beq	14950 <__assert_fail@plt+0x3850>
   14960:	mov	r0, #0
   14964:	pop	{r4, sl, fp, pc}
   14968:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1496c:	add	fp, sp, #24
   14970:	sub	sp, sp, #32
   14974:	mov	r4, r2
   14978:	mov	r8, r0
   1497c:	ldr	r6, [fp, #12]
   14980:	ldr	r7, [fp, #8]
   14984:	cmp	r1, #0
   14988:	beq	149b0 <__assert_fail@plt+0x38b0>
   1498c:	mov	r5, r1
   14990:	str	r4, [sp]
   14994:	str	r3, [sp, #4]
   14998:	movw	r2, #27060	; 0x69b4
   1499c:	movt	r2, #1
   149a0:	mov	r0, r8
   149a4:	mov	r1, #1
   149a8:	mov	r3, r5
   149ac:	b	149c8 <__assert_fail@plt+0x38c8>
   149b0:	str	r3, [sp]
   149b4:	movw	r2, #27072	; 0x69c0
   149b8:	movt	r2, #1
   149bc:	mov	r0, r8
   149c0:	mov	r1, #1
   149c4:	mov	r3, r4
   149c8:	bl	11064 <__fprintf_chk@plt>
   149cc:	movw	r1, #27079	; 0x69c7
   149d0:	movt	r1, #1
   149d4:	mov	r0, #0
   149d8:	mov	r2, #5
   149dc:	bl	10f20 <dcgettext@plt>
   149e0:	mov	r3, r0
   149e4:	movw	r0, #2022	; 0x7e6
   149e8:	str	r0, [sp]
   149ec:	movw	r2, #27797	; 0x6c95
   149f0:	movt	r2, #1
   149f4:	mov	r0, r8
   149f8:	mov	r1, #1
   149fc:	bl	11064 <__fprintf_chk@plt>
   14a00:	movw	r4, #26392	; 0x6718
   14a04:	movt	r4, #1
   14a08:	mov	r0, r4
   14a0c:	mov	r1, r8
   14a10:	bl	10e90 <fputs_unlocked@plt>
   14a14:	movw	r1, #27083	; 0x69cb
   14a18:	movt	r1, #1
   14a1c:	mov	r0, #0
   14a20:	mov	r2, #5
   14a24:	bl	10f20 <dcgettext@plt>
   14a28:	mov	r2, r0
   14a2c:	movw	r3, #27254	; 0x6a76
   14a30:	movt	r3, #1
   14a34:	mov	r0, r8
   14a38:	mov	r1, #1
   14a3c:	bl	11064 <__fprintf_chk@plt>
   14a40:	mov	r0, r4
   14a44:	mov	r1, r8
   14a48:	bl	10e90 <fputs_unlocked@plt>
   14a4c:	cmp	r6, #9
   14a50:	bhi	14a8c <__assert_fail@plt+0x398c>
   14a54:	add	r0, pc, #0
   14a58:	ldr	pc, [r0, r6, lsl #2]
   14a5c:	andeq	r4, r1, r4, lsl #21
   14a60:	muleq	r1, r8, sl
   14a64:	andeq	r4, r1, r8, asr #21
   14a68:	strdeq	r4, [r1], -r0
   14a6c:	andeq	r4, r1, r8, lsl fp
   14a70:	andeq	r4, r1, r0, asr #22
   14a74:	andeq	r4, r1, r8, ror #22
   14a78:	andeq	r4, r1, r0, lsr #23
   14a7c:	andeq	r4, r1, r0, asr #24
   14a80:	andeq	r4, r1, r8, ror #23
   14a84:	sub	sp, fp, #24
   14a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a8c:	movw	r1, #27607	; 0x6bd7
   14a90:	movt	r1, #1
   14a94:	b	14bf0 <__assert_fail@plt+0x3af0>
   14a98:	movw	r1, #27288	; 0x6a98
   14a9c:	movt	r1, #1
   14aa0:	mov	r0, #0
   14aa4:	mov	r2, #5
   14aa8:	bl	10f20 <dcgettext@plt>
   14aac:	mov	r2, r0
   14ab0:	ldr	r3, [r7]
   14ab4:	mov	r0, r8
   14ab8:	mov	r1, #1
   14abc:	sub	sp, fp, #24
   14ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ac4:	b	11064 <__fprintf_chk@plt>
   14ac8:	movw	r1, #27304	; 0x6aa8
   14acc:	movt	r1, #1
   14ad0:	mov	r0, #0
   14ad4:	mov	r2, #5
   14ad8:	bl	10f20 <dcgettext@plt>
   14adc:	mov	r2, r0
   14ae0:	ldr	r3, [r7]
   14ae4:	ldr	r0, [r7, #4]
   14ae8:	str	r0, [sp]
   14aec:	b	14bdc <__assert_fail@plt+0x3adc>
   14af0:	movw	r1, #27327	; 0x6abf
   14af4:	movt	r1, #1
   14af8:	mov	r0, #0
   14afc:	mov	r2, #5
   14b00:	bl	10f20 <dcgettext@plt>
   14b04:	mov	r2, r0
   14b08:	ldr	r3, [r7]
   14b0c:	ldmib	r7, {r0, r1}
   14b10:	stm	sp, {r0, r1}
   14b14:	b	14bdc <__assert_fail@plt+0x3adc>
   14b18:	movw	r1, #27355	; 0x6adb
   14b1c:	movt	r1, #1
   14b20:	mov	r0, #0
   14b24:	mov	r2, #5
   14b28:	bl	10f20 <dcgettext@plt>
   14b2c:	mov	r2, r0
   14b30:	ldr	r3, [r7]
   14b34:	ldmib	r7, {r0, r1, r7}
   14b38:	stm	sp, {r0, r1, r7}
   14b3c:	b	14bdc <__assert_fail@plt+0x3adc>
   14b40:	movw	r1, #27387	; 0x6afb
   14b44:	movt	r1, #1
   14b48:	mov	r0, #0
   14b4c:	mov	r2, #5
   14b50:	bl	10f20 <dcgettext@plt>
   14b54:	mov	r2, r0
   14b58:	ldr	r3, [r7]
   14b5c:	ldmib	r7, {r0, r1, r6, r7}
   14b60:	stm	sp, {r0, r1, r6, r7}
   14b64:	b	14bdc <__assert_fail@plt+0x3adc>
   14b68:	movw	r1, #27423	; 0x6b1f
   14b6c:	movt	r1, #1
   14b70:	mov	r0, #0
   14b74:	mov	r2, #5
   14b78:	bl	10f20 <dcgettext@plt>
   14b7c:	mov	r2, r0
   14b80:	ldr	r3, [r7]
   14b84:	ldmib	r7, {r0, r1, r6}
   14b88:	ldr	r5, [r7, #16]
   14b8c:	ldr	r7, [r7, #20]
   14b90:	stm	sp, {r0, r1, r6}
   14b94:	str	r5, [sp, #12]
   14b98:	str	r7, [sp, #16]
   14b9c:	b	14bdc <__assert_fail@plt+0x3adc>
   14ba0:	movw	r1, #27463	; 0x6b47
   14ba4:	movt	r1, #1
   14ba8:	mov	r0, #0
   14bac:	mov	r2, #5
   14bb0:	bl	10f20 <dcgettext@plt>
   14bb4:	mov	r2, r0
   14bb8:	ldr	r3, [r7]
   14bbc:	ldmib	r7, {r0, r1, r6}
   14bc0:	ldr	r5, [r7, #16]
   14bc4:	ldr	r4, [r7, #20]
   14bc8:	ldr	r7, [r7, #24]
   14bcc:	stm	sp, {r0, r1, r6}
   14bd0:	str	r5, [sp, #12]
   14bd4:	str	r4, [sp, #16]
   14bd8:	str	r7, [sp, #20]
   14bdc:	mov	r0, r8
   14be0:	mov	r1, #1
   14be4:	b	14c90 <__assert_fail@plt+0x3b90>
   14be8:	movw	r1, #27555	; 0x6ba3
   14bec:	movt	r1, #1
   14bf0:	mov	r0, #0
   14bf4:	mov	r2, #5
   14bf8:	bl	10f20 <dcgettext@plt>
   14bfc:	mov	ip, r0
   14c00:	ldr	r3, [r7]
   14c04:	ldr	r0, [r7, #4]
   14c08:	ldr	r1, [r7, #8]
   14c0c:	ldr	r6, [r7, #12]
   14c10:	ldr	r5, [r7, #16]
   14c14:	ldr	r4, [r7, #20]
   14c18:	ldr	r2, [r7, #24]
   14c1c:	ldr	lr, [r7, #28]
   14c20:	ldr	r7, [r7, #32]
   14c24:	stm	sp, {r0, r1, r6}
   14c28:	str	r5, [sp, #12]
   14c2c:	str	r4, [sp, #16]
   14c30:	str	r2, [sp, #20]
   14c34:	str	lr, [sp, #24]
   14c38:	str	r7, [sp, #28]
   14c3c:	b	14c84 <__assert_fail@plt+0x3b84>
   14c40:	movw	r1, #27507	; 0x6b73
   14c44:	movt	r1, #1
   14c48:	mov	r0, #0
   14c4c:	mov	r2, #5
   14c50:	bl	10f20 <dcgettext@plt>
   14c54:	mov	ip, r0
   14c58:	ldr	r3, [r7]
   14c5c:	ldmib	r7, {r0, r1, r6}
   14c60:	ldr	r5, [r7, #16]
   14c64:	ldr	r4, [r7, #20]
   14c68:	ldr	r2, [r7, #24]
   14c6c:	ldr	r7, [r7, #28]
   14c70:	stm	sp, {r0, r1, r6}
   14c74:	str	r5, [sp, #12]
   14c78:	str	r4, [sp, #16]
   14c7c:	str	r2, [sp, #20]
   14c80:	str	r7, [sp, #24]
   14c84:	mov	r0, r8
   14c88:	mov	r1, #1
   14c8c:	mov	r2, ip
   14c90:	bl	11064 <__fprintf_chk@plt>
   14c94:	sub	sp, fp, #24
   14c98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c9c:	push	{r4, sl, fp, lr}
   14ca0:	add	fp, sp, #8
   14ca4:	sub	sp, sp, #8
   14ca8:	mov	lr, #0
   14cac:	ldr	ip, [fp, #8]
   14cb0:	ldr	r4, [ip, lr, lsl #2]
   14cb4:	add	lr, lr, #1
   14cb8:	cmp	r4, #0
   14cbc:	bne	14cb0 <__assert_fail@plt+0x3bb0>
   14cc0:	sub	r4, lr, #1
   14cc4:	str	ip, [sp]
   14cc8:	str	r4, [sp, #4]
   14ccc:	bl	14968 <__assert_fail@plt+0x3868>
   14cd0:	sub	sp, fp, #8
   14cd4:	pop	{r4, sl, fp, pc}
   14cd8:	push	{r4, r5, fp, lr}
   14cdc:	add	fp, sp, #8
   14ce0:	sub	sp, sp, #48	; 0x30
   14ce4:	mov	ip, #0
   14ce8:	ldr	r4, [fp, #8]
   14cec:	add	lr, sp, #8
   14cf0:	ldr	r5, [r4]
   14cf4:	str	r5, [lr, ip, lsl #2]
   14cf8:	cmp	r5, #0
   14cfc:	beq	14d14 <__assert_fail@plt+0x3c14>
   14d00:	add	ip, ip, #1
   14d04:	add	r4, r4, #4
   14d08:	cmp	ip, #10
   14d0c:	bne	14cf0 <__assert_fail@plt+0x3bf0>
   14d10:	mov	ip, #10
   14d14:	str	lr, [sp]
   14d18:	str	ip, [sp, #4]
   14d1c:	bl	14968 <__assert_fail@plt+0x3868>
   14d20:	sub	sp, fp, #8
   14d24:	pop	{r4, r5, fp, pc}
   14d28:	push	{fp, lr}
   14d2c:	mov	fp, sp
   14d30:	sub	sp, sp, #8
   14d34:	add	ip, fp, #8
   14d38:	str	ip, [sp, #4]
   14d3c:	str	ip, [sp]
   14d40:	bl	14cd8 <__assert_fail@plt+0x3bd8>
   14d44:	mov	sp, fp
   14d48:	pop	{fp, pc}
   14d4c:	push	{fp, lr}
   14d50:	mov	fp, sp
   14d54:	movw	r0, #29012	; 0x7154
   14d58:	movt	r0, #2
   14d5c:	ldr	r1, [r0]
   14d60:	movw	r0, #26392	; 0x6718
   14d64:	movt	r0, #1
   14d68:	bl	10e90 <fputs_unlocked@plt>
   14d6c:	movw	r1, #27667	; 0x6c13
   14d70:	movt	r1, #1
   14d74:	mov	r0, #0
   14d78:	mov	r2, #5
   14d7c:	bl	10f20 <dcgettext@plt>
   14d80:	mov	r1, r0
   14d84:	movw	r2, #27687	; 0x6c27
   14d88:	movt	r2, #1
   14d8c:	mov	r0, #1
   14d90:	bl	11040 <__printf_chk@plt>
   14d94:	movw	r1, #27709	; 0x6c3d
   14d98:	movt	r1, #1
   14d9c:	mov	r0, #0
   14da0:	mov	r2, #5
   14da4:	bl	10f20 <dcgettext@plt>
   14da8:	mov	r1, r0
   14dac:	movw	r2, #25860	; 0x6504
   14db0:	movt	r2, #1
   14db4:	movw	r3, #26201	; 0x6659
   14db8:	movt	r3, #1
   14dbc:	mov	r0, #1
   14dc0:	bl	11040 <__printf_chk@plt>
   14dc4:	movw	r1, #27729	; 0x6c51
   14dc8:	movt	r1, #1
   14dcc:	mov	r0, #0
   14dd0:	mov	r2, #5
   14dd4:	bl	10f20 <dcgettext@plt>
   14dd8:	mov	r1, r0
   14ddc:	movw	r2, #27768	; 0x6c78
   14de0:	movt	r2, #1
   14de4:	mov	r0, #1
   14de8:	pop	{fp, lr}
   14dec:	b	11040 <__printf_chk@plt>
   14df0:	b	14df4 <__assert_fail@plt+0x3cf4>
   14df4:	push	{r4, r5, r6, sl, fp, lr}
   14df8:	add	fp, sp, #16
   14dfc:	mov	r4, r2
   14e00:	mov	r5, r1
   14e04:	mov	r6, r0
   14e08:	bl	15dc4 <__assert_fail@plt+0x4cc4>
   14e0c:	cmp	r0, #0
   14e10:	popne	{r4, r5, r6, sl, fp, pc}
   14e14:	cmp	r6, #0
   14e18:	beq	14e2c <__assert_fail@plt+0x3d2c>
   14e1c:	cmp	r5, #0
   14e20:	cmpne	r4, #0
   14e24:	bne	14e2c <__assert_fail@plt+0x3d2c>
   14e28:	pop	{r4, r5, r6, sl, fp, pc}
   14e2c:	bl	151b8 <__assert_fail@plt+0x40b8>
   14e30:	push	{fp, lr}
   14e34:	mov	fp, sp
   14e38:	bl	15884 <__assert_fail@plt+0x4784>
   14e3c:	pop	{fp, lr}
   14e40:	b	14e44 <__assert_fail@plt+0x3d44>
   14e44:	cmp	r0, #0
   14e48:	bxne	lr
   14e4c:	push	{fp, lr}
   14e50:	mov	fp, sp
   14e54:	bl	151b8 <__assert_fail@plt+0x40b8>
   14e58:	push	{fp, lr}
   14e5c:	mov	fp, sp
   14e60:	bl	15cf4 <__assert_fail@plt+0x4bf4>
   14e64:	pop	{fp, lr}
   14e68:	b	14e44 <__assert_fail@plt+0x3d44>
   14e6c:	b	14e30 <__assert_fail@plt+0x3d30>
   14e70:	push	{r4, r5, fp, lr}
   14e74:	add	fp, sp, #8
   14e78:	mov	r4, r1
   14e7c:	mov	r5, r0
   14e80:	bl	158b4 <__assert_fail@plt+0x47b4>
   14e84:	cmp	r0, #0
   14e88:	popne	{r4, r5, fp, pc}
   14e8c:	cmp	r5, #0
   14e90:	beq	14ea0 <__assert_fail@plt+0x3da0>
   14e94:	cmp	r4, #0
   14e98:	bne	14ea0 <__assert_fail@plt+0x3da0>
   14e9c:	pop	{r4, r5, fp, pc}
   14ea0:	bl	151b8 <__assert_fail@plt+0x40b8>
   14ea4:	push	{fp, lr}
   14ea8:	mov	fp, sp
   14eac:	bl	15cf8 <__assert_fail@plt+0x4bf8>
   14eb0:	pop	{fp, lr}
   14eb4:	b	14e44 <__assert_fail@plt+0x3d44>
   14eb8:	push	{fp, lr}
   14ebc:	mov	fp, sp
   14ec0:	bl	15d08 <__assert_fail@plt+0x4c08>
   14ec4:	pop	{fp, lr}
   14ec8:	b	14e44 <__assert_fail@plt+0x3d44>
   14ecc:	mov	r2, r1
   14ed0:	mov	r1, r0
   14ed4:	mov	r0, #0
   14ed8:	b	14df4 <__assert_fail@plt+0x3cf4>
   14edc:	mov	r2, r1
   14ee0:	mov	r1, r0
   14ee4:	mov	r0, #0
   14ee8:	b	14eb8 <__assert_fail@plt+0x3db8>
   14eec:	mov	r2, #1
   14ef0:	b	14ef4 <__assert_fail@plt+0x3df4>
   14ef4:	push	{r4, r5, fp, lr}
   14ef8:	add	fp, sp, #8
   14efc:	mov	r4, r1
   14f00:	ldr	r5, [r1]
   14f04:	cmp	r0, #0
   14f08:	beq	14f20 <__assert_fail@plt+0x3e20>
   14f0c:	mov	r1, #1
   14f10:	add	r1, r1, r5, lsr #1
   14f14:	adds	r5, r5, r1
   14f18:	bcc	14f38 <__assert_fail@plt+0x3e38>
   14f1c:	bl	151b8 <__assert_fail@plt+0x40b8>
   14f20:	cmp	r5, #0
   14f24:	bne	14f38 <__assert_fail@plt+0x3e38>
   14f28:	mov	r1, #64	; 0x40
   14f2c:	udiv	r5, r1, r2
   14f30:	cmp	r2, #64	; 0x40
   14f34:	addhi	r5, r5, #1
   14f38:	mov	r1, r5
   14f3c:	bl	14df4 <__assert_fail@plt+0x3cf4>
   14f40:	str	r5, [r4]
   14f44:	pop	{r4, r5, fp, pc}
   14f48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f4c:	add	fp, sp, #24
   14f50:	mov	r8, r1
   14f54:	ldr	r6, [r1]
   14f58:	add	r1, r6, r6, asr #1
   14f5c:	cmp	r1, r6
   14f60:	mvnvs	r1, #-2147483648	; 0x80000000
   14f64:	cmp	r1, r3
   14f68:	mov	r5, r1
   14f6c:	movgt	r5, r3
   14f70:	cmn	r3, #1
   14f74:	movle	r5, r1
   14f78:	ldr	r4, [fp, #8]
   14f7c:	cmn	r4, #1
   14f80:	ble	14fa8 <__assert_fail@plt+0x3ea8>
   14f84:	cmp	r4, #0
   14f88:	beq	14ffc <__assert_fail@plt+0x3efc>
   14f8c:	cmn	r5, #1
   14f90:	ble	14fd0 <__assert_fail@plt+0x3ed0>
   14f94:	mvn	r7, #-2147483648	; 0x80000000
   14f98:	udiv	r1, r7, r4
   14f9c:	cmp	r1, r5
   14fa0:	bge	14ffc <__assert_fail@plt+0x3efc>
   14fa4:	b	1500c <__assert_fail@plt+0x3f0c>
   14fa8:	cmn	r5, #1
   14fac:	ble	14fec <__assert_fail@plt+0x3eec>
   14fb0:	cmn	r4, #1
   14fb4:	beq	14ffc <__assert_fail@plt+0x3efc>
   14fb8:	mov	r1, #-2147483648	; 0x80000000
   14fbc:	sdiv	r1, r1, r4
   14fc0:	mvn	r7, #-2147483648	; 0x80000000
   14fc4:	cmp	r1, r5
   14fc8:	bge	14ffc <__assert_fail@plt+0x3efc>
   14fcc:	b	1500c <__assert_fail@plt+0x3f0c>
   14fd0:	beq	14ffc <__assert_fail@plt+0x3efc>
   14fd4:	mov	r1, #-2147483648	; 0x80000000
   14fd8:	sdiv	r1, r1, r5
   14fdc:	mvn	r7, #-2147483648	; 0x80000000
   14fe0:	cmp	r1, r4
   14fe4:	bge	14ffc <__assert_fail@plt+0x3efc>
   14fe8:	b	1500c <__assert_fail@plt+0x3f0c>
   14fec:	mvn	r7, #-2147483648	; 0x80000000
   14ff0:	sdiv	r1, r7, r4
   14ff4:	cmp	r5, r1
   14ff8:	blt	1500c <__assert_fail@plt+0x3f0c>
   14ffc:	mul	r1, r5, r4
   15000:	mov	r7, #64	; 0x40
   15004:	cmp	r1, #63	; 0x3f
   15008:	bgt	15014 <__assert_fail@plt+0x3f14>
   1500c:	sdiv	r5, r7, r4
   15010:	mul	r1, r5, r4
   15014:	cmp	r0, #0
   15018:	moveq	r7, #0
   1501c:	streq	r7, [r8]
   15020:	sub	r7, r5, r6
   15024:	cmp	r7, r2
   15028:	bge	150d4 <__assert_fail@plt+0x3fd4>
   1502c:	add	r5, r6, r2
   15030:	mov	r1, #0
   15034:	cmp	r5, r3
   15038:	mov	r2, #0
   1503c:	movwgt	r2, #1
   15040:	cmn	r3, #1
   15044:	movwgt	r1, #1
   15048:	cmp	r5, r6
   1504c:	bvs	150bc <__assert_fail@plt+0x3fbc>
   15050:	ands	r1, r1, r2
   15054:	bne	150bc <__assert_fail@plt+0x3fbc>
   15058:	cmn	r4, #1
   1505c:	ble	15084 <__assert_fail@plt+0x3f84>
   15060:	cmp	r4, #0
   15064:	beq	150d0 <__assert_fail@plt+0x3fd0>
   15068:	cmn	r5, #1
   1506c:	ble	150a8 <__assert_fail@plt+0x3fa8>
   15070:	mvn	r1, #-2147483648	; 0x80000000
   15074:	udiv	r1, r1, r4
   15078:	cmp	r1, r5
   1507c:	bge	150d0 <__assert_fail@plt+0x3fd0>
   15080:	b	150bc <__assert_fail@plt+0x3fbc>
   15084:	cmn	r5, #1
   15088:	ble	150c0 <__assert_fail@plt+0x3fc0>
   1508c:	cmn	r4, #1
   15090:	beq	150d0 <__assert_fail@plt+0x3fd0>
   15094:	mov	r1, #-2147483648	; 0x80000000
   15098:	sdiv	r1, r1, r4
   1509c:	cmp	r1, r5
   150a0:	bge	150d0 <__assert_fail@plt+0x3fd0>
   150a4:	b	150bc <__assert_fail@plt+0x3fbc>
   150a8:	beq	150d0 <__assert_fail@plt+0x3fd0>
   150ac:	mov	r1, #-2147483648	; 0x80000000
   150b0:	sdiv	r1, r1, r5
   150b4:	cmp	r1, r4
   150b8:	bge	150d0 <__assert_fail@plt+0x3fd0>
   150bc:	bl	151b8 <__assert_fail@plt+0x40b8>
   150c0:	mvn	r1, #-2147483648	; 0x80000000
   150c4:	sdiv	r1, r1, r4
   150c8:	cmp	r5, r1
   150cc:	blt	150bc <__assert_fail@plt+0x3fbc>
   150d0:	mul	r1, r5, r4
   150d4:	bl	14e70 <__assert_fail@plt+0x3d70>
   150d8:	str	r5, [r8]
   150dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150e0:	mov	r1, #1
   150e4:	b	150e8 <__assert_fail@plt+0x3fe8>
   150e8:	push	{fp, lr}
   150ec:	mov	fp, sp
   150f0:	bl	15830 <__assert_fail@plt+0x4730>
   150f4:	pop	{fp, lr}
   150f8:	b	14e44 <__assert_fail@plt+0x3d44>
   150fc:	mov	r1, #1
   15100:	b	15104 <__assert_fail@plt+0x4004>
   15104:	push	{fp, lr}
   15108:	mov	fp, sp
   1510c:	bl	15d04 <__assert_fail@plt+0x4c04>
   15110:	pop	{fp, lr}
   15114:	b	14e44 <__assert_fail@plt+0x3d44>
   15118:	push	{r4, r5, fp, lr}
   1511c:	add	fp, sp, #8
   15120:	mov	r4, r1
   15124:	mov	r5, r0
   15128:	mov	r0, r1
   1512c:	bl	14e30 <__assert_fail@plt+0x3d30>
   15130:	mov	r1, r5
   15134:	mov	r2, r4
   15138:	pop	{r4, r5, fp, lr}
   1513c:	b	10ef0 <memcpy@plt>
   15140:	push	{r4, r5, fp, lr}
   15144:	add	fp, sp, #8
   15148:	mov	r4, r1
   1514c:	mov	r5, r0
   15150:	mov	r0, r1
   15154:	bl	14e58 <__assert_fail@plt+0x3d58>
   15158:	mov	r1, r5
   1515c:	mov	r2, r4
   15160:	pop	{r4, r5, fp, lr}
   15164:	b	10ef0 <memcpy@plt>
   15168:	push	{r4, r5, fp, lr}
   1516c:	add	fp, sp, #8
   15170:	mov	r4, r1
   15174:	mov	r5, r0
   15178:	add	r0, r1, #1
   1517c:	bl	14e58 <__assert_fail@plt+0x3d58>
   15180:	mov	r1, #0
   15184:	strb	r1, [r0, r4]
   15188:	mov	r1, r5
   1518c:	mov	r2, r4
   15190:	pop	{r4, r5, fp, lr}
   15194:	b	10ef0 <memcpy@plt>
   15198:	push	{r4, sl, fp, lr}
   1519c:	add	fp, sp, #8
   151a0:	mov	r4, r0
   151a4:	bl	11004 <strlen@plt>
   151a8:	add	r1, r0, #1
   151ac:	mov	r0, r4
   151b0:	pop	{r4, sl, fp, lr}
   151b4:	b	15118 <__assert_fail@plt+0x4018>
   151b8:	push	{fp, lr}
   151bc:	mov	fp, sp
   151c0:	movw	r0, #28916	; 0x70f4
   151c4:	movt	r0, #2
   151c8:	ldr	r4, [r0]
   151cc:	movw	r1, #27844	; 0x6cc4
   151d0:	movt	r1, #1
   151d4:	mov	r0, #0
   151d8:	mov	r2, #5
   151dc:	bl	10f20 <dcgettext@plt>
   151e0:	mov	r3, r0
   151e4:	movw	r2, #26807	; 0x68b7
   151e8:	movt	r2, #1
   151ec:	mov	r0, r4
   151f0:	mov	r1, #0
   151f4:	bl	10f98 <error@plt>
   151f8:	bl	110e8 <abort@plt>
   151fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15200:	add	fp, sp, #24
   15204:	sub	sp, sp, #16
   15208:	mov	r5, r3
   1520c:	mov	r6, r2
   15210:	mov	r2, r1
   15214:	mov	r8, r0
   15218:	ldr	r0, [fp, #16]
   1521c:	str	r0, [sp]
   15220:	add	r3, sp, #8
   15224:	mov	r0, r8
   15228:	mov	r1, #0
   1522c:	bl	152f4 <__assert_fail@plt+0x41f4>
   15230:	cmp	r0, #0
   15234:	bne	152c4 <__assert_fail@plt+0x41c4>
   15238:	ldr	r7, [sp, #8]
   1523c:	ldr	r4, [sp, #12]
   15240:	subs	r0, r7, r6
   15244:	sbcs	r0, r4, r5
   15248:	bcc	1526c <__assert_fail@plt+0x416c>
   1524c:	ldr	r0, [fp, #12]
   15250:	ldr	r1, [fp, #8]
   15254:	subs	r1, r1, r7
   15258:	sbcs	r0, r0, r4
   1525c:	ldrcs	r0, [sp, #8]
   15260:	ldrcs	r1, [sp, #12]
   15264:	subcs	sp, fp, #24
   15268:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1526c:	bl	1101c <__errno_location@plt>
   15270:	subs	r1, r7, #1073741824	; 0x40000000
   15274:	sbcs	r1, r4, #0
   15278:	movcc	r1, #34	; 0x22
   1527c:	movcs	r1, #75	; 0x4b
   15280:	str	r1, [r0]
   15284:	ldr	r5, [fp, #24]
   15288:	ldr	r6, [fp, #20]
   1528c:	bl	1101c <__errno_location@plt>
   15290:	ldr	r4, [r0]
   15294:	mov	r0, r8
   15298:	bl	14550 <__assert_fail@plt+0x3450>
   1529c:	str	r0, [sp]
   152a0:	subs	r1, r4, #22
   152a4:	movne	r1, r4
   152a8:	cmp	r5, #0
   152ac:	movweq	r5, #1
   152b0:	movw	r2, #26803	; 0x68b3
   152b4:	movt	r2, #1
   152b8:	mov	r0, r5
   152bc:	mov	r3, r6
   152c0:	bl	10f98 <error@plt>
   152c4:	cmp	r0, #1
   152c8:	beq	152e0 <__assert_fail@plt+0x41e0>
   152cc:	cmp	r0, #3
   152d0:	bne	15284 <__assert_fail@plt+0x4184>
   152d4:	bl	1101c <__errno_location@plt>
   152d8:	mov	r1, #0
   152dc:	b	15280 <__assert_fail@plt+0x4180>
   152e0:	bl	1101c <__errno_location@plt>
   152e4:	mov	r1, #75	; 0x4b
   152e8:	b	15280 <__assert_fail@plt+0x4180>
   152ec:	mov	r1, #10
   152f0:	b	151fc <__assert_fail@plt+0x40fc>
   152f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152f8:	add	fp, sp, #28
   152fc:	sub	sp, sp, #20
   15300:	cmp	r2, #37	; 0x25
   15304:	bcs	15738 <__assert_fail@plt+0x4638>
   15308:	mov	r5, r2
   1530c:	mov	r6, r1
   15310:	mov	r4, r0
   15314:	str	r3, [sp, #4]
   15318:	ldr	sl, [fp, #8]
   1531c:	bl	1101c <__errno_location@plt>
   15320:	mov	r7, r0
   15324:	mov	r0, #0
   15328:	str	r0, [r7]
   1532c:	bl	10fe0 <__ctype_b_loc@plt>
   15330:	ldr	r1, [r0]
   15334:	mov	r2, r4
   15338:	ldrb	r0, [r2], #1
   1533c:	add	r3, r1, r0, lsl #1
   15340:	ldrb	r3, [r3, #1]
   15344:	tst	r3, #32
   15348:	bne	15338 <__assert_fail@plt+0x4238>
   1534c:	add	r9, sp, #16
   15350:	cmp	r6, #0
   15354:	movne	r9, r6
   15358:	mov	r8, #4
   1535c:	cmp	r0, #45	; 0x2d
   15360:	beq	1572c <__assert_fail@plt+0x462c>
   15364:	mov	r0, r4
   15368:	mov	r1, r9
   1536c:	mov	r2, r5
   15370:	bl	11058 <strtoumax@plt>
   15374:	str	r1, [sp, #12]
   15378:	str	r0, [sp, #8]
   1537c:	ldr	r6, [r9]
   15380:	cmp	r6, r4
   15384:	beq	153ac <__assert_fail@plt+0x42ac>
   15388:	ldr	r0, [r7]
   1538c:	cmp	r0, #0
   15390:	beq	153e4 <__assert_fail@plt+0x42e4>
   15394:	cmp	r0, #34	; 0x22
   15398:	bne	1572c <__assert_fail@plt+0x462c>
   1539c:	mov	r8, #1
   153a0:	cmp	sl, #0
   153a4:	bne	153f0 <__assert_fail@plt+0x42f0>
   153a8:	b	1571c <__assert_fail@plt+0x461c>
   153ac:	cmp	sl, #0
   153b0:	beq	1572c <__assert_fail@plt+0x462c>
   153b4:	ldrb	r1, [r6]
   153b8:	cmp	r1, #0
   153bc:	beq	1572c <__assert_fail@plt+0x462c>
   153c0:	mov	r0, sl
   153c4:	bl	11010 <strchr@plt>
   153c8:	cmp	r0, #0
   153cc:	beq	1572c <__assert_fail@plt+0x462c>
   153d0:	mov	r8, #0
   153d4:	str	r8, [sp, #12]
   153d8:	mov	r0, #1
   153dc:	str	r0, [sp, #8]
   153e0:	b	153f0 <__assert_fail@plt+0x42f0>
   153e4:	mov	r8, r0
   153e8:	cmp	sl, #0
   153ec:	beq	1571c <__assert_fail@plt+0x461c>
   153f0:	ldrb	r4, [r6]
   153f4:	cmp	r4, #0
   153f8:	beq	1571c <__assert_fail@plt+0x461c>
   153fc:	mov	r0, sl
   15400:	mov	r1, r4
   15404:	bl	11010 <strchr@plt>
   15408:	cmp	r0, #0
   1540c:	beq	15638 <__assert_fail@plt+0x4538>
   15410:	sub	r0, r4, #69	; 0x45
   15414:	mov	r7, #1
   15418:	mov	r5, #1024	; 0x400
   1541c:	cmp	r0, #47	; 0x2f
   15420:	bhi	15534 <__assert_fail@plt+0x4434>
   15424:	add	r1, pc, #0
   15428:	ldr	pc, [r1, r0, lsl #2]
   1542c:	andeq	r5, r1, ip, ror #9
   15430:	andeq	r5, r1, r4, lsr r5
   15434:	andeq	r5, r1, ip, ror #9
   15438:	andeq	r5, r1, r4, lsr r5
   1543c:	andeq	r5, r1, r4, lsr r5
   15440:	andeq	r5, r1, r4, lsr r5
   15444:	andeq	r5, r1, ip, ror #9
   15448:	andeq	r5, r1, r4, lsr r5
   1544c:	andeq	r5, r1, ip, ror #9
   15450:	andeq	r5, r1, r4, lsr r5
   15454:	andeq	r5, r1, r4, lsr r5
   15458:	andeq	r5, r1, ip, ror #9
   1545c:	andeq	r5, r1, r4, lsr r5
   15460:	andeq	r5, r1, r4, lsr r5
   15464:	andeq	r5, r1, r4, lsr r5
   15468:	andeq	r5, r1, ip, ror #9
   1546c:	andeq	r5, r1, r4, lsr r5
   15470:	andeq	r5, r1, r4, lsr r5
   15474:	andeq	r5, r1, r4, lsr r5
   15478:	andeq	r5, r1, r4, lsr r5
   1547c:	andeq	r5, r1, ip, ror #9
   15480:	andeq	r5, r1, ip, ror #9
   15484:	andeq	r5, r1, r4, lsr r5
   15488:	andeq	r5, r1, r4, lsr r5
   1548c:	andeq	r5, r1, r4, lsr r5
   15490:	andeq	r5, r1, r4, lsr r5
   15494:	andeq	r5, r1, r4, lsr r5
   15498:	andeq	r5, r1, r4, lsr r5
   1549c:	andeq	r5, r1, r4, lsr r5
   154a0:	andeq	r5, r1, r4, lsr r5
   154a4:	andeq	r5, r1, r4, lsr r5
   154a8:	andeq	r5, r1, r4, lsr r5
   154ac:	andeq	r5, r1, r4, lsr r5
   154b0:	andeq	r5, r1, r4, lsr r5
   154b4:	andeq	r5, r1, ip, ror #9
   154b8:	andeq	r5, r1, r4, lsr r5
   154bc:	andeq	r5, r1, r4, lsr r5
   154c0:	andeq	r5, r1, r4, lsr r5
   154c4:	andeq	r5, r1, ip, ror #9
   154c8:	andeq	r5, r1, r4, lsr r5
   154cc:	andeq	r5, r1, ip, ror #9
   154d0:	andeq	r5, r1, r4, lsr r5
   154d4:	andeq	r5, r1, r4, lsr r5
   154d8:	andeq	r5, r1, r4, lsr r5
   154dc:	andeq	r5, r1, r4, lsr r5
   154e0:	andeq	r5, r1, r4, lsr r5
   154e4:	andeq	r5, r1, r4, lsr r5
   154e8:	andeq	r5, r1, ip, ror #9
   154ec:	mov	r0, sl
   154f0:	mov	r1, #48	; 0x30
   154f4:	bl	11010 <strchr@plt>
   154f8:	cmp	r0, #0
   154fc:	beq	15534 <__assert_fail@plt+0x4434>
   15500:	ldrb	r0, [r6, #1]
   15504:	cmp	r0, #66	; 0x42
   15508:	cmpne	r0, #68	; 0x44
   1550c:	bne	1551c <__assert_fail@plt+0x441c>
   15510:	mov	r7, #2
   15514:	mov	r5, #1000	; 0x3e8
   15518:	b	15534 <__assert_fail@plt+0x4434>
   1551c:	cmp	r0, #105	; 0x69
   15520:	bne	15534 <__assert_fail@plt+0x4434>
   15524:	ldrb	r0, [r6, #2]
   15528:	mov	r7, #1
   1552c:	cmp	r0, #66	; 0x42
   15530:	movweq	r7, #3
   15534:	sub	r1, r4, #66	; 0x42
   15538:	cmp	r1, #53	; 0x35
   1553c:	bhi	15638 <__assert_fail@plt+0x4538>
   15540:	mov	r0, #0
   15544:	add	r2, pc, #0
   15548:	ldr	pc, [r2, r1, lsl #2]
   1554c:	andeq	r5, r1, r0, lsr #13
   15550:	andeq	r5, r1, r8, lsr r6
   15554:	andeq	r5, r1, r8, lsr r6
   15558:	andeq	r5, r1, ip, lsr #13
   1555c:	andeq	r5, r1, r8, lsr r6
   15560:	andeq	r5, r1, r4, lsr #12
   15564:	andeq	r5, r1, r8, lsr r6
   15568:	andeq	r5, r1, r8, lsr r6
   1556c:	andeq	r5, r1, r8, lsr r6
   15570:	andeq	r5, r1, r0, asr r6
   15574:	andeq	r5, r1, r8, lsr r6
   15578:	andeq	r5, r1, r4, ror #12
   1557c:	andeq	r5, r1, r8, lsr r6
   15580:	andeq	r5, r1, r8, lsr r6
   15584:	andeq	r5, r1, r0, asr #13
   15588:	andeq	r5, r1, r8, lsr r6
   1558c:	andeq	r5, r1, r8, lsr r6
   15590:	andeq	r5, r1, r8, lsr r6
   15594:	andeq	r5, r1, r8, ror r6
   15598:	andeq	r5, r1, r8, lsr r6
   1559c:	andeq	r5, r1, r8, lsr r6
   155a0:	andeq	r5, r1, r8, lsr r6
   155a4:	andeq	r5, r1, r8, lsr r6
   155a8:	ldrdeq	r5, [r1], -r4
   155ac:	andeq	r5, r1, ip, lsl #13
   155b0:	andeq	r5, r1, r8, lsr r6
   155b4:	andeq	r5, r1, r8, lsr r6
   155b8:	andeq	r5, r1, r8, lsr r6
   155bc:	andeq	r5, r1, r8, lsr r6
   155c0:	andeq	r5, r1, r8, lsr r6
   155c4:	andeq	r5, r1, r8, lsr r6
   155c8:	andeq	r5, r1, r8, lsr r6
   155cc:	andeq	r5, r1, r8, ror #13
   155d0:	andeq	r5, r1, r0, lsl #14
   155d4:	andeq	r5, r1, r8, lsr r6
   155d8:	andeq	r5, r1, r8, lsr r6
   155dc:	andeq	r5, r1, r8, lsr r6
   155e0:	andeq	r5, r1, r4, lsr #12
   155e4:	andeq	r5, r1, r8, lsr r6
   155e8:	andeq	r5, r1, r8, lsr r6
   155ec:	andeq	r5, r1, r8, lsr r6
   155f0:	andeq	r5, r1, r0, asr r6
   155f4:	andeq	r5, r1, r8, lsr r6
   155f8:	andeq	r5, r1, r4, ror #12
   155fc:	andeq	r5, r1, r8, lsr r6
   15600:	andeq	r5, r1, r8, lsr r6
   15604:	andeq	r5, r1, r8, lsr r6
   15608:	andeq	r5, r1, r8, lsr r6
   1560c:	andeq	r5, r1, r8, lsr r6
   15610:	andeq	r5, r1, r8, lsr r6
   15614:	andeq	r5, r1, r8, ror r6
   15618:	andeq	r5, r1, r8, lsr r6
   1561c:	andeq	r5, r1, r8, lsr r6
   15620:	strdeq	r5, [r1], -r4
   15624:	add	r0, sp, #8
   15628:	mov	r1, r5
   1562c:	mov	r2, #3
   15630:	bl	157e4 <__assert_fail@plt+0x46e4>
   15634:	b	15700 <__assert_fail@plt+0x4600>
   15638:	ldr	r0, [sp, #8]
   1563c:	ldr	r1, [sp, #12]
   15640:	ldr	r2, [sp, #4]
   15644:	strd	r0, [r2]
   15648:	orr	r8, r8, #2
   1564c:	b	1572c <__assert_fail@plt+0x462c>
   15650:	add	r0, sp, #8
   15654:	mov	r1, r5
   15658:	mov	r2, #1
   1565c:	bl	157e4 <__assert_fail@plt+0x46e4>
   15660:	b	15700 <__assert_fail@plt+0x4600>
   15664:	add	r0, sp, #8
   15668:	mov	r1, r5
   1566c:	mov	r2, #2
   15670:	bl	157e4 <__assert_fail@plt+0x46e4>
   15674:	b	15700 <__assert_fail@plt+0x4600>
   15678:	add	r0, sp, #8
   1567c:	mov	r1, r5
   15680:	mov	r2, #4
   15684:	bl	157e4 <__assert_fail@plt+0x46e4>
   15688:	b	15700 <__assert_fail@plt+0x4600>
   1568c:	add	r0, sp, #8
   15690:	mov	r1, r5
   15694:	mov	r2, #7
   15698:	bl	157e4 <__assert_fail@plt+0x46e4>
   1569c:	b	15700 <__assert_fail@plt+0x4600>
   156a0:	add	r0, sp, #8
   156a4:	mov	r1, #1024	; 0x400
   156a8:	b	156fc <__assert_fail@plt+0x45fc>
   156ac:	add	r0, sp, #8
   156b0:	mov	r1, r5
   156b4:	mov	r2, #6
   156b8:	bl	157e4 <__assert_fail@plt+0x46e4>
   156bc:	b	15700 <__assert_fail@plt+0x4600>
   156c0:	add	r0, sp, #8
   156c4:	mov	r1, r5
   156c8:	mov	r2, #5
   156cc:	bl	157e4 <__assert_fail@plt+0x46e4>
   156d0:	b	15700 <__assert_fail@plt+0x4600>
   156d4:	add	r0, sp, #8
   156d8:	mov	r1, r5
   156dc:	mov	r2, #8
   156e0:	bl	157e4 <__assert_fail@plt+0x46e4>
   156e4:	b	15700 <__assert_fail@plt+0x4600>
   156e8:	add	r0, sp, #8
   156ec:	mov	r1, #512	; 0x200
   156f0:	b	156fc <__assert_fail@plt+0x45fc>
   156f4:	add	r0, sp, #8
   156f8:	mov	r1, #2
   156fc:	bl	15758 <__assert_fail@plt+0x4658>
   15700:	ldr	r1, [r9]
   15704:	add	r2, r1, r7
   15708:	str	r2, [r9]
   1570c:	ldrb	r1, [r1, r7]
   15710:	orr	r8, r0, r8
   15714:	cmp	r1, #0
   15718:	orrne	r8, r8, #2
   1571c:	ldr	r0, [sp, #8]
   15720:	ldr	r1, [sp, #12]
   15724:	ldr	r2, [sp, #4]
   15728:	strd	r0, [r2]
   1572c:	mov	r0, r8
   15730:	sub	sp, fp, #28
   15734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15738:	movw	r0, #27861	; 0x6cd5
   1573c:	movt	r0, #1
   15740:	movw	r1, #27899	; 0x6cfb
   15744:	movt	r1, #1
   15748:	movw	r3, #27915	; 0x6d0b
   1574c:	movt	r3, #1
   15750:	mov	r2, #85	; 0x55
   15754:	bl	11100 <__assert_fail@plt>
   15758:	push	{r4, r5, r6, r7, fp, lr}
   1575c:	add	fp, sp, #16
   15760:	mov	r5, r1
   15764:	mov	r4, r0
   15768:	cmn	r1, #1
   1576c:	ble	157a4 <__assert_fail@plt+0x46a4>
   15770:	cmp	r5, #0
   15774:	beq	157c4 <__assert_fail@plt+0x46c4>
   15778:	asr	r3, r5, #31
   1577c:	mvn	r6, #0
   15780:	mvn	r0, #0
   15784:	mvn	r1, #0
   15788:	mov	r2, r5
   1578c:	bl	15f10 <__assert_fail@plt+0x4e10>
   15790:	ldrd	r2, [r4]
   15794:	subs	r0, r0, r2
   15798:	sbcs	r0, r1, r3
   1579c:	bcc	157b4 <__assert_fail@plt+0x46b4>
   157a0:	b	157c4 <__assert_fail@plt+0x46c4>
   157a4:	ldrd	r0, [r4]
   157a8:	orrs	r0, r0, r1
   157ac:	beq	157c4 <__assert_fail@plt+0x46c4>
   157b0:	mvn	r6, #0
   157b4:	mov	r0, #1
   157b8:	mvn	r7, #0
   157bc:	strd	r6, [r4]
   157c0:	pop	{r4, r5, r6, r7, fp, pc}
   157c4:	ldrd	r0, [r4]
   157c8:	umull	r6, r2, r0, r5
   157cc:	asr	r3, r5, #31
   157d0:	mla	r0, r0, r3, r2
   157d4:	mla	r7, r1, r5, r0
   157d8:	mov	r0, #0
   157dc:	strd	r6, [r4]
   157e0:	pop	{r4, r5, r6, r7, fp, pc}
   157e4:	push	{r4, r5, r6, r7, fp, lr}
   157e8:	add	fp, sp, #16
   157ec:	cmp	r2, #0
   157f0:	beq	15824 <__assert_fail@plt+0x4724>
   157f4:	mov	r4, r2
   157f8:	mov	r5, r1
   157fc:	mov	r7, r0
   15800:	mov	r6, #0
   15804:	mov	r0, r7
   15808:	mov	r1, r5
   1580c:	bl	15758 <__assert_fail@plt+0x4658>
   15810:	orr	r6, r0, r6
   15814:	subs	r4, r4, #1
   15818:	bne	15804 <__assert_fail@plt+0x4704>
   1581c:	mov	r0, r6
   15820:	pop	{r4, r5, r6, r7, fp, pc}
   15824:	mov	r6, #0
   15828:	mov	r0, r6
   1582c:	pop	{r4, r5, r6, r7, fp, pc}
   15830:	clz	r2, r1
   15834:	lsr	r2, r2, #5
   15838:	clz	r3, r0
   1583c:	lsr	r3, r3, #5
   15840:	orrs	r2, r3, r2
   15844:	movwne	r1, #1
   15848:	movwne	r0, #1
   1584c:	cmp	r1, #0
   15850:	beq	15880 <__assert_fail@plt+0x4780>
   15854:	mvn	r2, #-2147483648	; 0x80000000
   15858:	udiv	r2, r2, r1
   1585c:	cmp	r2, r0
   15860:	bcs	15880 <__assert_fail@plt+0x4780>
   15864:	push	{fp, lr}
   15868:	mov	fp, sp
   1586c:	bl	1101c <__errno_location@plt>
   15870:	mov	r1, #12
   15874:	str	r1, [r0]
   15878:	mov	r0, #0
   1587c:	pop	{fp, pc}
   15880:	b	10e84 <calloc@plt>
   15884:	cmp	r0, #0
   15888:	movweq	r0, #1
   1588c:	cmn	r0, #1
   15890:	ble	15898 <__assert_fail@plt+0x4798>
   15894:	b	10fa4 <malloc@plt>
   15898:	push	{fp, lr}
   1589c:	mov	fp, sp
   158a0:	bl	1101c <__errno_location@plt>
   158a4:	mov	r1, #12
   158a8:	str	r1, [r0]
   158ac:	mov	r0, #0
   158b0:	pop	{fp, pc}
   158b4:	push	{fp, lr}
   158b8:	mov	fp, sp
   158bc:	cmp	r0, #0
   158c0:	beq	158dc <__assert_fail@plt+0x47dc>
   158c4:	cmp	r1, #0
   158c8:	beq	158e8 <__assert_fail@plt+0x47e8>
   158cc:	cmn	r1, #1
   158d0:	ble	158f4 <__assert_fail@plt+0x47f4>
   158d4:	pop	{fp, lr}
   158d8:	b	10f2c <realloc@plt>
   158dc:	mov	r0, r1
   158e0:	pop	{fp, lr}
   158e4:	b	15884 <__assert_fail@plt+0x4784>
   158e8:	bl	15cb0 <__assert_fail@plt+0x4bb0>
   158ec:	mov	r0, #0
   158f0:	pop	{fp, pc}
   158f4:	bl	1101c <__errno_location@plt>
   158f8:	mov	r1, #12
   158fc:	str	r1, [r0]
   15900:	mov	r0, #0
   15904:	pop	{fp, pc}
   15908:	mov	r1, r0
   1590c:	sub	r2, r0, #65	; 0x41
   15910:	mov	r0, #1
   15914:	cmp	r2, #26
   15918:	subcs	r2, r1, #97	; 0x61
   1591c:	cmpcs	r2, #26
   15920:	bcs	15928 <__assert_fail@plt+0x4828>
   15924:	bx	lr
   15928:	sub	r1, r1, #48	; 0x30
   1592c:	cmp	r1, #10
   15930:	movcs	r0, #0
   15934:	bx	lr
   15938:	mov	r1, r0
   1593c:	sub	r2, r0, #65	; 0x41
   15940:	mov	r0, #1
   15944:	cmp	r2, #26
   15948:	subcs	r1, r1, #97	; 0x61
   1594c:	cmpcs	r1, #26
   15950:	movcs	r0, #0
   15954:	bx	lr
   15958:	mov	r1, #0
   1595c:	cmp	r0, #128	; 0x80
   15960:	movwcc	r1, #1
   15964:	mov	r0, r1
   15968:	bx	lr
   1596c:	sub	r1, r0, #9
   15970:	clz	r1, r1
   15974:	lsr	r1, r1, #5
   15978:	sub	r0, r0, #32
   1597c:	clz	r0, r0
   15980:	lsr	r0, r0, #5
   15984:	orr	r0, r0, r1
   15988:	bx	lr
   1598c:	mov	r1, r0
   15990:	mov	r0, #1
   15994:	cmp	r1, #32
   15998:	bxcc	lr
   1599c:	cmp	r1, #127	; 0x7f
   159a0:	movne	r0, #0
   159a4:	bx	lr
   159a8:	sub	r1, r0, #48	; 0x30
   159ac:	mov	r0, #0
   159b0:	cmp	r1, #10
   159b4:	movwcc	r0, #1
   159b8:	bx	lr
   159bc:	sub	r1, r0, #33	; 0x21
   159c0:	mov	r0, #0
   159c4:	cmp	r1, #94	; 0x5e
   159c8:	movwcc	r0, #1
   159cc:	bx	lr
   159d0:	sub	r1, r0, #97	; 0x61
   159d4:	mov	r0, #0
   159d8:	cmp	r1, #26
   159dc:	movwcc	r0, #1
   159e0:	bx	lr
   159e4:	sub	r1, r0, #32
   159e8:	mov	r0, #0
   159ec:	cmp	r1, #95	; 0x5f
   159f0:	movwcc	r0, #1
   159f4:	bx	lr
   159f8:	sub	r1, r0, #33	; 0x21
   159fc:	cmp	r1, #93	; 0x5d
   15a00:	bhi	15b8c <__assert_fail@plt+0x4a8c>
   15a04:	mov	r0, #1
   15a08:	add	r2, pc, #0
   15a0c:	ldr	pc, [r2, r1, lsl #2]
   15a10:	andeq	r5, r1, r8, lsl #23
   15a14:	andeq	r5, r1, r8, lsl #23
   15a18:	andeq	r5, r1, r8, lsl #23
   15a1c:	andeq	r5, r1, r8, lsl #23
   15a20:	andeq	r5, r1, r8, lsl #23
   15a24:	andeq	r5, r1, r8, lsl #23
   15a28:	andeq	r5, r1, r8, lsl #23
   15a2c:	andeq	r5, r1, r8, lsl #23
   15a30:	andeq	r5, r1, r8, lsl #23
   15a34:	andeq	r5, r1, r8, lsl #23
   15a38:	andeq	r5, r1, r8, lsl #23
   15a3c:	andeq	r5, r1, r8, lsl #23
   15a40:	andeq	r5, r1, r8, lsl #23
   15a44:	andeq	r5, r1, r8, lsl #23
   15a48:	andeq	r5, r1, r8, lsl #23
   15a4c:	andeq	r5, r1, ip, lsl #23
   15a50:	andeq	r5, r1, ip, lsl #23
   15a54:	andeq	r5, r1, ip, lsl #23
   15a58:	andeq	r5, r1, ip, lsl #23
   15a5c:	andeq	r5, r1, ip, lsl #23
   15a60:	andeq	r5, r1, ip, lsl #23
   15a64:	andeq	r5, r1, ip, lsl #23
   15a68:	andeq	r5, r1, ip, lsl #23
   15a6c:	andeq	r5, r1, ip, lsl #23
   15a70:	andeq	r5, r1, ip, lsl #23
   15a74:	andeq	r5, r1, r8, lsl #23
   15a78:	andeq	r5, r1, r8, lsl #23
   15a7c:	andeq	r5, r1, r8, lsl #23
   15a80:	andeq	r5, r1, r8, lsl #23
   15a84:	andeq	r5, r1, r8, lsl #23
   15a88:	andeq	r5, r1, r8, lsl #23
   15a8c:	andeq	r5, r1, r8, lsl #23
   15a90:	andeq	r5, r1, ip, lsl #23
   15a94:	andeq	r5, r1, ip, lsl #23
   15a98:	andeq	r5, r1, ip, lsl #23
   15a9c:	andeq	r5, r1, ip, lsl #23
   15aa0:	andeq	r5, r1, ip, lsl #23
   15aa4:	andeq	r5, r1, ip, lsl #23
   15aa8:	andeq	r5, r1, ip, lsl #23
   15aac:	andeq	r5, r1, ip, lsl #23
   15ab0:	andeq	r5, r1, ip, lsl #23
   15ab4:	andeq	r5, r1, ip, lsl #23
   15ab8:	andeq	r5, r1, ip, lsl #23
   15abc:	andeq	r5, r1, ip, lsl #23
   15ac0:	andeq	r5, r1, ip, lsl #23
   15ac4:	andeq	r5, r1, ip, lsl #23
   15ac8:	andeq	r5, r1, ip, lsl #23
   15acc:	andeq	r5, r1, ip, lsl #23
   15ad0:	andeq	r5, r1, ip, lsl #23
   15ad4:	andeq	r5, r1, ip, lsl #23
   15ad8:	andeq	r5, r1, ip, lsl #23
   15adc:	andeq	r5, r1, ip, lsl #23
   15ae0:	andeq	r5, r1, ip, lsl #23
   15ae4:	andeq	r5, r1, ip, lsl #23
   15ae8:	andeq	r5, r1, ip, lsl #23
   15aec:	andeq	r5, r1, ip, lsl #23
   15af0:	andeq	r5, r1, ip, lsl #23
   15af4:	andeq	r5, r1, ip, lsl #23
   15af8:	andeq	r5, r1, r8, lsl #23
   15afc:	andeq	r5, r1, r8, lsl #23
   15b00:	andeq	r5, r1, r8, lsl #23
   15b04:	andeq	r5, r1, r8, lsl #23
   15b08:	andeq	r5, r1, r8, lsl #23
   15b0c:	andeq	r5, r1, r8, lsl #23
   15b10:	andeq	r5, r1, ip, lsl #23
   15b14:	andeq	r5, r1, ip, lsl #23
   15b18:	andeq	r5, r1, ip, lsl #23
   15b1c:	andeq	r5, r1, ip, lsl #23
   15b20:	andeq	r5, r1, ip, lsl #23
   15b24:	andeq	r5, r1, ip, lsl #23
   15b28:	andeq	r5, r1, ip, lsl #23
   15b2c:	andeq	r5, r1, ip, lsl #23
   15b30:	andeq	r5, r1, ip, lsl #23
   15b34:	andeq	r5, r1, ip, lsl #23
   15b38:	andeq	r5, r1, ip, lsl #23
   15b3c:	andeq	r5, r1, ip, lsl #23
   15b40:	andeq	r5, r1, ip, lsl #23
   15b44:	andeq	r5, r1, ip, lsl #23
   15b48:	andeq	r5, r1, ip, lsl #23
   15b4c:	andeq	r5, r1, ip, lsl #23
   15b50:	andeq	r5, r1, ip, lsl #23
   15b54:	andeq	r5, r1, ip, lsl #23
   15b58:	andeq	r5, r1, ip, lsl #23
   15b5c:	andeq	r5, r1, ip, lsl #23
   15b60:	andeq	r5, r1, ip, lsl #23
   15b64:	andeq	r5, r1, ip, lsl #23
   15b68:	andeq	r5, r1, ip, lsl #23
   15b6c:	andeq	r5, r1, ip, lsl #23
   15b70:	andeq	r5, r1, ip, lsl #23
   15b74:	andeq	r5, r1, ip, lsl #23
   15b78:	andeq	r5, r1, r8, lsl #23
   15b7c:	andeq	r5, r1, r8, lsl #23
   15b80:	andeq	r5, r1, r8, lsl #23
   15b84:	andeq	r5, r1, r8, lsl #23
   15b88:	bx	lr
   15b8c:	mov	r0, #0
   15b90:	bx	lr
   15b94:	sub	r0, r0, #9
   15b98:	cmp	r0, #23
   15b9c:	movhi	r0, #0
   15ba0:	bxhi	lr
   15ba4:	bic	r0, r0, #-16777216	; 0xff000000
   15ba8:	movw	r1, #31
   15bac:	movt	r1, #128	; 0x80
   15bb0:	mov	r2, #1
   15bb4:	and	r0, r2, r1, lsr r0
   15bb8:	bx	lr
   15bbc:	sub	r1, r0, #65	; 0x41
   15bc0:	mov	r0, #0
   15bc4:	cmp	r1, #26
   15bc8:	movwcc	r0, #1
   15bcc:	bx	lr
   15bd0:	mov	r1, r0
   15bd4:	sub	r2, r0, #48	; 0x30
   15bd8:	mov	r0, #1
   15bdc:	cmp	r2, #22
   15be0:	bhi	15bf8 <__assert_fail@plt+0x4af8>
   15be4:	mov	ip, #1
   15be8:	movw	r3, #1023	; 0x3ff
   15bec:	movt	r3, #126	; 0x7e
   15bf0:	tst	r3, ip, lsl r2
   15bf4:	bxne	lr
   15bf8:	sub	r1, r1, #97	; 0x61
   15bfc:	cmp	r1, #6
   15c00:	movcs	r0, #0
   15c04:	bxcs	lr
   15c08:	bx	lr
   15c0c:	sub	r1, r0, #65	; 0x41
   15c10:	cmp	r1, #26
   15c14:	addcc	r0, r0, #32
   15c18:	bx	lr
   15c1c:	sub	r1, r0, #97	; 0x61
   15c20:	cmp	r1, #26
   15c24:	subcc	r0, r0, #32
   15c28:	bx	lr
   15c2c:	push	{r4, r5, r6, sl, fp, lr}
   15c30:	add	fp, sp, #16
   15c34:	mov	r4, r0
   15c38:	bl	10f74 <__fpending@plt>
   15c3c:	mov	r5, r0
   15c40:	mov	r0, r4
   15c44:	bl	10f80 <ferror_unlocked@plt>
   15c48:	mov	r6, r0
   15c4c:	mov	r0, r4
   15c50:	bl	12bac <__assert_fail@plt+0x1aac>
   15c54:	cmp	r6, #0
   15c58:	beq	15c7c <__assert_fail@plt+0x4b7c>
   15c5c:	mvn	r4, #0
   15c60:	cmp	r0, #0
   15c64:	bne	15ca8 <__assert_fail@plt+0x4ba8>
   15c68:	bl	1101c <__errno_location@plt>
   15c6c:	mov	r1, #0
   15c70:	str	r1, [r0]
   15c74:	mov	r0, r4
   15c78:	pop	{r4, r5, r6, sl, fp, pc}
   15c7c:	cmp	r0, #0
   15c80:	mov	r4, r0
   15c84:	mvnne	r4, #0
   15c88:	cmp	r5, #0
   15c8c:	bne	15ca8 <__assert_fail@plt+0x4ba8>
   15c90:	cmp	r0, #0
   15c94:	beq	15ca8 <__assert_fail@plt+0x4ba8>
   15c98:	bl	1101c <__errno_location@plt>
   15c9c:	ldr	r0, [r0]
   15ca0:	subs	r4, r0, #9
   15ca4:	mvnne	r4, #0
   15ca8:	mov	r0, r4
   15cac:	pop	{r4, r5, r6, sl, fp, pc}
   15cb0:	push	{r4, r5, r6, sl, fp, lr}
   15cb4:	add	fp, sp, #16
   15cb8:	mov	r4, r0
   15cbc:	bl	1101c <__errno_location@plt>
   15cc0:	mov	r5, r0
   15cc4:	ldr	r6, [r0]
   15cc8:	mov	r0, r4
   15ccc:	bl	10ed8 <free@plt>
   15cd0:	str	r6, [r5]
   15cd4:	pop	{r4, r5, r6, sl, fp, pc}
   15cd8:	push	{fp, lr}
   15cdc:	mov	fp, sp
   15ce0:	bl	1101c <__errno_location@plt>
   15ce4:	mov	r1, #12
   15ce8:	str	r1, [r0]
   15cec:	mov	r0, #0
   15cf0:	pop	{fp, pc}
   15cf4:	b	15884 <__assert_fail@plt+0x4784>
   15cf8:	cmp	r1, #0
   15cfc:	orreq	r1, r1, #1
   15d00:	b	158b4 <__assert_fail@plt+0x47b4>
   15d04:	b	15830 <__assert_fail@plt+0x4730>
   15d08:	clz	r3, r2
   15d0c:	lsr	ip, r3, #5
   15d10:	clz	r3, r1
   15d14:	lsr	r3, r3, #5
   15d18:	orrs	r3, r3, ip
   15d1c:	movwne	r1, #1
   15d20:	movwne	r2, #1
   15d24:	b	15dc4 <__assert_fail@plt+0x4cc4>
   15d28:	push	{fp, lr}
   15d2c:	mov	fp, sp
   15d30:	mov	r0, #14
   15d34:	bl	110ac <nl_langinfo@plt>
   15d38:	movw	r1, #26393	; 0x6719
   15d3c:	movt	r1, #1
   15d40:	cmp	r0, #0
   15d44:	movne	r1, r0
   15d48:	ldrb	r2, [r1]
   15d4c:	movw	r0, #27994	; 0x6d5a
   15d50:	movt	r0, #1
   15d54:	cmp	r2, #0
   15d58:	movne	r0, r1
   15d5c:	pop	{fp, pc}
   15d60:	push	{r4, r5, r6, r7, fp, lr}
   15d64:	add	fp, sp, #16
   15d68:	sub	sp, sp, #8
   15d6c:	mov	r7, r2
   15d70:	mov	r4, r1
   15d74:	add	r5, sp, #4
   15d78:	cmp	r0, #0
   15d7c:	movne	r5, r0
   15d80:	mov	r0, r5
   15d84:	bl	10f8c <mbrtowc@plt>
   15d88:	mov	r6, r0
   15d8c:	cmp	r7, #0
   15d90:	beq	15db8 <__assert_fail@plt+0x4cb8>
   15d94:	cmn	r6, #2
   15d98:	bcc	15db8 <__assert_fail@plt+0x4cb8>
   15d9c:	mov	r0, #0
   15da0:	bl	15e00 <__assert_fail@plt+0x4d00>
   15da4:	cmp	r0, #0
   15da8:	bne	15db8 <__assert_fail@plt+0x4cb8>
   15dac:	ldrb	r0, [r4]
   15db0:	str	r0, [r5]
   15db4:	mov	r6, #1
   15db8:	mov	r0, r6
   15dbc:	sub	sp, fp, #16
   15dc0:	pop	{r4, r5, r6, r7, fp, pc}
   15dc4:	cmp	r2, #0
   15dc8:	beq	15df8 <__assert_fail@plt+0x4cf8>
   15dcc:	mvn	r3, #0
   15dd0:	udiv	r3, r3, r2
   15dd4:	cmp	r3, r1
   15dd8:	bcs	15df8 <__assert_fail@plt+0x4cf8>
   15ddc:	push	{fp, lr}
   15de0:	mov	fp, sp
   15de4:	bl	1101c <__errno_location@plt>
   15de8:	mov	r1, #12
   15dec:	str	r1, [r0]
   15df0:	mov	r0, #0
   15df4:	pop	{fp, pc}
   15df8:	mul	r1, r2, r1
   15dfc:	b	158b4 <__assert_fail@plt+0x47b4>
   15e00:	push	{r4, sl, fp, lr}
   15e04:	add	fp, sp, #8
   15e08:	sub	sp, sp, #264	; 0x108
   15e0c:	add	r1, sp, #7
   15e10:	movw	r2, #257	; 0x101
   15e14:	bl	15e6c <__assert_fail@plt+0x4d6c>
   15e18:	mov	r4, #0
   15e1c:	cmp	r0, #0
   15e20:	bne	15e60 <__assert_fail@plt+0x4d60>
   15e24:	add	r0, sp, #7
   15e28:	movw	r1, #28000	; 0x6d60
   15e2c:	movt	r1, #1
   15e30:	mov	r2, #2
   15e34:	bl	10ff8 <bcmp@plt>
   15e38:	cmp	r0, #0
   15e3c:	beq	15e60 <__assert_fail@plt+0x4d60>
   15e40:	add	r0, sp, #7
   15e44:	movw	r1, #28002	; 0x6d62
   15e48:	movt	r1, #1
   15e4c:	mov	r2, #6
   15e50:	bl	10ff8 <bcmp@plt>
   15e54:	mov	r4, r0
   15e58:	cmp	r0, #0
   15e5c:	movwne	r4, #1
   15e60:	mov	r0, r4
   15e64:	sub	sp, fp, #8
   15e68:	pop	{r4, sl, fp, pc}
   15e6c:	b	15e70 <__assert_fail@plt+0x4d70>
   15e70:	push	{r4, r5, r6, r7, fp, lr}
   15e74:	add	fp, sp, #16
   15e78:	mov	r6, r2
   15e7c:	mov	r4, r1
   15e80:	bl	15f08 <__assert_fail@plt+0x4e08>
   15e84:	cmp	r0, #0
   15e88:	beq	15eb8 <__assert_fail@plt+0x4db8>
   15e8c:	mov	r7, r0
   15e90:	bl	11004 <strlen@plt>
   15e94:	cmp	r0, r6
   15e98:	bcs	15ed4 <__assert_fail@plt+0x4dd4>
   15e9c:	add	r2, r0, #1
   15ea0:	mov	r0, r4
   15ea4:	mov	r1, r7
   15ea8:	bl	10ef0 <memcpy@plt>
   15eac:	mov	r5, #0
   15eb0:	mov	r0, r5
   15eb4:	pop	{r4, r5, r6, r7, fp, pc}
   15eb8:	mov	r5, #22
   15ebc:	cmp	r6, #0
   15ec0:	beq	15efc <__assert_fail@plt+0x4dfc>
   15ec4:	mov	r0, #0
   15ec8:	strb	r0, [r4]
   15ecc:	mov	r0, r5
   15ed0:	pop	{r4, r5, r6, r7, fp, pc}
   15ed4:	mov	r5, #34	; 0x22
   15ed8:	cmp	r6, #0
   15edc:	beq	15efc <__assert_fail@plt+0x4dfc>
   15ee0:	sub	r6, r6, #1
   15ee4:	mov	r0, r4
   15ee8:	mov	r1, r7
   15eec:	mov	r2, r6
   15ef0:	bl	10ef0 <memcpy@plt>
   15ef4:	mov	r0, #0
   15ef8:	strb	r0, [r4, r6]
   15efc:	mov	r0, r5
   15f00:	pop	{r4, r5, r6, r7, fp, pc}
   15f04:	b	15f08 <__assert_fail@plt+0x4e08>
   15f08:	mov	r1, #0
   15f0c:	b	11094 <setlocale@plt>
   15f10:	cmp	r3, #0
   15f14:	cmpeq	r2, #0
   15f18:	bne	15f30 <__assert_fail@plt+0x4e30>
   15f1c:	cmp	r1, #0
   15f20:	cmpeq	r0, #0
   15f24:	mvnne	r1, #0
   15f28:	mvnne	r0, #0
   15f2c:	b	15f4c <__assert_fail@plt+0x4e4c>
   15f30:	sub	sp, sp, #8
   15f34:	push	{sp, lr}
   15f38:	bl	15f5c <__assert_fail@plt+0x4e5c>
   15f3c:	ldr	lr, [sp, #4]
   15f40:	add	sp, sp, #8
   15f44:	pop	{r2, r3}
   15f48:	bx	lr
   15f4c:	push	{r1, lr}
   15f50:	mov	r0, #8
   15f54:	bl	10e9c <raise@plt>
   15f58:	pop	{r1, pc}
   15f5c:	cmp	r1, r3
   15f60:	cmpeq	r0, r2
   15f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f68:	mov	r4, r0
   15f6c:	movcc	r0, #0
   15f70:	mov	r5, r1
   15f74:	ldr	lr, [sp, #36]	; 0x24
   15f78:	movcc	r1, r0
   15f7c:	bcc	16078 <__assert_fail@plt+0x4f78>
   15f80:	cmp	r3, #0
   15f84:	clzeq	ip, r2
   15f88:	clzne	ip, r3
   15f8c:	addeq	ip, ip, #32
   15f90:	cmp	r5, #0
   15f94:	clzeq	r1, r4
   15f98:	addeq	r1, r1, #32
   15f9c:	clzne	r1, r5
   15fa0:	sub	ip, ip, r1
   15fa4:	sub	sl, ip, #32
   15fa8:	lsl	r9, r3, ip
   15fac:	rsb	fp, ip, #32
   15fb0:	orr	r9, r9, r2, lsl sl
   15fb4:	orr	r9, r9, r2, lsr fp
   15fb8:	lsl	r8, r2, ip
   15fbc:	cmp	r5, r9
   15fc0:	cmpeq	r4, r8
   15fc4:	movcc	r0, #0
   15fc8:	movcc	r1, r0
   15fcc:	bcc	15fe8 <__assert_fail@plt+0x4ee8>
   15fd0:	mov	r0, #1
   15fd4:	subs	r4, r4, r8
   15fd8:	lsl	r1, r0, sl
   15fdc:	orr	r1, r1, r0, lsr fp
   15fe0:	lsl	r0, r0, ip
   15fe4:	sbc	r5, r5, r9
   15fe8:	cmp	ip, #0
   15fec:	beq	16078 <__assert_fail@plt+0x4f78>
   15ff0:	lsr	r6, r8, #1
   15ff4:	orr	r6, r6, r9, lsl #31
   15ff8:	lsr	r7, r9, #1
   15ffc:	mov	r2, ip
   16000:	b	16024 <__assert_fail@plt+0x4f24>
   16004:	subs	r3, r4, r6
   16008:	sbc	r8, r5, r7
   1600c:	adds	r3, r3, r3
   16010:	adc	r8, r8, r8
   16014:	adds	r4, r3, #1
   16018:	adc	r5, r8, #0
   1601c:	subs	r2, r2, #1
   16020:	beq	16040 <__assert_fail@plt+0x4f40>
   16024:	cmp	r5, r7
   16028:	cmpeq	r4, r6
   1602c:	bcs	16004 <__assert_fail@plt+0x4f04>
   16030:	adds	r4, r4, r4
   16034:	adc	r5, r5, r5
   16038:	subs	r2, r2, #1
   1603c:	bne	16024 <__assert_fail@plt+0x4f24>
   16040:	lsr	r3, r4, ip
   16044:	orr	r3, r3, r5, lsl fp
   16048:	lsr	r2, r5, ip
   1604c:	orr	r3, r3, r5, lsr sl
   16050:	adds	r0, r0, r4
   16054:	mov	r4, r3
   16058:	lsl	r3, r2, ip
   1605c:	orr	r3, r3, r4, lsl sl
   16060:	lsl	ip, r4, ip
   16064:	orr	r3, r3, r4, lsr fp
   16068:	adc	r1, r1, r5
   1606c:	subs	r0, r0, ip
   16070:	mov	r5, r2
   16074:	sbc	r1, r1, r3
   16078:	cmp	lr, #0
   1607c:	strdne	r4, [lr]
   16080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16084:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16088:	mov	r7, r0
   1608c:	ldr	r6, [pc, #72]	; 160dc <__assert_fail@plt+0x4fdc>
   16090:	ldr	r5, [pc, #72]	; 160e0 <__assert_fail@plt+0x4fe0>
   16094:	add	r6, pc, r6
   16098:	add	r5, pc, r5
   1609c:	sub	r6, r6, r5
   160a0:	mov	r8, r1
   160a4:	mov	r9, r2
   160a8:	bl	10e64 <calloc@plt-0x20>
   160ac:	asrs	r6, r6, #2
   160b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   160b4:	mov	r4, #0
   160b8:	add	r4, r4, #1
   160bc:	ldr	r3, [r5], #4
   160c0:	mov	r2, r9
   160c4:	mov	r1, r8
   160c8:	mov	r0, r7
   160cc:	blx	r3
   160d0:	cmp	r6, r4
   160d4:	bne	160b8 <__assert_fail@plt+0x4fb8>
   160d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160dc:	andeq	r0, r1, r0, ror lr
   160e0:	andeq	r0, r1, r8, ror #28
   160e4:	bx	lr
   160e8:	ldr	r3, [pc, #12]	; 160fc <__assert_fail@plt+0x4ffc>
   160ec:	mov	r1, #0
   160f0:	add	r3, pc, r3
   160f4:	ldr	r2, [r3]
   160f8:	b	11028 <__cxa_atexit@plt>
   160fc:	strdeq	r0, [r1], -r4

Disassembly of section .fini:

00016100 <.fini>:
   16100:	push	{r3, lr}
   16104:	pop	{r3, pc}
