
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

0001112c <.init>:
   1112c:	push	{r3, lr}
   11130:	bl	11524 <__assert_fail@plt+0x48>
   11134:	pop	{r3, pc}

Disassembly of section .plt:

00011138 <calloc@plt-0x14>:
   11138:	push	{lr}		; (str lr, [sp, #-4]!)
   1113c:	ldr	lr, [pc, #4]	; 11148 <calloc@plt-0x4>
   11140:	add	lr, pc, lr
   11144:	ldr	pc, [lr, #8]!
   11148:			; <UNDEFINED> instruction: 0x0001ceb8

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3768]!	; 0xeb8

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3760]!	; 0xeb0

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3752]!	; 0xea8

00011170 <fsync@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3744]!	; 0xea0

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3736]!	; 0xe98

00011188 <posix_fadvise64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3728]!	; 0xe90

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3720]!	; 0xe88

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3704]!	; 0xe78

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3696]!	; 0xe70

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3688]!	; 0xe68

000111d0 <clock_gettime@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3680]!	; 0xe60

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3672]!	; 0xe58

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3664]!	; 0xe50

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3656]!	; 0xe48

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #28, 20	; 0x1c000
   11208:	ldr	pc, [ip, #3648]!	; 0xe40

0001120c <ftruncate64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #28, 20	; 0x1c000
   11214:	ldr	pc, [ip, #3640]!	; 0xe38

00011218 <memcmp@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #28, 20	; 0x1c000
   11220:	ldr	pc, [ip, #3632]!	; 0xe30

00011224 <fputc_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #28, 20	; 0x1c000
   1122c:	ldr	pc, [ip, #3624]!	; 0xe28

00011230 <dcgettext@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #28, 20	; 0x1c000
   11238:	ldr	pc, [ip, #3616]!	; 0xe20

0001123c <dup2@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #28, 20	; 0x1c000
   11244:	ldr	pc, [ip, #3608]!	; 0xe18

00011248 <realloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #28, 20	; 0x1c000
   11250:	ldr	pc, [ip, #3600]!	; 0xe10

00011254 <sigismember@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #28, 20	; 0x1c000
   1125c:	ldr	pc, [ip, #3592]!	; 0xe08

00011260 <textdomain@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #28, 20	; 0x1c000
   11268:	ldr	pc, [ip, #3584]!	; 0xe00

0001126c <iswprint@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #28, 20	; 0x1c000
   11274:	ldr	pc, [ip, #3576]!	; 0xdf8

00011278 <__fxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #28, 20	; 0x1c000
   11280:	ldr	pc, [ip, #3568]!	; 0xdf0

00011284 <sigaction@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #28, 20	; 0x1c000
   1128c:	ldr	pc, [ip, #3560]!	; 0xde8

00011290 <__memcpy_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #28, 20	; 0x1c000
   11298:	ldr	pc, [ip, #3552]!	; 0xde0

0001129c <fwrite@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #28, 20	; 0x1c000
   112a4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a8 <lseek64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #28, 20	; 0x1c000
   112b0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b4 <__ctype_get_mb_cur_max@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #28, 20	; 0x1c000
   112bc:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c0 <__fpending@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #28, 20	; 0x1c000
   112c8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #28, 20	; 0x1c000
   112d4:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #28, 20	; 0x1c000
   112e0:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #28, 20	; 0x1c000
   112ec:	ldr	pc, [ip, #3496]!	; 0xda8

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #28, 20	; 0x1c000
   112f8:	ldr	pc, [ip, #3488]!	; 0xda0

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #28, 20	; 0x1c000
   11304:	ldr	pc, [ip, #3480]!	; 0xd98

00011308 <error_at_line@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #28, 20	; 0x1c000
   11310:	ldr	pc, [ip, #3472]!	; 0xd90

00011314 <sigaddset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #28, 20	; 0x1c000
   1131c:	ldr	pc, [ip, #3464]!	; 0xd88

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #28, 20	; 0x1c000
   11328:	ldr	pc, [ip, #3456]!	; 0xd80

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #28, 20	; 0x1c000
   11334:	ldr	pc, [ip, #3448]!	; 0xd78

00011338 <__ctype_tolower_loc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #28, 20	; 0x1c000
   11340:	ldr	pc, [ip, #3440]!	; 0xd70

00011344 <__ctype_toupper_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #28, 20	; 0x1c000
   1134c:	ldr	pc, [ip, #3432]!	; 0xd68

00011350 <__gmon_start__@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #28, 20	; 0x1c000
   11358:	ldr	pc, [ip, #3424]!	; 0xd60

0001135c <getopt_long@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #28, 20	; 0x1c000
   11364:	ldr	pc, [ip, #3416]!	; 0xd58

00011368 <__ctype_b_loc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #28, 20	; 0x1c000
   11370:	ldr	pc, [ip, #3408]!	; 0xd50

00011374 <exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #28, 20	; 0x1c000
   1137c:	ldr	pc, [ip, #3400]!	; 0xd48

00011380 <strlen@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #28, 20	; 0x1c000
   11388:	ldr	pc, [ip, #3392]!	; 0xd40

0001138c <strchr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #28, 20	; 0x1c000
   11394:	ldr	pc, [ip, #3384]!	; 0xd38

00011398 <getpagesize@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #28, 20	; 0x1c000
   113a0:	ldr	pc, [ip, #3376]!	; 0xd30

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #28, 20	; 0x1c000
   113ac:	ldr	pc, [ip, #3368]!	; 0xd28

000113b0 <__sprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #28, 20	; 0x1c000
   113b8:	ldr	pc, [ip, #3360]!	; 0xd20

000113bc <__cxa_atexit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #28, 20	; 0x1c000
   113c4:	ldr	pc, [ip, #3352]!	; 0xd18

000113c8 <__vasprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #28, 20	; 0x1c000
   113d0:	ldr	pc, [ip, #3344]!	; 0xd10

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #28, 20	; 0x1c000
   113dc:	ldr	pc, [ip, #3336]!	; 0xd08

000113e0 <__printf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #28, 20	; 0x1c000
   113e8:	ldr	pc, [ip, #3328]!	; 0xd00

000113ec <write@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #28, 20	; 0x1c000
   113f4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f8 <fileno@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #28, 20	; 0x1c000
   11400:	ldr	pc, [ip, #3312]!	; 0xcf0

00011404 <__fprintf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #28, 20	; 0x1c000
   1140c:	ldr	pc, [ip, #3304]!	; 0xce8

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #28, 20	; 0x1c000
   11418:	ldr	pc, [ip, #3296]!	; 0xce0

0001141c <fseeko64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #28, 20	; 0x1c000
   11424:	ldr	pc, [ip, #3288]!	; 0xcd8

00011428 <fcntl64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3280]!	; 0xcd0

00011434 <__overflow@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3264]!	; 0xcc0

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3256]!	; 0xcb8

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3248]!	; 0xcb0

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #3240]!	; 0xca8

00011470 <localeconv@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #28, 20	; 0x1c000
   11478:	ldr	pc, [ip, #3232]!	; 0xca0

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #28, 20	; 0x1c000
   11484:	ldr	pc, [ip, #3224]!	; 0xc98

00011488 <aligned_alloc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #28, 20	; 0x1c000
   11490:	ldr	pc, [ip, #3216]!	; 0xc90

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #28, 20	; 0x1c000
   1149c:	ldr	pc, [ip, #3208]!	; 0xc88

000114a0 <fdatasync@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #28, 20	; 0x1c000
   114a8:	ldr	pc, [ip, #3200]!	; 0xc80

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #28, 20	; 0x1c000
   114b4:	ldr	pc, [ip, #3192]!	; 0xc78

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #28, 20	; 0x1c000
   114c0:	ldr	pc, [ip, #3184]!	; 0xc70

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #28, 20	; 0x1c000
   114cc:	ldr	pc, [ip, #3176]!	; 0xc68

000114d0 <__snprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #28, 20	; 0x1c000
   114d8:	ldr	pc, [ip, #3168]!	; 0xc60

000114dc <__assert_fail@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #28, 20	; 0x1c000
   114e4:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114e8 <.text>:
   114e8:	mov	fp, #0
   114ec:	mov	lr, #0
   114f0:	pop	{r1}		; (ldr r1, [sp], #4)
   114f4:	mov	r2, sp
   114f8:	push	{r2}		; (str r2, [sp, #-4]!)
   114fc:	push	{r0}		; (str r0, [sp, #-4]!)
   11500:	ldr	ip, [pc, #16]	; 11518 <__assert_fail@plt+0x3c>
   11504:	push	{ip}		; (str ip, [sp, #-4]!)
   11508:	ldr	r0, [pc, #12]	; 1151c <__assert_fail@plt+0x40>
   1150c:	ldr	r3, [pc, #12]	; 11520 <__assert_fail@plt+0x44>
   11510:	bl	11320 <__libc_start_main@plt>
   11514:	bl	114ac <abort@plt>
   11518:	andeq	fp, r1, r0, ror #16
   1151c:	andeq	r3, r1, r4, lsr sp
   11520:	andeq	fp, r1, r0, lsl #16
   11524:	ldr	r3, [pc, #20]	; 11540 <__assert_fail@plt+0x64>
   11528:	ldr	r2, [pc, #20]	; 11544 <__assert_fail@plt+0x68>
   1152c:	add	r3, pc, r3
   11530:	ldr	r2, [r3, r2]
   11534:	cmp	r2, #0
   11538:	bxeq	lr
   1153c:	b	11350 <__gmon_start__@plt>
   11540:	andeq	ip, r1, ip, asr #21
   11544:	andeq	r0, r0, r0, asr #2
   11548:	ldr	r0, [pc, #24]	; 11568 <__assert_fail@plt+0x8c>
   1154c:	ldr	r3, [pc, #24]	; 1156c <__assert_fail@plt+0x90>
   11550:	cmp	r3, r0
   11554:	bxeq	lr
   11558:	ldr	r3, [pc, #16]	; 11570 <__assert_fail@plt+0x94>
   1155c:	cmp	r3, #0
   11560:	bxeq	lr
   11564:	bx	r3
   11568:	andeq	lr, r2, r4, asr #3
   1156c:	andeq	lr, r2, r4, asr #3
   11570:	andeq	r0, r0, r0
   11574:	ldr	r0, [pc, #36]	; 115a0 <__assert_fail@plt+0xc4>
   11578:	ldr	r1, [pc, #36]	; 115a4 <__assert_fail@plt+0xc8>
   1157c:	sub	r1, r1, r0
   11580:	asr	r1, r1, #2
   11584:	add	r1, r1, r1, lsr #31
   11588:	asrs	r1, r1, #1
   1158c:	bxeq	lr
   11590:	ldr	r3, [pc, #16]	; 115a8 <__assert_fail@plt+0xcc>
   11594:	cmp	r3, #0
   11598:	bxeq	lr
   1159c:	bx	r3
   115a0:	andeq	lr, r2, r4, asr #3
   115a4:	andeq	lr, r2, r4, asr #3
   115a8:	andeq	r0, r0, r0
   115ac:	push	{r4, lr}
   115b0:	ldr	r4, [pc, #24]	; 115d0 <__assert_fail@plt+0xf4>
   115b4:	ldrb	r3, [r4]
   115b8:	cmp	r3, #0
   115bc:	popne	{r4, pc}
   115c0:	bl	11548 <__assert_fail@plt+0x6c>
   115c4:	mov	r3, #1
   115c8:	strb	r3, [r4]
   115cc:	pop	{r4, pc}
   115d0:	andeq	lr, r2, r4, ror #3
   115d4:	b	11574 <__assert_fail@plt+0x98>
   115d8:	movw	r1, #57832	; 0xe1e8
   115dc:	movt	r1, #2
   115e0:	sub	r3, r1, #1
   115e4:	add	r1, r1, #255	; 0xff
   115e8:	ldrb	r2, [r3, #1]!
   115ec:	ldrb	r2, [r0, r2]
   115f0:	strb	r2, [r3]
   115f4:	cmp	r3, r1
   115f8:	bne	115e8 <__assert_fail@plt+0x10c>
   115fc:	movw	r3, #57832	; 0xe1e8
   11600:	movt	r3, #2
   11604:	mov	r2, #1
   11608:	strb	r2, [r3, #256]	; 0x100
   1160c:	bx	lr
   11610:	movw	r3, #57832	; 0xe1e8
   11614:	movt	r3, #2
   11618:	str	r0, [r3, #260]	; 0x104
   1161c:	bx	lr
   11620:	movw	r3, #57832	; 0xe1e8
   11624:	movt	r3, #2
   11628:	ldr	r2, [r3, #264]	; 0x108
   1162c:	add	r2, r2, #1
   11630:	str	r2, [r3, #264]	; 0x108
   11634:	bx	lr
   11638:	sub	r1, r1, #1
   1163c:	ldrb	r3, [r1, #1]!
   11640:	cmp	r3, #0
   11644:	beq	1165c <__assert_fail@plt+0x180>
   11648:	ldrb	r2, [r0], #1
   1164c:	cmp	r2, r3
   11650:	beq	1163c <__assert_fail@plt+0x160>
   11654:	mov	r0, #0
   11658:	bx	lr
   1165c:	ldrb	r3, [r0]
   11660:	cmp	r3, #61	; 0x3d
   11664:	movne	r0, #0
   11668:	moveq	r0, #1
   1166c:	cmp	r3, #0
   11670:	moveq	r0, #1
   11674:	bx	lr
   11678:	ldr	r3, [pc, #56]	; 116b8 <__assert_fail@plt+0x1dc>
   1167c:	ldrd	r2, [r3]
   11680:	cmp	r2, #0
   11684:	sbcs	ip, r3, #0
   11688:	bxlt	lr
   1168c:	strd	r4, [sp, #-8]!
   11690:	adds	r4, r2, r0
   11694:	adcs	r5, r3, r1
   11698:	ldr	r3, [pc, #24]	; 116b8 <__assert_fail@plt+0x1dc>
   1169c:	strdvc	r4, [r3]
   116a0:	mvnvs	r0, #0
   116a4:	mvnvs	r1, #0
   116a8:	strdvs	r0, [r3]
   116ac:	ldrd	r4, [sp]
   116b0:	add	sp, sp, #8
   116b4:	bx	lr
   116b8:	strdeq	lr, [r2], -r8
   116bc:	push	{lr}		; (str lr, [sp, #-4]!)
   116c0:	sub	sp, sp, #60	; 0x3c
   116c4:	subs	r5, r0, #0
   116c8:	beq	11710 <__assert_fail@plt+0x234>
   116cc:	movw	r3, #57816	; 0xe1d8
   116d0:	movt	r3, #2
   116d4:	ldr	r4, [r3]
   116d8:	mov	r2, #5
   116dc:	movw	r1, #48708	; 0xbe44
   116e0:	movt	r1, #1
   116e4:	mov	r0, #0
   116e8:	bl	11230 <dcgettext@plt>
   116ec:	movw	r3, #58460	; 0xe45c
   116f0:	movt	r3, #2
   116f4:	ldr	r3, [r3]
   116f8:	mov	r2, r0
   116fc:	mov	r1, #1
   11700:	mov	r0, r4
   11704:	bl	11404 <__fprintf_chk@plt>
   11708:	mov	r0, r5
   1170c:	bl	11374 <exit@plt>
   11710:	mov	r2, #5
   11714:	movw	r1, #48748	; 0xbe6c
   11718:	movt	r1, #1
   1171c:	mov	r0, #0
   11720:	bl	11230 <dcgettext@plt>
   11724:	movw	r3, #58460	; 0xe45c
   11728:	movt	r3, #2
   1172c:	ldr	r2, [r3]
   11730:	mov	r3, r2
   11734:	mov	r1, r0
   11738:	mov	r0, #1
   1173c:	bl	113e0 <__printf_chk@plt>
   11740:	mov	r2, #5
   11744:	movw	r1, #48792	; 0xbe98
   11748:	movt	r1, #1
   1174c:	mov	r0, #0
   11750:	bl	11230 <dcgettext@plt>
   11754:	movw	r4, #57820	; 0xe1dc
   11758:	movt	r4, #2
   1175c:	ldr	r1, [r4]
   11760:	bl	11158 <fputs_unlocked@plt>
   11764:	mov	r2, #5
   11768:	movw	r1, #49208	; 0xc038
   1176c:	movt	r1, #1
   11770:	mov	r0, #0
   11774:	bl	11230 <dcgettext@plt>
   11778:	ldr	r1, [r4]
   1177c:	bl	11158 <fputs_unlocked@plt>
   11780:	mov	r2, #5
   11784:	movw	r1, #49880	; 0xc2d8
   11788:	movt	r1, #1
   1178c:	mov	r0, #0
   11790:	bl	11230 <dcgettext@plt>
   11794:	ldr	r1, [r4]
   11798:	bl	11158 <fputs_unlocked@plt>
   1179c:	mov	r2, #5
   117a0:	movw	r1, #50172	; 0xc3fc
   117a4:	movt	r1, #1
   117a8:	mov	r0, #0
   117ac:	bl	11230 <dcgettext@plt>
   117b0:	ldr	r1, [r4]
   117b4:	bl	11158 <fputs_unlocked@plt>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #50748	; 0xc63c
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	11230 <dcgettext@plt>
   117cc:	ldr	r1, [r4]
   117d0:	bl	11158 <fputs_unlocked@plt>
   117d4:	mov	r2, #5
   117d8:	movw	r1, #51036	; 0xc75c
   117dc:	movt	r1, #1
   117e0:	mov	r0, #0
   117e4:	bl	11230 <dcgettext@plt>
   117e8:	ldr	r1, [r4]
   117ec:	bl	11158 <fputs_unlocked@plt>
   117f0:	mov	r2, #5
   117f4:	movw	r1, #51144	; 0xc7c8
   117f8:	movt	r1, #1
   117fc:	mov	r0, #0
   11800:	bl	11230 <dcgettext@plt>
   11804:	ldr	r1, [r4]
   11808:	bl	11158 <fputs_unlocked@plt>
   1180c:	mov	r2, #5
   11810:	movw	r1, #51184	; 0xc7f0
   11814:	movt	r1, #1
   11818:	mov	r0, #0
   1181c:	bl	11230 <dcgettext@plt>
   11820:	ldr	r1, [r4]
   11824:	bl	11158 <fputs_unlocked@plt>
   11828:	mov	r2, #5
   1182c:	movw	r1, #51224	; 0xc818
   11830:	movt	r1, #1
   11834:	mov	r0, #0
   11838:	bl	11230 <dcgettext@plt>
   1183c:	ldr	r1, [r4]
   11840:	bl	11158 <fputs_unlocked@plt>
   11844:	mov	r2, #5
   11848:	movw	r1, #51268	; 0xc844
   1184c:	movt	r1, #1
   11850:	mov	r0, #0
   11854:	bl	11230 <dcgettext@plt>
   11858:	ldr	r1, [r4]
   1185c:	bl	11158 <fputs_unlocked@plt>
   11860:	mov	r2, #5
   11864:	movw	r1, #51316	; 0xc874
   11868:	movt	r1, #1
   1186c:	mov	r0, #0
   11870:	bl	11230 <dcgettext@plt>
   11874:	ldr	r1, [r4]
   11878:	bl	11158 <fputs_unlocked@plt>
   1187c:	mov	r2, #5
   11880:	movw	r1, #51376	; 0xc8b0
   11884:	movt	r1, #1
   11888:	mov	r0, #0
   1188c:	bl	11230 <dcgettext@plt>
   11890:	ldr	r1, [r4]
   11894:	bl	11158 <fputs_unlocked@plt>
   11898:	mov	r2, #5
   1189c:	movw	r1, #51412	; 0xc8d4
   118a0:	movt	r1, #1
   118a4:	mov	r0, #0
   118a8:	bl	11230 <dcgettext@plt>
   118ac:	ldr	r1, [r4]
   118b0:	bl	11158 <fputs_unlocked@plt>
   118b4:	mov	r2, #5
   118b8:	movw	r1, #51452	; 0xc8fc
   118bc:	movt	r1, #1
   118c0:	mov	r0, #0
   118c4:	bl	11230 <dcgettext@plt>
   118c8:	ldr	r1, [r4]
   118cc:	bl	11158 <fputs_unlocked@plt>
   118d0:	mov	r2, #5
   118d4:	movw	r1, #51512	; 0xc938
   118d8:	movt	r1, #1
   118dc:	mov	r0, #0
   118e0:	bl	11230 <dcgettext@plt>
   118e4:	ldr	r1, [r4]
   118e8:	bl	11158 <fputs_unlocked@plt>
   118ec:	mov	r2, #5
   118f0:	movw	r1, #51572	; 0xc974
   118f4:	movt	r1, #1
   118f8:	mov	r0, #0
   118fc:	bl	11230 <dcgettext@plt>
   11900:	ldr	r1, [r4]
   11904:	bl	11158 <fputs_unlocked@plt>
   11908:	mov	r2, #5
   1190c:	movw	r1, #51608	; 0xc998
   11910:	movt	r1, #1
   11914:	mov	r0, #0
   11918:	bl	11230 <dcgettext@plt>
   1191c:	ldr	r1, [r4]
   11920:	bl	11158 <fputs_unlocked@plt>
   11924:	mov	r2, #5
   11928:	movw	r1, #51672	; 0xc9d8
   1192c:	movt	r1, #1
   11930:	mov	r0, #0
   11934:	bl	11230 <dcgettext@plt>
   11938:	ldr	r1, [r4]
   1193c:	bl	11158 <fputs_unlocked@plt>
   11940:	mov	r2, #5
   11944:	movw	r1, #51732	; 0xca14
   11948:	movt	r1, #1
   1194c:	mov	r0, #0
   11950:	bl	11230 <dcgettext@plt>
   11954:	ldr	r1, [r4]
   11958:	bl	11158 <fputs_unlocked@plt>
   1195c:	mov	r2, #5
   11960:	movw	r1, #51792	; 0xca50
   11964:	movt	r1, #1
   11968:	mov	r0, #0
   1196c:	bl	11230 <dcgettext@plt>
   11970:	movw	r2, #51928	; 0xcad8
   11974:	movt	r2, #1
   11978:	mov	r1, r0
   1197c:	mov	r0, #1
   11980:	bl	113e0 <__printf_chk@plt>
   11984:	mov	r2, #5
   11988:	movw	r1, #51936	; 0xcae0
   1198c:	movt	r1, #1
   11990:	mov	r0, #0
   11994:	bl	11230 <dcgettext@plt>
   11998:	ldr	r1, [r4]
   1199c:	bl	11158 <fputs_unlocked@plt>
   119a0:	mov	r2, #5
   119a4:	movw	r1, #51984	; 0xcb10
   119a8:	movt	r1, #1
   119ac:	mov	r0, #0
   119b0:	bl	11230 <dcgettext@plt>
   119b4:	ldr	r1, [r4]
   119b8:	bl	11158 <fputs_unlocked@plt>
   119bc:	movw	r0, #47240	; 0xb888
   119c0:	movt	r0, #1
   119c4:	ldr	r1, [r0]
   119c8:	ldr	r3, [r0, #4]
   119cc:	str	r1, [sp]
   119d0:	str	r3, [sp, #4]
   119d4:	ldrd	r2, [r0, #8]
   119d8:	strd	r2, [sp, #8]
   119dc:	ldrd	r2, [r0, #16]
   119e0:	strd	r2, [sp, #16]
   119e4:	ldrd	r2, [r0, #24]
   119e8:	strd	r2, [sp, #24]
   119ec:	ldrd	r2, [r0, #32]
   119f0:	strd	r2, [sp, #32]
   119f4:	ldrd	r2, [r0, #40]	; 0x28
   119f8:	strd	r2, [sp, #40]	; 0x28
   119fc:	ldrd	r2, [r0, #48]	; 0x30
   11a00:	strd	r2, [sp, #48]	; 0x30
   11a04:	cmp	r1, #0
   11a08:	moveq	r4, sp
   11a0c:	beq	11a38 <__assert_fail@plt+0x55c>
   11a10:	mov	r4, sp
   11a14:	movw	r6, #48704	; 0xbe40
   11a18:	movt	r6, #1
   11a1c:	mov	r0, r6
   11a20:	bl	1117c <strcmp@plt>
   11a24:	cmp	r0, #0
   11a28:	beq	11a38 <__assert_fail@plt+0x55c>
   11a2c:	ldr	r1, [r4, #8]!
   11a30:	cmp	r1, #0
   11a34:	bne	11a1c <__assert_fail@plt+0x540>
   11a38:	ldr	r4, [r4, #4]
   11a3c:	cmp	r4, #0
   11a40:	beq	11b9c <__assert_fail@plt+0x6c0>
   11a44:	mov	r2, #5
   11a48:	movw	r1, #52040	; 0xcb48
   11a4c:	movt	r1, #1
   11a50:	mov	r0, #0
   11a54:	bl	11230 <dcgettext@plt>
   11a58:	movw	r3, #52064	; 0xcb60
   11a5c:	movt	r3, #1
   11a60:	movw	r2, #52104	; 0xcb88
   11a64:	movt	r2, #1
   11a68:	mov	r1, r0
   11a6c:	mov	r0, #1
   11a70:	bl	113e0 <__printf_chk@plt>
   11a74:	mov	r1, #0
   11a78:	mov	r0, #5
   11a7c:	bl	11440 <setlocale@plt>
   11a80:	cmp	r0, #0
   11a84:	beq	11aa0 <__assert_fail@plt+0x5c4>
   11a88:	mov	r2, #3
   11a8c:	movw	r1, #52120	; 0xcb98
   11a90:	movt	r1, #1
   11a94:	bl	11494 <strncmp@plt>
   11a98:	cmp	r0, #0
   11a9c:	bne	11b1c <__assert_fail@plt+0x640>
   11aa0:	mov	r2, #5
   11aa4:	movw	r1, #52196	; 0xcbe4
   11aa8:	movt	r1, #1
   11aac:	mov	r0, #0
   11ab0:	bl	11230 <dcgettext@plt>
   11ab4:	movw	r6, #48704	; 0xbe40
   11ab8:	movt	r6, #1
   11abc:	mov	r3, r6
   11ac0:	movw	r2, #52064	; 0xcb60
   11ac4:	movt	r2, #1
   11ac8:	mov	r1, r0
   11acc:	mov	r0, #1
   11ad0:	bl	113e0 <__printf_chk@plt>
   11ad4:	mov	r2, #5
   11ad8:	movw	r1, #52224	; 0xcc00
   11adc:	movt	r1, #1
   11ae0:	mov	r0, #0
   11ae4:	bl	11230 <dcgettext@plt>
   11ae8:	mov	r1, r0
   11aec:	movw	r2, #54008	; 0xd2f8
   11af0:	movt	r2, #1
   11af4:	movw	r3, #51668	; 0xc9d4
   11af8:	movt	r3, #1
   11afc:	cmp	r4, r6
   11b00:	moveq	r3, r2
   11b04:	mov	r2, r4
   11b08:	mov	r0, #1
   11b0c:	bl	113e0 <__printf_chk@plt>
   11b10:	b	11708 <__assert_fail@plt+0x22c>
   11b14:	movw	r4, #48704	; 0xbe40
   11b18:	movt	r4, #1
   11b1c:	mov	r2, #5
   11b20:	movw	r1, #52124	; 0xcb9c
   11b24:	movt	r1, #1
   11b28:	mov	r0, #0
   11b2c:	bl	11230 <dcgettext@plt>
   11b30:	movw	r3, #57820	; 0xe1dc
   11b34:	movt	r3, #2
   11b38:	ldr	r1, [r3]
   11b3c:	bl	11158 <fputs_unlocked@plt>
   11b40:	b	11aa0 <__assert_fail@plt+0x5c4>
   11b44:	mov	r2, #5
   11b48:	movw	r1, #52196	; 0xcbe4
   11b4c:	movt	r1, #1
   11b50:	mov	r0, #0
   11b54:	bl	11230 <dcgettext@plt>
   11b58:	movw	r4, #48704	; 0xbe40
   11b5c:	movt	r4, #1
   11b60:	mov	r3, r4
   11b64:	movw	r2, #52064	; 0xcb60
   11b68:	movt	r2, #1
   11b6c:	mov	r1, r0
   11b70:	mov	r0, #1
   11b74:	bl	113e0 <__printf_chk@plt>
   11b78:	mov	r2, #5
   11b7c:	movw	r1, #52224	; 0xcc00
   11b80:	movt	r1, #1
   11b84:	mov	r0, #0
   11b88:	bl	11230 <dcgettext@plt>
   11b8c:	mov	r1, r0
   11b90:	movw	r3, #54008	; 0xd2f8
   11b94:	movt	r3, #1
   11b98:	b	11b04 <__assert_fail@plt+0x628>
   11b9c:	mov	r2, #5
   11ba0:	movw	r1, #52040	; 0xcb48
   11ba4:	movt	r1, #1
   11ba8:	mov	r0, #0
   11bac:	bl	11230 <dcgettext@plt>
   11bb0:	movw	r3, #52064	; 0xcb60
   11bb4:	movt	r3, #1
   11bb8:	movw	r2, #52104	; 0xcb88
   11bbc:	movt	r2, #1
   11bc0:	mov	r1, r0
   11bc4:	mov	r0, #1
   11bc8:	bl	113e0 <__printf_chk@plt>
   11bcc:	mov	r1, #0
   11bd0:	mov	r0, #5
   11bd4:	bl	11440 <setlocale@plt>
   11bd8:	cmp	r0, #0
   11bdc:	beq	11b44 <__assert_fail@plt+0x668>
   11be0:	mov	r2, #3
   11be4:	movw	r1, #52120	; 0xcb98
   11be8:	movt	r1, #1
   11bec:	bl	11494 <strncmp@plt>
   11bf0:	cmp	r0, #0
   11bf4:	bne	11b14 <__assert_fail@plt+0x638>
   11bf8:	mov	r2, #5
   11bfc:	movw	r1, #52196	; 0xcbe4
   11c00:	movt	r1, #1
   11c04:	mov	r0, #0
   11c08:	bl	11230 <dcgettext@plt>
   11c0c:	movw	r4, #48704	; 0xbe40
   11c10:	movt	r4, #1
   11c14:	mov	r3, r4
   11c18:	movw	r2, #52064	; 0xcb60
   11c1c:	movt	r2, #1
   11c20:	mov	r1, r0
   11c24:	mov	r0, #1
   11c28:	bl	113e0 <__printf_chk@plt>
   11c2c:	mov	r2, #5
   11c30:	movw	r1, #52224	; 0xcc00
   11c34:	movt	r1, #1
   11c38:	mov	r0, #0
   11c3c:	bl	11230 <dcgettext@plt>
   11c40:	mov	r1, r0
   11c44:	movw	r3, #54008	; 0xd2f8
   11c48:	movt	r3, #1
   11c4c:	b	11b04 <__assert_fail@plt+0x628>
   11c50:	str	r4, [sp, #-8]!
   11c54:	str	lr, [sp, #4]
   11c58:	movw	r3, #57680	; 0xe150
   11c5c:	movt	r3, #2
   11c60:	ldrb	r3, [r3]
   11c64:	cmp	r3, #0
   11c68:	beq	11c7c <__assert_fail@plt+0x7a0>
   11c6c:	bl	15f60 <__assert_fail@plt+0x4a84>
   11c70:	ldr	r4, [sp]
   11c74:	add	sp, sp, #4
   11c78:	pop	{pc}		; (ldr pc, [sp], #4)
   11c7c:	movw	r3, #57816	; 0xe1d8
   11c80:	movt	r3, #2
   11c84:	ldr	r0, [r3]
   11c88:	bl	15eb4 <__assert_fail@plt+0x49d8>
   11c8c:	cmp	r0, #0
   11c90:	beq	11c70 <__assert_fail@plt+0x794>
   11c94:	mov	r0, #1
   11c98:	bl	111dc <_exit@plt>
   11c9c:	strd	r4, [sp, #-16]!
   11ca0:	str	r6, [sp, #8]
   11ca4:	str	lr, [sp, #12]
   11ca8:	mov	r5, r0
   11cac:	bl	114b8 <close@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11cf4 <__assert_fail@plt+0x818>
   11cb8:	bl	113a4 <__errno_location@plt>
   11cbc:	mov	r4, r0
   11cc0:	ldr	r3, [r4]
   11cc4:	cmp	r3, #4
   11cc8:	bne	11cf0 <__assert_fail@plt+0x814>
   11ccc:	mov	r0, r5
   11cd0:	bl	114b8 <close@plt>
   11cd4:	cmp	r0, #0
   11cd8:	beq	11cf4 <__assert_fail@plt+0x818>
   11cdc:	ldr	r3, [r4]
   11ce0:	cmp	r3, #9
   11ce4:	bne	11cc0 <__assert_fail@plt+0x7e4>
   11ce8:	mov	r0, #0
   11cec:	b	11cf4 <__assert_fail@plt+0x818>
   11cf0:	mvn	r0, #0
   11cf4:	ldrd	r4, [sp]
   11cf8:	ldr	r6, [sp, #8]
   11cfc:	add	sp, sp, #12
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	push	{r2, r3}
   11d08:	strd	r4, [sp, #-12]!
   11d0c:	str	lr, [sp, #8]
   11d10:	sub	sp, sp, #12
   11d14:	mov	r4, r0
   11d18:	mov	r5, r1
   11d1c:	movw	r3, #57832	; 0xe1e8
   11d20:	movt	r3, #2
   11d24:	ldr	r3, [r3, #280]	; 0x118
   11d28:	cmp	r3, #0
   11d2c:	ble	11d6c <__assert_fail@plt+0x890>
   11d30:	movw	r3, #57816	; 0xe1d8
   11d34:	movt	r3, #2
   11d38:	ldr	r0, [r3]
   11d3c:	ldr	r3, [r0, #20]
   11d40:	ldr	r2, [r0, #24]
   11d44:	cmp	r3, r2
   11d48:	addcc	r2, r3, #1
   11d4c:	strcc	r2, [r0, #20]
   11d50:	movcc	r2, #10
   11d54:	strbcc	r2, [r3]
   11d58:	bcs	11d9c <__assert_fail@plt+0x8c0>
   11d5c:	movw	r3, #57832	; 0xe1e8
   11d60:	movt	r3, #2
   11d64:	mov	r2, #0
   11d68:	str	r2, [r3, #280]	; 0x118
   11d6c:	add	r3, sp, #28
   11d70:	str	r3, [sp, #4]
   11d74:	ldr	r2, [sp, #24]
   11d78:	mov	r1, r5
   11d7c:	mov	r0, r4
   11d80:	bl	19718 <__assert_fail@plt+0x823c>
   11d84:	add	sp, sp, #12
   11d88:	ldrd	r4, [sp]
   11d8c:	ldr	lr, [sp, #8]
   11d90:	add	sp, sp, #12
   11d94:	add	sp, sp, #8
   11d98:	bx	lr
   11d9c:	mov	r1, #10
   11da0:	bl	11434 <__overflow@plt>
   11da4:	b	11d5c <__assert_fail@plt+0x880>
   11da8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11dac:	strd	r6, [sp, #8]
   11db0:	strd	r8, [sp, #16]
   11db4:	strd	sl, [sp, #24]
   11db8:	str	lr, [sp, #32]
   11dbc:	sub	sp, sp, #44	; 0x2c
   11dc0:	mov	r8, r0
   11dc4:	mov	r5, r1
   11dc8:	mov	r2, #0
   11dcc:	mov	r3, #0
   11dd0:	strd	r2, [sp, #32]
   11dd4:	movw	r3, #52276	; 0xcc34
   11dd8:	movt	r3, #1
   11ddc:	str	r3, [sp]
   11de0:	add	r3, sp, #32
   11de4:	mov	r2, #10
   11de8:	add	r1, sp, #28
   11dec:	bl	1a2ec <__assert_fail@plt+0x8e10>
   11df0:	mov	r4, r0
   11df4:	bic	r3, r0, #1
   11df8:	cmp	r3, #2
   11dfc:	beq	11e3c <__assert_fail@plt+0x960>
   11e00:	ldrd	r6, [sp, #32]
   11e04:	cmp	r6, #0
   11e08:	sbcs	r3, r7, #0
   11e0c:	blt	120cc <__assert_fail@plt+0xbf0>
   11e10:	cmp	r4, #0
   11e14:	strne	r4, [r5]
   11e18:	mov	r0, r6
   11e1c:	mov	r1, r7
   11e20:	add	sp, sp, #44	; 0x2c
   11e24:	ldrd	r4, [sp]
   11e28:	ldrd	r6, [sp, #8]
   11e2c:	ldrd	r8, [sp, #16]
   11e30:	ldrd	sl, [sp, #24]
   11e34:	add	sp, sp, #32
   11e38:	pop	{pc}		; (ldr pc, [sp], #4)
   11e3c:	ldr	r0, [sp, #28]
   11e40:	ldrb	r3, [r0]
   11e44:	cmp	r3, #120	; 0x78
   11e48:	bne	11e00 <__assert_fail@plt+0x924>
   11e4c:	mov	r3, #0
   11e50:	str	r3, [sp, #24]
   11e54:	add	r1, sp, #24
   11e58:	add	r0, r0, #1
   11e5c:	bl	11da8 <__assert_fail@plt+0x8cc>
   11e60:	mov	r6, r0
   11e64:	mov	r7, r1
   11e68:	ldr	ip, [sp, #24]
   11e6c:	bics	r3, ip, #1
   11e70:	strne	ip, [r5]
   11e74:	bne	11e18 <__assert_fail@plt+0x93c>
   11e78:	mov	lr, #0
   11e7c:	ldr	r3, [sp, #36]	; 0x24
   11e80:	ldr	r1, [sp, #32]
   11e84:	asr	r1, r1, #31
   11e88:	cmp	r7, r6, asr #31
   11e8c:	bne	11f78 <__assert_fail@plt+0xa9c>
   11e90:	cmp	r1, r3
   11e94:	bne	11ee8 <__assert_fail@plt+0xa0c>
   11e98:	ldr	r0, [sp, #32]
   11e9c:	smull	r0, r1, r0, r6
   11ea0:	ldrd	r2, [sp, #32]
   11ea4:	cmp	r2, #0
   11ea8:	sbcs	r3, r3, #0
   11eac:	blt	1200c <__assert_fail@plt+0xb30>
   11eb0:	cmp	lr, #0
   11eb4:	bne	12048 <__assert_fail@plt+0xb6c>
   11eb8:	mov	r6, r0
   11ebc:	mov	r7, r1
   11ec0:	orrs	r3, r0, r1
   11ec4:	beq	1205c <__assert_fail@plt+0xb80>
   11ec8:	orr	r4, ip, r4
   11ecc:	tst	r4, #1
   11ed0:	beq	11e18 <__assert_fail@plt+0x93c>
   11ed4:	mov	r3, #1
   11ed8:	str	r3, [r5]
   11edc:	mvn	r6, #0
   11ee0:	mvn	r7, #-2147483648	; 0x80000000
   11ee4:	b	11e18 <__assert_fail@plt+0x93c>
   11ee8:	ldr	r0, [sp, #32]
   11eec:	ldr	r9, [sp, #36]	; 0x24
   11ef0:	mov	sl, r3
   11ef4:	mov	r1, r6
   11ef8:	ldr	r3, [sp, #32]
   11efc:	umull	r2, r3, r3, r6
   11f00:	strd	r2, [sp, #16]
   11f04:	umull	r2, r3, r1, sl
   11f08:	strd	r2, [sp, #8]
   11f0c:	cmp	sl, #0
   11f10:	bge	11f2c <__assert_fail@plt+0xa50>
   11f14:	mov	sl, #0
   11f18:	subs	r3, r2, sl
   11f1c:	str	r3, [sp, #8]
   11f20:	ldr	r3, [sp, #12]
   11f24:	sbc	r3, r3, r1
   11f28:	str	r3, [sp, #12]
   11f2c:	cmp	r1, #0
   11f30:	bge	11f4c <__assert_fail@plt+0xa70>
   11f34:	ldr	r3, [sp, #8]
   11f38:	subs	r3, r3, r0
   11f3c:	str	r3, [sp, #8]
   11f40:	ldr	r3, [sp, #12]
   11f44:	sbc	r3, r3, r9
   11f48:	str	r3, [sp, #12]
   11f4c:	ldrd	sl, [sp, #16]
   11f50:	mov	r1, #0
   11f54:	ldr	r3, [sp, #8]
   11f58:	adds	r2, r3, fp
   11f5c:	ldr	r3, [sp, #12]
   11f60:	adc	r1, r3, r1
   11f64:	cmp	r1, r2, asr #31
   11f68:	bne	11fec <__assert_fail@plt+0xb10>
   11f6c:	mov	r0, sl
   11f70:	mov	r1, r2
   11f74:	b	11ea0 <__assert_fail@plt+0x9c4>
   11f78:	cmp	r1, r3
   11f7c:	bne	11f94 <__assert_fail@plt+0xab8>
   11f80:	mov	r0, r6
   11f84:	mov	r9, r7
   11f88:	mov	sl, r7
   11f8c:	ldr	r1, [sp, #32]
   11f90:	b	11ef8 <__assert_fail@plt+0xa1c>
   11f94:	ldr	r0, [sp, #32]
   11f98:	ldr	r9, [sp, #36]	; 0x24
   11f9c:	mul	r9, r6, r9
   11fa0:	mla	r9, r0, r7, r9
   11fa4:	umull	r0, r1, r0, r6
   11fa8:	add	r1, r9, r1
   11fac:	add	r9, r7, #1
   11fb0:	cmp	r9, #1
   11fb4:	bhi	12004 <__assert_fail@plt+0xb28>
   11fb8:	add	r9, r3, #1
   11fbc:	cmp	r9, #1
   11fc0:	bhi	12004 <__assert_fail@plt+0xb28>
   11fc4:	cmp	r7, r3
   11fc8:	bne	11fdc <__assert_fail@plt+0xb00>
   11fcc:	cmp	r0, #1
   11fd0:	sbcs	r3, r1, #0
   11fd4:	bge	11ea0 <__assert_fail@plt+0x9c4>
   11fd8:	b	12004 <__assert_fail@plt+0xb28>
   11fdc:	cmp	r0, #0
   11fe0:	sbcs	r3, r1, #0
   11fe4:	blt	11ea0 <__assert_fail@plt+0x9c4>
   11fe8:	b	12004 <__assert_fail@plt+0xb28>
   11fec:	ldr	r0, [sp, #32]
   11ff0:	ldr	r3, [sp, #36]	; 0x24
   11ff4:	mul	r3, r6, r3
   11ff8:	mla	r3, r0, r7, r3
   11ffc:	umull	r0, r1, r0, r6
   12000:	add	r1, r3, r1
   12004:	mov	lr, #1
   12008:	b	11ea0 <__assert_fail@plt+0x9c4>
   1200c:	mov	lr, #1
   12010:	orrs	r3, r6, r7
   12014:	bne	12020 <__assert_fail@plt+0xb44>
   12018:	mov	lr, #0
   1201c:	b	11eb0 <__assert_fail@plt+0x9d4>
   12020:	mvn	r2, #0
   12024:	mvn	r3, #0
   12028:	cmp	r7, r3
   1202c:	cmpeq	r6, r2
   12030:	bne	11eb0 <__assert_fail@plt+0x9d4>
   12034:	ldrd	r2, [sp, #32]
   12038:	cmp	r3, r1
   1203c:	cmpeq	r2, r0
   12040:	beq	12018 <__assert_fail@plt+0xb3c>
   12044:	b	11eb0 <__assert_fail@plt+0x9d4>
   12048:	mov	r3, #1
   1204c:	str	r3, [r5]
   12050:	mvn	r6, #0
   12054:	mvn	r7, #-2147483648	; 0x80000000
   12058:	b	11e18 <__assert_fail@plt+0x93c>
   1205c:	mov	r2, #2
   12060:	movw	r1, #52292	; 0xcc44
   12064:	movt	r1, #1
   12068:	mov	r0, r8
   1206c:	bl	11494 <strncmp@plt>
   12070:	cmp	r0, #0
   12074:	bne	11e18 <__assert_fail@plt+0x93c>
   12078:	mov	r2, #5
   1207c:	movw	r1, #52296	; 0xcc48
   12080:	movt	r1, #1
   12084:	bl	11230 <dcgettext@plt>
   12088:	mov	r4, r0
   1208c:	movw	r1, #52292	; 0xcc44
   12090:	movt	r1, #1
   12094:	mov	r0, #0
   12098:	bl	1960c <__assert_fail@plt+0x8130>
   1209c:	mov	r5, r0
   120a0:	movw	r1, #52360	; 0xcc88
   120a4:	movt	r1, #1
   120a8:	mov	r0, #1
   120ac:	bl	1960c <__assert_fail@plt+0x8130>
   120b0:	str	r0, [sp]
   120b4:	mov	r3, r5
   120b8:	mov	r2, r4
   120bc:	mov	r1, #0
   120c0:	mov	r0, r1
   120c4:	bl	11d04 <__assert_fail@plt+0x828>
   120c8:	b	11e18 <__assert_fail@plt+0x93c>
   120cc:	orr	r4, r4, #1
   120d0:	str	r4, [r5]
   120d4:	mvn	r6, #0
   120d8:	mvn	r7, #-2147483648	; 0x80000000
   120dc:	b	11e18 <__assert_fail@plt+0x93c>
   120e0:	movw	r3, #57832	; 0xe1e8
   120e4:	movt	r3, #2
   120e8:	ldr	r3, [r3, #284]	; 0x11c
   120ec:	cmp	r3, #0
   120f0:	bxne	lr
   120f4:	strd	r4, [sp, #-12]!
   120f8:	str	lr, [sp, #8]
   120fc:	sub	sp, sp, #676	; 0x2a4
   12100:	movw	r4, #57832	; 0xe1e8
   12104:	movt	r4, #2
   12108:	ldr	r3, [r4, #288]	; 0x120
   1210c:	ubfx	r3, r3, #7, #1
   12110:	ldr	r1, [r4, #292]	; 0x124
   12114:	add	r1, r3, r1
   12118:	ldr	r0, [r4, #296]	; 0x128
   1211c:	bl	11488 <aligned_alloc@plt>
   12120:	str	r0, [r4, #284]	; 0x11c
   12124:	cmp	r0, #0
   12128:	beq	1213c <__assert_fail@plt+0xc60>
   1212c:	add	sp, sp, #676	; 0x2a4
   12130:	ldrd	r4, [sp]
   12134:	add	sp, sp, #8
   12138:	pop	{pc}		; (ldr pc, [sp], #4)
   1213c:	mov	r2, #5
   12140:	movw	r1, #52364	; 0xcc8c
   12144:	movt	r1, #1
   12148:	bl	11230 <dcgettext@plt>
   1214c:	mov	r5, r0
   12150:	ldr	r4, [r4, #292]	; 0x124
   12154:	mov	r2, #1
   12158:	mov	r3, #0
   1215c:	strd	r2, [sp, #8]
   12160:	strd	r2, [sp]
   12164:	movw	r3, #497	; 0x1f1
   12168:	add	r2, sp, #20
   1216c:	mov	r0, r4
   12170:	asr	r1, r4, #31
   12174:	bl	166c8 <__assert_fail@plt+0x51ec>
   12178:	str	r0, [sp]
   1217c:	mov	r3, r4
   12180:	mov	r2, r5
   12184:	mov	r1, #0
   12188:	mov	r0, #1
   1218c:	bl	11d04 <__assert_fail@plt+0x828>
   12190:	movw	r3, #57832	; 0xe1e8
   12194:	movt	r3, #2
   12198:	ldr	r3, [r3, #300]	; 0x12c
   1219c:	cmp	r3, #0
   121a0:	bxne	lr
   121a4:	strd	r4, [sp, #-12]!
   121a8:	str	lr, [sp, #8]
   121ac:	sub	sp, sp, #676	; 0x2a4
   121b0:	movw	r3, #57832	; 0xe1e8
   121b4:	movt	r3, #2
   121b8:	ldr	r3, [r3, #288]	; 0x120
   121bc:	tst	r3, #2048	; 0x800
   121c0:	beq	12238 <__assert_fail@plt+0xd5c>
   121c4:	movw	r4, #57832	; 0xe1e8
   121c8:	movt	r4, #2
   121cc:	ldr	r1, [r4, #304]	; 0x130
   121d0:	ldr	r0, [r4, #296]	; 0x128
   121d4:	bl	11488 <aligned_alloc@plt>
   121d8:	str	r0, [r4, #300]	; 0x12c
   121dc:	cmp	r0, #0
   121e0:	bne	1224c <__assert_fail@plt+0xd70>
   121e4:	mov	r2, #5
   121e8:	movw	r1, #52420	; 0xccc4
   121ec:	movt	r1, #1
   121f0:	bl	11230 <dcgettext@plt>
   121f4:	mov	r5, r0
   121f8:	ldr	r4, [r4, #304]	; 0x130
   121fc:	mov	r2, #1
   12200:	mov	r3, #0
   12204:	strd	r2, [sp, #8]
   12208:	strd	r2, [sp]
   1220c:	movw	r3, #497	; 0x1f1
   12210:	add	r2, sp, #20
   12214:	mov	r0, r4
   12218:	asr	r1, r4, #31
   1221c:	bl	166c8 <__assert_fail@plt+0x51ec>
   12220:	str	r0, [sp]
   12224:	mov	r3, r4
   12228:	mov	r2, r5
   1222c:	mov	r1, #0
   12230:	mov	r0, #1
   12234:	bl	11d04 <__assert_fail@plt+0x828>
   12238:	bl	120e0 <__assert_fail@plt+0xc04>
   1223c:	movw	r3, #57832	; 0xe1e8
   12240:	movt	r3, #2
   12244:	ldr	r2, [r3, #284]	; 0x11c
   12248:	str	r2, [r3, #300]	; 0x12c
   1224c:	add	sp, sp, #676	; 0x2a4
   12250:	ldrd	r4, [sp]
   12254:	add	sp, sp, #8
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12260:	strd	r6, [sp, #8]
   12264:	strd	r8, [sp, #16]
   12268:	str	lr, [sp, #24]
   1226c:	sub	sp, sp, #12
   12270:	mov	r4, r0
   12274:	mov	r8, r1
   12278:	mov	r7, r2
   1227c:	mov	r9, r3
   12280:	mov	r5, #0
   12284:	mov	r6, #44	; 0x2c
   12288:	b	1235c <__assert_fail@plt+0xe80>
   1228c:	cmp	r0, #0
   12290:	subne	r5, r0, r4
   12294:	beq	122e4 <__assert_fail@plt+0xe08>
   12298:	mov	r2, #5
   1229c:	mov	r1, r9
   122a0:	mov	r0, #0
   122a4:	bl	11230 <dcgettext@plt>
   122a8:	mov	r6, r0
   122ac:	mov	r3, r5
   122b0:	mov	r2, r4
   122b4:	mov	r1, #8
   122b8:	mov	r0, #0
   122bc:	bl	192ec <__assert_fail@plt+0x7e10>
   122c0:	str	r0, [sp]
   122c4:	mov	r3, r6
   122c8:	movw	r2, #52480	; 0xcd00
   122cc:	movt	r2, #1
   122d0:	mov	r1, #0
   122d4:	mov	r0, r1
   122d8:	bl	11d04 <__assert_fail@plt+0x828>
   122dc:	mov	r0, #1
   122e0:	bl	116bc <__assert_fail@plt+0x1e0>
   122e4:	mov	r0, r4
   122e8:	bl	11380 <strlen@plt>
   122ec:	mov	r5, r0
   122f0:	b	12298 <__assert_fail@plt+0xdbc>
   122f4:	ldrb	r2, [r2]
   122f8:	cmp	r2, #44	; 0x2c
   122fc:	cmpne	r2, #0
   12300:	bne	12310 <__assert_fail@plt+0xe34>
   12304:	ldr	r2, [r3, #13]
   12308:	cmp	r2, #0
   1230c:	bne	12344 <__assert_fail@plt+0xe68>
   12310:	add	r3, r3, #16
   12314:	ldrb	r2, [r3, #-15]
   12318:	cmp	r2, #0
   1231c:	beq	1228c <__assert_fail@plt+0xdb0>
   12320:	mov	r1, r3
   12324:	mov	r2, r4
   12328:	ldrb	ip, [r1, #1]!
   1232c:	cmp	ip, #0
   12330:	beq	122f4 <__assert_fail@plt+0xe18>
   12334:	ldrb	lr, [r2], #1
   12338:	cmp	lr, ip
   1233c:	beq	12328 <__assert_fail@plt+0xe4c>
   12340:	b	12310 <__assert_fail@plt+0xe34>
   12344:	cmp	r7, #0
   12348:	orreq	r2, r2, r5
   1234c:	cmp	r0, #0
   12350:	beq	12370 <__assert_fail@plt+0xe94>
   12354:	add	r4, r0, #1
   12358:	mov	r5, r2
   1235c:	mov	r1, r6
   12360:	mov	r0, r4
   12364:	bl	1138c <strchr@plt>
   12368:	sub	r3, r8, #1
   1236c:	b	12320 <__assert_fail@plt+0xe44>
   12370:	mov	r0, r2
   12374:	add	sp, sp, #12
   12378:	ldrd	r4, [sp]
   1237c:	ldrd	r6, [sp, #8]
   12380:	ldrd	r8, [sp, #16]
   12384:	add	sp, sp, #24
   12388:	pop	{pc}		; (ldr pc, [sp], #4)
   1238c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12390:	strd	r6, [sp, #8]
   12394:	strd	r8, [sp, #16]
   12398:	strd	sl, [sp, #24]
   1239c:	str	lr, [sp, #32]
   123a0:	sub	sp, sp, #36	; 0x24
   123a4:	mov	r4, r2
   123a8:	mov	r5, r3
   123ac:	subs	r9, r0, #0
   123b0:	movw	r1, #57832	; 0xe1e8
   123b4:	movt	r1, #2
   123b8:	ldrbeq	r8, [r1, #328]	; 0x148
   123bc:	addeq	r1, r1, #320	; 0x140
   123c0:	ldrbne	r8, [r1, #329]	; 0x149
   123c4:	addne	r1, r1, #312	; 0x138
   123c8:	orrs	r3, r4, r5
   123cc:	beq	12440 <__assert_fail@plt+0xf64>
   123d0:	ldrd	r2, [r1]
   123d4:	adds	sl, r2, r4
   123d8:	adcs	fp, r3, r5
   123dc:	bvs	12604 <__assert_fail@plt+0x1128>
   123e0:	mov	r2, sl
   123e4:	mov	lr, fp
   123e8:	strd	sl, [sp, #16]
   123ec:	asr	ip, fp, #31
   123f0:	asr	fp, ip, #31
   123f4:	ldr	r3, [sp, #16]
   123f8:	eor	r3, r3, ip
   123fc:	subs	r3, r3, ip
   12400:	ubfx	r3, r3, #0, #17
   12404:	eor	r0, r3, ip
   12408:	subs	r0, r0, ip
   1240c:	str	r0, [sp, #24]
   12410:	sbc	r3, fp, fp
   12414:	str	r3, [sp, #28]
   12418:	ldrd	sl, [sp, #24]
   1241c:	mov	r3, sl
   12420:	mov	ip, fp
   12424:	strd	sl, [r1]
   12428:	ldrd	r0, [sp, #16]
   1242c:	cmp	sl, r0
   12430:	sbcs	r1, fp, r1
   12434:	movge	r0, #1
   12438:	bge	12588 <__assert_fail@plt+0x10ac>
   1243c:	b	12624 <__assert_fail@plt+0x1148>
   12440:	ldrd	r6, [r1]
   12444:	orr	r2, r2, r6
   12448:	orr	r3, r5, r7
   1244c:	orrs	r3, r2, r3
   12450:	moveq	r3, r8
   12454:	orrne	r3, r8, #1
   12458:	cmp	r3, #0
   1245c:	moveq	r0, #1
   12460:	beq	12588 <__assert_fail@plt+0x10ac>
   12464:	cmp	r9, #0
   12468:	bne	124b8 <__assert_fail@plt+0xfdc>
   1246c:	mov	sl, r4
   12470:	mov	fp, r5
   12474:	movw	r3, #57832	; 0xe1e8
   12478:	movt	r3, #2
   1247c:	ldrb	r3, [r3, #330]	; 0x14a
   12480:	cmp	r3, #0
   12484:	beq	124a4 <__assert_fail@plt+0xfc8>
   12488:	ldr	r3, [pc, #436]	; 12644 <__assert_fail@plt+0x1168>
   1248c:	ldrd	r0, [r3]
   12490:	b	12520 <__assert_fail@plt+0x1044>
   12494:	ldr	r3, [pc, #428]	; 12648 <__assert_fail@plt+0x116c>
   12498:	ldr	sl, [r3]
   1249c:	ldr	fp, [r3, #4]
   124a0:	b	12474 <__assert_fail@plt+0xf98>
   124a4:	bl	113a4 <__errno_location@plt>
   124a8:	mov	r3, #29
   124ac:	str	r3, [r0]
   124b0:	mvn	r0, #0
   124b4:	b	12580 <__assert_fail@plt+0x10a4>
   124b8:	mov	sl, r4
   124bc:	mov	fp, r5
   124c0:	movw	r3, #57680	; 0xe150
   124c4:	movt	r3, #2
   124c8:	ldrd	r2, [r3, #8]
   124cc:	mvn	r0, #0
   124d0:	mvn	r1, #0
   124d4:	cmp	r3, r1
   124d8:	cmpeq	r2, r0
   124dc:	beq	12514 <__assert_fail@plt+0x1038>
   124e0:	cmp	r2, #0
   124e4:	sbcs	r1, r3, #0
   124e8:	blt	125a4 <__assert_fail@plt+0x10c8>
   124ec:	orrs	r1, r4, r5
   124f0:	beq	12514 <__assert_fail@plt+0x1038>
   124f4:	movw	r0, #57680	; 0xe150
   124f8:	movt	r0, #2
   124fc:	adds	r1, r6, sl
   12500:	adc	ip, r7, fp
   12504:	adds	r1, r1, r2
   12508:	adc	r3, ip, r3
   1250c:	str	r1, [r0, #8]
   12510:	str	r3, [r0, #12]
   12514:	movw	r3, #57680	; 0xe150
   12518:	movt	r3, #2
   1251c:	ldrd	r0, [r3, #8]
   12520:	cmp	r0, #0
   12524:	sbcs	r3, r1, #0
   12528:	mvnlt	r0, #0
   1252c:	blt	12580 <__assert_fail@plt+0x10a4>
   12530:	orrs	r3, r4, r5
   12534:	movne	r8, #0
   12538:	andeq	r8, r8, #1
   1253c:	orrs	r3, r6, r7
   12540:	moveq	r8, #0
   12544:	cmp	r8, #0
   12548:	bne	125cc <__assert_fail@plt+0x10f0>
   1254c:	subs	r2, r0, r6
   12550:	sbc	r3, r1, r7
   12554:	subs	sl, r2, sl
   12558:	sbc	fp, r3, fp
   1255c:	orrs	r3, r6, r7
   12560:	beq	125d4 <__assert_fail@plt+0x10f8>
   12564:	mov	r3, #4
   12568:	str	r3, [sp, #8]
   1256c:	strd	r6, [sp]
   12570:	mov	r2, sl
   12574:	mov	r3, fp
   12578:	mov	r0, r9
   1257c:	bl	11188 <posix_fadvise64@plt>
   12580:	adds	r0, r0, #1
   12584:	movne	r0, #1
   12588:	add	sp, sp, #36	; 0x24
   1258c:	ldrd	r4, [sp]
   12590:	ldrd	r6, [sp, #8]
   12594:	ldrd	r8, [sp, #16]
   12598:	ldrd	sl, [sp, #24]
   1259c:	add	sp, sp, #32
   125a0:	pop	{pc}		; (ldr pc, [sp], #4)
   125a4:	mov	r3, #1
   125a8:	str	r3, [sp]
   125ac:	mov	r2, #0
   125b0:	mov	r3, #0
   125b4:	mov	r0, r9
   125b8:	bl	112a8 <lseek64@plt>
   125bc:	movw	r3, #57680	; 0xe150
   125c0:	movt	r3, #2
   125c4:	strd	r0, [r3, #8]
   125c8:	b	12514 <__assert_fail@plt+0x1038>
   125cc:	subs	sl, r0, r6
   125d0:	sbc	fp, r1, r7
   125d4:	movw	r3, #57832	; 0xe1e8
   125d8:	movt	r3, #2
   125dc:	ldr	r2, [r3, #296]	; 0x128
   125e0:	asr	r3, r2, #31
   125e4:	mov	r0, sl
   125e8:	mov	r1, fp
   125ec:	bl	1b578 <__assert_fail@plt+0xa09c>
   125f0:	subs	sl, sl, r2
   125f4:	sbc	fp, fp, r3
   125f8:	mov	r6, #0
   125fc:	mov	r7, #0
   12600:	b	12564 <__assert_fail@plt+0x1088>
   12604:	movw	r3, #65535	; 0xffff
   12608:	movt	r3, #1
   1260c:	mov	r0, #0
   12610:	str	r3, [r1]
   12614:	str	r0, [r1, #4]
   12618:	mov	ip, r0
   1261c:	mvn	r2, #0
   12620:	mvn	lr, #-2147483648	; 0x80000000
   12624:	subs	r6, r2, r3
   12628:	sbc	r7, lr, ip
   1262c:	cmp	r9, #0
   12630:	beq	12494 <__assert_fail@plt+0xfb8>
   12634:	ldr	r3, [pc, #12]	; 12648 <__assert_fail@plt+0x116c>
   12638:	ldr	sl, [r3, #-8]
   1263c:	ldr	fp, [r3, #-4]
   12640:	b	124c0 <__assert_fail@plt+0xfe4>
   12644:	strdeq	lr, [r2], -r8
   12648:	andeq	lr, r2, r8, lsr #6
   1264c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12650:	strd	r6, [sp, #8]
   12654:	strd	r8, [sp, #16]
   12658:	str	sl, [sp, #24]
   1265c:	str	lr, [sp, #28]
   12660:	vpush	{d8}
   12664:	sub	sp, sp, #2016	; 0x7e0
   12668:	sub	sp, sp, #8
   1266c:	mov	r8, r0
   12670:	mov	r9, r1
   12674:	orrs	r3, r8, r9
   12678:	strdne	r8, [sp, #24]
   1267c:	beq	128d0 <__assert_fail@plt+0x13f4>
   12680:	movw	r4, #57832	; 0xe1e8
   12684:	movt	r4, #2
   12688:	add	sl, r4, #336	; 0x150
   1268c:	mov	r6, #1
   12690:	mov	r7, #0
   12694:	strd	r6, [sp, #8]
   12698:	strd	r6, [sp]
   1269c:	movw	r3, #465	; 0x1d1
   126a0:	add	r2, sp, #60	; 0x3c
   126a4:	ldrd	r0, [sl]
   126a8:	bl	166c8 <__assert_fail@plt+0x51ec>
   126ac:	mov	r5, r0
   126b0:	strd	r6, [sp, #8]
   126b4:	strd	r6, [sp]
   126b8:	movw	r3, #497	; 0x1f1
   126bc:	add	r2, sp, #712	; 0x2c8
   126c0:	add	r2, r2, #2
   126c4:	ldrd	r0, [sl]
   126c8:	bl	166c8 <__assert_fail@plt+0x51ec>
   126cc:	mov	r6, r0
   126d0:	add	r4, r4, #352	; 0x160
   126d4:	ldrd	r2, [r4, #-8]
   126d8:	ldrd	r0, [sp, #24]
   126dc:	cmp	r2, r0
   126e0:	sbcs	ip, r3, r1
   126e4:	bge	128dc <__assert_fail@plt+0x1400>
   126e8:	subs	r7, r0, r2
   126ec:	sbc	r4, r1, r3
   126f0:	mov	r0, r7
   126f4:	mov	r1, r4
   126f8:	bl	1b518 <__assert_fail@plt+0xa03c>
   126fc:	vldr	d7, [pc, #860]	; 12a60 <__assert_fail@plt+0x1584>
   12700:	vmov	d6, r0, r1
   12704:	vdiv.f64	d8, d6, d7
   12708:	str	r7, [sp, #8]
   1270c:	str	r4, [sp, #12]
   12710:	add	r3, pc, #848	; 0x350
   12714:	ldrd	r2, [r3]
   12718:	strd	r2, [sp]
   1271c:	movw	r3, #465	; 0x1d1
   12720:	add	r2, sp, #1360	; 0x550
   12724:	add	r2, r2, #8
   12728:	ldrd	r0, [sl]
   1272c:	bl	166c8 <__assert_fail@plt+0x51ec>
   12730:	mov	r4, r0
   12734:	bl	11380 <strlen@plt>
   12738:	movw	r3, #52520	; 0xcd28
   1273c:	movt	r3, #1
   12740:	add	r2, r4, r0
   12744:	ldrh	r1, [r3]
   12748:	strh	r1, [r4, r0]
   1274c:	ldrb	r3, [r3, #2]
   12750:	strb	r3, [r2, #2]
   12754:	orrs	r3, r8, r9
   12758:	movweq	r3, #52496	; 0xcd10
   1275c:	movteq	r3, #1
   12760:	beq	12798 <__assert_fail@plt+0x12bc>
   12764:	movw	r3, #57816	; 0xe1d8
   12768:	movt	r3, #2
   1276c:	ldr	r0, [r3]
   12770:	ldr	r3, [r0, #20]
   12774:	ldr	r2, [r0, #24]
   12778:	cmp	r3, r2
   1277c:	addcc	r2, r3, #1
   12780:	strcc	r2, [r0, #20]
   12784:	movcc	r2, #13
   12788:	strbcc	r2, [r3]
   1278c:	bcs	12928 <__assert_fail@plt+0x144c>
   12790:	movw	r3, #52488	; 0xcd08
   12794:	movt	r3, #1
   12798:	vstr	d8, [sp, #8]
   1279c:	str	r3, [sp]
   127a0:	mov	r3, #24
   127a4:	mov	r2, #1
   127a8:	mov	r1, r3
   127ac:	add	r0, sp, #36	; 0x24
   127b0:	bl	114d0 <__snprintf_chk@plt>
   127b4:	mov	r0, r5
   127b8:	bl	11380 <strlen@plt>
   127bc:	add	r0, r5, r0
   127c0:	ldrb	r3, [r0, #-2]
   127c4:	cmp	r3, #32
   127c8:	bne	12934 <__assert_fail@plt+0x1458>
   127cc:	movw	r3, #57816	; 0xe1d8
   127d0:	movt	r3, #2
   127d4:	ldr	r6, [r3]
   127d8:	movw	r3, #57832	; 0xe1e8
   127dc:	movt	r3, #2
   127e0:	ldr	r5, [r3, #336]	; 0x150
   127e4:	ldr	r7, [r3, #340]	; 0x154
   127e8:	mov	r0, r5
   127ec:	mov	r1, r7
   127f0:	mvn	r2, #0
   127f4:	mov	r3, #0
   127f8:	cmp	r7, r3
   127fc:	cmpeq	r5, r2
   12800:	movls	r3, r5
   12804:	bls	12820 <__assert_fail@plt+0x1344>
   12808:	movw	r2, #16960	; 0x4240
   1280c:	movt	r2, #15
   12810:	mov	r3, #0
   12814:	bl	1b64c <__assert_fail@plt+0xa170>
   12818:	add	r3, r2, #999424	; 0xf4000
   1281c:	add	r3, r3, #576	; 0x240
   12820:	mov	r2, #5
   12824:	str	r2, [sp]
   12828:	movw	r2, #52524	; 0xcd2c
   1282c:	movt	r2, #1
   12830:	movw	r1, #52552	; 0xcd48
   12834:	movt	r1, #1
   12838:	mov	r0, #0
   1283c:	bl	114c4 <dcngettext@plt>
   12840:	str	r4, [sp, #12]
   12844:	add	r3, sp, #36	; 0x24
   12848:	str	r3, [sp, #8]
   1284c:	str	r5, [sp]
   12850:	str	r7, [sp, #4]
   12854:	mov	r2, r0
   12858:	mov	r1, #1
   1285c:	mov	r0, r6
   12860:	bl	11404 <__fprintf_chk@plt>
   12864:	mov	r4, r0
   12868:	orrs	r3, r8, r9
   1286c:	beq	12a28 <__assert_fail@plt+0x154c>
   12870:	cmp	r4, #0
   12874:	blt	1288c <__assert_fail@plt+0x13b0>
   12878:	movw	r3, #57832	; 0xe1e8
   1287c:	movt	r3, #2
   12880:	ldr	r3, [r3, #280]	; 0x118
   12884:	cmp	r3, r4
   12888:	bgt	129f8 <__assert_fail@plt+0x151c>
   1288c:	movw	r3, #57832	; 0xe1e8
   12890:	movt	r3, #2
   12894:	str	r4, [r3, #280]	; 0x118
   12898:	movw	r3, #57680	; 0xe150
   1289c:	movt	r3, #2
   128a0:	ldr	r2, [pc, #464]	; 12a78 <__assert_fail@plt+0x159c>
   128a4:	ldrd	r0, [r2]
   128a8:	strd	r0, [r3, #16]
   128ac:	add	sp, sp, #2016	; 0x7e0
   128b0:	add	sp, sp, #8
   128b4:	vpop	{d8}
   128b8:	ldrd	r4, [sp]
   128bc:	ldrd	r6, [sp, #8]
   128c0:	ldrd	r8, [sp, #16]
   128c4:	ldr	sl, [sp, #24]
   128c8:	add	sp, sp, #28
   128cc:	pop	{pc}		; (ldr pc, [sp], #4)
   128d0:	bl	16548 <__assert_fail@plt+0x506c>
   128d4:	strd	r0, [sp, #24]
   128d8:	b	12680 <__assert_fail@plt+0x11a4>
   128dc:	mov	r2, #5
   128e0:	movw	r1, #52504	; 0xcd18
   128e4:	movt	r1, #1
   128e8:	mov	r0, #0
   128ec:	bl	11230 <dcgettext@plt>
   128f0:	str	r0, [sp, #4]
   128f4:	movw	r3, #52516	; 0xcd24
   128f8:	movt	r3, #1
   128fc:	str	r3, [sp]
   12900:	movw	r3, #654	; 0x28e
   12904:	mov	r2, #1
   12908:	mov	r1, r3
   1290c:	add	r0, sp, #72	; 0x48
   12910:	add	r0, r0, #1296	; 0x510
   12914:	bl	114d0 <__snprintf_chk@plt>
   12918:	add	r3, sp, #72	; 0x48
   1291c:	add	r4, r3, #1296	; 0x510
   12920:	vldr	d8, [pc, #328]	; 12a70 <__assert_fail@plt+0x1594>
   12924:	b	12754 <__assert_fail@plt+0x1278>
   12928:	mov	r1, #13
   1292c:	bl	11434 <__overflow@plt>
   12930:	b	12790 <__assert_fail@plt+0x12b4>
   12934:	mov	r0, r6
   12938:	bl	11380 <strlen@plt>
   1293c:	add	r0, r6, r0
   12940:	ldrb	r3, [r0, #-2]
   12944:	cmp	r3, #32
   12948:	bne	129a0 <__assert_fail@plt+0x14c4>
   1294c:	movw	r3, #57816	; 0xe1d8
   12950:	movt	r3, #2
   12954:	ldr	r6, [r3]
   12958:	mov	r2, #5
   1295c:	movw	r1, #52580	; 0xcd64
   12960:	movt	r1, #1
   12964:	mov	r0, #0
   12968:	bl	11230 <dcgettext@plt>
   1296c:	str	r4, [sp, #16]
   12970:	add	r3, sp, #36	; 0x24
   12974:	str	r3, [sp, #12]
   12978:	str	r5, [sp, #8]
   1297c:	ldr	r3, [pc, #244]	; 12a78 <__assert_fail@plt+0x159c>
   12980:	ldrd	r2, [r3]
   12984:	strd	r2, [sp]
   12988:	mov	r2, r0
   1298c:	mov	r1, #1
   12990:	mov	r0, r6
   12994:	bl	11404 <__fprintf_chk@plt>
   12998:	mov	r4, r0
   1299c:	b	12868 <__assert_fail@plt+0x138c>
   129a0:	movw	r3, #57816	; 0xe1d8
   129a4:	movt	r3, #2
   129a8:	ldr	r7, [r3]
   129ac:	mov	r2, #5
   129b0:	movw	r1, #52612	; 0xcd84
   129b4:	movt	r1, #1
   129b8:	mov	r0, #0
   129bc:	bl	11230 <dcgettext@plt>
   129c0:	str	r4, [sp, #20]
   129c4:	add	r3, sp, #36	; 0x24
   129c8:	str	r3, [sp, #16]
   129cc:	str	r6, [sp, #12]
   129d0:	str	r5, [sp, #8]
   129d4:	ldr	r3, [pc, #156]	; 12a78 <__assert_fail@plt+0x159c>
   129d8:	ldrd	r2, [r3]
   129dc:	strd	r2, [sp]
   129e0:	mov	r2, r0
   129e4:	mov	r1, #1
   129e8:	mov	r0, r7
   129ec:	bl	11404 <__fprintf_chk@plt>
   129f0:	mov	r4, r0
   129f4:	b	12868 <__assert_fail@plt+0x138c>
   129f8:	movw	r0, #57816	; 0xe1d8
   129fc:	movt	r0, #2
   12a00:	movw	r2, #51668	; 0xc9d4
   12a04:	movt	r2, #1
   12a08:	str	r2, [sp]
   12a0c:	sub	r3, r3, r4
   12a10:	movw	r2, #52648	; 0xcda8
   12a14:	movt	r2, #1
   12a18:	mov	r1, #1
   12a1c:	ldr	r0, [r0]
   12a20:	bl	11404 <__fprintf_chk@plt>
   12a24:	b	1288c <__assert_fail@plt+0x13b0>
   12a28:	movw	r3, #57816	; 0xe1d8
   12a2c:	movt	r3, #2
   12a30:	ldr	r0, [r3]
   12a34:	ldr	r3, [r0, #20]
   12a38:	ldr	r2, [r0, #24]
   12a3c:	cmp	r3, r2
   12a40:	addcc	r2, r3, #1
   12a44:	strcc	r2, [r0, #20]
   12a48:	movcc	r2, #10
   12a4c:	strbcc	r2, [r3]
   12a50:	bcc	12898 <__assert_fail@plt+0x13bc>
   12a54:	mov	r1, #10
   12a58:	bl	11434 <__overflow@plt>
   12a5c:	b	12898 <__assert_fail@plt+0x13bc>
   12a60:	andeq	r0, r0, r0
   12a64:	bicmi	ip, sp, r5, ror #26
   12a68:	blcc	fe6c5270 <opterr@@GLIBC_2.4+0xfe697090>
	...
   12a78:	andeq	lr, r2, r8, lsr r3
   12a7c:	movw	r3, #57680	; 0xe150
   12a80:	movt	r3, #2
   12a84:	ldr	r3, [r3, #24]
   12a88:	cmp	r3, #1
   12a8c:	bxeq	lr
   12a90:	strd	r4, [sp, #-16]!
   12a94:	str	r6, [sp, #8]
   12a98:	str	lr, [sp, #12]
   12a9c:	sub	sp, sp, #32
   12aa0:	movw	r3, #57832	; 0xe1e8
   12aa4:	movt	r3, #2
   12aa8:	ldr	r3, [r3, #280]	; 0x118
   12aac:	cmp	r3, #0
   12ab0:	ble	12af0 <__assert_fail@plt+0x1614>
   12ab4:	movw	r3, #57816	; 0xe1d8
   12ab8:	movt	r3, #2
   12abc:	ldr	r0, [r3]
   12ac0:	ldr	r3, [r0, #20]
   12ac4:	ldr	r2, [r0, #24]
   12ac8:	cmp	r3, r2
   12acc:	addcc	r2, r3, #1
   12ad0:	strcc	r2, [r0, #20]
   12ad4:	movcc	r2, #10
   12ad8:	strbcc	r2, [r3]
   12adc:	bcs	12c0c <__assert_fail@plt+0x1730>
   12ae0:	movw	r3, #57832	; 0xe1e8
   12ae4:	movt	r3, #2
   12ae8:	mov	r2, #0
   12aec:	str	r2, [r3, #280]	; 0x118
   12af0:	movw	r3, #57816	; 0xe1d8
   12af4:	movt	r3, #2
   12af8:	ldr	r6, [r3]
   12afc:	mov	r2, #5
   12b00:	movw	r1, #52652	; 0xcdac
   12b04:	movt	r1, #1
   12b08:	mov	r0, #0
   12b0c:	bl	11230 <dcgettext@plt>
   12b10:	movw	r3, #57832	; 0xe1e8
   12b14:	movt	r3, #2
   12b18:	add	r2, r3, #352	; 0x160
   12b1c:	ldrd	r4, [r2]
   12b20:	strd	r4, [sp, #24]
   12b24:	add	r2, r3, #368	; 0x170
   12b28:	ldrd	r4, [r2, #-8]
   12b2c:	strd	r4, [sp, #16]
   12b30:	ldrd	r4, [r2]
   12b34:	strd	r4, [sp, #8]
   12b38:	add	r4, r3, #384	; 0x180
   12b3c:	ldrd	r2, [r4, #-8]
   12b40:	strd	r2, [sp]
   12b44:	mov	r2, r0
   12b48:	mov	r1, #1
   12b4c:	mov	r0, r6
   12b50:	bl	11404 <__fprintf_chk@plt>
   12b54:	ldrd	r4, [r4]
   12b58:	orrs	r3, r4, r5
   12b5c:	beq	12bd8 <__assert_fail@plt+0x16fc>
   12b60:	movw	r3, #57816	; 0xe1d8
   12b64:	movt	r3, #2
   12b68:	ldr	r6, [r3]
   12b6c:	mvn	r2, #0
   12b70:	mov	r3, #0
   12b74:	cmp	r5, r3
   12b78:	cmpeq	r4, r2
   12b7c:	movls	r3, r4
   12b80:	bls	12ba4 <__assert_fail@plt+0x16c8>
   12b84:	movw	r2, #16960	; 0x4240
   12b88:	movt	r2, #15
   12b8c:	mov	r3, #0
   12b90:	mov	r0, r4
   12b94:	mov	r1, r5
   12b98:	bl	1b64c <__assert_fail@plt+0xa170>
   12b9c:	add	r3, r2, #999424	; 0xf4000
   12ba0:	add	r3, r3, #576	; 0x240
   12ba4:	mov	r2, #5
   12ba8:	str	r2, [sp]
   12bac:	movw	r2, #52696	; 0xcdd8
   12bb0:	movt	r2, #1
   12bb4:	movw	r1, #52720	; 0xcdf0
   12bb8:	movt	r1, #1
   12bbc:	mov	r0, #0
   12bc0:	bl	114c4 <dcngettext@plt>
   12bc4:	strd	r4, [sp]
   12bc8:	mov	r2, r0
   12bcc:	mov	r1, #1
   12bd0:	mov	r0, r6
   12bd4:	bl	11404 <__fprintf_chk@plt>
   12bd8:	movw	r3, #57680	; 0xe150
   12bdc:	movt	r3, #2
   12be0:	ldr	r3, [r3, #24]
   12be4:	cmp	r3, #2
   12be8:	beq	12bf8 <__assert_fail@plt+0x171c>
   12bec:	mov	r0, #0
   12bf0:	mov	r1, #0
   12bf4:	bl	1264c <__assert_fail@plt+0x1170>
   12bf8:	add	sp, sp, #32
   12bfc:	ldrd	r4, [sp]
   12c00:	ldr	r6, [sp, #8]
   12c04:	add	sp, sp, #12
   12c08:	pop	{pc}		; (ldr pc, [sp], #4)
   12c0c:	mov	r1, #10
   12c10:	bl	11434 <__overflow@plt>
   12c14:	b	12ae0 <__assert_fail@plt+0x1604>
   12c18:	strd	r4, [sp, #-16]!
   12c1c:	str	r6, [sp, #8]
   12c20:	str	lr, [sp, #12]
   12c24:	sub	sp, sp, #128	; 0x80
   12c28:	movw	r4, #57832	; 0xe1e8
   12c2c:	movt	r4, #2
   12c30:	add	r6, r4, #392	; 0x188
   12c34:	b	12c78 <__assert_fail@plt+0x179c>
   12c38:	mov	r2, sp
   12c3c:	mov	r1, r6
   12c40:	mov	r0, #0
   12c44:	bl	111ac <sigprocmask@plt>
   12c48:	ldr	r5, [r4, #260]	; 0x104
   12c4c:	ldr	r3, [r4, #264]	; 0x108
   12c50:	cmp	r3, #0
   12c54:	subne	r3, r3, #1
   12c58:	strne	r3, [r4, #264]	; 0x108
   12c5c:	mov	r2, #0
   12c60:	mov	r1, sp
   12c64:	mov	r0, #2
   12c68:	bl	111ac <sigprocmask@plt>
   12c6c:	cmp	r5, #0
   12c70:	bne	12ca4 <__assert_fail@plt+0x17c8>
   12c74:	bl	12a7c <__assert_fail@plt+0x15a0>
   12c78:	ldr	r3, [r4, #260]	; 0x104
   12c7c:	cmp	r3, #0
   12c80:	bne	12c38 <__assert_fail@plt+0x175c>
   12c84:	ldr	r3, [r4, #264]	; 0x108
   12c88:	cmp	r3, #0
   12c8c:	bne	12c38 <__assert_fail@plt+0x175c>
   12c90:	add	sp, sp, #128	; 0x80
   12c94:	ldrd	r4, [sp]
   12c98:	ldr	r6, [sp, #8]
   12c9c:	add	sp, sp, #12
   12ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca4:	bl	12fd8 <__assert_fail@plt+0x1afc>
   12ca8:	bl	12a7c <__assert_fail@plt+0x15a0>
   12cac:	mov	r0, r5
   12cb0:	bl	11164 <raise@plt>
   12cb4:	b	12c78 <__assert_fail@plt+0x179c>
   12cb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12cbc:	strd	r6, [sp, #8]
   12cc0:	str	r8, [sp, #16]
   12cc4:	str	lr, [sp, #20]
   12cc8:	mov	r8, r0
   12ccc:	mov	r7, r1
   12cd0:	mov	r6, r2
   12cd4:	mov	r5, r3
   12cd8:	bl	12c18 <__assert_fail@plt+0x173c>
   12cdc:	mov	r3, r5
   12ce0:	mov	r2, r6
   12ce4:	mov	r1, r7
   12ce8:	mov	r0, r8
   12cec:	bl	16398 <__assert_fail@plt+0x4ebc>
   12cf0:	subs	r4, r0, #0
   12cf4:	bge	12d08 <__assert_fail@plt+0x182c>
   12cf8:	bl	113a4 <__errno_location@plt>
   12cfc:	ldr	r3, [r0]
   12d00:	cmp	r3, #4
   12d04:	beq	12cd8 <__assert_fail@plt+0x17fc>
   12d08:	mov	r0, r4
   12d0c:	ldrd	r4, [sp]
   12d10:	ldrd	r6, [sp, #8]
   12d14:	ldr	r8, [sp, #16]
   12d18:	add	sp, sp, #20
   12d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d24:	strd	r6, [sp, #8]
   12d28:	str	r8, [sp, #16]
   12d2c:	str	lr, [sp, #20]
   12d30:	mov	r7, r0
   12d34:	mov	r6, r1
   12d38:	mov	r5, #3
   12d3c:	bl	12c18 <__assert_fail@plt+0x173c>
   12d40:	mov	r2, r6
   12d44:	mov	r1, r7
   12d48:	mov	r0, r5
   12d4c:	bl	11278 <__fxstat64@plt>
   12d50:	subs	r4, r0, #0
   12d54:	bge	12d68 <__assert_fail@plt+0x188c>
   12d58:	bl	113a4 <__errno_location@plt>
   12d5c:	ldr	r3, [r0]
   12d60:	cmp	r3, #4
   12d64:	beq	12d3c <__assert_fail@plt+0x1860>
   12d68:	mov	r0, r4
   12d6c:	ldrd	r4, [sp]
   12d70:	ldrd	r6, [sp, #8]
   12d74:	ldr	r8, [sp, #16]
   12d78:	add	sp, sp, #20
   12d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d80:	strd	r4, [sp, #-20]!	; 0xffffffec
   12d84:	strd	r6, [sp, #8]
   12d88:	str	lr, [sp, #16]
   12d8c:	sub	sp, sp, #108	; 0x6c
   12d90:	bics	r4, r1, #33024	; 0x8100
   12d94:	bne	12dac <__assert_fail@plt+0x18d0>
   12d98:	add	sp, sp, #108	; 0x6c
   12d9c:	ldrd	r4, [sp]
   12da0:	ldrd	r6, [sp, #8]
   12da4:	add	sp, sp, #16
   12da8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dac:	mov	r7, r2
   12db0:	mov	r5, r0
   12db4:	mov	r1, #3
   12db8:	bl	1612c <__assert_fail@plt+0x4c50>
   12dbc:	mov	r6, r0
   12dc0:	orr	r4, r4, r0
   12dc4:	cmp	r0, #0
   12dc8:	blt	12e28 <__assert_fail@plt+0x194c>
   12dcc:	cmp	r0, r4
   12dd0:	beq	12d98 <__assert_fail@plt+0x18bc>
   12dd4:	tst	r4, #16384	; 0x4000
   12dd8:	bne	12df8 <__assert_fail@plt+0x191c>
   12ddc:	mov	r2, r4
   12de0:	mov	r1, #4
   12de4:	mov	r0, r5
   12de8:	bl	1612c <__assert_fail@plt+0x4c50>
   12dec:	cmn	r0, #1
   12df0:	bne	12d98 <__assert_fail@plt+0x18bc>
   12df4:	b	12e28 <__assert_fail@plt+0x194c>
   12df8:	mov	r1, sp
   12dfc:	mov	r0, r5
   12e00:	bl	12d20 <__assert_fail@plt+0x1844>
   12e04:	cmp	r0, #0
   12e08:	bne	12e28 <__assert_fail@plt+0x194c>
   12e0c:	ldr	r3, [sp, #16]
   12e10:	and	r3, r3, #61440	; 0xf000
   12e14:	cmp	r3, #16384	; 0x4000
   12e18:	beq	12e68 <__assert_fail@plt+0x198c>
   12e1c:	bl	113a4 <__errno_location@plt>
   12e20:	mov	r3, #20
   12e24:	str	r3, [r0]
   12e28:	bl	113a4 <__errno_location@plt>
   12e2c:	ldr	r4, [r0]
   12e30:	mov	r2, #5
   12e34:	movw	r1, #52744	; 0xce08
   12e38:	movt	r1, #1
   12e3c:	mov	r0, #0
   12e40:	bl	11230 <dcgettext@plt>
   12e44:	mov	r5, r0
   12e48:	mov	r1, r7
   12e4c:	mov	r0, #4
   12e50:	bl	19338 <__assert_fail@plt+0x7e5c>
   12e54:	mov	r3, r0
   12e58:	mov	r2, r5
   12e5c:	mov	r1, r4
   12e60:	mov	r0, #1
   12e64:	bl	11d04 <__assert_fail@plt+0x828>
   12e68:	bic	r4, r4, #16384	; 0x4000
   12e6c:	cmp	r4, r6
   12e70:	beq	12d98 <__assert_fail@plt+0x18bc>
   12e74:	b	12ddc <__assert_fail@plt+0x1900>
   12e78:	strd	r4, [sp, #-16]!
   12e7c:	str	r6, [sp, #8]
   12e80:	str	lr, [sp, #12]
   12e84:	movw	r3, #57832	; 0xe1e8
   12e88:	movt	r3, #2
   12e8c:	ldr	r4, [r3, #288]	; 0x120
   12e90:	bic	r2, r4, #49152	; 0xc000
   12e94:	str	r2, [r3, #288]	; 0x120
   12e98:	tst	r4, #16384	; 0x4000
   12e9c:	bne	12ebc <__assert_fail@plt+0x19e0>
   12ea0:	ands	r4, r4, #32768	; 0x8000
   12ea4:	bne	12f50 <__assert_fail@plt+0x1a74>
   12ea8:	mov	r0, r4
   12eac:	ldrd	r4, [sp]
   12eb0:	ldr	r6, [sp, #8]
   12eb4:	add	sp, sp, #12
   12eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ebc:	mov	r5, #1
   12ec0:	bl	12c18 <__assert_fail@plt+0x173c>
   12ec4:	mov	r0, r5
   12ec8:	bl	114a0 <fdatasync@plt>
   12ecc:	cmp	r0, #0
   12ed0:	bge	12f44 <__assert_fail@plt+0x1a68>
   12ed4:	bl	113a4 <__errno_location@plt>
   12ed8:	ldr	r3, [r0]
   12edc:	cmp	r3, #4
   12ee0:	beq	12ec0 <__assert_fail@plt+0x19e4>
   12ee4:	bl	113a4 <__errno_location@plt>
   12ee8:	ldr	r4, [r0]
   12eec:	sub	r3, r4, #22
   12ef0:	bics	r3, r3, #16
   12ef4:	moveq	r4, #0
   12ef8:	beq	12f54 <__assert_fail@plt+0x1a78>
   12efc:	mov	r2, #5
   12f00:	movw	r1, #52768	; 0xce20
   12f04:	movt	r1, #1
   12f08:	mov	r0, #0
   12f0c:	bl	11230 <dcgettext@plt>
   12f10:	mov	r5, r0
   12f14:	movw	r3, #57832	; 0xe1e8
   12f18:	movt	r3, #2
   12f1c:	ldr	r1, [r3, #520]	; 0x208
   12f20:	mov	r0, #4
   12f24:	bl	19338 <__assert_fail@plt+0x7e5c>
   12f28:	mov	r3, r0
   12f2c:	mov	r2, r5
   12f30:	mov	r1, r4
   12f34:	mov	r0, #0
   12f38:	bl	11d04 <__assert_fail@plt+0x828>
   12f3c:	mov	r4, #1
   12f40:	b	12f54 <__assert_fail@plt+0x1a78>
   12f44:	cmp	r0, #0
   12f48:	beq	12ea0 <__assert_fail@plt+0x19c4>
   12f4c:	b	12ee4 <__assert_fail@plt+0x1a08>
   12f50:	mov	r4, #0
   12f54:	mov	r5, #1
   12f58:	bl	12c18 <__assert_fail@plt+0x173c>
   12f5c:	mov	r0, r5
   12f60:	bl	11170 <fsync@plt>
   12f64:	cmp	r0, #0
   12f68:	bge	12fcc <__assert_fail@plt+0x1af0>
   12f6c:	bl	113a4 <__errno_location@plt>
   12f70:	ldr	r3, [r0]
   12f74:	cmp	r3, #4
   12f78:	beq	12f58 <__assert_fail@plt+0x1a7c>
   12f7c:	bl	113a4 <__errno_location@plt>
   12f80:	ldr	r4, [r0]
   12f84:	mov	r2, #5
   12f88:	movw	r1, #52792	; 0xce38
   12f8c:	movt	r1, #1
   12f90:	mov	r0, #0
   12f94:	bl	11230 <dcgettext@plt>
   12f98:	mov	r5, r0
   12f9c:	movw	r3, #57832	; 0xe1e8
   12fa0:	movt	r3, #2
   12fa4:	ldr	r1, [r3, #520]	; 0x208
   12fa8:	mov	r0, #4
   12fac:	bl	19338 <__assert_fail@plt+0x7e5c>
   12fb0:	mov	r3, r0
   12fb4:	mov	r2, r5
   12fb8:	mov	r1, r4
   12fbc:	mov	r0, #0
   12fc0:	bl	11d04 <__assert_fail@plt+0x828>
   12fc4:	mov	r4, #1
   12fc8:	b	12ea8 <__assert_fail@plt+0x19cc>
   12fcc:	cmp	r0, #0
   12fd0:	beq	12ea8 <__assert_fail@plt+0x19cc>
   12fd4:	b	12f7c <__assert_fail@plt+0x1aa0>
   12fd8:	strd	r4, [sp, #-16]!
   12fdc:	str	r6, [sp, #8]
   12fe0:	str	lr, [sp, #12]
   12fe4:	movw	r3, #57832	; 0xe1e8
   12fe8:	movt	r3, #2
   12fec:	ldr	r3, [r3, #260]	; 0x104
   12ff0:	cmp	r3, #0
   12ff4:	bne	13004 <__assert_fail@plt+0x1b28>
   12ff8:	bl	12e78 <__assert_fail@plt+0x199c>
   12ffc:	cmp	r0, #0
   13000:	bne	13034 <__assert_fail@plt+0x1b58>
   13004:	mov	r0, #0
   13008:	bl	11c9c <__assert_fail@plt+0x7c0>
   1300c:	cmp	r0, #0
   13010:	bne	13038 <__assert_fail@plt+0x1b5c>
   13014:	mov	r0, #1
   13018:	bl	11c9c <__assert_fail@plt+0x7c0>
   1301c:	cmp	r0, #0
   13020:	bne	13080 <__assert_fail@plt+0x1ba4>
   13024:	ldrd	r4, [sp]
   13028:	ldr	r6, [sp, #8]
   1302c:	add	sp, sp, #12
   13030:	pop	{pc}		; (ldr pc, [sp], #4)
   13034:	bl	11374 <exit@plt>
   13038:	bl	113a4 <__errno_location@plt>
   1303c:	ldr	r4, [r0]
   13040:	mov	r2, #5
   13044:	movw	r1, #52812	; 0xce4c
   13048:	movt	r1, #1
   1304c:	mov	r0, #0
   13050:	bl	11230 <dcgettext@plt>
   13054:	mov	r5, r0
   13058:	movw	r3, #57832	; 0xe1e8
   1305c:	movt	r3, #2
   13060:	ldr	r1, [r3, #524]	; 0x20c
   13064:	mov	r0, #4
   13068:	bl	19338 <__assert_fail@plt+0x7e5c>
   1306c:	mov	r3, r0
   13070:	mov	r2, r5
   13074:	mov	r1, r4
   13078:	mov	r0, #1
   1307c:	bl	11d04 <__assert_fail@plt+0x828>
   13080:	bl	113a4 <__errno_location@plt>
   13084:	ldr	r4, [r0]
   13088:	mov	r2, #5
   1308c:	movw	r1, #52836	; 0xce64
   13090:	movt	r1, #1
   13094:	mov	r0, #0
   13098:	bl	11230 <dcgettext@plt>
   1309c:	mov	r5, r0
   130a0:	movw	r3, #57832	; 0xe1e8
   130a4:	movt	r3, #2
   130a8:	ldr	r1, [r3, #520]	; 0x208
   130ac:	mov	r0, #4
   130b0:	bl	19338 <__assert_fail@plt+0x7e5c>
   130b4:	mov	r3, r0
   130b8:	mov	r2, r5
   130bc:	mov	r1, r4
   130c0:	mov	r0, #1
   130c4:	bl	11d04 <__assert_fail@plt+0x828>
   130c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   130cc:	strd	r6, [sp, #8]
   130d0:	strd	r8, [sp, #16]
   130d4:	str	lr, [sp, #24]
   130d8:	sub	sp, sp, #12
   130dc:	mov	r7, r0
   130e0:	mov	r6, r1
   130e4:	mov	r9, r2
   130e8:	movw	r8, #57832	; 0xe1e8
   130ec:	movt	r8, #2
   130f0:	b	13114 <__assert_fail@plt+0x1c38>
   130f4:	bl	113a4 <__errno_location@plt>
   130f8:	ldr	r3, [r0]
   130fc:	cmp	r3, #22
   13100:	beq	131f4 <__assert_fail@plt+0x1d18>
   13104:	bl	113a4 <__errno_location@plt>
   13108:	ldr	r3, [r0]
   1310c:	cmp	r3, #4
   13110:	bne	13228 <__assert_fail@plt+0x1d4c>
   13114:	bl	12c18 <__assert_fail@plt+0x173c>
   13118:	mov	r2, r9
   1311c:	mov	r1, r6
   13120:	mov	r0, r7
   13124:	bl	11194 <read@plt>
   13128:	mov	r4, r0
   1312c:	cmn	r0, #1
   13130:	beq	130f4 <__assert_fail@plt+0x1c18>
   13134:	cmp	r0, #0
   13138:	blt	13104 <__assert_fail@plt+0x1c28>
   1313c:	cmp	r0, #0
   13140:	movle	r3, #0
   13144:	movgt	r3, #1
   13148:	cmp	r9, r0
   1314c:	cmpgt	r0, #0
   13150:	ble	13234 <__assert_fail@plt+0x1d58>
   13154:	bl	12c18 <__assert_fail@plt+0x173c>
   13158:	movw	r3, #57832	; 0xe1e8
   1315c:	movt	r3, #2
   13160:	ldrb	r3, [r3, #536]	; 0x218
   13164:	cmp	r3, #0
   13168:	beq	1323c <__assert_fail@plt+0x1d60>
   1316c:	movw	r3, #57832	; 0xe1e8
   13170:	movt	r3, #2
   13174:	ldr	r6, [r3, #528]	; 0x210
   13178:	cmp	r6, r9
   1317c:	movge	r5, #0
   13180:	movlt	r5, #1
   13184:	cmp	r6, #0
   13188:	movle	r5, #0
   1318c:	cmp	r5, #0
   13190:	beq	1323c <__assert_fail@plt+0x1d60>
   13194:	movw	r3, #57680	; 0xe150
   13198:	movt	r3, #2
   1319c:	ldr	r3, [r3, #24]
   131a0:	cmp	r3, #1
   131a4:	beq	131e0 <__assert_fail@plt+0x1d04>
   131a8:	mov	r3, #5
   131ac:	str	r3, [sp]
   131b0:	mov	r3, r6
   131b4:	movw	r2, #52860	; 0xce7c
   131b8:	movt	r2, #1
   131bc:	movw	r1, #52920	; 0xceb8
   131c0:	movt	r1, #1
   131c4:	mov	r0, #0
   131c8:	bl	114c4 <dcngettext@plt>
   131cc:	mov	r3, r6
   131d0:	mov	r2, r0
   131d4:	mov	r1, #0
   131d8:	mov	r0, r1
   131dc:	bl	11d04 <__assert_fail@plt+0x828>
   131e0:	movw	r3, #57832	; 0xe1e8
   131e4:	movt	r3, #2
   131e8:	mov	r2, #0
   131ec:	strb	r2, [r3, #536]	; 0x218
   131f0:	b	1323c <__assert_fail@plt+0x1d60>
   131f4:	ldr	r3, [r8, #528]	; 0x210
   131f8:	cmp	r3, r9
   131fc:	movge	r2, #0
   13200:	movlt	r2, #1
   13204:	cmp	r3, #0
   13208:	movle	r2, #0
   1320c:	cmp	r2, #0
   13210:	beq	13104 <__assert_fail@plt+0x1c28>
   13214:	ldr	r3, [r8, #532]	; 0x214
   13218:	tst	r3, #65536	; 0x10000
   1321c:	beq	13104 <__assert_fail@plt+0x1c28>
   13220:	mov	r4, #0
   13224:	str	r4, [r0]
   13228:	cmp	r4, #0
   1322c:	movle	r3, #0
   13230:	movgt	r3, #1
   13234:	cmp	r3, #0
   13238:	bne	13158 <__assert_fail@plt+0x1c7c>
   1323c:	movw	r3, #57832	; 0xe1e8
   13240:	movt	r3, #2
   13244:	str	r4, [r3, #528]	; 0x210
   13248:	mov	r0, r4
   1324c:	add	sp, sp, #12
   13250:	ldrd	r4, [sp]
   13254:	ldrd	r6, [sp, #8]
   13258:	ldrd	r8, [sp, #16]
   1325c:	add	sp, sp, #24
   13260:	pop	{pc}		; (ldr pc, [sp], #4)
   13264:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13268:	strd	r6, [sp, #8]
   1326c:	str	r8, [sp, #16]
   13270:	str	lr, [sp, #20]
   13274:	subs	r4, r2, #0
   13278:	ble	132c0 <__assert_fail@plt+0x1de4>
   1327c:	mov	r7, r0
   13280:	mov	r5, r1
   13284:	mov	r6, #0
   13288:	mov	r2, r4
   1328c:	mov	r1, r5
   13290:	mov	r0, r7
   13294:	bl	130c8 <__assert_fail@plt+0x1bec>
   13298:	cmp	r0, #0
   1329c:	blt	132cc <__assert_fail@plt+0x1df0>
   132a0:	beq	132c8 <__assert_fail@plt+0x1dec>
   132a4:	add	r6, r6, r0
   132a8:	add	r5, r5, r0
   132ac:	sub	r4, r4, r0
   132b0:	cmp	r4, #0
   132b4:	bgt	13288 <__assert_fail@plt+0x1dac>
   132b8:	mov	r0, r6
   132bc:	b	132cc <__assert_fail@plt+0x1df0>
   132c0:	mov	r0, #0
   132c4:	b	132cc <__assert_fail@plt+0x1df0>
   132c8:	mov	r0, r6
   132cc:	ldrd	r4, [sp]
   132d0:	ldrd	r6, [sp, #8]
   132d4:	ldr	r8, [sp, #16]
   132d8:	add	sp, sp, #20
   132dc:	pop	{pc}		; (ldr pc, [sp], #4)
   132e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   132e4:	strd	r6, [sp, #8]
   132e8:	strd	r8, [sp, #16]
   132ec:	str	sl, [sp, #24]
   132f0:	str	lr, [sp, #28]
   132f4:	sub	sp, sp, #16
   132f8:	mov	r9, r0
   132fc:	mov	r7, r1
   13300:	mov	r5, r2
   13304:	movw	r3, #57832	; 0xe1e8
   13308:	movt	r3, #2
   1330c:	ldr	r3, [r3, #540]	; 0x21c
   13310:	tst	r3, #65536	; 0x10000
   13314:	beq	1332c <__assert_fail@plt+0x1e50>
   13318:	movw	r3, #57832	; 0xe1e8
   1331c:	movt	r3, #2
   13320:	ldr	r3, [r3, #304]	; 0x130
   13324:	cmp	r3, r2
   13328:	bgt	13354 <__assert_fail@plt+0x1e78>
   1332c:	cmp	r5, #0
   13330:	ble	13530 <__assert_fail@plt+0x2054>
   13334:	mov	r4, #0
   13338:	movw	r6, #57832	; 0xe1e8
   1333c:	movt	r6, #2
   13340:	mov	sl, r4
   13344:	mov	r2, r5
   13348:	asr	r3, r5, #31
   1334c:	strd	r2, [sp, #8]
   13350:	b	13444 <__assert_fail@plt+0x1f68>
   13354:	mov	r1, #3
   13358:	mov	r0, #1
   1335c:	bl	1612c <__assert_fail@plt+0x4c50>
   13360:	bic	r2, r0, #65536	; 0x10000
   13364:	mov	r1, #4
   13368:	mov	r0, #1
   1336c:	bl	1612c <__assert_fail@plt+0x4c50>
   13370:	cmp	r0, #0
   13374:	beq	1338c <__assert_fail@plt+0x1eb0>
   13378:	movw	r3, #57680	; 0xe150
   1337c:	movt	r3, #2
   13380:	ldr	r3, [r3, #24]
   13384:	cmp	r3, #1
   13388:	bne	133b8 <__assert_fail@plt+0x1edc>
   1338c:	movw	r4, #57832	; 0xe1e8
   13390:	movt	r4, #2
   13394:	mov	r0, #1
   13398:	strb	r0, [r4, #329]	; 0x149
   1339c:	mov	r2, #0
   133a0:	mov	r3, #0
   133a4:	bl	1238c <__assert_fail@plt+0xeb0>
   133a8:	ldr	r3, [r4, #288]	; 0x120
   133ac:	orr	r3, r3, #32768	; 0x8000
   133b0:	str	r3, [r4, #288]	; 0x120
   133b4:	b	1332c <__assert_fail@plt+0x1e50>
   133b8:	bl	113a4 <__errno_location@plt>
   133bc:	ldr	r4, [r0]
   133c0:	mov	r2, #5
   133c4:	movw	r1, #52980	; 0xcef4
   133c8:	movt	r1, #1
   133cc:	mov	r0, #0
   133d0:	bl	11230 <dcgettext@plt>
   133d4:	mov	r6, r0
   133d8:	movw	r3, #57832	; 0xe1e8
   133dc:	movt	r3, #2
   133e0:	ldr	r2, [r3, #520]	; 0x208
   133e4:	mov	r1, #3
   133e8:	mov	r0, #0
   133ec:	bl	1945c <__assert_fail@plt+0x7f80>
   133f0:	mov	r3, r0
   133f4:	mov	r2, r6
   133f8:	mov	r1, r4
   133fc:	mov	r0, #0
   13400:	bl	11d04 <__assert_fail@plt+0x828>
   13404:	b	1338c <__assert_fail@plt+0x1eb0>
   13408:	mov	r0, r7
   1340c:	bl	11218 <memcmp@plt>
   13410:	cmp	r0, #0
   13414:	beq	13484 <__assert_fail@plt+0x1fa8>
   13418:	sub	r2, r5, r4
   1341c:	add	r1, r7, r4
   13420:	mov	r0, r9
   13424:	bl	113ec <write@plt>
   13428:	cmp	r0, #0
   1342c:	blt	134bc <__assert_fail@plt+0x1fe0>
   13430:	cmp	r0, #0
   13434:	beq	134d0 <__assert_fail@plt+0x1ff4>
   13438:	add	r4, r4, r0
   1343c:	cmp	r5, r4
   13440:	ble	134dc <__assert_fail@plt+0x2000>
   13444:	bl	12c18 <__assert_fail@plt+0x173c>
   13448:	strb	sl, [r6, #544]	; 0x220
   1344c:	ldr	r8, [r6, #288]	; 0x120
   13450:	tst	r8, #65536	; 0x10000
   13454:	beq	13418 <__assert_fail@plt+0x1f3c>
   13458:	mov	r2, r5
   1345c:	mov	r3, r7
   13460:	ldrb	r1, [r3], #1
   13464:	cmp	r1, #0
   13468:	bne	13418 <__assert_fail@plt+0x1f3c>
   1346c:	mov	r1, r3
   13470:	subs	r2, r2, #1
   13474:	beq	13484 <__assert_fail@plt+0x1fa8>
   13478:	tst	r2, #15
   1347c:	beq	13408 <__assert_fail@plt+0x1f2c>
   13480:	b	13460 <__assert_fail@plt+0x1f84>
   13484:	mov	r3, #1
   13488:	str	r3, [sp]
   1348c:	ldrd	r2, [sp, #8]
   13490:	mov	r0, r9
   13494:	bl	112a8 <lseek64@plt>
   13498:	cmp	r0, #0
   1349c:	sbcs	r3, r1, #0
   134a0:	biclt	r8, r8, #65536	; 0x10000
   134a4:	strlt	r8, [r6, #288]	; 0x120
   134a8:	blt	13418 <__assert_fail@plt+0x1f3c>
   134ac:	mov	r3, #1
   134b0:	strb	r3, [r6, #544]	; 0x220
   134b4:	mov	r0, r5
   134b8:	b	13438 <__assert_fail@plt+0x1f5c>
   134bc:	bl	113a4 <__errno_location@plt>
   134c0:	ldr	r3, [r0]
   134c4:	cmp	r3, #4
   134c8:	beq	1343c <__assert_fail@plt+0x1f60>
   134cc:	b	134dc <__assert_fail@plt+0x2000>
   134d0:	bl	113a4 <__errno_location@plt>
   134d4:	mov	r3, #28
   134d8:	str	r3, [r0]
   134dc:	movw	r3, #57832	; 0xe1e8
   134e0:	movt	r3, #2
   134e4:	ldrb	r3, [r3, #545]	; 0x221
   134e8:	cmp	r4, #0
   134ec:	moveq	r3, #0
   134f0:	andne	r3, r3, #1
   134f4:	cmp	r3, #0
   134f8:	bne	1351c <__assert_fail@plt+0x2040>
   134fc:	mov	r0, r4
   13500:	add	sp, sp, #16
   13504:	ldrd	r4, [sp]
   13508:	ldrd	r6, [sp, #8]
   1350c:	ldrd	r8, [sp, #16]
   13510:	ldr	sl, [sp, #24]
   13514:	add	sp, sp, #28
   13518:	pop	{pc}		; (ldr pc, [sp], #4)
   1351c:	mov	r2, r4
   13520:	asr	r3, r4, #31
   13524:	mov	r0, r9
   13528:	bl	1238c <__assert_fail@plt+0xeb0>
   1352c:	b	134fc <__assert_fail@plt+0x2020>
   13530:	mov	r4, #0
   13534:	b	134fc <__assert_fail@plt+0x2020>
   13538:	str	r4, [sp, #-8]!
   1353c:	str	lr, [sp, #4]
   13540:	bl	12c18 <__assert_fail@plt+0x173c>
   13544:	bl	12fd8 <__assert_fail@plt+0x1afc>
   13548:	bl	12a7c <__assert_fail@plt+0x15a0>
   1354c:	ldr	r4, [sp]
   13550:	add	sp, sp, #4
   13554:	pop	{pc}		; (ldr pc, [sp], #4)
   13558:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1355c:	strd	r6, [sp, #8]
   13560:	str	r8, [sp, #16]
   13564:	str	lr, [sp, #20]
   13568:	movw	r4, #57832	; 0xe1e8
   1356c:	movt	r4, #2
   13570:	ldr	r2, [r4, #304]	; 0x130
   13574:	ldr	r1, [r4, #300]	; 0x12c
   13578:	mov	r0, #1
   1357c:	bl	132e0 <__assert_fail@plt+0x1e04>
   13580:	add	r1, r4, #336	; 0x150
   13584:	ldrd	r2, [r1]
   13588:	adds	r6, r2, r0
   1358c:	adc	r7, r3, r0, asr #31
   13590:	strd	r6, [r1]
   13594:	ldr	r3, [r4, #304]	; 0x130
   13598:	cmp	r3, r0
   1359c:	bne	135dc <__assert_fail@plt+0x2100>
   135a0:	movw	r2, #57832	; 0xe1e8
   135a4:	movt	r2, #2
   135a8:	ldr	r3, [r2, #360]	; 0x168
   135ac:	ldr	r0, [r2, #364]	; 0x16c
   135b0:	adds	r3, r3, #1
   135b4:	adc	r0, r0, #0
   135b8:	str	r3, [r2, #360]	; 0x168
   135bc:	str	r0, [r2, #364]	; 0x16c
   135c0:	mov	r3, #0
   135c4:	str	r3, [r2, #548]	; 0x224
   135c8:	ldrd	r4, [sp]
   135cc:	ldrd	r6, [sp, #8]
   135d0:	ldr	r8, [sp, #16]
   135d4:	add	sp, sp, #20
   135d8:	pop	{pc}		; (ldr pc, [sp], #4)
   135dc:	mov	r5, r0
   135e0:	bl	113a4 <__errno_location@plt>
   135e4:	ldr	r4, [r0]
   135e8:	mov	r2, #5
   135ec:	movw	r1, #53012	; 0xcf14
   135f0:	movt	r1, #1
   135f4:	mov	r0, #0
   135f8:	bl	11230 <dcgettext@plt>
   135fc:	mov	r6, r0
   13600:	movw	r3, #57832	; 0xe1e8
   13604:	movt	r3, #2
   13608:	ldr	r1, [r3, #520]	; 0x208
   1360c:	mov	r0, #4
   13610:	bl	19338 <__assert_fail@plt+0x7e5c>
   13614:	mov	r3, r0
   13618:	mov	r2, r6
   1361c:	mov	r1, r4
   13620:	mov	r0, #0
   13624:	bl	11d04 <__assert_fail@plt+0x828>
   13628:	cmp	r5, #0
   1362c:	beq	1364c <__assert_fail@plt+0x2170>
   13630:	ldr	r2, [pc, #32]	; 13658 <__assert_fail@plt+0x217c>
   13634:	ldr	r3, [r2]
   13638:	ldr	r1, [r2, #4]
   1363c:	adds	r3, r3, #1
   13640:	adc	r1, r1, #0
   13644:	str	r3, [r2]
   13648:	str	r1, [r2, #4]
   1364c:	bl	13538 <__assert_fail@plt+0x205c>
   13650:	mov	r0, #1
   13654:	bl	11374 <exit@plt>
   13658:	andeq	lr, r2, r8, asr #6
   1365c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13660:	strd	r6, [sp, #8]
   13664:	strd	r8, [sp, #16]
   13668:	str	sl, [sp, #24]
   1366c:	str	lr, [sp, #28]
   13670:	subs	r8, r1, #0
   13674:	beq	1376c <__assert_fail@plt+0x2290>
   13678:	sub	r5, r0, #1
   1367c:	add	r8, r5, r8
   13680:	movw	r7, #57680	; 0xe150
   13684:	movt	r7, #2
   13688:	movw	r4, #57832	; 0xe1e8
   1368c:	movt	r4, #2
   13690:	add	r9, r4, #384	; 0x180
   13694:	b	1371c <__assert_fail@plt+0x2240>
   13698:	ldr	r6, [r4, #552]	; 0x228
   1369c:	ldr	r3, [r4, #556]	; 0x22c
   136a0:	cmp	r6, r3
   136a4:	blt	136c8 <__assert_fail@plt+0x21ec>
   136a8:	mov	r3, #0
   136ac:	str	r3, [r4, #552]	; 0x228
   136b0:	b	13714 <__assert_fail@plt+0x2238>
   136b4:	bl	13558 <__assert_fail@plt+0x207c>
   136b8:	add	r6, r6, #1
   136bc:	ldr	r3, [r4, #556]	; 0x22c
   136c0:	cmp	r3, r6
   136c4:	ble	136a8 <__assert_fail@plt+0x21cc>
   136c8:	ldr	r1, [r4, #300]	; 0x12c
   136cc:	ldr	r2, [r4, #548]	; 0x224
   136d0:	add	r3, r2, #1
   136d4:	str	r3, [r4, #548]	; 0x224
   136d8:	ldrb	r0, [r7, #29]
   136dc:	strb	r0, [r1, r2]
   136e0:	ldr	r2, [r4, #304]	; 0x130
   136e4:	cmp	r3, r2
   136e8:	blt	136b8 <__assert_fail@plt+0x21dc>
   136ec:	b	136b4 <__assert_fail@plt+0x21d8>
   136f0:	ldr	r3, [r9]
   136f4:	ldr	r2, [r9, #4]
   136f8:	adds	r3, r3, #1
   136fc:	adc	r2, r2, #0
   13700:	str	r3, [r9]
   13704:	str	r2, [r9, #4]
   13708:	ldr	r3, [r4, #552]	; 0x228
   1370c:	add	r3, r3, #1
   13710:	str	r3, [r4, #552]	; 0x228
   13714:	cmp	r8, r5
   13718:	beq	1376c <__assert_fail@plt+0x2290>
   1371c:	ldrb	r3, [r5, #1]!
   13720:	ldrb	r2, [r7, #28]
   13724:	cmp	r2, r3
   13728:	beq	13698 <__assert_fail@plt+0x21bc>
   1372c:	ldr	r1, [r4, #552]	; 0x228
   13730:	ldr	r2, [r4, #556]	; 0x22c
   13734:	cmp	r1, r2
   13738:	beq	136f0 <__assert_fail@plt+0x2214>
   1373c:	cmp	r1, r2
   13740:	bge	13708 <__assert_fail@plt+0x222c>
   13744:	ldr	r0, [r4, #300]	; 0x12c
   13748:	ldr	r1, [r4, #548]	; 0x224
   1374c:	add	r2, r1, #1
   13750:	str	r2, [r4, #548]	; 0x224
   13754:	strb	r3, [r0, r1]
   13758:	ldr	r3, [r4, #304]	; 0x130
   1375c:	cmp	r2, r3
   13760:	blt	13708 <__assert_fail@plt+0x222c>
   13764:	bl	13558 <__assert_fail@plt+0x207c>
   13768:	b	13708 <__assert_fail@plt+0x222c>
   1376c:	ldrd	r4, [sp]
   13770:	ldrd	r6, [sp, #8]
   13774:	ldrd	r8, [sp, #16]
   13778:	ldr	sl, [sp, #24]
   1377c:	add	sp, sp, #28
   13780:	pop	{pc}		; (ldr pc, [sp], #4)
   13784:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13788:	strd	r6, [sp, #8]
   1378c:	strd	r8, [sp, #16]
   13790:	str	sl, [sp, #24]
   13794:	str	lr, [sp, #28]
   13798:	subs	r9, r1, #0
   1379c:	ble	138ac <__assert_fail@plt+0x23d0>
   137a0:	mov	r8, r0
   137a4:	mov	r5, #0
   137a8:	movw	r4, #57832	; 0xe1e8
   137ac:	movt	r4, #2
   137b0:	movw	r6, #57680	; 0xe150
   137b4:	movt	r6, #2
   137b8:	b	137e0 <__assert_fail@plt+0x2304>
   137bc:	ldrb	r3, [r6, #29]
   137c0:	cmp	r3, r7
   137c4:	bne	13838 <__assert_fail@plt+0x235c>
   137c8:	ldr	r3, [r4, #560]	; 0x230
   137cc:	add	r3, r3, #1
   137d0:	str	r3, [r4, #560]	; 0x230
   137d4:	add	r5, r5, #1
   137d8:	cmp	r9, r5
   137dc:	ble	138ac <__assert_fail@plt+0x23d0>
   137e0:	ldrb	r7, [r8, r5]
   137e4:	ldr	r3, [r4, #552]	; 0x228
   137e8:	add	r2, r3, #1
   137ec:	str	r2, [r4, #552]	; 0x228
   137f0:	ldr	r2, [r4, #556]	; 0x22c
   137f4:	cmp	r3, r2
   137f8:	blt	137bc <__assert_fail@plt+0x22e0>
   137fc:	mov	r3, #0
   13800:	str	r3, [r4, #560]	; 0x230
   13804:	str	r3, [r4, #552]	; 0x228
   13808:	sub	r5, r5, #1
   1380c:	ldr	r1, [r4, #300]	; 0x12c
   13810:	ldr	r2, [r4, #548]	; 0x224
   13814:	add	r3, r2, #1
   13818:	str	r3, [r4, #548]	; 0x224
   1381c:	ldrb	r0, [r6, #28]
   13820:	strb	r0, [r1, r2]
   13824:	ldr	r2, [r4, #304]	; 0x130
   13828:	cmp	r3, r2
   1382c:	blt	137d4 <__assert_fail@plt+0x22f8>
   13830:	bl	13558 <__assert_fail@plt+0x207c>
   13834:	b	137d4 <__assert_fail@plt+0x22f8>
   13838:	ldr	r3, [r4, #560]	; 0x230
   1383c:	cmp	r3, #0
   13840:	bne	13884 <__assert_fail@plt+0x23a8>
   13844:	ldr	r1, [r4, #300]	; 0x12c
   13848:	ldr	r2, [r4, #548]	; 0x224
   1384c:	add	r3, r2, #1
   13850:	str	r3, [r4, #548]	; 0x224
   13854:	strb	r7, [r1, r2]
   13858:	ldr	r2, [r4, #304]	; 0x130
   1385c:	cmp	r3, r2
   13860:	blt	137d4 <__assert_fail@plt+0x22f8>
   13864:	bl	13558 <__assert_fail@plt+0x207c>
   13868:	b	137d4 <__assert_fail@plt+0x22f8>
   1386c:	bl	13558 <__assert_fail@plt+0x207c>
   13870:	ldr	r3, [r4, #560]	; 0x230
   13874:	sub	r3, r3, #1
   13878:	str	r3, [r4, #560]	; 0x230
   1387c:	cmp	r3, #0
   13880:	beq	13844 <__assert_fail@plt+0x2368>
   13884:	ldr	r1, [r4, #300]	; 0x12c
   13888:	ldr	r2, [r4, #548]	; 0x224
   1388c:	add	r3, r2, #1
   13890:	str	r3, [r4, #548]	; 0x224
   13894:	ldrb	r0, [r6, #29]
   13898:	strb	r0, [r1, r2]
   1389c:	ldr	r2, [r4, #304]	; 0x130
   138a0:	cmp	r3, r2
   138a4:	blt	13870 <__assert_fail@plt+0x2394>
   138a8:	b	1386c <__assert_fail@plt+0x2390>
   138ac:	ldrd	r4, [sp]
   138b0:	ldrd	r6, [sp, #8]
   138b4:	ldrd	r8, [sp, #16]
   138b8:	ldr	sl, [sp, #24]
   138bc:	add	sp, sp, #28
   138c0:	pop	{pc}		; (ldr pc, [sp], #4)
   138c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138c8:	strd	r6, [sp, #8]
   138cc:	strd	r8, [sp, #16]
   138d0:	strd	sl, [sp, #24]
   138d4:	str	lr, [sp, #32]
   138d8:	sub	sp, sp, #140	; 0x8c
   138dc:	mov	r6, r0
   138e0:	str	r1, [sp, #12]
   138e4:	mov	r8, r2
   138e8:	mov	r9, r3
   138ec:	ldr	fp, [sp, #176]	; 0xb0
   138f0:	ldr	r7, [sp, #180]	; 0xb4
   138f4:	bl	113a4 <__errno_location@plt>
   138f8:	str	r0, [sp, #8]
   138fc:	mov	ip, #0
   13900:	str	ip, [r0]
   13904:	cmp	r9, r8, asr #31
   13908:	bne	13990 <__assert_fail@plt+0x24b4>
   1390c:	smull	r2, r3, r8, fp
   13910:	mov	r1, r2
   13914:	mov	lr, r3
   13918:	mov	r2, r1
   1391c:	cmp	ip, #0
   13920:	bne	13938 <__assert_fail@plt+0x245c>
   13924:	ldr	r0, [r7]
   13928:	asr	r1, r0, #31
   1392c:	adds	r4, r2, r0
   13930:	adcs	r5, lr, r1
   13934:	bvc	13a08 <__assert_fail@plt+0x252c>
   13938:	mov	r3, #2
   1393c:	str	r3, [sp]
   13940:	mov	r2, #0
   13944:	mov	r3, #0
   13948:	mov	r0, r6
   1394c:	bl	112a8 <lseek64@plt>
   13950:	cmp	r0, #0
   13954:	sbcs	r3, r1, #0
   13958:	bge	13bd0 <__assert_fail@plt+0x26f4>
   1395c:	mov	r3, #0
   13960:	str	r3, [sp, #16]
   13964:	cmp	r6, #0
   13968:	bne	13bdc <__assert_fail@plt+0x2700>
   1396c:	bl	120e0 <__assert_fail@plt+0xc04>
   13970:	movw	r3, #57832	; 0xe1e8
   13974:	movt	r3, #2
   13978:	ldr	sl, [r3, #284]	; 0x11c
   1397c:	mov	r4, r8
   13980:	mov	r5, r9
   13984:	movw	r8, #57832	; 0xe1e8
   13988:	movt	r8, #2
   1398c:	b	13ce0 <__assert_fail@plt+0x2804>
   13990:	asr	r1, fp, #31
   13994:	mov	r5, r8
   13998:	mov	sl, r9
   1399c:	umull	r2, r3, r8, fp
   139a0:	strd	r2, [sp, #16]
   139a4:	umull	r2, r3, fp, r9
   139a8:	cmp	r9, #0
   139ac:	bge	139bc <__assert_fail@plt+0x24e0>
   139b0:	mov	lr, #0
   139b4:	subs	r2, r2, lr
   139b8:	sbc	r3, r3, fp
   139bc:	cmp	fp, #0
   139c0:	bge	139cc <__assert_fail@plt+0x24f0>
   139c4:	subs	r2, r2, r5
   139c8:	sbc	r3, r3, sl
   139cc:	ldr	lr, [sp, #20]
   139d0:	mov	r4, #0
   139d4:	adds	lr, r2, lr
   139d8:	adc	r4, r3, r4
   139dc:	cmp	r4, lr, asr #31
   139e0:	bne	139ec <__assert_fail@plt+0x2510>
   139e4:	ldr	r1, [sp, #16]
   139e8:	b	13918 <__assert_fail@plt+0x243c>
   139ec:	mul	lr, r8, r1
   139f0:	mla	lr, fp, r9, lr
   139f4:	umull	r2, r3, r8, fp
   139f8:	add	lr, lr, r3
   139fc:	mov	r1, r2
   13a00:	mov	ip, #1
   13a04:	b	13918 <__assert_fail@plt+0x243c>
   13a08:	mov	sl, r4
   13a0c:	str	r5, [sp, #16]
   13a10:	mov	r3, #1
   13a14:	str	r3, [sp]
   13a18:	mov	r2, r4
   13a1c:	mov	r3, r5
   13a20:	mov	r0, r6
   13a24:	bl	112a8 <lseek64@plt>
   13a28:	cmp	r0, #0
   13a2c:	sbcs	r3, r1, #0
   13a30:	blt	13b3c <__assert_fail@plt+0x2660>
   13a34:	cmp	r6, #0
   13a38:	beq	13a50 <__assert_fail@plt+0x2574>
   13a3c:	mov	r3, #0
   13a40:	str	r3, [r7]
   13a44:	mov	r4, #0
   13a48:	mov	r5, #0
   13a4c:	b	13cb0 <__assert_fail@plt+0x27d4>
   13a50:	add	r1, sp, #32
   13a54:	mov	r0, #0
   13a58:	bl	12d20 <__assert_fail@plt+0x1844>
   13a5c:	cmp	r0, #0
   13a60:	bne	13afc <__assert_fail@plt+0x2620>
   13a64:	ldr	r3, [sp, #48]	; 0x30
   13a68:	and	r3, r3, #53248	; 0xd000
   13a6c:	cmp	r3, #32768	; 0x8000
   13a70:	movne	r4, #0
   13a74:	movne	r5, #0
   13a78:	bne	13aec <__assert_fail@plt+0x2610>
   13a7c:	ldr	r3, [pc, #684]	; 13d30 <__assert_fail@plt+0x2854>
   13a80:	ldrd	r2, [r3]
   13a84:	cmp	r2, #0
   13a88:	sbcs	r1, r3, #0
   13a8c:	movlt	r4, #0
   13a90:	movlt	r5, #0
   13a94:	blt	13aec <__assert_fail@plt+0x2610>
   13a98:	ldr	r0, [sp, #80]	; 0x50
   13a9c:	ldr	r1, [sp, #84]	; 0x54
   13aa0:	subs	ip, r0, r2
   13aa4:	str	ip, [sp, #24]
   13aa8:	sbc	r3, r1, r3
   13aac:	str	r3, [sp, #28]
   13ab0:	ldrd	r6, [sp, #24]
   13ab4:	cmp	r6, r4
   13ab8:	sbcs	r3, r7, r5
   13abc:	movge	r4, #0
   13ac0:	movge	r5, #0
   13ac4:	bge	13aec <__assert_fail@plt+0x2610>
   13ac8:	mov	r2, fp
   13acc:	asr	r3, fp, #31
   13ad0:	subs	r0, r4, r0
   13ad4:	sbc	r1, r5, r1
   13ad8:	bl	1b578 <__assert_fail@plt+0xa09c>
   13adc:	mov	r4, r0
   13ae0:	mov	r5, r1
   13ae4:	mov	sl, r6
   13ae8:	str	r7, [sp, #16]
   13aec:	mov	r0, sl
   13af0:	ldr	r1, [sp, #16]
   13af4:	bl	11678 <__assert_fail@plt+0x19c>
   13af8:	b	13cb0 <__assert_fail@plt+0x27d4>
   13afc:	ldr	r3, [sp, #8]
   13b00:	ldr	r4, [r3]
   13b04:	mov	r2, #5
   13b08:	movw	r1, #53028	; 0xcf24
   13b0c:	movt	r1, #1
   13b10:	mov	r0, #0
   13b14:	bl	11230 <dcgettext@plt>
   13b18:	mov	r5, r0
   13b1c:	ldr	r1, [sp, #12]
   13b20:	mov	r0, #4
   13b24:	bl	19338 <__assert_fail@plt+0x7e5c>
   13b28:	mov	r3, r0
   13b2c:	mov	r2, r5
   13b30:	mov	r1, r4
   13b34:	mov	r0, #1
   13b38:	bl	11d04 <__assert_fail@plt+0x828>
   13b3c:	ldr	r3, [sp, #8]
   13b40:	ldr	r3, [r3]
   13b44:	str	r3, [sp, #16]
   13b48:	mov	r3, #2
   13b4c:	str	r3, [sp]
   13b50:	mov	r2, #0
   13b54:	mov	r3, #0
   13b58:	mov	r0, r6
   13b5c:	bl	112a8 <lseek64@plt>
   13b60:	cmp	r0, #0
   13b64:	sbcs	r3, r1, #0
   13b68:	blt	13964 <__assert_fail@plt+0x2488>
   13b6c:	ldr	r3, [sp, #16]
   13b70:	cmp	r3, #0
   13b74:	moveq	r3, #75	; 0x4b
   13b78:	str	r3, [sp, #16]
   13b7c:	cmp	r6, #0
   13b80:	mov	r2, #5
   13b84:	movweq	r1, #53044	; 0xcf34
   13b88:	movteq	r1, #1
   13b8c:	movwne	r1, #53060	; 0xcf44
   13b90:	movtne	r1, #1
   13b94:	mov	r0, #0
   13b98:	bl	11230 <dcgettext@plt>
   13b9c:	mov	r4, r0
   13ba0:	ldr	r2, [sp, #12]
   13ba4:	mov	r1, #3
   13ba8:	mov	r0, #0
   13bac:	bl	1945c <__assert_fail@plt+0x7f80>
   13bb0:	mov	r3, r0
   13bb4:	mov	r2, r4
   13bb8:	ldr	r1, [sp, #16]
   13bbc:	mov	r0, #0
   13bc0:	bl	11d04 <__assert_fail@plt+0x828>
   13bc4:	bl	13538 <__assert_fail@plt+0x205c>
   13bc8:	mov	r0, #1
   13bcc:	bl	11374 <exit@plt>
   13bd0:	mov	r3, #75	; 0x4b
   13bd4:	str	r3, [sp, #16]
   13bd8:	b	13b7c <__assert_fail@plt+0x26a0>
   13bdc:	bl	12190 <__assert_fail@plt+0xcb4>
   13be0:	movw	r3, #57832	; 0xe1e8
   13be4:	movt	r3, #2
   13be8:	ldr	sl, [r3, #300]	; 0x12c
   13bec:	b	1397c <__assert_fail@plt+0x24a0>
   13bf0:	cmp	r6, #0
   13bf4:	bne	13c54 <__assert_fail@plt+0x2778>
   13bf8:	ldr	r3, [sp, #8]
   13bfc:	ldr	r4, [r3]
   13c00:	mov	r2, #5
   13c04:	movw	r1, #53076	; 0xcf54
   13c08:	movt	r1, #1
   13c0c:	mov	r0, #0
   13c10:	bl	11230 <dcgettext@plt>
   13c14:	mov	r5, r0
   13c18:	ldr	r1, [sp, #12]
   13c1c:	mov	r0, #4
   13c20:	bl	19338 <__assert_fail@plt+0x7e5c>
   13c24:	mov	r3, r0
   13c28:	mov	r2, r5
   13c2c:	mov	r1, r4
   13c30:	mov	r0, #0
   13c34:	bl	11d04 <__assert_fail@plt+0x828>
   13c38:	movw	r3, #57832	; 0xe1e8
   13c3c:	movt	r3, #2
   13c40:	ldr	r3, [r3, #288]	; 0x120
   13c44:	tst	r3, #256	; 0x100
   13c48:	beq	13c90 <__assert_fail@plt+0x27b4>
   13c4c:	bl	12a7c <__assert_fail@plt+0x15a0>
   13c50:	b	13c90 <__assert_fail@plt+0x27b4>
   13c54:	mov	r2, #5
   13c58:	movw	r1, #53060	; 0xcf44
   13c5c:	movt	r1, #1
   13c60:	mov	r0, #0
   13c64:	bl	11230 <dcgettext@plt>
   13c68:	mov	r4, r0
   13c6c:	ldr	r2, [sp, #12]
   13c70:	mov	r1, #3
   13c74:	mov	r0, #0
   13c78:	bl	1945c <__assert_fail@plt+0x7f80>
   13c7c:	mov	r3, r0
   13c80:	mov	r2, r4
   13c84:	ldr	r1, [sp, #16]
   13c88:	mov	r0, #0
   13c8c:	bl	11d04 <__assert_fail@plt+0x828>
   13c90:	bl	13538 <__assert_fail@plt+0x205c>
   13c94:	mov	r0, #1
   13c98:	bl	11374 <exit@plt>
   13c9c:	asr	r1, r0, #31
   13ca0:	bl	11678 <__assert_fail@plt+0x19c>
   13ca4:	b	13d14 <__assert_fail@plt+0x2838>
   13ca8:	mov	r3, #0
   13cac:	str	r3, [r7]
   13cb0:	mov	r0, r4
   13cb4:	mov	r1, r5
   13cb8:	add	sp, sp, #140	; 0x8c
   13cbc:	ldrd	r4, [sp]
   13cc0:	ldrd	r6, [sp, #8]
   13cc4:	ldrd	r8, [sp, #16]
   13cc8:	ldrd	sl, [sp, #24]
   13ccc:	add	sp, sp, #32
   13cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd4:	ldr	r3, [r7]
   13cd8:	cmp	r3, #0
   13cdc:	beq	13cb0 <__assert_fail@plt+0x27d4>
   13ce0:	ldr	r3, [r8, #564]	; 0x234
   13ce4:	orrs	r2, r4, r5
   13ce8:	ldreq	r2, [r7]
   13cec:	movne	r2, fp
   13cf0:	mov	r1, sl
   13cf4:	mov	r0, r6
   13cf8:	blx	r3
   13cfc:	cmp	r0, #0
   13d00:	blt	13bf0 <__assert_fail@plt+0x2714>
   13d04:	cmp	r0, #0
   13d08:	beq	13cb0 <__assert_fail@plt+0x27d4>
   13d0c:	cmp	r6, #0
   13d10:	beq	13c9c <__assert_fail@plt+0x27c0>
   13d14:	orrs	r3, r4, r5
   13d18:	beq	13ca8 <__assert_fail@plt+0x27cc>
   13d1c:	subs	r4, r4, #1
   13d20:	sbc	r5, r5, #0
   13d24:	orrs	r3, r4, r5
   13d28:	bne	13ce0 <__assert_fail@plt+0x2804>
   13d2c:	b	13cd4 <__assert_fail@plt+0x27f8>
   13d30:	strdeq	lr, [r2], -r8
   13d34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d38:	strd	r6, [sp, #8]
   13d3c:	strd	r8, [sp, #16]
   13d40:	strd	sl, [sp, #24]
   13d44:	str	lr, [sp, #32]
   13d48:	sub	sp, sp, #284	; 0x11c
   13d4c:	mov	r9, r0
   13d50:	mov	sl, r1
   13d54:	movw	r0, #53120	; 0xcf80
   13d58:	movt	r0, #1
   13d5c:	bl	112f0 <getenv@plt>
   13d60:	mov	r4, r0
   13d64:	ldr	r0, [pc, #4076]	; 14d58 <__assert_fail@plt+0x387c>
   13d68:	bl	1144c <sigemptyset@plt>
   13d6c:	cmp	r4, #0
   13d70:	beq	13f34 <__assert_fail@plt+0x2a58>
   13d74:	add	r2, sp, #136	; 0x88
   13d78:	mov	r1, #0
   13d7c:	mov	r0, #2
   13d80:	bl	11284 <sigaction@plt>
   13d84:	ldr	r3, [sp, #136]	; 0x88
   13d88:	cmp	r3, #1
   13d8c:	beq	13d9c <__assert_fail@plt+0x28c0>
   13d90:	mov	r1, #2
   13d94:	ldr	r0, [pc, #4028]	; 14d58 <__assert_fail@plt+0x387c>
   13d98:	bl	11314 <sigaddset@plt>
   13d9c:	ldr	r4, [pc, #4020]	; 14d58 <__assert_fail@plt+0x387c>
   13da0:	mov	r2, #128	; 0x80
   13da4:	mov	r1, r4
   13da8:	add	r0, sp, #140	; 0x8c
   13dac:	bl	111e8 <memcpy@plt>
   13db0:	mov	r1, #10
   13db4:	mov	r0, r4
   13db8:	bl	11254 <sigismember@plt>
   13dbc:	cmp	r0, #0
   13dc0:	bne	13f44 <__assert_fail@plt+0x2a68>
   13dc4:	mov	r1, #2
   13dc8:	ldr	r0, [pc, #3976]	; 14d58 <__assert_fail@plt+0x387c>
   13dcc:	bl	11254 <sigismember@plt>
   13dd0:	cmp	r0, #0
   13dd4:	bne	13f68 <__assert_fail@plt+0x2a8c>
   13dd8:	ldr	r0, [sl]
   13ddc:	bl	1732c <__assert_fail@plt+0x5e50>
   13de0:	movw	r1, #51668	; 0xc9d4
   13de4:	movt	r1, #1
   13de8:	mov	r0, #6
   13dec:	bl	11440 <setlocale@plt>
   13df0:	movw	r6, #52108	; 0xcb8c
   13df4:	movt	r6, #1
   13df8:	movw	r1, #53136	; 0xcf90
   13dfc:	movt	r1, #1
   13e00:	mov	r0, r6
   13e04:	bl	1147c <bindtextdomain@plt>
   13e08:	mov	r0, r6
   13e0c:	bl	11260 <textdomain@plt>
   13e10:	movw	r0, #7248	; 0x1c50
   13e14:	movt	r0, #1
   13e18:	bl	1b864 <__assert_fail@plt+0xa388>
   13e1c:	bl	11398 <getpagesize@plt>
   13e20:	movw	r4, #57832	; 0xe1e8
   13e24:	movt	r4, #2
   13e28:	str	r0, [r4, #296]	; 0x128
   13e2c:	mov	r5, #0
   13e30:	str	r5, [sp, #24]
   13e34:	movw	r3, #53160	; 0xcfa8
   13e38:	movt	r3, #1
   13e3c:	str	r3, [sp, #20]
   13e40:	movw	r3, #53172	; 0xcfb4
   13e44:	movt	r3, #1
   13e48:	str	r3, [sp, #16]
   13e4c:	movw	r3, #53188	; 0xcfc4
   13e50:	movt	r3, #1
   13e54:	str	r3, [sp, #12]
   13e58:	movw	r3, #5820	; 0x16bc
   13e5c:	movt	r3, #1
   13e60:	str	r3, [sp, #8]
   13e64:	mov	r3, #1
   13e68:	str	r3, [sp, #4]
   13e6c:	movw	r3, #57720	; 0xe178
   13e70:	movt	r3, #2
   13e74:	ldr	r3, [r3]
   13e78:	str	r3, [sp]
   13e7c:	mov	r3, r6
   13e80:	movw	r2, #48704	; 0xbe40
   13e84:	movt	r2, #1
   13e88:	mov	r1, sl
   13e8c:	mov	r0, r9
   13e90:	bl	17244 <__assert_fail@plt+0x5d68>
   13e94:	movw	r3, #57680	; 0xe150
   13e98:	movt	r3, #2
   13e9c:	strb	r5, [r3]
   13ea0:	sub	r4, r4, #1
   13ea4:	mov	r3, r4
   13ea8:	strb	r5, [r3, #1]!
   13eac:	add	r5, r5, #1
   13eb0:	cmp	r5, #256	; 0x100
   13eb4:	bne	13ea8 <__assert_fail@plt+0x29cc>
   13eb8:	mov	r3, #0
   13ebc:	str	r3, [sp, #132]	; 0x84
   13ec0:	movw	r3, #57808	; 0xe1d0
   13ec4:	movt	r3, #2
   13ec8:	ldr	r7, [r3]
   13ecc:	cmp	r9, r7
   13ed0:	ble	144c8 <__assert_fail@plt+0x2fec>
   13ed4:	add	sl, sl, r7, lsl #2
   13ed8:	mov	r2, #0
   13edc:	mov	r3, #0
   13ee0:	strd	r2, [sp, #72]	; 0x48
   13ee4:	mvn	r0, #0
   13ee8:	mvn	r1, #-2147483648	; 0x80000000
   13eec:	strd	r0, [sp, #56]	; 0x38
   13ef0:	strd	r2, [sp, #64]	; 0x40
   13ef4:	movw	r3, #53224	; 0xcfe8
   13ef8:	movt	r3, #1
   13efc:	movw	r2, #53228	; 0xcfec
   13f00:	movt	r2, #1
   13f04:	str	r2, [sp, #40]	; 0x28
   13f08:	movw	fp, #57832	; 0xe1e8
   13f0c:	movt	fp, #2
   13f10:	add	r2, fp, #292	; 0x124
   13f14:	str	r2, [sp, #108]	; 0x6c
   13f18:	movw	r8, #47240	; 0xb888
   13f1c:	movt	r8, #1
   13f20:	add	r2, r8, #632	; 0x278
   13f24:	str	r2, [sp, #84]	; 0x54
   13f28:	str	r4, [sp, #104]	; 0x68
   13f2c:	mov	r4, r3
   13f30:	b	13ffc <__assert_fail@plt+0x2b20>
   13f34:	mov	r1, #10
   13f38:	ldr	r0, [pc, #3608]	; 14d58 <__assert_fail@plt+0x387c>
   13f3c:	bl	11314 <sigaddset@plt>
   13f40:	b	13d74 <__assert_fail@plt+0x2898>
   13f44:	movw	r3, #5664	; 0x1620
   13f48:	movt	r3, #1
   13f4c:	str	r3, [sp, #136]	; 0x88
   13f50:	mov	r2, #0
   13f54:	str	r2, [sp, #268]	; 0x10c
   13f58:	add	r1, sp, #136	; 0x88
   13f5c:	mov	r0, #10
   13f60:	bl	11284 <sigaction@plt>
   13f64:	b	13dc4 <__assert_fail@plt+0x28e8>
   13f68:	movw	r3, #5648	; 0x1610
   13f6c:	movt	r3, #1
   13f70:	str	r3, [sp, #136]	; 0x88
   13f74:	mov	r3, #-1073741824	; 0xc0000000
   13f78:	str	r3, [sp, #268]	; 0x10c
   13f7c:	mov	r2, #0
   13f80:	add	r1, sp, #136	; 0x88
   13f84:	mov	r0, #2
   13f88:	bl	11284 <sigaction@plt>
   13f8c:	b	13dd8 <__assert_fail@plt+0x28fc>
   13f90:	mov	r2, #5
   13f94:	movw	r1, #53200	; 0xcfd0
   13f98:	movt	r1, #1
   13f9c:	mov	r0, #0
   13fa0:	bl	11230 <dcgettext@plt>
   13fa4:	mov	r4, r0
   13fa8:	mov	r0, r5
   13fac:	bl	19628 <__assert_fail@plt+0x814c>
   13fb0:	mov	r3, r0
   13fb4:	mov	r2, r4
   13fb8:	mov	r1, #0
   13fbc:	mov	r0, r1
   13fc0:	bl	11d04 <__assert_fail@plt+0x828>
   13fc4:	mov	r0, #1
   13fc8:	bl	116bc <__assert_fail@plt+0x1e0>
   13fcc:	movw	r3, #53240	; 0xcff8
   13fd0:	movt	r3, #1
   13fd4:	mov	r2, #0
   13fd8:	add	r1, r8, #56	; 0x38
   13fdc:	mov	r0, r6
   13fe0:	bl	1225c <__assert_fail@plt+0xd80>
   13fe4:	ldr	r3, [fp, #288]	; 0x120
   13fe8:	orr	r0, r3, r0
   13fec:	str	r0, [fp, #288]	; 0x120
   13ff0:	add	r7, r7, #1
   13ff4:	cmp	r9, r7
   13ff8:	beq	142f4 <__assert_fail@plt+0x2e18>
   13ffc:	ldr	r5, [sl], #4
   14000:	mov	r1, #61	; 0x3d
   14004:	mov	r0, r5
   14008:	bl	1138c <strchr@plt>
   1400c:	cmp	r0, #0
   14010:	beq	13f90 <__assert_fail@plt+0x2ab4>
   14014:	add	r6, r0, #1
   14018:	mov	r1, r4
   1401c:	mov	r0, r5
   14020:	bl	11638 <__assert_fail@plt+0x15c>
   14024:	cmp	r0, #0
   14028:	strne	r6, [fp, #524]	; 0x20c
   1402c:	bne	13ff0 <__assert_fail@plt+0x2b14>
   14030:	ldr	r1, [sp, #40]	; 0x28
   14034:	mov	r0, r5
   14038:	bl	11638 <__assert_fail@plt+0x15c>
   1403c:	cmp	r0, #0
   14040:	strne	r6, [fp, #520]	; 0x208
   14044:	bne	13ff0 <__assert_fail@plt+0x2b14>
   14048:	movw	r1, #53232	; 0xcff0
   1404c:	movt	r1, #1
   14050:	mov	r0, r5
   14054:	bl	11638 <__assert_fail@plt+0x15c>
   14058:	cmp	r0, #0
   1405c:	bne	13fcc <__assert_fail@plt+0x2af0>
   14060:	movw	r1, #53260	; 0xd00c
   14064:	movt	r1, #1
   14068:	mov	r0, r5
   1406c:	bl	11638 <__assert_fail@plt+0x15c>
   14070:	cmp	r0, #0
   14074:	bne	140d0 <__assert_fail@plt+0x2bf4>
   14078:	movw	r1, #53288	; 0xd028
   1407c:	movt	r1, #1
   14080:	mov	r0, r5
   14084:	bl	11638 <__assert_fail@plt+0x15c>
   14088:	cmp	r0, #0
   1408c:	bne	140f8 <__assert_fail@plt+0x2c1c>
   14090:	movw	r1, #53316	; 0xd044
   14094:	movt	r1, #1
   14098:	mov	r0, r5
   1409c:	bl	11638 <__assert_fail@plt+0x15c>
   140a0:	cmp	r0, #0
   140a4:	beq	14120 <__assert_fail@plt+0x2c44>
   140a8:	movw	r3, #53324	; 0xd04c
   140ac:	movt	r3, #1
   140b0:	mov	r2, #1
   140b4:	ldr	r1, [sp, #84]	; 0x54
   140b8:	mov	r0, r6
   140bc:	bl	1225c <__assert_fail@plt+0xd80>
   140c0:	movw	r3, #57680	; 0xe150
   140c4:	movt	r3, #2
   140c8:	str	r0, [r3, #24]
   140cc:	b	13ff0 <__assert_fail@plt+0x2b14>
   140d0:	movw	r3, #53268	; 0xd014
   140d4:	movt	r3, #1
   140d8:	mov	r2, #0
   140dc:	add	r1, r8, #328	; 0x148
   140e0:	mov	r0, r6
   140e4:	bl	1225c <__assert_fail@plt+0xd80>
   140e8:	ldr	r3, [fp, #532]	; 0x214
   140ec:	orr	r0, r3, r0
   140f0:	str	r0, [fp, #532]	; 0x214
   140f4:	b	13ff0 <__assert_fail@plt+0x2b14>
   140f8:	movw	r3, #53296	; 0xd030
   140fc:	movt	r3, #1
   14100:	mov	r2, #0
   14104:	add	r1, r8, #328	; 0x148
   14108:	mov	r0, r6
   1410c:	bl	1225c <__assert_fail@plt+0xd80>
   14110:	ldr	r3, [fp, #540]	; 0x21c
   14114:	orr	r3, r3, r0
   14118:	str	r3, [fp, #540]	; 0x21c
   1411c:	b	13ff0 <__assert_fail@plt+0x2b14>
   14120:	mov	r3, #0
   14124:	str	r3, [sp, #136]	; 0x88
   14128:	add	r1, sp, #136	; 0x88
   1412c:	mov	r0, r6
   14130:	bl	11da8 <__assert_fail@plt+0x8cc>
   14134:	strd	r0, [sp, #48]	; 0x30
   14138:	movw	r1, #53348	; 0xd064
   1413c:	movt	r1, #1
   14140:	mov	r0, r5
   14144:	bl	11638 <__assert_fail@plt+0x15c>
   14148:	cmp	r0, #0
   1414c:	bne	14224 <__assert_fail@plt+0x2d48>
   14150:	movw	r1, #53352	; 0xd068
   14154:	movt	r1, #1
   14158:	mov	r0, r5
   1415c:	bl	11638 <__assert_fail@plt+0x15c>
   14160:	cmp	r0, #0
   14164:	bne	14298 <__assert_fail@plt+0x2dbc>
   14168:	movw	r1, #53356	; 0xd06c
   1416c:	movt	r1, #1
   14170:	mov	r0, r5
   14174:	bl	11638 <__assert_fail@plt+0x15c>
   14178:	cmp	r0, #0
   1417c:	bne	142ac <__assert_fail@plt+0x2dd0>
   14180:	movw	r1, #53360	; 0xd070
   14184:	movt	r1, #1
   14188:	mov	r0, r5
   1418c:	bl	11638 <__assert_fail@plt+0x15c>
   14190:	cmp	r0, #0
   14194:	bne	142c0 <__assert_fail@plt+0x2de4>
   14198:	movw	r1, #53364	; 0xd074
   1419c:	movt	r1, #1
   141a0:	mov	r0, r5
   141a4:	bl	11638 <__assert_fail@plt+0x15c>
   141a8:	cmp	r0, #0
   141ac:	bne	15e08 <__assert_fail@plt+0x492c>
   141b0:	movw	r1, #53372	; 0xd07c
   141b4:	movt	r1, #1
   141b8:	mov	r0, r5
   141bc:	bl	11638 <__assert_fail@plt+0x15c>
   141c0:	cmp	r0, #0
   141c4:	bne	15e30 <__assert_fail@plt+0x4954>
   141c8:	movw	r1, #53380	; 0xd084
   141cc:	movt	r1, #1
   141d0:	mov	r0, r5
   141d4:	bl	11638 <__assert_fail@plt+0x15c>
   141d8:	cmp	r0, #0
   141dc:	beq	141ec <__assert_fail@plt+0x2d10>
   141e0:	ldrd	r2, [sp, #48]	; 0x30
   141e4:	strd	r2, [sp, #56]	; 0x38
   141e8:	b	15e10 <__assert_fail@plt+0x4934>
   141ec:	mov	r2, #5
   141f0:	movw	r1, #53200	; 0xcfd0
   141f4:	movt	r1, #1
   141f8:	bl	11230 <dcgettext@plt>
   141fc:	mov	r4, r0
   14200:	mov	r0, r5
   14204:	bl	19628 <__assert_fail@plt+0x814c>
   14208:	mov	r3, r0
   1420c:	mov	r2, r4
   14210:	mov	r1, #0
   14214:	mov	r0, r1
   14218:	bl	11d04 <__assert_fail@plt+0x828>
   1421c:	mov	r0, #1
   14220:	bl	116bc <__assert_fail@plt+0x1e0>
   14224:	ldr	ip, [sp, #108]	; 0x6c
   14228:	mvn	r2, #-2147483647	; 0x80000001
   1422c:	mov	r3, #0
   14230:	strd	r2, [sp, #88]	; 0x58
   14234:	ldrd	r0, [sp, #48]	; 0x30
   14238:	cmp	r0, #1
   1423c:	sbcs	r2, r1, #0
   14240:	bge	142d4 <__assert_fail@plt+0x2df8>
   14244:	mov	r3, #4
   14248:	str	r3, [sp, #136]	; 0x88
   1424c:	ldr	r2, [sp, #136]	; 0x88
   14250:	cmp	r2, #1
   14254:	moveq	r4, #75	; 0x4b
   14258:	movne	r4, #0
   1425c:	mov	r2, #5
   14260:	movw	r1, #53388	; 0xd08c
   14264:	movt	r1, #1
   14268:	mov	r0, #0
   1426c:	bl	11230 <dcgettext@plt>
   14270:	mov	r5, r0
   14274:	mov	r0, r6
   14278:	bl	19628 <__assert_fail@plt+0x814c>
   1427c:	str	r0, [sp]
   14280:	mov	r3, r5
   14284:	movw	r2, #52480	; 0xcd00
   14288:	movt	r2, #1
   1428c:	mov	r1, r4
   14290:	mov	r0, #1
   14294:	bl	11d04 <__assert_fail@plt+0x828>
   14298:	add	ip, fp, #304	; 0x130
   1429c:	mvn	r2, #-2147483647	; 0x80000001
   142a0:	mov	r3, #0
   142a4:	strd	r2, [sp, #88]	; 0x58
   142a8:	b	14234 <__assert_fail@plt+0x2d58>
   142ac:	add	ip, sp, #132	; 0x84
   142b0:	mvn	r2, #-2147483647	; 0x80000001
   142b4:	mov	r3, #0
   142b8:	strd	r2, [sp, #88]	; 0x58
   142bc:	b	14234 <__assert_fail@plt+0x2d58>
   142c0:	add	ip, fp, #556	; 0x22c
   142c4:	mvn	r2, #-2147483648	; 0x80000000
   142c8:	mov	r3, #0
   142cc:	strd	r2, [sp, #88]	; 0x58
   142d0:	b	14234 <__assert_fail@plt+0x2d58>
   142d4:	ldrd	r0, [sp, #48]	; 0x30
   142d8:	ldrd	r2, [sp, #88]	; 0x58
   142dc:	cmp	r2, r0
   142e0:	sbcs	r2, r3, r1
   142e4:	bge	15e98 <__assert_fail@plt+0x49bc>
   142e8:	mov	r3, #1
   142ec:	str	r3, [sp, #136]	; 0x88
   142f0:	b	1424c <__assert_fail@plt+0x2d70>
   142f4:	ldr	r4, [sp, #104]	; 0x68
   142f8:	ldr	r3, [sp, #132]	; 0x84
   142fc:	cmp	r3, #0
   14300:	beq	144e4 <__assert_fail@plt+0x3008>
   14304:	movw	r2, #57832	; 0xe1e8
   14308:	movt	r2, #2
   1430c:	str	r3, [r2, #304]	; 0x130
   14310:	str	r3, [r2, #292]	; 0x124
   14314:	movw	r3, #57832	; 0xe1e8
   14318:	movt	r3, #2
   1431c:	ldr	r3, [r3, #556]	; 0x22c
   14320:	cmp	r3, #0
   14324:	bne	1433c <__assert_fail@plt+0x2e60>
   14328:	movw	r3, #57832	; 0xe1e8
   1432c:	movt	r3, #2
   14330:	ldr	r2, [r3, #288]	; 0x120
   14334:	bic	r2, r2, #24
   14338:	str	r2, [r3, #288]	; 0x120
   1433c:	movw	r3, #57832	; 0xe1e8
   14340:	movt	r3, #2
   14344:	ldr	r3, [r3, #532]	; 0x214
   14348:	mov	r2, #4096	; 0x1000
   1434c:	movt	r2, #16
   14350:	tst	r3, r2
   14354:	beq	1436c <__assert_fail@plt+0x2e90>
   14358:	movw	r2, #57832	; 0xe1e8
   1435c:	movt	r2, #2
   14360:	orr	r3, r3, #1048576	; 0x100000
   14364:	orr	r3, r3, #4096	; 0x1000
   14368:	str	r3, [r2, #532]	; 0x214
   1436c:	movw	r3, #57832	; 0xe1e8
   14370:	movt	r3, #2
   14374:	ldr	r6, [r3, #540]	; 0x21c
   14378:	tst	r6, #1
   1437c:	bne	1453c <__assert_fail@plt+0x3060>
   14380:	movw	r3, #57832	; 0xe1e8
   14384:	movt	r3, #2
   14388:	ldr	r5, [r3, #532]	; 0x214
   1438c:	tst	r5, #16
   14390:	bne	14584 <__assert_fail@plt+0x30a8>
   14394:	tst	r6, #12
   14398:	bne	145cc <__assert_fail@plt+0x30f0>
   1439c:	ubfx	r3, r5, #3, #1
   143a0:	ldrd	r0, [sp, #64]	; 0x40
   143a4:	mov	r2, r0
   143a8:	orrs	r2, r2, r1
   143ac:	moveq	r3, #0
   143b0:	cmp	r3, #0
   143b4:	bne	14624 <__assert_fail@plt+0x3148>
   143b8:	ldrd	r0, [sp, #64]	; 0x40
   143bc:	orrs	r3, r0, r1
   143c0:	ldrne	r3, [pc, #2452]	; 14d5c <__assert_fail@plt+0x3880>
   143c4:	strdne	r0, [r3, #-8]
   143c8:	ubfx	r3, r5, #2, #1
   143cc:	mvn	r0, #0
   143d0:	mvn	r1, #-2147483648	; 0x80000000
   143d4:	ldrd	r8, [sp, #56]	; 0x38
   143d8:	cmp	r9, r1
   143dc:	cmpeq	r8, r0
   143e0:	moveq	r3, #0
   143e4:	cmp	r3, #0
   143e8:	bne	14664 <__assert_fail@plt+0x3188>
   143ec:	mvn	r2, #0
   143f0:	mvn	r3, #-2147483648	; 0x80000000
   143f4:	ldrd	r0, [sp, #56]	; 0x38
   143f8:	cmp	r1, r3
   143fc:	cmpeq	r0, r2
   14400:	beq	14410 <__assert_fail@plt+0x2f34>
   14404:	movw	r3, #57680	; 0xe150
   14408:	movt	r3, #2
   1440c:	strd	r0, [r3, #32]
   14410:	ubfx	r3, r6, #4, #1
   14414:	ldrd	r0, [sp, #72]	; 0x48
   14418:	mov	r2, r0
   1441c:	orrs	r2, r2, r1
   14420:	moveq	r3, #0
   14424:	cmp	r3, #0
   14428:	bne	146a8 <__assert_fail@plt+0x31cc>
   1442c:	ldrd	r0, [sp, #72]	; 0x48
   14430:	orrs	r3, r0, r1
   14434:	ldrne	r3, [pc, #2340]	; 14d60 <__assert_fail@plt+0x3884>
   14438:	strdne	r0, [r3, #-8]
   1443c:	movw	r3, #57832	; 0xe1e8
   14440:	movt	r3, #2
   14444:	ldr	r7, [r3, #288]	; 0x120
   14448:	and	r1, r5, #1
   1444c:	and	r3, r7, #2048	; 0x800
   14450:	orrs	r3, r3, r1
   14454:	bne	146f4 <__assert_fail@plt+0x3218>
   14458:	ldr	r3, [pc, #2300]	; 14d5c <__assert_fail@plt+0x3880>
   1445c:	ldrd	r2, [r3, #-8]
   14460:	orrs	r3, r2, r3
   14464:	bne	15dec <__assert_fail@plt+0x4910>
   14468:	movw	r3, #57680	; 0xe150
   1446c:	movt	r3, #2
   14470:	ldr	r2, [r3, #32]
   14474:	ldr	r3, [r3, #36]	; 0x24
   14478:	subs	r2, r2, #1
   1447c:	str	r2, [sp, #112]	; 0x70
   14480:	sbc	r3, r3, #0
   14484:	str	r3, [sp, #116]	; 0x74
   14488:	mvn	r2, #2
   1448c:	mvn	r3, #-2147483648	; 0x80000000
   14490:	ldrd	r0, [sp, #112]	; 0x70
   14494:	cmp	r1, r3
   14498:	cmpeq	r0, r2
   1449c:	bls	15dec <__assert_fail@plt+0x4910>
   144a0:	orr	r3, r6, r5
   144a4:	tst	r3, #65536	; 0x10000
   144a8:	bne	15dec <__assert_fail@plt+0x4910>
   144ac:	movw	r3, #57832	; 0xe1e8
   144b0:	movt	r3, #2
   144b4:	mov	r2, #0
   144b8:	strb	r2, [r3, #536]	; 0x218
   144bc:	movw	r3, #12488	; 0x30c8
   144c0:	movt	r3, #1
   144c4:	b	1471c <__assert_fail@plt+0x3240>
   144c8:	mvn	r2, #0
   144cc:	mvn	r3, #-2147483648	; 0x80000000
   144d0:	strd	r2, [sp, #56]	; 0x38
   144d4:	mov	r2, #0
   144d8:	mov	r3, #0
   144dc:	strd	r2, [sp, #64]	; 0x40
   144e0:	strd	r2, [sp, #72]	; 0x48
   144e4:	movw	r3, #57832	; 0xe1e8
   144e8:	movt	r3, #2
   144ec:	ldr	r2, [r3, #288]	; 0x120
   144f0:	orr	r2, r2, #2048	; 0x800
   144f4:	str	r2, [r3, #288]	; 0x120
   144f8:	ldr	r3, [r3, #292]	; 0x124
   144fc:	cmp	r3, #0
   14500:	bne	14514 <__assert_fail@plt+0x3038>
   14504:	movw	r3, #57832	; 0xe1e8
   14508:	movt	r3, #2
   1450c:	mov	r2, #512	; 0x200
   14510:	str	r2, [r3, #292]	; 0x124
   14514:	movw	r3, #57832	; 0xe1e8
   14518:	movt	r3, #2
   1451c:	ldr	r3, [r3, #304]	; 0x130
   14520:	cmp	r3, #0
   14524:	bne	14314 <__assert_fail@plt+0x2e38>
   14528:	movw	r3, #57832	; 0xe1e8
   1452c:	movt	r3, #2
   14530:	mov	r2, #512	; 0x200
   14534:	str	r2, [r3, #304]	; 0x130
   14538:	b	14314 <__assert_fail@plt+0x2e38>
   1453c:	mov	r2, #5
   14540:	movw	r1, #53296	; 0xd030
   14544:	movt	r1, #1
   14548:	mov	r0, #0
   1454c:	bl	11230 <dcgettext@plt>
   14550:	mov	r4, r0
   14554:	movw	r0, #52968	; 0xcee8
   14558:	movt	r0, #1
   1455c:	bl	19628 <__assert_fail@plt+0x814c>
   14560:	str	r0, [sp]
   14564:	mov	r3, r4
   14568:	movw	r2, #52480	; 0xcd00
   1456c:	movt	r2, #1
   14570:	mov	r1, #0
   14574:	mov	r0, r1
   14578:	bl	11d04 <__assert_fail@plt+0x828>
   1457c:	mov	r0, #1
   14580:	bl	116bc <__assert_fail@plt+0x1e0>
   14584:	mov	r2, #5
   14588:	movw	r1, #53268	; 0xd014
   1458c:	movt	r1, #1
   14590:	mov	r0, #0
   14594:	bl	11230 <dcgettext@plt>
   14598:	mov	r4, r0
   1459c:	movw	r0, #53404	; 0xd09c
   145a0:	movt	r0, #1
   145a4:	bl	19628 <__assert_fail@plt+0x814c>
   145a8:	str	r0, [sp]
   145ac:	mov	r3, r4
   145b0:	movw	r2, #52480	; 0xcd00
   145b4:	movt	r2, #1
   145b8:	mov	r1, #0
   145bc:	mov	r0, r1
   145c0:	bl	11d04 <__assert_fail@plt+0x828>
   145c4:	mov	r0, #1
   145c8:	bl	116bc <__assert_fail@plt+0x1e0>
   145cc:	mov	r2, #5
   145d0:	movw	r1, #53296	; 0xd030
   145d4:	movt	r1, #1
   145d8:	mov	r0, #0
   145dc:	bl	11230 <dcgettext@plt>
   145e0:	mov	r4, r0
   145e4:	movw	r0, #53096	; 0xcf68
   145e8:	movt	r0, #1
   145ec:	movw	r3, #53108	; 0xcf74
   145f0:	movt	r3, #1
   145f4:	tst	r6, #4
   145f8:	moveq	r0, r3
   145fc:	bl	19628 <__assert_fail@plt+0x814c>
   14600:	str	r0, [sp]
   14604:	mov	r3, r4
   14608:	movw	r2, #52480	; 0xcd00
   1460c:	movt	r2, #1
   14610:	mov	r1, #0
   14614:	mov	r0, r1
   14618:	bl	11d04 <__assert_fail@plt+0x828>
   1461c:	mov	r0, #1
   14620:	bl	116bc <__assert_fail@plt+0x1e0>
   14624:	movw	r7, #57832	; 0xe1e8
   14628:	movt	r7, #2
   1462c:	ldr	r8, [r7, #292]	; 0x124
   14630:	asr	r9, r8, #31
   14634:	add	sl, r7, #576	; 0x240
   14638:	mov	r2, r8
   1463c:	mov	r3, r9
   14640:	ldrd	r0, [sp, #64]	; 0x40
   14644:	bl	1b578 <__assert_fail@plt+0xa09c>
   14648:	strd	r0, [sl, #-8]
   1464c:	mov	r2, r8
   14650:	mov	r3, r9
   14654:	ldrd	r0, [sp, #64]	; 0x40
   14658:	bl	1b578 <__assert_fail@plt+0xa09c>
   1465c:	str	r2, [r7, #576]	; 0x240
   14660:	b	143c8 <__assert_fail@plt+0x2eec>
   14664:	movw	r7, #57832	; 0xe1e8
   14668:	movt	r7, #2
   1466c:	ldr	r8, [r7, #292]	; 0x124
   14670:	asr	r9, r8, #31
   14674:	movw	sl, #57680	; 0xe150
   14678:	movt	sl, #2
   1467c:	mov	r2, r8
   14680:	mov	r3, r9
   14684:	ldrd	r0, [sp, #56]	; 0x38
   14688:	bl	1b578 <__assert_fail@plt+0xa09c>
   1468c:	strd	r0, [sl, #32]
   14690:	mov	r2, r8
   14694:	mov	r3, r9
   14698:	ldrd	r0, [sp, #56]	; 0x38
   1469c:	bl	1b578 <__assert_fail@plt+0xa09c>
   146a0:	str	r2, [r7, #580]	; 0x244
   146a4:	b	14410 <__assert_fail@plt+0x2f34>
   146a8:	movw	r7, #57832	; 0xe1e8
   146ac:	movt	r7, #2
   146b0:	ldr	r8, [r7, #304]	; 0x130
   146b4:	asr	r9, r8, #31
   146b8:	add	r7, r7, #592	; 0x250
   146bc:	mov	r2, r8
   146c0:	mov	r3, r9
   146c4:	ldrd	sl, [sp, #72]	; 0x48
   146c8:	mov	r0, sl
   146cc:	mov	r1, fp
   146d0:	bl	1b578 <__assert_fail@plt+0xa09c>
   146d4:	strd	r0, [r7, #-8]
   146d8:	mov	r2, r8
   146dc:	mov	r3, r9
   146e0:	mov	r0, sl
   146e4:	mov	r1, fp
   146e8:	bl	1b578 <__assert_fail@plt+0xa09c>
   146ec:	strd	r2, [r7]
   146f0:	b	1443c <__assert_fail@plt+0x2f60>
   146f4:	movw	r3, #57832	; 0xe1e8
   146f8:	movt	r3, #2
   146fc:	mov	r2, #0
   14700:	strb	r2, [r3, #536]	; 0x218
   14704:	movw	r3, #12900	; 0x3264
   14708:	movt	r3, #1
   1470c:	movw	r2, #12488	; 0x30c8
   14710:	movt	r2, #1
   14714:	cmp	r1, #0
   14718:	moveq	r3, r2
   1471c:	movw	r2, #57832	; 0xe1e8
   14720:	movt	r2, #2
   14724:	str	r3, [r2, #564]	; 0x234
   14728:	bic	r3, r5, #1
   1472c:	str	r3, [r2, #532]	; 0x214
   14730:	and	r3, r7, #7
   14734:	sub	r2, r3, #1
   14738:	tst	r2, r3
   1473c:	bne	14a8c <__assert_fail@plt+0x35b0>
   14740:	and	r3, r7, #24
   14744:	sub	r2, r3, #1
   14748:	tst	r2, r3
   1474c:	bne	14ab0 <__assert_fail@plt+0x35d4>
   14750:	and	r3, r7, #96	; 0x60
   14754:	sub	r2, r3, #1
   14758:	tst	r2, r3
   1475c:	bne	14ad4 <__assert_fail@plt+0x35f8>
   14760:	and	r3, r7, #12288	; 0x3000
   14764:	sub	r2, r3, #1
   14768:	tst	r2, r3
   1476c:	bne	14af8 <__assert_fail@plt+0x361c>
   14770:	mov	r3, #2
   14774:	movt	r3, #1
   14778:	and	r2, r5, r3
   1477c:	and	r3, r3, r6
   14780:	sub	r1, r2, #1
   14784:	and	r1, r1, r2
   14788:	sub	r2, r3, #1
   1478c:	and	r3, r3, r2
   14790:	orrs	r3, r1, r3
   14794:	str	r3, [sp, #48]	; 0x30
   14798:	bne	14b1c <__assert_fail@plt+0x3640>
   1479c:	tst	r5, #2
   147a0:	beq	147f8 <__assert_fail@plt+0x331c>
   147a4:	movw	r3, #57832	; 0xe1e8
   147a8:	movt	r3, #2
   147ac:	mov	r2, #1
   147b0:	strb	r2, [r3, #600]	; 0x258
   147b4:	movw	r3, #57680	; 0xe150
   147b8:	movt	r3, #2
   147bc:	ldrd	r2, [r3, #32]
   147c0:	orrs	r3, r2, r3
   147c4:	ldrne	r3, [sp, #48]	; 0x30
   147c8:	bne	147e0 <__assert_fail@plt+0x3304>
   147cc:	movw	r3, #57832	; 0xe1e8
   147d0:	movt	r3, #2
   147d4:	ldr	r3, [r3, #580]	; 0x244
   147d8:	clz	r3, r3
   147dc:	lsr	r3, r3, #5
   147e0:	movw	r2, #57832	; 0xe1e8
   147e4:	movt	r2, #2
   147e8:	and	r3, r3, #1
   147ec:	strb	r3, [r2, #328]	; 0x148
   147f0:	bic	r5, r5, #3
   147f4:	str	r5, [r2, #532]	; 0x214
   147f8:	tst	r6, #2
   147fc:	beq	14854 <__assert_fail@plt+0x3378>
   14800:	movw	r3, #57832	; 0xe1e8
   14804:	movt	r3, #2
   14808:	mov	r2, #1
   1480c:	strb	r2, [r3, #545]	; 0x221
   14810:	movw	r3, #57680	; 0xe150
   14814:	movt	r3, #2
   14818:	ldrd	r2, [r3, #32]
   1481c:	orrs	r3, r2, r3
   14820:	ldrne	r3, [sp, #48]	; 0x30
   14824:	bne	1483c <__assert_fail@plt+0x3360>
   14828:	movw	r3, #57832	; 0xe1e8
   1482c:	movt	r3, #2
   14830:	ldr	r3, [r3, #580]	; 0x244
   14834:	clz	r3, r3
   14838:	lsr	r3, r3, #5
   1483c:	movw	r2, #57832	; 0xe1e8
   14840:	movt	r2, #2
   14844:	and	r3, r3, #1
   14848:	strb	r3, [r2, #329]	; 0x149
   1484c:	bic	r6, r6, #2
   14850:	str	r6, [r2, #540]	; 0x21c
   14854:	tst	r7, #1
   14858:	bne	14b40 <__assert_fail@plt+0x3664>
   1485c:	tst	r7, #64	; 0x40
   14860:	beq	14b4c <__assert_fail@plt+0x3670>
   14864:	bl	11344 <__ctype_toupper_loc@plt>
   14868:	ldr	r1, [pc, #1268]	; 14d64 <__assert_fail@plt+0x3888>
   1486c:	ldrb	r2, [r4, #1]!
   14870:	ldr	r3, [r0]
   14874:	ldr	r3, [r3, r2, lsl #2]
   14878:	strb	r3, [r4]
   1487c:	cmp	r4, r1
   14880:	bne	1486c <__assert_fail@plt+0x3390>
   14884:	movw	r3, #57832	; 0xe1e8
   14888:	movt	r3, #2
   1488c:	mov	r2, #1
   14890:	strb	r2, [r3, #256]	; 0x100
   14894:	tst	r7, #2
   14898:	bne	14b88 <__assert_fail@plt+0x36ac>
   1489c:	tst	r7, #4
   148a0:	bne	14bac <__assert_fail@plt+0x36d0>
   148a4:	movw	r3, #57832	; 0xe1e8
   148a8:	movt	r3, #2
   148ac:	ldr	r1, [r3, #524]	; 0x20c
   148b0:	cmp	r1, #0
   148b4:	beq	14bd0 <__assert_fail@plt+0x36f4>
   148b8:	movw	r2, #57832	; 0xe1e8
   148bc:	movt	r2, #2
   148c0:	mov	r3, #0
   148c4:	ldr	r2, [r2, #532]	; 0x214
   148c8:	mov	r0, r3
   148cc:	bl	12cb8 <__assert_fail@plt+0x17dc>
   148d0:	cmp	r0, #0
   148d4:	blt	14c04 <__assert_fail@plt+0x3728>
   148d8:	mov	r3, #1
   148dc:	str	r3, [sp]
   148e0:	mov	r2, #0
   148e4:	mov	r3, #0
   148e8:	mov	r0, #0
   148ec:	bl	112a8 <lseek64@plt>
   148f0:	movw	r3, #57832	; 0xe1e8
   148f4:	movt	r3, #2
   148f8:	mvn	r2, r1
   148fc:	lsr	r2, r2, #31
   14900:	strb	r2, [r3, #330]	; 0x14a
   14904:	add	r3, r3, #272	; 0x110
   14908:	mov	r4, r0
   1490c:	mov	r5, r1
   14910:	cmp	r0, #0
   14914:	sbcs	r2, r1, #0
   14918:	movlt	r4, #0
   1491c:	movlt	r5, #0
   14920:	strd	r4, [r3]
   14924:	bl	113a4 <__errno_location@plt>
   14928:	mov	sl, r0
   1492c:	movw	r3, #57832	; 0xe1e8
   14930:	movt	r3, #2
   14934:	ldr	r2, [r0]
   14938:	str	r2, [r3, #604]	; 0x25c
   1493c:	ldr	lr, [r3, #520]	; 0x208
   14940:	cmp	lr, #0
   14944:	beq	14c4c <__assert_fail@plt+0x3770>
   14948:	movw	r3, #57832	; 0xe1e8
   1494c:	movt	r3, #2
   14950:	ldr	ip, [r3, #288]	; 0x120
   14954:	tst	ip, #4096	; 0x1000
   14958:	ldr	r0, [sp, #48]	; 0x30
   1495c:	movne	r2, r0
   14960:	moveq	r2, #64	; 0x40
   14964:	asr	r4, ip, #6
   14968:	and	r4, r4, #128	; 0x80
   1496c:	movw	r3, #57832	; 0xe1e8
   14970:	movt	r3, #2
   14974:	ldr	r1, [r3, #540]	; 0x21c
   14978:	orr	r4, r4, r1
   1497c:	orr	r4, r4, r2
   14980:	add	r3, r3, #592	; 0x250
   14984:	ldrd	r6, [r3, #-8]
   14988:	orrs	r3, r6, r7
   1498c:	bne	14c80 <__assert_fail@plt+0x37a4>
   14990:	tst	ip, #512	; 0x200
   14994:	movne	r3, r0
   14998:	moveq	r3, #512	; 0x200
   1499c:	orr	r4, r4, r3
   149a0:	ldr	r3, [pc, #952]	; 14d60 <__assert_fail@plt+0x3884>
   149a4:	ldrd	r8, [r3]
   149a8:	orrs	r3, r6, r7
   149ac:	bne	14cc8 <__assert_fail@plt+0x37ec>
   149b0:	movw	r1, #57832	; 0xe1e8
   149b4:	movt	r1, #2
   149b8:	movw	r3, #438	; 0x1b6
   149bc:	orr	r2, r4, #1
   149c0:	ldr	r1, [r1, #520]	; 0x208
   149c4:	mov	r0, #1
   149c8:	bl	12cb8 <__assert_fail@plt+0x17dc>
   149cc:	cmp	r0, #0
   149d0:	blt	14d7c <__assert_fail@plt+0x38a0>
   149d4:	ldr	r3, [pc, #900]	; 14d60 <__assert_fail@plt+0x3884>
   149d8:	ldrd	r2, [r3, #-8]
   149dc:	orrs	r3, r2, r3
   149e0:	beq	149f8 <__assert_fail@plt+0x351c>
   149e4:	movw	r3, #57832	; 0xe1e8
   149e8:	movt	r3, #2
   149ec:	ldr	r3, [r3, #288]	; 0x120
   149f0:	tst	r3, #512	; 0x200
   149f4:	beq	14dc0 <__assert_fail@plt+0x38e4>
   149f8:	bl	16548 <__assert_fail@plt+0x506c>
   149fc:	movw	r3, #57832	; 0xe1e8
   14a00:	movt	r3, #2
   14a04:	str	r0, [r3, #344]	; 0x158
   14a08:	str	r1, [r3, #348]	; 0x15c
   14a0c:	mov	ip, #51712	; 0xca00
   14a10:	movt	ip, #15258	; 0x3b9a
   14a14:	adds	r0, r0, ip
   14a18:	mov	ip, #0
   14a1c:	adc	r1, r1, ip
   14a20:	str	r0, [r3, #608]	; 0x260
   14a24:	str	r1, [r3, #612]	; 0x264
   14a28:	add	r3, r3, #576	; 0x240
   14a2c:	ldrd	r2, [r3, #-8]
   14a30:	orrs	r1, r2, r3
   14a34:	bne	14eb4 <__assert_fail@plt+0x39d8>
   14a38:	movw	r1, #57832	; 0xe1e8
   14a3c:	movt	r1, #2
   14a40:	ldr	r1, [r1, #576]	; 0x240
   14a44:	cmp	r1, ip
   14a48:	beq	14f74 <__assert_fail@plt+0x3a98>
   14a4c:	movw	r1, #57832	; 0xe1e8
   14a50:	movt	r1, #2
   14a54:	ldr	ip, [r1, #292]	; 0x124
   14a58:	mov	r8, r2
   14a5c:	mov	r9, r3
   14a60:	movw	r1, #57832	; 0xe1e8
   14a64:	movt	r1, #2
   14a68:	ldr	r0, [r1, #576]	; 0x240
   14a6c:	asr	r1, r0, #31
   14a70:	adds	r4, r0, r8
   14a74:	adcs	r5, r1, r9
   14a78:	mov	r8, r4
   14a7c:	mov	r9, r5
   14a80:	movvs	r6, #1
   14a84:	movvc	r6, #0
   14a88:	b	14ef4 <__assert_fail@plt+0x3a18>
   14a8c:	mov	r2, #5
   14a90:	movw	r1, #53416	; 0xd0a8
   14a94:	movt	r1, #1
   14a98:	mov	r0, #0
   14a9c:	bl	11230 <dcgettext@plt>
   14aa0:	mov	r2, r0
   14aa4:	mov	r1, #0
   14aa8:	mov	r0, #1
   14aac:	bl	11d04 <__assert_fail@plt+0x828>
   14ab0:	mov	r2, #5
   14ab4:	movw	r1, #53464	; 0xd0d8
   14ab8:	movt	r1, #1
   14abc:	mov	r0, #0
   14ac0:	bl	11230 <dcgettext@plt>
   14ac4:	mov	r2, r0
   14ac8:	mov	r1, #0
   14acc:	mov	r0, #1
   14ad0:	bl	11d04 <__assert_fail@plt+0x828>
   14ad4:	mov	r2, #5
   14ad8:	movw	r1, #53500	; 0xd0fc
   14adc:	movt	r1, #1
   14ae0:	mov	r0, #0
   14ae4:	bl	11230 <dcgettext@plt>
   14ae8:	mov	r2, r0
   14aec:	mov	r1, #0
   14af0:	mov	r0, #1
   14af4:	bl	11d04 <__assert_fail@plt+0x828>
   14af8:	mov	r2, #5
   14afc:	movw	r1, #53532	; 0xd11c
   14b00:	movt	r1, #1
   14b04:	mov	r0, #0
   14b08:	bl	11230 <dcgettext@plt>
   14b0c:	mov	r2, r0
   14b10:	mov	r1, #0
   14b14:	mov	r0, #1
   14b18:	bl	11d04 <__assert_fail@plt+0x828>
   14b1c:	mov	r2, #5
   14b20:	movw	r1, #53564	; 0xd13c
   14b24:	movt	r1, #1
   14b28:	mov	r0, #0
   14b2c:	bl	11230 <dcgettext@plt>
   14b30:	mov	r2, r0
   14b34:	mov	r1, #0
   14b38:	mov	r0, #1
   14b3c:	bl	11d04 <__assert_fail@plt+0x828>
   14b40:	ldr	r0, [pc, #544]	; 14d68 <__assert_fail@plt+0x388c>
   14b44:	bl	115d8 <__assert_fail@plt+0xfc>
   14b48:	b	1485c <__assert_fail@plt+0x3380>
   14b4c:	tst	r7, #32
   14b50:	beq	14894 <__assert_fail@plt+0x33b8>
   14b54:	bl	11338 <__ctype_tolower_loc@plt>
   14b58:	ldr	r1, [pc, #516]	; 14d64 <__assert_fail@plt+0x3888>
   14b5c:	ldrb	r2, [r4, #1]!
   14b60:	ldr	r3, [r0]
   14b64:	ldr	r3, [r3, r2, lsl #2]
   14b68:	strb	r3, [r4]
   14b6c:	cmp	r1, r4
   14b70:	bne	14b5c <__assert_fail@plt+0x3680>
   14b74:	movw	r3, #57832	; 0xe1e8
   14b78:	movt	r3, #2
   14b7c:	mov	r2, #1
   14b80:	strb	r2, [r3, #256]	; 0x100
   14b84:	b	14894 <__assert_fail@plt+0x33b8>
   14b88:	ldr	r0, [pc, #476]	; 14d6c <__assert_fail@plt+0x3890>
   14b8c:	bl	115d8 <__assert_fail@plt+0xfc>
   14b90:	movw	r3, #57680	; 0xe150
   14b94:	movt	r3, #2
   14b98:	mov	r2, #37	; 0x25
   14b9c:	strb	r2, [r3, #28]
   14ba0:	mov	r2, #64	; 0x40
   14ba4:	strb	r2, [r3, #29]
   14ba8:	b	148a4 <__assert_fail@plt+0x33c8>
   14bac:	ldr	r0, [pc, #444]	; 14d70 <__assert_fail@plt+0x3894>
   14bb0:	bl	115d8 <__assert_fail@plt+0xfc>
   14bb4:	movw	r3, #57680	; 0xe150
   14bb8:	movt	r3, #2
   14bbc:	mov	r2, #37	; 0x25
   14bc0:	strb	r2, [r3, #28]
   14bc4:	mov	r2, #64	; 0x40
   14bc8:	strb	r2, [r3, #29]
   14bcc:	b	148a4 <__assert_fail@plt+0x33c8>
   14bd0:	mov	r2, #5
   14bd4:	movw	r1, #53600	; 0xd160
   14bd8:	movt	r1, #1
   14bdc:	mov	r0, #0
   14be0:	bl	11230 <dcgettext@plt>
   14be4:	mov	r2, r0
   14be8:	movw	r3, #57832	; 0xe1e8
   14bec:	movt	r3, #2
   14bf0:	str	r0, [r3, #524]	; 0x20c
   14bf4:	ldr	r1, [r3, #532]	; 0x214
   14bf8:	mov	r0, #0
   14bfc:	bl	12d80 <__assert_fail@plt+0x18a4>
   14c00:	b	148d8 <__assert_fail@plt+0x33fc>
   14c04:	bl	113a4 <__errno_location@plt>
   14c08:	ldr	r4, [r0]
   14c0c:	mov	r2, #5
   14c10:	movw	r1, #53616	; 0xd170
   14c14:	movt	r1, #1
   14c18:	mov	r0, #0
   14c1c:	bl	11230 <dcgettext@plt>
   14c20:	mov	r5, r0
   14c24:	movw	r3, #57832	; 0xe1e8
   14c28:	movt	r3, #2
   14c2c:	ldr	r1, [r3, #524]	; 0x20c
   14c30:	mov	r0, #4
   14c34:	bl	19338 <__assert_fail@plt+0x7e5c>
   14c38:	mov	r3, r0
   14c3c:	mov	r2, r5
   14c40:	mov	r1, r4
   14c44:	mov	r0, #1
   14c48:	bl	11d04 <__assert_fail@plt+0x828>
   14c4c:	mov	r2, #5
   14c50:	movw	r1, #53636	; 0xd184
   14c54:	movt	r1, #1
   14c58:	mov	r0, #0
   14c5c:	bl	11230 <dcgettext@plt>
   14c60:	mov	r2, r0
   14c64:	movw	r3, #57832	; 0xe1e8
   14c68:	movt	r3, #2
   14c6c:	str	r0, [r3, #520]	; 0x208
   14c70:	ldr	r1, [r3, #540]	; 0x21c
   14c74:	mov	r0, #1
   14c78:	bl	12d80 <__assert_fail@plt+0x18a4>
   14c7c:	b	149f8 <__assert_fail@plt+0x351c>
   14c80:	movw	r3, #57832	; 0xe1e8
   14c84:	movt	r3, #2
   14c88:	ldr	r2, [r3, #304]	; 0x130
   14c8c:	mov	r0, r2
   14c90:	asr	r1, r2, #31
   14c94:	strd	r0, [sp, #40]	; 0x28
   14c98:	mov	r5, #0
   14c9c:	cmp	r7, r6, asr #31
   14ca0:	bne	14ce8 <__assert_fail@plt+0x380c>
   14ca4:	smull	r0, r1, r6, r2
   14ca8:	mov	r2, r0
   14cac:	mov	r3, r1
   14cb0:	mov	r8, r2
   14cb4:	mov	r9, r3
   14cb8:	cmp	r5, #0
   14cbc:	beq	15e3c <__assert_fail@plt+0x4960>
   14cc0:	tst	ip, #512	; 0x200
   14cc4:	beq	15e60 <__assert_fail@plt+0x4984>
   14cc8:	movw	r3, #438	; 0x1b6
   14ccc:	orr	r2, r4, #2
   14cd0:	mov	r1, lr
   14cd4:	mov	r0, #1
   14cd8:	bl	12cb8 <__assert_fail@plt+0x17dc>
   14cdc:	cmp	r0, #0
   14ce0:	bge	149d4 <__assert_fail@plt+0x34f8>
   14ce4:	b	149b0 <__assert_fail@plt+0x34d4>
   14ce8:	umull	r0, r1, r6, r2
   14cec:	strd	r0, [sp, #56]	; 0x38
   14cf0:	umull	r8, r9, r2, r7
   14cf4:	cmp	r7, #0
   14cf8:	bge	14d08 <__assert_fail@plt+0x382c>
   14cfc:	mov	r3, #0
   14d00:	subs	r8, r8, r3
   14d04:	sbc	r9, r9, r2
   14d08:	cmp	r2, #0
   14d0c:	bge	14d18 <__assert_fail@plt+0x383c>
   14d10:	subs	r8, r8, r6
   14d14:	sbc	r9, r9, r7
   14d18:	ldr	r3, [sp, #60]	; 0x3c
   14d1c:	mov	r1, #0
   14d20:	adds	r3, r8, r3
   14d24:	adc	r1, r9, r1
   14d28:	cmp	r1, r3, asr #31
   14d2c:	bne	14d38 <__assert_fail@plt+0x385c>
   14d30:	ldr	r2, [sp, #56]	; 0x38
   14d34:	b	14cb0 <__assert_fail@plt+0x37d4>
   14d38:	ldr	r3, [sp, #44]	; 0x2c
   14d3c:	mul	r3, r6, r3
   14d40:	mla	r1, r2, r7, r3
   14d44:	umull	r8, r9, r6, r2
   14d48:	add	r3, r1, r9
   14d4c:	mov	r2, r8
   14d50:	mov	r5, #1
   14d54:	b	14cb0 <__assert_fail@plt+0x37d4>
   14d58:	andeq	lr, r2, r0, ror r3
   14d5c:	andeq	lr, r2, r8, lsr #8
   14d60:	andeq	lr, r2, r8, lsr r4
   14d64:	andeq	lr, r2, r7, ror #5
   14d68:	andeq	fp, r1, r0, asr #22
   14d6c:	andeq	fp, r1, r0, asr #24
   14d70:	andeq	fp, r1, r0, asr #26
   14d74:	strdeq	lr, [r2], -r8
   14d78:	andeq	lr, r2, r8, lsr r3
   14d7c:	ldr	r4, [sl]
   14d80:	mov	r2, #5
   14d84:	movw	r1, #53616	; 0xd170
   14d88:	movt	r1, #1
   14d8c:	mov	r0, #0
   14d90:	bl	11230 <dcgettext@plt>
   14d94:	mov	r5, r0
   14d98:	movw	r3, #57832	; 0xe1e8
   14d9c:	movt	r3, #2
   14da0:	ldr	r1, [r3, #520]	; 0x208
   14da4:	mov	r0, #4
   14da8:	bl	19338 <__assert_fail@plt+0x7e5c>
   14dac:	mov	r3, r0
   14db0:	mov	r2, r5
   14db4:	mov	r1, r4
   14db8:	mov	r0, #1
   14dbc:	bl	11d04 <__assert_fail@plt+0x828>
   14dc0:	mov	r4, #1
   14dc4:	bl	12c18 <__assert_fail@plt+0x173c>
   14dc8:	mov	r2, r8
   14dcc:	mov	r3, r9
   14dd0:	mov	r0, r4
   14dd4:	bl	1120c <ftruncate64@plt>
   14dd8:	cmp	r0, #0
   14ddc:	bge	14e60 <__assert_fail@plt+0x3984>
   14de0:	ldr	r3, [sl]
   14de4:	cmp	r3, #4
   14de8:	beq	14dc4 <__assert_fail@plt+0x38e8>
   14dec:	ldr	r4, [sl]
   14df0:	add	r1, sp, #136	; 0x88
   14df4:	mov	r0, #1
   14df8:	bl	12d20 <__assert_fail@plt+0x1844>
   14dfc:	cmp	r0, #0
   14e00:	bne	14e6c <__assert_fail@plt+0x3990>
   14e04:	ldr	r3, [sp, #152]	; 0x98
   14e08:	and	r3, r3, #61440	; 0xf000
   14e0c:	sub	r3, r3, #16384	; 0x4000
   14e10:	bics	r3, r3, #16384	; 0x4000
   14e14:	bne	149f8 <__assert_fail@plt+0x351c>
   14e18:	mov	r2, #5
   14e1c:	movw	r1, #53732	; 0xd1e4
   14e20:	movt	r1, #1
   14e24:	mov	r0, #0
   14e28:	bl	11230 <dcgettext@plt>
   14e2c:	mov	r5, r0
   14e30:	movw	r3, #57832	; 0xe1e8
   14e34:	movt	r3, #2
   14e38:	ldr	r1, [r3, #520]	; 0x208
   14e3c:	mov	r0, #4
   14e40:	bl	19338 <__assert_fail@plt+0x7e5c>
   14e44:	str	r0, [sp, #8]
   14e48:	strd	r8, [sp]
   14e4c:	mov	r2, r5
   14e50:	mov	r1, r4
   14e54:	mov	r0, #0
   14e58:	bl	11d04 <__assert_fail@plt+0x828>
   14e5c:	b	149f8 <__assert_fail@plt+0x351c>
   14e60:	cmp	r0, #0
   14e64:	beq	149f8 <__assert_fail@plt+0x351c>
   14e68:	b	14dec <__assert_fail@plt+0x3910>
   14e6c:	ldr	r4, [sl]
   14e70:	mov	r2, #5
   14e74:	movw	r1, #53028	; 0xcf24
   14e78:	movt	r1, #1
   14e7c:	mov	r0, #0
   14e80:	bl	11230 <dcgettext@plt>
   14e84:	mov	r5, r0
   14e88:	movw	r3, #57832	; 0xe1e8
   14e8c:	movt	r3, #2
   14e90:	ldr	r1, [r3, #520]	; 0x208
   14e94:	mov	r0, #4
   14e98:	bl	19338 <__assert_fail@plt+0x7e5c>
   14e9c:	mov	r3, r0
   14ea0:	mov	r2, r5
   14ea4:	mov	r1, r4
   14ea8:	mov	r0, #0
   14eac:	bl	11d04 <__assert_fail@plt+0x828>
   14eb0:	b	149f8 <__assert_fail@plt+0x351c>
   14eb4:	movw	r1, #57832	; 0xe1e8
   14eb8:	movt	r1, #2
   14ebc:	ldr	ip, [r1, #292]	; 0x124
   14ec0:	mov	r6, ip
   14ec4:	asr	r7, ip, #31
   14ec8:	mov	lr, #0
   14ecc:	cmp	r3, r2, asr #31
   14ed0:	bne	14ff0 <__assert_fail@plt+0x3b14>
   14ed4:	smull	r4, r5, r2, ip
   14ed8:	mov	r0, r4
   14edc:	mov	r4, r5
   14ee0:	mov	r8, r0
   14ee4:	mov	r9, r4
   14ee8:	cmp	lr, #0
   14eec:	movne	r6, #1
   14ef0:	beq	14a60 <__assert_fail@plt+0x3584>
   14ef4:	movw	r1, #57832	; 0xe1e8
   14ef8:	movt	r1, #2
   14efc:	ldr	r4, [r1, #272]	; 0x110
   14f00:	ldr	r5, [r1, #276]	; 0x114
   14f04:	add	r0, r1, #576	; 0x240
   14f08:	str	r0, [sp, #4]
   14f0c:	str	ip, [sp]
   14f10:	ldr	r1, [r1, #524]	; 0x20c
   14f14:	mov	r0, #0
   14f18:	bl	138c4 <__assert_fail@plt+0x23e8>
   14f1c:	orrs	r3, r0, r1
   14f20:	bne	14f60 <__assert_fail@plt+0x3a84>
   14f24:	ldr	r3, [pc, #-440]	; 14d74 <__assert_fail@plt+0x3898>
   14f28:	ldrd	r2, [r3]
   14f2c:	cmp	r2, #0
   14f30:	sbcs	r1, r3, #0
   14f34:	blt	14f74 <__assert_fail@plt+0x3a98>
   14f38:	cmp	r6, #0
   14f3c:	bne	14f60 <__assert_fail@plt+0x3a84>
   14f40:	subs	r1, r2, r4
   14f44:	str	r1, [sp, #120]	; 0x78
   14f48:	sbc	r3, r3, r5
   14f4c:	str	r3, [sp, #124]	; 0x7c
   14f50:	ldrd	r2, [sp, #120]	; 0x78
   14f54:	cmp	r3, r9
   14f58:	cmpeq	r2, r8
   14f5c:	beq	14f74 <__assert_fail@plt+0x3a98>
   14f60:	movw	r3, #57680	; 0xe150
   14f64:	movt	r3, #2
   14f68:	ldr	r3, [r3, #24]
   14f6c:	cmp	r3, #1
   14f70:	bne	15054 <__assert_fail@plt+0x3b78>
   14f74:	movw	r1, #57832	; 0xe1e8
   14f78:	movt	r1, #2
   14f7c:	ldr	r2, [r1, #584]	; 0x248
   14f80:	ldr	r3, [r1, #588]	; 0x24c
   14f84:	ldr	ip, [r1, #592]	; 0x250
   14f88:	ldr	lr, [r1, #596]	; 0x254
   14f8c:	orr	r0, r2, ip
   14f90:	orr	r1, r3, lr
   14f94:	orrs	r1, r0, r1
   14f98:	beq	150c8 <__assert_fail@plt+0x3bec>
   14f9c:	str	ip, [sp, #136]	; 0x88
   14fa0:	movw	r1, #57832	; 0xe1e8
   14fa4:	movt	r1, #2
   14fa8:	add	r0, sp, #136	; 0x88
   14fac:	str	r0, [sp, #4]
   14fb0:	ldr	r0, [r1, #304]	; 0x130
   14fb4:	str	r0, [sp]
   14fb8:	ldr	r1, [r1, #520]	; 0x208
   14fbc:	mov	r0, #1
   14fc0:	bl	138c4 <__assert_fail@plt+0x23e8>
   14fc4:	mov	r4, r0
   14fc8:	mov	r5, r1
   14fcc:	orrs	r3, r4, r5
   14fd0:	bne	15dc4 <__assert_fail@plt+0x48e8>
   14fd4:	ldr	r2, [sp, #136]	; 0x88
   14fd8:	cmp	r2, #0
   14fdc:	beq	150c8 <__assert_fail@plt+0x3bec>
   14fe0:	movw	r3, #57832	; 0xe1e8
   14fe4:	movt	r3, #2
   14fe8:	ldr	r0, [r3, #300]	; 0x12c
   14fec:	b	15dd4 <__assert_fail@plt+0x48f8>
   14ff0:	mov	fp, ip
   14ff4:	umull	r8, r9, r2, ip
   14ff8:	umull	r0, r1, ip, r3
   14ffc:	cmp	r3, #0
   15000:	bge	15010 <__assert_fail@plt+0x3b34>
   15004:	mov	r4, #0
   15008:	subs	r0, r0, r4
   1500c:	sbc	r1, r1, ip
   15010:	cmp	fp, #0
   15014:	bge	15020 <__assert_fail@plt+0x3b44>
   15018:	subs	r0, r0, r2
   1501c:	sbc	r1, r1, r3
   15020:	mov	r5, #0
   15024:	adds	r4, r0, r9
   15028:	adc	r5, r1, r5
   1502c:	cmp	r5, r4, asr #31
   15030:	bne	1503c <__assert_fail@plt+0x3b60>
   15034:	mov	r0, r8
   15038:	b	14ee0 <__assert_fail@plt+0x3a04>
   1503c:	mul	lr, r2, r7
   15040:	mla	lr, r6, r3, lr
   15044:	umull	r0, r1, r2, r6
   15048:	add	r4, lr, r1
   1504c:	mov	lr, #1
   15050:	b	14ee0 <__assert_fail@plt+0x3a04>
   15054:	mov	r2, #5
   15058:	movw	r1, #53784	; 0xd218
   1505c:	movt	r1, #1
   15060:	mov	r0, #0
   15064:	bl	11230 <dcgettext@plt>
   15068:	mov	r4, r0
   1506c:	movw	r3, #57832	; 0xe1e8
   15070:	movt	r3, #2
   15074:	ldr	r2, [r3, #524]	; 0x20c
   15078:	mov	r1, #3
   1507c:	mov	r0, #0
   15080:	bl	1945c <__assert_fail@plt+0x7f80>
   15084:	mov	r3, r0
   15088:	mov	r2, r4
   1508c:	mov	r1, #0
   15090:	mov	r0, r1
   15094:	bl	11d04 <__assert_fail@plt+0x828>
   15098:	b	14f74 <__assert_fail@plt+0x3a98>
   1509c:	ldr	r4, [sp, #136]	; 0x88
   150a0:	movw	r3, #57832	; 0xe1e8
   150a4:	movt	r3, #2
   150a8:	mov	r2, r4
   150ac:	ldr	r1, [r3, #300]	; 0x12c
   150b0:	mov	r0, #1
   150b4:	bl	132e0 <__assert_fail@plt+0x1e04>
   150b8:	cmp	r0, r4
   150bc:	moveq	r3, #0
   150c0:	streq	r3, [sp, #136]	; 0x88
   150c4:	bne	1514c <__assert_fail@plt+0x3c70>
   150c8:	movw	r3, #57680	; 0xe150
   150cc:	movt	r3, #2
   150d0:	ldrd	r2, [r3, #32]
   150d4:	orrs	r3, r2, r3
   150d8:	bne	150f4 <__assert_fail@plt+0x3c18>
   150dc:	movw	r3, #57832	; 0xe1e8
   150e0:	movt	r3, #2
   150e4:	ldr	r3, [r3, #580]	; 0x244
   150e8:	str	r3, [sp, #40]	; 0x28
   150ec:	cmp	r3, #0
   150f0:	beq	15758 <__assert_fail@plt+0x427c>
   150f4:	bl	120e0 <__assert_fail@plt+0xc04>
   150f8:	bl	12190 <__assert_fail@plt+0xcb4>
   150fc:	ldr	fp, [sp, #48]	; 0x30
   15100:	str	fp, [sp, #40]	; 0x28
   15104:	mvn	r3, #0
   15108:	str	r3, [sp, #56]	; 0x38
   1510c:	movw	r5, #57680	; 0xe150
   15110:	movt	r5, #2
   15114:	movw	r4, #57832	; 0xe1e8
   15118:	movt	r4, #2
   1511c:	add	r3, r4, #608	; 0x260
   15120:	str	r3, [sp, #72]	; 0x48
   15124:	mov	r3, #51712	; 0xca00
   15128:	movt	r3, #15258	; 0x3b9a
   1512c:	str	r3, [sp, #84]	; 0x54
   15130:	movw	r3, #53060	; 0xcf44
   15134:	movt	r3, #1
   15138:	str	r3, [sp, #64]	; 0x40
   1513c:	movw	r3, #53908	; 0xd294
   15140:	movt	r3, #1
   15144:	str	r3, [sp, #104]	; 0x68
   15148:	b	15474 <__assert_fail@plt+0x3f98>
   1514c:	ldr	r4, [sl]
   15150:	mov	r2, #5
   15154:	movw	r1, #53012	; 0xcf14
   15158:	movt	r1, #1
   1515c:	mov	r0, #0
   15160:	bl	11230 <dcgettext@plt>
   15164:	mov	r5, r0
   15168:	movw	r3, #57832	; 0xe1e8
   1516c:	movt	r3, #2
   15170:	ldr	r1, [r3, #520]	; 0x208
   15174:	mov	r0, #4
   15178:	bl	19338 <__assert_fail@plt+0x7e5c>
   1517c:	mov	r3, r0
   15180:	mov	r2, r5
   15184:	mov	r1, r4
   15188:	mov	r0, #0
   1518c:	bl	11d04 <__assert_fail@plt+0x828>
   15190:	bl	13538 <__assert_fail@plt+0x205c>
   15194:	mov	r0, #1
   15198:	bl	11374 <exit@plt>
   1519c:	ldr	r3, [sp, #136]	; 0x88
   151a0:	cmp	r3, #0
   151a4:	beq	150c8 <__assert_fail@plt+0x3bec>
   151a8:	orrs	r3, r4, r5
   151ac:	beq	1509c <__assert_fail@plt+0x3bc0>
   151b0:	ldr	r6, [r7, #304]	; 0x130
   151b4:	mov	r2, r6
   151b8:	ldr	r1, [r7, #300]	; 0x12c
   151bc:	mov	r0, r8
   151c0:	bl	132e0 <__assert_fail@plt+0x1e04>
   151c4:	cmp	r6, r0
   151c8:	bne	1514c <__assert_fail@plt+0x3c70>
   151cc:	subs	r4, r4, #1
   151d0:	sbc	r5, r5, #0
   151d4:	orrs	r3, r4, r5
   151d8:	bne	151a8 <__assert_fail@plt+0x3ccc>
   151dc:	b	1519c <__assert_fail@plt+0x3cc0>
   151e0:	bl	16548 <__assert_fail@plt+0x506c>
   151e4:	ldr	r3, [sp, #72]	; 0x48
   151e8:	ldrd	r2, [r3]
   151ec:	cmp	r0, r2
   151f0:	sbcs	r3, r1, r3
   151f4:	blt	15480 <__assert_fail@plt+0x3fa4>
   151f8:	bl	1264c <__assert_fail@plt+0x1170>
   151fc:	ldr	r1, [sp, #72]	; 0x48
   15200:	ldr	r3, [r1]
   15204:	ldr	r2, [r1, #4]
   15208:	ldr	r0, [sp, #84]	; 0x54
   1520c:	adds	r3, r3, r0
   15210:	adc	r2, r2, #0
   15214:	str	r3, [r1]
   15218:	str	r2, [r1, #4]
   1521c:	b	15480 <__assert_fail@plt+0x3fa4>
   15220:	ands	r1, r1, #24
   15224:	ldr	r2, [r4, #292]	; 0x124
   15228:	movne	r1, #32
   1522c:	ldr	r0, [r4, #284]	; 0x11c
   15230:	bl	113d4 <memset@plt>
   15234:	b	154d8 <__assert_fail@plt+0x3ffc>
   15238:	asr	r7, r0, #31
   1523c:	mov	r1, r7
   15240:	bl	11678 <__assert_fail@plt+0x19c>
   15244:	ldrb	r3, [r4, #600]	; 0x258
   15248:	cmp	r3, #0
   1524c:	bne	152b8 <__assert_fail@plt+0x3ddc>
   15250:	ldr	r2, [r4, #292]	; 0x124
   15254:	cmp	r8, r2
   15258:	bge	15670 <__assert_fail@plt+0x4194>
   1525c:	add	r1, r4, #368	; 0x170
   15260:	ldr	r3, [r4, #368]	; 0x170
   15264:	ldr	r0, [r4, #372]	; 0x174
   15268:	adds	r3, r3, #1
   1526c:	adc	r0, r0, #0
   15270:	str	r3, [r4, #368]	; 0x170
   15274:	str	r0, [r4, #372]	; 0x174
   15278:	ldr	r3, [r4, #288]	; 0x120
   1527c:	tst	r3, #1024	; 0x400
   15280:	moveq	fp, r8
   15284:	beq	1568c <__assert_fail@plt+0x41b0>
   15288:	tst	r3, #256	; 0x100
   1528c:	bne	152ac <__assert_fail@plt+0x3dd0>
   15290:	ldr	r0, [r4, #284]	; 0x11c
   15294:	ands	r3, r3, #24
   15298:	sub	r2, r2, r8
   1529c:	moveq	r1, r3
   152a0:	movne	r1, #32
   152a4:	add	r0, r0, r8
   152a8:	bl	113d4 <memset@plt>
   152ac:	mov	fp, r8
   152b0:	ldr	r8, [r4, #292]	; 0x124
   152b4:	b	1568c <__assert_fail@plt+0x41b0>
   152b8:	mov	r2, r8
   152bc:	mov	r3, r7
   152c0:	mov	r0, #0
   152c4:	bl	1238c <__assert_fail@plt+0xeb0>
   152c8:	b	15250 <__assert_fail@plt+0x3d74>
   152cc:	movw	r3, #57832	; 0xe1e8
   152d0:	movt	r3, #2
   152d4:	ldrb	r2, [r3, #328]	; 0x148
   152d8:	ldrb	r1, [r3, #600]	; 0x258
   152dc:	orr	r2, r2, r1
   152e0:	strb	r2, [r3, #328]	; 0x148
   152e4:	ldrb	r2, [r3, #329]	; 0x149
   152e8:	ldrb	r3, [r3, #545]	; 0x221
   152ec:	cmp	r3, #0
   152f0:	beq	1530c <__assert_fail@plt+0x3e30>
   152f4:	movw	r3, #57832	; 0xe1e8
   152f8:	movt	r3, #2
   152fc:	ldr	r3, [r3, #288]	; 0x120
   15300:	tst	r3, #512	; 0x200
   15304:	moveq	r8, #1
   15308:	movne	r8, #0
   1530c:	movw	r3, #57832	; 0xe1e8
   15310:	movt	r3, #2
   15314:	orrs	r2, r2, r8
   15318:	movne	r2, #1
   1531c:	moveq	r2, #0
   15320:	strb	r2, [r3, #329]	; 0x149
   15324:	ldr	r3, [sp, #56]	; 0x38
   15328:	cmp	r3, #0
   1532c:	blt	15970 <__assert_fail@plt+0x4494>
   15330:	uxtb	r3, r3
   15334:	strb	r3, [sp, #136]	; 0x88
   15338:	movw	r2, #57832	; 0xe1e8
   1533c:	movt	r2, #2
   15340:	ldr	r2, [r2, #288]	; 0x120
   15344:	tst	r2, #8
   15348:	bne	15964 <__assert_fail@plt+0x4488>
   1534c:	tst	r2, #16
   15350:	bne	159c0 <__assert_fail@plt+0x44e4>
   15354:	movw	r2, #57832	; 0xe1e8
   15358:	movt	r2, #2
   1535c:	ldr	ip, [r2, #300]	; 0x12c
   15360:	ldr	r0, [r2, #548]	; 0x224
   15364:	add	r1, r0, #1
   15368:	str	r1, [r2, #548]	; 0x224
   1536c:	strb	r3, [ip, r0]
   15370:	ldr	r3, [r2, #304]	; 0x130
   15374:	cmp	r1, r3
   15378:	blt	15970 <__assert_fail@plt+0x4494>
   1537c:	bl	13558 <__assert_fail@plt+0x207c>
   15380:	b	15970 <__assert_fail@plt+0x4494>
   15384:	ldr	r6, [sl]
   15388:	mov	r2, #5
   1538c:	movw	r1, #53076	; 0xcf54
   15390:	movt	r1, #1
   15394:	mov	r0, #0
   15398:	bl	11230 <dcgettext@plt>
   1539c:	mov	r7, r0
   153a0:	ldr	r1, [r4, #524]	; 0x20c
   153a4:	mov	r0, #4
   153a8:	bl	19338 <__assert_fail@plt+0x7e5c>
   153ac:	mov	r3, r0
   153b0:	mov	r2, r7
   153b4:	mov	r1, r6
   153b8:	mov	r0, #0
   153bc:	bl	11d04 <__assert_fail@plt+0x828>
   153c0:	ldr	r3, [r4, #288]	; 0x120
   153c4:	tst	r3, #256	; 0x100
   153c8:	beq	15958 <__assert_fail@plt+0x447c>
   153cc:	bl	12a7c <__assert_fail@plt+0x15a0>
   153d0:	ldr	r6, [r4, #292]	; 0x124
   153d4:	sub	r6, r6, fp
   153d8:	asr	r7, r6, #31
   153dc:	mov	r2, r6
   153e0:	mov	r3, r7
   153e4:	mov	r0, #0
   153e8:	bl	1238c <__assert_fail@plt+0xeb0>
   153ec:	ldrb	r3, [r4, #330]	; 0x14a
   153f0:	cmp	r3, #0
   153f4:	bne	1552c <__assert_fail@plt+0x4050>
   153f8:	ldr	r3, [r4, #604]	; 0x25c
   153fc:	cmp	r3, #29
   15400:	strne	r3, [sl]
   15404:	beq	1545c <__assert_fail@plt+0x3f80>
   15408:	ldr	r6, [sl]
   1540c:	mov	r2, #5
   15410:	ldr	r1, [sp, #64]	; 0x40
   15414:	mov	r0, #0
   15418:	bl	11230 <dcgettext@plt>
   1541c:	mov	r7, r0
   15420:	ldr	r2, [r4, #524]	; 0x20c
   15424:	mov	r1, #3
   15428:	mov	r0, #0
   1542c:	bl	1945c <__assert_fail@plt+0x7f80>
   15430:	mov	r3, r0
   15434:	mov	r2, r7
   15438:	mov	r1, r6
   1543c:	mov	r0, #0
   15440:	bl	11d04 <__assert_fail@plt+0x828>
   15444:	mov	r3, #0
   15448:	strb	r3, [r4, #330]	; 0x14a
   1544c:	mov	r3, #29
   15450:	str	r3, [r4, #604]	; 0x25c
   15454:	mov	r3, #1
   15458:	str	r3, [sp, #40]	; 0x28
   1545c:	ldr	r3, [r4, #288]	; 0x120
   15460:	ubfx	r3, r3, #10, #1
   15464:	cmp	fp, #0
   15468:	movne	r3, #0
   1546c:	cmp	r3, #0
   15470:	bne	15668 <__assert_fail@plt+0x418c>
   15474:	ldr	r3, [r5, #24]
   15478:	cmp	r3, #4
   1547c:	beq	151e0 <__assert_fail@plt+0x3d04>
   15480:	ldr	r3, [r4, #368]	; 0x170
   15484:	ldr	r0, [r4, #372]	; 0x174
   15488:	ldr	r2, [r4, #376]	; 0x178
   1548c:	ldr	r1, [r4, #380]	; 0x17c
   15490:	adds	r3, r3, r2
   15494:	str	r3, [sp, #32]
   15498:	adc	r3, r0, r1
   1549c:	str	r3, [sp, #36]	; 0x24
   154a0:	ldr	r8, [r4, #580]	; 0x244
   154a4:	ldrd	r6, [r5, #32]
   154a8:	adds	r1, r8, #0
   154ac:	movne	r1, #1
   154b0:	adds	r2, r6, r1
   154b4:	adc	r3, r7, #0
   154b8:	ldrd	r0, [sp, #32]
   154bc:	cmp	r0, r2
   154c0:	sbcs	r3, r1, r3
   154c4:	bge	15324 <__assert_fail@plt+0x3e48>
   154c8:	ldr	r1, [r4, #288]	; 0x120
   154cc:	and	r3, r1, #1280	; 0x500
   154d0:	cmp	r3, #1280	; 0x500
   154d4:	beq	15220 <__assert_fail@plt+0x3d44>
   154d8:	ldrd	r2, [sp, #32]
   154dc:	cmp	r2, r6
   154e0:	sbcs	r3, r3, r7
   154e4:	ldr	r3, [r4, #564]	; 0x234
   154e8:	movge	r2, r8
   154ec:	ldrlt	r2, [r4, #292]	; 0x124
   154f0:	ldr	r1, [r4, #284]	; 0x11c
   154f4:	mov	r0, #0
   154f8:	blx	r3
   154fc:	mov	r8, r0
   15500:	cmp	r0, #0
   15504:	bgt	15238 <__assert_fail@plt+0x3d5c>
   15508:	cmp	r0, #0
   1550c:	beq	152cc <__assert_fail@plt+0x3df0>
   15510:	ldr	r3, [r4, #288]	; 0x120
   15514:	tst	r3, #256	; 0x100
   15518:	beq	15384 <__assert_fail@plt+0x3ea8>
   1551c:	ldr	r3, [r5, #24]
   15520:	cmp	r3, #1
   15524:	bne	15384 <__assert_fail@plt+0x3ea8>
   15528:	b	153cc <__assert_fail@plt+0x3ef0>
   1552c:	mov	r0, r6
   15530:	mov	r1, r7
   15534:	bl	11678 <__assert_fail@plt+0x19c>
   15538:	add	r3, r4, #272	; 0x110
   1553c:	ldrd	r8, [r3]
   15540:	cmp	r8, #0
   15544:	sbcs	r3, r9, #0
   15548:	blt	15604 <__assert_fail@plt+0x4128>
   1554c:	mov	r3, #1
   15550:	str	r3, [sp]
   15554:	mov	r2, #0
   15558:	mov	r3, #0
   1555c:	mov	r0, #0
   15560:	bl	112a8 <lseek64@plt>
   15564:	cmp	r0, #0
   15568:	sbcs	r3, r1, #0
   1556c:	blt	15408 <__assert_fail@plt+0x3f2c>
   15570:	cmp	r9, r1
   15574:	cmpeq	r8, r0
   15578:	beq	1545c <__assert_fail@plt+0x3f80>
   1557c:	subs	r3, r8, r0
   15580:	str	r3, [sp, #96]	; 0x60
   15584:	sbc	r3, r9, r1
   15588:	str	r3, [sp, #100]	; 0x64
   1558c:	ldrd	r0, [sp, #96]	; 0x60
   15590:	cmp	r6, r0
   15594:	sbcs	r3, r7, r1
   15598:	movlt	r3, #1
   1559c:	movge	r3, #0
   155a0:	orrs	r3, r3, r1, lsr #31
   155a4:	beq	155b4 <__assert_fail@plt+0x40d8>
   155a8:	ldr	r3, [r5, #24]
   155ac:	cmp	r3, #1
   155b0:	bne	15640 <__assert_fail@plt+0x4164>
   155b4:	mov	r3, #1
   155b8:	str	r3, [sp]
   155bc:	ldrd	r2, [sp, #96]	; 0x60
   155c0:	mov	r0, #0
   155c4:	bl	112a8 <lseek64@plt>
   155c8:	cmp	r0, #0
   155cc:	sbcs	r3, r1, #0
   155d0:	bge	1545c <__assert_fail@plt+0x3f80>
   155d4:	ldr	r3, [sl]
   155d8:	cmp	r3, #0
   155dc:	bne	15408 <__assert_fail@plt+0x3f2c>
   155e0:	mov	r2, #5
   155e4:	ldr	r1, [sp, #104]	; 0x68
   155e8:	mov	r0, #0
   155ec:	bl	11230 <dcgettext@plt>
   155f0:	mov	r2, r0
   155f4:	mov	r1, #0
   155f8:	mov	r0, r1
   155fc:	bl	11d04 <__assert_fail@plt+0x828>
   15600:	b	15408 <__assert_fail@plt+0x3f2c>
   15604:	mov	r2, #5
   15608:	movw	r1, #53820	; 0xd23c
   1560c:	movt	r1, #1
   15610:	mov	r0, #0
   15614:	bl	11230 <dcgettext@plt>
   15618:	mov	r6, r0
   1561c:	ldr	r1, [r4, #524]	; 0x20c
   15620:	mov	r0, #4
   15624:	bl	19338 <__assert_fail@plt+0x7e5c>
   15628:	mov	r3, r0
   1562c:	mov	r2, r6
   15630:	mov	r1, #0
   15634:	mov	r0, r1
   15638:	bl	11d04 <__assert_fail@plt+0x828>
   1563c:	b	15444 <__assert_fail@plt+0x3f68>
   15640:	mov	r2, #5
   15644:	movw	r1, #53860	; 0xd264
   15648:	movt	r1, #1
   1564c:	mov	r0, #0
   15650:	bl	11230 <dcgettext@plt>
   15654:	mov	r2, r0
   15658:	mov	r1, #0
   1565c:	mov	r0, r1
   15660:	bl	11d04 <__assert_fail@plt+0x828>
   15664:	b	155b4 <__assert_fail@plt+0x40d8>
   15668:	ldr	r8, [sp, #48]	; 0x30
   1566c:	b	15250 <__assert_fail@plt+0x3d74>
   15670:	ldr	r3, [r4, #376]	; 0x178
   15674:	ldr	r1, [r4, #380]	; 0x17c
   15678:	adds	r3, r3, #1
   1567c:	adc	r1, r1, #0
   15680:	str	r3, [r4, #376]	; 0x178
   15684:	str	r1, [r4, #380]	; 0x17c
   15688:	ldr	fp, [sp, #48]	; 0x30
   1568c:	ldr	r9, [r4, #284]	; 0x11c
   15690:	ldr	r1, [r4, #300]	; 0x12c
   15694:	cmp	r9, r1
   15698:	beq	156e4 <__assert_fail@plt+0x4208>
   1569c:	ldrb	r3, [r4, #256]	; 0x100
   156a0:	cmp	r3, #0
   156a4:	bne	15868 <__assert_fail@plt+0x438c>
   156a8:	ldr	r2, [r4, #288]	; 0x120
   156ac:	eor	r3, r2, #128	; 0x80
   156b0:	ubfx	r3, r3, #7, #1
   156b4:	cmp	r8, #0
   156b8:	moveq	r3, #1
   156bc:	cmp	r3, #0
   156c0:	beq	15890 <__assert_fail@plt+0x43b4>
   156c4:	tst	r2, #8
   156c8:	bne	158f4 <__assert_fail@plt+0x4418>
   156cc:	tst	r2, #16
   156d0:	beq	1590c <__assert_fail@plt+0x4430>
   156d4:	mov	r1, r8
   156d8:	mov	r0, r9
   156dc:	bl	13784 <__assert_fail@plt+0x22a8>
   156e0:	b	15474 <__assert_fail@plt+0x3f98>
   156e4:	mov	r2, r8
   156e8:	mov	r0, #1
   156ec:	bl	132e0 <__assert_fail@plt+0x1e04>
   156f0:	add	r1, r4, #336	; 0x150
   156f4:	ldrd	r2, [r1]
   156f8:	adds	r6, r2, r0
   156fc:	adc	r7, r3, r0, asr #31
   15700:	strd	r6, [r1]
   15704:	cmp	r0, r8
   15708:	beq	15824 <__assert_fail@plt+0x4348>
   1570c:	ldr	r4, [sl]
   15710:	mov	r2, #5
   15714:	movw	r1, #53948	; 0xd2bc
   15718:	movt	r1, #1
   1571c:	mov	r0, #0
   15720:	bl	11230 <dcgettext@plt>
   15724:	mov	r5, r0
   15728:	movw	r3, #57832	; 0xe1e8
   1572c:	movt	r3, #2
   15730:	ldr	r1, [r3, #520]	; 0x208
   15734:	mov	r0, #4
   15738:	bl	19338 <__assert_fail@plt+0x7e5c>
   1573c:	mov	r3, r0
   15740:	mov	r2, r5
   15744:	mov	r1, r4
   15748:	mov	r0, #0
   1574c:	bl	11d04 <__assert_fail@plt+0x828>
   15750:	mov	r3, #1
   15754:	str	r3, [sp, #40]	; 0x28
   15758:	bl	12e78 <__assert_fail@plt+0x199c>
   1575c:	ldr	r3, [sp, #40]	; 0x28
   15760:	cmp	r0, #0
   15764:	movne	r3, r0
   15768:	str	r3, [sp, #40]	; 0x28
   1576c:	movw	r3, #57680	; 0xe150
   15770:	movt	r3, #2
   15774:	ldrd	r2, [r3, #32]
   15778:	orrs	r3, r2, r3
   1577c:	bne	15d40 <__assert_fail@plt+0x4864>
   15780:	movw	r3, #57832	; 0xe1e8
   15784:	movt	r3, #2
   15788:	ldr	r3, [r3, #580]	; 0x244
   1578c:	cmp	r3, #0
   15790:	bne	15d40 <__assert_fail@plt+0x4864>
   15794:	movw	r3, #57832	; 0xe1e8
   15798:	movt	r3, #2
   1579c:	ldrb	r3, [r3, #600]	; 0x258
   157a0:	cmp	r3, #0
   157a4:	bne	15cd8 <__assert_fail@plt+0x47fc>
   157a8:	movw	r3, #57832	; 0xe1e8
   157ac:	movt	r3, #2
   157b0:	ldrb	r3, [r3, #545]	; 0x221
   157b4:	cmp	r3, #0
   157b8:	beq	15db0 <__assert_fail@plt+0x48d4>
   157bc:	mov	r2, #0
   157c0:	mov	r3, #0
   157c4:	mov	r0, #1
   157c8:	bl	1238c <__assert_fail@plt+0xeb0>
   157cc:	cmp	r0, #0
   157d0:	bne	15db0 <__assert_fail@plt+0x48d4>
   157d4:	ldr	r4, [sl]
   157d8:	mov	r2, #5
   157dc:	movw	r1, #53968	; 0xd2d0
   157e0:	movt	r1, #1
   157e4:	bl	11230 <dcgettext@plt>
   157e8:	mov	r5, r0
   157ec:	movw	r3, #57832	; 0xe1e8
   157f0:	movt	r3, #2
   157f4:	ldr	r2, [r3, #520]	; 0x208
   157f8:	mov	r1, #3
   157fc:	mov	r0, #0
   15800:	bl	1945c <__assert_fail@plt+0x7f80>
   15804:	mov	r3, r0
   15808:	mov	r2, r5
   1580c:	mov	r1, r4
   15810:	mov	r0, #0
   15814:	bl	11d04 <__assert_fail@plt+0x828>
   15818:	mov	r3, #1
   1581c:	str	r3, [sp, #40]	; 0x28
   15820:	b	15db0 <__assert_fail@plt+0x48d4>
   15824:	ldr	r3, [r4, #292]	; 0x124
   15828:	cmp	r3, r8
   1582c:	beq	1584c <__assert_fail@plt+0x4370>
   15830:	ldr	r3, [r4, #352]	; 0x160
   15834:	ldr	r1, [r4, #356]	; 0x164
   15838:	adds	r3, r3, #1
   1583c:	adc	r1, r1, #0
   15840:	str	r3, [r4, #352]	; 0x160
   15844:	str	r1, [r4, #356]	; 0x164
   15848:	b	15474 <__assert_fail@plt+0x3f98>
   1584c:	ldr	r3, [r4, #360]	; 0x168
   15850:	ldr	r1, [r4, #364]	; 0x16c
   15854:	adds	r3, r3, #1
   15858:	adc	r1, r1, #0
   1585c:	str	r3, [r4, #360]	; 0x168
   15860:	str	r1, [r4, #364]	; 0x16c
   15864:	b	15474 <__assert_fail@plt+0x3f98>
   15868:	cmp	r8, #0
   1586c:	beq	15dbc <__assert_fail@plt+0x48e0>
   15870:	add	r1, r9, r8
   15874:	mov	r3, r9
   15878:	ldrb	r2, [r3]
   1587c:	ldrb	r2, [r4, r2]
   15880:	strb	r2, [r3], #1
   15884:	cmp	r3, r1
   15888:	bne	15878 <__assert_fail@plt+0x439c>
   1588c:	b	156a8 <__assert_fail@plt+0x41cc>
   15890:	ldr	r3, [sp, #56]	; 0x38
   15894:	mvn	r1, r3
   15898:	lsr	r1, r1, #31
   1589c:	and	r3, r8, #1
   158a0:	cmp	r1, r3
   158a4:	subne	r8, r8, #1
   158a8:	ldrbne	ip, [r9, r8]
   158ac:	mvneq	ip, #0
   158b0:	cmp	r8, #1
   158b4:	ble	158d4 <__assert_fail@plt+0x43f8>
   158b8:	mov	r3, r8
   158bc:	sub	r0, r9, #2
   158c0:	ldrb	r1, [r0, r3]
   158c4:	strb	r1, [r9, r3]
   158c8:	sub	r3, r3, #2
   158cc:	cmp	r3, #1
   158d0:	bgt	158c0 <__assert_fail@plt+0x43e4>
   158d4:	ldr	r3, [sp, #56]	; 0x38
   158d8:	cmp	r3, #0
   158dc:	addlt	r9, r9, #1
   158e0:	ldrge	r3, [sp, #56]	; 0x38
   158e4:	strbge	r3, [r9, #1]
   158e8:	addge	r8, r8, #1
   158ec:	str	ip, [sp, #56]	; 0x38
   158f0:	b	156c4 <__assert_fail@plt+0x41e8>
   158f4:	mov	r1, r8
   158f8:	mov	r0, r9
   158fc:	bl	1365c <__assert_fail@plt+0x2180>
   15900:	b	15474 <__assert_fail@plt+0x3f98>
   15904:	cmp	r8, #0
   15908:	beq	15474 <__assert_fail@plt+0x3f98>
   1590c:	ldr	r7, [r4, #548]	; 0x224
   15910:	ldr	r6, [r4, #304]	; 0x130
   15914:	sub	r6, r6, r7
   15918:	cmp	r6, r8
   1591c:	movge	r6, r8
   15920:	ldr	r0, [r4, #300]	; 0x12c
   15924:	mov	r2, r6
   15928:	mov	r1, r9
   1592c:	add	r0, r0, r7
   15930:	bl	111e8 <memcpy@plt>
   15934:	sub	r8, r8, r6
   15938:	add	r9, r9, r6
   1593c:	add	r6, r7, r6
   15940:	str	r6, [r4, #548]	; 0x224
   15944:	ldr	r3, [r4, #304]	; 0x130
   15948:	cmp	r6, r3
   1594c:	blt	15904 <__assert_fail@plt+0x4428>
   15950:	bl	13558 <__assert_fail@plt+0x207c>
   15954:	b	15904 <__assert_fail@plt+0x4428>
   15958:	mov	r3, #1
   1595c:	str	r3, [sp, #40]	; 0x28
   15960:	b	15324 <__assert_fail@plt+0x3e48>
   15964:	mov	r1, #1
   15968:	add	r0, sp, #136	; 0x88
   1596c:	bl	1365c <__assert_fail@plt+0x2180>
   15970:	movw	r3, #57832	; 0xe1e8
   15974:	movt	r3, #2
   15978:	ldr	r3, [r3, #288]	; 0x120
   1597c:	tst	r3, #8
   15980:	beq	15a0c <__assert_fail@plt+0x4530>
   15984:	movw	r3, #57832	; 0xe1e8
   15988:	movt	r3, #2
   1598c:	ldr	r5, [r3, #552]	; 0x228
   15990:	cmp	r5, #0
   15994:	ble	15a0c <__assert_fail@plt+0x4530>
   15998:	movw	r3, #57832	; 0xe1e8
   1599c:	movt	r3, #2
   159a0:	ldr	r3, [r3, #556]	; 0x22c
   159a4:	cmp	r5, r3
   159a8:	bge	15aac <__assert_fail@plt+0x45d0>
   159ac:	movw	r4, #57832	; 0xe1e8
   159b0:	movt	r4, #2
   159b4:	movw	r6, #57680	; 0xe150
   159b8:	movt	r6, #2
   159bc:	b	159e0 <__assert_fail@plt+0x4504>
   159c0:	mov	r1, #1
   159c4:	add	r0, sp, #136	; 0x88
   159c8:	bl	13784 <__assert_fail@plt+0x22a8>
   159cc:	b	15970 <__assert_fail@plt+0x4494>
   159d0:	add	r5, r5, #1
   159d4:	ldr	r3, [r4, #556]	; 0x22c
   159d8:	cmp	r5, r3
   159dc:	bge	15a0c <__assert_fail@plt+0x4530>
   159e0:	ldr	r1, [r4, #300]	; 0x12c
   159e4:	ldr	r2, [r4, #548]	; 0x224
   159e8:	add	r3, r2, #1
   159ec:	str	r3, [r4, #548]	; 0x224
   159f0:	ldrb	r0, [r6, #29]
   159f4:	strb	r0, [r1, r2]
   159f8:	ldr	r2, [r4, #304]	; 0x130
   159fc:	cmp	r3, r2
   15a00:	blt	159d0 <__assert_fail@plt+0x44f4>
   15a04:	bl	13558 <__assert_fail@plt+0x207c>
   15a08:	b	159d0 <__assert_fail@plt+0x44f4>
   15a0c:	movw	r3, #57832	; 0xe1e8
   15a10:	movt	r3, #2
   15a14:	ldr	r3, [r3, #552]	; 0x228
   15a18:	cmp	r3, #0
   15a1c:	bne	15aac <__assert_fail@plt+0x45d0>
   15a20:	movw	r3, #57832	; 0xe1e8
   15a24:	movt	r3, #2
   15a28:	ldr	r2, [r3, #548]	; 0x224
   15a2c:	cmp	r2, #0
   15a30:	bne	15afc <__assert_fail@plt+0x4620>
   15a34:	movw	r3, #57832	; 0xe1e8
   15a38:	movt	r3, #2
   15a3c:	ldrb	r3, [r3, #544]	; 0x220
   15a40:	cmp	r3, #0
   15a44:	bne	15ba8 <__assert_fail@plt+0x46cc>
   15a48:	movw	r3, #57832	; 0xe1e8
   15a4c:	movt	r3, #2
   15a50:	ldr	r3, [r3, #288]	; 0x120
   15a54:	tst	r3, #49152	; 0xc000
   15a58:	beq	15758 <__assert_fail@plt+0x427c>
   15a5c:	movw	r3, #57680	; 0xe150
   15a60:	movt	r3, #2
   15a64:	ldr	r3, [r3, #24]
   15a68:	cmp	r3, #4
   15a6c:	bne	15758 <__assert_fail@plt+0x427c>
   15a70:	movw	r3, #57680	; 0xe150
   15a74:	movt	r3, #2
   15a78:	ldrd	r2, [r3, #16]
   15a7c:	cmp	r2, #0
   15a80:	sbcs	r1, r3, #0
   15a84:	blt	15758 <__assert_fail@plt+0x427c>
   15a88:	ldr	r1, [pc, #-3352]	; 14d78 <__assert_fail@plt+0x389c>
   15a8c:	ldrd	r0, [r1]
   15a90:	cmp	r2, r0
   15a94:	sbcs	r3, r3, r1
   15a98:	bge	15758 <__assert_fail@plt+0x427c>
   15a9c:	mov	r0, #0
   15aa0:	mov	r1, #0
   15aa4:	bl	1264c <__assert_fail@plt+0x1170>
   15aa8:	b	15758 <__assert_fail@plt+0x427c>
   15aac:	movw	r3, #57832	; 0xe1e8
   15ab0:	movt	r3, #2
   15ab4:	ldr	r3, [r3, #288]	; 0x120
   15ab8:	tst	r3, #16
   15abc:	beq	15a20 <__assert_fail@plt+0x4544>
   15ac0:	movw	r3, #57832	; 0xe1e8
   15ac4:	movt	r3, #2
   15ac8:	ldr	ip, [r3, #300]	; 0x12c
   15acc:	ldr	r0, [r3, #548]	; 0x224
   15ad0:	add	r1, r0, #1
   15ad4:	str	r1, [r3, #548]	; 0x224
   15ad8:	movw	r2, #57680	; 0xe150
   15adc:	movt	r2, #2
   15ae0:	ldrb	r2, [r2, #28]
   15ae4:	strb	r2, [ip, r0]
   15ae8:	ldr	r3, [r3, #304]	; 0x130
   15aec:	cmp	r1, r3
   15af0:	blt	15a20 <__assert_fail@plt+0x4544>
   15af4:	bl	13558 <__assert_fail@plt+0x207c>
   15af8:	b	15a20 <__assert_fail@plt+0x4544>
   15afc:	mov	r4, r3
   15b00:	ldr	r1, [r3, #300]	; 0x12c
   15b04:	mov	r0, #1
   15b08:	bl	132e0 <__assert_fail@plt+0x1e04>
   15b0c:	add	r4, r4, #336	; 0x150
   15b10:	ldrd	r2, [r4]
   15b14:	adds	r6, r2, r0
   15b18:	adc	r7, r3, r0, asr #31
   15b1c:	strd	r6, [r4]
   15b20:	cmp	r0, #0
   15b24:	beq	15b44 <__assert_fail@plt+0x4668>
   15b28:	add	r2, r4, #16
   15b2c:	ldr	r3, [r2]
   15b30:	ldr	r1, [r2, #4]
   15b34:	adds	r3, r3, #1
   15b38:	adc	r1, r1, #0
   15b3c:	str	r3, [r2]
   15b40:	str	r1, [r2, #4]
   15b44:	movw	r3, #57832	; 0xe1e8
   15b48:	movt	r3, #2
   15b4c:	ldr	r3, [r3, #548]	; 0x224
   15b50:	cmp	r0, r3
   15b54:	beq	15a34 <__assert_fail@plt+0x4558>
   15b58:	ldr	r4, [sl]
   15b5c:	mov	r2, #5
   15b60:	movw	r1, #53948	; 0xd2bc
   15b64:	movt	r1, #1
   15b68:	mov	r0, #0
   15b6c:	bl	11230 <dcgettext@plt>
   15b70:	mov	r5, r0
   15b74:	movw	r3, #57832	; 0xe1e8
   15b78:	movt	r3, #2
   15b7c:	ldr	r1, [r3, #520]	; 0x208
   15b80:	mov	r0, #4
   15b84:	bl	19338 <__assert_fail@plt+0x7e5c>
   15b88:	mov	r3, r0
   15b8c:	mov	r2, r5
   15b90:	mov	r1, r4
   15b94:	mov	r0, #0
   15b98:	bl	11d04 <__assert_fail@plt+0x828>
   15b9c:	mov	r3, #1
   15ba0:	str	r3, [sp, #40]	; 0x28
   15ba4:	b	15758 <__assert_fail@plt+0x427c>
   15ba8:	add	r1, sp, #136	; 0x88
   15bac:	mov	r0, #1
   15bb0:	bl	12d20 <__assert_fail@plt+0x1844>
   15bb4:	cmp	r0, #0
   15bb8:	bne	15c7c <__assert_fail@plt+0x47a0>
   15bbc:	ldr	r3, [sp, #152]	; 0x98
   15bc0:	and	r3, r3, #61440	; 0xf000
   15bc4:	cmp	r3, #32768	; 0x8000
   15bc8:	bne	15a48 <__assert_fail@plt+0x456c>
   15bcc:	mov	r0, #1
   15bd0:	str	r0, [sp]
   15bd4:	mov	r2, #0
   15bd8:	mov	r3, #0
   15bdc:	bl	112a8 <lseek64@plt>
   15be0:	mov	r4, r0
   15be4:	mov	r5, r1
   15be8:	cmp	r0, #0
   15bec:	sbcs	r3, r1, #0
   15bf0:	blt	15a48 <__assert_fail@plt+0x456c>
   15bf4:	ldrd	r2, [sp, #184]	; 0xb8
   15bf8:	cmp	r2, r0
   15bfc:	sbcs	r3, r3, r1
   15c00:	bge	15a48 <__assert_fail@plt+0x456c>
   15c04:	mov	r6, #1
   15c08:	bl	12c18 <__assert_fail@plt+0x173c>
   15c0c:	mov	r2, r4
   15c10:	mov	r3, r5
   15c14:	mov	r0, r6
   15c18:	bl	1120c <ftruncate64@plt>
   15c1c:	cmp	r0, #0
   15c20:	bge	15ccc <__assert_fail@plt+0x47f0>
   15c24:	ldr	r3, [sl]
   15c28:	cmp	r3, #4
   15c2c:	beq	15c08 <__assert_fail@plt+0x472c>
   15c30:	ldr	r6, [sl]
   15c34:	mov	r2, #5
   15c38:	movw	r1, #53732	; 0xd1e4
   15c3c:	movt	r1, #1
   15c40:	mov	r0, #0
   15c44:	bl	11230 <dcgettext@plt>
   15c48:	mov	r7, r0
   15c4c:	movw	r3, #57832	; 0xe1e8
   15c50:	movt	r3, #2
   15c54:	ldr	r1, [r3, #520]	; 0x208
   15c58:	mov	r0, #4
   15c5c:	bl	19338 <__assert_fail@plt+0x7e5c>
   15c60:	str	r0, [sp, #8]
   15c64:	strd	r4, [sp]
   15c68:	mov	r2, r7
   15c6c:	mov	r1, r6
   15c70:	mov	r0, #0
   15c74:	bl	11d04 <__assert_fail@plt+0x828>
   15c78:	b	15cc0 <__assert_fail@plt+0x47e4>
   15c7c:	ldr	r4, [sl]
   15c80:	mov	r2, #5
   15c84:	movw	r1, #53028	; 0xcf24
   15c88:	movt	r1, #1
   15c8c:	mov	r0, #0
   15c90:	bl	11230 <dcgettext@plt>
   15c94:	mov	r5, r0
   15c98:	movw	r3, #57832	; 0xe1e8
   15c9c:	movt	r3, #2
   15ca0:	ldr	r1, [r3, #520]	; 0x208
   15ca4:	mov	r0, #4
   15ca8:	bl	19338 <__assert_fail@plt+0x7e5c>
   15cac:	mov	r3, r0
   15cb0:	mov	r2, r5
   15cb4:	mov	r1, r4
   15cb8:	mov	r0, #0
   15cbc:	bl	11d04 <__assert_fail@plt+0x828>
   15cc0:	mov	r3, #1
   15cc4:	str	r3, [sp, #40]	; 0x28
   15cc8:	b	15758 <__assert_fail@plt+0x427c>
   15ccc:	cmp	r0, #0
   15cd0:	beq	15a48 <__assert_fail@plt+0x456c>
   15cd4:	b	15c30 <__assert_fail@plt+0x4754>
   15cd8:	mov	r2, #0
   15cdc:	mov	r3, #0
   15ce0:	mov	r0, #0
   15ce4:	bl	1238c <__assert_fail@plt+0xeb0>
   15ce8:	cmp	r0, #0
   15cec:	bne	157a8 <__assert_fail@plt+0x42cc>
   15cf0:	ldr	r4, [sl]
   15cf4:	mov	r2, #5
   15cf8:	movw	r1, #53968	; 0xd2d0
   15cfc:	movt	r1, #1
   15d00:	bl	11230 <dcgettext@plt>
   15d04:	mov	r5, r0
   15d08:	movw	r3, #57832	; 0xe1e8
   15d0c:	movt	r3, #2
   15d10:	ldr	r2, [r3, #524]	; 0x20c
   15d14:	mov	r1, #3
   15d18:	mov	r0, #0
   15d1c:	bl	1945c <__assert_fail@plt+0x7f80>
   15d20:	mov	r3, r0
   15d24:	mov	r2, r5
   15d28:	mov	r1, r4
   15d2c:	mov	r0, #0
   15d30:	bl	11d04 <__assert_fail@plt+0x828>
   15d34:	mov	r3, #1
   15d38:	str	r3, [sp, #40]	; 0x28
   15d3c:	b	157a8 <__assert_fail@plt+0x42cc>
   15d40:	movw	r3, #57832	; 0xe1e8
   15d44:	movt	r3, #2
   15d48:	ldrb	r3, [r3, #600]	; 0x258
   15d4c:	cmp	r3, #0
   15d50:	bne	15d68 <__assert_fail@plt+0x488c>
   15d54:	movw	r3, #57832	; 0xe1e8
   15d58:	movt	r3, #2
   15d5c:	ldrb	r3, [r3, #328]	; 0x148
   15d60:	cmp	r3, #0
   15d64:	beq	15d78 <__assert_fail@plt+0x489c>
   15d68:	mov	r2, #0
   15d6c:	mov	r3, #0
   15d70:	mov	r0, #0
   15d74:	bl	1238c <__assert_fail@plt+0xeb0>
   15d78:	movw	r3, #57832	; 0xe1e8
   15d7c:	movt	r3, #2
   15d80:	ldrb	r3, [r3, #545]	; 0x221
   15d84:	cmp	r3, #0
   15d88:	bne	15da0 <__assert_fail@plt+0x48c4>
   15d8c:	movw	r3, #57832	; 0xe1e8
   15d90:	movt	r3, #2
   15d94:	ldrb	r3, [r3, #329]	; 0x149
   15d98:	cmp	r3, #0
   15d9c:	beq	15db0 <__assert_fail@plt+0x48d4>
   15da0:	mov	r2, #0
   15da4:	mov	r3, #0
   15da8:	mov	r0, #1
   15dac:	bl	1238c <__assert_fail@plt+0xeb0>
   15db0:	bl	13538 <__assert_fail@plt+0x205c>
   15db4:	ldr	r0, [sp, #40]	; 0x28
   15db8:	bl	11374 <exit@plt>
   15dbc:	ldr	r2, [r4, #288]	; 0x120
   15dc0:	b	156c4 <__assert_fail@plt+0x41e8>
   15dc4:	movw	r3, #57832	; 0xe1e8
   15dc8:	movt	r3, #2
   15dcc:	ldr	r0, [r3, #300]	; 0x12c
   15dd0:	ldr	r2, [r3, #304]	; 0x130
   15dd4:	mov	r1, #0
   15dd8:	bl	113d4 <memset@plt>
   15ddc:	movw	r7, #57832	; 0xe1e8
   15de0:	movt	r7, #2
   15de4:	mov	r8, #1
   15de8:	b	151a8 <__assert_fail@plt+0x3ccc>
   15dec:	movw	r3, #57832	; 0xe1e8
   15df0:	movt	r3, #2
   15df4:	mov	r2, #1
   15df8:	strb	r2, [r3, #536]	; 0x218
   15dfc:	movw	r3, #12488	; 0x30c8
   15e00:	movt	r3, #1
   15e04:	b	1471c <__assert_fail@plt+0x3240>
   15e08:	ldrd	r2, [sp, #48]	; 0x30
   15e0c:	strd	r2, [sp, #64]	; 0x40
   15e10:	ldrd	r2, [sp, #48]	; 0x30
   15e14:	cmp	r2, #0
   15e18:	sbcs	r3, r3, #0
   15e1c:	blt	14244 <__assert_fail@plt+0x2d68>
   15e20:	ldr	r2, [sp, #136]	; 0x88
   15e24:	cmp	r2, #0
   15e28:	beq	13ff0 <__assert_fail@plt+0x2b14>
   15e2c:	b	14250 <__assert_fail@plt+0x2d74>
   15e30:	ldrd	r2, [sp, #48]	; 0x30
   15e34:	strd	r2, [sp, #72]	; 0x48
   15e38:	b	15e10 <__assert_fail@plt+0x4934>
   15e3c:	ldr	r3, [pc, #108]	; 15eb0 <__assert_fail@plt+0x49d4>
   15e40:	ldrd	r2, [r3]
   15e44:	adds	r0, r2, r8
   15e48:	adcs	r1, r3, r9
   15e4c:	mov	r8, r0
   15e50:	mov	r9, r1
   15e54:	bvc	14cc8 <__assert_fail@plt+0x37ec>
   15e58:	tst	ip, #512	; 0x200
   15e5c:	bne	149a8 <__assert_fail@plt+0x34cc>
   15e60:	mov	r2, #5
   15e64:	movw	r1, #53652	; 0xd194
   15e68:	movt	r1, #1
   15e6c:	mov	r0, #0
   15e70:	bl	11230 <dcgettext@plt>
   15e74:	movw	r3, #57832	; 0xe1e8
   15e78:	movt	r3, #2
   15e7c:	ldr	r3, [r3, #304]	; 0x130
   15e80:	str	r3, [sp, #8]
   15e84:	strd	r6, [sp]
   15e88:	mov	r2, r0
   15e8c:	mov	r1, #0
   15e90:	mov	r0, #1
   15e94:	bl	11d04 <__assert_fail@plt+0x828>
   15e98:	ldr	r2, [sp, #136]	; 0x88
   15e9c:	cmp	r2, #0
   15ea0:	bne	14250 <__assert_fail@plt+0x2d74>
   15ea4:	ldr	r2, [sp, #48]	; 0x30
   15ea8:	str	r2, [ip]
   15eac:	b	13ff0 <__assert_fail@plt+0x2b14>
   15eb0:	andeq	lr, r2, r8, lsr r4
   15eb4:	strd	r4, [sp, #-16]!
   15eb8:	str	r6, [sp, #8]
   15ebc:	str	lr, [sp, #12]
   15ec0:	mov	r5, r0
   15ec4:	bl	112c0 <__fpending@plt>
   15ec8:	mov	r6, r0
   15ecc:	ldr	r4, [r5]
   15ed0:	and	r4, r4, #32
   15ed4:	mov	r0, r5
   15ed8:	bl	16070 <__assert_fail@plt+0x4b94>
   15edc:	cmp	r4, #0
   15ee0:	bne	15f14 <__assert_fail@plt+0x4a38>
   15ee4:	cmp	r0, #0
   15ee8:	beq	15f04 <__assert_fail@plt+0x4a28>
   15eec:	cmp	r6, #0
   15ef0:	bne	15f30 <__assert_fail@plt+0x4a54>
   15ef4:	bl	113a4 <__errno_location@plt>
   15ef8:	ldr	r0, [r0]
   15efc:	subs	r0, r0, #9
   15f00:	mvnne	r0, #0
   15f04:	ldrd	r4, [sp]
   15f08:	ldr	r6, [sp, #8]
   15f0c:	add	sp, sp, #12
   15f10:	pop	{pc}		; (ldr pc, [sp], #4)
   15f14:	cmp	r0, #0
   15f18:	bne	15f38 <__assert_fail@plt+0x4a5c>
   15f1c:	bl	113a4 <__errno_location@plt>
   15f20:	mov	r3, #0
   15f24:	str	r3, [r0]
   15f28:	mvn	r0, #0
   15f2c:	b	15f04 <__assert_fail@plt+0x4a28>
   15f30:	mvn	r0, #0
   15f34:	b	15f04 <__assert_fail@plt+0x4a28>
   15f38:	mvn	r0, #0
   15f3c:	b	15f04 <__assert_fail@plt+0x4a28>
   15f40:	movw	r3, #58448	; 0xe450
   15f44:	movt	r3, #2
   15f48:	str	r0, [r3]
   15f4c:	bx	lr
   15f50:	movw	r3, #58448	; 0xe450
   15f54:	movt	r3, #2
   15f58:	strb	r0, [r3, #4]
   15f5c:	bx	lr
   15f60:	strd	r4, [sp, #-16]!
   15f64:	str	r6, [sp, #8]
   15f68:	str	lr, [sp, #12]
   15f6c:	sub	sp, sp, #8
   15f70:	movw	r3, #57820	; 0xe1dc
   15f74:	movt	r3, #2
   15f78:	ldr	r0, [r3]
   15f7c:	bl	15eb4 <__assert_fail@plt+0x49d8>
   15f80:	cmp	r0, #0
   15f84:	beq	15fac <__assert_fail@plt+0x4ad0>
   15f88:	movw	r3, #58448	; 0xe450
   15f8c:	movt	r3, #2
   15f90:	ldrb	r3, [r3, #4]
   15f94:	cmp	r3, #0
   15f98:	beq	15fd8 <__assert_fail@plt+0x4afc>
   15f9c:	bl	113a4 <__errno_location@plt>
   15fa0:	ldr	r3, [r0]
   15fa4:	cmp	r3, #32
   15fa8:	bne	15fd8 <__assert_fail@plt+0x4afc>
   15fac:	movw	r3, #57816	; 0xe1d8
   15fb0:	movt	r3, #2
   15fb4:	ldr	r0, [r3]
   15fb8:	bl	15eb4 <__assert_fail@plt+0x49d8>
   15fbc:	cmp	r0, #0
   15fc0:	bne	16060 <__assert_fail@plt+0x4b84>
   15fc4:	add	sp, sp, #8
   15fc8:	ldrd	r4, [sp]
   15fcc:	ldr	r6, [sp, #8]
   15fd0:	add	sp, sp, #12
   15fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd8:	mov	r2, #5
   15fdc:	movw	r1, #54124	; 0xd36c
   15fe0:	movt	r1, #1
   15fe4:	mov	r0, #0
   15fe8:	bl	11230 <dcgettext@plt>
   15fec:	mov	r4, r0
   15ff0:	movw	r3, #58448	; 0xe450
   15ff4:	movt	r3, #2
   15ff8:	ldr	r5, [r3]
   15ffc:	cmp	r5, #0
   16000:	beq	16040 <__assert_fail@plt+0x4b64>
   16004:	bl	113a4 <__errno_location@plt>
   16008:	ldr	r6, [r0]
   1600c:	mov	r0, r5
   16010:	bl	19424 <__assert_fail@plt+0x7f48>
   16014:	str	r4, [sp]
   16018:	mov	r3, r0
   1601c:	movw	r2, #52480	; 0xcd00
   16020:	movt	r2, #1
   16024:	mov	r1, r6
   16028:	mov	r0, #0
   1602c:	bl	112d8 <error@plt>
   16030:	movw	r3, #57724	; 0xe17c
   16034:	movt	r3, #2
   16038:	ldr	r0, [r3]
   1603c:	bl	111dc <_exit@plt>
   16040:	bl	113a4 <__errno_location@plt>
   16044:	mov	r3, r4
   16048:	movw	r2, #52644	; 0xcda4
   1604c:	movt	r2, #1
   16050:	ldr	r1, [r0]
   16054:	mov	r0, #0
   16058:	bl	112d8 <error@plt>
   1605c:	b	16030 <__assert_fail@plt+0x4b54>
   16060:	movw	r3, #57724	; 0xe17c
   16064:	movt	r3, #2
   16068:	ldr	r0, [r3]
   1606c:	bl	111dc <_exit@plt>
   16070:	strd	r4, [sp, #-16]!
   16074:	str	r6, [sp, #8]
   16078:	str	lr, [sp, #12]
   1607c:	sub	sp, sp, #8
   16080:	mov	r4, r0
   16084:	bl	113f8 <fileno@plt>
   16088:	cmp	r0, #0
   1608c:	blt	16104 <__assert_fail@plt+0x4c28>
   16090:	mov	r0, r4
   16094:	bl	1132c <__freading@plt>
   16098:	cmp	r0, #0
   1609c:	beq	160d0 <__assert_fail@plt+0x4bf4>
   160a0:	mov	r0, r4
   160a4:	bl	113f8 <fileno@plt>
   160a8:	mov	r3, #1
   160ac:	str	r3, [sp]
   160b0:	mov	r2, #0
   160b4:	mov	r3, #0
   160b8:	bl	112a8 <lseek64@plt>
   160bc:	mvn	r2, #0
   160c0:	mvn	r3, #0
   160c4:	cmp	r1, r3
   160c8:	cmpeq	r0, r2
   160cc:	beq	16110 <__assert_fail@plt+0x4c34>
   160d0:	mov	r0, r4
   160d4:	bl	16418 <__assert_fail@plt+0x4f3c>
   160d8:	cmp	r0, #0
   160dc:	beq	16110 <__assert_fail@plt+0x4c34>
   160e0:	bl	113a4 <__errno_location@plt>
   160e4:	mov	r5, r0
   160e8:	ldr	r6, [r0]
   160ec:	mov	r0, r4
   160f0:	bl	11410 <fclose@plt>
   160f4:	cmp	r6, #0
   160f8:	strne	r6, [r5]
   160fc:	mvnne	r0, #0
   16100:	b	16118 <__assert_fail@plt+0x4c3c>
   16104:	mov	r0, r4
   16108:	bl	11410 <fclose@plt>
   1610c:	b	16118 <__assert_fail@plt+0x4c3c>
   16110:	mov	r0, r4
   16114:	bl	11410 <fclose@plt>
   16118:	add	sp, sp, #8
   1611c:	ldrd	r4, [sp]
   16120:	ldr	r6, [sp, #8]
   16124:	add	sp, sp, #12
   16128:	pop	{pc}		; (ldr pc, [sp], #4)
   1612c:	push	{r1, r2, r3}
   16130:	strd	r4, [sp, #-16]!
   16134:	str	r6, [sp, #8]
   16138:	str	lr, [sp, #12]
   1613c:	sub	sp, sp, #12
   16140:	mov	r5, r0
   16144:	ldr	r1, [sp, #28]
   16148:	add	r3, sp, #32
   1614c:	str	r3, [sp, #4]
   16150:	cmp	r1, #0
   16154:	beq	1619c <__assert_fail@plt+0x4cc0>
   16158:	movw	r3, #1030	; 0x406
   1615c:	cmp	r1, r3
   16160:	beq	161d8 <__assert_fail@plt+0x4cfc>
   16164:	cmp	r1, #11
   16168:	beq	16388 <__assert_fail@plt+0x4eac>
   1616c:	bgt	16314 <__assert_fail@plt+0x4e38>
   16170:	cmp	r1, #3
   16174:	beq	16388 <__assert_fail@plt+0x4eac>
   16178:	ble	162d4 <__assert_fail@plt+0x4df8>
   1617c:	cmp	r1, #8
   16180:	beq	162f4 <__assert_fail@plt+0x4e18>
   16184:	ble	162ec <__assert_fail@plt+0x4e10>
   16188:	cmp	r1, #9
   1618c:	beq	16388 <__assert_fail@plt+0x4eac>
   16190:	cmp	r1, #10
   16194:	bne	1634c <__assert_fail@plt+0x4e70>
   16198:	b	162f4 <__assert_fail@plt+0x4e18>
   1619c:	ldr	r3, [sp, #4]
   161a0:	add	r2, r3, #4
   161a4:	str	r2, [sp, #4]
   161a8:	ldr	r2, [r3]
   161ac:	mov	r1, #0
   161b0:	bl	11428 <fcntl64@plt>
   161b4:	mov	r4, r0
   161b8:	mov	r0, r4
   161bc:	add	sp, sp, #12
   161c0:	ldrd	r4, [sp]
   161c4:	ldr	r6, [sp, #8]
   161c8:	ldr	lr, [sp, #12]
   161cc:	add	sp, sp, #16
   161d0:	add	sp, sp, #12
   161d4:	bx	lr
   161d8:	ldr	r3, [sp, #4]
   161dc:	add	r2, r3, #4
   161e0:	str	r2, [sp, #4]
   161e4:	ldr	r6, [r3]
   161e8:	movw	r3, #58456	; 0xe458
   161ec:	movt	r3, #2
   161f0:	ldr	r3, [r3]
   161f4:	cmp	r3, #0
   161f8:	blt	16260 <__assert_fail@plt+0x4d84>
   161fc:	mov	r2, r6
   16200:	movw	r1, #1030	; 0x406
   16204:	bl	11428 <fcntl64@plt>
   16208:	subs	r4, r0, #0
   1620c:	blt	16224 <__assert_fail@plt+0x4d48>
   16210:	movw	r3, #58456	; 0xe458
   16214:	movt	r3, #2
   16218:	mov	r2, #1
   1621c:	str	r2, [r3]
   16220:	b	161b8 <__assert_fail@plt+0x4cdc>
   16224:	bl	113a4 <__errno_location@plt>
   16228:	ldr	r3, [r0]
   1622c:	cmp	r3, #22
   16230:	bne	16210 <__assert_fail@plt+0x4d34>
   16234:	mov	r2, r6
   16238:	mov	r1, #0
   1623c:	mov	r0, r5
   16240:	bl	11428 <fcntl64@plt>
   16244:	subs	r4, r0, #0
   16248:	blt	161b8 <__assert_fail@plt+0x4cdc>
   1624c:	movw	r3, #58456	; 0xe458
   16250:	movt	r3, #2
   16254:	mvn	r2, #0
   16258:	str	r2, [r3]
   1625c:	b	16288 <__assert_fail@plt+0x4dac>
   16260:	mov	r2, r6
   16264:	mov	r1, #0
   16268:	bl	11428 <fcntl64@plt>
   1626c:	subs	r4, r0, #0
   16270:	blt	161b8 <__assert_fail@plt+0x4cdc>
   16274:	movw	r3, #58456	; 0xe458
   16278:	movt	r3, #2
   1627c:	ldr	r3, [r3]
   16280:	cmn	r3, #1
   16284:	bne	161b8 <__assert_fail@plt+0x4cdc>
   16288:	mov	r1, #1
   1628c:	mov	r0, r4
   16290:	bl	11428 <fcntl64@plt>
   16294:	subs	r2, r0, #0
   16298:	blt	162b4 <__assert_fail@plt+0x4dd8>
   1629c:	orr	r2, r2, #1
   162a0:	mov	r1, #2
   162a4:	mov	r0, r4
   162a8:	bl	11428 <fcntl64@plt>
   162ac:	cmn	r0, #1
   162b0:	bne	161b8 <__assert_fail@plt+0x4cdc>
   162b4:	bl	113a4 <__errno_location@plt>
   162b8:	mov	r5, r0
   162bc:	ldr	r6, [r0]
   162c0:	mov	r0, r4
   162c4:	bl	114b8 <close@plt>
   162c8:	str	r6, [r5]
   162cc:	mvn	r4, #0
   162d0:	b	161b8 <__assert_fail@plt+0x4cdc>
   162d4:	cmp	r1, #1
   162d8:	beq	16388 <__assert_fail@plt+0x4eac>
   162dc:	bgt	162f4 <__assert_fail@plt+0x4e18>
   162e0:	cmp	r1, #0
   162e4:	bne	1634c <__assert_fail@plt+0x4e70>
   162e8:	b	162f4 <__assert_fail@plt+0x4e18>
   162ec:	cmp	r1, #4
   162f0:	bne	1634c <__assert_fail@plt+0x4e70>
   162f4:	ldr	r3, [sp, #4]
   162f8:	add	r2, r3, #4
   162fc:	str	r2, [sp, #4]
   16300:	ldr	r2, [r3]
   16304:	mov	r0, r5
   16308:	bl	11428 <fcntl64@plt>
   1630c:	mov	r4, r0
   16310:	b	161b8 <__assert_fail@plt+0x4cdc>
   16314:	movw	r3, #1031	; 0x407
   16318:	cmp	r1, r3
   1631c:	bgt	1636c <__assert_fail@plt+0x4e90>
   16320:	movw	r3, #1030	; 0x406
   16324:	cmp	r1, r3
   16328:	bge	162f4 <__assert_fail@plt+0x4e18>
   1632c:	movw	r3, #1025	; 0x401
   16330:	cmp	r1, r3
   16334:	beq	16388 <__assert_fail@plt+0x4eac>
   16338:	movw	r3, #1026	; 0x402
   1633c:	cmp	r1, r3
   16340:	beq	162f4 <__assert_fail@plt+0x4e18>
   16344:	cmp	r1, #1024	; 0x400
   16348:	beq	162f4 <__assert_fail@plt+0x4e18>
   1634c:	ldr	r3, [sp, #4]
   16350:	add	r2, r3, #4
   16354:	str	r2, [sp, #4]
   16358:	ldr	r2, [r3]
   1635c:	mov	r0, r5
   16360:	bl	11428 <fcntl64@plt>
   16364:	mov	r4, r0
   16368:	b	161b8 <__assert_fail@plt+0x4cdc>
   1636c:	movw	r3, #1033	; 0x409
   16370:	cmp	r1, r3
   16374:	beq	162f4 <__assert_fail@plt+0x4e18>
   16378:	blt	16388 <__assert_fail@plt+0x4eac>
   1637c:	movw	r3, #1034	; 0x40a
   16380:	cmp	r1, r3
   16384:	bne	1634c <__assert_fail@plt+0x4e70>
   16388:	mov	r0, r5
   1638c:	bl	11428 <fcntl64@plt>
   16390:	mov	r4, r0
   16394:	b	161b8 <__assert_fail@plt+0x4cdc>
   16398:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1639c:	strd	r6, [sp, #8]
   163a0:	str	r8, [sp, #16]
   163a4:	str	lr, [sp, #20]
   163a8:	mov	r5, r0
   163ac:	mov	r0, r1
   163b0:	mov	r1, r2
   163b4:	mov	r2, r3
   163b8:	bl	112e4 <open64@plt>
   163bc:	mov	r4, r0
   163c0:	cmp	r5, r0
   163c4:	movne	r3, #0
   163c8:	moveq	r3, #1
   163cc:	orrs	r3, r3, r0, lsr #31
   163d0:	beq	163ec <__assert_fail@plt+0x4f10>
   163d4:	mov	r0, r4
   163d8:	ldrd	r4, [sp]
   163dc:	ldrd	r6, [sp, #8]
   163e0:	ldr	r8, [sp, #16]
   163e4:	add	sp, sp, #20
   163e8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ec:	mov	r1, r5
   163f0:	bl	1123c <dup2@plt>
   163f4:	mov	r6, r0
   163f8:	bl	113a4 <__errno_location@plt>
   163fc:	mov	r5, r0
   16400:	ldr	r7, [r0]
   16404:	mov	r0, r4
   16408:	bl	114b8 <close@plt>
   1640c:	str	r7, [r5]
   16410:	mov	r4, r6
   16414:	b	163d4 <__assert_fail@plt+0x4ef8>
   16418:	str	r4, [sp, #-8]!
   1641c:	str	lr, [sp, #4]
   16420:	sub	sp, sp, #8
   16424:	subs	r4, r0, #0
   16428:	beq	1643c <__assert_fail@plt+0x4f60>
   1642c:	mov	r0, r4
   16430:	bl	1132c <__freading@plt>
   16434:	cmp	r0, #0
   16438:	bne	16454 <__assert_fail@plt+0x4f78>
   1643c:	mov	r0, r4
   16440:	bl	111a0 <fflush@plt>
   16444:	add	sp, sp, #8
   16448:	ldr	r4, [sp]
   1644c:	add	sp, sp, #4
   16450:	pop	{pc}		; (ldr pc, [sp], #4)
   16454:	ldr	r3, [r4]
   16458:	tst	r3, #256	; 0x100
   1645c:	bne	1646c <__assert_fail@plt+0x4f90>
   16460:	mov	r0, r4
   16464:	bl	111a0 <fflush@plt>
   16468:	b	16444 <__assert_fail@plt+0x4f68>
   1646c:	mov	r3, #1
   16470:	str	r3, [sp]
   16474:	mov	r2, #0
   16478:	mov	r3, #0
   1647c:	mov	r0, r4
   16480:	bl	16488 <__assert_fail@plt+0x4fac>
   16484:	b	16460 <__assert_fail@plt+0x4f84>
   16488:	str	r4, [sp, #-16]!
   1648c:	strd	r6, [sp, #4]
   16490:	str	lr, [sp, #12]
   16494:	sub	sp, sp, #8
   16498:	mov	r4, r0
   1649c:	mov	r6, r2
   164a0:	mov	r7, r3
   164a4:	ldr	r2, [r0, #8]
   164a8:	ldr	r3, [r0, #4]
   164ac:	cmp	r2, r3
   164b0:	beq	164e0 <__assert_fail@plt+0x5004>
   164b4:	ldr	r3, [sp, #24]
   164b8:	str	r3, [sp]
   164bc:	mov	r2, r6
   164c0:	mov	r3, r7
   164c4:	mov	r0, r4
   164c8:	bl	1141c <fseeko64@plt>
   164cc:	add	sp, sp, #8
   164d0:	ldr	r4, [sp]
   164d4:	ldrd	r6, [sp, #4]
   164d8:	add	sp, sp, #12
   164dc:	pop	{pc}		; (ldr pc, [sp], #4)
   164e0:	ldr	r2, [r0, #20]
   164e4:	ldr	r3, [r0, #16]
   164e8:	cmp	r2, r3
   164ec:	bne	164b4 <__assert_fail@plt+0x4fd8>
   164f0:	ldr	r3, [r0, #36]	; 0x24
   164f4:	cmp	r3, #0
   164f8:	bne	164b4 <__assert_fail@plt+0x4fd8>
   164fc:	bl	113f8 <fileno@plt>
   16500:	ldr	r3, [sp, #24]
   16504:	str	r3, [sp]
   16508:	mov	r2, r6
   1650c:	mov	r3, r7
   16510:	bl	112a8 <lseek64@plt>
   16514:	mvn	r2, #0
   16518:	mvn	r3, #0
   1651c:	cmp	r1, r3
   16520:	cmpeq	r0, r2
   16524:	beq	16540 <__assert_fail@plt+0x5064>
   16528:	ldr	r3, [r4]
   1652c:	bic	r3, r3, #16
   16530:	str	r3, [r4]
   16534:	strd	r0, [r4, #80]	; 0x50
   16538:	mov	r0, #0
   1653c:	b	164cc <__assert_fail@plt+0x4ff0>
   16540:	mvn	r0, #0
   16544:	b	164cc <__assert_fail@plt+0x4ff0>
   16548:	strd	r4, [sp, #-12]!
   1654c:	str	lr, [sp, #8]
   16550:	sub	sp, sp, #12
   16554:	mov	r1, sp
   16558:	mov	r0, #1
   1655c:	bl	111d0 <clock_gettime@plt>
   16560:	cmp	r0, #0
   16564:	bne	165a4 <__assert_fail@plt+0x50c8>
   16568:	ldr	r0, [sp]
   1656c:	asr	r5, r0, #31
   16570:	mov	r3, #51712	; 0xca00
   16574:	movt	r3, #15258	; 0x3b9a
   16578:	umull	r0, r1, r0, r3
   1657c:	mla	r1, r3, r5, r1
   16580:	ldr	r3, [sp, #4]
   16584:	adds	r4, r0, r3
   16588:	adc	r5, r1, r3, asr #31
   1658c:	mov	r0, r4
   16590:	mov	r1, r5
   16594:	add	sp, sp, #12
   16598:	ldrd	r4, [sp]
   1659c:	add	sp, sp, #8
   165a0:	pop	{pc}		; (ldr pc, [sp], #4)
   165a4:	mov	r0, sp
   165a8:	bl	165d4 <__assert_fail@plt+0x50f8>
   165ac:	ldr	r0, [sp]
   165b0:	asr	r5, r0, #31
   165b4:	mov	r3, #51712	; 0xca00
   165b8:	movt	r3, #15258	; 0x3b9a
   165bc:	umull	r0, r1, r0, r3
   165c0:	mla	r1, r3, r5, r1
   165c4:	ldr	r3, [sp, #4]
   165c8:	adds	r4, r0, r3
   165cc:	adc	r5, r1, r3, asr #31
   165d0:	b	1658c <__assert_fail@plt+0x50b0>
   165d4:	str	r4, [sp, #-8]!
   165d8:	str	lr, [sp, #4]
   165dc:	mov	r1, r0
   165e0:	mov	r0, #0
   165e4:	bl	111d0 <clock_gettime@plt>
   165e8:	ldr	r4, [sp]
   165ec:	add	sp, sp, #4
   165f0:	pop	{pc}		; (ldr pc, [sp], #4)
   165f4:	str	r4, [sp, #-8]!
   165f8:	str	lr, [sp, #4]
   165fc:	sub	sp, sp, #8
   16600:	mov	r4, r0
   16604:	mov	r0, sp
   16608:	bl	165d4 <__assert_fail@plt+0x50f8>
   1660c:	ldrd	r2, [sp]
   16610:	strd	r2, [r4]
   16614:	mov	r0, r4
   16618:	add	sp, sp, #8
   1661c:	ldr	r4, [sp]
   16620:	add	sp, sp, #4
   16624:	pop	{pc}		; (ldr pc, [sp], #4)
   16628:	str	r4, [sp, #-16]!
   1662c:	strd	r6, [sp, #4]
   16630:	str	lr, [sp, #12]
   16634:	vpush	{d8}
   16638:	vmov.f64	d8, d0
   1663c:	cmp	r0, #1
   16640:	beq	166a8 <__assert_fail@plt+0x51cc>
   16644:	mov	r4, r0
   16648:	vldr	d7, [pc, #112]	; 166c0 <__assert_fail@plt+0x51e4>
   1664c:	vcmpe.f64	d0, d7
   16650:	vmrs	APSR_nzcv, fpscr
   16654:	bpl	166a8 <__assert_fail@plt+0x51cc>
   16658:	vmov	r0, r1, d0
   1665c:	bl	1b698 <__assert_fail@plt+0xa1bc>
   16660:	mov	r6, r0
   16664:	mov	r7, r1
   16668:	cmp	r4, #0
   1666c:	movne	r0, #0
   16670:	bne	16690 <__assert_fail@plt+0x51b4>
   16674:	mov	r0, r6
   16678:	bl	1b504 <__assert_fail@plt+0xa028>
   1667c:	vmov	d7, r0, r1
   16680:	vcmp.f64	d7, d8
   16684:	vmrs	APSR_nzcv, fpscr
   16688:	movne	r0, #1
   1668c:	moveq	r0, #0
   16690:	adds	r2, r6, r0
   16694:	adc	r3, r7, r0, asr #31
   16698:	mov	r0, r2
   1669c:	mov	r1, r3
   166a0:	bl	1b504 <__assert_fail@plt+0xa028>
   166a4:	vmov	d8, r0, r1
   166a8:	vmov.f64	d0, d8
   166ac:	vpop	{d8}
   166b0:	ldr	r4, [sp]
   166b4:	ldrd	r6, [sp, #4]
   166b8:	add	sp, sp, #12
   166bc:	pop	{pc}		; (ldr pc, [sp], #4)
   166c0:	andeq	r0, r0, r0
   166c4:	mvnsmi	r0, #0
   166c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166cc:	strd	r6, [sp, #8]
   166d0:	strd	r8, [sp, #16]
   166d4:	strd	sl, [sp, #24]
   166d8:	str	lr, [sp, #32]
   166dc:	vpush	{d8-d9}
   166e0:	sub	sp, sp, #124	; 0x7c
   166e4:	mov	r6, r0
   166e8:	mov	r7, r1
   166ec:	mov	r8, r2
   166f0:	str	r2, [sp, #36]	; 0x24
   166f4:	mov	r9, r3
   166f8:	and	r3, r3, #3
   166fc:	str	r3, [sp, #8]
   16700:	ands	r3, r9, #32
   16704:	str	r3, [sp, #44]	; 0x2c
   16708:	movne	r3, #1024	; 0x400
   1670c:	moveq	r3, #1000	; 0x3e8
   16710:	str	r3, [sp, #40]	; 0x28
   16714:	bl	11470 <localeconv@plt>
   16718:	mov	r4, r0
   1671c:	ldr	r5, [r0]
   16720:	mov	r0, r5
   16724:	bl	11380 <strlen@plt>
   16728:	mov	fp, r0
   1672c:	sub	r2, r0, #1
   16730:	cmp	r2, #16
   16734:	movcc	fp, r0
   16738:	movcs	fp, #1
   1673c:	movw	r3, #54168	; 0xd398
   16740:	movt	r3, #1
   16744:	cmp	r2, #15
   16748:	movhi	r5, r3
   1674c:	ldr	sl, [r4, #8]
   16750:	ldr	r3, [r4, #4]
   16754:	mov	r4, r3
   16758:	mov	r0, r3
   1675c:	bl	11380 <strlen@plt>
   16760:	movw	r3, #51668	; 0xc9d4
   16764:	movt	r3, #1
   16768:	mov	r1, r4
   1676c:	cmp	r0, #16
   16770:	movhi	r1, r3
   16774:	str	r1, [sp, #20]
   16778:	add	r3, r8, #644	; 0x284
   1677c:	add	r3, r3, #3
   16780:	str	r3, [sp, #32]
   16784:	ldrd	r2, [sp, #184]	; 0xb8
   16788:	ldrd	r0, [sp, #176]	; 0xb0
   1678c:	cmp	r3, r1
   16790:	cmpeq	r2, r0
   16794:	bhi	16918 <__assert_fail@plt+0x543c>
   16798:	bl	1b64c <__assert_fail@plt+0xa170>
   1679c:	orrs	r3, r2, r3
   167a0:	bne	167e4 <__assert_fail@plt+0x5308>
   167a4:	ldrd	r2, [sp, #184]	; 0xb8
   167a8:	ldrd	r0, [sp, #176]	; 0xb0
   167ac:	bl	1b64c <__assert_fail@plt+0xa170>
   167b0:	mov	r2, r0
   167b4:	mov	r3, r1
   167b8:	mul	r0, r0, r7
   167bc:	mla	ip, r6, r1, r0
   167c0:	umull	r0, r1, r2, r6
   167c4:	strd	r0, [sp, #24]
   167c8:	add	r1, ip, r1
   167cc:	str	r1, [sp, #28]
   167d0:	ldrd	r0, [sp, #24]
   167d4:	bl	1b64c <__assert_fail@plt+0xa170>
   167d8:	cmp	r1, r7
   167dc:	cmpeq	r0, r6
   167e0:	beq	16ab4 <__assert_fail@plt+0x55d8>
   167e4:	ldrd	r0, [sp, #176]	; 0xb0
   167e8:	bl	1b504 <__assert_fail@plt+0xa028>
   167ec:	vmov	d9, r0, r1
   167f0:	ldrd	r0, [sp, #184]	; 0xb8
   167f4:	bl	1b504 <__assert_fail@plt+0xa028>
   167f8:	vmov	d7, r0, r1
   167fc:	vdiv.f64	d8, d9, d7
   16800:	mov	r0, r6
   16804:	mov	r1, r7
   16808:	bl	1b504 <__assert_fail@plt+0xa028>
   1680c:	vmov	d7, r0, r1
   16810:	vmul.f64	d0, d8, d7
   16814:	tst	r9, #16
   16818:	beq	16a04 <__assert_fail@plt+0x5528>
   1681c:	vldr	d7, [pc, #1004]	; 16c10 <__assert_fail@plt+0x5734>
   16820:	mov	r7, #0
   16824:	vldr	s13, [sp, #40]	; 0x28
   16828:	vcvt.f64.u32	d6, s13
   1682c:	vmul.f64	d7, d7, d6
   16830:	add	r7, r7, #1
   16834:	vmul.f64	d5, d6, d7
   16838:	vcmpe.f64	d5, d0
   1683c:	vmrs	APSR_nzcv, fpscr
   16840:	movls	r3, #1
   16844:	movhi	r3, #0
   16848:	cmp	r7, #7
   1684c:	movgt	r3, #0
   16850:	andle	r3, r3, #1
   16854:	cmp	r3, #0
   16858:	bne	1682c <__assert_fail@plt+0x5350>
   1685c:	vdiv.f64	d8, d0, d7
   16860:	vmov.f64	d0, d8
   16864:	ldr	r0, [sp, #8]
   16868:	bl	16628 <__assert_fail@plt+0x514c>
   1686c:	vstr	d0, [sp]
   16870:	movw	r3, #54180	; 0xd3a4
   16874:	movt	r3, #1
   16878:	mvn	r2, #0
   1687c:	mov	r1, #1
   16880:	ldr	r4, [sp, #36]	; 0x24
   16884:	mov	r0, r4
   16888:	bl	113b0 <__sprintf_chk@plt>
   1688c:	mov	r0, r4
   16890:	bl	11380 <strlen@plt>
   16894:	mov	r8, r0
   16898:	add	fp, fp, #1
   1689c:	ldr	r3, [sp, #44]	; 0x2c
   168a0:	clz	r3, r3
   168a4:	lsr	r3, r3, #5
   168a8:	add	r3, r3, #1
   168ac:	add	r3, r3, fp
   168b0:	cmp	r3, r0
   168b4:	bcc	168d0 <__assert_fail@plt+0x53f4>
   168b8:	tst	r9, #8
   168bc:	beq	16a40 <__assert_fail@plt+0x5564>
   168c0:	add	r3, r4, r0
   168c4:	ldrb	r3, [r3, #-1]
   168c8:	cmp	r3, #48	; 0x30
   168cc:	bne	16a40 <__assert_fail@plt+0x5564>
   168d0:	vldr	d9, [pc, #832]	; 16c18 <__assert_fail@plt+0x573c>
   168d4:	vmul.f64	d0, d8, d9
   168d8:	ldr	r0, [sp, #8]
   168dc:	bl	16628 <__assert_fail@plt+0x514c>
   168e0:	vdiv.f64	d0, d0, d9
   168e4:	vstr	d0, [sp]
   168e8:	movw	r3, #54172	; 0xd39c
   168ec:	movt	r3, #1
   168f0:	mvn	r2, #0
   168f4:	mov	r1, #1
   168f8:	ldr	r4, [sp, #36]	; 0x24
   168fc:	mov	r0, r4
   16900:	bl	113b0 <__sprintf_chk@plt>
   16904:	mov	r0, r4
   16908:	bl	11380 <strlen@plt>
   1690c:	mov	r8, r0
   16910:	mov	fp, #0
   16914:	b	16a40 <__assert_fail@plt+0x5564>
   16918:	ldrd	r2, [sp, #176]	; 0xb0
   1691c:	orrs	r3, r2, r3
   16920:	beq	167e4 <__assert_fail@plt+0x5308>
   16924:	ldrd	r2, [sp, #176]	; 0xb0
   16928:	ldrd	r0, [sp, #184]	; 0xb8
   1692c:	bl	1b64c <__assert_fail@plt+0xa170>
   16930:	orrs	r3, r2, r3
   16934:	bne	167e4 <__assert_fail@plt+0x5308>
   16938:	ldrd	r2, [sp, #176]	; 0xb0
   1693c:	ldrd	r0, [sp, #184]	; 0xb8
   16940:	bl	1b64c <__assert_fail@plt+0xa170>
   16944:	strd	r0, [sp, #48]	; 0x30
   16948:	mov	r2, r0
   1694c:	mov	r3, r1
   16950:	mov	r0, r6
   16954:	mov	r1, r7
   16958:	bl	1b64c <__assert_fail@plt+0xa170>
   1695c:	lsl	r1, r3, #2
   16960:	lsl	r4, r2, #2
   16964:	orr	r0, r1, r2, lsr #30
   16968:	adds	r4, r4, r2
   1696c:	adc	r3, r0, r3
   16970:	adds	r4, r4, r4
   16974:	adc	r8, r3, r3
   16978:	ldrd	r2, [sp, #48]	; 0x30
   1697c:	mov	r0, r4
   16980:	mov	r1, r8
   16984:	bl	1b64c <__assert_fail@plt+0xa170>
   16988:	adds	r1, r2, r2
   1698c:	str	r1, [sp, #56]	; 0x38
   16990:	adc	r3, r3, r3
   16994:	str	r3, [sp, #60]	; 0x3c
   16998:	ldrd	r2, [sp, #48]	; 0x30
   1699c:	mov	r0, r6
   169a0:	mov	r1, r7
   169a4:	bl	1b64c <__assert_fail@plt+0xa170>
   169a8:	strd	r0, [sp, #24]
   169ac:	ldrd	r2, [sp, #48]	; 0x30
   169b0:	mov	r0, r4
   169b4:	mov	r1, r8
   169b8:	bl	1b64c <__assert_fail@plt+0xa170>
   169bc:	mov	r6, r0
   169c0:	ldrd	r2, [sp, #48]	; 0x30
   169c4:	ldrd	r0, [sp, #56]	; 0x38
   169c8:	cmp	r3, r1
   169cc:	cmpeq	r2, r0
   169d0:	bls	169e8 <__assert_fail@plt+0x550c>
   169d4:	mov	r3, r0
   169d8:	orrs	r3, r3, r1
   169dc:	movne	r4, #1
   169e0:	moveq	r4, #0
   169e4:	b	16abc <__assert_fail@plt+0x55e0>
   169e8:	ldrd	r2, [sp, #48]	; 0x30
   169ec:	ldrd	r0, [sp, #56]	; 0x38
   169f0:	cmp	r3, r1
   169f4:	cmpeq	r2, r0
   169f8:	movcc	r4, #3
   169fc:	movcs	r4, #2
   16a00:	b	16abc <__assert_fail@plt+0x55e0>
   16a04:	ldr	r0, [sp, #8]
   16a08:	bl	16628 <__assert_fail@plt+0x514c>
   16a0c:	vstr	d0, [sp]
   16a10:	movw	r3, #54172	; 0xd39c
   16a14:	movt	r3, #1
   16a18:	mvn	r2, #0
   16a1c:	mov	r1, #1
   16a20:	ldr	r4, [sp, #36]	; 0x24
   16a24:	mov	r0, r4
   16a28:	bl	113b0 <__sprintf_chk@plt>
   16a2c:	mov	r0, r4
   16a30:	bl	11380 <strlen@plt>
   16a34:	mov	r8, r0
   16a38:	mov	fp, #0
   16a3c:	mvn	r7, #0
   16a40:	ldr	r3, [sp, #32]
   16a44:	sub	r6, r3, r8
   16a48:	mov	r2, r8
   16a4c:	ldr	r1, [sp, #36]	; 0x24
   16a50:	mov	r0, r6
   16a54:	bl	111b8 <memmove@plt>
   16a58:	sub	r8, r8, fp
   16a5c:	add	r8, r6, r8
   16a60:	tst	r9, #4
   16a64:	bne	16e04 <__assert_fail@plt+0x5928>
   16a68:	tst	r9, #128	; 0x80
   16a6c:	beq	16a84 <__assert_fail@plt+0x55a8>
   16a70:	cmp	r7, #0
   16a74:	blt	16e94 <__assert_fail@plt+0x59b8>
   16a78:	and	r3, r9, #256	; 0x100
   16a7c:	orrs	r2, r3, r7
   16a80:	bne	16ef4 <__assert_fail@plt+0x5a18>
   16a84:	mov	r3, #0
   16a88:	ldr	r2, [sp, #32]
   16a8c:	strb	r3, [r2]
   16a90:	mov	r0, r6
   16a94:	add	sp, sp, #124	; 0x7c
   16a98:	vpop	{d8-d9}
   16a9c:	ldrd	r4, [sp]
   16aa0:	ldrd	r6, [sp, #8]
   16aa4:	ldrd	r8, [sp, #16]
   16aa8:	ldrd	sl, [sp, #24]
   16aac:	add	sp, sp, #32
   16ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ab4:	mov	r4, #0
   16ab8:	mov	r6, r4
   16abc:	ands	r3, r9, #16
   16ac0:	str	r3, [sp, #48]	; 0x30
   16ac4:	beq	16c7c <__assert_fail@plt+0x57a0>
   16ac8:	ldr	r8, [sp, #40]	; 0x28
   16acc:	mov	r3, #0
   16ad0:	ldrd	r0, [sp, #24]
   16ad4:	cmp	r3, r1
   16ad8:	cmpeq	r8, r0
   16adc:	bhi	16cb4 <__assert_fail@plt+0x57d8>
   16ae0:	mov	r7, #0
   16ae4:	str	r5, [sp, #56]	; 0x38
   16ae8:	str	fp, [sp, #64]	; 0x40
   16aec:	str	sl, [sp, #68]	; 0x44
   16af0:	mov	sl, r8
   16af4:	mov	fp, r3
   16af8:	b	16b38 <__assert_fail@plt+0x565c>
   16afc:	add	r4, r4, r5
   16b00:	cmp	r4, r8
   16b04:	movhi	r4, #3
   16b08:	movls	r4, #2
   16b0c:	add	r7, r7, #1
   16b10:	ldrd	r2, [sp, #24]
   16b14:	cmp	fp, r3
   16b18:	cmpeq	sl, r2
   16b1c:	movls	r3, #1
   16b20:	movhi	r3, #0
   16b24:	cmp	r7, #7
   16b28:	movgt	r3, #0
   16b2c:	andle	r3, r3, #1
   16b30:	cmp	r3, #0
   16b34:	beq	16b8c <__assert_fail@plt+0x56b0>
   16b38:	mov	r2, sl
   16b3c:	mov	r3, fp
   16b40:	ldrd	r0, [sp, #24]
   16b44:	bl	1b64c <__assert_fail@plt+0xa170>
   16b48:	add	r2, r2, r2, lsl #2
   16b4c:	add	r2, r6, r2, lsl #1
   16b50:	udiv	r6, r2, r8
   16b54:	mls	r2, r8, r6, r2
   16b58:	asr	r5, r4, #1
   16b5c:	add	r5, r5, r2, lsl #1
   16b60:	mov	r2, sl
   16b64:	mov	r3, fp
   16b68:	ldrd	r0, [sp, #24]
   16b6c:	bl	1b64c <__assert_fail@plt+0xa170>
   16b70:	strd	r0, [sp, #24]
   16b74:	cmp	r8, r5
   16b78:	bls	16afc <__assert_fail@plt+0x5620>
   16b7c:	cmn	r4, r5
   16b80:	movne	r4, #1
   16b84:	moveq	r4, #0
   16b88:	b	16b0c <__assert_fail@plt+0x5630>
   16b8c:	ldr	r5, [sp, #56]	; 0x38
   16b90:	ldr	fp, [sp, #64]	; 0x40
   16b94:	ldr	sl, [sp, #68]	; 0x44
   16b98:	ldrd	r2, [sp, #24]
   16b9c:	cmp	r3, #0
   16ba0:	cmpeq	r2, #9
   16ba4:	bhi	16cc0 <__assert_fail@plt+0x57e4>
   16ba8:	ldr	r3, [sp, #8]
   16bac:	cmp	r3, #1
   16bb0:	beq	16c20 <__assert_fail@plt+0x5744>
   16bb4:	adds	r3, r4, #0
   16bb8:	movne	r3, #1
   16bbc:	ldr	r2, [sp, #8]
   16bc0:	cmp	r2, #0
   16bc4:	movne	r3, #0
   16bc8:	cmp	r3, #0
   16bcc:	beq	16f80 <__assert_fail@plt+0x5aa4>
   16bd0:	add	r6, r6, #1
   16bd4:	cmp	r6, #10
   16bd8:	beq	16c38 <__assert_fail@plt+0x575c>
   16bdc:	ldr	r3, [sp, #36]	; 0x24
   16be0:	add	r8, r3, #644	; 0x284
   16be4:	add	r8, r8, #2
   16be8:	add	r6, r6, #48	; 0x30
   16bec:	strb	r6, [r3, #646]	; 0x286
   16bf0:	sub	r8, r8, fp
   16bf4:	mov	r2, fp
   16bf8:	mov	r1, r5
   16bfc:	mov	r0, r8
   16c00:	bl	111e8 <memcpy@plt>
   16c04:	mov	r6, #0
   16c08:	mov	r4, r6
   16c0c:	b	16c84 <__assert_fail@plt+0x57a8>
   16c10:	andeq	r0, r0, r0
   16c14:	svccc	0x00f00000	; IMB
   16c18:	andeq	r0, r0, r0
   16c1c:	eormi	r0, r4, r0
   16c20:	and	r3, r6, #1
   16c24:	add	r3, r3, r4
   16c28:	cmp	r3, #2
   16c2c:	movle	r3, #0
   16c30:	movgt	r3, #1
   16c34:	b	16bc8 <__assert_fail@plt+0x56ec>
   16c38:	ldr	r3, [sp, #24]
   16c3c:	adds	r3, r3, #1
   16c40:	str	r3, [sp, #24]
   16c44:	ldr	r3, [sp, #28]
   16c48:	adc	r3, r3, #0
   16c4c:	str	r3, [sp, #28]
   16c50:	ldrd	r2, [sp, #24]
   16c54:	cmp	r3, #0
   16c58:	cmpeq	r2, #9
   16c5c:	bls	16c70 <__assert_fail@plt+0x5794>
   16c60:	ldr	r8, [sp, #32]
   16c64:	mov	r4, #0
   16c68:	mov	r6, r4
   16c6c:	b	16c84 <__assert_fail@plt+0x57a8>
   16c70:	mov	r4, #0
   16c74:	mov	r6, r4
   16c78:	b	16f88 <__assert_fail@plt+0x5aac>
   16c7c:	ldr	r8, [sp, #32]
   16c80:	mvn	r7, #0
   16c84:	ldr	r3, [sp, #8]
   16c88:	cmp	r3, #1
   16c8c:	beq	16cc8 <__assert_fail@plt+0x57ec>
   16c90:	ldr	r3, [sp, #8]
   16c94:	cmp	r3, #0
   16c98:	movne	r6, #0
   16c9c:	bne	16cf4 <__assert_fail@plt+0x5818>
   16ca0:	add	r6, r6, r4
   16ca4:	cmp	r6, #0
   16ca8:	movle	r6, #0
   16cac:	movgt	r6, #1
   16cb0:	b	16cf4 <__assert_fail@plt+0x5818>
   16cb4:	ldr	r8, [sp, #32]
   16cb8:	mov	r7, #0
   16cbc:	b	16c84 <__assert_fail@plt+0x57a8>
   16cc0:	ldr	r8, [sp, #32]
   16cc4:	b	16c84 <__assert_fail@plt+0x57a8>
   16cc8:	ldr	r3, [sp, #24]
   16ccc:	and	r0, r3, #1
   16cd0:	mov	r1, #0
   16cd4:	adds	r2, r0, r4
   16cd8:	adc	r3, r1, r4, asr #31
   16cdc:	orr	r2, r2, r3
   16ce0:	cmp	r2, r1
   16ce4:	addne	r6, r6, #1
   16ce8:	cmp	r6, #5
   16cec:	movle	r6, #0
   16cf0:	movgt	r6, #1
   16cf4:	cmp	r6, #0
   16cf8:	beq	16d50 <__assert_fail@plt+0x5874>
   16cfc:	ldr	r3, [sp, #24]
   16d00:	adds	r3, r3, #1
   16d04:	str	r3, [sp, #24]
   16d08:	ldr	r3, [sp, #28]
   16d0c:	adc	r3, r3, #0
   16d10:	str	r3, [sp, #28]
   16d14:	ldr	r3, [sp, #48]	; 0x30
   16d18:	cmp	r3, #0
   16d1c:	beq	16d50 <__assert_fail@plt+0x5874>
   16d20:	ldr	r2, [sp, #40]	; 0x28
   16d24:	mov	r3, #0
   16d28:	ldrd	r0, [sp, #24]
   16d2c:	cmp	r3, r1
   16d30:	cmpeq	r2, r0
   16d34:	moveq	r3, #1
   16d38:	movne	r3, #0
   16d3c:	cmp	r7, #7
   16d40:	movgt	r3, #0
   16d44:	andle	r3, r3, #1
   16d48:	cmp	r3, #0
   16d4c:	bne	16d74 <__assert_fail@plt+0x5898>
   16d50:	mov	r4, #10
   16d54:	mov	r5, #0
   16d58:	mov	fp, r8
   16d5c:	strd	r4, [sp, #8]
   16d60:	mov	r5, r9
   16d64:	mov	r9, r8
   16d68:	mov	r8, r7
   16d6c:	ldrd	r6, [sp, #24]
   16d70:	b	16dbc <__assert_fail@plt+0x58e0>
   16d74:	add	r7, r7, #1
   16d78:	tst	r9, #8
   16d7c:	beq	16d90 <__assert_fail@plt+0x58b4>
   16d80:	sub	r6, r8, #1
   16d84:	mov	r3, #49	; 0x31
   16d88:	strb	r3, [r8, #-1]
   16d8c:	b	16a60 <__assert_fail@plt+0x5584>
   16d90:	mov	r3, #48	; 0x30
   16d94:	strb	r3, [r8, #-1]
   16d98:	mvn	r3, fp
   16d9c:	add	r8, r8, r3
   16da0:	mov	r2, fp
   16da4:	mov	r1, r5
   16da8:	mov	r0, r8
   16dac:	bl	111e8 <memcpy@plt>
   16db0:	b	16d80 <__assert_fail@plt+0x58a4>
   16db4:	mov	r6, r0
   16db8:	mov	r7, r1
   16dbc:	ldrd	r2, [sp, #8]
   16dc0:	mov	r0, r6
   16dc4:	mov	r1, r7
   16dc8:	bl	1b64c <__assert_fail@plt+0xa170>
   16dcc:	add	r2, r2, #48	; 0x30
   16dd0:	strb	r2, [fp, #-1]!
   16dd4:	ldrd	r2, [sp, #8]
   16dd8:	mov	r0, r6
   16ddc:	mov	r1, r7
   16de0:	bl	1b64c <__assert_fail@plt+0xa170>
   16de4:	cmp	r7, #0
   16de8:	cmpeq	r6, #9
   16dec:	bhi	16db4 <__assert_fail@plt+0x58d8>
   16df0:	mov	r7, r8
   16df4:	mov	r8, r9
   16df8:	mov	r6, fp
   16dfc:	mov	r9, r5
   16e00:	b	16a60 <__assert_fail@plt+0x5584>
   16e04:	sub	r4, r8, r6
   16e08:	ldr	r0, [sp, #20]
   16e0c:	bl	11380 <strlen@plt>
   16e10:	mov	fp, r0
   16e14:	mov	r3, #41	; 0x29
   16e18:	mov	r2, r4
   16e1c:	mov	r1, r6
   16e20:	add	r0, sp, #76	; 0x4c
   16e24:	bl	11290 <__memcpy_chk@plt>
   16e28:	mvn	r5, #0
   16e2c:	mov	r6, r8
   16e30:	b	16e74 <__assert_fail@plt+0x5998>
   16e34:	cmp	r5, r4
   16e38:	movcs	r5, r4
   16e3c:	sub	r6, r6, r5
   16e40:	sub	r4, r4, r5
   16e44:	mov	r2, r5
   16e48:	add	r3, sp, #76	; 0x4c
   16e4c:	add	r1, r3, r4
   16e50:	mov	r0, r6
   16e54:	bl	111e8 <memcpy@plt>
   16e58:	cmp	r4, #0
   16e5c:	beq	16a68 <__assert_fail@plt+0x558c>
   16e60:	sub	r6, r6, fp
   16e64:	mov	r2, fp
   16e68:	ldr	r1, [sp, #20]
   16e6c:	mov	r0, r6
   16e70:	bl	111e8 <memcpy@plt>
   16e74:	ldrb	r3, [sl]
   16e78:	cmp	r3, #0
   16e7c:	beq	16e34 <__assert_fail@plt+0x5958>
   16e80:	cmp	r3, #255	; 0xff
   16e84:	movne	r5, r3
   16e88:	moveq	r5, r4
   16e8c:	add	sl, sl, #1
   16e90:	b	16e34 <__assert_fail@plt+0x5958>
   16e94:	ldrd	r2, [sp, #184]	; 0xb8
   16e98:	cmp	r3, #0
   16e9c:	cmpeq	r2, #1
   16ea0:	movls	r7, #0
   16ea4:	bls	16a78 <__assert_fail@plt+0x559c>
   16ea8:	mov	r7, #1
   16eac:	mov	r2, #1
   16eb0:	mov	r3, #0
   16eb4:	ldr	r1, [sp, #40]	; 0x28
   16eb8:	ldrd	r4, [sp, #184]	; 0xb8
   16ebc:	mul	r0, r1, r3
   16ec0:	umull	r2, r3, r2, r1
   16ec4:	add	r3, r0, r3
   16ec8:	cmp	r5, r3
   16ecc:	cmpeq	r4, r2
   16ed0:	bls	16a78 <__assert_fail@plt+0x559c>
   16ed4:	add	r7, r7, #1
   16ed8:	cmp	r7, #8
   16edc:	bne	16ebc <__assert_fail@plt+0x59e0>
   16ee0:	and	r3, r9, #256	; 0x100
   16ee4:	tst	r9, #64	; 0x40
   16ee8:	bne	16efc <__assert_fail@plt+0x5a20>
   16eec:	ldr	r2, [sp, #32]
   16ef0:	b	16f14 <__assert_fail@plt+0x5a38>
   16ef4:	tst	r9, #64	; 0x40
   16ef8:	beq	16f5c <__assert_fail@plt+0x5a80>
   16efc:	ldr	r0, [sp, #36]	; 0x24
   16f00:	add	r2, r0, #648	; 0x288
   16f04:	mov	r1, #32
   16f08:	strb	r1, [r0, #647]	; 0x287
   16f0c:	cmp	r7, #0
   16f10:	beq	16f64 <__assert_fail@plt+0x5a88>
   16f14:	ldr	ip, [sp, #44]	; 0x2c
   16f18:	cmp	ip, #0
   16f1c:	cmpeq	r7, #1
   16f20:	beq	16f9c <__assert_fail@plt+0x5ac0>
   16f24:	mov	r0, r2
   16f28:	movw	r1, #54136	; 0xd378
   16f2c:	movt	r1, #1
   16f30:	ldrb	r1, [r1, r7]
   16f34:	strb	r1, [r0], #1
   16f38:	str	r0, [sp, #32]
   16f3c:	cmp	r3, #0
   16f40:	beq	16a84 <__assert_fail@plt+0x55a8>
   16f44:	cmp	ip, #0
   16f48:	movne	r3, #105	; 0x69
   16f4c:	strbne	r3, [r2, #1]
   16f50:	addne	r2, r2, #2
   16f54:	ldreq	r2, [sp, #32]
   16f58:	b	16f70 <__assert_fail@plt+0x5a94>
   16f5c:	ldr	r2, [sp, #32]
   16f60:	b	16f0c <__assert_fail@plt+0x5a30>
   16f64:	cmp	r3, #0
   16f68:	streq	r2, [sp, #32]
   16f6c:	beq	16a84 <__assert_fail@plt+0x55a8>
   16f70:	mov	r3, #66	; 0x42
   16f74:	strb	r3, [r2], #1
   16f78:	str	r2, [sp, #32]
   16f7c:	b	16a84 <__assert_fail@plt+0x55a8>
   16f80:	cmp	r6, #0
   16f84:	bne	16bdc <__assert_fail@plt+0x5700>
   16f88:	tst	r9, #8
   16f8c:	beq	16bdc <__assert_fail@plt+0x5700>
   16f90:	ldr	r8, [sp, #32]
   16f94:	mov	r6, #0
   16f98:	b	16c84 <__assert_fail@plt+0x57a8>
   16f9c:	mov	r1, r2
   16fa0:	mov	r2, #107	; 0x6b
   16fa4:	strb	r2, [r1], #1
   16fa8:	str	r1, [sp, #32]
   16fac:	cmp	r3, #0
   16fb0:	beq	16a84 <__assert_fail@plt+0x55a8>
   16fb4:	ldr	r2, [sp, #32]
   16fb8:	b	16f70 <__assert_fail@plt+0x5a94>
   16fbc:	strd	r4, [sp, #-20]!	; 0xffffffec
   16fc0:	strd	r6, [sp, #8]
   16fc4:	str	lr, [sp, #16]
   16fc8:	sub	sp, sp, #20
   16fcc:	mov	r7, r1
   16fd0:	mov	r6, r2
   16fd4:	subs	r4, r0, #0
   16fd8:	beq	1705c <__assert_fail@plt+0x5b80>
   16fdc:	ldrb	r3, [r4]
   16fe0:	cmp	r3, #39	; 0x27
   16fe4:	addeq	r4, r4, #1
   16fe8:	moveq	r5, #4
   16fec:	movne	r5, #0
   16ff0:	movw	r1, #54136	; 0xd378
   16ff4:	movt	r1, #1
   16ff8:	mov	r3, #4
   16ffc:	add	r2, r1, #12
   17000:	add	r1, r1, #20
   17004:	mov	r0, r4
   17008:	bl	1ab08 <__assert_fail@plt+0x962c>
   1700c:	cmp	r0, #0
   17010:	blt	170ac <__assert_fail@plt+0x5bd0>
   17014:	movw	r3, #54136	; 0xd378
   17018:	movt	r3, #1
   1701c:	add	r3, r3, r0, lsl #2
   17020:	ldr	r3, [r3, #12]
   17024:	orr	r5, r5, r3
   17028:	mov	r2, #1
   1702c:	mov	r3, #0
   17030:	strd	r2, [r6]
   17034:	str	r5, [r7]
   17038:	mov	r0, #0
   1703c:	ldrd	r2, [r6]
   17040:	orrs	r3, r2, r3
   17044:	beq	17148 <__assert_fail@plt+0x5c6c>
   17048:	add	sp, sp, #20
   1704c:	ldrd	r4, [sp]
   17050:	ldrd	r6, [sp, #8]
   17054:	add	sp, sp, #16
   17058:	pop	{pc}		; (ldr pc, [sp], #4)
   1705c:	movw	r0, #54188	; 0xd3ac
   17060:	movt	r0, #1
   17064:	bl	112f0 <getenv@plt>
   17068:	subs	r4, r0, #0
   1706c:	bne	16fdc <__assert_fail@plt+0x5b00>
   17070:	movw	r0, #54200	; 0xd3b8
   17074:	movt	r0, #1
   17078:	bl	112f0 <getenv@plt>
   1707c:	subs	r4, r0, #0
   17080:	bne	16fdc <__assert_fail@plt+0x5b00>
   17084:	movw	r0, #53120	; 0xcf80
   17088:	movt	r0, #1
   1708c:	bl	112f0 <getenv@plt>
   17090:	cmp	r0, #0
   17094:	moveq	r2, #1024	; 0x400
   17098:	movne	r2, #512	; 0x200
   1709c:	mov	r3, #0
   170a0:	strd	r2, [r6]
   170a4:	mov	r5, #0
   170a8:	b	17034 <__assert_fail@plt+0x5b58>
   170ac:	movw	r3, #54212	; 0xd3c4
   170b0:	movt	r3, #1
   170b4:	str	r3, [sp]
   170b8:	mov	r3, r6
   170bc:	mov	r2, #0
   170c0:	add	r1, sp, #12
   170c4:	mov	r0, r4
   170c8:	bl	1a2ec <__assert_fail@plt+0x8e10>
   170cc:	cmp	r0, #0
   170d0:	bne	17128 <__assert_fail@plt+0x5c4c>
   170d4:	ldrb	r3, [r4]
   170d8:	sub	r3, r3, #48	; 0x30
   170dc:	uxtb	r3, r3
   170e0:	cmp	r3, #9
   170e4:	bls	17034 <__assert_fail@plt+0x5b58>
   170e8:	ldr	r2, [sp, #12]
   170ec:	cmp	r2, r4
   170f0:	beq	17110 <__assert_fail@plt+0x5c34>
   170f4:	ldrb	r3, [r4, #1]!
   170f8:	sub	r3, r3, #48	; 0x30
   170fc:	uxtb	r3, r3
   17100:	cmp	r3, #9
   17104:	bls	17034 <__assert_fail@plt+0x5b58>
   17108:	cmp	r2, r4
   1710c:	bne	170f4 <__assert_fail@plt+0x5c18>
   17110:	ldrb	r3, [r4, #-1]
   17114:	cmp	r3, #66	; 0x42
   17118:	orrne	r5, r5, #128	; 0x80
   1711c:	beq	17134 <__assert_fail@plt+0x5c58>
   17120:	orr	r5, r5, #32
   17124:	b	17034 <__assert_fail@plt+0x5b58>
   17128:	mov	r3, #0
   1712c:	str	r3, [r7]
   17130:	b	1703c <__assert_fail@plt+0x5b60>
   17134:	orr	r5, r5, #384	; 0x180
   17138:	ldrb	r3, [r4, #-2]
   1713c:	cmp	r3, #105	; 0x69
   17140:	bne	17034 <__assert_fail@plt+0x5b58>
   17144:	b	17120 <__assert_fail@plt+0x5c44>
   17148:	movw	r0, #53120	; 0xcf80
   1714c:	movt	r0, #1
   17150:	bl	112f0 <getenv@plt>
   17154:	cmp	r0, #0
   17158:	moveq	r2, #1024	; 0x400
   1715c:	movne	r2, #512	; 0x200
   17160:	mov	r3, #0
   17164:	strd	r2, [r6]
   17168:	mov	r0, #4
   1716c:	b	17048 <__assert_fail@plt+0x5b6c>
   17170:	strd	r4, [sp, #-16]!
   17174:	str	r6, [sp, #8]
   17178:	str	lr, [sp, #12]
   1717c:	sub	sp, sp, #16
   17180:	movw	ip, #57824	; 0xe1e0
   17184:	movt	ip, #2
   17188:	ldr	r4, [ip]
   1718c:	mov	lr, #0
   17190:	str	lr, [ip]
   17194:	cmp	r0, #2
   17198:	beq	171cc <__assert_fail@plt+0x5cf0>
   1719c:	movw	r3, #57824	; 0xe1e0
   171a0:	movt	r3, #2
   171a4:	str	r4, [r3]
   171a8:	movw	r3, #57808	; 0xe1d0
   171ac:	movt	r3, #2
   171b0:	mov	r2, #0
   171b4:	str	r2, [r3]
   171b8:	add	sp, sp, #16
   171bc:	ldrd	r4, [sp]
   171c0:	ldr	r6, [sp, #8]
   171c4:	add	sp, sp, #12
   171c8:	pop	{pc}		; (ldr pc, [sp], #4)
   171cc:	mov	r6, r3
   171d0:	mov	r5, r2
   171d4:	str	lr, [sp]
   171d8:	movw	r3, #54252	; 0xd3ec
   171dc:	movt	r3, #1
   171e0:	movw	r2, #54300	; 0xd41c
   171e4:	movt	r2, #1
   171e8:	bl	1135c <getopt_long@plt>
   171ec:	cmn	r0, #1
   171f0:	beq	1719c <__assert_fail@plt+0x5cc0>
   171f4:	cmp	r0, #104	; 0x68
   171f8:	beq	17234 <__assert_fail@plt+0x5d58>
   171fc:	cmp	r0, #118	; 0x76
   17200:	bne	1719c <__assert_fail@plt+0x5cc0>
   17204:	add	r3, sp, #40	; 0x28
   17208:	str	r3, [sp, #12]
   1720c:	movw	r0, #57820	; 0xe1dc
   17210:	movt	r0, #2
   17214:	str	r3, [sp]
   17218:	ldr	r3, [sp, #32]
   1721c:	mov	r2, r6
   17220:	mov	r1, r5
   17224:	ldr	r0, [r0]
   17228:	bl	19bc4 <__assert_fail@plt+0x86e8>
   1722c:	mov	r0, #0
   17230:	bl	11374 <exit@plt>
   17234:	mov	r0, #0
   17238:	ldr	r3, [sp, #36]	; 0x24
   1723c:	blx	r3
   17240:	b	1719c <__assert_fail@plt+0x5cc0>
   17244:	strd	r4, [sp, #-16]!
   17248:	str	r6, [sp, #8]
   1724c:	str	lr, [sp, #12]
   17250:	sub	sp, sp, #16
   17254:	mov	r5, r2
   17258:	mov	r6, r3
   1725c:	movw	r3, #57824	; 0xe1e0
   17260:	movt	r3, #2
   17264:	ldr	r4, [r3]
   17268:	mov	r2, #1
   1726c:	str	r2, [r3]
   17270:	movw	r2, #51668	; 0xc9d4
   17274:	movt	r2, #1
   17278:	movw	ip, #54300	; 0xd41c
   1727c:	movt	ip, #1
   17280:	mov	r3, #0
   17284:	str	r3, [sp]
   17288:	movw	r3, #54252	; 0xd3ec
   1728c:	movt	r3, #1
   17290:	ldrb	lr, [sp, #36]	; 0x24
   17294:	cmp	lr, #0
   17298:	moveq	r2, ip
   1729c:	bl	1135c <getopt_long@plt>
   172a0:	cmn	r0, #1
   172a4:	beq	172dc <__assert_fail@plt+0x5e00>
   172a8:	cmp	r0, #104	; 0x68
   172ac:	beq	172d0 <__assert_fail@plt+0x5df4>
   172b0:	cmp	r0, #118	; 0x76
   172b4:	beq	172fc <__assert_fail@plt+0x5e20>
   172b8:	movw	r3, #57724	; 0xe17c
   172bc:	movt	r3, #2
   172c0:	ldr	r0, [r3]
   172c4:	ldr	r3, [sp, #40]	; 0x28
   172c8:	blx	r3
   172cc:	b	172dc <__assert_fail@plt+0x5e00>
   172d0:	mov	r0, #0
   172d4:	ldr	r3, [sp, #40]	; 0x28
   172d8:	blx	r3
   172dc:	movw	r3, #57824	; 0xe1e0
   172e0:	movt	r3, #2
   172e4:	str	r4, [r3]
   172e8:	add	sp, sp, #16
   172ec:	ldrd	r4, [sp]
   172f0:	ldr	r6, [sp, #8]
   172f4:	add	sp, sp, #12
   172f8:	pop	{pc}		; (ldr pc, [sp], #4)
   172fc:	add	r3, sp, #44	; 0x2c
   17300:	str	r3, [sp, #12]
   17304:	movw	r0, #57820	; 0xe1dc
   17308:	movt	r0, #2
   1730c:	str	r3, [sp]
   17310:	ldr	r3, [sp, #32]
   17314:	mov	r2, r6
   17318:	mov	r1, r5
   1731c:	ldr	r0, [r0]
   17320:	bl	19bc4 <__assert_fail@plt+0x86e8>
   17324:	mov	r0, #0
   17328:	bl	11374 <exit@plt>
   1732c:	strd	r4, [sp, #-16]!
   17330:	str	r6, [sp, #8]
   17334:	str	lr, [sp, #12]
   17338:	subs	r4, r0, #0
   1733c:	beq	173d8 <__assert_fail@plt+0x5efc>
   17340:	mov	r1, #47	; 0x2f
   17344:	mov	r0, r4
   17348:	bl	11458 <strrchr@plt>
   1734c:	subs	r5, r0, #0
   17350:	beq	173b0 <__assert_fail@plt+0x5ed4>
   17354:	add	r6, r5, #1
   17358:	sub	r3, r6, r4
   1735c:	cmp	r3, #6
   17360:	ble	173b0 <__assert_fail@plt+0x5ed4>
   17364:	mov	r2, #7
   17368:	movw	r1, #54376	; 0xd468
   1736c:	movt	r1, #1
   17370:	sub	r0, r5, #6
   17374:	bl	11494 <strncmp@plt>
   17378:	cmp	r0, #0
   1737c:	bne	173b0 <__assert_fail@plt+0x5ed4>
   17380:	mov	r2, #3
   17384:	movw	r1, #54384	; 0xd470
   17388:	movt	r1, #1
   1738c:	mov	r0, r6
   17390:	bl	11494 <strncmp@plt>
   17394:	cmp	r0, #0
   17398:	movne	r4, r6
   1739c:	bne	173b0 <__assert_fail@plt+0x5ed4>
   173a0:	add	r4, r5, #4
   173a4:	movw	r3, #57800	; 0xe1c8
   173a8:	movt	r3, #2
   173ac:	str	r4, [r3]
   173b0:	movw	r3, #58460	; 0xe45c
   173b4:	movt	r3, #2
   173b8:	str	r4, [r3]
   173bc:	movw	r3, #57804	; 0xe1cc
   173c0:	movt	r3, #2
   173c4:	str	r4, [r3]
   173c8:	ldrd	r4, [sp]
   173cc:	ldr	r6, [sp, #8]
   173d0:	add	sp, sp, #12
   173d4:	pop	{pc}		; (ldr pc, [sp], #4)
   173d8:	movw	r3, #57816	; 0xe1d8
   173dc:	movt	r3, #2
   173e0:	ldr	r3, [r3]
   173e4:	mov	r2, #55	; 0x37
   173e8:	mov	r1, #1
   173ec:	movw	r0, #54320	; 0xd430
   173f0:	movt	r0, #1
   173f4:	bl	1129c <fwrite@plt>
   173f8:	bl	114ac <abort@plt>
   173fc:	mov	r2, #0
   17400:	mov	r3, #0
   17404:	strd	r2, [r0]
   17408:	strd	r2, [r0, #8]
   1740c:	strd	r2, [r0, #16]
   17410:	strd	r2, [r0, #24]
   17414:	strd	r2, [r0, #32]
   17418:	strd	r2, [r0, #40]	; 0x28
   1741c:	cmp	r1, #10
   17420:	beq	1742c <__assert_fail@plt+0x5f50>
   17424:	str	r1, [r0]
   17428:	bx	lr
   1742c:	str	r4, [sp, #-8]!
   17430:	str	lr, [sp, #4]
   17434:	bl	114ac <abort@plt>
   17438:	strd	r4, [sp, #-16]!
   1743c:	str	r6, [sp, #8]
   17440:	str	lr, [sp, #12]
   17444:	mov	r5, r0
   17448:	mov	r6, r1
   1744c:	mov	r2, #5
   17450:	mov	r1, r0
   17454:	mov	r0, #0
   17458:	bl	11230 <dcgettext@plt>
   1745c:	mov	r4, r0
   17460:	cmp	r5, r0
   17464:	beq	1747c <__assert_fail@plt+0x5fa0>
   17468:	mov	r0, r4
   1746c:	ldrd	r4, [sp]
   17470:	ldr	r6, [sp, #8]
   17474:	add	sp, sp, #12
   17478:	pop	{pc}		; (ldr pc, [sp], #4)
   1747c:	bl	1afac <__assert_fail@plt+0x9ad0>
   17480:	ldrb	r3, [r0]
   17484:	bic	r3, r3, #32
   17488:	cmp	r3, #85	; 0x55
   1748c:	bne	17510 <__assert_fail@plt+0x6034>
   17490:	ldrb	r3, [r0, #1]
   17494:	bic	r3, r3, #32
   17498:	cmp	r3, #84	; 0x54
   1749c:	bne	174d4 <__assert_fail@plt+0x5ff8>
   174a0:	ldrb	r3, [r0, #2]
   174a4:	bic	r3, r3, #32
   174a8:	cmp	r3, #70	; 0x46
   174ac:	bne	174d4 <__assert_fail@plt+0x5ff8>
   174b0:	ldrb	r3, [r0, #3]
   174b4:	cmp	r3, #45	; 0x2d
   174b8:	bne	174d4 <__assert_fail@plt+0x5ff8>
   174bc:	ldrb	r3, [r0, #4]
   174c0:	cmp	r3, #56	; 0x38
   174c4:	bne	174d4 <__assert_fail@plt+0x5ff8>
   174c8:	ldrb	r3, [r0, #5]
   174cc:	cmp	r3, #0
   174d0:	beq	174f0 <__assert_fail@plt+0x6014>
   174d4:	movw	r4, #54472	; 0xd4c8
   174d8:	movt	r4, #1
   174dc:	movw	r3, #54492	; 0xd4dc
   174e0:	movt	r3, #1
   174e4:	cmp	r6, #9
   174e8:	movne	r4, r3
   174ec:	b	17468 <__assert_fail@plt+0x5f8c>
   174f0:	ldrb	r2, [r4]
   174f4:	movw	r4, #54488	; 0xd4d8
   174f8:	movt	r4, #1
   174fc:	movw	r3, #54476	; 0xd4cc
   17500:	movt	r3, #1
   17504:	cmp	r2, #96	; 0x60
   17508:	movne	r4, r3
   1750c:	b	17468 <__assert_fail@plt+0x5f8c>
   17510:	cmp	r3, #71	; 0x47
   17514:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17518:	ldrb	r3, [r0, #1]
   1751c:	bic	r3, r3, #32
   17520:	cmp	r3, #66	; 0x42
   17524:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17528:	ldrb	r3, [r0, #2]
   1752c:	cmp	r3, #49	; 0x31
   17530:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17534:	ldrb	r3, [r0, #3]
   17538:	cmp	r3, #56	; 0x38
   1753c:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17540:	ldrb	r3, [r0, #4]
   17544:	cmp	r3, #48	; 0x30
   17548:	bne	174d4 <__assert_fail@plt+0x5ff8>
   1754c:	ldrb	r3, [r0, #5]
   17550:	cmp	r3, #51	; 0x33
   17554:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17558:	ldrb	r3, [r0, #6]
   1755c:	cmp	r3, #48	; 0x30
   17560:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17564:	ldrb	r3, [r0, #7]
   17568:	cmp	r3, #0
   1756c:	bne	174d4 <__assert_fail@plt+0x5ff8>
   17570:	ldrb	r2, [r4]
   17574:	movw	r4, #54484	; 0xd4d4
   17578:	movt	r4, #1
   1757c:	movw	r3, #54480	; 0xd4d0
   17580:	movt	r3, #1
   17584:	cmp	r2, #96	; 0x60
   17588:	movne	r4, r3
   1758c:	b	17468 <__assert_fail@plt+0x5f8c>
   17590:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17594:	strd	r6, [sp, #8]
   17598:	strd	r8, [sp, #16]
   1759c:	strd	sl, [sp, #24]
   175a0:	str	lr, [sp, #32]
   175a4:	sub	sp, sp, #116	; 0x74
   175a8:	str	r0, [sp, #64]	; 0x40
   175ac:	mov	r8, r1
   175b0:	str	r2, [sp, #48]	; 0x30
   175b4:	str	r3, [sp, #24]
   175b8:	ldr	r7, [sp, #152]	; 0x98
   175bc:	bl	112b4 <__ctype_get_mb_cur_max@plt>
   175c0:	str	r0, [sp, #76]	; 0x4c
   175c4:	ldr	r3, [sp, #156]	; 0x9c
   175c8:	ubfx	r3, r3, #1, #1
   175cc:	str	r3, [sp, #32]
   175d0:	mov	r3, #1
   175d4:	str	r3, [sp, #40]	; 0x28
   175d8:	mov	r3, #0
   175dc:	str	r3, [sp, #68]	; 0x44
   175e0:	str	r3, [sp, #36]	; 0x24
   175e4:	str	r3, [sp, #28]
   175e8:	str	r3, [sp, #52]	; 0x34
   175ec:	str	r3, [sp, #60]	; 0x3c
   175f0:	str	r3, [sp, #72]	; 0x48
   175f4:	movw	r3, #54496	; 0xd4e0
   175f8:	movt	r3, #1
   175fc:	str	r3, [sp, #80]	; 0x50
   17600:	mov	r9, r8
   17604:	mov	sl, r7
   17608:	cmp	sl, #10
   1760c:	ldrls	pc, [pc, sl, lsl #2]
   17610:	b	177d4 <__assert_fail@plt+0x62f8>
   17614:	andeq	r7, r1, r4, ror r6
   17618:	andeq	r7, r1, r8, asr #12
   1761c:	andeq	r7, r1, ip, lsr #15
   17620:	andeq	r7, r1, r0, asr #12
   17624:	andeq	r7, r1, r0, ror #14
   17628:	andeq	r7, r1, r4, lsl #13
   1762c:	andeq	r8, r1, r0, asr sl
   17630:	ldrdeq	r7, [r1], -r8
   17634:	andeq	r7, r1, r0, asr #13
   17638:	andeq	r7, r1, r0, asr #13
   1763c:	andeq	r7, r1, r0, asr #13
   17640:	mov	r3, #1
   17644:	str	r3, [sp, #28]
   17648:	mov	r3, #1
   1764c:	str	r3, [sp, #32]
   17650:	str	r3, [sp, #52]	; 0x34
   17654:	movw	r3, #54492	; 0xd4dc
   17658:	movt	r3, #1
   1765c:	str	r3, [sp, #60]	; 0x3c
   17660:	mov	fp, #0
   17664:	mov	sl, #2
   17668:	mov	r6, #0
   1766c:	ldr	r8, [sp, #64]	; 0x40
   17670:	b	17ee8 <__assert_fail@plt+0x6a0c>
   17674:	mov	fp, sl
   17678:	mov	r3, #0
   1767c:	str	r3, [sp, #32]
   17680:	b	17668 <__assert_fail@plt+0x618c>
   17684:	ldr	r3, [sp, #32]
   17688:	cmp	r3, #0
   1768c:	bne	177ec <__assert_fail@plt+0x6310>
   17690:	cmp	r9, #0
   17694:	beq	17810 <__assert_fail@plt+0x6334>
   17698:	mov	r3, #34	; 0x22
   1769c:	ldr	r2, [sp, #64]	; 0x40
   176a0:	strb	r3, [r2]
   176a4:	mov	fp, #1
   176a8:	str	fp, [sp, #28]
   176ac:	str	fp, [sp, #52]	; 0x34
   176b0:	movw	r3, #54472	; 0xd4c8
   176b4:	movt	r3, #1
   176b8:	str	r3, [sp, #60]	; 0x3c
   176bc:	b	17668 <__assert_fail@plt+0x618c>
   176c0:	cmp	sl, #10
   176c4:	bne	176f8 <__assert_fail@plt+0x621c>
   176c8:	ldr	r3, [sp, #32]
   176cc:	cmp	r3, #0
   176d0:	movne	fp, #0
   176d4:	beq	17720 <__assert_fail@plt+0x6244>
   176d8:	ldr	r0, [sp, #168]	; 0xa8
   176dc:	bl	11380 <strlen@plt>
   176e0:	str	r0, [sp, #52]	; 0x34
   176e4:	ldr	r3, [sp, #168]	; 0xa8
   176e8:	str	r3, [sp, #60]	; 0x3c
   176ec:	mov	r3, #1
   176f0:	str	r3, [sp, #28]
   176f4:	b	17668 <__assert_fail@plt+0x618c>
   176f8:	mov	r1, sl
   176fc:	ldr	r0, [sp, #80]	; 0x50
   17700:	bl	17438 <__assert_fail@plt+0x5f5c>
   17704:	str	r0, [sp, #164]	; 0xa4
   17708:	mov	r1, sl
   1770c:	movw	r0, #54492	; 0xd4dc
   17710:	movt	r0, #1
   17714:	bl	17438 <__assert_fail@plt+0x5f5c>
   17718:	str	r0, [sp, #168]	; 0xa8
   1771c:	b	176c8 <__assert_fail@plt+0x61ec>
   17720:	ldr	r3, [sp, #164]	; 0xa4
   17724:	ldrb	r3, [r3]
   17728:	cmp	r3, #0
   1772c:	beq	17758 <__assert_fail@plt+0x627c>
   17730:	ldr	r2, [sp, #164]	; 0xa4
   17734:	mov	fp, #0
   17738:	ldr	r1, [sp, #64]	; 0x40
   1773c:	cmp	r9, fp
   17740:	strbhi	r3, [r1, fp]
   17744:	add	fp, fp, #1
   17748:	ldrb	r3, [r2, #1]!
   1774c:	cmp	r3, #0
   17750:	bne	1773c <__assert_fail@plt+0x6260>
   17754:	b	176d8 <__assert_fail@plt+0x61fc>
   17758:	mov	fp, #0
   1775c:	b	176d8 <__assert_fail@plt+0x61fc>
   17760:	ldr	r3, [sp, #32]
   17764:	cmp	r3, #0
   17768:	bne	17648 <__assert_fail@plt+0x616c>
   1776c:	mov	r3, #1
   17770:	str	r3, [sp, #28]
   17774:	cmp	r9, #0
   17778:	beq	1782c <__assert_fail@plt+0x6350>
   1777c:	mov	r3, #39	; 0x27
   17780:	ldr	r2, [sp, #64]	; 0x40
   17784:	strb	r3, [r2]
   17788:	mov	r3, #0
   1778c:	str	r3, [sp, #32]
   17790:	mov	fp, #1
   17794:	str	fp, [sp, #52]	; 0x34
   17798:	movw	r3, #54492	; 0xd4dc
   1779c:	movt	r3, #1
   177a0:	str	r3, [sp, #60]	; 0x3c
   177a4:	mov	sl, #2
   177a8:	b	17668 <__assert_fail@plt+0x618c>
   177ac:	ldr	r3, [sp, #32]
   177b0:	cmp	r3, #0
   177b4:	beq	17774 <__assert_fail@plt+0x6298>
   177b8:	mov	r3, #1
   177bc:	str	r3, [sp, #52]	; 0x34
   177c0:	movw	r3, #54492	; 0xd4dc
   177c4:	movt	r3, #1
   177c8:	str	r3, [sp, #60]	; 0x3c
   177cc:	mov	fp, #0
   177d0:	b	17668 <__assert_fail@plt+0x618c>
   177d4:	bl	114ac <abort@plt>
   177d8:	mov	fp, #0
   177dc:	str	fp, [sp, #32]
   177e0:	mov	r3, #1
   177e4:	str	r3, [sp, #28]
   177e8:	b	17668 <__assert_fail@plt+0x618c>
   177ec:	ldr	r3, [sp, #32]
   177f0:	str	r3, [sp, #28]
   177f4:	mov	r3, #1
   177f8:	str	r3, [sp, #52]	; 0x34
   177fc:	movw	r3, #54472	; 0xd4c8
   17800:	movt	r3, #1
   17804:	str	r3, [sp, #60]	; 0x3c
   17808:	mov	fp, #0
   1780c:	b	17668 <__assert_fail@plt+0x618c>
   17810:	mov	fp, #1
   17814:	str	fp, [sp, #28]
   17818:	str	fp, [sp, #52]	; 0x34
   1781c:	movw	r3, #54472	; 0xd4c8
   17820:	movt	r3, #1
   17824:	str	r3, [sp, #60]	; 0x3c
   17828:	b	17668 <__assert_fail@plt+0x618c>
   1782c:	mov	r3, #0
   17830:	str	r3, [sp, #32]
   17834:	mov	fp, #1
   17838:	str	fp, [sp, #52]	; 0x34
   1783c:	movw	r3, #54492	; 0xd4dc
   17840:	movt	r3, #1
   17844:	str	r3, [sp, #60]	; 0x3c
   17848:	mov	sl, #2
   1784c:	b	17668 <__assert_fail@plt+0x618c>
   17850:	mov	r3, r2
   17854:	add	r4, r6, r2
   17858:	ldr	r2, [sp, #24]
   1785c:	cmp	r3, #1
   17860:	movls	r3, #0
   17864:	movhi	r3, #1
   17868:	cmn	r2, #1
   1786c:	movne	r3, #0
   17870:	cmp	r3, #0
   17874:	beq	17884 <__assert_fail@plt+0x63a8>
   17878:	ldr	r0, [sp, #48]	; 0x30
   1787c:	bl	11380 <strlen@plt>
   17880:	str	r0, [sp, #24]
   17884:	ldr	r3, [sp, #24]
   17888:	cmp	r4, r3
   1788c:	bhi	18a78 <__assert_fail@plt+0x759c>
   17890:	ldr	r3, [sp, #48]	; 0x30
   17894:	add	r4, r3, r6
   17898:	ldr	r2, [sp, #52]	; 0x34
   1789c:	ldr	r1, [sp, #60]	; 0x3c
   178a0:	mov	r0, r4
   178a4:	bl	11218 <memcmp@plt>
   178a8:	cmp	r0, #0
   178ac:	bne	18a78 <__assert_fail@plt+0x759c>
   178b0:	ldr	r3, [sp, #32]
   178b4:	cmp	r3, #0
   178b8:	bne	17ac8 <__assert_fail@plt+0x65ec>
   178bc:	ldrb	r4, [r4]
   178c0:	cmp	r4, #126	; 0x7e
   178c4:	ldrls	pc, [pc, r4, lsl #2]
   178c8:	b	1837c <__assert_fail@plt+0x6ea0>
   178cc:	andeq	r7, r1, ip, lsl #22
   178d0:	andeq	r8, r1, ip, ror r3
   178d4:	andeq	r8, r1, ip, ror r3
   178d8:	andeq	r8, r1, ip, ror r3
   178dc:	andeq	r8, r1, ip, ror r3
   178e0:	andeq	r8, r1, ip, ror r3
   178e4:	andeq	r8, r1, ip, ror r3
   178e8:	andeq	r8, r1, r4, lsr #4
   178ec:	andeq	r7, r1, r8, lsr #27
   178f0:	andeq	r8, r1, ip, asr #2
   178f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   178f8:	andeq	r8, r1, r0, ror #2
   178fc:			; <UNDEFINED> instruction: 0x00017dbc
   17900:	ldrdeq	r7, [r1], -r0
   17904:	andeq	r8, r1, ip, ror r3
   17908:	andeq	r8, r1, ip, ror r3
   1790c:	andeq	r8, r1, ip, ror r3
   17910:	andeq	r8, r1, ip, ror r3
   17914:	andeq	r8, r1, ip, ror r3
   17918:	andeq	r8, r1, ip, ror r3
   1791c:	andeq	r8, r1, ip, ror r3
   17920:	andeq	r8, r1, ip, ror r3
   17924:	andeq	r8, r1, ip, ror r3
   17928:	andeq	r8, r1, ip, ror r3
   1792c:	andeq	r8, r1, ip, ror r3
   17930:	andeq	r8, r1, ip, ror r3
   17934:	andeq	r8, r1, ip, ror r3
   17938:	andeq	r8, r1, ip, ror r3
   1793c:	andeq	r8, r1, ip, ror r3
   17940:	andeq	r8, r1, ip, ror r3
   17944:	andeq	r8, r1, ip, ror r3
   17948:	andeq	r8, r1, ip, ror r3
   1794c:	muleq	r1, r8, r2
   17950:			; <UNDEFINED> instruction: 0x000182bc
   17954:			; <UNDEFINED> instruction: 0x000182bc
   17958:	andeq	r8, r1, r4, asr r2
   1795c:			; <UNDEFINED> instruction: 0x000182bc
   17960:	ldrdeq	r8, [r1], -ip
   17964:			; <UNDEFINED> instruction: 0x000182bc
   17968:	ldrdeq	r8, [r1], -ip
   1796c:			; <UNDEFINED> instruction: 0x000182bc
   17970:			; <UNDEFINED> instruction: 0x000182bc
   17974:			; <UNDEFINED> instruction: 0x000182bc
   17978:	ldrdeq	r8, [r1], -ip
   1797c:	ldrdeq	r8, [r1], -ip
   17980:	ldrdeq	r8, [r1], -ip
   17984:	ldrdeq	r8, [r1], -ip
   17988:	ldrdeq	r8, [r1], -ip
   1798c:	ldrdeq	r8, [r1], -ip
   17990:	ldrdeq	r8, [r1], -ip
   17994:	ldrdeq	r8, [r1], -ip
   17998:	ldrdeq	r8, [r1], -ip
   1799c:	ldrdeq	r8, [r1], -ip
   179a0:	ldrdeq	r8, [r1], -ip
   179a4:	ldrdeq	r8, [r1], -ip
   179a8:	ldrdeq	r8, [r1], -ip
   179ac:	ldrdeq	r8, [r1], -ip
   179b0:	ldrdeq	r8, [r1], -ip
   179b4:	ldrdeq	r8, [r1], -ip
   179b8:			; <UNDEFINED> instruction: 0x000182bc
   179bc:			; <UNDEFINED> instruction: 0x000182bc
   179c0:			; <UNDEFINED> instruction: 0x000182bc
   179c4:			; <UNDEFINED> instruction: 0x000182bc
   179c8:	andeq	r7, r1, ip, lsr ip
   179cc:	andeq	r8, r1, ip, ror r3
   179d0:	ldrdeq	r8, [r1], -ip
   179d4:	ldrdeq	r8, [r1], -ip
   179d8:	ldrdeq	r8, [r1], -ip
   179dc:	ldrdeq	r8, [r1], -ip
   179e0:	ldrdeq	r8, [r1], -ip
   179e4:	ldrdeq	r8, [r1], -ip
   179e8:	ldrdeq	r8, [r1], -ip
   179ec:	ldrdeq	r8, [r1], -ip
   179f0:	ldrdeq	r8, [r1], -ip
   179f4:	ldrdeq	r8, [r1], -ip
   179f8:	ldrdeq	r8, [r1], -ip
   179fc:	ldrdeq	r8, [r1], -ip
   17a00:	ldrdeq	r8, [r1], -ip
   17a04:	ldrdeq	r8, [r1], -ip
   17a08:	ldrdeq	r8, [r1], -ip
   17a0c:	ldrdeq	r8, [r1], -ip
   17a10:	ldrdeq	r8, [r1], -ip
   17a14:	ldrdeq	r8, [r1], -ip
   17a18:	ldrdeq	r8, [r1], -ip
   17a1c:	ldrdeq	r8, [r1], -ip
   17a20:	ldrdeq	r8, [r1], -ip
   17a24:	ldrdeq	r8, [r1], -ip
   17a28:	ldrdeq	r8, [r1], -ip
   17a2c:	ldrdeq	r8, [r1], -ip
   17a30:	ldrdeq	r8, [r1], -ip
   17a34:	ldrdeq	r8, [r1], -ip
   17a38:			; <UNDEFINED> instruction: 0x000182bc
   17a3c:	andeq	r8, r1, r4, ror r1
   17a40:	ldrdeq	r8, [r1], -ip
   17a44:			; <UNDEFINED> instruction: 0x000182bc
   17a48:	ldrdeq	r8, [r1], -ip
   17a4c:			; <UNDEFINED> instruction: 0x000182bc
   17a50:	ldrdeq	r8, [r1], -ip
   17a54:	ldrdeq	r8, [r1], -ip
   17a58:	ldrdeq	r8, [r1], -ip
   17a5c:	ldrdeq	r8, [r1], -ip
   17a60:	ldrdeq	r8, [r1], -ip
   17a64:	ldrdeq	r8, [r1], -ip
   17a68:	ldrdeq	r8, [r1], -ip
   17a6c:	ldrdeq	r8, [r1], -ip
   17a70:	ldrdeq	r8, [r1], -ip
   17a74:	ldrdeq	r8, [r1], -ip
   17a78:	ldrdeq	r8, [r1], -ip
   17a7c:	ldrdeq	r8, [r1], -ip
   17a80:	ldrdeq	r8, [r1], -ip
   17a84:	ldrdeq	r8, [r1], -ip
   17a88:	ldrdeq	r8, [r1], -ip
   17a8c:	ldrdeq	r8, [r1], -ip
   17a90:	ldrdeq	r8, [r1], -ip
   17a94:	ldrdeq	r8, [r1], -ip
   17a98:	ldrdeq	r8, [r1], -ip
   17a9c:	ldrdeq	r8, [r1], -ip
   17aa0:	ldrdeq	r8, [r1], -ip
   17aa4:	ldrdeq	r8, [r1], -ip
   17aa8:	ldrdeq	r8, [r1], -ip
   17aac:	ldrdeq	r8, [r1], -ip
   17ab0:	ldrdeq	r8, [r1], -ip
   17ab4:	ldrdeq	r8, [r1], -ip
   17ab8:	andeq	r8, r1, r4, lsr r2
   17abc:			; <UNDEFINED> instruction: 0x000182bc
   17ac0:	andeq	r8, r1, r4, lsr r2
   17ac4:	andeq	r8, r1, r4, asr r2
   17ac8:	mov	r8, r9
   17acc:	mov	r7, sl
   17ad0:	b	189d0 <__assert_fail@plt+0x74f4>
   17ad4:	ldr	r3, [sp, #28]
   17ad8:	cmp	r3, #0
   17adc:	bne	17afc <__assert_fail@plt+0x6620>
   17ae0:	ldr	r3, [sp, #156]	; 0x9c
   17ae4:	tst	r3, #1
   17ae8:	bne	17ee4 <__assert_fail@plt+0x6a08>
   17aec:	ldr	r3, [sp, #28]
   17af0:	str	r3, [sp, #44]	; 0x2c
   17af4:	mov	r5, r3
   17af8:	b	17e04 <__assert_fail@plt+0x6928>
   17afc:	ldr	r3, [sp, #32]
   17b00:	cmp	r3, #0
   17b04:	bne	18980 <__assert_fail@plt+0x74a4>
   17b08:	str	r3, [sp, #44]	; 0x2c
   17b0c:	ldr	r3, [sp, #36]	; 0x24
   17b10:	eor	r3, r3, #1
   17b14:	cmp	sl, #2
   17b18:	movne	r3, #0
   17b1c:	andeq	r3, r3, #1
   17b20:	cmp	r3, #0
   17b24:	beq	17b7c <__assert_fail@plt+0x66a0>
   17b28:	cmp	r9, fp
   17b2c:	movhi	r2, #39	; 0x27
   17b30:	strbhi	r2, [r8, fp]
   17b34:	add	r2, fp, #1
   17b38:	cmp	r9, r2
   17b3c:	movhi	r1, #36	; 0x24
   17b40:	strbhi	r1, [r8, r2]
   17b44:	add	r2, fp, #2
   17b48:	cmp	r9, r2
   17b4c:	movhi	r1, #39	; 0x27
   17b50:	strbhi	r1, [r8, r2]
   17b54:	add	r2, fp, #3
   17b58:	cmp	r9, r2
   17b5c:	bls	18a3c <__assert_fail@plt+0x7560>
   17b60:	mov	r1, #92	; 0x5c
   17b64:	strb	r1, [r8, r2]
   17b68:	add	fp, fp, #4
   17b6c:	str	r3, [sp, #36]	; 0x24
   17b70:	mov	r5, #0
   17b74:	mov	r4, #48	; 0x30
   17b78:	b	17e50 <__assert_fail@plt+0x6974>
   17b7c:	cmp	r9, fp
   17b80:	bhi	17ba8 <__assert_fail@plt+0x66cc>
   17b84:	add	r1, fp, #1
   17b88:	ldr	r2, [sp, #56]	; 0x38
   17b8c:	cmp	r2, #0
   17b90:	bne	17bd0 <__assert_fail@plt+0x66f4>
   17b94:	mov	r3, r5
   17b98:	ldr	r5, [sp, #56]	; 0x38
   17b9c:	mov	fp, r1
   17ba0:	mov	r4, #48	; 0x30
   17ba4:	b	17e04 <__assert_fail@plt+0x6928>
   17ba8:	mov	r2, #92	; 0x5c
   17bac:	strb	r2, [r8, fp]
   17bb0:	add	r1, fp, #1
   17bb4:	ldr	r2, [sp, #56]	; 0x38
   17bb8:	cmp	r2, #0
   17bbc:	moveq	r3, r5
   17bc0:	moveq	r5, r2
   17bc4:	moveq	fp, r1
   17bc8:	moveq	r4, #48	; 0x30
   17bcc:	beq	17e50 <__assert_fail@plt+0x6974>
   17bd0:	add	r2, r6, #1
   17bd4:	ldr	r0, [sp, #24]
   17bd8:	cmp	r2, r0
   17bdc:	bcs	17bf8 <__assert_fail@plt+0x671c>
   17be0:	ldr	r0, [sp, #48]	; 0x30
   17be4:	ldrb	r2, [r0, r2]
   17be8:	sub	r2, r2, #48	; 0x30
   17bec:	uxtb	r2, r2
   17bf0:	cmp	r2, #9
   17bf4:	bls	17c10 <__assert_fail@plt+0x6734>
   17bf8:	mov	r2, r3
   17bfc:	mov	r3, r5
   17c00:	mov	r5, r2
   17c04:	mov	fp, r1
   17c08:	mov	r4, #48	; 0x30
   17c0c:	b	17e28 <__assert_fail@plt+0x694c>
   17c10:	cmp	r9, r1
   17c14:	movhi	r2, #48	; 0x30
   17c18:	strbhi	r2, [r8, r1]
   17c1c:	add	r2, fp, #2
   17c20:	cmp	r9, r2
   17c24:	movhi	r1, #48	; 0x30
   17c28:	strbhi	r1, [r8, r2]
   17c2c:	add	r1, fp, #3
   17c30:	b	17bf8 <__assert_fail@plt+0x671c>
   17c34:	mov	r3, #0
   17c38:	str	r3, [sp, #44]	; 0x2c
   17c3c:	cmp	sl, #2
   17c40:	beq	17c5c <__assert_fail@plt+0x6780>
   17c44:	cmp	sl, #5
   17c48:	beq	17c74 <__assert_fail@plt+0x6798>
   17c4c:	mov	r5, #0
   17c50:	mov	r3, r5
   17c54:	mov	r4, #63	; 0x3f
   17c58:	b	17e04 <__assert_fail@plt+0x6928>
   17c5c:	ldr	r3, [sp, #32]
   17c60:	cmp	r3, #0
   17c64:	bne	1898c <__assert_fail@plt+0x74b0>
   17c68:	mov	r5, r3
   17c6c:	mov	r4, #63	; 0x3f
   17c70:	b	1836c <__assert_fail@plt+0x6e90>
   17c74:	ldr	r3, [sp, #156]	; 0x9c
   17c78:	tst	r3, #4
   17c7c:	beq	187a4 <__assert_fail@plt+0x72c8>
   17c80:	add	r2, r6, #2
   17c84:	ldr	r3, [sp, #24]
   17c88:	cmp	r2, r3
   17c8c:	bcs	187b4 <__assert_fail@plt+0x72d8>
   17c90:	ldr	r3, [sp, #48]	; 0x30
   17c94:	add	r3, r3, r6
   17c98:	ldrb	r4, [r3, #1]
   17c9c:	cmp	r4, #63	; 0x3f
   17ca0:	movne	r5, #0
   17ca4:	movne	r3, r5
   17ca8:	movne	r4, #63	; 0x3f
   17cac:	bne	17e04 <__assert_fail@plt+0x6928>
   17cb0:	ldr	r3, [sp, #48]	; 0x30
   17cb4:	ldrb	r1, [r3, r2]
   17cb8:	sub	r3, r1, #33	; 0x21
   17cbc:	cmp	r3, #29
   17cc0:	ldrls	pc, [pc, r3, lsl #2]
   17cc4:	b	187c4 <__assert_fail@plt+0x72e8>
   17cc8:	andeq	r7, r1, r0, asr #26
   17ccc:	andeq	r8, r1, r4, asr #15
   17cd0:	andeq	r8, r1, r4, asr #15
   17cd4:	andeq	r8, r1, r4, asr #15
   17cd8:	andeq	r8, r1, r4, asr #15
   17cdc:	andeq	r8, r1, r4, asr #15
   17ce0:	andeq	r7, r1, r0, asr #26
   17ce4:	andeq	r7, r1, r0, asr #26
   17ce8:	andeq	r7, r1, r0, asr #26
   17cec:	andeq	r8, r1, r4, asr #15
   17cf0:	andeq	r8, r1, r4, asr #15
   17cf4:	andeq	r8, r1, r4, asr #15
   17cf8:	andeq	r7, r1, r0, asr #26
   17cfc:	andeq	r8, r1, r4, asr #15
   17d00:	andeq	r7, r1, r0, asr #26
   17d04:	andeq	r8, r1, r4, asr #15
   17d08:	andeq	r8, r1, r4, asr #15
   17d0c:	andeq	r8, r1, r4, asr #15
   17d10:	andeq	r8, r1, r4, asr #15
   17d14:	andeq	r8, r1, r4, asr #15
   17d18:	andeq	r8, r1, r4, asr #15
   17d1c:	andeq	r8, r1, r4, asr #15
   17d20:	andeq	r8, r1, r4, asr #15
   17d24:	andeq	r8, r1, r4, asr #15
   17d28:	andeq	r8, r1, r4, asr #15
   17d2c:	andeq	r8, r1, r4, asr #15
   17d30:	andeq	r8, r1, r4, asr #15
   17d34:	andeq	r7, r1, r0, asr #26
   17d38:	andeq	r7, r1, r0, asr #26
   17d3c:	andeq	r7, r1, r0, asr #26
   17d40:	ldr	r3, [sp, #32]
   17d44:	cmp	r3, #0
   17d48:	bne	18a30 <__assert_fail@plt+0x7554>
   17d4c:	cmp	r9, fp
   17d50:	movhi	r3, #63	; 0x3f
   17d54:	strbhi	r3, [r8, fp]
   17d58:	add	r3, fp, #1
   17d5c:	cmp	r9, r3
   17d60:	movhi	r0, #34	; 0x22
   17d64:	strbhi	r0, [r8, r3]
   17d68:	add	r3, fp, #2
   17d6c:	cmp	r9, r3
   17d70:	movhi	r0, #34	; 0x22
   17d74:	strbhi	r0, [r8, r3]
   17d78:	add	r3, fp, #3
   17d7c:	cmp	r9, r3
   17d80:	movhi	r0, #63	; 0x3f
   17d84:	strbhi	r0, [r8, r3]
   17d88:	add	fp, fp, #4
   17d8c:	ldr	r3, [sp, #32]
   17d90:	mov	r5, r3
   17d94:	mov	r4, r1
   17d98:	mov	r6, r2
   17d9c:	b	17e04 <__assert_fail@plt+0x6928>
   17da0:	mov	r3, #0
   17da4:	str	r3, [sp, #44]	; 0x2c
   17da8:	mov	r4, #8
   17dac:	mov	r3, #98	; 0x62
   17db0:	b	17df0 <__assert_fail@plt+0x6914>
   17db4:	mov	r3, #0
   17db8:	str	r3, [sp, #44]	; 0x2c
   17dbc:	mov	r4, #12
   17dc0:	mov	r3, #102	; 0x66
   17dc4:	b	17df0 <__assert_fail@plt+0x6914>
   17dc8:	mov	r3, #0
   17dcc:	str	r3, [sp, #44]	; 0x2c
   17dd0:	mov	r4, #13
   17dd4:	mov	r3, #114	; 0x72
   17dd8:	ldr	r2, [sp, #32]
   17ddc:	cmp	sl, #2
   17de0:	movne	r2, #0
   17de4:	andeq	r2, r2, #1
   17de8:	cmp	r2, #0
   17dec:	bne	18210 <__assert_fail@plt+0x6d34>
   17df0:	ldr	r2, [sp, #28]
   17df4:	cmp	r2, #0
   17df8:	bne	187f8 <__assert_fail@plt+0x731c>
   17dfc:	mov	r5, r2
   17e00:	mov	r3, r2
   17e04:	ldr	r2, [sp, #28]
   17e08:	eor	r2, r2, #1
   17e0c:	cmp	sl, #2
   17e10:	orreq	r2, r2, #1
   17e14:	eor	r2, r2, #1
   17e18:	ldr	r1, [sp, #32]
   17e1c:	orr	r2, r1, r2
   17e20:	tst	r2, #255	; 0xff
   17e24:	beq	17e50 <__assert_fail@plt+0x6974>
   17e28:	ldr	r2, [sp, #160]	; 0xa0
   17e2c:	cmp	r2, #0
   17e30:	beq	17e50 <__assert_fail@plt+0x6974>
   17e34:	ubfx	r1, r4, #5, #8
   17e38:	and	r2, r4, #31
   17e3c:	ldr	r0, [sp, #160]	; 0xa0
   17e40:	ldr	r1, [r0, r1, lsl #2]
   17e44:	lsr	r2, r1, r2
   17e48:	tst	r2, #1
   17e4c:	bne	17e5c <__assert_fail@plt+0x6980>
   17e50:	ldr	r2, [sp, #44]	; 0x2c
   17e54:	cmp	r2, #0
   17e58:	beq	181b0 <__assert_fail@plt+0x6cd4>
   17e5c:	ldr	r3, [sp, #32]
   17e60:	cmp	r3, #0
   17e64:	bne	189b0 <__assert_fail@plt+0x74d4>
   17e68:	ldr	r3, [sp, #36]	; 0x24
   17e6c:	eor	r3, r3, #1
   17e70:	cmp	sl, #2
   17e74:	movne	r3, #0
   17e78:	andeq	r3, r3, #1
   17e7c:	cmp	r3, #0
   17e80:	beq	17eb8 <__assert_fail@plt+0x69dc>
   17e84:	cmp	r9, fp
   17e88:	movhi	r2, #39	; 0x27
   17e8c:	strbhi	r2, [r8, fp]
   17e90:	add	r2, fp, #1
   17e94:	cmp	r9, r2
   17e98:	movhi	r1, #36	; 0x24
   17e9c:	strbhi	r1, [r8, r2]
   17ea0:	add	r2, fp, #2
   17ea4:	cmp	r9, r2
   17ea8:	movhi	r1, #39	; 0x27
   17eac:	strbhi	r1, [r8, r2]
   17eb0:	add	fp, fp, #3
   17eb4:	str	r3, [sp, #36]	; 0x24
   17eb8:	cmp	r9, fp
   17ebc:	movhi	r3, #92	; 0x5c
   17ec0:	strbhi	r3, [r8, fp]
   17ec4:	add	fp, fp, #1
   17ec8:	cmp	fp, r9
   17ecc:	strbcc	r4, [r8, fp]
   17ed0:	add	fp, fp, #1
   17ed4:	cmp	r5, #0
   17ed8:	ldr	r3, [sp, #40]	; 0x28
   17edc:	moveq	r3, r5
   17ee0:	str	r3, [sp, #40]	; 0x28
   17ee4:	add	r6, r6, #1
   17ee8:	ldr	r3, [sp, #24]
   17eec:	cmn	r3, #1
   17ef0:	beq	18820 <__assert_fail@plt+0x7344>
   17ef4:	ldr	r3, [sp, #24]
   17ef8:	subs	r5, r3, r6
   17efc:	movne	r5, #1
   17f00:	cmp	r5, #0
   17f04:	beq	18834 <__assert_fail@plt+0x7358>
   17f08:	ldr	r3, [sp, #28]
   17f0c:	cmp	sl, #2
   17f10:	moveq	r3, #0
   17f14:	andne	r3, r3, #1
   17f18:	str	r3, [sp, #56]	; 0x38
   17f1c:	ldr	r2, [sp, #52]	; 0x34
   17f20:	adds	r7, r2, #0
   17f24:	movne	r7, #1
   17f28:	ands	r3, r3, r7
   17f2c:	str	r3, [sp, #44]	; 0x2c
   17f30:	bne	17850 <__assert_fail@plt+0x6374>
   17f34:	ldr	r3, [sp, #48]	; 0x30
   17f38:	ldrb	r4, [r3, r6]
   17f3c:	cmp	r4, #126	; 0x7e
   17f40:	ldrls	pc, [pc, r4, lsl #2]
   17f44:	b	1837c <__assert_fail@plt+0x6ea0>
   17f48:	ldrdeq	r7, [r1], -r4
   17f4c:	andeq	r8, r1, ip, ror r3
   17f50:	andeq	r8, r1, ip, ror r3
   17f54:	andeq	r8, r1, ip, ror r3
   17f58:	andeq	r8, r1, ip, ror r3
   17f5c:	andeq	r8, r1, ip, ror r3
   17f60:	andeq	r8, r1, ip, ror r3
   17f64:	andeq	r8, r1, ip, lsl r2
   17f68:	andeq	r7, r1, r8, lsr #27
   17f6c:	andeq	r8, r1, ip, asr #2
   17f70:	strdeq	r8, [r1], -r0
   17f74:	andeq	r8, r1, r0, ror #2
   17f78:			; <UNDEFINED> instruction: 0x00017dbc
   17f7c:	ldrdeq	r7, [r1], -r0
   17f80:	andeq	r8, r1, ip, ror r3
   17f84:	andeq	r8, r1, ip, ror r3
   17f88:	andeq	r8, r1, ip, ror r3
   17f8c:	andeq	r8, r1, ip, ror r3
   17f90:	andeq	r8, r1, ip, ror r3
   17f94:	andeq	r8, r1, ip, ror r3
   17f98:	andeq	r8, r1, ip, ror r3
   17f9c:	andeq	r8, r1, ip, ror r3
   17fa0:	andeq	r8, r1, ip, ror r3
   17fa4:	andeq	r8, r1, ip, ror r3
   17fa8:	andeq	r8, r1, ip, ror r3
   17fac:	andeq	r8, r1, ip, ror r3
   17fb0:	andeq	r8, r1, ip, ror r3
   17fb4:	andeq	r8, r1, ip, ror r3
   17fb8:	andeq	r8, r1, ip, ror r3
   17fbc:	andeq	r8, r1, ip, ror r3
   17fc0:	andeq	r8, r1, ip, ror r3
   17fc4:	andeq	r8, r1, ip, ror r3
   17fc8:	muleq	r1, r8, r2
   17fcc:	muleq	r1, r4, r2
   17fd0:	muleq	r1, r4, r2
   17fd4:	andeq	r8, r1, r4, asr r2
   17fd8:	muleq	r1, r4, r2
   17fdc:	muleq	r1, ip, r7
   17fe0:	muleq	r1, r4, r2
   17fe4:	ldrdeq	r8, [r1], -ip
   17fe8:	muleq	r1, r4, r2
   17fec:	muleq	r1, r4, r2
   17ff0:	muleq	r1, r4, r2
   17ff4:	muleq	r1, ip, r7
   17ff8:	muleq	r1, ip, r7
   17ffc:	muleq	r1, ip, r7
   18000:	muleq	r1, ip, r7
   18004:	muleq	r1, ip, r7
   18008:	muleq	r1, ip, r7
   1800c:	muleq	r1, ip, r7
   18010:	muleq	r1, ip, r7
   18014:	muleq	r1, ip, r7
   18018:	muleq	r1, ip, r7
   1801c:	muleq	r1, ip, r7
   18020:	muleq	r1, ip, r7
   18024:	muleq	r1, ip, r7
   18028:	muleq	r1, ip, r7
   1802c:	muleq	r1, ip, r7
   18030:	muleq	r1, ip, r7
   18034:	muleq	r1, r4, r2
   18038:	muleq	r1, r4, r2
   1803c:	muleq	r1, r4, r2
   18040:	muleq	r1, r4, r2
   18044:	andeq	r7, r1, ip, lsr ip
   18048:	andeq	r8, r1, ip, ror r3
   1804c:	muleq	r1, ip, r7
   18050:	muleq	r1, ip, r7
   18054:	muleq	r1, ip, r7
   18058:	muleq	r1, ip, r7
   1805c:	muleq	r1, ip, r7
   18060:	muleq	r1, ip, r7
   18064:	muleq	r1, ip, r7
   18068:	muleq	r1, ip, r7
   1806c:	muleq	r1, ip, r7
   18070:	muleq	r1, ip, r7
   18074:	muleq	r1, ip, r7
   18078:	muleq	r1, ip, r7
   1807c:	muleq	r1, ip, r7
   18080:	muleq	r1, ip, r7
   18084:	muleq	r1, ip, r7
   18088:	muleq	r1, ip, r7
   1808c:	muleq	r1, ip, r7
   18090:	muleq	r1, ip, r7
   18094:	muleq	r1, ip, r7
   18098:	muleq	r1, ip, r7
   1809c:	muleq	r1, ip, r7
   180a0:	muleq	r1, ip, r7
   180a4:	muleq	r1, ip, r7
   180a8:	muleq	r1, ip, r7
   180ac:	muleq	r1, ip, r7
   180b0:	muleq	r1, ip, r7
   180b4:	muleq	r1, r4, r2
   180b8:	andeq	r8, r1, r4, ror r1
   180bc:	muleq	r1, ip, r7
   180c0:	muleq	r1, r4, r2
   180c4:	muleq	r1, ip, r7
   180c8:	muleq	r1, r4, r2
   180cc:	muleq	r1, ip, r7
   180d0:	muleq	r1, ip, r7
   180d4:	muleq	r1, ip, r7
   180d8:	muleq	r1, ip, r7
   180dc:	muleq	r1, ip, r7
   180e0:	muleq	r1, ip, r7
   180e4:	muleq	r1, ip, r7
   180e8:	muleq	r1, ip, r7
   180ec:	muleq	r1, ip, r7
   180f0:	muleq	r1, ip, r7
   180f4:	muleq	r1, ip, r7
   180f8:	muleq	r1, ip, r7
   180fc:	muleq	r1, ip, r7
   18100:	muleq	r1, ip, r7
   18104:	muleq	r1, ip, r7
   18108:	muleq	r1, ip, r7
   1810c:	muleq	r1, ip, r7
   18110:	muleq	r1, ip, r7
   18114:	muleq	r1, ip, r7
   18118:	muleq	r1, ip, r7
   1811c:	muleq	r1, ip, r7
   18120:	muleq	r1, ip, r7
   18124:	muleq	r1, ip, r7
   18128:	muleq	r1, ip, r7
   1812c:	muleq	r1, ip, r7
   18130:	muleq	r1, ip, r7
   18134:	andeq	r8, r1, r4, lsr r2
   18138:	muleq	r1, r4, r2
   1813c:	andeq	r8, r1, r4, lsr r2
   18140:	andeq	r8, r1, r4, asr r2
   18144:	mov	r3, #0
   18148:	str	r3, [sp, #44]	; 0x2c
   1814c:	mov	r4, #9
   18150:	mov	r3, #116	; 0x74
   18154:	b	17dd8 <__assert_fail@plt+0x68fc>
   18158:	mov	r3, #0
   1815c:	str	r3, [sp, #44]	; 0x2c
   18160:	mov	r4, #11
   18164:	mov	r3, #118	; 0x76
   18168:	b	17df0 <__assert_fail@plt+0x6914>
   1816c:	mov	r3, #0
   18170:	str	r3, [sp, #44]	; 0x2c
   18174:	cmp	sl, #2
   18178:	beq	1819c <__assert_fail@plt+0x6cc0>
   1817c:	ldr	r3, [sp, #28]
   18180:	ldr	r2, [sp, #32]
   18184:	and	r3, r3, r2
   18188:	tst	r7, r3
   1818c:	bne	18810 <__assert_fail@plt+0x7334>
   18190:	mov	r4, #92	; 0x5c
   18194:	mov	r3, r4
   18198:	b	17df0 <__assert_fail@plt+0x6914>
   1819c:	ldr	r3, [sp, #32]
   181a0:	cmp	r3, #0
   181a4:	bne	18998 <__assert_fail@plt+0x74bc>
   181a8:	mov	r5, r3
   181ac:	mov	r4, #92	; 0x5c
   181b0:	eor	r3, r3, #1
   181b4:	ldr	r2, [sp, #36]	; 0x24
   181b8:	and	r3, r3, r2
   181bc:	tst	r3, #255	; 0xff
   181c0:	beq	17ec8 <__assert_fail@plt+0x69ec>
   181c4:	cmp	r9, fp
   181c8:	movhi	r3, #39	; 0x27
   181cc:	strbhi	r3, [r8, fp]
   181d0:	add	r3, fp, #1
   181d4:	cmp	r9, r3
   181d8:	movhi	r2, #39	; 0x27
   181dc:	strbhi	r2, [r8, r3]
   181e0:	add	fp, fp, #2
   181e4:	mov	r3, #0
   181e8:	str	r3, [sp, #36]	; 0x24
   181ec:	b	17ec8 <__assert_fail@plt+0x69ec>
   181f0:	mov	r3, #110	; 0x6e
   181f4:	b	17dd8 <__assert_fail@plt+0x68fc>
   181f8:	mov	r3, #110	; 0x6e
   181fc:	b	17dd8 <__assert_fail@plt+0x68fc>
   18200:	mov	r3, #0
   18204:	str	r3, [sp, #44]	; 0x2c
   18208:	mov	r3, #110	; 0x6e
   1820c:	b	17dd8 <__assert_fail@plt+0x68fc>
   18210:	mov	r8, r9
   18214:	mov	r7, #2
   18218:	b	189b8 <__assert_fail@plt+0x74dc>
   1821c:	mov	r3, #97	; 0x61
   18220:	b	17df0 <__assert_fail@plt+0x6914>
   18224:	mov	r3, #97	; 0x61
   18228:	b	17df0 <__assert_fail@plt+0x6914>
   1822c:	mov	r3, #0
   18230:	str	r3, [sp, #44]	; 0x2c
   18234:	ldr	r3, [sp, #24]
   18238:	cmn	r3, #1
   1823c:	beq	18268 <__assert_fail@plt+0x6d8c>
   18240:	ldr	r3, [sp, #24]
   18244:	subs	r3, r3, #1
   18248:	movne	r3, #1
   1824c:	cmp	r3, #0
   18250:	bne	187d0 <__assert_fail@plt+0x72f4>
   18254:	cmp	r6, #0
   18258:	beq	18298 <__assert_fail@plt+0x6dbc>
   1825c:	mov	r5, #0
   18260:	mov	r3, r5
   18264:	b	17e04 <__assert_fail@plt+0x6928>
   18268:	ldr	r3, [sp, #48]	; 0x30
   1826c:	ldrb	r3, [r3, #1]
   18270:	adds	r3, r3, #0
   18274:	movne	r3, #1
   18278:	b	1824c <__assert_fail@plt+0x6d70>
   1827c:	mov	r3, #0
   18280:	str	r3, [sp, #44]	; 0x2c
   18284:	b	18254 <__assert_fail@plt+0x6d78>
   18288:	mov	r3, #0
   1828c:	str	r3, [sp, #44]	; 0x2c
   18290:	b	18298 <__assert_fail@plt+0x6dbc>
   18294:	ldr	r5, [sp, #44]	; 0x2c
   18298:	ldr	r3, [sp, #32]
   1829c:	cmp	sl, #2
   182a0:	movne	r3, #0
   182a4:	andeq	r3, r3, #1
   182a8:	cmp	r3, #0
   182ac:	beq	17e04 <__assert_fail@plt+0x6928>
   182b0:	mov	r8, r9
   182b4:	mov	r7, #2
   182b8:	b	189b8 <__assert_fail@plt+0x74dc>
   182bc:	ldr	r5, [sp, #32]
   182c0:	b	18298 <__assert_fail@plt+0x6dbc>
   182c4:	mov	r3, #0
   182c8:	str	r3, [sp, #44]	; 0x2c
   182cc:	mov	r5, r3
   182d0:	b	18298 <__assert_fail@plt+0x6dbc>
   182d4:	mov	r3, #0
   182d8:	str	r3, [sp, #44]	; 0x2c
   182dc:	cmp	sl, #2
   182e0:	strne	r5, [sp, #68]	; 0x44
   182e4:	movne	r3, #0
   182e8:	movne	r4, #39	; 0x27
   182ec:	bne	17e04 <__assert_fail@plt+0x6928>
   182f0:	ldr	r3, [sp, #32]
   182f4:	cmp	r3, #0
   182f8:	bne	189a4 <__assert_fail@plt+0x74c8>
   182fc:	ldr	r3, [sp, #72]	; 0x48
   18300:	clz	r3, r3
   18304:	lsr	r3, r3, #5
   18308:	cmp	r9, #0
   1830c:	moveq	r3, #0
   18310:	cmp	r3, #0
   18314:	movne	r3, #0
   18318:	bne	18340 <__assert_fail@plt+0x6e64>
   1831c:	cmp	r9, fp
   18320:	movhi	r3, #39	; 0x27
   18324:	strbhi	r3, [r8, fp]
   18328:	add	r3, fp, #1
   1832c:	cmp	r9, r3
   18330:	movhi	r2, #92	; 0x5c
   18334:	strbhi	r2, [r8, r3]
   18338:	mov	r3, r9
   1833c:	ldr	r9, [sp, #72]	; 0x48
   18340:	add	r2, fp, #2
   18344:	cmp	r2, r3
   18348:	movcc	r1, #39	; 0x27
   1834c:	strbcc	r1, [r8, r2]
   18350:	add	fp, fp, #3
   18354:	str	r5, [sp, #68]	; 0x44
   18358:	ldr	r2, [sp, #32]
   1835c:	str	r2, [sp, #36]	; 0x24
   18360:	str	r9, [sp, #72]	; 0x48
   18364:	mov	r9, r3
   18368:	mov	r4, #39	; 0x27
   1836c:	mov	r3, #0
   18370:	b	17e50 <__assert_fail@plt+0x6974>
   18374:	mov	r3, #0
   18378:	str	r3, [sp, #44]	; 0x2c
   1837c:	ldr	r7, [sp, #76]	; 0x4c
   18380:	cmp	r7, #1
   18384:	bne	183bc <__assert_fail@plt+0x6ee0>
   18388:	bl	11368 <__ctype_b_loc@plt>
   1838c:	ldr	r2, [r0]
   18390:	lsl	r3, r4, #1
   18394:	ldrh	r5, [r2, r3]
   18398:	ubfx	r5, r5, #14, #1
   1839c:	mov	ip, r7
   183a0:	eor	r3, r5, #1
   183a4:	ldr	r2, [sp, #28]
   183a8:	and	r3, r3, r2
   183ac:	ands	r3, r3, #255	; 0xff
   183b0:	beq	17e04 <__assert_fail@plt+0x6928>
   183b4:	mov	r5, #0
   183b8:	b	18618 <__assert_fail@plt+0x713c>
   183bc:	mov	r2, #0
   183c0:	mov	r3, #0
   183c4:	strd	r2, [sp, #104]	; 0x68
   183c8:	ldr	r3, [sp, #24]
   183cc:	cmn	r3, #1
   183d0:	beq	183f4 <__assert_fail@plt+0x6f18>
   183d4:	mov	r3, #0
   183d8:	str	r4, [sp, #88]	; 0x58
   183dc:	str	fp, [sp, #92]	; 0x5c
   183e0:	str	r8, [sp, #56]	; 0x38
   183e4:	mov	r8, r3
   183e8:	str	r9, [sp, #84]	; 0x54
   183ec:	ldr	r9, [sp, #48]	; 0x30
   183f0:	b	18540 <__assert_fail@plt+0x7064>
   183f4:	ldr	r0, [sp, #48]	; 0x30
   183f8:	bl	11380 <strlen@plt>
   183fc:	str	r0, [sp, #24]
   18400:	b	183d4 <__assert_fail@plt+0x6ef8>
   18404:	mov	r1, fp
   18408:	ldr	r4, [sp, #88]	; 0x58
   1840c:	mov	r2, r8
   18410:	mov	ip, r8
   18414:	ldr	fp, [sp, #92]	; 0x5c
   18418:	ldr	r8, [sp, #56]	; 0x38
   1841c:	ldr	r9, [sp, #84]	; 0x54
   18420:	ldr	r0, [sp, #24]
   18424:	cmp	r7, r0
   18428:	bcs	185e0 <__assert_fail@plt+0x7104>
   1842c:	ldrb	r3, [r1]
   18430:	cmp	r3, #0
   18434:	beq	185e8 <__assert_fail@plt+0x710c>
   18438:	mov	r3, r1
   1843c:	add	r2, r2, #1
   18440:	add	r1, r6, r2
   18444:	cmp	r0, r1
   18448:	bls	185f0 <__assert_fail@plt+0x7114>
   1844c:	ldrb	r1, [r3, #1]!
   18450:	cmp	r1, #0
   18454:	bne	1843c <__assert_fail@plt+0x6f60>
   18458:	mov	ip, r2
   1845c:	mov	r5, #0
   18460:	b	18610 <__assert_fail@plt+0x7134>
   18464:	ldr	r3, [sp, #56]	; 0x38
   18468:	str	r3, [sp, #64]	; 0x40
   1846c:	ldr	r8, [sp, #84]	; 0x54
   18470:	mov	r7, #2
   18474:	b	189b8 <__assert_fail@plt+0x74dc>
   18478:	cmp	r2, r7
   1847c:	beq	1851c <__assert_fail@plt+0x7040>
   18480:	ldrb	r3, [r2], #1
   18484:	sub	r3, r3, #91	; 0x5b
   18488:	cmp	r3, #33	; 0x21
   1848c:	ldrls	pc, [pc, r3, lsl #2]
   18490:	b	18478 <__assert_fail@plt+0x6f9c>
   18494:	andeq	r8, r1, r4, ror #8
   18498:	andeq	r8, r1, r4, ror #8
   1849c:	andeq	r8, r1, r8, ror r4
   184a0:	andeq	r8, r1, r4, ror #8
   184a4:	andeq	r8, r1, r8, ror r4
   184a8:	andeq	r8, r1, r4, ror #8
   184ac:	andeq	r8, r1, r8, ror r4
   184b0:	andeq	r8, r1, r8, ror r4
   184b4:	andeq	r8, r1, r8, ror r4
   184b8:	andeq	r8, r1, r8, ror r4
   184bc:	andeq	r8, r1, r8, ror r4
   184c0:	andeq	r8, r1, r8, ror r4
   184c4:	andeq	r8, r1, r8, ror r4
   184c8:	andeq	r8, r1, r8, ror r4
   184cc:	andeq	r8, r1, r8, ror r4
   184d0:	andeq	r8, r1, r8, ror r4
   184d4:	andeq	r8, r1, r8, ror r4
   184d8:	andeq	r8, r1, r8, ror r4
   184dc:	andeq	r8, r1, r8, ror r4
   184e0:	andeq	r8, r1, r8, ror r4
   184e4:	andeq	r8, r1, r8, ror r4
   184e8:	andeq	r8, r1, r8, ror r4
   184ec:	andeq	r8, r1, r8, ror r4
   184f0:	andeq	r8, r1, r8, ror r4
   184f4:	andeq	r8, r1, r8, ror r4
   184f8:	andeq	r8, r1, r8, ror r4
   184fc:	andeq	r8, r1, r8, ror r4
   18500:	andeq	r8, r1, r8, ror r4
   18504:	andeq	r8, r1, r8, ror r4
   18508:	andeq	r8, r1, r8, ror r4
   1850c:	andeq	r8, r1, r8, ror r4
   18510:	andeq	r8, r1, r8, ror r4
   18514:	andeq	r8, r1, r8, ror r4
   18518:	andeq	r8, r1, r4, ror #8
   1851c:	ldr	r0, [sp, #100]	; 0x64
   18520:	bl	1126c <iswprint@plt>
   18524:	cmp	r0, #0
   18528:	moveq	r5, #0
   1852c:	add	r8, r8, r4
   18530:	add	r0, sp, #104	; 0x68
   18534:	bl	11200 <mbsinit@plt>
   18538:	cmp	r0, #0
   1853c:	bne	185ac <__assert_fail@plt+0x70d0>
   18540:	add	r7, r6, r8
   18544:	add	fp, r9, r7
   18548:	add	r3, sp, #104	; 0x68
   1854c:	ldr	r2, [sp, #24]
   18550:	sub	r2, r2, r7
   18554:	mov	r1, fp
   18558:	add	r0, sp, #100	; 0x64
   1855c:	bl	1aff0 <__assert_fail@plt+0x9b14>
   18560:	subs	r4, r0, #0
   18564:	beq	185fc <__assert_fail@plt+0x7120>
   18568:	cmn	r4, #1
   1856c:	beq	185c4 <__assert_fail@plt+0x70e8>
   18570:	cmn	r4, #2
   18574:	beq	18404 <__assert_fail@plt+0x6f28>
   18578:	ldr	r3, [sp, #32]
   1857c:	cmp	sl, #2
   18580:	movne	r3, #0
   18584:	andeq	r3, r3, #1
   18588:	cmp	r3, #0
   1858c:	beq	1851c <__assert_fail@plt+0x7040>
   18590:	cmp	r4, #1
   18594:	bls	1851c <__assert_fail@plt+0x7040>
   18598:	add	r2, r7, #1
   1859c:	add	r2, r9, r2
   185a0:	add	r3, r9, r4
   185a4:	add	r7, r3, r7
   185a8:	b	18480 <__assert_fail@plt+0x6fa4>
   185ac:	ldr	r4, [sp, #88]	; 0x58
   185b0:	mov	ip, r8
   185b4:	ldr	fp, [sp, #92]	; 0x5c
   185b8:	ldr	r8, [sp, #56]	; 0x38
   185bc:	ldr	r9, [sp, #84]	; 0x54
   185c0:	b	18610 <__assert_fail@plt+0x7134>
   185c4:	ldr	r4, [sp, #88]	; 0x58
   185c8:	mov	ip, r8
   185cc:	ldr	fp, [sp, #92]	; 0x5c
   185d0:	ldr	r8, [sp, #56]	; 0x38
   185d4:	ldr	r9, [sp, #84]	; 0x54
   185d8:	mov	r5, #0
   185dc:	b	18610 <__assert_fail@plt+0x7134>
   185e0:	mov	r5, #0
   185e4:	b	18610 <__assert_fail@plt+0x7134>
   185e8:	mov	r5, #0
   185ec:	b	18610 <__assert_fail@plt+0x7134>
   185f0:	mov	ip, r2
   185f4:	mov	r5, #0
   185f8:	b	18610 <__assert_fail@plt+0x7134>
   185fc:	ldr	r4, [sp, #88]	; 0x58
   18600:	mov	ip, r8
   18604:	ldr	fp, [sp, #92]	; 0x5c
   18608:	ldr	r8, [sp, #56]	; 0x38
   1860c:	ldr	r9, [sp, #84]	; 0x54
   18610:	cmp	ip, #1
   18614:	bls	183a0 <__assert_fail@plt+0x6ec4>
   18618:	add	lr, r6, ip
   1861c:	ldr	r3, [sp, #48]	; 0x30
   18620:	add	r1, r3, r6
   18624:	mov	r3, #0
   18628:	eor	r0, r5, #1
   1862c:	ldr	r2, [sp, #28]
   18630:	and	r0, r0, r2
   18634:	uxtb	r0, r0
   18638:	str	r0, [sp, #56]	; 0x38
   1863c:	mov	r7, #92	; 0x5c
   18640:	ldr	ip, [sp, #36]	; 0x24
   18644:	str	r5, [sp, #84]	; 0x54
   18648:	ldr	r2, [sp, #44]	; 0x2c
   1864c:	b	186bc <__assert_fail@plt+0x71e0>
   18650:	cmp	r2, #0
   18654:	beq	18664 <__assert_fail@plt+0x7188>
   18658:	cmp	r9, fp
   1865c:	strbhi	r7, [r8, fp]
   18660:	add	fp, fp, #1
   18664:	add	r5, r6, #1
   18668:	cmp	r5, lr
   1866c:	bcs	18778 <__assert_fail@plt+0x729c>
   18670:	eor	r2, r3, #1
   18674:	and	r2, r2, ip
   18678:	ands	r2, r2, #255	; 0xff
   1867c:	beq	18794 <__assert_fail@plt+0x72b8>
   18680:	cmp	r9, fp
   18684:	movhi	r2, #39	; 0x27
   18688:	strbhi	r2, [r8, fp]
   1868c:	add	r2, fp, #1
   18690:	cmp	r9, r2
   18694:	movhi	ip, #39	; 0x27
   18698:	strbhi	ip, [r8, r2]
   1869c:	add	fp, fp, #2
   186a0:	ldr	ip, [sp, #56]	; 0x38
   186a4:	mov	r2, ip
   186a8:	mov	r6, r5
   186ac:	cmp	r9, fp
   186b0:	strbhi	r4, [r8, fp]
   186b4:	add	fp, fp, #1
   186b8:	ldrb	r4, [r1, #1]!
   186bc:	cmp	r0, #0
   186c0:	beq	18650 <__assert_fail@plt+0x7174>
   186c4:	ldr	r3, [sp, #32]
   186c8:	cmp	r3, #0
   186cc:	bne	18960 <__assert_fail@plt+0x7484>
   186d0:	eor	r3, ip, #1
   186d4:	cmp	sl, #2
   186d8:	movne	r3, #0
   186dc:	andeq	r3, r3, #1
   186e0:	cmp	r3, #0
   186e4:	beq	1871c <__assert_fail@plt+0x7240>
   186e8:	cmp	r9, fp
   186ec:	movhi	ip, #39	; 0x27
   186f0:	strbhi	ip, [r8, fp]
   186f4:	add	ip, fp, #1
   186f8:	cmp	r9, ip
   186fc:	movhi	r5, #36	; 0x24
   18700:	strbhi	r5, [r8, ip]
   18704:	add	ip, fp, #2
   18708:	cmp	r9, ip
   1870c:	movhi	r5, #39	; 0x27
   18710:	strbhi	r5, [r8, ip]
   18714:	add	fp, fp, #3
   18718:	mov	ip, r3
   1871c:	cmp	r9, fp
   18720:	strbhi	r7, [r8, fp]
   18724:	add	r3, fp, #1
   18728:	cmp	r9, r3
   1872c:	bls	1873c <__assert_fail@plt+0x7260>
   18730:	lsr	r5, r4, #6
   18734:	add	r5, r5, #48	; 0x30
   18738:	strb	r5, [r8, r3]
   1873c:	add	r3, fp, #2
   18740:	cmp	r9, r3
   18744:	bls	18754 <__assert_fail@plt+0x7278>
   18748:	ubfx	r5, r4, #3, #3
   1874c:	add	r5, r5, #48	; 0x30
   18750:	strb	r5, [r8, r3]
   18754:	add	fp, fp, #3
   18758:	and	r4, r4, #7
   1875c:	add	r4, r4, #48	; 0x30
   18760:	add	r5, r6, #1
   18764:	cmp	r5, lr
   18768:	bcs	18784 <__assert_fail@plt+0x72a8>
   1876c:	ldr	r3, [sp, #56]	; 0x38
   18770:	mov	r6, r5
   18774:	b	186ac <__assert_fail@plt+0x71d0>
   18778:	str	ip, [sp, #36]	; 0x24
   1877c:	ldr	r5, [sp, #84]	; 0x54
   18780:	b	181b0 <__assert_fail@plt+0x6cd4>
   18784:	str	ip, [sp, #36]	; 0x24
   18788:	ldr	r5, [sp, #84]	; 0x54
   1878c:	mov	r3, r0
   18790:	b	181b0 <__assert_fail@plt+0x6cd4>
   18794:	mov	r6, r5
   18798:	b	186ac <__assert_fail@plt+0x71d0>
   1879c:	ldr	r3, [sp, #44]	; 0x2c
   187a0:	b	17e04 <__assert_fail@plt+0x6928>
   187a4:	mov	r5, #0
   187a8:	mov	r3, r5
   187ac:	mov	r4, #63	; 0x3f
   187b0:	b	17e04 <__assert_fail@plt+0x6928>
   187b4:	mov	r5, #0
   187b8:	mov	r3, r5
   187bc:	mov	r4, #63	; 0x3f
   187c0:	b	17e04 <__assert_fail@plt+0x6928>
   187c4:	mov	r5, #0
   187c8:	mov	r3, r5
   187cc:	b	17e04 <__assert_fail@plt+0x6928>
   187d0:	mov	r5, #0
   187d4:	mov	r3, r5
   187d8:	b	17e04 <__assert_fail@plt+0x6928>
   187dc:	ldr	r5, [sp, #44]	; 0x2c
   187e0:	ldr	r3, [sp, #32]
   187e4:	b	17e04 <__assert_fail@plt+0x6928>
   187e8:	ldr	r5, [sp, #44]	; 0x2c
   187ec:	mov	r3, #0
   187f0:	str	r3, [sp, #44]	; 0x2c
   187f4:	b	17e04 <__assert_fail@plt+0x6928>
   187f8:	mov	r4, r3
   187fc:	mov	r5, #0
   18800:	b	17e5c <__assert_fail@plt+0x6980>
   18804:	mov	r5, #0
   18808:	mov	r4, #97	; 0x61
   1880c:	b	17e5c <__assert_fail@plt+0x6980>
   18810:	mov	r5, #0
   18814:	mov	r3, r5
   18818:	mov	r4, #92	; 0x5c
   1881c:	b	181b0 <__assert_fail@plt+0x6cd4>
   18820:	ldr	r3, [sp, #48]	; 0x30
   18824:	ldrb	r5, [r3, r6]
   18828:	adds	r5, r5, #0
   1882c:	movne	r5, #1
   18830:	b	17f00 <__assert_fail@plt+0x6a24>
   18834:	cmp	sl, #2
   18838:	movne	r3, #0
   1883c:	moveq	r3, #1
   18840:	ldr	r1, [sp, #32]
   18844:	cmp	fp, #0
   18848:	andeq	r2, r3, r1
   1884c:	movne	r2, #0
   18850:	cmp	r2, #0
   18854:	bne	18974 <__assert_fail@plt+0x7498>
   18858:	eor	r2, r1, #1
   1885c:	uxtb	r2, r2
   18860:	and	r3, r3, r2
   18864:	ldr	r1, [sp, #68]	; 0x44
   18868:	ands	r3, r1, r3
   1886c:	beq	18900 <__assert_fail@plt+0x7424>
   18870:	ldr	r2, [sp, #40]	; 0x28
   18874:	cmp	r2, #0
   18878:	bne	188b0 <__assert_fail@plt+0x73d4>
   1887c:	ldr	r2, [sp, #72]	; 0x48
   18880:	adds	r2, r2, #0
   18884:	movne	r2, #1
   18888:	cmp	r9, #0
   1888c:	movne	r2, #0
   18890:	str	r2, [sp, #68]	; 0x44
   18894:	mov	sl, #2
   18898:	ldr	r1, [sp, #40]	; 0x28
   1889c:	str	r1, [sp, #32]
   188a0:	cmp	r2, #0
   188a4:	beq	188f4 <__assert_fail@plt+0x7418>
   188a8:	ldr	r9, [sp, #72]	; 0x48
   188ac:	b	17608 <__assert_fail@plt+0x612c>
   188b0:	ldr	r3, [sp, #168]	; 0xa8
   188b4:	str	r3, [sp, #16]
   188b8:	ldr	r3, [sp, #164]	; 0xa4
   188bc:	str	r3, [sp, #12]
   188c0:	ldr	r3, [sp, #160]	; 0xa0
   188c4:	str	r3, [sp, #8]
   188c8:	ldr	r3, [sp, #156]	; 0x9c
   188cc:	str	r3, [sp, #4]
   188d0:	mov	r3, #5
   188d4:	str	r3, [sp]
   188d8:	ldr	r3, [sp, #24]
   188dc:	ldr	r2, [sp, #48]	; 0x30
   188e0:	ldr	r1, [sp, #72]	; 0x48
   188e4:	ldr	r0, [sp, #64]	; 0x40
   188e8:	bl	17590 <__assert_fail@plt+0x60b4>
   188ec:	mov	fp, r0
   188f0:	b	18a10 <__assert_fail@plt+0x7534>
   188f4:	mov	r8, r9
   188f8:	mov	r2, r3
   188fc:	b	18904 <__assert_fail@plt+0x7428>
   18900:	mov	r8, r9
   18904:	ldr	r3, [sp, #60]	; 0x3c
   18908:	cmp	r3, #0
   1890c:	moveq	r2, #0
   18910:	andne	r2, r2, #1
   18914:	cmp	r2, #0
   18918:	beq	18948 <__assert_fail@plt+0x746c>
   1891c:	mov	r2, r3
   18920:	ldrb	r3, [r3]
   18924:	cmp	r3, #0
   18928:	beq	18948 <__assert_fail@plt+0x746c>
   1892c:	ldr	r1, [sp, #64]	; 0x40
   18930:	cmp	r8, fp
   18934:	strbhi	r3, [r1, fp]
   18938:	add	fp, fp, #1
   1893c:	ldrb	r3, [r2, #1]!
   18940:	cmp	r3, #0
   18944:	bne	18930 <__assert_fail@plt+0x7454>
   18948:	cmp	r8, fp
   1894c:	bls	18a10 <__assert_fail@plt+0x7534>
   18950:	mov	r3, #0
   18954:	ldr	r2, [sp, #64]	; 0x40
   18958:	strb	r3, [r2, fp]
   1895c:	b	18a10 <__assert_fail@plt+0x7534>
   18960:	mov	r8, r9
   18964:	mov	r7, sl
   18968:	ldr	r3, [sp, #32]
   1896c:	str	r3, [sp, #28]
   18970:	b	189b8 <__assert_fail@plt+0x74dc>
   18974:	mov	r8, r9
   18978:	mov	r7, #2
   1897c:	b	189b8 <__assert_fail@plt+0x74dc>
   18980:	mov	r8, r9
   18984:	mov	r7, sl
   18988:	b	189b8 <__assert_fail@plt+0x74dc>
   1898c:	mov	r8, r9
   18990:	mov	r7, sl
   18994:	b	189b8 <__assert_fail@plt+0x74dc>
   18998:	mov	r8, r9
   1899c:	mov	r7, sl
   189a0:	b	189b8 <__assert_fail@plt+0x74dc>
   189a4:	mov	r8, r9
   189a8:	mov	r7, sl
   189ac:	b	189b8 <__assert_fail@plt+0x74dc>
   189b0:	mov	r8, r9
   189b4:	mov	r7, sl
   189b8:	ldr	r3, [sp, #28]
   189bc:	cmp	r7, #2
   189c0:	movne	r3, #0
   189c4:	andeq	r3, r3, #1
   189c8:	cmp	r3, #0
   189cc:	movne	r7, #4
   189d0:	ldr	r3, [sp, #168]	; 0xa8
   189d4:	str	r3, [sp, #16]
   189d8:	ldr	r3, [sp, #164]	; 0xa4
   189dc:	str	r3, [sp, #12]
   189e0:	mov	r3, #0
   189e4:	str	r3, [sp, #8]
   189e8:	ldr	r3, [sp, #156]	; 0x9c
   189ec:	bic	r3, r3, #2
   189f0:	str	r3, [sp, #4]
   189f4:	str	r7, [sp]
   189f8:	ldr	r3, [sp, #24]
   189fc:	ldr	r2, [sp, #48]	; 0x30
   18a00:	mov	r1, r8
   18a04:	ldr	r0, [sp, #64]	; 0x40
   18a08:	bl	17590 <__assert_fail@plt+0x60b4>
   18a0c:	mov	fp, r0
   18a10:	mov	r0, fp
   18a14:	add	sp, sp, #116	; 0x74
   18a18:	ldrd	r4, [sp]
   18a1c:	ldrd	r6, [sp, #8]
   18a20:	ldrd	r8, [sp, #16]
   18a24:	ldrd	sl, [sp, #24]
   18a28:	add	sp, sp, #32
   18a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a30:	mov	r8, r9
   18a34:	mov	r7, sl
   18a38:	b	189d0 <__assert_fail@plt+0x74f4>
   18a3c:	add	fp, fp, #4
   18a40:	str	r3, [sp, #36]	; 0x24
   18a44:	mov	r5, #0
   18a48:	mov	r4, #48	; 0x30
   18a4c:	b	17e04 <__assert_fail@plt+0x6928>
   18a50:	mov	r3, #1
   18a54:	str	r3, [sp, #32]
   18a58:	str	r3, [sp, #28]
   18a5c:	str	r3, [sp, #52]	; 0x34
   18a60:	movw	r3, #54472	; 0xd4c8
   18a64:	movt	r3, #1
   18a68:	str	r3, [sp, #60]	; 0x3c
   18a6c:	mov	fp, #0
   18a70:	mov	sl, #5
   18a74:	b	17668 <__assert_fail@plt+0x618c>
   18a78:	ldr	r3, [sp, #48]	; 0x30
   18a7c:	ldrb	r4, [r3, r6]
   18a80:	cmp	r4, #126	; 0x7e
   18a84:	ldrls	pc, [pc, r4, lsl #2]
   18a88:	b	18374 <__assert_fail@plt+0x6e98>
   18a8c:	strdeq	r7, [r1], -ip
   18a90:	andeq	r8, r1, r4, ror r3
   18a94:	andeq	r8, r1, r4, ror r3
   18a98:	andeq	r8, r1, r4, ror r3
   18a9c:	andeq	r8, r1, r4, ror r3
   18aa0:	andeq	r8, r1, r4, ror r3
   18aa4:	andeq	r8, r1, r4, ror r3
   18aa8:	andeq	r8, r1, r4, lsl #16
   18aac:	andeq	r7, r1, r0, lsr #27
   18ab0:	andeq	r8, r1, r4, asr #2
   18ab4:	andeq	r8, r1, r0, lsl #4
   18ab8:	andeq	r8, r1, r8, asr r1
   18abc:			; <UNDEFINED> instruction: 0x00017db4
   18ac0:	andeq	r7, r1, r8, asr #27
   18ac4:	andeq	r8, r1, r4, ror r3
   18ac8:	andeq	r8, r1, r4, ror r3
   18acc:	andeq	r8, r1, r4, ror r3
   18ad0:	andeq	r8, r1, r4, ror r3
   18ad4:	andeq	r8, r1, r4, ror r3
   18ad8:	andeq	r8, r1, r4, ror r3
   18adc:	andeq	r8, r1, r4, ror r3
   18ae0:	andeq	r8, r1, r4, ror r3
   18ae4:	andeq	r8, r1, r4, ror r3
   18ae8:	andeq	r8, r1, r4, ror r3
   18aec:	andeq	r8, r1, r4, ror r3
   18af0:	andeq	r8, r1, r4, ror r3
   18af4:	andeq	r8, r1, r4, ror r3
   18af8:	andeq	r8, r1, r4, ror r3
   18afc:	andeq	r8, r1, r4, ror r3
   18b00:	andeq	r8, r1, r4, ror r3
   18b04:	andeq	r8, r1, r4, ror r3
   18b08:	andeq	r8, r1, r4, ror r3
   18b0c:	andeq	r8, r1, r8, lsl #5
   18b10:	andeq	r8, r1, r4, asr #5
   18b14:	andeq	r8, r1, r4, asr #5
   18b18:	andeq	r8, r1, ip, ror r2
   18b1c:	andeq	r8, r1, r4, asr #5
   18b20:	andeq	r8, r1, r8, ror #15
   18b24:	andeq	r8, r1, r4, asr #5
   18b28:	ldrdeq	r8, [r1], -r4
   18b2c:	andeq	r8, r1, r4, asr #5
   18b30:	andeq	r8, r1, r4, asr #5
   18b34:	andeq	r8, r1, r4, asr #5
   18b38:	andeq	r8, r1, r8, ror #15
   18b3c:	andeq	r8, r1, r8, ror #15
   18b40:	andeq	r8, r1, r8, ror #15
   18b44:	andeq	r8, r1, r8, ror #15
   18b48:	andeq	r8, r1, r8, ror #15
   18b4c:	andeq	r8, r1, r8, ror #15
   18b50:	andeq	r8, r1, r8, ror #15
   18b54:	andeq	r8, r1, r8, ror #15
   18b58:	andeq	r8, r1, r8, ror #15
   18b5c:	andeq	r8, r1, r8, ror #15
   18b60:	andeq	r8, r1, r8, ror #15
   18b64:	andeq	r8, r1, r8, ror #15
   18b68:	andeq	r8, r1, r8, ror #15
   18b6c:	andeq	r8, r1, r8, ror #15
   18b70:	andeq	r8, r1, r8, ror #15
   18b74:	andeq	r8, r1, r8, ror #15
   18b78:	andeq	r8, r1, r4, asr #5
   18b7c:	andeq	r8, r1, r4, asr #5
   18b80:	andeq	r8, r1, r4, asr #5
   18b84:	andeq	r8, r1, r4, asr #5
   18b88:	andeq	r7, r1, r4, lsr ip
   18b8c:	andeq	r8, r1, r4, ror r3
   18b90:	andeq	r8, r1, r8, ror #15
   18b94:	andeq	r8, r1, r8, ror #15
   18b98:	andeq	r8, r1, r8, ror #15
   18b9c:	andeq	r8, r1, r8, ror #15
   18ba0:	andeq	r8, r1, r8, ror #15
   18ba4:	andeq	r8, r1, r8, ror #15
   18ba8:	andeq	r8, r1, r8, ror #15
   18bac:	andeq	r8, r1, r8, ror #15
   18bb0:	andeq	r8, r1, r8, ror #15
   18bb4:	andeq	r8, r1, r8, ror #15
   18bb8:	andeq	r8, r1, r8, ror #15
   18bbc:	andeq	r8, r1, r8, ror #15
   18bc0:	andeq	r8, r1, r8, ror #15
   18bc4:	andeq	r8, r1, r8, ror #15
   18bc8:	andeq	r8, r1, r8, ror #15
   18bcc:	andeq	r8, r1, r8, ror #15
   18bd0:	andeq	r8, r1, r8, ror #15
   18bd4:	andeq	r8, r1, r8, ror #15
   18bd8:	andeq	r8, r1, r8, ror #15
   18bdc:	andeq	r8, r1, r8, ror #15
   18be0:	andeq	r8, r1, r8, ror #15
   18be4:	andeq	r8, r1, r8, ror #15
   18be8:	andeq	r8, r1, r8, ror #15
   18bec:	andeq	r8, r1, r8, ror #15
   18bf0:	andeq	r8, r1, r8, ror #15
   18bf4:	andeq	r8, r1, r8, ror #15
   18bf8:	andeq	r8, r1, r4, asr #5
   18bfc:	andeq	r8, r1, ip, ror #2
   18c00:	andeq	r8, r1, r8, ror #15
   18c04:	andeq	r8, r1, r4, asr #5
   18c08:	andeq	r8, r1, r8, ror #15
   18c0c:	andeq	r8, r1, r4, asr #5
   18c10:	andeq	r8, r1, r8, ror #15
   18c14:	andeq	r8, r1, r8, ror #15
   18c18:	andeq	r8, r1, r8, ror #15
   18c1c:	andeq	r8, r1, r8, ror #15
   18c20:	andeq	r8, r1, r8, ror #15
   18c24:	andeq	r8, r1, r8, ror #15
   18c28:	andeq	r8, r1, r8, ror #15
   18c2c:	andeq	r8, r1, r8, ror #15
   18c30:	andeq	r8, r1, r8, ror #15
   18c34:	andeq	r8, r1, r8, ror #15
   18c38:	andeq	r8, r1, r8, ror #15
   18c3c:	andeq	r8, r1, r8, ror #15
   18c40:	andeq	r8, r1, r8, ror #15
   18c44:	andeq	r8, r1, r8, ror #15
   18c48:	andeq	r8, r1, r8, ror #15
   18c4c:	andeq	r8, r1, r8, ror #15
   18c50:	andeq	r8, r1, r8, ror #15
   18c54:	andeq	r8, r1, r8, ror #15
   18c58:	andeq	r8, r1, r8, ror #15
   18c5c:	andeq	r8, r1, r8, ror #15
   18c60:	andeq	r8, r1, r8, ror #15
   18c64:	andeq	r8, r1, r8, ror #15
   18c68:	andeq	r8, r1, r8, ror #15
   18c6c:	andeq	r8, r1, r8, ror #15
   18c70:	andeq	r8, r1, r8, ror #15
   18c74:	andeq	r8, r1, r8, ror #15
   18c78:	andeq	r8, r1, ip, lsr #4
   18c7c:	andeq	r8, r1, r4, asr #5
   18c80:	andeq	r8, r1, ip, lsr #4
   18c84:	andeq	r8, r1, ip, ror r2
   18c88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c8c:	strd	r6, [sp, #8]
   18c90:	strd	r8, [sp, #16]
   18c94:	strd	sl, [sp, #24]
   18c98:	str	lr, [sp, #32]
   18c9c:	sub	sp, sp, #52	; 0x34
   18ca0:	mov	r5, r0
   18ca4:	str	r1, [sp, #24]
   18ca8:	str	r2, [sp, #28]
   18cac:	mov	r4, r3
   18cb0:	bl	113a4 <__errno_location@plt>
   18cb4:	str	r0, [sp, #32]
   18cb8:	ldr	r3, [r0]
   18cbc:	str	r3, [sp, #36]	; 0x24
   18cc0:	movw	r3, #57728	; 0xe180
   18cc4:	movt	r3, #2
   18cc8:	ldr	r6, [r3]
   18ccc:	cmn	r5, #-2147483647	; 0x80000001
   18cd0:	movne	r3, #0
   18cd4:	moveq	r3, #1
   18cd8:	orrs	r3, r3, r5, lsr #31
   18cdc:	bne	18e40 <__assert_fail@plt+0x7964>
   18ce0:	movw	r3, #57728	; 0xe180
   18ce4:	movt	r3, #2
   18ce8:	ldr	r2, [r3, #4]
   18cec:	cmp	r2, r5
   18cf0:	bgt	18d60 <__assert_fail@plt+0x7884>
   18cf4:	str	r2, [sp, #44]	; 0x2c
   18cf8:	add	r3, r3, #8
   18cfc:	cmp	r6, r3
   18d00:	beq	18e44 <__assert_fail@plt+0x7968>
   18d04:	sub	r2, r5, r2
   18d08:	mov	r3, #8
   18d0c:	str	r3, [sp]
   18d10:	mvn	r3, #-2147483648	; 0x80000000
   18d14:	add	r2, r2, #1
   18d18:	add	r1, sp, #44	; 0x2c
   18d1c:	mov	r0, r6
   18d20:	bl	19f3c <__assert_fail@plt+0x8a60>
   18d24:	mov	r6, r0
   18d28:	movw	r3, #57728	; 0xe180
   18d2c:	movt	r3, #2
   18d30:	str	r0, [r3]
   18d34:	movw	r7, #57728	; 0xe180
   18d38:	movt	r7, #2
   18d3c:	ldr	r0, [r7, #4]
   18d40:	ldr	r2, [sp, #44]	; 0x2c
   18d44:	sub	r2, r2, r0
   18d48:	lsl	r2, r2, #3
   18d4c:	mov	r1, #0
   18d50:	add	r0, r6, r0, lsl #3
   18d54:	bl	113d4 <memset@plt>
   18d58:	ldr	r3, [sp, #44]	; 0x2c
   18d5c:	str	r3, [r7, #4]
   18d60:	add	fp, r6, r5, lsl #3
   18d64:	ldr	r8, [r6, r5, lsl #3]
   18d68:	ldr	r7, [fp, #4]
   18d6c:	ldr	r3, [r4, #4]
   18d70:	orr	r9, r3, #1
   18d74:	add	sl, r4, #8
   18d78:	ldr	r3, [r4, #44]	; 0x2c
   18d7c:	str	r3, [sp, #16]
   18d80:	ldr	r3, [r4, #40]	; 0x28
   18d84:	str	r3, [sp, #12]
   18d88:	str	sl, [sp, #8]
   18d8c:	str	r9, [sp, #4]
   18d90:	ldr	r3, [r4]
   18d94:	str	r3, [sp]
   18d98:	ldr	r3, [sp, #28]
   18d9c:	ldr	r2, [sp, #24]
   18da0:	mov	r1, r8
   18da4:	mov	r0, r7
   18da8:	bl	17590 <__assert_fail@plt+0x60b4>
   18dac:	cmp	r8, r0
   18db0:	bhi	18e14 <__assert_fail@plt+0x7938>
   18db4:	add	r8, r0, #1
   18db8:	str	r8, [r6, r5, lsl #3]
   18dbc:	movw	r3, #58464	; 0xe460
   18dc0:	movt	r3, #2
   18dc4:	cmp	r7, r3
   18dc8:	beq	18dd4 <__assert_fail@plt+0x78f8>
   18dcc:	mov	r0, r7
   18dd0:	bl	1af4c <__assert_fail@plt+0x9a70>
   18dd4:	mov	r0, r8
   18dd8:	bl	19d38 <__assert_fail@plt+0x885c>
   18ddc:	mov	r7, r0
   18de0:	str	r0, [fp, #4]
   18de4:	ldr	r3, [r4, #44]	; 0x2c
   18de8:	str	r3, [sp, #16]
   18dec:	ldr	r3, [r4, #40]	; 0x28
   18df0:	str	r3, [sp, #12]
   18df4:	str	sl, [sp, #8]
   18df8:	str	r9, [sp, #4]
   18dfc:	ldr	r3, [r4]
   18e00:	str	r3, [sp]
   18e04:	ldr	r3, [sp, #28]
   18e08:	ldr	r2, [sp, #24]
   18e0c:	mov	r1, r8
   18e10:	bl	17590 <__assert_fail@plt+0x60b4>
   18e14:	ldr	r3, [sp, #32]
   18e18:	ldr	r2, [sp, #36]	; 0x24
   18e1c:	str	r2, [r3]
   18e20:	mov	r0, r7
   18e24:	add	sp, sp, #52	; 0x34
   18e28:	ldrd	r4, [sp]
   18e2c:	ldrd	r6, [sp, #8]
   18e30:	ldrd	r8, [sp, #16]
   18e34:	ldrd	sl, [sp, #24]
   18e38:	add	sp, sp, #32
   18e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e40:	bl	114ac <abort@plt>
   18e44:	sub	r2, r5, r2
   18e48:	mov	r3, #8
   18e4c:	str	r3, [sp]
   18e50:	mvn	r3, #-2147483648	; 0x80000000
   18e54:	add	r2, r2, #1
   18e58:	add	r1, sp, #44	; 0x2c
   18e5c:	mov	r0, #0
   18e60:	bl	19f3c <__assert_fail@plt+0x8a60>
   18e64:	mov	r6, r0
   18e68:	movw	r3, #57728	; 0xe180
   18e6c:	movt	r3, #2
   18e70:	str	r0, [r3]
   18e74:	ldrd	r2, [r3, #8]
   18e78:	strd	r2, [r0]
   18e7c:	b	18d34 <__assert_fail@plt+0x7858>
   18e80:	strd	r4, [sp, #-16]!
   18e84:	str	r6, [sp, #8]
   18e88:	str	lr, [sp, #12]
   18e8c:	mov	r4, r0
   18e90:	bl	113a4 <__errno_location@plt>
   18e94:	mov	r5, r0
   18e98:	ldr	r6, [r0]
   18e9c:	cmp	r4, #0
   18ea0:	ldr	r3, [pc, #32]	; 18ec8 <__assert_fail@plt+0x79ec>
   18ea4:	moveq	r4, r3
   18ea8:	mov	r1, #48	; 0x30
   18eac:	mov	r0, r4
   18eb0:	bl	1a0ac <__assert_fail@plt+0x8bd0>
   18eb4:	str	r6, [r5]
   18eb8:	ldrd	r4, [sp]
   18ebc:	ldr	r6, [sp, #8]
   18ec0:	add	sp, sp, #12
   18ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ec8:	andeq	lr, r2, r0, ror #10
   18ecc:	subs	r3, r0, #0
   18ed0:	ldr	r2, [pc, #8]	; 18ee0 <__assert_fail@plt+0x7a04>
   18ed4:	moveq	r3, r2
   18ed8:	ldr	r0, [r3]
   18edc:	bx	lr
   18ee0:	andeq	lr, r2, r0, ror #10
   18ee4:	subs	r3, r0, #0
   18ee8:	ldr	r2, [pc, #8]	; 18ef8 <__assert_fail@plt+0x7a1c>
   18eec:	moveq	r3, r2
   18ef0:	str	r1, [r3]
   18ef4:	bx	lr
   18ef8:	andeq	lr, r2, r0, ror #10
   18efc:	push	{lr}		; (str lr, [sp, #-4]!)
   18f00:	subs	r3, r0, #0
   18f04:	ldr	r0, [pc, #44]	; 18f38 <__assert_fail@plt+0x7a5c>
   18f08:	moveq	r3, r0
   18f0c:	add	r3, r3, #8
   18f10:	lsr	lr, r1, #5
   18f14:	and	r1, r1, #31
   18f18:	ldr	ip, [r3, lr, lsl #2]
   18f1c:	lsr	r0, ip, r1
   18f20:	eor	r2, r2, r0
   18f24:	and	r2, r2, #1
   18f28:	eor	r1, ip, r2, lsl r1
   18f2c:	str	r1, [r3, lr, lsl #2]
   18f30:	and	r0, r0, #1
   18f34:	pop	{pc}		; (ldr pc, [sp], #4)
   18f38:	andeq	lr, r2, r0, ror #10
   18f3c:	subs	r3, r0, #0
   18f40:	ldr	r2, [pc, #12]	; 18f54 <__assert_fail@plt+0x7a78>
   18f44:	moveq	r3, r2
   18f48:	ldr	r0, [r3, #4]
   18f4c:	str	r1, [r3, #4]
   18f50:	bx	lr
   18f54:	andeq	lr, r2, r0, ror #10
   18f58:	subs	r3, r0, #0
   18f5c:	ldr	r0, [pc, #44]	; 18f90 <__assert_fail@plt+0x7ab4>
   18f60:	moveq	r3, r0
   18f64:	mov	r0, #10
   18f68:	str	r0, [r3]
   18f6c:	cmp	r2, #0
   18f70:	cmpne	r1, #0
   18f74:	beq	18f84 <__assert_fail@plt+0x7aa8>
   18f78:	str	r1, [r3, #40]	; 0x28
   18f7c:	str	r2, [r3, #44]	; 0x2c
   18f80:	bx	lr
   18f84:	str	r4, [sp, #-8]!
   18f88:	str	lr, [sp, #4]
   18f8c:	bl	114ac <abort@plt>
   18f90:	andeq	lr, r2, r0, ror #10
   18f94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18f98:	strd	r6, [sp, #8]
   18f9c:	strd	r8, [sp, #16]
   18fa0:	str	sl, [sp, #24]
   18fa4:	str	lr, [sp, #28]
   18fa8:	sub	sp, sp, #24
   18fac:	mov	r7, r0
   18fb0:	mov	r8, r1
   18fb4:	mov	r9, r2
   18fb8:	mov	sl, r3
   18fbc:	ldr	r4, [sp, #56]	; 0x38
   18fc0:	cmp	r4, #0
   18fc4:	ldr	r3, [pc, #104]	; 19034 <__assert_fail@plt+0x7b58>
   18fc8:	moveq	r4, r3
   18fcc:	bl	113a4 <__errno_location@plt>
   18fd0:	mov	r5, r0
   18fd4:	ldr	r6, [r0]
   18fd8:	ldr	r3, [r4, #44]	; 0x2c
   18fdc:	str	r3, [sp, #16]
   18fe0:	ldr	r3, [r4, #40]	; 0x28
   18fe4:	str	r3, [sp, #12]
   18fe8:	add	r3, r4, #8
   18fec:	str	r3, [sp, #8]
   18ff0:	ldr	r3, [r4, #4]
   18ff4:	str	r3, [sp, #4]
   18ff8:	ldr	r3, [r4]
   18ffc:	str	r3, [sp]
   19000:	mov	r3, sl
   19004:	mov	r2, r9
   19008:	mov	r1, r8
   1900c:	mov	r0, r7
   19010:	bl	17590 <__assert_fail@plt+0x60b4>
   19014:	str	r6, [r5]
   19018:	add	sp, sp, #24
   1901c:	ldrd	r4, [sp]
   19020:	ldrd	r6, [sp, #8]
   19024:	ldrd	r8, [sp, #16]
   19028:	ldr	sl, [sp, #24]
   1902c:	add	sp, sp, #28
   19030:	pop	{pc}		; (ldr pc, [sp], #4)
   19034:	andeq	lr, r2, r0, ror #10
   19038:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1903c:	strd	r6, [sp, #8]
   19040:	strd	r8, [sp, #16]
   19044:	strd	sl, [sp, #24]
   19048:	str	lr, [sp, #32]
   1904c:	sub	sp, sp, #44	; 0x2c
   19050:	mov	r8, r0
   19054:	mov	sl, r1
   19058:	mov	r6, r2
   1905c:	subs	r4, r3, #0
   19060:	ldr	r3, [pc, #200]	; 19130 <__assert_fail@plt+0x7c54>
   19064:	moveq	r4, r3
   19068:	bl	113a4 <__errno_location@plt>
   1906c:	mov	r7, r0
   19070:	ldr	fp, [r0]
   19074:	ldr	r5, [r4, #4]
   19078:	cmp	r6, #0
   1907c:	orreq	r5, r5, #1
   19080:	add	r9, r4, #8
   19084:	ldr	r3, [r4, #44]	; 0x2c
   19088:	str	r3, [sp, #16]
   1908c:	ldr	r3, [r4, #40]	; 0x28
   19090:	str	r3, [sp, #12]
   19094:	str	r9, [sp, #8]
   19098:	str	r5, [sp, #4]
   1909c:	ldr	r3, [r4]
   190a0:	str	r3, [sp]
   190a4:	str	sl, [sp, #36]	; 0x24
   190a8:	mov	r3, sl
   190ac:	str	r8, [sp, #32]
   190b0:	mov	r2, r8
   190b4:	mov	r1, #0
   190b8:	mov	r0, r1
   190bc:	bl	17590 <__assert_fail@plt+0x60b4>
   190c0:	mov	sl, r0
   190c4:	add	r8, r0, #1
   190c8:	mov	r0, r8
   190cc:	bl	19d38 <__assert_fail@plt+0x885c>
   190d0:	str	r0, [sp, #28]
   190d4:	ldr	r3, [r4, #44]	; 0x2c
   190d8:	str	r3, [sp, #16]
   190dc:	ldr	r3, [r4, #40]	; 0x28
   190e0:	str	r3, [sp, #12]
   190e4:	str	r9, [sp, #8]
   190e8:	str	r5, [sp, #4]
   190ec:	ldr	r3, [r4]
   190f0:	str	r3, [sp]
   190f4:	ldr	r3, [sp, #36]	; 0x24
   190f8:	ldr	r2, [sp, #32]
   190fc:	mov	r1, r8
   19100:	bl	17590 <__assert_fail@plt+0x60b4>
   19104:	str	fp, [r7]
   19108:	cmp	r6, #0
   1910c:	strne	sl, [r6]
   19110:	ldr	r0, [sp, #28]
   19114:	add	sp, sp, #44	; 0x2c
   19118:	ldrd	r4, [sp]
   1911c:	ldrd	r6, [sp, #8]
   19120:	ldrd	r8, [sp, #16]
   19124:	ldrd	sl, [sp, #24]
   19128:	add	sp, sp, #32
   1912c:	pop	{pc}		; (ldr pc, [sp], #4)
   19130:	andeq	lr, r2, r0, ror #10
   19134:	str	r4, [sp, #-8]!
   19138:	str	lr, [sp, #4]
   1913c:	mov	r3, r2
   19140:	mov	r2, #0
   19144:	bl	19038 <__assert_fail@plt+0x7b5c>
   19148:	ldr	r4, [sp]
   1914c:	add	sp, sp, #4
   19150:	pop	{pc}		; (ldr pc, [sp], #4)
   19154:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19158:	strd	r6, [sp, #8]
   1915c:	str	r8, [sp, #16]
   19160:	str	lr, [sp, #20]
   19164:	movw	r3, #57728	; 0xe180
   19168:	movt	r3, #2
   1916c:	ldr	r7, [r3]
   19170:	ldr	r3, [r3, #4]
   19174:	cmp	r3, #1
   19178:	ble	191a4 <__assert_fail@plt+0x7cc8>
   1917c:	mov	r4, #1
   19180:	add	r6, r7, #4
   19184:	movw	r5, #57728	; 0xe180
   19188:	movt	r5, #2
   1918c:	ldr	r0, [r6, r4, lsl #3]
   19190:	bl	1af4c <__assert_fail@plt+0x9a70>
   19194:	add	r4, r4, #1
   19198:	ldr	r3, [r5, #4]
   1919c:	cmp	r3, r4
   191a0:	bgt	1918c <__assert_fail@plt+0x7cb0>
   191a4:	ldr	r0, [r7, #4]
   191a8:	movw	r3, #58464	; 0xe460
   191ac:	movt	r3, #2
   191b0:	cmp	r0, r3
   191b4:	beq	191d8 <__assert_fail@plt+0x7cfc>
   191b8:	bl	1af4c <__assert_fail@plt+0x9a70>
   191bc:	movw	r3, #57728	; 0xe180
   191c0:	movt	r3, #2
   191c4:	mov	r2, #256	; 0x100
   191c8:	str	r2, [r3, #8]
   191cc:	movw	r2, #58464	; 0xe460
   191d0:	movt	r2, #2
   191d4:	str	r2, [r3, #12]
   191d8:	ldr	r3, [pc, #64]	; 19220 <__assert_fail@plt+0x7d44>
   191dc:	cmp	r7, r3
   191e0:	beq	191fc <__assert_fail@plt+0x7d20>
   191e4:	mov	r0, r7
   191e8:	bl	1af4c <__assert_fail@plt+0x9a70>
   191ec:	movw	r3, #57728	; 0xe180
   191f0:	movt	r3, #2
   191f4:	add	r2, r3, #8
   191f8:	str	r2, [r3]
   191fc:	movw	r3, #57728	; 0xe180
   19200:	movt	r3, #2
   19204:	mov	r2, #1
   19208:	str	r2, [r3, #4]
   1920c:	ldrd	r4, [sp]
   19210:	ldrd	r6, [sp, #8]
   19214:	ldr	r8, [sp, #16]
   19218:	add	sp, sp, #20
   1921c:	pop	{pc}		; (ldr pc, [sp], #4)
   19220:	andeq	lr, r2, r8, lsl #3
   19224:	str	r4, [sp, #-8]!
   19228:	str	lr, [sp, #4]
   1922c:	ldr	r3, [pc, #16]	; 19244 <__assert_fail@plt+0x7d68>
   19230:	mvn	r2, #0
   19234:	bl	18c88 <__assert_fail@plt+0x77ac>
   19238:	ldr	r4, [sp]
   1923c:	add	sp, sp, #4
   19240:	pop	{pc}		; (ldr pc, [sp], #4)
   19244:	andeq	lr, r2, r0, ror #10
   19248:	str	r4, [sp, #-8]!
   1924c:	str	lr, [sp, #4]
   19250:	ldr	r3, [pc, #12]	; 19264 <__assert_fail@plt+0x7d88>
   19254:	bl	18c88 <__assert_fail@plt+0x77ac>
   19258:	ldr	r4, [sp]
   1925c:	add	sp, sp, #4
   19260:	pop	{pc}		; (ldr pc, [sp], #4)
   19264:	andeq	lr, r2, r0, ror #10
   19268:	str	r4, [sp, #-8]!
   1926c:	str	lr, [sp, #4]
   19270:	mov	r1, r0
   19274:	mov	r0, #0
   19278:	bl	19224 <__assert_fail@plt+0x7d48>
   1927c:	ldr	r4, [sp]
   19280:	add	sp, sp, #4
   19284:	pop	{pc}		; (ldr pc, [sp], #4)
   19288:	str	r4, [sp, #-8]!
   1928c:	str	lr, [sp, #4]
   19290:	mov	r2, r1
   19294:	mov	r1, r0
   19298:	mov	r0, #0
   1929c:	bl	19248 <__assert_fail@plt+0x7d6c>
   192a0:	ldr	r4, [sp]
   192a4:	add	sp, sp, #4
   192a8:	pop	{pc}		; (ldr pc, [sp], #4)
   192ac:	strd	r4, [sp, #-12]!
   192b0:	str	lr, [sp, #8]
   192b4:	sub	sp, sp, #52	; 0x34
   192b8:	mov	r4, r0
   192bc:	mov	r5, r2
   192c0:	mov	r0, sp
   192c4:	bl	173fc <__assert_fail@plt+0x5f20>
   192c8:	mov	r3, sp
   192cc:	mvn	r2, #0
   192d0:	mov	r1, r5
   192d4:	mov	r0, r4
   192d8:	bl	18c88 <__assert_fail@plt+0x77ac>
   192dc:	add	sp, sp, #52	; 0x34
   192e0:	ldrd	r4, [sp]
   192e4:	add	sp, sp, #8
   192e8:	pop	{pc}		; (ldr pc, [sp], #4)
   192ec:	strd	r4, [sp, #-16]!
   192f0:	str	r6, [sp, #8]
   192f4:	str	lr, [sp, #12]
   192f8:	sub	sp, sp, #48	; 0x30
   192fc:	mov	r4, r0
   19300:	mov	r5, r2
   19304:	mov	r6, r3
   19308:	mov	r0, sp
   1930c:	bl	173fc <__assert_fail@plt+0x5f20>
   19310:	mov	r3, sp
   19314:	mov	r2, r6
   19318:	mov	r1, r5
   1931c:	mov	r0, r4
   19320:	bl	18c88 <__assert_fail@plt+0x77ac>
   19324:	add	sp, sp, #48	; 0x30
   19328:	ldrd	r4, [sp]
   1932c:	ldr	r6, [sp, #8]
   19330:	add	sp, sp, #12
   19334:	pop	{pc}		; (ldr pc, [sp], #4)
   19338:	str	r4, [sp, #-8]!
   1933c:	str	lr, [sp, #4]
   19340:	mov	r2, r1
   19344:	mov	r1, r0
   19348:	mov	r0, #0
   1934c:	bl	192ac <__assert_fail@plt+0x7dd0>
   19350:	ldr	r4, [sp]
   19354:	add	sp, sp, #4
   19358:	pop	{pc}		; (ldr pc, [sp], #4)
   1935c:	str	r4, [sp, #-8]!
   19360:	str	lr, [sp, #4]
   19364:	mov	r3, r2
   19368:	mov	r2, r1
   1936c:	mov	r1, r0
   19370:	mov	r0, #0
   19374:	bl	192ec <__assert_fail@plt+0x7e10>
   19378:	ldr	r4, [sp]
   1937c:	add	sp, sp, #4
   19380:	pop	{pc}		; (ldr pc, [sp], #4)
   19384:	strd	r4, [sp, #-12]!
   19388:	str	lr, [sp, #8]
   1938c:	sub	sp, sp, #52	; 0x34
   19390:	mov	r4, r0
   19394:	mov	r5, r1
   19398:	mov	r1, r2
   1939c:	ldr	r0, [pc, #92]	; 19400 <__assert_fail@plt+0x7f24>
   193a0:	ldrd	r2, [r0]
   193a4:	strd	r2, [sp]
   193a8:	ldrd	r2, [r0, #8]
   193ac:	strd	r2, [sp, #8]
   193b0:	ldrd	r2, [r0, #16]
   193b4:	strd	r2, [sp, #16]
   193b8:	ldrd	r2, [r0, #24]
   193bc:	strd	r2, [sp, #24]
   193c0:	ldrd	r2, [r0, #32]
   193c4:	strd	r2, [sp, #32]
   193c8:	ldrd	r2, [r0, #40]	; 0x28
   193cc:	strd	r2, [sp, #40]	; 0x28
   193d0:	mov	r2, #1
   193d4:	mov	r0, sp
   193d8:	bl	18efc <__assert_fail@plt+0x7a20>
   193dc:	mov	r3, sp
   193e0:	mov	r2, r5
   193e4:	mov	r1, r4
   193e8:	mov	r0, #0
   193ec:	bl	18c88 <__assert_fail@plt+0x77ac>
   193f0:	add	sp, sp, #52	; 0x34
   193f4:	ldrd	r4, [sp]
   193f8:	add	sp, sp, #8
   193fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19400:	andeq	lr, r2, r0, ror #10
   19404:	str	r4, [sp, #-8]!
   19408:	str	lr, [sp, #4]
   1940c:	mov	r2, r1
   19410:	mvn	r1, #0
   19414:	bl	19384 <__assert_fail@plt+0x7ea8>
   19418:	ldr	r4, [sp]
   1941c:	add	sp, sp, #4
   19420:	pop	{pc}		; (ldr pc, [sp], #4)
   19424:	str	r4, [sp, #-8]!
   19428:	str	lr, [sp, #4]
   1942c:	mov	r1, #58	; 0x3a
   19430:	bl	19404 <__assert_fail@plt+0x7f28>
   19434:	ldr	r4, [sp]
   19438:	add	sp, sp, #4
   1943c:	pop	{pc}		; (ldr pc, [sp], #4)
   19440:	str	r4, [sp, #-8]!
   19444:	str	lr, [sp, #4]
   19448:	mov	r2, #58	; 0x3a
   1944c:	bl	19384 <__assert_fail@plt+0x7ea8>
   19450:	ldr	r4, [sp]
   19454:	add	sp, sp, #4
   19458:	pop	{pc}		; (ldr pc, [sp], #4)
   1945c:	strd	r4, [sp, #-12]!
   19460:	str	lr, [sp, #8]
   19464:	sub	sp, sp, #100	; 0x64
   19468:	mov	r4, r0
   1946c:	mov	r5, r2
   19470:	mov	r0, sp
   19474:	bl	173fc <__assert_fail@plt+0x5f20>
   19478:	ldrd	r2, [sp]
   1947c:	strd	r2, [sp, #48]	; 0x30
   19480:	ldrd	r2, [sp, #8]
   19484:	strd	r2, [sp, #56]	; 0x38
   19488:	ldrd	r2, [sp, #16]
   1948c:	strd	r2, [sp, #64]	; 0x40
   19490:	ldrd	r2, [sp, #24]
   19494:	strd	r2, [sp, #72]	; 0x48
   19498:	ldrd	r2, [sp, #32]
   1949c:	strd	r2, [sp, #80]	; 0x50
   194a0:	ldrd	r2, [sp, #40]	; 0x28
   194a4:	strd	r2, [sp, #88]	; 0x58
   194a8:	mov	r2, #1
   194ac:	mov	r1, #58	; 0x3a
   194b0:	add	r0, sp, #48	; 0x30
   194b4:	bl	18efc <__assert_fail@plt+0x7a20>
   194b8:	add	r3, sp, #48	; 0x30
   194bc:	mvn	r2, #0
   194c0:	mov	r1, r5
   194c4:	mov	r0, r4
   194c8:	bl	18c88 <__assert_fail@plt+0x77ac>
   194cc:	add	sp, sp, #100	; 0x64
   194d0:	ldrd	r4, [sp]
   194d4:	add	sp, sp, #8
   194d8:	pop	{pc}		; (ldr pc, [sp], #4)
   194dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   194e0:	strd	r6, [sp, #8]
   194e4:	str	lr, [sp, #16]
   194e8:	sub	sp, sp, #52	; 0x34
   194ec:	mov	r4, r0
   194f0:	mov	r5, r3
   194f4:	ldr	r3, [pc, #92]	; 19558 <__assert_fail@plt+0x807c>
   194f8:	ldrd	r6, [r3]
   194fc:	strd	r6, [sp]
   19500:	ldrd	r6, [r3, #8]
   19504:	strd	r6, [sp, #8]
   19508:	ldrd	r6, [r3, #16]
   1950c:	strd	r6, [sp, #16]
   19510:	ldrd	r6, [r3, #24]
   19514:	strd	r6, [sp, #24]
   19518:	ldrd	r6, [r3, #32]
   1951c:	strd	r6, [sp, #32]
   19520:	ldrd	r6, [r3, #40]	; 0x28
   19524:	strd	r6, [sp, #40]	; 0x28
   19528:	mov	r0, sp
   1952c:	bl	18f58 <__assert_fail@plt+0x7a7c>
   19530:	mov	r3, sp
   19534:	ldr	r2, [sp, #72]	; 0x48
   19538:	mov	r1, r5
   1953c:	mov	r0, r4
   19540:	bl	18c88 <__assert_fail@plt+0x77ac>
   19544:	add	sp, sp, #52	; 0x34
   19548:	ldrd	r4, [sp]
   1954c:	ldrd	r6, [sp, #8]
   19550:	add	sp, sp, #16
   19554:	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	andeq	lr, r2, r0, ror #10
   1955c:	push	{lr}		; (str lr, [sp, #-4]!)
   19560:	sub	sp, sp, #12
   19564:	mvn	ip, #0
   19568:	str	ip, [sp]
   1956c:	bl	194dc <__assert_fail@plt+0x8000>
   19570:	add	sp, sp, #12
   19574:	pop	{pc}		; (ldr pc, [sp], #4)
   19578:	str	r4, [sp, #-8]!
   1957c:	str	lr, [sp, #4]
   19580:	mov	r3, r2
   19584:	mov	r2, r1
   19588:	mov	r1, r0
   1958c:	mov	r0, #0
   19590:	bl	1955c <__assert_fail@plt+0x8080>
   19594:	ldr	r4, [sp]
   19598:	add	sp, sp, #4
   1959c:	pop	{pc}		; (ldr pc, [sp], #4)
   195a0:	push	{lr}		; (str lr, [sp, #-4]!)
   195a4:	sub	sp, sp, #12
   195a8:	str	r3, [sp]
   195ac:	mov	r3, r2
   195b0:	mov	r2, r1
   195b4:	mov	r1, r0
   195b8:	mov	r0, #0
   195bc:	bl	194dc <__assert_fail@plt+0x8000>
   195c0:	add	sp, sp, #12
   195c4:	pop	{pc}		; (ldr pc, [sp], #4)
   195c8:	str	r4, [sp, #-8]!
   195cc:	str	lr, [sp, #4]
   195d0:	ldr	r3, [pc, #12]	; 195e4 <__assert_fail@plt+0x8108>
   195d4:	bl	18c88 <__assert_fail@plt+0x77ac>
   195d8:	ldr	r4, [sp]
   195dc:	add	sp, sp, #4
   195e0:	pop	{pc}		; (ldr pc, [sp], #4)
   195e4:	muleq	r2, r0, r1
   195e8:	str	r4, [sp, #-8]!
   195ec:	str	lr, [sp, #4]
   195f0:	mov	r2, r1
   195f4:	mov	r1, r0
   195f8:	mov	r0, #0
   195fc:	bl	195c8 <__assert_fail@plt+0x80ec>
   19600:	ldr	r4, [sp]
   19604:	add	sp, sp, #4
   19608:	pop	{pc}		; (ldr pc, [sp], #4)
   1960c:	str	r4, [sp, #-8]!
   19610:	str	lr, [sp, #4]
   19614:	mvn	r2, #0
   19618:	bl	195c8 <__assert_fail@plt+0x80ec>
   1961c:	ldr	r4, [sp]
   19620:	add	sp, sp, #4
   19624:	pop	{pc}		; (ldr pc, [sp], #4)
   19628:	str	r4, [sp, #-8]!
   1962c:	str	lr, [sp, #4]
   19630:	mov	r1, r0
   19634:	mov	r0, #0
   19638:	bl	1960c <__assert_fail@plt+0x8130>
   1963c:	ldr	r4, [sp]
   19640:	add	sp, sp, #4
   19644:	pop	{pc}		; (ldr pc, [sp], #4)
   19648:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1964c:	strd	r6, [sp, #8]
   19650:	str	r8, [sp, #16]
   19654:	str	lr, [sp, #20]
   19658:	sub	sp, sp, #8
   1965c:	mov	r6, r0
   19660:	mov	r7, r1
   19664:	mov	r5, r2
   19668:	mov	r8, r3
   1966c:	ldr	r1, [sp, #36]	; 0x24
   19670:	ldr	r0, [sp, #32]
   19674:	bl	1a93c <__assert_fail@plt+0x9460>
   19678:	subs	r4, r0, #0
   1967c:	beq	196e8 <__assert_fail@plt+0x820c>
   19680:	cmp	r5, #0
   19684:	beq	196cc <__assert_fail@plt+0x81f0>
   19688:	str	r4, [sp, #4]
   1968c:	movw	r3, #52644	; 0xcda4
   19690:	movt	r3, #1
   19694:	str	r3, [sp]
   19698:	mov	r3, r8
   1969c:	mov	r2, r5
   196a0:	mov	r1, r7
   196a4:	mov	r0, r6
   196a8:	bl	11308 <error_at_line@plt>
   196ac:	mov	r0, r4
   196b0:	bl	1af4c <__assert_fail@plt+0x9a70>
   196b4:	add	sp, sp, #8
   196b8:	ldrd	r4, [sp]
   196bc:	ldrd	r6, [sp, #8]
   196c0:	ldr	r8, [sp, #16]
   196c4:	add	sp, sp, #20
   196c8:	pop	{pc}		; (ldr pc, [sp], #4)
   196cc:	mov	r3, r4
   196d0:	movw	r2, #52644	; 0xcda4
   196d4:	movt	r2, #1
   196d8:	mov	r1, r7
   196dc:	mov	r0, r6
   196e0:	bl	112d8 <error@plt>
   196e4:	b	196ac <__assert_fail@plt+0x81d0>
   196e8:	bl	113a4 <__errno_location@plt>
   196ec:	ldr	r4, [r0]
   196f0:	mov	r2, #5
   196f4:	movw	r1, #54600	; 0xd548
   196f8:	movt	r1, #1
   196fc:	mov	r0, #0
   19700:	bl	11230 <dcgettext@plt>
   19704:	mov	r2, r0
   19708:	mov	r1, r4
   1970c:	mov	r0, #0
   19710:	bl	112d8 <error@plt>
   19714:	bl	114ac <abort@plt>
   19718:	push	{lr}		; (str lr, [sp, #-4]!)
   1971c:	sub	sp, sp, #12
   19720:	str	r3, [sp, #4]
   19724:	str	r2, [sp]
   19728:	mov	r3, #0
   1972c:	mov	r2, r3
   19730:	bl	19648 <__assert_fail@plt+0x816c>
   19734:	add	sp, sp, #12
   19738:	pop	{pc}		; (ldr pc, [sp], #4)
   1973c:	strd	r4, [sp, #-16]!
   19740:	str	r6, [sp, #8]
   19744:	str	lr, [sp, #12]
   19748:	sub	sp, sp, #32
   1974c:	mov	r4, r0
   19750:	ldr	r5, [sp, #48]	; 0x30
   19754:	ldr	r6, [sp, #52]	; 0x34
   19758:	cmp	r1, #0
   1975c:	beq	19828 <__assert_fail@plt+0x834c>
   19760:	str	r3, [sp, #4]
   19764:	str	r2, [sp]
   19768:	mov	r3, r1
   1976c:	movw	r2, #54632	; 0xd568
   19770:	movt	r2, #1
   19774:	mov	r1, #1
   19778:	bl	11404 <__fprintf_chk@plt>
   1977c:	mov	r2, #5
   19780:	movw	r1, #54652	; 0xd57c
   19784:	movt	r1, #1
   19788:	mov	r0, #0
   1978c:	bl	11230 <dcgettext@plt>
   19790:	movw	r3, #2022	; 0x7e6
   19794:	str	r3, [sp]
   19798:	mov	r3, r0
   1979c:	movw	r2, #55380	; 0xd854
   197a0:	movt	r2, #1
   197a4:	mov	r1, #1
   197a8:	mov	r0, r4
   197ac:	bl	11404 <__fprintf_chk@plt>
   197b0:	mov	r1, r4
   197b4:	mov	r0, #10
   197b8:	bl	11224 <fputc_unlocked@plt>
   197bc:	mov	r2, #5
   197c0:	movw	r1, #54656	; 0xd580
   197c4:	movt	r1, #1
   197c8:	mov	r0, #0
   197cc:	bl	11230 <dcgettext@plt>
   197d0:	movw	r3, #54828	; 0xd62c
   197d4:	movt	r3, #1
   197d8:	mov	r2, r0
   197dc:	mov	r1, #1
   197e0:	mov	r0, r4
   197e4:	bl	11404 <__fprintf_chk@plt>
   197e8:	mov	r1, r4
   197ec:	mov	r0, #10
   197f0:	bl	11224 <fputc_unlocked@plt>
   197f4:	cmp	r6, #9
   197f8:	ldrls	pc, [pc, r6, lsl #2]
   197fc:	b	19b00 <__assert_fail@plt+0x8624>
   19800:	andeq	r9, r1, ip, ror #16
   19804:	andeq	r9, r1, r4, asr #16
   19808:	andeq	r9, r1, r0, lsl #17
   1980c:			; <UNDEFINED> instruction: 0x000198b4
   19810:	strdeq	r9, [r1], -r0
   19814:	andeq	r9, r1, r4, lsr r9
   19818:	andeq	r9, r1, r0, lsl #19
   1981c:	ldrdeq	r9, [r1], -r4
   19820:	andeq	r9, r1, r0, lsr sl
   19824:	muleq	r1, r4, sl
   19828:	str	r3, [sp]
   1982c:	mov	r3, r2
   19830:	movw	r2, #54644	; 0xd574
   19834:	movt	r2, #1
   19838:	mov	r1, #1
   1983c:	bl	11404 <__fprintf_chk@plt>
   19840:	b	1977c <__assert_fail@plt+0x82a0>
   19844:	mov	r2, #5
   19848:	movw	r1, #54864	; 0xd650
   1984c:	movt	r1, #1
   19850:	mov	r0, #0
   19854:	bl	11230 <dcgettext@plt>
   19858:	ldr	r3, [r5]
   1985c:	mov	r2, r0
   19860:	mov	r1, #1
   19864:	mov	r0, r4
   19868:	bl	11404 <__fprintf_chk@plt>
   1986c:	add	sp, sp, #32
   19870:	ldrd	r4, [sp]
   19874:	ldr	r6, [sp, #8]
   19878:	add	sp, sp, #12
   1987c:	pop	{pc}		; (ldr pc, [sp], #4)
   19880:	mov	r2, #5
   19884:	movw	r1, #54880	; 0xd660
   19888:	movt	r1, #1
   1988c:	mov	r0, #0
   19890:	bl	11230 <dcgettext@plt>
   19894:	ldr	r3, [r5, #4]
   19898:	str	r3, [sp]
   1989c:	ldr	r3, [r5]
   198a0:	mov	r2, r0
   198a4:	mov	r1, #1
   198a8:	mov	r0, r4
   198ac:	bl	11404 <__fprintf_chk@plt>
   198b0:	b	1986c <__assert_fail@plt+0x8390>
   198b4:	mov	r2, #5
   198b8:	movw	r1, #54904	; 0xd678
   198bc:	movt	r1, #1
   198c0:	mov	r0, #0
   198c4:	bl	11230 <dcgettext@plt>
   198c8:	ldr	r3, [r5, #8]
   198cc:	str	r3, [sp, #4]
   198d0:	ldr	r3, [r5, #4]
   198d4:	str	r3, [sp]
   198d8:	ldr	r3, [r5]
   198dc:	mov	r2, r0
   198e0:	mov	r1, #1
   198e4:	mov	r0, r4
   198e8:	bl	11404 <__fprintf_chk@plt>
   198ec:	b	1986c <__assert_fail@plt+0x8390>
   198f0:	mov	r2, #5
   198f4:	movw	r1, #54932	; 0xd694
   198f8:	movt	r1, #1
   198fc:	mov	r0, #0
   19900:	bl	11230 <dcgettext@plt>
   19904:	ldr	r3, [r5, #12]
   19908:	str	r3, [sp, #8]
   1990c:	ldr	r3, [r5, #8]
   19910:	str	r3, [sp, #4]
   19914:	ldr	r3, [r5, #4]
   19918:	str	r3, [sp]
   1991c:	ldr	r3, [r5]
   19920:	mov	r2, r0
   19924:	mov	r1, #1
   19928:	mov	r0, r4
   1992c:	bl	11404 <__fprintf_chk@plt>
   19930:	b	1986c <__assert_fail@plt+0x8390>
   19934:	mov	r2, #5
   19938:	movw	r1, #54964	; 0xd6b4
   1993c:	movt	r1, #1
   19940:	mov	r0, #0
   19944:	bl	11230 <dcgettext@plt>
   19948:	ldr	r3, [r5, #16]
   1994c:	str	r3, [sp, #12]
   19950:	ldr	r3, [r5, #12]
   19954:	str	r3, [sp, #8]
   19958:	ldr	r3, [r5, #8]
   1995c:	str	r3, [sp, #4]
   19960:	ldr	r3, [r5, #4]
   19964:	str	r3, [sp]
   19968:	ldr	r3, [r5]
   1996c:	mov	r2, r0
   19970:	mov	r1, #1
   19974:	mov	r0, r4
   19978:	bl	11404 <__fprintf_chk@plt>
   1997c:	b	1986c <__assert_fail@plt+0x8390>
   19980:	mov	r2, #5
   19984:	movw	r1, #55000	; 0xd6d8
   19988:	movt	r1, #1
   1998c:	mov	r0, #0
   19990:	bl	11230 <dcgettext@plt>
   19994:	ldr	r3, [r5, #20]
   19998:	str	r3, [sp, #16]
   1999c:	ldr	r3, [r5, #16]
   199a0:	str	r3, [sp, #12]
   199a4:	ldr	r3, [r5, #12]
   199a8:	str	r3, [sp, #8]
   199ac:	ldr	r3, [r5, #8]
   199b0:	str	r3, [sp, #4]
   199b4:	ldr	r3, [r5, #4]
   199b8:	str	r3, [sp]
   199bc:	ldr	r3, [r5]
   199c0:	mov	r2, r0
   199c4:	mov	r1, #1
   199c8:	mov	r0, r4
   199cc:	bl	11404 <__fprintf_chk@plt>
   199d0:	b	1986c <__assert_fail@plt+0x8390>
   199d4:	mov	r2, #5
   199d8:	movw	r1, #55040	; 0xd700
   199dc:	movt	r1, #1
   199e0:	mov	r0, #0
   199e4:	bl	11230 <dcgettext@plt>
   199e8:	ldr	r3, [r5, #24]
   199ec:	str	r3, [sp, #20]
   199f0:	ldr	r3, [r5, #20]
   199f4:	str	r3, [sp, #16]
   199f8:	ldr	r3, [r5, #16]
   199fc:	str	r3, [sp, #12]
   19a00:	ldr	r3, [r5, #12]
   19a04:	str	r3, [sp, #8]
   19a08:	ldr	r3, [r5, #8]
   19a0c:	str	r3, [sp, #4]
   19a10:	ldr	r3, [r5, #4]
   19a14:	str	r3, [sp]
   19a18:	ldr	r3, [r5]
   19a1c:	mov	r2, r0
   19a20:	mov	r1, #1
   19a24:	mov	r0, r4
   19a28:	bl	11404 <__fprintf_chk@plt>
   19a2c:	b	1986c <__assert_fail@plt+0x8390>
   19a30:	mov	r2, #5
   19a34:	movw	r1, #55084	; 0xd72c
   19a38:	movt	r1, #1
   19a3c:	mov	r0, #0
   19a40:	bl	11230 <dcgettext@plt>
   19a44:	ldr	r3, [r5, #28]
   19a48:	str	r3, [sp, #24]
   19a4c:	ldr	r3, [r5, #24]
   19a50:	str	r3, [sp, #20]
   19a54:	ldr	r3, [r5, #20]
   19a58:	str	r3, [sp, #16]
   19a5c:	ldr	r3, [r5, #16]
   19a60:	str	r3, [sp, #12]
   19a64:	ldr	r3, [r5, #12]
   19a68:	str	r3, [sp, #8]
   19a6c:	ldr	r3, [r5, #8]
   19a70:	str	r3, [sp, #4]
   19a74:	ldr	r3, [r5, #4]
   19a78:	str	r3, [sp]
   19a7c:	ldr	r3, [r5]
   19a80:	mov	r2, r0
   19a84:	mov	r1, #1
   19a88:	mov	r0, r4
   19a8c:	bl	11404 <__fprintf_chk@plt>
   19a90:	b	1986c <__assert_fail@plt+0x8390>
   19a94:	mov	r2, #5
   19a98:	movw	r1, #55132	; 0xd75c
   19a9c:	movt	r1, #1
   19aa0:	mov	r0, #0
   19aa4:	bl	11230 <dcgettext@plt>
   19aa8:	ldr	r3, [r5, #32]
   19aac:	str	r3, [sp, #28]
   19ab0:	ldr	r3, [r5, #28]
   19ab4:	str	r3, [sp, #24]
   19ab8:	ldr	r3, [r5, #24]
   19abc:	str	r3, [sp, #20]
   19ac0:	ldr	r3, [r5, #20]
   19ac4:	str	r3, [sp, #16]
   19ac8:	ldr	r3, [r5, #16]
   19acc:	str	r3, [sp, #12]
   19ad0:	ldr	r3, [r5, #12]
   19ad4:	str	r3, [sp, #8]
   19ad8:	ldr	r3, [r5, #8]
   19adc:	str	r3, [sp, #4]
   19ae0:	ldr	r3, [r5, #4]
   19ae4:	str	r3, [sp]
   19ae8:	ldr	r3, [r5]
   19aec:	mov	r2, r0
   19af0:	mov	r1, #1
   19af4:	mov	r0, r4
   19af8:	bl	11404 <__fprintf_chk@plt>
   19afc:	b	1986c <__assert_fail@plt+0x8390>
   19b00:	mov	r2, #5
   19b04:	movw	r1, #55184	; 0xd790
   19b08:	movt	r1, #1
   19b0c:	mov	r0, #0
   19b10:	bl	11230 <dcgettext@plt>
   19b14:	ldr	r3, [r5, #32]
   19b18:	str	r3, [sp, #28]
   19b1c:	ldr	r3, [r5, #28]
   19b20:	str	r3, [sp, #24]
   19b24:	ldr	r3, [r5, #24]
   19b28:	str	r3, [sp, #20]
   19b2c:	ldr	r3, [r5, #20]
   19b30:	str	r3, [sp, #16]
   19b34:	ldr	r3, [r5, #16]
   19b38:	str	r3, [sp, #12]
   19b3c:	ldr	r3, [r5, #12]
   19b40:	str	r3, [sp, #8]
   19b44:	ldr	r3, [r5, #8]
   19b48:	str	r3, [sp, #4]
   19b4c:	ldr	r3, [r5, #4]
   19b50:	str	r3, [sp]
   19b54:	ldr	r3, [r5]
   19b58:	mov	r2, r0
   19b5c:	mov	r1, #1
   19b60:	mov	r0, r4
   19b64:	bl	11404 <__fprintf_chk@plt>
   19b68:	b	1986c <__assert_fail@plt+0x8390>
   19b6c:	strd	r4, [sp, #-12]!
   19b70:	str	lr, [sp, #8]
   19b74:	sub	sp, sp, #12
   19b78:	ldr	r5, [sp, #24]
   19b7c:	ldr	ip, [r5]
   19b80:	cmp	ip, #0
   19b84:	beq	19bbc <__assert_fail@plt+0x86e0>
   19b88:	mov	lr, r5
   19b8c:	mov	ip, #0
   19b90:	add	ip, ip, #1
   19b94:	ldr	r4, [lr, #4]!
   19b98:	cmp	r4, #0
   19b9c:	bne	19b90 <__assert_fail@plt+0x86b4>
   19ba0:	str	ip, [sp, #4]
   19ba4:	str	r5, [sp]
   19ba8:	bl	1973c <__assert_fail@plt+0x8260>
   19bac:	add	sp, sp, #12
   19bb0:	ldrd	r4, [sp]
   19bb4:	add	sp, sp, #8
   19bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bbc:	mov	ip, #0
   19bc0:	b	19ba0 <__assert_fail@plt+0x86c4>
   19bc4:	strd	r4, [sp, #-12]!
   19bc8:	str	lr, [sp, #8]
   19bcc:	sub	sp, sp, #52	; 0x34
   19bd0:	ldr	r5, [sp, #64]	; 0x40
   19bd4:	add	r4, sp, #8
   19bd8:	mov	ip, #0
   19bdc:	ldr	lr, [r5], #4
   19be0:	str	lr, [r4], #4
   19be4:	cmp	lr, #0
   19be8:	beq	19bf8 <__assert_fail@plt+0x871c>
   19bec:	add	ip, ip, #1
   19bf0:	cmp	ip, #10
   19bf4:	bne	19bdc <__assert_fail@plt+0x8700>
   19bf8:	str	ip, [sp, #4]
   19bfc:	add	ip, sp, #8
   19c00:	str	ip, [sp]
   19c04:	bl	1973c <__assert_fail@plt+0x8260>
   19c08:	add	sp, sp, #52	; 0x34
   19c0c:	ldrd	r4, [sp]
   19c10:	add	sp, sp, #8
   19c14:	pop	{pc}		; (ldr pc, [sp], #4)
   19c18:	push	{r3}		; (str r3, [sp, #-4]!)
   19c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   19c20:	sub	sp, sp, #16
   19c24:	add	r3, sp, #24
   19c28:	str	r3, [sp, #12]
   19c2c:	str	r3, [sp]
   19c30:	ldr	r3, [sp, #20]
   19c34:	bl	19bc4 <__assert_fail@plt+0x86e8>
   19c38:	add	sp, sp, #16
   19c3c:	pop	{lr}		; (ldr lr, [sp], #4)
   19c40:	add	sp, sp, #4
   19c44:	bx	lr
   19c48:	str	r4, [sp, #-8]!
   19c4c:	str	lr, [sp, #4]
   19c50:	movw	r3, #57820	; 0xe1dc
   19c54:	movt	r3, #2
   19c58:	ldr	r1, [r3]
   19c5c:	mov	r0, #10
   19c60:	bl	11224 <fputc_unlocked@plt>
   19c64:	mov	r2, #5
   19c68:	movw	r1, #55244	; 0xd7cc
   19c6c:	movt	r1, #1
   19c70:	mov	r0, #0
   19c74:	bl	11230 <dcgettext@plt>
   19c78:	movw	r2, #55264	; 0xd7e0
   19c7c:	movt	r2, #1
   19c80:	mov	r1, r0
   19c84:	mov	r0, #1
   19c88:	bl	113e0 <__printf_chk@plt>
   19c8c:	mov	r2, #5
   19c90:	movw	r1, #55288	; 0xd7f8
   19c94:	movt	r1, #1
   19c98:	mov	r0, #0
   19c9c:	bl	11230 <dcgettext@plt>
   19ca0:	movw	r3, #52064	; 0xcb60
   19ca4:	movt	r3, #1
   19ca8:	movw	r2, #52104	; 0xcb88
   19cac:	movt	r2, #1
   19cb0:	mov	r1, r0
   19cb4:	mov	r0, #1
   19cb8:	bl	113e0 <__printf_chk@plt>
   19cbc:	mov	r2, #5
   19cc0:	movw	r1, #55308	; 0xd80c
   19cc4:	movt	r1, #1
   19cc8:	mov	r0, #0
   19ccc:	bl	11230 <dcgettext@plt>
   19cd0:	movw	r2, #55348	; 0xd834
   19cd4:	movt	r2, #1
   19cd8:	mov	r1, r0
   19cdc:	mov	r0, #1
   19ce0:	bl	113e0 <__printf_chk@plt>
   19ce4:	ldr	r4, [sp]
   19ce8:	add	sp, sp, #4
   19cec:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf0:	str	r4, [sp, #-8]!
   19cf4:	str	lr, [sp, #4]
   19cf8:	bl	1aa54 <__assert_fail@plt+0x9578>
   19cfc:	cmp	r0, #0
   19d00:	beq	19d10 <__assert_fail@plt+0x8834>
   19d04:	ldr	r4, [sp]
   19d08:	add	sp, sp, #4
   19d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d10:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19d14:	str	r4, [sp, #-8]!
   19d18:	str	lr, [sp, #4]
   19d1c:	bl	1aa54 <__assert_fail@plt+0x9578>
   19d20:	cmp	r0, #0
   19d24:	beq	19d34 <__assert_fail@plt+0x8858>
   19d28:	ldr	r4, [sp]
   19d2c:	add	sp, sp, #4
   19d30:	pop	{pc}		; (ldr pc, [sp], #4)
   19d34:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19d38:	str	r4, [sp, #-8]!
   19d3c:	str	lr, [sp, #4]
   19d40:	bl	19cf0 <__assert_fail@plt+0x8814>
   19d44:	ldr	r4, [sp]
   19d48:	add	sp, sp, #4
   19d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d50:	strd	r4, [sp, #-16]!
   19d54:	str	r6, [sp, #8]
   19d58:	str	lr, [sp, #12]
   19d5c:	mov	r5, r0
   19d60:	mov	r4, r1
   19d64:	bl	1aa90 <__assert_fail@plt+0x95b4>
   19d68:	cmp	r0, #0
   19d6c:	beq	19d80 <__assert_fail@plt+0x88a4>
   19d70:	ldrd	r4, [sp]
   19d74:	ldr	r6, [sp, #8]
   19d78:	add	sp, sp, #12
   19d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d80:	adds	r4, r4, #0
   19d84:	movne	r4, #1
   19d88:	cmp	r5, #0
   19d8c:	moveq	r4, #1
   19d90:	cmp	r4, #0
   19d94:	beq	19d70 <__assert_fail@plt+0x8894>
   19d98:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19d9c:	str	r4, [sp, #-8]!
   19da0:	str	lr, [sp, #4]
   19da4:	cmp	r1, #0
   19da8:	orreq	r1, r1, #1
   19dac:	bl	1aa90 <__assert_fail@plt+0x95b4>
   19db0:	cmp	r0, #0
   19db4:	beq	19dc4 <__assert_fail@plt+0x88e8>
   19db8:	ldr	r4, [sp]
   19dbc:	add	sp, sp, #4
   19dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   19dc4:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19dc8:	strd	r4, [sp, #-16]!
   19dcc:	str	r6, [sp, #8]
   19dd0:	str	lr, [sp, #12]
   19dd4:	mov	r4, r0
   19dd8:	mov	r6, r1
   19ddc:	mov	r5, r2
   19de0:	bl	1b060 <__assert_fail@plt+0x9b84>
   19de4:	cmp	r0, #0
   19de8:	beq	19dfc <__assert_fail@plt+0x8920>
   19dec:	ldrd	r4, [sp]
   19df0:	ldr	r6, [sp, #8]
   19df4:	add	sp, sp, #12
   19df8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dfc:	cmp	r4, #0
   19e00:	beq	19e10 <__assert_fail@plt+0x8934>
   19e04:	cmp	r6, #0
   19e08:	cmpne	r5, #0
   19e0c:	beq	19dec <__assert_fail@plt+0x8910>
   19e10:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19e14:	str	r4, [sp, #-8]!
   19e18:	str	lr, [sp, #4]
   19e1c:	bl	19dc8 <__assert_fail@plt+0x88ec>
   19e20:	ldr	r4, [sp]
   19e24:	add	sp, sp, #4
   19e28:	pop	{pc}		; (ldr pc, [sp], #4)
   19e2c:	str	r4, [sp, #-8]!
   19e30:	str	lr, [sp, #4]
   19e34:	mov	ip, r1
   19e38:	mov	r3, r2
   19e3c:	cmp	r2, #0
   19e40:	cmpne	r1, #0
   19e44:	moveq	r3, #1
   19e48:	moveq	ip, r3
   19e4c:	mov	r2, r3
   19e50:	mov	r1, ip
   19e54:	bl	1b060 <__assert_fail@plt+0x9b84>
   19e58:	cmp	r0, #0
   19e5c:	beq	19e6c <__assert_fail@plt+0x8990>
   19e60:	ldr	r4, [sp]
   19e64:	add	sp, sp, #4
   19e68:	pop	{pc}		; (ldr pc, [sp], #4)
   19e6c:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19e70:	str	r4, [sp, #-8]!
   19e74:	str	lr, [sp, #4]
   19e78:	mov	r2, r1
   19e7c:	mov	r1, r0
   19e80:	mov	r0, #0
   19e84:	bl	19dc8 <__assert_fail@plt+0x88ec>
   19e88:	ldr	r4, [sp]
   19e8c:	add	sp, sp, #4
   19e90:	pop	{pc}		; (ldr pc, [sp], #4)
   19e94:	str	r4, [sp, #-8]!
   19e98:	str	lr, [sp, #4]
   19e9c:	mov	r2, r1
   19ea0:	mov	r1, r0
   19ea4:	mov	r0, #0
   19ea8:	bl	19e2c <__assert_fail@plt+0x8950>
   19eac:	ldr	r4, [sp]
   19eb0:	add	sp, sp, #4
   19eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   19eb8:	strd	r4, [sp, #-16]!
   19ebc:	str	r6, [sp, #8]
   19ec0:	str	lr, [sp, #12]
   19ec4:	mov	r5, r1
   19ec8:	ldr	r4, [r1]
   19ecc:	cmp	r0, #0
   19ed0:	beq	19f00 <__assert_fail@plt+0x8a24>
   19ed4:	lsr	r3, r4, #1
   19ed8:	add	r3, r3, #1
   19edc:	adds	r4, r4, r3
   19ee0:	bcs	19f1c <__assert_fail@plt+0x8a40>
   19ee4:	mov	r1, r4
   19ee8:	bl	19dc8 <__assert_fail@plt+0x88ec>
   19eec:	str	r4, [r5]
   19ef0:	ldrd	r4, [sp]
   19ef4:	ldr	r6, [sp, #8]
   19ef8:	add	sp, sp, #12
   19efc:	pop	{pc}		; (ldr pc, [sp], #4)
   19f00:	cmp	r4, #0
   19f04:	bne	19ee4 <__assert_fail@plt+0x8a08>
   19f08:	mov	r4, #64	; 0x40
   19f0c:	udiv	r4, r4, r2
   19f10:	cmp	r2, #64	; 0x40
   19f14:	addhi	r4, r4, #1
   19f18:	b	19ee4 <__assert_fail@plt+0x8a08>
   19f1c:	bl	1a184 <__assert_fail@plt+0x8ca8>
   19f20:	str	r4, [sp, #-8]!
   19f24:	str	lr, [sp, #4]
   19f28:	mov	r2, #1
   19f2c:	bl	19eb8 <__assert_fail@plt+0x89dc>
   19f30:	ldr	r4, [sp]
   19f34:	add	sp, sp, #4
   19f38:	pop	{pc}		; (ldr pc, [sp], #4)
   19f3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19f40:	strd	r6, [sp, #8]
   19f44:	str	r8, [sp, #16]
   19f48:	str	lr, [sp, #20]
   19f4c:	mov	r5, r1
   19f50:	ldr	lr, [sp, #24]
   19f54:	ldr	ip, [r1]
   19f58:	asr	r4, ip, #1
   19f5c:	adds	r4, ip, r4
   19f60:	movvs	r1, #1
   19f64:	movvc	r1, #0
   19f68:	cmp	r1, #0
   19f6c:	mvnne	r4, #-2147483648	; 0x80000000
   19f70:	mvn	r8, r3
   19f74:	lsr	r8, r8, #31
   19f78:	cmp	r3, r4
   19f7c:	movge	r1, #0
   19f80:	andlt	r1, r8, #1
   19f84:	cmp	r1, #0
   19f88:	movne	r4, r3
   19f8c:	smull	r6, r7, r4, lr
   19f90:	asr	r1, r6, #31
   19f94:	cmp	r1, r7
   19f98:	bne	19fb0 <__assert_fail@plt+0x8ad4>
   19f9c:	mov	r1, r6
   19fa0:	cmp	r6, #63	; 0x3f
   19fa4:	movle	r1, #64	; 0x40
   19fa8:	ble	19fb4 <__assert_fail@plt+0x8ad8>
   19fac:	b	19fc0 <__assert_fail@plt+0x8ae4>
   19fb0:	mvn	r1, #-2147483648	; 0x80000000
   19fb4:	sdiv	r4, r1, lr
   19fb8:	mls	r6, lr, r4, r1
   19fbc:	sub	r1, r1, r6
   19fc0:	cmp	r0, #0
   19fc4:	moveq	r6, #0
   19fc8:	streq	r6, [r5]
   19fcc:	sub	r6, r4, ip
   19fd0:	cmp	r6, r2
   19fd4:	bge	1a00c <__assert_fail@plt+0x8b30>
   19fd8:	adds	r2, ip, r2
   19fdc:	mov	r4, r2
   19fe0:	bvs	1a028 <__assert_fail@plt+0x8b4c>
   19fe4:	cmp	r2, r3
   19fe8:	movle	r3, #0
   19fec:	andgt	r3, r8, #1
   19ff0:	cmp	r3, #0
   19ff4:	bne	1a028 <__assert_fail@plt+0x8b4c>
   19ff8:	smull	r2, r3, r2, lr
   19ffc:	asr	ip, r2, #31
   1a000:	mov	r1, r2
   1a004:	cmp	ip, r3
   1a008:	bne	1a028 <__assert_fail@plt+0x8b4c>
   1a00c:	bl	19d50 <__assert_fail@plt+0x8874>
   1a010:	str	r4, [r5]
   1a014:	ldrd	r4, [sp]
   1a018:	ldrd	r6, [sp, #8]
   1a01c:	ldr	r8, [sp, #16]
   1a020:	add	sp, sp, #20
   1a024:	pop	{pc}		; (ldr pc, [sp], #4)
   1a028:	bl	1a184 <__assert_fail@plt+0x8ca8>
   1a02c:	str	r4, [sp, #-8]!
   1a030:	str	lr, [sp, #4]
   1a034:	bl	1a9e0 <__assert_fail@plt+0x9504>
   1a038:	cmp	r0, #0
   1a03c:	beq	1a04c <__assert_fail@plt+0x8b70>
   1a040:	ldr	r4, [sp]
   1a044:	add	sp, sp, #4
   1a048:	pop	{pc}		; (ldr pc, [sp], #4)
   1a04c:	bl	1a184 <__assert_fail@plt+0x8ca8>
   1a050:	str	r4, [sp, #-8]!
   1a054:	str	lr, [sp, #4]
   1a058:	mov	r1, #1
   1a05c:	bl	1a02c <__assert_fail@plt+0x8b50>
   1a060:	ldr	r4, [sp]
   1a064:	add	sp, sp, #4
   1a068:	pop	{pc}		; (ldr pc, [sp], #4)
   1a06c:	str	r4, [sp, #-8]!
   1a070:	str	lr, [sp, #4]
   1a074:	bl	1a9e0 <__assert_fail@plt+0x9504>
   1a078:	cmp	r0, #0
   1a07c:	beq	1a08c <__assert_fail@plt+0x8bb0>
   1a080:	ldr	r4, [sp]
   1a084:	add	sp, sp, #4
   1a088:	pop	{pc}		; (ldr pc, [sp], #4)
   1a08c:	bl	1a184 <__assert_fail@plt+0x8ca8>
   1a090:	str	r4, [sp, #-8]!
   1a094:	str	lr, [sp, #4]
   1a098:	mov	r1, #1
   1a09c:	bl	1a06c <__assert_fail@plt+0x8b90>
   1a0a0:	ldr	r4, [sp]
   1a0a4:	add	sp, sp, #4
   1a0a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0ac:	strd	r4, [sp, #-16]!
   1a0b0:	str	r6, [sp, #8]
   1a0b4:	str	lr, [sp, #12]
   1a0b8:	mov	r5, r0
   1a0bc:	mov	r4, r1
   1a0c0:	mov	r0, r1
   1a0c4:	bl	19cf0 <__assert_fail@plt+0x8814>
   1a0c8:	mov	r2, r4
   1a0cc:	mov	r1, r5
   1a0d0:	bl	111e8 <memcpy@plt>
   1a0d4:	ldrd	r4, [sp]
   1a0d8:	ldr	r6, [sp, #8]
   1a0dc:	add	sp, sp, #12
   1a0e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0e4:	strd	r4, [sp, #-16]!
   1a0e8:	str	r6, [sp, #8]
   1a0ec:	str	lr, [sp, #12]
   1a0f0:	mov	r5, r0
   1a0f4:	mov	r4, r1
   1a0f8:	mov	r0, r1
   1a0fc:	bl	19d14 <__assert_fail@plt+0x8838>
   1a100:	mov	r2, r4
   1a104:	mov	r1, r5
   1a108:	bl	111e8 <memcpy@plt>
   1a10c:	ldrd	r4, [sp]
   1a110:	ldr	r6, [sp, #8]
   1a114:	add	sp, sp, #12
   1a118:	pop	{pc}		; (ldr pc, [sp], #4)
   1a11c:	strd	r4, [sp, #-16]!
   1a120:	str	r6, [sp, #8]
   1a124:	str	lr, [sp, #12]
   1a128:	mov	r5, r0
   1a12c:	mov	r4, r1
   1a130:	add	r0, r1, #1
   1a134:	bl	19d14 <__assert_fail@plt+0x8838>
   1a138:	mov	r2, #0
   1a13c:	strb	r2, [r0, r4]
   1a140:	mov	r2, r4
   1a144:	mov	r1, r5
   1a148:	bl	111e8 <memcpy@plt>
   1a14c:	ldrd	r4, [sp]
   1a150:	ldr	r6, [sp, #8]
   1a154:	add	sp, sp, #12
   1a158:	pop	{pc}		; (ldr pc, [sp], #4)
   1a15c:	str	r4, [sp, #-8]!
   1a160:	str	lr, [sp, #4]
   1a164:	mov	r4, r0
   1a168:	bl	11380 <strlen@plt>
   1a16c:	add	r1, r0, #1
   1a170:	mov	r0, r4
   1a174:	bl	1a0ac <__assert_fail@plt+0x8bd0>
   1a178:	ldr	r4, [sp]
   1a17c:	add	sp, sp, #4
   1a180:	pop	{pc}		; (ldr pc, [sp], #4)
   1a184:	str	r4, [sp, #-8]!
   1a188:	str	lr, [sp, #4]
   1a18c:	movw	r3, #57724	; 0xe17c
   1a190:	movt	r3, #2
   1a194:	ldr	r4, [r3]
   1a198:	mov	r2, #5
   1a19c:	movw	r1, #55428	; 0xd884
   1a1a0:	movt	r1, #1
   1a1a4:	mov	r0, #0
   1a1a8:	bl	11230 <dcgettext@plt>
   1a1ac:	mov	r3, r0
   1a1b0:	movw	r2, #52644	; 0xcda4
   1a1b4:	movt	r2, #1
   1a1b8:	mov	r1, #0
   1a1bc:	mov	r0, r4
   1a1c0:	bl	112d8 <error@plt>
   1a1c4:	bl	114ac <abort@plt>
   1a1c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1cc:	strd	r6, [sp, #8]
   1a1d0:	strd	r8, [sp, #16]
   1a1d4:	strd	sl, [sp, #24]
   1a1d8:	str	lr, [sp, #32]
   1a1dc:	sub	sp, sp, #12
   1a1e0:	str	r0, [sp, #4]
   1a1e4:	cmp	r2, #0
   1a1e8:	beq	1a2e4 <__assert_fail@plt+0x8e08>
   1a1ec:	sub	ip, r2, #1
   1a1f0:	ldrd	r2, [r0]
   1a1f4:	mov	r0, #0
   1a1f8:	mov	r8, r1
   1a1fc:	asr	r9, r1, #31
   1a200:	str	r1, [sp]
   1a204:	b	1a254 <__assert_fail@plt+0x8d78>
   1a208:	orrs	r4, r2, r3
   1a20c:	movne	lr, #1
   1a210:	b	1a264 <__assert_fail@plt+0x8d88>
   1a214:	mov	sl, r3
   1a218:	ldr	fp, [sp]
   1a21c:	umull	r6, r7, r1, r2
   1a220:	mov	r4, r7
   1a224:	mov	r5, #0
   1a228:	umlal	r4, r5, sl, fp
   1a22c:	cmp	r5, #0
   1a230:	bne	1a298 <__assert_fail@plt+0x8dbc>
   1a234:	cmp	lr, #0
   1a238:	bne	1a2b0 <__assert_fail@plt+0x8dd4>
   1a23c:	mov	r2, r6
   1a240:	mov	r3, r4
   1a244:	orr	r0, r0, lr
   1a248:	sub	ip, ip, #1
   1a24c:	cmn	ip, #1
   1a250:	beq	1a2c0 <__assert_fail@plt+0x8de4>
   1a254:	mov	lr, #0
   1a258:	cmp	r8, #0
   1a25c:	sbcs	r4, r9, #0
   1a260:	blt	1a208 <__assert_fail@plt+0x8d2c>
   1a264:	cmp	r9, #0
   1a268:	bne	1a284 <__assert_fail@plt+0x8da8>
   1a26c:	cmp	r3, #0
   1a270:	bne	1a214 <__assert_fail@plt+0x8d38>
   1a274:	umull	r2, r3, r1, r2
   1a278:	mov	r6, r2
   1a27c:	mov	r4, r3
   1a280:	b	1a234 <__assert_fail@plt+0x8d58>
   1a284:	cmp	r3, #0
   1a288:	bne	1a298 <__assert_fail@plt+0x8dbc>
   1a28c:	mov	sl, r9
   1a290:	mov	fp, r2
   1a294:	b	1a21c <__assert_fail@plt+0x8d40>
   1a298:	mul	r4, r1, r3
   1a29c:	mla	r4, r2, r9, r4
   1a2a0:	umull	r6, r7, r1, r2
   1a2a4:	add	r4, r4, r7
   1a2a8:	mov	lr, #1
   1a2ac:	b	1a234 <__assert_fail@plt+0x8d58>
   1a2b0:	mvn	r2, #0
   1a2b4:	mvn	r3, #0
   1a2b8:	mov	lr, #1
   1a2bc:	b	1a244 <__assert_fail@plt+0x8d68>
   1a2c0:	ldr	r1, [sp, #4]
   1a2c4:	strd	r2, [r1]
   1a2c8:	add	sp, sp, #12
   1a2cc:	ldrd	r4, [sp]
   1a2d0:	ldrd	r6, [sp, #8]
   1a2d4:	ldrd	r8, [sp, #16]
   1a2d8:	ldrd	sl, [sp, #24]
   1a2dc:	add	sp, sp, #32
   1a2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e4:	mov	r0, #0
   1a2e8:	b	1a2c8 <__assert_fail@plt+0x8dec>
   1a2ec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a2f0:	strd	r6, [sp, #8]
   1a2f4:	strd	r8, [sp, #16]
   1a2f8:	str	lr, [sp, #24]
   1a2fc:	sub	sp, sp, #20
   1a300:	cmp	r2, #36	; 0x24
   1a304:	bhi	1a358 <__assert_fail@plt+0x8e7c>
   1a308:	mov	r5, r0
   1a30c:	mov	r6, r1
   1a310:	mov	r7, r2
   1a314:	mov	r9, r3
   1a318:	cmp	r1, #0
   1a31c:	addeq	r6, sp, #12
   1a320:	bl	113a4 <__errno_location@plt>
   1a324:	mov	r8, r0
   1a328:	mov	r3, #0
   1a32c:	str	r3, [r0]
   1a330:	ldrb	r4, [r5]
   1a334:	bl	11368 <__ctype_b_loc@plt>
   1a338:	ldr	r1, [r0]
   1a33c:	mov	r2, r5
   1a340:	lsl	r3, r4, #1
   1a344:	ldrh	r3, [r1, r3]
   1a348:	tst	r3, #8192	; 0x2000
   1a34c:	beq	1a378 <__assert_fail@plt+0x8e9c>
   1a350:	ldrb	r4, [r2, #1]!
   1a354:	b	1a340 <__assert_fail@plt+0x8e64>
   1a358:	movw	r3, #55448	; 0xd898
   1a35c:	movt	r3, #1
   1a360:	mov	r2, #85	; 0x55
   1a364:	movw	r1, #55460	; 0xd8a4
   1a368:	movt	r1, #1
   1a36c:	movw	r0, #55476	; 0xd8b4
   1a370:	movt	r0, #1
   1a374:	bl	114dc <__assert_fail@plt>
   1a378:	cmp	r4, #45	; 0x2d
   1a37c:	moveq	r4, #4
   1a380:	beq	1a514 <__assert_fail@plt+0x9038>
   1a384:	mov	r3, #0
   1a388:	mov	r2, r7
   1a38c:	mov	r1, r6
   1a390:	mov	r0, r5
   1a394:	bl	111f4 <__strtoull_internal@plt>
   1a398:	strd	r0, [sp]
   1a39c:	ldr	r7, [r6]
   1a3a0:	cmp	r7, r5
   1a3a4:	beq	1a3c8 <__assert_fail@plt+0x8eec>
   1a3a8:	ldr	r3, [r8]
   1a3ac:	cmp	r3, #0
   1a3b0:	beq	1a4ec <__assert_fail@plt+0x9010>
   1a3b4:	cmp	r3, #34	; 0x22
   1a3b8:	moveq	r4, #1
   1a3bc:	beq	1a4f0 <__assert_fail@plt+0x9014>
   1a3c0:	mov	r4, #4
   1a3c4:	b	1a514 <__assert_fail@plt+0x9038>
   1a3c8:	ldr	r3, [sp, #48]	; 0x30
   1a3cc:	cmp	r3, #0
   1a3d0:	beq	1a82c <__assert_fail@plt+0x9350>
   1a3d4:	ldrb	r1, [r5]
   1a3d8:	cmp	r1, #0
   1a3dc:	moveq	r4, #4
   1a3e0:	beq	1a514 <__assert_fail@plt+0x9038>
   1a3e4:	mov	r0, r3
   1a3e8:	bl	1138c <strchr@plt>
   1a3ec:	cmp	r0, #0
   1a3f0:	beq	1a834 <__assert_fail@plt+0x9358>
   1a3f4:	mov	r2, #1
   1a3f8:	mov	r3, #0
   1a3fc:	strd	r2, [sp]
   1a400:	ldrb	r5, [r7]
   1a404:	mov	r4, #0
   1a408:	mov	r1, r5
   1a40c:	ldr	r0, [sp, #48]	; 0x30
   1a410:	bl	1138c <strchr@plt>
   1a414:	cmp	r0, #0
   1a418:	beq	1a530 <__assert_fail@plt+0x9054>
   1a41c:	sub	r3, r5, #69	; 0x45
   1a420:	cmp	r3, #47	; 0x2f
   1a424:	ldrls	pc, [pc, r3, lsl #2]
   1a428:	b	1a67c <__assert_fail@plt+0x91a0>
   1a42c:	andeq	sl, r1, r0, asr #10
   1a430:	andeq	sl, r1, ip, ror r6
   1a434:	andeq	sl, r1, r0, asr #10
   1a438:	andeq	sl, r1, ip, ror r6
   1a43c:	andeq	sl, r1, ip, ror r6
   1a440:	andeq	sl, r1, ip, ror r6
   1a444:	andeq	sl, r1, r0, asr #10
   1a448:	andeq	sl, r1, ip, ror r6
   1a44c:	andeq	sl, r1, r0, asr #10
   1a450:	andeq	sl, r1, ip, ror r6
   1a454:	andeq	sl, r1, ip, ror r6
   1a458:	andeq	sl, r1, r0, asr #10
   1a45c:	andeq	sl, r1, ip, ror r6
   1a460:	andeq	sl, r1, ip, ror r6
   1a464:	andeq	sl, r1, ip, ror r6
   1a468:	andeq	sl, r1, r0, asr #10
   1a46c:	andeq	sl, r1, ip, ror r6
   1a470:	andeq	sl, r1, ip, ror r6
   1a474:	andeq	sl, r1, ip, ror r6
   1a478:	andeq	sl, r1, ip, ror r6
   1a47c:	andeq	sl, r1, r0, asr #10
   1a480:	andeq	sl, r1, r0, asr #10
   1a484:	andeq	sl, r1, ip, ror r6
   1a488:	andeq	sl, r1, ip, ror r6
   1a48c:	andeq	sl, r1, ip, ror r6
   1a490:	andeq	sl, r1, ip, ror r6
   1a494:	andeq	sl, r1, ip, ror r6
   1a498:	andeq	sl, r1, ip, ror r6
   1a49c:	andeq	sl, r1, ip, ror r6
   1a4a0:	andeq	sl, r1, ip, ror r6
   1a4a4:	andeq	sl, r1, ip, ror r6
   1a4a8:	andeq	sl, r1, ip, ror r6
   1a4ac:	andeq	sl, r1, ip, ror r6
   1a4b0:	andeq	sl, r1, ip, ror r6
   1a4b4:	andeq	sl, r1, r0, asr #10
   1a4b8:	andeq	sl, r1, ip, ror r6
   1a4bc:	andeq	sl, r1, ip, ror r6
   1a4c0:	andeq	sl, r1, ip, ror r6
   1a4c4:	andeq	sl, r1, r0, asr #10
   1a4c8:	andeq	sl, r1, ip, ror r6
   1a4cc:	andeq	sl, r1, r0, asr #10
   1a4d0:	andeq	sl, r1, ip, ror r6
   1a4d4:	andeq	sl, r1, ip, ror r6
   1a4d8:	andeq	sl, r1, ip, ror r6
   1a4dc:	andeq	sl, r1, ip, ror r6
   1a4e0:	andeq	sl, r1, ip, ror r6
   1a4e4:	andeq	sl, r1, ip, ror r6
   1a4e8:	andeq	sl, r1, r0, asr #10
   1a4ec:	mov	r4, #0
   1a4f0:	ldr	r3, [sp, #48]	; 0x30
   1a4f4:	cmp	r3, #0
   1a4f8:	strdeq	r0, [r9]
   1a4fc:	beq	1a514 <__assert_fail@plt+0x9038>
   1a500:	ldrb	r5, [r7]
   1a504:	cmp	r5, #0
   1a508:	bne	1a408 <__assert_fail@plt+0x8f2c>
   1a50c:	ldrd	r2, [sp]
   1a510:	strd	r2, [r9]
   1a514:	mov	r0, r4
   1a518:	add	sp, sp, #20
   1a51c:	ldrd	r4, [sp]
   1a520:	ldrd	r6, [sp, #8]
   1a524:	ldrd	r8, [sp, #16]
   1a528:	add	sp, sp, #24
   1a52c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a530:	ldrd	r2, [sp]
   1a534:	strd	r2, [r9]
   1a538:	orr	r4, r4, #2
   1a53c:	b	1a514 <__assert_fail@plt+0x9038>
   1a540:	mov	r1, #48	; 0x30
   1a544:	ldr	r0, [sp, #48]	; 0x30
   1a548:	bl	1138c <strchr@plt>
   1a54c:	cmp	r0, #0
   1a550:	beq	1a688 <__assert_fail@plt+0x91ac>
   1a554:	ldrb	r3, [r7, #1]
   1a558:	cmp	r3, #68	; 0x44
   1a55c:	beq	1a694 <__assert_fail@plt+0x91b8>
   1a560:	cmp	r3, #105	; 0x69
   1a564:	beq	1a664 <__assert_fail@plt+0x9188>
   1a568:	cmp	r3, #66	; 0x42
   1a56c:	moveq	r7, #2
   1a570:	movne	r7, #1
   1a574:	moveq	r1, #1000	; 0x3e8
   1a578:	movne	r1, #1024	; 0x400
   1a57c:	sub	r5, r5, #66	; 0x42
   1a580:	cmp	r5, #53	; 0x35
   1a584:	ldrls	pc, [pc, r5, lsl #2]
   1a588:	b	1a7f8 <__assert_fail@plt+0x931c>
   1a58c:	andeq	sl, r1, r8, ror #13
   1a590:	strdeq	sl, [r1], -r8
   1a594:	strdeq	sl, [r1], -r8
   1a598:	andeq	sl, r1, r0, lsr r7
   1a59c:	strdeq	sl, [r1], -r8
   1a5a0:	andeq	sl, r1, r0, asr #14
   1a5a4:	strdeq	sl, [r1], -r8
   1a5a8:	strdeq	sl, [r1], -r8
   1a5ac:	strdeq	sl, [r1], -r8
   1a5b0:	andeq	sl, r1, r0, asr r7
   1a5b4:	strdeq	sl, [r1], -r8
   1a5b8:	andeq	sl, r1, r0, ror #14
   1a5bc:	strdeq	sl, [r1], -r8
   1a5c0:	strdeq	sl, [r1], -r8
   1a5c4:	andeq	sl, r1, r0, ror r7
   1a5c8:	strdeq	sl, [r1], -r8
   1a5cc:	strdeq	sl, [r1], -r8
   1a5d0:	strdeq	sl, [r1], -r8
   1a5d4:	andeq	sl, r1, r0, lsl #15
   1a5d8:	strdeq	sl, [r1], -r8
   1a5dc:	strdeq	sl, [r1], -r8
   1a5e0:	strdeq	sl, [r1], -r8
   1a5e4:	strdeq	sl, [r1], -r8
   1a5e8:	ldrdeq	sl, [r1], -r8
   1a5ec:	andeq	sl, r1, r8, ror #15
   1a5f0:	strdeq	sl, [r1], -r8
   1a5f4:	strdeq	sl, [r1], -r8
   1a5f8:	strdeq	sl, [r1], -r8
   1a5fc:	strdeq	sl, [r1], -r8
   1a600:	strdeq	sl, [r1], -r8
   1a604:	strdeq	sl, [r1], -r8
   1a608:	strdeq	sl, [r1], -r8
   1a60c:	andeq	sl, r1, r0, lsr #13
   1a610:	andeq	sl, r1, r8, lsl #16
   1a614:	strdeq	sl, [r1], -r8
   1a618:	strdeq	sl, [r1], -r8
   1a61c:	strdeq	sl, [r1], -r8
   1a620:	andeq	sl, r1, r0, asr #14
   1a624:	strdeq	sl, [r1], -r8
   1a628:	strdeq	sl, [r1], -r8
   1a62c:	strdeq	sl, [r1], -r8
   1a630:	andeq	sl, r1, r0, asr r7
   1a634:	strdeq	sl, [r1], -r8
   1a638:	andeq	sl, r1, r0, ror #14
   1a63c:	strdeq	sl, [r1], -r8
   1a640:	strdeq	sl, [r1], -r8
   1a644:	strdeq	sl, [r1], -r8
   1a648:	strdeq	sl, [r1], -r8
   1a64c:	strdeq	sl, [r1], -r8
   1a650:	strdeq	sl, [r1], -r8
   1a654:	andeq	sl, r1, r0, lsl #15
   1a658:	strdeq	sl, [r1], -r8
   1a65c:	strdeq	sl, [r1], -r8
   1a660:	muleq	r1, r0, r7
   1a664:	ldrb	r3, [r7, #2]
   1a668:	cmp	r3, #66	; 0x42
   1a66c:	movne	r7, #1
   1a670:	moveq	r7, #3
   1a674:	mov	r1, #1024	; 0x400
   1a678:	b	1a57c <__assert_fail@plt+0x90a0>
   1a67c:	mov	r7, #1
   1a680:	mov	r1, #1024	; 0x400
   1a684:	b	1a57c <__assert_fail@plt+0x90a0>
   1a688:	mov	r7, #1
   1a68c:	mov	r1, #1024	; 0x400
   1a690:	b	1a57c <__assert_fail@plt+0x90a0>
   1a694:	mov	r7, #2
   1a698:	mov	r1, #1000	; 0x3e8
   1a69c:	b	1a57c <__assert_fail@plt+0x90a0>
   1a6a0:	ldr	r3, [sp]
   1a6a4:	ldr	ip, [sp, #4]
   1a6a8:	lsl	r2, ip, #9
   1a6ac:	orr	r2, r2, r3, lsr #23
   1a6b0:	lsl	r3, r3, #9
   1a6b4:	mov	r0, #0
   1a6b8:	mov	r1, r0
   1a6bc:	lsr	r0, ip, #23
   1a6c0:	orrs	r1, r0, r1
   1a6c4:	streq	r3, [sp]
   1a6c8:	streq	r2, [sp, #4]
   1a6cc:	moveq	r0, #0
   1a6d0:	beq	1a80c <__assert_fail@plt+0x9330>
   1a6d4:	mvn	r2, #0
   1a6d8:	mvn	r3, #0
   1a6dc:	strd	r2, [sp]
   1a6e0:	mov	r0, #1
   1a6e4:	b	1a80c <__assert_fail@plt+0x9330>
   1a6e8:	ldr	r3, [sp]
   1a6ec:	ldr	ip, [sp, #4]
   1a6f0:	lsl	r2, ip, #10
   1a6f4:	orr	r2, r2, r3, lsr #22
   1a6f8:	lsl	r3, r3, #10
   1a6fc:	mov	r0, #0
   1a700:	mov	r1, r0
   1a704:	lsr	r0, ip, #22
   1a708:	orrs	r1, r0, r1
   1a70c:	streq	r3, [sp]
   1a710:	streq	r2, [sp, #4]
   1a714:	moveq	r0, #0
   1a718:	beq	1a80c <__assert_fail@plt+0x9330>
   1a71c:	mvn	r2, #0
   1a720:	mvn	r3, #0
   1a724:	strd	r2, [sp]
   1a728:	mov	r0, #1
   1a72c:	b	1a80c <__assert_fail@plt+0x9330>
   1a730:	mov	r2, #6
   1a734:	mov	r0, sp
   1a738:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a73c:	b	1a80c <__assert_fail@plt+0x9330>
   1a740:	mov	r2, #3
   1a744:	mov	r0, sp
   1a748:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a74c:	b	1a80c <__assert_fail@plt+0x9330>
   1a750:	mov	r2, #1
   1a754:	mov	r0, sp
   1a758:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a75c:	b	1a80c <__assert_fail@plt+0x9330>
   1a760:	mov	r2, #2
   1a764:	mov	r0, sp
   1a768:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a76c:	b	1a80c <__assert_fail@plt+0x9330>
   1a770:	mov	r2, #5
   1a774:	mov	r0, sp
   1a778:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a77c:	b	1a80c <__assert_fail@plt+0x9330>
   1a780:	mov	r2, #4
   1a784:	mov	r0, sp
   1a788:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a78c:	b	1a80c <__assert_fail@plt+0x9330>
   1a790:	ldr	r3, [sp]
   1a794:	ldr	r2, [sp, #4]
   1a798:	adds	r3, r3, r3
   1a79c:	adc	r2, r2, r2
   1a7a0:	mov	r1, #0
   1a7a4:	mov	r0, r1
   1a7a8:	ldr	r1, [sp, #4]
   1a7ac:	lsr	r1, r1, #31
   1a7b0:	orrs	r1, r1, r0
   1a7b4:	streq	r3, [sp]
   1a7b8:	streq	r2, [sp, #4]
   1a7bc:	moveq	r0, #0
   1a7c0:	beq	1a80c <__assert_fail@plt+0x9330>
   1a7c4:	mvn	r2, #0
   1a7c8:	mvn	r3, #0
   1a7cc:	strd	r2, [sp]
   1a7d0:	mov	r0, #1
   1a7d4:	b	1a80c <__assert_fail@plt+0x9330>
   1a7d8:	mov	r2, #8
   1a7dc:	mov	r0, sp
   1a7e0:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a7e4:	b	1a80c <__assert_fail@plt+0x9330>
   1a7e8:	mov	r2, #7
   1a7ec:	mov	r0, sp
   1a7f0:	bl	1a1c8 <__assert_fail@plt+0x8cec>
   1a7f4:	b	1a80c <__assert_fail@plt+0x9330>
   1a7f8:	ldrd	r2, [sp]
   1a7fc:	strd	r2, [r9]
   1a800:	orr	r4, r4, #2
   1a804:	b	1a514 <__assert_fail@plt+0x9038>
   1a808:	mov	r0, #0
   1a80c:	orr	r4, r4, r0
   1a810:	ldr	r3, [r6]
   1a814:	add	r2, r3, r7
   1a818:	str	r2, [r6]
   1a81c:	ldrb	r3, [r3, r7]
   1a820:	cmp	r3, #0
   1a824:	orrne	r4, r4, #2
   1a828:	b	1a50c <__assert_fail@plt+0x9030>
   1a82c:	mov	r4, #4
   1a830:	b	1a514 <__assert_fail@plt+0x9038>
   1a834:	mov	r4, #4
   1a838:	b	1a514 <__assert_fail@plt+0x9038>
   1a83c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a840:	strd	r6, [sp, #8]
   1a844:	strd	r8, [sp, #16]
   1a848:	str	lr, [sp, #24]
   1a84c:	sub	sp, sp, #12
   1a850:	str	r1, [sp, #4]
   1a854:	subs	r6, r0, #0
   1a858:	beq	1a8c0 <__assert_fail@plt+0x93e4>
   1a85c:	mov	r7, r1
   1a860:	ldr	r3, [sp, #4]
   1a864:	add	r2, r3, #4
   1a868:	str	r2, [sp, #4]
   1a86c:	ldr	r0, [r3]
   1a870:	bl	11380 <strlen@plt>
   1a874:	mov	r5, r0
   1a878:	mov	r4, r6
   1a87c:	subs	r4, r4, #1
   1a880:	beq	1a8d4 <__assert_fail@plt+0x93f8>
   1a884:	ldr	r3, [sp, #4]
   1a888:	add	r2, r3, #4
   1a88c:	str	r2, [sp, #4]
   1a890:	ldr	r0, [r3]
   1a894:	bl	11380 <strlen@plt>
   1a898:	add	r0, r0, r5
   1a89c:	cmp	r0, r5
   1a8a0:	movcs	r5, r0
   1a8a4:	mvncc	r5, #0
   1a8a8:	b	1a87c <__assert_fail@plt+0x93a0>
   1a8ac:	bl	113a4 <__errno_location@plt>
   1a8b0:	mov	r3, #75	; 0x4b
   1a8b4:	str	r3, [r0]
   1a8b8:	mov	r9, #0
   1a8bc:	b	1a920 <__assert_fail@plt+0x9444>
   1a8c0:	mov	r0, #1
   1a8c4:	bl	19cf0 <__assert_fail@plt+0x8814>
   1a8c8:	mov	r4, r0
   1a8cc:	mov	r9, r0
   1a8d0:	b	1a918 <__assert_fail@plt+0x943c>
   1a8d4:	cmp	r5, #0
   1a8d8:	blt	1a8ac <__assert_fail@plt+0x93d0>
   1a8dc:	add	r0, r5, #1
   1a8e0:	bl	19cf0 <__assert_fail@plt+0x8814>
   1a8e4:	mov	r9, r0
   1a8e8:	mov	r4, r0
   1a8ec:	ldr	r8, [r7], #4
   1a8f0:	mov	r0, r8
   1a8f4:	bl	11380 <strlen@plt>
   1a8f8:	mov	r5, r0
   1a8fc:	mov	r2, r0
   1a900:	mov	r1, r8
   1a904:	mov	r0, r4
   1a908:	bl	111e8 <memcpy@plt>
   1a90c:	add	r4, r4, r5
   1a910:	subs	r6, r6, #1
   1a914:	bne	1a8ec <__assert_fail@plt+0x9410>
   1a918:	mov	r3, #0
   1a91c:	strb	r3, [r4]
   1a920:	mov	r0, r9
   1a924:	add	sp, sp, #12
   1a928:	ldrd	r4, [sp]
   1a92c:	ldrd	r6, [sp, #8]
   1a930:	ldrd	r8, [sp, #16]
   1a934:	add	sp, sp, #24
   1a938:	pop	{pc}		; (ldr pc, [sp], #4)
   1a93c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a940:	sub	sp, sp, #12
   1a944:	ldrb	r2, [r0]
   1a948:	cmp	r2, #0
   1a94c:	beq	1a9b8 <__assert_fail@plt+0x94dc>
   1a950:	cmp	r2, #37	; 0x25
   1a954:	bne	1a990 <__assert_fail@plt+0x94b4>
   1a958:	ldrb	r3, [r0, #1]
   1a95c:	cmp	r3, #115	; 0x73
   1a960:	bne	1a990 <__assert_fail@plt+0x94b4>
   1a964:	mov	ip, #0
   1a968:	add	r2, r0, #1
   1a96c:	add	ip, ip, #1
   1a970:	ldrb	lr, [r0, ip, lsl #1]
   1a974:	cmp	lr, #0
   1a978:	beq	1a9bc <__assert_fail@plt+0x94e0>
   1a97c:	cmp	lr, #37	; 0x25
   1a980:	bne	1a990 <__assert_fail@plt+0x94b4>
   1a984:	ldrb	lr, [r2, ip, lsl #1]
   1a988:	cmp	lr, #115	; 0x73
   1a98c:	beq	1a96c <__assert_fail@plt+0x9490>
   1a990:	mov	r3, r1
   1a994:	mov	r2, r0
   1a998:	mov	r1, #1
   1a99c:	add	r0, sp, #4
   1a9a0:	bl	113c8 <__vasprintf_chk@plt>
   1a9a4:	cmp	r0, #0
   1a9a8:	blt	1a9c8 <__assert_fail@plt+0x94ec>
   1a9ac:	ldr	r0, [sp, #4]
   1a9b0:	add	sp, sp, #12
   1a9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9b8:	mov	ip, #0
   1a9bc:	mov	r0, ip
   1a9c0:	bl	1a83c <__assert_fail@plt+0x9360>
   1a9c4:	b	1a9b0 <__assert_fail@plt+0x94d4>
   1a9c8:	bl	113a4 <__errno_location@plt>
   1a9cc:	ldr	r3, [r0]
   1a9d0:	cmp	r3, #12
   1a9d4:	movne	r0, #0
   1a9d8:	bne	1a9b0 <__assert_fail@plt+0x94d4>
   1a9dc:	bl	1a184 <__assert_fail@plt+0x8ca8>
   1a9e0:	strd	r4, [sp, #-16]!
   1a9e4:	str	r6, [sp, #8]
   1a9e8:	str	lr, [sp, #12]
   1a9ec:	cmp	r1, #0
   1a9f0:	cmpne	r0, #0
   1a9f4:	beq	1aa30 <__assert_fail@plt+0x9554>
   1a9f8:	mov	r2, r0
   1a9fc:	mov	r3, r1
   1aa00:	umull	r4, r5, r0, r1
   1aa04:	adds	r1, r5, #0
   1aa08:	movne	r1, #1
   1aa0c:	cmp	r4, #0
   1aa10:	movlt	r1, #1
   1aa14:	cmp	r1, #0
   1aa18:	beq	1aa38 <__assert_fail@plt+0x955c>
   1aa1c:	bl	113a4 <__errno_location@plt>
   1aa20:	mov	r3, #12
   1aa24:	str	r3, [r0]
   1aa28:	mov	r0, #0
   1aa2c:	b	1aa44 <__assert_fail@plt+0x9568>
   1aa30:	mov	r3, #1
   1aa34:	mov	r2, r3
   1aa38:	mov	r1, r3
   1aa3c:	mov	r0, r2
   1aa40:	bl	1114c <calloc@plt>
   1aa44:	ldrd	r4, [sp]
   1aa48:	ldr	r6, [sp, #8]
   1aa4c:	add	sp, sp, #12
   1aa50:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa54:	str	r4, [sp, #-8]!
   1aa58:	str	lr, [sp, #4]
   1aa5c:	cmp	r0, #0
   1aa60:	beq	1aa7c <__assert_fail@plt+0x95a0>
   1aa64:	bge	1aa80 <__assert_fail@plt+0x95a4>
   1aa68:	bl	113a4 <__errno_location@plt>
   1aa6c:	mov	r3, #12
   1aa70:	str	r3, [r0]
   1aa74:	mov	r0, #0
   1aa78:	b	1aa84 <__assert_fail@plt+0x95a8>
   1aa7c:	mov	r0, #1
   1aa80:	bl	112fc <malloc@plt>
   1aa84:	ldr	r4, [sp]
   1aa88:	add	sp, sp, #4
   1aa8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa90:	str	r4, [sp, #-8]!
   1aa94:	str	lr, [sp, #4]
   1aa98:	cmp	r0, #0
   1aa9c:	beq	1aac0 <__assert_fail@plt+0x95e4>
   1aaa0:	cmp	r1, #0
   1aaa4:	beq	1aacc <__assert_fail@plt+0x95f0>
   1aaa8:	cmp	r1, #0
   1aaac:	blt	1aad8 <__assert_fail@plt+0x95fc>
   1aab0:	bl	11248 <realloc@plt>
   1aab4:	ldr	r4, [sp]
   1aab8:	add	sp, sp, #4
   1aabc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aac0:	mov	r0, r1
   1aac4:	bl	1aa54 <__assert_fail@plt+0x9578>
   1aac8:	b	1aab4 <__assert_fail@plt+0x95d8>
   1aacc:	bl	1af4c <__assert_fail@plt+0x9a70>
   1aad0:	mov	r0, #0
   1aad4:	b	1aab4 <__assert_fail@plt+0x95d8>
   1aad8:	bl	113a4 <__errno_location@plt>
   1aadc:	mov	r3, #12
   1aae0:	str	r3, [r0]
   1aae4:	mov	r0, #0
   1aae8:	b	1aab4 <__assert_fail@plt+0x95d8>
   1aaec:	str	r4, [sp, #-8]!
   1aaf0:	str	lr, [sp, #4]
   1aaf4:	mov	r0, #1
   1aaf8:	bl	116bc <__assert_fail@plt+0x1e0>
   1aafc:	ldr	r4, [sp]
   1ab00:	add	sp, sp, #4
   1ab04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab0c:	strd	r6, [sp, #8]
   1ab10:	strd	r8, [sp, #16]
   1ab14:	strd	sl, [sp, #24]
   1ab18:	str	lr, [sp, #32]
   1ab1c:	sub	sp, sp, #12
   1ab20:	str	r0, [sp]
   1ab24:	mov	r5, r1
   1ab28:	mov	r6, r2
   1ab2c:	str	r2, [sp, #4]
   1ab30:	mov	r9, r3
   1ab34:	bl	11380 <strlen@plt>
   1ab38:	ldr	r4, [r5]
   1ab3c:	cmp	r4, #0
   1ab40:	beq	1abfc <__assert_fail@plt+0x9720>
   1ab44:	mov	r8, r0
   1ab48:	mov	fp, #0
   1ab4c:	mvn	sl, #0
   1ab50:	mov	r7, fp
   1ab54:	b	1ab74 <__assert_fail@plt+0x9698>
   1ab58:	mov	sl, r7
   1ab5c:	b	1abdc <__assert_fail@plt+0x9700>
   1ab60:	add	r7, r7, #1
   1ab64:	ldr	r4, [r5, #4]!
   1ab68:	add	r6, r6, r9
   1ab6c:	cmp	r4, #0
   1ab70:	beq	1abd4 <__assert_fail@plt+0x96f8>
   1ab74:	mov	r2, r8
   1ab78:	ldr	r1, [sp]
   1ab7c:	mov	r0, r4
   1ab80:	bl	11494 <strncmp@plt>
   1ab84:	cmp	r0, #0
   1ab88:	bne	1ab60 <__assert_fail@plt+0x9684>
   1ab8c:	mov	r0, r4
   1ab90:	bl	11380 <strlen@plt>
   1ab94:	cmp	r0, r8
   1ab98:	beq	1ab58 <__assert_fail@plt+0x967c>
   1ab9c:	cmn	sl, #1
   1aba0:	moveq	sl, r7
   1aba4:	beq	1ab60 <__assert_fail@plt+0x9684>
   1aba8:	ldr	r3, [sp, #4]
   1abac:	cmp	r3, #0
   1abb0:	moveq	fp, #1
   1abb4:	beq	1ab60 <__assert_fail@plt+0x9684>
   1abb8:	mov	r2, r9
   1abbc:	mov	r1, r6
   1abc0:	mla	r0, r9, sl, r3
   1abc4:	bl	11218 <memcmp@plt>
   1abc8:	cmp	r0, #0
   1abcc:	movne	fp, #1
   1abd0:	b	1ab60 <__assert_fail@plt+0x9684>
   1abd4:	cmp	fp, #0
   1abd8:	mvnne	sl, #1
   1abdc:	mov	r0, sl
   1abe0:	add	sp, sp, #12
   1abe4:	ldrd	r4, [sp]
   1abe8:	ldrd	r6, [sp, #8]
   1abec:	ldrd	r8, [sp, #16]
   1abf0:	ldrd	sl, [sp, #24]
   1abf4:	add	sp, sp, #32
   1abf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abfc:	mvn	sl, #0
   1ac00:	b	1abdc <__assert_fail@plt+0x9700>
   1ac04:	strd	r4, [sp, #-16]!
   1ac08:	str	r6, [sp, #8]
   1ac0c:	str	lr, [sp, #12]
   1ac10:	mov	r6, r0
   1ac14:	ldr	r0, [r1]
   1ac18:	cmp	r0, #0
   1ac1c:	beq	1ac64 <__assert_fail@plt+0x9788>
   1ac20:	mov	r4, r1
   1ac24:	mov	r5, #0
   1ac28:	mov	r1, r6
   1ac2c:	bl	1117c <strcmp@plt>
   1ac30:	cmp	r0, #0
   1ac34:	beq	1ac50 <__assert_fail@plt+0x9774>
   1ac38:	add	r5, r5, #1
   1ac3c:	ldr	r0, [r4, #4]!
   1ac40:	cmp	r0, #0
   1ac44:	bne	1ac28 <__assert_fail@plt+0x974c>
   1ac48:	mvn	r0, #0
   1ac4c:	b	1ac54 <__assert_fail@plt+0x9778>
   1ac50:	mov	r0, r5
   1ac54:	ldrd	r4, [sp]
   1ac58:	ldr	r6, [sp, #8]
   1ac5c:	add	sp, sp, #12
   1ac60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac64:	mvn	r0, #0
   1ac68:	b	1ac54 <__assert_fail@plt+0x9778>
   1ac6c:	strd	r4, [sp, #-16]!
   1ac70:	str	r6, [sp, #8]
   1ac74:	str	lr, [sp, #12]
   1ac78:	sub	sp, sp, #8
   1ac7c:	mov	r6, r0
   1ac80:	mov	r5, r1
   1ac84:	cmn	r2, #1
   1ac88:	mov	r2, #5
   1ac8c:	movweq	r1, #55516	; 0xd8dc
   1ac90:	movteq	r1, #1
   1ac94:	movwne	r1, #55544	; 0xd8f8
   1ac98:	movtne	r1, #1
   1ac9c:	mov	r0, #0
   1aca0:	bl	11230 <dcgettext@plt>
   1aca4:	mov	r4, r0
   1aca8:	mov	r2, r5
   1acac:	mov	r1, #8
   1acb0:	mov	r0, #0
   1acb4:	bl	192ac <__assert_fail@plt+0x7dd0>
   1acb8:	mov	r5, r0
   1acbc:	mov	r1, r6
   1acc0:	mov	r0, #1
   1acc4:	bl	1960c <__assert_fail@plt+0x8130>
   1acc8:	str	r0, [sp]
   1accc:	mov	r3, r5
   1acd0:	mov	r2, r4
   1acd4:	mov	r1, #0
   1acd8:	mov	r0, r1
   1acdc:	bl	112d8 <error@plt>
   1ace0:	add	sp, sp, #8
   1ace4:	ldrd	r4, [sp]
   1ace8:	ldr	r6, [sp, #8]
   1acec:	add	sp, sp, #12
   1acf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1acf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1acf8:	strd	r6, [sp, #8]
   1acfc:	strd	r8, [sp, #16]
   1ad00:	strd	sl, [sp, #24]
   1ad04:	str	lr, [sp, #32]
   1ad08:	sub	sp, sp, #12
   1ad0c:	mov	r7, r0
   1ad10:	mov	r4, r1
   1ad14:	mov	r8, r2
   1ad18:	mov	r2, #5
   1ad1c:	movw	r1, #55576	; 0xd918
   1ad20:	movt	r1, #1
   1ad24:	mov	r0, #0
   1ad28:	bl	11230 <dcgettext@plt>
   1ad2c:	movw	r3, #57816	; 0xe1d8
   1ad30:	movt	r3, #2
   1ad34:	ldr	r1, [r3]
   1ad38:	bl	11158 <fputs_unlocked@plt>
   1ad3c:	ldr	r5, [r7]
   1ad40:	cmp	r5, #0
   1ad44:	beq	1adf0 <__assert_fail@plt+0x9914>
   1ad48:	mov	r3, #0
   1ad4c:	str	r3, [sp]
   1ad50:	mov	r6, r3
   1ad54:	movw	sl, #57816	; 0xe1d8
   1ad58:	movt	sl, #2
   1ad5c:	movw	fp, #55600	; 0xd930
   1ad60:	movt	fp, #1
   1ad64:	movw	r3, #52572	; 0xcd5c
   1ad68:	movt	r3, #1
   1ad6c:	str	r3, [sp, #4]
   1ad70:	b	1adac <__assert_fail@plt+0x98d0>
   1ad74:	ldr	r9, [sl]
   1ad78:	mov	r0, r5
   1ad7c:	bl	19628 <__assert_fail@plt+0x814c>
   1ad80:	mov	r3, r0
   1ad84:	mov	r2, fp
   1ad88:	mov	r1, #1
   1ad8c:	mov	r0, r9
   1ad90:	bl	11404 <__fprintf_chk@plt>
   1ad94:	str	r4, [sp]
   1ad98:	add	r6, r6, #1
   1ad9c:	ldr	r5, [r7, #4]!
   1ada0:	add	r4, r4, r8
   1ada4:	cmp	r5, #0
   1ada8:	beq	1adf0 <__assert_fail@plt+0x9914>
   1adac:	cmp	r6, #0
   1adb0:	beq	1ad74 <__assert_fail@plt+0x9898>
   1adb4:	mov	r2, r8
   1adb8:	mov	r1, r4
   1adbc:	ldr	r0, [sp]
   1adc0:	bl	11218 <memcmp@plt>
   1adc4:	cmp	r0, #0
   1adc8:	bne	1ad74 <__assert_fail@plt+0x9898>
   1adcc:	ldr	r9, [sl]
   1add0:	mov	r0, r5
   1add4:	bl	19628 <__assert_fail@plt+0x814c>
   1add8:	mov	r3, r0
   1addc:	ldr	r2, [sp, #4]
   1ade0:	mov	r1, #1
   1ade4:	mov	r0, r9
   1ade8:	bl	11404 <__fprintf_chk@plt>
   1adec:	b	1ad98 <__assert_fail@plt+0x98bc>
   1adf0:	movw	r3, #57816	; 0xe1d8
   1adf4:	movt	r3, #2
   1adf8:	ldr	r0, [r3]
   1adfc:	ldr	r3, [r0, #20]
   1ae00:	ldr	r2, [r0, #24]
   1ae04:	cmp	r3, r2
   1ae08:	addcc	r2, r3, #1
   1ae0c:	strcc	r2, [r0, #20]
   1ae10:	movcc	r2, #10
   1ae14:	strbcc	r2, [r3]
   1ae18:	bcs	1ae38 <__assert_fail@plt+0x995c>
   1ae1c:	add	sp, sp, #12
   1ae20:	ldrd	r4, [sp]
   1ae24:	ldrd	r6, [sp, #8]
   1ae28:	ldrd	r8, [sp, #16]
   1ae2c:	ldrd	sl, [sp, #24]
   1ae30:	add	sp, sp, #32
   1ae34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae38:	mov	r1, #10
   1ae3c:	bl	11434 <__overflow@plt>
   1ae40:	b	1ae1c <__assert_fail@plt+0x9940>
   1ae44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ae48:	strd	r6, [sp, #8]
   1ae4c:	str	r8, [sp, #16]
   1ae50:	str	lr, [sp, #20]
   1ae54:	mov	r7, r0
   1ae58:	mov	r5, r1
   1ae5c:	mov	r4, r2
   1ae60:	mov	r6, r3
   1ae64:	ldrb	r3, [sp, #32]
   1ae68:	cmp	r3, #0
   1ae6c:	beq	1aea0 <__assert_fail@plt+0x99c4>
   1ae70:	ldr	r3, [sp, #24]
   1ae74:	mov	r2, r6
   1ae78:	mov	r1, r4
   1ae7c:	mov	r0, r5
   1ae80:	bl	1ab08 <__assert_fail@plt+0x962c>
   1ae84:	cmp	r0, #0
   1ae88:	blt	1aeb0 <__assert_fail@plt+0x99d4>
   1ae8c:	ldrd	r4, [sp]
   1ae90:	ldrd	r6, [sp, #8]
   1ae94:	ldr	r8, [sp, #16]
   1ae98:	add	sp, sp, #20
   1ae9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aea0:	mov	r1, r2
   1aea4:	mov	r0, r5
   1aea8:	bl	1ac04 <__assert_fail@plt+0x9728>
   1aeac:	b	1ae84 <__assert_fail@plt+0x99a8>
   1aeb0:	mov	r2, r0
   1aeb4:	mov	r1, r5
   1aeb8:	mov	r0, r7
   1aebc:	bl	1ac6c <__assert_fail@plt+0x9790>
   1aec0:	ldr	r2, [sp, #24]
   1aec4:	mov	r1, r6
   1aec8:	mov	r0, r4
   1aecc:	bl	1acf4 <__assert_fail@plt+0x9818>
   1aed0:	ldr	r3, [sp, #28]
   1aed4:	blx	r3
   1aed8:	mvn	r0, #0
   1aedc:	b	1ae8c <__assert_fail@plt+0x99b0>
   1aee0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aee4:	strd	r6, [sp, #8]
   1aee8:	str	r8, [sp, #16]
   1aeec:	str	lr, [sp, #20]
   1aef0:	ldr	r7, [r1]
   1aef4:	cmp	r7, #0
   1aef8:	beq	1af34 <__assert_fail@plt+0x9a58>
   1aefc:	mov	r6, r3
   1af00:	mov	r8, r0
   1af04:	mov	r4, r2
   1af08:	mov	r5, r1
   1af0c:	mov	r2, r6
   1af10:	mov	r1, r4
   1af14:	mov	r0, r8
   1af18:	bl	11218 <memcmp@plt>
   1af1c:	cmp	r0, #0
   1af20:	beq	1af34 <__assert_fail@plt+0x9a58>
   1af24:	ldr	r7, [r5, #4]!
   1af28:	add	r4, r4, r6
   1af2c:	cmp	r7, #0
   1af30:	bne	1af0c <__assert_fail@plt+0x9a30>
   1af34:	mov	r0, r7
   1af38:	ldrd	r4, [sp]
   1af3c:	ldrd	r6, [sp, #8]
   1af40:	ldr	r8, [sp, #16]
   1af44:	add	sp, sp, #20
   1af48:	pop	{pc}		; (ldr pc, [sp], #4)
   1af4c:	strd	r4, [sp, #-12]!
   1af50:	str	lr, [sp, #8]
   1af54:	sub	sp, sp, #12
   1af58:	mov	r5, r0
   1af5c:	bl	113a4 <__errno_location@plt>
   1af60:	mov	r4, r0
   1af64:	ldr	r3, [r0]
   1af68:	str	r3, [sp]
   1af6c:	str	r3, [sp, #4]
   1af70:	mov	r3, #0
   1af74:	str	r3, [r0]
   1af78:	mov	r0, r5
   1af7c:	bl	111c4 <free@plt>
   1af80:	ldr	r3, [r4]
   1af84:	clz	r3, r3
   1af88:	lsr	r3, r3, #5
   1af8c:	add	r2, sp, #8
   1af90:	add	r3, r2, r3, lsl #2
   1af94:	ldr	r3, [r3, #-8]
   1af98:	str	r3, [r4]
   1af9c:	add	sp, sp, #12
   1afa0:	ldrd	r4, [sp]
   1afa4:	add	sp, sp, #8
   1afa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1afac:	str	r4, [sp, #-8]!
   1afb0:	str	lr, [sp, #4]
   1afb4:	mov	r0, #14
   1afb8:	bl	11464 <nl_langinfo@plt>
   1afbc:	cmp	r0, #0
   1afc0:	beq	1afe4 <__assert_fail@plt+0x9b08>
   1afc4:	ldrb	r2, [r0]
   1afc8:	movw	r3, #55608	; 0xd938
   1afcc:	movt	r3, #1
   1afd0:	cmp	r2, #0
   1afd4:	moveq	r0, r3
   1afd8:	ldr	r4, [sp]
   1afdc:	add	sp, sp, #4
   1afe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1afe4:	movw	r0, #55608	; 0xd938
   1afe8:	movt	r0, #1
   1afec:	b	1afd8 <__assert_fail@plt+0x9afc>
   1aff0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1aff4:	strd	r6, [sp, #8]
   1aff8:	str	lr, [sp, #16]
   1affc:	sub	sp, sp, #12
   1b000:	mov	r7, r1
   1b004:	mov	r5, r2
   1b008:	subs	r6, r0, #0
   1b00c:	addeq	r6, sp, #4
   1b010:	mov	r0, r6
   1b014:	bl	112cc <mbrtowc@plt>
   1b018:	mov	r4, r0
   1b01c:	cmp	r5, #0
   1b020:	cmnne	r0, #3
   1b024:	bhi	1b040 <__assert_fail@plt+0x9b64>
   1b028:	mov	r0, r4
   1b02c:	add	sp, sp, #12
   1b030:	ldrd	r4, [sp]
   1b034:	ldrd	r6, [sp, #8]
   1b038:	add	sp, sp, #16
   1b03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b040:	mov	r0, #0
   1b044:	bl	1b09c <__assert_fail@plt+0x9bc0>
   1b048:	cmp	r0, #0
   1b04c:	bne	1b028 <__assert_fail@plt+0x9b4c>
   1b050:	ldrb	r3, [r7]
   1b054:	str	r3, [r6]
   1b058:	mov	r4, #1
   1b05c:	b	1b028 <__assert_fail@plt+0x9b4c>
   1b060:	str	r4, [sp, #-8]!
   1b064:	str	lr, [sp, #4]
   1b068:	umull	r2, r3, r1, r2
   1b06c:	cmp	r3, #0
   1b070:	bne	1b088 <__assert_fail@plt+0x9bac>
   1b074:	mov	r1, r2
   1b078:	bl	1aa90 <__assert_fail@plt+0x95b4>
   1b07c:	ldr	r4, [sp]
   1b080:	add	sp, sp, #4
   1b084:	pop	{pc}		; (ldr pc, [sp], #4)
   1b088:	bl	113a4 <__errno_location@plt>
   1b08c:	mov	r3, #12
   1b090:	str	r3, [r0]
   1b094:	mov	r0, #0
   1b098:	b	1b07c <__assert_fail@plt+0x9ba0>
   1b09c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b0a0:	sub	sp, sp, #268	; 0x10c
   1b0a4:	movw	r2, #257	; 0x101
   1b0a8:	add	r1, sp, #4
   1b0ac:	bl	1b0f8 <__assert_fail@plt+0x9c1c>
   1b0b0:	cmp	r0, #0
   1b0b4:	movne	r0, #0
   1b0b8:	bne	1b0f0 <__assert_fail@plt+0x9c14>
   1b0bc:	movw	r1, #55616	; 0xd940
   1b0c0:	movt	r1, #1
   1b0c4:	add	r0, sp, #4
   1b0c8:	bl	1117c <strcmp@plt>
   1b0cc:	cmp	r0, #0
   1b0d0:	beq	1b0ec <__assert_fail@plt+0x9c10>
   1b0d4:	movw	r1, #55620	; 0xd944
   1b0d8:	movt	r1, #1
   1b0dc:	add	r0, sp, #4
   1b0e0:	bl	1117c <strcmp@plt>
   1b0e4:	adds	r0, r0, #0
   1b0e8:	movne	r0, #1
   1b0ec:	and	r0, r0, #1
   1b0f0:	add	sp, sp, #268	; 0x10c
   1b0f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0f8:	strd	r4, [sp, #-16]!
   1b0fc:	str	r6, [sp, #8]
   1b100:	str	lr, [sp, #12]
   1b104:	mov	r6, r1
   1b108:	mov	r4, r2
   1b10c:	mov	r1, #0
   1b110:	bl	11440 <setlocale@plt>
   1b114:	subs	r5, r0, #0
   1b118:	beq	1b15c <__assert_fail@plt+0x9c80>
   1b11c:	mov	r0, r5
   1b120:	bl	11380 <strlen@plt>
   1b124:	cmp	r4, r0
   1b128:	bhi	1b178 <__assert_fail@plt+0x9c9c>
   1b12c:	cmp	r4, #0
   1b130:	moveq	r0, #34	; 0x22
   1b134:	beq	1b18c <__assert_fail@plt+0x9cb0>
   1b138:	sub	r4, r4, #1
   1b13c:	mov	r2, r4
   1b140:	mov	r1, r5
   1b144:	mov	r0, r6
   1b148:	bl	111e8 <memcpy@plt>
   1b14c:	mov	r3, #0
   1b150:	strb	r3, [r6, r4]
   1b154:	mov	r0, #34	; 0x22
   1b158:	b	1b18c <__assert_fail@plt+0x9cb0>
   1b15c:	cmp	r4, #0
   1b160:	moveq	r0, #22
   1b164:	beq	1b18c <__assert_fail@plt+0x9cb0>
   1b168:	mov	r3, #0
   1b16c:	strb	r3, [r6]
   1b170:	mov	r0, #22
   1b174:	b	1b18c <__assert_fail@plt+0x9cb0>
   1b178:	add	r2, r0, #1
   1b17c:	mov	r1, r5
   1b180:	mov	r0, r6
   1b184:	bl	111e8 <memcpy@plt>
   1b188:	mov	r0, #0
   1b18c:	ldrd	r4, [sp]
   1b190:	ldr	r6, [sp, #8]
   1b194:	add	sp, sp, #12
   1b198:	pop	{pc}		; (ldr pc, [sp], #4)
   1b19c:	str	r4, [sp, #-8]!
   1b1a0:	str	lr, [sp, #4]
   1b1a4:	mov	r1, #0
   1b1a8:	bl	11440 <setlocale@plt>
   1b1ac:	ldr	r4, [sp]
   1b1b0:	add	sp, sp, #4
   1b1b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1b8:	eor	r1, r1, #-2147483648	; 0x80000000
   1b1bc:	b	1b1c4 <__assert_fail@plt+0x9ce8>
   1b1c0:	eor	r3, r3, #-2147483648	; 0x80000000
   1b1c4:	push	{r4, r5, lr}
   1b1c8:	lsl	r4, r1, #1
   1b1cc:	lsl	r5, r3, #1
   1b1d0:	teq	r4, r5
   1b1d4:	teqeq	r0, r2
   1b1d8:	orrsne	ip, r4, r0
   1b1dc:	orrsne	ip, r5, r2
   1b1e0:	mvnsne	ip, r4, asr #21
   1b1e4:	mvnsne	ip, r5, asr #21
   1b1e8:	beq	1b3d4 <__assert_fail@plt+0x9ef8>
   1b1ec:	lsr	r4, r4, #21
   1b1f0:	rsbs	r5, r4, r5, lsr #21
   1b1f4:	rsblt	r5, r5, #0
   1b1f8:	ble	1b218 <__assert_fail@plt+0x9d3c>
   1b1fc:	add	r4, r4, r5
   1b200:	eor	r2, r0, r2
   1b204:	eor	r3, r1, r3
   1b208:	eor	r0, r2, r0
   1b20c:	eor	r1, r3, r1
   1b210:	eor	r2, r0, r2
   1b214:	eor	r3, r1, r3
   1b218:	cmp	r5, #54	; 0x36
   1b21c:	pophi	{r4, r5, pc}
   1b220:	tst	r1, #-2147483648	; 0x80000000
   1b224:	lsl	r1, r1, #12
   1b228:	mov	ip, #1048576	; 0x100000
   1b22c:	orr	r1, ip, r1, lsr #12
   1b230:	beq	1b23c <__assert_fail@plt+0x9d60>
   1b234:	rsbs	r0, r0, #0
   1b238:	rsc	r1, r1, #0
   1b23c:	tst	r3, #-2147483648	; 0x80000000
   1b240:	lsl	r3, r3, #12
   1b244:	orr	r3, ip, r3, lsr #12
   1b248:	beq	1b254 <__assert_fail@plt+0x9d78>
   1b24c:	rsbs	r2, r2, #0
   1b250:	rsc	r3, r3, #0
   1b254:	teq	r4, r5
   1b258:	beq	1b3bc <__assert_fail@plt+0x9ee0>
   1b25c:	sub	r4, r4, #1
   1b260:	rsbs	lr, r5, #32
   1b264:	blt	1b280 <__assert_fail@plt+0x9da4>
   1b268:	lsl	ip, r2, lr
   1b26c:	adds	r0, r0, r2, lsr r5
   1b270:	adc	r1, r1, #0
   1b274:	adds	r0, r0, r3, lsl lr
   1b278:	adcs	r1, r1, r3, asr r5
   1b27c:	b	1b29c <__assert_fail@plt+0x9dc0>
   1b280:	sub	r5, r5, #32
   1b284:	add	lr, lr, #32
   1b288:	cmp	r2, #1
   1b28c:	lsl	ip, r3, lr
   1b290:	orrcs	ip, ip, #2
   1b294:	adds	r0, r0, r3, asr r5
   1b298:	adcs	r1, r1, r3, asr #31
   1b29c:	and	r5, r1, #-2147483648	; 0x80000000
   1b2a0:	bpl	1b2b0 <__assert_fail@plt+0x9dd4>
   1b2a4:	rsbs	ip, ip, #0
   1b2a8:	rscs	r0, r0, #0
   1b2ac:	rsc	r1, r1, #0
   1b2b0:	cmp	r1, #1048576	; 0x100000
   1b2b4:	bcc	1b2f4 <__assert_fail@plt+0x9e18>
   1b2b8:	cmp	r1, #2097152	; 0x200000
   1b2bc:	bcc	1b2dc <__assert_fail@plt+0x9e00>
   1b2c0:	lsrs	r1, r1, #1
   1b2c4:	rrxs	r0, r0
   1b2c8:	rrx	ip, ip
   1b2cc:	add	r4, r4, #1
   1b2d0:	lsl	r2, r4, #21
   1b2d4:	cmn	r2, #4194304	; 0x400000
   1b2d8:	bcs	1b434 <__assert_fail@plt+0x9f58>
   1b2dc:	cmp	ip, #-2147483648	; 0x80000000
   1b2e0:	lsrseq	ip, r0, #1
   1b2e4:	adcs	r0, r0, #0
   1b2e8:	adc	r1, r1, r4, lsl #20
   1b2ec:	orr	r1, r1, r5
   1b2f0:	pop	{r4, r5, pc}
   1b2f4:	lsls	ip, ip, #1
   1b2f8:	adcs	r0, r0, r0
   1b2fc:	adc	r1, r1, r1
   1b300:	tst	r1, #1048576	; 0x100000
   1b304:	sub	r4, r4, #1
   1b308:	bne	1b2dc <__assert_fail@plt+0x9e00>
   1b30c:	teq	r1, #0
   1b310:	moveq	r1, r0
   1b314:	moveq	r0, #0
   1b318:	clz	r3, r1
   1b31c:	addeq	r3, r3, #32
   1b320:	sub	r3, r3, #11
   1b324:	subs	r2, r3, #32
   1b328:	bge	1b34c <__assert_fail@plt+0x9e70>
   1b32c:	adds	r2, r2, #12
   1b330:	ble	1b348 <__assert_fail@plt+0x9e6c>
   1b334:	add	ip, r2, #20
   1b338:	rsb	r2, r2, #12
   1b33c:	lsl	r0, r1, ip
   1b340:	lsr	r1, r1, r2
   1b344:	b	1b35c <__assert_fail@plt+0x9e80>
   1b348:	add	r2, r2, #20
   1b34c:	rsble	ip, r2, #32
   1b350:	lsl	r1, r1, r2
   1b354:	orrle	r1, r1, r0, lsr ip
   1b358:	lslle	r0, r0, r2
   1b35c:	subs	r4, r4, r3
   1b360:	addge	r1, r1, r4, lsl #20
   1b364:	orrge	r1, r1, r5
   1b368:	popge	{r4, r5, pc}
   1b36c:	mvn	r4, r4
   1b370:	subs	r4, r4, #31
   1b374:	bge	1b3b0 <__assert_fail@plt+0x9ed4>
   1b378:	adds	r4, r4, #12
   1b37c:	bgt	1b398 <__assert_fail@plt+0x9ebc>
   1b380:	add	r4, r4, #20
   1b384:	rsb	r2, r4, #32
   1b388:	lsr	r0, r0, r4
   1b38c:	orr	r0, r0, r1, lsl r2
   1b390:	orr	r1, r5, r1, lsr r4
   1b394:	pop	{r4, r5, pc}
   1b398:	rsb	r4, r4, #12
   1b39c:	rsb	r2, r4, #32
   1b3a0:	lsr	r0, r0, r2
   1b3a4:	orr	r0, r0, r1, lsl r4
   1b3a8:	mov	r1, r5
   1b3ac:	pop	{r4, r5, pc}
   1b3b0:	lsr	r0, r1, r4
   1b3b4:	mov	r1, r5
   1b3b8:	pop	{r4, r5, pc}
   1b3bc:	teq	r4, #0
   1b3c0:	eor	r3, r3, #1048576	; 0x100000
   1b3c4:	eoreq	r1, r1, #1048576	; 0x100000
   1b3c8:	addeq	r4, r4, #1
   1b3cc:	subne	r5, r5, #1
   1b3d0:	b	1b25c <__assert_fail@plt+0x9d80>
   1b3d4:	mvns	ip, r4, asr #21
   1b3d8:	mvnsne	ip, r5, asr #21
   1b3dc:	beq	1b444 <__assert_fail@plt+0x9f68>
   1b3e0:	teq	r4, r5
   1b3e4:	teqeq	r0, r2
   1b3e8:	beq	1b3fc <__assert_fail@plt+0x9f20>
   1b3ec:	orrs	ip, r4, r0
   1b3f0:	moveq	r1, r3
   1b3f4:	moveq	r0, r2
   1b3f8:	pop	{r4, r5, pc}
   1b3fc:	teq	r1, r3
   1b400:	movne	r1, #0
   1b404:	movne	r0, #0
   1b408:	popne	{r4, r5, pc}
   1b40c:	lsrs	ip, r4, #21
   1b410:	bne	1b424 <__assert_fail@plt+0x9f48>
   1b414:	lsls	r0, r0, #1
   1b418:	adcs	r1, r1, r1
   1b41c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1b420:	pop	{r4, r5, pc}
   1b424:	adds	r4, r4, #4194304	; 0x400000
   1b428:	addcc	r1, r1, #1048576	; 0x100000
   1b42c:	popcc	{r4, r5, pc}
   1b430:	and	r5, r1, #-2147483648	; 0x80000000
   1b434:	orr	r1, r5, #2130706432	; 0x7f000000
   1b438:	orr	r1, r1, #15728640	; 0xf00000
   1b43c:	mov	r0, #0
   1b440:	pop	{r4, r5, pc}
   1b444:	mvns	ip, r4, asr #21
   1b448:	movne	r1, r3
   1b44c:	movne	r0, r2
   1b450:	mvnseq	ip, r5, asr #21
   1b454:	movne	r3, r1
   1b458:	movne	r2, r0
   1b45c:	orrs	r4, r0, r1, lsl #12
   1b460:	orrseq	r5, r2, r3, lsl #12
   1b464:	teqeq	r1, r3
   1b468:	orrne	r1, r1, #524288	; 0x80000
   1b46c:	pop	{r4, r5, pc}
   1b470:	teq	r0, #0
   1b474:	moveq	r1, #0
   1b478:	bxeq	lr
   1b47c:	push	{r4, r5, lr}
   1b480:	mov	r4, #1024	; 0x400
   1b484:	add	r4, r4, #50	; 0x32
   1b488:	mov	r5, #0
   1b48c:	mov	r1, #0
   1b490:	b	1b30c <__assert_fail@plt+0x9e30>
   1b494:	teq	r0, #0
   1b498:	moveq	r1, #0
   1b49c:	bxeq	lr
   1b4a0:	push	{r4, r5, lr}
   1b4a4:	mov	r4, #1024	; 0x400
   1b4a8:	add	r4, r4, #50	; 0x32
   1b4ac:	ands	r5, r0, #-2147483648	; 0x80000000
   1b4b0:	rsbmi	r0, r0, #0
   1b4b4:	mov	r1, #0
   1b4b8:	b	1b30c <__assert_fail@plt+0x9e30>
   1b4bc:	lsls	r2, r0, #1
   1b4c0:	asr	r1, r2, #3
   1b4c4:	rrx	r1, r1
   1b4c8:	lsl	r0, r2, #28
   1b4cc:	andsne	r3, r2, #-16777216	; 0xff000000
   1b4d0:	teqne	r3, #-16777216	; 0xff000000
   1b4d4:	eorne	r1, r1, #939524096	; 0x38000000
   1b4d8:	bxne	lr
   1b4dc:	bics	r2, r2, #-16777216	; 0xff000000
   1b4e0:	bxeq	lr
   1b4e4:	teq	r3, #-16777216	; 0xff000000
   1b4e8:	orreq	r1, r1, #524288	; 0x80000
   1b4ec:	bxeq	lr
   1b4f0:	push	{r4, r5, lr}
   1b4f4:	mov	r4, #896	; 0x380
   1b4f8:	and	r5, r1, #-2147483648	; 0x80000000
   1b4fc:	bic	r1, r1, #-2147483648	; 0x80000000
   1b500:	b	1b30c <__assert_fail@plt+0x9e30>
   1b504:	orrs	r2, r0, r1
   1b508:	bxeq	lr
   1b50c:	push	{r4, r5, lr}
   1b510:	mov	r5, #0
   1b514:	b	1b534 <__assert_fail@plt+0xa058>
   1b518:	orrs	r2, r0, r1
   1b51c:	bxeq	lr
   1b520:	push	{r4, r5, lr}
   1b524:	ands	r5, r1, #-2147483648	; 0x80000000
   1b528:	bpl	1b534 <__assert_fail@plt+0xa058>
   1b52c:	rsbs	r0, r0, #0
   1b530:	rsc	r1, r1, #0
   1b534:	mov	r4, #1024	; 0x400
   1b538:	add	r4, r4, #50	; 0x32
   1b53c:	lsrs	ip, r1, #22
   1b540:	beq	1b2b0 <__assert_fail@plt+0x9dd4>
   1b544:	mov	r2, #3
   1b548:	lsrs	ip, ip, #3
   1b54c:	addne	r2, r2, #3
   1b550:	lsrs	ip, ip, #3
   1b554:	addne	r2, r2, #3
   1b558:	add	r2, r2, ip, lsr #3
   1b55c:	rsb	r3, r2, #32
   1b560:	lsl	ip, r0, r3
   1b564:	lsr	r0, r0, r2
   1b568:	orr	r0, r0, r1, lsl r3
   1b56c:	lsr	r1, r1, r2
   1b570:	add	r4, r4, r2
   1b574:	b	1b2b0 <__assert_fail@plt+0x9dd4>
   1b578:	cmp	r3, #0
   1b57c:	cmpeq	r2, #0
   1b580:	bne	1b5a4 <__assert_fail@plt+0xa0c8>
   1b584:	cmp	r1, #0
   1b588:	movlt	r1, #-2147483648	; 0x80000000
   1b58c:	movlt	r0, #0
   1b590:	blt	1b5a0 <__assert_fail@plt+0xa0c4>
   1b594:	cmpeq	r0, #0
   1b598:	mvnne	r1, #-2147483648	; 0x80000000
   1b59c:	mvnne	r0, #0
   1b5a0:	b	1b688 <__assert_fail@plt+0xa1ac>
   1b5a4:	sub	sp, sp, #8
   1b5a8:	push	{sp, lr}
   1b5ac:	cmp	r1, #0
   1b5b0:	blt	1b5d0 <__assert_fail@plt+0xa0f4>
   1b5b4:	cmp	r3, #0
   1b5b8:	blt	1b604 <__assert_fail@plt+0xa128>
   1b5bc:	bl	1b6d8 <__assert_fail@plt+0xa1fc>
   1b5c0:	ldr	lr, [sp, #4]
   1b5c4:	add	sp, sp, #8
   1b5c8:	pop	{r2, r3}
   1b5cc:	bx	lr
   1b5d0:	rsbs	r0, r0, #0
   1b5d4:	sbc	r1, r1, r1, lsl #1
   1b5d8:	cmp	r3, #0
   1b5dc:	blt	1b628 <__assert_fail@plt+0xa14c>
   1b5e0:	bl	1b6d8 <__assert_fail@plt+0xa1fc>
   1b5e4:	ldr	lr, [sp, #4]
   1b5e8:	add	sp, sp, #8
   1b5ec:	pop	{r2, r3}
   1b5f0:	rsbs	r0, r0, #0
   1b5f4:	sbc	r1, r1, r1, lsl #1
   1b5f8:	rsbs	r2, r2, #0
   1b5fc:	sbc	r3, r3, r3, lsl #1
   1b600:	bx	lr
   1b604:	rsbs	r2, r2, #0
   1b608:	sbc	r3, r3, r3, lsl #1
   1b60c:	bl	1b6d8 <__assert_fail@plt+0xa1fc>
   1b610:	ldr	lr, [sp, #4]
   1b614:	add	sp, sp, #8
   1b618:	pop	{r2, r3}
   1b61c:	rsbs	r0, r0, #0
   1b620:	sbc	r1, r1, r1, lsl #1
   1b624:	bx	lr
   1b628:	rsbs	r2, r2, #0
   1b62c:	sbc	r3, r3, r3, lsl #1
   1b630:	bl	1b6d8 <__assert_fail@plt+0xa1fc>
   1b634:	ldr	lr, [sp, #4]
   1b638:	add	sp, sp, #8
   1b63c:	pop	{r2, r3}
   1b640:	rsbs	r2, r2, #0
   1b644:	sbc	r3, r3, r3, lsl #1
   1b648:	bx	lr
   1b64c:	cmp	r3, #0
   1b650:	cmpeq	r2, #0
   1b654:	bne	1b66c <__assert_fail@plt+0xa190>
   1b658:	cmp	r1, #0
   1b65c:	cmpeq	r0, #0
   1b660:	mvnne	r1, #0
   1b664:	mvnne	r0, #0
   1b668:	b	1b688 <__assert_fail@plt+0xa1ac>
   1b66c:	sub	sp, sp, #8
   1b670:	push	{sp, lr}
   1b674:	bl	1b6d8 <__assert_fail@plt+0xa1fc>
   1b678:	ldr	lr, [sp, #4]
   1b67c:	add	sp, sp, #8
   1b680:	pop	{r2, r3}
   1b684:	bx	lr
   1b688:	push	{r1, lr}
   1b68c:	mov	r0, #8
   1b690:	bl	11164 <raise@plt>
   1b694:	pop	{r1, pc}
   1b698:	vmov	d6, r0, r1
   1b69c:	vldr	d7, [pc, #36]	; 1b6c8 <__assert_fail@plt+0xa1ec>
   1b6a0:	vldr	d5, [pc, #40]	; 1b6d0 <__assert_fail@plt+0xa1f4>
   1b6a4:	vmul.f64	d7, d6, d7
   1b6a8:	vcvt.u32.f64	s14, d7
   1b6ac:	vcvt.f64.u32	d4, s14
   1b6b0:	vmov	r1, s14
   1b6b4:	vmls.f64	d6, d4, d5
   1b6b8:	vcvt.u32.f64	s15, d6
   1b6bc:	vmov	r0, s15
   1b6c0:	bx	lr
   1b6c4:	nop			; (mov r0, r0)
   1b6c8:	andeq	r0, r0, r0
   1b6cc:	ldclcc	0, cr0, [r0]
   1b6d0:	andeq	r0, r0, r0
   1b6d4:	mvnsmi	r0, r0
   1b6d8:	cmp	r1, r3
   1b6dc:	cmpeq	r0, r2
   1b6e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6e4:	mov	r4, r0
   1b6e8:	movcc	r0, #0
   1b6ec:	mov	r5, r1
   1b6f0:	ldr	lr, [sp, #36]	; 0x24
   1b6f4:	movcc	r1, r0
   1b6f8:	bcc	1b7f4 <__assert_fail@plt+0xa318>
   1b6fc:	cmp	r3, #0
   1b700:	clzeq	ip, r2
   1b704:	clzne	ip, r3
   1b708:	addeq	ip, ip, #32
   1b70c:	cmp	r5, #0
   1b710:	clzeq	r1, r4
   1b714:	addeq	r1, r1, #32
   1b718:	clzne	r1, r5
   1b71c:	sub	ip, ip, r1
   1b720:	sub	sl, ip, #32
   1b724:	lsl	r9, r3, ip
   1b728:	rsb	fp, ip, #32
   1b72c:	orr	r9, r9, r2, lsl sl
   1b730:	orr	r9, r9, r2, lsr fp
   1b734:	lsl	r8, r2, ip
   1b738:	cmp	r5, r9
   1b73c:	cmpeq	r4, r8
   1b740:	movcc	r0, #0
   1b744:	movcc	r1, r0
   1b748:	bcc	1b764 <__assert_fail@plt+0xa288>
   1b74c:	mov	r0, #1
   1b750:	subs	r4, r4, r8
   1b754:	lsl	r1, r0, sl
   1b758:	orr	r1, r1, r0, lsr fp
   1b75c:	lsl	r0, r0, ip
   1b760:	sbc	r5, r5, r9
   1b764:	cmp	ip, #0
   1b768:	beq	1b7f4 <__assert_fail@plt+0xa318>
   1b76c:	lsr	r6, r8, #1
   1b770:	orr	r6, r6, r9, lsl #31
   1b774:	lsr	r7, r9, #1
   1b778:	mov	r2, ip
   1b77c:	b	1b7a0 <__assert_fail@plt+0xa2c4>
   1b780:	subs	r3, r4, r6
   1b784:	sbc	r8, r5, r7
   1b788:	adds	r3, r3, r3
   1b78c:	adc	r8, r8, r8
   1b790:	adds	r4, r3, #1
   1b794:	adc	r5, r8, #0
   1b798:	subs	r2, r2, #1
   1b79c:	beq	1b7bc <__assert_fail@plt+0xa2e0>
   1b7a0:	cmp	r5, r7
   1b7a4:	cmpeq	r4, r6
   1b7a8:	bcs	1b780 <__assert_fail@plt+0xa2a4>
   1b7ac:	adds	r4, r4, r4
   1b7b0:	adc	r5, r5, r5
   1b7b4:	subs	r2, r2, #1
   1b7b8:	bne	1b7a0 <__assert_fail@plt+0xa2c4>
   1b7bc:	lsr	r3, r4, ip
   1b7c0:	orr	r3, r3, r5, lsl fp
   1b7c4:	lsr	r2, r5, ip
   1b7c8:	orr	r3, r3, r5, lsr sl
   1b7cc:	adds	r0, r0, r4
   1b7d0:	mov	r4, r3
   1b7d4:	lsl	r3, r2, ip
   1b7d8:	orr	r3, r3, r4, lsl sl
   1b7dc:	lsl	ip, r4, ip
   1b7e0:	orr	r3, r3, r4, lsr fp
   1b7e4:	adc	r1, r1, r5
   1b7e8:	subs	r0, r0, ip
   1b7ec:	mov	r5, r2
   1b7f0:	sbc	r1, r1, r3
   1b7f4:	cmp	lr, #0
   1b7f8:	strdne	r4, [lr]
   1b7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b804:	mov	r7, r0
   1b808:	ldr	r6, [pc, #72]	; 1b858 <__assert_fail@plt+0xa37c>
   1b80c:	ldr	r5, [pc, #72]	; 1b85c <__assert_fail@plt+0xa380>
   1b810:	add	r6, pc, r6
   1b814:	add	r5, pc, r5
   1b818:	sub	r6, r6, r5
   1b81c:	mov	r8, r1
   1b820:	mov	r9, r2
   1b824:	bl	1112c <calloc@plt-0x20>
   1b828:	asrs	r6, r6, #2
   1b82c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b830:	mov	r4, #0
   1b834:	add	r4, r4, #1
   1b838:	ldr	r3, [r5], #4
   1b83c:	mov	r2, r9
   1b840:	mov	r1, r8
   1b844:	mov	r0, r7
   1b848:	blx	r3
   1b84c:	cmp	r6, r4
   1b850:	bne	1b834 <__assert_fail@plt+0xa358>
   1b854:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b858:	strdeq	r2, [r1], -ip
   1b85c:	strdeq	r2, [r1], -r4
   1b860:	bx	lr
   1b864:	ldr	r3, [pc, #12]	; 1b878 <__assert_fail@plt+0xa39c>
   1b868:	mov	r1, #0
   1b86c:	add	r3, pc, r3
   1b870:	ldr	r2, [r3]
   1b874:	b	113bc <__cxa_atexit@plt>
   1b878:	ldrdeq	r2, [r1], -r8

Disassembly of section .fini:

0001b87c <.fini>:
   1b87c:	push	{r3, lr}
   1b880:	pop	{r3, pc}
