
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e30 <.init>:
   10e30:	push	{r3, lr}
   10e34:	bl	11108 <__assert_fail@plt+0x48>
   10e38:	pop	{r3, pc}

Disassembly of section .plt:

00010e3c <calloc@plt-0x14>:
   10e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e40:	ldr	lr, [pc, #4]	; 10e4c <calloc@plt-0x4>
   10e44:	add	lr, pc, lr
   10e48:	ldr	pc, [lr, #8]!
   10e4c:			; <UNDEFINED> instruction: 0x000181b4

00010e50 <calloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #436]!	; 0x1b4

00010e5c <fputs_unlocked@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #428]!	; 0x1ac

00010e68 <raise@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #420]!	; 0x1a4

00010e74 <strcmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #412]!	; 0x19c

00010e80 <posix_fadvise64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #404]!	; 0x194

00010e8c <fflush@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #396]!	; 0x18c

00010e98 <memmove@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #388]!	; 0x184

00010ea4 <free@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #380]!	; 0x17c

00010eb0 <_exit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #372]!	; 0x174

00010ebc <memcpy@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #364]!	; 0x16c

00010ec8 <__strtoull_internal@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #356]!	; 0x164

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #348]!	; 0x15c

00010ee0 <fwrite_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #340]!	; 0x154

00010eec <dcgettext@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #332]!	; 0x14c

00010ef8 <realloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #324]!	; 0x144

00010f04 <textdomain@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #316]!	; 0x13c

00010f10 <iswprint@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #308]!	; 0x134

00010f1c <fwrite@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #300]!	; 0x12c

00010f28 <lseek64@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #292]!	; 0x124

00010f34 <__ctype_get_mb_cur_max@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #284]!	; 0x11c

00010f40 <__fpending@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #276]!	; 0x114

00010f4c <mbrtowc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #268]!	; 0x10c

00010f58 <error@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #260]!	; 0x104

00010f64 <malloc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #252]!	; 0xfc

00010f70 <__libc_start_main@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #244]!	; 0xf4

00010f7c <__freading@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #236]!	; 0xec

00010f88 <__gmon_start__@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #228]!	; 0xe4

00010f94 <getopt_long@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #220]!	; 0xdc

00010fa0 <__ctype_b_loc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #212]!	; 0xd4

00010fac <exit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #204]!	; 0xcc

00010fb8 <bcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #196]!	; 0xc4

00010fc4 <strlen@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #188]!	; 0xbc

00010fd0 <strchr@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #180]!	; 0xb4

00010fdc <__errno_location@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #172]!	; 0xac

00010fe8 <__cxa_atexit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #164]!	; 0xa4

00010ff4 <memset@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #156]!	; 0x9c

00011000 <__printf_chk@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #148]!	; 0x94

0001100c <fileno@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #140]!	; 0x8c

00011018 <__fprintf_chk@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #132]!	; 0x84

00011024 <memchr@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #124]!	; 0x7c

00011030 <fclose@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #116]!	; 0x74

0001103c <fseeko64@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #108]!	; 0x6c

00011048 <__uflow@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #100]!	; 0x64

00011054 <__overflow@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #92]!	; 0x5c

00011060 <setlocale@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #84]!	; 0x54

0001106c <strrchr@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #76]!	; 0x4c

00011078 <nl_langinfo@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #68]!	; 0x44

00011084 <clearerr_unlocked@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #60]!	; 0x3c

00011090 <fopen64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #52]!	; 0x34

0001109c <bindtextdomain@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #44]!	; 0x2c

000110a8 <strncmp@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #36]!	; 0x24

000110b4 <abort@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #28]!

000110c0 <__assert_fail@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #20]!

Disassembly of section .text:

000110cc <.text>:
   110cc:	mov	fp, #0
   110d0:	mov	lr, #0
   110d4:	pop	{r1}		; (ldr r1, [sp], #4)
   110d8:	mov	r2, sp
   110dc:	push	{r2}		; (str r2, [sp, #-4]!)
   110e0:	push	{r0}		; (str r0, [sp, #-4]!)
   110e4:	ldr	ip, [pc, #16]	; 110fc <__assert_fail@plt+0x3c>
   110e8:	push	{ip}		; (str ip, [sp, #-4]!)
   110ec:	ldr	r0, [pc, #12]	; 11100 <__assert_fail@plt+0x40>
   110f0:	ldr	r3, [pc, #12]	; 11104 <__assert_fail@plt+0x44>
   110f4:	bl	10f70 <__libc_start_main@plt>
   110f8:	bl	110b4 <abort@plt>
   110fc:	muleq	r1, r8, r4
   11100:	andeq	r1, r1, r0, ror r4
   11104:	andeq	r7, r1, r8, lsr r4
   11108:	ldr	r3, [pc, #20]	; 11124 <__assert_fail@plt+0x64>
   1110c:	ldr	r2, [pc, #20]	; 11128 <__assert_fail@plt+0x68>
   11110:	add	r3, pc, r3
   11114:	ldr	r2, [r3, r2]
   11118:	cmp	r2, #0
   1111c:	bxeq	lr
   11120:	b	10f88 <__gmon_start__@plt>
   11124:	andeq	r7, r1, r8, ror #29
   11128:	andeq	r0, r0, r0, ror #1
   1112c:	ldr	r0, [pc, #24]	; 1114c <__assert_fail@plt+0x8c>
   11130:	ldr	r3, [pc, #24]	; 11150 <__assert_fail@plt+0x90>
   11134:	cmp	r3, r0
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0x94>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r9, r2, r8, lsr r1
   11150:	andeq	r9, r2, r8, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	ldr	r0, [pc, #36]	; 11184 <__assert_fail@plt+0xc4>
   1115c:	ldr	r1, [pc, #36]	; 11188 <__assert_fail@plt+0xc8>
   11160:	sub	r1, r1, r0
   11164:	asr	r1, r1, #2
   11168:	add	r1, r1, r1, lsr #31
   1116c:	asrs	r1, r1, #1
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <__assert_fail@plt+0xcc>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r9, r2, r8, lsr r1
   11188:	andeq	r9, r2, r8, lsr r1
   1118c:	andeq	r0, r0, r0
   11190:	push	{r4, lr}
   11194:	ldr	r4, [pc, #24]	; 111b4 <__assert_fail@plt+0xf4>
   11198:	ldrb	r3, [r4]
   1119c:	cmp	r3, #0
   111a0:	popne	{r4, pc}
   111a4:	bl	1112c <__assert_fail@plt+0x6c>
   111a8:	mov	r3, #1
   111ac:	strb	r3, [r4]
   111b0:	pop	{r4, pc}
   111b4:	andeq	r9, r2, ip, asr r1
   111b8:	b	11158 <__assert_fail@plt+0x98>
   111bc:	push	{fp, lr}
   111c0:	mov	fp, sp
   111c4:	sub	sp, sp, #56	; 0x38
   111c8:	mov	r4, r0
   111cc:	cmp	r0, #0
   111d0:	bne	1142c <__assert_fail@plt+0x36c>
   111d4:	movw	r1, #29931	; 0x74eb
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	movt	r1, #1
   111e4:	bl	10eec <dcgettext@plt>
   111e8:	mov	r1, r0
   111ec:	movw	r0, #4760	; 0x1298
   111f0:	movt	r0, #3
   111f4:	ldr	r2, [r0]
   111f8:	mov	r0, #1
   111fc:	bl	11000 <__printf_chk@plt>
   11200:	movw	r1, #29973	; 0x7515
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	movt	r1, #1
   11210:	bl	10eec <dcgettext@plt>
   11214:	movw	r7, #37204	; 0x9154
   11218:	movt	r7, #2
   1121c:	ldr	r1, [r7]
   11220:	bl	10e5c <fputs_unlocked@plt>
   11224:	movw	r1, #31000	; 0x7918
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10eec <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e5c <fputs_unlocked@plt>
   11240:	movw	r1, #31056	; 0x7950
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10eec <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e5c <fputs_unlocked@plt>
   1125c:	movw	r1, #30102	; 0x7596
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10eec <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e5c <fputs_unlocked@plt>
   11278:	movw	r1, #30380	; 0x76ac
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10eec <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e5c <fputs_unlocked@plt>
   11294:	movw	r1, #30666	; 0x77ca
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10eec <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e5c <fputs_unlocked@plt>
   112b0:	movw	r1, #30711	; 0x77f7
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10eec <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10e5c <fputs_unlocked@plt>
   112cc:	movw	r0, #31768	; 0x7c18
   112d0:	mov	r2, #48	; 0x30
   112d4:	mov	r6, sp
   112d8:	movw	r5, #30765	; 0x782d
   112dc:	movt	r0, #1
   112e0:	movt	r5, #1
   112e4:	add	r1, r0, #32
   112e8:	add	r3, r0, #16
   112ec:	vld1.64	{d18-d19}, [r0], r2
   112f0:	vld1.64	{d16-d17}, [r1]
   112f4:	vld1.64	{d20-d21}, [r3]
   112f8:	vldr	d22, [r0]
   112fc:	add	r1, r6, #32
   11300:	add	r0, r6, #16
   11304:	vst1.64	{d16-d17}, [r1]
   11308:	movw	r1, #31131	; 0x799b
   1130c:	vst1.64	{d20-d21}, [r0]
   11310:	mov	r0, r6
   11314:	movt	r1, #1
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	vstr	d22, [r0]
   11320:	mov	r0, r5
   11324:	bl	10e74 <strcmp@plt>
   11328:	cmp	r0, #0
   1132c:	ldrne	r1, [r6, #8]!
   11330:	cmpne	r1, #0
   11334:	bne	11320 <__assert_fail@plt+0x260>
   11338:	movw	r1, #31226	; 0x79fa
   1133c:	ldr	r6, [r6, #4]
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10eec <dcgettext@plt>
   11350:	movw	r2, #30908	; 0x78bc
   11354:	movw	r3, #31249	; 0x7a11
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	movt	r2, #1
   11364:	movt	r3, #1
   11368:	bl	11000 <__printf_chk@plt>
   1136c:	cmp	r6, #0
   11370:	mov	r0, #5
   11374:	mov	r1, #0
   11378:	moveq	r6, r5
   1137c:	bl	11060 <setlocale@plt>
   11380:	cmp	r0, #0
   11384:	beq	113bc <__assert_fail@plt+0x2fc>
   11388:	movw	r1, #31289	; 0x7a39
   1138c:	mov	r2, #3
   11390:	movt	r1, #1
   11394:	bl	110a8 <strncmp@plt>
   11398:	cmp	r0, #0
   1139c:	beq	113bc <__assert_fail@plt+0x2fc>
   113a0:	movw	r1, #31293	; 0x7a3d
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10eec <dcgettext@plt>
   113b4:	ldr	r1, [r7]
   113b8:	bl	10e5c <fputs_unlocked@plt>
   113bc:	movw	r1, #31364	; 0x7a84
   113c0:	mov	r0, #0
   113c4:	mov	r2, #5
   113c8:	movt	r1, #1
   113cc:	bl	10eec <dcgettext@plt>
   113d0:	movw	r2, #31249	; 0x7a11
   113d4:	mov	r1, r0
   113d8:	mov	r0, #1
   113dc:	mov	r3, r5
   113e0:	movt	r2, #1
   113e4:	bl	11000 <__printf_chk@plt>
   113e8:	movw	r1, #31391	; 0x7a9f
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	movt	r1, #1
   113f8:	bl	10eec <dcgettext@plt>
   113fc:	mov	r1, r0
   11400:	movw	r0, #31159	; 0x79b7
   11404:	movw	r3, #31441	; 0x7ad1
   11408:	cmp	r6, r5
   1140c:	mov	r2, r6
   11410:	movt	r0, #1
   11414:	movt	r3, #1
   11418:	moveq	r3, r0
   1141c:	mov	r0, #1
   11420:	bl	11000 <__printf_chk@plt>
   11424:	mov	r0, r4
   11428:	bl	10fac <exit@plt>
   1142c:	movw	r0, #37192	; 0x9148
   11430:	movw	r1, #29892	; 0x74c4
   11434:	mov	r2, #5
   11438:	movt	r0, #2
   1143c:	movt	r1, #1
   11440:	ldr	r5, [r0]
   11444:	mov	r0, #0
   11448:	bl	10eec <dcgettext@plt>
   1144c:	mov	r2, r0
   11450:	movw	r0, #4760	; 0x1298
   11454:	mov	r1, #1
   11458:	movt	r0, #3
   1145c:	ldr	r3, [r0]
   11460:	mov	r0, r5
   11464:	bl	11018 <__fprintf_chk@plt>
   11468:	mov	r0, r4
   1146c:	bl	10fac <exit@plt>
   11470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11474:	add	fp, sp, #28
   11478:	sub	sp, sp, #36	; 0x24
   1147c:	mov	r4, r0
   11480:	ldr	r0, [r1]
   11484:	mov	r6, r1
   11488:	bl	13590 <__assert_fail@plt+0x24d0>
   1148c:	movw	r8, #31441	; 0x7ad1
   11490:	mov	r0, #6
   11494:	movt	r8, #1
   11498:	mov	r1, r8
   1149c:	bl	11060 <setlocale@plt>
   114a0:	movw	r5, #30912	; 0x78c0
   114a4:	movw	r1, #30769	; 0x7831
   114a8:	movt	r5, #1
   114ac:	movt	r1, #1
   114b0:	mov	r0, r5
   114b4:	bl	1109c <bindtextdomain@plt>
   114b8:	mov	r0, r5
   114bc:	bl	10f04 <textdomain@plt>
   114c0:	movw	r0, #12996	; 0x32c4
   114c4:	movt	r0, #1
   114c8:	bl	1749c <__assert_fail@plt+0x63dc>
   114cc:	movw	r7, #4680	; 0x1248
   114d0:	mov	r0, #75	; 0x4b
   114d4:	mov	sl, #0
   114d8:	cmp	r4, #2
   114dc:	movt	r7, #3
   114e0:	str	r0, [r7, #8]
   114e4:	str	r8, [r7, #12]
   114e8:	mov	r8, r4
   114ec:	str	sl, [r7, #16]
   114f0:	str	sl, [r7, #20]
   114f4:	str	sl, [r7, #24]
   114f8:	str	sl, [r7]
   114fc:	blt	11534 <__assert_fail@plt+0x474>
   11500:	mov	r4, r6
   11504:	ldr	r5, [r4, #4]!
   11508:	ldrb	r0, [r5]
   1150c:	cmp	r0, #45	; 0x2d
   11510:	bne	11534 <__assert_fail@plt+0x474>
   11514:	ldrb	r0, [r5, #1]!
   11518:	sub	r0, r0, #48	; 0x30
   1151c:	cmp	r0, #9
   11520:	bhi	11534 <__assert_fail@plt+0x474>
   11524:	ldr	r0, [r6]
   11528:	sub	r8, r8, #1
   1152c:	str	r0, [r6, #4]
   11530:	b	1153c <__assert_fail@plt+0x47c>
   11534:	mov	r4, r6
   11538:	mov	r5, #0
   1153c:	movw	r9, #31608	; 0x7b78
   11540:	mov	r0, #0
   11544:	str	r8, [sp, #28]
   11548:	movt	r9, #1
   1154c:	str	r0, [sp, #32]
   11550:	movw	r2, #30793	; 0x7849
   11554:	mov	r0, r8
   11558:	mov	r1, r4
   1155c:	mov	r3, r9
   11560:	str	sl, [sp]
   11564:	movt	r2, #1
   11568:	bl	10f94 <getopt_long@plt>
   1156c:	mov	r6, r0
   11570:	cmp	r0, #98	; 0x62
   11574:	ble	116c4 <__assert_fail@plt+0x604>
   11578:	sub	r0, r6, #99	; 0x63
   1157c:	cmp	r0, #20
   11580:	bhi	11994 <__assert_fail@plt+0x8d4>
   11584:	add	r1, pc, #0
   11588:	ldr	pc, [r1, r0, lsl #2]
   1158c:	andeq	r1, r1, r0, ror #11
   11590:	muleq	r1, r4, r9
   11594:	muleq	r1, r4, r9
   11598:	muleq	r1, r4, r9
   1159c:	andeq	r1, r1, r0, asr #12
   115a0:	muleq	r1, r4, r9
   115a4:	muleq	r1, r4, r9
   115a8:	muleq	r1, r4, r9
   115ac:	muleq	r1, r4, r9
   115b0:	muleq	r1, r4, r9
   115b4:	muleq	r1, r4, r9
   115b8:	muleq	r1, r4, r9
   115bc:	muleq	r1, r4, r9
   115c0:	strdeq	r1, [r1], -r8
   115c4:	muleq	r1, r4, r9
   115c8:	muleq	r1, r4, r9
   115cc:	andeq	r1, r1, ip, ror #11
   115d0:	andeq	r1, r1, r0, ror r6
   115d4:	andeq	r1, r1, r4, asr r6
   115d8:	muleq	r1, r4, r9
   115dc:	andeq	r1, r1, r0, ror #12
   115e0:	mov	r0, #1
   115e4:	strb	r0, [r7, #3]
   115e8:	b	11550 <__assert_fail@plt+0x490>
   115ec:	mov	r0, #1
   115f0:	strb	r0, [r7, #1]
   115f4:	b	11550 <__assert_fail@plt+0x490>
   115f8:	movw	r0, #37208	; 0x9158
   115fc:	str	sl, [r7, #20]
   11600:	mov	r6, r7
   11604:	movt	r0, #2
   11608:	ldr	r8, [r0]
   1160c:	ldrb	r0, [r8]
   11610:	cmp	r0, #32
   11614:	bne	1167c <__assert_fail@plt+0x5bc>
   11618:	mov	r0, #0
   1161c:	add	r1, r8, r0
   11620:	add	r0, r0, #1
   11624:	ldrb	r1, [r1, #1]
   11628:	cmp	r1, #32
   1162c:	beq	1161c <__assert_fail@plt+0x55c>
   11630:	mov	r7, r6
   11634:	add	r8, r8, r0
   11638:	str	r0, [r6, #20]
   1163c:	b	11680 <__assert_fail@plt+0x5c0>
   11640:	movw	r0, #37208	; 0x9158
   11644:	movt	r0, #2
   11648:	ldr	r0, [r0]
   1164c:	str	r0, [sp, #32]
   11650:	b	11550 <__assert_fail@plt+0x490>
   11654:	mov	r0, #1
   11658:	strb	r0, [r7]
   1165c:	b	11550 <__assert_fail@plt+0x490>
   11660:	movw	r0, #37208	; 0x9158
   11664:	movt	r0, #2
   11668:	ldr	r5, [r0]
   1166c:	b	11550 <__assert_fail@plt+0x490>
   11670:	mov	r0, #1
   11674:	strb	r0, [r7, #2]
   11678:	b	11550 <__assert_fail@plt+0x490>
   1167c:	mov	r7, r6
   11680:	mov	r0, r8
   11684:	str	r8, [r7, #12]
   11688:	bl	10fc4 <strlen@plt>
   1168c:	add	r1, r8, r0
   11690:	str	r0, [r7, #16]
   11694:	mov	r0, r1
   11698:	cmp	r1, r8
   1169c:	bls	116b0 <__assert_fail@plt+0x5f0>
   116a0:	mov	r1, r0
   116a4:	ldrb	r2, [r1, #-1]!
   116a8:	cmp	r2, #32
   116ac:	beq	11694 <__assert_fail@plt+0x5d4>
   116b0:	strb	sl, [r0], -r8
   116b4:	ldr	r8, [sp, #28]
   116b8:	mov	r7, r6
   116bc:	str	r0, [r6, #24]
   116c0:	b	11550 <__assert_fail@plt+0x490>
   116c4:	cmn	r6, #1
   116c8:	bne	11934 <__assert_fail@plt+0x874>
   116cc:	movw	r9, #31441	; 0x7ad1
   116d0:	cmp	r5, #0
   116d4:	movt	r9, #1
   116d8:	beq	11784 <__assert_fail@plt+0x6c4>
   116dc:	movw	r1, #30936	; 0x78d8
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	mov	r6, #0
   116ec:	movt	r1, #1
   116f0:	bl	10eec <dcgettext@plt>
   116f4:	movw	r1, #2500	; 0x9c4
   116f8:	mov	r2, #0
   116fc:	mov	r3, #0
   11700:	stm	sp, {r1, r6, r9}
   11704:	str	r0, [sp, #12]
   11708:	mov	r0, r5
   1170c:	str	r6, [sp, #16]
   11710:	bl	162a0 <__assert_fail@plt+0x51e0>
   11714:	mov	r6, r0
   11718:	str	r0, [r7, #8]
   1171c:	ldr	r0, [sp, #32]
   11720:	cmp	r0, #0
   11724:	beq	11794 <__assert_fail@plt+0x6d4>
   11728:	movw	r1, #30936	; 0x78d8
   1172c:	mov	sl, r5
   11730:	mov	r5, r0
   11734:	mov	r0, #0
   11738:	mov	r2, #5
   1173c:	mov	r8, #0
   11740:	movt	r1, #1
   11744:	bl	10eec <dcgettext@plt>
   11748:	asr	r1, r6, #31
   1174c:	str	r6, [sp]
   11750:	mov	r2, #0
   11754:	mov	r3, #0
   11758:	stmib	sp, {r1, r9}
   1175c:	str	r8, [sp, #16]
   11760:	ldr	r8, [sp, #28]
   11764:	str	r0, [sp, #12]
   11768:	mov	r0, r5
   1176c:	bl	162a0 <__assert_fail@plt+0x51e0>
   11770:	cmp	sl, #0
   11774:	str	r0, [r7, #28]
   11778:	addeq	r0, r0, #10
   1177c:	streq	r0, [r7, #8]
   11780:	b	117b4 <__assert_fail@plt+0x6f4>
   11784:	ldr	r6, [r7, #8]
   11788:	ldr	r0, [sp, #32]
   1178c:	cmp	r0, #0
   11790:	bne	11728 <__assert_fail@plt+0x668>
   11794:	mov	r0, #187	; 0xbb
   11798:	movw	r1, #34079	; 0x851f
   1179c:	mul	r0, r6, r0
   117a0:	movt	r1, #20971	; 0x51eb
   117a4:	smmul	r0, r0, r1
   117a8:	asr	r1, r0, #6
   117ac:	add	r0, r1, r0, lsr #31
   117b0:	str	r0, [r7, #28]
   117b4:	movw	r5, #37184	; 0x9140
   117b8:	movt	r5, #2
   117bc:	ldr	r0, [r5]
   117c0:	cmp	r0, r8
   117c4:	bne	11830 <__assert_fail@plt+0x770>
   117c8:	movw	r0, #37200	; 0x9150
   117cc:	movw	r1, #31924	; 0x7cb4
   117d0:	movt	r0, #2
   117d4:	movt	r1, #1
   117d8:	ldr	r0, [r0]
   117dc:	bl	119d0 <__assert_fail@plt+0x910>
   117e0:	mov	r6, r0
   117e4:	movw	r0, #37200	; 0x9150
   117e8:	movt	r0, #2
   117ec:	ldr	r0, [r0]
   117f0:	bl	133f0 <__assert_fail@plt+0x2330>
   117f4:	cmp	r0, #0
   117f8:	beq	11928 <__assert_fail@plt+0x868>
   117fc:	bl	10fdc <__errno_location@plt>
   11800:	movw	r1, #30977	; 0x7901
   11804:	ldr	r4, [r0]
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	movt	r1, #1
   11814:	bl	10eec <dcgettext@plt>
   11818:	movw	r2, #31855	; 0x7c6f
   1181c:	mov	r3, r0
   11820:	mov	r0, #1
   11824:	mov	r1, r4
   11828:	movt	r2, #1
   1182c:	bl	10f58 <error@plt>
   11830:	mov	r6, #1
   11834:	bge	11928 <__assert_fail@plt+0x868>
   11838:	movw	sl, #31533	; 0x7b2d
   1183c:	str	r4, [sp, #32]
   11840:	movw	r4, #31924	; 0x7cb4
   11844:	mov	r1, #0
   11848:	mov	r6, #1
   1184c:	movt	r4, #1
   11850:	movt	sl, #1
   11854:	str	r1, [sp, #24]
   11858:	b	11890 <__assert_fail@plt+0x7d0>
   1185c:	movw	r0, #37200	; 0x9150
   11860:	mov	r1, r7
   11864:	movt	r0, #2
   11868:	ldr	r0, [r0]
   1186c:	bl	119d0 <__assert_fail@plt+0x910>
   11870:	and	r6, r6, r0
   11874:	mov	r0, #1
   11878:	str	r0, [sp, #24]
   1187c:	ldr	r0, [r5]
   11880:	add	r0, r0, #1
   11884:	cmp	r0, r8
   11888:	str	r0, [r5]
   1188c:	bge	1191c <__assert_fail@plt+0x85c>
   11890:	ldr	r1, [sp, #32]
   11894:	ldr	r7, [r1, r0, lsl #2]
   11898:	mov	r1, r4
   1189c:	mov	r0, r7
   118a0:	bl	10e74 <strcmp@plt>
   118a4:	cmp	r0, #0
   118a8:	beq	1185c <__assert_fail@plt+0x79c>
   118ac:	mov	r0, r7
   118b0:	mov	r1, sl
   118b4:	bl	11090 <fopen64@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	118d0 <__assert_fail@plt+0x810>
   118c0:	mov	r1, r7
   118c4:	bl	119d0 <__assert_fail@plt+0x910>
   118c8:	and	r6, r6, r0
   118cc:	b	1187c <__assert_fail@plt+0x7bc>
   118d0:	bl	10fdc <__errno_location@plt>
   118d4:	movw	r1, #30950	; 0x78e6
   118d8:	ldr	r9, [r0]
   118dc:	mov	r0, #0
   118e0:	mov	r2, #5
   118e4:	mov	r6, #0
   118e8:	movt	r1, #1
   118ec:	bl	10eec <dcgettext@plt>
   118f0:	mov	r8, r0
   118f4:	mov	r0, #4
   118f8:	mov	r1, r7
   118fc:	bl	1502c <__assert_fail@plt+0x3f6c>
   11900:	mov	r2, r8
   11904:	ldr	r8, [sp, #28]
   11908:	mov	r3, r0
   1190c:	mov	r0, #0
   11910:	mov	r1, r9
   11914:	bl	10f58 <error@plt>
   11918:	b	1187c <__assert_fail@plt+0x7bc>
   1191c:	ldr	r0, [sp, #24]
   11920:	tst	r0, #1
   11924:	bne	117e4 <__assert_fail@plt+0x724>
   11928:	eor	r0, r6, #1
   1192c:	sub	sp, fp, #28
   11930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11934:	cmn	r6, #3
   11938:	bne	11984 <__assert_fail@plt+0x8c4>
   1193c:	movw	r0, #37104	; 0x90f0
   11940:	movw	r2, #30922	; 0x78ca
   11944:	mov	r1, #0
   11948:	movt	r0, #2
   1194c:	movt	r2, #1
   11950:	str	r1, [sp, #4]
   11954:	movw	r1, #30765	; 0x782d
   11958:	movt	r1, #1
   1195c:	ldr	r3, [r0]
   11960:	movw	r0, #37204	; 0x9154
   11964:	str	r2, [sp]
   11968:	movw	r2, #30908	; 0x78bc
   1196c:	movt	r0, #2
   11970:	movt	r2, #1
   11974:	ldr	r0, [r0]
   11978:	bl	159f8 <__assert_fail@plt+0x4938>
   1197c:	mov	r0, #0
   11980:	bl	10fac <exit@plt>
   11984:	cmn	r6, #2
   11988:	bne	11994 <__assert_fail@plt+0x8d4>
   1198c:	mov	r0, #0
   11990:	bl	111bc <__assert_fail@plt+0xfc>
   11994:	sub	r0, r6, #48	; 0x30
   11998:	cmp	r0, #9
   1199c:	bhi	119c8 <__assert_fail@plt+0x908>
   119a0:	movw	r1, #30814	; 0x785e
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	10eec <dcgettext@plt>
   119b4:	mov	r2, r0
   119b8:	mov	r0, #0
   119bc:	mov	r1, #0
   119c0:	mov	r3, r6
   119c4:	bl	10f58 <error@plt>
   119c8:	mov	r0, #1
   119cc:	bl	111bc <__assert_fail@plt+0xfc>
   119d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	add	fp, sp, #28
   119d8:	push	{r1}		; (str r1, [sp, #-4]!)
   119dc:	mov	r1, #2
   119e0:	mov	r5, r0
   119e4:	bl	133b4 <__assert_fail@plt+0x22f4>
   119e8:	movw	r9, #4680	; 0x1248
   119ec:	mov	r0, #0
   119f0:	movt	r9, #3
   119f4:	str	r0, [r9, #44]	; 0x2c
   119f8:	str	r0, [r9, #32]
   119fc:	strb	r0, [r9, #4]
   11a00:	ldmib	r5, {r0, r1}
   11a04:	cmp	r0, r1
   11a08:	bcs	11a28 <__assert_fail@plt+0x968>
   11a0c:	add	r1, r0, #1
   11a10:	str	r1, [r5, #4]
   11a14:	ldrb	r7, [r0]
   11a18:	mov	r4, #1
   11a1c:	cmp	r7, #9
   11a20:	bne	11aac <__assert_fail@plt+0x9ec>
   11a24:	b	11a70 <__assert_fail@plt+0x9b0>
   11a28:	mov	r0, r5
   11a2c:	bl	11048 <__uflow@plt>
   11a30:	mov	r7, r0
   11a34:	mov	r4, #1
   11a38:	cmp	r7, #9
   11a3c:	bne	11aac <__assert_fail@plt+0x9ec>
   11a40:	b	11a70 <__assert_fail@plt+0x9b0>
   11a44:	ldr	r0, [r9, #44]	; 0x2c
   11a48:	add	r0, r0, #1
   11a4c:	str	r0, [r9, #44]	; 0x2c
   11a50:	ldmib	r5, {r0, r1}
   11a54:	cmp	r0, r1
   11a58:	bcs	11a98 <__assert_fail@plt+0x9d8>
   11a5c:	add	r1, r0, #1
   11a60:	str	r1, [r5, #4]
   11a64:	ldrb	r7, [r0]
   11a68:	cmp	r7, #9
   11a6c:	bne	11aac <__assert_fail@plt+0x9ec>
   11a70:	strb	r4, [r9, #4]
   11a74:	ldr	r0, [r9, #44]	; 0x2c
   11a78:	asr	r1, r0, #31
   11a7c:	add	r0, r0, r1, lsr #29
   11a80:	bic	r0, r0, #7
   11a84:	add	r0, r0, #8
   11a88:	str	r0, [r9, #44]	; 0x2c
   11a8c:	ldmib	r5, {r0, r1}
   11a90:	cmp	r0, r1
   11a94:	bcc	11a5c <__assert_fail@plt+0x99c>
   11a98:	mov	r0, r5
   11a9c:	bl	11048 <__uflow@plt>
   11aa0:	mov	r7, r0
   11aa4:	cmp	r7, #9
   11aa8:	beq	11a70 <__assert_fail@plt+0x9b0>
   11aac:	cmp	r7, #32
   11ab0:	beq	11a44 <__assert_fail@plt+0x984>
   11ab4:	ldr	r0, [r9, #24]
   11ab8:	cmp	r0, #0
   11abc:	beq	11bb8 <__assert_fail@plt+0xaf8>
   11ac0:	ldr	r0, [r9, #44]	; 0x2c
   11ac4:	ldr	r1, [r9, #12]
   11ac8:	str	r0, [r9, #48]	; 0x30
   11acc:	ldrb	r0, [r1]
   11ad0:	cmp	r0, #0
   11ad4:	beq	11b34 <__assert_fail@plt+0xa74>
   11ad8:	add	r4, r1, #1
   11adc:	uxtb	r0, r0
   11ae0:	cmp	r7, r0
   11ae4:	bne	11bcc <__assert_fail@plt+0xb0c>
   11ae8:	ldr	r0, [r9, #44]	; 0x2c
   11aec:	add	r0, r0, #1
   11af0:	str	r0, [r9, #44]	; 0x2c
   11af4:	ldmib	r5, {r0, r1}
   11af8:	cmp	r0, r1
   11afc:	bcs	11b1c <__assert_fail@plt+0xa5c>
   11b00:	add	r1, r0, #1
   11b04:	str	r1, [r5, #4]
   11b08:	ldrb	r7, [r0]
   11b0c:	ldrb	r0, [r4], #1
   11b10:	cmp	r0, #0
   11b14:	bne	11adc <__assert_fail@plt+0xa1c>
   11b18:	b	11b34 <__assert_fail@plt+0xa74>
   11b1c:	mov	r0, r5
   11b20:	bl	11048 <__uflow@plt>
   11b24:	mov	r7, r0
   11b28:	ldrb	r0, [r4], #1
   11b2c:	cmp	r0, #0
   11b30:	bne	11adc <__assert_fail@plt+0xa1c>
   11b34:	mov	r4, #1
   11b38:	cmp	r7, #9
   11b3c:	bne	11bac <__assert_fail@plt+0xaec>
   11b40:	b	11b70 <__assert_fail@plt+0xab0>
   11b44:	ldr	r0, [r9, #44]	; 0x2c
   11b48:	add	r0, r0, #1
   11b4c:	str	r0, [r9, #44]	; 0x2c
   11b50:	ldmib	r5, {r0, r1}
   11b54:	cmp	r0, r1
   11b58:	bcs	11b98 <__assert_fail@plt+0xad8>
   11b5c:	add	r1, r0, #1
   11b60:	str	r1, [r5, #4]
   11b64:	ldrb	r7, [r0]
   11b68:	cmp	r7, #9
   11b6c:	bne	11bac <__assert_fail@plt+0xaec>
   11b70:	strb	r4, [r9, #4]
   11b74:	ldr	r0, [r9, #44]	; 0x2c
   11b78:	asr	r1, r0, #31
   11b7c:	add	r0, r0, r1, lsr #29
   11b80:	bic	r0, r0, #7
   11b84:	add	r0, r0, #8
   11b88:	str	r0, [r9, #44]	; 0x2c
   11b8c:	ldmib	r5, {r0, r1}
   11b90:	cmp	r0, r1
   11b94:	bcc	11b5c <__assert_fail@plt+0xa9c>
   11b98:	mov	r0, r5
   11b9c:	bl	11048 <__uflow@plt>
   11ba0:	mov	r7, r0
   11ba4:	cmp	r7, #9
   11ba8:	beq	11b70 <__assert_fail@plt+0xab0>
   11bac:	cmp	r7, #32
   11bb0:	beq	11b44 <__assert_fail@plt+0xa84>
   11bb4:	b	11bcc <__assert_fail@plt+0xb0c>
   11bb8:	ldr	r0, [r9, #20]
   11bbc:	ldr	r1, [r9, #44]	; 0x2c
   11bc0:	cmp	r0, r1
   11bc4:	movlt	r1, r0
   11bc8:	str	r1, [r9, #48]	; 0x30
   11bcc:	movw	sl, #37204	; 0x9154
   11bd0:	mov	ip, #0
   11bd4:	str	r7, [r9, #36]	; 0x24
   11bd8:	movt	sl, #2
   11bdc:	mov	lr, #9
   11be0:	str	ip, [r9, #52]	; 0x34
   11be4:	cmn	r7, #1
   11be8:	cmpne	r7, #10
   11bec:	bne	120a4 <__assert_fail@plt+0xfe4>
   11bf0:	ldr	r4, [r9, #48]	; 0x30
   11bf4:	str	ip, [r9, #68]	; 0x44
   11bf8:	ldr	r0, [r9, #44]	; 0x2c
   11bfc:	cmp	r0, r4
   11c00:	bgt	11c10 <__assert_fail@plt+0xb50>
   11c04:	cmn	r7, #1
   11c08:	cmpne	r7, #10
   11c0c:	beq	11eb8 <__assert_fail@plt+0xdf8>
   11c10:	ldrb	r0, [r9, #4]
   11c14:	mov	r2, #0
   11c18:	cmp	r0, #1
   11c1c:	bne	11c94 <__assert_fail@plt+0xbd4>
   11c20:	cmp	r4, #8
   11c24:	mov	r6, #32
   11c28:	blt	11c98 <__assert_fail@plt+0xbd8>
   11c2c:	asr	r0, r4, #31
   11c30:	mov	r2, #0
   11c34:	add	r0, r4, r0, lsr #29
   11c38:	bic	r8, r0, #7
   11c3c:	ldr	r0, [sl]
   11c40:	ldr	r1, [r0, #20]
   11c44:	ldr	r3, [r0, #24]
   11c48:	cmp	r1, r3
   11c4c:	bcs	11c7c <__assert_fail@plt+0xbbc>
   11c50:	add	r3, r1, #1
   11c54:	str	r3, [r0, #20]
   11c58:	strb	lr, [r1]
   11c5c:	asr	r0, r2, #31
   11c60:	add	r0, r2, r0, lsr #29
   11c64:	bic	r0, r0, #7
   11c68:	add	r2, r0, #8
   11c6c:	cmp	r2, r8
   11c70:	str	r2, [r9, #68]	; 0x44
   11c74:	blt	11c3c <__assert_fail@plt+0xb7c>
   11c78:	b	11c98 <__assert_fail@plt+0xbd8>
   11c7c:	mov	r1, #9
   11c80:	bl	11054 <__overflow@plt>
   11c84:	ldr	r2, [r9, #68]	; 0x44
   11c88:	mov	lr, #9
   11c8c:	mov	ip, #0
   11c90:	b	11c5c <__assert_fail@plt+0xb9c>
   11c94:	mov	r6, #32
   11c98:	cmp	r2, r4
   11c9c:	bge	11cf8 <__assert_fail@plt+0xc38>
   11ca0:	ldr	r0, [sl]
   11ca4:	ldr	r1, [r0, #20]
   11ca8:	ldr	r3, [r0, #24]
   11cac:	cmp	r1, r3
   11cb0:	bcs	11cd4 <__assert_fail@plt+0xc14>
   11cb4:	add	r3, r1, #1
   11cb8:	str	r3, [r0, #20]
   11cbc:	strb	r6, [r1]
   11cc0:	add	r2, r2, #1
   11cc4:	str	r2, [r9, #68]	; 0x44
   11cc8:	cmp	r2, r4
   11ccc:	blt	11ca0 <__assert_fail@plt+0xbe0>
   11cd0:	b	11cf8 <__assert_fail@plt+0xc38>
   11cd4:	mov	r1, #32
   11cd8:	bl	11054 <__overflow@plt>
   11cdc:	ldr	r2, [r9, #68]	; 0x44
   11ce0:	mov	lr, #9
   11ce4:	mov	ip, #0
   11ce8:	add	r2, r2, #1
   11cec:	str	r2, [r9, #68]	; 0x44
   11cf0:	cmp	r2, r4
   11cf4:	blt	11ca0 <__assert_fail@plt+0xbe0>
   11cf8:	ldr	r8, [r9, #44]	; 0x2c
   11cfc:	cmp	r2, r8
   11d00:	bne	11d50 <__assert_fail@plt+0xc90>
   11d04:	mov	r1, r2
   11d08:	mov	r8, r2
   11d0c:	cmn	r7, #1
   11d10:	bne	11dc0 <__assert_fail@plt+0xd00>
   11d14:	ldr	r0, [r9, #24]
   11d18:	ldr	r1, [r9, #48]	; 0x30
   11d1c:	add	r0, r0, r1
   11d20:	cmp	r8, r0
   11d24:	blt	11eb8 <__assert_fail@plt+0xdf8>
   11d28:	ldr	r0, [sl]
   11d2c:	ldr	r1, [r0, #20]
   11d30:	ldr	r2, [r0, #24]
   11d34:	cmp	r1, r2
   11d38:	bcs	11e9c <__assert_fail@plt+0xddc>
   11d3c:	add	r2, r1, #1
   11d40:	str	r2, [r0, #20]
   11d44:	mov	r0, #10
   11d48:	strb	r0, [r1]
   11d4c:	b	11eb8 <__assert_fail@plt+0xdf8>
   11d50:	ldr	r4, [r9, #12]
   11d54:	ldrb	r1, [r4]
   11d58:	cmp	r1, #0
   11d5c:	beq	11db4 <__assert_fail@plt+0xcf4>
   11d60:	ldr	r0, [sl]
   11d64:	ldr	r3, [r0, #20]
   11d68:	ldr	r6, [r0, #24]
   11d6c:	cmp	r3, r6
   11d70:	bcs	11d9c <__assert_fail@plt+0xcdc>
   11d74:	add	r6, r3, #1
   11d78:	str	r6, [r0, #20]
   11d7c:	strb	r1, [r3]
   11d80:	add	r2, r2, #1
   11d84:	add	r4, r4, #1
   11d88:	mov	r1, r8
   11d8c:	cmp	r2, r8
   11d90:	str	r2, [r9, #68]	; 0x44
   11d94:	bne	11d54 <__assert_fail@plt+0xc94>
   11d98:	b	11db8 <__assert_fail@plt+0xcf8>
   11d9c:	bl	11054 <__overflow@plt>
   11da0:	ldr	r8, [r9, #44]	; 0x2c
   11da4:	ldr	r2, [r9, #68]	; 0x44
   11da8:	mov	lr, #9
   11dac:	mov	ip, #0
   11db0:	b	11d80 <__assert_fail@plt+0xcc0>
   11db4:	mov	r1, r2
   11db8:	cmn	r7, #1
   11dbc:	beq	11d14 <__assert_fail@plt+0xc54>
   11dc0:	cmp	r7, #10
   11dc4:	beq	11eb8 <__assert_fail@plt+0xdf8>
   11dc8:	ldrb	r0, [r9, #4]
   11dcc:	cmp	r0, #1
   11dd0:	bne	11e4c <__assert_fail@plt+0xd8c>
   11dd4:	asr	r0, r8, #31
   11dd8:	add	r0, r8, r0, lsr #29
   11ddc:	bic	r4, r0, #7
   11de0:	add	r0, r1, #1
   11de4:	cmp	r0, r4
   11de8:	bge	11e4c <__assert_fail@plt+0xd8c>
   11dec:	cmp	r1, r4
   11df0:	bge	11e4c <__assert_fail@plt+0xd8c>
   11df4:	ldr	r0, [sl]
   11df8:	ldr	r2, [r0, #20]
   11dfc:	ldr	r3, [r0, #24]
   11e00:	cmp	r2, r3
   11e04:	bcs	11e34 <__assert_fail@plt+0xd74>
   11e08:	add	r3, r2, #1
   11e0c:	str	r3, [r0, #20]
   11e10:	strb	lr, [r2]
   11e14:	asr	r0, r1, #31
   11e18:	add	r0, r1, r0, lsr #29
   11e1c:	bic	r0, r0, #7
   11e20:	add	r1, r0, #8
   11e24:	str	r1, [r9, #68]	; 0x44
   11e28:	cmp	r1, r4
   11e2c:	blt	11df4 <__assert_fail@plt+0xd34>
   11e30:	b	11e4c <__assert_fail@plt+0xd8c>
   11e34:	mov	r1, #9
   11e38:	bl	11054 <__overflow@plt>
   11e3c:	ldr	r1, [r9, #68]	; 0x44
   11e40:	mov	lr, #9
   11e44:	mov	ip, #0
   11e48:	b	11e14 <__assert_fail@plt+0xd54>
   11e4c:	cmp	r1, r8
   11e50:	bge	11eb8 <__assert_fail@plt+0xdf8>
   11e54:	ldr	r0, [sl]
   11e58:	ldr	r2, [r0, #20]
   11e5c:	ldr	r3, [r0, #24]
   11e60:	cmp	r2, r3
   11e64:	bcs	11e84 <__assert_fail@plt+0xdc4>
   11e68:	add	r3, r2, #1
   11e6c:	str	r3, [r0, #20]
   11e70:	mov	r0, #32
   11e74:	strb	r0, [r2]
   11e78:	add	r1, r1, #1
   11e7c:	str	r1, [r9, #68]	; 0x44
   11e80:	b	11e4c <__assert_fail@plt+0xd8c>
   11e84:	mov	r1, #32
   11e88:	bl	11054 <__overflow@plt>
   11e8c:	ldr	r1, [r9, #68]	; 0x44
   11e90:	mov	lr, #9
   11e94:	mov	ip, #0
   11e98:	b	11e78 <__assert_fail@plt+0xdb8>
   11e9c:	mov	r1, #10
   11ea0:	bl	11054 <__overflow@plt>
   11ea4:	mov	lr, #9
   11ea8:	mov	ip, #0
   11eac:	cmn	r7, #1
   11eb0:	bne	11ec0 <__assert_fail@plt+0xe00>
   11eb4:	b	12430 <__assert_fail@plt+0x1370>
   11eb8:	cmn	r7, #1
   11ebc:	beq	12430 <__assert_fail@plt+0x1370>
   11ec0:	cmp	r7, #10
   11ec4:	beq	11f48 <__assert_fail@plt+0xe88>
   11ec8:	ldr	r0, [sl]
   11ecc:	ldr	r1, [r0, #20]
   11ed0:	ldr	r2, [r0, #24]
   11ed4:	cmp	r1, r2
   11ed8:	bcs	11f0c <__assert_fail@plt+0xe4c>
   11edc:	add	r2, r1, #1
   11ee0:	str	r2, [r0, #20]
   11ee4:	strb	r7, [r1]
   11ee8:	ldmib	r5, {r0, r1}
   11eec:	cmp	r0, r1
   11ef0:	bcs	11f28 <__assert_fail@plt+0xe68>
   11ef4:	add	r1, r0, #1
   11ef8:	str	r1, [r5, #4]
   11efc:	ldrb	r7, [r0]
   11f00:	cmn	r7, #1
   11f04:	bne	11ec0 <__assert_fail@plt+0xe00>
   11f08:	b	12430 <__assert_fail@plt+0x1370>
   11f0c:	uxtb	r1, r7
   11f10:	bl	11054 <__overflow@plt>
   11f14:	mov	lr, #9
   11f18:	mov	ip, #0
   11f1c:	ldmib	r5, {r0, r1}
   11f20:	cmp	r0, r1
   11f24:	bcc	11ef4 <__assert_fail@plt+0xe34>
   11f28:	mov	r0, r5
   11f2c:	bl	11048 <__uflow@plt>
   11f30:	mov	lr, #9
   11f34:	mov	ip, #0
   11f38:	mov	r7, r0
   11f3c:	cmn	r7, #1
   11f40:	bne	11ec0 <__assert_fail@plt+0xe00>
   11f44:	b	12430 <__assert_fail@plt+0x1370>
   11f48:	ldr	r0, [sl]
   11f4c:	mov	r6, #1
   11f50:	ldr	r1, [r0, #20]
   11f54:	ldr	r2, [r0, #24]
   11f58:	cmp	r1, r2
   11f5c:	bcs	1214c <__assert_fail@plt+0x108c>
   11f60:	add	r2, r1, #1
   11f64:	str	r2, [r0, #20]
   11f68:	mov	r0, #10
   11f6c:	strb	r0, [r1]
   11f70:	str	ip, [r9, #44]	; 0x2c
   11f74:	ldr	r0, [r5, #4]
   11f78:	ldr	r1, [r5, #8]
   11f7c:	cmp	r0, r1
   11f80:	bcc	11fdc <__assert_fail@plt+0xf1c>
   11f84:	b	11fa4 <__assert_fail@plt+0xee4>
   11f88:	ldr	r0, [r9, #44]	; 0x2c
   11f8c:	add	r0, r0, #1
   11f90:	str	r0, [r9, #44]	; 0x2c
   11f94:	ldr	r0, [r5, #4]
   11f98:	ldr	r1, [r5, #8]
   11f9c:	cmp	r0, r1
   11fa0:	bcc	11fdc <__assert_fail@plt+0xf1c>
   11fa4:	mov	r0, r5
   11fa8:	bl	11048 <__uflow@plt>
   11fac:	mov	lr, #9
   11fb0:	mov	ip, #0
   11fb4:	mov	r7, r0
   11fb8:	cmp	r7, #9
   11fbc:	bne	11ff0 <__assert_fail@plt+0xf30>
   11fc0:	strb	r6, [r9, #4]
   11fc4:	ldr	r0, [r9, #44]	; 0x2c
   11fc8:	asr	r1, r0, #31
   11fcc:	add	r0, r0, r1, lsr #29
   11fd0:	bic	r0, r0, #7
   11fd4:	add	r0, r0, #8
   11fd8:	b	11f90 <__assert_fail@plt+0xed0>
   11fdc:	add	r1, r0, #1
   11fe0:	str	r1, [r5, #4]
   11fe4:	ldrb	r7, [r0]
   11fe8:	cmp	r7, #9
   11fec:	beq	11fc0 <__assert_fail@plt+0xf00>
   11ff0:	cmp	r7, #32
   11ff4:	beq	11f88 <__assert_fail@plt+0xec8>
   11ff8:	ldr	r0, [r9, #24]
   11ffc:	cmp	r0, #0
   12000:	beq	12084 <__assert_fail@plt+0xfc4>
   12004:	ldr	r0, [r9, #44]	; 0x2c
   12008:	ldr	r1, [r9, #12]
   1200c:	str	r0, [r9, #48]	; 0x30
   12010:	ldrb	r0, [r1]
   12014:	cmp	r0, #0
   12018:	beq	120e0 <__assert_fail@plt+0x1020>
   1201c:	add	r4, r1, #1
   12020:	uxtb	r0, r0
   12024:	cmp	r7, r0
   12028:	bne	11be4 <__assert_fail@plt+0xb24>
   1202c:	ldr	r0, [r9, #44]	; 0x2c
   12030:	add	r0, r0, #1
   12034:	str	r0, [r9, #44]	; 0x2c
   12038:	ldmib	r5, {r0, r1}
   1203c:	cmp	r0, r1
   12040:	bcs	12060 <__assert_fail@plt+0xfa0>
   12044:	add	r1, r0, #1
   12048:	str	r1, [r5, #4]
   1204c:	ldrb	r7, [r0]
   12050:	ldrb	r0, [r4], #1
   12054:	cmp	r0, #0
   12058:	bne	12020 <__assert_fail@plt+0xf60>
   1205c:	b	120e0 <__assert_fail@plt+0x1020>
   12060:	mov	r0, r5
   12064:	bl	11048 <__uflow@plt>
   12068:	mov	lr, #9
   1206c:	mov	ip, #0
   12070:	mov	r7, r0
   12074:	ldrb	r0, [r4], #1
   12078:	cmp	r0, #0
   1207c:	bne	12020 <__assert_fail@plt+0xf60>
   12080:	b	120e0 <__assert_fail@plt+0x1020>
   12084:	ldr	r0, [r9, #20]
   12088:	ldr	r1, [r9, #44]	; 0x2c
   1208c:	cmp	r0, r1
   12090:	movlt	r1, r0
   12094:	str	r1, [r9, #48]	; 0x30
   12098:	cmn	r7, #1
   1209c:	cmpne	r7, #10
   120a0:	beq	11bf0 <__assert_fail@plt+0xb30>
   120a4:	ldr	r0, [r9, #20]
   120a8:	ldr	r4, [r9, #48]	; 0x30
   120ac:	cmp	r4, r0
   120b0:	blt	11bf4 <__assert_fail@plt+0xb34>
   120b4:	ldr	r1, [r9, #16]
   120b8:	ldr	r0, [r9, #44]	; 0x2c
   120bc:	add	r1, r1, r4
   120c0:	cmp	r0, r1
   120c4:	blt	11bf0 <__assert_fail@plt+0xb30>
   120c8:	b	12160 <__assert_fail@plt+0x10a0>
   120cc:	mov	r0, r5
   120d0:	bl	11048 <__uflow@plt>
   120d4:	mov	lr, #9
   120d8:	mov	ip, #0
   120dc:	mov	r7, r0
   120e0:	cmp	r7, #9
   120e4:	beq	1210c <__assert_fail@plt+0x104c>
   120e8:	cmp	r7, #32
   120ec:	bne	11be4 <__assert_fail@plt+0xb24>
   120f0:	ldr	r0, [r9, #44]	; 0x2c
   120f4:	add	r0, r0, #1
   120f8:	str	r0, [r9, #44]	; 0x2c
   120fc:	ldmib	r5, {r0, r1}
   12100:	cmp	r0, r1
   12104:	bcc	12134 <__assert_fail@plt+0x1074>
   12108:	b	120cc <__assert_fail@plt+0x100c>
   1210c:	strb	r6, [r9, #4]
   12110:	ldr	r0, [r9, #44]	; 0x2c
   12114:	asr	r1, r0, #31
   12118:	add	r0, r0, r1, lsr #29
   1211c:	bic	r0, r0, #7
   12120:	add	r0, r0, #8
   12124:	str	r0, [r9, #44]	; 0x2c
   12128:	ldmib	r5, {r0, r1}
   1212c:	cmp	r0, r1
   12130:	bcs	120cc <__assert_fail@plt+0x100c>
   12134:	add	r1, r0, #1
   12138:	str	r1, [r5, #4]
   1213c:	ldrb	r7, [r0]
   12140:	cmp	r7, #9
   12144:	bne	120e8 <__assert_fail@plt+0x1028>
   12148:	b	1210c <__assert_fail@plt+0x104c>
   1214c:	mov	r1, #10
   12150:	bl	11054 <__overflow@plt>
   12154:	mov	lr, #9
   12158:	mov	ip, #0
   1215c:	b	11f70 <__assert_fail@plt+0xeb0>
   12160:	str	r4, [r9, #56]	; 0x38
   12164:	str	r0, [r9, #60]	; 0x3c
   12168:	movw	r0, #37216	; 0x9160
   1216c:	mov	r1, r7
   12170:	movt	r0, #2
   12174:	str	r0, [r9, #64]	; 0x40
   12178:	movw	r0, #42216	; 0xa4e8
   1217c:	movt	r0, #2
   12180:	str	r0, [r9, #40]	; 0x28
   12184:	mov	r0, r5
   12188:	bl	127e8 <__assert_fail@plt+0x1728>
   1218c:	mov	r1, r0
   12190:	ldr	r0, [r9, #48]	; 0x30
   12194:	ldr	r2, [r9, #56]	; 0x38
   12198:	mov	r3, #0
   1219c:	cmp	r0, r2
   121a0:	bne	121d8 <__assert_fail@plt+0x1118>
   121a4:	ldr	r7, [r9, #16]
   121a8:	ldr	r6, [r9, #44]	; 0x2c
   121ac:	mvn	r3, #0
   121b0:	subs	r3, r1, r3
   121b4:	movwne	r3, #1
   121b8:	add	r7, r7, r0
   121bc:	cmp	r6, r7
   121c0:	mov	r7, #0
   121c4:	movwge	r7, #1
   121c8:	subs	r6, r1, #10
   121cc:	movwne	r6, #1
   121d0:	and	r7, r6, r7
   121d4:	and	r3, r3, r7
   121d8:	ldrb	r7, [r9, #1]
   121dc:	cmp	r7, #0
   121e0:	beq	12250 <__assert_fail@plt+0x1190>
   121e4:	ldr	r0, [r9, #60]	; 0x3c
   121e8:	str	r0, [r9, #32]
   121ec:	movw	r6, #42216	; 0xa4e8
   121f0:	movt	r6, #2
   121f4:	ldr	r4, [r9, #40]	; 0x28
   121f8:	cmp	r4, r6
   121fc:	bls	124f8 <__assert_fail@plt+0x1438>
   12200:	ldrb	r0, [r4, #-16]
   12204:	orr	r0, r0, #10
   12208:	strb	r0, [r4, #-16]
   1220c:	str	r1, [r9, #36]	; 0x24
   12210:	bl	12518 <__assert_fail@plt+0x1458>
   12214:	ldr	r1, [r9, #60]	; 0x3c
   12218:	mov	r0, r6
   1221c:	bl	12eb4 <__assert_fail@plt+0x1df4>
   12220:	ldr	r7, [r6, #24]
   12224:	cmp	r7, r4
   12228:	beq	12244 <__assert_fail@plt+0x1184>
   1222c:	ldr	r1, [r9, #32]
   12230:	mov	r0, r7
   12234:	bl	12eb4 <__assert_fail@plt+0x1df4>
   12238:	ldr	r7, [r7, #24]
   1223c:	cmp	r7, r4
   12240:	bne	1222c <__assert_fail@plt+0x116c>
   12244:	ldr	r7, [r9, #36]	; 0x24
   12248:	mov	ip, #0
   1224c:	b	11bdc <__assert_fail@plt+0xb1c>
   12250:	ldrb	r7, [r9, #3]
   12254:	cmp	r7, #0
   12258:	beq	122e8 <__assert_fail@plt+0x1228>
   1225c:	ldr	r7, [r9, #44]	; 0x2c
   12260:	cmp	r3, #0
   12264:	ldr	r6, [r9, #60]	; 0x3c
   12268:	movne	r6, r7
   1226c:	cmp	r0, r2
   12270:	str	r6, [r9, #32]
   12274:	bne	121ec <__assert_fail@plt+0x112c>
   12278:	ldr	r2, [r9, #16]
   1227c:	add	r0, r2, r0
   12280:	cmp	r7, r0
   12284:	blt	121ec <__assert_fail@plt+0x112c>
   12288:	movw	r6, #42216	; 0xa4e8
   1228c:	cmn	r1, #1
   12290:	movt	r6, #2
   12294:	cmpne	r1, #10
   12298:	beq	121f4 <__assert_fail@plt+0x1134>
   1229c:	mov	r0, r5
   122a0:	bl	127e8 <__assert_fail@plt+0x1728>
   122a4:	mov	r1, r0
   122a8:	ldr	r2, [r9, #48]	; 0x30
   122ac:	ldr	r0, [r9, #56]	; 0x38
   122b0:	cmp	r2, r0
   122b4:	bne	121f4 <__assert_fail@plt+0x1134>
   122b8:	ldr	r3, [r9, #16]
   122bc:	ldr	r0, [r9, #44]	; 0x2c
   122c0:	add	r2, r3, r2
   122c4:	cmp	r0, r2
   122c8:	blt	121f4 <__assert_fail@plt+0x1134>
   122cc:	cmn	r1, #1
   122d0:	cmpne	r1, #10
   122d4:	beq	121f4 <__assert_fail@plt+0x1134>
   122d8:	ldr	r2, [r9, #32]
   122dc:	cmp	r0, r2
   122e0:	beq	1229c <__assert_fail@plt+0x11dc>
   122e4:	b	121f4 <__assert_fail@plt+0x1134>
   122e8:	ldrb	r7, [r9, #2]
   122ec:	cmp	r7, #1
   122f0:	bne	12314 <__assert_fail@plt+0x1254>
   122f4:	cmp	r3, #0
   122f8:	beq	12378 <__assert_fail@plt+0x12b8>
   122fc:	ldr	r3, [r9, #44]	; 0x2c
   12300:	ldr	r7, [r9, #60]	; 0x3c
   12304:	cmp	r3, r7
   12308:	mov	r6, r3
   1230c:	beq	1237c <__assert_fail@plt+0x12bc>
   12310:	b	12398 <__assert_fail@plt+0x12d8>
   12314:	ldr	r3, [r9, #60]	; 0x3c
   12318:	movw	r6, #42216	; 0xa4e8
   1231c:	cmp	r0, r2
   12320:	movt	r6, #2
   12324:	str	r3, [r9, #32]
   12328:	bne	121f4 <__assert_fail@plt+0x1134>
   1232c:	ldr	r3, [r9, #16]
   12330:	ldr	r2, [r9, #44]	; 0x2c
   12334:	add	r0, r3, r0
   12338:	cmp	r2, r0
   1233c:	blt	121f4 <__assert_fail@plt+0x1134>
   12340:	cmn	r1, #1
   12344:	cmpne	r1, #10
   12348:	beq	121f4 <__assert_fail@plt+0x1134>
   1234c:	ldr	r0, [r9, #32]
   12350:	cmp	r2, r0
   12354:	bne	121f4 <__assert_fail@plt+0x1134>
   12358:	mov	r0, r5
   1235c:	bl	127e8 <__assert_fail@plt+0x1728>
   12360:	mov	r1, r0
   12364:	ldr	r0, [r9, #48]	; 0x30
   12368:	ldr	r2, [r9, #56]	; 0x38
   1236c:	cmp	r0, r2
   12370:	beq	1232c <__assert_fail@plt+0x126c>
   12374:	b	121f4 <__assert_fail@plt+0x1134>
   12378:	ldr	r3, [r9, #60]	; 0x3c
   1237c:	ldr	r7, [r9, #32]
   12380:	cmp	r7, r3
   12384:	bne	123a8 <__assert_fail@plt+0x12e8>
   12388:	cmp	r3, #0
   1238c:	mov	r6, #0
   12390:	mov	r7, r3
   12394:	movweq	r6, #3
   12398:	str	r6, [r9, #32]
   1239c:	cmp	r0, r2
   123a0:	bne	121ec <__assert_fail@plt+0x112c>
   123a4:	b	123b4 <__assert_fail@plt+0x12f4>
   123a8:	mov	r7, r3
   123ac:	cmp	r0, r2
   123b0:	bne	121ec <__assert_fail@plt+0x112c>
   123b4:	ldr	r3, [r9, #16]
   123b8:	ldr	r2, [r9, #44]	; 0x2c
   123bc:	movw	r6, #42216	; 0xa4e8
   123c0:	movt	r6, #2
   123c4:	add	r0, r3, r0
   123c8:	cmp	r2, r0
   123cc:	blt	121f4 <__assert_fail@plt+0x1134>
   123d0:	cmn	r1, #1
   123d4:	beq	121f4 <__assert_fail@plt+0x1134>
   123d8:	cmp	r1, #10
   123dc:	cmpne	r2, r7
   123e0:	beq	121f4 <__assert_fail@plt+0x1134>
   123e4:	mov	r0, r5
   123e8:	bl	127e8 <__assert_fail@plt+0x1728>
   123ec:	mov	r1, r0
   123f0:	ldr	r2, [r9, #48]	; 0x30
   123f4:	ldr	r0, [r9, #56]	; 0x38
   123f8:	cmp	r2, r0
   123fc:	bne	121f4 <__assert_fail@plt+0x1134>
   12400:	ldr	r3, [r9, #16]
   12404:	ldr	r0, [r9, #44]	; 0x2c
   12408:	add	r2, r3, r2
   1240c:	cmp	r0, r2
   12410:	blt	121f4 <__assert_fail@plt+0x1134>
   12414:	cmn	r1, #1
   12418:	cmpne	r1, #10
   1241c:	beq	121f4 <__assert_fail@plt+0x1134>
   12420:	ldr	r2, [r9, #32]
   12424:	cmp	r0, r2
   12428:	beq	123e4 <__assert_fail@plt+0x1324>
   1242c:	b	121f4 <__assert_fail@plt+0x1134>
   12430:	mvn	r0, #0
   12434:	mov	r6, #0
   12438:	str	r0, [r9, #36]	; 0x24
   1243c:	ldr	r0, [r5]
   12440:	ands	r4, r0, #32
   12444:	movw	r0, #37200	; 0x9150
   12448:	movt	r0, #2
   1244c:	mvneq	r6, #0
   12450:	ldr	r0, [r0]
   12454:	cmp	r0, r5
   12458:	beq	12494 <__assert_fail@plt+0x13d4>
   1245c:	mov	r0, r5
   12460:	bl	133f0 <__assert_fail@plt+0x2330>
   12464:	cmp	r4, #0
   12468:	bne	1247c <__assert_fail@plt+0x13bc>
   1246c:	cmp	r0, #0
   12470:	beq	1247c <__assert_fail@plt+0x13bc>
   12474:	bl	10fdc <__errno_location@plt>
   12478:	ldr	r6, [r0]
   1247c:	cmp	r6, #0
   12480:	bmi	124a4 <__assert_fail@plt+0x13e4>
   12484:	beq	124b0 <__assert_fail@plt+0x13f0>
   12488:	movw	r5, #31855	; 0x7c6f
   1248c:	movt	r5, #1
   12490:	b	124c8 <__assert_fail@plt+0x1408>
   12494:	mov	r0, r5
   12498:	bl	11084 <clearerr_unlocked@plt>
   1249c:	cmp	r6, #0
   124a0:	bpl	12484 <__assert_fail@plt+0x13c4>
   124a4:	lsr	r0, r6, #31
   124a8:	sub	sp, fp, #28
   124ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b0:	movw	r1, #31524	; 0x7b24
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	movt	r1, #1
   124c0:	bl	10eec <dcgettext@plt>
   124c4:	mov	r5, r0
   124c8:	ldr	r2, [sp]
   124cc:	mov	r0, #0
   124d0:	mov	r1, #3
   124d4:	bl	152a8 <__assert_fail@plt+0x41e8>
   124d8:	mov	r3, r0
   124dc:	mov	r0, #0
   124e0:	mov	r1, r6
   124e4:	mov	r2, r5
   124e8:	bl	10f58 <error@plt>
   124ec:	lsr	r0, r6, #31
   124f0:	sub	sp, fp, #28
   124f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f8:	movw	r0, #31535	; 0x7b2f
   124fc:	movw	r1, #31553	; 0x7b41
   12500:	movw	r3, #31563	; 0x7b4b
   12504:	movw	r2, #623	; 0x26f
   12508:	movt	r0, #1
   1250c:	movt	r1, #1
   12510:	movt	r3, #1
   12514:	bl	110c0 <__assert_fail@plt>
   12518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1251c:	add	fp, sp, #28
   12520:	sub	sp, sp, #24
   12524:	movw	r6, #4680	; 0x1248
   12528:	mov	ip, #0
   1252c:	movt	r6, #3
   12530:	ldr	r0, [r6, #40]	; 0x28
   12534:	str	ip, [r0, #20]
   12538:	sub	r7, r0, #28
   1253c:	ldr	r1, [r0, #4]
   12540:	ldr	r3, [r6, #8]
   12544:	str	r1, [sp]
   12548:	movw	r1, #42216	; 0xa4e8
   1254c:	str	r3, [r0, #4]
   12550:	movt	r1, #2
   12554:	cmp	r7, r1
   12558:	bcc	127d8 <__assert_fail@plt+0x1718>
   1255c:	ldr	r5, [r6, #32]
   12560:	ldr	r2, [r6, #28]
   12564:	ldr	r9, [r6, #52]	; 0x34
   12568:	ldr	r6, [r6, #60]	; 0x3c
   1256c:	mov	r8, r0
   12570:	str	r6, [sp, #8]
   12574:	add	r6, r1, #28
   12578:	str	r5, [sp, #12]
   1257c:	str	r6, [sp, #4]
   12580:	b	125a8 <__assert_fail@plt+0x14e8>
   12584:	sub	r4, r4, #1600	; 0x640
   12588:	add	r1, r4, sl
   1258c:	sub	ip, ip, #28
   12590:	str	r1, [r8, #-8]
   12594:	ldr	r8, [sp, #20]
   12598:	mov	r1, r6
   1259c:	sub	r7, r8, #28
   125a0:	cmp	r7, r6
   125a4:	bcc	127d8 <__assert_fail@plt+0x1718>
   125a8:	cmp	r7, r1
   125ac:	str	r7, [sp, #20]
   125b0:	ldr	r7, [sp, #8]
   125b4:	ldr	r1, [sp, #12]
   125b8:	moveq	r1, r7
   125bc:	ldr	r7, [r8, #-24]	; 0xffffffe8
   125c0:	str	r7, [sp, #16]
   125c4:	add	r7, r1, r7
   125c8:	bne	12674 <__assert_fail@plt+0x15b4>
   125cc:	cmp	r9, #0
   125d0:	ble	12674 <__assert_fail@plt+0x15b4>
   125d4:	ldr	r6, [sp, #4]
   125d8:	mvn	sl, #-2147483648	; 0x80000000
   125dc:	cmp	r0, r6
   125e0:	beq	1261c <__assert_fail@plt+0x155c>
   125e4:	sub	r1, r2, r7
   125e8:	add	r1, r1, r1, lsl #2
   125ec:	lsl	r1, r1, #1
   125f0:	mul	r4, r1, r1
   125f4:	ldr	r1, [r6, #24]
   125f8:	cmp	r1, r0
   125fc:	beq	12620 <__assert_fail@plt+0x1560>
   12600:	ldr	r1, [r6, #16]
   12604:	sub	r1, r7, r1
   12608:	add	r1, r1, r1, lsl #2
   1260c:	lsl	r1, r1, #1
   12610:	mul	r1, r1, r1
   12614:	add	r4, r4, r1, lsr #1
   12618:	b	12620 <__assert_fail@plt+0x1560>
   1261c:	mov	r4, #0
   12620:	ldr	r1, [r6, #20]
   12624:	add	r1, r1, r4
   12628:	sub	r4, r7, r9
   1262c:	add	r4, r4, r4, lsl #2
   12630:	lsl	r4, r4, #1
   12634:	mul	r4, r4, r4
   12638:	add	r4, r1, r4, lsr #1
   1263c:	cmp	r4, sl
   12640:	strlt	r7, [r8, #-12]
   12644:	strlt	r6, [r8, #-4]
   12648:	movlt	sl, r4
   1264c:	cmp	r0, r6
   12650:	beq	12700 <__assert_fail@plt+0x1640>
   12654:	ldr	r1, [r6, #-20]	; 0xffffffec
   12658:	ldr	r4, [r6, #4]
   1265c:	add	r6, r6, #28
   12660:	add	r1, r1, r7
   12664:	add	r7, r1, r4
   12668:	cmp	r7, r3
   1266c:	blt	125dc <__assert_fail@plt+0x151c>
   12670:	b	12700 <__assert_fail@plt+0x1640>
   12674:	mvn	sl, #-2147483648	; 0x80000000
   12678:	mov	r6, ip
   1267c:	add	r4, r0, r6
   12680:	cmp	r6, #0
   12684:	beq	126c0 <__assert_fail@plt+0x1600>
   12688:	sub	r5, r2, r7
   1268c:	ldr	r1, [r4, #24]
   12690:	add	r5, r5, r5, lsl #2
   12694:	lsl	r5, r5, #1
   12698:	mul	lr, r5, r5
   1269c:	cmp	r1, r0
   126a0:	beq	126c4 <__assert_fail@plt+0x1604>
   126a4:	ldr	r1, [r4, #16]
   126a8:	sub	r1, r7, r1
   126ac:	add	r1, r1, r1, lsl #2
   126b0:	lsl	r1, r1, #1
   126b4:	mul	r1, r1, r1
   126b8:	add	lr, lr, r1, lsr #1
   126bc:	b	126c4 <__assert_fail@plt+0x1604>
   126c0:	mov	lr, #0
   126c4:	ldr	r1, [r4, #20]
   126c8:	add	r1, r1, lr
   126cc:	cmp	r1, sl
   126d0:	strlt	r7, [r8, #-12]
   126d4:	strlt	r4, [r8, #-4]
   126d8:	movlt	sl, r1
   126dc:	cmp	r6, #0
   126e0:	beq	12700 <__assert_fail@plt+0x1640>
   126e4:	ldr	r1, [r4, #-20]	; 0xffffffec
   126e8:	ldr	r5, [r4, #4]
   126ec:	add	r6, r6, #28
   126f0:	add	r1, r1, r7
   126f4:	add	r7, r1, r5
   126f8:	cmp	r7, r3
   126fc:	blt	1267c <__assert_fail@plt+0x15bc>
   12700:	ldr	r1, [sp, #20]
   12704:	movw	r6, #42216	; 0xa4e8
   12708:	movt	r6, #2
   1270c:	cmp	r1, r6
   12710:	bls	12774 <__assert_fail@plt+0x16b4>
   12714:	ldrb	r1, [r8, #-44]	; 0xffffffd4
   12718:	tst	r1, #2
   1271c:	bne	127a4 <__assert_fail@plt+0x16e4>
   12720:	movw	r4, #3300	; 0xce4
   12724:	tst	r1, #4
   12728:	bne	12778 <__assert_fail@plt+0x16b8>
   1272c:	ldr	r7, [sp, #20]
   12730:	add	r1, r6, #28
   12734:	cmp	r7, r1
   12738:	bls	127c4 <__assert_fail@plt+0x1704>
   1273c:	ldrb	r1, [r8, #-72]	; 0xffffffb8
   12740:	movw	r4, #4900	; 0x1324
   12744:	tst	r1, #8
   12748:	beq	12778 <__assert_fail@plt+0x16b8>
   1274c:	ldr	r1, [r8, #-52]	; 0xffffffcc
   12750:	movw	r7, #40000	; 0x9c40
   12754:	add	r1, r1, #2
   12758:	sdiv	r1, r7, r1
   1275c:	movw	r7, #4900	; 0x1324
   12760:	add	r4, r1, r7
   12764:	ldrb	r1, [r8, #-16]
   12768:	tst	r1, #1
   1276c:	bne	12584 <__assert_fail@plt+0x14c4>
   12770:	b	12784 <__assert_fail@plt+0x16c4>
   12774:	movw	r4, #4900	; 0x1324
   12778:	ldrb	r1, [r8, #-16]
   1277c:	tst	r1, #1
   12780:	bne	12584 <__assert_fail@plt+0x14c4>
   12784:	tst	r1, #8
   12788:	beq	12588 <__assert_fail@plt+0x14c8>
   1278c:	ldr	r1, [sp, #16]
   12790:	movw	r7, #22500	; 0x57e4
   12794:	add	r1, r1, #2
   12798:	sdiv	r1, r7, r1
   1279c:	add	r4, r1, r4
   127a0:	b	12588 <__assert_fail@plt+0x14c8>
   127a4:	tst	r1, #8
   127a8:	mov	r4, #2400	; 0x960
   127ac:	movweq	r4, #37220	; 0x9164
   127b0:	movteq	r4, #5
   127b4:	ldrb	r1, [r8, #-16]
   127b8:	tst	r1, #1
   127bc:	bne	12584 <__assert_fail@plt+0x14c4>
   127c0:	b	12784 <__assert_fail@plt+0x16c4>
   127c4:	movw	r4, #4900	; 0x1324
   127c8:	ldrb	r1, [r8, #-16]
   127cc:	tst	r1, #1
   127d0:	bne	12584 <__assert_fail@plt+0x14c4>
   127d4:	b	12784 <__assert_fail@plt+0x16c4>
   127d8:	ldr	r1, [sp]
   127dc:	str	r1, [r0, #4]
   127e0:	sub	sp, fp, #28
   127e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127ec:	add	fp, sp, #28
   127f0:	sub	sp, sp, #20
   127f4:	movw	r6, #4680	; 0x1248
   127f8:	movw	r2, #37216	; 0x9160
   127fc:	mov	r5, r1
   12800:	movw	r1, #5000	; 0x1388
   12804:	mov	r4, r0
   12808:	movt	r6, #3
   1280c:	movt	r2, #2
   12810:	add	r8, r2, r1
   12814:	movw	r2, #42216	; 0xa4e8
   12818:	ldr	r0, [r6, #40]	; 0x28
   1281c:	movw	r1, #27944	; 0x6d28
   12820:	movt	r2, #2
   12824:	add	r1, r2, r1
   12828:	stm	sp, {r1, r8}
   1282c:	ldr	r1, [r6, #64]	; 0x40
   12830:	str	r1, [r0]
   12834:	cmp	r1, r8
   12838:	bne	128dc <__assert_fail@plt+0x181c>
   1283c:	b	12874 <__assert_fail@plt+0x17b4>
   12840:	ldr	r0, [r6, #60]	; 0x3c
   12844:	str	r0, [r6, #32]
   12848:	bl	12d58 <__assert_fail@plt+0x1c98>
   1284c:	ldr	r1, [r6, #40]	; 0x28
   12850:	cmp	r5, #10
   12854:	add	r0, r1, #28
   12858:	cmnne	r5, #1
   1285c:	str	r0, [r6, #40]	; 0x28
   12860:	beq	12b80 <__assert_fail@plt+0x1ac0>
   12864:	ldr	r1, [r6, #64]	; 0x40
   12868:	str	r1, [r0]
   1286c:	cmp	r1, r8
   12870:	bne	128dc <__assert_fail@plt+0x181c>
   12874:	ldrb	r0, [r6, #1]
   12878:	cmp	r0, #1
   1287c:	beq	128cc <__assert_fail@plt+0x180c>
   12880:	ldrb	r0, [r6, #3]
   12884:	cmp	r0, #1
   12888:	bne	12894 <__assert_fail@plt+0x17d4>
   1288c:	ldr	r0, [r6, #44]	; 0x2c
   12890:	b	128d0 <__assert_fail@plt+0x1810>
   12894:	ldrb	r0, [r6, #2]
   12898:	cmp	r0, #1
   1289c:	bne	128cc <__assert_fail@plt+0x180c>
   128a0:	ldr	r0, [r6, #44]	; 0x2c
   128a4:	ldr	r1, [r6, #60]	; 0x3c
   128a8:	cmp	r0, r1
   128ac:	bne	128d0 <__assert_fail@plt+0x1810>
   128b0:	ldr	r1, [r6, #32]
   128b4:	cmp	r1, r0
   128b8:	bne	128d4 <__assert_fail@plt+0x1814>
   128bc:	cmp	r0, #0
   128c0:	mov	r0, #0
   128c4:	movweq	r0, #3
   128c8:	b	128d0 <__assert_fail@plt+0x1810>
   128cc:	ldr	r0, [r6, #60]	; 0x3c
   128d0:	str	r0, [r6, #32]
   128d4:	bl	12d58 <__assert_fail@plt+0x1c98>
   128d8:	ldr	r1, [r6, #64]	; 0x40
   128dc:	add	r0, r1, #1
   128e0:	str	r0, [r6, #64]	; 0x40
   128e4:	strb	r5, [r1]
   128e8:	ldmib	r4, {r0, r1}
   128ec:	cmp	r0, r1
   128f0:	bcs	1292c <__assert_fail@plt+0x186c>
   128f4:	add	r1, r0, #1
   128f8:	str	r1, [r4, #4]
   128fc:	ldrb	r5, [r0]
   12900:	bl	10fa0 <__ctype_b_loc@plt>
   12904:	mov	r7, r0
   12908:	ldr	r0, [r0]
   1290c:	add	r0, r0, r5, lsl #1
   12910:	ldrb	r0, [r0, #1]
   12914:	tst	r0, #32
   12918:	bne	1294c <__assert_fail@plt+0x188c>
   1291c:	ldr	r1, [r6, #64]	; 0x40
   12920:	cmp	r1, r8
   12924:	bne	128dc <__assert_fail@plt+0x181c>
   12928:	b	12874 <__assert_fail@plt+0x17b4>
   1292c:	mov	r0, r4
   12930:	bl	11048 <__uflow@plt>
   12934:	mov	r5, r0
   12938:	cmn	r0, #1
   1293c:	bne	12900 <__assert_fail@plt+0x1840>
   12940:	mvn	r5, #0
   12944:	bl	10fa0 <__ctype_b_loc@plt>
   12948:	mov	r7, r0
   1294c:	ldr	r8, [r6, #40]	; 0x28
   12950:	ldr	sl, [r6, #64]	; 0x40
   12954:	mov	r2, #6
   12958:	ldr	r9, [r8]
   1295c:	sub	r1, sl, r9
   12960:	str	r1, [r8, #4]
   12964:	str	r1, [sp, #12]
   12968:	ldr	r0, [r6, #44]	; 0x2c
   1296c:	add	r0, r0, r1
   12970:	str	r0, [r6, #44]	; 0x2c
   12974:	str	r0, [sp, #16]
   12978:	ldrb	r0, [sl, #-1]!
   1297c:	ldrb	r1, [r9]
   12980:	str	r0, [sp, #8]
   12984:	movw	r0, #31591	; 0x7b67
   12988:	movt	r0, #1
   1298c:	bl	11024 <memchr@plt>
   12990:	ldrb	r1, [r8, #12]
   12994:	cmp	r0, #0
   12998:	movwne	r0, #1
   1299c:	bic	r1, r1, #1
   129a0:	orr	r1, r1, r0
   129a4:	strb	r1, [r8, #12]
   129a8:	ldr	r0, [r7]
   129ac:	mov	r7, r1
   129b0:	ldr	r1, [sp, #8]
   129b4:	ldrb	r0, [r0, r1, lsl #1]
   129b8:	lsr	r0, r0, #2
   129bc:	bfi	r7, r0, #2, #1
   129c0:	ldr	r0, [sp, #12]
   129c4:	strb	r7, [r8, #12]
   129c8:	sub	r0, r0, #1
   129cc:	cmp	r0, #1
   129d0:	blt	129f8 <__assert_fail@plt+0x1938>
   129d4:	ldrb	r1, [sl]
   129d8:	movw	r0, #31597	; 0x7b6d
   129dc:	mov	r2, #5
   129e0:	movt	r0, #1
   129e4:	bl	11024 <memchr@plt>
   129e8:	cmp	r0, #0
   129ec:	subne	sl, sl, #1
   129f0:	cmpne	sl, r9
   129f4:	bhi	129d4 <__assert_fail@plt+0x1914>
   129f8:	ldrb	r1, [sl]
   129fc:	movw	r0, #31602	; 0x7b72
   12a00:	mov	r2, #4
   12a04:	movt	r0, #1
   12a08:	bl	11024 <memchr@plt>
   12a0c:	cmp	r0, #0
   12a10:	and	r1, r7, #253	; 0xfd
   12a14:	mov	r7, #1
   12a18:	movwne	r0, #1
   12a1c:	orr	r0, r1, r0, lsl #1
   12a20:	strb	r0, [r8, #12]
   12a24:	ldr	r8, [sp, #4]
   12a28:	cmp	r5, #9
   12a2c:	beq	12a64 <__assert_fail@plt+0x19a4>
   12a30:	cmp	r5, #32
   12a34:	bne	12aa4 <__assert_fail@plt+0x19e4>
   12a38:	ldr	r0, [r6, #44]	; 0x2c
   12a3c:	add	r0, r0, #1
   12a40:	str	r0, [r6, #44]	; 0x2c
   12a44:	ldmib	r4, {r0, r1}
   12a48:	cmp	r0, r1
   12a4c:	bcc	12a8c <__assert_fail@plt+0x19cc>
   12a50:	mov	r0, r4
   12a54:	bl	11048 <__uflow@plt>
   12a58:	mov	r5, r0
   12a5c:	cmp	r5, #9
   12a60:	bne	12a30 <__assert_fail@plt+0x1970>
   12a64:	strb	r7, [r6, #4]
   12a68:	ldr	r0, [r6, #44]	; 0x2c
   12a6c:	asr	r1, r0, #31
   12a70:	add	r0, r0, r1, lsr #29
   12a74:	bic	r0, r0, #7
   12a78:	add	r0, r0, #8
   12a7c:	str	r0, [r6, #44]	; 0x2c
   12a80:	ldmib	r4, {r0, r1}
   12a84:	cmp	r0, r1
   12a88:	bcs	12a50 <__assert_fail@plt+0x1990>
   12a8c:	add	r1, r0, #1
   12a90:	str	r1, [r4, #4]
   12a94:	ldrb	r5, [r0]
   12a98:	cmp	r5, #9
   12a9c:	bne	12a30 <__assert_fail@plt+0x1970>
   12aa0:	b	12a64 <__assert_fail@plt+0x19a4>
   12aa4:	ldr	r0, [r6, #44]	; 0x2c
   12aa8:	ldr	r2, [sp, #16]
   12aac:	ldr	r1, [r6, #40]	; 0x28
   12ab0:	cmn	r5, #1
   12ab4:	sub	r3, r0, r2
   12ab8:	str	r3, [r1, #8]
   12abc:	ldrb	r2, [r1, #12]
   12ac0:	beq	12ad8 <__assert_fail@plt+0x1a18>
   12ac4:	mov	r7, #0
   12ac8:	tst	r2, #2
   12acc:	beq	12af0 <__assert_fail@plt+0x1a30>
   12ad0:	cmp	r5, #10
   12ad4:	bne	12ae4 <__assert_fail@plt+0x1a24>
   12ad8:	orr	r2, r2, #8
   12adc:	strb	r2, [r1, #12]
   12ae0:	b	12b10 <__assert_fail@plt+0x1a50>
   12ae4:	cmp	r3, #1
   12ae8:	mov	r7, #0
   12aec:	movwgt	r7, #1
   12af0:	and	r2, r2, #247	; 0xf7
   12af4:	cmp	r5, #10
   12af8:	orr	r2, r2, r7, lsl #3
   12afc:	strb	r2, [r1, #12]
   12b00:	beq	12b10 <__assert_fail@plt+0x1a50>
   12b04:	ldrb	r3, [r6]
   12b08:	cmp	r3, #1
   12b0c:	bne	12b20 <__assert_fail@plt+0x1a60>
   12b10:	tst	r2, #8
   12b14:	mov	r2, #2
   12b18:	movweq	r2, #1
   12b1c:	str	r2, [r1, #8]
   12b20:	ldr	r2, [sp]
   12b24:	cmp	r1, r2
   12b28:	bne	12850 <__assert_fail@plt+0x1790>
   12b2c:	ldrb	r1, [r6, #1]
   12b30:	cmp	r1, #1
   12b34:	beq	12840 <__assert_fail@plt+0x1780>
   12b38:	ldrb	r1, [r6, #3]
   12b3c:	cmp	r1, #0
   12b40:	bne	12844 <__assert_fail@plt+0x1784>
   12b44:	ldrb	r2, [r6, #2]
   12b48:	ldr	r1, [r6, #60]	; 0x3c
   12b4c:	cmp	r2, #1
   12b50:	bne	12b78 <__assert_fail@plt+0x1ab8>
   12b54:	cmp	r0, r1
   12b58:	bne	12844 <__assert_fail@plt+0x1784>
   12b5c:	ldr	r1, [r6, #32]
   12b60:	cmp	r1, r0
   12b64:	bne	12848 <__assert_fail@plt+0x1788>
   12b68:	cmp	r0, #0
   12b6c:	mov	r0, #0
   12b70:	movweq	r0, #3
   12b74:	b	12844 <__assert_fail@plt+0x1784>
   12b78:	mov	r0, r1
   12b7c:	b	12844 <__assert_fail@plt+0x1784>
   12b80:	mov	r0, #0
   12b84:	str	r0, [r6, #44]	; 0x2c
   12b88:	ldmib	r4, {r0, r1}
   12b8c:	cmp	r0, r1
   12b90:	bcs	12d40 <__assert_fail@plt+0x1c80>
   12b94:	add	r1, r0, #1
   12b98:	str	r1, [r4, #4]
   12b9c:	ldrb	r0, [r0]
   12ba0:	mov	r5, #1
   12ba4:	cmp	r0, #9
   12ba8:	beq	12bd0 <__assert_fail@plt+0x1b10>
   12bac:	cmp	r0, #32
   12bb0:	bne	12c24 <__assert_fail@plt+0x1b64>
   12bb4:	ldr	r0, [r6, #44]	; 0x2c
   12bb8:	add	r0, r0, #1
   12bbc:	str	r0, [r6, #44]	; 0x2c
   12bc0:	ldmib	r4, {r0, r1}
   12bc4:	cmp	r0, r1
   12bc8:	bcc	12bf8 <__assert_fail@plt+0x1b38>
   12bcc:	b	12c10 <__assert_fail@plt+0x1b50>
   12bd0:	strb	r5, [r6, #4]
   12bd4:	ldr	r0, [r6, #44]	; 0x2c
   12bd8:	asr	r1, r0, #31
   12bdc:	add	r0, r0, r1, lsr #29
   12be0:	bic	r0, r0, #7
   12be4:	add	r0, r0, #8
   12be8:	str	r0, [r6, #44]	; 0x2c
   12bec:	ldmib	r4, {r0, r1}
   12bf0:	cmp	r0, r1
   12bf4:	bcs	12c10 <__assert_fail@plt+0x1b50>
   12bf8:	add	r1, r0, #1
   12bfc:	str	r1, [r4, #4]
   12c00:	ldrb	r0, [r0]
   12c04:	cmp	r0, #9
   12c08:	bne	12bac <__assert_fail@plt+0x1aec>
   12c0c:	b	12bd0 <__assert_fail@plt+0x1b10>
   12c10:	mov	r0, r4
   12c14:	bl	11048 <__uflow@plt>
   12c18:	cmp	r0, #9
   12c1c:	bne	12bac <__assert_fail@plt+0x1aec>
   12c20:	b	12bd0 <__assert_fail@plt+0x1b10>
   12c24:	ldr	r1, [r6, #24]
   12c28:	cmp	r1, #0
   12c2c:	beq	12d24 <__assert_fail@plt+0x1c64>
   12c30:	ldr	r1, [r6, #44]	; 0x2c
   12c34:	ldr	r2, [r6, #12]
   12c38:	str	r1, [r6, #48]	; 0x30
   12c3c:	ldrb	r1, [r2]
   12c40:	cmp	r1, #0
   12c44:	beq	12ca0 <__assert_fail@plt+0x1be0>
   12c48:	add	r5, r2, #1
   12c4c:	uxtb	r1, r1
   12c50:	cmp	r0, r1
   12c54:	bne	12d38 <__assert_fail@plt+0x1c78>
   12c58:	ldr	r0, [r6, #44]	; 0x2c
   12c5c:	add	r0, r0, #1
   12c60:	str	r0, [r6, #44]	; 0x2c
   12c64:	ldmib	r4, {r0, r1}
   12c68:	cmp	r0, r1
   12c6c:	bcs	12c8c <__assert_fail@plt+0x1bcc>
   12c70:	add	r1, r0, #1
   12c74:	str	r1, [r4, #4]
   12c78:	ldrb	r0, [r0]
   12c7c:	ldrb	r1, [r5], #1
   12c80:	cmp	r1, #0
   12c84:	bne	12c4c <__assert_fail@plt+0x1b8c>
   12c88:	b	12ca0 <__assert_fail@plt+0x1be0>
   12c8c:	mov	r0, r4
   12c90:	bl	11048 <__uflow@plt>
   12c94:	ldrb	r1, [r5], #1
   12c98:	cmp	r1, #0
   12c9c:	bne	12c4c <__assert_fail@plt+0x1b8c>
   12ca0:	mov	r5, #1
   12ca4:	cmp	r0, #9
   12ca8:	beq	12cd0 <__assert_fail@plt+0x1c10>
   12cac:	cmp	r0, #32
   12cb0:	bne	12d38 <__assert_fail@plt+0x1c78>
   12cb4:	ldr	r0, [r6, #44]	; 0x2c
   12cb8:	add	r0, r0, #1
   12cbc:	str	r0, [r6, #44]	; 0x2c
   12cc0:	ldmib	r4, {r0, r1}
   12cc4:	cmp	r0, r1
   12cc8:	bcc	12cf8 <__assert_fail@plt+0x1c38>
   12ccc:	b	12d10 <__assert_fail@plt+0x1c50>
   12cd0:	strb	r5, [r6, #4]
   12cd4:	ldr	r0, [r6, #44]	; 0x2c
   12cd8:	asr	r1, r0, #31
   12cdc:	add	r0, r0, r1, lsr #29
   12ce0:	bic	r0, r0, #7
   12ce4:	add	r0, r0, #8
   12ce8:	str	r0, [r6, #44]	; 0x2c
   12cec:	ldmib	r4, {r0, r1}
   12cf0:	cmp	r0, r1
   12cf4:	bcs	12d10 <__assert_fail@plt+0x1c50>
   12cf8:	add	r1, r0, #1
   12cfc:	str	r1, [r4, #4]
   12d00:	ldrb	r0, [r0]
   12d04:	cmp	r0, #9
   12d08:	bne	12cac <__assert_fail@plt+0x1bec>
   12d0c:	b	12cd0 <__assert_fail@plt+0x1c10>
   12d10:	mov	r0, r4
   12d14:	bl	11048 <__uflow@plt>
   12d18:	cmp	r0, #9
   12d1c:	bne	12cac <__assert_fail@plt+0x1bec>
   12d20:	b	12cd0 <__assert_fail@plt+0x1c10>
   12d24:	ldr	r1, [r6, #20]
   12d28:	ldr	r2, [r6, #44]	; 0x2c
   12d2c:	cmp	r1, r2
   12d30:	movlt	r2, r1
   12d34:	str	r2, [r6, #48]	; 0x30
   12d38:	sub	sp, fp, #28
   12d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d40:	mov	r0, r4
   12d44:	bl	11048 <__uflow@plt>
   12d48:	mov	r5, #1
   12d4c:	cmp	r0, #9
   12d50:	bne	12bac <__assert_fail@plt+0x1aec>
   12d54:	b	12bd0 <__assert_fail@plt+0x1b10>
   12d58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d5c:	add	fp, sp, #24
   12d60:	movw	r9, #4680	; 0x1248
   12d64:	movw	r8, #42216	; 0xa4e8
   12d68:	movt	r9, #3
   12d6c:	movt	r8, #2
   12d70:	ldr	r6, [r9, #40]	; 0x28
   12d74:	cmp	r6, r8
   12d78:	beq	12dd8 <__assert_fail@plt+0x1d18>
   12d7c:	bl	12518 <__assert_fail@plt+0x1458>
   12d80:	ldr	r4, [r8, #24]
   12d84:	cmp	r4, r6
   12d88:	beq	12e08 <__assert_fail@plt+0x1d48>
   12d8c:	ldr	r3, [r4, #20]
   12d90:	mvn	r2, #-2147483648	; 0x80000000
   12d94:	mov	r5, r6
   12d98:	mov	r1, r2
   12d9c:	ldr	r0, [r4, #24]
   12da0:	ldr	r7, [r0, #20]
   12da4:	sub	r3, r3, r7
   12da8:	cmp	r3, r2
   12dac:	movlt	r1, r3
   12db0:	cmn	r1, #-2147483639	; 0x80000009
   12db4:	addlt	r1, r1, #9
   12db8:	cmp	r3, r2
   12dbc:	mov	r3, r7
   12dc0:	movlt	r5, r4
   12dc4:	cmp	r0, r6
   12dc8:	mov	r4, r0
   12dcc:	mov	r2, r1
   12dd0:	bne	12d9c <__assert_fail@plt+0x1cdc>
   12dd4:	b	12e0c <__assert_fail@plt+0x1d4c>
   12dd8:	ldr	r0, [r9, #64]	; 0x40
   12ddc:	movw	r4, #37216	; 0x9160
   12de0:	mov	r1, #1
   12de4:	movt	r4, #2
   12de8:	sub	r2, r0, r4
   12dec:	movw	r0, #37204	; 0x9154
   12df0:	movt	r0, #2
   12df4:	ldr	r3, [r0]
   12df8:	mov	r0, r4
   12dfc:	bl	10ee0 <fwrite_unlocked@plt>
   12e00:	str	r4, [r9, #64]	; 0x40
   12e04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e08:	mov	r5, r6
   12e0c:	ldr	r1, [r9, #60]	; 0x3c
   12e10:	mov	r0, r8
   12e14:	bl	12eb4 <__assert_fail@plt+0x1df4>
   12e18:	ldr	r6, [r8, #24]
   12e1c:	cmp	r6, r5
   12e20:	beq	12e3c <__assert_fail@plt+0x1d7c>
   12e24:	ldr	r1, [r9, #32]
   12e28:	mov	r0, r6
   12e2c:	bl	12eb4 <__assert_fail@plt+0x1df4>
   12e30:	ldr	r6, [r6, #24]
   12e34:	cmp	r6, r5
   12e38:	bne	12e24 <__assert_fail@plt+0x1d64>
   12e3c:	ldr	r1, [r5]
   12e40:	ldr	r4, [r9, #64]	; 0x40
   12e44:	movw	r6, #37216	; 0x9160
   12e48:	movt	r6, #2
   12e4c:	mov	r0, r6
   12e50:	sub	r2, r4, r1
   12e54:	bl	10e98 <memmove@plt>
   12e58:	ldr	r0, [r5]
   12e5c:	sub	r0, r6, r0
   12e60:	add	r1, r4, r0
   12e64:	str	r1, [r9, #64]	; 0x40
   12e68:	ldr	r6, [r9, #40]	; 0x28
   12e6c:	cmp	r5, r6
   12e70:	bhi	12e90 <__assert_fail@plt+0x1dd0>
   12e74:	mov	r1, r5
   12e78:	ldr	r2, [r1]
   12e7c:	add	r2, r2, r0
   12e80:	str	r2, [r1], #28
   12e84:	ldr	r6, [r9, #40]	; 0x28
   12e88:	cmp	r1, r6
   12e8c:	bls	12e78 <__assert_fail@plt+0x1db8>
   12e90:	sub	r0, r6, r5
   12e94:	mov	r1, r5
   12e98:	add	r2, r0, #28
   12e9c:	mov	r0, r8
   12ea0:	bl	10e98 <memmove@plt>
   12ea4:	sub	r0, r8, r5
   12ea8:	add	r0, r6, r0
   12eac:	str	r0, [r9, #40]	; 0x28
   12eb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb8:	add	fp, sp, #28
   12ebc:	sub	sp, sp, #4
   12ec0:	movw	r9, #4680	; 0x1248
   12ec4:	mov	r8, r1
   12ec8:	mov	r1, #0
   12ecc:	movw	r7, #37204	; 0x9154
   12ed0:	mov	r6, r0
   12ed4:	movt	r9, #3
   12ed8:	movt	r7, #2
   12edc:	str	r1, [r9, #68]	; 0x44
   12ee0:	ldrb	r2, [r9, #4]
   12ee4:	ldr	r4, [r9, #56]	; 0x38
   12ee8:	cmp	r2, #1
   12eec:	bne	12f5c <__assert_fail@plt+0x1e9c>
   12ef0:	cmp	r4, #8
   12ef4:	blt	12f5c <__assert_fail@plt+0x1e9c>
   12ef8:	asr	r0, r4, #31
   12efc:	mov	r1, #0
   12f00:	mov	sl, #9
   12f04:	add	r0, r4, r0, lsr #29
   12f08:	bic	r5, r0, #7
   12f0c:	ldr	r0, [r7]
   12f10:	ldr	r2, [r0, #20]
   12f14:	ldr	r3, [r0, #24]
   12f18:	cmp	r2, r3
   12f1c:	bcs	12f4c <__assert_fail@plt+0x1e8c>
   12f20:	add	r3, r2, #1
   12f24:	str	r3, [r0, #20]
   12f28:	strb	sl, [r2]
   12f2c:	asr	r0, r1, #31
   12f30:	add	r0, r1, r0, lsr #29
   12f34:	bic	r0, r0, #7
   12f38:	add	r1, r0, #8
   12f3c:	cmp	r1, r5
   12f40:	str	r1, [r9, #68]	; 0x44
   12f44:	blt	12f0c <__assert_fail@plt+0x1e4c>
   12f48:	b	12f5c <__assert_fail@plt+0x1e9c>
   12f4c:	mov	r1, #9
   12f50:	bl	11054 <__overflow@plt>
   12f54:	ldr	r1, [r9, #68]	; 0x44
   12f58:	b	12f2c <__assert_fail@plt+0x1e6c>
   12f5c:	cmp	r1, r4
   12f60:	bge	12fb8 <__assert_fail@plt+0x1ef8>
   12f64:	mov	r5, #32
   12f68:	ldr	r0, [r7]
   12f6c:	ldr	r2, [r0, #20]
   12f70:	ldr	r3, [r0, #24]
   12f74:	cmp	r2, r3
   12f78:	bcs	12f9c <__assert_fail@plt+0x1edc>
   12f7c:	add	r3, r2, #1
   12f80:	str	r3, [r0, #20]
   12f84:	strb	r5, [r2]
   12f88:	add	r1, r1, #1
   12f8c:	cmp	r1, r4
   12f90:	str	r1, [r9, #68]	; 0x44
   12f94:	blt	12f68 <__assert_fail@plt+0x1ea8>
   12f98:	b	12fb8 <__assert_fail@plt+0x1ef8>
   12f9c:	mov	r1, #32
   12fa0:	bl	11054 <__overflow@plt>
   12fa4:	ldr	r1, [r9, #68]	; 0x44
   12fa8:	add	r1, r1, #1
   12fac:	cmp	r1, r4
   12fb0:	str	r1, [r9, #68]	; 0x44
   12fb4:	blt	12f68 <__assert_fail@plt+0x1ea8>
   12fb8:	ldr	r1, [r7]
   12fbc:	ldr	r0, [r9, #12]
   12fc0:	bl	10e5c <fputs_unlocked@plt>
   12fc4:	ldr	r0, [r9, #24]
   12fc8:	ldr	r1, [r9, #68]	; 0x44
   12fcc:	add	r1, r1, r0
   12fd0:	str	r1, [r9, #68]	; 0x44
   12fd4:	ldrb	r0, [r9, #4]
   12fd8:	cmp	r0, #1
   12fdc:	bne	1305c <__assert_fail@plt+0x1f9c>
   12fe0:	asr	r0, r8, #31
   12fe4:	add	r0, r8, r0, lsr #29
   12fe8:	bic	r4, r0, #7
   12fec:	cmp	r1, r4
   12ff0:	bge	130c4 <__assert_fail@plt+0x2004>
   12ff4:	add	r0, r1, #1
   12ff8:	mov	ip, r6
   12ffc:	cmp	r0, r4
   13000:	bge	13060 <__assert_fail@plt+0x1fa0>
   13004:	mov	r5, #9
   13008:	ldr	r0, [r7]
   1300c:	ldr	r2, [r0, #20]
   13010:	ldr	r3, [r0, #24]
   13014:	cmp	r2, r3
   13018:	bcs	13048 <__assert_fail@plt+0x1f88>
   1301c:	add	r3, r2, #1
   13020:	str	r3, [r0, #20]
   13024:	strb	r5, [r2]
   13028:	asr	r0, r1, #31
   1302c:	add	r0, r1, r0, lsr #29
   13030:	bic	r0, r0, #7
   13034:	add	r1, r0, #8
   13038:	cmp	r1, r4
   1303c:	str	r1, [r9, #68]	; 0x44
   13040:	blt	13008 <__assert_fail@plt+0x1f48>
   13044:	b	13060 <__assert_fail@plt+0x1fa0>
   13048:	mov	r1, #9
   1304c:	bl	11054 <__overflow@plt>
   13050:	ldr	r1, [r9, #68]	; 0x44
   13054:	mov	ip, r6
   13058:	b	13028 <__assert_fail@plt+0x1f68>
   1305c:	mov	ip, r6
   13060:	cmp	r1, r8
   13064:	bge	130d0 <__assert_fail@plt+0x2010>
   13068:	mov	r4, #32
   1306c:	ldr	r0, [r7]
   13070:	ldr	r2, [r0, #20]
   13074:	ldr	r3, [r0, #24]
   13078:	cmp	r2, r3
   1307c:	bcs	130a0 <__assert_fail@plt+0x1fe0>
   13080:	add	r3, r2, #1
   13084:	str	r3, [r0, #20]
   13088:	strb	r4, [r2]
   1308c:	add	r1, r1, #1
   13090:	cmp	r1, r8
   13094:	str	r1, [r9, #68]	; 0x44
   13098:	blt	1306c <__assert_fail@plt+0x1fac>
   1309c:	b	130d0 <__assert_fail@plt+0x2010>
   130a0:	mov	r1, #32
   130a4:	bl	11054 <__overflow@plt>
   130a8:	ldr	r1, [r9, #68]	; 0x44
   130ac:	mov	ip, r6
   130b0:	add	r1, r1, #1
   130b4:	cmp	r1, r8
   130b8:	str	r1, [r9, #68]	; 0x44
   130bc:	blt	1306c <__assert_fail@plt+0x1fac>
   130c0:	b	130d0 <__assert_fail@plt+0x2010>
   130c4:	mov	ip, r6
   130c8:	cmp	r1, r8
   130cc:	blt	13068 <__assert_fail@plt+0x1fa8>
   130d0:	ldr	r0, [ip, #24]
   130d4:	mov	sl, #9
   130d8:	mov	r4, #32
   130dc:	sub	lr, r0, #28
   130e0:	ldr	r5, [ip, #4]
   130e4:	cmp	r5, #0
   130e8:	bne	13100 <__assert_fail@plt+0x2040>
   130ec:	b	1316c <__assert_fail@plt+0x20ac>
   130f0:	add	ip, ip, #28
   130f4:	ldr	r5, [ip, #4]
   130f8:	cmp	r5, #0
   130fc:	beq	1316c <__assert_fail@plt+0x20ac>
   13100:	ldr	r6, [ip]
   13104:	ldr	r0, [r7]
   13108:	ldrb	r1, [r6], #1
   1310c:	ldr	r2, [r0, #20]
   13110:	ldr	r3, [r0, #24]
   13114:	cmp	r2, r3
   13118:	bcs	13134 <__assert_fail@plt+0x2074>
   1311c:	add	r3, r2, #1
   13120:	str	r3, [r0, #20]
   13124:	strb	r1, [r2]
   13128:	subs	r5, r5, #1
   1312c:	bne	13104 <__assert_fail@plt+0x2044>
   13130:	b	13150 <__assert_fail@plt+0x2090>
   13134:	str	ip, [sp]
   13138:	mov	r8, lr
   1313c:	bl	11054 <__overflow@plt>
   13140:	ldr	ip, [sp]
   13144:	mov	lr, r8
   13148:	subs	r5, r5, #1
   1314c:	bne	13104 <__assert_fail@plt+0x2044>
   13150:	ldr	r1, [r9, #68]	; 0x44
   13154:	ldr	r0, [ip, #4]
   13158:	add	r1, r1, r0
   1315c:	cmp	ip, lr
   13160:	str	r1, [r9, #68]	; 0x44
   13164:	bne	13180 <__assert_fail@plt+0x20c0>
   13168:	b	13268 <__assert_fail@plt+0x21a8>
   1316c:	mov	r0, #0
   13170:	add	r1, r1, r0
   13174:	cmp	ip, lr
   13178:	str	r1, [r9, #68]	; 0x44
   1317c:	beq	13268 <__assert_fail@plt+0x21a8>
   13180:	ldr	r0, [ip, #8]
   13184:	add	r5, r0, r1
   13188:	ldrb	r0, [r9, #4]
   1318c:	cmp	r0, #1
   13190:	bne	13214 <__assert_fail@plt+0x2154>
   13194:	asr	r0, r5, #31
   13198:	add	r0, r5, r0, lsr #29
   1319c:	bic	r8, r0, #7
   131a0:	add	r0, r1, #1
   131a4:	cmp	r0, r8
   131a8:	bge	13214 <__assert_fail@plt+0x2154>
   131ac:	cmp	r1, r8
   131b0:	bge	13214 <__assert_fail@plt+0x2154>
   131b4:	ldr	r0, [r7]
   131b8:	ldr	r2, [r0, #20]
   131bc:	ldr	r3, [r0, #24]
   131c0:	cmp	r2, r3
   131c4:	bcs	131f4 <__assert_fail@plt+0x2134>
   131c8:	add	r3, r2, #1
   131cc:	str	r3, [r0, #20]
   131d0:	strb	sl, [r2]
   131d4:	asr	r0, r1, #31
   131d8:	add	r0, r1, r0, lsr #29
   131dc:	bic	r0, r0, #7
   131e0:	add	r1, r0, #8
   131e4:	str	r1, [r9, #68]	; 0x44
   131e8:	cmp	r1, r8
   131ec:	blt	131b4 <__assert_fail@plt+0x20f4>
   131f0:	b	13214 <__assert_fail@plt+0x2154>
   131f4:	mov	r1, #9
   131f8:	str	ip, [sp]
   131fc:	mov	r6, lr
   13200:	bl	11054 <__overflow@plt>
   13204:	ldr	ip, [sp]
   13208:	ldr	r1, [r9, #68]	; 0x44
   1320c:	mov	lr, r6
   13210:	b	131d4 <__assert_fail@plt+0x2114>
   13214:	cmp	r1, r5
   13218:	bge	130f0 <__assert_fail@plt+0x2030>
   1321c:	ldr	r0, [r7]
   13220:	ldr	r2, [r0, #20]
   13224:	ldr	r3, [r0, #24]
   13228:	cmp	r2, r3
   1322c:	bcs	13248 <__assert_fail@plt+0x2188>
   13230:	add	r3, r2, #1
   13234:	str	r3, [r0, #20]
   13238:	strb	r4, [r2]
   1323c:	add	r1, r1, #1
   13240:	str	r1, [r9, #68]	; 0x44
   13244:	b	13214 <__assert_fail@plt+0x2154>
   13248:	mov	r1, #32
   1324c:	mov	r8, ip
   13250:	mov	r6, lr
   13254:	bl	11054 <__overflow@plt>
   13258:	ldr	r1, [r9, #68]	; 0x44
   1325c:	mov	lr, r6
   13260:	mov	ip, r8
   13264:	b	1323c <__assert_fail@plt+0x217c>
   13268:	ldr	r0, [r7]
   1326c:	str	r1, [r9, #52]	; 0x34
   13270:	ldr	r1, [r0, #20]
   13274:	ldr	r2, [r0, #24]
   13278:	cmp	r1, r2
   1327c:	addcc	r2, r1, #1
   13280:	strcc	r2, [r0, #20]
   13284:	movcc	r0, #10
   13288:	strbcc	r0, [r1]
   1328c:	subcc	sp, fp, #28
   13290:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13294:	mov	r1, #10
   13298:	sub	sp, fp, #28
   1329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a0:	b	11054 <__overflow@plt>
   132a4:	movw	r1, #4752	; 0x1290
   132a8:	movt	r1, #3
   132ac:	str	r0, [r1, #4]
   132b0:	bx	lr
   132b4:	movw	r1, #4752	; 0x1290
   132b8:	movt	r1, #3
   132bc:	strb	r0, [r1]
   132c0:	bx	lr
   132c4:	push	{r4, r5, r6, sl, fp, lr}
   132c8:	add	fp, sp, #16
   132cc:	sub	sp, sp, #8
   132d0:	movw	r0, #37204	; 0x9154
   132d4:	movt	r0, #2
   132d8:	ldr	r0, [r0]
   132dc:	bl	17034 <__assert_fail@plt+0x5f74>
   132e0:	cmp	r0, #0
   132e4:	beq	1330c <__assert_fail@plt+0x224c>
   132e8:	movw	r5, #4752	; 0x1290
   132ec:	movt	r5, #3
   132f0:	ldrb	r0, [r5]
   132f4:	cmp	r0, #0
   132f8:	beq	13338 <__assert_fail@plt+0x2278>
   132fc:	bl	10fdc <__errno_location@plt>
   13300:	ldr	r0, [r0]
   13304:	cmp	r0, #32
   13308:	bne	13338 <__assert_fail@plt+0x2278>
   1330c:	movw	r0, #37192	; 0x9148
   13310:	movt	r0, #2
   13314:	ldr	r0, [r0]
   13318:	bl	17034 <__assert_fail@plt+0x5f74>
   1331c:	cmp	r0, #0
   13320:	subeq	sp, fp, #16
   13324:	popeq	{r4, r5, r6, sl, fp, pc}
   13328:	movw	r0, #37108	; 0x90f4
   1332c:	movt	r0, #2
   13330:	ldr	r0, [r0]
   13334:	bl	10eb0 <_exit@plt>
   13338:	movw	r1, #31839	; 0x7c5f
   1333c:	mov	r0, #0
   13340:	mov	r2, #5
   13344:	movt	r1, #1
   13348:	bl	10eec <dcgettext@plt>
   1334c:	ldr	r6, [r5, #4]
   13350:	mov	r4, r0
   13354:	bl	10fdc <__errno_location@plt>
   13358:	ldr	r5, [r0]
   1335c:	cmp	r6, #0
   13360:	bne	1337c <__assert_fail@plt+0x22bc>
   13364:	movw	r2, #31855	; 0x7c6f
   13368:	mov	r0, #0
   1336c:	mov	r1, r5
   13370:	mov	r3, r4
   13374:	movt	r2, #1
   13378:	b	1339c <__assert_fail@plt+0x22dc>
   1337c:	mov	r0, r6
   13380:	bl	151cc <__assert_fail@plt+0x410c>
   13384:	movw	r2, #31851	; 0x7c6b
   13388:	mov	r3, r0
   1338c:	str	r4, [sp]
   13390:	mov	r0, #0
   13394:	mov	r1, r5
   13398:	movt	r2, #1
   1339c:	bl	10f58 <error@plt>
   133a0:	movw	r0, #37108	; 0x90f4
   133a4:	movt	r0, #2
   133a8:	ldr	r0, [r0]
   133ac:	bl	10eb0 <_exit@plt>
   133b0:	b	10e80 <posix_fadvise64@plt>
   133b4:	cmp	r0, #0
   133b8:	bxeq	lr
   133bc:	push	{r4, sl, fp, lr}
   133c0:	add	fp, sp, #8
   133c4:	sub	sp, sp, #16
   133c8:	mov	r4, r1
   133cc:	bl	1100c <fileno@plt>
   133d0:	mov	r1, #0
   133d4:	mov	r2, #0
   133d8:	mov	r3, #0
   133dc:	str	r1, [sp]
   133e0:	stmib	sp, {r1, r4}
   133e4:	bl	10e80 <posix_fadvise64@plt>
   133e8:	sub	sp, fp, #8
   133ec:	pop	{r4, sl, fp, pc}
   133f0:	push	{r4, r5, r6, sl, fp, lr}
   133f4:	add	fp, sp, #16
   133f8:	sub	sp, sp, #8
   133fc:	mov	r4, r0
   13400:	bl	1100c <fileno@plt>
   13404:	cmn	r0, #1
   13408:	ble	1347c <__assert_fail@plt+0x23bc>
   1340c:	mov	r0, r4
   13410:	bl	10f7c <__freading@plt>
   13414:	cmp	r0, #0
   13418:	beq	13444 <__assert_fail@plt+0x2384>
   1341c:	mov	r0, r4
   13420:	bl	1100c <fileno@plt>
   13424:	mov	r1, #1
   13428:	mov	r2, #0
   1342c:	mov	r3, #0
   13430:	str	r1, [sp]
   13434:	bl	10f28 <lseek64@plt>
   13438:	and	r0, r0, r1
   1343c:	cmn	r0, #1
   13440:	beq	1347c <__assert_fail@plt+0x23bc>
   13444:	mov	r0, r4
   13448:	bl	1348c <__assert_fail@plt+0x23cc>
   1344c:	cmp	r0, #0
   13450:	beq	1347c <__assert_fail@plt+0x23bc>
   13454:	bl	10fdc <__errno_location@plt>
   13458:	ldr	r6, [r0]
   1345c:	mov	r5, r0
   13460:	mov	r0, r4
   13464:	bl	11030 <fclose@plt>
   13468:	cmp	r6, #0
   1346c:	strne	r6, [r5]
   13470:	mvnne	r0, #0
   13474:	sub	sp, fp, #16
   13478:	pop	{r4, r5, r6, sl, fp, pc}
   1347c:	mov	r0, r4
   13480:	sub	sp, fp, #16
   13484:	pop	{r4, r5, r6, sl, fp, lr}
   13488:	b	11030 <fclose@plt>
   1348c:	push	{r4, sl, fp, lr}
   13490:	add	fp, sp, #8
   13494:	sub	sp, sp, #8
   13498:	mov	r4, r0
   1349c:	cmp	r0, #0
   134a0:	beq	134d8 <__assert_fail@plt+0x2418>
   134a4:	mov	r0, r4
   134a8:	bl	10f7c <__freading@plt>
   134ac:	cmp	r0, #0
   134b0:	beq	134d8 <__assert_fail@plt+0x2418>
   134b4:	ldrb	r0, [r4, #1]
   134b8:	tst	r0, #1
   134bc:	beq	134d8 <__assert_fail@plt+0x2418>
   134c0:	mov	r0, #1
   134c4:	mov	r2, #0
   134c8:	mov	r3, #0
   134cc:	str	r0, [sp]
   134d0:	mov	r0, r4
   134d4:	bl	134e8 <__assert_fail@plt+0x2428>
   134d8:	mov	r0, r4
   134dc:	sub	sp, fp, #8
   134e0:	pop	{r4, sl, fp, lr}
   134e4:	b	10e8c <fflush@plt>
   134e8:	push	{r4, r5, r6, r7, fp, lr}
   134ec:	add	fp, sp, #16
   134f0:	sub	sp, sp, #8
   134f4:	mov	r4, r0
   134f8:	ldr	r0, [r0, #4]
   134fc:	mov	r5, r3
   13500:	mov	r6, r2
   13504:	ldr	r1, [r4, #8]
   13508:	cmp	r1, r0
   1350c:	bne	13528 <__assert_fail@plt+0x2468>
   13510:	ldrd	r0, [r4, #16]
   13514:	cmp	r1, r0
   13518:	bne	13528 <__assert_fail@plt+0x2468>
   1351c:	ldr	r0, [r4, #36]	; 0x24
   13520:	cmp	r0, #0
   13524:	beq	13540 <__assert_fail@plt+0x2480>
   13528:	mov	r0, r4
   1352c:	mov	r2, r6
   13530:	mov	r3, r5
   13534:	sub	sp, fp, #16
   13538:	pop	{r4, r5, r6, r7, fp, lr}
   1353c:	b	1103c <fseeko64@plt>
   13540:	ldr	r7, [fp, #8]
   13544:	mov	r0, r4
   13548:	bl	1100c <fileno@plt>
   1354c:	mov	r2, r6
   13550:	mov	r3, r5
   13554:	str	r7, [sp]
   13558:	bl	10f28 <lseek64@plt>
   1355c:	and	r2, r0, r1
   13560:	cmn	r2, #1
   13564:	beq	13584 <__assert_fail@plt+0x24c4>
   13568:	strd	r0, [r4, #80]	; 0x50
   1356c:	ldr	r0, [r4]
   13570:	bic	r0, r0, #16
   13574:	str	r0, [r4]
   13578:	mov	r0, #0
   1357c:	sub	sp, fp, #16
   13580:	pop	{r4, r5, r6, r7, fp, pc}
   13584:	mvn	r0, #0
   13588:	sub	sp, fp, #16
   1358c:	pop	{r4, r5, r6, r7, fp, pc}
   13590:	push	{r4, r5, fp, lr}
   13594:	add	fp, sp, #8
   13598:	cmp	r0, #0
   1359c:	beq	13630 <__assert_fail@plt+0x2570>
   135a0:	mov	r1, #47	; 0x2f
   135a4:	mov	r4, r0
   135a8:	bl	1106c <strrchr@plt>
   135ac:	cmp	r0, #0
   135b0:	mov	r5, r4
   135b4:	addne	r5, r0, #1
   135b8:	sub	r0, r5, r4
   135bc:	cmp	r0, #7
   135c0:	blt	13614 <__assert_fail@plt+0x2554>
   135c4:	movw	r1, #31914	; 0x7caa
   135c8:	sub	r0, r5, #7
   135cc:	mov	r2, #7
   135d0:	movt	r1, #1
   135d4:	bl	110a8 <strncmp@plt>
   135d8:	cmp	r0, #0
   135dc:	bne	13614 <__assert_fail@plt+0x2554>
   135e0:	movw	r1, #31922	; 0x7cb2
   135e4:	mov	r0, r5
   135e8:	mov	r2, #3
   135ec:	movt	r1, #1
   135f0:	bl	110a8 <strncmp@plt>
   135f4:	cmp	r0, #0
   135f8:	beq	13604 <__assert_fail@plt+0x2544>
   135fc:	mov	r4, r5
   13600:	b	13614 <__assert_fail@plt+0x2554>
   13604:	movw	r0, #37176	; 0x9138
   13608:	add	r4, r5, #3
   1360c:	movt	r0, #2
   13610:	str	r4, [r0]
   13614:	movw	r0, #37180	; 0x913c
   13618:	movt	r0, #2
   1361c:	str	r4, [r0]
   13620:	movw	r0, #4760	; 0x1298
   13624:	movt	r0, #3
   13628:	str	r4, [r0]
   1362c:	pop	{r4, r5, fp, pc}
   13630:	movw	r0, #37192	; 0x9148
   13634:	mov	r1, #55	; 0x37
   13638:	mov	r2, #1
   1363c:	movt	r0, #2
   13640:	ldr	r3, [r0]
   13644:	movw	r0, #31858	; 0x7c72
   13648:	movt	r0, #1
   1364c:	bl	10f1c <fwrite@plt>
   13650:	bl	110b4 <abort@plt>
   13654:	push	{r4, r5, r6, sl, fp, lr}
   13658:	add	fp, sp, #16
   1365c:	mov	r4, r0
   13660:	movw	r0, #4768	; 0x12a0
   13664:	movt	r0, #3
   13668:	cmp	r4, #0
   1366c:	moveq	r4, r0
   13670:	bl	10fdc <__errno_location@plt>
   13674:	ldr	r6, [r0]
   13678:	mov	r5, r0
   1367c:	mov	r0, r4
   13680:	mov	r1, #48	; 0x30
   13684:	bl	1608c <__assert_fail@plt+0x4fcc>
   13688:	str	r6, [r5]
   1368c:	pop	{r4, r5, r6, sl, fp, pc}
   13690:	movw	r1, #4768	; 0x12a0
   13694:	cmp	r0, #0
   13698:	movt	r1, #3
   1369c:	movne	r1, r0
   136a0:	ldr	r0, [r1]
   136a4:	bx	lr
   136a8:	movw	r2, #4768	; 0x12a0
   136ac:	cmp	r0, #0
   136b0:	movt	r2, #3
   136b4:	movne	r2, r0
   136b8:	str	r1, [r2]
   136bc:	bx	lr
   136c0:	movw	r3, #4768	; 0x12a0
   136c4:	cmp	r0, #0
   136c8:	and	r2, r2, #1
   136cc:	movt	r3, #3
   136d0:	movne	r3, r0
   136d4:	ubfx	r0, r1, #5, #3
   136d8:	and	r1, r1, #31
   136dc:	add	ip, r3, r0, lsl #2
   136e0:	mov	r0, #1
   136e4:	ldr	r3, [ip, #8]
   136e8:	and	r0, r0, r3, lsr r1
   136ec:	eor	r2, r0, r2
   136f0:	eor	r1, r3, r2, lsl r1
   136f4:	str	r1, [ip, #8]
   136f8:	bx	lr
   136fc:	movw	r2, #4768	; 0x12a0
   13700:	cmp	r0, #0
   13704:	movt	r2, #3
   13708:	movne	r2, r0
   1370c:	ldr	r0, [r2, #4]
   13710:	str	r1, [r2, #4]
   13714:	bx	lr
   13718:	push	{fp, lr}
   1371c:	mov	fp, sp
   13720:	movw	r3, #4768	; 0x12a0
   13724:	cmp	r0, #0
   13728:	movt	r3, #3
   1372c:	movne	r3, r0
   13730:	cmp	r1, #0
   13734:	mov	r0, #10
   13738:	cmpne	r2, #0
   1373c:	str	r0, [r3]
   13740:	bne	13748 <__assert_fail@plt+0x2688>
   13744:	bl	110b4 <abort@plt>
   13748:	str	r1, [r3, #40]	; 0x28
   1374c:	str	r2, [r3, #44]	; 0x2c
   13750:	pop	{fp, pc}
   13754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13758:	add	fp, sp, #28
   1375c:	sub	sp, sp, #20
   13760:	mov	r7, r0
   13764:	ldr	r0, [fp, #8]
   13768:	movw	r5, #4768	; 0x12a0
   1376c:	mov	r8, r3
   13770:	mov	r9, r2
   13774:	mov	sl, r1
   13778:	movt	r5, #3
   1377c:	cmp	r0, #0
   13780:	movne	r5, r0
   13784:	bl	10fdc <__errno_location@plt>
   13788:	ldr	r2, [r5, #40]	; 0x28
   1378c:	ldr	r3, [r5, #44]	; 0x2c
   13790:	mov	r4, r0
   13794:	ldm	r5, {r0, r1}
   13798:	add	r5, r5, #8
   1379c:	ldr	r6, [r4]
   137a0:	stm	sp, {r0, r1, r5}
   137a4:	mov	r0, r7
   137a8:	mov	r1, sl
   137ac:	str	r2, [sp, #12]
   137b0:	str	r3, [sp, #16]
   137b4:	mov	r2, r9
   137b8:	mov	r3, r8
   137bc:	bl	137cc <__assert_fail@plt+0x270c>
   137c0:	str	r6, [r4]
   137c4:	sub	sp, fp, #28
   137c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d0:	add	fp, sp, #28
   137d4:	sub	sp, sp, #156	; 0x9c
   137d8:	str	r0, [fp, #-84]	; 0xffffffac
   137dc:	add	r0, r2, #1
   137e0:	mov	r6, r1
   137e4:	mov	r7, r3
   137e8:	str	r2, [fp, #-80]	; 0xffffffb0
   137ec:	str	r0, [sp, #80]	; 0x50
   137f0:	ldr	r0, [fp, #12]
   137f4:	and	r1, r0, #1
   137f8:	str	r1, [sp, #36]	; 0x24
   137fc:	and	r1, r0, #4
   13800:	str	r1, [sp, #32]
   13804:	ubfx	r8, r0, #1, #1
   13808:	bl	10f34 <__ctype_get_mb_cur_max@plt>
   1380c:	str	r0, [sp, #40]	; 0x28
   13810:	ldr	r0, [fp, #24]
   13814:	ldr	r4, [fp, #8]
   13818:	mov	r1, #0
   1381c:	str	r1, [fp, #-52]	; 0xffffffcc
   13820:	mov	r1, #0
   13824:	str	r1, [sp, #60]	; 0x3c
   13828:	mov	r1, #1
   1382c:	str	r1, [sp, #84]	; 0x54
   13830:	str	r0, [sp, #76]	; 0x4c
   13834:	ldr	r0, [fp, #20]
   13838:	str	r0, [sp, #72]	; 0x48
   1383c:	mov	r0, #0
   13840:	str	r0, [sp, #56]	; 0x38
   13844:	mov	r0, #0
   13848:	str	r0, [fp, #-88]	; 0xffffffa8
   1384c:	mov	r0, #0
   13850:	str	r0, [fp, #-72]	; 0xffffffb8
   13854:	mov	r0, #0
   13858:	cmp	r4, #10
   1385c:	bhi	14b78 <__assert_fail@plt+0x3ab8>
   13860:	add	r1, pc, #24
   13864:	ldr	ip, [fp, #-84]	; 0xffffffac
   13868:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1386c:	mov	r5, r6
   13870:	mov	r9, #0
   13874:	mov	r2, #1
   13878:	mov	r3, #0
   1387c:	ldr	pc, [r1, r4, lsl #2]
   13880:	andeq	r3, r1, r8, asr #18
   13884:	andeq	r3, r1, r4, lsl #19
   13888:	andeq	r3, r1, r8, asr r9
   1388c:	andeq	r3, r1, r0, asr #18
   13890:	andeq	r3, r1, r8, ror r9
   13894:	ldrdeq	r3, [r1], -ip
   13898:	andeq	r3, r1, r8, ror #18
   1389c:	andeq	r3, r1, r4, asr ip
   138a0:	andeq	r3, r1, ip, lsr #17
   138a4:	andeq	r3, r1, ip, lsr #17
   138a8:	andeq	r3, r1, r4, ror #21
   138ac:	movw	r6, #32002	; 0x7d02
   138b0:	mov	r0, #0
   138b4:	mov	r2, #5
   138b8:	movt	r6, #1
   138bc:	mov	r1, r6
   138c0:	bl	10eec <dcgettext@plt>
   138c4:	cmp	r0, r6
   138c8:	str	r0, [sp, #72]	; 0x48
   138cc:	bne	13abc <__assert_fail@plt+0x29fc>
   138d0:	bl	170e0 <__assert_fail@plt+0x6020>
   138d4:	ldrb	r1, [r0]
   138d8:	and	r1, r1, #223	; 0xdf
   138dc:	cmp	r1, #71	; 0x47
   138e0:	beq	13a3c <__assert_fail@plt+0x297c>
   138e4:	cmp	r1, #85	; 0x55
   138e8:	bne	13aa0 <__assert_fail@plt+0x29e0>
   138ec:	ldrb	r1, [r0, #1]
   138f0:	and	r1, r1, #223	; 0xdf
   138f4:	cmp	r1, #84	; 0x54
   138f8:	bne	13aa0 <__assert_fail@plt+0x29e0>
   138fc:	ldrb	r1, [r0, #2]
   13900:	and	r1, r1, #223	; 0xdf
   13904:	cmp	r1, #70	; 0x46
   13908:	bne	13aa0 <__assert_fail@plt+0x29e0>
   1390c:	ldrb	r1, [r0, #3]
   13910:	cmp	r1, #45	; 0x2d
   13914:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13918:	ldrb	r1, [r0, #4]
   1391c:	cmp	r1, #56	; 0x38
   13920:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13924:	ldrb	r0, [r0, #5]
   13928:	cmp	r0, #0
   1392c:	movw	r0, #32006	; 0x7d06
   13930:	movt	r0, #1
   13934:	str	r0, [sp, #72]	; 0x48
   13938:	bne	13aa0 <__assert_fail@plt+0x29e0>
   1393c:	b	13abc <__assert_fail@plt+0x29fc>
   13940:	mov	r0, #1
   13944:	b	13984 <__assert_fail@plt+0x28c4>
   13948:	mov	r4, #0
   1394c:	mov	r9, #0
   13950:	mov	r2, r0
   13954:	b	139d4 <__assert_fail@plt+0x2914>
   13958:	tst	r8, #1
   1395c:	bne	13984 <__assert_fail@plt+0x28c4>
   13960:	mov	r2, r0
   13964:	b	139ac <__assert_fail@plt+0x28ec>
   13968:	mov	r0, #1
   1396c:	mov	r9, #0
   13970:	mov	r4, #5
   13974:	b	139f0 <__assert_fail@plt+0x2930>
   13978:	mov	r2, #1
   1397c:	tst	r8, #1
   13980:	beq	139ac <__assert_fail@plt+0x28ec>
   13984:	mov	r1, #1
   13988:	mov	r9, #0
   1398c:	mov	r4, #2
   13990:	mov	r2, r0
   13994:	mov	r3, #1
   13998:	str	r1, [fp, #-72]	; 0xffffffb8
   1399c:	movw	r1, #32004	; 0x7d04
   139a0:	movt	r1, #1
   139a4:	str	r1, [fp, #-88]	; 0xffffffa8
   139a8:	b	13c54 <__assert_fail@plt+0x2b94>
   139ac:	cmp	r5, #0
   139b0:	mov	r9, #1
   139b4:	mov	r4, #2
   139b8:	movne	r0, #39	; 0x27
   139bc:	strbne	r0, [ip]
   139c0:	movw	r0, #32004	; 0x7d04
   139c4:	movt	r0, #1
   139c8:	str	r0, [fp, #-88]	; 0xffffffa8
   139cc:	mov	r0, #1
   139d0:	str	r0, [fp, #-72]	; 0xffffffb8
   139d4:	mov	r3, #0
   139d8:	b	13c54 <__assert_fail@plt+0x2b94>
   139dc:	mov	r4, #5
   139e0:	tst	r8, #1
   139e4:	beq	13a0c <__assert_fail@plt+0x294c>
   139e8:	mov	r0, #1
   139ec:	mov	r9, #0
   139f0:	str	r0, [fp, #-72]	; 0xffffffb8
   139f4:	movw	r0, #31600	; 0x7b70
   139f8:	mov	r2, #1
   139fc:	mov	r3, #1
   13a00:	movt	r0, #1
   13a04:	str	r0, [fp, #-88]	; 0xffffffa8
   13a08:	b	13c54 <__assert_fail@plt+0x2b94>
   13a0c:	cmp	r5, #0
   13a10:	mov	r3, #0
   13a14:	mov	r9, #1
   13a18:	mov	r2, #1
   13a1c:	movne	r0, #34	; 0x22
   13a20:	strbne	r0, [ip]
   13a24:	movw	r0, #31600	; 0x7b70
   13a28:	movt	r0, #1
   13a2c:	str	r0, [fp, #-88]	; 0xffffffa8
   13a30:	mov	r0, #1
   13a34:	str	r0, [fp, #-72]	; 0xffffffb8
   13a38:	b	13c54 <__assert_fail@plt+0x2b94>
   13a3c:	ldrb	r1, [r0, #1]
   13a40:	and	r1, r1, #223	; 0xdf
   13a44:	cmp	r1, #66	; 0x42
   13a48:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13a4c:	ldrb	r1, [r0, #2]
   13a50:	cmp	r1, #49	; 0x31
   13a54:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13a58:	ldrb	r1, [r0, #3]
   13a5c:	cmp	r1, #56	; 0x38
   13a60:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13a64:	ldrb	r1, [r0, #4]
   13a68:	cmp	r1, #48	; 0x30
   13a6c:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13a70:	ldrb	r1, [r0, #5]
   13a74:	cmp	r1, #51	; 0x33
   13a78:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13a7c:	ldrb	r1, [r0, #6]
   13a80:	cmp	r1, #48	; 0x30
   13a84:	bne	13aa0 <__assert_fail@plt+0x29e0>
   13a88:	ldrb	r0, [r0, #7]
   13a8c:	cmp	r0, #0
   13a90:	movw	r0, #32014	; 0x7d0e
   13a94:	movt	r0, #1
   13a98:	str	r0, [sp, #72]	; 0x48
   13a9c:	beq	13abc <__assert_fail@plt+0x29fc>
   13aa0:	movw	r1, #31600	; 0x7b70
   13aa4:	movw	r0, #32004	; 0x7d04
   13aa8:	cmp	r4, #9
   13aac:	movt	r1, #1
   13ab0:	movt	r0, #1
   13ab4:	moveq	r0, r1
   13ab8:	str	r0, [sp, #72]	; 0x48
   13abc:	movw	r6, #32004	; 0x7d04
   13ac0:	mov	r0, #0
   13ac4:	mov	r2, #5
   13ac8:	movt	r6, #1
   13acc:	mov	r1, r6
   13ad0:	bl	10eec <dcgettext@plt>
   13ad4:	cmp	r0, r6
   13ad8:	str	r0, [sp, #76]	; 0x4c
   13adc:	beq	13b28 <__assert_fail@plt+0x2a68>
   13ae0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ae4:	mov	r9, #0
   13ae8:	tst	r8, #1
   13aec:	bne	13c30 <__assert_fail@plt+0x2b70>
   13af0:	ldr	r0, [sp, #72]	; 0x48
   13af4:	ldrb	r0, [r0]
   13af8:	cmp	r0, #0
   13afc:	beq	13c30 <__assert_fail@plt+0x2b70>
   13b00:	ldr	r1, [sp, #72]	; 0x48
   13b04:	mov	r9, #0
   13b08:	add	r1, r1, #1
   13b0c:	cmp	r9, r5
   13b10:	strbcc	r0, [ip, r9]
   13b14:	ldrb	r0, [r1, r9]
   13b18:	add	r9, r9, #1
   13b1c:	cmp	r0, #0
   13b20:	bne	13b0c <__assert_fail@plt+0x2a4c>
   13b24:	b	13c30 <__assert_fail@plt+0x2b70>
   13b28:	bl	170e0 <__assert_fail@plt+0x6020>
   13b2c:	ldrb	r1, [r0]
   13b30:	and	r1, r1, #223	; 0xdf
   13b34:	cmp	r1, #71	; 0x47
   13b38:	beq	13ba8 <__assert_fail@plt+0x2ae8>
   13b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b40:	cmp	r1, #85	; 0x55
   13b44:	bne	13c04 <__assert_fail@plt+0x2b44>
   13b48:	ldrb	r1, [r0, #1]
   13b4c:	and	r1, r1, #223	; 0xdf
   13b50:	cmp	r1, #84	; 0x54
   13b54:	bne	13c04 <__assert_fail@plt+0x2b44>
   13b58:	ldrb	r1, [r0, #2]
   13b5c:	and	r1, r1, #223	; 0xdf
   13b60:	cmp	r1, #70	; 0x46
   13b64:	bne	13c04 <__assert_fail@plt+0x2b44>
   13b68:	ldrb	r1, [r0, #3]
   13b6c:	cmp	r1, #45	; 0x2d
   13b70:	bne	13c04 <__assert_fail@plt+0x2b44>
   13b74:	ldrb	r1, [r0, #4]
   13b78:	cmp	r1, #56	; 0x38
   13b7c:	bne	13c04 <__assert_fail@plt+0x2b44>
   13b80:	ldrb	r0, [r0, #5]
   13b84:	cmp	r0, #0
   13b88:	bne	13c04 <__assert_fail@plt+0x2b44>
   13b8c:	movw	r0, #32010	; 0x7d0a
   13b90:	movt	r0, #1
   13b94:	str	r0, [sp, #76]	; 0x4c
   13b98:	mov	r9, #0
   13b9c:	tst	r8, #1
   13ba0:	beq	13af0 <__assert_fail@plt+0x2a30>
   13ba4:	b	13c30 <__assert_fail@plt+0x2b70>
   13ba8:	ldrb	r1, [r0, #1]
   13bac:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bb0:	and	r1, r1, #223	; 0xdf
   13bb4:	cmp	r1, #66	; 0x42
   13bb8:	bne	13c04 <__assert_fail@plt+0x2b44>
   13bbc:	ldrb	r1, [r0, #2]
   13bc0:	cmp	r1, #49	; 0x31
   13bc4:	bne	13c04 <__assert_fail@plt+0x2b44>
   13bc8:	ldrb	r1, [r0, #3]
   13bcc:	cmp	r1, #56	; 0x38
   13bd0:	bne	13c04 <__assert_fail@plt+0x2b44>
   13bd4:	ldrb	r1, [r0, #4]
   13bd8:	cmp	r1, #48	; 0x30
   13bdc:	bne	13c04 <__assert_fail@plt+0x2b44>
   13be0:	ldrb	r1, [r0, #5]
   13be4:	cmp	r1, #51	; 0x33
   13be8:	bne	13c04 <__assert_fail@plt+0x2b44>
   13bec:	ldrb	r1, [r0, #6]
   13bf0:	cmp	r1, #48	; 0x30
   13bf4:	bne	13c04 <__assert_fail@plt+0x2b44>
   13bf8:	ldrb	r0, [r0, #7]
   13bfc:	cmp	r0, #0
   13c00:	beq	14a18 <__assert_fail@plt+0x3958>
   13c04:	movw	r0, #32004	; 0x7d04
   13c08:	cmp	r4, #9
   13c0c:	movt	r0, #1
   13c10:	mov	r1, r0
   13c14:	movw	r0, #31600	; 0x7b70
   13c18:	movt	r0, #1
   13c1c:	moveq	r1, r0
   13c20:	str	r1, [sp, #76]	; 0x4c
   13c24:	mov	r9, #0
   13c28:	tst	r8, #1
   13c2c:	beq	13af0 <__assert_fail@plt+0x2a30>
   13c30:	ldr	r6, [sp, #76]	; 0x4c
   13c34:	mov	r0, r6
   13c38:	bl	10fc4 <strlen@plt>
   13c3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13c44:	str	r0, [fp, #-72]	; 0xffffffb8
   13c48:	str	r6, [fp, #-88]	; 0xffffffa8
   13c4c:	mov	r2, #1
   13c50:	mov	r3, r8
   13c54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c58:	str	r4, [fp, #-64]	; 0xffffffc0
   13c5c:	mov	sl, #0
   13c60:	str	r3, [fp, #-76]	; 0xffffffb4
   13c64:	str	r2, [sp, #88]	; 0x58
   13c68:	cmp	r0, #0
   13c6c:	movwne	r0, #1
   13c70:	and	r1, r0, r3
   13c74:	and	r1, r2, r1
   13c78:	str	r1, [sp, #48]	; 0x30
   13c7c:	sub	r1, r4, #2
   13c80:	clz	r1, r1
   13c84:	lsr	r1, r1, #5
   13c88:	and	r1, r1, r3
   13c8c:	str	r1, [sp, #44]	; 0x2c
   13c90:	subs	r1, r4, #2
   13c94:	eor	r4, r3, #1
   13c98:	movwne	r1, #1
   13c9c:	str	r4, [sp, #92]	; 0x5c
   13ca0:	orr	r4, r1, r4
   13ca4:	and	r1, r1, r2
   13ca8:	and	r0, r0, r1
   13cac:	str	r4, [sp, #64]	; 0x40
   13cb0:	ldr	r4, [sp, #84]	; 0x54
   13cb4:	str	r0, [fp, #-60]	; 0xffffffc4
   13cb8:	orr	r0, r1, r3
   13cbc:	ldr	r1, [fp, #16]
   13cc0:	eor	r0, r0, #1
   13cc4:	clz	r1, r1
   13cc8:	lsr	r1, r1, #5
   13ccc:	orr	r0, r1, r0
   13cd0:	str	r0, [fp, #-68]	; 0xffffffbc
   13cd4:	eor	r0, r2, #1
   13cd8:	str	r0, [sp, #52]	; 0x34
   13cdc:	cmn	r7, #1
   13ce0:	beq	13cf0 <__assert_fail@plt+0x2c30>
   13ce4:	cmp	sl, r7
   13ce8:	bne	13cfc <__assert_fail@plt+0x2c3c>
   13cec:	b	14990 <__assert_fail@plt+0x38d0>
   13cf0:	ldrb	r0, [lr, sl]
   13cf4:	cmp	r0, #0
   13cf8:	beq	14998 <__assert_fail@plt+0x38d8>
   13cfc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d00:	cmp	r0, #0
   13d04:	beq	13d64 <__assert_fail@plt+0x2ca4>
   13d08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d0c:	mov	r6, r5
   13d10:	add	r5, sl, r0
   13d14:	cmp	r0, #2
   13d18:	bcc	13d84 <__assert_fail@plt+0x2cc4>
   13d1c:	mov	r0, #0
   13d20:	cmn	r7, #1
   13d24:	str	r0, [fp, #-56]	; 0xffffffc8
   13d28:	bne	13d40 <__assert_fail@plt+0x2c80>
   13d2c:	mov	r0, lr
   13d30:	bl	10fc4 <strlen@plt>
   13d34:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13d38:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d3c:	mov	r7, r0
   13d40:	cmp	r5, r7
   13d44:	bls	13d94 <__assert_fail@plt+0x2cd4>
   13d48:	mov	r0, #0
   13d4c:	mov	r5, r6
   13d50:	str	r0, [fp, #-48]	; 0xffffffd0
   13d54:	ldrb	r6, [lr, sl]
   13d58:	cmp	r6, #126	; 0x7e
   13d5c:	bls	13de4 <__assert_fail@plt+0x2d24>
   13d60:	b	14340 <__assert_fail@plt+0x3280>
   13d64:	mov	r0, #0
   13d68:	str	r0, [fp, #-56]	; 0xffffffc8
   13d6c:	mov	r0, #0
   13d70:	str	r0, [fp, #-48]	; 0xffffffd0
   13d74:	ldrb	r6, [lr, sl]
   13d78:	cmp	r6, #126	; 0x7e
   13d7c:	bls	13de4 <__assert_fail@plt+0x2d24>
   13d80:	b	14340 <__assert_fail@plt+0x3280>
   13d84:	mov	r0, #0
   13d88:	str	r0, [fp, #-56]	; 0xffffffc8
   13d8c:	cmp	r5, r7
   13d90:	bhi	13d48 <__assert_fail@plt+0x2c88>
   13d94:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13d98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13d9c:	add	r0, lr, sl
   13da0:	bl	10fb8 <bcmp@plt>
   13da4:	ldr	r2, [sp, #92]	; 0x5c
   13da8:	cmp	r0, #0
   13dac:	mov	r1, r0
   13db0:	mov	r5, r6
   13db4:	movwne	r1, #1
   13db8:	orr	r1, r1, r2
   13dbc:	tst	r1, #1
   13dc0:	beq	14a58 <__assert_fail@plt+0x3998>
   13dc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13dc8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13dcc:	clz	r0, r0
   13dd0:	lsr	r0, r0, #5
   13dd4:	str	r0, [fp, #-48]	; 0xffffffd0
   13dd8:	ldrb	r6, [lr, sl]
   13ddc:	cmp	r6, #126	; 0x7e
   13de0:	bhi	14340 <__assert_fail@plt+0x3280>
   13de4:	add	r3, pc, #16
   13de8:	mov	r8, #1
   13dec:	mov	r2, #110	; 0x6e
   13df0:	mov	r0, #97	; 0x61
   13df4:	mov	r1, #0
   13df8:	ldr	pc, [r3, r6, lsl #2]
   13dfc:	strdeq	r4, [r1], -r8
   13e00:	andeq	r4, r1, r0, asr #6
   13e04:	andeq	r4, r1, r0, asr #6
   13e08:	andeq	r4, r1, r0, asr #6
   13e0c:	andeq	r4, r1, r0, asr #6
   13e10:	andeq	r4, r1, r0, asr #6
   13e14:	andeq	r4, r1, r0, asr #6
   13e18:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e1c:	ldrdeq	r4, [r1], -r8
   13e20:	ldrdeq	r4, [r1], -r0
   13e24:	andeq	r4, r1, r4, ror #1
   13e28:	andeq	r4, r1, r4, lsl r2
   13e2c:	andeq	r4, r1, r8, asr #1
   13e30:	andeq	r4, r1, r0, ror #1
   13e34:	andeq	r4, r1, r0, asr #6
   13e38:	andeq	r4, r1, r0, asr #6
   13e3c:	andeq	r4, r1, r0, asr #6
   13e40:	andeq	r4, r1, r0, asr #6
   13e44:	andeq	r4, r1, r0, asr #6
   13e48:	andeq	r4, r1, r0, asr #6
   13e4c:	andeq	r4, r1, r0, asr #6
   13e50:	andeq	r4, r1, r0, asr #6
   13e54:	andeq	r4, r1, r0, asr #6
   13e58:	andeq	r4, r1, r0, asr #6
   13e5c:	andeq	r4, r1, r0, asr #6
   13e60:	andeq	r4, r1, r0, asr #6
   13e64:	andeq	r4, r1, r0, asr #6
   13e68:	andeq	r4, r1, r0, asr #6
   13e6c:	andeq	r4, r1, r0, asr #6
   13e70:	andeq	r4, r1, r0, asr #6
   13e74:	andeq	r4, r1, r0, asr #6
   13e78:	andeq	r4, r1, r0, asr #6
   13e7c:	andeq	r4, r1, ip, rrx
   13e80:	andeq	r4, r1, r0, ror r0
   13e84:	andeq	r4, r1, r0, ror r0
   13e88:	andeq	r4, r1, r0, rrx
   13e8c:	andeq	r4, r1, r0, ror r0
   13e90:	strdeq	r3, [r1], -r8
   13e94:	andeq	r4, r1, r0, ror r0
   13e98:	andeq	r4, r1, ip, lsl r2
   13e9c:	andeq	r4, r1, r0, ror r0
   13ea0:	andeq	r4, r1, r0, ror r0
   13ea4:	andeq	r4, r1, r0, ror r0
   13ea8:	strdeq	r3, [r1], -r8
   13eac:	strdeq	r3, [r1], -r8
   13eb0:	strdeq	r3, [r1], -r8
   13eb4:	strdeq	r3, [r1], -r8
   13eb8:	strdeq	r3, [r1], -r8
   13ebc:	strdeq	r3, [r1], -r8
   13ec0:	strdeq	r3, [r1], -r8
   13ec4:	strdeq	r3, [r1], -r8
   13ec8:	strdeq	r3, [r1], -r8
   13ecc:	strdeq	r3, [r1], -r8
   13ed0:	strdeq	r3, [r1], -r8
   13ed4:	strdeq	r3, [r1], -r8
   13ed8:	strdeq	r3, [r1], -r8
   13edc:	strdeq	r3, [r1], -r8
   13ee0:	strdeq	r3, [r1], -r8
   13ee4:	strdeq	r3, [r1], -r8
   13ee8:	andeq	r4, r1, r0, ror r0
   13eec:	andeq	r4, r1, r0, ror r0
   13ef0:	andeq	r4, r1, r0, ror r0
   13ef4:	andeq	r4, r1, r0, ror r0
   13ef8:	andeq	r4, r1, r0, ror #3
   13efc:	andeq	r4, r1, r0, asr #6
   13f00:	strdeq	r3, [r1], -r8
   13f04:	strdeq	r3, [r1], -r8
   13f08:	strdeq	r3, [r1], -r8
   13f0c:	strdeq	r3, [r1], -r8
   13f10:	strdeq	r3, [r1], -r8
   13f14:	strdeq	r3, [r1], -r8
   13f18:	strdeq	r3, [r1], -r8
   13f1c:	strdeq	r3, [r1], -r8
   13f20:	strdeq	r3, [r1], -r8
   13f24:	strdeq	r3, [r1], -r8
   13f28:	strdeq	r3, [r1], -r8
   13f2c:	strdeq	r3, [r1], -r8
   13f30:	strdeq	r3, [r1], -r8
   13f34:	strdeq	r3, [r1], -r8
   13f38:	strdeq	r3, [r1], -r8
   13f3c:	strdeq	r3, [r1], -r8
   13f40:	strdeq	r3, [r1], -r8
   13f44:	strdeq	r3, [r1], -r8
   13f48:	strdeq	r3, [r1], -r8
   13f4c:	strdeq	r3, [r1], -r8
   13f50:	strdeq	r3, [r1], -r8
   13f54:	strdeq	r3, [r1], -r8
   13f58:	strdeq	r3, [r1], -r8
   13f5c:	strdeq	r3, [r1], -r8
   13f60:	strdeq	r3, [r1], -r8
   13f64:	strdeq	r3, [r1], -r8
   13f68:	andeq	r4, r1, r0, ror r0
   13f6c:	andeq	r4, r1, r4, lsr #1
   13f70:	strdeq	r3, [r1], -r8
   13f74:	andeq	r4, r1, r0, ror r0
   13f78:	strdeq	r3, [r1], -r8
   13f7c:	andeq	r4, r1, r0, ror r0
   13f80:	strdeq	r3, [r1], -r8
   13f84:	strdeq	r3, [r1], -r8
   13f88:	strdeq	r3, [r1], -r8
   13f8c:	strdeq	r3, [r1], -r8
   13f90:	strdeq	r3, [r1], -r8
   13f94:	strdeq	r3, [r1], -r8
   13f98:	strdeq	r3, [r1], -r8
   13f9c:	strdeq	r3, [r1], -r8
   13fa0:	strdeq	r3, [r1], -r8
   13fa4:	strdeq	r3, [r1], -r8
   13fa8:	strdeq	r3, [r1], -r8
   13fac:	strdeq	r3, [r1], -r8
   13fb0:	strdeq	r3, [r1], -r8
   13fb4:	strdeq	r3, [r1], -r8
   13fb8:	strdeq	r3, [r1], -r8
   13fbc:	strdeq	r3, [r1], -r8
   13fc0:	strdeq	r3, [r1], -r8
   13fc4:	strdeq	r3, [r1], -r8
   13fc8:	strdeq	r3, [r1], -r8
   13fcc:	strdeq	r3, [r1], -r8
   13fd0:	strdeq	r3, [r1], -r8
   13fd4:	strdeq	r3, [r1], -r8
   13fd8:	strdeq	r3, [r1], -r8
   13fdc:	strdeq	r3, [r1], -r8
   13fe0:	strdeq	r3, [r1], -r8
   13fe4:	strdeq	r3, [r1], -r8
   13fe8:	andeq	r4, r1, r8, lsr r0
   13fec:	andeq	r4, r1, r0, ror r0
   13ff0:	andeq	r4, r1, r8, lsr r0
   13ff4:	andeq	r4, r1, r0, rrx
   13ff8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ffc:	tst	r0, #1
   14000:	bne	142b8 <__assert_fail@plt+0x31f8>
   14004:	ldr	r1, [fp, #16]
   14008:	ubfx	r0, r6, #5, #3
   1400c:	mov	r2, #1
   14010:	ldr	r0, [r1, r0, lsl #2]
   14014:	and	r1, r6, #31
   14018:	tst	r0, r2, lsl r1
   1401c:	beq	142b8 <__assert_fail@plt+0x31f8>
   14020:	mov	r0, r6
   14024:	mov	r1, r8
   14028:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1402c:	tst	r2, #1
   14030:	beq	142d8 <__assert_fail@plt+0x3218>
   14034:	b	14a34 <__assert_fail@plt+0x3974>
   14038:	cmp	r7, #1
   1403c:	beq	14060 <__assert_fail@plt+0x2fa0>
   14040:	mov	r8, #0
   14044:	cmn	r7, #1
   14048:	bne	142a4 <__assert_fail@plt+0x31e4>
   1404c:	ldrb	r0, [lr, #1]
   14050:	cmp	r0, #0
   14054:	beq	14060 <__assert_fail@plt+0x2fa0>
   14058:	mvn	r7, #0
   1405c:	b	142a4 <__assert_fail@plt+0x31e4>
   14060:	mov	r8, #0
   14064:	cmp	sl, #0
   14068:	bne	142a4 <__assert_fail@plt+0x31e4>
   1406c:	mov	r1, #1
   14070:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14074:	cmp	r0, #2
   14078:	bne	14090 <__assert_fail@plt+0x2fd0>
   1407c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14080:	mov	r8, r1
   14084:	tst	r0, #1
   14088:	beq	13ff8 <__assert_fail@plt+0x2f38>
   1408c:	b	14a34 <__assert_fail@plt+0x3974>
   14090:	mov	r8, r1
   14094:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14098:	tst	r0, #1
   1409c:	beq	14004 <__assert_fail@plt+0x2f44>
   140a0:	b	142b8 <__assert_fail@plt+0x31f8>
   140a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140a8:	cmp	r0, #2
   140ac:	bne	1436c <__assert_fail@plt+0x32ac>
   140b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   140b4:	tst	r0, #1
   140b8:	bne	14a34 <__assert_fail@plt+0x3974>
   140bc:	mov	r0, #0
   140c0:	str	r0, [fp, #-56]	; 0xffffffc8
   140c4:	b	14384 <__assert_fail@plt+0x32c4>
   140c8:	mov	r0, #102	; 0x66
   140cc:	b	143f4 <__assert_fail@plt+0x3334>
   140d0:	mov	r2, #116	; 0x74
   140d4:	b	140e4 <__assert_fail@plt+0x3024>
   140d8:	mov	r0, #98	; 0x62
   140dc:	b	143f4 <__assert_fail@plt+0x3334>
   140e0:	mov	r2, #114	; 0x72
   140e4:	ldr	r0, [sp, #64]	; 0x40
   140e8:	tst	r0, #1
   140ec:	mov	r0, r2
   140f0:	bne	143f4 <__assert_fail@plt+0x3334>
   140f4:	b	14a34 <__assert_fail@plt+0x3974>
   140f8:	ldr	r0, [sp, #88]	; 0x58
   140fc:	tst	r0, #1
   14100:	beq	14414 <__assert_fail@plt+0x3354>
   14104:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14108:	tst	r0, #1
   1410c:	bne	14b70 <__assert_fail@plt+0x3ab0>
   14110:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14114:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14118:	subs	r0, r0, #2
   1411c:	movwne	r0, #1
   14120:	orr	r0, r0, r1
   14124:	tst	r0, #1
   14128:	bne	14164 <__assert_fail@plt+0x30a4>
   1412c:	cmp	r9, r5
   14130:	movcc	r0, #39	; 0x27
   14134:	strbcc	r0, [ip, r9]
   14138:	add	r0, r9, #1
   1413c:	cmp	r0, r5
   14140:	movcc	r1, #36	; 0x24
   14144:	strbcc	r1, [ip, r0]
   14148:	add	r0, r9, #2
   1414c:	add	r9, r9, #3
   14150:	cmp	r0, r5
   14154:	movcc	r1, #39	; 0x27
   14158:	strbcc	r1, [ip, r0]
   1415c:	mov	r0, #1
   14160:	str	r0, [fp, #-52]	; 0xffffffcc
   14164:	mov	r1, #1
   14168:	cmp	r9, r5
   1416c:	mov	r8, #0
   14170:	mov	r6, #48	; 0x30
   14174:	str	r1, [fp, #-56]	; 0xffffffc8
   14178:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1417c:	movcc	r0, #92	; 0x5c
   14180:	strbcc	r0, [ip, r9]
   14184:	add	r0, r9, #1
   14188:	cmp	r1, #2
   1418c:	beq	145e0 <__assert_fail@plt+0x3520>
   14190:	add	r1, sl, #1
   14194:	cmp	r1, r7
   14198:	bcs	145e0 <__assert_fail@plt+0x3520>
   1419c:	ldrb	r1, [lr, r1]
   141a0:	sub	r1, r1, #48	; 0x30
   141a4:	uxtb	r1, r1
   141a8:	cmp	r1, #9
   141ac:	bhi	145e0 <__assert_fail@plt+0x3520>
   141b0:	cmp	r0, r5
   141b4:	movcc	r1, #48	; 0x30
   141b8:	strbcc	r1, [ip, r0]
   141bc:	add	r0, r9, #2
   141c0:	add	r9, r9, #3
   141c4:	cmp	r0, r5
   141c8:	movcc	r1, #48	; 0x30
   141cc:	strbcc	r1, [ip, r0]
   141d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141d4:	tst	r0, #1
   141d8:	beq	14004 <__assert_fail@plt+0x2f44>
   141dc:	b	142b8 <__assert_fail@plt+0x31f8>
   141e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   141e4:	mov	r6, #63	; 0x3f
   141e8:	cmp	r0, #5
   141ec:	beq	145f4 <__assert_fail@plt+0x3534>
   141f0:	mov	r1, #0
   141f4:	cmp	r0, #2
   141f8:	str	r1, [fp, #-56]	; 0xffffffc8
   141fc:	bne	146bc <__assert_fail@plt+0x35fc>
   14200:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14204:	mov	r8, #0
   14208:	tst	r0, #1
   1420c:	beq	13ff8 <__assert_fail@plt+0x2f38>
   14210:	b	14a34 <__assert_fail@plt+0x3974>
   14214:	mov	r0, #118	; 0x76
   14218:	b	143f4 <__assert_fail@plt+0x3334>
   1421c:	mov	r0, #1
   14220:	mov	r6, #39	; 0x27
   14224:	str	r0, [sp, #60]	; 0x3c
   14228:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1422c:	cmp	r0, #2
   14230:	bne	14434 <__assert_fail@plt+0x3374>
   14234:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14238:	tst	r0, #1
   1423c:	bne	14a34 <__assert_fail@plt+0x3974>
   14240:	ldr	r2, [sp, #56]	; 0x38
   14244:	clz	r1, r5
   14248:	mov	r8, #1
   1424c:	lsr	r1, r1, #5
   14250:	cmp	r2, #0
   14254:	mov	r0, r2
   14258:	movwne	r0, #1
   1425c:	orrs	r0, r0, r1
   14260:	moveq	r2, r5
   14264:	moveq	r5, r0
   14268:	cmp	r9, r5
   1426c:	str	r2, [sp, #56]	; 0x38
   14270:	movcc	r0, #39	; 0x27
   14274:	strbcc	r0, [ip, r9]
   14278:	add	r0, r9, #1
   1427c:	cmp	r0, r5
   14280:	movcc	r1, #92	; 0x5c
   14284:	strbcc	r1, [ip, r0]
   14288:	add	r0, r9, #2
   1428c:	add	r9, r9, #3
   14290:	cmp	r0, r5
   14294:	movcc	r1, #39	; 0x27
   14298:	strbcc	r1, [ip, r0]
   1429c:	mov	r0, #0
   142a0:	str	r0, [fp, #-52]	; 0xffffffcc
   142a4:	mov	r0, #0
   142a8:	str	r0, [fp, #-56]	; 0xffffffc8
   142ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142b0:	tst	r0, #1
   142b4:	beq	14004 <__assert_fail@plt+0x2f44>
   142b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   142bc:	mov	r1, r8
   142c0:	cmp	r0, #0
   142c4:	mov	r0, r6
   142c8:	beq	1438c <__assert_fail@plt+0x32cc>
   142cc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   142d0:	tst	r2, #1
   142d4:	bne	14a34 <__assert_fail@plt+0x3974>
   142d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   142dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   142e0:	subs	r2, r2, #2
   142e4:	movwne	r2, #1
   142e8:	orr	r2, r2, r3
   142ec:	tst	r2, #1
   142f0:	bne	1432c <__assert_fail@plt+0x326c>
   142f4:	cmp	r9, r5
   142f8:	movcc	r2, #39	; 0x27
   142fc:	strbcc	r2, [ip, r9]
   14300:	add	r2, r9, #1
   14304:	cmp	r2, r5
   14308:	movcc	r3, #36	; 0x24
   1430c:	strbcc	r3, [ip, r2]
   14310:	add	r2, r9, #2
   14314:	add	r9, r9, #3
   14318:	cmp	r2, r5
   1431c:	movcc	r3, #39	; 0x27
   14320:	strbcc	r3, [ip, r2]
   14324:	mov	r2, #1
   14328:	str	r2, [fp, #-52]	; 0xffffffcc
   1432c:	cmp	r9, r5
   14330:	movcc	r2, #92	; 0x5c
   14334:	strbcc	r2, [ip, r9]
   14338:	add	r9, r9, #1
   1433c:	b	143d4 <__assert_fail@plt+0x3314>
   14340:	ldr	r0, [sp, #40]	; 0x28
   14344:	cmp	r0, #1
   14348:	bne	14448 <__assert_fail@plt+0x3388>
   1434c:	bl	10fa0 <__ctype_b_loc@plt>
   14350:	ldr	r0, [r0]
   14354:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14358:	mov	r1, #1
   1435c:	add	r0, r0, r6, lsl #1
   14360:	ldrb	r0, [r0, #1]
   14364:	ubfx	r8, r0, #6, #1
   14368:	b	147a0 <__assert_fail@plt+0x36e0>
   1436c:	ldr	r1, [sp, #48]	; 0x30
   14370:	mov	r0, #0
   14374:	str	r0, [fp, #-56]	; 0xffffffc8
   14378:	mov	r0, #92	; 0x5c
   1437c:	cmp	r1, #0
   14380:	beq	143f4 <__assert_fail@plt+0x3334>
   14384:	mov	r6, #92	; 0x5c
   14388:	mov	r8, #0
   1438c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14390:	cmp	r0, #0
   14394:	bne	143cc <__assert_fail@plt+0x330c>
   14398:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1439c:	tst	r0, #1
   143a0:	beq	143cc <__assert_fail@plt+0x330c>
   143a4:	cmp	r9, r5
   143a8:	movcc	r0, #39	; 0x27
   143ac:	strbcc	r0, [ip, r9]
   143b0:	add	r0, r9, #1
   143b4:	add	r9, r9, #2
   143b8:	cmp	r0, r5
   143bc:	movcc	r1, #39	; 0x27
   143c0:	strbcc	r1, [ip, r0]
   143c4:	mov	r0, #0
   143c8:	str	r0, [fp, #-52]	; 0xffffffcc
   143cc:	mov	r1, r8
   143d0:	mov	r0, r6
   143d4:	cmp	r9, r5
   143d8:	and	r4, r4, r1
   143dc:	strbcc	r0, [ip, r9]
   143e0:	add	r9, r9, #1
   143e4:	add	sl, sl, #1
   143e8:	cmn	r7, #1
   143ec:	bne	13ce4 <__assert_fail@plt+0x2c24>
   143f0:	b	13cf0 <__assert_fail@plt+0x2c30>
   143f4:	mov	r1, #0
   143f8:	mov	r8, #0
   143fc:	str	r1, [fp, #-56]	; 0xffffffc8
   14400:	ldr	r1, [sp, #88]	; 0x58
   14404:	tst	r1, #1
   14408:	mov	r1, #0
   1440c:	beq	13ff8 <__assert_fail@plt+0x2f38>
   14410:	b	142cc <__assert_fail@plt+0x320c>
   14414:	ldr	r0, [sp, #36]	; 0x24
   14418:	mov	r6, #0
   1441c:	mov	r8, #0
   14420:	cmp	r0, #0
   14424:	mov	r0, #0
   14428:	str	r0, [fp, #-56]	; 0xffffffc8
   1442c:	bne	143e4 <__assert_fail@plt+0x3324>
   14430:	b	13ff8 <__assert_fail@plt+0x2f38>
   14434:	mov	r8, #1
   14438:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1443c:	tst	r0, #1
   14440:	beq	14004 <__assert_fail@plt+0x2f44>
   14444:	b	142b8 <__assert_fail@plt+0x31f8>
   14448:	mov	r0, #0
   1444c:	cmn	r7, #1
   14450:	str	r0, [fp, #-36]	; 0xffffffdc
   14454:	str	r0, [fp, #-40]	; 0xffffffd8
   14458:	bne	1446c <__assert_fail@plt+0x33ac>
   1445c:	mov	r0, lr
   14460:	bl	10fc4 <strlen@plt>
   14464:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14468:	mov	r7, r0
   1446c:	ldr	r0, [sp, #44]	; 0x2c
   14470:	str	r4, [sp, #84]	; 0x54
   14474:	str	r5, [sp, #28]
   14478:	cmp	r0, #0
   1447c:	beq	146d0 <__assert_fail@plt+0x3610>
   14480:	ldr	r0, [sp, #80]	; 0x50
   14484:	mov	r8, #1
   14488:	mov	r5, #0
   1448c:	add	r0, r0, sl
   14490:	str	r0, [sp, #24]
   14494:	sub	r0, fp, #40	; 0x28
   14498:	mov	r3, r0
   1449c:	b	144d8 <__assert_fail@plt+0x3418>
   144a0:	ldr	r5, [sp, #68]	; 0x44
   144a4:	add	r5, r0, r5
   144a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   144ac:	bl	10f10 <iswprint@plt>
   144b0:	cmp	r0, #0
   144b4:	sub	r4, fp, #40	; 0x28
   144b8:	movwne	r0, #1
   144bc:	and	r8, r8, r0
   144c0:	mov	r0, r4
   144c4:	bl	10ed4 <mbsinit@plt>
   144c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   144cc:	mov	r3, r4
   144d0:	cmp	r0, #0
   144d4:	bne	14794 <__assert_fail@plt+0x36d4>
   144d8:	str	r5, [sp, #68]	; 0x44
   144dc:	add	r5, r5, sl
   144e0:	sub	r0, fp, #44	; 0x2c
   144e4:	add	r1, lr, r5
   144e8:	sub	r2, r7, r5
   144ec:	bl	17118 <__assert_fail@plt+0x6058>
   144f0:	cmn	r0, #2
   144f4:	beq	14754 <__assert_fail@plt+0x3694>
   144f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   144fc:	cmn	r0, #1
   14500:	beq	14748 <__assert_fail@plt+0x3688>
   14504:	cmp	r0, #0
   14508:	beq	1474c <__assert_fail@plt+0x368c>
   1450c:	cmp	r0, #2
   14510:	bcc	144a0 <__assert_fail@plt+0x33e0>
   14514:	ldr	r1, [sp, #68]	; 0x44
   14518:	ldr	r2, [sp, #24]
   1451c:	add	r1, r2, r1
   14520:	sub	r2, r0, #1
   14524:	ldrb	r3, [r1]
   14528:	sub	r3, r3, #91	; 0x5b
   1452c:	cmp	r3, #33	; 0x21
   14530:	bls	14550 <__assert_fail@plt+0x3490>
   14534:	add	r1, r1, #1
   14538:	subs	r2, r2, #1
   1453c:	beq	144a0 <__assert_fail@plt+0x33e0>
   14540:	ldrb	r3, [r1]
   14544:	sub	r3, r3, #91	; 0x5b
   14548:	cmp	r3, #33	; 0x21
   1454c:	bhi	14534 <__assert_fail@plt+0x3474>
   14550:	add	r5, pc, #0
   14554:	ldr	pc, [r5, r3, lsl #2]
   14558:	andeq	r4, r1, ip, ror #20
   1455c:	andeq	r4, r1, ip, ror #20
   14560:	andeq	r4, r1, r4, lsr r5
   14564:	andeq	r4, r1, ip, ror #20
   14568:	andeq	r4, r1, r4, lsr r5
   1456c:	andeq	r4, r1, ip, ror #20
   14570:	andeq	r4, r1, r4, lsr r5
   14574:	andeq	r4, r1, r4, lsr r5
   14578:	andeq	r4, r1, r4, lsr r5
   1457c:	andeq	r4, r1, r4, lsr r5
   14580:	andeq	r4, r1, r4, lsr r5
   14584:	andeq	r4, r1, r4, lsr r5
   14588:	andeq	r4, r1, r4, lsr r5
   1458c:	andeq	r4, r1, r4, lsr r5
   14590:	andeq	r4, r1, r4, lsr r5
   14594:	andeq	r4, r1, r4, lsr r5
   14598:	andeq	r4, r1, r4, lsr r5
   1459c:	andeq	r4, r1, r4, lsr r5
   145a0:	andeq	r4, r1, r4, lsr r5
   145a4:	andeq	r4, r1, r4, lsr r5
   145a8:	andeq	r4, r1, r4, lsr r5
   145ac:	andeq	r4, r1, r4, lsr r5
   145b0:	andeq	r4, r1, r4, lsr r5
   145b4:	andeq	r4, r1, r4, lsr r5
   145b8:	andeq	r4, r1, r4, lsr r5
   145bc:	andeq	r4, r1, r4, lsr r5
   145c0:	andeq	r4, r1, r4, lsr r5
   145c4:	andeq	r4, r1, r4, lsr r5
   145c8:	andeq	r4, r1, r4, lsr r5
   145cc:	andeq	r4, r1, r4, lsr r5
   145d0:	andeq	r4, r1, r4, lsr r5
   145d4:	andeq	r4, r1, r4, lsr r5
   145d8:	andeq	r4, r1, r4, lsr r5
   145dc:	andeq	r4, r1, ip, ror #20
   145e0:	mov	r9, r0
   145e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   145e8:	tst	r0, #1
   145ec:	beq	14004 <__assert_fail@plt+0x2f44>
   145f0:	b	142b8 <__assert_fail@plt+0x31f8>
   145f4:	mov	r0, #0
   145f8:	str	r0, [fp, #-56]	; 0xffffffc8
   145fc:	ldr	r0, [sp, #32]
   14600:	cmp	r0, #0
   14604:	beq	146bc <__assert_fail@plt+0x35fc>
   14608:	add	r0, sl, #2
   1460c:	mov	r1, r7
   14610:	cmp	r0, r7
   14614:	bcs	146bc <__assert_fail@plt+0x35fc>
   14618:	add	r1, sl, lr
   1461c:	ldrb	r1, [r1, #1]
   14620:	cmp	r1, #63	; 0x3f
   14624:	bne	146bc <__assert_fail@plt+0x35fc>
   14628:	ldrb	r8, [lr, r0]
   1462c:	sub	r2, r8, #33	; 0x21
   14630:	cmp	r2, #29
   14634:	bhi	146bc <__assert_fail@plt+0x35fc>
   14638:	mov	r1, r4
   1463c:	movw	r4, #20929	; 0x51c1
   14640:	mov	r3, #1
   14644:	movt	r4, #14336	; 0x3800
   14648:	tst	r4, r3, lsl r2
   1464c:	beq	14978 <__assert_fail@plt+0x38b8>
   14650:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14654:	tst	r2, #1
   14658:	bne	14a34 <__assert_fail@plt+0x3974>
   1465c:	cmp	r9, r5
   14660:	mov	r6, r8
   14664:	mov	r4, r1
   14668:	mov	sl, r0
   1466c:	mov	r8, #0
   14670:	movcc	r2, #63	; 0x3f
   14674:	strbcc	r2, [ip, r9]
   14678:	add	r2, r9, #1
   1467c:	cmp	r2, r5
   14680:	movcc	r3, #34	; 0x22
   14684:	strbcc	r3, [ip, r2]
   14688:	add	r2, r9, #2
   1468c:	cmp	r2, r5
   14690:	movcc	r3, #34	; 0x22
   14694:	strbcc	r3, [ip, r2]
   14698:	add	r2, r9, #3
   1469c:	add	r9, r9, #4
   146a0:	cmp	r2, r5
   146a4:	movcc	r3, #63	; 0x3f
   146a8:	strbcc	r3, [ip, r2]
   146ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   146b0:	tst	r0, #1
   146b4:	beq	14004 <__assert_fail@plt+0x2f44>
   146b8:	b	142b8 <__assert_fail@plt+0x31f8>
   146bc:	mov	r8, #0
   146c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   146c4:	tst	r0, #1
   146c8:	beq	14004 <__assert_fail@plt+0x2f44>
   146cc:	b	142b8 <__assert_fail@plt+0x31f8>
   146d0:	mov	r8, #1
   146d4:	mov	r5, #0
   146d8:	sub	r4, fp, #40	; 0x28
   146dc:	str	r5, [sp, #68]	; 0x44
   146e0:	add	r5, r5, sl
   146e4:	sub	r0, fp, #44	; 0x2c
   146e8:	mov	r3, r4
   146ec:	add	r1, lr, r5
   146f0:	sub	r2, r7, r5
   146f4:	bl	17118 <__assert_fail@plt+0x6058>
   146f8:	cmn	r0, #2
   146fc:	beq	14754 <__assert_fail@plt+0x3694>
   14700:	cmn	r0, #1
   14704:	beq	14748 <__assert_fail@plt+0x3688>
   14708:	ldr	r5, [sp, #68]	; 0x44
   1470c:	cmp	r0, #0
   14710:	beq	14790 <__assert_fail@plt+0x36d0>
   14714:	add	r5, r0, r5
   14718:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1471c:	bl	10f10 <iswprint@plt>
   14720:	cmp	r0, #0
   14724:	sub	r4, fp, #40	; 0x28
   14728:	movwne	r0, #1
   1472c:	and	r8, r8, r0
   14730:	mov	r0, r4
   14734:	bl	10ed4 <mbsinit@plt>
   14738:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1473c:	cmp	r0, #0
   14740:	beq	146dc <__assert_fail@plt+0x361c>
   14744:	b	14794 <__assert_fail@plt+0x36d4>
   14748:	mov	r8, #0
   1474c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14750:	b	14788 <__assert_fail@plt+0x36c8>
   14754:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14758:	mov	r8, #0
   1475c:	cmp	r5, r7
   14760:	bcs	14788 <__assert_fail@plt+0x36c8>
   14764:	ldrb	r0, [lr, r5]
   14768:	cmp	r0, #0
   1476c:	beq	14788 <__assert_fail@plt+0x36c8>
   14770:	ldr	r0, [sp, #68]	; 0x44
   14774:	add	r0, r0, #1
   14778:	add	r5, r0, sl
   1477c:	str	r0, [sp, #68]	; 0x44
   14780:	cmp	r5, r7
   14784:	bcc	14764 <__assert_fail@plt+0x36a4>
   14788:	ldr	r5, [sp, #68]	; 0x44
   1478c:	b	14794 <__assert_fail@plt+0x36d4>
   14790:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14794:	mov	r1, r5
   14798:	ldr	r5, [sp, #28]
   1479c:	ldr	r4, [sp, #84]	; 0x54
   147a0:	ldr	r0, [sp, #52]	; 0x34
   147a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   147a8:	cmp	r1, #1
   147ac:	orr	r2, r8, r0
   147b0:	mov	r0, r1
   147b4:	bhi	147c0 <__assert_fail@plt+0x3700>
   147b8:	tst	r2, #1
   147bc:	bne	13ff8 <__assert_fail@plt+0x2f38>
   147c0:	add	r0, r0, sl
   147c4:	str	r2, [sp, #84]	; 0x54
   147c8:	str	r0, [fp, #-56]	; 0xffffffc8
   147cc:	mov	r0, #0
   147d0:	tst	r2, #1
   147d4:	bne	148b4 <__assert_fail@plt+0x37f4>
   147d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   147dc:	tst	r1, #1
   147e0:	bne	14a34 <__assert_fail@plt+0x3974>
   147e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   147e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   147ec:	subs	r2, r1, #2
   147f0:	movwne	r2, #1
   147f4:	orr	r2, r2, r0
   147f8:	tst	r2, #1
   147fc:	bne	14838 <__assert_fail@plt+0x3778>
   14800:	cmp	r9, r5
   14804:	add	r2, r9, #1
   14808:	mov	r0, #1
   1480c:	movcc	r1, #39	; 0x27
   14810:	str	r0, [fp, #-52]	; 0xffffffcc
   14814:	strbcc	r1, [ip, r9]
   14818:	cmp	r2, r5
   1481c:	movcc	r1, #36	; 0x24
   14820:	strbcc	r1, [ip, r2]
   14824:	add	r2, r9, #2
   14828:	add	r9, r9, #3
   1482c:	cmp	r2, r5
   14830:	movcc	r1, #39	; 0x27
   14834:	strbcc	r1, [ip, r2]
   14838:	cmp	r9, r5
   1483c:	add	r2, r9, #1
   14840:	movcc	r1, #92	; 0x5c
   14844:	strbcc	r1, [ip, r9]
   14848:	cmp	r2, r5
   1484c:	bcs	14860 <__assert_fail@plt+0x37a0>
   14850:	uxtb	r3, r6
   14854:	mov	r1, #48	; 0x30
   14858:	orr	r3, r1, r3, lsr #6
   1485c:	strb	r3, [ip, r2]
   14860:	add	r2, r9, #2
   14864:	add	r9, r9, #3
   14868:	cmp	r2, r5
   1486c:	lsrcc	r3, r6, #3
   14870:	movcc	r1, #6
   14874:	bficc	r3, r1, #3, #29
   14878:	mov	r1, #6
   1487c:	bfi	r6, r1, #3, #29
   14880:	strbcc	r3, [ip, r2]
   14884:	mov	r2, #1
   14888:	b	148e8 <__assert_fail@plt+0x3828>
   1488c:	ldr	r1, [sp, #80]	; 0x50
   14890:	cmp	r9, r2
   14894:	mov	r5, r2
   14898:	ldr	r2, [sp, #84]	; 0x54
   1489c:	strbcc	r6, [ip, r9]
   148a0:	add	r9, r9, #1
   148a4:	ldrb	r6, [r1, sl]
   148a8:	mov	sl, r3
   148ac:	tst	r2, #1
   148b0:	beq	147d8 <__assert_fail@plt+0x3718>
   148b4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   148b8:	tst	r1, #1
   148bc:	beq	148dc <__assert_fail@plt+0x381c>
   148c0:	cmp	r9, r5
   148c4:	mov	r2, r0
   148c8:	movcc	r1, #92	; 0x5c
   148cc:	strbcc	r1, [ip, r9]
   148d0:	add	r9, r9, #1
   148d4:	mov	r1, #0
   148d8:	b	148e4 <__assert_fail@plt+0x3824>
   148dc:	mov	r1, #0
   148e0:	mov	r2, r0
   148e4:	str	r1, [fp, #-48]	; 0xffffffd0
   148e8:	mov	r0, r2
   148ec:	and	r1, r2, #1
   148f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   148f4:	add	r3, sl, #1
   148f8:	cmp	r2, r3
   148fc:	bls	1495c <__assert_fail@plt+0x389c>
   14900:	mov	r2, r5
   14904:	ldr	r5, [fp, #-52]	; 0xffffffcc
   14908:	cmp	r1, #0
   1490c:	movwne	r1, #1
   14910:	mvn	r5, r5
   14914:	orr	r5, r5, r1
   14918:	tst	r5, #1
   1491c:	bne	1488c <__assert_fail@plt+0x37cc>
   14920:	cmp	r9, r2
   14924:	movcc	r5, r4
   14928:	movcc	r4, #39	; 0x27
   1492c:	strbcc	r4, [ip, r9]
   14930:	movcc	r4, r5
   14934:	add	r5, r9, #1
   14938:	add	r9, r9, #2
   1493c:	cmp	r5, r2
   14940:	movcc	r1, r4
   14944:	movcc	r4, #39	; 0x27
   14948:	strbcc	r4, [ip, r5]
   1494c:	movcc	r4, r1
   14950:	mov	r1, #0
   14954:	str	r1, [fp, #-52]	; 0xffffffcc
   14958:	b	1488c <__assert_fail@plt+0x37cc>
   1495c:	cmp	r1, #0
   14960:	movwne	r1, #1
   14964:	str	r1, [fp, #-56]	; 0xffffffc8
   14968:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1496c:	cmp	r0, #0
   14970:	beq	14398 <__assert_fail@plt+0x32d8>
   14974:	b	143cc <__assert_fail@plt+0x330c>
   14978:	mov	r8, #0
   1497c:	mov	r4, r1
   14980:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14984:	tst	r0, #1
   14988:	beq	14004 <__assert_fail@plt+0x2f44>
   1498c:	b	142b8 <__assert_fail@plt+0x31f8>
   14990:	mov	r7, sl
   14994:	b	1499c <__assert_fail@plt+0x38dc>
   14998:	mvn	r7, #0
   1499c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   149a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   149a4:	ldr	r2, [sp, #88]	; 0x58
   149a8:	eor	r0, r1, #2
   149ac:	orr	r0, r0, r9
   149b0:	clz	r0, r0
   149b4:	lsr	r0, r0, #5
   149b8:	tst	r3, r0
   149bc:	bne	14a34 <__assert_fail@plt+0x3974>
   149c0:	subs	r0, r1, #2
   149c4:	movwne	r0, #1
   149c8:	orr	r0, r3, r0
   149cc:	tst	r0, #1
   149d0:	ldreq	r0, [sp, #60]	; 0x3c
   149d4:	eoreq	r0, r0, #1
   149d8:	tsteq	r0, #1
   149dc:	bne	14b10 <__assert_fail@plt+0x3a50>
   149e0:	tst	r4, #1
   149e4:	bne	14ad4 <__assert_fail@plt+0x3a14>
   149e8:	ldr	r6, [sp, #56]	; 0x38
   149ec:	mov	r8, #0
   149f0:	cmp	r6, #0
   149f4:	beq	14b0c <__assert_fail@plt+0x3a4c>
   149f8:	mov	r1, #0
   149fc:	mov	r4, #2
   14a00:	cmp	r5, #0
   14a04:	mov	r0, r2
   14a08:	mov	r3, #0
   14a0c:	str	r1, [sp, #84]	; 0x54
   14a10:	beq	13858 <__assert_fail@plt+0x2798>
   14a14:	b	14b10 <__assert_fail@plt+0x3a50>
   14a18:	movw	r0, #32018	; 0x7d12
   14a1c:	movt	r0, #1
   14a20:	str	r0, [sp, #76]	; 0x4c
   14a24:	mov	r9, #0
   14a28:	tst	r8, #1
   14a2c:	beq	13af0 <__assert_fail@plt+0x2a30>
   14a30:	b	13c30 <__assert_fail@plt+0x2b70>
   14a34:	ldr	r1, [sp, #88]	; 0x58
   14a38:	mov	r0, #2
   14a3c:	tst	r1, #1
   14a40:	movwne	r0, #4
   14a44:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14a48:	ldr	r1, [fp, #12]
   14a4c:	cmp	r2, #2
   14a50:	moveq	r2, r0
   14a54:	b	14a8c <__assert_fail@plt+0x39cc>
   14a58:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a5c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14a60:	ldr	r1, [fp, #12]
   14a64:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14a68:	b	14a8c <__assert_fail@plt+0x39cc>
   14a6c:	ldr	r1, [sp, #88]	; 0x58
   14a70:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14a74:	ldr	r5, [sp, #28]
   14a78:	mov	r0, #2
   14a7c:	tst	r1, #1
   14a80:	ldr	r1, [fp, #12]
   14a84:	movwne	r0, #4
   14a88:	mov	r2, r0
   14a8c:	mov	r0, #0
   14a90:	bic	r1, r1, #2
   14a94:	str	r2, [sp]
   14a98:	mov	r2, lr
   14a9c:	str	r0, [sp, #8]
   14aa0:	ldr	r0, [sp, #72]	; 0x48
   14aa4:	str	r1, [sp, #4]
   14aa8:	mov	r1, r5
   14aac:	str	r0, [sp, #12]
   14ab0:	ldr	r0, [sp, #76]	; 0x4c
   14ab4:	str	r0, [sp, #16]
   14ab8:	mov	r0, ip
   14abc:	mov	r3, r7
   14ac0:	bl	137cc <__assert_fail@plt+0x270c>
   14ac4:	mov	r9, r0
   14ac8:	mov	r0, r9
   14acc:	sub	sp, fp, #28
   14ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad4:	mov	r0, #5
   14ad8:	ldr	r1, [sp, #56]	; 0x38
   14adc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14ae0:	str	r0, [sp]
   14ae4:	ldr	r0, [fp, #12]
   14ae8:	str	r0, [sp, #4]
   14aec:	ldr	r0, [fp, #16]
   14af0:	str	r0, [sp, #8]
   14af4:	ldr	r0, [sp, #72]	; 0x48
   14af8:	str	r0, [sp, #12]
   14afc:	ldr	r0, [sp, #76]	; 0x4c
   14b00:	str	r0, [sp, #16]
   14b04:	ldr	r0, [fp, #-84]	; 0xffffffac
   14b08:	b	14abc <__assert_fail@plt+0x39fc>
   14b0c:	mov	r3, #0
   14b10:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14b14:	cmp	r1, #0
   14b18:	beq	14b54 <__assert_fail@plt+0x3a94>
   14b1c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14b20:	tst	r3, #1
   14b24:	bne	14b58 <__assert_fail@plt+0x3a98>
   14b28:	ldrb	r0, [r1]
   14b2c:	cmp	r0, #0
   14b30:	beq	14b58 <__assert_fail@plt+0x3a98>
   14b34:	add	r1, r1, #1
   14b38:	cmp	r9, r5
   14b3c:	strbcc	r0, [r2, r9]
   14b40:	add	r9, r9, #1
   14b44:	ldrb	r0, [r1], #1
   14b48:	cmp	r0, #0
   14b4c:	bne	14b38 <__assert_fail@plt+0x3a78>
   14b50:	b	14b58 <__assert_fail@plt+0x3a98>
   14b54:	ldr	r2, [fp, #-84]	; 0xffffffac
   14b58:	cmp	r9, r5
   14b5c:	movcc	r0, #0
   14b60:	strbcc	r0, [r2, r9]
   14b64:	mov	r0, r9
   14b68:	sub	sp, fp, #28
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b70:	mov	r0, #4
   14b74:	b	14a44 <__assert_fail@plt+0x3984>
   14b78:	bl	110b4 <abort@plt>
   14b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b80:	add	fp, sp, #28
   14b84:	sub	sp, sp, #28
   14b88:	movw	r5, #4768	; 0x12a0
   14b8c:	cmp	r2, #0
   14b90:	mov	r4, r1
   14b94:	mov	r7, r0
   14b98:	str	r0, [sp, #20]
   14b9c:	movt	r5, #3
   14ba0:	movne	r5, r2
   14ba4:	bl	10fdc <__errno_location@plt>
   14ba8:	mov	sl, r0
   14bac:	ldr	r2, [r5, #40]	; 0x28
   14bb0:	ldr	r3, [r5, #44]	; 0x2c
   14bb4:	ldm	r5, {r0, r1}
   14bb8:	orr	r8, r1, #1
   14bbc:	add	r9, r5, #8
   14bc0:	mov	r1, #0
   14bc4:	ldr	r6, [sl]
   14bc8:	stm	sp, {r0, r8, r9}
   14bcc:	mov	r0, #0
   14bd0:	str	r2, [sp, #12]
   14bd4:	str	r3, [sp, #16]
   14bd8:	mov	r2, r7
   14bdc:	mov	r3, r4
   14be0:	str	r6, [sp, #24]
   14be4:	mov	r6, r4
   14be8:	bl	137cc <__assert_fail@plt+0x270c>
   14bec:	add	r7, r0, #1
   14bf0:	mov	r0, r7
   14bf4:	bl	15c5c <__assert_fail@plt+0x4b9c>
   14bf8:	mov	r4, r0
   14bfc:	ldr	r0, [r5]
   14c00:	ldr	r2, [r5, #44]	; 0x2c
   14c04:	ldr	r1, [r5, #40]	; 0x28
   14c08:	mov	r3, r6
   14c0c:	stm	sp, {r0, r8, r9}
   14c10:	str	r2, [sp, #16]
   14c14:	ldr	r2, [sp, #20]
   14c18:	str	r1, [sp, #12]
   14c1c:	mov	r0, r4
   14c20:	mov	r1, r7
   14c24:	bl	137cc <__assert_fail@plt+0x270c>
   14c28:	ldr	r0, [sp, #24]
   14c2c:	str	r0, [sl]
   14c30:	mov	r0, r4
   14c34:	sub	sp, fp, #28
   14c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c40:	add	fp, sp, #28
   14c44:	sub	sp, sp, #36	; 0x24
   14c48:	movw	r8, #4768	; 0x12a0
   14c4c:	cmp	r3, #0
   14c50:	mov	r4, r2
   14c54:	str	r2, [sp, #24]
   14c58:	mov	r5, r1
   14c5c:	mov	r6, r0
   14c60:	str	r0, [sp, #20]
   14c64:	movt	r8, #3
   14c68:	movne	r8, r3
   14c6c:	bl	10fdc <__errno_location@plt>
   14c70:	str	r0, [sp, #28]
   14c74:	ldr	r1, [r8, #40]	; 0x28
   14c78:	ldr	r2, [r8, #44]	; 0x2c
   14c7c:	ldr	r7, [r0]
   14c80:	cmp	r4, #0
   14c84:	add	sl, r8, #8
   14c88:	mov	r0, #0
   14c8c:	ldm	r8, {r3, r9}
   14c90:	orreq	r9, r9, #1
   14c94:	stm	sp, {r3, r9, sl}
   14c98:	str	r1, [sp, #12]
   14c9c:	str	r2, [sp, #16]
   14ca0:	mov	r1, #0
   14ca4:	mov	r2, r6
   14ca8:	mov	r3, r5
   14cac:	str	r7, [sp, #32]
   14cb0:	mov	r7, r5
   14cb4:	bl	137cc <__assert_fail@plt+0x270c>
   14cb8:	add	r4, r0, #1
   14cbc:	mov	r5, r0
   14cc0:	mov	r0, r4
   14cc4:	bl	15c5c <__assert_fail@plt+0x4b9c>
   14cc8:	mov	r6, r0
   14ccc:	ldr	r0, [r8]
   14cd0:	ldr	r2, [r8, #44]	; 0x2c
   14cd4:	ldr	r1, [r8, #40]	; 0x28
   14cd8:	mov	r3, r7
   14cdc:	stm	sp, {r0, r9, sl}
   14ce0:	str	r2, [sp, #16]
   14ce4:	ldr	r2, [sp, #20]
   14ce8:	str	r1, [sp, #12]
   14cec:	mov	r0, r6
   14cf0:	mov	r1, r4
   14cf4:	bl	137cc <__assert_fail@plt+0x270c>
   14cf8:	ldr	r0, [sp, #24]
   14cfc:	ldr	r1, [sp, #32]
   14d00:	ldr	r2, [sp, #28]
   14d04:	cmp	r0, #0
   14d08:	str	r1, [r2]
   14d0c:	strne	r5, [r0]
   14d10:	mov	r0, r6
   14d14:	sub	sp, fp, #28
   14d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d1c:	push	{r4, r5, r6, r7, fp, lr}
   14d20:	add	fp, sp, #16
   14d24:	movw	r4, #37160	; 0x9128
   14d28:	movt	r4, #2
   14d2c:	ldrd	r6, [r4]
   14d30:	cmp	r7, #2
   14d34:	blt	14d60 <__assert_fail@plt+0x3ca0>
   14d38:	add	r5, r6, #12
   14d3c:	mov	r7, #0
   14d40:	ldr	r0, [r5, r7, lsl #3]
   14d44:	bl	170b8 <__assert_fail@plt+0x5ff8>
   14d48:	ldr	r1, [r4, #4]
   14d4c:	add	r2, r7, #2
   14d50:	add	r0, r7, #1
   14d54:	mov	r7, r0
   14d58:	cmp	r2, r1
   14d5c:	blt	14d40 <__assert_fail@plt+0x3c80>
   14d60:	ldr	r0, [r6, #4]
   14d64:	movw	r5, #4816	; 0x12d0
   14d68:	movt	r5, #3
   14d6c:	cmp	r0, r5
   14d70:	beq	14d84 <__assert_fail@plt+0x3cc4>
   14d74:	bl	170b8 <__assert_fail@plt+0x5ff8>
   14d78:	mov	r0, #256	; 0x100
   14d7c:	str	r0, [r4, #8]
   14d80:	str	r5, [r4, #12]
   14d84:	add	r5, r4, #8
   14d88:	cmp	r6, r5
   14d8c:	beq	14d9c <__assert_fail@plt+0x3cdc>
   14d90:	mov	r0, r6
   14d94:	bl	170b8 <__assert_fail@plt+0x5ff8>
   14d98:	str	r5, [r4]
   14d9c:	mov	r0, #1
   14da0:	str	r0, [r4, #4]
   14da4:	pop	{r4, r5, r6, r7, fp, pc}
   14da8:	movw	r3, #4768	; 0x12a0
   14dac:	mvn	r2, #0
   14db0:	movt	r3, #3
   14db4:	b	14db8 <__assert_fail@plt+0x3cf8>
   14db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dbc:	add	fp, sp, #28
   14dc0:	sub	sp, sp, #44	; 0x2c
   14dc4:	mov	r7, r3
   14dc8:	str	r2, [sp, #36]	; 0x24
   14dcc:	str	r1, [sp, #32]
   14dd0:	mov	r5, r0
   14dd4:	bl	10fdc <__errno_location@plt>
   14dd8:	cmp	r5, #0
   14ddc:	bmi	14f44 <__assert_fail@plt+0x3e84>
   14de0:	cmn	r5, #-2147483647	; 0x80000001
   14de4:	beq	14f44 <__assert_fail@plt+0x3e84>
   14de8:	movw	r8, #37160	; 0x9128
   14dec:	mov	r4, r0
   14df0:	ldr	r0, [r0]
   14df4:	movt	r8, #2
   14df8:	str	r4, [sp, #28]
   14dfc:	ldr	r1, [r8, #4]
   14e00:	ldr	r6, [r8]
   14e04:	str	r0, [sp, #24]
   14e08:	cmp	r1, r5
   14e0c:	ble	14e18 <__assert_fail@plt+0x3d58>
   14e10:	mov	sl, r6
   14e14:	b	14e80 <__assert_fail@plt+0x3dc0>
   14e18:	mov	r0, #8
   14e1c:	add	r9, r8, #8
   14e20:	str	r1, [fp, #-32]	; 0xffffffe0
   14e24:	sub	r1, r5, r1
   14e28:	mvn	r3, #-2147483648	; 0x80000000
   14e2c:	str	r0, [sp]
   14e30:	subs	r0, r6, r9
   14e34:	add	r2, r1, #1
   14e38:	sub	r1, fp, #32
   14e3c:	movne	r0, r6
   14e40:	bl	15e5c <__assert_fail@plt+0x4d9c>
   14e44:	mov	sl, r0
   14e48:	cmp	r6, r9
   14e4c:	str	r0, [r8]
   14e50:	bne	14e5c <__assert_fail@plt+0x3d9c>
   14e54:	ldrd	r0, [r8, #8]
   14e58:	stm	sl, {r0, r1}
   14e5c:	ldr	r1, [r8, #4]
   14e60:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14e64:	add	r0, sl, r1, lsl #3
   14e68:	sub	r1, r2, r1
   14e6c:	lsl	r2, r1, #3
   14e70:	mov	r1, #0
   14e74:	bl	10ff4 <memset@plt>
   14e78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e7c:	str	r0, [r8, #4]
   14e80:	mov	r9, sl
   14e84:	ldm	r7, {r0, r1}
   14e88:	orr	r8, r1, #1
   14e8c:	add	r1, r7, #8
   14e90:	ldr	r2, [r7, #40]	; 0x28
   14e94:	ldr	r3, [r7, #44]	; 0x2c
   14e98:	ldr	r6, [r9, r5, lsl #3]!
   14e9c:	str	r1, [sp, #20]
   14ea0:	ldr	r4, [r9, #4]!
   14ea4:	stm	sp, {r0, r8}
   14ea8:	add	r0, sp, #8
   14eac:	stm	r0, {r1, r2, r3}
   14eb0:	ldr	r2, [sp, #32]
   14eb4:	ldr	r3, [sp, #36]	; 0x24
   14eb8:	mov	r1, r6
   14ebc:	mov	r0, r4
   14ec0:	bl	137cc <__assert_fail@plt+0x270c>
   14ec4:	cmp	r6, r0
   14ec8:	bhi	14f2c <__assert_fail@plt+0x3e6c>
   14ecc:	add	r6, r0, #1
   14ed0:	movw	r0, #4816	; 0x12d0
   14ed4:	movt	r0, #3
   14ed8:	str	r6, [sl, r5, lsl #3]
   14edc:	cmp	r4, r0
   14ee0:	beq	14eec <__assert_fail@plt+0x3e2c>
   14ee4:	mov	r0, r4
   14ee8:	bl	170b8 <__assert_fail@plt+0x5ff8>
   14eec:	mov	r0, r6
   14ef0:	bl	15c5c <__assert_fail@plt+0x4b9c>
   14ef4:	str	r0, [r9]
   14ef8:	mov	r4, r0
   14efc:	add	r3, sp, #8
   14f00:	ldr	r0, [r7]
   14f04:	ldr	r1, [r7, #40]	; 0x28
   14f08:	ldr	r2, [r7, #44]	; 0x2c
   14f0c:	stm	sp, {r0, r8}
   14f10:	ldr	r0, [sp, #20]
   14f14:	stm	r3, {r0, r1, r2}
   14f18:	ldr	r2, [sp, #32]
   14f1c:	ldr	r3, [sp, #36]	; 0x24
   14f20:	mov	r0, r4
   14f24:	mov	r1, r6
   14f28:	bl	137cc <__assert_fail@plt+0x270c>
   14f2c:	ldr	r1, [sp, #24]
   14f30:	ldr	r0, [sp, #28]
   14f34:	str	r1, [r0]
   14f38:	mov	r0, r4
   14f3c:	sub	sp, fp, #28
   14f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f44:	bl	110b4 <abort@plt>
   14f48:	movw	r3, #4768	; 0x12a0
   14f4c:	movt	r3, #3
   14f50:	b	14db8 <__assert_fail@plt+0x3cf8>
   14f54:	movw	r3, #4768	; 0x12a0
   14f58:	mov	r1, r0
   14f5c:	mov	r0, #0
   14f60:	mvn	r2, #0
   14f64:	movt	r3, #3
   14f68:	b	14db8 <__assert_fail@plt+0x3cf8>
   14f6c:	movw	r3, #4768	; 0x12a0
   14f70:	mov	r2, r1
   14f74:	mov	r1, r0
   14f78:	mov	r0, #0
   14f7c:	movt	r3, #3
   14f80:	b	14db8 <__assert_fail@plt+0x3cf8>
   14f84:	push	{fp, lr}
   14f88:	mov	fp, sp
   14f8c:	sub	sp, sp, #48	; 0x30
   14f90:	vmov.i32	q8, #0	; 0x00000000
   14f94:	mov	ip, #32
   14f98:	mov	r3, sp
   14f9c:	mov	lr, r2
   14fa0:	cmp	r1, #10
   14fa4:	add	r2, r3, #16
   14fa8:	vst1.64	{d16-d17}, [r3], ip
   14fac:	vst1.64	{d16-d17}, [r2]
   14fb0:	vst1.64	{d16-d17}, [r3]
   14fb4:	beq	14fd4 <__assert_fail@plt+0x3f14>
   14fb8:	str	r1, [sp]
   14fbc:	mov	r3, sp
   14fc0:	mov	r1, lr
   14fc4:	mvn	r2, #0
   14fc8:	bl	14db8 <__assert_fail@plt+0x3cf8>
   14fcc:	mov	sp, fp
   14fd0:	pop	{fp, pc}
   14fd4:	bl	110b4 <abort@plt>
   14fd8:	push	{r4, sl, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	sub	sp, sp, #48	; 0x30
   14fe4:	vmov.i32	q8, #0	; 0x00000000
   14fe8:	mov	ip, r3
   14fec:	mov	r3, sp
   14ff0:	mov	lr, #32
   14ff4:	cmp	r1, #10
   14ff8:	add	r4, r3, #16
   14ffc:	vst1.64	{d16-d17}, [r3], lr
   15000:	vst1.64	{d16-d17}, [r4]
   15004:	vst1.64	{d16-d17}, [r3]
   15008:	beq	15028 <__assert_fail@plt+0x3f68>
   1500c:	str	r1, [sp]
   15010:	mov	r1, r2
   15014:	mov	r3, sp
   15018:	mov	r2, ip
   1501c:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15020:	sub	sp, fp, #8
   15024:	pop	{r4, sl, fp, pc}
   15028:	bl	110b4 <abort@plt>
   1502c:	push	{fp, lr}
   15030:	mov	fp, sp
   15034:	sub	sp, sp, #48	; 0x30
   15038:	vmov.i32	q8, #0	; 0x00000000
   1503c:	mov	r3, sp
   15040:	mov	ip, #32
   15044:	cmp	r0, #10
   15048:	add	r2, r3, #16
   1504c:	vst1.64	{d16-d17}, [r3], ip
   15050:	vst1.64	{d16-d17}, [r2]
   15054:	vst1.64	{d16-d17}, [r3]
   15058:	beq	15078 <__assert_fail@plt+0x3fb8>
   1505c:	str	r0, [sp]
   15060:	mov	r3, sp
   15064:	mov	r0, #0
   15068:	mvn	r2, #0
   1506c:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15070:	mov	sp, fp
   15074:	pop	{fp, pc}
   15078:	bl	110b4 <abort@plt>
   1507c:	push	{fp, lr}
   15080:	mov	fp, sp
   15084:	sub	sp, sp, #48	; 0x30
   15088:	vmov.i32	q8, #0	; 0x00000000
   1508c:	mov	r3, sp
   15090:	mov	ip, #32
   15094:	cmp	r0, #10
   15098:	add	lr, r3, #16
   1509c:	vst1.64	{d16-d17}, [r3], ip
   150a0:	vst1.64	{d16-d17}, [lr]
   150a4:	vst1.64	{d16-d17}, [r3]
   150a8:	beq	150c4 <__assert_fail@plt+0x4004>
   150ac:	str	r0, [sp]
   150b0:	mov	r3, sp
   150b4:	mov	r0, #0
   150b8:	bl	14db8 <__assert_fail@plt+0x3cf8>
   150bc:	mov	sp, fp
   150c0:	pop	{fp, pc}
   150c4:	bl	110b4 <abort@plt>
   150c8:	push	{r4, sl, fp, lr}
   150cc:	add	fp, sp, #8
   150d0:	sub	sp, sp, #48	; 0x30
   150d4:	mov	lr, r0
   150d8:	movw	r0, #4768	; 0x12a0
   150dc:	mov	ip, r1
   150e0:	mov	r1, #32
   150e4:	mov	r4, #1
   150e8:	movt	r0, #3
   150ec:	add	r3, r0, #16
   150f0:	vld1.64	{d16-d17}, [r0], r1
   150f4:	vld1.64	{d20-d21}, [r0]
   150f8:	vld1.64	{d18-d19}, [r3]
   150fc:	mov	r3, sp
   15100:	add	r0, r3, #32
   15104:	add	r1, r3, #16
   15108:	vst1.64	{d20-d21}, [r0]
   1510c:	mov	r0, #28
   15110:	vst1.64	{d18-d19}, [r1]
   15114:	mov	r1, r3
   15118:	and	r0, r0, r2, lsr #3
   1511c:	and	r2, r2, #31
   15120:	vst1.64	{d16-d17}, [r1], r0
   15124:	ldr	r0, [r1, #8]
   15128:	bic	r4, r4, r0, lsr r2
   1512c:	eor	r0, r0, r4, lsl r2
   15130:	mov	r2, ip
   15134:	str	r0, [r1, #8]
   15138:	mov	r0, #0
   1513c:	mov	r1, lr
   15140:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15144:	sub	sp, fp, #8
   15148:	pop	{r4, sl, fp, pc}
   1514c:	push	{fp, lr}
   15150:	mov	fp, sp
   15154:	sub	sp, sp, #48	; 0x30
   15158:	mov	ip, r0
   1515c:	movw	r0, #4768	; 0x12a0
   15160:	mov	r2, #32
   15164:	movt	r0, #3
   15168:	add	r3, r0, #16
   1516c:	vld1.64	{d16-d17}, [r0], r2
   15170:	vld1.64	{d20-d21}, [r0]
   15174:	vld1.64	{d18-d19}, [r3]
   15178:	mov	r3, sp
   1517c:	add	r0, r3, #32
   15180:	add	r2, r3, #16
   15184:	vst1.64	{d20-d21}, [r0]
   15188:	mov	r0, #28
   1518c:	vst1.64	{d18-d19}, [r2]
   15190:	mov	r2, r3
   15194:	and	r0, r0, r1, lsr #3
   15198:	and	r1, r1, #31
   1519c:	vst1.64	{d16-d17}, [r2], r0
   151a0:	mov	r0, #1
   151a4:	ldr	lr, [r2, #8]
   151a8:	bic	r0, r0, lr, lsr r1
   151ac:	eor	r0, lr, r0, lsl r1
   151b0:	mov	r1, ip
   151b4:	str	r0, [r2, #8]
   151b8:	mov	r0, #0
   151bc:	mvn	r2, #0
   151c0:	bl	14db8 <__assert_fail@plt+0x3cf8>
   151c4:	mov	sp, fp
   151c8:	pop	{fp, pc}
   151cc:	push	{fp, lr}
   151d0:	mov	fp, sp
   151d4:	sub	sp, sp, #48	; 0x30
   151d8:	mov	r1, r0
   151dc:	movw	r0, #4768	; 0x12a0
   151e0:	mov	r3, #32
   151e4:	movt	r0, #3
   151e8:	add	r2, r0, #16
   151ec:	vld1.64	{d16-d17}, [r0], r3
   151f0:	mov	r3, sp
   151f4:	vld1.64	{d18-d19}, [r2]
   151f8:	vld1.64	{d20-d21}, [r0]
   151fc:	add	r2, r3, #16
   15200:	add	r0, r3, #32
   15204:	vst1.64	{d18-d19}, [r2]
   15208:	vst1.64	{d20-d21}, [r0]
   1520c:	mov	r0, #12
   15210:	mov	r2, r3
   15214:	vst1.64	{d16-d17}, [r2], r0
   15218:	ldr	r0, [r2]
   1521c:	orr	r0, r0, #67108864	; 0x4000000
   15220:	str	r0, [r2]
   15224:	mov	r0, #0
   15228:	mvn	r2, #0
   1522c:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15230:	mov	sp, fp
   15234:	pop	{fp, pc}
   15238:	push	{fp, lr}
   1523c:	mov	fp, sp
   15240:	sub	sp, sp, #48	; 0x30
   15244:	mov	ip, r1
   15248:	mov	r1, r0
   1524c:	movw	r0, #4768	; 0x12a0
   15250:	mov	r2, #32
   15254:	movt	r0, #3
   15258:	add	r3, r0, #16
   1525c:	vld1.64	{d16-d17}, [r0], r2
   15260:	vld1.64	{d18-d19}, [r3]
   15264:	vld1.64	{d20-d21}, [r0]
   15268:	mov	r3, sp
   1526c:	add	r2, r3, #16
   15270:	add	r0, r3, #32
   15274:	vst1.64	{d18-d19}, [r2]
   15278:	vst1.64	{d20-d21}, [r0]
   1527c:	mov	r0, #12
   15280:	mov	r2, r3
   15284:	vst1.64	{d16-d17}, [r2], r0
   15288:	ldr	r0, [r2]
   1528c:	orr	r0, r0, #67108864	; 0x4000000
   15290:	str	r0, [r2]
   15294:	mov	r0, #0
   15298:	mov	r2, ip
   1529c:	bl	14db8 <__assert_fail@plt+0x3cf8>
   152a0:	mov	sp, fp
   152a4:	pop	{fp, pc}
   152a8:	push	{r4, sl, fp, lr}
   152ac:	add	fp, sp, #8
   152b0:	sub	sp, sp, #96	; 0x60
   152b4:	vmov.i32	q8, #0	; 0x00000000
   152b8:	mov	ip, r2
   152bc:	mov	r2, sp
   152c0:	mov	r4, #28
   152c4:	cmp	r1, #10
   152c8:	mov	r3, r2
   152cc:	add	lr, r2, #16
   152d0:	vst1.64	{d16-d17}, [r3], r4
   152d4:	vst1.64	{d16-d17}, [lr]
   152d8:	vst1.32	{d16-d17}, [r3]
   152dc:	beq	1532c <__assert_fail@plt+0x426c>
   152e0:	vld1.64	{d16-d17}, [r2], r4
   152e4:	vld1.64	{d18-d19}, [lr]
   152e8:	add	r3, sp, #48	; 0x30
   152ec:	vld1.32	{d20-d21}, [r2]
   152f0:	add	r2, r3, #20
   152f4:	add	r4, r3, #4
   152f8:	vst1.32	{d18-d19}, [r2]
   152fc:	add	r2, r3, #32
   15300:	vst1.32	{d16-d17}, [r4]
   15304:	vst1.32	{d20-d21}, [r2]
   15308:	str	r1, [sp, #48]	; 0x30
   1530c:	mvn	r2, #0
   15310:	ldr	r1, [sp, #60]	; 0x3c
   15314:	orr	r1, r1, #67108864	; 0x4000000
   15318:	str	r1, [sp, #60]	; 0x3c
   1531c:	mov	r1, ip
   15320:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15324:	sub	sp, fp, #8
   15328:	pop	{r4, sl, fp, pc}
   1532c:	bl	110b4 <abort@plt>
   15330:	push	{r4, r5, r6, sl, fp, lr}
   15334:	add	fp, sp, #16
   15338:	sub	sp, sp, #48	; 0x30
   1533c:	mov	ip, r3
   15340:	movw	r3, #4768	; 0x12a0
   15344:	mov	r6, #32
   15348:	cmp	r1, #0
   1534c:	mov	r4, sp
   15350:	movt	r3, #3
   15354:	cmpne	r2, #0
   15358:	add	r5, r4, #16
   1535c:	add	lr, r3, #16
   15360:	vld1.64	{d16-d17}, [r3], r6
   15364:	vld1.64	{d18-d19}, [lr]
   15368:	vld1.64	{d20-d21}, [r3]
   1536c:	mov	r3, #10
   15370:	vst1.64	{d16-d17}, [r4], r6
   15374:	vst1.64	{d18-d19}, [r5]
   15378:	vst1.64	{d20-d21}, [r4]
   1537c:	str	r3, [sp]
   15380:	bne	15388 <__assert_fail@plt+0x42c8>
   15384:	bl	110b4 <abort@plt>
   15388:	str	r2, [sp, #44]	; 0x2c
   1538c:	str	r1, [sp, #40]	; 0x28
   15390:	mov	r3, sp
   15394:	mov	r1, ip
   15398:	mvn	r2, #0
   1539c:	bl	14db8 <__assert_fail@plt+0x3cf8>
   153a0:	sub	sp, fp, #16
   153a4:	pop	{r4, r5, r6, sl, fp, pc}
   153a8:	push	{r4, r5, r6, sl, fp, lr}
   153ac:	add	fp, sp, #16
   153b0:	sub	sp, sp, #48	; 0x30
   153b4:	mov	lr, r3
   153b8:	movw	r3, #4768	; 0x12a0
   153bc:	mov	r6, #32
   153c0:	cmp	r1, #0
   153c4:	mov	r4, sp
   153c8:	movt	r3, #3
   153cc:	cmpne	r2, #0
   153d0:	add	r5, r4, #16
   153d4:	add	ip, r3, #16
   153d8:	vld1.64	{d16-d17}, [r3], r6
   153dc:	vld1.64	{d18-d19}, [ip]
   153e0:	vld1.64	{d20-d21}, [r3]
   153e4:	mov	r3, #10
   153e8:	vst1.64	{d16-d17}, [r4], r6
   153ec:	vst1.64	{d18-d19}, [r5]
   153f0:	vst1.64	{d20-d21}, [r4]
   153f4:	str	r3, [sp]
   153f8:	bne	15400 <__assert_fail@plt+0x4340>
   153fc:	bl	110b4 <abort@plt>
   15400:	ldr	ip, [fp, #8]
   15404:	str	r2, [sp, #44]	; 0x2c
   15408:	str	r1, [sp, #40]	; 0x28
   1540c:	mov	r3, sp
   15410:	mov	r1, lr
   15414:	mov	r2, ip
   15418:	bl	14db8 <__assert_fail@plt+0x3cf8>
   1541c:	sub	sp, fp, #16
   15420:	pop	{r4, r5, r6, sl, fp, pc}
   15424:	push	{r4, sl, fp, lr}
   15428:	add	fp, sp, #8
   1542c:	sub	sp, sp, #48	; 0x30
   15430:	movw	r3, #4768	; 0x12a0
   15434:	mov	lr, #32
   15438:	mov	ip, r2
   1543c:	cmp	r0, #0
   15440:	movt	r3, #3
   15444:	cmpne	r1, #0
   15448:	add	r2, r3, #16
   1544c:	vld1.64	{d16-d17}, [r3], lr
   15450:	vld1.64	{d20-d21}, [r3]
   15454:	vld1.64	{d18-d19}, [r2]
   15458:	mov	r2, sp
   1545c:	add	r4, r2, #16
   15460:	vst1.64	{d16-d17}, [r2], lr
   15464:	vst1.64	{d20-d21}, [r2]
   15468:	mov	r2, #10
   1546c:	vst1.64	{d18-d19}, [r4]
   15470:	str	r2, [sp]
   15474:	bne	1547c <__assert_fail@plt+0x43bc>
   15478:	bl	110b4 <abort@plt>
   1547c:	str	r1, [sp, #44]	; 0x2c
   15480:	str	r0, [sp, #40]	; 0x28
   15484:	mov	r3, sp
   15488:	mov	r0, #0
   1548c:	mov	r1, ip
   15490:	mvn	r2, #0
   15494:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15498:	sub	sp, fp, #8
   1549c:	pop	{r4, sl, fp, pc}
   154a0:	push	{r4, r5, fp, lr}
   154a4:	add	fp, sp, #8
   154a8:	sub	sp, sp, #48	; 0x30
   154ac:	mov	ip, r3
   154b0:	movw	r3, #4768	; 0x12a0
   154b4:	mov	r4, #32
   154b8:	mov	lr, r2
   154bc:	cmp	r0, #0
   154c0:	movt	r3, #3
   154c4:	cmpne	r1, #0
   154c8:	add	r2, r3, #16
   154cc:	vld1.64	{d16-d17}, [r3], r4
   154d0:	vld1.64	{d20-d21}, [r3]
   154d4:	vld1.64	{d18-d19}, [r2]
   154d8:	mov	r2, sp
   154dc:	add	r5, r2, #16
   154e0:	vst1.64	{d16-d17}, [r2], r4
   154e4:	vst1.64	{d20-d21}, [r2]
   154e8:	mov	r2, #10
   154ec:	vst1.64	{d18-d19}, [r5]
   154f0:	str	r2, [sp]
   154f4:	bne	154fc <__assert_fail@plt+0x443c>
   154f8:	bl	110b4 <abort@plt>
   154fc:	str	r1, [sp, #44]	; 0x2c
   15500:	str	r0, [sp, #40]	; 0x28
   15504:	mov	r3, sp
   15508:	mov	r0, #0
   1550c:	mov	r1, lr
   15510:	mov	r2, ip
   15514:	bl	14db8 <__assert_fail@plt+0x3cf8>
   15518:	sub	sp, fp, #8
   1551c:	pop	{r4, r5, fp, pc}
   15520:	movw	r3, #37112	; 0x90f8
   15524:	movt	r3, #2
   15528:	b	14db8 <__assert_fail@plt+0x3cf8>
   1552c:	movw	r3, #37112	; 0x90f8
   15530:	mov	r2, r1
   15534:	mov	r1, r0
   15538:	mov	r0, #0
   1553c:	movt	r3, #2
   15540:	b	14db8 <__assert_fail@plt+0x3cf8>
   15544:	movw	r3, #37112	; 0x90f8
   15548:	mvn	r2, #0
   1554c:	movt	r3, #2
   15550:	b	14db8 <__assert_fail@plt+0x3cf8>
   15554:	movw	r3, #37112	; 0x90f8
   15558:	mov	r1, r0
   1555c:	mov	r0, #0
   15560:	mvn	r2, #0
   15564:	movt	r3, #2
   15568:	b	14db8 <__assert_fail@plt+0x3cf8>
   1556c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15570:	add	fp, sp, #24
   15574:	sub	sp, sp, #32
   15578:	ldr	r6, [fp, #12]
   1557c:	ldr	r7, [fp, #8]
   15580:	mov	r4, r2
   15584:	mov	r8, r0
   15588:	cmp	r1, #0
   1558c:	beq	155b4 <__assert_fail@plt+0x44f4>
   15590:	movw	r2, #32108	; 0x7d6c
   15594:	mov	r5, r1
   15598:	str	r3, [sp, #4]
   1559c:	str	r4, [sp]
   155a0:	mov	r0, r8
   155a4:	mov	r1, #1
   155a8:	movt	r2, #1
   155ac:	mov	r3, r5
   155b0:	b	155cc <__assert_fail@plt+0x450c>
   155b4:	movw	r2, #32120	; 0x7d78
   155b8:	str	r3, [sp]
   155bc:	mov	r0, r8
   155c0:	mov	r1, #1
   155c4:	mov	r3, r4
   155c8:	movt	r2, #1
   155cc:	bl	11018 <__fprintf_chk@plt>
   155d0:	movw	r1, #32127	; 0x7d7f
   155d4:	mov	r0, #0
   155d8:	mov	r2, #5
   155dc:	movt	r1, #1
   155e0:	bl	10eec <dcgettext@plt>
   155e4:	movw	r2, #32845	; 0x804d
   155e8:	mov	r3, r0
   155ec:	movw	r0, #2022	; 0x7e6
   155f0:	mov	r1, #1
   155f4:	movt	r2, #1
   155f8:	str	r0, [sp]
   155fc:	mov	r0, r8
   15600:	bl	11018 <__fprintf_chk@plt>
   15604:	movw	r4, #31440	; 0x7ad0
   15608:	mov	r1, r8
   1560c:	movt	r4, #1
   15610:	mov	r0, r4
   15614:	bl	10e5c <fputs_unlocked@plt>
   15618:	movw	r1, #32131	; 0x7d83
   1561c:	mov	r0, #0
   15620:	mov	r2, #5
   15624:	movt	r1, #1
   15628:	bl	10eec <dcgettext@plt>
   1562c:	movw	r3, #32302	; 0x7e2e
   15630:	mov	r2, r0
   15634:	mov	r0, r8
   15638:	mov	r1, #1
   1563c:	movt	r3, #1
   15640:	bl	11018 <__fprintf_chk@plt>
   15644:	mov	r0, r4
   15648:	mov	r1, r8
   1564c:	bl	10e5c <fputs_unlocked@plt>
   15650:	cmp	r6, #9
   15654:	bhi	15690 <__assert_fail@plt+0x45d0>
   15658:	add	r0, pc, #0
   1565c:	ldr	pc, [r0, r6, lsl #2]
   15660:	andeq	r5, r1, r8, lsl #13
   15664:	muleq	r1, ip, r6
   15668:	andeq	r5, r1, ip, asr #13
   1566c:	strdeq	r5, [r1], -r4
   15670:	andeq	r5, r1, ip, lsl r7
   15674:	andeq	r5, r1, r4, asr #14
   15678:	andeq	r5, r1, ip, ror #14
   1567c:	andeq	r5, r1, r4, lsr #15
   15680:	andeq	r5, r1, ip, asr #16
   15684:	strdeq	r5, [r1], -r4
   15688:	sub	sp, fp, #24
   1568c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15690:	movw	r1, #32655	; 0x7f8f
   15694:	movt	r1, #1
   15698:	b	157fc <__assert_fail@plt+0x473c>
   1569c:	movw	r1, #32336	; 0x7e50
   156a0:	mov	r0, #0
   156a4:	mov	r2, #5
   156a8:	movt	r1, #1
   156ac:	bl	10eec <dcgettext@plt>
   156b0:	ldr	r3, [r7]
   156b4:	mov	r2, r0
   156b8:	mov	r0, r8
   156bc:	mov	r1, #1
   156c0:	sub	sp, fp, #24
   156c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   156c8:	b	11018 <__fprintf_chk@plt>
   156cc:	movw	r1, #32352	; 0x7e60
   156d0:	mov	r0, #0
   156d4:	mov	r2, #5
   156d8:	movt	r1, #1
   156dc:	bl	10eec <dcgettext@plt>
   156e0:	mov	r2, r0
   156e4:	ldr	r3, [r7]
   156e8:	ldr	r0, [r7, #4]
   156ec:	str	r0, [sp]
   156f0:	b	157e0 <__assert_fail@plt+0x4720>
   156f4:	movw	r1, #32375	; 0x7e77
   156f8:	mov	r0, #0
   156fc:	mov	r2, #5
   15700:	movt	r1, #1
   15704:	bl	10eec <dcgettext@plt>
   15708:	mov	r2, r0
   1570c:	ldr	r3, [r7]
   15710:	ldmib	r7, {r0, r1}
   15714:	stm	sp, {r0, r1}
   15718:	b	157e0 <__assert_fail@plt+0x4720>
   1571c:	movw	r1, #32403	; 0x7e93
   15720:	mov	r0, #0
   15724:	mov	r2, #5
   15728:	movt	r1, #1
   1572c:	bl	10eec <dcgettext@plt>
   15730:	ldr	r3, [r7]
   15734:	mov	r2, r0
   15738:	ldmib	r7, {r0, r1, r7}
   1573c:	stm	sp, {r0, r1, r7}
   15740:	b	157e0 <__assert_fail@plt+0x4720>
   15744:	movw	r1, #32435	; 0x7eb3
   15748:	mov	r0, #0
   1574c:	mov	r2, #5
   15750:	movt	r1, #1
   15754:	bl	10eec <dcgettext@plt>
   15758:	ldr	r3, [r7]
   1575c:	mov	r2, r0
   15760:	ldmib	r7, {r0, r1, r6, r7}
   15764:	stm	sp, {r0, r1, r6, r7}
   15768:	b	157e0 <__assert_fail@plt+0x4720>
   1576c:	movw	r1, #32471	; 0x7ed7
   15770:	mov	r0, #0
   15774:	mov	r2, #5
   15778:	movt	r1, #1
   1577c:	bl	10eec <dcgettext@plt>
   15780:	mov	r2, r0
   15784:	ldr	r3, [r7]
   15788:	ldmib	r7, {r0, r1, r6}
   1578c:	ldr	r5, [r7, #16]
   15790:	ldr	r7, [r7, #20]
   15794:	stm	sp, {r0, r1, r6}
   15798:	str	r5, [sp, #12]
   1579c:	str	r7, [sp, #16]
   157a0:	b	157e0 <__assert_fail@plt+0x4720>
   157a4:	movw	r1, #32511	; 0x7eff
   157a8:	mov	r0, #0
   157ac:	mov	r2, #5
   157b0:	movt	r1, #1
   157b4:	bl	10eec <dcgettext@plt>
   157b8:	mov	r2, r0
   157bc:	ldr	r3, [r7]
   157c0:	ldmib	r7, {r0, r1, r6}
   157c4:	ldr	r5, [r7, #16]
   157c8:	ldr	r4, [r7, #20]
   157cc:	ldr	r7, [r7, #24]
   157d0:	stm	sp, {r0, r1, r6}
   157d4:	str	r5, [sp, #12]
   157d8:	str	r4, [sp, #16]
   157dc:	str	r7, [sp, #20]
   157e0:	mov	r0, r8
   157e4:	mov	r1, #1
   157e8:	bl	11018 <__fprintf_chk@plt>
   157ec:	sub	sp, fp, #24
   157f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157f4:	movw	r1, #32603	; 0x7f5b
   157f8:	movt	r1, #1
   157fc:	mov	r0, #0
   15800:	mov	r2, #5
   15804:	bl	10eec <dcgettext@plt>
   15808:	mov	ip, r0
   1580c:	ldr	r3, [r7]
   15810:	ldr	r0, [r7, #4]
   15814:	ldr	r1, [r7, #8]
   15818:	ldr	r6, [r7, #12]
   1581c:	ldr	r5, [r7, #16]
   15820:	ldr	r4, [r7, #20]
   15824:	ldr	r2, [r7, #24]
   15828:	ldr	lr, [r7, #28]
   1582c:	ldr	r7, [r7, #32]
   15830:	stm	sp, {r0, r1, r6}
   15834:	str	r5, [sp, #12]
   15838:	str	r4, [sp, #16]
   1583c:	str	r2, [sp, #20]
   15840:	str	lr, [sp, #24]
   15844:	str	r7, [sp, #28]
   15848:	b	15890 <__assert_fail@plt+0x47d0>
   1584c:	movw	r1, #32555	; 0x7f2b
   15850:	mov	r0, #0
   15854:	mov	r2, #5
   15858:	movt	r1, #1
   1585c:	bl	10eec <dcgettext@plt>
   15860:	mov	ip, r0
   15864:	ldr	r3, [r7]
   15868:	ldmib	r7, {r0, r1, r6}
   1586c:	ldr	r5, [r7, #16]
   15870:	ldr	r4, [r7, #20]
   15874:	ldr	r2, [r7, #24]
   15878:	ldr	r7, [r7, #28]
   1587c:	stm	sp, {r0, r1, r6}
   15880:	str	r5, [sp, #12]
   15884:	str	r4, [sp, #16]
   15888:	str	r2, [sp, #20]
   1588c:	str	r7, [sp, #24]
   15890:	mov	r0, r8
   15894:	mov	r1, #1
   15898:	mov	r2, ip
   1589c:	bl	11018 <__fprintf_chk@plt>
   158a0:	sub	sp, fp, #24
   158a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158a8:	push	{r4, sl, fp, lr}
   158ac:	add	fp, sp, #8
   158b0:	sub	sp, sp, #8
   158b4:	ldr	ip, [fp, #8]
   158b8:	mov	lr, #0
   158bc:	ldr	r4, [ip, lr, lsl #2]
   158c0:	add	lr, lr, #1
   158c4:	cmp	r4, #0
   158c8:	bne	158bc <__assert_fail@plt+0x47fc>
   158cc:	sub	r4, lr, #1
   158d0:	str	ip, [sp]
   158d4:	str	r4, [sp, #4]
   158d8:	bl	1556c <__assert_fail@plt+0x44ac>
   158dc:	sub	sp, fp, #8
   158e0:	pop	{r4, sl, fp, pc}
   158e4:	push	{fp, lr}
   158e8:	mov	fp, sp
   158ec:	sub	sp, sp, #48	; 0x30
   158f0:	ldr	ip, [fp, #8]
   158f4:	ldr	lr, [ip]
   158f8:	cmp	lr, #0
   158fc:	str	lr, [sp, #8]
   15900:	beq	1599c <__assert_fail@plt+0x48dc>
   15904:	ldr	lr, [ip, #4]
   15908:	cmp	lr, #0
   1590c:	str	lr, [sp, #12]
   15910:	beq	159a4 <__assert_fail@plt+0x48e4>
   15914:	ldr	lr, [ip, #8]
   15918:	cmp	lr, #0
   1591c:	str	lr, [sp, #16]
   15920:	beq	159ac <__assert_fail@plt+0x48ec>
   15924:	ldr	lr, [ip, #12]
   15928:	cmp	lr, #0
   1592c:	str	lr, [sp, #20]
   15930:	beq	159b4 <__assert_fail@plt+0x48f4>
   15934:	ldr	lr, [ip, #16]
   15938:	cmp	lr, #0
   1593c:	str	lr, [sp, #24]
   15940:	beq	159bc <__assert_fail@plt+0x48fc>
   15944:	ldr	lr, [ip, #20]
   15948:	cmp	lr, #0
   1594c:	str	lr, [sp, #28]
   15950:	beq	159c4 <__assert_fail@plt+0x4904>
   15954:	ldr	lr, [ip, #24]
   15958:	cmp	lr, #0
   1595c:	str	lr, [sp, #32]
   15960:	beq	159cc <__assert_fail@plt+0x490c>
   15964:	ldr	lr, [ip, #28]
   15968:	cmp	lr, #0
   1596c:	str	lr, [sp, #36]	; 0x24
   15970:	beq	159d4 <__assert_fail@plt+0x4914>
   15974:	ldr	lr, [ip, #32]
   15978:	cmp	lr, #0
   1597c:	str	lr, [sp, #40]	; 0x28
   15980:	beq	159dc <__assert_fail@plt+0x491c>
   15984:	ldr	lr, [ip, #36]	; 0x24
   15988:	mov	ip, #10
   1598c:	cmp	lr, #0
   15990:	str	lr, [sp, #44]	; 0x2c
   15994:	movweq	ip, #9
   15998:	b	159e0 <__assert_fail@plt+0x4920>
   1599c:	mov	ip, #0
   159a0:	b	159e0 <__assert_fail@plt+0x4920>
   159a4:	mov	ip, #1
   159a8:	b	159e0 <__assert_fail@plt+0x4920>
   159ac:	mov	ip, #2
   159b0:	b	159e0 <__assert_fail@plt+0x4920>
   159b4:	mov	ip, #3
   159b8:	b	159e0 <__assert_fail@plt+0x4920>
   159bc:	mov	ip, #4
   159c0:	b	159e0 <__assert_fail@plt+0x4920>
   159c4:	mov	ip, #5
   159c8:	b	159e0 <__assert_fail@plt+0x4920>
   159cc:	mov	ip, #6
   159d0:	b	159e0 <__assert_fail@plt+0x4920>
   159d4:	mov	ip, #7
   159d8:	b	159e0 <__assert_fail@plt+0x4920>
   159dc:	mov	ip, #8
   159e0:	add	lr, sp, #8
   159e4:	str	ip, [sp, #4]
   159e8:	str	lr, [sp]
   159ec:	bl	1556c <__assert_fail@plt+0x44ac>
   159f0:	mov	sp, fp
   159f4:	pop	{fp, pc}
   159f8:	push	{fp, lr}
   159fc:	mov	fp, sp
   15a00:	sub	sp, sp, #56	; 0x38
   15a04:	add	ip, fp, #8
   15a08:	str	ip, [sp, #12]
   15a0c:	ldr	lr, [fp, #8]
   15a10:	cmp	lr, #0
   15a14:	str	lr, [sp, #16]
   15a18:	beq	15ab4 <__assert_fail@plt+0x49f4>
   15a1c:	ldr	lr, [ip, #4]
   15a20:	cmp	lr, #0
   15a24:	str	lr, [sp, #20]
   15a28:	beq	15abc <__assert_fail@plt+0x49fc>
   15a2c:	ldr	lr, [ip, #8]
   15a30:	cmp	lr, #0
   15a34:	str	lr, [sp, #24]
   15a38:	beq	15ac4 <__assert_fail@plt+0x4a04>
   15a3c:	ldr	lr, [ip, #12]
   15a40:	cmp	lr, #0
   15a44:	str	lr, [sp, #28]
   15a48:	beq	15acc <__assert_fail@plt+0x4a0c>
   15a4c:	ldr	lr, [ip, #16]
   15a50:	cmp	lr, #0
   15a54:	str	lr, [sp, #32]
   15a58:	beq	15ad4 <__assert_fail@plt+0x4a14>
   15a5c:	ldr	lr, [ip, #20]
   15a60:	cmp	lr, #0
   15a64:	str	lr, [sp, #36]	; 0x24
   15a68:	beq	15adc <__assert_fail@plt+0x4a1c>
   15a6c:	ldr	lr, [ip, #24]
   15a70:	cmp	lr, #0
   15a74:	str	lr, [sp, #40]	; 0x28
   15a78:	beq	15ae4 <__assert_fail@plt+0x4a24>
   15a7c:	ldr	lr, [ip, #28]
   15a80:	cmp	lr, #0
   15a84:	str	lr, [sp, #44]	; 0x2c
   15a88:	beq	15aec <__assert_fail@plt+0x4a2c>
   15a8c:	ldr	lr, [ip, #32]
   15a90:	cmp	lr, #0
   15a94:	str	lr, [sp, #48]	; 0x30
   15a98:	beq	15af4 <__assert_fail@plt+0x4a34>
   15a9c:	ldr	lr, [ip, #36]	; 0x24
   15aa0:	mov	ip, #10
   15aa4:	cmp	lr, #0
   15aa8:	str	lr, [sp, #52]	; 0x34
   15aac:	movweq	ip, #9
   15ab0:	b	15af8 <__assert_fail@plt+0x4a38>
   15ab4:	mov	ip, #0
   15ab8:	b	15af8 <__assert_fail@plt+0x4a38>
   15abc:	mov	ip, #1
   15ac0:	b	15af8 <__assert_fail@plt+0x4a38>
   15ac4:	mov	ip, #2
   15ac8:	b	15af8 <__assert_fail@plt+0x4a38>
   15acc:	mov	ip, #3
   15ad0:	b	15af8 <__assert_fail@plt+0x4a38>
   15ad4:	mov	ip, #4
   15ad8:	b	15af8 <__assert_fail@plt+0x4a38>
   15adc:	mov	ip, #5
   15ae0:	b	15af8 <__assert_fail@plt+0x4a38>
   15ae4:	mov	ip, #6
   15ae8:	b	15af8 <__assert_fail@plt+0x4a38>
   15aec:	mov	ip, #7
   15af0:	b	15af8 <__assert_fail@plt+0x4a38>
   15af4:	mov	ip, #8
   15af8:	add	lr, sp, #16
   15afc:	str	ip, [sp, #4]
   15b00:	str	lr, [sp]
   15b04:	bl	1556c <__assert_fail@plt+0x44ac>
   15b08:	mov	sp, fp
   15b0c:	pop	{fp, pc}
   15b10:	push	{fp, lr}
   15b14:	mov	fp, sp
   15b18:	movw	r0, #37204	; 0x9154
   15b1c:	movt	r0, #2
   15b20:	ldr	r1, [r0]
   15b24:	movw	r0, #31440	; 0x7ad0
   15b28:	movt	r0, #1
   15b2c:	bl	10e5c <fputs_unlocked@plt>
   15b30:	movw	r1, #32715	; 0x7fcb
   15b34:	mov	r0, #0
   15b38:	mov	r2, #5
   15b3c:	movt	r1, #1
   15b40:	bl	10eec <dcgettext@plt>
   15b44:	movw	r2, #32735	; 0x7fdf
   15b48:	mov	r1, r0
   15b4c:	mov	r0, #1
   15b50:	movt	r2, #1
   15b54:	bl	11000 <__printf_chk@plt>
   15b58:	movw	r1, #32757	; 0x7ff5
   15b5c:	mov	r0, #0
   15b60:	mov	r2, #5
   15b64:	movt	r1, #1
   15b68:	bl	10eec <dcgettext@plt>
   15b6c:	movw	r2, #30908	; 0x78bc
   15b70:	movw	r3, #31249	; 0x7a11
   15b74:	mov	r1, r0
   15b78:	mov	r0, #1
   15b7c:	movt	r2, #1
   15b80:	movt	r3, #1
   15b84:	bl	11000 <__printf_chk@plt>
   15b88:	movw	r1, #32777	; 0x8009
   15b8c:	mov	r0, #0
   15b90:	mov	r2, #5
   15b94:	movt	r1, #1
   15b98:	bl	10eec <dcgettext@plt>
   15b9c:	movw	r2, #32816	; 0x8030
   15ba0:	mov	r1, r0
   15ba4:	mov	r0, #1
   15ba8:	movt	r2, #1
   15bac:	pop	{fp, lr}
   15bb0:	b	11000 <__printf_chk@plt>
   15bb4:	push	{r4, r5, r6, sl, fp, lr}
   15bb8:	add	fp, sp, #16
   15bbc:	mov	r4, r2
   15bc0:	mov	r5, r1
   15bc4:	mov	r6, r0
   15bc8:	bl	1717c <__assert_fail@plt+0x60bc>
   15bcc:	cmp	r0, #0
   15bd0:	popne	{r4, r5, r6, sl, fp, pc}
   15bd4:	cmp	r6, #0
   15bd8:	beq	15bec <__assert_fail@plt+0x4b2c>
   15bdc:	cmp	r5, #0
   15be0:	cmpne	r4, #0
   15be4:	bne	15bec <__assert_fail@plt+0x4b2c>
   15be8:	pop	{r4, r5, r6, sl, fp, pc}
   15bec:	bl	16168 <__assert_fail@plt+0x50a8>
   15bf0:	push	{r4, r5, r6, sl, fp, lr}
   15bf4:	add	fp, sp, #16
   15bf8:	mov	r4, r2
   15bfc:	mov	r5, r1
   15c00:	mov	r6, r0
   15c04:	bl	1717c <__assert_fail@plt+0x60bc>
   15c08:	cmp	r0, #0
   15c0c:	popne	{r4, r5, r6, sl, fp, pc}
   15c10:	cmp	r6, #0
   15c14:	beq	15c28 <__assert_fail@plt+0x4b68>
   15c18:	cmp	r5, #0
   15c1c:	cmpne	r4, #0
   15c20:	bne	15c28 <__assert_fail@plt+0x4b68>
   15c24:	pop	{r4, r5, r6, sl, fp, pc}
   15c28:	bl	16168 <__assert_fail@plt+0x50a8>
   15c2c:	push	{fp, lr}
   15c30:	mov	fp, sp
   15c34:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   15c38:	cmp	r0, #0
   15c3c:	popne	{fp, pc}
   15c40:	bl	16168 <__assert_fail@plt+0x50a8>
   15c44:	push	{fp, lr}
   15c48:	mov	fp, sp
   15c4c:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   15c50:	cmp	r0, #0
   15c54:	popne	{fp, pc}
   15c58:	bl	16168 <__assert_fail@plt+0x50a8>
   15c5c:	push	{fp, lr}
   15c60:	mov	fp, sp
   15c64:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   15c68:	cmp	r0, #0
   15c6c:	popne	{fp, pc}
   15c70:	bl	16168 <__assert_fail@plt+0x50a8>
   15c74:	push	{r4, r5, fp, lr}
   15c78:	add	fp, sp, #8
   15c7c:	mov	r4, r1
   15c80:	mov	r5, r0
   15c84:	bl	16fe0 <__assert_fail@plt+0x5f20>
   15c88:	cmp	r0, #0
   15c8c:	popne	{r4, r5, fp, pc}
   15c90:	cmp	r5, #0
   15c94:	beq	15ca4 <__assert_fail@plt+0x4be4>
   15c98:	cmp	r4, #0
   15c9c:	bne	15ca4 <__assert_fail@plt+0x4be4>
   15ca0:	pop	{r4, r5, fp, pc}
   15ca4:	bl	16168 <__assert_fail@plt+0x50a8>
   15ca8:	push	{fp, lr}
   15cac:	mov	fp, sp
   15cb0:	cmp	r1, #0
   15cb4:	orreq	r1, r1, #1
   15cb8:	bl	16fe0 <__assert_fail@plt+0x5f20>
   15cbc:	cmp	r0, #0
   15cc0:	popne	{fp, pc}
   15cc4:	bl	16168 <__assert_fail@plt+0x50a8>
   15cc8:	push	{fp, lr}
   15ccc:	mov	fp, sp
   15cd0:	clz	r3, r2
   15cd4:	lsr	ip, r3, #5
   15cd8:	clz	r3, r1
   15cdc:	lsr	r3, r3, #5
   15ce0:	orrs	r3, r3, ip
   15ce4:	movwne	r1, #1
   15ce8:	movwne	r2, #1
   15cec:	bl	1717c <__assert_fail@plt+0x60bc>
   15cf0:	cmp	r0, #0
   15cf4:	popne	{fp, pc}
   15cf8:	bl	16168 <__assert_fail@plt+0x50a8>
   15cfc:	push	{fp, lr}
   15d00:	mov	fp, sp
   15d04:	mov	r2, r1
   15d08:	mov	r1, r0
   15d0c:	mov	r0, #0
   15d10:	bl	1717c <__assert_fail@plt+0x60bc>
   15d14:	cmp	r0, #0
   15d18:	popne	{fp, pc}
   15d1c:	bl	16168 <__assert_fail@plt+0x50a8>
   15d20:	push	{fp, lr}
   15d24:	mov	fp, sp
   15d28:	mov	r2, r1
   15d2c:	mov	r1, r0
   15d30:	clz	r0, r2
   15d34:	clz	r3, r1
   15d38:	lsr	r0, r0, #5
   15d3c:	lsr	r3, r3, #5
   15d40:	orrs	r0, r3, r0
   15d44:	mov	r0, #0
   15d48:	movwne	r1, #1
   15d4c:	movwne	r2, #1
   15d50:	bl	1717c <__assert_fail@plt+0x60bc>
   15d54:	cmp	r0, #0
   15d58:	popne	{fp, pc}
   15d5c:	bl	16168 <__assert_fail@plt+0x50a8>
   15d60:	push	{r4, r5, r6, sl, fp, lr}
   15d64:	add	fp, sp, #16
   15d68:	ldr	r5, [r1]
   15d6c:	mov	r4, r1
   15d70:	mov	r6, r0
   15d74:	cmp	r0, #0
   15d78:	beq	15d90 <__assert_fail@plt+0x4cd0>
   15d7c:	mov	r0, #1
   15d80:	add	r0, r0, r5, lsr #1
   15d84:	adds	r5, r5, r0
   15d88:	bcc	15d98 <__assert_fail@plt+0x4cd8>
   15d8c:	b	15dd4 <__assert_fail@plt+0x4d14>
   15d90:	cmp	r5, #0
   15d94:	movweq	r5, #64	; 0x40
   15d98:	mov	r0, r6
   15d9c:	mov	r1, r5
   15da0:	mov	r2, #1
   15da4:	bl	1717c <__assert_fail@plt+0x60bc>
   15da8:	cmp	r5, #0
   15dac:	mov	r1, r5
   15db0:	movwne	r1, #1
   15db4:	cmp	r0, #0
   15db8:	bne	15dcc <__assert_fail@plt+0x4d0c>
   15dbc:	clz	r2, r6
   15dc0:	lsr	r2, r2, #5
   15dc4:	orrs	r1, r2, r1
   15dc8:	bne	15dd4 <__assert_fail@plt+0x4d14>
   15dcc:	str	r5, [r4]
   15dd0:	pop	{r4, r5, r6, sl, fp, pc}
   15dd4:	bl	16168 <__assert_fail@plt+0x50a8>
   15dd8:	push	{r4, r5, r6, r7, fp, lr}
   15ddc:	add	fp, sp, #16
   15de0:	ldr	r5, [r1]
   15de4:	mov	r6, r2
   15de8:	mov	r4, r1
   15dec:	mov	r7, r0
   15df0:	cmp	r0, #0
   15df4:	beq	15e0c <__assert_fail@plt+0x4d4c>
   15df8:	mov	r0, #1
   15dfc:	add	r0, r0, r5, lsr #1
   15e00:	adds	r5, r5, r0
   15e04:	bcc	15e24 <__assert_fail@plt+0x4d64>
   15e08:	b	15e58 <__assert_fail@plt+0x4d98>
   15e0c:	cmp	r5, #0
   15e10:	bne	15e24 <__assert_fail@plt+0x4d64>
   15e14:	mov	r0, #64	; 0x40
   15e18:	cmp	r6, #64	; 0x40
   15e1c:	udiv	r5, r0, r6
   15e20:	addhi	r5, r5, #1
   15e24:	mov	r0, r7
   15e28:	mov	r1, r5
   15e2c:	mov	r2, r6
   15e30:	bl	1717c <__assert_fail@plt+0x60bc>
   15e34:	cmp	r0, #0
   15e38:	bne	15e50 <__assert_fail@plt+0x4d90>
   15e3c:	cmp	r7, #0
   15e40:	beq	15e58 <__assert_fail@plt+0x4d98>
   15e44:	cmp	r6, #0
   15e48:	cmpne	r5, #0
   15e4c:	bne	15e58 <__assert_fail@plt+0x4d98>
   15e50:	str	r5, [r4]
   15e54:	pop	{r4, r5, r6, r7, fp, pc}
   15e58:	bl	16168 <__assert_fail@plt+0x50a8>
   15e5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e60:	add	fp, sp, #24
   15e64:	mov	r8, r1
   15e68:	ldr	r1, [r1]
   15e6c:	mov	r5, r0
   15e70:	add	r0, r1, r1, asr #1
   15e74:	cmp	r0, r1
   15e78:	mvnvs	r0, #-2147483648	; 0x80000000
   15e7c:	cmp	r0, r3
   15e80:	mov	r7, r0
   15e84:	movgt	r7, r3
   15e88:	cmn	r3, #1
   15e8c:	movle	r7, r0
   15e90:	ldr	r0, [fp, #8]
   15e94:	cmn	r0, #1
   15e98:	ble	15ec0 <__assert_fail@plt+0x4e00>
   15e9c:	cmp	r0, #0
   15ea0:	beq	15f14 <__assert_fail@plt+0x4e54>
   15ea4:	cmn	r7, #1
   15ea8:	ble	15ee8 <__assert_fail@plt+0x4e28>
   15eac:	mvn	r4, #-2147483648	; 0x80000000
   15eb0:	udiv	r6, r4, r0
   15eb4:	cmp	r6, r7
   15eb8:	bge	15f14 <__assert_fail@plt+0x4e54>
   15ebc:	b	15f24 <__assert_fail@plt+0x4e64>
   15ec0:	cmn	r7, #1
   15ec4:	ble	15f04 <__assert_fail@plt+0x4e44>
   15ec8:	cmn	r0, #1
   15ecc:	beq	15f14 <__assert_fail@plt+0x4e54>
   15ed0:	mov	r6, #-2147483648	; 0x80000000
   15ed4:	mvn	r4, #-2147483648	; 0x80000000
   15ed8:	sdiv	r6, r6, r0
   15edc:	cmp	r6, r7
   15ee0:	bge	15f14 <__assert_fail@plt+0x4e54>
   15ee4:	b	15f24 <__assert_fail@plt+0x4e64>
   15ee8:	beq	15f14 <__assert_fail@plt+0x4e54>
   15eec:	mov	r6, #-2147483648	; 0x80000000
   15ef0:	mvn	r4, #-2147483648	; 0x80000000
   15ef4:	sdiv	r6, r6, r7
   15ef8:	cmp	r6, r0
   15efc:	bge	15f14 <__assert_fail@plt+0x4e54>
   15f00:	b	15f24 <__assert_fail@plt+0x4e64>
   15f04:	mvn	r4, #-2147483648	; 0x80000000
   15f08:	sdiv	r6, r4, r0
   15f0c:	cmp	r7, r6
   15f10:	blt	15f24 <__assert_fail@plt+0x4e64>
   15f14:	mul	r6, r7, r0
   15f18:	mov	r4, #64	; 0x40
   15f1c:	cmp	r6, #63	; 0x3f
   15f20:	bgt	15f2c <__assert_fail@plt+0x4e6c>
   15f24:	sdiv	r7, r4, r0
   15f28:	mul	r6, r7, r0
   15f2c:	cmp	r5, #0
   15f30:	moveq	r4, #0
   15f34:	streq	r4, [r8]
   15f38:	sub	r4, r7, r1
   15f3c:	cmp	r4, r2
   15f40:	bge	15fec <__assert_fail@plt+0x4f2c>
   15f44:	add	r7, r1, r2
   15f48:	mov	r6, #0
   15f4c:	mov	r2, #0
   15f50:	cmp	r7, r3
   15f54:	movwgt	r6, #1
   15f58:	cmn	r3, #1
   15f5c:	movwgt	r2, #1
   15f60:	cmp	r7, r1
   15f64:	bvs	16020 <__assert_fail@plt+0x4f60>
   15f68:	ands	r1, r2, r6
   15f6c:	bne	16020 <__assert_fail@plt+0x4f60>
   15f70:	cmn	r0, #1
   15f74:	ble	15f9c <__assert_fail@plt+0x4edc>
   15f78:	cmp	r0, #0
   15f7c:	beq	15fe8 <__assert_fail@plt+0x4f28>
   15f80:	cmn	r7, #1
   15f84:	ble	15fc0 <__assert_fail@plt+0x4f00>
   15f88:	mvn	r1, #-2147483648	; 0x80000000
   15f8c:	udiv	r1, r1, r0
   15f90:	cmp	r1, r7
   15f94:	bge	15fe8 <__assert_fail@plt+0x4f28>
   15f98:	b	16020 <__assert_fail@plt+0x4f60>
   15f9c:	cmn	r7, #1
   15fa0:	ble	15fd8 <__assert_fail@plt+0x4f18>
   15fa4:	cmn	r0, #1
   15fa8:	beq	15fe8 <__assert_fail@plt+0x4f28>
   15fac:	mov	r1, #-2147483648	; 0x80000000
   15fb0:	sdiv	r1, r1, r0
   15fb4:	cmp	r1, r7
   15fb8:	bge	15fe8 <__assert_fail@plt+0x4f28>
   15fbc:	b	16020 <__assert_fail@plt+0x4f60>
   15fc0:	beq	15fe8 <__assert_fail@plt+0x4f28>
   15fc4:	mov	r1, #-2147483648	; 0x80000000
   15fc8:	sdiv	r1, r1, r7
   15fcc:	cmp	r1, r0
   15fd0:	bge	15fe8 <__assert_fail@plt+0x4f28>
   15fd4:	b	16020 <__assert_fail@plt+0x4f60>
   15fd8:	mvn	r1, #-2147483648	; 0x80000000
   15fdc:	sdiv	r1, r1, r0
   15fe0:	cmp	r7, r1
   15fe4:	blt	16020 <__assert_fail@plt+0x4f60>
   15fe8:	mul	r6, r7, r0
   15fec:	mov	r0, r5
   15ff0:	mov	r1, r6
   15ff4:	bl	16fe0 <__assert_fail@plt+0x5f20>
   15ff8:	cmp	r6, #0
   15ffc:	movwne	r6, #1
   16000:	cmp	r0, #0
   16004:	bne	16018 <__assert_fail@plt+0x4f58>
   16008:	clz	r1, r5
   1600c:	lsr	r1, r1, #5
   16010:	orrs	r1, r1, r6
   16014:	bne	16020 <__assert_fail@plt+0x4f60>
   16018:	str	r7, [r8]
   1601c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16020:	bl	16168 <__assert_fail@plt+0x50a8>
   16024:	push	{fp, lr}
   16028:	mov	fp, sp
   1602c:	mov	r1, #1
   16030:	bl	16f5c <__assert_fail@plt+0x5e9c>
   16034:	cmp	r0, #0
   16038:	popne	{fp, pc}
   1603c:	bl	16168 <__assert_fail@plt+0x50a8>
   16040:	push	{fp, lr}
   16044:	mov	fp, sp
   16048:	bl	16f5c <__assert_fail@plt+0x5e9c>
   1604c:	cmp	r0, #0
   16050:	popne	{fp, pc}
   16054:	bl	16168 <__assert_fail@plt+0x50a8>
   16058:	push	{fp, lr}
   1605c:	mov	fp, sp
   16060:	mov	r1, #1
   16064:	bl	16f5c <__assert_fail@plt+0x5e9c>
   16068:	cmp	r0, #0
   1606c:	popne	{fp, pc}
   16070:	bl	16168 <__assert_fail@plt+0x50a8>
   16074:	push	{fp, lr}
   16078:	mov	fp, sp
   1607c:	bl	16f5c <__assert_fail@plt+0x5e9c>
   16080:	cmp	r0, #0
   16084:	popne	{fp, pc}
   16088:	bl	16168 <__assert_fail@plt+0x50a8>
   1608c:	push	{r4, r5, fp, lr}
   16090:	add	fp, sp, #8
   16094:	mov	r5, r0
   16098:	mov	r0, r1
   1609c:	mov	r4, r1
   160a0:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   160a4:	cmp	r0, #0
   160a8:	beq	160bc <__assert_fail@plt+0x4ffc>
   160ac:	mov	r1, r5
   160b0:	mov	r2, r4
   160b4:	pop	{r4, r5, fp, lr}
   160b8:	b	10ebc <memcpy@plt>
   160bc:	bl	16168 <__assert_fail@plt+0x50a8>
   160c0:	push	{r4, r5, fp, lr}
   160c4:	add	fp, sp, #8
   160c8:	mov	r5, r0
   160cc:	mov	r0, r1
   160d0:	mov	r4, r1
   160d4:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   160d8:	cmp	r0, #0
   160dc:	beq	160f0 <__assert_fail@plt+0x5030>
   160e0:	mov	r1, r5
   160e4:	mov	r2, r4
   160e8:	pop	{r4, r5, fp, lr}
   160ec:	b	10ebc <memcpy@plt>
   160f0:	bl	16168 <__assert_fail@plt+0x50a8>
   160f4:	push	{r4, r5, fp, lr}
   160f8:	add	fp, sp, #8
   160fc:	mov	r5, r0
   16100:	add	r0, r1, #1
   16104:	mov	r4, r1
   16108:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   1610c:	cmp	r0, #0
   16110:	beq	1612c <__assert_fail@plt+0x506c>
   16114:	mov	r1, #0
   16118:	mov	r2, r4
   1611c:	strb	r1, [r0, r4]
   16120:	mov	r1, r5
   16124:	pop	{r4, r5, fp, lr}
   16128:	b	10ebc <memcpy@plt>
   1612c:	bl	16168 <__assert_fail@plt+0x50a8>
   16130:	push	{r4, r5, fp, lr}
   16134:	add	fp, sp, #8
   16138:	mov	r4, r0
   1613c:	bl	10fc4 <strlen@plt>
   16140:	add	r5, r0, #1
   16144:	mov	r0, r5
   16148:	bl	16fb0 <__assert_fail@plt+0x5ef0>
   1614c:	cmp	r0, #0
   16150:	beq	16164 <__assert_fail@plt+0x50a4>
   16154:	mov	r1, r4
   16158:	mov	r2, r5
   1615c:	pop	{r4, r5, fp, lr}
   16160:	b	10ebc <memcpy@plt>
   16164:	bl	16168 <__assert_fail@plt+0x50a8>
   16168:	push	{fp, lr}
   1616c:	mov	fp, sp
   16170:	movw	r0, #37108	; 0x90f4
   16174:	movw	r1, #32892	; 0x807c
   16178:	mov	r2, #5
   1617c:	movt	r0, #2
   16180:	movt	r1, #1
   16184:	ldr	r4, [r0]
   16188:	mov	r0, #0
   1618c:	bl	10eec <dcgettext@plt>
   16190:	movw	r2, #31855	; 0x7c6f
   16194:	mov	r3, r0
   16198:	mov	r0, r4
   1619c:	mov	r1, #0
   161a0:	movt	r2, #1
   161a4:	bl	10f58 <error@plt>
   161a8:	bl	110b4 <abort@plt>
   161ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   161b0:	add	fp, sp, #24
   161b4:	sub	sp, sp, #16
   161b8:	mov	r8, r0
   161bc:	ldr	r0, [fp, #16]
   161c0:	mov	r5, r3
   161c4:	mov	r6, r2
   161c8:	mov	r2, r1
   161cc:	add	r3, sp, #8
   161d0:	mov	r1, #0
   161d4:	str	r0, [sp]
   161d8:	mov	r0, r8
   161dc:	bl	162a8 <__assert_fail@plt+0x51e8>
   161e0:	cmp	r0, #0
   161e4:	bne	16270 <__assert_fail@plt+0x51b0>
   161e8:	ldr	r4, [sp, #8]
   161ec:	ldr	r7, [sp, #12]
   161f0:	subs	r0, r4, r6
   161f4:	sbcs	r0, r7, r5
   161f8:	bcc	1621c <__assert_fail@plt+0x515c>
   161fc:	ldr	r1, [fp, #8]
   16200:	ldr	r0, [fp, #12]
   16204:	subs	r1, r1, r4
   16208:	sbcs	r0, r0, r7
   1620c:	movcs	r0, r4
   16210:	movcs	r1, r7
   16214:	subcs	sp, fp, #24
   16218:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1621c:	bl	10fdc <__errno_location@plt>
   16220:	subs	r1, r4, #1073741824	; 0x40000000
   16224:	sbcs	r1, r7, #0
   16228:	movcc	r1, #34	; 0x22
   1622c:	movcs	r1, #75	; 0x4b
   16230:	str	r1, [r0]
   16234:	ldr	r6, [r0]
   16238:	ldr	r4, [fp, #24]
   1623c:	ldr	r5, [fp, #20]
   16240:	mov	r0, r8
   16244:	bl	15554 <__assert_fail@plt+0x4494>
   16248:	subs	r1, r6, #22
   1624c:	movw	r2, #31851	; 0x7c6b
   16250:	str	r0, [sp]
   16254:	mov	r3, r5
   16258:	movne	r1, r6
   1625c:	cmp	r4, #0
   16260:	movt	r2, #1
   16264:	movweq	r4, #1
   16268:	mov	r0, r4
   1626c:	bl	10f58 <error@plt>
   16270:	cmp	r0, #1
   16274:	beq	1628c <__assert_fail@plt+0x51cc>
   16278:	cmp	r0, #3
   1627c:	bne	16298 <__assert_fail@plt+0x51d8>
   16280:	bl	10fdc <__errno_location@plt>
   16284:	mov	r1, #0
   16288:	b	16230 <__assert_fail@plt+0x5170>
   1628c:	bl	10fdc <__errno_location@plt>
   16290:	mov	r1, #75	; 0x4b
   16294:	b	16230 <__assert_fail@plt+0x5170>
   16298:	bl	10fdc <__errno_location@plt>
   1629c:	b	16234 <__assert_fail@plt+0x5174>
   162a0:	mov	r1, #10
   162a4:	b	161ac <__assert_fail@plt+0x50ec>
   162a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162ac:	add	fp, sp, #28
   162b0:	sub	sp, sp, #44	; 0x2c
   162b4:	cmp	r2, #37	; 0x25
   162b8:	bcs	16f3c <__assert_fail@plt+0x5e7c>
   162bc:	ldr	sl, [fp, #8]
   162c0:	mov	r6, r2
   162c4:	mov	r7, r1
   162c8:	mov	r4, r0
   162cc:	str	r3, [sp, #36]	; 0x24
   162d0:	bl	10fdc <__errno_location@plt>
   162d4:	mov	r5, r0
   162d8:	mov	r0, #0
   162dc:	str	r0, [r5]
   162e0:	bl	10fa0 <__ctype_b_loc@plt>
   162e4:	ldr	r1, [r0]
   162e8:	mov	r2, r4
   162ec:	ldrb	r0, [r2], #1
   162f0:	add	r3, r1, r0, lsl #1
   162f4:	ldrb	r3, [r3, #1]
   162f8:	tst	r3, #32
   162fc:	bne	162ec <__assert_fail@plt+0x522c>
   16300:	cmp	r7, #0
   16304:	sub	r9, fp, #32
   16308:	mov	r8, #4
   1630c:	movne	r9, r7
   16310:	cmp	r0, #45	; 0x2d
   16314:	beq	166d4 <__assert_fail@plt+0x5614>
   16318:	mov	r0, r4
   1631c:	mov	r1, r9
   16320:	mov	r2, r6
   16324:	mov	r3, #0
   16328:	bl	10ec8 <__strtoull_internal@plt>
   1632c:	mov	r7, r1
   16330:	ldr	r1, [r9]
   16334:	cmp	r1, r4
   16338:	beq	16370 <__assert_fail@plt+0x52b0>
   1633c:	mov	r6, r0
   16340:	ldr	r0, [r5]
   16344:	cmp	r0, #0
   16348:	beq	1668c <__assert_fail@plt+0x55cc>
   1634c:	cmp	r0, #34	; 0x22
   16350:	bne	166d4 <__assert_fail@plt+0x5614>
   16354:	mov	r8, #1
   16358:	cmp	sl, #0
   1635c:	beq	16f28 <__assert_fail@plt+0x5e68>
   16360:	ldrb	r4, [r1]
   16364:	cmp	r4, #0
   16368:	bne	163b4 <__assert_fail@plt+0x52f4>
   1636c:	b	16f28 <__assert_fail@plt+0x5e68>
   16370:	cmp	sl, #0
   16374:	beq	166d4 <__assert_fail@plt+0x5614>
   16378:	mov	r5, r1
   1637c:	ldrb	r1, [r4]
   16380:	cmp	r1, #0
   16384:	beq	166d4 <__assert_fail@plt+0x5614>
   16388:	mov	r0, sl
   1638c:	bl	10fd0 <strchr@plt>
   16390:	cmp	r0, #0
   16394:	beq	166d4 <__assert_fail@plt+0x5614>
   16398:	mov	r1, r5
   1639c:	mov	r8, #0
   163a0:	mov	r6, #1
   163a4:	mov	r7, #0
   163a8:	ldrb	r4, [r1]
   163ac:	cmp	r4, #0
   163b0:	beq	16f28 <__assert_fail@plt+0x5e68>
   163b4:	str	r1, [sp, #32]
   163b8:	mov	r0, sl
   163bc:	mov	r1, r4
   163c0:	bl	10fd0 <strchr@plt>
   163c4:	cmp	r0, #0
   163c8:	beq	166c8 <__assert_fail@plt+0x5608>
   163cc:	sub	r0, r4, #69	; 0x45
   163d0:	mov	r1, #1
   163d4:	mov	r3, #0
   163d8:	mov	r5, #1024	; 0x400
   163dc:	cmp	r0, #47	; 0x2f
   163e0:	str	r1, [sp, #28]
   163e4:	bhi	164e8 <__assert_fail@plt+0x5428>
   163e8:	add	r1, pc, #0
   163ec:	ldr	pc, [r1, r0, lsl #2]
   163f0:			; <UNDEFINED> instruction: 0x000164b0
   163f4:	andeq	r6, r1, r8, ror #9
   163f8:			; <UNDEFINED> instruction: 0x000164b0
   163fc:	andeq	r6, r1, r8, ror #9
   16400:	andeq	r6, r1, r8, ror #9
   16404:	andeq	r6, r1, r8, ror #9
   16408:			; <UNDEFINED> instruction: 0x000164b0
   1640c:	andeq	r6, r1, r8, ror #9
   16410:			; <UNDEFINED> instruction: 0x000164b0
   16414:	andeq	r6, r1, r8, ror #9
   16418:	andeq	r6, r1, r8, ror #9
   1641c:			; <UNDEFINED> instruction: 0x000164b0
   16420:	andeq	r6, r1, r8, ror #9
   16424:	andeq	r6, r1, r8, ror #9
   16428:	andeq	r6, r1, r8, ror #9
   1642c:			; <UNDEFINED> instruction: 0x000164b0
   16430:	andeq	r6, r1, r8, ror #9
   16434:	andeq	r6, r1, r8, ror #9
   16438:	andeq	r6, r1, r8, ror #9
   1643c:	andeq	r6, r1, r8, ror #9
   16440:			; <UNDEFINED> instruction: 0x000164b0
   16444:			; <UNDEFINED> instruction: 0x000164b0
   16448:	andeq	r6, r1, r8, ror #9
   1644c:	andeq	r6, r1, r8, ror #9
   16450:	andeq	r6, r1, r8, ror #9
   16454:	andeq	r6, r1, r8, ror #9
   16458:	andeq	r6, r1, r8, ror #9
   1645c:	andeq	r6, r1, r8, ror #9
   16460:	andeq	r6, r1, r8, ror #9
   16464:	andeq	r6, r1, r8, ror #9
   16468:	andeq	r6, r1, r8, ror #9
   1646c:	andeq	r6, r1, r8, ror #9
   16470:	andeq	r6, r1, r8, ror #9
   16474:	andeq	r6, r1, r8, ror #9
   16478:			; <UNDEFINED> instruction: 0x000164b0
   1647c:	andeq	r6, r1, r8, ror #9
   16480:	andeq	r6, r1, r8, ror #9
   16484:	andeq	r6, r1, r8, ror #9
   16488:			; <UNDEFINED> instruction: 0x000164b0
   1648c:	andeq	r6, r1, r8, ror #9
   16490:			; <UNDEFINED> instruction: 0x000164b0
   16494:	andeq	r6, r1, r8, ror #9
   16498:	andeq	r6, r1, r8, ror #9
   1649c:	andeq	r6, r1, r8, ror #9
   164a0:	andeq	r6, r1, r8, ror #9
   164a4:	andeq	r6, r1, r8, ror #9
   164a8:	andeq	r6, r1, r8, ror #9
   164ac:			; <UNDEFINED> instruction: 0x000164b0
   164b0:	mov	r0, sl
   164b4:	mov	r1, #48	; 0x30
   164b8:	bl	10fd0 <strchr@plt>
   164bc:	cmp	r0, #0
   164c0:	beq	164e4 <__assert_fail@plt+0x5424>
   164c4:	ldr	r1, [sp, #32]
   164c8:	ldrb	r0, [r1, #1]
   164cc:	cmp	r0, #66	; 0x42
   164d0:	cmpne	r0, #68	; 0x44
   164d4:	bne	1669c <__assert_fail@plt+0x55dc>
   164d8:	mov	r5, #1000	; 0x3e8
   164dc:	mov	r0, #2
   164e0:	str	r0, [sp, #28]
   164e4:	mov	r3, #0
   164e8:	sub	r0, r4, #66	; 0x42
   164ec:	cmp	r0, #53	; 0x35
   164f0:	bhi	166c8 <__assert_fail@plt+0x5608>
   164f4:	add	r1, pc, #0
   164f8:	ldr	pc, [r1, r0, lsl #2]
   164fc:	andeq	r6, r1, r8, lsr sl
   16500:	andeq	r6, r1, r8, asr #13
   16504:	andeq	r6, r1, r8, asr #13
   16508:	andeq	r6, r1, r0, ror #20
   1650c:	andeq	r6, r1, r8, asr #13
   16510:	ldrdeq	r6, [r1], -r4
   16514:	andeq	r6, r1, r8, asr #13
   16518:	andeq	r6, r1, r8, asr #13
   1651c:	andeq	r6, r1, r8, asr #13
   16520:	andeq	r6, r1, r0, ror #13
   16524:	andeq	r6, r1, r8, asr #13
   16528:	andeq	r6, r1, r8, lsr #14
   1652c:	andeq	r6, r1, r8, asr #13
   16530:	andeq	r6, r1, r8, asr #13
   16534:			; <UNDEFINED> instruction: 0x00016bb4
   16538:	andeq	r6, r1, r8, asr #13
   1653c:	andeq	r6, r1, r8, asr #13
   16540:	andeq	r6, r1, r8, asr #13
   16544:			; <UNDEFINED> instruction: 0x000167b4
   16548:	andeq	r6, r1, r8, asr #13
   1654c:	andeq	r6, r1, r8, asr #13
   16550:	andeq	r6, r1, r8, asr #13
   16554:	andeq	r6, r1, r8, asr #13
   16558:	ldrdeq	r6, [r1], -ip
   1655c:	muleq	r1, ip, r8
   16560:	andeq	r6, r1, r8, asr #13
   16564:	andeq	r6, r1, r8, asr #13
   16568:	andeq	r6, r1, r8, asr #13
   1656c:	andeq	r6, r1, r8, asr #13
   16570:	andeq	r6, r1, r8, asr #13
   16574:	andeq	r6, r1, r8, asr #13
   16578:	andeq	r6, r1, r8, asr #13
   1657c:			; <UNDEFINED> instruction: 0x00016eb0
   16580:	andeq	r6, r1, r8, lsl #30
   16584:	andeq	r6, r1, r8, asr #13
   16588:	andeq	r6, r1, r8, asr #13
   1658c:	andeq	r6, r1, r8, asr #13
   16590:	ldrdeq	r6, [r1], -r4
   16594:	andeq	r6, r1, r8, asr #13
   16598:	andeq	r6, r1, r8, asr #13
   1659c:	andeq	r6, r1, r8, asr #13
   165a0:	andeq	r6, r1, r0, ror #13
   165a4:	andeq	r6, r1, r8, asr #13
   165a8:	andeq	r6, r1, r8, lsr #14
   165ac:	andeq	r6, r1, r8, asr #13
   165b0:	andeq	r6, r1, r8, asr #13
   165b4:	andeq	r6, r1, r8, asr #13
   165b8:	andeq	r6, r1, r8, asr #13
   165bc:	andeq	r6, r1, r8, asr #13
   165c0:	andeq	r6, r1, r8, asr #13
   165c4:			; <UNDEFINED> instruction: 0x000167b4
   165c8:	andeq	r6, r1, r8, asr #13
   165cc:	andeq	r6, r1, r8, asr #13
   165d0:	andeq	r6, r1, r4, ror #29
   165d4:	mvn	r0, #0
   165d8:	mvn	r1, #0
   165dc:	mov	r2, r5
   165e0:	mov	sl, r3
   165e4:	bl	172c4 <__assert_fail@plt+0x6204>
   165e8:	subs	r3, r0, r6
   165ec:	umull	r4, r2, r6, r5
   165f0:	mov	lr, #0
   165f4:	str	r1, [sp, #20]
   165f8:	sbcs	r3, r1, r7
   165fc:	movwcc	lr, #1
   16600:	mla	ip, r6, sl, r2
   16604:	mov	r2, r1
   16608:	mov	r2, #0
   1660c:	cmp	lr, #0
   16610:	mla	r7, r7, r5, ip
   16614:	mvnne	r4, #0
   16618:	mvnne	r7, #0
   1661c:	subs	r6, r0, r4
   16620:	sbcs	r6, r1, r7
   16624:	umull	r3, r6, r4, r5
   16628:	movwcc	r2, #1
   1662c:	cmp	r2, #0
   16630:	mvnne	r3, #0
   16634:	cmp	r2, #0
   16638:	str	r6, [sp, #16]
   1663c:	umull	r6, ip, r3, r5
   16640:	mla	r1, r3, sl, ip
   16644:	ldr	ip, [sp, #16]
   16648:	str	r1, [sp, #12]
   1664c:	mla	r4, r4, sl, ip
   16650:	mla	r4, r7, r5, r4
   16654:	mvnne	r4, #0
   16658:	subs	r0, r0, r3
   1665c:	ldr	r0, [sp, #20]
   16660:	ldr	r7, [sp, #12]
   16664:	sbcs	r0, r0, r4
   16668:	mov	r0, #0
   1666c:	mla	r7, r4, r5, r7
   16670:	movwcc	r0, #1
   16674:	cmp	r0, #0
   16678:	mov	r1, r0
   1667c:	orr	r0, lr, r2
   16680:	mvnne	r7, #0
   16684:	mvnne	r6, #0
   16688:	b	16cd4 <__assert_fail@plt+0x5c14>
   1668c:	mov	r8, r0
   16690:	cmp	sl, #0
   16694:	bne	16360 <__assert_fail@plt+0x52a0>
   16698:	b	16f28 <__assert_fail@plt+0x5e68>
   1669c:	cmp	r0, #105	; 0x69
   166a0:	mov	r3, #0
   166a4:	bne	164e8 <__assert_fail@plt+0x5428>
   166a8:	ldrb	r0, [r1, #2]
   166ac:	mov	r1, #1
   166b0:	cmp	r0, #66	; 0x42
   166b4:	movweq	r1, #3
   166b8:	str	r1, [sp, #28]
   166bc:	sub	r0, r4, #66	; 0x42
   166c0:	cmp	r0, #53	; 0x35
   166c4:	bls	164f4 <__assert_fail@plt+0x5434>
   166c8:	ldr	r0, [sp, #36]	; 0x24
   166cc:	orr	r8, r8, #2
   166d0:	strd	r6, [r0]
   166d4:	mov	r0, r8
   166d8:	sub	sp, fp, #28
   166dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166e0:	mvn	r0, #0
   166e4:	mvn	r1, #0
   166e8:	mov	r2, r5
   166ec:	mov	r4, r3
   166f0:	bl	172c4 <__assert_fail@plt+0x6204>
   166f4:	subs	r0, r0, r6
   166f8:	mov	r2, #0
   166fc:	sbcs	r0, r1, r7
   16700:	umull	r0, r1, r6, r5
   16704:	movwcc	r2, #1
   16708:	cmp	r2, #0
   1670c:	mla	r1, r6, r4, r1
   16710:	mov	r3, r2
   16714:	mvnne	r0, #0
   16718:	mla	r7, r7, r5, r1
   1671c:	mvnne	r7, #0
   16720:	mov	r6, r0
   16724:	b	16f08 <__assert_fail@plt+0x5e48>
   16728:	mvn	r0, #0
   1672c:	mvn	r1, #0
   16730:	mov	r2, r5
   16734:	str	r3, [sp, #24]
   16738:	bl	172c4 <__assert_fail@plt+0x6204>
   1673c:	subs	r3, r0, r6
   16740:	mov	ip, r0
   16744:	umull	r4, r0, r6, r5
   16748:	mov	sl, #0
   1674c:	sbcs	r3, r1, r7
   16750:	mov	r3, #0
   16754:	movwcc	r3, #1
   16758:	cmp	r3, #0
   1675c:	str	r0, [sp, #20]
   16760:	ldr	r0, [sp, #24]
   16764:	mvnne	r4, #0
   16768:	cmp	r3, #0
   1676c:	umull	lr, r2, r4, r5
   16770:	mla	r2, r4, r0, r2
   16774:	str	r2, [sp, #16]
   16778:	ldr	r2, [sp, #20]
   1677c:	mla	r6, r6, r0, r2
   16780:	ldr	r0, [sp, #16]
   16784:	mla	r6, r7, r5, r6
   16788:	mvnne	r6, #0
   1678c:	mla	r7, r6, r5, r0
   16790:	subs	r0, ip, r4
   16794:	sbcs	r0, r1, r6
   16798:	movwcc	sl, #1
   1679c:	cmp	sl, #0
   167a0:	orr	r3, r3, sl
   167a4:	mvnne	lr, #0
   167a8:	mvnne	r7, #0
   167ac:	mov	r6, lr
   167b0:	b	16f08 <__assert_fail@plt+0x5e48>
   167b4:	mvn	r0, #0
   167b8:	mvn	r1, #0
   167bc:	mov	r2, r5
   167c0:	mov	sl, r3
   167c4:	bl	172c4 <__assert_fail@plt+0x6204>
   167c8:	subs	r3, r0, r6
   167cc:	mov	ip, r1
   167d0:	umull	r2, lr, r6, r5
   167d4:	str	r0, [sp, #20]
   167d8:	sbcs	r3, r1, r7
   167dc:	mov	r1, #0
   167e0:	str	ip, [sp, #16]
   167e4:	movwcc	r1, #1
   167e8:	mla	r6, r6, sl, lr
   167ec:	mov	lr, #0
   167f0:	cmp	r1, #0
   167f4:	mla	r7, r7, r5, r6
   167f8:	mvnne	r2, #0
   167fc:	cmp	r1, #0
   16800:	umull	r3, r4, r2, r5
   16804:	mvnne	r7, #0
   16808:	mla	r4, r2, sl, r4
   1680c:	subs	r2, r0, r2
   16810:	sbcs	r2, ip, r7
   16814:	mla	r4, r7, r5, r4
   16818:	mov	r2, #0
   1681c:	movwcc	lr, #1
   16820:	cmp	lr, #0
   16824:	mvnne	r3, #0
   16828:	mvnne	r4, #0
   1682c:	subs	r7, r0, r3
   16830:	mov	r0, r5
   16834:	sbcs	r7, ip, r4
   16838:	umull	r5, r7, r3, r5
   1683c:	movwcc	r2, #1
   16840:	cmp	r2, #0
   16844:	mla	r3, r3, sl, r7
   16848:	mvnne	r5, #0
   1684c:	cmp	r2, #0
   16850:	mla	r3, r4, r0, r3
   16854:	umull	r6, ip, r5, r0
   16858:	mvnne	r3, #0
   1685c:	mla	ip, r5, sl, ip
   16860:	mla	r7, r3, r0, ip
   16864:	ldr	r0, [sp, #20]
   16868:	subs	r0, r0, r5
   1686c:	ldr	r0, [sp, #16]
   16870:	sbcs	r0, r0, r3
   16874:	mov	r0, #0
   16878:	movwcc	r0, #1
   1687c:	cmp	r0, #0
   16880:	mov	r3, r0
   16884:	orr	r0, r1, lr
   16888:	orr	r0, r0, r2
   1688c:	mvnne	r7, #0
   16890:	mvnne	r6, #0
   16894:	orr	r3, r0, r3
   16898:	b	16f08 <__assert_fail@plt+0x5e48>
   1689c:	mvn	r0, #0
   168a0:	mvn	r1, #0
   168a4:	mov	r2, r5
   168a8:	mov	r4, r3
   168ac:	str	r3, [sp, #24]
   168b0:	bl	172c4 <__assert_fail@plt+0x6204>
   168b4:	umull	r3, r2, r6, r5
   168b8:	mla	r2, r6, r4, r2
   168bc:	subs	r6, r0, r6
   168c0:	sbcs	r6, r1, r7
   168c4:	mov	r6, #0
   168c8:	mla	r2, r7, r5, r2
   168cc:	mov	r7, #0
   168d0:	movwcc	r6, #1
   168d4:	cmp	r6, #0
   168d8:	str	r6, [sp, #20]
   168dc:	mvnne	r3, #0
   168e0:	mvnne	r2, #0
   168e4:	subs	r4, r0, r3
   168e8:	umull	r6, ip, r3, r5
   168ec:	sbcs	r4, r1, r2
   168f0:	ldr	r4, [sp, #24]
   168f4:	movwcc	r7, #1
   168f8:	cmp	r7, #0
   168fc:	mov	lr, r7
   16900:	str	r7, [sp, #16]
   16904:	mvnne	r6, #0
   16908:	cmp	lr, #0
   1690c:	mov	lr, #0
   16910:	umull	sl, r7, r6, r5
   16914:	mla	r3, r3, r4, ip
   16918:	mla	r2, r2, r5, r3
   1691c:	mvnne	r2, #0
   16920:	subs	r3, r0, r6
   16924:	mla	r7, r6, r4, r7
   16928:	mov	r4, r0
   1692c:	mov	r0, #0
   16930:	mla	r7, r2, r5, r7
   16934:	sbcs	r2, r1, r2
   16938:	mov	r3, r4
   1693c:	movwcc	r0, #1
   16940:	str	r3, [sp, #4]
   16944:	cmp	r0, #0
   16948:	str	r0, [sp, #12]
   1694c:	mov	r0, r1
   16950:	mvnne	sl, #0
   16954:	mvnne	r7, #0
   16958:	str	r0, [sp, #8]
   1695c:	subs	r2, r4, sl
   16960:	ldr	r4, [sp, #24]
   16964:	sbcs	r2, r1, r7
   16968:	umull	r6, r2, sl, r5
   1696c:	movwcc	lr, #1
   16970:	cmp	lr, #0
   16974:	mvnne	r6, #0
   16978:	mla	r2, sl, r4, r2
   1697c:	cmp	lr, #0
   16980:	umull	r1, ip, r6, r5
   16984:	mla	r2, r7, r5, r2
   16988:	mvnne	r2, #0
   1698c:	mla	ip, r6, r4, ip
   16990:	subs	r6, r3, r6
   16994:	mla	r7, r2, r5, ip
   16998:	sbcs	r2, r0, r2
   1699c:	mov	ip, #0
   169a0:	mov	r2, #0
   169a4:	movwcc	ip, #1
   169a8:	cmp	ip, #0
   169ac:	mvnne	r1, #0
   169b0:	mvnne	r7, #0
   169b4:	subs	r6, r3, r1
   169b8:	ldr	r3, [sp, #24]
   169bc:	sbcs	r6, r0, r7
   169c0:	umull	r0, sl, r1, r5
   169c4:	movwcc	r2, #1
   169c8:	cmp	r2, #0
   169cc:	mvnne	r0, #0
   169d0:	mla	r1, r1, r3, sl
   169d4:	cmp	r2, #0
   169d8:	umull	r6, r4, r0, r5
   169dc:	mla	r1, r7, r5, r1
   169e0:	mvnne	r1, #0
   169e4:	mla	r4, r0, r3, r4
   169e8:	ldr	r3, [sp, #4]
   169ec:	mla	r7, r1, r5, r4
   169f0:	ldr	r5, [sp, #16]
   169f4:	subs	r0, r3, r0
   169f8:	ldr	r0, [sp, #8]
   169fc:	sbcs	r0, r0, r1
   16a00:	mov	r0, #0
   16a04:	movwcc	r0, #1
   16a08:	cmp	r0, #0
   16a0c:	mov	r1, r0
   16a10:	ldr	r0, [sp, #20]
   16a14:	mvnne	r7, #0
   16a18:	mvnne	r6, #0
   16a1c:	orr	r0, r0, r5
   16a20:	ldr	r5, [sp, #12]
   16a24:	orr	r0, r0, r5
   16a28:	orr	r0, r0, lr
   16a2c:	orr	r0, r0, ip
   16a30:	orr	r0, r0, r2
   16a34:	b	16ea4 <__assert_fail@plt+0x5de4>
   16a38:	mov	r1, #0
   16a3c:	lsl	r2, r7, #10
   16a40:	lsl	r0, r6, #10
   16a44:	lsr	r3, r7, #22
   16a48:	cmp	r1, r7, lsr #22
   16a4c:	orr	r2, r2, r6, lsr #22
   16a50:	mvnne	r0, #0
   16a54:	movwne	r3, #1
   16a58:	cmp	r1, r7, lsr #22
   16a5c:	b	16ed4 <__assert_fail@plt+0x5e14>
   16a60:	mvn	r0, #0
   16a64:	mvn	r1, #0
   16a68:	mov	r2, r5
   16a6c:	mov	sl, r3
   16a70:	bl	172c4 <__assert_fail@plt+0x6204>
   16a74:	subs	r2, r0, r6
   16a78:	mov	ip, r0
   16a7c:	mov	r0, #0
   16a80:	sbcs	r2, r1, r7
   16a84:	umull	r4, r2, r6, r5
   16a88:	movwcc	r0, #1
   16a8c:	cmp	r0, #0
   16a90:	mla	r2, r6, sl, r2
   16a94:	str	r0, [sp, #20]
   16a98:	mvnne	r4, #0
   16a9c:	cmp	r0, #0
   16aa0:	mla	r2, r7, r5, r2
   16aa4:	mov	r0, #0
   16aa8:	umull	lr, r3, r4, r5
   16aac:	mvnne	r2, #0
   16ab0:	mla	r3, r4, sl, r3
   16ab4:	mla	r6, r2, r5, r3
   16ab8:	subs	r3, ip, r4
   16abc:	mov	r3, r1
   16ac0:	sbcs	r2, r1, r2
   16ac4:	str	r3, [sp, #8]
   16ac8:	movwcc	r0, #1
   16acc:	cmp	r0, #0
   16ad0:	str	r0, [sp, #16]
   16ad4:	mov	r0, ip
   16ad8:	mvnne	lr, #0
   16adc:	mvnne	r6, #0
   16ae0:	str	r0, [sp, #12]
   16ae4:	subs	r2, ip, lr
   16ae8:	umull	r7, r4, lr, r5
   16aec:	sbcs	r2, r1, r6
   16af0:	mov	r2, #0
   16af4:	movwcc	r2, #1
   16af8:	mla	r4, lr, sl, r4
   16afc:	cmp	r2, #0
   16b00:	mla	r6, r6, r5, r4
   16b04:	mov	r4, #0
   16b08:	mvnne	r7, #0
   16b0c:	cmp	r2, #0
   16b10:	umull	r1, ip, r7, r5
   16b14:	mvnne	r6, #0
   16b18:	mla	ip, r7, sl, ip
   16b1c:	subs	r7, r0, r7
   16b20:	sbcs	r7, r3, r6
   16b24:	mla	lr, r6, r5, ip
   16b28:	mov	ip, #0
   16b2c:	movwcc	ip, #1
   16b30:	cmp	ip, #0
   16b34:	mvnne	r1, #0
   16b38:	mvnne	lr, #0
   16b3c:	subs	r7, r0, r1
   16b40:	sbcs	r7, r3, lr
   16b44:	umull	r0, r7, r1, r5
   16b48:	movwcc	r4, #1
   16b4c:	cmp	r4, #0
   16b50:	mla	r1, r1, sl, r7
   16b54:	mvnne	r0, #0
   16b58:	cmp	r4, #0
   16b5c:	mla	r1, lr, r5, r1
   16b60:	umull	r6, r3, r0, r5
   16b64:	mvnne	r1, #0
   16b68:	mla	r3, r0, sl, r3
   16b6c:	mla	r7, r1, r5, r3
   16b70:	ldr	r3, [sp, #12]
   16b74:	subs	r0, r3, r0
   16b78:	ldr	r0, [sp, #8]
   16b7c:	ldr	r3, [sp, #16]
   16b80:	sbcs	r0, r0, r1
   16b84:	mov	r0, #0
   16b88:	movwcc	r0, #1
   16b8c:	cmp	r0, #0
   16b90:	mov	r1, r0
   16b94:	ldr	r0, [sp, #20]
   16b98:	mvnne	r7, #0
   16b9c:	mvnne	r6, #0
   16ba0:	orr	r0, r0, r3
   16ba4:	orr	r0, r0, r2
   16ba8:	orr	r0, r0, ip
   16bac:	orr	r0, r0, r4
   16bb0:	b	16cd4 <__assert_fail@plt+0x5c14>
   16bb4:	mvn	r0, #0
   16bb8:	mvn	r1, #0
   16bbc:	mov	r2, r5
   16bc0:	mov	sl, r3
   16bc4:	bl	172c4 <__assert_fail@plt+0x6204>
   16bc8:	umull	r3, r2, r6, r5
   16bcc:	mov	lr, r1
   16bd0:	mov	r1, r0
   16bd4:	mla	r2, r6, sl, r2
   16bd8:	subs	r6, r0, r6
   16bdc:	mov	r0, #0
   16be0:	sbcs	r6, lr, r7
   16be4:	mla	r2, r7, r5, r2
   16be8:	movwcc	r0, #1
   16bec:	cmp	r0, #0
   16bf0:	str	r0, [sp, #20]
   16bf4:	mov	r0, r1
   16bf8:	mvnne	r3, #0
   16bfc:	mvnne	r2, #0
   16c00:	str	r0, [sp, #16]
   16c04:	subs	r4, r1, r3
   16c08:	umull	r7, ip, r3, r5
   16c0c:	sbcs	r4, lr, r2
   16c10:	mov	r4, #0
   16c14:	movwcc	r4, #1
   16c18:	mla	r3, r3, sl, ip
   16c1c:	mov	ip, #0
   16c20:	cmp	r4, #0
   16c24:	mla	r2, r2, r5, r3
   16c28:	mvnne	r7, #0
   16c2c:	cmp	r4, #0
   16c30:	umull	r1, r6, r7, r5
   16c34:	mvnne	r2, #0
   16c38:	mla	r6, r7, sl, r6
   16c3c:	mla	r3, r2, r5, r6
   16c40:	subs	r6, r0, r7
   16c44:	sbcs	r2, lr, r2
   16c48:	mov	r2, #0
   16c4c:	movwcc	ip, #1
   16c50:	cmp	ip, #0
   16c54:	mvnne	r1, #0
   16c58:	mvnne	r3, #0
   16c5c:	subs	r6, r0, r1
   16c60:	sbcs	r6, lr, r3
   16c64:	umull	r0, r6, r1, r5
   16c68:	movwcc	r2, #1
   16c6c:	cmp	r2, #0
   16c70:	mvnne	r0, #0
   16c74:	cmp	r2, #0
   16c78:	str	r6, [sp, #12]
   16c7c:	umull	r6, r7, r0, r5
   16c80:	mla	r7, r0, sl, r7
   16c84:	str	r7, [sp, #8]
   16c88:	ldr	r7, [sp, #12]
   16c8c:	mla	r1, r1, sl, r7
   16c90:	mla	r1, r3, r5, r1
   16c94:	ldr	r3, [sp, #8]
   16c98:	mvnne	r1, #0
   16c9c:	mla	r7, r1, r5, r3
   16ca0:	ldr	r3, [sp, #16]
   16ca4:	subs	r0, r3, r0
   16ca8:	sbcs	r0, lr, r1
   16cac:	mov	r0, #0
   16cb0:	movwcc	r0, #1
   16cb4:	cmp	r0, #0
   16cb8:	mov	r1, r0
   16cbc:	ldr	r0, [sp, #20]
   16cc0:	mvnne	r7, #0
   16cc4:	mvnne	r6, #0
   16cc8:	orr	r0, r0, r4
   16ccc:	orr	r0, r0, ip
   16cd0:	orr	r0, r0, r2
   16cd4:	orr	r3, r0, r1
   16cd8:	b	16f08 <__assert_fail@plt+0x5e48>
   16cdc:	mvn	r0, #0
   16ce0:	mvn	r1, #0
   16ce4:	mov	r2, r5
   16ce8:	mov	sl, r3
   16cec:	bl	172c4 <__assert_fail@plt+0x6204>
   16cf0:	mov	ip, r1
   16cf4:	subs	r1, r0, r6
   16cf8:	umull	r3, lr, r6, r5
   16cfc:	mov	r2, r5
   16d00:	sbcs	r1, ip, r7
   16d04:	mov	r1, #0
   16d08:	str	ip, [sp, #4]
   16d0c:	movwcc	r1, #1
   16d10:	mla	r6, r6, sl, lr
   16d14:	cmp	r1, #0
   16d18:	mla	r7, r7, r2, r6
   16d1c:	str	r1, [sp, #20]
   16d20:	mvnne	r3, #0
   16d24:	cmp	r1, #0
   16d28:	mov	r1, r0
   16d2c:	umull	r4, r5, r3, r5
   16d30:	mvnne	r7, #0
   16d34:	mov	lr, r1
   16d38:	mla	r5, r3, sl, r5
   16d3c:	subs	r3, r0, r3
   16d40:	sbcs	r0, ip, r7
   16d44:	mov	r0, #0
   16d48:	mla	r5, r7, r2, r5
   16d4c:	movwcc	r0, #1
   16d50:	cmp	r0, #0
   16d54:	str	r0, [sp, #16]
   16d58:	mvnne	r4, #0
   16d5c:	mvnne	r5, #0
   16d60:	subs	r0, r1, r4
   16d64:	mov	r1, #0
   16d68:	sbcs	r0, ip, r5
   16d6c:	umull	r3, r0, r4, r2
   16d70:	movwcc	r1, #1
   16d74:	cmp	r1, #0
   16d78:	mla	r0, r4, sl, r0
   16d7c:	mov	r4, lr
   16d80:	str	r1, [sp, #12]
   16d84:	mvnne	r3, #0
   16d88:	cmp	r1, #0
   16d8c:	mla	r0, r5, r2, r0
   16d90:	str	r4, [sp]
   16d94:	umull	r7, r6, r3, r2
   16d98:	mvnne	r0, #0
   16d9c:	mla	r6, r3, sl, r6
   16da0:	subs	r3, lr, r3
   16da4:	mov	r3, #0
   16da8:	mla	r5, r0, r2, r6
   16dac:	sbcs	r0, ip, r0
   16db0:	mov	r0, #0
   16db4:	movwcc	r0, #1
   16db8:	cmp	r0, #0
   16dbc:	str	r0, [sp, #8]
   16dc0:	mvnne	r7, #0
   16dc4:	mvnne	r5, #0
   16dc8:	subs	r0, lr, r7
   16dcc:	sbcs	r0, ip, r5
   16dd0:	umull	r6, r0, r7, r2
   16dd4:	movwcc	r3, #1
   16dd8:	cmp	r3, #0
   16ddc:	mla	r7, r7, sl, r0
   16de0:	mov	r0, ip
   16de4:	mvnne	r6, #0
   16de8:	cmp	r3, #0
   16dec:	mla	r7, r5, r2, r7
   16df0:	mov	r5, #0
   16df4:	umull	r1, lr, r6, r2
   16df8:	mvnne	r7, #0
   16dfc:	mla	lr, r6, sl, lr
   16e00:	subs	r6, r4, r6
   16e04:	mla	lr, r7, r2, lr
   16e08:	sbcs	r7, ip, r7
   16e0c:	mov	ip, #0
   16e10:	movwcc	ip, #1
   16e14:	cmp	ip, #0
   16e18:	mvnne	r1, #0
   16e1c:	mvnne	lr, #0
   16e20:	subs	r7, r4, r1
   16e24:	sbcs	r7, r0, lr
   16e28:	umull	r0, r7, r1, r2
   16e2c:	movwcc	r5, #1
   16e30:	cmp	r5, #0
   16e34:	mla	r1, r1, sl, r7
   16e38:	mvnne	r0, #0
   16e3c:	cmp	r5, #0
   16e40:	mla	r1, lr, r2, r1
   16e44:	umull	r6, r4, r0, r2
   16e48:	mvnne	r1, #0
   16e4c:	mla	r4, r0, sl, r4
   16e50:	mla	r7, r1, r2, r4
   16e54:	ldr	r2, [sp]
   16e58:	subs	r0, r2, r0
   16e5c:	ldr	r0, [sp, #4]
   16e60:	ldr	r2, [sp, #16]
   16e64:	sbcs	r0, r0, r1
   16e68:	mov	r0, #0
   16e6c:	movwcc	r0, #1
   16e70:	cmp	r0, #0
   16e74:	mov	r1, r0
   16e78:	ldr	r0, [sp, #20]
   16e7c:	mvnne	r7, #0
   16e80:	mvnne	r6, #0
   16e84:	orr	r0, r0, r2
   16e88:	ldr	r2, [sp, #12]
   16e8c:	orr	r0, r0, r2
   16e90:	ldr	r2, [sp, #8]
   16e94:	orr	r0, r0, r2
   16e98:	orr	r0, r0, r3
   16e9c:	orr	r0, r0, ip
   16ea0:	orr	r0, r0, r5
   16ea4:	orr	r0, r0, r1
   16ea8:	and	r3, r0, #1
   16eac:	b	16f08 <__assert_fail@plt+0x5e48>
   16eb0:	mov	r1, #0
   16eb4:	lsl	r2, r7, #9
   16eb8:	lsl	r0, r6, #9
   16ebc:	lsr	r3, r7, #23
   16ec0:	cmp	r1, r7, lsr #23
   16ec4:	orr	r2, r2, r6, lsr #23
   16ec8:	mvnne	r0, #0
   16ecc:	movwne	r3, #1
   16ed0:	cmp	r1, r7, lsr #23
   16ed4:	mvnne	r2, #0
   16ed8:	mov	r6, r0
   16edc:	mov	r7, r2
   16ee0:	b	16f08 <__assert_fail@plt+0x5e48>
   16ee4:	lsl	r1, r7, #1
   16ee8:	cmp	r7, #0
   16eec:	lsl	r0, r6, #1
   16ef0:	lsr	r3, r7, #31
   16ef4:	orr	r1, r1, r6, lsr #31
   16ef8:	mvnmi	r0, #0
   16efc:	mvnmi	r1, #0
   16f00:	mov	r6, r0
   16f04:	mov	r7, r1
   16f08:	ldr	r1, [sp, #32]
   16f0c:	ldr	r2, [sp, #28]
   16f10:	orr	r8, r3, r8
   16f14:	add	r0, r1, r2
   16f18:	str	r0, [r9]
   16f1c:	ldrb	r0, [r1, r2]
   16f20:	cmp	r0, #0
   16f24:	orrne	r8, r8, #2
   16f28:	ldr	r0, [sp, #36]	; 0x24
   16f2c:	strd	r6, [r0]
   16f30:	mov	r0, r8
   16f34:	sub	sp, fp, #28
   16f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f3c:	movw	r0, #32909	; 0x808d
   16f40:	movw	r1, #32947	; 0x80b3
   16f44:	movw	r3, #32963	; 0x80c3
   16f48:	mov	r2, #85	; 0x55
   16f4c:	movt	r0, #1
   16f50:	movt	r1, #1
   16f54:	movt	r3, #1
   16f58:	bl	110c0 <__assert_fail@plt>
   16f5c:	clz	r2, r1
   16f60:	clz	r3, r0
   16f64:	lsr	r2, r2, #5
   16f68:	lsr	r3, r3, #5
   16f6c:	orrs	r2, r3, r2
   16f70:	movwne	r1, #1
   16f74:	movwne	r0, #1
   16f78:	cmp	r1, #0
   16f7c:	beq	16fac <__assert_fail@plt+0x5eec>
   16f80:	mvn	r2, #-2147483648	; 0x80000000
   16f84:	udiv	r2, r2, r1
   16f88:	cmp	r2, r0
   16f8c:	bcs	16fac <__assert_fail@plt+0x5eec>
   16f90:	push	{fp, lr}
   16f94:	mov	fp, sp
   16f98:	bl	10fdc <__errno_location@plt>
   16f9c:	mov	r1, #12
   16fa0:	str	r1, [r0]
   16fa4:	mov	r0, #0
   16fa8:	pop	{fp, pc}
   16fac:	b	10e50 <calloc@plt>
   16fb0:	cmp	r0, #0
   16fb4:	movweq	r0, #1
   16fb8:	cmn	r0, #1
   16fbc:	ble	16fc4 <__assert_fail@plt+0x5f04>
   16fc0:	b	10f64 <malloc@plt>
   16fc4:	push	{fp, lr}
   16fc8:	mov	fp, sp
   16fcc:	bl	10fdc <__errno_location@plt>
   16fd0:	mov	r1, #12
   16fd4:	str	r1, [r0]
   16fd8:	mov	r0, #0
   16fdc:	pop	{fp, pc}
   16fe0:	push	{fp, lr}
   16fe4:	mov	fp, sp
   16fe8:	cmp	r0, #0
   16fec:	beq	17008 <__assert_fail@plt+0x5f48>
   16ff0:	cmp	r1, #0
   16ff4:	beq	17014 <__assert_fail@plt+0x5f54>
   16ff8:	cmn	r1, #1
   16ffc:	ble	17020 <__assert_fail@plt+0x5f60>
   17000:	pop	{fp, lr}
   17004:	b	10ef8 <realloc@plt>
   17008:	mov	r0, r1
   1700c:	pop	{fp, lr}
   17010:	b	16fb0 <__assert_fail@plt+0x5ef0>
   17014:	bl	170b8 <__assert_fail@plt+0x5ff8>
   17018:	mov	r0, #0
   1701c:	pop	{fp, pc}
   17020:	bl	10fdc <__errno_location@plt>
   17024:	mov	r1, #12
   17028:	str	r1, [r0]
   1702c:	mov	r0, #0
   17030:	pop	{fp, pc}
   17034:	push	{r4, r5, r6, sl, fp, lr}
   17038:	add	fp, sp, #16
   1703c:	mov	r4, r0
   17040:	bl	10f40 <__fpending@plt>
   17044:	ldr	r6, [r4]
   17048:	mov	r5, r0
   1704c:	mov	r0, r4
   17050:	bl	133f0 <__assert_fail@plt+0x2330>
   17054:	tst	r6, #32
   17058:	bne	17090 <__assert_fail@plt+0x5fd0>
   1705c:	cmp	r0, #0
   17060:	mov	r4, r0
   17064:	mvnne	r4, #0
   17068:	cmp	r5, #0
   1706c:	bne	1709c <__assert_fail@plt+0x5fdc>
   17070:	cmp	r0, #0
   17074:	beq	1709c <__assert_fail@plt+0x5fdc>
   17078:	bl	10fdc <__errno_location@plt>
   1707c:	ldr	r0, [r0]
   17080:	subs	r4, r0, #9
   17084:	mvnne	r4, #0
   17088:	mov	r0, r4
   1708c:	pop	{r4, r5, r6, sl, fp, pc}
   17090:	mvn	r4, #0
   17094:	cmp	r0, #0
   17098:	beq	170a4 <__assert_fail@plt+0x5fe4>
   1709c:	mov	r0, r4
   170a0:	pop	{r4, r5, r6, sl, fp, pc}
   170a4:	bl	10fdc <__errno_location@plt>
   170a8:	mov	r1, #0
   170ac:	str	r1, [r0]
   170b0:	mov	r0, r4
   170b4:	pop	{r4, r5, r6, sl, fp, pc}
   170b8:	push	{r4, r5, r6, sl, fp, lr}
   170bc:	add	fp, sp, #16
   170c0:	mov	r4, r0
   170c4:	bl	10fdc <__errno_location@plt>
   170c8:	ldr	r6, [r0]
   170cc:	mov	r5, r0
   170d0:	mov	r0, r4
   170d4:	bl	10ea4 <free@plt>
   170d8:	str	r6, [r5]
   170dc:	pop	{r4, r5, r6, sl, fp, pc}
   170e0:	push	{fp, lr}
   170e4:	mov	fp, sp
   170e8:	mov	r0, #14
   170ec:	bl	11078 <nl_langinfo@plt>
   170f0:	movw	r1, #31441	; 0x7ad1
   170f4:	cmp	r0, #0
   170f8:	movt	r1, #1
   170fc:	movne	r1, r0
   17100:	movw	r0, #33042	; 0x8112
   17104:	ldrb	r2, [r1]
   17108:	movt	r0, #1
   1710c:	cmp	r2, #0
   17110:	movne	r0, r1
   17114:	pop	{fp, pc}
   17118:	push	{r4, r5, r6, r7, fp, lr}
   1711c:	add	fp, sp, #16
   17120:	sub	sp, sp, #8
   17124:	cmp	r0, #0
   17128:	add	r5, sp, #4
   1712c:	mov	r7, r2
   17130:	mov	r4, r1
   17134:	movne	r5, r0
   17138:	mov	r0, r5
   1713c:	bl	10f4c <mbrtowc@plt>
   17140:	mov	r6, r0
   17144:	cmp	r7, #0
   17148:	beq	17170 <__assert_fail@plt+0x60b0>
   1714c:	cmn	r6, #2
   17150:	bcc	17170 <__assert_fail@plt+0x60b0>
   17154:	mov	r0, #0
   17158:	bl	171b8 <__assert_fail@plt+0x60f8>
   1715c:	cmp	r0, #0
   17160:	bne	17170 <__assert_fail@plt+0x60b0>
   17164:	ldrb	r0, [r4]
   17168:	mov	r6, #1
   1716c:	str	r0, [r5]
   17170:	mov	r0, r6
   17174:	sub	sp, fp, #16
   17178:	pop	{r4, r5, r6, r7, fp, pc}
   1717c:	cmp	r2, #0
   17180:	beq	171b0 <__assert_fail@plt+0x60f0>
   17184:	mvn	r3, #0
   17188:	udiv	r3, r3, r2
   1718c:	cmp	r3, r1
   17190:	bcs	171b0 <__assert_fail@plt+0x60f0>
   17194:	push	{fp, lr}
   17198:	mov	fp, sp
   1719c:	bl	10fdc <__errno_location@plt>
   171a0:	mov	r1, #12
   171a4:	str	r1, [r0]
   171a8:	mov	r0, #0
   171ac:	pop	{fp, pc}
   171b0:	mul	r1, r2, r1
   171b4:	b	16fe0 <__assert_fail@plt+0x5f20>
   171b8:	push	{r4, sl, fp, lr}
   171bc:	add	fp, sp, #8
   171c0:	sub	sp, sp, #264	; 0x108
   171c4:	add	r1, sp, #7
   171c8:	movw	r2, #257	; 0x101
   171cc:	bl	17224 <__assert_fail@plt+0x6164>
   171d0:	mov	r4, #0
   171d4:	cmp	r0, #0
   171d8:	bne	17218 <__assert_fail@plt+0x6158>
   171dc:	movw	r1, #33048	; 0x8118
   171e0:	add	r0, sp, #7
   171e4:	mov	r2, #2
   171e8:	movt	r1, #1
   171ec:	bl	10fb8 <bcmp@plt>
   171f0:	cmp	r0, #0
   171f4:	beq	17218 <__assert_fail@plt+0x6158>
   171f8:	movw	r1, #33050	; 0x811a
   171fc:	add	r0, sp, #7
   17200:	mov	r2, #6
   17204:	movt	r1, #1
   17208:	bl	10fb8 <bcmp@plt>
   1720c:	cmp	r0, #0
   17210:	mov	r4, r0
   17214:	movwne	r4, #1
   17218:	mov	r0, r4
   1721c:	sub	sp, fp, #8
   17220:	pop	{r4, sl, fp, pc}
   17224:	push	{r4, r5, r6, r7, fp, lr}
   17228:	add	fp, sp, #16
   1722c:	mov	r4, r1
   17230:	mov	r1, #0
   17234:	mov	r6, r2
   17238:	bl	11060 <setlocale@plt>
   1723c:	cmp	r0, #0
   17240:	beq	17270 <__assert_fail@plt+0x61b0>
   17244:	mov	r7, r0
   17248:	bl	10fc4 <strlen@plt>
   1724c:	cmp	r0, r6
   17250:	bcs	1728c <__assert_fail@plt+0x61cc>
   17254:	add	r2, r0, #1
   17258:	mov	r0, r4
   1725c:	mov	r1, r7
   17260:	bl	10ebc <memcpy@plt>
   17264:	mov	r5, #0
   17268:	mov	r0, r5
   1726c:	pop	{r4, r5, r6, r7, fp, pc}
   17270:	mov	r5, #22
   17274:	cmp	r6, #0
   17278:	beq	172b4 <__assert_fail@plt+0x61f4>
   1727c:	mov	r0, #0
   17280:	strb	r0, [r4]
   17284:	mov	r0, r5
   17288:	pop	{r4, r5, r6, r7, fp, pc}
   1728c:	mov	r5, #34	; 0x22
   17290:	cmp	r6, #0
   17294:	beq	172b4 <__assert_fail@plt+0x61f4>
   17298:	sub	r6, r6, #1
   1729c:	mov	r0, r4
   172a0:	mov	r1, r7
   172a4:	mov	r2, r6
   172a8:	bl	10ebc <memcpy@plt>
   172ac:	mov	r0, #0
   172b0:	strb	r0, [r4, r6]
   172b4:	mov	r0, r5
   172b8:	pop	{r4, r5, r6, r7, fp, pc}
   172bc:	mov	r1, #0
   172c0:	b	11060 <setlocale@plt>
   172c4:	cmp	r3, #0
   172c8:	cmpeq	r2, #0
   172cc:	bne	172e4 <__assert_fail@plt+0x6224>
   172d0:	cmp	r1, #0
   172d4:	cmpeq	r0, #0
   172d8:	mvnne	r1, #0
   172dc:	mvnne	r0, #0
   172e0:	b	17300 <__assert_fail@plt+0x6240>
   172e4:	sub	sp, sp, #8
   172e8:	push	{sp, lr}
   172ec:	bl	17310 <__assert_fail@plt+0x6250>
   172f0:	ldr	lr, [sp, #4]
   172f4:	add	sp, sp, #8
   172f8:	pop	{r2, r3}
   172fc:	bx	lr
   17300:	push	{r1, lr}
   17304:	mov	r0, #8
   17308:	bl	10e68 <raise@plt>
   1730c:	pop	{r1, pc}
   17310:	cmp	r1, r3
   17314:	cmpeq	r0, r2
   17318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1731c:	mov	r4, r0
   17320:	movcc	r0, #0
   17324:	mov	r5, r1
   17328:	ldr	lr, [sp, #36]	; 0x24
   1732c:	movcc	r1, r0
   17330:	bcc	1742c <__assert_fail@plt+0x636c>
   17334:	cmp	r3, #0
   17338:	clzeq	ip, r2
   1733c:	clzne	ip, r3
   17340:	addeq	ip, ip, #32
   17344:	cmp	r5, #0
   17348:	clzeq	r1, r4
   1734c:	addeq	r1, r1, #32
   17350:	clzne	r1, r5
   17354:	sub	ip, ip, r1
   17358:	sub	sl, ip, #32
   1735c:	lsl	r9, r3, ip
   17360:	rsb	fp, ip, #32
   17364:	orr	r9, r9, r2, lsl sl
   17368:	orr	r9, r9, r2, lsr fp
   1736c:	lsl	r8, r2, ip
   17370:	cmp	r5, r9
   17374:	cmpeq	r4, r8
   17378:	movcc	r0, #0
   1737c:	movcc	r1, r0
   17380:	bcc	1739c <__assert_fail@plt+0x62dc>
   17384:	mov	r0, #1
   17388:	subs	r4, r4, r8
   1738c:	lsl	r1, r0, sl
   17390:	orr	r1, r1, r0, lsr fp
   17394:	lsl	r0, r0, ip
   17398:	sbc	r5, r5, r9
   1739c:	cmp	ip, #0
   173a0:	beq	1742c <__assert_fail@plt+0x636c>
   173a4:	lsr	r6, r8, #1
   173a8:	orr	r6, r6, r9, lsl #31
   173ac:	lsr	r7, r9, #1
   173b0:	mov	r2, ip
   173b4:	b	173d8 <__assert_fail@plt+0x6318>
   173b8:	subs	r3, r4, r6
   173bc:	sbc	r8, r5, r7
   173c0:	adds	r3, r3, r3
   173c4:	adc	r8, r8, r8
   173c8:	adds	r4, r3, #1
   173cc:	adc	r5, r8, #0
   173d0:	subs	r2, r2, #1
   173d4:	beq	173f4 <__assert_fail@plt+0x6334>
   173d8:	cmp	r5, r7
   173dc:	cmpeq	r4, r6
   173e0:	bcs	173b8 <__assert_fail@plt+0x62f8>
   173e4:	adds	r4, r4, r4
   173e8:	adc	r5, r5, r5
   173ec:	subs	r2, r2, #1
   173f0:	bne	173d8 <__assert_fail@plt+0x6318>
   173f4:	lsr	r3, r4, ip
   173f8:	orr	r3, r3, r5, lsl fp
   173fc:	lsr	r2, r5, ip
   17400:	orr	r3, r3, r5, lsr sl
   17404:	adds	r0, r0, r4
   17408:	mov	r4, r3
   1740c:	lsl	r3, r2, ip
   17410:	orr	r3, r3, r4, lsl sl
   17414:	lsl	ip, r4, ip
   17418:	orr	r3, r3, r4, lsr fp
   1741c:	adc	r1, r1, r5
   17420:	subs	r0, r0, ip
   17424:	mov	r5, r2
   17428:	sbc	r1, r1, r3
   1742c:	cmp	lr, #0
   17430:	strdne	r4, [lr]
   17434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1743c:	mov	r7, r0
   17440:	ldr	r6, [pc, #72]	; 17490 <__assert_fail@plt+0x63d0>
   17444:	ldr	r5, [pc, #72]	; 17494 <__assert_fail@plt+0x63d4>
   17448:	add	r6, pc, r6
   1744c:	add	r5, pc, r5
   17450:	sub	r6, r6, r5
   17454:	mov	r8, r1
   17458:	mov	r9, r2
   1745c:	bl	10e30 <calloc@plt-0x20>
   17460:	asrs	r6, r6, #2
   17464:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17468:	mov	r4, #0
   1746c:	add	r4, r4, #1
   17470:	ldr	r3, [r5], #4
   17474:	mov	r2, r9
   17478:	mov	r1, r8
   1747c:	mov	r0, r7
   17480:	blx	r3
   17484:	cmp	r6, r4
   17488:	bne	1746c <__assert_fail@plt+0x63ac>
   1748c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17490:			; <UNDEFINED> instruction: 0x00011abc
   17494:			; <UNDEFINED> instruction: 0x00011ab4
   17498:	bx	lr
   1749c:	ldr	r3, [pc, #12]	; 174b0 <__assert_fail@plt+0x63f0>
   174a0:	mov	r1, #0
   174a4:	add	r3, pc, r3
   174a8:	ldr	r2, [r3]
   174ac:	b	10fe8 <__cxa_atexit@plt>
   174b0:	andeq	r1, r1, r0, asr #24

Disassembly of section .fini:

000174b4 <.fini>:
   174b4:	push	{r3, lr}
   174b8:	pop	{r3, pc}
