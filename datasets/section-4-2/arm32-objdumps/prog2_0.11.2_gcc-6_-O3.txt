
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010684 <.init>:
   10684:	push	{r3, lr}
   10688:	bl	108a4 <_start@@Base+0x3c>
   1068c:	pop	{r3, pc}

Disassembly of section .plt:

00010690 <strcmp@plt-0x14>:
   10690:	push	{lr}		; (str lr, [sp, #-4]!)
   10694:	ldr	lr, [pc, #4]	; 106a0 <strcmp@plt-0x4>
   10698:	add	lr, pc, lr
   1069c:	ldr	pc, [lr, #8]!
   106a0:	andeq	r0, r1, r0, ror #18

000106a4 <strcmp@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2400]!	; 0x960

000106b0 <stpcpy@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2392]!	; 0x958

000106bc <strcat@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2384]!	; 0x950

000106c8 <puts@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2376]!	; 0x948

000106d4 <__libc_start_main@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2368]!	; 0x940

000106e0 <__gmon_start__@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2360]!	; 0x938

000106ec <strlen@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2352]!	; 0x930

000106f8 <__isoc99_scanf@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2344]!	; 0x928

00010704 <abort@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2336]!	; 0x920

Disassembly of section .text:

00010710 <main@@Base>:
   10710:	push	{r4, r5, r6, r7, r8, lr}
   10714:	mov	r3, #0
   10718:	ldr	r6, [pc, #320]	; 10860 <main@@Base+0x150>
   1071c:	ldr	r7, [pc, #320]	; 10864 <main@@Base+0x154>
   10720:	sub	sp, sp, #104	; 0x68
   10724:	mov	r5, r3
   10728:	str	r3, [sp, #20]
   1072c:	str	r3, [sp, #24]
   10730:	str	r3, [sp, #28]
   10734:	str	r3, [sp, #32]
   10738:	str	r3, [sp, #36]	; 0x24
   1073c:	str	r3, [sp, #40]	; 0x28
   10740:	strh	r3, [sp, #44]	; 0x2c
   10744:	add	r1, sp, #8
   10748:	mov	r0, r6
   1074c:	bl	106f8 <__isoc99_scanf@plt>
   10750:	ldrb	r3, [sp, #8]
   10754:	cmp	r3, #46	; 0x2e
   10758:	beq	10854 <main@@Base+0x144>
   1075c:	add	r1, sp, #4
   10760:	mov	r0, r7
   10764:	bl	106f8 <__isoc99_scanf@plt>
   10768:	ldr	r8, [sp, #4]
   1076c:	strb	r5, [sp, #20]
   10770:	cmp	r8, #0
   10774:	movgt	r4, #0
   10778:	ble	10794 <main@@Base+0x84>
   1077c:	add	r4, r4, #1
   10780:	add	r1, sp, #8
   10784:	add	r0, sp, #20
   10788:	bl	106bc <strcat@plt>
   1078c:	cmp	r8, r4
   10790:	bne	1077c <main@@Base+0x6c>
   10794:	add	r0, sp, #20
   10798:	bl	106ec <strlen@plt>
   1079c:	add	r3, sp, #104	; 0x68
   107a0:	add	r1, sp, #48	; 0x30
   107a4:	add	r2, sp, #20
   107a8:	add	r3, r3, r0
   107ac:	ldrb	ip, [r3, #-85]	; 0xffffffab
   107b0:	mov	r3, #1
   107b4:	strb	ip, [sp, #48]	; 0x30
   107b8:	b	107c8 <main@@Base+0xb8>
   107bc:	ldrb	ip, [r2], #1
   107c0:	add	r3, r3, #1
   107c4:	strb	ip, [r1, #1]!
   107c8:	cmp	r0, r3
   107cc:	bhi	107bc <main@@Base+0xac>
   107d0:	add	r2, sp, #104	; 0x68
   107d4:	add	r3, r2, r3
   107d8:	add	r4, sp, #76	; 0x4c
   107dc:	strb	r5, [r3, #-56]	; 0xffffffc8
   107e0:	add	r1, sp, #48	; 0x30
   107e4:	add	r0, sp, #20
   107e8:	bl	106a4 <strcmp@plt>
   107ec:	mov	r8, r0
   107f0:	add	r0, sp, #20
   107f4:	bl	106c8 <puts@plt>
   107f8:	add	r1, sp, #20
   107fc:	mov	r0, r4
   10800:	bl	106b0 <stpcpy@plt>
   10804:	ldrb	lr, [sp, #76]	; 0x4c
   10808:	add	ip, sp, #104	; 0x68
   1080c:	mov	r1, r4
   10810:	add	r2, sp, #20
   10814:	mov	r3, #1
   10818:	sub	r0, r0, r4
   1081c:	add	ip, ip, r0
   10820:	strb	lr, [ip, #-85]	; 0xffffffab
   10824:	b	10834 <main@@Base+0x124>
   10828:	ldrb	ip, [r1, #1]!
   1082c:	add	r3, r3, #1
   10830:	strb	ip, [r2], #1
   10834:	cmp	r3, r0
   10838:	bcc	10828 <main@@Base+0x118>
   1083c:	add	r2, sp, #104	; 0x68
   10840:	add	r3, r2, r3
   10844:	cmp	r8, #0
   10848:	strb	r5, [r3, #-84]	; 0xffffffac
   1084c:	bne	107e0 <main@@Base+0xd0>
   10850:	b	10744 <main@@Base+0x34>
   10854:	mov	r0, #0
   10858:	add	sp, sp, #104	; 0x68
   1085c:	pop	{r4, r5, r6, r7, r8, pc}
   10860:	andeq	r0, r1, r0, ror #21
   10864:	andeq	r0, r1, r4, ror #21

00010868 <_start@@Base>:
   10868:	mov	fp, #0
   1086c:	mov	lr, #0
   10870:	pop	{r1}		; (ldr r1, [sp], #4)
   10874:	mov	r2, sp
   10878:	push	{r2}		; (str r2, [sp, #-4]!)
   1087c:	push	{r0}		; (str r0, [sp, #-4]!)
   10880:	ldr	ip, [pc, #16]	; 10898 <_start@@Base+0x30>
   10884:	push	{ip}		; (str ip, [sp, #-4]!)
   10888:	ldr	r0, [pc, #12]	; 1089c <_start@@Base+0x34>
   1088c:	ldr	r3, [pc, #12]	; 108a0 <_start@@Base+0x38>
   10890:	bl	106d4 <__libc_start_main@plt>
   10894:	bl	10704 <abort@plt>
   10898:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1089c:	andeq	r0, r1, r0, lsl r7
   108a0:	andeq	r0, r1, r0, ror sl
   108a4:	ldr	r3, [pc, #20]	; 108c0 <_start@@Base+0x58>
   108a8:	ldr	r2, [pc, #20]	; 108c4 <_start@@Base+0x5c>
   108ac:	add	r3, pc, r3
   108b0:	ldr	r2, [r3, r2]
   108b4:	cmp	r2, #0
   108b8:	bxeq	lr
   108bc:	b	106e0 <__gmon_start__@plt>
   108c0:	andeq	r0, r1, ip, asr #14
   108c4:	andeq	r0, r0, r0, lsr r0
   108c8:	ldr	r3, [pc, #28]	; 108ec <_start@@Base+0x84>
   108cc:	ldr	r0, [pc, #28]	; 108f0 <_start@@Base+0x88>
   108d0:	sub	r3, r3, r0
   108d4:	cmp	r3, #6
   108d8:	bxls	lr
   108dc:	ldr	r3, [pc, #16]	; 108f4 <_start@@Base+0x8c>
   108e0:	cmp	r3, #0
   108e4:	bxeq	lr
   108e8:	bx	r3
   108ec:	andeq	r1, r2, pc, lsr r0
   108f0:	andeq	r1, r2, ip, lsr r0
   108f4:	andeq	r0, r0, r0
   108f8:	ldr	r1, [pc, #36]	; 10924 <_start@@Base+0xbc>
   108fc:	ldr	r0, [pc, #36]	; 10928 <_start@@Base+0xc0>
   10900:	sub	r1, r1, r0
   10904:	asr	r1, r1, #2
   10908:	add	r1, r1, r1, lsr #31
   1090c:	asrs	r1, r1, #1
   10910:	bxeq	lr
   10914:	ldr	r3, [pc, #16]	; 1092c <_start@@Base+0xc4>
   10918:	cmp	r3, #0
   1091c:	bxeq	lr
   10920:	bx	r3
   10924:	andeq	r1, r2, ip, lsr r0
   10928:	andeq	r1, r2, ip, lsr r0
   1092c:	andeq	r0, r0, r0
   10930:	push	{r4, lr}
   10934:	ldr	r4, [pc, #24]	; 10954 <_start@@Base+0xec>
   10938:	ldrb	r3, [r4]
   1093c:	cmp	r3, #0
   10940:	popne	{r4, pc}
   10944:	bl	108c8 <_start@@Base+0x60>
   10948:	mov	r3, #1
   1094c:	strb	r3, [r4]
   10950:	pop	{r4, pc}
   10954:	andeq	r1, r2, ip, lsr r0
   10958:	ldr	r0, [pc, #40]	; 10988 <_start@@Base+0x120>
   1095c:	ldr	r3, [r0]
   10960:	cmp	r3, #0
   10964:	bne	1096c <_start@@Base+0x104>
   10968:	b	108f8 <_start@@Base+0x90>
   1096c:	ldr	r3, [pc, #24]	; 1098c <_start@@Base+0x124>
   10970:	cmp	r3, #0
   10974:	beq	10968 <_start@@Base+0x100>
   10978:	push	{r4, lr}
   1097c:	blx	r3
   10980:	pop	{r4, lr}
   10984:	b	108f8 <_start@@Base+0x90>
   10988:	andeq	r0, r2, r4, lsl pc
   1098c:	andeq	r0, r0, r0

00010990 <R_ShiftString@@Base>:
   10990:	push	{r4, r5, r6, r7, r8, lr}
   10994:	mov	r8, r1
   10998:	mov	r7, r0
   1099c:	bl	106ec <strlen@plt>
   109a0:	sub	r6, r7, #1
   109a4:	mov	r5, r8
   109a8:	mov	r4, #1
   109ac:	add	r0, r7, r0
   109b0:	ldrb	r3, [r0, #-1]
   109b4:	strb	r3, [r8]
   109b8:	b	109c8 <R_ShiftString@@Base+0x38>
   109bc:	ldrb	r3, [r6, #1]!
   109c0:	add	r4, r4, #1
   109c4:	strb	r3, [r5, #1]!
   109c8:	mov	r0, r7
   109cc:	bl	106ec <strlen@plt>
   109d0:	cmp	r0, r4
   109d4:	bhi	109bc <R_ShiftString@@Base+0x2c>
   109d8:	mov	r3, #0
   109dc:	strb	r3, [r8, r4]
   109e0:	pop	{r4, r5, r6, r7, r8, pc}

000109e4 <L_ShiftString@@Base>:
   109e4:	push	{r4, r5, r6, r7, r8, lr}
   109e8:	mov	r8, r1
   109ec:	mov	r7, r0
   109f0:	bl	106ec <strlen@plt>
   109f4:	ldrb	r3, [r7]
   109f8:	mov	r6, r7
   109fc:	sub	r5, r8, #1
   10a00:	mov	r4, #1
   10a04:	add	r0, r8, r0
   10a08:	strb	r3, [r0, #-1]
   10a0c:	b	10a1c <L_ShiftString@@Base+0x38>
   10a10:	ldrb	r3, [r6, #1]!
   10a14:	add	r4, r4, #1
   10a18:	strb	r3, [r5, #1]!
   10a1c:	mov	r0, r7
   10a20:	bl	106ec <strlen@plt>
   10a24:	cmp	r0, r4
   10a28:	bhi	10a10 <L_ShiftString@@Base+0x2c>
   10a2c:	mov	r3, #0
   10a30:	strb	r3, [r8, r4]
   10a34:	pop	{r4, r5, r6, r7, r8, pc}

00010a38 <StringSet@@Base>:
   10a38:	push	{r4, r5, r6, r7, r8, lr}
   10a3c:	subs	r6, r2, #0
   10a40:	mov	r4, #0
   10a44:	strb	r4, [r1]
   10a48:	pople	{r4, r5, r6, r7, r8, pc}
   10a4c:	mov	r7, r0
   10a50:	mov	r5, r1
   10a54:	add	r4, r4, #1
   10a58:	mov	r1, r7
   10a5c:	mov	r0, r5
   10a60:	bl	106bc <strcat@plt>
   10a64:	cmp	r6, r4
   10a68:	bne	10a54 <StringSet@@Base+0x1c>
   10a6c:	pop	{r4, r5, r6, r7, r8, pc}

00010a70 <__libc_csu_init@@Base>:
   10a70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a74:	mov	r7, r0
   10a78:	ldr	r6, [pc, #72]	; 10ac8 <__libc_csu_init@@Base+0x58>
   10a7c:	ldr	r5, [pc, #72]	; 10acc <__libc_csu_init@@Base+0x5c>
   10a80:	add	r6, pc, r6
   10a84:	add	r5, pc, r5
   10a88:	sub	r6, r6, r5
   10a8c:	mov	r8, r1
   10a90:	mov	r9, r2
   10a94:	bl	10684 <strcmp@plt-0x20>
   10a98:	asrs	r6, r6, #2
   10a9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa0:	mov	r4, #0
   10aa4:	add	r4, r4, #1
   10aa8:	ldr	r3, [r5], #4
   10aac:	mov	r2, r9
   10ab0:	mov	r1, r8
   10ab4:	mov	r0, r7
   10ab8:	blx	r3
   10abc:	cmp	r6, r4
   10ac0:	bne	10aa4 <__libc_csu_init@@Base+0x34>
   10ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ac8:	andeq	r0, r1, r8, lsl #9
   10acc:	andeq	r0, r1, r0, lsl #9

00010ad0 <__libc_csu_fini@@Base>:
   10ad0:	bx	lr

Disassembly of section .fini:

00010ad4 <.fini>:
   10ad4:	push	{r3, lr}
   10ad8:	pop	{r3, pc}
