
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010db8 <.init>:
   10db8:	push	{r3, lr}
   10dbc:	bl	11090 <rb_base64_encode@plt+0x48>
   10dc0:	pop	{r3, pc}

Disassembly of section .plt:

00010dc4 <open@plt-0x14>:
   10dc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc8:	ldr	lr, [pc, #4]	; 10dd4 <open@plt-0x4>
   10dcc:	add	lr, pc, lr
   10dd0:	ldr	pc, [lr, #8]!
   10dd4:	andeq	r4, r1, ip, lsr #4

00010dd8 <open@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #556]!	; 0x22c

00010de4 <sigemptyset@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #548]!	; 0x224

00010df0 <strerror@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #540]!	; 0x21c

00010dfc <rb_get_type@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #532]!	; 0x214

00010e08 <abort@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #524]!	; 0x20c

00010e14 <rb_event_addish@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #516]!	; 0x204

00010e20 <rb_ignore_errno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #508]!	; 0x1fc

00010e2c <__libc_start_main@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #500]!	; 0x1f4

00010e38 <rb_setselect@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #492]!	; 0x1ec

00010e44 <__gmon_start__@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e50 <rb_send_fd_buf@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #476]!	; 0x1dc

00010e5c <vsnprintf@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #468]!	; 0x1d4

00010e68 <getenv@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #460]!	; 0x1cc

00010e74 <calloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e80 <rb_set_nb@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #444]!	; 0x1bc

00010e8c <memset@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #436]!	; 0x1b4

00010e98 <__assert_fail@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ea4 <rb_linebuf_parse@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #420]!	; 0x1a4

00010eb0 <rb_strlcpy@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #412]!	; 0x19c

00010ebc <rb_init_rawbuffers@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #404]!	; 0x194

00010ec8 <free@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #396]!	; 0x18c

00010ed4 <rb_lib_loop@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #388]!	; 0x184

00010ee0 <rb_read@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #380]!	; 0x17c

00010eec <rb_set_type@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #372]!	; 0x174

00010ef8 <rb_linebuf_get@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #364]!	; 0x16c

00010f04 <rb_linebuf_flush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #356]!	; 0x164

00010f10 <strlen@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #348]!	; 0x15c

00010f1c <memcpy@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #340]!	; 0x154

00010f28 <rb_linebuf_donebuf@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #332]!	; 0x14c

00010f34 <rb_strcasestr@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #324]!	; 0x144

00010f40 <rb_close@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #316]!	; 0x13c

00010f4c <sigaddset@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #20, 20	; 0x14000
   10f54:	ldr	pc, [ip, #308]!	; 0x134

00010f58 <atoi@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #20, 20	; 0x14000
   10f60:	ldr	pc, [ip, #300]!	; 0x12c

00010f64 <rb_rawbuf_length@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #20, 20	; 0x14000
   10f6c:	ldr	pc, [ip, #292]!	; 0x124

00010f70 <rb_free_rawbuffer@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #20, 20	; 0x14000
   10f78:	ldr	pc, [ip, #284]!	; 0x11c

00010f7c <close@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #20, 20	; 0x14000
   10f84:	ldr	pc, [ip, #276]!	; 0x114

00010f88 <fwrite@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #20, 20	; 0x14000
   10f90:	ldr	pc, [ip, #268]!	; 0x10c

00010f94 <rb_outofmemory@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #20, 20	; 0x14000
   10f9c:	ldr	pc, [ip, #260]!	; 0x104

00010fa0 <rb_rawbuf_get@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #20, 20	; 0x14000
   10fa8:	ldr	pc, [ip, #252]!	; 0xfc

00010fac <sigaction@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #20, 20	; 0x14000
   10fb4:	ldr	pc, [ip, #244]!	; 0xf4

00010fb8 <rb_lib_init@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #20, 20	; 0x14000
   10fc0:	ldr	pc, [ip, #236]!	; 0xec

00010fc4 <rb_new_rawbuffer@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #20, 20	; 0x14000
   10fcc:	ldr	pc, [ip, #228]!	; 0xe4

00010fd0 <rb_open@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #20, 20	; 0x14000
   10fd8:	ldr	pc, [ip, #220]!	; 0xdc

00010fdc <rb_recv_fd_buf@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #20, 20	; 0x14000
   10fe4:	ldr	pc, [ip, #212]!	; 0xd4

00010fe8 <dup2@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #20, 20	; 0x14000
   10ff0:	ldr	pc, [ip, #204]!	; 0xcc

00010ff4 <rb_linebuf_newbuf@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #20, 20	; 0x14000
   10ffc:	ldr	pc, [ip, #196]!	; 0xc4

00011000 <rb_linebuf_init@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #20, 20	; 0x14000
   11008:	ldr	pc, [ip, #188]!	; 0xbc

0001100c <getrlimit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #20, 20	; 0x14000
   11014:	ldr	pc, [ip, #180]!	; 0xb4

00011018 <rb_rawbuf_append@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #20, 20	; 0x14000
   11020:	ldr	pc, [ip, #172]!	; 0xac

00011024 <rb_rawbuf_flush@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #20, 20	; 0x14000
   1102c:	ldr	pc, [ip, #164]!	; 0xa4

00011030 <exit@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #20, 20	; 0x14000
   11038:	ldr	pc, [ip, #156]!	; 0x9c

0001103c <__errno_location@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #20, 20	; 0x14000
   11044:	ldr	pc, [ip, #148]!	; 0x94

00011048 <rb_base64_encode@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #20, 20	; 0x14000
   11050:	ldr	pc, [ip, #140]!	; 0x8c

Disassembly of section .text:

00011054 <.text>:
   11054:	mov	fp, #0
   11058:	mov	lr, #0
   1105c:	pop	{r1}		; (ldr r1, [sp], #4)
   11060:	mov	r2, sp
   11064:	push	{r2}		; (str r2, [sp, #-4]!)
   11068:	push	{r0}		; (str r0, [sp, #-4]!)
   1106c:	ldr	ip, [pc, #16]	; 11084 <rb_base64_encode@plt+0x3c>
   11070:	push	{ip}		; (str ip, [sp, #-4]!)
   11074:	ldr	r0, [pc, #12]	; 11088 <rb_base64_encode@plt+0x40>
   11078:	ldr	r3, [pc, #12]	; 1108c <rb_base64_encode@plt+0x44>
   1107c:	bl	10e2c <__libc_start_main@plt>
   11080:	bl	10e08 <abort@plt>
   11084:	andeq	r4, r1, ip, rrx
   11088:	andeq	r1, r1, r4, asr #2
   1108c:	andeq	r4, r1, ip
   11090:	ldr	r3, [pc, #20]	; 110ac <rb_base64_encode@plt+0x64>
   11094:	ldr	r2, [pc, #20]	; 110b0 <rb_base64_encode@plt+0x68>
   11098:	add	r3, pc, r3
   1109c:	ldr	r2, [r3, r2]
   110a0:	cmp	r2, #0
   110a4:	bxeq	lr
   110a8:	b	10e44 <__gmon_start__@plt>
   110ac:	andeq	r3, r1, r0, ror #30
   110b0:	andeq	r0, r0, r0, ror #1
   110b4:	ldr	r0, [pc, #24]	; 110d4 <rb_base64_encode@plt+0x8c>
   110b8:	ldr	r3, [pc, #24]	; 110d8 <rb_base64_encode@plt+0x90>
   110bc:	cmp	r3, r0
   110c0:	bxeq	lr
   110c4:	ldr	r3, [pc, #16]	; 110dc <rb_base64_encode@plt+0x94>
   110c8:	cmp	r3, #0
   110cc:	bxeq	lr
   110d0:	bx	r3
   110d4:	andeq	r5, r2, ip, ror #1
   110d8:	andeq	r5, r2, ip, ror #1
   110dc:	andeq	r0, r0, r0
   110e0:	ldr	r0, [pc, #36]	; 1110c <rb_base64_encode@plt+0xc4>
   110e4:	ldr	r1, [pc, #36]	; 11110 <rb_base64_encode@plt+0xc8>
   110e8:	sub	r1, r1, r0
   110ec:	asr	r1, r1, #2
   110f0:	add	r1, r1, r1, lsr #31
   110f4:	asrs	r1, r1, #1
   110f8:	bxeq	lr
   110fc:	ldr	r3, [pc, #16]	; 11114 <rb_base64_encode@plt+0xcc>
   11100:	cmp	r3, #0
   11104:	bxeq	lr
   11108:	bx	r3
   1110c:	andeq	r5, r2, ip, ror #1
   11110:	andeq	r5, r2, ip, ror #1
   11114:	andeq	r0, r0, r0
   11118:	push	{r4, lr}
   1111c:	ldr	r4, [pc, #24]	; 1113c <rb_base64_encode@plt+0xf4>
   11120:	ldrb	r3, [r4]
   11124:	cmp	r3, #0
   11128:	popne	{r4, pc}
   1112c:	bl	110b4 <rb_base64_encode@plt+0x6c>
   11130:	mov	r3, #1
   11134:	strb	r3, [r4]
   11138:	pop	{r4, pc}
   1113c:	strdeq	r5, [r2], -r4
   11140:	b	110e0 <rb_base64_encode@plt+0x98>
   11144:	push	{fp, lr}
   11148:	mov	fp, sp
   1114c:	sub	sp, sp, #16
   11150:	bl	113a0 <rb_base64_encode@plt+0x358>
   11154:	mov	r4, r0
   11158:	movw	r0, #16508	; 0x407c
   1115c:	movt	r0, #1
   11160:	bl	10e68 <getenv@plt>
   11164:	mov	r6, r0
   11168:	movw	r0, #16515	; 0x4083
   1116c:	movt	r0, #1
   11170:	bl	10e68 <getenv@plt>
   11174:	mov	r5, r0
   11178:	movw	r0, #16524	; 0x408c
   1117c:	movt	r0, #1
   11180:	bl	10e68 <getenv@plt>
   11184:	cmp	r6, #0
   11188:	beq	1119c <rb_base64_encode@plt+0x154>
   1118c:	cmp	r5, #0
   11190:	movne	r7, r0
   11194:	cmpne	r0, #0
   11198:	bne	111dc <rb_base64_encode@plt+0x194>
   1119c:	movw	r4, #20720	; 0x50f0
   111a0:	movt	r4, #2
   111a4:	ldr	r3, [r4]
   111a8:	movw	r0, #16533	; 0x4095
   111ac:	movt	r0, #1
   111b0:	mov	r1, #52	; 0x34
   111b4:	mov	r2, #1
   111b8:	bl	10f88 <fwrite@plt>
   111bc:	ldr	r3, [r4]
   111c0:	movw	r0, #16586	; 0x40ca
   111c4:	movt	r0, #1
   111c8:	mov	r1, #49	; 0x31
   111cc:	mov	r2, #1
   111d0:	bl	10f88 <fwrite@plt>
   111d4:	mov	r0, #1
   111d8:	bl	11030 <exit@plt>
   111dc:	mov	r0, r6
   111e0:	bl	10f58 <atoi@plt>
   111e4:	mov	r6, r0
   111e8:	mov	r0, r5
   111ec:	bl	10f58 <atoi@plt>
   111f0:	mov	r5, r0
   111f4:	mov	r0, r7
   111f8:	bl	10f58 <atoi@plt>
   111fc:	movw	r1, #20728	; 0x50f8
   11200:	movt	r1, #2
   11204:	str	r0, [r1]
   11208:	cmp	r4, #1
   1120c:	blt	11244 <rb_base64_encode@plt+0x1fc>
   11210:	mov	r7, #0
   11214:	b	1122c <rb_base64_encode@plt+0x1e4>
   11218:	cmp	r7, #3
   1121c:	bcc	11238 <rb_base64_encode@plt+0x1f0>
   11220:	mov	r0, r7
   11224:	bl	10f7c <close@plt>
   11228:	b	11238 <rb_base64_encode@plt+0x1f0>
   1122c:	cmp	r6, r7
   11230:	cmpne	r5, r7
   11234:	bne	11218 <rb_base64_encode@plt+0x1d0>
   11238:	add	r7, r7, #1
   1123c:	cmp	r4, r7
   11240:	bne	1122c <rb_base64_encode@plt+0x1e4>
   11244:	movw	r0, #16636	; 0x40fc
   11248:	movt	r0, #1
   1124c:	mov	r1, #2
   11250:	bl	10dd8 <open@plt>
   11254:	cmp	r0, #0
   11258:	blt	112ac <rb_base64_encode@plt+0x264>
   1125c:	mov	r7, r0
   11260:	cmp	r6, #0
   11264:	cmpne	r5, #0
   11268:	beq	11278 <rb_base64_encode@plt+0x230>
   1126c:	mov	r0, r7
   11270:	mov	r1, #0
   11274:	bl	10fe8 <dup2@plt>
   11278:	cmp	r6, #1
   1127c:	cmpne	r5, #1
   11280:	beq	11290 <rb_base64_encode@plt+0x248>
   11284:	mov	r0, r7
   11288:	mov	r1, #1
   1128c:	bl	10fe8 <dup2@plt>
   11290:	cmp	r6, #2
   11294:	cmpne	r5, #2
   11298:	bne	11388 <rb_base64_encode@plt+0x340>
   1129c:	cmp	r7, #3
   112a0:	blt	112ac <rb_base64_encode@plt+0x264>
   112a4:	mov	r0, r7
   112a8:	bl	10f7c <close@plt>
   112ac:	bl	113d0 <rb_base64_encode@plt+0x388>
   112b0:	mov	r0, #4096	; 0x1000
   112b4:	mov	r1, #1024	; 0x400
   112b8:	str	r4, [sp]
   112bc:	str	r1, [sp, #4]
   112c0:	str	r0, [sp, #8]
   112c4:	mov	r0, #0
   112c8:	mov	r1, #0
   112cc:	mov	r2, #0
   112d0:	mov	r3, #0
   112d4:	bl	10fb8 <rb_lib_init@plt>
   112d8:	mov	r0, #4096	; 0x1000
   112dc:	bl	11000 <rb_linebuf_init@plt>
   112e0:	mov	r0, #4096	; 0x1000
   112e4:	bl	10ebc <rb_init_rawbuffers@plt>
   112e8:	mov	r0, #48	; 0x30
   112ec:	bl	11480 <rb_base64_encode@plt+0x438>
   112f0:	movw	r4, #20732	; 0x50fc
   112f4:	movt	r4, #2
   112f8:	str	r0, [r4]
   112fc:	movw	r2, #16646	; 0x4106
   11300:	movt	r2, #1
   11304:	mov	r0, r6
   11308:	mov	r1, #4
   1130c:	bl	10fd0 <rb_open@plt>
   11310:	ldr	r1, [r4]
   11314:	str	r0, [r1, #16]
   11318:	movw	r2, #16666	; 0x411a
   1131c:	movt	r2, #1
   11320:	mov	r0, r5
   11324:	mov	r1, #8
   11328:	bl	10fd0 <rb_open@plt>
   1132c:	ldr	r1, [r4]
   11330:	str	r0, [r1, #20]
   11334:	ldr	r0, [r1, #16]
   11338:	bl	10e80 <rb_set_nb@plt>
   1133c:	ldr	r0, [r4]
   11340:	ldr	r0, [r0, #20]
   11344:	bl	10e80 <rb_set_nb@plt>
   11348:	movw	r0, #16676	; 0x4124
   1134c:	movt	r0, #1
   11350:	movw	r1, #5280	; 0x14a0
   11354:	movt	r1, #1
   11358:	mov	r2, #0
   1135c:	mov	r3, #10
   11360:	bl	10e14 <rb_event_addish@plt>
   11364:	ldr	r0, [r4]
   11368:	ldr	r0, [r0, #20]
   1136c:	mov	r1, #0
   11370:	bl	114e0 <rb_base64_encode@plt+0x498>
   11374:	ldr	r1, [r4]
   11378:	ldr	r0, [r1, #16]
   1137c:	bl	1154c <rb_base64_encode@plt+0x504>
   11380:	mov	r0, #0
   11384:	bl	10ed4 <rb_lib_loop@plt>
   11388:	mov	r0, r7
   1138c:	mov	r1, #2
   11390:	bl	10fe8 <dup2@plt>
   11394:	cmp	r7, #3
   11398:	bge	112a4 <rb_base64_encode@plt+0x25c>
   1139c:	b	112ac <rb_base64_encode@plt+0x264>
   113a0:	push	{fp, lr}
   113a4:	mov	fp, sp
   113a8:	sub	sp, sp, #8
   113ac:	mov	r1, sp
   113b0:	mov	r0, #7
   113b4:	bl	1100c <getrlimit@plt>
   113b8:	ldr	r1, [sp]
   113bc:	cmp	r0, #0
   113c0:	movwne	r1, #65535	; 0xffff
   113c4:	mov	r0, r1
   113c8:	mov	sp, fp
   113cc:	pop	{fp, pc}
   113d0:	push	{r4, r5, fp, lr}
   113d4:	add	fp, sp, #8
   113d8:	sub	sp, sp, #144	; 0x90
   113dc:	mov	r0, #1
   113e0:	str	r0, [sp, #4]
   113e4:	mov	r0, #0
   113e8:	str	r0, [sp, #136]	; 0x88
   113ec:	add	r4, sp, #4
   113f0:	add	r5, r4, #4
   113f4:	mov	r0, r5
   113f8:	bl	10de4 <sigemptyset@plt>
   113fc:	mov	r0, r5
   11400:	mov	r1, #13
   11404:	bl	10f4c <sigaddset@plt>
   11408:	mov	r0, r5
   1140c:	mov	r1, #14
   11410:	bl	10f4c <sigaddset@plt>
   11414:	mov	r0, r5
   11418:	mov	r1, #5
   1141c:	bl	10f4c <sigaddset@plt>
   11420:	mov	r0, r5
   11424:	mov	r1, #28
   11428:	bl	10f4c <sigaddset@plt>
   1142c:	mov	r0, #28
   11430:	mov	r1, r4
   11434:	mov	r2, #0
   11438:	bl	10fac <sigaction@plt>
   1143c:	mov	r0, #13
   11440:	mov	r1, r4
   11444:	mov	r2, #0
   11448:	bl	10fac <sigaction@plt>
   1144c:	mov	r0, #5
   11450:	mov	r1, r4
   11454:	mov	r2, #0
   11458:	bl	10fac <sigaction@plt>
   1145c:	movw	r0, #5704	; 0x1648
   11460:	movt	r0, #1
   11464:	str	r0, [sp, #4]
   11468:	mov	r0, #14
   1146c:	mov	r1, r4
   11470:	mov	r2, #0
   11474:	bl	10fac <sigaction@plt>
   11478:	sub	sp, fp, #8
   1147c:	pop	{r4, r5, fp, pc}
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	mov	r1, r0
   1148c:	mov	r0, #1
   11490:	bl	10e74 <calloc@plt>
   11494:	cmp	r0, #0
   11498:	popne	{fp, pc}
   1149c:	bl	10f94 <rb_outofmemory@plt>
   114a0:	push	{r4, r5, fp, lr}
   114a4:	add	fp, sp, #8
   114a8:	movw	r4, #20736	; 0x5100
   114ac:	movt	r4, #2
   114b0:	ldr	r5, [r4]
   114b4:	cmp	r5, #0
   114b8:	beq	114d0 <rb_base64_encode@plt+0x488>
   114bc:	ldr	r0, [r5]
   114c0:	ldr	r5, [r5, #8]
   114c4:	bl	1164c <rb_base64_encode@plt+0x604>
   114c8:	cmp	r5, #0
   114cc:	bne	114bc <rb_base64_encode@plt+0x474>
   114d0:	mov	r0, #0
   114d4:	str	r0, [r4]
   114d8:	str	r0, [r4, #4]
   114dc:	pop	{r4, r5, fp, pc}
   114e0:	push	{r4, r5, r6, r7, fp, lr}
   114e4:	add	fp, sp, #16
   114e8:	sub	sp, sp, #16384	; 0x4000
   114ec:	mov	r4, r0
   114f0:	mov	r5, sp
   114f4:	mov	r0, r4
   114f8:	mov	r1, r5
   114fc:	mov	r2, #16384	; 0x4000
   11500:	bl	10ee0 <rb_read@plt>
   11504:	cmp	r0, #0
   11508:	bgt	114f4 <rb_base64_encode@plt+0x4ac>
   1150c:	beq	11544 <rb_base64_encode@plt+0x4fc>
   11510:	bl	1103c <__errno_location@plt>
   11514:	ldr	r0, [r0]
   11518:	bl	10e20 <rb_ignore_errno@plt>
   1151c:	cmp	r0, #0
   11520:	beq	11544 <rb_base64_encode@plt+0x4fc>
   11524:	movw	r2, #5344	; 0x14e0
   11528:	movt	r2, #1
   1152c:	mov	r0, r4
   11530:	mov	r1, #1
   11534:	mov	r3, #0
   11538:	bl	10e38 <rb_setselect@plt>
   1153c:	sub	sp, fp, #16
   11540:	pop	{r4, r5, r6, r7, fp, pc}
   11544:	mov	r0, #0
   11548:	bl	11030 <exit@plt>
   1154c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11550:	add	fp, sp, #28
   11554:	sub	sp, sp, #4
   11558:	mov	r8, r1
   1155c:	add	r5, r1, #24
   11560:	mov	r9, #16384	; 0x4000
   11564:	mov	sl, #4
   11568:	mov	r0, #40	; 0x28
   1156c:	bl	11480 <rb_base64_encode@plt+0x438>
   11570:	mov	r6, r0
   11574:	mov	r0, #16384	; 0x4000
   11578:	bl	11480 <rb_base64_encode@plt+0x438>
   1157c:	mov	r1, r0
   11580:	str	r0, [r6, #12]
   11584:	str	r9, [r6, #16]
   11588:	ldr	r0, [r8, #16]
   1158c:	str	sl, [sp]
   11590:	add	r4, r6, #20
   11594:	mov	r2, #16384	; 0x4000
   11598:	mov	r3, r4
   1159c:	bl	10fdc <rb_recv_fd_buf@plt>
   115a0:	mov	r7, r0
   115a4:	cmp	r0, #0
   115a8:	ble	115ec <rb_base64_encode@plt+0x5a4>
   115ac:	str	r7, [r6, #16]
   115b0:	mov	r0, r6
   115b4:	mov	r1, r6
   115b8:	mov	r2, r5
   115bc:	bl	11690 <rb_base64_encode@plt+0x648>
   115c0:	mov	r0, #0
   115c4:	ldr	r1, [r4, r0, lsl #2]
   115c8:	cmp	r1, #0
   115cc:	beq	115dc <rb_base64_encode@plt+0x594>
   115d0:	add	r0, r0, #1
   115d4:	cmp	r0, #4
   115d8:	bcc	115c4 <rb_base64_encode@plt+0x57c>
   115dc:	str	r0, [r6, #36]	; 0x24
   115e0:	cmp	r7, #0
   115e4:	bgt	11568 <rb_base64_encode@plt+0x520>
   115e8:	b	115fc <rb_base64_encode@plt+0x5b4>
   115ec:	ldr	r0, [r6, #12]
   115f0:	bl	11684 <rb_base64_encode@plt+0x63c>
   115f4:	mov	r0, r6
   115f8:	bl	11684 <rb_base64_encode@plt+0x63c>
   115fc:	cmp	r7, #0
   11600:	beq	11640 <rb_base64_encode@plt+0x5f8>
   11604:	bl	1103c <__errno_location@plt>
   11608:	ldr	r0, [r0]
   1160c:	bl	10e20 <rb_ignore_errno@plt>
   11610:	cmp	r0, #0
   11614:	beq	11640 <rb_base64_encode@plt+0x5f8>
   11618:	mov	r0, r8
   1161c:	bl	11764 <rb_base64_encode@plt+0x71c>
   11620:	ldr	r0, [r8, #16]
   11624:	movw	r2, #5452	; 0x154c
   11628:	movt	r2, #1
   1162c:	mov	r1, #1
   11630:	mov	r3, r8
   11634:	sub	sp, fp, #28
   11638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1163c:	b	10e38 <rb_setselect@plt>
   11640:	mov	r0, #0
   11644:	bl	11030 <exit@plt>
   11648:	bx	lr
   1164c:	push	{r4, sl, fp, lr}
   11650:	add	fp, sp, #8
   11654:	mov	r4, r0
   11658:	add	r0, r0, #52	; 0x34
   1165c:	bl	10f28 <rb_linebuf_donebuf@plt>
   11660:	add	r0, r4, #24
   11664:	bl	10f28 <rb_linebuf_donebuf@plt>
   11668:	ldr	r0, [r4, #20]
   1166c:	bl	10f70 <rb_free_rawbuffer@plt>
   11670:	ldr	r0, [r4, #16]
   11674:	bl	10f70 <rb_free_rawbuffer@plt>
   11678:	mov	r0, r4
   1167c:	pop	{r4, sl, fp, lr}
   11680:	b	11684 <rb_base64_encode@plt+0x63c>
   11684:	cmp	r0, #0
   11688:	bxeq	lr
   1168c:	b	10ec8 <free@plt>
   11690:	push	{fp, lr}
   11694:	mov	fp, sp
   11698:	cmp	r1, #0
   1169c:	beq	11704 <rb_base64_encode@plt+0x6bc>
   116a0:	cmp	r2, #0
   116a4:	beq	11724 <rb_base64_encode@plt+0x6dc>
   116a8:	cmp	r0, #0
   116ac:	beq	11744 <rb_base64_encode@plt+0x6fc>
   116b0:	mov	r3, #0
   116b4:	str	r3, [r1, #8]
   116b8:	str	r0, [r1]
   116bc:	ldr	r0, [r2, #4]
   116c0:	str	r0, [r1, #4]
   116c4:	ldr	r0, [r2, #4]
   116c8:	cmp	r0, #0
   116cc:	beq	116dc <rb_base64_encode@plt+0x694>
   116d0:	add	r0, r0, #8
   116d4:	str	r1, [r0]
   116d8:	b	116e8 <rb_base64_encode@plt+0x6a0>
   116dc:	ldr	r0, [r2]
   116e0:	cmp	r0, #0
   116e4:	beq	116fc <rb_base64_encode@plt+0x6b4>
   116e8:	str	r1, [r2, #4]
   116ec:	ldr	r0, [r2, #8]
   116f0:	add	r0, r0, #1
   116f4:	str	r0, [r2, #8]
   116f8:	pop	{fp, pc}
   116fc:	mov	r0, r2
   11700:	b	116d4 <rb_base64_encode@plt+0x68c>
   11704:	movw	r0, #16693	; 0x4135
   11708:	movt	r0, #1
   1170c:	movw	r1, #16703	; 0x413f
   11710:	movt	r1, #1
   11714:	movw	r3, #16731	; 0x415b
   11718:	movt	r3, #1
   1171c:	mov	r2, #211	; 0xd3
   11720:	bl	10e98 <__assert_fail@plt>
   11724:	movw	r0, #16794	; 0x419a
   11728:	movt	r0, #1
   1172c:	movw	r1, #16703	; 0x413f
   11730:	movt	r1, #1
   11734:	movw	r3, #16731	; 0x415b
   11738:	movt	r3, #1
   1173c:	mov	r2, #212	; 0xd4
   11740:	bl	10e98 <__assert_fail@plt>
   11744:	movw	r0, #16807	; 0x41a7
   11748:	movt	r0, #1
   1174c:	movw	r1, #16703	; 0x413f
   11750:	movt	r1, #1
   11754:	movw	r3, #16731	; 0x415b
   11758:	movt	r3, #1
   1175c:	mov	r2, #213	; 0xd5
   11760:	bl	10e98 <__assert_fail@plt>
   11764:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11768:	add	fp, sp, #24
   1176c:	mov	r5, r0
   11770:	ldr	r4, [r5, #24]!
   11774:	cmp	r4, #0
   11778:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1177c:	mov	r8, r0
   11780:	mov	r7, r4
   11784:	ldr	r6, [r4]
   11788:	ldr	r4, [r4, #8]
   1178c:	ldr	r0, [r6, #12]
   11790:	ldrb	r0, [r0]
   11794:	cmp	r0, #65	; 0x41
   11798:	bne	117c8 <rb_base64_encode@plt+0x780>
   1179c:	ldr	r0, [r6, #36]	; 0x24
   117a0:	cmp	r0, #2
   117a4:	ldreq	r0, [r6, #16]
   117a8:	cmpeq	r0, #5
   117ac:	beq	117bc <rb_base64_encode@plt+0x774>
   117b0:	mov	r0, r6
   117b4:	bl	117f0 <rb_base64_encode@plt+0x7a8>
   117b8:	b	117c8 <rb_base64_encode@plt+0x780>
   117bc:	mov	r0, r8
   117c0:	mov	r1, r6
   117c4:	bl	1182c <rb_base64_encode@plt+0x7e4>
   117c8:	mov	r0, r7
   117cc:	mov	r1, r5
   117d0:	bl	118c0 <rb_base64_encode@plt+0x878>
   117d4:	ldr	r0, [r6, #12]
   117d8:	bl	11684 <rb_base64_encode@plt+0x63c>
   117dc:	mov	r0, r6
   117e0:	bl	11684 <rb_base64_encode@plt+0x63c>
   117e4:	cmp	r4, #0
   117e8:	bne	11780 <rb_base64_encode@plt+0x738>
   117ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   117f0:	push	{r4, r5, r6, sl, fp, lr}
   117f4:	add	fp, sp, #16
   117f8:	mov	r4, r0
   117fc:	ldr	r0, [r0, #36]	; 0x24
   11800:	cmp	r0, #1
   11804:	poplt	{r4, r5, r6, sl, fp, pc}
   11808:	add	r5, r4, #20
   1180c:	mov	r6, #0
   11810:	ldr	r0, [r5, r6, lsl #2]
   11814:	bl	10f40 <rb_close@plt>
   11818:	add	r6, r6, #1
   1181c:	ldr	r0, [r4, #36]	; 0x24
   11820:	cmp	r6, r0
   11824:	blt	11810 <rb_base64_encode@plt+0x7c8>
   11828:	pop	{r4, r5, r6, sl, fp, pc}
   1182c:	push	{r4, r5, fp, lr}
   11830:	add	fp, sp, #8
   11834:	mov	r5, r1
   11838:	ldr	r1, [r1, #20]
   1183c:	ldr	r2, [r5, #24]
   11840:	bl	11960 <rb_base64_encode@plt+0x918>
   11844:	mov	r4, r0
   11848:	ldr	r0, [r5, #12]
   1184c:	add	r0, r0, #1
   11850:	bl	119cc <rb_base64_encode@plt+0x984>
   11854:	mov	r1, r0
   11858:	mov	r0, r4
   1185c:	bl	119d4 <rb_base64_encode@plt+0x98c>
   11860:	ldrb	r0, [r4, #128]	; 0x80
   11864:	orr	r0, r0, #4
   11868:	strb	r0, [r4, #128]	; 0x80
   1186c:	ldr	r0, [r4, #84]	; 0x54
   11870:	bl	10dfc <rb_get_type@plt>
   11874:	tst	r0, #64	; 0x40
   11878:	beq	11888 <rb_base64_encode@plt+0x840>
   1187c:	ldr	r0, [r4, #84]	; 0x54
   11880:	mov	r1, #4
   11884:	bl	10eec <rb_set_type@plt>
   11888:	ldr	r0, [r4, #88]	; 0x58
   1188c:	bl	10dfc <rb_get_type@plt>
   11890:	cmp	r0, #64	; 0x40
   11894:	bne	118a4 <rb_base64_encode@plt+0x85c>
   11898:	ldr	r0, [r4, #88]	; 0x58
   1189c:	mov	r1, #4
   118a0:	bl	10eec <rb_set_type@plt>
   118a4:	ldr	r0, [r4, #84]	; 0x54
   118a8:	mov	r1, r4
   118ac:	bl	11a08 <rb_base64_encode@plt+0x9c0>
   118b0:	ldr	r0, [r4, #88]	; 0x58
   118b4:	mov	r1, r4
   118b8:	pop	{r4, r5, fp, lr}
   118bc:	b	11b34 <rb_base64_encode@plt+0xaec>
   118c0:	push	{fp, lr}
   118c4:	mov	fp, sp
   118c8:	cmp	r0, #0
   118cc:	beq	11920 <rb_base64_encode@plt+0x8d8>
   118d0:	cmp	r1, #0
   118d4:	beq	11940 <rb_base64_encode@plt+0x8f8>
   118d8:	ldr	ip, [r0, #4]
   118dc:	ldr	r3, [r0, #8]
   118e0:	add	r2, r3, #4
   118e4:	cmp	r3, #0
   118e8:	addeq	r2, r1, #4
   118ec:	str	ip, [r2]
   118f0:	ldmib	r0, {r2, ip}
   118f4:	cmp	r2, #0
   118f8:	mov	r3, r1
   118fc:	addne	r3, r2, #8
   11900:	str	ip, [r3]
   11904:	mov	r2, #0
   11908:	str	r2, [r0, #4]
   1190c:	str	r2, [r0, #8]
   11910:	ldr	r0, [r1, #8]
   11914:	sub	r0, r0, #1
   11918:	str	r0, [r1, #8]
   1191c:	pop	{fp, pc}
   11920:	movw	r0, #16693	; 0x4135
   11924:	movt	r0, #1
   11928:	movw	r1, #16703	; 0x413f
   1192c:	movt	r1, #1
   11930:	movw	r3, #17269	; 0x4375
   11934:	movt	r3, #1
   11938:	mov	r2, #235	; 0xeb
   1193c:	bl	10e98 <__assert_fail@plt>
   11940:	movw	r0, #16794	; 0x419a
   11944:	movt	r0, #1
   11948:	movw	r1, #16703	; 0x413f
   1194c:	movt	r1, #1
   11950:	movw	r3, #17269	; 0x4375
   11954:	movt	r3, #1
   11958:	mov	r2, #236	; 0xec
   1195c:	bl	10e98 <__assert_fail@plt>
   11960:	push	{r4, r5, r6, r7, fp, lr}
   11964:	add	fp, sp, #16
   11968:	mov	r5, r2
   1196c:	mov	r6, r1
   11970:	mov	r7, r0
   11974:	mov	r0, #168	; 0xa8
   11978:	bl	11480 <rb_base64_encode@plt+0x438>
   1197c:	mov	r4, r0
   11980:	str	r7, [r0, #12]
   11984:	mvn	r0, #0
   11988:	str	r0, [r4, #80]	; 0x50
   1198c:	str	r6, [r4, #84]	; 0x54
   11990:	str	r5, [r4, #88]	; 0x58
   11994:	mov	r0, r6
   11998:	bl	10e80 <rb_set_nb@plt>
   1199c:	mov	r0, r5
   119a0:	bl	10e80 <rb_set_nb@plt>
   119a4:	add	r0, r4, #52	; 0x34
   119a8:	bl	10ff4 <rb_linebuf_newbuf@plt>
   119ac:	add	r0, r4, #24
   119b0:	bl	10ff4 <rb_linebuf_newbuf@plt>
   119b4:	bl	10fc4 <rb_new_rawbuffer@plt>
   119b8:	str	r0, [r4, #20]
   119bc:	bl	10fc4 <rb_new_rawbuffer@plt>
   119c0:	str	r0, [r4, #16]
   119c4:	mov	r0, r4
   119c8:	pop	{r4, r5, r6, r7, fp, pc}
   119cc:	ldr	r0, [r0]
   119d0:	bx	lr
   119d4:	str	r1, [r0, #80]	; 0x50
   119d8:	movw	r2, #19923	; 0x4dd3
   119dc:	movt	r2, #4194	; 0x1062
   119e0:	umull	r2, r3, r1, r2
   119e4:	lsr	r2, r3, #7
   119e8:	mov	r3, #2000	; 0x7d0
   119ec:	mls	r1, r2, r3, r1
   119f0:	add	r1, r1, r1, lsl #1
   119f4:	movw	r2, #20748	; 0x510c
   119f8:	movt	r2, #2
   119fc:	add	r2, r2, r1, lsl #2
   11a00:	mov	r1, r0
   11a04:	b	11c5c <rb_base64_encode@plt+0xc14>
   11a08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a0c:	add	fp, sp, #24
   11a10:	sub	sp, sp, #16384	; 0x4000
   11a14:	mov	r4, r1
   11a18:	mov	r5, r0
   11a1c:	mov	r0, sp
   11a20:	mov	r1, #0
   11a24:	mov	r2, #16384	; 0x4000
   11a28:	bl	10e8c <memset@plt>
   11a2c:	cmp	r4, #0
   11a30:	beq	11ad0 <rb_base64_encode@plt+0xa88>
   11a34:	ldrb	r0, [r4, #128]	; 0x80
   11a38:	tst	r0, #2
   11a3c:	bne	11ad0 <rb_base64_encode@plt+0xa88>
   11a40:	mov	r6, sp
   11a44:	mov	r8, #0
   11a48:	ldrb	r0, [r4, #128]	; 0x80
   11a4c:	tst	r0, #2
   11a50:	bne	11ad0 <rb_base64_encode@plt+0xa88>
   11a54:	mov	r0, r5
   11a58:	mov	r1, r6
   11a5c:	mov	r2, #16384	; 0x4000
   11a60:	bl	10ee0 <rb_read@plt>
   11a64:	cmn	r0, #1
   11a68:	ble	11ad8 <rb_base64_encode@plt+0xa90>
   11a6c:	mov	r7, r0
   11a70:	cmp	r0, #0
   11a74:	beq	11b18 <rb_base64_encode@plt+0xad0>
   11a78:	ldr	r0, [r4, #20]
   11a7c:	mov	r1, r6
   11a80:	mov	r2, r7
   11a84:	bl	11018 <rb_rawbuf_append@plt>
   11a88:	ldrb	r0, [r4, #128]	; 0x80
   11a8c:	tst	r0, #8
   11a90:	bne	11aa8 <rb_base64_encode@plt+0xa60>
   11a94:	mov	r0, r4
   11a98:	bl	11f4c <rb_base64_encode@plt+0xf04>
   11a9c:	cmp	r8, r7, lsr #14
   11aa0:	bne	11a48 <rb_base64_encode@plt+0xa00>
   11aa4:	b	11ab8 <rb_base64_encode@plt+0xa70>
   11aa8:	mov	r0, r4
   11aac:	bl	1210c <rb_base64_encode@plt+0x10c4>
   11ab0:	cmp	r8, r7, lsr #14
   11ab4:	bne	11a48 <rb_base64_encode@plt+0xa00>
   11ab8:	movw	r2, #6664	; 0x1a08
   11abc:	movt	r2, #1
   11ac0:	mov	r0, r5
   11ac4:	mov	r1, #1
   11ac8:	mov	r3, r4
   11acc:	bl	10e38 <rb_setselect@plt>
   11ad0:	sub	sp, fp, #24
   11ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ad8:	bl	1103c <__errno_location@plt>
   11adc:	ldr	r0, [r0]
   11ae0:	bl	10e20 <rb_ignore_errno@plt>
   11ae4:	cmp	r0, #0
   11ae8:	beq	11b18 <rb_base64_encode@plt+0xad0>
   11aec:	movw	r2, #6664	; 0x1a08
   11af0:	movt	r2, #1
   11af4:	mov	r0, r5
   11af8:	mov	r1, #1
   11afc:	mov	r3, r4
   11b00:	bl	10e38 <rb_setselect@plt>
   11b04:	ldr	r0, [r4, #88]	; 0x58
   11b08:	mov	r1, r4
   11b0c:	bl	11d28 <rb_base64_encode@plt+0xce0>
   11b10:	sub	sp, fp, #24
   11b14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b18:	movw	r2, #16879	; 0x41ef
   11b1c:	movt	r2, #1
   11b20:	mov	r0, r4
   11b24:	mov	r1, #0
   11b28:	bl	11df0 <rb_base64_encode@plt+0xda8>
   11b2c:	sub	sp, fp, #24
   11b30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b38:	add	fp, sp, #24
   11b3c:	sub	sp, sp, #16384	; 0x4000
   11b40:	mov	r4, r1
   11b44:	mov	r0, sp
   11b48:	mov	r1, #0
   11b4c:	mov	r2, #16384	; 0x4000
   11b50:	bl	10e8c <memset@plt>
   11b54:	cmp	r4, #0
   11b58:	beq	11b78 <rb_base64_encode@plt+0xb30>
   11b5c:	ldrb	r0, [r4, #128]	; 0x80
   11b60:	tst	r0, #2
   11b64:	bne	11b78 <rb_base64_encode@plt+0xb30>
   11b68:	mov	r0, r4
   11b6c:	bl	128bc <rb_base64_encode@plt+0x1874>
   11b70:	cmp	r0, #0
   11b74:	beq	11b80 <rb_base64_encode@plt+0xb38>
   11b78:	sub	sp, fp, #24
   11b7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b80:	add	r5, r4, #52	; 0x34
   11b84:	add	r7, r4, #112	; 0x70
   11b88:	mov	r6, sp
   11b8c:	ldrb	r0, [r4, #128]	; 0x80
   11b90:	tst	r0, #2
   11b94:	bne	11b78 <rb_base64_encode@plt+0xb30>
   11b98:	ldr	r0, [r4, #88]	; 0x58
   11b9c:	mov	r1, r6
   11ba0:	mov	r2, #16384	; 0x4000
   11ba4:	bl	10ee0 <rb_read@plt>
   11ba8:	cmp	r0, #0
   11bac:	beq	11c44 <rb_base64_encode@plt+0xbfc>
   11bb0:	mov	r2, r0
   11bb4:	cmn	r0, #1
   11bb8:	ble	11bfc <rb_base64_encode@plt+0xbb4>
   11bbc:	ldrd	r0, [r7]
   11bc0:	adds	r0, r0, r2
   11bc4:	adc	r1, r1, r2, asr #31
   11bc8:	strd	r0, [r7]
   11bcc:	mov	r0, r5
   11bd0:	mov	r1, r6
   11bd4:	mov	r3, #0
   11bd8:	bl	10ea4 <rb_linebuf_parse@plt>
   11bdc:	ldrb	r0, [r4, #128]	; 0x80
   11be0:	tst	r0, #2
   11be4:	bne	11b78 <rb_base64_encode@plt+0xb30>
   11be8:	mov	r0, r4
   11bec:	bl	128bc <rb_base64_encode@plt+0x1874>
   11bf0:	cmp	r0, #0
   11bf4:	beq	11b8c <rb_base64_encode@plt+0xb44>
   11bf8:	b	11b78 <rb_base64_encode@plt+0xb30>
   11bfc:	bl	1103c <__errno_location@plt>
   11c00:	ldr	r0, [r0]
   11c04:	bl	10e20 <rb_ignore_errno@plt>
   11c08:	cmp	r0, #0
   11c0c:	beq	11c44 <rb_base64_encode@plt+0xbfc>
   11c10:	ldr	r0, [r4, #88]	; 0x58
   11c14:	movw	r2, #6964	; 0x1b34
   11c18:	movt	r2, #1
   11c1c:	mov	r1, #1
   11c20:	mov	r3, r4
   11c24:	bl	10e38 <rb_setselect@plt>
   11c28:	ldrb	r0, [r4, #128]	; 0x80
   11c2c:	tst	r0, #8
   11c30:	beq	11b78 <rb_base64_encode@plt+0xb30>
   11c34:	mov	r0, r4
   11c38:	bl	121a0 <rb_base64_encode@plt+0x1158>
   11c3c:	sub	sp, fp, #24
   11c40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c44:	mov	r0, r4
   11c48:	mov	r1, #0
   11c4c:	mov	r2, #0
   11c50:	bl	11df0 <rb_base64_encode@plt+0xda8>
   11c54:	sub	sp, fp, #24
   11c58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c5c:	push	{fp, lr}
   11c60:	mov	fp, sp
   11c64:	cmp	r0, #0
   11c68:	beq	11cc8 <rb_base64_encode@plt+0xc80>
   11c6c:	cmp	r1, #0
   11c70:	beq	11ce8 <rb_base64_encode@plt+0xca0>
   11c74:	cmp	r2, #0
   11c78:	beq	11d08 <rb_base64_encode@plt+0xcc0>
   11c7c:	mov	r3, #0
   11c80:	stm	r1, {r0, r3}
   11c84:	ldr	r0, [r2]
   11c88:	str	r0, [r1, #8]
   11c8c:	ldr	r0, [r2]
   11c90:	cmp	r0, #0
   11c94:	beq	11ca4 <rb_base64_encode@plt+0xc5c>
   11c98:	add	r0, r0, #4
   11c9c:	str	r1, [r0]
   11ca0:	b	11cb4 <rb_base64_encode@plt+0xc6c>
   11ca4:	mov	r0, r2
   11ca8:	ldr	r3, [r0, #4]!
   11cac:	cmp	r3, #0
   11cb0:	streq	r1, [r0]
   11cb4:	str	r1, [r2]
   11cb8:	ldr	r0, [r2, #8]
   11cbc:	add	r0, r0, #1
   11cc0:	str	r0, [r2, #8]
   11cc4:	pop	{fp, pc}
   11cc8:	movw	r0, #16807	; 0x41a7
   11ccc:	movt	r0, #1
   11cd0:	movw	r1, #16703	; 0x413f
   11cd4:	movt	r1, #1
   11cd8:	movw	r3, #16820	; 0x41b4
   11cdc:	movt	r3, #1
   11ce0:	mov	r2, #143	; 0x8f
   11ce4:	bl	10e98 <__assert_fail@plt>
   11ce8:	movw	r0, #16693	; 0x4135
   11cec:	movt	r0, #1
   11cf0:	movw	r1, #16703	; 0x413f
   11cf4:	movt	r1, #1
   11cf8:	movw	r3, #16820	; 0x41b4
   11cfc:	movt	r3, #1
   11d00:	mov	r2, #144	; 0x90
   11d04:	bl	10e98 <__assert_fail@plt>
   11d08:	movw	r0, #16794	; 0x419a
   11d0c:	movt	r0, #1
   11d10:	movw	r1, #16703	; 0x413f
   11d14:	movt	r1, #1
   11d18:	movw	r3, #16820	; 0x41b4
   11d1c:	movt	r3, #1
   11d20:	mov	r2, #145	; 0x91
   11d24:	bl	10e98 <__assert_fail@plt>
   11d28:	push	{r4, r5, r6, r7, fp, lr}
   11d2c:	add	fp, sp, #16
   11d30:	mov	r5, r0
   11d34:	ldrb	r0, [r1, #128]	; 0x80
   11d38:	tst	r0, #2
   11d3c:	popne	{r4, r5, r6, r7, fp, pc}
   11d40:	mov	r4, r1
   11d44:	add	r6, r1, #24
   11d48:	mov	r0, r5
   11d4c:	mov	r1, r6
   11d50:	bl	10f04 <rb_linebuf_flush@plt>
   11d54:	cmp	r0, #1
   11d58:	blt	11d84 <rb_base64_encode@plt+0xd3c>
   11d5c:	add	r7, r4, #120	; 0x78
   11d60:	ldrd	r2, [r7]
   11d64:	adds	r2, r2, r0
   11d68:	adc	r3, r3, r0, asr #31
   11d6c:	strd	r2, [r7]
   11d70:	mov	r0, r5
   11d74:	mov	r1, r6
   11d78:	bl	10f04 <rb_linebuf_flush@plt>
   11d7c:	cmp	r0, #0
   11d80:	bgt	11d60 <rb_base64_encode@plt+0xd18>
   11d84:	cmp	r0, #0
   11d88:	beq	11dc8 <rb_base64_encode@plt+0xd80>
   11d8c:	bl	1103c <__errno_location@plt>
   11d90:	ldr	r0, [r0]
   11d94:	bl	10e20 <rb_ignore_errno@plt>
   11d98:	cmp	r0, #0
   11d9c:	beq	11dc8 <rb_base64_encode@plt+0xd80>
   11da0:	ldr	r1, [r4, #40]	; 0x28
   11da4:	ldr	r0, [r4, #88]	; 0x58
   11da8:	cmp	r1, #1
   11dac:	blt	11ddc <rb_base64_encode@plt+0xd94>
   11db0:	movw	r2, #7464	; 0x1d28
   11db4:	movt	r2, #1
   11db8:	mov	r1, #2
   11dbc:	mov	r3, r4
   11dc0:	pop	{r4, r5, r6, r7, fp, lr}
   11dc4:	b	10e38 <rb_setselect@plt>
   11dc8:	mov	r0, r4
   11dcc:	mov	r1, #0
   11dd0:	mov	r2, #0
   11dd4:	pop	{r4, r5, r6, r7, fp, lr}
   11dd8:	b	11df0 <rb_base64_encode@plt+0xda8>
   11ddc:	mov	r1, #2
   11de0:	mov	r2, #0
   11de4:	mov	r3, #0
   11de8:	pop	{r4, r5, r6, r7, fp, lr}
   11dec:	b	10e38 <rb_setselect@plt>
   11df0:	sub	sp, sp, #4
   11df4:	push	{r4, r5, r6, sl, fp, lr}
   11df8:	add	fp, sp, #16
   11dfc:	sub	sp, sp, #388	; 0x184
   11e00:	mov	r4, r0
   11e04:	str	r3, [fp, #8]
   11e08:	ldrb	r0, [r0, #128]	; 0x80
   11e0c:	tst	r0, #2
   11e10:	bne	11f3c <rb_base64_encode@plt+0xef4>
   11e14:	mov	r5, r2
   11e18:	mov	r6, r1
   11e1c:	tst	r0, #8
   11e20:	movne	r0, r4
   11e24:	blne	121a0 <rb_base64_encode@plt+0x1158>
   11e28:	ldr	r0, [r4, #16]
   11e2c:	ldr	r1, [r4, #84]	; 0x54
   11e30:	bl	11024 <rb_rawbuf_flush@plt>
   11e34:	ldr	r0, [r4, #88]	; 0x58
   11e38:	add	r1, r4, #24
   11e3c:	bl	10f04 <rb_linebuf_flush@plt>
   11e40:	ldr	r0, [r4, #84]	; 0x54
   11e44:	bl	10f40 <rb_close@plt>
   11e48:	ldrb	r0, [r4, #128]	; 0x80
   11e4c:	orr	r0, r0, #2
   11e50:	strb	r0, [r4, #128]	; 0x80
   11e54:	ldr	r0, [r4, #80]	; 0x50
   11e58:	movw	r1, #19923	; 0x4dd3
   11e5c:	movt	r1, #4194	; 0x1062
   11e60:	umull	r1, r2, r0, r1
   11e64:	lsr	r1, r2, #7
   11e68:	mov	r2, #2000	; 0x7d0
   11e6c:	mls	r0, r1, r2, r0
   11e70:	add	r0, r0, r0, lsl #1
   11e74:	movw	r1, #20748	; 0x510c
   11e78:	movt	r1, #2
   11e7c:	add	r1, r1, r0, lsl #2
   11e80:	mov	r0, r4
   11e84:	bl	118c0 <rb_base64_encode@plt+0x878>
   11e88:	ldr	r0, [r4, #88]	; 0x58
   11e8c:	cmp	r6, #0
   11e90:	cmpne	r5, #0
   11e94:	bne	11eb4 <rb_base64_encode@plt+0xe6c>
   11e98:	bl	10f40 <rb_close@plt>
   11e9c:	movw	r2, #20736	; 0x5100
   11ea0:	movt	r2, #2
   11ea4:	mov	r0, r4
   11ea8:	mov	r1, r4
   11eac:	bl	11c5c <rb_base64_encode@plt+0xc14>
   11eb0:	b	11f3c <rb_base64_encode@plt+0xef4>
   11eb4:	movw	r2, #8776	; 0x2248
   11eb8:	movt	r2, #1
   11ebc:	mov	r1, #1
   11ec0:	mov	r3, r4
   11ec4:	bl	10e38 <rb_setselect@plt>
   11ec8:	ldr	r0, [r4, #88]	; 0x58
   11ecc:	mov	r1, #2
   11ed0:	mov	r2, #0
   11ed4:	mov	r3, #0
   11ed8:	bl	10e38 <rb_setselect@plt>
   11edc:	add	r3, fp, #8
   11ee0:	str	r3, [fp, #-20]	; 0xffffffec
   11ee4:	sub	r6, fp, #148	; 0x94
   11ee8:	mov	r0, r6
   11eec:	mov	r1, #128	; 0x80
   11ef0:	mov	r2, r5
   11ef4:	bl	10e5c <vsnprintf@plt>
   11ef8:	mov	r0, #68	; 0x44
   11efc:	strb	r0, [sp]
   11f00:	ldr	r1, [r4, #80]	; 0x50
   11f04:	mov	r5, sp
   11f08:	add	r0, r5, #1
   11f0c:	bl	122dc <rb_base64_encode@plt+0x1294>
   11f10:	add	r0, r5, #5
   11f14:	mov	r1, r6
   11f18:	mov	r2, #251	; 0xfb
   11f1c:	bl	10eb0 <rb_strlcpy@plt>
   11f20:	mov	r0, r6
   11f24:	bl	10f10 <strlen@plt>
   11f28:	ldr	r1, [r4, #12]
   11f2c:	add	r2, r0, #6
   11f30:	mov	r0, r1
   11f34:	mov	r1, r5
   11f38:	bl	122e4 <rb_base64_encode@plt+0x129c>
   11f3c:	sub	sp, fp, #16
   11f40:	pop	{r4, r5, r6, sl, fp, lr}
   11f44:	add	sp, sp, #4
   11f48:	bx	lr
   11f4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f50:	add	fp, sp, #24
   11f54:	sub	sp, sp, #128	; 0x80
   11f58:	sub	sp, sp, #16384	; 0x4000
   11f5c:	mov	r4, r0
   11f60:	add	r5, sp, #120	; 0x78
   11f64:	mov	r8, #0
   11f68:	mov	r0, r5
   11f6c:	mov	r1, #0
   11f70:	mov	r2, #16384	; 0x4000
   11f74:	bl	10e8c <memset@plt>
   11f78:	ldr	r0, [r4, #20]
   11f7c:	mov	r1, r5
   11f80:	mov	r2, #16384	; 0x4000
   11f84:	bl	10fa0 <rb_rawbuf_get@plt>
   11f88:	cmp	r0, #0
   11f8c:	beq	12048 <rb_base64_encode@plt+0x1000>
   11f90:	add	r6, r4, #129	; 0x81
   11f94:	add	r7, r5, #16384	; 0x4000
   11f98:	movw	r9, #16947	; 0x4233
   11f9c:	movt	r9, #1
   11fa0:	mov	r0, r5
   11fa4:	mov	r1, r9
   11fa8:	bl	10f34 <rb_strcasestr@plt>
   11fac:	cmp	r0, #0
   11fb0:	beq	12030 <rb_base64_encode@plt+0xfe8>
   11fb4:	add	r1, r0, #18
   11fb8:	cmp	r1, r7
   11fbc:	bcc	11fd0 <rb_base64_encode@plt+0xf88>
   11fc0:	b	11fe0 <rb_base64_encode@plt+0xf98>
   11fc4:	add	r1, r1, #1
   11fc8:	cmp	r1, r7
   11fcc:	bcs	11fe0 <rb_base64_encode@plt+0xf98>
   11fd0:	ldrb	r0, [r1]
   11fd4:	cmp	r0, #32
   11fd8:	cmpne	r0, #9
   11fdc:	beq	11fc4 <rb_base64_encode@plt+0xf7c>
   11fe0:	cmp	r1, r7
   11fe4:	bcs	12018 <rb_base64_encode@plt+0xfd0>
   11fe8:	mov	r0, r1
   11fec:	ldrb	r2, [r0]
   11ff0:	cmp	r2, #0
   11ff4:	beq	12018 <rb_base64_encode@plt+0xfd0>
   11ff8:	cmp	r2, #13
   11ffc:	cmpne	r2, #10
   12000:	beq	12014 <rb_base64_encode@plt+0xfcc>
   12004:	add	r0, r0, #1
   12008:	cmp	r0, r7
   1200c:	bcc	11fec <rb_base64_encode@plt+0xfa4>
   12010:	b	12018 <rb_base64_encode@plt+0xfd0>
   12014:	strb	r8, [r0]
   12018:	mov	r0, r6
   1201c:	mov	r2, #37	; 0x25
   12020:	bl	10eb0 <rb_strlcpy@plt>
   12024:	ldrb	r0, [r4, #128]	; 0x80
   12028:	orr	r0, r0, #8
   1202c:	strb	r0, [r4, #128]	; 0x80
   12030:	ldr	r0, [r4, #20]
   12034:	mov	r1, r5
   12038:	mov	r2, #16384	; 0x4000
   1203c:	bl	10fa0 <rb_rawbuf_get@plt>
   12040:	cmp	r0, #0
   12044:	bne	11fa0 <rb_base64_encode@plt+0xf58>
   12048:	ldrb	r0, [r4, #128]	; 0x80
   1204c:	tst	r0, #8
   12050:	beq	120f8 <rb_base64_encode@plt+0x10b0>
   12054:	add	r5, sp, #24
   12058:	mov	r0, r5
   1205c:	bl	12920 <rb_base64_encode@plt+0x18d8>
   12060:	add	r6, r4, #129	; 0x81
   12064:	mov	r0, r6
   12068:	bl	10f10 <strlen@plt>
   1206c:	mov	r2, r0
   12070:	mov	r0, r5
   12074:	mov	r1, r6
   12078:	bl	12970 <rb_base64_encode@plt+0x1928>
   1207c:	movw	r1, #16966	; 0x4246
   12080:	movt	r1, #1
   12084:	mov	r0, r5
   12088:	mov	r2, #36	; 0x24
   1208c:	bl	12970 <rb_base64_encode@plt+0x1928>
   12090:	add	r6, sp, #4
   12094:	mov	r0, r5
   12098:	mov	r1, r6
   1209c:	bl	13eec <rb_base64_encode@plt+0x2ea4>
   120a0:	mov	r0, r6
   120a4:	mov	r1, #20
   120a8:	bl	11048 <rb_base64_encode@plt>
   120ac:	mov	r5, r0
   120b0:	movw	r1, #17003	; 0x426b
   120b4:	movt	r1, #1
   120b8:	mov	r0, r4
   120bc:	mov	r2, #129	; 0x81
   120c0:	bl	125bc <rb_base64_encode@plt+0x1574>
   120c4:	mov	r0, r5
   120c8:	bl	10f10 <strlen@plt>
   120cc:	mov	r2, r0
   120d0:	mov	r0, r4
   120d4:	mov	r1, r5
   120d8:	bl	125bc <rb_base64_encode@plt+0x1574>
   120dc:	movw	r1, #17133	; 0x42ed
   120e0:	movt	r1, #1
   120e4:	mov	r0, r4
   120e8:	mov	r2, #4
   120ec:	bl	125bc <rb_base64_encode@plt+0x1574>
   120f0:	mov	r0, r5
   120f4:	bl	11684 <rb_base64_encode@plt+0x63c>
   120f8:	ldr	r0, [r4, #84]	; 0x54
   120fc:	mov	r1, r4
   12100:	bl	12364 <rb_base64_encode@plt+0x131c>
   12104:	sub	sp, fp, #24
   12108:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1210c:	push	{r4, r5, fp, lr}
   12110:	add	fp, sp, #8
   12114:	sub	sp, sp, #8
   12118:	mov	r4, r0
   1211c:	ldr	r0, [r0, #20]
   12120:	add	r1, sp, #4
   12124:	mov	r2, #2
   12128:	bl	10fa0 <rb_rawbuf_get@plt>
   1212c:	cmp	r0, #2
   12130:	bne	1218c <rb_base64_encode@plt+0x1144>
   12134:	add	r5, sp, #4
   12138:	ldrb	r1, [sp, #5]
   1213c:	and	r0, r1, #127	; 0x7f
   12140:	strb	r0, [sp, #5]
   12144:	cmp	r0, #127	; 0x7f
   12148:	beq	12174 <rb_base64_encode@plt+0x112c>
   1214c:	lsr	r2, r1, #7
   12150:	cmp	r0, #126	; 0x7e
   12154:	bne	12168 <rb_base64_encode@plt+0x1120>
   12158:	mov	r0, r4
   1215c:	mov	r1, r2
   12160:	bl	126e4 <rb_base64_encode@plt+0x169c>
   12164:	b	12174 <rb_base64_encode@plt+0x112c>
   12168:	mov	r0, r4
   1216c:	mov	r1, r5
   12170:	bl	127d4 <rb_base64_encode@plt+0x178c>
   12174:	ldr	r0, [r4, #20]
   12178:	mov	r1, r5
   1217c:	mov	r2, #2
   12180:	bl	10fa0 <rb_rawbuf_get@plt>
   12184:	cmp	r0, #2
   12188:	beq	12138 <rb_base64_encode@plt+0x10f0>
   1218c:	ldr	r0, [r4, #88]	; 0x58
   12190:	mov	r1, r4
   12194:	bl	11d28 <rb_base64_encode@plt+0xce0>
   12198:	sub	sp, fp, #8
   1219c:	pop	{r4, r5, fp, pc}
   121a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   121a4:	add	fp, sp, #24
   121a8:	sub	sp, sp, #8
   121ac:	sub	sp, sp, #16384	; 0x4000
   121b0:	mov	r4, r0
   121b4:	add	r6, sp, #8
   121b8:	mov	r7, #0
   121bc:	mov	r0, r6
   121c0:	mov	r1, #0
   121c4:	mov	r2, #16384	; 0x4000
   121c8:	bl	10e8c <memset@plt>
   121cc:	str	r7, [sp]
   121d0:	add	r5, r4, #52	; 0x34
   121d4:	mov	r0, r5
   121d8:	mov	r1, r6
   121dc:	mov	r2, #16384	; 0x4000
   121e0:	mov	r3, #0
   121e4:	bl	10ef8 <rb_linebuf_get@plt>
   121e8:	cmp	r0, #0
   121ec:	beq	12228 <rb_base64_encode@plt+0x11e0>
   121f0:	mov	r2, r0
   121f4:	add	r6, sp, #8
   121f8:	mov	r0, r4
   121fc:	mov	r1, r6
   12200:	bl	12348 <rb_base64_encode@plt+0x1300>
   12204:	str	r7, [sp]
   12208:	mov	r0, r5
   1220c:	mov	r1, r6
   12210:	mov	r2, #16384	; 0x4000
   12214:	mov	r3, #0
   12218:	bl	10ef8 <rb_linebuf_get@plt>
   1221c:	mov	r2, r0
   12220:	cmp	r0, #0
   12224:	bne	121f8 <rb_base64_encode@plt+0x11b0>
   12228:	ldrb	r0, [r4, #128]	; 0x80
   1222c:	tst	r0, #8
   12230:	beq	12240 <rb_base64_encode@plt+0x11f8>
   12234:	ldr	r0, [r4, #84]	; 0x54
   12238:	mov	r1, r4
   1223c:	bl	12364 <rb_base64_encode@plt+0x131c>
   12240:	sub	sp, fp, #24
   12244:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12248:	push	{r4, r5, r6, r7, fp, lr}
   1224c:	add	fp, sp, #16
   12250:	sub	sp, sp, #16384	; 0x4000
   12254:	cmp	r1, #0
   12258:	beq	122b0 <rb_base64_encode@plt+0x1268>
   1225c:	mov	r4, r1
   12260:	mov	r5, sp
   12264:	ldr	r0, [r4, #88]	; 0x58
   12268:	mov	r1, r5
   1226c:	mov	r2, #16384	; 0x4000
   12270:	bl	10ee0 <rb_read@plt>
   12274:	cmp	r0, #0
   12278:	beq	122b8 <rb_base64_encode@plt+0x1270>
   1227c:	cmn	r0, #1
   12280:	bgt	12264 <rb_base64_encode@plt+0x121c>
   12284:	bl	1103c <__errno_location@plt>
   12288:	ldr	r0, [r0]
   1228c:	bl	10e20 <rb_ignore_errno@plt>
   12290:	cmp	r0, #0
   12294:	beq	122b8 <rb_base64_encode@plt+0x1270>
   12298:	ldr	r0, [r4, #88]	; 0x58
   1229c:	movw	r2, #8776	; 0x2248
   122a0:	movt	r2, #1
   122a4:	mov	r1, #1
   122a8:	mov	r3, r4
   122ac:	bl	10e38 <rb_setselect@plt>
   122b0:	sub	sp, fp, #16
   122b4:	pop	{r4, r5, r6, r7, fp, pc}
   122b8:	ldr	r0, [r4, #88]	; 0x58
   122bc:	bl	10f40 <rb_close@plt>
   122c0:	movw	r2, #20736	; 0x5100
   122c4:	movt	r2, #2
   122c8:	mov	r0, r4
   122cc:	mov	r1, r4
   122d0:	bl	11c5c <rb_base64_encode@plt+0xc14>
   122d4:	sub	sp, fp, #16
   122d8:	pop	{r4, r5, r6, r7, fp, pc}
   122dc:	str	r1, [r0]
   122e0:	bx	lr
   122e4:	push	{r4, r5, r6, r7, fp, lr}
   122e8:	add	fp, sp, #16
   122ec:	mov	r4, r2
   122f0:	mov	r5, r1
   122f4:	mov	r6, r0
   122f8:	mov	r0, #40	; 0x28
   122fc:	bl	11480 <rb_base64_encode@plt+0x438>
   12300:	mov	r7, r0
   12304:	mov	r0, r4
   12308:	bl	11480 <rb_base64_encode@plt+0x438>
   1230c:	str	r0, [r7, #12]
   12310:	str	r4, [r7, #16]
   12314:	mov	r1, r5
   12318:	mov	r2, r4
   1231c:	bl	10f1c <memcpy@plt>
   12320:	mov	r0, #0
   12324:	str	r0, [r7, #36]	; 0x24
   12328:	add	r2, r6, #36	; 0x24
   1232c:	mov	r0, r7
   12330:	mov	r1, r7
   12334:	bl	11690 <rb_base64_encode@plt+0x648>
   12338:	ldr	r0, [r6, #16]
   1233c:	mov	r1, r6
   12340:	pop	{r4, r5, r6, r7, fp, lr}
   12344:	b	125d8 <rb_base64_encode@plt+0x1590>
   12348:	ldrb	r3, [r0, #128]	; 0x80
   1234c:	tst	r3, #2
   12350:	bxne	lr
   12354:	cmp	r2, #122	; 0x7a
   12358:	bgt	12360 <rb_base64_encode@plt+0x1318>
   1235c:	b	12494 <rb_base64_encode@plt+0x144c>
   12360:	b	12510 <rb_base64_encode@plt+0x14c8>
   12364:	push	{r4, r5, r6, sl, fp, lr}
   12368:	add	fp, sp, #16
   1236c:	mov	r5, r0
   12370:	ldrb	r0, [r1, #128]	; 0x80
   12374:	tst	r0, #2
   12378:	bne	12474 <rb_base64_encode@plt+0x142c>
   1237c:	mov	r4, r1
   12380:	ldr	r0, [r1, #16]
   12384:	mov	r1, r5
   12388:	bl	11024 <rb_rawbuf_flush@plt>
   1238c:	cmp	r0, #1
   12390:	blt	123bc <rb_base64_encode@plt+0x1374>
   12394:	add	r6, r4, #96	; 0x60
   12398:	ldrd	r2, [r6]
   1239c:	adds	r2, r2, r0
   123a0:	adc	r3, r3, r0, asr #31
   123a4:	strd	r2, [r6]
   123a8:	ldr	r0, [r4, #16]
   123ac:	mov	r1, r5
   123b0:	bl	11024 <rb_rawbuf_flush@plt>
   123b4:	cmp	r0, #0
   123b8:	bgt	12398 <rb_base64_encode@plt+0x1350>
   123bc:	cmp	r0, #0
   123c0:	beq	12404 <rb_base64_encode@plt+0x13bc>
   123c4:	bl	1103c <__errno_location@plt>
   123c8:	ldr	r0, [r0]
   123cc:	bl	10e20 <rb_ignore_errno@plt>
   123d0:	cmp	r0, #0
   123d4:	beq	12420 <rb_base64_encode@plt+0x13d8>
   123d8:	ldr	r0, [r4, #16]
   123dc:	bl	10f64 <rb_rawbuf_length@plt>
   123e0:	mov	r1, r0
   123e4:	ldr	r0, [r4, #84]	; 0x54
   123e8:	cmp	r1, #1
   123ec:	blt	12448 <rb_base64_encode@plt+0x1400>
   123f0:	movw	r2, #9060	; 0x2364
   123f4:	movt	r2, #1
   123f8:	mov	r1, #2
   123fc:	mov	r3, r4
   12400:	b	12454 <rb_base64_encode@plt+0x140c>
   12404:	movw	r2, #16910	; 0x420e
   12408:	movt	r2, #1
   1240c:	movw	r3, #16913	; 0x4211
   12410:	movt	r3, #1
   12414:	mov	r0, r4
   12418:	mov	r1, #1
   1241c:	bl	11df0 <rb_base64_encode@plt+0xda8>
   12420:	bl	1103c <__errno_location@plt>
   12424:	ldr	r0, [r0]
   12428:	bl	10df0 <strerror@plt>
   1242c:	mov	r3, r0
   12430:	movw	r2, #16897	; 0x4201
   12434:	movt	r2, #1
   12438:	mov	r0, r4
   1243c:	mov	r1, #1
   12440:	pop	{r4, r5, r6, sl, fp, lr}
   12444:	b	11df0 <rb_base64_encode@plt+0xda8>
   12448:	mov	r1, #2
   1244c:	mov	r2, #0
   12450:	mov	r3, #0
   12454:	bl	10e38 <rb_setselect@plt>
   12458:	ldrb	r0, [r4, #128]	; 0x80
   1245c:	tst	r0, #1
   12460:	popeq	{r4, r5, r6, sl, fp, pc}
   12464:	ldr	r0, [r4, #16]
   12468:	bl	10f64 <rb_rawbuf_length@plt>
   1246c:	cmp	r0, #0
   12470:	beq	12478 <rb_base64_encode@plt+0x1430>
   12474:	pop	{r4, r5, r6, sl, fp, pc}
   12478:	ldrb	r0, [r4, #128]	; 0x80
   1247c:	and	r0, r0, #254	; 0xfe
   12480:	strb	r0, [r4, #128]	; 0x80
   12484:	ldr	r0, [r4, #88]	; 0x58
   12488:	mov	r1, r4
   1248c:	pop	{r4, r5, r6, sl, fp, lr}
   12490:	b	11b34 <rb_base64_encode@plt+0xaec>
   12494:	push	{r4, r5, r6, r7, fp, lr}
   12498:	add	fp, sp, #16
   1249c:	sub	sp, sp, #8
   124a0:	mov	r4, r2
   124a4:	mov	r5, r1
   124a8:	mov	r6, r0
   124ac:	mov	r0, #0
   124b0:	strh	r0, [sp, #6]
   124b4:	add	r7, sp, #6
   124b8:	mov	r0, r7
   124bc:	bl	12598 <rb_base64_encode@plt+0x1550>
   124c0:	mov	r0, r7
   124c4:	bl	125ac <rb_base64_encode@plt+0x1564>
   124c8:	add	r0, r4, #2
   124cc:	and	r0, r0, #127	; 0x7f
   124d0:	strb	r0, [sp, #7]
   124d4:	mov	r0, r6
   124d8:	mov	r1, r7
   124dc:	mov	r2, #2
   124e0:	bl	125bc <rb_base64_encode@plt+0x1574>
   124e4:	mov	r0, r6
   124e8:	mov	r1, r5
   124ec:	mov	r2, r4
   124f0:	bl	125bc <rb_base64_encode@plt+0x1574>
   124f4:	movw	r1, #17135	; 0x42ef
   124f8:	movt	r1, #1
   124fc:	mov	r0, r6
   12500:	mov	r2, #2
   12504:	bl	125bc <rb_base64_encode@plt+0x1574>
   12508:	sub	sp, fp, #16
   1250c:	pop	{r4, r5, r6, r7, fp, pc}
   12510:	push	{r4, r5, r6, r7, fp, lr}
   12514:	add	fp, sp, #16
   12518:	sub	sp, sp, #8
   1251c:	mov	r5, r2
   12520:	mov	r6, r1
   12524:	mov	r4, r0
   12528:	mov	r0, #0
   1252c:	str	r0, [sp, #4]
   12530:	add	r7, sp, #4
   12534:	mov	r0, r7
   12538:	bl	12598 <rb_base64_encode@plt+0x1550>
   1253c:	mov	r0, r7
   12540:	bl	125ac <rb_base64_encode@plt+0x1564>
   12544:	mov	r0, #126	; 0x7e
   12548:	strb	r0, [sp, #5]
   1254c:	add	r0, r5, #2
   12550:	uxth	r0, r0
   12554:	bl	125d0 <rb_base64_encode@plt+0x1588>
   12558:	strh	r0, [sp, #6]
   1255c:	mov	r0, r4
   12560:	mov	r1, r7
   12564:	mov	r2, #4
   12568:	bl	125bc <rb_base64_encode@plt+0x1574>
   1256c:	mov	r0, r4
   12570:	mov	r1, r6
   12574:	mov	r2, r5
   12578:	bl	125bc <rb_base64_encode@plt+0x1574>
   1257c:	movw	r1, #17135	; 0x42ef
   12580:	movt	r1, #1
   12584:	mov	r0, r4
   12588:	mov	r2, #2
   1258c:	bl	125bc <rb_base64_encode@plt+0x1574>
   12590:	sub	sp, fp, #16
   12594:	pop	{r4, r5, r6, r7, fp, pc}
   12598:	ldrb	r1, [r0]
   1259c:	and	r1, r1, #240	; 0xf0
   125a0:	orr	r1, r1, #1
   125a4:	strb	r1, [r0]
   125a8:	bx	lr
   125ac:	ldrb	r1, [r0]
   125b0:	orr	r1, r1, #128	; 0x80
   125b4:	strb	r1, [r0]
   125b8:	bx	lr
   125bc:	ldrb	r3, [r0, #128]	; 0x80
   125c0:	tst	r3, #2
   125c4:	bxne	lr
   125c8:	ldr	r0, [r0, #16]
   125cc:	b	11018 <rb_rawbuf_append@plt>
   125d0:	rev16	r0, r0
   125d4:	bx	lr
   125d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125dc:	add	fp, sp, #28
   125e0:	sub	sp, sp, #12
   125e4:	mov	r9, r1
   125e8:	mov	r8, r1
   125ec:	ldr	r4, [r8, #36]!	; 0x24
   125f0:	cmp	r4, #0
   125f4:	beq	126ac <rb_base64_encode@plt+0x1664>
   125f8:	ldr	r0, [r9, #16]
   125fc:	ldr	r6, [r4]
   12600:	ldr	sl, [r4, #8]
   12604:	ldr	r3, [r6, #12]
   12608:	ldr	r1, [r6, #16]
   1260c:	ldr	r2, [r6, #36]	; 0x24
   12610:	movw	r7, #20728	; 0x50f8
   12614:	movt	r7, #2
   12618:	ldr	r7, [r7]
   1261c:	stm	sp, {r1, r7}
   12620:	add	r5, r6, #20
   12624:	mov	r1, r5
   12628:	bl	10e50 <rb_send_fd_buf@plt>
   1262c:	mov	r7, r0
   12630:	cmp	r0, #1
   12634:	blt	1267c <rb_base64_encode@plt+0x1634>
   12638:	mov	r0, r4
   1263c:	mov	r1, r8
   12640:	bl	118c0 <rb_base64_encode@plt+0x878>
   12644:	ldr	r0, [r6, #36]	; 0x24
   12648:	cmp	r0, #1
   1264c:	blt	1266c <rb_base64_encode@plt+0x1624>
   12650:	mov	r4, #0
   12654:	ldr	r0, [r5, r4, lsl #2]
   12658:	bl	10f40 <rb_close@plt>
   1265c:	add	r4, r4, #1
   12660:	ldr	r0, [r6, #36]	; 0x24
   12664:	cmp	r4, r0
   12668:	blt	12654 <rb_base64_encode@plt+0x160c>
   1266c:	ldr	r0, [r6, #12]
   12670:	bl	11684 <rb_base64_encode@plt+0x63c>
   12674:	mov	r0, r6
   12678:	bl	11684 <rb_base64_encode@plt+0x63c>
   1267c:	cmp	r7, #0
   12680:	beq	126dc <rb_base64_encode@plt+0x1694>
   12684:	cmn	r7, #1
   12688:	bgt	126a0 <rb_base64_encode@plt+0x1658>
   1268c:	bl	1103c <__errno_location@plt>
   12690:	ldr	r0, [r0]
   12694:	bl	10e20 <rb_ignore_errno@plt>
   12698:	cmp	r0, #0
   1269c:	beq	126dc <rb_base64_encode@plt+0x1694>
   126a0:	cmp	sl, #0
   126a4:	mov	r4, sl
   126a8:	bne	125f8 <rb_base64_encode@plt+0x15b0>
   126ac:	ldr	r0, [r9, #44]	; 0x2c
   126b0:	cmp	r0, #0
   126b4:	subeq	sp, fp, #28
   126b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126bc:	ldr	r0, [r9, #16]
   126c0:	movw	r2, #9688	; 0x25d8
   126c4:	movt	r2, #1
   126c8:	mov	r1, #2
   126cc:	mov	r3, r9
   126d0:	sub	sp, fp, #28
   126d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126d8:	b	10e38 <rb_setselect@plt>
   126dc:	mov	r0, #0
   126e0:	bl	11030 <exit@plt>
   126e4:	push	{r4, r5, r6, sl, fp, lr}
   126e8:	add	fp, sp, #16
   126ec:	sub	sp, sp, #8
   126f0:	sub	sp, sp, #16384	; 0x4000
   126f4:	mov	r5, r1
   126f8:	mov	r4, r0
   126fc:	add	r0, sp, #8
   12700:	mov	r1, #0
   12704:	mov	r2, #16384	; 0x4000
   12708:	bl	10e8c <memset@plt>
   1270c:	ldr	r0, [r4, #20]
   12710:	add	r1, sp, #6
   12714:	mov	r2, #2
   12718:	bl	10fa0 <rb_rawbuf_get@plt>
   1271c:	cmp	r0, #0
   12720:	beq	127a0 <rb_base64_encode@plt+0x1758>
   12724:	ldrh	r0, [sp, #6]
   12728:	bl	125d0 <rb_base64_encode@plt+0x1588>
   1272c:	strh	r0, [sp, #6]
   12730:	cmp	r5, #0
   12734:	beq	12750 <rb_base64_encode@plt+0x1708>
   12738:	ldr	r0, [r4, #20]
   1273c:	add	r1, sp, #2
   12740:	mov	r2, #4
   12744:	bl	10fa0 <rb_rawbuf_get@plt>
   12748:	cmp	r0, #0
   1274c:	beq	127b8 <rb_base64_encode@plt+0x1770>
   12750:	ldr	r0, [r4, #20]
   12754:	ldrh	r2, [sp, #6]
   12758:	add	r1, sp, #8
   1275c:	bl	10fa0 <rb_rawbuf_get@plt>
   12760:	cmp	r0, #0
   12764:	beq	127ac <rb_base64_encode@plt+0x1764>
   12768:	mov	r6, r0
   1276c:	cmp	r5, #0
   12770:	beq	12784 <rb_base64_encode@plt+0x173c>
   12774:	add	r0, sp, #8
   12778:	add	r2, sp, #2
   1277c:	mov	r1, r6
   12780:	bl	12884 <rb_base64_encode@plt+0x183c>
   12784:	add	r0, r4, #24
   12788:	add	r1, sp, #8
   1278c:	mov	r2, r6
   12790:	mov	r3, #1
   12794:	bl	10ea4 <rb_linebuf_parse@plt>
   12798:	sub	sp, fp, #16
   1279c:	pop	{r4, r5, r6, sl, fp, pc}
   127a0:	movw	r2, #17138	; 0x42f2
   127a4:	movt	r2, #1
   127a8:	b	127c0 <rb_base64_encode@plt+0x1778>
   127ac:	movw	r2, #17228	; 0x434c
   127b0:	movt	r2, #1
   127b4:	b	127c0 <rb_base64_encode@plt+0x1778>
   127b8:	movw	r2, #17184	; 0x4320
   127bc:	movt	r2, #1
   127c0:	mov	r0, r4
   127c4:	mov	r1, #1
   127c8:	bl	11df0 <rb_base64_encode@plt+0xda8>
   127cc:	sub	sp, fp, #16
   127d0:	pop	{r4, r5, r6, sl, fp, pc}
   127d4:	push	{r4, r5, r6, sl, fp, lr}
   127d8:	add	fp, sp, #16
   127dc:	sub	sp, sp, #136	; 0x88
   127e0:	mov	r5, r2
   127e4:	mov	r6, r1
   127e8:	mov	r4, r0
   127ec:	cmp	r2, #0
   127f0:	beq	1280c <rb_base64_encode@plt+0x17c4>
   127f4:	ldr	r0, [r4, #20]
   127f8:	add	r1, sp, #7
   127fc:	mov	r2, #4
   12800:	bl	10fa0 <rb_rawbuf_get@plt>
   12804:	cmp	r0, #0
   12808:	beq	12868 <rb_base64_encode@plt+0x1820>
   1280c:	ldrb	r2, [r6, #1]
   12810:	ldr	r0, [r4, #20]
   12814:	add	r1, sp, #11
   12818:	bl	10fa0 <rb_rawbuf_get@plt>
   1281c:	cmp	r0, #0
   12820:	beq	1285c <rb_base64_encode@plt+0x1814>
   12824:	mov	r6, r0
   12828:	cmp	r5, #0
   1282c:	beq	12840 <rb_base64_encode@plt+0x17f8>
   12830:	add	r0, sp, #11
   12834:	add	r2, sp, #7
   12838:	mov	r1, r6
   1283c:	bl	12884 <rb_base64_encode@plt+0x183c>
   12840:	add	r0, r4, #24
   12844:	add	r1, sp, #11
   12848:	mov	r2, r6
   1284c:	mov	r3, #1
   12850:	bl	10ea4 <rb_linebuf_parse@plt>
   12854:	sub	sp, fp, #16
   12858:	pop	{r4, r5, r6, sl, fp, pc}
   1285c:	movw	r2, #17228	; 0x434c
   12860:	movt	r2, #1
   12864:	b	12870 <rb_base64_encode@plt+0x1828>
   12868:	movw	r2, #17184	; 0x4320
   1286c:	movt	r2, #1
   12870:	mov	r0, r4
   12874:	mov	r1, #1
   12878:	bl	11df0 <rb_base64_encode@plt+0xda8>
   1287c:	sub	sp, fp, #16
   12880:	pop	{r4, r5, r6, sl, fp, pc}
   12884:	push	{fp, lr}
   12888:	mov	fp, sp
   1288c:	cmp	r1, #1
   12890:	poplt	{fp, pc}
   12894:	mov	lr, #0
   12898:	ldrb	ip, [r0, lr]
   1289c:	and	r3, lr, #3
   128a0:	ldrb	r3, [r2, r3]
   128a4:	eor	r3, r3, ip
   128a8:	strb	r3, [r0, lr]
   128ac:	add	lr, lr, #1
   128b0:	cmp	r1, lr
   128b4:	bne	12898 <rb_base64_encode@plt+0x1850>
   128b8:	pop	{fp, pc}
   128bc:	push	{r4, r5, fp, lr}
   128c0:	add	fp, sp, #8
   128c4:	mov	r4, r0
   128c8:	ldr	r0, [r0, #16]
   128cc:	bl	10f64 <rb_rawbuf_length@plt>
   128d0:	mov	r5, #0
   128d4:	cmp	r0, #4096	; 0x1000
   128d8:	blt	12918 <rb_base64_encode@plt+0x18d0>
   128dc:	ldrb	r0, [r4, #128]	; 0x80
   128e0:	orr	r0, r0, #1
   128e4:	strb	r0, [r4, #128]	; 0x80
   128e8:	ldr	r0, [r4, #88]	; 0x58
   128ec:	mov	r5, #1
   128f0:	mov	r1, #1
   128f4:	mov	r2, #0
   128f8:	mov	r3, #0
   128fc:	bl	10e38 <rb_setselect@plt>
   12900:	ldrb	r0, [r4, #128]	; 0x80
   12904:	tst	r0, #8
   12908:	beq	12918 <rb_base64_encode@plt+0x18d0>
   1290c:	ldr	r0, [r4, #84]	; 0x54
   12910:	mov	r1, r4
   12914:	bl	12364 <rb_base64_encode@plt+0x131c>
   12918:	mov	r0, r5
   1291c:	pop	{r4, r5, fp, pc}
   12920:	push	{fp, lr}
   12924:	mov	fp, sp
   12928:	mov	r1, #0
   1292c:	str	r1, [r0, #24]
   12930:	str	r1, [r0, #28]
   12934:	movw	ip, #43913	; 0xab89
   12938:	movt	ip, #61389	; 0xefcd
   1293c:	movw	r2, #8961	; 0x2301
   12940:	movt	r2, #26437	; 0x6745
   12944:	movw	r3, #56574	; 0xdcfe
   12948:	movt	r3, #39098	; 0x98ba
   1294c:	movw	r1, #21622	; 0x5476
   12950:	movt	r1, #4146	; 0x1032
   12954:	movw	lr, #57840	; 0xe1f0
   12958:	movt	lr, #50130	; 0xc3d2
   1295c:	stm	r0, {r2, ip}
   12960:	str	r3, [r0, #8]
   12964:	str	r1, [r0, #12]
   12968:	str	lr, [r0, #16]
   1296c:	pop	{fp, pc}
   12970:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12974:	add	fp, sp, #24
   12978:	mov	r4, r2
   1297c:	mov	r6, r1
   12980:	mov	r5, r0
   12984:	ldrd	r0, [r0, #24]
   12988:	adds	r2, r0, r2, lsl #3
   1298c:	adc	r3, r1, #0
   12990:	strd	r2, [r5, #24]
   12994:	ubfx	r9, r0, #3, #6
   12998:	add	r0, r9, r4
   1299c:	cmp	r0, #64	; 0x40
   129a0:	bcc	12a00 <rb_base64_encode@plt+0x19b8>
   129a4:	add	r8, r5, #32
   129a8:	add	r0, r8, r9
   129ac:	rsb	r7, r9, #64	; 0x40
   129b0:	mov	r1, r6
   129b4:	mov	r2, r7
   129b8:	bl	10f1c <memcpy@plt>
   129bc:	mov	r0, r5
   129c0:	mov	r1, r8
   129c4:	bl	12a1c <rb_base64_encode@plt+0x19d4>
   129c8:	rsb	r0, r9, #127	; 0x7f
   129cc:	mov	r9, #0
   129d0:	cmp	r0, r4
   129d4:	bcs	12a04 <rb_base64_encode@plt+0x19bc>
   129d8:	add	r1, r6, r7
   129dc:	mov	r0, r5
   129e0:	bl	12a1c <rb_base64_encode@plt+0x19d4>
   129e4:	add	r0, r7, #64	; 0x40
   129e8:	add	r1, r7, #127	; 0x7f
   129ec:	cmp	r1, r4
   129f0:	mov	r7, r0
   129f4:	bcc	129d8 <rb_base64_encode@plt+0x1990>
   129f8:	mov	r7, r0
   129fc:	b	12a04 <rb_base64_encode@plt+0x19bc>
   12a00:	mov	r7, #0
   12a04:	add	r1, r6, r7
   12a08:	sub	r2, r4, r7
   12a0c:	add	r0, r5, r9
   12a10:	add	r0, r0, #32
   12a14:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a18:	b	10f1c <memcpy@plt>
   12a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a20:	add	fp, sp, #28
   12a24:	sub	sp, sp, #164	; 0xa4
   12a28:	mov	r2, r0
   12a2c:	ldr	r0, [r1, #60]	; 0x3c
   12a30:	str	r0, [fp, #-40]	; 0xffffffd8
   12a34:	ldr	r0, [r1, #56]	; 0x38
   12a38:	str	r0, [fp, #-36]	; 0xffffffdc
   12a3c:	ldr	r0, [r1, #52]	; 0x34
   12a40:	str	r0, [fp, #-32]	; 0xffffffe0
   12a44:	ldr	r0, [r1, #48]	; 0x30
   12a48:	str	r0, [fp, #-64]	; 0xffffffc0
   12a4c:	ldr	r0, [r1, #44]	; 0x2c
   12a50:	str	r0, [fp, #-68]	; 0xffffffbc
   12a54:	ldr	r0, [r1, #40]	; 0x28
   12a58:	str	r0, [fp, #-56]	; 0xffffffc8
   12a5c:	ldr	r0, [r1, #36]	; 0x24
   12a60:	str	r0, [fp, #-48]	; 0xffffffd0
   12a64:	ldr	r0, [r1, #32]
   12a68:	str	r0, [fp, #-44]	; 0xffffffd4
   12a6c:	ldr	r0, [r1, #28]
   12a70:	str	r0, [fp, #-72]	; 0xffffffb8
   12a74:	ldr	r0, [r1, #24]
   12a78:	str	r0, [fp, #-76]	; 0xffffffb4
   12a7c:	ldr	r0, [r1, #20]
   12a80:	str	r0, [fp, #-88]	; 0xffffffa8
   12a84:	ldr	r0, [r1, #16]
   12a88:	str	r0, [fp, #-92]	; 0xffffffa4
   12a8c:	ldr	r0, [r1]
   12a90:	ldr	r3, [r1, #4]
   12a94:	str	r3, [fp, #-60]	; 0xffffffc4
   12a98:	ldr	r3, [r1, #8]
   12a9c:	str	r3, [fp, #-80]	; 0xffffffb0
   12aa0:	ldr	r1, [r1, #12]
   12aa4:	str	r1, [fp, #-84]	; 0xffffffac
   12aa8:	str	r2, [sp, #84]	; 0x54
   12aac:	ldm	r2, {r7, r8}
   12ab0:	ldr	r6, [r2, #8]
   12ab4:	ldr	r5, [r2, #12]
   12ab8:	ldr	r1, [r2, #16]
   12abc:	str	r1, [sp, #80]	; 0x50
   12ac0:	add	r4, r1, r7, ror #27
   12ac4:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12ac8:	str	r0, [fp, #-52]	; 0xffffffcc
   12acc:	add	r2, r4, r0
   12ad0:	eor	r1, r5, r6
   12ad4:	and	r1, r1, r8
   12ad8:	eor	r1, r1, r5
   12adc:	str	r5, [sp, #68]	; 0x44
   12ae0:	add	r0, r2, r1
   12ae4:	movw	sl, #31129	; 0x7999
   12ae8:	movt	sl, #23170	; 0x5a82
   12aec:	add	r9, r0, sl
   12af0:	eor	r0, r6, r8, ror #2
   12af4:	and	r0, r0, r7
   12af8:	eor	r4, r0, r6
   12afc:	str	r6, [sp, #72]	; 0x48
   12b00:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b04:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12b08:	str	r0, [fp, #-60]	; 0xffffffc4
   12b0c:	add	r1, r5, r0
   12b10:	add	r0, r1, r4
   12b14:	add	r0, r0, r9, ror #27
   12b18:	add	r5, r0, sl
   12b1c:	ror	r0, r8, #2
   12b20:	eor	r0, r0, r7, ror #2
   12b24:	and	r0, r9, r0
   12b28:	eor	r4, r0, r8, ror #2
   12b2c:	str	r8, [sp, #76]	; 0x4c
   12b30:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12b34:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12b38:	str	r0, [fp, #-80]	; 0xffffffb0
   12b3c:	add	r1, r6, r0
   12b40:	add	r0, r1, r4
   12b44:	add	r0, r0, r5, ror #27
   12b48:	add	r6, r0, sl
   12b4c:	ror	r0, r9, #2
   12b50:	eor	r0, r0, r7, ror #2
   12b54:	and	r0, r5, r0
   12b58:	eor	sl, r0, r7, ror #2
   12b5c:	mov	r4, r7
   12b60:	str	r7, [sp, #64]	; 0x40
   12b64:	ldr	r0, [fp, #-84]	; 0xffffffac
   12b68:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12b6c:	str	r0, [fp, #-84]	; 0xffffffac
   12b70:	add	r1, r0, r8, ror #2
   12b74:	add	r0, r1, sl
   12b78:	add	r0, r0, r6, ror #27
   12b7c:	movw	sl, #31129	; 0x7999
   12b80:	movt	sl, #23170	; 0x5a82
   12b84:	add	r7, r0, sl
   12b88:	ror	r0, r5, #2
   12b8c:	eor	r0, r0, r9, ror #2
   12b90:	and	r0, r6, r0
   12b94:	eor	r8, r0, r9, ror #2
   12b98:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12b9c:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12ba0:	str	r0, [sp, #96]	; 0x60
   12ba4:	add	r1, r0, r4, ror #2
   12ba8:	add	r0, r1, r8
   12bac:	add	r0, r0, r7, ror #27
   12bb0:	add	r4, r0, sl
   12bb4:	ror	r0, r6, #2
   12bb8:	eor	r0, r0, r5, ror #2
   12bbc:	and	r0, r7, r0
   12bc0:	eor	r8, r0, r5, ror #2
   12bc4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12bc8:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12bcc:	str	r0, [sp, #92]	; 0x5c
   12bd0:	add	r1, r0, r9, ror #2
   12bd4:	add	r0, r1, r8
   12bd8:	add	r0, r0, r4, ror #27
   12bdc:	add	r9, r0, sl
   12be0:	ror	r0, r7, #2
   12be4:	eor	r0, r0, r6, ror #2
   12be8:	and	r0, r4, r0
   12bec:	eor	r8, r0, r6, ror #2
   12bf0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bf4:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12bf8:	str	r0, [sp, #88]	; 0x58
   12bfc:	add	r1, r0, r5, ror #2
   12c00:	add	r0, r1, r8
   12c04:	add	r0, r0, r9, ror #27
   12c08:	add	r5, r0, sl
   12c0c:	ror	r0, r4, #2
   12c10:	eor	r0, r0, r7, ror #2
   12c14:	and	r0, r9, r0
   12c18:	eor	r8, r0, r7, ror #2
   12c1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c20:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12c24:	str	r0, [sp, #60]	; 0x3c
   12c28:	add	r1, r0, r6, ror #2
   12c2c:	add	r0, r1, r8
   12c30:	add	r0, r0, r5, ror #27
   12c34:	add	r6, r0, sl
   12c38:	ror	r0, r9, #2
   12c3c:	eor	r0, r0, r4, ror #2
   12c40:	and	r0, r5, r0
   12c44:	eor	r8, r0, r4, ror #2
   12c48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12c4c:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12c50:	str	r0, [fp, #-44]	; 0xffffffd4
   12c54:	add	r1, r0, r7, ror #2
   12c58:	add	r0, r1, r8
   12c5c:	add	r0, r0, r6, ror #27
   12c60:	add	r7, r0, sl
   12c64:	ror	r0, r5, #2
   12c68:	eor	r0, r0, r9, ror #2
   12c6c:	and	r0, r6, r0
   12c70:	eor	r8, r0, r9, ror #2
   12c74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c78:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12c7c:	str	r0, [fp, #-48]	; 0xffffffd0
   12c80:	add	r1, r0, r4, ror #2
   12c84:	add	r0, r1, r8
   12c88:	add	r0, r0, r7, ror #27
   12c8c:	add	r4, r0, sl
   12c90:	ror	r0, r6, #2
   12c94:	eor	r0, r0, r5, ror #2
   12c98:	and	r0, r7, r0
   12c9c:	eor	r8, r0, r5, ror #2
   12ca0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ca4:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12ca8:	str	r0, [fp, #-56]	; 0xffffffc8
   12cac:	add	r1, r0, r9, ror #2
   12cb0:	add	r0, r1, r8
   12cb4:	add	r0, r0, r4, ror #27
   12cb8:	add	r9, r0, sl
   12cbc:	ror	r0, r7, #2
   12cc0:	eor	r0, r0, r6, ror #2
   12cc4:	and	r0, r4, r0
   12cc8:	eor	r8, r0, r6, ror #2
   12ccc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12cd0:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12cd4:	str	r0, [fp, #-72]	; 0xffffffb8
   12cd8:	add	r1, r0, r5, ror #2
   12cdc:	add	r0, r1, r8
   12ce0:	add	r0, r0, r9, ror #27
   12ce4:	add	r5, r0, sl
   12ce8:	ror	r0, r4, #2
   12cec:	eor	r0, r0, r7, ror #2
   12cf0:	and	r0, r9, r0
   12cf4:	eor	r8, r0, r7, ror #2
   12cf8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cfc:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12d00:	str	r0, [fp, #-76]	; 0xffffffb4
   12d04:	add	r1, r0, r6, ror #2
   12d08:	add	r0, r1, r8
   12d0c:	add	r0, r0, r5, ror #27
   12d10:	add	r8, r0, sl
   12d14:	ror	r0, r9, #2
   12d18:	eor	r0, r0, r4, ror #2
   12d1c:	and	r0, r5, r0
   12d20:	eor	r6, r0, r4, ror #2
   12d24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d28:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12d2c:	str	r0, [fp, #-32]	; 0xffffffe0
   12d30:	add	r1, r0, r7, ror #2
   12d34:	add	r0, r1, r6
   12d38:	add	r0, r0, r8, ror #27
   12d3c:	mov	r7, sl
   12d40:	add	sl, r0, sl
   12d44:	ror	r0, r5, #2
   12d48:	eor	r0, r0, r9, ror #2
   12d4c:	and	r0, r8, r0
   12d50:	eor	r6, r0, r9, ror #2
   12d54:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d58:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12d5c:	str	r0, [fp, #-36]	; 0xffffffdc
   12d60:	add	r1, r0, r4, ror #2
   12d64:	add	r0, r1, r6
   12d68:	add	r0, r0, sl, ror #27
   12d6c:	add	r4, r0, r7
   12d70:	mov	r6, r7
   12d74:	ror	r0, r8, #2
   12d78:	eor	r0, r0, r5, ror #2
   12d7c:	and	r0, sl, r0
   12d80:	eor	r7, r0, r5, ror #2
   12d84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12d88:	bl	14004 <rb_base64_encode@plt+0x2fbc>
   12d8c:	add	r1, r0, r9, ror #2
   12d90:	mov	r9, r0
   12d94:	str	r0, [fp, #-88]	; 0xffffffa8
   12d98:	add	r0, r1, r7
   12d9c:	add	r0, r0, r4, ror #27
   12da0:	mov	r7, r6
   12da4:	add	r1, r0, r6
   12da8:	ror	r0, sl, #2
   12dac:	eor	r0, r0, r8, ror #2
   12db0:	and	r0, r4, r0
   12db4:	eor	r0, r0, r8, ror #2
   12db8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12dbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12dc0:	eor	r2, ip, r2
   12dc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12dc8:	eor	r2, r2, r3
   12dcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12dd0:	eor	r2, r2, r3
   12dd4:	str	r2, [fp, #-68]	; 0xffffffbc
   12dd8:	ror	r2, r2, #31
   12ddc:	add	r2, r2, r5, ror #2
   12de0:	add	r0, r2, r0
   12de4:	add	r0, r0, r1, ror #27
   12de8:	add	lr, r0, r6
   12dec:	ror	r0, r4, #2
   12df0:	eor	r0, r0, sl, ror #2
   12df4:	and	r0, r1, r0
   12df8:	eor	r0, r0, sl, ror #2
   12dfc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   12e00:	ldr	r6, [fp, #-84]	; 0xffffffac
   12e04:	eor	r2, r6, r2
   12e08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e0c:	eor	r2, r2, r3
   12e10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e14:	eor	r2, r2, r3
   12e18:	str	r2, [fp, #-40]	; 0xffffffd8
   12e1c:	ror	r2, r2, #31
   12e20:	add	r2, r2, r8, ror #2
   12e24:	add	r0, r2, r0
   12e28:	add	r0, r0, lr, ror #27
   12e2c:	add	r3, r0, r7
   12e30:	ror	r0, r1, #2
   12e34:	eor	r0, r0, r4, ror #2
   12e38:	and	r0, lr, r0
   12e3c:	eor	r0, r0, r4, ror #2
   12e40:	ldr	r8, [sp, #96]	; 0x60
   12e44:	eor	r2, r8, ip
   12e48:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12e4c:	eor	r2, r2, r7
   12e50:	eor	r7, r2, r9
   12e54:	ror	r5, r7, #31
   12e58:	str	r5, [sp, #36]	; 0x24
   12e5c:	str	r7, [fp, #-92]	; 0xffffffa4
   12e60:	add	r2, r5, sl, ror #2
   12e64:	add	r0, r2, r0
   12e68:	add	r0, r0, r3, ror #27
   12e6c:	movw	r2, #31129	; 0x7999
   12e70:	movt	r2, #23170	; 0x5a82
   12e74:	add	sl, r0, r2
   12e78:	ror	r0, lr, #2
   12e7c:	eor	r0, r0, r1, ror #2
   12e80:	and	r0, r3, r0
   12e84:	eor	r0, r0, r1, ror #2
   12e88:	ldr	r5, [sp, #92]	; 0x5c
   12e8c:	eor	r2, r5, r6
   12e90:	ldr	r6, [fp, #-72]	; 0xffffffb8
   12e94:	eor	r2, r2, r6
   12e98:	ldr	r6, [fp, #-68]	; 0xffffffbc
   12e9c:	eor	r2, r2, r6, ror #31
   12ea0:	str	r2, [fp, #-60]	; 0xffffffc4
   12ea4:	ror	r6, r2, #31
   12ea8:	str	r6, [sp, #28]
   12eac:	add	r2, r6, r4, ror #2
   12eb0:	add	r0, r2, r0
   12eb4:	add	r0, r0, sl, ror #27
   12eb8:	movw	r2, #31129	; 0x7999
   12ebc:	movt	r2, #23170	; 0x5a82
   12ec0:	add	ip, r0, r2
   12ec4:	ror	r0, r3, #2
   12ec8:	eor	r0, r0, lr, ror #2
   12ecc:	eor	r0, r0, sl
   12ed0:	ldr	r4, [sp, #88]	; 0x58
   12ed4:	eor	r2, r4, r8
   12ed8:	ldr	r6, [fp, #-76]	; 0xffffffb4
   12edc:	eor	r2, r2, r6
   12ee0:	ldr	r6, [fp, #-40]	; 0xffffffd8
   12ee4:	eor	r9, r2, r6, ror #31
   12ee8:	ror	r6, r9, #31
   12eec:	str	r6, [sp, #24]
   12ef0:	str	r9, [sp, #96]	; 0x60
   12ef4:	add	r1, r6, r1, ror #2
   12ef8:	add	r0, r1, r0
   12efc:	add	r0, r0, ip, ror #27
   12f00:	movw	r2, #60321	; 0xeba1
   12f04:	movt	r2, #28377	; 0x6ed9
   12f08:	add	r1, r0, r2
   12f0c:	mov	r8, r2
   12f10:	ror	r0, sl, #2
   12f14:	eor	r0, r0, r3, ror #2
   12f18:	eor	r0, r0, ip
   12f1c:	ldr	r6, [sp, #60]	; 0x3c
   12f20:	eor	r2, r6, r5
   12f24:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12f28:	eor	r2, r2, r5
   12f2c:	eor	r2, r2, r7, ror #31
   12f30:	str	r2, [fp, #-64]	; 0xffffffc0
   12f34:	ror	r5, r2, #31
   12f38:	str	r5, [sp, #20]
   12f3c:	add	r2, r5, lr, ror #2
   12f40:	add	r0, r2, r0
   12f44:	add	r0, r0, r1, ror #27
   12f48:	add	r0, r0, r8
   12f4c:	mov	lr, r8
   12f50:	ror	r2, ip, #2
   12f54:	eor	r2, r2, sl, ror #2
   12f58:	eor	r2, r2, r1
   12f5c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12f60:	eor	r4, r7, r4
   12f64:	ldr	r5, [fp, #-36]	; 0xffffffdc
   12f68:	eor	r4, r4, r5
   12f6c:	ldr	r5, [fp, #-60]	; 0xffffffc4
   12f70:	eor	r8, r4, r5, ror #31
   12f74:	ror	r4, r8, #31
   12f78:	str	r4, [sp, #12]
   12f7c:	str	r8, [sp, #92]	; 0x5c
   12f80:	add	r3, r4, r3, ror #2
   12f84:	add	r2, r3, r2
   12f88:	add	r2, r2, r0, ror #27
   12f8c:	add	r3, r2, lr
   12f90:	ror	r2, r1, #2
   12f94:	eor	r2, r2, ip, ror #2
   12f98:	eor	r2, r2, r0
   12f9c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12fa0:	eor	r4, lr, r6
   12fa4:	ldr	r5, [fp, #-88]	; 0xffffffa8
   12fa8:	eor	r4, r4, r5
   12fac:	eor	r4, r4, r9, ror #31
   12fb0:	str	r4, [fp, #-52]	; 0xffffffcc
   12fb4:	ror	r5, r4, #31
   12fb8:	str	r5, [sp, #60]	; 0x3c
   12fbc:	add	r4, r5, sl, ror #2
   12fc0:	add	r2, r4, r2
   12fc4:	add	r2, r2, r3, ror #27
   12fc8:	movw	r9, #60321	; 0xeba1
   12fcc:	movt	r9, #28377	; 0x6ed9
   12fd0:	add	r2, r2, r9
   12fd4:	ror	r4, r0, #2
   12fd8:	eor	r4, r4, r1, ror #2
   12fdc:	eor	r4, r4, r3
   12fe0:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12fe4:	eor	r7, r6, r7
   12fe8:	ldr	r5, [fp, #-68]	; 0xffffffbc
   12fec:	eor	r7, r7, r5, ror #31
   12ff0:	ldr	r5, [fp, #-64]	; 0xffffffc0
   12ff4:	eor	r7, r7, r5, ror #31
   12ff8:	ror	r5, r7, #31
   12ffc:	str	r5, [sp, #8]
   13000:	mov	sl, r7
   13004:	str	r7, [sp, #88]	; 0x58
   13008:	add	r7, r5, ip, ror #2
   1300c:	add	r7, r7, r4
   13010:	add	r7, r7, r2, ror #27
   13014:	add	ip, r7, r9
   13018:	ror	r4, r3, #2
   1301c:	eor	r4, r4, r0, ror #2
   13020:	eor	r4, r4, r2
   13024:	ldr	r9, [fp, #-72]	; 0xffffffb8
   13028:	eor	r7, r9, lr
   1302c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13030:	eor	r7, r7, r5, ror #31
   13034:	eor	r7, r7, r8, ror #31
   13038:	str	r7, [fp, #-48]	; 0xffffffd0
   1303c:	ror	lr, r7, #31
   13040:	str	lr, [sp, #56]	; 0x38
   13044:	add	r1, lr, r1, ror #2
   13048:	add	r1, r1, r4
   1304c:	add	r1, r1, ip, ror #27
   13050:	movw	r8, #60321	; 0xeba1
   13054:	movt	r8, #28377	; 0x6ed9
   13058:	add	r1, r1, r8
   1305c:	ror	r4, r2, #2
   13060:	eor	r4, r4, r3, ror #2
   13064:	eor	r4, r4, ip
   13068:	ldr	lr, [fp, #-76]	; 0xffffffb4
   1306c:	eor	r7, lr, r6
   13070:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13074:	eor	r7, r7, r5, ror #31
   13078:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1307c:	eor	r5, r7, r5, ror #31
   13080:	str	r5, [fp, #-56]	; 0xffffffc8
   13084:	ror	r5, r5, #31
   13088:	str	r5, [sp, #4]
   1308c:	add	r0, r5, r0, ror #2
   13090:	add	r0, r0, r4
   13094:	add	r0, r0, r1, ror #27
   13098:	add	r0, r0, r8
   1309c:	ror	r4, ip, #2
   130a0:	eor	r4, r4, r2, ror #2
   130a4:	eor	r4, r4, r1
   130a8:	ldr	r8, [fp, #-32]	; 0xffffffe0
   130ac:	eor	r7, r8, r9
   130b0:	ldr	r5, [fp, #-60]	; 0xffffffc4
   130b4:	eor	r7, r7, r5, ror #31
   130b8:	eor	sl, r7, sl, ror #31
   130bc:	ror	r6, sl, #31
   130c0:	str	r6, [sp, #44]	; 0x2c
   130c4:	str	sl, [fp, #-84]	; 0xffffffac
   130c8:	add	r3, r6, r3, ror #2
   130cc:	add	r3, r3, r4
   130d0:	add	r3, r3, r0, ror #27
   130d4:	movw	r4, #60321	; 0xeba1
   130d8:	movt	r4, #28377	; 0x6ed9
   130dc:	add	r3, r3, r4
   130e0:	ror	r4, r1, #2
   130e4:	eor	r4, r4, ip, ror #2
   130e8:	eor	r4, r4, r0
   130ec:	ldr	r5, [fp, #-36]	; 0xffffffdc
   130f0:	eor	r7, r5, lr
   130f4:	ldr	r6, [sp, #96]	; 0x60
   130f8:	eor	r7, r7, r6, ror #31
   130fc:	ldr	r6, [fp, #-48]	; 0xffffffd0
   13100:	eor	r9, r7, r6, ror #31
   13104:	ror	r6, r9, #31
   13108:	str	r6, [sp, #52]	; 0x34
   1310c:	str	r9, [fp, #-80]	; 0xffffffb0
   13110:	add	r2, r6, r2, ror #2
   13114:	add	r2, r2, r4
   13118:	add	r2, r2, r3, ror #27
   1311c:	movw	r7, #60321	; 0xeba1
   13120:	movt	r7, #28377	; 0x6ed9
   13124:	add	r2, r2, r7
   13128:	ror	r4, r0, #2
   1312c:	eor	r4, r4, r1, ror #2
   13130:	eor	r4, r4, r3
   13134:	ldr	lr, [fp, #-88]	; 0xffffffa8
   13138:	eor	r7, lr, r8
   1313c:	ldr	r6, [fp, #-64]	; 0xffffffc0
   13140:	eor	r7, r7, r6, ror #31
   13144:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13148:	eor	r6, r7, r6, ror #31
   1314c:	str	r6, [fp, #-44]	; 0xffffffd4
   13150:	ror	r6, r6, #31
   13154:	str	r6, [sp, #48]	; 0x30
   13158:	add	r7, r6, ip, ror #2
   1315c:	add	r7, r7, r4
   13160:	add	r7, r7, r2, ror #27
   13164:	movw	r6, #60321	; 0xeba1
   13168:	movt	r6, #28377	; 0x6ed9
   1316c:	add	ip, r7, r6
   13170:	ror	r4, r3, #2
   13174:	eor	r4, r4, r0, ror #2
   13178:	eor	r4, r4, r2
   1317c:	ldr	r8, [fp, #-68]	; 0xffffffbc
   13180:	eor	r7, r5, r8, ror #31
   13184:	ldr	r5, [sp, #92]	; 0x5c
   13188:	eor	r7, r7, r5, ror #31
   1318c:	eor	r5, r7, sl, ror #31
   13190:	str	r5, [fp, #-32]	; 0xffffffe0
   13194:	ror	r5, r5, #31
   13198:	str	r5, [fp, #-36]	; 0xffffffdc
   1319c:	add	r1, r5, r1, ror #2
   131a0:	add	r1, r1, r4
   131a4:	add	r1, r1, ip, ror #27
   131a8:	add	r1, r1, r6
   131ac:	ror	r4, r2, #2
   131b0:	eor	r4, r4, r3, ror #2
   131b4:	eor	r4, r4, ip
   131b8:	ldr	sl, [fp, #-40]	; 0xffffffd8
   131bc:	eor	r6, lr, sl, ror #31
   131c0:	ldr	r7, [fp, #-52]	; 0xffffffcc
   131c4:	eor	r6, r6, r7, ror #31
   131c8:	eor	r7, r6, r9, ror #31
   131cc:	ror	r6, r7, #31
   131d0:	str	r6, [sp, #40]	; 0x28
   131d4:	mov	r5, r7
   131d8:	str	r7, [fp, #-76]	; 0xffffffb4
   131dc:	add	r0, r6, r0, ror #2
   131e0:	add	r0, r0, r4
   131e4:	add	r0, r0, r1, ror #27
   131e8:	movw	lr, #60321	; 0xeba1
   131ec:	movt	lr, #28377	; 0x6ed9
   131f0:	add	r0, r0, lr
   131f4:	ror	r4, ip, #2
   131f8:	eor	r4, r4, r2, ror #2
   131fc:	eor	r4, r4, r1
   13200:	ldr	r6, [sp, #36]	; 0x24
   13204:	eor	r6, r6, r8, ror #31
   13208:	ldr	r7, [sp, #88]	; 0x58
   1320c:	eor	r6, r6, r7, ror #31
   13210:	ldr	r7, [fp, #-44]	; 0xffffffd4
   13214:	eor	r9, r6, r7, ror #31
   13218:	ror	r6, r9, #31
   1321c:	str	r6, [sp, #32]
   13220:	add	r3, r6, r3, ror #2
   13224:	add	r3, r3, r4
   13228:	add	r3, r3, r0, ror #27
   1322c:	add	r3, r3, lr
   13230:	mov	r8, lr
   13234:	ror	r4, r1, #2
   13238:	eor	r4, r4, ip, ror #2
   1323c:	eor	r4, r4, r0
   13240:	ldr	r6, [sp, #28]
   13244:	eor	r6, r6, sl, ror #31
   13248:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1324c:	eor	r6, r6, r7, ror #31
   13250:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13254:	eor	r7, r6, r7, ror #31
   13258:	ror	r6, r7, #31
   1325c:	str	r6, [sp, #28]
   13260:	mov	lr, r7
   13264:	str	r7, [fp, #-88]	; 0xffffffa8
   13268:	add	r2, r6, r2, ror #2
   1326c:	add	r2, r2, r4
   13270:	add	r2, r2, r3, ror #27
   13274:	add	r7, r2, r8
   13278:	mov	sl, r8
   1327c:	ror	r2, r0, #2
   13280:	eor	r2, r2, r1, ror #2
   13284:	eor	r2, r2, r3
   13288:	ldr	r4, [sp, #24]
   1328c:	ldr	r6, [fp, #-92]	; 0xffffffa4
   13290:	eor	r4, r4, r6, ror #31
   13294:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13298:	eor	r4, r4, r6, ror #31
   1329c:	eor	r6, r4, r5, ror #31
   132a0:	ror	r4, r6, #31
   132a4:	str	r4, [fp, #-40]	; 0xffffffd8
   132a8:	mov	r8, r6
   132ac:	str	r6, [fp, #-68]	; 0xffffffbc
   132b0:	add	r4, r4, ip, ror #2
   132b4:	add	r2, r4, r2
   132b8:	add	r2, r2, r7, ror #27
   132bc:	add	r2, r2, sl
   132c0:	ror	r4, r3, #2
   132c4:	eor	r4, r4, r0, ror #2
   132c8:	eor	r4, r4, r7
   132cc:	ldr	r6, [sp, #20]
   132d0:	ldr	r5, [fp, #-60]	; 0xffffffc4
   132d4:	eor	r6, r6, r5, ror #31
   132d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   132dc:	eor	r6, r6, r5, ror #31
   132e0:	eor	r6, r6, r9, ror #31
   132e4:	str	r9, [sp]
   132e8:	ror	r5, r6, #31
   132ec:	str	r5, [sp, #16]
   132f0:	mov	ip, r6
   132f4:	str	r6, [fp, #-72]	; 0xffffffb8
   132f8:	add	r1, r5, r1, ror #2
   132fc:	add	r1, r1, r4
   13300:	add	r1, r1, r2, ror #27
   13304:	add	r1, r1, sl
   13308:	ror	r6, r7, #2
   1330c:	eor	r6, r6, r3, ror #2
   13310:	eor	r6, r6, r2
   13314:	ldr	r4, [sp, #12]
   13318:	ldr	r5, [sp, #96]	; 0x60
   1331c:	eor	r4, r4, r5, ror #31
   13320:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13324:	eor	r4, r4, r5, ror #31
   13328:	eor	r4, r4, lr, ror #31
   1332c:	ror	r5, r4, #31
   13330:	str	r5, [sp, #24]
   13334:	mov	lr, r4
   13338:	str	r4, [sp, #96]	; 0x60
   1333c:	add	r0, r5, r0, ror #2
   13340:	add	r0, r0, r6
   13344:	add	r0, r0, r1, ror #27
   13348:	add	r4, r0, sl
   1334c:	ror	r0, r2, #2
   13350:	eor	r0, r0, r7, ror #2
   13354:	eor	r0, r0, r1
   13358:	ldr	r5, [sp, #60]	; 0x3c
   1335c:	ldr	r6, [fp, #-64]	; 0xffffffc0
   13360:	eor	r6, r5, r6, ror #31
   13364:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13368:	eor	r6, r6, r5, ror #31
   1336c:	eor	r6, r6, r8, ror #31
   13370:	ror	r5, r6, #31
   13374:	str	r5, [sp, #36]	; 0x24
   13378:	mov	r8, r6
   1337c:	str	r6, [fp, #-60]	; 0xffffffc4
   13380:	add	r3, r5, r3, ror #2
   13384:	add	r0, r3, r0
   13388:	add	r0, r0, r4, ror #27
   1338c:	add	r0, r0, sl
   13390:	ror	r3, r1, #2
   13394:	eor	r3, r3, r2, ror #2
   13398:	eor	r3, r3, r4
   1339c:	ldr	r5, [sp, #8]
   133a0:	ldr	r6, [sp, #92]	; 0x5c
   133a4:	eor	r6, r5, r6, ror #31
   133a8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   133ac:	eor	r6, r6, r5, ror #31
   133b0:	eor	r6, r6, ip, ror #31
   133b4:	str	r6, [fp, #-92]	; 0xffffffa4
   133b8:	ror	r5, r6, #31
   133bc:	str	r5, [sp, #60]	; 0x3c
   133c0:	add	r7, r5, r7, ror #2
   133c4:	add	r3, r7, r3
   133c8:	add	r3, r3, r0, ror #27
   133cc:	add	ip, r3, sl
   133d0:	orr	r3, ip, r0, ror #2
   133d4:	and	r3, r3, r4, ror #2
   133d8:	and	r7, ip, r0, ror #2
   133dc:	orr	r3, r3, r7
   133e0:	ldr	r5, [sp, #4]
   133e4:	ldr	r6, [sp, #88]	; 0x58
   133e8:	eor	r7, r5, r6, ror #31
   133ec:	eor	r7, r7, r9, ror #31
   133f0:	eor	r7, r7, r8, ror #31
   133f4:	ror	r5, r7, #31
   133f8:	str	r5, [sp, #88]	; 0x58
   133fc:	mov	r6, r7
   13400:	str	r7, [fp, #-64]	; 0xffffffc0
   13404:	add	r7, r5, r1, ror #2
   13408:	add	r5, r7, r3
   1340c:	ror	r3, r4, #2
   13410:	eor	r1, r3, r1, ror #2
   13414:	eor	r1, r1, r0
   13418:	ldr	r3, [sp, #56]	; 0x38
   1341c:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13420:	eor	r3, r3, r7, ror #31
   13424:	ldr	r7, [fp, #-76]	; 0xffffffb4
   13428:	eor	r3, r3, r7, ror #31
   1342c:	eor	r3, r3, lr, ror #31
   13430:	ror	r7, r3, #31
   13434:	str	r7, [sp, #12]
   13438:	mov	lr, r3
   1343c:	str	r3, [fp, #-52]	; 0xffffffcc
   13440:	add	r2, r7, r2, ror #2
   13444:	add	r1, r2, r1
   13448:	add	r1, r1, ip, ror #27
   1344c:	add	r3, r1, sl
   13450:	add	r1, r5, r3, ror #27
   13454:	movw	sl, #48348	; 0xbcdc
   13458:	movt	sl, #36635	; 0x8f1b
   1345c:	add	r1, r1, sl
   13460:	orr	r2, r3, ip, ror #2
   13464:	and	r2, r2, r0, ror #2
   13468:	and	r5, r3, ip, ror #2
   1346c:	orr	r2, r2, r5
   13470:	ldr	r5, [sp, #44]	; 0x2c
   13474:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13478:	eor	r5, r5, r7, ror #31
   1347c:	ldr	r7, [fp, #-88]	; 0xffffffa8
   13480:	eor	r5, r5, r7, ror #31
   13484:	ldr	r9, [fp, #-92]	; 0xffffffa4
   13488:	eor	r5, r5, r9, ror #31
   1348c:	ror	r7, r5, #31
   13490:	str	r7, [sp, #56]	; 0x38
   13494:	mov	r8, r5
   13498:	str	r5, [fp, #-48]	; 0xffffffd0
   1349c:	add	r4, r7, r4, ror #2
   134a0:	add	r2, r4, r2
   134a4:	add	r2, r2, r1, ror #27
   134a8:	add	r4, r2, sl
   134ac:	orr	r2, r1, r3, ror #2
   134b0:	and	r2, r2, ip, ror #2
   134b4:	and	r5, r1, r3, ror #2
   134b8:	orr	r2, r2, r5
   134bc:	ldr	r5, [sp, #52]	; 0x34
   134c0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   134c4:	eor	r5, r5, r7, ror #31
   134c8:	ldr	r7, [fp, #-68]	; 0xffffffbc
   134cc:	eor	r5, r5, r7, ror #31
   134d0:	eor	lr, r5, lr, ror #31
   134d4:	ror	r7, lr, #31
   134d8:	str	r7, [sp, #52]	; 0x34
   134dc:	add	r0, r7, r0, ror #2
   134e0:	add	r0, r0, r2
   134e4:	add	r0, r0, r4, ror #27
   134e8:	add	r0, r0, sl
   134ec:	orr	r2, r4, r1, ror #2
   134f0:	and	r2, r2, r3, ror #2
   134f4:	and	r5, r4, r1, ror #2
   134f8:	orr	r2, r2, r5
   134fc:	ldr	r7, [sp, #48]	; 0x30
   13500:	ldr	r5, [fp, #-84]	; 0xffffffac
   13504:	eor	r5, r7, r5, ror #31
   13508:	ldr	r7, [fp, #-72]	; 0xffffffb8
   1350c:	eor	r5, r5, r7, ror #31
   13510:	eor	r5, r5, r6, ror #31
   13514:	str	r5, [fp, #-84]	; 0xffffffac
   13518:	ror	r7, r5, #31
   1351c:	str	r7, [sp, #48]	; 0x30
   13520:	add	r7, r7, ip, ror #2
   13524:	add	r2, r7, r2
   13528:	add	r2, r2, r0, ror #27
   1352c:	add	r2, r2, sl
   13530:	orr	r7, r0, r4, ror #2
   13534:	and	r7, r7, r1, ror #2
   13538:	and	r6, r0, r4, ror #2
   1353c:	orr	r7, r7, r6
   13540:	ldr	r6, [fp, #-36]	; 0xffffffdc
   13544:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13548:	eor	r6, r6, r5, ror #31
   1354c:	ldr	r5, [sp, #96]	; 0x60
   13550:	eor	r6, r6, r5, ror #31
   13554:	eor	r6, r6, r8, ror #31
   13558:	str	r6, [fp, #-36]	; 0xffffffdc
   1355c:	ror	r6, r6, #31
   13560:	str	r6, [sp, #44]	; 0x2c
   13564:	add	r3, r6, r3, ror #2
   13568:	add	r3, r3, r7
   1356c:	add	r3, r3, r2, ror #27
   13570:	mov	ip, sl
   13574:	add	r3, r3, sl
   13578:	orr	r7, r2, r0, ror #2
   1357c:	and	r7, r7, r4, ror #2
   13580:	and	r6, r2, r0, ror #2
   13584:	orr	r7, r7, r6
   13588:	ldr	r6, [sp, #40]	; 0x28
   1358c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13590:	eor	r6, r6, r5, ror #31
   13594:	ldr	r5, [fp, #-60]	; 0xffffffc4
   13598:	eor	r6, r6, r5, ror #31
   1359c:	mov	sl, lr
   135a0:	str	lr, [sp, #8]
   135a4:	eor	r5, r6, lr, ror #31
   135a8:	ror	r6, r5, #31
   135ac:	str	r6, [sp, #40]	; 0x28
   135b0:	str	r5, [fp, #-56]	; 0xffffffc8
   135b4:	add	r1, r6, r1, ror #2
   135b8:	add	r1, r1, r7
   135bc:	add	r1, r1, r3, ror #27
   135c0:	add	r1, r1, ip
   135c4:	orr	r7, r3, r2, ror #2
   135c8:	and	r7, r7, r0, ror #2
   135cc:	and	r6, r3, r2, ror #2
   135d0:	orr	lr, r7, r6
   135d4:	ldr	r7, [sp, #32]
   135d8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   135dc:	eor	r6, r7, r6, ror #31
   135e0:	eor	r6, r6, r9, ror #31
   135e4:	ldr	r8, [fp, #-84]	; 0xffffffac
   135e8:	eor	r7, r6, r8, ror #31
   135ec:	str	r7, [fp, #-32]	; 0xffffffe0
   135f0:	ror	r6, r7, #31
   135f4:	str	r6, [sp, #32]
   135f8:	add	r6, r6, r4, ror #2
   135fc:	add	r7, r6, lr
   13600:	add	r7, r7, r1, ror #27
   13604:	add	r4, r7, ip
   13608:	orr	r7, r1, r3, ror #2
   1360c:	and	r7, r7, r2, ror #2
   13610:	and	r6, r1, r3, ror #2
   13614:	orr	lr, r7, r6
   13618:	ldr	r6, [sp, #28]
   1361c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   13620:	eor	r6, r6, r7, ror #31
   13624:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13628:	eor	r6, r6, r7, ror #31
   1362c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13630:	eor	ip, r6, r7, ror #31
   13634:	ror	r6, ip, #31
   13638:	str	r6, [sp, #28]
   1363c:	mov	r9, ip
   13640:	add	r0, r6, r0, ror #2
   13644:	add	r0, r0, lr
   13648:	add	r0, r0, r4, ror #27
   1364c:	movw	lr, #48348	; 0xbcdc
   13650:	movt	lr, #36635	; 0x8f1b
   13654:	add	r0, r0, lr
   13658:	orr	r7, r4, r1, ror #2
   1365c:	and	r7, r7, r3, ror #2
   13660:	and	r6, r4, r1, ror #2
   13664:	orr	ip, r7, r6
   13668:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1366c:	ldr	r7, [sp]
   13670:	eor	r6, r6, r7, ror #31
   13674:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13678:	eor	r6, r6, r7, ror #31
   1367c:	eor	r5, r6, r5, ror #31
   13680:	str	r5, [fp, #-40]	; 0xffffffd8
   13684:	ror	r5, r5, #31
   13688:	str	r5, [sp, #20]
   1368c:	add	r2, r5, r2, ror #2
   13690:	add	r2, r2, ip
   13694:	add	r2, r2, r0, ror #27
   13698:	add	r7, r2, lr
   1369c:	orr	r2, r0, r4, ror #2
   136a0:	and	r2, r2, r1, ror #2
   136a4:	and	r6, r0, r4, ror #2
   136a8:	orr	r2, r2, r6
   136ac:	ldr	r6, [sp, #16]
   136b0:	ldr	r5, [fp, #-88]	; 0xffffffa8
   136b4:	eor	r6, r6, r5, ror #31
   136b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   136bc:	eor	r6, r6, r5, ror #31
   136c0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   136c4:	eor	r6, r6, r5, ror #31
   136c8:	ror	r5, r6, #31
   136cc:	str	r5, [sp, #16]
   136d0:	str	r6, [fp, #-76]	; 0xffffffb4
   136d4:	add	r3, r5, r3, ror #2
   136d8:	add	r2, r3, r2
   136dc:	add	r2, r2, r7, ror #27
   136e0:	add	r3, r2, lr
   136e4:	orr	r2, r7, r0, ror #2
   136e8:	and	r2, r2, r4, ror #2
   136ec:	and	r5, r7, r0, ror #2
   136f0:	orr	ip, r2, r5
   136f4:	ldr	r5, [sp, #24]
   136f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   136fc:	eor	r5, r5, r2, ror #31
   13700:	eor	r5, r5, sl, ror #31
   13704:	str	r9, [sp, #92]	; 0x5c
   13708:	eor	r9, r5, r9, ror #31
   1370c:	ror	r5, r9, #31
   13710:	str	r5, [sp, #24]
   13714:	str	r9, [fp, #-68]	; 0xffffffbc
   13718:	add	r1, r5, r1, ror #2
   1371c:	add	r1, r1, ip
   13720:	add	r1, r1, r3, ror #27
   13724:	add	r1, r1, lr
   13728:	orr	r2, r3, r7, ror #2
   1372c:	and	r2, r2, r0, ror #2
   13730:	and	r5, r3, r7, ror #2
   13734:	orr	ip, r2, r5
   13738:	ldr	r5, [sp, #36]	; 0x24
   1373c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13740:	eor	r5, r5, r2, ror #31
   13744:	eor	r5, r5, r8, ror #31
   13748:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1374c:	eor	sl, r5, r2, ror #31
   13750:	ror	r8, sl, #31
   13754:	str	r8, [sp, #36]	; 0x24
   13758:	str	sl, [fp, #-72]	; 0xffffffb8
   1375c:	add	r4, r8, r4, ror #2
   13760:	add	r2, r4, ip
   13764:	add	r2, r2, r1, ror #27
   13768:	add	r4, r2, lr
   1376c:	orr	r2, r1, r3, ror #2
   13770:	and	r2, r2, r7, ror #2
   13774:	and	r5, r1, r3, ror #2
   13778:	orr	ip, r2, r5
   1377c:	ldr	r5, [sp, #60]	; 0x3c
   13780:	ldr	r2, [sp, #96]	; 0x60
   13784:	eor	r5, r5, r2, ror #31
   13788:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1378c:	eor	r5, r5, r2, ror #31
   13790:	eor	r5, r5, r6, ror #31
   13794:	ror	r6, r5, #31
   13798:	str	r6, [sp, #96]	; 0x60
   1379c:	str	r5, [fp, #-80]	; 0xffffffb0
   137a0:	add	r0, r6, r0, ror #2
   137a4:	add	r0, r0, ip
   137a8:	add	r0, r0, r4, ror #27
   137ac:	add	r6, r0, lr
   137b0:	mov	ip, lr
   137b4:	orr	r0, r4, r1, ror #2
   137b8:	and	r0, r0, r3, ror #2
   137bc:	and	r2, r4, r1, ror #2
   137c0:	orr	r8, r0, r2
   137c4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   137c8:	ldr	r0, [sp, #12]
   137cc:	eor	r2, r0, r2, ror #31
   137d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   137d4:	eor	r2, r2, r0, ror #31
   137d8:	eor	lr, r2, r9, ror #31
   137dc:	ror	r0, lr, #31
   137e0:	str	r0, [sp, #60]	; 0x3c
   137e4:	str	lr, [fp, #-60]	; 0xffffffc4
   137e8:	add	r2, r0, r7, ror #2
   137ec:	add	r0, r2, r8
   137f0:	add	r0, r0, r6, ror #27
   137f4:	add	r8, r0, ip
   137f8:	orr	r0, r6, r4, ror #2
   137fc:	and	r0, r0, r1, ror #2
   13800:	and	r2, r6, r4, ror #2
   13804:	orr	r0, r0, r2
   13808:	ldr	r2, [sp, #88]	; 0x58
   1380c:	ldr	r7, [fp, #-92]	; 0xffffffa4
   13810:	eor	r2, r2, r7, ror #31
   13814:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13818:	eor	r2, r2, r7, ror #31
   1381c:	eor	sl, r2, sl, ror #31
   13820:	ror	r9, sl, #31
   13824:	str	r9, [fp, #-92]	; 0xffffffa4
   13828:	add	r2, r9, r3, ror #2
   1382c:	add	r0, r2, r0
   13830:	add	r0, r0, r8, ror #27
   13834:	add	r3, r0, ip
   13838:	mov	r7, ip
   1383c:	orr	r0, r8, r6, ror #2
   13840:	and	r0, r0, r4, ror #2
   13844:	and	r2, r8, r6, ror #2
   13848:	orr	ip, r0, r2
   1384c:	ldr	r2, [sp, #56]	; 0x38
   13850:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13854:	eor	r2, r2, r0, ror #31
   13858:	ldr	r0, [sp, #92]	; 0x5c
   1385c:	eor	r2, r2, r0, ror #31
   13860:	eor	r9, r2, r5, ror #31
   13864:	ror	r5, r9, #31
   13868:	str	r5, [sp, #88]	; 0x58
   1386c:	add	r1, r5, r1, ror #2
   13870:	add	r0, r1, ip
   13874:	add	r0, r0, r3, ror #27
   13878:	add	r1, r0, r7
   1387c:	orr	r0, r3, r8, ror #2
   13880:	and	r0, r0, r6, ror #2
   13884:	and	r2, r3, r8, ror #2
   13888:	orr	r0, r0, r2
   1388c:	ldr	r2, [sp, #52]	; 0x34
   13890:	ldr	r5, [fp, #-64]	; 0xffffffc0
   13894:	eor	r2, r2, r5, ror #31
   13898:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1389c:	eor	r2, r2, r5, ror #31
   138a0:	eor	r2, r2, lr, ror #31
   138a4:	ror	r5, r2, #31
   138a8:	str	r5, [sp, #56]	; 0x38
   138ac:	mov	lr, r2
   138b0:	str	r2, [fp, #-52]	; 0xffffffcc
   138b4:	add	r2, r5, r4, ror #2
   138b8:	add	r0, r2, r0
   138bc:	add	r0, r0, r1, ror #27
   138c0:	add	r0, r0, r7
   138c4:	orr	r2, r1, r3, ror #2
   138c8:	and	r2, r2, r8, ror #2
   138cc:	and	r4, r1, r3, ror #2
   138d0:	orr	r2, r2, r4
   138d4:	ldr	r4, [sp, #48]	; 0x30
   138d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138dc:	eor	r4, r4, r5, ror #31
   138e0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   138e4:	eor	r4, r4, r5, ror #31
   138e8:	str	sl, [fp, #-88]	; 0xffffffa8
   138ec:	eor	r5, r4, sl, ror #31
   138f0:	ror	r4, r5, #31
   138f4:	str	r4, [sp, #48]	; 0x30
   138f8:	mov	sl, r5
   138fc:	str	r5, [fp, #-48]	; 0xffffffd0
   13900:	add	r4, r4, r6, ror #2
   13904:	add	r2, r4, r2
   13908:	add	r2, r2, r0, ror #27
   1390c:	add	r4, r2, r7
   13910:	orr	r2, r0, r1, ror #2
   13914:	and	r2, r2, r3, ror #2
   13918:	and	r5, r0, r1, ror #2
   1391c:	orr	r2, r2, r5
   13920:	ldr	r6, [sp, #44]	; 0x2c
   13924:	ldr	r5, [sp, #8]
   13928:	eor	r5, r6, r5, ror #31
   1392c:	ldr	r6, [fp, #-68]	; 0xffffffbc
   13930:	eor	r5, r5, r6, ror #31
   13934:	str	r9, [sp, #4]
   13938:	eor	r6, r5, r9, ror #31
   1393c:	str	r6, [fp, #-44]	; 0xffffffd4
   13940:	ror	r6, r6, #31
   13944:	str	r6, [sp, #44]	; 0x2c
   13948:	add	r5, r6, r8, ror #2
   1394c:	add	r2, r5, r2
   13950:	add	r2, r2, r4, ror #27
   13954:	add	r2, r2, r7
   13958:	orr	r5, r4, r0, ror #2
   1395c:	and	r5, r5, r1, ror #2
   13960:	and	r6, r4, r0, ror #2
   13964:	orr	ip, r5, r6
   13968:	ldr	r6, [sp, #40]	; 0x28
   1396c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13970:	eor	r6, r6, r5, ror #31
   13974:	ldr	r5, [fp, #-72]	; 0xffffffb8
   13978:	eor	r6, r6, r5, ror #31
   1397c:	eor	r8, r6, lr, ror #31
   13980:	ror	r5, r8, #31
   13984:	str	r5, [sp, #12]
   13988:	str	r8, [fp, #-64]	; 0xffffffc0
   1398c:	add	r3, r5, r3, ror #2
   13990:	add	r3, r3, ip
   13994:	add	r3, r3, r2, ror #27
   13998:	add	r3, r3, r7
   1399c:	ror	r7, r4, #2
   139a0:	eor	r7, r7, r0, ror #2
   139a4:	eor	r7, r7, r2
   139a8:	ldr	r6, [sp, #32]
   139ac:	ldr	r5, [fp, #-36]	; 0xffffffdc
   139b0:	eor	r6, r6, r5, ror #31
   139b4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   139b8:	eor	r6, r6, r5, ror #31
   139bc:	eor	r6, r6, sl, ror #31
   139c0:	ror	r5, r6, #31
   139c4:	str	r5, [sp, #32]
   139c8:	mov	lr, r6
   139cc:	str	r6, [fp, #-36]	; 0xffffffdc
   139d0:	add	r1, r5, r1, ror #2
   139d4:	add	r1, r1, r7
   139d8:	add	r1, r1, r3, ror #27
   139dc:	movw	r7, #49622	; 0xc1d6
   139e0:	movt	r7, #51810	; 0xca62
   139e4:	add	r1, r1, r7
   139e8:	ror	r7, r2, #2
   139ec:	eor	r7, r7, r4, ror #2
   139f0:	eor	r7, r7, r3
   139f4:	ldr	r5, [sp, #28]
   139f8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   139fc:	eor	r6, r5, r6, ror #31
   13a00:	ldr	r5, [fp, #-60]	; 0xffffffc4
   13a04:	eor	r6, r6, r5, ror #31
   13a08:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13a0c:	eor	r6, r6, r5, ror #31
   13a10:	ror	r5, r6, #31
   13a14:	str	r5, [sp, #28]
   13a18:	mov	sl, r6
   13a1c:	str	r6, [fp, #-84]	; 0xffffffac
   13a20:	add	r0, r5, r0, ror #2
   13a24:	add	r0, r0, r7
   13a28:	add	r0, r0, r1, ror #27
   13a2c:	movw	r7, #49622	; 0xc1d6
   13a30:	movt	r7, #51810	; 0xca62
   13a34:	add	ip, r0, r7
   13a38:	ror	r7, r3, #2
   13a3c:	eor	r7, r7, r2, ror #2
   13a40:	eor	r7, r7, r1
   13a44:	ldr	r5, [sp, #20]
   13a48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a4c:	eor	r6, r5, r0, ror #31
   13a50:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13a54:	eor	r6, r6, r0, ror #31
   13a58:	eor	r5, r6, r8, ror #31
   13a5c:	ror	r0, r5, #31
   13a60:	str	r0, [sp, #40]	; 0x28
   13a64:	mov	r8, r5
   13a68:	str	r5, [fp, #-56]	; 0xffffffc8
   13a6c:	add	r6, r0, r4, ror #2
   13a70:	add	r7, r6, r7
   13a74:	add	r7, r7, ip, ror #27
   13a78:	movw	r0, #49622	; 0xc1d6
   13a7c:	movt	r0, #51810	; 0xca62
   13a80:	add	r5, r7, r0
   13a84:	ror	r7, r1, #2
   13a88:	eor	r7, r7, r3, ror #2
   13a8c:	eor	r7, r7, ip
   13a90:	ldr	r4, [sp, #16]
   13a94:	ldr	r0, [sp, #92]	; 0x5c
   13a98:	eor	r6, r4, r0, ror #31
   13a9c:	eor	r6, r6, r9, ror #31
   13aa0:	eor	r6, r6, lr, ror #31
   13aa4:	ror	r4, r6, #31
   13aa8:	str	r4, [sp, #52]	; 0x34
   13aac:	mov	r9, r6
   13ab0:	str	r6, [fp, #-32]	; 0xffffffe0
   13ab4:	add	r2, r4, r2, ror #2
   13ab8:	add	r2, r2, r7
   13abc:	add	r2, r2, r5, ror #27
   13ac0:	movw	r0, #49622	; 0xc1d6
   13ac4:	movt	r0, #51810	; 0xca62
   13ac8:	add	r6, r2, r0
   13acc:	ror	r2, ip, #2
   13ad0:	eor	r2, r2, r1, ror #2
   13ad4:	eor	r2, r2, r5
   13ad8:	ldr	r7, [sp, #24]
   13adc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13ae0:	eor	r7, r7, r0, ror #31
   13ae4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13ae8:	eor	r7, r7, r0, ror #31
   13aec:	eor	lr, r7, sl, ror #31
   13af0:	ror	r4, lr, #31
   13af4:	str	lr, [sp, #24]
   13af8:	str	r4, [sp, #92]	; 0x5c
   13afc:	add	r3, r4, r3, ror #2
   13b00:	add	r2, r3, r2
   13b04:	add	r2, r2, r6, ror #27
   13b08:	movw	r0, #49622	; 0xc1d6
   13b0c:	movt	r0, #51810	; 0xca62
   13b10:	add	r2, r2, r0
   13b14:	ror	r3, r5, #2
   13b18:	eor	r3, r3, ip, ror #2
   13b1c:	eor	r3, r3, r6
   13b20:	ldr	r4, [sp, #36]	; 0x24
   13b24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b28:	eor	r7, r4, r0, ror #31
   13b2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b30:	eor	r7, r7, r0, ror #31
   13b34:	eor	sl, r7, r8, ror #31
   13b38:	ror	r4, sl, #31
   13b3c:	str	sl, [sp, #36]	; 0x24
   13b40:	str	r4, [fp, #-76]	; 0xffffffb4
   13b44:	add	r1, r4, r1, ror #2
   13b48:	add	r1, r1, r3
   13b4c:	add	r1, r1, r2, ror #27
   13b50:	movw	r8, #49622	; 0xc1d6
   13b54:	movt	r8, #51810	; 0xca62
   13b58:	add	r1, r1, r8
   13b5c:	ror	r3, r6, #2
   13b60:	eor	r3, r3, r5, ror #2
   13b64:	eor	r3, r3, r2
   13b68:	ldr	r4, [sp, #96]	; 0x60
   13b6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b70:	eor	r4, r4, r0, ror #31
   13b74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b78:	eor	r4, r4, r0, ror #31
   13b7c:	eor	r0, r4, r9, ror #31
   13b80:	str	r0, [fp, #-40]	; 0xffffffd8
   13b84:	ror	r4, r0, #31
   13b88:	add	r0, r4, ip, ror #2
   13b8c:	add	r0, r0, r3
   13b90:	add	r0, r0, r1, ror #27
   13b94:	add	r0, r0, r8
   13b98:	ror	r3, r2, #2
   13b9c:	eor	r3, r3, r6, ror #2
   13ba0:	eor	r3, r3, r1
   13ba4:	ldr	r4, [sp, #60]	; 0x3c
   13ba8:	ldr	r7, [fp, #-72]	; 0xffffffb8
   13bac:	eor	r4, r4, r7, ror #31
   13bb0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13bb4:	eor	r4, r4, r7, ror #31
   13bb8:	eor	r7, r4, lr, ror #31
   13bbc:	ror	r4, r7, #31
   13bc0:	mov	lr, r7
   13bc4:	str	r7, [sp, #96]	; 0x60
   13bc8:	add	r5, r4, r5, ror #2
   13bcc:	add	r3, r5, r3
   13bd0:	add	r3, r3, r0, ror #27
   13bd4:	add	r3, r3, r8
   13bd8:	ror	r5, r1, #2
   13bdc:	eor	r5, r5, r2, ror #2
   13be0:	eor	r5, r5, r0
   13be4:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13be8:	ldr	r7, [fp, #-80]	; 0xffffffb0
   13bec:	eor	r4, r4, r7, ror #31
   13bf0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13bf4:	eor	r4, r4, r7, ror #31
   13bf8:	eor	r9, r4, sl, ror #31
   13bfc:	ror	r4, r9, #31
   13c00:	str	r9, [fp, #-80]	; 0xffffffb0
   13c04:	add	r6, r4, r6, ror #2
   13c08:	add	r6, r6, r5
   13c0c:	add	r6, r6, r3, ror #27
   13c10:	add	ip, r6, r8
   13c14:	ror	r4, r0, #2
   13c18:	eor	r4, r4, r1, ror #2
   13c1c:	eor	r4, r4, r3
   13c20:	ldr	r5, [sp, #88]	; 0x58
   13c24:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13c28:	eor	r5, r5, r6, ror #31
   13c2c:	ldr	r7, [fp, #-84]	; 0xffffffac
   13c30:	eor	r5, r5, r7, ror #31
   13c34:	ldr	r7, [fp, #-40]	; 0xffffffd8
   13c38:	eor	r6, r5, r7, ror #31
   13c3c:	ror	r5, r6, #31
   13c40:	str	r6, [fp, #-72]	; 0xffffffb8
   13c44:	add	r2, r5, r2, ror #2
   13c48:	add	r2, r2, r4
   13c4c:	add	r2, r2, ip, ror #27
   13c50:	add	r2, r2, r8
   13c54:	ror	r4, r3, #2
   13c58:	eor	r4, r4, r0, ror #2
   13c5c:	eor	r4, r4, ip
   13c60:	ldr	r5, [sp, #56]	; 0x38
   13c64:	ldr	r7, [fp, #-88]	; 0xffffffa8
   13c68:	eor	r5, r5, r7, ror #31
   13c6c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13c70:	eor	r5, r5, r7, ror #31
   13c74:	eor	lr, r5, lr, ror #31
   13c78:	ror	r5, lr, #31
   13c7c:	str	lr, [fp, #-68]	; 0xffffffbc
   13c80:	add	r1, r5, r1, ror #2
   13c84:	add	r1, r1, r4
   13c88:	add	r1, r1, r2, ror #27
   13c8c:	add	r1, r1, r8
   13c90:	ror	r4, ip, #2
   13c94:	eor	r4, r4, r3, ror #2
   13c98:	eor	r4, r4, r2
   13c9c:	ldr	r5, [sp, #48]	; 0x30
   13ca0:	ldr	r7, [sp, #4]
   13ca4:	eor	r5, r5, r7, ror #31
   13ca8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13cac:	eor	r5, r5, r7, ror #31
   13cb0:	eor	r7, r5, r9, ror #31
   13cb4:	ror	r5, r7, #31
   13cb8:	mov	sl, r7
   13cbc:	str	r7, [fp, #-60]	; 0xffffffc4
   13cc0:	add	r0, r5, r0, ror #2
   13cc4:	add	r0, r0, r4
   13cc8:	add	r0, r0, r1, ror #27
   13ccc:	add	r0, r0, r8
   13cd0:	mov	r9, r8
   13cd4:	ror	r4, r2, #2
   13cd8:	eor	r4, r4, ip, ror #2
   13cdc:	eor	r4, r4, r1
   13ce0:	ldr	r5, [sp, #44]	; 0x2c
   13ce4:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13ce8:	eor	r5, r5, r7, ror #31
   13cec:	ldr	r7, [sp, #24]
   13cf0:	eor	r5, r5, r7, ror #31
   13cf4:	eor	r8, r5, r6, ror #31
   13cf8:	ror	r5, r8, #31
   13cfc:	add	r3, r5, r3, ror #2
   13d00:	add	r3, r3, r4
   13d04:	add	r3, r3, r0, ror #27
   13d08:	add	r4, r3, r9
   13d0c:	ror	r3, r1, #2
   13d10:	eor	r3, r3, r2, ror #2
   13d14:	eor	r3, r3, r0
   13d18:	ldr	r5, [sp, #12]
   13d1c:	ldr	r6, [fp, #-48]	; 0xffffffd0
   13d20:	eor	r5, r5, r6, ror #31
   13d24:	ldr	r6, [sp, #36]	; 0x24
   13d28:	eor	r5, r5, r6, ror #31
   13d2c:	eor	r9, r5, lr, ror #31
   13d30:	ror	r7, r9, #31
   13d34:	add	r7, r7, ip, ror #2
   13d38:	add	r3, r7, r3
   13d3c:	add	r3, r3, r4, ror #27
   13d40:	movw	lr, #49622	; 0xc1d6
   13d44:	movt	lr, #51810	; 0xca62
   13d48:	add	r7, r3, lr
   13d4c:	ror	r3, r0, #2
   13d50:	eor	r3, r3, r1, ror #2
   13d54:	eor	r3, r3, r4
   13d58:	ldr	r6, [sp, #32]
   13d5c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13d60:	eor	r6, r6, r5, ror #31
   13d64:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13d68:	eor	r6, r6, r5, ror #31
   13d6c:	eor	ip, r6, sl, ror #31
   13d70:	ror	r6, ip, #31
   13d74:	add	r2, r6, r2, ror #2
   13d78:	add	r2, r2, r3
   13d7c:	add	r2, r2, r7, ror #27
   13d80:	add	sl, r2, lr
   13d84:	mov	r5, lr
   13d88:	ror	r2, r4, #2
   13d8c:	eor	r2, r2, r0, ror #2
   13d90:	eor	r6, r2, r7
   13d94:	ldr	r2, [sp, #28]
   13d98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d9c:	eor	r2, r2, r3, ror #31
   13da0:	ldr	r3, [sp, #96]	; 0x60
   13da4:	eor	r2, r2, r3, ror #31
   13da8:	eor	lr, r2, r8, ror #31
   13dac:	ror	r2, lr, #31
   13db0:	add	r1, r2, r1, ror #2
   13db4:	add	r1, r1, r6
   13db8:	add	r1, r1, sl, ror #27
   13dbc:	add	r1, r1, r5
   13dc0:	mov	r8, r5
   13dc4:	ldr	r2, [sp, #80]	; 0x50
   13dc8:	add	r2, r2, r1, ror #2
   13dcc:	ldr	r3, [sp, #84]	; 0x54
   13dd0:	str	r2, [r3, #16]
   13dd4:	ror	r2, r7, #2
   13dd8:	eor	r2, r2, r4, ror #2
   13ddc:	eor	r2, r2, sl
   13de0:	ldr	r6, [sp, #40]	; 0x28
   13de4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13de8:	eor	r6, r6, r5, ror #31
   13dec:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13df0:	eor	r6, r6, r5, ror #31
   13df4:	eor	r9, r6, r9, ror #31
   13df8:	ror	r6, r9, #31
   13dfc:	add	r0, r6, r0, ror #2
   13e00:	add	r0, r0, r2
   13e04:	add	r0, r0, r1, ror #27
   13e08:	add	r0, r0, r8
   13e0c:	ldr	r2, [sp, #68]	; 0x44
   13e10:	add	r2, r2, r0, ror #2
   13e14:	str	r2, [r3, #12]
   13e18:	mov	r5, r3
   13e1c:	ror	r2, sl, #2
   13e20:	eor	r2, r2, r7, ror #2
   13e24:	eor	r2, r2, r1
   13e28:	ldr	r3, [sp, #52]	; 0x34
   13e2c:	ldr	r6, [fp, #-84]	; 0xffffffac
   13e30:	eor	r6, r3, r6, ror #31
   13e34:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13e38:	eor	r6, r6, r3, ror #31
   13e3c:	eor	r6, r6, ip, ror #31
   13e40:	ror	r6, r6, #31
   13e44:	add	r6, r6, r4, ror #2
   13e48:	add	r2, r6, r2
   13e4c:	add	r2, r2, r0, ror #27
   13e50:	add	r2, r2, r8
   13e54:	ldr	r3, [sp, #72]	; 0x48
   13e58:	add	r6, r3, r2, ror #2
   13e5c:	str	r6, [r5, #8]
   13e60:	ror	r6, r1, #2
   13e64:	eor	r6, r6, sl, ror #2
   13e68:	eor	r6, r6, r0
   13e6c:	ldr	r3, [sp, #92]	; 0x5c
   13e70:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13e74:	eor	r4, r3, r4, ror #31
   13e78:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13e7c:	eor	r4, r4, r3, ror #31
   13e80:	eor	r4, r4, lr, ror #31
   13e84:	ror	r4, r4, #31
   13e88:	add	r7, r4, r7, ror #2
   13e8c:	add	r7, r7, r6
   13e90:	add	r7, r7, r2, ror #27
   13e94:	add	r7, r7, r8
   13e98:	ldr	r3, [sp, #76]	; 0x4c
   13e9c:	add	r6, r7, r3
   13ea0:	str	r6, [r5, #4]
   13ea4:	ror	r0, r0, #2
   13ea8:	eor	r0, r0, r1, ror #2
   13eac:	eor	r0, r0, r2
   13eb0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13eb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13eb8:	eor	r1, r1, r2, ror #31
   13ebc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13ec0:	eor	r1, r1, r2, ror #31
   13ec4:	eor	r1, r1, r9, ror #31
   13ec8:	ldr	r2, [sp, #64]	; 0x40
   13ecc:	add	r1, r2, r1, ror #31
   13ed0:	add	r1, r1, sl, ror #2
   13ed4:	add	r0, r1, r0
   13ed8:	add	r0, r0, r7, ror #27
   13edc:	add	r0, r0, r8
   13ee0:	str	r0, [r5]
   13ee4:	sub	sp, fp, #28
   13ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ef0:	add	fp, sp, #24
   13ef4:	sub	sp, sp, #8
   13ef8:	mov	r8, r1
   13efc:	mov	r4, r0
   13f00:	ldrd	r0, [r0, #24]
   13f04:	mov	r2, sp
   13f08:	mov	r3, #0
   13f0c:	eor	r7, r3, #56	; 0x38
   13f10:	lsr	r6, r0, r7
   13f14:	rsb	r5, r7, #32
   13f18:	orr	r6, r6, r1, lsl r5
   13f1c:	sub	r7, r7, #32
   13f20:	cmp	r7, #0
   13f24:	lsrge	r6, r1, r7
   13f28:	strb	r6, [r2], #1
   13f2c:	add	r3, r3, #8
   13f30:	cmp	r3, #64	; 0x40
   13f34:	bne	13f0c <rb_base64_encode@plt+0x2ec4>
   13f38:	movw	r1, #17323	; 0x43ab
   13f3c:	movt	r1, #1
   13f40:	mov	r0, r4
   13f44:	mov	r2, #1
   13f48:	bl	12970 <rb_base64_encode@plt+0x1928>
   13f4c:	mov	r7, r4
   13f50:	ldr	r0, [r7, #24]!
   13f54:	and	r0, r0, #504	; 0x1f8
   13f58:	teq	r0, #448	; 0x1c0
   13f5c:	beq	13f88 <rb_base64_encode@plt+0x2f40>
   13f60:	movw	r6, #17325	; 0x43ad
   13f64:	movt	r6, #1
   13f68:	mov	r0, r4
   13f6c:	mov	r1, r6
   13f70:	mov	r2, #1
   13f74:	bl	12970 <rb_base64_encode@plt+0x1928>
   13f78:	ldr	r0, [r7]
   13f7c:	and	r0, r0, #504	; 0x1f8
   13f80:	teq	r0, #448	; 0x1c0
   13f84:	bne	13f68 <rb_base64_encode@plt+0x2f20>
   13f88:	mov	r1, sp
   13f8c:	mov	r0, r4
   13f90:	mov	r2, #8
   13f94:	bl	12970 <rb_base64_encode@plt+0x1928>
   13f98:	mov	r0, #0
   13f9c:	mov	r1, #24
   13fa0:	mov	r2, #0
   13fa4:	bic	r3, r2, #3
   13fa8:	ldr	r3, [r4, r3]
   13fac:	bic	r7, r1, r0
   13fb0:	lsr	r3, r3, r7
   13fb4:	strb	r3, [r8, r2]
   13fb8:	add	r0, r0, #8
   13fbc:	add	r2, r2, #1
   13fc0:	cmp	r2, #20
   13fc4:	bne	13fa4 <rb_base64_encode@plt+0x2f5c>
   13fc8:	vmov.i32	q8, #0	; 0x00000000
   13fcc:	mov	r0, #80	; 0x50
   13fd0:	mov	r1, r4
   13fd4:	vst1.64	{d16-d17}, [r1], r0
   13fd8:	vst1.64	{d16-d17}, [r1]
   13fdc:	add	r0, r4, #64	; 0x40
   13fe0:	vst1.64	{d16-d17}, [r0]
   13fe4:	add	r0, r4, #48	; 0x30
   13fe8:	vst1.64	{d16-d17}, [r0]
   13fec:	add	r0, r4, #32
   13ff0:	vst1.64	{d16-d17}, [r0]
   13ff4:	add	r0, r4, #16
   13ff8:	vst1.64	{d16-d17}, [r0]
   13ffc:	sub	sp, fp, #24
   14000:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14004:	rev	r0, r0
   14008:	bx	lr
   1400c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14010:	mov	r7, r0
   14014:	ldr	r6, [pc, #72]	; 14064 <rb_base64_encode@plt+0x301c>
   14018:	ldr	r5, [pc, #72]	; 14068 <rb_base64_encode@plt+0x3020>
   1401c:	add	r6, pc, r6
   14020:	add	r5, pc, r5
   14024:	sub	r6, r6, r5
   14028:	mov	r8, r1
   1402c:	mov	r9, r2
   14030:	bl	10db8 <open@plt-0x20>
   14034:	asrs	r6, r6, #2
   14038:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1403c:	mov	r4, #0
   14040:	add	r4, r4, #1
   14044:	ldr	r3, [r5], #4
   14048:	mov	r2, r9
   1404c:	mov	r1, r8
   14050:	mov	r0, r7
   14054:	blx	r3
   14058:	cmp	r6, r4
   1405c:	bne	14040 <rb_base64_encode@plt+0x2ff8>
   14060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14064:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   14068:	andeq	r0, r1, r8, asr #29
   1406c:	bx	lr

Disassembly of section .fini:

00014070 <.fini>:
   14070:	push	{r3, lr}
   14074:	pop	{r3, pc}
