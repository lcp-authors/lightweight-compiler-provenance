
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010cec <.init>:
   10cec:	push	{r3, lr}
   10cf0:	bl	10f7c <__assert_fail@plt+0x48>
   10cf4:	pop	{r3, pc}

Disassembly of section .plt:

00010cf8 <calloc@plt-0x14>:
   10cf8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cfc:	ldr	lr, [pc, #4]	; 10d08 <calloc@plt-0x4>
   10d00:	add	lr, pc, lr
   10d04:	ldr	pc, [lr, #8]!
   10d08:	strdeq	r6, [r1], -r8

00010d0c <calloc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #760]!	; 0x2f8

00010d18 <fputs_unlocked@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #752]!	; 0x2f0

00010d24 <strcmp@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d30 <strtol@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #736]!	; 0x2e0

00010d3c <fflush@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #728]!	; 0x2d8

00010d48 <free@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #720]!	; 0x2d0

00010d54 <_exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #712]!	; 0x2c8

00010d60 <memcpy@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #704]!	; 0x2c0

00010d6c <execvp@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #696]!	; 0x2b8

00010d78 <mbsinit@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #688]!	; 0x2b0

00010d84 <dcgettext@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d90 <realloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #672]!	; 0x2a0

00010d9c <getpriority@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #664]!	; 0x298

00010da8 <textdomain@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #656]!	; 0x290

00010db4 <iswprint@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #648]!	; 0x288

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #640]!	; 0x280

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #632]!	; 0x278

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #624]!	; 0x270

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #616]!	; 0x268

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #608]!	; 0x260

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #600]!	; 0x258

00010e08 <setpriority@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #592]!	; 0x250

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #584]!	; 0x248

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #576]!	; 0x240

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #568]!	; 0x238

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #560]!	; 0x230

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #552]!	; 0x228

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #544]!	; 0x220

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #536]!	; 0x218

00010e68 <bcmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #528]!	; 0x210

00010e74 <strlen@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #520]!	; 0x208

00010e80 <strchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #512]!	; 0x200

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #504]!	; 0x1f8

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #496]!	; 0x1f0

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #480]!	; 0x1e0

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #464]!	; 0x1d0

00010ed4 <fclose@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee0 <fseeko64@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #448]!	; 0x1c0

00010eec <setlocale@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ef8 <strrchr@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #432]!	; 0x1b0

00010f04 <nl_langinfo@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #424]!	; 0x1a8

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #416]!	; 0x1a0

00010f1c <strncmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #408]!	; 0x198

00010f28 <abort@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #400]!	; 0x190

00010f34 <__assert_fail@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #392]!	; 0x188

Disassembly of section .text:

00010f40 <.text>:
   10f40:	mov	fp, #0
   10f44:	mov	lr, #0
   10f48:	pop	{r1}		; (ldr r1, [sp], #4)
   10f4c:	mov	r2, sp
   10f50:	push	{r2}		; (str r2, [sp, #-4]!)
   10f54:	push	{r0}		; (str r0, [sp, #-4]!)
   10f58:	ldr	ip, [pc, #16]	; 10f70 <__assert_fail@plt+0x3c>
   10f5c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f60:	ldr	r0, [pc, #12]	; 10f74 <__assert_fail@plt+0x40>
   10f64:	ldr	r3, [pc, #12]	; 10f78 <__assert_fail@plt+0x44>
   10f68:	bl	10e20 <__libc_start_main@plt>
   10f6c:	bl	10f28 <abort@plt>
   10f70:	andeq	r5, r1, r8, lsl r5
   10f74:	ldrdeq	r1, [r1], -ip
   10f78:			; <UNDEFINED> instruction: 0x000154b8
   10f7c:	ldr	r3, [pc, #20]	; 10f98 <__assert_fail@plt+0x64>
   10f80:	ldr	r2, [pc, #20]	; 10f9c <__assert_fail@plt+0x68>
   10f84:	add	r3, pc, r3
   10f88:	ldr	r2, [r3, r2]
   10f8c:	cmp	r2, #0
   10f90:	bxeq	lr
   10f94:	b	10e38 <__gmon_start__@plt>
   10f98:	andeq	r6, r1, r4, ror r0
   10f9c:	andeq	r0, r0, r8, asr #1
   10fa0:	ldr	r0, [pc, #24]	; 10fc0 <__assert_fail@plt+0x8c>
   10fa4:	ldr	r3, [pc, #24]	; 10fc4 <__assert_fail@plt+0x90>
   10fa8:	cmp	r3, r0
   10fac:	bxeq	lr
   10fb0:	ldr	r3, [pc, #16]	; 10fc8 <__assert_fail@plt+0x94>
   10fb4:	cmp	r3, #0
   10fb8:	bxeq	lr
   10fbc:	bx	r3
   10fc0:	andeq	r7, r2, r0, lsr #2
   10fc4:	andeq	r7, r2, r0, lsr #2
   10fc8:	andeq	r0, r0, r0
   10fcc:	ldr	r0, [pc, #36]	; 10ff8 <__assert_fail@plt+0xc4>
   10fd0:	ldr	r1, [pc, #36]	; 10ffc <__assert_fail@plt+0xc8>
   10fd4:	sub	r1, r1, r0
   10fd8:	asr	r1, r1, #2
   10fdc:	add	r1, r1, r1, lsr #31
   10fe0:	asrs	r1, r1, #1
   10fe4:	bxeq	lr
   10fe8:	ldr	r3, [pc, #16]	; 11000 <__assert_fail@plt+0xcc>
   10fec:	cmp	r3, #0
   10ff0:	bxeq	lr
   10ff4:	bx	r3
   10ff8:	andeq	r7, r2, r0, lsr #2
   10ffc:	andeq	r7, r2, r0, lsr #2
   11000:	andeq	r0, r0, r0
   11004:	push	{r4, lr}
   11008:	ldr	r4, [pc, #24]	; 11028 <__assert_fail@plt+0xf4>
   1100c:	ldrb	r3, [r4]
   11010:	cmp	r3, #0
   11014:	popne	{r4, pc}
   11018:	bl	10fa0 <__assert_fail@plt+0x6c>
   1101c:	mov	r3, #1
   11020:	strb	r3, [r4]
   11024:	pop	{r4, pc}
   11028:	andeq	r7, r2, ip, lsr r1
   1102c:	b	10fcc <__assert_fail@plt+0x98>
   11030:	push	{fp, lr}
   11034:	mov	fp, sp
   11038:	sub	sp, sp, #56	; 0x38
   1103c:	mov	r4, r0
   11040:	cmp	r0, #0
   11044:	bne	11298 <__assert_fail@plt+0x364>
   11048:	movw	r1, #21867	; 0x556b
   1104c:	mov	r0, #0
   11050:	mov	r2, #5
   11054:	movt	r1, #1
   11058:	bl	10d84 <dcgettext@plt>
   1105c:	mov	r1, r0
   11060:	movw	r0, #29000	; 0x7148
   11064:	movt	r0, #2
   11068:	ldr	r2, [r0]
   1106c:	mov	r0, #1
   11070:	bl	10eb0 <__printf_chk@plt>
   11074:	movw	r1, #21906	; 0x5592
   11078:	mov	r0, #0
   1107c:	mov	r2, #5
   11080:	movt	r1, #1
   11084:	bl	10d84 <dcgettext@plt>
   11088:	mov	r1, r0
   1108c:	mov	r0, #1
   11090:	mvn	r2, #19
   11094:	mov	r3, #19
   11098:	bl	10eb0 <__printf_chk@plt>
   1109c:	movw	r1, #22657	; 0x5881
   110a0:	mov	r0, #0
   110a4:	mov	r2, #5
   110a8:	movt	r1, #1
   110ac:	bl	10d84 <dcgettext@plt>
   110b0:	movw	r7, #28980	; 0x7134
   110b4:	movt	r7, #2
   110b8:	ldr	r1, [r7]
   110bc:	bl	10d18 <fputs_unlocked@plt>
   110c0:	movw	r1, #22128	; 0x5670
   110c4:	mov	r0, #0
   110c8:	mov	r2, #5
   110cc:	movt	r1, #1
   110d0:	bl	10d84 <dcgettext@plt>
   110d4:	ldr	r1, [r7]
   110d8:	bl	10d18 <fputs_unlocked@plt>
   110dc:	movw	r1, #22195	; 0x56b3
   110e0:	mov	r0, #0
   110e4:	mov	r2, #5
   110e8:	movt	r1, #1
   110ec:	bl	10d84 <dcgettext@plt>
   110f0:	ldr	r1, [r7]
   110f4:	bl	10d18 <fputs_unlocked@plt>
   110f8:	movw	r1, #22240	; 0x56e0
   110fc:	mov	r0, #0
   11100:	mov	r2, #5
   11104:	movt	r1, #1
   11108:	bl	10d84 <dcgettext@plt>
   1110c:	ldr	r1, [r7]
   11110:	bl	10d18 <fputs_unlocked@plt>
   11114:	movw	r1, #22294	; 0x5716
   11118:	mov	r0, #0
   1111c:	mov	r2, #5
   11120:	movt	r1, #1
   11124:	bl	10d84 <dcgettext@plt>
   11128:	movw	r5, #22485	; 0x57d5
   1112c:	mov	r1, r0
   11130:	mov	r0, #1
   11134:	movt	r5, #1
   11138:	mov	r2, r5
   1113c:	bl	10eb0 <__printf_chk@plt>
   11140:	movw	r0, #23120	; 0x5a50
   11144:	mov	r2, #48	; 0x30
   11148:	mov	r6, sp
   1114c:	movt	r0, #1
   11150:	add	r1, r0, #32
   11154:	add	r3, r0, #16
   11158:	vld1.64	{d18-d19}, [r0], r2
   1115c:	vld1.64	{d16-d17}, [r1]
   11160:	vld1.64	{d20-d21}, [r3]
   11164:	vldr	d22, [r0]
   11168:	add	r1, r6, #32
   1116c:	add	r0, r6, #16
   11170:	vst1.64	{d16-d17}, [r1]
   11174:	movw	r1, #22732	; 0x58cc
   11178:	vst1.64	{d20-d21}, [r0]
   1117c:	mov	r0, r6
   11180:	movt	r1, #1
   11184:	vst1.64	{d18-d19}, [r0], r2
   11188:	vstr	d22, [r0]
   1118c:	mov	r0, r5
   11190:	bl	10d24 <strcmp@plt>
   11194:	cmp	r0, #0
   11198:	ldrne	r1, [r6, #8]!
   1119c:	cmpne	r1, #0
   111a0:	bne	1118c <__assert_fail@plt+0x258>
   111a4:	movw	r1, #22827	; 0x592b
   111a8:	ldr	r6, [r6, #4]
   111ac:	mov	r0, #0
   111b0:	mov	r2, #5
   111b4:	movt	r1, #1
   111b8:	bl	10d84 <dcgettext@plt>
   111bc:	movw	r2, #22518	; 0x57f6
   111c0:	movw	r3, #22850	; 0x5942
   111c4:	mov	r1, r0
   111c8:	mov	r0, #1
   111cc:	movt	r2, #1
   111d0:	movt	r3, #1
   111d4:	bl	10eb0 <__printf_chk@plt>
   111d8:	cmp	r6, #0
   111dc:	mov	r0, #5
   111e0:	mov	r1, #0
   111e4:	moveq	r6, r5
   111e8:	bl	10eec <setlocale@plt>
   111ec:	cmp	r0, #0
   111f0:	beq	11228 <__assert_fail@plt+0x2f4>
   111f4:	movw	r1, #22890	; 0x596a
   111f8:	mov	r2, #3
   111fc:	movt	r1, #1
   11200:	bl	10f1c <strncmp@plt>
   11204:	cmp	r0, #0
   11208:	beq	11228 <__assert_fail@plt+0x2f4>
   1120c:	movw	r1, #22894	; 0x596e
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10d84 <dcgettext@plt>
   11220:	ldr	r1, [r7]
   11224:	bl	10d18 <fputs_unlocked@plt>
   11228:	movw	r1, #22965	; 0x59b5
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10d84 <dcgettext@plt>
   1123c:	movw	r2, #22850	; 0x5942
   11240:	mov	r1, r0
   11244:	mov	r0, #1
   11248:	mov	r3, r5
   1124c:	movt	r2, #1
   11250:	bl	10eb0 <__printf_chk@plt>
   11254:	movw	r1, #22992	; 0x59d0
   11258:	mov	r0, #0
   1125c:	mov	r2, #5
   11260:	movt	r1, #1
   11264:	bl	10d84 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	movw	r0, #22760	; 0x58e8
   11270:	movw	r3, #23042	; 0x5a02
   11274:	cmp	r6, r5
   11278:	mov	r2, r6
   1127c:	movt	r0, #1
   11280:	movt	r3, #1
   11284:	moveq	r3, r0
   11288:	mov	r0, #1
   1128c:	bl	10eb0 <__printf_chk@plt>
   11290:	mov	r0, r4
   11294:	bl	10e5c <exit@plt>
   11298:	movw	r0, #28976	; 0x7130
   1129c:	movw	r1, #21828	; 0x5544
   112a0:	mov	r2, #5
   112a4:	movt	r0, #2
   112a8:	movt	r1, #1
   112ac:	ldr	r5, [r0]
   112b0:	mov	r0, #0
   112b4:	bl	10d84 <dcgettext@plt>
   112b8:	mov	r2, r0
   112bc:	movw	r0, #29000	; 0x7148
   112c0:	mov	r1, #1
   112c4:	movt	r0, #2
   112c8:	ldr	r3, [r0]
   112cc:	mov	r0, r5
   112d0:	bl	10ec8 <__fprintf_chk@plt>
   112d4:	mov	r0, r4
   112d8:	bl	10e5c <exit@plt>
   112dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e0:	add	fp, sp, #28
   112e4:	sub	sp, sp, #12
   112e8:	mov	r9, r0
   112ec:	ldr	r0, [r1]
   112f0:	mov	r8, r1
   112f4:	bl	11808 <__assert_fail@plt+0x8d4>
   112f8:	movw	r1, #23042	; 0x5a02
   112fc:	mov	r0, #6
   11300:	movt	r1, #1
   11304:	bl	10eec <setlocale@plt>
   11308:	movw	r7, #22522	; 0x57fa
   1130c:	movw	r1, #22490	; 0x57da
   11310:	movt	r7, #1
   11314:	movt	r1, #1
   11318:	mov	r0, r7
   1131c:	bl	10f10 <bindtextdomain@plt>
   11320:	mov	r0, r7
   11324:	bl	10da8 <textdomain@plt>
   11328:	movw	r0, #28892	; 0x70dc
   1132c:	mov	r1, #125	; 0x7d
   11330:	movt	r0, #2
   11334:	str	r1, [r0]
   11338:	movw	r0, #5916	; 0x171c
   1133c:	movt	r0, #1
   11340:	bl	1551c <__assert_fail@plt+0x45e8>
   11344:	mov	r4, #10
   11348:	mov	r7, #1
   1134c:	cmp	r9, #2
   11350:	blt	11434 <__assert_fail@plt+0x500>
   11354:	movw	r2, #22514	; 0x57f2
   11358:	movw	r3, #23056	; 0x5a10
   1135c:	movw	sl, #28968	; 0x7128
   11360:	mov	ip, #0
   11364:	mov	r4, #0
   11368:	movt	r2, #1
   1136c:	movt	r3, #1
   11370:	movt	sl, #2
   11374:	ldr	r1, [r8, r7, lsl #2]
   11378:	ldrb	r0, [r1]
   1137c:	cmp	r0, #45	; 0x2d
   11380:	bne	113c0 <__assert_fail@plt+0x48c>
   11384:	mov	r0, r1
   11388:	ldrb	r5, [r0, #1]!
   1138c:	sub	r5, r5, #43	; 0x2b
   11390:	tst	r5, #253	; 0xfd
   11394:	mov	r5, #1
   11398:	movweq	r5, #2
   1139c:	ldrb	r1, [r1, r5]
   113a0:	sub	r1, r1, #48	; 0x30
   113a4:	cmp	r1, #9
   113a8:	bhi	113c0 <__assert_fail@plt+0x48c>
   113ac:	add	r7, r7, #1
   113b0:	mov	r4, r0
   113b4:	cmp	r7, r9
   113b8:	blt	11374 <__assert_fail@plt+0x440>
   113bc:	b	114a8 <__assert_fail@plt+0x574>
   113c0:	ldr	r0, [r8]
   113c4:	sub	r7, r7, #1
   113c8:	mov	r5, r8
   113cc:	mov	r6, r9
   113d0:	str	r0, [r8, r7, lsl #2]!
   113d4:	sub	r0, r9, r7
   113d8:	str	ip, [sl]
   113dc:	str	ip, [sp]
   113e0:	mov	r9, r2
   113e4:	mov	r1, r8
   113e8:	mov	r8, r3
   113ec:	bl	10e44 <getopt_long@plt>
   113f0:	ldr	r1, [sl]
   113f4:	cmp	r0, #109	; 0x6d
   113f8:	add	r7, r7, r1
   113fc:	ble	11498 <__assert_fail@plt+0x564>
   11400:	cmp	r0, #110	; 0x6e
   11404:	bne	1164c <__assert_fail@plt+0x718>
   11408:	movw	r0, #28984	; 0x7138
   1140c:	mov	r2, r9
   11410:	mov	r3, r8
   11414:	mov	ip, #0
   11418:	mov	r8, r5
   1141c:	mov	r9, r6
   11420:	movt	r0, #2
   11424:	ldr	r4, [r0]
   11428:	cmp	r7, r9
   1142c:	blt	11374 <__assert_fail@plt+0x440>
   11430:	b	114a8 <__assert_fail@plt+0x574>
   11434:	mov	r0, #0
   11438:	cmp	r7, r9
   1143c:	bne	114f8 <__assert_fail@plt+0x5c4>
   11440:	cmp	r0, #0
   11444:	bne	11654 <__assert_fail@plt+0x720>
   11448:	bl	10e8c <__errno_location@plt>
   1144c:	mov	r6, #0
   11450:	mov	r4, r0
   11454:	mov	r1, #0
   11458:	str	r6, [r0]
   1145c:	mov	r0, #0
   11460:	bl	10d9c <getpriority@plt>
   11464:	mov	r2, r0
   11468:	cmn	r0, #1
   1146c:	bne	1147c <__assert_fail@plt+0x548>
   11470:	ldr	r4, [r4]
   11474:	cmp	r4, #0
   11478:	bne	116b4 <__assert_fail@plt+0x780>
   1147c:	movw	r1, #22633	; 0x5869
   11480:	mov	r0, #1
   11484:	movt	r1, #1
   11488:	bl	10eb0 <__printf_chk@plt>
   1148c:	mov	r0, r6
   11490:	sub	sp, fp, #28
   11494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11498:	cmn	r0, #1
   1149c:	mov	r8, r5
   114a0:	mov	r9, r6
   114a4:	bne	115ec <__assert_fail@plt+0x6b8>
   114a8:	cmp	r4, #0
   114ac:	beq	115d8 <__assert_fail@plt+0x6a4>
   114b0:	movw	r0, #23042	; 0x5a02
   114b4:	add	r3, sp, #8
   114b8:	mov	r1, #0
   114bc:	mov	r2, #10
   114c0:	movt	r0, #1
   114c4:	str	r0, [sp]
   114c8:	mov	r0, r4
   114cc:	bl	14424 <__assert_fail@plt+0x34f0>
   114d0:	cmp	r0, #2
   114d4:	bcs	11680 <__assert_fail@plt+0x74c>
   114d8:	ldr	r4, [sp, #8]
   114dc:	mov	r0, #1
   114e0:	cmp	r4, #39	; 0x27
   114e4:	movge	r4, #39	; 0x27
   114e8:	cmn	r4, #39	; 0x27
   114ec:	mvnle	r4, #38	; 0x26
   114f0:	cmp	r7, r9
   114f4:	beq	11440 <__assert_fail@plt+0x50c>
   114f8:	bl	10e8c <__errno_location@plt>
   114fc:	mov	r5, r0
   11500:	mov	r0, #0
   11504:	mov	r1, #0
   11508:	str	r0, [r5]
   1150c:	mov	r0, #0
   11510:	bl	10d9c <getpriority@plt>
   11514:	cmn	r0, #1
   11518:	bne	11528 <__assert_fail@plt+0x5f4>
   1151c:	ldr	r6, [r5]
   11520:	cmp	r6, #0
   11524:	bne	116d8 <__assert_fail@plt+0x7a4>
   11528:	add	r2, r0, r4
   1152c:	mov	r0, #0
   11530:	mov	r1, #0
   11534:	bl	10e08 <setpriority@plt>
   11538:	cmp	r0, #0
   1153c:	beq	11590 <__assert_fail@plt+0x65c>
   11540:	movw	r1, #22637	; 0x586d
   11544:	ldr	r6, [r5]
   11548:	mov	r0, #0
   1154c:	mov	r2, #5
   11550:	movt	r1, #1
   11554:	bl	10d84 <dcgettext@plt>
   11558:	subs	r1, r6, #1
   1155c:	mov	r2, r0
   11560:	movwne	r1, #125	; 0x7d
   11564:	subs	r0, r6, #13
   11568:	movne	r0, r1
   1156c:	mov	r1, r6
   11570:	bl	10dfc <error@plt>
   11574:	movw	r0, #28976	; 0x7130
   11578:	mov	r6, #125	; 0x7d
   1157c:	movt	r0, #2
   11580:	ldr	r0, [r0]
   11584:	ldrb	r0, [r0]
   11588:	tst	r0, #32
   1158c:	bne	115cc <__assert_fail@plt+0x698>
   11590:	ldr	r0, [r8, r7, lsl #2]!
   11594:	mov	r1, r8
   11598:	bl	10d6c <execvp@plt>
   1159c:	ldr	r0, [r8]
   115a0:	ldr	r4, [r5]
   115a4:	bl	137cc <__assert_fail@plt+0x2898>
   115a8:	movw	r2, #23207	; 0x5aa7
   115ac:	mov	r3, r0
   115b0:	mov	r0, #0
   115b4:	mov	r1, r4
   115b8:	movt	r2, #1
   115bc:	bl	10dfc <error@plt>
   115c0:	cmp	r4, #2
   115c4:	mov	r6, #126	; 0x7e
   115c8:	movweq	r6, #127	; 0x7f
   115cc:	mov	r0, r6
   115d0:	sub	sp, fp, #28
   115d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115d8:	mov	r0, #0
   115dc:	mov	r4, #10
   115e0:	cmp	r7, r9
   115e4:	beq	11440 <__assert_fail@plt+0x50c>
   115e8:	b	114f8 <__assert_fail@plt+0x5c4>
   115ec:	cmn	r0, #3
   115f0:	bne	1163c <__assert_fail@plt+0x708>
   115f4:	movw	r0, #28888	; 0x70d8
   115f8:	movw	r2, #22532	; 0x5804
   115fc:	mov	r1, #0
   11600:	movt	r0, #2
   11604:	movt	r2, #1
   11608:	str	r1, [sp, #4]
   1160c:	movw	r1, #22485	; 0x57d5
   11610:	movt	r1, #1
   11614:	ldr	r3, [r0]
   11618:	movw	r0, #28980	; 0x7134
   1161c:	str	r2, [sp]
   11620:	movw	r2, #22518	; 0x57f6
   11624:	movt	r0, #2
   11628:	movt	r2, #1
   1162c:	ldr	r0, [r0]
   11630:	bl	13c70 <__assert_fail@plt+0x2d3c>
   11634:	mov	r0, #0
   11638:	bl	10e5c <exit@plt>
   1163c:	cmn	r0, #2
   11640:	bne	1164c <__assert_fail@plt+0x718>
   11644:	mov	r0, #0
   11648:	bl	11030 <__assert_fail@plt+0xfc>
   1164c:	mov	r0, #125	; 0x7d
   11650:	bl	11030 <__assert_fail@plt+0xfc>
   11654:	movw	r1, #22570	; 0x582a
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #1
   11664:	bl	10d84 <dcgettext@plt>
   11668:	mov	r2, r0
   1166c:	mov	r0, #0
   11670:	mov	r1, #0
   11674:	bl	10dfc <error@plt>
   11678:	mov	r0, #125	; 0x7d
   1167c:	bl	11030 <__assert_fail@plt+0xfc>
   11680:	movw	r1, #22548	; 0x5814
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	10d84 <dcgettext@plt>
   11694:	mov	r5, r0
   11698:	mov	r0, r4
   1169c:	bl	137cc <__assert_fail@plt+0x2898>
   116a0:	mov	r3, r0
   116a4:	mov	r0, #125	; 0x7d
   116a8:	mov	r1, #0
   116ac:	mov	r2, r5
   116b0:	bl	10dfc <error@plt>
   116b4:	movw	r1, #22613	; 0x5855
   116b8:	mov	r0, #0
   116bc:	mov	r2, #5
   116c0:	movt	r1, #1
   116c4:	bl	10d84 <dcgettext@plt>
   116c8:	mov	r2, r0
   116cc:	mov	r0, #125	; 0x7d
   116d0:	mov	r1, r4
   116d4:	bl	10dfc <error@plt>
   116d8:	movw	r1, #22613	; 0x5855
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	movt	r1, #1
   116e8:	bl	10d84 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	mov	r0, #125	; 0x7d
   116f4:	mov	r1, r6
   116f8:	bl	10dfc <error@plt>
   116fc:	movw	r1, #28992	; 0x7140
   11700:	movt	r1, #2
   11704:	str	r0, [r1, #4]
   11708:	bx	lr
   1170c:	movw	r1, #28992	; 0x7140
   11710:	movt	r1, #2
   11714:	strb	r0, [r1]
   11718:	bx	lr
   1171c:	push	{r4, r5, r6, sl, fp, lr}
   11720:	add	fp, sp, #16
   11724:	sub	sp, sp, #8
   11728:	movw	r0, #28980	; 0x7134
   1172c:	movt	r0, #2
   11730:	ldr	r0, [r0]
   11734:	bl	15088 <__assert_fail@plt+0x4154>
   11738:	cmp	r0, #0
   1173c:	beq	11764 <__assert_fail@plt+0x830>
   11740:	movw	r5, #28992	; 0x7140
   11744:	movt	r5, #2
   11748:	ldrb	r0, [r5]
   1174c:	cmp	r0, #0
   11750:	beq	11790 <__assert_fail@plt+0x85c>
   11754:	bl	10e8c <__errno_location@plt>
   11758:	ldr	r0, [r0]
   1175c:	cmp	r0, #32
   11760:	bne	11790 <__assert_fail@plt+0x85c>
   11764:	movw	r0, #28976	; 0x7130
   11768:	movt	r0, #2
   1176c:	ldr	r0, [r0]
   11770:	bl	15088 <__assert_fail@plt+0x4154>
   11774:	cmp	r0, #0
   11778:	subeq	sp, fp, #16
   1177c:	popeq	{r4, r5, r6, sl, fp, pc}
   11780:	movw	r0, #28892	; 0x70dc
   11784:	movt	r0, #2
   11788:	ldr	r0, [r0]
   1178c:	bl	10d54 <_exit@plt>
   11790:	movw	r1, #23191	; 0x5a97
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	10d84 <dcgettext@plt>
   117a4:	ldr	r6, [r5, #4]
   117a8:	mov	r4, r0
   117ac:	bl	10e8c <__errno_location@plt>
   117b0:	ldr	r5, [r0]
   117b4:	cmp	r6, #0
   117b8:	bne	117d4 <__assert_fail@plt+0x8a0>
   117bc:	movw	r2, #23207	; 0x5aa7
   117c0:	mov	r0, #0
   117c4:	mov	r1, r5
   117c8:	mov	r3, r4
   117cc:	movt	r2, #1
   117d0:	b	117f4 <__assert_fail@plt+0x8c0>
   117d4:	mov	r0, r6
   117d8:	bl	13444 <__assert_fail@plt+0x2510>
   117dc:	movw	r2, #23203	; 0x5aa3
   117e0:	mov	r3, r0
   117e4:	str	r4, [sp]
   117e8:	mov	r0, #0
   117ec:	mov	r1, r5
   117f0:	movt	r2, #1
   117f4:	bl	10dfc <error@plt>
   117f8:	movw	r0, #28892	; 0x70dc
   117fc:	movt	r0, #2
   11800:	ldr	r0, [r0]
   11804:	bl	10d54 <_exit@plt>
   11808:	push	{r4, r5, fp, lr}
   1180c:	add	fp, sp, #8
   11810:	cmp	r0, #0
   11814:	beq	118a8 <__assert_fail@plt+0x974>
   11818:	mov	r1, #47	; 0x2f
   1181c:	mov	r4, r0
   11820:	bl	10ef8 <strrchr@plt>
   11824:	cmp	r0, #0
   11828:	mov	r5, r4
   1182c:	addne	r5, r0, #1
   11830:	sub	r0, r5, r4
   11834:	cmp	r0, #7
   11838:	blt	1188c <__assert_fail@plt+0x958>
   1183c:	movw	r1, #23266	; 0x5ae2
   11840:	sub	r0, r5, #7
   11844:	mov	r2, #7
   11848:	movt	r1, #1
   1184c:	bl	10f1c <strncmp@plt>
   11850:	cmp	r0, #0
   11854:	bne	1188c <__assert_fail@plt+0x958>
   11858:	movw	r1, #23274	; 0x5aea
   1185c:	mov	r0, r5
   11860:	mov	r2, #3
   11864:	movt	r1, #1
   11868:	bl	10f1c <strncmp@plt>
   1186c:	cmp	r0, #0
   11870:	beq	1187c <__assert_fail@plt+0x948>
   11874:	mov	r4, r5
   11878:	b	1188c <__assert_fail@plt+0x958>
   1187c:	movw	r0, #28960	; 0x7120
   11880:	add	r4, r5, #3
   11884:	movt	r0, #2
   11888:	str	r4, [r0]
   1188c:	movw	r0, #28964	; 0x7124
   11890:	movt	r0, #2
   11894:	str	r4, [r0]
   11898:	movw	r0, #29000	; 0x7148
   1189c:	movt	r0, #2
   118a0:	str	r4, [r0]
   118a4:	pop	{r4, r5, fp, pc}
   118a8:	movw	r0, #28976	; 0x7130
   118ac:	mov	r1, #55	; 0x37
   118b0:	mov	r2, #1
   118b4:	movt	r0, #2
   118b8:	ldr	r3, [r0]
   118bc:	movw	r0, #23210	; 0x5aaa
   118c0:	movt	r0, #1
   118c4:	bl	10dc0 <fwrite@plt>
   118c8:	bl	10f28 <abort@plt>
   118cc:	push	{r4, r5, r6, sl, fp, lr}
   118d0:	add	fp, sp, #16
   118d4:	mov	r4, r0
   118d8:	movw	r0, #29008	; 0x7150
   118dc:	movt	r0, #2
   118e0:	cmp	r4, #0
   118e4:	moveq	r4, r0
   118e8:	bl	10e8c <__errno_location@plt>
   118ec:	ldr	r6, [r0]
   118f0:	mov	r5, r0
   118f4:	mov	r0, r4
   118f8:	mov	r1, #48	; 0x30
   118fc:	bl	14304 <__assert_fail@plt+0x33d0>
   11900:	str	r6, [r5]
   11904:	pop	{r4, r5, r6, sl, fp, pc}
   11908:	movw	r1, #29008	; 0x7150
   1190c:	cmp	r0, #0
   11910:	movt	r1, #2
   11914:	movne	r1, r0
   11918:	ldr	r0, [r1]
   1191c:	bx	lr
   11920:	movw	r2, #29008	; 0x7150
   11924:	cmp	r0, #0
   11928:	movt	r2, #2
   1192c:	movne	r2, r0
   11930:	str	r1, [r2]
   11934:	bx	lr
   11938:	movw	r3, #29008	; 0x7150
   1193c:	cmp	r0, #0
   11940:	and	r2, r2, #1
   11944:	movt	r3, #2
   11948:	movne	r3, r0
   1194c:	ubfx	r0, r1, #5, #3
   11950:	and	r1, r1, #31
   11954:	add	ip, r3, r0, lsl #2
   11958:	mov	r0, #1
   1195c:	ldr	r3, [ip, #8]
   11960:	and	r0, r0, r3, lsr r1
   11964:	eor	r2, r0, r2
   11968:	eor	r1, r3, r2, lsl r1
   1196c:	str	r1, [ip, #8]
   11970:	bx	lr
   11974:	movw	r2, #29008	; 0x7150
   11978:	cmp	r0, #0
   1197c:	movt	r2, #2
   11980:	movne	r2, r0
   11984:	ldr	r0, [r2, #4]
   11988:	str	r1, [r2, #4]
   1198c:	bx	lr
   11990:	push	{fp, lr}
   11994:	mov	fp, sp
   11998:	movw	r3, #29008	; 0x7150
   1199c:	cmp	r0, #0
   119a0:	movt	r3, #2
   119a4:	movne	r3, r0
   119a8:	cmp	r1, #0
   119ac:	mov	r0, #10
   119b0:	cmpne	r2, #0
   119b4:	str	r0, [r3]
   119b8:	bne	119c0 <__assert_fail@plt+0xa8c>
   119bc:	bl	10f28 <abort@plt>
   119c0:	str	r1, [r3, #40]	; 0x28
   119c4:	str	r2, [r3, #44]	; 0x2c
   119c8:	pop	{fp, pc}
   119cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d0:	add	fp, sp, #28
   119d4:	sub	sp, sp, #20
   119d8:	mov	r7, r0
   119dc:	ldr	r0, [fp, #8]
   119e0:	movw	r5, #29008	; 0x7150
   119e4:	mov	r8, r3
   119e8:	mov	r9, r2
   119ec:	mov	sl, r1
   119f0:	movt	r5, #2
   119f4:	cmp	r0, #0
   119f8:	movne	r5, r0
   119fc:	bl	10e8c <__errno_location@plt>
   11a00:	ldr	r2, [r5, #40]	; 0x28
   11a04:	ldr	r3, [r5, #44]	; 0x2c
   11a08:	mov	r4, r0
   11a0c:	ldm	r5, {r0, r1}
   11a10:	add	r5, r5, #8
   11a14:	ldr	r6, [r4]
   11a18:	stm	sp, {r0, r1, r5}
   11a1c:	mov	r0, r7
   11a20:	mov	r1, sl
   11a24:	str	r2, [sp, #12]
   11a28:	str	r3, [sp, #16]
   11a2c:	mov	r2, r9
   11a30:	mov	r3, r8
   11a34:	bl	11a44 <__assert_fail@plt+0xb10>
   11a38:	str	r6, [r4]
   11a3c:	sub	sp, fp, #28
   11a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a48:	add	fp, sp, #28
   11a4c:	sub	sp, sp, #156	; 0x9c
   11a50:	str	r0, [fp, #-84]	; 0xffffffac
   11a54:	add	r0, r2, #1
   11a58:	mov	r6, r1
   11a5c:	mov	r7, r3
   11a60:	str	r2, [fp, #-80]	; 0xffffffb0
   11a64:	str	r0, [sp, #80]	; 0x50
   11a68:	ldr	r0, [fp, #12]
   11a6c:	and	r1, r0, #1
   11a70:	str	r1, [sp, #36]	; 0x24
   11a74:	and	r1, r0, #4
   11a78:	str	r1, [sp, #32]
   11a7c:	ubfx	r8, r0, #1, #1
   11a80:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   11a84:	str	r0, [sp, #40]	; 0x28
   11a88:	ldr	r0, [fp, #24]
   11a8c:	ldr	r4, [fp, #8]
   11a90:	mov	r1, #0
   11a94:	str	r1, [fp, #-52]	; 0xffffffcc
   11a98:	mov	r1, #0
   11a9c:	str	r1, [sp, #60]	; 0x3c
   11aa0:	mov	r1, #1
   11aa4:	str	r1, [sp, #84]	; 0x54
   11aa8:	str	r0, [sp, #76]	; 0x4c
   11aac:	ldr	r0, [fp, #20]
   11ab0:	str	r0, [sp, #72]	; 0x48
   11ab4:	mov	r0, #0
   11ab8:	str	r0, [sp, #56]	; 0x38
   11abc:	mov	r0, #0
   11ac0:	str	r0, [fp, #-88]	; 0xffffffa8
   11ac4:	mov	r0, #0
   11ac8:	str	r0, [fp, #-72]	; 0xffffffb8
   11acc:	mov	r0, #0
   11ad0:	cmp	r4, #10
   11ad4:	bhi	12df0 <__assert_fail@plt+0x1ebc>
   11ad8:	add	r1, pc, #24
   11adc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ae0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11ae4:	mov	r5, r6
   11ae8:	mov	r9, #0
   11aec:	mov	r2, #1
   11af0:	mov	r3, #0
   11af4:	ldr	pc, [r1, r4, lsl #2]
   11af8:	andeq	r1, r1, r0, asr #23
   11afc:	strdeq	r1, [r1], -ip
   11b00:	ldrdeq	r1, [r1], -r0
   11b04:			; <UNDEFINED> instruction: 0x00011bb8
   11b08:	strdeq	r1, [r1], -r0
   11b0c:	andeq	r1, r1, r4, asr ip
   11b10:	andeq	r1, r1, r0, ror #23
   11b14:	andeq	r1, r1, ip, asr #29
   11b18:	andeq	r1, r1, r4, lsr #22
   11b1c:	andeq	r1, r1, r4, lsr #22
   11b20:	andeq	r1, r1, ip, asr sp
   11b24:	movw	r6, #23356	; 0x5b3c
   11b28:	mov	r0, #0
   11b2c:	mov	r2, #5
   11b30:	movt	r6, #1
   11b34:	mov	r1, r6
   11b38:	bl	10d84 <dcgettext@plt>
   11b3c:	cmp	r0, r6
   11b40:	str	r0, [sp, #72]	; 0x48
   11b44:	bne	11d34 <__assert_fail@plt+0xe00>
   11b48:	bl	152d4 <__assert_fail@plt+0x43a0>
   11b4c:	ldrb	r1, [r0]
   11b50:	and	r1, r1, #223	; 0xdf
   11b54:	cmp	r1, #71	; 0x47
   11b58:	beq	11cb4 <__assert_fail@plt+0xd80>
   11b5c:	cmp	r1, #85	; 0x55
   11b60:	bne	11d18 <__assert_fail@plt+0xde4>
   11b64:	ldrb	r1, [r0, #1]
   11b68:	and	r1, r1, #223	; 0xdf
   11b6c:	cmp	r1, #84	; 0x54
   11b70:	bne	11d18 <__assert_fail@plt+0xde4>
   11b74:	ldrb	r1, [r0, #2]
   11b78:	and	r1, r1, #223	; 0xdf
   11b7c:	cmp	r1, #70	; 0x46
   11b80:	bne	11d18 <__assert_fail@plt+0xde4>
   11b84:	ldrb	r1, [r0, #3]
   11b88:	cmp	r1, #45	; 0x2d
   11b8c:	bne	11d18 <__assert_fail@plt+0xde4>
   11b90:	ldrb	r1, [r0, #4]
   11b94:	cmp	r1, #56	; 0x38
   11b98:	bne	11d18 <__assert_fail@plt+0xde4>
   11b9c:	ldrb	r0, [r0, #5]
   11ba0:	cmp	r0, #0
   11ba4:	movw	r0, #23360	; 0x5b40
   11ba8:	movt	r0, #1
   11bac:	str	r0, [sp, #72]	; 0x48
   11bb0:	bne	11d18 <__assert_fail@plt+0xde4>
   11bb4:	b	11d34 <__assert_fail@plt+0xe00>
   11bb8:	mov	r0, #1
   11bbc:	b	11bfc <__assert_fail@plt+0xcc8>
   11bc0:	mov	r4, #0
   11bc4:	mov	r9, #0
   11bc8:	mov	r2, r0
   11bcc:	b	11c4c <__assert_fail@plt+0xd18>
   11bd0:	tst	r8, #1
   11bd4:	bne	11bfc <__assert_fail@plt+0xcc8>
   11bd8:	mov	r2, r0
   11bdc:	b	11c24 <__assert_fail@plt+0xcf0>
   11be0:	mov	r0, #1
   11be4:	mov	r9, #0
   11be8:	mov	r4, #5
   11bec:	b	11c68 <__assert_fail@plt+0xd34>
   11bf0:	mov	r2, #1
   11bf4:	tst	r8, #1
   11bf8:	beq	11c24 <__assert_fail@plt+0xcf0>
   11bfc:	mov	r1, #1
   11c00:	mov	r9, #0
   11c04:	mov	r4, #2
   11c08:	mov	r2, r0
   11c0c:	mov	r3, #1
   11c10:	str	r1, [fp, #-72]	; 0xffffffb8
   11c14:	movw	r1, #23358	; 0x5b3e
   11c18:	movt	r1, #1
   11c1c:	str	r1, [fp, #-88]	; 0xffffffa8
   11c20:	b	11ecc <__assert_fail@plt+0xf98>
   11c24:	cmp	r5, #0
   11c28:	mov	r9, #1
   11c2c:	mov	r4, #2
   11c30:	movne	r0, #39	; 0x27
   11c34:	strbne	r0, [ip]
   11c38:	movw	r0, #23358	; 0x5b3e
   11c3c:	movt	r0, #1
   11c40:	str	r0, [fp, #-88]	; 0xffffffa8
   11c44:	mov	r0, #1
   11c48:	str	r0, [fp, #-72]	; 0xffffffb8
   11c4c:	mov	r3, #0
   11c50:	b	11ecc <__assert_fail@plt+0xf98>
   11c54:	mov	r4, #5
   11c58:	tst	r8, #1
   11c5c:	beq	11c84 <__assert_fail@plt+0xd50>
   11c60:	mov	r0, #1
   11c64:	mov	r9, #0
   11c68:	str	r0, [fp, #-72]	; 0xffffffb8
   11c6c:	movw	r0, #23354	; 0x5b3a
   11c70:	mov	r2, #1
   11c74:	mov	r3, #1
   11c78:	movt	r0, #1
   11c7c:	str	r0, [fp, #-88]	; 0xffffffa8
   11c80:	b	11ecc <__assert_fail@plt+0xf98>
   11c84:	cmp	r5, #0
   11c88:	mov	r3, #0
   11c8c:	mov	r9, #1
   11c90:	mov	r2, #1
   11c94:	movne	r0, #34	; 0x22
   11c98:	strbne	r0, [ip]
   11c9c:	movw	r0, #23354	; 0x5b3a
   11ca0:	movt	r0, #1
   11ca4:	str	r0, [fp, #-88]	; 0xffffffa8
   11ca8:	mov	r0, #1
   11cac:	str	r0, [fp, #-72]	; 0xffffffb8
   11cb0:	b	11ecc <__assert_fail@plt+0xf98>
   11cb4:	ldrb	r1, [r0, #1]
   11cb8:	and	r1, r1, #223	; 0xdf
   11cbc:	cmp	r1, #66	; 0x42
   11cc0:	bne	11d18 <__assert_fail@plt+0xde4>
   11cc4:	ldrb	r1, [r0, #2]
   11cc8:	cmp	r1, #49	; 0x31
   11ccc:	bne	11d18 <__assert_fail@plt+0xde4>
   11cd0:	ldrb	r1, [r0, #3]
   11cd4:	cmp	r1, #56	; 0x38
   11cd8:	bne	11d18 <__assert_fail@plt+0xde4>
   11cdc:	ldrb	r1, [r0, #4]
   11ce0:	cmp	r1, #48	; 0x30
   11ce4:	bne	11d18 <__assert_fail@plt+0xde4>
   11ce8:	ldrb	r1, [r0, #5]
   11cec:	cmp	r1, #51	; 0x33
   11cf0:	bne	11d18 <__assert_fail@plt+0xde4>
   11cf4:	ldrb	r1, [r0, #6]
   11cf8:	cmp	r1, #48	; 0x30
   11cfc:	bne	11d18 <__assert_fail@plt+0xde4>
   11d00:	ldrb	r0, [r0, #7]
   11d04:	cmp	r0, #0
   11d08:	movw	r0, #23368	; 0x5b48
   11d0c:	movt	r0, #1
   11d10:	str	r0, [sp, #72]	; 0x48
   11d14:	beq	11d34 <__assert_fail@plt+0xe00>
   11d18:	movw	r1, #23354	; 0x5b3a
   11d1c:	movw	r0, #23358	; 0x5b3e
   11d20:	cmp	r4, #9
   11d24:	movt	r1, #1
   11d28:	movt	r0, #1
   11d2c:	moveq	r0, r1
   11d30:	str	r0, [sp, #72]	; 0x48
   11d34:	movw	r6, #23358	; 0x5b3e
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	movt	r6, #1
   11d44:	mov	r1, r6
   11d48:	bl	10d84 <dcgettext@plt>
   11d4c:	cmp	r0, r6
   11d50:	str	r0, [sp, #76]	; 0x4c
   11d54:	beq	11da0 <__assert_fail@plt+0xe6c>
   11d58:	ldr	ip, [fp, #-84]	; 0xffffffac
   11d5c:	mov	r9, #0
   11d60:	tst	r8, #1
   11d64:	bne	11ea8 <__assert_fail@plt+0xf74>
   11d68:	ldr	r0, [sp, #72]	; 0x48
   11d6c:	ldrb	r0, [r0]
   11d70:	cmp	r0, #0
   11d74:	beq	11ea8 <__assert_fail@plt+0xf74>
   11d78:	ldr	r1, [sp, #72]	; 0x48
   11d7c:	mov	r9, #0
   11d80:	add	r1, r1, #1
   11d84:	cmp	r9, r5
   11d88:	strbcc	r0, [ip, r9]
   11d8c:	ldrb	r0, [r1, r9]
   11d90:	add	r9, r9, #1
   11d94:	cmp	r0, #0
   11d98:	bne	11d84 <__assert_fail@plt+0xe50>
   11d9c:	b	11ea8 <__assert_fail@plt+0xf74>
   11da0:	bl	152d4 <__assert_fail@plt+0x43a0>
   11da4:	ldrb	r1, [r0]
   11da8:	and	r1, r1, #223	; 0xdf
   11dac:	cmp	r1, #71	; 0x47
   11db0:	beq	11e20 <__assert_fail@plt+0xeec>
   11db4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11db8:	cmp	r1, #85	; 0x55
   11dbc:	bne	11e7c <__assert_fail@plt+0xf48>
   11dc0:	ldrb	r1, [r0, #1]
   11dc4:	and	r1, r1, #223	; 0xdf
   11dc8:	cmp	r1, #84	; 0x54
   11dcc:	bne	11e7c <__assert_fail@plt+0xf48>
   11dd0:	ldrb	r1, [r0, #2]
   11dd4:	and	r1, r1, #223	; 0xdf
   11dd8:	cmp	r1, #70	; 0x46
   11ddc:	bne	11e7c <__assert_fail@plt+0xf48>
   11de0:	ldrb	r1, [r0, #3]
   11de4:	cmp	r1, #45	; 0x2d
   11de8:	bne	11e7c <__assert_fail@plt+0xf48>
   11dec:	ldrb	r1, [r0, #4]
   11df0:	cmp	r1, #56	; 0x38
   11df4:	bne	11e7c <__assert_fail@plt+0xf48>
   11df8:	ldrb	r0, [r0, #5]
   11dfc:	cmp	r0, #0
   11e00:	bne	11e7c <__assert_fail@plt+0xf48>
   11e04:	movw	r0, #23364	; 0x5b44
   11e08:	movt	r0, #1
   11e0c:	str	r0, [sp, #76]	; 0x4c
   11e10:	mov	r9, #0
   11e14:	tst	r8, #1
   11e18:	beq	11d68 <__assert_fail@plt+0xe34>
   11e1c:	b	11ea8 <__assert_fail@plt+0xf74>
   11e20:	ldrb	r1, [r0, #1]
   11e24:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e28:	and	r1, r1, #223	; 0xdf
   11e2c:	cmp	r1, #66	; 0x42
   11e30:	bne	11e7c <__assert_fail@plt+0xf48>
   11e34:	ldrb	r1, [r0, #2]
   11e38:	cmp	r1, #49	; 0x31
   11e3c:	bne	11e7c <__assert_fail@plt+0xf48>
   11e40:	ldrb	r1, [r0, #3]
   11e44:	cmp	r1, #56	; 0x38
   11e48:	bne	11e7c <__assert_fail@plt+0xf48>
   11e4c:	ldrb	r1, [r0, #4]
   11e50:	cmp	r1, #48	; 0x30
   11e54:	bne	11e7c <__assert_fail@plt+0xf48>
   11e58:	ldrb	r1, [r0, #5]
   11e5c:	cmp	r1, #51	; 0x33
   11e60:	bne	11e7c <__assert_fail@plt+0xf48>
   11e64:	ldrb	r1, [r0, #6]
   11e68:	cmp	r1, #48	; 0x30
   11e6c:	bne	11e7c <__assert_fail@plt+0xf48>
   11e70:	ldrb	r0, [r0, #7]
   11e74:	cmp	r0, #0
   11e78:	beq	12c90 <__assert_fail@plt+0x1d5c>
   11e7c:	movw	r0, #23358	; 0x5b3e
   11e80:	cmp	r4, #9
   11e84:	movt	r0, #1
   11e88:	mov	r1, r0
   11e8c:	movw	r0, #23354	; 0x5b3a
   11e90:	movt	r0, #1
   11e94:	moveq	r1, r0
   11e98:	str	r1, [sp, #76]	; 0x4c
   11e9c:	mov	r9, #0
   11ea0:	tst	r8, #1
   11ea4:	beq	11d68 <__assert_fail@plt+0xe34>
   11ea8:	ldr	r6, [sp, #76]	; 0x4c
   11eac:	mov	r0, r6
   11eb0:	bl	10e74 <strlen@plt>
   11eb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11eb8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11ebc:	str	r0, [fp, #-72]	; 0xffffffb8
   11ec0:	str	r6, [fp, #-88]	; 0xffffffa8
   11ec4:	mov	r2, #1
   11ec8:	mov	r3, r8
   11ecc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11ed0:	str	r4, [fp, #-64]	; 0xffffffc0
   11ed4:	mov	sl, #0
   11ed8:	str	r3, [fp, #-76]	; 0xffffffb4
   11edc:	str	r2, [sp, #88]	; 0x58
   11ee0:	cmp	r0, #0
   11ee4:	movwne	r0, #1
   11ee8:	and	r1, r0, r3
   11eec:	and	r1, r2, r1
   11ef0:	str	r1, [sp, #48]	; 0x30
   11ef4:	sub	r1, r4, #2
   11ef8:	clz	r1, r1
   11efc:	lsr	r1, r1, #5
   11f00:	and	r1, r1, r3
   11f04:	str	r1, [sp, #44]	; 0x2c
   11f08:	subs	r1, r4, #2
   11f0c:	eor	r4, r3, #1
   11f10:	movwne	r1, #1
   11f14:	str	r4, [sp, #92]	; 0x5c
   11f18:	orr	r4, r1, r4
   11f1c:	and	r1, r1, r2
   11f20:	and	r0, r0, r1
   11f24:	str	r4, [sp, #64]	; 0x40
   11f28:	ldr	r4, [sp, #84]	; 0x54
   11f2c:	str	r0, [fp, #-60]	; 0xffffffc4
   11f30:	orr	r0, r1, r3
   11f34:	ldr	r1, [fp, #16]
   11f38:	eor	r0, r0, #1
   11f3c:	clz	r1, r1
   11f40:	lsr	r1, r1, #5
   11f44:	orr	r0, r1, r0
   11f48:	str	r0, [fp, #-68]	; 0xffffffbc
   11f4c:	eor	r0, r2, #1
   11f50:	str	r0, [sp, #52]	; 0x34
   11f54:	cmn	r7, #1
   11f58:	beq	11f68 <__assert_fail@plt+0x1034>
   11f5c:	cmp	sl, r7
   11f60:	bne	11f74 <__assert_fail@plt+0x1040>
   11f64:	b	12c08 <__assert_fail@plt+0x1cd4>
   11f68:	ldrb	r0, [lr, sl]
   11f6c:	cmp	r0, #0
   11f70:	beq	12c10 <__assert_fail@plt+0x1cdc>
   11f74:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11f78:	cmp	r0, #0
   11f7c:	beq	11fdc <__assert_fail@plt+0x10a8>
   11f80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11f84:	mov	r6, r5
   11f88:	add	r5, sl, r0
   11f8c:	cmp	r0, #2
   11f90:	bcc	11ffc <__assert_fail@plt+0x10c8>
   11f94:	mov	r0, #0
   11f98:	cmn	r7, #1
   11f9c:	str	r0, [fp, #-56]	; 0xffffffc8
   11fa0:	bne	11fb8 <__assert_fail@plt+0x1084>
   11fa4:	mov	r0, lr
   11fa8:	bl	10e74 <strlen@plt>
   11fac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11fb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11fb4:	mov	r7, r0
   11fb8:	cmp	r5, r7
   11fbc:	bls	1200c <__assert_fail@plt+0x10d8>
   11fc0:	mov	r0, #0
   11fc4:	mov	r5, r6
   11fc8:	str	r0, [fp, #-48]	; 0xffffffd0
   11fcc:	ldrb	r6, [lr, sl]
   11fd0:	cmp	r6, #126	; 0x7e
   11fd4:	bls	1205c <__assert_fail@plt+0x1128>
   11fd8:	b	125b8 <__assert_fail@plt+0x1684>
   11fdc:	mov	r0, #0
   11fe0:	str	r0, [fp, #-56]	; 0xffffffc8
   11fe4:	mov	r0, #0
   11fe8:	str	r0, [fp, #-48]	; 0xffffffd0
   11fec:	ldrb	r6, [lr, sl]
   11ff0:	cmp	r6, #126	; 0x7e
   11ff4:	bls	1205c <__assert_fail@plt+0x1128>
   11ff8:	b	125b8 <__assert_fail@plt+0x1684>
   11ffc:	mov	r0, #0
   12000:	str	r0, [fp, #-56]	; 0xffffffc8
   12004:	cmp	r5, r7
   12008:	bhi	11fc0 <__assert_fail@plt+0x108c>
   1200c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12010:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12014:	add	r0, lr, sl
   12018:	bl	10e68 <bcmp@plt>
   1201c:	ldr	r2, [sp, #92]	; 0x5c
   12020:	cmp	r0, #0
   12024:	mov	r1, r0
   12028:	mov	r5, r6
   1202c:	movwne	r1, #1
   12030:	orr	r1, r1, r2
   12034:	tst	r1, #1
   12038:	beq	12cd0 <__assert_fail@plt+0x1d9c>
   1203c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12040:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12044:	clz	r0, r0
   12048:	lsr	r0, r0, #5
   1204c:	str	r0, [fp, #-48]	; 0xffffffd0
   12050:	ldrb	r6, [lr, sl]
   12054:	cmp	r6, #126	; 0x7e
   12058:	bhi	125b8 <__assert_fail@plt+0x1684>
   1205c:	add	r3, pc, #16
   12060:	mov	r8, #1
   12064:	mov	r2, #110	; 0x6e
   12068:	mov	r0, #97	; 0x61
   1206c:	mov	r1, #0
   12070:	ldr	pc, [r3, r6, lsl #2]
   12074:	andeq	r2, r1, r0, ror r3
   12078:			; <UNDEFINED> instruction: 0x000125b8
   1207c:			; <UNDEFINED> instruction: 0x000125b8
   12080:			; <UNDEFINED> instruction: 0x000125b8
   12084:			; <UNDEFINED> instruction: 0x000125b8
   12088:			; <UNDEFINED> instruction: 0x000125b8
   1208c:			; <UNDEFINED> instruction: 0x000125b8
   12090:	andeq	r2, r1, ip, ror #12
   12094:	andeq	r2, r1, r0, asr r3
   12098:	andeq	r2, r1, r8, asr #6
   1209c:	andeq	r2, r1, ip, asr r3
   120a0:	andeq	r2, r1, ip, lsl #9
   120a4:	andeq	r2, r1, r0, asr #6
   120a8:	andeq	r2, r1, r8, asr r3
   120ac:			; <UNDEFINED> instruction: 0x000125b8
   120b0:			; <UNDEFINED> instruction: 0x000125b8
   120b4:			; <UNDEFINED> instruction: 0x000125b8
   120b8:			; <UNDEFINED> instruction: 0x000125b8
   120bc:			; <UNDEFINED> instruction: 0x000125b8
   120c0:			; <UNDEFINED> instruction: 0x000125b8
   120c4:			; <UNDEFINED> instruction: 0x000125b8
   120c8:			; <UNDEFINED> instruction: 0x000125b8
   120cc:			; <UNDEFINED> instruction: 0x000125b8
   120d0:			; <UNDEFINED> instruction: 0x000125b8
   120d4:			; <UNDEFINED> instruction: 0x000125b8
   120d8:			; <UNDEFINED> instruction: 0x000125b8
   120dc:			; <UNDEFINED> instruction: 0x000125b8
   120e0:			; <UNDEFINED> instruction: 0x000125b8
   120e4:			; <UNDEFINED> instruction: 0x000125b8
   120e8:			; <UNDEFINED> instruction: 0x000125b8
   120ec:			; <UNDEFINED> instruction: 0x000125b8
   120f0:			; <UNDEFINED> instruction: 0x000125b8
   120f4:	andeq	r2, r1, r4, ror #5
   120f8:	andeq	r2, r1, r8, ror #5
   120fc:	andeq	r2, r1, r8, ror #5
   12100:	ldrdeq	r2, [r1], -r8
   12104:	andeq	r2, r1, r8, ror #5
   12108:	andeq	r2, r1, r0, ror r2
   1210c:	andeq	r2, r1, r8, ror #5
   12110:	muleq	r1, r4, r4
   12114:	andeq	r2, r1, r8, ror #5
   12118:	andeq	r2, r1, r8, ror #5
   1211c:	andeq	r2, r1, r8, ror #5
   12120:	andeq	r2, r1, r0, ror r2
   12124:	andeq	r2, r1, r0, ror r2
   12128:	andeq	r2, r1, r0, ror r2
   1212c:	andeq	r2, r1, r0, ror r2
   12130:	andeq	r2, r1, r0, ror r2
   12134:	andeq	r2, r1, r0, ror r2
   12138:	andeq	r2, r1, r0, ror r2
   1213c:	andeq	r2, r1, r0, ror r2
   12140:	andeq	r2, r1, r0, ror r2
   12144:	andeq	r2, r1, r0, ror r2
   12148:	andeq	r2, r1, r0, ror r2
   1214c:	andeq	r2, r1, r0, ror r2
   12150:	andeq	r2, r1, r0, ror r2
   12154:	andeq	r2, r1, r0, ror r2
   12158:	andeq	r2, r1, r0, ror r2
   1215c:	andeq	r2, r1, r0, ror r2
   12160:	andeq	r2, r1, r8, ror #5
   12164:	andeq	r2, r1, r8, ror #5
   12168:	andeq	r2, r1, r8, ror #5
   1216c:	andeq	r2, r1, r8, ror #5
   12170:	andeq	r2, r1, r8, asr r4
   12174:			; <UNDEFINED> instruction: 0x000125b8
   12178:	andeq	r2, r1, r0, ror r2
   1217c:	andeq	r2, r1, r0, ror r2
   12180:	andeq	r2, r1, r0, ror r2
   12184:	andeq	r2, r1, r0, ror r2
   12188:	andeq	r2, r1, r0, ror r2
   1218c:	andeq	r2, r1, r0, ror r2
   12190:	andeq	r2, r1, r0, ror r2
   12194:	andeq	r2, r1, r0, ror r2
   12198:	andeq	r2, r1, r0, ror r2
   1219c:	andeq	r2, r1, r0, ror r2
   121a0:	andeq	r2, r1, r0, ror r2
   121a4:	andeq	r2, r1, r0, ror r2
   121a8:	andeq	r2, r1, r0, ror r2
   121ac:	andeq	r2, r1, r0, ror r2
   121b0:	andeq	r2, r1, r0, ror r2
   121b4:	andeq	r2, r1, r0, ror r2
   121b8:	andeq	r2, r1, r0, ror r2
   121bc:	andeq	r2, r1, r0, ror r2
   121c0:	andeq	r2, r1, r0, ror r2
   121c4:	andeq	r2, r1, r0, ror r2
   121c8:	andeq	r2, r1, r0, ror r2
   121cc:	andeq	r2, r1, r0, ror r2
   121d0:	andeq	r2, r1, r0, ror r2
   121d4:	andeq	r2, r1, r0, ror r2
   121d8:	andeq	r2, r1, r0, ror r2
   121dc:	andeq	r2, r1, r0, ror r2
   121e0:	andeq	r2, r1, r8, ror #5
   121e4:	andeq	r2, r1, ip, lsl r3
   121e8:	andeq	r2, r1, r0, ror r2
   121ec:	andeq	r2, r1, r8, ror #5
   121f0:	andeq	r2, r1, r0, ror r2
   121f4:	andeq	r2, r1, r8, ror #5
   121f8:	andeq	r2, r1, r0, ror r2
   121fc:	andeq	r2, r1, r0, ror r2
   12200:	andeq	r2, r1, r0, ror r2
   12204:	andeq	r2, r1, r0, ror r2
   12208:	andeq	r2, r1, r0, ror r2
   1220c:	andeq	r2, r1, r0, ror r2
   12210:	andeq	r2, r1, r0, ror r2
   12214:	andeq	r2, r1, r0, ror r2
   12218:	andeq	r2, r1, r0, ror r2
   1221c:	andeq	r2, r1, r0, ror r2
   12220:	andeq	r2, r1, r0, ror r2
   12224:	andeq	r2, r1, r0, ror r2
   12228:	andeq	r2, r1, r0, ror r2
   1222c:	andeq	r2, r1, r0, ror r2
   12230:	andeq	r2, r1, r0, ror r2
   12234:	andeq	r2, r1, r0, ror r2
   12238:	andeq	r2, r1, r0, ror r2
   1223c:	andeq	r2, r1, r0, ror r2
   12240:	andeq	r2, r1, r0, ror r2
   12244:	andeq	r2, r1, r0, ror r2
   12248:	andeq	r2, r1, r0, ror r2
   1224c:	andeq	r2, r1, r0, ror r2
   12250:	andeq	r2, r1, r0, ror r2
   12254:	andeq	r2, r1, r0, ror r2
   12258:	andeq	r2, r1, r0, ror r2
   1225c:	andeq	r2, r1, r0, ror r2
   12260:			; <UNDEFINED> instruction: 0x000122b0
   12264:	andeq	r2, r1, r8, ror #5
   12268:			; <UNDEFINED> instruction: 0x000122b0
   1226c:	ldrdeq	r2, [r1], -r8
   12270:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12274:	tst	r0, #1
   12278:	bne	12530 <__assert_fail@plt+0x15fc>
   1227c:	ldr	r1, [fp, #16]
   12280:	ubfx	r0, r6, #5, #3
   12284:	mov	r2, #1
   12288:	ldr	r0, [r1, r0, lsl #2]
   1228c:	and	r1, r6, #31
   12290:	tst	r0, r2, lsl r1
   12294:	beq	12530 <__assert_fail@plt+0x15fc>
   12298:	mov	r0, r6
   1229c:	mov	r1, r8
   122a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   122a4:	tst	r2, #1
   122a8:	beq	12550 <__assert_fail@plt+0x161c>
   122ac:	b	12cac <__assert_fail@plt+0x1d78>
   122b0:	cmp	r7, #1
   122b4:	beq	122d8 <__assert_fail@plt+0x13a4>
   122b8:	mov	r8, #0
   122bc:	cmn	r7, #1
   122c0:	bne	1251c <__assert_fail@plt+0x15e8>
   122c4:	ldrb	r0, [lr, #1]
   122c8:	cmp	r0, #0
   122cc:	beq	122d8 <__assert_fail@plt+0x13a4>
   122d0:	mvn	r7, #0
   122d4:	b	1251c <__assert_fail@plt+0x15e8>
   122d8:	mov	r8, #0
   122dc:	cmp	sl, #0
   122e0:	bne	1251c <__assert_fail@plt+0x15e8>
   122e4:	mov	r1, #1
   122e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122ec:	cmp	r0, #2
   122f0:	bne	12308 <__assert_fail@plt+0x13d4>
   122f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122f8:	mov	r8, r1
   122fc:	tst	r0, #1
   12300:	beq	12270 <__assert_fail@plt+0x133c>
   12304:	b	12cac <__assert_fail@plt+0x1d78>
   12308:	mov	r8, r1
   1230c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12310:	tst	r0, #1
   12314:	beq	1227c <__assert_fail@plt+0x1348>
   12318:	b	12530 <__assert_fail@plt+0x15fc>
   1231c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12320:	cmp	r0, #2
   12324:	bne	125e4 <__assert_fail@plt+0x16b0>
   12328:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1232c:	tst	r0, #1
   12330:	bne	12cac <__assert_fail@plt+0x1d78>
   12334:	mov	r0, #0
   12338:	str	r0, [fp, #-56]	; 0xffffffc8
   1233c:	b	125fc <__assert_fail@plt+0x16c8>
   12340:	mov	r0, #102	; 0x66
   12344:	b	1266c <__assert_fail@plt+0x1738>
   12348:	mov	r2, #116	; 0x74
   1234c:	b	1235c <__assert_fail@plt+0x1428>
   12350:	mov	r0, #98	; 0x62
   12354:	b	1266c <__assert_fail@plt+0x1738>
   12358:	mov	r2, #114	; 0x72
   1235c:	ldr	r0, [sp, #64]	; 0x40
   12360:	tst	r0, #1
   12364:	mov	r0, r2
   12368:	bne	1266c <__assert_fail@plt+0x1738>
   1236c:	b	12cac <__assert_fail@plt+0x1d78>
   12370:	ldr	r0, [sp, #88]	; 0x58
   12374:	tst	r0, #1
   12378:	beq	1268c <__assert_fail@plt+0x1758>
   1237c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12380:	tst	r0, #1
   12384:	bne	12de8 <__assert_fail@plt+0x1eb4>
   12388:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1238c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12390:	subs	r0, r0, #2
   12394:	movwne	r0, #1
   12398:	orr	r0, r0, r1
   1239c:	tst	r0, #1
   123a0:	bne	123dc <__assert_fail@plt+0x14a8>
   123a4:	cmp	r9, r5
   123a8:	movcc	r0, #39	; 0x27
   123ac:	strbcc	r0, [ip, r9]
   123b0:	add	r0, r9, #1
   123b4:	cmp	r0, r5
   123b8:	movcc	r1, #36	; 0x24
   123bc:	strbcc	r1, [ip, r0]
   123c0:	add	r0, r9, #2
   123c4:	add	r9, r9, #3
   123c8:	cmp	r0, r5
   123cc:	movcc	r1, #39	; 0x27
   123d0:	strbcc	r1, [ip, r0]
   123d4:	mov	r0, #1
   123d8:	str	r0, [fp, #-52]	; 0xffffffcc
   123dc:	mov	r1, #1
   123e0:	cmp	r9, r5
   123e4:	mov	r8, #0
   123e8:	mov	r6, #48	; 0x30
   123ec:	str	r1, [fp, #-56]	; 0xffffffc8
   123f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   123f4:	movcc	r0, #92	; 0x5c
   123f8:	strbcc	r0, [ip, r9]
   123fc:	add	r0, r9, #1
   12400:	cmp	r1, #2
   12404:	beq	12858 <__assert_fail@plt+0x1924>
   12408:	add	r1, sl, #1
   1240c:	cmp	r1, r7
   12410:	bcs	12858 <__assert_fail@plt+0x1924>
   12414:	ldrb	r1, [lr, r1]
   12418:	sub	r1, r1, #48	; 0x30
   1241c:	uxtb	r1, r1
   12420:	cmp	r1, #9
   12424:	bhi	12858 <__assert_fail@plt+0x1924>
   12428:	cmp	r0, r5
   1242c:	movcc	r1, #48	; 0x30
   12430:	strbcc	r1, [ip, r0]
   12434:	add	r0, r9, #2
   12438:	add	r9, r9, #3
   1243c:	cmp	r0, r5
   12440:	movcc	r1, #48	; 0x30
   12444:	strbcc	r1, [ip, r0]
   12448:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1244c:	tst	r0, #1
   12450:	beq	1227c <__assert_fail@plt+0x1348>
   12454:	b	12530 <__assert_fail@plt+0x15fc>
   12458:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1245c:	mov	r6, #63	; 0x3f
   12460:	cmp	r0, #5
   12464:	beq	1286c <__assert_fail@plt+0x1938>
   12468:	mov	r1, #0
   1246c:	cmp	r0, #2
   12470:	str	r1, [fp, #-56]	; 0xffffffc8
   12474:	bne	12934 <__assert_fail@plt+0x1a00>
   12478:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1247c:	mov	r8, #0
   12480:	tst	r0, #1
   12484:	beq	12270 <__assert_fail@plt+0x133c>
   12488:	b	12cac <__assert_fail@plt+0x1d78>
   1248c:	mov	r0, #118	; 0x76
   12490:	b	1266c <__assert_fail@plt+0x1738>
   12494:	mov	r0, #1
   12498:	mov	r6, #39	; 0x27
   1249c:	str	r0, [sp, #60]	; 0x3c
   124a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   124a4:	cmp	r0, #2
   124a8:	bne	126ac <__assert_fail@plt+0x1778>
   124ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   124b0:	tst	r0, #1
   124b4:	bne	12cac <__assert_fail@plt+0x1d78>
   124b8:	ldr	r2, [sp, #56]	; 0x38
   124bc:	clz	r1, r5
   124c0:	mov	r8, #1
   124c4:	lsr	r1, r1, #5
   124c8:	cmp	r2, #0
   124cc:	mov	r0, r2
   124d0:	movwne	r0, #1
   124d4:	orrs	r0, r0, r1
   124d8:	moveq	r2, r5
   124dc:	moveq	r5, r0
   124e0:	cmp	r9, r5
   124e4:	str	r2, [sp, #56]	; 0x38
   124e8:	movcc	r0, #39	; 0x27
   124ec:	strbcc	r0, [ip, r9]
   124f0:	add	r0, r9, #1
   124f4:	cmp	r0, r5
   124f8:	movcc	r1, #92	; 0x5c
   124fc:	strbcc	r1, [ip, r0]
   12500:	add	r0, r9, #2
   12504:	add	r9, r9, #3
   12508:	cmp	r0, r5
   1250c:	movcc	r1, #39	; 0x27
   12510:	strbcc	r1, [ip, r0]
   12514:	mov	r0, #0
   12518:	str	r0, [fp, #-52]	; 0xffffffcc
   1251c:	mov	r0, #0
   12520:	str	r0, [fp, #-56]	; 0xffffffc8
   12524:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12528:	tst	r0, #1
   1252c:	beq	1227c <__assert_fail@plt+0x1348>
   12530:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12534:	mov	r1, r8
   12538:	cmp	r0, #0
   1253c:	mov	r0, r6
   12540:	beq	12604 <__assert_fail@plt+0x16d0>
   12544:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12548:	tst	r2, #1
   1254c:	bne	12cac <__assert_fail@plt+0x1d78>
   12550:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12554:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12558:	subs	r2, r2, #2
   1255c:	movwne	r2, #1
   12560:	orr	r2, r2, r3
   12564:	tst	r2, #1
   12568:	bne	125a4 <__assert_fail@plt+0x1670>
   1256c:	cmp	r9, r5
   12570:	movcc	r2, #39	; 0x27
   12574:	strbcc	r2, [ip, r9]
   12578:	add	r2, r9, #1
   1257c:	cmp	r2, r5
   12580:	movcc	r3, #36	; 0x24
   12584:	strbcc	r3, [ip, r2]
   12588:	add	r2, r9, #2
   1258c:	add	r9, r9, #3
   12590:	cmp	r2, r5
   12594:	movcc	r3, #39	; 0x27
   12598:	strbcc	r3, [ip, r2]
   1259c:	mov	r2, #1
   125a0:	str	r2, [fp, #-52]	; 0xffffffcc
   125a4:	cmp	r9, r5
   125a8:	movcc	r2, #92	; 0x5c
   125ac:	strbcc	r2, [ip, r9]
   125b0:	add	r9, r9, #1
   125b4:	b	1264c <__assert_fail@plt+0x1718>
   125b8:	ldr	r0, [sp, #40]	; 0x28
   125bc:	cmp	r0, #1
   125c0:	bne	126c0 <__assert_fail@plt+0x178c>
   125c4:	bl	10e50 <__ctype_b_loc@plt>
   125c8:	ldr	r0, [r0]
   125cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   125d0:	mov	r1, #1
   125d4:	add	r0, r0, r6, lsl #1
   125d8:	ldrb	r0, [r0, #1]
   125dc:	ubfx	r8, r0, #6, #1
   125e0:	b	12a18 <__assert_fail@plt+0x1ae4>
   125e4:	ldr	r1, [sp, #48]	; 0x30
   125e8:	mov	r0, #0
   125ec:	str	r0, [fp, #-56]	; 0xffffffc8
   125f0:	mov	r0, #92	; 0x5c
   125f4:	cmp	r1, #0
   125f8:	beq	1266c <__assert_fail@plt+0x1738>
   125fc:	mov	r6, #92	; 0x5c
   12600:	mov	r8, #0
   12604:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12608:	cmp	r0, #0
   1260c:	bne	12644 <__assert_fail@plt+0x1710>
   12610:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12614:	tst	r0, #1
   12618:	beq	12644 <__assert_fail@plt+0x1710>
   1261c:	cmp	r9, r5
   12620:	movcc	r0, #39	; 0x27
   12624:	strbcc	r0, [ip, r9]
   12628:	add	r0, r9, #1
   1262c:	add	r9, r9, #2
   12630:	cmp	r0, r5
   12634:	movcc	r1, #39	; 0x27
   12638:	strbcc	r1, [ip, r0]
   1263c:	mov	r0, #0
   12640:	str	r0, [fp, #-52]	; 0xffffffcc
   12644:	mov	r1, r8
   12648:	mov	r0, r6
   1264c:	cmp	r9, r5
   12650:	and	r4, r4, r1
   12654:	strbcc	r0, [ip, r9]
   12658:	add	r9, r9, #1
   1265c:	add	sl, sl, #1
   12660:	cmn	r7, #1
   12664:	bne	11f5c <__assert_fail@plt+0x1028>
   12668:	b	11f68 <__assert_fail@plt+0x1034>
   1266c:	mov	r1, #0
   12670:	mov	r8, #0
   12674:	str	r1, [fp, #-56]	; 0xffffffc8
   12678:	ldr	r1, [sp, #88]	; 0x58
   1267c:	tst	r1, #1
   12680:	mov	r1, #0
   12684:	beq	12270 <__assert_fail@plt+0x133c>
   12688:	b	12544 <__assert_fail@plt+0x1610>
   1268c:	ldr	r0, [sp, #36]	; 0x24
   12690:	mov	r6, #0
   12694:	mov	r8, #0
   12698:	cmp	r0, #0
   1269c:	mov	r0, #0
   126a0:	str	r0, [fp, #-56]	; 0xffffffc8
   126a4:	bne	1265c <__assert_fail@plt+0x1728>
   126a8:	b	12270 <__assert_fail@plt+0x133c>
   126ac:	mov	r8, #1
   126b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126b4:	tst	r0, #1
   126b8:	beq	1227c <__assert_fail@plt+0x1348>
   126bc:	b	12530 <__assert_fail@plt+0x15fc>
   126c0:	mov	r0, #0
   126c4:	cmn	r7, #1
   126c8:	str	r0, [fp, #-36]	; 0xffffffdc
   126cc:	str	r0, [fp, #-40]	; 0xffffffd8
   126d0:	bne	126e4 <__assert_fail@plt+0x17b0>
   126d4:	mov	r0, lr
   126d8:	bl	10e74 <strlen@plt>
   126dc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   126e0:	mov	r7, r0
   126e4:	ldr	r0, [sp, #44]	; 0x2c
   126e8:	str	r4, [sp, #84]	; 0x54
   126ec:	str	r5, [sp, #28]
   126f0:	cmp	r0, #0
   126f4:	beq	12948 <__assert_fail@plt+0x1a14>
   126f8:	ldr	r0, [sp, #80]	; 0x50
   126fc:	mov	r8, #1
   12700:	mov	r5, #0
   12704:	add	r0, r0, sl
   12708:	str	r0, [sp, #24]
   1270c:	sub	r0, fp, #40	; 0x28
   12710:	mov	r3, r0
   12714:	b	12750 <__assert_fail@plt+0x181c>
   12718:	ldr	r5, [sp, #68]	; 0x44
   1271c:	add	r5, r0, r5
   12720:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12724:	bl	10db4 <iswprint@plt>
   12728:	cmp	r0, #0
   1272c:	sub	r4, fp, #40	; 0x28
   12730:	movwne	r0, #1
   12734:	and	r8, r8, r0
   12738:	mov	r0, r4
   1273c:	bl	10d78 <mbsinit@plt>
   12740:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12744:	mov	r3, r4
   12748:	cmp	r0, #0
   1274c:	bne	12a0c <__assert_fail@plt+0x1ad8>
   12750:	str	r5, [sp, #68]	; 0x44
   12754:	add	r5, r5, sl
   12758:	sub	r0, fp, #44	; 0x2c
   1275c:	add	r1, lr, r5
   12760:	sub	r2, r7, r5
   12764:	bl	1530c <__assert_fail@plt+0x43d8>
   12768:	cmn	r0, #2
   1276c:	beq	129cc <__assert_fail@plt+0x1a98>
   12770:	ldr	ip, [fp, #-84]	; 0xffffffac
   12774:	cmn	r0, #1
   12778:	beq	129c0 <__assert_fail@plt+0x1a8c>
   1277c:	cmp	r0, #0
   12780:	beq	129c4 <__assert_fail@plt+0x1a90>
   12784:	cmp	r0, #2
   12788:	bcc	12718 <__assert_fail@plt+0x17e4>
   1278c:	ldr	r1, [sp, #68]	; 0x44
   12790:	ldr	r2, [sp, #24]
   12794:	add	r1, r2, r1
   12798:	sub	r2, r0, #1
   1279c:	ldrb	r3, [r1]
   127a0:	sub	r3, r3, #91	; 0x5b
   127a4:	cmp	r3, #33	; 0x21
   127a8:	bls	127c8 <__assert_fail@plt+0x1894>
   127ac:	add	r1, r1, #1
   127b0:	subs	r2, r2, #1
   127b4:	beq	12718 <__assert_fail@plt+0x17e4>
   127b8:	ldrb	r3, [r1]
   127bc:	sub	r3, r3, #91	; 0x5b
   127c0:	cmp	r3, #33	; 0x21
   127c4:	bhi	127ac <__assert_fail@plt+0x1878>
   127c8:	add	r5, pc, #0
   127cc:	ldr	pc, [r5, r3, lsl #2]
   127d0:	andeq	r2, r1, r4, ror #25
   127d4:	andeq	r2, r1, r4, ror #25
   127d8:	andeq	r2, r1, ip, lsr #15
   127dc:	andeq	r2, r1, r4, ror #25
   127e0:	andeq	r2, r1, ip, lsr #15
   127e4:	andeq	r2, r1, r4, ror #25
   127e8:	andeq	r2, r1, ip, lsr #15
   127ec:	andeq	r2, r1, ip, lsr #15
   127f0:	andeq	r2, r1, ip, lsr #15
   127f4:	andeq	r2, r1, ip, lsr #15
   127f8:	andeq	r2, r1, ip, lsr #15
   127fc:	andeq	r2, r1, ip, lsr #15
   12800:	andeq	r2, r1, ip, lsr #15
   12804:	andeq	r2, r1, ip, lsr #15
   12808:	andeq	r2, r1, ip, lsr #15
   1280c:	andeq	r2, r1, ip, lsr #15
   12810:	andeq	r2, r1, ip, lsr #15
   12814:	andeq	r2, r1, ip, lsr #15
   12818:	andeq	r2, r1, ip, lsr #15
   1281c:	andeq	r2, r1, ip, lsr #15
   12820:	andeq	r2, r1, ip, lsr #15
   12824:	andeq	r2, r1, ip, lsr #15
   12828:	andeq	r2, r1, ip, lsr #15
   1282c:	andeq	r2, r1, ip, lsr #15
   12830:	andeq	r2, r1, ip, lsr #15
   12834:	andeq	r2, r1, ip, lsr #15
   12838:	andeq	r2, r1, ip, lsr #15
   1283c:	andeq	r2, r1, ip, lsr #15
   12840:	andeq	r2, r1, ip, lsr #15
   12844:	andeq	r2, r1, ip, lsr #15
   12848:	andeq	r2, r1, ip, lsr #15
   1284c:	andeq	r2, r1, ip, lsr #15
   12850:	andeq	r2, r1, ip, lsr #15
   12854:	andeq	r2, r1, r4, ror #25
   12858:	mov	r9, r0
   1285c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12860:	tst	r0, #1
   12864:	beq	1227c <__assert_fail@plt+0x1348>
   12868:	b	12530 <__assert_fail@plt+0x15fc>
   1286c:	mov	r0, #0
   12870:	str	r0, [fp, #-56]	; 0xffffffc8
   12874:	ldr	r0, [sp, #32]
   12878:	cmp	r0, #0
   1287c:	beq	12934 <__assert_fail@plt+0x1a00>
   12880:	add	r0, sl, #2
   12884:	mov	r1, r7
   12888:	cmp	r0, r7
   1288c:	bcs	12934 <__assert_fail@plt+0x1a00>
   12890:	add	r1, sl, lr
   12894:	ldrb	r1, [r1, #1]
   12898:	cmp	r1, #63	; 0x3f
   1289c:	bne	12934 <__assert_fail@plt+0x1a00>
   128a0:	ldrb	r8, [lr, r0]
   128a4:	sub	r2, r8, #33	; 0x21
   128a8:	cmp	r2, #29
   128ac:	bhi	12934 <__assert_fail@plt+0x1a00>
   128b0:	mov	r1, r4
   128b4:	movw	r4, #20929	; 0x51c1
   128b8:	mov	r3, #1
   128bc:	movt	r4, #14336	; 0x3800
   128c0:	tst	r4, r3, lsl r2
   128c4:	beq	12bf0 <__assert_fail@plt+0x1cbc>
   128c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128cc:	tst	r2, #1
   128d0:	bne	12cac <__assert_fail@plt+0x1d78>
   128d4:	cmp	r9, r5
   128d8:	mov	r6, r8
   128dc:	mov	r4, r1
   128e0:	mov	sl, r0
   128e4:	mov	r8, #0
   128e8:	movcc	r2, #63	; 0x3f
   128ec:	strbcc	r2, [ip, r9]
   128f0:	add	r2, r9, #1
   128f4:	cmp	r2, r5
   128f8:	movcc	r3, #34	; 0x22
   128fc:	strbcc	r3, [ip, r2]
   12900:	add	r2, r9, #2
   12904:	cmp	r2, r5
   12908:	movcc	r3, #34	; 0x22
   1290c:	strbcc	r3, [ip, r2]
   12910:	add	r2, r9, #3
   12914:	add	r9, r9, #4
   12918:	cmp	r2, r5
   1291c:	movcc	r3, #63	; 0x3f
   12920:	strbcc	r3, [ip, r2]
   12924:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12928:	tst	r0, #1
   1292c:	beq	1227c <__assert_fail@plt+0x1348>
   12930:	b	12530 <__assert_fail@plt+0x15fc>
   12934:	mov	r8, #0
   12938:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1293c:	tst	r0, #1
   12940:	beq	1227c <__assert_fail@plt+0x1348>
   12944:	b	12530 <__assert_fail@plt+0x15fc>
   12948:	mov	r8, #1
   1294c:	mov	r5, #0
   12950:	sub	r4, fp, #40	; 0x28
   12954:	str	r5, [sp, #68]	; 0x44
   12958:	add	r5, r5, sl
   1295c:	sub	r0, fp, #44	; 0x2c
   12960:	mov	r3, r4
   12964:	add	r1, lr, r5
   12968:	sub	r2, r7, r5
   1296c:	bl	1530c <__assert_fail@plt+0x43d8>
   12970:	cmn	r0, #2
   12974:	beq	129cc <__assert_fail@plt+0x1a98>
   12978:	cmn	r0, #1
   1297c:	beq	129c0 <__assert_fail@plt+0x1a8c>
   12980:	ldr	r5, [sp, #68]	; 0x44
   12984:	cmp	r0, #0
   12988:	beq	12a08 <__assert_fail@plt+0x1ad4>
   1298c:	add	r5, r0, r5
   12990:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12994:	bl	10db4 <iswprint@plt>
   12998:	cmp	r0, #0
   1299c:	sub	r4, fp, #40	; 0x28
   129a0:	movwne	r0, #1
   129a4:	and	r8, r8, r0
   129a8:	mov	r0, r4
   129ac:	bl	10d78 <mbsinit@plt>
   129b0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129b4:	cmp	r0, #0
   129b8:	beq	12954 <__assert_fail@plt+0x1a20>
   129bc:	b	12a0c <__assert_fail@plt+0x1ad8>
   129c0:	mov	r8, #0
   129c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129c8:	b	12a00 <__assert_fail@plt+0x1acc>
   129cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129d0:	mov	r8, #0
   129d4:	cmp	r5, r7
   129d8:	bcs	12a00 <__assert_fail@plt+0x1acc>
   129dc:	ldrb	r0, [lr, r5]
   129e0:	cmp	r0, #0
   129e4:	beq	12a00 <__assert_fail@plt+0x1acc>
   129e8:	ldr	r0, [sp, #68]	; 0x44
   129ec:	add	r0, r0, #1
   129f0:	add	r5, r0, sl
   129f4:	str	r0, [sp, #68]	; 0x44
   129f8:	cmp	r5, r7
   129fc:	bcc	129dc <__assert_fail@plt+0x1aa8>
   12a00:	ldr	r5, [sp, #68]	; 0x44
   12a04:	b	12a0c <__assert_fail@plt+0x1ad8>
   12a08:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a0c:	mov	r1, r5
   12a10:	ldr	r5, [sp, #28]
   12a14:	ldr	r4, [sp, #84]	; 0x54
   12a18:	ldr	r0, [sp, #52]	; 0x34
   12a1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a20:	cmp	r1, #1
   12a24:	orr	r2, r8, r0
   12a28:	mov	r0, r1
   12a2c:	bhi	12a38 <__assert_fail@plt+0x1b04>
   12a30:	tst	r2, #1
   12a34:	bne	12270 <__assert_fail@plt+0x133c>
   12a38:	add	r0, r0, sl
   12a3c:	str	r2, [sp, #84]	; 0x54
   12a40:	str	r0, [fp, #-56]	; 0xffffffc8
   12a44:	mov	r0, #0
   12a48:	tst	r2, #1
   12a4c:	bne	12b2c <__assert_fail@plt+0x1bf8>
   12a50:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12a54:	tst	r1, #1
   12a58:	bne	12cac <__assert_fail@plt+0x1d78>
   12a5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12a60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12a64:	subs	r2, r1, #2
   12a68:	movwne	r2, #1
   12a6c:	orr	r2, r2, r0
   12a70:	tst	r2, #1
   12a74:	bne	12ab0 <__assert_fail@plt+0x1b7c>
   12a78:	cmp	r9, r5
   12a7c:	add	r2, r9, #1
   12a80:	mov	r0, #1
   12a84:	movcc	r1, #39	; 0x27
   12a88:	str	r0, [fp, #-52]	; 0xffffffcc
   12a8c:	strbcc	r1, [ip, r9]
   12a90:	cmp	r2, r5
   12a94:	movcc	r1, #36	; 0x24
   12a98:	strbcc	r1, [ip, r2]
   12a9c:	add	r2, r9, #2
   12aa0:	add	r9, r9, #3
   12aa4:	cmp	r2, r5
   12aa8:	movcc	r1, #39	; 0x27
   12aac:	strbcc	r1, [ip, r2]
   12ab0:	cmp	r9, r5
   12ab4:	add	r2, r9, #1
   12ab8:	movcc	r1, #92	; 0x5c
   12abc:	strbcc	r1, [ip, r9]
   12ac0:	cmp	r2, r5
   12ac4:	bcs	12ad8 <__assert_fail@plt+0x1ba4>
   12ac8:	uxtb	r3, r6
   12acc:	mov	r1, #48	; 0x30
   12ad0:	orr	r3, r1, r3, lsr #6
   12ad4:	strb	r3, [ip, r2]
   12ad8:	add	r2, r9, #2
   12adc:	add	r9, r9, #3
   12ae0:	cmp	r2, r5
   12ae4:	lsrcc	r3, r6, #3
   12ae8:	movcc	r1, #6
   12aec:	bficc	r3, r1, #3, #29
   12af0:	mov	r1, #6
   12af4:	bfi	r6, r1, #3, #29
   12af8:	strbcc	r3, [ip, r2]
   12afc:	mov	r2, #1
   12b00:	b	12b60 <__assert_fail@plt+0x1c2c>
   12b04:	ldr	r1, [sp, #80]	; 0x50
   12b08:	cmp	r9, r2
   12b0c:	mov	r5, r2
   12b10:	ldr	r2, [sp, #84]	; 0x54
   12b14:	strbcc	r6, [ip, r9]
   12b18:	add	r9, r9, #1
   12b1c:	ldrb	r6, [r1, sl]
   12b20:	mov	sl, r3
   12b24:	tst	r2, #1
   12b28:	beq	12a50 <__assert_fail@plt+0x1b1c>
   12b2c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b30:	tst	r1, #1
   12b34:	beq	12b54 <__assert_fail@plt+0x1c20>
   12b38:	cmp	r9, r5
   12b3c:	mov	r2, r0
   12b40:	movcc	r1, #92	; 0x5c
   12b44:	strbcc	r1, [ip, r9]
   12b48:	add	r9, r9, #1
   12b4c:	mov	r1, #0
   12b50:	b	12b5c <__assert_fail@plt+0x1c28>
   12b54:	mov	r1, #0
   12b58:	mov	r2, r0
   12b5c:	str	r1, [fp, #-48]	; 0xffffffd0
   12b60:	mov	r0, r2
   12b64:	and	r1, r2, #1
   12b68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12b6c:	add	r3, sl, #1
   12b70:	cmp	r2, r3
   12b74:	bls	12bd4 <__assert_fail@plt+0x1ca0>
   12b78:	mov	r2, r5
   12b7c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   12b80:	cmp	r1, #0
   12b84:	movwne	r1, #1
   12b88:	mvn	r5, r5
   12b8c:	orr	r5, r5, r1
   12b90:	tst	r5, #1
   12b94:	bne	12b04 <__assert_fail@plt+0x1bd0>
   12b98:	cmp	r9, r2
   12b9c:	movcc	r5, r4
   12ba0:	movcc	r4, #39	; 0x27
   12ba4:	strbcc	r4, [ip, r9]
   12ba8:	movcc	r4, r5
   12bac:	add	r5, r9, #1
   12bb0:	add	r9, r9, #2
   12bb4:	cmp	r5, r2
   12bb8:	movcc	r1, r4
   12bbc:	movcc	r4, #39	; 0x27
   12bc0:	strbcc	r4, [ip, r5]
   12bc4:	movcc	r4, r1
   12bc8:	mov	r1, #0
   12bcc:	str	r1, [fp, #-52]	; 0xffffffcc
   12bd0:	b	12b04 <__assert_fail@plt+0x1bd0>
   12bd4:	cmp	r1, #0
   12bd8:	movwne	r1, #1
   12bdc:	str	r1, [fp, #-56]	; 0xffffffc8
   12be0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12be4:	cmp	r0, #0
   12be8:	beq	12610 <__assert_fail@plt+0x16dc>
   12bec:	b	12644 <__assert_fail@plt+0x1710>
   12bf0:	mov	r8, #0
   12bf4:	mov	r4, r1
   12bf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bfc:	tst	r0, #1
   12c00:	beq	1227c <__assert_fail@plt+0x1348>
   12c04:	b	12530 <__assert_fail@plt+0x15fc>
   12c08:	mov	r7, sl
   12c0c:	b	12c14 <__assert_fail@plt+0x1ce0>
   12c10:	mvn	r7, #0
   12c14:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c18:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12c1c:	ldr	r2, [sp, #88]	; 0x58
   12c20:	eor	r0, r1, #2
   12c24:	orr	r0, r0, r9
   12c28:	clz	r0, r0
   12c2c:	lsr	r0, r0, #5
   12c30:	tst	r3, r0
   12c34:	bne	12cac <__assert_fail@plt+0x1d78>
   12c38:	subs	r0, r1, #2
   12c3c:	movwne	r0, #1
   12c40:	orr	r0, r3, r0
   12c44:	tst	r0, #1
   12c48:	ldreq	r0, [sp, #60]	; 0x3c
   12c4c:	eoreq	r0, r0, #1
   12c50:	tsteq	r0, #1
   12c54:	bne	12d88 <__assert_fail@plt+0x1e54>
   12c58:	tst	r4, #1
   12c5c:	bne	12d4c <__assert_fail@plt+0x1e18>
   12c60:	ldr	r6, [sp, #56]	; 0x38
   12c64:	mov	r8, #0
   12c68:	cmp	r6, #0
   12c6c:	beq	12d84 <__assert_fail@plt+0x1e50>
   12c70:	mov	r1, #0
   12c74:	mov	r4, #2
   12c78:	cmp	r5, #0
   12c7c:	mov	r0, r2
   12c80:	mov	r3, #0
   12c84:	str	r1, [sp, #84]	; 0x54
   12c88:	beq	11ad0 <__assert_fail@plt+0xb9c>
   12c8c:	b	12d88 <__assert_fail@plt+0x1e54>
   12c90:	movw	r0, #23372	; 0x5b4c
   12c94:	movt	r0, #1
   12c98:	str	r0, [sp, #76]	; 0x4c
   12c9c:	mov	r9, #0
   12ca0:	tst	r8, #1
   12ca4:	beq	11d68 <__assert_fail@plt+0xe34>
   12ca8:	b	11ea8 <__assert_fail@plt+0xf74>
   12cac:	ldr	r1, [sp, #88]	; 0x58
   12cb0:	mov	r0, #2
   12cb4:	tst	r1, #1
   12cb8:	movwne	r0, #4
   12cbc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12cc0:	ldr	r1, [fp, #12]
   12cc4:	cmp	r2, #2
   12cc8:	moveq	r2, r0
   12ccc:	b	12d04 <__assert_fail@plt+0x1dd0>
   12cd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cd4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cd8:	ldr	r1, [fp, #12]
   12cdc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12ce0:	b	12d04 <__assert_fail@plt+0x1dd0>
   12ce4:	ldr	r1, [sp, #88]	; 0x58
   12ce8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cec:	ldr	r5, [sp, #28]
   12cf0:	mov	r0, #2
   12cf4:	tst	r1, #1
   12cf8:	ldr	r1, [fp, #12]
   12cfc:	movwne	r0, #4
   12d00:	mov	r2, r0
   12d04:	mov	r0, #0
   12d08:	bic	r1, r1, #2
   12d0c:	str	r2, [sp]
   12d10:	mov	r2, lr
   12d14:	str	r0, [sp, #8]
   12d18:	ldr	r0, [sp, #72]	; 0x48
   12d1c:	str	r1, [sp, #4]
   12d20:	mov	r1, r5
   12d24:	str	r0, [sp, #12]
   12d28:	ldr	r0, [sp, #76]	; 0x4c
   12d2c:	str	r0, [sp, #16]
   12d30:	mov	r0, ip
   12d34:	mov	r3, r7
   12d38:	bl	11a44 <__assert_fail@plt+0xb10>
   12d3c:	mov	r9, r0
   12d40:	mov	r0, r9
   12d44:	sub	sp, fp, #28
   12d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d4c:	mov	r0, #5
   12d50:	ldr	r1, [sp, #56]	; 0x38
   12d54:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12d58:	str	r0, [sp]
   12d5c:	ldr	r0, [fp, #12]
   12d60:	str	r0, [sp, #4]
   12d64:	ldr	r0, [fp, #16]
   12d68:	str	r0, [sp, #8]
   12d6c:	ldr	r0, [sp, #72]	; 0x48
   12d70:	str	r0, [sp, #12]
   12d74:	ldr	r0, [sp, #76]	; 0x4c
   12d78:	str	r0, [sp, #16]
   12d7c:	ldr	r0, [fp, #-84]	; 0xffffffac
   12d80:	b	12d34 <__assert_fail@plt+0x1e00>
   12d84:	mov	r3, #0
   12d88:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12d8c:	cmp	r1, #0
   12d90:	beq	12dcc <__assert_fail@plt+0x1e98>
   12d94:	ldr	r2, [fp, #-84]	; 0xffffffac
   12d98:	tst	r3, #1
   12d9c:	bne	12dd0 <__assert_fail@plt+0x1e9c>
   12da0:	ldrb	r0, [r1]
   12da4:	cmp	r0, #0
   12da8:	beq	12dd0 <__assert_fail@plt+0x1e9c>
   12dac:	add	r1, r1, #1
   12db0:	cmp	r9, r5
   12db4:	strbcc	r0, [r2, r9]
   12db8:	add	r9, r9, #1
   12dbc:	ldrb	r0, [r1], #1
   12dc0:	cmp	r0, #0
   12dc4:	bne	12db0 <__assert_fail@plt+0x1e7c>
   12dc8:	b	12dd0 <__assert_fail@plt+0x1e9c>
   12dcc:	ldr	r2, [fp, #-84]	; 0xffffffac
   12dd0:	cmp	r9, r5
   12dd4:	movcc	r0, #0
   12dd8:	strbcc	r0, [r2, r9]
   12ddc:	mov	r0, r9
   12de0:	sub	sp, fp, #28
   12de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de8:	mov	r0, #4
   12dec:	b	12cbc <__assert_fail@plt+0x1d88>
   12df0:	bl	10f28 <abort@plt>
   12df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df8:	add	fp, sp, #28
   12dfc:	sub	sp, sp, #28
   12e00:	movw	r5, #29008	; 0x7150
   12e04:	cmp	r2, #0
   12e08:	mov	r4, r1
   12e0c:	mov	r7, r0
   12e10:	str	r0, [sp, #20]
   12e14:	movt	r5, #2
   12e18:	movne	r5, r2
   12e1c:	bl	10e8c <__errno_location@plt>
   12e20:	mov	sl, r0
   12e24:	ldr	r2, [r5, #40]	; 0x28
   12e28:	ldr	r3, [r5, #44]	; 0x2c
   12e2c:	ldm	r5, {r0, r1}
   12e30:	orr	r8, r1, #1
   12e34:	add	r9, r5, #8
   12e38:	mov	r1, #0
   12e3c:	ldr	r6, [sl]
   12e40:	stm	sp, {r0, r8, r9}
   12e44:	mov	r0, #0
   12e48:	str	r2, [sp, #12]
   12e4c:	str	r3, [sp, #16]
   12e50:	mov	r2, r7
   12e54:	mov	r3, r4
   12e58:	str	r6, [sp, #24]
   12e5c:	mov	r6, r4
   12e60:	bl	11a44 <__assert_fail@plt+0xb10>
   12e64:	add	r7, r0, #1
   12e68:	mov	r0, r7
   12e6c:	bl	13ed4 <__assert_fail@plt+0x2fa0>
   12e70:	mov	r4, r0
   12e74:	ldr	r0, [r5]
   12e78:	ldr	r2, [r5, #44]	; 0x2c
   12e7c:	ldr	r1, [r5, #40]	; 0x28
   12e80:	mov	r3, r6
   12e84:	stm	sp, {r0, r8, r9}
   12e88:	str	r2, [sp, #16]
   12e8c:	ldr	r2, [sp, #20]
   12e90:	str	r1, [sp, #12]
   12e94:	mov	r0, r4
   12e98:	mov	r1, r7
   12e9c:	bl	11a44 <__assert_fail@plt+0xb10>
   12ea0:	ldr	r0, [sp, #24]
   12ea4:	str	r0, [sl]
   12ea8:	mov	r0, r4
   12eac:	sub	sp, fp, #28
   12eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb8:	add	fp, sp, #28
   12ebc:	sub	sp, sp, #36	; 0x24
   12ec0:	movw	r8, #29008	; 0x7150
   12ec4:	cmp	r3, #0
   12ec8:	mov	r4, r2
   12ecc:	str	r2, [sp, #24]
   12ed0:	mov	r5, r1
   12ed4:	mov	r6, r0
   12ed8:	str	r0, [sp, #20]
   12edc:	movt	r8, #2
   12ee0:	movne	r8, r3
   12ee4:	bl	10e8c <__errno_location@plt>
   12ee8:	str	r0, [sp, #28]
   12eec:	ldr	r1, [r8, #40]	; 0x28
   12ef0:	ldr	r2, [r8, #44]	; 0x2c
   12ef4:	ldr	r7, [r0]
   12ef8:	cmp	r4, #0
   12efc:	add	sl, r8, #8
   12f00:	mov	r0, #0
   12f04:	ldm	r8, {r3, r9}
   12f08:	orreq	r9, r9, #1
   12f0c:	stm	sp, {r3, r9, sl}
   12f10:	str	r1, [sp, #12]
   12f14:	str	r2, [sp, #16]
   12f18:	mov	r1, #0
   12f1c:	mov	r2, r6
   12f20:	mov	r3, r5
   12f24:	str	r7, [sp, #32]
   12f28:	mov	r7, r5
   12f2c:	bl	11a44 <__assert_fail@plt+0xb10>
   12f30:	add	r4, r0, #1
   12f34:	mov	r5, r0
   12f38:	mov	r0, r4
   12f3c:	bl	13ed4 <__assert_fail@plt+0x2fa0>
   12f40:	mov	r6, r0
   12f44:	ldr	r0, [r8]
   12f48:	ldr	r2, [r8, #44]	; 0x2c
   12f4c:	ldr	r1, [r8, #40]	; 0x28
   12f50:	mov	r3, r7
   12f54:	stm	sp, {r0, r9, sl}
   12f58:	str	r2, [sp, #16]
   12f5c:	ldr	r2, [sp, #20]
   12f60:	str	r1, [sp, #12]
   12f64:	mov	r0, r6
   12f68:	mov	r1, r4
   12f6c:	bl	11a44 <__assert_fail@plt+0xb10>
   12f70:	ldr	r0, [sp, #24]
   12f74:	ldr	r1, [sp, #32]
   12f78:	ldr	r2, [sp, #28]
   12f7c:	cmp	r0, #0
   12f80:	str	r1, [r2]
   12f84:	strne	r5, [r0]
   12f88:	mov	r0, r6
   12f8c:	sub	sp, fp, #28
   12f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f94:	push	{r4, r5, r6, r7, fp, lr}
   12f98:	add	fp, sp, #16
   12f9c:	movw	r4, #28944	; 0x7110
   12fa0:	movt	r4, #2
   12fa4:	ldrd	r6, [r4]
   12fa8:	cmp	r7, #2
   12fac:	blt	12fd8 <__assert_fail@plt+0x20a4>
   12fb0:	add	r5, r6, #12
   12fb4:	mov	r7, #0
   12fb8:	ldr	r0, [r5, r7, lsl #3]
   12fbc:	bl	15204 <__assert_fail@plt+0x42d0>
   12fc0:	ldr	r1, [r4, #4]
   12fc4:	add	r2, r7, #2
   12fc8:	add	r0, r7, #1
   12fcc:	mov	r7, r0
   12fd0:	cmp	r2, r1
   12fd4:	blt	12fb8 <__assert_fail@plt+0x2084>
   12fd8:	ldr	r0, [r6, #4]
   12fdc:	movw	r5, #29056	; 0x7180
   12fe0:	movt	r5, #2
   12fe4:	cmp	r0, r5
   12fe8:	beq	12ffc <__assert_fail@plt+0x20c8>
   12fec:	bl	15204 <__assert_fail@plt+0x42d0>
   12ff0:	mov	r0, #256	; 0x100
   12ff4:	str	r0, [r4, #8]
   12ff8:	str	r5, [r4, #12]
   12ffc:	add	r5, r4, #8
   13000:	cmp	r6, r5
   13004:	beq	13014 <__assert_fail@plt+0x20e0>
   13008:	mov	r0, r6
   1300c:	bl	15204 <__assert_fail@plt+0x42d0>
   13010:	str	r5, [r4]
   13014:	mov	r0, #1
   13018:	str	r0, [r4, #4]
   1301c:	pop	{r4, r5, r6, r7, fp, pc}
   13020:	movw	r3, #29008	; 0x7150
   13024:	mvn	r2, #0
   13028:	movt	r3, #2
   1302c:	b	13030 <__assert_fail@plt+0x20fc>
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13034:	add	fp, sp, #28
   13038:	sub	sp, sp, #44	; 0x2c
   1303c:	mov	r7, r3
   13040:	str	r2, [sp, #36]	; 0x24
   13044:	str	r1, [sp, #32]
   13048:	mov	r5, r0
   1304c:	bl	10e8c <__errno_location@plt>
   13050:	cmp	r5, #0
   13054:	bmi	131bc <__assert_fail@plt+0x2288>
   13058:	cmn	r5, #-2147483647	; 0x80000001
   1305c:	beq	131bc <__assert_fail@plt+0x2288>
   13060:	movw	r8, #28944	; 0x7110
   13064:	mov	r4, r0
   13068:	ldr	r0, [r0]
   1306c:	movt	r8, #2
   13070:	str	r4, [sp, #28]
   13074:	ldr	r1, [r8, #4]
   13078:	ldr	r6, [r8]
   1307c:	str	r0, [sp, #24]
   13080:	cmp	r1, r5
   13084:	ble	13090 <__assert_fail@plt+0x215c>
   13088:	mov	sl, r6
   1308c:	b	130f8 <__assert_fail@plt+0x21c4>
   13090:	mov	r0, #8
   13094:	add	r9, r8, #8
   13098:	str	r1, [fp, #-32]	; 0xffffffe0
   1309c:	sub	r1, r5, r1
   130a0:	mvn	r3, #-2147483648	; 0x80000000
   130a4:	str	r0, [sp]
   130a8:	subs	r0, r6, r9
   130ac:	add	r2, r1, #1
   130b0:	sub	r1, fp, #32
   130b4:	movne	r0, r6
   130b8:	bl	140d4 <__assert_fail@plt+0x31a0>
   130bc:	mov	sl, r0
   130c0:	cmp	r6, r9
   130c4:	str	r0, [r8]
   130c8:	bne	130d4 <__assert_fail@plt+0x21a0>
   130cc:	ldrd	r0, [r8, #8]
   130d0:	stm	sl, {r0, r1}
   130d4:	ldr	r1, [r8, #4]
   130d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130dc:	add	r0, sl, r1, lsl #3
   130e0:	sub	r1, r2, r1
   130e4:	lsl	r2, r1, #3
   130e8:	mov	r1, #0
   130ec:	bl	10ea4 <memset@plt>
   130f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   130f4:	str	r0, [r8, #4]
   130f8:	mov	r9, sl
   130fc:	ldm	r7, {r0, r1}
   13100:	orr	r8, r1, #1
   13104:	add	r1, r7, #8
   13108:	ldr	r2, [r7, #40]	; 0x28
   1310c:	ldr	r3, [r7, #44]	; 0x2c
   13110:	ldr	r6, [r9, r5, lsl #3]!
   13114:	str	r1, [sp, #20]
   13118:	ldr	r4, [r9, #4]!
   1311c:	stm	sp, {r0, r8}
   13120:	add	r0, sp, #8
   13124:	stm	r0, {r1, r2, r3}
   13128:	ldr	r2, [sp, #32]
   1312c:	ldr	r3, [sp, #36]	; 0x24
   13130:	mov	r1, r6
   13134:	mov	r0, r4
   13138:	bl	11a44 <__assert_fail@plt+0xb10>
   1313c:	cmp	r6, r0
   13140:	bhi	131a4 <__assert_fail@plt+0x2270>
   13144:	add	r6, r0, #1
   13148:	movw	r0, #29056	; 0x7180
   1314c:	movt	r0, #2
   13150:	str	r6, [sl, r5, lsl #3]
   13154:	cmp	r4, r0
   13158:	beq	13164 <__assert_fail@plt+0x2230>
   1315c:	mov	r0, r4
   13160:	bl	15204 <__assert_fail@plt+0x42d0>
   13164:	mov	r0, r6
   13168:	bl	13ed4 <__assert_fail@plt+0x2fa0>
   1316c:	str	r0, [r9]
   13170:	mov	r4, r0
   13174:	add	r3, sp, #8
   13178:	ldr	r0, [r7]
   1317c:	ldr	r1, [r7, #40]	; 0x28
   13180:	ldr	r2, [r7, #44]	; 0x2c
   13184:	stm	sp, {r0, r8}
   13188:	ldr	r0, [sp, #20]
   1318c:	stm	r3, {r0, r1, r2}
   13190:	ldr	r2, [sp, #32]
   13194:	ldr	r3, [sp, #36]	; 0x24
   13198:	mov	r0, r4
   1319c:	mov	r1, r6
   131a0:	bl	11a44 <__assert_fail@plt+0xb10>
   131a4:	ldr	r1, [sp, #24]
   131a8:	ldr	r0, [sp, #28]
   131ac:	str	r1, [r0]
   131b0:	mov	r0, r4
   131b4:	sub	sp, fp, #28
   131b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131bc:	bl	10f28 <abort@plt>
   131c0:	movw	r3, #29008	; 0x7150
   131c4:	movt	r3, #2
   131c8:	b	13030 <__assert_fail@plt+0x20fc>
   131cc:	movw	r3, #29008	; 0x7150
   131d0:	mov	r1, r0
   131d4:	mov	r0, #0
   131d8:	mvn	r2, #0
   131dc:	movt	r3, #2
   131e0:	b	13030 <__assert_fail@plt+0x20fc>
   131e4:	movw	r3, #29008	; 0x7150
   131e8:	mov	r2, r1
   131ec:	mov	r1, r0
   131f0:	mov	r0, #0
   131f4:	movt	r3, #2
   131f8:	b	13030 <__assert_fail@plt+0x20fc>
   131fc:	push	{fp, lr}
   13200:	mov	fp, sp
   13204:	sub	sp, sp, #48	; 0x30
   13208:	vmov.i32	q8, #0	; 0x00000000
   1320c:	mov	ip, #32
   13210:	mov	r3, sp
   13214:	mov	lr, r2
   13218:	cmp	r1, #10
   1321c:	add	r2, r3, #16
   13220:	vst1.64	{d16-d17}, [r3], ip
   13224:	vst1.64	{d16-d17}, [r2]
   13228:	vst1.64	{d16-d17}, [r3]
   1322c:	beq	1324c <__assert_fail@plt+0x2318>
   13230:	str	r1, [sp]
   13234:	mov	r3, sp
   13238:	mov	r1, lr
   1323c:	mvn	r2, #0
   13240:	bl	13030 <__assert_fail@plt+0x20fc>
   13244:	mov	sp, fp
   13248:	pop	{fp, pc}
   1324c:	bl	10f28 <abort@plt>
   13250:	push	{r4, sl, fp, lr}
   13254:	add	fp, sp, #8
   13258:	sub	sp, sp, #48	; 0x30
   1325c:	vmov.i32	q8, #0	; 0x00000000
   13260:	mov	ip, r3
   13264:	mov	r3, sp
   13268:	mov	lr, #32
   1326c:	cmp	r1, #10
   13270:	add	r4, r3, #16
   13274:	vst1.64	{d16-d17}, [r3], lr
   13278:	vst1.64	{d16-d17}, [r4]
   1327c:	vst1.64	{d16-d17}, [r3]
   13280:	beq	132a0 <__assert_fail@plt+0x236c>
   13284:	str	r1, [sp]
   13288:	mov	r1, r2
   1328c:	mov	r3, sp
   13290:	mov	r2, ip
   13294:	bl	13030 <__assert_fail@plt+0x20fc>
   13298:	sub	sp, fp, #8
   1329c:	pop	{r4, sl, fp, pc}
   132a0:	bl	10f28 <abort@plt>
   132a4:	push	{fp, lr}
   132a8:	mov	fp, sp
   132ac:	sub	sp, sp, #48	; 0x30
   132b0:	vmov.i32	q8, #0	; 0x00000000
   132b4:	mov	r3, sp
   132b8:	mov	ip, #32
   132bc:	cmp	r0, #10
   132c0:	add	r2, r3, #16
   132c4:	vst1.64	{d16-d17}, [r3], ip
   132c8:	vst1.64	{d16-d17}, [r2]
   132cc:	vst1.64	{d16-d17}, [r3]
   132d0:	beq	132f0 <__assert_fail@plt+0x23bc>
   132d4:	str	r0, [sp]
   132d8:	mov	r3, sp
   132dc:	mov	r0, #0
   132e0:	mvn	r2, #0
   132e4:	bl	13030 <__assert_fail@plt+0x20fc>
   132e8:	mov	sp, fp
   132ec:	pop	{fp, pc}
   132f0:	bl	10f28 <abort@plt>
   132f4:	push	{fp, lr}
   132f8:	mov	fp, sp
   132fc:	sub	sp, sp, #48	; 0x30
   13300:	vmov.i32	q8, #0	; 0x00000000
   13304:	mov	r3, sp
   13308:	mov	ip, #32
   1330c:	cmp	r0, #10
   13310:	add	lr, r3, #16
   13314:	vst1.64	{d16-d17}, [r3], ip
   13318:	vst1.64	{d16-d17}, [lr]
   1331c:	vst1.64	{d16-d17}, [r3]
   13320:	beq	1333c <__assert_fail@plt+0x2408>
   13324:	str	r0, [sp]
   13328:	mov	r3, sp
   1332c:	mov	r0, #0
   13330:	bl	13030 <__assert_fail@plt+0x20fc>
   13334:	mov	sp, fp
   13338:	pop	{fp, pc}
   1333c:	bl	10f28 <abort@plt>
   13340:	push	{r4, sl, fp, lr}
   13344:	add	fp, sp, #8
   13348:	sub	sp, sp, #48	; 0x30
   1334c:	mov	lr, r0
   13350:	movw	r0, #29008	; 0x7150
   13354:	mov	ip, r1
   13358:	mov	r1, #32
   1335c:	mov	r4, #1
   13360:	movt	r0, #2
   13364:	add	r3, r0, #16
   13368:	vld1.64	{d16-d17}, [r0], r1
   1336c:	vld1.64	{d20-d21}, [r0]
   13370:	vld1.64	{d18-d19}, [r3]
   13374:	mov	r3, sp
   13378:	add	r0, r3, #32
   1337c:	add	r1, r3, #16
   13380:	vst1.64	{d20-d21}, [r0]
   13384:	mov	r0, #28
   13388:	vst1.64	{d18-d19}, [r1]
   1338c:	mov	r1, r3
   13390:	and	r0, r0, r2, lsr #3
   13394:	and	r2, r2, #31
   13398:	vst1.64	{d16-d17}, [r1], r0
   1339c:	ldr	r0, [r1, #8]
   133a0:	bic	r4, r4, r0, lsr r2
   133a4:	eor	r0, r0, r4, lsl r2
   133a8:	mov	r2, ip
   133ac:	str	r0, [r1, #8]
   133b0:	mov	r0, #0
   133b4:	mov	r1, lr
   133b8:	bl	13030 <__assert_fail@plt+0x20fc>
   133bc:	sub	sp, fp, #8
   133c0:	pop	{r4, sl, fp, pc}
   133c4:	push	{fp, lr}
   133c8:	mov	fp, sp
   133cc:	sub	sp, sp, #48	; 0x30
   133d0:	mov	ip, r0
   133d4:	movw	r0, #29008	; 0x7150
   133d8:	mov	r2, #32
   133dc:	movt	r0, #2
   133e0:	add	r3, r0, #16
   133e4:	vld1.64	{d16-d17}, [r0], r2
   133e8:	vld1.64	{d20-d21}, [r0]
   133ec:	vld1.64	{d18-d19}, [r3]
   133f0:	mov	r3, sp
   133f4:	add	r0, r3, #32
   133f8:	add	r2, r3, #16
   133fc:	vst1.64	{d20-d21}, [r0]
   13400:	mov	r0, #28
   13404:	vst1.64	{d18-d19}, [r2]
   13408:	mov	r2, r3
   1340c:	and	r0, r0, r1, lsr #3
   13410:	and	r1, r1, #31
   13414:	vst1.64	{d16-d17}, [r2], r0
   13418:	mov	r0, #1
   1341c:	ldr	lr, [r2, #8]
   13420:	bic	r0, r0, lr, lsr r1
   13424:	eor	r0, lr, r0, lsl r1
   13428:	mov	r1, ip
   1342c:	str	r0, [r2, #8]
   13430:	mov	r0, #0
   13434:	mvn	r2, #0
   13438:	bl	13030 <__assert_fail@plt+0x20fc>
   1343c:	mov	sp, fp
   13440:	pop	{fp, pc}
   13444:	push	{fp, lr}
   13448:	mov	fp, sp
   1344c:	sub	sp, sp, #48	; 0x30
   13450:	mov	r1, r0
   13454:	movw	r0, #29008	; 0x7150
   13458:	mov	r3, #32
   1345c:	movt	r0, #2
   13460:	add	r2, r0, #16
   13464:	vld1.64	{d16-d17}, [r0], r3
   13468:	mov	r3, sp
   1346c:	vld1.64	{d18-d19}, [r2]
   13470:	vld1.64	{d20-d21}, [r0]
   13474:	add	r2, r3, #16
   13478:	add	r0, r3, #32
   1347c:	vst1.64	{d18-d19}, [r2]
   13480:	vst1.64	{d20-d21}, [r0]
   13484:	mov	r0, #12
   13488:	mov	r2, r3
   1348c:	vst1.64	{d16-d17}, [r2], r0
   13490:	ldr	r0, [r2]
   13494:	orr	r0, r0, #67108864	; 0x4000000
   13498:	str	r0, [r2]
   1349c:	mov	r0, #0
   134a0:	mvn	r2, #0
   134a4:	bl	13030 <__assert_fail@plt+0x20fc>
   134a8:	mov	sp, fp
   134ac:	pop	{fp, pc}
   134b0:	push	{fp, lr}
   134b4:	mov	fp, sp
   134b8:	sub	sp, sp, #48	; 0x30
   134bc:	mov	ip, r1
   134c0:	mov	r1, r0
   134c4:	movw	r0, #29008	; 0x7150
   134c8:	mov	r2, #32
   134cc:	movt	r0, #2
   134d0:	add	r3, r0, #16
   134d4:	vld1.64	{d16-d17}, [r0], r2
   134d8:	vld1.64	{d18-d19}, [r3]
   134dc:	vld1.64	{d20-d21}, [r0]
   134e0:	mov	r3, sp
   134e4:	add	r2, r3, #16
   134e8:	add	r0, r3, #32
   134ec:	vst1.64	{d18-d19}, [r2]
   134f0:	vst1.64	{d20-d21}, [r0]
   134f4:	mov	r0, #12
   134f8:	mov	r2, r3
   134fc:	vst1.64	{d16-d17}, [r2], r0
   13500:	ldr	r0, [r2]
   13504:	orr	r0, r0, #67108864	; 0x4000000
   13508:	str	r0, [r2]
   1350c:	mov	r0, #0
   13510:	mov	r2, ip
   13514:	bl	13030 <__assert_fail@plt+0x20fc>
   13518:	mov	sp, fp
   1351c:	pop	{fp, pc}
   13520:	push	{r4, sl, fp, lr}
   13524:	add	fp, sp, #8
   13528:	sub	sp, sp, #96	; 0x60
   1352c:	vmov.i32	q8, #0	; 0x00000000
   13530:	mov	ip, r2
   13534:	mov	r2, sp
   13538:	mov	r4, #28
   1353c:	cmp	r1, #10
   13540:	mov	r3, r2
   13544:	add	lr, r2, #16
   13548:	vst1.64	{d16-d17}, [r3], r4
   1354c:	vst1.64	{d16-d17}, [lr]
   13550:	vst1.32	{d16-d17}, [r3]
   13554:	beq	135a4 <__assert_fail@plt+0x2670>
   13558:	vld1.64	{d16-d17}, [r2], r4
   1355c:	vld1.64	{d18-d19}, [lr]
   13560:	add	r3, sp, #48	; 0x30
   13564:	vld1.32	{d20-d21}, [r2]
   13568:	add	r2, r3, #20
   1356c:	add	r4, r3, #4
   13570:	vst1.32	{d18-d19}, [r2]
   13574:	add	r2, r3, #32
   13578:	vst1.32	{d16-d17}, [r4]
   1357c:	vst1.32	{d20-d21}, [r2]
   13580:	str	r1, [sp, #48]	; 0x30
   13584:	mvn	r2, #0
   13588:	ldr	r1, [sp, #60]	; 0x3c
   1358c:	orr	r1, r1, #67108864	; 0x4000000
   13590:	str	r1, [sp, #60]	; 0x3c
   13594:	mov	r1, ip
   13598:	bl	13030 <__assert_fail@plt+0x20fc>
   1359c:	sub	sp, fp, #8
   135a0:	pop	{r4, sl, fp, pc}
   135a4:	bl	10f28 <abort@plt>
   135a8:	push	{r4, r5, r6, sl, fp, lr}
   135ac:	add	fp, sp, #16
   135b0:	sub	sp, sp, #48	; 0x30
   135b4:	mov	ip, r3
   135b8:	movw	r3, #29008	; 0x7150
   135bc:	mov	r6, #32
   135c0:	cmp	r1, #0
   135c4:	mov	r4, sp
   135c8:	movt	r3, #2
   135cc:	cmpne	r2, #0
   135d0:	add	r5, r4, #16
   135d4:	add	lr, r3, #16
   135d8:	vld1.64	{d16-d17}, [r3], r6
   135dc:	vld1.64	{d18-d19}, [lr]
   135e0:	vld1.64	{d20-d21}, [r3]
   135e4:	mov	r3, #10
   135e8:	vst1.64	{d16-d17}, [r4], r6
   135ec:	vst1.64	{d18-d19}, [r5]
   135f0:	vst1.64	{d20-d21}, [r4]
   135f4:	str	r3, [sp]
   135f8:	bne	13600 <__assert_fail@plt+0x26cc>
   135fc:	bl	10f28 <abort@plt>
   13600:	str	r2, [sp, #44]	; 0x2c
   13604:	str	r1, [sp, #40]	; 0x28
   13608:	mov	r3, sp
   1360c:	mov	r1, ip
   13610:	mvn	r2, #0
   13614:	bl	13030 <__assert_fail@plt+0x20fc>
   13618:	sub	sp, fp, #16
   1361c:	pop	{r4, r5, r6, sl, fp, pc}
   13620:	push	{r4, r5, r6, sl, fp, lr}
   13624:	add	fp, sp, #16
   13628:	sub	sp, sp, #48	; 0x30
   1362c:	mov	lr, r3
   13630:	movw	r3, #29008	; 0x7150
   13634:	mov	r6, #32
   13638:	cmp	r1, #0
   1363c:	mov	r4, sp
   13640:	movt	r3, #2
   13644:	cmpne	r2, #0
   13648:	add	r5, r4, #16
   1364c:	add	ip, r3, #16
   13650:	vld1.64	{d16-d17}, [r3], r6
   13654:	vld1.64	{d18-d19}, [ip]
   13658:	vld1.64	{d20-d21}, [r3]
   1365c:	mov	r3, #10
   13660:	vst1.64	{d16-d17}, [r4], r6
   13664:	vst1.64	{d18-d19}, [r5]
   13668:	vst1.64	{d20-d21}, [r4]
   1366c:	str	r3, [sp]
   13670:	bne	13678 <__assert_fail@plt+0x2744>
   13674:	bl	10f28 <abort@plt>
   13678:	ldr	ip, [fp, #8]
   1367c:	str	r2, [sp, #44]	; 0x2c
   13680:	str	r1, [sp, #40]	; 0x28
   13684:	mov	r3, sp
   13688:	mov	r1, lr
   1368c:	mov	r2, ip
   13690:	bl	13030 <__assert_fail@plt+0x20fc>
   13694:	sub	sp, fp, #16
   13698:	pop	{r4, r5, r6, sl, fp, pc}
   1369c:	push	{r4, sl, fp, lr}
   136a0:	add	fp, sp, #8
   136a4:	sub	sp, sp, #48	; 0x30
   136a8:	movw	r3, #29008	; 0x7150
   136ac:	mov	lr, #32
   136b0:	mov	ip, r2
   136b4:	cmp	r0, #0
   136b8:	movt	r3, #2
   136bc:	cmpne	r1, #0
   136c0:	add	r2, r3, #16
   136c4:	vld1.64	{d16-d17}, [r3], lr
   136c8:	vld1.64	{d20-d21}, [r3]
   136cc:	vld1.64	{d18-d19}, [r2]
   136d0:	mov	r2, sp
   136d4:	add	r4, r2, #16
   136d8:	vst1.64	{d16-d17}, [r2], lr
   136dc:	vst1.64	{d20-d21}, [r2]
   136e0:	mov	r2, #10
   136e4:	vst1.64	{d18-d19}, [r4]
   136e8:	str	r2, [sp]
   136ec:	bne	136f4 <__assert_fail@plt+0x27c0>
   136f0:	bl	10f28 <abort@plt>
   136f4:	str	r1, [sp, #44]	; 0x2c
   136f8:	str	r0, [sp, #40]	; 0x28
   136fc:	mov	r3, sp
   13700:	mov	r0, #0
   13704:	mov	r1, ip
   13708:	mvn	r2, #0
   1370c:	bl	13030 <__assert_fail@plt+0x20fc>
   13710:	sub	sp, fp, #8
   13714:	pop	{r4, sl, fp, pc}
   13718:	push	{r4, r5, fp, lr}
   1371c:	add	fp, sp, #8
   13720:	sub	sp, sp, #48	; 0x30
   13724:	mov	ip, r3
   13728:	movw	r3, #29008	; 0x7150
   1372c:	mov	r4, #32
   13730:	mov	lr, r2
   13734:	cmp	r0, #0
   13738:	movt	r3, #2
   1373c:	cmpne	r1, #0
   13740:	add	r2, r3, #16
   13744:	vld1.64	{d16-d17}, [r3], r4
   13748:	vld1.64	{d20-d21}, [r3]
   1374c:	vld1.64	{d18-d19}, [r2]
   13750:	mov	r2, sp
   13754:	add	r5, r2, #16
   13758:	vst1.64	{d16-d17}, [r2], r4
   1375c:	vst1.64	{d20-d21}, [r2]
   13760:	mov	r2, #10
   13764:	vst1.64	{d18-d19}, [r5]
   13768:	str	r2, [sp]
   1376c:	bne	13774 <__assert_fail@plt+0x2840>
   13770:	bl	10f28 <abort@plt>
   13774:	str	r1, [sp, #44]	; 0x2c
   13778:	str	r0, [sp, #40]	; 0x28
   1377c:	mov	r3, sp
   13780:	mov	r0, #0
   13784:	mov	r1, lr
   13788:	mov	r2, ip
   1378c:	bl	13030 <__assert_fail@plt+0x20fc>
   13790:	sub	sp, fp, #8
   13794:	pop	{r4, r5, fp, pc}
   13798:	movw	r3, #28896	; 0x70e0
   1379c:	movt	r3, #2
   137a0:	b	13030 <__assert_fail@plt+0x20fc>
   137a4:	movw	r3, #28896	; 0x70e0
   137a8:	mov	r2, r1
   137ac:	mov	r1, r0
   137b0:	mov	r0, #0
   137b4:	movt	r3, #2
   137b8:	b	13030 <__assert_fail@plt+0x20fc>
   137bc:	movw	r3, #28896	; 0x70e0
   137c0:	mvn	r2, #0
   137c4:	movt	r3, #2
   137c8:	b	13030 <__assert_fail@plt+0x20fc>
   137cc:	movw	r3, #28896	; 0x70e0
   137d0:	mov	r1, r0
   137d4:	mov	r0, #0
   137d8:	mvn	r2, #0
   137dc:	movt	r3, #2
   137e0:	b	13030 <__assert_fail@plt+0x20fc>
   137e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137e8:	add	fp, sp, #24
   137ec:	sub	sp, sp, #32
   137f0:	ldr	r6, [fp, #12]
   137f4:	ldr	r7, [fp, #8]
   137f8:	mov	r4, r2
   137fc:	mov	r8, r0
   13800:	cmp	r1, #0
   13804:	beq	1382c <__assert_fail@plt+0x28f8>
   13808:	movw	r2, #23460	; 0x5ba4
   1380c:	mov	r5, r1
   13810:	str	r3, [sp, #4]
   13814:	str	r4, [sp]
   13818:	mov	r0, r8
   1381c:	mov	r1, #1
   13820:	movt	r2, #1
   13824:	mov	r3, r5
   13828:	b	13844 <__assert_fail@plt+0x2910>
   1382c:	movw	r2, #23472	; 0x5bb0
   13830:	str	r3, [sp]
   13834:	mov	r0, r8
   13838:	mov	r1, #1
   1383c:	mov	r3, r4
   13840:	movt	r2, #1
   13844:	bl	10ec8 <__fprintf_chk@plt>
   13848:	movw	r1, #23479	; 0x5bb7
   1384c:	mov	r0, #0
   13850:	mov	r2, #5
   13854:	movt	r1, #1
   13858:	bl	10d84 <dcgettext@plt>
   1385c:	movw	r2, #24197	; 0x5e85
   13860:	mov	r3, r0
   13864:	movw	r0, #2022	; 0x7e6
   13868:	mov	r1, #1
   1386c:	movt	r2, #1
   13870:	str	r0, [sp]
   13874:	mov	r0, r8
   13878:	bl	10ec8 <__fprintf_chk@plt>
   1387c:	movw	r4, #23041	; 0x5a01
   13880:	mov	r1, r8
   13884:	movt	r4, #1
   13888:	mov	r0, r4
   1388c:	bl	10d18 <fputs_unlocked@plt>
   13890:	movw	r1, #23483	; 0x5bbb
   13894:	mov	r0, #0
   13898:	mov	r2, #5
   1389c:	movt	r1, #1
   138a0:	bl	10d84 <dcgettext@plt>
   138a4:	movw	r3, #23654	; 0x5c66
   138a8:	mov	r2, r0
   138ac:	mov	r0, r8
   138b0:	mov	r1, #1
   138b4:	movt	r3, #1
   138b8:	bl	10ec8 <__fprintf_chk@plt>
   138bc:	mov	r0, r4
   138c0:	mov	r1, r8
   138c4:	bl	10d18 <fputs_unlocked@plt>
   138c8:	cmp	r6, #9
   138cc:	bhi	13908 <__assert_fail@plt+0x29d4>
   138d0:	add	r0, pc, #0
   138d4:	ldr	pc, [r0, r6, lsl #2]
   138d8:	andeq	r3, r1, r0, lsl #18
   138dc:	andeq	r3, r1, r4, lsl r9
   138e0:	andeq	r3, r1, r4, asr #18
   138e4:	andeq	r3, r1, ip, ror #18
   138e8:	muleq	r1, r4, r9
   138ec:			; <UNDEFINED> instruction: 0x000139bc
   138f0:	andeq	r3, r1, r4, ror #19
   138f4:	andeq	r3, r1, ip, lsl sl
   138f8:	andeq	r3, r1, r4, asr #21
   138fc:	andeq	r3, r1, ip, ror #20
   13900:	sub	sp, fp, #24
   13904:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13908:	movw	r1, #24007	; 0x5dc7
   1390c:	movt	r1, #1
   13910:	b	13a74 <__assert_fail@plt+0x2b40>
   13914:	movw	r1, #23688	; 0x5c88
   13918:	mov	r0, #0
   1391c:	mov	r2, #5
   13920:	movt	r1, #1
   13924:	bl	10d84 <dcgettext@plt>
   13928:	ldr	r3, [r7]
   1392c:	mov	r2, r0
   13930:	mov	r0, r8
   13934:	mov	r1, #1
   13938:	sub	sp, fp, #24
   1393c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13940:	b	10ec8 <__fprintf_chk@plt>
   13944:	movw	r1, #23704	; 0x5c98
   13948:	mov	r0, #0
   1394c:	mov	r2, #5
   13950:	movt	r1, #1
   13954:	bl	10d84 <dcgettext@plt>
   13958:	mov	r2, r0
   1395c:	ldr	r3, [r7]
   13960:	ldr	r0, [r7, #4]
   13964:	str	r0, [sp]
   13968:	b	13a58 <__assert_fail@plt+0x2b24>
   1396c:	movw	r1, #23727	; 0x5caf
   13970:	mov	r0, #0
   13974:	mov	r2, #5
   13978:	movt	r1, #1
   1397c:	bl	10d84 <dcgettext@plt>
   13980:	mov	r2, r0
   13984:	ldr	r3, [r7]
   13988:	ldmib	r7, {r0, r1}
   1398c:	stm	sp, {r0, r1}
   13990:	b	13a58 <__assert_fail@plt+0x2b24>
   13994:	movw	r1, #23755	; 0x5ccb
   13998:	mov	r0, #0
   1399c:	mov	r2, #5
   139a0:	movt	r1, #1
   139a4:	bl	10d84 <dcgettext@plt>
   139a8:	ldr	r3, [r7]
   139ac:	mov	r2, r0
   139b0:	ldmib	r7, {r0, r1, r7}
   139b4:	stm	sp, {r0, r1, r7}
   139b8:	b	13a58 <__assert_fail@plt+0x2b24>
   139bc:	movw	r1, #23787	; 0x5ceb
   139c0:	mov	r0, #0
   139c4:	mov	r2, #5
   139c8:	movt	r1, #1
   139cc:	bl	10d84 <dcgettext@plt>
   139d0:	ldr	r3, [r7]
   139d4:	mov	r2, r0
   139d8:	ldmib	r7, {r0, r1, r6, r7}
   139dc:	stm	sp, {r0, r1, r6, r7}
   139e0:	b	13a58 <__assert_fail@plt+0x2b24>
   139e4:	movw	r1, #23823	; 0x5d0f
   139e8:	mov	r0, #0
   139ec:	mov	r2, #5
   139f0:	movt	r1, #1
   139f4:	bl	10d84 <dcgettext@plt>
   139f8:	mov	r2, r0
   139fc:	ldr	r3, [r7]
   13a00:	ldmib	r7, {r0, r1, r6}
   13a04:	ldr	r5, [r7, #16]
   13a08:	ldr	r7, [r7, #20]
   13a0c:	stm	sp, {r0, r1, r6}
   13a10:	str	r5, [sp, #12]
   13a14:	str	r7, [sp, #16]
   13a18:	b	13a58 <__assert_fail@plt+0x2b24>
   13a1c:	movw	r1, #23863	; 0x5d37
   13a20:	mov	r0, #0
   13a24:	mov	r2, #5
   13a28:	movt	r1, #1
   13a2c:	bl	10d84 <dcgettext@plt>
   13a30:	mov	r2, r0
   13a34:	ldr	r3, [r7]
   13a38:	ldmib	r7, {r0, r1, r6}
   13a3c:	ldr	r5, [r7, #16]
   13a40:	ldr	r4, [r7, #20]
   13a44:	ldr	r7, [r7, #24]
   13a48:	stm	sp, {r0, r1, r6}
   13a4c:	str	r5, [sp, #12]
   13a50:	str	r4, [sp, #16]
   13a54:	str	r7, [sp, #20]
   13a58:	mov	r0, r8
   13a5c:	mov	r1, #1
   13a60:	bl	10ec8 <__fprintf_chk@plt>
   13a64:	sub	sp, fp, #24
   13a68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a6c:	movw	r1, #23955	; 0x5d93
   13a70:	movt	r1, #1
   13a74:	mov	r0, #0
   13a78:	mov	r2, #5
   13a7c:	bl	10d84 <dcgettext@plt>
   13a80:	mov	ip, r0
   13a84:	ldr	r3, [r7]
   13a88:	ldr	r0, [r7, #4]
   13a8c:	ldr	r1, [r7, #8]
   13a90:	ldr	r6, [r7, #12]
   13a94:	ldr	r5, [r7, #16]
   13a98:	ldr	r4, [r7, #20]
   13a9c:	ldr	r2, [r7, #24]
   13aa0:	ldr	lr, [r7, #28]
   13aa4:	ldr	r7, [r7, #32]
   13aa8:	stm	sp, {r0, r1, r6}
   13aac:	str	r5, [sp, #12]
   13ab0:	str	r4, [sp, #16]
   13ab4:	str	r2, [sp, #20]
   13ab8:	str	lr, [sp, #24]
   13abc:	str	r7, [sp, #28]
   13ac0:	b	13b08 <__assert_fail@plt+0x2bd4>
   13ac4:	movw	r1, #23907	; 0x5d63
   13ac8:	mov	r0, #0
   13acc:	mov	r2, #5
   13ad0:	movt	r1, #1
   13ad4:	bl	10d84 <dcgettext@plt>
   13ad8:	mov	ip, r0
   13adc:	ldr	r3, [r7]
   13ae0:	ldmib	r7, {r0, r1, r6}
   13ae4:	ldr	r5, [r7, #16]
   13ae8:	ldr	r4, [r7, #20]
   13aec:	ldr	r2, [r7, #24]
   13af0:	ldr	r7, [r7, #28]
   13af4:	stm	sp, {r0, r1, r6}
   13af8:	str	r5, [sp, #12]
   13afc:	str	r4, [sp, #16]
   13b00:	str	r2, [sp, #20]
   13b04:	str	r7, [sp, #24]
   13b08:	mov	r0, r8
   13b0c:	mov	r1, #1
   13b10:	mov	r2, ip
   13b14:	bl	10ec8 <__fprintf_chk@plt>
   13b18:	sub	sp, fp, #24
   13b1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b20:	push	{r4, sl, fp, lr}
   13b24:	add	fp, sp, #8
   13b28:	sub	sp, sp, #8
   13b2c:	ldr	ip, [fp, #8]
   13b30:	mov	lr, #0
   13b34:	ldr	r4, [ip, lr, lsl #2]
   13b38:	add	lr, lr, #1
   13b3c:	cmp	r4, #0
   13b40:	bne	13b34 <__assert_fail@plt+0x2c00>
   13b44:	sub	r4, lr, #1
   13b48:	str	ip, [sp]
   13b4c:	str	r4, [sp, #4]
   13b50:	bl	137e4 <__assert_fail@plt+0x28b0>
   13b54:	sub	sp, fp, #8
   13b58:	pop	{r4, sl, fp, pc}
   13b5c:	push	{fp, lr}
   13b60:	mov	fp, sp
   13b64:	sub	sp, sp, #48	; 0x30
   13b68:	ldr	ip, [fp, #8]
   13b6c:	ldr	lr, [ip]
   13b70:	cmp	lr, #0
   13b74:	str	lr, [sp, #8]
   13b78:	beq	13c14 <__assert_fail@plt+0x2ce0>
   13b7c:	ldr	lr, [ip, #4]
   13b80:	cmp	lr, #0
   13b84:	str	lr, [sp, #12]
   13b88:	beq	13c1c <__assert_fail@plt+0x2ce8>
   13b8c:	ldr	lr, [ip, #8]
   13b90:	cmp	lr, #0
   13b94:	str	lr, [sp, #16]
   13b98:	beq	13c24 <__assert_fail@plt+0x2cf0>
   13b9c:	ldr	lr, [ip, #12]
   13ba0:	cmp	lr, #0
   13ba4:	str	lr, [sp, #20]
   13ba8:	beq	13c2c <__assert_fail@plt+0x2cf8>
   13bac:	ldr	lr, [ip, #16]
   13bb0:	cmp	lr, #0
   13bb4:	str	lr, [sp, #24]
   13bb8:	beq	13c34 <__assert_fail@plt+0x2d00>
   13bbc:	ldr	lr, [ip, #20]
   13bc0:	cmp	lr, #0
   13bc4:	str	lr, [sp, #28]
   13bc8:	beq	13c3c <__assert_fail@plt+0x2d08>
   13bcc:	ldr	lr, [ip, #24]
   13bd0:	cmp	lr, #0
   13bd4:	str	lr, [sp, #32]
   13bd8:	beq	13c44 <__assert_fail@plt+0x2d10>
   13bdc:	ldr	lr, [ip, #28]
   13be0:	cmp	lr, #0
   13be4:	str	lr, [sp, #36]	; 0x24
   13be8:	beq	13c4c <__assert_fail@plt+0x2d18>
   13bec:	ldr	lr, [ip, #32]
   13bf0:	cmp	lr, #0
   13bf4:	str	lr, [sp, #40]	; 0x28
   13bf8:	beq	13c54 <__assert_fail@plt+0x2d20>
   13bfc:	ldr	lr, [ip, #36]	; 0x24
   13c00:	mov	ip, #10
   13c04:	cmp	lr, #0
   13c08:	str	lr, [sp, #44]	; 0x2c
   13c0c:	movweq	ip, #9
   13c10:	b	13c58 <__assert_fail@plt+0x2d24>
   13c14:	mov	ip, #0
   13c18:	b	13c58 <__assert_fail@plt+0x2d24>
   13c1c:	mov	ip, #1
   13c20:	b	13c58 <__assert_fail@plt+0x2d24>
   13c24:	mov	ip, #2
   13c28:	b	13c58 <__assert_fail@plt+0x2d24>
   13c2c:	mov	ip, #3
   13c30:	b	13c58 <__assert_fail@plt+0x2d24>
   13c34:	mov	ip, #4
   13c38:	b	13c58 <__assert_fail@plt+0x2d24>
   13c3c:	mov	ip, #5
   13c40:	b	13c58 <__assert_fail@plt+0x2d24>
   13c44:	mov	ip, #6
   13c48:	b	13c58 <__assert_fail@plt+0x2d24>
   13c4c:	mov	ip, #7
   13c50:	b	13c58 <__assert_fail@plt+0x2d24>
   13c54:	mov	ip, #8
   13c58:	add	lr, sp, #8
   13c5c:	str	ip, [sp, #4]
   13c60:	str	lr, [sp]
   13c64:	bl	137e4 <__assert_fail@plt+0x28b0>
   13c68:	mov	sp, fp
   13c6c:	pop	{fp, pc}
   13c70:	push	{fp, lr}
   13c74:	mov	fp, sp
   13c78:	sub	sp, sp, #56	; 0x38
   13c7c:	add	ip, fp, #8
   13c80:	str	ip, [sp, #12]
   13c84:	ldr	lr, [fp, #8]
   13c88:	cmp	lr, #0
   13c8c:	str	lr, [sp, #16]
   13c90:	beq	13d2c <__assert_fail@plt+0x2df8>
   13c94:	ldr	lr, [ip, #4]
   13c98:	cmp	lr, #0
   13c9c:	str	lr, [sp, #20]
   13ca0:	beq	13d34 <__assert_fail@plt+0x2e00>
   13ca4:	ldr	lr, [ip, #8]
   13ca8:	cmp	lr, #0
   13cac:	str	lr, [sp, #24]
   13cb0:	beq	13d3c <__assert_fail@plt+0x2e08>
   13cb4:	ldr	lr, [ip, #12]
   13cb8:	cmp	lr, #0
   13cbc:	str	lr, [sp, #28]
   13cc0:	beq	13d44 <__assert_fail@plt+0x2e10>
   13cc4:	ldr	lr, [ip, #16]
   13cc8:	cmp	lr, #0
   13ccc:	str	lr, [sp, #32]
   13cd0:	beq	13d4c <__assert_fail@plt+0x2e18>
   13cd4:	ldr	lr, [ip, #20]
   13cd8:	cmp	lr, #0
   13cdc:	str	lr, [sp, #36]	; 0x24
   13ce0:	beq	13d54 <__assert_fail@plt+0x2e20>
   13ce4:	ldr	lr, [ip, #24]
   13ce8:	cmp	lr, #0
   13cec:	str	lr, [sp, #40]	; 0x28
   13cf0:	beq	13d5c <__assert_fail@plt+0x2e28>
   13cf4:	ldr	lr, [ip, #28]
   13cf8:	cmp	lr, #0
   13cfc:	str	lr, [sp, #44]	; 0x2c
   13d00:	beq	13d64 <__assert_fail@plt+0x2e30>
   13d04:	ldr	lr, [ip, #32]
   13d08:	cmp	lr, #0
   13d0c:	str	lr, [sp, #48]	; 0x30
   13d10:	beq	13d6c <__assert_fail@plt+0x2e38>
   13d14:	ldr	lr, [ip, #36]	; 0x24
   13d18:	mov	ip, #10
   13d1c:	cmp	lr, #0
   13d20:	str	lr, [sp, #52]	; 0x34
   13d24:	movweq	ip, #9
   13d28:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d2c:	mov	ip, #0
   13d30:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d34:	mov	ip, #1
   13d38:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d3c:	mov	ip, #2
   13d40:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d44:	mov	ip, #3
   13d48:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d4c:	mov	ip, #4
   13d50:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d54:	mov	ip, #5
   13d58:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d5c:	mov	ip, #6
   13d60:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d64:	mov	ip, #7
   13d68:	b	13d70 <__assert_fail@plt+0x2e3c>
   13d6c:	mov	ip, #8
   13d70:	add	lr, sp, #16
   13d74:	str	ip, [sp, #4]
   13d78:	str	lr, [sp]
   13d7c:	bl	137e4 <__assert_fail@plt+0x28b0>
   13d80:	mov	sp, fp
   13d84:	pop	{fp, pc}
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	movw	r0, #28980	; 0x7134
   13d94:	movt	r0, #2
   13d98:	ldr	r1, [r0]
   13d9c:	movw	r0, #23041	; 0x5a01
   13da0:	movt	r0, #1
   13da4:	bl	10d18 <fputs_unlocked@plt>
   13da8:	movw	r1, #24067	; 0x5e03
   13dac:	mov	r0, #0
   13db0:	mov	r2, #5
   13db4:	movt	r1, #1
   13db8:	bl	10d84 <dcgettext@plt>
   13dbc:	movw	r2, #24087	; 0x5e17
   13dc0:	mov	r1, r0
   13dc4:	mov	r0, #1
   13dc8:	movt	r2, #1
   13dcc:	bl	10eb0 <__printf_chk@plt>
   13dd0:	movw	r1, #24109	; 0x5e2d
   13dd4:	mov	r0, #0
   13dd8:	mov	r2, #5
   13ddc:	movt	r1, #1
   13de0:	bl	10d84 <dcgettext@plt>
   13de4:	movw	r2, #22518	; 0x57f6
   13de8:	movw	r3, #22850	; 0x5942
   13dec:	mov	r1, r0
   13df0:	mov	r0, #1
   13df4:	movt	r2, #1
   13df8:	movt	r3, #1
   13dfc:	bl	10eb0 <__printf_chk@plt>
   13e00:	movw	r1, #24129	; 0x5e41
   13e04:	mov	r0, #0
   13e08:	mov	r2, #5
   13e0c:	movt	r1, #1
   13e10:	bl	10d84 <dcgettext@plt>
   13e14:	movw	r2, #24168	; 0x5e68
   13e18:	mov	r1, r0
   13e1c:	mov	r0, #1
   13e20:	movt	r2, #1
   13e24:	pop	{fp, lr}
   13e28:	b	10eb0 <__printf_chk@plt>
   13e2c:	push	{r4, r5, r6, sl, fp, lr}
   13e30:	add	fp, sp, #16
   13e34:	mov	r4, r2
   13e38:	mov	r5, r1
   13e3c:	mov	r6, r0
   13e40:	bl	15370 <__assert_fail@plt+0x443c>
   13e44:	cmp	r0, #0
   13e48:	popne	{r4, r5, r6, sl, fp, pc}
   13e4c:	cmp	r6, #0
   13e50:	beq	13e64 <__assert_fail@plt+0x2f30>
   13e54:	cmp	r5, #0
   13e58:	cmpne	r4, #0
   13e5c:	bne	13e64 <__assert_fail@plt+0x2f30>
   13e60:	pop	{r4, r5, r6, sl, fp, pc}
   13e64:	bl	143e0 <__assert_fail@plt+0x34ac>
   13e68:	push	{r4, r5, r6, sl, fp, lr}
   13e6c:	add	fp, sp, #16
   13e70:	mov	r4, r2
   13e74:	mov	r5, r1
   13e78:	mov	r6, r0
   13e7c:	bl	15370 <__assert_fail@plt+0x443c>
   13e80:	cmp	r0, #0
   13e84:	popne	{r4, r5, r6, sl, fp, pc}
   13e88:	cmp	r6, #0
   13e8c:	beq	13ea0 <__assert_fail@plt+0x2f6c>
   13e90:	cmp	r5, #0
   13e94:	cmpne	r4, #0
   13e98:	bne	13ea0 <__assert_fail@plt+0x2f6c>
   13e9c:	pop	{r4, r5, r6, sl, fp, pc}
   13ea0:	bl	143e0 <__assert_fail@plt+0x34ac>
   13ea4:	push	{fp, lr}
   13ea8:	mov	fp, sp
   13eac:	bl	15004 <__assert_fail@plt+0x40d0>
   13eb0:	cmp	r0, #0
   13eb4:	popne	{fp, pc}
   13eb8:	bl	143e0 <__assert_fail@plt+0x34ac>
   13ebc:	push	{fp, lr}
   13ec0:	mov	fp, sp
   13ec4:	bl	15004 <__assert_fail@plt+0x40d0>
   13ec8:	cmp	r0, #0
   13ecc:	popne	{fp, pc}
   13ed0:	bl	143e0 <__assert_fail@plt+0x34ac>
   13ed4:	push	{fp, lr}
   13ed8:	mov	fp, sp
   13edc:	bl	15004 <__assert_fail@plt+0x40d0>
   13ee0:	cmp	r0, #0
   13ee4:	popne	{fp, pc}
   13ee8:	bl	143e0 <__assert_fail@plt+0x34ac>
   13eec:	push	{r4, r5, fp, lr}
   13ef0:	add	fp, sp, #8
   13ef4:	mov	r4, r1
   13ef8:	mov	r5, r0
   13efc:	bl	15034 <__assert_fail@plt+0x4100>
   13f00:	cmp	r0, #0
   13f04:	popne	{r4, r5, fp, pc}
   13f08:	cmp	r5, #0
   13f0c:	beq	13f1c <__assert_fail@plt+0x2fe8>
   13f10:	cmp	r4, #0
   13f14:	bne	13f1c <__assert_fail@plt+0x2fe8>
   13f18:	pop	{r4, r5, fp, pc}
   13f1c:	bl	143e0 <__assert_fail@plt+0x34ac>
   13f20:	push	{fp, lr}
   13f24:	mov	fp, sp
   13f28:	cmp	r1, #0
   13f2c:	orreq	r1, r1, #1
   13f30:	bl	15034 <__assert_fail@plt+0x4100>
   13f34:	cmp	r0, #0
   13f38:	popne	{fp, pc}
   13f3c:	bl	143e0 <__assert_fail@plt+0x34ac>
   13f40:	push	{fp, lr}
   13f44:	mov	fp, sp
   13f48:	clz	r3, r2
   13f4c:	lsr	ip, r3, #5
   13f50:	clz	r3, r1
   13f54:	lsr	r3, r3, #5
   13f58:	orrs	r3, r3, ip
   13f5c:	movwne	r1, #1
   13f60:	movwne	r2, #1
   13f64:	bl	15370 <__assert_fail@plt+0x443c>
   13f68:	cmp	r0, #0
   13f6c:	popne	{fp, pc}
   13f70:	bl	143e0 <__assert_fail@plt+0x34ac>
   13f74:	push	{fp, lr}
   13f78:	mov	fp, sp
   13f7c:	mov	r2, r1
   13f80:	mov	r1, r0
   13f84:	mov	r0, #0
   13f88:	bl	15370 <__assert_fail@plt+0x443c>
   13f8c:	cmp	r0, #0
   13f90:	popne	{fp, pc}
   13f94:	bl	143e0 <__assert_fail@plt+0x34ac>
   13f98:	push	{fp, lr}
   13f9c:	mov	fp, sp
   13fa0:	mov	r2, r1
   13fa4:	mov	r1, r0
   13fa8:	clz	r0, r2
   13fac:	clz	r3, r1
   13fb0:	lsr	r0, r0, #5
   13fb4:	lsr	r3, r3, #5
   13fb8:	orrs	r0, r3, r0
   13fbc:	mov	r0, #0
   13fc0:	movwne	r1, #1
   13fc4:	movwne	r2, #1
   13fc8:	bl	15370 <__assert_fail@plt+0x443c>
   13fcc:	cmp	r0, #0
   13fd0:	popne	{fp, pc}
   13fd4:	bl	143e0 <__assert_fail@plt+0x34ac>
   13fd8:	push	{r4, r5, r6, sl, fp, lr}
   13fdc:	add	fp, sp, #16
   13fe0:	ldr	r5, [r1]
   13fe4:	mov	r4, r1
   13fe8:	mov	r6, r0
   13fec:	cmp	r0, #0
   13ff0:	beq	14008 <__assert_fail@plt+0x30d4>
   13ff4:	mov	r0, #1
   13ff8:	add	r0, r0, r5, lsr #1
   13ffc:	adds	r5, r5, r0
   14000:	bcc	14010 <__assert_fail@plt+0x30dc>
   14004:	b	1404c <__assert_fail@plt+0x3118>
   14008:	cmp	r5, #0
   1400c:	movweq	r5, #64	; 0x40
   14010:	mov	r0, r6
   14014:	mov	r1, r5
   14018:	mov	r2, #1
   1401c:	bl	15370 <__assert_fail@plt+0x443c>
   14020:	cmp	r5, #0
   14024:	mov	r1, r5
   14028:	movwne	r1, #1
   1402c:	cmp	r0, #0
   14030:	bne	14044 <__assert_fail@plt+0x3110>
   14034:	clz	r2, r6
   14038:	lsr	r2, r2, #5
   1403c:	orrs	r1, r2, r1
   14040:	bne	1404c <__assert_fail@plt+0x3118>
   14044:	str	r5, [r4]
   14048:	pop	{r4, r5, r6, sl, fp, pc}
   1404c:	bl	143e0 <__assert_fail@plt+0x34ac>
   14050:	push	{r4, r5, r6, r7, fp, lr}
   14054:	add	fp, sp, #16
   14058:	ldr	r5, [r1]
   1405c:	mov	r6, r2
   14060:	mov	r4, r1
   14064:	mov	r7, r0
   14068:	cmp	r0, #0
   1406c:	beq	14084 <__assert_fail@plt+0x3150>
   14070:	mov	r0, #1
   14074:	add	r0, r0, r5, lsr #1
   14078:	adds	r5, r5, r0
   1407c:	bcc	1409c <__assert_fail@plt+0x3168>
   14080:	b	140d0 <__assert_fail@plt+0x319c>
   14084:	cmp	r5, #0
   14088:	bne	1409c <__assert_fail@plt+0x3168>
   1408c:	mov	r0, #64	; 0x40
   14090:	cmp	r6, #64	; 0x40
   14094:	udiv	r5, r0, r6
   14098:	addhi	r5, r5, #1
   1409c:	mov	r0, r7
   140a0:	mov	r1, r5
   140a4:	mov	r2, r6
   140a8:	bl	15370 <__assert_fail@plt+0x443c>
   140ac:	cmp	r0, #0
   140b0:	bne	140c8 <__assert_fail@plt+0x3194>
   140b4:	cmp	r7, #0
   140b8:	beq	140d0 <__assert_fail@plt+0x319c>
   140bc:	cmp	r6, #0
   140c0:	cmpne	r5, #0
   140c4:	bne	140d0 <__assert_fail@plt+0x319c>
   140c8:	str	r5, [r4]
   140cc:	pop	{r4, r5, r6, r7, fp, pc}
   140d0:	bl	143e0 <__assert_fail@plt+0x34ac>
   140d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140d8:	add	fp, sp, #24
   140dc:	mov	r8, r1
   140e0:	ldr	r1, [r1]
   140e4:	mov	r5, r0
   140e8:	add	r0, r1, r1, asr #1
   140ec:	cmp	r0, r1
   140f0:	mvnvs	r0, #-2147483648	; 0x80000000
   140f4:	cmp	r0, r3
   140f8:	mov	r7, r0
   140fc:	movgt	r7, r3
   14100:	cmn	r3, #1
   14104:	movle	r7, r0
   14108:	ldr	r0, [fp, #8]
   1410c:	cmn	r0, #1
   14110:	ble	14138 <__assert_fail@plt+0x3204>
   14114:	cmp	r0, #0
   14118:	beq	1418c <__assert_fail@plt+0x3258>
   1411c:	cmn	r7, #1
   14120:	ble	14160 <__assert_fail@plt+0x322c>
   14124:	mvn	r4, #-2147483648	; 0x80000000
   14128:	udiv	r6, r4, r0
   1412c:	cmp	r6, r7
   14130:	bge	1418c <__assert_fail@plt+0x3258>
   14134:	b	1419c <__assert_fail@plt+0x3268>
   14138:	cmn	r7, #1
   1413c:	ble	1417c <__assert_fail@plt+0x3248>
   14140:	cmn	r0, #1
   14144:	beq	1418c <__assert_fail@plt+0x3258>
   14148:	mov	r6, #-2147483648	; 0x80000000
   1414c:	mvn	r4, #-2147483648	; 0x80000000
   14150:	sdiv	r6, r6, r0
   14154:	cmp	r6, r7
   14158:	bge	1418c <__assert_fail@plt+0x3258>
   1415c:	b	1419c <__assert_fail@plt+0x3268>
   14160:	beq	1418c <__assert_fail@plt+0x3258>
   14164:	mov	r6, #-2147483648	; 0x80000000
   14168:	mvn	r4, #-2147483648	; 0x80000000
   1416c:	sdiv	r6, r6, r7
   14170:	cmp	r6, r0
   14174:	bge	1418c <__assert_fail@plt+0x3258>
   14178:	b	1419c <__assert_fail@plt+0x3268>
   1417c:	mvn	r4, #-2147483648	; 0x80000000
   14180:	sdiv	r6, r4, r0
   14184:	cmp	r7, r6
   14188:	blt	1419c <__assert_fail@plt+0x3268>
   1418c:	mul	r6, r7, r0
   14190:	mov	r4, #64	; 0x40
   14194:	cmp	r6, #63	; 0x3f
   14198:	bgt	141a4 <__assert_fail@plt+0x3270>
   1419c:	sdiv	r7, r4, r0
   141a0:	mul	r6, r7, r0
   141a4:	cmp	r5, #0
   141a8:	moveq	r4, #0
   141ac:	streq	r4, [r8]
   141b0:	sub	r4, r7, r1
   141b4:	cmp	r4, r2
   141b8:	bge	14264 <__assert_fail@plt+0x3330>
   141bc:	add	r7, r1, r2
   141c0:	mov	r6, #0
   141c4:	mov	r2, #0
   141c8:	cmp	r7, r3
   141cc:	movwgt	r6, #1
   141d0:	cmn	r3, #1
   141d4:	movwgt	r2, #1
   141d8:	cmp	r7, r1
   141dc:	bvs	14298 <__assert_fail@plt+0x3364>
   141e0:	ands	r1, r2, r6
   141e4:	bne	14298 <__assert_fail@plt+0x3364>
   141e8:	cmn	r0, #1
   141ec:	ble	14214 <__assert_fail@plt+0x32e0>
   141f0:	cmp	r0, #0
   141f4:	beq	14260 <__assert_fail@plt+0x332c>
   141f8:	cmn	r7, #1
   141fc:	ble	14238 <__assert_fail@plt+0x3304>
   14200:	mvn	r1, #-2147483648	; 0x80000000
   14204:	udiv	r1, r1, r0
   14208:	cmp	r1, r7
   1420c:	bge	14260 <__assert_fail@plt+0x332c>
   14210:	b	14298 <__assert_fail@plt+0x3364>
   14214:	cmn	r7, #1
   14218:	ble	14250 <__assert_fail@plt+0x331c>
   1421c:	cmn	r0, #1
   14220:	beq	14260 <__assert_fail@plt+0x332c>
   14224:	mov	r1, #-2147483648	; 0x80000000
   14228:	sdiv	r1, r1, r0
   1422c:	cmp	r1, r7
   14230:	bge	14260 <__assert_fail@plt+0x332c>
   14234:	b	14298 <__assert_fail@plt+0x3364>
   14238:	beq	14260 <__assert_fail@plt+0x332c>
   1423c:	mov	r1, #-2147483648	; 0x80000000
   14240:	sdiv	r1, r1, r7
   14244:	cmp	r1, r0
   14248:	bge	14260 <__assert_fail@plt+0x332c>
   1424c:	b	14298 <__assert_fail@plt+0x3364>
   14250:	mvn	r1, #-2147483648	; 0x80000000
   14254:	sdiv	r1, r1, r0
   14258:	cmp	r7, r1
   1425c:	blt	14298 <__assert_fail@plt+0x3364>
   14260:	mul	r6, r7, r0
   14264:	mov	r0, r5
   14268:	mov	r1, r6
   1426c:	bl	15034 <__assert_fail@plt+0x4100>
   14270:	cmp	r6, #0
   14274:	movwne	r6, #1
   14278:	cmp	r0, #0
   1427c:	bne	14290 <__assert_fail@plt+0x335c>
   14280:	clz	r1, r5
   14284:	lsr	r1, r1, #5
   14288:	orrs	r1, r1, r6
   1428c:	bne	14298 <__assert_fail@plt+0x3364>
   14290:	str	r7, [r8]
   14294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14298:	bl	143e0 <__assert_fail@plt+0x34ac>
   1429c:	push	{fp, lr}
   142a0:	mov	fp, sp
   142a4:	mov	r1, #1
   142a8:	bl	14fb0 <__assert_fail@plt+0x407c>
   142ac:	cmp	r0, #0
   142b0:	popne	{fp, pc}
   142b4:	bl	143e0 <__assert_fail@plt+0x34ac>
   142b8:	push	{fp, lr}
   142bc:	mov	fp, sp
   142c0:	bl	14fb0 <__assert_fail@plt+0x407c>
   142c4:	cmp	r0, #0
   142c8:	popne	{fp, pc}
   142cc:	bl	143e0 <__assert_fail@plt+0x34ac>
   142d0:	push	{fp, lr}
   142d4:	mov	fp, sp
   142d8:	mov	r1, #1
   142dc:	bl	14fb0 <__assert_fail@plt+0x407c>
   142e0:	cmp	r0, #0
   142e4:	popne	{fp, pc}
   142e8:	bl	143e0 <__assert_fail@plt+0x34ac>
   142ec:	push	{fp, lr}
   142f0:	mov	fp, sp
   142f4:	bl	14fb0 <__assert_fail@plt+0x407c>
   142f8:	cmp	r0, #0
   142fc:	popne	{fp, pc}
   14300:	bl	143e0 <__assert_fail@plt+0x34ac>
   14304:	push	{r4, r5, fp, lr}
   14308:	add	fp, sp, #8
   1430c:	mov	r5, r0
   14310:	mov	r0, r1
   14314:	mov	r4, r1
   14318:	bl	15004 <__assert_fail@plt+0x40d0>
   1431c:	cmp	r0, #0
   14320:	beq	14334 <__assert_fail@plt+0x3400>
   14324:	mov	r1, r5
   14328:	mov	r2, r4
   1432c:	pop	{r4, r5, fp, lr}
   14330:	b	10d60 <memcpy@plt>
   14334:	bl	143e0 <__assert_fail@plt+0x34ac>
   14338:	push	{r4, r5, fp, lr}
   1433c:	add	fp, sp, #8
   14340:	mov	r5, r0
   14344:	mov	r0, r1
   14348:	mov	r4, r1
   1434c:	bl	15004 <__assert_fail@plt+0x40d0>
   14350:	cmp	r0, #0
   14354:	beq	14368 <__assert_fail@plt+0x3434>
   14358:	mov	r1, r5
   1435c:	mov	r2, r4
   14360:	pop	{r4, r5, fp, lr}
   14364:	b	10d60 <memcpy@plt>
   14368:	bl	143e0 <__assert_fail@plt+0x34ac>
   1436c:	push	{r4, r5, fp, lr}
   14370:	add	fp, sp, #8
   14374:	mov	r5, r0
   14378:	add	r0, r1, #1
   1437c:	mov	r4, r1
   14380:	bl	15004 <__assert_fail@plt+0x40d0>
   14384:	cmp	r0, #0
   14388:	beq	143a4 <__assert_fail@plt+0x3470>
   1438c:	mov	r1, #0
   14390:	mov	r2, r4
   14394:	strb	r1, [r0, r4]
   14398:	mov	r1, r5
   1439c:	pop	{r4, r5, fp, lr}
   143a0:	b	10d60 <memcpy@plt>
   143a4:	bl	143e0 <__assert_fail@plt+0x34ac>
   143a8:	push	{r4, r5, fp, lr}
   143ac:	add	fp, sp, #8
   143b0:	mov	r4, r0
   143b4:	bl	10e74 <strlen@plt>
   143b8:	add	r5, r0, #1
   143bc:	mov	r0, r5
   143c0:	bl	15004 <__assert_fail@plt+0x40d0>
   143c4:	cmp	r0, #0
   143c8:	beq	143dc <__assert_fail@plt+0x34a8>
   143cc:	mov	r1, r4
   143d0:	mov	r2, r5
   143d4:	pop	{r4, r5, fp, lr}
   143d8:	b	10d60 <memcpy@plt>
   143dc:	bl	143e0 <__assert_fail@plt+0x34ac>
   143e0:	push	{fp, lr}
   143e4:	mov	fp, sp
   143e8:	movw	r0, #28892	; 0x70dc
   143ec:	movw	r1, #24244	; 0x5eb4
   143f0:	mov	r2, #5
   143f4:	movt	r0, #2
   143f8:	movt	r1, #1
   143fc:	ldr	r4, [r0]
   14400:	mov	r0, #0
   14404:	bl	10d84 <dcgettext@plt>
   14408:	movw	r2, #23207	; 0x5aa7
   1440c:	mov	r3, r0
   14410:	mov	r0, r4
   14414:	mov	r1, #0
   14418:	movt	r2, #1
   1441c:	bl	10dfc <error@plt>
   14420:	bl	10f28 <abort@plt>
   14424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14428:	add	fp, sp, #28
   1442c:	sub	sp, sp, #12
   14430:	cmp	r2, #37	; 0x25
   14434:	bcs	14f90 <__assert_fail@plt+0x405c>
   14438:	ldr	r8, [fp, #8]
   1443c:	mov	r9, r3
   14440:	mov	r7, r2
   14444:	mov	r4, r1
   14448:	mov	r5, r0
   1444c:	bl	10e8c <__errno_location@plt>
   14450:	cmp	r4, #0
   14454:	add	sl, sp, #8
   14458:	mov	r6, r0
   1445c:	mov	r0, #0
   14460:	mov	r2, r7
   14464:	movne	sl, r4
   14468:	str	r0, [r6]
   1446c:	mov	r0, r5
   14470:	mov	r1, sl
   14474:	bl	10d30 <strtol@plt>
   14478:	ldr	r4, [sl]
   1447c:	str	r9, [sp, #4]
   14480:	cmp	r4, r5
   14484:	beq	144c0 <__assert_fail@plt+0x358c>
   14488:	mov	r7, r0
   1448c:	ldr	r0, [r6]
   14490:	cmp	r0, #0
   14494:	beq	14628 <__assert_fail@plt+0x36f4>
   14498:	mov	r9, #4
   1449c:	cmp	r0, #34	; 0x22
   144a0:	bne	147ec <__assert_fail@plt+0x38b8>
   144a4:	mov	r9, #1
   144a8:	cmp	r8, #0
   144ac:	beq	14f64 <__assert_fail@plt+0x4030>
   144b0:	ldrb	r5, [r4]
   144b4:	cmp	r5, #0
   144b8:	bne	144fc <__assert_fail@plt+0x35c8>
   144bc:	b	14f64 <__assert_fail@plt+0x4030>
   144c0:	mov	r9, #4
   144c4:	cmp	r8, #0
   144c8:	beq	147ec <__assert_fail@plt+0x38b8>
   144cc:	ldrb	r1, [r5]
   144d0:	cmp	r1, #0
   144d4:	beq	147ec <__assert_fail@plt+0x38b8>
   144d8:	mov	r0, r8
   144dc:	bl	10e80 <strchr@plt>
   144e0:	cmp	r0, #0
   144e4:	beq	147ec <__assert_fail@plt+0x38b8>
   144e8:	mov	r7, #1
   144ec:	mov	r9, #0
   144f0:	ldrb	r5, [r4]
   144f4:	cmp	r5, #0
   144f8:	beq	14f64 <__assert_fail@plt+0x4030>
   144fc:	mov	r0, r8
   14500:	mov	r1, r5
   14504:	bl	10e80 <strchr@plt>
   14508:	cmp	r0, #0
   1450c:	beq	147e0 <__assert_fail@plt+0x38ac>
   14510:	sub	r0, r5, #69	; 0x45
   14514:	mov	ip, #1
   14518:	mov	r6, #1024	; 0x400
   1451c:	cmp	r0, #47	; 0x2f
   14520:	bhi	1463c <__assert_fail@plt+0x3708>
   14524:	add	r1, pc, #0
   14528:	ldr	pc, [r1, r0, lsl #2]
   1452c:	andeq	r4, r1, ip, ror #11
   14530:	andeq	r4, r1, ip, lsr r6
   14534:	andeq	r4, r1, ip, ror #11
   14538:	andeq	r4, r1, ip, lsr r6
   1453c:	andeq	r4, r1, ip, lsr r6
   14540:	andeq	r4, r1, ip, lsr r6
   14544:	andeq	r4, r1, ip, ror #11
   14548:	andeq	r4, r1, ip, lsr r6
   1454c:	andeq	r4, r1, ip, ror #11
   14550:	andeq	r4, r1, ip, lsr r6
   14554:	andeq	r4, r1, ip, lsr r6
   14558:	andeq	r4, r1, ip, ror #11
   1455c:	andeq	r4, r1, ip, lsr r6
   14560:	andeq	r4, r1, ip, lsr r6
   14564:	andeq	r4, r1, ip, lsr r6
   14568:	andeq	r4, r1, ip, ror #11
   1456c:	andeq	r4, r1, ip, lsr r6
   14570:	andeq	r4, r1, ip, lsr r6
   14574:	andeq	r4, r1, ip, lsr r6
   14578:	andeq	r4, r1, ip, lsr r6
   1457c:	andeq	r4, r1, ip, ror #11
   14580:	andeq	r4, r1, ip, ror #11
   14584:	andeq	r4, r1, ip, lsr r6
   14588:	andeq	r4, r1, ip, lsr r6
   1458c:	andeq	r4, r1, ip, lsr r6
   14590:	andeq	r4, r1, ip, lsr r6
   14594:	andeq	r4, r1, ip, lsr r6
   14598:	andeq	r4, r1, ip, lsr r6
   1459c:	andeq	r4, r1, ip, lsr r6
   145a0:	andeq	r4, r1, ip, lsr r6
   145a4:	andeq	r4, r1, ip, lsr r6
   145a8:	andeq	r4, r1, ip, lsr r6
   145ac:	andeq	r4, r1, ip, lsr r6
   145b0:	andeq	r4, r1, ip, lsr r6
   145b4:	andeq	r4, r1, ip, ror #11
   145b8:	andeq	r4, r1, ip, lsr r6
   145bc:	andeq	r4, r1, ip, lsr r6
   145c0:	andeq	r4, r1, ip, lsr r6
   145c4:	andeq	r4, r1, ip, ror #11
   145c8:	andeq	r4, r1, ip, lsr r6
   145cc:	andeq	r4, r1, ip, ror #11
   145d0:	andeq	r4, r1, ip, lsr r6
   145d4:	andeq	r4, r1, ip, lsr r6
   145d8:	andeq	r4, r1, ip, lsr r6
   145dc:	andeq	r4, r1, ip, lsr r6
   145e0:	andeq	r4, r1, ip, lsr r6
   145e4:	andeq	r4, r1, ip, lsr r6
   145e8:	andeq	r4, r1, ip, ror #11
   145ec:	mov	r0, r8
   145f0:	mov	r1, #48	; 0x30
   145f4:	bl	10e80 <strchr@plt>
   145f8:	cmp	r0, #0
   145fc:	beq	14638 <__assert_fail@plt+0x3704>
   14600:	ldrb	r0, [r4, #1]
   14604:	cmp	r0, #66	; 0x42
   14608:	cmpne	r0, #68	; 0x44
   1460c:	bne	1474c <__assert_fail@plt+0x3818>
   14610:	mov	ip, #2
   14614:	mov	r6, #1000	; 0x3e8
   14618:	sub	r1, r5, #66	; 0x42
   1461c:	cmp	r1, #53	; 0x35
   14620:	bls	14648 <__assert_fail@plt+0x3714>
   14624:	b	147e0 <__assert_fail@plt+0x38ac>
   14628:	mov	r9, r0
   1462c:	cmp	r8, #0
   14630:	bne	144b0 <__assert_fail@plt+0x357c>
   14634:	b	14f64 <__assert_fail@plt+0x4030>
   14638:	mov	ip, #1
   1463c:	sub	r1, r5, #66	; 0x42
   14640:	cmp	r1, #53	; 0x35
   14644:	bhi	147e0 <__assert_fail@plt+0x38ac>
   14648:	add	r2, pc, #4
   1464c:	mov	r0, #0
   14650:	ldr	pc, [r2, r1, lsl #2]
   14654:	andeq	r4, r1, r8, lsl r8
   14658:	andeq	r4, r1, r0, ror #15
   1465c:	andeq	r4, r1, r0, ror #15
   14660:	andeq	r4, r1, ip, lsr #16
   14664:	andeq	r4, r1, r0, ror #15
   14668:	andeq	r4, r1, ip, lsr #14
   1466c:	andeq	r4, r1, r0, ror #15
   14670:	andeq	r4, r1, r0, ror #15
   14674:	andeq	r4, r1, r0, ror #15
   14678:	andeq	r4, r1, r4, ror r7
   1467c:	andeq	r4, r1, r0, ror #15
   14680:	muleq	r1, r0, r7
   14684:	andeq	r4, r1, r0, ror #15
   14688:	andeq	r4, r1, r0, ror #15
   1468c:	andeq	r4, r1, ip, asr #16
   14690:	andeq	r4, r1, r0, ror #15
   14694:	andeq	r4, r1, r0, ror #15
   14698:	andeq	r4, r1, r0, ror #15
   1469c:			; <UNDEFINED> instruction: 0x000147b0
   146a0:	andeq	r4, r1, r0, ror #15
   146a4:	andeq	r4, r1, r0, ror #15
   146a8:	andeq	r4, r1, r0, ror #15
   146ac:	andeq	r4, r1, r0, ror #15
   146b0:	andeq	r4, r1, ip, ror #16
   146b4:	strdeq	r4, [r1], -r8
   146b8:	andeq	r4, r1, r0, ror #15
   146bc:	andeq	r4, r1, r0, ror #15
   146c0:	andeq	r4, r1, r0, ror #15
   146c4:	andeq	r4, r1, r0, ror #15
   146c8:	andeq	r4, r1, r0, ror #15
   146cc:	andeq	r4, r1, r0, ror #15
   146d0:	andeq	r4, r1, r0, ror #15
   146d4:	andeq	r4, r1, ip, lsl #17
   146d8:	andeq	r4, r1, ip, asr #30
   146dc:	andeq	r4, r1, r0, ror #15
   146e0:	andeq	r4, r1, r0, ror #15
   146e4:	andeq	r4, r1, r0, ror #15
   146e8:	andeq	r4, r1, ip, lsr #14
   146ec:	andeq	r4, r1, r0, ror #15
   146f0:	andeq	r4, r1, r0, ror #15
   146f4:	andeq	r4, r1, r0, ror #15
   146f8:	andeq	r4, r1, r4, ror r7
   146fc:	andeq	r4, r1, r0, ror #15
   14700:	muleq	r1, r0, r7
   14704:	andeq	r4, r1, r0, ror #15
   14708:	andeq	r4, r1, r0, ror #15
   1470c:	andeq	r4, r1, r0, ror #15
   14710:	andeq	r4, r1, r0, ror #15
   14714:	andeq	r4, r1, r0, ror #15
   14718:	andeq	r4, r1, r0, ror #15
   1471c:			; <UNDEFINED> instruction: 0x000147b0
   14720:	andeq	r4, r1, r0, ror #15
   14724:	andeq	r4, r1, r0, ror #15
   14728:	andeq	r4, r1, ip, lsr #17
   1472c:	cmn	r7, #1
   14730:	ble	148c0 <__assert_fail@plt+0x398c>
   14734:	mvn	r2, #-2147483648	; 0x80000000
   14738:	mov	r3, #1
   1473c:	udiv	r0, r2, r6
   14740:	cmp	r0, r7
   14744:	bge	148d8 <__assert_fail@plt+0x39a4>
   14748:	b	14998 <__assert_fail@plt+0x3a64>
   1474c:	cmp	r0, #105	; 0x69
   14750:	bne	147d0 <__assert_fail@plt+0x389c>
   14754:	ldrb	r0, [r4, #2]
   14758:	mov	ip, #1
   1475c:	cmp	r0, #66	; 0x42
   14760:	movweq	ip, #3
   14764:	sub	r1, r5, #66	; 0x42
   14768:	cmp	r1, #53	; 0x35
   1476c:	bls	14648 <__assert_fail@plt+0x3714>
   14770:	b	147e0 <__assert_fail@plt+0x38ac>
   14774:	cmn	r7, #1
   14778:	ble	148ec <__assert_fail@plt+0x39b8>
   1477c:	mvn	r1, #-2147483648	; 0x80000000
   14780:	udiv	r1, r1, r6
   14784:	cmp	r1, r7
   14788:	bge	14900 <__assert_fail@plt+0x39cc>
   1478c:	b	14b68 <__assert_fail@plt+0x3c34>
   14790:	cmn	r7, #1
   14794:	ble	14908 <__assert_fail@plt+0x39d4>
   14798:	mvn	r1, #-2147483648	; 0x80000000
   1479c:	mov	r0, #1
   147a0:	udiv	r2, r1, r6
   147a4:	cmp	r2, r7
   147a8:	bge	14920 <__assert_fail@plt+0x39ec>
   147ac:	b	149d4 <__assert_fail@plt+0x3aa0>
   147b0:	cmn	r7, #1
   147b4:	ble	14934 <__assert_fail@plt+0x3a00>
   147b8:	mvn	r0, #-2147483648	; 0x80000000
   147bc:	mov	r1, #1
   147c0:	udiv	r2, r0, r6
   147c4:	cmp	r2, r7
   147c8:	bge	1494c <__assert_fail@plt+0x3a18>
   147cc:	b	1495c <__assert_fail@plt+0x3a28>
   147d0:	mov	ip, #1
   147d4:	sub	r1, r5, #66	; 0x42
   147d8:	cmp	r1, #53	; 0x35
   147dc:	bls	14648 <__assert_fail@plt+0x3714>
   147e0:	ldr	r0, [sp, #4]
   147e4:	orr	r9, r9, #2
   147e8:	str	r7, [r0]
   147ec:	mov	r0, r9
   147f0:	sub	sp, fp, #28
   147f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f8:	cmp	r7, #0
   147fc:	bmi	14a0c <__assert_fail@plt+0x3ad8>
   14800:	mvn	r0, #-2147483648	; 0x80000000
   14804:	mov	r3, #1
   14808:	udiv	r1, r0, r6
   1480c:	cmp	r1, r7
   14810:	bge	14a28 <__assert_fail@plt+0x3af4>
   14814:	b	14a38 <__assert_fail@plt+0x3b04>
   14818:	cmn	r7, #1
   1481c:	ble	14a50 <__assert_fail@plt+0x3b1c>
   14820:	cmp	r7, #2097152	; 0x200000
   14824:	blt	14a64 <__assert_fail@plt+0x3b30>
   14828:	b	14b68 <__assert_fail@plt+0x3c34>
   1482c:	cmp	r7, #0
   14830:	bmi	14a6c <__assert_fail@plt+0x3b38>
   14834:	mvn	r0, #-2147483648	; 0x80000000
   14838:	mov	r3, #1
   1483c:	udiv	r1, r0, r6
   14840:	cmp	r1, r7
   14844:	bge	14a88 <__assert_fail@plt+0x3b54>
   14848:	b	14a98 <__assert_fail@plt+0x3b64>
   1484c:	cmp	r7, #0
   14850:	bmi	14ab0 <__assert_fail@plt+0x3b7c>
   14854:	mvn	r0, #-2147483648	; 0x80000000
   14858:	mov	r3, #1
   1485c:	udiv	r1, r0, r6
   14860:	cmp	r1, r7
   14864:	bge	14acc <__assert_fail@plt+0x3b98>
   14868:	b	14adc <__assert_fail@plt+0x3ba8>
   1486c:	cmp	r7, #0
   14870:	bmi	14af4 <__assert_fail@plt+0x3bc0>
   14874:	mvn	r0, #-2147483648	; 0x80000000
   14878:	mov	r3, #1
   1487c:	udiv	r1, r0, r6
   14880:	cmp	r1, r7
   14884:	bge	14b10 <__assert_fail@plt+0x3bdc>
   14888:	b	14b20 <__assert_fail@plt+0x3bec>
   1488c:	cmn	r7, #1
   14890:	ble	14b38 <__assert_fail@plt+0x3c04>
   14894:	movw	r1, #65535	; 0xffff
   14898:	movt	r1, #31
   1489c:	orr	r1, r1, #2097152	; 0x200000
   148a0:	cmp	r7, r1
   148a4:	ble	14b4c <__assert_fail@plt+0x3c18>
   148a8:	b	14b68 <__assert_fail@plt+0x3c34>
   148ac:	cmn	r7, #1
   148b0:	ble	14b54 <__assert_fail@plt+0x3c20>
   148b4:	cmp	r7, #1073741824	; 0x40000000
   148b8:	bge	14b68 <__assert_fail@plt+0x3c34>
   148bc:	b	14b80 <__assert_fail@plt+0x3c4c>
   148c0:	beq	148d8 <__assert_fail@plt+0x39a4>
   148c4:	mov	r2, #-2147483648	; 0x80000000
   148c8:	mov	r3, #1
   148cc:	sdiv	r0, r2, r7
   148d0:	cmp	r0, r6
   148d4:	blt	149b0 <__assert_fail@plt+0x3a7c>
   148d8:	mul	r2, r7, r6
   148dc:	mov	r3, #0
   148e0:	cmp	r2, #0
   148e4:	bpl	14998 <__assert_fail@plt+0x3a64>
   148e8:	b	149b0 <__assert_fail@plt+0x3a7c>
   148ec:	beq	14900 <__assert_fail@plt+0x39cc>
   148f0:	mov	r1, #-2147483648	; 0x80000000
   148f4:	sdiv	r1, r1, r7
   148f8:	cmp	r1, r6
   148fc:	blt	14b68 <__assert_fail@plt+0x3c34>
   14900:	mul	r7, r7, r6
   14904:	b	14f4c <__assert_fail@plt+0x4018>
   14908:	beq	14920 <__assert_fail@plt+0x39ec>
   1490c:	mov	r1, #-2147483648	; 0x80000000
   14910:	mov	r0, #1
   14914:	sdiv	r2, r1, r7
   14918:	cmp	r2, r6
   1491c:	blt	149ec <__assert_fail@plt+0x3ab8>
   14920:	mul	r1, r7, r6
   14924:	mov	r0, #0
   14928:	cmp	r1, #0
   1492c:	bpl	149d4 <__assert_fail@plt+0x3aa0>
   14930:	b	149ec <__assert_fail@plt+0x3ab8>
   14934:	beq	1494c <__assert_fail@plt+0x3a18>
   14938:	mov	r0, #-2147483648	; 0x80000000
   1493c:	mov	r1, #1
   14940:	sdiv	r2, r0, r7
   14944:	cmp	r2, r6
   14948:	blt	14974 <__assert_fail@plt+0x3a40>
   1494c:	mul	r0, r7, r6
   14950:	mov	r1, #0
   14954:	cmp	r0, #0
   14958:	bmi	14974 <__assert_fail@plt+0x3a40>
   1495c:	mvn	r2, #-2147483648	; 0x80000000
   14960:	mov	r3, #1
   14964:	udiv	r7, r2, r6
   14968:	cmp	r7, r0
   1496c:	blt	14998 <__assert_fail@plt+0x3a64>
   14970:	b	14988 <__assert_fail@plt+0x3a54>
   14974:	mov	r2, #-2147483648	; 0x80000000
   14978:	mov	r3, #1
   1497c:	sdiv	r7, r2, r0
   14980:	cmp	r7, r6
   14984:	blt	149b0 <__assert_fail@plt+0x3a7c>
   14988:	mul	r2, r0, r6
   1498c:	mov	r3, r1
   14990:	cmp	r2, #0
   14994:	bmi	149b0 <__assert_fail@plt+0x3a7c>
   14998:	mvn	r1, #-2147483648	; 0x80000000
   1499c:	mov	r0, #1
   149a0:	udiv	r7, r1, r6
   149a4:	cmp	r7, r2
   149a8:	blt	149d4 <__assert_fail@plt+0x3aa0>
   149ac:	b	149c4 <__assert_fail@plt+0x3a90>
   149b0:	mov	r1, #-2147483648	; 0x80000000
   149b4:	mov	r0, #1
   149b8:	sdiv	r7, r1, r2
   149bc:	cmp	r7, r6
   149c0:	blt	149ec <__assert_fail@plt+0x3ab8>
   149c4:	mul	r1, r2, r6
   149c8:	mov	r0, r3
   149cc:	cmp	r1, #0
   149d0:	bmi	149ec <__assert_fail@plt+0x3ab8>
   149d4:	mvn	r7, #-2147483648	; 0x80000000
   149d8:	mov	r2, #1
   149dc:	udiv	r3, r7, r6
   149e0:	cmp	r3, r1
   149e4:	blt	14f48 <__assert_fail@plt+0x4014>
   149e8:	b	14a00 <__assert_fail@plt+0x3acc>
   149ec:	mov	r7, #-2147483648	; 0x80000000
   149f0:	mov	r2, #1
   149f4:	sdiv	r3, r7, r1
   149f8:	cmp	r3, r6
   149fc:	blt	14f48 <__assert_fail@plt+0x4014>
   14a00:	mov	r2, #0
   14a04:	mul	r7, r1, r6
   14a08:	b	14f48 <__assert_fail@plt+0x4014>
   14a0c:	cmn	r7, #1
   14a10:	beq	14a28 <__assert_fail@plt+0x3af4>
   14a14:	mov	r0, #-2147483648	; 0x80000000
   14a18:	mov	r3, #1
   14a1c:	sdiv	r1, r0, r7
   14a20:	cmp	r1, r6
   14a24:	blt	14b88 <__assert_fail@plt+0x3c54>
   14a28:	mul	r0, r7, r6
   14a2c:	mov	r3, #0
   14a30:	cmp	r0, #0
   14a34:	bmi	14b88 <__assert_fail@plt+0x3c54>
   14a38:	mvn	r1, #-2147483648	; 0x80000000
   14a3c:	mov	r2, #1
   14a40:	udiv	r7, r1, r6
   14a44:	cmp	r7, r0
   14a48:	bge	14b9c <__assert_fail@plt+0x3c68>
   14a4c:	b	14bac <__assert_fail@plt+0x3c78>
   14a50:	beq	14a64 <__assert_fail@plt+0x3b30>
   14a54:	mov	r1, #-2147483648	; 0x80000000
   14a58:	sdiv	r1, r1, r7
   14a5c:	cmp	r1, #1024	; 0x400
   14a60:	blt	14b68 <__assert_fail@plt+0x3c34>
   14a64:	lsl	r7, r7, #10
   14a68:	b	14f4c <__assert_fail@plt+0x4018>
   14a6c:	cmn	r7, #1
   14a70:	beq	14a88 <__assert_fail@plt+0x3b54>
   14a74:	mov	r0, #-2147483648	; 0x80000000
   14a78:	mov	r3, #1
   14a7c:	sdiv	r1, r0, r7
   14a80:	cmp	r1, r6
   14a84:	blt	14c68 <__assert_fail@plt+0x3d34>
   14a88:	mul	r0, r7, r6
   14a8c:	mov	r3, #0
   14a90:	cmp	r0, #0
   14a94:	bmi	14c68 <__assert_fail@plt+0x3d34>
   14a98:	mvn	r1, #-2147483648	; 0x80000000
   14a9c:	mov	r2, #1
   14aa0:	udiv	r7, r1, r6
   14aa4:	cmp	r7, r0
   14aa8:	bge	14c7c <__assert_fail@plt+0x3d48>
   14aac:	b	14c8c <__assert_fail@plt+0x3d58>
   14ab0:	cmn	r7, #1
   14ab4:	beq	14acc <__assert_fail@plt+0x3b98>
   14ab8:	mov	r0, #-2147483648	; 0x80000000
   14abc:	mov	r3, #1
   14ac0:	sdiv	r1, r0, r7
   14ac4:	cmp	r1, r6
   14ac8:	blt	14d48 <__assert_fail@plt+0x3e14>
   14acc:	mul	r0, r7, r6
   14ad0:	mov	r3, #0
   14ad4:	cmp	r0, #0
   14ad8:	bmi	14d48 <__assert_fail@plt+0x3e14>
   14adc:	mvn	r1, #-2147483648	; 0x80000000
   14ae0:	mov	r2, #1
   14ae4:	udiv	r7, r1, r6
   14ae8:	cmp	r7, r0
   14aec:	bge	14d5c <__assert_fail@plt+0x3e28>
   14af0:	b	14d6c <__assert_fail@plt+0x3e38>
   14af4:	cmn	r7, #1
   14af8:	beq	14b10 <__assert_fail@plt+0x3bdc>
   14afc:	mov	r0, #-2147483648	; 0x80000000
   14b00:	mov	r3, #1
   14b04:	sdiv	r1, r0, r7
   14b08:	cmp	r1, r6
   14b0c:	blt	14dac <__assert_fail@plt+0x3e78>
   14b10:	mul	r0, r7, r6
   14b14:	mov	r3, #0
   14b18:	cmp	r0, #0
   14b1c:	bmi	14dac <__assert_fail@plt+0x3e78>
   14b20:	mvn	r1, #-2147483648	; 0x80000000
   14b24:	mov	r2, #1
   14b28:	udiv	r7, r1, r6
   14b2c:	cmp	r7, r0
   14b30:	bge	14dc0 <__assert_fail@plt+0x3e8c>
   14b34:	b	14dd0 <__assert_fail@plt+0x3e9c>
   14b38:	beq	14b4c <__assert_fail@plt+0x3c18>
   14b3c:	mov	r1, #-2147483648	; 0x80000000
   14b40:	sdiv	r1, r1, r7
   14b44:	cmp	r1, #512	; 0x200
   14b48:	blt	14b68 <__assert_fail@plt+0x3c34>
   14b4c:	lsl	r7, r7, #9
   14b50:	b	14f4c <__assert_fail@plt+0x4018>
   14b54:	beq	14b80 <__assert_fail@plt+0x3c4c>
   14b58:	mov	r1, #-2147483648	; 0x80000000
   14b5c:	sdiv	r1, r1, r7
   14b60:	cmp	r1, #2
   14b64:	bge	14b80 <__assert_fail@plt+0x3c4c>
   14b68:	cmp	r7, #0
   14b6c:	mvn	r1, #-2147483648	; 0x80000000
   14b70:	mov	r0, #1
   14b74:	movmi	r1, #-2147483648	; 0x80000000
   14b78:	mov	r7, r1
   14b7c:	b	14f4c <__assert_fail@plt+0x4018>
   14b80:	lsl	r7, r7, #1
   14b84:	b	14f4c <__assert_fail@plt+0x4018>
   14b88:	mov	r1, #-2147483648	; 0x80000000
   14b8c:	mov	r2, #1
   14b90:	sdiv	r7, r1, r0
   14b94:	cmp	r7, r6
   14b98:	blt	14bc4 <__assert_fail@plt+0x3c90>
   14b9c:	mul	r1, r0, r6
   14ba0:	mov	r2, r3
   14ba4:	cmp	r1, #0
   14ba8:	bmi	14bc4 <__assert_fail@plt+0x3c90>
   14bac:	mvn	r3, #-2147483648	; 0x80000000
   14bb0:	mov	r0, #1
   14bb4:	udiv	r7, r3, r6
   14bb8:	cmp	r7, r1
   14bbc:	bge	14bd8 <__assert_fail@plt+0x3ca4>
   14bc0:	b	14be8 <__assert_fail@plt+0x3cb4>
   14bc4:	mov	r3, #-2147483648	; 0x80000000
   14bc8:	mov	r0, #1
   14bcc:	sdiv	r7, r3, r1
   14bd0:	cmp	r7, r6
   14bd4:	blt	14c10 <__assert_fail@plt+0x3cdc>
   14bd8:	mul	r3, r1, r6
   14bdc:	mov	r0, r2
   14be0:	cmp	r3, #0
   14be4:	bmi	14c10 <__assert_fail@plt+0x3cdc>
   14be8:	mvn	r1, #-2147483648	; 0x80000000
   14bec:	udiv	r2, r1, r6
   14bf0:	cmp	r2, r3
   14bf4:	bge	14c28 <__assert_fail@plt+0x3cf4>
   14bf8:	mov	r0, #1
   14bfc:	mvn	r2, #-2147483648	; 0x80000000
   14c00:	udiv	r3, r2, r6
   14c04:	cmp	r3, r1
   14c08:	blt	14cd8 <__assert_fail@plt+0x3da4>
   14c0c:	b	14c58 <__assert_fail@plt+0x3d24>
   14c10:	mov	r1, #-2147483648	; 0x80000000
   14c14:	sdiv	r2, r1, r3
   14c18:	cmp	r2, r6
   14c1c:	bge	14c28 <__assert_fail@plt+0x3cf4>
   14c20:	mov	r0, #1
   14c24:	b	14c48 <__assert_fail@plt+0x3d14>
   14c28:	mul	r1, r3, r6
   14c2c:	cmp	r1, #0
   14c30:	bmi	14c48 <__assert_fail@plt+0x3d14>
   14c34:	mvn	r2, #-2147483648	; 0x80000000
   14c38:	udiv	r3, r2, r6
   14c3c:	cmp	r3, r1
   14c40:	bge	14c58 <__assert_fail@plt+0x3d24>
   14c44:	b	14cd8 <__assert_fail@plt+0x3da4>
   14c48:	mov	r2, #-2147483648	; 0x80000000
   14c4c:	sdiv	r3, r2, r1
   14c50:	cmp	r3, r6
   14c54:	blt	14d00 <__assert_fail@plt+0x3dcc>
   14c58:	mul	r2, r1, r6
   14c5c:	cmp	r2, #0
   14c60:	bpl	14d14 <__assert_fail@plt+0x3de0>
   14c64:	b	14d28 <__assert_fail@plt+0x3df4>
   14c68:	mov	r1, #-2147483648	; 0x80000000
   14c6c:	mov	r2, #1
   14c70:	sdiv	r7, r1, r0
   14c74:	cmp	r7, r6
   14c78:	blt	14ca4 <__assert_fail@plt+0x3d70>
   14c7c:	mul	r1, r0, r6
   14c80:	mov	r2, r3
   14c84:	cmp	r1, #0
   14c88:	bmi	14ca4 <__assert_fail@plt+0x3d70>
   14c8c:	mvn	r3, #-2147483648	; 0x80000000
   14c90:	mov	r0, #1
   14c94:	udiv	r7, r3, r6
   14c98:	cmp	r7, r1
   14c9c:	bge	14cb8 <__assert_fail@plt+0x3d84>
   14ca0:	b	14cc8 <__assert_fail@plt+0x3d94>
   14ca4:	mov	r3, #-2147483648	; 0x80000000
   14ca8:	mov	r0, #1
   14cac:	sdiv	r7, r3, r1
   14cb0:	cmp	r7, r6
   14cb4:	blt	14cf0 <__assert_fail@plt+0x3dbc>
   14cb8:	mul	r3, r1, r6
   14cbc:	mov	r0, r2
   14cc0:	cmp	r3, #0
   14cc4:	bmi	14cf0 <__assert_fail@plt+0x3dbc>
   14cc8:	mvn	r2, #-2147483648	; 0x80000000
   14ccc:	udiv	r1, r2, r6
   14cd0:	cmp	r1, r3
   14cd4:	bge	14d08 <__assert_fail@plt+0x3dd4>
   14cd8:	mov	r0, #1
   14cdc:	mvn	r1, #-2147483648	; 0x80000000
   14ce0:	udiv	r3, r1, r6
   14ce4:	cmp	r3, r2
   14ce8:	bge	14d38 <__assert_fail@plt+0x3e04>
   14cec:	b	14f00 <__assert_fail@plt+0x3fcc>
   14cf0:	mov	r2, #-2147483648	; 0x80000000
   14cf4:	sdiv	r1, r2, r3
   14cf8:	cmp	r1, r6
   14cfc:	bge	14d08 <__assert_fail@plt+0x3dd4>
   14d00:	mov	r0, #1
   14d04:	b	14d28 <__assert_fail@plt+0x3df4>
   14d08:	mul	r2, r3, r6
   14d0c:	cmp	r2, #0
   14d10:	bmi	14d28 <__assert_fail@plt+0x3df4>
   14d14:	mvn	r1, #-2147483648	; 0x80000000
   14d18:	udiv	r3, r1, r6
   14d1c:	cmp	r3, r2
   14d20:	blt	14f00 <__assert_fail@plt+0x3fcc>
   14d24:	b	14d38 <__assert_fail@plt+0x3e04>
   14d28:	mov	r1, #-2147483648	; 0x80000000
   14d2c:	sdiv	r3, r1, r2
   14d30:	cmp	r3, r6
   14d34:	blt	14f18 <__assert_fail@plt+0x3fe4>
   14d38:	mul	r1, r2, r6
   14d3c:	cmp	r1, #0
   14d40:	bpl	14f2c <__assert_fail@plt+0x3ff8>
   14d44:	b	14f78 <__assert_fail@plt+0x4044>
   14d48:	mov	r1, #-2147483648	; 0x80000000
   14d4c:	mov	r2, #1
   14d50:	sdiv	r7, r1, r0
   14d54:	cmp	r7, r6
   14d58:	blt	14d84 <__assert_fail@plt+0x3e50>
   14d5c:	mul	r1, r0, r6
   14d60:	mov	r2, r3
   14d64:	cmp	r1, #0
   14d68:	bmi	14d84 <__assert_fail@plt+0x3e50>
   14d6c:	mvn	r3, #-2147483648	; 0x80000000
   14d70:	mov	r0, #1
   14d74:	udiv	r7, r3, r6
   14d78:	cmp	r7, r1
   14d7c:	bge	14d98 <__assert_fail@plt+0x3e64>
   14d80:	b	14ef0 <__assert_fail@plt+0x3fbc>
   14d84:	mov	r3, #-2147483648	; 0x80000000
   14d88:	mov	r0, #1
   14d8c:	sdiv	r7, r3, r1
   14d90:	cmp	r7, r6
   14d94:	blt	14f08 <__assert_fail@plt+0x3fd4>
   14d98:	mul	r3, r1, r6
   14d9c:	mov	r0, r2
   14da0:	cmp	r3, #0
   14da4:	bpl	14ef0 <__assert_fail@plt+0x3fbc>
   14da8:	b	14f08 <__assert_fail@plt+0x3fd4>
   14dac:	mov	r1, #-2147483648	; 0x80000000
   14db0:	mov	r2, #1
   14db4:	sdiv	r7, r1, r0
   14db8:	cmp	r7, r6
   14dbc:	blt	14de8 <__assert_fail@plt+0x3eb4>
   14dc0:	mul	r1, r0, r6
   14dc4:	mov	r2, r3
   14dc8:	cmp	r1, #0
   14dcc:	bmi	14de8 <__assert_fail@plt+0x3eb4>
   14dd0:	mvn	r3, #-2147483648	; 0x80000000
   14dd4:	mov	r0, #1
   14dd8:	udiv	r7, r3, r6
   14ddc:	cmp	r7, r1
   14de0:	bge	14dfc <__assert_fail@plt+0x3ec8>
   14de4:	b	14e0c <__assert_fail@plt+0x3ed8>
   14de8:	mov	r3, #-2147483648	; 0x80000000
   14dec:	mov	r0, #1
   14df0:	sdiv	r7, r3, r1
   14df4:	cmp	r7, r6
   14df8:	blt	14e34 <__assert_fail@plt+0x3f00>
   14dfc:	mul	r3, r1, r6
   14e00:	mov	r0, r2
   14e04:	cmp	r3, #0
   14e08:	bmi	14e34 <__assert_fail@plt+0x3f00>
   14e0c:	mvn	r1, #-2147483648	; 0x80000000
   14e10:	udiv	r2, r1, r6
   14e14:	cmp	r2, r3
   14e18:	bge	14e4c <__assert_fail@plt+0x3f18>
   14e1c:	mov	r0, #1
   14e20:	mvn	r2, #-2147483648	; 0x80000000
   14e24:	udiv	r3, r2, r6
   14e28:	cmp	r3, r1
   14e2c:	blt	14e68 <__assert_fail@plt+0x3f34>
   14e30:	b	14e98 <__assert_fail@plt+0x3f64>
   14e34:	mov	r1, #-2147483648	; 0x80000000
   14e38:	sdiv	r2, r1, r3
   14e3c:	cmp	r2, r6
   14e40:	bge	14e4c <__assert_fail@plt+0x3f18>
   14e44:	mov	r0, #1
   14e48:	b	14e80 <__assert_fail@plt+0x3f4c>
   14e4c:	mul	r1, r3, r6
   14e50:	cmp	r1, #0
   14e54:	bmi	14e80 <__assert_fail@plt+0x3f4c>
   14e58:	mvn	r2, #-2147483648	; 0x80000000
   14e5c:	udiv	r3, r2, r6
   14e60:	cmp	r3, r1
   14e64:	bge	14e98 <__assert_fail@plt+0x3f64>
   14e68:	mov	r0, #1
   14e6c:	mvn	r3, #-2147483648	; 0x80000000
   14e70:	udiv	r1, r3, r6
   14e74:	cmp	r1, r2
   14e78:	bge	14ee4 <__assert_fail@plt+0x3fb0>
   14e7c:	b	14eb4 <__assert_fail@plt+0x3f80>
   14e80:	mov	r2, #-2147483648	; 0x80000000
   14e84:	sdiv	r3, r2, r1
   14e88:	cmp	r3, r6
   14e8c:	bge	14e98 <__assert_fail@plt+0x3f64>
   14e90:	mov	r0, #1
   14e94:	b	14ecc <__assert_fail@plt+0x3f98>
   14e98:	mul	r2, r1, r6
   14e9c:	cmp	r2, #0
   14ea0:	bmi	14ecc <__assert_fail@plt+0x3f98>
   14ea4:	mvn	r3, #-2147483648	; 0x80000000
   14ea8:	udiv	r1, r3, r6
   14eac:	cmp	r1, r2
   14eb0:	bge	14ee4 <__assert_fail@plt+0x3fb0>
   14eb4:	mov	r0, #1
   14eb8:	mvn	r1, #-2147483648	; 0x80000000
   14ebc:	udiv	r2, r1, r6
   14ec0:	cmp	r2, r3
   14ec4:	bge	14f20 <__assert_fail@plt+0x3fec>
   14ec8:	b	14f00 <__assert_fail@plt+0x3fcc>
   14ecc:	mov	r3, #-2147483648	; 0x80000000
   14ed0:	sdiv	r1, r3, r2
   14ed4:	cmp	r1, r6
   14ed8:	bge	14ee4 <__assert_fail@plt+0x3fb0>
   14edc:	mov	r0, #1
   14ee0:	b	14f08 <__assert_fail@plt+0x3fd4>
   14ee4:	mul	r3, r2, r6
   14ee8:	cmp	r3, #0
   14eec:	bmi	14f08 <__assert_fail@plt+0x3fd4>
   14ef0:	mvn	r1, #-2147483648	; 0x80000000
   14ef4:	udiv	r2, r1, r6
   14ef8:	cmp	r2, r3
   14efc:	bge	14f20 <__assert_fail@plt+0x3fec>
   14f00:	mov	r0, #1
   14f04:	b	14f2c <__assert_fail@plt+0x3ff8>
   14f08:	mov	r1, #-2147483648	; 0x80000000
   14f0c:	sdiv	r2, r1, r3
   14f10:	cmp	r2, r6
   14f14:	bge	14f20 <__assert_fail@plt+0x3fec>
   14f18:	mov	r0, #1
   14f1c:	b	14f78 <__assert_fail@plt+0x4044>
   14f20:	mul	r1, r3, r6
   14f24:	cmp	r1, #0
   14f28:	bmi	14f78 <__assert_fail@plt+0x4044>
   14f2c:	mvn	r7, #-2147483648	; 0x80000000
   14f30:	mov	r2, #1
   14f34:	udiv	r3, r7, r6
   14f38:	cmp	r3, r1
   14f3c:	blt	14f48 <__assert_fail@plt+0x4014>
   14f40:	mul	r7, r1, r6
   14f44:	mov	r2, #0
   14f48:	orr	r0, r2, r0
   14f4c:	add	r1, r4, ip
   14f50:	orr	r9, r0, r9
   14f54:	str	r1, [sl]
   14f58:	ldrb	r1, [r4, ip]
   14f5c:	cmp	r1, #0
   14f60:	orrne	r9, r9, #2
   14f64:	ldr	r0, [sp, #4]
   14f68:	str	r7, [r0]
   14f6c:	mov	r0, r9
   14f70:	sub	sp, fp, #28
   14f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f78:	mov	r7, #-2147483648	; 0x80000000
   14f7c:	mov	r2, #1
   14f80:	sdiv	r3, r7, r1
   14f84:	cmp	r3, r6
   14f88:	bge	14f40 <__assert_fail@plt+0x400c>
   14f8c:	b	14f48 <__assert_fail@plt+0x4014>
   14f90:	movw	r0, #24261	; 0x5ec5
   14f94:	movw	r1, #24299	; 0x5eeb
   14f98:	movw	r3, #24313	; 0x5ef9
   14f9c:	mov	r2, #85	; 0x55
   14fa0:	movt	r0, #1
   14fa4:	movt	r1, #1
   14fa8:	movt	r3, #1
   14fac:	bl	10f34 <__assert_fail@plt>
   14fb0:	clz	r2, r1
   14fb4:	clz	r3, r0
   14fb8:	lsr	r2, r2, #5
   14fbc:	lsr	r3, r3, #5
   14fc0:	orrs	r2, r3, r2
   14fc4:	movwne	r1, #1
   14fc8:	movwne	r0, #1
   14fcc:	cmp	r1, #0
   14fd0:	beq	15000 <__assert_fail@plt+0x40cc>
   14fd4:	mvn	r2, #-2147483648	; 0x80000000
   14fd8:	udiv	r2, r2, r1
   14fdc:	cmp	r2, r0
   14fe0:	bcs	15000 <__assert_fail@plt+0x40cc>
   14fe4:	push	{fp, lr}
   14fe8:	mov	fp, sp
   14fec:	bl	10e8c <__errno_location@plt>
   14ff0:	mov	r1, #12
   14ff4:	str	r1, [r0]
   14ff8:	mov	r0, #0
   14ffc:	pop	{fp, pc}
   15000:	b	10d0c <calloc@plt>
   15004:	cmp	r0, #0
   15008:	movweq	r0, #1
   1500c:	cmn	r0, #1
   15010:	ble	15018 <__assert_fail@plt+0x40e4>
   15014:	b	10e14 <malloc@plt>
   15018:	push	{fp, lr}
   1501c:	mov	fp, sp
   15020:	bl	10e8c <__errno_location@plt>
   15024:	mov	r1, #12
   15028:	str	r1, [r0]
   1502c:	mov	r0, #0
   15030:	pop	{fp, pc}
   15034:	push	{fp, lr}
   15038:	mov	fp, sp
   1503c:	cmp	r0, #0
   15040:	beq	1505c <__assert_fail@plt+0x4128>
   15044:	cmp	r1, #0
   15048:	beq	15068 <__assert_fail@plt+0x4134>
   1504c:	cmn	r1, #1
   15050:	ble	15074 <__assert_fail@plt+0x4140>
   15054:	pop	{fp, lr}
   15058:	b	10d90 <realloc@plt>
   1505c:	mov	r0, r1
   15060:	pop	{fp, lr}
   15064:	b	15004 <__assert_fail@plt+0x40d0>
   15068:	bl	15204 <__assert_fail@plt+0x42d0>
   1506c:	mov	r0, #0
   15070:	pop	{fp, pc}
   15074:	bl	10e8c <__errno_location@plt>
   15078:	mov	r1, #12
   1507c:	str	r1, [r0]
   15080:	mov	r0, #0
   15084:	pop	{fp, pc}
   15088:	push	{r4, r5, r6, sl, fp, lr}
   1508c:	add	fp, sp, #16
   15090:	mov	r4, r0
   15094:	bl	10de4 <__fpending@plt>
   15098:	ldr	r6, [r4]
   1509c:	mov	r5, r0
   150a0:	mov	r0, r4
   150a4:	bl	1510c <__assert_fail@plt+0x41d8>
   150a8:	tst	r6, #32
   150ac:	bne	150e4 <__assert_fail@plt+0x41b0>
   150b0:	cmp	r0, #0
   150b4:	mov	r4, r0
   150b8:	mvnne	r4, #0
   150bc:	cmp	r5, #0
   150c0:	bne	150f0 <__assert_fail@plt+0x41bc>
   150c4:	cmp	r0, #0
   150c8:	beq	150f0 <__assert_fail@plt+0x41bc>
   150cc:	bl	10e8c <__errno_location@plt>
   150d0:	ldr	r0, [r0]
   150d4:	subs	r4, r0, #9
   150d8:	mvnne	r4, #0
   150dc:	mov	r0, r4
   150e0:	pop	{r4, r5, r6, sl, fp, pc}
   150e4:	mvn	r4, #0
   150e8:	cmp	r0, #0
   150ec:	beq	150f8 <__assert_fail@plt+0x41c4>
   150f0:	mov	r0, r4
   150f4:	pop	{r4, r5, r6, sl, fp, pc}
   150f8:	bl	10e8c <__errno_location@plt>
   150fc:	mov	r1, #0
   15100:	str	r1, [r0]
   15104:	mov	r0, r4
   15108:	pop	{r4, r5, r6, sl, fp, pc}
   1510c:	push	{r4, r5, r6, sl, fp, lr}
   15110:	add	fp, sp, #16
   15114:	sub	sp, sp, #8
   15118:	mov	r4, r0
   1511c:	bl	10ebc <fileno@plt>
   15120:	cmn	r0, #1
   15124:	ble	15198 <__assert_fail@plt+0x4264>
   15128:	mov	r0, r4
   1512c:	bl	10e2c <__freading@plt>
   15130:	cmp	r0, #0
   15134:	beq	15160 <__assert_fail@plt+0x422c>
   15138:	mov	r0, r4
   1513c:	bl	10ebc <fileno@plt>
   15140:	mov	r1, #1
   15144:	mov	r2, #0
   15148:	mov	r3, #0
   1514c:	str	r1, [sp]
   15150:	bl	10dcc <lseek64@plt>
   15154:	and	r0, r0, r1
   15158:	cmn	r0, #1
   1515c:	beq	15198 <__assert_fail@plt+0x4264>
   15160:	mov	r0, r4
   15164:	bl	151a8 <__assert_fail@plt+0x4274>
   15168:	cmp	r0, #0
   1516c:	beq	15198 <__assert_fail@plt+0x4264>
   15170:	bl	10e8c <__errno_location@plt>
   15174:	ldr	r6, [r0]
   15178:	mov	r5, r0
   1517c:	mov	r0, r4
   15180:	bl	10ed4 <fclose@plt>
   15184:	cmp	r6, #0
   15188:	strne	r6, [r5]
   1518c:	mvnne	r0, #0
   15190:	sub	sp, fp, #16
   15194:	pop	{r4, r5, r6, sl, fp, pc}
   15198:	mov	r0, r4
   1519c:	sub	sp, fp, #16
   151a0:	pop	{r4, r5, r6, sl, fp, lr}
   151a4:	b	10ed4 <fclose@plt>
   151a8:	push	{r4, sl, fp, lr}
   151ac:	add	fp, sp, #8
   151b0:	sub	sp, sp, #8
   151b4:	mov	r4, r0
   151b8:	cmp	r0, #0
   151bc:	beq	151f4 <__assert_fail@plt+0x42c0>
   151c0:	mov	r0, r4
   151c4:	bl	10e2c <__freading@plt>
   151c8:	cmp	r0, #0
   151cc:	beq	151f4 <__assert_fail@plt+0x42c0>
   151d0:	ldrb	r0, [r4, #1]
   151d4:	tst	r0, #1
   151d8:	beq	151f4 <__assert_fail@plt+0x42c0>
   151dc:	mov	r0, #1
   151e0:	mov	r2, #0
   151e4:	mov	r3, #0
   151e8:	str	r0, [sp]
   151ec:	mov	r0, r4
   151f0:	bl	1522c <__assert_fail@plt+0x42f8>
   151f4:	mov	r0, r4
   151f8:	sub	sp, fp, #8
   151fc:	pop	{r4, sl, fp, lr}
   15200:	b	10d3c <fflush@plt>
   15204:	push	{r4, r5, r6, sl, fp, lr}
   15208:	add	fp, sp, #16
   1520c:	mov	r4, r0
   15210:	bl	10e8c <__errno_location@plt>
   15214:	ldr	r6, [r0]
   15218:	mov	r5, r0
   1521c:	mov	r0, r4
   15220:	bl	10d48 <free@plt>
   15224:	str	r6, [r5]
   15228:	pop	{r4, r5, r6, sl, fp, pc}
   1522c:	push	{r4, r5, r6, r7, fp, lr}
   15230:	add	fp, sp, #16
   15234:	sub	sp, sp, #8
   15238:	mov	r4, r0
   1523c:	ldr	r0, [r0, #4]
   15240:	mov	r5, r3
   15244:	mov	r6, r2
   15248:	ldr	r1, [r4, #8]
   1524c:	cmp	r1, r0
   15250:	bne	1526c <__assert_fail@plt+0x4338>
   15254:	ldrd	r0, [r4, #16]
   15258:	cmp	r1, r0
   1525c:	bne	1526c <__assert_fail@plt+0x4338>
   15260:	ldr	r0, [r4, #36]	; 0x24
   15264:	cmp	r0, #0
   15268:	beq	15284 <__assert_fail@plt+0x4350>
   1526c:	mov	r0, r4
   15270:	mov	r2, r6
   15274:	mov	r3, r5
   15278:	sub	sp, fp, #16
   1527c:	pop	{r4, r5, r6, r7, fp, lr}
   15280:	b	10ee0 <fseeko64@plt>
   15284:	ldr	r7, [fp, #8]
   15288:	mov	r0, r4
   1528c:	bl	10ebc <fileno@plt>
   15290:	mov	r2, r6
   15294:	mov	r3, r5
   15298:	str	r7, [sp]
   1529c:	bl	10dcc <lseek64@plt>
   152a0:	and	r2, r0, r1
   152a4:	cmn	r2, #1
   152a8:	beq	152c8 <__assert_fail@plt+0x4394>
   152ac:	strd	r0, [r4, #80]	; 0x50
   152b0:	ldr	r0, [r4]
   152b4:	bic	r0, r0, #16
   152b8:	str	r0, [r4]
   152bc:	mov	r0, #0
   152c0:	sub	sp, fp, #16
   152c4:	pop	{r4, r5, r6, r7, fp, pc}
   152c8:	mvn	r0, #0
   152cc:	sub	sp, fp, #16
   152d0:	pop	{r4, r5, r6, r7, fp, pc}
   152d4:	push	{fp, lr}
   152d8:	mov	fp, sp
   152dc:	mov	r0, #14
   152e0:	bl	10f04 <nl_langinfo@plt>
   152e4:	movw	r1, #23042	; 0x5a02
   152e8:	cmp	r0, #0
   152ec:	movt	r1, #1
   152f0:	movne	r1, r0
   152f4:	movw	r0, #24384	; 0x5f40
   152f8:	ldrb	r2, [r1]
   152fc:	movt	r0, #1
   15300:	cmp	r2, #0
   15304:	movne	r0, r1
   15308:	pop	{fp, pc}
   1530c:	push	{r4, r5, r6, r7, fp, lr}
   15310:	add	fp, sp, #16
   15314:	sub	sp, sp, #8
   15318:	cmp	r0, #0
   1531c:	add	r5, sp, #4
   15320:	mov	r7, r2
   15324:	mov	r4, r1
   15328:	movne	r5, r0
   1532c:	mov	r0, r5
   15330:	bl	10df0 <mbrtowc@plt>
   15334:	mov	r6, r0
   15338:	cmp	r7, #0
   1533c:	beq	15364 <__assert_fail@plt+0x4430>
   15340:	cmn	r6, #2
   15344:	bcc	15364 <__assert_fail@plt+0x4430>
   15348:	mov	r0, #0
   1534c:	bl	153ac <__assert_fail@plt+0x4478>
   15350:	cmp	r0, #0
   15354:	bne	15364 <__assert_fail@plt+0x4430>
   15358:	ldrb	r0, [r4]
   1535c:	mov	r6, #1
   15360:	str	r0, [r5]
   15364:	mov	r0, r6
   15368:	sub	sp, fp, #16
   1536c:	pop	{r4, r5, r6, r7, fp, pc}
   15370:	cmp	r2, #0
   15374:	beq	153a4 <__assert_fail@plt+0x4470>
   15378:	mvn	r3, #0
   1537c:	udiv	r3, r3, r2
   15380:	cmp	r3, r1
   15384:	bcs	153a4 <__assert_fail@plt+0x4470>
   15388:	push	{fp, lr}
   1538c:	mov	fp, sp
   15390:	bl	10e8c <__errno_location@plt>
   15394:	mov	r1, #12
   15398:	str	r1, [r0]
   1539c:	mov	r0, #0
   153a0:	pop	{fp, pc}
   153a4:	mul	r1, r2, r1
   153a8:	b	15034 <__assert_fail@plt+0x4100>
   153ac:	push	{r4, sl, fp, lr}
   153b0:	add	fp, sp, #8
   153b4:	sub	sp, sp, #264	; 0x108
   153b8:	add	r1, sp, #7
   153bc:	movw	r2, #257	; 0x101
   153c0:	bl	15418 <__assert_fail@plt+0x44e4>
   153c4:	mov	r4, #0
   153c8:	cmp	r0, #0
   153cc:	bne	1540c <__assert_fail@plt+0x44d8>
   153d0:	movw	r1, #24390	; 0x5f46
   153d4:	add	r0, sp, #7
   153d8:	mov	r2, #2
   153dc:	movt	r1, #1
   153e0:	bl	10e68 <bcmp@plt>
   153e4:	cmp	r0, #0
   153e8:	beq	1540c <__assert_fail@plt+0x44d8>
   153ec:	movw	r1, #24392	; 0x5f48
   153f0:	add	r0, sp, #7
   153f4:	mov	r2, #6
   153f8:	movt	r1, #1
   153fc:	bl	10e68 <bcmp@plt>
   15400:	cmp	r0, #0
   15404:	mov	r4, r0
   15408:	movwne	r4, #1
   1540c:	mov	r0, r4
   15410:	sub	sp, fp, #8
   15414:	pop	{r4, sl, fp, pc}
   15418:	push	{r4, r5, r6, r7, fp, lr}
   1541c:	add	fp, sp, #16
   15420:	mov	r4, r1
   15424:	mov	r1, #0
   15428:	mov	r6, r2
   1542c:	bl	10eec <setlocale@plt>
   15430:	cmp	r0, #0
   15434:	beq	15464 <__assert_fail@plt+0x4530>
   15438:	mov	r7, r0
   1543c:	bl	10e74 <strlen@plt>
   15440:	cmp	r0, r6
   15444:	bcs	15480 <__assert_fail@plt+0x454c>
   15448:	add	r2, r0, #1
   1544c:	mov	r0, r4
   15450:	mov	r1, r7
   15454:	bl	10d60 <memcpy@plt>
   15458:	mov	r5, #0
   1545c:	mov	r0, r5
   15460:	pop	{r4, r5, r6, r7, fp, pc}
   15464:	mov	r5, #22
   15468:	cmp	r6, #0
   1546c:	beq	154a8 <__assert_fail@plt+0x4574>
   15470:	mov	r0, #0
   15474:	strb	r0, [r4]
   15478:	mov	r0, r5
   1547c:	pop	{r4, r5, r6, r7, fp, pc}
   15480:	mov	r5, #34	; 0x22
   15484:	cmp	r6, #0
   15488:	beq	154a8 <__assert_fail@plt+0x4574>
   1548c:	sub	r6, r6, #1
   15490:	mov	r0, r4
   15494:	mov	r1, r7
   15498:	mov	r2, r6
   1549c:	bl	10d60 <memcpy@plt>
   154a0:	mov	r0, #0
   154a4:	strb	r0, [r4, r6]
   154a8:	mov	r0, r5
   154ac:	pop	{r4, r5, r6, r7, fp, pc}
   154b0:	mov	r1, #0
   154b4:	b	10eec <setlocale@plt>
   154b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154bc:	mov	r7, r0
   154c0:	ldr	r6, [pc, #72]	; 15510 <__assert_fail@plt+0x45dc>
   154c4:	ldr	r5, [pc, #72]	; 15514 <__assert_fail@plt+0x45e0>
   154c8:	add	r6, pc, r6
   154cc:	add	r5, pc, r5
   154d0:	sub	r6, r6, r5
   154d4:	mov	r8, r1
   154d8:	mov	r9, r2
   154dc:	bl	10cec <calloc@plt-0x20>
   154e0:	asrs	r6, r6, #2
   154e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   154e8:	mov	r4, #0
   154ec:	add	r4, r4, #1
   154f0:	ldr	r3, [r5], #4
   154f4:	mov	r2, r9
   154f8:	mov	r1, r8
   154fc:	mov	r0, r7
   15500:	blx	r3
   15504:	cmp	r6, r4
   15508:	bne	154ec <__assert_fail@plt+0x45b8>
   1550c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15510:	andeq	r1, r1, ip, lsr sl
   15514:	andeq	r1, r1, r4, lsr sl
   15518:	bx	lr
   1551c:	ldr	r3, [pc, #12]	; 15530 <__assert_fail@plt+0x45fc>
   15520:	mov	r1, #0
   15524:	add	r3, pc, r3
   15528:	ldr	r2, [r3]
   1552c:	b	10e98 <__cxa_atexit@plt>
   15530:	andeq	r1, r1, r8, lsr #23

Disassembly of section .fini:

00015534 <.fini>:
   15534:	push	{r3, lr}
   15538:	pop	{r3, pc}
