
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c1c <.init>:
   10c1c:	push	{r3, lr}
   10c20:	bl	112b4 <__assert_fail@plt+0x42c>
   10c24:	pop	{r3, pc}

Disassembly of section .plt:

00010c28 <calloc@plt-0x14>:
   10c28:	push	{lr}		; (str lr, [sp, #-4]!)
   10c2c:	ldr	lr, [pc, #4]	; 10c38 <calloc@plt-0x4>
   10c30:	add	lr, pc, lr
   10c34:	ldr	pc, [lr, #8]!
   10c38:	andeq	r8, r1, r8, asr #7

00010c3c <calloc@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #24, 20	; 0x18000
   10c44:	ldr	pc, [ip, #968]!	; 0x3c8

00010c48 <fputs_unlocked@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #24, 20	; 0x18000
   10c50:	ldr	pc, [ip, #960]!	; 0x3c0

00010c54 <raise@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #24, 20	; 0x18000
   10c5c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #24, 20	; 0x18000
   10c68:	ldr	pc, [ip, #944]!	; 0x3b0

00010c6c <posix_fadvise64@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #24, 20	; 0x18000
   10c74:	ldr	pc, [ip, #936]!	; 0x3a8

00010c78 <fflush@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #24, 20	; 0x18000
   10c80:	ldr	pc, [ip, #928]!	; 0x3a0

00010c84 <free@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #24, 20	; 0x18000
   10c8c:	ldr	pc, [ip, #920]!	; 0x398

00010c90 <_exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #912]!	; 0x390

00010c9c <memcpy@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #904]!	; 0x388

00010ca8 <mbsinit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #896]!	; 0x380

00010cb4 <memcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #888]!	; 0x378

00010cc0 <fputc_unlocked@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #880]!	; 0x370

00010ccc <dcgettext@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #872]!	; 0x368

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #864]!	; 0x360

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #856]!	; 0x358

00010cf0 <iswprint@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #848]!	; 0x350

00010cfc <fwrite@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #840]!	; 0x348

00010d08 <lseek64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #832]!	; 0x340

00010d14 <__ctype_get_mb_cur_max@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #824]!	; 0x338

00010d20 <__fpending@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #816]!	; 0x330

00010d2c <mbrtowc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #808]!	; 0x328

00010d38 <error@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #800]!	; 0x320

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #792]!	; 0x318

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #784]!	; 0x310

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #776]!	; 0x308

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #768]!	; 0x300

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d80 <__ctype_b_loc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #752]!	; 0x2f0

00010d8c <exit@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #744]!	; 0x2e8

00010d98 <strlen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #736]!	; 0x2e0

00010da4 <__errno_location@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #728]!	; 0x2d8

00010db0 <__cxa_atexit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dbc <memset@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc8 <__printf_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd4 <fileno@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #696]!	; 0x2b8

00010de0 <__fprintf_chk@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dec <fclose@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #680]!	; 0x2a8

00010df8 <fseeko64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #672]!	; 0x2a0

00010e04 <__uflow@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #664]!	; 0x298

00010e10 <__overflow@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #656]!	; 0x290

00010e1c <setlocale@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #648]!	; 0x288

00010e28 <strrchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #640]!	; 0x280

00010e34 <nl_langinfo@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #632]!	; 0x278

00010e40 <clearerr_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #624]!	; 0x270

00010e4c <fopen64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #616]!	; 0x268

00010e58 <bindtextdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #608]!	; 0x260

00010e64 <strncmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #600]!	; 0x258

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #592]!	; 0x250

00010e7c <strspn@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #584]!	; 0x248

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e9c:	mov	r5, r1
   10ea0:	mov	r4, #0
   10ea4:	strd	r6, [sp, #8]
   10ea8:	mov	r6, r0
   10eac:	movw	r7, #37200	; 0x9150
   10eb0:	movt	r7, #2
   10eb4:	strd	r8, [sp, #16]
   10eb8:	strd	sl, [sp, #24]
   10ebc:	movw	sl, #37264	; 0x9190
   10ec0:	movt	sl, #2
   10ec4:	str	lr, [sp, #32]
   10ec8:	sub	sp, sp, #20
   10ecc:	ldr	r0, [r1]
   10ed0:	bl	12564 <__assert_fail@plt+0x16dc>
   10ed4:	movw	r1, #29756	; 0x743c
   10ed8:	movt	r1, #1
   10edc:	ldr	r8, [pc, #908]	; 11270 <__assert_fail@plt+0x3e8>
   10ee0:	mov	r0, #6
   10ee4:	bl	10e1c <setlocale@plt>
   10ee8:	movw	r1, #30412	; 0x76cc
   10eec:	movt	r1, #1
   10ef0:	movw	r0, #30244	; 0x7624
   10ef4:	movt	r0, #1
   10ef8:	bl	10e58 <bindtextdomain@plt>
   10efc:	movw	r0, #30244	; 0x7624
   10f00:	movt	r0, #1
   10f04:	bl	10ce4 <textdomain@plt>
   10f08:	movw	r0, #8672	; 0x21e0
   10f0c:	movt	r0, #1
   10f10:	bl	1731c <__assert_fail@plt+0x6494>
   10f14:	mov	r3, #1
   10f18:	strb	r3, [sl]
   10f1c:	mov	r3, r8
   10f20:	ldr	r2, [pc, #844]	; 11274 <__assert_fail@plt+0x3ec>
   10f24:	mov	r1, r5
   10f28:	mov	r0, r6
   10f2c:	str	r4, [sp]
   10f30:	bl	10d74 <getopt_long@plt>
   10f34:	cmn	r0, #1
   10f38:	mov	r3, r0
   10f3c:	beq	10fec <__assert_fail@plt+0x164>
   10f40:	cmp	r3, #57	; 0x39
   10f44:	bgt	10f98 <__assert_fail@plt+0x110>
   10f48:	cmp	r3, #48	; 0x30
   10f4c:	bge	10fcc <__assert_fail@plt+0x144>
   10f50:	cmn	r3, #3
   10f54:	bne	10fa8 <__assert_fail@plt+0x120>
   10f58:	movw	r2, #30436	; 0x76e4
   10f5c:	movt	r2, #1
   10f60:	movw	r3, #37096	; 0x90e8
   10f64:	movt	r3, #2
   10f68:	movw	r0, #37196	; 0x914c
   10f6c:	movt	r0, #2
   10f70:	stm	sp, {r2, r4}
   10f74:	movw	r1, #29676	; 0x73ec
   10f78:	movt	r1, #1
   10f7c:	ldr	r0, [r0]
   10f80:	movw	r2, #30240	; 0x7620
   10f84:	movt	r2, #1
   10f88:	ldr	r3, [r3]
   10f8c:	bl	16598 <__assert_fail@plt+0x5710>
   10f90:	mov	r0, #0
   10f94:	bl	10d8c <exit@plt>
   10f98:	cmp	r3, #105	; 0x69
   10f9c:	bne	10fb8 <__assert_fail@plt+0x130>
   10fa0:	strb	r4, [sl]
   10fa4:	b	10f1c <__assert_fail@plt+0x94>
   10fa8:	cmn	r3, #2
   10fac:	bne	11244 <__assert_fail@plt+0x3bc>
   10fb0:	mov	r0, #0
   10fb4:	bl	11368 <__assert_fail@plt+0x4e0>
   10fb8:	cmp	r3, #116	; 0x74
   10fbc:	bne	11244 <__assert_fail@plt+0x3bc>
   10fc0:	ldr	r0, [r7]
   10fc4:	bl	117f4 <__assert_fail@plt+0x96c>
   10fc8:	b	10f1c <__assert_fail@plt+0x94>
   10fcc:	ldr	r2, [r7]
   10fd0:	cmp	r2, #0
   10fd4:	subne	r0, r2, #1
   10fd8:	addeq	r0, sp, #12
   10fdc:	strbeq	r3, [sp, #12]
   10fe0:	strbeq	r2, [sp, #13]
   10fe4:	bl	117f4 <__assert_fail@plt+0x96c>
   10fe8:	b	10f1c <__assert_fail@plt+0x94>
   10fec:	bl	11c78 <__assert_fail@plt+0xdf0>
   10ff0:	movw	r3, #37176	; 0x9138
   10ff4:	movt	r3, #2
   10ff8:	ldr	r0, [r3]
   10ffc:	cmp	r0, r6
   11000:	addlt	r0, r5, r0, lsl #2
   11004:	movge	r0, #0
   11008:	bl	11f24 <__assert_fail@plt+0x109c>
   1100c:	mov	r0, #0
   11010:	bl	11f4c <__assert_fail@plt+0x10c4>
   11014:	subs	r7, r0, #0
   11018:	beq	110e8 <__assert_fail@plt+0x260>
   1101c:	movw	fp, #37196	; 0x914c
   11020:	movt	fp, #2
   11024:	mov	r2, #0
   11028:	mov	r4, #0
   1102c:	mov	r5, #0
   11030:	mov	r8, #1
   11034:	str	r2, [sp, #12]
   11038:	b	11064 <__assert_fail@plt+0x1dc>
   1103c:	ldr	r0, [fp]
   11040:	ldr	r2, [r0, #20]
   11044:	ldr	r1, [r0, #24]
   11048:	cmp	r2, r1
   1104c:	addcc	r1, r2, #1
   11050:	strcc	r1, [r0, #20]
   11054:	strbcc	r6, [r2]
   11058:	bcs	1115c <__assert_fail@plt+0x2d4>
   1105c:	cmp	r6, #10
   11060:	beq	11024 <__assert_fail@plt+0x19c>
   11064:	ldr	r2, [r7, #4]
   11068:	ldr	r1, [r7, #8]
   1106c:	cmp	r2, r1
   11070:	bcs	11114 <__assert_fail@plt+0x28c>
   11074:	add	r1, r2, #1
   11078:	str	r1, [r7, #4]
   1107c:	ldrb	r6, [r2]
   11080:	cmp	r8, #0
   11084:	beq	1103c <__assert_fail@plt+0x1b4>
   11088:	cmp	r6, #9
   1108c:	beq	11198 <__assert_fail@plt+0x310>
   11090:	cmp	r6, #8
   11094:	bne	1113c <__assert_fail@plt+0x2b4>
   11098:	ldr	r3, [sp, #12]
   1109c:	orrs	r2, r4, r5
   110a0:	movne	r2, #1
   110a4:	moveq	r2, #0
   110a8:	subs	r4, r4, r2
   110ac:	mov	r2, #0
   110b0:	sbc	r5, r5, r2
   110b4:	cmp	r3, r2
   110b8:	subne	r3, r3, #1
   110bc:	str	r3, [sp, #12]
   110c0:	ldrb	r8, [sl]
   110c4:	cmp	r8, #0
   110c8:	bne	1103c <__assert_fail@plt+0x1b4>
   110cc:	bl	10d80 <__ctype_b_loc@plt>
   110d0:	ldr	r2, [r0]
   110d4:	lsl	r3, r6, #1
   110d8:	ldrh	r3, [r2, r3]
   110dc:	and	r8, r3, #1
   110e0:	cmp	r6, #0
   110e4:	bge	1103c <__assert_fail@plt+0x1b4>
   110e8:	bl	12114 <__assert_fail@plt+0x128c>
   110ec:	movw	r3, #37260	; 0x918c
   110f0:	movt	r3, #2
   110f4:	ldr	r0, [r3]
   110f8:	add	sp, sp, #20
   110fc:	ldrd	r4, [sp]
   11100:	ldrd	r6, [sp, #8]
   11104:	ldrd	r8, [sp, #16]
   11108:	ldrd	sl, [sp, #24]
   1110c:	add	sp, sp, #32
   11110:	pop	{pc}		; (ldr pc, [sp], #4)
   11114:	mov	r0, r7
   11118:	bl	10e04 <__uflow@plt>
   1111c:	subs	r6, r0, #0
   11120:	bge	11080 <__assert_fail@plt+0x1f8>
   11124:	mov	r0, r7
   11128:	bl	11f4c <__assert_fail@plt+0x10c4>
   1112c:	subs	r7, r0, #0
   11130:	bne	11064 <__assert_fail@plt+0x1dc>
   11134:	cmp	r8, #0
   11138:	beq	110e8 <__assert_fail@plt+0x260>
   1113c:	adds	r4, r4, #1
   11140:	adc	r5, r5, #0
   11144:	orrs	r3, r4, r5
   11148:	beq	1124c <__assert_fail@plt+0x3c4>
   1114c:	ldrb	r8, [sl]
   11150:	cmp	r8, #0
   11154:	bne	110e0 <__assert_fail@plt+0x258>
   11158:	b	110cc <__assert_fail@plt+0x244>
   1115c:	uxtb	r1, r6
   11160:	bl	10e10 <__overflow@plt>
   11164:	cmp	r0, #0
   11168:	bge	1105c <__assert_fail@plt+0x1d4>
   1116c:	bl	10da4 <__errno_location@plt>
   11170:	ldr	r4, [r0]
   11174:	mov	r2, #5
   11178:	movw	r1, #30476	; 0x770c
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	bl	10ccc <dcgettext@plt>
   11188:	mov	r2, r0
   1118c:	mov	r0, #1
   11190:	mov	r1, r4
   11194:	bl	10d38 <error@plt>
   11198:	add	r3, sp, #11
   1119c:	add	r2, sp, #12
   111a0:	mov	r0, r4
   111a4:	mov	r1, r5
   111a8:	bl	11dc8 <__assert_fail@plt+0xf40>
   111ac:	mov	r9, r1
   111b0:	ldrb	r1, [sp, #11]
   111b4:	mov	r8, r0
   111b8:	cmp	r1, #0
   111bc:	beq	111ec <__assert_fail@plt+0x364>
   111c0:	adds	r2, r4, #1
   111c4:	mvn	r1, #0
   111c8:	adc	r3, r5, #0
   111cc:	mvn	r0, #0
   111d0:	cmp	r5, r1
   111d4:	cmpeq	r4, r0
   111d8:	beq	1124c <__assert_fail@plt+0x3c4>
   111dc:	mov	r4, r2
   111e0:	mov	r5, r3
   111e4:	mov	r6, #32
   111e8:	b	110c0 <__assert_fail@plt+0x238>
   111ec:	cmp	r5, r9
   111f0:	cmpeq	r4, r8
   111f4:	bhi	1124c <__assert_fail@plt+0x3c4>
   111f8:	mov	r6, #32
   111fc:	adds	r4, r4, #1
   11200:	adc	r5, r5, #0
   11204:	cmp	r9, r5
   11208:	cmpeq	r8, r4
   1120c:	bls	111e4 <__assert_fail@plt+0x35c>
   11210:	ldr	r0, [fp]
   11214:	ldr	r1, [r0, #20]
   11218:	ldr	ip, [r0, #24]
   1121c:	cmp	r1, ip
   11220:	addcc	ip, r1, #1
   11224:	strcc	ip, [r0, #20]
   11228:	strbcc	r6, [r1]
   1122c:	bcc	111fc <__assert_fail@plt+0x374>
   11230:	mov	r1, #32
   11234:	bl	10e10 <__overflow@plt>
   11238:	cmp	r0, #0
   1123c:	bge	111fc <__assert_fail@plt+0x374>
   11240:	b	1116c <__assert_fail@plt+0x2e4>
   11244:	mov	r0, #1
   11248:	bl	11368 <__assert_fail@plt+0x4e0>
   1124c:	mov	r2, #5
   11250:	movw	r1, #30452	; 0x76f4
   11254:	movt	r1, #1
   11258:	mov	r0, #0
   1125c:	bl	10ccc <dcgettext@plt>
   11260:	mov	r2, r0
   11264:	mov	r1, #0
   11268:	mov	r0, #1
   1126c:	bl	10d38 <error@plt>
   11270:	andeq	r7, r1, r8, ror r3
   11274:	andeq	r7, r1, r8, asr #7
   11278:	mov	fp, #0
   1127c:	mov	lr, #0
   11280:	pop	{r1}		; (ldr r1, [sp], #4)
   11284:	mov	r2, sp
   11288:	push	{r2}		; (str r2, [sp, #-4]!)
   1128c:	push	{r0}		; (str r0, [sp, #-4]!)
   11290:	ldr	ip, [pc, #16]	; 112a8 <__assert_fail@plt+0x420>
   11294:	push	{ip}		; (str ip, [sp, #-4]!)
   11298:	ldr	r0, [pc, #12]	; 112ac <__assert_fail@plt+0x424>
   1129c:	ldr	r3, [pc, #12]	; 112b0 <__assert_fail@plt+0x428>
   112a0:	bl	10d50 <__libc_start_main@plt>
   112a4:	bl	10e70 <abort@plt>
   112a8:	andeq	r7, r1, r8, lsl r3
   112ac:	muleq	r1, r8, lr
   112b0:			; <UNDEFINED> instruction: 0x000172b8
   112b4:	ldr	r3, [pc, #20]	; 112d0 <__assert_fail@plt+0x448>
   112b8:	ldr	r2, [pc, #20]	; 112d4 <__assert_fail@plt+0x44c>
   112bc:	add	r3, pc, r3
   112c0:	ldr	r2, [r3, r2]
   112c4:	cmp	r2, #0
   112c8:	bxeq	lr
   112cc:	b	10d68 <__gmon_start__@plt>
   112d0:	andeq	r7, r1, ip, lsr sp
   112d4:	ldrdeq	r0, [r0], -r4
   112d8:	ldr	r0, [pc, #24]	; 112f8 <__assert_fail@plt+0x470>
   112dc:	ldr	r3, [pc, #24]	; 112fc <__assert_fail@plt+0x474>
   112e0:	cmp	r3, r0
   112e4:	bxeq	lr
   112e8:	ldr	r3, [pc, #16]	; 11300 <__assert_fail@plt+0x478>
   112ec:	cmp	r3, #0
   112f0:	bxeq	lr
   112f4:	bx	r3
   112f8:	andeq	r9, r2, r0, lsr r1
   112fc:	andeq	r9, r2, r0, lsr r1
   11300:	andeq	r0, r0, r0
   11304:	ldr	r0, [pc, #36]	; 11330 <__assert_fail@plt+0x4a8>
   11308:	ldr	r1, [pc, #36]	; 11334 <__assert_fail@plt+0x4ac>
   1130c:	sub	r1, r1, r0
   11310:	asr	r1, r1, #2
   11314:	add	r1, r1, r1, lsr #31
   11318:	asrs	r1, r1, #1
   1131c:	bxeq	lr
   11320:	ldr	r3, [pc, #16]	; 11338 <__assert_fail@plt+0x4b0>
   11324:	cmp	r3, #0
   11328:	bxeq	lr
   1132c:	bx	r3
   11330:	andeq	r9, r2, r0, lsr r1
   11334:	andeq	r9, r2, r0, lsr r1
   11338:	andeq	r0, r0, r0
   1133c:	push	{r4, lr}
   11340:	ldr	r4, [pc, #24]	; 11360 <__assert_fail@plt+0x4d8>
   11344:	ldrb	r3, [r4]
   11348:	cmp	r3, #0
   1134c:	popne	{r4, pc}
   11350:	bl	112d8 <__assert_fail@plt+0x450>
   11354:	mov	r3, #1
   11358:	strb	r3, [r4]
   1135c:	pop	{r4, pc}
   11360:	andeq	r9, r2, r4, asr r1
   11364:	b	11304 <__assert_fail@plt+0x47c>
   11368:	subs	r6, r0, #0
   1136c:	str	r7, [sp, #-8]!
   11370:	str	lr, [sp, #4]
   11374:	sub	sp, sp, #56	; 0x38
   11378:	beq	113c0 <__assert_fail@plt+0x538>
   1137c:	movw	r3, #37184	; 0x9140
   11380:	movt	r3, #2
   11384:	ldr	r4, [r3]
   11388:	mov	r2, #5
   1138c:	movw	r1, #29684	; 0x73f4
   11390:	movt	r1, #1
   11394:	mov	r0, #0
   11398:	bl	10ccc <dcgettext@plt>
   1139c:	movw	r3, #37276	; 0x919c
   113a0:	movt	r3, #2
   113a4:	mov	r2, r0
   113a8:	mov	r1, #1
   113ac:	ldr	r3, [r3]
   113b0:	mov	r0, r4
   113b4:	bl	10de0 <__fprintf_chk@plt>
   113b8:	mov	r0, r6
   113bc:	bl	10d8c <exit@plt>
   113c0:	mov	r2, #5
   113c4:	movw	r1, #29724	; 0x741c
   113c8:	movt	r1, #1
   113cc:	movw	r7, #37196	; 0x914c
   113d0:	movt	r7, #2
   113d4:	bl	10ccc <dcgettext@plt>
   113d8:	movw	r3, #37276	; 0x919c
   113dc:	movt	r3, #2
   113e0:	mov	r1, r0
   113e4:	mov	r0, #1
   113e8:	ldr	r2, [r3]
   113ec:	bl	10dc8 <__printf_chk@plt>
   113f0:	mov	r2, #5
   113f4:	movw	r1, #29760	; 0x7440
   113f8:	movt	r1, #1
   113fc:	mov	r0, r6
   11400:	bl	10ccc <dcgettext@plt>
   11404:	ldr	r1, [r7]
   11408:	bl	10c48 <fputs_unlocked@plt>
   1140c:	mov	r2, #5
   11410:	movw	r1, #29828	; 0x7484
   11414:	movt	r1, #1
   11418:	mov	r0, r6
   1141c:	bl	10ccc <dcgettext@plt>
   11420:	ldr	r1, [r7]
   11424:	bl	10c48 <fputs_unlocked@plt>
   11428:	mov	r2, #5
   1142c:	movw	r1, #29884	; 0x74bc
   11430:	movt	r1, #1
   11434:	mov	r0, r6
   11438:	bl	10ccc <dcgettext@plt>
   1143c:	ldr	r1, [r7]
   11440:	bl	10c48 <fputs_unlocked@plt>
   11444:	mov	r2, #5
   11448:	movw	r1, #29960	; 0x7508
   1144c:	movt	r1, #1
   11450:	mov	r0, r6
   11454:	bl	10ccc <dcgettext@plt>
   11458:	ldr	r1, [r7]
   1145c:	bl	10c48 <fputs_unlocked@plt>
   11460:	bl	1216c <__assert_fail@plt+0x12e4>
   11464:	mov	r2, #5
   11468:	movw	r1, #30072	; 0x7578
   1146c:	movt	r1, #1
   11470:	mov	r0, r6
   11474:	bl	10ccc <dcgettext@plt>
   11478:	ldr	r1, [r7]
   1147c:	bl	10c48 <fputs_unlocked@plt>
   11480:	mov	r2, #5
   11484:	movw	r1, #30120	; 0x75a8
   11488:	movt	r1, #1
   1148c:	mov	r0, r6
   11490:	bl	10ccc <dcgettext@plt>
   11494:	ldr	r1, [r7]
   11498:	bl	10c48 <fputs_unlocked@plt>
   1149c:	movw	lr, #29504	; 0x7340
   114a0:	movt	lr, #1
   114a4:	ldr	ip, [lr]
   114a8:	ldr	r4, [lr, #4]
   114ac:	ldrd	r8, [lr, #8]
   114b0:	subs	r1, ip, #0
   114b4:	str	ip, [sp]
   114b8:	ldrd	r2, [lr, #16]
   114bc:	str	r4, [sp, #4]
   114c0:	ldrd	r4, [lr, #24]
   114c4:	strd	r8, [sp, #8]
   114c8:	ldrd	r8, [lr, #32]
   114cc:	strd	r2, [sp, #16]
   114d0:	ldrd	r2, [lr, #40]	; 0x28
   114d4:	strd	r4, [sp, #24]
   114d8:	ldrd	r4, [lr, #48]	; 0x30
   114dc:	strd	r8, [sp, #32]
   114e0:	strd	r2, [sp, #40]	; 0x28
   114e4:	strd	r4, [sp, #48]	; 0x30
   114e8:	movwne	r5, #29676	; 0x73ec
   114ec:	mov	r4, sp
   114f0:	movtne	r5, #1
   114f4:	bne	115ec <__assert_fail@plt+0x764>
   114f8:	ldr	r4, [r4, #4]
   114fc:	movw	r1, #30176	; 0x75e0
   11500:	movt	r1, #1
   11504:	mov	r2, #5
   11508:	cmp	r4, #0
   1150c:	beq	11600 <__assert_fail@plt+0x778>
   11510:	mov	r0, #0
   11514:	bl	10ccc <dcgettext@plt>
   11518:	mov	r1, r0
   1151c:	movw	r3, #30200	; 0x75f8
   11520:	movt	r3, #1
   11524:	movw	r2, #30240	; 0x7620
   11528:	movt	r2, #1
   1152c:	mov	r0, #1
   11530:	bl	10dc8 <__printf_chk@plt>
   11534:	mov	r1, #0
   11538:	mov	r0, #5
   1153c:	bl	10e1c <setlocale@plt>
   11540:	cmp	r0, #0
   11544:	movweq	r5, #29676	; 0x73ec
   11548:	movteq	r5, #1
   1154c:	beq	11570 <__assert_fail@plt+0x6e8>
   11550:	movw	r1, #30256	; 0x7630
   11554:	movt	r1, #1
   11558:	mov	r2, #3
   1155c:	movw	r5, #29676	; 0x73ec
   11560:	movt	r5, #1
   11564:	bl	10e64 <strncmp@plt>
   11568:	cmp	r0, #0
   1156c:	bne	116b8 <__assert_fail@plt+0x830>
   11570:	mov	r2, #5
   11574:	movw	r1, #30332	; 0x767c
   11578:	movt	r1, #1
   1157c:	mov	r0, #0
   11580:	bl	10ccc <dcgettext@plt>
   11584:	mov	r1, r0
   11588:	movw	r3, #29676	; 0x73ec
   1158c:	movt	r3, #1
   11590:	movw	r2, #30200	; 0x75f8
   11594:	movt	r2, #1
   11598:	mov	r0, #1
   1159c:	bl	10dc8 <__printf_chk@plt>
   115a0:	mov	r2, #5
   115a4:	movw	r1, #30360	; 0x7698
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10ccc <dcgettext@plt>
   115b4:	movw	r2, #30496	; 0x7720
   115b8:	movt	r2, #1
   115bc:	cmp	r4, r5
   115c0:	movw	r3, #29756	; 0x743c
   115c4:	movt	r3, #1
   115c8:	mov	r1, r0
   115cc:	moveq	r3, r2
   115d0:	mov	r2, r4
   115d4:	mov	r0, #1
   115d8:	bl	10dc8 <__printf_chk@plt>
   115dc:	b	113b8 <__assert_fail@plt+0x530>
   115e0:	ldr	r1, [r4, #8]!
   115e4:	cmp	r1, #0
   115e8:	beq	114f8 <__assert_fail@plt+0x670>
   115ec:	mov	r0, r5
   115f0:	bl	10c60 <strcmp@plt>
   115f4:	cmp	r0, #0
   115f8:	bne	115e0 <__assert_fail@plt+0x758>
   115fc:	b	114f8 <__assert_fail@plt+0x670>
   11600:	mov	r0, r4
   11604:	bl	10ccc <dcgettext@plt>
   11608:	mov	r1, r0
   1160c:	movw	r3, #30200	; 0x75f8
   11610:	movt	r3, #1
   11614:	movw	r2, #30240	; 0x7620
   11618:	movt	r2, #1
   1161c:	mov	r0, #1
   11620:	bl	10dc8 <__printf_chk@plt>
   11624:	mov	r1, r4
   11628:	mov	r0, #5
   1162c:	bl	10e1c <setlocale@plt>
   11630:	cmp	r0, #0
   11634:	beq	11650 <__assert_fail@plt+0x7c8>
   11638:	movw	r1, #30256	; 0x7630
   1163c:	movt	r1, #1
   11640:	mov	r2, #3
   11644:	bl	10e64 <strncmp@plt>
   11648:	cmp	r0, #0
   1164c:	bne	116ac <__assert_fail@plt+0x824>
   11650:	mov	r2, #5
   11654:	movw	r1, #30332	; 0x767c
   11658:	movt	r1, #1
   1165c:	mov	r0, #0
   11660:	bl	10ccc <dcgettext@plt>
   11664:	mov	r1, r0
   11668:	movw	r3, #29676	; 0x73ec
   1166c:	movt	r3, #1
   11670:	movw	r2, #30200	; 0x75f8
   11674:	movt	r2, #1
   11678:	mov	r0, #1
   1167c:	bl	10dc8 <__printf_chk@plt>
   11680:	movw	r1, #30360	; 0x7698
   11684:	movt	r1, #1
   11688:	mov	r2, #5
   1168c:	mov	r0, #0
   11690:	bl	10ccc <dcgettext@plt>
   11694:	movw	r4, #29676	; 0x73ec
   11698:	movt	r4, #1
   1169c:	movw	r3, #30496	; 0x7720
   116a0:	movt	r3, #1
   116a4:	mov	r1, r0
   116a8:	b	115d0 <__assert_fail@plt+0x748>
   116ac:	movw	r5, #29676	; 0x73ec
   116b0:	movt	r5, #1
   116b4:	mov	r4, r5
   116b8:	mov	r2, #5
   116bc:	movw	r1, #30260	; 0x7634
   116c0:	movt	r1, #1
   116c4:	mov	r0, #0
   116c8:	bl	10ccc <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	10c48 <fputs_unlocked@plt>
   116d4:	b	11570 <__assert_fail@plt+0x6e8>
   116d8:	str	r4, [sp, #-32]!	; 0xffffffe0
   116dc:	movw	r4, #37208	; 0x9158
   116e0:	movt	r4, #2
   116e4:	ldr	r3, [r4]
   116e8:	strd	r6, [sp, #4]
   116ec:	mov	r6, r0
   116f0:	mov	r7, r1
   116f4:	strd	r8, [sp, #12]
   116f8:	strd	sl, [sp, #20]
   116fc:	str	lr, [sp, #28]
   11700:	cmp	r3, #0
   11704:	ldrd	r0, [r4, #4]
   11708:	beq	11754 <__assert_fail@plt+0x8cc>
   1170c:	sub	r2, r3, #-536870911	; 0xe0000001
   11710:	lsl	r2, r2, #3
   11714:	ldrd	sl, [r0, r2]
   11718:	cmp	fp, r7
   1171c:	cmpeq	sl, r6
   11720:	bls	117e4 <__assert_fail@plt+0x95c>
   11724:	cmp	r3, r1
   11728:	beq	117c4 <__assert_fail@plt+0x93c>
   1172c:	add	r3, r3, #1
   11730:	add	r2, r0, r2
   11734:	str	r3, [r4]
   11738:	strd	r6, [r2, #8]
   1173c:	ldr	r4, [sp]
   11740:	ldrd	r6, [sp, #4]
   11744:	ldrd	r8, [sp, #12]
   11748:	ldrd	sl, [sp, #20]
   1174c:	add	sp, sp, #28
   11750:	pop	{pc}		; (ldr pc, [sp], #4)
   11754:	mov	r8, r6
   11758:	mov	r9, r7
   1175c:	cmp	r3, r1
   11760:	beq	117cc <__assert_fail@plt+0x944>
   11764:	ldr	r2, [r4, #12]
   11768:	lsl	r1, r3, #3
   1176c:	add	r3, r3, #1
   11770:	str	r3, [r4]
   11774:	mov	r3, #0
   11778:	cmp	r3, r9
   1177c:	strd	r6, [r0, r1]
   11780:	cmpeq	r2, r8
   11784:	bcs	1173c <__assert_fail@plt+0x8b4>
   11788:	mov	r3, #0
   1178c:	mvn	r2, #0
   11790:	cmp	r9, r3
   11794:	cmpeq	r8, r2
   11798:	strls	r8, [r4, #12]
   1179c:	bls	1173c <__assert_fail@plt+0x8b4>
   117a0:	mov	r2, #5
   117a4:	movw	r1, #30640	; 0x77b0
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	bl	10ccc <dcgettext@plt>
   117b4:	mov	r2, r0
   117b8:	mov	r1, #0
   117bc:	mov	r0, #1
   117c0:	bl	10d38 <error@plt>
   117c4:	mov	r8, #0
   117c8:	mov	r9, #0
   117cc:	mov	r2, #8
   117d0:	ldr	r1, [pc, #24]	; 117f0 <__assert_fail@plt+0x968>
   117d4:	bl	169fc <__assert_fail@plt+0x5b74>
   117d8:	str	r0, [r4, #4]
   117dc:	ldr	r3, [r4]
   117e0:	b	11764 <__assert_fail@plt+0x8dc>
   117e4:	subs	r8, r6, sl
   117e8:	sbc	r9, r7, fp
   117ec:	b	1175c <__assert_fail@plt+0x8d4>
   117f0:	andeq	r9, r2, r0, ror #2
   117f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   117f8:	strd	r6, [sp, #8]
   117fc:	strd	r8, [sp, #16]
   11800:	strd	sl, [sp, #24]
   11804:	str	lr, [sp, #32]
   11808:	sub	sp, sp, #20
   1180c:	ldrb	fp, [r0]
   11810:	cmp	fp, #0
   11814:	beq	1192c <__assert_fail@plt+0xaa4>
   11818:	mov	r2, #0
   1181c:	mov	r3, #0
   11820:	mov	r9, #0
   11824:	mov	r4, r0
   11828:	mov	r8, r9
   1182c:	mov	r7, r9
   11830:	strd	r2, [sp]
   11834:	mov	r6, r9
   11838:	mov	sl, #1
   1183c:	b	118a4 <__assert_fail@plt+0xa1c>
   11840:	bl	10d80 <__ctype_b_loc@plt>
   11844:	ldr	r2, [r0]
   11848:	lsl	r3, fp, #1
   1184c:	ldrh	r5, [r2, r3]
   11850:	ands	r5, r5, #1
   11854:	bne	118ac <__assert_fail@plt+0xa24>
   11858:	cmp	fp, #47	; 0x2f
   1185c:	beq	11968 <__assert_fail@plt+0xae0>
   11860:	cmp	fp, #43	; 0x2b
   11864:	beq	119ec <__assert_fail@plt+0xb64>
   11868:	sub	fp, fp, #48	; 0x30
   1186c:	cmp	fp, #9
   11870:	bhi	11bcc <__assert_fail@plt+0xd44>
   11874:	cmp	r6, #0
   11878:	bne	11a48 <__assert_fail@plt+0xbc0>
   1187c:	asr	r3, fp, #31
   11880:	mov	r2, fp
   11884:	mov	r9, r4
   11888:	mov	r6, #1
   1188c:	strd	r2, [sp]
   11890:	mov	r3, sl
   11894:	ldrb	fp, [r4, #1]
   11898:	add	r4, r4, #1
   1189c:	cmp	fp, #0
   118a0:	beq	118f8 <__assert_fail@plt+0xa70>
   118a4:	cmp	fp, #44	; 0x2c
   118a8:	bne	11840 <__assert_fail@plt+0x9b8>
   118ac:	cmp	r6, #0
   118b0:	beq	11948 <__assert_fail@plt+0xac0>
   118b4:	cmp	r7, #0
   118b8:	bne	119c4 <__assert_fail@plt+0xb3c>
   118bc:	cmp	r8, #0
   118c0:	beq	11950 <__assert_fail@plt+0xac8>
   118c4:	movw	r5, #37208	; 0x9158
   118c8:	movt	r5, #2
   118cc:	ldrd	r2, [r5, #24]
   118d0:	orrs	r3, r2, r3
   118d4:	bne	11b24 <__assert_fail@plt+0xc9c>
   118d8:	ldrb	fp, [r4, #1]
   118dc:	mov	r3, r7
   118e0:	mov	r6, r7
   118e4:	add	r4, r4, #1
   118e8:	ldrd	r0, [sp]
   118ec:	cmp	fp, #0
   118f0:	strd	r0, [r5, #24]
   118f4:	bne	118a4 <__assert_fail@plt+0xa1c>
   118f8:	cmp	r3, #0
   118fc:	beq	11c64 <__assert_fail@plt+0xddc>
   11900:	cmp	r7, #0
   11904:	bne	11bac <__assert_fail@plt+0xd24>
   11908:	cmp	r8, #0
   1190c:	beq	11b88 <__assert_fail@plt+0xd00>
   11910:	movw	r4, #37208	; 0x9158
   11914:	movt	r4, #2
   11918:	ldrd	r2, [r4, #24]
   1191c:	orrs	r3, r2, r3
   11920:	bne	11c04 <__assert_fail@plt+0xd7c>
   11924:	ldrd	r2, [sp]
   11928:	strd	r2, [r4, #24]
   1192c:	add	sp, sp, #20
   11930:	ldrd	r4, [sp]
   11934:	ldrd	r6, [sp, #8]
   11938:	ldrd	r8, [sp, #16]
   1193c:	ldrd	sl, [sp, #24]
   11940:	add	sp, sp, #32
   11944:	pop	{pc}		; (ldr pc, [sp], #4)
   11948:	mov	r3, r6
   1194c:	b	11894 <__assert_fail@plt+0xa0c>
   11950:	ldrd	r0, [sp]
   11954:	mov	r7, r8
   11958:	mov	r6, r8
   1195c:	bl	116d8 <__assert_fail@plt+0x850>
   11960:	mov	r3, r8
   11964:	b	11894 <__assert_fail@plt+0xa0c>
   11968:	cmp	r6, #0
   1196c:	moveq	r3, r6
   11970:	moveq	r8, r6
   11974:	moveq	r7, #1
   11978:	beq	11894 <__assert_fail@plt+0xa0c>
   1197c:	mov	r2, #5
   11980:	movw	r1, #30760	; 0x7828
   11984:	movt	r1, #1
   11988:	mov	r0, r5
   1198c:	bl	10ccc <dcgettext@plt>
   11990:	mov	r7, r0
   11994:	mov	r0, r4
   11998:	bl	15ed4 <__assert_fail@plt+0x504c>
   1199c:	mov	r3, r0
   119a0:	mov	r2, r7
   119a4:	mov	r1, r5
   119a8:	mov	r0, r5
   119ac:	bl	10d38 <error@plt>
   119b0:	mov	sl, r5
   119b4:	mov	r7, r6
   119b8:	mov	r8, r5
   119bc:	mov	r3, r5
   119c0:	b	11894 <__assert_fail@plt+0xa0c>
   119c4:	movw	r5, #37208	; 0x9158
   119c8:	movt	r5, #2
   119cc:	ldrd	r2, [r5, #16]
   119d0:	orrs	r3, r2, r3
   119d4:	bne	11b58 <__assert_fail@plt+0xcd0>
   119d8:	ldrd	r2, [sp]
   119dc:	mov	r6, #0
   119e0:	strd	r2, [r5, #16]
   119e4:	mov	r3, r6
   119e8:	b	11894 <__assert_fail@plt+0xa0c>
   119ec:	cmp	r6, #0
   119f0:	moveq	r3, r6
   119f4:	moveq	r7, r6
   119f8:	moveq	r8, #1
   119fc:	beq	11894 <__assert_fail@plt+0xa0c>
   11a00:	mov	r2, #5
   11a04:	movw	r1, #30804	; 0x7854
   11a08:	movt	r1, #1
   11a0c:	mov	r0, r5
   11a10:	bl	10ccc <dcgettext@plt>
   11a14:	mov	r7, r0
   11a18:	mov	r0, r4
   11a1c:	bl	15ed4 <__assert_fail@plt+0x504c>
   11a20:	mov	r3, r0
   11a24:	mov	r2, r7
   11a28:	mov	r1, r5
   11a2c:	mov	r0, r5
   11a30:	bl	10d38 <error@plt>
   11a34:	mov	sl, r5
   11a38:	mov	r8, r6
   11a3c:	mov	r7, r5
   11a40:	mov	r3, r5
   11a44:	b	11894 <__assert_fail@plt+0xa0c>
   11a48:	add	r1, pc, #544	; 0x220
   11a4c:	ldrd	r0, [r1]
   11a50:	ldrd	r2, [sp]
   11a54:	cmp	r3, r1
   11a58:	cmpeq	r2, r0
   11a5c:	bls	11ad4 <__assert_fail@plt+0xc4c>
   11a60:	movw	r1, #30848	; 0x7880
   11a64:	movt	r1, #1
   11a68:	mov	r0, r9
   11a6c:	bl	10e7c <strspn@plt>
   11a70:	mov	r1, r0
   11a74:	mov	r4, r0
   11a78:	mov	r0, r9
   11a7c:	sub	r4, r4, #1
   11a80:	bl	16cc4 <__assert_fail@plt+0x5e3c>
   11a84:	mov	r5, r0
   11a88:	mov	r2, #5
   11a8c:	movw	r1, #30860	; 0x788c
   11a90:	movt	r1, #1
   11a94:	mov	r0, #0
   11a98:	add	r4, r9, r4
   11a9c:	bl	10ccc <dcgettext@plt>
   11aa0:	mov	sl, r0
   11aa4:	mov	r0, r5
   11aa8:	bl	15ed4 <__assert_fail@plt+0x504c>
   11aac:	mov	r1, #0
   11ab0:	mov	r3, r0
   11ab4:	mov	r2, sl
   11ab8:	mov	r0, r1
   11abc:	bl	10d38 <error@plt>
   11ac0:	mov	r0, r5
   11ac4:	bl	12434 <__assert_fail@plt+0x15ac>
   11ac8:	mov	r3, #0
   11acc:	mov	sl, r3
   11ad0:	b	11894 <__assert_fail@plt+0xa0c>
   11ad4:	mov	r0, r2
   11ad8:	lsl	r2, r3, #2
   11adc:	mov	r1, r3
   11ae0:	lsl	r3, r0, #2
   11ae4:	orr	r2, r2, r0, lsr #30
   11ae8:	adds	r3, r3, r0
   11aec:	adc	r2, r2, r1
   11af0:	adds	r3, r3, r3
   11af4:	str	r3, [sp, #8]
   11af8:	adc	r3, r2, r2
   11afc:	str	r3, [sp, #12]
   11b00:	ldrd	r2, [sp, #8]
   11b04:	adds	r2, r2, fp
   11b08:	adc	r3, r3, fp, asr #31
   11b0c:	cmp	r3, r1
   11b10:	cmpeq	r2, r0
   11b14:	bcc	11a60 <__assert_fail@plt+0xbd8>
   11b18:	strd	r2, [sp]
   11b1c:	mov	r3, sl
   11b20:	b	11894 <__assert_fail@plt+0xa0c>
   11b24:	mov	r2, #5
   11b28:	movw	r1, #30712	; 0x77f8
   11b2c:	movt	r1, #1
   11b30:	mov	r0, r7
   11b34:	bl	10ccc <dcgettext@plt>
   11b38:	mov	r2, r0
   11b3c:	mov	r1, r7
   11b40:	mov	r0, r7
   11b44:	bl	10d38 <error@plt>
   11b48:	ldrd	r2, [sp]
   11b4c:	strd	r2, [r5, #24]
   11b50:	mov	r0, #1
   11b54:	bl	10d8c <exit@plt>
   11b58:	mov	r2, #5
   11b5c:	movw	r1, #30664	; 0x77c8
   11b60:	movt	r1, #1
   11b64:	mov	r0, #0
   11b68:	bl	10ccc <dcgettext@plt>
   11b6c:	mov	r1, #0
   11b70:	mov	r2, r0
   11b74:	mov	r0, r1
   11b78:	bl	10d38 <error@plt>
   11b7c:	ldrd	r2, [sp]
   11b80:	strd	r2, [r5, #16]
   11b84:	b	11b50 <__assert_fail@plt+0xcc8>
   11b88:	ldrd	r0, [sp]
   11b8c:	add	sp, sp, #20
   11b90:	ldrd	r4, [sp]
   11b94:	ldrd	r6, [sp, #8]
   11b98:	ldrd	r8, [sp, #16]
   11b9c:	ldrd	sl, [sp, #24]
   11ba0:	ldr	lr, [sp, #32]
   11ba4:	add	sp, sp, #36	; 0x24
   11ba8:	b	116d8 <__assert_fail@plt+0x850>
   11bac:	movw	r4, #37208	; 0x9158
   11bb0:	movt	r4, #2
   11bb4:	ldrd	r2, [r4, #16]
   11bb8:	orrs	r3, r2, r3
   11bbc:	bne	11c34 <__assert_fail@plt+0xdac>
   11bc0:	ldrd	r2, [sp]
   11bc4:	strd	r2, [r4, #16]
   11bc8:	b	1192c <__assert_fail@plt+0xaa4>
   11bcc:	mov	r2, #5
   11bd0:	mov	r0, r5
   11bd4:	movw	r1, #30888	; 0x78a8
   11bd8:	movt	r1, #1
   11bdc:	bl	10ccc <dcgettext@plt>
   11be0:	mov	r6, r0
   11be4:	mov	r0, r4
   11be8:	bl	15ed4 <__assert_fail@plt+0x504c>
   11bec:	mov	r3, r0
   11bf0:	mov	r2, r6
   11bf4:	mov	r1, r5
   11bf8:	mov	r0, r5
   11bfc:	bl	10d38 <error@plt>
   11c00:	b	11b50 <__assert_fail@plt+0xcc8>
   11c04:	mov	r2, #5
   11c08:	movw	r1, #30712	; 0x77f8
   11c0c:	movt	r1, #1
   11c10:	mov	r0, r7
   11c14:	bl	10ccc <dcgettext@plt>
   11c18:	mov	r2, r0
   11c1c:	mov	r1, r7
   11c20:	mov	r0, r7
   11c24:	bl	10d38 <error@plt>
   11c28:	ldrd	r2, [sp]
   11c2c:	strd	r2, [r4, #24]
   11c30:	b	11b50 <__assert_fail@plt+0xcc8>
   11c34:	mov	r2, #5
   11c38:	movw	r1, #30664	; 0x77c8
   11c3c:	movt	r1, #1
   11c40:	mov	r0, fp
   11c44:	bl	10ccc <dcgettext@plt>
   11c48:	mov	r2, r0
   11c4c:	mov	r1, fp
   11c50:	mov	r0, fp
   11c54:	bl	10d38 <error@plt>
   11c58:	ldrd	r2, [sp]
   11c5c:	strd	r2, [r4, #16]
   11c60:	b	11b50 <__assert_fail@plt+0xcc8>
   11c64:	cmp	sl, #0
   11c68:	bne	1192c <__assert_fail@plt+0xaa4>
   11c6c:	b	11b50 <__assert_fail@plt+0xcc8>
   11c70:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c74:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c78:	movw	r3, #37208	; 0x9158
   11c7c:	movt	r3, #2
   11c80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11c84:	ldr	ip, [r3]
   11c88:	ldr	r2, [r3, #4]
   11c8c:	strd	r6, [sp, #8]
   11c90:	str	r8, [sp, #16]
   11c94:	cmp	ip, #0
   11c98:	str	lr, [sp, #20]
   11c9c:	beq	11d7c <__assert_fail@plt+0xef4>
   11ca0:	ldrd	r4, [r2]
   11ca4:	orrs	r1, r4, r5
   11ca8:	mov	r0, r4
   11cac:	mov	r1, r5
   11cb0:	movne	lr, #0
   11cb4:	bne	11cdc <__assert_fail@plt+0xe54>
   11cb8:	b	11dbc <__assert_fail@plt+0xf34>
   11cbc:	ldrd	r6, [r2, #8]!
   11cc0:	orrs	r8, r6, r7
   11cc4:	beq	11dbc <__assert_fail@plt+0xf34>
   11cc8:	cmp	r1, r7
   11ccc:	cmpeq	r0, r6
   11cd0:	bcs	11db0 <__assert_fail@plt+0xf28>
   11cd4:	mov	r0, r6
   11cd8:	mov	r1, r7
   11cdc:	add	lr, lr, #1
   11ce0:	cmp	ip, lr
   11ce4:	bne	11cbc <__assert_fail@plt+0xe34>
   11ce8:	ldrd	r6, [r3, #24]
   11cec:	orrs	r2, r6, r7
   11cf0:	beq	11d00 <__assert_fail@plt+0xe78>
   11cf4:	ldrd	r0, [r3, #16]
   11cf8:	orrs	r2, r0, r1
   11cfc:	bne	11d58 <__assert_fail@plt+0xed0>
   11d00:	cmp	ip, #1
   11d04:	beq	11d28 <__assert_fail@plt+0xea0>
   11d08:	mov	r0, #0
   11d0c:	mov	r1, #0
   11d10:	strd	r0, [r3, #32]
   11d14:	ldrd	r4, [sp]
   11d18:	ldrd	r6, [sp, #8]
   11d1c:	ldr	r8, [sp, #16]
   11d20:	add	sp, sp, #20
   11d24:	pop	{pc}		; (ldr pc, [sp], #4)
   11d28:	ldr	ip, [r3, #16]
   11d2c:	ldr	r2, [r3, #20]
   11d30:	orr	r0, r6, ip
   11d34:	orr	r1, r7, r2
   11d38:	orrs	r2, r0, r1
   11d3c:	strdeq	r4, [r3, #32]
   11d40:	bne	11d08 <__assert_fail@plt+0xe80>
   11d44:	b	11d14 <__assert_fail@plt+0xe8c>
   11d48:	orrs	r2, r0, r1
   11d4c:	moveq	r2, r4
   11d50:	moveq	r0, r4
   11d54:	beq	11d98 <__assert_fail@plt+0xf10>
   11d58:	movw	r1, #30984	; 0x7908
   11d5c:	movt	r1, #1
   11d60:	mov	r2, #5
   11d64:	mov	r0, #0
   11d68:	bl	10ccc <dcgettext@plt>
   11d6c:	mov	r2, r0
   11d70:	mov	r1, #0
   11d74:	mov	r0, #1
   11d78:	bl	10d38 <error@plt>
   11d7c:	ldrd	r0, [r3, #16]
   11d80:	ldrd	r4, [r3, #24]
   11d84:	orrs	r2, r4, r5
   11d88:	bne	11d48 <__assert_fail@plt+0xec0>
   11d8c:	orrs	r2, r0, r1
   11d90:	beq	11da8 <__assert_fail@plt+0xf20>
   11d94:	mov	r2, r0
   11d98:	str	r2, [r3, #12]
   11d9c:	str	r0, [r3, #32]
   11da0:	str	ip, [r3, #36]	; 0x24
   11da4:	b	11d14 <__assert_fail@plt+0xe8c>
   11da8:	mov	r0, #8
   11dac:	b	11d94 <__assert_fail@plt+0xf0c>
   11db0:	movw	r1, #30956	; 0x78ec
   11db4:	movt	r1, #1
   11db8:	b	11d60 <__assert_fail@plt+0xed8>
   11dbc:	movw	r1, #30932	; 0x78d4
   11dc0:	movt	r1, #1
   11dc4:	b	11d60 <__assert_fail@plt+0xed8>
   11dc8:	movw	ip, #37208	; 0x9158
   11dcc:	movt	ip, #2
   11dd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11dd4:	strd	r6, [sp, #8]
   11dd8:	strd	r8, [sp, #16]
   11ddc:	ldrd	r8, [ip, #32]
   11de0:	str	lr, [sp, #32]
   11de4:	mov	lr, #0
   11de8:	strd	sl, [sp, #24]
   11dec:	sub	sp, sp, #4
   11df0:	mov	sl, r0
   11df4:	strb	lr, [r3]
   11df8:	mov	fp, r1
   11dfc:	orrs	lr, r8, r9
   11e00:	bne	11ea0 <__assert_fail@plt+0x1018>
   11e04:	ldr	r1, [r2]
   11e08:	ldr	lr, [ip]
   11e0c:	cmp	lr, r1
   11e10:	bls	11e5c <__assert_fail@plt+0xfd4>
   11e14:	ldr	r0, [ip, #4]
   11e18:	lsl	r8, r1, #3
   11e1c:	ldrd	r4, [r0, r8]
   11e20:	add	r0, r0, r8
   11e24:	cmp	fp, r5
   11e28:	cmpeq	sl, r4
   11e2c:	addcs	r1, r1, #1
   11e30:	bcs	11e4c <__assert_fail@plt+0xfc4>
   11e34:	b	11e7c <__assert_fail@plt+0xff4>
   11e38:	ldrd	r4, [r0, #8]!
   11e3c:	cmp	fp, r5
   11e40:	cmpeq	sl, r4
   11e44:	bcc	11ec0 <__assert_fail@plt+0x1038>
   11e48:	mov	r1, r8
   11e4c:	cmp	r1, lr
   11e50:	add	r8, r1, #1
   11e54:	bne	11e38 <__assert_fail@plt+0xfb0>
   11e58:	str	lr, [r2]
   11e5c:	ldrd	r0, [ip, #16]
   11e60:	orrs	r2, r0, r1
   11e64:	bne	11efc <__assert_fail@plt+0x1074>
   11e68:	ldrd	r4, [ip, #24]
   11e6c:	orrs	r2, r4, r5
   11e70:	moveq	r2, #1
   11e74:	strbeq	r2, [r3]
   11e78:	bne	11ec8 <__assert_fail@plt+0x1040>
   11e7c:	mov	r0, r4
   11e80:	mov	r1, r5
   11e84:	add	sp, sp, #4
   11e88:	ldrd	r4, [sp]
   11e8c:	ldrd	r6, [sp, #8]
   11e90:	ldrd	r8, [sp, #16]
   11e94:	ldrd	sl, [sp, #24]
   11e98:	add	sp, sp, #32
   11e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea0:	adds	r6, r8, r0
   11ea4:	mov	r2, r8
   11ea8:	mov	r3, r9
   11eac:	adc	r7, r9, r1
   11eb0:	bl	17144 <__assert_fail@plt+0x62bc>
   11eb4:	subs	r4, r6, r2
   11eb8:	sbc	r5, r7, r3
   11ebc:	b	11e7c <__assert_fail@plt+0xff4>
   11ec0:	str	r1, [r2]
   11ec4:	b	11e7c <__assert_fail@plt+0xff4>
   11ec8:	ldr	r1, [ip, #4]
   11ecc:	adds	r8, r4, sl
   11ed0:	mov	r2, r4
   11ed4:	adc	r9, r5, fp
   11ed8:	mov	r3, r5
   11edc:	add	lr, r1, lr, lsl #3
   11ee0:	ldrd	r0, [lr, #-8]
   11ee4:	subs	r0, sl, r0
   11ee8:	sbc	r1, fp, r1
   11eec:	bl	17144 <__assert_fail@plt+0x62bc>
   11ef0:	subs	r4, r8, r2
   11ef4:	sbc	r5, r9, r3
   11ef8:	b	11e7c <__assert_fail@plt+0xff4>
   11efc:	adds	r8, r0, sl
   11f00:	mov	r2, r0
   11f04:	adc	r9, r1, fp
   11f08:	mov	r3, r1
   11f0c:	mov	r0, sl
   11f10:	mov	r1, fp
   11f14:	bl	17144 <__assert_fail@plt+0x62bc>
   11f18:	subs	r4, r8, r2
   11f1c:	sbc	r5, r9, r3
   11f20:	b	11e7c <__assert_fail@plt+0xff4>
   11f24:	movw	r3, #37088	; 0x90e0
   11f28:	movt	r3, #2
   11f2c:	cmp	r0, #0
   11f30:	mov	r2, #0
   11f34:	moveq	r0, r3
   11f38:	movw	r3, #37208	; 0x9158
   11f3c:	movt	r3, #2
   11f40:	strb	r2, [r3, #40]	; 0x28
   11f44:	str	r0, [r3, #44]	; 0x2c
   11f48:	bx	lr
   11f4c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11f50:	movw	r5, #37208	; 0x9158
   11f54:	movt	r5, #2
   11f58:	strd	r6, [sp, #8]
   11f5c:	subs	r6, r0, #0
   11f60:	strd	r8, [sp, #16]
   11f64:	str	sl, [sp, #24]
   11f68:	str	lr, [sp, #28]
   11f6c:	beq	11ff4 <__assert_fail@plt+0x116c>
   11f70:	ldr	r4, [r5, #48]	; 0x30
   11f74:	cmp	r4, #0
   11f78:	beq	120f4 <__assert_fail@plt+0x126c>
   11f7c:	bl	10da4 <__errno_location@plt>
   11f80:	ldr	r3, [r6]
   11f84:	mov	r7, r0
   11f88:	movw	r1, #31064	; 0x7958
   11f8c:	movt	r1, #1
   11f90:	mov	r0, r4
   11f94:	ldr	r4, [r7]
   11f98:	tst	r3, #32
   11f9c:	moveq	r4, #0
   11fa0:	bl	10c60 <strcmp@plt>
   11fa4:	cmp	r0, #0
   11fa8:	mov	r0, r6
   11fac:	beq	120ec <__assert_fail@plt+0x1264>
   11fb0:	bl	12320 <__assert_fail@plt+0x1498>
   11fb4:	cmp	r0, #0
   11fb8:	ldrne	r4, [r7]
   11fbc:	cmp	r4, #0
   11fc0:	beq	11ff4 <__assert_fail@plt+0x116c>
   11fc4:	mov	r1, #3
   11fc8:	mov	r0, #0
   11fcc:	ldr	r2, [r5, #48]	; 0x30
   11fd0:	bl	15728 <__assert_fail@plt+0x48a0>
   11fd4:	mov	r3, r0
   11fd8:	mov	r1, r4
   11fdc:	movw	r2, #30928	; 0x78d0
   11fe0:	movt	r2, #1
   11fe4:	mov	r0, #0
   11fe8:	bl	10d38 <error@plt>
   11fec:	mov	r3, #1
   11ff0:	str	r3, [r5, #52]	; 0x34
   11ff4:	ldr	r3, [r5, #44]	; 0x2c
   11ff8:	ldr	r4, [r3]
   11ffc:	add	r3, r3, #4
   12000:	str	r3, [r5, #44]	; 0x2c
   12004:	cmp	r4, #0
   12008:	beq	120cc <__assert_fail@plt+0x1244>
   1200c:	movw	r7, #31064	; 0x7958
   12010:	movt	r7, #1
   12014:	movw	r9, #31068	; 0x795c
   12018:	movt	r9, #1
   1201c:	movw	r8, #37192	; 0x9148
   12020:	movt	r8, #2
   12024:	b	1208c <__assert_fail@plt+0x1204>
   12028:	ldr	r6, [r8]
   1202c:	mov	r3, #1
   12030:	strb	r3, [r5, #40]	; 0x28
   12034:	cmp	r6, #0
   12038:	bne	120b8 <__assert_fail@plt+0x1230>
   1203c:	bl	10da4 <__errno_location@plt>
   12040:	ldr	sl, [r0]
   12044:	mov	r2, r4
   12048:	mov	r1, #3
   1204c:	mov	r0, r6
   12050:	bl	15728 <__assert_fail@plt+0x48a0>
   12054:	mov	r3, r0
   12058:	movw	r2, #30928	; 0x78d0
   1205c:	movt	r2, #1
   12060:	mov	r0, r6
   12064:	mov	r1, sl
   12068:	bl	10d38 <error@plt>
   1206c:	ldr	r3, [r5, #44]	; 0x2c
   12070:	mov	r2, #1
   12074:	ldr	r4, [r3]
   12078:	add	r3, r3, #4
   1207c:	str	r3, [r5, #44]	; 0x2c
   12080:	str	r2, [r5, #52]	; 0x34
   12084:	cmp	r4, #0
   12088:	beq	120cc <__assert_fail@plt+0x1244>
   1208c:	mov	r1, r7
   12090:	mov	r0, r4
   12094:	bl	10c60 <strcmp@plt>
   12098:	cmp	r0, #0
   1209c:	beq	12028 <__assert_fail@plt+0x11a0>
   120a0:	mov	r1, r9
   120a4:	mov	r0, r4
   120a8:	bl	10e4c <fopen64@plt>
   120ac:	mov	r6, r0
   120b0:	cmp	r6, #0
   120b4:	beq	1203c <__assert_fail@plt+0x11b4>
   120b8:	mov	r1, #2
   120bc:	mov	r0, r6
   120c0:	str	r4, [r5, #48]	; 0x30
   120c4:	bl	122d0 <__assert_fail@plt+0x1448>
   120c8:	b	120d0 <__assert_fail@plt+0x1248>
   120cc:	mov	r6, #0
   120d0:	mov	r0, r6
   120d4:	ldrd	r4, [sp]
   120d8:	ldrd	r6, [sp, #8]
   120dc:	ldrd	r8, [sp, #16]
   120e0:	ldr	sl, [sp, #24]
   120e4:	add	sp, sp, #28
   120e8:	pop	{pc}		; (ldr pc, [sp], #4)
   120ec:	bl	10e40 <clearerr_unlocked@plt>
   120f0:	b	11fbc <__assert_fail@plt+0x1134>
   120f4:	movw	r3, #30628	; 0x77a4
   120f8:	movt	r3, #1
   120fc:	movw	r1, #31032	; 0x7938
   12100:	movt	r1, #1
   12104:	movw	r0, #31052	; 0x794c
   12108:	movt	r0, #1
   1210c:	mov	r2, #340	; 0x154
   12110:	bl	10e88 <__assert_fail@plt>
   12114:	movw	r3, #37208	; 0x9158
   12118:	movt	r3, #2
   1211c:	ldrb	r3, [r3, #40]	; 0x28
   12120:	cmp	r3, #0
   12124:	bxeq	lr
   12128:	movw	r3, #37192	; 0x9148
   1212c:	movt	r3, #2
   12130:	str	r4, [sp, #-8]!
   12134:	ldr	r0, [r3]
   12138:	str	lr, [sp, #4]
   1213c:	bl	12320 <__assert_fail@plt+0x1498>
   12140:	cmp	r0, #0
   12144:	bne	12154 <__assert_fail@plt+0x12cc>
   12148:	ldr	r4, [sp]
   1214c:	add	sp, sp, #4
   12150:	pop	{pc}		; (ldr pc, [sp], #4)
   12154:	bl	10da4 <__errno_location@plt>
   12158:	movw	r2, #31064	; 0x7958
   1215c:	movt	r2, #1
   12160:	ldr	r1, [r0]
   12164:	mov	r0, #1
   12168:	bl	10d38 <error@plt>
   1216c:	mov	r2, #5
   12170:	movw	r1, #31072	; 0x7960
   12174:	movt	r1, #1
   12178:	mov	r0, #0
   1217c:	str	r4, [sp, #-8]!
   12180:	movw	r4, #37196	; 0x914c
   12184:	movt	r4, #2
   12188:	str	lr, [sp, #4]
   1218c:	bl	10ccc <dcgettext@plt>
   12190:	ldr	r1, [r4]
   12194:	bl	10c48 <fputs_unlocked@plt>
   12198:	movw	r1, #31136	; 0x79a0
   1219c:	movt	r1, #1
   121a0:	mov	r2, #5
   121a4:	mov	r0, #0
   121a8:	bl	10ccc <dcgettext@plt>
   121ac:	ldr	r1, [r4]
   121b0:	ldr	r4, [sp]
   121b4:	ldr	lr, [sp, #4]
   121b8:	add	sp, sp, #8
   121bc:	b	10c48 <fputs_unlocked@plt>
   121c0:	movw	r3, #37268	; 0x9194
   121c4:	movt	r3, #2
   121c8:	str	r0, [r3]
   121cc:	bx	lr
   121d0:	movw	r3, #37268	; 0x9194
   121d4:	movt	r3, #2
   121d8:	strb	r0, [r3, #4]
   121dc:	bx	lr
   121e0:	movw	r3, #37196	; 0x914c
   121e4:	movt	r3, #2
   121e8:	strd	r4, [sp, #-16]!
   121ec:	ldr	r0, [r3]
   121f0:	str	r6, [sp, #8]
   121f4:	str	lr, [sp, #12]
   121f8:	sub	sp, sp, #8
   121fc:	bl	16eac <__assert_fail@plt+0x6024>
   12200:	cmp	r0, #0
   12204:	beq	12230 <__assert_fail@plt+0x13a8>
   12208:	movw	r4, #37268	; 0x9194
   1220c:	movt	r4, #2
   12210:	ldrb	r6, [r4, #4]
   12214:	bl	10da4 <__errno_location@plt>
   12218:	mov	r5, r0
   1221c:	cmp	r6, #0
   12220:	beq	1225c <__assert_fail@plt+0x13d4>
   12224:	ldr	r3, [r0]
   12228:	cmp	r3, #32
   1222c:	bne	1225c <__assert_fail@plt+0x13d4>
   12230:	movw	r3, #37184	; 0x9140
   12234:	movt	r3, #2
   12238:	ldr	r0, [r3]
   1223c:	bl	16eac <__assert_fail@plt+0x6024>
   12240:	cmp	r0, #0
   12244:	bne	122a4 <__assert_fail@plt+0x141c>
   12248:	add	sp, sp, #8
   1224c:	ldrd	r4, [sp]
   12250:	ldr	r6, [sp, #8]
   12254:	add	sp, sp, #12
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	movw	r1, #30476	; 0x770c
   12260:	movt	r1, #1
   12264:	mov	r2, #5
   12268:	mov	r0, #0
   1226c:	bl	10ccc <dcgettext@plt>
   12270:	mov	r6, r0
   12274:	ldr	r0, [r4]
   12278:	cmp	r0, #0
   1227c:	beq	122b4 <__assert_fail@plt+0x142c>
   12280:	ldr	r4, [r5]
   12284:	bl	15358 <__assert_fail@plt+0x44d0>
   12288:	mov	r3, r0
   1228c:	movw	r2, #31520	; 0x7b20
   12290:	movt	r2, #1
   12294:	mov	r0, #0
   12298:	str	r6, [sp]
   1229c:	mov	r1, r4
   122a0:	bl	10d38 <error@plt>
   122a4:	movw	r3, #37100	; 0x90ec
   122a8:	movt	r3, #2
   122ac:	ldr	r0, [r3]
   122b0:	bl	10c90 <_exit@plt>
   122b4:	mov	r3, r6
   122b8:	movw	r2, #30928	; 0x78d0
   122bc:	movt	r2, #1
   122c0:	ldr	r1, [r5]
   122c4:	bl	10d38 <error@plt>
   122c8:	b	122a4 <__assert_fail@plt+0x141c>
   122cc:	b	10c6c <posix_fadvise64@plt>
   122d0:	cmp	r0, #0
   122d4:	bxeq	lr
   122d8:	str	r4, [sp, #-16]!
   122dc:	mov	r4, r1
   122e0:	strd	r6, [sp, #4]
   122e4:	mov	r6, #0
   122e8:	mov	r7, #0
   122ec:	str	lr, [sp, #12]
   122f0:	sub	sp, sp, #16
   122f4:	bl	10dd4 <fileno@plt>
   122f8:	mov	r2, r6
   122fc:	mov	r3, r7
   12300:	strd	r6, [sp]
   12304:	str	r4, [sp, #8]
   12308:	bl	10c6c <posix_fadvise64@plt>
   1230c:	add	sp, sp, #16
   12310:	ldr	r4, [sp]
   12314:	ldrd	r6, [sp, #4]
   12318:	add	sp, sp, #12
   1231c:	pop	{pc}		; (ldr pc, [sp], #4)
   12320:	strd	r4, [sp, #-12]!
   12324:	mov	r4, r0
   12328:	str	lr, [sp, #8]
   1232c:	sub	sp, sp, #12
   12330:	bl	10dd4 <fileno@plt>
   12334:	cmp	r0, #0
   12338:	mov	r0, r4
   1233c:	blt	123c0 <__assert_fail@plt+0x1538>
   12340:	bl	10d5c <__freading@plt>
   12344:	cmp	r0, #0
   12348:	bne	1238c <__assert_fail@plt+0x1504>
   1234c:	mov	r0, r4
   12350:	bl	123d4 <__assert_fail@plt+0x154c>
   12354:	cmp	r0, #0
   12358:	beq	123bc <__assert_fail@plt+0x1534>
   1235c:	bl	10da4 <__errno_location@plt>
   12360:	mov	r5, r0
   12364:	mov	r0, r4
   12368:	ldr	r4, [r5]
   1236c:	bl	10dec <fclose@plt>
   12370:	cmp	r4, #0
   12374:	mvnne	r0, #0
   12378:	strne	r4, [r5]
   1237c:	add	sp, sp, #12
   12380:	ldrd	r4, [sp]
   12384:	add	sp, sp, #8
   12388:	pop	{pc}		; (ldr pc, [sp], #4)
   1238c:	mov	r0, r4
   12390:	bl	10dd4 <fileno@plt>
   12394:	mov	r1, #1
   12398:	mov	r2, #0
   1239c:	mov	r3, #0
   123a0:	str	r1, [sp]
   123a4:	bl	10d08 <lseek64@plt>
   123a8:	mvn	r3, #0
   123ac:	mvn	r2, #0
   123b0:	cmp	r1, r3
   123b4:	cmpeq	r0, r2
   123b8:	bne	1234c <__assert_fail@plt+0x14c4>
   123bc:	mov	r0, r4
   123c0:	add	sp, sp, #12
   123c4:	ldrd	r4, [sp]
   123c8:	ldr	lr, [sp, #8]
   123cc:	add	sp, sp, #12
   123d0:	b	10dec <fclose@plt>
   123d4:	str	r4, [sp, #-8]!
   123d8:	subs	r4, r0, #0
   123dc:	str	lr, [sp, #4]
   123e0:	sub	sp, sp, #8
   123e4:	beq	12400 <__assert_fail@plt+0x1578>
   123e8:	bl	10d5c <__freading@plt>
   123ec:	cmp	r0, #0
   123f0:	beq	12400 <__assert_fail@plt+0x1578>
   123f4:	ldr	r3, [r4]
   123f8:	tst	r3, #256	; 0x100
   123fc:	bne	12418 <__assert_fail@plt+0x1590>
   12400:	mov	r0, r4
   12404:	add	sp, sp, #8
   12408:	ldr	r4, [sp]
   1240c:	ldr	lr, [sp, #4]
   12410:	add	sp, sp, #8
   12414:	b	10c78 <fflush@plt>
   12418:	mov	r1, #1
   1241c:	mov	r2, #0
   12420:	mov	r3, #0
   12424:	mov	r0, r4
   12428:	str	r1, [sp]
   1242c:	bl	12494 <__assert_fail@plt+0x160c>
   12430:	b	12400 <__assert_fail@plt+0x1578>
   12434:	strd	r4, [sp, #-12]!
   12438:	mov	r5, r0
   1243c:	str	lr, [sp, #8]
   12440:	sub	sp, sp, #12
   12444:	bl	10da4 <__errno_location@plt>
   12448:	mov	r4, r0
   1244c:	mov	r2, #0
   12450:	ldr	r3, [r4]
   12454:	mov	r0, r5
   12458:	str	r2, [r4]
   1245c:	str	r3, [sp]
   12460:	str	r3, [sp, #4]
   12464:	bl	10c84 <free@plt>
   12468:	ldr	r3, [r4]
   1246c:	add	r2, sp, #8
   12470:	clz	r3, r3
   12474:	lsr	r3, r3, #5
   12478:	add	r3, r2, r3, lsl #2
   1247c:	ldr	r3, [r3, #-8]
   12480:	str	r3, [r4]
   12484:	add	sp, sp, #12
   12488:	ldrd	r4, [sp]
   1248c:	add	sp, sp, #8
   12490:	pop	{pc}		; (ldr pc, [sp], #4)
   12494:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12498:	mov	r4, r0
   1249c:	ldr	ip, [r0, #4]
   124a0:	strd	r6, [sp, #8]
   124a4:	str	lr, [sp, #20]
   124a8:	ldr	lr, [r0, #8]
   124ac:	str	r8, [sp, #16]
   124b0:	sub	sp, sp, #8
   124b4:	ldr	r5, [sp, #32]
   124b8:	cmp	lr, ip
   124bc:	beq	124e4 <__assert_fail@plt+0x165c>
   124c0:	mov	r0, r4
   124c4:	str	r5, [sp, #32]
   124c8:	add	sp, sp, #8
   124cc:	ldrd	r4, [sp]
   124d0:	ldrd	r6, [sp, #8]
   124d4:	ldr	r8, [sp, #16]
   124d8:	ldr	lr, [sp, #20]
   124dc:	add	sp, sp, #24
   124e0:	b	10df8 <fseeko64@plt>
   124e4:	ldr	ip, [r0, #16]
   124e8:	ldr	lr, [r0, #20]
   124ec:	cmp	lr, ip
   124f0:	bne	124c0 <__assert_fail@plt+0x1638>
   124f4:	ldr	r8, [r0, #36]	; 0x24
   124f8:	cmp	r8, #0
   124fc:	bne	124c0 <__assert_fail@plt+0x1638>
   12500:	mov	r6, r2
   12504:	mov	r7, r3
   12508:	bl	10dd4 <fileno@plt>
   1250c:	mov	r2, r6
   12510:	mov	r3, r7
   12514:	str	r5, [sp]
   12518:	bl	10d08 <lseek64@plt>
   1251c:	mvn	r3, #0
   12520:	mvn	r2, #0
   12524:	cmp	r1, r3
   12528:	cmpeq	r0, r2
   1252c:	beq	1255c <__assert_fail@plt+0x16d4>
   12530:	ldr	r3, [r4]
   12534:	strd	r0, [r4, #80]	; 0x50
   12538:	bic	r3, r3, #16
   1253c:	str	r3, [r4]
   12540:	mov	r0, r8
   12544:	add	sp, sp, #8
   12548:	ldrd	r4, [sp]
   1254c:	ldrd	r6, [sp, #8]
   12550:	ldr	r8, [sp, #16]
   12554:	add	sp, sp, #20
   12558:	pop	{pc}		; (ldr pc, [sp], #4)
   1255c:	mvn	r8, #0
   12560:	b	12540 <__assert_fail@plt+0x16b8>
   12564:	strd	r4, [sp, #-16]!
   12568:	subs	r4, r0, #0
   1256c:	str	r6, [sp, #8]
   12570:	str	lr, [sp, #12]
   12574:	beq	1260c <__assert_fail@plt+0x1784>
   12578:	mov	r1, #47	; 0x2f
   1257c:	bl	10e28 <strrchr@plt>
   12580:	subs	r5, r0, #0
   12584:	beq	125e4 <__assert_fail@plt+0x175c>
   12588:	add	r6, r5, #1
   1258c:	sub	r3, r6, r4
   12590:	cmp	r3, #6
   12594:	ble	125e4 <__assert_fail@plt+0x175c>
   12598:	movw	r1, #31584	; 0x7b60
   1259c:	movt	r1, #1
   125a0:	mov	r2, #7
   125a4:	sub	r0, r5, #6
   125a8:	bl	10e64 <strncmp@plt>
   125ac:	cmp	r0, #0
   125b0:	bne	125e4 <__assert_fail@plt+0x175c>
   125b4:	movw	r1, #31592	; 0x7b68
   125b8:	movt	r1, #1
   125bc:	mov	r2, #3
   125c0:	mov	r0, r6
   125c4:	bl	10e64 <strncmp@plt>
   125c8:	cmp	r0, #0
   125cc:	movne	r4, r6
   125d0:	bne	125e4 <__assert_fail@plt+0x175c>
   125d4:	add	r4, r5, #4
   125d8:	movw	r3, #37168	; 0x9130
   125dc:	movt	r3, #2
   125e0:	str	r4, [r3]
   125e4:	movw	r2, #37276	; 0x919c
   125e8:	movt	r2, #2
   125ec:	ldr	r6, [sp, #8]
   125f0:	movw	r3, #37172	; 0x9134
   125f4:	movt	r3, #2
   125f8:	str	r4, [r2]
   125fc:	str	r4, [r3]
   12600:	ldrd	r4, [sp]
   12604:	add	sp, sp, #12
   12608:	pop	{pc}		; (ldr pc, [sp], #4)
   1260c:	movw	r3, #37184	; 0x9140
   12610:	movt	r3, #2
   12614:	movw	r0, #31528	; 0x7b28
   12618:	movt	r0, #1
   1261c:	ldr	r3, [r3]
   12620:	mov	r2, #55	; 0x37
   12624:	mov	r1, #1
   12628:	bl	10cfc <fwrite@plt>
   1262c:	bl	10e70 <abort@plt>
   12630:	mov	r2, #5
   12634:	strd	r4, [sp, #-16]!
   12638:	mov	r5, r0
   1263c:	str	r6, [sp, #8]
   12640:	mov	r6, r1
   12644:	mov	r1, r0
   12648:	mov	r0, #0
   1264c:	str	lr, [sp, #12]
   12650:	bl	10ccc <dcgettext@plt>
   12654:	cmp	r5, r0
   12658:	mov	r4, r0
   1265c:	beq	12674 <__assert_fail@plt+0x17ec>
   12660:	mov	r0, r4
   12664:	ldrd	r4, [sp]
   12668:	ldr	r6, [sp, #8]
   1266c:	add	sp, sp, #12
   12670:	pop	{pc}		; (ldr pc, [sp], #4)
   12674:	bl	16f34 <__assert_fail@plt+0x60ac>
   12678:	ldrb	r3, [r0]
   1267c:	bic	r3, r3, #32
   12680:	cmp	r3, #85	; 0x55
   12684:	bne	126ec <__assert_fail@plt+0x1864>
   12688:	ldrb	r3, [r0, #1]
   1268c:	bic	r3, r3, #32
   12690:	cmp	r3, #84	; 0x54
   12694:	bne	1276c <__assert_fail@plt+0x18e4>
   12698:	ldrb	r3, [r0, #2]
   1269c:	bic	r3, r3, #32
   126a0:	cmp	r3, #70	; 0x46
   126a4:	bne	1276c <__assert_fail@plt+0x18e4>
   126a8:	ldrb	r3, [r0, #3]
   126ac:	cmp	r3, #45	; 0x2d
   126b0:	bne	1276c <__assert_fail@plt+0x18e4>
   126b4:	ldrb	r3, [r0, #4]
   126b8:	cmp	r3, #56	; 0x38
   126bc:	bne	1276c <__assert_fail@plt+0x18e4>
   126c0:	ldrb	r3, [r0, #5]
   126c4:	cmp	r3, #0
   126c8:	bne	1276c <__assert_fail@plt+0x18e4>
   126cc:	ldrb	r2, [r4]
   126d0:	movw	r3, #31684	; 0x7bc4
   126d4:	movt	r3, #1
   126d8:	movw	r4, #31696	; 0x7bd0
   126dc:	movt	r4, #1
   126e0:	cmp	r2, #96	; 0x60
   126e4:	movne	r4, r3
   126e8:	b	12660 <__assert_fail@plt+0x17d8>
   126ec:	cmp	r3, #71	; 0x47
   126f0:	bne	1276c <__assert_fail@plt+0x18e4>
   126f4:	ldrb	r3, [r0, #1]
   126f8:	bic	r3, r3, #32
   126fc:	cmp	r3, #66	; 0x42
   12700:	bne	1276c <__assert_fail@plt+0x18e4>
   12704:	ldrb	r3, [r0, #2]
   12708:	cmp	r3, #49	; 0x31
   1270c:	bne	1276c <__assert_fail@plt+0x18e4>
   12710:	ldrb	r3, [r0, #3]
   12714:	cmp	r3, #56	; 0x38
   12718:	bne	1276c <__assert_fail@plt+0x18e4>
   1271c:	ldrb	r3, [r0, #4]
   12720:	cmp	r3, #48	; 0x30
   12724:	bne	1276c <__assert_fail@plt+0x18e4>
   12728:	ldrb	r3, [r0, #5]
   1272c:	cmp	r3, #51	; 0x33
   12730:	bne	1276c <__assert_fail@plt+0x18e4>
   12734:	ldrb	r3, [r0, #6]
   12738:	cmp	r3, #48	; 0x30
   1273c:	bne	1276c <__assert_fail@plt+0x18e4>
   12740:	ldrb	r3, [r0, #7]
   12744:	cmp	r3, #0
   12748:	bne	1276c <__assert_fail@plt+0x18e4>
   1274c:	ldrb	r2, [r4]
   12750:	movw	r3, #31688	; 0x7bc8
   12754:	movt	r3, #1
   12758:	movw	r4, #31692	; 0x7bcc
   1275c:	movt	r4, #1
   12760:	cmp	r2, #96	; 0x60
   12764:	movne	r4, r3
   12768:	b	12660 <__assert_fail@plt+0x17d8>
   1276c:	movw	r3, #31700	; 0x7bd4
   12770:	movt	r3, #1
   12774:	cmp	r6, #9
   12778:	movw	r4, #31680	; 0x7bc0
   1277c:	movt	r4, #1
   12780:	movne	r4, r3
   12784:	b	12660 <__assert_fail@plt+0x17d8>
   12788:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1278c:	strd	r6, [sp, #8]
   12790:	strd	r8, [sp, #16]
   12794:	mov	r8, r3
   12798:	strd	sl, [sp, #24]
   1279c:	mov	fp, r0
   127a0:	mov	sl, r1
   127a4:	str	lr, [sp, #32]
   127a8:	sub	sp, sp, #140	; 0x8c
   127ac:	ldr	r3, [sp, #180]	; 0xb4
   127b0:	str	r2, [sp, #28]
   127b4:	and	r4, r3, #2
   127b8:	ubfx	r3, r3, #1, #1
   127bc:	str	r3, [sp, #44]	; 0x2c
   127c0:	bl	10d14 <__ctype_get_mb_cur_max@plt>
   127c4:	ldr	r3, [sp, #176]	; 0xb0
   127c8:	str	r0, [sp, #76]	; 0x4c
   127cc:	cmp	r3, #10
   127d0:	ldrls	pc, [pc, r3, lsl #2]
   127d4:	b	14170 <__assert_fail@plt+0x32e8>
   127d8:	andeq	r2, r1, r8, asr ip
   127dc:	andeq	r2, r1, r4, ror sp
   127e0:	strdeq	r3, [r1], -r0
   127e4:	andeq	r2, r1, r0, ror #27
   127e8:	andeq	r2, r1, r0, ror #22
   127ec:	ldrdeq	r2, [r1], -ip
   127f0:			; <UNDEFINED> instruction: 0x00012cb4
   127f4:	andeq	r2, r1, ip, lsl sp
   127f8:	andeq	r2, r1, r4, lsl #16
   127fc:	andeq	r2, r1, r4, lsl #16
   12800:	andeq	r2, r1, r4, lsl #16
   12804:	ldr	r3, [sp, #176]	; 0xb0
   12808:	cmp	r3, #10
   1280c:	beq	12838 <__assert_fail@plt+0x19b0>
   12810:	mov	r1, r3
   12814:	movw	r0, #31704	; 0x7bd8
   12818:	movt	r0, #1
   1281c:	bl	12630 <__assert_fail@plt+0x17a8>
   12820:	str	r0, [sp, #188]	; 0xbc
   12824:	movw	r0, #31700	; 0x7bd4
   12828:	movt	r0, #1
   1282c:	ldr	r1, [sp, #176]	; 0xb0
   12830:	bl	12630 <__assert_fail@plt+0x17a8>
   12834:	str	r0, [sp, #192]	; 0xc0
   12838:	cmp	r4, #0
   1283c:	movne	r4, #0
   12840:	beq	13efc <__assert_fail@plt+0x3074>
   12844:	mov	r5, #0
   12848:	ldr	r0, [sp, #192]	; 0xc0
   1284c:	mov	r9, r5
   12850:	str	r5, [sp, #64]	; 0x40
   12854:	bl	10d98 <strlen@plt>
   12858:	mov	r3, #1
   1285c:	ldr	r2, [sp, #44]	; 0x2c
   12860:	cmp	r0, r5
   12864:	moveq	r2, r5
   12868:	str	r3, [sp, #32]
   1286c:	str	r3, [sp, #48]	; 0x30
   12870:	str	r5, [sp, #52]	; 0x34
   12874:	str	r3, [sp, #60]	; 0x3c
   12878:	ldr	r3, [sp, #180]	; 0xb4
   1287c:	str	r0, [sp, #56]	; 0x38
   12880:	str	r5, [sp, #68]	; 0x44
   12884:	str	r5, [sp, #80]	; 0x50
   12888:	str	r5, [sp, #84]	; 0x54
   1288c:	and	r3, r3, #1
   12890:	str	r2, [sp, #88]	; 0x58
   12894:	str	r3, [sp, #92]	; 0x5c
   12898:	ldr	r3, [sp, #180]	; 0xb4
   1289c:	and	r3, r3, #4
   128a0:	str	r3, [sp, #96]	; 0x60
   128a4:	ldr	r3, [sp, #192]	; 0xc0
   128a8:	str	r3, [sp, #72]	; 0x48
   128ac:	mov	r3, fp
   128b0:	mov	r7, #0
   128b4:	mov	fp, r9
   128b8:	mov	r9, r3
   128bc:	cmn	r8, #1
   128c0:	beq	12ec4 <__assert_fail@plt+0x203c>
   128c4:	subs	r6, r8, r7
   128c8:	movne	r6, #1
   128cc:	cmp	r6, #0
   128d0:	beq	12edc <__assert_fail@plt+0x2054>
   128d4:	ldr	r0, [sp, #28]
   128d8:	ldr	r3, [sp, #48]	; 0x30
   128dc:	cmp	r3, #0
   128e0:	add	r3, r0, r7
   128e4:	str	r3, [sp, #36]	; 0x24
   128e8:	beq	13368 <__assert_fail@plt+0x24e0>
   128ec:	ldr	r2, [sp, #56]	; 0x38
   128f0:	cmp	r2, #0
   128f4:	beq	13868 <__assert_fail@plt+0x29e0>
   128f8:	cmp	r2, #1
   128fc:	mov	r3, r2
   12900:	movls	r3, #0
   12904:	movhi	r3, #1
   12908:	cmn	r8, #1
   1290c:	add	r5, r7, r2
   12910:	movne	r3, #0
   12914:	cmp	r3, #0
   12918:	beq	12924 <__assert_fail@plt+0x1a9c>
   1291c:	bl	10d98 <strlen@plt>
   12920:	mov	r8, r0
   12924:	cmp	r5, r8
   12928:	bhi	13868 <__assert_fail@plt+0x29e0>
   1292c:	ldr	r0, [sp, #36]	; 0x24
   12930:	ldr	r2, [sp, #56]	; 0x38
   12934:	ldr	r1, [sp, #72]	; 0x48
   12938:	bl	10cb4 <memcmp@plt>
   1293c:	cmp	r0, #0
   12940:	bne	13868 <__assert_fail@plt+0x29e0>
   12944:	ldr	r3, [sp, #44]	; 0x2c
   12948:	cmp	r3, #0
   1294c:	bne	14014 <__assert_fail@plt+0x318c>
   12950:	ldr	r3, [sp, #36]	; 0x24
   12954:	ldrb	r5, [r3]
   12958:	cmp	r5, #126	; 0x7e
   1295c:	ldrls	pc, [pc, r5, lsl #2]
   12960:	b	13dfc <__assert_fail@plt+0x2f74>
   12964:	andeq	r3, r1, r8, lsr r0
   12968:	strdeq	r3, [r1], -ip
   1296c:	strdeq	r3, [r1], -ip
   12970:	strdeq	r3, [r1], -ip
   12974:	strdeq	r3, [r1], -ip
   12978:	strdeq	r3, [r1], -ip
   1297c:	strdeq	r3, [r1], -ip
   12980:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12984:	andeq	r2, r1, r8, lsl #31
   12988:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1298c:	andeq	r3, r1, ip, lsl r1
   12990:	andeq	r3, r1, ip, lsl #2
   12994:	andeq	r2, r1, r4, lsr lr
   12998:	andeq	r3, r1, r8, ror #1
   1299c:	strdeq	r3, [r1], -ip
   129a0:	strdeq	r3, [r1], -ip
   129a4:	strdeq	r3, [r1], -ip
   129a8:	strdeq	r3, [r1], -ip
   129ac:	strdeq	r3, [r1], -ip
   129b0:	strdeq	r3, [r1], -ip
   129b4:	strdeq	r3, [r1], -ip
   129b8:	strdeq	r3, [r1], -ip
   129bc:	strdeq	r3, [r1], -ip
   129c0:	strdeq	r3, [r1], -ip
   129c4:	strdeq	r3, [r1], -ip
   129c8:	strdeq	r3, [r1], -ip
   129cc:	strdeq	r3, [r1], -ip
   129d0:	strdeq	r3, [r1], -ip
   129d4:	strdeq	r3, [r1], -ip
   129d8:	strdeq	r3, [r1], -ip
   129dc:	strdeq	r3, [r1], -ip
   129e0:	strdeq	r3, [r1], -ip
   129e4:	muleq	r1, r4, r1
   129e8:	andeq	r3, r1, r8, lsl #3
   129ec:	andeq	r3, r1, r8, lsl #3
   129f0:	andeq	r3, r1, ip, ror r1
   129f4:	andeq	r3, r1, r8, lsl #3
   129f8:	andeq	r3, r1, r0, ror #4
   129fc:	andeq	r3, r1, r8, lsl #3
   12a00:	ldrdeq	r3, [r1], -r0
   12a04:	andeq	r3, r1, r8, lsl #3
   12a08:	andeq	r3, r1, r8, lsl #3
   12a0c:	andeq	r3, r1, r8, lsl #3
   12a10:	andeq	r3, r1, r0, ror #4
   12a14:	andeq	r3, r1, r0, ror #4
   12a18:	andeq	r3, r1, r0, ror #4
   12a1c:	andeq	r3, r1, r0, ror #4
   12a20:	andeq	r3, r1, r0, ror #4
   12a24:	andeq	r3, r1, r0, ror #4
   12a28:	andeq	r3, r1, r0, ror #4
   12a2c:	andeq	r3, r1, r0, ror #4
   12a30:	andeq	r3, r1, r0, ror #4
   12a34:	andeq	r3, r1, r0, ror #4
   12a38:	andeq	r3, r1, r0, ror #4
   12a3c:	andeq	r3, r1, r0, ror #4
   12a40:	andeq	r3, r1, r0, ror #4
   12a44:	andeq	r3, r1, r0, ror #4
   12a48:	andeq	r3, r1, r0, ror #4
   12a4c:	andeq	r3, r1, r0, ror #4
   12a50:	andeq	r3, r1, r8, lsl #3
   12a54:	andeq	r3, r1, r8, lsl #3
   12a58:	andeq	r3, r1, r8, lsl #3
   12a5c:	andeq	r3, r1, r8, lsl #3
   12a60:	andeq	r3, r1, r0, lsl #5
   12a64:	strdeq	r3, [r1], -ip
   12a68:	andeq	r3, r1, r0, ror #4
   12a6c:	andeq	r3, r1, r0, ror #4
   12a70:	andeq	r3, r1, r0, ror #4
   12a74:	andeq	r3, r1, r0, ror #4
   12a78:	andeq	r3, r1, r0, ror #4
   12a7c:	andeq	r3, r1, r0, ror #4
   12a80:	andeq	r3, r1, r0, ror #4
   12a84:	andeq	r3, r1, r0, ror #4
   12a88:	andeq	r3, r1, r0, ror #4
   12a8c:	andeq	r3, r1, r0, ror #4
   12a90:	andeq	r3, r1, r0, ror #4
   12a94:	andeq	r3, r1, r0, ror #4
   12a98:	andeq	r3, r1, r0, ror #4
   12a9c:	andeq	r3, r1, r0, ror #4
   12aa0:	andeq	r3, r1, r0, ror #4
   12aa4:	andeq	r3, r1, r0, ror #4
   12aa8:	andeq	r3, r1, r0, ror #4
   12aac:	andeq	r3, r1, r0, ror #4
   12ab0:	andeq	r3, r1, r0, ror #4
   12ab4:	andeq	r3, r1, r0, ror #4
   12ab8:	andeq	r3, r1, r0, ror #4
   12abc:	andeq	r3, r1, r0, ror #4
   12ac0:	andeq	r3, r1, r0, ror #4
   12ac4:	andeq	r3, r1, r0, ror #4
   12ac8:	andeq	r3, r1, r0, ror #4
   12acc:	andeq	r3, r1, r0, ror #4
   12ad0:	andeq	r3, r1, r8, lsl #3
   12ad4:	andeq	r3, r1, r4, lsr #4
   12ad8:	andeq	r3, r1, r0, ror #4
   12adc:	andeq	r3, r1, r8, lsl #3
   12ae0:	andeq	r3, r1, r0, ror #4
   12ae4:	andeq	r3, r1, r8, lsl #3
   12ae8:	andeq	r3, r1, r0, ror #4
   12aec:	andeq	r3, r1, r0, ror #4
   12af0:	andeq	r3, r1, r0, ror #4
   12af4:	andeq	r3, r1, r0, ror #4
   12af8:	andeq	r3, r1, r0, ror #4
   12afc:	andeq	r3, r1, r0, ror #4
   12b00:	andeq	r3, r1, r0, ror #4
   12b04:	andeq	r3, r1, r0, ror #4
   12b08:	andeq	r3, r1, r0, ror #4
   12b0c:	andeq	r3, r1, r0, ror #4
   12b10:	andeq	r3, r1, r0, ror #4
   12b14:	andeq	r3, r1, r0, ror #4
   12b18:	andeq	r3, r1, r0, ror #4
   12b1c:	andeq	r3, r1, r0, ror #4
   12b20:	andeq	r3, r1, r0, ror #4
   12b24:	andeq	r3, r1, r0, ror #4
   12b28:	andeq	r3, r1, r0, ror #4
   12b2c:	andeq	r3, r1, r0, ror #4
   12b30:	andeq	r3, r1, r0, ror #4
   12b34:	andeq	r3, r1, r0, ror #4
   12b38:	andeq	r3, r1, r0, ror #4
   12b3c:	andeq	r3, r1, r0, ror #4
   12b40:	andeq	r3, r1, r0, ror #4
   12b44:	andeq	r3, r1, r0, ror #4
   12b48:	andeq	r3, r1, r0, ror #4
   12b4c:	andeq	r3, r1, r0, ror #4
   12b50:	andeq	r3, r1, r0, lsr r1
   12b54:	andeq	r3, r1, r8, lsl #3
   12b58:	andeq	r3, r1, r0, lsr r1
   12b5c:	andeq	r3, r1, ip, ror r1
   12b60:	ldr	r3, [sp, #180]	; 0xb4
   12b64:	cmp	r4, #0
   12b68:	and	r3, r3, #1
   12b6c:	str	r3, [sp, #92]	; 0x5c
   12b70:	ldr	r3, [sp, #180]	; 0xb4
   12b74:	and	r3, r3, #4
   12b78:	str	r3, [sp, #96]	; 0x60
   12b7c:	moveq	r3, #1
   12b80:	streq	r3, [sp, #60]	; 0x3c
   12b84:	beq	13314 <__assert_fail@plt+0x248c>
   12b88:	mov	r3, #0
   12b8c:	mov	r2, #1
   12b90:	mov	r4, r3
   12b94:	mov	r9, r3
   12b98:	str	r2, [sp, #32]
   12b9c:	str	r2, [sp, #44]	; 0x2c
   12ba0:	str	r3, [sp, #48]	; 0x30
   12ba4:	str	r2, [sp, #52]	; 0x34
   12ba8:	str	r2, [sp, #56]	; 0x38
   12bac:	str	r3, [sp, #60]	; 0x3c
   12bb0:	str	r2, [sp, #64]	; 0x40
   12bb4:	str	r2, [sp, #68]	; 0x44
   12bb8:	str	r3, [sp, #80]	; 0x50
   12bbc:	str	r3, [sp, #84]	; 0x54
   12bc0:	str	r3, [sp, #88]	; 0x58
   12bc4:	movw	r3, #31700	; 0x7bd4
   12bc8:	movt	r3, #1
   12bcc:	str	r3, [sp, #72]	; 0x48
   12bd0:	mov	r3, #2
   12bd4:	str	r3, [sp, #176]	; 0xb0
   12bd8:	b	128ac <__assert_fail@plt+0x1a24>
   12bdc:	ldr	r3, [sp, #180]	; 0xb4
   12be0:	cmp	r4, #0
   12be4:	and	r3, r3, #1
   12be8:	str	r3, [sp, #92]	; 0x5c
   12bec:	ldr	r3, [sp, #180]	; 0xb4
   12bf0:	and	r3, r3, #4
   12bf4:	str	r3, [sp, #96]	; 0x60
   12bf8:	bne	13fcc <__assert_fail@plt+0x3144>
   12bfc:	cmp	sl, #0
   12c00:	beq	13d78 <__assert_fail@plt+0x2ef0>
   12c04:	mov	r3, #34	; 0x22
   12c08:	mov	r2, r4
   12c0c:	mov	r1, #1
   12c10:	mov	r9, r2
   12c14:	strb	r3, [fp]
   12c18:	movw	r3, #31680	; 0x7bc0
   12c1c:	movt	r3, #1
   12c20:	mov	r4, r1
   12c24:	str	r1, [sp, #32]
   12c28:	str	r2, [sp, #44]	; 0x2c
   12c2c:	str	r1, [sp, #48]	; 0x30
   12c30:	str	r2, [sp, #52]	; 0x34
   12c34:	str	r1, [sp, #56]	; 0x38
   12c38:	str	r1, [sp, #60]	; 0x3c
   12c3c:	str	r2, [sp, #64]	; 0x40
   12c40:	str	r2, [sp, #68]	; 0x44
   12c44:	str	r3, [sp, #72]	; 0x48
   12c48:	str	r2, [sp, #80]	; 0x50
   12c4c:	str	r2, [sp, #84]	; 0x54
   12c50:	str	r2, [sp, #88]	; 0x58
   12c54:	b	128ac <__assert_fail@plt+0x1a24>
   12c58:	mov	r3, #0
   12c5c:	mov	r2, #1
   12c60:	mov	r9, r3
   12c64:	str	r2, [sp, #32]
   12c68:	str	r3, [sp, #44]	; 0x2c
   12c6c:	str	r3, [sp, #48]	; 0x30
   12c70:	str	r3, [sp, #52]	; 0x34
   12c74:	str	r3, [sp, #60]	; 0x3c
   12c78:	strd	r2, [sp, #64]	; 0x40
   12c7c:	str	r3, [sp, #72]	; 0x48
   12c80:	str	r3, [sp, #80]	; 0x50
   12c84:	str	r3, [sp, #88]	; 0x58
   12c88:	ldr	r3, [sp, #180]	; 0xb4
   12c8c:	and	r3, r3, r2
   12c90:	str	r3, [sp, #92]	; 0x5c
   12c94:	ldr	r3, [sp, #180]	; 0xb4
   12c98:	and	r3, r3, #4
   12c9c:	str	r3, [sp, #96]	; 0x60
   12ca0:	ldr	r3, [sp, #176]	; 0xb0
   12ca4:	mov	r4, r3
   12ca8:	str	r3, [sp, #56]	; 0x38
   12cac:	str	r3, [sp, #84]	; 0x54
   12cb0:	b	128ac <__assert_fail@plt+0x1a24>
   12cb4:	mov	r3, #1
   12cb8:	mov	r4, #0
   12cbc:	mov	r9, r4
   12cc0:	str	r3, [sp, #32]
   12cc4:	str	r3, [sp, #44]	; 0x2c
   12cc8:	str	r3, [sp, #48]	; 0x30
   12ccc:	str	r4, [sp, #52]	; 0x34
   12cd0:	str	r3, [sp, #56]	; 0x38
   12cd4:	str	r3, [sp, #60]	; 0x3c
   12cd8:	str	r3, [sp, #88]	; 0x58
   12cdc:	movw	r3, #31680	; 0x7bc0
   12ce0:	movt	r3, #1
   12ce4:	str	r4, [sp, #64]	; 0x40
   12ce8:	str	r4, [sp, #68]	; 0x44
   12cec:	str	r3, [sp, #72]	; 0x48
   12cf0:	ldr	r3, [sp, #180]	; 0xb4
   12cf4:	str	r4, [sp, #80]	; 0x50
   12cf8:	str	r4, [sp, #84]	; 0x54
   12cfc:	and	r3, r3, #1
   12d00:	str	r3, [sp, #92]	; 0x5c
   12d04:	ldr	r3, [sp, #180]	; 0xb4
   12d08:	and	r3, r3, #4
   12d0c:	str	r3, [sp, #96]	; 0x60
   12d10:	mov	r3, #5
   12d14:	str	r3, [sp, #176]	; 0xb0
   12d18:	b	128ac <__assert_fail@plt+0x1a24>
   12d1c:	mov	r3, #1
   12d20:	mov	r4, #0
   12d24:	mov	r9, r4
   12d28:	str	r3, [sp, #32]
   12d2c:	str	r4, [sp, #44]	; 0x2c
   12d30:	str	r3, [sp, #48]	; 0x30
   12d34:	str	r3, [sp, #60]	; 0x3c
   12d38:	ldr	r3, [sp, #180]	; 0xb4
   12d3c:	str	r4, [sp, #52]	; 0x34
   12d40:	str	r4, [sp, #56]	; 0x38
   12d44:	str	r4, [sp, #64]	; 0x40
   12d48:	str	r4, [sp, #68]	; 0x44
   12d4c:	and	r3, r3, #1
   12d50:	str	r4, [sp, #72]	; 0x48
   12d54:	str	r4, [sp, #80]	; 0x50
   12d58:	str	r4, [sp, #84]	; 0x54
   12d5c:	str	r3, [sp, #92]	; 0x5c
   12d60:	ldr	r3, [sp, #180]	; 0xb4
   12d64:	str	r4, [sp, #88]	; 0x58
   12d68:	and	r3, r3, #4
   12d6c:	str	r3, [sp, #96]	; 0x60
   12d70:	b	128ac <__assert_fail@plt+0x1a24>
   12d74:	mov	r3, #0
   12d78:	mov	r2, #1
   12d7c:	ldr	r1, [sp, #176]	; 0xb0
   12d80:	mov	r4, r3
   12d84:	mov	r9, r3
   12d88:	movw	r3, #31700	; 0x7bd4
   12d8c:	movt	r3, #1
   12d90:	str	r2, [sp, #32]
   12d94:	str	r2, [sp, #44]	; 0x2c
   12d98:	str	r4, [sp, #48]	; 0x30
   12d9c:	strd	r2, [sp, #68]	; 0x44
   12da0:	ldr	r3, [sp, #180]	; 0xb4
   12da4:	str	r2, [sp, #52]	; 0x34
   12da8:	str	r1, [sp, #56]	; 0x38
   12dac:	str	r4, [sp, #60]	; 0x3c
   12db0:	str	r2, [sp, #64]	; 0x40
   12db4:	and	r3, r3, r2
   12db8:	str	r4, [sp, #80]	; 0x50
   12dbc:	str	r4, [sp, #84]	; 0x54
   12dc0:	str	r4, [sp, #88]	; 0x58
   12dc4:	str	r3, [sp, #92]	; 0x5c
   12dc8:	ldr	r3, [sp, #180]	; 0xb4
   12dcc:	and	r3, r3, #4
   12dd0:	str	r3, [sp, #96]	; 0x60
   12dd4:	mov	r3, #2
   12dd8:	str	r3, [sp, #176]	; 0xb0
   12ddc:	b	128ac <__assert_fail@plt+0x1a24>
   12de0:	mov	r3, #1
   12de4:	mov	r2, #0
   12de8:	mov	r4, r2
   12dec:	mov	r9, r2
   12df0:	str	r3, [sp, #32]
   12df4:	str	r3, [sp, #44]	; 0x2c
   12df8:	str	r2, [sp, #48]	; 0x30
   12dfc:	str	r3, [sp, #52]	; 0x34
   12e00:	str	r3, [sp, #56]	; 0x38
   12e04:	str	r3, [sp, #60]	; 0x3c
   12e08:	str	r3, [sp, #64]	; 0x40
   12e0c:	str	r3, [sp, #68]	; 0x44
   12e10:	str	r3, [sp, #88]	; 0x58
   12e14:	movw	r3, #31700	; 0x7bd4
   12e18:	movt	r3, #1
   12e1c:	str	r3, [sp, #72]	; 0x48
   12e20:	ldr	r3, [sp, #180]	; 0xb4
   12e24:	str	r2, [sp, #80]	; 0x50
   12e28:	str	r2, [sp, #84]	; 0x54
   12e2c:	and	r3, r3, #1
   12e30:	b	12dc4 <__assert_fail@plt+0x1f3c>
   12e34:	mov	r5, #102	; 0x66
   12e38:	mov	r6, #0
   12e3c:	ldr	r3, [sp, #44]	; 0x2c
   12e40:	cmp	r3, #0
   12e44:	bne	13cf4 <__assert_fail@plt+0x2e6c>
   12e48:	ldr	r2, [sp, #52]	; 0x34
   12e4c:	eor	r3, fp, #1
   12e50:	ands	r3, r2, r3
   12e54:	beq	12e8c <__assert_fail@plt+0x2004>
   12e58:	cmp	sl, r4
   12e5c:	mov	fp, r3
   12e60:	movhi	r2, #39	; 0x27
   12e64:	strbhi	r2, [r9, r4]
   12e68:	add	r2, r4, #1
   12e6c:	cmp	sl, r2
   12e70:	movhi	r1, #36	; 0x24
   12e74:	strbhi	r1, [r9, r2]
   12e78:	add	r2, r4, #2
   12e7c:	add	r4, r4, #3
   12e80:	cmp	sl, r2
   12e84:	movhi	r1, #39	; 0x27
   12e88:	strbhi	r1, [r9, r2]
   12e8c:	cmp	sl, r4
   12e90:	add	r7, r7, #1
   12e94:	movhi	r3, #92	; 0x5c
   12e98:	strbhi	r3, [r9, r4]
   12e9c:	add	r4, r4, #1
   12ea0:	cmp	r4, sl
   12ea4:	ldr	r3, [sp, #32]
   12ea8:	strbcc	r5, [r9, r4]
   12eac:	cmp	r6, #0
   12eb0:	add	r4, r4, #1
   12eb4:	moveq	r3, #0
   12eb8:	cmn	r8, #1
   12ebc:	str	r3, [sp, #32]
   12ec0:	bne	128c4 <__assert_fail@plt+0x1a3c>
   12ec4:	ldr	r3, [sp, #28]
   12ec8:	ldrb	r6, [r3, r7]
   12ecc:	adds	r6, r6, #0
   12ed0:	movne	r6, #1
   12ed4:	cmp	r6, #0
   12ed8:	bne	128d4 <__assert_fail@plt+0x1a4c>
   12edc:	mov	r3, r9
   12ee0:	mov	r9, fp
   12ee4:	mov	fp, r3
   12ee8:	ldr	r3, [sp, #68]	; 0x44
   12eec:	cmp	r4, #0
   12ef0:	movne	r3, #0
   12ef4:	cmp	r3, #0
   12ef8:	bne	140ec <__assert_fail@plt+0x3264>
   12efc:	ldr	r3, [sp, #44]	; 0x2c
   12f00:	ldr	r2, [sp, #52]	; 0x34
   12f04:	eor	r3, r3, #1
   12f08:	ands	r2, r3, r2
   12f0c:	beq	14024 <__assert_fail@plt+0x319c>
   12f10:	ldr	r3, [sp, #80]	; 0x50
   12f14:	cmp	r3, #0
   12f18:	beq	14028 <__assert_fail@plt+0x31a0>
   12f1c:	ldr	r3, [sp, #32]
   12f20:	cmp	r3, #0
   12f24:	bne	1409c <__assert_fail@plt+0x3214>
   12f28:	ldr	r3, [sp, #84]	; 0x54
   12f2c:	adds	r3, r3, #0
   12f30:	movne	r3, #1
   12f34:	cmp	sl, #0
   12f38:	movne	r3, #0
   12f3c:	cmp	r3, #0
   12f40:	ldreq	r2, [sp, #80]	; 0x50
   12f44:	beq	14028 <__assert_fail@plt+0x31a0>
   12f48:	ldr	r2, [sp, #84]	; 0x54
   12f4c:	mov	sl, r2
   12f50:	mov	r0, #0
   12f54:	mov	r4, #1
   12f58:	mov	r1, #39	; 0x27
   12f5c:	str	r0, [sp, #44]	; 0x2c
   12f60:	strb	r1, [fp]
   12f64:	str	r0, [sp, #48]	; 0x30
   12f68:	str	r4, [sp, #52]	; 0x34
   12f6c:	str	r4, [sp, #56]	; 0x38
   12f70:	str	r4, [sp, #64]	; 0x40
   12f74:	str	r0, [sp, #68]	; 0x44
   12f78:	str	r3, [sp, #80]	; 0x50
   12f7c:	str	r2, [sp, #84]	; 0x54
   12f80:	str	r0, [sp, #88]	; 0x58
   12f84:	b	12bc4 <__assert_fail@plt+0x1d3c>
   12f88:	mov	r5, #98	; 0x62
   12f8c:	b	12e38 <__assert_fail@plt+0x1fb0>
   12f90:	mov	r5, #97	; 0x61
   12f94:	b	12e38 <__assert_fail@plt+0x1fb0>
   12f98:	ldr	r3, [sp, #48]	; 0x30
   12f9c:	str	r3, [sp, #40]	; 0x28
   12fa0:	mov	r3, #116	; 0x74
   12fa4:	ldr	r2, [sp, #68]	; 0x44
   12fa8:	cmp	r2, #0
   12fac:	bne	131a8 <__assert_fail@plt+0x2320>
   12fb0:	ldr	r2, [sp, #60]	; 0x3c
   12fb4:	cmp	r2, #0
   12fb8:	bne	13104 <__assert_fail@plt+0x227c>
   12fbc:	ldr	r3, [sp, #44]	; 0x2c
   12fc0:	mov	r6, #0
   12fc4:	cmp	r3, #0
   12fc8:	beq	13174 <__assert_fail@plt+0x22ec>
   12fcc:	mov	r3, fp
   12fd0:	ldr	r2, [sp, #184]	; 0xb8
   12fd4:	cmp	r2, #0
   12fd8:	beq	12ff8 <__assert_fail@plt+0x2170>
   12fdc:	ubfx	r1, r5, #5, #8
   12fe0:	mov	r0, r2
   12fe4:	and	r2, r5, #31
   12fe8:	ldr	r1, [r0, r1, lsl #2]
   12fec:	lsr	r2, r1, r2
   12ff0:	tst	r2, #1
   12ff4:	bne	12e3c <__assert_fail@plt+0x1fb4>
   12ff8:	ldr	r2, [sp, #40]	; 0x28
   12ffc:	cmp	r2, #0
   13000:	addeq	r7, r7, #1
   13004:	bne	12e3c <__assert_fail@plt+0x1fb4>
   13008:	cmp	r3, #0
   1300c:	beq	12ea0 <__assert_fail@plt+0x2018>
   13010:	cmp	sl, r4
   13014:	mov	fp, #0
   13018:	movhi	r3, #39	; 0x27
   1301c:	strbhi	r3, [r9, r4]
   13020:	add	r3, r4, #1
   13024:	add	r4, r4, #2
   13028:	cmp	sl, r3
   1302c:	movhi	r2, #39	; 0x27
   13030:	strbhi	r2, [r9, r3]
   13034:	b	12ea0 <__assert_fail@plt+0x2018>
   13038:	ldr	r3, [sp, #48]	; 0x30
   1303c:	str	r3, [sp, #40]	; 0x28
   13040:	eor	r3, fp, #1
   13044:	ldr	r2, [sp, #52]	; 0x34
   13048:	ands	r2, r2, r3
   1304c:	beq	13d0c <__assert_fail@plt+0x2e84>
   13050:	cmp	sl, r4
   13054:	movhi	r3, #39	; 0x27
   13058:	strbhi	r3, [r9, r4]
   1305c:	add	r3, r4, #1
   13060:	cmp	sl, r3
   13064:	movhi	r1, #36	; 0x24
   13068:	strbhi	r1, [r9, r3]
   1306c:	add	r3, r4, #2
   13070:	cmp	sl, r3
   13074:	movhi	r1, #39	; 0x27
   13078:	strbhi	r1, [r9, r3]
   1307c:	add	r3, r4, #3
   13080:	cmp	sl, r3
   13084:	bls	13d58 <__assert_fail@plt+0x2ed0>
   13088:	mov	r4, r3
   1308c:	mov	r3, #92	; 0x5c
   13090:	mov	fp, r2
   13094:	mov	r2, r4
   13098:	strb	r3, [r9, r4]
   1309c:	ldr	r3, [sp, #176]	; 0xb0
   130a0:	add	r4, r4, #1
   130a4:	cmp	r3, #2
   130a8:	beq	13dc0 <__assert_fail@plt+0x2f38>
   130ac:	add	r3, r7, #1
   130b0:	cmp	r3, r8
   130b4:	bcs	130cc <__assert_fail@plt+0x2244>
   130b8:	ldr	r1, [sp, #28]
   130bc:	ldrb	r3, [r1, r3]
   130c0:	sub	r3, r3, #48	; 0x30
   130c4:	cmp	r3, #9
   130c8:	bls	13dd0 <__assert_fail@plt+0x2f48>
   130cc:	mov	r3, #0
   130d0:	mov	r5, #48	; 0x30
   130d4:	ldr	r6, [sp, #64]	; 0x40
   130d8:	cmp	r6, #0
   130dc:	beq	12fd0 <__assert_fail@plt+0x2148>
   130e0:	mov	r6, #0
   130e4:	b	12ff8 <__assert_fail@plt+0x2170>
   130e8:	ldr	r3, [sp, #48]	; 0x30
   130ec:	str	r3, [sp, #40]	; 0x28
   130f0:	ldr	r2, [sp, #60]	; 0x3c
   130f4:	mov	r5, #13
   130f8:	mov	r3, #114	; 0x72
   130fc:	cmp	r2, #0
   13100:	beq	12fbc <__assert_fail@plt+0x2134>
   13104:	mov	r5, r3
   13108:	b	12e38 <__assert_fail@plt+0x1fb0>
   1310c:	ldr	r3, [sp, #48]	; 0x30
   13110:	str	r3, [sp, #40]	; 0x28
   13114:	mov	r3, #118	; 0x76
   13118:	b	12fb0 <__assert_fail@plt+0x2128>
   1311c:	ldr	r3, [sp, #48]	; 0x30
   13120:	str	r3, [sp, #40]	; 0x28
   13124:	mov	r5, #10
   13128:	mov	r3, #110	; 0x6e
   1312c:	b	12fb0 <__assert_fail@plt+0x2128>
   13130:	ldr	r3, [sp, #48]	; 0x30
   13134:	cmn	r8, #1
   13138:	str	r3, [sp, #40]	; 0x28
   1313c:	beq	13584 <__assert_fail@plt+0x26fc>
   13140:	subs	r3, r8, #1
   13144:	movne	r3, #1
   13148:	cmp	r3, #0
   1314c:	bne	13158 <__assert_fail@plt+0x22d0>
   13150:	cmp	r7, #0
   13154:	beq	1319c <__assert_fail@plt+0x2314>
   13158:	mov	r6, #0
   1315c:	ldr	r3, [sp, #64]	; 0x40
   13160:	cmp	r3, #0
   13164:	beq	12fcc <__assert_fail@plt+0x2144>
   13168:	ldr	r3, [sp, #44]	; 0x2c
   1316c:	cmp	r3, #0
   13170:	bne	12fcc <__assert_fail@plt+0x2144>
   13174:	mov	r3, fp
   13178:	b	12ff8 <__assert_fail@plt+0x2170>
   1317c:	ldr	r3, [sp, #48]	; 0x30
   13180:	str	r3, [sp, #40]	; 0x28
   13184:	b	13150 <__assert_fail@plt+0x22c8>
   13188:	ldr	r3, [sp, #48]	; 0x30
   1318c:	str	r3, [sp, #40]	; 0x28
   13190:	b	13158 <__assert_fail@plt+0x22d0>
   13194:	ldr	r6, [sp, #48]	; 0x30
   13198:	str	r6, [sp, #40]	; 0x28
   1319c:	ldr	r3, [sp, #68]	; 0x44
   131a0:	cmp	r3, #0
   131a4:	beq	1315c <__assert_fail@plt+0x22d4>
   131a8:	mov	r3, #2
   131ac:	mov	fp, r9
   131b0:	str	r3, [sp, #176]	; 0xb0
   131b4:	ldr	r3, [sp, #60]	; 0x3c
   131b8:	cmp	r3, #0
   131bc:	ldr	r3, [sp, #176]	; 0xb0
   131c0:	movne	r3, #4
   131c4:	str	r3, [sp, #176]	; 0xb0
   131c8:	mov	lr, #0
   131cc:	mov	r0, fp
   131d0:	ldr	r2, [sp, #28]
   131d4:	ldr	r3, [sp, #180]	; 0xb4
   131d8:	ldr	r1, [sp, #188]	; 0xbc
   131dc:	bic	ip, r3, #2
   131e0:	ldr	r3, [sp, #176]	; 0xb0
   131e4:	stm	sp, {r3, ip, lr}
   131e8:	mov	r3, r8
   131ec:	ldr	ip, [sp, #192]	; 0xc0
   131f0:	str	r1, [sp, #12]
   131f4:	mov	r1, sl
   131f8:	str	ip, [sp, #16]
   131fc:	bl	12788 <__assert_fail@plt+0x1900>
   13200:	mov	r4, r0
   13204:	mov	r0, r4
   13208:	add	sp, sp, #140	; 0x8c
   1320c:	ldrd	r4, [sp]
   13210:	ldrd	r6, [sp, #8]
   13214:	ldrd	r8, [sp, #16]
   13218:	ldrd	sl, [sp, #24]
   1321c:	add	sp, sp, #32
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	ldr	r3, [sp, #48]	; 0x30
   13228:	str	r3, [sp, #40]	; 0x28
   1322c:	ldr	r3, [sp, #176]	; 0xb0
   13230:	cmp	r3, #2
   13234:	beq	135ac <__assert_fail@plt+0x2724>
   13238:	ldr	r3, [sp, #88]	; 0x58
   1323c:	cmp	r3, #0
   13240:	moveq	r5, #92	; 0x5c
   13244:	moveq	r3, r5
   13248:	beq	12fb0 <__assert_fail@plt+0x2128>
   1324c:	add	r7, r7, #1
   13250:	mov	r3, fp
   13254:	mov	r6, #0
   13258:	mov	r5, #92	; 0x5c
   1325c:	b	13008 <__assert_fail@plt+0x2180>
   13260:	ldr	r3, [sp, #64]	; 0x40
   13264:	cmp	r3, #0
   13268:	bne	140e0 <__assert_fail@plt+0x3258>
   1326c:	ldr	r2, [sp, #48]	; 0x30
   13270:	mov	r3, fp
   13274:	mov	r6, r2
   13278:	str	r2, [sp, #40]	; 0x28
   1327c:	b	12fd0 <__assert_fail@plt+0x2148>
   13280:	ldr	r3, [sp, #176]	; 0xb0
   13284:	cmp	r3, #2
   13288:	beq	1401c <__assert_fail@plt+0x3194>
   1328c:	cmp	r3, #5
   13290:	ldr	r3, [sp, #48]	; 0x30
   13294:	str	r3, [sp, #40]	; 0x28
   13298:	bne	132c4 <__assert_fail@plt+0x243c>
   1329c:	ldr	r3, [sp, #96]	; 0x60
   132a0:	cmp	r3, #0
   132a4:	beq	13d20 <__assert_fail@plt+0x2e98>
   132a8:	add	r3, r7, #2
   132ac:	cmp	r3, r8
   132b0:	bcs	132c4 <__assert_fail@plt+0x243c>
   132b4:	ldr	r2, [sp, #36]	; 0x24
   132b8:	ldrb	r5, [r2, #1]
   132bc:	cmp	r5, #63	; 0x3f
   132c0:	beq	13e08 <__assert_fail@plt+0x2f80>
   132c4:	mov	r6, #0
   132c8:	mov	r5, #63	; 0x3f
   132cc:	b	1315c <__assert_fail@plt+0x22d4>
   132d0:	ldr	r3, [sp, #176]	; 0xb0
   132d4:	cmp	r3, #2
   132d8:	ldr	r3, [sp, #48]	; 0x30
   132dc:	beq	13ac4 <__assert_fail@plt+0x2c3c>
   132e0:	mov	r5, #39	; 0x27
   132e4:	str	r3, [sp, #40]	; 0x28
   132e8:	str	r6, [sp, #80]	; 0x50
   132ec:	b	1315c <__assert_fail@plt+0x22d4>
   132f0:	ldr	r3, [sp, #180]	; 0xb4
   132f4:	cmp	r4, #0
   132f8:	and	r3, r3, #1
   132fc:	str	r3, [sp, #92]	; 0x5c
   13300:	ldr	r3, [sp, #180]	; 0xb4
   13304:	and	r3, r3, #4
   13308:	str	r3, [sp, #96]	; 0x60
   1330c:	bne	1412c <__assert_fail@plt+0x32a4>
   13310:	str	r4, [sp, #60]	; 0x3c
   13314:	cmp	sl, #0
   13318:	bne	14110 <__assert_fail@plt+0x3288>
   1331c:	mov	r3, #1
   13320:	movw	r2, #31700	; 0x7bd4
   13324:	movt	r2, #1
   13328:	mov	r4, r3
   1332c:	mov	r3, #2
   13330:	mov	r9, sl
   13334:	str	r4, [sp, #32]
   13338:	str	sl, [sp, #44]	; 0x2c
   1333c:	str	sl, [sp, #48]	; 0x30
   13340:	str	r4, [sp, #52]	; 0x34
   13344:	str	r4, [sp, #56]	; 0x38
   13348:	str	r4, [sp, #64]	; 0x40
   1334c:	str	sl, [sp, #68]	; 0x44
   13350:	str	r2, [sp, #72]	; 0x48
   13354:	str	sl, [sp, #80]	; 0x50
   13358:	str	sl, [sp, #84]	; 0x54
   1335c:	str	sl, [sp, #88]	; 0x58
   13360:	str	r3, [sp, #176]	; 0xb0
   13364:	b	128ac <__assert_fail@plt+0x1a24>
   13368:	ldrb	r5, [r0, r7]
   1336c:	cmp	r5, #126	; 0x7e
   13370:	ldrls	pc, [pc, r5, lsl #2]
   13374:	b	136d8 <__assert_fail@plt+0x2850>
   13378:	andeq	r3, r1, r4, lsr #13
   1337c:	ldrdeq	r3, [r1], -r8
   13380:	ldrdeq	r3, [r1], -r8
   13384:	ldrdeq	r3, [r1], -r8
   13388:	ldrdeq	r3, [r1], -r8
   1338c:	ldrdeq	r3, [r1], -r8
   13390:	ldrdeq	r3, [r1], -r8
   13394:	muleq	r1, r4, r6
   13398:	andeq	r3, r1, r4, lsl #13
   1339c:	andeq	r3, r1, r8, lsl #12
   133a0:	andeq	r3, r1, r4, ror r6
   133a4:	andeq	r3, r1, r8, ror #11
   133a8:	andeq	r3, r1, r8, asr #13
   133ac:	andeq	r3, r1, r4, asr r6
   133b0:	ldrdeq	r3, [r1], -r8
   133b4:	ldrdeq	r3, [r1], -r8
   133b8:	ldrdeq	r3, [r1], -r8
   133bc:	ldrdeq	r3, [r1], -r8
   133c0:	ldrdeq	r3, [r1], -r8
   133c4:	ldrdeq	r3, [r1], -r8
   133c8:	ldrdeq	r3, [r1], -r8
   133cc:	ldrdeq	r3, [r1], -r8
   133d0:	ldrdeq	r3, [r1], -r8
   133d4:	ldrdeq	r3, [r1], -r8
   133d8:	ldrdeq	r3, [r1], -r8
   133dc:	ldrdeq	r3, [r1], -r8
   133e0:	ldrdeq	r3, [r1], -r8
   133e4:	ldrdeq	r3, [r1], -r8
   133e8:	ldrdeq	r3, [r1], -r8
   133ec:	ldrdeq	r3, [r1], -r8
   133f0:	ldrdeq	r3, [r1], -r8
   133f4:	ldrdeq	r3, [r1], -r8
   133f8:	strdeq	r3, [r1], -ip
   133fc:	andeq	r3, r1, r4, ror #12
   13400:	andeq	r3, r1, r4, ror #12
   13404:	ldrdeq	r3, [r1], -ip
   13408:	andeq	r3, r1, r4, ror #12
   1340c:	ldrdeq	r3, [r1], -r0
   13410:	andeq	r3, r1, r4, ror #12
   13414:	andeq	r3, r1, r0, asr #12
   13418:	andeq	r3, r1, r4, ror #12
   1341c:	andeq	r3, r1, r4, ror #12
   13420:	andeq	r3, r1, r4, ror #12
   13424:	ldrdeq	r3, [r1], -r0
   13428:	ldrdeq	r3, [r1], -r0
   1342c:	ldrdeq	r3, [r1], -r0
   13430:	ldrdeq	r3, [r1], -r0
   13434:	ldrdeq	r3, [r1], -r0
   13438:	ldrdeq	r3, [r1], -r0
   1343c:	ldrdeq	r3, [r1], -r0
   13440:	ldrdeq	r3, [r1], -r0
   13444:	ldrdeq	r3, [r1], -r0
   13448:	ldrdeq	r3, [r1], -r0
   1344c:	ldrdeq	r3, [r1], -r0
   13450:	ldrdeq	r3, [r1], -r0
   13454:	ldrdeq	r3, [r1], -r0
   13458:	ldrdeq	r3, [r1], -r0
   1345c:	ldrdeq	r3, [r1], -r0
   13460:	ldrdeq	r3, [r1], -r0
   13464:	andeq	r3, r1, r4, ror #12
   13468:	andeq	r3, r1, r4, ror #12
   1346c:	andeq	r3, r1, r4, ror #12
   13470:	andeq	r3, r1, r4, ror #12
   13474:	andeq	r3, r1, r8, lsl r6
   13478:	ldrdeq	r3, [r1], -r8
   1347c:	ldrdeq	r3, [r1], -r0
   13480:	ldrdeq	r3, [r1], -r0
   13484:	ldrdeq	r3, [r1], -r0
   13488:	ldrdeq	r3, [r1], -r0
   1348c:	ldrdeq	r3, [r1], -r0
   13490:	ldrdeq	r3, [r1], -r0
   13494:	ldrdeq	r3, [r1], -r0
   13498:	ldrdeq	r3, [r1], -r0
   1349c:	ldrdeq	r3, [r1], -r0
   134a0:	ldrdeq	r3, [r1], -r0
   134a4:	ldrdeq	r3, [r1], -r0
   134a8:	ldrdeq	r3, [r1], -r0
   134ac:	ldrdeq	r3, [r1], -r0
   134b0:	ldrdeq	r3, [r1], -r0
   134b4:	ldrdeq	r3, [r1], -r0
   134b8:	ldrdeq	r3, [r1], -r0
   134bc:	ldrdeq	r3, [r1], -r0
   134c0:	ldrdeq	r3, [r1], -r0
   134c4:	ldrdeq	r3, [r1], -r0
   134c8:	ldrdeq	r3, [r1], -r0
   134cc:	ldrdeq	r3, [r1], -r0
   134d0:	ldrdeq	r3, [r1], -r0
   134d4:	ldrdeq	r3, [r1], -r0
   134d8:	ldrdeq	r3, [r1], -r0
   134dc:	ldrdeq	r3, [r1], -r0
   134e0:	ldrdeq	r3, [r1], -r0
   134e4:	andeq	r3, r1, r4, ror #12
   134e8:	muleq	r1, r8, r5
   134ec:	ldrdeq	r3, [r1], -r0
   134f0:	andeq	r3, r1, r4, ror #12
   134f4:	ldrdeq	r3, [r1], -r0
   134f8:	andeq	r3, r1, r4, ror #12
   134fc:	ldrdeq	r3, [r1], -r0
   13500:	ldrdeq	r3, [r1], -r0
   13504:	ldrdeq	r3, [r1], -r0
   13508:	ldrdeq	r3, [r1], -r0
   1350c:	ldrdeq	r3, [r1], -r0
   13510:	ldrdeq	r3, [r1], -r0
   13514:	ldrdeq	r3, [r1], -r0
   13518:	ldrdeq	r3, [r1], -r0
   1351c:	ldrdeq	r3, [r1], -r0
   13520:	ldrdeq	r3, [r1], -r0
   13524:	ldrdeq	r3, [r1], -r0
   13528:	ldrdeq	r3, [r1], -r0
   1352c:	ldrdeq	r3, [r1], -r0
   13530:	ldrdeq	r3, [r1], -r0
   13534:	ldrdeq	r3, [r1], -r0
   13538:	ldrdeq	r3, [r1], -r0
   1353c:	ldrdeq	r3, [r1], -r0
   13540:	ldrdeq	r3, [r1], -r0
   13544:	ldrdeq	r3, [r1], -r0
   13548:	ldrdeq	r3, [r1], -r0
   1354c:	ldrdeq	r3, [r1], -r0
   13550:	ldrdeq	r3, [r1], -r0
   13554:	ldrdeq	r3, [r1], -r0
   13558:	ldrdeq	r3, [r1], -r0
   1355c:	ldrdeq	r3, [r1], -r0
   13560:	ldrdeq	r3, [r1], -r0
   13564:	andeq	r3, r1, r4, ror r5
   13568:	andeq	r3, r1, r4, ror #12
   1356c:	andeq	r3, r1, r4, ror r5
   13570:	ldrdeq	r3, [r1], -ip
   13574:	mov	r3, #0
   13578:	cmn	r8, #1
   1357c:	str	r3, [sp, #40]	; 0x28
   13580:	bne	13140 <__assert_fail@plt+0x22b8>
   13584:	ldr	r3, [sp, #28]
   13588:	ldrb	r3, [r3, #1]
   1358c:	adds	r3, r3, #0
   13590:	movne	r3, #1
   13594:	b	13148 <__assert_fail@plt+0x22c0>
   13598:	mov	r3, #0
   1359c:	str	r3, [sp, #40]	; 0x28
   135a0:	ldr	r3, [sp, #176]	; 0xb0
   135a4:	cmp	r3, #2
   135a8:	bne	13238 <__assert_fail@plt+0x23b0>
   135ac:	ldr	r3, [sp, #44]	; 0x2c
   135b0:	cmp	r3, #0
   135b4:	bne	13ef4 <__assert_fail@plt+0x306c>
   135b8:	mov	r6, r3
   135bc:	add	r7, r7, #1
   135c0:	mov	r3, fp
   135c4:	mov	r5, #92	; 0x5c
   135c8:	b	13008 <__assert_fail@plt+0x2180>
   135cc:	ldr	r6, [sp, #48]	; 0x30
   135d0:	mov	r3, #0
   135d4:	str	r3, [sp, #40]	; 0x28
   135d8:	b	1315c <__assert_fail@plt+0x22d4>
   135dc:	mov	r3, #0
   135e0:	str	r3, [sp, #40]	; 0x28
   135e4:	b	13150 <__assert_fail@plt+0x22c8>
   135e8:	mov	r3, #0
   135ec:	str	r3, [sp, #40]	; 0x28
   135f0:	mov	r3, #118	; 0x76
   135f4:	b	12fb0 <__assert_fail@plt+0x2128>
   135f8:	ldr	r6, [sp, #48]	; 0x30
   135fc:	mov	r3, #0
   13600:	str	r3, [sp, #40]	; 0x28
   13604:	b	1319c <__assert_fail@plt+0x2314>
   13608:	mov	r3, #0
   1360c:	str	r3, [sp, #40]	; 0x28
   13610:	mov	r3, #116	; 0x74
   13614:	b	12fa4 <__assert_fail@plt+0x211c>
   13618:	ldr	r3, [sp, #176]	; 0xb0
   1361c:	cmp	r3, #2
   13620:	beq	13b30 <__assert_fail@plt+0x2ca8>
   13624:	cmp	r3, #5
   13628:	mov	r3, #0
   1362c:	str	r3, [sp, #40]	; 0x28
   13630:	beq	1329c <__assert_fail@plt+0x2414>
   13634:	mov	r6, #0
   13638:	mov	r5, #63	; 0x3f
   1363c:	b	1315c <__assert_fail@plt+0x22d4>
   13640:	ldr	r3, [sp, #176]	; 0xb0
   13644:	cmp	r3, #2
   13648:	beq	13ab8 <__assert_fail@plt+0x2c30>
   1364c:	mov	r3, #0
   13650:	b	132e0 <__assert_fail@plt+0x2458>
   13654:	mov	r3, #0
   13658:	str	r3, [sp, #40]	; 0x28
   1365c:	mov	r3, #114	; 0x72
   13660:	b	12fa4 <__assert_fail@plt+0x211c>
   13664:	mov	r3, #0
   13668:	mov	r6, r3
   1366c:	str	r3, [sp, #40]	; 0x28
   13670:	b	1319c <__assert_fail@plt+0x2314>
   13674:	mov	r3, #0
   13678:	str	r3, [sp, #40]	; 0x28
   1367c:	mov	r3, #110	; 0x6e
   13680:	b	12fa4 <__assert_fail@plt+0x211c>
   13684:	mov	r3, #0
   13688:	str	r3, [sp, #40]	; 0x28
   1368c:	mov	r3, #98	; 0x62
   13690:	b	12fb0 <__assert_fail@plt+0x2128>
   13694:	mov	r3, #0
   13698:	str	r3, [sp, #40]	; 0x28
   1369c:	mov	r3, #97	; 0x61
   136a0:	b	12fb0 <__assert_fail@plt+0x2128>
   136a4:	ldr	r3, [sp, #60]	; 0x3c
   136a8:	cmp	r3, #0
   136ac:	bne	13a9c <__assert_fail@plt+0x2c14>
   136b0:	ldr	r3, [sp, #92]	; 0x5c
   136b4:	cmp	r3, #0
   136b8:	addne	r7, r7, #1
   136bc:	bne	128bc <__assert_fail@plt+0x1a34>
   136c0:	str	r3, [sp, #40]	; 0x28
   136c4:	b	12fbc <__assert_fail@plt+0x2134>
   136c8:	mov	r3, #0
   136cc:	str	r3, [sp, #40]	; 0x28
   136d0:	mov	r3, #102	; 0x66
   136d4:	b	12fb0 <__assert_fail@plt+0x2128>
   136d8:	mov	r3, #0
   136dc:	str	r3, [sp, #40]	; 0x28
   136e0:	ldr	r3, [sp, #76]	; 0x4c
   136e4:	cmp	r3, #1
   136e8:	bne	13b50 <__assert_fail@plt+0x2cc8>
   136ec:	bl	10d80 <__ctype_b_loc@plt>
   136f0:	ldr	r2, [r0]
   136f4:	sxth	r3, r5
   136f8:	lsl	r3, r3, #1
   136fc:	ldr	r1, [sp, #76]	; 0x4c
   13700:	ldrh	r3, [r2, r3]
   13704:	mov	r0, r1
   13708:	and	r3, r3, #16384	; 0x4000
   1370c:	cmp	r3, #0
   13710:	ldr	r3, [sp, #60]	; 0x3c
   13714:	movne	r6, #1
   13718:	moveq	r6, #0
   1371c:	movne	r2, #0
   13720:	andeq	r2, r3, #1
   13724:	cmp	r2, #0
   13728:	beq	1315c <__assert_fail@plt+0x22d4>
   1372c:	ldr	r2, [sp, #60]	; 0x3c
   13730:	mov	r6, #0
   13734:	add	r1, r0, r7
   13738:	mov	ip, #39	; 0x27
   1373c:	str	r6, [sp, #100]	; 0x64
   13740:	mov	r0, #0
   13744:	ldr	lr, [sp, #36]	; 0x24
   13748:	str	r8, [sp, #36]	; 0x24
   1374c:	ldr	r6, [sp, #40]	; 0x28
   13750:	ldr	r8, [sp, #44]	; 0x2c
   13754:	b	13804 <__assert_fail@plt+0x297c>
   13758:	cmp	r8, #0
   1375c:	bne	13d38 <__assert_fail@plt+0x2eb0>
   13760:	ldr	r0, [sp, #52]	; 0x34
   13764:	eor	r3, fp, #1
   13768:	ands	r3, r0, r3
   1376c:	beq	1379c <__assert_fail@plt+0x2914>
   13770:	cmp	sl, r4
   13774:	add	r0, r4, #1
   13778:	strbhi	ip, [r9, r4]
   1377c:	cmp	sl, r0
   13780:	movhi	fp, #36	; 0x24
   13784:	strbhi	fp, [r9, r0]
   13788:	add	r0, r4, #2
   1378c:	mov	fp, r3
   13790:	cmp	sl, r0
   13794:	add	r4, r4, #3
   13798:	strbhi	ip, [r9, r0]
   1379c:	cmp	sl, r4
   137a0:	movhi	r3, #92	; 0x5c
   137a4:	strbhi	r3, [r9, r4]
   137a8:	add	r3, r4, #1
   137ac:	cmp	sl, r3
   137b0:	bls	137c0 <__assert_fail@plt+0x2938>
   137b4:	lsr	r0, r5, #6
   137b8:	add	r0, r0, #48	; 0x30
   137bc:	strb	r0, [r9, r3]
   137c0:	add	r3, r4, #2
   137c4:	cmp	sl, r3
   137c8:	bls	137d8 <__assert_fail@plt+0x2950>
   137cc:	ubfx	r0, r5, #3, #3
   137d0:	add	r0, r0, #48	; 0x30
   137d4:	strb	r0, [r9, r3]
   137d8:	add	r7, r7, #1
   137dc:	and	r5, r5, #7
   137e0:	cmp	r1, r7
   137e4:	add	r5, r5, #48	; 0x30
   137e8:	add	r4, r4, #3
   137ec:	bls	13d4c <__assert_fail@plt+0x2ec4>
   137f0:	mov	r0, r2
   137f4:	cmp	sl, r4
   137f8:	strbhi	r5, [r9, r4]
   137fc:	add	r4, r4, #1
   13800:	ldrb	r5, [lr, #1]!
   13804:	cmp	r2, #0
   13808:	bne	13758 <__assert_fail@plt+0x28d0>
   1380c:	eor	r3, r0, #1
   13810:	cmp	r6, #0
   13814:	and	r3, r3, fp
   13818:	uxtb	r3, r3
   1381c:	beq	13830 <__assert_fail@plt+0x29a8>
   13820:	cmp	sl, r4
   13824:	movhi	r6, #92	; 0x5c
   13828:	strbhi	r6, [r9, r4]
   1382c:	add	r4, r4, #1
   13830:	add	r7, r7, #1
   13834:	cmp	r7, r1
   13838:	bcs	13d2c <__assert_fail@plt+0x2ea4>
   1383c:	cmp	r3, #0
   13840:	beq	13d70 <__assert_fail@plt+0x2ee8>
   13844:	cmp	sl, r4
   13848:	add	r3, r4, #1
   1384c:	mov	r6, #0
   13850:	strbhi	ip, [r9, r4]
   13854:	cmp	sl, r3
   13858:	add	r4, r4, #2
   1385c:	mov	fp, r6
   13860:	strbhi	ip, [r9, r3]
   13864:	b	137f4 <__assert_fail@plt+0x296c>
   13868:	ldr	r3, [sp, #36]	; 0x24
   1386c:	ldrb	r5, [r3]
   13870:	cmp	r5, #126	; 0x7e
   13874:	ldrls	pc, [pc, r5, lsl #2]
   13878:	b	136d8 <__assert_fail@plt+0x2850>
   1387c:	muleq	r1, ip, sl
   13880:	ldrdeq	r3, [r1], -r8
   13884:	ldrdeq	r3, [r1], -r8
   13888:	ldrdeq	r3, [r1], -r8
   1388c:	ldrdeq	r3, [r1], -r8
   13890:	ldrdeq	r3, [r1], -r8
   13894:	ldrdeq	r3, [r1], -r8
   13898:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1389c:	andeq	r2, r1, r8, lsl #31
   138a0:	andeq	r3, r1, r8, lsl #12
   138a4:	muleq	r1, r0, sl
   138a8:	andeq	r3, r1, r8, ror #11
   138ac:	andeq	r2, r1, r4, lsr lr
   138b0:	andeq	r3, r1, r4, lsl #21
   138b4:	ldrdeq	r3, [r1], -r8
   138b8:	ldrdeq	r3, [r1], -r8
   138bc:	ldrdeq	r3, [r1], -r8
   138c0:	ldrdeq	r3, [r1], -r8
   138c4:	ldrdeq	r3, [r1], -r8
   138c8:	ldrdeq	r3, [r1], -r8
   138cc:	ldrdeq	r3, [r1], -r8
   138d0:	ldrdeq	r3, [r1], -r8
   138d4:	ldrdeq	r3, [r1], -r8
   138d8:	ldrdeq	r3, [r1], -r8
   138dc:	ldrdeq	r3, [r1], -r8
   138e0:	ldrdeq	r3, [r1], -r8
   138e4:	ldrdeq	r3, [r1], -r8
   138e8:	ldrdeq	r3, [r1], -r8
   138ec:	ldrdeq	r3, [r1], -r8
   138f0:	ldrdeq	r3, [r1], -r8
   138f4:	ldrdeq	r3, [r1], -r8
   138f8:	ldrdeq	r3, [r1], -r8
   138fc:	strdeq	r3, [r1], -r8
   13900:	andeq	r3, r1, r8, ror sl
   13904:	andeq	r3, r1, r8, ror sl
   13908:	ldrdeq	r3, [r1], -ip
   1390c:	andeq	r3, r1, r8, ror sl
   13910:	andeq	r3, r1, ip, asr #11
   13914:	andeq	r3, r1, r8, ror sl
   13918:	andeq	r3, r1, r0, asr #12
   1391c:	andeq	r3, r1, r8, ror sl
   13920:	andeq	r3, r1, r8, ror sl
   13924:	andeq	r3, r1, r8, ror sl
   13928:	andeq	r3, r1, ip, asr #11
   1392c:	andeq	r3, r1, ip, asr #11
   13930:	andeq	r3, r1, ip, asr #11
   13934:	andeq	r3, r1, ip, asr #11
   13938:	andeq	r3, r1, ip, asr #11
   1393c:	andeq	r3, r1, ip, asr #11
   13940:	andeq	r3, r1, ip, asr #11
   13944:	andeq	r3, r1, ip, asr #11
   13948:	andeq	r3, r1, ip, asr #11
   1394c:	andeq	r3, r1, ip, asr #11
   13950:	andeq	r3, r1, ip, asr #11
   13954:	andeq	r3, r1, ip, asr #11
   13958:	andeq	r3, r1, ip, asr #11
   1395c:	andeq	r3, r1, ip, asr #11
   13960:	andeq	r3, r1, ip, asr #11
   13964:	andeq	r3, r1, ip, asr #11
   13968:	andeq	r3, r1, r8, ror sl
   1396c:	andeq	r3, r1, r8, ror sl
   13970:	andeq	r3, r1, r8, ror sl
   13974:	andeq	r3, r1, r8, ror sl
   13978:	andeq	r3, r1, r8, lsl r6
   1397c:	ldrdeq	r3, [r1], -r8
   13980:	andeq	r3, r1, ip, asr #11
   13984:	andeq	r3, r1, ip, asr #11
   13988:	andeq	r3, r1, ip, asr #11
   1398c:	andeq	r3, r1, ip, asr #11
   13990:	andeq	r3, r1, ip, asr #11
   13994:	andeq	r3, r1, ip, asr #11
   13998:	andeq	r3, r1, ip, asr #11
   1399c:	andeq	r3, r1, ip, asr #11
   139a0:	andeq	r3, r1, ip, asr #11
   139a4:	andeq	r3, r1, ip, asr #11
   139a8:	andeq	r3, r1, ip, asr #11
   139ac:	andeq	r3, r1, ip, asr #11
   139b0:	andeq	r3, r1, ip, asr #11
   139b4:	andeq	r3, r1, ip, asr #11
   139b8:	andeq	r3, r1, ip, asr #11
   139bc:	andeq	r3, r1, ip, asr #11
   139c0:	andeq	r3, r1, ip, asr #11
   139c4:	andeq	r3, r1, ip, asr #11
   139c8:	andeq	r3, r1, ip, asr #11
   139cc:	andeq	r3, r1, ip, asr #11
   139d0:	andeq	r3, r1, ip, asr #11
   139d4:	andeq	r3, r1, ip, asr #11
   139d8:	andeq	r3, r1, ip, asr #11
   139dc:	andeq	r3, r1, ip, asr #11
   139e0:	andeq	r3, r1, ip, asr #11
   139e4:	andeq	r3, r1, ip, asr #11
   139e8:	andeq	r3, r1, r8, ror sl
   139ec:	muleq	r1, r8, r5
   139f0:	andeq	r3, r1, ip, asr #11
   139f4:	andeq	r3, r1, r8, ror sl
   139f8:	andeq	r3, r1, ip, asr #11
   139fc:	andeq	r3, r1, r8, ror sl
   13a00:	andeq	r3, r1, ip, asr #11
   13a04:	andeq	r3, r1, ip, asr #11
   13a08:	andeq	r3, r1, ip, asr #11
   13a0c:	andeq	r3, r1, ip, asr #11
   13a10:	andeq	r3, r1, ip, asr #11
   13a14:	andeq	r3, r1, ip, asr #11
   13a18:	andeq	r3, r1, ip, asr #11
   13a1c:	andeq	r3, r1, ip, asr #11
   13a20:	andeq	r3, r1, ip, asr #11
   13a24:	andeq	r3, r1, ip, asr #11
   13a28:	andeq	r3, r1, ip, asr #11
   13a2c:	andeq	r3, r1, ip, asr #11
   13a30:	andeq	r3, r1, ip, asr #11
   13a34:	andeq	r3, r1, ip, asr #11
   13a38:	andeq	r3, r1, ip, asr #11
   13a3c:	andeq	r3, r1, ip, asr #11
   13a40:	andeq	r3, r1, ip, asr #11
   13a44:	andeq	r3, r1, ip, asr #11
   13a48:	andeq	r3, r1, ip, asr #11
   13a4c:	andeq	r3, r1, ip, asr #11
   13a50:	andeq	r3, r1, ip, asr #11
   13a54:	andeq	r3, r1, ip, asr #11
   13a58:	andeq	r3, r1, ip, asr #11
   13a5c:	andeq	r3, r1, ip, asr #11
   13a60:	andeq	r3, r1, ip, asr #11
   13a64:	andeq	r3, r1, ip, asr #11
   13a68:	andeq	r3, r1, r4, ror r5
   13a6c:	andeq	r3, r1, r8, ror sl
   13a70:	andeq	r3, r1, r4, ror r5
   13a74:	ldrdeq	r3, [r1], -ip
   13a78:	mov	r3, #0
   13a7c:	str	r3, [sp, #40]	; 0x28
   13a80:	b	13158 <__assert_fail@plt+0x22d0>
   13a84:	mov	r3, #0
   13a88:	str	r3, [sp, #40]	; 0x28
   13a8c:	b	130f0 <__assert_fail@plt+0x2268>
   13a90:	mov	r3, #0
   13a94:	str	r3, [sp, #40]	; 0x28
   13a98:	b	13124 <__assert_fail@plt+0x229c>
   13a9c:	ldr	r3, [sp, #44]	; 0x2c
   13aa0:	cmp	r3, #0
   13aa4:	beq	1303c <__assert_fail@plt+0x21b4>
   13aa8:	ldr	r3, [sp, #52]	; 0x34
   13aac:	mov	fp, r9
   13ab0:	str	r3, [sp, #60]	; 0x3c
   13ab4:	b	131b4 <__assert_fail@plt+0x232c>
   13ab8:	ldr	r3, [sp, #44]	; 0x2c
   13abc:	cmp	r3, #0
   13ac0:	bne	13ef4 <__assert_fail@plt+0x306c>
   13ac4:	str	r3, [sp, #40]	; 0x28
   13ac8:	cmp	sl, #0
   13acc:	ldr	r3, [sp, #84]	; 0x54
   13ad0:	clz	r3, r3
   13ad4:	lsr	r3, r3, #5
   13ad8:	moveq	r3, #0
   13adc:	cmp	r3, #0
   13ae0:	strne	sl, [sp, #84]	; 0x54
   13ae4:	movne	sl, #0
   13ae8:	bne	13b18 <__assert_fail@plt+0x2c90>
   13aec:	cmp	sl, r4
   13af0:	movhi	r3, #39	; 0x27
   13af4:	strbhi	r3, [r9, r4]
   13af8:	add	r3, r4, #1
   13afc:	cmp	sl, r3
   13b00:	movhi	r2, #92	; 0x5c
   13b04:	strbhi	r2, [r9, r3]
   13b08:	add	r3, r4, #2
   13b0c:	cmp	sl, r3
   13b10:	movhi	r2, #39	; 0x27
   13b14:	strbhi	r2, [r9, r3]
   13b18:	mov	r3, #0
   13b1c:	add	r4, r4, #3
   13b20:	str	r6, [sp, #80]	; 0x50
   13b24:	mov	fp, r3
   13b28:	mov	r5, #39	; 0x27
   13b2c:	b	12ff8 <__assert_fail@plt+0x2170>
   13b30:	ldr	r3, [sp, #44]	; 0x2c
   13b34:	cmp	r3, #0
   13b38:	bne	13ef4 <__assert_fail@plt+0x306c>
   13b3c:	mov	r6, #0
   13b40:	mov	r5, #63	; 0x3f
   13b44:	str	r3, [sp, #40]	; 0x28
   13b48:	mov	r3, fp
   13b4c:	b	12ff8 <__assert_fail@plt+0x2170>
   13b50:	mov	r2, #0
   13b54:	mov	r3, #0
   13b58:	cmn	r8, #1
   13b5c:	strd	r2, [sp, #128]	; 0x80
   13b60:	bne	13b70 <__assert_fail@plt+0x2ce8>
   13b64:	ldr	r0, [sp, #28]
   13b68:	bl	10d98 <strlen@plt>
   13b6c:	mov	r8, r0
   13b70:	str	r9, [sp, #100]	; 0x64
   13b74:	mov	r3, #0
   13b78:	strd	sl, [sp, #104]	; 0x68
   13b7c:	ldr	sl, [sp, #28]
   13b80:	str	r5, [sp, #112]	; 0x70
   13b84:	mov	r5, r3
   13b88:	ldr	r9, [sp, #68]	; 0x44
   13b8c:	str	r4, [sp, #116]	; 0x74
   13b90:	add	r4, r7, r5
   13b94:	add	r3, sp, #128	; 0x80
   13b98:	add	fp, sl, r4
   13b9c:	sub	r2, r8, r4
   13ba0:	mov	r1, fp
   13ba4:	add	r0, sp, #124	; 0x7c
   13ba8:	bl	16f80 <__assert_fail@plt+0x60f8>
   13bac:	subs	r1, r0, #0
   13bb0:	beq	13bf0 <__assert_fail@plt+0x2d68>
   13bb4:	cmn	r1, #1
   13bb8:	beq	13f48 <__assert_fail@plt+0x30c0>
   13bbc:	cmn	r1, #2
   13bc0:	beq	13f68 <__assert_fail@plt+0x30e0>
   13bc4:	cmp	r9, #0
   13bc8:	bne	13c20 <__assert_fail@plt+0x2d98>
   13bcc:	ldr	r0, [sp, #124]	; 0x7c
   13bd0:	add	r5, r5, r1
   13bd4:	bl	10cf0 <iswprint@plt>
   13bd8:	cmp	r0, #0
   13bdc:	add	r0, sp, #128	; 0x80
   13be0:	moveq	r6, #0
   13be4:	bl	10ca8 <mbsinit@plt>
   13be8:	cmp	r0, #0
   13bec:	beq	13b90 <__assert_fail@plt+0x2d08>
   13bf0:	ldr	r3, [sp, #60]	; 0x3c
   13bf4:	add	r9, sp, #100	; 0x64
   13bf8:	mov	r0, r5
   13bfc:	ldm	r9, {r9, sl, fp}
   13c00:	eor	r2, r6, #1
   13c04:	ldr	r5, [sp, #112]	; 0x70
   13c08:	and	r2, r2, r3
   13c0c:	uxtb	r2, r2
   13c10:	ldr	r4, [sp, #116]	; 0x74
   13c14:	cmp	r0, #1
   13c18:	bhi	13734 <__assert_fail@plt+0x28ac>
   13c1c:	b	13724 <__assert_fail@plt+0x289c>
   13c20:	cmp	r1, #1
   13c24:	beq	13bcc <__assert_fail@plt+0x2d44>
   13c28:	add	r2, r4, #1
   13c2c:	add	r3, sl, r1
   13c30:	add	r2, sl, r2
   13c34:	add	r4, r3, r4
   13c38:	ldrb	r3, [r2], #1
   13c3c:	sub	r3, r3, #91	; 0x5b
   13c40:	cmp	r3, #33	; 0x21
   13c44:	ldrls	pc, [pc, r3, lsl #2]
   13c48:	b	13cd4 <__assert_fail@plt+0x2e4c>
   13c4c:	andeq	r3, r1, r0, ror #25
   13c50:	andeq	r3, r1, r0, ror #25
   13c54:	ldrdeq	r3, [r1], -r4
   13c58:	andeq	r3, r1, r0, ror #25
   13c5c:	ldrdeq	r3, [r1], -r4
   13c60:	andeq	r3, r1, r0, ror #25
   13c64:	ldrdeq	r3, [r1], -r4
   13c68:	ldrdeq	r3, [r1], -r4
   13c6c:	ldrdeq	r3, [r1], -r4
   13c70:	ldrdeq	r3, [r1], -r4
   13c74:	ldrdeq	r3, [r1], -r4
   13c78:	ldrdeq	r3, [r1], -r4
   13c7c:	ldrdeq	r3, [r1], -r4
   13c80:	ldrdeq	r3, [r1], -r4
   13c84:	ldrdeq	r3, [r1], -r4
   13c88:	ldrdeq	r3, [r1], -r4
   13c8c:	ldrdeq	r3, [r1], -r4
   13c90:	ldrdeq	r3, [r1], -r4
   13c94:	ldrdeq	r3, [r1], -r4
   13c98:	ldrdeq	r3, [r1], -r4
   13c9c:	ldrdeq	r3, [r1], -r4
   13ca0:	ldrdeq	r3, [r1], -r4
   13ca4:	ldrdeq	r3, [r1], -r4
   13ca8:	ldrdeq	r3, [r1], -r4
   13cac:	ldrdeq	r3, [r1], -r4
   13cb0:	ldrdeq	r3, [r1], -r4
   13cb4:	ldrdeq	r3, [r1], -r4
   13cb8:	ldrdeq	r3, [r1], -r4
   13cbc:	ldrdeq	r3, [r1], -r4
   13cc0:	ldrdeq	r3, [r1], -r4
   13cc4:	ldrdeq	r3, [r1], -r4
   13cc8:	ldrdeq	r3, [r1], -r4
   13ccc:	ldrdeq	r3, [r1], -r4
   13cd0:	andeq	r3, r1, r0, ror #25
   13cd4:	cmp	r4, r2
   13cd8:	bne	13c38 <__assert_fail@plt+0x2db0>
   13cdc:	b	13bcc <__assert_fail@plt+0x2d44>
   13ce0:	mov	r3, #2
   13ce4:	ldr	fp, [sp, #100]	; 0x64
   13ce8:	str	r3, [sp, #176]	; 0xb0
   13cec:	ldr	sl, [sp, #104]	; 0x68
   13cf0:	b	131b4 <__assert_fail@plt+0x232c>
   13cf4:	ldr	r2, [sp, #52]	; 0x34
   13cf8:	mov	fp, r9
   13cfc:	ldr	r3, [sp, #60]	; 0x3c
   13d00:	and	r3, r3, r2
   13d04:	str	r3, [sp, #60]	; 0x3c
   13d08:	b	131b4 <__assert_fail@plt+0x232c>
   13d0c:	cmp	sl, r4
   13d10:	movhi	r2, fp
   13d14:	bhi	1308c <__assert_fail@plt+0x2204>
   13d18:	mov	r2, r4
   13d1c:	b	1309c <__assert_fail@plt+0x2214>
   13d20:	mov	r6, r3
   13d24:	mov	r5, #63	; 0x3f
   13d28:	b	1315c <__assert_fail@plt+0x22d4>
   13d2c:	ldr	r8, [sp, #36]	; 0x24
   13d30:	ldr	r6, [sp, #100]	; 0x64
   13d34:	b	13008 <__assert_fail@plt+0x2180>
   13d38:	mov	fp, r9
   13d3c:	ldr	r8, [sp, #36]	; 0x24
   13d40:	ldr	r3, [sp, #52]	; 0x34
   13d44:	str	r3, [sp, #60]	; 0x3c
   13d48:	b	131b4 <__assert_fail@plt+0x232c>
   13d4c:	ldr	r8, [sp, #36]	; 0x24
   13d50:	ldr	r6, [sp, #100]	; 0x64
   13d54:	b	12ea0 <__assert_fail@plt+0x2018>
   13d58:	mov	r3, #0
   13d5c:	add	r4, r4, #4
   13d60:	mov	fp, r2
   13d64:	mov	r6, r3
   13d68:	mov	r5, #48	; 0x30
   13d6c:	b	12ff8 <__assert_fail@plt+0x2170>
   13d70:	mov	r6, r3
   13d74:	b	137f4 <__assert_fail@plt+0x296c>
   13d78:	mov	r3, #1
   13d7c:	movw	r2, #31680	; 0x7bc0
   13d80:	movt	r2, #1
   13d84:	mov	r4, r3
   13d88:	mov	r9, sl
   13d8c:	str	r3, [sp, #32]
   13d90:	str	sl, [sp, #44]	; 0x2c
   13d94:	str	r3, [sp, #48]	; 0x30
   13d98:	str	sl, [sp, #52]	; 0x34
   13d9c:	str	r3, [sp, #56]	; 0x38
   13da0:	str	r3, [sp, #60]	; 0x3c
   13da4:	str	sl, [sp, #64]	; 0x40
   13da8:	str	sl, [sp, #68]	; 0x44
   13dac:	str	r2, [sp, #72]	; 0x48
   13db0:	str	sl, [sp, #80]	; 0x50
   13db4:	str	sl, [sp, #84]	; 0x54
   13db8:	str	sl, [sp, #88]	; 0x58
   13dbc:	b	128ac <__assert_fail@plt+0x1a24>
   13dc0:	mov	r3, #0
   13dc4:	mov	r5, #48	; 0x30
   13dc8:	mov	r6, r3
   13dcc:	b	12ff8 <__assert_fail@plt+0x2170>
   13dd0:	cmp	sl, r4
   13dd4:	mov	r5, #48	; 0x30
   13dd8:	movhi	r3, #48	; 0x30
   13ddc:	strbhi	r3, [r9, r4]
   13de0:	add	r3, r2, #2
   13de4:	add	r4, r2, #3
   13de8:	cmp	sl, r3
   13dec:	movhi	r1, #48	; 0x30
   13df0:	strbhi	r1, [r9, r3]
   13df4:	mov	r3, #0
   13df8:	b	130d4 <__assert_fail@plt+0x224c>
   13dfc:	ldr	r3, [sp, #48]	; 0x30
   13e00:	str	r3, [sp, #40]	; 0x28
   13e04:	b	136e0 <__assert_fail@plt+0x2858>
   13e08:	ldr	r2, [sp, #28]
   13e0c:	ldrb	r2, [r2, r3]
   13e10:	sub	r1, r2, #33	; 0x21
   13e14:	cmp	r1, #29
   13e18:	ldrls	pc, [pc, r1, lsl #2]
   13e1c:	b	13158 <__assert_fail@plt+0x22d0>
   13e20:	muleq	r1, r8, lr
   13e24:	andeq	r3, r1, r8, asr r1
   13e28:	andeq	r3, r1, r8, asr r1
   13e2c:	andeq	r3, r1, r8, asr r1
   13e30:	andeq	r3, r1, r8, asr r1
   13e34:	andeq	r3, r1, r8, asr r1
   13e38:	muleq	r1, r8, lr
   13e3c:	muleq	r1, r8, lr
   13e40:	muleq	r1, r8, lr
   13e44:	andeq	r3, r1, r8, asr r1
   13e48:	andeq	r3, r1, r8, asr r1
   13e4c:	andeq	r3, r1, r8, asr r1
   13e50:	muleq	r1, r8, lr
   13e54:	andeq	r3, r1, r8, asr r1
   13e58:	muleq	r1, r8, lr
   13e5c:	andeq	r3, r1, r8, asr r1
   13e60:	andeq	r3, r1, r8, asr r1
   13e64:	andeq	r3, r1, r8, asr r1
   13e68:	andeq	r3, r1, r8, asr r1
   13e6c:	andeq	r3, r1, r8, asr r1
   13e70:	andeq	r3, r1, r8, asr r1
   13e74:	andeq	r3, r1, r8, asr r1
   13e78:	andeq	r3, r1, r8, asr r1
   13e7c:	andeq	r3, r1, r8, asr r1
   13e80:	andeq	r3, r1, r8, asr r1
   13e84:	andeq	r3, r1, r8, asr r1
   13e88:	andeq	r3, r1, r8, asr r1
   13e8c:	muleq	r1, r8, lr
   13e90:	muleq	r1, r8, lr
   13e94:	muleq	r1, r8, lr
   13e98:	ldr	r1, [sp, #44]	; 0x2c
   13e9c:	cmp	r1, #0
   13ea0:	bne	14100 <__assert_fail@plt+0x3278>
   13ea4:	cmp	sl, r4
   13ea8:	mov	r7, r3
   13eac:	movhi	r1, #63	; 0x3f
   13eb0:	mov	r5, r2
   13eb4:	mov	r3, fp
   13eb8:	strbhi	r1, [r9, r4]
   13ebc:	add	r1, r4, #1
   13ec0:	cmp	sl, r1
   13ec4:	movhi	r0, #34	; 0x22
   13ec8:	strbhi	r0, [r9, r1]
   13ecc:	add	r1, r4, #2
   13ed0:	cmp	sl, r1
   13ed4:	movhi	r0, #34	; 0x22
   13ed8:	strbhi	r0, [r9, r1]
   13edc:	add	r1, r4, #3
   13ee0:	add	r4, r4, #4
   13ee4:	cmp	sl, r1
   13ee8:	movhi	r0, #63	; 0x3f
   13eec:	strbhi	r0, [r9, r1]
   13ef0:	b	130d4 <__assert_fail@plt+0x224c>
   13ef4:	mov	fp, r9
   13ef8:	b	131b4 <__assert_fail@plt+0x232c>
   13efc:	ldr	r3, [sp, #188]	; 0xbc
   13f00:	ldrb	r3, [r3]
   13f04:	cmp	r3, #0
   13f08:	beq	12844 <__assert_fail@plt+0x19bc>
   13f0c:	ldr	r2, [sp, #188]	; 0xbc
   13f10:	cmp	sl, r4
   13f14:	bls	13f34 <__assert_fail@plt+0x30ac>
   13f18:	strb	r3, [fp, r4]
   13f1c:	add	r4, r4, #1
   13f20:	ldrb	r3, [r2, #1]!
   13f24:	cmp	r3, #0
   13f28:	beq	12844 <__assert_fail@plt+0x19bc>
   13f2c:	cmp	sl, r4
   13f30:	bhi	13f18 <__assert_fail@plt+0x3090>
   13f34:	ldrb	r3, [r2, #1]!
   13f38:	add	r4, r4, #1
   13f3c:	cmp	r3, #0
   13f40:	bne	13f10 <__assert_fail@plt+0x3088>
   13f44:	b	12844 <__assert_fail@plt+0x19bc>
   13f48:	add	r9, sp, #100	; 0x64
   13f4c:	mov	r0, r5
   13f50:	ldr	r2, [sp, #60]	; 0x3c
   13f54:	mov	r6, #0
   13f58:	ldm	r9, {r9, sl, fp}
   13f5c:	ldr	r5, [sp, #112]	; 0x70
   13f60:	ldr	r4, [sp, #116]	; 0x74
   13f64:	b	13c14 <__assert_fail@plt+0x2d8c>
   13f68:	cmp	r4, r8
   13f6c:	add	r9, sp, #100	; 0x64
   13f70:	mov	r1, r4
   13f74:	mov	r2, fp
   13f78:	ldm	r9, {r9, sl, fp}
   13f7c:	mov	r3, r5
   13f80:	mov	r0, r5
   13f84:	ldr	r5, [sp, #112]	; 0x70
   13f88:	ldr	r4, [sp, #116]	; 0x74
   13f8c:	bcs	13fc0 <__assert_fail@plt+0x3138>
   13f90:	ldrb	r6, [r2]
   13f94:	cmp	r6, #0
   13f98:	bne	13fac <__assert_fail@plt+0x3124>
   13f9c:	b	140f8 <__assert_fail@plt+0x3270>
   13fa0:	ldrb	r6, [r2, #1]!
   13fa4:	cmp	r6, #0
   13fa8:	beq	14090 <__assert_fail@plt+0x3208>
   13fac:	add	r3, r3, #1
   13fb0:	add	r1, r7, r3
   13fb4:	cmp	r8, r1
   13fb8:	bhi	13fa0 <__assert_fail@plt+0x3118>
   13fbc:	mov	r0, r3
   13fc0:	mov	r6, #0
   13fc4:	ldr	r2, [sp, #60]	; 0x3c
   13fc8:	b	13c14 <__assert_fail@plt+0x2d8c>
   13fcc:	mov	r3, #1
   13fd0:	mov	r4, #0
   13fd4:	mov	r9, r4
   13fd8:	str	r3, [sp, #32]
   13fdc:	str	r3, [sp, #44]	; 0x2c
   13fe0:	str	r3, [sp, #48]	; 0x30
   13fe4:	str	r4, [sp, #52]	; 0x34
   13fe8:	str	r3, [sp, #56]	; 0x38
   13fec:	str	r3, [sp, #60]	; 0x3c
   13ff0:	str	r3, [sp, #88]	; 0x58
   13ff4:	movw	r3, #31680	; 0x7bc0
   13ff8:	movt	r3, #1
   13ffc:	str	r4, [sp, #64]	; 0x40
   14000:	str	r4, [sp, #68]	; 0x44
   14004:	str	r3, [sp, #72]	; 0x48
   14008:	str	r4, [sp, #80]	; 0x50
   1400c:	str	r4, [sp, #84]	; 0x54
   14010:	b	128ac <__assert_fail@plt+0x1a24>
   14014:	mov	fp, r9
   14018:	b	131c8 <__assert_fail@plt+0x2340>
   1401c:	ldr	r3, [sp, #48]	; 0x30
   14020:	b	13b3c <__assert_fail@plt+0x2cb4>
   14024:	mov	r2, r3
   14028:	ldr	r3, [sp, #72]	; 0x48
   1402c:	cmp	r3, #0
   14030:	moveq	r2, #0
   14034:	andne	r2, r2, #1
   14038:	cmp	r2, #0
   1403c:	beq	1406c <__assert_fail@plt+0x31e4>
   14040:	mov	r2, r3
   14044:	ldrb	r3, [r3]
   14048:	cmp	r3, #0
   1404c:	beq	1406c <__assert_fail@plt+0x31e4>
   14050:	cmp	sl, r4
   14054:	bls	1407c <__assert_fail@plt+0x31f4>
   14058:	strb	r3, [fp, r4]
   1405c:	add	r4, r4, #1
   14060:	ldrb	r3, [r2, #1]!
   14064:	cmp	r3, #0
   14068:	bne	14050 <__assert_fail@plt+0x31c8>
   1406c:	cmp	sl, r4
   14070:	movhi	r3, #0
   14074:	strbhi	r3, [fp, r4]
   14078:	b	13204 <__assert_fail@plt+0x237c>
   1407c:	ldrb	r3, [r2, #1]!
   14080:	add	r4, r4, #1
   14084:	cmp	r3, #0
   14088:	bne	14050 <__assert_fail@plt+0x31c8>
   1408c:	b	1406c <__assert_fail@plt+0x31e4>
   14090:	mov	r0, r3
   14094:	ldr	r2, [sp, #60]	; 0x3c
   14098:	b	13c14 <__assert_fail@plt+0x2d8c>
   1409c:	mov	ip, #5
   140a0:	mov	r3, r8
   140a4:	ldr	r1, [sp, #84]	; 0x54
   140a8:	str	ip, [sp]
   140ac:	ldr	r2, [sp, #180]	; 0xb4
   140b0:	ldr	ip, [sp, #188]	; 0xbc
   140b4:	ldr	r0, [sp, #184]	; 0xb8
   140b8:	str	r2, [sp, #4]
   140bc:	ldr	r2, [sp, #28]
   140c0:	str	ip, [sp, #12]
   140c4:	ldr	ip, [sp, #192]	; 0xc0
   140c8:	str	r0, [sp, #8]
   140cc:	mov	r0, fp
   140d0:	str	ip, [sp, #16]
   140d4:	bl	12788 <__assert_fail@plt+0x1900>
   140d8:	mov	r4, r0
   140dc:	b	13204 <__assert_fail@plt+0x237c>
   140e0:	mov	r6, r3
   140e4:	str	r3, [sp, #40]	; 0x28
   140e8:	b	13174 <__assert_fail@plt+0x22ec>
   140ec:	mov	r3, #2
   140f0:	str	r3, [sp, #176]	; 0xb0
   140f4:	b	131b4 <__assert_fail@plt+0x232c>
   140f8:	ldr	r2, [sp, #60]	; 0x3c
   140fc:	b	13c14 <__assert_fail@plt+0x2d8c>
   14100:	mov	r3, #5
   14104:	mov	fp, r9
   14108:	str	r3, [sp, #176]	; 0xb0
   1410c:	b	131c8 <__assert_fail@plt+0x2340>
   14110:	mov	r1, #1
   14114:	mov	r9, #0
   14118:	mov	r3, r9
   1411c:	mov	r2, r9
   14120:	str	r1, [sp, #32]
   14124:	str	sl, [sp, #84]	; 0x54
   14128:	b	12f50 <__assert_fail@plt+0x20c8>
   1412c:	mov	r3, #0
   14130:	mov	r2, #1
   14134:	mov	r9, r3
   14138:	mov	r4, r3
   1413c:	str	r2, [sp, #32]
   14140:	strd	r2, [sp, #44]	; 0x2c
   14144:	strd	r2, [sp, #56]	; 0x38
   14148:	str	r3, [sp, #80]	; 0x50
   1414c:	str	r3, [sp, #84]	; 0x54
   14150:	str	r3, [sp, #88]	; 0x58
   14154:	movw	r3, #31700	; 0x7bd4
   14158:	movt	r3, #1
   1415c:	str	r2, [sp, #52]	; 0x34
   14160:	str	r2, [sp, #64]	; 0x40
   14164:	str	r2, [sp, #68]	; 0x44
   14168:	str	r3, [sp, #72]	; 0x48
   1416c:	b	128ac <__assert_fail@plt+0x1a24>
   14170:	bl	10e70 <abort@plt>
   14174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14178:	mov	r4, r0
   1417c:	mov	r5, r3
   14180:	strd	r6, [sp, #8]
   14184:	movw	r7, #37104	; 0x90f0
   14188:	movt	r7, #2
   1418c:	strd	r8, [sp, #16]
   14190:	strd	sl, [sp, #24]
   14194:	mov	sl, r1
   14198:	mov	fp, r2
   1419c:	str	lr, [sp, #32]
   141a0:	sub	sp, sp, #60	; 0x3c
   141a4:	bl	10da4 <__errno_location@plt>
   141a8:	mov	r8, r0
   141ac:	cmn	r4, #-2147483647	; 0x80000001
   141b0:	ldr	r6, [r7]
   141b4:	movne	r0, #0
   141b8:	moveq	r0, #1
   141bc:	ldr	r3, [r8]
   141c0:	orrs	r0, r0, r4, lsr #31
   141c4:	str	r3, [sp, #28]
   141c8:	bne	14358 <__assert_fail@plt+0x34d0>
   141cc:	ldr	r3, [r7, #4]
   141d0:	cmp	r3, r4
   141d4:	bgt	14234 <__assert_fail@plt+0x33ac>
   141d8:	add	r1, r7, #8
   141dc:	sub	r2, r4, r3
   141e0:	str	r3, [sp, #52]	; 0x34
   141e4:	cmp	r6, r1
   141e8:	add	r2, r2, #1
   141ec:	beq	14330 <__assert_fail@plt+0x34a8>
   141f0:	mov	r1, #8
   141f4:	mov	r0, r6
   141f8:	mvn	r3, #-2147483648	; 0x80000000
   141fc:	str	r1, [sp]
   14200:	add	r1, sp, #52	; 0x34
   14204:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14208:	mov	r6, r0
   1420c:	str	r0, [r7]
   14210:	ldr	r0, [r7, #4]
   14214:	mov	r1, #0
   14218:	ldr	r2, [sp, #52]	; 0x34
   1421c:	sub	r2, r2, r0
   14220:	add	r0, r6, r0, lsl #3
   14224:	lsl	r2, r2, #3
   14228:	bl	10dbc <memset@plt>
   1422c:	ldr	r3, [sp, #52]	; 0x34
   14230:	str	r3, [r7, #4]
   14234:	ldr	r1, [r5, #4]
   14238:	add	r0, r6, r4, lsl #3
   1423c:	add	ip, r5, #8
   14240:	mov	r3, fp
   14244:	mov	r2, sl
   14248:	ldr	r7, [r0, #4]
   1424c:	str	r0, [sp, #36]	; 0x24
   14250:	str	ip, [sp, #40]	; 0x28
   14254:	orr	r0, r1, #1
   14258:	ldr	r9, [r6, r4, lsl #3]
   1425c:	str	ip, [sp, #8]
   14260:	ldr	lr, [r5, #44]	; 0x2c
   14264:	str	r0, [sp, #4]
   14268:	ldr	ip, [r5]
   1426c:	mov	r1, r9
   14270:	str	ip, [sp, #32]
   14274:	ldr	ip, [r5, #40]	; 0x28
   14278:	str	ip, [sp, #12]
   1427c:	ldr	ip, [sp, #32]
   14280:	str	lr, [sp, #16]
   14284:	str	r0, [sp, #44]	; 0x2c
   14288:	mov	r0, r7
   1428c:	str	ip, [sp]
   14290:	bl	12788 <__assert_fail@plt+0x1900>
   14294:	cmp	r9, r0
   14298:	bhi	14308 <__assert_fail@plt+0x3480>
   1429c:	add	r9, r0, #1
   142a0:	movw	r3, #37280	; 0x91a0
   142a4:	movt	r3, #2
   142a8:	cmp	r7, r3
   142ac:	str	r9, [r6, r4, lsl #3]
   142b0:	beq	142bc <__assert_fail@plt+0x3434>
   142b4:	mov	r0, r7
   142b8:	bl	12434 <__assert_fail@plt+0x15ac>
   142bc:	mov	r0, r9
   142c0:	bl	167f0 <__assert_fail@plt+0x5968>
   142c4:	ldr	ip, [r5]
   142c8:	mov	r3, fp
   142cc:	mov	r2, sl
   142d0:	mov	r1, r9
   142d4:	mov	r7, r0
   142d8:	ldr	lr, [sp, #36]	; 0x24
   142dc:	ldr	r4, [r5, #40]	; 0x28
   142e0:	str	r0, [lr, #4]
   142e4:	ldr	lr, [r5, #44]	; 0x2c
   142e8:	str	ip, [sp]
   142ec:	ldr	ip, [sp, #44]	; 0x2c
   142f0:	str	ip, [sp, #4]
   142f4:	ldr	ip, [sp, #40]	; 0x28
   142f8:	str	r4, [sp, #12]
   142fc:	str	lr, [sp, #16]
   14300:	str	ip, [sp, #8]
   14304:	bl	12788 <__assert_fail@plt+0x1900>
   14308:	ldr	r3, [sp, #28]
   1430c:	mov	r0, r7
   14310:	str	r3, [r8]
   14314:	add	sp, sp, #60	; 0x3c
   14318:	ldrd	r4, [sp]
   1431c:	ldrd	r6, [sp, #8]
   14320:	ldrd	r8, [sp, #16]
   14324:	ldrd	sl, [sp, #24]
   14328:	add	sp, sp, #32
   1432c:	pop	{pc}		; (ldr pc, [sp], #4)
   14330:	mov	r1, #8
   14334:	mvn	r3, #-2147483648	; 0x80000000
   14338:	str	r1, [sp]
   1433c:	add	r1, sp, #52	; 0x34
   14340:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14344:	ldrd	r2, [r7, #8]
   14348:	mov	r6, r0
   1434c:	str	r0, [r7]
   14350:	strd	r2, [r0]
   14354:	b	14210 <__assert_fail@plt+0x3388>
   14358:	bl	10e70 <abort@plt>
   1435c:	strd	r4, [sp, #-16]!
   14360:	mov	r5, r0
   14364:	str	r6, [sp, #8]
   14368:	str	lr, [sp, #12]
   1436c:	bl	10da4 <__errno_location@plt>
   14370:	mov	r4, r0
   14374:	cmp	r5, #0
   14378:	ldr	r0, [pc, #32]	; 143a0 <__assert_fail@plt+0x3518>
   1437c:	mov	r1, #48	; 0x30
   14380:	movne	r0, r5
   14384:	ldr	r6, [r4]
   14388:	bl	16c34 <__assert_fail@plt+0x5dac>
   1438c:	str	r6, [r4]
   14390:	ldrd	r4, [sp]
   14394:	ldr	r6, [sp, #8]
   14398:	add	sp, sp, #12
   1439c:	pop	{pc}		; (ldr pc, [sp], #4)
   143a0:	andeq	r9, r2, r0, lsr #5
   143a4:	ldr	r3, [pc, #12]	; 143b8 <__assert_fail@plt+0x3530>
   143a8:	cmp	r0, #0
   143ac:	moveq	r0, r3
   143b0:	ldr	r0, [r0]
   143b4:	bx	lr
   143b8:	andeq	r9, r2, r0, lsr #5
   143bc:	ldr	r3, [pc, #12]	; 143d0 <__assert_fail@plt+0x3548>
   143c0:	cmp	r0, #0
   143c4:	moveq	r0, r3
   143c8:	str	r1, [r0]
   143cc:	bx	lr
   143d0:	andeq	r9, r2, r0, lsr #5
   143d4:	ldr	r3, [pc, #52]	; 14410 <__assert_fail@plt+0x3588>
   143d8:	cmp	r0, #0
   143dc:	push	{lr}		; (str lr, [sp, #-4]!)
   143e0:	lsr	lr, r1, #5
   143e4:	and	r1, r1, #31
   143e8:	moveq	r0, r3
   143ec:	add	r3, r0, #8
   143f0:	ldr	ip, [r3, lr, lsl #2]
   143f4:	lsr	r0, ip, r1
   143f8:	eor	r2, r2, r0
   143fc:	and	r0, r0, #1
   14400:	and	r2, r2, #1
   14404:	eor	r1, ip, r2, lsl r1
   14408:	str	r1, [r3, lr, lsl #2]
   1440c:	pop	{pc}		; (ldr pc, [sp], #4)
   14410:	andeq	r9, r2, r0, lsr #5
   14414:	ldr	r3, [pc, #16]	; 1442c <__assert_fail@plt+0x35a4>
   14418:	cmp	r0, #0
   1441c:	movne	r3, r0
   14420:	ldr	r0, [r3, #4]
   14424:	str	r1, [r3, #4]
   14428:	bx	lr
   1442c:	andeq	r9, r2, r0, lsr #5
   14430:	ldr	r3, [pc, #48]	; 14468 <__assert_fail@plt+0x35e0>
   14434:	cmp	r0, #0
   14438:	mov	ip, #10
   1443c:	moveq	r0, r3
   14440:	cmp	r2, #0
   14444:	cmpne	r1, #0
   14448:	str	ip, [r0]
   1444c:	beq	1445c <__assert_fail@plt+0x35d4>
   14450:	str	r1, [r0, #40]	; 0x28
   14454:	str	r2, [r0, #44]	; 0x2c
   14458:	bx	lr
   1445c:	str	r4, [sp, #-8]!
   14460:	str	lr, [sp, #4]
   14464:	bl	10e70 <abort@plt>
   14468:	andeq	r9, r2, r0, lsr #5
   1446c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14470:	strd	r6, [sp, #8]
   14474:	mov	r7, r0
   14478:	mov	r6, r1
   1447c:	strd	r8, [sp, #16]
   14480:	mov	r8, r2
   14484:	mov	r9, r3
   14488:	str	lr, [sp, #24]
   1448c:	sub	sp, sp, #28
   14490:	ldr	r4, [sp, #56]	; 0x38
   14494:	ldr	ip, [pc, #104]	; 14504 <__assert_fail@plt+0x367c>
   14498:	cmp	r4, #0
   1449c:	moveq	r4, ip
   144a0:	bl	10da4 <__errno_location@plt>
   144a4:	ldr	ip, [r4, #44]	; 0x2c
   144a8:	mov	r5, r0
   144ac:	mov	r1, r6
   144b0:	add	lr, r4, #8
   144b4:	mov	r3, r9
   144b8:	ldr	r6, [r5]
   144bc:	mov	r2, r8
   144c0:	mov	r0, r7
   144c4:	str	ip, [sp, #16]
   144c8:	ldr	ip, [r4, #40]	; 0x28
   144cc:	str	lr, [sp, #8]
   144d0:	str	ip, [sp, #12]
   144d4:	ldr	ip, [r4, #4]
   144d8:	str	ip, [sp, #4]
   144dc:	ldr	ip, [r4]
   144e0:	str	ip, [sp]
   144e4:	bl	12788 <__assert_fail@plt+0x1900>
   144e8:	str	r6, [r5]
   144ec:	add	sp, sp, #28
   144f0:	ldrd	r4, [sp]
   144f4:	ldrd	r6, [sp, #8]
   144f8:	ldrd	r8, [sp, #16]
   144fc:	add	sp, sp, #24
   14500:	pop	{pc}		; (ldr pc, [sp], #4)
   14504:	andeq	r9, r2, r0, lsr #5
   14508:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1450c:	cmp	r2, #0
   14510:	ldr	r4, [pc, #192]	; 145d8 <__assert_fail@plt+0x3750>
   14514:	movne	r4, r2
   14518:	strd	r6, [sp, #8]
   1451c:	strd	r8, [sp, #16]
   14520:	mov	r9, r1
   14524:	mov	r8, r0
   14528:	strd	sl, [sp, #24]
   1452c:	str	lr, [sp, #32]
   14530:	sub	sp, sp, #36	; 0x24
   14534:	bl	10da4 <__errno_location@plt>
   14538:	ldr	r5, [r4, #4]
   1453c:	mov	r6, r0
   14540:	add	r7, r4, #8
   14544:	mov	r1, #0
   14548:	mov	r3, r9
   1454c:	ldr	ip, [r4, #44]	; 0x2c
   14550:	mov	r2, r8
   14554:	mov	r0, r1
   14558:	ldr	sl, [r6]
   1455c:	orr	r5, r5, #1
   14560:	str	ip, [sp, #16]
   14564:	ldr	ip, [r4, #40]	; 0x28
   14568:	stmib	sp, {r5, r7, ip}
   1456c:	ldr	ip, [r4]
   14570:	str	ip, [sp]
   14574:	bl	12788 <__assert_fail@plt+0x1900>
   14578:	add	r1, r0, #1
   1457c:	mov	r0, r1
   14580:	str	r1, [sp, #28]
   14584:	bl	167f0 <__assert_fail@plt+0x5968>
   14588:	ldr	ip, [r4, #44]	; 0x2c
   1458c:	mov	fp, r0
   14590:	mov	r3, r9
   14594:	mov	r2, r8
   14598:	ldr	r1, [sp, #28]
   1459c:	str	ip, [sp, #16]
   145a0:	ldr	ip, [r4, #40]	; 0x28
   145a4:	stmib	sp, {r5, r7, ip}
   145a8:	ldr	ip, [r4]
   145ac:	str	ip, [sp]
   145b0:	bl	12788 <__assert_fail@plt+0x1900>
   145b4:	mov	r0, fp
   145b8:	str	sl, [r6]
   145bc:	add	sp, sp, #36	; 0x24
   145c0:	ldrd	r4, [sp]
   145c4:	ldrd	r6, [sp, #8]
   145c8:	ldrd	r8, [sp, #16]
   145cc:	ldrd	sl, [sp, #24]
   145d0:	add	sp, sp, #32
   145d4:	pop	{pc}		; (ldr pc, [sp], #4)
   145d8:	andeq	r9, r2, r0, lsr #5
   145dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   145e0:	cmp	r3, #0
   145e4:	ldr	r4, [pc, #220]	; 146c8 <__assert_fail@plt+0x3840>
   145e8:	movne	r4, r3
   145ec:	strd	r6, [sp, #8]
   145f0:	mov	r6, r2
   145f4:	strd	r8, [sp, #16]
   145f8:	mov	r9, r0
   145fc:	strd	sl, [sp, #24]
   14600:	mov	sl, r1
   14604:	str	lr, [sp, #32]
   14608:	sub	sp, sp, #44	; 0x2c
   1460c:	bl	10da4 <__errno_location@plt>
   14610:	ldr	r5, [r4, #4]
   14614:	mov	r7, r0
   14618:	mov	r1, #0
   1461c:	add	r8, r4, #8
   14620:	mov	r3, sl
   14624:	ldr	ip, [r4, #44]	; 0x2c
   14628:	mov	r2, r9
   1462c:	mov	r0, r1
   14630:	ldr	lr, [r7]
   14634:	cmp	r6, r1
   14638:	orreq	r5, r5, #1
   1463c:	str	ip, [sp, #16]
   14640:	ldr	ip, [r4, #40]	; 0x28
   14644:	stmib	sp, {r5, r8, ip}
   14648:	ldr	ip, [r4]
   1464c:	str	lr, [sp, #28]
   14650:	str	ip, [sp]
   14654:	bl	12788 <__assert_fail@plt+0x1900>
   14658:	add	r1, r0, #1
   1465c:	mov	fp, r0
   14660:	mov	r0, r1
   14664:	str	r1, [sp, #36]	; 0x24
   14668:	bl	167f0 <__assert_fail@plt+0x5968>
   1466c:	ldr	ip, [r4, #44]	; 0x2c
   14670:	mov	r3, sl
   14674:	mov	r2, r9
   14678:	ldr	r1, [sp, #36]	; 0x24
   1467c:	str	ip, [sp, #16]
   14680:	ldr	ip, [r4, #40]	; 0x28
   14684:	str	r0, [sp, #32]
   14688:	stmib	sp, {r5, r8, ip}
   1468c:	ldr	ip, [r4]
   14690:	str	ip, [sp]
   14694:	bl	12788 <__assert_fail@plt+0x1900>
   14698:	ldr	lr, [sp, #28]
   1469c:	cmp	r6, #0
   146a0:	ldr	r0, [sp, #32]
   146a4:	str	lr, [r7]
   146a8:	strne	fp, [r6]
   146ac:	add	sp, sp, #44	; 0x2c
   146b0:	ldrd	r4, [sp]
   146b4:	ldrd	r6, [sp, #8]
   146b8:	ldrd	r8, [sp, #16]
   146bc:	ldrd	sl, [sp, #24]
   146c0:	add	sp, sp, #32
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	andeq	r9, r2, r0, lsr #5
   146cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   146d0:	movw	r5, #37104	; 0x90f0
   146d4:	movt	r5, #2
   146d8:	ldr	r3, [r5, #4]
   146dc:	strd	r6, [sp, #8]
   146e0:	str	r8, [sp, #16]
   146e4:	str	lr, [sp, #20]
   146e8:	ldr	r7, [r5]
   146ec:	cmp	r3, #1
   146f0:	ble	14714 <__assert_fail@plt+0x388c>
   146f4:	mov	r4, #1
   146f8:	add	r6, r7, #4
   146fc:	ldr	r0, [r6, r4, lsl #3]
   14700:	add	r4, r4, #1
   14704:	bl	12434 <__assert_fail@plt+0x15ac>
   14708:	ldr	r3, [r5, #4]
   1470c:	cmp	r3, r4
   14710:	bgt	146fc <__assert_fail@plt+0x3874>
   14714:	ldr	r0, [r7, #4]
   14718:	movw	r4, #37280	; 0x91a0
   1471c:	movt	r4, #2
   14720:	cmp	r0, r4
   14724:	beq	14738 <__assert_fail@plt+0x38b0>
   14728:	bl	12434 <__assert_fail@plt+0x15ac>
   1472c:	mov	r3, #256	; 0x100
   14730:	str	r3, [r5, #8]
   14734:	str	r4, [r5, #12]
   14738:	ldr	r4, [pc, #44]	; 1476c <__assert_fail@plt+0x38e4>
   1473c:	cmp	r7, r4
   14740:	beq	14750 <__assert_fail@plt+0x38c8>
   14744:	mov	r0, r7
   14748:	bl	12434 <__assert_fail@plt+0x15ac>
   1474c:	str	r4, [r5]
   14750:	mov	r3, #1
   14754:	ldrd	r6, [sp, #8]
   14758:	str	r3, [r5, #4]
   1475c:	ldrd	r4, [sp]
   14760:	ldr	r8, [sp, #16]
   14764:	add	sp, sp, #20
   14768:	pop	{pc}		; (ldr pc, [sp], #4)
   1476c:	strdeq	r9, [r2], -r8
   14770:	ldr	r3, [pc, #4]	; 1477c <__assert_fail@plt+0x38f4>
   14774:	mvn	r2, #0
   14778:	b	14174 <__assert_fail@plt+0x32ec>
   1477c:	andeq	r9, r2, r0, lsr #5
   14780:	ldr	r3, [pc]	; 14788 <__assert_fail@plt+0x3900>
   14784:	b	14174 <__assert_fail@plt+0x32ec>
   14788:	andeq	r9, r2, r0, lsr #5
   1478c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14790:	movw	r4, #37104	; 0x90f0
   14794:	movt	r4, #2
   14798:	strd	r6, [sp, #8]
   1479c:	strd	r8, [sp, #16]
   147a0:	strd	sl, [sp, #24]
   147a4:	mov	sl, r0
   147a8:	str	lr, [sp, #32]
   147ac:	sub	sp, sp, #44	; 0x2c
   147b0:	bl	10da4 <__errno_location@plt>
   147b4:	ldr	r3, [r0]
   147b8:	mov	r8, r0
   147bc:	ldr	r2, [r4, #4]
   147c0:	ldr	r5, [r4]
   147c4:	str	r3, [sp, #28]
   147c8:	cmp	r2, #0
   147cc:	bgt	14828 <__assert_fail@plt+0x39a0>
   147d0:	add	r3, r4, #8
   147d4:	str	r2, [sp, #36]	; 0x24
   147d8:	rsb	r2, r2, #1
   147dc:	cmp	r5, r3
   147e0:	beq	148f4 <__assert_fail@plt+0x3a6c>
   147e4:	mov	r1, #8
   147e8:	mov	r0, r5
   147ec:	mvn	r3, #-2147483648	; 0x80000000
   147f0:	str	r1, [sp]
   147f4:	add	r1, sp, #36	; 0x24
   147f8:	bl	16a94 <__assert_fail@plt+0x5c0c>
   147fc:	mov	r5, r0
   14800:	str	r0, [r4]
   14804:	ldr	r0, [r4, #4]
   14808:	mov	r1, #0
   1480c:	ldr	r2, [sp, #36]	; 0x24
   14810:	sub	r2, r2, r0
   14814:	add	r0, r5, r0, lsl #3
   14818:	lsl	r2, r2, #3
   1481c:	bl	10dbc <memset@plt>
   14820:	ldr	r3, [sp, #36]	; 0x24
   14824:	str	r3, [r4, #4]
   14828:	movw	r4, #37280	; 0x91a0
   1482c:	movt	r4, #2
   14830:	ldr	r9, [r5]
   14834:	add	fp, r4, #264	; 0x108
   14838:	mvn	r3, #0
   1483c:	ldr	r7, [r4, #260]	; 0x104
   14840:	mov	r2, sl
   14844:	ldr	r6, [r5, #4]
   14848:	str	fp, [sp, #8]
   1484c:	mov	r1, r9
   14850:	ldr	ip, [r4, #256]	; 0x100
   14854:	orr	r7, r7, #1
   14858:	ldr	lr, [r4, #300]	; 0x12c
   1485c:	mov	r0, r6
   14860:	str	ip, [sp]
   14864:	str	r7, [sp, #4]
   14868:	str	lr, [sp, #16]
   1486c:	ldr	ip, [r4, #296]	; 0x128
   14870:	str	ip, [sp, #12]
   14874:	bl	12788 <__assert_fail@plt+0x1900>
   14878:	cmp	r9, r0
   1487c:	bhi	148cc <__assert_fail@plt+0x3a44>
   14880:	add	r9, r0, #1
   14884:	cmp	r6, r4
   14888:	str	r9, [r5]
   1488c:	beq	14898 <__assert_fail@plt+0x3a10>
   14890:	mov	r0, r6
   14894:	bl	12434 <__assert_fail@plt+0x15ac>
   14898:	mov	r0, r9
   1489c:	bl	167f0 <__assert_fail@plt+0x5968>
   148a0:	ldr	r3, [r4, #256]	; 0x100
   148a4:	mov	r2, sl
   148a8:	mov	r1, r9
   148ac:	mov	r6, r0
   148b0:	ldr	lr, [r4, #296]	; 0x128
   148b4:	ldr	ip, [r4, #300]	; 0x12c
   148b8:	str	r0, [r5, #4]
   148bc:	stm	sp, {r3, r7, fp, lr}
   148c0:	mvn	r3, #0
   148c4:	str	ip, [sp, #16]
   148c8:	bl	12788 <__assert_fail@plt+0x1900>
   148cc:	ldr	r3, [sp, #28]
   148d0:	mov	r0, r6
   148d4:	str	r3, [r8]
   148d8:	add	sp, sp, #44	; 0x2c
   148dc:	ldrd	r4, [sp]
   148e0:	ldrd	r6, [sp, #8]
   148e4:	ldrd	r8, [sp, #16]
   148e8:	ldrd	sl, [sp, #24]
   148ec:	add	sp, sp, #32
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	mov	r0, #8
   148f8:	mvn	r3, #-2147483648	; 0x80000000
   148fc:	add	r1, sp, #36	; 0x24
   14900:	str	r0, [sp]
   14904:	mov	r0, #0
   14908:	bl	16a94 <__assert_fail@plt+0x5c0c>
   1490c:	ldrd	r2, [r4, #8]
   14910:	mov	r5, r0
   14914:	str	r0, [r4]
   14918:	strd	r2, [r0]
   1491c:	b	14804 <__assert_fail@plt+0x397c>
   14920:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14924:	movw	r4, #37104	; 0x90f0
   14928:	movt	r4, #2
   1492c:	strd	r6, [sp, #8]
   14930:	strd	r8, [sp, #16]
   14934:	strd	sl, [sp, #24]
   14938:	mov	sl, r0
   1493c:	mov	fp, r1
   14940:	str	lr, [sp, #32]
   14944:	sub	sp, sp, #44	; 0x2c
   14948:	bl	10da4 <__errno_location@plt>
   1494c:	ldr	r3, [r0]
   14950:	mov	r8, r0
   14954:	ldr	r2, [r4, #4]
   14958:	ldr	r5, [r4]
   1495c:	str	r3, [sp, #28]
   14960:	cmp	r2, #0
   14964:	bgt	149c0 <__assert_fail@plt+0x3b38>
   14968:	add	r3, r4, #8
   1496c:	str	r2, [sp, #36]	; 0x24
   14970:	rsb	r2, r2, #1
   14974:	cmp	r5, r3
   14978:	beq	14a9c <__assert_fail@plt+0x3c14>
   1497c:	mov	r1, #8
   14980:	mov	r0, r5
   14984:	mvn	r3, #-2147483648	; 0x80000000
   14988:	str	r1, [sp]
   1498c:	add	r1, sp, #36	; 0x24
   14990:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14994:	mov	r5, r0
   14998:	str	r0, [r4]
   1499c:	ldr	r0, [r4, #4]
   149a0:	mov	r1, #0
   149a4:	ldr	r2, [sp, #36]	; 0x24
   149a8:	sub	r2, r2, r0
   149ac:	add	r0, r5, r0, lsl #3
   149b0:	lsl	r2, r2, #3
   149b4:	bl	10dbc <memset@plt>
   149b8:	ldr	r3, [sp, #36]	; 0x24
   149bc:	str	r3, [r4, #4]
   149c0:	movw	r4, #37280	; 0x91a0
   149c4:	movt	r4, #2
   149c8:	ldr	r9, [r5]
   149cc:	add	r0, r4, #264	; 0x108
   149d0:	mov	r3, fp
   149d4:	ldr	r7, [r4, #260]	; 0x104
   149d8:	mov	r2, sl
   149dc:	ldr	r6, [r5, #4]
   149e0:	str	r0, [sp, #8]
   149e4:	mov	r1, r9
   149e8:	ldr	ip, [r4, #256]	; 0x100
   149ec:	orr	r7, r7, #1
   149f0:	ldr	lr, [r4, #300]	; 0x12c
   149f4:	mov	r0, r6
   149f8:	str	ip, [sp]
   149fc:	str	r7, [sp, #4]
   14a00:	str	lr, [sp, #16]
   14a04:	ldr	ip, [r4, #296]	; 0x128
   14a08:	str	ip, [sp, #12]
   14a0c:	bl	12788 <__assert_fail@plt+0x1900>
   14a10:	cmp	r9, r0
   14a14:	bhi	14a74 <__assert_fail@plt+0x3bec>
   14a18:	add	r9, r0, #1
   14a1c:	cmp	r6, r4
   14a20:	str	r9, [r5]
   14a24:	beq	14a30 <__assert_fail@plt+0x3ba8>
   14a28:	mov	r0, r6
   14a2c:	bl	12434 <__assert_fail@plt+0x15ac>
   14a30:	mov	r0, r9
   14a34:	bl	167f0 <__assert_fail@plt+0x5968>
   14a38:	ldr	ip, [r4, #256]	; 0x100
   14a3c:	mov	r1, r9
   14a40:	mov	r3, fp
   14a44:	mov	r2, sl
   14a48:	mov	r6, r0
   14a4c:	ldr	r9, [r4, #296]	; 0x128
   14a50:	ldr	lr, [r4, #300]	; 0x12c
   14a54:	str	r0, [r5, #4]
   14a58:	str	ip, [sp]
   14a5c:	ldr	ip, [pc, #100]	; 14ac8 <__assert_fail@plt+0x3c40>
   14a60:	str	r7, [sp, #4]
   14a64:	str	ip, [sp, #8]
   14a68:	str	r9, [sp, #12]
   14a6c:	str	lr, [sp, #16]
   14a70:	bl	12788 <__assert_fail@plt+0x1900>
   14a74:	ldr	r3, [sp, #28]
   14a78:	mov	r0, r6
   14a7c:	str	r3, [r8]
   14a80:	add	sp, sp, #44	; 0x2c
   14a84:	ldrd	r4, [sp]
   14a88:	ldrd	r6, [sp, #8]
   14a8c:	ldrd	r8, [sp, #16]
   14a90:	ldrd	sl, [sp, #24]
   14a94:	add	sp, sp, #32
   14a98:	pop	{pc}		; (ldr pc, [sp], #4)
   14a9c:	mov	r0, #8
   14aa0:	mvn	r3, #-2147483648	; 0x80000000
   14aa4:	add	r1, sp, #36	; 0x24
   14aa8:	str	r0, [sp]
   14aac:	mov	r0, #0
   14ab0:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14ab4:	ldrd	r2, [r4, #8]
   14ab8:	mov	r5, r0
   14abc:	str	r0, [r4]
   14ac0:	strd	r2, [r0]
   14ac4:	b	1499c <__assert_fail@plt+0x3b14>
   14ac8:	andeq	r9, r2, r8, lsr #5
   14acc:	strd	r4, [sp, #-20]!	; 0xffffffec
   14ad0:	mov	r4, #0
   14ad4:	mov	r5, #0
   14ad8:	strd	r6, [sp, #8]
   14adc:	cmp	r1, #10
   14ae0:	str	lr, [sp, #16]
   14ae4:	sub	sp, sp, #100	; 0x64
   14ae8:	strd	r4, [sp, #48]	; 0x30
   14aec:	beq	14b34 <__assert_fail@plt+0x3cac>
   14af0:	mov	r3, sp
   14af4:	strd	r4, [sp, #8]
   14af8:	str	r1, [sp, #48]	; 0x30
   14afc:	mov	r1, r2
   14b00:	mvn	r2, #0
   14b04:	ldrd	r6, [sp, #48]	; 0x30
   14b08:	strd	r6, [sp]
   14b0c:	strd	r4, [sp, #16]
   14b10:	strd	r4, [sp, #24]
   14b14:	strd	r4, [sp, #32]
   14b18:	strd	r4, [sp, #40]	; 0x28
   14b1c:	bl	14174 <__assert_fail@plt+0x32ec>
   14b20:	add	sp, sp, #100	; 0x64
   14b24:	ldrd	r4, [sp]
   14b28:	ldrd	r6, [sp, #8]
   14b2c:	add	sp, sp, #16
   14b30:	pop	{pc}		; (ldr pc, [sp], #4)
   14b34:	bl	10e70 <abort@plt>
   14b38:	strd	r4, [sp, #-20]!	; 0xffffffec
   14b3c:	mov	r4, #0
   14b40:	mov	r5, #0
   14b44:	strd	r6, [sp, #8]
   14b48:	cmp	r1, #10
   14b4c:	str	lr, [sp, #16]
   14b50:	sub	sp, sp, #100	; 0x64
   14b54:	strd	r4, [sp, #48]	; 0x30
   14b58:	beq	14ba4 <__assert_fail@plt+0x3d1c>
   14b5c:	mov	ip, r2
   14b60:	mov	r2, r3
   14b64:	strd	r4, [sp, #8]
   14b68:	str	r1, [sp, #48]	; 0x30
   14b6c:	mov	r3, sp
   14b70:	mov	r1, ip
   14b74:	ldrd	r6, [sp, #48]	; 0x30
   14b78:	strd	r6, [sp]
   14b7c:	strd	r4, [sp, #16]
   14b80:	strd	r4, [sp, #24]
   14b84:	strd	r4, [sp, #32]
   14b88:	strd	r4, [sp, #40]	; 0x28
   14b8c:	bl	14174 <__assert_fail@plt+0x32ec>
   14b90:	add	sp, sp, #100	; 0x64
   14b94:	ldrd	r4, [sp]
   14b98:	ldrd	r6, [sp, #8]
   14b9c:	add	sp, sp, #16
   14ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba4:	bl	10e70 <abort@plt>
   14ba8:	mov	r2, #0
   14bac:	mov	r3, #0
   14bb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bb4:	strd	r6, [sp, #8]
   14bb8:	cmp	r0, #10
   14bbc:	strd	r8, [sp, #16]
   14bc0:	strd	sl, [sp, #24]
   14bc4:	str	lr, [sp, #32]
   14bc8:	sub	sp, sp, #124	; 0x7c
   14bcc:	strd	r2, [sp, #72]	; 0x48
   14bd0:	strd	r2, [sp, #80]	; 0x50
   14bd4:	strd	r2, [sp, #88]	; 0x58
   14bd8:	strd	r2, [sp, #96]	; 0x60
   14bdc:	strd	r2, [sp, #104]	; 0x68
   14be0:	strd	r2, [sp, #112]	; 0x70
   14be4:	beq	14d88 <__assert_fail@plt+0x3f00>
   14be8:	mov	r6, r1
   14bec:	movw	r4, #37104	; 0x90f0
   14bf0:	movt	r4, #2
   14bf4:	str	r0, [sp, #72]	; 0x48
   14bf8:	ldrd	r0, [sp, #72]	; 0x48
   14bfc:	strd	r0, [sp, #24]
   14c00:	strd	r2, [sp, #32]
   14c04:	strd	r2, [sp, #40]	; 0x28
   14c08:	strd	r2, [sp, #48]	; 0x30
   14c0c:	strd	r2, [sp, #56]	; 0x38
   14c10:	strd	r2, [sp, #64]	; 0x40
   14c14:	bl	10da4 <__errno_location@plt>
   14c18:	mov	r8, r0
   14c1c:	ldr	r5, [r4]
   14c20:	ldr	r2, [r4, #4]
   14c24:	ldr	r9, [r0]
   14c28:	cmp	r2, #0
   14c2c:	bgt	14c88 <__assert_fail@plt+0x3e00>
   14c30:	add	r3, r4, #8
   14c34:	str	r2, [sp, #72]	; 0x48
   14c38:	rsb	r2, r2, #1
   14c3c:	cmp	r5, r3
   14c40:	beq	14d5c <__assert_fail@plt+0x3ed4>
   14c44:	mov	r3, #8
   14c48:	mov	r0, r5
   14c4c:	add	r1, sp, #72	; 0x48
   14c50:	str	r3, [sp]
   14c54:	mvn	r3, #-2147483648	; 0x80000000
   14c58:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14c5c:	mov	r5, r0
   14c60:	str	r0, [r4]
   14c64:	ldr	r0, [r4, #4]
   14c68:	mov	r1, #0
   14c6c:	ldr	r2, [sp, #72]	; 0x48
   14c70:	sub	r2, r2, r0
   14c74:	add	r0, r5, r0, lsl #3
   14c78:	lsl	r2, r2, #3
   14c7c:	bl	10dbc <memset@plt>
   14c80:	ldr	r3, [sp, #72]	; 0x48
   14c84:	str	r3, [r4, #4]
   14c88:	ldr	sl, [r5]
   14c8c:	add	r0, sp, #32
   14c90:	mvn	r3, #0
   14c94:	mov	r2, r6
   14c98:	ldr	r7, [sp, #28]
   14c9c:	ldr	r4, [r5, #4]
   14ca0:	mov	r1, sl
   14ca4:	str	r0, [sp, #8]
   14ca8:	ldr	lr, [sp, #24]
   14cac:	orr	r7, r7, #1
   14cb0:	ldr	ip, [sp, #64]	; 0x40
   14cb4:	mov	r0, r4
   14cb8:	ldr	fp, [sp, #68]	; 0x44
   14cbc:	str	lr, [sp]
   14cc0:	str	r7, [sp, #4]
   14cc4:	str	ip, [sp, #12]
   14cc8:	str	fp, [sp, #16]
   14ccc:	bl	12788 <__assert_fail@plt+0x1900>
   14cd0:	cmp	sl, r0
   14cd4:	bhi	14d38 <__assert_fail@plt+0x3eb0>
   14cd8:	add	sl, r0, #1
   14cdc:	movw	r3, #37280	; 0x91a0
   14ce0:	movt	r3, #2
   14ce4:	cmp	r4, r3
   14ce8:	str	sl, [r5]
   14cec:	beq	14cf8 <__assert_fail@plt+0x3e70>
   14cf0:	mov	r0, r4
   14cf4:	bl	12434 <__assert_fail@plt+0x15ac>
   14cf8:	mov	r0, sl
   14cfc:	bl	167f0 <__assert_fail@plt+0x5968>
   14d00:	ldr	r3, [sp, #24]
   14d04:	mov	r2, r6
   14d08:	mov	r1, sl
   14d0c:	mov	r4, r0
   14d10:	ldr	lr, [sp, #64]	; 0x40
   14d14:	ldr	ip, [sp, #68]	; 0x44
   14d18:	str	r0, [r5, #4]
   14d1c:	add	r5, sp, #32
   14d20:	stm	sp, {r3, r7}
   14d24:	mvn	r3, #0
   14d28:	str	r5, [sp, #8]
   14d2c:	str	lr, [sp, #12]
   14d30:	str	ip, [sp, #16]
   14d34:	bl	12788 <__assert_fail@plt+0x1900>
   14d38:	mov	r0, r4
   14d3c:	str	r9, [r8]
   14d40:	add	sp, sp, #124	; 0x7c
   14d44:	ldrd	r4, [sp]
   14d48:	ldrd	r6, [sp, #8]
   14d4c:	ldrd	r8, [sp, #16]
   14d50:	ldrd	sl, [sp, #24]
   14d54:	add	sp, sp, #32
   14d58:	pop	{pc}		; (ldr pc, [sp], #4)
   14d5c:	mov	r0, #8
   14d60:	mvn	r3, #-2147483648	; 0x80000000
   14d64:	add	r1, sp, #72	; 0x48
   14d68:	str	r0, [sp]
   14d6c:	mov	r0, #0
   14d70:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14d74:	ldrd	r2, [r4, #8]
   14d78:	mov	r5, r0
   14d7c:	str	r0, [r4]
   14d80:	strd	r2, [r0]
   14d84:	b	14c64 <__assert_fail@plt+0x3ddc>
   14d88:	bl	10e70 <abort@plt>
   14d8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d90:	cmp	r0, #10
   14d94:	strd	r6, [sp, #8]
   14d98:	mov	r6, #0
   14d9c:	mov	r7, #0
   14da0:	strd	r8, [sp, #16]
   14da4:	strd	sl, [sp, #24]
   14da8:	str	lr, [sp, #32]
   14dac:	sub	sp, sp, #124	; 0x7c
   14db0:	strd	r6, [sp, #72]	; 0x48
   14db4:	strd	r6, [sp, #80]	; 0x50
   14db8:	strd	r6, [sp, #88]	; 0x58
   14dbc:	strd	r6, [sp, #96]	; 0x60
   14dc0:	strd	r6, [sp, #104]	; 0x68
   14dc4:	strd	r6, [sp, #112]	; 0x70
   14dc8:	beq	14f74 <__assert_fail@plt+0x40ec>
   14dcc:	mov	sl, r2
   14dd0:	movw	r5, #37104	; 0x90f0
   14dd4:	movt	r5, #2
   14dd8:	str	r0, [sp, #72]	; 0x48
   14ddc:	mov	r9, r1
   14de0:	ldrd	r2, [sp, #72]	; 0x48
   14de4:	strd	r2, [sp, #24]
   14de8:	strd	r6, [sp, #32]
   14dec:	strd	r6, [sp, #40]	; 0x28
   14df0:	strd	r6, [sp, #48]	; 0x30
   14df4:	strd	r6, [sp, #56]	; 0x38
   14df8:	strd	r6, [sp, #64]	; 0x40
   14dfc:	bl	10da4 <__errno_location@plt>
   14e00:	mov	r7, r0
   14e04:	ldr	r4, [r5]
   14e08:	ldr	r2, [r5, #4]
   14e0c:	ldr	fp, [r0]
   14e10:	cmp	r2, #0
   14e14:	bgt	14e70 <__assert_fail@plt+0x3fe8>
   14e18:	add	r3, r5, #8
   14e1c:	str	r2, [sp, #72]	; 0x48
   14e20:	rsb	r2, r2, #1
   14e24:	cmp	r4, r3
   14e28:	beq	14f48 <__assert_fail@plt+0x40c0>
   14e2c:	mov	r3, #8
   14e30:	mov	r0, r4
   14e34:	add	r1, sp, #72	; 0x48
   14e38:	str	r3, [sp]
   14e3c:	mvn	r3, #-2147483648	; 0x80000000
   14e40:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14e44:	mov	r4, r0
   14e48:	str	r0, [r5]
   14e4c:	ldr	r0, [r5, #4]
   14e50:	mov	r1, #0
   14e54:	ldr	r2, [sp, #72]	; 0x48
   14e58:	sub	r2, r2, r0
   14e5c:	add	r0, r4, r0, lsl #3
   14e60:	lsl	r2, r2, #3
   14e64:	bl	10dbc <memset@plt>
   14e68:	ldr	r3, [sp, #72]	; 0x48
   14e6c:	str	r3, [r5, #4]
   14e70:	ldr	ip, [sp, #24]
   14e74:	add	r0, sp, #32
   14e78:	mov	r3, sl
   14e7c:	mov	r2, r9
   14e80:	ldr	r6, [sp, #28]
   14e84:	ldr	r8, [r4]
   14e88:	ldr	r5, [r4, #4]
   14e8c:	str	ip, [sp]
   14e90:	orr	r6, r6, #1
   14e94:	ldr	ip, [sp, #64]	; 0x40
   14e98:	mov	r1, r8
   14e9c:	str	r6, [sp, #4]
   14ea0:	ldr	lr, [sp, #68]	; 0x44
   14ea4:	str	r0, [sp, #8]
   14ea8:	mov	r0, r5
   14eac:	str	ip, [sp, #12]
   14eb0:	str	lr, [sp, #16]
   14eb4:	bl	12788 <__assert_fail@plt+0x1900>
   14eb8:	cmp	r8, r0
   14ebc:	bhi	14f24 <__assert_fail@plt+0x409c>
   14ec0:	add	r8, r0, #1
   14ec4:	movw	r3, #37280	; 0x91a0
   14ec8:	movt	r3, #2
   14ecc:	cmp	r5, r3
   14ed0:	str	r8, [r4]
   14ed4:	beq	14ee0 <__assert_fail@plt+0x4058>
   14ed8:	mov	r0, r5
   14edc:	bl	12434 <__assert_fail@plt+0x15ac>
   14ee0:	mov	r0, r8
   14ee4:	bl	167f0 <__assert_fail@plt+0x5968>
   14ee8:	ldr	lr, [sp, #24]
   14eec:	mov	r1, r8
   14ef0:	mov	r3, sl
   14ef4:	mov	r2, r9
   14ef8:	mov	r5, r0
   14efc:	ldr	r8, [sp, #64]	; 0x40
   14f00:	ldr	ip, [sp, #68]	; 0x44
   14f04:	str	r0, [r4, #4]
   14f08:	str	lr, [sp]
   14f0c:	add	lr, sp, #32
   14f10:	str	r6, [sp, #4]
   14f14:	str	lr, [sp, #8]
   14f18:	str	r8, [sp, #12]
   14f1c:	str	ip, [sp, #16]
   14f20:	bl	12788 <__assert_fail@plt+0x1900>
   14f24:	mov	r0, r5
   14f28:	str	fp, [r7]
   14f2c:	add	sp, sp, #124	; 0x7c
   14f30:	ldrd	r4, [sp]
   14f34:	ldrd	r6, [sp, #8]
   14f38:	ldrd	r8, [sp, #16]
   14f3c:	ldrd	sl, [sp, #24]
   14f40:	add	sp, sp, #32
   14f44:	pop	{pc}		; (ldr pc, [sp], #4)
   14f48:	mov	r0, #8
   14f4c:	mvn	r3, #-2147483648	; 0x80000000
   14f50:	add	r1, sp, #72	; 0x48
   14f54:	str	r0, [sp]
   14f58:	mov	r0, #0
   14f5c:	bl	16a94 <__assert_fail@plt+0x5c0c>
   14f60:	ldrd	r2, [r5, #8]
   14f64:	mov	r4, r0
   14f68:	str	r0, [r5]
   14f6c:	strd	r2, [r0]
   14f70:	b	14e4c <__assert_fail@plt+0x3fc4>
   14f74:	bl	10e70 <abort@plt>
   14f78:	ldr	r3, [pc, #492]	; 1516c <__assert_fail@plt+0x42e4>
   14f7c:	lsr	ip, r2, #5
   14f80:	and	r2, r2, #31
   14f84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f88:	movw	r5, #37104	; 0x90f0
   14f8c:	movt	r5, #2
   14f90:	strd	r6, [sp, #8]
   14f94:	strd	r8, [sp, #16]
   14f98:	strd	sl, [sp, #24]
   14f9c:	mov	sl, r0
   14fa0:	mov	fp, r1
   14fa4:	ldrd	r0, [r3]
   14fa8:	str	lr, [sp, #32]
   14fac:	sub	sp, sp, #92	; 0x5c
   14fb0:	ldrd	r8, [r3, #8]
   14fb4:	add	r6, sp, #48	; 0x30
   14fb8:	strd	r0, [sp, #40]	; 0x28
   14fbc:	ldrd	r0, [r3, #16]
   14fc0:	strd	r8, [sp, #48]	; 0x30
   14fc4:	ldrd	r8, [r3, #24]
   14fc8:	strd	r0, [sp, #56]	; 0x38
   14fcc:	ldrd	r0, [r3, #32]
   14fd0:	strd	r8, [sp, #64]	; 0x40
   14fd4:	ldrd	r8, [r3, #40]	; 0x28
   14fd8:	strd	r0, [sp, #72]	; 0x48
   14fdc:	strd	r8, [sp, #80]	; 0x50
   14fe0:	ldr	r3, [r6, ip, lsl #2]
   14fe4:	mvn	r1, r3, lsr r2
   14fe8:	and	r1, r1, #1
   14fec:	eor	r2, r3, r1, lsl r2
   14ff0:	str	r2, [r6, ip, lsl #2]
   14ff4:	bl	10da4 <__errno_location@plt>
   14ff8:	ldr	r3, [r0]
   14ffc:	mov	r8, r0
   15000:	ldr	r2, [r5, #4]
   15004:	ldr	r4, [r5]
   15008:	str	r3, [sp, #28]
   1500c:	cmp	r2, #0
   15010:	bgt	1506c <__assert_fail@plt+0x41e4>
   15014:	add	r3, r5, #8
   15018:	str	r2, [sp, #36]	; 0x24
   1501c:	rsb	r2, r2, #1
   15020:	cmp	r4, r3
   15024:	beq	15140 <__assert_fail@plt+0x42b8>
   15028:	mov	r1, #8
   1502c:	mov	r0, r4
   15030:	mvn	r3, #-2147483648	; 0x80000000
   15034:	str	r1, [sp]
   15038:	add	r1, sp, #36	; 0x24
   1503c:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15040:	mov	r4, r0
   15044:	str	r0, [r5]
   15048:	ldr	r0, [r5, #4]
   1504c:	mov	r1, #0
   15050:	ldr	r2, [sp, #36]	; 0x24
   15054:	sub	r2, r2, r0
   15058:	add	r0, r4, r0, lsl #3
   1505c:	lsl	r2, r2, #3
   15060:	bl	10dbc <memset@plt>
   15064:	ldr	r3, [sp, #36]	; 0x24
   15068:	str	r3, [r5, #4]
   1506c:	ldr	ip, [sp, #40]	; 0x28
   15070:	mov	r3, fp
   15074:	mov	r2, sl
   15078:	ldr	r7, [sp, #44]	; 0x2c
   1507c:	ldr	r9, [r4]
   15080:	ldr	r5, [r4, #4]
   15084:	str	ip, [sp]
   15088:	orr	r7, r7, #1
   1508c:	ldr	ip, [sp, #80]	; 0x50
   15090:	mov	r1, r9
   15094:	str	r7, [sp, #4]
   15098:	ldr	lr, [sp, #84]	; 0x54
   1509c:	mov	r0, r5
   150a0:	str	r6, [sp, #8]
   150a4:	str	ip, [sp, #12]
   150a8:	str	lr, [sp, #16]
   150ac:	bl	12788 <__assert_fail@plt+0x1900>
   150b0:	cmp	r9, r0
   150b4:	bhi	15118 <__assert_fail@plt+0x4290>
   150b8:	add	r9, r0, #1
   150bc:	movw	r3, #37280	; 0x91a0
   150c0:	movt	r3, #2
   150c4:	cmp	r5, r3
   150c8:	str	r9, [r4]
   150cc:	beq	150d8 <__assert_fail@plt+0x4250>
   150d0:	mov	r0, r5
   150d4:	bl	12434 <__assert_fail@plt+0x15ac>
   150d8:	mov	r0, r9
   150dc:	bl	167f0 <__assert_fail@plt+0x5968>
   150e0:	mov	r1, r9
   150e4:	ldr	ip, [sp, #40]	; 0x28
   150e8:	mov	r3, fp
   150ec:	mov	r2, sl
   150f0:	mov	r5, r0
   150f4:	ldr	r9, [sp, #80]	; 0x50
   150f8:	ldr	lr, [sp, #84]	; 0x54
   150fc:	str	r0, [r4, #4]
   15100:	str	ip, [sp]
   15104:	str	r7, [sp, #4]
   15108:	str	r6, [sp, #8]
   1510c:	str	r9, [sp, #12]
   15110:	str	lr, [sp, #16]
   15114:	bl	12788 <__assert_fail@plt+0x1900>
   15118:	ldr	r3, [sp, #28]
   1511c:	mov	r0, r5
   15120:	str	r3, [r8]
   15124:	add	sp, sp, #92	; 0x5c
   15128:	ldrd	r4, [sp]
   1512c:	ldrd	r6, [sp, #8]
   15130:	ldrd	r8, [sp, #16]
   15134:	ldrd	sl, [sp, #24]
   15138:	add	sp, sp, #32
   1513c:	pop	{pc}		; (ldr pc, [sp], #4)
   15140:	mov	r0, #8
   15144:	mvn	r3, #-2147483648	; 0x80000000
   15148:	add	r1, sp, #36	; 0x24
   1514c:	str	r0, [sp]
   15150:	mov	r0, #0
   15154:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15158:	ldrd	r2, [r5, #8]
   1515c:	mov	r4, r0
   15160:	str	r0, [r5]
   15164:	strd	r2, [r0]
   15168:	b	15048 <__assert_fail@plt+0x41c0>
   1516c:	andeq	r9, r2, r0, lsr #5
   15170:	ldr	ip, [pc, #476]	; 15354 <__assert_fail@plt+0x44cc>
   15174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15178:	movw	r4, #37104	; 0x90f0
   1517c:	movt	r4, #2
   15180:	ldrd	r2, [ip, #8]
   15184:	strd	r6, [sp, #8]
   15188:	lsr	r7, r1, #5
   1518c:	mov	r6, r0
   15190:	strd	r8, [sp, #16]
   15194:	str	lr, [sp, #32]
   15198:	and	lr, r1, #31
   1519c:	ldrd	r0, [ip]
   151a0:	strd	sl, [sp, #24]
   151a4:	sub	sp, sp, #84	; 0x54
   151a8:	add	r5, sp, #40	; 0x28
   151ac:	strd	r0, [sp, #32]
   151b0:	strd	r2, [sp, #40]	; 0x28
   151b4:	ldrd	r0, [ip, #16]
   151b8:	ldrd	r2, [ip, #24]
   151bc:	strd	r0, [sp, #48]	; 0x30
   151c0:	ldrd	r0, [ip, #32]
   151c4:	strd	r2, [sp, #56]	; 0x38
   151c8:	ldrd	r2, [ip, #40]	; 0x28
   151cc:	strd	r0, [sp, #64]	; 0x40
   151d0:	strd	r2, [sp, #72]	; 0x48
   151d4:	ldr	r1, [r5, r7, lsl #2]
   151d8:	mvn	r3, r1, lsr lr
   151dc:	and	r3, r3, #1
   151e0:	eor	r1, r1, r3, lsl lr
   151e4:	str	r1, [r5, r7, lsl #2]
   151e8:	bl	10da4 <__errno_location@plt>
   151ec:	mov	r9, r0
   151f0:	ldr	sl, [r0]
   151f4:	ldr	r2, [r4, #4]
   151f8:	ldr	r7, [r4]
   151fc:	cmp	r2, #0
   15200:	bgt	1525c <__assert_fail@plt+0x43d4>
   15204:	add	r3, r4, #8
   15208:	str	r2, [sp, #28]
   1520c:	rsb	r2, r2, #1
   15210:	cmp	r7, r3
   15214:	beq	15328 <__assert_fail@plt+0x44a0>
   15218:	mov	r1, #8
   1521c:	mov	r0, r7
   15220:	mvn	r3, #-2147483648	; 0x80000000
   15224:	str	r1, [sp]
   15228:	add	r1, sp, #28
   1522c:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15230:	mov	r7, r0
   15234:	str	r0, [r4]
   15238:	ldr	r0, [r4, #4]
   1523c:	mov	r1, #0
   15240:	ldr	r2, [sp, #28]
   15244:	sub	r2, r2, r0
   15248:	add	r0, r7, r0, lsl #3
   1524c:	lsl	r2, r2, #3
   15250:	bl	10dbc <memset@plt>
   15254:	ldr	r3, [sp, #28]
   15258:	str	r3, [r4, #4]
   1525c:	ldr	ip, [sp, #32]
   15260:	mvn	r3, #0
   15264:	mov	r2, r6
   15268:	ldr	r8, [sp, #36]	; 0x24
   1526c:	ldr	fp, [r7]
   15270:	ldr	r4, [r7, #4]
   15274:	str	ip, [sp]
   15278:	orr	r8, r8, #1
   1527c:	ldr	ip, [sp, #72]	; 0x48
   15280:	mov	r1, fp
   15284:	str	r8, [sp, #4]
   15288:	ldr	lr, [sp, #76]	; 0x4c
   1528c:	mov	r0, r4
   15290:	str	r5, [sp, #8]
   15294:	str	ip, [sp, #12]
   15298:	str	lr, [sp, #16]
   1529c:	bl	12788 <__assert_fail@plt+0x1900>
   152a0:	cmp	fp, r0
   152a4:	bhi	15304 <__assert_fail@plt+0x447c>
   152a8:	add	fp, r0, #1
   152ac:	movw	r3, #37280	; 0x91a0
   152b0:	movt	r3, #2
   152b4:	cmp	r4, r3
   152b8:	str	fp, [r7]
   152bc:	beq	152c8 <__assert_fail@plt+0x4440>
   152c0:	mov	r0, r4
   152c4:	bl	12434 <__assert_fail@plt+0x15ac>
   152c8:	mov	r0, fp
   152cc:	bl	167f0 <__assert_fail@plt+0x5968>
   152d0:	ldr	r3, [sp, #32]
   152d4:	mov	r2, r6
   152d8:	mov	r1, fp
   152dc:	mov	r4, r0
   152e0:	ldr	lr, [sp, #72]	; 0x48
   152e4:	ldr	ip, [sp, #76]	; 0x4c
   152e8:	str	r0, [r7, #4]
   152ec:	stm	sp, {r3, r8}
   152f0:	mvn	r3, #0
   152f4:	str	r5, [sp, #8]
   152f8:	str	lr, [sp, #12]
   152fc:	str	ip, [sp, #16]
   15300:	bl	12788 <__assert_fail@plt+0x1900>
   15304:	mov	r0, r4
   15308:	str	sl, [r9]
   1530c:	add	sp, sp, #84	; 0x54
   15310:	ldrd	r4, [sp]
   15314:	ldrd	r6, [sp, #8]
   15318:	ldrd	r8, [sp, #16]
   1531c:	ldrd	sl, [sp, #24]
   15320:	add	sp, sp, #32
   15324:	pop	{pc}		; (ldr pc, [sp], #4)
   15328:	mov	r0, #8
   1532c:	mvn	r3, #-2147483648	; 0x80000000
   15330:	add	r1, sp, #28
   15334:	str	r0, [sp]
   15338:	mov	r0, #0
   1533c:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15340:	ldrd	r2, [r4, #8]
   15344:	mov	r7, r0
   15348:	str	r0, [r4]
   1534c:	strd	r2, [r0]
   15350:	b	15238 <__assert_fail@plt+0x43b0>
   15354:	andeq	r9, r2, r0, lsr #5
   15358:	ldr	ip, [pc, #472]	; 15538 <__assert_fail@plt+0x46b0>
   1535c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15360:	mov	r5, r0
   15364:	movw	r4, #37104	; 0x90f0
   15368:	movt	r4, #2
   1536c:	ldrd	r2, [ip]
   15370:	ldrd	r0, [ip, #8]
   15374:	strd	r6, [sp, #8]
   15378:	strd	r8, [sp, #16]
   1537c:	strd	sl, [sp, #24]
   15380:	str	lr, [sp, #32]
   15384:	sub	sp, sp, #84	; 0x54
   15388:	strd	r2, [sp, #32]
   1538c:	strd	r0, [sp, #40]	; 0x28
   15390:	ldr	r6, [sp, #44]	; 0x2c
   15394:	ldrd	r2, [ip, #16]
   15398:	ldrd	r0, [ip, #24]
   1539c:	mvn	lr, r6
   153a0:	and	lr, lr, #67108864	; 0x4000000
   153a4:	eor	lr, lr, r6
   153a8:	ldrd	r6, [ip, #40]	; 0x28
   153ac:	strd	r2, [sp, #48]	; 0x30
   153b0:	ldrd	r2, [ip, #32]
   153b4:	str	lr, [sp, #44]	; 0x2c
   153b8:	strd	r0, [sp, #56]	; 0x38
   153bc:	strd	r2, [sp, #64]	; 0x40
   153c0:	strd	r6, [sp, #72]	; 0x48
   153c4:	bl	10da4 <__errno_location@plt>
   153c8:	mov	r8, r0
   153cc:	ldr	r9, [r0]
   153d0:	ldr	r2, [r4, #4]
   153d4:	ldr	r6, [r4]
   153d8:	cmp	r2, #0
   153dc:	bgt	15438 <__assert_fail@plt+0x45b0>
   153e0:	add	r3, r4, #8
   153e4:	str	r2, [sp, #28]
   153e8:	rsb	r2, r2, #1
   153ec:	cmp	r6, r3
   153f0:	beq	1550c <__assert_fail@plt+0x4684>
   153f4:	mov	r1, #8
   153f8:	mov	r0, r6
   153fc:	mvn	r3, #-2147483648	; 0x80000000
   15400:	str	r1, [sp]
   15404:	add	r1, sp, #28
   15408:	bl	16a94 <__assert_fail@plt+0x5c0c>
   1540c:	mov	r6, r0
   15410:	str	r0, [r4]
   15414:	ldr	r0, [r4, #4]
   15418:	mov	r1, #0
   1541c:	ldr	r2, [sp, #28]
   15420:	sub	r2, r2, r0
   15424:	add	r0, r6, r0, lsl #3
   15428:	lsl	r2, r2, #3
   1542c:	bl	10dbc <memset@plt>
   15430:	ldr	r3, [sp, #28]
   15434:	str	r3, [r4, #4]
   15438:	ldr	sl, [r6]
   1543c:	add	r0, sp, #40	; 0x28
   15440:	mvn	r3, #0
   15444:	mov	r2, r5
   15448:	ldr	r7, [sp, #36]	; 0x24
   1544c:	ldr	r4, [r6, #4]
   15450:	mov	r1, sl
   15454:	str	r0, [sp, #8]
   15458:	ldr	lr, [sp, #32]
   1545c:	orr	r7, r7, #1
   15460:	ldr	ip, [sp, #72]	; 0x48
   15464:	mov	r0, r4
   15468:	ldr	fp, [sp, #76]	; 0x4c
   1546c:	str	lr, [sp]
   15470:	str	r7, [sp, #4]
   15474:	str	ip, [sp, #12]
   15478:	str	fp, [sp, #16]
   1547c:	bl	12788 <__assert_fail@plt+0x1900>
   15480:	cmp	sl, r0
   15484:	bhi	154e8 <__assert_fail@plt+0x4660>
   15488:	add	sl, r0, #1
   1548c:	movw	r3, #37280	; 0x91a0
   15490:	movt	r3, #2
   15494:	cmp	r4, r3
   15498:	str	sl, [r6]
   1549c:	beq	154a8 <__assert_fail@plt+0x4620>
   154a0:	mov	r0, r4
   154a4:	bl	12434 <__assert_fail@plt+0x15ac>
   154a8:	mov	r0, sl
   154ac:	bl	167f0 <__assert_fail@plt+0x5968>
   154b0:	ldr	r3, [sp, #32]
   154b4:	mov	r2, r5
   154b8:	add	r5, sp, #40	; 0x28
   154bc:	mov	r1, sl
   154c0:	mov	r4, r0
   154c4:	ldr	lr, [sp, #72]	; 0x48
   154c8:	ldr	ip, [sp, #76]	; 0x4c
   154cc:	str	r0, [r6, #4]
   154d0:	stm	sp, {r3, r7}
   154d4:	mvn	r3, #0
   154d8:	str	r5, [sp, #8]
   154dc:	str	lr, [sp, #12]
   154e0:	str	ip, [sp, #16]
   154e4:	bl	12788 <__assert_fail@plt+0x1900>
   154e8:	mov	r0, r4
   154ec:	str	r9, [r8]
   154f0:	add	sp, sp, #84	; 0x54
   154f4:	ldrd	r4, [sp]
   154f8:	ldrd	r6, [sp, #8]
   154fc:	ldrd	r8, [sp, #16]
   15500:	ldrd	sl, [sp, #24]
   15504:	add	sp, sp, #32
   15508:	pop	{pc}		; (ldr pc, [sp], #4)
   1550c:	mov	r0, #8
   15510:	mvn	r3, #-2147483648	; 0x80000000
   15514:	add	r1, sp, #28
   15518:	str	r0, [sp]
   1551c:	mov	r0, #0
   15520:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15524:	ldrd	r2, [r4, #8]
   15528:	mov	r6, r0
   1552c:	str	r0, [r4]
   15530:	strd	r2, [r0]
   15534:	b	15414 <__assert_fail@plt+0x458c>
   15538:	andeq	r9, r2, r0, lsr #5
   1553c:	ldr	ip, [pc, #480]	; 15724 <__assert_fail@plt+0x489c>
   15540:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15544:	mov	r5, r0
   15548:	movw	r4, #37104	; 0x90f0
   1554c:	movt	r4, #2
   15550:	ldrd	r2, [ip]
   15554:	strd	r6, [sp, #8]
   15558:	mov	r6, r1
   1555c:	ldrd	r0, [ip, #8]
   15560:	strd	r8, [sp, #16]
   15564:	strd	sl, [sp, #24]
   15568:	str	lr, [sp, #32]
   1556c:	sub	sp, sp, #84	; 0x54
   15570:	ldrd	r8, [ip, #40]	; 0x28
   15574:	strd	r2, [sp, #32]
   15578:	strd	r0, [sp, #40]	; 0x28
   1557c:	ldrd	r2, [ip, #16]
   15580:	ldr	r7, [sp, #44]	; 0x2c
   15584:	ldrd	r0, [ip, #24]
   15588:	strd	r2, [sp, #48]	; 0x30
   1558c:	ldrd	r2, [ip, #32]
   15590:	mvn	lr, r7
   15594:	and	lr, lr, #67108864	; 0x4000000
   15598:	eor	lr, lr, r7
   1559c:	str	lr, [sp, #44]	; 0x2c
   155a0:	strd	r0, [sp, #56]	; 0x38
   155a4:	strd	r2, [sp, #64]	; 0x40
   155a8:	strd	r8, [sp, #72]	; 0x48
   155ac:	bl	10da4 <__errno_location@plt>
   155b0:	mov	r9, r0
   155b4:	ldr	sl, [r0]
   155b8:	ldr	r2, [r4, #4]
   155bc:	ldr	r7, [r4]
   155c0:	cmp	r2, #0
   155c4:	bgt	15620 <__assert_fail@plt+0x4798>
   155c8:	add	r3, r4, #8
   155cc:	str	r2, [sp, #28]
   155d0:	rsb	r2, r2, #1
   155d4:	cmp	r7, r3
   155d8:	beq	156f8 <__assert_fail@plt+0x4870>
   155dc:	mov	r1, #8
   155e0:	mov	r0, r7
   155e4:	mvn	r3, #-2147483648	; 0x80000000
   155e8:	str	r1, [sp]
   155ec:	add	r1, sp, #28
   155f0:	bl	16a94 <__assert_fail@plt+0x5c0c>
   155f4:	mov	r7, r0
   155f8:	str	r0, [r4]
   155fc:	ldr	r0, [r4, #4]
   15600:	mov	r1, #0
   15604:	ldr	r2, [sp, #28]
   15608:	sub	r2, r2, r0
   1560c:	add	r0, r7, r0, lsl #3
   15610:	lsl	r2, r2, #3
   15614:	bl	10dbc <memset@plt>
   15618:	ldr	r3, [sp, #28]
   1561c:	str	r3, [r4, #4]
   15620:	ldr	ip, [sp, #32]
   15624:	add	r0, sp, #40	; 0x28
   15628:	mov	r3, r6
   1562c:	mov	r2, r5
   15630:	ldr	r8, [sp, #36]	; 0x24
   15634:	ldr	fp, [r7]
   15638:	ldr	r4, [r7, #4]
   1563c:	str	ip, [sp]
   15640:	orr	r8, r8, #1
   15644:	ldr	ip, [sp, #72]	; 0x48
   15648:	mov	r1, fp
   1564c:	str	r8, [sp, #4]
   15650:	ldr	lr, [sp, #76]	; 0x4c
   15654:	str	r0, [sp, #8]
   15658:	mov	r0, r4
   1565c:	str	ip, [sp, #12]
   15660:	str	lr, [sp, #16]
   15664:	bl	12788 <__assert_fail@plt+0x1900>
   15668:	cmp	fp, r0
   1566c:	bhi	156d4 <__assert_fail@plt+0x484c>
   15670:	add	fp, r0, #1
   15674:	movw	r3, #37280	; 0x91a0
   15678:	movt	r3, #2
   1567c:	cmp	r4, r3
   15680:	str	fp, [r7]
   15684:	beq	15690 <__assert_fail@plt+0x4808>
   15688:	mov	r0, r4
   1568c:	bl	12434 <__assert_fail@plt+0x15ac>
   15690:	mov	r0, fp
   15694:	bl	167f0 <__assert_fail@plt+0x5968>
   15698:	ldr	lr, [sp, #32]
   1569c:	mov	r2, r5
   156a0:	mov	r3, r6
   156a4:	mov	r1, fp
   156a8:	mov	r4, r0
   156ac:	ldr	r5, [sp, #72]	; 0x48
   156b0:	ldr	ip, [sp, #76]	; 0x4c
   156b4:	str	r0, [r7, #4]
   156b8:	str	lr, [sp]
   156bc:	add	lr, sp, #40	; 0x28
   156c0:	str	r8, [sp, #4]
   156c4:	str	lr, [sp, #8]
   156c8:	str	r5, [sp, #12]
   156cc:	str	ip, [sp, #16]
   156d0:	bl	12788 <__assert_fail@plt+0x1900>
   156d4:	mov	r0, r4
   156d8:	str	sl, [r9]
   156dc:	add	sp, sp, #84	; 0x54
   156e0:	ldrd	r4, [sp]
   156e4:	ldrd	r6, [sp, #8]
   156e8:	ldrd	r8, [sp, #16]
   156ec:	ldrd	sl, [sp, #24]
   156f0:	add	sp, sp, #32
   156f4:	pop	{pc}		; (ldr pc, [sp], #4)
   156f8:	mov	r0, #8
   156fc:	mvn	r3, #-2147483648	; 0x80000000
   15700:	add	r1, sp, #28
   15704:	str	r0, [sp]
   15708:	mov	r0, #0
   1570c:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15710:	ldrd	r2, [r4, #8]
   15714:	mov	r7, r0
   15718:	str	r0, [r4]
   1571c:	strd	r2, [r0]
   15720:	b	155fc <__assert_fail@plt+0x4774>
   15724:	andeq	r9, r2, r0, lsr #5
   15728:	strd	r4, [sp, #-12]!
   1572c:	mov	r4, #0
   15730:	mov	r5, #0
   15734:	str	lr, [sp, #8]
   15738:	sub	sp, sp, #100	; 0x64
   1573c:	cmp	r1, #10
   15740:	strd	r4, [sp]
   15744:	strd	r4, [sp, #8]
   15748:	strd	r4, [sp, #16]
   1574c:	strd	r4, [sp, #24]
   15750:	strd	r4, [sp, #32]
   15754:	strd	r4, [sp, #40]	; 0x28
   15758:	beq	15788 <__assert_fail@plt+0x4900>
   1575c:	mov	ip, #67108864	; 0x4000000
   15760:	mov	r3, sp
   15764:	str	r1, [sp]
   15768:	mov	r1, r2
   1576c:	mvn	r2, #0
   15770:	str	ip, [sp, #12]
   15774:	bl	14174 <__assert_fail@plt+0x32ec>
   15778:	add	sp, sp, #100	; 0x64
   1577c:	ldrd	r4, [sp]
   15780:	add	sp, sp, #8
   15784:	pop	{pc}		; (ldr pc, [sp], #4)
   15788:	bl	10e70 <abort@plt>
   1578c:	ldr	ip, [pc, #156]	; 15830 <__assert_fail@plt+0x49a8>
   15790:	cmp	r2, #0
   15794:	cmpne	r1, #0
   15798:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1579c:	strd	r6, [sp, #8]
   157a0:	mov	r6, r2
   157a4:	str	r8, [sp, #16]
   157a8:	mov	r8, r3
   157ac:	strd	sl, [sp, #20]
   157b0:	ldrd	r4, [ip]
   157b4:	str	lr, [sp, #28]
   157b8:	sub	sp, sp, #48	; 0x30
   157bc:	mov	lr, #10
   157c0:	ldrd	r2, [ip, #8]
   157c4:	ldrd	sl, [ip, #16]
   157c8:	strd	r4, [sp]
   157cc:	ldrd	r4, [ip, #32]
   157d0:	str	lr, [sp]
   157d4:	strd	r2, [sp, #8]
   157d8:	strd	sl, [sp, #16]
   157dc:	ldrd	r2, [ip, #24]
   157e0:	ldrd	sl, [ip, #40]	; 0x28
   157e4:	strd	r2, [sp, #24]
   157e8:	strd	r4, [sp, #32]
   157ec:	strd	sl, [sp, #40]	; 0x28
   157f0:	beq	1582c <__assert_fail@plt+0x49a4>
   157f4:	mov	r7, r1
   157f8:	mov	r3, sp
   157fc:	mov	r1, r8
   15800:	mvn	r2, #0
   15804:	str	r7, [sp, #40]	; 0x28
   15808:	str	r6, [sp, #44]	; 0x2c
   1580c:	bl	14174 <__assert_fail@plt+0x32ec>
   15810:	add	sp, sp, #48	; 0x30
   15814:	ldrd	r4, [sp]
   15818:	ldrd	r6, [sp, #8]
   1581c:	ldr	r8, [sp, #16]
   15820:	ldrd	sl, [sp, #20]
   15824:	add	sp, sp, #28
   15828:	pop	{pc}		; (ldr pc, [sp], #4)
   1582c:	bl	10e70 <abort@plt>
   15830:	andeq	r9, r2, r0, lsr #5
   15834:	ldr	ip, [pc, #156]	; 158d8 <__assert_fail@plt+0x4a50>
   15838:	cmp	r2, #0
   1583c:	cmpne	r1, #0
   15840:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15844:	strd	r6, [sp, #8]
   15848:	mov	r6, r2
   1584c:	str	r8, [sp, #16]
   15850:	mov	r8, r3
   15854:	strd	sl, [sp, #20]
   15858:	ldrd	r4, [ip]
   1585c:	str	lr, [sp, #28]
   15860:	sub	sp, sp, #48	; 0x30
   15864:	mov	lr, #10
   15868:	ldrd	r2, [ip, #8]
   1586c:	ldrd	sl, [ip, #16]
   15870:	strd	r4, [sp]
   15874:	ldrd	r4, [ip, #32]
   15878:	str	lr, [sp]
   1587c:	strd	r2, [sp, #8]
   15880:	strd	sl, [sp, #16]
   15884:	ldrd	r2, [ip, #24]
   15888:	ldrd	sl, [ip, #40]	; 0x28
   1588c:	strd	r2, [sp, #24]
   15890:	strd	r4, [sp, #32]
   15894:	strd	sl, [sp, #40]	; 0x28
   15898:	beq	158d4 <__assert_fail@plt+0x4a4c>
   1589c:	ldr	r2, [sp, #80]	; 0x50
   158a0:	mov	r7, r1
   158a4:	mov	r3, sp
   158a8:	mov	r1, r8
   158ac:	str	r7, [sp, #40]	; 0x28
   158b0:	str	r6, [sp, #44]	; 0x2c
   158b4:	bl	14174 <__assert_fail@plt+0x32ec>
   158b8:	add	sp, sp, #48	; 0x30
   158bc:	ldrd	r4, [sp]
   158c0:	ldrd	r6, [sp, #8]
   158c4:	ldr	r8, [sp, #16]
   158c8:	ldrd	sl, [sp, #20]
   158cc:	add	sp, sp, #28
   158d0:	pop	{pc}		; (ldr pc, [sp], #4)
   158d4:	bl	10e70 <abort@plt>
   158d8:	andeq	r9, r2, r0, lsr #5
   158dc:	ldr	ip, [pc, #512]	; 15ae4 <__assert_fail@plt+0x4c5c>
   158e0:	cmp	r0, #0
   158e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158e8:	ldrd	r4, [ip, #16]
   158ec:	strd	r6, [sp, #8]
   158f0:	clz	r6, r1
   158f4:	mov	r7, r1
   158f8:	strd	r8, [sp, #16]
   158fc:	mov	r8, r0
   15900:	lsr	r6, r6, #5
   15904:	strd	sl, [sp, #24]
   15908:	mov	fp, r2
   1590c:	mov	sl, #10
   15910:	ldrd	r2, [ip]
   15914:	moveq	r6, #1
   15918:	str	lr, [sp, #32]
   1591c:	sub	sp, sp, #92	; 0x5c
   15920:	cmp	r6, #0
   15924:	ldrd	r0, [ip, #8]
   15928:	strd	r2, [sp, #40]	; 0x28
   1592c:	strd	r4, [sp, #56]	; 0x38
   15930:	ldrd	r2, [ip, #24]
   15934:	strd	r0, [sp, #48]	; 0x30
   15938:	ldrd	r0, [ip, #32]
   1593c:	str	sl, [sp, #40]	; 0x28
   15940:	ldrd	r4, [ip, #40]	; 0x28
   15944:	strd	r2, [sp, #64]	; 0x40
   15948:	strd	r0, [sp, #72]	; 0x48
   1594c:	strd	r4, [sp, #80]	; 0x50
   15950:	bne	15ae0 <__assert_fail@plt+0x4c58>
   15954:	movw	r5, #37104	; 0x90f0
   15958:	movt	r5, #2
   1595c:	str	r8, [sp, #80]	; 0x50
   15960:	str	r7, [sp, #84]	; 0x54
   15964:	bl	10da4 <__errno_location@plt>
   15968:	ldr	r3, [r0]
   1596c:	mov	r9, r0
   15970:	ldr	r2, [r5, #4]
   15974:	ldr	r4, [r5]
   15978:	str	r3, [sp, #28]
   1597c:	cmp	r2, #0
   15980:	movgt	r1, sl
   15984:	bgt	159ec <__assert_fail@plt+0x4b64>
   15988:	add	r3, r5, #8
   1598c:	str	r2, [sp, #36]	; 0x24
   15990:	rsb	r2, r2, #1
   15994:	cmp	r4, r3
   15998:	beq	15ab4 <__assert_fail@plt+0x4c2c>
   1599c:	mov	r1, #8
   159a0:	mov	r0, r4
   159a4:	mvn	r3, #-2147483648	; 0x80000000
   159a8:	str	r1, [sp]
   159ac:	add	r1, sp, #36	; 0x24
   159b0:	bl	16a94 <__assert_fail@plt+0x5c0c>
   159b4:	mov	r4, r0
   159b8:	str	r0, [r5]
   159bc:	ldr	r0, [r5, #4]
   159c0:	mov	r1, #0
   159c4:	ldr	r2, [sp, #36]	; 0x24
   159c8:	sub	r2, r2, r0
   159cc:	add	r0, r4, r0, lsl #3
   159d0:	lsl	r2, r2, #3
   159d4:	bl	10dbc <memset@plt>
   159d8:	ldr	r3, [sp, #36]	; 0x24
   159dc:	ldr	r1, [sp, #40]	; 0x28
   159e0:	ldr	r8, [sp, #80]	; 0x50
   159e4:	str	r3, [r5, #4]
   159e8:	ldr	r7, [sp, #84]	; 0x54
   159ec:	mvn	r3, #0
   159f0:	mov	r2, fp
   159f4:	ldr	r6, [sp, #44]	; 0x2c
   159f8:	ldr	sl, [r4]
   159fc:	ldr	r5, [r4, #4]
   15a00:	orr	r6, r6, #1
   15a04:	stm	sp, {r1, r6}
   15a08:	add	r1, sp, #48	; 0x30
   15a0c:	str	r8, [sp, #12]
   15a10:	mov	r0, r5
   15a14:	str	r1, [sp, #8]
   15a18:	mov	r1, sl
   15a1c:	str	r7, [sp, #16]
   15a20:	bl	12788 <__assert_fail@plt+0x1900>
   15a24:	cmp	sl, r0
   15a28:	bhi	15a8c <__assert_fail@plt+0x4c04>
   15a2c:	add	r7, r0, #1
   15a30:	movw	r3, #37280	; 0x91a0
   15a34:	movt	r3, #2
   15a38:	cmp	r5, r3
   15a3c:	str	r7, [r4]
   15a40:	beq	15a4c <__assert_fail@plt+0x4bc4>
   15a44:	mov	r0, r5
   15a48:	bl	12434 <__assert_fail@plt+0x15ac>
   15a4c:	mov	r0, r7
   15a50:	bl	167f0 <__assert_fail@plt+0x5968>
   15a54:	ldr	r3, [sp, #40]	; 0x28
   15a58:	mov	r2, fp
   15a5c:	mov	r1, r7
   15a60:	mov	r5, r0
   15a64:	ldr	lr, [sp, #80]	; 0x50
   15a68:	ldr	ip, [sp, #84]	; 0x54
   15a6c:	str	r0, [r4, #4]
   15a70:	add	r4, sp, #48	; 0x30
   15a74:	stm	sp, {r3, r6}
   15a78:	mvn	r3, #0
   15a7c:	str	r4, [sp, #8]
   15a80:	str	lr, [sp, #12]
   15a84:	str	ip, [sp, #16]
   15a88:	bl	12788 <__assert_fail@plt+0x1900>
   15a8c:	ldr	r3, [sp, #28]
   15a90:	mov	r0, r5
   15a94:	str	r3, [r9]
   15a98:	add	sp, sp, #92	; 0x5c
   15a9c:	ldrd	r4, [sp]
   15aa0:	ldrd	r6, [sp, #8]
   15aa4:	ldrd	r8, [sp, #16]
   15aa8:	ldrd	sl, [sp, #24]
   15aac:	add	sp, sp, #32
   15ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab4:	mov	r1, #8
   15ab8:	mvn	r3, #-2147483648	; 0x80000000
   15abc:	mov	r0, r6
   15ac0:	str	r1, [sp]
   15ac4:	add	r1, sp, #36	; 0x24
   15ac8:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15acc:	ldrd	r2, [r5, #8]
   15ad0:	mov	r4, r0
   15ad4:	str	r0, [r5]
   15ad8:	strd	r2, [r0]
   15adc:	b	159bc <__assert_fail@plt+0x4b34>
   15ae0:	bl	10e70 <abort@plt>
   15ae4:	andeq	r9, r2, r0, lsr #5
   15ae8:	ldr	ip, [pc, #536]	; 15d08 <__assert_fail@plt+0x4e80>
   15aec:	cmp	r0, #0
   15af0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15af4:	ldrd	r4, [ip, #16]
   15af8:	strd	r6, [sp, #8]
   15afc:	mov	r6, r1
   15b00:	mov	r7, r0
   15b04:	strd	r8, [sp, #16]
   15b08:	mov	r9, #10
   15b0c:	strd	sl, [sp, #24]
   15b10:	mov	sl, r2
   15b14:	mov	fp, r3
   15b18:	str	lr, [sp, #32]
   15b1c:	clz	lr, r1
   15b20:	sub	sp, sp, #92	; 0x5c
   15b24:	ldrd	r2, [ip]
   15b28:	lsr	lr, lr, #5
   15b2c:	moveq	lr, #1
   15b30:	ldrd	r0, [ip, #8]
   15b34:	cmp	lr, #0
   15b38:	strd	r4, [sp, #56]	; 0x38
   15b3c:	ldrd	r4, [ip, #40]	; 0x28
   15b40:	str	lr, [sp, #28]
   15b44:	strd	r2, [sp, #40]	; 0x28
   15b48:	ldrd	r2, [ip, #24]
   15b4c:	strd	r0, [sp, #48]	; 0x30
   15b50:	ldrd	r0, [ip, #32]
   15b54:	str	r9, [sp, #40]	; 0x28
   15b58:	strd	r2, [sp, #64]	; 0x40
   15b5c:	strd	r4, [sp, #80]	; 0x50
   15b60:	strd	r0, [sp, #72]	; 0x48
   15b64:	bne	15d04 <__assert_fail@plt+0x4e7c>
   15b68:	movw	r5, #37104	; 0x90f0
   15b6c:	movt	r5, #2
   15b70:	str	r7, [sp, #80]	; 0x50
   15b74:	str	r6, [sp, #84]	; 0x54
   15b78:	bl	10da4 <__errno_location@plt>
   15b7c:	ldr	r3, [r0]
   15b80:	mov	r8, r0
   15b84:	ldr	r2, [r5, #4]
   15b88:	ldr	r4, [r5]
   15b8c:	str	r3, [sp, #24]
   15b90:	cmp	r2, #0
   15b94:	movgt	r1, r9
   15b98:	bgt	15c00 <__assert_fail@plt+0x4d78>
   15b9c:	add	r3, r5, #8
   15ba0:	str	r2, [sp, #36]	; 0x24
   15ba4:	rsb	r2, r2, #1
   15ba8:	cmp	r4, r3
   15bac:	beq	15cd8 <__assert_fail@plt+0x4e50>
   15bb0:	mov	r1, #8
   15bb4:	mov	r0, r4
   15bb8:	mvn	r3, #-2147483648	; 0x80000000
   15bbc:	str	r1, [sp]
   15bc0:	add	r1, sp, #36	; 0x24
   15bc4:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15bc8:	mov	r4, r0
   15bcc:	str	r0, [r5]
   15bd0:	ldr	r0, [r5, #4]
   15bd4:	mov	r1, #0
   15bd8:	ldr	r2, [sp, #36]	; 0x24
   15bdc:	sub	r2, r2, r0
   15be0:	add	r0, r4, r0, lsl #3
   15be4:	lsl	r2, r2, #3
   15be8:	bl	10dbc <memset@plt>
   15bec:	ldr	r3, [sp, #36]	; 0x24
   15bf0:	ldr	r1, [sp, #40]	; 0x28
   15bf4:	ldr	r7, [sp, #80]	; 0x50
   15bf8:	str	r3, [r5, #4]
   15bfc:	ldr	r6, [sp, #84]	; 0x54
   15c00:	mov	r3, fp
   15c04:	mov	r2, sl
   15c08:	ldr	r0, [sp, #44]	; 0x2c
   15c0c:	ldr	r9, [r4]
   15c10:	ldr	r5, [r4, #4]
   15c14:	orr	r0, r0, #1
   15c18:	str	r1, [sp]
   15c1c:	add	r1, sp, #48	; 0x30
   15c20:	str	r0, [sp, #4]
   15c24:	str	r1, [sp, #8]
   15c28:	mov	r1, r9
   15c2c:	str	r7, [sp, #12]
   15c30:	str	r6, [sp, #16]
   15c34:	str	r0, [sp, #28]
   15c38:	mov	r0, r5
   15c3c:	bl	12788 <__assert_fail@plt+0x1900>
   15c40:	cmp	r9, r0
   15c44:	bhi	15cb0 <__assert_fail@plt+0x4e28>
   15c48:	add	r6, r0, #1
   15c4c:	movw	r3, #37280	; 0x91a0
   15c50:	movt	r3, #2
   15c54:	cmp	r5, r3
   15c58:	str	r6, [r4]
   15c5c:	beq	15c68 <__assert_fail@plt+0x4de0>
   15c60:	mov	r0, r5
   15c64:	bl	12434 <__assert_fail@plt+0x15ac>
   15c68:	mov	r0, r6
   15c6c:	bl	167f0 <__assert_fail@plt+0x5968>
   15c70:	ldr	lr, [sp, #40]	; 0x28
   15c74:	mov	r1, r6
   15c78:	mov	r3, fp
   15c7c:	mov	r2, sl
   15c80:	mov	r5, r0
   15c84:	ldr	r6, [sp, #80]	; 0x50
   15c88:	ldr	ip, [sp, #84]	; 0x54
   15c8c:	str	r0, [r4, #4]
   15c90:	str	lr, [sp]
   15c94:	ldr	lr, [sp, #28]
   15c98:	str	lr, [sp, #4]
   15c9c:	add	lr, sp, #48	; 0x30
   15ca0:	str	r6, [sp, #12]
   15ca4:	str	lr, [sp, #8]
   15ca8:	str	ip, [sp, #16]
   15cac:	bl	12788 <__assert_fail@plt+0x1900>
   15cb0:	ldr	r3, [sp, #24]
   15cb4:	mov	r0, r5
   15cb8:	str	r3, [r8]
   15cbc:	add	sp, sp, #92	; 0x5c
   15cc0:	ldrd	r4, [sp]
   15cc4:	ldrd	r6, [sp, #8]
   15cc8:	ldrd	r8, [sp, #16]
   15ccc:	ldrd	sl, [sp, #24]
   15cd0:	add	sp, sp, #32
   15cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd8:	mov	r1, #8
   15cdc:	mvn	r3, #-2147483648	; 0x80000000
   15ce0:	ldr	r0, [sp, #28]
   15ce4:	str	r1, [sp]
   15ce8:	add	r1, sp, #36	; 0x24
   15cec:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15cf0:	ldrd	r2, [r5, #8]
   15cf4:	mov	r4, r0
   15cf8:	str	r0, [r5]
   15cfc:	strd	r2, [r0]
   15d00:	b	15bd0 <__assert_fail@plt+0x4d48>
   15d04:	bl	10e70 <abort@plt>
   15d08:	andeq	r9, r2, r0, lsr #5
   15d0c:	ldr	r3, [pc]	; 15d14 <__assert_fail@plt+0x4e8c>
   15d10:	b	14174 <__assert_fail@plt+0x32ec>
   15d14:	andeq	r9, r2, r0, lsl #2
   15d18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d1c:	movw	r4, #37104	; 0x90f0
   15d20:	movt	r4, #2
   15d24:	strd	r6, [sp, #8]
   15d28:	strd	r8, [sp, #16]
   15d2c:	strd	sl, [sp, #24]
   15d30:	mov	sl, r0
   15d34:	mov	fp, r1
   15d38:	str	lr, [sp, #32]
   15d3c:	sub	sp, sp, #44	; 0x2c
   15d40:	bl	10da4 <__errno_location@plt>
   15d44:	ldr	r3, [r0]
   15d48:	mov	r8, r0
   15d4c:	ldr	r2, [r4, #4]
   15d50:	ldr	r5, [r4]
   15d54:	str	r3, [sp, #28]
   15d58:	cmp	r2, #0
   15d5c:	bgt	15db8 <__assert_fail@plt+0x4f30>
   15d60:	add	r3, r4, #8
   15d64:	str	r2, [sp, #36]	; 0x24
   15d68:	rsb	r2, r2, #1
   15d6c:	cmp	r5, r3
   15d70:	beq	15e94 <__assert_fail@plt+0x500c>
   15d74:	mov	r1, #8
   15d78:	mov	r0, r5
   15d7c:	mvn	r3, #-2147483648	; 0x80000000
   15d80:	str	r1, [sp]
   15d84:	add	r1, sp, #36	; 0x24
   15d88:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15d8c:	mov	r5, r0
   15d90:	str	r0, [r4]
   15d94:	ldr	r0, [r4, #4]
   15d98:	mov	r1, #0
   15d9c:	ldr	r2, [sp, #36]	; 0x24
   15da0:	sub	r2, r2, r0
   15da4:	add	r0, r5, r0, lsl #3
   15da8:	lsl	r2, r2, #3
   15dac:	bl	10dbc <memset@plt>
   15db0:	ldr	r3, [sp, #36]	; 0x24
   15db4:	str	r3, [r4, #4]
   15db8:	ldr	ip, [r4, #16]
   15dbc:	mov	r3, fp
   15dc0:	mov	r2, sl
   15dc4:	ldr	r7, [r4, #20]
   15dc8:	ldr	r0, [pc, #240]	; 15ec0 <__assert_fail@plt+0x5038>
   15dcc:	ldr	r9, [r5]
   15dd0:	orr	r7, r7, #1
   15dd4:	ldr	r6, [r5, #4]
   15dd8:	str	ip, [sp]
   15ddc:	ldr	ip, [r4, #56]	; 0x38
   15de0:	mov	r1, r9
   15de4:	str	r7, [sp, #4]
   15de8:	ldr	lr, [r4, #60]	; 0x3c
   15dec:	str	r0, [sp, #8]
   15df0:	mov	r0, r6
   15df4:	str	ip, [sp, #12]
   15df8:	str	lr, [sp, #16]
   15dfc:	bl	12788 <__assert_fail@plt+0x1900>
   15e00:	cmp	r9, r0
   15e04:	bhi	15e6c <__assert_fail@plt+0x4fe4>
   15e08:	add	r9, r0, #1
   15e0c:	movw	r3, #37280	; 0x91a0
   15e10:	movt	r3, #2
   15e14:	cmp	r6, r3
   15e18:	str	r9, [r5]
   15e1c:	beq	15e28 <__assert_fail@plt+0x4fa0>
   15e20:	mov	r0, r6
   15e24:	bl	12434 <__assert_fail@plt+0x15ac>
   15e28:	mov	r0, r9
   15e2c:	bl	167f0 <__assert_fail@plt+0x5968>
   15e30:	ldr	ip, [r4, #16]
   15e34:	mov	r1, r9
   15e38:	mov	r3, fp
   15e3c:	mov	r2, sl
   15e40:	mov	r6, r0
   15e44:	ldr	r9, [r4, #56]	; 0x38
   15e48:	ldr	lr, [r4, #60]	; 0x3c
   15e4c:	str	r0, [r5, #4]
   15e50:	str	ip, [sp]
   15e54:	ldr	ip, [pc, #100]	; 15ec0 <__assert_fail@plt+0x5038>
   15e58:	str	r7, [sp, #4]
   15e5c:	str	ip, [sp, #8]
   15e60:	str	r9, [sp, #12]
   15e64:	str	lr, [sp, #16]
   15e68:	bl	12788 <__assert_fail@plt+0x1900>
   15e6c:	ldr	r3, [sp, #28]
   15e70:	mov	r0, r6
   15e74:	str	r3, [r8]
   15e78:	add	sp, sp, #44	; 0x2c
   15e7c:	ldrd	r4, [sp]
   15e80:	ldrd	r6, [sp, #8]
   15e84:	ldrd	r8, [sp, #16]
   15e88:	ldrd	sl, [sp, #24]
   15e8c:	add	sp, sp, #32
   15e90:	pop	{pc}		; (ldr pc, [sp], #4)
   15e94:	mov	r0, #8
   15e98:	mvn	r3, #-2147483648	; 0x80000000
   15e9c:	add	r1, sp, #36	; 0x24
   15ea0:	str	r0, [sp]
   15ea4:	mov	r0, #0
   15ea8:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15eac:	ldrd	r2, [r4, #8]
   15eb0:	mov	r5, r0
   15eb4:	str	r0, [r4]
   15eb8:	strd	r2, [r0]
   15ebc:	b	15d94 <__assert_fail@plt+0x4f0c>
   15ec0:	andeq	r9, r2, r8, lsl #2
   15ec4:	ldr	r3, [pc, #4]	; 15ed0 <__assert_fail@plt+0x5048>
   15ec8:	mvn	r2, #0
   15ecc:	b	14174 <__assert_fail@plt+0x32ec>
   15ed0:	andeq	r9, r2, r0, lsl #2
   15ed4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ed8:	movw	r4, #37104	; 0x90f0
   15edc:	movt	r4, #2
   15ee0:	strd	r6, [sp, #8]
   15ee4:	strd	r8, [sp, #16]
   15ee8:	strd	sl, [sp, #24]
   15eec:	mov	sl, r0
   15ef0:	str	lr, [sp, #32]
   15ef4:	sub	sp, sp, #44	; 0x2c
   15ef8:	bl	10da4 <__errno_location@plt>
   15efc:	ldr	r3, [r0]
   15f00:	mov	r8, r0
   15f04:	ldr	r2, [r4, #4]
   15f08:	ldr	r5, [r4]
   15f0c:	str	r3, [sp, #28]
   15f10:	cmp	r2, #0
   15f14:	bgt	15f70 <__assert_fail@plt+0x50e8>
   15f18:	add	r3, r4, #8
   15f1c:	str	r2, [sp, #36]	; 0x24
   15f20:	rsb	r2, r2, #1
   15f24:	cmp	r5, r3
   15f28:	beq	16038 <__assert_fail@plt+0x51b0>
   15f2c:	mov	r1, #8
   15f30:	mov	r0, r5
   15f34:	mvn	r3, #-2147483648	; 0x80000000
   15f38:	str	r1, [sp]
   15f3c:	add	r1, sp, #36	; 0x24
   15f40:	bl	16a94 <__assert_fail@plt+0x5c0c>
   15f44:	mov	r5, r0
   15f48:	str	r0, [r4]
   15f4c:	ldr	r0, [r4, #4]
   15f50:	mov	r1, #0
   15f54:	ldr	r2, [sp, #36]	; 0x24
   15f58:	sub	r2, r2, r0
   15f5c:	add	r0, r5, r0, lsl #3
   15f60:	lsl	r2, r2, #3
   15f64:	bl	10dbc <memset@plt>
   15f68:	ldr	r3, [sp, #36]	; 0x24
   15f6c:	str	r3, [r4, #4]
   15f70:	ldr	ip, [r4, #16]
   15f74:	mvn	r3, #0
   15f78:	mov	r2, sl
   15f7c:	ldr	r7, [r4, #20]
   15f80:	ldr	fp, [pc, #220]	; 16064 <__assert_fail@plt+0x51dc>
   15f84:	ldr	r9, [r5]
   15f88:	orr	r7, r7, #1
   15f8c:	ldr	r6, [r5, #4]
   15f90:	str	ip, [sp]
   15f94:	ldr	ip, [r4, #56]	; 0x38
   15f98:	mov	r1, r9
   15f9c:	stmib	sp, {r7, fp}
   15fa0:	ldr	lr, [r4, #60]	; 0x3c
   15fa4:	mov	r0, r6
   15fa8:	str	ip, [sp, #12]
   15fac:	str	lr, [sp, #16]
   15fb0:	bl	12788 <__assert_fail@plt+0x1900>
   15fb4:	cmp	r9, r0
   15fb8:	bhi	16010 <__assert_fail@plt+0x5188>
   15fbc:	add	r9, r0, #1
   15fc0:	movw	r3, #37280	; 0x91a0
   15fc4:	movt	r3, #2
   15fc8:	cmp	r6, r3
   15fcc:	str	r9, [r5]
   15fd0:	beq	15fdc <__assert_fail@plt+0x5154>
   15fd4:	mov	r0, r6
   15fd8:	bl	12434 <__assert_fail@plt+0x15ac>
   15fdc:	mov	r0, r9
   15fe0:	bl	167f0 <__assert_fail@plt+0x5968>
   15fe4:	ldr	r3, [r4, #16]
   15fe8:	mov	r2, sl
   15fec:	mov	r1, r9
   15ff0:	mov	r6, r0
   15ff4:	ldr	lr, [r4, #56]	; 0x38
   15ff8:	ldr	ip, [r4, #60]	; 0x3c
   15ffc:	str	r0, [r5, #4]
   16000:	stm	sp, {r3, r7, fp, lr}
   16004:	mvn	r3, #0
   16008:	str	ip, [sp, #16]
   1600c:	bl	12788 <__assert_fail@plt+0x1900>
   16010:	ldr	r3, [sp, #28]
   16014:	mov	r0, r6
   16018:	str	r3, [r8]
   1601c:	add	sp, sp, #44	; 0x2c
   16020:	ldrd	r4, [sp]
   16024:	ldrd	r6, [sp, #8]
   16028:	ldrd	r8, [sp, #16]
   1602c:	ldrd	sl, [sp, #24]
   16030:	add	sp, sp, #32
   16034:	pop	{pc}		; (ldr pc, [sp], #4)
   16038:	mov	r0, #8
   1603c:	mvn	r3, #-2147483648	; 0x80000000
   16040:	add	r1, sp, #36	; 0x24
   16044:	str	r0, [sp]
   16048:	mov	r0, #0
   1604c:	bl	16a94 <__assert_fail@plt+0x5c0c>
   16050:	ldrd	r2, [r4, #8]
   16054:	mov	r5, r0
   16058:	str	r0, [r4]
   1605c:	strd	r2, [r0]
   16060:	b	15f4c <__assert_fail@plt+0x50c4>
   16064:	andeq	r9, r2, r8, lsl #2
   16068:	cmp	r1, #0
   1606c:	strd	r4, [sp, #-16]!
   16070:	mov	ip, r3
   16074:	str	r6, [sp, #8]
   16078:	mov	r4, r0
   1607c:	str	lr, [sp, #12]
   16080:	sub	sp, sp, #32
   16084:	ldr	r5, [sp, #48]	; 0x30
   16088:	ldr	r6, [sp, #52]	; 0x34
   1608c:	beq	161d0 <__assert_fail@plt+0x5348>
   16090:	mov	r3, r1
   16094:	mov	r1, #1
   16098:	stm	sp, {r2, ip}
   1609c:	movw	r2, #31812	; 0x7c44
   160a0:	movt	r2, #1
   160a4:	bl	10de0 <__fprintf_chk@plt>
   160a8:	mov	r2, #5
   160ac:	movw	r1, #31832	; 0x7c58
   160b0:	movt	r1, #1
   160b4:	mov	r0, #0
   160b8:	bl	10ccc <dcgettext@plt>
   160bc:	movw	ip, #2022	; 0x7e6
   160c0:	mov	r3, r0
   160c4:	mov	r1, #1
   160c8:	movw	r2, #32560	; 0x7f30
   160cc:	movt	r2, #1
   160d0:	mov	r0, r4
   160d4:	str	ip, [sp]
   160d8:	bl	10de0 <__fprintf_chk@plt>
   160dc:	mov	r1, r4
   160e0:	mov	r0, #10
   160e4:	bl	10cc0 <fputc_unlocked@plt>
   160e8:	mov	r2, #5
   160ec:	movw	r1, #31836	; 0x7c5c
   160f0:	movt	r1, #1
   160f4:	mov	r0, #0
   160f8:	bl	10ccc <dcgettext@plt>
   160fc:	mov	r2, r0
   16100:	mov	r1, #1
   16104:	movw	r3, #32008	; 0x7d08
   16108:	movt	r3, #1
   1610c:	mov	r0, r4
   16110:	bl	10de0 <__fprintf_chk@plt>
   16114:	mov	r1, r4
   16118:	mov	r0, #10
   1611c:	bl	10cc0 <fputc_unlocked@plt>
   16120:	cmp	r6, #9
   16124:	ldrls	pc, [pc, r6, lsl #2]
   16128:	b	1643c <__assert_fail@plt+0x55b4>
   1612c:			; <UNDEFINED> instruction: 0x000161bc
   16130:	andeq	r6, r1, ip, ror #3
   16134:	andeq	r6, r1, r8, lsr #4
   16138:	andeq	r6, r1, r8, ror #4
   1613c:			; <UNDEFINED> instruction: 0x000162b0
   16140:	andeq	r6, r1, r8, ror #5
   16144:	andeq	r6, r1, r0, lsr r3
   16148:	andeq	r6, r1, r4, lsl #7
   1614c:	ldrdeq	r6, [r1], -ip
   16150:	andeq	r6, r1, r4, asr r1
   16154:	movw	r1, #32312	; 0x7e38
   16158:	movt	r1, #1
   1615c:	mov	r2, #5
   16160:	mov	r0, #0
   16164:	bl	10ccc <dcgettext@plt>
   16168:	ldr	lr, [r5, #4]
   1616c:	mov	r2, r0
   16170:	mov	r1, #1
   16174:	mov	r0, r4
   16178:	ldr	r3, [r5, #8]
   1617c:	ldr	ip, [r5, #32]
   16180:	str	lr, [sp]
   16184:	ldr	lr, [r5, #12]
   16188:	str	ip, [sp, #28]
   1618c:	ldr	ip, [r5, #28]
   16190:	str	r3, [sp, #4]
   16194:	ldr	r3, [r5, #16]
   16198:	str	lr, [sp, #8]
   1619c:	ldr	lr, [r5, #20]
   161a0:	str	ip, [sp, #24]
   161a4:	ldr	ip, [r5, #24]
   161a8:	str	r3, [sp, #12]
   161ac:	ldr	r3, [r5]
   161b0:	str	lr, [sp, #16]
   161b4:	str	ip, [sp, #20]
   161b8:	bl	10de0 <__fprintf_chk@plt>
   161bc:	add	sp, sp, #32
   161c0:	ldrd	r4, [sp]
   161c4:	ldr	r6, [sp, #8]
   161c8:	add	sp, sp, #12
   161cc:	pop	{pc}		; (ldr pc, [sp], #4)
   161d0:	mov	r3, r2
   161d4:	mov	r1, #1
   161d8:	str	ip, [sp]
   161dc:	movw	r2, #31824	; 0x7c50
   161e0:	movt	r2, #1
   161e4:	bl	10de0 <__fprintf_chk@plt>
   161e8:	b	160a8 <__assert_fail@plt+0x5220>
   161ec:	mov	r2, #5
   161f0:	movw	r1, #32044	; 0x7d2c
   161f4:	movt	r1, #1
   161f8:	mov	r0, #0
   161fc:	bl	10ccc <dcgettext@plt>
   16200:	ldr	r3, [r5]
   16204:	mov	r2, r0
   16208:	mov	r1, #1
   1620c:	mov	r0, r4
   16210:	add	sp, sp, #32
   16214:	ldrd	r4, [sp]
   16218:	ldr	r6, [sp, #8]
   1621c:	ldr	lr, [sp, #12]
   16220:	add	sp, sp, #16
   16224:	b	10de0 <__fprintf_chk@plt>
   16228:	mov	r2, #5
   1622c:	movw	r1, #32060	; 0x7d3c
   16230:	movt	r1, #1
   16234:	mov	r0, #0
   16238:	bl	10ccc <dcgettext@plt>
   1623c:	ldm	r5, {r3, ip}
   16240:	mov	r2, r0
   16244:	mov	r1, #1
   16248:	mov	r0, r4
   1624c:	str	ip, [sp, #48]	; 0x30
   16250:	add	sp, sp, #32
   16254:	ldrd	r4, [sp]
   16258:	ldr	r6, [sp, #8]
   1625c:	ldr	lr, [sp, #12]
   16260:	add	sp, sp, #16
   16264:	b	10de0 <__fprintf_chk@plt>
   16268:	mov	r2, #5
   1626c:	movw	r1, #32084	; 0x7d54
   16270:	movt	r1, #1
   16274:	mov	r0, #0
   16278:	bl	10ccc <dcgettext@plt>
   1627c:	ldm	r5, {r3, lr}
   16280:	mov	r2, r0
   16284:	mov	r1, #1
   16288:	mov	r0, r4
   1628c:	ldr	ip, [r5, #8]
   16290:	str	lr, [sp, #48]	; 0x30
   16294:	str	ip, [sp, #52]	; 0x34
   16298:	add	sp, sp, #32
   1629c:	ldrd	r4, [sp]
   162a0:	ldr	r6, [sp, #8]
   162a4:	ldr	lr, [sp, #12]
   162a8:	add	sp, sp, #16
   162ac:	b	10de0 <__fprintf_chk@plt>
   162b0:	mov	r2, #5
   162b4:	movw	r1, #32112	; 0x7d70
   162b8:	movt	r1, #1
   162bc:	mov	r0, #0
   162c0:	bl	10ccc <dcgettext@plt>
   162c4:	ldmib	r5, {r3, ip, lr}
   162c8:	mov	r2, r0
   162cc:	mov	r1, #1
   162d0:	mov	r0, r4
   162d4:	str	r3, [sp]
   162d8:	ldr	r3, [r5]
   162dc:	stmib	sp, {ip, lr}
   162e0:	bl	10de0 <__fprintf_chk@plt>
   162e4:	b	161bc <__assert_fail@plt+0x5334>
   162e8:	mov	r2, #5
   162ec:	movw	r1, #32144	; 0x7d90
   162f0:	movt	r1, #1
   162f4:	mov	r0, #0
   162f8:	bl	10ccc <dcgettext@plt>
   162fc:	ldmib	r5, {ip, lr}
   16300:	mov	r2, r0
   16304:	mov	r1, #1
   16308:	mov	r0, r4
   1630c:	ldr	r3, [r5, #16]
   16310:	str	ip, [sp]
   16314:	ldr	ip, [r5, #12]
   16318:	str	r3, [sp, #12]
   1631c:	ldr	r3, [r5]
   16320:	str	lr, [sp, #4]
   16324:	str	ip, [sp, #8]
   16328:	bl	10de0 <__fprintf_chk@plt>
   1632c:	b	161bc <__assert_fail@plt+0x5334>
   16330:	mov	r2, #5
   16334:	movw	r1, #32180	; 0x7db4
   16338:	movt	r1, #1
   1633c:	mov	r0, #0
   16340:	bl	10ccc <dcgettext@plt>
   16344:	ldr	lr, [r5, #4]
   16348:	mov	r2, r0
   1634c:	mov	r1, #1
   16350:	mov	r0, r4
   16354:	ldr	r3, [r5, #8]
   16358:	ldr	ip, [r5, #20]
   1635c:	str	lr, [sp]
   16360:	ldr	lr, [r5, #12]
   16364:	str	ip, [sp, #16]
   16368:	ldr	ip, [r5, #16]
   1636c:	str	r3, [sp, #4]
   16370:	ldr	r3, [r5]
   16374:	str	lr, [sp, #8]
   16378:	str	ip, [sp, #12]
   1637c:	bl	10de0 <__fprintf_chk@plt>
   16380:	b	161bc <__assert_fail@plt+0x5334>
   16384:	mov	r2, #5
   16388:	movw	r1, #32220	; 0x7ddc
   1638c:	movt	r1, #1
   16390:	mov	r0, #0
   16394:	bl	10ccc <dcgettext@plt>
   16398:	ldmib	r5, {r3, ip}
   1639c:	mov	r2, r0
   163a0:	mov	r1, #1
   163a4:	mov	r0, r4
   163a8:	ldr	lr, [r5, #24]
   163ac:	str	r3, [sp]
   163b0:	ldr	r3, [r5, #12]
   163b4:	str	lr, [sp, #20]
   163b8:	ldr	lr, [r5, #20]
   163bc:	str	ip, [sp, #4]
   163c0:	ldr	ip, [r5, #16]
   163c4:	str	r3, [sp, #8]
   163c8:	ldr	r3, [r5]
   163cc:	str	ip, [sp, #12]
   163d0:	str	lr, [sp, #16]
   163d4:	bl	10de0 <__fprintf_chk@plt>
   163d8:	b	161bc <__assert_fail@plt+0x5334>
   163dc:	mov	r2, #5
   163e0:	movw	r1, #32264	; 0x7e08
   163e4:	movt	r1, #1
   163e8:	mov	r0, #0
   163ec:	bl	10ccc <dcgettext@plt>
   163f0:	ldmib	r5, {ip, lr}
   163f4:	mov	r2, r0
   163f8:	mov	r1, #1
   163fc:	mov	r0, r4
   16400:	ldr	r3, [r5, #28]
   16404:	str	ip, [sp]
   16408:	ldr	ip, [r5, #12]
   1640c:	str	r3, [sp, #24]
   16410:	ldr	r3, [r5, #24]
   16414:	str	lr, [sp, #4]
   16418:	ldr	lr, [r5, #16]
   1641c:	str	ip, [sp, #8]
   16420:	ldr	ip, [r5, #20]
   16424:	str	r3, [sp, #20]
   16428:	ldr	r3, [r5]
   1642c:	str	lr, [sp, #12]
   16430:	str	ip, [sp, #16]
   16434:	bl	10de0 <__fprintf_chk@plt>
   16438:	b	161bc <__assert_fail@plt+0x5334>
   1643c:	movw	r1, #32364	; 0x7e6c
   16440:	movt	r1, #1
   16444:	b	1615c <__assert_fail@plt+0x52d4>
   16448:	strd	r4, [sp, #-12]!
   1644c:	str	lr, [sp, #8]
   16450:	sub	sp, sp, #12
   16454:	ldr	r5, [sp, #24]
   16458:	ldr	ip, [r5]
   1645c:	cmp	ip, #0
   16460:	beq	1647c <__assert_fail@plt+0x55f4>
   16464:	mov	lr, r5
   16468:	mov	ip, #0
   1646c:	ldr	r4, [lr, #4]!
   16470:	add	ip, ip, #1
   16474:	cmp	r4, #0
   16478:	bne	1646c <__assert_fail@plt+0x55e4>
   1647c:	stm	sp, {r5, ip}
   16480:	bl	16068 <__assert_fail@plt+0x51e0>
   16484:	add	sp, sp, #12
   16488:	ldrd	r4, [sp]
   1648c:	add	sp, sp, #8
   16490:	pop	{pc}		; (ldr pc, [sp], #4)
   16494:	push	{lr}		; (str lr, [sp, #-4]!)
   16498:	sub	sp, sp, #52	; 0x34
   1649c:	ldr	ip, [sp, #56]	; 0x38
   164a0:	ldr	lr, [ip]
   164a4:	cmp	lr, #0
   164a8:	str	lr, [sp, #8]
   164ac:	beq	16544 <__assert_fail@plt+0x56bc>
   164b0:	ldr	lr, [ip, #4]
   164b4:	cmp	lr, #0
   164b8:	str	lr, [sp, #12]
   164bc:	beq	16558 <__assert_fail@plt+0x56d0>
   164c0:	ldr	lr, [ip, #8]
   164c4:	cmp	lr, #0
   164c8:	str	lr, [sp, #16]
   164cc:	beq	16560 <__assert_fail@plt+0x56d8>
   164d0:	ldr	lr, [ip, #12]
   164d4:	cmp	lr, #0
   164d8:	str	lr, [sp, #20]
   164dc:	beq	16568 <__assert_fail@plt+0x56e0>
   164e0:	ldr	lr, [ip, #16]
   164e4:	cmp	lr, #0
   164e8:	str	lr, [sp, #24]
   164ec:	beq	16570 <__assert_fail@plt+0x56e8>
   164f0:	ldr	lr, [ip, #20]
   164f4:	cmp	lr, #0
   164f8:	str	lr, [sp, #28]
   164fc:	beq	16578 <__assert_fail@plt+0x56f0>
   16500:	ldr	lr, [ip, #24]
   16504:	cmp	lr, #0
   16508:	str	lr, [sp, #32]
   1650c:	beq	16580 <__assert_fail@plt+0x56f8>
   16510:	ldr	lr, [ip, #28]
   16514:	cmp	lr, #0
   16518:	str	lr, [sp, #36]	; 0x24
   1651c:	beq	16588 <__assert_fail@plt+0x5700>
   16520:	ldr	lr, [ip, #32]
   16524:	cmp	lr, #0
   16528:	str	lr, [sp, #40]	; 0x28
   1652c:	beq	16590 <__assert_fail@plt+0x5708>
   16530:	ldr	ip, [ip, #36]	; 0x24
   16534:	cmp	ip, #0
   16538:	str	ip, [sp, #44]	; 0x2c
   1653c:	movne	lr, #10
   16540:	moveq	lr, #9
   16544:	add	ip, sp, #8
   16548:	stm	sp, {ip, lr}
   1654c:	bl	16068 <__assert_fail@plt+0x51e0>
   16550:	add	sp, sp, #52	; 0x34
   16554:	pop	{pc}		; (ldr pc, [sp], #4)
   16558:	mov	lr, #1
   1655c:	b	16544 <__assert_fail@plt+0x56bc>
   16560:	mov	lr, #2
   16564:	b	16544 <__assert_fail@plt+0x56bc>
   16568:	mov	lr, #3
   1656c:	b	16544 <__assert_fail@plt+0x56bc>
   16570:	mov	lr, #4
   16574:	b	16544 <__assert_fail@plt+0x56bc>
   16578:	mov	lr, #5
   1657c:	b	16544 <__assert_fail@plt+0x56bc>
   16580:	mov	lr, #6
   16584:	b	16544 <__assert_fail@plt+0x56bc>
   16588:	mov	lr, #7
   1658c:	b	16544 <__assert_fail@plt+0x56bc>
   16590:	mov	lr, #8
   16594:	b	16544 <__assert_fail@plt+0x56bc>
   16598:	push	{r3}		; (str r3, [sp, #-4]!)
   1659c:	push	{lr}		; (str lr, [sp, #-4]!)
   165a0:	sub	sp, sp, #56	; 0x38
   165a4:	ldr	ip, [sp, #64]	; 0x40
   165a8:	add	r3, sp, #64	; 0x40
   165ac:	str	r3, [sp, #12]
   165b0:	cmp	ip, #0
   165b4:	str	ip, [sp, #16]
   165b8:	beq	16650 <__assert_fail@plt+0x57c8>
   165bc:	ldr	ip, [sp, #68]	; 0x44
   165c0:	cmp	ip, #0
   165c4:	str	ip, [sp, #20]
   165c8:	beq	16674 <__assert_fail@plt+0x57ec>
   165cc:	ldr	ip, [sp, #72]	; 0x48
   165d0:	cmp	ip, #0
   165d4:	str	ip, [sp, #24]
   165d8:	beq	1667c <__assert_fail@plt+0x57f4>
   165dc:	ldr	ip, [sp, #76]	; 0x4c
   165e0:	cmp	ip, #0
   165e4:	str	ip, [sp, #28]
   165e8:	beq	16684 <__assert_fail@plt+0x57fc>
   165ec:	ldr	ip, [sp, #80]	; 0x50
   165f0:	cmp	ip, #0
   165f4:	str	ip, [sp, #32]
   165f8:	beq	1668c <__assert_fail@plt+0x5804>
   165fc:	ldr	ip, [sp, #84]	; 0x54
   16600:	cmp	ip, #0
   16604:	str	ip, [sp, #36]	; 0x24
   16608:	beq	16694 <__assert_fail@plt+0x580c>
   1660c:	ldr	ip, [sp, #88]	; 0x58
   16610:	cmp	ip, #0
   16614:	str	ip, [sp, #40]	; 0x28
   16618:	beq	1669c <__assert_fail@plt+0x5814>
   1661c:	ldr	ip, [sp, #92]	; 0x5c
   16620:	cmp	ip, #0
   16624:	str	ip, [sp, #44]	; 0x2c
   16628:	beq	166a4 <__assert_fail@plt+0x581c>
   1662c:	ldr	ip, [sp, #96]	; 0x60
   16630:	cmp	ip, #0
   16634:	str	ip, [sp, #48]	; 0x30
   16638:	beq	166ac <__assert_fail@plt+0x5824>
   1663c:	ldr	r3, [sp, #100]	; 0x64
   16640:	cmp	r3, #0
   16644:	str	r3, [sp, #52]	; 0x34
   16648:	movne	ip, #10
   1664c:	moveq	ip, #9
   16650:	ldr	r3, [sp, #60]	; 0x3c
   16654:	add	lr, sp, #16
   16658:	str	lr, [sp]
   1665c:	str	ip, [sp, #4]
   16660:	bl	16068 <__assert_fail@plt+0x51e0>
   16664:	add	sp, sp, #56	; 0x38
   16668:	pop	{lr}		; (ldr lr, [sp], #4)
   1666c:	add	sp, sp, #4
   16670:	bx	lr
   16674:	mov	ip, #1
   16678:	b	16650 <__assert_fail@plt+0x57c8>
   1667c:	mov	ip, #2
   16680:	b	16650 <__assert_fail@plt+0x57c8>
   16684:	mov	ip, #3
   16688:	b	16650 <__assert_fail@plt+0x57c8>
   1668c:	mov	ip, #4
   16690:	b	16650 <__assert_fail@plt+0x57c8>
   16694:	mov	ip, #5
   16698:	b	16650 <__assert_fail@plt+0x57c8>
   1669c:	mov	ip, #6
   166a0:	b	16650 <__assert_fail@plt+0x57c8>
   166a4:	mov	ip, #7
   166a8:	b	16650 <__assert_fail@plt+0x57c8>
   166ac:	mov	ip, #8
   166b0:	b	16650 <__assert_fail@plt+0x57c8>
   166b4:	movw	r3, #37196	; 0x914c
   166b8:	movt	r3, #2
   166bc:	str	r4, [sp, #-8]!
   166c0:	mov	r0, #10
   166c4:	ldr	r1, [r3]
   166c8:	str	lr, [sp, #4]
   166cc:	bl	10cc0 <fputc_unlocked@plt>
   166d0:	mov	r2, #5
   166d4:	movw	r1, #32424	; 0x7ea8
   166d8:	movt	r1, #1
   166dc:	mov	r0, #0
   166e0:	bl	10ccc <dcgettext@plt>
   166e4:	mov	r1, r0
   166e8:	movw	r2, #32444	; 0x7ebc
   166ec:	movt	r2, #1
   166f0:	mov	r0, #1
   166f4:	bl	10dc8 <__printf_chk@plt>
   166f8:	mov	r2, #5
   166fc:	movw	r1, #32468	; 0x7ed4
   16700:	movt	r1, #1
   16704:	mov	r0, #0
   16708:	bl	10ccc <dcgettext@plt>
   1670c:	mov	r1, r0
   16710:	movw	r3, #30200	; 0x75f8
   16714:	movt	r3, #1
   16718:	movw	r2, #30240	; 0x7620
   1671c:	movt	r2, #1
   16720:	mov	r0, #1
   16724:	bl	10dc8 <__printf_chk@plt>
   16728:	mov	r2, #5
   1672c:	movw	r1, #32488	; 0x7ee8
   16730:	movt	r1, #1
   16734:	mov	r0, #0
   16738:	bl	10ccc <dcgettext@plt>
   1673c:	mov	r1, r0
   16740:	movw	r2, #32528	; 0x7f10
   16744:	movt	r2, #1
   16748:	mov	r0, #1
   1674c:	ldr	r4, [sp]
   16750:	ldr	lr, [sp, #4]
   16754:	add	sp, sp, #8
   16758:	b	10dc8 <__printf_chk@plt>
   1675c:	strd	r4, [sp, #-16]!
   16760:	mov	r4, r0
   16764:	mov	r5, r2
   16768:	str	r6, [sp, #8]
   1676c:	mov	r6, r1
   16770:	str	lr, [sp, #12]
   16774:	bl	16ff0 <__assert_fail@plt+0x6168>
   16778:	cmp	r0, #0
   1677c:	beq	16790 <__assert_fail@plt+0x5908>
   16780:	ldrd	r4, [sp]
   16784:	ldr	r6, [sp, #8]
   16788:	add	sp, sp, #12
   1678c:	pop	{pc}		; (ldr pc, [sp], #4)
   16790:	cmp	r4, #0
   16794:	beq	167a4 <__assert_fail@plt+0x591c>
   16798:	cmp	r6, #0
   1679c:	cmpne	r5, #0
   167a0:	beq	16780 <__assert_fail@plt+0x58f8>
   167a4:	bl	16d60 <__assert_fail@plt+0x5ed8>
   167a8:	str	r4, [sp, #-8]!
   167ac:	str	lr, [sp, #4]
   167b0:	bl	16e18 <__assert_fail@plt+0x5f90>
   167b4:	cmp	r0, #0
   167b8:	beq	167c8 <__assert_fail@plt+0x5940>
   167bc:	ldr	r4, [sp]
   167c0:	add	sp, sp, #4
   167c4:	pop	{pc}		; (ldr pc, [sp], #4)
   167c8:	bl	16d60 <__assert_fail@plt+0x5ed8>
   167cc:	str	r4, [sp, #-8]!
   167d0:	str	lr, [sp, #4]
   167d4:	bl	16e18 <__assert_fail@plt+0x5f90>
   167d8:	cmp	r0, #0
   167dc:	beq	167ec <__assert_fail@plt+0x5964>
   167e0:	ldr	r4, [sp]
   167e4:	add	sp, sp, #4
   167e8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ec:	bl	16d60 <__assert_fail@plt+0x5ed8>
   167f0:	str	r4, [sp, #-8]!
   167f4:	str	lr, [sp, #4]
   167f8:	bl	16e18 <__assert_fail@plt+0x5f90>
   167fc:	cmp	r0, #0
   16800:	beq	16810 <__assert_fail@plt+0x5988>
   16804:	ldr	r4, [sp]
   16808:	add	sp, sp, #4
   1680c:	pop	{pc}		; (ldr pc, [sp], #4)
   16810:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16814:	strd	r4, [sp, #-16]!
   16818:	mov	r5, r0
   1681c:	mov	r4, r1
   16820:	str	r6, [sp, #8]
   16824:	str	lr, [sp, #12]
   16828:	bl	16e54 <__assert_fail@plt+0x5fcc>
   1682c:	cmp	r0, #0
   16830:	beq	16844 <__assert_fail@plt+0x59bc>
   16834:	ldrd	r4, [sp]
   16838:	ldr	r6, [sp, #8]
   1683c:	add	sp, sp, #12
   16840:	pop	{pc}		; (ldr pc, [sp], #4)
   16844:	adds	r4, r4, #0
   16848:	movne	r4, #1
   1684c:	cmp	r5, #0
   16850:	moveq	r4, #1
   16854:	cmp	r4, #0
   16858:	beq	16834 <__assert_fail@plt+0x59ac>
   1685c:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16860:	cmp	r1, #0
   16864:	orreq	r1, r1, #1
   16868:	str	r4, [sp, #-8]!
   1686c:	str	lr, [sp, #4]
   16870:	bl	16e54 <__assert_fail@plt+0x5fcc>
   16874:	cmp	r0, #0
   16878:	beq	16888 <__assert_fail@plt+0x5a00>
   1687c:	ldr	r4, [sp]
   16880:	add	sp, sp, #4
   16884:	pop	{pc}		; (ldr pc, [sp], #4)
   16888:	bl	16d60 <__assert_fail@plt+0x5ed8>
   1688c:	strd	r4, [sp, #-16]!
   16890:	mov	r4, r0
   16894:	mov	r5, r2
   16898:	str	r6, [sp, #8]
   1689c:	mov	r6, r1
   168a0:	str	lr, [sp, #12]
   168a4:	bl	16ff0 <__assert_fail@plt+0x6168>
   168a8:	cmp	r0, #0
   168ac:	beq	168c0 <__assert_fail@plt+0x5a38>
   168b0:	ldrd	r4, [sp]
   168b4:	ldr	r6, [sp, #8]
   168b8:	add	sp, sp, #12
   168bc:	pop	{pc}		; (ldr pc, [sp], #4)
   168c0:	cmp	r4, #0
   168c4:	beq	168d4 <__assert_fail@plt+0x5a4c>
   168c8:	cmp	r6, #0
   168cc:	cmpne	r5, #0
   168d0:	beq	168b0 <__assert_fail@plt+0x5a28>
   168d4:	bl	16d60 <__assert_fail@plt+0x5ed8>
   168d8:	cmp	r2, #0
   168dc:	cmpne	r1, #0
   168e0:	str	r4, [sp, #-8]!
   168e4:	moveq	r2, #1
   168e8:	str	lr, [sp, #4]
   168ec:	moveq	r1, r2
   168f0:	bl	16ff0 <__assert_fail@plt+0x6168>
   168f4:	cmp	r0, #0
   168f8:	beq	16908 <__assert_fail@plt+0x5a80>
   168fc:	ldr	r4, [sp]
   16900:	add	sp, sp, #4
   16904:	pop	{pc}		; (ldr pc, [sp], #4)
   16908:	bl	16d60 <__assert_fail@plt+0x5ed8>
   1690c:	mov	r2, r1
   16910:	mov	r1, r0
   16914:	str	r4, [sp, #-8]!
   16918:	mov	r0, #0
   1691c:	str	lr, [sp, #4]
   16920:	bl	16ff0 <__assert_fail@plt+0x6168>
   16924:	cmp	r0, #0
   16928:	beq	16938 <__assert_fail@plt+0x5ab0>
   1692c:	ldr	r4, [sp]
   16930:	add	sp, sp, #4
   16934:	pop	{pc}		; (ldr pc, [sp], #4)
   16938:	bl	16d60 <__assert_fail@plt+0x5ed8>
   1693c:	cmp	r1, #0
   16940:	cmpne	r0, #0
   16944:	str	r4, [sp, #-8]!
   16948:	moveq	r2, #1
   1694c:	movne	r2, r1
   16950:	str	lr, [sp, #4]
   16954:	movne	r1, r0
   16958:	moveq	r1, r2
   1695c:	mov	r0, #0
   16960:	bl	16ff0 <__assert_fail@plt+0x6168>
   16964:	cmp	r0, #0
   16968:	beq	16978 <__assert_fail@plt+0x5af0>
   1696c:	ldr	r4, [sp]
   16970:	add	sp, sp, #4
   16974:	pop	{pc}		; (ldr pc, [sp], #4)
   16978:	bl	16d60 <__assert_fail@plt+0x5ed8>
   1697c:	cmp	r0, #0
   16980:	strd	r4, [sp, #-16]!
   16984:	mov	r5, r1
   16988:	ldr	r4, [r1]
   1698c:	str	r6, [sp, #8]
   16990:	str	lr, [sp, #12]
   16994:	beq	169dc <__assert_fail@plt+0x5b54>
   16998:	lsr	r3, r4, #1
   1699c:	add	r3, r3, #1
   169a0:	adds	r4, r4, r3
   169a4:	bcs	169d8 <__assert_fail@plt+0x5b50>
   169a8:	mov	r2, #1
   169ac:	mov	r1, r4
   169b0:	bl	16ff0 <__assert_fail@plt+0x6168>
   169b4:	cmp	r0, #0
   169b8:	beq	169d0 <__assert_fail@plt+0x5b48>
   169bc:	ldr	r6, [sp, #8]
   169c0:	str	r4, [r5]
   169c4:	ldrd	r4, [sp]
   169c8:	add	sp, sp, #12
   169cc:	pop	{pc}		; (ldr pc, [sp], #4)
   169d0:	cmp	r4, #0
   169d4:	beq	169bc <__assert_fail@plt+0x5b34>
   169d8:	bl	16d60 <__assert_fail@plt+0x5ed8>
   169dc:	cmp	r4, #0
   169e0:	mov	r2, #1
   169e4:	moveq	r4, #64	; 0x40
   169e8:	mov	r1, r4
   169ec:	bl	16ff0 <__assert_fail@plt+0x6168>
   169f0:	cmp	r0, #0
   169f4:	bne	169bc <__assert_fail@plt+0x5b34>
   169f8:	b	169d8 <__assert_fail@plt+0x5b50>
   169fc:	cmp	r0, #0
   16a00:	strd	r4, [sp, #-16]!
   16a04:	mov	r5, r1
   16a08:	ldr	r4, [r1]
   16a0c:	str	r6, [sp, #8]
   16a10:	mov	r6, r2
   16a14:	str	lr, [sp, #12]
   16a18:	beq	16a60 <__assert_fail@plt+0x5bd8>
   16a1c:	lsr	r3, r4, #1
   16a20:	add	r3, r3, #1
   16a24:	adds	r4, r4, r3
   16a28:	bcs	16a5c <__assert_fail@plt+0x5bd4>
   16a2c:	mov	r1, r4
   16a30:	bl	16ff0 <__assert_fail@plt+0x6168>
   16a34:	cmp	r0, #0
   16a38:	beq	16a50 <__assert_fail@plt+0x5bc8>
   16a3c:	ldr	r6, [sp, #8]
   16a40:	str	r4, [r5]
   16a44:	ldrd	r4, [sp]
   16a48:	add	sp, sp, #12
   16a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a50:	cmp	r4, #0
   16a54:	cmpne	r6, #0
   16a58:	beq	16a3c <__assert_fail@plt+0x5bb4>
   16a5c:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16a60:	cmp	r4, #0
   16a64:	bne	16a78 <__assert_fail@plt+0x5bf0>
   16a68:	mov	r4, #64	; 0x40
   16a6c:	udiv	r4, r4, r2
   16a70:	cmp	r2, #64	; 0x40
   16a74:	addhi	r4, r4, #1
   16a78:	mov	r2, r6
   16a7c:	mov	r1, r4
   16a80:	mov	r0, #0
   16a84:	bl	16ff0 <__assert_fail@plt+0x6168>
   16a88:	cmp	r0, #0
   16a8c:	bne	16a3c <__assert_fail@plt+0x5bb4>
   16a90:	b	16a5c <__assert_fail@plt+0x5bd4>
   16a94:	ldr	ip, [r1]
   16a98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a9c:	strd	r6, [sp, #8]
   16aa0:	mov	r7, r1
   16aa4:	mov	r6, r0
   16aa8:	str	r8, [sp, #16]
   16aac:	mvn	r8, r3
   16ab0:	lsr	r8, r8, #31
   16ab4:	str	lr, [sp, #20]
   16ab8:	asr	r1, ip, #1
   16abc:	ldr	lr, [sp, #24]
   16ac0:	adds	r4, ip, r1
   16ac4:	mvnvs	r4, #-2147483648	; 0x80000000
   16ac8:	cmp	r3, r4
   16acc:	movge	r1, #0
   16ad0:	andlt	r1, r8, #1
   16ad4:	cmp	r1, #0
   16ad8:	movne	r4, r3
   16adc:	smull	r0, r1, r4, lr
   16ae0:	cmp	r1, r0, asr #31
   16ae4:	bne	16b94 <__assert_fail@plt+0x5d0c>
   16ae8:	cmp	r0, #63	; 0x3f
   16aec:	mov	r5, r0
   16af0:	ble	16b60 <__assert_fail@plt+0x5cd8>
   16af4:	cmp	r6, #0
   16af8:	sub	r1, r4, ip
   16afc:	streq	r6, [r7]
   16b00:	cmp	r1, r2
   16b04:	bge	16b34 <__assert_fail@plt+0x5cac>
   16b08:	adds	r4, ip, r2
   16b0c:	bvs	16b90 <__assert_fail@plt+0x5d08>
   16b10:	cmp	r4, r3
   16b14:	movle	r3, #0
   16b18:	andgt	r3, r8, #1
   16b1c:	cmp	r3, #0
   16b20:	bne	16b90 <__assert_fail@plt+0x5d08>
   16b24:	smull	r0, r1, r4, lr
   16b28:	cmp	r1, r0, asr #31
   16b2c:	mov	r5, r0
   16b30:	bne	16b90 <__assert_fail@plt+0x5d08>
   16b34:	mov	r1, r5
   16b38:	mov	r0, r6
   16b3c:	bl	16e54 <__assert_fail@plt+0x5fcc>
   16b40:	cmp	r0, #0
   16b44:	beq	16b74 <__assert_fail@plt+0x5cec>
   16b48:	ldr	r8, [sp, #16]
   16b4c:	str	r4, [r7]
   16b50:	ldrd	r4, [sp]
   16b54:	ldrd	r6, [sp, #8]
   16b58:	add	sp, sp, #20
   16b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b60:	mov	r0, #64	; 0x40
   16b64:	sdiv	r4, r0, lr
   16b68:	mls	r5, lr, r4, r0
   16b6c:	sub	r5, r0, r5
   16b70:	b	16af4 <__assert_fail@plt+0x5c6c>
   16b74:	adds	r5, r5, #0
   16b78:	movne	r5, #1
   16b7c:	cmp	r6, #0
   16b80:	movne	r6, r5
   16b84:	moveq	r6, #1
   16b88:	cmp	r6, #0
   16b8c:	beq	16b48 <__assert_fail@plt+0x5cc0>
   16b90:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16b94:	mvn	r0, #-2147483648	; 0x80000000
   16b98:	b	16b64 <__assert_fail@plt+0x5cdc>
   16b9c:	mov	r1, #1
   16ba0:	str	r4, [sp, #-8]!
   16ba4:	str	lr, [sp, #4]
   16ba8:	bl	16da4 <__assert_fail@plt+0x5f1c>
   16bac:	cmp	r0, #0
   16bb0:	beq	16bc0 <__assert_fail@plt+0x5d38>
   16bb4:	ldr	r4, [sp]
   16bb8:	add	sp, sp, #4
   16bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc0:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16bc4:	mov	r1, #1
   16bc8:	str	r4, [sp, #-8]!
   16bcc:	str	lr, [sp, #4]
   16bd0:	bl	16da4 <__assert_fail@plt+0x5f1c>
   16bd4:	cmp	r0, #0
   16bd8:	beq	16be8 <__assert_fail@plt+0x5d60>
   16bdc:	ldr	r4, [sp]
   16be0:	add	sp, sp, #4
   16be4:	pop	{pc}		; (ldr pc, [sp], #4)
   16be8:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16bec:	str	r4, [sp, #-8]!
   16bf0:	str	lr, [sp, #4]
   16bf4:	bl	16da4 <__assert_fail@plt+0x5f1c>
   16bf8:	cmp	r0, #0
   16bfc:	beq	16c0c <__assert_fail@plt+0x5d84>
   16c00:	ldr	r4, [sp]
   16c04:	add	sp, sp, #4
   16c08:	pop	{pc}		; (ldr pc, [sp], #4)
   16c0c:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16c10:	str	r4, [sp, #-8]!
   16c14:	str	lr, [sp, #4]
   16c18:	bl	16da4 <__assert_fail@plt+0x5f1c>
   16c1c:	cmp	r0, #0
   16c20:	beq	16c30 <__assert_fail@plt+0x5da8>
   16c24:	ldr	r4, [sp]
   16c28:	add	sp, sp, #4
   16c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c30:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16c34:	strd	r4, [sp, #-16]!
   16c38:	mov	r4, r1
   16c3c:	str	r6, [sp, #8]
   16c40:	mov	r6, r0
   16c44:	mov	r0, r1
   16c48:	str	lr, [sp, #12]
   16c4c:	bl	16e18 <__assert_fail@plt+0x5f90>
   16c50:	subs	r5, r0, #0
   16c54:	beq	16c78 <__assert_fail@plt+0x5df0>
   16c58:	mov	r2, r4
   16c5c:	mov	r1, r6
   16c60:	bl	10c9c <memcpy@plt>
   16c64:	mov	r0, r5
   16c68:	ldrd	r4, [sp]
   16c6c:	ldr	r6, [sp, #8]
   16c70:	add	sp, sp, #12
   16c74:	pop	{pc}		; (ldr pc, [sp], #4)
   16c78:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16c7c:	strd	r4, [sp, #-16]!
   16c80:	mov	r4, r1
   16c84:	str	r6, [sp, #8]
   16c88:	mov	r6, r0
   16c8c:	mov	r0, r1
   16c90:	str	lr, [sp, #12]
   16c94:	bl	16e18 <__assert_fail@plt+0x5f90>
   16c98:	subs	r5, r0, #0
   16c9c:	beq	16cc0 <__assert_fail@plt+0x5e38>
   16ca0:	mov	r2, r4
   16ca4:	mov	r1, r6
   16ca8:	bl	10c9c <memcpy@plt>
   16cac:	mov	r0, r5
   16cb0:	ldrd	r4, [sp]
   16cb4:	ldr	r6, [sp, #8]
   16cb8:	add	sp, sp, #12
   16cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc0:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16cc4:	strd	r4, [sp, #-16]!
   16cc8:	mov	r4, r1
   16ccc:	str	r6, [sp, #8]
   16cd0:	mov	r6, r0
   16cd4:	add	r0, r1, #1
   16cd8:	str	lr, [sp, #12]
   16cdc:	bl	16e18 <__assert_fail@plt+0x5f90>
   16ce0:	subs	r5, r0, #0
   16ce4:	beq	16d10 <__assert_fail@plt+0x5e88>
   16ce8:	mov	r3, #0
   16cec:	mov	r1, r6
   16cf0:	mov	r2, r4
   16cf4:	strb	r3, [r5, r4]
   16cf8:	bl	10c9c <memcpy@plt>
   16cfc:	mov	r0, r5
   16d00:	ldrd	r4, [sp]
   16d04:	ldr	r6, [sp, #8]
   16d08:	add	sp, sp, #12
   16d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d10:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16d14:	strd	r4, [sp, #-16]!
   16d18:	str	r6, [sp, #8]
   16d1c:	mov	r6, r0
   16d20:	str	lr, [sp, #12]
   16d24:	bl	10d98 <strlen@plt>
   16d28:	add	r4, r0, #1
   16d2c:	mov	r0, r4
   16d30:	bl	16e18 <__assert_fail@plt+0x5f90>
   16d34:	subs	r5, r0, #0
   16d38:	beq	16d5c <__assert_fail@plt+0x5ed4>
   16d3c:	mov	r2, r4
   16d40:	mov	r1, r6
   16d44:	bl	10c9c <memcpy@plt>
   16d48:	mov	r0, r5
   16d4c:	ldrd	r4, [sp]
   16d50:	ldr	r6, [sp, #8]
   16d54:	add	sp, sp, #12
   16d58:	pop	{pc}		; (ldr pc, [sp], #4)
   16d5c:	bl	16d60 <__assert_fail@plt+0x5ed8>
   16d60:	movw	r3, #37100	; 0x90ec
   16d64:	movt	r3, #2
   16d68:	str	r4, [sp, #-8]!
   16d6c:	ldr	r4, [r3]
   16d70:	mov	r2, #5
   16d74:	movw	r1, #32608	; 0x7f60
   16d78:	movt	r1, #1
   16d7c:	mov	r0, #0
   16d80:	str	lr, [sp, #4]
   16d84:	bl	10ccc <dcgettext@plt>
   16d88:	mov	r3, r0
   16d8c:	movw	r2, #30928	; 0x78d0
   16d90:	movt	r2, #1
   16d94:	mov	r1, #0
   16d98:	mov	r0, r4
   16d9c:	bl	10d38 <error@plt>
   16da0:	bl	10e70 <abort@plt>
   16da4:	cmp	r1, #0
   16da8:	cmpne	r0, #0
   16dac:	beq	16df8 <__assert_fail@plt+0x5f70>
   16db0:	strd	r4, [sp, #-16]!
   16db4:	umull	r4, r5, r0, r1
   16db8:	str	r6, [sp, #8]
   16dbc:	str	lr, [sp, #12]
   16dc0:	adds	r3, r5, #0
   16dc4:	movne	r3, #1
   16dc8:	cmp	r4, #0
   16dcc:	blt	16dd8 <__assert_fail@plt+0x5f50>
   16dd0:	cmp	r3, #0
   16dd4:	beq	16e04 <__assert_fail@plt+0x5f7c>
   16dd8:	bl	10da4 <__errno_location@plt>
   16ddc:	mov	r3, #12
   16de0:	ldrd	r4, [sp]
   16de4:	ldr	r6, [sp, #8]
   16de8:	add	sp, sp, #12
   16dec:	str	r3, [r0]
   16df0:	mov	r0, #0
   16df4:	pop	{pc}		; (ldr pc, [sp], #4)
   16df8:	mov	r1, #1
   16dfc:	mov	r0, r1
   16e00:	b	10c3c <calloc@plt>
   16e04:	ldrd	r4, [sp]
   16e08:	ldr	r6, [sp, #8]
   16e0c:	ldr	lr, [sp, #12]
   16e10:	add	sp, sp, #16
   16e14:	b	10c3c <calloc@plt>
   16e18:	cmp	r0, #0
   16e1c:	beq	16e28 <__assert_fail@plt+0x5fa0>
   16e20:	blt	16e30 <__assert_fail@plt+0x5fa8>
   16e24:	b	10d44 <malloc@plt>
   16e28:	mov	r0, #1
   16e2c:	b	10d44 <malloc@plt>
   16e30:	str	r4, [sp, #-8]!
   16e34:	str	lr, [sp, #4]
   16e38:	bl	10da4 <__errno_location@plt>
   16e3c:	mov	r3, #12
   16e40:	ldr	r4, [sp]
   16e44:	add	sp, sp, #4
   16e48:	str	r3, [r0]
   16e4c:	mov	r0, #0
   16e50:	pop	{pc}		; (ldr pc, [sp], #4)
   16e54:	cmp	r0, #0
   16e58:	beq	16e80 <__assert_fail@plt+0x5ff8>
   16e5c:	cmp	r1, #0
   16e60:	str	r4, [sp, #-8]!
   16e64:	str	lr, [sp, #4]
   16e68:	beq	16e88 <__assert_fail@plt+0x6000>
   16e6c:	blt	16e9c <__assert_fail@plt+0x6014>
   16e70:	ldr	r4, [sp]
   16e74:	ldr	lr, [sp, #4]
   16e78:	add	sp, sp, #8
   16e7c:	b	10cd8 <realloc@plt>
   16e80:	mov	r0, r1
   16e84:	b	16e18 <__assert_fail@plt+0x5f90>
   16e88:	bl	12434 <__assert_fail@plt+0x15ac>
   16e8c:	ldr	r4, [sp]
   16e90:	add	sp, sp, #4
   16e94:	mov	r0, #0
   16e98:	pop	{pc}		; (ldr pc, [sp], #4)
   16e9c:	bl	10da4 <__errno_location@plt>
   16ea0:	mov	r3, #12
   16ea4:	str	r3, [r0]
   16ea8:	b	16e8c <__assert_fail@plt+0x6004>
   16eac:	strd	r4, [sp, #-16]!
   16eb0:	mov	r4, r0
   16eb4:	str	r6, [sp, #8]
   16eb8:	str	lr, [sp, #12]
   16ebc:	bl	10d20 <__fpending@plt>
   16ec0:	ldr	r5, [r4]
   16ec4:	mov	r6, r0
   16ec8:	mov	r0, r4
   16ecc:	bl	12320 <__assert_fail@plt+0x1498>
   16ed0:	mov	r4, r0
   16ed4:	and	r5, r5, #32
   16ed8:	cmp	r5, #0
   16edc:	bne	16f14 <__assert_fail@plt+0x608c>
   16ee0:	cmp	r0, #0
   16ee4:	beq	16f00 <__assert_fail@plt+0x6078>
   16ee8:	cmp	r6, #0
   16eec:	bne	16f2c <__assert_fail@plt+0x60a4>
   16ef0:	bl	10da4 <__errno_location@plt>
   16ef4:	ldr	r4, [r0]
   16ef8:	subs	r4, r4, #9
   16efc:	mvnne	r4, #0
   16f00:	mov	r0, r4
   16f04:	ldrd	r4, [sp]
   16f08:	ldr	r6, [sp, #8]
   16f0c:	add	sp, sp, #12
   16f10:	pop	{pc}		; (ldr pc, [sp], #4)
   16f14:	cmp	r0, #0
   16f18:	bne	16f2c <__assert_fail@plt+0x60a4>
   16f1c:	bl	10da4 <__errno_location@plt>
   16f20:	str	r4, [r0]
   16f24:	mvn	r4, #0
   16f28:	b	16f00 <__assert_fail@plt+0x6078>
   16f2c:	mvn	r4, #0
   16f30:	b	16f00 <__assert_fail@plt+0x6078>
   16f34:	mov	r0, #14
   16f38:	str	r4, [sp, #-8]!
   16f3c:	str	lr, [sp, #4]
   16f40:	bl	10e34 <nl_langinfo@plt>
   16f44:	cmp	r0, #0
   16f48:	beq	16f6c <__assert_fail@plt+0x60e4>
   16f4c:	ldrb	r2, [r0]
   16f50:	movw	r3, #32628	; 0x7f74
   16f54:	movt	r3, #1
   16f58:	ldr	r4, [sp]
   16f5c:	add	sp, sp, #4
   16f60:	cmp	r2, #0
   16f64:	moveq	r0, r3
   16f68:	pop	{pc}		; (ldr pc, [sp], #4)
   16f6c:	ldr	r4, [sp]
   16f70:	add	sp, sp, #4
   16f74:	movw	r0, #32628	; 0x7f74
   16f78:	movt	r0, #1
   16f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f80:	strd	r4, [sp, #-20]!	; 0xffffffec
   16f84:	mov	r5, r2
   16f88:	strd	r6, [sp, #8]
   16f8c:	subs	r6, r0, #0
   16f90:	mov	r7, r1
   16f94:	str	lr, [sp, #16]
   16f98:	sub	sp, sp, #12
   16f9c:	addeq	r6, sp, #4
   16fa0:	mov	r0, r6
   16fa4:	bl	10d2c <mbrtowc@plt>
   16fa8:	cmp	r5, #0
   16fac:	cmnne	r0, #3
   16fb0:	mov	r4, r0
   16fb4:	bhi	16fd0 <__assert_fail@plt+0x6148>
   16fb8:	mov	r0, r4
   16fbc:	add	sp, sp, #12
   16fc0:	ldrd	r4, [sp]
   16fc4:	ldrd	r6, [sp, #8]
   16fc8:	add	sp, sp, #16
   16fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd0:	mov	r0, #0
   16fd4:	bl	17028 <__assert_fail@plt+0x61a0>
   16fd8:	cmp	r0, #0
   16fdc:	bne	16fb8 <__assert_fail@plt+0x6130>
   16fe0:	ldrb	r3, [r7]
   16fe4:	mov	r4, #1
   16fe8:	str	r3, [r6]
   16fec:	b	16fb8 <__assert_fail@plt+0x6130>
   16ff0:	umull	r2, r3, r1, r2
   16ff4:	cmp	r3, #0
   16ff8:	bne	17004 <__assert_fail@plt+0x617c>
   16ffc:	mov	r1, r2
   17000:	b	16e54 <__assert_fail@plt+0x5fcc>
   17004:	str	r4, [sp, #-8]!
   17008:	str	lr, [sp, #4]
   1700c:	bl	10da4 <__errno_location@plt>
   17010:	mov	r3, #12
   17014:	ldr	r4, [sp]
   17018:	add	sp, sp, #4
   1701c:	str	r3, [r0]
   17020:	mov	r0, #0
   17024:	pop	{pc}		; (ldr pc, [sp], #4)
   17028:	push	{lr}		; (str lr, [sp, #-4]!)
   1702c:	sub	sp, sp, #268	; 0x10c
   17030:	movw	r2, #257	; 0x101
   17034:	add	r1, sp, #4
   17038:	bl	17080 <__assert_fail@plt+0x61f8>
   1703c:	cmp	r0, #0
   17040:	movne	r0, #0
   17044:	bne	17078 <__assert_fail@plt+0x61f0>
   17048:	movw	r1, #32636	; 0x7f7c
   1704c:	movt	r1, #1
   17050:	add	r0, sp, #4
   17054:	bl	10c60 <strcmp@plt>
   17058:	cmp	r0, #0
   1705c:	beq	17078 <__assert_fail@plt+0x61f0>
   17060:	add	r0, sp, #4
   17064:	movw	r1, #32640	; 0x7f80
   17068:	movt	r1, #1
   1706c:	bl	10c60 <strcmp@plt>
   17070:	adds	r0, r0, #0
   17074:	movne	r0, #1
   17078:	add	sp, sp, #268	; 0x10c
   1707c:	pop	{pc}		; (ldr pc, [sp], #4)
   17080:	strd	r4, [sp, #-16]!
   17084:	mov	r5, r1
   17088:	mov	r1, #0
   1708c:	mov	r4, r2
   17090:	str	r6, [sp, #8]
   17094:	str	lr, [sp, #12]
   17098:	bl	10e1c <setlocale@plt>
   1709c:	subs	r6, r0, #0
   170a0:	beq	17120 <__assert_fail@plt+0x6298>
   170a4:	bl	10d98 <strlen@plt>
   170a8:	cmp	r4, r0
   170ac:	bhi	170cc <__assert_fail@plt+0x6244>
   170b0:	cmp	r4, #0
   170b4:	moveq	r0, #34	; 0x22
   170b8:	bne	170f0 <__assert_fail@plt+0x6268>
   170bc:	ldrd	r4, [sp]
   170c0:	ldr	r6, [sp, #8]
   170c4:	add	sp, sp, #12
   170c8:	pop	{pc}		; (ldr pc, [sp], #4)
   170cc:	add	r2, r0, #1
   170d0:	mov	r1, r6
   170d4:	mov	r0, r5
   170d8:	bl	10c9c <memcpy@plt>
   170dc:	ldrd	r4, [sp]
   170e0:	mov	r0, #0
   170e4:	ldr	r6, [sp, #8]
   170e8:	add	sp, sp, #12
   170ec:	pop	{pc}		; (ldr pc, [sp], #4)
   170f0:	sub	r4, r4, #1
   170f4:	mov	r1, r6
   170f8:	mov	r2, r4
   170fc:	mov	r0, r5
   17100:	bl	10c9c <memcpy@plt>
   17104:	mov	r3, #0
   17108:	mov	r0, #34	; 0x22
   1710c:	strb	r3, [r5, r4]
   17110:	ldrd	r4, [sp]
   17114:	ldr	r6, [sp, #8]
   17118:	add	sp, sp, #12
   1711c:	pop	{pc}		; (ldr pc, [sp], #4)
   17120:	cmp	r4, #0
   17124:	mov	r0, #22
   17128:	strbne	r6, [r5]
   1712c:	ldrd	r4, [sp]
   17130:	ldr	r6, [sp, #8]
   17134:	add	sp, sp, #12
   17138:	pop	{pc}		; (ldr pc, [sp], #4)
   1713c:	mov	r1, #0
   17140:	b	10e1c <setlocale@plt>
   17144:	cmp	r3, #0
   17148:	cmpeq	r2, #0
   1714c:	bne	17164 <__assert_fail@plt+0x62dc>
   17150:	cmp	r1, #0
   17154:	cmpeq	r0, #0
   17158:	mvnne	r1, #0
   1715c:	mvnne	r0, #0
   17160:	b	17180 <__assert_fail@plt+0x62f8>
   17164:	sub	sp, sp, #8
   17168:	push	{sp, lr}
   1716c:	bl	17190 <__assert_fail@plt+0x6308>
   17170:	ldr	lr, [sp, #4]
   17174:	add	sp, sp, #8
   17178:	pop	{r2, r3}
   1717c:	bx	lr
   17180:	push	{r1, lr}
   17184:	mov	r0, #8
   17188:	bl	10c54 <raise@plt>
   1718c:	pop	{r1, pc}
   17190:	cmp	r1, r3
   17194:	cmpeq	r0, r2
   17198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1719c:	mov	r4, r0
   171a0:	movcc	r0, #0
   171a4:	mov	r5, r1
   171a8:	ldr	lr, [sp, #36]	; 0x24
   171ac:	movcc	r1, r0
   171b0:	bcc	172ac <__assert_fail@plt+0x6424>
   171b4:	cmp	r3, #0
   171b8:	clzeq	ip, r2
   171bc:	clzne	ip, r3
   171c0:	addeq	ip, ip, #32
   171c4:	cmp	r5, #0
   171c8:	clzeq	r1, r4
   171cc:	addeq	r1, r1, #32
   171d0:	clzne	r1, r5
   171d4:	sub	ip, ip, r1
   171d8:	sub	sl, ip, #32
   171dc:	lsl	r9, r3, ip
   171e0:	rsb	fp, ip, #32
   171e4:	orr	r9, r9, r2, lsl sl
   171e8:	orr	r9, r9, r2, lsr fp
   171ec:	lsl	r8, r2, ip
   171f0:	cmp	r5, r9
   171f4:	cmpeq	r4, r8
   171f8:	movcc	r0, #0
   171fc:	movcc	r1, r0
   17200:	bcc	1721c <__assert_fail@plt+0x6394>
   17204:	mov	r0, #1
   17208:	subs	r4, r4, r8
   1720c:	lsl	r1, r0, sl
   17210:	orr	r1, r1, r0, lsr fp
   17214:	lsl	r0, r0, ip
   17218:	sbc	r5, r5, r9
   1721c:	cmp	ip, #0
   17220:	beq	172ac <__assert_fail@plt+0x6424>
   17224:	lsr	r6, r8, #1
   17228:	orr	r6, r6, r9, lsl #31
   1722c:	lsr	r7, r9, #1
   17230:	mov	r2, ip
   17234:	b	17258 <__assert_fail@plt+0x63d0>
   17238:	subs	r3, r4, r6
   1723c:	sbc	r8, r5, r7
   17240:	adds	r3, r3, r3
   17244:	adc	r8, r8, r8
   17248:	adds	r4, r3, #1
   1724c:	adc	r5, r8, #0
   17250:	subs	r2, r2, #1
   17254:	beq	17274 <__assert_fail@plt+0x63ec>
   17258:	cmp	r5, r7
   1725c:	cmpeq	r4, r6
   17260:	bcs	17238 <__assert_fail@plt+0x63b0>
   17264:	adds	r4, r4, r4
   17268:	adc	r5, r5, r5
   1726c:	subs	r2, r2, #1
   17270:	bne	17258 <__assert_fail@plt+0x63d0>
   17274:	lsr	r3, r4, ip
   17278:	orr	r3, r3, r5, lsl fp
   1727c:	lsr	r2, r5, ip
   17280:	orr	r3, r3, r5, lsr sl
   17284:	adds	r0, r0, r4
   17288:	mov	r4, r3
   1728c:	lsl	r3, r2, ip
   17290:	orr	r3, r3, r4, lsl sl
   17294:	lsl	ip, r4, ip
   17298:	orr	r3, r3, r4, lsr fp
   1729c:	adc	r1, r1, r5
   172a0:	subs	r0, r0, ip
   172a4:	mov	r5, r2
   172a8:	sbc	r1, r1, r3
   172ac:	cmp	lr, #0
   172b0:	strdne	r4, [lr]
   172b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172bc:	mov	r7, r0
   172c0:	ldr	r6, [pc, #72]	; 17310 <__assert_fail@plt+0x6488>
   172c4:	ldr	r5, [pc, #72]	; 17314 <__assert_fail@plt+0x648c>
   172c8:	add	r6, pc, r6
   172cc:	add	r5, pc, r5
   172d0:	sub	r6, r6, r5
   172d4:	mov	r8, r1
   172d8:	mov	r9, r2
   172dc:	bl	10c1c <calloc@plt-0x20>
   172e0:	asrs	r6, r6, #2
   172e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   172e8:	mov	r4, #0
   172ec:	add	r4, r4, #1
   172f0:	ldr	r3, [r5], #4
   172f4:	mov	r2, r9
   172f8:	mov	r1, r8
   172fc:	mov	r0, r7
   17300:	blx	r3
   17304:	cmp	r6, r4
   17308:	bne	172ec <__assert_fail@plt+0x6464>
   1730c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17310:	andeq	r1, r1, r4, asr #24
   17314:	andeq	r1, r1, ip, lsr ip
   17318:	bx	lr
   1731c:	ldr	r3, [pc, #12]	; 17330 <__assert_fail@plt+0x64a8>
   17320:	mov	r1, #0
   17324:	add	r3, pc, r3
   17328:	ldr	r2, [r3]
   1732c:	b	10db0 <__cxa_atexit@plt>
   17330:			; <UNDEFINED> instruction: 0x00011db0

Disassembly of section .fini:

00017334 <.fini>:
   17334:	push	{r3, lr}
   17338:	pop	{r3, pc}
