
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d4 <.init>:
   128d4:	push	{r3, lr}
   128d8:	bl	12a0c <_start@@Base+0x3c>
   128dc:	pop	{r3, pc}

Disassembly of section .plt:

000128e0 <free@plt-0x14>:
   128e0:	push	{lr}		; (str lr, [sp, #-4]!)
   128e4:	ldr	lr, [pc, #4]	; 128f0 <free@plt-0x4>
   128e8:	add	lr, pc, lr
   128ec:	ldr	pc, [lr, #8]!
   128f0:	andeq	ip, r1, r0, lsl r7

000128f4 <free@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #28, 20	; 0x1c000
   128fc:	ldr	pc, [ip, #1808]!	; 0x710

00012900 <memcpy@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #28, 20	; 0x1c000
   12908:	ldr	pc, [ip, #1800]!	; 0x708

0001290c <__isinff@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #28, 20	; 0x1c000
   12914:	ldr	pc, [ip, #1792]!	; 0x700

00012918 <__isinf@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #28, 20	; 0x1c000
   12920:	ldr	pc, [ip, #1784]!	; 0x6f8

00012924 <realloc@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #28, 20	; 0x1c000
   1292c:	ldr	pc, [ip, #1776]!	; 0x6f0

00012930 <fwrite@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #28, 20	; 0x1c000
   12938:	ldr	pc, [ip, #1768]!	; 0x6e8

0001293c <malloc@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #28, 20	; 0x1c000
   12944:	ldr	pc, [ip, #1760]!	; 0x6e0

00012948 <__libc_start_main@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #28, 20	; 0x1c000
   12950:	ldr	pc, [ip, #1752]!	; 0x6d8

00012954 <__gmon_start__@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #28, 20	; 0x1c000
   1295c:	ldr	pc, [ip, #1744]!	; 0x6d0

00012960 <bcmp@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #28, 20	; 0x1c000
   12968:	ldr	pc, [ip, #1736]!	; 0x6c8

0001296c <strlen@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #28, 20	; 0x1c000
   12974:	ldr	pc, [ip, #1728]!	; 0x6c0

00012978 <fprintf@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #28, 20	; 0x1c000
   12980:	ldr	pc, [ip, #1720]!	; 0x6b8

00012984 <posix_memalign@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #28, 20	; 0x1c000
   1298c:	ldr	pc, [ip, #1712]!	; 0x6b0

00012990 <memset@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #28, 20	; 0x1c000
   12998:	ldr	pc, [ip, #1704]!	; 0x6a8

0001299c <strtod@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #28, 20	; 0x1c000
   129a4:	ldr	pc, [ip, #1696]!	; 0x6a0

000129a8 <memchr@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #28, 20	; 0x1c000
   129b0:	ldr	pc, [ip, #1688]!	; 0x698

000129b4 <abort@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #28, 20	; 0x1c000
   129bc:	ldr	pc, [ip, #1680]!	; 0x690

000129c0 <__assert_fail@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #28, 20	; 0x1c000
   129c8:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12948 <__libc_start_main@plt>
   129fc:	bl	129b4 <abort@plt>
   12a00:	andeq	ip, r1, r8, lsl r2
   12a04:	andeq	r3, r1, r0, ror #26
   12a08:			; <UNDEFINED> instruction: 0x0001c1b8
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12954 <__gmon_start__@plt>
   12a28:	andeq	ip, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r4, asr r0
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	pc, r2, r0, rrx
   12a54:	andeq	pc, r2, r0, rrx
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	pc, r2, r0, rrx
   12a8c:	andeq	pc, r2, r0, rrx
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	pc, r2, r4, rrx
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #84	; 0x54
   12acc:	vmov.i32	q8, #0	; 0x00000000
   12ad0:	mov	r9, r0
   12ad4:	add	r0, sp, #24
   12ad8:	mov	r4, r1
   12adc:	str	r3, [sp, #12]
   12ae0:	mov	r7, r2
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	add	r1, r0, #16
   12af0:	vst1.64	{d16-d17}, [r1]
   12af4:	mov	r1, #28
   12af8:	vst1.64	{d16-d17}, [r0], r1
   12afc:	movw	r1, #50354	; 0xc4b2
   12b00:	vst1.32	{d16-d17}, [r0]
   12b04:	mov	r0, #1
   12b08:	movt	r1, #1
   12b0c:	str	r4, [sp, #28]
   12b10:	str	r0, [sp, #40]	; 0x28
   12b14:	mov	r0, r9
   12b18:	bl	14930 <flatcc_builder_start_buffer@@Base>
   12b1c:	sub	r0, r7, r4
   12b20:	cmp	r0, #2
   12b24:	blt	12b50 <test@@Base+0x90>
   12b28:	ldrb	r0, [r4]
   12b2c:	cmp	r0, #32
   12b30:	bls	12b3c <test@@Base+0x7c>
   12b34:	mov	r6, r4
   12b38:	b	12b64 <test@@Base+0xa4>
   12b3c:	bne	12b50 <test@@Base+0x90>
   12b40:	mov	r6, r4
   12b44:	ldrb	r0, [r6, #1]!
   12b48:	cmp	r0, #32
   12b4c:	bhi	12b64 <test@@Base+0xa4>
   12b50:	add	r0, sp, #24
   12b54:	mov	r1, r4
   12b58:	mov	r2, r7
   12b5c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   12b60:	mov	r6, r0
   12b64:	movw	r4, #61536	; 0xf060
   12b68:	cmp	r6, r7
   12b6c:	movt	r4, #2
   12b70:	beq	13bbc <test@@Base+0x10fc>
   12b74:	bcs	13bf0 <test@@Base+0x1130>
   12b78:	ldrb	r0, [r6]
   12b7c:	cmp	r0, #123	; 0x7b
   12b80:	bne	13bf0 <test@@Base+0x1130>
   12b84:	add	r1, r6, #1
   12b88:	sub	r0, r7, r1
   12b8c:	cmp	r0, #2
   12b90:	blt	12bb8 <test@@Base+0xf8>
   12b94:	ldrb	r0, [r1]
   12b98:	cmp	r0, #32
   12b9c:	bls	12ba8 <test@@Base+0xe8>
   12ba0:	mov	r6, r1
   12ba4:	b	12bc8 <test@@Base+0x108>
   12ba8:	bne	12bb8 <test@@Base+0xf8>
   12bac:	ldrb	r0, [r6, #2]!
   12bb0:	cmp	r0, #32
   12bb4:	bhi	12bc8 <test@@Base+0x108>
   12bb8:	add	r0, sp, #24
   12bbc:	mov	r2, r7
   12bc0:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   12bc4:	mov	r6, r0
   12bc8:	cmp	r6, r7
   12bcc:	beq	13bbc <test@@Base+0x10fc>
   12bd0:	mov	r0, r9
   12bd4:	mov	r1, #11
   12bd8:	bl	1598c <flatcc_builder_start_table@@Base>
   12bdc:	add	r0, sp, #20
   12be0:	add	r5, sp, #24
   12be4:	str	r9, [sp, #16]
   12be8:	add	r0, r0, #1
   12bec:	str	r0, [sp, #8]
   12bf0:	cmp	r6, r7
   12bf4:	mov	ip, r7
   12bf8:	beq	12c44 <test@@Base+0x184>
   12bfc:	ldrb	r0, [r6]
   12c00:	cmp	r0, #46	; 0x2e
   12c04:	beq	12c1c <test@@Base+0x15c>
   12c08:	cmp	r0, #34	; 0x22
   12c0c:	bne	12c38 <test@@Base+0x178>
   12c10:	mov	r0, #0
   12c14:	add	ip, r6, #1
   12c18:	b	12c40 <test@@Base+0x180>
   12c1c:	mov	r0, r5
   12c20:	mov	r1, r6
   12c24:	mov	r2, r7
   12c28:	mov	r3, #5
   12c2c:	bl	1851c <flatcc_json_parser_set_error@@Base>
   12c30:	mov	ip, r0
   12c34:	b	12c44 <test@@Base+0x184>
   12c38:	mov	r0, #1
   12c3c:	mov	ip, r6
   12c40:	str	r0, [sp, #36]	; 0x24
   12c44:	sub	r3, r7, ip
   12c48:	mov	r0, #8
   12c4c:	mov	r8, r7
   12c50:	cmp	r3, #8
   12c54:	movcc	r0, r3
   12c58:	sub	r7, r0, #1
   12c5c:	cmp	r7, #7
   12c60:	bhi	13bdc <test@@Base+0x111c>
   12c64:	add	r4, pc, #32
   12c68:	mov	sl, #0
   12c6c:	mov	lr, #0
   12c70:	mov	r9, #0
   12c74:	mov	r0, #0
   12c78:	mov	r6, #0
   12c7c:	mov	r5, #0
   12c80:	mov	r1, #0
   12c84:	mov	r2, #0
   12c88:	ldr	pc, [r4, r7, lsl #2]
   12c8c:	strdeq	r2, [r1], -r0
   12c90:	andeq	r2, r1, r8, ror #25
   12c94:	andeq	r2, r1, r0, ror #25
   12c98:	ldrdeq	r2, [r1], -r8
   12c9c:	andeq	r2, r1, ip, asr #25
   12ca0:	andeq	r2, r1, r0, asr #25
   12ca4:			; <UNDEFINED> instruction: 0x00012cb0
   12ca8:	andeq	r2, r1, ip, lsr #25
   12cac:	ldrb	lr, [ip, #7]
   12cb0:	ldrb	r0, [ip, #6]
   12cb4:	mov	r9, sl
   12cb8:	orr	r0, lr, r0, lsl #8
   12cbc:	mov	sl, r0
   12cc0:	ldrb	r0, [ip, #5]
   12cc4:	orr	sl, sl, r0, lsl #16
   12cc8:	mov	r0, r9
   12ccc:	ldrb	r1, [ip, #4]
   12cd0:	mov	r6, r0
   12cd4:	orr	sl, sl, r1, lsl #24
   12cd8:	ldrb	r0, [ip, #3]
   12cdc:	orr	r5, r0, r6
   12ce0:	ldrb	r0, [ip, #2]
   12ce4:	orr	r1, r5, r0, lsl #8
   12ce8:	ldrb	r0, [ip, #1]
   12cec:	orr	r2, r1, r0, lsl #16
   12cf0:	mov	r1, ip
   12cf4:	cmp	r3, #8
   12cf8:	movw	r6, #25455	; 0x636f
   12cfc:	ldrb	r0, [r1], #8
   12d00:	movt	r6, #29541	; 0x7365
   12d04:	movle	r1, r8
   12d08:	orr	r3, r2, r0, lsl #24
   12d0c:	mov	r0, sl
   12d10:	movw	r2, #0
   12d14:	bfc	r0, #0, #16
   12d18:	movt	r2, #28260	; 0x6e64
   12d1c:	subs	r2, r0, r2
   12d20:	sbcs	r2, r3, r6
   12d24:	bcs	12de8 <test@@Base+0x328>
   12d28:	movw	r0, #29299	; 0x7273
   12d2c:	ldr	r9, [sp, #16]
   12d30:	and	r1, sl, #-16777216	; 0xff000000
   12d34:	movw	r4, #61536	; 0xf060
   12d38:	add	r5, sp, #24
   12d3c:	movt	r0, #26217	; 0x6669
   12d40:	eor	r1, r1, #1946157056	; 0x74000000
   12d44:	movt	r4, #2
   12d48:	eor	r0, r3, r0
   12d4c:	orrs	r0, r1, r0
   12d50:	bne	13bdc <test@@Base+0x111c>
   12d54:	ldr	r1, [sp, #36]	; 0x24
   12d58:	add	r0, ip, #5
   12d5c:	mov	r7, r8
   12d60:	cmp	r1, #0
   12d64:	beq	12f78 <test@@Base+0x4b8>
   12d68:	cmp	r0, r8
   12d6c:	mov	r1, r8
   12d70:	beq	1328c <test@@Base+0x7cc>
   12d74:	ldrb	r3, [r0]
   12d78:	mov	r1, r0
   12d7c:	cmp	r3, #33	; 0x21
   12d80:	bcc	1328c <test@@Base+0x7cc>
   12d84:	add	r1, ip, #6
   12d88:	uxtb	r0, r3
   12d8c:	cmp	r0, #46	; 0x2e
   12d90:	cmpne	r0, #95	; 0x5f
   12d94:	bne	12db0 <test@@Base+0x2f0>
   12d98:	cmp	r7, r1
   12d9c:	beq	13234 <test@@Base+0x774>
   12da0:	ldrb	r3, [r1], #1
   12da4:	cmp	r3, #33	; 0x21
   12da8:	bcs	12d88 <test@@Base+0x2c8>
   12dac:	b	12de0 <test@@Base+0x320>
   12db0:	sxtb	r2, r3
   12db4:	cmp	r2, #0
   12db8:	bmi	12d98 <test@@Base+0x2d8>
   12dbc:	sub	r2, r3, #48	; 0x30
   12dc0:	uxtb	r2, r2
   12dc4:	cmp	r2, #9
   12dc8:	bls	12d98 <test@@Base+0x2d8>
   12dcc:	orr	r2, r3, #32
   12dd0:	sub	r2, r2, #97	; 0x61
   12dd4:	uxtb	r2, r2
   12dd8:	cmp	r2, #26
   12ddc:	bcc	12d98 <test@@Base+0x2d8>
   12de0:	sub	r1, r1, #1
   12de4:	b	13238 <test@@Base+0x778>
   12de8:	movw	r2, #27764	; 0x6c74
   12dec:	mov	r7, r8
   12df0:	movt	r2, #31349	; 0x7a75
   12df4:	cmp	r3, r2
   12df8:	bhi	12ec8 <test@@Base+0x408>
   12dfc:	movw	r5, #29472	; 0x7320
   12e00:	movt	r5, #28260	; 0x6e64
   12e04:	subs	r2, sl, r5
   12e08:	sbcs	r2, r3, r6
   12e0c:	bcs	12fc0 <test@@Base+0x500>
   12e10:	movw	r1, #0
   12e14:	movt	r1, #28260	; 0x6e64
   12e18:	eor	r0, r0, r1
   12e1c:	eor	r1, r3, r6
   12e20:	orrs	r0, r0, r1
   12e24:	bne	13c30 <test@@Base+0x1170>
   12e28:	ldr	r1, [sp, #36]	; 0x24
   12e2c:	ldr	r9, [sp, #16]
   12e30:	movw	r4, #61536	; 0xf060
   12e34:	add	r0, ip, #6
   12e38:	movt	r4, #2
   12e3c:	cmp	r1, #0
   12e40:	beq	131e8 <test@@Base+0x728>
   12e44:	cmp	r0, r7
   12e48:	mov	r1, r7
   12e4c:	add	r5, sp, #24
   12e50:	beq	136d4 <test@@Base+0xc14>
   12e54:	ldrb	r3, [r0]
   12e58:	mov	r1, r0
   12e5c:	cmp	r3, #33	; 0x21
   12e60:	bcc	136d4 <test@@Base+0xc14>
   12e64:	add	r1, ip, #7
   12e68:	uxtb	r0, r3
   12e6c:	cmp	r0, #46	; 0x2e
   12e70:	cmpne	r0, #95	; 0x5f
   12e74:	bne	12e90 <test@@Base+0x3d0>
   12e78:	cmp	r7, r1
   12e7c:	beq	13484 <test@@Base+0x9c4>
   12e80:	ldrb	r3, [r1], #1
   12e84:	cmp	r3, #33	; 0x21
   12e88:	bcs	12e68 <test@@Base+0x3a8>
   12e8c:	b	12ec0 <test@@Base+0x400>
   12e90:	sxtb	r2, r3
   12e94:	cmp	r2, #0
   12e98:	bmi	12e78 <test@@Base+0x3b8>
   12e9c:	sub	r2, r3, #48	; 0x30
   12ea0:	uxtb	r2, r2
   12ea4:	cmp	r2, #9
   12ea8:	bls	12e78 <test@@Base+0x3b8>
   12eac:	orr	r2, r3, #32
   12eb0:	sub	r2, r2, #97	; 0x61
   12eb4:	uxtb	r2, r2
   12eb8:	cmp	r2, #26
   12ebc:	bcc	12e78 <test@@Base+0x3b8>
   12ec0:	sub	r1, r1, #1
   12ec4:	b	13488 <test@@Base+0x9c8>
   12ec8:	movw	r0, #27765	; 0x6c75
   12ecc:	movt	r0, #31349	; 0x7a75
   12ed0:	teq	r3, r0
   12ed4:	bne	13c30 <test@@Base+0x1170>
   12ed8:	ldr	r1, [sp, #36]	; 0x24
   12edc:	ldr	r9, [sp, #16]
   12ee0:	movw	r4, #61536	; 0xf060
   12ee4:	add	r0, ip, #4
   12ee8:	movt	r4, #2
   12eec:	cmp	r1, #0
   12ef0:	beq	130f4 <test@@Base+0x634>
   12ef4:	cmp	r0, r7
   12ef8:	mov	r1, r7
   12efc:	add	r5, sp, #24
   12f00:	beq	134b8 <test@@Base+0x9f8>
   12f04:	ldrb	r3, [r0]
   12f08:	mov	r1, r0
   12f0c:	cmp	r3, #33	; 0x21
   12f10:	bcc	134b8 <test@@Base+0x9f8>
   12f14:	add	r1, ip, #5
   12f18:	uxtb	r0, r3
   12f1c:	cmp	r0, #46	; 0x2e
   12f20:	cmpne	r0, #95	; 0x5f
   12f24:	bne	12f40 <test@@Base+0x480>
   12f28:	cmp	r7, r1
   12f2c:	beq	13258 <test@@Base+0x798>
   12f30:	ldrb	r3, [r1], #1
   12f34:	cmp	r3, #33	; 0x21
   12f38:	bcs	12f18 <test@@Base+0x458>
   12f3c:	b	12f70 <test@@Base+0x4b0>
   12f40:	sxtb	r2, r3
   12f44:	cmp	r2, #0
   12f48:	bmi	12f28 <test@@Base+0x468>
   12f4c:	sub	r2, r3, #48	; 0x30
   12f50:	uxtb	r2, r2
   12f54:	cmp	r2, #9
   12f58:	bls	12f28 <test@@Base+0x468>
   12f5c:	orr	r2, r3, #32
   12f60:	sub	r2, r2, #97	; 0x61
   12f64:	uxtb	r2, r2
   12f68:	cmp	r2, #26
   12f6c:	bcc	12f28 <test@@Base+0x468>
   12f70:	sub	r1, r1, #1
   12f74:	b	1325c <test@@Base+0x79c>
   12f78:	cmp	r0, r8
   12f7c:	mov	r1, r8
   12f80:	beq	13278 <test@@Base+0x7b8>
   12f84:	ldrb	r1, [r0]
   12f88:	cmp	r1, #92	; 0x5c
   12f8c:	beq	12f9c <test@@Base+0x4dc>
   12f90:	cmp	r1, #34	; 0x22
   12f94:	bne	12fac <test@@Base+0x4ec>
   12f98:	b	131e0 <test@@Base+0x720>
   12f9c:	sub	r1, r7, r0
   12fa0:	cmp	r1, #2
   12fa4:	blt	13274 <test@@Base+0x7b4>
   12fa8:	add	r0, r0, #1
   12fac:	add	r0, r0, #1
   12fb0:	cmp	r0, r7
   12fb4:	bne	12f84 <test@@Base+0x4c4>
   12fb8:	mov	r1, r7
   12fbc:	b	13278 <test@@Base+0x7b8>
   12fc0:	eor	r0, sl, r5
   12fc4:	eor	r2, r3, r6
   12fc8:	orrs	r0, r0, r2
   12fcc:	bne	13c30 <test@@Base+0x1170>
   12fd0:	sub	r0, r7, r1
   12fd4:	mov	r2, #8
   12fd8:	ldr	r9, [sp, #16]
   12fdc:	movw	r4, #61536	; 0xf060
   12fe0:	add	r5, sp, #24
   12fe4:	cmp	r0, #8
   12fe8:	movt	r4, #2
   12fec:	movcs	r0, r2
   12ff0:	sub	r2, r0, #1
   12ff4:	cmp	r2, #7
   12ff8:	bhi	13d00 <test@@Base+0x1240>
   12ffc:	add	r3, pc, #4
   13000:	mov	r0, #0
   13004:	ldr	pc, [r3, r2, lsl #2]
   13008:	andeq	r3, r1, ip, lsr r0
   1300c:	andeq	r3, r1, r4, lsr r0
   13010:	andeq	r3, r1, ip, lsr #32
   13014:	andeq	r3, r1, r8, lsr #32
   13018:	andeq	r3, r1, r8, lsr #32
   1301c:	andeq	r3, r1, r8, lsr #32
   13020:	andeq	r3, r1, r8, lsr #32
   13024:	andeq	r3, r1, r8, lsr #32
   13028:	ldrb	r0, [r1, #3]
   1302c:	ldrb	r2, [r1, #2]
   13030:	orr	r0, r0, r2, lsl #8
   13034:	ldrb	r2, [r1, #1]
   13038:	orr	r0, r0, r2, lsl #16
   1303c:	ldrb	r2, [r1]
   13040:	orr	r0, r0, r2, lsl #24
   13044:	movw	r2, #26227	; 0x6673
   13048:	movt	r2, #27749	; 0x6c65
   1304c:	cmp	r0, r2
   13050:	bhi	13140 <test@@Base+0x680>
   13054:	movw	r2, #24932	; 0x6164
   13058:	movt	r2, #27749	; 0x6c65
   1305c:	teq	r0, r2
   13060:	bne	13d00 <test@@Base+0x1240>
   13064:	ldr	r2, [sp, #36]	; 0x24
   13068:	add	r0, r1, #4
   1306c:	cmp	r2, #0
   13070:	beq	133ec <test@@Base+0x92c>
   13074:	cmp	r0, r7
   13078:	mov	r2, r7
   1307c:	beq	13824 <test@@Base+0xd64>
   13080:	ldrb	r3, [r0]
   13084:	mov	r2, r0
   13088:	cmp	r3, #33	; 0x21
   1308c:	bcc	13824 <test@@Base+0xd64>
   13090:	add	r1, r1, #5
   13094:	uxtb	r0, r3
   13098:	cmp	r0, #46	; 0x2e
   1309c:	cmpne	r0, #95	; 0x5f
   130a0:	bne	130bc <test@@Base+0x5fc>
   130a4:	cmp	r7, r1
   130a8:	beq	137bc <test@@Base+0xcfc>
   130ac:	ldrb	r3, [r1], #1
   130b0:	cmp	r3, #33	; 0x21
   130b4:	bcs	13094 <test@@Base+0x5d4>
   130b8:	b	130ec <test@@Base+0x62c>
   130bc:	sxtb	r2, r3
   130c0:	cmp	r2, #0
   130c4:	bmi	130a4 <test@@Base+0x5e4>
   130c8:	sub	r2, r3, #48	; 0x30
   130cc:	uxtb	r2, r2
   130d0:	cmp	r2, #9
   130d4:	bls	130a4 <test@@Base+0x5e4>
   130d8:	orr	r2, r3, #32
   130dc:	sub	r2, r2, #97	; 0x61
   130e0:	uxtb	r2, r2
   130e4:	cmp	r2, #26
   130e8:	bcc	130a4 <test@@Base+0x5e4>
   130ec:	sub	r2, r1, #1
   130f0:	b	137c0 <test@@Base+0xd00>
   130f4:	cmp	r0, r7
   130f8:	mov	r1, r7
   130fc:	add	r5, sp, #24
   13100:	beq	134a4 <test@@Base+0x9e4>
   13104:	ldrb	r1, [r0]
   13108:	cmp	r1, #92	; 0x5c
   1310c:	beq	1311c <test@@Base+0x65c>
   13110:	cmp	r1, #34	; 0x22
   13114:	bne	1312c <test@@Base+0x66c>
   13118:	b	13250 <test@@Base+0x790>
   1311c:	sub	r1, r7, r0
   13120:	cmp	r1, #2
   13124:	blt	134a0 <test@@Base+0x9e0>
   13128:	add	r0, r0, #1
   1312c:	add	r0, r0, #1
   13130:	cmp	r0, r7
   13134:	bne	13104 <test@@Base+0x644>
   13138:	mov	r1, r7
   1313c:	b	134a4 <test@@Base+0x9e4>
   13140:	movw	r2, #26228	; 0x6674
   13144:	movt	r2, #27749	; 0x6c65
   13148:	teq	r0, r2
   1314c:	bne	13d00 <test@@Base+0x1240>
   13150:	ldr	r2, [sp, #36]	; 0x24
   13154:	add	r0, r1, #4
   13158:	cmp	r2, #0
   1315c:	beq	13434 <test@@Base+0x974>
   13160:	cmp	r0, r7
   13164:	mov	r2, r7
   13168:	beq	13988 <test@@Base+0xec8>
   1316c:	ldrb	r3, [r0]
   13170:	mov	r2, r0
   13174:	cmp	r3, #33	; 0x21
   13178:	bcc	13988 <test@@Base+0xec8>
   1317c:	add	r1, r1, #5
   13180:	uxtb	r0, r3
   13184:	cmp	r0, #46	; 0x2e
   13188:	cmpne	r0, #95	; 0x5f
   1318c:	bne	131a8 <test@@Base+0x6e8>
   13190:	cmp	r7, r1
   13194:	beq	137dc <test@@Base+0xd1c>
   13198:	ldrb	r3, [r1], #1
   1319c:	cmp	r3, #33	; 0x21
   131a0:	bcs	13180 <test@@Base+0x6c0>
   131a4:	b	131d8 <test@@Base+0x718>
   131a8:	sxtb	r2, r3
   131ac:	cmp	r2, #0
   131b0:	bmi	13190 <test@@Base+0x6d0>
   131b4:	sub	r2, r3, #48	; 0x30
   131b8:	uxtb	r2, r2
   131bc:	cmp	r2, #9
   131c0:	bls	13190 <test@@Base+0x6d0>
   131c4:	orr	r2, r3, #32
   131c8:	sub	r2, r2, #97	; 0x61
   131cc:	uxtb	r2, r2
   131d0:	cmp	r2, #26
   131d4:	bcc	13190 <test@@Base+0x6d0>
   131d8:	sub	r2, r1, #1
   131dc:	b	137e0 <test@@Base+0xd20>
   131e0:	add	r1, r0, #1
   131e4:	b	1328c <test@@Base+0x7cc>
   131e8:	cmp	r0, r7
   131ec:	mov	r1, r7
   131f0:	add	r5, sp, #24
   131f4:	beq	136c0 <test@@Base+0xc00>
   131f8:	ldrb	r1, [r0]
   131fc:	cmp	r1, #92	; 0x5c
   13200:	beq	13210 <test@@Base+0x750>
   13204:	cmp	r1, #34	; 0x22
   13208:	bne	13220 <test@@Base+0x760>
   1320c:	b	1347c <test@@Base+0x9bc>
   13210:	sub	r1, r7, r0
   13214:	cmp	r1, #2
   13218:	blt	136bc <test@@Base+0xbfc>
   1321c:	add	r0, r0, #1
   13220:	add	r0, r0, #1
   13224:	cmp	r0, r7
   13228:	bne	131f8 <test@@Base+0x738>
   1322c:	mov	r1, r7
   13230:	b	136c0 <test@@Base+0xc00>
   13234:	mov	r1, r7
   13238:	cmp	r0, #46	; 0x2e
   1323c:	bne	1328c <test@@Base+0x7cc>
   13240:	mov	r0, r5
   13244:	mov	r2, r7
   13248:	mov	r3, #5
   1324c:	b	13284 <test@@Base+0x7c4>
   13250:	add	r1, r0, #1
   13254:	b	134b8 <test@@Base+0x9f8>
   13258:	mov	r1, r7
   1325c:	cmp	r0, #46	; 0x2e
   13260:	bne	134b8 <test@@Base+0x9f8>
   13264:	mov	r0, r5
   13268:	mov	r2, r7
   1326c:	mov	r3, #5
   13270:	b	134b0 <test@@Base+0x9f0>
   13274:	mov	r1, r0
   13278:	mov	r0, r5
   1327c:	mov	r2, r7
   13280:	mov	r3, #20
   13284:	bl	1851c <flatcc_json_parser_set_error@@Base>
   13288:	mov	r1, r0
   1328c:	sub	r0, r7, r1
   13290:	cmp	r0, #2
   13294:	blt	132c0 <test@@Base+0x800>
   13298:	ldrb	r0, [r1]
   1329c:	cmp	r0, #32
   132a0:	bls	132ac <test@@Base+0x7ec>
   132a4:	mov	sl, r1
   132a8:	b	132d0 <test@@Base+0x810>
   132ac:	bne	132c0 <test@@Base+0x800>
   132b0:	mov	sl, r1
   132b4:	ldrb	r0, [sl, #1]!
   132b8:	cmp	r0, #32
   132bc:	bhi	132d0 <test@@Base+0x810>
   132c0:	mov	r0, r5
   132c4:	mov	r2, r7
   132c8:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   132cc:	mov	sl, r0
   132d0:	cmp	sl, r7
   132d4:	beq	13bbc <test@@Base+0x10fc>
   132d8:	bcs	13c00 <test@@Base+0x1140>
   132dc:	ldrb	r0, [sl]
   132e0:	cmp	r0, #58	; 0x3a
   132e4:	bne	13c00 <test@@Base+0x1140>
   132e8:	add	r1, sl, #1
   132ec:	sub	r0, r7, r1
   132f0:	cmp	r0, #2
   132f4:	blt	1331c <test@@Base+0x85c>
   132f8:	ldrb	r0, [r1]
   132fc:	cmp	r0, #32
   13300:	bls	1330c <test@@Base+0x84c>
   13304:	mov	sl, r1
   13308:	b	1332c <test@@Base+0x86c>
   1330c:	bne	1331c <test@@Base+0x85c>
   13310:	ldrb	r0, [sl, #2]!
   13314:	cmp	r0, #32
   13318:	bhi	1332c <test@@Base+0x86c>
   1331c:	mov	r0, r5
   13320:	mov	r2, r7
   13324:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13328:	mov	sl, r0
   1332c:	cmp	sl, r7
   13330:	beq	13bbc <test@@Base+0x10fc>
   13334:	mov	r0, r9
   13338:	mov	r1, #0
   1333c:	mov	r2, #1
   13340:	mov	r3, #1
   13344:	bl	16bd8 <flatcc_builder_table_add@@Base>
   13348:	cmp	r0, #0
   1334c:	beq	13c84 <test@@Base+0x11c4>
   13350:	mov	r6, r0
   13354:	mov	r0, #0
   13358:	mov	r1, sl
   1335c:	mov	r2, r7
   13360:	sub	r3, fp, #44	; 0x2c
   13364:	str	r0, [fp, #-36]	; 0xffffffdc
   13368:	str	r0, [fp, #-40]	; 0xffffffd8
   1336c:	str	r0, [fp, #-44]	; 0xffffffd4
   13370:	strb	r0, [r6]
   13374:	sub	r0, fp, #40	; 0x28
   13378:	str	r0, [sp]
   1337c:	mov	r0, r5
   13380:	bl	1a40c <flatcc_json_parser_integer@@Base>
   13384:	cmp	r0, sl
   13388:	mov	r1, sl
   1338c:	beq	13ab8 <test@@Base+0xff8>
   13390:	mov	r2, r0
   13394:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13398:	cmp	r0, #0
   1339c:	beq	133b4 <test@@Base+0x8f4>
   133a0:	mov	r1, r2
   133a4:	mov	r0, r5
   133a8:	mov	r2, r7
   133ac:	mov	r3, #8
   133b0:	b	133d8 <test@@Base+0x918>
   133b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   133b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   133bc:	subs	r3, r0, #256	; 0x100
   133c0:	sbcs	r1, r1, #0
   133c4:	bcc	133e4 <test@@Base+0x924>
   133c8:	mov	r1, r2
   133cc:	mov	r0, r5
   133d0:	mov	r2, r7
   133d4:	mov	r3, #7
   133d8:	bl	1851c <flatcc_json_parser_set_error@@Base>
   133dc:	mov	r1, r0
   133e0:	b	13ab8 <test@@Base+0xff8>
   133e4:	strb	r0, [r6]
   133e8:	b	13ab4 <test@@Base+0xff4>
   133ec:	cmp	r0, r7
   133f0:	mov	r1, r7
   133f4:	beq	13810 <test@@Base+0xd50>
   133f8:	ldrb	r1, [r0]
   133fc:	cmp	r1, #92	; 0x5c
   13400:	beq	13410 <test@@Base+0x950>
   13404:	cmp	r1, #34	; 0x22
   13408:	bne	13420 <test@@Base+0x960>
   1340c:	b	137fc <test@@Base+0xd3c>
   13410:	sub	r1, r7, r0
   13414:	cmp	r1, #2
   13418:	blt	1380c <test@@Base+0xd4c>
   1341c:	add	r0, r0, #1
   13420:	add	r0, r0, #1
   13424:	cmp	r0, r7
   13428:	bne	133f8 <test@@Base+0x938>
   1342c:	mov	r1, r7
   13430:	b	13810 <test@@Base+0xd50>
   13434:	cmp	r0, r7
   13438:	mov	r1, r7
   1343c:	beq	13974 <test@@Base+0xeb4>
   13440:	ldrb	r1, [r0]
   13444:	cmp	r1, #92	; 0x5c
   13448:	beq	13458 <test@@Base+0x998>
   1344c:	cmp	r1, #34	; 0x22
   13450:	bne	13468 <test@@Base+0x9a8>
   13454:	b	13804 <test@@Base+0xd44>
   13458:	sub	r1, r7, r0
   1345c:	cmp	r1, #2
   13460:	blt	13970 <test@@Base+0xeb0>
   13464:	add	r0, r0, #1
   13468:	add	r0, r0, #1
   1346c:	cmp	r0, r7
   13470:	bne	13440 <test@@Base+0x980>
   13474:	mov	r1, r7
   13478:	b	13974 <test@@Base+0xeb4>
   1347c:	add	r1, r0, #1
   13480:	b	136d4 <test@@Base+0xc14>
   13484:	mov	r1, r7
   13488:	cmp	r0, #46	; 0x2e
   1348c:	bne	136d4 <test@@Base+0xc14>
   13490:	mov	r0, r5
   13494:	mov	r2, r7
   13498:	mov	r3, #5
   1349c:	b	136cc <test@@Base+0xc0c>
   134a0:	mov	r1, r0
   134a4:	mov	r0, r5
   134a8:	mov	r2, r7
   134ac:	mov	r3, #20
   134b0:	bl	1851c <flatcc_json_parser_set_error@@Base>
   134b4:	mov	r1, r0
   134b8:	sub	r0, r7, r1
   134bc:	cmp	r0, #2
   134c0:	blt	134ec <test@@Base+0xa2c>
   134c4:	ldrb	r0, [r1]
   134c8:	cmp	r0, #32
   134cc:	bls	134d8 <test@@Base+0xa18>
   134d0:	mov	r6, r1
   134d4:	b	134fc <test@@Base+0xa3c>
   134d8:	bne	134ec <test@@Base+0xa2c>
   134dc:	mov	r6, r1
   134e0:	ldrb	r0, [r6, #1]!
   134e4:	cmp	r0, #32
   134e8:	bhi	134fc <test@@Base+0xa3c>
   134ec:	mov	r0, r5
   134f0:	mov	r2, r7
   134f4:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   134f8:	mov	r6, r0
   134fc:	cmp	r6, r7
   13500:	beq	13bbc <test@@Base+0x10fc>
   13504:	bcs	13c58 <test@@Base+0x1198>
   13508:	ldrb	r0, [r6]
   1350c:	cmp	r0, #58	; 0x3a
   13510:	bne	13c58 <test@@Base+0x1198>
   13514:	add	r1, r6, #1
   13518:	sub	r0, r7, r1
   1351c:	cmp	r0, #2
   13520:	blt	13548 <test@@Base+0xa88>
   13524:	ldrb	r0, [r1]
   13528:	cmp	r0, #32
   1352c:	bls	13538 <test@@Base+0xa78>
   13530:	mov	r6, r1
   13534:	b	13558 <test@@Base+0xa98>
   13538:	bne	13548 <test@@Base+0xa88>
   1353c:	ldrb	r0, [r6, #2]!
   13540:	cmp	r0, #32
   13544:	bhi	13558 <test@@Base+0xa98>
   13548:	mov	r0, r5
   1354c:	mov	r2, r7
   13550:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13554:	mov	r6, r0
   13558:	cmp	r6, r7
   1355c:	beq	13bbc <test@@Base+0x10fc>
   13560:	ldrb	r0, [r6]
   13564:	cmp	r0, #34	; 0x22
   13568:	bne	13574 <test@@Base+0xab4>
   1356c:	add	r6, r6, #1
   13570:	b	1358c <test@@Base+0xacc>
   13574:	mov	r0, r5
   13578:	mov	r1, r6
   1357c:	mov	r2, r7
   13580:	mov	r3, #16
   13584:	bl	1851c <flatcc_json_parser_set_error@@Base>
   13588:	mov	r6, r0
   1358c:	mov	r0, r5
   13590:	mov	r1, r6
   13594:	mov	r2, r7
   13598:	bl	1854c <flatcc_json_parser_string_part@@Base>
   1359c:	cmp	r0, r7
   135a0:	beq	13bd4 <test@@Base+0x1114>
   135a4:	mov	sl, r0
   135a8:	ldrb	r0, [r0]
   135ac:	cmp	r0, #34	; 0x22
   135b0:	bne	135c8 <test@@Base+0xb08>
   135b4:	sub	r2, sl, r6
   135b8:	mov	r0, r9
   135bc:	mov	r1, r6
   135c0:	bl	17450 <flatcc_builder_create_string@@Base>
   135c4:	b	13660 <test@@Base+0xba0>
   135c8:	mov	r0, r9
   135cc:	bl	157f0 <flatcc_builder_start_string@@Base>
   135d0:	mov	r0, r9
   135d4:	sub	r9, sl, r6
   135d8:	mov	r1, r9
   135dc:	bl	15220 <flatcc_builder_extend_string@@Base>
   135e0:	cmp	r0, #0
   135e4:	beq	13d58 <test@@Base+0x1298>
   135e8:	mov	r1, r6
   135ec:	mov	r2, r9
   135f0:	bl	12900 <memcpy@plt>
   135f4:	ldr	r9, [sp, #16]
   135f8:	mov	r0, r5
   135fc:	mov	r1, sl
   13600:	mov	r2, r7
   13604:	add	r3, sp, #20
   13608:	bl	186a8 <flatcc_json_parser_string_escape@@Base>
   1360c:	ldrb	r2, [sp, #20]
   13610:	ldr	r1, [sp, #8]
   13614:	mov	r6, r0
   13618:	mov	r0, r9
   1361c:	bl	152d0 <flatcc_builder_append_string@@Base>
   13620:	mov	r0, r5
   13624:	mov	r1, r6
   13628:	mov	r2, r7
   1362c:	bl	1854c <flatcc_json_parser_string_part@@Base>
   13630:	cmp	r0, r7
   13634:	beq	13bd4 <test@@Base+0x1114>
   13638:	mov	sl, r0
   1363c:	sub	r2, r0, r6
   13640:	mov	r0, r9
   13644:	mov	r1, r6
   13648:	bl	152d0 <flatcc_builder_append_string@@Base>
   1364c:	ldrb	r0, [sl]
   13650:	cmp	r0, #34	; 0x22
   13654:	bne	135f8 <test@@Base+0xb38>
   13658:	mov	r0, r9
   1365c:	bl	175b8 <flatcc_builder_end_string@@Base>
   13660:	mov	r6, r0
   13664:	cmp	r0, #0
   13668:	beq	13c84 <test@@Base+0x11c4>
   1366c:	mov	r0, r9
   13670:	mov	r1, #10
   13674:	bl	16aac <flatcc_builder_table_add_offset@@Base>
   13678:	cmp	r0, #0
   1367c:	beq	13c84 <test@@Base+0x11c4>
   13680:	cmp	sl, r7
   13684:	str	r6, [r0]
   13688:	beq	136a0 <test@@Base+0xbe0>
   1368c:	ldrb	r0, [sl]
   13690:	cmp	r0, #34	; 0x22
   13694:	bne	136a0 <test@@Base+0xbe0>
   13698:	add	r1, sl, #1
   1369c:	b	13ac0 <test@@Base+0x1000>
   136a0:	mov	r0, r5
   136a4:	mov	r1, sl
   136a8:	mov	r2, r7
   136ac:	mov	r3, #20
   136b0:	bl	1851c <flatcc_json_parser_set_error@@Base>
   136b4:	mov	r1, r0
   136b8:	b	13ac0 <test@@Base+0x1000>
   136bc:	mov	r1, r0
   136c0:	mov	r0, r5
   136c4:	mov	r2, r7
   136c8:	mov	r3, #20
   136cc:	bl	1851c <flatcc_json_parser_set_error@@Base>
   136d0:	mov	r1, r0
   136d4:	sub	r0, r7, r1
   136d8:	cmp	r0, #2
   136dc:	blt	13708 <test@@Base+0xc48>
   136e0:	ldrb	r0, [r1]
   136e4:	cmp	r0, #32
   136e8:	bls	136f4 <test@@Base+0xc34>
   136ec:	mov	sl, r1
   136f0:	b	13718 <test@@Base+0xc58>
   136f4:	bne	13708 <test@@Base+0xc48>
   136f8:	mov	sl, r1
   136fc:	ldrb	r0, [sl, #1]!
   13700:	cmp	r0, #32
   13704:	bhi	13718 <test@@Base+0xc58>
   13708:	mov	r0, r5
   1370c:	mov	r2, r7
   13710:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13714:	mov	sl, r0
   13718:	cmp	sl, r7
   1371c:	beq	13bbc <test@@Base+0x10fc>
   13720:	bcs	13c00 <test@@Base+0x1140>
   13724:	ldrb	r0, [sl]
   13728:	cmp	r0, #58	; 0x3a
   1372c:	bne	13c00 <test@@Base+0x1140>
   13730:	add	r1, sl, #1
   13734:	sub	r0, r7, r1
   13738:	cmp	r0, #2
   1373c:	blt	13764 <test@@Base+0xca4>
   13740:	ldrb	r0, [r1]
   13744:	cmp	r0, #32
   13748:	bls	13754 <test@@Base+0xc94>
   1374c:	mov	sl, r1
   13750:	b	13774 <test@@Base+0xcb4>
   13754:	bne	13764 <test@@Base+0xca4>
   13758:	ldrb	r0, [sl, #2]!
   1375c:	cmp	r0, #32
   13760:	bhi	13774 <test@@Base+0xcb4>
   13764:	mov	r0, r5
   13768:	mov	r2, r7
   1376c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13770:	mov	sl, r0
   13774:	cmp	sl, r7
   13778:	beq	13bbc <test@@Base+0x10fc>
   1377c:	mov	r0, r9
   13780:	mov	r1, #1
   13784:	mov	r2, #8
   13788:	mov	r3, #8
   1378c:	bl	16bd8 <flatcc_builder_table_add@@Base>
   13790:	cmp	r0, #0
   13794:	beq	13c84 <test@@Base+0x11c4>
   13798:	mov	r3, r0
   1379c:	mov	r0, r5
   137a0:	mov	r1, sl
   137a4:	mov	r2, r7
   137a8:	bl	1996c <flatcc_json_parser_double@@Base>
   137ac:	mov	r1, r0
   137b0:	cmp	sl, r0
   137b4:	bne	13ac0 <test@@Base+0x1000>
   137b8:	b	13c84 <test@@Base+0x11c4>
   137bc:	mov	r2, r7
   137c0:	cmp	r0, #46	; 0x2e
   137c4:	bne	13824 <test@@Base+0xd64>
   137c8:	mov	r1, r2
   137cc:	mov	r0, r5
   137d0:	mov	r2, r7
   137d4:	mov	r3, #5
   137d8:	b	1381c <test@@Base+0xd5c>
   137dc:	mov	r2, r7
   137e0:	cmp	r0, #46	; 0x2e
   137e4:	bne	13988 <test@@Base+0xec8>
   137e8:	mov	r1, r2
   137ec:	mov	r0, r5
   137f0:	mov	r2, r7
   137f4:	mov	r3, #5
   137f8:	b	13980 <test@@Base+0xec0>
   137fc:	add	r2, r0, #1
   13800:	b	13824 <test@@Base+0xd64>
   13804:	add	r2, r0, #1
   13808:	b	13988 <test@@Base+0xec8>
   1380c:	mov	r1, r0
   13810:	mov	r0, r5
   13814:	mov	r2, r7
   13818:	mov	r3, #20
   1381c:	bl	1851c <flatcc_json_parser_set_error@@Base>
   13820:	mov	r2, r0
   13824:	sub	r0, r7, r2
   13828:	cmp	r0, #2
   1382c:	blt	13858 <test@@Base+0xd98>
   13830:	ldrb	r0, [r2]
   13834:	cmp	r0, #32
   13838:	bls	13844 <test@@Base+0xd84>
   1383c:	mov	sl, r2
   13840:	b	1386c <test@@Base+0xdac>
   13844:	bne	13858 <test@@Base+0xd98>
   13848:	mov	sl, r2
   1384c:	ldrb	r0, [sl, #1]!
   13850:	cmp	r0, #32
   13854:	bhi	1386c <test@@Base+0xdac>
   13858:	mov	r1, r2
   1385c:	mov	r0, r5
   13860:	mov	r2, r7
   13864:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13868:	mov	sl, r0
   1386c:	cmp	sl, r7
   13870:	beq	13bbc <test@@Base+0x10fc>
   13874:	bcs	13c00 <test@@Base+0x1140>
   13878:	ldrb	r0, [sl]
   1387c:	cmp	r0, #58	; 0x3a
   13880:	bne	13c00 <test@@Base+0x1140>
   13884:	add	r1, sl, #1
   13888:	sub	r0, r7, r1
   1388c:	cmp	r0, #2
   13890:	blt	138b8 <test@@Base+0xdf8>
   13894:	ldrb	r0, [r1]
   13898:	cmp	r0, #32
   1389c:	bls	138a8 <test@@Base+0xde8>
   138a0:	mov	sl, r1
   138a4:	b	138c8 <test@@Base+0xe08>
   138a8:	bne	138b8 <test@@Base+0xdf8>
   138ac:	ldrb	r0, [sl, #2]!
   138b0:	cmp	r0, #32
   138b4:	bhi	138c8 <test@@Base+0xe08>
   138b8:	mov	r0, r5
   138bc:	mov	r2, r7
   138c0:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   138c4:	mov	sl, r0
   138c8:	cmp	sl, r7
   138cc:	beq	13bbc <test@@Base+0x10fc>
   138d0:	mov	r0, r9
   138d4:	mov	r1, #3
   138d8:	mov	r2, #8
   138dc:	mov	r3, #8
   138e0:	bl	16bd8 <flatcc_builder_table_add@@Base>
   138e4:	cmp	r0, #0
   138e8:	beq	13c84 <test@@Base+0x11c4>
   138ec:	mov	r6, r0
   138f0:	mov	r0, #0
   138f4:	mov	r1, sl
   138f8:	mov	r2, r7
   138fc:	sub	r3, fp, #44	; 0x2c
   13900:	str	r0, [fp, #-36]	; 0xffffffdc
   13904:	str	r0, [fp, #-40]	; 0xffffffd8
   13908:	str	r0, [fp, #-44]	; 0xffffffd4
   1390c:	str	r0, [r6]
   13910:	str	r0, [r6, #4]
   13914:	sub	r0, fp, #40	; 0x28
   13918:	str	r0, [sp]
   1391c:	mov	r0, r5
   13920:	bl	1a40c <flatcc_json_parser_integer@@Base>
   13924:	cmp	r0, sl
   13928:	mov	r1, sl
   1392c:	beq	13ab8 <test@@Base+0xff8>
   13930:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13934:	mov	r2, r0
   13938:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1393c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13940:	cmp	r3, #0
   13944:	beq	13960 <test@@Base+0xea0>
   13948:	subs	r3, r0, #1
   1394c:	sbcs	r3, r1, #-2147483648	; 0x80000000
   13950:	bcs	133a0 <test@@Base+0x8e0>
   13954:	rsbs	r0, r0, #0
   13958:	rsc	r1, r1, #0
   1395c:	b	13968 <test@@Base+0xea8>
   13960:	cmn	r1, #1
   13964:	ble	133c8 <test@@Base+0x908>
   13968:	strd	r0, [r6]
   1396c:	b	13ab4 <test@@Base+0xff4>
   13970:	mov	r1, r0
   13974:	mov	r0, r5
   13978:	mov	r2, r7
   1397c:	mov	r3, #20
   13980:	bl	1851c <flatcc_json_parser_set_error@@Base>
   13984:	mov	r2, r0
   13988:	sub	r0, r7, r2
   1398c:	cmp	r0, #2
   13990:	blt	139bc <test@@Base+0xefc>
   13994:	ldrb	r0, [r2]
   13998:	cmp	r0, #32
   1399c:	bls	139a8 <test@@Base+0xee8>
   139a0:	mov	sl, r2
   139a4:	b	139d0 <test@@Base+0xf10>
   139a8:	bne	139bc <test@@Base+0xefc>
   139ac:	mov	sl, r2
   139b0:	ldrb	r0, [sl, #1]!
   139b4:	cmp	r0, #32
   139b8:	bhi	139d0 <test@@Base+0xf10>
   139bc:	mov	r1, r2
   139c0:	mov	r0, r5
   139c4:	mov	r2, r7
   139c8:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   139cc:	mov	sl, r0
   139d0:	cmp	sl, r7
   139d4:	beq	13bbc <test@@Base+0x10fc>
   139d8:	bcs	13c00 <test@@Base+0x1140>
   139dc:	ldrb	r0, [sl]
   139e0:	cmp	r0, #58	; 0x3a
   139e4:	bne	13c00 <test@@Base+0x1140>
   139e8:	add	r1, sl, #1
   139ec:	sub	r0, r7, r1
   139f0:	cmp	r0, #2
   139f4:	blt	13a1c <test@@Base+0xf5c>
   139f8:	ldrb	r0, [r1]
   139fc:	cmp	r0, #32
   13a00:	bls	13a0c <test@@Base+0xf4c>
   13a04:	mov	sl, r1
   13a08:	b	13a2c <test@@Base+0xf6c>
   13a0c:	bne	13a1c <test@@Base+0xf5c>
   13a10:	ldrb	r0, [sl, #2]!
   13a14:	cmp	r0, #32
   13a18:	bhi	13a2c <test@@Base+0xf6c>
   13a1c:	mov	r0, r5
   13a20:	mov	r2, r7
   13a24:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13a28:	mov	sl, r0
   13a2c:	cmp	sl, r7
   13a30:	beq	13bbc <test@@Base+0x10fc>
   13a34:	mov	r0, r9
   13a38:	mov	r1, #2
   13a3c:	mov	r2, #4
   13a40:	mov	r3, #4
   13a44:	bl	16bd8 <flatcc_builder_table_add@@Base>
   13a48:	cmp	r0, #0
   13a4c:	beq	13c84 <test@@Base+0x11c4>
   13a50:	mov	r6, r0
   13a54:	mov	r0, #0
   13a58:	mov	r1, sl
   13a5c:	mov	r2, r7
   13a60:	sub	r3, fp, #44	; 0x2c
   13a64:	str	r0, [fp, #-36]	; 0xffffffdc
   13a68:	str	r0, [fp, #-40]	; 0xffffffd8
   13a6c:	str	r0, [fp, #-44]	; 0xffffffd4
   13a70:	str	r0, [r6]
   13a74:	sub	r0, fp, #40	; 0x28
   13a78:	str	r0, [sp]
   13a7c:	mov	r0, r5
   13a80:	bl	1a40c <flatcc_json_parser_integer@@Base>
   13a84:	cmp	r0, sl
   13a88:	mov	r1, sl
   13a8c:	beq	13ab8 <test@@Base+0xff8>
   13a90:	mov	r2, r0
   13a94:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13a98:	cmp	r0, #0
   13a9c:	bne	133a0 <test@@Base+0x8e0>
   13aa0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13aa4:	cmp	r0, #0
   13aa8:	bne	133c8 <test@@Base+0x908>
   13aac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13ab0:	str	r0, [r6]
   13ab4:	mov	r1, r2
   13ab8:	cmp	sl, r1
   13abc:	beq	13c84 <test@@Base+0x11c4>
   13ac0:	sub	r0, r7, r1
   13ac4:	cmp	r0, #2
   13ac8:	blt	13af4 <test@@Base+0x1034>
   13acc:	ldrb	r0, [r1]
   13ad0:	cmp	r0, #32
   13ad4:	bls	13ae0 <test@@Base+0x1020>
   13ad8:	mov	r6, r1
   13adc:	b	13b04 <test@@Base+0x1044>
   13ae0:	bne	13af4 <test@@Base+0x1034>
   13ae4:	mov	r6, r1
   13ae8:	ldrb	r0, [r6, #1]!
   13aec:	cmp	r0, #32
   13af0:	bhi	13b04 <test@@Base+0x1044>
   13af4:	mov	r0, r5
   13af8:	mov	r2, r7
   13afc:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13b00:	mov	r6, r0
   13b04:	cmp	r6, r7
   13b08:	beq	13bbc <test@@Base+0x10fc>
   13b0c:	ldrb	r0, [r6]
   13b10:	cmp	r0, #44	; 0x2c
   13b14:	bne	13b74 <test@@Base+0x10b4>
   13b18:	add	r1, r6, #1
   13b1c:	sub	r0, r7, r1
   13b20:	cmp	r0, #2
   13b24:	blt	13b4c <test@@Base+0x108c>
   13b28:	ldrb	r0, [r1]
   13b2c:	cmp	r0, #32
   13b30:	bls	13b3c <test@@Base+0x107c>
   13b34:	mov	r6, r1
   13b38:	b	13b5c <test@@Base+0x109c>
   13b3c:	bne	13b4c <test@@Base+0x108c>
   13b40:	ldrb	r0, [r6, #2]!
   13b44:	cmp	r0, #32
   13b48:	bhi	13b5c <test@@Base+0x109c>
   13b4c:	mov	r0, r5
   13b50:	mov	r2, r7
   13b54:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13b58:	mov	r6, r0
   13b5c:	cmp	r6, r7
   13b60:	beq	13bbc <test@@Base+0x10fc>
   13b64:	ldrb	r0, [r6]
   13b68:	cmp	r0, #125	; 0x7d
   13b6c:	bne	12bf0 <test@@Base+0x130>
   13b70:	mov	r0, #125	; 0x7d
   13b74:	cmp	r6, r7
   13b78:	bcs	13c20 <test@@Base+0x1160>
   13b7c:	cmp	r0, #125	; 0x7d
   13b80:	bne	13c20 <test@@Base+0x1160>
   13b84:	mov	r0, r9
   13b88:	bl	162ec <flatcc_builder_end_table@@Base>
   13b8c:	mov	r1, r0
   13b90:	mov	r0, r9
   13b94:	bl	14b20 <flatcc_builder_end_buffer@@Base>
   13b98:	add	r1, r6, #1
   13b9c:	sub	r0, r7, r1
   13ba0:	cmp	r0, #2
   13ba4:	blt	13d1c <test@@Base+0x125c>
   13ba8:	ldrb	r0, [r1]
   13bac:	cmp	r0, #32
   13bb0:	bls	13d0c <test@@Base+0x124c>
   13bb4:	mov	r6, r1
   13bb8:	b	13d2c <test@@Base+0x126c>
   13bbc:	ldr	r3, [r4]
   13bc0:	movw	r0, #50359	; 0xc4b7
   13bc4:	mov	r1, #13
   13bc8:	mov	r2, #1
   13bcc:	movt	r0, #1
   13bd0:	bl	12930 <fwrite@plt>
   13bd4:	mov	sl, r7
   13bd8:	b	13c84 <test@@Base+0x11c4>
   13bdc:	add	r0, sp, #24
   13be0:	mov	r1, ip
   13be4:	mov	r2, r8
   13be8:	mov	r3, #13
   13bec:	b	13c7c <test@@Base+0x11bc>
   13bf0:	ldr	r0, [r4]
   13bf4:	movw	r1, #50373	; 0xc4c5
   13bf8:	mov	r2, #123	; 0x7b
   13bfc:	b	13c64 <test@@Base+0x11a4>
   13c00:	ldr	r0, [r4]
   13c04:	movw	r1, #50373	; 0xc4c5
   13c08:	mov	r2, #58	; 0x3a
   13c0c:	movt	r1, #1
   13c10:	bl	12978 <fprintf@plt>
   13c14:	add	r0, sp, #24
   13c18:	mov	r1, sl
   13c1c:	b	13c74 <test@@Base+0x11b4>
   13c20:	ldr	r0, [r4]
   13c24:	movw	r1, #50373	; 0xc4c5
   13c28:	mov	r2, #125	; 0x7d
   13c2c:	b	13c64 <test@@Base+0x11a4>
   13c30:	add	r0, sp, #24
   13c34:	mov	r1, ip
   13c38:	mov	r2, r7
   13c3c:	mov	r3, #13
   13c40:	bl	1851c <flatcc_json_parser_set_error@@Base>
   13c44:	ldr	r9, [sp, #16]
   13c48:	movw	r4, #61536	; 0xf060
   13c4c:	mov	sl, r0
   13c50:	movt	r4, #2
   13c54:	b	13c84 <test@@Base+0x11c4>
   13c58:	ldr	r0, [r4]
   13c5c:	movw	r1, #50373	; 0xc4c5
   13c60:	mov	r2, #58	; 0x3a
   13c64:	movt	r1, #1
   13c68:	bl	12978 <fprintf@plt>
   13c6c:	add	r0, sp, #24
   13c70:	mov	r1, r6
   13c74:	mov	r2, r7
   13c78:	mov	r3, #17
   13c7c:	bl	1851c <flatcc_json_parser_set_error@@Base>
   13c80:	mov	sl, r0
   13c84:	ldr	r0, [sp, #48]	; 0x30
   13c88:	ldr	r4, [r4]
   13c8c:	cmp	r0, #0
   13c90:	bne	13cb0 <test@@Base+0x11f0>
   13c94:	movw	r0, #50433	; 0xc501
   13c98:	mov	r1, #15
   13c9c:	mov	r2, #1
   13ca0:	mov	r3, r4
   13ca4:	movt	r0, #1
   13ca8:	bl	12930 <fwrite@plt>
   13cac:	b	13ce8 <test@@Base+0x1228>
   13cb0:	ldr	r5, [sp, #28]
   13cb4:	ldr	r6, [sp, #40]	; 0x28
   13cb8:	ldr	r7, [sp, #60]	; 0x3c
   13cbc:	bl	184fc <flatcc_json_parser_error_string@@Base>
   13cc0:	movw	r1, #50422	; 0xc4f6
   13cc4:	str	r0, [sp]
   13cc8:	sub	r0, r7, r5
   13ccc:	mov	r2, r6
   13cd0:	movt	r1, #1
   13cd4:	add	r3, r0, #1
   13cd8:	mov	r0, r4
   13cdc:	bl	12978 <fprintf@plt>
   13ce0:	mov	r0, r9
   13ce4:	bl	140f8 <flatcc_builder_reset@@Base>
   13ce8:	ldr	r0, [sp, #48]	; 0x30
   13cec:	ldr	r1, [sp, #12]
   13cf0:	str	r0, [r1]
   13cf4:	mov	r0, sl
   13cf8:	sub	sp, fp, #28
   13cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d00:	add	r0, sp, #24
   13d04:	mov	r2, r7
   13d08:	b	13be8 <test@@Base+0x1128>
   13d0c:	bne	13d1c <test@@Base+0x125c>
   13d10:	ldrb	r0, [r6, #2]!
   13d14:	cmp	r0, #32
   13d18:	bhi	13d2c <test@@Base+0x126c>
   13d1c:	add	r0, sp, #24
   13d20:	mov	r2, r7
   13d24:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   13d28:	mov	r6, r0
   13d2c:	cmp	r6, r7
   13d30:	mov	sl, r7
   13d34:	beq	13c84 <test@@Base+0x11c4>
   13d38:	ldr	r3, [r4]
   13d3c:	movw	r0, #50395	; 0xc4db
   13d40:	mov	r1, #26
   13d44:	mov	r2, #1
   13d48:	movt	r0, #1
   13d4c:	bl	12930 <fwrite@plt>
   13d50:	mov	sl, r6
   13d54:	b	13c84 <test@@Base+0x11c4>
   13d58:	ldr	r9, [sp, #16]
   13d5c:	b	13c84 <test@@Base+0x11c4>

00013d60 <main@@Base>:
   13d60:	push	{r4, sl, fp, lr}
   13d64:	add	fp, sp, #8
   13d68:	sub	sp, sp, #240	; 0xf0
   13d6c:	mvn	r0, #0
   13d70:	add	r4, sp, #4
   13d74:	str	r0, [fp, #-12]
   13d78:	mov	r0, r4
   13d7c:	bl	13f64 <flatcc_builder_init@@Base>
   13d80:	movw	r1, #49708	; 0xc22c
   13d84:	movw	r0, #645	; 0x285
   13d88:	sub	r3, fp, #12
   13d8c:	movt	r1, #1
   13d90:	add	r2, r1, r0
   13d94:	mov	r0, r4
   13d98:	bl	12ac0 <test@@Base>
   13d9c:	mov	r0, r4
   13da0:	bl	14104 <flatcc_builder_clear@@Base>
   13da4:	ldr	r0, [fp, #-12]
   13da8:	sub	sp, fp, #8
   13dac:	pop	{r4, sl, fp, pc}

00013db0 <flatcc_builder_default_alloc@@Base>:
   13db0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13db4:	add	fp, sp, #24
   13db8:	mov	r4, r1
   13dbc:	cmp	r2, #0
   13dc0:	beq	13e08 <flatcc_builder_default_alloc@@Base+0x58>
   13dc4:	ldr	r0, [fp, #8]
   13dc8:	mov	r8, r3
   13dcc:	sub	r1, r0, #1
   13dd0:	cmp	r1, #6
   13dd4:	bhi	13e30 <flatcc_builder_default_alloc@@Base+0x80>
   13dd8:	add	r3, pc, #4
   13ddc:	mov	r0, #256	; 0x100
   13de0:	ldr	pc, [r3, r1, lsl #2]
   13de4:	andeq	r3, r1, r4, asr #28
   13de8:	andeq	r3, r1, r0, lsr lr
   13dec:	andeq	r3, r1, r0, lsr lr
   13df0:	andeq	r3, r1, r0, lsl #28
   13df4:	andeq	r3, r1, r8, lsr lr
   13df8:	andeq	r3, r1, r0, lsr lr
   13dfc:	andeq	r3, r1, r0, asr #28
   13e00:	mov	r0, #288	; 0x120
   13e04:	b	13e44 <flatcc_builder_default_alloc@@Base+0x94>
   13e08:	ldr	r0, [r4]
   13e0c:	cmp	r0, #0
   13e10:	beq	13e28 <flatcc_builder_default_alloc@@Base+0x78>
   13e14:	bl	128f4 <free@plt>
   13e18:	mov	r6, #0
   13e1c:	str	r6, [r4]
   13e20:	str	r6, [r4, #4]
   13e24:	b	13eb4 <flatcc_builder_default_alloc@@Base+0x104>
   13e28:	mov	r6, #0
   13e2c:	b	13eb4 <flatcc_builder_default_alloc@@Base+0x104>
   13e30:	mov	r0, #32
   13e34:	b	13e44 <flatcc_builder_default_alloc@@Base+0x94>
   13e38:	mov	r0, r2
   13e3c:	b	13e44 <flatcc_builder_default_alloc@@Base+0x94>
   13e40:	mov	r0, #64	; 0x40
   13e44:	mov	r7, r0
   13e48:	lsl	r0, r0, #1
   13e4c:	cmp	r7, r2
   13e50:	bcc	13e44 <flatcc_builder_default_alloc@@Base+0x94>
   13e54:	ldr	r0, [r4, #4]
   13e58:	mov	r6, #0
   13e5c:	cmp	r0, r2
   13e60:	lsrcs	r0, r0, #1
   13e64:	cmpcs	r0, r7
   13e68:	bcs	13eb4 <flatcc_builder_default_alloc@@Base+0x104>
   13e6c:	ldr	r0, [r4]
   13e70:	mov	r1, r7
   13e74:	bl	12924 <realloc@plt>
   13e78:	cmp	r0, #0
   13e7c:	beq	13eb0 <flatcc_builder_default_alloc@@Base+0x100>
   13e80:	mov	r5, r0
   13e84:	cmp	r8, #0
   13e88:	beq	13ea8 <flatcc_builder_default_alloc@@Base+0xf8>
   13e8c:	ldr	r1, [r4, #4]
   13e90:	cmp	r7, r1
   13e94:	bls	13ea8 <flatcc_builder_default_alloc@@Base+0xf8>
   13e98:	add	r0, r5, r1
   13e9c:	sub	r2, r7, r1
   13ea0:	mov	r1, #0
   13ea4:	bl	12990 <memset@plt>
   13ea8:	stm	r4, {r5, r7}
   13eac:	b	13eb4 <flatcc_builder_default_alloc@@Base+0x104>
   13eb0:	mvn	r6, #0
   13eb4:	mov	r0, r6
   13eb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013ebc <flatcc_builder_flush_vtable_cache@@Base>:
   13ebc:	push	{r4, r5, fp, lr}
   13ec0:	add	fp, sp, #8
   13ec4:	mov	r4, r0
   13ec8:	ldr	r0, [r0, #116]	; 0x74
   13ecc:	cmp	r0, #0
   13ed0:	popeq	{r4, r5, fp, pc}
   13ed4:	ldr	r0, [r4, #92]	; 0x5c
   13ed8:	ldr	r2, [r4, #96]	; 0x60
   13edc:	mov	r1, #0
   13ee0:	mov	r5, #0
   13ee4:	bl	12990 <memset@plt>
   13ee8:	mov	r0, #16
   13eec:	str	r5, [r4, #120]	; 0x78
   13ef0:	str	r0, [r4, #124]	; 0x7c
   13ef4:	pop	{r4, r5, fp, pc}

00013ef8 <flatcc_builder_custom_init@@Base>:
   13ef8:	push	{r4, r5, r6, r7, fp, lr}
   13efc:	add	fp, sp, #16
   13f00:	mov	r6, r2
   13f04:	mov	r7, r1
   13f08:	mov	r1, #0
   13f0c:	mov	r2, #232	; 0xe8
   13f10:	mov	r5, r3
   13f14:	mov	r4, r0
   13f18:	bl	12990 <memset@plt>
   13f1c:	ldr	r0, [fp, #8]
   13f20:	cmp	r7, #0
   13f24:	bne	13f3c <flatcc_builder_custom_init@@Base+0x44>
   13f28:	movw	r7, #31844	; 0x7c64
   13f2c:	mov	r1, #1
   13f30:	add	r6, r4, #188	; 0xbc
   13f34:	movt	r7, #1
   13f38:	str	r1, [r4, #184]	; 0xb8
   13f3c:	movw	r1, #15792	; 0x3db0
   13f40:	cmp	r5, #0
   13f44:	str	r6, [r4, #36]	; 0x24
   13f48:	str	r0, [r4, #40]	; 0x28
   13f4c:	mov	r0, #0
   13f50:	str	r7, [r4, #44]	; 0x2c
   13f54:	movt	r1, #1
   13f58:	movne	r1, r5
   13f5c:	str	r1, [r4, #48]	; 0x30
   13f60:	pop	{r4, r5, r6, r7, fp, pc}

00013f64 <flatcc_builder_init@@Base>:
   13f64:	push	{r4, r5, fp, lr}
   13f68:	add	fp, sp, #8
   13f6c:	mov	r1, #0
   13f70:	mov	r2, #232	; 0xe8
   13f74:	mov	r4, r0
   13f78:	mov	r5, #0
   13f7c:	bl	12990 <memset@plt>
   13f80:	mov	r0, #1
   13f84:	movw	r1, #31844	; 0x7c64
   13f88:	add	r2, r4, #188	; 0xbc
   13f8c:	str	r0, [r4, #184]	; 0xb8
   13f90:	movw	r0, #15792	; 0x3db0
   13f94:	movt	r1, #1
   13f98:	str	r2, [r4, #36]	; 0x24
   13f9c:	str	r5, [r4, #40]	; 0x28
   13fa0:	movt	r0, #1
   13fa4:	str	r1, [r4, #44]	; 0x2c
   13fa8:	str	r0, [r4, #48]	; 0x30
   13fac:	mov	r0, #0
   13fb0:	pop	{r4, r5, fp, pc}

00013fb4 <flatcc_builder_custom_reset@@Base>:
   13fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fb8:	add	fp, sp, #28
   13fbc:	sub	sp, sp, #4
   13fc0:	mov	r9, r2
   13fc4:	mov	r8, r1
   13fc8:	mov	sl, r0
   13fcc:	add	r7, r0, #52	; 0x34
   13fd0:	mov	r5, #0
   13fd4:	add	r6, sl, r5, lsl #3
   13fd8:	ldr	r0, [r6, #52]	; 0x34
   13fdc:	cmp	r0, #0
   13fe0:	beq	14028 <flatcc_builder_custom_reset@@Base+0x74>
   13fe4:	cmp	r9, #0
   13fe8:	cmpne	r5, #5
   13fec:	beq	14018 <flatcc_builder_custom_reset@@Base+0x64>
   13ff0:	ldr	r0, [sl, #40]	; 0x28
   13ff4:	ldr	r4, [sl, #48]	; 0x30
   13ff8:	mov	r1, r7
   13ffc:	mov	r2, #1
   14000:	mov	r3, #1
   14004:	str	r5, [sp]
   14008:	blx	r4
   1400c:	cmp	r0, #0
   14010:	bne	140c8 <flatcc_builder_custom_reset@@Base+0x114>
   14014:	ldr	r0, [r6, #52]	; 0x34
   14018:	ldr	r2, [r6, #56]	; 0x38
   1401c:	mov	r1, #0
   14020:	bl	12990 <memset@plt>
   14024:	b	14034 <flatcc_builder_custom_reset@@Base+0x80>
   14028:	ldr	r0, [r6, #56]	; 0x38
   1402c:	cmp	r0, #0
   14030:	bne	140d8 <flatcc_builder_custom_reset@@Base+0x124>
   14034:	add	r5, r5, #1
   14038:	add	r7, r7, #8
   1403c:	cmp	r5, #8
   14040:	bne	13fd4 <flatcc_builder_custom_reset@@Base+0x20>
   14044:	mov	r0, #0
   14048:	vmov.i32	q8, #0	; 0x00000000
   1404c:	mov	r5, #0
   14050:	str	r0, [sl, #120]	; 0x78
   14054:	ldr	r1, [sl, #124]	; 0x7c
   14058:	cmp	r1, #0
   1405c:	movne	r1, #16
   14060:	strne	r1, [sl, #124]	; 0x7c
   14064:	add	r1, sl, #148	; 0x94
   14068:	str	r0, [sl, #136]	; 0x88
   1406c:	str	r0, [sl, #140]	; 0x8c
   14070:	strh	r0, [sl, #128]	; 0x80
   14074:	str	r0, [sl, #32]
   14078:	cmp	r8, #0
   1407c:	vst1.32	{d16-d17}, [r1]
   14080:	ldr	r2, [sl, #60]	; 0x3c
   14084:	ldr	r1, [sl, #52]	; 0x34
   14088:	ldr	r3, [sl, #76]	; 0x4c
   1408c:	str	r2, [sl, #16]
   14090:	str	r0, [sl, #20]
   14094:	str	r0, [sl, #24]
   14098:	movne	r0, #0
   1409c:	str	r3, [sl]
   140a0:	str	r1, [sl, #4]
   140a4:	strne	r0, [sl, #172]	; 0xac
   140a8:	strne	r0, [sl, #176]	; 0xb0
   140ac:	strne	r0, [sl, #180]	; 0xb4
   140b0:	ldr	r0, [sl, #184]	; 0xb8
   140b4:	cmp	r0, #0
   140b8:	beq	140cc <flatcc_builder_custom_reset@@Base+0x118>
   140bc:	add	r0, sl, #188	; 0xbc
   140c0:	bl	17b34 <flatcc_emitter_reset@@Base>
   140c4:	b	140cc <flatcc_builder_custom_reset@@Base+0x118>
   140c8:	mvn	r5, #0
   140cc:	mov	r0, r5
   140d0:	sub	sp, fp, #28
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	movw	r0, #50961	; 0xc711
   140dc:	movw	r1, #50979	; 0xc723
   140e0:	movw	r3, #51049	; 0xc769
   140e4:	movw	r2, #434	; 0x1b2
   140e8:	movt	r0, #1
   140ec:	movt	r1, #1
   140f0:	movt	r3, #1
   140f4:	bl	129c0 <__assert_fail@plt>

000140f8 <flatcc_builder_reset@@Base>:
   140f8:	mov	r1, #0
   140fc:	mov	r2, #0
   14100:	b	13fb4 <flatcc_builder_custom_reset@@Base>

00014104 <flatcc_builder_clear@@Base>:
   14104:	push	{r4, r5, r6, r7, fp, lr}
   14108:	add	fp, sp, #16
   1410c:	sub	sp, sp, #8
   14110:	mov	r7, r0
   14114:	add	r5, r0, #52	; 0x34
   14118:	mov	r6, #0
   1411c:	ldr	r0, [r7, #40]	; 0x28
   14120:	ldr	r4, [r7, #48]	; 0x30
   14124:	mov	r1, r5
   14128:	mov	r2, #0
   1412c:	mov	r3, #0
   14130:	str	r6, [sp]
   14134:	blx	r4
   14138:	add	r6, r6, #1
   1413c:	add	r5, r5, #8
   14140:	cmp	r6, #8
   14144:	bne	1411c <flatcc_builder_clear@@Base+0x18>
   14148:	ldr	r0, [r7, #184]	; 0xb8
   1414c:	cmp	r0, #0
   14150:	beq	1415c <flatcc_builder_clear@@Base+0x58>
   14154:	add	r0, r7, #188	; 0xbc
   14158:	bl	17c00 <flatcc_emitter_clear@@Base>
   1415c:	mov	r0, r7
   14160:	mov	r1, #0
   14164:	mov	r2, #232	; 0xe8
   14168:	sub	sp, fp, #16
   1416c:	pop	{r4, r5, r6, r7, fp, lr}
   14170:	b	12990 <memset@plt>

00014174 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14174:	push	{r4, r5, r6, r7, fp, lr}
   14178:	add	fp, sp, #16
   1417c:	sub	sp, sp, #8
   14180:	mov	r4, r0
   14184:	ldr	r0, [r0, #112]	; 0x70
   14188:	add	r1, r1, #7
   1418c:	ldr	r7, [r4, #228]	; 0xe4
   14190:	bic	r5, r1, #3
   14194:	add	r6, r4, #108	; 0x6c
   14198:	add	r2, r7, r5
   1419c:	cmp	r2, r0
   141a0:	bls	141c8 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   141a4:	ldr	r0, [r4, #40]	; 0x28
   141a8:	ldr	ip, [r4, #48]	; 0x30
   141ac:	mov	r1, #7
   141b0:	mov	r3, #0
   141b4:	str	r1, [sp]
   141b8:	mov	r1, r6
   141bc:	blx	ip
   141c0:	cmp	r0, #0
   141c4:	bne	14214 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   141c8:	ldr	r0, [r6]
   141cc:	adds	r6, r0, r7
   141d0:	beq	14204 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   141d4:	mov	r0, r6
   141d8:	mov	r1, #0
   141dc:	mov	r2, r5
   141e0:	bl	12990 <memset@plt>
   141e4:	ldr	r0, [r4, #224]	; 0xe0
   141e8:	str	r0, [r6], #4
   141ec:	ldr	r0, [r4, #228]	; 0xe4
   141f0:	add	r1, r0, #4
   141f4:	add	r0, r0, r5
   141f8:	str	r1, [r4, #224]	; 0xe0
   141fc:	str	r0, [r4, #228]	; 0xe4
   14200:	b	14208 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   14204:	mov	r6, #0
   14208:	mov	r0, r6
   1420c:	sub	sp, fp, #16
   14210:	pop	{r4, r5, r6, r7, fp, pc}
   14214:	movw	r0, #55497	; 0xd8c9
   14218:	movw	r1, #50979	; 0xc723
   1421c:	movw	r3, #55043	; 0xd703
   14220:	mov	r2, #308	; 0x134
   14224:	movt	r0, #1
   14228:	movt	r1, #1
   1422c:	movt	r3, #1
   14230:	bl	129c0 <__assert_fail@plt>

00014234 <flatcc_builder_enter_user_frame@@Base>:
   14234:	push	{r4, r5, r6, r7, fp, lr}
   14238:	add	fp, sp, #16
   1423c:	sub	sp, sp, #8
   14240:	mov	r4, r0
   14244:	ldr	r0, [r0, #112]	; 0x70
   14248:	add	r1, r1, #7
   1424c:	ldr	r7, [r4, #228]	; 0xe4
   14250:	bic	r5, r1, #3
   14254:	add	r6, r4, #108	; 0x6c
   14258:	add	r2, r7, r5
   1425c:	cmp	r2, r0
   14260:	bls	14288 <flatcc_builder_enter_user_frame@@Base+0x54>
   14264:	ldr	r0, [r4, #40]	; 0x28
   14268:	ldr	ip, [r4, #48]	; 0x30
   1426c:	mov	r1, #7
   14270:	mov	r3, #0
   14274:	str	r1, [sp]
   14278:	mov	r1, r6
   1427c:	blx	ip
   14280:	cmp	r0, #0
   14284:	bne	142d0 <flatcc_builder_enter_user_frame@@Base+0x9c>
   14288:	ldr	r0, [r6]
   1428c:	adds	r6, r0, r7
   14290:	beq	142c4 <flatcc_builder_enter_user_frame@@Base+0x90>
   14294:	mov	r0, r6
   14298:	mov	r1, #0
   1429c:	mov	r2, r5
   142a0:	bl	12990 <memset@plt>
   142a4:	ldr	r0, [r4, #224]	; 0xe0
   142a8:	str	r0, [r6]
   142ac:	ldr	r1, [r4, #228]	; 0xe4
   142b0:	add	r0, r1, #4
   142b4:	add	r1, r1, r5
   142b8:	str	r0, [r4, #224]	; 0xe0
   142bc:	str	r1, [r4, #228]	; 0xe4
   142c0:	b	142c8 <flatcc_builder_enter_user_frame@@Base+0x94>
   142c4:	mov	r0, #0
   142c8:	sub	sp, fp, #16
   142cc:	pop	{r4, r5, r6, r7, fp, pc}
   142d0:	movw	r0, #55497	; 0xd8c9
   142d4:	movw	r1, #50979	; 0xc723
   142d8:	movw	r3, #55043	; 0xd703
   142dc:	mov	r2, #308	; 0x134
   142e0:	movt	r0, #1
   142e4:	movt	r1, #1
   142e8:	movt	r3, #1
   142ec:	bl	129c0 <__assert_fail@plt>

000142f0 <flatcc_builder_exit_user_frame@@Base>:
   142f0:	push	{fp, lr}
   142f4:	mov	fp, sp
   142f8:	ldr	r1, [r0, #224]	; 0xe0
   142fc:	cmp	r1, #0
   14300:	subne	r2, r1, #4
   14304:	strne	r2, [r0, #228]	; 0xe4
   14308:	ldrne	r2, [r0, #108]	; 0x6c
   1430c:	addne	r1, r2, r1
   14310:	ldrne	r1, [r1, #-4]
   14314:	strne	r1, [r0, #224]	; 0xe0
   14318:	movne	r0, r1
   1431c:	popne	{fp, pc}
   14320:	movw	r0, #51111	; 0xc7a7
   14324:	movw	r1, #50979	; 0xc723
   14328:	movw	r3, #51136	; 0xc7c0
   1432c:	movw	r2, #542	; 0x21e
   14330:	movt	r0, #1
   14334:	movt	r1, #1
   14338:	movt	r3, #1
   1433c:	bl	129c0 <__assert_fail@plt>

00014340 <flatcc_builder_exit_user_frame_at@@Base>:
   14340:	push	{fp, lr}
   14344:	mov	fp, sp
   14348:	ldr	r2, [r0, #224]	; 0xe0
   1434c:	cmp	r2, r1
   14350:	bcc	14360 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   14354:	str	r1, [r0, #224]	; 0xe0
   14358:	pop	{fp, lr}
   1435c:	b	142f0 <flatcc_builder_exit_user_frame@@Base>
   14360:	movw	r0, #51194	; 0xc7fa
   14364:	movw	r1, #50979	; 0xc723
   14368:	movw	r3, #51225	; 0xc819
   1436c:	movw	r2, #551	; 0x227
   14370:	movt	r0, #1
   14374:	movt	r1, #1
   14378:	movt	r3, #1
   1437c:	bl	129c0 <__assert_fail@plt>

00014380 <flatcc_builder_get_current_user_frame@@Base>:
   14380:	ldr	r0, [r0, #224]	; 0xe0
   14384:	bx	lr

00014388 <flatcc_builder_get_user_frame_ptr@@Base>:
   14388:	ldr	r0, [r0, #108]	; 0x6c
   1438c:	add	r0, r0, r1
   14390:	bx	lr

00014394 <flatcc_builder_embed_buffer@@Base>:
   14394:	push	{r4, r5, r6, r7, fp, lr}
   14398:	add	fp, sp, #16
   1439c:	sub	sp, sp, #88	; 0x58
   143a0:	mov	r4, r0
   143a4:	ldr	r0, [fp, #8]
   143a8:	mov	r5, r3
   143ac:	mov	r7, r2
   143b0:	mov	r2, r1
   143b4:	sub	r1, fp, #18
   143b8:	strh	r0, [fp, #-18]	; 0xffffffee
   143bc:	mov	r0, r4
   143c0:	ldr	r3, [r4, #152]	; 0x98
   143c4:	cmp	r3, #0
   143c8:	movwne	r3, #1
   143cc:	bl	144f8 <flatcc_builder_embed_buffer@@Base+0x164>
   143d0:	ldr	r1, [fp, #12]
   143d4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   143d8:	ldr	r0, [r4, #136]	; 0x88
   143dc:	mov	r2, #0
   143e0:	str	r2, [sp, #12]
   143e4:	str	r2, [sp, #8]
   143e8:	and	r1, r1, #2
   143ec:	sub	r3, r3, #1
   143f0:	add	r1, r5, r1, lsl #1
   143f4:	sub	r1, r0, r1
   143f8:	and	r3, r1, r3
   143fc:	add	r1, r3, r5
   14400:	str	r1, [fp, #-24]	; 0xffffffe8
   14404:	ldr	r1, [r4, #152]	; 0x98
   14408:	cmp	r1, #0
   1440c:	mov	r1, #0
   14410:	beq	14430 <flatcc_builder_embed_buffer@@Base+0x9c>
   14414:	mov	r1, #4
   14418:	sub	r2, fp, #24
   1441c:	str	r1, [sp, #20]
   14420:	str	r2, [sp, #16]
   14424:	mov	r2, #1
   14428:	str	r1, [sp, #8]
   1442c:	str	r2, [sp, #12]
   14430:	cmp	r5, #0
   14434:	beq	14458 <flatcc_builder_embed_buffer@@Base+0xc4>
   14438:	add	r6, sp, #8
   1443c:	add	r1, r1, r5
   14440:	add	r6, r6, r2, lsl #3
   14444:	add	r2, r2, #1
   14448:	str	r1, [sp, #8]
   1444c:	str	r7, [r6, #8]
   14450:	str	r5, [r6, #12]
   14454:	str	r2, [sp, #12]
   14458:	cmp	r3, #0
   1445c:	beq	14488 <flatcc_builder_embed_buffer@@Base+0xf4>
   14460:	add	r7, sp, #8
   14464:	movw	r6, #50449	; 0xc511
   14468:	add	r1, r1, r3
   1446c:	add	r7, r7, r2, lsl #3
   14470:	movt	r6, #1
   14474:	add	r2, r2, #1
   14478:	str	r1, [sp, #8]
   1447c:	str	r6, [r7, #8]
   14480:	str	r3, [r7, #12]
   14484:	str	r2, [sp, #12]
   14488:	cmp	r1, #0
   1448c:	ble	144e4 <flatcc_builder_embed_buffer@@Base+0x150>
   14490:	sub	r5, r0, r1
   14494:	ldr	r0, [r4, #36]	; 0x24
   14498:	ldr	r7, [r4, #44]	; 0x2c
   1449c:	str	r1, [sp]
   144a0:	add	r1, sp, #8
   144a4:	add	r1, r1, #8
   144a8:	mov	r3, r5
   144ac:	blx	r7
   144b0:	cmp	r0, #0
   144b4:	streq	r5, [r4, #136]	; 0x88
   144b8:	moveq	r0, r5
   144bc:	subeq	sp, fp, #16
   144c0:	popeq	{r4, r5, r6, r7, fp, pc}
   144c4:	movw	r0, #55497	; 0xd8c9
   144c8:	movw	r1, #50979	; 0xc723
   144cc:	movw	r3, #55176	; 0xd788
   144d0:	movw	r2, #651	; 0x28b
   144d4:	movt	r0, #1
   144d8:	movt	r1, #1
   144dc:	movt	r3, #1
   144e0:	bl	129c0 <__assert_fail@plt>
   144e4:	movw	r0, #55497	; 0xd8c9
   144e8:	movw	r1, #50979	; 0xc723
   144ec:	movw	r3, #55176	; 0xd788
   144f0:	movw	r2, #647	; 0x287
   144f4:	b	144d4 <flatcc_builder_embed_buffer@@Base+0x140>
   144f8:	push	{r4, sl, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	sub	sp, sp, #80	; 0x50
   14504:	cmp	r2, #0
   14508:	bne	14518 <flatcc_builder_embed_buffer@@Base+0x184>
   1450c:	ldrh	r2, [r0, #132]	; 0x84
   14510:	cmp	r2, #0
   14514:	movweq	r2, #1
   14518:	ldrh	r4, [r1]
   1451c:	cmp	r4, #4
   14520:	movwcc	r4, #4
   14524:	cmpcs	r4, r2
   14528:	bcs	14538 <flatcc_builder_embed_buffer@@Base+0x1a4>
   1452c:	cmp	r4, r2
   14530:	movcc	r4, r2
   14534:	strh	r4, [r1]
   14538:	cmp	r3, #0
   1453c:	bne	145b0 <flatcc_builder_embed_buffer@@Base+0x21c>
   14540:	ldr	r4, [r0, #140]	; 0x8c
   14544:	sub	r1, r2, #1
   14548:	ands	r1, r4, r1
   1454c:	beq	145b0 <flatcc_builder_embed_buffer@@Base+0x21c>
   14550:	movw	r2, #50449	; 0xc511
   14554:	str	r1, [sp, #20]
   14558:	cmn	r1, #1
   1455c:	movt	r2, #1
   14560:	str	r2, [sp, #16]
   14564:	mov	r2, #1
   14568:	str	r1, [sp, #8]
   1456c:	str	r2, [sp, #12]
   14570:	add	r2, r1, r4
   14574:	str	r2, [r0, #140]	; 0x8c
   14578:	ble	145b8 <flatcc_builder_embed_buffer@@Base+0x224>
   1457c:	ldr	r2, [r0, #36]	; 0x24
   14580:	ldr	ip, [r0, #44]	; 0x2c
   14584:	add	r0, sp, #8
   14588:	str	r1, [sp]
   1458c:	mov	r3, r4
   14590:	add	r1, r0, #8
   14594:	mov	r0, r2
   14598:	mov	r2, #1
   1459c:	blx	ip
   145a0:	cmp	r0, #0
   145a4:	bne	145cc <flatcc_builder_embed_buffer@@Base+0x238>
   145a8:	cmn	r4, #1
   145ac:	beq	145ec <flatcc_builder_embed_buffer@@Base+0x258>
   145b0:	sub	sp, fp, #8
   145b4:	pop	{r4, sl, fp, pc}
   145b8:	movw	r0, #55497	; 0xd8c9
   145bc:	movw	r1, #50979	; 0xc723
   145c0:	movw	r3, #55364	; 0xd844
   145c4:	movw	r2, #673	; 0x2a1
   145c8:	b	145dc <flatcc_builder_embed_buffer@@Base+0x248>
   145cc:	movw	r0, #55497	; 0xd8c9
   145d0:	movw	r1, #50979	; 0xc723
   145d4:	movw	r3, #55364	; 0xd844
   145d8:	movw	r2, #677	; 0x2a5
   145dc:	movt	r0, #1
   145e0:	movt	r1, #1
   145e4:	movt	r3, #1
   145e8:	bl	129c0 <__assert_fail@plt>
   145ec:	movw	r0, #55497	; 0xd8c9
   145f0:	movw	r1, #50979	; 0xc723
   145f4:	movw	r3, #55110	; 0xd746
   145f8:	movw	r2, #702	; 0x2be
   145fc:	movt	r0, #1
   14600:	movt	r1, #1
   14604:	movt	r3, #1
   14608:	bl	129c0 <__assert_fail@plt>

0001460c <flatcc_builder_create_buffer@@Base>:
   1460c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14610:	add	fp, sp, #28
   14614:	sub	sp, sp, #100	; 0x64
   14618:	ldr	sl, [fp, #12]
   1461c:	mov	r4, r0
   14620:	ldr	r0, [fp, #8]
   14624:	mov	r7, r1
   14628:	mov	r5, #0
   1462c:	mov	r6, r3
   14630:	sub	r1, fp, #30
   14634:	str	r5, [sp, #12]
   14638:	and	r9, sl, #1
   1463c:	strh	r0, [fp, #-30]	; 0xffffffe2
   14640:	mov	r0, r4
   14644:	mov	r3, r9
   14648:	bl	144f8 <flatcc_builder_embed_buffer@@Base+0x164>
   1464c:	ldrh	r0, [r4, #128]	; 0x80
   14650:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14654:	str	r6, [sp, #8]
   14658:	cmp	r0, r1
   1465c:	strhcc	r1, [r4, #128]	; 0x80
   14660:	cmp	r7, #0
   14664:	beq	14680 <flatcc_builder_create_buffer@@Base+0x74>
   14668:	ldr	r5, [r7]
   1466c:	cmp	r5, #0
   14670:	str	r5, [sp, #12]
   14674:	movwne	r5, #1
   14678:	lsl	r7, r5, #2
   1467c:	b	14684 <flatcc_builder_create_buffer@@Base+0x78>
   14680:	mov	r7, #0
   14684:	ldr	r0, [r4, #136]	; 0x88
   14688:	and	r2, sl, #2
   1468c:	mov	r3, #0
   14690:	sub	r6, r1, #1
   14694:	ands	ip, sl, #3
   14698:	mov	sl, #4
   1469c:	mov	r1, #4
   146a0:	str	r3, [sp, #20]
   146a4:	str	r3, [sp, #16]
   146a8:	sub	r2, r0, r2, lsl #1
   146ac:	sub	r2, r2, r7
   146b0:	sub	r2, r2, #4
   146b4:	beq	146d8 <flatcc_builder_create_buffer@@Base+0xcc>
   146b8:	mov	r1, #4
   146bc:	sub	r3, fp, #40	; 0x28
   146c0:	str	r1, [sp, #28]
   146c4:	str	r3, [sp, #24]
   146c8:	str	r1, [sp, #16]
   146cc:	mov	r3, #1
   146d0:	mov	r1, #8
   146d4:	str	r3, [sp, #20]
   146d8:	add	lr, sp, #16
   146dc:	and	r6, r2, r6
   146e0:	sub	r8, fp, #36	; 0x24
   146e4:	str	r1, [sp, #16]
   146e8:	cmp	r5, #0
   146ec:	add	r2, lr, r3, lsl #3
   146f0:	str	r8, [r2, #8]
   146f4:	str	sl, [r2, #12]
   146f8:	add	r2, r3, #1
   146fc:	str	r2, [sp, #20]
   14700:	beq	14724 <flatcc_builder_create_buffer@@Base+0x118>
   14704:	add	r2, lr, r2, lsl #3
   14708:	add	r1, r1, r7
   1470c:	add	r5, sp, #12
   14710:	str	r1, [sp, #16]
   14714:	str	r5, [r2, #8]
   14718:	str	r7, [r2, #12]
   1471c:	orr	r2, r3, #2
   14720:	str	r2, [sp, #20]
   14724:	cmp	r6, #0
   14728:	beq	14750 <flatcc_builder_create_buffer@@Base+0x144>
   1472c:	movw	r5, #50449	; 0xc511
   14730:	add	r3, lr, r2, lsl #3
   14734:	add	r1, r1, r6
   14738:	add	r2, r2, #1
   1473c:	movt	r5, #1
   14740:	str	r1, [sp, #16]
   14744:	str	r5, [r3, #8]
   14748:	str	r6, [r3, #12]
   1474c:	str	r2, [sp, #20]
   14750:	sub	r7, r0, r1
   14754:	cmp	ip, #0
   14758:	mov	r6, #144	; 0x90
   1475c:	ldr	r3, [sp, #8]
   14760:	mov	r0, r7
   14764:	addne	r0, r0, #4
   14768:	cmp	r9, #0
   1476c:	movweq	r6, #140	; 0x8c
   14770:	cmp	r1, #0
   14774:	ldr	r6, [r4, r6]
   14778:	sub	r3, r3, r0
   1477c:	str	r3, [fp, #-36]	; 0xffffffdc
   14780:	sub	r0, r6, r0
   14784:	str	r0, [fp, #-40]	; 0xffffffd8
   14788:	ble	147e0 <flatcc_builder_create_buffer@@Base+0x1d4>
   1478c:	ldr	r0, [r4, #36]	; 0x24
   14790:	ldr	r6, [r4, #44]	; 0x2c
   14794:	str	r1, [sp]
   14798:	add	r1, lr, #8
   1479c:	mov	r3, r7
   147a0:	blx	r6
   147a4:	cmp	r0, #0
   147a8:	bne	147f4 <flatcc_builder_create_buffer@@Base+0x1e8>
   147ac:	cmp	r7, #0
   147b0:	str	r7, [r4, #136]	; 0x88
   147b4:	movne	r0, r7
   147b8:	subne	sp, fp, #28
   147bc:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c0:	movw	r0, #55497	; 0xd8c9
   147c4:	movw	r1, #50979	; 0xc723
   147c8:	movw	r3, #51294	; 0xc85e
   147cc:	mov	r2, #772	; 0x304
   147d0:	movt	r0, #1
   147d4:	movt	r1, #1
   147d8:	movt	r3, #1
   147dc:	bl	129c0 <__assert_fail@plt>
   147e0:	movw	r0, #55497	; 0xd8c9
   147e4:	movw	r1, #50979	; 0xc723
   147e8:	movw	r3, #55176	; 0xd788
   147ec:	movw	r2, #647	; 0x287
   147f0:	b	14804 <flatcc_builder_create_buffer@@Base+0x1f8>
   147f4:	movw	r0, #55497	; 0xd8c9
   147f8:	movw	r1, #50979	; 0xc723
   147fc:	movw	r3, #55176	; 0xd788
   14800:	movw	r2, #651	; 0x28b
   14804:	movt	r0, #1
   14808:	movt	r1, #1
   1480c:	movt	r3, #1
   14810:	bl	129c0 <__assert_fail@plt>

00014814 <flatcc_builder_create_struct@@Base>:
   14814:	push	{r4, r5, r6, sl, fp, lr}
   14818:	add	fp, sp, #16
   1481c:	sub	sp, sp, #80	; 0x50
   14820:	cmp	r3, #0
   14824:	beq	148fc <flatcc_builder_create_struct@@Base+0xe8>
   14828:	mov	r5, r0
   1482c:	ldrh	r0, [r0, #128]	; 0x80
   14830:	mov	r4, #0
   14834:	cmp	r0, r3
   14838:	strhcc	r3, [r5, #128]	; 0x80
   1483c:	sub	r3, r3, #1
   14840:	cmp	r2, #0
   14844:	ldr	r0, [r5, #136]	; 0x88
   14848:	str	r4, [sp, #12]
   1484c:	str	r4, [sp, #8]
   14850:	movne	r4, #1
   14854:	strne	r2, [sp, #20]
   14858:	strne	r1, [sp, #16]
   1485c:	strne	r2, [sp, #8]
   14860:	strne	r4, [sp, #12]
   14864:	sub	r6, r0, r2
   14868:	and	r3, r6, r3
   1486c:	cmp	r3, #0
   14870:	beq	1489c <flatcc_builder_create_struct@@Base+0x88>
   14874:	add	r1, sp, #8
   14878:	movw	r6, #50449	; 0xc511
   1487c:	add	r2, r3, r2
   14880:	add	r1, r1, r4, lsl #3
   14884:	movt	r6, #1
   14888:	add	r4, r4, #1
   1488c:	str	r2, [sp, #8]
   14890:	str	r6, [r1, #8]
   14894:	str	r3, [r1, #12]
   14898:	str	r4, [sp, #12]
   1489c:	cmp	r2, #0
   148a0:	ble	1491c <flatcc_builder_create_struct@@Base+0x108>
   148a4:	sub	r6, r0, r2
   148a8:	ldr	r0, [r5, #36]	; 0x24
   148ac:	ldr	ip, [r5, #44]	; 0x2c
   148b0:	add	r1, sp, #8
   148b4:	str	r2, [sp]
   148b8:	mov	r2, r4
   148bc:	add	r1, r1, #8
   148c0:	mov	r3, r6
   148c4:	blx	ip
   148c8:	cmp	r0, #0
   148cc:	streq	r6, [r5, #136]	; 0x88
   148d0:	moveq	r0, r6
   148d4:	subeq	sp, fp, #16
   148d8:	popeq	{r4, r5, r6, sl, fp, pc}
   148dc:	movw	r0, #55497	; 0xd8c9
   148e0:	movw	r1, #50979	; 0xc723
   148e4:	movw	r3, #55176	; 0xd788
   148e8:	movw	r2, #651	; 0x28b
   148ec:	movt	r0, #1
   148f0:	movt	r1, #1
   148f4:	movt	r3, #1
   148f8:	bl	129c0 <__assert_fail@plt>
   148fc:	movw	r0, #51425	; 0xc8e1
   14900:	movw	r1, #50979	; 0xc723
   14904:	movw	r3, #51436	; 0xc8ec
   14908:	movw	r2, #783	; 0x30f
   1490c:	movt	r0, #1
   14910:	movt	r1, #1
   14914:	movt	r3, #1
   14918:	bl	129c0 <__assert_fail@plt>
   1491c:	movw	r0, #55497	; 0xd8c9
   14920:	movw	r1, #50979	; 0xc723
   14924:	movw	r3, #55176	; 0xd788
   14928:	movw	r2, #647	; 0x287
   1492c:	b	148ec <flatcc_builder_create_struct@@Base+0xd8>

00014930 <flatcc_builder_start_buffer@@Base>:
   14930:	push	{r4, r5, r6, r7, fp, lr}
   14934:	add	fp, sp, #16
   14938:	mov	r5, r1
   1493c:	ldrh	r1, [r0, #128]	; 0x80
   14940:	mov	r6, r3
   14944:	mov	r7, r2
   14948:	mov	r4, r0
   1494c:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   14950:	mov	r1, r0
   14954:	mvn	r0, #0
   14958:	cmp	r1, #0
   1495c:	popne	{r4, r5, r6, r7, fp, pc}
   14960:	mov	r0, #1
   14964:	cmp	r5, #0
   14968:	strh	r0, [r4, #128]	; 0x80
   1496c:	ldrh	r1, [r4, #132]	; 0x84
   14970:	ldr	r2, [r4, #32]
   14974:	strh	r1, [r2, #34]	; 0x22
   14978:	strh	r7, [r4, #132]	; 0x84
   1497c:	ldrh	r1, [r4, #164]	; 0xa4
   14980:	ldr	r2, [r4, #32]
   14984:	strh	r1, [r2, #32]
   14988:	strh	r6, [r4, #164]	; 0xa4
   1498c:	ldr	r1, [r4, #32]
   14990:	ldr	r2, [r4, #144]	; 0x90
   14994:	str	r2, [r1, #20]
   14998:	ldr	r1, [r4, #32]
   1499c:	ldr	r2, [r4, #152]	; 0x98
   149a0:	str	r2, [r1, #28]
   149a4:	ldr	r3, [r4, #148]	; 0x94
   149a8:	ldr	r1, [r4, #32]
   149ac:	ldr	r2, [r4, #136]	; 0x88
   149b0:	ldr	r7, [r4, #168]	; 0xa8
   149b4:	add	r6, r3, #1
   149b8:	str	r2, [r4, #144]	; 0x90
   149bc:	str	r6, [r4, #148]	; 0x94
   149c0:	str	r3, [r4, #152]	; 0x98
   149c4:	str	r7, [r1, #16]
   149c8:	movw	r1, #50449	; 0xc511
   149cc:	movt	r1, #1
   149d0:	movne	r1, r5
   149d4:	ldr	r1, [r1]
   149d8:	str	r1, [r4, #168]	; 0xa8
   149dc:	ldr	r1, [r4, #32]
   149e0:	strh	r0, [r1, #14]
   149e4:	mov	r0, #0
   149e8:	pop	{r4, r5, r6, r7, fp, pc}
   149ec:	push	{r4, r5, r6, r7, fp, lr}
   149f0:	add	fp, sp, #16
   149f4:	sub	sp, sp, #8
   149f8:	mov	r5, r1
   149fc:	ldr	r1, [r0, #156]	; 0x9c
   14a00:	ldr	r2, [r0, #160]	; 0xa0
   14a04:	mov	r4, r0
   14a08:	add	r0, r1, #1
   14a0c:	cmp	r1, r2
   14a10:	str	r0, [r4, #156]	; 0x9c
   14a14:	bge	14a28 <flatcc_builder_start_buffer@@Base+0xf8>
   14a18:	ldr	r0, [r4, #32]
   14a1c:	add	r0, r0, #36	; 0x24
   14a20:	str	r0, [r4, #32]
   14a24:	b	14abc <flatcc_builder_start_buffer@@Base+0x18c>
   14a28:	ldr	r2, [r4, #176]	; 0xb0
   14a2c:	mvn	r6, #0
   14a30:	cmp	r2, #1
   14a34:	cmpge	r1, r2
   14a38:	bge	14af4 <flatcc_builder_start_buffer@@Base+0x1c4>
   14a3c:	add	r7, r0, r0, lsl #3
   14a40:	ldr	r0, [r4, #88]	; 0x58
   14a44:	lsl	r2, r7, #2
   14a48:	cmp	r2, r0
   14a4c:	bls	14a74 <flatcc_builder_start_buffer@@Base+0x144>
   14a50:	ldr	r0, [r4, #40]	; 0x28
   14a54:	ldr	ip, [r4, #48]	; 0x30
   14a58:	mov	r3, #4
   14a5c:	add	r1, r4, #84	; 0x54
   14a60:	str	r3, [sp]
   14a64:	mov	r3, #0
   14a68:	blx	ip
   14a6c:	cmp	r0, #0
   14a70:	bne	14b00 <flatcc_builder_start_buffer@@Base+0x1d0>
   14a74:	ldr	r1, [r4, #84]	; 0x54
   14a78:	mvn	r0, #35	; 0x23
   14a7c:	add	r0, r0, r7, lsl #2
   14a80:	adds	r0, r0, r1
   14a84:	str	r0, [r4, #32]
   14a88:	beq	14af4 <flatcc_builder_start_buffer@@Base+0x1c4>
   14a8c:	ldr	r1, [r4, #88]	; 0x58
   14a90:	movw	r3, #36409	; 0x8e39
   14a94:	ldr	r2, [r4, #176]	; 0xb0
   14a98:	movt	r3, #14563	; 0x38e3
   14a9c:	umull	r1, r3, r1, r3
   14aa0:	cmp	r2, r3, lsr #3
   14aa4:	lsr	r1, r3, #3
   14aa8:	mov	r3, r1
   14aac:	movlt	r3, r2
   14ab0:	cmp	r2, #0
   14ab4:	movle	r3, r1
   14ab8:	str	r3, [r4, #160]	; 0xa0
   14abc:	ldr	r1, [r4, #20]
   14ac0:	mvn	r3, #3
   14ac4:	mov	r6, #0
   14ac8:	str	r1, [r0, #8]
   14acc:	ldrh	r2, [r4, #130]	; 0x82
   14ad0:	strh	r2, [r0, #12]
   14ad4:	strh	r5, [r4, #130]	; 0x82
   14ad8:	ldr	r2, [r4, #28]
   14adc:	stm	r0, {r2, r3}
   14ae0:	add	r0, r1, r2
   14ae4:	str	r6, [r4, #20]
   14ae8:	add	r0, r0, #7
   14aec:	bic	r0, r0, #7
   14af0:	str	r0, [r4, #28]
   14af4:	mov	r0, r6
   14af8:	sub	sp, fp, #16
   14afc:	pop	{r4, r5, r6, r7, fp, pc}
   14b00:	movw	r0, #55497	; 0xd8c9
   14b04:	movw	r1, #50979	; 0xc723
   14b08:	movw	r3, #55043	; 0xd703
   14b0c:	mov	r2, #308	; 0x134
   14b10:	movt	r0, #1
   14b14:	movt	r1, #1
   14b18:	movt	r3, #1
   14b1c:	bl	129c0 <__assert_fail@plt>

00014b20 <flatcc_builder_end_buffer@@Base>:
   14b20:	push	{r4, r5, r6, sl, fp, lr}
   14b24:	add	fp, sp, #16
   14b28:	sub	sp, sp, #8
   14b2c:	mov	r4, r0
   14b30:	ldr	r0, [r0, #32]
   14b34:	ldrh	r0, [r0, #14]
   14b38:	cmp	r0, #1
   14b3c:	bne	14c30 <flatcc_builder_end_buffer@@Base+0x110>
   14b40:	mov	r3, r1
   14b44:	ldr	r1, [r4, #152]	; 0x98
   14b48:	ldrh	r0, [r4, #164]	; 0xa4
   14b4c:	ldrh	r2, [r4, #132]	; 0x84
   14b50:	cmp	r1, #0
   14b54:	ldrh	r1, [r4, #128]	; 0x80
   14b58:	and	r0, r0, #2
   14b5c:	orrne	r0, r0, #1
   14b60:	cmp	r1, r2
   14b64:	movcc	r1, r2
   14b68:	strhcc	r2, [r4, #128]	; 0x80
   14b6c:	str	r0, [sp, #4]
   14b70:	mov	r0, r4
   14b74:	str	r1, [sp]
   14b78:	add	r1, r4, #168	; 0xa8
   14b7c:	bl	1460c <flatcc_builder_create_buffer@@Base>
   14b80:	mov	r6, r0
   14b84:	cmp	r0, #0
   14b88:	beq	14c24 <flatcc_builder_end_buffer@@Base+0x104>
   14b8c:	ldr	r1, [r4, #32]
   14b90:	ldr	r0, [r4, #16]
   14b94:	ldr	r2, [r4, #20]
   14b98:	ldr	r3, [r1, #20]
   14b9c:	str	r3, [r4, #144]	; 0x90
   14ba0:	ldr	r3, [r1, #28]
   14ba4:	str	r3, [r4, #152]	; 0x98
   14ba8:	ldr	r3, [r1, #16]
   14bac:	str	r3, [r4, #168]	; 0xa8
   14bb0:	ldrh	r1, [r1, #32]
   14bb4:	strh	r1, [r4, #164]	; 0xa4
   14bb8:	mov	r1, #0
   14bbc:	bl	12990 <memset@plt>
   14bc0:	ldr	r0, [r4, #32]
   14bc4:	ldr	r1, [r4, #60]	; 0x3c
   14bc8:	ldr	r2, [r4, #64]	; 0x40
   14bcc:	ldr	r3, [r0, #8]
   14bd0:	str	r3, [r4, #20]
   14bd4:	ldr	r3, [r0]
   14bd8:	str	r3, [r4, #28]
   14bdc:	add	r1, r1, r3
   14be0:	ldr	r5, [r0, #4]
   14be4:	str	r1, [r4, #16]
   14be8:	sub	r1, r2, r3
   14bec:	cmp	r1, r5
   14bf0:	movhi	r1, r5
   14bf4:	str	r1, [r4, #24]
   14bf8:	ldrh	r1, [r4, #130]	; 0x82
   14bfc:	ldrh	r2, [r4, #128]	; 0x80
   14c00:	cmp	r2, r1
   14c04:	strhcc	r1, [r4, #128]	; 0x80
   14c08:	ldrh	r1, [r0, #12]
   14c0c:	sub	r0, r0, #36	; 0x24
   14c10:	str	r0, [r4, #32]
   14c14:	strh	r1, [r4, #130]	; 0x82
   14c18:	ldr	r0, [r4, #156]	; 0x9c
   14c1c:	sub	r0, r0, #1
   14c20:	str	r0, [r4, #156]	; 0x9c
   14c24:	mov	r0, r6
   14c28:	sub	sp, fp, #16
   14c2c:	pop	{r4, r5, r6, sl, fp, pc}
   14c30:	movw	r0, #51538	; 0xc952
   14c34:	movw	r1, #50979	; 0xc723
   14c38:	movw	r3, #51582	; 0xc97e
   14c3c:	movw	r2, #838	; 0x346
   14c40:	movt	r0, #1
   14c44:	movt	r1, #1
   14c48:	movt	r3, #1
   14c4c:	bl	129c0 <__assert_fail@plt>

00014c50 <flatcc_builder_start_struct@@Base>:
   14c50:	push	{r4, r5, r6, r7, fp, lr}
   14c54:	add	fp, sp, #16
   14c58:	mov	r6, r1
   14c5c:	mov	r1, r2
   14c60:	mov	r4, r0
   14c64:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   14c68:	mov	r5, #0
   14c6c:	cmp	r0, #0
   14c70:	bne	14ce0 <flatcc_builder_start_struct@@Base+0x90>
   14c74:	ldr	r1, [r4, #32]
   14c78:	mov	r0, #2
   14c7c:	strh	r0, [r1, #14]
   14c80:	ldr	r2, [r4, #28]
   14c84:	ldr	r0, [r4, #60]	; 0x3c
   14c88:	ldr	r3, [r4, #64]	; 0x40
   14c8c:	add	r0, r0, r2
   14c90:	sub	r2, r3, r2
   14c94:	mvn	r3, #3
   14c98:	cmn	r2, #4
   14c9c:	str	r0, [r4, #16]
   14ca0:	movcs	r2, r3
   14ca4:	str	r2, [r4, #24]
   14ca8:	str	r3, [r1, #4]
   14cac:	ldr	r7, [r4, #20]
   14cb0:	add	r1, r7, r6
   14cb4:	cmp	r1, r2
   14cb8:	str	r1, [r4, #20]
   14cbc:	bcc	14cdc <flatcc_builder_start_struct@@Base+0x8c>
   14cc0:	add	r1, r1, #1
   14cc4:	mov	r0, r4
   14cc8:	mvn	r2, #3
   14ccc:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   14cd0:	cmp	r0, #0
   14cd4:	bne	14ce0 <flatcc_builder_start_struct@@Base+0x90>
   14cd8:	ldr	r0, [r4, #16]
   14cdc:	add	r5, r0, r7
   14ce0:	mov	r0, r5
   14ce4:	pop	{r4, r5, r6, r7, fp, pc}

00014ce8 <flatcc_builder_struct_edit@@Base>:
   14ce8:	ldr	r0, [r0, #16]
   14cec:	bx	lr

00014cf0 <flatcc_builder_end_struct@@Base>:
   14cf0:	push	{r4, r5, fp, lr}
   14cf4:	add	fp, sp, #8
   14cf8:	mov	r4, r0
   14cfc:	ldr	r0, [r0, #32]
   14d00:	ldrh	r0, [r0, #14]
   14d04:	cmp	r0, #2
   14d08:	bne	14da8 <flatcc_builder_end_struct@@Base+0xb8>
   14d0c:	ldrh	r3, [r4, #130]	; 0x82
   14d10:	ldr	r1, [r4, #16]
   14d14:	ldr	r2, [r4, #20]
   14d18:	mov	r0, r4
   14d1c:	bl	14814 <flatcc_builder_create_struct@@Base>
   14d20:	mov	r5, r0
   14d24:	cmp	r0, #0
   14d28:	beq	14da0 <flatcc_builder_end_struct@@Base+0xb0>
   14d2c:	ldr	r0, [r4, #16]
   14d30:	ldr	r2, [r4, #20]
   14d34:	mov	r1, #0
   14d38:	bl	12990 <memset@plt>
   14d3c:	ldr	r0, [r4, #32]
   14d40:	ldr	r1, [r4, #60]	; 0x3c
   14d44:	ldr	ip, [r4, #64]	; 0x40
   14d48:	ldr	r3, [r0, #8]
   14d4c:	str	r3, [r4, #20]
   14d50:	ldr	r3, [r0]
   14d54:	str	r3, [r4, #28]
   14d58:	add	r1, r1, r3
   14d5c:	ldr	r2, [r0, #4]
   14d60:	str	r1, [r4, #16]
   14d64:	sub	r1, ip, r3
   14d68:	cmp	r1, r2
   14d6c:	movhi	r1, r2
   14d70:	str	r1, [r4, #24]
   14d74:	ldrh	r1, [r4, #130]	; 0x82
   14d78:	ldrh	r2, [r4, #128]	; 0x80
   14d7c:	cmp	r2, r1
   14d80:	strhcc	r1, [r4, #128]	; 0x80
   14d84:	ldrh	r1, [r0, #12]
   14d88:	sub	r0, r0, #36	; 0x24
   14d8c:	str	r0, [r4, #32]
   14d90:	strh	r1, [r4, #130]	; 0x82
   14d94:	ldr	r0, [r4, #156]	; 0x9c
   14d98:	sub	r0, r0, #1
   14d9c:	str	r0, [r4, #156]	; 0x9c
   14da0:	mov	r0, r5
   14da4:	pop	{r4, r5, fp, pc}
   14da8:	movw	r0, #51671	; 0xc9d7
   14dac:	movw	r1, #50979	; 0xc723
   14db0:	movw	r3, #51715	; 0xca03
   14db4:	mov	r2, #872	; 0x368
   14db8:	movt	r0, #1
   14dbc:	movt	r1, #1
   14dc0:	movt	r3, #1
   14dc4:	bl	129c0 <__assert_fail@plt>

00014dc8 <flatcc_builder_extend_vector@@Base>:
   14dc8:	push	{r4, r5, fp, lr}
   14dcc:	add	fp, sp, #8
   14dd0:	mov	r4, r0
   14dd4:	ldr	r0, [r0, #32]
   14dd8:	ldr	r2, [r0, #20]
   14ddc:	adds	r2, r2, r1
   14de0:	bcs	14e40 <flatcc_builder_extend_vector@@Base+0x78>
   14de4:	ldr	r3, [r0, #24]
   14de8:	cmp	r2, r3
   14dec:	bhi	14e40 <flatcc_builder_extend_vector@@Base+0x78>
   14df0:	str	r2, [r0, #20]
   14df4:	ldr	r0, [r4, #32]
   14df8:	ldr	r5, [r4, #20]
   14dfc:	ldr	r2, [r4, #24]
   14e00:	ldr	r0, [r0, #16]
   14e04:	mla	r0, r0, r1, r5
   14e08:	cmp	r0, r2
   14e0c:	str	r0, [r4, #20]
   14e10:	bcc	14e34 <flatcc_builder_extend_vector@@Base+0x6c>
   14e14:	add	r1, r0, #1
   14e18:	mov	r0, r4
   14e1c:	mvn	r2, #3
   14e20:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   14e24:	mov	r1, r0
   14e28:	mov	r0, #0
   14e2c:	cmp	r1, #0
   14e30:	popne	{r4, r5, fp, pc}
   14e34:	ldr	r0, [r4, #16]
   14e38:	add	r0, r0, r5
   14e3c:	pop	{r4, r5, fp, pc}
   14e40:	movw	r0, #55250	; 0xd7d2
   14e44:	movw	r1, #50979	; 0xc723
   14e48:	movw	r3, #55277	; 0xd7ed
   14e4c:	mov	r2, #892	; 0x37c
   14e50:	movt	r0, #1
   14e54:	movt	r1, #1
   14e58:	movt	r3, #1
   14e5c:	bl	129c0 <__assert_fail@plt>

00014e60 <flatcc_builder_vector_push@@Base>:
   14e60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e64:	add	fp, sp, #24
   14e68:	mov	r5, r0
   14e6c:	ldr	r0, [r0, #32]
   14e70:	mov	r8, r1
   14e74:	ldrh	r1, [r0, #14]
   14e78:	cmp	r1, #4
   14e7c:	bne	14f00 <flatcc_builder_vector_push@@Base+0xa0>
   14e80:	ldr	r1, [r0, #20]
   14e84:	ldr	r2, [r0, #24]
   14e88:	cmp	r1, r2
   14e8c:	bhi	14f18 <flatcc_builder_vector_push@@Base+0xb8>
   14e90:	add	r1, r1, #1
   14e94:	str	r1, [r0, #20]
   14e98:	ldr	r0, [r5, #32]
   14e9c:	ldr	r4, [r5, #20]
   14ea0:	ldr	r1, [r5, #24]
   14ea4:	ldr	r6, [r0, #16]
   14ea8:	add	r0, r4, r6
   14eac:	cmp	r0, r1
   14eb0:	str	r0, [r5, #20]
   14eb4:	bcc	14ed4 <flatcc_builder_vector_push@@Base+0x74>
   14eb8:	add	r1, r0, #1
   14ebc:	mov	r0, r5
   14ec0:	mvn	r2, #3
   14ec4:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   14ec8:	mov	r7, #0
   14ecc:	cmp	r0, #0
   14ed0:	bne	14ef8 <flatcc_builder_vector_push@@Base+0x98>
   14ed4:	ldr	r0, [r5, #16]
   14ed8:	adds	r7, r0, r4
   14edc:	beq	14ef4 <flatcc_builder_vector_push@@Base+0x94>
   14ee0:	mov	r0, r7
   14ee4:	mov	r1, r8
   14ee8:	mov	r2, r6
   14eec:	bl	12900 <memcpy@plt>
   14ef0:	b	14ef8 <flatcc_builder_vector_push@@Base+0x98>
   14ef4:	mov	r7, #0
   14ef8:	mov	r0, r7
   14efc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f00:	movw	r0, #51782	; 0xca46
   14f04:	movw	r1, #50979	; 0xc723
   14f08:	movw	r3, #51826	; 0xca72
   14f0c:	movw	r2, #907	; 0x38b
   14f10:	movt	r0, #1
   14f14:	b	14f2c <flatcc_builder_vector_push@@Base+0xcc>
   14f18:	movw	r0, #51893	; 0xcab5
   14f1c:	movw	r1, #50979	; 0xc723
   14f20:	movw	r3, #51826	; 0xca72
   14f24:	mov	r2, #908	; 0x38c
   14f28:	movt	r0, #1
   14f2c:	movt	r1, #1
   14f30:	movt	r3, #1
   14f34:	bl	129c0 <__assert_fail@plt>

00014f38 <flatcc_builder_append_vector@@Base>:
   14f38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f3c:	add	fp, sp, #24
   14f40:	mov	r6, r0
   14f44:	ldr	r0, [r0, #32]
   14f48:	mov	r8, r1
   14f4c:	ldrh	r1, [r0, #14]
   14f50:	cmp	r1, #4
   14f54:	bne	15000 <flatcc_builder_append_vector@@Base+0xc8>
   14f58:	ldr	r1, [r0, #20]
   14f5c:	mov	r9, r2
   14f60:	adds	r1, r1, r2
   14f64:	bcs	14fe0 <flatcc_builder_append_vector@@Base+0xa8>
   14f68:	ldr	r2, [r0, #24]
   14f6c:	cmp	r1, r2
   14f70:	bhi	14fe0 <flatcc_builder_append_vector@@Base+0xa8>
   14f74:	str	r1, [r0, #20]
   14f78:	ldr	r0, [r6, #32]
   14f7c:	ldr	r4, [r6, #20]
   14f80:	ldr	r1, [r6, #24]
   14f84:	ldr	r5, [r0, #16]
   14f88:	mla	r0, r5, r9, r4
   14f8c:	cmp	r0, r1
   14f90:	str	r0, [r6, #20]
   14f94:	bcc	14fb4 <flatcc_builder_append_vector@@Base+0x7c>
   14f98:	add	r1, r0, #1
   14f9c:	mov	r0, r6
   14fa0:	mvn	r2, #3
   14fa4:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   14fa8:	mov	r7, #0
   14fac:	cmp	r0, #0
   14fb0:	bne	14fd8 <flatcc_builder_append_vector@@Base+0xa0>
   14fb4:	ldr	r0, [r6, #16]
   14fb8:	adds	r7, r0, r4
   14fbc:	beq	14fd4 <flatcc_builder_append_vector@@Base+0x9c>
   14fc0:	mul	r2, r5, r9
   14fc4:	mov	r0, r7
   14fc8:	mov	r1, r8
   14fcc:	bl	12900 <memcpy@plt>
   14fd0:	b	14fd8 <flatcc_builder_append_vector@@Base+0xa0>
   14fd4:	mov	r7, #0
   14fd8:	mov	r0, r7
   14fdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fe0:	movw	r0, #55250	; 0xd7d2
   14fe4:	movw	r1, #50979	; 0xc723
   14fe8:	movw	r3, #55277	; 0xd7ed
   14fec:	mov	r2, #892	; 0x37c
   14ff0:	movt	r0, #1
   14ff4:	movt	r1, #1
   14ff8:	movt	r3, #1
   14ffc:	bl	129c0 <__assert_fail@plt>
   15000:	movw	r0, #51782	; 0xca46
   15004:	movw	r1, #50979	; 0xc723
   15008:	movw	r3, #51954	; 0xcaf2
   1500c:	movw	r2, #915	; 0x393
   15010:	movt	r0, #1
   15014:	movt	r1, #1
   15018:	movt	r3, #1
   1501c:	bl	129c0 <__assert_fail@plt>

00015020 <flatcc_builder_extend_offset_vector@@Base>:
   15020:	push	{r4, r5, fp, lr}
   15024:	add	fp, sp, #8
   15028:	mov	r4, r0
   1502c:	ldr	r0, [r0, #32]
   15030:	ldr	r2, [r0, #20]
   15034:	adds	r2, r2, r1
   15038:	cmpcc	r2, #1073741824	; 0x40000000
   1503c:	bcc	15060 <flatcc_builder_extend_offset_vector@@Base+0x40>
   15040:	movw	r0, #55250	; 0xd7d2
   15044:	movw	r1, #50979	; 0xc723
   15048:	movw	r3, #55277	; 0xd7ed
   1504c:	mov	r2, #892	; 0x37c
   15050:	movt	r0, #1
   15054:	movt	r1, #1
   15058:	movt	r3, #1
   1505c:	bl	129c0 <__assert_fail@plt>
   15060:	str	r2, [r0, #20]
   15064:	ldr	r5, [r4, #20]
   15068:	ldr	r2, [r4, #24]
   1506c:	add	r0, r5, r1, lsl #2
   15070:	cmp	r0, r2
   15074:	str	r0, [r4, #20]
   15078:	bcc	1509c <flatcc_builder_extend_offset_vector@@Base+0x7c>
   1507c:	add	r1, r0, #1
   15080:	mov	r0, r4
   15084:	mvn	r2, #3
   15088:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   1508c:	mov	r1, r0
   15090:	mov	r0, #0
   15094:	cmp	r1, #0
   15098:	popne	{r4, r5, fp, pc}
   1509c:	ldr	r0, [r4, #16]
   150a0:	add	r0, r0, r5
   150a4:	pop	{r4, r5, fp, pc}

000150a8 <flatcc_builder_offset_vector_push@@Base>:
   150a8:	push	{r4, r5, r6, r7, fp, lr}
   150ac:	add	fp, sp, #16
   150b0:	mov	r6, r0
   150b4:	ldr	r0, [r0, #32]
   150b8:	mov	r4, r1
   150bc:	ldrh	r1, [r0, #14]
   150c0:	cmp	r1, #5
   150c4:	bne	15128 <flatcc_builder_offset_vector_push@@Base+0x80>
   150c8:	ldr	r1, [r0, #20]
   150cc:	mov	r5, #0
   150d0:	cmn	r1, #-1073741823	; 0xc0000001
   150d4:	beq	15120 <flatcc_builder_offset_vector_push@@Base+0x78>
   150d8:	add	r1, r1, #1
   150dc:	str	r1, [r0, #20]
   150e0:	ldr	r7, [r6, #20]
   150e4:	ldr	r0, [r6, #24]
   150e8:	add	r1, r7, #4
   150ec:	cmp	r1, r0
   150f0:	str	r1, [r6, #20]
   150f4:	bcc	15110 <flatcc_builder_offset_vector_push@@Base+0x68>
   150f8:	add	r1, r7, #5
   150fc:	mov	r0, r6
   15100:	mvn	r2, #3
   15104:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   15108:	cmp	r0, #0
   1510c:	bne	15120 <flatcc_builder_offset_vector_push@@Base+0x78>
   15110:	ldr	r0, [r6, #16]
   15114:	adds	r0, r0, r7
   15118:	movne	r5, r0
   1511c:	strne	r4, [r0]
   15120:	mov	r0, r5
   15124:	pop	{r4, r5, r6, r7, fp, pc}
   15128:	movw	r0, #52031	; 0xcb3f
   1512c:	movw	r1, #50979	; 0xc723
   15130:	movw	r3, #52082	; 0xcb72
   15134:	movw	r2, #934	; 0x3a6
   15138:	movt	r0, #1
   1513c:	movt	r1, #1
   15140:	movt	r3, #1
   15144:	bl	129c0 <__assert_fail@plt>

00015148 <flatcc_builder_append_offset_vector@@Base>:
   15148:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1514c:	add	fp, sp, #24
   15150:	mov	r6, r0
   15154:	ldr	r0, [r0, #32]
   15158:	mov	r8, r1
   1515c:	ldrh	r1, [r0, #14]
   15160:	cmp	r1, #5
   15164:	bne	15200 <flatcc_builder_append_offset_vector@@Base+0xb8>
   15168:	ldr	r1, [r0, #20]
   1516c:	mov	r5, r2
   15170:	adds	r1, r1, r2
   15174:	cmpcc	r1, #1073741824	; 0x40000000
   15178:	bcc	1519c <flatcc_builder_append_offset_vector@@Base+0x54>
   1517c:	movw	r0, #55250	; 0xd7d2
   15180:	movw	r1, #50979	; 0xc723
   15184:	movw	r3, #55277	; 0xd7ed
   15188:	mov	r2, #892	; 0x37c
   1518c:	movt	r0, #1
   15190:	movt	r1, #1
   15194:	movt	r3, #1
   15198:	bl	129c0 <__assert_fail@plt>
   1519c:	str	r1, [r0, #20]
   151a0:	ldr	r4, [r6, #20]
   151a4:	ldr	r1, [r6, #24]
   151a8:	add	r0, r4, r5, lsl #2
   151ac:	cmp	r0, r1
   151b0:	str	r0, [r6, #20]
   151b4:	bcc	151d4 <flatcc_builder_append_offset_vector@@Base+0x8c>
   151b8:	add	r1, r0, #1
   151bc:	mov	r0, r6
   151c0:	mvn	r2, #3
   151c4:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   151c8:	mov	r7, #0
   151cc:	cmp	r0, #0
   151d0:	bne	151f8 <flatcc_builder_append_offset_vector@@Base+0xb0>
   151d4:	ldr	r0, [r6, #16]
   151d8:	adds	r7, r0, r4
   151dc:	beq	151f4 <flatcc_builder_append_offset_vector@@Base+0xac>
   151e0:	lsl	r2, r5, #2
   151e4:	mov	r0, r7
   151e8:	mov	r1, r8
   151ec:	bl	12900 <memcpy@plt>
   151f0:	b	151f8 <flatcc_builder_append_offset_vector@@Base+0xb0>
   151f4:	mov	r7, #0
   151f8:	mov	r0, r7
   151fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15200:	movw	r0, #52031	; 0xcb3f
   15204:	movw	r1, #50979	; 0xc723
   15208:	movw	r3, #52180	; 0xcbd4
   1520c:	mov	r2, #948	; 0x3b4
   15210:	movt	r0, #1
   15214:	movt	r1, #1
   15218:	movt	r3, #1
   1521c:	bl	129c0 <__assert_fail@plt>

00015220 <flatcc_builder_extend_string@@Base>:
   15220:	push	{r4, r5, fp, lr}
   15224:	add	fp, sp, #8
   15228:	mov	r4, r0
   1522c:	ldr	r0, [r0, #32]
   15230:	ldrh	r2, [r0, #14]
   15234:	cmp	r2, #6
   15238:	bne	15290 <flatcc_builder_extend_string@@Base+0x70>
   1523c:	ldr	r2, [r0, #20]
   15240:	adds	r2, r2, r1
   15244:	bcs	152b0 <flatcc_builder_extend_string@@Base+0x90>
   15248:	str	r2, [r0, #20]
   1524c:	ldr	r5, [r4, #20]
   15250:	ldr	r2, [r4, #24]
   15254:	add	r0, r5, r1
   15258:	cmp	r0, r2
   1525c:	str	r0, [r4, #20]
   15260:	bcc	15284 <flatcc_builder_extend_string@@Base+0x64>
   15264:	add	r1, r0, #1
   15268:	mov	r0, r4
   1526c:	mvn	r2, #3
   15270:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   15274:	mov	r1, r0
   15278:	mov	r0, #0
   1527c:	cmp	r1, #0
   15280:	popne	{r4, r5, fp, pc}
   15284:	ldr	r0, [r4, #16]
   15288:	add	r0, r0, r5
   1528c:	pop	{r4, r5, fp, pc}
   15290:	movw	r0, #52296	; 0xcc48
   15294:	movw	r1, #50979	; 0xc723
   15298:	movw	r3, #52340	; 0xcc74
   1529c:	movw	r2, #957	; 0x3bd
   152a0:	movt	r0, #1
   152a4:	movt	r1, #1
   152a8:	movt	r3, #1
   152ac:	bl	129c0 <__assert_fail@plt>
   152b0:	movw	r0, #55250	; 0xd7d2
   152b4:	movw	r1, #50979	; 0xc723
   152b8:	movw	r3, #55277	; 0xd7ed
   152bc:	mov	r2, #892	; 0x37c
   152c0:	movt	r0, #1
   152c4:	movt	r1, #1
   152c8:	movt	r3, #1
   152cc:	bl	129c0 <__assert_fail@plt>

000152d0 <flatcc_builder_append_string@@Base>:
   152d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152d4:	add	fp, sp, #24
   152d8:	mov	r6, r0
   152dc:	ldr	r0, [r0, #32]
   152e0:	mov	r8, r1
   152e4:	ldrh	r1, [r0, #14]
   152e8:	cmp	r1, #6
   152ec:	bne	15364 <flatcc_builder_append_string@@Base+0x94>
   152f0:	ldr	r1, [r0, #20]
   152f4:	mov	r4, r2
   152f8:	adds	r1, r1, r2
   152fc:	bcs	15384 <flatcc_builder_append_string@@Base+0xb4>
   15300:	str	r1, [r0, #20]
   15304:	ldr	r5, [r6, #20]
   15308:	ldr	r1, [r6, #24]
   1530c:	add	r0, r5, r4
   15310:	cmp	r0, r1
   15314:	str	r0, [r6, #20]
   15318:	bcc	15338 <flatcc_builder_append_string@@Base+0x68>
   1531c:	add	r1, r0, #1
   15320:	mov	r0, r6
   15324:	mvn	r2, #3
   15328:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   1532c:	mov	r7, #0
   15330:	cmp	r0, #0
   15334:	bne	1535c <flatcc_builder_append_string@@Base+0x8c>
   15338:	ldr	r0, [r6, #16]
   1533c:	adds	r7, r0, r5
   15340:	beq	15358 <flatcc_builder_append_string@@Base+0x88>
   15344:	mov	r0, r7
   15348:	mov	r1, r8
   1534c:	mov	r2, r4
   15350:	bl	12900 <memcpy@plt>
   15354:	b	1535c <flatcc_builder_append_string@@Base+0x8c>
   15358:	mov	r7, #0
   1535c:	mov	r0, r7
   15360:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15364:	movw	r0, #52296	; 0xcc48
   15368:	movw	r1, #50979	; 0xc723
   1536c:	movw	r3, #52403	; 0xccb3
   15370:	movw	r2, #966	; 0x3c6
   15374:	movt	r0, #1
   15378:	movt	r1, #1
   1537c:	movt	r3, #1
   15380:	bl	129c0 <__assert_fail@plt>
   15384:	movw	r0, #55250	; 0xd7d2
   15388:	movw	r1, #50979	; 0xc723
   1538c:	movw	r3, #55277	; 0xd7ed
   15390:	mov	r2, #892	; 0x37c
   15394:	movt	r0, #1
   15398:	movt	r1, #1
   1539c:	movt	r3, #1
   153a0:	bl	129c0 <__assert_fail@plt>

000153a4 <flatcc_builder_append_string_str@@Base>:
   153a4:	push	{r4, r5, fp, lr}
   153a8:	add	fp, sp, #8
   153ac:	mov	r5, r0
   153b0:	mov	r0, r1
   153b4:	mov	r4, r1
   153b8:	bl	1296c <strlen@plt>
   153bc:	mov	r2, r0
   153c0:	mov	r0, r5
   153c4:	mov	r1, r4
   153c8:	pop	{r4, r5, fp, lr}
   153cc:	b	152d0 <flatcc_builder_append_string@@Base>

000153d0 <flatcc_builder_append_string_strn@@Base>:
   153d0:	push	{r4, r5, r6, sl, fp, lr}
   153d4:	add	fp, sp, #16
   153d8:	mov	r6, r0
   153dc:	mov	r5, r1
   153e0:	mov	r0, r1
   153e4:	mov	r1, #0
   153e8:	mov	r4, r2
   153ec:	bl	129a8 <memchr@plt>
   153f0:	cmp	r0, #0
   153f4:	mov	r1, r5
   153f8:	subne	r4, r0, r5
   153fc:	mov	r0, r6
   15400:	mov	r2, r4
   15404:	pop	{r4, r5, r6, sl, fp, lr}
   15408:	b	152d0 <flatcc_builder_append_string@@Base>

0001540c <flatcc_builder_truncate_vector@@Base>:
   1540c:	push	{fp, lr}
   15410:	mov	fp, sp
   15414:	ldr	r2, [r0, #32]
   15418:	ldrh	r3, [r2, #14]
   1541c:	cmp	r3, #4
   15420:	bne	15468 <flatcc_builder_truncate_vector@@Base+0x5c>
   15424:	ldr	r3, [r2, #20]
   15428:	cmp	r3, r1
   1542c:	bcc	15480 <flatcc_builder_truncate_vector@@Base+0x74>
   15430:	sub	r3, r3, r1
   15434:	str	r3, [r2, #20]
   15438:	ldr	r2, [r0, #32]
   1543c:	ldr	r3, [r0, #20]
   15440:	ldr	ip, [r0, #16]
   15444:	ldr	r2, [r2, #16]
   15448:	mls	r3, r2, r1, r3
   1544c:	mul	r2, r2, r1
   15450:	mov	r1, #0
   15454:	str	r3, [r0, #20]
   15458:	add	r0, ip, r3
   1545c:	bl	12990 <memset@plt>
   15460:	mov	r0, #0
   15464:	pop	{fp, pc}
   15468:	movw	r0, #51782	; 0xca46
   1546c:	movw	r1, #50979	; 0xc723
   15470:	movw	r3, #52480	; 0xcd00
   15474:	movw	r2, #985	; 0x3d9
   15478:	movt	r0, #1
   1547c:	b	15494 <flatcc_builder_truncate_vector@@Base+0x88>
   15480:	movw	r0, #52543	; 0xcd3f
   15484:	movw	r1, #50979	; 0xc723
   15488:	movw	r3, #52480	; 0xcd00
   1548c:	movw	r2, #986	; 0x3da
   15490:	movt	r0, #1
   15494:	movt	r1, #1
   15498:	movt	r3, #1
   1549c:	bl	129c0 <__assert_fail@plt>

000154a0 <flatcc_builder_truncate_offset_vector@@Base>:
   154a0:	push	{fp, lr}
   154a4:	mov	fp, sp
   154a8:	ldr	r2, [r0, #32]
   154ac:	ldrh	r3, [r2, #14]
   154b0:	cmp	r3, #5
   154b4:	bne	154fc <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   154b8:	ldr	r3, [r2, #20]
   154bc:	cmp	r3, r1
   154c0:	bcc	15514 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   154c4:	sub	r3, r3, r1
   154c8:	str	r3, [r2, #20]
   154cc:	ldr	r2, [r0, #32]
   154d0:	ldr	r3, [r0, #20]
   154d4:	ldr	ip, [r0, #16]
   154d8:	ldr	r2, [r2, #16]
   154dc:	mls	r3, r2, r1, r3
   154e0:	mul	r2, r2, r1
   154e4:	mov	r1, #0
   154e8:	str	r3, [r0, #20]
   154ec:	add	r0, ip, r3
   154f0:	bl	12990 <memset@plt>
   154f4:	mov	r0, #0
   154f8:	pop	{fp, pc}
   154fc:	movw	r0, #52031	; 0xcb3f
   15500:	movw	r1, #50979	; 0xc723
   15504:	movw	r3, #52579	; 0xcd63
   15508:	movw	r2, #994	; 0x3e2
   1550c:	movt	r0, #1
   15510:	b	15528 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   15514:	movw	r0, #52649	; 0xcda9
   15518:	movw	r1, #50979	; 0xc723
   1551c:	movw	r3, #52579	; 0xcd63
   15520:	movw	r2, #995	; 0x3e3
   15524:	movt	r0, #1
   15528:	movt	r1, #1
   1552c:	movt	r3, #1
   15530:	bl	129c0 <__assert_fail@plt>

00015534 <flatcc_builder_truncate_string@@Base>:
   15534:	push	{fp, lr}
   15538:	mov	fp, sp
   1553c:	mov	r2, r1
   15540:	ldr	r1, [r0, #32]
   15544:	ldrh	r3, [r1, #14]
   15548:	cmp	r3, #6
   1554c:	bne	15588 <flatcc_builder_truncate_string@@Base+0x54>
   15550:	ldr	r3, [r1, #20]
   15554:	cmp	r3, r2
   15558:	bcc	155a0 <flatcc_builder_truncate_string@@Base+0x6c>
   1555c:	sub	r3, r3, r2
   15560:	str	r3, [r1, #20]
   15564:	ldr	r3, [r0, #20]
   15568:	ldr	r1, [r0, #16]
   1556c:	sub	r3, r3, r2
   15570:	str	r3, [r0, #20]
   15574:	add	r0, r1, r3
   15578:	mov	r1, #0
   1557c:	bl	12990 <memset@plt>
   15580:	mov	r0, #0
   15584:	pop	{fp, pc}
   15588:	movw	r0, #52296	; 0xcc48
   1558c:	movw	r1, #50979	; 0xc723
   15590:	movw	r3, #52708	; 0xcde4
   15594:	movw	r2, #1003	; 0x3eb
   15598:	movt	r0, #1
   1559c:	b	155b4 <flatcc_builder_truncate_string@@Base+0x80>
   155a0:	movw	r0, #52771	; 0xce23
   155a4:	movw	r1, #50979	; 0xc723
   155a8:	movw	r3, #52708	; 0xcde4
   155ac:	mov	r2, #1004	; 0x3ec
   155b0:	movt	r0, #1
   155b4:	movt	r1, #1
   155b8:	movt	r3, #1
   155bc:	bl	129c0 <__assert_fail@plt>

000155c0 <flatcc_builder_start_vector@@Base>:
   155c0:	push	{r4, r5, r6, r7, fp, lr}
   155c4:	add	fp, sp, #16
   155c8:	mov	r7, #4
   155cc:	cmp	r2, #4
   155d0:	mov	r6, r1
   155d4:	mov	r5, r3
   155d8:	mov	r4, r0
   155dc:	movls	r2, r7
   155e0:	mov	r1, r2
   155e4:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   155e8:	mov	r1, r0
   155ec:	mvn	r0, #0
   155f0:	cmp	r1, #0
   155f4:	popne	{r4, r5, r6, r7, fp, pc}
   155f8:	ldr	r0, [r4, #32]
   155fc:	str	r6, [r0, #16]
   15600:	mov	r0, #0
   15604:	ldr	r1, [r4, #32]
   15608:	str	r0, [r1, #20]
   1560c:	ldr	r1, [r4, #32]
   15610:	str	r5, [r1, #24]
   15614:	ldr	r1, [r4, #32]
   15618:	strh	r7, [r1, #14]
   1561c:	ldr	r2, [r4, #28]
   15620:	ldr	r3, [r4, #60]	; 0x3c
   15624:	ldr	r7, [r4, #64]	; 0x40
   15628:	add	r3, r3, r2
   1562c:	sub	r2, r7, r2
   15630:	str	r3, [r4, #16]
   15634:	mvn	r3, #3
   15638:	cmn	r2, #4
   1563c:	movcs	r2, r3
   15640:	str	r2, [r4, #24]
   15644:	str	r3, [r1, #4]
   15648:	pop	{r4, r5, r6, r7, fp, pc}

0001564c <flatcc_builder_start_offset_vector@@Base>:
   1564c:	push	{r4, r5, fp, lr}
   15650:	add	fp, sp, #8
   15654:	mov	r1, #4
   15658:	mov	r4, r0
   1565c:	mov	r5, #4
   15660:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   15664:	mov	r1, r0
   15668:	mvn	r0, #0
   1566c:	cmp	r1, #0
   15670:	popne	{r4, r5, fp, pc}
   15674:	ldr	r0, [r4, #32]
   15678:	mov	r2, #5
   1567c:	str	r5, [r0, #16]
   15680:	mov	r0, #0
   15684:	ldr	r1, [r4, #32]
   15688:	str	r0, [r1, #20]
   1568c:	ldr	r1, [r4, #32]
   15690:	strh	r2, [r1, #14]
   15694:	ldr	r2, [r4, #28]
   15698:	ldr	r3, [r4, #60]	; 0x3c
   1569c:	ldr	r5, [r4, #64]	; 0x40
   156a0:	add	r3, r3, r2
   156a4:	sub	r2, r5, r2
   156a8:	str	r3, [r4, #16]
   156ac:	mvn	r3, #3
   156b0:	cmn	r2, #4
   156b4:	movcs	r2, r3
   156b8:	str	r2, [r4, #24]
   156bc:	str	r3, [r1, #4]
   156c0:	pop	{r4, r5, fp, pc}

000156c4 <flatcc_builder_create_offset_vector@@Base>:
   156c4:	push	{r4, r5, r6, sl, fp, lr}
   156c8:	add	fp, sp, #16
   156cc:	mov	r6, r2
   156d0:	mov	r5, r1
   156d4:	mov	r4, r0
   156d8:	bl	1564c <flatcc_builder_start_offset_vector@@Base>
   156dc:	cmp	r0, #0
   156e0:	beq	156ec <flatcc_builder_create_offset_vector@@Base+0x28>
   156e4:	mov	r0, #0
   156e8:	pop	{r4, r5, r6, sl, fp, pc}
   156ec:	mov	r0, r4
   156f0:	mov	r1, r6
   156f4:	bl	15020 <flatcc_builder_extend_offset_vector@@Base>
   156f8:	cmp	r0, #0
   156fc:	beq	156e4 <flatcc_builder_create_offset_vector@@Base+0x20>
   15700:	lsl	r2, r6, #2
   15704:	mov	r1, r5
   15708:	bl	12900 <memcpy@plt>
   1570c:	mov	r0, r4
   15710:	pop	{r4, r5, r6, sl, fp, lr}
   15714:	b	15718 <flatcc_builder_end_offset_vector@@Base>

00015718 <flatcc_builder_end_offset_vector@@Base>:
   15718:	push	{r4, r5, fp, lr}
   1571c:	add	fp, sp, #8
   15720:	mov	r4, r0
   15724:	ldr	r0, [r0, #32]
   15728:	ldrh	r1, [r0, #14]
   1572c:	cmp	r1, #5
   15730:	bne	157d0 <flatcc_builder_end_offset_vector@@Base+0xb8>
   15734:	ldr	r2, [r0, #20]
   15738:	ldr	r1, [r4, #16]
   1573c:	mov	r0, r4
   15740:	mov	r3, #0
   15744:	bl	166f8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15748:	mov	r5, r0
   1574c:	cmp	r0, #0
   15750:	beq	157c8 <flatcc_builder_end_offset_vector@@Base+0xb0>
   15754:	ldr	r0, [r4, #16]
   15758:	ldr	r2, [r4, #20]
   1575c:	mov	r1, #0
   15760:	bl	12990 <memset@plt>
   15764:	ldr	r0, [r4, #32]
   15768:	ldr	r1, [r4, #60]	; 0x3c
   1576c:	ldr	ip, [r4, #64]	; 0x40
   15770:	ldr	r3, [r0, #8]
   15774:	str	r3, [r4, #20]
   15778:	ldr	r3, [r0]
   1577c:	str	r3, [r4, #28]
   15780:	add	r1, r1, r3
   15784:	ldr	r2, [r0, #4]
   15788:	str	r1, [r4, #16]
   1578c:	sub	r1, ip, r3
   15790:	cmp	r1, r2
   15794:	movhi	r1, r2
   15798:	str	r1, [r4, #24]
   1579c:	ldrh	r1, [r4, #130]	; 0x82
   157a0:	ldrh	r2, [r4, #128]	; 0x80
   157a4:	cmp	r2, r1
   157a8:	strhcc	r1, [r4, #128]	; 0x80
   157ac:	ldrh	r1, [r0, #12]
   157b0:	sub	r0, r0, #36	; 0x24
   157b4:	str	r0, [r4, #32]
   157b8:	strh	r1, [r4, #130]	; 0x82
   157bc:	ldr	r0, [r4, #156]	; 0x9c
   157c0:	sub	r0, r0, #1
   157c4:	str	r0, [r4, #156]	; 0x9c
   157c8:	mov	r0, r5
   157cc:	pop	{r4, r5, fp, pc}
   157d0:	movw	r0, #52031	; 0xcb3f
   157d4:	movw	r1, #50979	; 0xc723
   157d8:	movw	r3, #53614	; 0xd16e
   157dc:	movw	r2, #1480	; 0x5c8
   157e0:	movt	r0, #1
   157e4:	movt	r1, #1
   157e8:	movt	r3, #1
   157ec:	bl	129c0 <__assert_fail@plt>

000157f0 <flatcc_builder_start_string@@Base>:
   157f0:	push	{r4, r5, fp, lr}
   157f4:	add	fp, sp, #8
   157f8:	mov	r1, #1
   157fc:	mov	r4, r0
   15800:	mov	r5, #1
   15804:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   15808:	mov	r1, r0
   1580c:	mvn	r0, #0
   15810:	cmp	r1, #0
   15814:	popne	{r4, r5, fp, pc}
   15818:	ldr	r0, [r4, #32]
   1581c:	mov	r2, #6
   15820:	str	r5, [r0, #16]
   15824:	mov	r0, #0
   15828:	ldr	r1, [r4, #32]
   1582c:	str	r0, [r1, #20]
   15830:	ldr	r1, [r4, #32]
   15834:	strh	r2, [r1, #14]
   15838:	ldr	r2, [r4, #28]
   1583c:	ldr	r3, [r4, #60]	; 0x3c
   15840:	ldr	r5, [r4, #64]	; 0x40
   15844:	add	r3, r3, r2
   15848:	sub	r2, r5, r2
   1584c:	str	r3, [r4, #16]
   15850:	mvn	r3, #3
   15854:	cmn	r2, #4
   15858:	movcs	r2, r3
   1585c:	str	r2, [r4, #24]
   15860:	str	r3, [r1, #4]
   15864:	pop	{r4, r5, fp, pc}

00015868 <flatcc_builder_reserve_table@@Base>:
   15868:	push	{r4, r5, r6, sl, fp, lr}
   1586c:	add	fp, sp, #16
   15870:	sub	sp, sp, #8
   15874:	cmn	r1, #1
   15878:	ble	1594c <flatcc_builder_reserve_table@@Base+0xe4>
   1587c:	mov	r4, r0
   15880:	ldr	r0, [r0, #32]
   15884:	mov	r5, r1
   15888:	ldr	r1, [r4, #56]	; 0x38
   1588c:	ldrh	r2, [r0, #28]
   15890:	ldr	r0, [r0, #16]
   15894:	add	r6, r0, r2, lsl #1
   15898:	add	r0, r6, r5, lsl #1
   1589c:	add	r2, r0, #4
   158a0:	cmp	r2, r1
   158a4:	bls	158cc <flatcc_builder_reserve_table@@Base+0x64>
   158a8:	ldr	r0, [r4, #40]	; 0x28
   158ac:	ldr	ip, [r4, #48]	; 0x30
   158b0:	mov	r3, #0
   158b4:	add	r1, r4, #52	; 0x34
   158b8:	str	r3, [sp]
   158bc:	mov	r3, #1
   158c0:	blx	ip
   158c4:	cmp	r0, #0
   158c8:	bne	1596c <flatcc_builder_reserve_table@@Base+0x104>
   158cc:	ldr	r0, [r4, #52]	; 0x34
   158d0:	adds	r0, r0, r6
   158d4:	str	r0, [r4, #4]
   158d8:	beq	15940 <flatcc_builder_reserve_table@@Base+0xd8>
   158dc:	add	r0, r0, #4
   158e0:	lsl	r1, r5, #1
   158e4:	str	r0, [r4, #4]
   158e8:	ldr	r0, [r4, #32]
   158ec:	ldr	r3, [r4, #80]	; 0x50
   158f0:	ldr	r5, [r0, #20]
   158f4:	orr	r0, r1, #1
   158f8:	add	r2, r5, r0
   158fc:	cmp	r2, r3
   15900:	bls	15928 <flatcc_builder_reserve_table@@Base+0xc0>
   15904:	ldr	r0, [r4, #40]	; 0x28
   15908:	ldr	r6, [r4, #48]	; 0x30
   1590c:	mov	r3, #3
   15910:	add	r1, r4, #76	; 0x4c
   15914:	str	r3, [sp]
   15918:	mov	r3, #0
   1591c:	blx	r6
   15920:	cmp	r0, #0
   15924:	bne	1596c <flatcc_builder_reserve_table@@Base+0x104>
   15928:	ldr	r0, [r4, #76]	; 0x4c
   1592c:	adds	r0, r0, r5
   15930:	str	r0, [r4]
   15934:	mov	r0, #0
   15938:	mvneq	r0, #0
   1593c:	b	15944 <flatcc_builder_reserve_table@@Base+0xdc>
   15940:	mvn	r0, #0
   15944:	sub	sp, fp, #16
   15948:	pop	{r4, r5, r6, sl, fp, pc}
   1594c:	movw	r0, #52870	; 0xce86
   15950:	movw	r1, #50979	; 0xc723
   15954:	movw	r3, #52805	; 0xce45
   15958:	movw	r2, #1065	; 0x429
   1595c:	movt	r0, #1
   15960:	movt	r1, #1
   15964:	movt	r3, #1
   15968:	bl	129c0 <__assert_fail@plt>
   1596c:	movw	r0, #55497	; 0xd8c9
   15970:	movw	r1, #50979	; 0xc723
   15974:	movw	r3, #55043	; 0xd703
   15978:	mov	r2, #308	; 0x134
   1597c:	movt	r0, #1
   15980:	movt	r1, #1
   15984:	movt	r3, #1
   15988:	bl	129c0 <__assert_fail@plt>

0001598c <flatcc_builder_start_table@@Base>:
   1598c:	push	{r4, r5, r6, r7, fp, lr}
   15990:	add	fp, sp, #16
   15994:	sub	sp, sp, #8
   15998:	mov	r6, r1
   1599c:	mov	r1, #4
   159a0:	mov	r4, r0
   159a4:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   159a8:	mvn	r5, #0
   159ac:	cmp	r0, #0
   159b0:	beq	159c0 <flatcc_builder_start_table@@Base+0x34>
   159b4:	mov	r0, r5
   159b8:	sub	sp, fp, #16
   159bc:	pop	{r4, r5, r6, r7, fp, pc}
   159c0:	mov	r1, r4
   159c4:	ldr	r2, [r4, #4]
   159c8:	ldr	r3, [r4, #32]
   159cc:	ldr	r0, [r1, #52]!	; 0x34
   159d0:	sub	r0, r2, r0
   159d4:	str	r0, [r3, #16]
   159d8:	ldr	r0, [r4]
   159dc:	ldr	r3, [r4, #76]	; 0x4c
   159e0:	ldr	r2, [r4, #32]
   159e4:	sub	r0, r0, r3
   159e8:	mov	r3, #0
   159ec:	str	r0, [r2, #20]
   159f0:	ldr	r0, [r4, #12]
   159f4:	ldr	r2, [r4, #32]
   159f8:	str	r0, [r2, #24]
   159fc:	ldr	r0, [r4, #32]
   15a00:	ldrh	r2, [r4, #8]
   15a04:	strh	r2, [r0, #28]
   15a08:	movw	r0, #15186	; 0x3b52
   15a0c:	strh	r3, [r4, #8]
   15a10:	mov	r2, #3
   15a14:	movt	r0, #12137	; 0x2f69
   15a18:	str	r0, [r4, #12]
   15a1c:	ldr	r0, [r4, #32]
   15a20:	strh	r2, [r0, #14]
   15a24:	ldrh	r2, [r0, #28]
   15a28:	ldr	r0, [r0, #16]
   15a2c:	add	r7, r0, r2, lsl #1
   15a30:	add	r0, r7, r6, lsl #1
   15a34:	add	r2, r0, #4
   15a38:	ldr	r0, [r4, #56]	; 0x38
   15a3c:	cmp	r2, r0
   15a40:	bls	15a60 <flatcc_builder_start_table@@Base+0xd4>
   15a44:	ldr	r0, [r4, #40]	; 0x28
   15a48:	ldr	ip, [r4, #48]	; 0x30
   15a4c:	str	r3, [sp]
   15a50:	mov	r3, #1
   15a54:	blx	ip
   15a58:	cmp	r0, #0
   15a5c:	bne	15b04 <flatcc_builder_start_table@@Base+0x178>
   15a60:	ldr	r0, [r4, #52]	; 0x34
   15a64:	adds	r0, r0, r7
   15a68:	str	r0, [r4, #4]
   15a6c:	beq	159b4 <flatcc_builder_start_table@@Base+0x28>
   15a70:	add	r0, r0, #4
   15a74:	lsl	r1, r6, #1
   15a78:	str	r0, [r4, #4]
   15a7c:	ldr	r0, [r4, #32]
   15a80:	ldr	r3, [r4, #80]	; 0x50
   15a84:	ldr	r6, [r0, #20]
   15a88:	orr	r0, r1, #1
   15a8c:	add	r2, r6, r0
   15a90:	cmp	r2, r3
   15a94:	bls	15abc <flatcc_builder_start_table@@Base+0x130>
   15a98:	ldr	r0, [r4, #40]	; 0x28
   15a9c:	ldr	r7, [r4, #48]	; 0x30
   15aa0:	mov	r3, #3
   15aa4:	add	r1, r4, #76	; 0x4c
   15aa8:	str	r3, [sp]
   15aac:	mov	r3, #0
   15ab0:	blx	r7
   15ab4:	cmp	r0, #0
   15ab8:	bne	15b04 <flatcc_builder_start_table@@Base+0x178>
   15abc:	ldr	r0, [r4, #76]	; 0x4c
   15ac0:	adds	r0, r0, r6
   15ac4:	str	r0, [r4]
   15ac8:	beq	159b4 <flatcc_builder_start_table@@Base+0x28>
   15acc:	ldr	r0, [r4, #28]
   15ad0:	ldr	r2, [r4, #60]	; 0x3c
   15ad4:	ldr	r3, [r4, #64]	; 0x40
   15ad8:	ldr	r1, [r4, #32]
   15adc:	mov	r5, #0
   15ae0:	add	r2, r2, r0
   15ae4:	sub	r0, r3, r0
   15ae8:	str	r2, [r4, #16]
   15aec:	movw	r2, #65532	; 0xfffc
   15af0:	cmp	r0, r2
   15af4:	movcs	r0, r2
   15af8:	str	r0, [r4, #24]
   15afc:	str	r2, [r1, #4]
   15b00:	b	159b4 <flatcc_builder_start_table@@Base+0x28>
   15b04:	movw	r0, #55497	; 0xd8c9
   15b08:	movw	r1, #50979	; 0xc723
   15b0c:	movw	r3, #55043	; 0xd703
   15b10:	mov	r2, #308	; 0x134
   15b14:	movt	r0, #1
   15b18:	movt	r1, #1
   15b1c:	movt	r3, #1
   15b20:	bl	129c0 <__assert_fail@plt>

00015b24 <flatcc_builder_create_vtable@@Base>:
   15b24:	push	{r4, r5, fp, lr}
   15b28:	add	fp, sp, #8
   15b2c:	sub	sp, sp, #80	; 0x50
   15b30:	mov	r3, r2
   15b34:	mov	r2, #0
   15b38:	mov	r4, r0
   15b3c:	cmp	r3, #0
   15b40:	str	r2, [sp, #12]
   15b44:	str	r2, [sp, #8]
   15b48:	movne	r2, #1
   15b4c:	strne	r3, [sp, #20]
   15b50:	strne	r1, [sp, #16]
   15b54:	strne	r3, [sp, #8]
   15b58:	strne	r2, [sp, #12]
   15b5c:	ldr	r0, [r4, #152]	; 0x98
   15b60:	cmp	r0, #0
   15b64:	bne	15b74 <flatcc_builder_create_vtable@@Base+0x50>
   15b68:	ldr	r0, [r4, #180]	; 0xb4
   15b6c:	cmp	r0, #0
   15b70:	beq	15bc8 <flatcc_builder_create_vtable@@Base+0xa4>
   15b74:	cmp	r3, #0
   15b78:	beq	15c0c <flatcc_builder_create_vtable@@Base+0xe8>
   15b7c:	ldr	r0, [r4, #136]	; 0x88
   15b80:	ldr	ip, [r4, #44]	; 0x2c
   15b84:	add	r1, sp, #8
   15b88:	add	r1, r1, #8
   15b8c:	sub	r5, r0, r3
   15b90:	ldr	r0, [r4, #36]	; 0x24
   15b94:	str	r3, [sp]
   15b98:	mov	r3, r5
   15b9c:	blx	ip
   15ba0:	cmp	r0, #0
   15ba4:	bne	15c20 <flatcc_builder_create_vtable@@Base+0xfc>
   15ba8:	cmp	r5, #0
   15bac:	str	r5, [r4, #136]	; 0x88
   15bb0:	beq	15bc0 <flatcc_builder_create_vtable@@Base+0x9c>
   15bb4:	add	r1, r5, #1
   15bb8:	mov	r0, r1
   15bbc:	b	15c04 <flatcc_builder_create_vtable@@Base+0xe0>
   15bc0:	mov	r0, #0
   15bc4:	b	15c04 <flatcc_builder_create_vtable@@Base+0xe0>
   15bc8:	ldr	r5, [r4, #140]	; 0x8c
   15bcc:	ldr	r0, [r4, #36]	; 0x24
   15bd0:	ldr	ip, [r4, #44]	; 0x2c
   15bd4:	add	r1, r5, r3
   15bd8:	str	r1, [r4, #140]	; 0x8c
   15bdc:	add	r1, sp, #8
   15be0:	str	r3, [sp]
   15be4:	mov	r3, r5
   15be8:	add	r1, r1, #8
   15bec:	blx	ip
   15bf0:	cmp	r0, #0
   15bf4:	bne	15c40 <flatcc_builder_create_vtable@@Base+0x11c>
   15bf8:	adds	r1, r5, #1
   15bfc:	mov	r0, #0
   15c00:	movcc	r0, r1
   15c04:	sub	sp, fp, #8
   15c08:	pop	{r4, r5, fp, pc}
   15c0c:	movw	r0, #55497	; 0xd8c9
   15c10:	movw	r1, #50979	; 0xc723
   15c14:	movw	r3, #55176	; 0xd788
   15c18:	movw	r2, #647	; 0x287
   15c1c:	b	15c30 <flatcc_builder_create_vtable@@Base+0x10c>
   15c20:	movw	r0, #55497	; 0xd8c9
   15c24:	movw	r1, #50979	; 0xc723
   15c28:	movw	r3, #55176	; 0xd788
   15c2c:	movw	r2, #651	; 0x28b
   15c30:	movt	r0, #1
   15c34:	movt	r1, #1
   15c38:	movt	r3, #1
   15c3c:	bl	129c0 <__assert_fail@plt>
   15c40:	movw	r0, #55497	; 0xd8c9
   15c44:	movw	r1, #50979	; 0xc723
   15c48:	movw	r3, #55364	; 0xd844
   15c4c:	movw	r2, #677	; 0x2a5
   15c50:	movt	r0, #1
   15c54:	movt	r1, #1
   15c58:	movt	r3, #1
   15c5c:	bl	129c0 <__assert_fail@plt>

00015c60 <flatcc_builder_create_cached_vtable@@Base>:
   15c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c64:	add	fp, sp, #28
   15c68:	sub	sp, sp, #20
   15c6c:	mov	sl, r0
   15c70:	ldr	r0, [r0, #116]	; 0x74
   15c74:	mov	r8, r3
   15c78:	mov	r5, r2
   15c7c:	str	r1, [sp, #16]
   15c80:	cmp	r0, #0
   15c84:	beq	15d28 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15c88:	ldr	r1, [sl, #92]	; 0x5c
   15c8c:	rsb	r0, r0, #32
   15c90:	lsr	r0, r8, r0
   15c94:	add	r6, r1, r0, lsl #2
   15c98:	cmp	r6, #0
   15c9c:	beq	15dec <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15ca0:	ldr	r7, [r6]
   15ca4:	str	r6, [sp, #12]
   15ca8:	cmp	r7, #0
   15cac:	beq	15df4 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15cb0:	ldr	r4, [sl, #68]	; 0x44
   15cb4:	ldr	r8, [sl, #100]	; 0x64
   15cb8:	mov	r0, #0
   15cbc:	str	r0, [sp, #8]
   15cc0:	add	r9, r8, r7
   15cc4:	mov	r1, r4
   15cc8:	ldr	r0, [r9, #8]
   15ccc:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15cd0:	cmp	r0, r5
   15cd4:	bne	15cec <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15cd8:	ldr	r0, [sp, #16]
   15cdc:	mov	r2, r5
   15ce0:	bl	12960 <bcmp@plt>
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d00 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15cec:	ldr	r7, [r9, #12]!
   15cf0:	mov	r6, r9
   15cf4:	cmp	r7, #0
   15cf8:	bne	15cc0 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15cfc:	b	15de4 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d00:	ldr	r0, [sl, #152]	; 0x98
   15d04:	ldr	r1, [r9, #4]
   15d08:	cmp	r1, r0
   15d0c:	beq	15f58 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15d10:	mov	r6, r9
   15d14:	mov	r0, r9
   15d18:	ldr	r7, [r6, #12]!
   15d1c:	cmp	r7, #0
   15d20:	bne	15cbc <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15d24:	b	15df8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15d28:	ldr	r0, [sl, #124]	; 0x7c
   15d2c:	cmp	r0, #0
   15d30:	bne	15fa4 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15d34:	ldr	r0, [sl, #104]	; 0x68
   15d38:	add	r7, sl, #100	; 0x64
   15d3c:	cmp	r0, #15
   15d40:	bhi	15d6c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15d44:	ldr	r0, [sl, #40]	; 0x28
   15d48:	ldr	r6, [sl, #48]	; 0x30
   15d4c:	mov	r1, #6
   15d50:	mov	r2, #16
   15d54:	mov	r3, #0
   15d58:	str	r1, [sp]
   15d5c:	mov	r1, r7
   15d60:	blx	r6
   15d64:	cmp	r0, #0
   15d68:	bne	15f84 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15d6c:	ldr	r0, [r7]
   15d70:	mov	r7, #0
   15d74:	cmp	r0, #0
   15d78:	beq	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15d7c:	mov	r0, #16
   15d80:	mov	r2, #5
   15d84:	add	r1, sl, #92	; 0x5c
   15d88:	mov	r3, #1
   15d8c:	mov	r4, #256	; 0x100
   15d90:	str	r0, [sl, #124]	; 0x7c
   15d94:	ldr	r0, [sl, #40]	; 0x28
   15d98:	ldr	r6, [sl, #48]	; 0x30
   15d9c:	str	r2, [sp]
   15da0:	mov	r2, #256	; 0x100
   15da4:	blx	r6
   15da8:	cmp	r0, #0
   15dac:	bne	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15db0:	ldr	r0, [sl, #96]	; 0x60
   15db4:	mov	r1, r4
   15db8:	lsl	r4, r4, #1
   15dbc:	cmp	r0, r1, lsl #1
   15dc0:	bcs	15db4 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15dc4:	lsr	r1, r1, #2
   15dc8:	mvn	r0, #0
   15dcc:	mov	r2, #1
   15dd0:	add	r0, r0, #1
   15dd4:	cmp	r1, r2, lsl r0
   15dd8:	bhi	15dd0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15ddc:	str	r0, [sl, #116]	; 0x74
   15de0:	b	15c88 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15de4:	ldr	r9, [sp, #8]
   15de8:	b	15df8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15dec:	mov	r7, #0
   15df0:	b	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15df4:	mov	r9, #0
   15df8:	ldr	r4, [sl, #124]	; 0x7c
   15dfc:	ldr	r0, [sl, #104]	; 0x68
   15e00:	add	r7, sl, #100	; 0x64
   15e04:	add	r2, r4, #16
   15e08:	cmp	r2, r0
   15e0c:	bls	15e34 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15e10:	ldr	r0, [sl, #40]	; 0x28
   15e14:	ldr	r6, [sl, #48]	; 0x30
   15e18:	mov	r1, #6
   15e1c:	mov	r3, #0
   15e20:	str	r1, [sp]
   15e24:	mov	r1, r7
   15e28:	blx	r6
   15e2c:	cmp	r0, #0
   15e30:	bne	15f84 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15e34:	ldr	r0, [r7]
   15e38:	mov	r7, #0
   15e3c:	adds	r4, r0, r4
   15e40:	beq	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e44:	ldr	r0, [sl, #124]	; 0x7c
   15e48:	ldr	r1, [sl, #152]	; 0x98
   15e4c:	add	r2, r0, #16
   15e50:	str	r2, [sl, #124]	; 0x7c
   15e54:	ldr	r2, [sp, #12]
   15e58:	str	r1, [r4, #4]
   15e5c:	ldr	r1, [r2]
   15e60:	str	r1, [r4, #12]
   15e64:	ldr	r1, [sp, #16]
   15e68:	str	r0, [r2]
   15e6c:	mov	r0, sl
   15e70:	mov	r2, r5
   15e74:	bl	15b24 <flatcc_builder_create_vtable@@Base>
   15e78:	cmp	r0, #0
   15e7c:	str	r0, [r4]
   15e80:	beq	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e84:	cmp	r9, #0
   15e88:	beq	15ea4 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15e8c:	ldr	r0, [r9, #8]
   15e90:	str	r0, [r4, #8]
   15e94:	ldr	r7, [r4]
   15e98:	mov	r0, r7
   15e9c:	sub	sp, fp, #28
   15ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ea4:	ldr	r6, [sl, #120]	; 0x78
   15ea8:	ldr	r0, [sl, #172]	; 0xac
   15eac:	add	r2, r6, r5
   15eb0:	cmp	r0, #0
   15eb4:	beq	15ef0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15eb8:	cmp	r0, r2
   15ebc:	bcs	15ef0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15ec0:	ldr	r0, [sl, #116]	; 0x74
   15ec4:	cmp	r0, #0
   15ec8:	beq	15e94 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15ecc:	ldr	r0, [sl, #92]	; 0x5c
   15ed0:	ldr	r2, [sl, #96]	; 0x60
   15ed4:	mov	r1, #0
   15ed8:	mov	r5, #0
   15edc:	bl	12990 <memset@plt>
   15ee0:	mov	r0, #16
   15ee4:	str	r5, [sl, #120]	; 0x78
   15ee8:	str	r0, [sl, #124]	; 0x7c
   15eec:	b	15e94 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15ef0:	ldr	r0, [sl, #72]	; 0x48
   15ef4:	add	r7, sl, #68	; 0x44
   15ef8:	cmp	r2, r0
   15efc:	bls	15f24 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15f00:	ldr	r0, [sl, #40]	; 0x28
   15f04:	ldr	ip, [sl, #48]	; 0x30
   15f08:	mov	r1, #2
   15f0c:	mov	r3, #0
   15f10:	str	r1, [sp]
   15f14:	mov	r1, r7
   15f18:	blx	ip
   15f1c:	cmp	r0, #0
   15f20:	bne	15f84 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15f24:	ldr	r0, [r7]
   15f28:	adds	r0, r0, r6
   15f2c:	beq	15f50 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15f30:	ldr	r1, [sl, #120]	; 0x78
   15f34:	mov	r2, r5
   15f38:	str	r1, [r4, #8]
   15f3c:	add	r1, r1, r5
   15f40:	str	r1, [sl, #120]	; 0x78
   15f44:	ldr	r1, [sp, #16]
   15f48:	bl	12900 <memcpy@plt>
   15f4c:	b	15e94 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f50:	mvn	r7, #0
   15f54:	b	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15f58:	ldr	r0, [sp, #12]
   15f5c:	cmp	r6, r0
   15f60:	beq	15f7c <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15f64:	mov	r1, r0
   15f68:	ldr	r0, [r9, #12]
   15f6c:	str	r0, [r6]
   15f70:	ldr	r0, [r1]
   15f74:	str	r0, [r9, #12]
   15f78:	str	r7, [r1]
   15f7c:	ldr	r7, [r9]
   15f80:	b	15e98 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15f84:	movw	r0, #55497	; 0xd8c9
   15f88:	movw	r1, #50979	; 0xc723
   15f8c:	movw	r3, #55043	; 0xd703
   15f90:	mov	r2, #308	; 0x134
   15f94:	movt	r0, #1
   15f98:	movt	r1, #1
   15f9c:	movt	r3, #1
   15fa0:	bl	129c0 <__assert_fail@plt>
   15fa4:	movw	r0, #55437	; 0xd88d
   15fa8:	movw	r1, #50979	; 0xc723
   15fac:	movw	r3, #55452	; 0xd89c
   15fb0:	movw	r2, #342	; 0x156
   15fb4:	movt	r0, #1
   15fb8:	movt	r1, #1
   15fbc:	movt	r3, #1
   15fc0:	bl	129c0 <__assert_fail@plt>

00015fc4 <flatcc_builder_create_table@@Base>:
   15fc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fc8:	add	fp, sp, #24
   15fcc:	sub	sp, sp, #80	; 0x50
   15fd0:	ldr	r5, [fp, #12]
   15fd4:	cmn	r5, #1
   15fd8:	ble	16124 <flatcc_builder_create_table@@Base+0x160>
   15fdc:	ldr	ip, [fp, #16]
   15fe0:	tst	ip, #1
   15fe4:	beq	1613c <flatcc_builder_create_table@@Base+0x178>
   15fe8:	mov	r8, r0
   15fec:	ldrh	r0, [r0, #128]	; 0x80
   15ff0:	cmp	r3, #4
   15ff4:	movls	r3, #4
   15ff8:	cmp	r0, r3
   15ffc:	strhcc	r3, [r8, #128]	; 0x80
   16000:	cmp	r5, #1
   16004:	ldr	r0, [r8, #136]	; 0x88
   16008:	sub	r4, r0, r2
   1600c:	sub	r0, r3, #1
   16010:	and	r0, r4, r0
   16014:	sub	r4, r4, #4
   16018:	add	r3, ip, r0
   1601c:	sub	r3, r4, r3
   16020:	add	r3, r3, #1
   16024:	str	r3, [fp, #-28]	; 0xffffffe4
   16028:	blt	16058 <flatcc_builder_create_table@@Base+0x94>
   1602c:	ldr	r3, [fp, #8]
   16030:	sub	ip, r4, r0
   16034:	mvn	r4, #3
   16038:	sub	r4, r4, ip
   1603c:	ldrh	r6, [r3], #2
   16040:	subs	r5, r5, #1
   16044:	ldr	r7, [r6, r1]
   16048:	add	r7, r4, r7
   1604c:	sub	r7, r7, r6
   16050:	str	r7, [r6, r1]
   16054:	bne	1603c <flatcc_builder_create_table@@Base+0x78>
   16058:	mov	r4, #4
   1605c:	sub	r3, fp, #28
   16060:	cmp	r2, #0
   16064:	str	r4, [sp, #16]
   16068:	str	r3, [sp, #12]
   1606c:	mov	r3, #1
   16070:	str	r4, [sp, #4]
   16074:	addne	r4, r2, #4
   16078:	str	r3, [sp, #8]
   1607c:	movne	r3, #2
   16080:	strne	r2, [sp, #24]
   16084:	strne	r1, [sp, #20]
   16088:	strne	r3, [sp, #8]
   1608c:	strne	r4, [sp, #4]
   16090:	cmp	r0, #0
   16094:	beq	160c0 <flatcc_builder_create_table@@Base+0xfc>
   16098:	add	r1, sp, #4
   1609c:	movw	r2, #50449	; 0xc511
   160a0:	add	r4, r4, r0
   160a4:	add	r1, r1, r3, lsl #3
   160a8:	movt	r2, #1
   160ac:	add	r3, r3, #1
   160b0:	str	r4, [sp, #4]
   160b4:	str	r2, [r1, #8]
   160b8:	str	r0, [r1, #12]
   160bc:	str	r3, [sp, #8]
   160c0:	cmp	r4, #0
   160c4:	ble	1615c <flatcc_builder_create_table@@Base+0x198>
   160c8:	ldr	r0, [r8, #136]	; 0x88
   160cc:	ldr	r7, [r8, #44]	; 0x2c
   160d0:	add	r1, sp, #4
   160d4:	mov	r2, r3
   160d8:	add	r1, r1, #8
   160dc:	sub	r5, r0, r4
   160e0:	ldr	r0, [r8, #36]	; 0x24
   160e4:	str	r4, [sp]
   160e8:	mov	r3, r5
   160ec:	blx	r7
   160f0:	cmp	r0, #0
   160f4:	streq	r5, [r8, #136]	; 0x88
   160f8:	moveq	r0, r5
   160fc:	subeq	sp, fp, #24
   16100:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16104:	movw	r0, #55497	; 0xd8c9
   16108:	movw	r1, #50979	; 0xc723
   1610c:	movw	r3, #55176	; 0xd788
   16110:	movw	r2, #651	; 0x28b
   16114:	movt	r0, #1
   16118:	movt	r1, #1
   1611c:	movt	r3, #1
   16120:	bl	129c0 <__assert_fail@plt>
   16124:	movw	r0, #52863	; 0xce7f
   16128:	movw	r1, #50979	; 0xc723
   1612c:	movw	r3, #52881	; 0xce91
   16130:	movw	r2, #1237	; 0x4d5
   16134:	movt	r0, #1
   16138:	b	16150 <flatcc_builder_create_table@@Base+0x18c>
   1613c:	movw	r0, #53037	; 0xcf2d
   16140:	movw	r1, #50979	; 0xc723
   16144:	movw	r3, #52881	; 0xce91
   16148:	movw	r2, #1243	; 0x4db
   1614c:	movt	r0, #1
   16150:	movt	r1, #1
   16154:	movt	r3, #1
   16158:	bl	129c0 <__assert_fail@plt>
   1615c:	movw	r0, #55497	; 0xd8c9
   16160:	movw	r1, #50979	; 0xc723
   16164:	movw	r3, #55176	; 0xd788
   16168:	movw	r2, #647	; 0x287
   1616c:	b	16114 <flatcc_builder_create_table@@Base+0x150>

00016170 <flatcc_builder_check_required_field@@Base>:
   16170:	push	{fp, lr}
   16174:	mov	fp, sp
   16178:	ldr	r2, [r0, #32]
   1617c:	ldrh	r2, [r2, #14]
   16180:	cmp	r2, #3
   16184:	bne	161b4 <flatcc_builder_check_required_field@@Base+0x44>
   16188:	ldrh	r3, [r0, #8]
   1618c:	mov	r2, #0
   16190:	cmp	r3, r1
   16194:	bls	161ac <flatcc_builder_check_required_field@@Base+0x3c>
   16198:	ldr	r0, [r0, #4]
   1619c:	add	r0, r0, r1, lsl #1
   161a0:	ldrh	r2, [r0]
   161a4:	cmp	r2, #0
   161a8:	movwne	r2, #1
   161ac:	mov	r0, r2
   161b0:	pop	{fp, pc}
   161b4:	movw	r0, #53048	; 0xcf38
   161b8:	movw	r1, #50979	; 0xc723
   161bc:	movw	r3, #53091	; 0xcf63
   161c0:	movw	r2, #1272	; 0x4f8
   161c4:	movt	r0, #1
   161c8:	movt	r1, #1
   161cc:	movt	r3, #1
   161d0:	bl	129c0 <__assert_fail@plt>

000161d4 <flatcc_builder_check_union_field@@Base>:
   161d4:	push	{fp, lr}
   161d8:	mov	fp, sp
   161dc:	mov	r2, r0
   161e0:	ldr	r0, [r0, #32]
   161e4:	ldrh	r0, [r0, #14]
   161e8:	cmp	r0, #3
   161ec:	bne	1624c <flatcc_builder_check_union_field@@Base+0x78>
   161f0:	mov	r0, #0
   161f4:	cmp	r1, #0
   161f8:	beq	16238 <flatcc_builder_check_union_field@@Base+0x64>
   161fc:	ldrh	r3, [r2, #8]
   16200:	cmp	r3, r1
   16204:	popls	{fp, pc}
   16208:	ldr	r0, [r2, #4]
   1620c:	add	r0, r0, r1, lsl #1
   16210:	ldrh	r1, [r0, #-2]
   16214:	cmp	r1, #0
   16218:	beq	1623c <flatcc_builder_check_union_field@@Base+0x68>
   1621c:	ldr	r2, [r2, #16]
   16220:	ldrh	r0, [r0]
   16224:	ldrb	r1, [r2, r1]
   16228:	cmp	r1, #0
   1622c:	beq	16240 <flatcc_builder_check_union_field@@Base+0x6c>
   16230:	cmp	r0, #0
   16234:	movwne	r0, #1
   16238:	pop	{fp, pc}
   1623c:	ldrh	r0, [r0]
   16240:	clz	r0, r0
   16244:	lsr	r0, r0, #5
   16248:	pop	{fp, pc}
   1624c:	movw	r0, #53048	; 0xcf38
   16250:	movw	r1, #50979	; 0xc723
   16254:	movw	r3, #53174	; 0xcfb6
   16258:	movw	r2, #1279	; 0x4ff
   1625c:	movt	r0, #1
   16260:	movt	r1, #1
   16264:	movt	r3, #1
   16268:	bl	129c0 <__assert_fail@plt>

0001626c <flatcc_builder_check_required@@Base>:
   1626c:	push	{fp, lr}
   16270:	mov	fp, sp
   16274:	mov	r3, r0
   16278:	ldr	r0, [r0, #32]
   1627c:	ldrh	r0, [r0, #14]
   16280:	cmp	r0, #3
   16284:	bne	162cc <flatcc_builder_check_required@@Base+0x60>
   16288:	ldrh	ip, [r3, #8]
   1628c:	mov	r0, #0
   16290:	cmp	ip, r2
   16294:	poplt	{fp, pc}
   16298:	cmp	r2, #1
   1629c:	blt	162c4 <flatcc_builder_check_required@@Base+0x58>
   162a0:	ldr	ip, [r3, #4]
   162a4:	ldrh	r3, [r1]
   162a8:	add	r3, ip, r3, lsl #1
   162ac:	ldrh	r3, [r3]
   162b0:	cmp	r3, #0
   162b4:	beq	162c8 <flatcc_builder_check_required@@Base+0x5c>
   162b8:	add	r1, r1, #2
   162bc:	subs	r2, r2, #1
   162c0:	bne	162a4 <flatcc_builder_check_required@@Base+0x38>
   162c4:	mov	r0, #1
   162c8:	pop	{fp, pc}
   162cc:	movw	r0, #53048	; 0xcf38
   162d0:	movw	r1, #50979	; 0xc723
   162d4:	movw	r3, #53254	; 0xd006
   162d8:	movw	r2, #1297	; 0x511
   162dc:	movt	r0, #1
   162e0:	movt	r1, #1
   162e4:	movt	r3, #1
   162e8:	bl	129c0 <__assert_fail@plt>

000162ec <flatcc_builder_end_table@@Base>:
   162ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   162f0:	add	fp, sp, #24
   162f4:	sub	sp, sp, #16
   162f8:	mov	r4, r0
   162fc:	ldr	r0, [r0, #32]
   16300:	ldrh	r0, [r0, #14]
   16304:	cmp	r0, #3
   16308:	bne	16484 <flatcc_builder_end_table@@Base+0x198>
   1630c:	ldrh	r0, [r4, #8]
   16310:	ldr	r5, [r4, #4]
   16314:	mov	r1, #4
   16318:	movw	r2, #31153	; 0x79b1
   1631c:	movt	r2, #40503	; 0x9e37
   16320:	add	r0, r1, r0, lsl #1
   16324:	strh	r0, [r5, #-4]!
   16328:	ldrh	r1, [r4, #20]
   1632c:	uxth	r6, r0
   16330:	add	r1, r1, #4
   16334:	strh	r1, [r5, #2]
   16338:	uxth	r1, r1
   1633c:	ldr	r0, [r4, #12]
   16340:	eor	r0, r0, r6
   16344:	mul	r0, r0, r2
   16348:	eor	r0, r0, r1
   1634c:	mov	r1, r5
   16350:	mul	r3, r0, r2
   16354:	mov	r0, r4
   16358:	mov	r2, r6
   1635c:	str	r3, [r4, #12]
   16360:	bl	15c60 <flatcc_builder_create_cached_vtable@@Base>
   16364:	cmp	r0, #0
   16368:	beq	16474 <flatcc_builder_end_table@@Base+0x188>
   1636c:	mov	r7, r0
   16370:	mov	r0, r5
   16374:	mov	r1, #0
   16378:	mov	r2, r6
   1637c:	mov	r8, #0
   16380:	bl	12990 <memset@plt>
   16384:	ldr	r5, [r4, #32]
   16388:	ldr	r0, [r4, #76]	; 0x4c
   1638c:	ldr	r6, [r4]
   16390:	ldrh	r3, [r4, #130]	; 0x82
   16394:	ldr	r1, [r4, #16]
   16398:	ldr	r2, [r4, #20]
   1639c:	ldr	r5, [r5, #20]
   163a0:	add	r0, r0, r5
   163a4:	sub	r6, r6, r0
   163a8:	asr	r6, r6, #1
   163ac:	stm	sp, {r0, r6, r7}
   163b0:	mov	r0, r4
   163b4:	bl	15fc4 <flatcc_builder_create_table@@Base>
   163b8:	cmp	r0, #0
   163bc:	beq	16478 <flatcc_builder_end_table@@Base+0x18c>
   163c0:	ldr	r1, [r4, #32]
   163c4:	mov	r5, r0
   163c8:	ldr	r0, [r4, #16]
   163cc:	ldr	r2, [r4, #20]
   163d0:	ldr	r3, [r4, #52]	; 0x34
   163d4:	ldr	r7, [r1, #24]
   163d8:	str	r7, [r4, #12]
   163dc:	ldrh	r7, [r1, #28]
   163e0:	strh	r7, [r4, #8]
   163e4:	ldr	r7, [r1, #16]
   163e8:	add	r3, r3, r7
   163ec:	str	r3, [r4, #4]
   163f0:	ldr	r3, [r4, #76]	; 0x4c
   163f4:	ldr	r1, [r1, #20]
   163f8:	add	r1, r3, r1
   163fc:	str	r1, [r4]
   16400:	mov	r1, #0
   16404:	bl	12990 <memset@plt>
   16408:	ldr	r0, [r4, #32]
   1640c:	ldr	r1, [r4, #60]	; 0x3c
   16410:	ldr	r2, [r4, #64]	; 0x40
   16414:	mov	r8, r5
   16418:	ldr	r3, [r0, #8]
   1641c:	str	r3, [r4, #20]
   16420:	ldr	r3, [r0]
   16424:	str	r3, [r4, #28]
   16428:	add	r1, r1, r3
   1642c:	ldr	r7, [r0, #4]
   16430:	str	r1, [r4, #16]
   16434:	sub	r1, r2, r3
   16438:	cmp	r1, r7
   1643c:	movhi	r1, r7
   16440:	str	r1, [r4, #24]
   16444:	ldrh	r1, [r4, #130]	; 0x82
   16448:	ldrh	r2, [r4, #128]	; 0x80
   1644c:	cmp	r2, r1
   16450:	strhcc	r1, [r4, #128]	; 0x80
   16454:	ldrh	r1, [r0, #12]
   16458:	sub	r0, r0, #36	; 0x24
   1645c:	str	r0, [r4, #32]
   16460:	strh	r1, [r4, #130]	; 0x82
   16464:	ldr	r0, [r4, #156]	; 0x9c
   16468:	sub	r0, r0, #1
   1646c:	str	r0, [r4, #156]	; 0x9c
   16470:	b	16478 <flatcc_builder_end_table@@Base+0x18c>
   16474:	mov	r8, #0
   16478:	mov	r0, r8
   1647c:	sub	sp, fp, #24
   16480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16484:	movw	r0, #53048	; 0xcf38
   16488:	movw	r1, #50979	; 0xc723
   1648c:	movw	r3, #53344	; 0xd060
   16490:	movw	r2, #1317	; 0x525
   16494:	movt	r0, #1
   16498:	movt	r1, #1
   1649c:	movt	r3, #1
   164a0:	bl	129c0 <__assert_fail@plt>

000164a4 <flatcc_builder_create_vector@@Base>:
   164a4:	push	{r4, r5, r6, r7, fp, lr}
   164a8:	add	fp, sp, #16
   164ac:	sub	sp, sp, #80	; 0x50
   164b0:	mov	r7, r0
   164b4:	ldr	r0, [fp, #12]
   164b8:	cmp	r2, r0
   164bc:	bhi	165b8 <flatcc_builder_create_vector@@Base+0x114>
   164c0:	ldr	r0, [fp, #8]
   164c4:	mov	r4, r2
   164c8:	ldrh	r2, [r7, #128]	; 0x80
   164cc:	mov	r5, #4
   164d0:	cmp	r0, #4
   164d4:	movls	r0, r5
   164d8:	cmp	r2, r0
   164dc:	sub	r2, fp, #20
   164e0:	strhcc	r0, [r7, #128]	; 0x80
   164e4:	str	r4, [fp, #-20]	; 0xffffffec
   164e8:	sub	r0, r0, #1
   164ec:	ldr	ip, [r7, #136]	; 0x88
   164f0:	str	r5, [sp, #16]
   164f4:	str	r2, [sp, #12]
   164f8:	mov	r2, #1
   164fc:	str	r5, [sp, #4]
   16500:	str	r2, [sp, #8]
   16504:	mls	r6, r3, r4, ip
   16508:	mul	r3, r3, r4
   1650c:	cmp	r3, #0
   16510:	and	r0, r6, r0
   16514:	movne	r2, #2
   16518:	addne	r5, r3, #4
   1651c:	strne	r3, [sp, #24]
   16520:	strne	r1, [sp, #20]
   16524:	strne	r2, [sp, #8]
   16528:	strne	r5, [sp, #4]
   1652c:	cmp	r0, #0
   16530:	beq	1655c <flatcc_builder_create_vector@@Base+0xb8>
   16534:	add	r1, sp, #4
   16538:	movw	r3, #50449	; 0xc511
   1653c:	add	r5, r5, r0
   16540:	add	r1, r1, r2, lsl #3
   16544:	movt	r3, #1
   16548:	add	r2, r2, #1
   1654c:	str	r5, [sp, #4]
   16550:	str	r3, [r1, #8]
   16554:	str	r0, [r1, #12]
   16558:	str	r2, [sp, #8]
   1655c:	cmp	r5, #0
   16560:	ble	165d8 <flatcc_builder_create_vector@@Base+0x134>
   16564:	ldr	r0, [r7, #36]	; 0x24
   16568:	ldr	r6, [r7, #44]	; 0x2c
   1656c:	add	r1, sp, #4
   16570:	sub	r4, ip, r5
   16574:	str	r5, [sp]
   16578:	add	r1, r1, #8
   1657c:	mov	r3, r4
   16580:	blx	r6
   16584:	cmp	r0, #0
   16588:	streq	r4, [r7, #136]	; 0x88
   1658c:	moveq	r0, r4
   16590:	subeq	sp, fp, #16
   16594:	popeq	{r4, r5, r6, r7, fp, pc}
   16598:	movw	r0, #55497	; 0xd8c9
   1659c:	movw	r1, #50979	; 0xc723
   165a0:	movw	r3, #55176	; 0xd788
   165a4:	movw	r2, #651	; 0x28b
   165a8:	movt	r0, #1
   165ac:	movt	r1, #1
   165b0:	movt	r3, #1
   165b4:	bl	129c0 <__assert_fail@plt>
   165b8:	movw	r0, #53410	; 0xd0a2
   165bc:	movw	r1, #50979	; 0xc723
   165c0:	movw	r3, #53429	; 0xd0b5
   165c4:	movw	r2, #1365	; 0x555
   165c8:	movt	r0, #1
   165cc:	movt	r1, #1
   165d0:	movt	r3, #1
   165d4:	bl	129c0 <__assert_fail@plt>
   165d8:	movw	r0, #55497	; 0xd8c9
   165dc:	movw	r1, #50979	; 0xc723
   165e0:	movw	r3, #55176	; 0xd788
   165e4:	movw	r2, #647	; 0x287
   165e8:	b	165a8 <flatcc_builder_create_vector@@Base+0x104>

000165ec <flatcc_builder_end_vector@@Base>:
   165ec:	push	{r4, r5, fp, lr}
   165f0:	add	fp, sp, #8
   165f4:	sub	sp, sp, #8
   165f8:	mov	r4, r0
   165fc:	ldr	r0, [r0, #32]
   16600:	ldrh	r1, [r0, #14]
   16604:	cmp	r1, #4
   16608:	bne	166bc <flatcc_builder_end_vector@@Base+0xd0>
   1660c:	ldr	r3, [r0, #16]
   16610:	ldr	r2, [r0, #20]
   16614:	ldr	r0, [r0, #24]
   16618:	ldr	r1, [r4, #16]
   1661c:	ldrh	r5, [r4, #130]	; 0x82
   16620:	str	r0, [sp, #4]
   16624:	mov	r0, r4
   16628:	str	r5, [sp]
   1662c:	bl	164a4 <flatcc_builder_create_vector@@Base>
   16630:	mov	r5, r0
   16634:	cmp	r0, #0
   16638:	beq	166b0 <flatcc_builder_end_vector@@Base+0xc4>
   1663c:	ldr	r0, [r4, #16]
   16640:	ldr	r2, [r4, #20]
   16644:	mov	r1, #0
   16648:	bl	12990 <memset@plt>
   1664c:	ldr	r0, [r4, #32]
   16650:	ldr	r1, [r4, #60]	; 0x3c
   16654:	ldr	ip, [r4, #64]	; 0x40
   16658:	ldr	r3, [r0, #8]
   1665c:	str	r3, [r4, #20]
   16660:	ldr	r3, [r0]
   16664:	str	r3, [r4, #28]
   16668:	add	r1, r1, r3
   1666c:	ldr	r2, [r0, #4]
   16670:	str	r1, [r4, #16]
   16674:	sub	r1, ip, r3
   16678:	cmp	r1, r2
   1667c:	movhi	r1, r2
   16680:	str	r1, [r4, #24]
   16684:	ldrh	r1, [r4, #130]	; 0x82
   16688:	ldrh	r2, [r4, #128]	; 0x80
   1668c:	cmp	r2, r1
   16690:	strhcc	r1, [r4, #128]	; 0x80
   16694:	ldrh	r1, [r0, #12]
   16698:	sub	r0, r0, #36	; 0x24
   1669c:	str	r0, [r4, #32]
   166a0:	strh	r1, [r4, #130]	; 0x82
   166a4:	ldr	r0, [r4, #156]	; 0x9c
   166a8:	sub	r0, r0, #1
   166ac:	str	r0, [r4, #156]	; 0x9c
   166b0:	mov	r0, r5
   166b4:	sub	sp, fp, #8
   166b8:	pop	{r4, r5, fp, pc}
   166bc:	movw	r0, #51782	; 0xca46
   166c0:	movw	r1, #50979	; 0xc723
   166c4:	movw	r3, #53547	; 0xd12b
   166c8:	movw	r2, #1400	; 0x578
   166cc:	movt	r0, #1
   166d0:	movt	r1, #1
   166d4:	movt	r3, #1
   166d8:	bl	129c0 <__assert_fail@plt>

000166dc <flatcc_builder_vector_count@@Base>:
   166dc:	ldr	r0, [r0, #32]
   166e0:	ldr	r0, [r0, #20]
   166e4:	bx	lr

000166e8 <flatcc_builder_vector_edit@@Base>:
   166e8:	ldr	r0, [r0, #16]
   166ec:	bx	lr

000166f0 <flatcc_builder_create_offset_vector_direct@@Base>:
   166f0:	mov	r3, #0
   166f4:	b	166f8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   166f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166fc:	add	fp, sp, #24
   16700:	sub	sp, sp, #80	; 0x50
   16704:	mov	r6, #0
   16708:	cmn	r2, #-1073741823	; 0xc0000001
   1670c:	bhi	16848 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   16710:	mov	r8, r0
   16714:	ldrh	r0, [r0, #128]	; 0x80
   16718:	mov	r5, #4
   1671c:	sub	r7, fp, #28
   16720:	mov	r4, #1
   16724:	cmp	r0, #3
   16728:	movls	r0, #4
   1672c:	strhls	r0, [r8, #128]	; 0x80
   16730:	str	r2, [fp, #-28]	; 0xffffffe4
   16734:	ldr	ip, [r8, #136]	; 0x88
   16738:	str	r5, [sp, #16]
   1673c:	str	r7, [sp, #12]
   16740:	mov	r7, #0
   16744:	str	r5, [sp, #4]
   16748:	str	r4, [sp, #8]
   1674c:	cmp	r7, r2, lsl #2
   16750:	and	r6, ip, #3
   16754:	beq	16774 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16758:	lsl	r7, r2, #2
   1675c:	mov	r4, #2
   16760:	add	r5, r7, #4
   16764:	str	r7, [sp, #24]
   16768:	str	r1, [sp, #20]
   1676c:	str	r4, [sp, #8]
   16770:	str	r5, [sp, #4]
   16774:	cmp	r6, #0
   16778:	beq	167a4 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   1677c:	add	r7, sp, #4
   16780:	movw	r0, #50449	; 0xc511
   16784:	add	r5, r5, r6
   16788:	add	r7, r7, r4, lsl #3
   1678c:	movt	r0, #1
   16790:	add	r4, r4, #1
   16794:	str	r5, [sp, #4]
   16798:	str	r0, [r7, #8]
   1679c:	str	r6, [r7, #12]
   167a0:	str	r4, [sp, #8]
   167a4:	cmp	r2, #0
   167a8:	beq	16810 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   167ac:	sub	r0, r5, ip
   167b0:	mov	r6, r3
   167b4:	sub	r0, r0, #4
   167b8:	ldr	r7, [r1]
   167bc:	cmp	r7, #0
   167c0:	beq	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0xf4>
   167c4:	add	r7, r0, r7
   167c8:	cmp	r3, #0
   167cc:	str	r7, [r1]
   167d0:	beq	167f8 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   167d4:	ldrb	r7, [r6]
   167d8:	cmp	r7, #0
   167dc:	bne	167f8 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   167e0:	b	16854 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   167e4:	cmp	r3, #0
   167e8:	beq	16884 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   167ec:	ldrb	r7, [r6]
   167f0:	cmp	r7, #0
   167f4:	bne	1686c <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   167f8:	sub	r0, r0, #4
   167fc:	add	r1, r1, #4
   16800:	add	r6, r6, #1
   16804:	subs	r2, r2, #1
   16808:	bne	167b8 <flatcc_builder_create_offset_vector_direct@@Base+0xc8>
   1680c:	ldr	ip, [r8, #136]	; 0x88
   16810:	cmp	r5, #0
   16814:	ble	168a4 <flatcc_builder_create_offset_vector_direct@@Base+0x1b4>
   16818:	ldr	r0, [r8, #36]	; 0x24
   1681c:	ldr	r7, [r8, #44]	; 0x2c
   16820:	add	r1, sp, #4
   16824:	sub	r6, ip, r5
   16828:	mov	r2, r4
   1682c:	str	r5, [sp]
   16830:	add	r1, r1, #8
   16834:	mov	r3, r6
   16838:	blx	r7
   1683c:	cmp	r0, #0
   16840:	bne	168b8 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   16844:	str	r6, [r8, #136]	; 0x88
   16848:	mov	r0, r6
   1684c:	sub	sp, fp, #24
   16850:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16854:	movw	r0, #55485	; 0xd8bd
   16858:	movw	r1, #50979	; 0xc723
   1685c:	movw	r3, #55499	; 0xd8cb
   16860:	movw	r2, #1457	; 0x5b1
   16864:	movt	r0, #1
   16868:	b	16898 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   1686c:	movw	r0, #55630	; 0xd94e
   16870:	movw	r1, #50979	; 0xc723
   16874:	movw	r3, #55499	; 0xd8cb
   16878:	movw	r2, #1461	; 0x5b5
   1687c:	movt	r0, #1
   16880:	b	16898 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   16884:	movw	r0, #55497	; 0xd8c9
   16888:	movw	r1, #50979	; 0xc723
   1688c:	movw	r3, #55499	; 0xd8cb
   16890:	movw	r2, #1463	; 0x5b7
   16894:	movt	r0, #1
   16898:	movt	r1, #1
   1689c:	movt	r3, #1
   168a0:	bl	129c0 <__assert_fail@plt>
   168a4:	movw	r0, #55497	; 0xd8c9
   168a8:	movw	r1, #50979	; 0xc723
   168ac:	movw	r3, #55176	; 0xd788
   168b0:	movw	r2, #647	; 0x287
   168b4:	b	168c8 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   168b8:	movw	r0, #55497	; 0xd8c9
   168bc:	movw	r1, #50979	; 0xc723
   168c0:	movw	r3, #55176	; 0xd788
   168c4:	movw	r2, #651	; 0x28b
   168c8:	movt	r0, #1
   168cc:	movt	r1, #1
   168d0:	movt	r3, #1
   168d4:	bl	129c0 <__assert_fail@plt>

000168d8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   168d8:	push	{r4, r5, fp, lr}
   168dc:	add	fp, sp, #8
   168e0:	mov	r4, r0
   168e4:	ldr	r0, [r0, #32]
   168e8:	mov	r3, r1
   168ec:	ldrh	r1, [r0, #14]
   168f0:	cmp	r1, #5
   168f4:	bne	16990 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   168f8:	ldr	r2, [r0, #20]
   168fc:	ldr	r1, [r4, #16]
   16900:	mov	r0, r4
   16904:	bl	166f8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16908:	mov	r5, r0
   1690c:	cmp	r0, #0
   16910:	beq	16988 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16914:	ldr	r0, [r4, #16]
   16918:	ldr	r2, [r4, #20]
   1691c:	mov	r1, #0
   16920:	bl	12990 <memset@plt>
   16924:	ldr	r0, [r4, #32]
   16928:	ldr	r1, [r4, #60]	; 0x3c
   1692c:	ldr	ip, [r4, #64]	; 0x40
   16930:	ldr	r3, [r0, #8]
   16934:	str	r3, [r4, #20]
   16938:	ldr	r3, [r0]
   1693c:	str	r3, [r4, #28]
   16940:	add	r1, r1, r3
   16944:	ldr	r2, [r0, #4]
   16948:	str	r1, [r4, #16]
   1694c:	sub	r1, ip, r3
   16950:	cmp	r1, r2
   16954:	movhi	r1, r2
   16958:	str	r1, [r4, #24]
   1695c:	ldrh	r1, [r4, #130]	; 0x82
   16960:	ldrh	r2, [r4, #128]	; 0x80
   16964:	cmp	r2, r1
   16968:	strhcc	r1, [r4, #128]	; 0x80
   1696c:	ldrh	r1, [r0, #12]
   16970:	sub	r0, r0, #36	; 0x24
   16974:	str	r0, [r4, #32]
   16978:	strh	r1, [r4, #130]	; 0x82
   1697c:	ldr	r0, [r4, #156]	; 0x9c
   16980:	sub	r0, r0, #1
   16984:	str	r0, [r4, #156]	; 0x9c
   16988:	mov	r0, r5
   1698c:	pop	{r4, r5, fp, pc}
   16990:	movw	r0, #52031	; 0xcb3f
   16994:	movw	r1, #50979	; 0xc723
   16998:	movw	r3, #53688	; 0xd1b8
   1699c:	movw	r2, #1493	; 0x5d5
   169a0:	movt	r0, #1
   169a4:	movt	r1, #1
   169a8:	movt	r3, #1
   169ac:	bl	129c0 <__assert_fail@plt>

000169b0 <flatcc_builder_offset_vector_edit@@Base>:
   169b0:	ldr	r0, [r0, #16]
   169b4:	bx	lr

000169b8 <flatcc_builder_offset_vector_count@@Base>:
   169b8:	ldr	r0, [r0, #32]
   169bc:	ldr	r0, [r0, #20]
   169c0:	bx	lr

000169c4 <flatcc_builder_table_add_union@@Base>:
   169c4:	push	{r4, r5, r6, r7, fp, lr}
   169c8:	add	fp, sp, #16
   169cc:	mov	r5, r0
   169d0:	ldr	r0, [r0, #32]
   169d4:	ldrh	r0, [r0, #14]
   169d8:	cmp	r0, #3
   169dc:	bne	16a64 <flatcc_builder_table_add_union@@Base+0xa0>
   169e0:	mov	r7, r3
   169e4:	mov	r4, r2
   169e8:	mov	r6, r1
   169ec:	cmp	r3, #0
   169f0:	beq	16a00 <flatcc_builder_table_add_union@@Base+0x3c>
   169f4:	uxtb	r0, r4
   169f8:	cmp	r0, #0
   169fc:	beq	16a7c <flatcc_builder_table_add_union@@Base+0xb8>
   16a00:	cmp	r7, #0
   16a04:	beq	16a20 <flatcc_builder_table_add_union@@Base+0x5c>
   16a08:	mov	r0, r5
   16a0c:	mov	r1, r6
   16a10:	bl	16aac <flatcc_builder_table_add_offset@@Base>
   16a14:	cmp	r0, #0
   16a18:	beq	16a94 <flatcc_builder_table_add_union@@Base+0xd0>
   16a1c:	str	r7, [r0]
   16a20:	sub	r1, r6, #1
   16a24:	mov	r0, r5
   16a28:	mov	r2, #1
   16a2c:	mov	r3, #1
   16a30:	bl	16bd8 <flatcc_builder_table_add@@Base>
   16a34:	cmp	r0, #0
   16a38:	strbne	r4, [r0]
   16a3c:	movne	r0, #0
   16a40:	popne	{r4, r5, r6, r7, fp, pc}
   16a44:	movw	r0, #53934	; 0xd2ae
   16a48:	movw	r1, #50979	; 0xc723
   16a4c:	movw	r3, #53802	; 0xd22a
   16a50:	movw	r2, #1526	; 0x5f6
   16a54:	movt	r0, #1
   16a58:	movt	r1, #1
   16a5c:	movt	r3, #1
   16a60:	bl	129c0 <__assert_fail@plt>
   16a64:	movw	r0, #53048	; 0xcf38
   16a68:	movw	r1, #50979	; 0xc723
   16a6c:	movw	r3, #53802	; 0xd22a
   16a70:	movw	r2, #1518	; 0x5ee
   16a74:	movt	r0, #1
   16a78:	b	16a58 <flatcc_builder_table_add_union@@Base+0x94>
   16a7c:	movw	r0, #53890	; 0xd282
   16a80:	movw	r1, #50979	; 0xc723
   16a84:	movw	r3, #53802	; 0xd22a
   16a88:	movw	r2, #1519	; 0x5ef
   16a8c:	movt	r0, #1
   16a90:	b	16a58 <flatcc_builder_table_add_union@@Base+0x94>
   16a94:	movw	r0, #53924	; 0xd2a4
   16a98:	movw	r1, #50979	; 0xc723
   16a9c:	movw	r3, #53802	; 0xd22a
   16aa0:	movw	r2, #1522	; 0x5f2
   16aa4:	movt	r0, #1
   16aa8:	b	16a58 <flatcc_builder_table_add_union@@Base+0x94>

00016aac <flatcc_builder_table_add_offset@@Base>:
   16aac:	push	{r4, r5, r6, r7, fp, lr}
   16ab0:	add	fp, sp, #16
   16ab4:	mov	r4, r0
   16ab8:	ldr	r0, [r0, #32]
   16abc:	ldrh	r0, [r0, #14]
   16ac0:	cmp	r0, #3
   16ac4:	bne	16b88 <flatcc_builder_table_add_offset@@Base+0xdc>
   16ac8:	movw	r0, #32765	; 0x7ffd
   16acc:	mov	r5, r1
   16ad0:	cmp	r1, r0
   16ad4:	bcs	16ba0 <flatcc_builder_table_add_offset@@Base+0xf4>
   16ad8:	ldr	r0, [r4, #4]
   16adc:	add	r1, r0, r5, lsl #1
   16ae0:	ldrh	r1, [r1]
   16ae4:	cmp	r1, #0
   16ae8:	bne	16bb8 <flatcc_builder_table_add_offset@@Base+0x10c>
   16aec:	ldr	r2, [r4, #20]
   16af0:	ldr	r1, [r4, #12]
   16af4:	ldr	r3, [r4, #24]
   16af8:	add	r2, r2, #3
   16afc:	eor	r1, r1, r5
   16b00:	bic	r7, r2, #3
   16b04:	movw	r2, #31153	; 0x79b1
   16b08:	movt	r2, #40503	; 0x9e37
   16b0c:	add	r6, r7, #4
   16b10:	cmp	r6, r3
   16b14:	str	r6, [r4, #20]
   16b18:	mul	r1, r1, r2
   16b1c:	eor	r1, r1, #4
   16b20:	mul	r1, r1, r2
   16b24:	str	r1, [r4, #12]
   16b28:	bls	16b50 <flatcc_builder_table_add_offset@@Base+0xa4>
   16b2c:	mov	r0, r4
   16b30:	mov	r1, r6
   16b34:	movw	r2, #65532	; 0xfffc
   16b38:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   16b3c:	mov	r1, r0
   16b40:	mov	r0, #0
   16b44:	cmp	r1, #0
   16b48:	popne	{r4, r5, r6, r7, fp, pc}
   16b4c:	ldr	r0, [r4, #4]
   16b50:	uxth	r1, r5
   16b54:	add	r0, r0, r1, lsl #1
   16b58:	strh	r6, [r0]
   16b5c:	ldrh	r0, [r4, #8]
   16b60:	cmp	r0, r1
   16b64:	addls	r0, r5, #1
   16b68:	strhls	r0, [r4, #8]
   16b6c:	ldr	r0, [r4]
   16b70:	add	r1, r0, #2
   16b74:	str	r1, [r4]
   16b78:	strh	r7, [r0]
   16b7c:	ldr	r0, [r4, #16]
   16b80:	add	r0, r0, r7
   16b84:	pop	{r4, r5, r6, r7, fp, pc}
   16b88:	movw	r0, #53048	; 0xcf38
   16b8c:	movw	r1, #50979	; 0xc723
   16b90:	movw	r3, #54828	; 0xd62c
   16b94:	movw	r2, #1811	; 0x713
   16b98:	movt	r0, #1
   16b9c:	b	16bcc <flatcc_builder_table_add_offset@@Base+0x120>
   16ba0:	movw	r0, #54700	; 0xd5ac
   16ba4:	movw	r1, #50979	; 0xc723
   16ba8:	movw	r3, #54828	; 0xd62c
   16bac:	movw	r2, #1812	; 0x714
   16bb0:	movt	r0, #1
   16bb4:	b	16bcc <flatcc_builder_table_add_offset@@Base+0x120>
   16bb8:	movw	r0, #55497	; 0xd8c9
   16bbc:	movw	r1, #50979	; 0xc723
   16bc0:	movw	r3, #54828	; 0xd62c
   16bc4:	movw	r2, #1819	; 0x71b
   16bc8:	movt	r0, #1
   16bcc:	movt	r1, #1
   16bd0:	movt	r3, #1
   16bd4:	bl	129c0 <__assert_fail@plt>

00016bd8 <flatcc_builder_table_add@@Base>:
   16bd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16bdc:	add	fp, sp, #24
   16be0:	mov	r4, r0
   16be4:	ldr	r0, [r0, #32]
   16be8:	ldrh	r0, [r0, #14]
   16bec:	cmp	r0, #3
   16bf0:	bne	16cc0 <flatcc_builder_table_add@@Base+0xe8>
   16bf4:	movw	r0, #32765	; 0x7ffd
   16bf8:	mov	r8, r1
   16bfc:	cmp	r1, r0
   16c00:	bcs	16cd8 <flatcc_builder_table_add@@Base+0x100>
   16c04:	ldrh	r0, [r4, #130]	; 0x82
   16c08:	cmp	r0, r3
   16c0c:	strhcc	r3, [r4, #130]	; 0x82
   16c10:	ldr	r0, [r4, #4]
   16c14:	add	r1, r0, r8, lsl #1
   16c18:	ldrh	r1, [r1]
   16c1c:	cmp	r1, #0
   16c20:	bne	16cf0 <flatcc_builder_table_add@@Base+0x118>
   16c24:	ldr	r1, [r4, #12]
   16c28:	movw	r7, #31153	; 0x79b1
   16c2c:	ldr	r6, [r4, #20]
   16c30:	ldr	r5, [r4, #24]
   16c34:	movt	r7, #40503	; 0x9e37
   16c38:	eor	r1, r1, r8
   16c3c:	mul	r1, r1, r7
   16c40:	eor	r1, r1, r2
   16c44:	mul	r1, r1, r7
   16c48:	str	r1, [r4, #12]
   16c4c:	add	r1, r3, r6
   16c50:	rsb	r3, r3, #0
   16c54:	sub	r1, r1, #1
   16c58:	and	r6, r1, r3
   16c5c:	add	r1, r6, r2
   16c60:	cmp	r1, r5
   16c64:	str	r1, [r4, #20]
   16c68:	bcc	16c94 <flatcc_builder_table_add@@Base+0xbc>
   16c6c:	add	r1, r1, #1
   16c70:	mov	r0, r4
   16c74:	movw	r2, #65532	; 0xfffc
   16c78:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   16c7c:	mov	r1, r0
   16c80:	mov	r0, #0
   16c84:	cmp	r1, #0
   16c88:	beq	16c90 <flatcc_builder_table_add@@Base+0xb8>
   16c8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c90:	ldr	r0, [r4, #4]
   16c94:	uxth	r1, r8
   16c98:	add	r2, r6, #4
   16c9c:	add	r0, r0, r1, lsl #1
   16ca0:	strh	r2, [r0]
   16ca4:	ldrh	r0, [r4, #8]
   16ca8:	cmp	r0, r1
   16cac:	addls	r0, r8, #1
   16cb0:	strhls	r0, [r4, #8]
   16cb4:	ldr	r0, [r4, #16]
   16cb8:	add	r0, r0, r6
   16cbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16cc0:	movw	r0, #53048	; 0xcf38
   16cc4:	movw	r1, #50979	; 0xc723
   16cc8:	movw	r3, #54626	; 0xd562
   16ccc:	movw	r2, #1773	; 0x6ed
   16cd0:	movt	r0, #1
   16cd4:	b	16d04 <flatcc_builder_table_add@@Base+0x12c>
   16cd8:	movw	r0, #54700	; 0xd5ac
   16cdc:	movw	r1, #50979	; 0xc723
   16ce0:	movw	r3, #54626	; 0xd562
   16ce4:	movw	r2, #1774	; 0x6ee
   16ce8:	movt	r0, #1
   16cec:	b	16d04 <flatcc_builder_table_add@@Base+0x12c>
   16cf0:	movw	r0, #55497	; 0xd8c9
   16cf4:	movw	r1, #50979	; 0xc723
   16cf8:	movw	r3, #54626	; 0xd562
   16cfc:	movw	r2, #1784	; 0x6f8
   16d00:	movt	r0, #1
   16d04:	movt	r1, #1
   16d08:	movt	r3, #1
   16d0c:	bl	129c0 <__assert_fail@plt>

00016d10 <flatcc_builder_table_add_union_vector@@Base>:
   16d10:	push	{r4, r5, r6, r7, fp, lr}
   16d14:	add	fp, sp, #16
   16d18:	mov	r6, r0
   16d1c:	ldr	r0, [r0, #32]
   16d20:	ldrh	r0, [r0, #14]
   16d24:	cmp	r0, #3
   16d28:	bne	16d94 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16d2c:	mov	r5, r1
   16d30:	clz	r1, r3
   16d34:	cmp	r2, #0
   16d38:	mov	r0, r2
   16d3c:	mov	r4, r3
   16d40:	mov	r7, r2
   16d44:	movwne	r0, #1
   16d48:	lsr	r1, r1, #5
   16d4c:	teq	r1, r0
   16d50:	beq	16dac <flatcc_builder_table_add_union_vector@@Base+0x9c>
   16d54:	cmp	r7, #0
   16d58:	beq	16d8c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16d5c:	sub	r1, r5, #1
   16d60:	mov	r0, r6
   16d64:	bl	16aac <flatcc_builder_table_add_offset@@Base>
   16d68:	cmp	r0, #0
   16d6c:	beq	16dc4 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   16d70:	str	r7, [r0]
   16d74:	mov	r0, r6
   16d78:	mov	r1, r5
   16d7c:	bl	16aac <flatcc_builder_table_add_offset@@Base>
   16d80:	cmp	r0, #0
   16d84:	beq	16dd8 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   16d88:	str	r4, [r0]
   16d8c:	mov	r0, #0
   16d90:	pop	{r4, r5, r6, r7, fp, pc}
   16d94:	movw	r0, #53048	; 0xcf38
   16d98:	movw	r1, #50979	; 0xc723
   16d9c:	movw	r3, #53946	; 0xd2ba
   16da0:	mov	r2, #1536	; 0x600
   16da4:	movt	r0, #1
   16da8:	b	16dec <flatcc_builder_table_add_union_vector@@Base+0xdc>
   16dac:	movw	r0, #54045	; 0xd31d
   16db0:	movw	r1, #50979	; 0xc723
   16db4:	movw	r3, #53946	; 0xd2ba
   16db8:	movw	r2, #1537	; 0x601
   16dbc:	movt	r0, #1
   16dc0:	b	16dec <flatcc_builder_table_add_union_vector@@Base+0xdc>
   16dc4:	movw	r0, #53924	; 0xd2a4
   16dc8:	movw	r1, #50979	; 0xc723
   16dcc:	movw	r3, #53946	; 0xd2ba
   16dd0:	movw	r2, #1540	; 0x604
   16dd4:	b	16de8 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   16dd8:	movw	r0, #53924	; 0xd2a4
   16ddc:	movw	r1, #50979	; 0xc723
   16de0:	movw	r3, #53946	; 0xd2ba
   16de4:	movw	r2, #1544	; 0x608
   16de8:	movt	r0, #1
   16dec:	movt	r1, #1
   16df0:	movt	r3, #1
   16df4:	bl	129c0 <__assert_fail@plt>

00016df8 <flatcc_builder_create_union_vector@@Base>:
   16df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dfc:	add	fp, sp, #28
   16e00:	sub	sp, sp, #20
   16e04:	mov	sl, r0
   16e08:	mov	r0, #0
   16e0c:	mov	r9, r3
   16e10:	mov	r7, r2
   16e14:	mov	r4, r1
   16e18:	str	r0, [sl]
   16e1c:	str	r0, [sl, #4]
   16e20:	mov	r0, r1
   16e24:	bl	1564c <flatcc_builder_start_offset_vector@@Base>
   16e28:	cmp	r0, #0
   16e2c:	beq	16e38 <flatcc_builder_create_union_vector@@Base+0x40>
   16e30:	sub	sp, fp, #28
   16e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e38:	mov	r0, r4
   16e3c:	mov	r1, r9
   16e40:	bl	15020 <flatcc_builder_extend_offset_vector@@Base>
   16e44:	cmp	r0, #0
   16e48:	beq	16e30 <flatcc_builder_create_union_vector@@Base+0x38>
   16e4c:	ldr	r8, [r4, #20]
   16e50:	ldr	r1, [r4, #24]
   16e54:	add	r0, r8, r9
   16e58:	cmp	r0, r1
   16e5c:	str	r0, [r4, #20]
   16e60:	bcc	16e7c <flatcc_builder_create_union_vector@@Base+0x84>
   16e64:	add	r1, r0, #1
   16e68:	mov	r0, r4
   16e6c:	mvn	r2, #3
   16e70:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   16e74:	cmp	r0, #0
   16e78:	bne	16e30 <flatcc_builder_create_union_vector@@Base+0x38>
   16e7c:	ldr	r3, [r4, #16]
   16e80:	adds	r2, r3, r8
   16e84:	beq	16e30 <flatcc_builder_create_union_vector@@Base+0x38>
   16e88:	cmp	r9, #0
   16e8c:	beq	16ebc <flatcc_builder_create_union_vector@@Base+0xc4>
   16e90:	add	r0, r7, #4
   16e94:	mov	r1, r2
   16e98:	mov	r7, r3
   16e9c:	mov	r6, r9
   16ea0:	ldrb	r5, [r0, #-4]
   16ea4:	subs	r6, r6, #1
   16ea8:	strb	r5, [r1], #1
   16eac:	ldr	r5, [r0]
   16eb0:	add	r0, r0, #8
   16eb4:	str	r5, [r7], #4
   16eb8:	bne	16ea0 <flatcc_builder_create_union_vector@@Base+0xa8>
   16ebc:	add	r0, sp, #8
   16ec0:	mov	r1, r4
   16ec4:	str	r9, [sp]
   16ec8:	bl	16f50 <flatcc_builder_create_union_vector_direct@@Base>
   16ecc:	ldr	r0, [sp, #8]
   16ed0:	ldr	r1, [sp, #12]
   16ed4:	stm	sl, {r0, r1}
   16ed8:	mov	r1, #0
   16edc:	ldr	r0, [r4, #16]
   16ee0:	ldr	r2, [r4, #20]
   16ee4:	bl	12990 <memset@plt>
   16ee8:	ldr	r0, [r4, #32]
   16eec:	ldr	r1, [r4, #60]	; 0x3c
   16ef0:	ldr	r2, [r4, #64]	; 0x40
   16ef4:	ldr	r3, [r0, #8]
   16ef8:	str	r3, [r4, #20]
   16efc:	ldr	r3, [r0]
   16f00:	str	r3, [r4, #28]
   16f04:	add	r1, r1, r3
   16f08:	ldr	r7, [r0, #4]
   16f0c:	str	r1, [r4, #16]
   16f10:	sub	r1, r2, r3
   16f14:	cmp	r1, r7
   16f18:	movhi	r1, r7
   16f1c:	str	r1, [r4, #24]
   16f20:	ldrh	r1, [r4, #130]	; 0x82
   16f24:	ldrh	r2, [r4, #128]	; 0x80
   16f28:	cmp	r2, r1
   16f2c:	strhcc	r1, [r4, #128]	; 0x80
   16f30:	ldrh	r1, [r0, #12]
   16f34:	sub	r0, r0, #36	; 0x24
   16f38:	str	r0, [r4, #32]
   16f3c:	strh	r1, [r4, #130]	; 0x82
   16f40:	ldr	r0, [r4, #156]	; 0x9c
   16f44:	sub	r0, r0, #1
   16f48:	str	r0, [r4, #156]	; 0x9c
   16f4c:	b	16e30 <flatcc_builder_create_union_vector@@Base+0x38>

00016f50 <flatcc_builder_create_union_vector_direct@@Base>:
   16f50:	push	{r4, r5, r6, r7, fp, lr}
   16f54:	add	fp, sp, #16
   16f58:	sub	sp, sp, #8
   16f5c:	ldr	r7, [fp, #8]
   16f60:	mov	r5, r2
   16f64:	mov	r4, r0
   16f68:	mov	r0, #0
   16f6c:	mov	r6, r1
   16f70:	str	r0, [r4]
   16f74:	str	r0, [r4, #4]
   16f78:	mov	r0, r1
   16f7c:	mov	r1, r3
   16f80:	mov	r3, r5
   16f84:	mov	r2, r7
   16f88:	bl	166f8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16f8c:	cmp	r0, #0
   16f90:	str	r0, [r4, #4]
   16f94:	beq	16fc0 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16f98:	mvn	r0, #0
   16f9c:	mov	r1, #1
   16fa0:	mov	r2, r7
   16fa4:	mov	r3, #1
   16fa8:	str	r1, [sp]
   16fac:	str	r0, [sp, #4]
   16fb0:	mov	r0, r6
   16fb4:	mov	r1, r5
   16fb8:	bl	164a4 <flatcc_builder_create_vector@@Base>
   16fbc:	str	r0, [r4]
   16fc0:	sub	sp, fp, #16
   16fc4:	pop	{r4, r5, r6, r7, fp, pc}

00016fc8 <flatcc_builder_start_union_vector@@Base>:
   16fc8:	push	{r4, sl, fp, lr}
   16fcc:	add	fp, sp, #8
   16fd0:	mov	r1, #4
   16fd4:	mov	r4, r0
   16fd8:	bl	149ec <flatcc_builder_start_buffer@@Base+0xbc>
   16fdc:	mov	r1, r0
   16fe0:	mvn	r0, #0
   16fe4:	cmp	r1, #0
   16fe8:	popne	{r4, sl, fp, pc}
   16fec:	ldr	r0, [r4, #32]
   16ff0:	mov	r1, #8
   16ff4:	mov	r2, #7
   16ff8:	str	r1, [r0, #16]
   16ffc:	mov	r0, #0
   17000:	ldr	r1, [r4, #32]
   17004:	str	r0, [r1, #20]
   17008:	ldr	r1, [r4, #32]
   1700c:	strh	r2, [r1, #14]
   17010:	ldr	r2, [r4, #28]
   17014:	ldr	r3, [r4, #60]	; 0x3c
   17018:	ldr	ip, [r4, #64]	; 0x40
   1701c:	add	r3, r3, r2
   17020:	sub	r2, ip, r2
   17024:	str	r3, [r4, #16]
   17028:	mvn	r3, #3
   1702c:	cmn	r2, #4
   17030:	movcs	r2, r3
   17034:	str	r2, [r4, #24]
   17038:	str	r3, [r1, #4]
   1703c:	pop	{r4, sl, fp, pc}

00017040 <flatcc_builder_end_union_vector@@Base>:
   17040:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17044:	add	fp, sp, #24
   17048:	sub	sp, sp, #16
   1704c:	mov	r8, r0
   17050:	mov	r0, #0
   17054:	mov	r4, r1
   17058:	str	r0, [r8]
   1705c:	str	r0, [r8, #4]
   17060:	ldr	r0, [r1, #32]
   17064:	ldrh	r1, [r0, #14]
   17068:	cmp	r1, #7
   1706c:	bne	17184 <flatcc_builder_end_union_vector@@Base+0x144>
   17070:	ldr	r9, [r0, #20]
   17074:	ldr	r7, [r4, #20]
   17078:	ldr	r1, [r4, #24]
   1707c:	add	r0, r9, r9, lsl #2
   17080:	add	r0, r7, r0
   17084:	cmp	r0, r1
   17088:	str	r0, [r4, #20]
   1708c:	bcc	170a8 <flatcc_builder_end_union_vector@@Base+0x68>
   17090:	add	r1, r0, #1
   17094:	mov	r0, r4
   17098:	mvn	r2, #3
   1709c:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   170a0:	cmp	r0, #0
   170a4:	bne	1717c <flatcc_builder_end_union_vector@@Base+0x13c>
   170a8:	ldr	r0, [r4, #16]
   170ac:	adds	r3, r0, r7
   170b0:	beq	1717c <flatcc_builder_end_union_vector@@Base+0x13c>
   170b4:	add	r2, r3, r9, lsl #2
   170b8:	cmp	r9, #0
   170bc:	beq	170ec <flatcc_builder_end_union_vector@@Base+0xac>
   170c0:	add	r0, r0, #4
   170c4:	mov	r1, r2
   170c8:	mov	r7, r3
   170cc:	mov	r6, r9
   170d0:	ldrb	r5, [r0, #-4]
   170d4:	subs	r6, r6, #1
   170d8:	strb	r5, [r1], #1
   170dc:	ldr	r5, [r0]
   170e0:	add	r0, r0, #8
   170e4:	str	r5, [r7], #4
   170e8:	bne	170d0 <flatcc_builder_end_union_vector@@Base+0x90>
   170ec:	add	r0, sp, #8
   170f0:	mov	r1, r4
   170f4:	str	r9, [sp]
   170f8:	bl	16f50 <flatcc_builder_create_union_vector_direct@@Base>
   170fc:	ldr	r0, [sp, #8]
   17100:	ldr	r1, [sp, #12]
   17104:	stm	r8, {r0, r1}
   17108:	mov	r1, #0
   1710c:	ldr	r0, [r4, #16]
   17110:	ldr	r2, [r4, #20]
   17114:	bl	12990 <memset@plt>
   17118:	ldr	r0, [r4, #32]
   1711c:	ldr	r1, [r4, #60]	; 0x3c
   17120:	ldr	r2, [r4, #64]	; 0x40
   17124:	ldr	r3, [r0, #8]
   17128:	str	r3, [r4, #20]
   1712c:	ldr	r3, [r0]
   17130:	str	r3, [r4, #28]
   17134:	add	r1, r1, r3
   17138:	ldr	r7, [r0, #4]
   1713c:	str	r1, [r4, #16]
   17140:	sub	r1, r2, r3
   17144:	cmp	r1, r7
   17148:	movhi	r1, r7
   1714c:	str	r1, [r4, #24]
   17150:	ldrh	r1, [r4, #130]	; 0x82
   17154:	ldrh	r2, [r4, #128]	; 0x80
   17158:	cmp	r2, r1
   1715c:	strhcc	r1, [r4, #128]	; 0x80
   17160:	ldrh	r1, [r0, #12]
   17164:	sub	r0, r0, #36	; 0x24
   17168:	str	r0, [r4, #32]
   1716c:	strh	r1, [r4, #130]	; 0x82
   17170:	ldr	r0, [r4, #156]	; 0x9c
   17174:	sub	r0, r0, #1
   17178:	str	r0, [r4, #156]	; 0x9c
   1717c:	sub	sp, fp, #24
   17180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17184:	movw	r0, #54085	; 0xd345
   17188:	movw	r1, #50979	; 0xc723
   1718c:	movw	r3, #54135	; 0xd377
   17190:	movw	r2, #1617	; 0x651
   17194:	movt	r0, #1
   17198:	movt	r1, #1
   1719c:	movt	r3, #1
   171a0:	bl	129c0 <__assert_fail@plt>

000171a4 <flatcc_builder_union_vector_count@@Base>:
   171a4:	ldr	r0, [r0, #32]
   171a8:	ldr	r0, [r0, #20]
   171ac:	bx	lr

000171b0 <flatcc_builder_union_vector_edit@@Base>:
   171b0:	ldr	r0, [r0, #16]
   171b4:	bx	lr

000171b8 <flatcc_builder_extend_union_vector@@Base>:
   171b8:	push	{r4, r5, fp, lr}
   171bc:	add	fp, sp, #8
   171c0:	mov	r4, r0
   171c4:	ldr	r0, [r0, #32]
   171c8:	ldr	r2, [r0, #20]
   171cc:	adds	r2, r2, r1
   171d0:	cmpcc	r2, #536870912	; 0x20000000
   171d4:	bcc	171f8 <flatcc_builder_extend_union_vector@@Base+0x40>
   171d8:	movw	r0, #55250	; 0xd7d2
   171dc:	movw	r1, #50979	; 0xc723
   171e0:	movw	r3, #55277	; 0xd7ed
   171e4:	mov	r2, #892	; 0x37c
   171e8:	movt	r0, #1
   171ec:	movt	r1, #1
   171f0:	movt	r3, #1
   171f4:	bl	129c0 <__assert_fail@plt>
   171f8:	str	r2, [r0, #20]
   171fc:	ldr	r5, [r4, #20]
   17200:	ldr	r2, [r4, #24]
   17204:	add	r0, r5, r1, lsl #3
   17208:	cmp	r0, r2
   1720c:	str	r0, [r4, #20]
   17210:	bcc	17234 <flatcc_builder_extend_union_vector@@Base+0x7c>
   17214:	add	r1, r0, #1
   17218:	mov	r0, r4
   1721c:	mvn	r2, #3
   17220:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   17224:	mov	r1, r0
   17228:	mov	r0, #0
   1722c:	cmp	r1, #0
   17230:	popne	{r4, r5, fp, pc}
   17234:	ldr	r0, [r4, #16]
   17238:	add	r0, r0, r5
   1723c:	pop	{r4, r5, fp, pc}

00017240 <flatcc_builder_truncate_union_vector@@Base>:
   17240:	push	{fp, lr}
   17244:	mov	fp, sp
   17248:	ldr	r2, [r0, #32]
   1724c:	ldrh	r3, [r2, #14]
   17250:	cmp	r3, #7
   17254:	bne	1729c <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17258:	ldr	r3, [r2, #20]
   1725c:	cmp	r3, r1
   17260:	bcc	172b4 <flatcc_builder_truncate_union_vector@@Base+0x74>
   17264:	sub	r3, r3, r1
   17268:	str	r3, [r2, #20]
   1726c:	ldr	r2, [r0, #32]
   17270:	ldr	r3, [r0, #20]
   17274:	ldr	ip, [r0, #16]
   17278:	ldr	r2, [r2, #16]
   1727c:	mls	r3, r2, r1, r3
   17280:	mul	r2, r2, r1
   17284:	mov	r1, #0
   17288:	str	r3, [r0, #20]
   1728c:	add	r0, ip, r3
   17290:	bl	12990 <memset@plt>
   17294:	mov	r0, #0
   17298:	pop	{fp, pc}
   1729c:	movw	r0, #54085	; 0xd345
   172a0:	movw	r1, #50979	; 0xc723
   172a4:	movw	r3, #54218	; 0xd3ca
   172a8:	movw	r2, #1665	; 0x681
   172ac:	movt	r0, #1
   172b0:	b	172c8 <flatcc_builder_truncate_union_vector@@Base+0x88>
   172b4:	movw	r0, #52649	; 0xcda9
   172b8:	movw	r1, #50979	; 0xc723
   172bc:	movw	r3, #54218	; 0xd3ca
   172c0:	movw	r2, #1666	; 0x682
   172c4:	movt	r0, #1
   172c8:	movt	r1, #1
   172cc:	movt	r3, #1
   172d0:	bl	129c0 <__assert_fail@plt>

000172d4 <flatcc_builder_union_vector_push@@Base>:
   172d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   172d8:	add	fp, sp, #24
   172dc:	mov	r7, r0
   172e0:	ldr	r0, [r0, #32]
   172e4:	mov	r5, r1
   172e8:	ldrh	r1, [r0, #14]
   172ec:	cmp	r1, #7
   172f0:	bne	17358 <flatcc_builder_union_vector_push@@Base+0x84>
   172f4:	ldr	r1, [r0, #20]
   172f8:	mov	r6, #0
   172fc:	cmn	r1, #-536870911	; 0xe0000001
   17300:	beq	17350 <flatcc_builder_union_vector_push@@Base+0x7c>
   17304:	add	r1, r1, #1
   17308:	mov	r8, r2
   1730c:	str	r1, [r0, #20]
   17310:	ldr	r4, [r7, #20]
   17314:	ldr	r0, [r7, #24]
   17318:	add	r1, r4, #8
   1731c:	cmp	r1, r0
   17320:	str	r1, [r7, #20]
   17324:	bcc	17340 <flatcc_builder_union_vector_push@@Base+0x6c>
   17328:	add	r1, r4, #9
   1732c:	mov	r0, r7
   17330:	mvn	r2, #3
   17334:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   17338:	cmp	r0, #0
   1733c:	bne	17350 <flatcc_builder_union_vector_push@@Base+0x7c>
   17340:	ldr	r0, [r7, #16]
   17344:	adds	r0, r0, r4
   17348:	movne	r6, r0
   1734c:	stmne	r0, {r5, r8}
   17350:	mov	r0, r6
   17354:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17358:	movw	r0, #54085	; 0xd345
   1735c:	movw	r1, #50979	; 0xc723
   17360:	movw	r3, #54287	; 0xd40f
   17364:	movw	r2, #1677	; 0x68d
   17368:	movt	r0, #1
   1736c:	movt	r1, #1
   17370:	movt	r3, #1
   17374:	bl	129c0 <__assert_fail@plt>

00017378 <flatcc_builder_append_union_vector@@Base>:
   17378:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1737c:	add	fp, sp, #24
   17380:	mov	r6, r0
   17384:	ldr	r0, [r0, #32]
   17388:	mov	r8, r1
   1738c:	ldrh	r1, [r0, #14]
   17390:	cmp	r1, #7
   17394:	bne	17430 <flatcc_builder_append_union_vector@@Base+0xb8>
   17398:	ldr	r1, [r0, #20]
   1739c:	mov	r5, r2
   173a0:	adds	r1, r1, r2
   173a4:	cmpcc	r1, #536870912	; 0x20000000
   173a8:	bcc	173cc <flatcc_builder_append_union_vector@@Base+0x54>
   173ac:	movw	r0, #55250	; 0xd7d2
   173b0:	movw	r1, #50979	; 0xc723
   173b4:	movw	r3, #55277	; 0xd7ed
   173b8:	mov	r2, #892	; 0x37c
   173bc:	movt	r0, #1
   173c0:	movt	r1, #1
   173c4:	movt	r3, #1
   173c8:	bl	129c0 <__assert_fail@plt>
   173cc:	str	r1, [r0, #20]
   173d0:	ldr	r4, [r6, #20]
   173d4:	ldr	r1, [r6, #24]
   173d8:	add	r0, r4, r5, lsl #3
   173dc:	cmp	r0, r1
   173e0:	str	r0, [r6, #20]
   173e4:	bcc	17404 <flatcc_builder_append_union_vector@@Base+0x8c>
   173e8:	add	r1, r0, #1
   173ec:	mov	r0, r6
   173f0:	mvn	r2, #3
   173f4:	bl	17a60 <flatcc_builder_get_emit_context@@Base+0x8>
   173f8:	mov	r7, #0
   173fc:	cmp	r0, #0
   17400:	bne	17428 <flatcc_builder_append_union_vector@@Base+0xb0>
   17404:	ldr	r0, [r6, #16]
   17408:	adds	r7, r0, r4
   1740c:	beq	17424 <flatcc_builder_append_union_vector@@Base+0xac>
   17410:	lsl	r2, r5, #3
   17414:	mov	r0, r7
   17418:	mov	r1, r8
   1741c:	bl	12900 <memcpy@plt>
   17420:	b	17428 <flatcc_builder_append_union_vector@@Base+0xb0>
   17424:	mov	r7, #0
   17428:	mov	r0, r7
   1742c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17430:	movw	r0, #54085	; 0xd345
   17434:	movw	r1, #50979	; 0xc723
   17438:	movw	r3, #54396	; 0xd47c
   1743c:	movw	r2, #1692	; 0x69c
   17440:	movt	r0, #1
   17444:	movt	r1, #1
   17448:	movt	r3, #1
   1744c:	bl	129c0 <__assert_fail@plt>

00017450 <flatcc_builder_create_string@@Base>:
   17450:	push	{r4, r5, r6, sl, fp, lr}
   17454:	add	fp, sp, #16
   17458:	sub	sp, sp, #80	; 0x50
   1745c:	str	r2, [fp, #-20]	; 0xffffffec
   17460:	mvn	r5, r2
   17464:	mov	r6, r0
   17468:	sub	r3, fp, #20
   1746c:	cmp	r2, #0
   17470:	add	lr, sp, #4
   17474:	ldr	ip, [r0, #136]	; 0x88
   17478:	mov	r0, #4
   1747c:	str	r0, [sp, #16]
   17480:	str	r3, [sp, #12]
   17484:	mov	r3, #1
   17488:	str	r0, [sp, #4]
   1748c:	addne	r0, r2, #4
   17490:	str	r3, [sp, #8]
   17494:	strne	r2, [sp, #24]
   17498:	movw	r2, #50449	; 0xc511
   1749c:	movne	r3, #2
   174a0:	strne	r1, [sp, #20]
   174a4:	strne	r3, [sp, #8]
   174a8:	strne	r0, [sp, #4]
   174ac:	movt	r2, #1
   174b0:	add	r5, ip, r5
   174b4:	and	r5, r5, #3
   174b8:	add	r5, r5, #1
   174bc:	add	r1, r0, r5
   174c0:	add	r0, lr, r3, lsl #3
   174c4:	str	r1, [sp, #4]
   174c8:	cmp	r1, #0
   174cc:	str	r2, [r0, #8]
   174d0:	add	r2, r3, #1
   174d4:	str	r5, [r0, #12]
   174d8:	str	r2, [sp, #8]
   174dc:	ble	17530 <flatcc_builder_create_string@@Base+0xe0>
   174e0:	ldr	r0, [r6, #36]	; 0x24
   174e4:	ldr	r4, [r6, #44]	; 0x2c
   174e8:	sub	r5, ip, r1
   174ec:	str	r1, [sp]
   174f0:	add	r1, lr, #8
   174f4:	mov	r3, r5
   174f8:	blx	r4
   174fc:	cmp	r0, #0
   17500:	streq	r5, [r6, #136]	; 0x88
   17504:	moveq	r0, r5
   17508:	subeq	sp, fp, #16
   1750c:	popeq	{r4, r5, r6, sl, fp, pc}
   17510:	movw	r0, #55497	; 0xd8c9
   17514:	movw	r1, #50979	; 0xc723
   17518:	movw	r3, #55176	; 0xd788
   1751c:	movw	r2, #651	; 0x28b
   17520:	movt	r0, #1
   17524:	movt	r1, #1
   17528:	movt	r3, #1
   1752c:	bl	129c0 <__assert_fail@plt>
   17530:	movw	r0, #55497	; 0xd8c9
   17534:	movw	r1, #50979	; 0xc723
   17538:	movw	r3, #55176	; 0xd788
   1753c:	movw	r2, #647	; 0x287
   17540:	movt	r0, #1
   17544:	movt	r1, #1
   17548:	movt	r3, #1
   1754c:	bl	129c0 <__assert_fail@plt>

00017550 <flatcc_builder_create_string_str@@Base>:
   17550:	push	{r4, r5, fp, lr}
   17554:	add	fp, sp, #8
   17558:	mov	r5, r0
   1755c:	mov	r0, r1
   17560:	mov	r4, r1
   17564:	bl	1296c <strlen@plt>
   17568:	mov	r2, r0
   1756c:	mov	r0, r5
   17570:	mov	r1, r4
   17574:	pop	{r4, r5, fp, lr}
   17578:	b	17450 <flatcc_builder_create_string@@Base>

0001757c <flatcc_builder_create_string_strn@@Base>:
   1757c:	push	{r4, r5, r6, sl, fp, lr}
   17580:	add	fp, sp, #16
   17584:	mov	r6, r0
   17588:	mov	r5, r1
   1758c:	mov	r0, r1
   17590:	mov	r1, #0
   17594:	mov	r4, r2
   17598:	bl	129a8 <memchr@plt>
   1759c:	cmp	r0, #0
   175a0:	mov	r1, r5
   175a4:	subne	r4, r0, r5
   175a8:	mov	r0, r6
   175ac:	mov	r2, r4
   175b0:	pop	{r4, r5, r6, sl, fp, lr}
   175b4:	b	17450 <flatcc_builder_create_string@@Base>

000175b8 <flatcc_builder_end_string@@Base>:
   175b8:	push	{r4, r5, fp, lr}
   175bc:	add	fp, sp, #8
   175c0:	mov	r4, r0
   175c4:	ldr	r0, [r0, #32]
   175c8:	ldrh	r1, [r0, #14]
   175cc:	cmp	r1, #6
   175d0:	bne	17678 <flatcc_builder_end_string@@Base+0xc0>
   175d4:	ldr	r2, [r0, #20]
   175d8:	ldr	r0, [r4, #20]
   175dc:	cmp	r2, r0
   175e0:	bne	17690 <flatcc_builder_end_string@@Base+0xd8>
   175e4:	ldr	r1, [r4, #16]
   175e8:	mov	r0, r4
   175ec:	bl	17450 <flatcc_builder_create_string@@Base>
   175f0:	mov	r5, r0
   175f4:	cmp	r0, #0
   175f8:	beq	17670 <flatcc_builder_end_string@@Base+0xb8>
   175fc:	ldr	r0, [r4, #16]
   17600:	ldr	r2, [r4, #20]
   17604:	mov	r1, #0
   17608:	bl	12990 <memset@plt>
   1760c:	ldr	r0, [r4, #32]
   17610:	ldr	r1, [r4, #60]	; 0x3c
   17614:	ldr	ip, [r4, #64]	; 0x40
   17618:	ldr	r3, [r0, #8]
   1761c:	str	r3, [r4, #20]
   17620:	ldr	r3, [r0]
   17624:	str	r3, [r4, #28]
   17628:	add	r1, r1, r3
   1762c:	ldr	r2, [r0, #4]
   17630:	str	r1, [r4, #16]
   17634:	sub	r1, ip, r3
   17638:	cmp	r1, r2
   1763c:	movhi	r1, r2
   17640:	str	r1, [r4, #24]
   17644:	ldrh	r1, [r4, #130]	; 0x82
   17648:	ldrh	r2, [r4, #128]	; 0x80
   1764c:	cmp	r2, r1
   17650:	strhcc	r1, [r4, #128]	; 0x80
   17654:	ldrh	r1, [r0, #12]
   17658:	sub	r0, r0, #36	; 0x24
   1765c:	str	r0, [r4, #32]
   17660:	strh	r1, [r4, #130]	; 0x82
   17664:	ldr	r0, [r4, #156]	; 0x9c
   17668:	sub	r0, r0, #1
   1766c:	str	r0, [r4, #156]	; 0x9c
   17670:	mov	r0, r5
   17674:	pop	{r4, r5, fp, pc}
   17678:	movw	r0, #52296	; 0xcc48
   1767c:	movw	r1, #50979	; 0xc723
   17680:	movw	r3, #54523	; 0xd4fb
   17684:	movw	r2, #1732	; 0x6c4
   17688:	movt	r0, #1
   1768c:	b	176a4 <flatcc_builder_end_string@@Base+0xec>
   17690:	movw	r0, #54590	; 0xd53e
   17694:	movw	r1, #50979	; 0xc723
   17698:	movw	r3, #54523	; 0xd4fb
   1769c:	movw	r2, #1733	; 0x6c5
   176a0:	movt	r0, #1
   176a4:	movt	r1, #1
   176a8:	movt	r3, #1
   176ac:	bl	129c0 <__assert_fail@plt>

000176b0 <flatcc_builder_string_edit@@Base>:
   176b0:	ldr	r0, [r0, #16]
   176b4:	bx	lr

000176b8 <flatcc_builder_string_len@@Base>:
   176b8:	ldr	r0, [r0, #32]
   176bc:	ldr	r0, [r0, #20]
   176c0:	bx	lr

000176c4 <flatcc_builder_table_edit@@Base>:
   176c4:	push	{fp, lr}
   176c8:	mov	fp, sp
   176cc:	ldr	r2, [r0, #32]
   176d0:	ldrh	r2, [r2, #14]
   176d4:	cmp	r2, #3
   176d8:	ldreq	r2, [r0, #16]
   176dc:	ldreq	r0, [r0, #20]
   176e0:	addeq	r0, r2, r0
   176e4:	subeq	r0, r0, r1
   176e8:	popeq	{fp, pc}
   176ec:	movw	r0, #53048	; 0xcf38
   176f0:	movw	r1, #50979	; 0xc723
   176f4:	movw	r3, #54768	; 0xd5f0
   176f8:	movw	r2, #1794	; 0x702
   176fc:	movt	r0, #1
   17700:	movt	r1, #1
   17704:	movt	r3, #1
   17708:	bl	129c0 <__assert_fail@plt>

0001770c <flatcc_builder_table_add_copy@@Base>:
   1770c:	push	{r4, r5, r6, sl, fp, lr}
   17710:	add	fp, sp, #16
   17714:	mov	r4, r3
   17718:	ldr	r3, [fp, #8]
   1771c:	mov	r5, r2
   17720:	mov	r2, r4
   17724:	bl	16bd8 <flatcc_builder_table_add@@Base>
   17728:	mov	r6, r0
   1772c:	cmp	r0, #0
   17730:	beq	17744 <flatcc_builder_table_add_copy@@Base+0x38>
   17734:	mov	r0, r6
   17738:	mov	r1, r5
   1773c:	mov	r2, r4
   17740:	bl	12900 <memcpy@plt>
   17744:	mov	r0, r6
   17748:	pop	{r4, r5, r6, sl, fp, pc}

0001774c <flatcc_builder_push_buffer_alignment@@Base>:
   1774c:	ldrh	r1, [r0, #128]	; 0x80
   17750:	mov	r2, #4
   17754:	strh	r2, [r0, #128]	; 0x80
   17758:	mov	r0, r1
   1775c:	bx	lr

00017760 <flatcc_builder_pop_buffer_alignment@@Base>:
   17760:	ldrh	r2, [r0, #128]	; 0x80
   17764:	cmp	r2, r1
   17768:	strhcc	r1, [r0, #128]	; 0x80
   1776c:	bx	lr

00017770 <flatcc_builder_get_buffer_alignment@@Base>:
   17770:	ldrh	r0, [r0, #128]	; 0x80
   17774:	bx	lr

00017778 <flatcc_builder_set_vtable_clustering@@Base>:
   17778:	clz	r1, r1
   1777c:	lsr	r1, r1, #5
   17780:	str	r1, [r0, #180]	; 0xb4
   17784:	bx	lr

00017788 <flatcc_builder_set_block_align@@Base>:
   17788:	strh	r1, [r0, #132]	; 0x84
   1778c:	bx	lr

00017790 <flatcc_builder_get_level@@Base>:
   17790:	ldr	r0, [r0, #156]	; 0x9c
   17794:	bx	lr

00017798 <flatcc_builder_set_max_level@@Base>:
   17798:	str	r1, [r0, #176]	; 0xb0
   1779c:	ldr	r2, [r0, #160]	; 0xa0
   177a0:	cmp	r2, r1
   177a4:	strlt	r1, [r0, #160]	; 0xa0
   177a8:	bx	lr

000177ac <flatcc_builder_get_buffer_size@@Base>:
   177ac:	ldr	r1, [r0, #136]	; 0x88
   177b0:	ldr	r0, [r0, #140]	; 0x8c
   177b4:	sub	r0, r0, r1
   177b8:	bx	lr

000177bc <flatcc_builder_get_buffer_start@@Base>:
   177bc:	ldr	r0, [r0, #136]	; 0x88
   177c0:	bx	lr

000177c4 <flatcc_builder_get_buffer_end@@Base>:
   177c4:	ldr	r0, [r0, #140]	; 0x8c
   177c8:	bx	lr

000177cc <flatcc_builder_set_vtable_cache_limit@@Base>:
   177cc:	str	r1, [r0, #172]	; 0xac
   177d0:	bx	lr

000177d4 <flatcc_builder_set_identifier@@Base>:
   177d4:	movw	r2, #50449	; 0xc511
   177d8:	cmp	r1, #0
   177dc:	movt	r2, #1
   177e0:	movne	r2, r1
   177e4:	ldr	r1, [r2]
   177e8:	str	r1, [r0, #168]	; 0xa8
   177ec:	bx	lr

000177f0 <flatcc_builder_get_type@@Base>:
   177f0:	ldr	r0, [r0, #32]
   177f4:	cmp	r0, #0
   177f8:	ldrhne	r0, [r0, #14]
   177fc:	moveq	r0, #0
   17800:	bx	lr

00017804 <flatcc_builder_get_type_at@@Base>:
   17804:	mov	r2, r0
   17808:	mov	r0, #0
   1780c:	cmp	r1, #1
   17810:	blt	17834 <flatcc_builder_get_type_at@@Base+0x30>
   17814:	ldr	r3, [r2, #156]	; 0x9c
   17818:	cmp	r3, r1
   1781c:	bxlt	lr
   17820:	sub	r0, r1, r3
   17824:	ldr	r1, [r2, #32]
   17828:	add	r0, r0, r0, lsl #3
   1782c:	add	r0, r1, r0, lsl #2
   17830:	ldrh	r0, [r0, #14]
   17834:	bx	lr

00017838 <flatcc_builder_get_direct_buffer@@Base>:
   17838:	ldr	r2, [r0, #184]	; 0xb8
   1783c:	cmp	r2, #0
   17840:	beq	17854 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17844:	ldr	r2, [r0, #188]	; 0xbc
   17848:	ldr	r3, [r0, #192]	; 0xc0
   1784c:	cmp	r2, r3
   17850:	beq	17864 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   17854:	mov	r0, #0
   17858:	cmp	r1, #0
   1785c:	strne	r0, [r1]
   17860:	bx	lr
   17864:	cmp	r1, #0
   17868:	ldrne	r2, [r0, #212]	; 0xd4
   1786c:	strne	r2, [r1]
   17870:	ldr	r0, [r0, #196]	; 0xc4
   17874:	bx	lr

00017878 <flatcc_builder_copy_buffer@@Base>:
   17878:	push	{fp, lr}
   1787c:	mov	fp, sp
   17880:	ldr	r3, [r0, #184]	; 0xb8
   17884:	cmp	r3, #0
   17888:	beq	178bc <flatcc_builder_copy_buffer@@Base+0x44>
   1788c:	add	r0, r0, #188	; 0xbc
   17890:	bl	17f84 <flatcc_emitter_copy_buffer@@Base>
   17894:	cmp	r0, #0
   17898:	popne	{fp, pc}
   1789c:	movw	r0, #51575	; 0xc977
   178a0:	movw	r1, #50979	; 0xc723
   178a4:	movw	r3, #54907	; 0xd67b
   178a8:	movw	r2, #1926	; 0x786
   178ac:	movt	r0, #1
   178b0:	movt	r1, #1
   178b4:	movt	r3, #1
   178b8:	bl	129c0 <__assert_fail@plt>
   178bc:	mov	r0, #0
   178c0:	pop	{fp, pc}

000178c4 <flatcc_builder_finalize_buffer@@Base>:
   178c4:	push	{r4, r5, r6, sl, fp, lr}
   178c8:	add	fp, sp, #16
   178cc:	mov	r4, r0
   178d0:	ldr	r0, [r0, #136]	; 0x88
   178d4:	cmp	r1, #0
   178d8:	ldr	r2, [r4, #140]	; 0x8c
   178dc:	sub	r5, r2, r0
   178e0:	mov	r0, r5
   178e4:	strne	r5, [r1]
   178e8:	bl	1293c <malloc@plt>
   178ec:	cmp	r0, #0
   178f0:	beq	17934 <flatcc_builder_finalize_buffer@@Base+0x70>
   178f4:	mov	r6, r0
   178f8:	mov	r0, r4
   178fc:	mov	r2, r5
   17900:	mov	r1, r6
   17904:	bl	17878 <flatcc_builder_copy_buffer@@Base>
   17908:	cmp	r0, #0
   1790c:	movne	r0, r6
   17910:	popne	{r4, r5, r6, sl, fp, pc}
   17914:	movw	r0, #55497	; 0xd8c9
   17918:	movw	r1, #50979	; 0xc723
   1791c:	movw	r3, #54976	; 0xd6c0
   17920:	movw	r2, #1948	; 0x79c
   17924:	movt	r0, #1
   17928:	movt	r1, #1
   1792c:	movt	r3, #1
   17930:	bl	129c0 <__assert_fail@plt>
   17934:	movw	r0, #55497	; 0xd8c9
   17938:	movw	r1, #50979	; 0xc723
   1793c:	movw	r3, #54976	; 0xd6c0
   17940:	movw	r2, #1944	; 0x798
   17944:	movt	r0, #1
   17948:	movt	r1, #1
   1794c:	movt	r3, #1
   17950:	bl	129c0 <__assert_fail@plt>

00017954 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17954:	push	{r4, r5, r6, r7, fp, lr}
   17958:	add	fp, sp, #16
   1795c:	sub	sp, sp, #8
   17960:	mov	r5, r0
   17964:	mov	r4, r1
   17968:	ldr	r0, [r0, #136]	; 0x88
   1796c:	ldr	r1, [r5, #140]	; 0x8c
   17970:	cmp	r4, #0
   17974:	sub	r0, r1, r0
   17978:	mov	r1, #0
   1797c:	strne	r0, [r4]
   17980:	ldrh	r2, [r5, #128]	; 0x80
   17984:	str	r1, [sp, #4]
   17988:	add	r0, r0, r2
   1798c:	cmp	r2, #4
   17990:	mov	r1, r2
   17994:	rsb	r2, r2, #0
   17998:	sub	r0, r0, #1
   1799c:	movls	r1, #4
   179a0:	and	r7, r0, r2
   179a4:	add	r0, sp, #4
   179a8:	mov	r2, r7
   179ac:	bl	12984 <posix_memalign@plt>
   179b0:	ldr	r6, [sp, #4]
   179b4:	cmp	r0, #0
   179b8:	cmpne	r6, #0
   179bc:	bne	179e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   179c0:	cmp	r6, #0
   179c4:	beq	179e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   179c8:	mov	r0, r5
   179cc:	mov	r1, r6
   179d0:	mov	r2, r7
   179d4:	bl	17878 <flatcc_builder_copy_buffer@@Base>
   179d8:	cmp	r0, #0
   179dc:	bne	179f4 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   179e0:	mov	r0, r6
   179e4:	bl	128f4 <free@plt>
   179e8:	mov	r6, #0
   179ec:	cmp	r4, #0
   179f0:	strne	r6, [r4]
   179f4:	mov	r0, r6
   179f8:	sub	sp, fp, #16
   179fc:	pop	{r4, r5, r6, r7, fp, pc}

00017a00 <flatcc_builder_aligned_alloc@@Base>:
   17a00:	push	{fp, lr}
   17a04:	mov	fp, sp
   17a08:	sub	sp, sp, #8
   17a0c:	mov	r2, r1
   17a10:	mov	r1, r0
   17a14:	mov	r0, #0
   17a18:	cmp	r1, #4
   17a1c:	str	r0, [sp, #4]
   17a20:	add	r0, sp, #4
   17a24:	movls	r1, #4
   17a28:	bl	12984 <posix_memalign@plt>
   17a2c:	mov	r1, r0
   17a30:	ldr	r0, [sp, #4]
   17a34:	cmp	r1, #0
   17a38:	cmpne	r0, #0
   17a3c:	beq	17a4c <flatcc_builder_aligned_alloc@@Base+0x4c>
   17a40:	bl	128f4 <free@plt>
   17a44:	mov	r0, #0
   17a48:	str	r0, [sp, #4]
   17a4c:	mov	sp, fp
   17a50:	pop	{fp, pc}

00017a54 <flatcc_builder_aligned_free@@Base>:
   17a54:	b	128f4 <free@plt>

00017a58 <flatcc_builder_get_emit_context@@Base>:
   17a58:	ldr	r0, [r0, #36]	; 0x24
   17a5c:	bx	lr
   17a60:	push	{r4, r5, r6, sl, fp, lr}
   17a64:	add	fp, sp, #16
   17a68:	sub	sp, sp, #8
   17a6c:	mov	r6, r2
   17a70:	ldr	r2, [r0, #28]
   17a74:	mov	r5, r0
   17a78:	ldr	r0, [r0, #40]	; 0x28
   17a7c:	mov	r3, #1
   17a80:	ldr	r4, [r5, #48]	; 0x30
   17a84:	str	r3, [sp]
   17a88:	mov	r3, #1
   17a8c:	add	r2, r2, r1
   17a90:	add	r1, r5, #60	; 0x3c
   17a94:	blx	r4
   17a98:	mov	r1, r0
   17a9c:	mvn	r0, #0
   17aa0:	cmp	r1, #0
   17aa4:	bne	17ad8 <flatcc_builder_get_emit_context@@Base+0x80>
   17aa8:	ldr	r0, [r5, #28]
   17aac:	ldr	r2, [r5, #60]	; 0x3c
   17ab0:	ldr	r3, [r5, #64]	; 0x40
   17ab4:	ldr	r1, [r5, #32]
   17ab8:	add	r2, r2, r0
   17abc:	sub	r0, r3, r0
   17ac0:	cmp	r0, r6
   17ac4:	str	r2, [r5, #16]
   17ac8:	movhi	r0, r6
   17acc:	str	r0, [r5, #24]
   17ad0:	mov	r0, #0
   17ad4:	str	r6, [r1, #4]
   17ad8:	sub	sp, fp, #16
   17adc:	pop	{r4, r5, r6, sl, fp, pc}

00017ae0 <flatcc_emitter_recycle_page@@Base>:
   17ae0:	ldr	r3, [r0]
   17ae4:	mov	r2, r0
   17ae8:	mvn	r0, #0
   17aec:	cmp	r3, r1
   17af0:	beq	17b30 <flatcc_emitter_recycle_page@@Base+0x50>
   17af4:	ldr	r2, [r2, #4]
   17af8:	cmp	r2, r1
   17afc:	bxeq	lr
   17b00:	ldr	r0, [r1, #2944]	; 0xb80
   17b04:	ldr	r2, [r1, #2948]	; 0xb84
   17b08:	str	r2, [r0, #2948]	; 0xb84
   17b0c:	ldr	r2, [r1, #2948]	; 0xb84
   17b10:	str	r0, [r2, #2944]	; 0xb80
   17b14:	ldr	r0, [r3, #2948]	; 0xb84
   17b18:	str	r3, [r1, #2944]	; 0xb80
   17b1c:	str	r0, [r1, #2948]	; 0xb84
   17b20:	str	r1, [r0, #2944]	; 0xb80
   17b24:	ldr	r0, [r1, #2944]	; 0xb80
   17b28:	str	r1, [r0, #2948]	; 0xb84
   17b2c:	mov	r0, #0
   17b30:	bx	lr

00017b34 <flatcc_emitter_reset@@Base>:
   17b34:	push	{r4, sl, fp, lr}
   17b38:	add	fp, sp, #8
   17b3c:	ldr	r1, [r0]
   17b40:	cmp	r1, #0
   17b44:	beq	17bfc <flatcc_emitter_reset@@Base+0xc8>
   17b48:	mov	r4, r0
   17b4c:	add	r2, r1, #1472	; 0x5c0
   17b50:	mov	r0, #1472	; 0x5c0
   17b54:	mov	r3, #0
   17b58:	stmib	r4, {r1, r2}
   17b5c:	str	r0, [r4, #12]
   17b60:	str	r2, [r4, #16]
   17b64:	str	r0, [r4, #20]
   17b68:	movw	r0, #64064	; 0xfa40
   17b6c:	movt	r0, #65535	; 0xffff
   17b70:	str	r0, [r1, #2952]	; 0xb88
   17b74:	ldr	r2, [r4, #32]
   17b78:	ldr	r0, [r4, #24]
   17b7c:	cmp	r2, #0
   17b80:	moveq	r2, r0
   17b84:	streq	r0, [r4, #32]
   17b88:	str	r3, [r4, #24]
   17b8c:	add	r2, r2, r2, lsl #1
   17b90:	lsr	r2, r2, #2
   17b94:	add	r0, r2, r0, lsr #2
   17b98:	str	r0, [r4, #32]
   17b9c:	ldr	r2, [r4, #28]
   17ba0:	cmp	r2, r0, lsl #1
   17ba4:	bls	17bfc <flatcc_emitter_reset@@Base+0xc8>
   17ba8:	mov	r2, r1
   17bac:	ldr	r0, [r2, #2944]!	; 0xb80
   17bb0:	cmp	r0, r1
   17bb4:	popeq	{r4, sl, fp, pc}
   17bb8:	ldr	r3, [r0, #2944]	; 0xb80
   17bbc:	str	r3, [r2]
   17bc0:	ldr	r2, [r0, #2944]	; 0xb80
   17bc4:	str	r1, [r2, #2948]	; 0xb84
   17bc8:	bl	128f4 <free@plt>
   17bcc:	ldr	r0, [r4, #28]
   17bd0:	ldr	r1, [r4, #32]
   17bd4:	sub	r0, r0, #2944	; 0xb80
   17bd8:	cmp	r0, r1, lsl #1
   17bdc:	str	r0, [r4, #28]
   17be0:	bls	17bfc <flatcc_emitter_reset@@Base+0xc8>
   17be4:	ldr	r1, [r4, #4]
   17be8:	ldr	r3, [r4]
   17bec:	mov	r2, r1
   17bf0:	ldr	r0, [r2, #2944]!	; 0xb80
   17bf4:	cmp	r0, r3
   17bf8:	bne	17bb8 <flatcc_emitter_reset@@Base+0x84>
   17bfc:	pop	{r4, sl, fp, pc}

00017c00 <flatcc_emitter_clear@@Base>:
   17c00:	push	{r4, r5, r6, sl, fp, lr}
   17c04:	add	fp, sp, #16
   17c08:	ldr	r5, [r0]
   17c0c:	cmp	r5, #0
   17c10:	beq	17c60 <flatcc_emitter_clear@@Base+0x60>
   17c14:	mov	r4, r0
   17c18:	ldr	r0, [r5, #2948]	; 0xb84
   17c1c:	mov	r6, #0
   17c20:	str	r6, [r0, #2944]	; 0xb80
   17c24:	ldr	r0, [r5, #2944]	; 0xb80
   17c28:	cmp	r0, #0
   17c2c:	beq	17c40 <flatcc_emitter_clear@@Base+0x40>
   17c30:	mov	r5, r0
   17c34:	ldr	r0, [r0, #2948]	; 0xb84
   17c38:	bl	128f4 <free@plt>
   17c3c:	b	17c24 <flatcc_emitter_clear@@Base+0x24>
   17c40:	mov	r0, r5
   17c44:	bl	128f4 <free@plt>
   17c48:	vmov.i32	q8, #0	; 0x00000000
   17c4c:	add	r0, r4, #16
   17c50:	vst1.32	{d16-d17}, [r0]
   17c54:	mov	r0, #32
   17c58:	vst1.32	{d16-d17}, [r4], r0
   17c5c:	str	r6, [r4]
   17c60:	pop	{r4, r5, r6, sl, fp, pc}

00017c64 <flatcc_emitter@@Base>:
   17c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c68:	add	fp, sp, #28
   17c6c:	sub	sp, sp, #4
   17c70:	mov	r6, r0
   17c74:	mov	r7, r1
   17c78:	ldr	r0, [r0, #24]
   17c7c:	ldr	r1, [fp, #8]
   17c80:	mov	r4, r2
   17c84:	cmn	r3, #1
   17c88:	mov	r9, r6
   17c8c:	add	r0, r0, r1
   17c90:	str	r0, [r6, #24]
   17c94:	ble	17dd0 <flatcc_emitter@@Base+0x16c>
   17c98:	ldr	r0, [r9, #20]!
   17c9c:	cmp	r0, r1
   17ca0:	bcs	17f20 <flatcc_emitter@@Base+0x2bc>
   17ca4:	mov	r8, #0
   17ca8:	cmp	r4, #0
   17cac:	beq	17f78 <flatcc_emitter@@Base+0x314>
   17cb0:	movw	sl, #64064	; 0xfa40
   17cb4:	movt	sl, #65535	; 0xffff
   17cb8:	ldr	r8, [r7, #4]
   17cbc:	cmp	r8, #0
   17cc0:	beq	17dbc <flatcc_emitter@@Base+0x158>
   17cc4:	ldr	r9, [r7]
   17cc8:	cmp	r8, r0
   17ccc:	mov	r5, r8
   17cd0:	bls	17d88 <flatcc_emitter@@Base+0x124>
   17cd4:	mov	r5, r0
   17cd8:	cmp	r5, #0
   17cdc:	bne	17d88 <flatcc_emitter@@Base+0x124>
   17ce0:	ldr	r5, [r6, #4]
   17ce4:	cmp	r5, #0
   17ce8:	beq	17cfc <flatcc_emitter@@Base+0x98>
   17cec:	ldr	r0, [r5, #2944]	; 0xb80
   17cf0:	ldr	r1, [r6]
   17cf4:	cmp	r0, r1
   17cf8:	bne	17d34 <flatcc_emitter@@Base+0xd0>
   17cfc:	movw	r0, #2956	; 0xb8c
   17d00:	bl	1293c <malloc@plt>
   17d04:	cmp	r0, #0
   17d08:	beq	17f30 <flatcc_emitter@@Base+0x2cc>
   17d0c:	ldr	r1, [r6, #28]
   17d10:	cmp	r5, #0
   17d14:	add	r1, r1, #2944	; 0xb80
   17d18:	str	r1, [r6, #28]
   17d1c:	beq	17d58 <flatcc_emitter@@Base+0xf4>
   17d20:	ldr	r1, [r6]
   17d24:	str	r1, [r0, #2944]	; 0xb80
   17d28:	str	r5, [r0, #2948]	; 0xb84
   17d2c:	str	r0, [r1, #2948]	; 0xb84
   17d30:	str	r0, [r5, #2944]	; 0xb80
   17d34:	mov	r5, #2944	; 0xb80
   17d38:	str	r0, [r6, #4]
   17d3c:	str	r0, [r6, #16]
   17d40:	str	r5, [r6, #20]
   17d44:	ldr	r1, [r0, #2948]	; 0xb84
   17d48:	ldr	r1, [r1, #2952]	; 0xb88
   17d4c:	add	r1, r1, #2944	; 0xb80
   17d50:	str	r1, [r0, #2952]	; 0xb88
   17d54:	b	17d7c <flatcc_emitter@@Base+0x118>
   17d58:	mov	r5, #1472	; 0x5c0
   17d5c:	add	r1, r0, #1472	; 0x5c0
   17d60:	str	r0, [r6]
   17d64:	stmib	r6, {r0, r1, r5}
   17d68:	str	r1, [r6, #16]
   17d6c:	str	r5, [r6, #20]
   17d70:	str	r0, [r0, #2944]	; 0xb80
   17d74:	str	r0, [r0, #2948]	; 0xb84
   17d78:	str	sl, [r0, #2952]	; 0xb88
   17d7c:	cmp	r8, r5
   17d80:	bhi	17cd8 <flatcc_emitter@@Base+0x74>
   17d84:	mov	r5, r8
   17d88:	ldr	r0, [r6, #16]
   17d8c:	mov	r1, r9
   17d90:	mov	r2, r5
   17d94:	bl	12900 <memcpy@plt>
   17d98:	ldr	r0, [r6, #16]
   17d9c:	ldr	r1, [r6, #20]
   17da0:	add	r9, r9, r5
   17da4:	subs	r8, r8, r5
   17da8:	add	r2, r0, r5
   17dac:	sub	r0, r1, r5
   17db0:	str	r2, [r6, #16]
   17db4:	str	r0, [r6, #20]
   17db8:	bne	17cc8 <flatcc_emitter@@Base+0x64>
   17dbc:	subs	r4, r4, #1
   17dc0:	add	r7, r7, #8
   17dc4:	bne	17cb8 <flatcc_emitter@@Base+0x54>
   17dc8:	mov	r8, #0
   17dcc:	b	17f78 <flatcc_emitter@@Base+0x314>
   17dd0:	ldr	r0, [r9, #12]!
   17dd4:	cmp	r0, r1
   17dd8:	bcs	17f38 <flatcc_emitter@@Base+0x2d4>
   17ddc:	mov	r8, #0
   17de0:	cmp	r4, #0
   17de4:	beq	17f78 <flatcc_emitter@@Base+0x314>
   17de8:	add	r0, r7, r4, lsl #3
   17dec:	ldr	sl, [r0, #-4]
   17df0:	sub	r1, r0, #8
   17df4:	str	r1, [sp]
   17df8:	cmp	sl, #0
   17dfc:	beq	17f10 <flatcc_emitter@@Base+0x2ac>
   17e00:	ldr	r0, [sp]
   17e04:	ldr	r0, [r0]
   17e08:	add	r7, r0, sl
   17e0c:	ldr	r1, [r9]
   17e10:	cmp	sl, r1
   17e14:	bls	17ee0 <flatcc_emitter@@Base+0x27c>
   17e18:	cmp	r1, #0
   17e1c:	mov	r5, r1
   17e20:	bne	17ee4 <flatcc_emitter@@Base+0x280>
   17e24:	ldr	r5, [r6]
   17e28:	cmp	r5, #0
   17e2c:	beq	17e50 <flatcc_emitter@@Base+0x1ec>
   17e30:	ldr	r0, [r5, #2948]	; 0xb84
   17e34:	ldr	r1, [r6, #4]
   17e38:	cmp	r0, r1
   17e3c:	beq	17e50 <flatcc_emitter@@Base+0x1ec>
   17e40:	ldr	r1, [r5, #2952]	; 0xb88
   17e44:	sub	r1, r1, #2944	; 0xb80
   17e48:	str	r1, [r0, #2952]	; 0xb88
   17e4c:	b	17e88 <flatcc_emitter@@Base+0x224>
   17e50:	movw	r0, #2956	; 0xb8c
   17e54:	bl	1293c <malloc@plt>
   17e58:	cmp	r0, #0
   17e5c:	beq	17f30 <flatcc_emitter@@Base+0x2cc>
   17e60:	ldr	r1, [r6, #28]
   17e64:	cmp	r5, #0
   17e68:	add	r1, r1, #2944	; 0xb80
   17e6c:	str	r1, [r6, #28]
   17e70:	beq	17eac <flatcc_emitter@@Base+0x248>
   17e74:	ldr	r1, [r6, #4]
   17e78:	str	r5, [r0, #2944]	; 0xb80
   17e7c:	str	r1, [r0, #2948]	; 0xb84
   17e80:	str	r0, [r5, #2948]	; 0xb84
   17e84:	str	r0, [r1, #2944]	; 0xb80
   17e88:	mov	r1, #2944	; 0xb80
   17e8c:	add	r2, r0, #2944	; 0xb80
   17e90:	str	r0, [r6]
   17e94:	str	r2, [r6, #8]
   17e98:	str	r1, [r6, #12]
   17e9c:	ldr	r2, [r0, #2944]	; 0xb80
   17ea0:	ldr	r2, [r2, #2952]	; 0xb88
   17ea4:	sub	r2, r2, #2944	; 0xb80
   17ea8:	b	17ed8 <flatcc_emitter@@Base+0x274>
   17eac:	add	r2, r0, #1472	; 0x5c0
   17eb0:	mov	r1, #1472	; 0x5c0
   17eb4:	str	r0, [r6]
   17eb8:	stmib	r6, {r0, r2}
   17ebc:	str	r1, [r6, #12]
   17ec0:	str	r2, [r6, #16]
   17ec4:	movw	r2, #64064	; 0xfa40
   17ec8:	str	r1, [r6, #20]
   17ecc:	str	r0, [r0, #2944]	; 0xb80
   17ed0:	str	r0, [r0, #2948]	; 0xb84
   17ed4:	movt	r2, #65535	; 0xffff
   17ed8:	str	r2, [r0, #2952]	; 0xb88
   17edc:	b	17e10 <flatcc_emitter@@Base+0x1ac>
   17ee0:	mov	r5, sl
   17ee4:	sub	r0, r1, r5
   17ee8:	sub	r7, r7, r5
   17eec:	mov	r2, r5
   17ef0:	str	r0, [r6, #12]
   17ef4:	mov	r1, r7
   17ef8:	ldr	r0, [r6, #8]
   17efc:	sub	r0, r0, r5
   17f00:	str	r0, [r6, #8]
   17f04:	bl	12900 <memcpy@plt>
   17f08:	subs	sl, sl, r5
   17f0c:	bne	17e0c <flatcc_emitter@@Base+0x1a8>
   17f10:	ldr	r0, [sp]
   17f14:	subs	r4, r4, #1
   17f18:	bne	17dec <flatcc_emitter@@Base+0x188>
   17f1c:	b	17f78 <flatcc_emitter@@Base+0x314>
   17f20:	ldr	r5, [r6, #16]
   17f24:	add	r2, r5, r1
   17f28:	str	r2, [r6, #16]
   17f2c:	b	17f44 <flatcc_emitter@@Base+0x2e0>
   17f30:	mvn	r8, #0
   17f34:	b	17f78 <flatcc_emitter@@Base+0x314>
   17f38:	ldr	r2, [r6, #8]
   17f3c:	sub	r5, r2, r1
   17f40:	str	r5, [r6, #8]
   17f44:	sub	r0, r0, r1
   17f48:	mov	r8, #0
   17f4c:	cmp	r4, #0
   17f50:	str	r0, [r9]
   17f54:	beq	17f78 <flatcc_emitter@@Base+0x314>
   17f58:	ldm	r7, {r1, r2}
   17f5c:	mov	r0, r5
   17f60:	bl	12900 <memcpy@plt>
   17f64:	ldr	r0, [r7, #4]
   17f68:	add	r7, r7, #8
   17f6c:	subs	r4, r4, #1
   17f70:	add	r5, r5, r0
   17f74:	bne	17f58 <flatcc_emitter@@Base+0x2f4>
   17f78:	mov	r0, r8
   17f7c:	sub	sp, fp, #28
   17f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f84 <flatcc_emitter_copy_buffer@@Base>:
   17f84:	push	{r4, r5, r6, sl, fp, lr}
   17f88:	add	fp, sp, #16
   17f8c:	mov	r3, r2
   17f90:	ldr	r2, [r0, #24]
   17f94:	mov	r5, #0
   17f98:	cmp	r2, r3
   17f9c:	bhi	18038 <flatcc_emitter_copy_buffer@@Base+0xb4>
   17fa0:	mov	r4, r0
   17fa4:	ldr	r0, [r0]
   17fa8:	cmp	r0, #0
   17fac:	beq	18038 <flatcc_emitter_copy_buffer@@Base+0xb4>
   17fb0:	mov	r6, r1
   17fb4:	ldr	r1, [r4, #4]
   17fb8:	cmp	r0, r1
   17fbc:	beq	18028 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17fc0:	ldr	r0, [r4, #12]
   17fc4:	ldr	r1, [r4, #8]
   17fc8:	rsb	r5, r0, #2944	; 0xb80
   17fcc:	mov	r0, r6
   17fd0:	mov	r2, r5
   17fd4:	bl	12900 <memcpy@plt>
   17fd8:	ldm	r4, {r0, r1}
   17fdc:	add	r5, r6, r5
   17fe0:	ldr	r6, [r0, #2944]	; 0xb80
   17fe4:	cmp	r6, r1
   17fe8:	beq	18010 <flatcc_emitter_copy_buffer@@Base+0x8c>
   17fec:	mov	r0, r5
   17ff0:	mov	r1, r6
   17ff4:	mov	r2, #2944	; 0xb80
   17ff8:	bl	12900 <memcpy@plt>
   17ffc:	ldr	r6, [r6, #2944]	; 0xb80
   18000:	ldr	r0, [r4, #4]
   18004:	add	r5, r5, #2944	; 0xb80
   18008:	cmp	r6, r0
   1800c:	bne	17fec <flatcc_emitter_copy_buffer@@Base+0x68>
   18010:	ldr	r0, [r4, #20]
   18014:	mov	r1, r6
   18018:	rsb	r2, r0, #2944	; 0xb80
   1801c:	mov	r0, r5
   18020:	bl	12900 <memcpy@plt>
   18024:	b	18038 <flatcc_emitter_copy_buffer@@Base+0xb4>
   18028:	ldr	r1, [r4, #8]
   1802c:	mov	r0, r6
   18030:	bl	12900 <memcpy@plt>
   18034:	mov	r5, r6
   18038:	mov	r0, r5
   1803c:	pop	{r4, r5, r6, sl, fp, pc}

00018040 <grisu3_diy_fp_encode_double@@Base>:
   18040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18044:	add	fp, sp, #28
   18048:	sub	sp, sp, #44	; 0x2c
   1804c:	mov	r5, r2
   18050:	mov	r2, r0
   18054:	mov	r0, #0
   18058:	mov	r9, r3
   1805c:	mov	r3, r1
   18060:	str	r0, [sp]
   18064:	str	r0, [sp, #4]
   18068:	add	r0, sp, #24
   1806c:	bl	183f8 <grisu3_diy_fp_encode_double@@Base+0x3b8>
   18070:	ldr	r1, [fp, #8]
   18074:	sub	r0, r5, r9
   18078:	cmp	r1, #0
   1807c:	movwne	r1, #1
   18080:	cmn	r0, #348	; 0x15c
   18084:	blt	18370 <grisu3_diy_fp_encode_double@@Base+0x330>
   18088:	cmp	r0, #348	; 0x15c
   1808c:	bge	18388 <grisu3_diy_fp_encode_double@@Base+0x348>
   18090:	add	r2, r0, #348	; 0x15c
   18094:	movw	r6, #55760	; 0xd9d0
   18098:	asr	r3, r2, #31
   1809c:	movt	r6, #1
   180a0:	add	r2, r2, r3, lsr #29
   180a4:	mvn	r3, #14
   180a8:	and	r2, r3, r2, lsl #1
   180ac:	ldr	r8, [r6, r2]!
   180b0:	ldrsh	r4, [r6, #10]
   180b4:	cmp	r0, r4
   180b8:	blt	183a0 <grisu3_diy_fp_encode_double@@Base+0x360>
   180bc:	add	r2, r4, #8
   180c0:	cmp	r2, r0
   180c4:	ble	183b8 <grisu3_diy_fp_encode_double@@Base+0x378>
   180c8:	lsl	r5, r1, #2
   180cc:	ldr	r1, [sp, #32]
   180d0:	ldr	r2, [sp, #24]
   180d4:	ldr	r3, [sp, #28]
   180d8:	ldr	ip, [sp, #36]	; 0x24
   180dc:	cmp	r0, r4
   180e0:	rsb	r7, r1, #0
   180e4:	lsl	sl, r5, r7
   180e8:	beq	1814c <grisu3_diy_fp_encode_double@@Base+0x10c>
   180ec:	mvn	r7, r4
   180f0:	add	r4, r0, r7
   180f4:	cmp	r4, #7
   180f8:	bcs	183d8 <grisu3_diy_fp_encode_double@@Base+0x398>
   180fc:	movw	r0, #55648	; 0xd960
   18100:	stm	sp, {r1, ip}
   18104:	movt	r0, #1
   18108:	ldr	r1, [r0, r4, lsl #4]!
   1810c:	str	r1, [sp, #8]
   18110:	ldmib	r0, {r1, r7}
   18114:	ldr	r0, [r0, #12]
   18118:	str	r7, [sp, #16]
   1811c:	str	r1, [sp, #12]
   18120:	str	r0, [sp, #20]
   18124:	add	r0, sp, #24
   18128:	bl	1849c <grisu3_diy_fp_encode_double@@Base+0x45c>
   1812c:	add	r0, r9, r4
   18130:	ldr	r2, [sp, #24]
   18134:	ldr	r3, [sp, #28]
   18138:	ldr	r1, [sp, #32]
   1813c:	ldr	ip, [sp, #36]	; 0x24
   18140:	add	r0, r0, #1
   18144:	cmp	r0, #19
   18148:	addgt	sl, sl, #4
   1814c:	ldr	r0, [r6, #4]
   18150:	ldrsh	r7, [r6, #8]
   18154:	stm	sp, {r1, ip}
   18158:	mov	r6, #0
   1815c:	str	r8, [sp, #8]
   18160:	str	r6, [sp, #20]
   18164:	str	r0, [sp, #12]
   18168:	add	r0, sp, #24
   1816c:	str	r7, [sp, #16]
   18170:	bl	1849c <grisu3_diy_fp_encode_double@@Base+0x45c>
   18174:	add	r5, sp, #24
   18178:	ldr	r0, [sp, #36]	; 0x24
   1817c:	ldm	r5, {r2, r3, r5}
   18180:	str	r5, [sp]
   18184:	str	r0, [sp, #4]
   18188:	add	r0, sp, #24
   1818c:	bl	183f8 <grisu3_diy_fp_encode_double@@Base+0x3b8>
   18190:	ldr	r7, [sp, #32]
   18194:	cmp	sl, #0
   18198:	mov	r0, #9
   1819c:	ldr	r4, [sp, #24]
   181a0:	ldr	r3, [sp, #28]
   181a4:	movweq	r0, #8
   181a8:	add	r0, r0, sl
   181ac:	sub	r1, r5, r7
   181b0:	lsl	lr, r0, r1
   181b4:	movw	r1, #64462	; 0xfbce
   181b8:	add	r0, r7, #64	; 0x40
   181bc:	movt	r1, #65535	; 0xffff
   181c0:	add	r2, r1, #63	; 0x3f
   181c4:	cmp	r0, r2
   181c8:	bgt	18218 <grisu3_diy_fp_encode_double@@Base+0x1d8>
   181cc:	mvn	r2, #1072	; 0x430
   181d0:	mov	r6, #64	; 0x40
   181d4:	cmp	r0, r2
   181d8:	blt	181e8 <grisu3_diy_fp_encode_double@@Base+0x1a8>
   181dc:	sub	r6, r1, r7
   181e0:	cmp	r6, #61	; 0x3d
   181e4:	blt	18218 <grisu3_diy_fp_encode_double@@Base+0x1d8>
   181e8:	sub	r0, r6, #62	; 0x3e
   181ec:	mov	r2, #9
   181f0:	rsb	r5, r6, #94	; 0x5e
   181f4:	add	lr, r2, lr, asr r0
   181f8:	lsr	r2, r4, r0
   181fc:	add	r7, r0, r7
   18200:	orr	r4, r2, r3, lsl r5
   18204:	subs	r2, r6, #94	; 0x5e
   18208:	mov	r6, #62	; 0x3e
   1820c:	lsrpl	r4, r3, r2
   18210:	lsr	r3, r3, r0
   18214:	movwpl	r3, #0
   18218:	lsr	r0, r4, r6
   1821c:	rsb	r2, r6, #32
   18220:	add	r5, r7, r6
   18224:	mov	r7, #1
   18228:	orr	r2, r0, r3, lsl r2
   1822c:	subs	r0, r6, #32
   18230:	lsrpl	r2, r3, r0
   18234:	sub	r0, r6, #1
   18238:	lsr	r3, r3, r6
   1823c:	movwpl	r3, #0
   18240:	lsl	r7, r7, r0
   18244:	subs	r0, r6, #33	; 0x21
   18248:	movwpl	r7, #0
   1824c:	add	r8, lr, r7, lsl #3
   18250:	cmp	r6, r8
   18254:	blt	18274 <grisu3_diy_fp_encode_double@@Base+0x234>
   18258:	adds	r2, r2, #1
   1825c:	adc	r3, r3, #0
   18260:	tst	r3, #2097152	; 0x200000
   18264:	beq	18274 <grisu3_diy_fp_encode_double@@Base+0x234>
   18268:	lsrs	r3, r3, #1
   1826c:	rrx	r2, r2
   18270:	add	r5, r5, #1
   18274:	and	r6, r7, r4
   18278:	cmp	r3, #2097152	; 0x200000
   1827c:	bcc	182a0 <grisu3_diy_fp_encode_double@@Base+0x260>
   18280:	mov	r4, #0
   18284:	lsrs	r0, r3, #1
   18288:	rrx	r2, r2
   1828c:	cmp	r4, r3, lsr #22
   18290:	add	r5, r5, #1
   18294:	mov	r3, r0
   18298:	bne	18284 <grisu3_diy_fp_encode_double@@Base+0x244>
   1829c:	b	182a4 <grisu3_diy_fp_encode_double@@Base+0x264>
   182a0:	mov	r0, r3
   182a4:	ldr	ip, [fp, #12]
   182a8:	vmov.i32	d16, #0	; 0x00000000
   182ac:	lsl	r9, r7, #3
   182b0:	lsl	r6, r6, #3
   182b4:	cmp	r5, r1
   182b8:	blt	18344 <grisu3_diy_fp_encode_double@@Base+0x304>
   182bc:	and	r3, r0, #1048576	; 0x100000
   182c0:	mov	r4, #1
   182c4:	cmp	r5, r1
   182c8:	eor	r7, r4, r3, lsr #20
   182cc:	beq	18308 <grisu3_diy_fp_encode_double@@Base+0x2c8>
   182d0:	cmp	r3, #0
   182d4:	bne	18308 <grisu3_diy_fp_encode_double@@Base+0x2c8>
   182d8:	mov	r4, #1
   182dc:	lsl	r3, r0, #1
   182e0:	ands	r0, r0, #524288	; 0x80000
   182e4:	sub	r5, r5, #1
   182e8:	orr	r3, r3, r2, lsr #31
   182ec:	eor	r7, r4, r0, lsr #19
   182f0:	lsl	r2, r2, #1
   182f4:	bne	1830c <grisu3_diy_fp_encode_double@@Base+0x2cc>
   182f8:	cmp	r5, r1
   182fc:	mov	r0, r3
   18300:	bgt	182dc <grisu3_diy_fp_encode_double@@Base+0x29c>
   18304:	b	1830c <grisu3_diy_fp_encode_double@@Base+0x2cc>
   18308:	mov	r3, r0
   1830c:	cmp	r5, r1
   18310:	bne	18324 <grisu3_diy_fp_encode_double@@Base+0x2e4>
   18314:	mov	r0, #0
   18318:	cmp	r7, #0
   1831c:	mov	r1, #0
   18320:	bne	18334 <grisu3_diy_fp_encode_double@@Base+0x2f4>
   18324:	movw	r0, #1075	; 0x433
   18328:	add	r0, r5, r0
   1832c:	lsl	r1, r0, #20
   18330:	mov	r0, #0
   18334:	bfc	r3, #20, #12
   18338:	orr	r0, r0, r2
   1833c:	orr	r1, r1, r3
   18340:	vmov	d16, r0, r1
   18344:	cmp	r6, r8
   18348:	sub	r2, r9, lr
   1834c:	mov	r1, #0
   18350:	mov	r0, #0
   18354:	vstr	d16, [ip]
   18358:	movwge	r1, #1
   1835c:	cmp	r2, r6
   18360:	movwge	r0, #1
   18364:	orr	r0, r1, r0
   18368:	sub	sp, fp, #28
   1836c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18370:	movw	r0, #59331	; 0xe7c3
   18374:	movw	r1, #57832	; 0xe1e8
   18378:	movw	r3, #59362	; 0xe7e2
   1837c:	mov	r2, #80	; 0x50
   18380:	movt	r0, #1
   18384:	b	183cc <grisu3_diy_fp_encode_double@@Base+0x38c>
   18388:	movw	r0, #59419	; 0xe81b
   1838c:	movw	r1, #57832	; 0xe1e8
   18390:	movw	r3, #59362	; 0xe7e2
   18394:	mov	r2, #81	; 0x51
   18398:	movt	r0, #1
   1839c:	b	183cc <grisu3_diy_fp_encode_double@@Base+0x38c>
   183a0:	movw	r0, #59462	; 0xe846
   183a4:	movw	r1, #57832	; 0xe1e8
   183a8:	movw	r3, #59362	; 0xe7e2
   183ac:	mov	r2, #88	; 0x58
   183b0:	movt	r0, #1
   183b4:	b	183cc <grisu3_diy_fp_encode_double@@Base+0x38c>
   183b8:	movw	r0, #59477	; 0xe855
   183bc:	movw	r1, #57832	; 0xe1e8
   183c0:	movw	r3, #59362	; 0xe7e2
   183c4:	mov	r2, #89	; 0x59
   183c8:	movt	r0, #1
   183cc:	movt	r1, #1
   183d0:	movt	r3, #1
   183d4:	bl	129c0 <__assert_fail@plt>
   183d8:	movw	r0, #57804	; 0xe1cc
   183dc:	movw	r1, #57832	; 0xe1e8
   183e0:	movw	r3, #57919	; 0xe23f
   183e4:	mov	r2, #185	; 0xb9
   183e8:	movt	r0, #1
   183ec:	movt	r1, #1
   183f0:	movt	r3, #1
   183f4:	bl	129c0 <__assert_fail@plt>
   183f8:	push	{r4, sl, fp, lr}
   183fc:	add	fp, sp, #8
   18400:	orrs	r1, r2, r3
   18404:	beq	1847c <grisu3_diy_fp_encode_double@@Base+0x43c>
   18408:	ldr	r1, [fp, #8]
   1840c:	mov	r4, #0
   18410:	cmp	r4, r3, lsr #22
   18414:	bne	18430 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   18418:	lsl	r3, r3, #10
   1841c:	sub	r1, r1, #10
   18420:	orr	r3, r3, r2, lsr #22
   18424:	lsl	r2, r2, #10
   18428:	cmp	r3, #4194304	; 0x400000
   1842c:	bcc	18418 <grisu3_diy_fp_encode_double@@Base+0x3d8>
   18430:	ldr	ip, [fp, #12]
   18434:	cmp	r3, #0
   18438:	bmi	18464 <grisu3_diy_fp_encode_double@@Base+0x424>
   1843c:	mvn	lr, #0
   18440:	lsl	r3, r3, #1
   18444:	lsl	r4, r2, #1
   18448:	sub	r1, r1, #1
   1844c:	orr	r3, r3, r2, lsr #31
   18450:	subs	r2, lr, r2, lsl #1
   18454:	sbcs	r2, lr, r3
   18458:	mov	r2, r4
   1845c:	blt	18440 <grisu3_diy_fp_encode_double@@Base+0x400>
   18460:	b	18468 <grisu3_diy_fp_encode_double@@Base+0x428>
   18464:	mov	r4, r2
   18468:	str	r4, [r0]
   1846c:	str	r3, [r0, #4]
   18470:	str	r1, [r0, #8]
   18474:	str	ip, [r0, #12]
   18478:	pop	{r4, sl, fp, pc}
   1847c:	movw	r0, #59179	; 0xe72b
   18480:	movw	r1, #59188	; 0xe734
   18484:	movw	r3, #59274	; 0xe78a
   18488:	mov	r2, #260	; 0x104
   1848c:	movt	r0, #1
   18490:	movt	r1, #1
   18494:	movt	r3, #1
   18498:	bl	129c0 <__assert_fail@plt>
   1849c:	push	{r4, r5, fp, lr}
   184a0:	add	fp, sp, #8
   184a4:	ldr	ip, [fp, #24]
   184a8:	ldr	r1, [fp, #8]
   184ac:	mov	r5, #0
   184b0:	add	r1, r1, ip
   184b4:	ldr	ip, [fp, #16]
   184b8:	add	r1, r1, #64	; 0x40
   184bc:	str	r1, [r0, #8]
   184c0:	umull	r1, lr, ip, r2
   184c4:	umull	ip, r1, ip, r3
   184c8:	adds	lr, ip, lr
   184cc:	ldr	ip, [fp, #20]
   184d0:	adc	r5, r5, #0
   184d4:	umull	r2, r4, ip, r2
   184d8:	umaal	r1, r4, ip, r3
   184dc:	adds	r2, lr, r2
   184e0:	adc	r5, r5, #0
   184e4:	adds	r2, r2, #-2147483648	; 0x80000000
   184e8:	adcs	r1, r1, r5
   184ec:	str	r1, [r0]
   184f0:	adc	r1, r4, #0
   184f4:	str	r1, [r0, #4]
   184f8:	pop	{r4, r5, fp, pc}

000184fc <flatcc_json_parser_error_string@@Base>:
   184fc:	cmp	r0, #34	; 0x22
   18500:	movwhi	r0, #58629	; 0xe505
   18504:	movthi	r0, #1
   18508:	bxhi	lr
   1850c:	movw	r1, #57664	; 0xe140
   18510:	movt	r1, #1
   18514:	ldr	r0, [r1, r0, lsl #2]
   18518:	bx	lr

0001851c <flatcc_json_parser_set_error@@Base>:
   1851c:	mov	ip, r2
   18520:	ldr	r2, [r0, #24]
   18524:	cmp	r2, #0
   18528:	bne	18544 <flatcc_json_parser_set_error@@Base+0x28>
   1852c:	str	r1, [r0, #36]	; 0x24
   18530:	ldr	r2, [r0, #4]
   18534:	sub	r1, r1, r2
   18538:	add	r1, r1, #1
   1853c:	str	r1, [r0, #20]
   18540:	str	r3, [r0, #24]
   18544:	mov	r0, ip
   18548:	bx	lr

0001854c <flatcc_json_parser_string_part@@Base>:
   1854c:	cmp	r1, r2
   18550:	beq	1857c <flatcc_json_parser_string_part@@Base+0x30>
   18554:	ldrb	r3, [r1]
   18558:	cmp	r3, #32
   1855c:	bcc	185b0 <flatcc_json_parser_string_part@@Base+0x64>
   18560:	cmp	r3, #34	; 0x22
   18564:	cmpne	r3, #92	; 0x5c
   18568:	beq	185a8 <flatcc_json_parser_string_part@@Base+0x5c>
   1856c:	add	r1, r1, #1
   18570:	cmp	r2, r1
   18574:	bne	18554 <flatcc_json_parser_string_part@@Base+0x8>
   18578:	mov	r1, r2
   1857c:	ldr	r3, [r0, #24]
   18580:	cmp	r3, #0
   18584:	bne	185a4 <flatcc_json_parser_string_part@@Base+0x58>
   18588:	mov	ip, #20
   1858c:	str	r1, [r0, #36]	; 0x24
   18590:	ldr	r3, [r0, #4]
   18594:	sub	r1, r1, r3
   18598:	add	r1, r1, #1
   1859c:	str	r1, [r0, #20]
   185a0:	str	ip, [r0, #24]
   185a4:	mov	r1, r2
   185a8:	mov	r0, r1
   185ac:	bx	lr
   185b0:	ldr	r3, [r0, #24]
   185b4:	cmp	r3, #0
   185b8:	bne	185a4 <flatcc_json_parser_string_part@@Base+0x58>
   185bc:	mov	ip, #17
   185c0:	b	1858c <flatcc_json_parser_string_part@@Base+0x40>

000185c4 <flatcc_json_parser_space_ext@@Base>:
   185c4:	mov	ip, r2
   185c8:	cmp	r1, r2
   185cc:	beq	186a0 <flatcc_json_parser_space_ext@@Base+0xdc>
   185d0:	ldrb	r3, [r1]
   185d4:	cmp	r3, #32
   185d8:	bne	185ec <flatcc_json_parser_space_ext@@Base+0x28>
   185dc:	add	r1, r1, #1
   185e0:	cmp	r1, ip
   185e4:	bne	185d0 <flatcc_json_parser_space_ext@@Base+0xc>
   185e8:	b	186a0 <flatcc_json_parser_space_ext@@Base+0xdc>
   185ec:	cmp	r1, ip
   185f0:	beq	186a0 <flatcc_json_parser_space_ext@@Base+0xdc>
   185f4:	ldrb	r3, [r1]
   185f8:	cmp	r3, #32
   185fc:	bhi	1869c <flatcc_json_parser_space_ext@@Base+0xd8>
   18600:	cmp	r3, #12
   18604:	bgt	1861c <flatcc_json_parser_space_ext@@Base+0x58>
   18608:	cmp	r3, #9
   1860c:	beq	18660 <flatcc_json_parser_space_ext@@Base+0x9c>
   18610:	cmp	r3, #10
   18614:	beq	18648 <flatcc_json_parser_space_ext@@Base+0x84>
   18618:	b	18670 <flatcc_json_parser_space_ext@@Base+0xac>
   1861c:	cmp	r3, #13
   18620:	bne	18668 <flatcc_json_parser_space_ext@@Base+0xa4>
   18624:	sub	r2, ip, r1
   18628:	mov	r3, #0
   1862c:	cmp	r2, #2
   18630:	blt	18644 <flatcc_json_parser_space_ext@@Base+0x80>
   18634:	ldrb	r2, [r1, #1]
   18638:	sub	r2, r2, #10
   1863c:	clz	r2, r2
   18640:	lsr	r3, r2, #5
   18644:	add	r1, r1, r3
   18648:	add	r1, r1, #1
   1864c:	str	r1, [r0, #4]
   18650:	ldr	r2, [r0, #16]
   18654:	add	r2, r2, #1
   18658:	str	r2, [r0, #16]
   1865c:	b	185ec <flatcc_json_parser_space_ext@@Base+0x28>
   18660:	add	r1, r1, #1
   18664:	b	185ec <flatcc_json_parser_space_ext@@Base+0x28>
   18668:	cmp	r3, #32
   1866c:	beq	185e0 <flatcc_json_parser_space_ext@@Base+0x1c>
   18670:	ldr	r2, [r0, #24]
   18674:	cmp	r2, #0
   18678:	bne	186a0 <flatcc_json_parser_space_ext@@Base+0xdc>
   1867c:	str	r1, [r0, #36]	; 0x24
   18680:	mov	r2, #5
   18684:	ldr	r3, [r0, #4]
   18688:	sub	r1, r1, r3
   1868c:	add	r1, r1, #1
   18690:	str	r1, [r0, #20]
   18694:	str	r2, [r0, #24]
   18698:	b	186a0 <flatcc_json_parser_space_ext@@Base+0xdc>
   1869c:	mov	ip, r1
   186a0:	mov	r0, ip
   186a4:	bx	lr

000186a8 <flatcc_json_parser_string_escape@@Base>:
   186a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   186ac:	add	fp, sp, #24
   186b0:	sub	r7, r2, r1
   186b4:	cmp	r7, #2
   186b8:	blt	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   186bc:	ldrb	r6, [r1]
   186c0:	cmp	r6, #92	; 0x5c
   186c4:	bne	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   186c8:	ldrb	r6, [r1, #1]
   186cc:	cmp	r6, #97	; 0x61
   186d0:	bgt	186f4 <flatcc_json_parser_string_escape@@Base+0x4c>
   186d4:	cmp	r6, #34	; 0x22
   186d8:	beq	18754 <flatcc_json_parser_string_escape@@Base+0xac>
   186dc:	cmp	r6, #47	; 0x2f
   186e0:	beq	1875c <flatcc_json_parser_string_escape@@Base+0xb4>
   186e4:	cmp	r6, #92	; 0x5c
   186e8:	bne	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   186ec:	movw	r0, #23553	; 0x5c01
   186f0:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   186f4:	sub	r5, r6, #110	; 0x6e
   186f8:	cmp	r5, #10
   186fc:	bhi	1873c <flatcc_json_parser_string_escape@@Base+0x94>
   18700:	add	r6, pc, #0
   18704:	ldr	pc, [r6, r5, lsl #2]
   18708:	andeq	r8, r1, r4, lsr r7
   1870c:	andeq	r8, r1, r8, lsr #15
   18710:	andeq	r8, r1, r8, lsr #15
   18714:	andeq	r8, r1, r8, lsr #15
   18718:	andeq	r8, r1, r4, ror #14
   1871c:	andeq	r8, r1, r8, lsr #15
   18720:	andeq	r8, r1, ip, ror #14
   18724:	andeq	r8, r1, r4, ror r7
   18728:	andeq	r8, r1, r8, lsr #15
   1872c:	andeq	r8, r1, r8, lsr #15
   18730:	muleq	r1, r8, r7
   18734:	movw	r0, #2561	; 0xa01
   18738:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   1873c:	cmp	r6, #98	; 0x62
   18740:	beq	187dc <flatcc_json_parser_string_escape@@Base+0x134>
   18744:	cmp	r6, #102	; 0x66
   18748:	bne	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   1874c:	movw	r0, #3073	; 0xc01
   18750:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   18754:	movw	r0, #8705	; 0x2201
   18758:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   1875c:	movw	r0, #12033	; 0x2f01
   18760:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   18764:	movw	r0, #3329	; 0xd01
   18768:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   1876c:	movw	r0, #2305	; 0x901
   18770:	b	187e0 <flatcc_json_parser_string_escape@@Base+0x138>
   18774:	cmp	r7, #5
   18778:	ble	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   1877c:	ldrb	r7, [r1, #2]
   18780:	sub	r6, r7, #48	; 0x30
   18784:	uxtb	r6, r6
   18788:	cmp	r6, #9
   1878c:	bhi	1880c <flatcc_json_parser_string_escape@@Base+0x164>
   18790:	lsl	ip, r7, #12
   18794:	b	1882c <flatcc_json_parser_string_escape@@Base+0x184>
   18798:	mov	r6, #1
   1879c:	cmp	r7, #3
   187a0:	strb	r6, [r3]
   187a4:	bgt	187f0 <flatcc_json_parser_string_escape@@Base+0x148>
   187a8:	mov	r7, #0
   187ac:	strb	r7, [r3]
   187b0:	ldr	r3, [r0, #24]
   187b4:	cmp	r3, #0
   187b8:	bne	187e8 <flatcc_json_parser_string_escape@@Base+0x140>
   187bc:	str	r1, [r0, #36]	; 0x24
   187c0:	mov	r3, #18
   187c4:	ldr	r7, [r0, #4]
   187c8:	sub	r1, r1, r7
   187cc:	add	r1, r1, #1
   187d0:	str	r1, [r0, #20]
   187d4:	str	r3, [r0, #24]
   187d8:	b	187e8 <flatcc_json_parser_string_escape@@Base+0x140>
   187dc:	movw	r0, #2049	; 0x801
   187e0:	strh	r0, [r3]
   187e4:	add	r2, r1, #2
   187e8:	mov	r0, r2
   187ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   187f0:	ldrb	r7, [r1, #2]
   187f4:	sub	r6, r7, #48	; 0x30
   187f8:	uxtb	r6, r6
   187fc:	cmp	r6, #9
   18800:	bhi	18848 <flatcc_json_parser_string_escape@@Base+0x1a0>
   18804:	lsl	r7, r7, #4
   18808:	b	18864 <flatcc_json_parser_string_escape@@Base+0x1bc>
   1880c:	orr	r6, r7, #32
   18810:	sub	r6, r6, #97	; 0x61
   18814:	uxtb	r6, r6
   18818:	cmp	r6, #5
   1881c:	bhi	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   18820:	movw	r6, #36864	; 0x9000
   18824:	movt	r6, #65535	; 0xffff
   18828:	add	ip, r6, r7, lsl #12
   1882c:	ldrb	lr, [r1, #3]
   18830:	sub	r4, lr, #48	; 0x30
   18834:	uxtb	r4, r4
   18838:	cmp	r4, #10
   1883c:	bcs	188a0 <flatcc_json_parser_string_escape@@Base+0x1f8>
   18840:	mov	r8, #53248	; 0xd000
   18844:	b	188b8 <flatcc_json_parser_string_escape@@Base+0x210>
   18848:	orr	r6, r7, #32
   1884c:	sub	r6, r6, #97	; 0x61
   18850:	uxtb	r6, r6
   18854:	cmp	r6, #5
   18858:	bhi	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   1885c:	mvn	r6, #111	; 0x6f
   18860:	add	r7, r6, r7, lsl #4
   18864:	ldrb	r5, [r1, #3]
   18868:	sub	r6, r5, #48	; 0x30
   1886c:	uxtb	r4, r6
   18870:	cmp	r4, #10
   18874:	bcc	18890 <flatcc_json_parser_string_escape@@Base+0x1e8>
   18878:	orr	r6, r5, #32
   1887c:	sub	r5, r6, #97	; 0x61
   18880:	uxtb	r5, r5
   18884:	cmp	r5, #5
   18888:	bhi	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   1888c:	sub	r6, r6, #87	; 0x57
   18890:	orr	r0, r6, r7
   18894:	add	r2, r1, #4
   18898:	strb	r0, [r3, #1]
   1889c:	b	187e8 <flatcc_json_parser_string_escape@@Base+0x140>
   188a0:	orr	lr, lr, #32
   188a4:	mov	r8, #43264	; 0xa900
   188a8:	sub	r4, lr, #97	; 0x61
   188ac:	uxtb	r4, r4
   188b0:	cmp	r4, #6
   188b4:	bcs	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   188b8:	ldrb	r5, [r1, #4]
   188bc:	sub	r4, r5, #48	; 0x30
   188c0:	uxtb	r4, r4
   188c4:	cmp	r4, #10
   188c8:	bcs	188d4 <flatcc_json_parser_string_escape@@Base+0x22c>
   188cc:	mov	r9, #64768	; 0xfd00
   188d0:	b	188ec <flatcc_json_parser_string_escape@@Base+0x244>
   188d4:	orr	r5, r5, #32
   188d8:	movw	r9, #64144	; 0xfa90
   188dc:	sub	r4, r5, #97	; 0x61
   188e0:	uxtb	r4, r4
   188e4:	cmp	r4, #6
   188e8:	bcs	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   188ec:	ldrb	r7, [r1, #5]
   188f0:	sub	r4, r7, #48	; 0x30
   188f4:	uxtb	r4, r4
   188f8:	cmp	r4, #10
   188fc:	bcs	1890c <flatcc_json_parser_string_escape@@Base+0x264>
   18900:	mvn	r0, #86	; 0x56
   18904:	add	r4, r0, #39	; 0x27
   18908:	b	18924 <flatcc_json_parser_string_escape@@Base+0x27c>
   1890c:	orr	r7, r7, #32
   18910:	movw	r4, #65449	; 0xffa9
   18914:	sub	r6, r7, #97	; 0x61
   18918:	uxtb	r6, r6
   1891c:	cmp	r6, #6
   18920:	bcs	187a8 <flatcc_json_parser_string_escape@@Base+0x100>
   18924:	add	r0, r8, lr, lsl #8
   18928:	add	r2, r9, r5, lsl #4
   1892c:	orr	r0, r0, ip
   18930:	orr	r0, r0, r2
   18934:	add	r2, r4, r7
   18938:	orr	r0, r0, r2
   1893c:	uxth	r7, r0
   18940:	cmp	r7, #127	; 0x7f
   18944:	bhi	18954 <flatcc_json_parser_string_escape@@Base+0x2ac>
   18948:	mov	r2, #1
   1894c:	strb	r2, [r3]
   18950:	b	189a4 <flatcc_json_parser_string_escape@@Base+0x2fc>
   18954:	mov	r2, #0
   18958:	cmp	r2, r7, lsr #11
   1895c:	bne	18978 <flatcc_json_parser_string_escape@@Base+0x2d0>
   18960:	mov	r7, #192	; 0xc0
   18964:	mov	r2, #2
   18968:	orr	r7, r7, r0, lsr #6
   1896c:	strb	r2, [r3]
   18970:	strb	r7, [r3, #1]
   18974:	b	1899c <flatcc_json_parser_string_escape@@Base+0x2f4>
   18978:	mov	r6, #224	; 0xe0
   1897c:	mov	r2, #3
   18980:	orr	r6, r6, r7, lsr #12
   18984:	strb	r2, [r3]
   18988:	lsr	r7, r7, #6
   1898c:	strb	r6, [r3, #1]
   18990:	mov	r6, #2
   18994:	bfi	r7, r6, #6, #26
   18998:	strb	r7, [r3, #2]
   1899c:	mvn	r7, #-67108863	; 0xfc000001
   189a0:	bfi	r0, r7, #6, #26
   189a4:	strb	r0, [r3, r2]
   189a8:	add	r2, r1, #6
   189ac:	b	187e8 <flatcc_json_parser_string_escape@@Base+0x140>

000189b0 <flatcc_json_parser_skip_constant@@Base>:
   189b0:	push	{r4, r5, r6, sl, fp, lr}
   189b4:	add	fp, sp, #16
   189b8:	cmp	r1, r2
   189bc:	beq	18a6c <flatcc_json_parser_skip_constant@@Base+0xbc>
   189c0:	mov	r4, r2
   189c4:	mov	r5, r0
   189c8:	ldrsb	r0, [r1]
   189cc:	mov	r6, r1
   189d0:	cmp	r0, #0
   189d4:	bmi	189e8 <flatcc_json_parser_skip_constant@@Base+0x38>
   189d8:	uxtb	r0, r0
   189dc:	cmp	r0, #95	; 0x5f
   189e0:	cmpne	r0, #46	; 0x2e
   189e4:	bne	189f8 <flatcc_json_parser_skip_constant@@Base+0x48>
   189e8:	add	r1, r6, #1
   189ec:	cmp	r1, r4
   189f0:	bne	189c8 <flatcc_json_parser_skip_constant@@Base+0x18>
   189f4:	b	18a64 <flatcc_json_parser_skip_constant@@Base+0xb4>
   189f8:	sub	r1, r0, #48	; 0x30
   189fc:	uxtb	r1, r1
   18a00:	cmp	r1, #9
   18a04:	bls	189e8 <flatcc_json_parser_skip_constant@@Base+0x38>
   18a08:	orr	r1, r0, #32
   18a0c:	sub	r1, r1, #97	; 0x61
   18a10:	uxtb	r1, r1
   18a14:	cmp	r1, #25
   18a18:	bls	189e8 <flatcc_json_parser_skip_constant@@Base+0x38>
   18a1c:	sub	r1, r4, r6
   18a20:	cmp	r1, #2
   18a24:	blt	18a44 <flatcc_json_parser_skip_constant@@Base+0x94>
   18a28:	cmp	r0, #32
   18a2c:	bhi	18a70 <flatcc_json_parser_skip_constant@@Base+0xc0>
   18a30:	bne	18a44 <flatcc_json_parser_skip_constant@@Base+0x94>
   18a34:	mov	r1, r6
   18a38:	ldrb	r0, [r1, #1]!
   18a3c:	cmp	r0, #32
   18a40:	bhi	189ec <flatcc_json_parser_skip_constant@@Base+0x3c>
   18a44:	mov	r0, r5
   18a48:	mov	r1, r6
   18a4c:	mov	r2, r4
   18a50:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   18a54:	mov	r1, r0
   18a58:	cmp	r0, r6
   18a5c:	bne	189ec <flatcc_json_parser_skip_constant@@Base+0x3c>
   18a60:	b	18a70 <flatcc_json_parser_skip_constant@@Base+0xc0>
   18a64:	mov	r6, r4
   18a68:	b	18a70 <flatcc_json_parser_skip_constant@@Base+0xc0>
   18a6c:	mov	r6, r1
   18a70:	mov	r0, r6
   18a74:	pop	{r4, r5, r6, sl, fp, pc}

00018a78 <flatcc_json_parser_match_constant@@Base>:
   18a78:	push	{r4, r5, r6, r7, fp, lr}
   18a7c:	add	fp, sp, #16
   18a80:	ldr	r7, [fp, #8]
   18a84:	mov	r4, r1
   18a88:	sub	r1, r2, r1
   18a8c:	cmp	r1, r3
   18a90:	ble	18b90 <flatcc_json_parser_match_constant@@Base+0x118>
   18a94:	ldr	r1, [r0, #12]
   18a98:	mov	r5, r2
   18a9c:	add	r6, r4, r3
   18aa0:	cmp	r1, #0
   18aa4:	beq	18b28 <flatcc_json_parser_match_constant@@Base+0xb0>
   18aa8:	sub	r1, r5, r6
   18aac:	cmp	r1, #2
   18ab0:	blt	18ad8 <flatcc_json_parser_match_constant@@Base+0x60>
   18ab4:	ldrb	r1, [r6]
   18ab8:	mov	r2, r6
   18abc:	cmp	r1, #32
   18ac0:	bhi	18ae8 <flatcc_json_parser_match_constant@@Base+0x70>
   18ac4:	bne	18ad8 <flatcc_json_parser_match_constant@@Base+0x60>
   18ac8:	mov	r2, r6
   18acc:	ldrb	r1, [r2, #1]!
   18ad0:	cmp	r1, #32
   18ad4:	bhi	18ae8 <flatcc_json_parser_match_constant@@Base+0x70>
   18ad8:	mov	r1, r6
   18adc:	mov	r2, r5
   18ae0:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   18ae4:	mov	r2, r0
   18ae8:	cmp	r2, r5
   18aec:	beq	18ba0 <flatcc_json_parser_match_constant@@Base+0x128>
   18af0:	cmp	r2, r6
   18af4:	beq	18bb0 <flatcc_json_parser_match_constant@@Base+0x138>
   18af8:	ldrsb	r0, [r2]
   18afc:	cmp	r0, #95	; 0x5f
   18b00:	beq	18b20 <flatcc_json_parser_match_constant@@Base+0xa8>
   18b04:	cmn	r0, #1
   18b08:	ble	18b20 <flatcc_json_parser_match_constant@@Base+0xa8>
   18b0c:	orr	r0, r0, #32
   18b10:	sub	r0, r0, #97	; 0x61
   18b14:	uxtb	r0, r0
   18b18:	cmp	r0, #25
   18b1c:	bhi	18bb0 <flatcc_json_parser_match_constant@@Base+0x138>
   18b20:	mov	r0, #1
   18b24:	b	18b98 <flatcc_json_parser_match_constant@@Base+0x120>
   18b28:	ldrb	r1, [r6]
   18b2c:	cmp	r1, #92	; 0x5c
   18b30:	beq	18bd8 <flatcc_json_parser_match_constant@@Base+0x160>
   18b34:	cmp	r1, #34	; 0x22
   18b38:	beq	18b6c <flatcc_json_parser_match_constant@@Base+0xf4>
   18b3c:	cmp	r1, #32
   18b40:	bne	18b90 <flatcc_json_parser_match_constant@@Base+0x118>
   18b44:	add	r1, r4, r3
   18b48:	add	r1, r1, #1
   18b4c:	cmp	r5, r1
   18b50:	beq	18ba0 <flatcc_json_parser_match_constant@@Base+0x128>
   18b54:	ldrb	r2, [r1], #1
   18b58:	cmp	r2, #32
   18b5c:	beq	18b4c <flatcc_json_parser_match_constant@@Base+0xd4>
   18b60:	cmp	r2, #34	; 0x22
   18b64:	bne	18c34 <flatcc_json_parser_match_constant@@Base+0x1bc>
   18b68:	sub	r6, r1, #1
   18b6c:	mvn	r2, r6
   18b70:	add	r1, r6, #1
   18b74:	cmp	r2, #2
   18b78:	blt	18c20 <flatcc_json_parser_match_constant@@Base+0x1a8>
   18b7c:	ldrb	r2, [r1]
   18b80:	cmp	r2, #32
   18b84:	bls	18c0c <flatcc_json_parser_match_constant@@Base+0x194>
   18b88:	mov	r2, r1
   18b8c:	b	18c2c <flatcc_json_parser_match_constant@@Base+0x1b4>
   18b90:	mov	r0, #0
   18b94:	mov	r2, r4
   18b98:	str	r0, [r7]
   18b9c:	b	18bd0 <flatcc_json_parser_match_constant@@Base+0x158>
   18ba0:	mov	r0, #0
   18ba4:	str	r0, [r7]
   18ba8:	mov	r2, r5
   18bac:	b	18bd0 <flatcc_json_parser_match_constant@@Base+0x158>
   18bb0:	mov	r0, #0
   18bb4:	str	r0, [r7]
   18bb8:	ldrb	r0, [r2]
   18bbc:	cmp	r0, #44	; 0x2c
   18bc0:	cmpne	r0, #93	; 0x5d
   18bc4:	beq	18bd0 <flatcc_json_parser_match_constant@@Base+0x158>
   18bc8:	cmp	r0, #125	; 0x7d
   18bcc:	movne	r2, r4
   18bd0:	mov	r0, r2
   18bd4:	pop	{r4, r5, r6, r7, fp, pc}
   18bd8:	mov	r1, #0
   18bdc:	str	r1, [r7]
   18be0:	ldr	r1, [r0, #24]
   18be4:	cmp	r1, #0
   18be8:	bne	18ba8 <flatcc_json_parser_match_constant@@Base+0x130>
   18bec:	str	r6, [r0, #36]	; 0x24
   18bf0:	mov	r1, #18
   18bf4:	ldr	r2, [r0, #4]
   18bf8:	sub	r2, r6, r2
   18bfc:	add	r2, r2, #1
   18c00:	str	r2, [r0, #20]
   18c04:	str	r1, [r0, #24]
   18c08:	b	18ba8 <flatcc_json_parser_match_constant@@Base+0x130>
   18c0c:	bne	18c20 <flatcc_json_parser_match_constant@@Base+0x1a8>
   18c10:	ldrb	r2, [r6, #2]!
   18c14:	cmp	r2, #32
   18c18:	mov	r2, r6
   18c1c:	bhi	18c2c <flatcc_json_parser_match_constant@@Base+0x1b4>
   18c20:	mov	r2, #0
   18c24:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   18c28:	mov	r2, r0
   18c2c:	mov	r0, #0
   18c30:	b	18b98 <flatcc_json_parser_match_constant@@Base+0x120>
   18c34:	mov	r0, #1
   18c38:	sub	r2, r1, #1
   18c3c:	b	18b98 <flatcc_json_parser_match_constant@@Base+0x120>

00018c40 <flatcc_json_parser_unmatched_symbol@@Base>:
   18c40:	push	{r4, r5, fp, lr}
   18c44:	add	fp, sp, #8
   18c48:	mov	r5, r0
   18c4c:	ldrb	r0, [r0, #8]
   18c50:	mov	r4, r2
   18c54:	tst	r0, #1
   18c58:	bne	18c7c <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   18c5c:	ldr	r0, [r5, #24]
   18c60:	cmp	r0, #0
   18c64:	bne	18e4c <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   18c68:	str	r1, [r5, #36]	; 0x24
   18c6c:	mov	r0, #13
   18c70:	ldr	r2, [r5, #4]
   18c74:	sub	r1, r1, r2
   18c78:	b	18e40 <flatcc_json_parser_unmatched_symbol@@Base+0x200>
   18c7c:	ldr	r0, [r5, #12]
   18c80:	cmp	r0, #0
   18c84:	beq	18d00 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   18c88:	cmp	r1, r4
   18c8c:	beq	18da0 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   18c90:	ldrb	r2, [r1]
   18c94:	cmp	r2, #33	; 0x21
   18c98:	bcc	18da0 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   18c9c:	add	r1, r1, #1
   18ca0:	uxtb	r0, r2
   18ca4:	cmp	r0, #46	; 0x2e
   18ca8:	cmpne	r0, #95	; 0x5f
   18cac:	bne	18cc8 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   18cb0:	cmp	r4, r1
   18cb4:	beq	18d60 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   18cb8:	ldrb	r2, [r1], #1
   18cbc:	cmp	r2, #33	; 0x21
   18cc0:	bcs	18ca0 <flatcc_json_parser_unmatched_symbol@@Base+0x60>
   18cc4:	b	18cf8 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   18cc8:	sxtb	r3, r2
   18ccc:	cmp	r3, #0
   18cd0:	bmi	18cb0 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   18cd4:	sub	r3, r2, #48	; 0x30
   18cd8:	uxtb	r3, r3
   18cdc:	cmp	r3, #9
   18ce0:	bls	18cb0 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   18ce4:	orr	r2, r2, #32
   18ce8:	sub	r2, r2, #97	; 0x61
   18cec:	uxtb	r2, r2
   18cf0:	cmp	r2, #26
   18cf4:	bcc	18cb0 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   18cf8:	sub	r1, r1, #1
   18cfc:	b	18d64 <flatcc_json_parser_unmatched_symbol@@Base+0x124>
   18d00:	cmp	r1, r4
   18d04:	beq	18d40 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   18d08:	ldrb	r0, [r1]
   18d0c:	cmp	r0, #92	; 0x5c
   18d10:	beq	18d20 <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
   18d14:	cmp	r0, #34	; 0x22
   18d18:	bne	18d30 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   18d1c:	b	18d58 <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   18d20:	sub	r0, r4, r1
   18d24:	cmp	r0, #2
   18d28:	blt	18d40 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   18d2c:	add	r1, r1, #1
   18d30:	add	r1, r1, #1
   18d34:	cmp	r1, r4
   18d38:	bne	18d08 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   18d3c:	mov	r1, r4
   18d40:	ldr	r0, [r5, #24]
   18d44:	mov	r2, r4
   18d48:	cmp	r0, #0
   18d4c:	bne	18da4 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   18d50:	mov	r0, #20
   18d54:	b	18d80 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   18d58:	add	r2, r1, #1
   18d5c:	b	18da4 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   18d60:	mov	r1, r4
   18d64:	cmp	r0, #46	; 0x2e
   18d68:	bne	18da0 <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   18d6c:	ldr	r0, [r5, #24]
   18d70:	mov	r2, r4
   18d74:	cmp	r0, #0
   18d78:	bne	18da4 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   18d7c:	mov	r0, #5
   18d80:	str	r1, [r5, #36]	; 0x24
   18d84:	ldr	r2, [r5, #4]
   18d88:	sub	r1, r1, r2
   18d8c:	mov	r2, r4
   18d90:	add	r1, r1, #1
   18d94:	str	r1, [r5, #20]
   18d98:	str	r0, [r5, #24]
   18d9c:	b	18da4 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   18da0:	mov	r2, r1
   18da4:	sub	r0, r4, r2
   18da8:	cmp	r0, #2
   18dac:	blt	18dd8 <flatcc_json_parser_unmatched_symbol@@Base+0x198>
   18db0:	ldrb	r0, [r2]
   18db4:	cmp	r0, #32
   18db8:	bls	18dc4 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   18dbc:	mov	r3, r2
   18dc0:	b	18dec <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   18dc4:	bne	18dd8 <flatcc_json_parser_unmatched_symbol@@Base+0x198>
   18dc8:	mov	r3, r2
   18dcc:	ldrb	r0, [r3, #1]!
   18dd0:	cmp	r0, #32
   18dd4:	bhi	18dec <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   18dd8:	mov	r1, r2
   18ddc:	mov	r0, r5
   18de0:	mov	r2, r4
   18de4:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   18de8:	mov	r3, r0
   18dec:	cmp	r3, r4
   18df0:	beq	18e24 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   18df4:	ldrb	r0, [r3]
   18df8:	cmp	r0, #58	; 0x3a
   18dfc:	bne	18e24 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   18e00:	add	r1, r3, #1
   18e04:	sub	r0, r4, r1
   18e08:	cmp	r0, #2
   18e0c:	blt	18e64 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   18e10:	ldrb	r0, [r1]
   18e14:	cmp	r0, #32
   18e18:	bls	18e54 <flatcc_json_parser_unmatched_symbol@@Base+0x214>
   18e1c:	mov	r3, r1
   18e20:	b	18e74 <flatcc_json_parser_unmatched_symbol@@Base+0x234>
   18e24:	ldr	r0, [r5, #24]
   18e28:	cmp	r0, #0
   18e2c:	bne	18e4c <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   18e30:	str	r3, [r5, #36]	; 0x24
   18e34:	mov	r0, #4
   18e38:	ldr	r1, [r5, #4]
   18e3c:	sub	r1, r3, r1
   18e40:	add	r1, r1, #1
   18e44:	str	r1, [r5, #20]
   18e48:	str	r0, [r5, #24]
   18e4c:	mov	r0, r4
   18e50:	pop	{r4, r5, fp, pc}
   18e54:	bne	18e64 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   18e58:	ldrb	r0, [r3, #2]!
   18e5c:	cmp	r0, #32
   18e60:	bhi	18e74 <flatcc_json_parser_unmatched_symbol@@Base+0x234>
   18e64:	mov	r0, r5
   18e68:	mov	r2, r4
   18e6c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   18e70:	mov	r3, r0
   18e74:	mov	r0, r5
   18e78:	mov	r1, r3
   18e7c:	mov	r2, r4
   18e80:	pop	{r4, r5, fp, lr}
   18e84:	b	18e88 <flatcc_json_parser_generic_json@@Base>

00018e88 <flatcc_json_parser_generic_json@@Base>:
   18e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e8c:	add	fp, sp, #28
   18e90:	sub	sp, sp, #532	; 0x214
   18e94:	mov	r7, r1
   18e98:	cmp	r1, r2
   18e9c:	beq	19888 <flatcc_json_parser_generic_json@@Base+0xa00>
   18ea0:	mov	r5, r0
   18ea4:	add	r0, r2, #1
   18ea8:	add	r1, sp, #16
   18eac:	mov	r4, r2
   18eb0:	mov	sl, #0
   18eb4:	str	r0, [sp]
   18eb8:	add	r0, r5, #36	; 0x24
   18ebc:	sub	r9, r1, #1
   18ec0:	add	r6, r5, #4
   18ec4:	add	r8, r5, #24
   18ec8:	str	r0, [sp, #8]
   18ecc:	add	r0, r5, #20
   18ed0:	str	r0, [sp, #4]
   18ed4:	mov	r0, r1
   18ed8:	cmp	sl, #0
   18edc:	beq	19134 <flatcc_json_parser_generic_json@@Base+0x2ac>
   18ee0:	ldrb	r0, [r0, #-1]
   18ee4:	cmp	r0, #125	; 0x7d
   18ee8:	bne	19134 <flatcc_json_parser_generic_json@@Base+0x2ac>
   18eec:	ldrb	r0, [r7]
   18ef0:	cmp	r0, #46	; 0x2e
   18ef4:	beq	18f54 <flatcc_json_parser_generic_json@@Base+0xcc>
   18ef8:	cmp	r0, #34	; 0x22
   18efc:	bne	18f9c <flatcc_json_parser_generic_json@@Base+0x114>
   18f00:	mov	r0, #0
   18f04:	mov	r2, r4
   18f08:	str	r0, [r5, #12]
   18f0c:	add	r0, r7, #1
   18f10:	cmp	r0, r4
   18f14:	beq	19060 <flatcc_json_parser_generic_json@@Base+0x1d8>
   18f18:	ldrb	r1, [r0]
   18f1c:	cmp	r1, #92	; 0x5c
   18f20:	beq	18f30 <flatcc_json_parser_generic_json@@Base+0xa8>
   18f24:	cmp	r1, #34	; 0x22
   18f28:	bne	18f40 <flatcc_json_parser_generic_json@@Base+0xb8>
   18f2c:	b	19028 <flatcc_json_parser_generic_json@@Base+0x1a0>
   18f30:	sub	r1, r4, r0
   18f34:	cmp	r1, #2
   18f38:	blt	1905c <flatcc_json_parser_generic_json@@Base+0x1d4>
   18f3c:	add	r0, r0, #1
   18f40:	add	r0, r0, #1
   18f44:	cmp	r0, r4
   18f48:	bne	18f18 <flatcc_json_parser_generic_json@@Base+0x90>
   18f4c:	mov	r2, r4
   18f50:	b	19060 <flatcc_json_parser_generic_json@@Base+0x1d8>
   18f54:	ldr	r0, [r8]
   18f58:	cmp	r0, #0
   18f5c:	bne	18f84 <flatcc_json_parser_generic_json@@Base+0xfc>
   18f60:	mov	r0, #5
   18f64:	ldr	r1, [sp, #4]
   18f68:	str	r0, [r8]
   18f6c:	ldr	r0, [r6]
   18f70:	sub	r0, r7, r0
   18f74:	add	r0, r0, #1
   18f78:	str	r0, [r1]
   18f7c:	ldr	r0, [sp, #8]
   18f80:	str	r7, [r0]
   18f84:	ldr	r0, [r5, #12]
   18f88:	mov	r2, r4
   18f8c:	mov	r1, r4
   18f90:	cmp	r0, #0
   18f94:	bne	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   18f98:	b	19060 <flatcc_json_parser_generic_json@@Base+0x1d8>
   18f9c:	mov	r0, #1
   18fa0:	cmp	r7, r4
   18fa4:	mov	r1, r4
   18fa8:	str	r0, [r5, #12]
   18fac:	beq	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   18fb0:	ldrb	r2, [r7]
   18fb4:	cmp	r2, #33	; 0x21
   18fb8:	bcc	19020 <flatcc_json_parser_generic_json@@Base+0x198>
   18fbc:	add	r1, r7, #1
   18fc0:	uxtb	r0, r2
   18fc4:	cmp	r0, #46	; 0x2e
   18fc8:	cmpne	r0, #95	; 0x5f
   18fcc:	bne	18fe8 <flatcc_json_parser_generic_json@@Base+0x160>
   18fd0:	cmp	r4, r1
   18fd4:	beq	19030 <flatcc_json_parser_generic_json@@Base+0x1a8>
   18fd8:	ldrb	r2, [r1], #1
   18fdc:	cmp	r2, #33	; 0x21
   18fe0:	bcs	18fc0 <flatcc_json_parser_generic_json@@Base+0x138>
   18fe4:	b	19018 <flatcc_json_parser_generic_json@@Base+0x190>
   18fe8:	sxtb	r3, r2
   18fec:	cmp	r3, #0
   18ff0:	bmi	18fd0 <flatcc_json_parser_generic_json@@Base+0x148>
   18ff4:	sub	r3, r2, #48	; 0x30
   18ff8:	uxtb	r3, r3
   18ffc:	cmp	r3, #9
   19000:	bls	18fd0 <flatcc_json_parser_generic_json@@Base+0x148>
   19004:	orr	r2, r2, #32
   19008:	sub	r2, r2, #97	; 0x61
   1900c:	uxtb	r2, r2
   19010:	cmp	r2, #26
   19014:	bcc	18fd0 <flatcc_json_parser_generic_json@@Base+0x148>
   19018:	sub	r2, r1, #1
   1901c:	b	19034 <flatcc_json_parser_generic_json@@Base+0x1ac>
   19020:	mov	r1, r7
   19024:	b	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   19028:	add	r1, r0, #1
   1902c:	b	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   19030:	mov	r2, r4
   19034:	cmp	r0, #46	; 0x2e
   19038:	bne	19054 <flatcc_json_parser_generic_json@@Base+0x1cc>
   1903c:	ldr	r0, [r8]
   19040:	mov	r1, r4
   19044:	cmp	r0, #0
   19048:	bne	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   1904c:	mov	r0, #5
   19050:	b	19074 <flatcc_json_parser_generic_json@@Base+0x1ec>
   19054:	mov	r1, r2
   19058:	b	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   1905c:	mov	r2, r0
   19060:	ldr	r0, [r8]
   19064:	mov	r1, r4
   19068:	cmp	r0, #0
   1906c:	bne	19098 <flatcc_json_parser_generic_json@@Base+0x210>
   19070:	mov	r0, #20
   19074:	str	r0, [r8]
   19078:	ldr	r1, [sp, #4]
   1907c:	ldr	r0, [r6]
   19080:	sub	r0, r2, r0
   19084:	add	r0, r0, #1
   19088:	str	r0, [r1]
   1908c:	ldr	r0, [sp, #8]
   19090:	mov	r1, r4
   19094:	str	r2, [r0]
   19098:	sub	r0, r4, r1
   1909c:	cmp	r0, #2
   190a0:	blt	190cc <flatcc_json_parser_generic_json@@Base+0x244>
   190a4:	ldrb	r0, [r1]
   190a8:	cmp	r0, #32
   190ac:	bls	190b8 <flatcc_json_parser_generic_json@@Base+0x230>
   190b0:	mov	r7, r1
   190b4:	b	190dc <flatcc_json_parser_generic_json@@Base+0x254>
   190b8:	bne	190cc <flatcc_json_parser_generic_json@@Base+0x244>
   190bc:	mov	r7, r1
   190c0:	ldrb	r0, [r7, #1]!
   190c4:	cmp	r0, #32
   190c8:	bhi	190dc <flatcc_json_parser_generic_json@@Base+0x254>
   190cc:	mov	r0, r5
   190d0:	mov	r2, r4
   190d4:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   190d8:	mov	r7, r0
   190dc:	cmp	r7, r4
   190e0:	beq	198f8 <flatcc_json_parser_generic_json@@Base+0xa70>
   190e4:	ldrb	r0, [r7]
   190e8:	cmp	r0, #58	; 0x3a
   190ec:	bne	19910 <flatcc_json_parser_generic_json@@Base+0xa88>
   190f0:	add	r1, r7, #1
   190f4:	sub	r0, r4, r1
   190f8:	cmp	r0, #2
   190fc:	blt	19124 <flatcc_json_parser_generic_json@@Base+0x29c>
   19100:	ldrb	r0, [r1]
   19104:	cmp	r0, #32
   19108:	bls	19114 <flatcc_json_parser_generic_json@@Base+0x28c>
   1910c:	mov	r7, r1
   19110:	b	19138 <flatcc_json_parser_generic_json@@Base+0x2b0>
   19114:	bne	19124 <flatcc_json_parser_generic_json@@Base+0x29c>
   19118:	ldrb	r0, [r7, #2]!
   1911c:	cmp	r0, #32
   19120:	bhi	19138 <flatcc_json_parser_generic_json@@Base+0x2b0>
   19124:	mov	r0, r5
   19128:	mov	r2, r4
   1912c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   19130:	mov	r7, r0
   19134:	ldrb	r0, [r7]
   19138:	sub	r1, r0, #48	; 0x30
   1913c:	cmp	r1, #10
   19140:	bcs	191b4 <flatcc_json_parser_generic_json@@Base+0x32c>
   19144:	cmp	r7, r4
   19148:	beq	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   1914c:	cmp	r0, #45	; 0x2d
   19150:	bne	19164 <flatcc_json_parser_generic_json@@Base+0x2dc>
   19154:	add	r7, r7, #1
   19158:	cmp	r7, r4
   1915c:	beq	19430 <flatcc_json_parser_generic_json@@Base+0x5a8>
   19160:	ldrb	r0, [r7]
   19164:	cmp	r0, #48	; 0x30
   19168:	bne	191d0 <flatcc_json_parser_generic_json@@Base+0x348>
   1916c:	add	r1, r7, #1
   19170:	cmp	r1, r4
   19174:	mov	r2, r4
   19178:	beq	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   1917c:	ldrb	r0, [r1]
   19180:	cmp	r0, #46	; 0x2e
   19184:	bne	19380 <flatcc_json_parser_generic_json@@Base+0x4f8>
   19188:	mov	r0, r1
   1918c:	ldrb	r2, [r0, #1]!
   19190:	sub	r2, r2, #48	; 0x30
   19194:	uxtb	r2, r2
   19198:	cmp	r2, #10
   1919c:	bcc	1934c <flatcc_json_parser_generic_json@@Base+0x4c4>
   191a0:	ldr	r1, [r8]
   191a4:	cmp	r1, #0
   191a8:	bne	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   191ac:	mov	r1, #6
   191b0:	b	19558 <flatcc_json_parser_generic_json@@Base+0x6d0>
   191b4:	cmp	r0, #90	; 0x5a
   191b8:	bgt	19214 <flatcc_json_parser_generic_json@@Base+0x38c>
   191bc:	cmp	r0, #34	; 0x22
   191c0:	beq	19284 <flatcc_json_parser_generic_json@@Base+0x3fc>
   191c4:	cmp	r0, #45	; 0x2d
   191c8:	beq	19144 <flatcc_json_parser_generic_json@@Base+0x2bc>
   191cc:	b	1932c <flatcc_json_parser_generic_json@@Base+0x4a4>
   191d0:	sub	r0, r0, #49	; 0x31
   191d4:	uxtb	r0, r0
   191d8:	cmp	r0, #8
   191dc:	bls	1925c <flatcc_json_parser_generic_json@@Base+0x3d4>
   191e0:	ldr	r0, [r8]
   191e4:	cmp	r0, #0
   191e8:	bne	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   191ec:	mov	r0, #6
   191f0:	ldr	r1, [sp, #4]
   191f4:	str	r0, [r8]
   191f8:	ldr	r0, [r6]
   191fc:	sub	r0, r7, r0
   19200:	add	r0, r0, #1
   19204:	str	r0, [r1]
   19208:	ldr	r0, [sp, #8]
   1920c:	str	r7, [r0]
   19210:	b	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   19214:	cmp	r0, #91	; 0x5b
   19218:	beq	192f4 <flatcc_json_parser_generic_json@@Base+0x46c>
   1921c:	cmp	r0, #123	; 0x7b
   19220:	bne	1932c <flatcc_json_parser_generic_json@@Base+0x4a4>
   19224:	cmp	sl, #512	; 0x200
   19228:	beq	19924 <flatcc_json_parser_generic_json@@Base+0xa9c>
   1922c:	add	r0, sp, #16
   19230:	mov	r1, #125	; 0x7d
   19234:	strb	r1, [r0, sl]
   19238:	add	r1, r7, #1
   1923c:	sub	r0, r4, r1
   19240:	cmp	r0, #2
   19244:	blt	194dc <flatcc_json_parser_generic_json@@Base+0x654>
   19248:	ldrb	r0, [r1]
   1924c:	cmp	r0, #32
   19250:	bls	194cc <flatcc_json_parser_generic_json@@Base+0x644>
   19254:	mov	r7, r1
   19258:	b	194ec <flatcc_json_parser_generic_json@@Base+0x664>
   1925c:	add	r0, r7, #1
   19260:	cmp	r4, r0
   19264:	beq	19444 <flatcc_json_parser_generic_json@@Base+0x5bc>
   19268:	ldrb	r1, [r0], #1
   1926c:	sub	r1, r1, #48	; 0x30
   19270:	uxtb	r1, r1
   19274:	cmp	r1, #10
   19278:	bcc	19260 <flatcc_json_parser_generic_json@@Base+0x3d8>
   1927c:	sub	r1, r0, #1
   19280:	b	19170 <flatcc_json_parser_generic_json@@Base+0x2e8>
   19284:	cmp	r7, r4
   19288:	beq	1947c <flatcc_json_parser_generic_json@@Base+0x5f4>
   1928c:	add	r1, r7, #1
   19290:	mov	r0, r4
   19294:	add	r7, sp, #12
   19298:	cmp	r1, r4
   1929c:	beq	19548 <flatcc_json_parser_generic_json@@Base+0x6c0>
   192a0:	ldrb	r0, [r1]
   192a4:	cmp	r0, #34	; 0x22
   192a8:	beq	194b0 <flatcc_json_parser_generic_json@@Base+0x628>
   192ac:	mov	r0, r5
   192b0:	mov	r2, r4
   192b4:	bl	1854c <flatcc_json_parser_string_part@@Base>
   192b8:	mov	r1, r0
   192bc:	cmp	r0, r4
   192c0:	beq	192d0 <flatcc_json_parser_generic_json@@Base+0x448>
   192c4:	ldrb	r0, [r1]
   192c8:	cmp	r0, #34	; 0x22
   192cc:	beq	194b0 <flatcc_json_parser_generic_json@@Base+0x628>
   192d0:	mov	r0, r5
   192d4:	mov	r2, r4
   192d8:	mov	r3, r7
   192dc:	bl	186a8 <flatcc_json_parser_string_escape@@Base>
   192e0:	mov	r1, r0
   192e4:	cmp	r0, r4
   192e8:	bne	192a0 <flatcc_json_parser_generic_json@@Base+0x418>
   192ec:	mov	r0, r4
   192f0:	b	19548 <flatcc_json_parser_generic_json@@Base+0x6c0>
   192f4:	cmp	sl, #512	; 0x200
   192f8:	beq	19924 <flatcc_json_parser_generic_json@@Base+0xa9c>
   192fc:	add	r0, sp, #16
   19300:	mov	r1, #93	; 0x5d
   19304:	strb	r1, [r0, sl]
   19308:	add	r1, r7, #1
   1930c:	sub	r0, r4, r1
   19310:	cmp	r0, #2
   19314:	blt	19514 <flatcc_json_parser_generic_json@@Base+0x68c>
   19318:	ldrb	r0, [r1]
   1931c:	cmp	r0, #32
   19320:	bls	19504 <flatcc_json_parser_generic_json@@Base+0x67c>
   19324:	mov	r7, r1
   19328:	b	19524 <flatcc_json_parser_generic_json@@Base+0x69c>
   1932c:	mov	r0, r5
   19330:	mov	r1, r7
   19334:	mov	r2, r4
   19338:	bl	189b0 <flatcc_json_parser_skip_constant@@Base>
   1933c:	mov	r1, r0
   19340:	cmp	r7, r0
   19344:	bne	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   19348:	b	19938 <flatcc_json_parser_generic_json@@Base+0xab0>
   1934c:	add	r1, r1, #2
   19350:	mov	r2, r4
   19354:	cmp	r1, r4
   19358:	beq	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   1935c:	ldrb	r0, [r1]
   19360:	sub	r2, r0, #48	; 0x30
   19364:	uxtb	r2, r2
   19368:	cmp	r2, #9
   1936c:	bhi	19380 <flatcc_json_parser_generic_json@@Base+0x4f8>
   19370:	add	r1, r1, #1
   19374:	cmp	r4, r1
   19378:	bne	1935c <flatcc_json_parser_generic_json@@Base+0x4d4>
   1937c:	b	19444 <flatcc_json_parser_generic_json@@Base+0x5bc>
   19380:	cmp	r1, r4
   19384:	mov	r2, r4
   19388:	beq	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   1938c:	orr	r2, r0, #32
   19390:	cmp	r2, #101	; 0x65
   19394:	bne	193f4 <flatcc_json_parser_generic_json@@Base+0x56c>
   19398:	add	r0, r1, #1
   1939c:	cmp	r0, r4
   193a0:	beq	19430 <flatcc_json_parser_generic_json@@Base+0x5a8>
   193a4:	ldrb	r2, [r0]
   193a8:	cmp	r2, #45	; 0x2d
   193ac:	cmpne	r2, #43	; 0x2b
   193b0:	addeq	r0, r1, #2
   193b4:	cmp	r0, r4
   193b8:	beq	191a0 <flatcc_json_parser_generic_json@@Base+0x318>
   193bc:	ldrb	r1, [r0]
   193c0:	sub	r1, r1, #48	; 0x30
   193c4:	uxtb	r1, r1
   193c8:	cmp	r1, #9
   193cc:	bhi	191a0 <flatcc_json_parser_generic_json@@Base+0x318>
   193d0:	add	r1, r0, #1
   193d4:	cmp	r4, r1
   193d8:	beq	19444 <flatcc_json_parser_generic_json@@Base+0x5bc>
   193dc:	ldrb	r0, [r1], #1
   193e0:	sub	r2, r0, #48	; 0x30
   193e4:	uxtb	r2, r2
   193e8:	cmp	r2, #10
   193ec:	bcc	193d4 <flatcc_json_parser_generic_json@@Base+0x54c>
   193f0:	sub	r1, r1, #1
   193f4:	cmp	r1, r4
   193f8:	mov	r2, r4
   193fc:	beq	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   19400:	cmp	r0, #43	; 0x2b
   19404:	bgt	19850 <flatcc_json_parser_generic_json@@Base+0x9c8>
   19408:	sub	r0, r0, #9
   1940c:	cmp	r0, #23
   19410:	bhi	19880 <flatcc_json_parser_generic_json@@Base+0x9f8>
   19414:	movw	r3, #23
   19418:	mov	r2, #1
   1941c:	movt	r3, #128	; 0x80
   19420:	tst	r3, r2, lsl r0
   19424:	mov	r2, r1
   19428:	bne	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   1942c:	b	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   19430:	ldr	r0, [r8]
   19434:	cmp	r0, #0
   19438:	bne	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   1943c:	mov	r0, #6
   19440:	b	1948c <flatcc_json_parser_generic_json@@Base+0x604>
   19444:	mov	r2, r4
   19448:	ldr	r0, [r8]
   1944c:	cmp	r0, #0
   19450:	bne	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   19454:	mov	r0, #6
   19458:	ldr	r1, [sp, #4]
   1945c:	str	r0, [r8]
   19460:	ldr	r0, [r6]
   19464:	sub	r0, r2, r0
   19468:	add	r0, r0, #1
   1946c:	str	r0, [r1]
   19470:	ldr	r0, [sp, #8]
   19474:	str	r2, [r0]
   19478:	b	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   1947c:	ldr	r0, [r8]
   19480:	cmp	r0, #0
   19484:	bne	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   19488:	mov	r0, #16
   1948c:	str	r0, [r8]
   19490:	ldr	r1, [sp]
   19494:	ldr	r0, [r6]
   19498:	sub	r0, r1, r0
   1949c:	ldr	r1, [sp, #4]
   194a0:	str	r0, [r1]
   194a4:	ldr	r0, [sp, #8]
   194a8:	str	r4, [r0]
   194ac:	b	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   194b0:	cmp	r1, r4
   194b4:	beq	19544 <flatcc_json_parser_generic_json@@Base+0x6bc>
   194b8:	ldrb	r0, [r1]
   194bc:	cmp	r0, #34	; 0x22
   194c0:	bne	19544 <flatcc_json_parser_generic_json@@Base+0x6bc>
   194c4:	add	r1, r1, #1
   194c8:	b	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   194cc:	bne	194dc <flatcc_json_parser_generic_json@@Base+0x654>
   194d0:	ldrb	r0, [r7, #2]!
   194d4:	cmp	r0, #32
   194d8:	bhi	194ec <flatcc_json_parser_generic_json@@Base+0x664>
   194dc:	mov	r0, r5
   194e0:	mov	r2, r4
   194e4:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   194e8:	mov	r7, r0
   194ec:	cmp	r7, r4
   194f0:	beq	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   194f4:	ldrb	r0, [r7]
   194f8:	add	sl, sl, #1
   194fc:	cmp	r0, #125	; 0x7d
   19500:	b	19538 <flatcc_json_parser_generic_json@@Base+0x6b0>
   19504:	bne	19514 <flatcc_json_parser_generic_json@@Base+0x68c>
   19508:	ldrb	r0, [r7, #2]!
   1950c:	cmp	r0, #32
   19510:	bhi	19524 <flatcc_json_parser_generic_json@@Base+0x69c>
   19514:	mov	r0, r5
   19518:	mov	r2, r4
   1951c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   19520:	mov	r7, r0
   19524:	cmp	r7, r4
   19528:	beq	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   1952c:	ldrb	r0, [r7]
   19530:	add	sl, sl, #1
   19534:	cmp	r0, #93	; 0x5d
   19538:	mov	r1, r7
   1953c:	beq	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   19540:	b	1983c <flatcc_json_parser_generic_json@@Base+0x9b4>
   19544:	mov	r0, r1
   19548:	ldr	r1, [r8]
   1954c:	cmp	r1, #0
   19550:	bne	19578 <flatcc_json_parser_generic_json@@Base+0x6f0>
   19554:	mov	r1, #20
   19558:	str	r1, [r8]
   1955c:	ldr	r2, [sp, #4]
   19560:	ldr	r1, [r6]
   19564:	sub	r1, r0, r1
   19568:	add	r1, r1, #1
   1956c:	str	r1, [r2]
   19570:	ldr	r1, [sp, #8]
   19574:	str	r0, [r1]
   19578:	mov	r1, r4
   1957c:	subs	r2, r1, r4
   19580:	mov	r3, sl
   19584:	movwne	r2, #1
   19588:	cmp	sl, #0
   1958c:	movwne	r3, #1
   19590:	cmpne	r1, r4
   19594:	beq	19890 <flatcc_json_parser_generic_json@@Base+0xa08>
   19598:	ldrb	r2, [r9, sl]
   1959c:	sub	r0, r4, r1
   195a0:	cmp	r2, #93	; 0x5d
   195a4:	bne	195c4 <flatcc_json_parser_generic_json@@Base+0x73c>
   195a8:	cmp	r0, #2
   195ac:	blt	195f4 <flatcc_json_parser_generic_json@@Base+0x76c>
   195b0:	ldrb	r0, [r1]
   195b4:	cmp	r0, #32
   195b8:	bls	195e0 <flatcc_json_parser_generic_json@@Base+0x758>
   195bc:	mov	r7, r1
   195c0:	b	19604 <flatcc_json_parser_generic_json@@Base+0x77c>
   195c4:	cmp	r0, #2
   195c8:	blt	19650 <flatcc_json_parser_generic_json@@Base+0x7c8>
   195cc:	ldrb	r0, [r1]
   195d0:	cmp	r0, #32
   195d4:	bls	1963c <flatcc_json_parser_generic_json@@Base+0x7b4>
   195d8:	mov	r7, r1
   195dc:	b	19660 <flatcc_json_parser_generic_json@@Base+0x7d8>
   195e0:	bne	195f4 <flatcc_json_parser_generic_json@@Base+0x76c>
   195e4:	mov	r7, r1
   195e8:	ldrb	r0, [r7, #1]!
   195ec:	cmp	r0, #32
   195f0:	bhi	19604 <flatcc_json_parser_generic_json@@Base+0x77c>
   195f4:	mov	r0, r5
   195f8:	mov	r2, r4
   195fc:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   19600:	mov	r7, r0
   19604:	cmp	r7, r4
   19608:	mov	r1, r4
   1960c:	beq	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   19610:	ldrb	r0, [r7]
   19614:	cmp	r0, #44	; 0x2c
   19618:	beq	196bc <flatcc_json_parser_generic_json@@Base+0x834>
   1961c:	cmp	r0, #93	; 0x5d
   19620:	beq	19788 <flatcc_json_parser_generic_json@@Base+0x900>
   19624:	ldr	r0, [r8]
   19628:	mov	r1, r4
   1962c:	cmp	r0, #0
   19630:	bne	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   19634:	mov	r0, #9
   19638:	b	19694 <flatcc_json_parser_generic_json@@Base+0x80c>
   1963c:	bne	19650 <flatcc_json_parser_generic_json@@Base+0x7c8>
   19640:	mov	r7, r1
   19644:	ldrb	r0, [r7, #1]!
   19648:	cmp	r0, #32
   1964c:	bhi	19660 <flatcc_json_parser_generic_json@@Base+0x7d8>
   19650:	mov	r0, r5
   19654:	mov	r2, r4
   19658:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1965c:	mov	r7, r0
   19660:	cmp	r7, r4
   19664:	mov	r1, r4
   19668:	beq	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   1966c:	ldrb	r0, [r7]
   19670:	cmp	r0, #44	; 0x2c
   19674:	beq	196e0 <flatcc_json_parser_generic_json@@Base+0x858>
   19678:	cmp	r0, #125	; 0x7d
   1967c:	beq	19788 <flatcc_json_parser_generic_json@@Base+0x900>
   19680:	ldr	r0, [r8]
   19684:	mov	r1, r4
   19688:	cmp	r0, #0
   1968c:	bne	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   19690:	mov	r0, #10
   19694:	str	r0, [r8]
   19698:	ldr	r1, [sp, #4]
   1969c:	ldr	r0, [r6]
   196a0:	sub	r0, r7, r0
   196a4:	add	r0, r0, #1
   196a8:	str	r0, [r1]
   196ac:	ldr	r0, [sp, #8]
   196b0:	mov	r1, r4
   196b4:	str	r7, [r0]
   196b8:	b	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   196bc:	add	r1, r7, #1
   196c0:	sub	r0, r4, r1
   196c4:	cmp	r0, #2
   196c8:	blt	19714 <flatcc_json_parser_generic_json@@Base+0x88c>
   196cc:	ldrb	r0, [r1]
   196d0:	cmp	r0, #32
   196d4:	bls	19704 <flatcc_json_parser_generic_json@@Base+0x87c>
   196d8:	mov	r7, r1
   196dc:	b	19724 <flatcc_json_parser_generic_json@@Base+0x89c>
   196e0:	add	r1, r7, #1
   196e4:	sub	r0, r4, r1
   196e8:	cmp	r0, #2
   196ec:	blt	19764 <flatcc_json_parser_generic_json@@Base+0x8dc>
   196f0:	ldrb	r0, [r1]
   196f4:	cmp	r0, #32
   196f8:	bls	19754 <flatcc_json_parser_generic_json@@Base+0x8cc>
   196fc:	mov	r7, r1
   19700:	b	19774 <flatcc_json_parser_generic_json@@Base+0x8ec>
   19704:	bne	19714 <flatcc_json_parser_generic_json@@Base+0x88c>
   19708:	ldrb	r0, [r7, #2]!
   1970c:	cmp	r0, #32
   19710:	bhi	19724 <flatcc_json_parser_generic_json@@Base+0x89c>
   19714:	mov	r0, r5
   19718:	mov	r2, r4
   1971c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   19720:	mov	r7, r0
   19724:	cmp	r7, r4
   19728:	beq	1973c <flatcc_json_parser_generic_json@@Base+0x8b4>
   1972c:	ldrb	r0, [r7]
   19730:	cmp	r0, #93	; 0x5d
   19734:	beq	19788 <flatcc_json_parser_generic_json@@Base+0x900>
   19738:	b	1983c <flatcc_json_parser_generic_json@@Base+0x9b4>
   1973c:	ldr	r0, [r8]
   19740:	mov	r1, r4
   19744:	cmp	r0, #0
   19748:	bne	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   1974c:	mov	r0, #9
   19750:	b	19814 <flatcc_json_parser_generic_json@@Base+0x98c>
   19754:	bne	19764 <flatcc_json_parser_generic_json@@Base+0x8dc>
   19758:	ldrb	r0, [r7, #2]!
   1975c:	cmp	r0, #32
   19760:	bhi	19774 <flatcc_json_parser_generic_json@@Base+0x8ec>
   19764:	mov	r0, r5
   19768:	mov	r2, r4
   1976c:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   19770:	mov	r7, r0
   19774:	cmp	r7, r4
   19778:	beq	19800 <flatcc_json_parser_generic_json@@Base+0x978>
   1977c:	ldrb	r0, [r7]
   19780:	cmp	r0, #125	; 0x7d
   19784:	bne	1983c <flatcc_json_parser_generic_json@@Base+0x9b4>
   19788:	add	r2, r7, #1
   1978c:	sub	r0, r4, r2
   19790:	cmp	r0, #2
   19794:	blt	197c0 <flatcc_json_parser_generic_json@@Base+0x938>
   19798:	ldrb	r0, [r2]
   1979c:	cmp	r0, #32
   197a0:	bls	197ac <flatcc_json_parser_generic_json@@Base+0x924>
   197a4:	mov	r1, r2
   197a8:	b	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   197ac:	bne	197c0 <flatcc_json_parser_generic_json@@Base+0x938>
   197b0:	ldrb	r0, [r7, #2]!
   197b4:	mov	r1, r7
   197b8:	cmp	r0, #32
   197bc:	bhi	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   197c0:	mov	r1, r2
   197c4:	mov	r0, r5
   197c8:	mov	r2, r4
   197cc:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   197d0:	mov	r1, r0
   197d4:	subs	r2, r1, r4
   197d8:	sub	r0, sl, #1
   197dc:	movwne	r2, #1
   197e0:	subs	r3, sl, #1
   197e4:	movwne	r3, #1
   197e8:	cmp	sl, #1
   197ec:	beq	19894 <flatcc_json_parser_generic_json@@Base+0xa0c>
   197f0:	cmp	r1, r4
   197f4:	mov	sl, r0
   197f8:	bne	19598 <flatcc_json_parser_generic_json@@Base+0x710>
   197fc:	b	19894 <flatcc_json_parser_generic_json@@Base+0xa0c>
   19800:	ldr	r0, [r8]
   19804:	mov	r1, r4
   19808:	cmp	r0, #0
   1980c:	bne	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   19810:	mov	r0, #10
   19814:	str	r0, [r8]
   19818:	ldr	r1, [sp]
   1981c:	ldr	r0, [r6]
   19820:	sub	r0, r1, r0
   19824:	ldr	r1, [sp, #4]
   19828:	str	r0, [r1]
   1982c:	ldr	r0, [sp, #8]
   19830:	mov	r1, r4
   19834:	str	r4, [r0]
   19838:	b	197d4 <flatcc_json_parser_generic_json@@Base+0x94c>
   1983c:	add	r0, sp, #16
   19840:	cmp	r7, r4
   19844:	add	r0, r0, sl
   19848:	bne	18ed8 <flatcc_json_parser_generic_json@@Base+0x50>
   1984c:	b	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   19850:	cmp	r0, #92	; 0x5c
   19854:	bgt	19868 <flatcc_json_parser_generic_json@@Base+0x9e0>
   19858:	cmp	r0, #44	; 0x2c
   1985c:	beq	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   19860:	cmp	r0, #58	; 0x3a
   19864:	b	19874 <flatcc_json_parser_generic_json@@Base+0x9ec>
   19868:	cmp	r0, #93	; 0x5d
   1986c:	beq	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   19870:	cmp	r0, #125	; 0x7d
   19874:	mov	r2, r1
   19878:	beq	1957c <flatcc_json_parser_generic_json@@Base+0x6f4>
   1987c:	b	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   19880:	mov	r2, r1
   19884:	b	19448 <flatcc_json_parser_generic_json@@Base+0x5c0>
   19888:	mov	r1, r7
   1988c:	b	198ec <flatcc_json_parser_generic_json@@Base+0xa64>
   19890:	mov	r0, sl
   19894:	cmp	r2, #0
   19898:	bne	198ec <flatcc_json_parser_generic_json@@Base+0xa64>
   1989c:	cmp	r3, #0
   198a0:	beq	198ec <flatcc_json_parser_generic_json@@Base+0xa64>
   198a4:	ldr	r1, [r8]
   198a8:	cmp	r1, #0
   198ac:	bne	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   198b0:	add	r1, sp, #16
   198b4:	add	r0, r1, r0
   198b8:	mov	r1, #10
   198bc:	ldrb	r0, [r0, #-1]
   198c0:	cmp	r0, #93	; 0x5d
   198c4:	movweq	r1, #9
   198c8:	str	r1, [r8]
   198cc:	ldr	r0, [r6]
   198d0:	ldr	r1, [sp]
   198d4:	sub	r0, r1, r0
   198d8:	ldr	r1, [sp, #4]
   198dc:	str	r0, [r1]
   198e0:	ldr	r0, [sp, #8]
   198e4:	str	r4, [r0]
   198e8:	mov	r1, r4
   198ec:	mov	r0, r1
   198f0:	sub	sp, fp, #28
   198f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198f8:	ldr	r0, [r8]
   198fc:	cmp	r0, #0
   19900:	bne	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   19904:	mov	r0, #10
   19908:	str	r0, [r8]
   1990c:	b	198cc <flatcc_json_parser_generic_json@@Base+0xa44>
   19910:	ldr	r0, [r8]
   19914:	cmp	r0, #0
   19918:	bne	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   1991c:	mov	r0, #4
   19920:	b	19948 <flatcc_json_parser_generic_json@@Base+0xac0>
   19924:	ldr	r0, [r8]
   19928:	cmp	r0, #0
   1992c:	bne	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   19930:	mov	r0, #2
   19934:	b	19948 <flatcc_json_parser_generic_json@@Base+0xac0>
   19938:	ldr	r0, [r8]
   1993c:	cmp	r0, #0
   19940:	bne	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>
   19944:	mov	r0, #5
   19948:	str	r0, [r8]
   1994c:	ldr	r1, [sp, #4]
   19950:	ldr	r0, [r6]
   19954:	sub	r0, r7, r0
   19958:	add	r0, r0, #1
   1995c:	str	r0, [r1]
   19960:	ldr	r0, [sp, #8]
   19964:	str	r7, [r0]
   19968:	b	198e8 <flatcc_json_parser_generic_json@@Base+0xa60>

0001996c <flatcc_json_parser_double@@Base>:
   1996c:	push	{r4, r5, r6, r7, fp, lr}
   19970:	add	fp, sp, #16
   19974:	mov	r5, r0
   19978:	mov	r0, #0
   1997c:	mov	r6, r1
   19980:	cmp	r1, r2
   19984:	str	r0, [r3]
   19988:	str	r0, [r3, #4]
   1998c:	beq	19a30 <flatcc_json_parser_double@@Base+0xc4>
   19990:	mov	r0, r6
   19994:	mov	r4, r2
   19998:	mov	r7, r3
   1999c:	ldrb	r1, [r0], #1
   199a0:	cmp	r1, #45	; 0x2d
   199a4:	movne	r0, r6
   199a8:	sub	r2, r2, r0
   199ac:	cmp	r2, #2
   199b0:	blt	199f0 <flatcc_json_parser_double@@Base+0x84>
   199b4:	sub	r1, r1, #45	; 0x2d
   199b8:	clz	r1, r1
   199bc:	lsr	r1, r1, #5
   199c0:	ldrb	r1, [r6, r1]
   199c4:	cmp	r1, #46	; 0x2e
   199c8:	beq	199e0 <flatcc_json_parser_double@@Base+0x74>
   199cc:	cmp	r1, #48	; 0x30
   199d0:	bne	199f0 <flatcc_json_parser_double@@Base+0x84>
   199d4:	ldrb	r0, [r0, #1]
   199d8:	cmp	r0, #48	; 0x30
   199dc:	bne	199f0 <flatcc_json_parser_double@@Base+0x84>
   199e0:	ldr	r0, [r5, #24]
   199e4:	cmp	r0, #0
   199e8:	bne	19a5c <flatcc_json_parser_double@@Base+0xf0>
   199ec:	b	19a40 <flatcc_json_parser_double@@Base+0xd4>
   199f0:	sub	r1, r4, r6
   199f4:	mov	r0, r6
   199f8:	mov	r2, r7
   199fc:	bl	19a68 <flatcc_json_parser_double@@Base+0xfc>
   19a00:	cmp	r0, #0
   19a04:	cmpne	r0, r6
   19a08:	bne	19a60 <flatcc_json_parser_double@@Base+0xf4>
   19a0c:	vldr	d0, [r7]
   19a10:	bl	12918 <__isinf@plt>
   19a14:	ldr	r1, [r5, #24]
   19a18:	cmp	r0, #0
   19a1c:	beq	19a38 <flatcc_json_parser_double@@Base+0xcc>
   19a20:	cmp	r1, #0
   19a24:	bne	19a5c <flatcc_json_parser_double@@Base+0xf0>
   19a28:	mov	r0, #7
   19a2c:	b	19a44 <flatcc_json_parser_double@@Base+0xd8>
   19a30:	mov	r0, r6
   19a34:	pop	{r4, r5, r6, r7, fp, pc}
   19a38:	cmp	r1, #0
   19a3c:	bne	19a5c <flatcc_json_parser_double@@Base+0xf0>
   19a40:	mov	r0, #6
   19a44:	str	r6, [r5, #36]	; 0x24
   19a48:	ldr	r1, [r5, #4]
   19a4c:	sub	r1, r6, r1
   19a50:	add	r1, r1, #1
   19a54:	str	r1, [r5, #20]
   19a58:	str	r0, [r5, #24]
   19a5c:	mov	r0, r4
   19a60:	pop	{r4, r5, r6, r7, fp, pc}
   19a64:	nop	{0}
   19a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a6c:	add	fp, sp, #28
   19a70:	sub	sp, sp, #36	; 0x24
   19a74:	cmp	r1, #1000	; 0x3e8
   19a78:	mov	r3, r1
   19a7c:	mov	r5, #0
   19a80:	mov	r9, r0
   19a84:	movge	r3, #1000	; 0x3e8
   19a88:	str	r5, [r2]
   19a8c:	str	r5, [r2, #4]
   19a90:	add	ip, r0, r3
   19a94:	add	lr, ip, #1
   19a98:	cmp	lr, r0
   19a9c:	beq	19b10 <flatcc_json_parser_double@@Base+0x1a4>
   19aa0:	ldrb	r0, [r9]
   19aa4:	mov	r4, r9
   19aa8:	cmp	r0, #45	; 0x2d
   19aac:	bne	19ac4 <flatcc_json_parser_double@@Base+0x158>
   19ab0:	cmp	r3, #0
   19ab4:	beq	19e50 <flatcc_json_parser_double@@Base+0x4e4>
   19ab8:	add	r4, r9, #1
   19abc:	mov	r5, #1
   19ac0:	ldrb	r0, [r4]
   19ac4:	cmp	r0, #48	; 0x30
   19ac8:	bne	19af8 <flatcc_json_parser_double@@Base+0x18c>
   19acc:	add	r6, r4, #1
   19ad0:	cmp	r4, ip
   19ad4:	beq	19b5c <flatcc_json_parser_double@@Base+0x1f0>
   19ad8:	ldrb	r1, [r6]
   19adc:	orr	r0, r1, #32
   19ae0:	cmp	r0, #120	; 0x78
   19ae4:	bne	19b28 <flatcc_json_parser_double@@Base+0x1bc>
   19ae8:	mov	r0, #0
   19aec:	str	r0, [r2]
   19af0:	str	r0, [r2, #4]
   19af4:	b	19b10 <flatcc_json_parser_double@@Base+0x1a4>
   19af8:	sub	r1, r0, #49	; 0x31
   19afc:	uxtb	r1, r1
   19b00:	cmp	r1, #9
   19b04:	bcc	19b18 <flatcc_json_parser_double@@Base+0x1ac>
   19b08:	cmp	r5, #0
   19b0c:	movne	r9, #0
   19b10:	mov	r2, r9
   19b14:	b	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19b18:	sub	r0, r0, #48	; 0x30
   19b1c:	add	r6, r4, #1
   19b20:	asr	r1, r0, #31
   19b24:	b	19b64 <flatcc_json_parser_double@@Base+0x1f8>
   19b28:	cmp	r1, #48	; 0x30
   19b2c:	mov	r0, #0
   19b30:	mov	r1, #0
   19b34:	bne	19b64 <flatcc_json_parser_double@@Base+0x1f8>
   19b38:	sub	r0, ip, #1
   19b3c:	mov	r1, r4
   19b40:	cmp	r0, r4
   19b44:	beq	19b58 <flatcc_json_parser_double@@Base+0x1ec>
   19b48:	ldrb	r7, [r1, #2]
   19b4c:	add	r4, r1, #1
   19b50:	cmp	r7, #48	; 0x30
   19b54:	beq	19b3c <flatcc_json_parser_double@@Base+0x1d0>
   19b58:	add	r6, r1, #2
   19b5c:	mov	r0, #0
   19b60:	mov	r1, #0
   19b64:	cmp	r6, lr
   19b68:	beq	19e50 <flatcc_json_parser_double@@Base+0x4e4>
   19b6c:	mov	sl, #10
   19b70:	mov	r7, r6
   19b74:	str	r2, [sp, #20]
   19b78:	ldrb	r8, [r7]
   19b7c:	sub	r2, r8, #48	; 0x30
   19b80:	uxtb	r4, r2
   19b84:	mov	r2, #0
   19b88:	cmp	r4, #9
   19b8c:	bhi	19bcc <flatcc_json_parser_double@@Base+0x260>
   19b90:	movw	r4, #39320	; 0x9998
   19b94:	movt	r4, #39321	; 0x9999
   19b98:	subs	r4, r4, r0
   19b9c:	movw	r4, #39321	; 0x9999
   19ba0:	movt	r4, #6553	; 0x1999
   19ba4:	sbcs	r4, r4, r1
   19ba8:	bcc	19bdc <flatcc_json_parser_double@@Base+0x270>
   19bac:	add	r1, r1, r1, lsl #2
   19bb0:	add	r7, r7, #1
   19bb4:	lsl	r1, r1, #1
   19bb8:	umlal	r8, r1, r0, sl
   19bbc:	subs	r0, r8, #48	; 0x30
   19bc0:	sbc	r1, r1, #0
   19bc4:	cmp	lr, r7
   19bc8:	bne	19b78 <flatcc_json_parser_double@@Base+0x20c>
   19bcc:	mov	r8, r0
   19bd0:	mov	sl, r1
   19bd4:	mov	r0, #0
   19bd8:	b	19bf8 <flatcc_json_parser_double@@Base+0x28c>
   19bdc:	adds	r4, r0, #1
   19be0:	adc	sl, r1, #0
   19be4:	cmp	r8, #52	; 0x34
   19be8:	mov	r8, r4
   19bec:	movls	r8, r0
   19bf0:	movls	sl, r1
   19bf4:	mov	r0, #1
   19bf8:	cmp	r7, lr
   19bfc:	str	r0, [sp, #24]
   19c00:	beq	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19c04:	sub	r0, r7, r6
   19c08:	mov	r6, #0
   19c0c:	str	r0, [sp, #16]
   19c10:	sub	r0, r3, r7
   19c14:	add	r0, r9, r0
   19c18:	ldrb	r1, [r7]
   19c1c:	cmp	r1, #48	; 0x30
   19c20:	bne	19c44 <flatcc_json_parser_double@@Base+0x2d8>
   19c24:	add	r1, r7, #1
   19c28:	cmp	r7, ip
   19c2c:	sub	r0, r0, #1
   19c30:	add	r6, r6, #1
   19c34:	mov	r7, r1
   19c38:	bne	19c18 <flatcc_json_parser_double@@Base+0x2ac>
   19c3c:	mov	r7, r1
   19c40:	b	19c90 <flatcc_json_parser_double@@Base+0x324>
   19c44:	sub	r1, r1, #49	; 0x31
   19c48:	uxtb	r1, r1
   19c4c:	cmp	r1, #8
   19c50:	bhi	19c90 <flatcc_json_parser_double@@Base+0x324>
   19c54:	mvn	r2, #0
   19c58:	mov	r1, r2
   19c5c:	cmp	r0, #0
   19c60:	beq	19c80 <flatcc_json_parser_double@@Base+0x314>
   19c64:	ldrb	r2, [r7, -r1]
   19c68:	sub	r0, r0, #1
   19c6c:	sub	r2, r2, #48	; 0x30
   19c70:	uxtb	r4, r2
   19c74:	sub	r2, r1, #1
   19c78:	cmp	r4, #10
   19c7c:	bcc	19c58 <flatcc_json_parser_double@@Base+0x2ec>
   19c80:	mov	r0, #1
   19c84:	sub	r6, r6, r1
   19c88:	sub	r7, r7, r1
   19c8c:	str	r0, [sp, #24]
   19c90:	mov	r2, #0
   19c94:	cmp	r7, lr
   19c98:	beq	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19c9c:	ldrb	r0, [r7]
   19ca0:	cmp	r0, #46	; 0x2e
   19ca4:	bne	19e28 <flatcc_json_parser_double@@Base+0x4bc>
   19ca8:	mov	r4, r7
   19cac:	ldrb	r0, [r4, #1]!
   19cb0:	sub	r1, r0, #48	; 0x30
   19cb4:	uxtb	r1, r1
   19cb8:	cmp	r1, #9
   19cbc:	bhi	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19cc0:	cmp	r7, ip
   19cc4:	beq	19d6c <flatcc_json_parser_double@@Base+0x400>
   19cc8:	sub	r1, r3, r7
   19ccc:	str	r4, [sp, #8]
   19cd0:	add	r1, r1, r9
   19cd4:	sub	r1, r1, #1
   19cd8:	str	r1, [sp, #12]
   19cdc:	mov	r1, #0
   19ce0:	mov	r3, r1
   19ce4:	movw	r1, #39320	; 0x9998
   19ce8:	movt	r1, #39321	; 0x9999
   19cec:	subs	r1, r1, r8
   19cf0:	movw	r1, #39321	; 0x9999
   19cf4:	movt	r1, #6553	; 0x1999
   19cf8:	sbcs	r1, r1, sl
   19cfc:	bcc	19d74 <flatcc_json_parser_double@@Base+0x408>
   19d00:	add	r1, sl, sl, lsl #2
   19d04:	uxtb	r0, r0
   19d08:	mov	r4, #10
   19d0c:	lsl	r1, r1, #1
   19d10:	umlal	r0, r1, r8, r4
   19d14:	add	r4, r7, r3
   19d18:	subs	r8, r0, #48	; 0x30
   19d1c:	ldr	r0, [sp, #12]
   19d20:	sbc	sl, r1, #0
   19d24:	cmp	r0, r3
   19d28:	beq	19d5c <flatcc_json_parser_double@@Base+0x3f0>
   19d2c:	ldrb	r0, [r4, #2]
   19d30:	str	sl, [sp, #28]
   19d34:	mov	sl, r8
   19d38:	mov	r8, r5
   19d3c:	add	r1, r3, #1
   19d40:	sub	r5, r0, #48	; 0x30
   19d44:	uxtb	r5, r5
   19d48:	cmp	r5, #10
   19d4c:	mov	r5, r8
   19d50:	mov	r8, sl
   19d54:	ldr	sl, [sp, #28]
   19d58:	bcc	19ce0 <flatcc_json_parser_double@@Base+0x374>
   19d5c:	mvn	r0, r3
   19d60:	add	r7, r4, #2
   19d64:	add	r6, r0, r6
   19d68:	b	19dac <flatcc_json_parser_double@@Base+0x440>
   19d6c:	mov	r7, r4
   19d70:	b	19db0 <flatcc_json_parser_double@@Base+0x444>
   19d74:	add	r1, r7, r3
   19d78:	sub	r6, r6, r3
   19d7c:	add	r7, r1, #1
   19d80:	ldr	r1, [sp, #24]
   19d84:	cmp	r1, #0
   19d88:	bne	19dac <flatcc_json_parser_double@@Base+0x440>
   19d8c:	uxtb	r0, r0
   19d90:	adds	r1, r8, #1
   19d94:	adc	r3, sl, #0
   19d98:	cmp	r0, #52	; 0x34
   19d9c:	mov	r0, #1
   19da0:	movhi	r8, r1
   19da4:	movhi	sl, r3
   19da8:	str	r0, [sp, #24]
   19dac:	ldr	r4, [sp, #8]
   19db0:	cmp	r7, lr
   19db4:	beq	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19db8:	ldr	r1, [sp, #16]
   19dbc:	sub	r0, r7, r4
   19dc0:	add	r1, r0, r1
   19dc4:	str	r1, [sp, #16]
   19dc8:	ldrb	r0, [r7]
   19dcc:	cmp	r0, #48	; 0x30
   19dd0:	bne	19de8 <flatcc_json_parser_double@@Base+0x47c>
   19dd4:	add	r7, r7, #1
   19dd8:	add	r6, r6, #1
   19ddc:	cmp	lr, r7
   19de0:	bne	19dc8 <flatcc_json_parser_double@@Base+0x45c>
   19de4:	b	19e28 <flatcc_json_parser_double@@Base+0x4bc>
   19de8:	sub	r0, r0, #49	; 0x31
   19dec:	uxtb	r0, r0
   19df0:	cmp	r0, #8
   19df4:	bhi	19e28 <flatcc_json_parser_double@@Base+0x4bc>
   19df8:	mov	r0, r7
   19dfc:	cmp	ip, r7
   19e00:	beq	19e1c <flatcc_json_parser_double@@Base+0x4b0>
   19e04:	ldrb	r1, [r0, #1]
   19e08:	add	r7, r0, #1
   19e0c:	sub	r1, r1, #48	; 0x30
   19e10:	uxtb	r1, r1
   19e14:	cmp	r1, #10
   19e18:	bcc	19df8 <flatcc_json_parser_double@@Base+0x48c>
   19e1c:	add	r7, r0, #1
   19e20:	mov	r0, #1
   19e24:	str	r0, [sp, #24]
   19e28:	cmp	r7, lr
   19e2c:	beq	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19e30:	ldrb	r0, [r7]
   19e34:	mov	r4, #0
   19e38:	orr	r0, r0, #32
   19e3c:	cmp	r0, #101	; 0x65
   19e40:	bne	19e60 <flatcc_json_parser_double@@Base+0x4f4>
   19e44:	sub	r0, lr, r7
   19e48:	cmp	r0, #2
   19e4c:	bge	19ecc <flatcc_json_parser_double@@Base+0x560>
   19e50:	mov	r2, #0
   19e54:	mov	r0, r2
   19e58:	sub	sp, fp, #28
   19e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e60:	mov	r0, #0
   19e64:	cmp	r7, lr
   19e68:	mov	r2, #0
   19e6c:	beq	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19e70:	vmov.i32	d16, #0	; 0x00000000
   19e74:	cmp	r4, #0
   19e78:	rsbne	r0, r0, #0
   19e7c:	orrs	r1, r8, sl
   19e80:	beq	19ea8 <flatcc_json_parser_double@@Base+0x53c>
   19e84:	ldr	r2, [sp, #16]
   19e88:	add	r1, r2, r6
   19e8c:	add	r4, r1, r0
   19e90:	cmn	r4, #324	; 0x144
   19e94:	blt	19ea8 <flatcc_json_parser_double@@Base+0x53c>
   19e98:	movw	r0, #310	; 0x136
   19e9c:	cmp	r4, r0
   19ea0:	ble	19f00 <flatcc_json_parser_double@@Base+0x594>
   19ea4:	vldr	d16, [pc, #876]	; 1a218 <flatcc_json_parser_double@@Base+0x8ac>
   19ea8:	ldr	r4, [sp, #20]
   19eac:	vstr	d16, [r4]
   19eb0:	cmp	r5, #0
   19eb4:	beq	19ec4 <flatcc_json_parser_double@@Base+0x558>
   19eb8:	vldr	d16, [r4]
   19ebc:	vneg.f64	d16, d16
   19ec0:	vstr	d16, [r4]
   19ec4:	mov	r2, r7
   19ec8:	b	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19ecc:	mov	r3, r7
   19ed0:	ldrb	r0, [r3, #1]!
   19ed4:	cmp	r0, #45	; 0x2d
   19ed8:	beq	19ffc <flatcc_json_parser_double@@Base+0x690>
   19edc:	mov	r4, #0
   19ee0:	cmp	r0, #43	; 0x2b
   19ee4:	bne	1a00c <flatcc_json_parser_double@@Base+0x6a0>
   19ee8:	add	r3, r7, #2
   19eec:	mov	r2, #0
   19ef0:	cmp	r3, lr
   19ef4:	beq	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   19ef8:	mov	r4, #0
   19efc:	b	1a00c <flatcc_json_parser_double@@Base+0x6a0>
   19f00:	mov	r0, #0
   19f04:	mov	r6, r2
   19f08:	cmp	r0, sl, lsr #21
   19f0c:	bne	1a064 <flatcc_json_parser_double@@Base+0x6f8>
   19f10:	cmp	r4, #22
   19f14:	bhi	1a064 <flatcc_json_parser_double@@Base+0x6f8>
   19f18:	mov	r0, r8
   19f1c:	mov	r1, sl
   19f20:	bl	1c144 <flatcc_json_parser_struct_as_root@@Base+0x418>
   19f24:	vmov	d16, r0, r1
   19f28:	sub	r2, r4, r6
   19f2c:	add	r0, r2, #22
   19f30:	cmp	r0, #44	; 0x2c
   19f34:	bhi	19ea8 <flatcc_json_parser_double@@Base+0x53c>
   19f38:	add	r1, pc, #0
   19f3c:	ldr	pc, [r1, r0, lsl #2]
   19f40:	strdeq	r9, [r1], -r4
   19f44:	strheq	sl, [r1], -r4
   19f48:	strheq	sl, [r1], -ip
   19f4c:	andeq	sl, r1, r4, asr #1
   19f50:	andeq	sl, r1, ip, asr #1
   19f54:	ldrdeq	sl, [r1], -r4
   19f58:	ldrdeq	sl, [r1], -ip
   19f5c:	andeq	sl, r1, r4, ror #1
   19f60:	andeq	sl, r1, ip, ror #1
   19f64:	strdeq	sl, [r1], -r4
   19f68:	strdeq	sl, [r1], -ip
   19f6c:	andeq	sl, r1, r4, lsl #2
   19f70:	andeq	sl, r1, ip, lsl #2
   19f74:	andeq	sl, r1, r4, lsl r1
   19f78:	andeq	sl, r1, ip, lsl r1
   19f7c:	andeq	sl, r1, r4, lsr #2
   19f80:	andeq	sl, r1, ip, lsr #2
   19f84:	andeq	sl, r1, r4, lsr r1
   19f88:	andeq	sl, r1, ip, lsr r1
   19f8c:	andeq	sl, r1, r4, asr #2
   19f90:	andeq	sl, r1, ip, asr #2
   19f94:	andeq	sl, r1, r4, asr r1
   19f98:	andeq	r9, r1, r8, lsr #29
   19f9c:	andeq	sl, r1, r0, ror #2
   19fa0:	andeq	sl, r1, r8, ror #2
   19fa4:	andeq	sl, r1, r0, ror r1
   19fa8:	andeq	sl, r1, r8, ror r1
   19fac:	andeq	sl, r1, r0, lsl #3
   19fb0:	andeq	sl, r1, r8, lsl #3
   19fb4:	muleq	r1, r0, r1
   19fb8:	muleq	r1, r8, r1
   19fbc:	andeq	sl, r1, r0, lsr #3
   19fc0:	andeq	sl, r1, r8, lsr #3
   19fc4:			; <UNDEFINED> instruction: 0x0001a1b0
   19fc8:			; <UNDEFINED> instruction: 0x0001a1b8
   19fcc:	andeq	sl, r1, r0, asr #3
   19fd0:	andeq	sl, r1, r8, asr #3
   19fd4:	ldrdeq	sl, [r1], -r0
   19fd8:	ldrdeq	sl, [r1], -r8
   19fdc:	andeq	sl, r1, r0, ror #3
   19fe0:	andeq	sl, r1, r8, ror #3
   19fe4:	strdeq	sl, [r1], -r0
   19fe8:	strdeq	sl, [r1], -r8
   19fec:	andeq	sl, r1, r0, lsl #4
   19ff0:	andeq	sl, r1, r8, lsl #4
   19ff4:	vldr	d17, [pc, #708]	; 1a2c0 <flatcc_json_parser_double@@Base+0x954>
   19ff8:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   19ffc:	add	r3, r7, #2
   1a000:	mov	r4, #1
   1a004:	cmp	r3, lr
   1a008:	beq	19e50 <flatcc_json_parser_double@@Base+0x4e4>
   1a00c:	ldrb	r0, [r3]
   1a010:	mov	r2, #0
   1a014:	sub	r0, r0, #48	; 0x30
   1a018:	uxtb	r1, r0
   1a01c:	cmp	r1, #9
   1a020:	bhi	19e54 <flatcc_json_parser_double@@Base+0x4e8>
   1a024:	cmp	r3, ip
   1a028:	beq	1a05c <flatcc_json_parser_double@@Base+0x6f0>
   1a02c:	ldrb	r1, [r3, #1]
   1a030:	sub	r2, r1, #48	; 0x30
   1a034:	uxtb	r2, r2
   1a038:	cmp	r2, #9
   1a03c:	bhi	1a05c <flatcc_json_parser_double@@Base+0x6f0>
   1a040:	cmp	r0, #32768	; 0x8000
   1a044:	add	r3, r3, #1
   1a048:	addlt	r0, r0, r0, lsl #2
   1a04c:	addlt	r0, r1, r0, lsl #1
   1a050:	sublt	r0, r0, #48	; 0x30
   1a054:	cmp	ip, r3
   1a058:	bne	1a02c <flatcc_json_parser_double@@Base+0x6c0>
   1a05c:	add	r7, r3, #1
   1a060:	b	19e64 <flatcc_json_parser_double@@Base+0x4f8>
   1a064:	ldr	r0, [sp, #24]
   1a068:	ldr	r3, [sp, #20]
   1a06c:	mov	r2, r4
   1a070:	mov	r1, sl
   1a074:	str	r0, [sp]
   1a078:	str	r3, [sp, #4]
   1a07c:	mov	r4, r3
   1a080:	mov	r0, r8
   1a084:	mov	r3, r6
   1a088:	bl	18040 <grisu3_diy_fp_encode_double@@Base>
   1a08c:	cmp	r0, #0
   1a090:	bne	19eb0 <flatcc_json_parser_double@@Base+0x544>
   1a094:	add	r1, sp, #32
   1a098:	mov	r0, r9
   1a09c:	bl	1299c <strtod@plt>
   1a0a0:	vstr	d0, [r4]
   1a0a4:	ldr	r0, [sp, #32]
   1a0a8:	cmp	r0, r7
   1a0ac:	movcc	r7, r0
   1a0b0:	b	19ec4 <flatcc_json_parser_double@@Base+0x558>
   1a0b4:	vldr	d17, [pc, #356]	; 1a220 <flatcc_json_parser_double@@Base+0x8b4>
   1a0b8:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0bc:	vldr	d17, [pc, #356]	; 1a228 <flatcc_json_parser_double@@Base+0x8bc>
   1a0c0:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0c4:	vldr	d17, [pc, #356]	; 1a230 <flatcc_json_parser_double@@Base+0x8c4>
   1a0c8:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0cc:	vldr	d17, [pc, #356]	; 1a238 <flatcc_json_parser_double@@Base+0x8cc>
   1a0d0:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0d4:	vldr	d17, [pc, #356]	; 1a240 <flatcc_json_parser_double@@Base+0x8d4>
   1a0d8:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0dc:	vldr	d17, [pc, #356]	; 1a248 <flatcc_json_parser_double@@Base+0x8dc>
   1a0e0:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0e4:	vldr	d17, [pc, #356]	; 1a250 <flatcc_json_parser_double@@Base+0x8e4>
   1a0e8:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0ec:	vldr	d17, [pc, #356]	; 1a258 <flatcc_json_parser_double@@Base+0x8ec>
   1a0f0:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0f4:	vldr	d17, [pc, #356]	; 1a260 <flatcc_json_parser_double@@Base+0x8f4>
   1a0f8:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a0fc:	vldr	d17, [pc, #356]	; 1a268 <flatcc_json_parser_double@@Base+0x8fc>
   1a100:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a104:	vldr	d17, [pc, #356]	; 1a270 <flatcc_json_parser_double@@Base+0x904>
   1a108:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a10c:	vldr	d17, [pc, #356]	; 1a278 <flatcc_json_parser_double@@Base+0x90c>
   1a110:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a114:	vldr	d17, [pc, #356]	; 1a280 <flatcc_json_parser_double@@Base+0x914>
   1a118:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a11c:	vldr	d17, [pc, #356]	; 1a288 <flatcc_json_parser_double@@Base+0x91c>
   1a120:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a124:	vldr	d17, [pc, #356]	; 1a290 <flatcc_json_parser_double@@Base+0x924>
   1a128:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a12c:	vldr	d17, [pc, #356]	; 1a298 <flatcc_json_parser_double@@Base+0x92c>
   1a130:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a134:	vldr	d17, [pc, #356]	; 1a2a0 <flatcc_json_parser_double@@Base+0x934>
   1a138:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a13c:	vldr	d17, [pc, #356]	; 1a2a8 <flatcc_json_parser_double@@Base+0x93c>
   1a140:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a144:	vldr	d17, [pc, #356]	; 1a2b0 <flatcc_json_parser_double@@Base+0x944>
   1a148:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a14c:	vldr	d17, [pc, #356]	; 1a2b8 <flatcc_json_parser_double@@Base+0x94c>
   1a150:	b	1a158 <flatcc_json_parser_double@@Base+0x7ec>
   1a154:	vmov.f64	d17, #36	; 0x41200000  10.0
   1a158:	vdiv.f64	d16, d16, d17
   1a15c:	b	19ea8 <flatcc_json_parser_double@@Base+0x53c>
   1a160:	vmov.f64	d17, #36	; 0x41200000  10.0
   1a164:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a168:	vldr	d17, [pc, #328]	; 1a2b8 <flatcc_json_parser_double@@Base+0x94c>
   1a16c:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a170:	vldr	d17, [pc, #312]	; 1a2b0 <flatcc_json_parser_double@@Base+0x944>
   1a174:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a178:	vldr	d17, [pc, #296]	; 1a2a8 <flatcc_json_parser_double@@Base+0x93c>
   1a17c:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a180:	vldr	d17, [pc, #280]	; 1a2a0 <flatcc_json_parser_double@@Base+0x934>
   1a184:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a188:	vldr	d17, [pc, #264]	; 1a298 <flatcc_json_parser_double@@Base+0x92c>
   1a18c:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a190:	vldr	d17, [pc, #248]	; 1a290 <flatcc_json_parser_double@@Base+0x924>
   1a194:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a198:	vldr	d17, [pc, #232]	; 1a288 <flatcc_json_parser_double@@Base+0x91c>
   1a19c:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1a0:	vldr	d17, [pc, #216]	; 1a280 <flatcc_json_parser_double@@Base+0x914>
   1a1a4:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1a8:	vldr	d17, [pc, #200]	; 1a278 <flatcc_json_parser_double@@Base+0x90c>
   1a1ac:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1b0:	vldr	d17, [pc, #184]	; 1a270 <flatcc_json_parser_double@@Base+0x904>
   1a1b4:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1b8:	vldr	d17, [pc, #168]	; 1a268 <flatcc_json_parser_double@@Base+0x8fc>
   1a1bc:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1c0:	vldr	d17, [pc, #152]	; 1a260 <flatcc_json_parser_double@@Base+0x8f4>
   1a1c4:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1c8:	vldr	d17, [pc, #136]	; 1a258 <flatcc_json_parser_double@@Base+0x8ec>
   1a1cc:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1d0:	vldr	d17, [pc, #120]	; 1a250 <flatcc_json_parser_double@@Base+0x8e4>
   1a1d4:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1d8:	vldr	d17, [pc, #104]	; 1a248 <flatcc_json_parser_double@@Base+0x8dc>
   1a1dc:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1e0:	vldr	d17, [pc, #88]	; 1a240 <flatcc_json_parser_double@@Base+0x8d4>
   1a1e4:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1e8:	vldr	d17, [pc, #72]	; 1a238 <flatcc_json_parser_double@@Base+0x8cc>
   1a1ec:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1f0:	vldr	d17, [pc, #56]	; 1a230 <flatcc_json_parser_double@@Base+0x8c4>
   1a1f4:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a1f8:	vldr	d17, [pc, #40]	; 1a228 <flatcc_json_parser_double@@Base+0x8bc>
   1a1fc:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a200:	vldr	d17, [pc, #24]	; 1a220 <flatcc_json_parser_double@@Base+0x8b4>
   1a204:	b	1a20c <flatcc_json_parser_double@@Base+0x8a0>
   1a208:	vldr	d17, [pc, #176]	; 1a2c0 <flatcc_json_parser_double@@Base+0x954>
   1a20c:	vmul.f64	d16, d16, d17
   1a210:	b	19ea8 <flatcc_json_parser_double@@Base+0x53c>
   1a214:	nop	{0}
   1a218:	andeq	r0, r0, r0
   1a21c:	svcvc	0x00f00000	; IMB
   1a220:	usatle	lr, #2, r0, asr #30
   1a224:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1a228:	ldmvc	r5!, {r6, sl, fp, pc}
   1a22c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1a230:	addsvs	r3, r1, r0, lsl #26
   1a234:	mvnmi	r5, #228, 16	; 0xe40000
   1a238:	strbvs	ip, [lr, -r0, lsl #16]
   1a23c:			; <UNDEFINED> instruction: 0x43abc16d
   1a240:	ldrbhi	sl, [r8]
   1a244:	cmnmi	r6, #1459617792	; 0x57000000
   1a248:	strbcc	r8, [r0, r0]!
   1a24c:	movtmi	ip, #4985	; 0x1379
   1a250:	ldrtcs	r0, [r4], -r0
   1a254:	movwmi	r6, #52213	; 0xcbf5
   1a258:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1a25c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1a260:	strb	r0, [r0, #-0]
   1a264:	adcmi	r3, r2, #156	; 0x9c
   1a268:	andge	r0, r0, #0
   1a26c:	rsbmi	r1, sp, #148, 20	; 0x94000
   1a270:	stmda	r0, {}	; <UNPREDICTABLE>
   1a274:	eorsmi	r4, r7, #7733248	; 0x760000
   1a278:	andcs	r0, r0, r0
   1a27c:	andmi	sl, r2, #95	; 0x5f
   1a280:	andeq	r0, r0, r0
   1a284:	bicmi	ip, sp, r5, ror #26
   1a288:	andeq	r0, r0, r0
   1a28c:	orrsmi	sp, r7, r4, lsl #15
   1a290:	andeq	r0, r0, r0
   1a294:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1a298:	andeq	r0, r0, r0
   1a29c:	smlawbmi	lr, r0, r4, r8
   1a2a0:	andeq	r0, r0, r0
   1a2a4:	rscsmi	r6, r8, r0, lsl #20
   1a2a8:	andeq	r0, r0, r0
   1a2ac:	sbcmi	r8, r3, r0, lsl #16
   1a2b0:	andeq	r0, r0, r0
   1a2b4:	addmi	r4, pc, r0
   1a2b8:	andeq	r0, r0, r0
   1a2bc:	subsmi	r0, r9, r0
   1a2c0:			; <UNDEFINED> instruction: 0x064dd592
   1a2c4:	strmi	pc, [r0], #207	; 0xcf

0001a2c8 <flatcc_json_parser_float@@Base>:
   1a2c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a2cc:	add	fp, sp, #24
   1a2d0:	vpush	{d8-d9}
   1a2d4:	sub	sp, sp, #8
   1a2d8:	mov	r8, r0
   1a2dc:	mov	r0, #0
   1a2e0:	mov	r6, r1
   1a2e4:	cmp	r1, r2
   1a2e8:	str	r0, [r3]
   1a2ec:	beq	1a3c4 <flatcc_json_parser_float@@Base+0xfc>
   1a2f0:	mov	r0, r6
   1a2f4:	mov	r5, r2
   1a2f8:	mov	r7, r3
   1a2fc:	ldrb	r1, [r0], #1
   1a300:	cmp	r1, #45	; 0x2d
   1a304:	movne	r0, r6
   1a308:	sub	r2, r2, r0
   1a30c:	cmp	r2, #2
   1a310:	blt	1a350 <flatcc_json_parser_float@@Base+0x88>
   1a314:	sub	r1, r1, #45	; 0x2d
   1a318:	clz	r1, r1
   1a31c:	lsr	r1, r1, #5
   1a320:	ldrb	r1, [r6, r1]
   1a324:	cmp	r1, #46	; 0x2e
   1a328:	beq	1a340 <flatcc_json_parser_float@@Base+0x78>
   1a32c:	cmp	r1, #48	; 0x30
   1a330:	bne	1a350 <flatcc_json_parser_float@@Base+0x88>
   1a334:	ldrb	r0, [r0, #1]
   1a338:	cmp	r0, #48	; 0x30
   1a33c:	bne	1a350 <flatcc_json_parser_float@@Base+0x88>
   1a340:	ldr	r0, [r8, #24]
   1a344:	cmp	r0, #0
   1a348:	bne	1a3f0 <flatcc_json_parser_float@@Base+0x128>
   1a34c:	b	1a3d4 <flatcc_json_parser_float@@Base+0x10c>
   1a350:	sub	r1, r5, r6
   1a354:	mov	r2, sp
   1a358:	mov	r0, r6
   1a35c:	bl	19a68 <flatcc_json_parser_double@@Base+0xfc>
   1a360:	vldr	d16, [sp]
   1a364:	mov	r4, r0
   1a368:	add	r0, pc, #148	; 0x94
   1a36c:	vcmpe.f64	d16, #0.0
   1a370:	vcvt.f32.f64	s16, d16
   1a374:	vmrs	APSR_nzcv, fpscr
   1a378:	addmi	r0, r0, #4
   1a37c:	vldr	s18, [r0]
   1a380:	vmov.f32	s0, s16
   1a384:	bl	1290c <__isinff@plt>
   1a388:	cmp	r0, #0
   1a38c:	vseleq.f32	s0, s16, s18
   1a390:	movne	r4, r6
   1a394:	cmp	r4, #0
   1a398:	cmpne	r4, r6
   1a39c:	vstr	s0, [r7]
   1a3a0:	bne	1a3f4 <flatcc_json_parser_float@@Base+0x12c>
   1a3a4:	bl	1290c <__isinff@plt>
   1a3a8:	ldr	r1, [r8, #24]
   1a3ac:	cmp	r0, #0
   1a3b0:	beq	1a3cc <flatcc_json_parser_float@@Base+0x104>
   1a3b4:	cmp	r1, #0
   1a3b8:	bne	1a3f0 <flatcc_json_parser_float@@Base+0x128>
   1a3bc:	mov	r0, #7
   1a3c0:	b	1a3d8 <flatcc_json_parser_float@@Base+0x110>
   1a3c4:	mov	r4, r6
   1a3c8:	b	1a3f4 <flatcc_json_parser_float@@Base+0x12c>
   1a3cc:	cmp	r1, #0
   1a3d0:	bne	1a3f0 <flatcc_json_parser_float@@Base+0x128>
   1a3d4:	mov	r0, #6
   1a3d8:	str	r6, [r8, #36]	; 0x24
   1a3dc:	ldr	r1, [r8, #4]
   1a3e0:	sub	r1, r6, r1
   1a3e4:	add	r1, r1, #1
   1a3e8:	str	r1, [r8, #20]
   1a3ec:	str	r0, [r8, #24]
   1a3f0:	mov	r4, r5
   1a3f4:	mov	r0, r4
   1a3f8:	sub	sp, fp, #40	; 0x28
   1a3fc:	vpop	{d8-d9}
   1a400:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a404:	svcvc	0x00800000
   1a408:			; <UNDEFINED> instruction: 0xff800000

0001a40c <flatcc_json_parser_integer@@Base>:
   1a40c:	push	{r4, r5, r6, r7, fp, lr}
   1a410:	add	fp, sp, #16
   1a414:	mov	ip, r1
   1a418:	cmp	r1, r2
   1a41c:	beq	1a554 <flatcc_json_parser_integer@@Base+0x148>
   1a420:	ldrb	r1, [ip]
   1a424:	mov	r4, #0
   1a428:	sub	r1, r1, #45	; 0x2d
   1a42c:	clz	r1, r1
   1a430:	lsr	r1, r1, #5
   1a434:	str	r1, [r3]
   1a438:	add	r1, ip, r1
   1a43c:	cmp	r1, r2
   1a440:	beq	1a4a8 <flatcc_json_parser_integer@@Base+0x9c>
   1a444:	mov	lr, #10
   1a448:	mov	r5, #0
   1a44c:	ldrb	r6, [r1]
   1a450:	sub	r7, r6, #48	; 0x30
   1a454:	uxtb	r7, r7
   1a458:	cmp	r7, #9
   1a45c:	bhi	1a4b8 <flatcc_json_parser_integer@@Base+0xac>
   1a460:	add	r7, r5, r5, lsl #2
   1a464:	lsl	r7, r7, #1
   1a468:	umlal	r6, r7, r4, lr
   1a46c:	subs	r6, r6, #48	; 0x30
   1a470:	sbc	r7, r7, #0
   1a474:	subs	r4, r6, r4
   1a478:	sbcs	r4, r7, r5
   1a47c:	bcc	1a508 <flatcc_json_parser_integer@@Base+0xfc>
   1a480:	add	r1, r1, #1
   1a484:	mov	r4, r6
   1a488:	mov	r5, r7
   1a48c:	cmp	r2, r1
   1a490:	bne	1a44c <flatcc_json_parser_integer@@Base+0x40>
   1a494:	mov	r3, #0
   1a498:	mov	r1, r2
   1a49c:	mov	r4, r6
   1a4a0:	mov	r5, r7
   1a4a4:	b	1a4bc <flatcc_json_parser_integer@@Base+0xb0>
   1a4a8:	mov	r1, r2
   1a4ac:	mov	r5, #0
   1a4b0:	mov	r3, #0
   1a4b4:	b	1a4bc <flatcc_json_parser_integer@@Base+0xb0>
   1a4b8:	mov	r3, #1
   1a4bc:	cmp	r1, ip
   1a4c0:	beq	1a554 <flatcc_json_parser_integer@@Base+0x148>
   1a4c4:	cmp	r3, #0
   1a4c8:	beq	1a548 <flatcc_json_parser_integer@@Base+0x13c>
   1a4cc:	ldrb	r3, [r1]
   1a4d0:	cmp	r3, #46	; 0x2e
   1a4d4:	cmpne	r3, #101	; 0x65
   1a4d8:	bne	1a540 <flatcc_json_parser_integer@@Base+0x134>
   1a4dc:	ldr	r3, [r0, #24]
   1a4e0:	cmp	r3, #0
   1a4e4:	bne	1a538 <flatcc_json_parser_integer@@Base+0x12c>
   1a4e8:	str	r1, [r0, #36]	; 0x24
   1a4ec:	mov	r3, #12
   1a4f0:	ldr	r7, [r0, #4]
   1a4f4:	sub	r1, r1, r7
   1a4f8:	add	r1, r1, #1
   1a4fc:	str	r1, [r0, #20]
   1a500:	str	r3, [r0, #24]
   1a504:	b	1a538 <flatcc_json_parser_integer@@Base+0x12c>
   1a508:	ldr	r7, [r0, #24]
   1a50c:	cmp	r7, #0
   1a510:	bne	1a538 <flatcc_json_parser_integer@@Base+0x12c>
   1a514:	str	r1, [r0, #36]	; 0x24
   1a518:	cmp	r3, #0
   1a51c:	mov	r7, #8
   1a520:	ldr	r3, [r0, #4]
   1a524:	movweq	r7, #7
   1a528:	sub	r1, r1, r3
   1a52c:	add	r1, r1, #1
   1a530:	str	r1, [r0, #20]
   1a534:	str	r7, [r0, #24]
   1a538:	mov	ip, r2
   1a53c:	b	1a554 <flatcc_json_parser_integer@@Base+0x148>
   1a540:	cmp	r3, #69	; 0x45
   1a544:	beq	1a4dc <flatcc_json_parser_integer@@Base+0xd0>
   1a548:	ldr	r0, [fp, #8]
   1a54c:	mov	ip, r1
   1a550:	strd	r4, [r0]
   1a554:	mov	r0, ip
   1a558:	pop	{r4, r5, r6, r7, fp, pc}

0001a55c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1a55c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a560:	add	fp, sp, #28
   1a564:	sub	sp, sp, #36	; 0x24
   1a568:	mov	r7, r3
   1a56c:	mov	r4, r2
   1a570:	mov	r5, r0
   1a574:	cmp	r1, r2
   1a578:	beq	1a590 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   1a57c:	ldrb	r0, [r1]
   1a580:	cmp	r0, #34	; 0x22
   1a584:	bne	1a590 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   1a588:	add	r9, r1, #1
   1a58c:	b	1a5c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   1a590:	ldr	r0, [r5, #24]
   1a594:	mov	r9, r4
   1a598:	cmp	r0, #0
   1a59c:	bne	1a5c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   1a5a0:	str	r1, [r5, #36]	; 0x24
   1a5a4:	mov	r0, #16
   1a5a8:	mov	r9, r4
   1a5ac:	ldr	r2, [r5, #4]
   1a5b0:	sub	r1, r1, r2
   1a5b4:	add	r1, r1, #1
   1a5b8:	str	r1, [r5, #20]
   1a5bc:	str	r0, [r5, #24]
   1a5c0:	ldr	r6, [fp, #8]
   1a5c4:	mov	r0, r5
   1a5c8:	mov	r1, r9
   1a5cc:	mov	r2, r4
   1a5d0:	bl	1854c <flatcc_json_parser_string_part@@Base>
   1a5d4:	mov	sl, r0
   1a5d8:	cmp	r0, r4
   1a5dc:	mov	r0, r4
   1a5e0:	beq	1a61c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1a5e4:	ldrb	r0, [sl]
   1a5e8:	cmp	r0, #34	; 0x22
   1a5ec:	bne	1a618 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   1a5f0:	sub	r1, sl, r9
   1a5f4:	and	r0, r1, #3
   1a5f8:	str	r1, [sp, #28]
   1a5fc:	lsr	r1, r1, #2
   1a600:	add	r8, r1, r1, lsl #1
   1a604:	cmp	r0, #2
   1a608:	beq	1a658 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   1a60c:	cmp	r0, #3
   1a610:	addeq	r8, r8, #2
   1a614:	b	1a65c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x100>
   1a618:	mov	r0, sl
   1a61c:	mov	r1, #0
   1a620:	str	r1, [r7]
   1a624:	ldr	r1, [r5, #24]
   1a628:	cmp	r1, #0
   1a62c:	bne	1a6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a630:	str	r0, [r5, #36]	; 0x24
   1a634:	cmp	r6, #0
   1a638:	mov	r1, #31
   1a63c:	ldr	r2, [r5, #4]
   1a640:	movwne	r1, #32
   1a644:	sub	r0, r0, r2
   1a648:	add	r0, r0, #1
   1a64c:	str	r0, [r5, #20]
   1a650:	str	r1, [r5, #24]
   1a654:	b	1a6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a658:	add	r8, r8, #1
   1a65c:	ldr	r0, [r5]
   1a660:	mov	r1, #1
   1a664:	mov	r2, #1
   1a668:	mvn	r3, #0
   1a66c:	bl	155c0 <flatcc_builder_start_vector@@Base>
   1a670:	cmp	r0, #0
   1a674:	beq	1a6b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   1a678:	mov	r0, #0
   1a67c:	str	r0, [r7]
   1a680:	ldr	r0, [r5, #24]
   1a684:	cmp	r0, #0
   1a688:	bne	1a6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a68c:	mov	r0, #33	; 0x21
   1a690:	str	sl, [r5, #36]	; 0x24
   1a694:	ldr	r1, [r5, #4]
   1a698:	sub	r1, sl, r1
   1a69c:	add	r1, r1, #1
   1a6a0:	str	r1, [r5, #20]
   1a6a4:	str	r0, [r5, #24]
   1a6a8:	mov	r0, r4
   1a6ac:	sub	sp, fp, #28
   1a6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6b4:	ldr	r0, [r5]
   1a6b8:	mov	r1, r8
   1a6bc:	bl	14dc8 <flatcc_builder_extend_vector@@Base>
   1a6c0:	cmp	r0, #0
   1a6c4:	beq	1a678 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1a6c8:	movw	r1, #57408	; 0xe040
   1a6cc:	ldr	ip, [sp, #28]
   1a6d0:	movw	r2, #57152	; 0xdf40
   1a6d4:	cmp	r6, #0
   1a6d8:	str	r7, [sp, #8]
   1a6dc:	add	r7, sp, #32
   1a6e0:	mov	r6, r9
   1a6e4:	str	r0, [sp, #4]
   1a6e8:	str	r0, [sp, #16]
   1a6ec:	str	r8, [sp, #24]
   1a6f0:	movt	r1, #1
   1a6f4:	movt	r2, #1
   1a6f8:	movne	r2, r1
   1a6fc:	cmp	r8, #0
   1a700:	mov	r1, r8
   1a704:	mvneq	r1, #0
   1a708:	str	r1, [sp, #20]
   1a70c:	mov	r1, #0
   1a710:	str	ip, [sp, #12]
   1a714:	cmp	ip, r1
   1a718:	beq	1a7c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x264>
   1a71c:	ldrb	r3, [r6, r1]
   1a720:	ldrb	lr, [r2, r3]
   1a724:	cmp	lr, #64	; 0x40
   1a728:	strb	lr, [r7, r1]
   1a72c:	bcc	1a744 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e8>
   1a730:	cmp	lr, #65	; 0x41
   1a734:	bne	1a80c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b0>
   1a738:	sub	r1, r1, #1
   1a73c:	sub	ip, ip, #1
   1a740:	add	r6, r6, #1
   1a744:	add	r1, r1, #1
   1a748:	cmp	r1, #4
   1a74c:	bcc	1a714 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1a750:	ldr	r0, [sp, #20]
   1a754:	cmp	r0, #3
   1a758:	bcc	1a8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a75c:	ldrb	r3, [sp, #33]	; 0x21
   1a760:	ldrb	r1, [sp, #32]
   1a764:	mov	r0, r7
   1a768:	ldr	r8, [sp, #24]
   1a76c:	sub	ip, ip, #4
   1a770:	add	r6, r6, #4
   1a774:	lsr	r7, r3, #4
   1a778:	orr	r1, r7, r1, lsl #2
   1a77c:	mov	r7, r0
   1a780:	ldr	r0, [sp, #16]
   1a784:	strb	r1, [r0]
   1a788:	ldrb	r1, [sp, #34]	; 0x22
   1a78c:	lsr	r1, r1, #2
   1a790:	orr	r1, r1, r3, lsl #4
   1a794:	strb	r1, [r0, #1]
   1a798:	ldrb	r1, [sp, #34]	; 0x22
   1a79c:	ldrb	r3, [sp, #35]	; 0x23
   1a7a0:	orr	r1, r3, r1, lsl #6
   1a7a4:	strb	r1, [r0, #2]
   1a7a8:	ldr	r1, [sp, #20]
   1a7ac:	add	r0, r0, #3
   1a7b0:	str	r0, [sp, #16]
   1a7b4:	subs	r1, r1, #3
   1a7b8:	bne	1a708 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   1a7bc:	b	1a898 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x33c>
   1a7c0:	mov	r1, ip
   1a7c4:	mov	r0, ip
   1a7c8:	sub	ip, ip, r0
   1a7cc:	cmp	r1, #0
   1a7d0:	beq	1a898 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x33c>
   1a7d4:	cmp	r1, #3
   1a7d8:	beq	1a850 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f4>
   1a7dc:	cmp	r1, #2
   1a7e0:	bne	1a8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a7e4:	ldrb	r1, [sp, #33]	; 0x21
   1a7e8:	tst	r1, #15
   1a7ec:	bne	1a8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a7f0:	ldrb	r2, [sp, #32]
   1a7f4:	lsl	r2, r2, #2
   1a7f8:	orr	r1, r2, r1, lsr #4
   1a7fc:	ldr	r2, [sp, #16]
   1a800:	strb	r1, [r2], #1
   1a804:	str	r2, [sp, #16]
   1a808:	b	1a898 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x33c>
   1a80c:	cmp	lr, #66	; 0x42
   1a810:	bne	1a91c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
   1a814:	add	r3, r1, #1
   1a818:	mov	r0, r3
   1a81c:	cmp	r3, ip
   1a820:	bcs	1a7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a824:	cmp	r0, #7
   1a828:	bhi	1a7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a82c:	ldrb	r3, [r6, r0]
   1a830:	ldr	r8, [sp, #24]
   1a834:	ldrb	r3, [r2, r3]
   1a838:	sub	r3, r3, #65	; 0x41
   1a83c:	uxtb	r7, r3
   1a840:	add	r3, r0, #1
   1a844:	cmp	r7, #2
   1a848:	bcc	1a818 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2bc>
   1a84c:	b	1a7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a850:	ldr	r1, [sp, #20]
   1a854:	cmp	r1, #2
   1a858:	bcc	1a8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a85c:	ldrb	r1, [sp, #34]	; 0x22
   1a860:	ands	r2, r1, #3
   1a864:	bne	1a8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x350>
   1a868:	ldrb	r3, [sp, #33]	; 0x21
   1a86c:	ldrb	r2, [sp, #32]
   1a870:	ldr	r8, [sp, #24]
   1a874:	lsl	r7, r3, #4
   1a878:	orr	r1, r7, r1, lsr #2
   1a87c:	ldr	r7, [sp, #16]
   1a880:	strb	r1, [r7, #1]
   1a884:	lsr	r1, r3, #4
   1a888:	orr	r1, r1, r2, lsl #2
   1a88c:	strb	r1, [r7]
   1a890:	add	r7, r7, #2
   1a894:	str	r7, [sp, #16]
   1a898:	cmp	ip, #0
   1a89c:	beq	1a8c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x36c>
   1a8a0:	ldr	r0, [sp, #28]
   1a8a4:	sub	r0, r0, ip
   1a8a8:	b	1a8b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   1a8ac:	ldr	r0, [sp, #28]
   1a8b0:	ldr	r1, [sp, #12]
   1a8b4:	sub	r0, r0, r1
   1a8b8:	ldr	r6, [fp, #8]
   1a8bc:	ldr	r7, [sp, #8]
   1a8c0:	add	r0, r9, r0
   1a8c4:	b	1a61c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1a8c8:	ldr	r0, [sp, #4]
   1a8cc:	ldr	r1, [sp, #16]
   1a8d0:	ldr	r7, [sp, #8]
   1a8d4:	sub	r0, r1, r0
   1a8d8:	cmp	r8, r0
   1a8dc:	bls	1a8f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x398>
   1a8e0:	sub	r1, r8, r0
   1a8e4:	ldr	r0, [r5]
   1a8e8:	bl	1540c <flatcc_builder_truncate_vector@@Base>
   1a8ec:	cmp	r0, #0
   1a8f0:	bne	1a678 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1a8f4:	ldr	r0, [r5]
   1a8f8:	bl	165ec <flatcc_builder_end_vector@@Base>
   1a8fc:	cmp	r0, #0
   1a900:	str	r0, [r7]
   1a904:	beq	1a678 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1a908:	ldrb	r0, [sl]
   1a90c:	cmp	r0, #34	; 0x22
   1a910:	bne	1a924 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c8>
   1a914:	add	r4, sl, #1
   1a918:	b	1a6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a91c:	mov	r0, r1
   1a920:	b	1a7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   1a924:	ldr	r0, [r5, #24]
   1a928:	cmp	r0, #0
   1a92c:	bne	1a6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1a930:	mov	r0, #20
   1a934:	b	1a690 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>

0001a938 <flatcc_json_parser_build_string@@Base>:
   1a938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a93c:	add	fp, sp, #28
   1a940:	sub	sp, sp, #4
   1a944:	mov	r9, r3
   1a948:	mov	sl, r2
   1a94c:	mov	r5, r0
   1a950:	cmp	r1, r2
   1a954:	beq	1a96c <flatcc_json_parser_build_string@@Base+0x34>
   1a958:	ldrb	r0, [r1]
   1a95c:	cmp	r0, #34	; 0x22
   1a960:	bne	1a96c <flatcc_json_parser_build_string@@Base+0x34>
   1a964:	add	r6, r1, #1
   1a968:	b	1a99c <flatcc_json_parser_build_string@@Base+0x64>
   1a96c:	ldr	r0, [r5, #24]
   1a970:	mov	r6, sl
   1a974:	cmp	r0, #0
   1a978:	bne	1a99c <flatcc_json_parser_build_string@@Base+0x64>
   1a97c:	str	r1, [r5, #36]	; 0x24
   1a980:	mov	r0, #16
   1a984:	mov	r6, sl
   1a988:	ldr	r2, [r5, #4]
   1a98c:	sub	r1, r1, r2
   1a990:	add	r1, r1, #1
   1a994:	str	r1, [r5, #20]
   1a998:	str	r0, [r5, #24]
   1a99c:	mov	r0, r5
   1a9a0:	mov	r1, r6
   1a9a4:	mov	r2, sl
   1a9a8:	bl	1854c <flatcc_json_parser_string_part@@Base>
   1a9ac:	mov	r4, r0
   1a9b0:	cmp	r0, sl
   1a9b4:	beq	1a9dc <flatcc_json_parser_build_string@@Base+0xa4>
   1a9b8:	ldrb	r0, [r4]
   1a9bc:	cmp	r0, #34	; 0x22
   1a9c0:	bne	1a9dc <flatcc_json_parser_build_string@@Base+0xa4>
   1a9c4:	ldr	r0, [r5]
   1a9c8:	sub	r2, r4, r6
   1a9cc:	mov	r1, r6
   1a9d0:	bl	17450 <flatcc_builder_create_string@@Base>
   1a9d4:	mov	r6, r4
   1a9d8:	b	1aab4 <flatcc_json_parser_build_string@@Base+0x17c>
   1a9dc:	ldr	r0, [r5]
   1a9e0:	bl	157f0 <flatcc_builder_start_string@@Base>
   1a9e4:	cmp	r0, #0
   1a9e8:	beq	1a9f8 <flatcc_json_parser_build_string@@Base+0xc0>
   1a9ec:	mov	r0, #0
   1a9f0:	str	r0, [r9]
   1a9f4:	b	1ab00 <flatcc_json_parser_build_string@@Base+0x1c8>
   1a9f8:	ldr	r0, [r5]
   1a9fc:	sub	r2, r4, r6
   1aa00:	mov	r1, r6
   1aa04:	bl	152d0 <flatcc_builder_append_string@@Base>
   1aa08:	cmp	r0, #0
   1aa0c:	beq	1a9ec <flatcc_json_parser_build_string@@Base+0xb4>
   1aa10:	cmp	r4, sl
   1aa14:	mov	r6, sl
   1aa18:	beq	1aaac <flatcc_json_parser_build_string@@Base+0x174>
   1aa1c:	mov	r8, sp
   1aa20:	add	r6, r8, #1
   1aa24:	ldrb	r0, [r4]
   1aa28:	cmp	r0, #34	; 0x22
   1aa2c:	beq	1aa98 <flatcc_json_parser_build_string@@Base+0x160>
   1aa30:	mov	r0, r5
   1aa34:	mov	r1, r4
   1aa38:	mov	r2, sl
   1aa3c:	mov	r3, r8
   1aa40:	bl	186a8 <flatcc_json_parser_string_escape@@Base>
   1aa44:	mov	r7, r0
   1aa48:	ldr	r0, [r5]
   1aa4c:	ldrb	r2, [sp]
   1aa50:	mov	r1, r6
   1aa54:	bl	152d0 <flatcc_builder_append_string@@Base>
   1aa58:	cmp	r0, #0
   1aa5c:	beq	1aaa0 <flatcc_json_parser_build_string@@Base+0x168>
   1aa60:	mov	r0, r5
   1aa64:	mov	r1, r7
   1aa68:	mov	r2, sl
   1aa6c:	bl	1854c <flatcc_json_parser_string_part@@Base>
   1aa70:	cmp	r0, sl
   1aa74:	beq	1aaa8 <flatcc_json_parser_build_string@@Base+0x170>
   1aa78:	mov	r4, r0
   1aa7c:	sub	r2, r0, r7
   1aa80:	ldr	r0, [r5]
   1aa84:	mov	r1, r7
   1aa88:	bl	152d0 <flatcc_builder_append_string@@Base>
   1aa8c:	cmp	r0, #0
   1aa90:	bne	1aa24 <flatcc_json_parser_build_string@@Base+0xec>
   1aa94:	b	1a9ec <flatcc_json_parser_build_string@@Base+0xb4>
   1aa98:	mov	r6, r4
   1aa9c:	b	1aaac <flatcc_json_parser_build_string@@Base+0x174>
   1aaa0:	mov	r4, r7
   1aaa4:	b	1a9ec <flatcc_json_parser_build_string@@Base+0xb4>
   1aaa8:	mov	r6, sl
   1aaac:	ldr	r0, [r5]
   1aab0:	bl	175b8 <flatcc_builder_end_string@@Base>
   1aab4:	cmp	r6, sl
   1aab8:	str	r0, [r9]
   1aabc:	beq	1aad4 <flatcc_json_parser_build_string@@Base+0x19c>
   1aac0:	ldrb	r0, [r6]
   1aac4:	cmp	r0, #34	; 0x22
   1aac8:	bne	1aad4 <flatcc_json_parser_build_string@@Base+0x19c>
   1aacc:	add	r4, r6, #1
   1aad0:	b	1ab00 <flatcc_json_parser_build_string@@Base+0x1c8>
   1aad4:	ldr	r0, [r5, #24]
   1aad8:	cmp	r0, #0
   1aadc:	bne	1aafc <flatcc_json_parser_build_string@@Base+0x1c4>
   1aae0:	str	r6, [r5, #36]	; 0x24
   1aae4:	mov	r0, #20
   1aae8:	ldr	r1, [r5, #4]
   1aaec:	sub	r1, r6, r1
   1aaf0:	add	r1, r1, #1
   1aaf4:	str	r1, [r5, #20]
   1aaf8:	str	r0, [r5, #24]
   1aafc:	mov	r4, sl
   1ab00:	mov	r0, r4
   1ab04:	sub	sp, fp, #28
   1ab08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ab0c <flatcc_json_parser_prepare_unions@@Base>:
   1ab0c:	push	{r4, r5, r6, r7, fp, lr}
   1ab10:	add	fp, sp, #16
   1ab14:	mov	r6, r0
   1ab18:	add	r0, r3, r3, lsl #1
   1ab1c:	mov	r5, r1
   1ab20:	mov	r1, #8
   1ab24:	mov	r7, r3
   1ab28:	mov	r4, r2
   1ab2c:	add	r1, r1, r0, lsl #3
   1ab30:	ldr	r0, [r6]
   1ab34:	bl	14234 <flatcc_builder_enter_user_frame@@Base>
   1ab38:	mov	r1, r0
   1ab3c:	ldr	r0, [fp, #8]
   1ab40:	cmp	r1, #0
   1ab44:	str	r1, [r0]
   1ab48:	beq	1ab60 <flatcc_json_parser_prepare_unions@@Base+0x54>
   1ab4c:	ldr	r0, [r6]
   1ab50:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1ab54:	mov	r4, r5
   1ab58:	str	r7, [r0]
   1ab5c:	b	1ab88 <flatcc_json_parser_prepare_unions@@Base+0x7c>
   1ab60:	ldr	r0, [r6, #24]
   1ab64:	cmp	r0, #0
   1ab68:	bne	1ab88 <flatcc_json_parser_prepare_unions@@Base+0x7c>
   1ab6c:	str	r5, [r6, #36]	; 0x24
   1ab70:	mov	r0, #33	; 0x21
   1ab74:	ldr	r1, [r6, #4]
   1ab78:	sub	r1, r5, r1
   1ab7c:	add	r1, r1, #1
   1ab80:	str	r1, [r6, #20]
   1ab84:	str	r0, [r6, #24]
   1ab88:	mov	r0, r4
   1ab8c:	pop	{r4, r5, r6, r7, fp, pc}

0001ab90 <flatcc_json_parser_finalize_unions@@Base>:
   1ab90:	push	{r4, r5, r6, r7, fp, lr}
   1ab94:	add	fp, sp, #16
   1ab98:	mov	r6, r0
   1ab9c:	ldr	r0, [r0]
   1aba0:	mov	r7, r1
   1aba4:	mov	r1, r3
   1aba8:	mov	r5, r3
   1abac:	mov	r4, r2
   1abb0:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1abb4:	ldr	r0, [r0, #4]
   1abb8:	cmp	r0, #0
   1abbc:	beq	1abec <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1abc0:	ldr	r0, [r6, #24]
   1abc4:	cmp	r0, #0
   1abc8:	bne	1abf0 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1abcc:	str	r7, [r6, #36]	; 0x24
   1abd0:	mov	r0, #27
   1abd4:	ldr	r1, [r6, #4]
   1abd8:	sub	r1, r7, r1
   1abdc:	add	r1, r1, #1
   1abe0:	str	r1, [r6, #20]
   1abe4:	str	r0, [r6, #24]
   1abe8:	b	1abf0 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1abec:	mov	r4, r7
   1abf0:	ldr	r0, [r6]
   1abf4:	mov	r1, r5
   1abf8:	bl	14340 <flatcc_builder_exit_user_frame_at@@Base>
   1abfc:	mov	r0, r4
   1ac00:	pop	{r4, r5, r6, r7, fp, pc}

0001ac04 <flatcc_json_parser_union@@Base>:
   1ac04:	push	{r4, r5, r6, r7, fp, lr}
   1ac08:	add	fp, sp, #16
   1ac0c:	sub	sp, sp, #16
   1ac10:	mov	r6, r1
   1ac14:	mov	r5, r0
   1ac18:	ldr	r0, [r0]
   1ac1c:	ldr	r1, [fp, #12]
   1ac20:	mov	r7, r3
   1ac24:	mov	r4, r2
   1ac28:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1ac2c:	add	r2, r0, #8
   1ac30:	add	r3, r7, r7, lsl #1
   1ac34:	mov	r1, r2
   1ac38:	ldr	r7, [r1, r3, lsl #3]!
   1ac3c:	cmp	r7, #0
   1ac40:	beq	1ac70 <flatcc_json_parser_union@@Base+0x6c>
   1ac44:	ldr	r0, [r5, #24]
   1ac48:	cmp	r0, #0
   1ac4c:	bne	1ad30 <flatcc_json_parser_union@@Base+0x12c>
   1ac50:	mov	r0, #28
   1ac54:	str	r6, [r5, #36]	; 0x24
   1ac58:	ldr	r1, [r5, #4]
   1ac5c:	sub	r1, r6, r1
   1ac60:	add	r1, r1, #1
   1ac64:	str	r1, [r5, #20]
   1ac68:	str	r0, [r5, #24]
   1ac6c:	b	1ad30 <flatcc_json_parser_union@@Base+0x12c>
   1ac70:	add	r2, r2, r3, lsl #3
   1ac74:	ldrb	r3, [r2, #12]
   1ac78:	cmp	r3, #0
   1ac7c:	beq	1acec <flatcc_json_parser_union@@Base+0xe8>
   1ac80:	ldrb	r3, [r2, #13]
   1ac84:	cmp	r3, #0
   1ac88:	strb	r3, [sp, #8]
   1ac8c:	beq	1ad24 <flatcc_json_parser_union@@Base+0x120>
   1ac90:	ldr	r1, [r0, #4]
   1ac94:	ldr	r7, [fp, #16]
   1ac98:	mov	r2, r4
   1ac9c:	sub	r1, r1, #1
   1aca0:	str	r1, [r0, #4]
   1aca4:	add	r0, sp, #8
   1aca8:	mov	r1, r6
   1acac:	add	r0, r0, #4
   1acb0:	str	r0, [sp]
   1acb4:	mov	r0, r5
   1acb8:	blx	r7
   1acbc:	cmp	r0, r4
   1acc0:	beq	1ad30 <flatcc_json_parser_union@@Base+0x12c>
   1acc4:	mov	r6, r0
   1acc8:	ldr	r1, [fp, #8]
   1accc:	ldr	r0, [r5]
   1acd0:	ldr	r2, [sp, #8]
   1acd4:	ldr	r3, [sp, #12]
   1acd8:	bl	169c4 <flatcc_builder_table_add_union@@Base>
   1acdc:	cmp	r0, #0
   1ace0:	bne	1ac44 <flatcc_json_parser_union@@Base+0x40>
   1ace4:	mov	r4, r6
   1ace8:	b	1ad30 <flatcc_json_parser_union@@Base+0x12c>
   1acec:	ldr	r3, [r0, #4]
   1acf0:	add	r3, r3, #1
   1acf4:	str	r3, [r0, #4]
   1acf8:	ldr	r0, [r5, #16]
   1acfc:	str	r0, [r2, #8]
   1ad00:	ldr	r0, [r5, #4]
   1ad04:	str	r0, [r2, #4]
   1ad08:	str	r6, [r1]
   1ad0c:	mov	r0, r5
   1ad10:	mov	r1, r6
   1ad14:	mov	r2, r4
   1ad18:	bl	18e88 <flatcc_json_parser_generic_json@@Base>
   1ad1c:	mov	r4, r0
   1ad20:	b	1ad30 <flatcc_json_parser_union@@Base+0x12c>
   1ad24:	ldr	r0, [r5, #24]
   1ad28:	cmp	r0, #0
   1ad2c:	beq	1ad3c <flatcc_json_parser_union@@Base+0x138>
   1ad30:	mov	r0, r4
   1ad34:	sub	sp, fp, #16
   1ad38:	pop	{r4, r5, r6, r7, fp, pc}
   1ad3c:	mov	r0, #25
   1ad40:	b	1ac54 <flatcc_json_parser_union@@Base+0x50>

0001ad44 <flatcc_json_parser_union_type@@Base>:
   1ad44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad48:	add	fp, sp, #28
   1ad4c:	sub	sp, sp, #28
   1ad50:	mov	r7, r1
   1ad54:	mov	r5, r0
   1ad58:	ldr	r0, [r0]
   1ad5c:	ldr	r1, [fp, #12]
   1ad60:	mov	r4, r3
   1ad64:	mov	r8, r2
   1ad68:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1ad6c:	add	sl, r4, r4, lsl #1
   1ad70:	add	r2, r0, #8
   1ad74:	mov	r6, r0
   1ad78:	str	r8, [sp, #8]
   1ad7c:	add	r9, r2, sl, lsl #3
   1ad80:	mov	r0, r9
   1ad84:	ldrb	r1, [r0, #12]!
   1ad88:	cmp	r1, #0
   1ad8c:	beq	1adc8 <flatcc_json_parser_union_type@@Base+0x84>
   1ad90:	ldr	r0, [r5, #24]
   1ad94:	cmp	r0, #0
   1ad98:	bne	1adb8 <flatcc_json_parser_union_type@@Base+0x74>
   1ad9c:	str	r7, [r5, #36]	; 0x24
   1ada0:	mov	r0, #28
   1ada4:	ldr	r1, [r5, #4]
   1ada8:	sub	r1, r7, r1
   1adac:	add	r1, r1, #1
   1adb0:	str	r1, [r5, #20]
   1adb4:	str	r0, [r5, #24]
   1adb8:	ldr	r3, [sp, #8]
   1adbc:	mov	r0, r3
   1adc0:	sub	sp, fp, #28
   1adc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adc8:	mov	r1, #1
   1adcc:	mov	r4, r9
   1add0:	str	r2, [sp, #4]
   1add4:	cmp	r7, r8
   1add8:	mov	r2, r8
   1addc:	strb	r1, [r0]
   1ade0:	mov	r0, #0
   1ade4:	str	r0, [sp, #20]
   1ade8:	str	r0, [sp, #16]
   1adec:	str	r0, [sp, #12]
   1adf0:	strb	r0, [r4, #13]!
   1adf4:	beq	1ae98 <flatcc_json_parser_union_type@@Base+0x154>
   1adf8:	add	r0, sp, #16
   1adfc:	add	r3, sp, #12
   1ae00:	mov	r1, r7
   1ae04:	str	r0, [sp]
   1ae08:	mov	r0, r5
   1ae0c:	bl	1a40c <flatcc_json_parser_integer@@Base>
   1ae10:	ldr	r2, [sp, #8]
   1ae14:	cmp	r0, r7
   1ae18:	beq	1ae98 <flatcc_json_parser_union_type@@Base+0x154>
   1ae1c:	ldr	r1, [sp, #12]
   1ae20:	cmp	r1, #0
   1ae24:	beq	1ae40 <flatcc_json_parser_union_type@@Base+0xfc>
   1ae28:	ldr	r1, [r5, #24]
   1ae2c:	mov	r3, r2
   1ae30:	cmp	r1, #0
   1ae34:	bne	1ae90 <flatcc_json_parser_union_type@@Base+0x14c>
   1ae38:	mov	r1, #8
   1ae3c:	b	1ae68 <flatcc_json_parser_union_type@@Base+0x124>
   1ae40:	ldr	r1, [sp, #16]
   1ae44:	ldr	ip, [sp, #20]
   1ae48:	subs	r3, r1, #256	; 0x100
   1ae4c:	sbcs	r3, ip, #0
   1ae50:	bcc	1ae88 <flatcc_json_parser_union_type@@Base+0x144>
   1ae54:	ldr	r1, [r5, #24]
   1ae58:	mov	r3, r2
   1ae5c:	cmp	r1, #0
   1ae60:	bne	1ae90 <flatcc_json_parser_union_type@@Base+0x14c>
   1ae64:	mov	r1, #7
   1ae68:	str	r0, [r5, #36]	; 0x24
   1ae6c:	ldr	r3, [r5, #4]
   1ae70:	sub	r0, r0, r3
   1ae74:	mov	r3, r2
   1ae78:	add	r0, r0, #1
   1ae7c:	str	r0, [r5, #20]
   1ae80:	str	r1, [r5, #24]
   1ae84:	b	1ae90 <flatcc_json_parser_union_type@@Base+0x14c>
   1ae88:	mov	r3, r0
   1ae8c:	strb	r1, [r4]
   1ae90:	cmp	r3, r7
   1ae94:	bne	1aeb4 <flatcc_json_parser_union_type@@Base+0x170>
   1ae98:	ldr	r3, [fp, #16]
   1ae9c:	mov	r0, r5
   1aea0:	mov	r1, r7
   1aea4:	str	r4, [sp]
   1aea8:	bl	1afa4 <flatcc_json_parser_union_type@@Base+0x260>
   1aeac:	ldr	r2, [sp, #8]
   1aeb0:	mov	r3, r0
   1aeb4:	ldr	r0, [sp, #4]
   1aeb8:	ldr	r1, [r0, sl, lsl #3]
   1aebc:	cmp	r1, #0
   1aec0:	beq	1af5c <flatcc_json_parser_union_type@@Base+0x218>
   1aec4:	ldr	r0, [r6, #4]
   1aec8:	cmp	r0, #0
   1aecc:	beq	1af84 <flatcc_json_parser_union_type@@Base+0x240>
   1aed0:	sub	r0, r0, #1
   1aed4:	mov	sl, r3
   1aed8:	ldr	r7, [fp, #20]
   1aedc:	str	r0, [r6, #4]
   1aee0:	ldr	r0, [r9, #8]
   1aee4:	ldr	r8, [r5, #4]
   1aee8:	ldr	r6, [r5, #16]
   1aeec:	str	r0, [r5, #16]
   1aef0:	ldr	r0, [r9, #4]
   1aef4:	str	r0, [r5, #4]
   1aef8:	add	r0, sp, #16
   1aefc:	ldrb	r3, [r4]
   1af00:	add	r0, r0, #4
   1af04:	str	r0, [sp]
   1af08:	mov	r0, r5
   1af0c:	strb	r3, [sp, #16]
   1af10:	blx	r7
   1af14:	ldr	r3, [sp, #8]
   1af18:	cmp	r0, r3
   1af1c:	beq	1adbc <flatcc_json_parser_union_type@@Base+0x78>
   1af20:	ldr	r1, [fp, #8]
   1af24:	ldr	r0, [r5]
   1af28:	ldr	r2, [sp, #16]
   1af2c:	ldr	r3, [sp, #20]
   1af30:	bl	169c4 <flatcc_builder_table_add_union@@Base>
   1af34:	cmp	r0, #0
   1af38:	beq	1af74 <flatcc_json_parser_union_type@@Base+0x230>
   1af3c:	ldr	r0, [r5, #24]
   1af40:	cmp	r0, #0
   1af44:	bne	1adb8 <flatcc_json_parser_union_type@@Base+0x74>
   1af48:	str	sl, [r5, #36]	; 0x24
   1af4c:	mov	r0, #28
   1af50:	ldr	r1, [r5, #4]
   1af54:	sub	r1, sl, r1
   1af58:	b	1adac <flatcc_json_parser_union_type@@Base+0x68>
   1af5c:	ldrb	r0, [r4]
   1af60:	ldr	r1, [r6, #4]
   1af64:	cmp	r0, #0
   1af68:	addne	r1, r1, #1
   1af6c:	str	r1, [r6, #4]
   1af70:	b	1adbc <flatcc_json_parser_union_type@@Base+0x78>
   1af74:	mov	r3, sl
   1af78:	str	r8, [r5, #4]
   1af7c:	str	r6, [r5, #16]
   1af80:	b	1adbc <flatcc_json_parser_union_type@@Base+0x78>
   1af84:	movw	r0, #58637	; 0xe50d
   1af88:	movw	r1, #58652	; 0xe51c
   1af8c:	movw	r3, #58726	; 0xe566
   1af90:	movw	r2, #965	; 0x3c5
   1af94:	movt	r0, #1
   1af98:	movt	r1, #1
   1af9c:	movt	r3, #1
   1afa0:	bl	129c0 <__assert_fail@plt>
   1afa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afa8:	add	fp, sp, #28
   1afac:	sub	sp, sp, #44	; 0x2c
   1afb0:	mov	r4, r2
   1afb4:	mov	r2, r1
   1afb8:	ldr	r1, [fp, #8]
   1afbc:	mov	r5, r0
   1afc0:	mov	r0, #0
   1afc4:	cmp	r2, r4
   1afc8:	strb	r0, [r1]
   1afcc:	beq	1b030 <flatcc_json_parser_union_type@@Base+0x2ec>
   1afd0:	ldrb	r0, [r2]
   1afd4:	cmp	r0, #46	; 0x2e
   1afd8:	beq	1aff4 <flatcc_json_parser_union_type@@Base+0x2b0>
   1afdc:	cmp	r0, #34	; 0x22
   1afe0:	bne	1b028 <flatcc_json_parser_union_type@@Base+0x2e4>
   1afe4:	mov	r0, #0
   1afe8:	add	r1, r2, #1
   1afec:	str	r0, [r5, #12]
   1aff0:	b	1b034 <flatcc_json_parser_union_type@@Base+0x2f0>
   1aff4:	ldr	r0, [r5, #24]
   1aff8:	mov	r1, r4
   1affc:	cmp	r0, #0
   1b000:	bne	1b034 <flatcc_json_parser_union_type@@Base+0x2f0>
   1b004:	str	r2, [r5, #36]	; 0x24
   1b008:	mov	r0, #5
   1b00c:	ldr	r1, [r5, #4]
   1b010:	sub	r1, r2, r1
   1b014:	add	r1, r1, #1
   1b018:	str	r1, [r5, #20]
   1b01c:	str	r0, [r5, #24]
   1b020:	mov	r1, r4
   1b024:	b	1b034 <flatcc_json_parser_union_type@@Base+0x2f0>
   1b028:	mov	r0, #1
   1b02c:	str	r0, [r5, #12]
   1b030:	mov	r1, r2
   1b034:	ldr	r0, [r5, #12]
   1b038:	cmp	r0, #0
   1b03c:	beq	1b048 <flatcc_json_parser_union_type@@Base+0x304>
   1b040:	mov	r7, r1
   1b044:	b	1b08c <flatcc_json_parser_union_type@@Base+0x348>
   1b048:	sub	r0, r4, r1
   1b04c:	cmp	r0, #2
   1b050:	blt	1b074 <flatcc_json_parser_union_type@@Base+0x330>
   1b054:	ldrb	r0, [r1]
   1b058:	cmp	r0, #32
   1b05c:	bhi	1b040 <flatcc_json_parser_union_type@@Base+0x2fc>
   1b060:	bne	1b074 <flatcc_json_parser_union_type@@Base+0x330>
   1b064:	mov	r7, r1
   1b068:	ldrb	r0, [r7, #1]!
   1b06c:	cmp	r0, #32
   1b070:	bhi	1b08c <flatcc_json_parser_union_type@@Base+0x348>
   1b074:	mov	r0, r5
   1b078:	mov	r2, r4
   1b07c:	mov	r6, r3
   1b080:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b084:	mov	r3, r6
   1b088:	mov	r7, r0
   1b08c:	cmp	r7, r4
   1b090:	beq	1b18c <flatcc_json_parser_union_type@@Base+0x448>
   1b094:	add	r9, r3, #4
   1b098:	mov	r6, #0
   1b09c:	add	sl, sp, #32
   1b0a0:	add	r8, sp, #28
   1b0a4:	str	r3, [sp, #16]
   1b0a8:	str	r9, [sp, #12]
   1b0ac:	str	r6, [sp, #20]
   1b0b0:	mov	r6, r3
   1b0b4:	ldr	r6, [r3]
   1b0b8:	add	r0, sp, #24
   1b0bc:	mov	r1, r7
   1b0c0:	mov	r2, r4
   1b0c4:	mov	r3, r8
   1b0c8:	str	sl, [sp]
   1b0cc:	str	r0, [sp, #4]
   1b0d0:	mov	r0, r5
   1b0d4:	blx	r6
   1b0d8:	cmp	r0, r4
   1b0dc:	beq	1b18c <flatcc_json_parser_union_type@@Base+0x448>
   1b0e0:	cmp	r0, r7
   1b0e4:	bne	1b0f8 <flatcc_json_parser_union_type@@Base+0x3b4>
   1b0e8:	ldr	r6, [r9], #4
   1b0ec:	cmp	r6, #0
   1b0f0:	bne	1b0b8 <flatcc_json_parser_union_type@@Base+0x374>
   1b0f4:	b	1b164 <flatcc_json_parser_union_type@@Base+0x420>
   1b0f8:	ldr	r6, [sp, #20]
   1b0fc:	cmp	r6, #0
   1b100:	beq	1b110 <flatcc_json_parser_union_type@@Base+0x3cc>
   1b104:	ldr	r1, [r5, #12]
   1b108:	cmp	r1, #0
   1b10c:	bne	1b1c0 <flatcc_json_parser_union_type@@Base+0x47c>
   1b110:	ldr	r1, [sp, #28]
   1b114:	cmp	r1, #0
   1b118:	bne	1b198 <flatcc_json_parser_union_type@@Base+0x454>
   1b11c:	ldr	r1, [sp, #32]
   1b120:	ldr	r2, [sp, #36]	; 0x24
   1b124:	subs	r3, r1, #256	; 0x100
   1b128:	sbcs	r2, r2, #0
   1b12c:	bcs	1b1ac <flatcc_json_parser_union_type@@Base+0x468>
   1b130:	ldr	r2, [fp, #8]
   1b134:	ldr	r9, [sp, #12]
   1b138:	add	r6, r6, #1
   1b13c:	mov	r7, r0
   1b140:	mov	r3, r2
   1b144:	ldrb	r2, [r2]
   1b148:	add	r1, r2, r1
   1b14c:	strb	r1, [r3]
   1b150:	ldr	r3, [sp, #16]
   1b154:	ldr	r1, [sp, #24]
   1b158:	cmp	r1, #0
   1b15c:	bne	1b0ac <flatcc_json_parser_union_type@@Base+0x368>
   1b160:	b	1b190 <flatcc_json_parser_union_type@@Base+0x44c>
   1b164:	ldr	r0, [r5, #24]
   1b168:	cmp	r0, #0
   1b16c:	bne	1b18c <flatcc_json_parser_union_type@@Base+0x448>
   1b170:	str	r7, [r5, #36]	; 0x24
   1b174:	mov	r0, #23
   1b178:	ldr	r1, [r5, #4]
   1b17c:	sub	r1, r7, r1
   1b180:	add	r1, r1, #1
   1b184:	str	r1, [r5, #20]
   1b188:	str	r0, [r5, #24]
   1b18c:	mov	r0, r4
   1b190:	sub	sp, fp, #28
   1b194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b198:	ldr	r1, [r5, #24]
   1b19c:	cmp	r1, #0
   1b1a0:	bne	1b18c <flatcc_json_parser_union_type@@Base+0x448>
   1b1a4:	mov	r1, #8
   1b1a8:	b	1b1d0 <flatcc_json_parser_union_type@@Base+0x48c>
   1b1ac:	ldr	r1, [r5, #24]
   1b1b0:	cmp	r1, #0
   1b1b4:	bne	1b18c <flatcc_json_parser_union_type@@Base+0x448>
   1b1b8:	mov	r1, #7
   1b1bc:	b	1b1d0 <flatcc_json_parser_union_type@@Base+0x48c>
   1b1c0:	ldr	r1, [r5, #24]
   1b1c4:	cmp	r1, #0
   1b1c8:	bne	1b18c <flatcc_json_parser_union_type@@Base+0x448>
   1b1cc:	mov	r1, #14
   1b1d0:	str	r0, [r5, #36]	; 0x24
   1b1d4:	ldr	r2, [r5, #4]
   1b1d8:	sub	r0, r0, r2
   1b1dc:	add	r0, r0, #1
   1b1e0:	str	r0, [r5, #20]
   1b1e4:	str	r1, [r5, #24]
   1b1e8:	b	1b18c <flatcc_json_parser_union_type@@Base+0x448>

0001b1ec <flatcc_json_parser_union_vector@@Base>:
   1b1ec:	push	{r4, r5, r6, r7, fp, lr}
   1b1f0:	add	fp, sp, #16
   1b1f4:	sub	sp, sp, #16
   1b1f8:	mov	r6, r1
   1b1fc:	mov	r5, r0
   1b200:	ldr	r0, [r0]
   1b204:	ldr	r1, [fp, #12]
   1b208:	mov	r7, r3
   1b20c:	mov	r4, r2
   1b210:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1b214:	add	r2, r0, #8
   1b218:	add	r3, r7, r7, lsl #1
   1b21c:	mov	r1, r2
   1b220:	ldr	r7, [r1, r3, lsl #3]!
   1b224:	cmp	r7, #0
   1b228:	beq	1b25c <flatcc_json_parser_union_vector@@Base+0x70>
   1b22c:	ldr	r0, [r5, #24]
   1b230:	cmp	r0, #0
   1b234:	bne	1b254 <flatcc_json_parser_union_vector@@Base+0x68>
   1b238:	str	r6, [r5, #36]	; 0x24
   1b23c:	mov	r0, #28
   1b240:	ldr	r1, [r5, #4]
   1b244:	sub	r1, r6, r1
   1b248:	add	r1, r1, #1
   1b24c:	str	r1, [r5, #20]
   1b250:	str	r0, [r5, #24]
   1b254:	mov	r0, r4
   1b258:	b	1b2a0 <flatcc_json_parser_union_vector@@Base+0xb4>
   1b25c:	add	r2, r2, r3, lsl #3
   1b260:	ldr	r3, [r0, #4]
   1b264:	ldrb	r7, [r2, #12]
   1b268:	cmp	r7, #0
   1b26c:	beq	1b2a8 <flatcc_json_parser_union_vector@@Base+0xbc>
   1b270:	sub	r3, r3, #1
   1b274:	ldr	r1, [fp, #16]
   1b278:	ldr	r7, [fp, #8]
   1b27c:	str	r3, [r0, #4]
   1b280:	ldr	r0, [r2, #16]
   1b284:	ldr	r3, [r2, #20]
   1b288:	mov	r2, r4
   1b28c:	stm	sp, {r0, r7}
   1b290:	str	r1, [sp, #8]
   1b294:	mov	r0, r5
   1b298:	mov	r1, r6
   1b29c:	bl	1b2dc <flatcc_json_parser_union_vector@@Base+0xf0>
   1b2a0:	sub	sp, fp, #16
   1b2a4:	pop	{r4, r5, r6, r7, fp, pc}
   1b2a8:	add	r3, r3, #1
   1b2ac:	str	r3, [r0, #4]
   1b2b0:	ldr	r0, [r5, #16]
   1b2b4:	str	r0, [r2, #8]
   1b2b8:	ldr	r0, [r5, #4]
   1b2bc:	str	r0, [r2, #4]
   1b2c0:	str	r6, [r1]
   1b2c4:	mov	r0, r5
   1b2c8:	mov	r1, r6
   1b2cc:	mov	r2, r4
   1b2d0:	sub	sp, fp, #16
   1b2d4:	pop	{r4, r5, r6, r7, fp, lr}
   1b2d8:	b	18e88 <flatcc_json_parser_generic_json@@Base>
   1b2dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e0:	add	fp, sp, #28
   1b2e4:	sub	sp, sp, #12
   1b2e8:	mov	r5, r0
   1b2ec:	mov	r0, #0
   1b2f0:	mov	r8, r3
   1b2f4:	mov	r6, r2
   1b2f8:	mov	r7, r1
   1b2fc:	str	r0, [sp, #8]
   1b300:	ldr	r0, [r5]
   1b304:	bl	1564c <flatcc_builder_start_offset_vector@@Base>
   1b308:	cmp	r0, #0
   1b30c:	beq	1b330 <flatcc_json_parser_union_vector@@Base+0x144>
   1b310:	ldr	r0, [r5, #24]
   1b314:	cmp	r0, #0
   1b318:	bne	1b5a0 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1b31c:	str	r7, [r5, #36]	; 0x24
   1b320:	mov	r0, #33	; 0x21
   1b324:	ldr	r1, [r5, #4]
   1b328:	sub	r1, r7, r1
   1b32c:	b	1b594 <flatcc_json_parser_union_vector@@Base+0x3a8>
   1b330:	ldr	sl, [fp, #8]
   1b334:	cmp	r7, r6
   1b338:	beq	1b36c <flatcc_json_parser_union_vector@@Base+0x180>
   1b33c:	ldrb	r0, [r7]
   1b340:	cmp	r0, #91	; 0x5b
   1b344:	bne	1b36c <flatcc_json_parser_union_vector@@Base+0x180>
   1b348:	add	r1, r7, #1
   1b34c:	sub	r0, r6, r1
   1b350:	cmp	r0, #2
   1b354:	blt	1b3b0 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1b358:	ldrb	r0, [r1]
   1b35c:	cmp	r0, #32
   1b360:	bls	1b3a0 <flatcc_json_parser_union_vector@@Base+0x1b4>
   1b364:	mov	r7, r1
   1b368:	b	1b3c0 <flatcc_json_parser_union_vector@@Base+0x1d4>
   1b36c:	ldr	r0, [r5, #24]
   1b370:	mov	r9, r6
   1b374:	cmp	r0, #0
   1b378:	bne	1b570 <flatcc_json_parser_union_vector@@Base+0x384>
   1b37c:	str	r7, [r5, #36]	; 0x24
   1b380:	mov	r0, #22
   1b384:	mov	r9, r6
   1b388:	ldr	r1, [r5, #4]
   1b38c:	sub	r1, r7, r1
   1b390:	add	r1, r1, #1
   1b394:	str	r1, [r5, #20]
   1b398:	str	r0, [r5, #24]
   1b39c:	b	1b570 <flatcc_json_parser_union_vector@@Base+0x384>
   1b3a0:	bne	1b3b0 <flatcc_json_parser_union_vector@@Base+0x1c4>
   1b3a4:	ldrb	r0, [r7, #2]!
   1b3a8:	cmp	r0, #32
   1b3ac:	bhi	1b3c0 <flatcc_json_parser_union_vector@@Base+0x1d4>
   1b3b0:	mov	r0, r5
   1b3b4:	mov	r2, r6
   1b3b8:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b3bc:	mov	r7, r0
   1b3c0:	cmp	r7, r6
   1b3c4:	mov	r4, r6
   1b3c8:	beq	1b400 <flatcc_json_parser_union_vector@@Base+0x214>
   1b3cc:	ldrb	r0, [r7]
   1b3d0:	cmp	r0, #93	; 0x5d
   1b3d4:	bne	1b3fc <flatcc_json_parser_union_vector@@Base+0x210>
   1b3d8:	add	r1, r7, #1
   1b3dc:	sub	r0, r6, r1
   1b3e0:	cmp	r0, #2
   1b3e4:	blt	1b560 <flatcc_json_parser_union_vector@@Base+0x374>
   1b3e8:	ldrb	r0, [r1]
   1b3ec:	cmp	r0, #32
   1b3f0:	bls	1b54c <flatcc_json_parser_union_vector@@Base+0x360>
   1b3f4:	mov	r9, r1
   1b3f8:	b	1b570 <flatcc_json_parser_union_vector@@Base+0x384>
   1b3fc:	mov	r4, r7
   1b400:	cmp	sl, #0
   1b404:	beq	1b52c <flatcc_json_parser_union_vector@@Base+0x340>
   1b408:	add	r0, r6, #1
   1b40c:	mov	sl, #0
   1b410:	add	r9, sp, #8
   1b414:	str	r0, [sp, #4]
   1b418:	ldr	r0, [r5]
   1b41c:	mov	r1, r8
   1b420:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1b424:	ldrb	r3, [r0, -sl]
   1b428:	ldr	r7, [fp, #16]
   1b42c:	mov	r0, r5
   1b430:	mov	r1, r4
   1b434:	mov	r2, r6
   1b438:	str	r9, [sp]
   1b43c:	blx	r7
   1b440:	cmp	r0, r6
   1b444:	beq	1b5a0 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1b448:	mov	r7, r0
   1b44c:	ldr	r0, [r5]
   1b450:	mov	r1, #1
   1b454:	bl	15020 <flatcc_builder_extend_offset_vector@@Base>
   1b458:	cmp	r0, #0
   1b45c:	beq	1b310 <flatcc_json_parser_union_vector@@Base+0x124>
   1b460:	ldr	r1, [sp, #8]
   1b464:	str	r1, [r0]
   1b468:	sub	r0, r6, r7
   1b46c:	cmp	r0, #2
   1b470:	blt	1b49c <flatcc_json_parser_union_vector@@Base+0x2b0>
   1b474:	ldrb	r0, [r7]
   1b478:	cmp	r0, #32
   1b47c:	bls	1b488 <flatcc_json_parser_union_vector@@Base+0x29c>
   1b480:	mov	r4, r7
   1b484:	b	1b4b0 <flatcc_json_parser_union_vector@@Base+0x2c4>
   1b488:	bne	1b49c <flatcc_json_parser_union_vector@@Base+0x2b0>
   1b48c:	mov	r4, r7
   1b490:	ldrb	r0, [r4, #1]!
   1b494:	cmp	r0, #32
   1b498:	bhi	1b4b0 <flatcc_json_parser_union_vector@@Base+0x2c4>
   1b49c:	mov	r0, r5
   1b4a0:	mov	r1, r7
   1b4a4:	mov	r2, r6
   1b4a8:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b4ac:	mov	r4, r0
   1b4b0:	cmp	r4, r6
   1b4b4:	beq	1b62c <flatcc_json_parser_union_vector@@Base+0x440>
   1b4b8:	ldrb	r0, [r4]
   1b4bc:	cmp	r0, #44	; 0x2c
   1b4c0:	bne	1b5ac <flatcc_json_parser_union_vector@@Base+0x3c0>
   1b4c4:	add	r1, r4, #1
   1b4c8:	sub	r0, r6, r1
   1b4cc:	cmp	r0, #2
   1b4d0:	blt	1b4f8 <flatcc_json_parser_union_vector@@Base+0x30c>
   1b4d4:	ldrb	r0, [r1]
   1b4d8:	cmp	r0, #32
   1b4dc:	bls	1b4e8 <flatcc_json_parser_union_vector@@Base+0x2fc>
   1b4e0:	mov	r4, r1
   1b4e4:	b	1b508 <flatcc_json_parser_union_vector@@Base+0x31c>
   1b4e8:	bne	1b4f8 <flatcc_json_parser_union_vector@@Base+0x30c>
   1b4ec:	ldrb	r0, [r4, #2]!
   1b4f0:	cmp	r0, #32
   1b4f4:	bhi	1b508 <flatcc_json_parser_union_vector@@Base+0x31c>
   1b4f8:	mov	r0, r5
   1b4fc:	mov	r2, r6
   1b500:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b504:	mov	r4, r0
   1b508:	cmp	r4, r6
   1b50c:	beq	1b5d8 <flatcc_json_parser_union_vector@@Base+0x3ec>
   1b510:	ldrb	r0, [r4]
   1b514:	cmp	r0, #93	; 0x5d
   1b518:	beq	1b5b4 <flatcc_json_parser_union_vector@@Base+0x3c8>
   1b51c:	ldr	r0, [fp, #8]
   1b520:	sub	sl, sl, #1
   1b524:	adds	r0, r0, sl
   1b528:	bne	1b418 <flatcc_json_parser_union_vector@@Base+0x22c>
   1b52c:	ldr	r0, [r5, #24]
   1b530:	cmp	r0, #0
   1b534:	bne	1b5a0 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1b538:	str	r4, [r5, #36]	; 0x24
   1b53c:	mov	r0, #30
   1b540:	ldr	r1, [r5, #4]
   1b544:	sub	r1, r4, r1
   1b548:	b	1b594 <flatcc_json_parser_union_vector@@Base+0x3a8>
   1b54c:	bne	1b560 <flatcc_json_parser_union_vector@@Base+0x374>
   1b550:	ldrb	r0, [r7, #2]!
   1b554:	mov	r9, r7
   1b558:	cmp	r0, #32
   1b55c:	bhi	1b570 <flatcc_json_parser_union_vector@@Base+0x384>
   1b560:	mov	r0, r5
   1b564:	mov	r2, r6
   1b568:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b56c:	mov	r9, r0
   1b570:	cmp	sl, #0
   1b574:	beq	1b668 <flatcc_json_parser_union_vector@@Base+0x47c>
   1b578:	ldr	r0, [r5, #24]
   1b57c:	cmp	r0, #0
   1b580:	bne	1b5a0 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1b584:	str	r9, [r5, #36]	; 0x24
   1b588:	mov	r0, #30
   1b58c:	ldr	r1, [r5, #4]
   1b590:	sub	r1, r9, r1
   1b594:	add	r1, r1, #1
   1b598:	str	r1, [r5, #20]
   1b59c:	str	r0, [r5, #24]
   1b5a0:	mov	r0, r6
   1b5a4:	sub	sp, fp, #28
   1b5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5ac:	cmp	r0, #93	; 0x5d
   1b5b0:	bne	1b600 <flatcc_json_parser_union_vector@@Base+0x414>
   1b5b4:	add	r1, r4, #1
   1b5b8:	sub	r0, r6, r1
   1b5bc:	cmp	r0, #2
   1b5c0:	blt	1b648 <flatcc_json_parser_union_vector@@Base+0x45c>
   1b5c4:	ldrb	r0, [r1]
   1b5c8:	cmp	r0, #32
   1b5cc:	bls	1b634 <flatcc_json_parser_union_vector@@Base+0x448>
   1b5d0:	mov	r9, r1
   1b5d4:	b	1b658 <flatcc_json_parser_union_vector@@Base+0x46c>
   1b5d8:	ldr	r0, [r5, #24]
   1b5dc:	mov	r9, r6
   1b5e0:	cmp	r0, #0
   1b5e4:	bne	1b658 <flatcc_json_parser_union_vector@@Base+0x46c>
   1b5e8:	str	r6, [r5, #36]	; 0x24
   1b5ec:	ldr	r2, [sp, #4]
   1b5f0:	mov	r0, #9
   1b5f4:	ldr	r1, [r5, #4]
   1b5f8:	sub	r1, r2, r1
   1b5fc:	b	1b624 <flatcc_json_parser_union_vector@@Base+0x438>
   1b600:	ldr	r0, [r5, #24]
   1b604:	mov	r9, r6
   1b608:	cmp	r0, #0
   1b60c:	bne	1b658 <flatcc_json_parser_union_vector@@Base+0x46c>
   1b610:	str	r4, [r5, #36]	; 0x24
   1b614:	mov	r0, #9
   1b618:	ldr	r1, [r5, #4]
   1b61c:	sub	r1, r4, r1
   1b620:	add	r1, r1, #1
   1b624:	str	r1, [r5, #20]
   1b628:	str	r0, [r5, #24]
   1b62c:	mov	r9, r6
   1b630:	b	1b658 <flatcc_json_parser_union_vector@@Base+0x46c>
   1b634:	bne	1b648 <flatcc_json_parser_union_vector@@Base+0x45c>
   1b638:	ldrb	r0, [r4, #2]!
   1b63c:	mov	r9, r4
   1b640:	cmp	r0, #32
   1b644:	bhi	1b658 <flatcc_json_parser_union_vector@@Base+0x46c>
   1b648:	mov	r0, r5
   1b64c:	mov	r2, r6
   1b650:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b654:	mov	r9, r0
   1b658:	ldr	r0, [fp, #8]
   1b65c:	add	r0, r0, sl
   1b660:	cmp	r0, #1
   1b664:	bne	1b578 <flatcc_json_parser_union_vector@@Base+0x38c>
   1b668:	ldr	r0, [r5]
   1b66c:	mov	r1, r8
   1b670:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1b674:	mov	r1, r0
   1b678:	ldr	r0, [r5]
   1b67c:	bl	168d8 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1b680:	cmp	r0, #0
   1b684:	str	r0, [sp, #8]
   1b688:	beq	1b6b0 <flatcc_json_parser_union_vector@@Base+0x4c4>
   1b68c:	ldr	r1, [fp, #12]
   1b690:	ldr	r0, [r5]
   1b694:	bl	16aac <flatcc_builder_table_add_offset@@Base>
   1b698:	cmp	r0, #0
   1b69c:	beq	1b6b0 <flatcc_json_parser_union_vector@@Base+0x4c4>
   1b6a0:	ldr	r1, [sp, #8]
   1b6a4:	mov	r6, r9
   1b6a8:	str	r1, [r0]
   1b6ac:	b	1b5a0 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1b6b0:	mov	r7, r9
   1b6b4:	b	1b310 <flatcc_json_parser_union_vector@@Base+0x124>

0001b6b8 <flatcc_json_parser_union_type_vector@@Base>:
   1b6b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6bc:	add	fp, sp, #28
   1b6c0:	sub	sp, sp, #44	; 0x2c
   1b6c4:	mov	r7, r1
   1b6c8:	mov	r5, r0
   1b6cc:	ldr	r0, [r0]
   1b6d0:	ldr	r1, [fp, #12]
   1b6d4:	mov	r4, r3
   1b6d8:	mov	r6, r2
   1b6dc:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1b6e0:	add	sl, r4, r4, lsl #1
   1b6e4:	add	r0, r0, #8
   1b6e8:	add	r9, r0, sl, lsl #3
   1b6ec:	mov	r0, r9
   1b6f0:	ldrb	r1, [r0, #12]!
   1b6f4:	cmp	r1, #0
   1b6f8:	beq	1b71c <flatcc_json_parser_union_type_vector@@Base+0x64>
   1b6fc:	ldr	r0, [r5, #24]
   1b700:	cmp	r0, #0
   1b704:	bne	1bbc4 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1b708:	mov	r0, #28
   1b70c:	str	r7, [r5, #36]	; 0x24
   1b710:	ldr	r1, [r5, #4]
   1b714:	sub	r1, r7, r1
   1b718:	b	1bbb8 <flatcc_json_parser_union_type_vector@@Base+0x500>
   1b71c:	mov	r1, #1
   1b720:	mov	r2, #1
   1b724:	mvn	r3, #0
   1b728:	strb	r1, [r0]
   1b72c:	mov	r1, #1
   1b730:	ldr	r0, [r5]
   1b734:	bl	155c0 <flatcc_builder_start_vector@@Base>
   1b738:	cmp	r0, #0
   1b73c:	beq	1b748 <flatcc_json_parser_union_type_vector@@Base+0x90>
   1b740:	mov	r4, r7
   1b744:	b	1bb9c <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1b748:	cmp	r7, r6
   1b74c:	beq	1b780 <flatcc_json_parser_union_type_vector@@Base+0xc8>
   1b750:	ldrb	r0, [r7]
   1b754:	cmp	r0, #91	; 0x5b
   1b758:	bne	1b780 <flatcc_json_parser_union_type_vector@@Base+0xc8>
   1b75c:	add	r1, r7, #1
   1b760:	sub	r0, r6, r1
   1b764:	cmp	r0, #2
   1b768:	blt	1b7c4 <flatcc_json_parser_union_type_vector@@Base+0x10c>
   1b76c:	ldrb	r0, [r1]
   1b770:	cmp	r0, #32
   1b774:	bls	1b7b4 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   1b778:	mov	r7, r1
   1b77c:	b	1b7d4 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   1b780:	ldr	r0, [r5, #24]
   1b784:	mov	r8, r6
   1b788:	cmp	r0, #0
   1b78c:	bne	1ba98 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1b790:	str	r7, [r5, #36]	; 0x24
   1b794:	mov	r0, #22
   1b798:	ldr	r1, [r5, #4]
   1b79c:	sub	r1, r7, r1
   1b7a0:	add	r1, r1, #1
   1b7a4:	str	r1, [r5, #20]
   1b7a8:	str	r0, [r5, #24]
   1b7ac:	mov	r8, r6
   1b7b0:	b	1ba98 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1b7b4:	bne	1b7c4 <flatcc_json_parser_union_type_vector@@Base+0x10c>
   1b7b8:	ldrb	r0, [r7, #2]!
   1b7bc:	cmp	r0, #32
   1b7c0:	bhi	1b7d4 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   1b7c4:	mov	r0, r5
   1b7c8:	mov	r2, r6
   1b7cc:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b7d0:	mov	r7, r0
   1b7d4:	cmp	r7, r6
   1b7d8:	mov	r4, r6
   1b7dc:	beq	1b814 <flatcc_json_parser_union_type_vector@@Base+0x15c>
   1b7e0:	ldrb	r0, [r7]
   1b7e4:	cmp	r0, #93	; 0x5d
   1b7e8:	bne	1b810 <flatcc_json_parser_union_type_vector@@Base+0x158>
   1b7ec:	add	r1, r7, #1
   1b7f0:	sub	r0, r6, r1
   1b7f4:	cmp	r0, #2
   1b7f8:	blt	1ba88 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1b7fc:	ldrb	r0, [r1]
   1b800:	cmp	r0, #32
   1b804:	bls	1ba3c <flatcc_json_parser_union_type_vector@@Base+0x384>
   1b808:	mov	r8, r1
   1b80c:	b	1ba98 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1b810:	mov	r4, r7
   1b814:	ldr	r0, [r5]
   1b818:	mov	r1, #1
   1b81c:	bl	14dc8 <flatcc_builder_extend_vector@@Base>
   1b820:	cmp	r0, #0
   1b824:	beq	1bb9c <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1b828:	mov	r1, r0
   1b82c:	add	r0, r6, #1
   1b830:	str	r0, [sp, #16]
   1b834:	mov	r8, #0
   1b838:	cmp	r4, r6
   1b83c:	str	r1, [sp, #20]
   1b840:	str	r8, [sp, #36]	; 0x24
   1b844:	str	r8, [sp, #32]
   1b848:	strb	r8, [sp, #27]
   1b84c:	str	r8, [sp, #28]
   1b850:	beq	1b8f4 <flatcc_json_parser_union_type_vector@@Base+0x23c>
   1b854:	add	r0, sp, #32
   1b858:	mov	r1, r4
   1b85c:	mov	r2, r6
   1b860:	add	r3, sp, #28
   1b864:	str	r0, [sp]
   1b868:	mov	r0, r5
   1b86c:	bl	1a40c <flatcc_json_parser_integer@@Base>
   1b870:	cmp	r0, r4
   1b874:	beq	1b8b0 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   1b878:	mov	r7, r0
   1b87c:	ldr	r0, [sp, #28]
   1b880:	cmp	r0, #0
   1b884:	beq	1b8b8 <flatcc_json_parser_union_type_vector@@Base+0x200>
   1b888:	ldr	r0, [r5, #24]
   1b88c:	cmp	r0, #0
   1b890:	bne	1b8f4 <flatcc_json_parser_union_type_vector@@Base+0x23c>
   1b894:	str	r7, [r5, #36]	; 0x24
   1b898:	ldr	r0, [r5, #4]
   1b89c:	sub	r0, r7, r0
   1b8a0:	add	r0, r0, #1
   1b8a4:	str	r0, [r5, #20]
   1b8a8:	mov	r0, #8
   1b8ac:	b	1b8f0 <flatcc_json_parser_union_type_vector@@Base+0x238>
   1b8b0:	mov	r7, r4
   1b8b4:	b	1b8f8 <flatcc_json_parser_union_type_vector@@Base+0x240>
   1b8b8:	ldr	r0, [sp, #32]
   1b8bc:	ldr	r1, [sp, #36]	; 0x24
   1b8c0:	subs	r2, r0, #256	; 0x100
   1b8c4:	sbcs	r1, r1, #0
   1b8c8:	bcc	1ba30 <flatcc_json_parser_union_type_vector@@Base+0x378>
   1b8cc:	ldr	r0, [r5, #24]
   1b8d0:	cmp	r0, #0
   1b8d4:	bne	1b8f4 <flatcc_json_parser_union_type_vector@@Base+0x23c>
   1b8d8:	str	r7, [r5, #36]	; 0x24
   1b8dc:	ldr	r0, [r5, #4]
   1b8e0:	sub	r0, r7, r0
   1b8e4:	add	r0, r0, #1
   1b8e8:	str	r0, [r5, #20]
   1b8ec:	mov	r0, #7
   1b8f0:	str	r0, [r5, #24]
   1b8f4:	mov	r7, r6
   1b8f8:	cmp	r4, r7
   1b8fc:	bne	1b930 <flatcc_json_parser_union_type_vector@@Base+0x278>
   1b900:	ldr	r3, [fp, #16]
   1b904:	add	r0, sp, #27
   1b908:	mov	r1, r4
   1b90c:	mov	r2, r6
   1b910:	str	r0, [sp]
   1b914:	mov	r0, r5
   1b918:	bl	1afa4 <flatcc_json_parser_union_type@@Base+0x260>
   1b91c:	mov	r7, r0
   1b920:	cmp	r0, r4
   1b924:	cmpne	r7, r6
   1b928:	beq	1b740 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1b92c:	ldrb	r8, [sp, #27]
   1b930:	ldr	r1, [fp, #24]
   1b934:	uxtb	r0, r8
   1b938:	blx	r1
   1b93c:	cmp	r0, #0
   1b940:	bne	1b958 <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   1b944:	ldrb	r0, [r5, #8]
   1b948:	tst	r0, #1
   1b94c:	beq	1bc2c <flatcc_json_parser_union_type_vector@@Base+0x574>
   1b950:	mov	r8, #0
   1b954:	strb	r8, [sp, #27]
   1b958:	ldr	r0, [sp, #20]
   1b95c:	strb	r8, [r0]
   1b960:	sub	r0, r6, r7
   1b964:	cmp	r0, #2
   1b968:	blt	1b994 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   1b96c:	ldrb	r0, [r7]
   1b970:	cmp	r0, #32
   1b974:	bls	1b980 <flatcc_json_parser_union_type_vector@@Base+0x2c8>
   1b978:	mov	r4, r7
   1b97c:	b	1b9a8 <flatcc_json_parser_union_type_vector@@Base+0x2f0>
   1b980:	bne	1b994 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   1b984:	mov	r4, r7
   1b988:	ldrb	r0, [r4, #1]!
   1b98c:	cmp	r0, #32
   1b990:	bhi	1b9a8 <flatcc_json_parser_union_type_vector@@Base+0x2f0>
   1b994:	mov	r0, r5
   1b998:	mov	r1, r7
   1b99c:	mov	r2, r6
   1b9a0:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b9a4:	mov	r4, r0
   1b9a8:	cmp	r4, r6
   1b9ac:	beq	1b7ac <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1b9b0:	ldrb	r0, [r4]
   1b9b4:	cmp	r0, #44	; 0x2c
   1b9b8:	bne	1ba54 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1b9bc:	add	r1, r4, #1
   1b9c0:	sub	r0, r6, r1
   1b9c4:	cmp	r0, #2
   1b9c8:	blt	1b9f0 <flatcc_json_parser_union_type_vector@@Base+0x338>
   1b9cc:	ldrb	r0, [r1]
   1b9d0:	cmp	r0, #32
   1b9d4:	bls	1b9e0 <flatcc_json_parser_union_type_vector@@Base+0x328>
   1b9d8:	mov	r4, r1
   1b9dc:	b	1ba00 <flatcc_json_parser_union_type_vector@@Base+0x348>
   1b9e0:	bne	1b9f0 <flatcc_json_parser_union_type_vector@@Base+0x338>
   1b9e4:	ldrb	r0, [r4, #2]!
   1b9e8:	cmp	r0, #32
   1b9ec:	bhi	1ba00 <flatcc_json_parser_union_type_vector@@Base+0x348>
   1b9f0:	mov	r0, r5
   1b9f4:	mov	r2, r6
   1b9f8:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1b9fc:	mov	r4, r0
   1ba00:	cmp	r4, r6
   1ba04:	beq	1bbe0 <flatcc_json_parser_union_type_vector@@Base+0x528>
   1ba08:	ldrb	r0, [r4]
   1ba0c:	cmp	r0, #93	; 0x5d
   1ba10:	beq	1ba5c <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   1ba14:	ldr	r0, [r5]
   1ba18:	mov	r1, #1
   1ba1c:	bl	14dc8 <flatcc_builder_extend_vector@@Base>
   1ba20:	mov	r1, r0
   1ba24:	cmp	r0, #0
   1ba28:	bne	1b834 <flatcc_json_parser_union_type_vector@@Base+0x17c>
   1ba2c:	b	1bb9c <flatcc_json_parser_union_type_vector@@Base+0x4e4>
   1ba30:	mov	r8, r0
   1ba34:	strb	r0, [sp, #27]
   1ba38:	b	1b8f8 <flatcc_json_parser_union_type_vector@@Base+0x240>
   1ba3c:	bne	1ba88 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1ba40:	ldrb	r0, [r7, #2]!
   1ba44:	mov	r8, r7
   1ba48:	cmp	r0, #32
   1ba4c:	bhi	1ba98 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1ba50:	b	1ba88 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1ba54:	cmp	r0, #93	; 0x5d
   1ba58:	bne	1bc08 <flatcc_json_parser_union_type_vector@@Base+0x550>
   1ba5c:	add	r1, r4, #1
   1ba60:	sub	r0, r6, r1
   1ba64:	cmp	r0, #2
   1ba68:	blt	1ba88 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1ba6c:	ldrb	r0, [r1]
   1ba70:	cmp	r0, #32
   1ba74:	bhi	1b808 <flatcc_json_parser_union_type_vector@@Base+0x150>
   1ba78:	bne	1ba88 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1ba7c:	ldrb	r0, [r4, #2]!
   1ba80:	mov	r8, r4
   1ba84:	b	1ba48 <flatcc_json_parser_union_type_vector@@Base+0x390>
   1ba88:	mov	r0, r5
   1ba8c:	mov	r2, r6
   1ba90:	bl	185c4 <flatcc_json_parser_space_ext@@Base>
   1ba94:	mov	r8, r0
   1ba98:	ldr	r0, [r5]
   1ba9c:	bl	166dc <flatcc_builder_vector_count@@Base>
   1baa0:	str	r0, [r9, #16]
   1baa4:	mov	r4, r0
   1baa8:	ldr	r0, [r5]
   1baac:	mov	r1, r4
   1bab0:	bl	14234 <flatcc_builder_enter_user_frame@@Base>
   1bab4:	mov	r9, r0
   1bab8:	ldr	r0, [r5]
   1babc:	mov	r1, r9
   1bac0:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1bac4:	mov	r7, r0
   1bac8:	ldr	r0, [r5]
   1bacc:	bl	166e8 <flatcc_builder_vector_edit@@Base>
   1bad0:	mov	r1, r0
   1bad4:	mov	r0, r7
   1bad8:	mov	r2, r4
   1badc:	bl	12900 <memcpy@plt>
   1bae0:	ldr	r0, [r5]
   1bae4:	bl	165ec <flatcc_builder_end_vector@@Base>
   1bae8:	cmp	r0, #0
   1baec:	beq	1bb98 <flatcc_json_parser_union_type_vector@@Base+0x4e0>
   1baf0:	ldr	r1, [fp, #8]
   1baf4:	mov	r7, r0
   1baf8:	ldr	r0, [r5]
   1bafc:	sub	r1, r1, #1
   1bb00:	bl	16aac <flatcc_builder_table_add_offset@@Base>
   1bb04:	cmp	r0, #0
   1bb08:	beq	1bb98 <flatcc_json_parser_union_type_vector@@Base+0x4e0>
   1bb0c:	str	r7, [r0]
   1bb10:	ldr	r1, [fp, #12]
   1bb14:	ldr	r0, [r5]
   1bb18:	bl	14388 <flatcc_builder_get_user_frame_ptr@@Base>
   1bb1c:	add	r2, r0, #8
   1bb20:	mov	r3, r2
   1bb24:	ldr	r1, [r3, sl, lsl #3]!
   1bb28:	str	r9, [r3, #20]
   1bb2c:	ldr	r3, [r0, #4]
   1bb30:	cmp	r1, #0
   1bb34:	beq	1bbd0 <flatcc_json_parser_union_type_vector@@Base+0x518>
   1bb38:	cmp	r3, #0
   1bb3c:	beq	1bc40 <flatcc_json_parser_union_type_vector@@Base+0x588>
   1bb40:	sub	r3, r3, #1
   1bb44:	ldr	ip, [fp, #20]
   1bb48:	str	r3, [r0, #4]
   1bb4c:	add	r0, r2, sl, lsl #3
   1bb50:	mov	r3, r9
   1bb54:	ldr	sl, [r5, #4]
   1bb58:	ldr	r7, [r5, #16]
   1bb5c:	ldr	r2, [r0, #8]
   1bb60:	str	r2, [r5, #16]
   1bb64:	mov	r2, r6
   1bb68:	ldr	r0, [r0, #4]
   1bb6c:	str	r0, [r5, #4]
   1bb70:	ldr	r0, [fp, #8]
   1bb74:	str	r4, [sp]
   1bb78:	stmib	sp, {r0, ip}
   1bb7c:	mov	r0, r5
   1bb80:	bl	1b2dc <flatcc_json_parser_union_vector@@Base+0xf0>
   1bb84:	cmp	r0, r6
   1bb88:	beq	1bbc4 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bb8c:	str	sl, [r5, #4]
   1bb90:	str	r7, [r5, #16]
   1bb94:	b	1bbd8 <flatcc_json_parser_union_type_vector@@Base+0x520>
   1bb98:	mov	r4, r8
   1bb9c:	ldr	r0, [r5, #24]
   1bba0:	cmp	r0, #0
   1bba4:	bne	1bbc4 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bba8:	str	r4, [r5, #36]	; 0x24
   1bbac:	mov	r0, #33	; 0x21
   1bbb0:	ldr	r1, [r5, #4]
   1bbb4:	sub	r1, r4, r1
   1bbb8:	add	r1, r1, #1
   1bbbc:	str	r1, [r5, #20]
   1bbc0:	str	r0, [r5, #24]
   1bbc4:	mov	r0, r6
   1bbc8:	sub	sp, fp, #28
   1bbcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbd0:	add	r1, r3, #1
   1bbd4:	str	r1, [r0, #4]
   1bbd8:	mov	r6, r8
   1bbdc:	b	1bbc4 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bbe0:	ldr	r0, [r5, #24]
   1bbe4:	mov	r8, r6
   1bbe8:	cmp	r0, #0
   1bbec:	bne	1ba98 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1bbf0:	str	r6, [r5, #36]	; 0x24
   1bbf4:	ldr	r2, [sp, #16]
   1bbf8:	mov	r0, #9
   1bbfc:	ldr	r1, [r5, #4]
   1bc00:	sub	r1, r2, r1
   1bc04:	b	1b7a4 <flatcc_json_parser_union_type_vector@@Base+0xec>
   1bc08:	ldr	r0, [r5, #24]
   1bc0c:	mov	r8, r6
   1bc10:	cmp	r0, #0
   1bc14:	bne	1ba98 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1bc18:	str	r4, [r5, #36]	; 0x24
   1bc1c:	mov	r0, #9
   1bc20:	ldr	r1, [r5, #4]
   1bc24:	sub	r1, r4, r1
   1bc28:	b	1b7a0 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   1bc2c:	ldr	r0, [r5, #24]
   1bc30:	cmp	r0, #0
   1bc34:	bne	1bbc4 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1bc38:	mov	r0, #15
   1bc3c:	b	1b70c <flatcc_json_parser_union_type_vector@@Base+0x54>
   1bc40:	movw	r0, #58637	; 0xe50d
   1bc44:	movw	r1, #58652	; 0xe51c
   1bc48:	movw	r3, #58930	; 0xe632
   1bc4c:	movw	r2, #1122	; 0x462
   1bc50:	movt	r0, #1
   1bc54:	movt	r1, #1
   1bc58:	movt	r3, #1
   1bc5c:	bl	129c0 <__assert_fail@plt>

0001bc60 <flatcc_json_parser_table_as_root@@Base>:
   1bc60:	push	{r4, r5, r6, r7, fp, lr}
   1bc64:	add	fp, sp, #16
   1bc68:	sub	sp, sp, #48	; 0x30
   1bc6c:	cmp	r1, #0
   1bc70:	vmov.i32	q8, #0	; 0x00000000
   1bc74:	add	r5, sp, #4
   1bc78:	mov	r6, r0
   1bc7c:	add	r7, r2, r3
   1bc80:	mov	r4, r2
   1bc84:	movne	r5, r1
   1bc88:	mov	r1, #1
   1bc8c:	add	r0, r5, #12
   1bc90:	vst1.32	{d16-d17}, [r0]
   1bc94:	add	r0, r5, #28
   1bc98:	vst1.32	{d16-d17}, [r0]
   1bc9c:	ldr	r0, [fp, #8]
   1bca0:	str	r2, [r5, #4]
   1bca4:	str	r6, [r5]
   1bca8:	str	r0, [r5, #8]
   1bcac:	str	r1, [r5, #16]
   1bcb0:	mov	r1, #2
   1bcb4:	str	r2, [r5, #28]
   1bcb8:	str	r7, [r5, #32]
   1bcbc:	str	r2, [r5, #36]	; 0x24
   1bcc0:	mov	r2, #0
   1bcc4:	and	r3, r1, r0, lsr #1
   1bcc8:	ldr	r1, [fp, #12]
   1bccc:	mov	r0, r6
   1bcd0:	bl	14930 <flatcc_builder_start_buffer@@Base>
   1bcd4:	mov	r1, r0
   1bcd8:	mvn	r0, #0
   1bcdc:	cmp	r1, #0
   1bce0:	bne	1bd24 <flatcc_json_parser_table_as_root@@Base+0xc4>
   1bce4:	ldr	ip, [fp, #16]
   1bce8:	mov	r3, sp
   1bcec:	mov	r0, r5
   1bcf0:	mov	r1, r4
   1bcf4:	mov	r2, r7
   1bcf8:	blx	ip
   1bcfc:	ldr	r0, [r5, #24]
   1bd00:	cmp	r0, #0
   1bd04:	bne	1bd24 <flatcc_json_parser_table_as_root@@Base+0xc4>
   1bd08:	ldr	r1, [sp]
   1bd0c:	mov	r0, r6
   1bd10:	bl	14b20 <flatcc_builder_end_buffer@@Base>
   1bd14:	cmp	r0, #0
   1bd18:	mvn	r0, #0
   1bd1c:	movne	r0, #0
   1bd20:	strne	r4, [r5, #40]	; 0x28
   1bd24:	sub	sp, fp, #16
   1bd28:	pop	{r4, r5, r6, r7, fp, pc}

0001bd2c <flatcc_json_parser_struct_as_root@@Base>:
   1bd2c:	push	{r4, r5, r6, r7, fp, lr}
   1bd30:	add	fp, sp, #16
   1bd34:	sub	sp, sp, #48	; 0x30
   1bd38:	cmp	r1, #0
   1bd3c:	vmov.i32	q8, #0	; 0x00000000
   1bd40:	add	r5, sp, #4
   1bd44:	mov	r6, r0
   1bd48:	add	r7, r2, r3
   1bd4c:	mov	r4, r2
   1bd50:	movne	r5, r1
   1bd54:	mov	r1, #1
   1bd58:	add	r0, r5, #12
   1bd5c:	vst1.32	{d16-d17}, [r0]
   1bd60:	add	r0, r5, #28
   1bd64:	vst1.32	{d16-d17}, [r0]
   1bd68:	ldr	r0, [fp, #8]
   1bd6c:	str	r2, [r5, #4]
   1bd70:	str	r6, [r5]
   1bd74:	str	r0, [r5, #8]
   1bd78:	str	r1, [r5, #16]
   1bd7c:	mov	r1, #2
   1bd80:	str	r2, [r5, #28]
   1bd84:	str	r7, [r5, #32]
   1bd88:	str	r2, [r5, #36]	; 0x24
   1bd8c:	mov	r2, #0
   1bd90:	and	r3, r1, r0, lsr #1
   1bd94:	ldr	r1, [fp, #12]
   1bd98:	mov	r0, r6
   1bd9c:	bl	14930 <flatcc_builder_start_buffer@@Base>
   1bda0:	mov	r1, r0
   1bda4:	mvn	r0, #0
   1bda8:	cmp	r1, #0
   1bdac:	bne	1bdf0 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1bdb0:	ldr	ip, [fp, #16]
   1bdb4:	mov	r3, sp
   1bdb8:	mov	r0, r5
   1bdbc:	mov	r1, r4
   1bdc0:	mov	r2, r7
   1bdc4:	blx	ip
   1bdc8:	ldr	r0, [r5, #24]
   1bdcc:	cmp	r0, #0
   1bdd0:	bne	1bdf0 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1bdd4:	ldr	r1, [sp]
   1bdd8:	mov	r0, r6
   1bddc:	bl	14b20 <flatcc_builder_end_buffer@@Base>
   1bde0:	cmp	r0, #0
   1bde4:	mvn	r0, #0
   1bde8:	movne	r0, #0
   1bdec:	strne	r4, [r5, #40]	; 0x28
   1bdf0:	sub	sp, fp, #16
   1bdf4:	pop	{r4, r5, r6, r7, fp, pc}
   1bdf8:	eor	r1, r1, #-2147483648	; 0x80000000
   1bdfc:	b	1be04 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   1be00:	eor	r3, r3, #-2147483648	; 0x80000000
   1be04:	push	{r4, r5, lr}
   1be08:	lsl	r4, r1, #1
   1be0c:	lsl	r5, r3, #1
   1be10:	teq	r4, r5
   1be14:	teqeq	r0, r2
   1be18:	orrsne	ip, r4, r0
   1be1c:	orrsne	ip, r5, r2
   1be20:	mvnsne	ip, r4, asr #21
   1be24:	mvnsne	ip, r5, asr #21
   1be28:	beq	1c014 <flatcc_json_parser_struct_as_root@@Base+0x2e8>
   1be2c:	lsr	r4, r4, #21
   1be30:	rsbs	r5, r4, r5, lsr #21
   1be34:	rsblt	r5, r5, #0
   1be38:	ble	1be58 <flatcc_json_parser_struct_as_root@@Base+0x12c>
   1be3c:	add	r4, r4, r5
   1be40:	eor	r2, r0, r2
   1be44:	eor	r3, r1, r3
   1be48:	eor	r0, r2, r0
   1be4c:	eor	r1, r3, r1
   1be50:	eor	r2, r0, r2
   1be54:	eor	r3, r1, r3
   1be58:	cmp	r5, #54	; 0x36
   1be5c:	pophi	{r4, r5, pc}
   1be60:	tst	r1, #-2147483648	; 0x80000000
   1be64:	lsl	r1, r1, #12
   1be68:	mov	ip, #1048576	; 0x100000
   1be6c:	orr	r1, ip, r1, lsr #12
   1be70:	beq	1be7c <flatcc_json_parser_struct_as_root@@Base+0x150>
   1be74:	rsbs	r0, r0, #0
   1be78:	rsc	r1, r1, #0
   1be7c:	tst	r3, #-2147483648	; 0x80000000
   1be80:	lsl	r3, r3, #12
   1be84:	orr	r3, ip, r3, lsr #12
   1be88:	beq	1be94 <flatcc_json_parser_struct_as_root@@Base+0x168>
   1be8c:	rsbs	r2, r2, #0
   1be90:	rsc	r3, r3, #0
   1be94:	teq	r4, r5
   1be98:	beq	1bffc <flatcc_json_parser_struct_as_root@@Base+0x2d0>
   1be9c:	sub	r4, r4, #1
   1bea0:	rsbs	lr, r5, #32
   1bea4:	blt	1bec0 <flatcc_json_parser_struct_as_root@@Base+0x194>
   1bea8:	lsl	ip, r2, lr
   1beac:	adds	r0, r0, r2, lsr r5
   1beb0:	adc	r1, r1, #0
   1beb4:	adds	r0, r0, r3, lsl lr
   1beb8:	adcs	r1, r1, r3, asr r5
   1bebc:	b	1bedc <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   1bec0:	sub	r5, r5, #32
   1bec4:	add	lr, lr, #32
   1bec8:	cmp	r2, #1
   1becc:	lsl	ip, r3, lr
   1bed0:	orrcs	ip, ip, #2
   1bed4:	adds	r0, r0, r3, asr r5
   1bed8:	adcs	r1, r1, r3, asr #31
   1bedc:	and	r5, r1, #-2147483648	; 0x80000000
   1bee0:	bpl	1bef0 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   1bee4:	rsbs	ip, ip, #0
   1bee8:	rscs	r0, r0, #0
   1beec:	rsc	r1, r1, #0
   1bef0:	cmp	r1, #1048576	; 0x100000
   1bef4:	bcc	1bf34 <flatcc_json_parser_struct_as_root@@Base+0x208>
   1bef8:	cmp	r1, #2097152	; 0x200000
   1befc:	bcc	1bf1c <flatcc_json_parser_struct_as_root@@Base+0x1f0>
   1bf00:	lsrs	r1, r1, #1
   1bf04:	rrxs	r0, r0
   1bf08:	rrx	ip, ip
   1bf0c:	add	r4, r4, #1
   1bf10:	lsl	r2, r4, #21
   1bf14:	cmn	r2, #4194304	; 0x400000
   1bf18:	bcs	1c074 <flatcc_json_parser_struct_as_root@@Base+0x348>
   1bf1c:	cmp	ip, #-2147483648	; 0x80000000
   1bf20:	lsrseq	ip, r0, #1
   1bf24:	adcs	r0, r0, #0
   1bf28:	adc	r1, r1, r4, lsl #20
   1bf2c:	orr	r1, r1, r5
   1bf30:	pop	{r4, r5, pc}
   1bf34:	lsls	ip, ip, #1
   1bf38:	adcs	r0, r0, r0
   1bf3c:	adc	r1, r1, r1
   1bf40:	tst	r1, #1048576	; 0x100000
   1bf44:	sub	r4, r4, #1
   1bf48:	bne	1bf1c <flatcc_json_parser_struct_as_root@@Base+0x1f0>
   1bf4c:	teq	r1, #0
   1bf50:	moveq	r1, r0
   1bf54:	moveq	r0, #0
   1bf58:	clz	r3, r1
   1bf5c:	addeq	r3, r3, #32
   1bf60:	sub	r3, r3, #11
   1bf64:	subs	r2, r3, #32
   1bf68:	bge	1bf8c <flatcc_json_parser_struct_as_root@@Base+0x260>
   1bf6c:	adds	r2, r2, #12
   1bf70:	ble	1bf88 <flatcc_json_parser_struct_as_root@@Base+0x25c>
   1bf74:	add	ip, r2, #20
   1bf78:	rsb	r2, r2, #12
   1bf7c:	lsl	r0, r1, ip
   1bf80:	lsr	r1, r1, r2
   1bf84:	b	1bf9c <flatcc_json_parser_struct_as_root@@Base+0x270>
   1bf88:	add	r2, r2, #20
   1bf8c:	rsble	ip, r2, #32
   1bf90:	lsl	r1, r1, r2
   1bf94:	orrle	r1, r1, r0, lsr ip
   1bf98:	lslle	r0, r0, r2
   1bf9c:	subs	r4, r4, r3
   1bfa0:	addge	r1, r1, r4, lsl #20
   1bfa4:	orrge	r1, r1, r5
   1bfa8:	popge	{r4, r5, pc}
   1bfac:	mvn	r4, r4
   1bfb0:	subs	r4, r4, #31
   1bfb4:	bge	1bff0 <flatcc_json_parser_struct_as_root@@Base+0x2c4>
   1bfb8:	adds	r4, r4, #12
   1bfbc:	bgt	1bfd8 <flatcc_json_parser_struct_as_root@@Base+0x2ac>
   1bfc0:	add	r4, r4, #20
   1bfc4:	rsb	r2, r4, #32
   1bfc8:	lsr	r0, r0, r4
   1bfcc:	orr	r0, r0, r1, lsl r2
   1bfd0:	orr	r1, r5, r1, lsr r4
   1bfd4:	pop	{r4, r5, pc}
   1bfd8:	rsb	r4, r4, #12
   1bfdc:	rsb	r2, r4, #32
   1bfe0:	lsr	r0, r0, r2
   1bfe4:	orr	r0, r0, r1, lsl r4
   1bfe8:	mov	r1, r5
   1bfec:	pop	{r4, r5, pc}
   1bff0:	lsr	r0, r1, r4
   1bff4:	mov	r1, r5
   1bff8:	pop	{r4, r5, pc}
   1bffc:	teq	r4, #0
   1c000:	eor	r3, r3, #1048576	; 0x100000
   1c004:	eoreq	r1, r1, #1048576	; 0x100000
   1c008:	addeq	r4, r4, #1
   1c00c:	subne	r5, r5, #1
   1c010:	b	1be9c <flatcc_json_parser_struct_as_root@@Base+0x170>
   1c014:	mvns	ip, r4, asr #21
   1c018:	mvnsne	ip, r5, asr #21
   1c01c:	beq	1c084 <flatcc_json_parser_struct_as_root@@Base+0x358>
   1c020:	teq	r4, r5
   1c024:	teqeq	r0, r2
   1c028:	beq	1c03c <flatcc_json_parser_struct_as_root@@Base+0x310>
   1c02c:	orrs	ip, r4, r0
   1c030:	moveq	r1, r3
   1c034:	moveq	r0, r2
   1c038:	pop	{r4, r5, pc}
   1c03c:	teq	r1, r3
   1c040:	movne	r1, #0
   1c044:	movne	r0, #0
   1c048:	popne	{r4, r5, pc}
   1c04c:	lsrs	ip, r4, #21
   1c050:	bne	1c064 <flatcc_json_parser_struct_as_root@@Base+0x338>
   1c054:	lsls	r0, r0, #1
   1c058:	adcs	r1, r1, r1
   1c05c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c060:	pop	{r4, r5, pc}
   1c064:	adds	r4, r4, #4194304	; 0x400000
   1c068:	addcc	r1, r1, #1048576	; 0x100000
   1c06c:	popcc	{r4, r5, pc}
   1c070:	and	r5, r1, #-2147483648	; 0x80000000
   1c074:	orr	r1, r5, #2130706432	; 0x7f000000
   1c078:	orr	r1, r1, #15728640	; 0xf00000
   1c07c:	mov	r0, #0
   1c080:	pop	{r4, r5, pc}
   1c084:	mvns	ip, r4, asr #21
   1c088:	movne	r1, r3
   1c08c:	movne	r0, r2
   1c090:	mvnseq	ip, r5, asr #21
   1c094:	movne	r3, r1
   1c098:	movne	r2, r0
   1c09c:	orrs	r4, r0, r1, lsl #12
   1c0a0:	orrseq	r5, r2, r3, lsl #12
   1c0a4:	teqeq	r1, r3
   1c0a8:	orrne	r1, r1, #524288	; 0x80000
   1c0ac:	pop	{r4, r5, pc}
   1c0b0:	teq	r0, #0
   1c0b4:	moveq	r1, #0
   1c0b8:	bxeq	lr
   1c0bc:	push	{r4, r5, lr}
   1c0c0:	mov	r4, #1024	; 0x400
   1c0c4:	add	r4, r4, #50	; 0x32
   1c0c8:	mov	r5, #0
   1c0cc:	mov	r1, #0
   1c0d0:	b	1bf4c <flatcc_json_parser_struct_as_root@@Base+0x220>
   1c0d4:	teq	r0, #0
   1c0d8:	moveq	r1, #0
   1c0dc:	bxeq	lr
   1c0e0:	push	{r4, r5, lr}
   1c0e4:	mov	r4, #1024	; 0x400
   1c0e8:	add	r4, r4, #50	; 0x32
   1c0ec:	ands	r5, r0, #-2147483648	; 0x80000000
   1c0f0:	rsbmi	r0, r0, #0
   1c0f4:	mov	r1, #0
   1c0f8:	b	1bf4c <flatcc_json_parser_struct_as_root@@Base+0x220>
   1c0fc:	lsls	r2, r0, #1
   1c100:	asr	r1, r2, #3
   1c104:	rrx	r1, r1
   1c108:	lsl	r0, r2, #28
   1c10c:	andsne	r3, r2, #-16777216	; 0xff000000
   1c110:	teqne	r3, #-16777216	; 0xff000000
   1c114:	eorne	r1, r1, #939524096	; 0x38000000
   1c118:	bxne	lr
   1c11c:	bics	r2, r2, #-16777216	; 0xff000000
   1c120:	bxeq	lr
   1c124:	teq	r3, #-16777216	; 0xff000000
   1c128:	orreq	r1, r1, #524288	; 0x80000
   1c12c:	bxeq	lr
   1c130:	push	{r4, r5, lr}
   1c134:	mov	r4, #896	; 0x380
   1c138:	and	r5, r1, #-2147483648	; 0x80000000
   1c13c:	bic	r1, r1, #-2147483648	; 0x80000000
   1c140:	b	1bf4c <flatcc_json_parser_struct_as_root@@Base+0x220>
   1c144:	orrs	r2, r0, r1
   1c148:	bxeq	lr
   1c14c:	push	{r4, r5, lr}
   1c150:	mov	r5, #0
   1c154:	b	1c174 <flatcc_json_parser_struct_as_root@@Base+0x448>
   1c158:	orrs	r2, r0, r1
   1c15c:	bxeq	lr
   1c160:	push	{r4, r5, lr}
   1c164:	ands	r5, r1, #-2147483648	; 0x80000000
   1c168:	bpl	1c174 <flatcc_json_parser_struct_as_root@@Base+0x448>
   1c16c:	rsbs	r0, r0, #0
   1c170:	rsc	r1, r1, #0
   1c174:	mov	r4, #1024	; 0x400
   1c178:	add	r4, r4, #50	; 0x32
   1c17c:	lsrs	ip, r1, #22
   1c180:	beq	1bef0 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   1c184:	mov	r2, #3
   1c188:	lsrs	ip, ip, #3
   1c18c:	addne	r2, r2, #3
   1c190:	lsrs	ip, ip, #3
   1c194:	addne	r2, r2, #3
   1c198:	add	r2, r2, ip, lsr #3
   1c19c:	rsb	r3, r2, #32
   1c1a0:	lsl	ip, r0, r3
   1c1a4:	lsr	r0, r0, r2
   1c1a8:	orr	r0, r0, r1, lsl r3
   1c1ac:	lsr	r1, r1, r2
   1c1b0:	add	r4, r4, r2
   1c1b4:	b	1bef0 <flatcc_json_parser_struct_as_root@@Base+0x1c4>

0001c1b8 <__libc_csu_init@@Base>:
   1c1b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c1bc:	mov	r7, r0
   1c1c0:	ldr	r6, [pc, #72]	; 1c210 <__libc_csu_init@@Base+0x58>
   1c1c4:	ldr	r5, [pc, #72]	; 1c214 <__libc_csu_init@@Base+0x5c>
   1c1c8:	add	r6, pc, r6
   1c1cc:	add	r5, pc, r5
   1c1d0:	sub	r6, r6, r5
   1c1d4:	mov	r8, r1
   1c1d8:	mov	r9, r2
   1c1dc:	bl	128d4 <free@plt-0x20>
   1c1e0:	asrs	r6, r6, #2
   1c1e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c1e8:	mov	r4, #0
   1c1ec:	add	r4, r4, #1
   1c1f0:	ldr	r3, [r5], #4
   1c1f4:	mov	r2, r9
   1c1f8:	mov	r1, r8
   1c1fc:	mov	r0, r7
   1c200:	blx	r3
   1c204:	cmp	r6, r4
   1c208:	bne	1c1ec <__libc_csu_init@@Base+0x34>
   1c20c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c210:	andeq	r2, r1, ip, lsr sp
   1c214:	andeq	r2, r1, r4, lsr sp

0001c218 <__libc_csu_fini@@Base>:
   1c218:	bx	lr

Disassembly of section .fini:

0001c21c <.fini>:
   1c21c:	push	{r3, lr}
   1c220:	pop	{r3, pc}
