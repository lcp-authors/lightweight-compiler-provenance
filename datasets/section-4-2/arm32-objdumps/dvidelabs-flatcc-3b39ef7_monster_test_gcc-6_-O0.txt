
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

000128ec <.init>:
   128ec:	push	{r3, lr}
   128f0:	bl	12a54 <_start@@Base+0x3c>
   128f4:	pop	{r3, pc}

Disassembly of section .plt:

000128f8 <strcmp@plt-0x14>:
   128f8:	push	{lr}		; (str lr, [sp, #-4]!)
   128fc:	ldr	lr, [pc, #4]	; 12908 <strcmp@plt-0x4>
   12900:	add	lr, pc, lr
   12904:	ldr	pc, [lr, #8]!
   12908:	strdeq	r3, [r3], -r8

0001290c <strcmp@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #208896	; 0x33000
   12914:	ldr	pc, [ip, #1784]!	; 0x6f8

00012918 <printf@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #208896	; 0x33000
   12920:	ldr	pc, [ip, #1776]!	; 0x6f0

00012924 <free@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #208896	; 0x33000
   1292c:	ldr	pc, [ip, #1768]!	; 0x6e8

00012930 <memcpy@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #208896	; 0x33000
   12938:	ldr	pc, [ip, #1760]!	; 0x6e0

0001293c <memcmp@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #208896	; 0x33000
   12944:	ldr	pc, [ip, #1752]!	; 0x6d8

00012948 <realloc@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #208896	; 0x33000
   12950:	ldr	pc, [ip, #1744]!	; 0x6d0

00012954 <fwrite@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #208896	; 0x33000
   1295c:	ldr	pc, [ip, #1736]!	; 0x6c8

00012960 <gettimeofday@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #208896	; 0x33000
   12968:	ldr	pc, [ip, #1728]!	; 0x6c0

0001296c <puts@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #208896	; 0x33000
   12974:	ldr	pc, [ip, #1720]!	; 0x6b8

00012978 <malloc@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #208896	; 0x33000
   12980:	ldr	pc, [ip, #1712]!	; 0x6b0

00012984 <__libc_start_main@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #208896	; 0x33000
   1298c:	ldr	pc, [ip, #1704]!	; 0x6a8

00012990 <__gmon_start__@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #208896	; 0x33000
   12998:	ldr	pc, [ip, #1696]!	; 0x6a0

0001299c <strlen@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #208896	; 0x33000
   129a4:	ldr	pc, [ip, #1688]!	; 0x698

000129a8 <fprintf@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #208896	; 0x33000
   129b0:	ldr	pc, [ip, #1680]!	; 0x690

000129b4 <posix_memalign@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #208896	; 0x33000
   129bc:	ldr	pc, [ip, #1672]!	; 0x688

000129c0 <memset@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #208896	; 0x33000
   129c8:	ldr	pc, [ip, #1664]!	; 0x680

000129cc <strncpy@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #208896	; 0x33000
   129d4:	ldr	pc, [ip, #1656]!	; 0x678

000129d8 <memchr@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #208896	; 0x33000
   129e0:	ldr	pc, [ip, #1648]!	; 0x670

000129e4 <fputc@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #208896	; 0x33000
   129ec:	ldr	pc, [ip, #1640]!	; 0x668

000129f0 <strncmp@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #208896	; 0x33000
   129f8:	ldr	pc, [ip, #1632]!	; 0x660

000129fc <abort@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #208896	; 0x33000
   12a04:	ldr	pc, [ip, #1624]!	; 0x658

00012a08 <__assert_fail@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #208896	; 0x33000
   12a10:	ldr	pc, [ip, #1616]!	; 0x650

Disassembly of section .text:

00012a18 <_start@@Base>:
   12a18:	mov	fp, #0
   12a1c:	mov	lr, #0
   12a20:	pop	{r1}		; (ldr r1, [sp], #4)
   12a24:	mov	r2, sp
   12a28:	push	{r2}		; (str r2, [sp, #-4]!)
   12a2c:	push	{r0}		; (str r0, [sp, #-4]!)
   12a30:	ldr	ip, [pc, #16]	; 12a48 <_start@@Base+0x30>
   12a34:	push	{ip}		; (str ip, [sp, #-4]!)
   12a38:	ldr	r0, [pc, #12]	; 12a4c <_start@@Base+0x34>
   12a3c:	ldr	r3, [pc, #12]	; 12a50 <_start@@Base+0x38>
   12a40:	bl	12984 <__libc_start_main@plt>
   12a44:	bl	129fc <abort@plt>
   12a48:	andeq	r0, r3, r0, lsr sl
   12a4c:	andeq	r7, r2, r0, lsr #5
   12a50:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   12a54:	ldr	r3, [pc, #20]	; 12a70 <_start@@Base+0x58>
   12a58:	ldr	r2, [pc, #20]	; 12a74 <_start@@Base+0x5c>
   12a5c:	add	r3, pc, r3
   12a60:	ldr	r2, [r3, r2]
   12a64:	cmp	r2, #0
   12a68:	bxeq	lr
   12a6c:	b	12990 <__gmon_start__@plt>
   12a70:	muleq	r3, ip, r5
   12a74:	andeq	r0, r0, ip, rrx
   12a78:	ldr	r3, [pc, #28]	; 12a9c <_start@@Base+0x84>
   12a7c:	ldr	r0, [pc, #28]	; 12aa0 <_start@@Base+0x88>
   12a80:	sub	r3, r3, r0
   12a84:	cmp	r3, #6
   12a88:	bxls	lr
   12a8c:	ldr	r3, [pc, #16]	; 12aa4 <_start@@Base+0x8c>
   12a90:	cmp	r3, #0
   12a94:	bxeq	lr
   12a98:	bx	r3
   12a9c:	andeq	r6, r4, fp, lsl #1
   12aa0:	andeq	r6, r4, r8, lsl #1
   12aa4:	andeq	r0, r0, r0
   12aa8:	ldr	r1, [pc, #36]	; 12ad4 <_start@@Base+0xbc>
   12aac:	ldr	r0, [pc, #36]	; 12ad8 <_start@@Base+0xc0>
   12ab0:	sub	r1, r1, r0
   12ab4:	asr	r1, r1, #2
   12ab8:	add	r1, r1, r1, lsr #31
   12abc:	asrs	r1, r1, #1
   12ac0:	bxeq	lr
   12ac4:	ldr	r3, [pc, #16]	; 12adc <_start@@Base+0xc4>
   12ac8:	cmp	r3, #0
   12acc:	bxeq	lr
   12ad0:	bx	r3
   12ad4:	andeq	r6, r4, r8, lsl #1
   12ad8:	andeq	r6, r4, r8, lsl #1
   12adc:	andeq	r0, r0, r0
   12ae0:	push	{r4, lr}
   12ae4:	ldr	r4, [pc, #24]	; 12b04 <_start@@Base+0xec>
   12ae8:	ldrb	r3, [r4]
   12aec:	cmp	r3, #0
   12af0:	popne	{r4, pc}
   12af4:	bl	12a78 <_start@@Base+0x60>
   12af8:	mov	r3, #1
   12afc:	strb	r3, [r4]
   12b00:	pop	{r4, pc}
   12b04:	andeq	r6, r4, r8, lsl #1
   12b08:	ldr	r0, [pc, #40]	; 12b38 <_start@@Base+0x120>
   12b0c:	ldr	r3, [r0]
   12b10:	cmp	r3, #0
   12b14:	bne	12b1c <_start@@Base+0x104>
   12b18:	b	12aa8 <_start@@Base+0x90>
   12b1c:	ldr	r3, [pc, #24]	; 12b3c <_start@@Base+0x124>
   12b20:	cmp	r3, #0
   12b24:	beq	12b18 <_start@@Base+0x100>
   12b28:	push	{r4, lr}
   12b2c:	blx	r3
   12b30:	pop	{r4, lr}
   12b34:	b	12aa8 <_start@@Base+0x90>
   12b38:	andeq	r5, r4, r4, lsl pc
   12b3c:	andeq	r0, r0, r0
   12b40:	push	{fp}		; (str fp, [sp, #-4]!)
   12b44:	add	fp, sp, #0
   12b48:	sub	sp, sp, #12
   12b4c:	mov	r3, r0
   12b50:	strb	r3, [fp, #-5]
   12b54:	ldrb	r3, [fp, #-5]
   12b58:	mov	r0, r3
   12b5c:	add	sp, fp, #0
   12b60:	pop	{fp}		; (ldr fp, [sp], #4)
   12b64:	bx	lr
   12b68:	push	{fp}		; (str fp, [sp, #-4]!)
   12b6c:	add	fp, sp, #0
   12b70:	sub	sp, sp, #12
   12b74:	mov	r3, r0
   12b78:	strb	r3, [fp, #-5]
   12b7c:	ldrb	r3, [fp, #-5]
   12b80:	mov	r0, r3
   12b84:	add	sp, fp, #0
   12b88:	pop	{fp}		; (ldr fp, [sp], #4)
   12b8c:	bx	lr
   12b90:	push	{fp, lr}
   12b94:	add	fp, sp, #4
   12b98:	sub	sp, sp, #8
   12b9c:	str	r0, [fp, #-8]
   12ba0:	ldr	r3, [fp, #-8]
   12ba4:	ldrb	r3, [r3]
   12ba8:	mov	r0, r3
   12bac:	bl	12b40 <_start@@Base+0x128>
   12bb0:	mov	r3, r0
   12bb4:	mov	r0, r3
   12bb8:	sub	sp, fp, #4
   12bbc:	pop	{fp, pc}
   12bc0:	push	{fp}		; (str fp, [sp, #-4]!)
   12bc4:	add	fp, sp, #0
   12bc8:	sub	sp, sp, #12
   12bcc:	mov	r3, r0
   12bd0:	strh	r3, [fp, #-6]
   12bd4:	ldrh	r3, [fp, #-6]
   12bd8:	mov	r0, r3
   12bdc:	add	sp, fp, #0
   12be0:	pop	{fp}		; (ldr fp, [sp], #4)
   12be4:	bx	lr
   12be8:	push	{fp}		; (str fp, [sp, #-4]!)
   12bec:	add	fp, sp, #0
   12bf0:	sub	sp, sp, #12
   12bf4:	mov	r3, r0
   12bf8:	strh	r3, [fp, #-6]
   12bfc:	ldrh	r3, [fp, #-6]
   12c00:	mov	r0, r3
   12c04:	add	sp, fp, #0
   12c08:	pop	{fp}		; (ldr fp, [sp], #4)
   12c0c:	bx	lr
   12c10:	push	{fp, lr}
   12c14:	add	fp, sp, #4
   12c18:	sub	sp, sp, #8
   12c1c:	str	r0, [fp, #-8]
   12c20:	ldr	r3, [fp, #-8]
   12c24:	ldrh	r3, [r3]
   12c28:	mov	r0, r3
   12c2c:	bl	12bc0 <_start@@Base+0x1a8>
   12c30:	mov	r3, r0
   12c34:	mov	r0, r3
   12c38:	sub	sp, fp, #4
   12c3c:	pop	{fp, pc}
   12c40:	push	{fp}		; (str fp, [sp, #-4]!)
   12c44:	add	fp, sp, #0
   12c48:	sub	sp, sp, #12
   12c4c:	str	r0, [fp, #-8]
   12c50:	ldr	r3, [fp, #-8]
   12c54:	mov	r0, r3
   12c58:	add	sp, fp, #0
   12c5c:	pop	{fp}		; (ldr fp, [sp], #4)
   12c60:	bx	lr
   12c64:	push	{fp}		; (str fp, [sp, #-4]!)
   12c68:	add	fp, sp, #0
   12c6c:	sub	sp, sp, #12
   12c70:	str	r0, [fp, #-8]
   12c74:	ldr	r3, [fp, #-8]
   12c78:	mov	r0, r3
   12c7c:	add	sp, fp, #0
   12c80:	pop	{fp}		; (ldr fp, [sp], #4)
   12c84:	bx	lr
   12c88:	push	{fp, lr}
   12c8c:	add	fp, sp, #4
   12c90:	sub	sp, sp, #8
   12c94:	str	r0, [fp, #-8]
   12c98:	ldr	r3, [fp, #-8]
   12c9c:	ldr	r3, [r3]
   12ca0:	mov	r0, r3
   12ca4:	bl	12c40 <_start@@Base+0x228>
   12ca8:	mov	r3, r0
   12cac:	mov	r0, r3
   12cb0:	sub	sp, fp, #4
   12cb4:	pop	{fp, pc}
   12cb8:	push	{fp}		; (str fp, [sp, #-4]!)
   12cbc:	add	fp, sp, #0
   12cc0:	sub	sp, sp, #12
   12cc4:	strd	r0, [fp, #-12]
   12cc8:	ldrd	r2, [fp, #-12]
   12ccc:	mov	r0, r2
   12cd0:	mov	r1, r3
   12cd4:	add	sp, fp, #0
   12cd8:	pop	{fp}		; (ldr fp, [sp], #4)
   12cdc:	bx	lr
   12ce0:	push	{fp}		; (str fp, [sp, #-4]!)
   12ce4:	add	fp, sp, #0
   12ce8:	sub	sp, sp, #12
   12cec:	strd	r0, [fp, #-12]
   12cf0:	ldrd	r2, [fp, #-12]
   12cf4:	mov	r0, r2
   12cf8:	mov	r1, r3
   12cfc:	add	sp, fp, #0
   12d00:	pop	{fp}		; (ldr fp, [sp], #4)
   12d04:	bx	lr
   12d08:	push	{fp, lr}
   12d0c:	add	fp, sp, #4
   12d10:	sub	sp, sp, #8
   12d14:	str	r0, [fp, #-8]
   12d18:	ldr	r3, [fp, #-8]
   12d1c:	ldrd	r2, [r3]
   12d20:	mov	r0, r2
   12d24:	mov	r1, r3
   12d28:	bl	12cb8 <_start@@Base+0x2a0>
   12d2c:	mov	r2, r0
   12d30:	mov	r3, r1
   12d34:	mov	r0, r2
   12d38:	mov	r1, r3
   12d3c:	sub	sp, fp, #4
   12d40:	pop	{fp, pc}
   12d44:	push	{fp}		; (str fp, [sp, #-4]!)
   12d48:	add	fp, sp, #0
   12d4c:	sub	sp, sp, #12
   12d50:	mov	r3, r0
   12d54:	strb	r3, [fp, #-5]
   12d58:	ldrsb	r3, [fp, #-5]
   12d5c:	mov	r0, r3
   12d60:	add	sp, fp, #0
   12d64:	pop	{fp}		; (ldr fp, [sp], #4)
   12d68:	bx	lr
   12d6c:	push	{fp}		; (str fp, [sp, #-4]!)
   12d70:	add	fp, sp, #0
   12d74:	sub	sp, sp, #12
   12d78:	mov	r3, r0
   12d7c:	strb	r3, [fp, #-5]
   12d80:	ldrsb	r3, [fp, #-5]
   12d84:	mov	r0, r3
   12d88:	add	sp, fp, #0
   12d8c:	pop	{fp}		; (ldr fp, [sp], #4)
   12d90:	bx	lr
   12d94:	push	{fp, lr}
   12d98:	add	fp, sp, #4
   12d9c:	sub	sp, sp, #8
   12da0:	str	r0, [fp, #-8]
   12da4:	ldr	r3, [fp, #-8]
   12da8:	ldrsb	r3, [r3]
   12dac:	mov	r0, r3
   12db0:	bl	12d44 <_start@@Base+0x32c>
   12db4:	mov	r3, r0
   12db8:	mov	r0, r3
   12dbc:	sub	sp, fp, #4
   12dc0:	pop	{fp, pc}
   12dc4:	push	{fp}		; (str fp, [sp, #-4]!)
   12dc8:	add	fp, sp, #0
   12dcc:	sub	sp, sp, #12
   12dd0:	mov	r3, r0
   12dd4:	strh	r3, [fp, #-6]
   12dd8:	ldrsh	r3, [fp, #-6]
   12ddc:	mov	r0, r3
   12de0:	add	sp, fp, #0
   12de4:	pop	{fp}		; (ldr fp, [sp], #4)
   12de8:	bx	lr
   12dec:	push	{fp}		; (str fp, [sp, #-4]!)
   12df0:	add	fp, sp, #0
   12df4:	sub	sp, sp, #12
   12df8:	mov	r3, r0
   12dfc:	strh	r3, [fp, #-6]
   12e00:	ldrsh	r3, [fp, #-6]
   12e04:	mov	r0, r3
   12e08:	add	sp, fp, #0
   12e0c:	pop	{fp}		; (ldr fp, [sp], #4)
   12e10:	bx	lr
   12e14:	push	{fp, lr}
   12e18:	add	fp, sp, #4
   12e1c:	sub	sp, sp, #8
   12e20:	str	r0, [fp, #-8]
   12e24:	ldr	r3, [fp, #-8]
   12e28:	ldrsh	r3, [r3]
   12e2c:	mov	r0, r3
   12e30:	bl	12dc4 <_start@@Base+0x3ac>
   12e34:	mov	r3, r0
   12e38:	mov	r0, r3
   12e3c:	sub	sp, fp, #4
   12e40:	pop	{fp, pc}
   12e44:	push	{fp}		; (str fp, [sp, #-4]!)
   12e48:	add	fp, sp, #0
   12e4c:	sub	sp, sp, #12
   12e50:	str	r0, [fp, #-8]
   12e54:	ldr	r3, [fp, #-8]
   12e58:	mov	r0, r3
   12e5c:	add	sp, fp, #0
   12e60:	pop	{fp}		; (ldr fp, [sp], #4)
   12e64:	bx	lr
   12e68:	push	{fp}		; (str fp, [sp, #-4]!)
   12e6c:	add	fp, sp, #0
   12e70:	sub	sp, sp, #12
   12e74:	str	r0, [fp, #-8]
   12e78:	ldr	r3, [fp, #-8]
   12e7c:	mov	r0, r3
   12e80:	add	sp, fp, #0
   12e84:	pop	{fp}		; (ldr fp, [sp], #4)
   12e88:	bx	lr
   12e8c:	push	{fp, lr}
   12e90:	add	fp, sp, #4
   12e94:	sub	sp, sp, #8
   12e98:	str	r0, [fp, #-8]
   12e9c:	ldr	r3, [fp, #-8]
   12ea0:	ldr	r3, [r3]
   12ea4:	mov	r0, r3
   12ea8:	bl	12e44 <_start@@Base+0x42c>
   12eac:	mov	r3, r0
   12eb0:	mov	r0, r3
   12eb4:	sub	sp, fp, #4
   12eb8:	pop	{fp, pc}
   12ebc:	push	{fp}		; (str fp, [sp, #-4]!)
   12ec0:	add	fp, sp, #0
   12ec4:	sub	sp, sp, #12
   12ec8:	strd	r0, [fp, #-12]
   12ecc:	ldrd	r2, [fp, #-12]
   12ed0:	mov	r0, r2
   12ed4:	mov	r1, r3
   12ed8:	add	sp, fp, #0
   12edc:	pop	{fp}		; (ldr fp, [sp], #4)
   12ee0:	bx	lr
   12ee4:	push	{fp}		; (str fp, [sp, #-4]!)
   12ee8:	add	fp, sp, #0
   12eec:	sub	sp, sp, #12
   12ef0:	strd	r0, [fp, #-12]
   12ef4:	ldrd	r2, [fp, #-12]
   12ef8:	mov	r0, r2
   12efc:	mov	r1, r3
   12f00:	add	sp, fp, #0
   12f04:	pop	{fp}		; (ldr fp, [sp], #4)
   12f08:	bx	lr
   12f0c:	push	{fp, lr}
   12f10:	add	fp, sp, #4
   12f14:	sub	sp, sp, #8
   12f18:	str	r0, [fp, #-8]
   12f1c:	ldr	r3, [fp, #-8]
   12f20:	ldrd	r2, [r3]
   12f24:	mov	r0, r2
   12f28:	mov	r1, r3
   12f2c:	bl	12ebc <_start@@Base+0x4a4>
   12f30:	mov	r2, r0
   12f34:	mov	r3, r1
   12f38:	mov	r0, r2
   12f3c:	mov	r1, r3
   12f40:	sub	sp, fp, #4
   12f44:	pop	{fp, pc}
   12f48:	push	{fp}		; (str fp, [sp, #-4]!)
   12f4c:	add	fp, sp, #0
   12f50:	sub	sp, sp, #20
   12f54:	vstr	s0, [fp, #-16]
   12f58:	ldr	r3, [fp, #-16]
   12f5c:	str	r3, [fp, #-8]
   12f60:	ldr	r3, [fp, #-8]
   12f64:	str	r3, [fp, #-8]
   12f68:	ldr	r3, [fp, #-8]
   12f6c:	vmov	s15, r3
   12f70:	vmov.f32	s0, s15
   12f74:	add	sp, fp, #0
   12f78:	pop	{fp}		; (ldr fp, [sp], #4)
   12f7c:	bx	lr
   12f80:	push	{fp}		; (str fp, [sp, #-4]!)
   12f84:	add	fp, sp, #0
   12f88:	sub	sp, sp, #20
   12f8c:	vstr	s0, [fp, #-16]
   12f90:	ldr	r3, [fp, #-16]
   12f94:	str	r3, [fp, #-8]
   12f98:	ldr	r3, [fp, #-8]
   12f9c:	str	r3, [fp, #-8]
   12fa0:	ldr	r3, [fp, #-8]
   12fa4:	vmov	s15, r3
   12fa8:	vmov.f32	s0, s15
   12fac:	add	sp, fp, #0
   12fb0:	pop	{fp}		; (ldr fp, [sp], #4)
   12fb4:	bx	lr
   12fb8:	push	{fp, lr}
   12fbc:	add	fp, sp, #4
   12fc0:	sub	sp, sp, #8
   12fc4:	str	r0, [fp, #-8]
   12fc8:	ldr	r3, [fp, #-8]
   12fcc:	vldr	s15, [r3]
   12fd0:	vmov.f32	s0, s15
   12fd4:	bl	12f48 <_start@@Base+0x530>
   12fd8:	vmov.f32	s15, s0
   12fdc:	vmov.f32	s0, s15
   12fe0:	sub	sp, fp, #4
   12fe4:	pop	{fp, pc}
   12fe8:	push	{fp}		; (str fp, [sp, #-4]!)
   12fec:	add	fp, sp, #0
   12ff0:	sub	sp, sp, #20
   12ff4:	vstr	d0, [fp, #-20]	; 0xffffffec
   12ff8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12ffc:	strd	r2, [fp, #-12]
   13000:	ldrd	r2, [fp, #-12]
   13004:	strd	r2, [fp, #-12]
   13008:	ldrd	r2, [fp, #-12]
   1300c:	vmov	d7, r2, r3
   13010:	vmov.f64	d0, d7
   13014:	add	sp, fp, #0
   13018:	pop	{fp}		; (ldr fp, [sp], #4)
   1301c:	bx	lr
   13020:	push	{fp}		; (str fp, [sp, #-4]!)
   13024:	add	fp, sp, #0
   13028:	sub	sp, sp, #20
   1302c:	vstr	d0, [fp, #-20]	; 0xffffffec
   13030:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13034:	strd	r2, [fp, #-12]
   13038:	ldrd	r2, [fp, #-12]
   1303c:	strd	r2, [fp, #-12]
   13040:	ldrd	r2, [fp, #-12]
   13044:	vmov	d7, r2, r3
   13048:	vmov.f64	d0, d7
   1304c:	add	sp, fp, #0
   13050:	pop	{fp}		; (ldr fp, [sp], #4)
   13054:	bx	lr
   13058:	push	{fp, lr}
   1305c:	add	fp, sp, #4
   13060:	sub	sp, sp, #8
   13064:	str	r0, [fp, #-8]
   13068:	ldr	r3, [fp, #-8]
   1306c:	vldr	d7, [r3]
   13070:	vmov.f64	d0, d7
   13074:	bl	12fe8 <_start@@Base+0x5d0>
   13078:	vmov.f64	d7, d0
   1307c:	vmov.f64	d0, d7
   13080:	sub	sp, fp, #4
   13084:	pop	{fp, pc}
   13088:	push	{fp}		; (str fp, [sp, #-4]!)
   1308c:	add	fp, sp, #0
   13090:	sub	sp, sp, #12
   13094:	mov	r3, r0
   13098:	strb	r3, [fp, #-5]
   1309c:	ldrb	r3, [fp, #-5]
   130a0:	mov	r0, r3
   130a4:	add	sp, fp, #0
   130a8:	pop	{fp}		; (ldr fp, [sp], #4)
   130ac:	bx	lr
   130b0:	push	{fp}		; (str fp, [sp, #-4]!)
   130b4:	add	fp, sp, #0
   130b8:	sub	sp, sp, #12
   130bc:	mov	r3, r0
   130c0:	strb	r3, [fp, #-5]
   130c4:	ldrb	r3, [fp, #-5]
   130c8:	mov	r0, r3
   130cc:	add	sp, fp, #0
   130d0:	pop	{fp}		; (ldr fp, [sp], #4)
   130d4:	bx	lr
   130d8:	push	{fp}		; (str fp, [sp, #-4]!)
   130dc:	add	fp, sp, #0
   130e0:	sub	sp, sp, #12
   130e4:	str	r0, [fp, #-8]
   130e8:	str	r1, [fp, #-12]
   130ec:	ldr	r2, [fp, #-8]
   130f0:	ldr	r3, [fp, #-12]
   130f4:	add	r3, r2, r3
   130f8:	mov	r0, r3
   130fc:	add	sp, fp, #0
   13100:	pop	{fp}		; (ldr fp, [sp], #4)
   13104:	bx	lr
   13108:	push	{fp, lr}
   1310c:	add	fp, sp, #4
   13110:	sub	sp, sp, #8
   13114:	str	r0, [fp, #-8]
   13118:	ldr	r3, [fp, #-8]
   1311c:	ldrb	r3, [r3]
   13120:	mov	r0, r3
   13124:	bl	13088 <_start@@Base+0x670>
   13128:	mov	r3, r0
   1312c:	mov	r0, r3
   13130:	sub	sp, fp, #4
   13134:	pop	{fp, pc}
   13138:	push	{fp}		; (str fp, [sp, #-4]!)
   1313c:	add	fp, sp, #0
   13140:	sub	sp, sp, #12
   13144:	mov	r3, r0
   13148:	strb	r3, [fp, #-5]
   1314c:	ldrb	r3, [fp, #-5]
   13150:	mov	r0, r3
   13154:	add	sp, fp, #0
   13158:	pop	{fp}		; (ldr fp, [sp], #4)
   1315c:	bx	lr
   13160:	push	{fp, lr}
   13164:	add	fp, sp, #4
   13168:	sub	sp, sp, #8
   1316c:	str	r0, [fp, #-8]
   13170:	ldr	r3, [fp, #-8]
   13174:	ldrb	r3, [r3]
   13178:	mov	r0, r3
   1317c:	bl	13138 <_start@@Base+0x720>
   13180:	mov	r3, r0
   13184:	mov	r0, r3
   13188:	sub	sp, fp, #4
   1318c:	pop	{fp, pc}
   13190:	push	{fp}		; (str fp, [sp, #-4]!)
   13194:	add	fp, sp, #0
   13198:	sub	sp, sp, #12
   1319c:	str	r0, [fp, #-8]
   131a0:	ldr	r3, [fp, #-8]
   131a4:	mov	r0, r3
   131a8:	add	sp, fp, #0
   131ac:	pop	{fp}		; (ldr fp, [sp], #4)
   131b0:	bx	lr
   131b4:	push	{fp}		; (str fp, [sp, #-4]!)
   131b8:	add	fp, sp, #0
   131bc:	sub	sp, sp, #12
   131c0:	str	r0, [fp, #-8]
   131c4:	ldr	r3, [fp, #-8]
   131c8:	mov	r0, r3
   131cc:	add	sp, fp, #0
   131d0:	pop	{fp}		; (ldr fp, [sp], #4)
   131d4:	bx	lr
   131d8:	push	{fp}		; (str fp, [sp, #-4]!)
   131dc:	add	fp, sp, #0
   131e0:	mov	r3, #4
   131e4:	mov	r0, r3
   131e8:	add	sp, fp, #0
   131ec:	pop	{fp}		; (ldr fp, [sp], #4)
   131f0:	bx	lr
   131f4:	push	{fp, lr}
   131f8:	add	fp, sp, #4
   131fc:	sub	sp, sp, #8
   13200:	str	r0, [fp, #-8]
   13204:	ldr	r3, [fp, #-8]
   13208:	ldr	r3, [r3]
   1320c:	mov	r0, r3
   13210:	bl	13190 <_start@@Base+0x778>
   13214:	mov	r3, r0
   13218:	mov	r0, r3
   1321c:	sub	sp, fp, #4
   13220:	pop	{fp, pc}
   13224:	push	{fp, lr}
   13228:	add	fp, sp, #4
   1322c:	sub	sp, sp, #8
   13230:	str	r0, [fp, #-8]
   13234:	str	r1, [fp, #-12]
   13238:	ldr	r0, [fp, #-12]
   1323c:	bl	131b4 <_start@@Base+0x79c>
   13240:	mov	r2, r0
   13244:	ldr	r3, [fp, #-8]
   13248:	str	r2, [r3]
   1324c:	nop			; (mov r0, r0)
   13250:	sub	sp, fp, #4
   13254:	pop	{fp, pc}
   13258:	push	{fp}		; (str fp, [sp, #-4]!)
   1325c:	add	fp, sp, #0
   13260:	sub	sp, sp, #12
   13264:	str	r0, [fp, #-8]
   13268:	ldr	r3, [fp, #-8]
   1326c:	mov	r0, r3
   13270:	add	sp, fp, #0
   13274:	pop	{fp}		; (ldr fp, [sp], #4)
   13278:	bx	lr
   1327c:	push	{fp, lr}
   13280:	add	fp, sp, #4
   13284:	sub	sp, sp, #8
   13288:	str	r0, [fp, #-8]
   1328c:	ldr	r3, [fp, #-8]
   13290:	ldr	r3, [r3]
   13294:	mov	r0, r3
   13298:	bl	13258 <_start@@Base+0x840>
   1329c:	mov	r3, r0
   132a0:	mov	r0, r3
   132a4:	sub	sp, fp, #4
   132a8:	pop	{fp, pc}
   132ac:	push	{fp}		; (str fp, [sp, #-4]!)
   132b0:	add	fp, sp, #0
   132b4:	sub	sp, sp, #12
   132b8:	mov	r3, r0
   132bc:	strh	r3, [fp, #-6]
   132c0:	ldrh	r3, [fp, #-6]
   132c4:	mov	r0, r3
   132c8:	add	sp, fp, #0
   132cc:	pop	{fp}		; (ldr fp, [sp], #4)
   132d0:	bx	lr
   132d4:	push	{fp, lr}
   132d8:	add	fp, sp, #4
   132dc:	sub	sp, sp, #8
   132e0:	str	r0, [fp, #-8]
   132e4:	ldr	r3, [fp, #-8]
   132e8:	ldrh	r3, [r3]
   132ec:	mov	r0, r3
   132f0:	bl	132ac <_start@@Base+0x894>
   132f4:	mov	r3, r0
   132f8:	mov	r0, r3
   132fc:	sub	sp, fp, #4
   13300:	pop	{fp, pc}
   13304:	push	{fp}		; (str fp, [sp, #-4]!)
   13308:	add	fp, sp, #0
   1330c:	sub	sp, sp, #12
   13310:	mov	r3, r0
   13314:	strb	r3, [fp, #-5]
   13318:	ldrb	r3, [fp, #-5]
   1331c:	mov	r0, r3
   13320:	add	sp, fp, #0
   13324:	pop	{fp}		; (ldr fp, [sp], #4)
   13328:	bx	lr
   1332c:	push	{fp, lr}
   13330:	add	fp, sp, #4
   13334:	sub	sp, sp, #8
   13338:	str	r0, [fp, #-8]
   1333c:	ldr	r3, [fp, #-8]
   13340:	ldrb	r3, [r3]
   13344:	mov	r0, r3
   13348:	bl	13304 <_start@@Base+0x8ec>
   1334c:	mov	r3, r0
   13350:	mov	r0, r3
   13354:	sub	sp, fp, #4
   13358:	pop	{fp, pc}
   1335c:	push	{fp}		; (str fp, [sp, #-4]!)
   13360:	add	fp, sp, #0
   13364:	sub	sp, sp, #12
   13368:	str	r0, [fp, #-8]
   1336c:	ldr	r3, [fp, #-8]
   13370:	mov	r0, r3
   13374:	add	sp, fp, #0
   13378:	pop	{fp}		; (ldr fp, [sp], #4)
   1337c:	bx	lr
   13380:	push	{fp}		; (str fp, [sp, #-4]!)
   13384:	add	fp, sp, #0
   13388:	sub	sp, sp, #12
   1338c:	str	r0, [fp, #-8]
   13390:	ldr	r3, [fp, #-8]
   13394:	mov	r0, r3
   13398:	add	sp, fp, #0
   1339c:	pop	{fp}		; (ldr fp, [sp], #4)
   133a0:	bx	lr
   133a4:	push	{fp, lr}
   133a8:	add	fp, sp, #4
   133ac:	sub	sp, sp, #8
   133b0:	str	r0, [fp, #-8]
   133b4:	ldr	r3, [fp, #-8]
   133b8:	ldr	r3, [r3]
   133bc:	mov	r0, r3
   133c0:	bl	1335c <_start@@Base+0x944>
   133c4:	mov	r3, r0
   133c8:	mov	r0, r3
   133cc:	sub	sp, fp, #4
   133d0:	pop	{fp, pc}
   133d4:	push	{fp}		; (str fp, [sp, #-4]!)
   133d8:	add	fp, sp, #0
   133dc:	sub	sp, sp, #20
   133e0:	str	r0, [fp, #-16]
   133e4:	ldr	r3, [pc, #112]	; 1345c <_start@@Base+0xa44>
   133e8:	str	r3, [fp, #-8]
   133ec:	b	13424 <_start@@Base+0xa0c>
   133f0:	ldr	r3, [fp, #-16]
   133f4:	ldrb	r3, [r3]
   133f8:	mov	r2, r3
   133fc:	ldr	r3, [fp, #-8]
   13400:	eor	r3, r3, r2
   13404:	str	r3, [fp, #-8]
   13408:	ldr	r3, [fp, #-8]
   1340c:	ldr	r2, [pc, #76]	; 13460 <_start@@Base+0xa48>
   13410:	mul	r3, r2, r3
   13414:	str	r3, [fp, #-8]
   13418:	ldr	r3, [fp, #-16]
   1341c:	add	r3, r3, #1
   13420:	str	r3, [fp, #-16]
   13424:	ldr	r3, [fp, #-16]
   13428:	ldrb	r3, [r3]
   1342c:	cmp	r3, #0
   13430:	bne	133f0 <_start@@Base+0x9d8>
   13434:	ldr	r3, [fp, #-8]
   13438:	cmp	r3, #0
   1343c:	bne	13448 <_start@@Base+0xa30>
   13440:	ldr	r3, [pc, #20]	; 1345c <_start@@Base+0xa44>
   13444:	str	r3, [fp, #-8]
   13448:	ldr	r3, [fp, #-8]
   1344c:	mov	r0, r3
   13450:	add	sp, fp, #0
   13454:	pop	{fp}		; (ldr fp, [sp], #4)
   13458:	bx	lr
   1345c:	tsthi	ip, r5, asr #27
   13460:			; <UNDEFINED> instruction: 0x01000193
   13464:	push	{fp}		; (str fp, [sp, #-4]!)
   13468:	add	fp, sp, #0
   1346c:	sub	sp, sp, #12
   13470:	str	r0, [fp, #-8]
   13474:	str	r1, [fp, #-12]
   13478:	ldr	r3, [fp, #-8]
   1347c:	uxtb	r2, r3
   13480:	ldr	r3, [fp, #-12]
   13484:	strb	r2, [r3]
   13488:	ldr	r3, [fp, #-8]
   1348c:	lsr	r3, r3, #8
   13490:	str	r3, [fp, #-8]
   13494:	ldr	r3, [fp, #-12]
   13498:	add	r3, r3, #1
   1349c:	ldr	r2, [fp, #-8]
   134a0:	uxtb	r2, r2
   134a4:	strb	r2, [r3]
   134a8:	ldr	r3, [fp, #-8]
   134ac:	lsr	r3, r3, #8
   134b0:	str	r3, [fp, #-8]
   134b4:	ldr	r3, [fp, #-12]
   134b8:	add	r3, r3, #2
   134bc:	ldr	r2, [fp, #-8]
   134c0:	uxtb	r2, r2
   134c4:	strb	r2, [r3]
   134c8:	ldr	r3, [fp, #-8]
   134cc:	lsr	r3, r3, #8
   134d0:	str	r3, [fp, #-8]
   134d4:	ldr	r3, [fp, #-12]
   134d8:	add	r3, r3, #3
   134dc:	ldr	r2, [fp, #-8]
   134e0:	uxtb	r2, r2
   134e4:	strb	r2, [r3]
   134e8:	nop			; (mov r0, r0)
   134ec:	add	sp, fp, #0
   134f0:	pop	{fp}		; (ldr fp, [sp], #4)
   134f4:	bx	lr
   134f8:	push	{fp, lr}
   134fc:	add	fp, sp, #4
   13500:	sub	sp, sp, #8
   13504:	str	r0, [fp, #-8]
   13508:	ldr	r3, [fp, #-8]
   1350c:	cmp	r3, #0
   13510:	beq	1352c <_start@@Base+0xb14>
   13514:	ldr	r3, [fp, #-8]
   13518:	sub	r3, r3, #4
   1351c:	mov	r0, r3
   13520:	bl	131f4 <_start@@Base+0x7dc>
   13524:	mov	r3, r0
   13528:	b	13530 <_start@@Base+0xb18>
   1352c:	mov	r3, #0
   13530:	mov	r0, r3
   13534:	sub	sp, fp, #4
   13538:	pop	{fp, pc}
   1353c:	push	{fp, lr}
   13540:	add	fp, sp, #4
   13544:	sub	sp, sp, #8
   13548:	str	r0, [fp, #-8]
   1354c:	ldr	r3, [fp, #-8]
   13550:	cmp	r3, #0
   13554:	beq	13570 <_start@@Base+0xb58>
   13558:	ldr	r3, [fp, #-8]
   1355c:	sub	r3, r3, #4
   13560:	mov	r0, r3
   13564:	bl	131f4 <_start@@Base+0x7dc>
   13568:	mov	r3, r0
   1356c:	b	13574 <_start@@Base+0xb5c>
   13570:	mov	r3, #0
   13574:	mov	r0, r3
   13578:	sub	sp, fp, #4
   1357c:	pop	{fp, pc}
   13580:	push	{fp, lr}
   13584:	add	fp, sp, #4
   13588:	sub	sp, sp, #8
   1358c:	str	r0, [fp, #-8]
   13590:	ldr	r3, [fp, #-8]
   13594:	cmp	r3, #0
   13598:	beq	135b4 <_start@@Base+0xb9c>
   1359c:	ldr	r3, [fp, #-8]
   135a0:	sub	r3, r3, #4
   135a4:	mov	r0, r3
   135a8:	bl	131f4 <_start@@Base+0x7dc>
   135ac:	mov	r3, r0
   135b0:	b	135b8 <_start@@Base+0xba0>
   135b4:	mov	r3, #0
   135b8:	mov	r0, r3
   135bc:	sub	sp, fp, #4
   135c0:	pop	{fp, pc}
   135c4:	push	{fp, lr}
   135c8:	add	fp, sp, #4
   135cc:	sub	sp, sp, #16
   135d0:	str	r0, [fp, #-16]
   135d4:	str	r1, [fp, #-20]	; 0xffffffec
   135d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   135dc:	lsl	r3, r3, #2
   135e0:	ldr	r2, [fp, #-16]
   135e4:	add	r3, r2, r3
   135e8:	str	r3, [fp, #-8]
   135ec:	ldr	r0, [fp, #-16]
   135f0:	bl	134f8 <_start@@Base+0xae0>
   135f4:	mov	r2, r0
   135f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   135fc:	cmp	r2, r3
   13600:	bhi	13624 <_start@@Base+0xc0c>
   13604:	ldr	r3, [pc, #60]	; 13648 <_start@@Base+0xc30>
   13608:	add	r3, pc, r3
   1360c:	mov	r2, #108	; 0x6c
   13610:	ldr	r1, [pc, #52]	; 1364c <_start@@Base+0xc34>
   13614:	add	r1, pc, r1
   13618:	ldr	r0, [pc, #48]	; 13650 <_start@@Base+0xc38>
   1361c:	add	r0, pc, r0
   13620:	bl	12a08 <__assert_fail@plt>
   13624:	ldr	r0, [fp, #-8]
   13628:	bl	131f4 <_start@@Base+0x7dc>
   1362c:	mov	r3, r0
   13630:	add	r3, r3, #4
   13634:	ldr	r2, [fp, #-8]
   13638:	add	r3, r2, r3
   1363c:	mov	r0, r3
   13640:	sub	sp, fp, #4
   13644:	pop	{fp, pc}
   13648:	andeq	r0, r2, r4, ror #21
   1364c:	andeq	sp, r1, r8, lsr #8
   13650:	andeq	sp, r1, r0, lsr #9
   13654:	push	{fp, lr}
   13658:	add	fp, sp, #4
   1365c:	sub	sp, sp, #8
   13660:	str	r0, [fp, #-8]
   13664:	ldr	r3, [fp, #-8]
   13668:	cmp	r3, #0
   1366c:	beq	13684 <_start@@Base+0xc6c>
   13670:	bl	131d8 <_start@@Base+0x7c0>
   13674:	mov	r2, r0
   13678:	ldr	r3, [fp, #-8]
   1367c:	add	r3, r3, r2
   13680:	b	13688 <_start@@Base+0xc70>
   13684:	mov	r3, #0
   13688:	mov	r0, r3
   1368c:	sub	sp, fp, #4
   13690:	pop	{fp, pc}
   13694:	push	{fp, lr}
   13698:	add	fp, sp, #4
   1369c:	sub	sp, sp, #16
   136a0:	str	r0, [fp, #-16]
   136a4:	str	r1, [fp, #-20]	; 0xffffffec
   136a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   136ac:	lsl	r3, r3, #2
   136b0:	ldr	r2, [fp, #-16]
   136b4:	add	r3, r2, r3
   136b8:	str	r3, [fp, #-8]
   136bc:	ldr	r0, [fp, #-16]
   136c0:	bl	134f8 <_start@@Base+0xae0>
   136c4:	mov	r2, r0
   136c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   136cc:	cmp	r2, r3
   136d0:	bhi	136f4 <_start@@Base+0xcdc>
   136d4:	ldr	r3, [pc, #56]	; 13714 <_start@@Base+0xcfc>
   136d8:	add	r3, pc, r3
   136dc:	mov	r2, #117	; 0x75
   136e0:	ldr	r1, [pc, #48]	; 13718 <_start@@Base+0xd00>
   136e4:	add	r1, pc, r1
   136e8:	ldr	r0, [pc, #44]	; 1371c <_start@@Base+0xd04>
   136ec:	add	r0, pc, r0
   136f0:	bl	12a08 <__assert_fail@plt>
   136f4:	ldr	r0, [fp, #-8]
   136f8:	bl	131f4 <_start@@Base+0x7dc>
   136fc:	mov	r2, r0
   13700:	ldr	r3, [fp, #-8]
   13704:	add	r3, r3, r2
   13708:	mov	r0, r3
   1370c:	sub	sp, fp, #4
   13710:	pop	{fp, pc}
   13714:	andeq	r0, r2, r4, lsr #27
   13718:	andeq	sp, r1, r8, asr r3
   1371c:	ldrdeq	sp, [r1], -r0
   13720:	push	{fp, lr}
   13724:	add	fp, sp, #4
   13728:	sub	sp, sp, #16
   1372c:	str	r0, [fp, #-16]
   13730:	str	r1, [fp, #-20]	; 0xffffffec
   13734:	ldr	r3, [fp, #-20]	; 0xffffffec
   13738:	lsl	r3, r3, #2
   1373c:	ldr	r2, [fp, #-16]
   13740:	add	r3, r2, r3
   13744:	str	r3, [fp, #-8]
   13748:	ldr	r0, [fp, #-16]
   1374c:	bl	134f8 <_start@@Base+0xae0>
   13750:	mov	r2, r0
   13754:	ldr	r3, [fp, #-20]	; 0xffffffec
   13758:	cmp	r2, r3
   1375c:	bhi	13780 <_start@@Base+0xd68>
   13760:	ldr	r3, [pc, #60]	; 137a4 <_start@@Base+0xd8c>
   13764:	add	r3, pc, r3
   13768:	mov	r2, #119	; 0x77
   1376c:	ldr	r1, [pc, #52]	; 137a8 <_start@@Base+0xd90>
   13770:	add	r1, pc, r1
   13774:	ldr	r0, [pc, #48]	; 137ac <_start@@Base+0xd94>
   13778:	add	r0, pc, r0
   1377c:	bl	12a08 <__assert_fail@plt>
   13780:	ldr	r0, [fp, #-8]
   13784:	bl	131f4 <_start@@Base+0x7dc>
   13788:	mov	r3, r0
   1378c:	add	r3, r3, #4
   13790:	ldr	r2, [fp, #-8]
   13794:	add	r3, r2, r3
   13798:	mov	r0, r3
   1379c:	sub	sp, fp, #4
   137a0:	pop	{fp, pc}
   137a4:	andeq	r0, r2, ip, lsr #31
   137a8:	andeq	sp, r1, ip, asr #5
   137ac:	andeq	sp, r1, r4, asr #6
   137b0:	push	{fp, lr}
   137b4:	add	fp, sp, #4
   137b8:	sub	sp, sp, #8
   137bc:	sub	r3, fp, #12
   137c0:	stm	r3, {r0, r1}
   137c4:	ldr	r3, [fp, #-8]
   137c8:	mov	r0, r3
   137cc:	bl	13654 <_start@@Base+0xc3c>
   137d0:	mov	r3, r0
   137d4:	mov	r0, r3
   137d8:	sub	sp, fp, #4
   137dc:	pop	{fp, pc}
   137e0:	push	{fp, lr}
   137e4:	add	fp, sp, #4
   137e8:	sub	sp, sp, #24
   137ec:	str	r0, [fp, #-16]
   137f0:	str	r1, [fp, #-20]	; 0xffffffec
   137f4:	str	r2, [fp, #-24]	; 0xffffffe8
   137f8:	ldr	r0, [fp, #-16]
   137fc:	bl	1353c <_start@@Base+0xb24>
   13800:	str	r0, [fp, #-8]
   13804:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13808:	ldr	r3, [fp, #-8]
   1380c:	cmp	r2, r3
   13810:	movcc	r3, r2
   13814:	movcs	r3, r3
   13818:	mov	r2, r3
   1381c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13820:	ldr	r0, [fp, #-16]
   13824:	bl	129f0 <strncmp@plt>
   13828:	str	r0, [fp, #-12]
   1382c:	ldr	r3, [fp, #-12]
   13830:	cmp	r3, #0
   13834:	bne	1386c <_start@@Base+0xe54>
   13838:	ldr	r2, [fp, #-8]
   1383c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13840:	cmp	r2, r3
   13844:	bcc	13864 <_start@@Base+0xe4c>
   13848:	ldr	r2, [fp, #-8]
   1384c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13850:	cmp	r2, r3
   13854:	movhi	r3, #1
   13858:	movls	r3, #0
   1385c:	uxtb	r3, r3
   13860:	b	13870 <_start@@Base+0xe58>
   13864:	mvn	r3, #0
   13868:	b	13870 <_start@@Base+0xe58>
   1386c:	ldr	r3, [fp, #-12]
   13870:	mov	r0, r3
   13874:	sub	sp, fp, #4
   13878:	pop	{fp, pc}
   1387c:	push	{fp, lr}
   13880:	add	fp, sp, #4
   13884:	sub	sp, sp, #16
   13888:	str	r0, [fp, #-8]
   1388c:	str	r1, [fp, #-12]
   13890:	str	r2, [fp, #-16]
   13894:	ldr	r1, [fp, #-12]
   13898:	ldr	r0, [fp, #-8]
   1389c:	bl	1290c <strcmp@plt>
   138a0:	mov	r3, r0
   138a4:	mov	r0, r3
   138a8:	sub	sp, fp, #4
   138ac:	pop	{fp, pc}
   138b0:	push	{fp, lr}
   138b4:	add	fp, sp, #4
   138b8:	sub	sp, sp, #8
   138bc:	str	r0, [fp, #-8]
   138c0:	ldr	r0, [fp, #-8]
   138c4:	bl	134f8 <_start@@Base+0xae0>
   138c8:	mov	r3, r0
   138cc:	mov	r0, r3
   138d0:	sub	sp, fp, #4
   138d4:	pop	{fp, pc}
   138d8:	push	{fp, lr}
   138dc:	add	fp, sp, #4
   138e0:	sub	sp, sp, #8
   138e4:	str	r0, [fp, #-8]
   138e8:	str	r1, [fp, #-12]
   138ec:	ldr	r0, [fp, #-8]
   138f0:	bl	134f8 <_start@@Base+0xae0>
   138f4:	mov	r2, r0
   138f8:	ldr	r3, [fp, #-12]
   138fc:	cmp	r2, r3
   13900:	bhi	13924 <_start@@Base+0xf0c>
   13904:	ldr	r3, [pc, #60]	; 13948 <_start@@Base+0xf30>
   13908:	add	r3, pc, r3
   1390c:	ldr	r2, [pc, #56]	; 1394c <_start@@Base+0xf34>
   13910:	ldr	r1, [pc, #56]	; 13950 <_start@@Base+0xf38>
   13914:	add	r1, pc, r1
   13918:	ldr	r0, [pc, #52]	; 13954 <_start@@Base+0xf3c>
   1391c:	add	r0, pc, r0
   13920:	bl	12a08 <__assert_fail@plt>
   13924:	ldr	r2, [fp, #-8]
   13928:	ldr	r3, [fp, #-12]
   1392c:	add	r3, r2, r3
   13930:	mov	r0, r3
   13934:	bl	13108 <_start@@Base+0x6f0>
   13938:	mov	r3, r0
   1393c:	mov	r0, r3
   13940:	sub	sp, fp, #4
   13944:	pop	{fp, pc}
   13948:	andeq	r0, r2, ip, asr r8
   1394c:	andeq	r0, r0, sl, lsl #3
   13950:	andeq	sp, r1, r8, lsr #2
   13954:	andeq	sp, r1, r0, lsr #3
   13958:	push	{fp, lr}
   1395c:	add	fp, sp, #4
   13960:	sub	sp, sp, #8
   13964:	str	r0, [fp, #-8]
   13968:	ldr	r0, [fp, #-8]
   1396c:	bl	134f8 <_start@@Base+0xae0>
   13970:	mov	r3, r0
   13974:	mov	r0, r3
   13978:	sub	sp, fp, #4
   1397c:	pop	{fp, pc}
   13980:	push	{fp, lr}
   13984:	add	fp, sp, #4
   13988:	sub	sp, sp, #8
   1398c:	str	r0, [fp, #-8]
   13990:	str	r1, [fp, #-12]
   13994:	ldr	r0, [fp, #-8]
   13998:	bl	134f8 <_start@@Base+0xae0>
   1399c:	mov	r2, r0
   139a0:	ldr	r3, [fp, #-12]
   139a4:	cmp	r2, r3
   139a8:	bhi	139cc <_start@@Base+0xfb4>
   139ac:	ldr	r3, [pc, #60]	; 139f0 <_start@@Base+0xfd8>
   139b0:	add	r3, pc, r3
   139b4:	ldr	r2, [pc, #56]	; 139f4 <_start@@Base+0xfdc>
   139b8:	ldr	r1, [pc, #56]	; 139f8 <_start@@Base+0xfe0>
   139bc:	add	r1, pc, r1
   139c0:	ldr	r0, [pc, #52]	; 139fc <_start@@Base+0xfe4>
   139c4:	add	r0, pc, r0
   139c8:	bl	12a08 <__assert_fail@plt>
   139cc:	ldr	r2, [fp, #-8]
   139d0:	ldr	r3, [fp, #-12]
   139d4:	add	r3, r2, r3
   139d8:	mov	r0, r3
   139dc:	bl	12b90 <_start@@Base+0x178>
   139e0:	mov	r3, r0
   139e4:	mov	r0, r3
   139e8:	sub	sp, fp, #4
   139ec:	pop	{fp, pc}
   139f0:	andeq	r0, r2, r4, ror r6
   139f4:	andeq	r0, r0, fp, lsl #3
   139f8:	andeq	sp, r1, r0, lsl #1
   139fc:	strdeq	sp, [r1], -r8
   13a00:	push	{fp, lr}
   13a04:	add	fp, sp, #4
   13a08:	sub	sp, sp, #24
   13a0c:	str	r0, [fp, #-24]	; 0xffffffe8
   13a10:	mov	r3, r1
   13a14:	strb	r3, [fp, #-25]	; 0xffffffe7
   13a18:	mov	r3, #0
   13a1c:	str	r3, [fp, #-8]
   13a20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13a24:	bl	13958 <_start@@Base+0xf40>
   13a28:	str	r0, [fp, #-12]
   13a2c:	ldr	r3, [fp, #-12]
   13a30:	cmp	r3, #0
   13a34:	bne	13a48 <_start@@Base+0x1030>
   13a38:	ldr	r3, [pc, #228]	; 13b24 <_start@@Base+0x110c>
   13a3c:	add	r3, pc, r3
   13a40:	ldr	r3, [r3]
   13a44:	b	13b18 <_start@@Base+0x1100>
   13a48:	ldr	r3, [fp, #-12]
   13a4c:	sub	r3, r3, #1
   13a50:	str	r3, [fp, #-12]
   13a54:	b	13ab0 <_start@@Base+0x1098>
   13a58:	ldr	r2, [fp, #-12]
   13a5c:	ldr	r3, [fp, #-8]
   13a60:	sub	r3, r2, r3
   13a64:	lsr	r2, r3, #1
   13a68:	ldr	r3, [fp, #-8]
   13a6c:	add	r3, r2, r3
   13a70:	str	r3, [fp, #-16]
   13a74:	ldr	r1, [fp, #-16]
   13a78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13a7c:	bl	13980 <_start@@Base+0xf68>
   13a80:	mov	r3, r0
   13a84:	strb	r3, [fp, #-17]	; 0xffffffef
   13a88:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13a8c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13a90:	cmp	r2, r3
   13a94:	bcs	13aa8 <_start@@Base+0x1090>
   13a98:	ldr	r3, [fp, #-16]
   13a9c:	add	r3, r3, #1
   13aa0:	str	r3, [fp, #-8]
   13aa4:	b	13ab0 <_start@@Base+0x1098>
   13aa8:	ldr	r3, [fp, #-16]
   13aac:	str	r3, [fp, #-12]
   13ab0:	ldr	r2, [fp, #-8]
   13ab4:	ldr	r3, [fp, #-12]
   13ab8:	cmp	r2, r3
   13abc:	bcc	13a58 <_start@@Base+0x1040>
   13ac0:	ldr	r2, [fp, #-8]
   13ac4:	ldr	r3, [fp, #-12]
   13ac8:	cmp	r2, r3
   13acc:	bne	13b0c <_start@@Base+0x10f4>
   13ad0:	ldr	r1, [fp, #-8]
   13ad4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ad8:	bl	13980 <_start@@Base+0xf68>
   13adc:	mov	r3, r0
   13ae0:	strb	r3, [fp, #-17]	; 0xffffffef
   13ae4:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13ae8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13aec:	cmp	r2, r3
   13af0:	bcc	13b0c <_start@@Base+0x10f4>
   13af4:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13af8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13afc:	cmp	r2, r3
   13b00:	bhi	13b0c <_start@@Base+0x10f4>
   13b04:	ldr	r3, [fp, #-8]
   13b08:	b	13b18 <_start@@Base+0x1100>
   13b0c:	ldr	r3, [pc, #20]	; 13b28 <_start@@Base+0x1110>
   13b10:	add	r3, pc, r3
   13b14:	ldr	r3, [r3]
   13b18:	mov	r0, r3
   13b1c:	sub	sp, fp, #4
   13b20:	pop	{fp, pc}
   13b24:	andeq	r2, r3, ip, lsr r6
   13b28:	andeq	r2, r3, r8, ror #10
   13b2c:	push	{fp, lr}
   13b30:	add	fp, sp, #4
   13b34:	sub	sp, sp, #16
   13b38:	str	r0, [fp, #-16]
   13b3c:	mov	r3, r1
   13b40:	strb	r3, [fp, #-17]	; 0xffffffef
   13b44:	mov	r3, #0
   13b48:	str	r3, [fp, #-8]
   13b4c:	b	13b98 <_start@@Base+0x1180>
   13b50:	ldr	r1, [fp, #-8]
   13b54:	ldr	r0, [fp, #-16]
   13b58:	bl	13980 <_start@@Base+0xf68>
   13b5c:	mov	r3, r0
   13b60:	strb	r3, [fp, #-9]
   13b64:	ldrb	r2, [fp, #-9]
   13b68:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13b6c:	cmp	r2, r3
   13b70:	bcc	13b8c <_start@@Base+0x1174>
   13b74:	ldrb	r2, [fp, #-9]
   13b78:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13b7c:	cmp	r2, r3
   13b80:	bhi	13b8c <_start@@Base+0x1174>
   13b84:	ldr	r3, [fp, #-8]
   13b88:	b	13bbc <_start@@Base+0x11a4>
   13b8c:	ldr	r3, [fp, #-8]
   13b90:	add	r3, r3, #1
   13b94:	str	r3, [fp, #-8]
   13b98:	ldr	r0, [fp, #-16]
   13b9c:	bl	13958 <_start@@Base+0xf40>
   13ba0:	mov	r2, r0
   13ba4:	ldr	r3, [fp, #-8]
   13ba8:	cmp	r2, r3
   13bac:	bhi	13b50 <_start@@Base+0x1138>
   13bb0:	ldr	r3, [pc, #16]	; 13bc8 <_start@@Base+0x11b0>
   13bb4:	add	r3, pc, r3
   13bb8:	ldr	r3, [r3]
   13bbc:	mov	r0, r3
   13bc0:	sub	sp, fp, #4
   13bc4:	pop	{fp, pc}
   13bc8:	andeq	r2, r3, r4, asr #9
   13bcc:	push	{fp, lr}
   13bd0:	add	fp, sp, #4
   13bd4:	sub	sp, sp, #24
   13bd8:	str	r0, [fp, #-16]
   13bdc:	str	r1, [fp, #-20]	; 0xffffffec
   13be0:	str	r2, [fp, #-24]	; 0xffffffe8
   13be4:	strb	r3, [fp, #-25]	; 0xffffffe7
   13be8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bec:	str	r3, [fp, #-8]
   13bf0:	b	13c3c <_start@@Base+0x1224>
   13bf4:	ldr	r1, [fp, #-8]
   13bf8:	ldr	r0, [fp, #-16]
   13bfc:	bl	13980 <_start@@Base+0xf68>
   13c00:	mov	r3, r0
   13c04:	strb	r3, [fp, #-9]
   13c08:	ldrb	r2, [fp, #-9]
   13c0c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c10:	cmp	r2, r3
   13c14:	bcc	13c30 <_start@@Base+0x1218>
   13c18:	ldrb	r2, [fp, #-9]
   13c1c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c20:	cmp	r2, r3
   13c24:	bhi	13c30 <_start@@Base+0x1218>
   13c28:	ldr	r3, [fp, #-8]
   13c2c:	b	13c80 <_start@@Base+0x1268>
   13c30:	ldr	r3, [fp, #-8]
   13c34:	add	r3, r3, #1
   13c38:	str	r3, [fp, #-8]
   13c3c:	ldr	r0, [fp, #-16]
   13c40:	bl	13958 <_start@@Base+0xf40>
   13c44:	mov	r2, r0
   13c48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c4c:	cmp	r2, r3
   13c50:	bhi	13c64 <_start@@Base+0x124c>
   13c54:	ldr	r0, [fp, #-16]
   13c58:	bl	13958 <_start@@Base+0xf40>
   13c5c:	mov	r3, r0
   13c60:	b	13c68 <_start@@Base+0x1250>
   13c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c68:	ldr	r2, [fp, #-8]
   13c6c:	cmp	r3, r2
   13c70:	bhi	13bf4 <_start@@Base+0x11dc>
   13c74:	ldr	r3, [pc, #16]	; 13c8c <_start@@Base+0x1274>
   13c78:	add	r3, pc, r3
   13c7c:	ldr	r3, [r3]
   13c80:	mov	r0, r3
   13c84:	sub	sp, fp, #4
   13c88:	pop	{fp, pc}
   13c8c:	andeq	r2, r3, r0, lsl #8
   13c90:	push	{fp, lr}
   13c94:	add	fp, sp, #4
   13c98:	sub	sp, sp, #16
   13c9c:	str	r0, [fp, #-16]
   13ca0:	mov	r3, r1
   13ca4:	strb	r3, [fp, #-17]	; 0xffffffef
   13ca8:	ldr	r0, [fp, #-16]
   13cac:	bl	13958 <_start@@Base+0xf40>
   13cb0:	str	r0, [fp, #-8]
   13cb4:	b	13cf4 <_start@@Base+0x12dc>
   13cb8:	ldr	r1, [fp, #-8]
   13cbc:	ldr	r0, [fp, #-16]
   13cc0:	bl	13980 <_start@@Base+0xf68>
   13cc4:	mov	r3, r0
   13cc8:	strb	r3, [fp, #-9]
   13ccc:	ldrb	r2, [fp, #-9]
   13cd0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13cd4:	cmp	r2, r3
   13cd8:	bcc	13cf4 <_start@@Base+0x12dc>
   13cdc:	ldrb	r2, [fp, #-9]
   13ce0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ce4:	cmp	r2, r3
   13ce8:	bhi	13cf4 <_start@@Base+0x12dc>
   13cec:	ldr	r3, [fp, #-8]
   13cf0:	b	13d14 <_start@@Base+0x12fc>
   13cf4:	ldr	r3, [fp, #-8]
   13cf8:	sub	r2, r3, #1
   13cfc:	str	r2, [fp, #-8]
   13d00:	cmp	r3, #0
   13d04:	bne	13cb8 <_start@@Base+0x12a0>
   13d08:	ldr	r3, [pc, #16]	; 13d20 <_start@@Base+0x1308>
   13d0c:	add	r3, pc, r3
   13d10:	ldr	r3, [r3]
   13d14:	mov	r0, r3
   13d18:	sub	sp, fp, #4
   13d1c:	pop	{fp, pc}
   13d20:	andeq	r2, r3, ip, ror #6
   13d24:	push	{fp, lr}
   13d28:	add	fp, sp, #4
   13d2c:	sub	sp, sp, #24
   13d30:	str	r0, [fp, #-16]
   13d34:	str	r1, [fp, #-20]	; 0xffffffec
   13d38:	str	r2, [fp, #-24]	; 0xffffffe8
   13d3c:	strb	r3, [fp, #-25]	; 0xffffffe7
   13d40:	ldr	r0, [fp, #-16]
   13d44:	bl	13958 <_start@@Base+0xf40>
   13d48:	mov	r2, r0
   13d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d50:	cmp	r2, r3
   13d54:	bhi	13d68 <_start@@Base+0x1350>
   13d58:	ldr	r0, [fp, #-16]
   13d5c:	bl	13958 <_start@@Base+0xf40>
   13d60:	mov	r3, r0
   13d64:	b	13d6c <_start@@Base+0x1354>
   13d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d6c:	str	r3, [fp, #-8]
   13d70:	b	13db0 <_start@@Base+0x1398>
   13d74:	ldr	r1, [fp, #-8]
   13d78:	ldr	r0, [fp, #-16]
   13d7c:	bl	13980 <_start@@Base+0xf68>
   13d80:	mov	r3, r0
   13d84:	strb	r3, [fp, #-9]
   13d88:	ldrb	r2, [fp, #-9]
   13d8c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13d90:	cmp	r2, r3
   13d94:	bcc	13db0 <_start@@Base+0x1398>
   13d98:	ldrb	r2, [fp, #-9]
   13d9c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13da0:	cmp	r2, r3
   13da4:	bhi	13db0 <_start@@Base+0x1398>
   13da8:	ldr	r3, [fp, #-8]
   13dac:	b	13dd4 <_start@@Base+0x13bc>
   13db0:	ldr	r3, [fp, #-8]
   13db4:	sub	r2, r3, #1
   13db8:	str	r2, [fp, #-8]
   13dbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dc0:	cmp	r3, r2
   13dc4:	bhi	13d74 <_start@@Base+0x135c>
   13dc8:	ldr	r3, [pc, #16]	; 13de0 <_start@@Base+0x13c8>
   13dcc:	add	r3, pc, r3
   13dd0:	ldr	r3, [r3]
   13dd4:	mov	r0, r3
   13dd8:	sub	sp, fp, #4
   13ddc:	pop	{fp, pc}
   13de0:	andeq	r2, r3, ip, lsr #5
   13de4:	push	{fp, lr}
   13de8:	add	fp, sp, #4
   13dec:	sub	sp, sp, #32
   13df0:	str	r0, [fp, #-24]	; 0xffffffe8
   13df4:	str	r1, [fp, #-28]	; 0xffffffe4
   13df8:	str	r2, [fp, #-32]	; 0xffffffe0
   13dfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e00:	str	r3, [fp, #-12]
   13e04:	b	13ef8 <_start@@Base+0x14e0>
   13e08:	ldr	r3, [fp, #-12]
   13e0c:	lsl	r3, r3, #1
   13e10:	str	r3, [fp, #-8]
   13e14:	ldr	r2, [fp, #-8]
   13e18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13e1c:	cmp	r2, r3
   13e20:	bcs	13e70 <_start@@Base+0x1458>
   13e24:	ldr	r1, [fp, #-8]
   13e28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13e2c:	bl	13980 <_start@@Base+0xf68>
   13e30:	mov	r3, r0
   13e34:	strb	r3, [fp, #-13]
   13e38:	ldr	r3, [fp, #-8]
   13e3c:	add	r3, r3, #1
   13e40:	mov	r1, r3
   13e44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13e48:	bl	13980 <_start@@Base+0xf68>
   13e4c:	mov	r3, r0
   13e50:	strb	r3, [fp, #-14]
   13e54:	ldrb	r2, [fp, #-13]
   13e58:	ldrb	r3, [fp, #-14]
   13e5c:	cmp	r2, r3
   13e60:	bcs	13e70 <_start@@Base+0x1458>
   13e64:	ldr	r3, [fp, #-8]
   13e68:	add	r3, r3, #1
   13e6c:	str	r3, [fp, #-8]
   13e70:	ldr	r1, [fp, #-12]
   13e74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13e78:	bl	13980 <_start@@Base+0xf68>
   13e7c:	mov	r3, r0
   13e80:	strb	r3, [fp, #-15]
   13e84:	ldr	r1, [fp, #-8]
   13e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13e8c:	bl	13980 <_start@@Base+0xf68>
   13e90:	mov	r3, r0
   13e94:	strb	r3, [fp, #-13]
   13e98:	ldrb	r2, [fp, #-15]
   13e9c:	ldrb	r3, [fp, #-13]
   13ea0:	cmp	r2, r3
   13ea4:	bcs	13f10 <_start@@Base+0x14f8>
   13ea8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13eac:	ldr	r3, [fp, #-8]
   13eb0:	add	r3, r2, r3
   13eb4:	ldrb	r3, [r3]
   13eb8:	strb	r3, [fp, #-16]
   13ebc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13ec0:	ldr	r3, [fp, #-8]
   13ec4:	add	r3, r2, r3
   13ec8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13ecc:	ldr	r2, [fp, #-12]
   13ed0:	add	r2, r1, r2
   13ed4:	ldrb	r2, [r2]
   13ed8:	strb	r2, [r3]
   13edc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13ee0:	ldr	r3, [fp, #-12]
   13ee4:	add	r3, r2, r3
   13ee8:	ldrb	r2, [fp, #-16]
   13eec:	strb	r2, [r3]
   13ef0:	ldr	r3, [fp, #-8]
   13ef4:	str	r3, [fp, #-12]
   13ef8:	ldr	r3, [fp, #-12]
   13efc:	lsl	r2, r3, #1
   13f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13f04:	cmp	r2, r3
   13f08:	bls	13e08 <_start@@Base+0x13f0>
   13f0c:	b	13f14 <_start@@Base+0x14fc>
   13f10:	nop			; (mov r0, r0)
   13f14:	sub	sp, fp, #4
   13f18:	pop	{fp, pc}
   13f1c:	push	{fp, lr}
   13f20:	add	fp, sp, #4
   13f24:	sub	sp, sp, #24
   13f28:	str	r0, [fp, #-24]	; 0xffffffe8
   13f2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f30:	bl	13958 <_start@@Base+0xf40>
   13f34:	str	r0, [fp, #-16]
   13f38:	ldr	r3, [fp, #-16]
   13f3c:	cmp	r3, #0
   13f40:	beq	13fe8 <_start@@Base+0x15d0>
   13f44:	ldr	r3, [fp, #-16]
   13f48:	sub	r3, r3, #1
   13f4c:	str	r3, [fp, #-12]
   13f50:	ldr	r3, [fp, #-16]
   13f54:	lsr	r3, r3, #1
   13f58:	str	r3, [fp, #-8]
   13f5c:	ldr	r2, [fp, #-12]
   13f60:	ldr	r1, [fp, #-8]
   13f64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f68:	bl	13de4 <_start@@Base+0x13cc>
   13f6c:	ldr	r3, [fp, #-8]
   13f70:	sub	r2, r3, #1
   13f74:	str	r2, [fp, #-8]
   13f78:	cmp	r3, #0
   13f7c:	bne	13f5c <_start@@Base+0x1544>
   13f80:	b	13fd8 <_start@@Base+0x15c0>
   13f84:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f88:	ldr	r3, [fp, #-12]
   13f8c:	add	r3, r2, r3
   13f90:	ldrb	r3, [r3]
   13f94:	strb	r3, [fp, #-17]	; 0xffffffef
   13f98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f9c:	ldr	r3, [fp, #-12]
   13fa0:	add	r3, r2, r3
   13fa4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13fa8:	ldrb	r2, [r2]
   13fac:	strb	r2, [r3]
   13fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fb4:	ldrb	r2, [fp, #-17]	; 0xffffffef
   13fb8:	strb	r2, [r3]
   13fbc:	ldr	r3, [fp, #-12]
   13fc0:	sub	r3, r3, #1
   13fc4:	str	r3, [fp, #-12]
   13fc8:	ldr	r2, [fp, #-12]
   13fcc:	mov	r1, #0
   13fd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13fd4:	bl	13de4 <_start@@Base+0x13cc>
   13fd8:	ldr	r3, [fp, #-12]
   13fdc:	cmp	r3, #0
   13fe0:	bne	13f84 <_start@@Base+0x156c>
   13fe4:	b	13fec <_start@@Base+0x15d4>
   13fe8:	nop			; (mov r0, r0)
   13fec:	sub	sp, fp, #4
   13ff0:	pop	{fp, pc}
   13ff4:	push	{fp, lr}
   13ff8:	add	fp, sp, #4
   13ffc:	sub	sp, sp, #8
   14000:	str	r0, [fp, #-8]
   14004:	ldr	r0, [fp, #-8]
   14008:	bl	13f1c <_start@@Base+0x1504>
   1400c:	nop			; (mov r0, r0)
   14010:	sub	sp, fp, #4
   14014:	pop	{fp, pc}
   14018:	push	{fp, lr}
   1401c:	add	fp, sp, #4
   14020:	sub	sp, sp, #8
   14024:	str	r0, [fp, #-8]
   14028:	str	r1, [fp, #-12]
   1402c:	ldr	r0, [fp, #-8]
   14030:	bl	134f8 <_start@@Base+0xae0>
   14034:	mov	r2, r0
   14038:	ldr	r3, [fp, #-12]
   1403c:	cmp	r2, r3
   14040:	bhi	14064 <_start@@Base+0x164c>
   14044:	ldr	r3, [pc, #60]	; 14088 <_start@@Base+0x1670>
   14048:	add	r3, pc, r3
   1404c:	ldr	r2, [pc, #56]	; 1408c <_start@@Base+0x1674>
   14050:	ldr	r1, [pc, #56]	; 14090 <_start@@Base+0x1678>
   14054:	add	r1, pc, r1
   14058:	ldr	r0, [pc, #52]	; 14094 <_start@@Base+0x167c>
   1405c:	add	r0, pc, r0
   14060:	bl	12a08 <__assert_fail@plt>
   14064:	ldr	r2, [fp, #-8]
   14068:	ldr	r3, [fp, #-12]
   1406c:	add	r3, r2, r3
   14070:	mov	r0, r3
   14074:	bl	13160 <_start@@Base+0x748>
   14078:	mov	r3, r0
   1407c:	mov	r0, r3
   14080:	sub	sp, fp, #4
   14084:	pop	{fp, pc}
   14088:	andeq	r0, r2, r4, asr #9
   1408c:	muleq	r0, r5, r1
   14090:	andeq	ip, r1, r8, ror #19
   14094:	andeq	ip, r1, r0, ror #20
   14098:	push	{fp, lr}
   1409c:	add	fp, sp, #4
   140a0:	sub	sp, sp, #16
   140a4:	str	r0, [fp, #-16]
   140a8:	str	r1, [fp, #-20]	; 0xffffffec
   140ac:	mov	r3, #0
   140b0:	str	r3, [fp, #-8]
   140b4:	b	140f8 <_start@@Base+0x16e0>
   140b8:	ldr	r1, [fp, #-8]
   140bc:	ldr	r0, [fp, #-16]
   140c0:	bl	135c4 <_start@@Base+0xbac>
   140c4:	str	r0, [fp, #-12]
   140c8:	mov	r2, #0
   140cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   140d0:	ldr	r0, [fp, #-12]
   140d4:	bl	1387c <_start@@Base+0xe64>
   140d8:	mov	r3, r0
   140dc:	cmp	r3, #0
   140e0:	bne	140ec <_start@@Base+0x16d4>
   140e4:	ldr	r3, [fp, #-8]
   140e8:	b	1411c <_start@@Base+0x1704>
   140ec:	ldr	r3, [fp, #-8]
   140f0:	add	r3, r3, #1
   140f4:	str	r3, [fp, #-8]
   140f8:	ldr	r0, [fp, #-16]
   140fc:	bl	13580 <_start@@Base+0xb68>
   14100:	mov	r2, r0
   14104:	ldr	r3, [fp, #-8]
   14108:	cmp	r2, r3
   1410c:	bhi	140b8 <_start@@Base+0x16a0>
   14110:	ldr	r3, [pc, #16]	; 14128 <_start@@Base+0x1710>
   14114:	add	r3, pc, r3
   14118:	ldr	r3, [r3]
   1411c:	mov	r0, r3
   14120:	sub	sp, fp, #4
   14124:	pop	{fp, pc}
   14128:	andeq	r1, r3, r4, ror #30
   1412c:	push	{fp, lr}
   14130:	add	fp, sp, #4
   14134:	sub	sp, sp, #24
   14138:	str	r0, [fp, #-16]
   1413c:	str	r1, [fp, #-20]	; 0xffffffec
   14140:	str	r2, [fp, #-24]	; 0xffffffe8
   14144:	mov	r3, #0
   14148:	str	r3, [fp, #-8]
   1414c:	b	14190 <_start@@Base+0x1778>
   14150:	ldr	r1, [fp, #-8]
   14154:	ldr	r0, [fp, #-16]
   14158:	bl	135c4 <_start@@Base+0xbac>
   1415c:	str	r0, [fp, #-12]
   14160:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14164:	ldr	r1, [fp, #-20]	; 0xffffffec
   14168:	ldr	r0, [fp, #-12]
   1416c:	bl	137e0 <_start@@Base+0xdc8>
   14170:	mov	r3, r0
   14174:	cmp	r3, #0
   14178:	bne	14184 <_start@@Base+0x176c>
   1417c:	ldr	r3, [fp, #-8]
   14180:	b	141b4 <_start@@Base+0x179c>
   14184:	ldr	r3, [fp, #-8]
   14188:	add	r3, r3, #1
   1418c:	str	r3, [fp, #-8]
   14190:	ldr	r0, [fp, #-16]
   14194:	bl	13580 <_start@@Base+0xb68>
   14198:	mov	r2, r0
   1419c:	ldr	r3, [fp, #-8]
   141a0:	cmp	r2, r3
   141a4:	bhi	14150 <_start@@Base+0x1738>
   141a8:	ldr	r3, [pc, #16]	; 141c0 <_start@@Base+0x17a8>
   141ac:	add	r3, pc, r3
   141b0:	ldr	r3, [r3]
   141b4:	mov	r0, r3
   141b8:	sub	sp, fp, #4
   141bc:	pop	{fp, pc}
   141c0:	andeq	r1, r3, ip, asr #29
   141c4:	push	{fp, lr}
   141c8:	add	fp, sp, #4
   141cc:	sub	sp, sp, #24
   141d0:	str	r0, [fp, #-16]
   141d4:	str	r1, [fp, #-20]	; 0xffffffec
   141d8:	str	r2, [fp, #-24]	; 0xffffffe8
   141dc:	str	r3, [fp, #-28]	; 0xffffffe4
   141e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141e4:	str	r3, [fp, #-8]
   141e8:	b	1422c <_start@@Base+0x1814>
   141ec:	ldr	r1, [fp, #-8]
   141f0:	ldr	r0, [fp, #-16]
   141f4:	bl	135c4 <_start@@Base+0xbac>
   141f8:	str	r0, [fp, #-12]
   141fc:	mov	r2, #0
   14200:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14204:	ldr	r0, [fp, #-12]
   14208:	bl	1387c <_start@@Base+0xe64>
   1420c:	mov	r3, r0
   14210:	cmp	r3, #0
   14214:	bne	14220 <_start@@Base+0x1808>
   14218:	ldr	r3, [fp, #-8]
   1421c:	b	14270 <_start@@Base+0x1858>
   14220:	ldr	r3, [fp, #-8]
   14224:	add	r3, r3, #1
   14228:	str	r3, [fp, #-8]
   1422c:	ldr	r0, [fp, #-16]
   14230:	bl	13580 <_start@@Base+0xb68>
   14234:	mov	r2, r0
   14238:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1423c:	cmp	r2, r3
   14240:	bhi	14254 <_start@@Base+0x183c>
   14244:	ldr	r0, [fp, #-16]
   14248:	bl	13580 <_start@@Base+0xb68>
   1424c:	mov	r3, r0
   14250:	b	14258 <_start@@Base+0x1840>
   14254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14258:	ldr	r2, [fp, #-8]
   1425c:	cmp	r3, r2
   14260:	bhi	141ec <_start@@Base+0x17d4>
   14264:	ldr	r3, [pc, #16]	; 1427c <_start@@Base+0x1864>
   14268:	add	r3, pc, r3
   1426c:	ldr	r3, [r3]
   14270:	mov	r0, r3
   14274:	sub	sp, fp, #4
   14278:	pop	{fp, pc}
   1427c:	andeq	r1, r3, r0, lsl lr
   14280:	push	{fp, lr}
   14284:	add	fp, sp, #4
   14288:	sub	sp, sp, #24
   1428c:	str	r0, [fp, #-16]
   14290:	str	r1, [fp, #-20]	; 0xffffffec
   14294:	str	r2, [fp, #-24]	; 0xffffffe8
   14298:	str	r3, [fp, #-28]	; 0xffffffe4
   1429c:	ldr	r3, [fp, #-20]	; 0xffffffec
   142a0:	str	r3, [fp, #-8]
   142a4:	b	142e8 <_start@@Base+0x18d0>
   142a8:	ldr	r1, [fp, #-8]
   142ac:	ldr	r0, [fp, #-16]
   142b0:	bl	135c4 <_start@@Base+0xbac>
   142b4:	str	r0, [fp, #-12]
   142b8:	ldr	r2, [fp, #4]
   142bc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   142c0:	ldr	r0, [fp, #-12]
   142c4:	bl	137e0 <_start@@Base+0xdc8>
   142c8:	mov	r3, r0
   142cc:	cmp	r3, #0
   142d0:	bne	142dc <_start@@Base+0x18c4>
   142d4:	ldr	r3, [fp, #-8]
   142d8:	b	1432c <_start@@Base+0x1914>
   142dc:	ldr	r3, [fp, #-8]
   142e0:	add	r3, r3, #1
   142e4:	str	r3, [fp, #-8]
   142e8:	ldr	r0, [fp, #-16]
   142ec:	bl	13580 <_start@@Base+0xb68>
   142f0:	mov	r2, r0
   142f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142f8:	cmp	r2, r3
   142fc:	bhi	14310 <_start@@Base+0x18f8>
   14300:	ldr	r0, [fp, #-16]
   14304:	bl	13580 <_start@@Base+0xb68>
   14308:	mov	r3, r0
   1430c:	b	14314 <_start@@Base+0x18fc>
   14310:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14314:	ldr	r2, [fp, #-8]
   14318:	cmp	r3, r2
   1431c:	bhi	142a8 <_start@@Base+0x1890>
   14320:	ldr	r3, [pc, #16]	; 14338 <_start@@Base+0x1920>
   14324:	add	r3, pc, r3
   14328:	ldr	r3, [r3]
   1432c:	mov	r0, r3
   14330:	sub	sp, fp, #4
   14334:	pop	{fp, pc}
   14338:	andeq	r1, r3, r4, asr sp
   1433c:	push	{fp, lr}
   14340:	add	fp, sp, #4
   14344:	sub	sp, sp, #16
   14348:	str	r0, [fp, #-16]
   1434c:	str	r1, [fp, #-20]	; 0xffffffec
   14350:	ldr	r0, [fp, #-16]
   14354:	bl	13580 <_start@@Base+0xb68>
   14358:	str	r0, [fp, #-8]
   1435c:	b	14394 <_start@@Base+0x197c>
   14360:	ldr	r1, [fp, #-8]
   14364:	ldr	r0, [fp, #-16]
   14368:	bl	135c4 <_start@@Base+0xbac>
   1436c:	str	r0, [fp, #-12]
   14370:	mov	r2, #0
   14374:	ldr	r1, [fp, #-20]	; 0xffffffec
   14378:	ldr	r0, [fp, #-12]
   1437c:	bl	1387c <_start@@Base+0xe64>
   14380:	mov	r3, r0
   14384:	cmp	r3, #0
   14388:	bne	14394 <_start@@Base+0x197c>
   1438c:	ldr	r3, [fp, #-8]
   14390:	b	143b4 <_start@@Base+0x199c>
   14394:	ldr	r3, [fp, #-8]
   14398:	sub	r2, r3, #1
   1439c:	str	r2, [fp, #-8]
   143a0:	cmp	r3, #0
   143a4:	bne	14360 <_start@@Base+0x1948>
   143a8:	ldr	r3, [pc, #16]	; 143c0 <_start@@Base+0x19a8>
   143ac:	add	r3, pc, r3
   143b0:	ldr	r3, [r3]
   143b4:	mov	r0, r3
   143b8:	sub	sp, fp, #4
   143bc:	pop	{fp, pc}
   143c0:	andeq	r1, r3, ip, asr #25
   143c4:	push	{fp, lr}
   143c8:	add	fp, sp, #4
   143cc:	sub	sp, sp, #24
   143d0:	str	r0, [fp, #-16]
   143d4:	str	r1, [fp, #-20]	; 0xffffffec
   143d8:	str	r2, [fp, #-24]	; 0xffffffe8
   143dc:	ldr	r0, [fp, #-16]
   143e0:	bl	13580 <_start@@Base+0xb68>
   143e4:	str	r0, [fp, #-8]
   143e8:	b	14420 <_start@@Base+0x1a08>
   143ec:	ldr	r1, [fp, #-8]
   143f0:	ldr	r0, [fp, #-16]
   143f4:	bl	135c4 <_start@@Base+0xbac>
   143f8:	str	r0, [fp, #-12]
   143fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14400:	ldr	r1, [fp, #-20]	; 0xffffffec
   14404:	ldr	r0, [fp, #-12]
   14408:	bl	137e0 <_start@@Base+0xdc8>
   1440c:	mov	r3, r0
   14410:	cmp	r3, #0
   14414:	bne	14420 <_start@@Base+0x1a08>
   14418:	ldr	r3, [fp, #-8]
   1441c:	b	14440 <_start@@Base+0x1a28>
   14420:	ldr	r3, [fp, #-8]
   14424:	sub	r2, r3, #1
   14428:	str	r2, [fp, #-8]
   1442c:	cmp	r3, #0
   14430:	bne	143ec <_start@@Base+0x19d4>
   14434:	ldr	r3, [pc, #16]	; 1444c <_start@@Base+0x1a34>
   14438:	add	r3, pc, r3
   1443c:	ldr	r3, [r3]
   14440:	mov	r0, r3
   14444:	sub	sp, fp, #4
   14448:	pop	{fp, pc}
   1444c:	andeq	r1, r3, r0, asr #24
   14450:	push	{fp, lr}
   14454:	add	fp, sp, #4
   14458:	sub	sp, sp, #24
   1445c:	str	r0, [fp, #-16]
   14460:	str	r1, [fp, #-20]	; 0xffffffec
   14464:	str	r2, [fp, #-24]	; 0xffffffe8
   14468:	str	r3, [fp, #-28]	; 0xffffffe4
   1446c:	ldr	r0, [fp, #-16]
   14470:	bl	13580 <_start@@Base+0xb68>
   14474:	mov	r2, r0
   14478:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1447c:	cmp	r2, r3
   14480:	bhi	14494 <_start@@Base+0x1a7c>
   14484:	ldr	r0, [fp, #-16]
   14488:	bl	13580 <_start@@Base+0xb68>
   1448c:	mov	r3, r0
   14490:	b	14498 <_start@@Base+0x1a80>
   14494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14498:	str	r3, [fp, #-8]
   1449c:	b	144d4 <_start@@Base+0x1abc>
   144a0:	ldr	r1, [fp, #-8]
   144a4:	ldr	r0, [fp, #-16]
   144a8:	bl	135c4 <_start@@Base+0xbac>
   144ac:	str	r0, [fp, #-12]
   144b0:	mov	r2, #0
   144b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   144b8:	ldr	r0, [fp, #-12]
   144bc:	bl	1387c <_start@@Base+0xe64>
   144c0:	mov	r3, r0
   144c4:	cmp	r3, #0
   144c8:	bne	144d4 <_start@@Base+0x1abc>
   144cc:	ldr	r3, [fp, #-8]
   144d0:	b	144f8 <_start@@Base+0x1ae0>
   144d4:	ldr	r3, [fp, #-8]
   144d8:	sub	r2, r3, #1
   144dc:	str	r2, [fp, #-8]
   144e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   144e4:	cmp	r3, r2
   144e8:	bhi	144a0 <_start@@Base+0x1a88>
   144ec:	ldr	r3, [pc, #16]	; 14504 <_start@@Base+0x1aec>
   144f0:	add	r3, pc, r3
   144f4:	ldr	r3, [r3]
   144f8:	mov	r0, r3
   144fc:	sub	sp, fp, #4
   14500:	pop	{fp, pc}
   14504:	andeq	r1, r3, r8, lsl #23
   14508:	push	{fp, lr}
   1450c:	add	fp, sp, #4
   14510:	sub	sp, sp, #24
   14514:	str	r0, [fp, #-16]
   14518:	str	r1, [fp, #-20]	; 0xffffffec
   1451c:	str	r2, [fp, #-24]	; 0xffffffe8
   14520:	str	r3, [fp, #-28]	; 0xffffffe4
   14524:	ldr	r0, [fp, #-16]
   14528:	bl	13580 <_start@@Base+0xb68>
   1452c:	mov	r2, r0
   14530:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14534:	cmp	r2, r3
   14538:	bhi	1454c <_start@@Base+0x1b34>
   1453c:	ldr	r0, [fp, #-16]
   14540:	bl	13580 <_start@@Base+0xb68>
   14544:	mov	r3, r0
   14548:	b	14550 <_start@@Base+0x1b38>
   1454c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14550:	str	r3, [fp, #-8]
   14554:	b	1458c <_start@@Base+0x1b74>
   14558:	ldr	r1, [fp, #-8]
   1455c:	ldr	r0, [fp, #-16]
   14560:	bl	135c4 <_start@@Base+0xbac>
   14564:	str	r0, [fp, #-12]
   14568:	ldr	r2, [fp, #4]
   1456c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14570:	ldr	r0, [fp, #-12]
   14574:	bl	137e0 <_start@@Base+0xdc8>
   14578:	mov	r3, r0
   1457c:	cmp	r3, #0
   14580:	bne	1458c <_start@@Base+0x1b74>
   14584:	ldr	r3, [fp, #-8]
   14588:	b	145b0 <_start@@Base+0x1b98>
   1458c:	ldr	r3, [fp, #-8]
   14590:	sub	r2, r3, #1
   14594:	str	r2, [fp, #-8]
   14598:	ldr	r2, [fp, #-20]	; 0xffffffec
   1459c:	cmp	r3, r2
   145a0:	bhi	14558 <_start@@Base+0x1b40>
   145a4:	ldr	r3, [pc, #16]	; 145bc <_start@@Base+0x1ba4>
   145a8:	add	r3, pc, r3
   145ac:	ldr	r3, [r3]
   145b0:	mov	r0, r3
   145b4:	sub	sp, fp, #4
   145b8:	pop	{fp, pc}
   145bc:	ldrdeq	r1, [r3], -r0
   145c0:	push	{fp, lr}
   145c4:	add	fp, sp, #4
   145c8:	sub	sp, sp, #16
   145cc:	str	r0, [fp, #-16]
   145d0:	str	r1, [fp, #-20]	; 0xffffffec
   145d4:	mov	r3, #0
   145d8:	str	r3, [fp, #-12]
   145dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   145e0:	cmp	r3, #0
   145e4:	bne	145f0 <_start@@Base+0x1bd8>
   145e8:	mov	r3, #1
   145ec:	b	14654 <_start@@Base+0x1c3c>
   145f0:	sub	r3, fp, #12
   145f4:	mov	r2, #4
   145f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   145fc:	mov	r0, r3
   14600:	bl	129cc <strncpy@plt>
   14604:	ldr	r3, [fp, #-12]
   14608:	mov	r0, r3
   1460c:	bl	13380 <_start@@Base+0x968>
   14610:	mov	r3, r0
   14614:	str	r3, [fp, #-12]
   14618:	ldr	r3, [fp, #-16]
   1461c:	add	r3, r3, #4
   14620:	mov	r0, r3
   14624:	bl	133a4 <_start@@Base+0x98c>
   14628:	str	r0, [fp, #-8]
   1462c:	ldr	r3, [fp, #-12]
   14630:	cmp	r3, #0
   14634:	beq	14648 <_start@@Base+0x1c30>
   14638:	ldr	r3, [fp, #-12]
   1463c:	ldr	r2, [fp, #-8]
   14640:	cmp	r2, r3
   14644:	bne	14650 <_start@@Base+0x1c38>
   14648:	mov	r3, #1
   1464c:	b	14654 <_start@@Base+0x1c3c>
   14650:	mov	r3, #0
   14654:	mov	r0, r3
   14658:	sub	sp, fp, #4
   1465c:	pop	{fp, pc}
   14660:	push	{fp, lr}
   14664:	add	fp, sp, #4
   14668:	sub	sp, sp, #8
   1466c:	str	r0, [fp, #-8]
   14670:	str	r1, [fp, #-12]
   14674:	ldr	r3, [fp, #-12]
   14678:	cmp	r3, #0
   1467c:	beq	146a0 <_start@@Base+0x1c88>
   14680:	ldr	r3, [fp, #-8]
   14684:	add	r3, r3, #4
   14688:	mov	r0, r3
   1468c:	bl	133a4 <_start@@Base+0x98c>
   14690:	mov	r2, r0
   14694:	ldr	r3, [fp, #-12]
   14698:	cmp	r2, r3
   1469c:	bne	146a8 <_start@@Base+0x1c90>
   146a0:	mov	r3, #1
   146a4:	b	146ac <_start@@Base+0x1c94>
   146a8:	mov	r3, #0
   146ac:	mov	r0, r3
   146b0:	sub	sp, fp, #4
   146b4:	pop	{fp, pc}
   146b8:	push	{fp, lr}
   146bc:	add	fp, sp, #4
   146c0:	sub	sp, sp, #8
   146c4:	str	r0, [fp, #-8]
   146c8:	ldr	r3, [fp, #-8]
   146cc:	add	r3, r3, #4
   146d0:	mov	r0, r3
   146d4:	bl	133a4 <_start@@Base+0x98c>
   146d8:	mov	r3, r0
   146dc:	mov	r0, r3
   146e0:	sub	sp, fp, #4
   146e4:	pop	{fp, pc}
   146e8:	push	{fp, lr}
   146ec:	add	fp, sp, #4
   146f0:	sub	sp, sp, #8
   146f4:	str	r0, [fp, #-8]
   146f8:	str	r1, [fp, #-12]
   146fc:	ldr	r3, [fp, #-12]
   14700:	cmp	r3, #0
   14704:	beq	1471c <_start@@Base+0x1d04>
   14708:	ldr	r0, [fp, #-8]
   1470c:	bl	131f4 <_start@@Base+0x7dc>
   14710:	mov	r2, r0
   14714:	ldr	r3, [fp, #-12]
   14718:	str	r2, [r3]
   1471c:	ldr	r3, [fp, #-8]
   14720:	add	r3, r3, #4
   14724:	mov	r0, r3
   14728:	sub	sp, fp, #4
   1472c:	pop	{fp, pc}
   14730:	push	{fp}		; (str fp, [sp, #-4]!)
   14734:	add	fp, sp, #0
   14738:	sub	sp, sp, #12
   1473c:	mov	r3, r0
   14740:	strb	r3, [fp, #-5]
   14744:	ldrsb	r3, [fp, #-5]
   14748:	mov	r0, r3
   1474c:	add	sp, fp, #0
   14750:	pop	{fp}		; (ldr fp, [sp], #4)
   14754:	bx	lr
   14758:	push	{fp}		; (str fp, [sp, #-4]!)
   1475c:	add	fp, sp, #0
   14760:	sub	sp, sp, #12
   14764:	mov	r3, r0
   14768:	strb	r3, [fp, #-5]
   1476c:	ldrsb	r3, [fp, #-5]
   14770:	mov	r0, r3
   14774:	add	sp, fp, #0
   14778:	pop	{fp}		; (ldr fp, [sp], #4)
   1477c:	bx	lr
   14780:	push	{fp, lr}
   14784:	add	fp, sp, #4
   14788:	sub	sp, sp, #8
   1478c:	str	r0, [fp, #-8]
   14790:	ldr	r3, [fp, #-8]
   14794:	ldrsb	r3, [r3]
   14798:	mov	r0, r3
   1479c:	bl	14730 <_start@@Base+0x1d18>
   147a0:	mov	r3, r0
   147a4:	mov	r0, r3
   147a8:	sub	sp, fp, #4
   147ac:	pop	{fp, pc}
   147b0:	push	{fp}		; (str fp, [sp, #-4]!)
   147b4:	add	fp, sp, #0
   147b8:	sub	sp, sp, #12
   147bc:	mov	r3, r0
   147c0:	strb	r3, [fp, #-5]
   147c4:	ldrsb	r3, [fp, #-5]
   147c8:	cmp	r3, #2
   147cc:	beq	147ec <_start@@Base+0x1dd4>
   147d0:	cmp	r3, #8
   147d4:	beq	147f8 <_start@@Base+0x1de0>
   147d8:	cmp	r3, #1
   147dc:	bne	14804 <_start@@Base+0x1dec>
   147e0:	ldr	r3, [pc, #52]	; 1481c <_start@@Base+0x1e04>
   147e4:	add	r3, pc, r3
   147e8:	b	1480c <_start@@Base+0x1df4>
   147ec:	ldr	r3, [pc, #44]	; 14820 <_start@@Base+0x1e08>
   147f0:	add	r3, pc, r3
   147f4:	b	1480c <_start@@Base+0x1df4>
   147f8:	ldr	r3, [pc, #36]	; 14824 <_start@@Base+0x1e0c>
   147fc:	add	r3, pc, r3
   14800:	b	1480c <_start@@Base+0x1df4>
   14804:	ldr	r3, [pc, #28]	; 14828 <_start@@Base+0x1e10>
   14808:	add	r3, pc, r3
   1480c:	mov	r0, r3
   14810:	add	sp, fp, #0
   14814:	pop	{fp}		; (ldr fp, [sp], #4)
   14818:	bx	lr
   1481c:	andeq	ip, r1, r0, lsl r3
   14820:	andeq	ip, r1, r8, lsl #6
   14824:	andeq	ip, r1, r4, lsl #6
   14828:	andeq	ip, r1, r0, lsl #6
   1482c:	push	{fp}		; (str fp, [sp, #-4]!)
   14830:	add	fp, sp, #0
   14834:	sub	sp, sp, #12
   14838:	mov	r3, r0
   1483c:	strb	r3, [fp, #-5]
   14840:	ldrsb	r3, [fp, #-5]
   14844:	cmp	r3, #2
   14848:	beq	14864 <_start@@Base+0x1e4c>
   1484c:	cmp	r3, #8
   14850:	beq	1486c <_start@@Base+0x1e54>
   14854:	cmp	r3, #1
   14858:	bne	14874 <_start@@Base+0x1e5c>
   1485c:	mov	r3, #1
   14860:	b	14878 <_start@@Base+0x1e60>
   14864:	mov	r3, #1
   14868:	b	14878 <_start@@Base+0x1e60>
   1486c:	mov	r3, #1
   14870:	b	14878 <_start@@Base+0x1e60>
   14874:	mov	r3, #0
   14878:	mov	r0, r3
   1487c:	add	sp, fp, #0
   14880:	pop	{fp}		; (ldr fp, [sp], #4)
   14884:	bx	lr
   14888:	push	{fp}		; (str fp, [sp, #-4]!)
   1488c:	add	fp, sp, #0
   14890:	sub	sp, sp, #12
   14894:	str	r0, [fp, #-8]
   14898:	str	r1, [fp, #-12]
   1489c:	ldr	r3, [fp, #-12]
   148a0:	lsl	r3, r3, #2
   148a4:	ldr	r2, [fp, #-8]
   148a8:	add	r3, r2, r3
   148ac:	mov	r0, r3
   148b0:	add	sp, fp, #0
   148b4:	pop	{fp}		; (ldr fp, [sp], #4)
   148b8:	bx	lr
   148bc:	push	{fp, lr}
   148c0:	add	fp, sp, #4
   148c4:	sub	sp, sp, #8
   148c8:	str	r0, [fp, #-8]
   148cc:	str	r1, [fp, #-12]
   148d0:	ldr	r0, [fp, #-8]
   148d4:	bl	134f8 <_start@@Base+0xae0>
   148d8:	mov	r2, r0
   148dc:	ldr	r3, [fp, #-12]
   148e0:	cmp	r2, r3
   148e4:	bhi	14908 <_start@@Base+0x1ef0>
   148e8:	ldr	r3, [pc, #52]	; 14924 <_start@@Base+0x1f0c>
   148ec:	add	r3, pc, r3
   148f0:	mov	r2, #380	; 0x17c
   148f4:	ldr	r1, [pc, #44]	; 14928 <_start@@Base+0x1f10>
   148f8:	add	r1, pc, r1
   148fc:	ldr	r0, [pc, #40]	; 1492c <_start@@Base+0x1f14>
   14900:	add	r0, pc, r0
   14904:	bl	12a08 <__assert_fail@plt>
   14908:	ldr	r3, [fp, #-12]
   1490c:	lsl	r3, r3, #2
   14910:	ldr	r2, [fp, #-8]
   14914:	add	r3, r2, r3
   14918:	mov	r0, r3
   1491c:	sub	sp, fp, #4
   14920:	pop	{fp, pc}
   14924:			; <UNDEFINED> instruction: 0x0001f7b8
   14928:	andeq	ip, r1, r4, lsl r2
   1492c:			; <UNDEFINED> instruction: 0x0001c1bc
   14930:	push	{fp}		; (str fp, [sp, #-4]!)
   14934:	add	fp, sp, #0
   14938:	mov	r3, #4
   1493c:	mov	r0, r3
   14940:	add	sp, fp, #0
   14944:	pop	{fp}		; (ldr fp, [sp], #4)
   14948:	bx	lr
   1494c:	push	{fp, lr}
   14950:	add	fp, sp, #4
   14954:	sub	sp, sp, #8
   14958:	str	r0, [fp, #-8]
   1495c:	ldr	r3, [fp, #-8]
   14960:	cmp	r3, #0
   14964:	beq	14980 <_start@@Base+0x1f68>
   14968:	ldr	r3, [fp, #-8]
   1496c:	sub	r3, r3, #4
   14970:	mov	r0, r3
   14974:	bl	131f4 <_start@@Base+0x7dc>
   14978:	mov	r3, r0
   1497c:	b	14984 <_start@@Base+0x1f6c>
   14980:	mov	r3, #0
   14984:	mov	r0, r3
   14988:	sub	sp, fp, #4
   1498c:	pop	{fp, pc}
   14990:	push	{fp, lr}
   14994:	add	fp, sp, #4
   14998:	sub	sp, sp, #8
   1499c:	str	r0, [fp, #-8]
   149a0:	ldr	r3, [fp, #-8]
   149a4:	cmp	r3, #0
   149a8:	beq	149c0 <_start@@Base+0x1fa8>
   149ac:	ldr	r3, [fp, #-8]
   149b0:	mov	r0, r3
   149b4:	bl	12e14 <_start@@Base+0x3fc>
   149b8:	mov	r3, r0
   149bc:	b	149c4 <_start@@Base+0x1fac>
   149c0:	mov	r3, #0
   149c4:	mov	r0, r3
   149c8:	sub	sp, fp, #4
   149cc:	pop	{fp, pc}
   149d0:	push	{fp, lr}
   149d4:	add	fp, sp, #4
   149d8:	sub	sp, sp, #8
   149dc:	str	r0, [fp, #-8]
   149e0:	ldr	r3, [fp, #-8]
   149e4:	cmp	r3, #0
   149e8:	beq	14a04 <_start@@Base+0x1fec>
   149ec:	ldr	r3, [fp, #-8]
   149f0:	add	r3, r3, #2
   149f4:	mov	r0, r3
   149f8:	bl	12d94 <_start@@Base+0x37c>
   149fc:	mov	r3, r0
   14a00:	b	14a08 <_start@@Base+0x1ff0>
   14a04:	mov	r3, #0
   14a08:	mov	r0, r3
   14a0c:	sub	sp, fp, #4
   14a10:	pop	{fp, pc}
   14a14:	push	{fp}		; (str fp, [sp, #-4]!)
   14a18:	add	fp, sp, #0
   14a1c:	mov	r3, #0
   14a20:	mov	r0, r3
   14a24:	add	sp, fp, #0
   14a28:	pop	{fp}		; (ldr fp, [sp], #4)
   14a2c:	bx	lr
   14a30:	push	{fp}		; (str fp, [sp, #-4]!)
   14a34:	add	fp, sp, #0
   14a38:	mov	r3, #32
   14a3c:	mov	r0, r3
   14a40:	add	sp, fp, #0
   14a44:	pop	{fp}		; (ldr fp, [sp], #4)
   14a48:	bx	lr
   14a4c:	push	{fp, lr}
   14a50:	add	fp, sp, #4
   14a54:	sub	sp, sp, #8
   14a58:	str	r0, [fp, #-8]
   14a5c:	str	r1, [fp, #-12]
   14a60:	ldr	r3, [fp, #-8]
   14a64:	cmp	r3, #0
   14a68:	beq	14a9c <_start@@Base+0x2084>
   14a6c:	ldr	r1, [fp, #-12]
   14a70:	ldr	r0, [fp, #-8]
   14a74:	bl	145c0 <_start@@Base+0x1ba8>
   14a78:	mov	r3, r0
   14a7c:	cmp	r3, #0
   14a80:	beq	14a9c <_start@@Base+0x2084>
   14a84:	ldr	r0, [fp, #-8]
   14a88:	bl	131f4 <_start@@Base+0x7dc>
   14a8c:	mov	r2, r0
   14a90:	ldr	r3, [fp, #-8]
   14a94:	add	r3, r3, r2
   14a98:	b	14aa0 <_start@@Base+0x2088>
   14a9c:	mov	r3, #0
   14aa0:	mov	r0, r3
   14aa4:	sub	sp, fp, #4
   14aa8:	pop	{fp, pc}
   14aac:	push	{fp, lr}
   14ab0:	add	fp, sp, #4
   14ab4:	sub	sp, sp, #8
   14ab8:	str	r0, [fp, #-8]
   14abc:	str	r1, [fp, #-12]
   14ac0:	ldr	r3, [fp, #-8]
   14ac4:	cmp	r3, #0
   14ac8:	beq	14afc <_start@@Base+0x20e4>
   14acc:	ldr	r1, [fp, #-12]
   14ad0:	ldr	r0, [fp, #-8]
   14ad4:	bl	14660 <_start@@Base+0x1c48>
   14ad8:	mov	r3, r0
   14adc:	cmp	r3, #0
   14ae0:	beq	14afc <_start@@Base+0x20e4>
   14ae4:	ldr	r0, [fp, #-8]
   14ae8:	bl	131f4 <_start@@Base+0x7dc>
   14aec:	mov	r2, r0
   14af0:	ldr	r3, [fp, #-8]
   14af4:	add	r3, r3, r2
   14af8:	b	14b00 <_start@@Base+0x20e8>
   14afc:	mov	r3, #0
   14b00:	mov	r0, r3
   14b04:	sub	sp, fp, #4
   14b08:	pop	{fp, pc}
   14b0c:	push	{fp, lr}
   14b10:	add	fp, sp, #4
   14b14:	sub	sp, sp, #16
   14b18:	str	r0, [fp, #-16]
   14b1c:	ldr	r3, [pc, #80]	; 14b74 <_start@@Base+0x215c>
   14b20:	add	r3, pc, r3
   14b24:	str	r3, [fp, #-8]
   14b28:	ldr	r3, [fp, #-16]
   14b2c:	cmp	r3, #0
   14b30:	beq	14b64 <_start@@Base+0x214c>
   14b34:	ldr	r1, [fp, #-8]
   14b38:	ldr	r0, [fp, #-16]
   14b3c:	bl	145c0 <_start@@Base+0x1ba8>
   14b40:	mov	r3, r0
   14b44:	cmp	r3, #0
   14b48:	beq	14b64 <_start@@Base+0x214c>
   14b4c:	ldr	r0, [fp, #-16]
   14b50:	bl	131f4 <_start@@Base+0x7dc>
   14b54:	mov	r2, r0
   14b58:	ldr	r3, [fp, #-16]
   14b5c:	add	r3, r3, r2
   14b60:	b	14b68 <_start@@Base+0x2150>
   14b64:	mov	r3, #0
   14b68:	mov	r0, r3
   14b6c:	sub	sp, fp, #4
   14b70:	pop	{fp, pc}
   14b74:	andeq	ip, r1, r8, rrx
   14b78:	push	{fp, lr}
   14b7c:	add	fp, sp, #4
   14b80:	sub	sp, sp, #8
   14b84:	str	r0, [fp, #-8]
   14b88:	ldr	r3, [fp, #-8]
   14b8c:	cmp	r3, #0
   14b90:	beq	14bc4 <_start@@Base+0x21ac>
   14b94:	ldr	r1, [pc, #56]	; 14bd4 <_start@@Base+0x21bc>
   14b98:	ldr	r0, [fp, #-8]
   14b9c:	bl	14660 <_start@@Base+0x1c48>
   14ba0:	mov	r3, r0
   14ba4:	cmp	r3, #0
   14ba8:	beq	14bc4 <_start@@Base+0x21ac>
   14bac:	ldr	r0, [fp, #-8]
   14bb0:	bl	131f4 <_start@@Base+0x7dc>
   14bb4:	mov	r2, r0
   14bb8:	ldr	r3, [fp, #-8]
   14bbc:	add	r3, r3, r2
   14bc0:	b	14bc8 <_start@@Base+0x21b0>
   14bc4:	mov	r3, #0
   14bc8:	mov	r0, r3
   14bcc:	sub	sp, fp, #4
   14bd0:	pop	{fp, pc}
   14bd4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   14bd8:	push	{fp, lr}
   14bdc:	add	fp, sp, #4
   14be0:	sub	sp, sp, #8
   14be4:	str	r0, [fp, #-8]
   14be8:	ldr	r3, [fp, #-8]
   14bec:	cmp	r3, #0
   14bf0:	beq	14c0c <_start@@Base+0x21f4>
   14bf4:	ldr	r3, [fp, #-8]
   14bf8:	add	r3, r3, #8
   14bfc:	mov	r0, r3
   14c00:	bl	12fb8 <_start@@Base+0x5a0>
   14c04:	vmov.f32	s15, s0
   14c08:	b	14c10 <_start@@Base+0x21f8>
   14c0c:	vldr	s15, [pc, #8]	; 14c1c <_start@@Base+0x2204>
   14c10:	vmov.f32	s0, s15
   14c14:	sub	sp, fp, #4
   14c18:	pop	{fp, pc}
   14c1c:	andeq	r0, r0, r0
   14c20:	push	{fp, lr}
   14c24:	add	fp, sp, #4
   14c28:	sub	sp, sp, #8
   14c2c:	str	r0, [fp, #-8]
   14c30:	ldr	r3, [fp, #-8]
   14c34:	cmp	r3, #0
   14c38:	beq	14c50 <_start@@Base+0x2238>
   14c3c:	ldr	r3, [fp, #-8]
   14c40:	mov	r0, r3
   14c44:	bl	12c10 <_start@@Base+0x1f8>
   14c48:	mov	r3, r0
   14c4c:	b	14c54 <_start@@Base+0x223c>
   14c50:	mov	r3, #0
   14c54:	mov	r0, r3
   14c58:	sub	sp, fp, #4
   14c5c:	pop	{fp, pc}
   14c60:	push	{fp, lr}
   14c64:	add	fp, sp, #4
   14c68:	sub	sp, sp, #8
   14c6c:	str	r0, [fp, #-8]
   14c70:	ldr	r0, [fp, #-8]
   14c74:	bl	134f8 <_start@@Base+0xae0>
   14c78:	mov	r3, r0
   14c7c:	mov	r0, r3
   14c80:	sub	sp, fp, #4
   14c84:	pop	{fp, pc}
   14c88:	push	{fp, lr}
   14c8c:	add	fp, sp, #4
   14c90:	sub	sp, sp, #8
   14c94:	sub	r3, fp, #12
   14c98:	stm	r3, {r0, r1}
   14c9c:	ldr	r3, [fp, #-12]
   14ca0:	mov	r0, r3
   14ca4:	bl	134f8 <_start@@Base+0xae0>
   14ca8:	mov	r3, r0
   14cac:	mov	r0, r3
   14cb0:	sub	sp, fp, #4
   14cb4:	pop	{fp, pc}
   14cb8:	push	{fp, lr}
   14cbc:	add	fp, sp, #4
   14cc0:	sub	sp, sp, #32
   14cc4:	str	r0, [fp, #-24]	; 0xffffffe8
   14cc8:	sub	r0, fp, #32
   14ccc:	stm	r0, {r1, r2}
   14cd0:	str	r3, [fp, #-36]	; 0xffffffdc
   14cd4:	mov	r3, #0
   14cd8:	strb	r3, [fp, #-16]
   14cdc:	mov	r3, #0
   14ce0:	str	r3, [fp, #-12]
   14ce4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ce8:	mov	r0, r3
   14cec:	bl	134f8 <_start@@Base+0xae0>
   14cf0:	str	r0, [fp, #-8]
   14cf4:	ldr	r2, [fp, #-8]
   14cf8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14cfc:	cmp	r2, r3
   14d00:	bhi	14d24 <_start@@Base+0x230c>
   14d04:	ldr	r3, [pc, #136]	; 14d94 <_start@@Base+0x237c>
   14d08:	add	r3, pc, r3
   14d0c:	mov	r2, #520	; 0x208
   14d10:	ldr	r1, [pc, #128]	; 14d98 <_start@@Base+0x2380>
   14d14:	add	r1, pc, r1
   14d18:	ldr	r0, [pc, #124]	; 14d9c <_start@@Base+0x2384>
   14d1c:	add	r0, pc, r0
   14d20:	bl	12a08 <__assert_fail@plt>
   14d24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14d28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d2c:	add	r3, r2, r3
   14d30:	ldrb	r3, [r3]
   14d34:	strb	r3, [fp, #-16]
   14d38:	ldrb	r3, [fp, #-16]
   14d3c:	cmp	r3, #0
   14d40:	bne	14d5c <_start@@Base+0x2344>
   14d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d48:	mov	r2, r3
   14d4c:	sub	r3, fp, #16
   14d50:	ldm	r3, {r0, r1}
   14d54:	stm	r2, {r0, r1}
   14d58:	b	14d88 <_start@@Base+0x2370>
   14d5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d60:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14d64:	mov	r0, r3
   14d68:	bl	13694 <_start@@Base+0xc7c>
   14d6c:	mov	r3, r0
   14d70:	str	r3, [fp, #-12]
   14d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d78:	mov	r2, r3
   14d7c:	sub	r3, fp, #16
   14d80:	ldm	r3, {r0, r1}
   14d84:	stm	r2, {r0, r1}
   14d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d8c:	sub	sp, fp, #4
   14d90:	pop	{fp, pc}
   14d94:	andeq	pc, r1, r4, ror #15
   14d98:	strdeq	fp, [r1], -r8
   14d9c:	andeq	fp, r1, r4, ror lr
   14da0:	push	{fp}		; (str fp, [sp, #-4]!)
   14da4:	add	fp, sp, #0
   14da8:	sub	sp, sp, #12
   14dac:	mov	r3, r0
   14db0:	strb	r3, [fp, #-5]
   14db4:	ldrb	r3, [fp, #-5]
   14db8:	cmp	r3, #4
   14dbc:	addls	pc, pc, r3, lsl #2
   14dc0:	b	14e00 <_start@@Base+0x23e8>
   14dc4:	b	14dd8 <_start@@Base+0x23c0>
   14dc8:	b	14de0 <_start@@Base+0x23c8>
   14dcc:	b	14de8 <_start@@Base+0x23d0>
   14dd0:	b	14df0 <_start@@Base+0x23d8>
   14dd4:	b	14df8 <_start@@Base+0x23e0>
   14dd8:	mov	r3, #1
   14ddc:	b	14e04 <_start@@Base+0x23ec>
   14de0:	mov	r3, #1
   14de4:	b	14e04 <_start@@Base+0x23ec>
   14de8:	mov	r3, #1
   14dec:	b	14e04 <_start@@Base+0x23ec>
   14df0:	mov	r3, #1
   14df4:	b	14e04 <_start@@Base+0x23ec>
   14df8:	mov	r3, #1
   14dfc:	b	14e04 <_start@@Base+0x23ec>
   14e00:	mov	r3, #0
   14e04:	mov	r0, r3
   14e08:	add	sp, fp, #0
   14e0c:	pop	{fp}		; (ldr fp, [sp], #4)
   14e10:	bx	lr
   14e14:	push	{fp, lr}
   14e18:	add	fp, sp, #4
   14e1c:	sub	sp, sp, #8
   14e20:	str	r0, [fp, #-8]
   14e24:	str	r1, [fp, #-12]
   14e28:	ldr	r3, [fp, #-8]
   14e2c:	cmp	r3, #0
   14e30:	beq	14e64 <_start@@Base+0x244c>
   14e34:	ldr	r1, [fp, #-12]
   14e38:	ldr	r0, [fp, #-8]
   14e3c:	bl	145c0 <_start@@Base+0x1ba8>
   14e40:	mov	r3, r0
   14e44:	cmp	r3, #0
   14e48:	beq	14e64 <_start@@Base+0x244c>
   14e4c:	ldr	r0, [fp, #-8]
   14e50:	bl	131f4 <_start@@Base+0x7dc>
   14e54:	mov	r2, r0
   14e58:	ldr	r3, [fp, #-8]
   14e5c:	add	r3, r3, r2
   14e60:	b	14e68 <_start@@Base+0x2450>
   14e64:	mov	r3, #0
   14e68:	mov	r0, r3
   14e6c:	sub	sp, fp, #4
   14e70:	pop	{fp, pc}
   14e74:	push	{fp, lr}
   14e78:	add	fp, sp, #4
   14e7c:	sub	sp, sp, #8
   14e80:	str	r0, [fp, #-8]
   14e84:	str	r1, [fp, #-12]
   14e88:	ldr	r3, [fp, #-8]
   14e8c:	cmp	r3, #0
   14e90:	beq	14ec4 <_start@@Base+0x24ac>
   14e94:	ldr	r1, [fp, #-12]
   14e98:	ldr	r0, [fp, #-8]
   14e9c:	bl	14660 <_start@@Base+0x1c48>
   14ea0:	mov	r3, r0
   14ea4:	cmp	r3, #0
   14ea8:	beq	14ec4 <_start@@Base+0x24ac>
   14eac:	ldr	r0, [fp, #-8]
   14eb0:	bl	131f4 <_start@@Base+0x7dc>
   14eb4:	mov	r2, r0
   14eb8:	ldr	r3, [fp, #-8]
   14ebc:	add	r3, r3, r2
   14ec0:	b	14ec8 <_start@@Base+0x24b0>
   14ec4:	mov	r3, #0
   14ec8:	mov	r0, r3
   14ecc:	sub	sp, fp, #4
   14ed0:	pop	{fp, pc}
   14ed4:	push	{fp, lr}
   14ed8:	add	fp, sp, #4
   14edc:	sub	sp, sp, #16
   14ee0:	str	r0, [fp, #-16]
   14ee4:	ldr	r3, [pc, #80]	; 14f3c <_start@@Base+0x2524>
   14ee8:	add	r3, pc, r3
   14eec:	str	r3, [fp, #-8]
   14ef0:	ldr	r3, [fp, #-16]
   14ef4:	cmp	r3, #0
   14ef8:	beq	14f2c <_start@@Base+0x2514>
   14efc:	ldr	r1, [fp, #-8]
   14f00:	ldr	r0, [fp, #-16]
   14f04:	bl	145c0 <_start@@Base+0x1ba8>
   14f08:	mov	r3, r0
   14f0c:	cmp	r3, #0
   14f10:	beq	14f2c <_start@@Base+0x2514>
   14f14:	ldr	r0, [fp, #-16]
   14f18:	bl	131f4 <_start@@Base+0x7dc>
   14f1c:	mov	r2, r0
   14f20:	ldr	r3, [fp, #-16]
   14f24:	add	r3, r3, r2
   14f28:	b	14f30 <_start@@Base+0x2518>
   14f2c:	mov	r3, #0
   14f30:	mov	r0, r3
   14f34:	sub	sp, fp, #4
   14f38:	pop	{fp, pc}
   14f3c:	andeq	fp, r1, r0, lsr #25
   14f40:	push	{fp, lr}
   14f44:	add	fp, sp, #4
   14f48:	sub	sp, sp, #8
   14f4c:	str	r0, [fp, #-8]
   14f50:	ldr	r3, [fp, #-8]
   14f54:	cmp	r3, #0
   14f58:	beq	14f8c <_start@@Base+0x2574>
   14f5c:	ldr	r1, [pc, #56]	; 14f9c <_start@@Base+0x2584>
   14f60:	ldr	r0, [fp, #-8]
   14f64:	bl	14660 <_start@@Base+0x1c48>
   14f68:	mov	r3, r0
   14f6c:	cmp	r3, #0
   14f70:	beq	14f8c <_start@@Base+0x2574>
   14f74:	ldr	r0, [fp, #-8]
   14f78:	bl	131f4 <_start@@Base+0x7dc>
   14f7c:	mov	r2, r0
   14f80:	ldr	r3, [fp, #-8]
   14f84:	add	r3, r3, r2
   14f88:	b	14f90 <_start@@Base+0x2578>
   14f8c:	mov	r3, #0
   14f90:	mov	r0, r3
   14f94:	sub	sp, fp, #4
   14f98:	pop	{fp, pc}
   14f9c:	ldrhlt	r3, [sp], #118	; 0x76
   14fa0:	push	{fp, lr}
   14fa4:	add	fp, sp, #4
   14fa8:	sub	sp, sp, #16
   14fac:	str	r0, [fp, #-16]
   14fb0:	mov	r3, #0
   14fb4:	strh	r3, [fp, #-6]
   14fb8:	ldr	r3, [fp, #-16]
   14fbc:	cmp	r3, #0
   14fc0:	bne	14fe4 <_start@@Base+0x25cc>
   14fc4:	ldr	r3, [pc, #176]	; 1507c <_start@@Base+0x2664>
   14fc8:	add	r3, pc, r3
   14fcc:	ldr	r2, [pc, #172]	; 15080 <_start@@Base+0x2668>
   14fd0:	ldr	r1, [pc, #172]	; 15084 <_start@@Base+0x266c>
   14fd4:	add	r1, pc, r1
   14fd8:	ldr	r0, [pc, #168]	; 15088 <_start@@Base+0x2670>
   14fdc:	add	r0, pc, r0
   14fe0:	bl	12a08 <__assert_fail@plt>
   14fe4:	mov	r3, #0
   14fe8:	strh	r3, [fp, #-8]
   14fec:	ldr	r0, [fp, #-16]
   14ff0:	bl	1327c <_start@@Base+0x864>
   14ff4:	mov	r3, r0
   14ff8:	rsb	r3, r3, #0
   14ffc:	ldr	r2, [fp, #-16]
   15000:	add	r3, r2, r3
   15004:	str	r3, [fp, #-12]
   15008:	ldr	r0, [fp, #-12]
   1500c:	bl	132d4 <_start@@Base+0x8bc>
   15010:	mov	r3, r0
   15014:	mov	r2, r3
   15018:	ldrh	r3, [fp, #-8]
   1501c:	add	r3, r3, #3
   15020:	lsl	r3, r3, #1
   15024:	cmp	r2, r3
   15028:	bcc	15050 <_start@@Base+0x2638>
   1502c:	ldrh	r3, [fp, #-8]
   15030:	add	r3, r3, #2
   15034:	lsl	r3, r3, #1
   15038:	ldr	r2, [fp, #-12]
   1503c:	add	r3, r2, r3
   15040:	mov	r0, r3
   15044:	bl	132d4 <_start@@Base+0x8bc>
   15048:	mov	r3, r0
   1504c:	strh	r3, [fp, #-6]
   15050:	ldrh	r3, [fp, #-6]
   15054:	cmp	r3, #0
   15058:	beq	1506c <_start@@Base+0x2654>
   1505c:	ldrh	r3, [fp, #-6]
   15060:	ldr	r2, [fp, #-16]
   15064:	add	r3, r2, r3
   15068:	b	15070 <_start@@Base+0x2658>
   1506c:	mov	r3, #0
   15070:	mov	r0, r3
   15074:	sub	sp, fp, #4
   15078:	pop	{fp, pc}
   1507c:			; <UNDEFINED> instruction: 0x0001efbc
   15080:	andeq	r0, r0, r9, lsr r2
   15084:	andeq	fp, r1, r8, lsr fp
   15088:	ldrdeq	fp, [r1], -r4
   1508c:	push	{fp, lr}
   15090:	add	fp, sp, #4
   15094:	sub	sp, sp, #16
   15098:	str	r0, [fp, #-16]
   1509c:	mov	r3, #0
   150a0:	strh	r3, [fp, #-6]
   150a4:	ldr	r3, [fp, #-16]
   150a8:	cmp	r3, #0
   150ac:	bne	150d0 <_start@@Base+0x26b8>
   150b0:	ldr	r3, [pc, #188]	; 15174 <_start@@Base+0x275c>
   150b4:	add	r3, pc, r3
   150b8:	ldr	r2, [pc, #184]	; 15178 <_start@@Base+0x2760>
   150bc:	ldr	r1, [pc, #184]	; 1517c <_start@@Base+0x2764>
   150c0:	add	r1, pc, r1
   150c4:	ldr	r0, [pc, #180]	; 15180 <_start@@Base+0x2768>
   150c8:	add	r0, pc, r0
   150cc:	bl	12a08 <__assert_fail@plt>
   150d0:	mov	r3, #0
   150d4:	strh	r3, [fp, #-8]
   150d8:	ldr	r0, [fp, #-16]
   150dc:	bl	1327c <_start@@Base+0x864>
   150e0:	mov	r3, r0
   150e4:	rsb	r3, r3, #0
   150e8:	ldr	r2, [fp, #-16]
   150ec:	add	r3, r2, r3
   150f0:	str	r3, [fp, #-12]
   150f4:	ldr	r0, [fp, #-12]
   150f8:	bl	132d4 <_start@@Base+0x8bc>
   150fc:	mov	r3, r0
   15100:	mov	r2, r3
   15104:	ldrh	r3, [fp, #-8]
   15108:	add	r3, r3, #3
   1510c:	lsl	r3, r3, #1
   15110:	cmp	r2, r3
   15114:	bcc	1513c <_start@@Base+0x2724>
   15118:	ldrh	r3, [fp, #-8]
   1511c:	add	r3, r3, #2
   15120:	lsl	r3, r3, #1
   15124:	ldr	r2, [fp, #-12]
   15128:	add	r3, r2, r3
   1512c:	mov	r0, r3
   15130:	bl	132d4 <_start@@Base+0x8bc>
   15134:	mov	r3, r0
   15138:	strh	r3, [fp, #-6]
   1513c:	ldrh	r3, [fp, #-6]
   15140:	cmp	r3, #0
   15144:	beq	15164 <_start@@Base+0x274c>
   15148:	ldrh	r3, [fp, #-6]
   1514c:	ldr	r2, [fp, #-16]
   15150:	add	r3, r2, r3
   15154:	mov	r0, r3
   15158:	bl	14780 <_start@@Base+0x1d68>
   1515c:	mov	r3, r0
   15160:	b	15168 <_start@@Base+0x2750>
   15164:	mov	r3, #2
   15168:	mov	r0, r3
   1516c:	sub	sp, fp, #4
   15170:	pop	{fp, pc}
   15174:	andeq	pc, r1, r4, ror #7
   15178:	andeq	r0, r0, r3, asr #4
   1517c:	andeq	fp, r1, ip, asr #20
   15180:	andeq	fp, r1, r8, ror #21
   15184:	push	{fp, lr}
   15188:	add	fp, sp, #4
   1518c:	sub	sp, sp, #16
   15190:	str	r0, [fp, #-16]
   15194:	mov	r3, #0
   15198:	strh	r3, [fp, #-6]
   1519c:	ldr	r3, [fp, #-16]
   151a0:	cmp	r3, #0
   151a4:	bne	151c8 <_start@@Base+0x27b0>
   151a8:	ldr	r3, [pc, #164]	; 15254 <_start@@Base+0x283c>
   151ac:	add	r3, pc, r3
   151b0:	ldr	r2, [pc, #160]	; 15258 <_start@@Base+0x2840>
   151b4:	ldr	r1, [pc, #160]	; 1525c <_start@@Base+0x2844>
   151b8:	add	r1, pc, r1
   151bc:	ldr	r0, [pc, #156]	; 15260 <_start@@Base+0x2848>
   151c0:	add	r0, pc, r0
   151c4:	bl	12a08 <__assert_fail@plt>
   151c8:	mov	r3, #0
   151cc:	strh	r3, [fp, #-8]
   151d0:	ldr	r0, [fp, #-16]
   151d4:	bl	1327c <_start@@Base+0x864>
   151d8:	mov	r3, r0
   151dc:	rsb	r3, r3, #0
   151e0:	ldr	r2, [fp, #-16]
   151e4:	add	r3, r2, r3
   151e8:	str	r3, [fp, #-12]
   151ec:	ldr	r0, [fp, #-12]
   151f0:	bl	132d4 <_start@@Base+0x8bc>
   151f4:	mov	r3, r0
   151f8:	mov	r2, r3
   151fc:	ldrh	r3, [fp, #-8]
   15200:	add	r3, r3, #3
   15204:	lsl	r3, r3, #1
   15208:	cmp	r2, r3
   1520c:	bcc	15234 <_start@@Base+0x281c>
   15210:	ldrh	r3, [fp, #-8]
   15214:	add	r3, r3, #2
   15218:	lsl	r3, r3, #1
   1521c:	ldr	r2, [fp, #-12]
   15220:	add	r3, r2, r3
   15224:	mov	r0, r3
   15228:	bl	132d4 <_start@@Base+0x8bc>
   1522c:	mov	r3, r0
   15230:	strh	r3, [fp, #-6]
   15234:	ldrh	r3, [fp, #-6]
   15238:	cmp	r3, #0
   1523c:	movne	r3, #1
   15240:	moveq	r3, #0
   15244:	uxtb	r3, r3
   15248:	mov	r0, r3
   1524c:	sub	sp, fp, #4
   15250:	pop	{fp, pc}
   15254:	andeq	pc, r1, r8, lsl #2
   15258:	andeq	r0, r0, pc, asr r2
   1525c:	andeq	fp, r1, r4, asr r9
   15260:	strdeq	fp, [r1], -r0
   15264:	push	{fp, lr}
   15268:	add	fp, sp, #4
   1526c:	sub	sp, sp, #16
   15270:	str	r0, [fp, #-16]
   15274:	mov	r3, #0
   15278:	strh	r3, [fp, #-6]
   1527c:	ldr	r3, [fp, #-16]
   15280:	cmp	r3, #0
   15284:	bne	152a8 <_start@@Base+0x2890>
   15288:	ldr	r3, [pc, #200]	; 15358 <_start@@Base+0x2940>
   1528c:	add	r3, pc, r3
   15290:	mov	r2, #608	; 0x260
   15294:	ldr	r1, [pc, #192]	; 1535c <_start@@Base+0x2944>
   15298:	add	r1, pc, r1
   1529c:	ldr	r0, [pc, #188]	; 15360 <_start@@Base+0x2948>
   152a0:	add	r0, pc, r0
   152a4:	bl	12a08 <__assert_fail@plt>
   152a8:	mov	r3, #1
   152ac:	strh	r3, [fp, #-8]
   152b0:	ldr	r0, [fp, #-16]
   152b4:	bl	1327c <_start@@Base+0x864>
   152b8:	mov	r3, r0
   152bc:	rsb	r3, r3, #0
   152c0:	ldr	r2, [fp, #-16]
   152c4:	add	r3, r2, r3
   152c8:	str	r3, [fp, #-12]
   152cc:	ldr	r0, [fp, #-12]
   152d0:	bl	132d4 <_start@@Base+0x8bc>
   152d4:	mov	r3, r0
   152d8:	mov	r2, r3
   152dc:	ldrh	r3, [fp, #-8]
   152e0:	add	r3, r3, #3
   152e4:	lsl	r3, r3, #1
   152e8:	cmp	r2, r3
   152ec:	bcc	15314 <_start@@Base+0x28fc>
   152f0:	ldrh	r3, [fp, #-8]
   152f4:	add	r3, r3, #2
   152f8:	lsl	r3, r3, #1
   152fc:	ldr	r2, [fp, #-12]
   15300:	add	r3, r2, r3
   15304:	mov	r0, r3
   15308:	bl	132d4 <_start@@Base+0x8bc>
   1530c:	mov	r3, r0
   15310:	strh	r3, [fp, #-6]
   15314:	ldrh	r3, [fp, #-6]
   15318:	cmp	r3, #0
   1531c:	beq	15340 <_start@@Base+0x2928>
   15320:	ldrh	r3, [fp, #-6]
   15324:	ldr	r2, [fp, #-16]
   15328:	add	r3, r2, r3
   1532c:	mov	r0, r3
   15330:	bl	12f0c <_start@@Base+0x4f4>
   15334:	mov	r2, r0
   15338:	mov	r3, r1
   1533c:	b	15348 <_start@@Base+0x2930>
   15340:	mov	r2, #0
   15344:	mov	r3, #0
   15348:	mov	r0, r2
   1534c:	mov	r1, r3
   15350:	sub	sp, fp, #4
   15354:	pop	{fp, pc}
   15358:	andeq	pc, r1, r0, lsr r1	; <UNPREDICTABLE>
   1535c:	andeq	fp, r1, r4, ror r8
   15360:	andeq	fp, r1, r0, lsl r9
   15364:	push	{fp, lr}
   15368:	add	fp, sp, #4
   1536c:	sub	sp, sp, #16
   15370:	str	r0, [fp, #-16]
   15374:	mov	r3, #0
   15378:	strh	r3, [fp, #-6]
   1537c:	ldr	r3, [fp, #-16]
   15380:	cmp	r3, #0
   15384:	bne	153a8 <_start@@Base+0x2990>
   15388:	ldr	r3, [pc, #164]	; 15434 <_start@@Base+0x2a1c>
   1538c:	add	r3, pc, r3
   15390:	mov	r2, #608	; 0x260
   15394:	ldr	r1, [pc, #156]	; 15438 <_start@@Base+0x2a20>
   15398:	add	r1, pc, r1
   1539c:	ldr	r0, [pc, #152]	; 1543c <_start@@Base+0x2a24>
   153a0:	add	r0, pc, r0
   153a4:	bl	12a08 <__assert_fail@plt>
   153a8:	mov	r3, #1
   153ac:	strh	r3, [fp, #-8]
   153b0:	ldr	r0, [fp, #-16]
   153b4:	bl	1327c <_start@@Base+0x864>
   153b8:	mov	r3, r0
   153bc:	rsb	r3, r3, #0
   153c0:	ldr	r2, [fp, #-16]
   153c4:	add	r3, r2, r3
   153c8:	str	r3, [fp, #-12]
   153cc:	ldr	r0, [fp, #-12]
   153d0:	bl	132d4 <_start@@Base+0x8bc>
   153d4:	mov	r3, r0
   153d8:	mov	r2, r3
   153dc:	ldrh	r3, [fp, #-8]
   153e0:	add	r3, r3, #3
   153e4:	lsl	r3, r3, #1
   153e8:	cmp	r2, r3
   153ec:	bcc	15414 <_start@@Base+0x29fc>
   153f0:	ldrh	r3, [fp, #-8]
   153f4:	add	r3, r3, #2
   153f8:	lsl	r3, r3, #1
   153fc:	ldr	r2, [fp, #-12]
   15400:	add	r3, r2, r3
   15404:	mov	r0, r3
   15408:	bl	132d4 <_start@@Base+0x8bc>
   1540c:	mov	r3, r0
   15410:	strh	r3, [fp, #-6]
   15414:	ldrh	r3, [fp, #-6]
   15418:	cmp	r3, #0
   1541c:	movne	r3, #1
   15420:	moveq	r3, #0
   15424:	uxtb	r3, r3
   15428:	mov	r0, r3
   1542c:	sub	sp, fp, #4
   15430:	pop	{fp, pc}
   15434:	andeq	lr, r1, ip, asr #30
   15438:	andeq	fp, r1, r4, ror r7
   1543c:	andeq	fp, r1, r0, lsl r8
   15440:	push	{fp, lr}
   15444:	add	fp, sp, #4
   15448:	sub	sp, sp, #16
   1544c:	str	r0, [fp, #-16]
   15450:	mov	r3, #0
   15454:	strh	r3, [fp, #-6]
   15458:	ldr	r3, [fp, #-16]
   1545c:	cmp	r3, #0
   15460:	bne	15484 <_start@@Base+0x2a6c>
   15464:	ldr	r3, [pc, #164]	; 15510 <_start@@Base+0x2af8>
   15468:	add	r3, pc, r3
   1546c:	ldr	r2, [pc, #160]	; 15514 <_start@@Base+0x2afc>
   15470:	ldr	r1, [pc, #160]	; 15518 <_start@@Base+0x2b00>
   15474:	add	r1, pc, r1
   15478:	ldr	r0, [pc, #156]	; 1551c <_start@@Base+0x2b04>
   1547c:	add	r0, pc, r0
   15480:	bl	12a08 <__assert_fail@plt>
   15484:	mov	r3, #2
   15488:	strh	r3, [fp, #-8]
   1548c:	ldr	r0, [fp, #-16]
   15490:	bl	1327c <_start@@Base+0x864>
   15494:	mov	r3, r0
   15498:	rsb	r3, r3, #0
   1549c:	ldr	r2, [fp, #-16]
   154a0:	add	r3, r2, r3
   154a4:	str	r3, [fp, #-12]
   154a8:	ldr	r0, [fp, #-12]
   154ac:	bl	132d4 <_start@@Base+0x8bc>
   154b0:	mov	r3, r0
   154b4:	mov	r2, r3
   154b8:	ldrh	r3, [fp, #-8]
   154bc:	add	r3, r3, #3
   154c0:	lsl	r3, r3, #1
   154c4:	cmp	r2, r3
   154c8:	bcc	154f0 <_start@@Base+0x2ad8>
   154cc:	ldrh	r3, [fp, #-8]
   154d0:	add	r3, r3, #2
   154d4:	lsl	r3, r3, #1
   154d8:	ldr	r2, [fp, #-12]
   154dc:	add	r3, r2, r3
   154e0:	mov	r0, r3
   154e4:	bl	132d4 <_start@@Base+0x8bc>
   154e8:	mov	r3, r0
   154ec:	strh	r3, [fp, #-6]
   154f0:	ldrh	r3, [fp, #-6]
   154f4:	cmp	r3, #0
   154f8:	movne	r3, #1
   154fc:	moveq	r3, #0
   15500:	uxtb	r3, r3
   15504:	mov	r0, r3
   15508:	sub	sp, fp, #4
   1550c:	pop	{fp, pc}
   15510:	muleq	r1, r4, lr
   15514:	andeq	r0, r0, r1, ror #4
   15518:	muleq	r1, r8, r6
   1551c:	andeq	fp, r1, r4, lsr r7
   15520:	push	{fp, lr}
   15524:	add	fp, sp, #4
   15528:	sub	sp, sp, #24
   1552c:	str	r0, [fp, #-24]	; 0xffffffe8
   15530:	mov	r3, #0
   15534:	strh	r3, [fp, #-6]
   15538:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1553c:	cmp	r3, #0
   15540:	bne	15564 <_start@@Base+0x2b4c>
   15544:	ldr	r3, [pc, #204]	; 15618 <_start@@Base+0x2c00>
   15548:	add	r3, pc, r3
   1554c:	ldr	r2, [pc, #200]	; 1561c <_start@@Base+0x2c04>
   15550:	ldr	r1, [pc, #200]	; 15620 <_start@@Base+0x2c08>
   15554:	add	r1, pc, r1
   15558:	ldr	r0, [pc, #196]	; 15624 <_start@@Base+0x2c0c>
   1555c:	add	r0, pc, r0
   15560:	bl	12a08 <__assert_fail@plt>
   15564:	mov	r3, #2
   15568:	strh	r3, [fp, #-8]
   1556c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15570:	bl	1327c <_start@@Base+0x864>
   15574:	mov	r3, r0
   15578:	rsb	r3, r3, #0
   1557c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15580:	add	r3, r2, r3
   15584:	str	r3, [fp, #-12]
   15588:	ldr	r0, [fp, #-12]
   1558c:	bl	132d4 <_start@@Base+0x8bc>
   15590:	mov	r3, r0
   15594:	mov	r2, r3
   15598:	ldrh	r3, [fp, #-8]
   1559c:	add	r3, r3, #3
   155a0:	lsl	r3, r3, #1
   155a4:	cmp	r2, r3
   155a8:	bcc	155d0 <_start@@Base+0x2bb8>
   155ac:	ldrh	r3, [fp, #-8]
   155b0:	add	r3, r3, #2
   155b4:	lsl	r3, r3, #1
   155b8:	ldr	r2, [fp, #-12]
   155bc:	add	r3, r2, r3
   155c0:	mov	r0, r3
   155c4:	bl	132d4 <_start@@Base+0x8bc>
   155c8:	mov	r3, r0
   155cc:	strh	r3, [fp, #-6]
   155d0:	ldrh	r3, [fp, #-6]
   155d4:	cmp	r3, #0
   155d8:	beq	15608 <_start@@Base+0x2bf0>
   155dc:	ldrh	r3, [fp, #-6]
   155e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   155e4:	add	r3, r2, r3
   155e8:	str	r3, [fp, #-16]
   155ec:	ldr	r0, [fp, #-16]
   155f0:	bl	131f4 <_start@@Base+0x7dc>
   155f4:	mov	r3, r0
   155f8:	add	r3, r3, #4
   155fc:	ldr	r2, [fp, #-16]
   15600:	add	r3, r2, r3
   15604:	b	1560c <_start@@Base+0x2bf4>
   15608:	mov	r3, #0
   1560c:	mov	r0, r3
   15610:	sub	sp, fp, #4
   15614:	pop	{fp, pc}
   15618:	strdeq	lr, [r1], -r8
   1561c:	andeq	r0, r0, sp, ror #4
   15620:			; <UNDEFINED> instruction: 0x0001b5b8
   15624:	andeq	fp, r1, r4, asr r6
   15628:	push	{fp, lr}
   1562c:	add	fp, sp, #4
   15630:	sub	sp, sp, #24
   15634:	str	r0, [fp, #-24]	; 0xffffffe8
   15638:	mov	r3, #0
   1563c:	strh	r3, [fp, #-6]
   15640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15644:	cmp	r3, #0
   15648:	bne	1566c <_start@@Base+0x2c54>
   1564c:	ldr	r3, [pc, #204]	; 15720 <_start@@Base+0x2d08>
   15650:	add	r3, pc, r3
   15654:	ldr	r2, [pc, #200]	; 15724 <_start@@Base+0x2d0c>
   15658:	ldr	r1, [pc, #200]	; 15728 <_start@@Base+0x2d10>
   1565c:	add	r1, pc, r1
   15660:	ldr	r0, [pc, #196]	; 1572c <_start@@Base+0x2d14>
   15664:	add	r0, pc, r0
   15668:	bl	12a08 <__assert_fail@plt>
   1566c:	mov	r3, #3
   15670:	strh	r3, [fp, #-8]
   15674:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15678:	bl	1327c <_start@@Base+0x864>
   1567c:	mov	r3, r0
   15680:	rsb	r3, r3, #0
   15684:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15688:	add	r3, r2, r3
   1568c:	str	r3, [fp, #-12]
   15690:	ldr	r0, [fp, #-12]
   15694:	bl	132d4 <_start@@Base+0x8bc>
   15698:	mov	r3, r0
   1569c:	mov	r2, r3
   156a0:	ldrh	r3, [fp, #-8]
   156a4:	add	r3, r3, #3
   156a8:	lsl	r3, r3, #1
   156ac:	cmp	r2, r3
   156b0:	bcc	156d8 <_start@@Base+0x2cc0>
   156b4:	ldrh	r3, [fp, #-8]
   156b8:	add	r3, r3, #2
   156bc:	lsl	r3, r3, #1
   156c0:	ldr	r2, [fp, #-12]
   156c4:	add	r3, r2, r3
   156c8:	mov	r0, r3
   156cc:	bl	132d4 <_start@@Base+0x8bc>
   156d0:	mov	r3, r0
   156d4:	strh	r3, [fp, #-6]
   156d8:	ldrh	r3, [fp, #-6]
   156dc:	cmp	r3, #0
   156e0:	beq	15710 <_start@@Base+0x2cf8>
   156e4:	ldrh	r3, [fp, #-6]
   156e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   156ec:	add	r3, r2, r3
   156f0:	str	r3, [fp, #-16]
   156f4:	ldr	r0, [fp, #-16]
   156f8:	bl	131f4 <_start@@Base+0x7dc>
   156fc:	mov	r3, r0
   15700:	add	r3, r3, #4
   15704:	ldr	r2, [fp, #-16]
   15708:	add	r3, r2, r3
   1570c:	b	15714 <_start@@Base+0x2cfc>
   15710:	mov	r3, #0
   15714:	mov	r0, r3
   15718:	sub	sp, fp, #4
   1571c:	pop	{fp, pc}
   15720:	andeq	lr, r1, r0, lsl lr
   15724:	andeq	r0, r0, sp, ror #4
   15728:			; <UNDEFINED> instruction: 0x0001b4b0
   1572c:	andeq	fp, r1, ip, asr #10
   15730:	push	{fp, lr}
   15734:	add	fp, sp, #4
   15738:	sub	sp, sp, #16
   1573c:	str	r0, [fp, #-16]
   15740:	mov	r3, #0
   15744:	strh	r3, [fp, #-6]
   15748:	ldr	r3, [fp, #-16]
   1574c:	cmp	r3, #0
   15750:	bne	15774 <_start@@Base+0x2d5c>
   15754:	ldr	r3, [pc, #164]	; 15800 <_start@@Base+0x2de8>
   15758:	add	r3, pc, r3
   1575c:	ldr	r2, [pc, #160]	; 15804 <_start@@Base+0x2dec>
   15760:	ldr	r1, [pc, #160]	; 15808 <_start@@Base+0x2df0>
   15764:	add	r1, pc, r1
   15768:	ldr	r0, [pc, #156]	; 1580c <_start@@Base+0x2df4>
   1576c:	add	r0, pc, r0
   15770:	bl	12a08 <__assert_fail@plt>
   15774:	mov	r3, #3
   15778:	strh	r3, [fp, #-8]
   1577c:	ldr	r0, [fp, #-16]
   15780:	bl	1327c <_start@@Base+0x864>
   15784:	mov	r3, r0
   15788:	rsb	r3, r3, #0
   1578c:	ldr	r2, [fp, #-16]
   15790:	add	r3, r2, r3
   15794:	str	r3, [fp, #-12]
   15798:	ldr	r0, [fp, #-12]
   1579c:	bl	132d4 <_start@@Base+0x8bc>
   157a0:	mov	r3, r0
   157a4:	mov	r2, r3
   157a8:	ldrh	r3, [fp, #-8]
   157ac:	add	r3, r3, #3
   157b0:	lsl	r3, r3, #1
   157b4:	cmp	r2, r3
   157b8:	bcc	157e0 <_start@@Base+0x2dc8>
   157bc:	ldrh	r3, [fp, #-8]
   157c0:	add	r3, r3, #2
   157c4:	lsl	r3, r3, #1
   157c8:	ldr	r2, [fp, #-12]
   157cc:	add	r3, r2, r3
   157d0:	mov	r0, r3
   157d4:	bl	132d4 <_start@@Base+0x8bc>
   157d8:	mov	r3, r0
   157dc:	strh	r3, [fp, #-6]
   157e0:	ldrh	r3, [fp, #-6]
   157e4:	cmp	r3, #0
   157e8:	movne	r3, #1
   157ec:	moveq	r3, #0
   157f0:	uxtb	r3, r3
   157f4:	mov	r0, r3
   157f8:	sub	sp, fp, #4
   157fc:	pop	{fp, pc}
   15800:	andeq	lr, r1, r0, asr #25
   15804:	andeq	r0, r0, sp, ror #4
   15808:	andeq	fp, r1, r8, lsr #7
   1580c:	andeq	fp, r1, r4, asr #8
   15810:	push	{r4, fp, lr}
   15814:	add	fp, sp, #8
   15818:	sub	sp, sp, #20
   1581c:	str	r0, [fp, #-24]	; 0xffffffe8
   15820:	str	r1, [fp, #-28]	; 0xffffffe4
   15824:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15828:	bl	15520 <_start@@Base+0x2b08>
   1582c:	mov	r3, r0
   15830:	str	r3, [fp, #-20]	; 0xffffffec
   15834:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15838:	bl	15628 <_start@@Base+0x2c10>
   1583c:	mov	r3, r0
   15840:	str	r3, [fp, #-16]
   15844:	ldr	r3, [fp, #-20]	; 0xffffffec
   15848:	mov	r0, r3
   1584c:	bl	134f8 <_start@@Base+0xae0>
   15850:	mov	r4, r0
   15854:	ldr	r3, [fp, #-16]
   15858:	mov	r0, r3
   1585c:	bl	134f8 <_start@@Base+0xae0>
   15860:	mov	r3, r0
   15864:	cmp	r4, r3
   15868:	beq	1588c <_start@@Base+0x2e74>
   1586c:	ldr	r3, [pc, #56]	; 158ac <_start@@Base+0x2e94>
   15870:	add	r3, pc, r3
   15874:	ldr	r2, [pc, #52]	; 158b0 <_start@@Base+0x2e98>
   15878:	ldr	r1, [pc, #52]	; 158b4 <_start@@Base+0x2e9c>
   1587c:	add	r1, pc, r1
   15880:	ldr	r0, [pc, #48]	; 158b8 <_start@@Base+0x2ea0>
   15884:	add	r0, pc, r0
   15888:	bl	12a08 <__assert_fail@plt>
   1588c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15890:	mov	r2, r3
   15894:	sub	r3, fp, #20
   15898:	ldm	r3, {r0, r1}
   1589c:	stm	r2, {r0, r1}
   158a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158a4:	sub	sp, fp, #8
   158a8:	pop	{r4, fp, pc}
   158ac:	andeq	lr, r1, r8, asr ip
   158b0:	andeq	r0, r0, sp, ror #4
   158b4:	muleq	r1, r0, r2
   158b8:	andeq	fp, r1, r4, asr r3
   158bc:	push	{fp, lr}
   158c0:	add	fp, sp, #4
   158c4:	sub	sp, sp, #8
   158c8:	str	r0, [fp, #-8]
   158cc:	ldr	r3, [fp, #-8]
   158d0:	cmp	r3, #0
   158d4:	beq	158f0 <_start@@Base+0x2ed8>
   158d8:	ldr	r3, [fp, #-8]
   158dc:	sub	r3, r3, #4
   158e0:	mov	r0, r3
   158e4:	bl	131f4 <_start@@Base+0x7dc>
   158e8:	mov	r3, r0
   158ec:	b	158f4 <_start@@Base+0x2edc>
   158f0:	mov	r3, #0
   158f4:	mov	r0, r3
   158f8:	sub	sp, fp, #4
   158fc:	pop	{fp, pc}
   15900:	push	{fp, lr}
   15904:	add	fp, sp, #4
   15908:	sub	sp, sp, #16
   1590c:	str	r0, [fp, #-16]
   15910:	str	r1, [fp, #-20]	; 0xffffffec
   15914:	ldr	r3, [fp, #-20]	; 0xffffffec
   15918:	lsl	r3, r3, #2
   1591c:	ldr	r2, [fp, #-16]
   15920:	add	r3, r2, r3
   15924:	str	r3, [fp, #-8]
   15928:	ldr	r0, [fp, #-16]
   1592c:	bl	134f8 <_start@@Base+0xae0>
   15930:	mov	r2, r0
   15934:	ldr	r3, [fp, #-20]	; 0xffffffec
   15938:	cmp	r2, r3
   1593c:	bhi	15960 <_start@@Base+0x2f48>
   15940:	ldr	r3, [pc, #56]	; 15980 <_start@@Base+0x2f68>
   15944:	add	r3, pc, r3
   15948:	ldr	r2, [pc, #52]	; 15984 <_start@@Base+0x2f6c>
   1594c:	ldr	r1, [pc, #52]	; 15988 <_start@@Base+0x2f70>
   15950:	add	r1, pc, r1
   15954:	ldr	r0, [pc, #48]	; 1598c <_start@@Base+0x2f74>
   15958:	add	r0, pc, r0
   1595c:	bl	12a08 <__assert_fail@plt>
   15960:	ldr	r0, [fp, #-8]
   15964:	bl	131f4 <_start@@Base+0x7dc>
   15968:	mov	r2, r0
   1596c:	ldr	r3, [fp, #-8]
   15970:	add	r3, r3, r2
   15974:	mov	r0, r3
   15978:	sub	sp, fp, #4
   1597c:	pop	{fp, pc}
   15980:	andeq	lr, r1, r4, lsl #17
   15984:			; <UNDEFINED> instruction: 0x000002b5
   15988:			; <UNDEFINED> instruction: 0x0001b1bc
   1598c:	andeq	fp, r1, r4, ror #2
   15990:	push	{fp, lr}
   15994:	add	fp, sp, #4
   15998:	sub	sp, sp, #8
   1599c:	str	r0, [fp, #-8]
   159a0:	str	r1, [fp, #-12]
   159a4:	ldr	r3, [fp, #-8]
   159a8:	cmp	r3, #0
   159ac:	beq	159e0 <_start@@Base+0x2fc8>
   159b0:	ldr	r1, [fp, #-12]
   159b4:	ldr	r0, [fp, #-8]
   159b8:	bl	145c0 <_start@@Base+0x1ba8>
   159bc:	mov	r3, r0
   159c0:	cmp	r3, #0
   159c4:	beq	159e0 <_start@@Base+0x2fc8>
   159c8:	ldr	r0, [fp, #-8]
   159cc:	bl	131f4 <_start@@Base+0x7dc>
   159d0:	mov	r2, r0
   159d4:	ldr	r3, [fp, #-8]
   159d8:	add	r3, r3, r2
   159dc:	b	159e4 <_start@@Base+0x2fcc>
   159e0:	mov	r3, #0
   159e4:	mov	r0, r3
   159e8:	sub	sp, fp, #4
   159ec:	pop	{fp, pc}
   159f0:	push	{fp, lr}
   159f4:	add	fp, sp, #4
   159f8:	sub	sp, sp, #16
   159fc:	str	r0, [fp, #-16]
   15a00:	ldr	r3, [pc, #80]	; 15a58 <_start@@Base+0x3040>
   15a04:	add	r3, pc, r3
   15a08:	str	r3, [fp, #-8]
   15a0c:	ldr	r3, [fp, #-16]
   15a10:	cmp	r3, #0
   15a14:	beq	15a48 <_start@@Base+0x3030>
   15a18:	ldr	r1, [fp, #-8]
   15a1c:	ldr	r0, [fp, #-16]
   15a20:	bl	145c0 <_start@@Base+0x1ba8>
   15a24:	mov	r3, r0
   15a28:	cmp	r3, #0
   15a2c:	beq	15a48 <_start@@Base+0x3030>
   15a30:	ldr	r0, [fp, #-16]
   15a34:	bl	131f4 <_start@@Base+0x7dc>
   15a38:	mov	r2, r0
   15a3c:	ldr	r3, [fp, #-16]
   15a40:	add	r3, r3, r2
   15a44:	b	15a4c <_start@@Base+0x3034>
   15a48:	mov	r3, #0
   15a4c:	mov	r0, r3
   15a50:	sub	sp, fp, #4
   15a54:	pop	{fp, pc}
   15a58:	andeq	fp, r1, r4, lsl #3
   15a5c:	push	{fp, lr}
   15a60:	add	fp, sp, #4
   15a64:	sub	sp, sp, #16
   15a68:	str	r0, [fp, #-16]
   15a6c:	mov	r3, #0
   15a70:	strh	r3, [fp, #-6]
   15a74:	ldr	r3, [fp, #-16]
   15a78:	cmp	r3, #0
   15a7c:	bne	15aa0 <_start@@Base+0x3088>
   15a80:	ldr	r3, [pc, #176]	; 15b38 <_start@@Base+0x3120>
   15a84:	add	r3, pc, r3
   15a88:	mov	r2, #696	; 0x2b8
   15a8c:	ldr	r1, [pc, #168]	; 15b3c <_start@@Base+0x3124>
   15a90:	add	r1, pc, r1
   15a94:	ldr	r0, [pc, #164]	; 15b40 <_start@@Base+0x3128>
   15a98:	add	r0, pc, r0
   15a9c:	bl	12a08 <__assert_fail@plt>
   15aa0:	mov	r3, #0
   15aa4:	strh	r3, [fp, #-8]
   15aa8:	ldr	r0, [fp, #-16]
   15aac:	bl	1327c <_start@@Base+0x864>
   15ab0:	mov	r3, r0
   15ab4:	rsb	r3, r3, #0
   15ab8:	ldr	r2, [fp, #-16]
   15abc:	add	r3, r2, r3
   15ac0:	str	r3, [fp, #-12]
   15ac4:	ldr	r0, [fp, #-12]
   15ac8:	bl	132d4 <_start@@Base+0x8bc>
   15acc:	mov	r3, r0
   15ad0:	mov	r2, r3
   15ad4:	ldrh	r3, [fp, #-8]
   15ad8:	add	r3, r3, #3
   15adc:	lsl	r3, r3, #1
   15ae0:	cmp	r2, r3
   15ae4:	bcc	15b0c <_start@@Base+0x30f4>
   15ae8:	ldrh	r3, [fp, #-8]
   15aec:	add	r3, r3, #2
   15af0:	lsl	r3, r3, #1
   15af4:	ldr	r2, [fp, #-12]
   15af8:	add	r3, r2, r3
   15afc:	mov	r0, r3
   15b00:	bl	132d4 <_start@@Base+0x8bc>
   15b04:	mov	r3, r0
   15b08:	strh	r3, [fp, #-6]
   15b0c:	ldrh	r3, [fp, #-6]
   15b10:	cmp	r3, #0
   15b14:	beq	15b28 <_start@@Base+0x3110>
   15b18:	ldrh	r3, [fp, #-6]
   15b1c:	ldr	r2, [fp, #-16]
   15b20:	add	r3, r2, r3
   15b24:	b	15b2c <_start@@Base+0x3114>
   15b28:	mov	r3, #0
   15b2c:	mov	r0, r3
   15b30:	sub	sp, fp, #4
   15b34:	pop	{fp, pc}
   15b38:	andeq	lr, r1, r8, ror #6
   15b3c:	andeq	fp, r1, ip, ror r0
   15b40:	andeq	fp, r1, r8, lsl r1
   15b44:	push	{fp, lr}
   15b48:	add	fp, sp, #4
   15b4c:	sub	sp, sp, #16
   15b50:	str	r0, [fp, #-16]
   15b54:	mov	r3, #0
   15b58:	strh	r3, [fp, #-6]
   15b5c:	ldr	r3, [fp, #-16]
   15b60:	cmp	r3, #0
   15b64:	bne	15b88 <_start@@Base+0x3170>
   15b68:	ldr	r3, [pc, #164]	; 15c14 <_start@@Base+0x31fc>
   15b6c:	add	r3, pc, r3
   15b70:	mov	r2, #696	; 0x2b8
   15b74:	ldr	r1, [pc, #156]	; 15c18 <_start@@Base+0x3200>
   15b78:	add	r1, pc, r1
   15b7c:	ldr	r0, [pc, #152]	; 15c1c <_start@@Base+0x3204>
   15b80:	add	r0, pc, r0
   15b84:	bl	12a08 <__assert_fail@plt>
   15b88:	mov	r3, #0
   15b8c:	strh	r3, [fp, #-8]
   15b90:	ldr	r0, [fp, #-16]
   15b94:	bl	1327c <_start@@Base+0x864>
   15b98:	mov	r3, r0
   15b9c:	rsb	r3, r3, #0
   15ba0:	ldr	r2, [fp, #-16]
   15ba4:	add	r3, r2, r3
   15ba8:	str	r3, [fp, #-12]
   15bac:	ldr	r0, [fp, #-12]
   15bb0:	bl	132d4 <_start@@Base+0x8bc>
   15bb4:	mov	r3, r0
   15bb8:	mov	r2, r3
   15bbc:	ldrh	r3, [fp, #-8]
   15bc0:	add	r3, r3, #3
   15bc4:	lsl	r3, r3, #1
   15bc8:	cmp	r2, r3
   15bcc:	bcc	15bf4 <_start@@Base+0x31dc>
   15bd0:	ldrh	r3, [fp, #-8]
   15bd4:	add	r3, r3, #2
   15bd8:	lsl	r3, r3, #1
   15bdc:	ldr	r2, [fp, #-12]
   15be0:	add	r3, r2, r3
   15be4:	mov	r0, r3
   15be8:	bl	132d4 <_start@@Base+0x8bc>
   15bec:	mov	r3, r0
   15bf0:	strh	r3, [fp, #-6]
   15bf4:	ldrh	r3, [fp, #-6]
   15bf8:	cmp	r3, #0
   15bfc:	movne	r3, #1
   15c00:	moveq	r3, #0
   15c04:	uxtb	r3, r3
   15c08:	mov	r0, r3
   15c0c:	sub	sp, fp, #4
   15c10:	pop	{fp, pc}
   15c14:	andeq	lr, r1, r8, asr r2
   15c18:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15c1c:	andeq	fp, r1, r0, lsr r0
   15c20:	push	{fp, lr}
   15c24:	add	fp, sp, #4
   15c28:	sub	sp, sp, #16
   15c2c:	str	r0, [fp, #-16]
   15c30:	mov	r3, #0
   15c34:	strh	r3, [fp, #-6]
   15c38:	ldr	r3, [fp, #-16]
   15c3c:	cmp	r3, #0
   15c40:	bne	15c64 <_start@@Base+0x324c>
   15c44:	ldr	r3, [pc, #188]	; 15d08 <_start@@Base+0x32f0>
   15c48:	add	r3, pc, r3
   15c4c:	ldr	r2, [pc, #184]	; 15d0c <_start@@Base+0x32f4>
   15c50:	ldr	r1, [pc, #184]	; 15d10 <_start@@Base+0x32f8>
   15c54:	add	r1, pc, r1
   15c58:	ldr	r0, [pc, #180]	; 15d14 <_start@@Base+0x32fc>
   15c5c:	add	r0, pc, r0
   15c60:	bl	12a08 <__assert_fail@plt>
   15c64:	mov	r3, #2
   15c68:	strh	r3, [fp, #-8]
   15c6c:	ldr	r0, [fp, #-16]
   15c70:	bl	1327c <_start@@Base+0x864>
   15c74:	mov	r3, r0
   15c78:	rsb	r3, r3, #0
   15c7c:	ldr	r2, [fp, #-16]
   15c80:	add	r3, r2, r3
   15c84:	str	r3, [fp, #-12]
   15c88:	ldr	r0, [fp, #-12]
   15c8c:	bl	132d4 <_start@@Base+0x8bc>
   15c90:	mov	r3, r0
   15c94:	mov	r2, r3
   15c98:	ldrh	r3, [fp, #-8]
   15c9c:	add	r3, r3, #3
   15ca0:	lsl	r3, r3, #1
   15ca4:	cmp	r2, r3
   15ca8:	bcc	15cd0 <_start@@Base+0x32b8>
   15cac:	ldrh	r3, [fp, #-8]
   15cb0:	add	r3, r3, #2
   15cb4:	lsl	r3, r3, #1
   15cb8:	ldr	r2, [fp, #-12]
   15cbc:	add	r3, r2, r3
   15cc0:	mov	r0, r3
   15cc4:	bl	132d4 <_start@@Base+0x8bc>
   15cc8:	mov	r3, r0
   15ccc:	strh	r3, [fp, #-6]
   15cd0:	ldrh	r3, [fp, #-6]
   15cd4:	cmp	r3, #0
   15cd8:	beq	15cf8 <_start@@Base+0x32e0>
   15cdc:	ldrh	r3, [fp, #-6]
   15ce0:	ldr	r2, [fp, #-16]
   15ce4:	add	r3, r2, r3
   15ce8:	mov	r0, r3
   15cec:	bl	12e14 <_start@@Base+0x3fc>
   15cf0:	mov	r3, r0
   15cf4:	b	15cfc <_start@@Base+0x32e4>
   15cf8:	mov	r3, #100	; 0x64
   15cfc:	mov	r0, r3
   15d00:	sub	sp, fp, #4
   15d04:	pop	{fp, pc}
   15d08:	andeq	lr, r1, r8, lsr r1
   15d0c:			; <UNDEFINED> instruction: 0x000002b9
   15d10:			; <UNDEFINED> instruction: 0x0001aeb8
   15d14:	andeq	sl, r1, r4, asr pc
   15d18:	push	{fp, lr}
   15d1c:	add	fp, sp, #4
   15d20:	sub	sp, sp, #16
   15d24:	str	r0, [fp, #-16]
   15d28:	mov	r3, #0
   15d2c:	strh	r3, [fp, #-6]
   15d30:	ldr	r3, [fp, #-16]
   15d34:	cmp	r3, #0
   15d38:	bne	15d5c <_start@@Base+0x3344>
   15d3c:	ldr	r3, [pc, #164]	; 15de8 <_start@@Base+0x33d0>
   15d40:	add	r3, pc, r3
   15d44:	ldr	r2, [pc, #160]	; 15dec <_start@@Base+0x33d4>
   15d48:	ldr	r1, [pc, #160]	; 15df0 <_start@@Base+0x33d8>
   15d4c:	add	r1, pc, r1
   15d50:	ldr	r0, [pc, #156]	; 15df4 <_start@@Base+0x33dc>
   15d54:	add	r0, pc, r0
   15d58:	bl	12a08 <__assert_fail@plt>
   15d5c:	mov	r3, #2
   15d60:	strh	r3, [fp, #-8]
   15d64:	ldr	r0, [fp, #-16]
   15d68:	bl	1327c <_start@@Base+0x864>
   15d6c:	mov	r3, r0
   15d70:	rsb	r3, r3, #0
   15d74:	ldr	r2, [fp, #-16]
   15d78:	add	r3, r2, r3
   15d7c:	str	r3, [fp, #-12]
   15d80:	ldr	r0, [fp, #-12]
   15d84:	bl	132d4 <_start@@Base+0x8bc>
   15d88:	mov	r3, r0
   15d8c:	mov	r2, r3
   15d90:	ldrh	r3, [fp, #-8]
   15d94:	add	r3, r3, #3
   15d98:	lsl	r3, r3, #1
   15d9c:	cmp	r2, r3
   15da0:	bcc	15dc8 <_start@@Base+0x33b0>
   15da4:	ldrh	r3, [fp, #-8]
   15da8:	add	r3, r3, #2
   15dac:	lsl	r3, r3, #1
   15db0:	ldr	r2, [fp, #-12]
   15db4:	add	r3, r2, r3
   15db8:	mov	r0, r3
   15dbc:	bl	132d4 <_start@@Base+0x8bc>
   15dc0:	mov	r3, r0
   15dc4:	strh	r3, [fp, #-6]
   15dc8:	ldrh	r3, [fp, #-6]
   15dcc:	cmp	r3, #0
   15dd0:	movne	r3, #1
   15dd4:	moveq	r3, #0
   15dd8:	uxtb	r3, r3
   15ddc:	mov	r0, r3
   15de0:	sub	sp, fp, #4
   15de4:	pop	{fp, pc}
   15de8:	andeq	lr, r1, ip, asr r0
   15dec:			; <UNDEFINED> instruction: 0x000002b9
   15df0:	andeq	sl, r1, r0, asr #27
   15df4:	andeq	sl, r1, ip, asr lr
   15df8:	push	{fp, lr}
   15dfc:	add	fp, sp, #4
   15e00:	sub	sp, sp, #16
   15e04:	str	r0, [fp, #-16]
   15e08:	mov	r3, r1
   15e0c:	strh	r3, [fp, #-18]	; 0xffffffee
   15e10:	mov	r3, #0
   15e14:	str	r3, [fp, #-8]
   15e18:	b	15e70 <_start@@Base+0x3458>
   15e1c:	ldr	r1, [fp, #-8]
   15e20:	ldr	r0, [fp, #-16]
   15e24:	bl	15900 <_start@@Base+0x2ee8>
   15e28:	mov	r3, r0
   15e2c:	mov	r0, r3
   15e30:	bl	15c20 <_start@@Base+0x3208>
   15e34:	mov	r3, r0
   15e38:	strh	r3, [fp, #-10]
   15e3c:	ldrsh	r2, [fp, #-10]
   15e40:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   15e44:	cmp	r2, r3
   15e48:	blt	15e64 <_start@@Base+0x344c>
   15e4c:	ldrsh	r2, [fp, #-10]
   15e50:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   15e54:	cmp	r2, r3
   15e58:	bgt	15e64 <_start@@Base+0x344c>
   15e5c:	ldr	r3, [fp, #-8]
   15e60:	b	15e94 <_start@@Base+0x347c>
   15e64:	ldr	r3, [fp, #-8]
   15e68:	add	r3, r3, #1
   15e6c:	str	r3, [fp, #-8]
   15e70:	ldr	r0, [fp, #-16]
   15e74:	bl	158bc <_start@@Base+0x2ea4>
   15e78:	mov	r2, r0
   15e7c:	ldr	r3, [fp, #-8]
   15e80:	cmp	r2, r3
   15e84:	bhi	15e1c <_start@@Base+0x3404>
   15e88:	ldr	r3, [pc, #16]	; 15ea0 <_start@@Base+0x3488>
   15e8c:	add	r3, pc, r3
   15e90:	ldr	r3, [r3]
   15e94:	mov	r0, r3
   15e98:	sub	sp, fp, #4
   15e9c:	pop	{fp, pc}
   15ea0:	andeq	r0, r3, ip, ror #3
   15ea4:	push	{fp, lr}
   15ea8:	add	fp, sp, #4
   15eac:	sub	sp, sp, #24
   15eb0:	str	r0, [fp, #-16]
   15eb4:	str	r1, [fp, #-20]	; 0xffffffec
   15eb8:	str	r2, [fp, #-24]	; 0xffffffe8
   15ebc:	strh	r3, [fp, #-26]	; 0xffffffe6
   15ec0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ec4:	str	r3, [fp, #-8]
   15ec8:	b	15f20 <_start@@Base+0x3508>
   15ecc:	ldr	r1, [fp, #-8]
   15ed0:	ldr	r0, [fp, #-16]
   15ed4:	bl	15900 <_start@@Base+0x2ee8>
   15ed8:	mov	r3, r0
   15edc:	mov	r0, r3
   15ee0:	bl	15c20 <_start@@Base+0x3208>
   15ee4:	mov	r3, r0
   15ee8:	strh	r3, [fp, #-10]
   15eec:	ldrsh	r2, [fp, #-10]
   15ef0:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   15ef4:	cmp	r2, r3
   15ef8:	blt	15f14 <_start@@Base+0x34fc>
   15efc:	ldrsh	r2, [fp, #-10]
   15f00:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   15f04:	cmp	r2, r3
   15f08:	bgt	15f14 <_start@@Base+0x34fc>
   15f0c:	ldr	r3, [fp, #-8]
   15f10:	b	15f64 <_start@@Base+0x354c>
   15f14:	ldr	r3, [fp, #-8]
   15f18:	add	r3, r3, #1
   15f1c:	str	r3, [fp, #-8]
   15f20:	ldr	r0, [fp, #-16]
   15f24:	bl	158bc <_start@@Base+0x2ea4>
   15f28:	mov	r2, r0
   15f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f30:	cmp	r2, r3
   15f34:	bhi	15f48 <_start@@Base+0x3530>
   15f38:	ldr	r0, [fp, #-16]
   15f3c:	bl	158bc <_start@@Base+0x2ea4>
   15f40:	mov	r3, r0
   15f44:	b	15f4c <_start@@Base+0x3534>
   15f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f4c:	ldr	r2, [fp, #-8]
   15f50:	cmp	r3, r2
   15f54:	bhi	15ecc <_start@@Base+0x34b4>
   15f58:	ldr	r3, [pc, #16]	; 15f70 <_start@@Base+0x3558>
   15f5c:	add	r3, pc, r3
   15f60:	ldr	r3, [r3]
   15f64:	mov	r0, r3
   15f68:	sub	sp, fp, #4
   15f6c:	pop	{fp, pc}
   15f70:	andeq	r0, r3, ip, lsl r1
   15f74:	push	{fp, lr}
   15f78:	add	fp, sp, #4
   15f7c:	sub	sp, sp, #16
   15f80:	str	r0, [fp, #-16]
   15f84:	mov	r3, r1
   15f88:	strh	r3, [fp, #-18]	; 0xffffffee
   15f8c:	ldr	r0, [fp, #-16]
   15f90:	bl	158bc <_start@@Base+0x2ea4>
   15f94:	str	r0, [fp, #-8]
   15f98:	b	15fe4 <_start@@Base+0x35cc>
   15f9c:	ldr	r1, [fp, #-8]
   15fa0:	ldr	r0, [fp, #-16]
   15fa4:	bl	15900 <_start@@Base+0x2ee8>
   15fa8:	mov	r3, r0
   15fac:	mov	r0, r3
   15fb0:	bl	15c20 <_start@@Base+0x3208>
   15fb4:	mov	r3, r0
   15fb8:	strh	r3, [fp, #-10]
   15fbc:	ldrsh	r2, [fp, #-10]
   15fc0:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   15fc4:	cmp	r2, r3
   15fc8:	blt	15fe4 <_start@@Base+0x35cc>
   15fcc:	ldrsh	r2, [fp, #-10]
   15fd0:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   15fd4:	cmp	r2, r3
   15fd8:	bgt	15fe4 <_start@@Base+0x35cc>
   15fdc:	ldr	r3, [fp, #-8]
   15fe0:	b	16004 <_start@@Base+0x35ec>
   15fe4:	ldr	r3, [fp, #-8]
   15fe8:	sub	r2, r3, #1
   15fec:	str	r2, [fp, #-8]
   15ff0:	cmp	r3, #0
   15ff4:	bne	15f9c <_start@@Base+0x3584>
   15ff8:	ldr	r3, [pc, #16]	; 16010 <_start@@Base+0x35f8>
   15ffc:	add	r3, pc, r3
   16000:	ldr	r3, [r3]
   16004:	mov	r0, r3
   16008:	sub	sp, fp, #4
   1600c:	pop	{fp, pc}
   16010:	andeq	r0, r3, ip, ror r0
   16014:	push	{fp, lr}
   16018:	add	fp, sp, #4
   1601c:	sub	sp, sp, #24
   16020:	str	r0, [fp, #-16]
   16024:	str	r1, [fp, #-20]	; 0xffffffec
   16028:	str	r2, [fp, #-24]	; 0xffffffe8
   1602c:	strh	r3, [fp, #-26]	; 0xffffffe6
   16030:	ldr	r0, [fp, #-16]
   16034:	bl	158bc <_start@@Base+0x2ea4>
   16038:	mov	r2, r0
   1603c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16040:	cmp	r2, r3
   16044:	bhi	16058 <_start@@Base+0x3640>
   16048:	ldr	r0, [fp, #-16]
   1604c:	bl	158bc <_start@@Base+0x2ea4>
   16050:	mov	r3, r0
   16054:	b	1605c <_start@@Base+0x3644>
   16058:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1605c:	str	r3, [fp, #-8]
   16060:	b	160ac <_start@@Base+0x3694>
   16064:	ldr	r1, [fp, #-8]
   16068:	ldr	r0, [fp, #-16]
   1606c:	bl	15900 <_start@@Base+0x2ee8>
   16070:	mov	r3, r0
   16074:	mov	r0, r3
   16078:	bl	15c20 <_start@@Base+0x3208>
   1607c:	mov	r3, r0
   16080:	strh	r3, [fp, #-10]
   16084:	ldrsh	r2, [fp, #-10]
   16088:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   1608c:	cmp	r2, r3
   16090:	blt	160ac <_start@@Base+0x3694>
   16094:	ldrsh	r2, [fp, #-10]
   16098:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   1609c:	cmp	r2, r3
   160a0:	bgt	160ac <_start@@Base+0x3694>
   160a4:	ldr	r3, [fp, #-8]
   160a8:	b	160d0 <_start@@Base+0x36b8>
   160ac:	ldr	r3, [fp, #-8]
   160b0:	sub	r2, r3, #1
   160b4:	str	r2, [fp, #-8]
   160b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   160bc:	cmp	r3, r2
   160c0:	bhi	16064 <_start@@Base+0x364c>
   160c4:	ldr	r3, [pc, #16]	; 160dc <_start@@Base+0x36c4>
   160c8:	add	r3, pc, r3
   160cc:	ldr	r3, [r3]
   160d0:	mov	r0, r3
   160d4:	sub	sp, fp, #4
   160d8:	pop	{fp, pc}
   160dc:			; <UNDEFINED> instruction: 0x0002ffb0
   160e0:	push	{fp, lr}
   160e4:	add	fp, sp, #4
   160e8:	sub	sp, sp, #16
   160ec:	str	r0, [fp, #-16]
   160f0:	mov	r3, #0
   160f4:	strh	r3, [fp, #-6]
   160f8:	ldr	r3, [fp, #-16]
   160fc:	cmp	r3, #0
   16100:	bne	16124 <_start@@Base+0x370c>
   16104:	ldr	r3, [pc, #188]	; 161c8 <_start@@Base+0x37b0>
   16108:	add	r3, pc, r3
   1610c:	ldr	r2, [pc, #184]	; 161cc <_start@@Base+0x37b4>
   16110:	ldr	r1, [pc, #184]	; 161d0 <_start@@Base+0x37b8>
   16114:	add	r1, pc, r1
   16118:	ldr	r0, [pc, #180]	; 161d4 <_start@@Base+0x37bc>
   1611c:	add	r0, pc, r0
   16120:	bl	12a08 <__assert_fail@plt>
   16124:	mov	r3, #1
   16128:	strh	r3, [fp, #-8]
   1612c:	ldr	r0, [fp, #-16]
   16130:	bl	1327c <_start@@Base+0x864>
   16134:	mov	r3, r0
   16138:	rsb	r3, r3, #0
   1613c:	ldr	r2, [fp, #-16]
   16140:	add	r3, r2, r3
   16144:	str	r3, [fp, #-12]
   16148:	ldr	r0, [fp, #-12]
   1614c:	bl	132d4 <_start@@Base+0x8bc>
   16150:	mov	r3, r0
   16154:	mov	r2, r3
   16158:	ldrh	r3, [fp, #-8]
   1615c:	add	r3, r3, #3
   16160:	lsl	r3, r3, #1
   16164:	cmp	r2, r3
   16168:	bcc	16190 <_start@@Base+0x3778>
   1616c:	ldrh	r3, [fp, #-8]
   16170:	add	r3, r3, #2
   16174:	lsl	r3, r3, #1
   16178:	ldr	r2, [fp, #-12]
   1617c:	add	r3, r2, r3
   16180:	mov	r0, r3
   16184:	bl	132d4 <_start@@Base+0x8bc>
   16188:	mov	r3, r0
   1618c:	strh	r3, [fp, #-6]
   16190:	ldrh	r3, [fp, #-6]
   16194:	cmp	r3, #0
   16198:	beq	161b8 <_start@@Base+0x37a0>
   1619c:	ldrh	r3, [fp, #-6]
   161a0:	ldr	r2, [fp, #-16]
   161a4:	add	r3, r2, r3
   161a8:	mov	r0, r3
   161ac:	bl	12e14 <_start@@Base+0x3fc>
   161b0:	mov	r3, r0
   161b4:	b	161bc <_start@@Base+0x37a4>
   161b8:	mov	r3, #150	; 0x96
   161bc:	mov	r0, r3
   161c0:	sub	sp, fp, #4
   161c4:	pop	{fp, pc}
   161c8:	andeq	sp, r1, r8, lsr pc
   161cc:			; <UNDEFINED> instruction: 0x000002ba
   161d0:	strdeq	sl, [r1], -r8
   161d4:	muleq	r1, r4, sl
   161d8:	push	{fp, lr}
   161dc:	add	fp, sp, #4
   161e0:	sub	sp, sp, #16
   161e4:	str	r0, [fp, #-16]
   161e8:	mov	r3, #0
   161ec:	strh	r3, [fp, #-6]
   161f0:	ldr	r3, [fp, #-16]
   161f4:	cmp	r3, #0
   161f8:	bne	1621c <_start@@Base+0x3804>
   161fc:	ldr	r3, [pc, #164]	; 162a8 <_start@@Base+0x3890>
   16200:	add	r3, pc, r3
   16204:	ldr	r2, [pc, #160]	; 162ac <_start@@Base+0x3894>
   16208:	ldr	r1, [pc, #160]	; 162b0 <_start@@Base+0x3898>
   1620c:	add	r1, pc, r1
   16210:	ldr	r0, [pc, #156]	; 162b4 <_start@@Base+0x389c>
   16214:	add	r0, pc, r0
   16218:	bl	12a08 <__assert_fail@plt>
   1621c:	mov	r3, #1
   16220:	strh	r3, [fp, #-8]
   16224:	ldr	r0, [fp, #-16]
   16228:	bl	1327c <_start@@Base+0x864>
   1622c:	mov	r3, r0
   16230:	rsb	r3, r3, #0
   16234:	ldr	r2, [fp, #-16]
   16238:	add	r3, r2, r3
   1623c:	str	r3, [fp, #-12]
   16240:	ldr	r0, [fp, #-12]
   16244:	bl	132d4 <_start@@Base+0x8bc>
   16248:	mov	r3, r0
   1624c:	mov	r2, r3
   16250:	ldrh	r3, [fp, #-8]
   16254:	add	r3, r3, #3
   16258:	lsl	r3, r3, #1
   1625c:	cmp	r2, r3
   16260:	bcc	16288 <_start@@Base+0x3870>
   16264:	ldrh	r3, [fp, #-8]
   16268:	add	r3, r3, #2
   1626c:	lsl	r3, r3, #1
   16270:	ldr	r2, [fp, #-12]
   16274:	add	r3, r2, r3
   16278:	mov	r0, r3
   1627c:	bl	132d4 <_start@@Base+0x8bc>
   16280:	mov	r3, r0
   16284:	strh	r3, [fp, #-6]
   16288:	ldrh	r3, [fp, #-6]
   1628c:	cmp	r3, #0
   16290:	movne	r3, #1
   16294:	moveq	r3, #0
   16298:	uxtb	r3, r3
   1629c:	mov	r0, r3
   162a0:	sub	sp, fp, #4
   162a4:	pop	{fp, pc}
   162a8:	andeq	sp, r1, ip, asr lr
   162ac:			; <UNDEFINED> instruction: 0x000002ba
   162b0:	andeq	sl, r1, r0, lsl #18
   162b4:	muleq	r1, ip, r9
   162b8:	push	{fp, lr}
   162bc:	add	fp, sp, #4
   162c0:	sub	sp, sp, #24
   162c4:	str	r0, [fp, #-24]	; 0xffffffe8
   162c8:	mov	r3, #0
   162cc:	strh	r3, [fp, #-6]
   162d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162d4:	cmp	r3, #0
   162d8:	bne	162fc <_start@@Base+0x38e4>
   162dc:	ldr	r3, [pc, #232]	; 163cc <_start@@Base+0x39b4>
   162e0:	add	r3, pc, r3
   162e4:	ldr	r2, [pc, #228]	; 163d0 <_start@@Base+0x39b8>
   162e8:	ldr	r1, [pc, #228]	; 163d4 <_start@@Base+0x39bc>
   162ec:	add	r1, pc, r1
   162f0:	ldr	r0, [pc, #224]	; 163d8 <_start@@Base+0x39c0>
   162f4:	add	r0, pc, r0
   162f8:	bl	12a08 <__assert_fail@plt>
   162fc:	mov	r3, #3
   16300:	strh	r3, [fp, #-8]
   16304:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16308:	bl	1327c <_start@@Base+0x864>
   1630c:	mov	r3, r0
   16310:	rsb	r3, r3, #0
   16314:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16318:	add	r3, r2, r3
   1631c:	str	r3, [fp, #-12]
   16320:	ldr	r0, [fp, #-12]
   16324:	bl	132d4 <_start@@Base+0x8bc>
   16328:	mov	r3, r0
   1632c:	mov	r2, r3
   16330:	ldrh	r3, [fp, #-8]
   16334:	add	r3, r3, #3
   16338:	lsl	r3, r3, #1
   1633c:	cmp	r2, r3
   16340:	bcc	16368 <_start@@Base+0x3950>
   16344:	ldrh	r3, [fp, #-8]
   16348:	add	r3, r3, #2
   1634c:	lsl	r3, r3, #1
   16350:	ldr	r2, [fp, #-12]
   16354:	add	r3, r2, r3
   16358:	mov	r0, r3
   1635c:	bl	132d4 <_start@@Base+0x8bc>
   16360:	mov	r3, r0
   16364:	strh	r3, [fp, #-6]
   16368:	ldrh	r3, [fp, #-6]
   1636c:	cmp	r3, #0
   16370:	beq	163a0 <_start@@Base+0x3988>
   16374:	ldrh	r3, [fp, #-6]
   16378:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1637c:	add	r3, r2, r3
   16380:	str	r3, [fp, #-16]
   16384:	ldr	r0, [fp, #-16]
   16388:	bl	131f4 <_start@@Base+0x7dc>
   1638c:	mov	r3, r0
   16390:	add	r3, r3, #4
   16394:	ldr	r2, [fp, #-16]
   16398:	add	r3, r2, r3
   1639c:	b	163c0 <_start@@Base+0x39a8>
   163a0:	ldr	r3, [pc, #52]	; 163dc <_start@@Base+0x39c4>
   163a4:	add	r3, pc, r3
   163a8:	ldr	r2, [pc, #32]	; 163d0 <_start@@Base+0x39b8>
   163ac:	ldr	r1, [pc, #44]	; 163e0 <_start@@Base+0x39c8>
   163b0:	add	r1, pc, r1
   163b4:	ldr	r0, [pc, #40]	; 163e4 <_start@@Base+0x39cc>
   163b8:	add	r0, pc, r0
   163bc:	bl	12a08 <__assert_fail@plt>
   163c0:	mov	r0, r3
   163c4:	sub	sp, fp, #4
   163c8:	pop	{fp, pc}
   163cc:	andeq	sp, r1, r8, asr #30
   163d0:			; <UNDEFINED> instruction: 0x000002bb
   163d4:	andeq	sl, r1, r0, lsr #16
   163d8:			; <UNDEFINED> instruction: 0x0001a8bc
   163dc:	andeq	sp, r1, r4, lsl #29
   163e0:	andeq	sl, r1, ip, asr r7
   163e4:	andeq	sl, r1, r8, lsl #17
   163e8:	push	{fp, lr}
   163ec:	add	fp, sp, #4
   163f0:	sub	sp, sp, #16
   163f4:	str	r0, [fp, #-16]
   163f8:	str	r1, [fp, #-20]	; 0xffffffec
   163fc:	mov	r3, #0
   16400:	str	r3, [fp, #-8]
   16404:	b	16454 <_start@@Base+0x3a3c>
   16408:	ldr	r1, [fp, #-8]
   1640c:	ldr	r0, [fp, #-16]
   16410:	bl	15900 <_start@@Base+0x2ee8>
   16414:	mov	r3, r0
   16418:	mov	r0, r3
   1641c:	bl	162b8 <_start@@Base+0x38a0>
   16420:	str	r0, [fp, #-12]
   16424:	mov	r2, #0
   16428:	ldr	r1, [fp, #-20]	; 0xffffffec
   1642c:	ldr	r0, [fp, #-12]
   16430:	bl	1387c <_start@@Base+0xe64>
   16434:	mov	r3, r0
   16438:	cmp	r3, #0
   1643c:	bne	16448 <_start@@Base+0x3a30>
   16440:	ldr	r3, [fp, #-8]
   16444:	b	16478 <_start@@Base+0x3a60>
   16448:	ldr	r3, [fp, #-8]
   1644c:	add	r3, r3, #1
   16450:	str	r3, [fp, #-8]
   16454:	ldr	r0, [fp, #-16]
   16458:	bl	158bc <_start@@Base+0x2ea4>
   1645c:	mov	r2, r0
   16460:	ldr	r3, [fp, #-8]
   16464:	cmp	r2, r3
   16468:	bhi	16408 <_start@@Base+0x39f0>
   1646c:	ldr	r3, [pc, #16]	; 16484 <_start@@Base+0x3a6c>
   16470:	add	r3, pc, r3
   16474:	ldr	r3, [r3]
   16478:	mov	r0, r3
   1647c:	sub	sp, fp, #4
   16480:	pop	{fp, pc}
   16484:	andeq	pc, r2, r8, lsl #24
   16488:	push	{fp, lr}
   1648c:	add	fp, sp, #4
   16490:	sub	sp, sp, #24
   16494:	str	r0, [fp, #-16]
   16498:	str	r1, [fp, #-20]	; 0xffffffec
   1649c:	str	r2, [fp, #-24]	; 0xffffffe8
   164a0:	mov	r3, #0
   164a4:	str	r3, [fp, #-8]
   164a8:	b	164fc <_start@@Base+0x3ae4>
   164ac:	ldr	r1, [fp, #-8]
   164b0:	ldr	r0, [fp, #-16]
   164b4:	bl	15900 <_start@@Base+0x2ee8>
   164b8:	mov	r3, r0
   164bc:	mov	r0, r3
   164c0:	bl	162b8 <_start@@Base+0x38a0>
   164c4:	str	r0, [fp, #-12]
   164c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164cc:	mov	r2, r3
   164d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   164d4:	ldr	r0, [fp, #-12]
   164d8:	bl	137e0 <_start@@Base+0xdc8>
   164dc:	mov	r3, r0
   164e0:	cmp	r3, #0
   164e4:	bne	164f0 <_start@@Base+0x3ad8>
   164e8:	ldr	r3, [fp, #-8]
   164ec:	b	16520 <_start@@Base+0x3b08>
   164f0:	ldr	r3, [fp, #-8]
   164f4:	add	r3, r3, #1
   164f8:	str	r3, [fp, #-8]
   164fc:	ldr	r0, [fp, #-16]
   16500:	bl	158bc <_start@@Base+0x2ea4>
   16504:	mov	r2, r0
   16508:	ldr	r3, [fp, #-8]
   1650c:	cmp	r2, r3
   16510:	bhi	164ac <_start@@Base+0x3a94>
   16514:	ldr	r3, [pc, #16]	; 1652c <_start@@Base+0x3b14>
   16518:	add	r3, pc, r3
   1651c:	ldr	r3, [r3]
   16520:	mov	r0, r3
   16524:	sub	sp, fp, #4
   16528:	pop	{fp, pc}
   1652c:	andeq	pc, r2, r0, ror #22
   16530:	push	{fp, lr}
   16534:	add	fp, sp, #4
   16538:	sub	sp, sp, #24
   1653c:	str	r0, [fp, #-16]
   16540:	str	r1, [fp, #-20]	; 0xffffffec
   16544:	str	r2, [fp, #-24]	; 0xffffffe8
   16548:	str	r3, [fp, #-28]	; 0xffffffe4
   1654c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16550:	str	r3, [fp, #-8]
   16554:	b	165a4 <_start@@Base+0x3b8c>
   16558:	ldr	r1, [fp, #-8]
   1655c:	ldr	r0, [fp, #-16]
   16560:	bl	15900 <_start@@Base+0x2ee8>
   16564:	mov	r3, r0
   16568:	mov	r0, r3
   1656c:	bl	162b8 <_start@@Base+0x38a0>
   16570:	str	r0, [fp, #-12]
   16574:	mov	r2, #0
   16578:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1657c:	ldr	r0, [fp, #-12]
   16580:	bl	1387c <_start@@Base+0xe64>
   16584:	mov	r3, r0
   16588:	cmp	r3, #0
   1658c:	bne	16598 <_start@@Base+0x3b80>
   16590:	ldr	r3, [fp, #-8]
   16594:	b	165e8 <_start@@Base+0x3bd0>
   16598:	ldr	r3, [fp, #-8]
   1659c:	add	r3, r3, #1
   165a0:	str	r3, [fp, #-8]
   165a4:	ldr	r0, [fp, #-16]
   165a8:	bl	158bc <_start@@Base+0x2ea4>
   165ac:	mov	r2, r0
   165b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165b4:	cmp	r2, r3
   165b8:	bhi	165cc <_start@@Base+0x3bb4>
   165bc:	ldr	r0, [fp, #-16]
   165c0:	bl	158bc <_start@@Base+0x2ea4>
   165c4:	mov	r3, r0
   165c8:	b	165d0 <_start@@Base+0x3bb8>
   165cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165d0:	ldr	r2, [fp, #-8]
   165d4:	cmp	r3, r2
   165d8:	bhi	16558 <_start@@Base+0x3b40>
   165dc:	ldr	r3, [pc, #16]	; 165f4 <_start@@Base+0x3bdc>
   165e0:	add	r3, pc, r3
   165e4:	ldr	r3, [r3]
   165e8:	mov	r0, r3
   165ec:	sub	sp, fp, #4
   165f0:	pop	{fp, pc}
   165f4:	muleq	r2, r8, sl
   165f8:	push	{fp, lr}
   165fc:	add	fp, sp, #4
   16600:	sub	sp, sp, #24
   16604:	str	r0, [fp, #-16]
   16608:	str	r1, [fp, #-20]	; 0xffffffec
   1660c:	str	r2, [fp, #-24]	; 0xffffffe8
   16610:	str	r3, [fp, #-28]	; 0xffffffe4
   16614:	ldr	r3, [fp, #-20]	; 0xffffffec
   16618:	str	r3, [fp, #-8]
   1661c:	b	16670 <_start@@Base+0x3c58>
   16620:	ldr	r1, [fp, #-8]
   16624:	ldr	r0, [fp, #-16]
   16628:	bl	15900 <_start@@Base+0x2ee8>
   1662c:	mov	r3, r0
   16630:	mov	r0, r3
   16634:	bl	162b8 <_start@@Base+0x38a0>
   16638:	str	r0, [fp, #-12]
   1663c:	ldr	r3, [fp, #4]
   16640:	mov	r2, r3
   16644:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16648:	ldr	r0, [fp, #-12]
   1664c:	bl	137e0 <_start@@Base+0xdc8>
   16650:	mov	r3, r0
   16654:	cmp	r3, #0
   16658:	bne	16664 <_start@@Base+0x3c4c>
   1665c:	ldr	r3, [fp, #-8]
   16660:	b	166b4 <_start@@Base+0x3c9c>
   16664:	ldr	r3, [fp, #-8]
   16668:	add	r3, r3, #1
   1666c:	str	r3, [fp, #-8]
   16670:	ldr	r0, [fp, #-16]
   16674:	bl	158bc <_start@@Base+0x2ea4>
   16678:	mov	r2, r0
   1667c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16680:	cmp	r2, r3
   16684:	bhi	16698 <_start@@Base+0x3c80>
   16688:	ldr	r0, [fp, #-16]
   1668c:	bl	158bc <_start@@Base+0x2ea4>
   16690:	mov	r3, r0
   16694:	b	1669c <_start@@Base+0x3c84>
   16698:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1669c:	ldr	r2, [fp, #-8]
   166a0:	cmp	r3, r2
   166a4:	bhi	16620 <_start@@Base+0x3c08>
   166a8:	ldr	r3, [pc, #16]	; 166c0 <_start@@Base+0x3ca8>
   166ac:	add	r3, pc, r3
   166b0:	ldr	r3, [r3]
   166b4:	mov	r0, r3
   166b8:	sub	sp, fp, #4
   166bc:	pop	{fp, pc}
   166c0:	andeq	pc, r2, ip, asr #19
   166c4:	push	{fp, lr}
   166c8:	add	fp, sp, #4
   166cc:	sub	sp, sp, #16
   166d0:	str	r0, [fp, #-16]
   166d4:	str	r1, [fp, #-20]	; 0xffffffec
   166d8:	ldr	r0, [fp, #-16]
   166dc:	bl	158bc <_start@@Base+0x2ea4>
   166e0:	str	r0, [fp, #-8]
   166e4:	b	16728 <_start@@Base+0x3d10>
   166e8:	ldr	r1, [fp, #-8]
   166ec:	ldr	r0, [fp, #-16]
   166f0:	bl	15900 <_start@@Base+0x2ee8>
   166f4:	mov	r3, r0
   166f8:	mov	r0, r3
   166fc:	bl	162b8 <_start@@Base+0x38a0>
   16700:	str	r0, [fp, #-12]
   16704:	mov	r2, #0
   16708:	ldr	r1, [fp, #-20]	; 0xffffffec
   1670c:	ldr	r0, [fp, #-12]
   16710:	bl	1387c <_start@@Base+0xe64>
   16714:	mov	r3, r0
   16718:	cmp	r3, #0
   1671c:	bne	16728 <_start@@Base+0x3d10>
   16720:	ldr	r3, [fp, #-8]
   16724:	b	16748 <_start@@Base+0x3d30>
   16728:	ldr	r3, [fp, #-8]
   1672c:	sub	r2, r3, #1
   16730:	str	r2, [fp, #-8]
   16734:	cmp	r3, #0
   16738:	bne	166e8 <_start@@Base+0x3cd0>
   1673c:	ldr	r3, [pc, #16]	; 16754 <_start@@Base+0x3d3c>
   16740:	add	r3, pc, r3
   16744:	ldr	r3, [r3]
   16748:	mov	r0, r3
   1674c:	sub	sp, fp, #4
   16750:	pop	{fp, pc}
   16754:	andeq	pc, r2, r8, lsr r9	; <UNPREDICTABLE>
   16758:	push	{fp, lr}
   1675c:	add	fp, sp, #4
   16760:	sub	sp, sp, #24
   16764:	str	r0, [fp, #-16]
   16768:	str	r1, [fp, #-20]	; 0xffffffec
   1676c:	str	r2, [fp, #-24]	; 0xffffffe8
   16770:	ldr	r0, [fp, #-16]
   16774:	bl	158bc <_start@@Base+0x2ea4>
   16778:	str	r0, [fp, #-8]
   1677c:	b	167c4 <_start@@Base+0x3dac>
   16780:	ldr	r1, [fp, #-8]
   16784:	ldr	r0, [fp, #-16]
   16788:	bl	15900 <_start@@Base+0x2ee8>
   1678c:	mov	r3, r0
   16790:	mov	r0, r3
   16794:	bl	162b8 <_start@@Base+0x38a0>
   16798:	str	r0, [fp, #-12]
   1679c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167a0:	mov	r2, r3
   167a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   167a8:	ldr	r0, [fp, #-12]
   167ac:	bl	137e0 <_start@@Base+0xdc8>
   167b0:	mov	r3, r0
   167b4:	cmp	r3, #0
   167b8:	bne	167c4 <_start@@Base+0x3dac>
   167bc:	ldr	r3, [fp, #-8]
   167c0:	b	167e4 <_start@@Base+0x3dcc>
   167c4:	ldr	r3, [fp, #-8]
   167c8:	sub	r2, r3, #1
   167cc:	str	r2, [fp, #-8]
   167d0:	cmp	r3, #0
   167d4:	bne	16780 <_start@@Base+0x3d68>
   167d8:	ldr	r3, [pc, #16]	; 167f0 <_start@@Base+0x3dd8>
   167dc:	add	r3, pc, r3
   167e0:	ldr	r3, [r3]
   167e4:	mov	r0, r3
   167e8:	sub	sp, fp, #4
   167ec:	pop	{fp, pc}
   167f0:	muleq	r2, ip, r8
   167f4:	push	{fp, lr}
   167f8:	add	fp, sp, #4
   167fc:	sub	sp, sp, #24
   16800:	str	r0, [fp, #-16]
   16804:	str	r1, [fp, #-20]	; 0xffffffec
   16808:	str	r2, [fp, #-24]	; 0xffffffe8
   1680c:	str	r3, [fp, #-28]	; 0xffffffe4
   16810:	ldr	r0, [fp, #-16]
   16814:	bl	158bc <_start@@Base+0x2ea4>
   16818:	mov	r2, r0
   1681c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16820:	cmp	r2, r3
   16824:	bhi	16838 <_start@@Base+0x3e20>
   16828:	ldr	r0, [fp, #-16]
   1682c:	bl	158bc <_start@@Base+0x2ea4>
   16830:	mov	r3, r0
   16834:	b	1683c <_start@@Base+0x3e24>
   16838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1683c:	str	r3, [fp, #-8]
   16840:	b	16884 <_start@@Base+0x3e6c>
   16844:	ldr	r1, [fp, #-8]
   16848:	ldr	r0, [fp, #-16]
   1684c:	bl	15900 <_start@@Base+0x2ee8>
   16850:	mov	r3, r0
   16854:	mov	r0, r3
   16858:	bl	162b8 <_start@@Base+0x38a0>
   1685c:	str	r0, [fp, #-12]
   16860:	mov	r2, #0
   16864:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16868:	ldr	r0, [fp, #-12]
   1686c:	bl	1387c <_start@@Base+0xe64>
   16870:	mov	r3, r0
   16874:	cmp	r3, #0
   16878:	bne	16884 <_start@@Base+0x3e6c>
   1687c:	ldr	r3, [fp, #-8]
   16880:	b	168a8 <_start@@Base+0x3e90>
   16884:	ldr	r3, [fp, #-8]
   16888:	sub	r2, r3, #1
   1688c:	str	r2, [fp, #-8]
   16890:	ldr	r2, [fp, #-20]	; 0xffffffec
   16894:	cmp	r3, r2
   16898:	bhi	16844 <_start@@Base+0x3e2c>
   1689c:	ldr	r3, [pc, #16]	; 168b4 <_start@@Base+0x3e9c>
   168a0:	add	r3, pc, r3
   168a4:	ldr	r3, [r3]
   168a8:	mov	r0, r3
   168ac:	sub	sp, fp, #4
   168b0:	pop	{fp, pc}
   168b4:	ldrdeq	pc, [r2], -r8
   168b8:	push	{fp, lr}
   168bc:	add	fp, sp, #4
   168c0:	sub	sp, sp, #24
   168c4:	str	r0, [fp, #-16]
   168c8:	str	r1, [fp, #-20]	; 0xffffffec
   168cc:	str	r2, [fp, #-24]	; 0xffffffe8
   168d0:	str	r3, [fp, #-28]	; 0xffffffe4
   168d4:	ldr	r0, [fp, #-16]
   168d8:	bl	158bc <_start@@Base+0x2ea4>
   168dc:	mov	r2, r0
   168e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168e4:	cmp	r2, r3
   168e8:	bhi	168fc <_start@@Base+0x3ee4>
   168ec:	ldr	r0, [fp, #-16]
   168f0:	bl	158bc <_start@@Base+0x2ea4>
   168f4:	mov	r3, r0
   168f8:	b	16900 <_start@@Base+0x3ee8>
   168fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16900:	str	r3, [fp, #-8]
   16904:	b	1694c <_start@@Base+0x3f34>
   16908:	ldr	r1, [fp, #-8]
   1690c:	ldr	r0, [fp, #-16]
   16910:	bl	15900 <_start@@Base+0x2ee8>
   16914:	mov	r3, r0
   16918:	mov	r0, r3
   1691c:	bl	162b8 <_start@@Base+0x38a0>
   16920:	str	r0, [fp, #-12]
   16924:	ldr	r3, [fp, #4]
   16928:	mov	r2, r3
   1692c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16930:	ldr	r0, [fp, #-12]
   16934:	bl	137e0 <_start@@Base+0xdc8>
   16938:	mov	r3, r0
   1693c:	cmp	r3, #0
   16940:	bne	1694c <_start@@Base+0x3f34>
   16944:	ldr	r3, [fp, #-8]
   16948:	b	16970 <_start@@Base+0x3f58>
   1694c:	ldr	r3, [fp, #-8]
   16950:	sub	r2, r3, #1
   16954:	str	r2, [fp, #-8]
   16958:	ldr	r2, [fp, #-20]	; 0xffffffec
   1695c:	cmp	r3, r2
   16960:	bhi	16908 <_start@@Base+0x3ef0>
   16964:	ldr	r3, [pc, #16]	; 1697c <_start@@Base+0x3f64>
   16968:	add	r3, pc, r3
   1696c:	ldr	r3, [r3]
   16970:	mov	r0, r3
   16974:	sub	sp, fp, #4
   16978:	pop	{fp, pc}
   1697c:	andeq	pc, r2, r0, lsl r7	; <UNPREDICTABLE>
   16980:	push	{fp, lr}
   16984:	add	fp, sp, #4
   16988:	sub	sp, sp, #24
   1698c:	str	r0, [fp, #-24]	; 0xffffffe8
   16990:	str	r1, [fp, #-28]	; 0xffffffe4
   16994:	mov	r3, #0
   16998:	str	r3, [fp, #-8]
   1699c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169a0:	bl	158bc <_start@@Base+0x2ea4>
   169a4:	str	r0, [fp, #-12]
   169a8:	ldr	r3, [fp, #-12]
   169ac:	cmp	r3, #0
   169b0:	bne	169c4 <_start@@Base+0x3fac>
   169b4:	ldr	r3, [pc, #252]	; 16ab8 <_start@@Base+0x40a0>
   169b8:	add	r3, pc, r3
   169bc:	ldr	r3, [r3]
   169c0:	b	16aac <_start@@Base+0x4094>
   169c4:	ldr	r3, [fp, #-12]
   169c8:	sub	r3, r3, #1
   169cc:	str	r3, [fp, #-12]
   169d0:	b	16a40 <_start@@Base+0x4028>
   169d4:	ldr	r2, [fp, #-12]
   169d8:	ldr	r3, [fp, #-8]
   169dc:	sub	r3, r2, r3
   169e0:	lsr	r2, r3, #1
   169e4:	ldr	r3, [fp, #-8]
   169e8:	add	r3, r2, r3
   169ec:	str	r3, [fp, #-16]
   169f0:	ldr	r1, [fp, #-16]
   169f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169f8:	bl	15900 <_start@@Base+0x2ee8>
   169fc:	mov	r3, r0
   16a00:	mov	r0, r3
   16a04:	bl	162b8 <_start@@Base+0x38a0>
   16a08:	str	r0, [fp, #-20]	; 0xffffffec
   16a0c:	mov	r2, #0
   16a10:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16a14:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a18:	bl	1387c <_start@@Base+0xe64>
   16a1c:	mov	r3, r0
   16a20:	cmp	r3, #0
   16a24:	bge	16a38 <_start@@Base+0x4020>
   16a28:	ldr	r3, [fp, #-16]
   16a2c:	add	r3, r3, #1
   16a30:	str	r3, [fp, #-8]
   16a34:	b	16a40 <_start@@Base+0x4028>
   16a38:	ldr	r3, [fp, #-16]
   16a3c:	str	r3, [fp, #-12]
   16a40:	ldr	r2, [fp, #-8]
   16a44:	ldr	r3, [fp, #-12]
   16a48:	cmp	r2, r3
   16a4c:	bcc	169d4 <_start@@Base+0x3fbc>
   16a50:	ldr	r2, [fp, #-8]
   16a54:	ldr	r3, [fp, #-12]
   16a58:	cmp	r2, r3
   16a5c:	bne	16aa0 <_start@@Base+0x4088>
   16a60:	ldr	r1, [fp, #-8]
   16a64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16a68:	bl	15900 <_start@@Base+0x2ee8>
   16a6c:	mov	r3, r0
   16a70:	mov	r0, r3
   16a74:	bl	162b8 <_start@@Base+0x38a0>
   16a78:	str	r0, [fp, #-20]	; 0xffffffec
   16a7c:	mov	r2, #0
   16a80:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16a84:	ldr	r0, [fp, #-20]	; 0xffffffec
   16a88:	bl	1387c <_start@@Base+0xe64>
   16a8c:	mov	r3, r0
   16a90:	cmp	r3, #0
   16a94:	bne	16aa0 <_start@@Base+0x4088>
   16a98:	ldr	r3, [fp, #-8]
   16a9c:	b	16aac <_start@@Base+0x4094>
   16aa0:	ldr	r3, [pc, #20]	; 16abc <_start@@Base+0x40a4>
   16aa4:	add	r3, pc, r3
   16aa8:	ldr	r3, [r3]
   16aac:	mov	r0, r3
   16ab0:	sub	sp, fp, #4
   16ab4:	pop	{fp, pc}
   16ab8:	andeq	pc, r2, r0, asr #13
   16abc:	ldrdeq	pc, [r2], -r4
   16ac0:	push	{fp, lr}
   16ac4:	add	fp, sp, #4
   16ac8:	sub	sp, sp, #32
   16acc:	str	r0, [fp, #-24]	; 0xffffffe8
   16ad0:	str	r1, [fp, #-28]	; 0xffffffe4
   16ad4:	str	r2, [fp, #-32]	; 0xffffffe0
   16ad8:	mov	r3, #0
   16adc:	str	r3, [fp, #-8]
   16ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ae4:	bl	158bc <_start@@Base+0x2ea4>
   16ae8:	str	r0, [fp, #-12]
   16aec:	ldr	r3, [fp, #-12]
   16af0:	cmp	r3, #0
   16af4:	bne	16b08 <_start@@Base+0x40f0>
   16af8:	ldr	r3, [pc, #260]	; 16c04 <_start@@Base+0x41ec>
   16afc:	add	r3, pc, r3
   16b00:	ldr	r3, [r3]
   16b04:	b	16bf8 <_start@@Base+0x41e0>
   16b08:	ldr	r3, [fp, #-12]
   16b0c:	sub	r3, r3, #1
   16b10:	str	r3, [fp, #-12]
   16b14:	b	16b88 <_start@@Base+0x4170>
   16b18:	ldr	r2, [fp, #-12]
   16b1c:	ldr	r3, [fp, #-8]
   16b20:	sub	r3, r2, r3
   16b24:	lsr	r2, r3, #1
   16b28:	ldr	r3, [fp, #-8]
   16b2c:	add	r3, r2, r3
   16b30:	str	r3, [fp, #-16]
   16b34:	ldr	r1, [fp, #-16]
   16b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16b3c:	bl	15900 <_start@@Base+0x2ee8>
   16b40:	mov	r3, r0
   16b44:	mov	r0, r3
   16b48:	bl	162b8 <_start@@Base+0x38a0>
   16b4c:	str	r0, [fp, #-20]	; 0xffffffec
   16b50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b54:	mov	r2, r3
   16b58:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16b5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16b60:	bl	137e0 <_start@@Base+0xdc8>
   16b64:	mov	r3, r0
   16b68:	cmp	r3, #0
   16b6c:	bge	16b80 <_start@@Base+0x4168>
   16b70:	ldr	r3, [fp, #-16]
   16b74:	add	r3, r3, #1
   16b78:	str	r3, [fp, #-8]
   16b7c:	b	16b88 <_start@@Base+0x4170>
   16b80:	ldr	r3, [fp, #-16]
   16b84:	str	r3, [fp, #-12]
   16b88:	ldr	r2, [fp, #-8]
   16b8c:	ldr	r3, [fp, #-12]
   16b90:	cmp	r2, r3
   16b94:	bcc	16b18 <_start@@Base+0x4100>
   16b98:	ldr	r2, [fp, #-8]
   16b9c:	ldr	r3, [fp, #-12]
   16ba0:	cmp	r2, r3
   16ba4:	bne	16bec <_start@@Base+0x41d4>
   16ba8:	ldr	r1, [fp, #-8]
   16bac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bb0:	bl	15900 <_start@@Base+0x2ee8>
   16bb4:	mov	r3, r0
   16bb8:	mov	r0, r3
   16bbc:	bl	162b8 <_start@@Base+0x38a0>
   16bc0:	str	r0, [fp, #-20]	; 0xffffffec
   16bc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bc8:	mov	r2, r3
   16bcc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16bd4:	bl	137e0 <_start@@Base+0xdc8>
   16bd8:	mov	r3, r0
   16bdc:	cmp	r3, #0
   16be0:	bne	16bec <_start@@Base+0x41d4>
   16be4:	ldr	r3, [fp, #-8]
   16be8:	b	16bf8 <_start@@Base+0x41e0>
   16bec:	ldr	r3, [pc, #20]	; 16c08 <_start@@Base+0x41f0>
   16bf0:	add	r3, pc, r3
   16bf4:	ldr	r3, [r3]
   16bf8:	mov	r0, r3
   16bfc:	sub	sp, fp, #4
   16c00:	pop	{fp, pc}
   16c04:	andeq	pc, r2, ip, ror r5	; <UNPREDICTABLE>
   16c08:	andeq	pc, r2, r8, lsl #9
   16c0c:	push	{fp, lr}
   16c10:	add	fp, sp, #4
   16c14:	sub	sp, sp, #48	; 0x30
   16c18:	str	r0, [fp, #-40]	; 0xffffffd8
   16c1c:	str	r1, [fp, #-44]	; 0xffffffd4
   16c20:	str	r2, [fp, #-48]	; 0xffffffd0
   16c24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16c28:	str	r3, [fp, #-12]
   16c2c:	b	16dc4 <_start@@Base+0x43ac>
   16c30:	ldr	r3, [fp, #-12]
   16c34:	lsl	r3, r3, #1
   16c38:	str	r3, [fp, #-8]
   16c3c:	ldr	r2, [fp, #-8]
   16c40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16c44:	cmp	r2, r3
   16c48:	bcs	16cc0 <_start@@Base+0x42a8>
   16c4c:	ldr	r1, [fp, #-8]
   16c50:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16c54:	bl	15900 <_start@@Base+0x2ee8>
   16c58:	mov	r3, r0
   16c5c:	mov	r0, r3
   16c60:	bl	162b8 <_start@@Base+0x38a0>
   16c64:	str	r0, [fp, #-16]
   16c68:	ldr	r3, [fp, #-8]
   16c6c:	add	r3, r3, #1
   16c70:	mov	r1, r3
   16c74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16c78:	bl	15900 <_start@@Base+0x2ee8>
   16c7c:	mov	r3, r0
   16c80:	mov	r0, r3
   16c84:	bl	162b8 <_start@@Base+0x38a0>
   16c88:	str	r0, [fp, #-20]	; 0xffffffec
   16c8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16c90:	bl	1353c <_start@@Base+0xb24>
   16c94:	mov	r3, r0
   16c98:	mov	r2, r3
   16c9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ca0:	ldr	r0, [fp, #-16]
   16ca4:	bl	137e0 <_start@@Base+0xdc8>
   16ca8:	mov	r3, r0
   16cac:	cmp	r3, #0
   16cb0:	bge	16cc0 <_start@@Base+0x42a8>
   16cb4:	ldr	r3, [fp, #-8]
   16cb8:	add	r3, r3, #1
   16cbc:	str	r3, [fp, #-8]
   16cc0:	ldr	r1, [fp, #-12]
   16cc4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16cc8:	bl	15900 <_start@@Base+0x2ee8>
   16ccc:	mov	r3, r0
   16cd0:	mov	r0, r3
   16cd4:	bl	162b8 <_start@@Base+0x38a0>
   16cd8:	str	r0, [fp, #-24]	; 0xffffffe8
   16cdc:	ldr	r1, [fp, #-8]
   16ce0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16ce4:	bl	15900 <_start@@Base+0x2ee8>
   16ce8:	mov	r3, r0
   16cec:	mov	r0, r3
   16cf0:	bl	162b8 <_start@@Base+0x38a0>
   16cf4:	str	r0, [fp, #-16]
   16cf8:	ldr	r0, [fp, #-16]
   16cfc:	bl	1353c <_start@@Base+0xb24>
   16d00:	mov	r3, r0
   16d04:	mov	r2, r3
   16d08:	ldr	r1, [fp, #-16]
   16d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d10:	bl	137e0 <_start@@Base+0xdc8>
   16d14:	mov	r3, r0
   16d18:	cmp	r3, #0
   16d1c:	bge	16ddc <_start@@Base+0x43c4>
   16d20:	ldr	r2, [fp, #-12]
   16d24:	ldr	r3, [fp, #-8]
   16d28:	sub	r3, r2, r3
   16d2c:	lsl	r3, r3, #2
   16d30:	str	r3, [fp, #-28]	; 0xffffffe4
   16d34:	ldr	r3, [fp, #-8]
   16d38:	lsl	r3, r3, #2
   16d3c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d40:	add	r3, r2, r3
   16d44:	mov	r0, r3
   16d48:	bl	131f4 <_start@@Base+0x7dc>
   16d4c:	mov	r2, r0
   16d50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d54:	sub	r3, r2, r3
   16d58:	str	r3, [fp, #-32]	; 0xffffffe0
   16d5c:	ldr	r3, [fp, #-12]
   16d60:	lsl	r3, r3, #2
   16d64:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d68:	add	r3, r2, r3
   16d6c:	mov	r0, r3
   16d70:	bl	131f4 <_start@@Base+0x7dc>
   16d74:	mov	r2, r0
   16d78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d7c:	add	r3, r2, r3
   16d80:	str	r3, [fp, #-36]	; 0xffffffdc
   16d84:	ldr	r3, [fp, #-12]
   16d88:	lsl	r3, r3, #2
   16d8c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d90:	add	r3, r2, r3
   16d94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16d98:	mov	r0, r3
   16d9c:	bl	13224 <_start@@Base+0x80c>
   16da0:	ldr	r3, [fp, #-8]
   16da4:	lsl	r3, r3, #2
   16da8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16dac:	add	r3, r2, r3
   16db0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16db4:	mov	r0, r3
   16db8:	bl	13224 <_start@@Base+0x80c>
   16dbc:	ldr	r3, [fp, #-8]
   16dc0:	str	r3, [fp, #-12]
   16dc4:	ldr	r3, [fp, #-12]
   16dc8:	lsl	r2, r3, #1
   16dcc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16dd0:	cmp	r2, r3
   16dd4:	bls	16c30 <_start@@Base+0x4218>
   16dd8:	b	16de0 <_start@@Base+0x43c8>
   16ddc:	nop			; (mov r0, r0)
   16de0:	sub	sp, fp, #4
   16de4:	pop	{fp, pc}
   16de8:	push	{fp, lr}
   16dec:	add	fp, sp, #4
   16df0:	sub	sp, sp, #32
   16df4:	str	r0, [fp, #-32]	; 0xffffffe0
   16df8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16dfc:	bl	158bc <_start@@Base+0x2ea4>
   16e00:	str	r0, [fp, #-16]
   16e04:	ldr	r3, [fp, #-16]
   16e08:	cmp	r3, #0
   16e0c:	beq	16efc <_start@@Base+0x44e4>
   16e10:	ldr	r3, [fp, #-16]
   16e14:	sub	r3, r3, #1
   16e18:	str	r3, [fp, #-12]
   16e1c:	ldr	r3, [fp, #-16]
   16e20:	lsr	r3, r3, #1
   16e24:	str	r3, [fp, #-8]
   16e28:	ldr	r2, [fp, #-12]
   16e2c:	ldr	r1, [fp, #-8]
   16e30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e34:	bl	16c0c <_start@@Base+0x41f4>
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	sub	r2, r3, #1
   16e40:	str	r2, [fp, #-8]
   16e44:	cmp	r3, #0
   16e48:	bne	16e28 <_start@@Base+0x4410>
   16e4c:	b	16eec <_start@@Base+0x44d4>
   16e50:	ldr	r2, [fp, #-12]
   16e54:	mov	r3, r2
   16e58:	lsl	r3, r3, #30
   16e5c:	sub	r3, r3, r2
   16e60:	lsl	r3, r3, #2
   16e64:	str	r3, [fp, #-20]	; 0xffffffec
   16e68:	ldr	r3, [fp, #-12]
   16e6c:	lsl	r3, r3, #2
   16e70:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e74:	add	r3, r2, r3
   16e78:	mov	r0, r3
   16e7c:	bl	131f4 <_start@@Base+0x7dc>
   16e80:	mov	r2, r0
   16e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e88:	sub	r3, r2, r3
   16e8c:	str	r3, [fp, #-24]	; 0xffffffe8
   16e90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e94:	bl	131f4 <_start@@Base+0x7dc>
   16e98:	mov	r2, r0
   16e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ea0:	add	r3, r2, r3
   16ea4:	str	r3, [fp, #-28]	; 0xffffffe4
   16ea8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16eac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16eb0:	bl	13224 <_start@@Base+0x80c>
   16eb4:	ldr	r3, [fp, #-12]
   16eb8:	lsl	r3, r3, #2
   16ebc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ec0:	add	r3, r2, r3
   16ec4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16ec8:	mov	r0, r3
   16ecc:	bl	13224 <_start@@Base+0x80c>
   16ed0:	ldr	r3, [fp, #-12]
   16ed4:	sub	r3, r3, #1
   16ed8:	str	r3, [fp, #-12]
   16edc:	ldr	r2, [fp, #-12]
   16ee0:	mov	r1, #0
   16ee4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16ee8:	bl	16c0c <_start@@Base+0x41f4>
   16eec:	ldr	r3, [fp, #-12]
   16ef0:	cmp	r3, #0
   16ef4:	bne	16e50 <_start@@Base+0x4438>
   16ef8:	b	16f00 <_start@@Base+0x44e8>
   16efc:	nop			; (mov r0, r0)
   16f00:	sub	sp, fp, #4
   16f04:	pop	{fp, pc}
   16f08:	push	{fp, lr}
   16f0c:	add	fp, sp, #4
   16f10:	sub	sp, sp, #8
   16f14:	str	r0, [fp, #-8]
   16f18:	ldr	r0, [fp, #-8]
   16f1c:	bl	16de8 <_start@@Base+0x43d0>
   16f20:	nop			; (mov r0, r0)
   16f24:	sub	sp, fp, #4
   16f28:	pop	{fp, pc}
   16f2c:	push	{fp, lr}
   16f30:	add	fp, sp, #4
   16f34:	sub	sp, sp, #8
   16f38:	str	r0, [fp, #-8]
   16f3c:	str	r1, [fp, #-12]
   16f40:	ldr	r1, [fp, #-12]
   16f44:	ldr	r0, [fp, #-8]
   16f48:	bl	16980 <_start@@Base+0x3f68>
   16f4c:	mov	r3, r0
   16f50:	mov	r0, r3
   16f54:	sub	sp, fp, #4
   16f58:	pop	{fp, pc}
   16f5c:	push	{fp, lr}
   16f60:	add	fp, sp, #4
   16f64:	sub	sp, sp, #16
   16f68:	str	r0, [fp, #-8]
   16f6c:	str	r1, [fp, #-12]
   16f70:	str	r2, [fp, #-16]
   16f74:	ldr	r2, [fp, #-16]
   16f78:	ldr	r1, [fp, #-12]
   16f7c:	ldr	r0, [fp, #-8]
   16f80:	bl	16ac0 <_start@@Base+0x40a8>
   16f84:	mov	r3, r0
   16f88:	mov	r0, r3
   16f8c:	sub	sp, fp, #4
   16f90:	pop	{fp, pc}
   16f94:	push	{fp, lr}
   16f98:	add	fp, sp, #4
   16f9c:	sub	sp, sp, #8
   16fa0:	str	r0, [fp, #-8]
   16fa4:	str	r1, [fp, #-12]
   16fa8:	ldr	r1, [fp, #-12]
   16fac:	ldr	r0, [fp, #-8]
   16fb0:	bl	163e8 <_start@@Base+0x39d0>
   16fb4:	mov	r3, r0
   16fb8:	mov	r0, r3
   16fbc:	sub	sp, fp, #4
   16fc0:	pop	{fp, pc}
   16fc4:	push	{fp, lr}
   16fc8:	add	fp, sp, #4
   16fcc:	sub	sp, sp, #16
   16fd0:	str	r0, [fp, #-8]
   16fd4:	str	r1, [fp, #-12]
   16fd8:	str	r2, [fp, #-16]
   16fdc:	ldr	r2, [fp, #-16]
   16fe0:	ldr	r1, [fp, #-12]
   16fe4:	ldr	r0, [fp, #-8]
   16fe8:	bl	16488 <_start@@Base+0x3a70>
   16fec:	mov	r3, r0
   16ff0:	mov	r0, r3
   16ff4:	sub	sp, fp, #4
   16ff8:	pop	{fp, pc}
   16ffc:	push	{fp, lr}
   17000:	add	fp, sp, #4
   17004:	sub	sp, sp, #16
   17008:	str	r0, [fp, #-8]
   1700c:	str	r1, [fp, #-12]
   17010:	str	r2, [fp, #-16]
   17014:	str	r3, [fp, #-20]	; 0xffffffec
   17018:	ldr	r3, [fp, #-20]	; 0xffffffec
   1701c:	ldr	r2, [fp, #-16]
   17020:	ldr	r1, [fp, #-12]
   17024:	ldr	r0, [fp, #-8]
   17028:	bl	16530 <_start@@Base+0x3b18>
   1702c:	mov	r3, r0
   17030:	mov	r0, r3
   17034:	sub	sp, fp, #4
   17038:	pop	{fp, pc}
   1703c:	push	{fp, lr}
   17040:	add	fp, sp, #4
   17044:	sub	sp, sp, #8
   17048:	str	r0, [fp, #-8]
   1704c:	str	r1, [fp, #-12]
   17050:	ldr	r1, [fp, #-12]
   17054:	ldr	r0, [fp, #-8]
   17058:	bl	166c4 <_start@@Base+0x3cac>
   1705c:	mov	r3, r0
   17060:	mov	r0, r3
   17064:	sub	sp, fp, #4
   17068:	pop	{fp, pc}
   1706c:	push	{fp, lr}
   17070:	add	fp, sp, #4
   17074:	sub	sp, sp, #16
   17078:	str	r0, [fp, #-8]
   1707c:	str	r1, [fp, #-12]
   17080:	str	r2, [fp, #-16]
   17084:	ldr	r2, [fp, #-16]
   17088:	ldr	r1, [fp, #-12]
   1708c:	ldr	r0, [fp, #-8]
   17090:	bl	16758 <_start@@Base+0x3d40>
   17094:	mov	r3, r0
   17098:	mov	r0, r3
   1709c:	sub	sp, fp, #4
   170a0:	pop	{fp, pc}
   170a4:	push	{fp, lr}
   170a8:	add	fp, sp, #4
   170ac:	sub	sp, sp, #16
   170b0:	str	r0, [fp, #-8]
   170b4:	str	r1, [fp, #-12]
   170b8:	str	r2, [fp, #-16]
   170bc:	str	r3, [fp, #-20]	; 0xffffffec
   170c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170c4:	ldr	r2, [fp, #-16]
   170c8:	ldr	r1, [fp, #-12]
   170cc:	ldr	r0, [fp, #-8]
   170d0:	bl	167f4 <_start@@Base+0x3ddc>
   170d4:	mov	r3, r0
   170d8:	mov	r0, r3
   170dc:	sub	sp, fp, #4
   170e0:	pop	{fp, pc}
   170e4:	push	{fp, lr}
   170e8:	add	fp, sp, #4
   170ec:	sub	sp, sp, #16
   170f0:	str	r0, [fp, #-16]
   170f4:	mov	r3, #0
   170f8:	strh	r3, [fp, #-6]
   170fc:	ldr	r3, [fp, #-16]
   17100:	cmp	r3, #0
   17104:	bne	17128 <_start@@Base+0x4710>
   17108:	ldr	r3, [pc, #188]	; 171cc <_start@@Base+0x47b4>
   1710c:	add	r3, pc, r3
   17110:	ldr	r2, [pc, #184]	; 171d0 <_start@@Base+0x47b8>
   17114:	ldr	r1, [pc, #184]	; 171d4 <_start@@Base+0x47bc>
   17118:	add	r1, pc, r1
   1711c:	ldr	r0, [pc, #180]	; 171d8 <_start@@Base+0x47c0>
   17120:	add	r0, pc, r0
   17124:	bl	12a08 <__assert_fail@plt>
   17128:	mov	r3, #6
   1712c:	strh	r3, [fp, #-8]
   17130:	ldr	r0, [fp, #-16]
   17134:	bl	1327c <_start@@Base+0x864>
   17138:	mov	r3, r0
   1713c:	rsb	r3, r3, #0
   17140:	ldr	r2, [fp, #-16]
   17144:	add	r3, r2, r3
   17148:	str	r3, [fp, #-12]
   1714c:	ldr	r0, [fp, #-12]
   17150:	bl	132d4 <_start@@Base+0x8bc>
   17154:	mov	r3, r0
   17158:	mov	r2, r3
   1715c:	ldrh	r3, [fp, #-8]
   17160:	add	r3, r3, #3
   17164:	lsl	r3, r3, #1
   17168:	cmp	r2, r3
   1716c:	bcc	17194 <_start@@Base+0x477c>
   17170:	ldrh	r3, [fp, #-8]
   17174:	add	r3, r3, #2
   17178:	lsl	r3, r3, #1
   1717c:	ldr	r2, [fp, #-12]
   17180:	add	r3, r2, r3
   17184:	mov	r0, r3
   17188:	bl	132d4 <_start@@Base+0x8bc>
   1718c:	mov	r3, r0
   17190:	strh	r3, [fp, #-6]
   17194:	ldrh	r3, [fp, #-6]
   17198:	cmp	r3, #0
   1719c:	beq	171bc <_start@@Base+0x47a4>
   171a0:	ldrh	r3, [fp, #-6]
   171a4:	ldr	r2, [fp, #-16]
   171a8:	add	r3, r2, r3
   171ac:	mov	r0, r3
   171b0:	bl	14780 <_start@@Base+0x1d68>
   171b4:	mov	r3, r0
   171b8:	b	171c0 <_start@@Base+0x47a8>
   171bc:	mov	r3, #8
   171c0:	mov	r0, r3
   171c4:	sub	sp, fp, #4
   171c8:	pop	{fp, pc}
   171cc:	ldrdeq	ip, [r1], -r4
   171d0:	andeq	r0, r0, r1, asr #5
   171d4:	strdeq	r9, [r1], -r4
   171d8:	muleq	r1, r0, sl
   171dc:	push	{fp, lr}
   171e0:	add	fp, sp, #4
   171e4:	sub	sp, sp, #16
   171e8:	str	r0, [fp, #-16]
   171ec:	mov	r3, #0
   171f0:	strh	r3, [fp, #-6]
   171f4:	ldr	r3, [fp, #-16]
   171f8:	cmp	r3, #0
   171fc:	bne	17220 <_start@@Base+0x4808>
   17200:	ldr	r3, [pc, #164]	; 172ac <_start@@Base+0x4894>
   17204:	add	r3, pc, r3
   17208:	ldr	r2, [pc, #160]	; 172b0 <_start@@Base+0x4898>
   1720c:	ldr	r1, [pc, #160]	; 172b4 <_start@@Base+0x489c>
   17210:	add	r1, pc, r1
   17214:	ldr	r0, [pc, #156]	; 172b8 <_start@@Base+0x48a0>
   17218:	add	r0, pc, r0
   1721c:	bl	12a08 <__assert_fail@plt>
   17220:	mov	r3, #6
   17224:	strh	r3, [fp, #-8]
   17228:	ldr	r0, [fp, #-16]
   1722c:	bl	1327c <_start@@Base+0x864>
   17230:	mov	r3, r0
   17234:	rsb	r3, r3, #0
   17238:	ldr	r2, [fp, #-16]
   1723c:	add	r3, r2, r3
   17240:	str	r3, [fp, #-12]
   17244:	ldr	r0, [fp, #-12]
   17248:	bl	132d4 <_start@@Base+0x8bc>
   1724c:	mov	r3, r0
   17250:	mov	r2, r3
   17254:	ldrh	r3, [fp, #-8]
   17258:	add	r3, r3, #3
   1725c:	lsl	r3, r3, #1
   17260:	cmp	r2, r3
   17264:	bcc	1728c <_start@@Base+0x4874>
   17268:	ldrh	r3, [fp, #-8]
   1726c:	add	r3, r3, #2
   17270:	lsl	r3, r3, #1
   17274:	ldr	r2, [fp, #-12]
   17278:	add	r3, r2, r3
   1727c:	mov	r0, r3
   17280:	bl	132d4 <_start@@Base+0x8bc>
   17284:	mov	r3, r0
   17288:	strh	r3, [fp, #-6]
   1728c:	ldrh	r3, [fp, #-6]
   17290:	cmp	r3, #0
   17294:	movne	r3, #1
   17298:	moveq	r3, #0
   1729c:	uxtb	r3, r3
   172a0:	mov	r0, r3
   172a4:	sub	sp, fp, #4
   172a8:	pop	{fp, pc}
   172ac:	andeq	sp, r1, r4, asr r5
   172b0:	andeq	r0, r0, r1, asr #5
   172b4:	strdeq	r9, [r1], -ip
   172b8:	muleq	r1, r8, r9
   172bc:	push	{fp, lr}
   172c0:	add	fp, sp, #4
   172c4:	sub	sp, sp, #24
   172c8:	str	r0, [fp, #-24]	; 0xffffffe8
   172cc:	mov	r3, #0
   172d0:	strh	r3, [fp, #-6]
   172d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172d8:	cmp	r3, #0
   172dc:	bne	17300 <_start@@Base+0x48e8>
   172e0:	ldr	r3, [pc, #204]	; 173b4 <_start@@Base+0x499c>
   172e4:	add	r3, pc, r3
   172e8:	ldr	r2, [pc, #200]	; 173b8 <_start@@Base+0x49a0>
   172ec:	ldr	r1, [pc, #200]	; 173bc <_start@@Base+0x49a4>
   172f0:	add	r1, pc, r1
   172f4:	ldr	r0, [pc, #196]	; 173c0 <_start@@Base+0x49a8>
   172f8:	add	r0, pc, r0
   172fc:	bl	12a08 <__assert_fail@plt>
   17300:	mov	r3, #5
   17304:	strh	r3, [fp, #-8]
   17308:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1730c:	bl	1327c <_start@@Base+0x864>
   17310:	mov	r3, r0
   17314:	rsb	r3, r3, #0
   17318:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1731c:	add	r3, r2, r3
   17320:	str	r3, [fp, #-12]
   17324:	ldr	r0, [fp, #-12]
   17328:	bl	132d4 <_start@@Base+0x8bc>
   1732c:	mov	r3, r0
   17330:	mov	r2, r3
   17334:	ldrh	r3, [fp, #-8]
   17338:	add	r3, r3, #3
   1733c:	lsl	r3, r3, #1
   17340:	cmp	r2, r3
   17344:	bcc	1736c <_start@@Base+0x4954>
   17348:	ldrh	r3, [fp, #-8]
   1734c:	add	r3, r3, #2
   17350:	lsl	r3, r3, #1
   17354:	ldr	r2, [fp, #-12]
   17358:	add	r3, r2, r3
   1735c:	mov	r0, r3
   17360:	bl	132d4 <_start@@Base+0x8bc>
   17364:	mov	r3, r0
   17368:	strh	r3, [fp, #-6]
   1736c:	ldrh	r3, [fp, #-6]
   17370:	cmp	r3, #0
   17374:	beq	173a4 <_start@@Base+0x498c>
   17378:	ldrh	r3, [fp, #-6]
   1737c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17380:	add	r3, r2, r3
   17384:	str	r3, [fp, #-16]
   17388:	ldr	r0, [fp, #-16]
   1738c:	bl	131f4 <_start@@Base+0x7dc>
   17390:	mov	r3, r0
   17394:	add	r3, r3, #4
   17398:	ldr	r2, [fp, #-16]
   1739c:	add	r3, r2, r3
   173a0:	b	173a8 <_start@@Base+0x4990>
   173a4:	mov	r3, #0
   173a8:	mov	r0, r3
   173ac:	sub	sp, fp, #4
   173b0:	pop	{fp, pc}
   173b4:	andeq	ip, r1, ip, lsl sp
   173b8:	andeq	r0, r0, r2, asr #5
   173bc:	andeq	r9, r1, ip, lsl r8
   173c0:			; <UNDEFINED> instruction: 0x000198b8
   173c4:	push	{fp, lr}
   173c8:	add	fp, sp, #4
   173cc:	sub	sp, sp, #24
   173d0:	str	r0, [fp, #-24]	; 0xffffffe8
   173d4:	mov	r3, #0
   173d8:	strh	r3, [fp, #-6]
   173dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173e0:	cmp	r3, #0
   173e4:	bne	17408 <_start@@Base+0x49f0>
   173e8:	ldr	r3, [pc, #204]	; 174bc <_start@@Base+0x4aa4>
   173ec:	add	r3, pc, r3
   173f0:	ldr	r2, [pc, #200]	; 174c0 <_start@@Base+0x4aa8>
   173f4:	ldr	r1, [pc, #200]	; 174c4 <_start@@Base+0x4aac>
   173f8:	add	r1, pc, r1
   173fc:	ldr	r0, [pc, #196]	; 174c8 <_start@@Base+0x4ab0>
   17400:	add	r0, pc, r0
   17404:	bl	12a08 <__assert_fail@plt>
   17408:	mov	r3, #11
   1740c:	strh	r3, [fp, #-8]
   17410:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17414:	bl	1327c <_start@@Base+0x864>
   17418:	mov	r3, r0
   1741c:	rsb	r3, r3, #0
   17420:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17424:	add	r3, r2, r3
   17428:	str	r3, [fp, #-12]
   1742c:	ldr	r0, [fp, #-12]
   17430:	bl	132d4 <_start@@Base+0x8bc>
   17434:	mov	r3, r0
   17438:	mov	r2, r3
   1743c:	ldrh	r3, [fp, #-8]
   17440:	add	r3, r3, #3
   17444:	lsl	r3, r3, #1
   17448:	cmp	r2, r3
   1744c:	bcc	17474 <_start@@Base+0x4a5c>
   17450:	ldrh	r3, [fp, #-8]
   17454:	add	r3, r3, #2
   17458:	lsl	r3, r3, #1
   1745c:	ldr	r2, [fp, #-12]
   17460:	add	r3, r2, r3
   17464:	mov	r0, r3
   17468:	bl	132d4 <_start@@Base+0x8bc>
   1746c:	mov	r3, r0
   17470:	strh	r3, [fp, #-6]
   17474:	ldrh	r3, [fp, #-6]
   17478:	cmp	r3, #0
   1747c:	beq	174ac <_start@@Base+0x4a94>
   17480:	ldrh	r3, [fp, #-6]
   17484:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17488:	add	r3, r2, r3
   1748c:	str	r3, [fp, #-16]
   17490:	ldr	r0, [fp, #-16]
   17494:	bl	131f4 <_start@@Base+0x7dc>
   17498:	mov	r3, r0
   1749c:	add	r3, r3, #4
   174a0:	ldr	r2, [fp, #-16]
   174a4:	add	r3, r2, r3
   174a8:	b	174b0 <_start@@Base+0x4a98>
   174ac:	mov	r3, #0
   174b0:	mov	r0, r3
   174b4:	sub	sp, fp, #4
   174b8:	pop	{fp, pc}
   174bc:			; <UNDEFINED> instruction: 0x0001cdb0
   174c0:	andeq	r0, r0, r7, asr #5
   174c4:	andeq	r9, r1, r4, lsl r7
   174c8:			; <UNDEFINED> instruction: 0x000197b0
   174cc:	push	{fp, lr}
   174d0:	add	fp, sp, #4
   174d4:	sub	sp, sp, #24
   174d8:	str	r0, [fp, #-24]	; 0xffffffe8
   174dc:	mov	r3, #0
   174e0:	strh	r3, [fp, #-6]
   174e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174e8:	cmp	r3, #0
   174ec:	bne	17510 <_start@@Base+0x4af8>
   174f0:	ldr	r3, [pc, #204]	; 175c4 <_start@@Base+0x4bac>
   174f4:	add	r3, pc, r3
   174f8:	mov	r2, #712	; 0x2c8
   174fc:	ldr	r1, [pc, #196]	; 175c8 <_start@@Base+0x4bb0>
   17500:	add	r1, pc, r1
   17504:	ldr	r0, [pc, #192]	; 175cc <_start@@Base+0x4bb4>
   17508:	add	r0, pc, r0
   1750c:	bl	12a08 <__assert_fail@plt>
   17510:	mov	r3, #10
   17514:	strh	r3, [fp, #-8]
   17518:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1751c:	bl	1327c <_start@@Base+0x864>
   17520:	mov	r3, r0
   17524:	rsb	r3, r3, #0
   17528:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1752c:	add	r3, r2, r3
   17530:	str	r3, [fp, #-12]
   17534:	ldr	r0, [fp, #-12]
   17538:	bl	132d4 <_start@@Base+0x8bc>
   1753c:	mov	r3, r0
   17540:	mov	r2, r3
   17544:	ldrh	r3, [fp, #-8]
   17548:	add	r3, r3, #3
   1754c:	lsl	r3, r3, #1
   17550:	cmp	r2, r3
   17554:	bcc	1757c <_start@@Base+0x4b64>
   17558:	ldrh	r3, [fp, #-8]
   1755c:	add	r3, r3, #2
   17560:	lsl	r3, r3, #1
   17564:	ldr	r2, [fp, #-12]
   17568:	add	r3, r2, r3
   1756c:	mov	r0, r3
   17570:	bl	132d4 <_start@@Base+0x8bc>
   17574:	mov	r3, r0
   17578:	strh	r3, [fp, #-6]
   1757c:	ldrh	r3, [fp, #-6]
   17580:	cmp	r3, #0
   17584:	beq	175b4 <_start@@Base+0x4b9c>
   17588:	ldrh	r3, [fp, #-6]
   1758c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17590:	add	r3, r2, r3
   17594:	str	r3, [fp, #-16]
   17598:	ldr	r0, [fp, #-16]
   1759c:	bl	131f4 <_start@@Base+0x7dc>
   175a0:	mov	r3, r0
   175a4:	add	r3, r3, #4
   175a8:	ldr	r2, [fp, #-16]
   175ac:	add	r3, r2, r3
   175b0:	b	175b8 <_start@@Base+0x4ba0>
   175b4:	mov	r3, #0
   175b8:	mov	r0, r3
   175bc:	sub	sp, fp, #4
   175c0:	pop	{fp, pc}
   175c4:	andeq	ip, r1, ip, asr #23
   175c8:	andeq	r9, r1, ip, lsl #12
   175cc:	andeq	r9, r1, r8, lsr #13
   175d0:	push	{fp, lr}
   175d4:	add	fp, sp, #4
   175d8:	sub	sp, sp, #24
   175dc:	str	r0, [fp, #-24]	; 0xffffffe8
   175e0:	mov	r3, #0
   175e4:	strh	r3, [fp, #-6]
   175e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175ec:	cmp	r3, #0
   175f0:	bne	17614 <_start@@Base+0x4bfc>
   175f4:	ldr	r3, [pc, #204]	; 176c8 <_start@@Base+0x4cb0>
   175f8:	add	r3, pc, r3
   175fc:	ldr	r2, [pc, #200]	; 176cc <_start@@Base+0x4cb4>
   17600:	ldr	r1, [pc, #200]	; 176d0 <_start@@Base+0x4cb8>
   17604:	add	r1, pc, r1
   17608:	ldr	r0, [pc, #196]	; 176d4 <_start@@Base+0x4cbc>
   1760c:	add	r0, pc, r0
   17610:	bl	12a08 <__assert_fail@plt>
   17614:	mov	r3, #24
   17618:	strh	r3, [fp, #-8]
   1761c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17620:	bl	1327c <_start@@Base+0x864>
   17624:	mov	r3, r0
   17628:	rsb	r3, r3, #0
   1762c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17630:	add	r3, r2, r3
   17634:	str	r3, [fp, #-12]
   17638:	ldr	r0, [fp, #-12]
   1763c:	bl	132d4 <_start@@Base+0x8bc>
   17640:	mov	r3, r0
   17644:	mov	r2, r3
   17648:	ldrh	r3, [fp, #-8]
   1764c:	add	r3, r3, #3
   17650:	lsl	r3, r3, #1
   17654:	cmp	r2, r3
   17658:	bcc	17680 <_start@@Base+0x4c68>
   1765c:	ldrh	r3, [fp, #-8]
   17660:	add	r3, r3, #2
   17664:	lsl	r3, r3, #1
   17668:	ldr	r2, [fp, #-12]
   1766c:	add	r3, r2, r3
   17670:	mov	r0, r3
   17674:	bl	132d4 <_start@@Base+0x8bc>
   17678:	mov	r3, r0
   1767c:	strh	r3, [fp, #-6]
   17680:	ldrh	r3, [fp, #-6]
   17684:	cmp	r3, #0
   17688:	beq	176b8 <_start@@Base+0x4ca0>
   1768c:	ldrh	r3, [fp, #-6]
   17690:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17694:	add	r3, r2, r3
   17698:	str	r3, [fp, #-16]
   1769c:	ldr	r0, [fp, #-16]
   176a0:	bl	131f4 <_start@@Base+0x7dc>
   176a4:	mov	r3, r0
   176a8:	add	r3, r3, #4
   176ac:	ldr	r2, [fp, #-16]
   176b0:	add	r3, r2, r3
   176b4:	b	176bc <_start@@Base+0x4ca4>
   176b8:	mov	r3, #0
   176bc:	mov	r0, r3
   176c0:	sub	sp, fp, #4
   176c4:	pop	{fp, pc}
   176c8:	andeq	ip, r1, r4, asr #22
   176cc:	andeq	r0, r0, sl, asr #5
   176d0:	andeq	r9, r1, r8, lsl #10
   176d4:	andeq	r9, r1, r4, lsr #11
   176d8:	push	{fp, lr}
   176dc:	add	fp, sp, #4
   176e0:	sub	sp, sp, #16
   176e4:	str	r0, [fp, #-16]
   176e8:	mov	r3, #0
   176ec:	strh	r3, [fp, #-6]
   176f0:	ldr	r3, [fp, #-16]
   176f4:	cmp	r3, #0
   176f8:	bne	1771c <_start@@Base+0x4d04>
   176fc:	ldr	r3, [pc, #164]	; 177a8 <_start@@Base+0x4d90>
   17700:	add	r3, pc, r3
   17704:	ldr	r2, [pc, #160]	; 177ac <_start@@Base+0x4d94>
   17708:	ldr	r1, [pc, #160]	; 177b0 <_start@@Base+0x4d98>
   1770c:	add	r1, pc, r1
   17710:	ldr	r0, [pc, #156]	; 177b4 <_start@@Base+0x4d9c>
   17714:	add	r0, pc, r0
   17718:	bl	12a08 <__assert_fail@plt>
   1771c:	mov	r3, #24
   17720:	strh	r3, [fp, #-8]
   17724:	ldr	r0, [fp, #-16]
   17728:	bl	1327c <_start@@Base+0x864>
   1772c:	mov	r3, r0
   17730:	rsb	r3, r3, #0
   17734:	ldr	r2, [fp, #-16]
   17738:	add	r3, r2, r3
   1773c:	str	r3, [fp, #-12]
   17740:	ldr	r0, [fp, #-12]
   17744:	bl	132d4 <_start@@Base+0x8bc>
   17748:	mov	r3, r0
   1774c:	mov	r2, r3
   17750:	ldrh	r3, [fp, #-8]
   17754:	add	r3, r3, #3
   17758:	lsl	r3, r3, #1
   1775c:	cmp	r2, r3
   17760:	bcc	17788 <_start@@Base+0x4d70>
   17764:	ldrh	r3, [fp, #-8]
   17768:	add	r3, r3, #2
   1776c:	lsl	r3, r3, #1
   17770:	ldr	r2, [fp, #-12]
   17774:	add	r3, r2, r3
   17778:	mov	r0, r3
   1777c:	bl	132d4 <_start@@Base+0x8bc>
   17780:	mov	r3, r0
   17784:	strh	r3, [fp, #-6]
   17788:	ldrh	r3, [fp, #-6]
   1778c:	cmp	r3, #0
   17790:	movne	r3, #1
   17794:	moveq	r3, #0
   17798:	uxtb	r3, r3
   1779c:	mov	r0, r3
   177a0:	sub	sp, fp, #4
   177a4:	pop	{fp, pc}
   177a8:	andeq	ip, r1, r8, lsl #20
   177ac:	andeq	r0, r0, sl, asr #5
   177b0:	andeq	r9, r1, r0, lsl #8
   177b4:	muleq	r1, ip, r4
   177b8:	push	{fp, lr}
   177bc:	add	fp, sp, #4
   177c0:	sub	sp, sp, #24
   177c4:	str	r0, [fp, #-24]	; 0xffffffe8
   177c8:	mov	r3, #0
   177cc:	strh	r3, [fp, #-6]
   177d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177d4:	cmp	r3, #0
   177d8:	bne	177fc <_start@@Base+0x4de4>
   177dc:	ldr	r3, [pc, #200]	; 178ac <_start@@Base+0x4e94>
   177e0:	add	r3, pc, r3
   177e4:	mov	r2, #716	; 0x2cc
   177e8:	ldr	r1, [pc, #192]	; 178b0 <_start@@Base+0x4e98>
   177ec:	add	r1, pc, r1
   177f0:	ldr	r0, [pc, #188]	; 178b4 <_start@@Base+0x4e9c>
   177f4:	add	r0, pc, r0
   177f8:	bl	12a08 <__assert_fail@plt>
   177fc:	mov	r3, #12
   17800:	strh	r3, [fp, #-8]
   17804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17808:	bl	1327c <_start@@Base+0x864>
   1780c:	mov	r3, r0
   17810:	rsb	r3, r3, #0
   17814:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17818:	add	r3, r2, r3
   1781c:	str	r3, [fp, #-12]
   17820:	ldr	r0, [fp, #-12]
   17824:	bl	132d4 <_start@@Base+0x8bc>
   17828:	mov	r3, r0
   1782c:	mov	r2, r3
   17830:	ldrh	r3, [fp, #-8]
   17834:	add	r3, r3, #3
   17838:	lsl	r3, r3, #1
   1783c:	cmp	r2, r3
   17840:	bcc	17868 <_start@@Base+0x4e50>
   17844:	ldrh	r3, [fp, #-8]
   17848:	add	r3, r3, #2
   1784c:	lsl	r3, r3, #1
   17850:	ldr	r2, [fp, #-12]
   17854:	add	r3, r2, r3
   17858:	mov	r0, r3
   1785c:	bl	132d4 <_start@@Base+0x8bc>
   17860:	mov	r3, r0
   17864:	strh	r3, [fp, #-6]
   17868:	ldrh	r3, [fp, #-6]
   1786c:	cmp	r3, #0
   17870:	beq	1789c <_start@@Base+0x4e84>
   17874:	ldrh	r3, [fp, #-6]
   17878:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1787c:	add	r3, r2, r3
   17880:	str	r3, [fp, #-16]
   17884:	ldr	r0, [fp, #-16]
   17888:	bl	131f4 <_start@@Base+0x7dc>
   1788c:	mov	r2, r0
   17890:	ldr	r3, [fp, #-16]
   17894:	add	r3, r3, r2
   17898:	b	178a0 <_start@@Base+0x4e88>
   1789c:	mov	r3, #0
   178a0:	mov	r0, r3
   178a4:	sub	sp, fp, #4
   178a8:	pop	{fp, pc}
   178ac:	muleq	r1, ip, r9
   178b0:	andeq	r9, r1, r0, lsr #6
   178b4:			; <UNDEFINED> instruction: 0x000193bc
   178b8:	push	{fp, lr}
   178bc:	add	fp, sp, #4
   178c0:	sub	sp, sp, #16
   178c4:	str	r0, [fp, #-16]
   178c8:	mov	r3, #0
   178cc:	strh	r3, [fp, #-6]
   178d0:	ldr	r3, [fp, #-16]
   178d4:	cmp	r3, #0
   178d8:	bne	178fc <_start@@Base+0x4ee4>
   178dc:	ldr	r3, [pc, #164]	; 17988 <_start@@Base+0x4f70>
   178e0:	add	r3, pc, r3
   178e4:	mov	r2, #716	; 0x2cc
   178e8:	ldr	r1, [pc, #156]	; 1798c <_start@@Base+0x4f74>
   178ec:	add	r1, pc, r1
   178f0:	ldr	r0, [pc, #152]	; 17990 <_start@@Base+0x4f78>
   178f4:	add	r0, pc, r0
   178f8:	bl	12a08 <__assert_fail@plt>
   178fc:	mov	r3, #12
   17900:	strh	r3, [fp, #-8]
   17904:	ldr	r0, [fp, #-16]
   17908:	bl	1327c <_start@@Base+0x864>
   1790c:	mov	r3, r0
   17910:	rsb	r3, r3, #0
   17914:	ldr	r2, [fp, #-16]
   17918:	add	r3, r2, r3
   1791c:	str	r3, [fp, #-12]
   17920:	ldr	r0, [fp, #-12]
   17924:	bl	132d4 <_start@@Base+0x8bc>
   17928:	mov	r3, r0
   1792c:	mov	r2, r3
   17930:	ldrh	r3, [fp, #-8]
   17934:	add	r3, r3, #3
   17938:	lsl	r3, r3, #1
   1793c:	cmp	r2, r3
   17940:	bcc	17968 <_start@@Base+0x4f50>
   17944:	ldrh	r3, [fp, #-8]
   17948:	add	r3, r3, #2
   1794c:	lsl	r3, r3, #1
   17950:	ldr	r2, [fp, #-12]
   17954:	add	r3, r2, r3
   17958:	mov	r0, r3
   1795c:	bl	132d4 <_start@@Base+0x8bc>
   17960:	mov	r3, r0
   17964:	strh	r3, [fp, #-6]
   17968:	ldrh	r3, [fp, #-6]
   1796c:	cmp	r3, #0
   17970:	movne	r3, #1
   17974:	moveq	r3, #0
   17978:	uxtb	r3, r3
   1797c:	mov	r0, r3
   17980:	sub	sp, fp, #4
   17984:	pop	{fp, pc}
   17988:			; <UNDEFINED> instruction: 0x0001cab4
   1798c:	andeq	r9, r1, r0, lsr #4
   17990:			; <UNDEFINED> instruction: 0x000192bc
   17994:	push	{fp, lr}
   17998:	add	fp, sp, #4
   1799c:	sub	sp, sp, #16
   179a0:	str	r0, [fp, #-16]
   179a4:	mov	r3, #0
   179a8:	strh	r3, [fp, #-6]
   179ac:	ldr	r3, [fp, #-16]
   179b0:	cmp	r3, #0
   179b4:	bne	179d8 <_start@@Base+0x4fc0>
   179b8:	ldr	r3, [pc, #188]	; 17a7c <_start@@Base+0x5064>
   179bc:	add	r3, pc, r3
   179c0:	ldr	r2, [pc, #184]	; 17a80 <_start@@Base+0x5068>
   179c4:	ldr	r1, [pc, #184]	; 17a84 <_start@@Base+0x506c>
   179c8:	add	r1, pc, r1
   179cc:	ldr	r0, [pc, #180]	; 17a88 <_start@@Base+0x5070>
   179d0:	add	r0, pc, r0
   179d4:	bl	12a08 <__assert_fail@plt>
   179d8:	mov	r3, #7
   179dc:	strh	r3, [fp, #-8]
   179e0:	ldr	r0, [fp, #-16]
   179e4:	bl	1327c <_start@@Base+0x864>
   179e8:	mov	r3, r0
   179ec:	rsb	r3, r3, #0
   179f0:	ldr	r2, [fp, #-16]
   179f4:	add	r3, r2, r3
   179f8:	str	r3, [fp, #-12]
   179fc:	ldr	r0, [fp, #-12]
   17a00:	bl	132d4 <_start@@Base+0x8bc>
   17a04:	mov	r3, r0
   17a08:	mov	r2, r3
   17a0c:	ldrh	r3, [fp, #-8]
   17a10:	add	r3, r3, #3
   17a14:	lsl	r3, r3, #1
   17a18:	cmp	r2, r3
   17a1c:	bcc	17a44 <_start@@Base+0x502c>
   17a20:	ldrh	r3, [fp, #-8]
   17a24:	add	r3, r3, #2
   17a28:	lsl	r3, r3, #1
   17a2c:	ldr	r2, [fp, #-12]
   17a30:	add	r3, r2, r3
   17a34:	mov	r0, r3
   17a38:	bl	132d4 <_start@@Base+0x8bc>
   17a3c:	mov	r3, r0
   17a40:	strh	r3, [fp, #-6]
   17a44:	ldrh	r3, [fp, #-6]
   17a48:	cmp	r3, #0
   17a4c:	beq	17a6c <_start@@Base+0x5054>
   17a50:	ldrh	r3, [fp, #-6]
   17a54:	ldr	r2, [fp, #-16]
   17a58:	add	r3, r2, r3
   17a5c:	mov	r0, r3
   17a60:	bl	1332c <_start@@Base+0x914>
   17a64:	mov	r3, r0
   17a68:	b	17a70 <_start@@Base+0x5058>
   17a6c:	mov	r3, #0
   17a70:	mov	r0, r3
   17a74:	sub	sp, fp, #4
   17a78:	pop	{fp, pc}
   17a7c:	andeq	ip, r1, ip, lsr #16
   17a80:	andeq	r0, r0, sp, asr #5
   17a84:	andeq	r9, r1, r4, asr #2
   17a88:	andeq	r9, r1, r0, ror #3
   17a8c:	push	{fp, lr}
   17a90:	add	fp, sp, #4
   17a94:	sub	sp, sp, #24
   17a98:	str	r0, [fp, #-24]	; 0xffffffe8
   17a9c:	mov	r3, #0
   17aa0:	strh	r3, [fp, #-6]
   17aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17aa8:	cmp	r3, #0
   17aac:	bne	17ad0 <_start@@Base+0x50b8>
   17ab0:	ldr	r3, [pc, #200]	; 17b80 <_start@@Base+0x5168>
   17ab4:	add	r3, pc, r3
   17ab8:	ldr	r2, [pc, #196]	; 17b84 <_start@@Base+0x516c>
   17abc:	ldr	r1, [pc, #196]	; 17b88 <_start@@Base+0x5170>
   17ac0:	add	r1, pc, r1
   17ac4:	ldr	r0, [pc, #192]	; 17b8c <_start@@Base+0x5174>
   17ac8:	add	r0, pc, r0
   17acc:	bl	12a08 <__assert_fail@plt>
   17ad0:	mov	r3, #8
   17ad4:	strh	r3, [fp, #-8]
   17ad8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17adc:	bl	1327c <_start@@Base+0x864>
   17ae0:	mov	r3, r0
   17ae4:	rsb	r3, r3, #0
   17ae8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17aec:	add	r3, r2, r3
   17af0:	str	r3, [fp, #-12]
   17af4:	ldr	r0, [fp, #-12]
   17af8:	bl	132d4 <_start@@Base+0x8bc>
   17afc:	mov	r3, r0
   17b00:	mov	r2, r3
   17b04:	ldrh	r3, [fp, #-8]
   17b08:	add	r3, r3, #3
   17b0c:	lsl	r3, r3, #1
   17b10:	cmp	r2, r3
   17b14:	bcc	17b3c <_start@@Base+0x5124>
   17b18:	ldrh	r3, [fp, #-8]
   17b1c:	add	r3, r3, #2
   17b20:	lsl	r3, r3, #1
   17b24:	ldr	r2, [fp, #-12]
   17b28:	add	r3, r2, r3
   17b2c:	mov	r0, r3
   17b30:	bl	132d4 <_start@@Base+0x8bc>
   17b34:	mov	r3, r0
   17b38:	strh	r3, [fp, #-6]
   17b3c:	ldrh	r3, [fp, #-6]
   17b40:	cmp	r3, #0
   17b44:	beq	17b70 <_start@@Base+0x5158>
   17b48:	ldrh	r3, [fp, #-6]
   17b4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17b50:	add	r3, r2, r3
   17b54:	str	r3, [fp, #-16]
   17b58:	ldr	r0, [fp, #-16]
   17b5c:	bl	131f4 <_start@@Base+0x7dc>
   17b60:	mov	r2, r0
   17b64:	ldr	r3, [fp, #-16]
   17b68:	add	r3, r3, r2
   17b6c:	b	17b74 <_start@@Base+0x515c>
   17b70:	mov	r3, #0
   17b74:	mov	r0, r3
   17b78:	sub	sp, fp, #4
   17b7c:	pop	{fp, pc}
   17b80:	andeq	ip, r1, r8, asr r7
   17b84:	andeq	r0, r0, sp, asr #5
   17b88:	andeq	r9, r1, ip, asr #32
   17b8c:	andeq	r9, r1, r8, ror #1
   17b90:	push	{fp, lr}
   17b94:	add	fp, sp, #4
   17b98:	sub	sp, sp, #16
   17b9c:	str	r0, [fp, #-16]
   17ba0:	str	r1, [fp, #-20]	; 0xffffffec
   17ba4:	mov	r3, #0
   17ba8:	strb	r3, [fp, #-12]
   17bac:	mov	r3, #0
   17bb0:	str	r3, [fp, #-8]
   17bb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bb8:	bl	17994 <_start@@Base+0x4f7c>
   17bbc:	mov	r3, r0
   17bc0:	strb	r3, [fp, #-12]
   17bc4:	ldrb	r3, [fp, #-12]
   17bc8:	cmp	r3, #0
   17bcc:	bne	17be8 <_start@@Base+0x51d0>
   17bd0:	ldr	r3, [fp, #-16]
   17bd4:	mov	r2, r3
   17bd8:	sub	r3, fp, #12
   17bdc:	ldm	r3, {r0, r1}
   17be0:	stm	r2, {r0, r1}
   17be4:	b	17c0c <_start@@Base+0x51f4>
   17be8:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bec:	bl	17a8c <_start@@Base+0x5074>
   17bf0:	mov	r3, r0
   17bf4:	str	r3, [fp, #-8]
   17bf8:	ldr	r3, [fp, #-16]
   17bfc:	mov	r2, r3
   17c00:	sub	r3, fp, #12
   17c04:	ldm	r3, {r0, r1}
   17c08:	stm	r2, {r0, r1}
   17c0c:	ldr	r0, [fp, #-16]
   17c10:	sub	sp, fp, #4
   17c14:	pop	{fp, pc}
   17c18:	push	{fp, lr}
   17c1c:	add	fp, sp, #4
   17c20:	sub	sp, sp, #24
   17c24:	str	r0, [fp, #-24]	; 0xffffffe8
   17c28:	mov	r3, #0
   17c2c:	strh	r3, [fp, #-6]
   17c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c34:	cmp	r3, #0
   17c38:	bne	17c5c <_start@@Base+0x5244>
   17c3c:	ldr	r3, [pc, #204]	; 17d10 <_start@@Base+0x52f8>
   17c40:	add	r3, pc, r3
   17c44:	ldr	r2, [pc, #200]	; 17d14 <_start@@Base+0x52fc>
   17c48:	ldr	r1, [pc, #200]	; 17d18 <_start@@Base+0x5300>
   17c4c:	add	r1, pc, r1
   17c50:	ldr	r0, [pc, #196]	; 17d1c <_start@@Base+0x5304>
   17c54:	add	r0, pc, r0
   17c58:	bl	12a08 <__assert_fail@plt>
   17c5c:	mov	r3, #9
   17c60:	strh	r3, [fp, #-8]
   17c64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17c68:	bl	1327c <_start@@Base+0x864>
   17c6c:	mov	r3, r0
   17c70:	rsb	r3, r3, #0
   17c74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17c78:	add	r3, r2, r3
   17c7c:	str	r3, [fp, #-12]
   17c80:	ldr	r0, [fp, #-12]
   17c84:	bl	132d4 <_start@@Base+0x8bc>
   17c88:	mov	r3, r0
   17c8c:	mov	r2, r3
   17c90:	ldrh	r3, [fp, #-8]
   17c94:	add	r3, r3, #3
   17c98:	lsl	r3, r3, #1
   17c9c:	cmp	r2, r3
   17ca0:	bcc	17cc8 <_start@@Base+0x52b0>
   17ca4:	ldrh	r3, [fp, #-8]
   17ca8:	add	r3, r3, #2
   17cac:	lsl	r3, r3, #1
   17cb0:	ldr	r2, [fp, #-12]
   17cb4:	add	r3, r2, r3
   17cb8:	mov	r0, r3
   17cbc:	bl	132d4 <_start@@Base+0x8bc>
   17cc0:	mov	r3, r0
   17cc4:	strh	r3, [fp, #-6]
   17cc8:	ldrh	r3, [fp, #-6]
   17ccc:	cmp	r3, #0
   17cd0:	beq	17d00 <_start@@Base+0x52e8>
   17cd4:	ldrh	r3, [fp, #-6]
   17cd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17cdc:	add	r3, r2, r3
   17ce0:	str	r3, [fp, #-16]
   17ce4:	ldr	r0, [fp, #-16]
   17ce8:	bl	131f4 <_start@@Base+0x7dc>
   17cec:	mov	r3, r0
   17cf0:	add	r3, r3, #4
   17cf4:	ldr	r2, [fp, #-16]
   17cf8:	add	r3, r2, r3
   17cfc:	b	17d04 <_start@@Base+0x52ec>
   17d00:	mov	r3, #0
   17d04:	mov	r0, r3
   17d08:	sub	sp, fp, #4
   17d0c:	pop	{fp, pc}
   17d10:	andeq	ip, r1, r4, asr #8
   17d14:	andeq	r0, r0, lr, asr #5
   17d18:	andeq	r8, r1, r0, asr #29
   17d1c:	andeq	r8, r1, ip, asr pc
   17d20:	push	{fp, lr}
   17d24:	add	fp, sp, #4
   17d28:	sub	sp, sp, #24
   17d2c:	str	r0, [fp, #-24]	; 0xffffffe8
   17d30:	mov	r3, #0
   17d34:	strh	r3, [fp, #-6]
   17d38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d3c:	cmp	r3, #0
   17d40:	bne	17d64 <_start@@Base+0x534c>
   17d44:	ldr	r3, [pc, #204]	; 17e18 <_start@@Base+0x5400>
   17d48:	add	r3, pc, r3
   17d4c:	mov	r2, #720	; 0x2d0
   17d50:	ldr	r1, [pc, #196]	; 17e1c <_start@@Base+0x5404>
   17d54:	add	r1, pc, r1
   17d58:	ldr	r0, [pc, #192]	; 17e20 <_start@@Base+0x5408>
   17d5c:	add	r0, pc, r0
   17d60:	bl	12a08 <__assert_fail@plt>
   17d64:	mov	r3, #13
   17d68:	strh	r3, [fp, #-8]
   17d6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d70:	bl	1327c <_start@@Base+0x864>
   17d74:	mov	r3, r0
   17d78:	rsb	r3, r3, #0
   17d7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17d80:	add	r3, r2, r3
   17d84:	str	r3, [fp, #-12]
   17d88:	ldr	r0, [fp, #-12]
   17d8c:	bl	132d4 <_start@@Base+0x8bc>
   17d90:	mov	r3, r0
   17d94:	mov	r2, r3
   17d98:	ldrh	r3, [fp, #-8]
   17d9c:	add	r3, r3, #3
   17da0:	lsl	r3, r3, #1
   17da4:	cmp	r2, r3
   17da8:	bcc	17dd0 <_start@@Base+0x53b8>
   17dac:	ldrh	r3, [fp, #-8]
   17db0:	add	r3, r3, #2
   17db4:	lsl	r3, r3, #1
   17db8:	ldr	r2, [fp, #-12]
   17dbc:	add	r3, r2, r3
   17dc0:	mov	r0, r3
   17dc4:	bl	132d4 <_start@@Base+0x8bc>
   17dc8:	mov	r3, r0
   17dcc:	strh	r3, [fp, #-6]
   17dd0:	ldrh	r3, [fp, #-6]
   17dd4:	cmp	r3, #0
   17dd8:	beq	17e08 <_start@@Base+0x53f0>
   17ddc:	ldrh	r3, [fp, #-6]
   17de0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17de4:	add	r3, r2, r3
   17de8:	str	r3, [fp, #-16]
   17dec:	ldr	r0, [fp, #-16]
   17df0:	bl	131f4 <_start@@Base+0x7dc>
   17df4:	mov	r3, r0
   17df8:	add	r3, r3, #4
   17dfc:	ldr	r2, [fp, #-16]
   17e00:	add	r3, r2, r3
   17e04:	b	17e0c <_start@@Base+0x53f4>
   17e08:	mov	r3, #0
   17e0c:	mov	r0, r3
   17e10:	sub	sp, fp, #4
   17e14:	pop	{fp, pc}
   17e18:	andeq	ip, r1, ip, asr #20
   17e1c:			; <UNDEFINED> instruction: 0x00018db8
   17e20:	andeq	r8, r1, r4, asr lr
   17e24:	push	{fp, lr}
   17e28:	add	fp, sp, #4
   17e2c:	sub	sp, sp, #16
   17e30:	str	r0, [fp, #-16]
   17e34:	ldr	r3, [pc, #92]	; 17e98 <_start@@Base+0x5480>
   17e38:	add	r3, pc, r3
   17e3c:	str	r3, [fp, #-8]
   17e40:	ldr	r0, [fp, #-16]
   17e44:	bl	17d20 <_start@@Base+0x5308>
   17e48:	str	r0, [fp, #-12]
   17e4c:	ldr	r3, [fp, #-12]
   17e50:	cmp	r3, #0
   17e54:	beq	17e88 <_start@@Base+0x5470>
   17e58:	ldr	r1, [fp, #-8]
   17e5c:	ldr	r0, [fp, #-12]
   17e60:	bl	145c0 <_start@@Base+0x1ba8>
   17e64:	mov	r3, r0
   17e68:	cmp	r3, #0
   17e6c:	beq	17e88 <_start@@Base+0x5470>
   17e70:	ldr	r0, [fp, #-12]
   17e74:	bl	131f4 <_start@@Base+0x7dc>
   17e78:	mov	r2, r0
   17e7c:	ldr	r3, [fp, #-12]
   17e80:	add	r3, r3, r2
   17e84:	b	17e8c <_start@@Base+0x5474>
   17e88:	mov	r3, #0
   17e8c:	mov	r0, r3
   17e90:	sub	sp, fp, #4
   17e94:	pop	{fp, pc}
   17e98:	andeq	r8, r1, r0, asr sp
   17e9c:	push	{fp, lr}
   17ea0:	add	fp, sp, #4
   17ea4:	sub	sp, sp, #24
   17ea8:	str	r0, [fp, #-24]	; 0xffffffe8
   17eac:	mov	r3, #0
   17eb0:	strh	r3, [fp, #-6]
   17eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17eb8:	cmp	r3, #0
   17ebc:	bne	17ee0 <_start@@Base+0x54c8>
   17ec0:	ldr	r3, [pc, #200]	; 17f90 <_start@@Base+0x5578>
   17ec4:	add	r3, pc, r3
   17ec8:	ldr	r2, [pc, #196]	; 17f94 <_start@@Base+0x557c>
   17ecc:	ldr	r1, [pc, #196]	; 17f98 <_start@@Base+0x5580>
   17ed0:	add	r1, pc, r1
   17ed4:	ldr	r0, [pc, #192]	; 17f9c <_start@@Base+0x5584>
   17ed8:	add	r0, pc, r0
   17edc:	bl	12a08 <__assert_fail@plt>
   17ee0:	mov	r3, #14
   17ee4:	strh	r3, [fp, #-8]
   17ee8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17eec:	bl	1327c <_start@@Base+0x864>
   17ef0:	mov	r3, r0
   17ef4:	rsb	r3, r3, #0
   17ef8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17efc:	add	r3, r2, r3
   17f00:	str	r3, [fp, #-12]
   17f04:	ldr	r0, [fp, #-12]
   17f08:	bl	132d4 <_start@@Base+0x8bc>
   17f0c:	mov	r3, r0
   17f10:	mov	r2, r3
   17f14:	ldrh	r3, [fp, #-8]
   17f18:	add	r3, r3, #3
   17f1c:	lsl	r3, r3, #1
   17f20:	cmp	r2, r3
   17f24:	bcc	17f4c <_start@@Base+0x5534>
   17f28:	ldrh	r3, [fp, #-8]
   17f2c:	add	r3, r3, #2
   17f30:	lsl	r3, r3, #1
   17f34:	ldr	r2, [fp, #-12]
   17f38:	add	r3, r2, r3
   17f3c:	mov	r0, r3
   17f40:	bl	132d4 <_start@@Base+0x8bc>
   17f44:	mov	r3, r0
   17f48:	strh	r3, [fp, #-6]
   17f4c:	ldrh	r3, [fp, #-6]
   17f50:	cmp	r3, #0
   17f54:	beq	17f80 <_start@@Base+0x5568>
   17f58:	ldrh	r3, [fp, #-6]
   17f5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17f60:	add	r3, r2, r3
   17f64:	str	r3, [fp, #-16]
   17f68:	ldr	r0, [fp, #-16]
   17f6c:	bl	131f4 <_start@@Base+0x7dc>
   17f70:	mov	r2, r0
   17f74:	ldr	r3, [fp, #-16]
   17f78:	add	r3, r3, r2
   17f7c:	b	17f84 <_start@@Base+0x556c>
   17f80:	mov	r3, #0
   17f84:	mov	r0, r3
   17f88:	sub	sp, fp, #4
   17f8c:	pop	{fp, pc}
   17f90:	andeq	ip, r1, ip, asr #7
   17f94:	ldrdeq	r0, [r0], -r2
   17f98:	andeq	r8, r1, ip, lsr ip
   17f9c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fa0:	push	{fp, lr}
   17fa4:	add	fp, sp, #4
   17fa8:	sub	sp, sp, #16
   17fac:	str	r0, [fp, #-16]
   17fb0:	mov	r3, #0
   17fb4:	strh	r3, [fp, #-6]
   17fb8:	ldr	r3, [fp, #-16]
   17fbc:	cmp	r3, #0
   17fc0:	bne	17fe4 <_start@@Base+0x55cc>
   17fc4:	ldr	r3, [pc, #164]	; 18070 <_start@@Base+0x5658>
   17fc8:	add	r3, pc, r3
   17fcc:	ldr	r2, [pc, #160]	; 18074 <_start@@Base+0x565c>
   17fd0:	ldr	r1, [pc, #160]	; 18078 <_start@@Base+0x5660>
   17fd4:	add	r1, pc, r1
   17fd8:	ldr	r0, [pc, #156]	; 1807c <_start@@Base+0x5664>
   17fdc:	add	r0, pc, r0
   17fe0:	bl	12a08 <__assert_fail@plt>
   17fe4:	mov	r3, #14
   17fe8:	strh	r3, [fp, #-8]
   17fec:	ldr	r0, [fp, #-16]
   17ff0:	bl	1327c <_start@@Base+0x864>
   17ff4:	mov	r3, r0
   17ff8:	rsb	r3, r3, #0
   17ffc:	ldr	r2, [fp, #-16]
   18000:	add	r3, r2, r3
   18004:	str	r3, [fp, #-12]
   18008:	ldr	r0, [fp, #-12]
   1800c:	bl	132d4 <_start@@Base+0x8bc>
   18010:	mov	r3, r0
   18014:	mov	r2, r3
   18018:	ldrh	r3, [fp, #-8]
   1801c:	add	r3, r3, #3
   18020:	lsl	r3, r3, #1
   18024:	cmp	r2, r3
   18028:	bcc	18050 <_start@@Base+0x5638>
   1802c:	ldrh	r3, [fp, #-8]
   18030:	add	r3, r3, #2
   18034:	lsl	r3, r3, #1
   18038:	ldr	r2, [fp, #-12]
   1803c:	add	r3, r2, r3
   18040:	mov	r0, r3
   18044:	bl	132d4 <_start@@Base+0x8bc>
   18048:	mov	r3, r0
   1804c:	strh	r3, [fp, #-6]
   18050:	ldrh	r3, [fp, #-6]
   18054:	cmp	r3, #0
   18058:	movne	r3, #1
   1805c:	moveq	r3, #0
   18060:	uxtb	r3, r3
   18064:	mov	r0, r3
   18068:	sub	sp, fp, #4
   1806c:	pop	{fp, pc}
   18070:	muleq	r1, ip, r2
   18074:	ldrdeq	r0, [r0], -r2
   18078:	andeq	r8, r1, r8, lsr fp
   1807c:	ldrdeq	r8, [r1], -r4
   18080:	push	{fp, lr}
   18084:	add	fp, sp, #4
   18088:	sub	sp, sp, #16
   1808c:	str	r0, [fp, #-16]
   18090:	mov	r3, #0
   18094:	strh	r3, [fp, #-6]
   18098:	ldr	r3, [fp, #-16]
   1809c:	cmp	r3, #0
   180a0:	bne	180c4 <_start@@Base+0x56ac>
   180a4:	ldr	r3, [pc, #188]	; 18168 <_start@@Base+0x5750>
   180a8:	add	r3, pc, r3
   180ac:	ldr	r2, [pc, #184]	; 1816c <_start@@Base+0x5754>
   180b0:	ldr	r1, [pc, #184]	; 18170 <_start@@Base+0x5758>
   180b4:	add	r1, pc, r1
   180b8:	ldr	r0, [pc, #180]	; 18174 <_start@@Base+0x575c>
   180bc:	add	r0, pc, r0
   180c0:	bl	12a08 <__assert_fail@plt>
   180c4:	mov	r3, #15
   180c8:	strh	r3, [fp, #-8]
   180cc:	ldr	r0, [fp, #-16]
   180d0:	bl	1327c <_start@@Base+0x864>
   180d4:	mov	r3, r0
   180d8:	rsb	r3, r3, #0
   180dc:	ldr	r2, [fp, #-16]
   180e0:	add	r3, r2, r3
   180e4:	str	r3, [fp, #-12]
   180e8:	ldr	r0, [fp, #-12]
   180ec:	bl	132d4 <_start@@Base+0x8bc>
   180f0:	mov	r3, r0
   180f4:	mov	r2, r3
   180f8:	ldrh	r3, [fp, #-8]
   180fc:	add	r3, r3, #3
   18100:	lsl	r3, r3, #1
   18104:	cmp	r2, r3
   18108:	bcc	18130 <_start@@Base+0x5718>
   1810c:	ldrh	r3, [fp, #-8]
   18110:	add	r3, r3, #2
   18114:	lsl	r3, r3, #1
   18118:	ldr	r2, [fp, #-12]
   1811c:	add	r3, r2, r3
   18120:	mov	r0, r3
   18124:	bl	132d4 <_start@@Base+0x8bc>
   18128:	mov	r3, r0
   1812c:	strh	r3, [fp, #-6]
   18130:	ldrh	r3, [fp, #-6]
   18134:	cmp	r3, #0
   18138:	beq	18158 <_start@@Base+0x5740>
   1813c:	ldrh	r3, [fp, #-6]
   18140:	ldr	r2, [fp, #-16]
   18144:	add	r3, r2, r3
   18148:	mov	r0, r3
   1814c:	bl	13108 <_start@@Base+0x6f0>
   18150:	mov	r3, r0
   18154:	b	1815c <_start@@Base+0x5744>
   18158:	mov	r3, #1
   1815c:	mov	r0, r3
   18160:	sub	sp, fp, #4
   18164:	pop	{fp, pc}
   18168:	muleq	r1, ip, r1
   1816c:	ldrdeq	r0, [r0], -r3
   18170:	andeq	r8, r1, r8, asr sl
   18174:	strdeq	r8, [r1], -r4
   18178:	push	{fp, lr}
   1817c:	add	fp, sp, #4
   18180:	sub	sp, sp, #16
   18184:	str	r0, [fp, #-16]
   18188:	ldr	r3, [pc, #80]	; 181e0 <_start@@Base+0x57c8>
   1818c:	add	r3, pc, r3
   18190:	str	r3, [fp, #-8]
   18194:	ldr	r3, [fp, #-16]
   18198:	cmp	r3, #0
   1819c:	beq	181d0 <_start@@Base+0x57b8>
   181a0:	ldr	r1, [fp, #-8]
   181a4:	ldr	r0, [fp, #-16]
   181a8:	bl	145c0 <_start@@Base+0x1ba8>
   181ac:	mov	r3, r0
   181b0:	cmp	r3, #0
   181b4:	beq	181d0 <_start@@Base+0x57b8>
   181b8:	ldr	r0, [fp, #-16]
   181bc:	bl	131f4 <_start@@Base+0x7dc>
   181c0:	mov	r2, r0
   181c4:	ldr	r3, [fp, #-16]
   181c8:	add	r3, r3, r2
   181cc:	b	181d4 <_start@@Base+0x57bc>
   181d0:	mov	r3, #0
   181d4:	mov	r0, r3
   181d8:	sub	sp, fp, #4
   181dc:	pop	{fp, pc}
   181e0:	strdeq	r8, [r1], -ip
   181e4:	push	{fp, lr}
   181e8:	add	fp, sp, #4
   181ec:	sub	sp, sp, #16
   181f0:	str	r0, [fp, #-16]
   181f4:	mov	r3, #0
   181f8:	strh	r3, [fp, #-6]
   181fc:	ldr	r3, [fp, #-16]
   18200:	cmp	r3, #0
   18204:	bne	18228 <_start@@Base+0x5810>
   18208:	ldr	r3, [pc, #188]	; 182cc <_start@@Base+0x58b4>
   1820c:	add	r3, pc, r3
   18210:	ldr	r2, [pc, #184]	; 182d0 <_start@@Base+0x58b8>
   18214:	ldr	r1, [pc, #184]	; 182d4 <_start@@Base+0x58bc>
   18218:	add	r1, pc, r1
   1821c:	ldr	r0, [pc, #180]	; 182d8 <_start@@Base+0x58c0>
   18220:	add	r0, pc, r0
   18224:	bl	12a08 <__assert_fail@plt>
   18228:	mov	r3, #0
   1822c:	strh	r3, [fp, #-8]
   18230:	ldr	r0, [fp, #-16]
   18234:	bl	1327c <_start@@Base+0x864>
   18238:	mov	r3, r0
   1823c:	rsb	r3, r3, #0
   18240:	ldr	r2, [fp, #-16]
   18244:	add	r3, r2, r3
   18248:	str	r3, [fp, #-12]
   1824c:	ldr	r0, [fp, #-12]
   18250:	bl	132d4 <_start@@Base+0x8bc>
   18254:	mov	r3, r0
   18258:	mov	r2, r3
   1825c:	ldrh	r3, [fp, #-8]
   18260:	add	r3, r3, #3
   18264:	lsl	r3, r3, #1
   18268:	cmp	r2, r3
   1826c:	bcc	18294 <_start@@Base+0x587c>
   18270:	ldrh	r3, [fp, #-8]
   18274:	add	r3, r3, #2
   18278:	lsl	r3, r3, #1
   1827c:	ldr	r2, [fp, #-12]
   18280:	add	r3, r2, r3
   18284:	mov	r0, r3
   18288:	bl	132d4 <_start@@Base+0x8bc>
   1828c:	mov	r3, r0
   18290:	strh	r3, [fp, #-6]
   18294:	ldrh	r3, [fp, #-6]
   18298:	cmp	r3, #0
   1829c:	beq	182bc <_start@@Base+0x58a4>
   182a0:	ldrh	r3, [fp, #-6]
   182a4:	ldr	r2, [fp, #-16]
   182a8:	add	r3, r2, r3
   182ac:	mov	r0, r3
   182b0:	bl	12d94 <_start@@Base+0x37c>
   182b4:	mov	r3, r0
   182b8:	b	182c0 <_start@@Base+0x58a8>
   182bc:	mov	r3, #0
   182c0:	mov	r0, r3
   182c4:	sub	sp, fp, #4
   182c8:	pop	{fp, pc}
   182cc:	andeq	fp, r1, ip, lsl ip
   182d0:	andeq	r0, r0, sp, ror #5
   182d4:	strdeq	r8, [r1], -r4
   182d8:	muleq	r1, r0, r9
   182dc:	push	{fp, lr}
   182e0:	add	fp, sp, #4
   182e4:	sub	sp, sp, #16
   182e8:	str	r0, [fp, #-16]
   182ec:	mov	r3, #0
   182f0:	strh	r3, [fp, #-6]
   182f4:	ldr	r3, [fp, #-16]
   182f8:	cmp	r3, #0
   182fc:	bne	18320 <_start@@Base+0x5908>
   18300:	ldr	r3, [pc, #188]	; 183c4 <_start@@Base+0x59ac>
   18304:	add	r3, pc, r3
   18308:	ldr	r2, [pc, #184]	; 183c8 <_start@@Base+0x59b0>
   1830c:	ldr	r1, [pc, #184]	; 183cc <_start@@Base+0x59b4>
   18310:	add	r1, pc, r1
   18314:	ldr	r0, [pc, #180]	; 183d0 <_start@@Base+0x59b8>
   18318:	add	r0, pc, r0
   1831c:	bl	12a08 <__assert_fail@plt>
   18320:	mov	r3, #1
   18324:	strh	r3, [fp, #-8]
   18328:	ldr	r0, [fp, #-16]
   1832c:	bl	1327c <_start@@Base+0x864>
   18330:	mov	r3, r0
   18334:	rsb	r3, r3, #0
   18338:	ldr	r2, [fp, #-16]
   1833c:	add	r3, r2, r3
   18340:	str	r3, [fp, #-12]
   18344:	ldr	r0, [fp, #-12]
   18348:	bl	132d4 <_start@@Base+0x8bc>
   1834c:	mov	r3, r0
   18350:	mov	r2, r3
   18354:	ldrh	r3, [fp, #-8]
   18358:	add	r3, r3, #3
   1835c:	lsl	r3, r3, #1
   18360:	cmp	r2, r3
   18364:	bcc	1838c <_start@@Base+0x5974>
   18368:	ldrh	r3, [fp, #-8]
   1836c:	add	r3, r3, #2
   18370:	lsl	r3, r3, #1
   18374:	ldr	r2, [fp, #-12]
   18378:	add	r3, r2, r3
   1837c:	mov	r0, r3
   18380:	bl	132d4 <_start@@Base+0x8bc>
   18384:	mov	r3, r0
   18388:	strh	r3, [fp, #-6]
   1838c:	ldrh	r3, [fp, #-6]
   18390:	cmp	r3, #0
   18394:	beq	183b4 <_start@@Base+0x599c>
   18398:	ldrh	r3, [fp, #-6]
   1839c:	ldr	r2, [fp, #-16]
   183a0:	add	r3, r2, r3
   183a4:	mov	r0, r3
   183a8:	bl	12b90 <_start@@Base+0x178>
   183ac:	mov	r3, r0
   183b0:	b	183b8 <_start@@Base+0x59a0>
   183b4:	mov	r3, #0
   183b8:	mov	r0, r3
   183bc:	sub	sp, fp, #4
   183c0:	pop	{fp, pc}
   183c4:	andeq	fp, r1, r4, lsr #23
   183c8:	andeq	r0, r0, lr, ror #5
   183cc:	strdeq	r8, [r1], -ip
   183d0:	muleq	r1, r8, r8
   183d4:	push	{fp, lr}
   183d8:	add	fp, sp, #4
   183dc:	sub	sp, sp, #16
   183e0:	str	r0, [fp, #-16]
   183e4:	mov	r3, #0
   183e8:	strh	r3, [fp, #-6]
   183ec:	ldr	r3, [fp, #-16]
   183f0:	cmp	r3, #0
   183f4:	bne	18418 <_start@@Base+0x5a00>
   183f8:	ldr	r3, [pc, #188]	; 184bc <_start@@Base+0x5aa4>
   183fc:	add	r3, pc, r3
   18400:	ldr	r2, [pc, #184]	; 184c0 <_start@@Base+0x5aa8>
   18404:	ldr	r1, [pc, #184]	; 184c4 <_start@@Base+0x5aac>
   18408:	add	r1, pc, r1
   1840c:	ldr	r0, [pc, #180]	; 184c8 <_start@@Base+0x5ab0>
   18410:	add	r0, pc, r0
   18414:	bl	12a08 <__assert_fail@plt>
   18418:	mov	r3, #2
   1841c:	strh	r3, [fp, #-8]
   18420:	ldr	r0, [fp, #-16]
   18424:	bl	1327c <_start@@Base+0x864>
   18428:	mov	r3, r0
   1842c:	rsb	r3, r3, #0
   18430:	ldr	r2, [fp, #-16]
   18434:	add	r3, r2, r3
   18438:	str	r3, [fp, #-12]
   1843c:	ldr	r0, [fp, #-12]
   18440:	bl	132d4 <_start@@Base+0x8bc>
   18444:	mov	r3, r0
   18448:	mov	r2, r3
   1844c:	ldrh	r3, [fp, #-8]
   18450:	add	r3, r3, #3
   18454:	lsl	r3, r3, #1
   18458:	cmp	r2, r3
   1845c:	bcc	18484 <_start@@Base+0x5a6c>
   18460:	ldrh	r3, [fp, #-8]
   18464:	add	r3, r3, #2
   18468:	lsl	r3, r3, #1
   1846c:	ldr	r2, [fp, #-12]
   18470:	add	r3, r2, r3
   18474:	mov	r0, r3
   18478:	bl	132d4 <_start@@Base+0x8bc>
   1847c:	mov	r3, r0
   18480:	strh	r3, [fp, #-6]
   18484:	ldrh	r3, [fp, #-6]
   18488:	cmp	r3, #0
   1848c:	beq	184ac <_start@@Base+0x5a94>
   18490:	ldrh	r3, [fp, #-6]
   18494:	ldr	r2, [fp, #-16]
   18498:	add	r3, r2, r3
   1849c:	mov	r0, r3
   184a0:	bl	12e14 <_start@@Base+0x3fc>
   184a4:	mov	r3, r0
   184a8:	b	184b0 <_start@@Base+0x5a98>
   184ac:	mov	r3, #0
   184b0:	mov	r0, r3
   184b4:	sub	sp, fp, #4
   184b8:	pop	{fp, pc}
   184bc:	andeq	fp, r1, ip, asr #20
   184c0:	andeq	r0, r0, pc, ror #5
   184c4:	andeq	r8, r1, r4, lsl #14
   184c8:	andeq	r8, r1, r0, lsr #15
   184cc:	push	{fp, lr}
   184d0:	add	fp, sp, #4
   184d4:	sub	sp, sp, #16
   184d8:	str	r0, [fp, #-16]
   184dc:	mov	r3, #0
   184e0:	strh	r3, [fp, #-6]
   184e4:	ldr	r3, [fp, #-16]
   184e8:	cmp	r3, #0
   184ec:	bne	18510 <_start@@Base+0x5af8>
   184f0:	ldr	r3, [pc, #188]	; 185b4 <_start@@Base+0x5b9c>
   184f4:	add	r3, pc, r3
   184f8:	mov	r2, #752	; 0x2f0
   184fc:	ldr	r1, [pc, #180]	; 185b8 <_start@@Base+0x5ba0>
   18500:	add	r1, pc, r1
   18504:	ldr	r0, [pc, #176]	; 185bc <_start@@Base+0x5ba4>
   18508:	add	r0, pc, r0
   1850c:	bl	12a08 <__assert_fail@plt>
   18510:	mov	r3, #3
   18514:	strh	r3, [fp, #-8]
   18518:	ldr	r0, [fp, #-16]
   1851c:	bl	1327c <_start@@Base+0x864>
   18520:	mov	r3, r0
   18524:	rsb	r3, r3, #0
   18528:	ldr	r2, [fp, #-16]
   1852c:	add	r3, r2, r3
   18530:	str	r3, [fp, #-12]
   18534:	ldr	r0, [fp, #-12]
   18538:	bl	132d4 <_start@@Base+0x8bc>
   1853c:	mov	r3, r0
   18540:	mov	r2, r3
   18544:	ldrh	r3, [fp, #-8]
   18548:	add	r3, r3, #3
   1854c:	lsl	r3, r3, #1
   18550:	cmp	r2, r3
   18554:	bcc	1857c <_start@@Base+0x5b64>
   18558:	ldrh	r3, [fp, #-8]
   1855c:	add	r3, r3, #2
   18560:	lsl	r3, r3, #1
   18564:	ldr	r2, [fp, #-12]
   18568:	add	r3, r2, r3
   1856c:	mov	r0, r3
   18570:	bl	132d4 <_start@@Base+0x8bc>
   18574:	mov	r3, r0
   18578:	strh	r3, [fp, #-6]
   1857c:	ldrh	r3, [fp, #-6]
   18580:	cmp	r3, #0
   18584:	beq	185a4 <_start@@Base+0x5b8c>
   18588:	ldrh	r3, [fp, #-6]
   1858c:	ldr	r2, [fp, #-16]
   18590:	add	r3, r2, r3
   18594:	mov	r0, r3
   18598:	bl	12c10 <_start@@Base+0x1f8>
   1859c:	mov	r3, r0
   185a0:	b	185a8 <_start@@Base+0x5b90>
   185a4:	mov	r3, #0
   185a8:	mov	r0, r3
   185ac:	sub	sp, fp, #4
   185b0:	pop	{fp, pc}
   185b4:	ldrdeq	fp, [r1], -r4
   185b8:	andeq	r8, r1, ip, lsl #12
   185bc:	andeq	r8, r1, r8, lsr #13
   185c0:	push	{fp, lr}
   185c4:	add	fp, sp, #4
   185c8:	sub	sp, sp, #16
   185cc:	str	r0, [fp, #-16]
   185d0:	mov	r3, #0
   185d4:	strh	r3, [fp, #-6]
   185d8:	ldr	r3, [fp, #-16]
   185dc:	cmp	r3, #0
   185e0:	bne	18604 <_start@@Base+0x5bec>
   185e4:	ldr	r3, [pc, #188]	; 186a8 <_start@@Base+0x5c90>
   185e8:	add	r3, pc, r3
   185ec:	ldr	r2, [pc, #184]	; 186ac <_start@@Base+0x5c94>
   185f0:	ldr	r1, [pc, #184]	; 186b0 <_start@@Base+0x5c98>
   185f4:	add	r1, pc, r1
   185f8:	ldr	r0, [pc, #180]	; 186b4 <_start@@Base+0x5c9c>
   185fc:	add	r0, pc, r0
   18600:	bl	12a08 <__assert_fail@plt>
   18604:	mov	r3, #4
   18608:	strh	r3, [fp, #-8]
   1860c:	ldr	r0, [fp, #-16]
   18610:	bl	1327c <_start@@Base+0x864>
   18614:	mov	r3, r0
   18618:	rsb	r3, r3, #0
   1861c:	ldr	r2, [fp, #-16]
   18620:	add	r3, r2, r3
   18624:	str	r3, [fp, #-12]
   18628:	ldr	r0, [fp, #-12]
   1862c:	bl	132d4 <_start@@Base+0x8bc>
   18630:	mov	r3, r0
   18634:	mov	r2, r3
   18638:	ldrh	r3, [fp, #-8]
   1863c:	add	r3, r3, #3
   18640:	lsl	r3, r3, #1
   18644:	cmp	r2, r3
   18648:	bcc	18670 <_start@@Base+0x5c58>
   1864c:	ldrh	r3, [fp, #-8]
   18650:	add	r3, r3, #2
   18654:	lsl	r3, r3, #1
   18658:	ldr	r2, [fp, #-12]
   1865c:	add	r3, r2, r3
   18660:	mov	r0, r3
   18664:	bl	132d4 <_start@@Base+0x8bc>
   18668:	mov	r3, r0
   1866c:	strh	r3, [fp, #-6]
   18670:	ldrh	r3, [fp, #-6]
   18674:	cmp	r3, #0
   18678:	beq	18698 <_start@@Base+0x5c80>
   1867c:	ldrh	r3, [fp, #-6]
   18680:	ldr	r2, [fp, #-16]
   18684:	add	r3, r2, r3
   18688:	mov	r0, r3
   1868c:	bl	12e8c <_start@@Base+0x474>
   18690:	mov	r3, r0
   18694:	b	1869c <_start@@Base+0x5c84>
   18698:	mov	r3, #0
   1869c:	mov	r0, r3
   186a0:	sub	sp, fp, #4
   186a4:	pop	{fp, pc}
   186a8:	andeq	fp, r1, r0, lsl #17
   186ac:	strdeq	r0, [r0], -r1
   186b0:	andeq	r8, r1, r8, lsl r5
   186b4:			; <UNDEFINED> instruction: 0x000185b4
   186b8:	push	{fp, lr}
   186bc:	add	fp, sp, #4
   186c0:	sub	sp, sp, #16
   186c4:	str	r0, [fp, #-16]
   186c8:	mov	r3, #0
   186cc:	strh	r3, [fp, #-6]
   186d0:	ldr	r3, [fp, #-16]
   186d4:	cmp	r3, #0
   186d8:	bne	186fc <_start@@Base+0x5ce4>
   186dc:	ldr	r3, [pc, #188]	; 187a0 <_start@@Base+0x5d88>
   186e0:	add	r3, pc, r3
   186e4:	ldr	r2, [pc, #184]	; 187a4 <_start@@Base+0x5d8c>
   186e8:	ldr	r1, [pc, #184]	; 187a8 <_start@@Base+0x5d90>
   186ec:	add	r1, pc, r1
   186f0:	ldr	r0, [pc, #180]	; 187ac <_start@@Base+0x5d94>
   186f4:	add	r0, pc, r0
   186f8:	bl	12a08 <__assert_fail@plt>
   186fc:	mov	r3, #5
   18700:	strh	r3, [fp, #-8]
   18704:	ldr	r0, [fp, #-16]
   18708:	bl	1327c <_start@@Base+0x864>
   1870c:	mov	r3, r0
   18710:	rsb	r3, r3, #0
   18714:	ldr	r2, [fp, #-16]
   18718:	add	r3, r2, r3
   1871c:	str	r3, [fp, #-12]
   18720:	ldr	r0, [fp, #-12]
   18724:	bl	132d4 <_start@@Base+0x8bc>
   18728:	mov	r3, r0
   1872c:	mov	r2, r3
   18730:	ldrh	r3, [fp, #-8]
   18734:	add	r3, r3, #3
   18738:	lsl	r3, r3, #1
   1873c:	cmp	r2, r3
   18740:	bcc	18768 <_start@@Base+0x5d50>
   18744:	ldrh	r3, [fp, #-8]
   18748:	add	r3, r3, #2
   1874c:	lsl	r3, r3, #1
   18750:	ldr	r2, [fp, #-12]
   18754:	add	r3, r2, r3
   18758:	mov	r0, r3
   1875c:	bl	132d4 <_start@@Base+0x8bc>
   18760:	mov	r3, r0
   18764:	strh	r3, [fp, #-6]
   18768:	ldrh	r3, [fp, #-6]
   1876c:	cmp	r3, #0
   18770:	beq	18790 <_start@@Base+0x5d78>
   18774:	ldrh	r3, [fp, #-6]
   18778:	ldr	r2, [fp, #-16]
   1877c:	add	r3, r2, r3
   18780:	mov	r0, r3
   18784:	bl	12c88 <_start@@Base+0x270>
   18788:	mov	r3, r0
   1878c:	b	18794 <_start@@Base+0x5d7c>
   18790:	mov	r3, #0
   18794:	mov	r0, r3
   18798:	sub	sp, fp, #4
   1879c:	pop	{fp, pc}
   187a0:	andeq	fp, r1, r8, lsl #16
   187a4:	strdeq	r0, [r0], -r2
   187a8:	andeq	r8, r1, r0, lsr #8
   187ac:			; <UNDEFINED> instruction: 0x000184bc
   187b0:	push	{fp, lr}
   187b4:	add	fp, sp, #4
   187b8:	sub	sp, sp, #16
   187bc:	str	r0, [fp, #-16]
   187c0:	mov	r3, #0
   187c4:	strh	r3, [fp, #-6]
   187c8:	ldr	r3, [fp, #-16]
   187cc:	cmp	r3, #0
   187d0:	bne	187f4 <_start@@Base+0x5ddc>
   187d4:	ldr	r3, [pc, #200]	; 188a4 <_start@@Base+0x5e8c>
   187d8:	add	r3, pc, r3
   187dc:	ldr	r2, [pc, #196]	; 188a8 <_start@@Base+0x5e90>
   187e0:	ldr	r1, [pc, #196]	; 188ac <_start@@Base+0x5e94>
   187e4:	add	r1, pc, r1
   187e8:	ldr	r0, [pc, #192]	; 188b0 <_start@@Base+0x5e98>
   187ec:	add	r0, pc, r0
   187f0:	bl	12a08 <__assert_fail@plt>
   187f4:	mov	r3, #6
   187f8:	strh	r3, [fp, #-8]
   187fc:	ldr	r0, [fp, #-16]
   18800:	bl	1327c <_start@@Base+0x864>
   18804:	mov	r3, r0
   18808:	rsb	r3, r3, #0
   1880c:	ldr	r2, [fp, #-16]
   18810:	add	r3, r2, r3
   18814:	str	r3, [fp, #-12]
   18818:	ldr	r0, [fp, #-12]
   1881c:	bl	132d4 <_start@@Base+0x8bc>
   18820:	mov	r3, r0
   18824:	mov	r2, r3
   18828:	ldrh	r3, [fp, #-8]
   1882c:	add	r3, r3, #3
   18830:	lsl	r3, r3, #1
   18834:	cmp	r2, r3
   18838:	bcc	18860 <_start@@Base+0x5e48>
   1883c:	ldrh	r3, [fp, #-8]
   18840:	add	r3, r3, #2
   18844:	lsl	r3, r3, #1
   18848:	ldr	r2, [fp, #-12]
   1884c:	add	r3, r2, r3
   18850:	mov	r0, r3
   18854:	bl	132d4 <_start@@Base+0x8bc>
   18858:	mov	r3, r0
   1885c:	strh	r3, [fp, #-6]
   18860:	ldrh	r3, [fp, #-6]
   18864:	cmp	r3, #0
   18868:	beq	1888c <_start@@Base+0x5e74>
   1886c:	ldrh	r3, [fp, #-6]
   18870:	ldr	r2, [fp, #-16]
   18874:	add	r3, r2, r3
   18878:	mov	r0, r3
   1887c:	bl	12f0c <_start@@Base+0x4f4>
   18880:	mov	r2, r0
   18884:	mov	r3, r1
   18888:	b	18894 <_start@@Base+0x5e7c>
   1888c:	mov	r2, #0
   18890:	mov	r3, #0
   18894:	mov	r0, r2
   18898:	mov	r1, r3
   1889c:	sub	sp, fp, #4
   188a0:	pop	{fp, pc}
   188a4:			; <UNDEFINED> instruction: 0x0001b6b0
   188a8:	strdeq	r0, [r0], -r3
   188ac:	andeq	r8, r1, r8, lsr #6
   188b0:	andeq	r8, r1, r4, asr #7
   188b4:	push	{fp, lr}
   188b8:	add	fp, sp, #4
   188bc:	sub	sp, sp, #16
   188c0:	str	r0, [fp, #-16]
   188c4:	mov	r3, #0
   188c8:	strh	r3, [fp, #-6]
   188cc:	ldr	r3, [fp, #-16]
   188d0:	cmp	r3, #0
   188d4:	bne	188f8 <_start@@Base+0x5ee0>
   188d8:	ldr	r3, [pc, #200]	; 189a8 <_start@@Base+0x5f90>
   188dc:	add	r3, pc, r3
   188e0:	mov	r2, #756	; 0x2f4
   188e4:	ldr	r1, [pc, #192]	; 189ac <_start@@Base+0x5f94>
   188e8:	add	r1, pc, r1
   188ec:	ldr	r0, [pc, #188]	; 189b0 <_start@@Base+0x5f98>
   188f0:	add	r0, pc, r0
   188f4:	bl	12a08 <__assert_fail@plt>
   188f8:	mov	r3, #7
   188fc:	strh	r3, [fp, #-8]
   18900:	ldr	r0, [fp, #-16]
   18904:	bl	1327c <_start@@Base+0x864>
   18908:	mov	r3, r0
   1890c:	rsb	r3, r3, #0
   18910:	ldr	r2, [fp, #-16]
   18914:	add	r3, r2, r3
   18918:	str	r3, [fp, #-12]
   1891c:	ldr	r0, [fp, #-12]
   18920:	bl	132d4 <_start@@Base+0x8bc>
   18924:	mov	r3, r0
   18928:	mov	r2, r3
   1892c:	ldrh	r3, [fp, #-8]
   18930:	add	r3, r3, #3
   18934:	lsl	r3, r3, #1
   18938:	cmp	r2, r3
   1893c:	bcc	18964 <_start@@Base+0x5f4c>
   18940:	ldrh	r3, [fp, #-8]
   18944:	add	r3, r3, #2
   18948:	lsl	r3, r3, #1
   1894c:	ldr	r2, [fp, #-12]
   18950:	add	r3, r2, r3
   18954:	mov	r0, r3
   18958:	bl	132d4 <_start@@Base+0x8bc>
   1895c:	mov	r3, r0
   18960:	strh	r3, [fp, #-6]
   18964:	ldrh	r3, [fp, #-6]
   18968:	cmp	r3, #0
   1896c:	beq	18990 <_start@@Base+0x5f78>
   18970:	ldrh	r3, [fp, #-6]
   18974:	ldr	r2, [fp, #-16]
   18978:	add	r3, r2, r3
   1897c:	mov	r0, r3
   18980:	bl	12d08 <_start@@Base+0x2f0>
   18984:	mov	r2, r0
   18988:	mov	r3, r1
   1898c:	b	18998 <_start@@Base+0x5f80>
   18990:	mov	r2, #0
   18994:	mov	r3, #0
   18998:	mov	r0, r2
   1899c:	mov	r1, r3
   189a0:	sub	sp, fp, #4
   189a4:	pop	{fp, pc}
   189a8:	andeq	fp, r1, ip, lsr #12
   189ac:	andeq	r8, r1, r4, lsr #4
   189b0:	andeq	r8, r1, r0, asr #5
   189b4:	push	{fp, lr}
   189b8:	add	fp, sp, #4
   189bc:	sub	sp, sp, #16
   189c0:	str	r0, [fp, #-16]
   189c4:	mov	r3, #0
   189c8:	strh	r3, [fp, #-6]
   189cc:	ldr	r3, [fp, #-16]
   189d0:	cmp	r3, #0
   189d4:	bne	189f8 <_start@@Base+0x5fe0>
   189d8:	ldr	r3, [pc, #192]	; 18aa0 <_start@@Base+0x6088>
   189dc:	add	r3, pc, r3
   189e0:	ldr	r2, [pc, #188]	; 18aa4 <_start@@Base+0x608c>
   189e4:	ldr	r1, [pc, #188]	; 18aa8 <_start@@Base+0x6090>
   189e8:	add	r1, pc, r1
   189ec:	ldr	r0, [pc, #184]	; 18aac <_start@@Base+0x6094>
   189f0:	add	r0, pc, r0
   189f4:	bl	12a08 <__assert_fail@plt>
   189f8:	mov	r3, #8
   189fc:	strh	r3, [fp, #-8]
   18a00:	ldr	r0, [fp, #-16]
   18a04:	bl	1327c <_start@@Base+0x864>
   18a08:	mov	r3, r0
   18a0c:	rsb	r3, r3, #0
   18a10:	ldr	r2, [fp, #-16]
   18a14:	add	r3, r2, r3
   18a18:	str	r3, [fp, #-12]
   18a1c:	ldr	r0, [fp, #-12]
   18a20:	bl	132d4 <_start@@Base+0x8bc>
   18a24:	mov	r3, r0
   18a28:	mov	r2, r3
   18a2c:	ldrh	r3, [fp, #-8]
   18a30:	add	r3, r3, #3
   18a34:	lsl	r3, r3, #1
   18a38:	cmp	r2, r3
   18a3c:	bcc	18a64 <_start@@Base+0x604c>
   18a40:	ldrh	r3, [fp, #-8]
   18a44:	add	r3, r3, #2
   18a48:	lsl	r3, r3, #1
   18a4c:	ldr	r2, [fp, #-12]
   18a50:	add	r3, r2, r3
   18a54:	mov	r0, r3
   18a58:	bl	132d4 <_start@@Base+0x8bc>
   18a5c:	mov	r3, r0
   18a60:	strh	r3, [fp, #-6]
   18a64:	ldrh	r3, [fp, #-6]
   18a68:	cmp	r3, #0
   18a6c:	beq	18a8c <_start@@Base+0x6074>
   18a70:	ldrh	r3, [fp, #-6]
   18a74:	ldr	r2, [fp, #-16]
   18a78:	add	r3, r2, r3
   18a7c:	mov	r0, r3
   18a80:	bl	12fb8 <_start@@Base+0x5a0>
   18a84:	vmov.f32	s15, s0
   18a88:	b	18a90 <_start@@Base+0x6078>
   18a8c:	vldr	s15, [pc, #8]	; 18a9c <_start@@Base+0x6084>
   18a90:	vmov.f32	s0, s15
   18a94:	sub	sp, fp, #4
   18a98:	pop	{fp, pc}
   18a9c:	andeq	r0, r0, r0
   18aa0:	andeq	fp, r1, ip, asr #10
   18aa4:	strdeq	r0, [r0], -r5
   18aa8:	andeq	r8, r1, r4, lsr #2
   18aac:	andeq	r8, r1, r0, asr #3
   18ab0:	push	{fp, lr}
   18ab4:	add	fp, sp, #4
   18ab8:	sub	sp, sp, #16
   18abc:	str	r0, [fp, #-16]
   18ac0:	mov	r3, #0
   18ac4:	strh	r3, [fp, #-6]
   18ac8:	ldr	r3, [fp, #-16]
   18acc:	cmp	r3, #0
   18ad0:	bne	18af4 <_start@@Base+0x60dc>
   18ad4:	ldr	r3, [pc, #196]	; 18ba0 <_start@@Base+0x6188>
   18ad8:	add	r3, pc, r3
   18adc:	ldr	r2, [pc, #192]	; 18ba4 <_start@@Base+0x618c>
   18ae0:	ldr	r1, [pc, #192]	; 18ba8 <_start@@Base+0x6190>
   18ae4:	add	r1, pc, r1
   18ae8:	ldr	r0, [pc, #188]	; 18bac <_start@@Base+0x6194>
   18aec:	add	r0, pc, r0
   18af0:	bl	12a08 <__assert_fail@plt>
   18af4:	mov	r3, #9
   18af8:	strh	r3, [fp, #-8]
   18afc:	ldr	r0, [fp, #-16]
   18b00:	bl	1327c <_start@@Base+0x864>
   18b04:	mov	r3, r0
   18b08:	rsb	r3, r3, #0
   18b0c:	ldr	r2, [fp, #-16]
   18b10:	add	r3, r2, r3
   18b14:	str	r3, [fp, #-12]
   18b18:	ldr	r0, [fp, #-12]
   18b1c:	bl	132d4 <_start@@Base+0x8bc>
   18b20:	mov	r3, r0
   18b24:	mov	r2, r3
   18b28:	ldrh	r3, [fp, #-8]
   18b2c:	add	r3, r3, #3
   18b30:	lsl	r3, r3, #1
   18b34:	cmp	r2, r3
   18b38:	bcc	18b60 <_start@@Base+0x6148>
   18b3c:	ldrh	r3, [fp, #-8]
   18b40:	add	r3, r3, #2
   18b44:	lsl	r3, r3, #1
   18b48:	ldr	r2, [fp, #-12]
   18b4c:	add	r3, r2, r3
   18b50:	mov	r0, r3
   18b54:	bl	132d4 <_start@@Base+0x8bc>
   18b58:	mov	r3, r0
   18b5c:	strh	r3, [fp, #-6]
   18b60:	ldrh	r3, [fp, #-6]
   18b64:	cmp	r3, #0
   18b68:	beq	18b88 <_start@@Base+0x6170>
   18b6c:	ldrh	r3, [fp, #-6]
   18b70:	ldr	r2, [fp, #-16]
   18b74:	add	r3, r2, r3
   18b78:	mov	r0, r3
   18b7c:	bl	13058 <_start@@Base+0x640>
   18b80:	vmov.f64	d7, d0
   18b84:	b	18b8c <_start@@Base+0x6174>
   18b88:	vldr	d7, [pc, #8]	; 18b98 <_start@@Base+0x6180>
   18b8c:	vmov.f64	d0, d7
   18b90:	sub	sp, fp, #4
   18b94:	pop	{fp, pc}
	...
   18ba0:	andeq	fp, r1, r0, ror r4
   18ba4:	strdeq	r0, [r0], -r6
   18ba8:	andeq	r8, r1, r8, lsr #32
   18bac:	andeq	r8, r1, r4, asr #1
   18bb0:	push	{fp, lr}
   18bb4:	add	fp, sp, #4
   18bb8:	sub	sp, sp, #16
   18bbc:	str	r0, [fp, #-16]
   18bc0:	mov	r3, #0
   18bc4:	strh	r3, [fp, #-6]
   18bc8:	ldr	r3, [fp, #-16]
   18bcc:	cmp	r3, #0
   18bd0:	bne	18bf4 <_start@@Base+0x61dc>
   18bd4:	ldr	r3, [pc, #188]	; 18c98 <_start@@Base+0x6280>
   18bd8:	add	r3, pc, r3
   18bdc:	ldr	r2, [pc, #184]	; 18c9c <_start@@Base+0x6284>
   18be0:	ldr	r1, [pc, #184]	; 18ca0 <_start@@Base+0x6288>
   18be4:	add	r1, pc, r1
   18be8:	ldr	r0, [pc, #180]	; 18ca4 <_start@@Base+0x628c>
   18bec:	add	r0, pc, r0
   18bf0:	bl	12a08 <__assert_fail@plt>
   18bf4:	mov	r3, #0
   18bf8:	strh	r3, [fp, #-8]
   18bfc:	ldr	r0, [fp, #-16]
   18c00:	bl	1327c <_start@@Base+0x864>
   18c04:	mov	r3, r0
   18c08:	rsb	r3, r3, #0
   18c0c:	ldr	r2, [fp, #-16]
   18c10:	add	r3, r2, r3
   18c14:	str	r3, [fp, #-12]
   18c18:	ldr	r0, [fp, #-12]
   18c1c:	bl	132d4 <_start@@Base+0x8bc>
   18c20:	mov	r3, r0
   18c24:	mov	r2, r3
   18c28:	ldrh	r3, [fp, #-8]
   18c2c:	add	r3, r3, #3
   18c30:	lsl	r3, r3, #1
   18c34:	cmp	r2, r3
   18c38:	bcc	18c60 <_start@@Base+0x6248>
   18c3c:	ldrh	r3, [fp, #-8]
   18c40:	add	r3, r3, #2
   18c44:	lsl	r3, r3, #1
   18c48:	ldr	r2, [fp, #-12]
   18c4c:	add	r3, r2, r3
   18c50:	mov	r0, r3
   18c54:	bl	132d4 <_start@@Base+0x8bc>
   18c58:	mov	r3, r0
   18c5c:	strh	r3, [fp, #-6]
   18c60:	ldrh	r3, [fp, #-6]
   18c64:	cmp	r3, #0
   18c68:	beq	18c88 <_start@@Base+0x6270>
   18c6c:	ldrh	r3, [fp, #-6]
   18c70:	ldr	r2, [fp, #-16]
   18c74:	add	r3, r2, r3
   18c78:	mov	r0, r3
   18c7c:	bl	12e8c <_start@@Base+0x474>
   18c80:	mov	r3, r0
   18c84:	b	18c8c <_start@@Base+0x6274>
   18c88:	mov	r3, #0
   18c8c:	mov	r0, r3
   18c90:	sub	sp, fp, #4
   18c94:	pop	{fp, pc}
   18c98:	strdeq	fp, [r1], -r0
   18c9c:	andeq	r0, r0, r2, lsl #6
   18ca0:	andeq	r7, r1, r8, lsr #30
   18ca4:	andeq	r7, r1, r4, asr #31
   18ca8:	push	{fp, lr}
   18cac:	add	fp, sp, #4
   18cb0:	sub	sp, sp, #8
   18cb4:	sub	r3, fp, #12
   18cb8:	stm	r3, {r0, r1}
   18cbc:	ldr	r3, [fp, #-12]
   18cc0:	mov	r0, r3
   18cc4:	bl	134f8 <_start@@Base+0xae0>
   18cc8:	mov	r3, r0
   18ccc:	mov	r0, r3
   18cd0:	sub	sp, fp, #4
   18cd4:	pop	{fp, pc}
   18cd8:	push	{fp, lr}
   18cdc:	add	fp, sp, #4
   18ce0:	sub	sp, sp, #32
   18ce4:	str	r0, [fp, #-24]	; 0xffffffe8
   18ce8:	sub	r0, fp, #32
   18cec:	stm	r0, {r1, r2}
   18cf0:	str	r3, [fp, #-36]	; 0xffffffdc
   18cf4:	mov	r3, #0
   18cf8:	strb	r3, [fp, #-16]
   18cfc:	mov	r3, #0
   18d00:	str	r3, [fp, #-12]
   18d04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d08:	mov	r0, r3
   18d0c:	bl	134f8 <_start@@Base+0xae0>
   18d10:	str	r0, [fp, #-8]
   18d14:	ldr	r2, [fp, #-8]
   18d18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18d1c:	cmp	r2, r3
   18d20:	bhi	18d44 <_start@@Base+0x632c>
   18d24:	ldr	r3, [pc, #136]	; 18db4 <_start@@Base+0x639c>
   18d28:	add	r3, pc, r3
   18d2c:	ldr	r2, [pc, #132]	; 18db8 <_start@@Base+0x63a0>
   18d30:	ldr	r1, [pc, #132]	; 18dbc <_start@@Base+0x63a4>
   18d34:	add	r1, pc, r1
   18d38:	ldr	r0, [pc, #128]	; 18dc0 <_start@@Base+0x63a8>
   18d3c:	add	r0, pc, r0
   18d40:	bl	12a08 <__assert_fail@plt>
   18d44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18d48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18d4c:	add	r3, r2, r3
   18d50:	ldrb	r3, [r3]
   18d54:	strb	r3, [fp, #-16]
   18d58:	ldrb	r3, [fp, #-16]
   18d5c:	cmp	r3, #0
   18d60:	bne	18d7c <_start@@Base+0x6364>
   18d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d68:	mov	r2, r3
   18d6c:	sub	r3, fp, #16
   18d70:	ldm	r3, {r0, r1}
   18d74:	stm	r2, {r0, r1}
   18d78:	b	18da8 <_start@@Base+0x6390>
   18d7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d80:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18d84:	mov	r0, r3
   18d88:	bl	13694 <_start@@Base+0xc7c>
   18d8c:	mov	r3, r0
   18d90:	str	r3, [fp, #-12]
   18d94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d98:	mov	r2, r3
   18d9c:	sub	r3, fp, #16
   18da0:	ldm	r3, {r0, r1}
   18da4:	stm	r2, {r0, r1}
   18da8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18dac:	sub	sp, fp, #4
   18db0:	pop	{fp, pc}
   18db4:	andeq	fp, r1, r0, lsl sl
   18db8:	andeq	r0, r0, r5, lsl #6
   18dbc:	ldrdeq	r7, [r1], -r8
   18dc0:	andeq	r7, r1, r4, asr lr
   18dc4:	push	{fp, lr}
   18dc8:	add	fp, sp, #4
   18dcc:	sub	sp, sp, #16
   18dd0:	sub	r3, fp, #12
   18dd4:	stm	r3, {r0, r1}
   18dd8:	str	r2, [fp, #-16]
   18ddc:	ldr	r3, [fp, #-8]
   18de0:	ldr	r1, [fp, #-16]
   18de4:	mov	r0, r3
   18de8:	bl	13720 <_start@@Base+0xd08>
   18dec:	mov	r3, r0
   18df0:	mov	r0, r3
   18df4:	sub	sp, fp, #4
   18df8:	pop	{fp, pc}
   18dfc:	push	{fp, lr}
   18e00:	add	fp, sp, #4
   18e04:	sub	sp, sp, #16
   18e08:	str	r0, [fp, #-16]
   18e0c:	ldr	r3, [pc, #80]	; 18e64 <_start@@Base+0x644c>
   18e10:	add	r3, pc, r3
   18e14:	str	r3, [fp, #-8]
   18e18:	ldr	r3, [fp, #-16]
   18e1c:	cmp	r3, #0
   18e20:	beq	18e54 <_start@@Base+0x643c>
   18e24:	ldr	r1, [fp, #-8]
   18e28:	ldr	r0, [fp, #-16]
   18e2c:	bl	145c0 <_start@@Base+0x1ba8>
   18e30:	mov	r3, r0
   18e34:	cmp	r3, #0
   18e38:	beq	18e54 <_start@@Base+0x643c>
   18e3c:	ldr	r0, [fp, #-16]
   18e40:	bl	131f4 <_start@@Base+0x7dc>
   18e44:	mov	r2, r0
   18e48:	ldr	r3, [fp, #-16]
   18e4c:	add	r3, r3, r2
   18e50:	b	18e58 <_start@@Base+0x6440>
   18e54:	mov	r3, #0
   18e58:	mov	r0, r3
   18e5c:	sub	sp, fp, #4
   18e60:	pop	{fp, pc}
   18e64:	andeq	r7, r1, r8, ror sp
   18e68:	push	{fp, lr}
   18e6c:	add	fp, sp, #4
   18e70:	sub	sp, sp, #16
   18e74:	str	r0, [fp, #-16]
   18e78:	mov	r3, #0
   18e7c:	strh	r3, [fp, #-6]
   18e80:	ldr	r3, [fp, #-16]
   18e84:	cmp	r3, #0
   18e88:	bne	18eac <_start@@Base+0x6494>
   18e8c:	ldr	r3, [pc, #188]	; 18f50 <_start@@Base+0x6538>
   18e90:	add	r3, pc, r3
   18e94:	ldr	r2, [pc, #184]	; 18f54 <_start@@Base+0x653c>
   18e98:	ldr	r1, [pc, #184]	; 18f58 <_start@@Base+0x6540>
   18e9c:	add	r1, pc, r1
   18ea0:	ldr	r0, [pc, #180]	; 18f5c <_start@@Base+0x6544>
   18ea4:	add	r0, pc, r0
   18ea8:	bl	12a08 <__assert_fail@plt>
   18eac:	mov	r3, #0
   18eb0:	strh	r3, [fp, #-8]
   18eb4:	ldr	r0, [fp, #-16]
   18eb8:	bl	1327c <_start@@Base+0x864>
   18ebc:	mov	r3, r0
   18ec0:	rsb	r3, r3, #0
   18ec4:	ldr	r2, [fp, #-16]
   18ec8:	add	r3, r2, r3
   18ecc:	str	r3, [fp, #-12]
   18ed0:	ldr	r0, [fp, #-12]
   18ed4:	bl	132d4 <_start@@Base+0x8bc>
   18ed8:	mov	r3, r0
   18edc:	mov	r2, r3
   18ee0:	ldrh	r3, [fp, #-8]
   18ee4:	add	r3, r3, #3
   18ee8:	lsl	r3, r3, #1
   18eec:	cmp	r2, r3
   18ef0:	bcc	18f18 <_start@@Base+0x6500>
   18ef4:	ldrh	r3, [fp, #-8]
   18ef8:	add	r3, r3, #2
   18efc:	lsl	r3, r3, #1
   18f00:	ldr	r2, [fp, #-12]
   18f04:	add	r3, r2, r3
   18f08:	mov	r0, r3
   18f0c:	bl	132d4 <_start@@Base+0x8bc>
   18f10:	mov	r3, r0
   18f14:	strh	r3, [fp, #-6]
   18f18:	ldrh	r3, [fp, #-6]
   18f1c:	cmp	r3, #0
   18f20:	beq	18f40 <_start@@Base+0x6528>
   18f24:	ldrh	r3, [fp, #-6]
   18f28:	ldr	r2, [fp, #-16]
   18f2c:	add	r3, r2, r3
   18f30:	mov	r0, r3
   18f34:	bl	1332c <_start@@Base+0x914>
   18f38:	mov	r3, r0
   18f3c:	b	18f44 <_start@@Base+0x652c>
   18f40:	mov	r3, #0
   18f44:	mov	r0, r3
   18f48:	sub	sp, fp, #4
   18f4c:	pop	{fp, pc}
   18f50:	andeq	fp, r1, r4, lsl r7
   18f54:	andeq	r0, r0, r3, lsr r3
   18f58:	andeq	r7, r1, r0, ror ip
   18f5c:	andeq	r7, r1, ip, lsl #26
   18f60:	push	{fp, lr}
   18f64:	add	fp, sp, #4
   18f68:	sub	sp, sp, #24
   18f6c:	str	r0, [fp, #-24]	; 0xffffffe8
   18f70:	mov	r3, #0
   18f74:	strh	r3, [fp, #-6]
   18f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18f7c:	cmp	r3, #0
   18f80:	bne	18fa4 <_start@@Base+0x658c>
   18f84:	ldr	r3, [pc, #200]	; 19054 <_start@@Base+0x663c>
   18f88:	add	r3, pc, r3
   18f8c:	ldr	r2, [pc, #196]	; 19058 <_start@@Base+0x6640>
   18f90:	ldr	r1, [pc, #196]	; 1905c <_start@@Base+0x6644>
   18f94:	add	r1, pc, r1
   18f98:	ldr	r0, [pc, #192]	; 19060 <_start@@Base+0x6648>
   18f9c:	add	r0, pc, r0
   18fa0:	bl	12a08 <__assert_fail@plt>
   18fa4:	mov	r3, #1
   18fa8:	strh	r3, [fp, #-8]
   18fac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18fb0:	bl	1327c <_start@@Base+0x864>
   18fb4:	mov	r3, r0
   18fb8:	rsb	r3, r3, #0
   18fbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18fc0:	add	r3, r2, r3
   18fc4:	str	r3, [fp, #-12]
   18fc8:	ldr	r0, [fp, #-12]
   18fcc:	bl	132d4 <_start@@Base+0x8bc>
   18fd0:	mov	r3, r0
   18fd4:	mov	r2, r3
   18fd8:	ldrh	r3, [fp, #-8]
   18fdc:	add	r3, r3, #3
   18fe0:	lsl	r3, r3, #1
   18fe4:	cmp	r2, r3
   18fe8:	bcc	19010 <_start@@Base+0x65f8>
   18fec:	ldrh	r3, [fp, #-8]
   18ff0:	add	r3, r3, #2
   18ff4:	lsl	r3, r3, #1
   18ff8:	ldr	r2, [fp, #-12]
   18ffc:	add	r3, r2, r3
   19000:	mov	r0, r3
   19004:	bl	132d4 <_start@@Base+0x8bc>
   19008:	mov	r3, r0
   1900c:	strh	r3, [fp, #-6]
   19010:	ldrh	r3, [fp, #-6]
   19014:	cmp	r3, #0
   19018:	beq	19044 <_start@@Base+0x662c>
   1901c:	ldrh	r3, [fp, #-6]
   19020:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19024:	add	r3, r2, r3
   19028:	str	r3, [fp, #-16]
   1902c:	ldr	r0, [fp, #-16]
   19030:	bl	131f4 <_start@@Base+0x7dc>
   19034:	mov	r2, r0
   19038:	ldr	r3, [fp, #-16]
   1903c:	add	r3, r3, r2
   19040:	b	19048 <_start@@Base+0x6630>
   19044:	mov	r3, #0
   19048:	mov	r0, r3
   1904c:	sub	sp, fp, #4
   19050:	pop	{fp, pc}
   19054:	andeq	fp, r1, r0, asr #12
   19058:	andeq	r0, r0, r3, lsr r3
   1905c:	andeq	r7, r1, r8, ror fp
   19060:	andeq	r7, r1, r4, lsl ip
   19064:	push	{fp, lr}
   19068:	add	fp, sp, #4
   1906c:	sub	sp, sp, #16
   19070:	str	r0, [fp, #-16]
   19074:	mov	r3, #0
   19078:	strh	r3, [fp, #-6]
   1907c:	ldr	r3, [fp, #-16]
   19080:	cmp	r3, #0
   19084:	bne	190a8 <_start@@Base+0x6690>
   19088:	ldr	r3, [pc, #164]	; 19134 <_start@@Base+0x671c>
   1908c:	add	r3, pc, r3
   19090:	ldr	r2, [pc, #160]	; 19138 <_start@@Base+0x6720>
   19094:	ldr	r1, [pc, #160]	; 1913c <_start@@Base+0x6724>
   19098:	add	r1, pc, r1
   1909c:	ldr	r0, [pc, #156]	; 19140 <_start@@Base+0x6728>
   190a0:	add	r0, pc, r0
   190a4:	bl	12a08 <__assert_fail@plt>
   190a8:	mov	r3, #1
   190ac:	strh	r3, [fp, #-8]
   190b0:	ldr	r0, [fp, #-16]
   190b4:	bl	1327c <_start@@Base+0x864>
   190b8:	mov	r3, r0
   190bc:	rsb	r3, r3, #0
   190c0:	ldr	r2, [fp, #-16]
   190c4:	add	r3, r2, r3
   190c8:	str	r3, [fp, #-12]
   190cc:	ldr	r0, [fp, #-12]
   190d0:	bl	132d4 <_start@@Base+0x8bc>
   190d4:	mov	r3, r0
   190d8:	mov	r2, r3
   190dc:	ldrh	r3, [fp, #-8]
   190e0:	add	r3, r3, #3
   190e4:	lsl	r3, r3, #1
   190e8:	cmp	r2, r3
   190ec:	bcc	19114 <_start@@Base+0x66fc>
   190f0:	ldrh	r3, [fp, #-8]
   190f4:	add	r3, r3, #2
   190f8:	lsl	r3, r3, #1
   190fc:	ldr	r2, [fp, #-12]
   19100:	add	r3, r2, r3
   19104:	mov	r0, r3
   19108:	bl	132d4 <_start@@Base+0x8bc>
   1910c:	mov	r3, r0
   19110:	strh	r3, [fp, #-6]
   19114:	ldrh	r3, [fp, #-6]
   19118:	cmp	r3, #0
   1911c:	movne	r3, #1
   19120:	moveq	r3, #0
   19124:	uxtb	r3, r3
   19128:	mov	r0, r3
   1912c:	sub	sp, fp, #4
   19130:	pop	{fp, pc}
   19134:	andeq	fp, r1, ip, asr #9
   19138:	andeq	r0, r0, r3, lsr r3
   1913c:	andeq	r7, r1, r4, ror sl
   19140:	andeq	r7, r1, r0, lsl fp
   19144:	push	{fp, lr}
   19148:	add	fp, sp, #4
   1914c:	sub	sp, sp, #16
   19150:	str	r0, [fp, #-16]
   19154:	str	r1, [fp, #-20]	; 0xffffffec
   19158:	mov	r3, #0
   1915c:	strb	r3, [fp, #-12]
   19160:	mov	r3, #0
   19164:	str	r3, [fp, #-8]
   19168:	ldr	r0, [fp, #-20]	; 0xffffffec
   1916c:	bl	18e68 <_start@@Base+0x6450>
   19170:	mov	r3, r0
   19174:	strb	r3, [fp, #-12]
   19178:	ldrb	r3, [fp, #-12]
   1917c:	cmp	r3, #0
   19180:	bne	1919c <_start@@Base+0x6784>
   19184:	ldr	r3, [fp, #-16]
   19188:	mov	r2, r3
   1918c:	sub	r3, fp, #12
   19190:	ldm	r3, {r0, r1}
   19194:	stm	r2, {r0, r1}
   19198:	b	191c0 <_start@@Base+0x67a8>
   1919c:	ldr	r0, [fp, #-20]	; 0xffffffec
   191a0:	bl	18f60 <_start@@Base+0x6548>
   191a4:	mov	r3, r0
   191a8:	str	r3, [fp, #-8]
   191ac:	ldr	r3, [fp, #-16]
   191b0:	mov	r2, r3
   191b4:	sub	r3, fp, #12
   191b8:	ldm	r3, {r0, r1}
   191bc:	stm	r2, {r0, r1}
   191c0:	ldr	r0, [fp, #-16]
   191c4:	sub	sp, fp, #4
   191c8:	pop	{fp, pc}
   191cc:	push	{fp, lr}
   191d0:	add	fp, sp, #4
   191d4:	sub	sp, sp, #16
   191d8:	str	r0, [fp, #-16]
   191dc:	mov	r3, #0
   191e0:	strh	r3, [fp, #-6]
   191e4:	ldr	r3, [fp, #-16]
   191e8:	cmp	r3, #0
   191ec:	bne	19210 <_start@@Base+0x67f8>
   191f0:	ldr	r3, [pc, #188]	; 192b4 <_start@@Base+0x689c>
   191f4:	add	r3, pc, r3
   191f8:	mov	r2, #820	; 0x334
   191fc:	ldr	r1, [pc, #180]	; 192b8 <_start@@Base+0x68a0>
   19200:	add	r1, pc, r1
   19204:	ldr	r0, [pc, #176]	; 192bc <_start@@Base+0x68a4>
   19208:	add	r0, pc, r0
   1920c:	bl	12a08 <__assert_fail@plt>
   19210:	mov	r3, #2
   19214:	strh	r3, [fp, #-8]
   19218:	ldr	r0, [fp, #-16]
   1921c:	bl	1327c <_start@@Base+0x864>
   19220:	mov	r3, r0
   19224:	rsb	r3, r3, #0
   19228:	ldr	r2, [fp, #-16]
   1922c:	add	r3, r2, r3
   19230:	str	r3, [fp, #-12]
   19234:	ldr	r0, [fp, #-12]
   19238:	bl	132d4 <_start@@Base+0x8bc>
   1923c:	mov	r3, r0
   19240:	mov	r2, r3
   19244:	ldrh	r3, [fp, #-8]
   19248:	add	r3, r3, #3
   1924c:	lsl	r3, r3, #1
   19250:	cmp	r2, r3
   19254:	bcc	1927c <_start@@Base+0x6864>
   19258:	ldrh	r3, [fp, #-8]
   1925c:	add	r3, r3, #2
   19260:	lsl	r3, r3, #1
   19264:	ldr	r2, [fp, #-12]
   19268:	add	r3, r2, r3
   1926c:	mov	r0, r3
   19270:	bl	132d4 <_start@@Base+0x8bc>
   19274:	mov	r3, r0
   19278:	strh	r3, [fp, #-6]
   1927c:	ldrh	r3, [fp, #-6]
   19280:	cmp	r3, #0
   19284:	beq	192a4 <_start@@Base+0x688c>
   19288:	ldrh	r3, [fp, #-6]
   1928c:	ldr	r2, [fp, #-16]
   19290:	add	r3, r2, r3
   19294:	mov	r0, r3
   19298:	bl	1332c <_start@@Base+0x914>
   1929c:	mov	r3, r0
   192a0:	b	192a8 <_start@@Base+0x6890>
   192a4:	mov	r3, #0
   192a8:	mov	r0, r3
   192ac:	sub	sp, fp, #4
   192b0:	pop	{fp, pc}
   192b4:	andeq	fp, r1, r4, lsr #8
   192b8:	andeq	r7, r1, ip, lsl #18
   192bc:	andeq	r7, r1, r8, lsr #19
   192c0:	push	{fp, lr}
   192c4:	add	fp, sp, #4
   192c8:	sub	sp, sp, #24
   192cc:	str	r0, [fp, #-24]	; 0xffffffe8
   192d0:	mov	r3, #0
   192d4:	strh	r3, [fp, #-6]
   192d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   192dc:	cmp	r3, #0
   192e0:	bne	19304 <_start@@Base+0x68ec>
   192e4:	ldr	r3, [pc, #200]	; 193b4 <_start@@Base+0x699c>
   192e8:	add	r3, pc, r3
   192ec:	mov	r2, #820	; 0x334
   192f0:	ldr	r1, [pc, #192]	; 193b8 <_start@@Base+0x69a0>
   192f4:	add	r1, pc, r1
   192f8:	ldr	r0, [pc, #188]	; 193bc <_start@@Base+0x69a4>
   192fc:	add	r0, pc, r0
   19300:	bl	12a08 <__assert_fail@plt>
   19304:	mov	r3, #3
   19308:	strh	r3, [fp, #-8]
   1930c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19310:	bl	1327c <_start@@Base+0x864>
   19314:	mov	r3, r0
   19318:	rsb	r3, r3, #0
   1931c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19320:	add	r3, r2, r3
   19324:	str	r3, [fp, #-12]
   19328:	ldr	r0, [fp, #-12]
   1932c:	bl	132d4 <_start@@Base+0x8bc>
   19330:	mov	r3, r0
   19334:	mov	r2, r3
   19338:	ldrh	r3, [fp, #-8]
   1933c:	add	r3, r3, #3
   19340:	lsl	r3, r3, #1
   19344:	cmp	r2, r3
   19348:	bcc	19370 <_start@@Base+0x6958>
   1934c:	ldrh	r3, [fp, #-8]
   19350:	add	r3, r3, #2
   19354:	lsl	r3, r3, #1
   19358:	ldr	r2, [fp, #-12]
   1935c:	add	r3, r2, r3
   19360:	mov	r0, r3
   19364:	bl	132d4 <_start@@Base+0x8bc>
   19368:	mov	r3, r0
   1936c:	strh	r3, [fp, #-6]
   19370:	ldrh	r3, [fp, #-6]
   19374:	cmp	r3, #0
   19378:	beq	193a4 <_start@@Base+0x698c>
   1937c:	ldrh	r3, [fp, #-6]
   19380:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19384:	add	r3, r2, r3
   19388:	str	r3, [fp, #-16]
   1938c:	ldr	r0, [fp, #-16]
   19390:	bl	131f4 <_start@@Base+0x7dc>
   19394:	mov	r2, r0
   19398:	ldr	r3, [fp, #-16]
   1939c:	add	r3, r3, r2
   193a0:	b	193a8 <_start@@Base+0x6990>
   193a4:	mov	r3, #0
   193a8:	mov	r0, r3
   193ac:	sub	sp, fp, #4
   193b0:	pop	{fp, pc}
   193b4:	andeq	fp, r1, r0, asr r3
   193b8:	andeq	r7, r1, r8, lsl r8
   193bc:			; <UNDEFINED> instruction: 0x000178b4
   193c0:	push	{fp, lr}
   193c4:	add	fp, sp, #4
   193c8:	sub	sp, sp, #16
   193cc:	str	r0, [fp, #-16]
   193d0:	mov	r3, #0
   193d4:	strh	r3, [fp, #-6]
   193d8:	ldr	r3, [fp, #-16]
   193dc:	cmp	r3, #0
   193e0:	bne	19404 <_start@@Base+0x69ec>
   193e4:	ldr	r3, [pc, #188]	; 194a8 <_start@@Base+0x6a90>
   193e8:	add	r3, pc, r3
   193ec:	ldr	r2, [pc, #184]	; 194ac <_start@@Base+0x6a94>
   193f0:	ldr	r1, [pc, #184]	; 194b0 <_start@@Base+0x6a98>
   193f4:	add	r1, pc, r1
   193f8:	ldr	r0, [pc, #180]	; 194b4 <_start@@Base+0x6a9c>
   193fc:	add	r0, pc, r0
   19400:	bl	12a08 <__assert_fail@plt>
   19404:	mov	r3, #4
   19408:	strh	r3, [fp, #-8]
   1940c:	ldr	r0, [fp, #-16]
   19410:	bl	1327c <_start@@Base+0x864>
   19414:	mov	r3, r0
   19418:	rsb	r3, r3, #0
   1941c:	ldr	r2, [fp, #-16]
   19420:	add	r3, r2, r3
   19424:	str	r3, [fp, #-12]
   19428:	ldr	r0, [fp, #-12]
   1942c:	bl	132d4 <_start@@Base+0x8bc>
   19430:	mov	r3, r0
   19434:	mov	r2, r3
   19438:	ldrh	r3, [fp, #-8]
   1943c:	add	r3, r3, #3
   19440:	lsl	r3, r3, #1
   19444:	cmp	r2, r3
   19448:	bcc	19470 <_start@@Base+0x6a58>
   1944c:	ldrh	r3, [fp, #-8]
   19450:	add	r3, r3, #2
   19454:	lsl	r3, r3, #1
   19458:	ldr	r2, [fp, #-12]
   1945c:	add	r3, r2, r3
   19460:	mov	r0, r3
   19464:	bl	132d4 <_start@@Base+0x8bc>
   19468:	mov	r3, r0
   1946c:	strh	r3, [fp, #-6]
   19470:	ldrh	r3, [fp, #-6]
   19474:	cmp	r3, #0
   19478:	beq	19498 <_start@@Base+0x6a80>
   1947c:	ldrh	r3, [fp, #-6]
   19480:	ldr	r2, [fp, #-16]
   19484:	add	r3, r2, r3
   19488:	mov	r0, r3
   1948c:	bl	1332c <_start@@Base+0x914>
   19490:	mov	r3, r0
   19494:	b	1949c <_start@@Base+0x6a84>
   19498:	mov	r3, #0
   1949c:	mov	r0, r3
   194a0:	sub	sp, fp, #4
   194a4:	pop	{fp, pc}
   194a8:	andeq	fp, r1, ip, ror #4
   194ac:	andeq	r0, r0, r5, lsr r3
   194b0:	andeq	r7, r1, r8, lsl r7
   194b4:			; <UNDEFINED> instruction: 0x000177b4
   194b8:	push	{fp, lr}
   194bc:	add	fp, sp, #4
   194c0:	sub	sp, sp, #24
   194c4:	str	r0, [fp, #-24]	; 0xffffffe8
   194c8:	mov	r3, #0
   194cc:	strh	r3, [fp, #-6]
   194d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194d4:	cmp	r3, #0
   194d8:	bne	194fc <_start@@Base+0x6ae4>
   194dc:	ldr	r3, [pc, #200]	; 195ac <_start@@Base+0x6b94>
   194e0:	add	r3, pc, r3
   194e4:	ldr	r2, [pc, #196]	; 195b0 <_start@@Base+0x6b98>
   194e8:	ldr	r1, [pc, #196]	; 195b4 <_start@@Base+0x6b9c>
   194ec:	add	r1, pc, r1
   194f0:	ldr	r0, [pc, #192]	; 195b8 <_start@@Base+0x6ba0>
   194f4:	add	r0, pc, r0
   194f8:	bl	12a08 <__assert_fail@plt>
   194fc:	mov	r3, #5
   19500:	strh	r3, [fp, #-8]
   19504:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19508:	bl	1327c <_start@@Base+0x864>
   1950c:	mov	r3, r0
   19510:	rsb	r3, r3, #0
   19514:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19518:	add	r3, r2, r3
   1951c:	str	r3, [fp, #-12]
   19520:	ldr	r0, [fp, #-12]
   19524:	bl	132d4 <_start@@Base+0x8bc>
   19528:	mov	r3, r0
   1952c:	mov	r2, r3
   19530:	ldrh	r3, [fp, #-8]
   19534:	add	r3, r3, #3
   19538:	lsl	r3, r3, #1
   1953c:	cmp	r2, r3
   19540:	bcc	19568 <_start@@Base+0x6b50>
   19544:	ldrh	r3, [fp, #-8]
   19548:	add	r3, r3, #2
   1954c:	lsl	r3, r3, #1
   19550:	ldr	r2, [fp, #-12]
   19554:	add	r3, r2, r3
   19558:	mov	r0, r3
   1955c:	bl	132d4 <_start@@Base+0x8bc>
   19560:	mov	r3, r0
   19564:	strh	r3, [fp, #-6]
   19568:	ldrh	r3, [fp, #-6]
   1956c:	cmp	r3, #0
   19570:	beq	1959c <_start@@Base+0x6b84>
   19574:	ldrh	r3, [fp, #-6]
   19578:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1957c:	add	r3, r2, r3
   19580:	str	r3, [fp, #-16]
   19584:	ldr	r0, [fp, #-16]
   19588:	bl	131f4 <_start@@Base+0x7dc>
   1958c:	mov	r2, r0
   19590:	ldr	r3, [fp, #-16]
   19594:	add	r3, r3, r2
   19598:	b	195a0 <_start@@Base+0x6b88>
   1959c:	mov	r3, #0
   195a0:	mov	r0, r3
   195a4:	sub	sp, fp, #4
   195a8:	pop	{fp, pc}
   195ac:	muleq	r1, r4, r1
   195b0:	andeq	r0, r0, r5, lsr r3
   195b4:	andeq	r7, r1, r0, lsr #12
   195b8:			; <UNDEFINED> instruction: 0x000176bc
   195bc:	push	{fp, lr}
   195c0:	add	fp, sp, #4
   195c4:	sub	sp, sp, #16
   195c8:	str	r0, [fp, #-16]
   195cc:	str	r1, [fp, #-20]	; 0xffffffec
   195d0:	mov	r3, #0
   195d4:	strb	r3, [fp, #-12]
   195d8:	mov	r3, #0
   195dc:	str	r3, [fp, #-8]
   195e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   195e4:	bl	193c0 <_start@@Base+0x69a8>
   195e8:	mov	r3, r0
   195ec:	strb	r3, [fp, #-12]
   195f0:	ldrb	r3, [fp, #-12]
   195f4:	cmp	r3, #0
   195f8:	bne	19614 <_start@@Base+0x6bfc>
   195fc:	ldr	r3, [fp, #-16]
   19600:	mov	r2, r3
   19604:	sub	r3, fp, #12
   19608:	ldm	r3, {r0, r1}
   1960c:	stm	r2, {r0, r1}
   19610:	b	19638 <_start@@Base+0x6c20>
   19614:	ldr	r0, [fp, #-20]	; 0xffffffec
   19618:	bl	194b8 <_start@@Base+0x6aa0>
   1961c:	mov	r3, r0
   19620:	str	r3, [fp, #-8]
   19624:	ldr	r3, [fp, #-16]
   19628:	mov	r2, r3
   1962c:	sub	r3, fp, #12
   19630:	ldm	r3, {r0, r1}
   19634:	stm	r2, {r0, r1}
   19638:	ldr	r0, [fp, #-16]
   1963c:	sub	sp, fp, #4
   19640:	pop	{fp, pc}
   19644:	push	{fp, lr}
   19648:	add	fp, sp, #4
   1964c:	sub	sp, sp, #8
   19650:	str	r0, [fp, #-8]
   19654:	ldr	r0, [fp, #-8]
   19658:	bl	194b8 <_start@@Base+0x6aa0>
   1965c:	mov	r3, r0
   19660:	mov	r0, r3
   19664:	bl	13654 <_start@@Base+0xc3c>
   19668:	mov	r3, r0
   1966c:	mov	r0, r3
   19670:	sub	sp, fp, #4
   19674:	pop	{fp, pc}
   19678:	push	{fp, lr}
   1967c:	add	fp, sp, #4
   19680:	sub	sp, sp, #16
   19684:	str	r0, [fp, #-16]
   19688:	mov	r3, #0
   1968c:	strh	r3, [fp, #-6]
   19690:	ldr	r3, [fp, #-16]
   19694:	cmp	r3, #0
   19698:	bne	196bc <_start@@Base+0x6ca4>
   1969c:	ldr	r3, [pc, #188]	; 19760 <_start@@Base+0x6d48>
   196a0:	add	r3, pc, r3
   196a4:	ldr	r2, [pc, #184]	; 19764 <_start@@Base+0x6d4c>
   196a8:	ldr	r1, [pc, #184]	; 19768 <_start@@Base+0x6d50>
   196ac:	add	r1, pc, r1
   196b0:	ldr	r0, [pc, #180]	; 1976c <_start@@Base+0x6d54>
   196b4:	add	r0, pc, r0
   196b8:	bl	12a08 <__assert_fail@plt>
   196bc:	mov	r3, #6
   196c0:	strh	r3, [fp, #-8]
   196c4:	ldr	r0, [fp, #-16]
   196c8:	bl	1327c <_start@@Base+0x864>
   196cc:	mov	r3, r0
   196d0:	rsb	r3, r3, #0
   196d4:	ldr	r2, [fp, #-16]
   196d8:	add	r3, r2, r3
   196dc:	str	r3, [fp, #-12]
   196e0:	ldr	r0, [fp, #-12]
   196e4:	bl	132d4 <_start@@Base+0x8bc>
   196e8:	mov	r3, r0
   196ec:	mov	r2, r3
   196f0:	ldrh	r3, [fp, #-8]
   196f4:	add	r3, r3, #3
   196f8:	lsl	r3, r3, #1
   196fc:	cmp	r2, r3
   19700:	bcc	19728 <_start@@Base+0x6d10>
   19704:	ldrh	r3, [fp, #-8]
   19708:	add	r3, r3, #2
   1970c:	lsl	r3, r3, #1
   19710:	ldr	r2, [fp, #-12]
   19714:	add	r3, r2, r3
   19718:	mov	r0, r3
   1971c:	bl	132d4 <_start@@Base+0x8bc>
   19720:	mov	r3, r0
   19724:	strh	r3, [fp, #-6]
   19728:	ldrh	r3, [fp, #-6]
   1972c:	cmp	r3, #0
   19730:	beq	19750 <_start@@Base+0x6d38>
   19734:	ldrh	r3, [fp, #-6]
   19738:	ldr	r2, [fp, #-16]
   1973c:	add	r3, r2, r3
   19740:	mov	r0, r3
   19744:	bl	1332c <_start@@Base+0x914>
   19748:	mov	r3, r0
   1974c:	b	19754 <_start@@Base+0x6d3c>
   19750:	mov	r3, #0
   19754:	mov	r0, r3
   19758:	sub	sp, fp, #4
   1975c:	pop	{fp, pc}
   19760:	andeq	sl, r1, r8, asr #30
   19764:	andeq	r0, r0, r6, lsr r3
   19768:	andeq	r7, r1, r0, ror #8
   1976c:	strdeq	r7, [r1], -ip
   19770:	push	{fp, lr}
   19774:	add	fp, sp, #4
   19778:	sub	sp, sp, #24
   1977c:	str	r0, [fp, #-24]	; 0xffffffe8
   19780:	mov	r3, #0
   19784:	strh	r3, [fp, #-6]
   19788:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1978c:	cmp	r3, #0
   19790:	bne	197b4 <_start@@Base+0x6d9c>
   19794:	ldr	r3, [pc, #200]	; 19864 <_start@@Base+0x6e4c>
   19798:	add	r3, pc, r3
   1979c:	ldr	r2, [pc, #196]	; 19868 <_start@@Base+0x6e50>
   197a0:	ldr	r1, [pc, #196]	; 1986c <_start@@Base+0x6e54>
   197a4:	add	r1, pc, r1
   197a8:	ldr	r0, [pc, #192]	; 19870 <_start@@Base+0x6e58>
   197ac:	add	r0, pc, r0
   197b0:	bl	12a08 <__assert_fail@plt>
   197b4:	mov	r3, #7
   197b8:	strh	r3, [fp, #-8]
   197bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197c0:	bl	1327c <_start@@Base+0x864>
   197c4:	mov	r3, r0
   197c8:	rsb	r3, r3, #0
   197cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   197d0:	add	r3, r2, r3
   197d4:	str	r3, [fp, #-12]
   197d8:	ldr	r0, [fp, #-12]
   197dc:	bl	132d4 <_start@@Base+0x8bc>
   197e0:	mov	r3, r0
   197e4:	mov	r2, r3
   197e8:	ldrh	r3, [fp, #-8]
   197ec:	add	r3, r3, #3
   197f0:	lsl	r3, r3, #1
   197f4:	cmp	r2, r3
   197f8:	bcc	19820 <_start@@Base+0x6e08>
   197fc:	ldrh	r3, [fp, #-8]
   19800:	add	r3, r3, #2
   19804:	lsl	r3, r3, #1
   19808:	ldr	r2, [fp, #-12]
   1980c:	add	r3, r2, r3
   19810:	mov	r0, r3
   19814:	bl	132d4 <_start@@Base+0x8bc>
   19818:	mov	r3, r0
   1981c:	strh	r3, [fp, #-6]
   19820:	ldrh	r3, [fp, #-6]
   19824:	cmp	r3, #0
   19828:	beq	19854 <_start@@Base+0x6e3c>
   1982c:	ldrh	r3, [fp, #-6]
   19830:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19834:	add	r3, r2, r3
   19838:	str	r3, [fp, #-16]
   1983c:	ldr	r0, [fp, #-16]
   19840:	bl	131f4 <_start@@Base+0x7dc>
   19844:	mov	r2, r0
   19848:	ldr	r3, [fp, #-16]
   1984c:	add	r3, r3, r2
   19850:	b	19858 <_start@@Base+0x6e40>
   19854:	mov	r3, #0
   19858:	mov	r0, r3
   1985c:	sub	sp, fp, #4
   19860:	pop	{fp, pc}
   19864:	andeq	sl, r1, ip, ror #28
   19868:	andeq	r0, r0, r6, lsr r3
   1986c:	andeq	r7, r1, r8, ror #6
   19870:	andeq	r7, r1, r4, lsl #8
   19874:	push	{fp, lr}
   19878:	add	fp, sp, #4
   1987c:	sub	sp, sp, #24
   19880:	str	r0, [fp, #-24]	; 0xffffffe8
   19884:	mov	r3, #0
   19888:	strh	r3, [fp, #-6]
   1988c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19890:	cmp	r3, #0
   19894:	bne	198b8 <_start@@Base+0x6ea0>
   19898:	ldr	r3, [pc, #204]	; 1996c <_start@@Base+0x6f54>
   1989c:	add	r3, pc, r3
   198a0:	ldr	r2, [pc, #200]	; 19970 <_start@@Base+0x6f58>
   198a4:	ldr	r1, [pc, #200]	; 19974 <_start@@Base+0x6f5c>
   198a8:	add	r1, pc, r1
   198ac:	ldr	r0, [pc, #196]	; 19978 <_start@@Base+0x6f60>
   198b0:	add	r0, pc, r0
   198b4:	bl	12a08 <__assert_fail@plt>
   198b8:	mov	r3, #8
   198bc:	strh	r3, [fp, #-8]
   198c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   198c4:	bl	1327c <_start@@Base+0x864>
   198c8:	mov	r3, r0
   198cc:	rsb	r3, r3, #0
   198d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   198d4:	add	r3, r2, r3
   198d8:	str	r3, [fp, #-12]
   198dc:	ldr	r0, [fp, #-12]
   198e0:	bl	132d4 <_start@@Base+0x8bc>
   198e4:	mov	r3, r0
   198e8:	mov	r2, r3
   198ec:	ldrh	r3, [fp, #-8]
   198f0:	add	r3, r3, #3
   198f4:	lsl	r3, r3, #1
   198f8:	cmp	r2, r3
   198fc:	bcc	19924 <_start@@Base+0x6f0c>
   19900:	ldrh	r3, [fp, #-8]
   19904:	add	r3, r3, #2
   19908:	lsl	r3, r3, #1
   1990c:	ldr	r2, [fp, #-12]
   19910:	add	r3, r2, r3
   19914:	mov	r0, r3
   19918:	bl	132d4 <_start@@Base+0x8bc>
   1991c:	mov	r3, r0
   19920:	strh	r3, [fp, #-6]
   19924:	ldrh	r3, [fp, #-6]
   19928:	cmp	r3, #0
   1992c:	beq	1995c <_start@@Base+0x6f44>
   19930:	ldrh	r3, [fp, #-6]
   19934:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19938:	add	r3, r2, r3
   1993c:	str	r3, [fp, #-16]
   19940:	ldr	r0, [fp, #-16]
   19944:	bl	131f4 <_start@@Base+0x7dc>
   19948:	mov	r3, r0
   1994c:	add	r3, r3, #4
   19950:	ldr	r2, [fp, #-16]
   19954:	add	r3, r2, r3
   19958:	b	19960 <_start@@Base+0x6f48>
   1995c:	mov	r3, #0
   19960:	mov	r0, r3
   19964:	sub	sp, fp, #4
   19968:	pop	{fp, pc}
   1996c:	andeq	sl, r1, r4, asr lr
   19970:	andeq	r0, r0, r7, lsr r3
   19974:	andeq	r7, r1, r4, ror #4
   19978:	andeq	r7, r1, r0, lsl #6
   1997c:	push	{fp, lr}
   19980:	add	fp, sp, #4
   19984:	sub	sp, sp, #24
   19988:	str	r0, [fp, #-24]	; 0xffffffe8
   1998c:	mov	r3, #0
   19990:	strh	r3, [fp, #-6]
   19994:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19998:	cmp	r3, #0
   1999c:	bne	199c0 <_start@@Base+0x6fa8>
   199a0:	ldr	r3, [pc, #204]	; 19a74 <_start@@Base+0x705c>
   199a4:	add	r3, pc, r3
   199a8:	ldr	r2, [pc, #200]	; 19a78 <_start@@Base+0x7060>
   199ac:	ldr	r1, [pc, #200]	; 19a7c <_start@@Base+0x7064>
   199b0:	add	r1, pc, r1
   199b4:	ldr	r0, [pc, #196]	; 19a80 <_start@@Base+0x7068>
   199b8:	add	r0, pc, r0
   199bc:	bl	12a08 <__assert_fail@plt>
   199c0:	mov	r3, #9
   199c4:	strh	r3, [fp, #-8]
   199c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   199cc:	bl	1327c <_start@@Base+0x864>
   199d0:	mov	r3, r0
   199d4:	rsb	r3, r3, #0
   199d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   199dc:	add	r3, r2, r3
   199e0:	str	r3, [fp, #-12]
   199e4:	ldr	r0, [fp, #-12]
   199e8:	bl	132d4 <_start@@Base+0x8bc>
   199ec:	mov	r3, r0
   199f0:	mov	r2, r3
   199f4:	ldrh	r3, [fp, #-8]
   199f8:	add	r3, r3, #3
   199fc:	lsl	r3, r3, #1
   19a00:	cmp	r2, r3
   19a04:	bcc	19a2c <_start@@Base+0x7014>
   19a08:	ldrh	r3, [fp, #-8]
   19a0c:	add	r3, r3, #2
   19a10:	lsl	r3, r3, #1
   19a14:	ldr	r2, [fp, #-12]
   19a18:	add	r3, r2, r3
   19a1c:	mov	r0, r3
   19a20:	bl	132d4 <_start@@Base+0x8bc>
   19a24:	mov	r3, r0
   19a28:	strh	r3, [fp, #-6]
   19a2c:	ldrh	r3, [fp, #-6]
   19a30:	cmp	r3, #0
   19a34:	beq	19a64 <_start@@Base+0x704c>
   19a38:	ldrh	r3, [fp, #-6]
   19a3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19a40:	add	r3, r2, r3
   19a44:	str	r3, [fp, #-16]
   19a48:	ldr	r0, [fp, #-16]
   19a4c:	bl	131f4 <_start@@Base+0x7dc>
   19a50:	mov	r3, r0
   19a54:	add	r3, r3, #4
   19a58:	ldr	r2, [fp, #-16]
   19a5c:	add	r3, r2, r3
   19a60:	b	19a68 <_start@@Base+0x7050>
   19a64:	mov	r3, #0
   19a68:	mov	r0, r3
   19a6c:	sub	sp, fp, #4
   19a70:	pop	{fp, pc}
   19a74:	andeq	sl, r1, r8, lsl #26
   19a78:	andeq	r0, r0, r7, lsr r3
   19a7c:	andeq	r7, r1, ip, asr r1
   19a80:	strdeq	r7, [r1], -r8
   19a84:	push	{fp, lr}
   19a88:	add	fp, sp, #4
   19a8c:	sub	sp, sp, #16
   19a90:	str	r0, [fp, #-16]
   19a94:	mov	r3, #0
   19a98:	strh	r3, [fp, #-6]
   19a9c:	ldr	r3, [fp, #-16]
   19aa0:	cmp	r3, #0
   19aa4:	bne	19ac8 <_start@@Base+0x70b0>
   19aa8:	ldr	r3, [pc, #164]	; 19b54 <_start@@Base+0x713c>
   19aac:	add	r3, pc, r3
   19ab0:	ldr	r2, [pc, #160]	; 19b58 <_start@@Base+0x7140>
   19ab4:	ldr	r1, [pc, #160]	; 19b5c <_start@@Base+0x7144>
   19ab8:	add	r1, pc, r1
   19abc:	ldr	r0, [pc, #156]	; 19b60 <_start@@Base+0x7148>
   19ac0:	add	r0, pc, r0
   19ac4:	bl	12a08 <__assert_fail@plt>
   19ac8:	mov	r3, #9
   19acc:	strh	r3, [fp, #-8]
   19ad0:	ldr	r0, [fp, #-16]
   19ad4:	bl	1327c <_start@@Base+0x864>
   19ad8:	mov	r3, r0
   19adc:	rsb	r3, r3, #0
   19ae0:	ldr	r2, [fp, #-16]
   19ae4:	add	r3, r2, r3
   19ae8:	str	r3, [fp, #-12]
   19aec:	ldr	r0, [fp, #-12]
   19af0:	bl	132d4 <_start@@Base+0x8bc>
   19af4:	mov	r3, r0
   19af8:	mov	r2, r3
   19afc:	ldrh	r3, [fp, #-8]
   19b00:	add	r3, r3, #3
   19b04:	lsl	r3, r3, #1
   19b08:	cmp	r2, r3
   19b0c:	bcc	19b34 <_start@@Base+0x711c>
   19b10:	ldrh	r3, [fp, #-8]
   19b14:	add	r3, r3, #2
   19b18:	lsl	r3, r3, #1
   19b1c:	ldr	r2, [fp, #-12]
   19b20:	add	r3, r2, r3
   19b24:	mov	r0, r3
   19b28:	bl	132d4 <_start@@Base+0x8bc>
   19b2c:	mov	r3, r0
   19b30:	strh	r3, [fp, #-6]
   19b34:	ldrh	r3, [fp, #-6]
   19b38:	cmp	r3, #0
   19b3c:	movne	r3, #1
   19b40:	moveq	r3, #0
   19b44:	uxtb	r3, r3
   19b48:	mov	r0, r3
   19b4c:	sub	sp, fp, #4
   19b50:	pop	{fp, pc}
   19b54:	ldrdeq	sl, [r1], -r4
   19b58:	andeq	r0, r0, r7, lsr r3
   19b5c:	andeq	r7, r1, r4, asr r0
   19b60:	strdeq	r7, [r1], -r0
   19b64:	push	{r4, fp, lr}
   19b68:	add	fp, sp, #8
   19b6c:	sub	sp, sp, #20
   19b70:	str	r0, [fp, #-24]	; 0xffffffe8
   19b74:	str	r1, [fp, #-28]	; 0xffffffe4
   19b78:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19b7c:	bl	19874 <_start@@Base+0x6e5c>
   19b80:	mov	r3, r0
   19b84:	str	r3, [fp, #-20]	; 0xffffffec
   19b88:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19b8c:	bl	1997c <_start@@Base+0x6f64>
   19b90:	mov	r3, r0
   19b94:	str	r3, [fp, #-16]
   19b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b9c:	mov	r0, r3
   19ba0:	bl	134f8 <_start@@Base+0xae0>
   19ba4:	mov	r4, r0
   19ba8:	ldr	r3, [fp, #-16]
   19bac:	mov	r0, r3
   19bb0:	bl	134f8 <_start@@Base+0xae0>
   19bb4:	mov	r3, r0
   19bb8:	cmp	r4, r3
   19bbc:	beq	19be0 <_start@@Base+0x71c8>
   19bc0:	ldr	r3, [pc, #56]	; 19c00 <_start@@Base+0x71e8>
   19bc4:	add	r3, pc, r3
   19bc8:	ldr	r2, [pc, #52]	; 19c04 <_start@@Base+0x71ec>
   19bcc:	ldr	r1, [pc, #52]	; 19c08 <_start@@Base+0x71f0>
   19bd0:	add	r1, pc, r1
   19bd4:	ldr	r0, [pc, #48]	; 19c0c <_start@@Base+0x71f4>
   19bd8:	add	r0, pc, r0
   19bdc:	bl	12a08 <__assert_fail@plt>
   19be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19be4:	mov	r2, r3
   19be8:	sub	r3, fp, #20
   19bec:	ldm	r3, {r0, r1}
   19bf0:	stm	r2, {r0, r1}
   19bf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19bf8:	sub	sp, fp, #8
   19bfc:	pop	{r4, fp, pc}
   19c00:	andeq	sl, r1, r8, asr #21
   19c04:	andeq	r0, r0, r7, lsr r3
   19c08:	andeq	r6, r1, ip, lsr pc
   19c0c:	andeq	r7, r1, r0
   19c10:	push	{fp}		; (str fp, [sp, #-4]!)
   19c14:	add	fp, sp, #0
   19c18:	sub	sp, sp, #12
   19c1c:	str	r0, [fp, #-8]
   19c20:	ldr	r3, [fp, #-8]
   19c24:	ldr	r3, [r3, #24]
   19c28:	mov	r0, r3
   19c2c:	add	sp, fp, #0
   19c30:	pop	{fp}		; (ldr fp, [sp], #4)
   19c34:	bx	lr
   19c38:	push	{fp, lr}
   19c3c:	add	fp, sp, #4
   19c40:	sub	sp, sp, #8
   19c44:	str	r0, [fp, #-8]
   19c48:	mov	r3, r1
   19c4c:	strb	r3, [fp, #-9]
   19c50:	ldrb	r3, [fp, #-9]
   19c54:	mov	r0, r3
   19c58:	bl	12b68 <_start@@Base+0x150>
   19c5c:	mov	r3, r0
   19c60:	mov	r2, r3
   19c64:	ldr	r3, [fp, #-8]
   19c68:	strb	r2, [r3]
   19c6c:	ldr	r3, [fp, #-8]
   19c70:	mov	r0, r3
   19c74:	sub	sp, fp, #4
   19c78:	pop	{fp, pc}
   19c7c:	push	{fp, lr}
   19c80:	add	fp, sp, #4
   19c84:	sub	sp, sp, #24
   19c88:	str	r0, [fp, #-8]
   19c8c:	str	r1, [fp, #-12]
   19c90:	str	r2, [fp, #-16]
   19c94:	mvn	r3, #0
   19c98:	str	r3, [sp, #4]
   19c9c:	mov	r3, #1
   19ca0:	str	r3, [sp]
   19ca4:	mov	r3, #1
   19ca8:	ldr	r2, [fp, #-16]
   19cac:	ldr	r1, [fp, #-12]
   19cb0:	ldr	r0, [fp, #-8]
   19cb4:	bl	2b764 <flatcc_builder_create_vector@@Base>
   19cb8:	mov	r3, r0
   19cbc:	mov	r0, r3
   19cc0:	sub	sp, fp, #4
   19cc4:	pop	{fp, pc}
   19cc8:	push	{fp, lr}
   19ccc:	add	fp, sp, #4
   19cd0:	sub	sp, sp, #8
   19cd4:	str	r0, [fp, #-8]
   19cd8:	mov	r3, r1
   19cdc:	strb	r3, [fp, #-9]
   19ce0:	ldrsb	r3, [fp, #-9]
   19ce4:	mov	r0, r3
   19ce8:	bl	12d6c <_start@@Base+0x354>
   19cec:	mov	r3, r0
   19cf0:	mov	r2, r3
   19cf4:	ldr	r3, [fp, #-8]
   19cf8:	strb	r2, [r3]
   19cfc:	ldr	r3, [fp, #-8]
   19d00:	mov	r0, r3
   19d04:	sub	sp, fp, #4
   19d08:	pop	{fp, pc}
   19d0c:	push	{fp, lr}
   19d10:	add	fp, sp, #4
   19d14:	sub	sp, sp, #8
   19d18:	str	r0, [fp, #-8]
   19d1c:	mov	r3, r1
   19d20:	strb	r3, [fp, #-9]
   19d24:	ldrb	r3, [fp, #-9]
   19d28:	mov	r0, r3
   19d2c:	bl	130b0 <_start@@Base+0x698>
   19d30:	mov	r3, r0
   19d34:	mov	r2, r3
   19d38:	ldr	r3, [fp, #-8]
   19d3c:	strb	r2, [r3]
   19d40:	ldr	r3, [fp, #-8]
   19d44:	mov	r0, r3
   19d48:	sub	sp, fp, #4
   19d4c:	pop	{fp, pc}
   19d50:	push	{fp, lr}
   19d54:	add	fp, sp, #4
   19d58:	sub	sp, sp, #8
   19d5c:	str	r0, [fp, #-8]
   19d60:	mvn	r3, #0
   19d64:	mov	r2, #1
   19d68:	mov	r1, #1
   19d6c:	ldr	r0, [fp, #-8]
   19d70:	bl	2a72c <flatcc_builder_start_vector@@Base>
   19d74:	mov	r3, r0
   19d78:	mov	r0, r3
   19d7c:	sub	sp, fp, #4
   19d80:	pop	{fp, pc}
   19d84:	push	{fp, lr}
   19d88:	add	fp, sp, #4
   19d8c:	sub	sp, sp, #8
   19d90:	str	r0, [fp, #-8]
   19d94:	ldr	r0, [fp, #-8]
   19d98:	bl	2b984 <flatcc_builder_end_vector@@Base>
   19d9c:	mov	r3, r0
   19da0:	mov	r0, r3
   19da4:	sub	sp, fp, #4
   19da8:	pop	{fp, pc}
   19dac:	push	{fp, lr}
   19db0:	add	fp, sp, #4
   19db4:	sub	sp, sp, #24
   19db8:	str	r0, [fp, #-8]
   19dbc:	str	r1, [fp, #-12]
   19dc0:	str	r2, [fp, #-16]
   19dc4:	mvn	r3, #0
   19dc8:	str	r3, [sp, #4]
   19dcc:	mov	r3, #1
   19dd0:	str	r3, [sp]
   19dd4:	mov	r3, #1
   19dd8:	ldr	r2, [fp, #-16]
   19ddc:	ldr	r1, [fp, #-12]
   19de0:	ldr	r0, [fp, #-8]
   19de4:	bl	2b764 <flatcc_builder_create_vector@@Base>
   19de8:	mov	r3, r0
   19dec:	mov	r0, r3
   19df0:	sub	sp, fp, #4
   19df4:	pop	{fp, pc}
   19df8:	push	{fp, lr}
   19dfc:	add	fp, sp, #4
   19e00:	sub	sp, sp, #16
   19e04:	str	r0, [fp, #-8]
   19e08:	str	r1, [fp, #-12]
   19e0c:	ldr	r0, [fp, #-12]
   19e10:	bl	138b0 <_start@@Base+0xe98>
   19e14:	mov	r2, r0
   19e18:	mvn	r3, #0
   19e1c:	str	r3, [sp, #4]
   19e20:	mov	r3, #1
   19e24:	str	r3, [sp]
   19e28:	mov	r3, #1
   19e2c:	ldr	r1, [fp, #-12]
   19e30:	ldr	r0, [fp, #-8]
   19e34:	bl	2b764 <flatcc_builder_create_vector@@Base>
   19e38:	mov	r3, r0
   19e3c:	mov	r0, r3
   19e40:	sub	sp, fp, #4
   19e44:	pop	{fp, pc}
   19e48:	push	{fp, lr}
   19e4c:	add	fp, sp, #4
   19e50:	sub	sp, sp, #32
   19e54:	str	r0, [fp, #-16]
   19e58:	str	r1, [fp, #-20]	; 0xffffffec
   19e5c:	str	r2, [fp, #-24]	; 0xffffffe8
   19e60:	str	r3, [fp, #-28]	; 0xffffffe4
   19e64:	ldr	r0, [fp, #-20]	; 0xffffffec
   19e68:	bl	138b0 <_start@@Base+0xe98>
   19e6c:	str	r0, [fp, #-8]
   19e70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19e74:	ldr	r3, [fp, #-8]
   19e78:	cmp	r2, r3
   19e7c:	bcc	19e88 <_start@@Base+0x7470>
   19e80:	ldr	r3, [fp, #-8]
   19e84:	str	r3, [fp, #-24]	; 0xffffffe8
   19e88:	ldr	r2, [fp, #-8]
   19e8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e90:	sub	r3, r2, r3
   19e94:	str	r3, [fp, #-8]
   19e98:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19e9c:	ldr	r3, [fp, #-8]
   19ea0:	cmp	r2, r3
   19ea4:	bls	19eb0 <_start@@Base+0x7498>
   19ea8:	ldr	r3, [fp, #-8]
   19eac:	str	r3, [fp, #-28]	; 0xffffffe4
   19eb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19eb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   19eb8:	bl	130d8 <_start@@Base+0x6c0>
   19ebc:	mov	r1, r0
   19ec0:	mvn	r3, #0
   19ec4:	str	r3, [sp, #4]
   19ec8:	mov	r3, #1
   19ecc:	str	r3, [sp]
   19ed0:	mov	r3, #1
   19ed4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19ed8:	ldr	r0, [fp, #-16]
   19edc:	bl	2b764 <flatcc_builder_create_vector@@Base>
   19ee0:	mov	r3, r0
   19ee4:	mov	r0, r3
   19ee8:	sub	sp, fp, #4
   19eec:	pop	{fp, pc}
   19ef0:	push	{fp, lr}
   19ef4:	add	fp, sp, #4
   19ef8:	sub	sp, sp, #8
   19efc:	str	r0, [fp, #-8]
   19f00:	mov	r3, r1
   19f04:	strh	r3, [fp, #-10]
   19f08:	ldrh	r3, [fp, #-10]
   19f0c:	mov	r0, r3
   19f10:	bl	12be8 <_start@@Base+0x1d0>
   19f14:	mov	r3, r0
   19f18:	mov	r2, r3
   19f1c:	ldr	r3, [fp, #-8]
   19f20:	strh	r2, [r3]
   19f24:	ldr	r3, [fp, #-8]
   19f28:	mov	r0, r3
   19f2c:	sub	sp, fp, #4
   19f30:	pop	{fp, pc}
   19f34:	push	{fp, lr}
   19f38:	add	fp, sp, #4
   19f3c:	sub	sp, sp, #8
   19f40:	str	r0, [fp, #-8]
   19f44:	str	r1, [fp, #-12]
   19f48:	ldr	r0, [fp, #-12]
   19f4c:	bl	12c64 <_start@@Base+0x24c>
   19f50:	mov	r2, r0
   19f54:	ldr	r3, [fp, #-8]
   19f58:	str	r2, [r3]
   19f5c:	ldr	r3, [fp, #-8]
   19f60:	mov	r0, r3
   19f64:	sub	sp, fp, #4
   19f68:	pop	{fp, pc}
   19f6c:	push	{fp, lr}
   19f70:	add	fp, sp, #4
   19f74:	sub	sp, sp, #16
   19f78:	str	r0, [fp, #-8]
   19f7c:	strd	r2, [fp, #-20]	; 0xffffffec
   19f80:	ldrd	r0, [fp, #-20]	; 0xffffffec
   19f84:	bl	12ce0 <_start@@Base+0x2c8>
   19f88:	mov	r2, r0
   19f8c:	mov	r3, r1
   19f90:	ldr	r1, [fp, #-8]
   19f94:	strd	r2, [r1]
   19f98:	ldr	r3, [fp, #-8]
   19f9c:	mov	r0, r3
   19fa0:	sub	sp, fp, #4
   19fa4:	pop	{fp, pc}
   19fa8:	push	{fp, lr}
   19fac:	add	fp, sp, #4
   19fb0:	sub	sp, sp, #8
   19fb4:	str	r0, [fp, #-8]
   19fb8:	str	r1, [fp, #-12]
   19fbc:	ldr	r3, [fp, #-12]
   19fc0:	ldrsh	r3, [r3]
   19fc4:	mov	r0, r3
   19fc8:	bl	12dc4 <_start@@Base+0x3ac>
   19fcc:	mov	r3, r0
   19fd0:	mov	r2, r3
   19fd4:	ldr	r3, [fp, #-8]
   19fd8:	strh	r2, [r3]
   19fdc:	ldr	r3, [fp, #-8]
   19fe0:	mov	r0, r3
   19fe4:	sub	sp, fp, #4
   19fe8:	pop	{fp, pc}
   19fec:	push	{fp, lr}
   19ff0:	add	fp, sp, #4
   19ff4:	sub	sp, sp, #8
   19ff8:	str	r0, [fp, #-8]
   19ffc:	mov	r3, r1
   1a000:	strh	r3, [fp, #-10]
   1a004:	ldrsh	r3, [fp, #-10]
   1a008:	mov	r0, r3
   1a00c:	bl	12dec <_start@@Base+0x3d4>
   1a010:	mov	r3, r0
   1a014:	mov	r2, r3
   1a018:	ldr	r3, [fp, #-8]
   1a01c:	strh	r2, [r3]
   1a020:	ldr	r3, [fp, #-8]
   1a024:	mov	r0, r3
   1a028:	sub	sp, fp, #4
   1a02c:	pop	{fp, pc}
   1a030:	push	{fp, lr}
   1a034:	add	fp, sp, #4
   1a038:	sub	sp, sp, #8
   1a03c:	str	r0, [fp, #-8]
   1a040:	str	r1, [fp, #-12]
   1a044:	ldr	r0, [fp, #-12]
   1a048:	bl	12e68 <_start@@Base+0x450>
   1a04c:	mov	r2, r0
   1a050:	ldr	r3, [fp, #-8]
   1a054:	str	r2, [r3]
   1a058:	ldr	r3, [fp, #-8]
   1a05c:	mov	r0, r3
   1a060:	sub	sp, fp, #4
   1a064:	pop	{fp, pc}
   1a068:	push	{fp, lr}
   1a06c:	add	fp, sp, #4
   1a070:	sub	sp, sp, #16
   1a074:	str	r0, [fp, #-8]
   1a078:	strd	r2, [fp, #-20]	; 0xffffffec
   1a07c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1a080:	bl	12ee4 <_start@@Base+0x4cc>
   1a084:	mov	r2, r0
   1a088:	mov	r3, r1
   1a08c:	ldr	r1, [fp, #-8]
   1a090:	strd	r2, [r1]
   1a094:	ldr	r3, [fp, #-8]
   1a098:	mov	r0, r3
   1a09c:	sub	sp, fp, #4
   1a0a0:	pop	{fp, pc}
   1a0a4:	push	{fp, lr}
   1a0a8:	add	fp, sp, #4
   1a0ac:	sub	sp, sp, #8
   1a0b0:	str	r0, [fp, #-8]
   1a0b4:	str	r1, [fp, #-12]
   1a0b8:	ldr	r3, [fp, #-12]
   1a0bc:	vldr	s15, [r3]
   1a0c0:	vmov.f32	s0, s15
   1a0c4:	bl	12f48 <_start@@Base+0x530>
   1a0c8:	vmov.f32	s15, s0
   1a0cc:	ldr	r3, [fp, #-8]
   1a0d0:	vstr	s15, [r3]
   1a0d4:	ldr	r3, [fp, #-8]
   1a0d8:	mov	r0, r3
   1a0dc:	sub	sp, fp, #4
   1a0e0:	pop	{fp, pc}
   1a0e4:	push	{fp, lr}
   1a0e8:	add	fp, sp, #4
   1a0ec:	sub	sp, sp, #8
   1a0f0:	str	r0, [fp, #-8]
   1a0f4:	vstr	s0, [fp, #-12]
   1a0f8:	vldr	s0, [fp, #-12]
   1a0fc:	bl	12f80 <_start@@Base+0x568>
   1a100:	vmov.f32	s15, s0
   1a104:	ldr	r3, [fp, #-8]
   1a108:	vstr	s15, [r3]
   1a10c:	ldr	r3, [fp, #-8]
   1a110:	mov	r0, r3
   1a114:	sub	sp, fp, #4
   1a118:	pop	{fp, pc}
   1a11c:	push	{fp, lr}
   1a120:	add	fp, sp, #4
   1a124:	sub	sp, sp, #8
   1a128:	str	r0, [fp, #-8]
   1a12c:	str	r1, [fp, #-12]
   1a130:	ldr	r3, [fp, #-12]
   1a134:	vldr	d7, [r3]
   1a138:	vmov.f64	d0, d7
   1a13c:	bl	12fe8 <_start@@Base+0x5d0>
   1a140:	vmov.f64	d7, d0
   1a144:	ldr	r3, [fp, #-8]
   1a148:	vstr	d7, [r3]
   1a14c:	ldr	r3, [fp, #-8]
   1a150:	mov	r0, r3
   1a154:	sub	sp, fp, #4
   1a158:	pop	{fp, pc}
   1a15c:	push	{fp, lr}
   1a160:	add	fp, sp, #4
   1a164:	sub	sp, sp, #16
   1a168:	str	r0, [fp, #-8]
   1a16c:	vstr	d0, [fp, #-20]	; 0xffffffec
   1a170:	vldr	d0, [fp, #-20]	; 0xffffffec
   1a174:	bl	13020 <_start@@Base+0x608>
   1a178:	vmov.f64	d7, d0
   1a17c:	ldr	r3, [fp, #-8]
   1a180:	vstr	d7, [r3]
   1a184:	ldr	r3, [fp, #-8]
   1a188:	mov	r0, r3
   1a18c:	sub	sp, fp, #4
   1a190:	pop	{fp, pc}
   1a194:	push	{fp, lr}
   1a198:	add	fp, sp, #4
   1a19c:	sub	sp, sp, #24
   1a1a0:	str	r0, [fp, #-8]
   1a1a4:	str	r1, [fp, #-12]
   1a1a8:	str	r2, [fp, #-16]
   1a1ac:	mvn	r3, #-536870912	; 0xe0000000
   1a1b0:	str	r3, [sp, #4]
   1a1b4:	mov	r3, #8
   1a1b8:	str	r3, [sp]
   1a1bc:	mov	r3, #8
   1a1c0:	ldr	r2, [fp, #-16]
   1a1c4:	ldr	r1, [fp, #-12]
   1a1c8:	ldr	r0, [fp, #-8]
   1a1cc:	bl	2b764 <flatcc_builder_create_vector@@Base>
   1a1d0:	mov	r3, r0
   1a1d4:	mov	r0, r3
   1a1d8:	sub	sp, fp, #4
   1a1dc:	pop	{fp, pc}
   1a1e0:	push	{fp, lr}
   1a1e4:	add	fp, sp, #4
   1a1e8:	sub	sp, sp, #16
   1a1ec:	str	r0, [fp, #-8]
   1a1f0:	str	r1, [fp, #-12]
   1a1f4:	str	r2, [fp, #-16]
   1a1f8:	ldr	r2, [fp, #-16]
   1a1fc:	ldr	r1, [fp, #-12]
   1a200:	ldr	r0, [fp, #-8]
   1a204:	bl	2cb50 <flatcc_builder_create_string@@Base>
   1a208:	mov	r3, r0
   1a20c:	mov	r0, r3
   1a210:	sub	sp, fp, #4
   1a214:	pop	{fp, pc}
   1a218:	push	{fp, lr}
   1a21c:	add	fp, sp, #4
   1a220:	sub	sp, sp, #8
   1a224:	str	r0, [fp, #-8]
   1a228:	str	r1, [fp, #-12]
   1a22c:	ldr	r1, [fp, #-12]
   1a230:	ldr	r0, [fp, #-8]
   1a234:	bl	2ccf0 <flatcc_builder_create_string_str@@Base>
   1a238:	mov	r3, r0
   1a23c:	mov	r0, r3
   1a240:	sub	sp, fp, #4
   1a244:	pop	{fp, pc}
   1a248:	push	{fp, lr}
   1a24c:	add	fp, sp, #4
   1a250:	sub	sp, sp, #8
   1a254:	str	r0, [fp, #-8]
   1a258:	str	r1, [fp, #-12]
   1a25c:	ldr	r0, [fp, #-12]
   1a260:	bl	1353c <_start@@Base+0xb24>
   1a264:	mov	r3, r0
   1a268:	mov	r2, r3
   1a26c:	ldr	r1, [fp, #-12]
   1a270:	ldr	r0, [fp, #-8]
   1a274:	bl	2cb50 <flatcc_builder_create_string@@Base>
   1a278:	mov	r3, r0
   1a27c:	mov	r0, r3
   1a280:	sub	sp, fp, #4
   1a284:	pop	{fp, pc}
   1a288:	push	{fp, lr}
   1a28c:	add	fp, sp, #4
   1a290:	sub	sp, sp, #24
   1a294:	str	r0, [fp, #-16]
   1a298:	str	r1, [fp, #-20]	; 0xffffffec
   1a29c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a2a0:	str	r3, [fp, #-28]	; 0xffffffe4
   1a2a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a2a8:	bl	1353c <_start@@Base+0xb24>
   1a2ac:	str	r0, [fp, #-8]
   1a2b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a2b4:	ldr	r3, [fp, #-8]
   1a2b8:	cmp	r2, r3
   1a2bc:	bcc	1a2c8 <_start@@Base+0x78b0>
   1a2c0:	ldr	r3, [fp, #-8]
   1a2c4:	str	r3, [fp, #-24]	; 0xffffffe8
   1a2c8:	ldr	r2, [fp, #-8]
   1a2cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a2d0:	sub	r3, r2, r3
   1a2d4:	str	r3, [fp, #-8]
   1a2d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a2dc:	ldr	r3, [fp, #-8]
   1a2e0:	cmp	r2, r3
   1a2e4:	bls	1a2f0 <_start@@Base+0x78d8>
   1a2e8:	ldr	r3, [fp, #-8]
   1a2ec:	str	r3, [fp, #-28]	; 0xffffffe4
   1a2f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a2f8:	add	r3, r2, r3
   1a2fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a300:	mov	r1, r3
   1a304:	ldr	r0, [fp, #-16]
   1a308:	bl	2cb50 <flatcc_builder_create_string@@Base>
   1a30c:	mov	r3, r0
   1a310:	mov	r0, r3
   1a314:	sub	sp, fp, #4
   1a318:	pop	{fp, pc}
   1a31c:	push	{fp, lr}
   1a320:	add	fp, sp, #4
   1a324:	sub	sp, sp, #8
   1a328:	str	r0, [fp, #-8]
   1a32c:	str	r1, [fp, #-12]
   1a330:	ldr	r3, [fp, #-12]
   1a334:	cmp	r3, #0
   1a338:	beq	1a350 <_start@@Base+0x7938>
   1a33c:	ldr	r1, [fp, #-12]
   1a340:	ldr	r0, [fp, #-8]
   1a344:	bl	2a0e0 <flatcc_builder_offset_vector_push@@Base>
   1a348:	mov	r3, r0
   1a34c:	b	1a354 <_start@@Base+0x793c>
   1a350:	mov	r3, #0
   1a354:	mov	r0, r3
   1a358:	sub	sp, fp, #4
   1a35c:	pop	{fp, pc}
   1a360:	push	{fp, lr}
   1a364:	add	fp, sp, #4
   1a368:	sub	sp, sp, #8
   1a36c:	str	r0, [fp, #-8]
   1a370:	str	r1, [fp, #-12]
   1a374:	mov	r3, #0
   1a378:	mov	r2, #0
   1a37c:	ldr	r1, [fp, #-12]
   1a380:	ldr	r0, [fp, #-8]
   1a384:	bl	29980 <flatcc_builder_start_buffer@@Base>
   1a388:	mov	r3, r0
   1a38c:	mov	r0, r3
   1a390:	sub	sp, fp, #4
   1a394:	pop	{fp, pc}
   1a398:	push	{fp, lr}
   1a39c:	add	fp, sp, #4
   1a3a0:	sub	sp, sp, #8
   1a3a4:	str	r0, [fp, #-8]
   1a3a8:	str	r1, [fp, #-12]
   1a3ac:	mov	r3, #2
   1a3b0:	mov	r2, #0
   1a3b4:	ldr	r1, [fp, #-12]
   1a3b8:	ldr	r0, [fp, #-8]
   1a3bc:	bl	29980 <flatcc_builder_start_buffer@@Base>
   1a3c0:	mov	r3, r0
   1a3c4:	mov	r0, r3
   1a3c8:	sub	sp, fp, #4
   1a3cc:	pop	{fp, pc}
   1a3d0:	push	{fp, lr}
   1a3d4:	add	fp, sp, #4
   1a3d8:	sub	sp, sp, #8
   1a3dc:	str	r0, [fp, #-8]
   1a3e0:	str	r1, [fp, #-12]
   1a3e4:	ldr	r1, [fp, #-12]
   1a3e8:	ldr	r0, [fp, #-8]
   1a3ec:	bl	29ad8 <flatcc_builder_end_buffer@@Base>
   1a3f0:	mov	r3, r0
   1a3f4:	mov	r0, r3
   1a3f8:	sub	sp, fp, #4
   1a3fc:	pop	{fp, pc}
   1a400:	push	{fp, lr}
   1a404:	add	fp, sp, #4
   1a408:	sub	sp, sp, #8
   1a40c:	str	r0, [fp, #-8]
   1a410:	mov	r3, r1
   1a414:	strb	r3, [fp, #-9]
   1a418:	ldrsb	r3, [fp, #-9]
   1a41c:	mov	r0, r3
   1a420:	bl	14758 <_start@@Base+0x1d40>
   1a424:	mov	r3, r0
   1a428:	mov	r2, r3
   1a42c:	ldr	r3, [fp, #-8]
   1a430:	strb	r2, [r3]
   1a434:	ldr	r3, [fp, #-8]
   1a438:	mov	r0, r3
   1a43c:	sub	sp, fp, #4
   1a440:	pop	{fp, pc}
   1a444:	push	{fp}		; (str fp, [sp, #-4]!)
   1a448:	add	fp, sp, #0
   1a44c:	sub	sp, sp, #12
   1a450:	str	r0, [fp, #-8]
   1a454:	mov	r3, r1
   1a458:	strh	r3, [fp, #-10]
   1a45c:	mov	r3, r2
   1a460:	strb	r3, [fp, #-11]
   1a464:	ldr	r3, [fp, #-8]
   1a468:	ldrh	r2, [fp, #-10]
   1a46c:	strh	r2, [r3]
   1a470:	ldr	r3, [fp, #-8]
   1a474:	ldrb	r2, [fp, #-11]
   1a478:	strb	r2, [r3, #2]
   1a47c:	ldr	r3, [fp, #-8]
   1a480:	mov	r0, r3
   1a484:	add	sp, fp, #0
   1a488:	pop	{fp}		; (ldr fp, [sp], #4)
   1a48c:	bx	lr
   1a490:	push	{fp, lr}
   1a494:	add	fp, sp, #4
   1a498:	sub	sp, sp, #8
   1a49c:	str	r0, [fp, #-8]
   1a4a0:	mov	r3, r1
   1a4a4:	strh	r3, [fp, #-10]
   1a4a8:	mov	r3, r2
   1a4ac:	strb	r3, [fp, #-11]
   1a4b0:	ldr	r3, [fp, #-8]
   1a4b4:	ldrsh	r2, [fp, #-10]
   1a4b8:	mov	r1, r2
   1a4bc:	mov	r0, r3
   1a4c0:	bl	19fec <_start@@Base+0x75d4>
   1a4c4:	ldr	r3, [fp, #-8]
   1a4c8:	ldrb	r2, [fp, #-11]
   1a4cc:	strb	r2, [r3, #2]
   1a4d0:	ldr	r3, [fp, #-8]
   1a4d4:	mov	r0, r3
   1a4d8:	sub	sp, fp, #4
   1a4dc:	pop	{fp, pc}
   1a4e0:	push	{fp, lr}
   1a4e4:	add	fp, sp, #4
   1a4e8:	sub	sp, sp, #8
   1a4ec:	str	r0, [fp, #-8]
   1a4f0:	str	r1, [fp, #-12]
   1a4f4:	ldr	r3, [fp, #-8]
   1a4f8:	ldr	r2, [fp, #-12]
   1a4fc:	mov	r1, r2
   1a500:	mov	r0, r3
   1a504:	bl	19fa8 <_start@@Base+0x7590>
   1a508:	ldr	r3, [fp, #-12]
   1a50c:	ldrsb	r2, [r3, #2]
   1a510:	ldr	r3, [fp, #-8]
   1a514:	strb	r2, [r3, #2]
   1a518:	ldr	r3, [fp, #-8]
   1a51c:	mov	r0, r3
   1a520:	sub	sp, fp, #4
   1a524:	pop	{fp, pc}
   1a528:	push	{fp, lr}
   1a52c:	add	fp, sp, #4
   1a530:	sub	sp, sp, #8
   1a534:	str	r0, [fp, #-8]
   1a538:	mvn	r3, #-1073741824	; 0xc0000000
   1a53c:	mov	r2, #2
   1a540:	mov	r1, #4
   1a544:	ldr	r0, [fp, #-8]
   1a548:	bl	2a72c <flatcc_builder_start_vector@@Base>
   1a54c:	mov	r3, r0
   1a550:	mov	r0, r3
   1a554:	sub	sp, fp, #4
   1a558:	pop	{fp, pc}
   1a55c:	push	{fp, lr}
   1a560:	add	fp, sp, #4
   1a564:	sub	sp, sp, #8
   1a568:	str	r0, [fp, #-8]
   1a56c:	ldr	r0, [fp, #-8]
   1a570:	bl	2b984 <flatcc_builder_end_vector@@Base>
   1a574:	mov	r3, r0
   1a578:	mov	r0, r3
   1a57c:	sub	sp, fp, #4
   1a580:	pop	{fp, pc}
   1a584:	push	{fp, lr}
   1a588:	add	fp, sp, #4
   1a58c:	sub	sp, sp, #16
   1a590:	str	r0, [fp, #-8]
   1a594:	str	r1, [fp, #-12]
   1a598:	ldr	r0, [fp, #-12]
   1a59c:	bl	1494c <_start@@Base+0x1f34>
   1a5a0:	mov	r2, r0
   1a5a4:	mvn	r3, #-1073741824	; 0xc0000000
   1a5a8:	str	r3, [sp, #4]
   1a5ac:	mov	r3, #2
   1a5b0:	str	r3, [sp]
   1a5b4:	mov	r3, #4
   1a5b8:	ldr	r1, [fp, #-12]
   1a5bc:	ldr	r0, [fp, #-8]
   1a5c0:	bl	2b764 <flatcc_builder_create_vector@@Base>
   1a5c4:	mov	r3, r0
   1a5c8:	mov	r0, r3
   1a5cc:	sub	sp, fp, #4
   1a5d0:	pop	{fp, pc}
   1a5d4:	push	{fp, lr}
   1a5d8:	add	fp, sp, #4
   1a5dc:	sub	sp, sp, #32
   1a5e0:	str	r0, [fp, #-16]
   1a5e4:	str	r1, [fp, #-20]	; 0xffffffec
   1a5e8:	str	r2, [fp, #-24]	; 0xffffffe8
   1a5ec:	str	r3, [fp, #-28]	; 0xffffffe4
   1a5f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a5f4:	bl	1494c <_start@@Base+0x1f34>
   1a5f8:	str	r0, [fp, #-8]
   1a5fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a600:	ldr	r3, [fp, #-8]
   1a604:	cmp	r2, r3
   1a608:	bcc	1a614 <_start@@Base+0x7bfc>
   1a60c:	ldr	r3, [fp, #-8]
   1a610:	str	r3, [fp, #-24]	; 0xffffffe8
   1a614:	ldr	r2, [fp, #-8]
   1a618:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a61c:	sub	r3, r2, r3
   1a620:	str	r3, [fp, #-8]
   1a624:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a628:	ldr	r3, [fp, #-8]
   1a62c:	cmp	r2, r3
   1a630:	bls	1a63c <_start@@Base+0x7c24>
   1a634:	ldr	r3, [fp, #-8]
   1a638:	str	r3, [fp, #-28]	; 0xffffffe4
   1a63c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a640:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a644:	bl	14888 <_start@@Base+0x1e70>
   1a648:	mov	r1, r0
   1a64c:	mvn	r3, #-1073741824	; 0xc0000000
   1a650:	str	r3, [sp, #4]
   1a654:	mov	r3, #2
   1a658:	str	r3, [sp]
   1a65c:	mov	r3, #4
   1a660:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a664:	ldr	r0, [fp, #-16]
   1a668:	bl	2b764 <flatcc_builder_create_vector@@Base>
   1a66c:	mov	r3, r0
   1a670:	mov	r0, r3
   1a674:	sub	sp, fp, #4
   1a678:	pop	{fp, pc}
   1a67c:	push	{fp, lr}
   1a680:	add	fp, sp, #4
   1a684:	sub	sp, sp, #16
   1a688:	str	r0, [fp, #-16]
   1a68c:	str	r1, [fp, #-20]	; 0xffffffec
   1a690:	mov	r1, #1
   1a694:	ldr	r0, [fp, #-16]
   1a698:	bl	29e3c <flatcc_builder_extend_vector@@Base>
   1a69c:	str	r0, [fp, #-8]
   1a6a0:	ldr	r3, [fp, #-8]
   1a6a4:	cmp	r3, #0
   1a6a8:	beq	1a6cc <_start@@Base+0x7cb4>
   1a6ac:	bl	14930 <_start@@Base+0x1f18>
   1a6b0:	mov	r3, r0
   1a6b4:	mov	r2, r3
   1a6b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a6bc:	ldr	r0, [fp, #-8]
   1a6c0:	bl	12930 <memcpy@plt>
   1a6c4:	ldr	r3, [fp, #-8]
   1a6c8:	b	1a6d0 <_start@@Base+0x7cb8>
   1a6cc:	mov	r3, #0
   1a6d0:	mov	r0, r3
   1a6d4:	sub	sp, fp, #4
   1a6d8:	pop	{fp, pc}
   1a6dc:	push	{fp}		; (str fp, [sp, #-4]!)
   1a6e0:	add	fp, sp, #0
   1a6e4:	sub	sp, sp, #12
   1a6e8:	str	r0, [fp, #-8]
   1a6ec:	str	r1, [fp, #-12]
   1a6f0:	ldr	r3, [fp, #-8]
   1a6f4:	mov	r0, r3
   1a6f8:	add	sp, fp, #0
   1a6fc:	pop	{fp}		; (ldr fp, [sp], #4)
   1a700:	bx	lr
   1a704:	push	{fp, lr}
   1a708:	add	fp, sp, #4
   1a70c:	sub	sp, sp, #32
   1a710:	str	r0, [fp, #-8]
   1a714:	vstr	s0, [fp, #-12]
   1a718:	vstr	s1, [fp, #-16]
   1a71c:	vstr	s2, [fp, #-20]	; 0xffffffec
   1a720:	vstr	d2, [fp, #-28]	; 0xffffffe4
   1a724:	mov	r0, r1
   1a728:	mov	r1, r3
   1a72c:	mov	r3, r0
   1a730:	strb	r3, [fp, #-29]	; 0xffffffe3
   1a734:	strh	r2, [fp, #-32]	; 0xffffffe0
   1a738:	mov	r3, r1
   1a73c:	strb	r3, [fp, #-30]	; 0xffffffe2
   1a740:	ldr	r3, [fp, #-8]
   1a744:	vldr	s0, [fp, #-12]
   1a748:	mov	r0, r3
   1a74c:	bl	1a0e4 <_start@@Base+0x76cc>
   1a750:	ldr	r3, [fp, #-8]
   1a754:	add	r3, r3, #4
   1a758:	vldr	s0, [fp, #-16]
   1a75c:	mov	r0, r3
   1a760:	bl	1a0e4 <_start@@Base+0x76cc>
   1a764:	ldr	r3, [fp, #-8]
   1a768:	add	r3, r3, #8
   1a76c:	vldr	s0, [fp, #-20]	; 0xffffffec
   1a770:	mov	r0, r3
   1a774:	bl	1a0e4 <_start@@Base+0x76cc>
   1a778:	ldr	r3, [fp, #-8]
   1a77c:	add	r3, r3, #16
   1a780:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1a784:	mov	r0, r3
   1a788:	bl	1a15c <_start@@Base+0x7744>
   1a78c:	ldr	r3, [fp, #-8]
   1a790:	ldrb	r2, [fp, #-29]	; 0xffffffe3
   1a794:	strb	r2, [r3, #24]
   1a798:	ldr	r3, [fp, #-8]
   1a79c:	add	r3, r3, #26
   1a7a0:	ldrsb	r2, [fp, #-30]	; 0xffffffe2
   1a7a4:	ldrsh	r1, [fp, #-32]	; 0xffffffe0
   1a7a8:	mov	r0, r3
   1a7ac:	bl	1a490 <_start@@Base+0x7a78>
   1a7b0:	ldr	r3, [fp, #-8]
   1a7b4:	mov	r0, r3
   1a7b8:	sub	sp, fp, #4
   1a7bc:	pop	{fp, pc}
   1a7c0:	push	{fp, lr}
   1a7c4:	add	fp, sp, #4
   1a7c8:	sub	sp, sp, #8
   1a7cc:	str	r0, [fp, #-8]
   1a7d0:	str	r1, [fp, #-12]
   1a7d4:	ldr	r3, [fp, #-8]
   1a7d8:	ldr	r2, [fp, #-12]
   1a7dc:	mov	r1, r2
   1a7e0:	mov	r0, r3
   1a7e4:	bl	1a0a4 <_start@@Base+0x768c>
   1a7e8:	ldr	r3, [fp, #-8]
   1a7ec:	add	r2, r3, #4
   1a7f0:	ldr	r3, [fp, #-12]
   1a7f4:	add	r3, r3, #4
   1a7f8:	mov	r1, r3
   1a7fc:	mov	r0, r2
   1a800:	bl	1a0a4 <_start@@Base+0x768c>
   1a804:	ldr	r3, [fp, #-8]
   1a808:	add	r2, r3, #8
   1a80c:	ldr	r3, [fp, #-12]
   1a810:	add	r3, r3, #8
   1a814:	mov	r1, r3
   1a818:	mov	r0, r2
   1a81c:	bl	1a0a4 <_start@@Base+0x768c>
   1a820:	ldr	r3, [fp, #-8]
   1a824:	add	r2, r3, #16
   1a828:	ldr	r3, [fp, #-12]
   1a82c:	add	r3, r3, #16
   1a830:	mov	r1, r3
   1a834:	mov	r0, r2
   1a838:	bl	1a11c <_start@@Base+0x7704>
   1a83c:	ldr	r3, [fp, #-12]
   1a840:	ldrsb	r2, [r3, #24]
   1a844:	ldr	r3, [fp, #-8]
   1a848:	strb	r2, [r3, #24]
   1a84c:	ldr	r3, [fp, #-8]
   1a850:	add	r2, r3, #26
   1a854:	ldr	r3, [fp, #-12]
   1a858:	add	r3, r3, #26
   1a85c:	mov	r1, r3
   1a860:	mov	r0, r2
   1a864:	bl	1a4e0 <_start@@Base+0x7ac8>
   1a868:	ldr	r3, [fp, #-8]
   1a86c:	mov	r0, r3
   1a870:	sub	sp, fp, #4
   1a874:	pop	{fp, pc}
   1a878:	push	{fp}		; (str fp, [sp, #-4]!)
   1a87c:	add	fp, sp, #0
   1a880:	sub	sp, sp, #12
   1a884:	str	r0, [fp, #-8]
   1a888:	ldr	r3, [fp, #-8]
   1a88c:	mov	r0, r3
   1a890:	add	sp, fp, #0
   1a894:	pop	{fp}		; (ldr fp, [sp], #4)
   1a898:	bx	lr
   1a89c:	push	{fp, lr}
   1a8a0:	add	fp, sp, #4
   1a8a4:	sub	sp, sp, #8
   1a8a8:	str	r0, [fp, #-8]
   1a8ac:	bl	14a30 <_start@@Base+0x2018>
   1a8b0:	mov	r3, r0
   1a8b4:	mov	r2, r3
   1a8b8:	mov	r1, #0
   1a8bc:	ldr	r0, [fp, #-8]
   1a8c0:	bl	129c0 <memset@plt>
   1a8c4:	mov	r3, r0
   1a8c8:	mov	r0, r3
   1a8cc:	sub	sp, fp, #4
   1a8d0:	pop	{fp, pc}
   1a8d4:	push	{fp, lr}
   1a8d8:	add	fp, sp, #4
   1a8dc:	sub	sp, sp, #8
   1a8e0:	str	r0, [fp, #-8]
   1a8e4:	mov	r2, #16
   1a8e8:	mov	r1, #32
   1a8ec:	ldr	r0, [fp, #-8]
   1a8f0:	bl	29c30 <flatcc_builder_start_struct@@Base>
   1a8f4:	mov	r3, r0
   1a8f8:	mov	r0, r3
   1a8fc:	sub	sp, fp, #4
   1a900:	pop	{fp, pc}
   1a904:	push	{fp, lr}
   1a908:	add	fp, sp, #4
   1a90c:	sub	sp, sp, #8
   1a910:	str	r0, [fp, #-8]
   1a914:	ldr	r0, [fp, #-8]
   1a918:	bl	29cd0 <flatcc_builder_end_struct@@Base>
   1a91c:	mov	r3, r0
   1a920:	mov	r0, r3
   1a924:	sub	sp, fp, #4
   1a928:	pop	{fp, pc}
   1a92c:	push	{fp, lr}
   1a930:	add	fp, sp, #4
   1a934:	sub	sp, sp, #40	; 0x28
   1a938:	str	r0, [fp, #-16]
   1a93c:	vstr	s0, [fp, #-20]	; 0xffffffec
   1a940:	vstr	s1, [fp, #-24]	; 0xffffffe8
   1a944:	vstr	s2, [fp, #-28]	; 0xffffffe4
   1a948:	vstr	d2, [fp, #-36]	; 0xffffffdc
   1a94c:	mov	r0, r1
   1a950:	mov	r1, r3
   1a954:	mov	r3, r0
   1a958:	strb	r3, [fp, #-37]	; 0xffffffdb
   1a95c:	strh	r2, [fp, #-40]	; 0xffffffd8
   1a960:	mov	r3, r1
   1a964:	strb	r3, [fp, #-38]	; 0xffffffda
   1a968:	ldr	r0, [fp, #-16]
   1a96c:	bl	1a8d4 <_start@@Base+0x7ebc>
   1a970:	str	r0, [fp, #-8]
   1a974:	ldr	r3, [fp, #-8]
   1a978:	cmp	r3, #0
   1a97c:	bne	1a988 <_start@@Base+0x7f70>
   1a980:	mov	r3, #0
   1a984:	b	1a9b8 <_start@@Base+0x7fa0>
   1a988:	ldrsb	r3, [fp, #-38]	; 0xffffffda
   1a98c:	ldrsh	r2, [fp, #-40]	; 0xffffffd8
   1a990:	ldrsb	r1, [fp, #-37]	; 0xffffffdb
   1a994:	vldr	d2, [fp, #-36]	; 0xffffffdc
   1a998:	vldr	s2, [fp, #-28]	; 0xffffffe4
   1a99c:	vldr	s1, [fp, #-24]	; 0xffffffe8
   1a9a0:	vldr	s0, [fp, #-20]	; 0xffffffec
   1a9a4:	ldr	r0, [fp, #-8]
   1a9a8:	bl	1a704 <_start@@Base+0x7cec>
   1a9ac:	ldr	r0, [fp, #-16]
   1a9b0:	bl	1a904 <_start@@Base+0x7eec>
   1a9b4:	mov	r3, r0
   1a9b8:	mov	r0, r3
   1a9bc:	sub	sp, fp, #4
   1a9c0:	pop	{fp, pc}
   1a9c4:	push	{fp, lr}
   1a9c8:	add	fp, sp, #4
   1a9cc:	sub	sp, sp, #40	; 0x28
   1a9d0:	str	r0, [fp, #-8]
   1a9d4:	vstr	s0, [fp, #-12]
   1a9d8:	vstr	s1, [fp, #-16]
   1a9dc:	vstr	s2, [fp, #-20]	; 0xffffffec
   1a9e0:	vstr	d2, [fp, #-28]	; 0xffffffe4
   1a9e4:	mov	r0, r1
   1a9e8:	mov	r1, r3
   1a9ec:	mov	r3, r0
   1a9f0:	strb	r3, [fp, #-29]	; 0xffffffe3
   1a9f4:	strh	r2, [fp, #-32]	; 0xffffffe0
   1a9f8:	mov	r3, r1
   1a9fc:	strb	r3, [fp, #-30]	; 0xffffffe2
   1aa00:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
   1aa04:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
   1aa08:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
   1aa0c:	vldr	d2, [fp, #-28]	; 0xffffffe4
   1aa10:	vldr	s2, [fp, #-20]	; 0xffffffec
   1aa14:	vldr	s1, [fp, #-16]
   1aa18:	vldr	s0, [fp, #-12]
   1aa1c:	ldr	r0, [fp, #-8]
   1aa20:	bl	1a92c <_start@@Base+0x7f14>
   1aa24:	mov	r2, r0
   1aa28:	mov	r3, #0
   1aa2c:	str	r3, [sp, #4]
   1aa30:	mov	r3, #16
   1aa34:	str	r3, [sp]
   1aa38:	mov	r3, r2
   1aa3c:	mov	r2, #0
   1aa40:	ldr	r1, [pc, #24]	; 1aa60 <_start@@Base+0x8048>
   1aa44:	add	r1, pc, r1
   1aa48:	ldr	r0, [fp, #-8]
   1aa4c:	bl	29420 <flatcc_builder_create_buffer@@Base>
   1aa50:	mov	r3, r0
   1aa54:	mov	r0, r3
   1aa58:	sub	sp, fp, #4
   1aa5c:	pop	{fp, pc}
   1aa60:	andeq	r6, r1, r4, asr #2
   1aa64:	push	{fp, lr}
   1aa68:	add	fp, sp, #4
   1aa6c:	sub	sp, sp, #40	; 0x28
   1aa70:	str	r0, [fp, #-8]
   1aa74:	vstr	s0, [fp, #-12]
   1aa78:	vstr	s1, [fp, #-16]
   1aa7c:	vstr	s2, [fp, #-20]	; 0xffffffec
   1aa80:	vstr	d2, [fp, #-28]	; 0xffffffe4
   1aa84:	mov	r0, r1
   1aa88:	mov	r1, r3
   1aa8c:	mov	r3, r0
   1aa90:	strb	r3, [fp, #-29]	; 0xffffffe3
   1aa94:	strh	r2, [fp, #-32]	; 0xffffffe0
   1aa98:	mov	r3, r1
   1aa9c:	strb	r3, [fp, #-30]	; 0xffffffe2
   1aaa0:	ldrsb	r3, [fp, #-30]	; 0xffffffe2
   1aaa4:	ldrsh	r2, [fp, #-32]	; 0xffffffe0
   1aaa8:	ldrsb	r1, [fp, #-29]	; 0xffffffe3
   1aaac:	vldr	d2, [fp, #-28]	; 0xffffffe4
   1aab0:	vldr	s2, [fp, #-20]	; 0xffffffec
   1aab4:	vldr	s1, [fp, #-16]
   1aab8:	vldr	s0, [fp, #-12]
   1aabc:	ldr	r0, [fp, #-8]
   1aac0:	bl	1a92c <_start@@Base+0x7f14>
   1aac4:	mov	r2, r0
   1aac8:	mov	r3, #0
   1aacc:	str	r3, [sp, #4]
   1aad0:	mov	r3, #16
   1aad4:	str	r3, [sp]
   1aad8:	mov	r3, r2
   1aadc:	mov	r2, #0
   1aae0:	ldr	r1, [pc, #24]	; 1ab00 <_start@@Base+0x80e8>
   1aae4:	add	r1, pc, r1
   1aae8:	ldr	r0, [fp, #-8]
   1aaec:	bl	29420 <flatcc_builder_create_buffer@@Base>
   1aaf0:	mov	r3, r0
   1aaf4:	mov	r0, r3
   1aaf8:	sub	sp, fp, #4
   1aafc:	pop	{fp, pc}
   1ab00:	andeq	r6, r1, r0, lsl #3
   1ab04:	push	{fp, lr}
   1ab08:	add	fp, sp, #4
   1ab0c:	sub	sp, sp, #8
   1ab10:	str	r0, [fp, #-8]
   1ab14:	mov	r3, r1
   1ab18:	strh	r3, [fp, #-10]
   1ab1c:	ldr	r3, [fp, #-8]
   1ab20:	ldrh	r2, [fp, #-10]
   1ab24:	mov	r1, r2
   1ab28:	mov	r0, r3
   1ab2c:	bl	19ef0 <_start@@Base+0x74d8>
   1ab30:	ldr	r3, [fp, #-8]
   1ab34:	mov	r0, r3
   1ab38:	sub	sp, fp, #4
   1ab3c:	pop	{fp, pc}
   1ab40:	push	{fp, lr}
   1ab44:	add	fp, sp, #4
   1ab48:	sub	sp, sp, #8
   1ab4c:	str	r0, [fp, #-8]
   1ab50:	mov	r2, #2
   1ab54:	mov	r1, #2
   1ab58:	ldr	r0, [fp, #-8]
   1ab5c:	bl	29c30 <flatcc_builder_start_struct@@Base>
   1ab60:	mov	r3, r0
   1ab64:	mov	r0, r3
   1ab68:	sub	sp, fp, #4
   1ab6c:	pop	{fp, pc}
   1ab70:	push	{fp, lr}
   1ab74:	add	fp, sp, #4
   1ab78:	sub	sp, sp, #8
   1ab7c:	str	r0, [fp, #-8]
   1ab80:	ldr	r0, [fp, #-8]
   1ab84:	bl	29cd0 <flatcc_builder_end_struct@@Base>
   1ab88:	mov	r3, r0
   1ab8c:	mov	r0, r3
   1ab90:	sub	sp, fp, #4
   1ab94:	pop	{fp, pc}
   1ab98:	push	{fp, lr}
   1ab9c:	add	fp, sp, #4
   1aba0:	sub	sp, sp, #16
   1aba4:	str	r0, [fp, #-16]
   1aba8:	mov	r3, r1
   1abac:	strh	r3, [fp, #-18]	; 0xffffffee
   1abb0:	ldr	r0, [fp, #-16]
   1abb4:	bl	1ab40 <_start@@Base+0x8128>
   1abb8:	str	r0, [fp, #-8]
   1abbc:	ldr	r3, [fp, #-8]
   1abc0:	cmp	r3, #0
   1abc4:	bne	1abd0 <_start@@Base+0x81b8>
   1abc8:	mov	r3, #0
   1abcc:	b	1abec <_start@@Base+0x81d4>
   1abd0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1abd4:	mov	r1, r3
   1abd8:	ldr	r0, [fp, #-8]
   1abdc:	bl	1ab04 <_start@@Base+0x80ec>
   1abe0:	ldr	r0, [fp, #-16]
   1abe4:	bl	1ab70 <_start@@Base+0x8158>
   1abe8:	mov	r3, r0
   1abec:	mov	r0, r3
   1abf0:	sub	sp, fp, #4
   1abf4:	pop	{fp, pc}
   1abf8:	push	{fp, lr}
   1abfc:	add	fp, sp, #4
   1ac00:	sub	sp, sp, #8
   1ac04:	str	r0, [fp, #-8]
   1ac08:	str	r1, [fp, #-12]
   1ac0c:	ldr	r3, [fp, #-8]
   1ac10:	ldr	r1, [fp, #-12]
   1ac14:	mov	r0, r3
   1ac18:	bl	1a030 <_start@@Base+0x7618>
   1ac1c:	ldr	r3, [fp, #-8]
   1ac20:	mov	r0, r3
   1ac24:	sub	sp, fp, #4
   1ac28:	pop	{fp, pc}
   1ac2c:	push	{fp, lr}
   1ac30:	add	fp, sp, #4
   1ac34:	sub	sp, sp, #8
   1ac38:	str	r0, [fp, #-8]
   1ac3c:	mov	r2, #4
   1ac40:	mov	r1, #4
   1ac44:	ldr	r0, [fp, #-8]
   1ac48:	bl	29c30 <flatcc_builder_start_struct@@Base>
   1ac4c:	mov	r3, r0
   1ac50:	mov	r0, r3
   1ac54:	sub	sp, fp, #4
   1ac58:	pop	{fp, pc}
   1ac5c:	push	{fp, lr}
   1ac60:	add	fp, sp, #4
   1ac64:	sub	sp, sp, #8
   1ac68:	str	r0, [fp, #-8]
   1ac6c:	ldr	r0, [fp, #-8]
   1ac70:	bl	29cd0 <flatcc_builder_end_struct@@Base>
   1ac74:	mov	r3, r0
   1ac78:	mov	r0, r3
   1ac7c:	sub	sp, fp, #4
   1ac80:	pop	{fp, pc}
   1ac84:	push	{fp, lr}
   1ac88:	add	fp, sp, #4
   1ac8c:	sub	sp, sp, #8
   1ac90:	str	r0, [fp, #-8]
   1ac94:	ldr	r0, [fp, #-8]
   1ac98:	bl	29cd0 <flatcc_builder_end_struct@@Base>
   1ac9c:	mov	r3, r0
   1aca0:	mov	r0, r3
   1aca4:	sub	sp, fp, #4
   1aca8:	pop	{fp, pc}
   1acac:	push	{fp, lr}
   1acb0:	add	fp, sp, #4
   1acb4:	sub	sp, sp, #16
   1acb8:	str	r0, [fp, #-16]
   1acbc:	str	r1, [fp, #-20]	; 0xffffffec
   1acc0:	ldr	r0, [fp, #-16]
   1acc4:	bl	1ac2c <_start@@Base+0x8214>
   1acc8:	str	r0, [fp, #-8]
   1accc:	ldr	r3, [fp, #-8]
   1acd0:	cmp	r3, #0
   1acd4:	bne	1ace0 <_start@@Base+0x82c8>
   1acd8:	mov	r3, #0
   1acdc:	b	1acf8 <_start@@Base+0x82e0>
   1ace0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ace4:	ldr	r0, [fp, #-8]
   1ace8:	bl	1abf8 <_start@@Base+0x81e0>
   1acec:	ldr	r0, [fp, #-16]
   1acf0:	bl	1ac84 <_start@@Base+0x826c>
   1acf4:	mov	r3, r0
   1acf8:	mov	r0, r3
   1acfc:	sub	sp, fp, #4
   1ad00:	pop	{fp, pc}
   1ad04:	push	{fp, lr}
   1ad08:	add	fp, sp, #4
   1ad0c:	sub	sp, sp, #8
   1ad10:	str	r0, [fp, #-8]
   1ad14:	mov	r1, #1
   1ad18:	ldr	r0, [fp, #-8]
   1ad1c:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1ad20:	mov	r3, r0
   1ad24:	mov	r0, r3
   1ad28:	sub	sp, fp, #4
   1ad2c:	pop	{fp, pc}
   1ad30:	push	{fp, lr}
   1ad34:	add	fp, sp, #4
   1ad38:	sub	sp, sp, #8
   1ad3c:	str	r0, [fp, #-8]
   1ad40:	mov	r2, #0
   1ad44:	ldr	r3, [pc, #80]	; 1ad9c <_start@@Base+0x8384>
   1ad48:	add	r3, pc, r3
   1ad4c:	mov	r1, r3
   1ad50:	ldr	r0, [fp, #-8]
   1ad54:	bl	2b43c <flatcc_builder_check_required@@Base>
   1ad58:	mov	r3, r0
   1ad5c:	cmp	r3, #0
   1ad60:	bne	1ad84 <_start@@Base+0x836c>
   1ad64:	ldr	r3, [pc, #52]	; 1ada0 <_start@@Base+0x8388>
   1ad68:	add	r3, pc, r3
   1ad6c:	mov	r2, #215	; 0xd7
   1ad70:	ldr	r1, [pc, #44]	; 1ada4 <_start@@Base+0x838c>
   1ad74:	add	r1, pc, r1
   1ad78:	ldr	r0, [pc, #40]	; 1ada8 <_start@@Base+0x8390>
   1ad7c:	add	r0, pc, r0
   1ad80:	bl	12a08 <__assert_fail@plt>
   1ad84:	ldr	r0, [fp, #-8]
   1ad88:	bl	2b528 <flatcc_builder_end_table@@Base>
   1ad8c:	mov	r3, r0
   1ad90:	mov	r0, r3
   1ad94:	sub	sp, fp, #4
   1ad98:	pop	{fp, pc}
   1ad9c:	andeq	r5, r1, r0, lsr pc
   1ada0:	andeq	r9, r1, r4, asr #4
   1ada4:	andeq	r5, r1, r8, lsl #30
   1ada8:	andeq	r5, r1, ip, ror pc
   1adac:	push	{fp, lr}
   1adb0:	add	fp, sp, #4
   1adb4:	sub	sp, sp, #8
   1adb8:	str	r0, [fp, #-8]
   1adbc:	mov	r1, #4
   1adc0:	ldr	r0, [fp, #-8]
   1adc4:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1adc8:	mov	r3, r0
   1adcc:	mov	r0, r3
   1add0:	sub	sp, fp, #4
   1add4:	pop	{fp, pc}
   1add8:	push	{fp, lr}
   1addc:	add	fp, sp, #4
   1ade0:	sub	sp, sp, #8
   1ade4:	str	r0, [fp, #-8]
   1ade8:	mov	r2, #0
   1adec:	ldr	r3, [pc, #80]	; 1ae44 <_start@@Base+0x842c>
   1adf0:	add	r3, pc, r3
   1adf4:	mov	r1, r3
   1adf8:	ldr	r0, [fp, #-8]
   1adfc:	bl	2b43c <flatcc_builder_check_required@@Base>
   1ae00:	mov	r3, r0
   1ae04:	cmp	r3, #0
   1ae08:	bne	1ae2c <_start@@Base+0x8414>
   1ae0c:	ldr	r3, [pc, #52]	; 1ae48 <_start@@Base+0x8430>
   1ae10:	add	r3, pc, r3
   1ae14:	mov	r2, #217	; 0xd9
   1ae18:	ldr	r1, [pc, #44]	; 1ae4c <_start@@Base+0x8434>
   1ae1c:	add	r1, pc, r1
   1ae20:	ldr	r0, [pc, #40]	; 1ae50 <_start@@Base+0x8438>
   1ae24:	add	r0, pc, r0
   1ae28:	bl	12a08 <__assert_fail@plt>
   1ae2c:	ldr	r0, [fp, #-8]
   1ae30:	bl	2b528 <flatcc_builder_end_table@@Base>
   1ae34:	mov	r3, r0
   1ae38:	mov	r0, r3
   1ae3c:	sub	sp, fp, #4
   1ae40:	pop	{fp, pc}
   1ae44:	andeq	r5, r1, r8, asr #31
   1ae48:	andeq	r9, r1, r4, asr #11
   1ae4c:	andeq	r5, r1, r0, ror #28
   1ae50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ae54:	push	{fp, lr}
   1ae58:	add	fp, sp, #4
   1ae5c:	sub	sp, sp, #8
   1ae60:	str	r0, [fp, #-8]
   1ae64:	mov	r1, #3
   1ae68:	ldr	r0, [fp, #-8]
   1ae6c:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1ae70:	mov	r3, r0
   1ae74:	mov	r0, r3
   1ae78:	sub	sp, fp, #4
   1ae7c:	pop	{fp, pc}
   1ae80:	push	{fp, lr}
   1ae84:	add	fp, sp, #4
   1ae88:	sub	sp, sp, #8
   1ae8c:	str	r0, [fp, #-8]
   1ae90:	mov	r2, #0
   1ae94:	ldr	r3, [pc, #80]	; 1aeec <_start@@Base+0x84d4>
   1ae98:	add	r3, pc, r3
   1ae9c:	mov	r1, r3
   1aea0:	ldr	r0, [fp, #-8]
   1aea4:	bl	2b43c <flatcc_builder_check_required@@Base>
   1aea8:	mov	r3, r0
   1aeac:	cmp	r3, #0
   1aeb0:	bne	1aed4 <_start@@Base+0x84bc>
   1aeb4:	ldr	r3, [pc, #52]	; 1aef0 <_start@@Base+0x84d8>
   1aeb8:	add	r3, pc, r3
   1aebc:	mov	r2, #221	; 0xdd
   1aec0:	ldr	r1, [pc, #44]	; 1aef4 <_start@@Base+0x84dc>
   1aec4:	add	r1, pc, r1
   1aec8:	ldr	r0, [pc, #40]	; 1aef8 <_start@@Base+0x84e0>
   1aecc:	add	r0, pc, r0
   1aed0:	bl	12a08 <__assert_fail@plt>
   1aed4:	ldr	r0, [fp, #-8]
   1aed8:	bl	2b528 <flatcc_builder_end_table@@Base>
   1aedc:	mov	r3, r0
   1aee0:	mov	r0, r3
   1aee4:	sub	sp, fp, #4
   1aee8:	pop	{fp, pc}
   1aeec:	strdeq	r5, [r1], -ip
   1aef0:	andeq	r9, r1, r8, ror r4
   1aef4:			; <UNDEFINED> instruction: 0x00015db8
   1aef8:	andeq	r5, r1, ip, asr #31
   1aefc:	push	{fp, lr}
   1af00:	add	fp, sp, #4
   1af04:	sub	sp, sp, #8
   1af08:	str	r0, [fp, #-8]
   1af0c:	mov	r1, #4
   1af10:	ldr	r0, [fp, #-8]
   1af14:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1af18:	mov	r3, r0
   1af1c:	mov	r0, r3
   1af20:	sub	sp, fp, #4
   1af24:	pop	{fp, pc}
   1af28:	push	{fp, lr}
   1af2c:	add	fp, sp, #4
   1af30:	sub	sp, sp, #8
   1af34:	str	r0, [fp, #-8]
   1af38:	mov	r2, #0
   1af3c:	ldr	r3, [pc, #80]	; 1af94 <_start@@Base+0x857c>
   1af40:	add	r3, pc, r3
   1af44:	mov	r1, r3
   1af48:	ldr	r0, [fp, #-8]
   1af4c:	bl	2b43c <flatcc_builder_check_required@@Base>
   1af50:	mov	r3, r0
   1af54:	cmp	r3, #0
   1af58:	bne	1af7c <_start@@Base+0x8564>
   1af5c:	ldr	r3, [pc, #52]	; 1af98 <_start@@Base+0x8580>
   1af60:	add	r3, pc, r3
   1af64:	mov	r2, #223	; 0xdf
   1af68:	ldr	r1, [pc, #44]	; 1af9c <_start@@Base+0x8584>
   1af6c:	add	r1, pc, r1
   1af70:	ldr	r0, [pc, #40]	; 1afa0 <_start@@Base+0x8588>
   1af74:	add	r0, pc, r0
   1af78:	bl	12a08 <__assert_fail@plt>
   1af7c:	ldr	r0, [fp, #-8]
   1af80:	bl	2b528 <flatcc_builder_end_table@@Base>
   1af84:	mov	r3, r0
   1af88:	mov	r0, r3
   1af8c:	sub	sp, fp, #4
   1af90:	pop	{fp, pc}
   1af94:	strdeq	r5, [r1], -r4
   1af98:	andeq	r9, r1, r0, lsr #9
   1af9c:	andeq	r5, r1, r0, lsl sp
   1afa0:	andeq	r5, r1, r4, asr #31
   1afa4:	push	{fp, lr}
   1afa8:	add	fp, sp, #4
   1afac:	sub	sp, sp, #8
   1afb0:	str	r0, [fp, #-8]
   1afb4:	mov	r1, #36	; 0x24
   1afb8:	ldr	r0, [fp, #-8]
   1afbc:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1afc0:	mov	r3, r0
   1afc4:	mov	r0, r3
   1afc8:	sub	sp, fp, #4
   1afcc:	pop	{fp, pc}
   1afd0:	push	{fp, lr}
   1afd4:	add	fp, sp, #4
   1afd8:	sub	sp, sp, #8
   1afdc:	str	r0, [fp, #-8]
   1afe0:	mov	r2, #1
   1afe4:	ldr	r3, [pc, #80]	; 1b03c <_start@@Base+0x8624>
   1afe8:	add	r3, pc, r3
   1afec:	mov	r1, r3
   1aff0:	ldr	r0, [fp, #-8]
   1aff4:	bl	2b43c <flatcc_builder_check_required@@Base>
   1aff8:	mov	r3, r0
   1affc:	cmp	r3, #0
   1b000:	bne	1b024 <_start@@Base+0x860c>
   1b004:	ldr	r3, [pc, #52]	; 1b040 <_start@@Base+0x8628>
   1b008:	add	r3, pc, r3
   1b00c:	mov	r2, #235	; 0xeb
   1b010:	ldr	r1, [pc, #44]	; 1b044 <_start@@Base+0x862c>
   1b014:	add	r1, pc, r1
   1b018:	ldr	r0, [pc, #40]	; 1b048 <_start@@Base+0x8630>
   1b01c:	add	r0, pc, r0
   1b020:	bl	12a08 <__assert_fail@plt>
   1b024:	ldr	r0, [fp, #-8]
   1b028:	bl	2b528 <flatcc_builder_end_table@@Base>
   1b02c:	mov	r3, r0
   1b030:	mov	r0, r3
   1b034:	sub	sp, fp, #4
   1b038:	pop	{fp, pc}
   1b03c:	strdeq	r5, [r1], -ip
   1b040:	andeq	r8, r1, r0, ror #30
   1b044:	andeq	r5, r1, r8, ror #24
   1b048:	andeq	r5, r1, ip, asr #31
   1b04c:	push	{fp, lr}
   1b050:	add	fp, sp, #4
   1b054:	sub	sp, sp, #8
   1b058:	str	r0, [fp, #-8]
   1b05c:	str	r1, [fp, #-12]
   1b060:	ldr	r3, [fp, #-12]
   1b064:	cmp	r3, #0
   1b068:	beq	1b080 <_start@@Base+0x8668>
   1b06c:	ldr	r1, [fp, #-12]
   1b070:	ldr	r0, [fp, #-8]
   1b074:	bl	2a0e0 <flatcc_builder_offset_vector_push@@Base>
   1b078:	mov	r3, r0
   1b07c:	b	1b084 <_start@@Base+0x866c>
   1b080:	mov	r3, #0
   1b084:	mov	r0, r3
   1b088:	sub	sp, fp, #4
   1b08c:	pop	{fp, pc}
   1b090:	push	{fp, lr}
   1b094:	add	fp, sp, #4
   1b098:	sub	sp, sp, #8
   1b09c:	str	r0, [fp, #-8]
   1b0a0:	mov	r1, #12
   1b0a4:	ldr	r0, [fp, #-8]
   1b0a8:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1b0ac:	mov	r3, r0
   1b0b0:	mov	r0, r3
   1b0b4:	sub	sp, fp, #4
   1b0b8:	pop	{fp, pc}
   1b0bc:	push	{fp, lr}
   1b0c0:	add	fp, sp, #4
   1b0c4:	sub	sp, sp, #8
   1b0c8:	str	r0, [fp, #-8]
   1b0cc:	mov	r2, #0
   1b0d0:	ldr	r3, [pc, #80]	; 1b128 <_start@@Base+0x8710>
   1b0d4:	add	r3, pc, r3
   1b0d8:	mov	r1, r3
   1b0dc:	ldr	r0, [fp, #-8]
   1b0e0:	bl	2b43c <flatcc_builder_check_required@@Base>
   1b0e4:	mov	r3, r0
   1b0e8:	cmp	r3, #0
   1b0ec:	bne	1b110 <_start@@Base+0x86f8>
   1b0f0:	ldr	r3, [pc, #52]	; 1b12c <_start@@Base+0x8714>
   1b0f4:	add	r3, pc, r3
   1b0f8:	mov	r2, #237	; 0xed
   1b0fc:	ldr	r1, [pc, #44]	; 1b130 <_start@@Base+0x8718>
   1b100:	add	r1, pc, r1
   1b104:	ldr	r0, [pc, #40]	; 1b134 <_start@@Base+0x871c>
   1b108:	add	r0, pc, r0
   1b10c:	bl	12a08 <__assert_fail@plt>
   1b110:	ldr	r0, [fp, #-8]
   1b114:	bl	2b528 <flatcc_builder_end_table@@Base>
   1b118:	mov	r3, r0
   1b11c:	mov	r0, r3
   1b120:	sub	sp, fp, #4
   1b124:	pop	{fp, pc}
   1b128:			; <UNDEFINED> instruction: 0x00015fb8
   1b12c:	andeq	r8, r1, r4, lsl sp
   1b130:	andeq	r5, r1, ip, ror fp
   1b134:	andeq	r5, r1, r8, lsl #31
   1b138:	push	{fp, lr}
   1b13c:	add	fp, sp, #4
   1b140:	sub	sp, sp, #8
   1b144:	str	r0, [fp, #-8]
   1b148:	mov	r1, #1
   1b14c:	ldr	r0, [fp, #-8]
   1b150:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1b154:	mov	r3, r0
   1b158:	mov	r0, r3
   1b15c:	sub	sp, fp, #4
   1b160:	pop	{fp, pc}
   1b164:	push	{fp, lr}
   1b168:	add	fp, sp, #4
   1b16c:	sub	sp, sp, #8
   1b170:	str	r0, [fp, #-8]
   1b174:	mov	r2, #0
   1b178:	ldr	r3, [pc, #80]	; 1b1d0 <_start@@Base+0x87b8>
   1b17c:	add	r3, pc, r3
   1b180:	mov	r1, r3
   1b184:	ldr	r0, [fp, #-8]
   1b188:	bl	2b43c <flatcc_builder_check_required@@Base>
   1b18c:	mov	r3, r0
   1b190:	cmp	r3, #0
   1b194:	bne	1b1b8 <_start@@Base+0x87a0>
   1b198:	ldr	r3, [pc, #52]	; 1b1d4 <_start@@Base+0x87bc>
   1b19c:	add	r3, pc, r3
   1b1a0:	mov	r2, #239	; 0xef
   1b1a4:	ldr	r1, [pc, #44]	; 1b1d8 <_start@@Base+0x87c0>
   1b1a8:	add	r1, pc, r1
   1b1ac:	ldr	r0, [pc, #40]	; 1b1dc <_start@@Base+0x87c4>
   1b1b0:	add	r0, pc, r0
   1b1b4:	bl	12a08 <__assert_fail@plt>
   1b1b8:	ldr	r0, [fp, #-8]
   1b1bc:	bl	2b528 <flatcc_builder_end_table@@Base>
   1b1c0:	mov	r3, r0
   1b1c4:	mov	r0, r3
   1b1c8:	sub	sp, fp, #4
   1b1cc:	pop	{fp, pc}
   1b1d0:	andeq	r5, r1, r4, asr #31
   1b1d4:	muleq	r1, r0, r3
   1b1d8:	ldrdeq	r5, [r1], -r4
   1b1dc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1b1e0:	push	{fp, lr}
   1b1e4:	add	fp, sp, #4
   1b1e8:	sub	sp, sp, #8
   1b1ec:	str	r0, [fp, #-8]
   1b1f0:	mov	r1, #10
   1b1f4:	ldr	r0, [fp, #-8]
   1b1f8:	bl	2a9c4 <flatcc_builder_start_table@@Base>
   1b1fc:	mov	r3, r0
   1b200:	mov	r0, r3
   1b204:	sub	sp, fp, #4
   1b208:	pop	{fp, pc}
   1b20c:	push	{fp, lr}
   1b210:	add	fp, sp, #4
   1b214:	sub	sp, sp, #8
   1b218:	str	r0, [fp, #-8]
   1b21c:	mov	r2, #0
   1b220:	ldr	r3, [pc, #80]	; 1b278 <_start@@Base+0x8860>
   1b224:	add	r3, pc, r3
   1b228:	mov	r1, r3
   1b22c:	ldr	r0, [fp, #-8]
   1b230:	bl	2b43c <flatcc_builder_check_required@@Base>
   1b234:	mov	r3, r0
   1b238:	cmp	r3, #0
   1b23c:	bne	1b260 <_start@@Base+0x8848>
   1b240:	ldr	r3, [pc, #52]	; 1b27c <_start@@Base+0x8864>
   1b244:	add	r3, pc, r3
   1b248:	mov	r2, #241	; 0xf1
   1b24c:	ldr	r1, [pc, #44]	; 1b280 <_start@@Base+0x8868>
   1b250:	add	r1, pc, r1
   1b254:	ldr	r0, [pc, #40]	; 1b284 <_start@@Base+0x886c>
   1b258:	add	r0, pc, r0
   1b25c:	bl	12a08 <__assert_fail@plt>
   1b260:	ldr	r0, [fp, #-8]
   1b264:	bl	2b528 <flatcc_builder_end_table@@Base>
   1b268:	mov	r3, r0
   1b26c:	mov	r0, r3
   1b270:	sub	sp, fp, #4
   1b274:	pop	{fp, pc}
   1b278:			; <UNDEFINED> instruction: 0x00015fb0
   1b27c:	andeq	r9, r1, r0, lsl #6
   1b280:	andeq	r5, r1, ip, lsr #20
   1b284:	andeq	r5, r1, r0, lsl #31
   1b288:	push	{fp}		; (str fp, [sp, #-4]!)
   1b28c:	add	fp, sp, #0
   1b290:	sub	sp, sp, #20
   1b294:	str	r0, [fp, #-16]
   1b298:	str	r1, [fp, #-20]	; 0xffffffec
   1b29c:	mov	r3, #1
   1b2a0:	strb	r3, [fp, #-12]
   1b2a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b2a8:	str	r3, [fp, #-8]
   1b2ac:	ldr	r3, [fp, #-16]
   1b2b0:	mov	r2, r3
   1b2b4:	sub	r3, fp, #12
   1b2b8:	ldm	r3, {r0, r1}
   1b2bc:	stm	r2, {r0, r1}
   1b2c0:	ldr	r0, [fp, #-16]
   1b2c4:	add	sp, fp, #0
   1b2c8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b2cc:	bx	lr
   1b2d0:	push	{fp}		; (str fp, [sp, #-4]!)
   1b2d4:	add	fp, sp, #0
   1b2d8:	sub	sp, sp, #20
   1b2dc:	str	r0, [fp, #-16]
   1b2e0:	str	r1, [fp, #-20]	; 0xffffffec
   1b2e4:	mov	r3, #2
   1b2e8:	strb	r3, [fp, #-12]
   1b2ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b2f0:	str	r3, [fp, #-8]
   1b2f4:	ldr	r3, [fp, #-16]
   1b2f8:	mov	r2, r3
   1b2fc:	sub	r3, fp, #12
   1b300:	ldm	r3, {r0, r1}
   1b304:	stm	r2, {r0, r1}
   1b308:	ldr	r0, [fp, #-16]
   1b30c:	add	sp, fp, #0
   1b310:	pop	{fp}		; (ldr fp, [sp], #4)
   1b314:	bx	lr
   1b318:	push	{fp}		; (str fp, [sp, #-4]!)
   1b31c:	add	fp, sp, #0
   1b320:	sub	sp, sp, #20
   1b324:	str	r0, [fp, #-16]
   1b328:	str	r1, [fp, #-20]	; 0xffffffec
   1b32c:	mov	r3, #4
   1b330:	strb	r3, [fp, #-12]
   1b334:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b338:	str	r3, [fp, #-8]
   1b33c:	ldr	r3, [fp, #-16]
   1b340:	mov	r2, r3
   1b344:	sub	r3, fp, #12
   1b348:	ldm	r3, {r0, r1}
   1b34c:	stm	r2, {r0, r1}
   1b350:	ldr	r0, [fp, #-16]
   1b354:	add	sp, fp, #0
   1b358:	pop	{fp}		; (ldr fp, [sp], #4)
   1b35c:	bx	lr
   1b360:	push	{fp, lr}
   1b364:	add	fp, sp, #4
   1b368:	sub	sp, sp, #8
   1b36c:	str	r0, [fp, #-8]
   1b370:	ldr	r0, [fp, #-8]
   1b374:	bl	2c600 <flatcc_builder_start_union_vector@@Base>
   1b378:	mov	r3, r0
   1b37c:	mov	r0, r3
   1b380:	sub	sp, fp, #4
   1b384:	pop	{fp, pc}
   1b388:	push	{fp, lr}
   1b38c:	add	fp, sp, #4
   1b390:	sub	sp, sp, #8
   1b394:	str	r0, [fp, #-8]
   1b398:	str	r1, [fp, #-12]
   1b39c:	ldr	r3, [fp, #-8]
   1b3a0:	ldr	r1, [fp, #-12]
   1b3a4:	mov	r0, r3
   1b3a8:	bl	2c67c <flatcc_builder_end_union_vector@@Base>
   1b3ac:	ldr	r0, [fp, #-8]
   1b3b0:	sub	sp, fp, #4
   1b3b4:	pop	{fp, pc}
   1b3b8:	push	{fp, lr}
   1b3bc:	add	fp, sp, #4
   1b3c0:	sub	sp, sp, #16
   1b3c4:	str	r0, [fp, #-8]
   1b3c8:	sub	r3, fp, #16
   1b3cc:	stm	r3, {r1, r2}
   1b3d0:	sub	r3, fp, #16
   1b3d4:	ldm	r3, {r1, r2}
   1b3d8:	ldr	r0, [fp, #-8]
   1b3dc:	bl	2c9cc <flatcc_builder_union_vector_push@@Base>
   1b3e0:	mov	r3, r0
   1b3e4:	mov	r0, r3
   1b3e8:	sub	sp, fp, #4
   1b3ec:	pop	{fp, pc}
   1b3f0:	push	{fp}		; (str fp, [sp, #-4]!)
   1b3f4:	add	fp, sp, #0
   1b3f8:	sub	sp, sp, #20
   1b3fc:	str	r0, [fp, #-16]
   1b400:	str	r1, [fp, #-20]	; 0xffffffec
   1b404:	mov	r3, #2
   1b408:	strb	r3, [fp, #-12]
   1b40c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b410:	str	r3, [fp, #-8]
   1b414:	ldr	r3, [fp, #-16]
   1b418:	mov	r2, r3
   1b41c:	sub	r3, fp, #12
   1b420:	ldm	r3, {r0, r1}
   1b424:	stm	r2, {r0, r1}
   1b428:	ldr	r0, [fp, #-16]
   1b42c:	add	sp, fp, #0
   1b430:	pop	{fp}		; (ldr fp, [sp], #4)
   1b434:	bx	lr
   1b438:	push	{fp}		; (str fp, [sp, #-4]!)
   1b43c:	add	fp, sp, #0
   1b440:	sub	sp, sp, #20
   1b444:	str	r0, [fp, #-16]
   1b448:	str	r1, [fp, #-20]	; 0xffffffec
   1b44c:	mov	r3, #8
   1b450:	strb	r3, [fp, #-12]
   1b454:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b458:	str	r3, [fp, #-8]
   1b45c:	ldr	r3, [fp, #-16]
   1b460:	mov	r2, r3
   1b464:	sub	r3, fp, #12
   1b468:	ldm	r3, {r0, r1}
   1b46c:	stm	r2, {r0, r1}
   1b470:	ldr	r0, [fp, #-16]
   1b474:	add	sp, fp, #0
   1b478:	pop	{fp}		; (ldr fp, [sp], #4)
   1b47c:	bx	lr
   1b480:	push	{fp}		; (str fp, [sp, #-4]!)
   1b484:	add	fp, sp, #0
   1b488:	sub	sp, sp, #20
   1b48c:	str	r0, [fp, #-16]
   1b490:	str	r1, [fp, #-20]	; 0xffffffec
   1b494:	mov	r3, #9
   1b498:	strb	r3, [fp, #-12]
   1b49c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4a0:	str	r3, [fp, #-8]
   1b4a4:	ldr	r3, [fp, #-16]
   1b4a8:	mov	r2, r3
   1b4ac:	sub	r3, fp, #12
   1b4b0:	ldm	r3, {r0, r1}
   1b4b4:	stm	r2, {r0, r1}
   1b4b8:	ldr	r0, [fp, #-16]
   1b4bc:	add	sp, fp, #0
   1b4c0:	pop	{fp}		; (ldr fp, [sp], #4)
   1b4c4:	bx	lr
   1b4c8:	push	{fp}		; (str fp, [sp, #-4]!)
   1b4cc:	add	fp, sp, #0
   1b4d0:	sub	sp, sp, #20
   1b4d4:	str	r0, [fp, #-16]
   1b4d8:	str	r1, [fp, #-20]	; 0xffffffec
   1b4dc:	mov	r3, #11
   1b4e0:	strb	r3, [fp, #-12]
   1b4e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4e8:	str	r3, [fp, #-8]
   1b4ec:	ldr	r3, [fp, #-16]
   1b4f0:	mov	r2, r3
   1b4f4:	sub	r3, fp, #12
   1b4f8:	ldm	r3, {r0, r1}
   1b4fc:	stm	r2, {r0, r1}
   1b500:	ldr	r0, [fp, #-16]
   1b504:	add	sp, fp, #0
   1b508:	pop	{fp}		; (ldr fp, [sp], #4)
   1b50c:	bx	lr
   1b510:	push	{fp, lr}
   1b514:	add	fp, sp, #4
   1b518:	sub	sp, sp, #16
   1b51c:	str	r0, [fp, #-8]
   1b520:	sub	r3, fp, #16
   1b524:	stm	r3, {r1, r2}
   1b528:	sub	r3, fp, #16
   1b52c:	ldm	r3, {r1, r2}
   1b530:	ldr	r0, [fp, #-8]
   1b534:	bl	2c9cc <flatcc_builder_union_vector_push@@Base>
   1b538:	mov	r3, r0
   1b53c:	mov	r0, r3
   1b540:	sub	sp, fp, #4
   1b544:	pop	{fp, pc}
   1b548:	push	{fp, lr}
   1b54c:	add	fp, sp, #4
   1b550:	sub	sp, sp, #8
   1b554:	str	r0, [fp, #-8]
   1b558:	mov	r3, #1
   1b55c:	mov	r2, #0
   1b560:	mov	r1, #0
   1b564:	ldr	r0, [fp, #-8]
   1b568:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1b56c:	mov	r3, r0
   1b570:	mov	r0, r3
   1b574:	sub	sp, fp, #4
   1b578:	pop	{fp, pc}
   1b57c:	push	{fp, lr}
   1b580:	add	fp, sp, #4
   1b584:	sub	sp, sp, #16
   1b588:	str	r0, [fp, #-16]
   1b58c:	str	r1, [fp, #-20]	; 0xffffffec
   1b590:	ldr	r0, [fp, #-16]
   1b594:	bl	1b548 <_start@@Base+0x8b30>
   1b598:	str	r0, [fp, #-8]
   1b59c:	ldr	r3, [fp, #-8]
   1b5a0:	cmp	r3, #0
   1b5a4:	bne	1b5b0 <_start@@Base+0x8b98>
   1b5a8:	mvn	r3, #0
   1b5ac:	b	1b5c0 <_start@@Base+0x8ba8>
   1b5b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b5b4:	ldr	r0, [fp, #-8]
   1b5b8:	bl	1a6dc <_start@@Base+0x7cc4>
   1b5bc:	mov	r3, #0
   1b5c0:	mov	r0, r3
   1b5c4:	sub	sp, fp, #4
   1b5c8:	pop	{fp, pc}
   1b5cc:	push	{fp, lr}
   1b5d0:	add	fp, sp, #4
   1b5d4:	sub	sp, sp, #8
   1b5d8:	str	r0, [fp, #-8]
   1b5dc:	str	r1, [fp, #-12]
   1b5e0:	ldr	r0, [fp, #-8]
   1b5e4:	bl	1ad04 <_start@@Base+0x82ec>
   1b5e8:	mov	r3, r0
   1b5ec:	cmp	r3, #0
   1b5f0:	bne	1b60c <_start@@Base+0x8bf4>
   1b5f4:	ldr	r1, [fp, #-12]
   1b5f8:	ldr	r0, [fp, #-8]
   1b5fc:	bl	1b57c <_start@@Base+0x8b64>
   1b600:	mov	r3, r0
   1b604:	cmp	r3, #0
   1b608:	beq	1b614 <_start@@Base+0x8bfc>
   1b60c:	mov	r3, #0
   1b610:	b	1b620 <_start@@Base+0x8c08>
   1b614:	ldr	r0, [fp, #-8]
   1b618:	bl	1ad30 <_start@@Base+0x8318>
   1b61c:	mov	r3, r0
   1b620:	mov	r0, r3
   1b624:	sub	sp, fp, #4
   1b628:	pop	{fp, pc}
   1b62c:	push	{fp, lr}
   1b630:	add	fp, sp, #4
   1b634:	sub	sp, sp, #8
   1b638:	str	r0, [fp, #-8]
   1b63c:	str	r1, [fp, #-12]
   1b640:	ldr	r3, [pc, #76]	; 1b694 <_start@@Base+0x8c7c>
   1b644:	add	r3, pc, r3
   1b648:	mov	r1, r3
   1b64c:	ldr	r0, [fp, #-8]
   1b650:	bl	1a360 <_start@@Base+0x7948>
   1b654:	mov	r3, r0
   1b658:	cmp	r3, #0
   1b65c:	beq	1b668 <_start@@Base+0x8c50>
   1b660:	mov	r3, #0
   1b664:	b	1b688 <_start@@Base+0x8c70>
   1b668:	ldr	r1, [fp, #-12]
   1b66c:	ldr	r0, [fp, #-8]
   1b670:	bl	1b5cc <_start@@Base+0x8bb4>
   1b674:	mov	r3, r0
   1b678:	mov	r1, r3
   1b67c:	ldr	r0, [fp, #-8]
   1b680:	bl	1a3d0 <_start@@Base+0x79b8>
   1b684:	mov	r3, r0
   1b688:	mov	r0, r3
   1b68c:	sub	sp, fp, #4
   1b690:	pop	{fp, pc}
   1b694:	andeq	r5, r1, r4, asr #10
   1b698:	push	{fp, lr}
   1b69c:	add	fp, sp, #4
   1b6a0:	sub	sp, sp, #8
   1b6a4:	str	r0, [fp, #-8]
   1b6a8:	str	r1, [fp, #-12]
   1b6ac:	ldr	r3, [pc, #76]	; 1b700 <_start@@Base+0x8ce8>
   1b6b0:	add	r3, pc, r3
   1b6b4:	mov	r1, r3
   1b6b8:	ldr	r0, [fp, #-8]
   1b6bc:	bl	1a360 <_start@@Base+0x7948>
   1b6c0:	mov	r3, r0
   1b6c4:	cmp	r3, #0
   1b6c8:	beq	1b6d4 <_start@@Base+0x8cbc>
   1b6cc:	mov	r3, #0
   1b6d0:	b	1b6f4 <_start@@Base+0x8cdc>
   1b6d4:	ldr	r1, [fp, #-12]
   1b6d8:	ldr	r0, [fp, #-8]
   1b6dc:	bl	1b5cc <_start@@Base+0x8bb4>
   1b6e0:	mov	r3, r0
   1b6e4:	mov	r1, r3
   1b6e8:	ldr	r0, [fp, #-8]
   1b6ec:	bl	1a3d0 <_start@@Base+0x79b8>
   1b6f0:	mov	r3, r0
   1b6f4:	mov	r0, r3
   1b6f8:	sub	sp, fp, #4
   1b6fc:	pop	{fp, pc}
   1b700:			; <UNDEFINED> instruction: 0x00015bb0
   1b704:	push	{fp, lr}
   1b708:	add	fp, sp, #4
   1b70c:	sub	sp, sp, #16
   1b710:	str	r0, [fp, #-16]
   1b714:	mov	r3, r1
   1b718:	strb	r3, [fp, #-17]	; 0xffffffef
   1b71c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1b720:	cmp	r3, #2
   1b724:	bne	1b730 <_start@@Base+0x8d18>
   1b728:	mov	r3, #0
   1b72c:	b	1b770 <_start@@Base+0x8d58>
   1b730:	mov	r3, #1
   1b734:	mov	r2, #1
   1b738:	mov	r1, #0
   1b73c:	ldr	r0, [fp, #-16]
   1b740:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1b744:	str	r0, [fp, #-8]
   1b748:	ldr	r3, [fp, #-8]
   1b74c:	cmp	r3, #0
   1b750:	bne	1b75c <_start@@Base+0x8d44>
   1b754:	mvn	r3, #0
   1b758:	b	1b770 <_start@@Base+0x8d58>
   1b75c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1b760:	mov	r1, r3
   1b764:	ldr	r0, [fp, #-8]
   1b768:	bl	1a400 <_start@@Base+0x79e8>
   1b76c:	mov	r3, #0
   1b770:	mov	r0, r3
   1b774:	sub	sp, fp, #4
   1b778:	pop	{fp, pc}
   1b77c:	push	{fp, lr}
   1b780:	add	fp, sp, #4
   1b784:	sub	sp, sp, #16
   1b788:	str	r0, [fp, #-16]
   1b78c:	mov	r3, r1
   1b790:	strb	r3, [fp, #-17]	; 0xffffffef
   1b794:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1b798:	cmp	r3, #2
   1b79c:	bne	1b7a8 <_start@@Base+0x8d90>
   1b7a0:	mov	r3, #0
   1b7a4:	b	1b7e8 <_start@@Base+0x8dd0>
   1b7a8:	mov	r3, #1
   1b7ac:	mov	r2, #1
   1b7b0:	mov	r1, #1
   1b7b4:	ldr	r0, [fp, #-16]
   1b7b8:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1b7bc:	str	r0, [fp, #-8]
   1b7c0:	ldr	r3, [fp, #-8]
   1b7c4:	cmp	r3, #0
   1b7c8:	bne	1b7d4 <_start@@Base+0x8dbc>
   1b7cc:	mvn	r3, #0
   1b7d0:	b	1b7e8 <_start@@Base+0x8dd0>
   1b7d4:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1b7d8:	mov	r1, r3
   1b7dc:	ldr	r0, [fp, #-8]
   1b7e0:	bl	1a400 <_start@@Base+0x79e8>
   1b7e4:	mov	r3, #0
   1b7e8:	mov	r0, r3
   1b7ec:	sub	sp, fp, #4
   1b7f0:	pop	{fp, pc}
   1b7f4:	push	{fp, lr}
   1b7f8:	add	fp, sp, #4
   1b7fc:	sub	sp, sp, #16
   1b800:	str	r0, [fp, #-16]
   1b804:	mov	r3, r1
   1b808:	strb	r3, [fp, #-17]	; 0xffffffef
   1b80c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1b810:	cmp	r3, #2
   1b814:	bne	1b820 <_start@@Base+0x8e08>
   1b818:	mov	r3, #0
   1b81c:	b	1b860 <_start@@Base+0x8e48>
   1b820:	mov	r3, #1
   1b824:	mov	r2, #1
   1b828:	mov	r1, #2
   1b82c:	ldr	r0, [fp, #-16]
   1b830:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1b834:	str	r0, [fp, #-8]
   1b838:	ldr	r3, [fp, #-8]
   1b83c:	cmp	r3, #0
   1b840:	bne	1b84c <_start@@Base+0x8e34>
   1b844:	mvn	r3, #0
   1b848:	b	1b860 <_start@@Base+0x8e48>
   1b84c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1b850:	mov	r1, r3
   1b854:	ldr	r0, [fp, #-8]
   1b858:	bl	19c38 <_start@@Base+0x7220>
   1b85c:	mov	r3, #0
   1b860:	mov	r0, r3
   1b864:	sub	sp, fp, #4
   1b868:	pop	{fp, pc}
   1b86c:	push	{fp, lr}
   1b870:	add	fp, sp, #4
   1b874:	sub	sp, sp, #16
   1b878:	str	r0, [fp, #-16]
   1b87c:	mov	r3, r1
   1b880:	strb	r3, [fp, #-17]	; 0xffffffef
   1b884:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1b888:	cmp	r3, #2
   1b88c:	bne	1b898 <_start@@Base+0x8e80>
   1b890:	mov	r3, #0
   1b894:	b	1b8d8 <_start@@Base+0x8ec0>
   1b898:	mov	r3, #1
   1b89c:	mov	r2, #1
   1b8a0:	mov	r1, #3
   1b8a4:	ldr	r0, [fp, #-16]
   1b8a8:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1b8ac:	str	r0, [fp, #-8]
   1b8b0:	ldr	r3, [fp, #-8]
   1b8b4:	cmp	r3, #0
   1b8b8:	bne	1b8c4 <_start@@Base+0x8eac>
   1b8bc:	mvn	r3, #0
   1b8c0:	b	1b8d8 <_start@@Base+0x8ec0>
   1b8c4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1b8c8:	mov	r1, r3
   1b8cc:	ldr	r0, [fp, #-8]
   1b8d0:	bl	19c38 <_start@@Base+0x7220>
   1b8d4:	mov	r3, #0
   1b8d8:	mov	r0, r3
   1b8dc:	sub	sp, fp, #4
   1b8e0:	pop	{fp, pc}
   1b8e4:	push	{fp, lr}
   1b8e8:	add	fp, sp, #4
   1b8ec:	sub	sp, sp, #8
   1b8f0:	str	r0, [fp, #-8]
   1b8f4:	mov	r0, r1
   1b8f8:	mov	r1, r2
   1b8fc:	mov	r2, r3
   1b900:	mov	r3, r0
   1b904:	strb	r3, [fp, #-9]
   1b908:	mov	r3, r1
   1b90c:	strb	r3, [fp, #-10]
   1b910:	mov	r3, r2
   1b914:	strb	r3, [fp, #-11]
   1b918:	ldr	r0, [fp, #-8]
   1b91c:	bl	1adac <_start@@Base+0x8394>
   1b920:	mov	r3, r0
   1b924:	cmp	r3, #0
   1b928:	bne	1b99c <_start@@Base+0x8f84>
   1b92c:	ldrsb	r3, [fp, #-9]
   1b930:	mov	r1, r3
   1b934:	ldr	r0, [fp, #-8]
   1b938:	bl	1b704 <_start@@Base+0x8cec>
   1b93c:	mov	r3, r0
   1b940:	cmp	r3, #0
   1b944:	bne	1b99c <_start@@Base+0x8f84>
   1b948:	ldrsb	r3, [fp, #-10]
   1b94c:	mov	r1, r3
   1b950:	ldr	r0, [fp, #-8]
   1b954:	bl	1b77c <_start@@Base+0x8d64>
   1b958:	mov	r3, r0
   1b95c:	cmp	r3, #0
   1b960:	bne	1b99c <_start@@Base+0x8f84>
   1b964:	ldrb	r3, [fp, #-11]
   1b968:	mov	r1, r3
   1b96c:	ldr	r0, [fp, #-8]
   1b970:	bl	1b7f4 <_start@@Base+0x8ddc>
   1b974:	mov	r3, r0
   1b978:	cmp	r3, #0
   1b97c:	bne	1b99c <_start@@Base+0x8f84>
   1b980:	ldrb	r3, [fp, #4]
   1b984:	mov	r1, r3
   1b988:	ldr	r0, [fp, #-8]
   1b98c:	bl	1b86c <_start@@Base+0x8e54>
   1b990:	mov	r3, r0
   1b994:	cmp	r3, #0
   1b998:	beq	1b9a4 <_start@@Base+0x8f8c>
   1b99c:	mov	r3, #0
   1b9a0:	b	1b9b0 <_start@@Base+0x8f98>
   1b9a4:	ldr	r0, [fp, #-8]
   1b9a8:	bl	1add8 <_start@@Base+0x83c0>
   1b9ac:	mov	r3, r0
   1b9b0:	mov	r0, r3
   1b9b4:	sub	sp, fp, #4
   1b9b8:	pop	{fp, pc}
   1b9bc:	push	{fp, lr}
   1b9c0:	add	fp, sp, #4
   1b9c4:	sub	sp, sp, #16
   1b9c8:	str	r0, [fp, #-16]
   1b9cc:	str	r1, [fp, #-20]	; 0xffffffec
   1b9d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b9d4:	cmp	r3, #0
   1b9d8:	beq	1ba0c <_start@@Base+0x8ff4>
   1b9dc:	mov	r1, #0
   1b9e0:	ldr	r0, [fp, #-16]
   1b9e4:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1b9e8:	str	r0, [fp, #-8]
   1b9ec:	ldr	r3, [fp, #-8]
   1b9f0:	cmp	r3, #0
   1b9f4:	beq	1ba0c <_start@@Base+0x8ff4>
   1b9f8:	ldr	r3, [fp, #-8]
   1b9fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ba00:	str	r2, [r3]
   1ba04:	mov	r3, #0
   1ba08:	b	1ba10 <_start@@Base+0x8ff8>
   1ba0c:	mvn	r3, #0
   1ba10:	mov	r0, r3
   1ba14:	sub	sp, fp, #4
   1ba18:	pop	{fp, pc}
   1ba1c:	push	{fp, lr}
   1ba20:	add	fp, sp, #4
   1ba24:	sub	sp, sp, #24
   1ba28:	str	r0, [fp, #-16]
   1ba2c:	strd	r2, [fp, #-28]	; 0xffffffe4
   1ba30:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1ba34:	orrs	r3, r2, r3
   1ba38:	bne	1ba44 <_start@@Base+0x902c>
   1ba3c:	mov	r3, #0
   1ba40:	b	1ba80 <_start@@Base+0x9068>
   1ba44:	mov	r3, #8
   1ba48:	mov	r2, #8
   1ba4c:	mov	r1, #1
   1ba50:	ldr	r0, [fp, #-16]
   1ba54:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1ba58:	str	r0, [fp, #-8]
   1ba5c:	ldr	r3, [fp, #-8]
   1ba60:	cmp	r3, #0
   1ba64:	bne	1ba70 <_start@@Base+0x9058>
   1ba68:	mvn	r3, #0
   1ba6c:	b	1ba80 <_start@@Base+0x9068>
   1ba70:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1ba74:	ldr	r0, [fp, #-8]
   1ba78:	bl	1a068 <_start@@Base+0x7650>
   1ba7c:	mov	r3, #0
   1ba80:	mov	r0, r3
   1ba84:	sub	sp, fp, #4
   1ba88:	pop	{fp, pc}
   1ba8c:	push	{fp, lr}
   1ba90:	add	fp, sp, #4
   1ba94:	sub	sp, sp, #16
   1ba98:	str	r0, [fp, #-16]
   1ba9c:	mov	r3, r1
   1baa0:	strh	r3, [fp, #-18]	; 0xffffffee
   1baa4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1baa8:	cmp	r3, #0
   1baac:	bne	1bab8 <_start@@Base+0x90a0>
   1bab0:	mov	r3, #0
   1bab4:	b	1baf8 <_start@@Base+0x90e0>
   1bab8:	mov	r3, #2
   1babc:	mov	r2, #2
   1bac0:	mov	r1, #2
   1bac4:	ldr	r0, [fp, #-16]
   1bac8:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1bacc:	str	r0, [fp, #-8]
   1bad0:	ldr	r3, [fp, #-8]
   1bad4:	cmp	r3, #0
   1bad8:	bne	1bae4 <_start@@Base+0x90cc>
   1badc:	mvn	r3, #0
   1bae0:	b	1baf8 <_start@@Base+0x90e0>
   1bae4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1bae8:	mov	r1, r3
   1baec:	ldr	r0, [fp, #-8]
   1baf0:	bl	19ef0 <_start@@Base+0x74d8>
   1baf4:	mov	r3, #0
   1baf8:	mov	r0, r3
   1bafc:	sub	sp, fp, #4
   1bb00:	pop	{fp, pc}
   1bb04:	push	{fp, lr}
   1bb08:	add	fp, sp, #4
   1bb0c:	sub	sp, sp, #16
   1bb10:	str	r0, [fp, #-8]
   1bb14:	str	r1, [fp, #-12]
   1bb18:	strd	r2, [fp, #-20]	; 0xffffffec
   1bb1c:	ldr	r0, [fp, #-8]
   1bb20:	bl	1ae54 <_start@@Base+0x843c>
   1bb24:	mov	r3, r0
   1bb28:	cmp	r3, #0
   1bb2c:	bne	1bb7c <_start@@Base+0x9164>
   1bb30:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1bb34:	ldr	r0, [fp, #-8]
   1bb38:	bl	1ba1c <_start@@Base+0x9004>
   1bb3c:	mov	r3, r0
   1bb40:	cmp	r3, #0
   1bb44:	bne	1bb7c <_start@@Base+0x9164>
   1bb48:	ldr	r1, [fp, #-12]
   1bb4c:	ldr	r0, [fp, #-8]
   1bb50:	bl	1b9bc <_start@@Base+0x8fa4>
   1bb54:	mov	r3, r0
   1bb58:	cmp	r3, #0
   1bb5c:	bne	1bb7c <_start@@Base+0x9164>
   1bb60:	ldrh	r3, [fp, #4]
   1bb64:	mov	r1, r3
   1bb68:	ldr	r0, [fp, #-8]
   1bb6c:	bl	1ba8c <_start@@Base+0x9074>
   1bb70:	mov	r3, r0
   1bb74:	cmp	r3, #0
   1bb78:	beq	1bb84 <_start@@Base+0x916c>
   1bb7c:	mov	r3, #0
   1bb80:	b	1bb90 <_start@@Base+0x9178>
   1bb84:	ldr	r0, [fp, #-8]
   1bb88:	bl	1ae80 <_start@@Base+0x8468>
   1bb8c:	mov	r3, r0
   1bb90:	mov	r0, r3
   1bb94:	sub	sp, fp, #4
   1bb98:	pop	{fp, pc}
   1bb9c:	push	{fp, lr}
   1bba0:	add	fp, sp, #4
   1bba4:	sub	sp, sp, #24
   1bba8:	str	r0, [fp, #-16]
   1bbac:	sub	r3, fp, #24
   1bbb0:	stm	r3, {r1, r2}
   1bbb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bbb8:	cmp	r3, #0
   1bbbc:	beq	1bbcc <_start@@Base+0x91b4>
   1bbc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbc4:	cmp	r3, #0
   1bbc8:	bne	1bbec <_start@@Base+0x91d4>
   1bbcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bbd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbd4:	cmp	r2, r3
   1bbd8:	bne	1bbe4 <_start@@Base+0x91cc>
   1bbdc:	mov	r3, #0
   1bbe0:	b	1bc50 <_start@@Base+0x9238>
   1bbe4:	mvn	r3, #0
   1bbe8:	b	1bc50 <_start@@Base+0x9238>
   1bbec:	mov	r1, #2
   1bbf0:	ldr	r0, [fp, #-16]
   1bbf4:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1bbf8:	str	r0, [fp, #-8]
   1bbfc:	ldr	r3, [fp, #-8]
   1bc00:	cmp	r3, #0
   1bc04:	bne	1bc10 <_start@@Base+0x91f8>
   1bc08:	mvn	r3, #0
   1bc0c:	b	1bc50 <_start@@Base+0x9238>
   1bc10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bc14:	ldr	r3, [fp, #-8]
   1bc18:	str	r2, [r3]
   1bc1c:	mov	r1, #3
   1bc20:	ldr	r0, [fp, #-16]
   1bc24:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1bc28:	str	r0, [fp, #-8]
   1bc2c:	ldr	r3, [fp, #-8]
   1bc30:	cmp	r3, #0
   1bc34:	bne	1bc40 <_start@@Base+0x9228>
   1bc38:	mvn	r3, #0
   1bc3c:	b	1bc50 <_start@@Base+0x9238>
   1bc40:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc44:	ldr	r3, [fp, #-8]
   1bc48:	str	r2, [r3]
   1bc4c:	mov	r3, #0
   1bc50:	mov	r0, r3
   1bc54:	sub	sp, fp, #4
   1bc58:	pop	{fp, pc}
   1bc5c:	push	{fp, lr}
   1bc60:	add	fp, sp, #4
   1bc64:	sub	sp, sp, #8
   1bc68:	str	r0, [fp, #-8]
   1bc6c:	mov	r3, #16
   1bc70:	mov	r2, #32
   1bc74:	mov	r1, #0
   1bc78:	ldr	r0, [fp, #-8]
   1bc7c:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1bc80:	mov	r3, r0
   1bc84:	mov	r0, r3
   1bc88:	sub	sp, fp, #4
   1bc8c:	pop	{fp, pc}
   1bc90:	push	{fp}		; (str fp, [sp, #-4]!)
   1bc94:	add	fp, sp, #0
   1bc98:	sub	sp, sp, #12
   1bc9c:	str	r0, [fp, #-8]
   1bca0:	mov	r3, #0
   1bca4:	mov	r0, r3
   1bca8:	add	sp, fp, #0
   1bcac:	pop	{fp}		; (ldr fp, [sp], #4)
   1bcb0:	bx	lr
   1bcb4:	push	{fp, lr}
   1bcb8:	add	fp, sp, #4
   1bcbc:	sub	sp, sp, #16
   1bcc0:	str	r0, [fp, #-8]
   1bcc4:	str	r1, [fp, #-12]
   1bcc8:	mov	r3, #16
   1bccc:	str	r3, [sp]
   1bcd0:	mov	r3, #32
   1bcd4:	ldr	r2, [fp, #-12]
   1bcd8:	mov	r1, #0
   1bcdc:	ldr	r0, [fp, #-8]
   1bce0:	bl	2d0b4 <flatcc_builder_table_add_copy@@Base>
   1bce4:	mov	r3, r0
   1bce8:	cmp	r3, #0
   1bcec:	bne	1bcf8 <_start@@Base+0x92e0>
   1bcf0:	mvn	r3, #0
   1bcf4:	b	1bcfc <_start@@Base+0x92e4>
   1bcf8:	mov	r3, #0
   1bcfc:	mov	r0, r3
   1bd00:	sub	sp, fp, #4
   1bd04:	pop	{fp, pc}
   1bd08:	push	{fp, lr}
   1bd0c:	add	fp, sp, #4
   1bd10:	sub	sp, sp, #16
   1bd14:	str	r0, [fp, #-16]
   1bd18:	mov	r3, r1
   1bd1c:	strh	r3, [fp, #-18]	; 0xffffffee
   1bd20:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1bd24:	cmp	r3, #100	; 0x64
   1bd28:	bne	1bd34 <_start@@Base+0x931c>
   1bd2c:	mov	r3, #0
   1bd30:	b	1bd74 <_start@@Base+0x935c>
   1bd34:	mov	r3, #2
   1bd38:	mov	r2, #2
   1bd3c:	mov	r1, #2
   1bd40:	ldr	r0, [fp, #-16]
   1bd44:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1bd48:	str	r0, [fp, #-8]
   1bd4c:	ldr	r3, [fp, #-8]
   1bd50:	cmp	r3, #0
   1bd54:	bne	1bd60 <_start@@Base+0x9348>
   1bd58:	mvn	r3, #0
   1bd5c:	b	1bd74 <_start@@Base+0x935c>
   1bd60:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1bd64:	mov	r1, r3
   1bd68:	ldr	r0, [fp, #-8]
   1bd6c:	bl	19fec <_start@@Base+0x75d4>
   1bd70:	mov	r3, #0
   1bd74:	mov	r0, r3
   1bd78:	sub	sp, fp, #4
   1bd7c:	pop	{fp, pc}
   1bd80:	push	{fp, lr}
   1bd84:	add	fp, sp, #4
   1bd88:	sub	sp, sp, #16
   1bd8c:	str	r0, [fp, #-16]
   1bd90:	mov	r3, r1
   1bd94:	strh	r3, [fp, #-18]	; 0xffffffee
   1bd98:	mov	r3, #2
   1bd9c:	mov	r2, #2
   1bda0:	mov	r1, #2
   1bda4:	ldr	r0, [fp, #-16]
   1bda8:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1bdac:	str	r0, [fp, #-8]
   1bdb0:	ldr	r3, [fp, #-8]
   1bdb4:	cmp	r3, #0
   1bdb8:	bne	1bdc4 <_start@@Base+0x93ac>
   1bdbc:	mvn	r3, #0
   1bdc0:	b	1bdd8 <_start@@Base+0x93c0>
   1bdc4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1bdc8:	mov	r1, r3
   1bdcc:	ldr	r0, [fp, #-8]
   1bdd0:	bl	19fec <_start@@Base+0x75d4>
   1bdd4:	mov	r3, #0
   1bdd8:	mov	r0, r3
   1bddc:	sub	sp, fp, #4
   1bde0:	pop	{fp, pc}
   1bde4:	push	{fp, lr}
   1bde8:	add	fp, sp, #4
   1bdec:	sub	sp, sp, #16
   1bdf0:	str	r0, [fp, #-16]
   1bdf4:	mov	r3, r1
   1bdf8:	strh	r3, [fp, #-18]	; 0xffffffee
   1bdfc:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1be00:	cmp	r3, #150	; 0x96
   1be04:	bne	1be10 <_start@@Base+0x93f8>
   1be08:	mov	r3, #0
   1be0c:	b	1be50 <_start@@Base+0x9438>
   1be10:	mov	r3, #2
   1be14:	mov	r2, #2
   1be18:	mov	r1, #1
   1be1c:	ldr	r0, [fp, #-16]
   1be20:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1be24:	str	r0, [fp, #-8]
   1be28:	ldr	r3, [fp, #-8]
   1be2c:	cmp	r3, #0
   1be30:	bne	1be3c <_start@@Base+0x9424>
   1be34:	mvn	r3, #0
   1be38:	b	1be50 <_start@@Base+0x9438>
   1be3c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1be40:	mov	r1, r3
   1be44:	ldr	r0, [fp, #-8]
   1be48:	bl	19fec <_start@@Base+0x75d4>
   1be4c:	mov	r3, #0
   1be50:	mov	r0, r3
   1be54:	sub	sp, fp, #4
   1be58:	pop	{fp, pc}
   1be5c:	push	{fp, lr}
   1be60:	add	fp, sp, #4
   1be64:	sub	sp, sp, #16
   1be68:	str	r0, [fp, #-16]
   1be6c:	mov	r3, r1
   1be70:	strh	r3, [fp, #-18]	; 0xffffffee
   1be74:	mov	r3, #2
   1be78:	mov	r2, #2
   1be7c:	mov	r1, #1
   1be80:	ldr	r0, [fp, #-16]
   1be84:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1be88:	str	r0, [fp, #-8]
   1be8c:	ldr	r3, [fp, #-8]
   1be90:	cmp	r3, #0
   1be94:	bne	1bea0 <_start@@Base+0x9488>
   1be98:	mvn	r3, #0
   1be9c:	b	1beb4 <_start@@Base+0x949c>
   1bea0:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1bea4:	mov	r1, r3
   1bea8:	ldr	r0, [fp, #-8]
   1beac:	bl	19fec <_start@@Base+0x75d4>
   1beb0:	mov	r3, #0
   1beb4:	mov	r0, r3
   1beb8:	sub	sp, fp, #4
   1bebc:	pop	{fp, pc}
   1bec0:	push	{fp, lr}
   1bec4:	add	fp, sp, #4
   1bec8:	sub	sp, sp, #16
   1becc:	str	r0, [fp, #-16]
   1bed0:	str	r1, [fp, #-20]	; 0xffffffec
   1bed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bed8:	cmp	r3, #0
   1bedc:	beq	1bf10 <_start@@Base+0x94f8>
   1bee0:	mov	r1, #3
   1bee4:	ldr	r0, [fp, #-16]
   1bee8:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1beec:	str	r0, [fp, #-8]
   1bef0:	ldr	r3, [fp, #-8]
   1bef4:	cmp	r3, #0
   1bef8:	beq	1bf10 <_start@@Base+0x94f8>
   1befc:	ldr	r3, [fp, #-8]
   1bf00:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bf04:	str	r2, [r3]
   1bf08:	mov	r3, #0
   1bf0c:	b	1bf14 <_start@@Base+0x94fc>
   1bf10:	mvn	r3, #0
   1bf14:	mov	r0, r3
   1bf18:	sub	sp, fp, #4
   1bf1c:	pop	{fp, pc}
   1bf20:	push	{fp, lr}
   1bf24:	add	fp, sp, #4
   1bf28:	sub	sp, sp, #8
   1bf2c:	str	r0, [fp, #-8]
   1bf30:	ldr	r0, [fp, #-8]
   1bf34:	bl	2a8dc <flatcc_builder_start_string@@Base>
   1bf38:	mov	r3, r0
   1bf3c:	mov	r0, r3
   1bf40:	sub	sp, fp, #4
   1bf44:	pop	{fp, pc}
   1bf48:	push	{fp, lr}
   1bf4c:	add	fp, sp, #4
   1bf50:	sub	sp, sp, #8
   1bf54:	str	r0, [fp, #-8]
   1bf58:	ldr	r0, [fp, #-8]
   1bf5c:	bl	2cd78 <flatcc_builder_end_string@@Base>
   1bf60:	mov	r3, r0
   1bf64:	mov	r1, r3
   1bf68:	ldr	r0, [fp, #-8]
   1bf6c:	bl	1bec0 <_start@@Base+0x94a8>
   1bf70:	mov	r3, r0
   1bf74:	mov	r0, r3
   1bf78:	sub	sp, fp, #4
   1bf7c:	pop	{fp, pc}
   1bf80:	push	{fp, lr}
   1bf84:	add	fp, sp, #4
   1bf88:	sub	sp, sp, #8
   1bf8c:	str	r0, [fp, #-8]
   1bf90:	str	r1, [fp, #-12]
   1bf94:	ldr	r1, [fp, #-12]
   1bf98:	ldr	r0, [fp, #-8]
   1bf9c:	bl	2ccf0 <flatcc_builder_create_string_str@@Base>
   1bfa0:	mov	r3, r0
   1bfa4:	mov	r1, r3
   1bfa8:	ldr	r0, [fp, #-8]
   1bfac:	bl	1bec0 <_start@@Base+0x94a8>
   1bfb0:	mov	r3, r0
   1bfb4:	mov	r0, r3
   1bfb8:	sub	sp, fp, #4
   1bfbc:	pop	{fp, pc}
   1bfc0:	push	{fp, lr}
   1bfc4:	add	fp, sp, #4
   1bfc8:	sub	sp, sp, #16
   1bfcc:	str	r0, [fp, #-8]
   1bfd0:	str	r1, [fp, #-12]
   1bfd4:	str	r2, [fp, #-16]
   1bfd8:	ldr	r2, [fp, #-16]
   1bfdc:	ldr	r1, [fp, #-12]
   1bfe0:	ldr	r0, [fp, #-8]
   1bfe4:	bl	2cd30 <flatcc_builder_create_string_strn@@Base>
   1bfe8:	mov	r3, r0
   1bfec:	mov	r1, r3
   1bff0:	ldr	r0, [fp, #-8]
   1bff4:	bl	1bec0 <_start@@Base+0x94a8>
   1bff8:	mov	r3, r0
   1bffc:	mov	r0, r3
   1c000:	sub	sp, fp, #4
   1c004:	pop	{fp, pc}
   1c008:	push	{fp, lr}
   1c00c:	add	fp, sp, #4
   1c010:	sub	sp, sp, #8
   1c014:	str	r0, [fp, #-8]
   1c018:	str	r1, [fp, #-12]
   1c01c:	ldr	r1, [fp, #-12]
   1c020:	ldr	r0, [fp, #-8]
   1c024:	bl	1a248 <_start@@Base+0x7830>
   1c028:	mov	r3, r0
   1c02c:	mov	r1, r3
   1c030:	ldr	r0, [fp, #-8]
   1c034:	bl	1bec0 <_start@@Base+0x94a8>
   1c038:	mov	r3, r0
   1c03c:	mov	r0, r3
   1c040:	sub	sp, fp, #4
   1c044:	pop	{fp, pc}
   1c048:	push	{fp, lr}
   1c04c:	add	fp, sp, #4
   1c050:	sub	sp, sp, #16
   1c054:	str	r0, [fp, #-8]
   1c058:	str	r1, [fp, #-12]
   1c05c:	str	r2, [fp, #-16]
   1c060:	str	r3, [fp, #-20]	; 0xffffffec
   1c064:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c068:	ldr	r2, [fp, #-16]
   1c06c:	ldr	r1, [fp, #-12]
   1c070:	ldr	r0, [fp, #-8]
   1c074:	bl	1a288 <_start@@Base+0x7870>
   1c078:	mov	r3, r0
   1c07c:	mov	r1, r3
   1c080:	ldr	r0, [fp, #-8]
   1c084:	bl	1bec0 <_start@@Base+0x94a8>
   1c088:	mov	r3, r0
   1c08c:	mov	r0, r3
   1c090:	sub	sp, fp, #4
   1c094:	pop	{fp, pc}
   1c098:	push	{fp, lr}
   1c09c:	add	fp, sp, #4
   1c0a0:	sub	sp, sp, #16
   1c0a4:	str	r0, [fp, #-8]
   1c0a8:	str	r1, [fp, #-12]
   1c0ac:	str	r2, [fp, #-16]
   1c0b0:	ldr	r2, [fp, #-16]
   1c0b4:	ldr	r1, [fp, #-12]
   1c0b8:	ldr	r0, [fp, #-8]
   1c0bc:	bl	2a2ec <flatcc_builder_append_string@@Base>
   1c0c0:	mov	r3, r0
   1c0c4:	mov	r0, r3
   1c0c8:	sub	sp, fp, #4
   1c0cc:	pop	{fp, pc}
   1c0d0:	push	{fp, lr}
   1c0d4:	add	fp, sp, #4
   1c0d8:	sub	sp, sp, #8
   1c0dc:	str	r0, [fp, #-8]
   1c0e0:	str	r1, [fp, #-12]
   1c0e4:	ldr	r1, [fp, #-12]
   1c0e8:	ldr	r0, [fp, #-8]
   1c0ec:	bl	2a38c <flatcc_builder_append_string_str@@Base>
   1c0f0:	mov	r3, r0
   1c0f4:	mov	r0, r3
   1c0f8:	sub	sp, fp, #4
   1c0fc:	pop	{fp, pc}
   1c100:	push	{fp, lr}
   1c104:	add	fp, sp, #4
   1c108:	sub	sp, sp, #16
   1c10c:	str	r0, [fp, #-8]
   1c110:	str	r1, [fp, #-12]
   1c114:	str	r2, [fp, #-16]
   1c118:	ldr	r2, [fp, #-16]
   1c11c:	ldr	r1, [fp, #-12]
   1c120:	ldr	r0, [fp, #-8]
   1c124:	bl	2a3cc <flatcc_builder_append_string_strn@@Base>
   1c128:	mov	r3, r0
   1c12c:	mov	r0, r3
   1c130:	sub	sp, fp, #4
   1c134:	pop	{fp, pc}
   1c138:	push	{fp, lr}
   1c13c:	add	fp, sp, #4
   1c140:	sub	sp, sp, #8
   1c144:	str	r0, [fp, #-8]
   1c148:	ldr	r0, [fp, #-8]
   1c14c:	bl	2ce8c <flatcc_builder_string_len@@Base>
   1c150:	mov	r3, r0
   1c154:	mov	r0, r3
   1c158:	sub	sp, fp, #4
   1c15c:	pop	{fp, pc}
   1c160:	push	{fp, lr}
   1c164:	add	fp, sp, #4
   1c168:	sub	sp, sp, #8
   1c16c:	str	r0, [fp, #-8]
   1c170:	str	r1, [fp, #-12]
   1c174:	ldr	r1, [fp, #-12]
   1c178:	ldr	r0, [fp, #-8]
   1c17c:	bl	2a254 <flatcc_builder_extend_string@@Base>
   1c180:	mov	r3, r0
   1c184:	mov	r0, r3
   1c188:	sub	sp, fp, #4
   1c18c:	pop	{fp, pc}
   1c190:	push	{fp, lr}
   1c194:	add	fp, sp, #4
   1c198:	sub	sp, sp, #8
   1c19c:	str	r0, [fp, #-8]
   1c1a0:	ldr	r0, [fp, #-8]
   1c1a4:	bl	2ce64 <flatcc_builder_string_edit@@Base>
   1c1a8:	mov	r3, r0
   1c1ac:	mov	r0, r3
   1c1b0:	sub	sp, fp, #4
   1c1b4:	pop	{fp, pc}
   1c1b8:	push	{fp, lr}
   1c1bc:	add	fp, sp, #4
   1c1c0:	sub	sp, sp, #8
   1c1c4:	str	r0, [fp, #-8]
   1c1c8:	str	r1, [fp, #-12]
   1c1cc:	ldr	r1, [fp, #-12]
   1c1d0:	ldr	r0, [fp, #-8]
   1c1d4:	bl	2a634 <flatcc_builder_truncate_string@@Base>
   1c1d8:	mov	r3, r0
   1c1dc:	mov	r0, r3
   1c1e0:	sub	sp, fp, #4
   1c1e4:	pop	{fp, pc}
   1c1e8:	push	{fp, lr}
   1c1ec:	add	fp, sp, #4
   1c1f0:	sub	sp, sp, #16
   1c1f4:	str	r0, [fp, #-16]
   1c1f8:	mov	r3, r1
   1c1fc:	strb	r3, [fp, #-17]	; 0xffffffef
   1c200:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c204:	cmp	r3, #8
   1c208:	bne	1c214 <_start@@Base+0x97fc>
   1c20c:	mov	r3, #0
   1c210:	b	1c254 <_start@@Base+0x983c>
   1c214:	mov	r3, #1
   1c218:	mov	r2, #1
   1c21c:	mov	r1, #6
   1c220:	ldr	r0, [fp, #-16]
   1c224:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1c228:	str	r0, [fp, #-8]
   1c22c:	ldr	r3, [fp, #-8]
   1c230:	cmp	r3, #0
   1c234:	bne	1c240 <_start@@Base+0x9828>
   1c238:	mvn	r3, #0
   1c23c:	b	1c254 <_start@@Base+0x983c>
   1c240:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c244:	mov	r1, r3
   1c248:	ldr	r0, [fp, #-8]
   1c24c:	bl	1a400 <_start@@Base+0x79e8>
   1c250:	mov	r3, #0
   1c254:	mov	r0, r3
   1c258:	sub	sp, fp, #4
   1c25c:	pop	{fp, pc}
   1c260:	push	{fp, lr}
   1c264:	add	fp, sp, #4
   1c268:	sub	sp, sp, #16
   1c26c:	str	r0, [fp, #-16]
   1c270:	mov	r3, r1
   1c274:	strb	r3, [fp, #-17]	; 0xffffffef
   1c278:	mov	r3, #1
   1c27c:	mov	r2, #1
   1c280:	mov	r1, #6
   1c284:	ldr	r0, [fp, #-16]
   1c288:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1c28c:	str	r0, [fp, #-8]
   1c290:	ldr	r3, [fp, #-8]
   1c294:	cmp	r3, #0
   1c298:	bne	1c2a4 <_start@@Base+0x988c>
   1c29c:	mvn	r3, #0
   1c2a0:	b	1c2b8 <_start@@Base+0x98a0>
   1c2a4:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1c2a8:	mov	r1, r3
   1c2ac:	ldr	r0, [fp, #-8]
   1c2b0:	bl	1a400 <_start@@Base+0x79e8>
   1c2b4:	mov	r3, #0
   1c2b8:	mov	r0, r3
   1c2bc:	sub	sp, fp, #4
   1c2c0:	pop	{fp, pc}
   1c2c4:	push	{fp, lr}
   1c2c8:	add	fp, sp, #4
   1c2cc:	sub	sp, sp, #16
   1c2d0:	str	r0, [fp, #-16]
   1c2d4:	str	r1, [fp, #-20]	; 0xffffffec
   1c2d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c2dc:	cmp	r3, #0
   1c2e0:	beq	1c314 <_start@@Base+0x98fc>
   1c2e4:	mov	r1, #5
   1c2e8:	ldr	r0, [fp, #-16]
   1c2ec:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1c2f0:	str	r0, [fp, #-8]
   1c2f4:	ldr	r3, [fp, #-8]
   1c2f8:	cmp	r3, #0
   1c2fc:	beq	1c314 <_start@@Base+0x98fc>
   1c300:	ldr	r3, [fp, #-8]
   1c304:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c308:	str	r2, [r3]
   1c30c:	mov	r3, #0
   1c310:	b	1c318 <_start@@Base+0x9900>
   1c314:	mvn	r3, #0
   1c318:	mov	r0, r3
   1c31c:	sub	sp, fp, #4
   1c320:	pop	{fp, pc}
   1c324:	push	{fp, lr}
   1c328:	add	fp, sp, #4
   1c32c:	sub	sp, sp, #16
   1c330:	str	r0, [fp, #-8]
   1c334:	str	r1, [fp, #-12]
   1c338:	str	r2, [fp, #-16]
   1c33c:	ldr	r2, [fp, #-16]
   1c340:	ldr	r1, [fp, #-12]
   1c344:	ldr	r0, [fp, #-8]
   1c348:	bl	19c7c <_start@@Base+0x7264>
   1c34c:	mov	r3, r0
   1c350:	mov	r1, r3
   1c354:	ldr	r0, [fp, #-8]
   1c358:	bl	1c2c4 <_start@@Base+0x98ac>
   1c35c:	mov	r3, r0
   1c360:	mov	r0, r3
   1c364:	sub	sp, fp, #4
   1c368:	pop	{fp, pc}
   1c36c:	push	{fp, lr}
   1c370:	add	fp, sp, #4
   1c374:	sub	sp, sp, #16
   1c378:	str	r0, [fp, #-16]
   1c37c:	str	r1, [fp, #-20]	; 0xffffffec
   1c380:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c384:	cmp	r3, #0
   1c388:	beq	1c3bc <_start@@Base+0x99a4>
   1c38c:	mov	r1, #11
   1c390:	ldr	r0, [fp, #-16]
   1c394:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1c398:	str	r0, [fp, #-8]
   1c39c:	ldr	r3, [fp, #-8]
   1c3a0:	cmp	r3, #0
   1c3a4:	beq	1c3bc <_start@@Base+0x99a4>
   1c3a8:	ldr	r3, [fp, #-8]
   1c3ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c3b0:	str	r2, [r3]
   1c3b4:	mov	r3, #0
   1c3b8:	b	1c3c0 <_start@@Base+0x99a8>
   1c3bc:	mvn	r3, #0
   1c3c0:	mov	r0, r3
   1c3c4:	sub	sp, fp, #4
   1c3c8:	pop	{fp, pc}
   1c3cc:	push	{fp, lr}
   1c3d0:	add	fp, sp, #4
   1c3d4:	sub	sp, sp, #8
   1c3d8:	str	r0, [fp, #-8]
   1c3dc:	ldr	r0, [fp, #-8]
   1c3e0:	bl	2a7d8 <flatcc_builder_start_offset_vector@@Base>
   1c3e4:	mov	r3, r0
   1c3e8:	mov	r0, r3
   1c3ec:	sub	sp, fp, #4
   1c3f0:	pop	{fp, pc}
   1c3f4:	push	{fp, lr}
   1c3f8:	add	fp, sp, #4
   1c3fc:	sub	sp, sp, #8
   1c400:	str	r0, [fp, #-8]
   1c404:	ldr	r0, [fp, #-8]
   1c408:	bl	2be2c <flatcc_builder_end_offset_vector@@Base>
   1c40c:	mov	r3, r0
   1c410:	mov	r1, r3
   1c414:	ldr	r0, [fp, #-8]
   1c418:	bl	1c36c <_start@@Base+0x9954>
   1c41c:	mov	r3, r0
   1c420:	mov	r0, r3
   1c424:	sub	sp, fp, #4
   1c428:	pop	{fp, pc}
   1c42c:	push	{fp, lr}
   1c430:	add	fp, sp, #4
   1c434:	sub	sp, sp, #8
   1c438:	str	r0, [fp, #-8]
   1c43c:	str	r1, [fp, #-12]
   1c440:	ldr	r1, [fp, #-12]
   1c444:	ldr	r0, [fp, #-8]
   1c448:	bl	2a084 <flatcc_builder_extend_offset_vector@@Base>
   1c44c:	mov	r3, r0
   1c450:	mov	r0, r3
   1c454:	sub	sp, fp, #4
   1c458:	pop	{fp, pc}
   1c45c:	push	{fp, lr}
   1c460:	add	fp, sp, #4
   1c464:	sub	sp, sp, #16
   1c468:	str	r0, [fp, #-8]
   1c46c:	str	r1, [fp, #-12]
   1c470:	str	r2, [fp, #-16]
   1c474:	ldr	r2, [fp, #-16]
   1c478:	ldr	r1, [fp, #-12]
   1c47c:	ldr	r0, [fp, #-8]
   1c480:	bl	2a1b0 <flatcc_builder_append_offset_vector@@Base>
   1c484:	mov	r3, r0
   1c488:	mov	r0, r3
   1c48c:	sub	sp, fp, #4
   1c490:	pop	{fp, pc}
   1c494:	push	{fp, lr}
   1c498:	add	fp, sp, #4
   1c49c:	sub	sp, sp, #8
   1c4a0:	str	r0, [fp, #-8]
   1c4a4:	str	r1, [fp, #-12]
   1c4a8:	ldr	r1, [fp, #-12]
   1c4ac:	ldr	r0, [fp, #-8]
   1c4b0:	bl	2a524 <flatcc_builder_truncate_offset_vector@@Base>
   1c4b4:	mov	r3, r0
   1c4b8:	mov	r0, r3
   1c4bc:	sub	sp, fp, #4
   1c4c0:	pop	{fp, pc}
   1c4c4:	push	{fp, lr}
   1c4c8:	add	fp, sp, #4
   1c4cc:	sub	sp, sp, #8
   1c4d0:	str	r0, [fp, #-8]
   1c4d4:	ldr	r0, [fp, #-8]
   1c4d8:	bl	2bf78 <flatcc_builder_offset_vector_edit@@Base>
   1c4dc:	mov	r3, r0
   1c4e0:	mov	r0, r3
   1c4e4:	sub	sp, fp, #4
   1c4e8:	pop	{fp, pc}
   1c4ec:	push	{fp, lr}
   1c4f0:	add	fp, sp, #4
   1c4f4:	sub	sp, sp, #8
   1c4f8:	str	r0, [fp, #-8]
   1c4fc:	ldr	r0, [fp, #-8]
   1c500:	bl	2bfa0 <flatcc_builder_offset_vector_count@@Base>
   1c504:	mov	r3, r0
   1c508:	mov	r0, r3
   1c50c:	sub	sp, fp, #4
   1c510:	pop	{fp, pc}
   1c514:	push	{fp, lr}
   1c518:	add	fp, sp, #4
   1c51c:	sub	sp, sp, #8
   1c520:	str	r0, [fp, #-8]
   1c524:	str	r1, [fp, #-12]
   1c528:	ldr	r3, [fp, #-12]
   1c52c:	cmp	r3, #0
   1c530:	beq	1c548 <_start@@Base+0x9b30>
   1c534:	ldr	r1, [fp, #-12]
   1c538:	ldr	r0, [fp, #-8]
   1c53c:	bl	2a0e0 <flatcc_builder_offset_vector_push@@Base>
   1c540:	mov	r3, r0
   1c544:	b	1c54c <_start@@Base+0x9b34>
   1c548:	mov	r3, #0
   1c54c:	mov	r0, r3
   1c550:	sub	sp, fp, #4
   1c554:	pop	{fp, pc}
   1c558:	push	{fp, lr}
   1c55c:	add	fp, sp, #4
   1c560:	sub	sp, sp, #8
   1c564:	str	r0, [fp, #-8]
   1c568:	ldr	r0, [fp, #-8]
   1c56c:	bl	1afa4 <_start@@Base+0x858c>
   1c570:	mov	r3, r0
   1c574:	mov	r0, r3
   1c578:	sub	sp, fp, #4
   1c57c:	pop	{fp, pc}
   1c580:	push	{fp, lr}
   1c584:	add	fp, sp, #4
   1c588:	sub	sp, sp, #8
   1c58c:	str	r0, [fp, #-8]
   1c590:	ldr	r0, [fp, #-8]
   1c594:	bl	1afd0 <_start@@Base+0x85b8>
   1c598:	mov	r3, r0
   1c59c:	mov	r1, r3
   1c5a0:	ldr	r0, [fp, #-8]
   1c5a4:	bl	1c514 <_start@@Base+0x9afc>
   1c5a8:	mov	r3, r0
   1c5ac:	mov	r0, r3
   1c5b0:	sub	sp, fp, #4
   1c5b4:	pop	{fp, pc}
   1c5b8:	push	{fp, lr}
   1c5bc:	add	fp, sp, #4
   1c5c0:	sub	sp, sp, #16
   1c5c4:	str	r0, [fp, #-16]
   1c5c8:	str	r1, [fp, #-20]	; 0xffffffec
   1c5cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c5d0:	cmp	r3, #0
   1c5d4:	beq	1c608 <_start@@Base+0x9bf0>
   1c5d8:	mov	r1, #10
   1c5dc:	ldr	r0, [fp, #-16]
   1c5e0:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1c5e4:	str	r0, [fp, #-8]
   1c5e8:	ldr	r3, [fp, #-8]
   1c5ec:	cmp	r3, #0
   1c5f0:	beq	1c608 <_start@@Base+0x9bf0>
   1c5f4:	ldr	r3, [fp, #-8]
   1c5f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c5fc:	str	r2, [r3]
   1c600:	mov	r3, #0
   1c604:	b	1c60c <_start@@Base+0x9bf4>
   1c608:	mvn	r3, #0
   1c60c:	mov	r0, r3
   1c610:	sub	sp, fp, #4
   1c614:	pop	{fp, pc}
   1c618:	push	{fp, lr}
   1c61c:	add	fp, sp, #4
   1c620:	sub	sp, sp, #8
   1c624:	str	r0, [fp, #-8]
   1c628:	ldr	r0, [fp, #-8]
   1c62c:	bl	2a7d8 <flatcc_builder_start_offset_vector@@Base>
   1c630:	mov	r3, r0
   1c634:	mov	r0, r3
   1c638:	sub	sp, fp, #4
   1c63c:	pop	{fp, pc}
   1c640:	push	{fp, lr}
   1c644:	add	fp, sp, #4
   1c648:	sub	sp, sp, #8
   1c64c:	str	r0, [fp, #-8]
   1c650:	ldr	r0, [fp, #-8]
   1c654:	bl	2be2c <flatcc_builder_end_offset_vector@@Base>
   1c658:	mov	r3, r0
   1c65c:	mov	r1, r3
   1c660:	ldr	r0, [fp, #-8]
   1c664:	bl	1c5b8 <_start@@Base+0x9ba0>
   1c668:	mov	r3, r0
   1c66c:	mov	r0, r3
   1c670:	sub	sp, fp, #4
   1c674:	pop	{fp, pc}
   1c678:	push	{fp, lr}
   1c67c:	add	fp, sp, #4
   1c680:	sub	sp, sp, #16
   1c684:	str	r0, [fp, #-8]
   1c688:	str	r1, [fp, #-12]
   1c68c:	str	r2, [fp, #-16]
   1c690:	ldr	r2, [fp, #-16]
   1c694:	ldr	r1, [fp, #-12]
   1c698:	ldr	r0, [fp, #-8]
   1c69c:	bl	2a854 <flatcc_builder_create_offset_vector@@Base>
   1c6a0:	mov	r3, r0
   1c6a4:	mov	r1, r3
   1c6a8:	ldr	r0, [fp, #-8]
   1c6ac:	bl	1c5b8 <_start@@Base+0x9ba0>
   1c6b0:	mov	r3, r0
   1c6b4:	mov	r0, r3
   1c6b8:	sub	sp, fp, #4
   1c6bc:	pop	{fp, pc}
   1c6c0:	push	{fp, lr}
   1c6c4:	add	fp, sp, #4
   1c6c8:	sub	sp, sp, #8
   1c6cc:	str	r0, [fp, #-8]
   1c6d0:	str	r1, [fp, #-12]
   1c6d4:	ldr	r1, [fp, #-12]
   1c6d8:	ldr	r0, [fp, #-8]
   1c6dc:	bl	1a248 <_start@@Base+0x7830>
   1c6e0:	mov	r3, r0
   1c6e4:	mov	r1, r3
   1c6e8:	ldr	r0, [fp, #-8]
   1c6ec:	bl	1a31c <_start@@Base+0x7904>
   1c6f0:	mov	r3, r0
   1c6f4:	mov	r0, r3
   1c6f8:	sub	sp, fp, #4
   1c6fc:	pop	{fp, pc}
   1c700:	push	{fp, lr}
   1c704:	add	fp, sp, #4
   1c708:	sub	sp, sp, #16
   1c70c:	str	r0, [fp, #-8]
   1c710:	str	r1, [fp, #-12]
   1c714:	str	r2, [fp, #-16]
   1c718:	str	r3, [fp, #-20]	; 0xffffffec
   1c71c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c720:	ldr	r2, [fp, #-16]
   1c724:	ldr	r1, [fp, #-12]
   1c728:	ldr	r0, [fp, #-8]
   1c72c:	bl	1a288 <_start@@Base+0x7870>
   1c730:	mov	r3, r0
   1c734:	mov	r1, r3
   1c738:	ldr	r0, [fp, #-8]
   1c73c:	bl	1a31c <_start@@Base+0x7904>
   1c740:	mov	r3, r0
   1c744:	mov	r0, r3
   1c748:	sub	sp, fp, #4
   1c74c:	pop	{fp, pc}
   1c750:	push	{fp, lr}
   1c754:	add	fp, sp, #4
   1c758:	sub	sp, sp, #16
   1c75c:	str	r0, [fp, #-16]
   1c760:	str	r1, [fp, #-20]	; 0xffffffec
   1c764:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c768:	cmp	r3, #0
   1c76c:	beq	1c7a0 <_start@@Base+0x9d88>
   1c770:	mov	r1, #24
   1c774:	ldr	r0, [fp, #-16]
   1c778:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1c77c:	str	r0, [fp, #-8]
   1c780:	ldr	r3, [fp, #-8]
   1c784:	cmp	r3, #0
   1c788:	beq	1c7a0 <_start@@Base+0x9d88>
   1c78c:	ldr	r3, [fp, #-8]
   1c790:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c794:	str	r2, [r3]
   1c798:	mov	r3, #0
   1c79c:	b	1c7a4 <_start@@Base+0x9d8c>
   1c7a0:	mvn	r3, #0
   1c7a4:	mov	r0, r3
   1c7a8:	sub	sp, fp, #4
   1c7ac:	pop	{fp, pc}
   1c7b0:	push	{fp, lr}
   1c7b4:	add	fp, sp, #4
   1c7b8:	sub	sp, sp, #8
   1c7bc:	str	r0, [fp, #-8]
   1c7c0:	ldr	r0, [fp, #-8]
   1c7c4:	bl	19d50 <_start@@Base+0x7338>
   1c7c8:	mov	r3, r0
   1c7cc:	mov	r0, r3
   1c7d0:	sub	sp, fp, #4
   1c7d4:	pop	{fp, pc}
   1c7d8:	push	{fp, lr}
   1c7dc:	add	fp, sp, #4
   1c7e0:	sub	sp, sp, #8
   1c7e4:	str	r0, [fp, #-8]
   1c7e8:	ldr	r0, [fp, #-8]
   1c7ec:	bl	19d84 <_start@@Base+0x736c>
   1c7f0:	mov	r3, r0
   1c7f4:	mov	r1, r3
   1c7f8:	ldr	r0, [fp, #-8]
   1c7fc:	bl	1c750 <_start@@Base+0x9d38>
   1c800:	mov	r3, r0
   1c804:	mov	r0, r3
   1c808:	sub	sp, fp, #4
   1c80c:	pop	{fp, pc}
   1c810:	push	{fp, lr}
   1c814:	add	fp, sp, #4
   1c818:	sub	sp, sp, #16
   1c81c:	str	r0, [fp, #-8]
   1c820:	str	r1, [fp, #-12]
   1c824:	str	r2, [fp, #-16]
   1c828:	ldr	r2, [fp, #-16]
   1c82c:	ldr	r1, [fp, #-12]
   1c830:	ldr	r0, [fp, #-8]
   1c834:	bl	19dac <_start@@Base+0x7394>
   1c838:	mov	r3, r0
   1c83c:	mov	r1, r3
   1c840:	ldr	r0, [fp, #-8]
   1c844:	bl	1c750 <_start@@Base+0x9d38>
   1c848:	mov	r3, r0
   1c84c:	mov	r0, r3
   1c850:	sub	sp, fp, #4
   1c854:	pop	{fp, pc}
   1c858:	push	{fp, lr}
   1c85c:	add	fp, sp, #4
   1c860:	sub	sp, sp, #8
   1c864:	str	r0, [fp, #-8]
   1c868:	str	r1, [fp, #-12]
   1c86c:	ldr	r1, [fp, #-12]
   1c870:	ldr	r0, [fp, #-8]
   1c874:	bl	19df8 <_start@@Base+0x73e0>
   1c878:	mov	r3, r0
   1c87c:	mov	r1, r3
   1c880:	ldr	r0, [fp, #-8]
   1c884:	bl	1c750 <_start@@Base+0x9d38>
   1c888:	mov	r3, r0
   1c88c:	mov	r0, r3
   1c890:	sub	sp, fp, #4
   1c894:	pop	{fp, pc}
   1c898:	push	{fp, lr}
   1c89c:	add	fp, sp, #4
   1c8a0:	sub	sp, sp, #16
   1c8a4:	str	r0, [fp, #-8]
   1c8a8:	str	r1, [fp, #-12]
   1c8ac:	str	r2, [fp, #-16]
   1c8b0:	str	r3, [fp, #-20]	; 0xffffffec
   1c8b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c8b8:	ldr	r2, [fp, #-16]
   1c8bc:	ldr	r1, [fp, #-12]
   1c8c0:	ldr	r0, [fp, #-8]
   1c8c4:	bl	19e48 <_start@@Base+0x7430>
   1c8c8:	mov	r3, r0
   1c8cc:	mov	r1, r3
   1c8d0:	ldr	r0, [fp, #-8]
   1c8d4:	bl	1c750 <_start@@Base+0x9d38>
   1c8d8:	mov	r3, r0
   1c8dc:	mov	r0, r3
   1c8e0:	sub	sp, fp, #4
   1c8e4:	pop	{fp, pc}
   1c8e8:	push	{fp, lr}
   1c8ec:	add	fp, sp, #4
   1c8f0:	sub	sp, sp, #16
   1c8f4:	str	r0, [fp, #-8]
   1c8f8:	str	r1, [fp, #-12]
   1c8fc:	str	r2, [fp, #-16]
   1c900:	ldr	r2, [fp, #-16]
   1c904:	ldr	r1, [fp, #-12]
   1c908:	ldr	r0, [fp, #-8]
   1c90c:	bl	29fc4 <flatcc_builder_append_vector@@Base>
   1c910:	mov	r3, r0
   1c914:	mov	r0, r3
   1c918:	sub	sp, fp, #4
   1c91c:	pop	{fp, pc}
   1c920:	push	{fp, lr}
   1c924:	add	fp, sp, #4
   1c928:	sub	sp, sp, #16
   1c92c:	str	r0, [fp, #-16]
   1c930:	str	r1, [fp, #-20]	; 0xffffffec
   1c934:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c938:	cmp	r3, #0
   1c93c:	beq	1c970 <_start@@Base+0x9f58>
   1c940:	mov	r1, #12
   1c944:	ldr	r0, [fp, #-16]
   1c948:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1c94c:	str	r0, [fp, #-8]
   1c950:	ldr	r3, [fp, #-8]
   1c954:	cmp	r3, #0
   1c958:	beq	1c970 <_start@@Base+0x9f58>
   1c95c:	ldr	r3, [fp, #-8]
   1c960:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c964:	str	r2, [r3]
   1c968:	mov	r3, #0
   1c96c:	b	1c974 <_start@@Base+0x9f5c>
   1c970:	mvn	r3, #0
   1c974:	mov	r0, r3
   1c978:	sub	sp, fp, #4
   1c97c:	pop	{fp, pc}
   1c980:	push	{fp, lr}
   1c984:	add	fp, sp, #4
   1c988:	sub	sp, sp, #8
   1c98c:	str	r0, [fp, #-8]
   1c990:	ldr	r0, [fp, #-8]
   1c994:	bl	1afa4 <_start@@Base+0x858c>
   1c998:	mov	r3, r0
   1c99c:	mov	r0, r3
   1c9a0:	sub	sp, fp, #4
   1c9a4:	pop	{fp, pc}
   1c9a8:	push	{fp, lr}
   1c9ac:	add	fp, sp, #4
   1c9b0:	sub	sp, sp, #8
   1c9b4:	str	r0, [fp, #-8]
   1c9b8:	ldr	r0, [fp, #-8]
   1c9bc:	bl	1afd0 <_start@@Base+0x85b8>
   1c9c0:	mov	r3, r0
   1c9c4:	mov	r1, r3
   1c9c8:	ldr	r0, [fp, #-8]
   1c9cc:	bl	1c920 <_start@@Base+0x9f08>
   1c9d0:	mov	r3, r0
   1c9d4:	mov	r0, r3
   1c9d8:	sub	sp, fp, #4
   1c9dc:	pop	{fp, pc}
   1c9e0:	push	{fp, lr}
   1c9e4:	add	fp, sp, #4
   1c9e8:	sub	sp, sp, #24
   1c9ec:	str	r0, [fp, #-16]
   1c9f0:	sub	r3, fp, #24
   1c9f4:	stm	r3, {r1, r2}
   1c9f8:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1c9fc:	cmp	r3, #0
   1ca00:	bne	1ca0c <_start@@Base+0x9ff4>
   1ca04:	mov	r3, #0
   1ca08:	b	1ca84 <_start@@Base+0xa06c>
   1ca0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca10:	cmp	r3, #0
   1ca14:	bne	1ca20 <_start@@Base+0xa008>
   1ca18:	mvn	r3, #0
   1ca1c:	b	1ca84 <_start@@Base+0xa06c>
   1ca20:	mov	r3, #1
   1ca24:	mov	r2, #1
   1ca28:	mov	r1, #7
   1ca2c:	ldr	r0, [fp, #-16]
   1ca30:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1ca34:	str	r0, [fp, #-8]
   1ca38:	ldr	r3, [fp, #-8]
   1ca3c:	cmp	r3, #0
   1ca40:	beq	1ca60 <_start@@Base+0xa048>
   1ca44:	mov	r1, #8
   1ca48:	ldr	r0, [fp, #-16]
   1ca4c:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1ca50:	str	r0, [fp, #-12]
   1ca54:	ldr	r3, [fp, #-12]
   1ca58:	cmp	r3, #0
   1ca5c:	bne	1ca68 <_start@@Base+0xa050>
   1ca60:	mvn	r3, #0
   1ca64:	b	1ca84 <_start@@Base+0xa06c>
   1ca68:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1ca6c:	ldr	r3, [fp, #-8]
   1ca70:	strb	r2, [r3]
   1ca74:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ca78:	ldr	r3, [fp, #-12]
   1ca7c:	str	r2, [r3]
   1ca80:	mov	r3, #0
   1ca84:	mov	r0, r3
   1ca88:	sub	sp, fp, #4
   1ca8c:	pop	{fp, pc}
   1ca90:	push	{fp, lr}
   1ca94:	add	fp, sp, #4
   1ca98:	sub	sp, sp, #16
   1ca9c:	str	r0, [fp, #-16]
   1caa0:	mov	r3, r1
   1caa4:	strb	r3, [fp, #-17]	; 0xffffffef
   1caa8:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1caac:	cmp	r3, #0
   1cab0:	bne	1cabc <_start@@Base+0xa0a4>
   1cab4:	mov	r3, #0
   1cab8:	b	1caf8 <_start@@Base+0xa0e0>
   1cabc:	mov	r3, #1
   1cac0:	mov	r2, #1
   1cac4:	mov	r1, #7
   1cac8:	ldr	r0, [fp, #-16]
   1cacc:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1cad0:	str	r0, [fp, #-8]
   1cad4:	ldr	r3, [fp, #-8]
   1cad8:	cmp	r3, #0
   1cadc:	beq	1caf4 <_start@@Base+0xa0dc>
   1cae0:	ldr	r3, [fp, #-8]
   1cae4:	ldrb	r2, [fp, #-17]	; 0xffffffef
   1cae8:	strb	r2, [r3]
   1caec:	mov	r3, #0
   1caf0:	b	1caf8 <_start@@Base+0xa0e0>
   1caf4:	mvn	r3, #0
   1caf8:	mov	r0, r3
   1cafc:	sub	sp, fp, #4
   1cb00:	pop	{fp, pc}
   1cb04:	push	{fp, lr}
   1cb08:	add	fp, sp, #4
   1cb0c:	sub	sp, sp, #24
   1cb10:	str	r0, [fp, #-16]
   1cb14:	sub	r3, fp, #24
   1cb18:	stm	r3, {r1, r2}
   1cb1c:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1cb20:	cmp	r3, #0
   1cb24:	bne	1cb30 <_start@@Base+0xa118>
   1cb28:	mov	r3, #0
   1cb2c:	b	1cb64 <_start@@Base+0xa14c>
   1cb30:	mov	r1, #8
   1cb34:	ldr	r0, [fp, #-16]
   1cb38:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1cb3c:	str	r0, [fp, #-8]
   1cb40:	ldr	r3, [fp, #-8]
   1cb44:	cmp	r3, #0
   1cb48:	beq	1cb60 <_start@@Base+0xa148>
   1cb4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cb50:	ldr	r3, [fp, #-8]
   1cb54:	str	r2, [r3]
   1cb58:	mov	r3, #0
   1cb5c:	b	1cb64 <_start@@Base+0xa14c>
   1cb60:	mvn	r3, #0
   1cb64:	mov	r0, r3
   1cb68:	sub	sp, fp, #4
   1cb6c:	pop	{fp, pc}
   1cb70:	push	{fp, lr}
   1cb74:	add	fp, sp, #4
   1cb78:	sub	sp, sp, #16
   1cb7c:	str	r0, [fp, #-16]
   1cb80:	str	r1, [fp, #-20]	; 0xffffffec
   1cb84:	sub	r3, fp, #12
   1cb88:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cb8c:	mov	r0, r3
   1cb90:	bl	1b288 <_start@@Base+0x8870>
   1cb94:	sub	r3, fp, #12
   1cb98:	ldm	r3, {r1, r2}
   1cb9c:	ldr	r0, [fp, #-16]
   1cba0:	bl	1c9e0 <_start@@Base+0x9fc8>
   1cba4:	mov	r3, r0
   1cba8:	mov	r0, r3
   1cbac:	sub	sp, fp, #4
   1cbb0:	pop	{fp, pc}
   1cbb4:	push	{fp, lr}
   1cbb8:	add	fp, sp, #4
   1cbbc:	sub	sp, sp, #16
   1cbc0:	str	r0, [fp, #-16]
   1cbc4:	str	r1, [fp, #-20]	; 0xffffffec
   1cbc8:	sub	r3, fp, #12
   1cbcc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cbd0:	mov	r0, r3
   1cbd4:	bl	1b318 <_start@@Base+0x8900>
   1cbd8:	sub	r3, fp, #12
   1cbdc:	ldm	r3, {r1, r2}
   1cbe0:	ldr	r0, [fp, #-16]
   1cbe4:	bl	1c9e0 <_start@@Base+0x9fc8>
   1cbe8:	mov	r3, r0
   1cbec:	mov	r0, r3
   1cbf0:	sub	sp, fp, #4
   1cbf4:	pop	{fp, pc}
   1cbf8:	push	{fp, lr}
   1cbfc:	add	fp, sp, #4
   1cc00:	sub	sp, sp, #8
   1cc04:	str	r0, [fp, #-8]
   1cc08:	ldr	r0, [fp, #-8]
   1cc0c:	bl	1aefc <_start@@Base+0x84e4>
   1cc10:	mov	r3, r0
   1cc14:	mov	r0, r3
   1cc18:	sub	sp, fp, #4
   1cc1c:	pop	{fp, pc}
   1cc20:	push	{fp, lr}
   1cc24:	add	fp, sp, #4
   1cc28:	sub	sp, sp, #16
   1cc2c:	str	r0, [fp, #-16]
   1cc30:	ldr	r0, [fp, #-16]
   1cc34:	bl	1af28 <_start@@Base+0x8510>
   1cc38:	str	r0, [fp, #-8]
   1cc3c:	ldr	r3, [fp, #-8]
   1cc40:	cmp	r3, #0
   1cc44:	beq	1cc5c <_start@@Base+0xa244>
   1cc48:	ldr	r1, [fp, #-8]
   1cc4c:	ldr	r0, [fp, #-16]
   1cc50:	bl	1cbb4 <_start@@Base+0xa19c>
   1cc54:	mov	r3, r0
   1cc58:	b	1cc60 <_start@@Base+0xa248>
   1cc5c:	mvn	r3, #0
   1cc60:	mov	r0, r3
   1cc64:	sub	sp, fp, #4
   1cc68:	pop	{fp, pc}
   1cc6c:	push	{fp, lr}
   1cc70:	add	fp, sp, #4
   1cc74:	sub	sp, sp, #16
   1cc78:	str	r0, [fp, #-16]
   1cc7c:	str	r1, [fp, #-20]	; 0xffffffec
   1cc80:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cc84:	cmp	r3, #0
   1cc88:	beq	1ccbc <_start@@Base+0xa2a4>
   1cc8c:	mov	r1, #9
   1cc90:	ldr	r0, [fp, #-16]
   1cc94:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1cc98:	str	r0, [fp, #-8]
   1cc9c:	ldr	r3, [fp, #-8]
   1cca0:	cmp	r3, #0
   1cca4:	beq	1ccbc <_start@@Base+0xa2a4>
   1cca8:	ldr	r3, [fp, #-8]
   1ccac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ccb0:	str	r2, [r3]
   1ccb4:	mov	r3, #0
   1ccb8:	b	1ccc0 <_start@@Base+0xa2a8>
   1ccbc:	mvn	r3, #0
   1ccc0:	mov	r0, r3
   1ccc4:	sub	sp, fp, #4
   1ccc8:	pop	{fp, pc}
   1cccc:	push	{fp, lr}
   1ccd0:	add	fp, sp, #4
   1ccd4:	sub	sp, sp, #8
   1ccd8:	str	r0, [fp, #-8]
   1ccdc:	ldr	r0, [fp, #-8]
   1cce0:	bl	1a528 <_start@@Base+0x7b10>
   1cce4:	mov	r3, r0
   1cce8:	mov	r0, r3
   1ccec:	sub	sp, fp, #4
   1ccf0:	pop	{fp, pc}
   1ccf4:	push	{fp, lr}
   1ccf8:	add	fp, sp, #4
   1ccfc:	sub	sp, sp, #8
   1cd00:	str	r0, [fp, #-8]
   1cd04:	ldr	r0, [fp, #-8]
   1cd08:	bl	1a55c <_start@@Base+0x7b44>
   1cd0c:	mov	r3, r0
   1cd10:	mov	r1, r3
   1cd14:	ldr	r0, [fp, #-8]
   1cd18:	bl	1cc6c <_start@@Base+0xa254>
   1cd1c:	mov	r3, r0
   1cd20:	mov	r0, r3
   1cd24:	sub	sp, fp, #4
   1cd28:	pop	{fp, pc}
   1cd2c:	push	{fp, lr}
   1cd30:	add	fp, sp, #4
   1cd34:	sub	sp, sp, #8
   1cd38:	str	r0, [fp, #-8]
   1cd3c:	str	r1, [fp, #-12]
   1cd40:	ldr	r1, [fp, #-12]
   1cd44:	ldr	r0, [fp, #-8]
   1cd48:	bl	1a584 <_start@@Base+0x7b6c>
   1cd4c:	mov	r3, r0
   1cd50:	mov	r1, r3
   1cd54:	ldr	r0, [fp, #-8]
   1cd58:	bl	1cc6c <_start@@Base+0xa254>
   1cd5c:	mov	r3, r0
   1cd60:	mov	r0, r3
   1cd64:	sub	sp, fp, #4
   1cd68:	pop	{fp, pc}
   1cd6c:	push	{fp, lr}
   1cd70:	add	fp, sp, #4
   1cd74:	sub	sp, sp, #16
   1cd78:	str	r0, [fp, #-8]
   1cd7c:	str	r1, [fp, #-12]
   1cd80:	str	r2, [fp, #-16]
   1cd84:	str	r3, [fp, #-20]	; 0xffffffec
   1cd88:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cd8c:	ldr	r2, [fp, #-16]
   1cd90:	ldr	r1, [fp, #-12]
   1cd94:	ldr	r0, [fp, #-8]
   1cd98:	bl	1a5d4 <_start@@Base+0x7bbc>
   1cd9c:	mov	r3, r0
   1cda0:	mov	r1, r3
   1cda4:	ldr	r0, [fp, #-8]
   1cda8:	bl	1cc6c <_start@@Base+0xa254>
   1cdac:	mov	r3, r0
   1cdb0:	mov	r0, r3
   1cdb4:	sub	sp, fp, #4
   1cdb8:	pop	{fp, pc}
   1cdbc:	push	{fp, lr}
   1cdc0:	add	fp, sp, #4
   1cdc4:	sub	sp, sp, #8
   1cdc8:	str	r0, [fp, #-8]
   1cdcc:	str	r1, [fp, #-12]
   1cdd0:	ldr	r1, [fp, #-12]
   1cdd4:	ldr	r0, [fp, #-8]
   1cdd8:	bl	29e3c <flatcc_builder_extend_vector@@Base>
   1cddc:	mov	r3, r0
   1cde0:	mov	r0, r3
   1cde4:	sub	sp, fp, #4
   1cde8:	pop	{fp, pc}
   1cdec:	push	{fp, lr}
   1cdf0:	add	fp, sp, #4
   1cdf4:	sub	sp, sp, #8
   1cdf8:	str	r0, [fp, #-8]
   1cdfc:	str	r1, [fp, #-12]
   1ce00:	ldr	r1, [fp, #-12]
   1ce04:	ldr	r0, [fp, #-8]
   1ce08:	bl	2a414 <flatcc_builder_truncate_vector@@Base>
   1ce0c:	mov	r3, r0
   1ce10:	mov	r0, r3
   1ce14:	sub	sp, fp, #4
   1ce18:	pop	{fp, pc}
   1ce1c:	push	{fp, lr}
   1ce20:	add	fp, sp, #4
   1ce24:	sub	sp, sp, #8
   1ce28:	str	r0, [fp, #-8]
   1ce2c:	ldr	r0, [fp, #-8]
   1ce30:	bl	2ba80 <flatcc_builder_vector_edit@@Base>
   1ce34:	mov	r3, r0
   1ce38:	mov	r0, r3
   1ce3c:	sub	sp, fp, #4
   1ce40:	pop	{fp, pc}
   1ce44:	push	{fp, lr}
   1ce48:	add	fp, sp, #4
   1ce4c:	sub	sp, sp, #8
   1ce50:	str	r0, [fp, #-8]
   1ce54:	ldr	r0, [fp, #-8]
   1ce58:	bl	2ba54 <flatcc_builder_vector_count@@Base>
   1ce5c:	mov	r3, r0
   1ce60:	mov	r0, r3
   1ce64:	sub	sp, fp, #4
   1ce68:	pop	{fp, pc}
   1ce6c:	push	{fp, lr}
   1ce70:	add	fp, sp, #4
   1ce74:	sub	sp, sp, #16
   1ce78:	str	r0, [fp, #-16]
   1ce7c:	str	r1, [fp, #-20]	; 0xffffffec
   1ce80:	mov	r1, #1
   1ce84:	ldr	r0, [fp, #-16]
   1ce88:	bl	29e3c <flatcc_builder_extend_vector@@Base>
   1ce8c:	str	r0, [fp, #-8]
   1ce90:	ldr	r3, [fp, #-8]
   1ce94:	cmp	r3, #0
   1ce98:	beq	1cebc <_start@@Base+0xa4a4>
   1ce9c:	bl	14930 <_start@@Base+0x1f18>
   1cea0:	mov	r3, r0
   1cea4:	mov	r2, r3
   1cea8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ceac:	ldr	r0, [fp, #-8]
   1ceb0:	bl	12930 <memcpy@plt>
   1ceb4:	ldr	r3, [fp, #-8]
   1ceb8:	b	1cec0 <_start@@Base+0xa4a8>
   1cebc:	mov	r3, #0
   1cec0:	mov	r0, r3
   1cec4:	sub	sp, fp, #4
   1cec8:	pop	{fp, pc}
   1cecc:	push	{fp, lr}
   1ced0:	add	fp, sp, #4
   1ced4:	sub	sp, sp, #16
   1ced8:	str	r0, [fp, #-16]
   1cedc:	mov	r3, r1
   1cee0:	strh	r3, [fp, #-18]	; 0xffffffee
   1cee4:	mov	r3, r2
   1cee8:	strb	r3, [fp, #-19]	; 0xffffffed
   1ceec:	mov	r1, #1
   1cef0:	ldr	r0, [fp, #-16]
   1cef4:	bl	29e3c <flatcc_builder_extend_vector@@Base>
   1cef8:	str	r0, [fp, #-8]
   1cefc:	ldr	r3, [fp, #-8]
   1cf00:	cmp	r3, #0
   1cf04:	beq	1cf24 <_start@@Base+0xa50c>
   1cf08:	ldrsb	r2, [fp, #-19]	; 0xffffffed
   1cf0c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1cf10:	mov	r1, r3
   1cf14:	ldr	r0, [fp, #-8]
   1cf18:	bl	1a444 <_start@@Base+0x7a2c>
   1cf1c:	mov	r3, r0
   1cf20:	b	1cf28 <_start@@Base+0xa510>
   1cf24:	mov	r3, #0
   1cf28:	mov	r0, r3
   1cf2c:	sub	sp, fp, #4
   1cf30:	pop	{fp, pc}
   1cf34:	push	{fp, lr}
   1cf38:	add	fp, sp, #4
   1cf3c:	sub	sp, sp, #16
   1cf40:	str	r0, [fp, #-16]
   1cf44:	str	r1, [fp, #-20]	; 0xffffffec
   1cf48:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf4c:	cmp	r3, #0
   1cf50:	beq	1cf84 <_start@@Base+0xa56c>
   1cf54:	mov	r1, #13
   1cf58:	ldr	r0, [fp, #-16]
   1cf5c:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1cf60:	str	r0, [fp, #-8]
   1cf64:	ldr	r3, [fp, #-8]
   1cf68:	cmp	r3, #0
   1cf6c:	beq	1cf84 <_start@@Base+0xa56c>
   1cf70:	ldr	r3, [fp, #-8]
   1cf74:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cf78:	str	r2, [r3]
   1cf7c:	mov	r3, #0
   1cf80:	b	1cf88 <_start@@Base+0xa570>
   1cf84:	mvn	r3, #0
   1cf88:	mov	r0, r3
   1cf8c:	sub	sp, fp, #4
   1cf90:	pop	{fp, pc}
   1cf94:	push	{fp, lr}
   1cf98:	add	fp, sp, #4
   1cf9c:	sub	sp, sp, #8
   1cfa0:	str	r0, [fp, #-8]
   1cfa4:	ldr	r3, [pc, #56]	; 1cfe4 <_start@@Base+0xa5cc>
   1cfa8:	add	r3, pc, r3
   1cfac:	mov	r1, r3
   1cfb0:	ldr	r0, [fp, #-8]
   1cfb4:	bl	1a360 <_start@@Base+0x7948>
   1cfb8:	mov	r3, r0
   1cfbc:	cmp	r3, #0
   1cfc0:	bne	1cfd4 <_start@@Base+0xa5bc>
   1cfc4:	ldr	r0, [fp, #-8]
   1cfc8:	bl	1afa4 <_start@@Base+0x858c>
   1cfcc:	mov	r3, r0
   1cfd0:	b	1cfd8 <_start@@Base+0xa5c0>
   1cfd4:	mvn	r3, #0
   1cfd8:	mov	r0, r3
   1cfdc:	sub	sp, fp, #4
   1cfe0:	pop	{fp, pc}
   1cfe4:	andeq	r3, r1, r0, ror #23
   1cfe8:	push	{fp, lr}
   1cfec:	add	fp, sp, #4
   1cff0:	sub	sp, sp, #8
   1cff4:	str	r0, [fp, #-8]
   1cff8:	ldr	r0, [fp, #-8]
   1cffc:	bl	1afd0 <_start@@Base+0x85b8>
   1d000:	mov	r3, r0
   1d004:	mov	r1, r3
   1d008:	ldr	r0, [fp, #-8]
   1d00c:	bl	1a3d0 <_start@@Base+0x79b8>
   1d010:	mov	r3, r0
   1d014:	mov	r1, r3
   1d018:	ldr	r0, [fp, #-8]
   1d01c:	bl	1cf34 <_start@@Base+0xa51c>
   1d020:	mov	r3, r0
   1d024:	mov	r0, r3
   1d028:	sub	sp, fp, #4
   1d02c:	pop	{fp, pc}
   1d030:	push	{fp, lr}
   1d034:	add	fp, sp, #4
   1d038:	sub	sp, sp, #24
   1d03c:	str	r0, [fp, #-8]
   1d040:	str	r1, [fp, #-12]
   1d044:	str	r2, [fp, #-16]
   1d048:	strh	r3, [fp, #-18]	; 0xffffffee
   1d04c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d050:	cmp	r3, #0
   1d054:	beq	1d060 <_start@@Base+0xa648>
   1d058:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d05c:	b	1d064 <_start@@Base+0xa64c>
   1d060:	mov	r3, #8
   1d064:	mvn	r2, #0
   1d068:	str	r2, [sp, #4]
   1d06c:	str	r3, [sp]
   1d070:	mov	r3, #1
   1d074:	ldr	r2, [fp, #-16]
   1d078:	ldr	r1, [fp, #-12]
   1d07c:	ldr	r0, [fp, #-8]
   1d080:	bl	2b764 <flatcc_builder_create_vector@@Base>
   1d084:	mov	r3, r0
   1d088:	mov	r1, r3
   1d08c:	ldr	r0, [fp, #-8]
   1d090:	bl	1cf34 <_start@@Base+0xa51c>
   1d094:	mov	r3, r0
   1d098:	mov	r0, r3
   1d09c:	sub	sp, fp, #4
   1d0a0:	pop	{fp, pc}
   1d0a4:	push	{fp, lr}
   1d0a8:	add	fp, sp, #4
   1d0ac:	sub	sp, sp, #16
   1d0b0:	str	r0, [fp, #-16]
   1d0b4:	str	r1, [fp, #-20]	; 0xffffffec
   1d0b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d0bc:	cmp	r3, #0
   1d0c0:	beq	1d0f4 <_start@@Base+0xa6dc>
   1d0c4:	mov	r1, #14
   1d0c8:	ldr	r0, [fp, #-16]
   1d0cc:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1d0d0:	str	r0, [fp, #-8]
   1d0d4:	ldr	r3, [fp, #-8]
   1d0d8:	cmp	r3, #0
   1d0dc:	beq	1d0f4 <_start@@Base+0xa6dc>
   1d0e0:	ldr	r3, [fp, #-8]
   1d0e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d0e8:	str	r2, [r3]
   1d0ec:	mov	r3, #0
   1d0f0:	b	1d0f8 <_start@@Base+0xa6e0>
   1d0f4:	mvn	r3, #0
   1d0f8:	mov	r0, r3
   1d0fc:	sub	sp, fp, #4
   1d100:	pop	{fp, pc}
   1d104:	push	{fp, lr}
   1d108:	add	fp, sp, #4
   1d10c:	sub	sp, sp, #8
   1d110:	str	r0, [fp, #-8]
   1d114:	ldr	r0, [fp, #-8]
   1d118:	bl	1ae54 <_start@@Base+0x843c>
   1d11c:	mov	r3, r0
   1d120:	mov	r0, r3
   1d124:	sub	sp, fp, #4
   1d128:	pop	{fp, pc}
   1d12c:	push	{fp, lr}
   1d130:	add	fp, sp, #4
   1d134:	sub	sp, sp, #8
   1d138:	str	r0, [fp, #-8]
   1d13c:	ldr	r0, [fp, #-8]
   1d140:	bl	1ae80 <_start@@Base+0x8468>
   1d144:	mov	r3, r0
   1d148:	mov	r1, r3
   1d14c:	ldr	r0, [fp, #-8]
   1d150:	bl	1d0a4 <_start@@Base+0xa68c>
   1d154:	mov	r3, r0
   1d158:	mov	r0, r3
   1d15c:	sub	sp, fp, #4
   1d160:	pop	{fp, pc}
   1d164:	push	{fp, lr}
   1d168:	add	fp, sp, #4
   1d16c:	sub	sp, sp, #24
   1d170:	str	r0, [fp, #-8]
   1d174:	str	r1, [fp, #-12]
   1d178:	strd	r2, [fp, #-20]	; 0xffffffec
   1d17c:	ldrh	r3, [fp, #4]
   1d180:	str	r3, [sp]
   1d184:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1d188:	ldr	r1, [fp, #-12]
   1d18c:	ldr	r0, [fp, #-8]
   1d190:	bl	1bb04 <_start@@Base+0x90ec>
   1d194:	mov	r3, r0
   1d198:	mov	r1, r3
   1d19c:	ldr	r0, [fp, #-8]
   1d1a0:	bl	1d0a4 <_start@@Base+0xa68c>
   1d1a4:	mov	r3, r0
   1d1a8:	mov	r0, r3
   1d1ac:	sub	sp, fp, #4
   1d1b0:	pop	{fp, pc}
   1d1b4:	push	{fp, lr}
   1d1b8:	add	fp, sp, #4
   1d1bc:	sub	sp, sp, #16
   1d1c0:	str	r0, [fp, #-16]
   1d1c4:	mov	r3, r1
   1d1c8:	strb	r3, [fp, #-17]	; 0xffffffef
   1d1cc:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1d1d0:	cmp	r3, #1
   1d1d4:	bne	1d1e0 <_start@@Base+0xa7c8>
   1d1d8:	mov	r3, #0
   1d1dc:	b	1d220 <_start@@Base+0xa808>
   1d1e0:	mov	r3, #1
   1d1e4:	mov	r2, #1
   1d1e8:	mov	r1, #15
   1d1ec:	ldr	r0, [fp, #-16]
   1d1f0:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d1f4:	str	r0, [fp, #-8]
   1d1f8:	ldr	r3, [fp, #-8]
   1d1fc:	cmp	r3, #0
   1d200:	bne	1d20c <_start@@Base+0xa7f4>
   1d204:	mvn	r3, #0
   1d208:	b	1d220 <_start@@Base+0xa808>
   1d20c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1d210:	mov	r1, r3
   1d214:	ldr	r0, [fp, #-8]
   1d218:	bl	19d0c <_start@@Base+0x72f4>
   1d21c:	mov	r3, #0
   1d220:	mov	r0, r3
   1d224:	sub	sp, fp, #4
   1d228:	pop	{fp, pc}
   1d22c:	push	{fp, lr}
   1d230:	add	fp, sp, #4
   1d234:	sub	sp, sp, #8
   1d238:	str	r0, [fp, #-8]
   1d23c:	ldr	r0, [fp, #-8]
   1d240:	bl	1afa4 <_start@@Base+0x858c>
   1d244:	mov	r3, r0
   1d248:	mov	r0, r3
   1d24c:	sub	sp, fp, #4
   1d250:	pop	{fp, pc}
   1d254:	push	{fp, lr}
   1d258:	add	fp, sp, #4
   1d25c:	sub	sp, sp, #8
   1d260:	str	r0, [fp, #-8]
   1d264:	ldr	r0, [fp, #-8]
   1d268:	bl	1afd0 <_start@@Base+0x85b8>
   1d26c:	mov	r3, r0
   1d270:	mov	r1, r3
   1d274:	ldr	r0, [fp, #-8]
   1d278:	bl	1b04c <_start@@Base+0x8634>
   1d27c:	mov	r3, r0
   1d280:	mov	r0, r3
   1d284:	sub	sp, fp, #4
   1d288:	pop	{fp, pc}
   1d28c:	push	{fp, lr}
   1d290:	add	fp, sp, #4
   1d294:	sub	sp, sp, #8
   1d298:	str	r0, [fp, #-8]
   1d29c:	ldr	r3, [pc, #56]	; 1d2dc <_start@@Base+0xa8c4>
   1d2a0:	add	r3, pc, r3
   1d2a4:	mov	r1, r3
   1d2a8:	ldr	r0, [fp, #-8]
   1d2ac:	bl	1a360 <_start@@Base+0x7948>
   1d2b0:	mov	r3, r0
   1d2b4:	cmp	r3, #0
   1d2b8:	bne	1d2cc <_start@@Base+0xa8b4>
   1d2bc:	ldr	r0, [fp, #-8]
   1d2c0:	bl	1afa4 <_start@@Base+0x858c>
   1d2c4:	mov	r3, r0
   1d2c8:	b	1d2d0 <_start@@Base+0xa8b8>
   1d2cc:	mvn	r3, #0
   1d2d0:	mov	r0, r3
   1d2d4:	sub	sp, fp, #4
   1d2d8:	pop	{fp, pc}
   1d2dc:	andeq	r3, r1, r8, ror #17
   1d2e0:	push	{fp, lr}
   1d2e4:	add	fp, sp, #4
   1d2e8:	sub	sp, sp, #8
   1d2ec:	str	r0, [fp, #-8]
   1d2f0:	ldr	r3, [pc, #56]	; 1d330 <_start@@Base+0xa918>
   1d2f4:	add	r3, pc, r3
   1d2f8:	mov	r1, r3
   1d2fc:	ldr	r0, [fp, #-8]
   1d300:	bl	1a398 <_start@@Base+0x7980>
   1d304:	mov	r3, r0
   1d308:	cmp	r3, #0
   1d30c:	bne	1d320 <_start@@Base+0xa908>
   1d310:	ldr	r0, [fp, #-8]
   1d314:	bl	1afa4 <_start@@Base+0x858c>
   1d318:	mov	r3, r0
   1d31c:	b	1d324 <_start@@Base+0xa90c>
   1d320:	mvn	r3, #0
   1d324:	mov	r0, r3
   1d328:	sub	sp, fp, #4
   1d32c:	pop	{fp, pc}
   1d330:	muleq	r1, r4, r8
   1d334:	push	{fp, lr}
   1d338:	add	fp, sp, #4
   1d33c:	sub	sp, sp, #8
   1d340:	str	r0, [fp, #-8]
   1d344:	ldr	r0, [fp, #-8]
   1d348:	bl	1afd0 <_start@@Base+0x85b8>
   1d34c:	mov	r3, r0
   1d350:	mov	r1, r3
   1d354:	ldr	r0, [fp, #-8]
   1d358:	bl	1a3d0 <_start@@Base+0x79b8>
   1d35c:	mov	r3, r0
   1d360:	mov	r0, r3
   1d364:	sub	sp, fp, #4
   1d368:	pop	{fp, pc}
   1d36c:	push	{fp, lr}
   1d370:	add	fp, sp, #4
   1d374:	sub	sp, sp, #16
   1d378:	str	r0, [fp, #-16]
   1d37c:	mov	r3, r1
   1d380:	strb	r3, [fp, #-17]	; 0xffffffef
   1d384:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1d388:	cmp	r3, #0
   1d38c:	bne	1d398 <_start@@Base+0xa980>
   1d390:	mov	r3, #0
   1d394:	b	1d3d8 <_start@@Base+0xa9c0>
   1d398:	mov	r3, #1
   1d39c:	mov	r2, #1
   1d3a0:	mov	r1, #0
   1d3a4:	ldr	r0, [fp, #-16]
   1d3a8:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d3ac:	str	r0, [fp, #-8]
   1d3b0:	ldr	r3, [fp, #-8]
   1d3b4:	cmp	r3, #0
   1d3b8:	bne	1d3c4 <_start@@Base+0xa9ac>
   1d3bc:	mvn	r3, #0
   1d3c0:	b	1d3d8 <_start@@Base+0xa9c0>
   1d3c4:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   1d3c8:	mov	r1, r3
   1d3cc:	ldr	r0, [fp, #-8]
   1d3d0:	bl	19cc8 <_start@@Base+0x72b0>
   1d3d4:	mov	r3, #0
   1d3d8:	mov	r0, r3
   1d3dc:	sub	sp, fp, #4
   1d3e0:	pop	{fp, pc}
   1d3e4:	push	{fp, lr}
   1d3e8:	add	fp, sp, #4
   1d3ec:	sub	sp, sp, #16
   1d3f0:	str	r0, [fp, #-16]
   1d3f4:	mov	r3, r1
   1d3f8:	strb	r3, [fp, #-17]	; 0xffffffef
   1d3fc:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1d400:	cmp	r3, #0
   1d404:	bne	1d410 <_start@@Base+0xa9f8>
   1d408:	mov	r3, #0
   1d40c:	b	1d450 <_start@@Base+0xaa38>
   1d410:	mov	r3, #1
   1d414:	mov	r2, #1
   1d418:	mov	r1, #1
   1d41c:	ldr	r0, [fp, #-16]
   1d420:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d424:	str	r0, [fp, #-8]
   1d428:	ldr	r3, [fp, #-8]
   1d42c:	cmp	r3, #0
   1d430:	bne	1d43c <_start@@Base+0xaa24>
   1d434:	mvn	r3, #0
   1d438:	b	1d450 <_start@@Base+0xaa38>
   1d43c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1d440:	mov	r1, r3
   1d444:	ldr	r0, [fp, #-8]
   1d448:	bl	19c38 <_start@@Base+0x7220>
   1d44c:	mov	r3, #0
   1d450:	mov	r0, r3
   1d454:	sub	sp, fp, #4
   1d458:	pop	{fp, pc}
   1d45c:	push	{fp, lr}
   1d460:	add	fp, sp, #4
   1d464:	sub	sp, sp, #16
   1d468:	str	r0, [fp, #-16]
   1d46c:	mov	r3, r1
   1d470:	strh	r3, [fp, #-18]	; 0xffffffee
   1d474:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1d478:	cmp	r3, #0
   1d47c:	bne	1d488 <_start@@Base+0xaa70>
   1d480:	mov	r3, #0
   1d484:	b	1d4c8 <_start@@Base+0xaab0>
   1d488:	mov	r3, #2
   1d48c:	mov	r2, #2
   1d490:	mov	r1, #2
   1d494:	ldr	r0, [fp, #-16]
   1d498:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d49c:	str	r0, [fp, #-8]
   1d4a0:	ldr	r3, [fp, #-8]
   1d4a4:	cmp	r3, #0
   1d4a8:	bne	1d4b4 <_start@@Base+0xaa9c>
   1d4ac:	mvn	r3, #0
   1d4b0:	b	1d4c8 <_start@@Base+0xaab0>
   1d4b4:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   1d4b8:	mov	r1, r3
   1d4bc:	ldr	r0, [fp, #-8]
   1d4c0:	bl	19fec <_start@@Base+0x75d4>
   1d4c4:	mov	r3, #0
   1d4c8:	mov	r0, r3
   1d4cc:	sub	sp, fp, #4
   1d4d0:	pop	{fp, pc}
   1d4d4:	push	{fp, lr}
   1d4d8:	add	fp, sp, #4
   1d4dc:	sub	sp, sp, #16
   1d4e0:	str	r0, [fp, #-16]
   1d4e4:	mov	r3, r1
   1d4e8:	strh	r3, [fp, #-18]	; 0xffffffee
   1d4ec:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d4f0:	cmp	r3, #0
   1d4f4:	bne	1d500 <_start@@Base+0xaae8>
   1d4f8:	mov	r3, #0
   1d4fc:	b	1d540 <_start@@Base+0xab28>
   1d500:	mov	r3, #2
   1d504:	mov	r2, #2
   1d508:	mov	r1, #3
   1d50c:	ldr	r0, [fp, #-16]
   1d510:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d514:	str	r0, [fp, #-8]
   1d518:	ldr	r3, [fp, #-8]
   1d51c:	cmp	r3, #0
   1d520:	bne	1d52c <_start@@Base+0xab14>
   1d524:	mvn	r3, #0
   1d528:	b	1d540 <_start@@Base+0xab28>
   1d52c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d530:	mov	r1, r3
   1d534:	ldr	r0, [fp, #-8]
   1d538:	bl	19ef0 <_start@@Base+0x74d8>
   1d53c:	mov	r3, #0
   1d540:	mov	r0, r3
   1d544:	sub	sp, fp, #4
   1d548:	pop	{fp, pc}
   1d54c:	push	{fp, lr}
   1d550:	add	fp, sp, #4
   1d554:	sub	sp, sp, #16
   1d558:	str	r0, [fp, #-16]
   1d55c:	str	r1, [fp, #-20]	; 0xffffffec
   1d560:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d564:	cmp	r3, #0
   1d568:	bne	1d574 <_start@@Base+0xab5c>
   1d56c:	mov	r3, #0
   1d570:	b	1d5b0 <_start@@Base+0xab98>
   1d574:	mov	r3, #4
   1d578:	mov	r2, #4
   1d57c:	mov	r1, #4
   1d580:	ldr	r0, [fp, #-16]
   1d584:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d588:	str	r0, [fp, #-8]
   1d58c:	ldr	r3, [fp, #-8]
   1d590:	cmp	r3, #0
   1d594:	bne	1d5a0 <_start@@Base+0xab88>
   1d598:	mvn	r3, #0
   1d59c:	b	1d5b0 <_start@@Base+0xab98>
   1d5a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d5a4:	ldr	r0, [fp, #-8]
   1d5a8:	bl	1a030 <_start@@Base+0x7618>
   1d5ac:	mov	r3, #0
   1d5b0:	mov	r0, r3
   1d5b4:	sub	sp, fp, #4
   1d5b8:	pop	{fp, pc}
   1d5bc:	push	{fp, lr}
   1d5c0:	add	fp, sp, #4
   1d5c4:	sub	sp, sp, #16
   1d5c8:	str	r0, [fp, #-16]
   1d5cc:	str	r1, [fp, #-20]	; 0xffffffec
   1d5d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d5d4:	cmp	r3, #0
   1d5d8:	bne	1d5e4 <_start@@Base+0xabcc>
   1d5dc:	mov	r3, #0
   1d5e0:	b	1d620 <_start@@Base+0xac08>
   1d5e4:	mov	r3, #4
   1d5e8:	mov	r2, #4
   1d5ec:	mov	r1, #5
   1d5f0:	ldr	r0, [fp, #-16]
   1d5f4:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d5f8:	str	r0, [fp, #-8]
   1d5fc:	ldr	r3, [fp, #-8]
   1d600:	cmp	r3, #0
   1d604:	bne	1d610 <_start@@Base+0xabf8>
   1d608:	mvn	r3, #0
   1d60c:	b	1d620 <_start@@Base+0xac08>
   1d610:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d614:	ldr	r0, [fp, #-8]
   1d618:	bl	19f34 <_start@@Base+0x751c>
   1d61c:	mov	r3, #0
   1d620:	mov	r0, r3
   1d624:	sub	sp, fp, #4
   1d628:	pop	{fp, pc}
   1d62c:	push	{fp, lr}
   1d630:	add	fp, sp, #4
   1d634:	sub	sp, sp, #24
   1d638:	str	r0, [fp, #-16]
   1d63c:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d640:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d644:	orrs	r3, r2, r3
   1d648:	bne	1d654 <_start@@Base+0xac3c>
   1d64c:	mov	r3, #0
   1d650:	b	1d690 <_start@@Base+0xac78>
   1d654:	mov	r3, #8
   1d658:	mov	r2, #8
   1d65c:	mov	r1, #6
   1d660:	ldr	r0, [fp, #-16]
   1d664:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d668:	str	r0, [fp, #-8]
   1d66c:	ldr	r3, [fp, #-8]
   1d670:	cmp	r3, #0
   1d674:	bne	1d680 <_start@@Base+0xac68>
   1d678:	mvn	r3, #0
   1d67c:	b	1d690 <_start@@Base+0xac78>
   1d680:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d684:	ldr	r0, [fp, #-8]
   1d688:	bl	1a068 <_start@@Base+0x7650>
   1d68c:	mov	r3, #0
   1d690:	mov	r0, r3
   1d694:	sub	sp, fp, #4
   1d698:	pop	{fp, pc}
   1d69c:	push	{fp, lr}
   1d6a0:	add	fp, sp, #4
   1d6a4:	sub	sp, sp, #24
   1d6a8:	str	r0, [fp, #-16]
   1d6ac:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d6b0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d6b4:	orrs	r3, r2, r3
   1d6b8:	bne	1d6c4 <_start@@Base+0xacac>
   1d6bc:	mov	r3, #0
   1d6c0:	b	1d700 <_start@@Base+0xace8>
   1d6c4:	mov	r3, #8
   1d6c8:	mov	r2, #8
   1d6cc:	mov	r1, #7
   1d6d0:	ldr	r0, [fp, #-16]
   1d6d4:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d6d8:	str	r0, [fp, #-8]
   1d6dc:	ldr	r3, [fp, #-8]
   1d6e0:	cmp	r3, #0
   1d6e4:	bne	1d6f0 <_start@@Base+0xacd8>
   1d6e8:	mvn	r3, #0
   1d6ec:	b	1d700 <_start@@Base+0xace8>
   1d6f0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d6f4:	ldr	r0, [fp, #-8]
   1d6f8:	bl	19f6c <_start@@Base+0x7554>
   1d6fc:	mov	r3, #0
   1d700:	mov	r0, r3
   1d704:	sub	sp, fp, #4
   1d708:	pop	{fp, pc}
   1d70c:	push	{fp, lr}
   1d710:	add	fp, sp, #4
   1d714:	sub	sp, sp, #16
   1d718:	str	r0, [fp, #-16]
   1d71c:	vstr	s0, [fp, #-20]	; 0xffffffec
   1d720:	vldr	s15, [fp, #-20]	; 0xffffffec
   1d724:	vcmp.f32	s15, #0.0
   1d728:	vmrs	APSR_nzcv, fpscr
   1d72c:	bne	1d738 <_start@@Base+0xad20>
   1d730:	mov	r3, #0
   1d734:	b	1d774 <_start@@Base+0xad5c>
   1d738:	mov	r3, #4
   1d73c:	mov	r2, #4
   1d740:	mov	r1, #8
   1d744:	ldr	r0, [fp, #-16]
   1d748:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d74c:	str	r0, [fp, #-8]
   1d750:	ldr	r3, [fp, #-8]
   1d754:	cmp	r3, #0
   1d758:	bne	1d764 <_start@@Base+0xad4c>
   1d75c:	mvn	r3, #0
   1d760:	b	1d774 <_start@@Base+0xad5c>
   1d764:	vldr	s0, [fp, #-20]	; 0xffffffec
   1d768:	ldr	r0, [fp, #-8]
   1d76c:	bl	1a0e4 <_start@@Base+0x76cc>
   1d770:	mov	r3, #0
   1d774:	mov	r0, r3
   1d778:	sub	sp, fp, #4
   1d77c:	pop	{fp, pc}
   1d780:	push	{fp, lr}
   1d784:	add	fp, sp, #4
   1d788:	sub	sp, sp, #24
   1d78c:	str	r0, [fp, #-16]
   1d790:	vstr	d0, [fp, #-28]	; 0xffffffe4
   1d794:	vldr	d7, [fp, #-28]	; 0xffffffe4
   1d798:	vcmp.f64	d7, #0.0
   1d79c:	vmrs	APSR_nzcv, fpscr
   1d7a0:	bne	1d7ac <_start@@Base+0xad94>
   1d7a4:	mov	r3, #0
   1d7a8:	b	1d7e8 <_start@@Base+0xadd0>
   1d7ac:	mov	r3, #8
   1d7b0:	mov	r2, #8
   1d7b4:	mov	r1, #9
   1d7b8:	ldr	r0, [fp, #-16]
   1d7bc:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1d7c0:	str	r0, [fp, #-8]
   1d7c4:	ldr	r3, [fp, #-8]
   1d7c8:	cmp	r3, #0
   1d7cc:	bne	1d7d8 <_start@@Base+0xadc0>
   1d7d0:	mvn	r3, #0
   1d7d4:	b	1d7e8 <_start@@Base+0xadd0>
   1d7d8:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1d7dc:	ldr	r0, [fp, #-8]
   1d7e0:	bl	1a15c <_start@@Base+0x7744>
   1d7e4:	mov	r3, #0
   1d7e8:	mov	r0, r3
   1d7ec:	sub	sp, fp, #4
   1d7f0:	pop	{fp, pc}
   1d7f4:	push	{fp, lr}
   1d7f8:	add	fp, sp, #4
   1d7fc:	sub	sp, sp, #16
   1d800:	str	r0, [fp, #-16]
   1d804:	str	r1, [fp, #-20]	; 0xffffffec
   1d808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d80c:	cmp	r3, #0
   1d810:	beq	1d844 <_start@@Base+0xae2c>
   1d814:	mov	r1, #10
   1d818:	ldr	r0, [fp, #-16]
   1d81c:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1d820:	str	r0, [fp, #-8]
   1d824:	ldr	r3, [fp, #-8]
   1d828:	cmp	r3, #0
   1d82c:	beq	1d844 <_start@@Base+0xae2c>
   1d830:	ldr	r3, [fp, #-8]
   1d834:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d838:	str	r2, [r3]
   1d83c:	mov	r3, #0
   1d840:	b	1d848 <_start@@Base+0xae30>
   1d844:	mvn	r3, #0
   1d848:	mov	r0, r3
   1d84c:	sub	sp, fp, #4
   1d850:	pop	{fp, pc}
   1d854:	push	{fp, lr}
   1d858:	add	fp, sp, #4
   1d85c:	sub	sp, sp, #16
   1d860:	str	r0, [fp, #-16]
   1d864:	str	r1, [fp, #-20]	; 0xffffffec
   1d868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d86c:	cmp	r3, #0
   1d870:	beq	1d8a4 <_start@@Base+0xae8c>
   1d874:	mov	r1, #11
   1d878:	ldr	r0, [fp, #-16]
   1d87c:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1d880:	str	r0, [fp, #-8]
   1d884:	ldr	r3, [fp, #-8]
   1d888:	cmp	r3, #0
   1d88c:	beq	1d8a4 <_start@@Base+0xae8c>
   1d890:	ldr	r3, [fp, #-8]
   1d894:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d898:	str	r2, [r3]
   1d89c:	mov	r3, #0
   1d8a0:	b	1d8a8 <_start@@Base+0xae90>
   1d8a4:	mvn	r3, #0
   1d8a8:	mov	r0, r3
   1d8ac:	sub	sp, fp, #4
   1d8b0:	pop	{fp, pc}
   1d8b4:	push	{fp, lr}
   1d8b8:	add	fp, sp, #4
   1d8bc:	sub	sp, sp, #24
   1d8c0:	str	r0, [fp, #-8]
   1d8c4:	mov	r0, r1
   1d8c8:	mov	r1, r2
   1d8cc:	vstr	s0, [fp, #-16]
   1d8d0:	vstr	d1, [fp, #-28]	; 0xffffffe4
   1d8d4:	mov	r2, r0
   1d8d8:	strb	r2, [fp, #-9]
   1d8dc:	mov	r2, r1
   1d8e0:	strb	r2, [fp, #-10]
   1d8e4:	strh	r3, [fp, #-12]
   1d8e8:	ldr	r0, [fp, #-8]
   1d8ec:	bl	1b090 <_start@@Base+0x8678>
   1d8f0:	mov	r3, r0
   1d8f4:	cmp	r3, #0
   1d8f8:	bne	1da2c <_start@@Base+0xb014>
   1d8fc:	ldrd	r2, [fp, #20]
   1d900:	ldr	r0, [fp, #-8]
   1d904:	bl	1d62c <_start@@Base+0xac14>
   1d908:	mov	r3, r0
   1d90c:	cmp	r3, #0
   1d910:	bne	1da2c <_start@@Base+0xb014>
   1d914:	ldrd	r2, [fp, #28]
   1d918:	ldr	r0, [fp, #-8]
   1d91c:	bl	1d69c <_start@@Base+0xac84>
   1d920:	mov	r3, r0
   1d924:	cmp	r3, #0
   1d928:	bne	1da2c <_start@@Base+0xb014>
   1d92c:	vldr	d0, [fp, #-28]	; 0xffffffe4
   1d930:	ldr	r0, [fp, #-8]
   1d934:	bl	1d780 <_start@@Base+0xad68>
   1d938:	mov	r3, r0
   1d93c:	cmp	r3, #0
   1d940:	bne	1da2c <_start@@Base+0xb014>
   1d944:	ldr	r1, [fp, #8]
   1d948:	ldr	r0, [fp, #-8]
   1d94c:	bl	1d54c <_start@@Base+0xab34>
   1d950:	mov	r3, r0
   1d954:	cmp	r3, #0
   1d958:	bne	1da2c <_start@@Base+0xb014>
   1d95c:	ldr	r1, [fp, #12]
   1d960:	ldr	r0, [fp, #-8]
   1d964:	bl	1d5bc <_start@@Base+0xaba4>
   1d968:	mov	r3, r0
   1d96c:	cmp	r3, #0
   1d970:	bne	1da2c <_start@@Base+0xb014>
   1d974:	vldr	s0, [fp, #-16]
   1d978:	ldr	r0, [fp, #-8]
   1d97c:	bl	1d70c <_start@@Base+0xacf4>
   1d980:	mov	r3, r0
   1d984:	cmp	r3, #0
   1d988:	bne	1da2c <_start@@Base+0xb014>
   1d98c:	ldr	r1, [fp, #36]	; 0x24
   1d990:	ldr	r0, [fp, #-8]
   1d994:	bl	1d7f4 <_start@@Base+0xaddc>
   1d998:	mov	r3, r0
   1d99c:	cmp	r3, #0
   1d9a0:	bne	1da2c <_start@@Base+0xb014>
   1d9a4:	ldr	r1, [fp, #40]	; 0x28
   1d9a8:	ldr	r0, [fp, #-8]
   1d9ac:	bl	1d854 <_start@@Base+0xae3c>
   1d9b0:	mov	r3, r0
   1d9b4:	cmp	r3, #0
   1d9b8:	bne	1da2c <_start@@Base+0xb014>
   1d9bc:	ldrsh	r3, [fp, #-12]
   1d9c0:	mov	r1, r3
   1d9c4:	ldr	r0, [fp, #-8]
   1d9c8:	bl	1d45c <_start@@Base+0xaa44>
   1d9cc:	mov	r3, r0
   1d9d0:	cmp	r3, #0
   1d9d4:	bne	1da2c <_start@@Base+0xb014>
   1d9d8:	ldrh	r3, [fp, #4]
   1d9dc:	mov	r1, r3
   1d9e0:	ldr	r0, [fp, #-8]
   1d9e4:	bl	1d4d4 <_start@@Base+0xaabc>
   1d9e8:	mov	r3, r0
   1d9ec:	cmp	r3, #0
   1d9f0:	bne	1da2c <_start@@Base+0xb014>
   1d9f4:	ldrsb	r3, [fp, #-9]
   1d9f8:	mov	r1, r3
   1d9fc:	ldr	r0, [fp, #-8]
   1da00:	bl	1d36c <_start@@Base+0xa954>
   1da04:	mov	r3, r0
   1da08:	cmp	r3, #0
   1da0c:	bne	1da2c <_start@@Base+0xb014>
   1da10:	ldrb	r3, [fp, #-10]
   1da14:	mov	r1, r3
   1da18:	ldr	r0, [fp, #-8]
   1da1c:	bl	1d3e4 <_start@@Base+0xa9cc>
   1da20:	mov	r3, r0
   1da24:	cmp	r3, #0
   1da28:	beq	1da34 <_start@@Base+0xb01c>
   1da2c:	mov	r3, #0
   1da30:	b	1da40 <_start@@Base+0xb028>
   1da34:	ldr	r0, [fp, #-8]
   1da38:	bl	1b0bc <_start@@Base+0x86a4>
   1da3c:	mov	r3, r0
   1da40:	mov	r0, r3
   1da44:	sub	sp, fp, #4
   1da48:	pop	{fp, pc}
   1da4c:	push	{fp, lr}
   1da50:	add	fp, sp, #4
   1da54:	sub	sp, sp, #64	; 0x40
   1da58:	str	r0, [fp, #-8]
   1da5c:	mov	r0, r1
   1da60:	mov	r1, r2
   1da64:	vstr	s0, [fp, #-16]
   1da68:	vstr	d1, [fp, #-28]	; 0xffffffe4
   1da6c:	mov	r2, r0
   1da70:	strb	r2, [fp, #-9]
   1da74:	mov	r2, r1
   1da78:	strb	r2, [fp, #-10]
   1da7c:	strh	r3, [fp, #-12]
   1da80:	ldr	r3, [pc, #156]	; 1db24 <_start@@Base+0xb10c>
   1da84:	add	r3, pc, r3
   1da88:	mov	r1, r3
   1da8c:	ldr	r0, [fp, #-8]
   1da90:	bl	1a360 <_start@@Base+0x7948>
   1da94:	mov	r3, r0
   1da98:	cmp	r3, #0
   1da9c:	beq	1daa8 <_start@@Base+0xb090>
   1daa0:	mov	r3, #0
   1daa4:	b	1db18 <_start@@Base+0xb100>
   1daa8:	ldrsh	ip, [fp, #-12]
   1daac:	ldrb	r0, [fp, #-10]
   1dab0:	ldrsb	r1, [fp, #-9]
   1dab4:	ldr	r3, [fp, #40]	; 0x28
   1dab8:	str	r3, [sp, #36]	; 0x24
   1dabc:	ldr	r3, [fp, #36]	; 0x24
   1dac0:	str	r3, [sp, #32]
   1dac4:	ldrd	r2, [fp, #28]
   1dac8:	strd	r2, [sp, #24]
   1dacc:	ldrd	r2, [fp, #20]
   1dad0:	strd	r2, [sp, #16]
   1dad4:	ldr	r3, [fp, #12]
   1dad8:	str	r3, [sp, #8]
   1dadc:	ldr	r3, [fp, #8]
   1dae0:	str	r3, [sp, #4]
   1dae4:	ldrh	r3, [fp, #4]
   1dae8:	str	r3, [sp]
   1daec:	vldr	d1, [fp, #-28]	; 0xffffffe4
   1daf0:	vldr	s0, [fp, #-16]
   1daf4:	mov	r3, ip
   1daf8:	mov	r2, r0
   1dafc:	ldr	r0, [fp, #-8]
   1db00:	bl	1d8b4 <_start@@Base+0xae9c>
   1db04:	mov	r3, r0
   1db08:	mov	r1, r3
   1db0c:	ldr	r0, [fp, #-8]
   1db10:	bl	1a3d0 <_start@@Base+0x79b8>
   1db14:	mov	r3, r0
   1db18:	mov	r0, r3
   1db1c:	sub	sp, fp, #4
   1db20:	pop	{fp, pc}
   1db24:	andeq	r3, r1, r4, lsl #2
   1db28:	push	{fp, lr}
   1db2c:	add	fp, sp, #4
   1db30:	sub	sp, sp, #16
   1db34:	str	r0, [fp, #-16]
   1db38:	str	r1, [fp, #-20]	; 0xffffffec
   1db3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1db40:	cmp	r3, #0
   1db44:	bne	1db50 <_start@@Base+0xb138>
   1db48:	mov	r3, #0
   1db4c:	b	1db8c <_start@@Base+0xb174>
   1db50:	mov	r3, #4
   1db54:	mov	r2, #4
   1db58:	mov	r1, #0
   1db5c:	ldr	r0, [fp, #-16]
   1db60:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1db64:	str	r0, [fp, #-8]
   1db68:	ldr	r3, [fp, #-8]
   1db6c:	cmp	r3, #0
   1db70:	bne	1db7c <_start@@Base+0xb164>
   1db74:	mvn	r3, #0
   1db78:	b	1db8c <_start@@Base+0xb174>
   1db7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1db80:	ldr	r0, [fp, #-8]
   1db84:	bl	1a030 <_start@@Base+0x7618>
   1db88:	mov	r3, #0
   1db8c:	mov	r0, r3
   1db90:	sub	sp, fp, #4
   1db94:	pop	{fp, pc}
   1db98:	push	{fp, lr}
   1db9c:	add	fp, sp, #4
   1dba0:	sub	sp, sp, #8
   1dba4:	str	r0, [fp, #-8]
   1dba8:	str	r1, [fp, #-12]
   1dbac:	ldr	r0, [fp, #-8]
   1dbb0:	bl	1b138 <_start@@Base+0x8720>
   1dbb4:	mov	r3, r0
   1dbb8:	cmp	r3, #0
   1dbbc:	bne	1dbd8 <_start@@Base+0xb1c0>
   1dbc0:	ldr	r1, [fp, #-12]
   1dbc4:	ldr	r0, [fp, #-8]
   1dbc8:	bl	1db28 <_start@@Base+0xb110>
   1dbcc:	mov	r3, r0
   1dbd0:	cmp	r3, #0
   1dbd4:	beq	1dbe0 <_start@@Base+0xb1c8>
   1dbd8:	mov	r3, #0
   1dbdc:	b	1dbec <_start@@Base+0xb1d4>
   1dbe0:	ldr	r0, [fp, #-8]
   1dbe4:	bl	1b164 <_start@@Base+0x874c>
   1dbe8:	mov	r3, r0
   1dbec:	mov	r0, r3
   1dbf0:	sub	sp, fp, #4
   1dbf4:	pop	{fp, pc}
   1dbf8:	push	{fp, lr}
   1dbfc:	add	fp, sp, #4
   1dc00:	sub	sp, sp, #24
   1dc04:	str	r0, [fp, #-16]
   1dc08:	sub	r3, fp, #24
   1dc0c:	stm	r3, {r1, r2}
   1dc10:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1dc14:	cmp	r3, #0
   1dc18:	bne	1dc24 <_start@@Base+0xb20c>
   1dc1c:	mov	r3, #0
   1dc20:	b	1dc9c <_start@@Base+0xb284>
   1dc24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc28:	cmp	r3, #0
   1dc2c:	bne	1dc38 <_start@@Base+0xb220>
   1dc30:	mvn	r3, #0
   1dc34:	b	1dc9c <_start@@Base+0xb284>
   1dc38:	mov	r3, #1
   1dc3c:	mov	r2, #1
   1dc40:	mov	r1, #0
   1dc44:	ldr	r0, [fp, #-16]
   1dc48:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1dc4c:	str	r0, [fp, #-8]
   1dc50:	ldr	r3, [fp, #-8]
   1dc54:	cmp	r3, #0
   1dc58:	beq	1dc78 <_start@@Base+0xb260>
   1dc5c:	mov	r1, #1
   1dc60:	ldr	r0, [fp, #-16]
   1dc64:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1dc68:	str	r0, [fp, #-12]
   1dc6c:	ldr	r3, [fp, #-12]
   1dc70:	cmp	r3, #0
   1dc74:	bne	1dc80 <_start@@Base+0xb268>
   1dc78:	mvn	r3, #0
   1dc7c:	b	1dc9c <_start@@Base+0xb284>
   1dc80:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1dc84:	ldr	r3, [fp, #-8]
   1dc88:	strb	r2, [r3]
   1dc8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dc90:	ldr	r3, [fp, #-12]
   1dc94:	str	r2, [r3]
   1dc98:	mov	r3, #0
   1dc9c:	mov	r0, r3
   1dca0:	sub	sp, fp, #4
   1dca4:	pop	{fp, pc}
   1dca8:	push	{fp, lr}
   1dcac:	add	fp, sp, #4
   1dcb0:	sub	sp, sp, #24
   1dcb4:	str	r0, [fp, #-24]	; 0xffffffe8
   1dcb8:	mov	r3, r1
   1dcbc:	strh	r3, [fp, #-26]	; 0xffffffe6
   1dcc0:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1dcc4:	mov	r1, r3
   1dcc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dccc:	bl	1ab98 <_start@@Base+0x8180>
   1dcd0:	str	r0, [fp, #-8]
   1dcd4:	ldr	r3, [fp, #-8]
   1dcd8:	cmp	r3, #0
   1dcdc:	beq	1dd08 <_start@@Base+0xb2f0>
   1dce0:	sub	r3, fp, #16
   1dce4:	ldr	r1, [fp, #-8]
   1dce8:	mov	r0, r3
   1dcec:	bl	1b438 <_start@@Base+0x8a20>
   1dcf0:	sub	r3, fp, #16
   1dcf4:	ldm	r3, {r1, r2}
   1dcf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dcfc:	bl	1dbf8 <_start@@Base+0xb1e0>
   1dd00:	mov	r3, r0
   1dd04:	b	1dd0c <_start@@Base+0xb2f4>
   1dd08:	mvn	r3, #0
   1dd0c:	mov	r0, r3
   1dd10:	sub	sp, fp, #4
   1dd14:	pop	{fp, pc}
   1dd18:	push	{fp, lr}
   1dd1c:	add	fp, sp, #4
   1dd20:	sub	sp, sp, #24
   1dd24:	str	r0, [fp, #-16]
   1dd28:	sub	r3, fp, #24
   1dd2c:	stm	r3, {r1, r2}
   1dd30:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1dd34:	cmp	r3, #0
   1dd38:	bne	1dd44 <_start@@Base+0xb32c>
   1dd3c:	mov	r3, #0
   1dd40:	b	1ddbc <_start@@Base+0xb3a4>
   1dd44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd48:	cmp	r3, #0
   1dd4c:	bne	1dd58 <_start@@Base+0xb340>
   1dd50:	mvn	r3, #0
   1dd54:	b	1ddbc <_start@@Base+0xb3a4>
   1dd58:	mov	r3, #1
   1dd5c:	mov	r2, #1
   1dd60:	mov	r1, #2
   1dd64:	ldr	r0, [fp, #-16]
   1dd68:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1dd6c:	str	r0, [fp, #-8]
   1dd70:	ldr	r3, [fp, #-8]
   1dd74:	cmp	r3, #0
   1dd78:	beq	1dd98 <_start@@Base+0xb380>
   1dd7c:	mov	r1, #3
   1dd80:	ldr	r0, [fp, #-16]
   1dd84:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1dd88:	str	r0, [fp, #-12]
   1dd8c:	ldr	r3, [fp, #-12]
   1dd90:	cmp	r3, #0
   1dd94:	bne	1dda0 <_start@@Base+0xb388>
   1dd98:	mvn	r3, #0
   1dd9c:	b	1ddbc <_start@@Base+0xb3a4>
   1dda0:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1dda4:	ldr	r3, [fp, #-8]
   1dda8:	strb	r2, [r3]
   1ddac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ddb0:	ldr	r3, [fp, #-12]
   1ddb4:	str	r2, [r3]
   1ddb8:	mov	r3, #0
   1ddbc:	mov	r0, r3
   1ddc0:	sub	sp, fp, #4
   1ddc4:	pop	{fp, pc}
   1ddc8:	push	{fp, lr}
   1ddcc:	add	fp, sp, #4
   1ddd0:	sub	sp, sp, #16
   1ddd4:	str	r0, [fp, #-16]
   1ddd8:	str	r1, [fp, #-20]	; 0xffffffec
   1dddc:	sub	r3, fp, #12
   1dde0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1dde4:	mov	r0, r3
   1dde8:	bl	1b3f0 <_start@@Base+0x89d8>
   1ddec:	sub	r3, fp, #12
   1ddf0:	ldm	r3, {r1, r2}
   1ddf4:	ldr	r0, [fp, #-16]
   1ddf8:	bl	1dd18 <_start@@Base+0xb300>
   1ddfc:	mov	r3, r0
   1de00:	mov	r0, r3
   1de04:	sub	sp, fp, #4
   1de08:	pop	{fp, pc}
   1de0c:	push	{fp, lr}
   1de10:	add	fp, sp, #4
   1de14:	sub	sp, sp, #24
   1de18:	str	r0, [fp, #-16]
   1de1c:	sub	r3, fp, #24
   1de20:	stm	r3, {r1, r2}
   1de24:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1de28:	cmp	r3, #0
   1de2c:	bne	1de38 <_start@@Base+0xb420>
   1de30:	mov	r3, #0
   1de34:	b	1deb0 <_start@@Base+0xb498>
   1de38:	ldr	r3, [fp, #-20]	; 0xffffffec
   1de3c:	cmp	r3, #0
   1de40:	bne	1de4c <_start@@Base+0xb434>
   1de44:	mvn	r3, #0
   1de48:	b	1deb0 <_start@@Base+0xb498>
   1de4c:	mov	r3, #1
   1de50:	mov	r2, #1
   1de54:	mov	r1, #4
   1de58:	ldr	r0, [fp, #-16]
   1de5c:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1de60:	str	r0, [fp, #-8]
   1de64:	ldr	r3, [fp, #-8]
   1de68:	cmp	r3, #0
   1de6c:	beq	1de8c <_start@@Base+0xb474>
   1de70:	mov	r1, #5
   1de74:	ldr	r0, [fp, #-16]
   1de78:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1de7c:	str	r0, [fp, #-12]
   1de80:	ldr	r3, [fp, #-12]
   1de84:	cmp	r3, #0
   1de88:	bne	1de94 <_start@@Base+0xb47c>
   1de8c:	mvn	r3, #0
   1de90:	b	1deb0 <_start@@Base+0xb498>
   1de94:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1de98:	ldr	r3, [fp, #-8]
   1de9c:	strb	r2, [r3]
   1dea0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dea4:	ldr	r3, [fp, #-12]
   1dea8:	str	r2, [r3]
   1deac:	mov	r3, #0
   1deb0:	mov	r0, r3
   1deb4:	sub	sp, fp, #4
   1deb8:	pop	{fp, pc}
   1debc:	push	{fp, lr}
   1dec0:	add	fp, sp, #4
   1dec4:	sub	sp, sp, #16
   1dec8:	str	r0, [fp, #-16]
   1decc:	str	r1, [fp, #-20]	; 0xffffffec
   1ded0:	sub	r3, fp, #12
   1ded4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ded8:	mov	r0, r3
   1dedc:	bl	1b4c8 <_start@@Base+0x8ab0>
   1dee0:	sub	r3, fp, #12
   1dee4:	ldm	r3, {r1, r2}
   1dee8:	ldr	r0, [fp, #-16]
   1deec:	bl	1de0c <_start@@Base+0xb3f4>
   1def0:	mov	r3, r0
   1def4:	mov	r0, r3
   1def8:	sub	sp, fp, #4
   1defc:	pop	{fp, pc}
   1df00:	push	{fp, lr}
   1df04:	add	fp, sp, #4
   1df08:	sub	sp, sp, #8
   1df0c:	str	r0, [fp, #-8]
   1df10:	str	r1, [fp, #-12]
   1df14:	ldr	r1, [fp, #-12]
   1df18:	ldr	r0, [fp, #-8]
   1df1c:	bl	2ccf0 <flatcc_builder_create_string_str@@Base>
   1df20:	mov	r3, r0
   1df24:	mov	r1, r3
   1df28:	ldr	r0, [fp, #-8]
   1df2c:	bl	1debc <_start@@Base+0xb4a4>
   1df30:	mov	r3, r0
   1df34:	mov	r0, r3
   1df38:	sub	sp, fp, #4
   1df3c:	pop	{fp, pc}
   1df40:	push	{fp, lr}
   1df44:	add	fp, sp, #4
   1df48:	sub	sp, sp, #24
   1df4c:	str	r0, [fp, #-16]
   1df50:	sub	r3, fp, #24
   1df54:	stm	r3, {r1, r2}
   1df58:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1df5c:	cmp	r3, #0
   1df60:	bne	1df6c <_start@@Base+0xb554>
   1df64:	mov	r3, #0
   1df68:	b	1dfe4 <_start@@Base+0xb5cc>
   1df6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1df70:	cmp	r3, #0
   1df74:	bne	1df80 <_start@@Base+0xb568>
   1df78:	mvn	r3, #0
   1df7c:	b	1dfe4 <_start@@Base+0xb5cc>
   1df80:	mov	r3, #1
   1df84:	mov	r2, #1
   1df88:	mov	r1, #6
   1df8c:	ldr	r0, [fp, #-16]
   1df90:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   1df94:	str	r0, [fp, #-8]
   1df98:	ldr	r3, [fp, #-8]
   1df9c:	cmp	r3, #0
   1dfa0:	beq	1dfc0 <_start@@Base+0xb5a8>
   1dfa4:	mov	r1, #7
   1dfa8:	ldr	r0, [fp, #-16]
   1dfac:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1dfb0:	str	r0, [fp, #-12]
   1dfb4:	ldr	r3, [fp, #-12]
   1dfb8:	cmp	r3, #0
   1dfbc:	bne	1dfc8 <_start@@Base+0xb5b0>
   1dfc0:	mvn	r3, #0
   1dfc4:	b	1dfe4 <_start@@Base+0xb5cc>
   1dfc8:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   1dfcc:	ldr	r3, [fp, #-8]
   1dfd0:	strb	r2, [r3]
   1dfd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dfd8:	ldr	r3, [fp, #-12]
   1dfdc:	str	r2, [r3]
   1dfe0:	mov	r3, #0
   1dfe4:	mov	r0, r3
   1dfe8:	sub	sp, fp, #4
   1dfec:	pop	{fp, pc}
   1dff0:	push	{fp, lr}
   1dff4:	add	fp, sp, #4
   1dff8:	sub	sp, sp, #16
   1dffc:	str	r0, [fp, #-16]
   1e000:	str	r1, [fp, #-20]	; 0xffffffec
   1e004:	sub	r3, fp, #12
   1e008:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e00c:	mov	r0, r3
   1e010:	bl	1b438 <_start@@Base+0x8a20>
   1e014:	sub	r3, fp, #12
   1e018:	ldm	r3, {r1, r2}
   1e01c:	ldr	r0, [fp, #-16]
   1e020:	bl	1df40 <_start@@Base+0xb528>
   1e024:	mov	r3, r0
   1e028:	mov	r0, r3
   1e02c:	sub	sp, fp, #4
   1e030:	pop	{fp, pc}
   1e034:	push	{fp, lr}
   1e038:	add	fp, sp, #4
   1e03c:	sub	sp, sp, #24
   1e040:	str	r0, [fp, #-16]
   1e044:	sub	r3, fp, #24
   1e048:	stm	r3, {r1, r2}
   1e04c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e050:	cmp	r3, #0
   1e054:	beq	1e064 <_start@@Base+0xb64c>
   1e058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e05c:	cmp	r3, #0
   1e060:	bne	1e084 <_start@@Base+0xb66c>
   1e064:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e06c:	cmp	r2, r3
   1e070:	bne	1e07c <_start@@Base+0xb664>
   1e074:	mov	r3, #0
   1e078:	b	1e0e8 <_start@@Base+0xb6d0>
   1e07c:	mvn	r3, #0
   1e080:	b	1e0e8 <_start@@Base+0xb6d0>
   1e084:	mov	r1, #8
   1e088:	ldr	r0, [fp, #-16]
   1e08c:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1e090:	str	r0, [fp, #-8]
   1e094:	ldr	r3, [fp, #-8]
   1e098:	cmp	r3, #0
   1e09c:	bne	1e0a8 <_start@@Base+0xb690>
   1e0a0:	mvn	r3, #0
   1e0a4:	b	1e0e8 <_start@@Base+0xb6d0>
   1e0a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e0ac:	ldr	r3, [fp, #-8]
   1e0b0:	str	r2, [r3]
   1e0b4:	mov	r1, #9
   1e0b8:	ldr	r0, [fp, #-16]
   1e0bc:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   1e0c0:	str	r0, [fp, #-8]
   1e0c4:	ldr	r3, [fp, #-8]
   1e0c8:	cmp	r3, #0
   1e0cc:	bne	1e0d8 <_start@@Base+0xb6c0>
   1e0d0:	mvn	r3, #0
   1e0d4:	b	1e0e8 <_start@@Base+0xb6d0>
   1e0d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e0dc:	ldr	r3, [fp, #-8]
   1e0e0:	str	r2, [r3]
   1e0e4:	mov	r3, #0
   1e0e8:	mov	r0, r3
   1e0ec:	sub	sp, fp, #4
   1e0f0:	pop	{fp, pc}
   1e0f4:	push	{fp, lr}
   1e0f8:	add	fp, sp, #4
   1e0fc:	sub	sp, sp, #8
   1e100:	str	r0, [fp, #-8]
   1e104:	ldr	r0, [fp, #-8]
   1e108:	bl	2c600 <flatcc_builder_start_union_vector@@Base>
   1e10c:	mov	r3, r0
   1e110:	mov	r0, r3
   1e114:	sub	sp, fp, #4
   1e118:	pop	{fp, pc}
   1e11c:	push	{fp, lr}
   1e120:	add	fp, sp, #4
   1e124:	sub	sp, sp, #16
   1e128:	str	r0, [fp, #-16]
   1e12c:	sub	r3, fp, #12
   1e130:	ldr	r1, [fp, #-16]
   1e134:	mov	r0, r3
   1e138:	bl	2c67c <flatcc_builder_end_union_vector@@Base>
   1e13c:	sub	r3, fp, #12
   1e140:	ldm	r3, {r1, r2}
   1e144:	ldr	r0, [fp, #-16]
   1e148:	bl	1e034 <_start@@Base+0xb61c>
   1e14c:	mov	r3, r0
   1e150:	mov	r0, r3
   1e154:	sub	sp, fp, #4
   1e158:	pop	{fp, pc}
   1e15c:	push	{fp, lr}
   1e160:	add	fp, sp, #4
   1e164:	sub	sp, sp, #16
   1e168:	str	r0, [fp, #-8]
   1e16c:	sub	r3, fp, #16
   1e170:	stm	r3, {r1, r2}
   1e174:	sub	r3, fp, #16
   1e178:	ldm	r3, {r1, r2}
   1e17c:	ldr	r0, [fp, #-8]
   1e180:	bl	2c9cc <flatcc_builder_union_vector_push@@Base>
   1e184:	mov	r3, r0
   1e188:	mov	r0, r3
   1e18c:	sub	sp, fp, #4
   1e190:	pop	{fp, pc}
   1e194:	push	{fp, lr}
   1e198:	add	fp, sp, #4
   1e19c:	sub	sp, sp, #16
   1e1a0:	str	r0, [fp, #-16]
   1e1a4:	str	r1, [fp, #-20]	; 0xffffffec
   1e1a8:	sub	r3, fp, #12
   1e1ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e1b0:	mov	r0, r3
   1e1b4:	bl	1b3f0 <_start@@Base+0x89d8>
   1e1b8:	sub	r3, fp, #12
   1e1bc:	ldm	r3, {r1, r2}
   1e1c0:	ldr	r0, [fp, #-16]
   1e1c4:	bl	1b510 <_start@@Base+0x8af8>
   1e1c8:	mov	r3, r0
   1e1cc:	mov	r0, r3
   1e1d0:	sub	sp, fp, #4
   1e1d4:	pop	{fp, pc}
   1e1d8:	push	{fp, lr}
   1e1dc:	add	fp, sp, #4
   1e1e0:	sub	sp, sp, #16
   1e1e4:	str	r0, [fp, #-16]
   1e1e8:	str	r1, [fp, #-20]	; 0xffffffec
   1e1ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e1f0:	ldr	r0, [fp, #-16]
   1e1f4:	bl	1db98 <_start@@Base+0xb180>
   1e1f8:	mov	r2, r0
   1e1fc:	sub	r3, fp, #12
   1e200:	mov	r1, r2
   1e204:	mov	r0, r3
   1e208:	bl	1b3f0 <_start@@Base+0x89d8>
   1e20c:	sub	r3, fp, #12
   1e210:	ldm	r3, {r1, r2}
   1e214:	ldr	r0, [fp, #-16]
   1e218:	bl	1b510 <_start@@Base+0x8af8>
   1e21c:	mov	r3, r0
   1e220:	mov	r0, r3
   1e224:	sub	sp, fp, #4
   1e228:	pop	{fp, pc}
   1e22c:	push	{fp, lr}
   1e230:	add	fp, sp, #4
   1e234:	sub	sp, sp, #8
   1e238:	str	r0, [fp, #-8]
   1e23c:	ldr	r0, [fp, #-8]
   1e240:	bl	1ac2c <_start@@Base+0x8214>
   1e244:	mov	r3, r0
   1e248:	mov	r0, r3
   1e24c:	sub	sp, fp, #4
   1e250:	pop	{fp, pc}
   1e254:	push	{fp, lr}
   1e258:	add	fp, sp, #4
   1e25c:	sub	sp, sp, #16
   1e260:	str	r0, [fp, #-16]
   1e264:	ldr	r0, [fp, #-16]
   1e268:	bl	1ac5c <_start@@Base+0x8244>
   1e26c:	mov	r2, r0
   1e270:	sub	r3, fp, #12
   1e274:	mov	r1, r2
   1e278:	mov	r0, r3
   1e27c:	bl	1b480 <_start@@Base+0x8a68>
   1e280:	sub	r3, fp, #12
   1e284:	ldm	r3, {r1, r2}
   1e288:	ldr	r0, [fp, #-16]
   1e28c:	bl	1b510 <_start@@Base+0x8af8>
   1e290:	mov	r3, r0
   1e294:	mov	r0, r3
   1e298:	sub	sp, fp, #4
   1e29c:	pop	{fp, pc}
   1e2a0:	push	{fp, lr}
   1e2a4:	add	fp, sp, #4
   1e2a8:	sub	sp, sp, #16
   1e2ac:	str	r0, [fp, #-16]
   1e2b0:	str	r1, [fp, #-20]	; 0xffffffec
   1e2b4:	sub	r3, fp, #12
   1e2b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e2bc:	mov	r0, r3
   1e2c0:	bl	1b480 <_start@@Base+0x8a68>
   1e2c4:	sub	r3, fp, #12
   1e2c8:	ldm	r3, {r1, r2}
   1e2cc:	ldr	r0, [fp, #-16]
   1e2d0:	bl	1b510 <_start@@Base+0x8af8>
   1e2d4:	mov	r3, r0
   1e2d8:	mov	r0, r3
   1e2dc:	sub	sp, fp, #4
   1e2e0:	pop	{fp, pc}
   1e2e4:	push	{fp, lr}
   1e2e8:	add	fp, sp, #4
   1e2ec:	sub	sp, sp, #16
   1e2f0:	str	r0, [fp, #-16]
   1e2f4:	str	r1, [fp, #-20]	; 0xffffffec
   1e2f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e2fc:	ldr	r0, [fp, #-16]
   1e300:	bl	1acac <_start@@Base+0x8294>
   1e304:	mov	r2, r0
   1e308:	sub	r3, fp, #12
   1e30c:	mov	r1, r2
   1e310:	mov	r0, r3
   1e314:	bl	1b480 <_start@@Base+0x8a68>
   1e318:	sub	r3, fp, #12
   1e31c:	ldm	r3, {r1, r2}
   1e320:	ldr	r0, [fp, #-16]
   1e324:	bl	1b510 <_start@@Base+0x8af8>
   1e328:	mov	r3, r0
   1e32c:	mov	r0, r3
   1e330:	sub	sp, fp, #4
   1e334:	pop	{fp, pc}
   1e338:	push	{fp, lr}
   1e33c:	add	fp, sp, #4
   1e340:	sub	sp, sp, #16
   1e344:	str	r0, [fp, #-16]
   1e348:	str	r1, [fp, #-20]	; 0xffffffec
   1e34c:	sub	r3, fp, #12
   1e350:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e354:	mov	r0, r3
   1e358:	bl	1b4c8 <_start@@Base+0x8ab0>
   1e35c:	sub	r3, fp, #12
   1e360:	ldm	r3, {r1, r2}
   1e364:	ldr	r0, [fp, #-16]
   1e368:	bl	1b510 <_start@@Base+0x8af8>
   1e36c:	mov	r3, r0
   1e370:	mov	r0, r3
   1e374:	sub	sp, fp, #4
   1e378:	pop	{fp, pc}
   1e37c:	push	{fp, lr}
   1e380:	add	fp, sp, #4
   1e384:	sub	sp, sp, #16
   1e388:	str	r0, [fp, #-16]
   1e38c:	str	r1, [fp, #-20]	; 0xffffffec
   1e390:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e394:	ldr	r0, [fp, #-16]
   1e398:	bl	1a218 <_start@@Base+0x7800>
   1e39c:	mov	r2, r0
   1e3a0:	sub	r3, fp, #12
   1e3a4:	mov	r1, r2
   1e3a8:	mov	r0, r3
   1e3ac:	bl	1b4c8 <_start@@Base+0x8ab0>
   1e3b0:	sub	r3, fp, #12
   1e3b4:	ldm	r3, {r1, r2}
   1e3b8:	ldr	r0, [fp, #-16]
   1e3bc:	bl	1b510 <_start@@Base+0x8af8>
   1e3c0:	mov	r3, r0
   1e3c4:	mov	r0, r3
   1e3c8:	sub	sp, fp, #4
   1e3cc:	pop	{fp, pc}
   1e3d0:	push	{fp, lr}
   1e3d4:	add	fp, sp, #4
   1e3d8:	sub	sp, sp, #8
   1e3dc:	str	r0, [fp, #-8]
   1e3e0:	ldr	r3, [pc, #56]	; 1e420 <_start@@Base+0xba08>
   1e3e4:	add	r3, pc, r3
   1e3e8:	mov	r1, r3
   1e3ec:	ldr	r0, [fp, #-8]
   1e3f0:	bl	1a360 <_start@@Base+0x7948>
   1e3f4:	mov	r3, r0
   1e3f8:	cmp	r3, #0
   1e3fc:	bne	1e410 <_start@@Base+0xb9f8>
   1e400:	ldr	r0, [fp, #-8]
   1e404:	bl	1b1e0 <_start@@Base+0x87c8>
   1e408:	mov	r3, r0
   1e40c:	b	1e414 <_start@@Base+0xb9fc>
   1e410:	mvn	r3, #0
   1e414:	mov	r0, r3
   1e418:	sub	sp, fp, #4
   1e41c:	pop	{fp, pc}
   1e420:	andeq	r2, r1, r4, lsr #15
   1e424:	push	{fp, lr}
   1e428:	add	fp, sp, #4
   1e42c:	sub	sp, sp, #8
   1e430:	str	r0, [fp, #-8]
   1e434:	ldr	r0, [fp, #-8]
   1e438:	bl	1b20c <_start@@Base+0x87f4>
   1e43c:	mov	r3, r0
   1e440:	mov	r1, r3
   1e444:	ldr	r0, [fp, #-8]
   1e448:	bl	1a3d0 <_start@@Base+0x79b8>
   1e44c:	mov	r3, r0
   1e450:	mov	r0, r3
   1e454:	sub	sp, fp, #4
   1e458:	pop	{fp, pc}
   1e45c:	push	{fp, lr}
   1e460:	add	fp, sp, #4
   1e464:	sub	sp, sp, #8
   1e468:	str	r0, [fp, #-8]
   1e46c:	ldr	r3, [fp, #-8]
   1e470:	ldrb	r3, [r3, #12]
   1e474:	cmp	r3, #1
   1e478:	bne	1e498 <_start@@Base+0xba80>
   1e47c:	ldr	r3, [pc, #36]	; 1e4a8 <_start@@Base+0xba90>
   1e480:	add	r3, pc, r3
   1e484:	mov	r1, r3
   1e488:	ldr	r0, [fp, #-8]
   1e48c:	bl	2fd88 <flatcc_verify_union_table@@Base>
   1e490:	mov	r3, r0
   1e494:	b	1e49c <_start@@Base+0xba84>
   1e498:	mov	r3, #0
   1e49c:	mov	r0, r3
   1e4a0:	sub	sp, fp, #4
   1e4a4:	pop	{fp, pc}
   1e4a8:	andeq	r0, r0, r4, ror #4
   1e4ac:	push	{fp, lr}
   1e4b0:	add	fp, sp, #4
   1e4b4:	sub	sp, sp, #8
   1e4b8:	str	r0, [fp, #-8]
   1e4bc:	ldr	r3, [fp, #-8]
   1e4c0:	ldrb	r3, [r3, #12]
   1e4c4:	sub	r3, r3, #1
   1e4c8:	cmp	r3, #3
   1e4cc:	addls	pc, pc, r3, lsl #2
   1e4d0:	b	1e554 <_start@@Base+0xbb3c>
   1e4d4:	b	1e4e4 <_start@@Base+0xbacc>
   1e4d8:	b	1e500 <_start@@Base+0xbae8>
   1e4dc:	b	1e51c <_start@@Base+0xbb04>
   1e4e0:	b	1e538 <_start@@Base+0xbb20>
   1e4e4:	ldr	r3, [pc, #120]	; 1e564 <_start@@Base+0xbb4c>
   1e4e8:	add	r3, pc, r3
   1e4ec:	mov	r1, r3
   1e4f0:	ldr	r0, [fp, #-8]
   1e4f4:	bl	2fd88 <flatcc_verify_union_table@@Base>
   1e4f8:	mov	r3, r0
   1e4fc:	b	1e558 <_start@@Base+0xbb40>
   1e500:	ldr	r3, [pc, #96]	; 1e568 <_start@@Base+0xbb50>
   1e504:	add	r3, pc, r3
   1e508:	mov	r1, r3
   1e50c:	ldr	r0, [fp, #-8]
   1e510:	bl	2fd88 <flatcc_verify_union_table@@Base>
   1e514:	mov	r3, r0
   1e518:	b	1e558 <_start@@Base+0xbb40>
   1e51c:	ldr	r3, [pc, #72]	; 1e56c <_start@@Base+0xbb54>
   1e520:	add	r3, pc, r3
   1e524:	mov	r1, r3
   1e528:	ldr	r0, [fp, #-8]
   1e52c:	bl	2fd88 <flatcc_verify_union_table@@Base>
   1e530:	mov	r3, r0
   1e534:	b	1e558 <_start@@Base+0xbb40>
   1e538:	ldr	r3, [pc, #48]	; 1e570 <_start@@Base+0xbb58>
   1e53c:	add	r3, pc, r3
   1e540:	mov	r1, r3
   1e544:	ldr	r0, [fp, #-8]
   1e548:	bl	2fd88 <flatcc_verify_union_table@@Base>
   1e54c:	mov	r3, r0
   1e550:	b	1e558 <_start@@Base+0xbb40>
   1e554:	mov	r3, #0
   1e558:	mov	r0, r3
   1e55c:	sub	sp, fp, #4
   1e560:	pop	{fp, pc}
   1e564:	andeq	r0, r0, r0, lsl #22
   1e568:	andeq	r0, r0, r8, ror #6
   1e56c:	andeq	r0, r0, r8, ror #3
   1e570:	andeq	r0, r0, r8, asr #11
   1e574:	push	{fp, lr}
   1e578:	add	fp, sp, #4
   1e57c:	sub	sp, sp, #8
   1e580:	str	r0, [fp, #-8]
   1e584:	ldr	r3, [fp, #-8]
   1e588:	ldrb	r3, [r3, #12]
   1e58c:	cmp	r3, #9
   1e590:	beq	1e600 <_start@@Base+0xbbe8>
   1e594:	cmp	r3, #9
   1e598:	bgt	1e5b0 <_start@@Base+0xbb98>
   1e59c:	cmp	r3, #2
   1e5a0:	beq	1e5cc <_start@@Base+0xbbb4>
   1e5a4:	cmp	r3, #8
   1e5a8:	beq	1e5e8 <_start@@Base+0xbbd0>
   1e5ac:	b	1e650 <_start@@Base+0xbc38>
   1e5b0:	cmp	r3, #11
   1e5b4:	beq	1e630 <_start@@Base+0xbc18>
   1e5b8:	cmp	r3, #11
   1e5bc:	blt	1e618 <_start@@Base+0xbc00>
   1e5c0:	cmp	r3, #255	; 0xff
   1e5c4:	beq	1e640 <_start@@Base+0xbc28>
   1e5c8:	b	1e650 <_start@@Base+0xbc38>
   1e5cc:	ldr	r3, [pc, #140]	; 1e660 <_start@@Base+0xbc48>
   1e5d0:	add	r3, pc, r3
   1e5d4:	mov	r1, r3
   1e5d8:	ldr	r0, [fp, #-8]
   1e5dc:	bl	2fd88 <flatcc_verify_union_table@@Base>
   1e5e0:	mov	r3, r0
   1e5e4:	b	1e654 <_start@@Base+0xbc3c>
   1e5e8:	mov	r2, #2
   1e5ec:	mov	r1, #2
   1e5f0:	ldr	r0, [fp, #-8]
   1e5f4:	bl	2fdec <flatcc_verify_union_struct@@Base>
   1e5f8:	mov	r3, r0
   1e5fc:	b	1e654 <_start@@Base+0xbc3c>
   1e600:	mov	r2, #4
   1e604:	mov	r1, #4
   1e608:	ldr	r0, [fp, #-8]
   1e60c:	bl	2fdec <flatcc_verify_union_struct@@Base>
   1e610:	mov	r3, r0
   1e614:	b	1e654 <_start@@Base+0xbc3c>
   1e618:	mov	r2, #4
   1e61c:	mov	r1, #4
   1e620:	ldr	r0, [fp, #-8]
   1e624:	bl	2fdec <flatcc_verify_union_struct@@Base>
   1e628:	mov	r3, r0
   1e62c:	b	1e654 <_start@@Base+0xbc3c>
   1e630:	ldr	r0, [fp, #-8]
   1e634:	bl	2fe40 <flatcc_verify_union_string@@Base>
   1e638:	mov	r3, r0
   1e63c:	b	1e654 <_start@@Base+0xbc3c>
   1e640:	ldr	r0, [fp, #-8]
   1e644:	bl	2fe40 <flatcc_verify_union_string@@Base>
   1e648:	mov	r3, r0
   1e64c:	b	1e654 <_start@@Base+0xbc3c>
   1e650:	mov	r3, #0
   1e654:	mov	r0, r3
   1e658:	sub	sp, fp, #4
   1e65c:	pop	{fp, pc}
   1e660:	andeq	r1, r0, ip, ror r4
   1e664:	push	{fp, lr}
   1e668:	add	fp, sp, #4
   1e66c:	sub	sp, sp, #16
   1e670:	str	r0, [fp, #-8]
   1e674:	str	r1, [fp, #-12]
   1e678:	mov	r3, #16
   1e67c:	str	r3, [sp]
   1e680:	mov	r3, #32
   1e684:	ldr	r2, [pc, #24]	; 1e6a4 <_start@@Base+0xbc8c>
   1e688:	ldr	r1, [fp, #-12]
   1e68c:	ldr	r0, [fp, #-8]
   1e690:	bl	30138 <flatcc_verify_struct_as_typed_root@@Base>
   1e694:	mov	r3, r0
   1e698:	mov	r0, r3
   1e69c:	sub	sp, fp, #4
   1e6a0:	pop	{fp, pc}
   1e6a4:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   1e6a8:	push	{fp, lr}
   1e6ac:	add	fp, sp, #4
   1e6b0:	sub	sp, sp, #24
   1e6b4:	str	r0, [fp, #-8]
   1e6b8:	str	r1, [fp, #-12]
   1e6bc:	str	r2, [fp, #-16]
   1e6c0:	mov	r3, #16
   1e6c4:	str	r3, [sp]
   1e6c8:	mov	r3, #32
   1e6cc:	ldr	r2, [fp, #-16]
   1e6d0:	ldr	r1, [fp, #-12]
   1e6d4:	ldr	r0, [fp, #-8]
   1e6d8:	bl	30138 <flatcc_verify_struct_as_typed_root@@Base>
   1e6dc:	mov	r3, r0
   1e6e0:	mov	r0, r3
   1e6e4:	sub	sp, fp, #4
   1e6e8:	pop	{fp, pc}
   1e6ec:	push	{fp}		; (str fp, [sp, #-4]!)
   1e6f0:	add	fp, sp, #0
   1e6f4:	sub	sp, sp, #12
   1e6f8:	str	r0, [fp, #-8]
   1e6fc:	mov	r3, #0
   1e700:	mov	r0, r3
   1e704:	add	sp, fp, #0
   1e708:	pop	{fp}		; (ldr fp, [sp], #4)
   1e70c:	bx	lr
   1e710:	push	{fp}		; (str fp, [sp, #-4]!)
   1e714:	add	fp, sp, #0
   1e718:	sub	sp, sp, #12
   1e71c:	str	r0, [fp, #-8]
   1e720:	mov	r3, #0
   1e724:	mov	r0, r3
   1e728:	add	sp, fp, #0
   1e72c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e730:	bx	lr
   1e734:	push	{fp}		; (str fp, [sp, #-4]!)
   1e738:	add	fp, sp, #0
   1e73c:	sub	sp, sp, #12
   1e740:	str	r0, [fp, #-8]
   1e744:	mov	r3, #0
   1e748:	mov	r0, r3
   1e74c:	add	sp, fp, #0
   1e750:	pop	{fp}		; (ldr fp, [sp], #4)
   1e754:	bx	lr
   1e758:	push	{fp, lr}
   1e75c:	add	fp, sp, #4
   1e760:	sub	sp, sp, #16
   1e764:	str	r0, [fp, #-16]
   1e768:	mov	r3, #1
   1e76c:	mov	r2, #0
   1e770:	mov	r1, #0
   1e774:	ldr	r0, [fp, #-16]
   1e778:	bl	2f990 <flatcc_verify_field@@Base>
   1e77c:	str	r0, [fp, #-8]
   1e780:	ldr	r3, [fp, #-8]
   1e784:	cmp	r3, #0
   1e788:	beq	1e794 <_start@@Base+0xbd7c>
   1e78c:	ldr	r3, [fp, #-8]
   1e790:	b	1e798 <_start@@Base+0xbd80>
   1e794:	mov	r3, #0
   1e798:	mov	r0, r3
   1e79c:	sub	sp, fp, #4
   1e7a0:	pop	{fp, pc}
   1e7a4:	push	{fp, lr}
   1e7a8:	add	fp, sp, #4
   1e7ac:	sub	sp, sp, #8
   1e7b0:	str	r0, [fp, #-8]
   1e7b4:	str	r1, [fp, #-12]
   1e7b8:	ldr	r3, [pc, #36]	; 1e7e4 <_start@@Base+0xbdcc>
   1e7bc:	add	r3, pc, r3
   1e7c0:	ldr	r2, [pc, #32]	; 1e7e8 <_start@@Base+0xbdd0>
   1e7c4:	add	r2, pc, r2
   1e7c8:	ldr	r1, [fp, #-12]
   1e7cc:	ldr	r0, [fp, #-8]
   1e7d0:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1e7d4:	mov	r3, r0
   1e7d8:	mov	r0, r3
   1e7dc:	sub	sp, fp, #4
   1e7e0:	pop	{fp, pc}
   1e7e4:			; <UNDEFINED> instruction: 0xffffff94
   1e7e8:	muleq	r1, ip, sl
   1e7ec:	push	{fp, lr}
   1e7f0:	add	fp, sp, #4
   1e7f4:	sub	sp, sp, #16
   1e7f8:	str	r0, [fp, #-8]
   1e7fc:	str	r1, [fp, #-12]
   1e800:	str	r2, [fp, #-16]
   1e804:	ldr	r3, [pc, #32]	; 1e82c <_start@@Base+0xbe14>
   1e808:	add	r3, pc, r3
   1e80c:	ldr	r2, [fp, #-16]
   1e810:	ldr	r1, [fp, #-12]
   1e814:	ldr	r0, [fp, #-8]
   1e818:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1e81c:	mov	r3, r0
   1e820:	mov	r0, r3
   1e824:	sub	sp, fp, #4
   1e828:	pop	{fp, pc}
   1e82c:			; <UNDEFINED> instruction: 0xffffff48
   1e830:	push	{fp, lr}
   1e834:	add	fp, sp, #4
   1e838:	sub	sp, sp, #16
   1e83c:	str	r0, [fp, #-8]
   1e840:	str	r1, [fp, #-12]
   1e844:	str	r2, [fp, #-16]
   1e848:	ldr	r3, [pc, #32]	; 1e870 <_start@@Base+0xbe58>
   1e84c:	add	r3, pc, r3
   1e850:	ldr	r2, [fp, #-16]
   1e854:	ldr	r1, [fp, #-12]
   1e858:	ldr	r0, [fp, #-8]
   1e85c:	bl	30254 <flatcc_verify_table_as_typed_root@@Base>
   1e860:	mov	r3, r0
   1e864:	mov	r0, r3
   1e868:	sub	sp, fp, #4
   1e86c:	pop	{fp, pc}
   1e870:			; <UNDEFINED> instruction: 0xffffff04
   1e874:	push	{fp, lr}
   1e878:	add	fp, sp, #4
   1e87c:	sub	sp, sp, #16
   1e880:	str	r0, [fp, #-16]
   1e884:	mov	r3, #1
   1e888:	mov	r2, #1
   1e88c:	mov	r1, #0
   1e890:	ldr	r0, [fp, #-16]
   1e894:	bl	2f990 <flatcc_verify_field@@Base>
   1e898:	str	r0, [fp, #-8]
   1e89c:	ldr	r3, [fp, #-8]
   1e8a0:	cmp	r3, #0
   1e8a4:	beq	1e8b0 <_start@@Base+0xbe98>
   1e8a8:	ldr	r3, [fp, #-8]
   1e8ac:	b	1e938 <_start@@Base+0xbf20>
   1e8b0:	mov	r3, #1
   1e8b4:	mov	r2, #1
   1e8b8:	mov	r1, #1
   1e8bc:	ldr	r0, [fp, #-16]
   1e8c0:	bl	2f990 <flatcc_verify_field@@Base>
   1e8c4:	str	r0, [fp, #-8]
   1e8c8:	ldr	r3, [fp, #-8]
   1e8cc:	cmp	r3, #0
   1e8d0:	beq	1e8dc <_start@@Base+0xbec4>
   1e8d4:	ldr	r3, [fp, #-8]
   1e8d8:	b	1e938 <_start@@Base+0xbf20>
   1e8dc:	mov	r3, #1
   1e8e0:	mov	r2, #1
   1e8e4:	mov	r1, #2
   1e8e8:	ldr	r0, [fp, #-16]
   1e8ec:	bl	2f990 <flatcc_verify_field@@Base>
   1e8f0:	str	r0, [fp, #-8]
   1e8f4:	ldr	r3, [fp, #-8]
   1e8f8:	cmp	r3, #0
   1e8fc:	beq	1e908 <_start@@Base+0xbef0>
   1e900:	ldr	r3, [fp, #-8]
   1e904:	b	1e938 <_start@@Base+0xbf20>
   1e908:	mov	r3, #1
   1e90c:	mov	r2, #1
   1e910:	mov	r1, #3
   1e914:	ldr	r0, [fp, #-16]
   1e918:	bl	2f990 <flatcc_verify_field@@Base>
   1e91c:	str	r0, [fp, #-8]
   1e920:	ldr	r3, [fp, #-8]
   1e924:	cmp	r3, #0
   1e928:	beq	1e934 <_start@@Base+0xbf1c>
   1e92c:	ldr	r3, [fp, #-8]
   1e930:	b	1e938 <_start@@Base+0xbf20>
   1e934:	mov	r3, #0
   1e938:	mov	r0, r3
   1e93c:	sub	sp, fp, #4
   1e940:	pop	{fp, pc}
   1e944:	push	{fp, lr}
   1e948:	add	fp, sp, #4
   1e94c:	sub	sp, sp, #16
   1e950:	str	r0, [fp, #-16]
   1e954:	mov	r3, #1
   1e958:	mov	r2, #0
   1e95c:	mov	r1, #0
   1e960:	ldr	r0, [fp, #-16]
   1e964:	bl	2f990 <flatcc_verify_field@@Base>
   1e968:	str	r0, [fp, #-8]
   1e96c:	ldr	r3, [fp, #-8]
   1e970:	cmp	r3, #0
   1e974:	beq	1e980 <_start@@Base+0xbf68>
   1e978:	ldr	r3, [fp, #-8]
   1e97c:	b	1ea60 <_start@@Base+0xc048>
   1e980:	mov	r3, #8
   1e984:	mov	r2, #8
   1e988:	mov	r1, #1
   1e98c:	ldr	r0, [fp, #-16]
   1e990:	bl	2f990 <flatcc_verify_field@@Base>
   1e994:	str	r0, [fp, #-8]
   1e998:	ldr	r3, [fp, #-8]
   1e99c:	cmp	r3, #0
   1e9a0:	beq	1e9ac <_start@@Base+0xbf94>
   1e9a4:	ldr	r3, [fp, #-8]
   1e9a8:	b	1ea60 <_start@@Base+0xc048>
   1e9ac:	mov	r3, #8
   1e9b0:	mov	r2, #8
   1e9b4:	mov	r1, #2
   1e9b8:	ldr	r0, [fp, #-16]
   1e9bc:	bl	2f990 <flatcc_verify_field@@Base>
   1e9c0:	str	r0, [fp, #-8]
   1e9c4:	ldr	r3, [fp, #-8]
   1e9c8:	cmp	r3, #0
   1e9cc:	beq	1e9d8 <_start@@Base+0xbfc0>
   1e9d0:	ldr	r3, [fp, #-8]
   1e9d4:	b	1ea60 <_start@@Base+0xc048>
   1e9d8:	mov	r3, #4
   1e9dc:	mov	r2, #4
   1e9e0:	mov	r1, #3
   1e9e4:	ldr	r0, [fp, #-16]
   1e9e8:	bl	2f990 <flatcc_verify_field@@Base>
   1e9ec:	str	r0, [fp, #-8]
   1e9f0:	ldr	r3, [fp, #-8]
   1e9f4:	cmp	r3, #0
   1e9f8:	beq	1ea04 <_start@@Base+0xbfec>
   1e9fc:	ldr	r3, [fp, #-8]
   1ea00:	b	1ea60 <_start@@Base+0xc048>
   1ea04:	mov	r3, #8
   1ea08:	mov	r2, #8
   1ea0c:	mov	r1, #4
   1ea10:	ldr	r0, [fp, #-16]
   1ea14:	bl	2f990 <flatcc_verify_field@@Base>
   1ea18:	str	r0, [fp, #-8]
   1ea1c:	ldr	r3, [fp, #-8]
   1ea20:	cmp	r3, #0
   1ea24:	beq	1ea30 <_start@@Base+0xc018>
   1ea28:	ldr	r3, [fp, #-8]
   1ea2c:	b	1ea60 <_start@@Base+0xc048>
   1ea30:	mov	r3, #8
   1ea34:	mov	r2, #8
   1ea38:	mov	r1, #5
   1ea3c:	ldr	r0, [fp, #-16]
   1ea40:	bl	2f990 <flatcc_verify_field@@Base>
   1ea44:	str	r0, [fp, #-8]
   1ea48:	ldr	r3, [fp, #-8]
   1ea4c:	cmp	r3, #0
   1ea50:	beq	1ea5c <_start@@Base+0xc044>
   1ea54:	ldr	r3, [fp, #-8]
   1ea58:	b	1ea60 <_start@@Base+0xc048>
   1ea5c:	mov	r3, #0
   1ea60:	mov	r0, r3
   1ea64:	sub	sp, fp, #4
   1ea68:	pop	{fp, pc}
   1ea6c:	push	{fp, lr}
   1ea70:	add	fp, sp, #4
   1ea74:	sub	sp, sp, #16
   1ea78:	str	r0, [fp, #-16]
   1ea7c:	mov	r2, #0
   1ea80:	mov	r1, #0
   1ea84:	ldr	r0, [fp, #-16]
   1ea88:	bl	2fa08 <flatcc_verify_string_field@@Base>
   1ea8c:	str	r0, [fp, #-8]
   1ea90:	ldr	r3, [fp, #-8]
   1ea94:	cmp	r3, #0
   1ea98:	beq	1eaa4 <_start@@Base+0xc08c>
   1ea9c:	ldr	r3, [fp, #-8]
   1eaa0:	b	1eb00 <_start@@Base+0xc0e8>
   1eaa4:	mov	r3, #8
   1eaa8:	mov	r2, #8
   1eaac:	mov	r1, #1
   1eab0:	ldr	r0, [fp, #-16]
   1eab4:	bl	2f990 <flatcc_verify_field@@Base>
   1eab8:	str	r0, [fp, #-8]
   1eabc:	ldr	r3, [fp, #-8]
   1eac0:	cmp	r3, #0
   1eac4:	beq	1ead0 <_start@@Base+0xc0b8>
   1eac8:	ldr	r3, [fp, #-8]
   1eacc:	b	1eb00 <_start@@Base+0xc0e8>
   1ead0:	mov	r3, #2
   1ead4:	mov	r2, #2
   1ead8:	mov	r1, #2
   1eadc:	ldr	r0, [fp, #-16]
   1eae0:	bl	2f990 <flatcc_verify_field@@Base>
   1eae4:	str	r0, [fp, #-8]
   1eae8:	ldr	r3, [fp, #-8]
   1eaec:	cmp	r3, #0
   1eaf0:	beq	1eafc <_start@@Base+0xc0e4>
   1eaf4:	ldr	r3, [fp, #-8]
   1eaf8:	b	1eb00 <_start@@Base+0xc0e8>
   1eafc:	mov	r3, #0
   1eb00:	mov	r0, r3
   1eb04:	sub	sp, fp, #4
   1eb08:	pop	{fp, pc}
   1eb0c:	push	{fp, lr}
   1eb10:	add	fp, sp, #4
   1eb14:	sub	sp, sp, #16
   1eb18:	str	r0, [fp, #-16]
   1eb1c:	ldr	r3, [pc, #152]	; 1ebbc <_start@@Base+0xc1a4>
   1eb20:	add	r3, pc, r3
   1eb24:	mov	r2, #0
   1eb28:	mov	r1, #0
   1eb2c:	ldr	r0, [fp, #-16]
   1eb30:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1eb34:	str	r0, [fp, #-8]
   1eb38:	ldr	r3, [fp, #-8]
   1eb3c:	cmp	r3, #0
   1eb40:	beq	1eb4c <_start@@Base+0xc134>
   1eb44:	ldr	r3, [fp, #-8]
   1eb48:	b	1ebb0 <_start@@Base+0xc198>
   1eb4c:	ldr	r3, [pc, #108]	; 1ebc0 <_start@@Base+0xc1a8>
   1eb50:	add	r3, pc, r3
   1eb54:	mov	r2, #0
   1eb58:	mov	r1, #1
   1eb5c:	ldr	r0, [fp, #-16]
   1eb60:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1eb64:	str	r0, [fp, #-8]
   1eb68:	ldr	r3, [fp, #-8]
   1eb6c:	cmp	r3, #0
   1eb70:	beq	1eb7c <_start@@Base+0xc164>
   1eb74:	ldr	r3, [fp, #-8]
   1eb78:	b	1ebb0 <_start@@Base+0xc198>
   1eb7c:	ldr	r3, [pc, #64]	; 1ebc4 <_start@@Base+0xc1ac>
   1eb80:	add	r3, pc, r3
   1eb84:	mov	r2, #0
   1eb88:	mov	r1, #3
   1eb8c:	ldr	r0, [fp, #-16]
   1eb90:	bl	307ac <flatcc_verify_union_vector_field@@Base>
   1eb94:	str	r0, [fp, #-8]
   1eb98:	ldr	r3, [fp, #-8]
   1eb9c:	cmp	r3, #0
   1eba0:	beq	1ebac <_start@@Base+0xc194>
   1eba4:	ldr	r3, [fp, #-8]
   1eba8:	b	1ebb0 <_start@@Base+0xc198>
   1ebac:	mov	r3, #0
   1ebb0:	mov	r0, r3
   1ebb4:	sub	sp, fp, #4
   1ebb8:	pop	{fp, pc}
   1ebbc:	andeq	r0, r0, r0, lsr #1
   1ebc0:	andeq	r0, r0, r8, asr #30
   1ebc4:			; <UNDEFINED> instruction: 0xfffff924
   1ebc8:	push	{fp, lr}
   1ebcc:	add	fp, sp, #4
   1ebd0:	sub	sp, sp, #16
   1ebd4:	str	r0, [fp, #-16]
   1ebd8:	ldr	r3, [pc, #152]	; 1ec78 <_start@@Base+0xc260>
   1ebdc:	add	r3, pc, r3
   1ebe0:	mov	r2, #0
   1ebe4:	mov	r1, #0
   1ebe8:	ldr	r0, [fp, #-16]
   1ebec:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1ebf0:	str	r0, [fp, #-8]
   1ebf4:	ldr	r3, [fp, #-8]
   1ebf8:	cmp	r3, #0
   1ebfc:	beq	1ec08 <_start@@Base+0xc1f0>
   1ec00:	ldr	r3, [fp, #-8]
   1ec04:	b	1ec6c <_start@@Base+0xc254>
   1ec08:	ldr	r3, [pc, #108]	; 1ec7c <_start@@Base+0xc264>
   1ec0c:	add	r3, pc, r3
   1ec10:	mov	r2, #0
   1ec14:	mov	r1, #1
   1ec18:	ldr	r0, [fp, #-16]
   1ec1c:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1ec20:	str	r0, [fp, #-8]
   1ec24:	ldr	r3, [fp, #-8]
   1ec28:	cmp	r3, #0
   1ec2c:	beq	1ec38 <_start@@Base+0xc220>
   1ec30:	ldr	r3, [fp, #-8]
   1ec34:	b	1ec6c <_start@@Base+0xc254>
   1ec38:	ldr	r3, [pc, #64]	; 1ec80 <_start@@Base+0xc268>
   1ec3c:	add	r3, pc, r3
   1ec40:	mov	r2, #0
   1ec44:	mov	r1, #2
   1ec48:	ldr	r0, [fp, #-16]
   1ec4c:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1ec50:	str	r0, [fp, #-8]
   1ec54:	ldr	r3, [fp, #-8]
   1ec58:	cmp	r3, #0
   1ec5c:	beq	1ec68 <_start@@Base+0xc250>
   1ec60:	ldr	r3, [fp, #-8]
   1ec64:	b	1ec6c <_start@@Base+0xc254>
   1ec68:	mov	r3, #0
   1ec6c:	mov	r0, r3
   1ec70:	sub	sp, fp, #4
   1ec74:	pop	{fp, pc}
   1ec78:	andeq	r0, r0, r0, lsr #1
   1ec7c:	andeq	r0, r0, r0, lsl r2
   1ec80:	andeq	r0, r0, r8, asr r2
   1ec84:	push	{fp, lr}
   1ec88:	add	fp, sp, #4
   1ec8c:	sub	sp, sp, #16
   1ec90:	str	r0, [fp, #-16]
   1ec94:	mov	r2, #0
   1ec98:	mov	r1, #0
   1ec9c:	ldr	r0, [fp, #-16]
   1eca0:	bl	2fa08 <flatcc_verify_string_field@@Base>
   1eca4:	str	r0, [fp, #-8]
   1eca8:	ldr	r3, [fp, #-8]
   1ecac:	cmp	r3, #0
   1ecb0:	beq	1ecbc <_start@@Base+0xc2a4>
   1ecb4:	ldr	r3, [fp, #-8]
   1ecb8:	b	1ee18 <_start@@Base+0xc400>
   1ecbc:	mov	r3, #4
   1ecc0:	mov	r2, #4
   1ecc4:	mov	r1, #1
   1ecc8:	ldr	r0, [fp, #-16]
   1eccc:	bl	2f990 <flatcc_verify_field@@Base>
   1ecd0:	str	r0, [fp, #-8]
   1ecd4:	ldr	r3, [fp, #-8]
   1ecd8:	cmp	r3, #0
   1ecdc:	beq	1ece8 <_start@@Base+0xc2d0>
   1ece0:	ldr	r3, [fp, #-8]
   1ece4:	b	1ee18 <_start@@Base+0xc400>
   1ece8:	mov	r2, #0
   1ecec:	mov	r1, #2
   1ecf0:	ldr	r0, [fp, #-16]
   1ecf4:	bl	2fa08 <flatcc_verify_string_field@@Base>
   1ecf8:	str	r0, [fp, #-8]
   1ecfc:	ldr	r3, [fp, #-8]
   1ed00:	cmp	r3, #0
   1ed04:	beq	1ed10 <_start@@Base+0xc2f8>
   1ed08:	ldr	r3, [fp, #-8]
   1ed0c:	b	1ee18 <_start@@Base+0xc400>
   1ed10:	mov	r3, #8
   1ed14:	mov	r2, #8
   1ed18:	mov	r1, #3
   1ed1c:	ldr	r0, [fp, #-16]
   1ed20:	bl	2f990 <flatcc_verify_field@@Base>
   1ed24:	str	r0, [fp, #-8]
   1ed28:	ldr	r3, [fp, #-8]
   1ed2c:	cmp	r3, #0
   1ed30:	beq	1ed3c <_start@@Base+0xc324>
   1ed34:	ldr	r3, [fp, #-8]
   1ed38:	b	1ee18 <_start@@Base+0xc400>
   1ed3c:	mov	r2, #0
   1ed40:	mov	r1, #4
   1ed44:	ldr	r0, [fp, #-16]
   1ed48:	bl	2fa08 <flatcc_verify_string_field@@Base>
   1ed4c:	str	r0, [fp, #-8]
   1ed50:	ldr	r3, [fp, #-8]
   1ed54:	cmp	r3, #0
   1ed58:	beq	1ed64 <_start@@Base+0xc34c>
   1ed5c:	ldr	r3, [fp, #-8]
   1ed60:	b	1ee18 <_start@@Base+0xc400>
   1ed64:	mov	r3, #8
   1ed68:	mov	r2, #8
   1ed6c:	mov	r1, #5
   1ed70:	ldr	r0, [fp, #-16]
   1ed74:	bl	2f990 <flatcc_verify_field@@Base>
   1ed78:	str	r0, [fp, #-8]
   1ed7c:	ldr	r3, [fp, #-8]
   1ed80:	cmp	r3, #0
   1ed84:	beq	1ed90 <_start@@Base+0xc378>
   1ed88:	ldr	r3, [fp, #-8]
   1ed8c:	b	1ee18 <_start@@Base+0xc400>
   1ed90:	mov	r3, #4
   1ed94:	mov	r2, #4
   1ed98:	mov	r1, #6
   1ed9c:	ldr	r0, [fp, #-16]
   1eda0:	bl	2f990 <flatcc_verify_field@@Base>
   1eda4:	str	r0, [fp, #-8]
   1eda8:	ldr	r3, [fp, #-8]
   1edac:	cmp	r3, #0
   1edb0:	beq	1edbc <_start@@Base+0xc3a4>
   1edb4:	ldr	r3, [fp, #-8]
   1edb8:	b	1ee18 <_start@@Base+0xc400>
   1edbc:	mov	r3, #8
   1edc0:	mov	r2, #8
   1edc4:	mov	r1, #7
   1edc8:	ldr	r0, [fp, #-16]
   1edcc:	bl	2f990 <flatcc_verify_field@@Base>
   1edd0:	str	r0, [fp, #-8]
   1edd4:	ldr	r3, [fp, #-8]
   1edd8:	cmp	r3, #0
   1eddc:	beq	1ede8 <_start@@Base+0xc3d0>
   1ede0:	ldr	r3, [fp, #-8]
   1ede4:	b	1ee18 <_start@@Base+0xc400>
   1ede8:	mov	r3, #4
   1edec:	mov	r2, #4
   1edf0:	mov	r1, #8
   1edf4:	ldr	r0, [fp, #-16]
   1edf8:	bl	2f990 <flatcc_verify_field@@Base>
   1edfc:	str	r0, [fp, #-8]
   1ee00:	ldr	r3, [fp, #-8]
   1ee04:	cmp	r3, #0
   1ee08:	beq	1ee14 <_start@@Base+0xc3fc>
   1ee0c:	ldr	r3, [fp, #-8]
   1ee10:	b	1ee18 <_start@@Base+0xc400>
   1ee14:	mov	r3, #0
   1ee18:	mov	r0, r3
   1ee1c:	sub	sp, fp, #4
   1ee20:	pop	{fp, pc}
   1ee24:	push	{fp, lr}
   1ee28:	add	fp, sp, #4
   1ee2c:	sub	sp, sp, #16
   1ee30:	str	r0, [fp, #-16]
   1ee34:	mov	r3, #8
   1ee38:	mov	r2, #8
   1ee3c:	mov	r1, #0
   1ee40:	ldr	r0, [fp, #-16]
   1ee44:	bl	2f990 <flatcc_verify_field@@Base>
   1ee48:	str	r0, [fp, #-8]
   1ee4c:	ldr	r3, [fp, #-8]
   1ee50:	cmp	r3, #0
   1ee54:	beq	1ee60 <_start@@Base+0xc448>
   1ee58:	ldr	r3, [fp, #-8]
   1ee5c:	b	1ee90 <_start@@Base+0xc478>
   1ee60:	mov	r3, #4
   1ee64:	mov	r2, #4
   1ee68:	mov	r1, #1
   1ee6c:	ldr	r0, [fp, #-16]
   1ee70:	bl	2f990 <flatcc_verify_field@@Base>
   1ee74:	str	r0, [fp, #-8]
   1ee78:	ldr	r3, [fp, #-8]
   1ee7c:	cmp	r3, #0
   1ee80:	beq	1ee8c <_start@@Base+0xc474>
   1ee84:	ldr	r3, [fp, #-8]
   1ee88:	b	1ee90 <_start@@Base+0xc478>
   1ee8c:	mov	r3, #0
   1ee90:	mov	r0, r3
   1ee94:	sub	sp, fp, #4
   1ee98:	pop	{fp, pc}
   1ee9c:	push	{fp, lr}
   1eea0:	add	fp, sp, #4
   1eea4:	sub	sp, sp, #16
   1eea8:	str	r0, [fp, #-16]
   1eeac:	mov	r3, #8
   1eeb0:	mov	r2, #8
   1eeb4:	mov	r1, #0
   1eeb8:	ldr	r0, [fp, #-16]
   1eebc:	bl	2f990 <flatcc_verify_field@@Base>
   1eec0:	str	r0, [fp, #-8]
   1eec4:	ldr	r3, [fp, #-8]
   1eec8:	cmp	r3, #0
   1eecc:	beq	1eed8 <_start@@Base+0xc4c0>
   1eed0:	ldr	r3, [fp, #-8]
   1eed4:	b	1ef08 <_start@@Base+0xc4f0>
   1eed8:	mov	r3, #4
   1eedc:	mov	r2, #4
   1eee0:	mov	r1, #1
   1eee4:	ldr	r0, [fp, #-16]
   1eee8:	bl	2f990 <flatcc_verify_field@@Base>
   1eeec:	str	r0, [fp, #-8]
   1eef0:	ldr	r3, [fp, #-8]
   1eef4:	cmp	r3, #0
   1eef8:	beq	1ef04 <_start@@Base+0xc4ec>
   1eefc:	ldr	r3, [fp, #-8]
   1ef00:	b	1ef08 <_start@@Base+0xc4f0>
   1ef04:	mov	r3, #0
   1ef08:	mov	r0, r3
   1ef0c:	sub	sp, fp, #4
   1ef10:	pop	{fp, pc}
   1ef14:	push	{fp, lr}
   1ef18:	add	fp, sp, #4
   1ef1c:	sub	sp, sp, #24
   1ef20:	str	r0, [fp, #-16]
   1ef24:	mvn	r3, #0
   1ef28:	str	r3, [sp, #4]
   1ef2c:	mov	r3, #1
   1ef30:	str	r3, [sp]
   1ef34:	mov	r3, #1
   1ef38:	mov	r2, #0
   1ef3c:	mov	r1, #0
   1ef40:	ldr	r0, [fp, #-16]
   1ef44:	bl	2faac <flatcc_verify_vector_field@@Base>
   1ef48:	str	r0, [fp, #-8]
   1ef4c:	ldr	r3, [fp, #-8]
   1ef50:	cmp	r3, #0
   1ef54:	beq	1ef60 <_start@@Base+0xc548>
   1ef58:	ldr	r3, [fp, #-8]
   1ef5c:	b	1efe0 <_start@@Base+0xc5c8>
   1ef60:	mvn	r3, #0
   1ef64:	str	r3, [sp, #4]
   1ef68:	mov	r3, #1
   1ef6c:	str	r3, [sp]
   1ef70:	mov	r3, #1
   1ef74:	mov	r2, #0
   1ef78:	mov	r1, #1
   1ef7c:	ldr	r0, [fp, #-16]
   1ef80:	bl	2faac <flatcc_verify_vector_field@@Base>
   1ef84:	str	r0, [fp, #-8]
   1ef88:	ldr	r3, [fp, #-8]
   1ef8c:	cmp	r3, #0
   1ef90:	beq	1ef9c <_start@@Base+0xc584>
   1ef94:	ldr	r3, [fp, #-8]
   1ef98:	b	1efe0 <_start@@Base+0xc5c8>
   1ef9c:	ldr	r3, [pc, #72]	; 1efec <_start@@Base+0xc5d4>
   1efa0:	add	r3, pc, r3
   1efa4:	str	r3, [sp, #4]
   1efa8:	mov	r3, #1
   1efac:	str	r3, [sp]
   1efb0:	mov	r3, #0
   1efb4:	mov	r2, #0
   1efb8:	mov	r1, #2
   1efbc:	ldr	r0, [fp, #-16]
   1efc0:	bl	303f4 <flatcc_verify_table_as_nested_root@@Base>
   1efc4:	str	r0, [fp, #-8]
   1efc8:	ldr	r3, [fp, #-8]
   1efcc:	cmp	r3, #0
   1efd0:	beq	1efdc <_start@@Base+0xc5c4>
   1efd4:	ldr	r3, [fp, #-8]
   1efd8:	b	1efe0 <_start@@Base+0xc5c8>
   1efdc:	mov	r3, #0
   1efe0:	mov	r0, r3
   1efe4:	sub	sp, fp, #4
   1efe8:	pop	{fp, pc}
   1efec:	andeq	r0, r0, r8, asr #32
   1eff0:	push	{fp, lr}
   1eff4:	add	fp, sp, #4
   1eff8:	sub	sp, sp, #24
   1effc:	str	r0, [fp, #-16]
   1f000:	mov	r3, #16
   1f004:	mov	r2, #32
   1f008:	mov	r1, #0
   1f00c:	ldr	r0, [fp, #-16]
   1f010:	bl	2f990 <flatcc_verify_field@@Base>
   1f014:	str	r0, [fp, #-8]
   1f018:	ldr	r3, [fp, #-8]
   1f01c:	cmp	r3, #0
   1f020:	beq	1f02c <_start@@Base+0xc614>
   1f024:	ldr	r3, [fp, #-8]
   1f028:	b	1f67c <_start@@Base+0xcc64>
   1f02c:	mov	r3, #2
   1f030:	mov	r2, #2
   1f034:	mov	r1, #2
   1f038:	ldr	r0, [fp, #-16]
   1f03c:	bl	2f990 <flatcc_verify_field@@Base>
   1f040:	str	r0, [fp, #-8]
   1f044:	ldr	r3, [fp, #-8]
   1f048:	cmp	r3, #0
   1f04c:	beq	1f058 <_start@@Base+0xc640>
   1f050:	ldr	r3, [fp, #-8]
   1f054:	b	1f67c <_start@@Base+0xcc64>
   1f058:	mov	r3, #2
   1f05c:	mov	r2, #2
   1f060:	mov	r1, #1
   1f064:	ldr	r0, [fp, #-16]
   1f068:	bl	2f990 <flatcc_verify_field@@Base>
   1f06c:	str	r0, [fp, #-8]
   1f070:	ldr	r3, [fp, #-8]
   1f074:	cmp	r3, #0
   1f078:	beq	1f084 <_start@@Base+0xc66c>
   1f07c:	ldr	r3, [fp, #-8]
   1f080:	b	1f67c <_start@@Base+0xcc64>
   1f084:	mov	r2, #1
   1f088:	mov	r1, #3
   1f08c:	ldr	r0, [fp, #-16]
   1f090:	bl	2fa08 <flatcc_verify_string_field@@Base>
   1f094:	str	r0, [fp, #-8]
   1f098:	ldr	r3, [fp, #-8]
   1f09c:	cmp	r3, #0
   1f0a0:	beq	1f0ac <_start@@Base+0xc694>
   1f0a4:	ldr	r3, [fp, #-8]
   1f0a8:	b	1f67c <_start@@Base+0xcc64>
   1f0ac:	mov	r3, #1
   1f0b0:	mov	r2, #1
   1f0b4:	mov	r1, #6
   1f0b8:	ldr	r0, [fp, #-16]
   1f0bc:	bl	2f990 <flatcc_verify_field@@Base>
   1f0c0:	str	r0, [fp, #-8]
   1f0c4:	ldr	r3, [fp, #-8]
   1f0c8:	cmp	r3, #0
   1f0cc:	beq	1f0d8 <_start@@Base+0xc6c0>
   1f0d0:	ldr	r3, [fp, #-8]
   1f0d4:	b	1f67c <_start@@Base+0xcc64>
   1f0d8:	mvn	r3, #0
   1f0dc:	str	r3, [sp, #4]
   1f0e0:	mov	r3, #1
   1f0e4:	str	r3, [sp]
   1f0e8:	mov	r3, #1
   1f0ec:	mov	r2, #0
   1f0f0:	mov	r1, #5
   1f0f4:	ldr	r0, [fp, #-16]
   1f0f8:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f0fc:	str	r0, [fp, #-8]
   1f100:	ldr	r3, [fp, #-8]
   1f104:	cmp	r3, #0
   1f108:	beq	1f114 <_start@@Base+0xc6fc>
   1f10c:	ldr	r3, [fp, #-8]
   1f110:	b	1f67c <_start@@Base+0xcc64>
   1f114:	ldr	r3, [pc, #1388]	; 1f688 <_start@@Base+0xcc70>
   1f118:	add	r3, pc, r3
   1f11c:	mov	r2, #0
   1f120:	mov	r1, #11
   1f124:	ldr	r0, [fp, #-16]
   1f128:	bl	2fccc <flatcc_verify_table_vector_field@@Base>
   1f12c:	str	r0, [fp, #-8]
   1f130:	ldr	r3, [fp, #-8]
   1f134:	cmp	r3, #0
   1f138:	beq	1f144 <_start@@Base+0xc72c>
   1f13c:	ldr	r3, [fp, #-8]
   1f140:	b	1f67c <_start@@Base+0xcc64>
   1f144:	mov	r2, #0
   1f148:	mov	r1, #10
   1f14c:	ldr	r0, [fp, #-16]
   1f150:	bl	2fb6c <flatcc_verify_string_vector_field@@Base>
   1f154:	str	r0, [fp, #-8]
   1f158:	ldr	r3, [fp, #-8]
   1f15c:	cmp	r3, #0
   1f160:	beq	1f16c <_start@@Base+0xc754>
   1f164:	ldr	r3, [fp, #-8]
   1f168:	b	1f67c <_start@@Base+0xcc64>
   1f16c:	mov	r2, #0
   1f170:	mov	r1, #28
   1f174:	ldr	r0, [fp, #-16]
   1f178:	bl	2fb6c <flatcc_verify_string_vector_field@@Base>
   1f17c:	str	r0, [fp, #-8]
   1f180:	ldr	r3, [fp, #-8]
   1f184:	cmp	r3, #0
   1f188:	beq	1f194 <_start@@Base+0xc77c>
   1f18c:	ldr	r3, [fp, #-8]
   1f190:	b	1f67c <_start@@Base+0xcc64>
   1f194:	mvn	r3, #0
   1f198:	str	r3, [sp, #4]
   1f19c:	mov	r3, #1
   1f1a0:	str	r3, [sp]
   1f1a4:	mov	r3, #1
   1f1a8:	mov	r2, #0
   1f1ac:	mov	r1, #24
   1f1b0:	ldr	r0, [fp, #-16]
   1f1b4:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f1b8:	str	r0, [fp, #-8]
   1f1bc:	ldr	r3, [fp, #-8]
   1f1c0:	cmp	r3, #0
   1f1c4:	beq	1f1d0 <_start@@Base+0xc7b8>
   1f1c8:	ldr	r3, [fp, #-8]
   1f1cc:	b	1f67c <_start@@Base+0xcc64>
   1f1d0:	mvn	r3, #-536870912	; 0xe0000000
   1f1d4:	str	r3, [sp, #4]
   1f1d8:	mov	r3, #4
   1f1dc:	str	r3, [sp]
   1f1e0:	mov	r3, #8
   1f1e4:	mov	r2, #0
   1f1e8:	mov	r1, #29
   1f1ec:	ldr	r0, [fp, #-16]
   1f1f0:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f1f4:	str	r0, [fp, #-8]
   1f1f8:	ldr	r3, [fp, #-8]
   1f1fc:	cmp	r3, #0
   1f200:	beq	1f20c <_start@@Base+0xc7f4>
   1f204:	ldr	r3, [fp, #-8]
   1f208:	b	1f67c <_start@@Base+0xcc64>
   1f20c:	ldr	r3, [pc, #1144]	; 1f68c <_start@@Base+0xcc74>
   1f210:	add	r3, pc, r3
   1f214:	mov	r2, #0
   1f218:	mov	r1, #12
   1f21c:	ldr	r0, [fp, #-16]
   1f220:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1f224:	str	r0, [fp, #-8]
   1f228:	ldr	r3, [fp, #-8]
   1f22c:	cmp	r3, #0
   1f230:	beq	1f23c <_start@@Base+0xc824>
   1f234:	ldr	r3, [fp, #-8]
   1f238:	b	1f67c <_start@@Base+0xcc64>
   1f23c:	ldr	r3, [pc, #1100]	; 1f690 <_start@@Base+0xcc78>
   1f240:	add	r3, pc, r3
   1f244:	mov	r2, #0
   1f248:	mov	r1, #8
   1f24c:	ldr	r0, [fp, #-16]
   1f250:	bl	30550 <flatcc_verify_union_field@@Base>
   1f254:	str	r0, [fp, #-8]
   1f258:	ldr	r3, [fp, #-8]
   1f25c:	cmp	r3, #0
   1f260:	beq	1f26c <_start@@Base+0xc854>
   1f264:	ldr	r3, [fp, #-8]
   1f268:	b	1f67c <_start@@Base+0xcc64>
   1f26c:	mvn	r3, #-1073741824	; 0xc0000000
   1f270:	str	r3, [sp, #4]
   1f274:	mov	r3, #2
   1f278:	str	r3, [sp]
   1f27c:	mov	r3, #4
   1f280:	mov	r2, #0
   1f284:	mov	r1, #9
   1f288:	ldr	r0, [fp, #-16]
   1f28c:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f290:	str	r0, [fp, #-8]
   1f294:	ldr	r3, [fp, #-8]
   1f298:	cmp	r3, #0
   1f29c:	beq	1f2a8 <_start@@Base+0xc890>
   1f2a0:	ldr	r3, [fp, #-8]
   1f2a4:	b	1f67c <_start@@Base+0xcc64>
   1f2a8:	mvn	r3, #-1073741824	; 0xc0000000
   1f2ac:	str	r3, [sp, #4]
   1f2b0:	mov	r3, #2
   1f2b4:	str	r3, [sp]
   1f2b8:	mov	r3, #4
   1f2bc:	mov	r2, #0
   1f2c0:	mov	r1, #31
   1f2c4:	ldr	r0, [fp, #-16]
   1f2c8:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f2cc:	str	r0, [fp, #-8]
   1f2d0:	ldr	r3, [fp, #-8]
   1f2d4:	cmp	r3, #0
   1f2d8:	beq	1f2e4 <_start@@Base+0xc8cc>
   1f2dc:	ldr	r3, [fp, #-8]
   1f2e0:	b	1f67c <_start@@Base+0xcc64>
   1f2e4:	ldr	r3, [pc, #936]	; 1f694 <_start@@Base+0xcc7c>
   1f2e8:	add	r3, pc, r3
   1f2ec:	str	r3, [sp, #4]
   1f2f0:	mov	r3, #1
   1f2f4:	str	r3, [sp]
   1f2f8:	mov	r3, #0
   1f2fc:	mov	r2, #0
   1f300:	mov	r1, #13
   1f304:	ldr	r0, [fp, #-16]
   1f308:	bl	303f4 <flatcc_verify_table_as_nested_root@@Base>
   1f30c:	str	r0, [fp, #-8]
   1f310:	ldr	r3, [fp, #-8]
   1f314:	cmp	r3, #0
   1f318:	beq	1f324 <_start@@Base+0xc90c>
   1f31c:	ldr	r3, [fp, #-8]
   1f320:	b	1f67c <_start@@Base+0xcc64>
   1f324:	ldr	r3, [pc, #876]	; 1f698 <_start@@Base+0xcc80>
   1f328:	add	r3, pc, r3
   1f32c:	mov	r2, #0
   1f330:	mov	r1, #14
   1f334:	ldr	r0, [fp, #-16]
   1f338:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1f33c:	str	r0, [fp, #-8]
   1f340:	ldr	r3, [fp, #-8]
   1f344:	cmp	r3, #0
   1f348:	beq	1f354 <_start@@Base+0xc93c>
   1f34c:	ldr	r3, [fp, #-8]
   1f350:	b	1f67c <_start@@Base+0xcc64>
   1f354:	mov	r3, #1
   1f358:	mov	r2, #1
   1f35c:	mov	r1, #15
   1f360:	ldr	r0, [fp, #-16]
   1f364:	bl	2f990 <flatcc_verify_field@@Base>
   1f368:	str	r0, [fp, #-8]
   1f36c:	ldr	r3, [fp, #-8]
   1f370:	cmp	r3, #0
   1f374:	beq	1f380 <_start@@Base+0xc968>
   1f378:	ldr	r3, [fp, #-8]
   1f37c:	b	1f67c <_start@@Base+0xcc64>
   1f380:	mov	r3, #4
   1f384:	mov	r2, #4
   1f388:	mov	r1, #16
   1f38c:	ldr	r0, [fp, #-16]
   1f390:	bl	2f990 <flatcc_verify_field@@Base>
   1f394:	str	r0, [fp, #-8]
   1f398:	ldr	r3, [fp, #-8]
   1f39c:	cmp	r3, #0
   1f3a0:	beq	1f3ac <_start@@Base+0xc994>
   1f3a4:	ldr	r3, [fp, #-8]
   1f3a8:	b	1f67c <_start@@Base+0xcc64>
   1f3ac:	mov	r3, #4
   1f3b0:	mov	r2, #4
   1f3b4:	mov	r1, #17
   1f3b8:	ldr	r0, [fp, #-16]
   1f3bc:	bl	2f990 <flatcc_verify_field@@Base>
   1f3c0:	str	r0, [fp, #-8]
   1f3c4:	ldr	r3, [fp, #-8]
   1f3c8:	cmp	r3, #0
   1f3cc:	beq	1f3d8 <_start@@Base+0xc9c0>
   1f3d0:	ldr	r3, [fp, #-8]
   1f3d4:	b	1f67c <_start@@Base+0xcc64>
   1f3d8:	mov	r3, #8
   1f3dc:	mov	r2, #8
   1f3e0:	mov	r1, #18
   1f3e4:	ldr	r0, [fp, #-16]
   1f3e8:	bl	2f990 <flatcc_verify_field@@Base>
   1f3ec:	str	r0, [fp, #-8]
   1f3f0:	ldr	r3, [fp, #-8]
   1f3f4:	cmp	r3, #0
   1f3f8:	beq	1f404 <_start@@Base+0xc9ec>
   1f3fc:	ldr	r3, [fp, #-8]
   1f400:	b	1f67c <_start@@Base+0xcc64>
   1f404:	mov	r3, #8
   1f408:	mov	r2, #8
   1f40c:	mov	r1, #19
   1f410:	ldr	r0, [fp, #-16]
   1f414:	bl	2f990 <flatcc_verify_field@@Base>
   1f418:	str	r0, [fp, #-8]
   1f41c:	ldr	r3, [fp, #-8]
   1f420:	cmp	r3, #0
   1f424:	beq	1f430 <_start@@Base+0xca18>
   1f428:	ldr	r3, [fp, #-8]
   1f42c:	b	1f67c <_start@@Base+0xcc64>
   1f430:	mov	r3, #4
   1f434:	mov	r2, #4
   1f438:	mov	r1, #20
   1f43c:	ldr	r0, [fp, #-16]
   1f440:	bl	2f990 <flatcc_verify_field@@Base>
   1f444:	str	r0, [fp, #-8]
   1f448:	ldr	r3, [fp, #-8]
   1f44c:	cmp	r3, #0
   1f450:	beq	1f45c <_start@@Base+0xca44>
   1f454:	ldr	r3, [fp, #-8]
   1f458:	b	1f67c <_start@@Base+0xcc64>
   1f45c:	mov	r3, #4
   1f460:	mov	r2, #4
   1f464:	mov	r1, #21
   1f468:	ldr	r0, [fp, #-16]
   1f46c:	bl	2f990 <flatcc_verify_field@@Base>
   1f470:	str	r0, [fp, #-8]
   1f474:	ldr	r3, [fp, #-8]
   1f478:	cmp	r3, #0
   1f47c:	beq	1f488 <_start@@Base+0xca70>
   1f480:	ldr	r3, [fp, #-8]
   1f484:	b	1f67c <_start@@Base+0xcc64>
   1f488:	mov	r3, #8
   1f48c:	mov	r2, #8
   1f490:	mov	r1, #22
   1f494:	ldr	r0, [fp, #-16]
   1f498:	bl	2f990 <flatcc_verify_field@@Base>
   1f49c:	str	r0, [fp, #-8]
   1f4a0:	ldr	r3, [fp, #-8]
   1f4a4:	cmp	r3, #0
   1f4a8:	beq	1f4b4 <_start@@Base+0xca9c>
   1f4ac:	ldr	r3, [fp, #-8]
   1f4b0:	b	1f67c <_start@@Base+0xcc64>
   1f4b4:	mov	r3, #8
   1f4b8:	mov	r2, #8
   1f4bc:	mov	r1, #23
   1f4c0:	ldr	r0, [fp, #-16]
   1f4c4:	bl	2f990 <flatcc_verify_field@@Base>
   1f4c8:	str	r0, [fp, #-8]
   1f4cc:	ldr	r3, [fp, #-8]
   1f4d0:	cmp	r3, #0
   1f4d4:	beq	1f4e0 <_start@@Base+0xcac8>
   1f4d8:	ldr	r3, [fp, #-8]
   1f4dc:	b	1f67c <_start@@Base+0xcc64>
   1f4e0:	mov	r3, #4
   1f4e4:	mov	r2, #4
   1f4e8:	mov	r1, #25
   1f4ec:	ldr	r0, [fp, #-16]
   1f4f0:	bl	2f990 <flatcc_verify_field@@Base>
   1f4f4:	str	r0, [fp, #-8]
   1f4f8:	ldr	r3, [fp, #-8]
   1f4fc:	cmp	r3, #0
   1f500:	beq	1f50c <_start@@Base+0xcaf4>
   1f504:	ldr	r3, [fp, #-8]
   1f508:	b	1f67c <_start@@Base+0xcc64>
   1f50c:	mov	r3, #4
   1f510:	mov	r2, #4
   1f514:	mov	r1, #26
   1f518:	ldr	r0, [fp, #-16]
   1f51c:	bl	2f990 <flatcc_verify_field@@Base>
   1f520:	str	r0, [fp, #-8]
   1f524:	ldr	r3, [fp, #-8]
   1f528:	cmp	r3, #0
   1f52c:	beq	1f538 <_start@@Base+0xcb20>
   1f530:	ldr	r3, [fp, #-8]
   1f534:	b	1f67c <_start@@Base+0xcc64>
   1f538:	mov	r3, #4
   1f53c:	mov	r2, #4
   1f540:	mov	r1, #27
   1f544:	ldr	r0, [fp, #-16]
   1f548:	bl	2f990 <flatcc_verify_field@@Base>
   1f54c:	str	r0, [fp, #-8]
   1f550:	ldr	r3, [fp, #-8]
   1f554:	cmp	r3, #0
   1f558:	beq	1f564 <_start@@Base+0xcb4c>
   1f55c:	ldr	r3, [fp, #-8]
   1f560:	b	1f67c <_start@@Base+0xcc64>
   1f564:	mvn	r3, #0
   1f568:	str	r3, [sp, #4]
   1f56c:	mov	r3, #1
   1f570:	str	r3, [sp]
   1f574:	mov	r3, #1
   1f578:	mov	r2, #0
   1f57c:	mov	r1, #30
   1f580:	ldr	r0, [fp, #-16]
   1f584:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f588:	str	r0, [fp, #-8]
   1f58c:	ldr	r3, [fp, #-8]
   1f590:	cmp	r3, #0
   1f594:	beq	1f5a0 <_start@@Base+0xcb88>
   1f598:	ldr	r3, [fp, #-8]
   1f59c:	b	1f67c <_start@@Base+0xcc64>
   1f5a0:	mvn	r3, #-536870912	; 0xe0000000
   1f5a4:	str	r3, [sp, #4]
   1f5a8:	mov	r3, #8
   1f5ac:	str	r3, [sp]
   1f5b0:	mov	r3, #8
   1f5b4:	mov	r2, #0
   1f5b8:	mov	r1, #32
   1f5bc:	ldr	r0, [fp, #-16]
   1f5c0:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f5c4:	str	r0, [fp, #-8]
   1f5c8:	ldr	r3, [fp, #-8]
   1f5cc:	cmp	r3, #0
   1f5d0:	beq	1f5dc <_start@@Base+0xcbc4>
   1f5d4:	ldr	r3, [fp, #-8]
   1f5d8:	b	1f67c <_start@@Base+0xcc64>
   1f5dc:	mvn	r3, #-536870912	; 0xe0000000
   1f5e0:	str	r3, [sp, #4]
   1f5e4:	mov	r3, #8
   1f5e8:	str	r3, [sp]
   1f5ec:	mov	r3, #8
   1f5f0:	mov	r2, #0
   1f5f4:	mov	r1, #33	; 0x21
   1f5f8:	ldr	r0, [fp, #-16]
   1f5fc:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f600:	str	r0, [fp, #-8]
   1f604:	ldr	r3, [fp, #-8]
   1f608:	cmp	r3, #0
   1f60c:	beq	1f618 <_start@@Base+0xcc00>
   1f610:	ldr	r3, [fp, #-8]
   1f614:	b	1f67c <_start@@Base+0xcc64>
   1f618:	ldr	r3, [pc, #124]	; 1f69c <_start@@Base+0xcc84>
   1f61c:	add	r3, pc, r3
   1f620:	mov	r2, #0
   1f624:	mov	r1, #34	; 0x22
   1f628:	ldr	r0, [fp, #-16]
   1f62c:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1f630:	str	r0, [fp, #-8]
   1f634:	ldr	r3, [fp, #-8]
   1f638:	cmp	r3, #0
   1f63c:	beq	1f648 <_start@@Base+0xcc30>
   1f640:	ldr	r3, [fp, #-8]
   1f644:	b	1f67c <_start@@Base+0xcc64>
   1f648:	ldr	r3, [pc, #80]	; 1f6a0 <_start@@Base+0xcc88>
   1f64c:	add	r3, pc, r3
   1f650:	mov	r2, #0
   1f654:	mov	r1, #35	; 0x23
   1f658:	ldr	r0, [fp, #-16]
   1f65c:	bl	2fc10 <flatcc_verify_table_field@@Base>
   1f660:	str	r0, [fp, #-8]
   1f664:	ldr	r3, [fp, #-8]
   1f668:	cmp	r3, #0
   1f66c:	beq	1f678 <_start@@Base+0xcc60>
   1f670:	ldr	r3, [fp, #-8]
   1f674:	b	1f67c <_start@@Base+0xcc64>
   1f678:	mov	r3, #0
   1f67c:	mov	r0, r3
   1f680:	sub	sp, fp, #4
   1f684:	pop	{fp, pc}
   1f688:			; <UNDEFINED> instruction: 0xfffffed0
   1f68c:			; <UNDEFINED> instruction: 0xfffffdd8
   1f690:			; <UNDEFINED> instruction: 0xfffff264
   1f694:			; <UNDEFINED> instruction: 0xfffffd00
   1f698:			; <UNDEFINED> instruction: 0xfffff73c
   1f69c:			; <UNDEFINED> instruction: 0xfffff0c8
   1f6a0:			; <UNDEFINED> instruction: 0xfffff8c0
   1f6a4:	push	{fp, lr}
   1f6a8:	add	fp, sp, #4
   1f6ac:	sub	sp, sp, #8
   1f6b0:	str	r0, [fp, #-8]
   1f6b4:	str	r1, [fp, #-12]
   1f6b8:	ldr	r3, [pc, #36]	; 1f6e4 <_start@@Base+0xcccc>
   1f6bc:	add	r3, pc, r3
   1f6c0:	ldr	r2, [pc, #32]	; 1f6e8 <_start@@Base+0xccd0>
   1f6c4:	add	r2, pc, r2
   1f6c8:	ldr	r1, [fp, #-12]
   1f6cc:	ldr	r0, [fp, #-8]
   1f6d0:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1f6d4:	mov	r3, r0
   1f6d8:	mov	r0, r3
   1f6dc:	sub	sp, fp, #4
   1f6e0:	pop	{fp, pc}
   1f6e4:			; <UNDEFINED> instruction: 0xfffff92c
   1f6e8:	andeq	r1, r1, r4, asr #9
   1f6ec:	push	{fp, lr}
   1f6f0:	add	fp, sp, #4
   1f6f4:	sub	sp, sp, #8
   1f6f8:	str	r0, [fp, #-8]
   1f6fc:	str	r1, [fp, #-12]
   1f700:	ldr	r3, [pc, #36]	; 1f72c <_start@@Base+0xcd14>
   1f704:	add	r3, pc, r3
   1f708:	ldr	r2, [pc, #32]	; 1f730 <_start@@Base+0xcd18>
   1f70c:	add	r2, pc, r2
   1f710:	ldr	r1, [fp, #-12]
   1f714:	ldr	r0, [fp, #-8]
   1f718:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1f71c:	mov	r3, r0
   1f720:	mov	r0, r3
   1f724:	sub	sp, fp, #4
   1f728:	pop	{fp, pc}
   1f72c:			; <UNDEFINED> instruction: 0xfffff8e4
   1f730:	andeq	r1, r1, ip, asr fp
   1f734:	push	{fp, lr}
   1f738:	add	fp, sp, #4
   1f73c:	sub	sp, sp, #16
   1f740:	str	r0, [fp, #-8]
   1f744:	str	r1, [fp, #-12]
   1f748:	str	r2, [fp, #-16]
   1f74c:	ldr	r3, [pc, #32]	; 1f774 <_start@@Base+0xcd5c>
   1f750:	add	r3, pc, r3
   1f754:	ldr	r2, [fp, #-16]
   1f758:	ldr	r1, [fp, #-12]
   1f75c:	ldr	r0, [fp, #-8]
   1f760:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1f764:	mov	r3, r0
   1f768:	mov	r0, r3
   1f76c:	sub	sp, fp, #4
   1f770:	pop	{fp, pc}
   1f774:			; <UNDEFINED> instruction: 0xfffff898
   1f778:	push	{fp, lr}
   1f77c:	add	fp, sp, #4
   1f780:	sub	sp, sp, #16
   1f784:	str	r0, [fp, #-8]
   1f788:	str	r1, [fp, #-12]
   1f78c:	str	r2, [fp, #-16]
   1f790:	ldr	r3, [pc, #32]	; 1f7b8 <_start@@Base+0xcda0>
   1f794:	add	r3, pc, r3
   1f798:	ldr	r2, [fp, #-16]
   1f79c:	ldr	r1, [fp, #-12]
   1f7a0:	ldr	r0, [fp, #-8]
   1f7a4:	bl	30254 <flatcc_verify_table_as_typed_root@@Base>
   1f7a8:	mov	r3, r0
   1f7ac:	mov	r0, r3
   1f7b0:	sub	sp, fp, #4
   1f7b4:	pop	{fp, pc}
   1f7b8:			; <UNDEFINED> instruction: 0xfffff854
   1f7bc:	push	{fp, lr}
   1f7c0:	add	fp, sp, #4
   1f7c4:	sub	sp, sp, #24
   1f7c8:	str	r0, [fp, #-16]
   1f7cc:	mov	r3, #1
   1f7d0:	mov	r2, #1
   1f7d4:	mov	r1, #0
   1f7d8:	ldr	r0, [fp, #-16]
   1f7dc:	bl	2f990 <flatcc_verify_field@@Base>
   1f7e0:	str	r0, [fp, #-8]
   1f7e4:	ldr	r3, [fp, #-8]
   1f7e8:	cmp	r3, #0
   1f7ec:	beq	1f7f8 <_start@@Base+0xcde0>
   1f7f0:	ldr	r3, [fp, #-8]
   1f7f4:	b	1fa00 <_start@@Base+0xcfe8>
   1f7f8:	mov	r3, #1
   1f7fc:	mov	r2, #1
   1f800:	mov	r1, #1
   1f804:	ldr	r0, [fp, #-16]
   1f808:	bl	2f990 <flatcc_verify_field@@Base>
   1f80c:	str	r0, [fp, #-8]
   1f810:	ldr	r3, [fp, #-8]
   1f814:	cmp	r3, #0
   1f818:	beq	1f824 <_start@@Base+0xce0c>
   1f81c:	ldr	r3, [fp, #-8]
   1f820:	b	1fa00 <_start@@Base+0xcfe8>
   1f824:	mov	r3, #2
   1f828:	mov	r2, #2
   1f82c:	mov	r1, #2
   1f830:	ldr	r0, [fp, #-16]
   1f834:	bl	2f990 <flatcc_verify_field@@Base>
   1f838:	str	r0, [fp, #-8]
   1f83c:	ldr	r3, [fp, #-8]
   1f840:	cmp	r3, #0
   1f844:	beq	1f850 <_start@@Base+0xce38>
   1f848:	ldr	r3, [fp, #-8]
   1f84c:	b	1fa00 <_start@@Base+0xcfe8>
   1f850:	mov	r3, #2
   1f854:	mov	r2, #2
   1f858:	mov	r1, #3
   1f85c:	ldr	r0, [fp, #-16]
   1f860:	bl	2f990 <flatcc_verify_field@@Base>
   1f864:	str	r0, [fp, #-8]
   1f868:	ldr	r3, [fp, #-8]
   1f86c:	cmp	r3, #0
   1f870:	beq	1f87c <_start@@Base+0xce64>
   1f874:	ldr	r3, [fp, #-8]
   1f878:	b	1fa00 <_start@@Base+0xcfe8>
   1f87c:	mov	r3, #4
   1f880:	mov	r2, #4
   1f884:	mov	r1, #4
   1f888:	ldr	r0, [fp, #-16]
   1f88c:	bl	2f990 <flatcc_verify_field@@Base>
   1f890:	str	r0, [fp, #-8]
   1f894:	ldr	r3, [fp, #-8]
   1f898:	cmp	r3, #0
   1f89c:	beq	1f8a8 <_start@@Base+0xce90>
   1f8a0:	ldr	r3, [fp, #-8]
   1f8a4:	b	1fa00 <_start@@Base+0xcfe8>
   1f8a8:	mov	r3, #4
   1f8ac:	mov	r2, #4
   1f8b0:	mov	r1, #5
   1f8b4:	ldr	r0, [fp, #-16]
   1f8b8:	bl	2f990 <flatcc_verify_field@@Base>
   1f8bc:	str	r0, [fp, #-8]
   1f8c0:	ldr	r3, [fp, #-8]
   1f8c4:	cmp	r3, #0
   1f8c8:	beq	1f8d4 <_start@@Base+0xcebc>
   1f8cc:	ldr	r3, [fp, #-8]
   1f8d0:	b	1fa00 <_start@@Base+0xcfe8>
   1f8d4:	mov	r3, #8
   1f8d8:	mov	r2, #8
   1f8dc:	mov	r1, #6
   1f8e0:	ldr	r0, [fp, #-16]
   1f8e4:	bl	2f990 <flatcc_verify_field@@Base>
   1f8e8:	str	r0, [fp, #-8]
   1f8ec:	ldr	r3, [fp, #-8]
   1f8f0:	cmp	r3, #0
   1f8f4:	beq	1f900 <_start@@Base+0xcee8>
   1f8f8:	ldr	r3, [fp, #-8]
   1f8fc:	b	1fa00 <_start@@Base+0xcfe8>
   1f900:	mov	r3, #8
   1f904:	mov	r2, #8
   1f908:	mov	r1, #7
   1f90c:	ldr	r0, [fp, #-16]
   1f910:	bl	2f990 <flatcc_verify_field@@Base>
   1f914:	str	r0, [fp, #-8]
   1f918:	ldr	r3, [fp, #-8]
   1f91c:	cmp	r3, #0
   1f920:	beq	1f92c <_start@@Base+0xcf14>
   1f924:	ldr	r3, [fp, #-8]
   1f928:	b	1fa00 <_start@@Base+0xcfe8>
   1f92c:	mov	r3, #4
   1f930:	mov	r2, #4
   1f934:	mov	r1, #8
   1f938:	ldr	r0, [fp, #-16]
   1f93c:	bl	2f990 <flatcc_verify_field@@Base>
   1f940:	str	r0, [fp, #-8]
   1f944:	ldr	r3, [fp, #-8]
   1f948:	cmp	r3, #0
   1f94c:	beq	1f958 <_start@@Base+0xcf40>
   1f950:	ldr	r3, [fp, #-8]
   1f954:	b	1fa00 <_start@@Base+0xcfe8>
   1f958:	mov	r3, #8
   1f95c:	mov	r2, #8
   1f960:	mov	r1, #9
   1f964:	ldr	r0, [fp, #-16]
   1f968:	bl	2f990 <flatcc_verify_field@@Base>
   1f96c:	str	r0, [fp, #-8]
   1f970:	ldr	r3, [fp, #-8]
   1f974:	cmp	r3, #0
   1f978:	beq	1f984 <_start@@Base+0xcf6c>
   1f97c:	ldr	r3, [fp, #-8]
   1f980:	b	1fa00 <_start@@Base+0xcfe8>
   1f984:	mvn	r3, #0
   1f988:	str	r3, [sp, #4]
   1f98c:	mov	r3, #1
   1f990:	str	r3, [sp]
   1f994:	mov	r3, #1
   1f998:	mov	r2, #0
   1f99c:	mov	r1, #10
   1f9a0:	ldr	r0, [fp, #-16]
   1f9a4:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f9a8:	str	r0, [fp, #-8]
   1f9ac:	ldr	r3, [fp, #-8]
   1f9b0:	cmp	r3, #0
   1f9b4:	beq	1f9c0 <_start@@Base+0xcfa8>
   1f9b8:	ldr	r3, [fp, #-8]
   1f9bc:	b	1fa00 <_start@@Base+0xcfe8>
   1f9c0:	mvn	r3, #-536870912	; 0xe0000000
   1f9c4:	str	r3, [sp, #4]
   1f9c8:	mov	r3, #8
   1f9cc:	str	r3, [sp]
   1f9d0:	mov	r3, #8
   1f9d4:	mov	r2, #0
   1f9d8:	mov	r1, #11
   1f9dc:	ldr	r0, [fp, #-16]
   1f9e0:	bl	2faac <flatcc_verify_vector_field@@Base>
   1f9e4:	str	r0, [fp, #-8]
   1f9e8:	ldr	r3, [fp, #-8]
   1f9ec:	cmp	r3, #0
   1f9f0:	beq	1f9fc <_start@@Base+0xcfe4>
   1f9f4:	ldr	r3, [fp, #-8]
   1f9f8:	b	1fa00 <_start@@Base+0xcfe8>
   1f9fc:	mov	r3, #0
   1fa00:	mov	r0, r3
   1fa04:	sub	sp, fp, #4
   1fa08:	pop	{fp, pc}
   1fa0c:	push	{fp, lr}
   1fa10:	add	fp, sp, #4
   1fa14:	sub	sp, sp, #8
   1fa18:	str	r0, [fp, #-8]
   1fa1c:	str	r1, [fp, #-12]
   1fa20:	ldr	r3, [pc, #36]	; 1fa4c <_start@@Base+0xd034>
   1fa24:	add	r3, pc, r3
   1fa28:	ldr	r2, [pc, #32]	; 1fa50 <_start@@Base+0xd038>
   1fa2c:	add	r2, pc, r2
   1fa30:	ldr	r1, [fp, #-12]
   1fa34:	ldr	r0, [fp, #-8]
   1fa38:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1fa3c:	mov	r3, r0
   1fa40:	mov	r0, r3
   1fa44:	sub	sp, fp, #4
   1fa48:	pop	{fp, pc}
   1fa4c:			; <UNDEFINED> instruction: 0xfffffd90
   1fa50:	andeq	r1, r1, ip, asr r1
   1fa54:	push	{fp, lr}
   1fa58:	add	fp, sp, #4
   1fa5c:	sub	sp, sp, #16
   1fa60:	str	r0, [fp, #-16]
   1fa64:	mov	r3, #4
   1fa68:	mov	r2, #4
   1fa6c:	mov	r1, #0
   1fa70:	ldr	r0, [fp, #-16]
   1fa74:	bl	2f990 <flatcc_verify_field@@Base>
   1fa78:	str	r0, [fp, #-8]
   1fa7c:	ldr	r3, [fp, #-8]
   1fa80:	cmp	r3, #0
   1fa84:	beq	1fa90 <_start@@Base+0xd078>
   1fa88:	ldr	r3, [fp, #-8]
   1fa8c:	b	1fa94 <_start@@Base+0xd07c>
   1fa90:	mov	r3, #0
   1fa94:	mov	r0, r3
   1fa98:	sub	sp, fp, #4
   1fa9c:	pop	{fp, pc}
   1faa0:	push	{fp, lr}
   1faa4:	add	fp, sp, #4
   1faa8:	sub	sp, sp, #16
   1faac:	str	r0, [fp, #-16]
   1fab0:	ldr	r3, [pc, #248]	; 1fbb0 <_start@@Base+0xd198>
   1fab4:	add	r3, pc, r3
   1fab8:	mov	r2, #0
   1fabc:	mov	r1, #1
   1fac0:	ldr	r0, [fp, #-16]
   1fac4:	bl	30550 <flatcc_verify_union_field@@Base>
   1fac8:	str	r0, [fp, #-8]
   1facc:	ldr	r3, [fp, #-8]
   1fad0:	cmp	r3, #0
   1fad4:	beq	1fae0 <_start@@Base+0xd0c8>
   1fad8:	ldr	r3, [fp, #-8]
   1fadc:	b	1fba4 <_start@@Base+0xd18c>
   1fae0:	ldr	r3, [pc, #204]	; 1fbb4 <_start@@Base+0xd19c>
   1fae4:	add	r3, pc, r3
   1fae8:	mov	r2, #0
   1faec:	mov	r1, #3
   1faf0:	ldr	r0, [fp, #-16]
   1faf4:	bl	30550 <flatcc_verify_union_field@@Base>
   1faf8:	str	r0, [fp, #-8]
   1fafc:	ldr	r3, [fp, #-8]
   1fb00:	cmp	r3, #0
   1fb04:	beq	1fb10 <_start@@Base+0xd0f8>
   1fb08:	ldr	r3, [fp, #-8]
   1fb0c:	b	1fba4 <_start@@Base+0xd18c>
   1fb10:	ldr	r3, [pc, #160]	; 1fbb8 <_start@@Base+0xd1a0>
   1fb14:	add	r3, pc, r3
   1fb18:	mov	r2, #0
   1fb1c:	mov	r1, #5
   1fb20:	ldr	r0, [fp, #-16]
   1fb24:	bl	30550 <flatcc_verify_union_field@@Base>
   1fb28:	str	r0, [fp, #-8]
   1fb2c:	ldr	r3, [fp, #-8]
   1fb30:	cmp	r3, #0
   1fb34:	beq	1fb40 <_start@@Base+0xd128>
   1fb38:	ldr	r3, [fp, #-8]
   1fb3c:	b	1fba4 <_start@@Base+0xd18c>
   1fb40:	ldr	r3, [pc, #116]	; 1fbbc <_start@@Base+0xd1a4>
   1fb44:	add	r3, pc, r3
   1fb48:	mov	r2, #0
   1fb4c:	mov	r1, #7
   1fb50:	ldr	r0, [fp, #-16]
   1fb54:	bl	30550 <flatcc_verify_union_field@@Base>
   1fb58:	str	r0, [fp, #-8]
   1fb5c:	ldr	r3, [fp, #-8]
   1fb60:	cmp	r3, #0
   1fb64:	beq	1fb70 <_start@@Base+0xd158>
   1fb68:	ldr	r3, [fp, #-8]
   1fb6c:	b	1fba4 <_start@@Base+0xd18c>
   1fb70:	ldr	r3, [pc, #72]	; 1fbc0 <_start@@Base+0xd1a8>
   1fb74:	add	r3, pc, r3
   1fb78:	mov	r2, #0
   1fb7c:	mov	r1, #9
   1fb80:	ldr	r0, [fp, #-16]
   1fb84:	bl	307ac <flatcc_verify_union_vector_field@@Base>
   1fb88:	str	r0, [fp, #-8]
   1fb8c:	ldr	r3, [fp, #-8]
   1fb90:	cmp	r3, #0
   1fb94:	beq	1fba0 <_start@@Base+0xd188>
   1fb98:	ldr	r3, [fp, #-8]
   1fb9c:	b	1fba4 <_start@@Base+0xd18c>
   1fba0:	mov	r3, #0
   1fba4:	mov	r0, r3
   1fba8:	sub	sp, fp, #4
   1fbac:	pop	{fp, pc}
   1fbb0:			; <UNDEFINED> instruction: 0xffffeab8
   1fbb4:			; <UNDEFINED> instruction: 0xffffea88
   1fbb8:			; <UNDEFINED> instruction: 0xffffea58
   1fbbc:			; <UNDEFINED> instruction: 0xffffea28
   1fbc0:			; <UNDEFINED> instruction: 0xffffe9f8
   1fbc4:	push	{fp, lr}
   1fbc8:	add	fp, sp, #4
   1fbcc:	sub	sp, sp, #8
   1fbd0:	str	r0, [fp, #-8]
   1fbd4:	str	r1, [fp, #-12]
   1fbd8:	ldr	r3, [pc, #36]	; 1fc04 <_start@@Base+0xd1ec>
   1fbdc:	add	r3, pc, r3
   1fbe0:	ldr	r2, [pc, #32]	; 1fc08 <_start@@Base+0xd1f0>
   1fbe4:	add	r2, pc, r2
   1fbe8:	ldr	r1, [fp, #-12]
   1fbec:	ldr	r0, [fp, #-8]
   1fbf0:	bl	301c0 <flatcc_verify_table_as_root@@Base>
   1fbf4:	mov	r3, r0
   1fbf8:	mov	r0, r3
   1fbfc:	sub	sp, fp, #4
   1fc00:	pop	{fp, pc}
   1fc04:			; <UNDEFINED> instruction: 0xfffffebc
   1fc08:	andeq	r0, r1, r4, lsr #31
   1fc0c:	push	{fp, lr}
   1fc10:	add	fp, sp, #4
   1fc14:	sub	sp, sp, #48	; 0x30
   1fc18:	str	r0, [fp, #-40]	; 0xffffffd8
   1fc1c:	str	r1, [fp, #-44]	; 0xffffffd4
   1fc20:	str	r2, [fp, #-48]	; 0xffffffd0
   1fc24:	str	r3, [fp, #-52]	; 0xffffffcc
   1fc28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1fc2c:	str	r3, [fp, #-12]
   1fc30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1fc34:	cmp	r3, #0
   1fc38:	beq	1fc54 <_start@@Base+0xd23c>
   1fc3c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1fc40:	ldr	r3, [pc, #440]	; 1fe00 <_start@@Base+0xd3e8>
   1fc44:	add	r3, pc, r3
   1fc48:	mov	r1, r3
   1fc4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1fc50:	bl	129a8 <fprintf@plt>
   1fc54:	mov	r3, #0
   1fc58:	str	r3, [fp, #-8]
   1fc5c:	b	1fd90 <_start@@Base+0xd378>
   1fc60:	ldr	r3, [fp, #-8]
   1fc64:	and	r3, r3, #15
   1fc68:	cmp	r3, #0
   1fc6c:	bne	1fcb4 <_start@@Base+0xd29c>
   1fc70:	ldr	r3, [fp, #-8]
   1fc74:	cmp	r3, #0
   1fc78:	beq	1fc98 <_start@@Base+0xd280>
   1fc7c:	sub	r3, fp, #32
   1fc80:	mov	r2, r3
   1fc84:	ldr	r3, [pc, #376]	; 1fe04 <_start@@Base+0xd3ec>
   1fc88:	add	r3, pc, r3
   1fc8c:	mov	r1, r3
   1fc90:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1fc94:	bl	129a8 <fprintf@plt>
   1fc98:	ldr	r2, [fp, #-8]
   1fc9c:	ldr	r3, [pc, #356]	; 1fe08 <_start@@Base+0xd3f0>
   1fca0:	add	r3, pc, r3
   1fca4:	mov	r1, r3
   1fca8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1fcac:	bl	129a8 <fprintf@plt>
   1fcb0:	b	1fcd0 <_start@@Base+0xd2b8>
   1fcb4:	ldr	r3, [fp, #-8]
   1fcb8:	and	r3, r3, #7
   1fcbc:	cmp	r3, #0
   1fcc0:	bne	1fcd0 <_start@@Base+0xd2b8>
   1fcc4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fcc8:	mov	r0, #32
   1fccc:	bl	129e4 <fputc@plt>
   1fcd0:	ldr	r2, [fp, #-12]
   1fcd4:	ldr	r3, [fp, #-8]
   1fcd8:	add	r3, r2, r3
   1fcdc:	ldrb	r3, [r3]
   1fce0:	mov	r2, r3
   1fce4:	ldr	r3, [pc, #288]	; 1fe0c <_start@@Base+0xd3f4>
   1fce8:	add	r3, pc, r3
   1fcec:	mov	r1, r3
   1fcf0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1fcf4:	bl	129a8 <fprintf@plt>
   1fcf8:	ldr	r2, [fp, #-12]
   1fcfc:	ldr	r3, [fp, #-8]
   1fd00:	add	r3, r2, r3
   1fd04:	ldrb	r3, [r3]
   1fd08:	cmp	r3, #31
   1fd0c:	bls	1fd28 <_start@@Base+0xd310>
   1fd10:	ldr	r2, [fp, #-12]
   1fd14:	ldr	r3, [fp, #-8]
   1fd18:	add	r3, r2, r3
   1fd1c:	ldrb	r3, [r3]
   1fd20:	cmp	r3, #126	; 0x7e
   1fd24:	bls	1fd44 <_start@@Base+0xd32c>
   1fd28:	ldr	r3, [fp, #-8]
   1fd2c:	and	r3, r3, #15
   1fd30:	sub	r2, fp, #4
   1fd34:	add	r3, r2, r3
   1fd38:	mov	r2, #46	; 0x2e
   1fd3c:	strb	r2, [r3, #-28]	; 0xffffffe4
   1fd40:	b	1fd68 <_start@@Base+0xd350>
   1fd44:	ldr	r3, [fp, #-8]
   1fd48:	and	r3, r3, #15
   1fd4c:	ldr	r1, [fp, #-12]
   1fd50:	ldr	r2, [fp, #-8]
   1fd54:	add	r2, r1, r2
   1fd58:	ldrb	r2, [r2]
   1fd5c:	sub	r1, fp, #4
   1fd60:	add	r3, r1, r3
   1fd64:	strb	r2, [r3, #-28]	; 0xffffffe4
   1fd68:	ldr	r3, [fp, #-8]
   1fd6c:	and	r3, r3, #15
   1fd70:	add	r3, r3, #1
   1fd74:	sub	r2, fp, #4
   1fd78:	add	r3, r2, r3
   1fd7c:	mov	r2, #0
   1fd80:	strb	r2, [r3, #-28]	; 0xffffffe4
   1fd84:	ldr	r3, [fp, #-8]
   1fd88:	add	r3, r3, #1
   1fd8c:	str	r3, [fp, #-8]
   1fd90:	ldr	r2, [fp, #-8]
   1fd94:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fd98:	cmp	r2, r3
   1fd9c:	bcc	1fc60 <_start@@Base+0xd248>
   1fda0:	b	1fdc8 <_start@@Base+0xd3b0>
   1fda4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fda8:	mov	r2, #3
   1fdac:	mov	r1, #1
   1fdb0:	ldr	r0, [pc, #88]	; 1fe10 <_start@@Base+0xd3f8>
   1fdb4:	add	r0, pc, r0
   1fdb8:	bl	12954 <fwrite@plt>
   1fdbc:	ldr	r3, [fp, #-8]
   1fdc0:	add	r3, r3, #1
   1fdc4:	str	r3, [fp, #-8]
   1fdc8:	ldr	r3, [fp, #-8]
   1fdcc:	and	r3, r3, #15
   1fdd0:	cmp	r3, #0
   1fdd4:	bne	1fda4 <_start@@Base+0xd38c>
   1fdd8:	sub	r3, fp, #32
   1fddc:	mov	r2, r3
   1fde0:	ldr	r3, [pc, #44]	; 1fe14 <_start@@Base+0xd3fc>
   1fde4:	add	r3, pc, r3
   1fde8:	mov	r1, r3
   1fdec:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1fdf0:	bl	129a8 <fprintf@plt>
   1fdf4:	nop			; (mov r0, r0)
   1fdf8:	sub	sp, fp, #4
   1fdfc:	pop	{fp, pc}
   1fe00:	andeq	r1, r1, ip, lsr #12
   1fe04:	strdeq	r1, [r1], -r0
   1fe08:	andeq	r1, r1, r0, ror #11
   1fe0c:	andeq	r1, r1, r0, lsr #11
   1fe10:	ldrdeq	r1, [r1], -ip
   1fe14:	muleq	r1, r4, r4
   1fe18:	push	{fp, lr}
   1fe1c:	add	fp, sp, #4
   1fe20:	sub	sp, sp, #8
   1fe24:	sub	r3, fp, #12
   1fe28:	mov	r1, #0
   1fe2c:	mov	r0, r3
   1fe30:	bl	12960 <gettimeofday@plt>
   1fe34:	ldr	r3, [pc, #124]	; 1feb8 <_start@@Base+0xd4a0>
   1fe38:	add	r3, pc, r3
   1fe3c:	ldr	r3, [r3]
   1fe40:	cmp	r3, #0
   1fe44:	bne	1fe60 <_start@@Base+0xd448>
   1fe48:	ldr	r3, [pc, #108]	; 1febc <_start@@Base+0xd4a4>
   1fe4c:	add	r3, pc, r3
   1fe50:	mov	r2, r3
   1fe54:	sub	r3, fp, #12
   1fe58:	ldm	r3, {r0, r1}
   1fe5c:	stm	r2, {r0, r1}
   1fe60:	ldr	r2, [fp, #-12]
   1fe64:	ldr	r3, [pc, #84]	; 1fec0 <_start@@Base+0xd4a8>
   1fe68:	add	r3, pc, r3
   1fe6c:	ldr	r3, [r3]
   1fe70:	sub	r3, r2, r3
   1fe74:	vmov	s15, r3
   1fe78:	vcvt.f64.s32	d6, s15
   1fe7c:	ldr	r2, [fp, #-8]
   1fe80:	ldr	r3, [pc, #60]	; 1fec4 <_start@@Base+0xd4ac>
   1fe84:	add	r3, pc, r3
   1fe88:	ldr	r3, [r3, #4]
   1fe8c:	sub	r3, r2, r3
   1fe90:	vmov	s15, r3
   1fe94:	vcvt.f64.s32	d5, s15
   1fe98:	vldr	d4, [pc, #16]	; 1feb0 <_start@@Base+0xd498>
   1fe9c:	vdiv.f64	d7, d5, d4
   1fea0:	vadd.f64	d7, d6, d7
   1fea4:	vmov.f64	d0, d7
   1fea8:	sub	sp, fp, #4
   1feac:	pop	{fp, pc}
   1feb0:	andeq	r0, r0, r0
   1feb4:	smlawbmi	lr, r0, r4, r8
   1feb8:			; <UNDEFINED> instruction: 0x000262b0
   1febc:	muleq	r2, ip, r2
   1fec0:	andeq	r6, r2, r0, lsl #5
   1fec4:	andeq	r6, r2, r4, ror #4
   1fec8:	push	{fp, lr}
   1fecc:	add	fp, sp, #4
   1fed0:	sub	sp, sp, #48	; 0x30
   1fed4:	str	r0, [fp, #-24]	; 0xffffffe8
   1fed8:	vstr	d0, [fp, #-36]	; 0xffffffdc
   1fedc:	vstr	d1, [fp, #-44]	; 0xffffffd4
   1fee0:	str	r1, [fp, #-28]	; 0xffffffe4
   1fee4:	str	r2, [fp, #-48]	; 0xffffffd0
   1fee8:	str	r3, [fp, #-52]	; 0xffffffcc
   1feec:	vldr	d6, [fp, #-44]	; 0xffffffd4
   1fef0:	vldr	d7, [fp, #-36]	; 0xffffffdc
   1fef4:	vsub.f64	d7, d6, d7
   1fef8:	vstr	d7, [fp, #-12]
   1fefc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ff00:	ldr	r3, [pc, #496]	; 200f8 <_start@@Base+0xd6e0>
   1ff04:	add	r3, pc, r3
   1ff08:	mov	r0, r3
   1ff0c:	bl	12918 <printf@plt>
   1ff10:	ldrd	r2, [fp, #-12]
   1ff14:	ldr	r1, [pc, #480]	; 200fc <_start@@Base+0xd6e4>
   1ff18:	add	r1, pc, r1
   1ff1c:	mov	r0, r1
   1ff20:	bl	12918 <printf@plt>
   1ff24:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1ff28:	ldr	r3, [pc, #464]	; 20100 <_start@@Base+0xd6e8>
   1ff2c:	add	r3, pc, r3
   1ff30:	mov	r0, r3
   1ff34:	bl	12918 <printf@plt>
   1ff38:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ff3c:	ldr	r3, [pc, #448]	; 20104 <_start@@Base+0xd6ec>
   1ff40:	add	r3, pc, r3
   1ff44:	mov	r0, r3
   1ff48:	bl	12918 <printf@plt>
   1ff4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ff50:	vmov	s15, r3
   1ff54:	vcvt.f64.s32	d6, s15
   1ff58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ff5c:	vmov	s15, r3
   1ff60:	vcvt.f64.u32	d7, s15
   1ff64:	vmul.f64	d7, d6, d7
   1ff68:	vldr	d5, [pc, #360]	; 200d8 <_start@@Base+0xd6c0>
   1ff6c:	vdiv.f64	d6, d7, d5
   1ff70:	vldr	d7, [fp, #-12]
   1ff74:	vdiv.f64	d5, d6, d7
   1ff78:	vmov	r2, r3, d5
   1ff7c:	ldr	r1, [pc, #388]	; 20108 <_start@@Base+0xd6f0>
   1ff80:	add	r1, pc, r1
   1ff84:	mov	r0, r1
   1ff88:	bl	12918 <printf@plt>
   1ff8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ff90:	vmov	s15, r3
   1ff94:	vcvt.f64.s32	d6, s15
   1ff98:	vldr	d7, [fp, #-12]
   1ff9c:	vdiv.f64	d5, d6, d7
   1ffa0:	vmov	r2, r3, d5
   1ffa4:	ldr	r1, [pc, #352]	; 2010c <_start@@Base+0xd6f4>
   1ffa8:	add	r1, pc, r1
   1ffac:	mov	r0, r1
   1ffb0:	bl	12918 <printf@plt>
   1ffb4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ffb8:	cmp	r3, #0
   1ffbc:	beq	1ffec <_start@@Base+0xd5d4>
   1ffc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ffc4:	cmp	r3, #1
   1ffc8:	beq	1ffec <_start@@Base+0xd5d4>
   1ffcc:	vldr	d6, [pc, #268]	; 200e0 <_start@@Base+0xd6c8>
   1ffd0:	vldr	d7, [fp, #-12]
   1ffd4:	vdiv.f64	d5, d6, d7
   1ffd8:	vmov	r2, r3, d5
   1ffdc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ffe0:	ldr	r0, [pc, #296]	; 20110 <_start@@Base+0xd6f8>
   1ffe4:	add	r0, pc, r0
   1ffe8:	bl	12918 <printf@plt>
   1ffec:	vldr	d7, [fp, #-12]
   1fff0:	vldr	d6, [pc, #240]	; 200e8 <_start@@Base+0xd6d0>
   1fff4:	vmul.f64	d5, d7, d6
   1fff8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fffc:	vmov	s15, r3
   20000:	vcvt.f64.s32	d6, s15
   20004:	vdiv.f64	d7, d5, d6
   20008:	vstr	d7, [fp, #-20]	; 0xffffffec
   2000c:	vldr	d7, [fp, #-20]	; 0xffffffec
   20010:	vldr	d6, [pc, #216]	; 200f0 <_start@@Base+0xd6d8>
   20014:	vcmpe.f64	d7, d6
   20018:	vmrs	APSR_nzcv, fpscr
   2001c:	bpl	20038 <_start@@Base+0xd620>
   20020:	ldrd	r2, [fp, #-20]	; 0xffffffec
   20024:	ldr	r1, [pc, #232]	; 20114 <_start@@Base+0xd6fc>
   20028:	add	r1, pc, r1
   2002c:	mov	r0, r1
   20030:	bl	12918 <printf@plt>
   20034:	b	200c8 <_start@@Base+0xd6b0>
   20038:	vldr	d7, [fp, #-20]	; 0xffffffec
   2003c:	vldr	d6, [pc, #148]	; 200d8 <_start@@Base+0xd6c0>
   20040:	vcmpe.f64	d7, d6
   20044:	vmrs	APSR_nzcv, fpscr
   20048:	bpl	20070 <_start@@Base+0xd658>
   2004c:	vldr	d7, [fp, #-20]	; 0xffffffec
   20050:	vldr	d6, [pc, #152]	; 200f0 <_start@@Base+0xd6d8>
   20054:	vdiv.f64	d5, d7, d6
   20058:	vmov	r2, r3, d5
   2005c:	ldr	r1, [pc, #180]	; 20118 <_start@@Base+0xd700>
   20060:	add	r1, pc, r1
   20064:	mov	r0, r1
   20068:	bl	12918 <printf@plt>
   2006c:	b	200c8 <_start@@Base+0xd6b0>
   20070:	vldr	d7, [fp, #-20]	; 0xffffffec
   20074:	vldr	d6, [pc, #108]	; 200e8 <_start@@Base+0xd6d0>
   20078:	vcmpe.f64	d7, d6
   2007c:	vmrs	APSR_nzcv, fpscr
   20080:	bpl	200a8 <_start@@Base+0xd690>
   20084:	vldr	d7, [fp, #-20]	; 0xffffffec
   20088:	vldr	d6, [pc, #72]	; 200d8 <_start@@Base+0xd6c0>
   2008c:	vdiv.f64	d5, d7, d6
   20090:	vmov	r2, r3, d5
   20094:	ldr	r1, [pc, #128]	; 2011c <_start@@Base+0xd704>
   20098:	add	r1, pc, r1
   2009c:	mov	r0, r1
   200a0:	bl	12918 <printf@plt>
   200a4:	b	200c8 <_start@@Base+0xd6b0>
   200a8:	vldr	d7, [fp, #-20]	; 0xffffffec
   200ac:	vldr	d6, [pc, #52]	; 200e8 <_start@@Base+0xd6d0>
   200b0:	vdiv.f64	d5, d7, d6
   200b4:	vmov	r2, r3, d5
   200b8:	ldr	r1, [pc, #96]	; 20120 <_start@@Base+0xd708>
   200bc:	add	r1, pc, r1
   200c0:	mov	r0, r1
   200c4:	bl	12918 <printf@plt>
   200c8:	mov	r3, #0
   200cc:	mov	r0, r3
   200d0:	sub	sp, fp, #4
   200d4:	pop	{fp, pc}
   200d8:	andeq	r0, r0, r0
   200dc:	smlawbmi	lr, r0, r4, r8
   200e0:	andeq	r0, r0, r0
   200e4:	svccc	0x00f00000	; IMB
   200e8:	andeq	r0, r0, r0
   200ec:	bicmi	ip, sp, r5, ror #26
   200f0:	andeq	r0, r0, r0
   200f4:	addmi	r4, pc, r0
   200f8:	muleq	r1, r0, r3
   200fc:	andeq	r1, r1, ip, lsl #7
   20100:	muleq	r1, r0, r3
   20104:	andeq	r1, r1, ip, lsl #7
   20108:	andeq	r1, r1, r0, ror #6
   2010c:	andeq	r1, r1, r0, asr r3
   20110:	andeq	r1, r1, r8, lsr r3
   20114:	andeq	r1, r1, r8, lsl r3
   20118:	strdeq	r1, [r1], -r8
   2011c:	ldrdeq	r1, [r1], -r8
   20120:	andeq	r1, r1, ip, asr #5

00020124 <verify_empty_monster@@Base>:
   20124:	push	{fp, lr}
   20128:	add	fp, sp, #4
   2012c:	sub	sp, sp, #32
   20130:	str	r0, [fp, #-32]	; 0xffffffe0
   20134:	ldr	r3, [pc, #476]	; 20318 <verify_empty_monster@@Base+0x1f4>
   20138:	add	r3, pc, r3
   2013c:	mov	r1, r3
   20140:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20144:	bl	15990 <_start@@Base+0x2f78>
   20148:	str	r0, [fp, #-8]
   2014c:	ldr	r3, [pc, #456]	; 2031c <verify_empty_monster@@Base+0x1f8>
   20150:	add	r3, pc, r3
   20154:	mov	r1, r3
   20158:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2015c:	bl	15990 <_start@@Base+0x2f78>
   20160:	str	r0, [fp, #-12]
   20164:	mov	r1, #0
   20168:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2016c:	bl	15990 <_start@@Base+0x2f78>
   20170:	str	r0, [fp, #-16]
   20174:	ldr	r3, [pc, #420]	; 20320 <verify_empty_monster@@Base+0x1fc>
   20178:	add	r3, pc, r3
   2017c:	mov	r1, r3
   20180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20184:	bl	15990 <_start@@Base+0x2f78>
   20188:	str	r0, [fp, #-20]	; 0xffffffec
   2018c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20190:	bl	159f0 <_start@@Base+0x2fd8>
   20194:	str	r0, [fp, #-24]	; 0xffffffe8
   20198:	ldr	r3, [fp, #-8]
   2019c:	cmp	r3, #0
   201a0:	bne	201bc <verify_empty_monster@@Base+0x98>
   201a4:	ldr	r3, [pc, #376]	; 20324 <verify_empty_monster@@Base+0x200>
   201a8:	add	r3, pc, r3
   201ac:	mov	r0, r3
   201b0:	bl	1296c <puts@plt>
   201b4:	mvn	r3, #0
   201b8:	b	2030c <verify_empty_monster@@Base+0x1e8>
   201bc:	ldr	r3, [fp, #-12]
   201c0:	cmp	r3, #0
   201c4:	beq	201e0 <verify_empty_monster@@Base+0xbc>
   201c8:	ldr	r3, [pc, #344]	; 20328 <verify_empty_monster@@Base+0x204>
   201cc:	add	r3, pc, r3
   201d0:	mov	r0, r3
   201d4:	bl	1296c <puts@plt>
   201d8:	mvn	r3, #0
   201dc:	b	2030c <verify_empty_monster@@Base+0x1e8>
   201e0:	ldr	r2, [fp, #-16]
   201e4:	ldr	r3, [fp, #-8]
   201e8:	cmp	r2, r3
   201ec:	beq	20208 <verify_empty_monster@@Base+0xe4>
   201f0:	ldr	r3, [pc, #308]	; 2032c <verify_empty_monster@@Base+0x208>
   201f4:	add	r3, pc, r3
   201f8:	mov	r0, r3
   201fc:	bl	1296c <puts@plt>
   20200:	mvn	r3, #0
   20204:	b	2030c <verify_empty_monster@@Base+0x1e8>
   20208:	ldr	r2, [fp, #-20]	; 0xffffffec
   2020c:	ldr	r3, [fp, #-8]
   20210:	cmp	r2, r3
   20214:	beq	20230 <verify_empty_monster@@Base+0x10c>
   20218:	ldr	r3, [pc, #272]	; 20330 <verify_empty_monster@@Base+0x20c>
   2021c:	add	r3, pc, r3
   20220:	mov	r0, r3
   20224:	bl	12918 <printf@plt>
   20228:	mvn	r3, #0
   2022c:	b	2030c <verify_empty_monster@@Base+0x1e8>
   20230:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20234:	ldr	r3, [fp, #-8]
   20238:	cmp	r2, r3
   2023c:	beq	20258 <verify_empty_monster@@Base+0x134>
   20240:	ldr	r3, [pc, #236]	; 20334 <verify_empty_monster@@Base+0x210>
   20244:	add	r3, pc, r3
   20248:	mov	r0, r3
   2024c:	bl	12918 <printf@plt>
   20250:	mvn	r3, #0
   20254:	b	2030c <verify_empty_monster@@Base+0x1e8>
   20258:	ldr	r0, [fp, #-8]
   2025c:	bl	15c20 <_start@@Base+0x3208>
   20260:	mov	r3, r0
   20264:	cmp	r3, #100	; 0x64
   20268:	beq	20284 <verify_empty_monster@@Base+0x160>
   2026c:	ldr	r3, [pc, #196]	; 20338 <verify_empty_monster@@Base+0x214>
   20270:	add	r3, pc, r3
   20274:	mov	r0, r3
   20278:	bl	1296c <puts@plt>
   2027c:	mvn	r3, #0
   20280:	b	2030c <verify_empty_monster@@Base+0x1e8>
   20284:	ldr	r0, [fp, #-8]
   20288:	bl	15d18 <_start@@Base+0x3300>
   2028c:	mov	r3, r0
   20290:	cmp	r3, #0
   20294:	beq	202b0 <verify_empty_monster@@Base+0x18c>
   20298:	ldr	r3, [pc, #156]	; 2033c <verify_empty_monster@@Base+0x218>
   2029c:	add	r3, pc, r3
   202a0:	mov	r0, r3
   202a4:	bl	1296c <puts@plt>
   202a8:	mvn	r3, #0
   202ac:	b	2030c <verify_empty_monster@@Base+0x1e8>
   202b0:	ldr	r0, [fp, #-8]
   202b4:	bl	15b44 <_start@@Base+0x312c>
   202b8:	mov	r3, r0
   202bc:	cmp	r3, #0
   202c0:	beq	202dc <verify_empty_monster@@Base+0x1b8>
   202c4:	ldr	r3, [pc, #116]	; 20340 <verify_empty_monster@@Base+0x21c>
   202c8:	add	r3, pc, r3
   202cc:	mov	r0, r3
   202d0:	bl	1296c <puts@plt>
   202d4:	mvn	r3, #0
   202d8:	b	2030c <verify_empty_monster@@Base+0x1e8>
   202dc:	ldr	r0, [fp, #-8]
   202e0:	bl	15a5c <_start@@Base+0x3044>
   202e4:	mov	r3, r0
   202e8:	cmp	r3, #0
   202ec:	beq	20308 <verify_empty_monster@@Base+0x1e4>
   202f0:	ldr	r3, [pc, #76]	; 20344 <verify_empty_monster@@Base+0x220>
   202f4:	add	r3, pc, r3
   202f8:	mov	r0, r3
   202fc:	bl	1296c <puts@plt>
   20300:	mvn	r3, #0
   20304:	b	2030c <verify_empty_monster@@Base+0x1e8>
   20308:	mov	r3, #0
   2030c:	mov	r0, r3
   20310:	sub	sp, fp, #4
   20314:	pop	{fp, pc}
   20318:	andeq	r0, r1, r0, asr sl
   2031c:	andeq	r1, r1, r0, asr r2
   20320:	andeq	r1, r1, r0, lsr r2
   20324:	andeq	r1, r1, r8, lsl #4
   20328:	strdeq	r1, [r1], -ip
   2032c:	andeq	r1, r1, r4, lsl #4
   20330:	andeq	r1, r1, r4, lsl r2
   20334:	andeq	r1, r1, r0, lsr #4
   20338:	andeq	r1, r1, r0, lsr #4
   2033c:	andeq	r1, r1, r8, lsl r2
   20340:	andeq	r1, r1, ip, lsl #4
   20344:	strdeq	r1, [r1], -ip

00020348 <test_enums@@Base>:
   20348:	push	{fp}		; (str fp, [sp, #-4]!)
   2034c:	add	fp, sp, #0
   20350:	sub	sp, sp, #12
   20354:	str	r0, [fp, #-8]
   20358:	mov	r3, #0
   2035c:	mov	r0, r3
   20360:	add	sp, fp, #0
   20364:	pop	{fp}		; (ldr fp, [sp], #4)
   20368:	bx	lr

0002036c <test_type_aliases@@Base>:
   2036c:	push	{r4, fp, lr}
   20370:	add	fp, sp, #8
   20374:	sub	sp, sp, #76	; 0x4c
   20378:	str	r0, [fp, #-40]	; 0xffffffd8
   2037c:	ldr	r4, [pc, #672]	; 20624 <test_type_aliases@@Base+0x2b8>
   20380:	add	r4, pc, r4
   20384:	mov	r3, #0
   20388:	str	r3, [fp, #-16]
   2038c:	mov	r3, #0
   20390:	str	r3, [fp, #-20]	; 0xffffffec
   20394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20398:	bl	286e4 <flatcc_builder_reset@@Base>
   2039c:	mov	r2, #0
   203a0:	mov	r1, #0
   203a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   203a8:	bl	19c7c <_start@@Base+0x7264>
   203ac:	str	r0, [fp, #-24]	; 0xffffffe8
   203b0:	mov	r2, #0
   203b4:	mov	r1, #0
   203b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   203bc:	bl	1a194 <_start@@Base+0x777c>
   203c0:	str	r0, [fp, #-28]	; 0xffffffe4
   203c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   203c8:	str	r3, [sp, #36]	; 0x24
   203cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   203d0:	str	r3, [sp, #32]
   203d4:	mvn	r2, #0
   203d8:	mvn	r3, #0
   203dc:	strd	r2, [sp, #24]
   203e0:	mov	r2, #0
   203e4:	mov	r3, #-2147483648	; 0x80000000
   203e8:	strd	r2, [sp, #16]
   203ec:	mvn	r3, #0
   203f0:	str	r3, [sp, #8]
   203f4:	mov	r3, #-2147483648	; 0x80000000
   203f8:	str	r3, [sp, #4]
   203fc:	ldr	r3, [pc, #548]	; 20628 <test_type_aliases@@Base+0x2bc>
   20400:	str	r3, [sp]
   20404:	vldr	d1, [pc, #524]	; 20618 <test_type_aliases@@Base+0x2ac>
   20408:	vldr	s0, [pc, #528]	; 20620 <test_type_aliases@@Base+0x2b4>
   2040c:	ldr	r3, [pc, #536]	; 2062c <test_type_aliases@@Base+0x2c0>
   20410:	mov	r2, #255	; 0xff
   20414:	mvn	r1, #127	; 0x7f
   20418:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2041c:	bl	1da4c <_start@@Base+0xb034>
   20420:	sub	r3, fp, #36	; 0x24
   20424:	mov	r1, r3
   20428:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2042c:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   20430:	str	r0, [fp, #-20]	; 0xffffffec
   20434:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20438:	mov	r1, r3
   2043c:	ldr	r0, [fp, #-20]	; 0xffffffec
   20440:	bl	1fa0c <_start@@Base+0xcff4>
   20444:	str	r0, [fp, #-16]
   20448:	ldr	r3, [fp, #-16]
   2044c:	cmp	r3, #0
   20450:	beq	20498 <test_type_aliases@@Base+0x12c>
   20454:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20458:	ldr	r3, [pc, #464]	; 20630 <test_type_aliases@@Base+0x2c4>
   2045c:	ldr	r3, [r4, r3]
   20460:	ldr	r3, [r3]
   20464:	ldr	r1, [fp, #-20]	; 0xffffffec
   20468:	ldr	r0, [pc, #452]	; 20634 <test_type_aliases@@Base+0x2c8>
   2046c:	add	r0, pc, r0
   20470:	bl	1fc0c <_start@@Base+0xd1f4>
   20474:	ldr	r0, [fp, #-16]
   20478:	bl	2e65c <flatcc_verify_error_string@@Base>
   2047c:	mov	r3, r0
   20480:	mov	r1, r3
   20484:	ldr	r3, [pc, #428]	; 20638 <test_type_aliases@@Base+0x2cc>
   20488:	add	r3, pc, r3
   2048c:	mov	r0, r3
   20490:	bl	12918 <printf@plt>
   20494:	b	20594 <test_type_aliases@@Base+0x228>
   20498:	ldr	r0, [fp, #-20]	; 0xffffffec
   2049c:	bl	18178 <_start@@Base+0x5760>
   204a0:	str	r0, [fp, #-32]	; 0xffffffe0
   204a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   204a8:	bl	181e4 <_start@@Base+0x57cc>
   204ac:	mov	r3, r0
   204b0:	cmn	r3, #128	; 0x80
   204b4:	bne	205a4 <test_type_aliases@@Base+0x238>
   204b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   204bc:	bl	183d4 <_start@@Base+0x59bc>
   204c0:	mov	r3, r0
   204c4:	cmn	r3, #32768	; 0x8000
   204c8:	bne	205ac <test_type_aliases@@Base+0x240>
   204cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   204d0:	bl	185c0 <_start@@Base+0x5ba8>
   204d4:	mov	r3, r0
   204d8:	cmp	r3, #-2147483648	; 0x80000000
   204dc:	bne	205b4 <test_type_aliases@@Base+0x248>
   204e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   204e4:	bl	187b0 <_start@@Base+0x5d98>
   204e8:	mov	r2, r0
   204ec:	mov	r3, r1
   204f0:	cmp	r3, #-2147483648	; 0x80000000
   204f4:	cmpeq	r2, #0
   204f8:	bne	205bc <test_type_aliases@@Base+0x250>
   204fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20500:	bl	182dc <_start@@Base+0x58c4>
   20504:	mov	r3, r0
   20508:	cmp	r3, #255	; 0xff
   2050c:	bne	205c4 <test_type_aliases@@Base+0x258>
   20510:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20514:	bl	184cc <_start@@Base+0x5ab4>
   20518:	mov	r3, r0
   2051c:	mov	r2, r3
   20520:	ldr	r3, [pc, #256]	; 20628 <test_type_aliases@@Base+0x2bc>
   20524:	cmp	r2, r3
   20528:	bne	205cc <test_type_aliases@@Base+0x260>
   2052c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20530:	bl	186b8 <_start@@Base+0x5ca0>
   20534:	mov	r3, r0
   20538:	cmn	r3, #1
   2053c:	bne	205d4 <test_type_aliases@@Base+0x268>
   20540:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20544:	bl	188b4 <_start@@Base+0x5e9c>
   20548:	mvn	r2, #0
   2054c:	mvn	r3, #0
   20550:	cmp	r1, r3
   20554:	cmpeq	r0, r2
   20558:	bne	205dc <test_type_aliases@@Base+0x270>
   2055c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20560:	bl	189b4 <_start@@Base+0x5f9c>
   20564:	vmov.f32	s14, s0
   20568:	vldr	s15, [pc, #176]	; 20620 <test_type_aliases@@Base+0x2b4>
   2056c:	vcmp.f32	s14, s15
   20570:	vmrs	APSR_nzcv, fpscr
   20574:	bne	205e4 <test_type_aliases@@Base+0x278>
   20578:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2057c:	bl	18ab0 <_start@@Base+0x6098>
   20580:	vmov.f64	d6, d0
   20584:	vldr	d7, [pc, #140]	; 20618 <test_type_aliases@@Base+0x2ac>
   20588:	vcmp.f64	d6, d7
   2058c:	vmrs	APSR_nzcv, fpscr
   20590:	bne	205ec <test_type_aliases@@Base+0x280>
   20594:	ldr	r0, [fp, #-20]	; 0xffffffec
   20598:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   2059c:	ldr	r3, [fp, #-16]
   205a0:	b	2060c <test_type_aliases@@Base+0x2a0>
   205a4:	nop			; (mov r0, r0)
   205a8:	b	205f0 <test_type_aliases@@Base+0x284>
   205ac:	nop			; (mov r0, r0)
   205b0:	b	205f0 <test_type_aliases@@Base+0x284>
   205b4:	nop			; (mov r0, r0)
   205b8:	b	205f0 <test_type_aliases@@Base+0x284>
   205bc:	nop			; (mov r0, r0)
   205c0:	b	205f0 <test_type_aliases@@Base+0x284>
   205c4:	nop			; (mov r0, r0)
   205c8:	b	205f0 <test_type_aliases@@Base+0x284>
   205cc:	nop			; (mov r0, r0)
   205d0:	b	205f0 <test_type_aliases@@Base+0x284>
   205d4:	nop			; (mov r0, r0)
   205d8:	b	205f0 <test_type_aliases@@Base+0x284>
   205dc:	nop			; (mov r0, r0)
   205e0:	b	205f0 <test_type_aliases@@Base+0x284>
   205e4:	nop			; (mov r0, r0)
   205e8:	b	205f0 <test_type_aliases@@Base+0x284>
   205ec:	nop			; (mov r0, r0)
   205f0:	mvn	r3, #0
   205f4:	str	r3, [fp, #-16]
   205f8:	ldr	r3, [pc, #60]	; 2063c <test_type_aliases@@Base+0x2d0>
   205fc:	add	r3, pc, r3
   20600:	mov	r0, r3
   20604:	bl	1296c <puts@plt>
   20608:	b	20594 <test_type_aliases@@Base+0x228>
   2060c:	mov	r0, r3
   20610:	sub	sp, fp, #8
   20614:	pop	{r4, fp, pc}
   20618:	strbtvs	r6, [r6], -r6, ror #12
   2061c:	andmi	r6, r2, r6, ror #12
   20620:	andsmi	r3, r3, r3, lsr r3
   20624:	andeq	r5, r2, r8, ror ip
   20628:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   2062c:			; <UNDEFINED> instruction: 0xffff8000
   20630:	andeq	r0, r0, r8, rrx
   20634:	andeq	r1, r1, r4, lsr #1
   20638:	muleq	r1, ip, r0
   2063c:	andeq	r0, r1, r4, asr pc

00020640 <test_empty_monster@@Base>:
   20640:	push	{r4, fp, lr}
   20644:	add	fp, sp, #8
   20648:	sub	sp, sp, #28
   2064c:	str	r0, [fp, #-32]	; 0xffffffe0
   20650:	ldr	r4, [pc, #320]	; 20798 <test_empty_monster@@Base+0x158>
   20654:	add	r4, pc, r4
   20658:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2065c:	bl	286e4 <flatcc_builder_reset@@Base>
   20660:	ldr	r3, [pc, #308]	; 2079c <test_empty_monster@@Base+0x15c>
   20664:	add	r3, pc, r3
   20668:	mov	r1, r3
   2066c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20670:	bl	1a360 <_start@@Base+0x7948>
   20674:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20678:	bl	1afa4 <_start@@Base+0x858c>
   2067c:	ldr	r3, [pc, #284]	; 207a0 <test_empty_monster@@Base+0x160>
   20680:	add	r3, pc, r3
   20684:	mov	r1, r3
   20688:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2068c:	bl	1bf80 <_start@@Base+0x9568>
   20690:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20694:	bl	1afd0 <_start@@Base+0x85b8>
   20698:	str	r0, [fp, #-20]	; 0xffffffec
   2069c:	ldr	r1, [fp, #-20]	; 0xffffffec
   206a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   206a4:	bl	1a3d0 <_start@@Base+0x79b8>
   206a8:	sub	r3, fp, #28
   206ac:	mov	r1, r3
   206b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   206b4:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   206b8:	str	r0, [fp, #-24]	; 0xffffffe8
   206bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   206c0:	ldr	r3, [pc, #220]	; 207a4 <test_empty_monster@@Base+0x164>
   206c4:	ldr	r3, [r4, r3]
   206c8:	ldr	r3, [r3]
   206cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   206d0:	ldr	r0, [pc, #208]	; 207a8 <test_empty_monster@@Base+0x168>
   206d4:	add	r0, pc, r0
   206d8:	bl	1fc0c <_start@@Base+0xd1f4>
   206dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   206e0:	bl	20124 <verify_empty_monster@@Base>
   206e4:	str	r0, [fp, #-16]
   206e8:	ldr	r3, [fp, #-16]
   206ec:	cmp	r3, #0
   206f0:	bne	2077c <test_empty_monster@@Base+0x13c>
   206f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   206f8:	ldr	r2, [pc, #172]	; 207ac <test_empty_monster@@Base+0x16c>
   206fc:	add	r2, pc, r2
   20700:	mov	r1, r3
   20704:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20708:	bl	1f734 <_start@@Base+0xcd1c>
   2070c:	str	r0, [fp, #-16]
   20710:	ldr	r3, [fp, #-16]
   20714:	cmp	r3, #0
   20718:	beq	20744 <test_empty_monster@@Base+0x104>
   2071c:	ldr	r0, [fp, #-16]
   20720:	bl	2e65c <flatcc_verify_error_string@@Base>
   20724:	mov	r3, r0
   20728:	mov	r1, r3
   2072c:	ldr	r3, [pc, #124]	; 207b0 <test_empty_monster@@Base+0x170>
   20730:	add	r3, pc, r3
   20734:	mov	r0, r3
   20738:	bl	12918 <printf@plt>
   2073c:	mvn	r3, #0
   20740:	b	2078c <test_empty_monster@@Base+0x14c>
   20744:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20748:	sub	r3, r3, #1
   2074c:	mov	r1, r3
   20750:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20754:	bl	1f6a4 <_start@@Base+0xcc8c>
   20758:	mov	r3, r0
   2075c:	cmp	r3, #0
   20760:	bne	20780 <test_empty_monster@@Base+0x140>
   20764:	ldr	r3, [pc, #72]	; 207b4 <test_empty_monster@@Base+0x174>
   20768:	add	r3, pc, r3
   2076c:	mov	r0, r3
   20770:	bl	1296c <puts@plt>
   20774:	mvn	r3, #0
   20778:	b	2078c <test_empty_monster@@Base+0x14c>
   2077c:	nop			; (mov r0, r0)
   20780:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20784:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   20788:	ldr	r3, [fp, #-16]
   2078c:	mov	r0, r3
   20790:	sub	sp, fp, #8
   20794:	pop	{r4, fp, pc}
   20798:	andeq	r5, r2, r4, lsr #19
   2079c:	andeq	r0, r1, r4, lsr #10
   207a0:	andeq	r0, r1, r0, lsl #30
   207a4:	andeq	r0, r0, r8, rrx
   207a8:			; <UNDEFINED> instruction: 0x00010eb8
   207ac:	andeq	r0, r1, ip, lsl #9
   207b0:	andeq	r0, r1, r0, ror lr
   207b4:	andeq	r0, r1, r0, ror #28

000207b8 <test_typed_empty_monster@@Base>:
   207b8:	push	{r4, fp, lr}
   207bc:	add	fp, sp, #8
   207c0:	sub	sp, sp, #36	; 0x24
   207c4:	str	r0, [fp, #-40]	; 0xffffffd8
   207c8:	ldr	r4, [pc, #828]	; 20b0c <test_typed_empty_monster@@Base+0x354>
   207cc:	add	r4, pc, r4
   207d0:	mvn	r3, #0
   207d4:	str	r3, [fp, #-16]
   207d8:	mov	r3, #0
   207dc:	str	r3, [fp, #-32]	; 0xffffffe0
   207e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   207e4:	bl	286e4 <flatcc_builder_reset@@Base>
   207e8:	ldr	r3, [pc, #800]	; 20b10 <test_typed_empty_monster@@Base+0x358>
   207ec:	add	r3, pc, r3
   207f0:	mov	r1, r3
   207f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   207f8:	bl	1a360 <_start@@Base+0x7948>
   207fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20800:	bl	1afa4 <_start@@Base+0x858c>
   20804:	ldr	r3, [pc, #776]	; 20b14 <test_typed_empty_monster@@Base+0x35c>
   20808:	add	r3, pc, r3
   2080c:	mov	r1, r3
   20810:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20814:	bl	1bf80 <_start@@Base+0x9568>
   20818:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2081c:	bl	1afd0 <_start@@Base+0x85b8>
   20820:	str	r0, [fp, #-20]	; 0xffffffec
   20824:	ldr	r1, [fp, #-20]	; 0xffffffec
   20828:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2082c:	bl	1a3d0 <_start@@Base+0x79b8>
   20830:	sub	r3, fp, #28
   20834:	mov	r1, r3
   20838:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2083c:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   20840:	str	r0, [fp, #-24]	; 0xffffffe8
   20844:	ldr	r2, [fp, #-28]	; 0xffffffe4
   20848:	ldr	r3, [pc, #712]	; 20b18 <test_typed_empty_monster@@Base+0x360>
   2084c:	ldr	r3, [r4, r3]
   20850:	ldr	r3, [r3]
   20854:	ldr	r1, [fp, #-24]	; 0xffffffe8
   20858:	ldr	r0, [pc, #700]	; 20b1c <test_typed_empty_monster@@Base+0x364>
   2085c:	add	r0, pc, r0
   20860:	bl	1fc0c <_start@@Base+0xd1f4>
   20864:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20868:	bl	146b8 <_start@@Base+0x1ca0>
   2086c:	mov	r4, r0
   20870:	ldr	r3, [pc, #680]	; 20b20 <test_typed_empty_monster@@Base+0x368>
   20874:	add	r3, pc, r3
   20878:	mov	r0, r3
   2087c:	bl	133d4 <_start@@Base+0x9bc>
   20880:	mov	r3, r0
   20884:	cmp	r4, r3
   20888:	beq	208b0 <test_typed_empty_monster@@Base+0xf8>
   2088c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20890:	bl	146b8 <_start@@Base+0x1ca0>
   20894:	mov	r3, r0
   20898:	mov	r1, r3
   2089c:	ldr	r3, [pc, #640]	; 20b24 <test_typed_empty_monster@@Base+0x36c>
   208a0:	add	r3, pc, r3
   208a4:	mov	r0, r3
   208a8:	bl	12918 <printf@plt>
   208ac:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   208b0:	ldr	r1, [pc, #624]	; 20b28 <test_typed_empty_monster@@Base+0x370>
   208b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   208b8:	bl	14660 <_start@@Base+0x1c48>
   208bc:	mov	r3, r0
   208c0:	cmp	r3, #0
   208c4:	bne	208dc <test_typed_empty_monster@@Base+0x124>
   208c8:	ldr	r3, [pc, #604]	; 20b2c <test_typed_empty_monster@@Base+0x374>
   208cc:	add	r3, pc, r3
   208d0:	mov	r0, r3
   208d4:	bl	1296c <puts@plt>
   208d8:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   208dc:	ldr	r1, [pc, #580]	; 20b28 <test_typed_empty_monster@@Base+0x370>
   208e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   208e4:	bl	14660 <_start@@Base+0x1c48>
   208e8:	mov	r3, r0
   208ec:	cmp	r3, #0
   208f0:	bne	20908 <test_typed_empty_monster@@Base+0x150>
   208f4:	ldr	r3, [pc, #564]	; 20b30 <test_typed_empty_monster@@Base+0x378>
   208f8:	add	r3, pc, r3
   208fc:	mov	r0, r3
   20900:	bl	1296c <puts@plt>
   20904:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   20908:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2090c:	bl	20124 <verify_empty_monster@@Base>
   20910:	mov	r3, r0
   20914:	cmp	r3, #0
   20918:	bne	20930 <test_typed_empty_monster@@Base+0x178>
   2091c:	ldr	r3, [pc, #528]	; 20b34 <test_typed_empty_monster@@Base+0x37c>
   20920:	add	r3, pc, r3
   20924:	mov	r0, r3
   20928:	bl	1296c <puts@plt>
   2092c:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   20930:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20934:	ldr	r2, [pc, #508]	; 20b38 <test_typed_empty_monster@@Base+0x380>
   20938:	add	r2, pc, r2
   2093c:	mov	r1, r3
   20940:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20944:	bl	1f734 <_start@@Base+0xcd1c>
   20948:	str	r0, [fp, #-16]
   2094c:	ldr	r3, [fp, #-16]
   20950:	cmp	r3, #0
   20954:	beq	2097c <test_typed_empty_monster@@Base+0x1c4>
   20958:	ldr	r0, [fp, #-16]
   2095c:	bl	2e65c <flatcc_verify_error_string@@Base>
   20960:	mov	r3, r0
   20964:	mov	r1, r3
   20968:	ldr	r3, [pc, #460]	; 20b3c <test_typed_empty_monster@@Base+0x384>
   2096c:	add	r3, pc, r3
   20970:	mov	r0, r3
   20974:	bl	12918 <printf@plt>
   20978:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   2097c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20980:	mov	r1, r3
   20984:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20988:	bl	1f6ec <_start@@Base+0xccd4>
   2098c:	str	r0, [fp, #-16]
   20990:	ldr	r3, [fp, #-16]
   20994:	cmp	r3, #0
   20998:	beq	209c0 <test_typed_empty_monster@@Base+0x208>
   2099c:	ldr	r0, [fp, #-16]
   209a0:	bl	2e65c <flatcc_verify_error_string@@Base>
   209a4:	mov	r3, r0
   209a8:	mov	r1, r3
   209ac:	ldr	r3, [pc, #396]	; 20b40 <test_typed_empty_monster@@Base+0x388>
   209b0:	add	r3, pc, r3
   209b4:	mov	r0, r3
   209b8:	bl	12918 <printf@plt>
   209bc:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   209c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   209c4:	ldr	r2, [pc, #348]	; 20b28 <test_typed_empty_monster@@Base+0x370>
   209c8:	mov	r1, r3
   209cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   209d0:	bl	1f778 <_start@@Base+0xcd60>
   209d4:	str	r0, [fp, #-16]
   209d8:	ldr	r3, [fp, #-16]
   209dc:	cmp	r3, #0
   209e0:	beq	20a08 <test_typed_empty_monster@@Base+0x250>
   209e4:	ldr	r0, [fp, #-16]
   209e8:	bl	2e65c <flatcc_verify_error_string@@Base>
   209ec:	mov	r3, r0
   209f0:	mov	r1, r3
   209f4:	ldr	r3, [pc, #328]	; 20b44 <test_typed_empty_monster@@Base+0x38c>
   209f8:	add	r3, pc, r3
   209fc:	mov	r0, r3
   20a00:	bl	12918 <printf@plt>
   20a04:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   20a08:	ldr	r4, [fp, #-28]	; 0xffffffe4
   20a0c:	ldr	r3, [pc, #308]	; 20b48 <test_typed_empty_monster@@Base+0x390>
   20a10:	add	r3, pc, r3
   20a14:	mov	r0, r3
   20a18:	bl	133d4 <_start@@Base+0x9bc>
   20a1c:	mov	r3, r0
   20a20:	mov	r2, r3
   20a24:	mov	r1, r4
   20a28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a2c:	bl	1f778 <_start@@Base+0xcd60>
   20a30:	str	r0, [fp, #-16]
   20a34:	ldr	r3, [fp, #-16]
   20a38:	cmp	r3, #0
   20a3c:	beq	20a64 <test_typed_empty_monster@@Base+0x2ac>
   20a40:	ldr	r0, [fp, #-16]
   20a44:	bl	2e65c <flatcc_verify_error_string@@Base>
   20a48:	mov	r3, r0
   20a4c:	mov	r1, r3
   20a50:	ldr	r3, [pc, #244]	; 20b4c <test_typed_empty_monster@@Base+0x394>
   20a54:	add	r3, pc, r3
   20a58:	mov	r0, r3
   20a5c:	bl	12918 <printf@plt>
   20a60:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   20a64:	sub	r3, fp, #32
   20a68:	mov	r1, r3
   20a6c:	ldr	r0, [pc, #180]	; 20b28 <test_typed_empty_monster@@Base+0x370>
   20a70:	bl	13464 <_start@@Base+0xa4c>
   20a74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20a78:	sub	r2, fp, #32
   20a7c:	mov	r1, r3
   20a80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20a84:	bl	1f734 <_start@@Base+0xcd1c>
   20a88:	str	r0, [fp, #-16]
   20a8c:	ldr	r3, [fp, #-16]
   20a90:	cmp	r3, #0
   20a94:	beq	20abc <test_typed_empty_monster@@Base+0x304>
   20a98:	ldr	r0, [fp, #-16]
   20a9c:	bl	2e65c <flatcc_verify_error_string@@Base>
   20aa0:	mov	r3, r0
   20aa4:	mov	r1, r3
   20aa8:	ldr	r3, [pc, #160]	; 20b50 <test_typed_empty_monster@@Base+0x398>
   20aac:	add	r3, pc, r3
   20ab0:	mov	r0, r3
   20ab4:	bl	12918 <printf@plt>
   20ab8:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   20abc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20ac0:	mov	r1, r3
   20ac4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20ac8:	bl	1f6a4 <_start@@Base+0xcc8c>
   20acc:	mov	r3, r0
   20ad0:	cmp	r3, #0
   20ad4:	bne	20aec <test_typed_empty_monster@@Base+0x334>
   20ad8:	ldr	r3, [pc, #116]	; 20b54 <test_typed_empty_monster@@Base+0x39c>
   20adc:	add	r3, pc, r3
   20ae0:	mov	r0, r3
   20ae4:	bl	1296c <puts@plt>
   20ae8:	b	20af4 <test_typed_empty_monster@@Base+0x33c>
   20aec:	mov	r3, #0
   20af0:	str	r3, [fp, #-16]
   20af4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20af8:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   20afc:	ldr	r3, [fp, #-16]
   20b00:	mov	r0, r3
   20b04:	sub	sp, fp, #8
   20b08:	pop	{r4, fp, pc}
   20b0c:	andeq	r5, r2, ip, lsr #16
   20b10:	andeq	r0, r1, ip, ror sl
   20b14:	andeq	r0, r1, r8, ror sp
   20b18:	andeq	r0, r0, r8, rrx
   20b1c:	muleq	r1, ip, sp
   20b20:	andeq	r0, r1, r0, lsr #27
   20b24:	andeq	r0, r1, ip, lsl #27
   20b28:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   20b2c:	muleq	r1, r4, sp
   20b30:	andeq	r0, r1, r8, ror #26
   20b34:	andeq	r0, r1, r8, ror #26
   20b38:	andeq	r0, r1, r0, lsr r9
   20b3c:	andeq	r0, r1, ip, asr sp
   20b40:	andeq	r0, r1, r8, lsl sp
   20b44:	andeq	r0, r1, r0, lsl #26
   20b48:	andeq	r0, r1, r4, lsl #24
   20b4c:	ldrdeq	r0, [r1], -ip
   20b50:	andeq	r0, r1, ip, lsl ip
   20b54:	muleq	r1, r4, ip

00020b58 <verify_table_with_emptystruct@@Base>:
   20b58:	push	{fp, lr}
   20b5c:	add	fp, sp, #4
   20b60:	sub	sp, sp, #16
   20b64:	str	r0, [fp, #-16]
   20b68:	ldr	r0, [fp, #-16]
   20b6c:	bl	14ed4 <_start@@Base+0x24bc>
   20b70:	str	r0, [fp, #-8]
   20b74:	ldr	r3, [fp, #-8]
   20b78:	cmp	r3, #0
   20b7c:	bne	20b98 <verify_table_with_emptystruct@@Base+0x40>
   20b80:	ldr	r3, [pc, #120]	; 20c00 <verify_table_with_emptystruct@@Base+0xa8>
   20b84:	add	r3, pc, r3
   20b88:	mov	r0, r3
   20b8c:	bl	1296c <puts@plt>
   20b90:	mvn	r3, #0
   20b94:	b	20bf4 <verify_table_with_emptystruct@@Base+0x9c>
   20b98:	ldr	r0, [fp, #-8]
   20b9c:	bl	14fa0 <_start@@Base+0x2588>
   20ba0:	str	r0, [fp, #-12]
   20ba4:	ldr	r3, [fp, #-12]
   20ba8:	cmp	r3, #0
   20bac:	bne	20bc8 <verify_table_with_emptystruct@@Base+0x70>
   20bb0:	ldr	r3, [pc, #76]	; 20c04 <verify_table_with_emptystruct@@Base+0xac>
   20bb4:	add	r3, pc, r3
   20bb8:	mov	r0, r3
   20bbc:	bl	1296c <puts@plt>
   20bc0:	mvn	r3, #0
   20bc4:	b	20bf4 <verify_table_with_emptystruct@@Base+0x9c>
   20bc8:	bl	14a14 <_start@@Base+0x1ffc>
   20bcc:	mov	r3, r0
   20bd0:	cmp	r3, #0
   20bd4:	beq	20bf0 <verify_table_with_emptystruct@@Base+0x98>
   20bd8:	ldr	r3, [pc, #40]	; 20c08 <verify_table_with_emptystruct@@Base+0xb0>
   20bdc:	add	r3, pc, r3
   20be0:	mov	r0, r3
   20be4:	bl	1296c <puts@plt>
   20be8:	mvn	r3, #0
   20bec:	b	20bf4 <verify_table_with_emptystruct@@Base+0x9c>
   20bf0:	mov	r3, #0
   20bf4:	mov	r0, r3
   20bf8:	sub	sp, fp, #4
   20bfc:	pop	{fp, pc}
   20c00:	andeq	r0, r1, r8, lsr ip
   20c04:	andeq	r0, r1, r0, lsr ip
   20c08:	andeq	r0, r1, r4, lsr #24

00020c0c <test_table_with_emptystruct@@Base>:
   20c0c:	push	{r4, fp, lr}
   20c10:	add	fp, sp, #8
   20c14:	sub	sp, sp, #28
   20c18:	str	r0, [fp, #-32]	; 0xffffffe0
   20c1c:	ldr	r4, [pc, #116]	; 20c98 <test_table_with_emptystruct@@Base+0x8c>
   20c20:	add	r4, pc, r4
   20c24:	mov	r3, #0
   20c28:	str	r3, [fp, #-16]
   20c2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20c30:	bl	286e4 <flatcc_builder_reset@@Base>
   20c34:	ldr	r1, [fp, #-16]
   20c38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20c3c:	bl	1b62c <_start@@Base+0x8c14>
   20c40:	sub	r3, fp, #28
   20c44:	mov	r1, r3
   20c48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20c4c:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   20c50:	str	r0, [fp, #-20]	; 0xffffffec
   20c54:	ldr	r2, [fp, #-28]	; 0xffffffe4
   20c58:	ldr	r3, [pc, #60]	; 20c9c <test_table_with_emptystruct@@Base+0x90>
   20c5c:	ldr	r3, [r4, r3]
   20c60:	ldr	r3, [r3]
   20c64:	ldr	r1, [fp, #-20]	; 0xffffffec
   20c68:	ldr	r0, [pc, #48]	; 20ca0 <test_table_with_emptystruct@@Base+0x94>
   20c6c:	add	r0, pc, r0
   20c70:	bl	1fc0c <_start@@Base+0xd1f4>
   20c74:	ldr	r0, [fp, #-20]	; 0xffffffec
   20c78:	bl	20b58 <verify_table_with_emptystruct@@Base>
   20c7c:	str	r0, [fp, #-24]	; 0xffffffe8
   20c80:	ldr	r0, [fp, #-20]	; 0xffffffec
   20c84:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   20c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20c8c:	mov	r0, r3
   20c90:	sub	sp, fp, #8
   20c94:	pop	{r4, fp, pc}
   20c98:	ldrdeq	r5, [r2], -r8
   20c9c:	andeq	r0, r0, r8, rrx
   20ca0:			; <UNDEFINED> instruction: 0x00010bb0

00020ca4 <test_typed_table_with_emptystruct@@Base>:
   20ca4:	push	{r4, fp, lr}
   20ca8:	add	fp, sp, #8
   20cac:	sub	sp, sp, #28
   20cb0:	str	r0, [fp, #-32]	; 0xffffffe0
   20cb4:	ldr	r4, [pc, #796]	; 20fd8 <test_typed_table_with_emptystruct@@Base+0x334>
   20cb8:	add	r4, pc, r4
   20cbc:	mov	r3, #0
   20cc0:	str	r3, [fp, #-16]
   20cc4:	mov	r3, #0
   20cc8:	str	r3, [fp, #-20]	; 0xffffffec
   20ccc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20cd0:	bl	286e4 <flatcc_builder_reset@@Base>
   20cd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   20cd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20cdc:	bl	1b698 <_start@@Base+0x8c80>
   20ce0:	sub	r3, fp, #28
   20ce4:	mov	r1, r3
   20ce8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20cec:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   20cf0:	str	r0, [fp, #-24]	; 0xffffffe8
   20cf4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   20cf8:	ldr	r3, [pc, #732]	; 20fdc <test_typed_table_with_emptystruct@@Base+0x338>
   20cfc:	ldr	r3, [r4, r3]
   20d00:	ldr	r3, [r3]
   20d04:	ldr	r1, [fp, #-24]	; 0xffffffe8
   20d08:	ldr	r0, [pc, #720]	; 20fe0 <test_typed_table_with_emptystruct@@Base+0x33c>
   20d0c:	add	r0, pc, r0
   20d10:	bl	1fc0c <_start@@Base+0xd1f4>
   20d14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20d18:	ldr	r2, [pc, #708]	; 20fe4 <test_typed_table_with_emptystruct@@Base+0x340>
   20d1c:	add	r2, pc, r2
   20d20:	mov	r1, r3
   20d24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d28:	bl	1e7ec <_start@@Base+0xbdd4>
   20d2c:	mov	r3, r0
   20d30:	cmp	r3, #0
   20d34:	beq	20d50 <test_typed_table_with_emptystruct@@Base+0xac>
   20d38:	ldr	r3, [pc, #680]	; 20fe8 <test_typed_table_with_emptystruct@@Base+0x344>
   20d3c:	add	r3, pc, r3
   20d40:	mov	r0, r3
   20d44:	bl	1296c <puts@plt>
   20d48:	mvn	r3, #0
   20d4c:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20d50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20d54:	mov	r1, r3
   20d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d5c:	bl	1e7a4 <_start@@Base+0xbd8c>
   20d60:	mov	r3, r0
   20d64:	cmp	r3, #0
   20d68:	beq	20d84 <test_typed_table_with_emptystruct@@Base+0xe0>
   20d6c:	ldr	r3, [pc, #632]	; 20fec <test_typed_table_with_emptystruct@@Base+0x348>
   20d70:	add	r3, pc, r3
   20d74:	mov	r0, r3
   20d78:	bl	1296c <puts@plt>
   20d7c:	mvn	r3, #0
   20d80:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20d84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20d88:	ldr	r2, [pc, #608]	; 20ff0 <test_typed_table_with_emptystruct@@Base+0x34c>
   20d8c:	mov	r1, r3
   20d90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d94:	bl	1e830 <_start@@Base+0xbe18>
   20d98:	mov	r3, r0
   20d9c:	cmp	r3, #0
   20da0:	beq	20dbc <test_typed_table_with_emptystruct@@Base+0x118>
   20da4:	ldr	r3, [pc, #584]	; 20ff4 <test_typed_table_with_emptystruct@@Base+0x350>
   20da8:	add	r3, pc, r3
   20dac:	mov	r0, r3
   20db0:	bl	1296c <puts@plt>
   20db4:	mvn	r3, #0
   20db8:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20dc0:	cmp	r3, #0
   20dc4:	bne	20de0 <test_typed_table_with_emptystruct@@Base+0x13c>
   20dc8:	ldr	r3, [pc, #552]	; 20ff8 <test_typed_table_with_emptystruct@@Base+0x354>
   20dcc:	add	r3, pc, r3
   20dd0:	mov	r0, r3
   20dd4:	bl	1296c <puts@plt>
   20dd8:	mvn	r3, #0
   20ddc:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20de0:	ldr	r1, [pc, #520]	; 20ff0 <test_typed_table_with_emptystruct@@Base+0x34c>
   20de4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20de8:	bl	14660 <_start@@Base+0x1c48>
   20dec:	mov	r3, r0
   20df0:	cmp	r3, #0
   20df4:	bne	20e10 <test_typed_table_with_emptystruct@@Base+0x16c>
   20df8:	ldr	r3, [pc, #508]	; 20ffc <test_typed_table_with_emptystruct@@Base+0x358>
   20dfc:	add	r3, pc, r3
   20e00:	mov	r0, r3
   20e04:	bl	1296c <puts@plt>
   20e08:	mvn	r3, #0
   20e0c:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20e10:	mov	r1, #0
   20e14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e18:	bl	14660 <_start@@Base+0x1c48>
   20e1c:	mov	r3, r0
   20e20:	cmp	r3, #0
   20e24:	bne	20e40 <test_typed_table_with_emptystruct@@Base+0x19c>
   20e28:	ldr	r3, [pc, #464]	; 21000 <test_typed_table_with_emptystruct@@Base+0x35c>
   20e2c:	add	r3, pc, r3
   20e30:	mov	r0, r3
   20e34:	bl	1296c <puts@plt>
   20e38:	mvn	r3, #0
   20e3c:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20e40:	mov	r1, #1
   20e44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e48:	bl	14660 <_start@@Base+0x1c48>
   20e4c:	mov	r3, r0
   20e50:	cmp	r3, #0
   20e54:	beq	20e70 <test_typed_table_with_emptystruct@@Base+0x1cc>
   20e58:	ldr	r3, [pc, #420]	; 21004 <test_typed_table_with_emptystruct@@Base+0x360>
   20e5c:	add	r3, pc, r3
   20e60:	mov	r0, r3
   20e64:	bl	1296c <puts@plt>
   20e68:	mvn	r3, #0
   20e6c:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20e70:	mov	r1, #0
   20e74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e78:	bl	145c0 <_start@@Base+0x1ba8>
   20e7c:	mov	r3, r0
   20e80:	cmp	r3, #0
   20e84:	bne	20ea0 <test_typed_table_with_emptystruct@@Base+0x1fc>
   20e88:	ldr	r3, [pc, #376]	; 21008 <test_typed_table_with_emptystruct@@Base+0x364>
   20e8c:	add	r3, pc, r3
   20e90:	mov	r0, r3
   20e94:	bl	1296c <puts@plt>
   20e98:	mvn	r3, #0
   20e9c:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20ea0:	ldr	r3, [pc, #356]	; 2100c <test_typed_table_with_emptystruct@@Base+0x368>
   20ea4:	add	r3, pc, r3
   20ea8:	mov	r1, r3
   20eac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20eb0:	bl	145c0 <_start@@Base+0x1ba8>
   20eb4:	mov	r3, r0
   20eb8:	cmp	r3, #0
   20ebc:	bne	20ed8 <test_typed_table_with_emptystruct@@Base+0x234>
   20ec0:	ldr	r3, [pc, #328]	; 21010 <test_typed_table_with_emptystruct@@Base+0x36c>
   20ec4:	add	r3, pc, r3
   20ec8:	mov	r0, r3
   20ecc:	bl	1296c <puts@plt>
   20ed0:	mvn	r3, #0
   20ed4:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20edc:	bl	14ed4 <_start@@Base+0x24bc>
   20ee0:	mov	r3, r0
   20ee4:	cmp	r3, #0
   20ee8:	beq	20f04 <test_typed_table_with_emptystruct@@Base+0x260>
   20eec:	ldr	r3, [pc, #288]	; 21014 <test_typed_table_with_emptystruct@@Base+0x370>
   20ef0:	add	r3, pc, r3
   20ef4:	mov	r0, r3
   20ef8:	bl	1296c <puts@plt>
   20efc:	mvn	r3, #0
   20f00:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20f04:	mov	r1, #1
   20f08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f0c:	bl	14e74 <_start@@Base+0x245c>
   20f10:	mov	r3, r0
   20f14:	cmp	r3, #0
   20f18:	beq	20f34 <test_typed_table_with_emptystruct@@Base+0x290>
   20f1c:	ldr	r3, [pc, #244]	; 21018 <test_typed_table_with_emptystruct@@Base+0x374>
   20f20:	add	r3, pc, r3
   20f24:	mov	r0, r3
   20f28:	bl	1296c <puts@plt>
   20f2c:	mvn	r3, #0
   20f30:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20f34:	ldr	r3, [pc, #224]	; 2101c <test_typed_table_with_emptystruct@@Base+0x378>
   20f38:	add	r3, pc, r3
   20f3c:	mov	r1, r3
   20f40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f44:	bl	14e14 <_start@@Base+0x23fc>
   20f48:	mov	r3, r0
   20f4c:	cmp	r3, #0
   20f50:	bne	20f6c <test_typed_table_with_emptystruct@@Base+0x2c8>
   20f54:	ldr	r3, [pc, #196]	; 21020 <test_typed_table_with_emptystruct@@Base+0x37c>
   20f58:	add	r3, pc, r3
   20f5c:	mov	r0, r3
   20f60:	bl	1296c <puts@plt>
   20f64:	mvn	r3, #0
   20f68:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20f6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20f70:	bl	14f40 <_start@@Base+0x2528>
   20f74:	mov	r3, r0
   20f78:	cmp	r3, #0
   20f7c:	bne	20f98 <test_typed_table_with_emptystruct@@Base+0x2f4>
   20f80:	ldr	r3, [pc, #156]	; 21024 <test_typed_table_with_emptystruct@@Base+0x380>
   20f84:	add	r3, pc, r3
   20f88:	mov	r0, r3
   20f8c:	bl	1296c <puts@plt>
   20f90:	mvn	r3, #0
   20f94:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20f98:	mov	r1, #0
   20f9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20fa0:	bl	14e74 <_start@@Base+0x245c>
   20fa4:	mov	r3, r0
   20fa8:	cmp	r3, #0
   20fac:	bne	20fc8 <test_typed_table_with_emptystruct@@Base+0x324>
   20fb0:	ldr	r3, [pc, #112]	; 21028 <test_typed_table_with_emptystruct@@Base+0x384>
   20fb4:	add	r3, pc, r3
   20fb8:	mov	r0, r3
   20fbc:	bl	1296c <puts@plt>
   20fc0:	mvn	r3, #0
   20fc4:	b	20fcc <test_typed_table_with_emptystruct@@Base+0x328>
   20fc8:	ldr	r3, [fp, #-16]
   20fcc:	mov	r0, r3
   20fd0:	sub	sp, fp, #8
   20fd4:	pop	{r4, fp, pc}
   20fd8:	andeq	r5, r2, r0, asr #6
   20fdc:	andeq	r0, r0, r8, rrx
   20fe0:	andeq	r0, r1, r8, lsr #22
   20fe4:	andeq	r0, r1, r4, asr #10
   20fe8:	andeq	r0, r1, r8, lsl fp
   20fec:	andeq	r0, r1, r4, lsl #22
   20ff0:	ldrhlt	r3, [sp], #118	; 0x76
   20ff4:	andeq	r0, r1, r8, ror #21
   20ff8:	andeq	r0, r1, ip, ror #21
   20ffc:	ldrdeq	r0, [r1], -r4
   21000:			; <UNDEFINED> instruction: 0x00010ab4
   21004:	muleq	r1, r8, sl
   21008:	andeq	r0, r1, ip, lsl #21
   2100c:			; <UNDEFINED> instruction: 0x000103bc
   21010:	andeq	r0, r1, r8, ror sl
   21014:	andeq	r0, r1, r8, ror sl
   21018:	andeq	r0, r1, r8, ror #20
   2101c:	andeq	r0, r1, r8, lsr #6
   21020:	andeq	r0, r1, r8, asr sl
   21024:	andeq	r0, r1, r4, ror #20
   21028:	andeq	r0, r1, ip, asr #20

0002102c <verify_monster@@Base>:
   2102c:	push	{r4, fp, lr}
   21030:	add	fp, sp, #8
   21034:	sub	sp, sp, #124	; 0x7c
   21038:	str	r0, [fp, #-128]	; 0xffffff80
   2103c:	sub	sp, sp, #48	; 0x30
   21040:	mov	r3, sp
   21044:	add	r3, r3, #15
   21048:	lsr	r3, r3, #4
   2104c:	lsl	r4, r3, #4
   21050:	ldr	r3, [pc, #1500]	; 21634 <verify_monster@@Base+0x608>
   21054:	add	r3, pc, r3
   21058:	sub	ip, fp, #104	; 0x68
   2105c:	mov	lr, r3
   21060:	ldm	lr!, {r0, r1, r2, r3}
   21064:	stmia	ip!, {r0, r1, r2, r3}
   21068:	ldr	r3, [lr]
   2106c:	str	r3, [ip]
   21070:	ldr	r3, [pc, #1472]	; 21638 <verify_monster@@Base+0x60c>
   21074:	add	r3, pc, r3
   21078:	sub	ip, fp, #120	; 0x78
   2107c:	ldm	r3, {r0, r1, r2, r3}
   21080:	stm	ip, {r0, r1, r2, r3}
   21084:	mov	r1, #0
   21088:	ldr	r0, [fp, #-128]	; 0xffffff80
   2108c:	bl	145c0 <_start@@Base+0x1ba8>
   21090:	mov	r3, r0
   21094:	cmp	r3, #0
   21098:	bne	210b4 <verify_monster@@Base+0x88>
   2109c:	ldr	r3, [pc, #1432]	; 2163c <verify_monster@@Base+0x610>
   210a0:	add	r3, pc, r3
   210a4:	mov	r0, r3
   210a8:	bl	1296c <puts@plt>
   210ac:	mvn	r3, #0
   210b0:	b	221dc <verify_monster@@Base+0x11b0>
   210b4:	ldr	r3, [pc, #1412]	; 21640 <verify_monster@@Base+0x614>
   210b8:	add	r3, pc, r3
   210bc:	mov	r1, r3
   210c0:	ldr	r0, [fp, #-128]	; 0xffffff80
   210c4:	bl	145c0 <_start@@Base+0x1ba8>
   210c8:	mov	r3, r0
   210cc:	cmp	r3, #0
   210d0:	bne	210ec <verify_monster@@Base+0xc0>
   210d4:	ldr	r3, [pc, #1384]	; 21644 <verify_monster@@Base+0x618>
   210d8:	add	r3, pc, r3
   210dc:	mov	r0, r3
   210e0:	bl	1296c <puts@plt>
   210e4:	mvn	r3, #0
   210e8:	b	221dc <verify_monster@@Base+0x11b0>
   210ec:	ldr	r3, [pc, #1364]	; 21648 <verify_monster@@Base+0x61c>
   210f0:	add	r3, pc, r3
   210f4:	mov	r1, r3
   210f8:	ldr	r0, [fp, #-128]	; 0xffffff80
   210fc:	bl	145c0 <_start@@Base+0x1ba8>
   21100:	mov	r3, r0
   21104:	cmp	r3, #0
   21108:	bne	21124 <verify_monster@@Base+0xf8>
   2110c:	ldr	r3, [pc, #1336]	; 2164c <verify_monster@@Base+0x620>
   21110:	add	r3, pc, r3
   21114:	mov	r0, r3
   21118:	bl	1296c <puts@plt>
   2111c:	mvn	r3, #0
   21120:	b	221dc <verify_monster@@Base+0x11b0>
   21124:	ldr	r3, [pc, #1316]	; 21650 <verify_monster@@Base+0x624>
   21128:	add	r3, pc, r3
   2112c:	mov	r1, r3
   21130:	ldr	r0, [fp, #-128]	; 0xffffff80
   21134:	bl	145c0 <_start@@Base+0x1ba8>
   21138:	mov	r3, r0
   2113c:	cmp	r3, #0
   21140:	beq	2115c <verify_monster@@Base+0x130>
   21144:	ldr	r3, [pc, #1288]	; 21654 <verify_monster@@Base+0x628>
   21148:	add	r3, pc, r3
   2114c:	mov	r0, r3
   21150:	bl	1296c <puts@plt>
   21154:	mvn	r3, #0
   21158:	b	221dc <verify_monster@@Base+0x11b0>
   2115c:	ldr	r3, [pc, #1268]	; 21658 <verify_monster@@Base+0x62c>
   21160:	add	r3, pc, r3
   21164:	mov	r1, r3
   21168:	ldr	r0, [fp, #-128]	; 0xffffff80
   2116c:	bl	145c0 <_start@@Base+0x1ba8>
   21170:	mov	r3, r0
   21174:	cmp	r3, #0
   21178:	bne	21194 <verify_monster@@Base+0x168>
   2117c:	ldr	r3, [pc, #1240]	; 2165c <verify_monster@@Base+0x630>
   21180:	add	r3, pc, r3
   21184:	mov	r0, r3
   21188:	bl	1296c <puts@plt>
   2118c:	mvn	r3, #0
   21190:	b	221dc <verify_monster@@Base+0x11b0>
   21194:	ldr	r0, [fp, #-128]	; 0xffffff80
   21198:	bl	159f0 <_start@@Base+0x2fd8>
   2119c:	str	r0, [fp, #-20]	; 0xffffffec
   211a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   211a4:	cmp	r3, #0
   211a8:	bne	211c4 <verify_monster@@Base+0x198>
   211ac:	ldr	r3, [pc, #1196]	; 21660 <verify_monster@@Base+0x634>
   211b0:	add	r3, pc, r3
   211b4:	mov	r0, r3
   211b8:	bl	1296c <puts@plt>
   211bc:	mvn	r3, #0
   211c0:	b	221dc <verify_monster@@Base+0x11b0>
   211c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   211c8:	bl	15c20 <_start@@Base+0x3208>
   211cc:	mov	r3, r0
   211d0:	cmp	r3, #80	; 0x50
   211d4:	beq	211f0 <verify_monster@@Base+0x1c4>
   211d8:	ldr	r3, [pc, #1156]	; 21664 <verify_monster@@Base+0x638>
   211dc:	add	r3, pc, r3
   211e0:	mov	r0, r3
   211e4:	bl	1296c <puts@plt>
   211e8:	mvn	r3, #0
   211ec:	b	221dc <verify_monster@@Base+0x11b0>
   211f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   211f4:	bl	15a5c <_start@@Base+0x3044>
   211f8:	str	r0, [fp, #-24]	; 0xffffffe8
   211fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21200:	cmp	r3, #0
   21204:	bne	21220 <verify_monster@@Base+0x1f4>
   21208:	ldr	r3, [pc, #1112]	; 21668 <verify_monster@@Base+0x63c>
   2120c:	add	r3, pc, r3
   21210:	mov	r0, r3
   21214:	bl	1296c <puts@plt>
   21218:	mvn	r3, #0
   2121c:	b	221dc <verify_monster@@Base+0x11b0>
   21220:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21224:	and	r3, r3, #15
   21228:	cmp	r3, #0
   2122c:	beq	21240 <verify_monster@@Base+0x214>
   21230:	ldr	r3, [pc, #1076]	; 2166c <verify_monster@@Base+0x640>
   21234:	add	r3, pc, r3
   21238:	mov	r0, r3
   2123c:	bl	1296c <puts@plt>
   21240:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21244:	bl	14bd8 <_start@@Base+0x21c0>
   21248:	vmov.f32	s14, s0
   2124c:	vldr	s15, [pc, #980]	; 21628 <verify_monster@@Base+0x5fc>
   21250:	vcmp.f32	s14, s15
   21254:	vmrs	APSR_nzcv, fpscr
   21258:	beq	21274 <verify_monster@@Base+0x248>
   2125c:	ldr	r3, [pc, #1036]	; 21670 <verify_monster@@Base+0x644>
   21260:	add	r3, pc, r3
   21264:	mov	r0, r3
   21268:	bl	1296c <puts@plt>
   2126c:	mvn	r3, #0
   21270:	b	221dc <verify_monster@@Base+0x11b0>
   21274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21278:	vldr	s15, [r3]
   2127c:	vldr	s14, [pc, #936]	; 2162c <verify_monster@@Base+0x600>
   21280:	vcmp.f32	s15, s14
   21284:	vmrs	APSR_nzcv, fpscr
   21288:	bne	212bc <verify_monster@@Base+0x290>
   2128c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21290:	vldr	s15, [r3, #4]
   21294:	vldr	s14, [pc, #916]	; 21630 <verify_monster@@Base+0x604>
   21298:	vcmp.f32	s15, s14
   2129c:	vmrs	APSR_nzcv, fpscr
   212a0:	bne	212bc <verify_monster@@Base+0x290>
   212a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   212a8:	vldr	s15, [r3, #8]
   212ac:	vldr	s14, [pc, #884]	; 21628 <verify_monster@@Base+0x5fc>
   212b0:	vcmp.f32	s15, s14
   212b4:	vmrs	APSR_nzcv, fpscr
   212b8:	beq	212d4 <verify_monster@@Base+0x2a8>
   212bc:	ldr	r3, [pc, #944]	; 21674 <verify_monster@@Base+0x648>
   212c0:	add	r3, pc, r3
   212c4:	mov	r0, r3
   212c8:	bl	1296c <puts@plt>
   212cc:	mvn	r3, #0
   212d0:	b	221dc <verify_monster@@Base+0x11b0>
   212d4:	mov	r0, r4
   212d8:	bl	1a89c <_start@@Base+0x7e84>
   212dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   212e0:	mov	r0, r4
   212e4:	bl	1a7c0 <_start@@Base+0x7da8>
   212e8:	vldr	s15, [r4]
   212ec:	vldr	s14, [pc, #824]	; 2162c <verify_monster@@Base+0x600>
   212f0:	vcmp.f32	s15, s14
   212f4:	vmrs	APSR_nzcv, fpscr
   212f8:	bne	21324 <verify_monster@@Base+0x2f8>
   212fc:	vldr	s15, [r4, #4]
   21300:	vldr	s14, [pc, #808]	; 21630 <verify_monster@@Base+0x604>
   21304:	vcmp.f32	s15, s14
   21308:	vmrs	APSR_nzcv, fpscr
   2130c:	bne	21324 <verify_monster@@Base+0x2f8>
   21310:	vldr	s15, [r4, #8]
   21314:	vldr	s14, [pc, #780]	; 21628 <verify_monster@@Base+0x5fc>
   21318:	vcmp.f32	s15, s14
   2131c:	vmrs	APSR_nzcv, fpscr
   21320:	beq	2133c <verify_monster@@Base+0x310>
   21324:	ldr	r3, [pc, #844]	; 21678 <verify_monster@@Base+0x64c>
   21328:	add	r3, pc, r3
   2132c:	mov	r0, r3
   21330:	bl	1296c <puts@plt>
   21334:	mvn	r3, #0
   21338:	b	221dc <verify_monster@@Base+0x11b0>
   2133c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21340:	vldr	d7, [r3, #16]
   21344:	vcmp.f64	d7, #0.0
   21348:	vmrs	APSR_nzcv, fpscr
   2134c:	bne	2138c <verify_monster@@Base+0x360>
   21350:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21354:	vldr	d7, [r3, #16]
   21358:	vcmp.f64	d7, #0.0
   2135c:	vmrs	APSR_nzcv, fpscr
   21360:	bne	2138c <verify_monster@@Base+0x360>
   21364:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21368:	add	r3, r3, #26
   2136c:	mov	r2, #4
   21370:	ldr	r1, [pc, #772]	; 2167c <verify_monster@@Base+0x650>
   21374:	add	r1, pc, r1
   21378:	mov	r0, r3
   2137c:	bl	1293c <memcmp@plt>
   21380:	mov	r3, r0
   21384:	cmp	r3, #0
   21388:	beq	213a4 <verify_monster@@Base+0x378>
   2138c:	ldr	r3, [pc, #748]	; 21680 <verify_monster@@Base+0x654>
   21390:	add	r3, pc, r3
   21394:	mov	r0, r3
   21398:	bl	1296c <puts@plt>
   2139c:	mvn	r3, #0
   213a0:	b	221dc <verify_monster@@Base+0x11b0>
   213a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   213a8:	bl	162b8 <_start@@Base+0x38a0>
   213ac:	str	r0, [fp, #-28]	; 0xffffffe4
   213b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   213b4:	cmp	r3, #0
   213b8:	beq	213dc <verify_monster@@Base+0x3b0>
   213bc:	ldr	r3, [pc, #704]	; 21684 <verify_monster@@Base+0x658>
   213c0:	add	r3, pc, r3
   213c4:	mov	r1, r3
   213c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   213cc:	bl	1290c <strcmp@plt>
   213d0:	mov	r3, r0
   213d4:	cmp	r3, #0
   213d8:	beq	213f4 <verify_monster@@Base+0x3c8>
   213dc:	ldr	r3, [pc, #676]	; 21688 <verify_monster@@Base+0x65c>
   213e0:	add	r3, pc, r3
   213e4:	mov	r0, r3
   213e8:	bl	1296c <puts@plt>
   213ec:	mvn	r3, #0
   213f0:	b	221dc <verify_monster@@Base+0x11b0>
   213f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   213f8:	bl	162b8 <_start@@Base+0x38a0>
   213fc:	str	r0, [fp, #-32]	; 0xffffffe0
   21400:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21404:	bl	1353c <_start@@Base+0xb24>
   21408:	mov	r3, r0
   2140c:	cmp	r3, #9
   21410:	bne	21428 <verify_monster@@Base+0x3fc>
   21414:	ldr	r0, [fp, #-32]	; 0xffffffe0
   21418:	bl	1353c <_start@@Base+0xb24>
   2141c:	mov	r3, r0
   21420:	cmp	r3, #9
   21424:	beq	21440 <verify_monster@@Base+0x414>
   21428:	ldr	r3, [pc, #604]	; 2168c <verify_monster@@Base+0x660>
   2142c:	add	r3, pc, r3
   21430:	mov	r0, r3
   21434:	bl	1296c <puts@plt>
   21438:	mvn	r3, #0
   2143c:	b	221dc <verify_monster@@Base+0x11b0>
   21440:	ldr	r0, [fp, #-20]	; 0xffffffec
   21444:	bl	170e4 <_start@@Base+0x46cc>
   21448:	mov	r3, r0
   2144c:	cmp	r3, #2
   21450:	beq	2146c <verify_monster@@Base+0x440>
   21454:	ldr	r3, [pc, #564]	; 21690 <verify_monster@@Base+0x664>
   21458:	add	r3, pc, r3
   2145c:	mov	r0, r3
   21460:	bl	1296c <puts@plt>
   21464:	mvn	r3, #0
   21468:	b	221dc <verify_monster@@Base+0x11b0>
   2146c:	mov	r0, #2
   21470:	bl	147b0 <_start@@Base+0x1d98>
   21474:	mov	r2, r0
   21478:	ldr	r3, [pc, #532]	; 21694 <verify_monster@@Base+0x668>
   2147c:	add	r3, pc, r3
   21480:	mov	r1, r3
   21484:	mov	r0, r2
   21488:	bl	1290c <strcmp@plt>
   2148c:	mov	r3, r0
   21490:	cmp	r3, #0
   21494:	beq	214b0 <verify_monster@@Base+0x484>
   21498:	ldr	r3, [pc, #504]	; 21698 <verify_monster@@Base+0x66c>
   2149c:	add	r3, pc, r3
   214a0:	mov	r0, r3
   214a4:	bl	1296c <puts@plt>
   214a8:	mvn	r3, #0
   214ac:	b	221dc <verify_monster@@Base+0x11b0>
   214b0:	mov	r0, #2
   214b4:	bl	1482c <_start@@Base+0x1e14>
   214b8:	mov	r3, r0
   214bc:	cmp	r3, #0
   214c0:	bne	214dc <verify_monster@@Base+0x4b0>
   214c4:	ldr	r3, [pc, #464]	; 2169c <verify_monster@@Base+0x670>
   214c8:	add	r3, pc, r3
   214cc:	mov	r0, r3
   214d0:	bl	1296c <puts@plt>
   214d4:	mvn	r3, #0
   214d8:	b	221dc <verify_monster@@Base+0x11b0>
   214dc:	mov	r0, #1
   214e0:	bl	1482c <_start@@Base+0x1e14>
   214e4:	mov	r3, r0
   214e8:	cmp	r3, #0
   214ec:	bne	21508 <verify_monster@@Base+0x4dc>
   214f0:	ldr	r3, [pc, #424]	; 216a0 <verify_monster@@Base+0x674>
   214f4:	add	r3, pc, r3
   214f8:	mov	r0, r3
   214fc:	bl	1296c <puts@plt>
   21500:	mvn	r3, #0
   21504:	b	221dc <verify_monster@@Base+0x11b0>
   21508:	mov	r0, #4
   2150c:	bl	1482c <_start@@Base+0x1e14>
   21510:	mov	r3, r0
   21514:	cmp	r3, #0
   21518:	beq	21534 <verify_monster@@Base+0x508>
   2151c:	ldr	r3, [pc, #384]	; 216a4 <verify_monster@@Base+0x678>
   21520:	add	r3, pc, r3
   21524:	mov	r0, r3
   21528:	bl	1296c <puts@plt>
   2152c:	mvn	r3, #0
   21530:	b	221dc <verify_monster@@Base+0x11b0>
   21534:	mov	r0, #8
   21538:	bl	1482c <_start@@Base+0x1e14>
   2153c:	mov	r3, r0
   21540:	cmp	r3, #0
   21544:	bne	21560 <verify_monster@@Base+0x534>
   21548:	ldr	r3, [pc, #344]	; 216a8 <verify_monster@@Base+0x67c>
   2154c:	add	r3, pc, r3
   21550:	mov	r0, r3
   21554:	bl	1296c <puts@plt>
   21558:	mvn	r3, #0
   2155c:	b	221dc <verify_monster@@Base+0x11b0>
   21560:	mov	r0, #9
   21564:	bl	1482c <_start@@Base+0x1e14>
   21568:	mov	r3, r0
   2156c:	cmp	r3, #0
   21570:	beq	2158c <verify_monster@@Base+0x560>
   21574:	ldr	r3, [pc, #304]	; 216ac <verify_monster@@Base+0x680>
   21578:	add	r3, pc, r3
   2157c:	mov	r0, r3
   21580:	bl	1296c <puts@plt>
   21584:	mvn	r3, #0
   21588:	b	221dc <verify_monster@@Base+0x11b0>
   2158c:	mov	r0, #1
   21590:	bl	14da0 <_start@@Base+0x2388>
   21594:	mov	r3, r0
   21598:	cmp	r3, #0
   2159c:	bne	215b8 <verify_monster@@Base+0x58c>
   215a0:	ldr	r3, [pc, #264]	; 216b0 <verify_monster@@Base+0x684>
   215a4:	add	r3, pc, r3
   215a8:	mov	r0, r3
   215ac:	bl	1296c <puts@plt>
   215b0:	mvn	r3, #0
   215b4:	b	221dc <verify_monster@@Base+0x11b0>
   215b8:	mov	r0, #42	; 0x2a
   215bc:	bl	14da0 <_start@@Base+0x2388>
   215c0:	mov	r3, r0
   215c4:	cmp	r3, #0
   215c8:	beq	215e4 <verify_monster@@Base+0x5b8>
   215cc:	ldr	r3, [pc, #224]	; 216b4 <verify_monster@@Base+0x688>
   215d0:	add	r3, pc, r3
   215d4:	mov	r0, r3
   215d8:	bl	1296c <puts@plt>
   215dc:	mvn	r3, #0
   215e0:	b	221dc <verify_monster@@Base+0x11b0>
   215e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   215e8:	bl	172bc <_start@@Base+0x48a4>
   215ec:	str	r0, [fp, #-36]	; 0xffffffdc
   215f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   215f4:	bl	13958 <_start@@Base+0xf40>
   215f8:	mov	r3, r0
   215fc:	cmp	r3, #10
   21600:	beq	2161c <verify_monster@@Base+0x5f0>
   21604:	ldr	r3, [pc, #172]	; 216b8 <verify_monster@@Base+0x68c>
   21608:	add	r3, pc, r3
   2160c:	mov	r0, r3
   21610:	bl	1296c <puts@plt>
   21614:	mvn	r3, #0
   21618:	b	221dc <verify_monster@@Base+0x11b0>
   2161c:	mov	r3, #0
   21620:	str	r3, [fp, #-16]
   21624:	b	217e4 <verify_monster@@Base+0x7b8>
   21628:	subgt	ip, ip, sp, asr #25
   2162c:	svccc	0x00800000
   21630:	andmi	r0, r0, r0
   21634:	andeq	r1, r1, r8, asr #5
   21638:			; <UNDEFINED> instruction: 0x000112bc
   2163c:	andeq	r0, r1, ip, ror r9
   21640:	ldrdeq	pc, [r0], -r0
   21644:	andeq	r0, r1, r0, ror r9
   21648:	andeq	r0, r1, r4, lsl #19
   2164c:	andeq	r0, r1, ip, ror #18
   21650:	andeq	r0, r1, r8, lsl #19
   21654:	andeq	r0, r1, r0, ror r9
   21658:	andeq	pc, r0, r8, lsr #20
   2165c:	andeq	r0, r1, ip, ror #18
   21660:	andeq	r0, r1, r0, lsl #4
   21664:			; <UNDEFINED> instruction: 0x000102b4
   21668:	andeq	r0, r1, r4, lsl r9
   2166c:	andeq	r0, r1, r0, lsl #18
   21670:	strdeq	r0, [r1], -ip
   21674:	andeq	r0, r1, r0, asr #17
   21678:	andeq	r0, r1, r0, ror r8
   2167c:	andeq	r4, r2, r0, lsl sp
   21680:	andeq	r0, r1, ip, lsr #16
   21684:	andeq	r0, r1, r0, asr #3
   21688:	andeq	r0, r1, r0, lsl #16
   2168c:	andeq	r0, r1, r8, asr #15
   21690:			; <UNDEFINED> instruction: 0x000107b8
   21694:	andeq	pc, r0, ip, ror r6	; <UNPREDICTABLE>
   21698:	muleq	r1, r4, r7
   2169c:	muleq	r1, r8, r7
   216a0:	andeq	r0, r1, r8, lsr #15
   216a4:			; <UNDEFINED> instruction: 0x000107b4
   216a8:			; <UNDEFINED> instruction: 0x000107b4
   216ac:	andeq	r0, r1, ip, asr r7
   216b0:	muleq	r1, r8, r7
   216b4:	muleq	r1, r0, r7
   216b8:	andeq	r0, r1, ip, ror r7
   216bc:	ldrdeq	r0, [r1], -ip
   216c0:	andeq	r0, r1, ip, lsr #11
   216c4:	muleq	r1, r4, r5
   216c8:	andeq	r0, r1, ip, ror r5
   216cc:	andeq	pc, r0, ip, lsr ip	; <UNPREDICTABLE>
   216d0:	andeq	r0, r1, r8, lsr r5
   216d4:	strdeq	r0, [r1], -r8
   216d8:			; <UNDEFINED> instruction: 0x000104b0
   216dc:	andeq	r0, r1, r8, lsl #9
   216e0:	andeq	r2, r1, ip, asr #11
   216e4:	muleq	r0, r6, r2
   216e8:	andeq	r0, r1, ip, ror #8
   216ec:	andeq	r0, r1, ip, asr #9
   216f0:			; <UNDEFINED> instruction: 0x000104b8
   216f4:	andeq	r0, r1, r0, lsr #9
   216f8:	andeq	r0, r1, r0, lsl #9
   216fc:	andeq	r0, r1, ip, lsr r4
   21700:	andeq	r0, r1, r0, ror r4
   21704:	andeq	r0, r1, r0, ror #8
   21708:	andeq	r0, r1, r4, asr #8
   2170c:	andeq	r0, r1, r4, lsr r4
   21710:	andeq	r0, r1, ip, lsl r4
   21714:	andeq	r0, r1, r4, lsr r3
   21718:	andeq	r0, r1, ip, ror #7
   2171c:	andeq	r0, r1, r8, asr r3
   21720:			; <UNDEFINED> instruction: 0x000103b8
   21724:	andeq	r0, r1, ip, lsr #6
   21728:	andeq	r0, r1, r4, lsl #7
   2172c:	andeq	r0, r1, r8, lsr #5
   21730:	andeq	r0, r1, r4, asr r3
   21734:	andeq	r0, r1, r4, asr #6
   21738:	andeq	r0, r1, r8, asr #6
   2173c:	andeq	r0, r1, r0, lsr r3
   21740:	andeq	r0, r1, ip, lsl #6
   21744:	andeq	r0, r1, ip, lsl #6
   21748:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   2174c:	andeq	r0, r1, r8, ror #5
   21750:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   21754:			; <UNDEFINED> instruction: 0x000102bc
   21758:	andeq	r0, r1, r0, lsr #5
   2175c:	andeq	r0, r1, r4, ror #4
   21760:	andeq	r0, r1, r8, lsr r2
   21764:	andeq	pc, r0, ip, lsl #31
   21768:	andeq	r0, r1, r4, lsl r2
   2176c:	andeq	r0, r1, r4, lsl #4
   21770:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   21774:	andeq	r0, r1, r4, ror #3
   21778:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   2177c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   21780:	muleq	r1, r4, r1
   21784:	strdeq	pc, [r0], -ip
   21788:	andeq	r0, r1, r8, lsl #3
   2178c:	muleq	r1, r8, r1
   21790:	andeq	r0, r1, r0, lsl #3
   21794:	andeq	r0, r1, r0, asr #2
   21798:	ldr	r1, [fp, #-16]
   2179c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   217a0:	bl	13980 <_start@@Base+0xf68>
   217a4:	mov	r3, r0
   217a8:	mov	r2, r3
   217ac:	ldr	r3, [fp, #-16]
   217b0:	cmp	r2, r3
   217b4:	beq	217d8 <verify_monster@@Base+0x7ac>
   217b8:	ldr	r3, [fp, #-16]
   217bc:	mov	r1, r3
   217c0:	ldr	r3, [pc, #-268]	; 216bc <verify_monster@@Base+0x690>
   217c4:	add	r3, pc, r3
   217c8:	mov	r0, r3
   217cc:	bl	12918 <printf@plt>
   217d0:	mvn	r3, #0
   217d4:	b	221dc <verify_monster@@Base+0x11b0>
   217d8:	ldr	r3, [fp, #-16]
   217dc:	add	r3, r3, #1
   217e0:	str	r3, [fp, #-16]
   217e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   217e8:	bl	13958 <_start@@Base+0xf40>
   217ec:	mov	r2, r0
   217f0:	ldr	r3, [fp, #-16]
   217f4:	cmp	r2, r3
   217f8:	bhi	21798 <verify_monster@@Base+0x76c>
   217fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   21800:	bl	160e0 <_start@@Base+0x36c8>
   21804:	mov	r3, r0
   21808:	cmp	r3, #150	; 0x96
   2180c:	beq	21828 <verify_monster@@Base+0x7fc>
   21810:	ldr	r3, [pc, #-344]	; 216c0 <verify_monster@@Base+0x694>
   21814:	add	r3, pc, r3
   21818:	mov	r0, r3
   2181c:	bl	1296c <puts@plt>
   21820:	mvn	r3, #0
   21824:	b	221dc <verify_monster@@Base+0x11b0>
   21828:	ldr	r0, [fp, #-20]	; 0xffffffec
   2182c:	bl	161d8 <_start@@Base+0x37c0>
   21830:	mov	r3, r0
   21834:	cmp	r3, #0
   21838:	beq	21854 <verify_monster@@Base+0x828>
   2183c:	ldr	r3, [pc, #-384]	; 216c4 <verify_monster@@Base+0x698>
   21840:	add	r3, pc, r3
   21844:	mov	r0, r3
   21848:	bl	1296c <puts@plt>
   2184c:	mvn	r3, #0
   21850:	b	221dc <verify_monster@@Base+0x11b0>
   21854:	ldr	r0, [fp, #-20]	; 0xffffffec
   21858:	bl	15d18 <_start@@Base+0x3300>
   2185c:	mov	r3, r0
   21860:	cmp	r3, #0
   21864:	bne	21880 <verify_monster@@Base+0x854>
   21868:	ldr	r3, [pc, #-424]	; 216c8 <verify_monster@@Base+0x69c>
   2186c:	add	r3, pc, r3
   21870:	mov	r0, r3
   21874:	bl	1296c <puts@plt>
   21878:	mvn	r3, #0
   2187c:	b	221dc <verify_monster@@Base+0x11b0>
   21880:	ldr	r0, [fp, #-20]	; 0xffffffec
   21884:	bl	15b44 <_start@@Base+0x312c>
   21888:	mov	r3, r0
   2188c:	cmp	r3, #0
   21890:	bne	218ac <verify_monster@@Base+0x880>
   21894:	ldr	r3, [pc, #-464]	; 216cc <verify_monster@@Base+0x6a0>
   21898:	add	r3, pc, r3
   2189c:	mov	r0, r3
   218a0:	bl	1296c <puts@plt>
   218a4:	mvn	r3, #0
   218a8:	b	221dc <verify_monster@@Base+0x11b0>
   218ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   218b0:	bl	17c18 <_start@@Base+0x5200>
   218b4:	str	r0, [fp, #-40]	; 0xffffffd8
   218b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   218bc:	bl	1494c <_start@@Base+0x1f34>
   218c0:	mov	r3, r0
   218c4:	cmp	r3, #5
   218c8:	beq	218e4 <verify_monster@@Base+0x8b8>
   218cc:	ldr	r3, [pc, #-516]	; 216d0 <verify_monster@@Base+0x6a4>
   218d0:	add	r3, pc, r3
   218d4:	mov	r0, r3
   218d8:	bl	1296c <puts@plt>
   218dc:	mvn	r3, #0
   218e0:	b	221dc <verify_monster@@Base+0x11b0>
   218e4:	mov	r3, #0
   218e8:	str	r3, [fp, #-16]
   218ec:	b	219a0 <verify_monster@@Base+0x974>
   218f0:	ldr	r1, [fp, #-16]
   218f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   218f8:	bl	148bc <_start@@Base+0x1ea4>
   218fc:	str	r0, [fp, #-44]	; 0xffffffd4
   21900:	ldr	r3, [fp, #-16]
   21904:	lsl	r3, r3, #2
   21908:	sub	r2, fp, #12
   2190c:	add	r3, r2, r3
   21910:	sub	r3, r3, #92	; 0x5c
   21914:	ldrsh	r4, [r3]
   21918:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2191c:	bl	14990 <_start@@Base+0x1f78>
   21920:	mov	r3, r0
   21924:	cmp	r4, r3
   21928:	beq	2194c <verify_monster@@Base+0x920>
   2192c:	ldr	r3, [fp, #-16]
   21930:	mov	r1, r3
   21934:	ldr	r3, [pc, #-616]	; 216d4 <verify_monster@@Base+0x6a8>
   21938:	add	r3, pc, r3
   2193c:	mov	r0, r3
   21940:	bl	12918 <printf@plt>
   21944:	mvn	r3, #0
   21948:	b	221dc <verify_monster@@Base+0x11b0>
   2194c:	ldr	r3, [fp, #-16]
   21950:	lsl	r3, r3, #2
   21954:	sub	r2, fp, #12
   21958:	add	r3, r2, r3
   2195c:	ldrsb	r4, [r3, #-90]	; 0xffffffa6
   21960:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21964:	bl	149d0 <_start@@Base+0x1fb8>
   21968:	mov	r3, r0
   2196c:	cmp	r4, r3
   21970:	beq	21994 <verify_monster@@Base+0x968>
   21974:	ldr	r3, [fp, #-16]
   21978:	mov	r1, r3
   2197c:	ldr	r3, [pc, #-684]	; 216d8 <verify_monster@@Base+0x6ac>
   21980:	add	r3, pc, r3
   21984:	mov	r0, r3
   21988:	bl	12918 <printf@plt>
   2198c:	mvn	r3, #0
   21990:	b	221dc <verify_monster@@Base+0x11b0>
   21994:	ldr	r3, [fp, #-16]
   21998:	add	r3, r3, #1
   2199c:	str	r3, [fp, #-16]
   219a0:	ldr	r3, [fp, #-16]
   219a4:	cmp	r3, #4
   219a8:	bls	218f0 <verify_monster@@Base+0x8c4>
   219ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   219b0:	bl	173c4 <_start@@Base+0x49ac>
   219b4:	str	r0, [fp, #-48]	; 0xffffffd0
   219b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   219bc:	bl	158bc <_start@@Base+0x2ea4>
   219c0:	mov	r3, r0
   219c4:	cmp	r3, #8
   219c8:	beq	219e4 <verify_monster@@Base+0x9b8>
   219cc:	ldr	r3, [pc, #-760]	; 216dc <verify_monster@@Base+0x6b0>
   219d0:	add	r3, pc, r3
   219d4:	mov	r0, r3
   219d8:	bl	1296c <puts@plt>
   219dc:	mvn	r3, #0
   219e0:	b	221dc <verify_monster@@Base+0x11b0>
   219e4:	mov	r1, #5
   219e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   219ec:	bl	15900 <_start@@Base+0x2ee8>
   219f0:	str	r0, [fp, #-52]	; 0xffffffcc
   219f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   219f8:	cmp	r3, #0
   219fc:	bne	21a20 <verify_monster@@Base+0x9f4>
   21a00:	ldr	r3, [pc, #-808]	; 216e0 <verify_monster@@Base+0x6b4>
   21a04:	add	r3, pc, r3
   21a08:	ldr	r2, [pc, #-812]	; 216e4 <verify_monster@@Base+0x6b8>
   21a0c:	ldr	r1, [pc, #-812]	; 216e8 <verify_monster@@Base+0x6bc>
   21a10:	add	r1, pc, r1
   21a14:	ldr	r0, [pc, #-816]	; 216ec <verify_monster@@Base+0x6c0>
   21a18:	add	r0, pc, r0
   21a1c:	bl	12a08 <__assert_fail@plt>
   21a20:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21a24:	bl	162b8 <_start@@Base+0x38a0>
   21a28:	str	r0, [fp, #-28]	; 0xffffffe4
   21a2c:	ldr	r3, [pc, #-836]	; 216f0 <verify_monster@@Base+0x6c4>
   21a30:	add	r3, pc, r3
   21a34:	mov	r1, r3
   21a38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21a3c:	bl	1290c <strcmp@plt>
   21a40:	mov	r3, r0
   21a44:	cmp	r3, #0
   21a48:	beq	21a64 <verify_monster@@Base+0xa38>
   21a4c:	ldr	r3, [pc, #-864]	; 216f4 <verify_monster@@Base+0x6c8>
   21a50:	add	r3, pc, r3
   21a54:	mov	r0, r3
   21a58:	bl	12918 <printf@plt>
   21a5c:	mvn	r3, #0
   21a60:	b	221dc <verify_monster@@Base+0x11b0>
   21a64:	mov	r1, #1
   21a68:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21a6c:	bl	15900 <_start@@Base+0x2ee8>
   21a70:	str	r0, [fp, #-56]	; 0xffffffc8
   21a74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21a78:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21a7c:	cmp	r2, r3
   21a80:	beq	21a9c <verify_monster@@Base+0xa70>
   21a84:	ldr	r3, [pc, #-916]	; 216f8 <verify_monster@@Base+0x6cc>
   21a88:	add	r3, pc, r3
   21a8c:	mov	r0, r3
   21a90:	bl	1296c <puts@plt>
   21a94:	mvn	r3, #0
   21a98:	b	221dc <verify_monster@@Base+0x11b0>
   21a9c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   21aa0:	bl	162b8 <_start@@Base+0x38a0>
   21aa4:	str	r0, [fp, #-28]	; 0xffffffe4
   21aa8:	ldr	r3, [pc, #-948]	; 216fc <verify_monster@@Base+0x6d0>
   21aac:	add	r3, pc, r3
   21ab0:	mov	r1, r3
   21ab4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21ab8:	bl	1290c <strcmp@plt>
   21abc:	mov	r3, r0
   21ac0:	cmp	r3, #0
   21ac4:	beq	21ae4 <verify_monster@@Base+0xab8>
   21ac8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21acc:	ldr	r3, [pc, #-980]	; 21700 <verify_monster@@Base+0x6d4>
   21ad0:	add	r3, pc, r3
   21ad4:	mov	r0, r3
   21ad8:	bl	12918 <printf@plt>
   21adc:	mvn	r3, #0
   21ae0:	b	221dc <verify_monster@@Base+0x11b0>
   21ae4:	mov	r1, #2
   21ae8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21aec:	bl	15900 <_start@@Base+0x2ee8>
   21af0:	str	r0, [fp, #-52]	; 0xffffffcc
   21af4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21af8:	bl	162b8 <_start@@Base+0x38a0>
   21afc:	str	r0, [fp, #-28]	; 0xffffffe4
   21b00:	ldr	r3, [pc, #-1028]	; 21704 <verify_monster@@Base+0x6d8>
   21b04:	add	r3, pc, r3
   21b08:	mov	r1, r3
   21b0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21b10:	bl	1290c <strcmp@plt>
   21b14:	mov	r3, r0
   21b18:	cmp	r3, #0
   21b1c:	beq	21b3c <verify_monster@@Base+0xb10>
   21b20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21b24:	ldr	r3, [pc, #-1060]	; 21708 <verify_monster@@Base+0x6dc>
   21b28:	add	r3, pc, r3
   21b2c:	mov	r0, r3
   21b30:	bl	12918 <printf@plt>
   21b34:	mvn	r3, #0
   21b38:	b	221dc <verify_monster@@Base+0x11b0>
   21b3c:	mov	r1, #0
   21b40:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21b44:	bl	15900 <_start@@Base+0x2ee8>
   21b48:	str	r0, [fp, #-52]	; 0xffffffcc
   21b4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21b50:	bl	162b8 <_start@@Base+0x38a0>
   21b54:	str	r0, [fp, #-28]	; 0xffffffe4
   21b58:	ldr	r3, [pc, #-1108]	; 2170c <verify_monster@@Base+0x6e0>
   21b5c:	add	r3, pc, r3
   21b60:	mov	r1, r3
   21b64:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21b68:	bl	1290c <strcmp@plt>
   21b6c:	mov	r3, r0
   21b70:	cmp	r3, #0
   21b74:	beq	21b94 <verify_monster@@Base+0xb68>
   21b78:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21b7c:	ldr	r3, [pc, #-1140]	; 21710 <verify_monster@@Base+0x6e4>
   21b80:	add	r3, pc, r3
   21b84:	mov	r0, r3
   21b88:	bl	12918 <printf@plt>
   21b8c:	mvn	r3, #0
   21b90:	b	221dc <verify_monster@@Base+0x11b0>
   21b94:	mov	r1, #3
   21b98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21b9c:	bl	15900 <_start@@Base+0x2ee8>
   21ba0:	str	r0, [fp, #-52]	; 0xffffffcc
   21ba4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21ba8:	bl	162b8 <_start@@Base+0x38a0>
   21bac:	str	r0, [fp, #-28]	; 0xffffffe4
   21bb0:	ldr	r3, [pc, #-1188]	; 21714 <verify_monster@@Base+0x6e8>
   21bb4:	add	r3, pc, r3
   21bb8:	mov	r1, r3
   21bbc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21bc0:	bl	1290c <strcmp@plt>
   21bc4:	mov	r3, r0
   21bc8:	cmp	r3, #0
   21bcc:	beq	21bec <verify_monster@@Base+0xbc0>
   21bd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21bd4:	ldr	r3, [pc, #-1220]	; 21718 <verify_monster@@Base+0x6ec>
   21bd8:	add	r3, pc, r3
   21bdc:	mov	r0, r3
   21be0:	bl	12918 <printf@plt>
   21be4:	mvn	r3, #0
   21be8:	b	221dc <verify_monster@@Base+0x11b0>
   21bec:	mov	r1, #4
   21bf0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21bf4:	bl	15900 <_start@@Base+0x2ee8>
   21bf8:	str	r0, [fp, #-52]	; 0xffffffcc
   21bfc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21c00:	bl	162b8 <_start@@Base+0x38a0>
   21c04:	str	r0, [fp, #-28]	; 0xffffffe4
   21c08:	ldr	r3, [pc, #-1268]	; 2171c <verify_monster@@Base+0x6f0>
   21c0c:	add	r3, pc, r3
   21c10:	mov	r1, r3
   21c14:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21c18:	bl	1290c <strcmp@plt>
   21c1c:	mov	r3, r0
   21c20:	cmp	r3, #0
   21c24:	beq	21c44 <verify_monster@@Base+0xc18>
   21c28:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21c2c:	ldr	r3, [pc, #-1300]	; 21720 <verify_monster@@Base+0x6f4>
   21c30:	add	r3, pc, r3
   21c34:	mov	r0, r3
   21c38:	bl	12918 <printf@plt>
   21c3c:	mvn	r3, #0
   21c40:	b	221dc <verify_monster@@Base+0x11b0>
   21c44:	mov	r1, #6
   21c48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21c4c:	bl	15900 <_start@@Base+0x2ee8>
   21c50:	str	r0, [fp, #-52]	; 0xffffffcc
   21c54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21c58:	bl	162b8 <_start@@Base+0x38a0>
   21c5c:	str	r0, [fp, #-28]	; 0xffffffe4
   21c60:	ldr	r3, [pc, #-1348]	; 21724 <verify_monster@@Base+0x6f8>
   21c64:	add	r3, pc, r3
   21c68:	mov	r1, r3
   21c6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21c70:	bl	1290c <strcmp@plt>
   21c74:	mov	r3, r0
   21c78:	cmp	r3, #0
   21c7c:	beq	21c9c <verify_monster@@Base+0xc70>
   21c80:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21c84:	ldr	r3, [pc, #-1380]	; 21728 <verify_monster@@Base+0x6fc>
   21c88:	add	r3, pc, r3
   21c8c:	mov	r0, r3
   21c90:	bl	12918 <printf@plt>
   21c94:	mvn	r3, #0
   21c98:	b	221dc <verify_monster@@Base+0x11b0>
   21c9c:	mov	r1, #7
   21ca0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21ca4:	bl	15900 <_start@@Base+0x2ee8>
   21ca8:	str	r0, [fp, #-52]	; 0xffffffcc
   21cac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21cb0:	bl	162b8 <_start@@Base+0x38a0>
   21cb4:	str	r0, [fp, #-28]	; 0xffffffe4
   21cb8:	ldr	r3, [pc, #-1428]	; 2172c <verify_monster@@Base+0x700>
   21cbc:	add	r3, pc, r3
   21cc0:	mov	r1, r3
   21cc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   21cc8:	bl	1290c <strcmp@plt>
   21ccc:	mov	r3, r0
   21cd0:	cmp	r3, #0
   21cd4:	beq	21cf4 <verify_monster@@Base+0xcc8>
   21cd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   21cdc:	ldr	r3, [pc, #-1460]	; 21730 <verify_monster@@Base+0x704>
   21ce0:	add	r3, pc, r3
   21ce4:	mov	r0, r3
   21ce8:	bl	12918 <printf@plt>
   21cec:	mvn	r3, #0
   21cf0:	b	221dc <verify_monster@@Base+0x11b0>
   21cf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   21cf8:	bl	174cc <_start@@Base+0x4ab4>
   21cfc:	str	r0, [fp, #-60]	; 0xffffffc4
   21d00:	ldr	r0, [fp, #-60]	; 0xffffffc4
   21d04:	bl	13580 <_start@@Base+0xb68>
   21d08:	mov	r3, r0
   21d0c:	cmp	r3, #3
   21d10:	beq	21d2c <verify_monster@@Base+0xd00>
   21d14:	ldr	r3, [pc, #-1512]	; 21734 <verify_monster@@Base+0x708>
   21d18:	add	r3, pc, r3
   21d1c:	mov	r0, r3
   21d20:	bl	1296c <puts@plt>
   21d24:	mvn	r3, #0
   21d28:	b	221dc <verify_monster@@Base+0x11b0>
   21d2c:	mov	r1, #0
   21d30:	ldr	r0, [fp, #-60]	; 0xffffffc4
   21d34:	bl	135c4 <_start@@Base+0xbac>
   21d38:	mov	r2, r0
   21d3c:	ldr	r3, [pc, #-1548]	; 21738 <verify_monster@@Base+0x70c>
   21d40:	add	r3, pc, r3
   21d44:	mov	r1, r3
   21d48:	mov	r0, r2
   21d4c:	bl	1290c <strcmp@plt>
   21d50:	mov	r3, r0
   21d54:	cmp	r3, #0
   21d58:	beq	21d74 <verify_monster@@Base+0xd48>
   21d5c:	ldr	r3, [pc, #-1576]	; 2173c <verify_monster@@Base+0x710>
   21d60:	add	r3, pc, r3
   21d64:	mov	r0, r3
   21d68:	bl	1296c <puts@plt>
   21d6c:	mvn	r3, #0
   21d70:	b	221dc <verify_monster@@Base+0x11b0>
   21d74:	mov	r1, #1
   21d78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   21d7c:	bl	135c4 <_start@@Base+0xbac>
   21d80:	str	r0, [fp, #-64]	; 0xffffffc0
   21d84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21d88:	bl	1353c <_start@@Base+0xb24>
   21d8c:	mov	r3, r0
   21d90:	cmp	r3, #2
   21d94:	beq	21db0 <verify_monster@@Base+0xd84>
   21d98:	ldr	r3, [pc, #-1632]	; 21740 <verify_monster@@Base+0x714>
   21d9c:	add	r3, pc, r3
   21da0:	mov	r0, r3
   21da4:	bl	12918 <printf@plt>
   21da8:	mvn	r3, #0
   21dac:	b	221dc <verify_monster@@Base+0x11b0>
   21db0:	mov	r2, #2
   21db4:	ldr	r3, [pc, #-1656]	; 21744 <verify_monster@@Base+0x718>
   21db8:	add	r3, pc, r3
   21dbc:	mov	r1, r3
   21dc0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21dc4:	bl	1293c <memcmp@plt>
   21dc8:	mov	r3, r0
   21dcc:	cmp	r3, #0
   21dd0:	beq	21dec <verify_monster@@Base+0xdc0>
   21dd4:	ldr	r3, [pc, #-1684]	; 21748 <verify_monster@@Base+0x71c>
   21dd8:	add	r3, pc, r3
   21ddc:	mov	r0, r3
   21de0:	bl	1296c <puts@plt>
   21de4:	mvn	r3, #0
   21de8:	b	221dc <verify_monster@@Base+0x11b0>
   21dec:	mov	r1, #2
   21df0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   21df4:	bl	135c4 <_start@@Base+0xbac>
   21df8:	mov	r2, r0
   21dfc:	ldr	r3, [pc, #-1720]	; 2174c <verify_monster@@Base+0x720>
   21e00:	add	r3, pc, r3
   21e04:	mov	r1, r3
   21e08:	mov	r0, r2
   21e0c:	bl	1290c <strcmp@plt>
   21e10:	mov	r3, r0
   21e14:	cmp	r3, #0
   21e18:	beq	21e34 <verify_monster@@Base+0xe08>
   21e1c:	ldr	r3, [pc, #-1748]	; 21750 <verify_monster@@Base+0x724>
   21e20:	add	r3, pc, r3
   21e24:	mov	r0, r3
   21e28:	bl	1296c <puts@plt>
   21e2c:	mvn	r3, #0
   21e30:	b	221dc <verify_monster@@Base+0x11b0>
   21e34:	ldr	r0, [fp, #-20]	; 0xffffffec
   21e38:	bl	176d8 <_start@@Base+0x4cc0>
   21e3c:	mov	r3, r0
   21e40:	cmp	r3, #0
   21e44:	bne	21e60 <verify_monster@@Base+0xe34>
   21e48:	ldr	r3, [pc, #-1788]	; 21754 <verify_monster@@Base+0x728>
   21e4c:	add	r3, pc, r3
   21e50:	mov	r0, r3
   21e54:	bl	1296c <puts@plt>
   21e58:	mvn	r3, #0
   21e5c:	b	221dc <verify_monster@@Base+0x11b0>
   21e60:	ldr	r0, [fp, #-20]	; 0xffffffec
   21e64:	bl	175d0 <_start@@Base+0x4bb8>
   21e68:	str	r0, [fp, #-68]	; 0xffffffbc
   21e6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21e70:	bl	138b0 <_start@@Base+0xe98>
   21e74:	mov	r3, r0
   21e78:	cmp	r3, #4
   21e7c:	beq	21e98 <verify_monster@@Base+0xe6c>
   21e80:	ldr	r3, [pc, #-1840]	; 21758 <verify_monster@@Base+0x72c>
   21e84:	add	r3, pc, r3
   21e88:	mov	r0, r3
   21e8c:	bl	1296c <puts@plt>
   21e90:	mvn	r3, #0
   21e94:	b	221dc <verify_monster@@Base+0x11b0>
   21e98:	mov	r3, #0
   21e9c:	str	r3, [fp, #-16]
   21ea0:	b	21f00 <verify_monster@@Base+0xed4>
   21ea4:	ldr	r1, [fp, #-16]
   21ea8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21eac:	bl	138d8 <_start@@Base+0xec0>
   21eb0:	mov	r3, r0
   21eb4:	mov	r2, r3
   21eb8:	ldr	r3, [fp, #-16]
   21ebc:	lsl	r3, r3, #2
   21ec0:	sub	r1, fp, #12
   21ec4:	add	r3, r1, r3
   21ec8:	ldr	r3, [r3, #-108]	; 0xffffff94
   21ecc:	cmp	r2, r3
   21ed0:	beq	21ef4 <verify_monster@@Base+0xec8>
   21ed4:	ldr	r3, [fp, #-16]
   21ed8:	mov	r1, r3
   21edc:	ldr	r3, [pc, #-1928]	; 2175c <verify_monster@@Base+0x730>
   21ee0:	add	r3, pc, r3
   21ee4:	mov	r0, r3
   21ee8:	bl	12918 <printf@plt>
   21eec:	mvn	r3, #0
   21ef0:	b	221dc <verify_monster@@Base+0x11b0>
   21ef4:	ldr	r3, [fp, #-16]
   21ef8:	add	r3, r3, #1
   21efc:	str	r3, [fp, #-16]
   21f00:	ldr	r3, [fp, #-16]
   21f04:	cmp	r3, #3
   21f08:	bls	21ea4 <verify_monster@@Base+0xe78>
   21f0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   21f10:	bl	17994 <_start@@Base+0x4f7c>
   21f14:	mov	r3, r0
   21f18:	strb	r3, [fp, #-69]	; 0xffffffbb
   21f1c:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   21f20:	cmp	r3, #1
   21f24:	beq	21f40 <verify_monster@@Base+0xf14>
   21f28:	ldr	r3, [pc, #-2000]	; 21760 <verify_monster@@Base+0x734>
   21f2c:	add	r3, pc, r3
   21f30:	mov	r0, r3
   21f34:	bl	1296c <puts@plt>
   21f38:	mvn	r3, #0
   21f3c:	b	221dc <verify_monster@@Base+0x11b0>
   21f40:	ldr	r0, [fp, #-20]	; 0xffffffec
   21f44:	bl	17a8c <_start@@Base+0x5074>
   21f48:	str	r0, [fp, #-52]	; 0xffffffcc
   21f4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21f50:	bl	162b8 <_start@@Base+0x38a0>
   21f54:	mov	r2, r0
   21f58:	ldr	r3, [pc, #-2044]	; 21764 <verify_monster@@Base+0x738>
   21f5c:	add	r3, pc, r3
   21f60:	mov	r1, r3
   21f64:	mov	r0, r2
   21f68:	bl	1290c <strcmp@plt>
   21f6c:	mov	r3, r0
   21f70:	cmp	r3, #0
   21f74:	beq	21f90 <verify_monster@@Base+0xf64>
   21f78:	ldr	r3, [pc, #-2072]	; 21768 <verify_monster@@Base+0x73c>
   21f7c:	add	r3, pc, r3
   21f80:	mov	r0, r3
   21f84:	bl	1296c <puts@plt>
   21f88:	mvn	r3, #0
   21f8c:	b	221dc <verify_monster@@Base+0x11b0>
   21f90:	ldr	r0, [fp, #-20]	; 0xffffffec
   21f94:	bl	177b8 <_start@@Base+0x4da0>
   21f98:	str	r0, [fp, #-52]	; 0xffffffcc
   21f9c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21fa0:	bl	162b8 <_start@@Base+0x38a0>
   21fa4:	mov	r2, r0
   21fa8:	ldr	r3, [pc, #-2116]	; 2176c <verify_monster@@Base+0x740>
   21fac:	add	r3, pc, r3
   21fb0:	mov	r1, r3
   21fb4:	mov	r0, r2
   21fb8:	bl	1290c <strcmp@plt>
   21fbc:	mov	r3, r0
   21fc0:	cmp	r3, #0
   21fc4:	beq	21fe0 <verify_monster@@Base+0xfb4>
   21fc8:	ldr	r3, [pc, #-2144]	; 21770 <verify_monster@@Base+0x744>
   21fcc:	add	r3, pc, r3
   21fd0:	mov	r0, r3
   21fd4:	bl	1296c <puts@plt>
   21fd8:	mvn	r3, #0
   21fdc:	b	221dc <verify_monster@@Base+0x11b0>
   21fe0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21fe4:	bl	17994 <_start@@Base+0x4f7c>
   21fe8:	mov	r3, r0
   21fec:	cmp	r3, #0
   21ff0:	beq	2200c <verify_monster@@Base+0xfe0>
   21ff4:	ldr	r3, [pc, #-2184]	; 21774 <verify_monster@@Base+0x748>
   21ff8:	add	r3, pc, r3
   21ffc:	mov	r0, r3
   22000:	bl	1296c <puts@plt>
   22004:	mvn	r3, #0
   22008:	b	221dc <verify_monster@@Base+0x11b0>
   2200c:	sub	r3, fp, #84	; 0x54
   22010:	ldr	r1, [fp, #-20]	; 0xffffffec
   22014:	mov	r0, r3
   22018:	bl	17b90 <_start@@Base+0x5178>
   2201c:	ldrb	r3, [fp, #-84]	; 0xffffffac
   22020:	ldrb	r2, [fp, #-69]	; 0xffffffbb
   22024:	cmp	r2, r3
   22028:	beq	22044 <verify_monster@@Base+0x1018>
   2202c:	ldr	r3, [pc, #-2236]	; 21778 <verify_monster@@Base+0x74c>
   22030:	add	r3, pc, r3
   22034:	mov	r0, r3
   22038:	bl	1296c <puts@plt>
   2203c:	mvn	r3, #0
   22040:	b	221dc <verify_monster@@Base+0x11b0>
   22044:	ldr	r4, [fp, #-80]	; 0xffffffb0
   22048:	ldr	r0, [fp, #-20]	; 0xffffffec
   2204c:	bl	17a8c <_start@@Base+0x5074>
   22050:	mov	r3, r0
   22054:	cmp	r4, r3
   22058:	beq	22074 <verify_monster@@Base+0x1048>
   2205c:	ldr	r3, [pc, #-2280]	; 2177c <verify_monster@@Base+0x750>
   22060:	add	r3, pc, r3
   22064:	mov	r0, r3
   22068:	bl	1296c <puts@plt>
   2206c:	mvn	r3, #0
   22070:	b	221dc <verify_monster@@Base+0x11b0>
   22074:	ldr	r0, [fp, #-52]	; 0xffffffcc
   22078:	bl	173c4 <_start@@Base+0x49ac>
   2207c:	str	r0, [fp, #-48]	; 0xffffffd0
   22080:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22084:	bl	158bc <_start@@Base+0x2ea4>
   22088:	str	r0, [fp, #-16]
   2208c:	ldr	r3, [fp, #-16]
   22090:	sub	r3, r3, #1
   22094:	mov	r1, r3
   22098:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2209c:	bl	15900 <_start@@Base+0x2ee8>
   220a0:	str	r0, [fp, #-52]	; 0xffffffcc
   220a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   220a8:	bl	17994 <_start@@Base+0x4f7c>
   220ac:	mov	r3, r0
   220b0:	cmp	r3, #1
   220b4:	beq	220d0 <verify_monster@@Base+0x10a4>
   220b8:	ldr	r3, [pc, #-2368]	; 21780 <verify_monster@@Base+0x754>
   220bc:	add	r3, pc, r3
   220c0:	mov	r0, r3
   220c4:	bl	1296c <puts@plt>
   220c8:	mvn	r3, #0
   220cc:	b	221dc <verify_monster@@Base+0x11b0>
   220d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   220d4:	bl	17a8c <_start@@Base+0x5074>
   220d8:	str	r0, [fp, #-52]	; 0xffffffcc
   220dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   220e0:	bl	162b8 <_start@@Base+0x38a0>
   220e4:	mov	r2, r0
   220e8:	ldr	r3, [pc, #-2412]	; 21784 <verify_monster@@Base+0x758>
   220ec:	add	r3, pc, r3
   220f0:	mov	r1, r3
   220f4:	mov	r0, r2
   220f8:	bl	1290c <strcmp@plt>
   220fc:	mov	r3, r0
   22100:	cmp	r3, #0
   22104:	beq	22120 <verify_monster@@Base+0x10f4>
   22108:	ldr	r3, [pc, #-2440]	; 21788 <verify_monster@@Base+0x75c>
   2210c:	add	r3, pc, r3
   22110:	mov	r0, r3
   22114:	bl	1296c <puts@plt>
   22118:	mvn	r3, #0
   2211c:	b	221dc <verify_monster@@Base+0x11b0>
   22120:	ldr	r0, [fp, #-20]	; 0xffffffec
   22124:	bl	18080 <_start@@Base+0x5668>
   22128:	mov	r3, r0
   2212c:	cmp	r3, #0
   22130:	beq	2214c <verify_monster@@Base+0x1120>
   22134:	ldr	r3, [pc, #-2480]	; 2178c <verify_monster@@Base+0x760>
   22138:	add	r3, pc, r3
   2213c:	mov	r0, r3
   22140:	bl	1296c <puts@plt>
   22144:	mvn	r3, #0
   22148:	b	221dc <verify_monster@@Base+0x11b0>
   2214c:	ldr	r0, [fp, #-20]	; 0xffffffec
   22150:	bl	17fa0 <_start@@Base+0x5588>
   22154:	mov	r3, r0
   22158:	cmp	r3, #0
   2215c:	bne	22178 <verify_monster@@Base+0x114c>
   22160:	ldr	r3, [pc, #-2520]	; 21790 <verify_monster@@Base+0x764>
   22164:	add	r3, pc, r3
   22168:	mov	r0, r3
   2216c:	bl	1296c <puts@plt>
   22170:	mvn	r3, #0
   22174:	b	221dc <verify_monster@@Base+0x11b0>
   22178:	ldr	r0, [fp, #-20]	; 0xffffffec
   2217c:	bl	17e9c <_start@@Base+0x5484>
   22180:	str	r0, [fp, #-76]	; 0xffffffb4
   22184:	ldr	r0, [fp, #-76]	; 0xffffffb4
   22188:	bl	15184 <_start@@Base+0x276c>
   2218c:	mov	r3, r0
   22190:	cmp	r3, #0
   22194:	bne	221c0 <verify_monster@@Base+0x1194>
   22198:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2219c:	bl	15364 <_start@@Base+0x294c>
   221a0:	mov	r3, r0
   221a4:	cmp	r3, #0
   221a8:	bne	221c0 <verify_monster@@Base+0x1194>
   221ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   221b0:	bl	15440 <_start@@Base+0x2a28>
   221b4:	mov	r3, r0
   221b8:	cmp	r3, #0
   221bc:	beq	221d8 <verify_monster@@Base+0x11ac>
   221c0:	ldr	r3, [pc, #-2612]	; 21794 <verify_monster@@Base+0x768>
   221c4:	add	r3, pc, r3
   221c8:	mov	r0, r3
   221cc:	bl	1296c <puts@plt>
   221d0:	mvn	r3, #0
   221d4:	b	221dc <verify_monster@@Base+0x11b0>
   221d8:	mov	r3, #0
   221dc:	mov	r0, r3
   221e0:	sub	sp, fp, #8
   221e4:	pop	{r4, fp, pc}

000221e8 <gen_monster@@Base>:
   221e8:	push	{fp, lr}
   221ec:	add	fp, sp, #4
   221f0:	sub	sp, sp, #96	; 0x60
   221f4:	str	r0, [fp, #-96]	; 0xffffffa0
   221f8:	str	r1, [fp, #-100]	; 0xffffff9c
   221fc:	ldr	r2, [pc, #1536]	; 22804 <gen_monster@@Base+0x61c>
   22200:	add	r2, pc, r2
   22204:	sub	r3, fp, #64	; 0x40
   22208:	ldm	r2, {r0, r1, r2}
   2220c:	stmia	r3!, {r0, r1}
   22210:	strh	r2, [r3]
   22214:	ldr	r3, [pc, #1516]	; 22808 <gen_monster@@Base+0x620>
   22218:	add	r3, pc, r3
   2221c:	ldr	r3, [r3]
   22220:	str	r3, [fp, #-92]	; 0xffffffa4
   22224:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22228:	bl	286e4 <flatcc_builder_reset@@Base>
   2222c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   22230:	cmp	r3, #0
   22234:	beq	22244 <gen_monster@@Base+0x5c>
   22238:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2223c:	bl	1d2e0 <_start@@Base+0xa8c8>
   22240:	b	2224c <gen_monster@@Base+0x64>
   22244:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22248:	bl	1d28c <_start@@Base+0xa874>
   2224c:	mov	r1, #80	; 0x50
   22250:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22254:	bl	1bd08 <_start@@Base+0x92f0>
   22258:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2225c:	bl	1bc5c <_start@@Base+0x9244>
   22260:	str	r0, [fp, #-8]
   22264:	ldr	r3, [fp, #-8]
   22268:	mov	r2, #1065353216	; 0x3f800000
   2226c:	str	r2, [r3]
   22270:	ldr	r3, [fp, #-8]
   22274:	mov	r2, #1073741824	; 0x40000000
   22278:	str	r2, [r3, #4]
   2227c:	ldr	r3, [fp, #-8]
   22280:	ldr	r2, [pc, #1412]	; 2280c <gen_monster@@Base+0x624>
   22284:	str	r2, [r3, #8]
   22288:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2228c:	bl	1bc90 <_start@@Base+0x9278>
   22290:	ldr	r3, [pc, #1400]	; 22810 <gen_monster@@Base+0x628>
   22294:	add	r3, pc, r3
   22298:	mov	r1, r3
   2229c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   222a0:	bl	1bf80 <_start@@Base+0x9568>
   222a4:	mov	r1, #2
   222a8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   222ac:	bl	1c1e8 <_start@@Base+0x97d0>
   222b0:	sub	r3, fp, #64	; 0x40
   222b4:	mov	r2, #10
   222b8:	mov	r1, r3
   222bc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   222c0:	bl	1c324 <_start@@Base+0x990c>
   222c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   222c8:	bl	1cccc <_start@@Base+0xa2b4>
   222cc:	mov	r1, #1
   222d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   222d4:	bl	1cdbc <_start@@Base+0xa3a4>
   222d8:	str	r0, [fp, #-12]
   222dc:	ldr	r3, [fp, #-12]
   222e0:	mov	r2, #16
   222e4:	strh	r2, [r3]
   222e8:	ldr	r3, [fp, #-12]
   222ec:	mov	r2, #32
   222f0:	strb	r2, [r3, #2]
   222f4:	mov	r1, #2
   222f8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   222fc:	bl	1cdbc <_start@@Base+0xa3a4>
   22300:	str	r0, [fp, #-12]
   22304:	ldr	r3, [fp, #-12]
   22308:	mov	r2, #48	; 0x30
   2230c:	strh	r2, [r3]
   22310:	ldr	r3, [fp, #-12]
   22314:	mov	r2, #64	; 0x40
   22318:	strb	r2, [r3, #2]
   2231c:	ldr	r3, [fp, #-12]
   22320:	add	r3, r3, #4
   22324:	mov	r2, #80	; 0x50
   22328:	strh	r2, [r3]
   2232c:	ldr	r3, [fp, #-12]
   22330:	add	r3, r3, #4
   22334:	mov	r2, #96	; 0x60
   22338:	strb	r2, [r3, #2]
   2233c:	mvn	r2, #127	; 0x7f
   22340:	mov	r1, #112	; 0x70
   22344:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22348:	bl	1cecc <_start@@Base+0xa4b4>
   2234c:	mov	r3, #400	; 0x190
   22350:	strh	r3, [fp, #-68]	; 0xffffffbc
   22354:	mvn	r3, #110	; 0x6e
   22358:	strb	r3, [fp, #-66]	; 0xffffffbe
   2235c:	sub	r3, fp, #68	; 0x44
   22360:	mov	r1, r3
   22364:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22368:	bl	1ce6c <_start@@Base+0xa454>
   2236c:	sub	r3, fp, #68	; 0x44
   22370:	mov	r1, r3
   22374:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22378:	bl	1ce6c <_start@@Base+0xa454>
   2237c:	sub	r3, fp, #68	; 0x44
   22380:	mov	r1, r3
   22384:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22388:	bl	1a67c <_start@@Base+0x7c64>
   2238c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22390:	bl	1ce44 <_start@@Base+0xa42c>
   22394:	mov	r3, r0
   22398:	cmp	r3, #7
   2239c:	beq	223c0 <gen_monster@@Base+0x1d8>
   223a0:	ldr	r3, [pc, #1132]	; 22814 <gen_monster@@Base+0x62c>
   223a4:	add	r3, pc, r3
   223a8:	ldr	r2, [pc, #1128]	; 22818 <gen_monster@@Base+0x630>
   223ac:	ldr	r1, [pc, #1128]	; 2281c <gen_monster@@Base+0x634>
   223b0:	add	r1, pc, r1
   223b4:	ldr	r0, [pc, #1124]	; 22820 <gen_monster@@Base+0x638>
   223b8:	add	r0, pc, r0
   223bc:	bl	12a08 <__assert_fail@plt>
   223c0:	mov	r1, #2
   223c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   223c8:	bl	1cdec <_start@@Base+0xa3d4>
   223cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   223d0:	bl	1ce44 <_start@@Base+0xa42c>
   223d4:	mov	r3, r0
   223d8:	cmp	r3, #5
   223dc:	beq	22400 <gen_monster@@Base+0x218>
   223e0:	ldr	r3, [pc, #1084]	; 22824 <gen_monster@@Base+0x63c>
   223e4:	add	r3, pc, r3
   223e8:	ldr	r2, [pc, #1080]	; 22828 <gen_monster@@Base+0x640>
   223ec:	ldr	r1, [pc, #1080]	; 2282c <gen_monster@@Base+0x644>
   223f0:	add	r1, pc, r1
   223f4:	ldr	r0, [pc, #1076]	; 22830 <gen_monster@@Base+0x648>
   223f8:	add	r0, pc, r0
   223fc:	bl	12a08 <__assert_fail@plt>
   22400:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22404:	bl	1ce1c <_start@@Base+0xa404>
   22408:	str	r0, [fp, #-12]
   2240c:	ldr	r3, [fp, #-12]
   22410:	add	r3, r3, #16
   22414:	ldr	r2, [fp, #-12]
   22418:	add	r2, r2, #16
   2241c:	ldrsh	r2, [r2]
   22420:	uxth	r2, r2
   22424:	add	r2, r2, #1
   22428:	uxth	r2, r2
   2242c:	sxth	r2, r2
   22430:	strh	r2, [r3]
   22434:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22438:	bl	1ccf4 <_start@@Base+0xa2dc>
   2243c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22440:	bl	1afa4 <_start@@Base+0x858c>
   22444:	mov	r2, #7
   22448:	ldr	r3, [pc, #996]	; 22834 <gen_monster@@Base+0x64c>
   2244c:	add	r3, pc, r3
   22450:	mov	r1, r3
   22454:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22458:	bl	1a1e0 <_start@@Base+0x77c8>
   2245c:	str	r0, [fp, #-16]
   22460:	ldr	r1, [fp, #-16]
   22464:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22468:	bl	1bec0 <_start@@Base+0x94a8>
   2246c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22470:	bl	1afd0 <_start@@Base+0x85b8>
   22474:	str	r0, [fp, #-20]	; 0xffffffec
   22478:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2247c:	bl	1c3cc <_start@@Base+0x99b4>
   22480:	mov	r1, #2
   22484:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22488:	bl	1c42c <_start@@Base+0x9a14>
   2248c:	str	r0, [fp, #-24]	; 0xffffffe8
   22490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22494:	ldr	r2, [fp, #-20]	; 0xffffffec
   22498:	str	r2, [r3]
   2249c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   224a0:	add	r3, r3, #4
   224a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   224a8:	str	r2, [r3]
   224ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   224b0:	bl	1c558 <_start@@Base+0x9b40>
   224b4:	mov	r2, #30
   224b8:	ldr	r3, [pc, #888]	; 22838 <gen_monster@@Base+0x650>
   224bc:	add	r3, pc, r3
   224c0:	mov	r1, r3
   224c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   224c8:	bl	1bfc0 <_start@@Base+0x95a8>
   224cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   224d0:	bl	1c580 <_start@@Base+0x9b68>
   224d4:	mov	r3, r0
   224d8:	ldr	r3, [r3]
   224dc:	str	r3, [fp, #-28]	; 0xffffffe4
   224e0:	mov	r1, #3
   224e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   224e8:	bl	1c42c <_start@@Base+0x9a14>
   224ec:	str	r0, [fp, #-24]	; 0xffffffe8
   224f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   224f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   224f8:	str	r2, [r3]
   224fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22500:	add	r3, r3, #4
   22504:	ldr	r2, [fp, #-28]	; 0xffffffe4
   22508:	str	r2, [r3]
   2250c:	mov	r1, #1
   22510:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22514:	bl	1c494 <_start@@Base+0x9a7c>
   22518:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2251c:	bl	1c4ec <_start@@Base+0x9ad4>
   22520:	mov	r3, r0
   22524:	cmp	r3, #5
   22528:	beq	2254c <gen_monster@@Base+0x364>
   2252c:	ldr	r3, [pc, #776]	; 2283c <gen_monster@@Base+0x654>
   22530:	add	r3, pc, r3
   22534:	ldr	r2, [pc, #772]	; 22840 <gen_monster@@Base+0x658>
   22538:	ldr	r1, [pc, #772]	; 22844 <gen_monster@@Base+0x65c>
   2253c:	add	r1, pc, r1
   22540:	ldr	r0, [pc, #768]	; 22848 <gen_monster@@Base+0x660>
   22544:	add	r0, pc, r0
   22548:	bl	12a08 <__assert_fail@plt>
   2254c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22550:	bl	1c558 <_start@@Base+0x9b40>
   22554:	mov	r2, #8
   22558:	ldr	r3, [pc, #748]	; 2284c <gen_monster@@Base+0x664>
   2255c:	add	r3, pc, r3
   22560:	mov	r1, r3
   22564:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22568:	bl	1bfc0 <_start@@Base+0x95a8>
   2256c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22570:	bl	1c580 <_start@@Base+0x9b68>
   22574:	mov	r3, r0
   22578:	ldr	r3, [r3]
   2257c:	str	r3, [fp, #-76]	; 0xffffffb4
   22580:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22584:	bl	1c4ec <_start@@Base+0x9ad4>
   22588:	mov	r3, r0
   2258c:	cmp	r3, #6
   22590:	beq	225b4 <gen_monster@@Base+0x3cc>
   22594:	ldr	r3, [pc, #692]	; 22850 <gen_monster@@Base+0x668>
   22598:	add	r3, pc, r3
   2259c:	ldr	r2, [pc, #688]	; 22854 <gen_monster@@Base+0x66c>
   225a0:	ldr	r1, [pc, #688]	; 22858 <gen_monster@@Base+0x670>
   225a4:	add	r1, pc, r1
   225a8:	ldr	r0, [pc, #684]	; 2285c <gen_monster@@Base+0x674>
   225ac:	add	r0, pc, r0
   225b0:	bl	12a08 <__assert_fail@plt>
   225b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   225b8:	bl	1c4c4 <_start@@Base+0x9aac>
   225bc:	str	r0, [fp, #-24]	; 0xffffffe8
   225c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   225c4:	ldr	r3, [r3, #20]
   225c8:	str	r3, [fp, #-28]	; 0xffffffe4
   225cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   225d0:	ldr	r3, [r3, #8]
   225d4:	str	r3, [fp, #-72]	; 0xffffffb8
   225d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   225dc:	add	r3, r3, #20
   225e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   225e4:	str	r2, [r3]
   225e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   225ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   225f0:	str	r2, [r3]
   225f4:	sub	r3, fp, #76	; 0x4c
   225f8:	mov	r2, #2
   225fc:	mov	r1, r3
   22600:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22604:	bl	1c45c <_start@@Base+0x9a44>
   22608:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2260c:	bl	1c3f4 <_start@@Base+0x99dc>
   22610:	ldr	r3, [pc, #584]	; 22860 <gen_monster@@Base+0x678>
   22614:	add	r3, pc, r3
   22618:	mov	r1, r3
   2261c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22620:	bl	1a218 <_start@@Base+0x7800>
   22624:	mov	r3, r0
   22628:	str	r3, [fp, #-88]	; 0xffffffa8
   2262c:	mov	r2, #2
   22630:	ldr	r3, [pc, #556]	; 22864 <gen_monster@@Base+0x67c>
   22634:	add	r3, pc, r3
   22638:	mov	r1, r3
   2263c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22640:	bl	1a1e0 <_start@@Base+0x77c8>
   22644:	mov	r3, r0
   22648:	str	r3, [fp, #-84]	; 0xffffffac
   2264c:	ldr	r3, [pc, #532]	; 22868 <gen_monster@@Base+0x680>
   22650:	add	r3, pc, r3
   22654:	mov	r1, r3
   22658:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2265c:	bl	1a218 <_start@@Base+0x7800>
   22660:	mov	r3, r0
   22664:	str	r3, [fp, #-80]	; 0xffffffb0
   22668:	sub	r3, fp, #88	; 0x58
   2266c:	mov	r2, #3
   22670:	mov	r1, r3
   22674:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22678:	bl	1c678 <_start@@Base+0x9c60>
   2267c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22680:	bl	1c7b0 <_start@@Base+0x9d98>
   22684:	sub	r3, fp, #92	; 0x5c
   22688:	mov	r2, #1
   2268c:	mov	r1, r3
   22690:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22694:	bl	1c8e8 <_start@@Base+0x9ed0>
   22698:	sub	r3, fp, #92	; 0x5c
   2269c:	add	r3, r3, #1
   226a0:	mov	r2, #3
   226a4:	mov	r1, r3
   226a8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   226ac:	bl	1c8e8 <_start@@Base+0x9ed0>
   226b0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   226b4:	bl	1c7d8 <_start@@Base+0x9dc0>
   226b8:	sub	r3, fp, #52	; 0x34
   226bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   226c0:	mov	r0, r3
   226c4:	bl	1b288 <_start@@Base+0x8870>
   226c8:	sub	r3, fp, #52	; 0x34
   226cc:	ldm	r3, {r1, r2}
   226d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   226d4:	bl	1c9e0 <_start@@Base+0x9fc8>
   226d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   226dc:	bl	1c980 <_start@@Base+0x9f68>
   226e0:	ldr	r3, [pc, #388]	; 2286c <gen_monster@@Base+0x684>
   226e4:	add	r3, pc, r3
   226e8:	mov	r1, r3
   226ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   226f0:	bl	1bf80 <_start@@Base+0x9568>
   226f4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   226f8:	bl	1c3cc <_start@@Base+0x99b4>
   226fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22700:	bl	1d22c <_start@@Base+0xa814>
   22704:	sub	r3, fp, #44	; 0x2c
   22708:	ldr	r1, [fp, #-20]	; 0xffffffec
   2270c:	mov	r0, r3
   22710:	bl	1b288 <_start@@Base+0x8870>
   22714:	sub	r3, fp, #44	; 0x2c
   22718:	ldm	r3, {r1, r2}
   2271c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22720:	bl	1c9e0 <_start@@Base+0x9fc8>
   22724:	ldr	r3, [pc, #324]	; 22870 <gen_monster@@Base+0x688>
   22728:	add	r3, pc, r3
   2272c:	mov	r1, r3
   22730:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22734:	bl	1bf80 <_start@@Base+0x9568>
   22738:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2273c:	bl	1c580 <_start@@Base+0x9b68>
   22740:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22744:	bl	1c558 <_start@@Base+0x9b40>
   22748:	ldr	r1, [fp, #-20]	; 0xffffffec
   2274c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22750:	bl	1cb70 <_start@@Base+0xa158>
   22754:	ldr	r3, [pc, #280]	; 22874 <gen_monster@@Base+0x68c>
   22758:	add	r3, pc, r3
   2275c:	mov	r1, r3
   22760:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22764:	bl	1bf80 <_start@@Base+0x9568>
   22768:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2276c:	bl	1d254 <_start@@Base+0xa83c>
   22770:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22774:	bl	1c558 <_start@@Base+0x9b40>
   22778:	sub	r3, fp, #36	; 0x24
   2277c:	ldr	r1, [fp, #-20]	; 0xffffffec
   22780:	mov	r0, r3
   22784:	bl	1b288 <_start@@Base+0x8870>
   22788:	sub	r3, fp, #36	; 0x24
   2278c:	ldm	r3, {r1, r2}
   22790:	ldr	r0, [fp, #-96]	; 0xffffffa0
   22794:	bl	1cb04 <_start@@Base+0xa0ec>
   22798:	ldr	r3, [pc, #216]	; 22878 <gen_monster@@Base+0x690>
   2279c:	add	r3, pc, r3
   227a0:	mov	r1, r3
   227a4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227a8:	bl	1bf80 <_start@@Base+0x9568>
   227ac:	mov	r1, #1
   227b0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227b4:	bl	1ca90 <_start@@Base+0xa078>
   227b8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227bc:	bl	1c580 <_start@@Base+0x9b68>
   227c0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227c4:	bl	1c3f4 <_start@@Base+0x99dc>
   227c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227cc:	bl	1c9a8 <_start@@Base+0x9f90>
   227d0:	mov	r1, #0
   227d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227d8:	bl	1d1b4 <_start@@Base+0xa79c>
   227dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227e0:	bl	1d104 <_start@@Base+0xa6ec>
   227e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227e8:	bl	1d12c <_start@@Base+0xa714>
   227ec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   227f0:	bl	1d334 <_start@@Base+0xa91c>
   227f4:	mov	r3, #0
   227f8:	mov	r0, r3
   227fc:	sub	sp, fp, #4
   22800:	pop	{fp, pc}
   22804:	andeq	r0, r1, r0, lsr #4
   22808:	andeq	r0, r1, r4, lsl r2
   2280c:	subgt	ip, ip, sp, asr #25
   22810:	andeq	pc, r0, ip, ror #5
   22814:	andeq	r1, r1, r0, lsl #31
   22818:	andeq	r0, r0, r1, ror r3
   2281c:	andeq	pc, r0, ip, asr #21
   22820:	andeq	pc, r0, r8, lsl #31
   22824:	andeq	r1, r1, r0, asr #30
   22828:	andeq	r0, r0, r3, ror r3
   2282c:	andeq	pc, r0, ip, lsl #21
   22830:	andeq	pc, r0, r0, ror pc	; <UNPREDICTABLE>
   22834:	muleq	r0, ip, sl
   22838:	andeq	pc, r0, r8, lsr #21
   2283c:	strdeq	r1, [r1], -r4
   22840:	muleq	r0, fp, r3
   22844:	andeq	pc, r0, r0, asr #18
   22848:	andeq	pc, r0, ip, asr #28
   2284c:	andeq	pc, r0, r8, ror #28
   22850:	andeq	r1, r1, ip, lsl #27
   22854:	andeq	r0, r0, r1, lsr #7
   22858:	ldrdeq	pc, [r0], -r8
   2285c:	andeq	pc, r0, r4, lsr lr	; <UNPREDICTABLE>
   22860:	andeq	pc, r0, r4, ror sl	; <UNPREDICTABLE>
   22864:	muleq	r0, r0, sl
   22868:	muleq	r0, r8, sl
   2286c:	andeq	pc, r0, ip, asr #21
   22870:	andeq	pc, r0, ip, ror #25
   22874:			; <UNDEFINED> instruction: 0x0000fcbc
   22878:	andeq	pc, r0, r8, ror ip	; <UNPREDICTABLE>

0002287c <test_monster@@Base>:
   2287c:	push	{r4, fp, lr}
   22880:	add	fp, sp, #8
   22884:	sub	sp, sp, #28
   22888:	str	r0, [fp, #-32]	; 0xffffffe0
   2288c:	ldr	r4, [pc, #172]	; 22940 <test_monster@@Base+0xc4>
   22890:	add	r4, pc, r4
   22894:	mov	r1, #0
   22898:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2289c:	bl	221e8 <gen_monster@@Base>
   228a0:	sub	r3, fp, #24
   228a4:	mov	r1, r3
   228a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   228ac:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   228b0:	str	r0, [fp, #-16]
   228b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   228b8:	ldr	r3, [pc, #132]	; 22944 <test_monster@@Base+0xc8>
   228bc:	ldr	r3, [r4, r3]
   228c0:	ldr	r3, [r3]
   228c4:	ldr	r1, [fp, #-16]
   228c8:	ldr	r0, [pc, #120]	; 22948 <test_monster@@Base+0xcc>
   228cc:	add	r0, pc, r0
   228d0:	bl	1fc0c <_start@@Base+0xd1f4>
   228d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   228d8:	mov	r1, r3
   228dc:	ldr	r0, [fp, #-16]
   228e0:	bl	1f6a4 <_start@@Base+0xcc8c>
   228e4:	str	r0, [fp, #-20]	; 0xffffffec
   228e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   228ec:	cmp	r3, #0
   228f0:	beq	2291c <test_monster@@Base+0xa0>
   228f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   228f8:	bl	2e65c <flatcc_verify_error_string@@Base>
   228fc:	mov	r3, r0
   22900:	mov	r1, r3
   22904:	ldr	r3, [pc, #64]	; 2294c <test_monster@@Base+0xd0>
   22908:	add	r3, pc, r3
   2290c:	mov	r0, r3
   22910:	bl	12918 <printf@plt>
   22914:	mvn	r3, #0
   22918:	b	22934 <test_monster@@Base+0xb8>
   2291c:	ldr	r0, [fp, #-16]
   22920:	bl	2102c <verify_monster@@Base>
   22924:	str	r0, [fp, #-20]	; 0xffffffec
   22928:	ldr	r0, [fp, #-16]
   2292c:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   22930:	ldr	r3, [fp, #-20]	; 0xffffffec
   22934:	mov	r0, r3
   22938:	sub	sp, fp, #8
   2293c:	pop	{r4, fp, pc}
   22940:	andeq	r3, r2, r8, ror #14
   22944:	andeq	r0, r0, r8, rrx
   22948:	andeq	pc, r0, r4, ror #22
   2294c:	andeq	pc, r0, r8, lsr fp	; <UNPREDICTABLE>

00022950 <test_monster_with_size@@Base>:
   22950:	push	{r4, fp, lr}
   22954:	add	fp, sp, #8
   22958:	sub	sp, sp, #36	; 0x24
   2295c:	str	r0, [fp, #-40]	; 0xffffffd8
   22960:	ldr	r4, [pc, #324]	; 22aac <test_monster_with_size@@Base+0x15c>
   22964:	add	r4, pc, r4
   22968:	mov	r1, #1
   2296c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22970:	bl	221e8 <gen_monster@@Base>
   22974:	sub	r3, fp, #32
   22978:	mov	r1, r3
   2297c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22980:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   22984:	str	r0, [fp, #-16]
   22988:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2298c:	ldr	r3, [pc, #284]	; 22ab0 <test_monster_with_size@@Base+0x160>
   22990:	ldr	r3, [r4, r3]
   22994:	ldr	r3, [r3]
   22998:	ldr	r1, [fp, #-16]
   2299c:	ldr	r0, [pc, #272]	; 22ab4 <test_monster_with_size@@Base+0x164>
   229a0:	add	r0, pc, r0
   229a4:	bl	1fc0c <_start@@Base+0xd1f4>
   229a8:	ldr	r3, [fp, #-16]
   229ac:	and	r3, r3, #15
   229b0:	cmp	r3, #0
   229b4:	beq	229e8 <test_monster_with_size@@Base+0x98>
   229b8:	ldr	r3, [pc, #248]	; 22ab8 <test_monster_with_size@@Base+0x168>
   229bc:	add	r3, pc, r3
   229c0:	mov	r0, r3
   229c4:	bl	12918 <printf@plt>
   229c8:	ldr	r3, [fp, #-16]
   229cc:	mov	r1, r3
   229d0:	ldr	r3, [pc, #228]	; 22abc <test_monster_with_size@@Base+0x16c>
   229d4:	add	r3, pc, r3
   229d8:	mov	r0, r3
   229dc:	bl	12918 <printf@plt>
   229e0:	mvn	r3, #0
   229e4:	b	22aa0 <test_monster_with_size@@Base+0x150>
   229e8:	sub	r3, fp, #36	; 0x24
   229ec:	mov	r1, r3
   229f0:	ldr	r0, [fp, #-16]
   229f4:	bl	146e8 <_start@@Base+0x1cd0>
   229f8:	str	r0, [fp, #-20]	; 0xffffffec
   229fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a00:	sub	r3, r3, #4
   22a04:	str	r3, [fp, #-24]	; 0xffffffe8
   22a08:	ldr	r2, [fp, #-36]	; 0xffffffdc
   22a0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22a10:	cmp	r2, r3
   22a14:	beq	22a40 <test_monster_with_size@@Base+0xf0>
   22a18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22a1c:	mov	r1, r3
   22a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22a24:	mov	r2, r3
   22a28:	ldr	r3, [pc, #144]	; 22ac0 <test_monster_with_size@@Base+0x170>
   22a2c:	add	r3, pc, r3
   22a30:	mov	r0, r3
   22a34:	bl	12918 <printf@plt>
   22a38:	mvn	r3, #0
   22a3c:	b	22aa0 <test_monster_with_size@@Base+0x150>
   22a40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22a44:	mov	r1, r3
   22a48:	ldr	r0, [fp, #-20]	; 0xffffffec
   22a4c:	bl	1f6a4 <_start@@Base+0xcc8c>
   22a50:	str	r0, [fp, #-28]	; 0xffffffe4
   22a54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22a58:	cmp	r3, #0
   22a5c:	beq	22a88 <test_monster_with_size@@Base+0x138>
   22a60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22a64:	bl	2e65c <flatcc_verify_error_string@@Base>
   22a68:	mov	r3, r0
   22a6c:	mov	r1, r3
   22a70:	ldr	r3, [pc, #76]	; 22ac4 <test_monster_with_size@@Base+0x174>
   22a74:	add	r3, pc, r3
   22a78:	mov	r0, r3
   22a7c:	bl	12918 <printf@plt>
   22a80:	mvn	r3, #0
   22a84:	b	22aa0 <test_monster_with_size@@Base+0x150>
   22a88:	ldr	r0, [fp, #-20]	; 0xffffffec
   22a8c:	bl	2102c <verify_monster@@Base>
   22a90:	str	r0, [fp, #-28]	; 0xffffffe4
   22a94:	ldr	r0, [fp, #-16]
   22a98:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   22a9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22aa0:	mov	r0, r3
   22aa4:	sub	sp, fp, #8
   22aa8:	pop	{r4, fp, pc}
   22aac:	muleq	r2, r4, r6
   22ab0:	andeq	r0, r0, r8, rrx
   22ab4:	andeq	pc, r0, ip, asr #21
   22ab8:	andeq	pc, r0, r8, asr #21
   22abc:	andeq	pc, r0, r4, lsl #22
   22ac0:	andeq	pc, r0, r0, asr #21
   22ac4:			; <UNDEFINED> instruction: 0x0000fab0

00022ac8 <test_string@@Base>:
   22ac8:	push	{fp, lr}
   22acc:	add	fp, sp, #4
   22ad0:	sub	sp, sp, #24
   22ad4:	str	r0, [fp, #-24]	; 0xffffffe8
   22ad8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22adc:	bl	286e4 <flatcc_builder_reset@@Base>
   22ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22ae4:	bl	1d28c <_start@@Base+0xa874>
   22ae8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22aec:	bl	1bf20 <_start@@Base+0x9508>
   22af0:	mov	r1, #3
   22af4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22af8:	bl	1c160 <_start@@Base+0x9748>
   22afc:	str	r0, [fp, #-8]
   22b00:	ldr	r3, [fp, #-8]
   22b04:	mov	r2, #49	; 0x31
   22b08:	strb	r2, [r3]
   22b0c:	ldr	r3, [fp, #-8]
   22b10:	add	r3, r3, #1
   22b14:	mov	r2, #50	; 0x32
   22b18:	strb	r2, [r3]
   22b1c:	ldr	r3, [fp, #-8]
   22b20:	add	r3, r3, #2
   22b24:	mov	r2, #51	; 0x33
   22b28:	strb	r2, [r3]
   22b2c:	ldr	r3, [pc, #480]	; 22d14 <test_string@@Base+0x24c>
   22b30:	add	r3, pc, r3
   22b34:	mov	r1, r3
   22b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22b3c:	bl	1c0d0 <_start@@Base+0x96b8>
   22b40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22b44:	bl	1c138 <_start@@Base+0x9720>
   22b48:	mov	r3, r0
   22b4c:	cmp	r3, #4
   22b50:	beq	22b74 <test_string@@Base+0xac>
   22b54:	ldr	r3, [pc, #444]	; 22d18 <test_string@@Base+0x250>
   22b58:	add	r3, pc, r3
   22b5c:	ldr	r2, [pc, #440]	; 22d1c <test_string@@Base+0x254>
   22b60:	ldr	r1, [pc, #440]	; 22d20 <test_string@@Base+0x258>
   22b64:	add	r1, pc, r1
   22b68:	ldr	r0, [pc, #436]	; 22d24 <test_string@@Base+0x25c>
   22b6c:	add	r0, pc, r0
   22b70:	bl	12a08 <__assert_fail@plt>
   22b74:	mov	r2, #30
   22b78:	ldr	r3, [pc, #424]	; 22d28 <test_string@@Base+0x260>
   22b7c:	add	r3, pc, r3
   22b80:	mov	r1, r3
   22b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22b88:	bl	1c100 <_start@@Base+0x96e8>
   22b8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22b90:	bl	1c138 <_start@@Base+0x9720>
   22b94:	mov	r3, r0
   22b98:	cmp	r3, #8
   22b9c:	beq	22bc0 <test_string@@Base+0xf8>
   22ba0:	ldr	r3, [pc, #388]	; 22d2c <test_string@@Base+0x264>
   22ba4:	add	r3, pc, r3
   22ba8:	ldr	r2, [pc, #384]	; 22d30 <test_string@@Base+0x268>
   22bac:	ldr	r1, [pc, #384]	; 22d34 <test_string@@Base+0x26c>
   22bb0:	add	r1, pc, r1
   22bb4:	ldr	r0, [pc, #380]	; 22d38 <test_string@@Base+0x270>
   22bb8:	add	r0, pc, r0
   22bbc:	bl	12a08 <__assert_fail@plt>
   22bc0:	mov	r2, #2
   22bc4:	ldr	r3, [pc, #368]	; 22d3c <test_string@@Base+0x274>
   22bc8:	add	r3, pc, r3
   22bcc:	mov	r1, r3
   22bd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22bd4:	bl	1c098 <_start@@Base+0x9680>
   22bd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22bdc:	bl	1c138 <_start@@Base+0x9720>
   22be0:	mov	r3, r0
   22be4:	cmp	r3, #10
   22be8:	beq	22c0c <test_string@@Base+0x144>
   22bec:	ldr	r3, [pc, #332]	; 22d40 <test_string@@Base+0x278>
   22bf0:	add	r3, pc, r3
   22bf4:	ldr	r2, [pc, #328]	; 22d44 <test_string@@Base+0x27c>
   22bf8:	ldr	r1, [pc, #328]	; 22d48 <test_string@@Base+0x280>
   22bfc:	add	r1, pc, r1
   22c00:	ldr	r0, [pc, #324]	; 22d4c <test_string@@Base+0x284>
   22c04:	add	r0, pc, r0
   22c08:	bl	12a08 <__assert_fail@plt>
   22c0c:	mov	r1, #3
   22c10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c14:	bl	1c1b8 <_start@@Base+0x97a0>
   22c18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c1c:	bl	1c138 <_start@@Base+0x9720>
   22c20:	mov	r3, r0
   22c24:	cmp	r3, #7
   22c28:	beq	22c4c <test_string@@Base+0x184>
   22c2c:	ldr	r3, [pc, #284]	; 22d50 <test_string@@Base+0x288>
   22c30:	add	r3, pc, r3
   22c34:	ldr	r2, [pc, #280]	; 22d54 <test_string@@Base+0x28c>
   22c38:	ldr	r1, [pc, #280]	; 22d58 <test_string@@Base+0x290>
   22c3c:	add	r1, pc, r1
   22c40:	ldr	r0, [pc, #276]	; 22d5c <test_string@@Base+0x294>
   22c44:	add	r0, pc, r0
   22c48:	bl	12a08 <__assert_fail@plt>
   22c4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c50:	bl	1c190 <_start@@Base+0x9778>
   22c54:	str	r0, [fp, #-8]
   22c58:	ldr	r3, [fp, #-8]
   22c5c:	add	r3, r3, #4
   22c60:	mov	r2, #46	; 0x2e
   22c64:	strb	r2, [r3]
   22c68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c6c:	bl	1bf48 <_start@@Base+0x9530>
   22c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c74:	bl	1d334 <_start@@Base+0xa91c>
   22c78:	mov	r1, #0
   22c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22c80:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   22c84:	str	r0, [fp, #-12]
   22c88:	ldr	r3, [fp, #-12]
   22c8c:	cmp	r3, #0
   22c90:	bne	22cb4 <test_string@@Base+0x1ec>
   22c94:	ldr	r3, [pc, #196]	; 22d60 <test_string@@Base+0x298>
   22c98:	add	r3, pc, r3
   22c9c:	ldr	r2, [pc, #192]	; 22d64 <test_string@@Base+0x29c>
   22ca0:	ldr	r1, [pc, #192]	; 22d68 <test_string@@Base+0x2a0>
   22ca4:	add	r1, pc, r1
   22ca8:	ldr	r0, [pc, #188]	; 22d6c <test_string@@Base+0x2a4>
   22cac:	add	r0, pc, r0
   22cb0:	bl	12a08 <__assert_fail@plt>
   22cb4:	ldr	r0, [fp, #-12]
   22cb8:	bl	159f0 <_start@@Base+0x2fd8>
   22cbc:	str	r0, [fp, #-16]
   22cc0:	ldr	r0, [fp, #-16]
   22cc4:	bl	162b8 <_start@@Base+0x38a0>
   22cc8:	mov	r2, r0
   22ccc:	ldr	r3, [pc, #156]	; 22d70 <test_string@@Base+0x2a8>
   22cd0:	add	r3, pc, r3
   22cd4:	mov	r1, r3
   22cd8:	mov	r0, r2
   22cdc:	bl	1290c <strcmp@plt>
   22ce0:	mov	r3, r0
   22ce4:	cmp	r3, #0
   22ce8:	beq	22d04 <test_string@@Base+0x23c>
   22cec:	ldr	r3, [pc, #128]	; 22d74 <test_string@@Base+0x2ac>
   22cf0:	add	r3, pc, r3
   22cf4:	mov	r0, r3
   22cf8:	bl	1296c <puts@plt>
   22cfc:	mvn	r3, #0
   22d00:	b	22d08 <test_string@@Base+0x240>
   22d04:	mov	r3, #0
   22d08:	mov	r0, r3
   22d0c:	sub	sp, fp, #4
   22d10:	pop	{fp, pc}
   22d14:	andeq	pc, r0, r0, lsr sl	; <UNPREDICTABLE>
   22d18:	strdeq	r1, [r1], -r0
   22d1c:	andeq	r0, r0, r8, lsr r4
   22d20:	andeq	pc, r0, r8, lsl r3	; <UNPREDICTABLE>
   22d24:	strdeq	pc, [r0], -r8
   22d28:	andeq	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
   22d2c:	andeq	r1, r1, r4, lsr #15
   22d30:	andeq	r0, r0, sl, lsr r4
   22d34:	andeq	pc, r0, ip, asr #5
   22d38:	ldrdeq	pc, [r0], -ip
   22d3c:	strdeq	pc, [r0], -r4
   22d40:	andeq	r1, r1, r8, asr r7
   22d44:	andeq	r0, r0, ip, lsr r4
   22d48:	andeq	pc, r0, r0, lsl #5
   22d4c:			; <UNDEFINED> instruction: 0x0000f9bc
   22d50:	andeq	r1, r1, r8, lsl r7
   22d54:	andeq	r0, r0, lr, lsr r4
   22d58:	andeq	pc, r0, r0, asr #4
   22d5c:	andeq	pc, r0, r4, lsr #19
   22d60:			; <UNDEFINED> instruction: 0x000116b0
   22d64:	andeq	r0, r0, r5, asr #8
   22d68:	ldrdeq	pc, [r0], -r8
   22d6c:	andeq	pc, r0, r4, ror #18
   22d70:	andeq	pc, r0, r8, asr #18
   22d74:	andeq	pc, r0, r0, lsr r9	; <UNPREDICTABLE>

00022d78 <test_sort_find@@Base>:
   22d78:	push	{r4, fp, lr}
   22d7c:	add	fp, sp, #8
   22d80:	sub	sp, sp, #44	; 0x2c
   22d84:	str	r0, [fp, #-48]	; 0xffffffd0
   22d88:	ldr	r4, [pc, #1448]	; 23338 <test_sort_find@@Base+0x5c0>
   22d8c:	add	r4, pc, r4
   22d90:	mvn	r3, #0
   22d94:	str	r3, [fp, #-16]
   22d98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22d9c:	bl	286e4 <flatcc_builder_reset@@Base>
   22da0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22da4:	bl	1d28c <_start@@Base+0xa874>
   22da8:	ldr	r3, [pc, #1420]	; 2333c <test_sort_find@@Base+0x5c4>
   22dac:	add	r3, pc, r3
   22db0:	mov	r1, r3
   22db4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22db8:	bl	1bf80 <_start@@Base+0x9568>
   22dbc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22dc0:	bl	1c3cc <_start@@Base+0x99b4>
   22dc4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22dc8:	bl	1c558 <_start@@Base+0x9b40>
   22dcc:	ldr	r3, [pc, #1388]	; 23340 <test_sort_find@@Base+0x5c8>
   22dd0:	add	r3, pc, r3
   22dd4:	mov	r1, r3
   22dd8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22ddc:	bl	1bf80 <_start@@Base+0x9568>
   22de0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22de4:	bl	1c580 <_start@@Base+0x9b68>
   22de8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22dec:	bl	1c558 <_start@@Base+0x9b40>
   22df0:	ldr	r3, [pc, #1356]	; 23344 <test_sort_find@@Base+0x5cc>
   22df4:	add	r3, pc, r3
   22df8:	mov	r1, r3
   22dfc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e00:	bl	1bf80 <_start@@Base+0x9568>
   22e04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e08:	bl	1c580 <_start@@Base+0x9b68>
   22e0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e10:	bl	1c558 <_start@@Base+0x9b40>
   22e14:	ldr	r3, [pc, #1324]	; 23348 <test_sort_find@@Base+0x5d0>
   22e18:	add	r3, pc, r3
   22e1c:	mov	r1, r3
   22e20:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e24:	bl	1bf80 <_start@@Base+0x9568>
   22e28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e2c:	bl	1c580 <_start@@Base+0x9b68>
   22e30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e34:	bl	1c558 <_start@@Base+0x9b40>
   22e38:	ldr	r3, [pc, #1292]	; 2334c <test_sort_find@@Base+0x5d4>
   22e3c:	add	r3, pc, r3
   22e40:	mov	r1, r3
   22e44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e48:	bl	1bf80 <_start@@Base+0x9568>
   22e4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e50:	bl	1c580 <_start@@Base+0x9b68>
   22e54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e58:	bl	1c558 <_start@@Base+0x9b40>
   22e5c:	ldr	r3, [pc, #1260]	; 23350 <test_sort_find@@Base+0x5d8>
   22e60:	add	r3, pc, r3
   22e64:	mov	r1, r3
   22e68:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e6c:	bl	1bf80 <_start@@Base+0x9568>
   22e70:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e74:	bl	1c580 <_start@@Base+0x9b68>
   22e78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e7c:	bl	1c3f4 <_start@@Base+0x99dc>
   22e80:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e84:	bl	1d334 <_start@@Base+0xa91c>
   22e88:	sub	r3, fp, #40	; 0x28
   22e8c:	mov	r1, r3
   22e90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   22e94:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   22e98:	str	r0, [fp, #-20]	; 0xffffffec
   22e9c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   22ea0:	ldr	r3, [pc, #1196]	; 23354 <test_sort_find@@Base+0x5dc>
   22ea4:	ldr	r3, [r4, r3]
   22ea8:	ldr	r3, [r3]
   22eac:	ldr	r1, [fp, #-20]	; 0xffffffec
   22eb0:	ldr	r0, [pc, #1184]	; 23358 <test_sort_find@@Base+0x5e0>
   22eb4:	add	r0, pc, r0
   22eb8:	bl	1fc0c <_start@@Base+0xd1f4>
   22ebc:	ldr	r0, [fp, #-20]	; 0xffffffec
   22ec0:	bl	159f0 <_start@@Base+0x2fd8>
   22ec4:	str	r0, [fp, #-24]	; 0xffffffe8
   22ec8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   22ecc:	bl	173c4 <_start@@Base+0x49ac>
   22ed0:	str	r0, [fp, #-28]	; 0xffffffe4
   22ed4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ed8:	cmp	r3, #0
   22edc:	bne	22f00 <test_sort_find@@Base+0x188>
   22ee0:	ldr	r3, [pc, #1140]	; 2335c <test_sort_find@@Base+0x5e4>
   22ee4:	add	r3, pc, r3
   22ee8:	ldr	r2, [pc, #1136]	; 23360 <test_sort_find@@Base+0x5e8>
   22eec:	ldr	r1, [pc, #1136]	; 23364 <test_sort_find@@Base+0x5ec>
   22ef0:	add	r1, pc, r1
   22ef4:	ldr	r0, [pc, #1132]	; 23368 <test_sort_find@@Base+0x5f0>
   22ef8:	add	r0, pc, r0
   22efc:	bl	12a08 <__assert_fail@plt>
   22f00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f04:	str	r3, [fp, #-32]	; 0xffffffe0
   22f08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22f0c:	bl	16f08 <_start@@Base+0x44f0>
   22f10:	ldr	r2, [fp, #-40]	; 0xffffffd8
   22f14:	ldr	r3, [pc, #1080]	; 23354 <test_sort_find@@Base+0x5dc>
   22f18:	ldr	r3, [r4, r3]
   22f1c:	ldr	r3, [r3]
   22f20:	ldr	r1, [fp, #-20]	; 0xffffffec
   22f24:	ldr	r0, [pc, #1088]	; 2336c <test_sort_find@@Base+0x5f4>
   22f28:	add	r0, pc, r0
   22f2c:	bl	1fc0c <_start@@Base+0xd1f4>
   22f30:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22f34:	bl	158bc <_start@@Base+0x2ea4>
   22f38:	mov	r3, r0
   22f3c:	cmp	r3, #5
   22f40:	beq	22f58 <test_sort_find@@Base+0x1e0>
   22f44:	ldr	r3, [pc, #1060]	; 23370 <test_sort_find@@Base+0x5f8>
   22f48:	add	r3, pc, r3
   22f4c:	mov	r0, r3
   22f50:	bl	1296c <puts@plt>
   22f54:	b	23320 <test_sort_find@@Base+0x5a8>
   22f58:	mov	r1, #0
   22f5c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22f60:	bl	15900 <_start@@Base+0x2ee8>
   22f64:	mov	r3, r0
   22f68:	mov	r0, r3
   22f6c:	bl	162b8 <_start@@Base+0x38a0>
   22f70:	mov	r2, r0
   22f74:	ldr	r3, [pc, #1016]	; 23374 <test_sort_find@@Base+0x5fc>
   22f78:	add	r3, pc, r3
   22f7c:	mov	r1, r3
   22f80:	mov	r0, r2
   22f84:	bl	1290c <strcmp@plt>
   22f88:	mov	r3, r0
   22f8c:	cmp	r3, #0
   22f90:	beq	22fa8 <test_sort_find@@Base+0x230>
   22f94:	ldr	r3, [pc, #988]	; 23378 <test_sort_find@@Base+0x600>
   22f98:	add	r3, pc, r3
   22f9c:	mov	r0, r3
   22fa0:	bl	1296c <puts@plt>
   22fa4:	b	23320 <test_sort_find@@Base+0x5a8>
   22fa8:	mov	r1, #1
   22fac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   22fb0:	bl	15900 <_start@@Base+0x2ee8>
   22fb4:	mov	r3, r0
   22fb8:	mov	r0, r3
   22fbc:	bl	162b8 <_start@@Base+0x38a0>
   22fc0:	mov	r2, r0
   22fc4:	ldr	r3, [pc, #944]	; 2337c <test_sort_find@@Base+0x604>
   22fc8:	add	r3, pc, r3
   22fcc:	mov	r1, r3
   22fd0:	mov	r0, r2
   22fd4:	bl	1290c <strcmp@plt>
   22fd8:	mov	r3, r0
   22fdc:	cmp	r3, #0
   22fe0:	beq	22ff8 <test_sort_find@@Base+0x280>
   22fe4:	ldr	r3, [pc, #916]	; 23380 <test_sort_find@@Base+0x608>
   22fe8:	add	r3, pc, r3
   22fec:	mov	r0, r3
   22ff0:	bl	1296c <puts@plt>
   22ff4:	b	23320 <test_sort_find@@Base+0x5a8>
   22ff8:	mov	r1, #2
   22ffc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   23000:	bl	15900 <_start@@Base+0x2ee8>
   23004:	mov	r3, r0
   23008:	mov	r0, r3
   2300c:	bl	162b8 <_start@@Base+0x38a0>
   23010:	mov	r2, r0
   23014:	ldr	r3, [pc, #872]	; 23384 <test_sort_find@@Base+0x60c>
   23018:	add	r3, pc, r3
   2301c:	mov	r1, r3
   23020:	mov	r0, r2
   23024:	bl	1290c <strcmp@plt>
   23028:	mov	r3, r0
   2302c:	cmp	r3, #0
   23030:	beq	23048 <test_sort_find@@Base+0x2d0>
   23034:	ldr	r3, [pc, #844]	; 23388 <test_sort_find@@Base+0x610>
   23038:	add	r3, pc, r3
   2303c:	mov	r0, r3
   23040:	bl	1296c <puts@plt>
   23044:	b	23320 <test_sort_find@@Base+0x5a8>
   23048:	mov	r1, #3
   2304c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   23050:	bl	15900 <_start@@Base+0x2ee8>
   23054:	mov	r3, r0
   23058:	mov	r0, r3
   2305c:	bl	162b8 <_start@@Base+0x38a0>
   23060:	mov	r2, r0
   23064:	ldr	r3, [pc, #800]	; 2338c <test_sort_find@@Base+0x614>
   23068:	add	r3, pc, r3
   2306c:	mov	r1, r3
   23070:	mov	r0, r2
   23074:	bl	1290c <strcmp@plt>
   23078:	mov	r3, r0
   2307c:	cmp	r3, #0
   23080:	beq	23098 <test_sort_find@@Base+0x320>
   23084:	ldr	r3, [pc, #772]	; 23390 <test_sort_find@@Base+0x618>
   23088:	add	r3, pc, r3
   2308c:	mov	r0, r3
   23090:	bl	1296c <puts@plt>
   23094:	b	23320 <test_sort_find@@Base+0x5a8>
   23098:	mov	r1, #4
   2309c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   230a0:	bl	15900 <_start@@Base+0x2ee8>
   230a4:	mov	r3, r0
   230a8:	mov	r0, r3
   230ac:	bl	162b8 <_start@@Base+0x38a0>
   230b0:	mov	r2, r0
   230b4:	ldr	r3, [pc, #728]	; 23394 <test_sort_find@@Base+0x61c>
   230b8:	add	r3, pc, r3
   230bc:	mov	r1, r3
   230c0:	mov	r0, r2
   230c4:	bl	1290c <strcmp@plt>
   230c8:	mov	r3, r0
   230cc:	cmp	r3, #0
   230d0:	beq	230e8 <test_sort_find@@Base+0x370>
   230d4:	ldr	r3, [pc, #700]	; 23398 <test_sort_find@@Base+0x620>
   230d8:	add	r3, pc, r3
   230dc:	mov	r0, r3
   230e0:	bl	1296c <puts@plt>
   230e4:	b	23320 <test_sort_find@@Base+0x5a8>
   230e8:	mov	r1, #1
   230ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   230f0:	bl	15900 <_start@@Base+0x2ee8>
   230f4:	mov	r4, r0
   230f8:	mov	r1, #2
   230fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   23100:	bl	15900 <_start@@Base+0x2ee8>
   23104:	mov	r3, r0
   23108:	cmp	r4, r3
   2310c:	bne	23124 <test_sort_find@@Base+0x3ac>
   23110:	ldr	r3, [pc, #644]	; 2339c <test_sort_find@@Base+0x624>
   23114:	add	r3, pc, r3
   23118:	mov	r0, r3
   2311c:	bl	1296c <puts@plt>
   23120:	b	23320 <test_sort_find@@Base+0x5a8>
   23124:	ldr	r3, [pc, #628]	; 233a0 <test_sort_find@@Base+0x628>
   23128:	add	r3, pc, r3
   2312c:	mov	r1, r3
   23130:	ldr	r0, [fp, #-28]	; 0xffffffe4
   23134:	bl	16f2c <_start@@Base+0x4514>
   23138:	mov	r3, r0
   2313c:	cmp	r3, #3
   23140:	beq	23158 <test_sort_find@@Base+0x3e0>
   23144:	ldr	r3, [pc, #600]	; 233a4 <test_sort_find@@Base+0x62c>
   23148:	add	r3, pc, r3
   2314c:	mov	r0, r3
   23150:	bl	1296c <puts@plt>
   23154:	b	23320 <test_sort_find@@Base+0x5a8>
   23158:	mov	r2, #5
   2315c:	ldr	r3, [pc, #580]	; 233a8 <test_sort_find@@Base+0x630>
   23160:	add	r3, pc, r3
   23164:	mov	r1, r3
   23168:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2316c:	bl	16f5c <_start@@Base+0x4544>
   23170:	mov	r3, r0
   23174:	cmp	r3, #3
   23178:	beq	23190 <test_sort_find@@Base+0x418>
   2317c:	ldr	r3, [pc, #552]	; 233ac <test_sort_find@@Base+0x634>
   23180:	add	r3, pc, r3
   23184:	mov	r0, r3
   23188:	bl	1296c <puts@plt>
   2318c:	b	23320 <test_sort_find@@Base+0x5a8>
   23190:	ldr	r3, [pc, #536]	; 233b0 <test_sort_find@@Base+0x638>
   23194:	add	r3, pc, r3
   23198:	mov	r1, r3
   2319c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   231a0:	bl	16980 <_start@@Base+0x3f68>
   231a4:	mov	r3, r0
   231a8:	cmp	r3, #3
   231ac:	beq	231c4 <test_sort_find@@Base+0x44c>
   231b0:	ldr	r3, [pc, #508]	; 233b4 <test_sort_find@@Base+0x63c>
   231b4:	add	r3, pc, r3
   231b8:	mov	r0, r3
   231bc:	bl	1296c <puts@plt>
   231c0:	b	23320 <test_sort_find@@Base+0x5a8>
   231c4:	mov	r2, #5
   231c8:	ldr	r3, [pc, #488]	; 233b8 <test_sort_find@@Base+0x640>
   231cc:	add	r3, pc, r3
   231d0:	mov	r1, r3
   231d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   231d8:	bl	16ac0 <_start@@Base+0x40a8>
   231dc:	mov	r3, r0
   231e0:	cmp	r3, #3
   231e4:	beq	231fc <test_sort_find@@Base+0x484>
   231e8:	ldr	r3, [pc, #460]	; 233bc <test_sort_find@@Base+0x644>
   231ec:	add	r3, pc, r3
   231f0:	mov	r0, r3
   231f4:	bl	1296c <puts@plt>
   231f8:	b	23320 <test_sort_find@@Base+0x5a8>
   231fc:	ldr	r3, [pc, #444]	; 233c0 <test_sort_find@@Base+0x648>
   23200:	add	r3, pc, r3
   23204:	mov	r1, r3
   23208:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2320c:	bl	16980 <_start@@Base+0x3f68>
   23210:	mov	r2, r0
   23214:	ldr	r3, [pc, #424]	; 233c4 <test_sort_find@@Base+0x64c>
   23218:	add	r3, pc, r3
   2321c:	ldr	r3, [r3]
   23220:	cmp	r2, r3
   23224:	beq	2323c <test_sort_find@@Base+0x4c4>
   23228:	ldr	r3, [pc, #408]	; 233c8 <test_sort_find@@Base+0x650>
   2322c:	add	r3, pc, r3
   23230:	mov	r0, r3
   23234:	bl	1296c <puts@plt>
   23238:	b	23320 <test_sort_find@@Base+0x5a8>
   2323c:	ldr	r3, [pc, #392]	; 233cc <test_sort_find@@Base+0x654>
   23240:	add	r3, pc, r3
   23244:	mov	r1, r3
   23248:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2324c:	bl	16980 <_start@@Base+0x3f68>
   23250:	mov	r3, r0
   23254:	cmp	r3, #0
   23258:	beq	23270 <test_sort_find@@Base+0x4f8>
   2325c:	ldr	r3, [pc, #364]	; 233d0 <test_sort_find@@Base+0x658>
   23260:	add	r3, pc, r3
   23264:	mov	r0, r3
   23268:	bl	1296c <puts@plt>
   2326c:	b	23320 <test_sort_find@@Base+0x5a8>
   23270:	ldr	r3, [pc, #348]	; 233d4 <test_sort_find@@Base+0x65c>
   23274:	add	r3, pc, r3
   23278:	mov	r1, r3
   2327c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   23280:	bl	16980 <_start@@Base+0x3f68>
   23284:	str	r0, [fp, #-36]	; 0xffffffdc
   23288:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2328c:	cmp	r3, #1
   23290:	beq	232c0 <test_sort_find@@Base+0x548>
   23294:	ldr	r3, [pc, #316]	; 233d8 <test_sort_find@@Base+0x660>
   23298:	add	r3, pc, r3
   2329c:	mov	r0, r3
   232a0:	bl	1296c <puts@plt>
   232a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   232a8:	mov	r1, r3
   232ac:	ldr	r3, [pc, #296]	; 233dc <test_sort_find@@Base+0x664>
   232b0:	add	r3, pc, r3
   232b4:	mov	r0, r3
   232b8:	bl	12918 <printf@plt>
   232bc:	b	23320 <test_sort_find@@Base+0x5a8>
   232c0:	ldr	r3, [pc, #280]	; 233e0 <test_sort_find@@Base+0x668>
   232c4:	add	r3, pc, r3
   232c8:	mov	r1, r3
   232cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   232d0:	bl	16980 <_start@@Base+0x3f68>
   232d4:	str	r0, [fp, #-36]	; 0xffffffdc
   232d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   232dc:	cmp	r3, #4
   232e0:	beq	23310 <test_sort_find@@Base+0x598>
   232e4:	ldr	r3, [pc, #248]	; 233e4 <test_sort_find@@Base+0x66c>
   232e8:	add	r3, pc, r3
   232ec:	mov	r0, r3
   232f0:	bl	1296c <puts@plt>
   232f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   232f8:	mov	r1, r3
   232fc:	ldr	r3, [pc, #228]	; 233e8 <test_sort_find@@Base+0x670>
   23300:	add	r3, pc, r3
   23304:	mov	r0, r3
   23308:	bl	12918 <printf@plt>
   2330c:	b	23320 <test_sort_find@@Base+0x5a8>
   23310:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23314:	bl	16f08 <_start@@Base+0x44f0>
   23318:	mov	r3, #0
   2331c:	str	r3, [fp, #-16]
   23320:	ldr	r0, [fp, #-20]	; 0xffffffec
   23324:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   23328:	ldr	r3, [fp, #-16]
   2332c:	mov	r0, r3
   23330:	sub	sp, fp, #8
   23334:	pop	{r4, fp, pc}
   23338:	andeq	r3, r2, ip, ror #4
   2333c:	ldrdeq	lr, [r0], -r4
   23340:	andeq	pc, r0, r8, lsl r1	; <UNPREDICTABLE>
   23344:	andeq	pc, r0, r0, ror r1	; <UNPREDICTABLE>
   23348:	andeq	pc, r0, r8, ror r1	; <UNPREDICTABLE>
   2334c:	strdeq	pc, [r0], -r8
   23350:	andeq	pc, r0, r0, lsr r1	; <UNPREDICTABLE>
   23354:	andeq	r0, r0, r8, rrx
   23358:	andeq	pc, r0, r8, lsl #15
   2335c:	andeq	r1, r1, r0, ror r4
   23360:	andeq	r0, r0, fp, ror r4
   23364:	andeq	lr, r0, ip, lsl #31
   23368:	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
   2336c:	andeq	pc, r0, r8, lsr r7	; <UNPREDICTABLE>
   23370:	andeq	pc, r0, r0, lsr r7	; <UNPREDICTABLE>
   23374:			; <UNDEFINED> instruction: 0x0000f6bc
   23378:	andeq	pc, r0, r8, lsl #14
   2337c:	andeq	lr, r0, r8, asr #31
   23380:	ldrdeq	pc, [r0], -r8
   23384:	andeq	lr, r0, r8, ror pc
   23388:	andeq	pc, r0, r8, lsr #13
   2338c:	strdeq	lr, [r0], -ip
   23390:	andeq	pc, r0, r8, ror r6	; <UNPREDICTABLE>
   23394:	andeq	lr, r0, r0, lsr lr
   23398:	andeq	pc, r0, r8, asr #12
   2339c:	andeq	pc, r0, ip, lsr #12
   233a0:	andeq	lr, r0, ip, lsr lr
   233a4:	andeq	pc, r0, r0, asr #12
   233a8:	andeq	pc, r0, r4, asr r6	; <UNPREDICTABLE>
   233ac:	andeq	pc, r0, ip, lsr r6	; <UNPREDICTABLE>
   233b0:	ldrdeq	lr, [r0], -r0
   233b4:	andeq	pc, r0, ip, lsr r6	; <UNPREDICTABLE>
   233b8:	andeq	pc, r0, r0, asr #12
   233bc:	andeq	pc, r0, r8, lsr #12
   233c0:	andeq	pc, r0, r8, lsr r6	; <UNPREDICTABLE>
   233c4:	andeq	r2, r2, r0, ror #28
   233c8:	andeq	pc, r0, r4, lsl r6	; <UNPREDICTABLE>
   233cc:	strdeq	pc, [r0], -r4
   233d0:	strdeq	pc, [r0], -r8
   233d4:	andeq	lr, r0, ip, lsl sp
   233d8:	ldrdeq	pc, [r0], -r0
   233dc:	andeq	pc, r0, ip, asr #11
   233e0:	andeq	lr, r0, r4, lsr #24
   233e4:	muleq	r0, ip, r5
   233e8:	andeq	pc, r0, ip, ror r5	; <UNPREDICTABLE>
   233ec:	push	{fp, lr}
   233f0:	add	fp, sp, #4
   233f4:	sub	sp, sp, #16
   233f8:	str	r0, [fp, #-16]
   233fc:	str	r1, [fp, #-20]	; 0xffffffec
   23400:	mov	r3, #0
   23404:	str	r3, [fp, #-12]
   23408:	ldr	r1, [fp, #-20]	; 0xffffffec
   2340c:	ldr	r0, [fp, #-16]
   23410:	bl	16f94 <_start@@Base+0x457c>
   23414:	str	r0, [fp, #-8]
   23418:	b	2344c <test_sort_find@@Base+0x6d4>
   2341c:	ldr	r3, [fp, #-12]
   23420:	add	r3, r3, #1
   23424:	str	r3, [fp, #-12]
   23428:	ldr	r3, [fp, #-8]
   2342c:	add	r1, r3, #1
   23430:	ldr	r3, [pc, #60]	; 23474 <test_sort_find@@Base+0x6fc>
   23434:	add	r3, pc, r3
   23438:	ldr	r2, [r3]
   2343c:	ldr	r3, [fp, #-20]	; 0xffffffec
   23440:	ldr	r0, [fp, #-16]
   23444:	bl	16ffc <_start@@Base+0x45e4>
   23448:	str	r0, [fp, #-8]
   2344c:	ldr	r3, [pc, #36]	; 23478 <test_sort_find@@Base+0x700>
   23450:	add	r3, pc, r3
   23454:	ldr	r3, [r3]
   23458:	ldr	r2, [fp, #-8]
   2345c:	cmp	r2, r3
   23460:	bne	2341c <test_sort_find@@Base+0x6a4>
   23464:	ldr	r3, [fp, #-12]
   23468:	mov	r0, r3
   2346c:	sub	sp, fp, #4
   23470:	pop	{fp, pc}
   23474:	andeq	r2, r2, r8, asr #24
   23478:	andeq	r2, r2, r8, lsr #24

0002347c <test_scan@@Base>:
   2347c:	push	{fp, lr}
   23480:	add	fp, sp, #4
   23484:	sub	sp, sp, #56	; 0x38
   23488:	str	r0, [fp, #-48]	; 0xffffffd0
   2348c:	ldr	r2, [pc, #3660]	; 242e0 <test_scan@@Base+0xe64>
   23490:	add	r2, pc, r2
   23494:	sub	r3, fp, #44	; 0x2c
   23498:	ldm	r2, {r0, r1}
   2349c:	str	r0, [r3]
   234a0:	add	r3, r3, #4
   234a4:	strh	r1, [r3]
   234a8:	add	r3, r3, #2
   234ac:	lsr	r2, r1, #16
   234b0:	strb	r2, [r3]
   234b4:	mvn	r3, #0
   234b8:	str	r3, [fp, #-8]
   234bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   234c0:	bl	286e4 <flatcc_builder_reset@@Base>
   234c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   234c8:	bl	1d28c <_start@@Base+0xa874>
   234cc:	ldr	r3, [pc, #3600]	; 242e4 <test_scan@@Base+0xe68>
   234d0:	add	r3, pc, r3
   234d4:	mov	r1, r3
   234d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   234dc:	bl	1bf80 <_start@@Base+0x9568>
   234e0:	sub	r3, fp, #44	; 0x2c
   234e4:	mov	r2, #7
   234e8:	mov	r1, r3
   234ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   234f0:	bl	1c324 <_start@@Base+0x990c>
   234f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   234f8:	bl	1c618 <_start@@Base+0x9c00>
   234fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23500:	bl	1c640 <_start@@Base+0x9c28>
   23504:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23508:	bl	1c3cc <_start@@Base+0x99b4>
   2350c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23510:	bl	1c558 <_start@@Base+0x9b40>
   23514:	ldr	r3, [pc, #3532]	; 242e8 <test_scan@@Base+0xe6c>
   23518:	add	r3, pc, r3
   2351c:	mov	r1, r3
   23520:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23524:	bl	1bf80 <_start@@Base+0x9568>
   23528:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2352c:	bl	1c580 <_start@@Base+0x9b68>
   23530:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23534:	bl	1c558 <_start@@Base+0x9b40>
   23538:	ldr	r3, [pc, #3500]	; 242ec <test_scan@@Base+0xe70>
   2353c:	add	r3, pc, r3
   23540:	mov	r1, r3
   23544:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23548:	bl	1bf80 <_start@@Base+0x9568>
   2354c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23550:	bl	1c580 <_start@@Base+0x9b68>
   23554:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23558:	bl	1c558 <_start@@Base+0x9b40>
   2355c:	ldr	r3, [pc, #3468]	; 242f0 <test_scan@@Base+0xe74>
   23560:	add	r3, pc, r3
   23564:	mov	r1, r3
   23568:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2356c:	bl	1bf80 <_start@@Base+0x9568>
   23570:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23574:	bl	1c580 <_start@@Base+0x9b68>
   23578:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2357c:	bl	1c558 <_start@@Base+0x9b40>
   23580:	ldr	r3, [pc, #3436]	; 242f4 <test_scan@@Base+0xe78>
   23584:	add	r3, pc, r3
   23588:	mov	r1, r3
   2358c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23590:	bl	1bf80 <_start@@Base+0x9568>
   23594:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23598:	bl	1c580 <_start@@Base+0x9b68>
   2359c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   235a0:	bl	1c558 <_start@@Base+0x9b40>
   235a4:	ldr	r3, [pc, #3404]	; 242f8 <test_scan@@Base+0xe7c>
   235a8:	add	r3, pc, r3
   235ac:	mov	r1, r3
   235b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   235b4:	bl	1bf80 <_start@@Base+0x9568>
   235b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   235bc:	bl	1c580 <_start@@Base+0x9b68>
   235c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   235c4:	bl	1c3f4 <_start@@Base+0x99dc>
   235c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   235cc:	bl	1d334 <_start@@Base+0xa91c>
   235d0:	sub	r3, fp, #36	; 0x24
   235d4:	mov	r1, r3
   235d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   235dc:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   235e0:	str	r0, [fp, #-12]
   235e4:	ldr	r0, [fp, #-12]
   235e8:	bl	159f0 <_start@@Base+0x2fd8>
   235ec:	str	r0, [fp, #-16]
   235f0:	ldr	r0, [fp, #-16]
   235f4:	bl	173c4 <_start@@Base+0x49ac>
   235f8:	str	r0, [fp, #-20]	; 0xffffffec
   235fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   23600:	cmp	r3, #0
   23604:	bne	23628 <test_scan@@Base+0x1ac>
   23608:	ldr	r3, [pc, #3308]	; 242fc <test_scan@@Base+0xe80>
   2360c:	add	r3, pc, r3
   23610:	ldr	r2, [pc, #3304]	; 24300 <test_scan@@Base+0xe84>
   23614:	ldr	r1, [pc, #3304]	; 24304 <test_scan@@Base+0xe88>
   23618:	add	r1, pc, r1
   2361c:	ldr	r0, [pc, #3300]	; 24308 <test_scan@@Base+0xe8c>
   23620:	add	r0, pc, r0
   23624:	bl	12a08 <__assert_fail@plt>
   23628:	ldr	r0, [fp, #-16]
   2362c:	bl	172bc <_start@@Base+0x48a4>
   23630:	str	r0, [fp, #-24]	; 0xffffffe8
   23634:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23638:	cmp	r3, #0
   2363c:	bne	23660 <test_scan@@Base+0x1e4>
   23640:	ldr	r3, [pc, #3268]	; 2430c <test_scan@@Base+0xe90>
   23644:	add	r3, pc, r3
   23648:	ldr	r2, [pc, #3264]	; 24310 <test_scan@@Base+0xe94>
   2364c:	ldr	r1, [pc, #3264]	; 24314 <test_scan@@Base+0xe98>
   23650:	add	r1, pc, r1
   23654:	ldr	r0, [pc, #3260]	; 24318 <test_scan@@Base+0xe9c>
   23658:	add	r0, pc, r0
   2365c:	bl	12a08 <__assert_fail@plt>
   23660:	ldr	r0, [fp, #-16]
   23664:	bl	174cc <_start@@Base+0x4ab4>
   23668:	str	r0, [fp, #-28]	; 0xffffffe4
   2366c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23670:	cmp	r3, #0
   23674:	bne	23698 <test_scan@@Base+0x21c>
   23678:	ldr	r3, [pc, #3228]	; 2431c <test_scan@@Base+0xea0>
   2367c:	add	r3, pc, r3
   23680:	ldr	r2, [pc, #3224]	; 24320 <test_scan@@Base+0xea4>
   23684:	ldr	r1, [pc, #3224]	; 24324 <test_scan@@Base+0xea8>
   23688:	add	r1, pc, r1
   2368c:	ldr	r0, [pc, #3220]	; 24328 <test_scan@@Base+0xeac>
   23690:	add	r0, pc, r0
   23694:	bl	12a08 <__assert_fail@plt>
   23698:	ldr	r3, [pc, #3212]	; 2432c <test_scan@@Base+0xeb0>
   2369c:	add	r3, pc, r3
   236a0:	mov	r1, r3
   236a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   236a8:	bl	16f94 <_start@@Base+0x457c>
   236ac:	mov	r3, r0
   236b0:	cmp	r3, #1
   236b4:	beq	236cc <test_scan@@Base+0x250>
   236b8:	ldr	r3, [pc, #3184]	; 24330 <test_scan@@Base+0xeb4>
   236bc:	add	r3, pc, r3
   236c0:	mov	r0, r3
   236c4:	bl	1296c <puts@plt>
   236c8:	b	242c8 <test_scan@@Base+0xe4c>
   236cc:	ldr	r3, [pc, #3168]	; 24334 <test_scan@@Base+0xeb8>
   236d0:	add	r3, pc, r3
   236d4:	mov	r1, r3
   236d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   236dc:	bl	1703c <_start@@Base+0x4624>
   236e0:	mov	r3, r0
   236e4:	cmp	r3, #1
   236e8:	beq	23700 <test_scan@@Base+0x284>
   236ec:	ldr	r3, [pc, #3140]	; 24338 <test_scan@@Base+0xebc>
   236f0:	add	r3, pc, r3
   236f4:	mov	r0, r3
   236f8:	bl	1296c <puts@plt>
   236fc:	b	242c8 <test_scan@@Base+0xe4c>
   23700:	mov	r2, #5
   23704:	ldr	r3, [pc, #3120]	; 2433c <test_scan@@Base+0xec0>
   23708:	add	r3, pc, r3
   2370c:	mov	r1, r3
   23710:	ldr	r0, [fp, #-20]	; 0xffffffec
   23714:	bl	16fc4 <_start@@Base+0x45ac>
   23718:	mov	r3, r0
   2371c:	cmp	r3, #1
   23720:	beq	23738 <test_scan@@Base+0x2bc>
   23724:	ldr	r3, [pc, #3092]	; 24340 <test_scan@@Base+0xec4>
   23728:	add	r3, pc, r3
   2372c:	mov	r0, r3
   23730:	bl	1296c <puts@plt>
   23734:	b	242c8 <test_scan@@Base+0xe4c>
   23738:	mov	r2, #5
   2373c:	ldr	r3, [pc, #3072]	; 24344 <test_scan@@Base+0xec8>
   23740:	add	r3, pc, r3
   23744:	mov	r1, r3
   23748:	ldr	r0, [fp, #-20]	; 0xffffffec
   2374c:	bl	1706c <_start@@Base+0x4654>
   23750:	mov	r3, r0
   23754:	cmp	r3, #1
   23758:	beq	23770 <test_scan@@Base+0x2f4>
   2375c:	ldr	r3, [pc, #3044]	; 24348 <test_scan@@Base+0xecc>
   23760:	add	r3, pc, r3
   23764:	mov	r0, r3
   23768:	bl	1296c <puts@plt>
   2376c:	b	242c8 <test_scan@@Base+0xe4c>
   23770:	ldr	r3, [pc, #3028]	; 2434c <test_scan@@Base+0xed0>
   23774:	add	r3, pc, r3
   23778:	ldr	r2, [r3]
   2377c:	ldr	r3, [pc, #3020]	; 24350 <test_scan@@Base+0xed4>
   23780:	add	r3, pc, r3
   23784:	mov	r1, #2
   23788:	ldr	r0, [fp, #-20]	; 0xffffffec
   2378c:	bl	16ffc <_start@@Base+0x45e4>
   23790:	mov	r2, r0
   23794:	ldr	r3, [pc, #3000]	; 24354 <test_scan@@Base+0xed8>
   23798:	add	r3, pc, r3
   2379c:	ldr	r3, [r3]
   237a0:	cmp	r2, r3
   237a4:	beq	237bc <test_scan@@Base+0x340>
   237a8:	ldr	r3, [pc, #2984]	; 24358 <test_scan@@Base+0xedc>
   237ac:	add	r3, pc, r3
   237b0:	mov	r0, r3
   237b4:	bl	1296c <puts@plt>
   237b8:	b	242c8 <test_scan@@Base+0xe4c>
   237bc:	ldr	r3, [pc, #2968]	; 2435c <test_scan@@Base+0xee0>
   237c0:	add	r3, pc, r3
   237c4:	mov	r1, r3
   237c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   237cc:	bl	16f94 <_start@@Base+0x457c>
   237d0:	mov	r2, r0
   237d4:	ldr	r3, [pc, #2948]	; 24360 <test_scan@@Base+0xee4>
   237d8:	add	r3, pc, r3
   237dc:	ldr	r3, [r3]
   237e0:	cmp	r2, r3
   237e4:	beq	237fc <test_scan@@Base+0x380>
   237e8:	ldr	r3, [pc, #2932]	; 24364 <test_scan@@Base+0xee8>
   237ec:	add	r3, pc, r3
   237f0:	mov	r0, r3
   237f4:	bl	1296c <puts@plt>
   237f8:	b	242c8 <test_scan@@Base+0xe4c>
   237fc:	ldr	r3, [pc, #2916]	; 24368 <test_scan@@Base+0xeec>
   23800:	add	r3, pc, r3
   23804:	mov	r1, r3
   23808:	ldr	r0, [fp, #-20]	; 0xffffffec
   2380c:	bl	16f94 <_start@@Base+0x457c>
   23810:	mov	r3, r0
   23814:	cmp	r3, #0
   23818:	beq	23830 <test_scan@@Base+0x3b4>
   2381c:	ldr	r3, [pc, #2888]	; 2436c <test_scan@@Base+0xef0>
   23820:	add	r3, pc, r3
   23824:	mov	r0, r3
   23828:	bl	1296c <puts@plt>
   2382c:	b	242c8 <test_scan@@Base+0xe4c>
   23830:	ldr	r3, [pc, #2872]	; 24370 <test_scan@@Base+0xef4>
   23834:	add	r3, pc, r3
   23838:	mov	r1, r3
   2383c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23840:	bl	163e8 <_start@@Base+0x39d0>
   23844:	mov	r3, r0
   23848:	cmp	r3, #2
   2384c:	beq	23864 <test_scan@@Base+0x3e8>
   23850:	ldr	r3, [pc, #2844]	; 24374 <test_scan@@Base+0xef8>
   23854:	add	r3, pc, r3
   23858:	mov	r0, r3
   2385c:	bl	1296c <puts@plt>
   23860:	b	242c8 <test_scan@@Base+0xe4c>
   23864:	ldr	r3, [pc, #2828]	; 24378 <test_scan@@Base+0xefc>
   23868:	add	r3, pc, r3
   2386c:	mov	r1, r3
   23870:	ldr	r0, [fp, #-20]	; 0xffffffec
   23874:	bl	166c4 <_start@@Base+0x3cac>
   23878:	mov	r3, r0
   2387c:	cmp	r3, #4
   23880:	beq	23898 <test_scan@@Base+0x41c>
   23884:	ldr	r3, [pc, #2800]	; 2437c <test_scan@@Base+0xf00>
   23888:	add	r3, pc, r3
   2388c:	mov	r0, r3
   23890:	bl	1296c <puts@plt>
   23894:	b	242c8 <test_scan@@Base+0xe4c>
   23898:	mov	r2, #8
   2389c:	ldr	r3, [pc, #2780]	; 24380 <test_scan@@Base+0xf04>
   238a0:	add	r3, pc, r3
   238a4:	mov	r1, r3
   238a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   238ac:	bl	16758 <_start@@Base+0x3d40>
   238b0:	mov	r3, r0
   238b4:	cmp	r3, #4
   238b8:	beq	238d0 <test_scan@@Base+0x454>
   238bc:	ldr	r3, [pc, #2752]	; 24384 <test_scan@@Base+0xf08>
   238c0:	add	r3, pc, r3
   238c4:	mov	r0, r3
   238c8:	bl	1296c <puts@plt>
   238cc:	b	242c8 <test_scan@@Base+0xe4c>
   238d0:	mov	r3, #8
   238d4:	str	r3, [sp]
   238d8:	ldr	r3, [pc, #2728]	; 24388 <test_scan@@Base+0xf0c>
   238dc:	add	r3, pc, r3
   238e0:	mov	r2, #3
   238e4:	mov	r1, #1
   238e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   238ec:	bl	168b8 <_start@@Base+0x3ea0>
   238f0:	mov	r3, r0
   238f4:	cmp	r3, #2
   238f8:	beq	23910 <test_scan@@Base+0x494>
   238fc:	ldr	r3, [pc, #2696]	; 2438c <test_scan@@Base+0xf10>
   23900:	add	r3, pc, r3
   23904:	mov	r0, r3
   23908:	bl	1296c <puts@plt>
   2390c:	b	242c8 <test_scan@@Base+0xe4c>
   23910:	ldr	r3, [pc, #2680]	; 24390 <test_scan@@Base+0xf14>
   23914:	add	r3, pc, r3
   23918:	ldr	r2, [r3]
   2391c:	ldr	r3, [pc, #2672]	; 24394 <test_scan@@Base+0xf18>
   23920:	add	r3, pc, r3
   23924:	mov	r1, #2
   23928:	ldr	r0, [fp, #-20]	; 0xffffffec
   2392c:	bl	16530 <_start@@Base+0x3b18>
   23930:	mov	r3, r0
   23934:	cmp	r3, #2
   23938:	beq	23950 <test_scan@@Base+0x4d4>
   2393c:	ldr	r3, [pc, #2644]	; 24398 <test_scan@@Base+0xf1c>
   23940:	add	r3, pc, r3
   23944:	mov	r0, r3
   23948:	bl	1296c <puts@plt>
   2394c:	b	242c8 <test_scan@@Base+0xe4c>
   23950:	ldr	r3, [pc, #2628]	; 2439c <test_scan@@Base+0xf20>
   23954:	add	r3, pc, r3
   23958:	ldr	r2, [r3]
   2395c:	mov	r3, #8
   23960:	str	r3, [sp]
   23964:	ldr	r3, [pc, #2612]	; 243a0 <test_scan@@Base+0xf24>
   23968:	add	r3, pc, r3
   2396c:	mov	r1, #2
   23970:	ldr	r0, [fp, #-20]	; 0xffffffec
   23974:	bl	165f8 <_start@@Base+0x3be0>
   23978:	mov	r3, r0
   2397c:	cmp	r3, #2
   23980:	beq	23998 <test_scan@@Base+0x51c>
   23984:	ldr	r3, [pc, #2584]	; 243a4 <test_scan@@Base+0xf28>
   23988:	add	r3, pc, r3
   2398c:	mov	r0, r3
   23990:	bl	1296c <puts@plt>
   23994:	b	242c8 <test_scan@@Base+0xe4c>
   23998:	ldr	r3, [pc, #2568]	; 243a8 <test_scan@@Base+0xf2c>
   2399c:	add	r3, pc, r3
   239a0:	ldr	r2, [r3]
   239a4:	ldr	r3, [pc, #2560]	; 243ac <test_scan@@Base+0xf30>
   239a8:	add	r3, pc, r3
   239ac:	mov	r1, #3
   239b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   239b4:	bl	16530 <_start@@Base+0x3b18>
   239b8:	mov	r3, r0
   239bc:	cmp	r3, #4
   239c0:	beq	239d8 <test_scan@@Base+0x55c>
   239c4:	ldr	r3, [pc, #2532]	; 243b0 <test_scan@@Base+0xf34>
   239c8:	add	r3, pc, r3
   239cc:	mov	r0, r3
   239d0:	bl	1296c <puts@plt>
   239d4:	b	242c8 <test_scan@@Base+0xe4c>
   239d8:	ldr	r3, [pc, #2516]	; 243b4 <test_scan@@Base+0xf38>
   239dc:	add	r3, pc, r3
   239e0:	mov	r2, #3
   239e4:	mov	r1, #1
   239e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   239ec:	bl	16ffc <_start@@Base+0x45e4>
   239f0:	mov	r2, r0
   239f4:	ldr	r3, [pc, #2492]	; 243b8 <test_scan@@Base+0xf3c>
   239f8:	add	r3, pc, r3
   239fc:	ldr	r3, [r3]
   23a00:	cmp	r2, r3
   23a04:	beq	23a1c <test_scan@@Base+0x5a0>
   23a08:	ldr	r3, [pc, #2476]	; 243bc <test_scan@@Base+0xf40>
   23a0c:	add	r3, pc, r3
   23a10:	mov	r0, r3
   23a14:	bl	1296c <puts@plt>
   23a18:	b	242c8 <test_scan@@Base+0xe4c>
   23a1c:	ldr	r3, [pc, #2460]	; 243c0 <test_scan@@Base+0xf44>
   23a20:	add	r3, pc, r3
   23a24:	mov	r2, #3
   23a28:	mov	r1, #1
   23a2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23a30:	bl	16ffc <_start@@Base+0x45e4>
   23a34:	mov	r2, r0
   23a38:	ldr	r3, [pc, #2436]	; 243c4 <test_scan@@Base+0xf48>
   23a3c:	add	r3, pc, r3
   23a40:	ldr	r3, [r3]
   23a44:	cmp	r2, r3
   23a48:	beq	23a60 <test_scan@@Base+0x5e4>
   23a4c:	ldr	r3, [pc, #2420]	; 243c8 <test_scan@@Base+0xf4c>
   23a50:	add	r3, pc, r3
   23a54:	mov	r0, r3
   23a58:	bl	1296c <puts@plt>
   23a5c:	b	242c8 <test_scan@@Base+0xe4c>
   23a60:	ldr	r3, [pc, #2404]	; 243cc <test_scan@@Base+0xf50>
   23a64:	add	r3, pc, r3
   23a68:	mov	r2, #3
   23a6c:	mov	r1, #1
   23a70:	ldr	r0, [fp, #-20]	; 0xffffffec
   23a74:	bl	16ffc <_start@@Base+0x45e4>
   23a78:	mov	r3, r0
   23a7c:	cmp	r3, #1
   23a80:	beq	23a98 <test_scan@@Base+0x61c>
   23a84:	ldr	r3, [pc, #2372]	; 243d0 <test_scan@@Base+0xf54>
   23a88:	add	r3, pc, r3
   23a8c:	mov	r0, r3
   23a90:	bl	1296c <puts@plt>
   23a94:	b	242c8 <test_scan@@Base+0xe4c>
   23a98:	ldr	r3, [pc, #2356]	; 243d4 <test_scan@@Base+0xf58>
   23a9c:	add	r3, pc, r3
   23aa0:	mov	r2, #3
   23aa4:	mov	r1, #1
   23aa8:	ldr	r0, [fp, #-20]	; 0xffffffec
   23aac:	bl	16530 <_start@@Base+0x3b18>
   23ab0:	mov	r3, r0
   23ab4:	cmp	r3, #2
   23ab8:	beq	23ad0 <test_scan@@Base+0x654>
   23abc:	ldr	r3, [pc, #2324]	; 243d8 <test_scan@@Base+0xf5c>
   23ac0:	add	r3, pc, r3
   23ac4:	mov	r0, r3
   23ac8:	bl	1296c <puts@plt>
   23acc:	b	242c8 <test_scan@@Base+0xe4c>
   23ad0:	ldr	r3, [pc, #2308]	; 243dc <test_scan@@Base+0xf60>
   23ad4:	add	r3, pc, r3
   23ad8:	mov	r2, #3
   23adc:	mov	r1, #1
   23ae0:	ldr	r0, [fp, #-20]	; 0xffffffec
   23ae4:	bl	16530 <_start@@Base+0x3b18>
   23ae8:	mov	r2, r0
   23aec:	ldr	r3, [pc, #2284]	; 243e0 <test_scan@@Base+0xf64>
   23af0:	add	r3, pc, r3
   23af4:	ldr	r3, [r3]
   23af8:	cmp	r2, r3
   23afc:	beq	23b14 <test_scan@@Base+0x698>
   23b00:	ldr	r3, [pc, #2268]	; 243e4 <test_scan@@Base+0xf68>
   23b04:	add	r3, pc, r3
   23b08:	mov	r0, r3
   23b0c:	bl	1296c <puts@plt>
   23b10:	b	242c8 <test_scan@@Base+0xe4c>
   23b14:	ldr	r3, [pc, #2252]	; 243e8 <test_scan@@Base+0xf6c>
   23b18:	add	r3, pc, r3
   23b1c:	mov	r2, #3
   23b20:	mov	r1, #1
   23b24:	ldr	r0, [fp, #-20]	; 0xffffffec
   23b28:	bl	170a4 <_start@@Base+0x468c>
   23b2c:	mov	r2, r0
   23b30:	ldr	r3, [pc, #2228]	; 243ec <test_scan@@Base+0xf70>
   23b34:	add	r3, pc, r3
   23b38:	ldr	r3, [r3]
   23b3c:	cmp	r2, r3
   23b40:	beq	23b58 <test_scan@@Base+0x6dc>
   23b44:	ldr	r3, [pc, #2212]	; 243f0 <test_scan@@Base+0xf74>
   23b48:	add	r3, pc, r3
   23b4c:	mov	r0, r3
   23b50:	bl	1296c <puts@plt>
   23b54:	b	242c8 <test_scan@@Base+0xe4c>
   23b58:	ldr	r3, [pc, #2196]	; 243f4 <test_scan@@Base+0xf78>
   23b5c:	add	r3, pc, r3
   23b60:	mov	r2, #3
   23b64:	mov	r1, #1
   23b68:	ldr	r0, [fp, #-20]	; 0xffffffec
   23b6c:	bl	170a4 <_start@@Base+0x468c>
   23b70:	mov	r2, r0
   23b74:	ldr	r3, [pc, #2172]	; 243f8 <test_scan@@Base+0xf7c>
   23b78:	add	r3, pc, r3
   23b7c:	ldr	r3, [r3]
   23b80:	cmp	r2, r3
   23b84:	beq	23b9c <test_scan@@Base+0x720>
   23b88:	ldr	r3, [pc, #2156]	; 243fc <test_scan@@Base+0xf80>
   23b8c:	add	r3, pc, r3
   23b90:	mov	r0, r3
   23b94:	bl	1296c <puts@plt>
   23b98:	b	242c8 <test_scan@@Base+0xe4c>
   23b9c:	ldr	r3, [pc, #2140]	; 24400 <test_scan@@Base+0xf84>
   23ba0:	add	r3, pc, r3
   23ba4:	mov	r2, #3
   23ba8:	mov	r1, #1
   23bac:	ldr	r0, [fp, #-20]	; 0xffffffec
   23bb0:	bl	170a4 <_start@@Base+0x468c>
   23bb4:	mov	r3, r0
   23bb8:	cmp	r3, #1
   23bbc:	beq	23bd4 <test_scan@@Base+0x758>
   23bc0:	ldr	r3, [pc, #2108]	; 24404 <test_scan@@Base+0xf88>
   23bc4:	add	r3, pc, r3
   23bc8:	mov	r0, r3
   23bcc:	bl	1296c <puts@plt>
   23bd0:	b	242c8 <test_scan@@Base+0xe4c>
   23bd4:	ldr	r3, [pc, #2092]	; 24408 <test_scan@@Base+0xf8c>
   23bd8:	add	r3, pc, r3
   23bdc:	mov	r2, #3
   23be0:	mov	r1, #1
   23be4:	ldr	r0, [fp, #-20]	; 0xffffffec
   23be8:	bl	167f4 <_start@@Base+0x3ddc>
   23bec:	mov	r3, r0
   23bf0:	cmp	r3, #2
   23bf4:	beq	23c0c <test_scan@@Base+0x790>
   23bf8:	ldr	r3, [pc, #2060]	; 2440c <test_scan@@Base+0xf90>
   23bfc:	add	r3, pc, r3
   23c00:	mov	r0, r3
   23c04:	bl	1296c <puts@plt>
   23c08:	b	242c8 <test_scan@@Base+0xe4c>
   23c0c:	ldr	r3, [pc, #2044]	; 24410 <test_scan@@Base+0xf94>
   23c10:	add	r3, pc, r3
   23c14:	mov	r2, #3
   23c18:	mov	r1, #1
   23c1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23c20:	bl	167f4 <_start@@Base+0x3ddc>
   23c24:	mov	r2, r0
   23c28:	ldr	r3, [pc, #2020]	; 24414 <test_scan@@Base+0xf98>
   23c2c:	add	r3, pc, r3
   23c30:	ldr	r3, [r3]
   23c34:	cmp	r2, r3
   23c38:	beq	23c50 <test_scan@@Base+0x7d4>
   23c3c:	ldr	r3, [pc, #2004]	; 24418 <test_scan@@Base+0xf9c>
   23c40:	add	r3, pc, r3
   23c44:	mov	r0, r3
   23c48:	bl	1296c <puts@plt>
   23c4c:	b	242c8 <test_scan@@Base+0xe4c>
   23c50:	ldr	r3, [pc, #1988]	; 2441c <test_scan@@Base+0xfa0>
   23c54:	add	r3, pc, r3
   23c58:	mov	r2, #0
   23c5c:	mov	r1, #0
   23c60:	ldr	r0, [fp, #-20]	; 0xffffffec
   23c64:	bl	16ffc <_start@@Base+0x45e4>
   23c68:	mov	r2, r0
   23c6c:	ldr	r3, [pc, #1964]	; 24420 <test_scan@@Base+0xfa4>
   23c70:	add	r3, pc, r3
   23c74:	ldr	r3, [r3]
   23c78:	cmp	r2, r3
   23c7c:	beq	23c94 <test_scan@@Base+0x818>
   23c80:	ldr	r3, [pc, #1948]	; 24424 <test_scan@@Base+0xfa8>
   23c84:	add	r3, pc, r3
   23c88:	mov	r0, r3
   23c8c:	bl	1296c <puts@plt>
   23c90:	b	242c8 <test_scan@@Base+0xe4c>
   23c94:	ldr	r3, [pc, #1932]	; 24428 <test_scan@@Base+0xfac>
   23c98:	add	r3, pc, r3
   23c9c:	mov	r2, #0
   23ca0:	mov	r1, #0
   23ca4:	ldr	r0, [fp, #-20]	; 0xffffffec
   23ca8:	bl	16ffc <_start@@Base+0x45e4>
   23cac:	mov	r2, r0
   23cb0:	ldr	r3, [pc, #1908]	; 2442c <test_scan@@Base+0xfb0>
   23cb4:	add	r3, pc, r3
   23cb8:	ldr	r3, [r3]
   23cbc:	cmp	r2, r3
   23cc0:	beq	23cd8 <test_scan@@Base+0x85c>
   23cc4:	ldr	r3, [pc, #1892]	; 24430 <test_scan@@Base+0xfb4>
   23cc8:	add	r3, pc, r3
   23ccc:	mov	r0, r3
   23cd0:	bl	1296c <puts@plt>
   23cd4:	b	242c8 <test_scan@@Base+0xe4c>
   23cd8:	ldr	r3, [pc, #1876]	; 24434 <test_scan@@Base+0xfb8>
   23cdc:	add	r3, pc, r3
   23ce0:	mov	r2, #1
   23ce4:	mov	r1, #1
   23ce8:	ldr	r0, [fp, #-20]	; 0xffffffec
   23cec:	bl	16ffc <_start@@Base+0x45e4>
   23cf0:	mov	r2, r0
   23cf4:	ldr	r3, [pc, #1852]	; 24438 <test_scan@@Base+0xfbc>
   23cf8:	add	r3, pc, r3
   23cfc:	ldr	r3, [r3]
   23d00:	cmp	r2, r3
   23d04:	beq	23d1c <test_scan@@Base+0x8a0>
   23d08:	ldr	r3, [pc, #1836]	; 2443c <test_scan@@Base+0xfc0>
   23d0c:	add	r3, pc, r3
   23d10:	mov	r0, r3
   23d14:	bl	1296c <puts@plt>
   23d18:	b	242c8 <test_scan@@Base+0xe4c>
   23d1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23d20:	bl	158bc <_start@@Base+0x2ea4>
   23d24:	mov	r1, r0
   23d28:	ldr	r3, [pc, #1808]	; 24440 <test_scan@@Base+0xfc4>
   23d2c:	add	r3, pc, r3
   23d30:	ldr	r2, [r3]
   23d34:	ldr	r3, [pc, #1800]	; 24444 <test_scan@@Base+0xfc8>
   23d38:	add	r3, pc, r3
   23d3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23d40:	bl	16ffc <_start@@Base+0x45e4>
   23d44:	mov	r2, r0
   23d48:	ldr	r3, [pc, #1784]	; 24448 <test_scan@@Base+0xfcc>
   23d4c:	add	r3, pc, r3
   23d50:	ldr	r3, [r3]
   23d54:	cmp	r2, r3
   23d58:	beq	23d70 <test_scan@@Base+0x8f4>
   23d5c:	ldr	r3, [pc, #1768]	; 2444c <test_scan@@Base+0xfd0>
   23d60:	add	r3, pc, r3
   23d64:	mov	r0, r3
   23d68:	bl	1296c <puts@plt>
   23d6c:	b	242c8 <test_scan@@Base+0xe4c>
   23d70:	ldr	r3, [pc, #1752]	; 24450 <test_scan@@Base+0xfd4>
   23d74:	add	r3, pc, r3
   23d78:	mov	r2, #0
   23d7c:	mov	r1, #0
   23d80:	ldr	r0, [fp, #-20]	; 0xffffffec
   23d84:	bl	170a4 <_start@@Base+0x468c>
   23d88:	mov	r2, r0
   23d8c:	ldr	r3, [pc, #1728]	; 24454 <test_scan@@Base+0xfd8>
   23d90:	add	r3, pc, r3
   23d94:	ldr	r3, [r3]
   23d98:	cmp	r2, r3
   23d9c:	beq	23db4 <test_scan@@Base+0x938>
   23da0:	ldr	r3, [pc, #1712]	; 24458 <test_scan@@Base+0xfdc>
   23da4:	add	r3, pc, r3
   23da8:	mov	r0, r3
   23dac:	bl	1296c <puts@plt>
   23db0:	b	242c8 <test_scan@@Base+0xe4c>
   23db4:	ldr	r3, [pc, #1696]	; 2445c <test_scan@@Base+0xfe0>
   23db8:	add	r3, pc, r3
   23dbc:	mov	r2, #0
   23dc0:	mov	r1, #0
   23dc4:	ldr	r0, [fp, #-20]	; 0xffffffec
   23dc8:	bl	170a4 <_start@@Base+0x468c>
   23dcc:	mov	r2, r0
   23dd0:	ldr	r3, [pc, #1672]	; 24460 <test_scan@@Base+0xfe4>
   23dd4:	add	r3, pc, r3
   23dd8:	ldr	r3, [r3]
   23ddc:	cmp	r2, r3
   23de0:	beq	23df8 <test_scan@@Base+0x97c>
   23de4:	ldr	r3, [pc, #1656]	; 24464 <test_scan@@Base+0xfe8>
   23de8:	add	r3, pc, r3
   23dec:	mov	r0, r3
   23df0:	bl	1296c <puts@plt>
   23df4:	b	242c8 <test_scan@@Base+0xe4c>
   23df8:	ldr	r3, [pc, #1640]	; 24468 <test_scan@@Base+0xfec>
   23dfc:	add	r3, pc, r3
   23e00:	mov	r2, #1
   23e04:	mov	r1, #1
   23e08:	ldr	r0, [fp, #-20]	; 0xffffffec
   23e0c:	bl	170a4 <_start@@Base+0x468c>
   23e10:	mov	r2, r0
   23e14:	ldr	r3, [pc, #1616]	; 2446c <test_scan@@Base+0xff0>
   23e18:	add	r3, pc, r3
   23e1c:	ldr	r3, [r3]
   23e20:	cmp	r2, r3
   23e24:	beq	23e3c <test_scan@@Base+0x9c0>
   23e28:	ldr	r3, [pc, #1600]	; 24470 <test_scan@@Base+0xff4>
   23e2c:	add	r3, pc, r3
   23e30:	mov	r0, r3
   23e34:	bl	1296c <puts@plt>
   23e38:	b	242c8 <test_scan@@Base+0xe4c>
   23e3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23e40:	bl	158bc <_start@@Base+0x2ea4>
   23e44:	mov	r1, r0
   23e48:	ldr	r3, [pc, #1572]	; 24474 <test_scan@@Base+0xff8>
   23e4c:	add	r3, pc, r3
   23e50:	ldr	r2, [r3]
   23e54:	ldr	r3, [pc, #1564]	; 24478 <test_scan@@Base+0xffc>
   23e58:	add	r3, pc, r3
   23e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23e60:	bl	170a4 <_start@@Base+0x468c>
   23e64:	mov	r2, r0
   23e68:	ldr	r3, [pc, #1548]	; 2447c <test_scan@@Base+0x1000>
   23e6c:	add	r3, pc, r3
   23e70:	ldr	r3, [r3]
   23e74:	cmp	r2, r3
   23e78:	beq	23e90 <test_scan@@Base+0xa14>
   23e7c:	ldr	r3, [pc, #1532]	; 24480 <test_scan@@Base+0x1004>
   23e80:	add	r3, pc, r3
   23e84:	mov	r0, r3
   23e88:	bl	1296c <puts@plt>
   23e8c:	b	242c8 <test_scan@@Base+0xe4c>
   23e90:	ldr	r3, [pc, #1516]	; 24484 <test_scan@@Base+0x1008>
   23e94:	add	r3, pc, r3
   23e98:	mov	r1, r3
   23e9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   23ea0:	bl	233ec <test_sort_find@@Base+0x674>
   23ea4:	mov	r3, r0
   23ea8:	cmp	r3, #1
   23eac:	beq	23ec4 <test_scan@@Base+0xa48>
   23eb0:	ldr	r3, [pc, #1488]	; 24488 <test_scan@@Base+0x100c>
   23eb4:	add	r3, pc, r3
   23eb8:	mov	r0, r3
   23ebc:	bl	1296c <puts@plt>
   23ec0:	b	242c8 <test_scan@@Base+0xe4c>
   23ec4:	ldr	r3, [pc, #1472]	; 2448c <test_scan@@Base+0x1010>
   23ec8:	add	r3, pc, r3
   23ecc:	mov	r1, r3
   23ed0:	ldr	r0, [fp, #-20]	; 0xffffffec
   23ed4:	bl	233ec <test_sort_find@@Base+0x674>
   23ed8:	mov	r3, r0
   23edc:	cmp	r3, #0
   23ee0:	beq	23ef8 <test_scan@@Base+0xa7c>
   23ee4:	ldr	r3, [pc, #1444]	; 24490 <test_scan@@Base+0x1014>
   23ee8:	add	r3, pc, r3
   23eec:	mov	r0, r3
   23ef0:	bl	1296c <puts@plt>
   23ef4:	b	242c8 <test_scan@@Base+0xe4c>
   23ef8:	ldr	r3, [pc, #1428]	; 24494 <test_scan@@Base+0x1018>
   23efc:	add	r3, pc, r3
   23f00:	mov	r1, r3
   23f04:	ldr	r0, [fp, #-20]	; 0xffffffec
   23f08:	bl	233ec <test_sort_find@@Base+0x674>
   23f0c:	mov	r3, r0
   23f10:	cmp	r3, #1
   23f14:	beq	23f2c <test_scan@@Base+0xab0>
   23f18:	ldr	r3, [pc, #1400]	; 24498 <test_scan@@Base+0x101c>
   23f1c:	add	r3, pc, r3
   23f20:	mov	r0, r3
   23f24:	bl	1296c <puts@plt>
   23f28:	b	242c8 <test_scan@@Base+0xe4c>
   23f2c:	ldr	r3, [pc, #1384]	; 2449c <test_scan@@Base+0x1020>
   23f30:	add	r3, pc, r3
   23f34:	mov	r1, r3
   23f38:	ldr	r0, [fp, #-20]	; 0xffffffec
   23f3c:	bl	233ec <test_sort_find@@Base+0x674>
   23f40:	mov	r3, r0
   23f44:	cmp	r3, #2
   23f48:	beq	23f60 <test_scan@@Base+0xae4>
   23f4c:	ldr	r3, [pc, #1356]	; 244a0 <test_scan@@Base+0x1024>
   23f50:	add	r3, pc, r3
   23f54:	mov	r0, r3
   23f58:	bl	1296c <puts@plt>
   23f5c:	b	242c8 <test_scan@@Base+0xe4c>
   23f60:	mov	r1, #6
   23f64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f68:	bl	13b2c <_start@@Base+0x1114>
   23f6c:	str	r0, [fp, #-32]	; 0xffffffe0
   23f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23f74:	cmp	r3, #0
   23f78:	beq	23f90 <test_scan@@Base+0xb14>
   23f7c:	ldr	r3, [pc, #1312]	; 244a4 <test_scan@@Base+0x1028>
   23f80:	add	r3, pc, r3
   23f84:	mov	r0, r3
   23f88:	bl	1296c <puts@plt>
   23f8c:	b	242c8 <test_scan@@Base+0xe4c>
   23f90:	mov	r1, #1
   23f94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23f98:	bl	13b2c <_start@@Base+0x1114>
   23f9c:	str	r0, [fp, #-32]	; 0xffffffe0
   23fa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23fa4:	cmp	r3, #2
   23fa8:	beq	23fc0 <test_scan@@Base+0xb44>
   23fac:	ldr	r3, [pc, #1268]	; 244a8 <test_scan@@Base+0x102c>
   23fb0:	add	r3, pc, r3
   23fb4:	mov	r0, r3
   23fb8:	bl	1296c <puts@plt>
   23fbc:	b	242c8 <test_scan@@Base+0xe4c>
   23fc0:	ldr	r3, [pc, #1252]	; 244ac <test_scan@@Base+0x1030>
   23fc4:	add	r3, pc, r3
   23fc8:	ldr	r2, [r3]
   23fcc:	mov	r3, #1
   23fd0:	mov	r1, #3
   23fd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23fd8:	bl	13bcc <_start@@Base+0x11b4>
   23fdc:	str	r0, [fp, #-32]	; 0xffffffe0
   23fe0:	ldr	r3, [pc, #1224]	; 244b0 <test_scan@@Base+0x1034>
   23fe4:	add	r3, pc, r3
   23fe8:	ldr	r3, [r3]
   23fec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23ff0:	cmp	r2, r3
   23ff4:	beq	2400c <test_scan@@Base+0xb90>
   23ff8:	ldr	r3, [pc, #1204]	; 244b4 <test_scan@@Base+0x1038>
   23ffc:	add	r3, pc, r3
   24000:	mov	r0, r3
   24004:	bl	1296c <puts@plt>
   24008:	b	242c8 <test_scan@@Base+0xe4c>
   2400c:	mov	r1, #5
   24010:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24014:	bl	13b2c <_start@@Base+0x1114>
   24018:	str	r0, [fp, #-32]	; 0xffffffe0
   2401c:	ldr	r3, [pc, #1172]	; 244b8 <test_scan@@Base+0x103c>
   24020:	add	r3, pc, r3
   24024:	ldr	r3, [r3]
   24028:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2402c:	cmp	r2, r3
   24030:	beq	24048 <test_scan@@Base+0xbcc>
   24034:	ldr	r3, [pc, #1152]	; 244bc <test_scan@@Base+0x1040>
   24038:	add	r3, pc, r3
   2403c:	mov	r0, r3
   24040:	bl	1296c <puts@plt>
   24044:	b	242c8 <test_scan@@Base+0xe4c>
   24048:	mov	r1, #2
   2404c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24050:	bl	13b2c <_start@@Base+0x1114>
   24054:	str	r0, [fp, #-32]	; 0xffffffe0
   24058:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2405c:	cmp	r3, #6
   24060:	beq	24078 <test_scan@@Base+0xbfc>
   24064:	ldr	r3, [pc, #1108]	; 244c0 <test_scan@@Base+0x1044>
   24068:	add	r3, pc, r3
   2406c:	mov	r0, r3
   24070:	bl	1296c <puts@plt>
   24074:	b	242c8 <test_scan@@Base+0xe4c>
   24078:	mov	r1, #3
   2407c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24080:	bl	13b2c <_start@@Base+0x1114>
   24084:	str	r0, [fp, #-32]	; 0xffffffe0
   24088:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2408c:	cmp	r3, #3
   24090:	beq	240a8 <test_scan@@Base+0xc2c>
   24094:	ldr	r3, [pc, #1064]	; 244c4 <test_scan@@Base+0x1048>
   24098:	add	r3, pc, r3
   2409c:	mov	r0, r3
   240a0:	bl	1296c <puts@plt>
   240a4:	b	242c8 <test_scan@@Base+0xe4c>
   240a8:	ldr	r3, [pc, #1048]	; 244c8 <test_scan@@Base+0x104c>
   240ac:	add	r3, pc, r3
   240b0:	ldr	r2, [r3]
   240b4:	mov	r3, #3
   240b8:	mov	r1, #3
   240bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   240c0:	bl	13bcc <_start@@Base+0x11b4>
   240c4:	str	r0, [fp, #-32]	; 0xffffffe0
   240c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   240cc:	cmp	r3, #3
   240d0:	beq	240e8 <test_scan@@Base+0xc6c>
   240d4:	ldr	r3, [pc, #1008]	; 244cc <test_scan@@Base+0x1050>
   240d8:	add	r3, pc, r3
   240dc:	mov	r0, r3
   240e0:	bl	1296c <puts@plt>
   240e4:	b	242c8 <test_scan@@Base+0xe4c>
   240e8:	ldr	r3, [pc, #992]	; 244d0 <test_scan@@Base+0x1054>
   240ec:	add	r3, pc, r3
   240f0:	ldr	r2, [r3]
   240f4:	mov	r3, #3
   240f8:	mov	r1, #4
   240fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24100:	bl	13bcc <_start@@Base+0x11b4>
   24104:	str	r0, [fp, #-32]	; 0xffffffe0
   24108:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2410c:	cmp	r3, #5
   24110:	beq	24128 <test_scan@@Base+0xcac>
   24114:	ldr	r3, [pc, #952]	; 244d4 <test_scan@@Base+0x1058>
   24118:	add	r3, pc, r3
   2411c:	mov	r0, r3
   24120:	bl	1296c <puts@plt>
   24124:	b	242c8 <test_scan@@Base+0xe4c>
   24128:	mov	r1, #3
   2412c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24130:	bl	13c90 <_start@@Base+0x1278>
   24134:	str	r0, [fp, #-32]	; 0xffffffe0
   24138:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2413c:	cmp	r3, #5
   24140:	beq	24158 <test_scan@@Base+0xcdc>
   24144:	ldr	r3, [pc, #908]	; 244d8 <test_scan@@Base+0x105c>
   24148:	add	r3, pc, r3
   2414c:	mov	r0, r3
   24150:	bl	1296c <puts@plt>
   24154:	b	242c8 <test_scan@@Base+0xe4c>
   24158:	mov	r3, #3
   2415c:	mov	r2, #4
   24160:	mov	r1, #1
   24164:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24168:	bl	13d24 <_start@@Base+0x130c>
   2416c:	str	r0, [fp, #-32]	; 0xffffffe0
   24170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   24174:	cmp	r3, #3
   24178:	beq	24190 <test_scan@@Base+0xd14>
   2417c:	ldr	r3, [pc, #856]	; 244dc <test_scan@@Base+0x1060>
   24180:	add	r3, pc, r3
   24184:	mov	r0, r3
   24188:	bl	1296c <puts@plt>
   2418c:	b	242c8 <test_scan@@Base+0xe4c>
   24190:	ldr	r3, [pc, #840]	; 244e0 <test_scan@@Base+0x1064>
   24194:	add	r3, pc, r3
   24198:	mov	r1, r3
   2419c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   241a0:	bl	14098 <_start@@Base+0x1680>
   241a4:	ldr	r3, [pc, #824]	; 244e4 <test_scan@@Base+0x1068>
   241a8:	add	r3, pc, r3
   241ac:	ldr	r2, [r3]
   241b0:	ldr	r3, [pc, #816]	; 244e8 <test_scan@@Base+0x106c>
   241b4:	add	r3, pc, r3
   241b8:	mov	r1, #0
   241bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   241c0:	bl	141c4 <_start@@Base+0x17ac>
   241c4:	mov	r2, #4
   241c8:	ldr	r3, [pc, #796]	; 244ec <test_scan@@Base+0x1070>
   241cc:	add	r3, pc, r3
   241d0:	mov	r1, r3
   241d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   241d8:	bl	1412c <_start@@Base+0x1714>
   241dc:	ldr	r3, [pc, #780]	; 244f0 <test_scan@@Base+0x1074>
   241e0:	add	r3, pc, r3
   241e4:	ldr	r2, [r3]
   241e8:	mov	r3, #4
   241ec:	str	r3, [sp]
   241f0:	ldr	r3, [pc, #764]	; 244f4 <test_scan@@Base+0x1078>
   241f4:	add	r3, pc, r3
   241f8:	mov	r1, #0
   241fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24200:	bl	14280 <_start@@Base+0x1868>
   24204:	ldr	r3, [pc, #748]	; 244f8 <test_scan@@Base+0x107c>
   24208:	add	r3, pc, r3
   2420c:	mov	r1, r3
   24210:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24214:	bl	1433c <_start@@Base+0x1924>
   24218:	ldr	r3, [pc, #732]	; 244fc <test_scan@@Base+0x1080>
   2421c:	add	r3, pc, r3
   24220:	ldr	r2, [r3]
   24224:	ldr	r3, [pc, #724]	; 24500 <test_scan@@Base+0x1084>
   24228:	add	r3, pc, r3
   2422c:	mov	r1, #0
   24230:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24234:	bl	14450 <_start@@Base+0x1a38>
   24238:	mov	r2, #4
   2423c:	ldr	r3, [pc, #704]	; 24504 <test_scan@@Base+0x1088>
   24240:	add	r3, pc, r3
   24244:	mov	r1, r3
   24248:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2424c:	bl	143c4 <_start@@Base+0x19ac>
   24250:	ldr	r3, [pc, #688]	; 24508 <test_scan@@Base+0x108c>
   24254:	add	r3, pc, r3
   24258:	ldr	r2, [r3]
   2425c:	mov	r3, #4
   24260:	str	r3, [sp]
   24264:	ldr	r3, [pc, #672]	; 2450c <test_scan@@Base+0x1090>
   24268:	add	r3, pc, r3
   2426c:	mov	r1, #0
   24270:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24274:	bl	14508 <_start@@Base+0x1af0>
   24278:	mov	r1, #13
   2427c:	ldr	r0, [fp, #-20]	; 0xffffffec
   24280:	bl	15df8 <_start@@Base+0x33e0>
   24284:	ldr	r3, [pc, #644]	; 24510 <test_scan@@Base+0x1094>
   24288:	add	r3, pc, r3
   2428c:	ldr	r2, [r3]
   24290:	mov	r3, #42	; 0x2a
   24294:	mov	r1, #1
   24298:	ldr	r0, [fp, #-20]	; 0xffffffec
   2429c:	bl	15ea4 <_start@@Base+0x348c>
   242a0:	mov	r1, #1
   242a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   242a8:	bl	15f74 <_start@@Base+0x355c>
   242ac:	mov	r3, #42	; 0x2a
   242b0:	mov	r2, #2
   242b4:	mov	r1, #0
   242b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   242bc:	bl	16014 <_start@@Base+0x35fc>
   242c0:	mov	r3, #0
   242c4:	str	r3, [fp, #-8]
   242c8:	ldr	r0, [fp, #-12]
   242cc:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   242d0:	ldr	r3, [fp, #-8]
   242d4:	mov	r0, r3
   242d8:	sub	sp, fp, #4
   242dc:	pop	{fp, pc}
   242e0:	muleq	r0, r0, r9
   242e4:	strheq	lr, [r0], -r0
   242e8:	ldrdeq	lr, [r0], -r0
   242ec:	andeq	lr, r0, r8, lsr #20
   242f0:	andeq	lr, r0, r0, lsr sl
   242f4:	strheq	pc, [r0], -r0	; <UNPREDICTABLE>
   242f8:	andeq	lr, r0, r8, ror #19
   242fc:	andeq	r0, r1, r8, asr sp
   24300:	andeq	r0, r0, r9, lsl r5
   24304:	andeq	lr, r0, r4, ror #16
   24308:	andeq	pc, r0, r4, lsr r0	; <UNPREDICTABLE>
   2430c:	andeq	r0, r1, r0, lsr #26
   24310:	andeq	r0, r0, fp, lsl r5
   24314:	andeq	lr, r0, ip, lsr #16
   24318:	andeq	pc, r0, r0, asr #4
   2431c:	andeq	r0, r1, r8, ror #25
   24320:	andeq	r0, r0, sp, lsl r5
   24324:	strdeq	lr, [r0], -r4
   24328:	andeq	pc, r0, ip, lsl #4
   2432c:	andeq	lr, r0, r8, asr #17
   24330:	andeq	pc, r0, r8, ror #3
   24334:	muleq	r0, r4, r8
   24338:	ldrdeq	pc, [r0], -r4
   2433c:	andeq	pc, r0, r4, lsl #2
   24340:			; <UNDEFINED> instruction: 0x0000f1bc
   24344:	andeq	pc, r0, ip, asr #1
   24348:	andeq	pc, r0, r4, lsl #3
   2434c:	andeq	r2, r2, r8, lsl #18
   24350:	andeq	lr, r0, r4, ror #15
   24354:	andeq	r2, r2, r0, ror #17
   24358:	andeq	pc, r0, r0, ror #2
   2435c:	andeq	pc, r0, r8, ror r0	; <UNPREDICTABLE>
   24360:	andeq	r2, r2, r0, lsr #17
   24364:	andeq	pc, r0, r4, asr r0	; <UNPREDICTABLE>
   24368:	andeq	lr, r0, r8, ror #13
   2436c:	andeq	pc, r0, r4, rrx
   24370:	andeq	lr, r0, ip, asr r7
   24374:	andeq	pc, r0, r4, lsl r0	; <UNPREDICTABLE>
   24378:	andeq	lr, r0, r8, lsr #14
   2437c:	andeq	lr, r0, r0, ror #31
   24380:	muleq	r0, r8, r0
   24384:	andeq	pc, r0, r4, lsl #1
   24388:	andeq	pc, r0, ip, asr r0	; <UNPREDICTABLE>
   2438c:	andeq	pc, r0, r4, asr #32
   24390:	andeq	r2, r2, r8, ror #14
   24394:	andeq	lr, r0, r0, ror r6
   24398:	andeq	pc, r0, r0, lsr #32
   2439c:	andeq	r2, r2, r8, lsr #14
   243a0:	ldrdeq	lr, [r0], -r0
   243a4:	ldrdeq	lr, [r0], -r8
   243a8:	andeq	r2, r2, r0, ror #13
   243ac:	andeq	lr, r0, r8, ror #11
   243b0:	andeq	lr, r0, r4, asr #31
   243b4:	andeq	lr, r0, ip, asr lr
   243b8:	andeq	r2, r2, r0, lsl #13
   243bc:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   243c0:	andeq	lr, r0, r8, asr #9
   243c4:	andeq	r2, r2, ip, lsr r6
   243c8:	andeq	lr, r0, ip, ror pc
   243cc:	andeq	lr, r0, r0, lsl #10
   243d0:	andeq	lr, r0, r8, ror #30
   243d4:	strdeq	lr, [r0], -r4
   243d8:	andeq	lr, r0, r4, asr pc
   243dc:	andeq	lr, r0, r0, ror #22
   243e0:	andeq	r2, r2, r8, lsl #11
   243e4:	andeq	lr, r0, r8, lsr pc
   243e8:	andeq	lr, r0, r0, lsr #26
   243ec:	andeq	r2, r2, r4, asr #10
   243f0:	andeq	lr, r0, r0, lsr #30
   243f4:	andeq	lr, r0, ip, lsl #7
   243f8:	andeq	r2, r2, r0, lsl #10
   243fc:	andeq	lr, r0, ip, lsl #30
   24400:	andeq	lr, r0, r4, asr #7
   24404:	andeq	lr, r0, r0, lsl #30
   24408:			; <UNDEFINED> instruction: 0x0000e3b8
   2440c:	strdeq	lr, [r0], -r0
   24410:	andeq	lr, r0, r4, lsr #20
   24414:	andeq	r2, r2, ip, asr #8
   24418:	ldrdeq	lr, [r0], -r4
   2441c:	muleq	r0, r4, r2
   24420:	andeq	r2, r2, r8, lsl #8
   24424:			; <UNDEFINED> instruction: 0x0000eebc
   24428:	andeq	lr, r0, ip, asr #5
   2442c:	andeq	r2, r2, r4, asr #7
   24430:	muleq	r0, r8, lr
   24434:	andeq	lr, r0, r8, lsl #5
   24438:	andeq	r2, r2, r0, lsl #7
   2443c:	andeq	lr, r0, r4, ror lr
   24440:	andeq	r2, r2, r0, asr r3
   24444:			; <UNDEFINED> instruction: 0x0000e1b0
   24448:	andeq	r2, r2, ip, lsr #6
   2444c:	andeq	lr, r0, r8, asr #28
   24450:	andeq	lr, r0, r4, ror r1
   24454:	andeq	r2, r2, r8, ror #5
   24458:	muleq	r0, ip, sp
   2445c:	andeq	lr, r0, ip, lsr #3
   24460:	andeq	r2, r2, r4, lsr #5
   24464:	andeq	lr, r0, r8, ror sp
   24468:	andeq	lr, r0, r8, ror #2
   2446c:	andeq	r2, r2, r0, ror #4
   24470:	andeq	lr, r0, r4, asr sp
   24474:	andeq	r2, r2, r0, lsr r2
   24478:	muleq	r0, r0, r0
   2447c:	andeq	r2, r2, ip, lsl #4
   24480:	andeq	lr, r0, r8, lsr #26
   24484:	ldrdeq	lr, [r0], -r0
   24488:	andeq	lr, r0, r0, lsr #26
   2448c:	andeq	lr, r0, r0, ror r9
   24490:	andeq	lr, r0, r8, lsl #26
   24494:	andeq	sp, r0, ip, ror #31
   24498:	strdeq	lr, [r0], -r0
   2449c:	andeq	lr, r0, r0, rrx
   244a0:	ldrdeq	lr, [r0], -r8
   244a4:	andeq	lr, r0, r8, asr #25
   244a8:	andeq	lr, r0, r4, asr #25
   244ac:	strheq	r2, [r2], -r8
   244b0:	muleq	r2, r4, r0
   244b4:	andeq	lr, r0, r8, lsr #25
   244b8:	andeq	r2, r2, r8, asr r0
   244bc:	andeq	lr, r0, r4, lsr #25
   244c0:	andeq	lr, r0, r8, lsr #25
   244c4:	andeq	lr, r0, r4, asr #24
   244c8:	ldrdeq	r1, [r2], -r0
   244cc:	andeq	lr, r0, r4, ror #24
   244d0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   244d4:	andeq	lr, r0, r0, ror #24
   244d8:	andeq	lr, r0, ip, ror #24
   244dc:	andeq	lr, r0, r8, ror #24
   244e0:	strdeq	sp, [r0], -r4
   244e4:	ldrdeq	r1, [r2], -r4
   244e8:	ldrdeq	sp, [r0], -r4
   244ec:			; <UNDEFINED> instruction: 0x0000debc
   244f0:	muleq	r2, ip, lr
   244f4:	muleq	r0, r4, lr
   244f8:	andeq	sp, r0, r0, lsl #29
   244fc:	andeq	r1, r2, r0, ror #28
   24500:	andeq	sp, r0, r0, ror #28
   24504:	andeq	sp, r0, r8, asr #28
   24508:	andeq	r1, r2, r8, lsr #28
   2450c:	andeq	sp, r0, r0, lsr #28
   24510:	strdeq	r1, [r2], -r4

00024514 <test_basic_sort@@Base>:
   24514:	push	{r4, fp, lr}
   24518:	add	fp, sp, #8
   2451c:	sub	sp, sp, #60	; 0x3c
   24520:	str	r0, [fp, #-64]	; 0xffffffc0
   24524:	ldr	r2, [pc, #464]	; 246fc <test_basic_sort@@Base+0x1e8>
   24528:	add	r2, pc, r2
   2452c:	sub	r3, fp, #48	; 0x30
   24530:	ldm	r2, {r0, r1}
   24534:	str	r0, [r3]
   24538:	add	r3, r3, #4
   2453c:	strh	r1, [r3]
   24540:	add	r3, r3, #2
   24544:	lsr	r2, r1, #16
   24548:	strb	r2, [r3]
   2454c:	ldr	r2, [pc, #428]	; 24700 <test_basic_sort@@Base+0x1ec>
   24550:	add	r2, pc, r2
   24554:	sub	r3, fp, #56	; 0x38
   24558:	ldm	r2, {r0, r1}
   2455c:	str	r0, [r3]
   24560:	add	r3, r3, #4
   24564:	strh	r1, [r3]
   24568:	add	r3, r3, #2
   2456c:	lsr	r2, r1, #16
   24570:	strb	r2, [r3]
   24574:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24578:	bl	286e4 <flatcc_builder_reset@@Base>
   2457c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24580:	bl	1d28c <_start@@Base+0xa874>
   24584:	ldr	r3, [pc, #376]	; 24704 <test_basic_sort@@Base+0x1f0>
   24588:	add	r3, pc, r3
   2458c:	mov	r1, r3
   24590:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24594:	bl	1bf80 <_start@@Base+0x9568>
   24598:	sub	r3, fp, #48	; 0x30
   2459c:	mov	r2, #7
   245a0:	mov	r1, r3
   245a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   245a8:	bl	1c324 <_start@@Base+0x990c>
   245ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   245b0:	bl	1d334 <_start@@Base+0xa91c>
   245b4:	sub	r3, fp, #40	; 0x28
   245b8:	mov	r1, r3
   245bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   245c0:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   245c4:	str	r0, [fp, #-20]	; 0xffffffec
   245c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   245cc:	bl	159f0 <_start@@Base+0x2fd8>
   245d0:	str	r0, [fp, #-24]	; 0xffffffe8
   245d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   245d8:	bl	172bc <_start@@Base+0x48a4>
   245dc:	str	r0, [fp, #-28]	; 0xffffffe4
   245e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   245e4:	str	r3, [fp, #-32]	; 0xffffffe0
   245e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   245ec:	bl	13ff4 <_start@@Base+0x15dc>
   245f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   245f4:	bl	13958 <_start@@Base+0xf40>
   245f8:	mov	r3, r0
   245fc:	cmp	r3, #7
   24600:	beq	24624 <test_basic_sort@@Base+0x110>
   24604:	ldr	r3, [pc, #252]	; 24708 <test_basic_sort@@Base+0x1f4>
   24608:	add	r3, pc, r3
   2460c:	mov	r2, #1552	; 0x610
   24610:	ldr	r1, [pc, #244]	; 2470c <test_basic_sort@@Base+0x1f8>
   24614:	add	r1, pc, r1
   24618:	ldr	r0, [pc, #240]	; 24710 <test_basic_sort@@Base+0x1fc>
   2461c:	add	r0, pc, r0
   24620:	bl	12a08 <__assert_fail@plt>
   24624:	mov	r3, #0
   24628:	strb	r3, [fp, #-13]
   2462c:	b	246d4 <test_basic_sort@@Base+0x1c0>
   24630:	ldrb	r3, [fp, #-13]
   24634:	mov	r1, r3
   24638:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2463c:	bl	13980 <_start@@Base+0xf68>
   24640:	mov	r3, r0
   24644:	strb	r3, [fp, #-33]	; 0xffffffdf
   24648:	ldrb	r3, [fp, #-13]
   2464c:	sub	r2, fp, #12
   24650:	add	r3, r2, r3
   24654:	ldrb	r3, [r3, #-44]	; 0xffffffd4
   24658:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   2465c:	cmp	r2, r3
   24660:	beq	2467c <test_basic_sort@@Base+0x168>
   24664:	ldr	r3, [pc, #168]	; 24714 <test_basic_sort@@Base+0x200>
   24668:	add	r3, pc, r3
   2466c:	mov	r0, r3
   24670:	bl	1296c <puts@plt>
   24674:	mvn	r3, #0
   24678:	b	246f0 <test_basic_sort@@Base+0x1dc>
   2467c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   24680:	mov	r1, r3
   24684:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24688:	bl	13a00 <_start@@Base+0xfe8>
   2468c:	mov	r2, r0
   24690:	ldrb	r3, [fp, #-13]
   24694:	cmp	r3, #3
   24698:	beq	246a4 <test_basic_sort@@Base+0x190>
   2469c:	ldrb	r3, [fp, #-13]
   246a0:	b	246a8 <test_basic_sort@@Base+0x194>
   246a4:	mov	r3, #2
   246a8:	cmp	r2, r3
   246ac:	beq	246c8 <test_basic_sort@@Base+0x1b4>
   246b0:	ldr	r3, [pc, #96]	; 24718 <test_basic_sort@@Base+0x204>
   246b4:	add	r3, pc, r3
   246b8:	mov	r0, r3
   246bc:	bl	1296c <puts@plt>
   246c0:	mvn	r3, #0
   246c4:	b	246f0 <test_basic_sort@@Base+0x1dc>
   246c8:	ldrb	r3, [fp, #-13]
   246cc:	add	r3, r3, #1
   246d0:	strb	r3, [fp, #-13]
   246d4:	ldrb	r4, [fp, #-13]
   246d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   246dc:	bl	13958 <_start@@Base+0xf40>
   246e0:	mov	r3, r0
   246e4:	cmp	r4, r3
   246e8:	bcc	24630 <test_basic_sort@@Base+0x11c>
   246ec:	mov	r3, #0
   246f0:	mov	r0, r3
   246f4:	sub	sp, fp, #8
   246f8:	pop	{r4, fp, pc}
   246fc:	strdeq	lr, [r0], -r8
   24700:	andeq	lr, r0, r0, asr #18
   24704:	strdeq	ip, [r0], -r8
   24708:	andeq	pc, r0, r8, ror #26
   2470c:	andeq	sp, r0, r8, ror #16
   24710:	andeq	lr, r0, ip, lsl #16
   24714:	strdeq	lr, [r0], -r0
   24718:			; <UNDEFINED> instruction: 0x0000e7bc

0002471c <test_clone_slice@@Base>:
   2471c:	push	{r4, fp, lr}
   24720:	add	fp, sp, #8
   24724:	sub	sp, sp, #84	; 0x54
   24728:	str	r0, [fp, #-88]	; 0xffffffa8
   2472c:	ldr	r4, [pc, #1884]	; 24e90 <test_clone_slice@@Base+0x774>
   24730:	add	r4, pc, r4
   24734:	mvn	r3, #0
   24738:	str	r3, [fp, #-16]
   2473c:	ldr	r2, [pc, #1872]	; 24e94 <test_clone_slice@@Base+0x778>
   24740:	add	r2, pc, r2
   24744:	sub	r3, fp, #80	; 0x50
   24748:	ldm	r2, {r0, r1}
   2474c:	str	r0, [r3]
   24750:	add	r3, r3, #4
   24754:	strh	r1, [r3]
   24758:	add	r3, r3, #2
   2475c:	lsr	r2, r1, #16
   24760:	strb	r2, [r3]
   24764:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24768:	bl	286e4 <flatcc_builder_reset@@Base>
   2476c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24770:	bl	1d28c <_start@@Base+0xa874>
   24774:	ldr	r3, [pc, #1820]	; 24e98 <test_clone_slice@@Base+0x77c>
   24778:	add	r3, pc, r3
   2477c:	mov	r1, r3
   24780:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24784:	bl	1bf80 <_start@@Base+0x9568>
   24788:	sub	r3, fp, #80	; 0x50
   2478c:	mov	r2, #7
   24790:	mov	r1, r3
   24794:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24798:	bl	1c810 <_start@@Base+0x9df8>
   2479c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   247a0:	bl	1cccc <_start@@Base+0xa2b4>
   247a4:	mov	r1, #2
   247a8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   247ac:	bl	1cdbc <_start@@Base+0xa3a4>
   247b0:	str	r0, [fp, #-20]	; 0xffffffec
   247b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   247b8:	mov	r2, #22
   247bc:	strh	r2, [r3]
   247c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   247c4:	add	r3, r3, #4
   247c8:	mov	r2, #44	; 0x2c
   247cc:	strh	r2, [r3]
   247d0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   247d4:	bl	1ccf4 <_start@@Base+0xa2dc>
   247d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   247dc:	bl	1bc5c <_start@@Base+0x9244>
   247e0:	mov	r2, r0
   247e4:	ldr	r3, [pc, #1712]	; 24e9c <test_clone_slice@@Base+0x780>
   247e8:	str	r3, [r2]
   247ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   247f0:	bl	1d334 <_start@@Base+0xa91c>
   247f4:	sub	r3, fp, #72	; 0x48
   247f8:	mov	r1, r3
   247fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24800:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   24804:	str	r0, [fp, #-24]	; 0xffffffe8
   24808:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2480c:	ldr	r3, [pc, #1676]	; 24ea0 <test_clone_slice@@Base+0x784>
   24810:	ldr	r3, [r4, r3]
   24814:	ldr	r3, [r3]
   24818:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2481c:	ldr	r0, [pc, #1664]	; 24ea4 <test_clone_slice@@Base+0x788>
   24820:	add	r0, pc, r0
   24824:	bl	1fc0c <_start@@Base+0xd1f4>
   24828:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2482c:	bl	159f0 <_start@@Base+0x2fd8>
   24830:	str	r0, [fp, #-28]	; 0xffffffe4
   24834:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24838:	bl	286e4 <flatcc_builder_reset@@Base>
   2483c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24840:	bl	1d28c <_start@@Base+0xa874>
   24844:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24848:	bl	162b8 <_start@@Base+0x38a0>
   2484c:	str	r0, [fp, #-32]	; 0xffffffe0
   24850:	ldr	r3, [fp, #-32]	; 0xffffffe0
   24854:	cmp	r3, #0
   24858:	bne	2487c <test_clone_slice@@Base+0x160>
   2485c:	ldr	r3, [pc, #1604]	; 24ea8 <test_clone_slice@@Base+0x78c>
   24860:	add	r3, pc, r3
   24864:	ldr	r2, [pc, #1600]	; 24eac <test_clone_slice@@Base+0x790>
   24868:	ldr	r1, [pc, #1600]	; 24eb0 <test_clone_slice@@Base+0x794>
   2486c:	add	r1, pc, r1
   24870:	ldr	r0, [pc, #1596]	; 24eb4 <test_clone_slice@@Base+0x798>
   24874:	add	r0, pc, r0
   24878:	bl	12a08 <__assert_fail@plt>
   2487c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24880:	bl	175d0 <_start@@Base+0x4bb8>
   24884:	str	r0, [fp, #-36]	; 0xffffffdc
   24888:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2488c:	cmp	r3, #0
   24890:	bne	248b4 <test_clone_slice@@Base+0x198>
   24894:	ldr	r3, [pc, #1564]	; 24eb8 <test_clone_slice@@Base+0x79c>
   24898:	add	r3, pc, r3
   2489c:	ldr	r2, [pc, #1560]	; 24ebc <test_clone_slice@@Base+0x7a0>
   248a0:	ldr	r1, [pc, #1560]	; 24ec0 <test_clone_slice@@Base+0x7a4>
   248a4:	add	r1, pc, r1
   248a8:	ldr	r0, [pc, #1556]	; 24ec4 <test_clone_slice@@Base+0x7a8>
   248ac:	add	r0, pc, r0
   248b0:	bl	12a08 <__assert_fail@plt>
   248b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   248b8:	bl	17c18 <_start@@Base+0x5200>
   248bc:	str	r0, [fp, #-40]	; 0xffffffd8
   248c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   248c4:	cmp	r3, #0
   248c8:	bne	248ec <test_clone_slice@@Base+0x1d0>
   248cc:	ldr	r3, [pc, #1524]	; 24ec8 <test_clone_slice@@Base+0x7ac>
   248d0:	add	r3, pc, r3
   248d4:	ldr	r2, [pc, #1520]	; 24ecc <test_clone_slice@@Base+0x7b0>
   248d8:	ldr	r1, [pc, #1520]	; 24ed0 <test_clone_slice@@Base+0x7b4>
   248dc:	add	r1, pc, r1
   248e0:	ldr	r0, [pc, #1516]	; 24ed4 <test_clone_slice@@Base+0x7b8>
   248e4:	add	r0, pc, r0
   248e8:	bl	12a08 <__assert_fail@plt>
   248ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   248f0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   248f4:	bl	1c008 <_start@@Base+0x95f0>
   248f8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   248fc:	bl	1c618 <_start@@Base+0x9c00>
   24900:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24904:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24908:	bl	1c6c0 <_start@@Base+0x9ca8>
   2490c:	mov	r3, #20
   24910:	mov	r2, #4
   24914:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24918:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2491c:	bl	1c700 <_start@@Base+0x9ce8>
   24920:	mov	r3, #3
   24924:	mov	r2, #0
   24928:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2492c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24930:	bl	1c700 <_start@@Base+0x9ce8>
   24934:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24938:	bl	1c640 <_start@@Base+0x9c28>
   2493c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24940:	bl	1afa4 <_start@@Base+0x858c>
   24944:	mov	r3, #20
   24948:	mov	r2, #2
   2494c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24950:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24954:	bl	1c048 <_start@@Base+0x9630>
   24958:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2495c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24960:	bl	1c858 <_start@@Base+0x9e40>
   24964:	mov	r3, #2
   24968:	mov	r2, #1
   2496c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   24970:	ldr	r0, [fp, #-88]	; 0xffffffa8
   24974:	bl	1cd6c <_start@@Base+0xa354>
   24978:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2497c:	bl	1afd0 <_start@@Base+0x85b8>
   24980:	str	r0, [fp, #-44]	; 0xffffffd4
   24984:	sub	r3, fp, #68	; 0x44
   24988:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2498c:	mov	r0, r3
   24990:	bl	1b288 <_start@@Base+0x8870>
   24994:	sub	r3, fp, #68	; 0x44
   24998:	ldm	r3, {r1, r2}
   2499c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   249a0:	bl	1c9e0 <_start@@Base+0x9fc8>
   249a4:	mvn	r3, #0
   249a8:	mov	r2, #3
   249ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   249b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   249b4:	bl	1c898 <_start@@Base+0x9e80>
   249b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   249bc:	bl	15a5c <_start@@Base+0x3044>
   249c0:	mov	r3, r0
   249c4:	mov	r1, r3
   249c8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   249cc:	bl	1bcb4 <_start@@Base+0x929c>
   249d0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   249d4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   249d8:	bl	1cd2c <_start@@Base+0xa314>
   249dc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   249e0:	bl	1d334 <_start@@Base+0xa91c>
   249e4:	sub	r3, fp, #72	; 0x48
   249e8:	mov	r1, r3
   249ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   249f0:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   249f4:	str	r0, [fp, #-48]	; 0xffffffd0
   249f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   249fc:	ldr	r3, [pc, #1180]	; 24ea0 <test_clone_slice@@Base+0x784>
   24a00:	ldr	r3, [r4, r3]
   24a04:	ldr	r3, [r3]
   24a08:	ldr	r1, [fp, #-48]	; 0xffffffd0
   24a0c:	ldr	r0, [pc, #1220]	; 24ed8 <test_clone_slice@@Base+0x7bc>
   24a10:	add	r0, pc, r0
   24a14:	bl	1fc0c <_start@@Base+0xd1f4>
   24a18:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24a1c:	bl	159f0 <_start@@Base+0x2fd8>
   24a20:	str	r0, [fp, #-52]	; 0xffffffcc
   24a24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24a28:	bl	162b8 <_start@@Base+0x38a0>
   24a2c:	mov	r2, r0
   24a30:	ldr	r3, [pc, #1188]	; 24edc <test_clone_slice@@Base+0x7c0>
   24a34:	add	r3, pc, r3
   24a38:	mov	r1, r3
   24a3c:	mov	r0, r2
   24a40:	bl	1290c <strcmp@plt>
   24a44:	mov	r3, r0
   24a48:	cmp	r3, #0
   24a4c:	beq	24a64 <test_clone_slice@@Base+0x348>
   24a50:	ldr	r3, [pc, #1160]	; 24ee0 <test_clone_slice@@Base+0x7c4>
   24a54:	add	r3, pc, r3
   24a58:	mov	r0, r3
   24a5c:	bl	1296c <puts@plt>
   24a60:	b	24e74 <test_clone_slice@@Base+0x758>
   24a64:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24a68:	bl	174cc <_start@@Base+0x4ab4>
   24a6c:	str	r0, [fp, #-56]	; 0xffffffc8
   24a70:	mov	r1, #0
   24a74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24a78:	bl	135c4 <_start@@Base+0xbac>
   24a7c:	mov	r2, r0
   24a80:	ldr	r3, [pc, #1116]	; 24ee4 <test_clone_slice@@Base+0x7c8>
   24a84:	add	r3, pc, r3
   24a88:	mov	r1, r3
   24a8c:	mov	r0, r2
   24a90:	bl	1290c <strcmp@plt>
   24a94:	mov	r3, r0
   24a98:	cmp	r3, #0
   24a9c:	beq	24ab4 <test_clone_slice@@Base+0x398>
   24aa0:	ldr	r3, [pc, #1088]	; 24ee8 <test_clone_slice@@Base+0x7cc>
   24aa4:	add	r3, pc, r3
   24aa8:	mov	r0, r3
   24aac:	bl	1296c <puts@plt>
   24ab0:	b	24e74 <test_clone_slice@@Base+0x758>
   24ab4:	mov	r1, #1
   24ab8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24abc:	bl	135c4 <_start@@Base+0xbac>
   24ac0:	mov	r3, r0
   24ac4:	mov	r0, r3
   24ac8:	bl	1353c <_start@@Base+0xb24>
   24acc:	mov	r3, r0
   24ad0:	cmp	r3, #6
   24ad4:	beq	24aec <test_clone_slice@@Base+0x3d0>
   24ad8:	ldr	r3, [pc, #1036]	; 24eec <test_clone_slice@@Base+0x7d0>
   24adc:	add	r3, pc, r3
   24ae0:	mov	r0, r3
   24ae4:	bl	1296c <puts@plt>
   24ae8:	b	24e74 <test_clone_slice@@Base+0x758>
   24aec:	mov	r1, #1
   24af0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24af4:	bl	135c4 <_start@@Base+0xbac>
   24af8:	mov	r2, r0
   24afc:	ldr	r3, [pc, #1004]	; 24ef0 <test_clone_slice@@Base+0x7d4>
   24b00:	add	r3, pc, r3
   24b04:	mov	r1, r3
   24b08:	mov	r0, r2
   24b0c:	bl	1290c <strcmp@plt>
   24b10:	mov	r3, r0
   24b14:	cmp	r3, #0
   24b18:	beq	24b30 <test_clone_slice@@Base+0x414>
   24b1c:	ldr	r3, [pc, #976]	; 24ef4 <test_clone_slice@@Base+0x7d8>
   24b20:	add	r3, pc, r3
   24b24:	mov	r0, r3
   24b28:	bl	1296c <puts@plt>
   24b2c:	b	24e74 <test_clone_slice@@Base+0x758>
   24b30:	mov	r1, #2
   24b34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24b38:	bl	135c4 <_start@@Base+0xbac>
   24b3c:	mov	r3, r0
   24b40:	mov	r0, r3
   24b44:	bl	1353c <_start@@Base+0xb24>
   24b48:	mov	r3, r0
   24b4c:	cmp	r3, #3
   24b50:	beq	24b68 <test_clone_slice@@Base+0x44c>
   24b54:	ldr	r3, [pc, #924]	; 24ef8 <test_clone_slice@@Base+0x7dc>
   24b58:	add	r3, pc, r3
   24b5c:	mov	r0, r3
   24b60:	bl	1296c <puts@plt>
   24b64:	b	24e74 <test_clone_slice@@Base+0x758>
   24b68:	mov	r1, #2
   24b6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24b70:	bl	135c4 <_start@@Base+0xbac>
   24b74:	mov	r2, r0
   24b78:	ldr	r3, [pc, #892]	; 24efc <test_clone_slice@@Base+0x7e0>
   24b7c:	add	r3, pc, r3
   24b80:	mov	r1, r3
   24b84:	mov	r0, r2
   24b88:	bl	1290c <strcmp@plt>
   24b8c:	mov	r3, r0
   24b90:	cmp	r3, #0
   24b94:	beq	24bac <test_clone_slice@@Base+0x490>
   24b98:	ldr	r3, [pc, #864]	; 24f00 <test_clone_slice@@Base+0x7e4>
   24b9c:	add	r3, pc, r3
   24ba0:	mov	r0, r3
   24ba4:	bl	1296c <puts@plt>
   24ba8:	b	24e74 <test_clone_slice@@Base+0x758>
   24bac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24bb0:	bl	17a8c <_start@@Base+0x5074>
   24bb4:	str	r0, [fp, #-28]	; 0xffffffe4
   24bb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   24bbc:	cmp	r3, #0
   24bc0:	bne	24be4 <test_clone_slice@@Base+0x4c8>
   24bc4:	ldr	r3, [pc, #824]	; 24f04 <test_clone_slice@@Base+0x7e8>
   24bc8:	add	r3, pc, r3
   24bcc:	mov	r2, #1664	; 0x680
   24bd0:	ldr	r1, [pc, #816]	; 24f08 <test_clone_slice@@Base+0x7ec>
   24bd4:	add	r1, pc, r1
   24bd8:	ldr	r0, [pc, #812]	; 24f0c <test_clone_slice@@Base+0x7f0>
   24bdc:	add	r0, pc, r0
   24be0:	bl	12a08 <__assert_fail@plt>
   24be4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24be8:	bl	162b8 <_start@@Base+0x38a0>
   24bec:	mov	r2, r0
   24bf0:	ldr	r3, [pc, #792]	; 24f10 <test_clone_slice@@Base+0x7f4>
   24bf4:	add	r3, pc, r3
   24bf8:	mov	r1, r3
   24bfc:	mov	r0, r2
   24c00:	bl	1290c <strcmp@plt>
   24c04:	mov	r3, r0
   24c08:	cmp	r3, #0
   24c0c:	beq	24c24 <test_clone_slice@@Base+0x508>
   24c10:	ldr	r3, [pc, #764]	; 24f14 <test_clone_slice@@Base+0x7f8>
   24c14:	add	r3, pc, r3
   24c18:	mov	r0, r3
   24c1c:	bl	12918 <printf@plt>
   24c20:	b	24e74 <test_clone_slice@@Base+0x758>
   24c24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24c28:	bl	175d0 <_start@@Base+0x4bb8>
   24c2c:	str	r0, [fp, #-36]	; 0xffffffdc
   24c30:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24c34:	bl	138b0 <_start@@Base+0xe98>
   24c38:	mov	r3, r0
   24c3c:	cmp	r3, #7
   24c40:	beq	24c58 <test_clone_slice@@Base+0x53c>
   24c44:	ldr	r3, [pc, #716]	; 24f18 <test_clone_slice@@Base+0x7fc>
   24c48:	add	r3, pc, r3
   24c4c:	mov	r0, r3
   24c50:	bl	1296c <puts@plt>
   24c54:	b	24e74 <test_clone_slice@@Base+0x758>
   24c58:	sub	r3, fp, #80	; 0x50
   24c5c:	mov	r2, #7
   24c60:	mov	r1, r3
   24c64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24c68:	bl	1293c <memcmp@plt>
   24c6c:	mov	r3, r0
   24c70:	cmp	r3, #0
   24c74:	beq	24c8c <test_clone_slice@@Base+0x570>
   24c78:	ldr	r3, [pc, #668]	; 24f1c <test_clone_slice@@Base+0x800>
   24c7c:	add	r3, pc, r3
   24c80:	mov	r0, r3
   24c84:	bl	1296c <puts@plt>
   24c88:	b	24e74 <test_clone_slice@@Base+0x758>
   24c8c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24c90:	bl	175d0 <_start@@Base+0x4bb8>
   24c94:	str	r0, [fp, #-36]	; 0xffffffdc
   24c98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24c9c:	bl	138b0 <_start@@Base+0xe98>
   24ca0:	mov	r3, r0
   24ca4:	cmp	r3, #4
   24ca8:	beq	24cc0 <test_clone_slice@@Base+0x5a4>
   24cac:	ldr	r3, [pc, #620]	; 24f20 <test_clone_slice@@Base+0x804>
   24cb0:	add	r3, pc, r3
   24cb4:	mov	r0, r3
   24cb8:	bl	1296c <puts@plt>
   24cbc:	b	24e74 <test_clone_slice@@Base+0x758>
   24cc0:	sub	r3, fp, #80	; 0x50
   24cc4:	add	r3, r3, #3
   24cc8:	mov	r2, #4
   24ccc:	mov	r1, r3
   24cd0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24cd4:	bl	1293c <memcmp@plt>
   24cd8:	mov	r3, r0
   24cdc:	cmp	r3, #0
   24ce0:	beq	24cf8 <test_clone_slice@@Base+0x5dc>
   24ce4:	ldr	r3, [pc, #568]	; 24f24 <test_clone_slice@@Base+0x808>
   24ce8:	add	r3, pc, r3
   24cec:	mov	r0, r3
   24cf0:	bl	1296c <puts@plt>
   24cf4:	b	24e74 <test_clone_slice@@Base+0x758>
   24cf8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24cfc:	bl	15a5c <_start@@Base+0x3044>
   24d00:	mov	r3, r0
   24d04:	vldr	s15, [r3]
   24d08:	vldr	s14, [pc, #380]	; 24e8c <test_clone_slice@@Base+0x770>
   24d0c:	vcmp.f32	s15, s14
   24d10:	vmrs	APSR_nzcv, fpscr
   24d14:	beq	24d2c <test_clone_slice@@Base+0x610>
   24d18:	ldr	r3, [pc, #520]	; 24f28 <test_clone_slice@@Base+0x80c>
   24d1c:	add	r3, pc, r3
   24d20:	mov	r0, r3
   24d24:	bl	1296c <puts@plt>
   24d28:	b	24e74 <test_clone_slice@@Base+0x758>
   24d2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24d30:	bl	17c18 <_start@@Base+0x5200>
   24d34:	str	r0, [fp, #-40]	; 0xffffffd8
   24d38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24d3c:	bl	1494c <_start@@Base+0x1f34>
   24d40:	mov	r3, r0
   24d44:	cmp	r3, #2
   24d48:	beq	24d60 <test_clone_slice@@Base+0x644>
   24d4c:	ldr	r3, [pc, #472]	; 24f2c <test_clone_slice@@Base+0x810>
   24d50:	add	r3, pc, r3
   24d54:	mov	r0, r3
   24d58:	bl	1296c <puts@plt>
   24d5c:	b	24e74 <test_clone_slice@@Base+0x758>
   24d60:	mov	r1, #0
   24d64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24d68:	bl	148bc <_start@@Base+0x1ea4>
   24d6c:	str	r0, [fp, #-60]	; 0xffffffc4
   24d70:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24d74:	bl	14990 <_start@@Base+0x1f78>
   24d78:	mov	r3, r0
   24d7c:	cmp	r3, #22
   24d80:	beq	24d98 <test_clone_slice@@Base+0x67c>
   24d84:	ldr	r3, [pc, #420]	; 24f30 <test_clone_slice@@Base+0x814>
   24d88:	add	r3, pc, r3
   24d8c:	mov	r0, r3
   24d90:	bl	1296c <puts@plt>
   24d94:	b	24e74 <test_clone_slice@@Base+0x758>
   24d98:	mov	r1, #0
   24d9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24da0:	bl	148bc <_start@@Base+0x1ea4>
   24da4:	mov	r3, r0
   24da8:	ldrsh	r3, [r3]
   24dac:	cmp	r3, #22
   24db0:	beq	24dc8 <test_clone_slice@@Base+0x6ac>
   24db4:	ldr	r3, [pc, #376]	; 24f34 <test_clone_slice@@Base+0x818>
   24db8:	add	r3, pc, r3
   24dbc:	mov	r0, r3
   24dc0:	bl	1296c <puts@plt>
   24dc4:	b	24e74 <test_clone_slice@@Base+0x758>
   24dc8:	mov	r1, #1
   24dcc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24dd0:	bl	148bc <_start@@Base+0x1ea4>
   24dd4:	str	r0, [fp, #-60]	; 0xffffffc4
   24dd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24ddc:	bl	14990 <_start@@Base+0x1f78>
   24de0:	mov	r3, r0
   24de4:	cmp	r3, #44	; 0x2c
   24de8:	beq	24e00 <test_clone_slice@@Base+0x6e4>
   24dec:	ldr	r3, [pc, #324]	; 24f38 <test_clone_slice@@Base+0x81c>
   24df0:	add	r3, pc, r3
   24df4:	mov	r0, r3
   24df8:	bl	1296c <puts@plt>
   24dfc:	b	24e74 <test_clone_slice@@Base+0x758>
   24e00:	ldr	r0, [fp, #-28]	; 0xffffffe4
   24e04:	bl	17c18 <_start@@Base+0x5200>
   24e08:	str	r0, [fp, #-40]	; 0xffffffd8
   24e0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24e10:	bl	1494c <_start@@Base+0x1f34>
   24e14:	mov	r3, r0
   24e18:	cmp	r3, #1
   24e1c:	beq	24e34 <test_clone_slice@@Base+0x718>
   24e20:	ldr	r3, [pc, #276]	; 24f3c <test_clone_slice@@Base+0x820>
   24e24:	add	r3, pc, r3
   24e28:	mov	r0, r3
   24e2c:	bl	1296c <puts@plt>
   24e30:	b	24e74 <test_clone_slice@@Base+0x758>
   24e34:	mov	r1, #0
   24e38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24e3c:	bl	148bc <_start@@Base+0x1ea4>
   24e40:	str	r0, [fp, #-60]	; 0xffffffc4
   24e44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24e48:	bl	14990 <_start@@Base+0x1f78>
   24e4c:	mov	r3, r0
   24e50:	cmp	r3, #44	; 0x2c
   24e54:	beq	24e6c <test_clone_slice@@Base+0x750>
   24e58:	ldr	r3, [pc, #224]	; 24f40 <test_clone_slice@@Base+0x824>
   24e5c:	add	r3, pc, r3
   24e60:	mov	r0, r3
   24e64:	bl	1296c <puts@plt>
   24e68:	b	24e74 <test_clone_slice@@Base+0x758>
   24e6c:	mov	r3, #0
   24e70:	str	r3, [fp, #-16]
   24e74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   24e78:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   24e7c:	ldr	r3, [fp, #-16]
   24e80:	mov	r0, r3
   24e84:	sub	sp, fp, #8
   24e88:	pop	{r4, fp, pc}
   24e8c:	eorgt	r3, r9, #-872415232	; 0xcc000000
   24e90:	andeq	r1, r2, r8, asr #17
   24e94:	andeq	lr, r0, ip, lsl sl
   24e98:	andeq	lr, r0, r0, lsr #14
   24e9c:	eorgt	r3, r9, #-872415232	; 0xcc000000
   24ea0:	andeq	r0, r0, r8, rrx
   24ea4:	andeq	lr, r0, r4, lsl #13
   24ea8:	andeq	pc, r0, r0, lsr #22
   24eac:	andeq	r0, r0, r4, asr #12
   24eb0:	andeq	sp, r0, r0, lsl r6
   24eb4:	andeq	lr, r0, ip, asr #12
   24eb8:	andeq	pc, r0, r8, ror #21
   24ebc:	andeq	r0, r0, r6, asr #12
   24ec0:	ldrdeq	sp, [r0], -r8
   24ec4:	andeq	lr, r0, ip, lsl r6
   24ec8:			; <UNDEFINED> instruction: 0x0000fab0
   24ecc:	andeq	r0, r0, r8, asr #12
   24ed0:	andeq	sp, r0, r0, lsr #11
   24ed4:	andeq	lr, r0, ip, ror #11
   24ed8:	andeq	lr, r0, r8, asr #9
   24edc:	andeq	lr, r0, r4, ror #8
   24ee0:	muleq	r0, ip, r4
   24ee4:	andeq	lr, r0, r4, lsl r4
   24ee8:	andeq	lr, r0, r8, ror #8
   24eec:	andeq	lr, r0, r0, asr r4
   24ef0:	andeq	lr, r0, r0, asr r4
   24ef4:	andeq	lr, r0, r8, lsr r4
   24ef8:	andeq	lr, r0, ip, lsl r4
   24efc:	andeq	lr, r0, r8, lsl r4
   24f00:	strdeq	lr, [r0], -ip
   24f04:			; <UNDEFINED> instruction: 0x0000f7b8
   24f08:	andeq	sp, r0, r8, lsr #5
   24f0c:	andeq	sp, r0, r8, lsl #6
   24f10:			; <UNDEFINED> instruction: 0x0000e3bc
   24f14:	andeq	lr, r0, r8, lsr #7
   24f18:	andeq	lr, r0, r4, lsr #7
   24f1c:	andeq	lr, r0, ip, lsl #7
   24f20:	andeq	lr, r0, r8, ror r3
   24f24:	andeq	lr, r0, ip, asr r3
   24f28:	andeq	lr, r0, r8, asr #6
   24f2c:	andeq	lr, r0, r0, lsr r3
   24f30:	andeq	lr, r0, ip, lsr #6
   24f34:	andeq	lr, r0, r8, lsl r3
   24f38:	andeq	lr, r0, ip, lsl #6
   24f3c:	strdeq	lr, [r0], -r4
   24f40:	ldrdeq	lr, [r0], -ip

00024f44 <test_create_add_field@@Base>:
   24f44:	push	{fp, lr}
   24f48:	add	fp, sp, #4
   24f4c:	sub	sp, sp, #40	; 0x28
   24f50:	str	r0, [fp, #-32]	; 0xffffffe0
   24f54:	mvn	r3, #0
   24f58:	str	r3, [fp, #-8]
   24f5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24f60:	bl	286e4 <flatcc_builder_reset@@Base>
   24f64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24f68:	bl	1d28c <_start@@Base+0xa874>
   24f6c:	ldr	r3, [pc, #244]	; 25068 <test_create_add_field@@Base+0x124>
   24f70:	add	r3, pc, r3
   24f74:	mov	r1, r3
   24f78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24f7c:	bl	1bf80 <_start@@Base+0x9568>
   24f80:	ldr	r3, [pc, #228]	; 2506c <test_create_add_field@@Base+0x128>
   24f84:	add	r3, pc, r3
   24f88:	mov	r1, r3
   24f8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24f90:	bl	1a218 <_start@@Base+0x7800>
   24f94:	mov	r1, r0
   24f98:	mov	r3, #2
   24f9c:	str	r3, [sp]
   24fa0:	mvn	r2, #99	; 0x63
   24fa4:	mvn	r3, #0
   24fa8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24fac:	bl	1d164 <_start@@Base+0xa74c>
   24fb0:	mov	r1, #0
   24fb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24fb8:	bl	1c920 <_start@@Base+0x9f08>
   24fbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24fc0:	bl	1d334 <_start@@Base+0xa91c>
   24fc4:	sub	r3, fp, #24
   24fc8:	mov	r1, r3
   24fcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24fd0:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   24fd4:	str	r0, [fp, #-12]
   24fd8:	ldr	r0, [fp, #-12]
   24fdc:	bl	159f0 <_start@@Base+0x2fd8>
   24fe0:	str	r0, [fp, #-16]
   24fe4:	ldr	r0, [fp, #-16]
   24fe8:	bl	178b8 <_start@@Base+0x4ea0>
   24fec:	mov	r3, r0
   24ff0:	cmp	r3, #0
   24ff4:	beq	2500c <test_create_add_field@@Base+0xc8>
   24ff8:	ldr	r3, [pc, #112]	; 25070 <test_create_add_field@@Base+0x12c>
   24ffc:	add	r3, pc, r3
   25000:	mov	r0, r3
   25004:	bl	1296c <puts@plt>
   25008:	b	25050 <test_create_add_field@@Base+0x10c>
   2500c:	ldr	r0, [fp, #-16]
   25010:	bl	17e9c <_start@@Base+0x5484>
   25014:	str	r0, [fp, #-20]	; 0xffffffec
   25018:	ldr	r0, [fp, #-20]	; 0xffffffec
   2501c:	bl	15264 <_start@@Base+0x284c>
   25020:	mvn	r2, #99	; 0x63
   25024:	mvn	r3, #0
   25028:	cmp	r1, r3
   2502c:	cmpeq	r0, r2
   25030:	beq	25048 <test_create_add_field@@Base+0x104>
   25034:	ldr	r3, [pc, #56]	; 25074 <test_create_add_field@@Base+0x130>
   25038:	add	r3, pc, r3
   2503c:	mov	r0, r3
   25040:	bl	1296c <puts@plt>
   25044:	b	25050 <test_create_add_field@@Base+0x10c>
   25048:	mov	r3, #0
   2504c:	str	r3, [fp, #-8]
   25050:	ldr	r0, [fp, #-12]
   25054:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   25058:	ldr	r3, [fp, #-8]
   2505c:	mov	r0, r3
   25060:	sub	sp, fp, #4
   25064:	pop	{fp, pc}
   25068:	andeq	ip, r0, r0, lsl r6
   2506c:	andeq	lr, r0, r0, ror #3
   25070:	andeq	lr, r0, r0, ror r1
   25074:	andeq	lr, r0, r4, ror #2

00025078 <test_union_vector@@Base>:
   25078:	push	{r4, fp, lr}
   2507c:	add	fp, sp, #8
   25080:	sub	sp, sp, #100	; 0x64
   25084:	str	r0, [fp, #-96]	; 0xffffffa0
   25088:	mvn	r3, #0
   2508c:	str	r3, [fp, #-16]
   25090:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25094:	bl	286e4 <flatcc_builder_reset@@Base>
   25098:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2509c:	bl	1d28c <_start@@Base+0xa874>
   250a0:	ldr	r3, [pc, #756]	; 2539c <test_union_vector@@Base+0x324>
   250a4:	add	r3, pc, r3
   250a8:	mov	r1, r3
   250ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   250b0:	bl	1bf80 <_start@@Base+0x9568>
   250b4:	mov	r3, #2
   250b8:	str	r3, [sp]
   250bc:	mov	r3, #2
   250c0:	mov	r2, #2
   250c4:	mov	r1, #2
   250c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   250cc:	bl	1b8e4 <_start@@Base+0x8ecc>
   250d0:	str	r0, [fp, #-20]	; 0xffffffec
   250d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   250d8:	bl	1b360 <_start@@Base+0x8948>
   250dc:	sub	r3, fp, #60	; 0x3c
   250e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   250e4:	mov	r0, r3
   250e8:	bl	1b2d0 <_start@@Base+0x88b8>
   250ec:	sub	r3, fp, #60	; 0x3c
   250f0:	ldm	r3, {r1, r2}
   250f4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   250f8:	bl	1b3b8 <_start@@Base+0x89a0>
   250fc:	sub	r3, fp, #72	; 0x48
   25100:	ldr	r1, [fp, #-96]	; 0xffffffa0
   25104:	mov	r0, r3
   25108:	bl	1b388 <_start@@Base+0x8970>
   2510c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25110:	bl	1cbf8 <_start@@Base+0xa1e0>
   25114:	sub	r3, fp, #72	; 0x48
   25118:	ldm	r3, {r1, r2}
   2511c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25120:	bl	1bb9c <_start@@Base+0x9184>
   25124:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25128:	bl	1cc20 <_start@@Base+0xa208>
   2512c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25130:	bl	1d334 <_start@@Base+0xa91c>
   25134:	sub	r3, fp, #64	; 0x40
   25138:	mov	r1, r3
   2513c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25140:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   25144:	str	r0, [fp, #-24]	; 0xffffffe8
   25148:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2514c:	mov	r1, r3
   25150:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25154:	bl	1f6a4 <_start@@Base+0xcc8c>
   25158:	str	r0, [fp, #-16]
   2515c:	ldr	r3, [fp, #-16]
   25160:	cmp	r3, #0
   25164:	beq	25190 <test_union_vector@@Base+0x118>
   25168:	ldr	r0, [fp, #-16]
   2516c:	bl	2e65c <flatcc_verify_error_string@@Base>
   25170:	mov	r3, r0
   25174:	mov	r1, r3
   25178:	ldr	r3, [pc, #544]	; 253a0 <test_union_vector@@Base+0x328>
   2517c:	add	r3, pc, r3
   25180:	mov	r0, r3
   25184:	bl	12918 <printf@plt>
   25188:	mvn	r3, #0
   2518c:	b	25390 <test_union_vector@@Base+0x318>
   25190:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25194:	bl	159f0 <_start@@Base+0x2fd8>
   25198:	str	r0, [fp, #-28]	; 0xffffffe4
   2519c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   251a0:	bl	17994 <_start@@Base+0x4f7c>
   251a4:	mov	r3, r0
   251a8:	cmp	r3, #4
   251ac:	beq	251c4 <test_union_vector@@Base+0x14c>
   251b0:	ldr	r3, [pc, #492]	; 253a4 <test_union_vector@@Base+0x32c>
   251b4:	add	r3, pc, r3
   251b8:	mov	r0, r3
   251bc:	bl	12918 <printf@plt>
   251c0:	b	25384 <test_union_vector@@Base+0x30c>
   251c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   251c8:	bl	17a8c <_start@@Base+0x5074>
   251cc:	str	r0, [fp, #-32]	; 0xffffffe0
   251d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   251d4:	cmp	r3, #0
   251d8:	beq	251f0 <test_union_vector@@Base+0x178>
   251dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   251e0:	bl	15730 <_start@@Base+0x2d18>
   251e4:	mov	r3, r0
   251e8:	cmp	r3, #0
   251ec:	beq	25204 <test_union_vector@@Base+0x18c>
   251f0:	ldr	r3, [pc, #432]	; 253a8 <test_union_vector@@Base+0x330>
   251f4:	add	r3, pc, r3
   251f8:	mov	r0, r3
   251fc:	bl	1296c <puts@plt>
   25200:	b	25384 <test_union_vector@@Base+0x30c>
   25204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25208:	bl	15520 <_start@@Base+0x2b08>
   2520c:	str	r0, [fp, #-36]	; 0xffffffdc
   25210:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25214:	bl	15628 <_start@@Base+0x2c10>
   25218:	str	r0, [fp, #-40]	; 0xffffffd8
   2521c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25220:	bl	14c60 <_start@@Base+0x2248>
   25224:	str	r0, [fp, #-44]	; 0xffffffd4
   25228:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2522c:	cmp	r3, #1
   25230:	beq	25248 <test_union_vector@@Base+0x1d0>
   25234:	ldr	r3, [pc, #368]	; 253ac <test_union_vector@@Base+0x334>
   25238:	add	r3, pc, r3
   2523c:	mov	r0, r3
   25240:	bl	1296c <puts@plt>
   25244:	b	25384 <test_union_vector@@Base+0x30c>
   25248:	mov	r1, #0
   2524c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25250:	bl	14018 <_start@@Base+0x1600>
   25254:	mov	r3, r0
   25258:	cmp	r3, #2
   2525c:	beq	25274 <test_union_vector@@Base+0x1fc>
   25260:	ldr	r3, [pc, #328]	; 253b0 <test_union_vector@@Base+0x338>
   25264:	add	r3, pc, r3
   25268:	mov	r0, r3
   2526c:	bl	1296c <puts@plt>
   25270:	b	25384 <test_union_vector@@Base+0x30c>
   25274:	mov	r1, #0
   25278:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2527c:	bl	13694 <_start@@Base+0xc7c>
   25280:	str	r0, [fp, #-48]	; 0xffffffd0
   25284:	ldr	r3, [fp, #-48]	; 0xffffffd0
   25288:	cmp	r3, #0
   2528c:	bne	252a4 <test_union_vector@@Base+0x22c>
   25290:	ldr	r3, [pc, #284]	; 253b4 <test_union_vector@@Base+0x33c>
   25294:	add	r3, pc, r3
   25298:	mov	r0, r3
   2529c:	bl	1296c <puts@plt>
   252a0:	b	25384 <test_union_vector@@Base+0x30c>
   252a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   252a8:	bl	1508c <_start@@Base+0x2674>
   252ac:	mov	r3, r0
   252b0:	str	r3, [fp, #-52]	; 0xffffffcc
   252b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   252b8:	cmp	r3, #2
   252bc:	beq	252d8 <test_union_vector@@Base+0x260>
   252c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   252c4:	ldr	r3, [pc, #236]	; 253b8 <test_union_vector@@Base+0x340>
   252c8:	add	r3, pc, r3
   252cc:	mov	r0, r3
   252d0:	bl	12918 <printf@plt>
   252d4:	b	25384 <test_union_vector@@Base+0x30c>
   252d8:	sub	r3, fp, #80	; 0x50
   252dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   252e0:	mov	r0, r3
   252e4:	bl	15810 <_start@@Base+0x2df8>
   252e8:	sub	r3, fp, #80	; 0x50
   252ec:	ldm	r3, {r0, r1}
   252f0:	bl	14c88 <_start@@Base+0x2270>
   252f4:	mov	r3, r0
   252f8:	cmp	r3, #1
   252fc:	beq	25314 <test_union_vector@@Base+0x29c>
   25300:	ldr	r3, [pc, #180]	; 253bc <test_union_vector@@Base+0x344>
   25304:	add	r3, pc, r3
   25308:	mov	r0, r3
   2530c:	bl	1296c <puts@plt>
   25310:	b	25384 <test_union_vector@@Base+0x30c>
   25314:	sub	r0, fp, #88	; 0x58
   25318:	mov	r3, #0
   2531c:	sub	r2, fp, #80	; 0x50
   25320:	ldm	r2, {r1, r2}
   25324:	bl	14cb8 <_start@@Base+0x22a0>
   25328:	ldrb	r4, [fp, #-88]	; 0xffffffa8
   2532c:	mov	r1, #0
   25330:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25334:	bl	14018 <_start@@Base+0x1600>
   25338:	mov	r3, r0
   2533c:	cmp	r4, r3
   25340:	beq	25358 <test_union_vector@@Base+0x2e0>
   25344:	ldr	r3, [pc, #116]	; 253c0 <test_union_vector@@Base+0x348>
   25348:	add	r3, pc, r3
   2534c:	mov	r0, r3
   25350:	bl	1296c <puts@plt>
   25354:	b	25384 <test_union_vector@@Base+0x30c>
   25358:	ldr	r2, [fp, #-84]	; 0xffffffac
   2535c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   25360:	cmp	r2, r3
   25364:	beq	2537c <test_union_vector@@Base+0x304>
   25368:	ldr	r3, [pc, #84]	; 253c4 <test_union_vector@@Base+0x34c>
   2536c:	add	r3, pc, r3
   25370:	mov	r0, r3
   25374:	bl	1296c <puts@plt>
   25378:	b	25384 <test_union_vector@@Base+0x30c>
   2537c:	mov	r3, #0
   25380:	str	r3, [fp, #-16]
   25384:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25388:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   2538c:	ldr	r3, [fp, #-16]
   25390:	mov	r0, r3
   25394:	sub	sp, fp, #8
   25398:	pop	{r4, fp, pc}
   2539c:	andeq	lr, r0, ip, lsl #2
   253a0:	andeq	lr, r0, ip, lsr r0
   253a4:	andeq	lr, r0, r0, asr #32
   253a8:	andeq	lr, r0, r4, lsr #32
   253ac:	andeq	lr, r0, r8
   253b0:	andeq	lr, r0, r4
   253b4:	andeq	lr, r0, r4
   253b8:	andeq	sp, r0, r0, ror #31
   253bc:	andeq	sp, r0, r4, asr #31
   253c0:	andeq	sp, r0, r4, asr #31
   253c4:			; <UNDEFINED> instruction: 0x0000dfbc

000253c8 <test_mixed_type_union@@Base>:
   253c8:	push	{r4, fp, lr}
   253cc:	add	fp, sp, #8
   253d0:	sub	sp, sp, #100	; 0x64
   253d4:	str	r0, [fp, #-96]	; 0xffffffa0
   253d8:	ldr	r4, [pc, #2464]	; 25d80 <test_mixed_type_union@@Base+0x9b8>
   253dc:	add	r4, pc, r4
   253e0:	mvn	r3, #0
   253e4:	str	r3, [fp, #-16]
   253e8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   253ec:	bl	286e4 <flatcc_builder_reset@@Base>
   253f0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   253f4:	bl	1e3d0 <_start@@Base+0xb9b8>
   253f8:	mov	r1, #10
   253fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25400:	bl	1acac <_start@@Base+0x8294>
   25404:	str	r0, [fp, #-20]	; 0xffffffec
   25408:	mov	r1, #22
   2540c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25410:	bl	1ab98 <_start@@Base+0x8180>
   25414:	str	r0, [fp, #-24]	; 0xffffffe8
   25418:	sub	r3, fp, #72	; 0x48
   2541c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   25420:	mov	r0, r3
   25424:	bl	1b438 <_start@@Base+0x8a20>
   25428:	mov	r1, #19
   2542c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25430:	bl	1dca8 <_start@@Base+0xb290>
   25434:	ldr	r1, [fp, #-24]	; 0xffffffe8
   25438:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2543c:	bl	1dff0 <_start@@Base+0xb5d8>
   25440:	mov	r1, #42	; 0x2a
   25444:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25448:	bl	1db98 <_start@@Base+0xb180>
   2544c:	str	r0, [fp, #-28]	; 0xffffffe4
   25450:	ldr	r1, [fp, #-28]	; 0xffffffe4
   25454:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25458:	bl	1ddc8 <_start@@Base+0xb3b0>
   2545c:	ldr	r3, [pc, #2336]	; 25d84 <test_mixed_type_union@@Base+0x9bc>
   25460:	add	r3, pc, r3
   25464:	mov	r1, r3
   25468:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2546c:	bl	1df00 <_start@@Base+0xb4e8>
   25470:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25474:	bl	1e0f4 <_start@@Base+0xb6dc>
   25478:	sub	r3, fp, #72	; 0x48
   2547c:	ldm	r3, {r1, r2}
   25480:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25484:	bl	1e15c <_start@@Base+0xb744>
   25488:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2548c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25490:	bl	1e194 <_start@@Base+0xb77c>
   25494:	mov	r1, #1
   25498:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2549c:	bl	1e1d8 <_start@@Base+0xb7c0>
   254a0:	ldr	r3, [pc, #2272]	; 25d88 <test_mixed_type_union@@Base+0x9c0>
   254a4:	add	r3, pc, r3
   254a8:	mov	r1, r3
   254ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   254b0:	bl	1a218 <_start@@Base+0x7800>
   254b4:	mov	r2, r0
   254b8:	sub	r3, fp, #60	; 0x3c
   254bc:	mov	r1, r2
   254c0:	mov	r0, r3
   254c4:	bl	1b4c8 <_start@@Base+0x8ab0>
   254c8:	sub	r3, fp, #60	; 0x3c
   254cc:	ldm	r3, {r1, r2}
   254d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   254d4:	bl	1b510 <_start@@Base+0x8af8>
   254d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   254dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   254e0:	bl	1e2a0 <_start@@Base+0xb888>
   254e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   254e8:	bl	1e22c <_start@@Base+0xb814>
   254ec:	str	r0, [fp, #-32]	; 0xffffffe0
   254f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   254f4:	mov	r2, #3
   254f8:	str	r2, [r3]
   254fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25500:	bl	1e254 <_start@@Base+0xb83c>
   25504:	mov	r1, #1
   25508:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2550c:	bl	1acac <_start@@Base+0x8294>
   25510:	mov	r3, r0
   25514:	mov	r1, r3
   25518:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2551c:	bl	1e2a0 <_start@@Base+0xb888>
   25520:	mov	r1, #2
   25524:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25528:	bl	1e2e4 <_start@@Base+0xb8cc>
   2552c:	ldr	r3, [pc, #2136]	; 25d8c <test_mixed_type_union@@Base+0x9c4>
   25530:	add	r3, pc, r3
   25534:	mov	r1, r3
   25538:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2553c:	bl	1a218 <_start@@Base+0x7800>
   25540:	mov	r3, r0
   25544:	mov	r1, r3
   25548:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2554c:	bl	1e338 <_start@@Base+0xb920>
   25550:	ldr	r3, [pc, #2104]	; 25d90 <test_mixed_type_union@@Base+0x9c8>
   25554:	add	r3, pc, r3
   25558:	mov	r1, r3
   2555c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25560:	bl	1e37c <_start@@Base+0xb964>
   25564:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25568:	bl	1e11c <_start@@Base+0xb704>
   2556c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25570:	bl	1e424 <_start@@Base+0xba0c>
   25574:	sub	r3, fp, #64	; 0x40
   25578:	mov	r1, r3
   2557c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   25580:	bl	2d7cc <flatcc_builder_finalize_aligned_buffer@@Base>
   25584:	str	r0, [fp, #-36]	; 0xffffffdc
   25588:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2558c:	ldr	r3, [pc, #2048]	; 25d94 <test_mixed_type_union@@Base+0x9cc>
   25590:	ldr	r3, [r4, r3]
   25594:	ldr	r3, [r3]
   25598:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2559c:	ldr	r0, [pc, #2036]	; 25d98 <test_mixed_type_union@@Base+0x9d0>
   255a0:	add	r0, pc, r0
   255a4:	bl	1fc0c <_start@@Base+0xd1f4>
   255a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   255ac:	mov	r1, r3
   255b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   255b4:	bl	1fbc4 <_start@@Base+0xd1ac>
   255b8:	str	r0, [fp, #-16]
   255bc:	ldr	r3, [fp, #-16]
   255c0:	cmp	r3, #0
   255c4:	beq	255f0 <test_mixed_type_union@@Base+0x228>
   255c8:	ldr	r0, [fp, #-16]
   255cc:	bl	2e65c <flatcc_verify_error_string@@Base>
   255d0:	mov	r3, r0
   255d4:	mov	r1, r3
   255d8:	ldr	r3, [pc, #1980]	; 25d9c <test_mixed_type_union@@Base+0x9d4>
   255dc:	add	r3, pc, r3
   255e0:	mov	r0, r3
   255e4:	bl	12918 <printf@plt>
   255e8:	mvn	r3, #0
   255ec:	b	25d74 <test_mixed_type_union@@Base+0x9ac>
   255f0:	mvn	r3, #0
   255f4:	str	r3, [fp, #-16]
   255f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   255fc:	bl	18dfc <_start@@Base+0x63e4>
   25600:	str	r0, [fp, #-40]	; 0xffffffd8
   25604:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25608:	bl	19064 <_start@@Base+0x664c>
   2560c:	mov	r3, r0
   25610:	cmp	r3, #0
   25614:	bne	2562c <test_mixed_type_union@@Base+0x264>
   25618:	ldr	r3, [pc, #1920]	; 25da0 <test_mixed_type_union@@Base+0x9d8>
   2561c:	add	r3, pc, r3
   25620:	mov	r0, r3
   25624:	bl	1296c <puts@plt>
   25628:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   2562c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25630:	bl	19a84 <_start@@Base+0x706c>
   25634:	mov	r3, r0
   25638:	cmp	r3, #0
   2563c:	bne	25654 <test_mixed_type_union@@Base+0x28c>
   25640:	ldr	r3, [pc, #1884]	; 25da4 <test_mixed_type_union@@Base+0x9dc>
   25644:	add	r3, pc, r3
   25648:	mov	r0, r3
   2564c:	bl	1296c <puts@plt>
   25650:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25654:	sub	r3, fp, #88	; 0x58
   25658:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2565c:	mov	r0, r3
   25660:	bl	19144 <_start@@Base+0x672c>
   25664:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25668:	cmp	r3, #8
   2566c:	beq	25684 <test_mixed_type_union@@Base+0x2bc>
   25670:	ldr	r3, [pc, #1840]	; 25da8 <test_mixed_type_union@@Base+0x9e0>
   25674:	add	r3, pc, r3
   25678:	mov	r0, r3
   2567c:	bl	1296c <puts@plt>
   25680:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25684:	ldr	r3, [fp, #-84]	; 0xffffffac
   25688:	str	r3, [fp, #-44]	; 0xffffffd4
   2568c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   25690:	cmp	r3, #0
   25694:	bne	256a8 <test_mixed_type_union@@Base+0x2e0>
   25698:	ldr	r3, [pc, #1804]	; 25dac <test_mixed_type_union@@Base+0x9e4>
   2569c:	add	r3, pc, r3
   256a0:	mov	r0, r3
   256a4:	bl	1296c <puts@plt>
   256a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   256ac:	bl	14c20 <_start@@Base+0x2208>
   256b0:	mov	r3, r0
   256b4:	cmp	r3, #19
   256b8:	bls	256d0 <test_mixed_type_union@@Base+0x308>
   256bc:	ldr	r3, [pc, #1772]	; 25db0 <test_mixed_type_union@@Base+0x9e8>
   256c0:	add	r3, pc, r3
   256c4:	mov	r0, r3
   256c8:	bl	1296c <puts@plt>
   256cc:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   256d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   256d4:	bl	14c20 <_start@@Base+0x2208>
   256d8:	mov	r3, r0
   256dc:	cmp	r3, #18
   256e0:	bhi	256f8 <test_mixed_type_union@@Base+0x330>
   256e4:	ldr	r3, [pc, #1736]	; 25db4 <test_mixed_type_union@@Base+0x9ec>
   256e8:	add	r3, pc, r3
   256ec:	mov	r0, r3
   256f0:	bl	1296c <puts@plt>
   256f4:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   256f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   256fc:	bl	19678 <_start@@Base+0x6c60>
   25700:	mov	r3, r0
   25704:	cmp	r3, #8
   25708:	beq	25720 <test_mixed_type_union@@Base+0x358>
   2570c:	ldr	r3, [pc, #1700]	; 25db8 <test_mixed_type_union@@Base+0x9f0>
   25710:	add	r3, pc, r3
   25714:	mov	r0, r3
   25718:	bl	1296c <puts@plt>
   2571c:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25720:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25724:	bl	19770 <_start@@Base+0x6d58>
   25728:	str	r0, [fp, #-44]	; 0xffffffd4
   2572c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   25730:	cmp	r3, #0
   25734:	bne	2574c <test_mixed_type_union@@Base+0x384>
   25738:	ldr	r3, [pc, #1660]	; 25dbc <test_mixed_type_union@@Base+0x9f4>
   2573c:	add	r3, pc, r3
   25740:	mov	r0, r3
   25744:	bl	1296c <puts@plt>
   25748:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   2574c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   25750:	bl	14c20 <_start@@Base+0x2208>
   25754:	mov	r3, r0
   25758:	cmp	r3, #22
   2575c:	beq	25774 <test_mixed_type_union@@Base+0x3ac>
   25760:	ldr	r3, [pc, #1624]	; 25dc0 <test_mixed_type_union@@Base+0x9f8>
   25764:	add	r3, pc, r3
   25768:	mov	r0, r3
   2576c:	bl	1296c <puts@plt>
   25770:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25774:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25778:	bl	191cc <_start@@Base+0x67b4>
   2577c:	mov	r3, r0
   25780:	cmp	r3, #2
   25784:	beq	2579c <test_mixed_type_union@@Base+0x3d4>
   25788:	ldr	r3, [pc, #1588]	; 25dc4 <test_mixed_type_union@@Base+0x9fc>
   2578c:	add	r3, pc, r3
   25790:	mov	r0, r3
   25794:	bl	1296c <puts@plt>
   25798:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   2579c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   257a0:	bl	192c0 <_start@@Base+0x68a8>
   257a4:	str	r0, [fp, #-48]	; 0xffffffd0
   257a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   257ac:	cmp	r3, #0
   257b0:	beq	257c8 <test_mixed_type_union@@Base+0x400>
   257b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   257b8:	bl	18bb0 <_start@@Base+0x6198>
   257bc:	mov	r3, r0
   257c0:	cmp	r3, #42	; 0x2a
   257c4:	beq	257dc <test_mixed_type_union@@Base+0x414>
   257c8:	ldr	r3, [pc, #1528]	; 25dc8 <test_mixed_type_union@@Base+0xa00>
   257cc:	add	r3, pc, r3
   257d0:	mov	r0, r3
   257d4:	bl	1296c <puts@plt>
   257d8:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   257dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   257e0:	bl	193c0 <_start@@Base+0x69a8>
   257e4:	mov	r3, r0
   257e8:	cmp	r3, #11
   257ec:	beq	25804 <test_mixed_type_union@@Base+0x43c>
   257f0:	ldr	r3, [pc, #1492]	; 25dcc <test_mixed_type_union@@Base+0xa04>
   257f4:	add	r3, pc, r3
   257f8:	mov	r0, r3
   257fc:	bl	1296c <puts@plt>
   25800:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25804:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25808:	bl	194b8 <_start@@Base+0x6aa0>
   2580c:	mov	r3, r0
   25810:	mov	r0, r3
   25814:	bl	13654 <_start@@Base+0xc3c>
   25818:	str	r0, [fp, #-52]	; 0xffffffcc
   2581c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25820:	cmp	r3, #0
   25824:	bne	2583c <test_mixed_type_union@@Base+0x474>
   25828:	ldr	r3, [pc, #1440]	; 25dd0 <test_mixed_type_union@@Base+0xa08>
   2582c:	add	r3, pc, r3
   25830:	mov	r0, r3
   25834:	bl	1296c <puts@plt>
   25838:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   2583c:	ldr	r3, [pc, #1424]	; 25dd4 <test_mixed_type_union@@Base+0xa0c>
   25840:	add	r3, pc, r3
   25844:	mov	r1, r3
   25848:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2584c:	bl	1290c <strcmp@plt>
   25850:	mov	r3, r0
   25854:	cmp	r3, #0
   25858:	beq	25874 <test_mixed_type_union@@Base+0x4ac>
   2585c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   25860:	ldr	r3, [pc, #1392]	; 25dd8 <test_mixed_type_union@@Base+0xa10>
   25864:	add	r3, pc, r3
   25868:	mov	r0, r3
   2586c:	bl	12918 <printf@plt>
   25870:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25874:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25878:	bl	19644 <_start@@Base+0x6c2c>
   2587c:	str	r0, [fp, #-52]	; 0xffffffcc
   25880:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25884:	cmp	r3, #0
   25888:	bne	258a0 <test_mixed_type_union@@Base+0x4d8>
   2588c:	ldr	r3, [pc, #1352]	; 25ddc <test_mixed_type_union@@Base+0xa14>
   25890:	add	r3, pc, r3
   25894:	mov	r0, r3
   25898:	bl	1296c <puts@plt>
   2589c:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   258a0:	ldr	r3, [pc, #1336]	; 25de0 <test_mixed_type_union@@Base+0xa18>
   258a4:	add	r3, pc, r3
   258a8:	mov	r1, r3
   258ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   258b0:	bl	1290c <strcmp@plt>
   258b4:	mov	r3, r0
   258b8:	cmp	r3, #0
   258bc:	beq	258d8 <test_mixed_type_union@@Base+0x510>
   258c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   258c4:	ldr	r3, [pc, #1304]	; 25de4 <test_mixed_type_union@@Base+0xa1c>
   258c8:	add	r3, pc, r3
   258cc:	mov	r0, r3
   258d0:	bl	12918 <printf@plt>
   258d4:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   258d8:	sub	r3, fp, #108	; 0x6c
   258dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   258e0:	mov	r0, r3
   258e4:	bl	195bc <_start@@Base+0x6ba4>
   258e8:	sub	r3, fp, #88	; 0x58
   258ec:	sub	r2, fp, #108	; 0x6c
   258f0:	ldm	r2, {r0, r1}
   258f4:	stm	r3, {r0, r1}
   258f8:	sub	r3, fp, #88	; 0x58
   258fc:	ldm	r3, {r0, r1}
   25900:	bl	137b0 <_start@@Base+0xd98>
   25904:	str	r0, [fp, #-52]	; 0xffffffcc
   25908:	ldr	r3, [pc, #1240]	; 25de8 <test_mixed_type_union@@Base+0xa20>
   2590c:	add	r3, pc, r3
   25910:	mov	r1, r3
   25914:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25918:	bl	1290c <strcmp@plt>
   2591c:	mov	r3, r0
   25920:	cmp	r3, #0
   25924:	beq	25940 <test_mixed_type_union@@Base+0x578>
   25928:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2592c:	ldr	r3, [pc, #1208]	; 25dec <test_mixed_type_union@@Base+0xa24>
   25930:	add	r3, pc, r3
   25934:	mov	r0, r3
   25938:	bl	12918 <printf@plt>
   2593c:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25940:	sub	r3, fp, #80	; 0x50
   25944:	ldr	r1, [fp, #-40]	; 0xffffffd8
   25948:	mov	r0, r3
   2594c:	bl	19b64 <_start@@Base+0x714c>
   25950:	sub	r0, fp, #108	; 0x6c
   25954:	mov	r3, #0
   25958:	sub	r2, fp, #80	; 0x50
   2595c:	ldm	r2, {r1, r2}
   25960:	bl	18cd8 <_start@@Base+0x62c0>
   25964:	sub	r3, fp, #88	; 0x58
   25968:	sub	r2, fp, #108	; 0x6c
   2596c:	ldm	r2, {r0, r1}
   25970:	stm	r3, {r0, r1}
   25974:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25978:	cmp	r3, #8
   2597c:	beq	25994 <test_mixed_type_union@@Base+0x5cc>
   25980:	ldr	r3, [pc, #1128]	; 25df0 <test_mixed_type_union@@Base+0xa28>
   25984:	add	r3, pc, r3
   25988:	mov	r0, r3
   2598c:	bl	12918 <printf@plt>
   25990:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25994:	sub	r0, fp, #108	; 0x6c
   25998:	mov	r3, #1
   2599c:	sub	r2, fp, #80	; 0x50
   259a0:	ldm	r2, {r1, r2}
   259a4:	bl	18cd8 <_start@@Base+0x62c0>
   259a8:	sub	r3, fp, #88	; 0x58
   259ac:	sub	r2, fp, #108	; 0x6c
   259b0:	ldm	r2, {r0, r1}
   259b4:	stm	r3, {r0, r1}
   259b8:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   259bc:	cmp	r3, #2
   259c0:	beq	259d8 <test_mixed_type_union@@Base+0x610>
   259c4:	ldr	r3, [pc, #1064]	; 25df4 <test_mixed_type_union@@Base+0xa2c>
   259c8:	add	r3, pc, r3
   259cc:	mov	r0, r3
   259d0:	bl	12918 <printf@plt>
   259d4:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   259d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   259dc:	str	r3, [fp, #-48]	; 0xffffffd0
   259e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   259e4:	bl	18bb0 <_start@@Base+0x6198>
   259e8:	mov	r3, r0
   259ec:	cmp	r3, #42	; 0x2a
   259f0:	beq	25a08 <test_mixed_type_union@@Base+0x640>
   259f4:	ldr	r3, [pc, #1020]	; 25df8 <test_mixed_type_union@@Base+0xa30>
   259f8:	add	r3, pc, r3
   259fc:	mov	r0, r3
   25a00:	bl	12918 <printf@plt>
   25a04:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25a08:	sub	r0, fp, #108	; 0x6c
   25a0c:	mov	r3, #2
   25a10:	sub	r2, fp, #80	; 0x50
   25a14:	ldm	r2, {r1, r2}
   25a18:	bl	18cd8 <_start@@Base+0x62c0>
   25a1c:	sub	r3, fp, #88	; 0x58
   25a20:	sub	r2, fp, #108	; 0x6c
   25a24:	ldm	r2, {r0, r1}
   25a28:	stm	r3, {r0, r1}
   25a2c:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25a30:	cmp	r3, #2
   25a34:	beq	25a4c <test_mixed_type_union@@Base+0x684>
   25a38:	ldr	r3, [pc, #956]	; 25dfc <test_mixed_type_union@@Base+0xa34>
   25a3c:	add	r3, pc, r3
   25a40:	mov	r0, r3
   25a44:	bl	12918 <printf@plt>
   25a48:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25a4c:	ldr	r3, [fp, #-84]	; 0xffffffac
   25a50:	str	r3, [fp, #-48]	; 0xffffffd0
   25a54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25a58:	bl	18bb0 <_start@@Base+0x6198>
   25a5c:	mov	r3, r0
   25a60:	cmp	r3, #1
   25a64:	beq	25a7c <test_mixed_type_union@@Base+0x6b4>
   25a68:	ldr	r3, [pc, #912]	; 25e00 <test_mixed_type_union@@Base+0xa38>
   25a6c:	add	r3, pc, r3
   25a70:	mov	r0, r3
   25a74:	bl	12918 <printf@plt>
   25a78:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25a7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25a80:	bl	19874 <_start@@Base+0x6e5c>
   25a84:	mov	r3, r0
   25a88:	mov	r1, #3
   25a8c:	mov	r0, r3
   25a90:	bl	14018 <_start@@Base+0x1600>
   25a94:	mov	r3, r0
   25a98:	cmp	r3, #11
   25a9c:	beq	25ab4 <test_mixed_type_union@@Base+0x6ec>
   25aa0:	ldr	r3, [pc, #860]	; 25e04 <test_mixed_type_union@@Base+0xa3c>
   25aa4:	add	r3, pc, r3
   25aa8:	mov	r0, r3
   25aac:	bl	1296c <puts@plt>
   25ab0:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25ab4:	mov	r2, #3
   25ab8:	sub	r3, fp, #80	; 0x50
   25abc:	ldm	r3, {r0, r1}
   25ac0:	bl	18dc4 <_start@@Base+0x63ac>
   25ac4:	str	r0, [fp, #-52]	; 0xffffffcc
   25ac8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25acc:	cmp	r3, #0
   25ad0:	beq	25af4 <test_mixed_type_union@@Base+0x72c>
   25ad4:	ldr	r3, [pc, #812]	; 25e08 <test_mixed_type_union@@Base+0xa40>
   25ad8:	add	r3, pc, r3
   25adc:	mov	r1, r3
   25ae0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25ae4:	bl	1290c <strcmp@plt>
   25ae8:	mov	r3, r0
   25aec:	cmp	r3, #0
   25af0:	beq	25b08 <test_mixed_type_union@@Base+0x740>
   25af4:	ldr	r3, [pc, #784]	; 25e0c <test_mixed_type_union@@Base+0xa44>
   25af8:	add	r3, pc, r3
   25afc:	mov	r0, r3
   25b00:	bl	1296c <puts@plt>
   25b04:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25b08:	sub	r0, fp, #108	; 0x6c
   25b0c:	mov	r3, #3
   25b10:	sub	r2, fp, #80	; 0x50
   25b14:	ldm	r2, {r1, r2}
   25b18:	bl	18cd8 <_start@@Base+0x62c0>
   25b1c:	sub	r3, fp, #88	; 0x58
   25b20:	sub	r2, fp, #108	; 0x6c
   25b24:	ldm	r2, {r0, r1}
   25b28:	stm	r3, {r0, r1}
   25b2c:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25b30:	cmp	r3, #11
   25b34:	beq	25b4c <test_mixed_type_union@@Base+0x784>
   25b38:	ldr	r3, [pc, #720]	; 25e10 <test_mixed_type_union@@Base+0xa48>
   25b3c:	add	r3, pc, r3
   25b40:	mov	r0, r3
   25b44:	bl	12918 <printf@plt>
   25b48:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25b4c:	sub	r3, fp, #88	; 0x58
   25b50:	ldm	r3, {r0, r1}
   25b54:	bl	137b0 <_start@@Base+0xd98>
   25b58:	str	r0, [fp, #-52]	; 0xffffffcc
   25b5c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25b60:	cmp	r3, #0
   25b64:	beq	25b88 <test_mixed_type_union@@Base+0x7c0>
   25b68:	ldr	r3, [pc, #676]	; 25e14 <test_mixed_type_union@@Base+0xa4c>
   25b6c:	add	r3, pc, r3
   25b70:	mov	r1, r3
   25b74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25b78:	bl	1290c <strcmp@plt>
   25b7c:	mov	r3, r0
   25b80:	cmp	r3, #0
   25b84:	beq	25b9c <test_mixed_type_union@@Base+0x7d4>
   25b88:	ldr	r3, [pc, #648]	; 25e18 <test_mixed_type_union@@Base+0xa50>
   25b8c:	add	r3, pc, r3
   25b90:	mov	r0, r3
   25b94:	bl	1296c <puts@plt>
   25b98:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25b9c:	sub	r0, fp, #108	; 0x6c
   25ba0:	mov	r3, #4
   25ba4:	sub	r2, fp, #80	; 0x50
   25ba8:	ldm	r2, {r1, r2}
   25bac:	bl	18cd8 <_start@@Base+0x62c0>
   25bb0:	sub	r3, fp, #88	; 0x58
   25bb4:	sub	r2, fp, #108	; 0x6c
   25bb8:	ldm	r2, {r0, r1}
   25bbc:	stm	r3, {r0, r1}
   25bc0:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25bc4:	cmp	r3, #9
   25bc8:	beq	25be0 <test_mixed_type_union@@Base+0x818>
   25bcc:	ldr	r3, [pc, #584]	; 25e1c <test_mixed_type_union@@Base+0xa54>
   25bd0:	add	r3, pc, r3
   25bd4:	mov	r0, r3
   25bd8:	bl	12918 <printf@plt>
   25bdc:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25be0:	sub	r0, fp, #108	; 0x6c
   25be4:	mov	r3, #5
   25be8:	sub	r2, fp, #80	; 0x50
   25bec:	ldm	r2, {r1, r2}
   25bf0:	bl	18cd8 <_start@@Base+0x62c0>
   25bf4:	sub	r3, fp, #88	; 0x58
   25bf8:	sub	r2, fp, #108	; 0x6c
   25bfc:	ldm	r2, {r0, r1}
   25c00:	stm	r3, {r0, r1}
   25c04:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25c08:	cmp	r3, #9
   25c0c:	beq	25c24 <test_mixed_type_union@@Base+0x85c>
   25c10:	ldr	r3, [pc, #520]	; 25e20 <test_mixed_type_union@@Base+0xa58>
   25c14:	add	r3, pc, r3
   25c18:	mov	r0, r3
   25c1c:	bl	12918 <printf@plt>
   25c20:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25c24:	sub	r0, fp, #108	; 0x6c
   25c28:	mov	r3, #6
   25c2c:	sub	r2, fp, #80	; 0x50
   25c30:	ldm	r2, {r1, r2}
   25c34:	bl	18cd8 <_start@@Base+0x62c0>
   25c38:	sub	r3, fp, #88	; 0x58
   25c3c:	sub	r2, fp, #108	; 0x6c
   25c40:	ldm	r2, {r0, r1}
   25c44:	stm	r3, {r0, r1}
   25c48:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25c4c:	cmp	r3, #9
   25c50:	beq	25c68 <test_mixed_type_union@@Base+0x8a0>
   25c54:	ldr	r3, [pc, #456]	; 25e24 <test_mixed_type_union@@Base+0xa5c>
   25c58:	add	r3, pc, r3
   25c5c:	mov	r0, r3
   25c60:	bl	12918 <printf@plt>
   25c64:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25c68:	sub	r0, fp, #108	; 0x6c
   25c6c:	mov	r3, #7
   25c70:	sub	r2, fp, #80	; 0x50
   25c74:	ldm	r2, {r1, r2}
   25c78:	bl	18cd8 <_start@@Base+0x62c0>
   25c7c:	sub	r3, fp, #88	; 0x58
   25c80:	sub	r2, fp, #108	; 0x6c
   25c84:	ldm	r2, {r0, r1}
   25c88:	stm	r3, {r0, r1}
   25c8c:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25c90:	cmp	r3, #9
   25c94:	beq	25cac <test_mixed_type_union@@Base+0x8e4>
   25c98:	ldr	r3, [pc, #392]	; 25e28 <test_mixed_type_union@@Base+0xa60>
   25c9c:	add	r3, pc, r3
   25ca0:	mov	r0, r3
   25ca4:	bl	12918 <printf@plt>
   25ca8:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25cac:	sub	r0, fp, #108	; 0x6c
   25cb0:	mov	r3, #8
   25cb4:	sub	r2, fp, #80	; 0x50
   25cb8:	ldm	r2, {r1, r2}
   25cbc:	bl	18cd8 <_start@@Base+0x62c0>
   25cc0:	sub	r3, fp, #88	; 0x58
   25cc4:	sub	r2, fp, #108	; 0x6c
   25cc8:	ldm	r2, {r0, r1}
   25ccc:	stm	r3, {r0, r1}
   25cd0:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25cd4:	cmp	r3, #11
   25cd8:	beq	25cf0 <test_mixed_type_union@@Base+0x928>
   25cdc:	ldr	r3, [pc, #328]	; 25e2c <test_mixed_type_union@@Base+0xa64>
   25ce0:	add	r3, pc, r3
   25ce4:	mov	r0, r3
   25ce8:	bl	12918 <printf@plt>
   25cec:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25cf0:	sub	r0, fp, #108	; 0x6c
   25cf4:	mov	r3, #9
   25cf8:	sub	r2, fp, #80	; 0x50
   25cfc:	ldm	r2, {r1, r2}
   25d00:	bl	18cd8 <_start@@Base+0x62c0>
   25d04:	sub	r3, fp, #88	; 0x58
   25d08:	sub	r2, fp, #108	; 0x6c
   25d0c:	ldm	r2, {r0, r1}
   25d10:	stm	r3, {r0, r1}
   25d14:	ldrb	r3, [fp, #-88]	; 0xffffffa8
   25d18:	cmp	r3, #11
   25d1c:	beq	25d34 <test_mixed_type_union@@Base+0x96c>
   25d20:	ldr	r3, [pc, #264]	; 25e30 <test_mixed_type_union@@Base+0xa68>
   25d24:	add	r3, pc, r3
   25d28:	mov	r0, r3
   25d2c:	bl	12918 <printf@plt>
   25d30:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25d34:	sub	r3, fp, #80	; 0x50
   25d38:	ldm	r3, {r0, r1}
   25d3c:	bl	18ca8 <_start@@Base+0x6290>
   25d40:	mov	r3, r0
   25d44:	cmp	r3, #10
   25d48:	beq	25d60 <test_mixed_type_union@@Base+0x998>
   25d4c:	ldr	r3, [pc, #224]	; 25e34 <test_mixed_type_union@@Base+0xa6c>
   25d50:	add	r3, pc, r3
   25d54:	mov	r0, r3
   25d58:	bl	12918 <printf@plt>
   25d5c:	b	25d68 <test_mixed_type_union@@Base+0x9a0>
   25d60:	mov	r3, #0
   25d64:	str	r3, [fp, #-16]
   25d68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25d6c:	bl	2d8e8 <flatcc_builder_aligned_free@@Base>
   25d70:	ldr	r3, [fp, #-16]
   25d74:	mov	r0, r3
   25d78:	sub	sp, fp, #8
   25d7c:	pop	{r4, fp, pc}
   25d80:	andeq	r0, r2, ip, lsl ip
   25d84:	andeq	sp, r0, r0, ror #29
   25d88:	andeq	sp, r0, r4, lsr #29
   25d8c:	andeq	sp, r0, r0, lsr #28
   25d90:	andeq	sp, r0, r4, lsl #28
   25d94:	andeq	r0, r0, r8, rrx
   25d98:	andeq	sp, r0, r4, asr #27
   25d9c:	muleq	r0, r8, sp
   25da0:	andeq	sp, r0, r8, lsr #27
   25da4:	andeq	sp, r0, ip, lsr #27
   25da8:	andeq	sp, r0, r8, lsr #27
   25dac:	muleq	r0, ip, sp
   25db0:	muleq	r0, r0, sp
   25db4:	muleq	r0, r0, sp
   25db8:	muleq	r0, r8, sp
   25dbc:	andeq	sp, r0, r0, lsr #27
   25dc0:	andeq	sp, r0, r8, lsr #27
   25dc4:			; <UNDEFINED> instruction: 0x0000ddb0
   25dc8:	andeq	sp, r0, r8, lsl #27
   25dcc:	andeq	sp, r0, r4, lsl #27
   25dd0:	andeq	sp, r0, r4, ror #26
   25dd4:	andeq	sp, r0, r0, lsl #22
   25dd8:	andeq	sp, r0, r8, asr #26
   25ddc:	andeq	sp, r0, r0, lsl #26
   25de0:	muleq	r0, ip, sl
   25de4:	andeq	sp, r0, r8, lsl #26
   25de8:	andeq	sp, r0, r4, lsr sl
   25dec:	ldrdeq	sp, [r0], -r0
   25df0:	andeq	sp, r0, ip, lsr #25
   25df4:	muleq	r0, r0, ip
   25df8:	andeq	sp, r0, r4, lsl #25
   25dfc:	andeq	sp, r0, r4, ror ip
   25e00:	andeq	sp, r0, r8, ror #24
   25e04:	andeq	sp, r0, r4, ror #24
   25e08:	andeq	sp, r0, r0, ror r8
   25e0c:	andeq	sp, r0, r0, asr #24
   25e10:	andeq	sp, r0, r0, lsr ip
   25e14:	ldrdeq	sp, [r0], -ip
   25e18:	andeq	sp, r0, r8, lsl ip
   25e1c:	andeq	sp, r0, r4, lsl ip
   25e20:	strdeq	sp, [r0], -r4
   25e24:	ldrdeq	sp, [r0], -r4
   25e28:			; <UNDEFINED> instruction: 0x0000dbb4
   25e2c:	muleq	r0, r4, fp
   25e30:	andeq	sp, r0, r0, asr fp
   25e34:	andeq	sp, r0, r0, asr fp

00025e38 <test_add_set_defaults@@Base>:
   25e38:	push	{fp, lr}
   25e3c:	add	fp, sp, #4
   25e40:	sub	sp, sp, #24
   25e44:	str	r0, [fp, #-24]	; 0xffffffe8
   25e48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e4c:	bl	286e4 <flatcc_builder_reset@@Base>
   25e50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e54:	bl	1d28c <_start@@Base+0xa874>
   25e58:	ldr	r3, [pc, #480]	; 26040 <test_add_set_defaults@@Base+0x208>
   25e5c:	add	r3, pc, r3
   25e60:	mov	r1, r3
   25e64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e68:	bl	1bf80 <_start@@Base+0x9568>
   25e6c:	mov	r1, #100	; 0x64
   25e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e74:	bl	1bd08 <_start@@Base+0x92f0>
   25e78:	mov	r1, #100	; 0x64
   25e7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e80:	bl	1bde4 <_start@@Base+0x93cc>
   25e84:	mov	r1, #8
   25e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e8c:	bl	1c1e8 <_start@@Base+0x97d0>
   25e90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25e94:	bl	1d334 <_start@@Base+0xa91c>
   25e98:	sub	r3, fp, #16
   25e9c:	mov	r1, r3
   25ea0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25ea4:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   25ea8:	str	r0, [fp, #-8]
   25eac:	ldr	r0, [fp, #-8]
   25eb0:	bl	159f0 <_start@@Base+0x2fd8>
   25eb4:	str	r0, [fp, #-12]
   25eb8:	ldr	r0, [fp, #-12]
   25ebc:	bl	15d18 <_start@@Base+0x3300>
   25ec0:	mov	r3, r0
   25ec4:	cmp	r3, #0
   25ec8:	beq	25ee4 <test_add_set_defaults@@Base+0xac>
   25ecc:	ldr	r3, [pc, #368]	; 26044 <test_add_set_defaults@@Base+0x20c>
   25ed0:	add	r3, pc, r3
   25ed4:	mov	r0, r3
   25ed8:	bl	1296c <puts@plt>
   25edc:	mvn	r3, #0
   25ee0:	b	26034 <test_add_set_defaults@@Base+0x1fc>
   25ee4:	ldr	r0, [fp, #-12]
   25ee8:	bl	161d8 <_start@@Base+0x37c0>
   25eec:	mov	r3, r0
   25ef0:	cmp	r3, #0
   25ef4:	bne	25f10 <test_add_set_defaults@@Base+0xd8>
   25ef8:	ldr	r3, [pc, #328]	; 26048 <test_add_set_defaults@@Base+0x210>
   25efc:	add	r3, pc, r3
   25f00:	mov	r0, r3
   25f04:	bl	1296c <puts@plt>
   25f08:	mvn	r3, #0
   25f0c:	b	26034 <test_add_set_defaults@@Base+0x1fc>
   25f10:	ldr	r0, [fp, #-12]
   25f14:	bl	171dc <_start@@Base+0x47c4>
   25f18:	mov	r3, r0
   25f1c:	cmp	r3, #0
   25f20:	beq	25f3c <test_add_set_defaults@@Base+0x104>
   25f24:	ldr	r3, [pc, #288]	; 2604c <test_add_set_defaults@@Base+0x214>
   25f28:	add	r3, pc, r3
   25f2c:	mov	r0, r3
   25f30:	bl	1296c <puts@plt>
   25f34:	mvn	r3, #0
   25f38:	b	26034 <test_add_set_defaults@@Base+0x1fc>
   25f3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f40:	bl	286e4 <flatcc_builder_reset@@Base>
   25f44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f48:	bl	1d28c <_start@@Base+0xa874>
   25f4c:	ldr	r3, [pc, #252]	; 26050 <test_add_set_defaults@@Base+0x218>
   25f50:	add	r3, pc, r3
   25f54:	mov	r1, r3
   25f58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f5c:	bl	1bf80 <_start@@Base+0x9568>
   25f60:	mov	r1, #100	; 0x64
   25f64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f68:	bl	1bd80 <_start@@Base+0x9368>
   25f6c:	mov	r1, #100	; 0x64
   25f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f74:	bl	1be5c <_start@@Base+0x9444>
   25f78:	mov	r1, #8
   25f7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f80:	bl	1c260 <_start@@Base+0x9848>
   25f84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f88:	bl	1d334 <_start@@Base+0xa91c>
   25f8c:	sub	r3, fp, #16
   25f90:	mov	r1, r3
   25f94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   25f98:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   25f9c:	str	r0, [fp, #-8]
   25fa0:	ldr	r0, [fp, #-8]
   25fa4:	bl	159f0 <_start@@Base+0x2fd8>
   25fa8:	str	r0, [fp, #-12]
   25fac:	ldr	r0, [fp, #-12]
   25fb0:	bl	15d18 <_start@@Base+0x3300>
   25fb4:	mov	r3, r0
   25fb8:	cmp	r3, #0
   25fbc:	bne	25fd8 <test_add_set_defaults@@Base+0x1a0>
   25fc0:	ldr	r3, [pc, #140]	; 26054 <test_add_set_defaults@@Base+0x21c>
   25fc4:	add	r3, pc, r3
   25fc8:	mov	r0, r3
   25fcc:	bl	1296c <puts@plt>
   25fd0:	mvn	r3, #0
   25fd4:	b	26034 <test_add_set_defaults@@Base+0x1fc>
   25fd8:	ldr	r0, [fp, #-12]
   25fdc:	bl	161d8 <_start@@Base+0x37c0>
   25fe0:	mov	r3, r0
   25fe4:	cmp	r3, #0
   25fe8:	bne	26004 <test_add_set_defaults@@Base+0x1cc>
   25fec:	ldr	r3, [pc, #100]	; 26058 <test_add_set_defaults@@Base+0x220>
   25ff0:	add	r3, pc, r3
   25ff4:	mov	r0, r3
   25ff8:	bl	1296c <puts@plt>
   25ffc:	mvn	r3, #0
   26000:	b	26034 <test_add_set_defaults@@Base+0x1fc>
   26004:	ldr	r0, [fp, #-12]
   26008:	bl	171dc <_start@@Base+0x47c4>
   2600c:	mov	r3, r0
   26010:	cmp	r3, #0
   26014:	bne	26030 <test_add_set_defaults@@Base+0x1f8>
   26018:	ldr	r3, [pc, #60]	; 2605c <test_add_set_defaults@@Base+0x224>
   2601c:	add	r3, pc, r3
   26020:	mov	r0, r3
   26024:	bl	1296c <puts@plt>
   26028:	mvn	r3, #0
   2602c:	b	26034 <test_add_set_defaults@@Base+0x1fc>
   26030:	mov	r3, #0
   26034:	mov	r0, r3
   26038:	sub	sp, fp, #4
   2603c:	pop	{fp, pc}
   26040:	andeq	fp, r0, r4, lsr #14
   26044:	strdeq	sp, [r0], -r8
   26048:	strdeq	sp, [r0], -r8
   2604c:	strdeq	sp, [r0], -ip
   26050:	andeq	fp, r0, r0, lsr r6
   26054:	muleq	r0, r0, r9
   26058:	muleq	r0, r8, r9
   2605c:	andeq	sp, r0, ip, lsr #19

00026060 <test_nested_buffer@@Base>:
   26060:	push	{r4, fp, lr}
   26064:	add	fp, sp, #8
   26068:	sub	sp, sp, #28
   2606c:	str	r0, [fp, #-32]	; 0xffffffe0
   26070:	ldr	r4, [pc, #416]	; 26218 <test_nested_buffer@@Base+0x1b8>
   26074:	add	r4, pc, r4
   26078:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2607c:	bl	286e4 <flatcc_builder_reset@@Base>
   26080:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26084:	bl	1d28c <_start@@Base+0xa874>
   26088:	ldr	r3, [pc, #396]	; 2621c <test_nested_buffer@@Base+0x1bc>
   2608c:	add	r3, pc, r3
   26090:	mov	r1, r3
   26094:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26098:	bl	1bf80 <_start@@Base+0x9568>
   2609c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   260a0:	bl	1cf94 <_start@@Base+0xa57c>
   260a4:	ldr	r3, [pc, #372]	; 26220 <test_nested_buffer@@Base+0x1c0>
   260a8:	add	r3, pc, r3
   260ac:	mov	r1, r3
   260b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   260b4:	bl	1bf80 <_start@@Base+0x9568>
   260b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   260bc:	bl	1cfe8 <_start@@Base+0xa5d0>
   260c0:	mov	r1, #10
   260c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   260c8:	bl	1bd08 <_start@@Base+0x92f0>
   260cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   260d0:	bl	1d334 <_start@@Base+0xa91c>
   260d4:	sub	r3, fp, #28
   260d8:	mov	r1, r3
   260dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   260e0:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   260e4:	str	r0, [fp, #-16]
   260e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   260ec:	ldr	r3, [pc, #304]	; 26224 <test_nested_buffer@@Base+0x1c4>
   260f0:	ldr	r3, [r4, r3]
   260f4:	ldr	r3, [r3]
   260f8:	ldr	r1, [fp, #-16]
   260fc:	ldr	r0, [pc, #292]	; 26228 <test_nested_buffer@@Base+0x1c8>
   26100:	add	r0, pc, r0
   26104:	bl	1fc0c <_start@@Base+0xd1f4>
   26108:	ldr	r0, [fp, #-16]
   2610c:	bl	159f0 <_start@@Base+0x2fd8>
   26110:	str	r0, [fp, #-20]	; 0xffffffec
   26114:	ldr	r0, [fp, #-20]	; 0xffffffec
   26118:	bl	162b8 <_start@@Base+0x38a0>
   2611c:	mov	r2, r0
   26120:	ldr	r3, [pc, #260]	; 2622c <test_nested_buffer@@Base+0x1cc>
   26124:	add	r3, pc, r3
   26128:	mov	r1, r3
   2612c:	mov	r0, r2
   26130:	bl	1290c <strcmp@plt>
   26134:	mov	r3, r0
   26138:	cmp	r3, #0
   2613c:	beq	26158 <test_nested_buffer@@Base+0xf8>
   26140:	ldr	r3, [pc, #232]	; 26230 <test_nested_buffer@@Base+0x1d0>
   26144:	add	r3, pc, r3
   26148:	mov	r0, r3
   2614c:	bl	1296c <puts@plt>
   26150:	mvn	r3, #0
   26154:	b	2620c <test_nested_buffer@@Base+0x1ac>
   26158:	ldr	r0, [fp, #-20]	; 0xffffffec
   2615c:	bl	17e24 <_start@@Base+0x540c>
   26160:	str	r0, [fp, #-24]	; 0xffffffe8
   26164:	ldr	r0, [fp, #-20]	; 0xffffffec
   26168:	bl	15c20 <_start@@Base+0x3208>
   2616c:	mov	r3, r0
   26170:	cmp	r3, #10
   26174:	beq	26190 <test_nested_buffer@@Base+0x130>
   26178:	ldr	r3, [pc, #180]	; 26234 <test_nested_buffer@@Base+0x1d4>
   2617c:	add	r3, pc, r3
   26180:	mov	r0, r3
   26184:	bl	1296c <puts@plt>
   26188:	mvn	r3, #0
   2618c:	b	2620c <test_nested_buffer@@Base+0x1ac>
   26190:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26194:	bl	162b8 <_start@@Base+0x38a0>
   26198:	mov	r3, r0
   2619c:	cmp	r3, #0
   261a0:	bne	261c4 <test_nested_buffer@@Base+0x164>
   261a4:	ldr	r3, [pc, #140]	; 26238 <test_nested_buffer@@Base+0x1d8>
   261a8:	add	r3, pc, r3
   261ac:	ldr	r2, [pc, #136]	; 2623c <test_nested_buffer@@Base+0x1dc>
   261b0:	ldr	r1, [pc, #136]	; 26240 <test_nested_buffer@@Base+0x1e0>
   261b4:	add	r1, pc, r1
   261b8:	ldr	r0, [pc, #132]	; 26244 <test_nested_buffer@@Base+0x1e4>
   261bc:	add	r0, pc, r0
   261c0:	bl	12a08 <__assert_fail@plt>
   261c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   261c8:	bl	162b8 <_start@@Base+0x38a0>
   261cc:	mov	r2, r0
   261d0:	ldr	r3, [pc, #112]	; 26248 <test_nested_buffer@@Base+0x1e8>
   261d4:	add	r3, pc, r3
   261d8:	mov	r1, r3
   261dc:	mov	r0, r2
   261e0:	bl	1290c <strcmp@plt>
   261e4:	mov	r3, r0
   261e8:	cmp	r3, #0
   261ec:	beq	26208 <test_nested_buffer@@Base+0x1a8>
   261f0:	ldr	r3, [pc, #84]	; 2624c <test_nested_buffer@@Base+0x1ec>
   261f4:	add	r3, pc, r3
   261f8:	mov	r0, r3
   261fc:	bl	1296c <puts@plt>
   26200:	mvn	r3, #0
   26204:	b	2620c <test_nested_buffer@@Base+0x1ac>
   26208:	mov	r3, #0
   2620c:	mov	r0, r3
   26210:	sub	sp, fp, #8
   26214:	pop	{r4, fp, pc}
   26218:	andeq	pc, r1, r4, lsl #31
   2621c:	strdeq	fp, [r0], -r4
   26220:	andeq	sp, r0, r8, asr r9
   26224:	andeq	r0, r0, r8, rrx
   26228:	andeq	sp, r0, r0, lsl r9
   2622c:	andeq	fp, r0, ip, asr r4
   26230:	andeq	sp, r0, r0, ror #17
   26234:	andeq	sp, r0, r4, asr #17
   26238:	ldrdeq	lr, [r0], -r8
   2623c:	andeq	r0, r0, ip, lsl #17
   26240:	andeq	fp, r0, r8, asr #25
   26244:	andeq	sp, r0, r8, lsr #17
   26248:	andeq	sp, r0, ip, lsr #16
   2624c:	andeq	sp, r0, ip, lsl #17

00026250 <test_nested_buffer_first@@Base>:
   26250:	push	{r4, fp, lr}
   26254:	add	fp, sp, #8
   26258:	sub	sp, sp, #28
   2625c:	str	r0, [fp, #-32]	; 0xffffffe0
   26260:	ldr	r4, [pc, #416]	; 26408 <test_nested_buffer_first@@Base+0x1b8>
   26264:	add	r4, pc, r4
   26268:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2626c:	bl	286e4 <flatcc_builder_reset@@Base>
   26270:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26274:	bl	1d28c <_start@@Base+0xa874>
   26278:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2627c:	bl	1cf94 <_start@@Base+0xa57c>
   26280:	ldr	r3, [pc, #388]	; 2640c <test_nested_buffer_first@@Base+0x1bc>
   26284:	add	r3, pc, r3
   26288:	mov	r1, r3
   2628c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26290:	bl	1bf80 <_start@@Base+0x9568>
   26294:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26298:	bl	1cfe8 <_start@@Base+0xa5d0>
   2629c:	mov	r1, #10
   262a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262a4:	bl	1bd08 <_start@@Base+0x92f0>
   262a8:	ldr	r3, [pc, #352]	; 26410 <test_nested_buffer_first@@Base+0x1c0>
   262ac:	add	r3, pc, r3
   262b0:	mov	r1, r3
   262b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262b8:	bl	1bf80 <_start@@Base+0x9568>
   262bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262c0:	bl	1d334 <_start@@Base+0xa91c>
   262c4:	sub	r3, fp, #28
   262c8:	mov	r1, r3
   262cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   262d0:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   262d4:	str	r0, [fp, #-16]
   262d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   262dc:	ldr	r3, [pc, #304]	; 26414 <test_nested_buffer_first@@Base+0x1c4>
   262e0:	ldr	r3, [r4, r3]
   262e4:	ldr	r3, [r3]
   262e8:	ldr	r1, [fp, #-16]
   262ec:	ldr	r0, [pc, #292]	; 26418 <test_nested_buffer_first@@Base+0x1c8>
   262f0:	add	r0, pc, r0
   262f4:	bl	1fc0c <_start@@Base+0xd1f4>
   262f8:	ldr	r0, [fp, #-16]
   262fc:	bl	159f0 <_start@@Base+0x2fd8>
   26300:	str	r0, [fp, #-20]	; 0xffffffec
   26304:	ldr	r0, [fp, #-20]	; 0xffffffec
   26308:	bl	162b8 <_start@@Base+0x38a0>
   2630c:	mov	r2, r0
   26310:	ldr	r3, [pc, #260]	; 2641c <test_nested_buffer_first@@Base+0x1cc>
   26314:	add	r3, pc, r3
   26318:	mov	r1, r3
   2631c:	mov	r0, r2
   26320:	bl	1290c <strcmp@plt>
   26324:	mov	r3, r0
   26328:	cmp	r3, #0
   2632c:	beq	26348 <test_nested_buffer_first@@Base+0xf8>
   26330:	ldr	r3, [pc, #232]	; 26420 <test_nested_buffer_first@@Base+0x1d0>
   26334:	add	r3, pc, r3
   26338:	mov	r0, r3
   2633c:	bl	1296c <puts@plt>
   26340:	mvn	r3, #0
   26344:	b	263fc <test_nested_buffer_first@@Base+0x1ac>
   26348:	ldr	r0, [fp, #-20]	; 0xffffffec
   2634c:	bl	17e24 <_start@@Base+0x540c>
   26350:	str	r0, [fp, #-24]	; 0xffffffe8
   26354:	ldr	r0, [fp, #-20]	; 0xffffffec
   26358:	bl	15c20 <_start@@Base+0x3208>
   2635c:	mov	r3, r0
   26360:	cmp	r3, #10
   26364:	beq	26380 <test_nested_buffer_first@@Base+0x130>
   26368:	ldr	r3, [pc, #180]	; 26424 <test_nested_buffer_first@@Base+0x1d4>
   2636c:	add	r3, pc, r3
   26370:	mov	r0, r3
   26374:	bl	1296c <puts@plt>
   26378:	mvn	r3, #0
   2637c:	b	263fc <test_nested_buffer_first@@Base+0x1ac>
   26380:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26384:	bl	162b8 <_start@@Base+0x38a0>
   26388:	mov	r3, r0
   2638c:	cmp	r3, #0
   26390:	bne	263b4 <test_nested_buffer_first@@Base+0x164>
   26394:	ldr	r3, [pc, #140]	; 26428 <test_nested_buffer_first@@Base+0x1d8>
   26398:	add	r3, pc, r3
   2639c:	ldr	r2, [pc, #136]	; 2642c <test_nested_buffer_first@@Base+0x1dc>
   263a0:	ldr	r1, [pc, #136]	; 26430 <test_nested_buffer_first@@Base+0x1e0>
   263a4:	add	r1, pc, r1
   263a8:	ldr	r0, [pc, #132]	; 26434 <test_nested_buffer_first@@Base+0x1e4>
   263ac:	add	r0, pc, r0
   263b0:	bl	12a08 <__assert_fail@plt>
   263b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   263b8:	bl	162b8 <_start@@Base+0x38a0>
   263bc:	mov	r2, r0
   263c0:	ldr	r3, [pc, #112]	; 26438 <test_nested_buffer_first@@Base+0x1e8>
   263c4:	add	r3, pc, r3
   263c8:	mov	r1, r3
   263cc:	mov	r0, r2
   263d0:	bl	1290c <strcmp@plt>
   263d4:	mov	r3, r0
   263d8:	cmp	r3, #0
   263dc:	beq	263f8 <test_nested_buffer_first@@Base+0x1a8>
   263e0:	ldr	r3, [pc, #84]	; 2643c <test_nested_buffer_first@@Base+0x1ec>
   263e4:	add	r3, pc, r3
   263e8:	mov	r0, r3
   263ec:	bl	1296c <puts@plt>
   263f0:	mvn	r3, #0
   263f4:	b	263fc <test_nested_buffer_first@@Base+0x1ac>
   263f8:	mov	r3, #0
   263fc:	mov	r0, r3
   26400:	sub	sp, fp, #8
   26404:	pop	{r4, fp, pc}
   26408:	muleq	r1, r4, sp
   2640c:	andeq	sp, r0, ip, ror r7
   26410:	ldrdeq	fp, [r0], -r4
   26414:	andeq	r0, r0, r8, rrx
   26418:	andeq	sp, r0, r0, lsr #14
   2641c:	andeq	fp, r0, ip, ror #4
   26420:	strdeq	sp, [r0], -r0
   26424:	ldrdeq	sp, [r0], -r4
   26428:	andeq	lr, r0, r8, lsr #8
   2642c:	andeq	r0, r0, r1, asr #17
   26430:	ldrdeq	fp, [r0], -r8
   26434:			; <UNDEFINED> instruction: 0x0000d6b8
   26438:	andeq	sp, r0, ip, lsr r6
   2643c:	muleq	r0, ip, r6

00026440 <test_nested_buffer_using_nest@@Base>:
   26440:	push	{r4, fp, lr}
   26444:	add	fp, sp, #8
   26448:	sub	sp, sp, #1056	; 0x420
   2644c:	sub	sp, sp, #4
   26450:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26454:	ldr	r4, [pc, #584]	; 266a4 <test_nested_buffer_using_nest@@Base+0x264>
   26458:	add	r4, pc, r4
   2645c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26460:	bl	286e4 <flatcc_builder_reset@@Base>
   26464:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26468:	bl	1d28c <_start@@Base+0xa874>
   2646c:	ldr	r3, [pc, #564]	; 266a8 <test_nested_buffer_using_nest@@Base+0x268>
   26470:	add	r3, pc, r3
   26474:	mov	r1, r3
   26478:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2647c:	bl	1bf80 <_start@@Base+0x9568>
   26480:	mov	r1, #42	; 0x2a
   26484:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26488:	bl	1bde4 <_start@@Base+0x93cc>
   2648c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26490:	bl	1d334 <_start@@Base+0xa91c>
   26494:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26498:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   2649c:	str	r0, [fp, #-16]
   264a0:	sub	r3, fp, #1040	; 0x410
   264a4:	sub	r3, r3, #12
   264a8:	mov	r2, #1024	; 0x400
   264ac:	mov	r1, r3
   264b0:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   264b4:	bl	2d630 <flatcc_builder_copy_buffer@@Base>
   264b8:	mov	r3, r0
   264bc:	cmp	r3, #0
   264c0:	bne	264dc <test_nested_buffer_using_nest@@Base+0x9c>
   264c4:	ldr	r3, [pc, #480]	; 266ac <test_nested_buffer_using_nest@@Base+0x26c>
   264c8:	add	r3, pc, r3
   264cc:	mov	r0, r3
   264d0:	bl	1296c <puts@plt>
   264d4:	mvn	r3, #0
   264d8:	b	26698 <test_nested_buffer_using_nest@@Base+0x258>
   264dc:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   264e0:	bl	286e4 <flatcc_builder_reset@@Base>
   264e4:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   264e8:	bl	1d28c <_start@@Base+0xa874>
   264ec:	sub	r1, fp, #1040	; 0x410
   264f0:	sub	r1, r1, #12
   264f4:	mov	r3, #0
   264f8:	ldr	r2, [fp, #-16]
   264fc:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26500:	bl	1d030 <_start@@Base+0xa618>
   26504:	mov	r1, #10
   26508:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2650c:	bl	1bd08 <_start@@Base+0x92f0>
   26510:	ldr	r3, [pc, #408]	; 266b0 <test_nested_buffer_using_nest@@Base+0x270>
   26514:	add	r3, pc, r3
   26518:	mov	r1, r3
   2651c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26520:	bl	1bf80 <_start@@Base+0x9568>
   26524:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26528:	bl	1d334 <_start@@Base+0xa91c>
   2652c:	sub	r3, fp, #1040	; 0x410
   26530:	sub	r3, r3, #12
   26534:	sub	r3, r3, #4
   26538:	mov	r1, r3
   2653c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26540:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   26544:	str	r0, [fp, #-20]	; 0xffffffec
   26548:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   2654c:	ldr	r3, [pc, #352]	; 266b4 <test_nested_buffer_using_nest@@Base+0x274>
   26550:	ldr	r3, [r4, r3]
   26554:	ldr	r3, [r3]
   26558:	ldr	r1, [fp, #-20]	; 0xffffffec
   2655c:	ldr	r0, [pc, #340]	; 266b8 <test_nested_buffer_using_nest@@Base+0x278>
   26560:	add	r0, pc, r0
   26564:	bl	1fc0c <_start@@Base+0xd1f4>
   26568:	ldr	r0, [fp, #-20]	; 0xffffffec
   2656c:	bl	159f0 <_start@@Base+0x2fd8>
   26570:	str	r0, [fp, #-24]	; 0xffffffe8
   26574:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26578:	bl	162b8 <_start@@Base+0x38a0>
   2657c:	mov	r2, r0
   26580:	ldr	r3, [pc, #308]	; 266bc <test_nested_buffer_using_nest@@Base+0x27c>
   26584:	add	r3, pc, r3
   26588:	mov	r1, r3
   2658c:	mov	r0, r2
   26590:	bl	1290c <strcmp@plt>
   26594:	mov	r3, r0
   26598:	cmp	r3, #0
   2659c:	beq	265b8 <test_nested_buffer_using_nest@@Base+0x178>
   265a0:	ldr	r3, [pc, #280]	; 266c0 <test_nested_buffer_using_nest@@Base+0x280>
   265a4:	add	r3, pc, r3
   265a8:	mov	r0, r3
   265ac:	bl	1296c <puts@plt>
   265b0:	mvn	r3, #0
   265b4:	b	26698 <test_nested_buffer_using_nest@@Base+0x258>
   265b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   265bc:	bl	17e24 <_start@@Base+0x540c>
   265c0:	str	r0, [fp, #-28]	; 0xffffffe4
   265c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   265c8:	bl	15c20 <_start@@Base+0x3208>
   265cc:	mov	r3, r0
   265d0:	cmp	r3, #10
   265d4:	beq	265f0 <test_nested_buffer_using_nest@@Base+0x1b0>
   265d8:	ldr	r3, [pc, #228]	; 266c4 <test_nested_buffer_using_nest@@Base+0x284>
   265dc:	add	r3, pc, r3
   265e0:	mov	r0, r3
   265e4:	bl	1296c <puts@plt>
   265e8:	mvn	r3, #0
   265ec:	b	26698 <test_nested_buffer_using_nest@@Base+0x258>
   265f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   265f4:	bl	162b8 <_start@@Base+0x38a0>
   265f8:	mov	r3, r0
   265fc:	cmp	r3, #0
   26600:	bne	26624 <test_nested_buffer_using_nest@@Base+0x1e4>
   26604:	ldr	r3, [pc, #188]	; 266c8 <test_nested_buffer_using_nest@@Base+0x288>
   26608:	add	r3, pc, r3
   2660c:	ldr	r2, [pc, #184]	; 266cc <test_nested_buffer_using_nest@@Base+0x28c>
   26610:	ldr	r1, [pc, #184]	; 266d0 <test_nested_buffer_using_nest@@Base+0x290>
   26614:	add	r1, pc, r1
   26618:	ldr	r0, [pc, #180]	; 266d4 <test_nested_buffer_using_nest@@Base+0x294>
   2661c:	add	r0, pc, r0
   26620:	bl	12a08 <__assert_fail@plt>
   26624:	ldr	r0, [fp, #-28]	; 0xffffffe4
   26628:	bl	162b8 <_start@@Base+0x38a0>
   2662c:	mov	r2, r0
   26630:	ldr	r3, [pc, #160]	; 266d8 <test_nested_buffer_using_nest@@Base+0x298>
   26634:	add	r3, pc, r3
   26638:	mov	r1, r3
   2663c:	mov	r0, r2
   26640:	bl	1290c <strcmp@plt>
   26644:	mov	r3, r0
   26648:	cmp	r3, #0
   2664c:	beq	26668 <test_nested_buffer_using_nest@@Base+0x228>
   26650:	ldr	r3, [pc, #132]	; 266dc <test_nested_buffer_using_nest@@Base+0x29c>
   26654:	add	r3, pc, r3
   26658:	mov	r0, r3
   2665c:	bl	1296c <puts@plt>
   26660:	mvn	r3, #0
   26664:	b	26698 <test_nested_buffer_using_nest@@Base+0x258>
   26668:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2666c:	bl	160e0 <_start@@Base+0x36c8>
   26670:	mov	r3, r0
   26674:	cmp	r3, #42	; 0x2a
   26678:	beq	26694 <test_nested_buffer_using_nest@@Base+0x254>
   2667c:	ldr	r3, [pc, #92]	; 266e0 <test_nested_buffer_using_nest@@Base+0x2a0>
   26680:	add	r3, pc, r3
   26684:	mov	r0, r3
   26688:	bl	1296c <puts@plt>
   2668c:	mvn	r3, #0
   26690:	b	26698 <test_nested_buffer_using_nest@@Base+0x258>
   26694:	mov	r3, #0
   26698:	mov	r0, r3
   2669c:	sub	sp, fp, #8
   266a0:	pop	{r4, fp, pc}
   266a4:	andeq	pc, r1, r0, lsr #23
   266a8:	muleq	r0, r0, r5
   266ac:	ldrdeq	sp, [r0], -r8
   266b0:	andeq	fp, r0, ip, rrx
   266b4:	andeq	r0, r0, r8, rrx
   266b8:	andeq	sp, r0, ip, asr r5
   266bc:	strdeq	sl, [r0], -ip
   266c0:	andeq	sp, r0, r0, lsl #9
   266c4:	andeq	sp, r0, r4, ror #8
   266c8:	ldrdeq	lr, [r0], -r4
   266cc:	strdeq	r0, [r0], -sl
   266d0:	andeq	fp, r0, r8, ror #16
   266d4:	andeq	sp, r0, r8, asr #8
   266d8:	andeq	sp, r0, ip, asr #7
   266dc:	andeq	sp, r0, ip, lsr #8
   266e0:	andeq	sp, r0, r0, ror #8

000266e4 <verify_include@@Base>:
   266e4:	push	{fp}		; (str fp, [sp, #-4]!)
   266e8:	add	fp, sp, #0
   266ec:	sub	sp, sp, #12
   266f0:	str	r0, [fp, #-8]
   266f4:	mov	r3, #0
   266f8:	mov	r0, r3
   266fc:	add	sp, fp, #0
   26700:	pop	{fp}		; (ldr fp, [sp], #4)
   26704:	bx	lr

00026708 <test_struct_buffer@@Base>:
   26708:	push	{r4, fp, lr}
   2670c:	add	fp, sp, #8
   26710:	sub	sp, sp, #124	; 0x7c
   26714:	str	r0, [fp, #-128]	; 0xffffff80
   26718:	ldr	r4, [pc, #700]	; 269dc <test_struct_buffer@@Base+0x2d4>
   2671c:	add	r4, pc, r4
   26720:	ldr	r0, [fp, #-128]	; 0xffffff80
   26724:	bl	286e4 <flatcc_builder_reset@@Base>
   26728:	mvn	r3, #16
   2672c:	ldr	r2, [pc, #684]	; 269e0 <test_struct_buffer@@Base+0x2d8>
   26730:	mov	r1, #8
   26734:	vldr	d2, [pc, #652]	; 269c8 <test_struct_buffer@@Base+0x2c0>
   26738:	vldr	s2, [pc, #656]	; 269d0 <test_struct_buffer@@Base+0x2c8>
   2673c:	vldr	s1, [pc, #656]	; 269d4 <test_struct_buffer@@Base+0x2cc>
   26740:	vldr	s0, [pc, #656]	; 269d8 <test_struct_buffer@@Base+0x2d0>
   26744:	ldr	r0, [fp, #-128]	; 0xffffff80
   26748:	bl	1a9c4 <_start@@Base+0x7fac>
   2674c:	ldr	r0, [fp, #-128]	; 0xffffff80
   26750:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   26754:	str	r0, [fp, #-16]
   26758:	ldr	r3, [fp, #-16]
   2675c:	cmp	r3, #48	; 0x30
   26760:	beq	26784 <test_struct_buffer@@Base+0x7c>
   26764:	ldr	r3, [pc, #632]	; 269e4 <test_struct_buffer@@Base+0x2dc>
   26768:	add	r3, pc, r3
   2676c:	ldr	r2, [pc, #628]	; 269e8 <test_struct_buffer@@Base+0x2e0>
   26770:	ldr	r1, [pc, #628]	; 269ec <test_struct_buffer@@Base+0x2e4>
   26774:	add	r1, pc, r1
   26778:	ldr	r0, [pc, #624]	; 269f0 <test_struct_buffer@@Base+0x2e8>
   2677c:	add	r0, pc, r0
   26780:	bl	12a08 <__assert_fail@plt>
   26784:	ldr	r3, [fp, #-16]
   26788:	mov	r1, r3
   2678c:	ldr	r3, [pc, #608]	; 269f4 <test_struct_buffer@@Base+0x2ec>
   26790:	add	r3, pc, r3
   26794:	mov	r0, r3
   26798:	bl	12918 <printf@plt>
   2679c:	ldr	r0, [fp, #-128]	; 0xffffff80
   267a0:	bl	2d90c <flatcc_builder_get_emit_context@@Base>
   267a4:	mov	r3, r0
   267a8:	mov	r0, r3
   267ac:	bl	19c10 <_start@@Base+0x71f8>
   267b0:	mov	r2, r0
   267b4:	ldr	r3, [fp, #-16]
   267b8:	cmp	r2, r3
   267bc:	beq	267e0 <test_struct_buffer@@Base+0xd8>
   267c0:	ldr	r3, [pc, #560]	; 269f8 <test_struct_buffer@@Base+0x2f0>
   267c4:	add	r3, pc, r3
   267c8:	ldr	r2, [pc, #556]	; 269fc <test_struct_buffer@@Base+0x2f4>
   267cc:	ldr	r1, [pc, #556]	; 26a00 <test_struct_buffer@@Base+0x2f8>
   267d0:	add	r1, pc, r1
   267d4:	ldr	r0, [pc, #552]	; 26a04 <test_struct_buffer@@Base+0x2fc>
   267d8:	add	r0, pc, r0
   267dc:	bl	12a08 <__assert_fail@plt>
   267e0:	sub	r3, fp, #124	; 0x7c
   267e4:	mov	r2, #100	; 0x64
   267e8:	mov	r1, r3
   267ec:	ldr	r0, [fp, #-128]	; 0xffffff80
   267f0:	bl	2d630 <flatcc_builder_copy_buffer@@Base>
   267f4:	mov	r3, r0
   267f8:	cmp	r3, #0
   267fc:	bne	26818 <test_struct_buffer@@Base+0x110>
   26800:	ldr	r3, [pc, #512]	; 26a08 <test_struct_buffer@@Base+0x300>
   26804:	add	r3, pc, r3
   26808:	mov	r0, r3
   2680c:	bl	1296c <puts@plt>
   26810:	mvn	r3, #0
   26814:	b	269bc <test_struct_buffer@@Base+0x2b4>
   26818:	ldr	r3, [pc, #492]	; 26a0c <test_struct_buffer@@Base+0x304>
   2681c:	ldr	r3, [r4, r3]
   26820:	ldr	r3, [r3]
   26824:	sub	r1, fp, #124	; 0x7c
   26828:	ldr	r2, [fp, #-16]
   2682c:	ldr	r0, [pc, #476]	; 26a10 <test_struct_buffer@@Base+0x308>
   26830:	add	r0, pc, r0
   26834:	bl	1fc0c <_start@@Base+0xd1f4>
   26838:	sub	r3, fp, #124	; 0x7c
   2683c:	ldr	r2, [pc, #464]	; 26a14 <test_struct_buffer@@Base+0x30c>
   26840:	add	r2, pc, r2
   26844:	mov	r1, r2
   26848:	mov	r0, r3
   2684c:	bl	145c0 <_start@@Base+0x1ba8>
   26850:	mov	r3, r0
   26854:	cmp	r3, #0
   26858:	bne	26874 <test_struct_buffer@@Base+0x16c>
   2685c:	ldr	r3, [pc, #436]	; 26a18 <test_struct_buffer@@Base+0x310>
   26860:	add	r3, pc, r3
   26864:	mov	r0, r3
   26868:	bl	1296c <puts@plt>
   2686c:	mvn	r3, #0
   26870:	b	269bc <test_struct_buffer@@Base+0x2b4>
   26874:	sub	r3, fp, #124	; 0x7c
   26878:	ldr	r2, [pc, #412]	; 26a1c <test_struct_buffer@@Base+0x314>
   2687c:	add	r2, pc, r2
   26880:	mov	r1, r2
   26884:	mov	r0, r3
   26888:	bl	145c0 <_start@@Base+0x1ba8>
   2688c:	mov	r3, r0
   26890:	cmp	r3, #0
   26894:	beq	268b0 <test_struct_buffer@@Base+0x1a8>
   26898:	ldr	r3, [pc, #384]	; 26a20 <test_struct_buffer@@Base+0x318>
   2689c:	add	r3, pc, r3
   268a0:	mov	r0, r3
   268a4:	bl	1296c <puts@plt>
   268a8:	mvn	r3, #0
   268ac:	b	269bc <test_struct_buffer@@Base+0x2b4>
   268b0:	sub	r3, fp, #124	; 0x7c
   268b4:	ldr	r2, [pc, #360]	; 26a24 <test_struct_buffer@@Base+0x31c>
   268b8:	add	r2, pc, r2
   268bc:	mov	r1, r2
   268c0:	mov	r0, r3
   268c4:	bl	145c0 <_start@@Base+0x1ba8>
   268c8:	mov	r3, r0
   268cc:	cmp	r3, #0
   268d0:	bne	268ec <test_struct_buffer@@Base+0x1e4>
   268d4:	ldr	r3, [pc, #332]	; 26a28 <test_struct_buffer@@Base+0x320>
   268d8:	add	r3, pc, r3
   268dc:	mov	r0, r3
   268e0:	bl	1296c <puts@plt>
   268e4:	mvn	r3, #0
   268e8:	b	269bc <test_struct_buffer@@Base+0x2b4>
   268ec:	sub	r3, fp, #124	; 0x7c
   268f0:	mov	r0, r3
   268f4:	bl	14b0c <_start@@Base+0x20f4>
   268f8:	str	r0, [fp, #-20]	; 0xffffffec
   268fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   26900:	str	r3, [fp, #-24]	; 0xffffffe8
   26904:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26908:	bl	1a878 <_start@@Base+0x7e60>
   2690c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26910:	vldr	s15, [r3]
   26914:	vldr	s14, [pc, #188]	; 269d8 <test_struct_buffer@@Base+0x2d0>
   26918:	vcmp.f32	s15, s14
   2691c:	vmrs	APSR_nzcv, fpscr
   26920:	bne	269a0 <test_struct_buffer@@Base+0x298>
   26924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26928:	vldr	s15, [r3, #4]
   2692c:	vldr	s14, [pc, #160]	; 269d4 <test_struct_buffer@@Base+0x2cc>
   26930:	vcmp.f32	s15, s14
   26934:	vmrs	APSR_nzcv, fpscr
   26938:	bne	269a0 <test_struct_buffer@@Base+0x298>
   2693c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26940:	vldr	s15, [r3, #8]
   26944:	vldr	s14, [pc, #132]	; 269d0 <test_struct_buffer@@Base+0x2c8>
   26948:	vcmp.f32	s15, s14
   2694c:	vmrs	APSR_nzcv, fpscr
   26950:	bne	269a0 <test_struct_buffer@@Base+0x298>
   26954:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26958:	vldr	d7, [r3, #16]
   2695c:	vldr	d6, [pc, #100]	; 269c8 <test_struct_buffer@@Base+0x2c0>
   26960:	vcmp.f64	d7, d6
   26964:	vmrs	APSR_nzcv, fpscr
   26968:	bne	269a0 <test_struct_buffer@@Base+0x298>
   2696c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26970:	ldrsb	r3, [r3, #24]
   26974:	cmp	r3, #8
   26978:	bne	269a0 <test_struct_buffer@@Base+0x298>
   2697c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26980:	ldrsh	r3, [r3, #26]
   26984:	ldr	r2, [pc, #84]	; 269e0 <test_struct_buffer@@Base+0x2d8>
   26988:	cmp	r3, r2
   2698c:	bne	269a0 <test_struct_buffer@@Base+0x298>
   26990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26994:	ldrsb	r3, [r3, #28]
   26998:	cmn	r3, #17
   2699c:	beq	269b8 <test_struct_buffer@@Base+0x2b0>
   269a0:	ldr	r3, [pc, #132]	; 26a2c <test_struct_buffer@@Base+0x324>
   269a4:	add	r3, pc, r3
   269a8:	mov	r0, r3
   269ac:	bl	1296c <puts@plt>
   269b0:	mvn	r3, #0
   269b4:	b	269bc <test_struct_buffer@@Base+0x2b4>
   269b8:	mov	r3, #0
   269bc:	mov	r0, r3
   269c0:	sub	sp, fp, #8
   269c4:	pop	{r4, fp, pc}
   269c8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   269cc:	andsmi	ip, r0, ip, asr #25
   269d0:	submi	r0, r0, r0
   269d4:	andmi	r0, r0, r0
   269d8:	svccc	0x00800000
   269dc:	ldrdeq	pc, [r1], -ip
   269e0:	andeq	r0, r0, sl, lsr #21
   269e4:	muleq	r0, r4, r0
   269e8:	andeq	r0, r0, r3, lsr #18
   269ec:	andeq	fp, r0, r8, lsl #14
   269f0:	andeq	sp, r0, r8, lsl #7
   269f4:	andeq	sp, r0, r0, lsl #7
   269f8:	andeq	lr, r0, r8, lsr r0
   269fc:	andeq	r0, r0, r5, lsr #18
   26a00:	andeq	fp, r0, ip, lsr #13
   26a04:	andeq	sp, r0, r8, asr r3
   26a08:	andeq	sp, r0, r8, ror r3
   26a0c:	andeq	r0, r0, r8, rrx
   26a10:	andeq	sp, r0, r8, asr r3
   26a14:	andeq	sl, r0, r8, asr #6
   26a18:	andeq	sp, r0, ip, lsr r3
   26a1c:	andeq	sp, r0, r4, asr #6
   26a20:	andeq	sp, r0, ip, lsr #6
   26a24:	ldrdeq	sl, [r0], -r0
   26a28:	andeq	sp, r0, ip, lsl r3
   26a2c:	andeq	sp, r0, r4, ror r2

00026a30 <test_typed_struct_buffer@@Base>:
   26a30:	push	{r4, fp, lr}
   26a34:	add	fp, sp, #8
   26a38:	sub	sp, sp, #124	; 0x7c
   26a3c:	str	r0, [fp, #-128]	; 0xffffff80
   26a40:	ldr	r4, [pc, #900]	; 26dcc <test_typed_struct_buffer@@Base+0x39c>
   26a44:	add	r4, pc, r4
   26a48:	ldr	r0, [fp, #-128]	; 0xffffff80
   26a4c:	bl	286e4 <flatcc_builder_reset@@Base>
   26a50:	mvn	r3, #16
   26a54:	ldr	r2, [pc, #884]	; 26dd0 <test_typed_struct_buffer@@Base+0x3a0>
   26a58:	mov	r1, #8
   26a5c:	vldr	d2, [pc, #852]	; 26db8 <test_typed_struct_buffer@@Base+0x388>
   26a60:	vldr	s2, [pc, #856]	; 26dc0 <test_typed_struct_buffer@@Base+0x390>
   26a64:	vldr	s1, [pc, #856]	; 26dc4 <test_typed_struct_buffer@@Base+0x394>
   26a68:	vldr	s0, [pc, #856]	; 26dc8 <test_typed_struct_buffer@@Base+0x398>
   26a6c:	ldr	r0, [fp, #-128]	; 0xffffff80
   26a70:	bl	1aa64 <_start@@Base+0x804c>
   26a74:	ldr	r0, [fp, #-128]	; 0xffffff80
   26a78:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   26a7c:	str	r0, [fp, #-16]
   26a80:	ldr	r3, [fp, #-16]
   26a84:	cmp	r3, #48	; 0x30
   26a88:	beq	26aac <test_typed_struct_buffer@@Base+0x7c>
   26a8c:	ldr	r3, [pc, #832]	; 26dd4 <test_typed_struct_buffer@@Base+0x3a4>
   26a90:	add	r3, pc, r3
   26a94:	ldr	r2, [pc, #828]	; 26dd8 <test_typed_struct_buffer@@Base+0x3a8>
   26a98:	ldr	r1, [pc, #828]	; 26ddc <test_typed_struct_buffer@@Base+0x3ac>
   26a9c:	add	r1, pc, r1
   26aa0:	ldr	r0, [pc, #824]	; 26de0 <test_typed_struct_buffer@@Base+0x3b0>
   26aa4:	add	r0, pc, r0
   26aa8:	bl	12a08 <__assert_fail@plt>
   26aac:	ldr	r3, [fp, #-16]
   26ab0:	mov	r1, r3
   26ab4:	ldr	r3, [pc, #808]	; 26de4 <test_typed_struct_buffer@@Base+0x3b4>
   26ab8:	add	r3, pc, r3
   26abc:	mov	r0, r3
   26ac0:	bl	12918 <printf@plt>
   26ac4:	ldr	r0, [fp, #-128]	; 0xffffff80
   26ac8:	bl	2d90c <flatcc_builder_get_emit_context@@Base>
   26acc:	mov	r3, r0
   26ad0:	mov	r0, r3
   26ad4:	bl	19c10 <_start@@Base+0x71f8>
   26ad8:	mov	r2, r0
   26adc:	ldr	r3, [fp, #-16]
   26ae0:	cmp	r2, r3
   26ae4:	beq	26b08 <test_typed_struct_buffer@@Base+0xd8>
   26ae8:	ldr	r3, [pc, #760]	; 26de8 <test_typed_struct_buffer@@Base+0x3b8>
   26aec:	add	r3, pc, r3
   26af0:	ldr	r2, [pc, #756]	; 26dec <test_typed_struct_buffer@@Base+0x3bc>
   26af4:	ldr	r1, [pc, #756]	; 26df0 <test_typed_struct_buffer@@Base+0x3c0>
   26af8:	add	r1, pc, r1
   26afc:	ldr	r0, [pc, #752]	; 26df4 <test_typed_struct_buffer@@Base+0x3c4>
   26b00:	add	r0, pc, r0
   26b04:	bl	12a08 <__assert_fail@plt>
   26b08:	sub	r3, fp, #124	; 0x7c
   26b0c:	mov	r2, #100	; 0x64
   26b10:	mov	r1, r3
   26b14:	ldr	r0, [fp, #-128]	; 0xffffff80
   26b18:	bl	2d630 <flatcc_builder_copy_buffer@@Base>
   26b1c:	mov	r3, r0
   26b20:	cmp	r3, #0
   26b24:	bne	26b40 <test_typed_struct_buffer@@Base+0x110>
   26b28:	ldr	r3, [pc, #712]	; 26df8 <test_typed_struct_buffer@@Base+0x3c8>
   26b2c:	add	r3, pc, r3
   26b30:	mov	r0, r3
   26b34:	bl	1296c <puts@plt>
   26b38:	mvn	r3, #0
   26b3c:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26b40:	ldr	r3, [pc, #692]	; 26dfc <test_typed_struct_buffer@@Base+0x3cc>
   26b44:	ldr	r3, [r4, r3]
   26b48:	ldr	r3, [r3]
   26b4c:	sub	r1, fp, #124	; 0x7c
   26b50:	ldr	r2, [fp, #-16]
   26b54:	ldr	r0, [pc, #676]	; 26e00 <test_typed_struct_buffer@@Base+0x3d0>
   26b58:	add	r0, pc, r0
   26b5c:	bl	1fc0c <_start@@Base+0xd1f4>
   26b60:	sub	r3, fp, #124	; 0x7c
   26b64:	ldr	r2, [pc, #664]	; 26e04 <test_typed_struct_buffer@@Base+0x3d4>
   26b68:	add	r2, pc, r2
   26b6c:	mov	r1, r2
   26b70:	mov	r0, r3
   26b74:	bl	145c0 <_start@@Base+0x1ba8>
   26b78:	mov	r3, r0
   26b7c:	cmp	r3, #0
   26b80:	bne	26b9c <test_typed_struct_buffer@@Base+0x16c>
   26b84:	ldr	r3, [pc, #636]	; 26e08 <test_typed_struct_buffer@@Base+0x3d8>
   26b88:	add	r3, pc, r3
   26b8c:	mov	r0, r3
   26b90:	bl	1296c <puts@plt>
   26b94:	mvn	r3, #0
   26b98:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26b9c:	sub	r3, fp, #124	; 0x7c
   26ba0:	ldr	r2, [pc, #612]	; 26e0c <test_typed_struct_buffer@@Base+0x3dc>
   26ba4:	add	r2, pc, r2
   26ba8:	mov	r1, r2
   26bac:	mov	r0, r3
   26bb0:	bl	145c0 <_start@@Base+0x1ba8>
   26bb4:	mov	r3, r0
   26bb8:	cmp	r3, #0
   26bbc:	beq	26bd8 <test_typed_struct_buffer@@Base+0x1a8>
   26bc0:	ldr	r3, [pc, #584]	; 26e10 <test_typed_struct_buffer@@Base+0x3e0>
   26bc4:	add	r3, pc, r3
   26bc8:	mov	r0, r3
   26bcc:	bl	1296c <puts@plt>
   26bd0:	mvn	r3, #0
   26bd4:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26bd8:	sub	r3, fp, #124	; 0x7c
   26bdc:	ldr	r2, [pc, #560]	; 26e14 <test_typed_struct_buffer@@Base+0x3e4>
   26be0:	add	r2, pc, r2
   26be4:	mov	r1, r2
   26be8:	mov	r0, r3
   26bec:	bl	145c0 <_start@@Base+0x1ba8>
   26bf0:	mov	r3, r0
   26bf4:	cmp	r3, #0
   26bf8:	bne	26c14 <test_typed_struct_buffer@@Base+0x1e4>
   26bfc:	ldr	r3, [pc, #532]	; 26e18 <test_typed_struct_buffer@@Base+0x3e8>
   26c00:	add	r3, pc, r3
   26c04:	mov	r0, r3
   26c08:	bl	1296c <puts@plt>
   26c0c:	mvn	r3, #0
   26c10:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26c14:	sub	r3, fp, #124	; 0x7c
   26c18:	ldr	r1, [pc, #508]	; 26e1c <test_typed_struct_buffer@@Base+0x3ec>
   26c1c:	mov	r0, r3
   26c20:	bl	14aac <_start@@Base+0x2094>
   26c24:	mov	r3, r0
   26c28:	cmp	r3, #0
   26c2c:	bne	26c48 <test_typed_struct_buffer@@Base+0x218>
   26c30:	ldr	r3, [pc, #488]	; 26e20 <test_typed_struct_buffer@@Base+0x3f0>
   26c34:	add	r3, pc, r3
   26c38:	mov	r0, r3
   26c3c:	bl	1296c <puts@plt>
   26c40:	mvn	r3, #0
   26c44:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26c48:	sub	r3, fp, #124	; 0x7c
   26c4c:	ldr	r2, [pc, #456]	; 26e1c <test_typed_struct_buffer@@Base+0x3ec>
   26c50:	ldr	r1, [fp, #-16]
   26c54:	mov	r0, r3
   26c58:	bl	1e6a8 <_start@@Base+0xbc90>
   26c5c:	mov	r3, r0
   26c60:	cmp	r3, #0
   26c64:	beq	26c80 <test_typed_struct_buffer@@Base+0x250>
   26c68:	ldr	r3, [pc, #436]	; 26e24 <test_typed_struct_buffer@@Base+0x3f4>
   26c6c:	add	r3, pc, r3
   26c70:	mov	r0, r3
   26c74:	bl	1296c <puts@plt>
   26c78:	mvn	r3, #0
   26c7c:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26c80:	sub	r3, fp, #124	; 0x7c
   26c84:	mov	r0, r3
   26c88:	bl	14b78 <_start@@Base+0x2160>
   26c8c:	str	r0, [fp, #-20]	; 0xffffffec
   26c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   26c94:	cmp	r3, #0
   26c98:	bne	26cb4 <test_typed_struct_buffer@@Base+0x284>
   26c9c:	ldr	r3, [pc, #388]	; 26e28 <test_typed_struct_buffer@@Base+0x3f8>
   26ca0:	add	r3, pc, r3
   26ca4:	mov	r0, r3
   26ca8:	bl	1296c <puts@plt>
   26cac:	mvn	r3, #0
   26cb0:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26cb4:	sub	r3, fp, #124	; 0x7c
   26cb8:	ldr	r1, [fp, #-16]
   26cbc:	mov	r0, r3
   26cc0:	bl	1e664 <_start@@Base+0xbc4c>
   26cc4:	mov	r3, r0
   26cc8:	cmp	r3, #0
   26ccc:	beq	26ce8 <test_typed_struct_buffer@@Base+0x2b8>
   26cd0:	ldr	r3, [pc, #340]	; 26e2c <test_typed_struct_buffer@@Base+0x3fc>
   26cd4:	add	r3, pc, r3
   26cd8:	mov	r0, r3
   26cdc:	bl	1296c <puts@plt>
   26ce0:	mvn	r3, #0
   26ce4:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26ce8:	ldr	r3, [fp, #-20]	; 0xffffffec
   26cec:	str	r3, [fp, #-24]	; 0xffffffe8
   26cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   26cf4:	bl	1a878 <_start@@Base+0x7e60>
   26cf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26cfc:	vldr	s15, [r3]
   26d00:	vldr	s14, [pc, #192]	; 26dc8 <test_typed_struct_buffer@@Base+0x398>
   26d04:	vcmp.f32	s15, s14
   26d08:	vmrs	APSR_nzcv, fpscr
   26d0c:	bne	26d8c <test_typed_struct_buffer@@Base+0x35c>
   26d10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26d14:	vldr	s15, [r3, #4]
   26d18:	vldr	s14, [pc, #164]	; 26dc4 <test_typed_struct_buffer@@Base+0x394>
   26d1c:	vcmp.f32	s15, s14
   26d20:	vmrs	APSR_nzcv, fpscr
   26d24:	bne	26d8c <test_typed_struct_buffer@@Base+0x35c>
   26d28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26d2c:	vldr	s15, [r3, #8]
   26d30:	vldr	s14, [pc, #136]	; 26dc0 <test_typed_struct_buffer@@Base+0x390>
   26d34:	vcmp.f32	s15, s14
   26d38:	vmrs	APSR_nzcv, fpscr
   26d3c:	bne	26d8c <test_typed_struct_buffer@@Base+0x35c>
   26d40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26d44:	vldr	d7, [r3, #16]
   26d48:	vldr	d6, [pc, #104]	; 26db8 <test_typed_struct_buffer@@Base+0x388>
   26d4c:	vcmp.f64	d7, d6
   26d50:	vmrs	APSR_nzcv, fpscr
   26d54:	bne	26d8c <test_typed_struct_buffer@@Base+0x35c>
   26d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26d5c:	ldrsb	r3, [r3, #24]
   26d60:	cmp	r3, #8
   26d64:	bne	26d8c <test_typed_struct_buffer@@Base+0x35c>
   26d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26d6c:	ldrsh	r3, [r3, #26]
   26d70:	ldr	r2, [pc, #88]	; 26dd0 <test_typed_struct_buffer@@Base+0x3a0>
   26d74:	cmp	r3, r2
   26d78:	bne	26d8c <test_typed_struct_buffer@@Base+0x35c>
   26d7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   26d80:	ldrsb	r3, [r3, #28]
   26d84:	cmn	r3, #17
   26d88:	beq	26da4 <test_typed_struct_buffer@@Base+0x374>
   26d8c:	ldr	r3, [pc, #156]	; 26e30 <test_typed_struct_buffer@@Base+0x400>
   26d90:	add	r3, pc, r3
   26d94:	mov	r0, r3
   26d98:	bl	1296c <puts@plt>
   26d9c:	mvn	r3, #0
   26da0:	b	26da8 <test_typed_struct_buffer@@Base+0x378>
   26da4:	mov	r3, #0
   26da8:	mov	r0, r3
   26dac:	sub	sp, fp, #8
   26db0:	pop	{r4, fp, pc}
   26db4:	nop			; (mov r0, r0)
   26db8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   26dbc:	andsmi	ip, r0, ip, asr #25
   26dc0:	submi	r0, r0, r0
   26dc4:	andmi	r0, r0, r0
   26dc8:	svccc	0x00800000
   26dcc:			; <UNDEFINED> instruction: 0x0001f5b4
   26dd0:	andeq	r0, r0, sl, lsr #21
   26dd4:	andeq	sp, r0, r0, lsl #27
   26dd8:	andeq	r0, r0, r4, asr r9
   26ddc:	andeq	fp, r0, r0, ror #7
   26de0:	andeq	sp, r0, r0, rrx
   26de4:	andeq	sp, r0, r8, asr r0
   26de8:	andeq	sp, r0, r4, lsr #26
   26dec:	andeq	r0, r0, r6, asr r9
   26df0:	andeq	fp, r0, r4, lsl #7
   26df4:	andeq	sp, r0, r0, lsr r0
   26df8:	andeq	sp, r0, r0, asr r0
   26dfc:	andeq	r0, r0, r8, rrx
   26e00:	ldrdeq	sp, [r0], -r8
   26e04:	strdeq	sl, [r0], -ip
   26e08:	andeq	sp, r0, r4, lsl r0
   26e0c:	andeq	sp, r0, ip, lsl r0
   26e10:	andeq	sp, r0, r4
   26e14:	andeq	sl, r0, r4, lsl #1
   26e18:	strdeq	ip, [r0], -r4
   26e1c:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   26e20:	andeq	sp, r0, r8, lsl r0
   26e24:	andeq	sp, r0, r8
   26e28:	strdeq	ip, [r0], -r8
   26e2c:	andeq	ip, r0, r4, ror #31
   26e30:	andeq	ip, r0, r8, lsl #29

00026e34 <gen_monster_benchmark@@Base>:
   26e34:	push	{fp, lr}
   26e38:	add	fp, sp, #4
   26e3c:	sub	sp, sp, #32
   26e40:	str	r0, [fp, #-32]	; 0xffffffe0
   26e44:	ldr	r2, [pc, #340]	; 26fa0 <gen_monster_benchmark@@Base+0x16c>
   26e48:	add	r2, pc, r2
   26e4c:	sub	r3, fp, #24
   26e50:	ldm	r2, {r0, r1, r2}
   26e54:	stmia	r3!, {r0, r1}
   26e58:	strh	r2, [r3]
   26e5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26e60:	bl	286e4 <flatcc_builder_reset@@Base>
   26e64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26e68:	bl	1d28c <_start@@Base+0xa874>
   26e6c:	mov	r1, #80	; 0x50
   26e70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26e74:	bl	1bd08 <_start@@Base+0x92f0>
   26e78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26e7c:	bl	1bc5c <_start@@Base+0x9244>
   26e80:	str	r0, [fp, #-8]
   26e84:	ldr	r3, [fp, #-8]
   26e88:	mov	r2, #1065353216	; 0x3f800000
   26e8c:	str	r2, [r3]
   26e90:	ldr	r3, [fp, #-8]
   26e94:	mov	r2, #1073741824	; 0x40000000
   26e98:	str	r2, [r3, #4]
   26e9c:	ldr	r3, [fp, #-8]
   26ea0:	ldr	r2, [pc, #252]	; 26fa4 <gen_monster_benchmark@@Base+0x170>
   26ea4:	str	r2, [r3, #8]
   26ea8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26eac:	bl	1bc90 <_start@@Base+0x9278>
   26eb0:	ldr	r3, [pc, #240]	; 26fa8 <gen_monster_benchmark@@Base+0x174>
   26eb4:	add	r3, pc, r3
   26eb8:	mov	r1, r3
   26ebc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26ec0:	bl	1bf80 <_start@@Base+0x9568>
   26ec4:	sub	r3, fp, #24
   26ec8:	mov	r2, #10
   26ecc:	mov	r1, r3
   26ed0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26ed4:	bl	1c324 <_start@@Base+0x990c>
   26ed8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26edc:	bl	1cccc <_start@@Base+0xa2b4>
   26ee0:	mov	r1, #1
   26ee4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26ee8:	bl	1cdbc <_start@@Base+0xa3a4>
   26eec:	str	r0, [fp, #-12]
   26ef0:	ldr	r3, [fp, #-12]
   26ef4:	mov	r2, #16
   26ef8:	strh	r2, [r3]
   26efc:	ldr	r3, [fp, #-12]
   26f00:	mov	r2, #32
   26f04:	strb	r2, [r3, #2]
   26f08:	mov	r1, #2
   26f0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f10:	bl	1cdbc <_start@@Base+0xa3a4>
   26f14:	str	r0, [fp, #-12]
   26f18:	ldr	r3, [fp, #-12]
   26f1c:	mov	r2, #48	; 0x30
   26f20:	strh	r2, [r3]
   26f24:	ldr	r3, [fp, #-12]
   26f28:	mov	r2, #64	; 0x40
   26f2c:	strb	r2, [r3, #2]
   26f30:	ldr	r3, [fp, #-12]
   26f34:	add	r3, r3, #4
   26f38:	mov	r2, #80	; 0x50
   26f3c:	strh	r2, [r3]
   26f40:	ldr	r3, [fp, #-12]
   26f44:	add	r3, r3, #4
   26f48:	mov	r2, #96	; 0x60
   26f4c:	strb	r2, [r3, #2]
   26f50:	mvn	r2, #127	; 0x7f
   26f54:	mov	r1, #112	; 0x70
   26f58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f5c:	bl	1cecc <_start@@Base+0xa4b4>
   26f60:	ldr	r3, [pc, #68]	; 26fac <gen_monster_benchmark@@Base+0x178>
   26f64:	strh	r3, [fp, #-28]	; 0xffffffe4
   26f68:	mvn	r3, #110	; 0x6e
   26f6c:	strb	r3, [fp, #-26]	; 0xffffffe6
   26f70:	sub	r3, fp, #28
   26f74:	mov	r1, r3
   26f78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f7c:	bl	1ce6c <_start@@Base+0xa454>
   26f80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f84:	bl	1ccf4 <_start@@Base+0xa2dc>
   26f88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f8c:	bl	1d334 <_start@@Base+0xa91c>
   26f90:	mov	r3, #0
   26f94:	mov	r0, r3
   26f98:	sub	sp, fp, #4
   26f9c:	pop	{fp, pc}
   26fa0:	ldrdeq	fp, [r0], -r8
   26fa4:	subgt	ip, ip, sp, asr #25
   26fa8:	andeq	sl, r0, ip, asr #13
   26fac:	muleq	r0, r1, r1

00026fb0 <time_monster@@Base>:
   26fb0:	push	{fp, lr}
   26fb4:	add	fp, sp, #4
   26fb8:	sub	sp, sp, #40	; 0x28
   26fbc:	str	r0, [fp, #-40]	; 0xffffffd8
   26fc0:	ldr	r3, [pc, #144]	; 27058 <time_monster@@Base+0xa8>
   26fc4:	str	r3, [fp, #-12]
   26fc8:	ldr	r3, [pc, #140]	; 2705c <time_monster@@Base+0xac>
   26fcc:	add	r3, pc, r3
   26fd0:	mov	r0, r3
   26fd4:	bl	1296c <puts@plt>
   26fd8:	bl	1fe18 <_start@@Base+0xd400>
   26fdc:	vstr	d0, [fp, #-20]	; 0xffffffec
   26fe0:	mov	r3, #0
   26fe4:	str	r3, [fp, #-8]
   26fe8:	b	27000 <time_monster@@Base+0x50>
   26fec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26ff0:	bl	26e34 <gen_monster_benchmark@@Base>
   26ff4:	ldr	r3, [fp, #-8]
   26ff8:	add	r3, r3, #1
   26ffc:	str	r3, [fp, #-8]
   27000:	ldr	r2, [fp, #-8]
   27004:	ldr	r3, [fp, #-12]
   27008:	cmp	r2, r3
   2700c:	blt	26fec <time_monster@@Base+0x3c>
   27010:	ldr	r0, [fp, #-40]	; 0xffffffd8
   27014:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   27018:	str	r0, [fp, #-24]	; 0xffffffe8
   2701c:	bl	1fe18 <_start@@Base+0xd400>
   27020:	vstr	d0, [fp, #-36]	; 0xffffffdc
   27024:	ldr	r3, [pc, #52]	; 27060 <time_monster@@Base+0xb0>
   27028:	add	r3, pc, r3
   2702c:	ldr	r2, [fp, #-12]
   27030:	ldr	r1, [fp, #-24]	; 0xffffffe8
   27034:	vldr	d1, [fp, #-36]	; 0xffffffdc
   27038:	vldr	d0, [fp, #-20]	; 0xffffffec
   2703c:	ldr	r0, [pc, #32]	; 27064 <time_monster@@Base+0xb4>
   27040:	add	r0, pc, r0
   27044:	bl	1fec8 <_start@@Base+0xd4b0>
   27048:	mov	r3, #0
   2704c:	mov	r0, r3
   27050:	sub	sp, fp, #4
   27054:	pop	{fp, pc}
   27058:	andeq	r4, pc, r0, asr #4
   2705c:	andeq	ip, r0, r4, lsl sp
   27060:	andeq	ip, r0, ip, asr #25
   27064:			; <UNDEFINED> instruction: 0x0000ccbc

00027068 <gen_struct_buffer_benchmark@@Base>:
   27068:	push	{fp, lr}
   2706c:	add	fp, sp, #4
   27070:	sub	sp, sp, #24
   27074:	str	r0, [fp, #-24]	; 0xffffffe8
   27078:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2707c:	bl	286e4 <flatcc_builder_reset@@Base>
   27080:	mvn	r3, #16
   27084:	ldr	r2, [pc, #288]	; 271ac <gen_struct_buffer_benchmark@@Base+0x144>
   27088:	mov	r1, #8
   2708c:	vldr	d2, [pc, #260]	; 27198 <gen_struct_buffer_benchmark@@Base+0x130>
   27090:	vldr	s2, [pc, #264]	; 271a0 <gen_struct_buffer_benchmark@@Base+0x138>
   27094:	vldr	s1, [pc, #264]	; 271a4 <gen_struct_buffer_benchmark@@Base+0x13c>
   27098:	vldr	s0, [pc, #264]	; 271a8 <gen_struct_buffer_benchmark@@Base+0x140>
   2709c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   270a0:	bl	1a9c4 <_start@@Base+0x7fac>
   270a4:	mov	r1, #0
   270a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   270ac:	bl	2d5c8 <flatcc_builder_get_direct_buffer@@Base>
   270b0:	str	r0, [fp, #-8]
   270b4:	ldr	r3, [fp, #-8]
   270b8:	cmp	r3, #0
   270bc:	bne	270c8 <gen_struct_buffer_benchmark@@Base+0x60>
   270c0:	mvn	r3, #0
   270c4:	b	27188 <gen_struct_buffer_benchmark@@Base+0x120>
   270c8:	mov	r1, #0
   270cc:	ldr	r0, [fp, #-8]
   270d0:	bl	14a4c <_start@@Base+0x2034>
   270d4:	str	r0, [fp, #-12]
   270d8:	ldr	r3, [fp, #-12]
   270dc:	str	r3, [fp, #-16]
   270e0:	ldr	r0, [fp, #-16]
   270e4:	bl	1a878 <_start@@Base+0x7e60>
   270e8:	ldr	r3, [fp, #-16]
   270ec:	vldr	s15, [r3]
   270f0:	vldr	s14, [pc, #176]	; 271a8 <gen_struct_buffer_benchmark@@Base+0x140>
   270f4:	vcmp.f32	s15, s14
   270f8:	vmrs	APSR_nzcv, fpscr
   270fc:	bne	2717c <gen_struct_buffer_benchmark@@Base+0x114>
   27100:	ldr	r3, [fp, #-16]
   27104:	vldr	s15, [r3, #4]
   27108:	vldr	s14, [pc, #148]	; 271a4 <gen_struct_buffer_benchmark@@Base+0x13c>
   2710c:	vcmp.f32	s15, s14
   27110:	vmrs	APSR_nzcv, fpscr
   27114:	bne	2717c <gen_struct_buffer_benchmark@@Base+0x114>
   27118:	ldr	r3, [fp, #-16]
   2711c:	vldr	s15, [r3, #8]
   27120:	vldr	s14, [pc, #120]	; 271a0 <gen_struct_buffer_benchmark@@Base+0x138>
   27124:	vcmp.f32	s15, s14
   27128:	vmrs	APSR_nzcv, fpscr
   2712c:	bne	2717c <gen_struct_buffer_benchmark@@Base+0x114>
   27130:	ldr	r3, [fp, #-16]
   27134:	vldr	d7, [r3, #16]
   27138:	vldr	d6, [pc, #88]	; 27198 <gen_struct_buffer_benchmark@@Base+0x130>
   2713c:	vcmp.f64	d7, d6
   27140:	vmrs	APSR_nzcv, fpscr
   27144:	bne	2717c <gen_struct_buffer_benchmark@@Base+0x114>
   27148:	ldr	r3, [fp, #-16]
   2714c:	ldrsb	r3, [r3, #24]
   27150:	cmp	r3, #8
   27154:	bne	2717c <gen_struct_buffer_benchmark@@Base+0x114>
   27158:	ldr	r3, [fp, #-16]
   2715c:	ldrsh	r3, [r3, #26]
   27160:	ldr	r2, [pc, #68]	; 271ac <gen_struct_buffer_benchmark@@Base+0x144>
   27164:	cmp	r3, r2
   27168:	bne	2717c <gen_struct_buffer_benchmark@@Base+0x114>
   2716c:	ldr	r3, [fp, #-16]
   27170:	ldrsb	r3, [r3, #28]
   27174:	cmn	r3, #17
   27178:	beq	27184 <gen_struct_buffer_benchmark@@Base+0x11c>
   2717c:	mvn	r3, #0
   27180:	b	27188 <gen_struct_buffer_benchmark@@Base+0x120>
   27184:	mov	r3, #0
   27188:	mov	r0, r3
   2718c:	sub	sp, fp, #4
   27190:	pop	{fp, pc}
   27194:	nop			; (mov r0, r0)
   27198:	stclgt	12, cr12, [ip], {205}	; 0xcd
   2719c:	andsmi	ip, r0, ip, asr #25
   271a0:	submi	r0, r0, r0
   271a4:	andmi	r0, r0, r0
   271a8:	svccc	0x00800000
   271ac:	andeq	r0, r0, sl, lsr #21

000271b0 <time_struct_buffer@@Base>:
   271b0:	push	{fp, lr}
   271b4:	add	fp, sp, #4
   271b8:	sub	sp, sp, #48	; 0x30
   271bc:	str	r0, [fp, #-48]	; 0xffffffd0
   271c0:	ldr	r3, [pc, #196]	; 2728c <time_struct_buffer@@Base+0xdc>
   271c4:	str	r3, [fp, #-16]
   271c8:	mov	r3, #0
   271cc:	str	r3, [fp, #-12]
   271d0:	ldr	r3, [pc, #184]	; 27290 <time_struct_buffer@@Base+0xe0>
   271d4:	add	r3, pc, r3
   271d8:	mov	r0, r3
   271dc:	bl	1296c <puts@plt>
   271e0:	bl	1fe18 <_start@@Base+0xd400>
   271e4:	vstr	d0, [fp, #-28]	; 0xffffffe4
   271e8:	mov	r3, #0
   271ec:	str	r3, [fp, #-8]
   271f0:	b	27218 <time_struct_buffer@@Base+0x68>
   271f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   271f8:	bl	27068 <gen_struct_buffer_benchmark@@Base>
   271fc:	mov	r2, r0
   27200:	ldr	r3, [fp, #-12]
   27204:	orr	r3, r3, r2
   27208:	str	r3, [fp, #-12]
   2720c:	ldr	r3, [fp, #-8]
   27210:	add	r3, r3, #1
   27214:	str	r3, [fp, #-8]
   27218:	ldr	r2, [fp, #-8]
   2721c:	ldr	r3, [fp, #-16]
   27220:	cmp	r2, r3
   27224:	blt	271f4 <time_struct_buffer@@Base+0x44>
   27228:	bl	1fe18 <_start@@Base+0xd400>
   2722c:	vstr	d0, [fp, #-36]	; 0xffffffdc
   27230:	ldr	r0, [fp, #-48]	; 0xffffffd0
   27234:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   27238:	str	r0, [fp, #-40]	; 0xffffffd8
   2723c:	ldr	r3, [fp, #-12]
   27240:	cmp	r3, #0
   27244:	beq	27258 <time_struct_buffer@@Base+0xa8>
   27248:	ldr	r3, [pc, #68]	; 27294 <time_struct_buffer@@Base+0xe4>
   2724c:	add	r3, pc, r3
   27250:	mov	r0, r3
   27254:	bl	1296c <puts@plt>
   27258:	ldr	r3, [pc, #56]	; 27298 <time_struct_buffer@@Base+0xe8>
   2725c:	add	r3, pc, r3
   27260:	ldr	r2, [fp, #-16]
   27264:	ldr	r1, [fp, #-40]	; 0xffffffd8
   27268:	vldr	d1, [fp, #-36]	; 0xffffffdc
   2726c:	vldr	d0, [fp, #-28]	; 0xffffffe4
   27270:	ldr	r0, [pc, #36]	; 2729c <time_struct_buffer@@Base+0xec>
   27274:	add	r0, pc, r0
   27278:	bl	1fec8 <_start@@Base+0xd4b0>
   2727c:	ldr	r3, [fp, #-12]
   27280:	mov	r0, r3
   27284:	sub	sp, fp, #4
   27288:	pop	{fp, pc}
   2728c:	andeq	r4, pc, r0, asr #4
   27290:	andeq	ip, r0, ip, lsl #22
   27294:	andeq	ip, r0, r8, asr #21
   27298:	muleq	r0, r8, sl
   2729c:			; <UNDEFINED> instruction: 0x0000cab4

000272a0 <main@@Base>:
   272a0:	push	{fp, lr}
   272a4:	add	fp, sp, #4
   272a8:	sub	sp, sp, #248	; 0xf8
   272ac:	str	r0, [fp, #-248]	; 0xffffff08
   272b0:	str	r1, [fp, #-252]	; 0xffffff04
   272b4:	sub	r3, fp, #240	; 0xf0
   272b8:	str	r3, [fp, #-8]
   272bc:	ldr	r0, [fp, #-8]
   272c0:	bl	28460 <flatcc_builder_init@@Base>
   272c4:	ldr	r3, [pc, #1044]	; 276e0 <main@@Base+0x440>
   272c8:	add	r3, pc, r3
   272cc:	mov	r0, r3
   272d0:	bl	1296c <puts@plt>
   272d4:	ldr	r0, [fp, #-8]
   272d8:	bl	20c0c <test_table_with_emptystruct@@Base>
   272dc:	mov	r3, r0
   272e0:	cmp	r3, #0
   272e4:	beq	27300 <main@@Base+0x60>
   272e8:	ldr	r3, [pc, #1012]	; 276e4 <main@@Base+0x444>
   272ec:	add	r3, pc, r3
   272f0:	mov	r0, r3
   272f4:	bl	1296c <puts@plt>
   272f8:	mvn	r3, #0
   272fc:	b	276d4 <main@@Base+0x434>
   27300:	ldr	r0, [fp, #-8]
   27304:	bl	20348 <test_enums@@Base>
   27308:	mov	r3, r0
   2730c:	cmp	r3, #0
   27310:	beq	2732c <main@@Base+0x8c>
   27314:	ldr	r3, [pc, #972]	; 276e8 <main@@Base+0x448>
   27318:	add	r3, pc, r3
   2731c:	mov	r0, r3
   27320:	bl	1296c <puts@plt>
   27324:	mvn	r3, #0
   27328:	b	276d4 <main@@Base+0x434>
   2732c:	ldr	r0, [fp, #-8]
   27330:	bl	20640 <test_empty_monster@@Base>
   27334:	mov	r3, r0
   27338:	cmp	r3, #0
   2733c:	beq	27358 <main@@Base+0xb8>
   27340:	ldr	r3, [pc, #932]	; 276ec <main@@Base+0x44c>
   27344:	add	r3, pc, r3
   27348:	mov	r0, r3
   2734c:	bl	1296c <puts@plt>
   27350:	mvn	r3, #0
   27354:	b	276d4 <main@@Base+0x434>
   27358:	ldr	r0, [fp, #-8]
   2735c:	bl	2287c <test_monster@@Base>
   27360:	mov	r3, r0
   27364:	cmp	r3, #0
   27368:	beq	27384 <main@@Base+0xe4>
   2736c:	ldr	r3, [pc, #892]	; 276f0 <main@@Base+0x450>
   27370:	add	r3, pc, r3
   27374:	mov	r0, r3
   27378:	bl	1296c <puts@plt>
   2737c:	mvn	r3, #0
   27380:	b	276d4 <main@@Base+0x434>
   27384:	ldr	r0, [fp, #-8]
   27388:	bl	22950 <test_monster_with_size@@Base>
   2738c:	mov	r3, r0
   27390:	cmp	r3, #0
   27394:	beq	273b0 <main@@Base+0x110>
   27398:	ldr	r3, [pc, #852]	; 276f4 <main@@Base+0x454>
   2739c:	add	r3, pc, r3
   273a0:	mov	r0, r3
   273a4:	bl	1296c <puts@plt>
   273a8:	mvn	r3, #0
   273ac:	b	276d4 <main@@Base+0x434>
   273b0:	ldr	r0, [fp, #-8]
   273b4:	bl	22ac8 <test_string@@Base>
   273b8:	mov	r3, r0
   273bc:	cmp	r3, #0
   273c0:	beq	273dc <main@@Base+0x13c>
   273c4:	ldr	r3, [pc, #812]	; 276f8 <main@@Base+0x458>
   273c8:	add	r3, pc, r3
   273cc:	mov	r0, r3
   273d0:	bl	1296c <puts@plt>
   273d4:	mvn	r3, #0
   273d8:	b	276d4 <main@@Base+0x434>
   273dc:	ldr	r0, [fp, #-8]
   273e0:	bl	26708 <test_struct_buffer@@Base>
   273e4:	mov	r3, r0
   273e8:	cmp	r3, #0
   273ec:	beq	27408 <main@@Base+0x168>
   273f0:	ldr	r3, [pc, #772]	; 276fc <main@@Base+0x45c>
   273f4:	add	r3, pc, r3
   273f8:	mov	r0, r3
   273fc:	bl	1296c <puts@plt>
   27400:	mvn	r3, #0
   27404:	b	276d4 <main@@Base+0x434>
   27408:	ldr	r0, [fp, #-8]
   2740c:	bl	207b8 <test_typed_empty_monster@@Base>
   27410:	mov	r3, r0
   27414:	cmp	r3, #0
   27418:	beq	27434 <main@@Base+0x194>
   2741c:	ldr	r3, [pc, #732]	; 27700 <main@@Base+0x460>
   27420:	add	r3, pc, r3
   27424:	mov	r0, r3
   27428:	bl	1296c <puts@plt>
   2742c:	mvn	r3, #0
   27430:	b	276d4 <main@@Base+0x434>
   27434:	ldr	r0, [fp, #-8]
   27438:	bl	20ca4 <test_typed_table_with_emptystruct@@Base>
   2743c:	mov	r3, r0
   27440:	cmp	r3, #0
   27444:	beq	27460 <main@@Base+0x1c0>
   27448:	ldr	r3, [pc, #692]	; 27704 <main@@Base+0x464>
   2744c:	add	r3, pc, r3
   27450:	mov	r0, r3
   27454:	bl	1296c <puts@plt>
   27458:	mvn	r3, #0
   2745c:	b	276d4 <main@@Base+0x434>
   27460:	ldr	r0, [fp, #-8]
   27464:	bl	26a30 <test_typed_struct_buffer@@Base>
   27468:	mov	r3, r0
   2746c:	cmp	r3, #0
   27470:	beq	2748c <main@@Base+0x1ec>
   27474:	ldr	r3, [pc, #652]	; 27708 <main@@Base+0x468>
   27478:	add	r3, pc, r3
   2747c:	mov	r0, r3
   27480:	bl	1296c <puts@plt>
   27484:	mvn	r3, #0
   27488:	b	276d4 <main@@Base+0x434>
   2748c:	ldr	r0, [fp, #-8]
   27490:	bl	2471c <test_clone_slice@@Base>
   27494:	mov	r3, r0
   27498:	cmp	r3, #0
   2749c:	beq	274b8 <main@@Base+0x218>
   274a0:	ldr	r3, [pc, #612]	; 2770c <main@@Base+0x46c>
   274a4:	add	r3, pc, r3
   274a8:	mov	r0, r3
   274ac:	bl	1296c <puts@plt>
   274b0:	mvn	r3, #0
   274b4:	b	276d4 <main@@Base+0x434>
   274b8:	ldr	r0, [fp, #-8]
   274bc:	bl	25e38 <test_add_set_defaults@@Base>
   274c0:	mov	r3, r0
   274c4:	cmp	r3, #0
   274c8:	beq	274e4 <main@@Base+0x244>
   274cc:	ldr	r3, [pc, #572]	; 27710 <main@@Base+0x470>
   274d0:	add	r3, pc, r3
   274d4:	mov	r0, r3
   274d8:	bl	1296c <puts@plt>
   274dc:	mvn	r3, #0
   274e0:	b	276d4 <main@@Base+0x434>
   274e4:	ldr	r0, [fp, #-8]
   274e8:	bl	24f44 <test_create_add_field@@Base>
   274ec:	mov	r3, r0
   274f0:	cmp	r3, #0
   274f4:	beq	27510 <main@@Base+0x270>
   274f8:	ldr	r3, [pc, #532]	; 27714 <main@@Base+0x474>
   274fc:	add	r3, pc, r3
   27500:	mov	r0, r3
   27504:	bl	1296c <puts@plt>
   27508:	mvn	r3, #0
   2750c:	b	276d4 <main@@Base+0x434>
   27510:	ldr	r0, [fp, #-8]
   27514:	bl	25078 <test_union_vector@@Base>
   27518:	mov	r3, r0
   2751c:	cmp	r3, #0
   27520:	beq	2753c <main@@Base+0x29c>
   27524:	ldr	r3, [pc, #492]	; 27718 <main@@Base+0x478>
   27528:	add	r3, pc, r3
   2752c:	mov	r0, r3
   27530:	bl	1296c <puts@plt>
   27534:	mvn	r3, #0
   27538:	b	276d4 <main@@Base+0x434>
   2753c:	ldr	r0, [fp, #-8]
   27540:	bl	24514 <test_basic_sort@@Base>
   27544:	mov	r3, r0
   27548:	cmp	r3, #0
   2754c:	beq	27568 <main@@Base+0x2c8>
   27550:	ldr	r3, [pc, #452]	; 2771c <main@@Base+0x47c>
   27554:	add	r3, pc, r3
   27558:	mov	r0, r3
   2755c:	bl	1296c <puts@plt>
   27560:	mvn	r3, #0
   27564:	b	276d4 <main@@Base+0x434>
   27568:	ldr	r0, [fp, #-8]
   2756c:	bl	22d78 <test_sort_find@@Base>
   27570:	mov	r3, r0
   27574:	cmp	r3, #0
   27578:	beq	27594 <main@@Base+0x2f4>
   2757c:	ldr	r3, [pc, #412]	; 27720 <main@@Base+0x480>
   27580:	add	r3, pc, r3
   27584:	mov	r0, r3
   27588:	bl	1296c <puts@plt>
   2758c:	mvn	r3, #0
   27590:	b	276d4 <main@@Base+0x434>
   27594:	ldr	r0, [fp, #-8]
   27598:	bl	2347c <test_scan@@Base>
   2759c:	mov	r3, r0
   275a0:	cmp	r3, #0
   275a4:	beq	275c0 <main@@Base+0x320>
   275a8:	ldr	r3, [pc, #372]	; 27724 <main@@Base+0x484>
   275ac:	add	r3, pc, r3
   275b0:	mov	r0, r3
   275b4:	bl	1296c <puts@plt>
   275b8:	mvn	r3, #0
   275bc:	b	276d4 <main@@Base+0x434>
   275c0:	ldr	r0, [fp, #-8]
   275c4:	bl	26060 <test_nested_buffer@@Base>
   275c8:	mov	r3, r0
   275cc:	cmp	r3, #0
   275d0:	beq	275ec <main@@Base+0x34c>
   275d4:	ldr	r3, [pc, #332]	; 27728 <main@@Base+0x488>
   275d8:	add	r3, pc, r3
   275dc:	mov	r0, r3
   275e0:	bl	1296c <puts@plt>
   275e4:	mvn	r3, #0
   275e8:	b	276d4 <main@@Base+0x434>
   275ec:	ldr	r0, [fp, #-8]
   275f0:	bl	26250 <test_nested_buffer_first@@Base>
   275f4:	mov	r3, r0
   275f8:	cmp	r3, #0
   275fc:	beq	27618 <main@@Base+0x378>
   27600:	ldr	r3, [pc, #292]	; 2772c <main@@Base+0x48c>
   27604:	add	r3, pc, r3
   27608:	mov	r0, r3
   2760c:	bl	1296c <puts@plt>
   27610:	mvn	r3, #0
   27614:	b	276d4 <main@@Base+0x434>
   27618:	ldr	r0, [fp, #-8]
   2761c:	bl	26440 <test_nested_buffer_using_nest@@Base>
   27620:	mov	r3, r0
   27624:	cmp	r3, #0
   27628:	beq	27644 <main@@Base+0x3a4>
   2762c:	ldr	r3, [pc, #252]	; 27730 <main@@Base+0x490>
   27630:	add	r3, pc, r3
   27634:	mov	r0, r3
   27638:	bl	1296c <puts@plt>
   2763c:	mvn	r3, #0
   27640:	b	276d4 <main@@Base+0x434>
   27644:	ldr	r0, [fp, #-8]
   27648:	bl	266e4 <verify_include@@Base>
   2764c:	mov	r3, r0
   27650:	cmp	r3, #0
   27654:	beq	27670 <main@@Base+0x3d0>
   27658:	ldr	r3, [pc, #212]	; 27734 <main@@Base+0x494>
   2765c:	add	r3, pc, r3
   27660:	mov	r0, r3
   27664:	bl	1296c <puts@plt>
   27668:	mvn	r3, #0
   2766c:	b	276d4 <main@@Base+0x434>
   27670:	ldr	r0, [fp, #-8]
   27674:	bl	2036c <test_type_aliases@@Base>
   27678:	mov	r3, r0
   2767c:	cmp	r3, #0
   27680:	beq	2769c <main@@Base+0x3fc>
   27684:	ldr	r3, [pc, #172]	; 27738 <main@@Base+0x498>
   27688:	add	r3, pc, r3
   2768c:	mov	r0, r3
   27690:	bl	1296c <puts@plt>
   27694:	mvn	r3, #0
   27698:	b	276d4 <main@@Base+0x434>
   2769c:	ldr	r0, [fp, #-8]
   276a0:	bl	253c8 <test_mixed_type_union@@Base>
   276a4:	mov	r3, r0
   276a8:	cmp	r3, #0
   276ac:	beq	276c8 <main@@Base+0x428>
   276b0:	ldr	r3, [pc, #132]	; 2773c <main@@Base+0x49c>
   276b4:	add	r3, pc, r3
   276b8:	mov	r0, r3
   276bc:	bl	1296c <puts@plt>
   276c0:	mvn	r3, #0
   276c4:	b	276d4 <main@@Base+0x434>
   276c8:	ldr	r0, [fp, #-8]
   276cc:	bl	28714 <flatcc_builder_clear@@Base>
   276d0:	mov	r3, #0
   276d4:	mov	r0, r3
   276d8:	sub	sp, fp, #4
   276dc:	pop	{fp, pc}
   276e0:	muleq	r0, r0, sl
   276e4:	andeq	ip, r0, r8, lsl #21
   276e8:	andeq	ip, r0, ip, asr sl
   276ec:	andeq	ip, r0, r0, lsr sl
   276f0:	andeq	ip, r0, r4, lsl #20
   276f4:	ldrdeq	ip, [r0], -r8
   276f8:	andeq	ip, r0, ip, lsr #19
   276fc:	andeq	ip, r0, r0, lsl #19
   27700:	andeq	ip, r0, r4, asr r9
   27704:	andeq	ip, r0, r8, lsr #18
   27708:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   2770c:	ldrdeq	ip, [r0], -r0
   27710:	andeq	ip, r0, r4, lsr #17
   27714:	andeq	ip, r0, r8, ror r8
   27718:	andeq	ip, r0, ip, asr #16
   2771c:	andeq	ip, r0, r0, lsr #16
   27720:	strdeq	ip, [r0], -r4
   27724:	andeq	ip, r0, r8, asr #15
   27728:	muleq	r0, ip, r7
   2772c:	andeq	ip, r0, r0, ror r7
   27730:	andeq	ip, r0, r4, asr #14
   27734:	andeq	ip, r0, r8, lsl r7
   27738:	andeq	ip, r0, ip, ror #13
   2773c:	andeq	ip, r0, r0, asr #13
   27740:	push	{fp, lr}
   27744:	add	fp, sp, #4
   27748:	sub	sp, sp, #16
   2774c:	str	r0, [fp, #-16]
   27750:	str	r1, [fp, #-20]	; 0xffffffec
   27754:	mov	r3, #0
   27758:	str	r3, [fp, #-12]
   2775c:	ldr	r3, [fp, #-16]
   27760:	cmp	r3, #3
   27764:	bhi	27770 <main@@Base+0x4d0>
   27768:	mov	r3, #4
   2776c:	str	r3, [fp, #-16]
   27770:	sub	r3, fp, #12
   27774:	ldr	r2, [fp, #-20]	; 0xffffffec
   27778:	ldr	r1, [fp, #-16]
   2777c:	mov	r0, r3
   27780:	bl	129b4 <posix_memalign@plt>
   27784:	str	r0, [fp, #-8]
   27788:	ldr	r3, [fp, #-8]
   2778c:	cmp	r3, #0
   27790:	beq	277b4 <main@@Base+0x514>
   27794:	ldr	r3, [fp, #-12]
   27798:	cmp	r3, #0
   2779c:	beq	277b4 <main@@Base+0x514>
   277a0:	ldr	r3, [fp, #-12]
   277a4:	mov	r0, r3
   277a8:	bl	12924 <free@plt>
   277ac:	mov	r3, #0
   277b0:	str	r3, [fp, #-12]
   277b4:	ldr	r3, [fp, #-12]
   277b8:	mov	r0, r3
   277bc:	sub	sp, fp, #4
   277c0:	pop	{fp, pc}
   277c4:	push	{fp}		; (str fp, [sp, #-4]!)
   277c8:	add	fp, sp, #0
   277cc:	sub	sp, sp, #12
   277d0:	str	r0, [fp, #-8]
   277d4:	ldr	r3, [fp, #-8]
   277d8:	mov	r0, r3
   277dc:	add	sp, fp, #0
   277e0:	pop	{fp}		; (ldr fp, [sp], #4)
   277e4:	bx	lr
   277e8:	push	{fp}		; (str fp, [sp, #-4]!)
   277ec:	add	fp, sp, #0
   277f0:	sub	sp, sp, #12
   277f4:	mov	r3, r0
   277f8:	strb	r3, [fp, #-5]
   277fc:	ldrb	r3, [fp, #-5]
   27800:	mov	r0, r3
   27804:	add	sp, fp, #0
   27808:	pop	{fp}		; (ldr fp, [sp], #4)
   2780c:	bx	lr
   27810:	push	{fp}		; (str fp, [sp, #-4]!)
   27814:	add	fp, sp, #0
   27818:	sub	sp, sp, #12
   2781c:	str	r0, [fp, #-8]
   27820:	ldr	r3, [fp, #-8]
   27824:	mov	r0, r3
   27828:	add	sp, fp, #0
   2782c:	pop	{fp}		; (ldr fp, [sp], #4)
   27830:	bx	lr
   27834:	push	{fp}		; (str fp, [sp, #-4]!)
   27838:	add	fp, sp, #0
   2783c:	sub	sp, sp, #12
   27840:	str	r0, [fp, #-8]
   27844:	str	r1, [fp, #-12]
   27848:	ldr	r3, [fp, #-8]
   2784c:	ldr	r2, [r3]
   27850:	ldr	r3, [fp, #-8]
   27854:	ldr	r3, [r3, #4]
   27858:	cmp	r2, r3
   2785c:	bne	27888 <main@@Base+0x5e8>
   27860:	ldr	r3, [fp, #-12]
   27864:	cmp	r3, #0
   27868:	beq	2787c <main@@Base+0x5dc>
   2786c:	ldr	r3, [fp, #-8]
   27870:	ldr	r2, [r3, #24]
   27874:	ldr	r3, [fp, #-12]
   27878:	str	r2, [r3]
   2787c:	ldr	r3, [fp, #-8]
   27880:	ldr	r3, [r3, #8]
   27884:	b	278a4 <main@@Base+0x604>
   27888:	ldr	r3, [fp, #-12]
   2788c:	cmp	r3, #0
   27890:	beq	278a0 <main@@Base+0x600>
   27894:	ldr	r3, [fp, #-12]
   27898:	mov	r2, #0
   2789c:	str	r2, [r3]
   278a0:	mov	r3, #0
   278a4:	mov	r0, r3
   278a8:	add	sp, fp, #0
   278ac:	pop	{fp}		; (ldr fp, [sp], #4)
   278b0:	bx	lr
   278b4:	push	{fp, lr}
   278b8:	add	fp, sp, #4
   278bc:	sub	sp, sp, #16
   278c0:	str	r0, [fp, #-16]
   278c4:	str	r1, [fp, #-20]	; 0xffffffec
   278c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   278cc:	mov	r1, #0
   278d0:	ldr	r0, [fp, #-16]
   278d4:	bl	129d8 <memchr@plt>
   278d8:	str	r0, [fp, #-8]
   278dc:	ldr	r3, [fp, #-8]
   278e0:	cmp	r3, #0
   278e4:	beq	278f8 <main@@Base+0x658>
   278e8:	ldr	r2, [fp, #-8]
   278ec:	ldr	r3, [fp, #-16]
   278f0:	sub	r3, r2, r3
   278f4:	b	278fc <main@@Base+0x65c>
   278f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   278fc:	mov	r0, r3
   27900:	sub	sp, fp, #4
   27904:	pop	{fp, pc}

00027908 <flatcc_builder_default_alloc@@Base>:
   27908:	push	{fp, lr}
   2790c:	add	fp, sp, #4
   27910:	sub	sp, sp, #24
   27914:	str	r0, [fp, #-16]
   27918:	str	r1, [fp, #-20]	; 0xffffffec
   2791c:	str	r2, [fp, #-24]	; 0xffffffe8
   27920:	str	r3, [fp, #-28]	; 0xffffffe4
   27924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27928:	cmp	r3, #0
   2792c:	bne	27970 <flatcc_builder_default_alloc@@Base+0x68>
   27930:	ldr	r3, [fp, #-20]	; 0xffffffec
   27934:	ldr	r3, [r3]
   27938:	cmp	r3, #0
   2793c:	beq	27968 <flatcc_builder_default_alloc@@Base+0x60>
   27940:	ldr	r3, [fp, #-20]	; 0xffffffec
   27944:	ldr	r3, [r3]
   27948:	mov	r0, r3
   2794c:	bl	12924 <free@plt>
   27950:	ldr	r3, [fp, #-20]	; 0xffffffec
   27954:	mov	r2, #0
   27958:	str	r2, [r3]
   2795c:	ldr	r3, [fp, #-20]	; 0xffffffec
   27960:	mov	r2, #0
   27964:	str	r2, [r3, #4]
   27968:	mov	r3, #0
   2796c:	b	27ac4 <flatcc_builder_default_alloc@@Base+0x1bc>
   27970:	ldr	r3, [fp, #4]
   27974:	sub	r3, r3, #1
   27978:	cmp	r3, #6
   2797c:	addls	pc, pc, r3, lsl #2
   27980:	b	279d0 <flatcc_builder_default_alloc@@Base+0xc8>
   27984:	b	279a0 <flatcc_builder_default_alloc@@Base+0x98>
   27988:	b	279d0 <flatcc_builder_default_alloc@@Base+0xc8>
   2798c:	b	279d0 <flatcc_builder_default_alloc@@Base+0xc8>
   27990:	b	279b8 <flatcc_builder_default_alloc@@Base+0xb0>
   27994:	b	279ac <flatcc_builder_default_alloc@@Base+0xa4>
   27998:	b	279d0 <flatcc_builder_default_alloc@@Base+0xc8>
   2799c:	b	279c4 <flatcc_builder_default_alloc@@Base+0xbc>
   279a0:	mov	r3, #256	; 0x100
   279a4:	str	r3, [fp, #-8]
   279a8:	b	279dc <flatcc_builder_default_alloc@@Base+0xd4>
   279ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   279b0:	str	r3, [fp, #-8]
   279b4:	b	279dc <flatcc_builder_default_alloc@@Base+0xd4>
   279b8:	mov	r3, #288	; 0x120
   279bc:	str	r3, [fp, #-8]
   279c0:	b	279dc <flatcc_builder_default_alloc@@Base+0xd4>
   279c4:	mov	r3, #64	; 0x40
   279c8:	str	r3, [fp, #-8]
   279cc:	b	279dc <flatcc_builder_default_alloc@@Base+0xd4>
   279d0:	mov	r3, #32
   279d4:	str	r3, [fp, #-8]
   279d8:	nop			; (mov r0, r0)
   279dc:	b	279ec <flatcc_builder_default_alloc@@Base+0xe4>
   279e0:	ldr	r3, [fp, #-8]
   279e4:	lsl	r3, r3, #1
   279e8:	str	r3, [fp, #-8]
   279ec:	ldr	r2, [fp, #-8]
   279f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   279f4:	cmp	r2, r3
   279f8:	bcc	279e0 <flatcc_builder_default_alloc@@Base+0xd8>
   279fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   27a00:	ldr	r2, [r3, #4]
   27a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27a08:	cmp	r2, r3
   27a0c:	bcc	27a30 <flatcc_builder_default_alloc@@Base+0x128>
   27a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   27a14:	ldr	r3, [r3, #4]
   27a18:	lsr	r2, r3, #1
   27a1c:	ldr	r3, [fp, #-8]
   27a20:	cmp	r2, r3
   27a24:	bcc	27a30 <flatcc_builder_default_alloc@@Base+0x128>
   27a28:	mov	r3, #0
   27a2c:	b	27ac4 <flatcc_builder_default_alloc@@Base+0x1bc>
   27a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   27a34:	ldr	r3, [r3]
   27a38:	ldr	r1, [fp, #-8]
   27a3c:	mov	r0, r3
   27a40:	bl	12948 <realloc@plt>
   27a44:	str	r0, [fp, #-12]
   27a48:	ldr	r3, [fp, #-12]
   27a4c:	cmp	r3, #0
   27a50:	bne	27a5c <flatcc_builder_default_alloc@@Base+0x154>
   27a54:	mvn	r3, #0
   27a58:	b	27ac4 <flatcc_builder_default_alloc@@Base+0x1bc>
   27a5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   27a60:	cmp	r3, #0
   27a64:	beq	27aa8 <flatcc_builder_default_alloc@@Base+0x1a0>
   27a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   27a6c:	ldr	r2, [r3, #4]
   27a70:	ldr	r3, [fp, #-8]
   27a74:	cmp	r2, r3
   27a78:	bcs	27aa8 <flatcc_builder_default_alloc@@Base+0x1a0>
   27a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   27a80:	ldr	r3, [r3, #4]
   27a84:	ldr	r2, [fp, #-12]
   27a88:	add	r0, r2, r3
   27a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   27a90:	ldr	r3, [r3, #4]
   27a94:	ldr	r2, [fp, #-8]
   27a98:	sub	r3, r2, r3
   27a9c:	mov	r2, r3
   27aa0:	mov	r1, #0
   27aa4:	bl	129c0 <memset@plt>
   27aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   27aac:	ldr	r2, [fp, #-12]
   27ab0:	str	r2, [r3]
   27ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   27ab8:	ldr	r2, [fp, #-8]
   27abc:	str	r2, [r3, #4]
   27ac0:	mov	r3, #0
   27ac4:	mov	r0, r3
   27ac8:	sub	sp, fp, #4
   27acc:	pop	{fp, pc}
   27ad0:	push	{fp}		; (str fp, [sp, #-4]!)
   27ad4:	add	fp, sp, #0
   27ad8:	sub	sp, sp, #20
   27adc:	str	r0, [fp, #-16]
   27ae0:	str	r1, [fp, #-20]	; 0xffffffec
   27ae4:	ldr	r3, [fp, #-16]
   27ae8:	add	r3, r3, #52	; 0x34
   27aec:	add	r3, r3, #8
   27af0:	str	r3, [fp, #-8]
   27af4:	ldr	r3, [fp, #-16]
   27af8:	ldr	r2, [r3, #60]	; 0x3c
   27afc:	ldr	r3, [fp, #-16]
   27b00:	ldr	r3, [r3, #28]
   27b04:	add	r2, r2, r3
   27b08:	ldr	r3, [fp, #-16]
   27b0c:	str	r2, [r3, #16]
   27b10:	ldr	r3, [fp, #-8]
   27b14:	ldr	r2, [r3, #4]
   27b18:	ldr	r3, [fp, #-16]
   27b1c:	ldr	r3, [r3, #28]
   27b20:	sub	r2, r2, r3
   27b24:	ldr	r3, [fp, #-16]
   27b28:	str	r2, [r3, #24]
   27b2c:	ldr	r3, [fp, #-16]
   27b30:	ldr	r2, [r3, #24]
   27b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   27b38:	cmp	r2, r3
   27b3c:	bls	27b4c <flatcc_builder_default_alloc@@Base+0x244>
   27b40:	ldr	r3, [fp, #-16]
   27b44:	ldr	r2, [fp, #-20]	; 0xffffffec
   27b48:	str	r2, [r3, #24]
   27b4c:	ldr	r3, [fp, #-16]
   27b50:	ldr	r3, [r3, #32]
   27b54:	ldr	r2, [fp, #-20]	; 0xffffffec
   27b58:	str	r2, [r3, #4]
   27b5c:	nop			; (mov r0, r0)
   27b60:	add	sp, fp, #0
   27b64:	pop	{fp}		; (ldr fp, [sp], #4)
   27b68:	bx	lr
   27b6c:	push	{r4, fp, lr}
   27b70:	add	fp, sp, #8
   27b74:	sub	sp, sp, #36	; 0x24
   27b78:	str	r0, [fp, #-24]	; 0xffffffe8
   27b7c:	str	r1, [fp, #-28]	; 0xffffffe4
   27b80:	str	r2, [fp, #-32]	; 0xffffffe0
   27b84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27b88:	add	r3, r3, #52	; 0x34
   27b8c:	add	r3, r3, #8
   27b90:	str	r3, [fp, #-16]
   27b94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27b98:	ldr	r4, [r3, #48]	; 0x30
   27b9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27ba0:	ldr	r0, [r3, #40]	; 0x28
   27ba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27ba8:	ldr	r2, [r3, #28]
   27bac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   27bb0:	add	r2, r2, r3
   27bb4:	mov	r3, #1
   27bb8:	str	r3, [sp]
   27bbc:	mov	r3, #1
   27bc0:	ldr	r1, [fp, #-16]
   27bc4:	blx	r4
   27bc8:	mov	r3, r0
   27bcc:	cmp	r3, #0
   27bd0:	beq	27bdc <flatcc_builder_default_alloc@@Base+0x2d4>
   27bd4:	mvn	r3, #0
   27bd8:	b	27bec <flatcc_builder_default_alloc@@Base+0x2e4>
   27bdc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   27be0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   27be4:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   27be8:	mov	r3, #0
   27bec:	mov	r0, r3
   27bf0:	sub	sp, fp, #8
   27bf4:	pop	{r4, fp, pc}
   27bf8:	push	{fp, lr}
   27bfc:	add	fp, sp, #4
   27c00:	sub	sp, sp, #16
   27c04:	str	r0, [fp, #-16]
   27c08:	str	r1, [fp, #-20]	; 0xffffffec
   27c0c:	ldr	r3, [fp, #-16]
   27c10:	ldr	r3, [r3, #20]
   27c14:	str	r3, [fp, #-8]
   27c18:	ldr	r3, [fp, #-16]
   27c1c:	ldr	r2, [r3, #20]
   27c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   27c24:	add	r2, r2, r3
   27c28:	ldr	r3, [fp, #-16]
   27c2c:	str	r2, [r3, #20]
   27c30:	ldr	r3, [fp, #-16]
   27c34:	ldr	r2, [r3, #20]
   27c38:	ldr	r3, [fp, #-16]
   27c3c:	ldr	r3, [r3, #24]
   27c40:	cmp	r2, r3
   27c44:	bcc	27c78 <flatcc_builder_default_alloc@@Base+0x370>
   27c48:	ldr	r3, [fp, #-16]
   27c4c:	ldr	r3, [r3, #20]
   27c50:	add	r3, r3, #1
   27c54:	mvn	r2, #3
   27c58:	mov	r1, r3
   27c5c:	ldr	r0, [fp, #-16]
   27c60:	bl	27b6c <flatcc_builder_default_alloc@@Base+0x264>
   27c64:	mov	r3, r0
   27c68:	cmp	r3, #0
   27c6c:	beq	27c78 <flatcc_builder_default_alloc@@Base+0x370>
   27c70:	mov	r3, #0
   27c74:	b	27c88 <flatcc_builder_default_alloc@@Base+0x380>
   27c78:	ldr	r3, [fp, #-16]
   27c7c:	ldr	r2, [r3, #16]
   27c80:	ldr	r3, [fp, #-8]
   27c84:	add	r3, r2, r3
   27c88:	mov	r0, r3
   27c8c:	sub	sp, fp, #4
   27c90:	pop	{fp, pc}
   27c94:	push	{fp, lr}
   27c98:	add	fp, sp, #4
   27c9c:	sub	sp, sp, #8
   27ca0:	str	r0, [fp, #-8]
   27ca4:	str	r1, [fp, #-12]
   27ca8:	ldr	r3, [fp, #-8]
   27cac:	ldr	r2, [r3, #20]
   27cb0:	ldr	r3, [fp, #-12]
   27cb4:	sub	r2, r2, r3
   27cb8:	ldr	r3, [fp, #-8]
   27cbc:	str	r2, [r3, #20]
   27cc0:	ldr	r3, [fp, #-8]
   27cc4:	ldr	r2, [r3, #16]
   27cc8:	ldr	r3, [fp, #-8]
   27ccc:	ldr	r3, [r3, #20]
   27cd0:	add	r3, r2, r3
   27cd4:	ldr	r2, [fp, #-12]
   27cd8:	mov	r1, #0
   27cdc:	mov	r0, r3
   27ce0:	bl	129c0 <memset@plt>
   27ce4:	nop			; (mov r0, r0)
   27ce8:	sub	sp, fp, #4
   27cec:	pop	{fp, pc}
   27cf0:	push	{fp, lr}
   27cf4:	add	fp, sp, #4
   27cf8:	sub	sp, sp, #24
   27cfc:	str	r0, [fp, #-16]
   27d00:	str	r1, [fp, #-20]	; 0xffffffec
   27d04:	str	r2, [fp, #-24]	; 0xffffffe8
   27d08:	ldr	r1, [fp, #-24]	; 0xffffffe8
   27d0c:	ldr	r0, [fp, #-16]
   27d10:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   27d14:	str	r0, [fp, #-8]
   27d18:	ldr	r3, [fp, #-8]
   27d1c:	cmp	r3, #0
   27d20:	bne	27d2c <flatcc_builder_default_alloc@@Base+0x424>
   27d24:	mov	r3, #0
   27d28:	b	27d40 <flatcc_builder_default_alloc@@Base+0x438>
   27d2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   27d30:	ldr	r1, [fp, #-20]	; 0xffffffec
   27d34:	ldr	r0, [fp, #-8]
   27d38:	bl	12930 <memcpy@plt>
   27d3c:	ldr	r3, [fp, #-8]
   27d40:	mov	r0, r3
   27d44:	sub	sp, fp, #4
   27d48:	pop	{fp, pc}
   27d4c:	push	{fp, lr}
   27d50:	add	fp, sp, #4
   27d54:	sub	sp, sp, #24
   27d58:	str	r0, [fp, #-16]
   27d5c:	str	r1, [fp, #-20]	; 0xffffffec
   27d60:	strh	r2, [fp, #-22]	; 0xffffffea
   27d64:	strh	r3, [fp, #-24]	; 0xffffffe8
   27d68:	ldr	r3, [fp, #-16]
   27d6c:	ldr	r2, [r3, #20]
   27d70:	ldrh	r3, [fp, #-22]	; 0xffffffea
   27d74:	add	r3, r2, r3
   27d78:	sub	r3, r3, #1
   27d7c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   27d80:	rsb	r2, r2, #0
   27d84:	and	r3, r3, r2
   27d88:	str	r3, [fp, #-8]
   27d8c:	ldr	r2, [fp, #-8]
   27d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   27d94:	add	r2, r2, r3
   27d98:	ldr	r3, [fp, #-16]
   27d9c:	str	r2, [r3, #20]
   27da0:	ldr	r3, [fp, #-16]
   27da4:	ldr	r2, [r3, #20]
   27da8:	ldr	r3, [fp, #-16]
   27dac:	ldr	r3, [r3, #24]
   27db0:	cmp	r2, r3
   27db4:	bcc	27de8 <flatcc_builder_default_alloc@@Base+0x4e0>
   27db8:	ldr	r3, [fp, #-16]
   27dbc:	ldr	r3, [r3, #20]
   27dc0:	add	r3, r3, #1
   27dc4:	ldr	r2, [pc, #136]	; 27e54 <flatcc_builder_default_alloc@@Base+0x54c>
   27dc8:	mov	r1, r3
   27dcc:	ldr	r0, [fp, #-16]
   27dd0:	bl	27b6c <flatcc_builder_default_alloc@@Base+0x264>
   27dd4:	mov	r3, r0
   27dd8:	cmp	r3, #0
   27ddc:	beq	27de8 <flatcc_builder_default_alloc@@Base+0x4e0>
   27de0:	mov	r3, #0
   27de4:	b	27e48 <flatcc_builder_default_alloc@@Base+0x540>
   27de8:	ldr	r3, [fp, #-16]
   27dec:	ldr	r2, [r3, #4]
   27df0:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   27df4:	lsl	r3, r3, #1
   27df8:	add	r3, r2, r3
   27dfc:	ldr	r2, [fp, #-8]
   27e00:	uxth	r2, r2
   27e04:	add	r2, r2, #4
   27e08:	uxth	r2, r2
   27e0c:	strh	r2, [r3]
   27e10:	ldr	r3, [fp, #-16]
   27e14:	ldrh	r3, [r3, #8]
   27e18:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   27e1c:	cmp	r2, r3
   27e20:	bcc	27e38 <flatcc_builder_default_alloc@@Base+0x530>
   27e24:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   27e28:	add	r3, r3, #1
   27e2c:	uxth	r2, r3
   27e30:	ldr	r3, [fp, #-16]
   27e34:	strh	r2, [r3, #8]
   27e38:	ldr	r3, [fp, #-16]
   27e3c:	ldr	r2, [r3, #16]
   27e40:	ldr	r3, [fp, #-8]
   27e44:	add	r3, r2, r3
   27e48:	mov	r0, r3
   27e4c:	sub	sp, fp, #4
   27e50:	pop	{fp, pc}
   27e54:	strdeq	pc, [r0], -ip
   27e58:	push	{fp, lr}
   27e5c:	add	fp, sp, #4
   27e60:	sub	sp, sp, #16
   27e64:	str	r0, [fp, #-16]
   27e68:	mov	r3, r1
   27e6c:	strh	r3, [fp, #-18]	; 0xffffffee
   27e70:	ldr	r3, [fp, #-16]
   27e74:	ldr	r3, [r3, #20]
   27e78:	add	r3, r3, #3
   27e7c:	bic	r3, r3, #3
   27e80:	str	r3, [fp, #-8]
   27e84:	ldr	r3, [fp, #-8]
   27e88:	add	r2, r3, #4
   27e8c:	ldr	r3, [fp, #-16]
   27e90:	str	r2, [r3, #20]
   27e94:	ldr	r3, [fp, #-16]
   27e98:	ldr	r2, [r3, #20]
   27e9c:	ldr	r3, [fp, #-16]
   27ea0:	ldr	r3, [r3, #24]
   27ea4:	cmp	r2, r3
   27ea8:	bls	27ed8 <flatcc_builder_default_alloc@@Base+0x5d0>
   27eac:	ldr	r3, [fp, #-16]
   27eb0:	ldr	r3, [r3, #20]
   27eb4:	ldr	r2, [pc, #168]	; 27f64 <flatcc_builder_default_alloc@@Base+0x65c>
   27eb8:	mov	r1, r3
   27ebc:	ldr	r0, [fp, #-16]
   27ec0:	bl	27b6c <flatcc_builder_default_alloc@@Base+0x264>
   27ec4:	mov	r3, r0
   27ec8:	cmp	r3, #0
   27ecc:	beq	27ed8 <flatcc_builder_default_alloc@@Base+0x5d0>
   27ed0:	mov	r3, #0
   27ed4:	b	27f58 <flatcc_builder_default_alloc@@Base+0x650>
   27ed8:	ldr	r3, [fp, #-16]
   27edc:	ldr	r2, [r3, #4]
   27ee0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   27ee4:	lsl	r3, r3, #1
   27ee8:	add	r3, r2, r3
   27eec:	ldr	r2, [fp, #-8]
   27ef0:	uxth	r2, r2
   27ef4:	add	r2, r2, #4
   27ef8:	uxth	r2, r2
   27efc:	strh	r2, [r3]
   27f00:	ldr	r3, [fp, #-16]
   27f04:	ldrh	r3, [r3, #8]
   27f08:	ldrh	r2, [fp, #-18]	; 0xffffffee
   27f0c:	cmp	r2, r3
   27f10:	bcc	27f28 <flatcc_builder_default_alloc@@Base+0x620>
   27f14:	ldrh	r3, [fp, #-18]	; 0xffffffee
   27f18:	add	r3, r3, #1
   27f1c:	uxth	r2, r3
   27f20:	ldr	r3, [fp, #-16]
   27f24:	strh	r2, [r3, #8]
   27f28:	ldr	r3, [fp, #-16]
   27f2c:	ldr	r3, [r3]
   27f30:	add	r1, r3, #2
   27f34:	ldr	r2, [fp, #-16]
   27f38:	str	r1, [r2]
   27f3c:	ldr	r2, [fp, #-8]
   27f40:	uxth	r2, r2
   27f44:	strh	r2, [r3]
   27f48:	ldr	r3, [fp, #-16]
   27f4c:	ldr	r2, [r3, #16]
   27f50:	ldr	r3, [fp, #-8]
   27f54:	add	r3, r2, r3
   27f58:	mov	r0, r3
   27f5c:	sub	sp, fp, #4
   27f60:	pop	{fp, pc}
   27f64:	strdeq	pc, [r0], -ip
   27f68:	push	{r4, fp, lr}
   27f6c:	add	fp, sp, #8
   27f70:	sub	sp, sp, #36	; 0x24
   27f74:	str	r0, [fp, #-24]	; 0xffffffe8
   27f78:	str	r1, [fp, #-28]	; 0xffffffe4
   27f7c:	str	r2, [fp, #-32]	; 0xffffffe0
   27f80:	str	r3, [fp, #-36]	; 0xffffffdc
   27f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27f88:	add	r2, r3, #52	; 0x34
   27f8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   27f90:	lsl	r3, r3, #3
   27f94:	add	r3, r2, r3
   27f98:	str	r3, [fp, #-16]
   27f9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   27fa0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   27fa4:	add	r2, r2, r3
   27fa8:	ldr	r3, [fp, #-16]
   27fac:	ldr	r3, [r3, #4]
   27fb0:	cmp	r2, r3
   27fb4:	bls	28014 <flatcc_builder_default_alloc@@Base+0x70c>
   27fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27fbc:	ldr	r4, [r3, #48]	; 0x30
   27fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   27fc4:	ldr	r0, [r3, #40]	; 0x28
   27fc8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   27fcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   27fd0:	add	r2, r2, r3
   27fd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   27fd8:	str	r3, [sp]
   27fdc:	ldr	r3, [fp, #4]
   27fe0:	ldr	r1, [fp, #-16]
   27fe4:	blx	r4
   27fe8:	mov	r3, r0
   27fec:	cmp	r3, #0
   27ff0:	beq	28014 <flatcc_builder_default_alloc@@Base+0x70c>
   27ff4:	ldr	r3, [pc, #56]	; 28034 <flatcc_builder_default_alloc@@Base+0x72c>
   27ff8:	add	r3, pc, r3
   27ffc:	mov	r2, #308	; 0x134
   28000:	ldr	r1, [pc, #48]	; 28038 <flatcc_builder_default_alloc@@Base+0x730>
   28004:	add	r1, pc, r1
   28008:	ldr	r0, [pc, #44]	; 2803c <flatcc_builder_default_alloc@@Base+0x734>
   2800c:	add	r0, pc, r0
   28010:	bl	12a08 <__assert_fail@plt>
   28014:	ldr	r3, [fp, #-16]
   28018:	ldr	r3, [r3]
   2801c:	mov	r2, r3
   28020:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28024:	add	r3, r2, r3
   28028:	mov	r0, r3
   2802c:	sub	sp, fp, #8
   28030:	pop	{r4, fp, pc}
   28034:	andeq	ip, r0, ip, ror #28
   28038:	andeq	ip, r0, ip, lsr #20
   2803c:	andeq	ip, r0, r4, lsl #21
   28040:	push	{fp, lr}
   28044:	add	fp, sp, #4
   28048:	sub	sp, sp, #24
   2804c:	str	r0, [fp, #-16]
   28050:	str	r1, [fp, #-20]	; 0xffffffec
   28054:	ldr	r3, [fp, #-16]
   28058:	ldr	r3, [r3, #32]
   2805c:	ldr	r2, [r3, #16]
   28060:	ldr	r3, [fp, #-16]
   28064:	ldr	r3, [r3, #32]
   28068:	ldrh	r3, [r3, #28]
   2806c:	lsl	r3, r3, #1
   28070:	add	r3, r2, r3
   28074:	str	r3, [fp, #-8]
   28078:	ldr	r3, [fp, #-20]	; 0xffffffec
   2807c:	add	r3, r3, #2
   28080:	lsl	r3, r3, #1
   28084:	str	r3, [fp, #-12]
   28088:	mov	r3, #1
   2808c:	str	r3, [sp]
   28090:	ldr	r3, [fp, #-12]
   28094:	ldr	r2, [fp, #-8]
   28098:	mov	r1, #0
   2809c:	ldr	r0, [fp, #-16]
   280a0:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   280a4:	mov	r2, r0
   280a8:	ldr	r3, [fp, #-16]
   280ac:	str	r2, [r3, #4]
   280b0:	ldr	r3, [fp, #-16]
   280b4:	ldr	r3, [r3, #4]
   280b8:	cmp	r3, #0
   280bc:	bne	280c8 <flatcc_builder_default_alloc@@Base+0x7c0>
   280c0:	mvn	r3, #0
   280c4:	b	28140 <flatcc_builder_default_alloc@@Base+0x838>
   280c8:	ldr	r3, [fp, #-16]
   280cc:	ldr	r3, [r3, #4]
   280d0:	add	r2, r3, #4
   280d4:	ldr	r3, [fp, #-16]
   280d8:	str	r2, [r3, #4]
   280dc:	ldr	r3, [fp, #-16]
   280e0:	ldr	r3, [r3, #32]
   280e4:	ldr	r3, [r3, #20]
   280e8:	str	r3, [fp, #-8]
   280ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   280f0:	lsl	r3, r3, #1
   280f4:	add	r3, r3, #1
   280f8:	str	r3, [fp, #-12]
   280fc:	mov	r3, #0
   28100:	str	r3, [sp]
   28104:	ldr	r3, [fp, #-12]
   28108:	ldr	r2, [fp, #-8]
   2810c:	mov	r1, #3
   28110:	ldr	r0, [fp, #-16]
   28114:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   28118:	mov	r2, r0
   2811c:	ldr	r3, [fp, #-16]
   28120:	str	r2, [r3]
   28124:	ldr	r3, [fp, #-16]
   28128:	ldr	r3, [r3]
   2812c:	cmp	r3, #0
   28130:	bne	2813c <flatcc_builder_default_alloc@@Base+0x834>
   28134:	mvn	r3, #0
   28138:	b	28140 <flatcc_builder_default_alloc@@Base+0x838>
   2813c:	mov	r3, #0
   28140:	mov	r0, r3
   28144:	sub	sp, fp, #4
   28148:	pop	{fp, pc}
   2814c:	push	{r4, fp, lr}
   28150:	add	fp, sp, #8
   28154:	sub	sp, sp, #36	; 0x24
   28158:	str	r0, [fp, #-32]	; 0xffffffe0
   2815c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28160:	add	r3, r3, #52	; 0x34
   28164:	add	r3, r3, #40	; 0x28
   28168:	str	r3, [fp, #-24]	; 0xffffffe8
   2816c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28170:	ldr	r3, [r3, #124]	; 0x7c
   28174:	cmp	r3, #0
   28178:	beq	2819c <flatcc_builder_default_alloc@@Base+0x894>
   2817c:	ldr	r3, [pc, #280]	; 2829c <flatcc_builder_default_alloc@@Base+0x994>
   28180:	add	r3, pc, r3
   28184:	ldr	r2, [pc, #276]	; 282a0 <flatcc_builder_default_alloc@@Base+0x998>
   28188:	ldr	r1, [pc, #276]	; 282a4 <flatcc_builder_default_alloc@@Base+0x99c>
   2818c:	add	r1, pc, r1
   28190:	ldr	r0, [pc, #272]	; 282a8 <flatcc_builder_default_alloc@@Base+0x9a0>
   28194:	add	r0, pc, r0
   28198:	bl	12a08 <__assert_fail@plt>
   2819c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   281a0:	ldr	r2, [r3, #124]	; 0x7c
   281a4:	mov	r3, #0
   281a8:	str	r3, [sp]
   281ac:	mov	r3, #16
   281b0:	mov	r1, #6
   281b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   281b8:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   281bc:	mov	r3, r0
   281c0:	cmp	r3, #0
   281c4:	bne	281d0 <flatcc_builder_default_alloc@@Base+0x8c8>
   281c8:	mvn	r3, #0
   281cc:	b	28290 <flatcc_builder_default_alloc@@Base+0x988>
   281d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   281d4:	mov	r2, #16
   281d8:	str	r2, [r3, #124]	; 0x7c
   281dc:	mov	r3, #256	; 0x100
   281e0:	str	r3, [fp, #-16]
   281e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   281e8:	ldr	r4, [r3, #48]	; 0x30
   281ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   281f0:	ldr	r0, [r3, #40]	; 0x28
   281f4:	mov	r3, #5
   281f8:	str	r3, [sp]
   281fc:	mov	r3, #1
   28200:	ldr	r2, [fp, #-16]
   28204:	ldr	r1, [fp, #-24]	; 0xffffffe8
   28208:	blx	r4
   2820c:	mov	r3, r0
   28210:	cmp	r3, #0
   28214:	beq	2822c <flatcc_builder_default_alloc@@Base+0x924>
   28218:	mvn	r3, #0
   2821c:	b	28290 <flatcc_builder_default_alloc@@Base+0x988>
   28220:	ldr	r3, [fp, #-16]
   28224:	lsl	r3, r3, #1
   28228:	str	r3, [fp, #-16]
   2822c:	ldr	r3, [fp, #-16]
   28230:	lsl	r2, r3, #1
   28234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28238:	ldr	r3, [r3, #4]
   2823c:	cmp	r2, r3
   28240:	bls	28220 <flatcc_builder_default_alloc@@Base+0x918>
   28244:	ldr	r3, [fp, #-16]
   28248:	lsr	r3, r3, #2
   2824c:	str	r3, [fp, #-16]
   28250:	mov	r3, #0
   28254:	str	r3, [fp, #-20]	; 0xffffffec
   28258:	b	28268 <flatcc_builder_default_alloc@@Base+0x960>
   2825c:	ldr	r3, [fp, #-20]	; 0xffffffec
   28260:	add	r3, r3, #1
   28264:	str	r3, [fp, #-20]	; 0xffffffec
   28268:	mov	r2, #1
   2826c:	ldr	r3, [fp, #-20]	; 0xffffffec
   28270:	lsl	r2, r2, r3
   28274:	ldr	r3, [fp, #-16]
   28278:	cmp	r2, r3
   2827c:	bcc	2825c <flatcc_builder_default_alloc@@Base+0x954>
   28280:	ldr	r3, [fp, #-32]	; 0xffffffe0
   28284:	ldr	r2, [fp, #-20]	; 0xffffffec
   28288:	str	r2, [r3, #116]	; 0x74
   2828c:	mov	r3, #0
   28290:	mov	r0, r3
   28294:	sub	sp, fp, #8
   28298:	pop	{r4, fp, pc}
   2829c:	ldrdeq	ip, [r0], -r8
   282a0:	andeq	r0, r0, r6, asr r1
   282a4:	andeq	ip, r0, r4, lsr #17
   282a8:	andeq	ip, r0, r0, lsl #18
   282ac:	push	{fp, lr}
   282b0:	add	fp, sp, #4
   282b4:	sub	sp, sp, #16
   282b8:	str	r0, [fp, #-16]
   282bc:	str	r1, [fp, #-20]	; 0xffffffec
   282c0:	ldr	r3, [fp, #-16]
   282c4:	ldr	r3, [r3, #116]	; 0x74
   282c8:	cmp	r3, #0
   282cc:	bne	282ec <flatcc_builder_default_alloc@@Base+0x9e4>
   282d0:	ldr	r0, [fp, #-16]
   282d4:	bl	2814c <flatcc_builder_default_alloc@@Base+0x844>
   282d8:	mov	r3, r0
   282dc:	cmp	r3, #0
   282e0:	beq	282ec <flatcc_builder_default_alloc@@Base+0x9e4>
   282e4:	mov	r3, #0
   282e8:	b	28318 <flatcc_builder_default_alloc@@Base+0xa10>
   282ec:	ldr	r3, [fp, #-16]
   282f0:	ldr	r3, [r3, #92]	; 0x5c
   282f4:	str	r3, [fp, #-8]
   282f8:	ldr	r3, [fp, #-16]
   282fc:	ldr	r3, [r3, #116]	; 0x74
   28300:	rsb	r3, r3, #32
   28304:	ldr	r2, [fp, #-20]	; 0xffffffec
   28308:	lsr	r3, r2, r3
   2830c:	lsl	r3, r3, #2
   28310:	ldr	r2, [fp, #-8]
   28314:	add	r3, r2, r3
   28318:	mov	r0, r3
   2831c:	sub	sp, fp, #4
   28320:	pop	{fp, pc}

00028324 <flatcc_builder_flush_vtable_cache@@Base>:
   28324:	push	{fp, lr}
   28328:	add	fp, sp, #4
   2832c:	sub	sp, sp, #16
   28330:	str	r0, [fp, #-16]
   28334:	ldr	r3, [fp, #-16]
   28338:	add	r3, r3, #52	; 0x34
   2833c:	add	r3, r3, #40	; 0x28
   28340:	str	r3, [fp, #-8]
   28344:	ldr	r3, [fp, #-16]
   28348:	ldr	r3, [r3, #116]	; 0x74
   2834c:	cmp	r3, #0
   28350:	beq	2838c <flatcc_builder_flush_vtable_cache@@Base+0x68>
   28354:	ldr	r3, [fp, #-8]
   28358:	ldr	r0, [r3]
   2835c:	ldr	r3, [fp, #-8]
   28360:	ldr	r3, [r3, #4]
   28364:	mov	r2, r3
   28368:	mov	r1, #0
   2836c:	bl	129c0 <memset@plt>
   28370:	ldr	r3, [fp, #-16]
   28374:	mov	r2, #16
   28378:	str	r2, [r3, #124]	; 0x7c
   2837c:	ldr	r3, [fp, #-16]
   28380:	mov	r2, #0
   28384:	str	r2, [r3, #120]	; 0x78
   28388:	b	28390 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   2838c:	nop			; (mov r0, r0)
   28390:	sub	sp, fp, #4
   28394:	pop	{fp, pc}

00028398 <flatcc_builder_custom_init@@Base>:
   28398:	push	{r4, fp, lr}
   2839c:	add	fp, sp, #8
   283a0:	sub	sp, sp, #20
   283a4:	str	r0, [fp, #-16]
   283a8:	str	r1, [fp, #-20]	; 0xffffffec
   283ac:	str	r2, [fp, #-24]	; 0xffffffe8
   283b0:	str	r3, [fp, #-28]	; 0xffffffe4
   283b4:	ldr	r4, [pc, #152]	; 28454 <flatcc_builder_custom_init@@Base+0xbc>
   283b8:	add	r4, pc, r4
   283bc:	mov	r2, #232	; 0xe8
   283c0:	mov	r1, #0
   283c4:	ldr	r0, [fp, #-16]
   283c8:	bl	129c0 <memset@plt>
   283cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   283d0:	cmp	r3, #0
   283d4:	bne	283fc <flatcc_builder_custom_init@@Base+0x64>
   283d8:	ldr	r3, [fp, #-16]
   283dc:	mov	r2, #1
   283e0:	str	r2, [r3, #184]	; 0xb8
   283e4:	ldr	r3, [pc, #108]	; 28458 <flatcc_builder_custom_init@@Base+0xc0>
   283e8:	ldr	r3, [r4, r3]
   283ec:	str	r3, [fp, #-20]	; 0xffffffec
   283f0:	ldr	r3, [fp, #-16]
   283f4:	add	r3, r3, #188	; 0xbc
   283f8:	str	r3, [fp, #-24]	; 0xffffffe8
   283fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28400:	cmp	r3, #0
   28404:	bne	28414 <flatcc_builder_custom_init@@Base+0x7c>
   28408:	ldr	r3, [pc, #76]	; 2845c <flatcc_builder_custom_init@@Base+0xc4>
   2840c:	ldr	r3, [r4, r3]
   28410:	str	r3, [fp, #-28]	; 0xffffffe4
   28414:	ldr	r3, [fp, #-16]
   28418:	ldr	r2, [fp, #4]
   2841c:	str	r2, [r3, #40]	; 0x28
   28420:	ldr	r3, [fp, #-16]
   28424:	ldr	r2, [fp, #-28]	; 0xffffffe4
   28428:	str	r2, [r3, #48]	; 0x30
   2842c:	ldr	r3, [fp, #-16]
   28430:	ldr	r2, [fp, #-24]	; 0xffffffe8
   28434:	str	r2, [r3, #36]	; 0x24
   28438:	ldr	r3, [fp, #-16]
   2843c:	ldr	r2, [fp, #-20]	; 0xffffffec
   28440:	str	r2, [r3, #44]	; 0x2c
   28444:	mov	r3, #0
   28448:	mov	r0, r3
   2844c:	sub	sp, fp, #8
   28450:	pop	{r4, fp, pc}
   28454:	andeq	sp, r1, r0, asr #24
   28458:	andeq	r0, r0, r4, ror r0
   2845c:	andeq	r0, r0, r0, ror r0

00028460 <flatcc_builder_init@@Base>:
   28460:	push	{fp, lr}
   28464:	add	fp, sp, #4
   28468:	sub	sp, sp, #16
   2846c:	str	r0, [fp, #-8]
   28470:	mov	r3, #0
   28474:	str	r3, [sp]
   28478:	mov	r3, #0
   2847c:	mov	r2, #0
   28480:	mov	r1, #0
   28484:	ldr	r0, [fp, #-8]
   28488:	bl	28398 <flatcc_builder_custom_init@@Base>
   2848c:	mov	r3, r0
   28490:	mov	r0, r3
   28494:	sub	sp, fp, #4
   28498:	pop	{fp, pc}

0002849c <flatcc_builder_custom_reset@@Base>:
   2849c:	push	{r4, fp, lr}
   284a0:	add	fp, sp, #8
   284a4:	sub	sp, sp, #36	; 0x24
   284a8:	str	r0, [fp, #-24]	; 0xffffffe8
   284ac:	str	r1, [fp, #-28]	; 0xffffffe4
   284b0:	str	r2, [fp, #-32]	; 0xffffffe0
   284b4:	mov	r3, #0
   284b8:	str	r3, [fp, #-16]
   284bc:	b	28598 <flatcc_builder_custom_reset@@Base+0xfc>
   284c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   284c4:	add	r2, r3, #52	; 0x34
   284c8:	ldr	r3, [fp, #-16]
   284cc:	lsl	r3, r3, #3
   284d0:	add	r3, r2, r3
   284d4:	str	r3, [fp, #-20]	; 0xffffffec
   284d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   284dc:	ldr	r3, [r3]
   284e0:	cmp	r3, #0
   284e4:	beq	2855c <flatcc_builder_custom_reset@@Base+0xc0>
   284e8:	ldr	r3, [fp, #-16]
   284ec:	cmp	r3, #5
   284f0:	beq	2853c <flatcc_builder_custom_reset@@Base+0xa0>
   284f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   284f8:	cmp	r3, #0
   284fc:	beq	2853c <flatcc_builder_custom_reset@@Base+0xa0>
   28500:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28504:	ldr	r4, [r3, #48]	; 0x30
   28508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2850c:	ldr	r0, [r3, #40]	; 0x28
   28510:	ldr	r3, [fp, #-16]
   28514:	str	r3, [sp]
   28518:	mov	r3, #1
   2851c:	mov	r2, #1
   28520:	ldr	r1, [fp, #-20]	; 0xffffffec
   28524:	blx	r4
   28528:	mov	r3, r0
   2852c:	cmp	r3, #0
   28530:	beq	2853c <flatcc_builder_custom_reset@@Base+0xa0>
   28534:	mvn	r3, #0
   28538:	b	286c8 <flatcc_builder_custom_reset@@Base+0x22c>
   2853c:	ldr	r3, [fp, #-20]	; 0xffffffec
   28540:	ldr	r0, [r3]
   28544:	ldr	r3, [fp, #-20]	; 0xffffffec
   28548:	ldr	r3, [r3, #4]
   2854c:	mov	r2, r3
   28550:	mov	r1, #0
   28554:	bl	129c0 <memset@plt>
   28558:	b	2858c <flatcc_builder_custom_reset@@Base+0xf0>
   2855c:	ldr	r3, [fp, #-20]	; 0xffffffec
   28560:	ldr	r3, [r3, #4]
   28564:	cmp	r3, #0
   28568:	beq	2858c <flatcc_builder_custom_reset@@Base+0xf0>
   2856c:	ldr	r3, [pc, #352]	; 286d4 <flatcc_builder_custom_reset@@Base+0x238>
   28570:	add	r3, pc, r3
   28574:	ldr	r2, [pc, #348]	; 286d8 <flatcc_builder_custom_reset@@Base+0x23c>
   28578:	ldr	r1, [pc, #348]	; 286dc <flatcc_builder_custom_reset@@Base+0x240>
   2857c:	add	r1, pc, r1
   28580:	ldr	r0, [pc, #344]	; 286e0 <flatcc_builder_custom_reset@@Base+0x244>
   28584:	add	r0, pc, r0
   28588:	bl	12a08 <__assert_fail@plt>
   2858c:	ldr	r3, [fp, #-16]
   28590:	add	r3, r3, #1
   28594:	str	r3, [fp, #-16]
   28598:	ldr	r3, [fp, #-16]
   2859c:	cmp	r3, #7
   285a0:	ble	284c0 <flatcc_builder_custom_reset@@Base+0x24>
   285a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285a8:	mov	r2, #0
   285ac:	str	r2, [r3, #120]	; 0x78
   285b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285b4:	ldr	r3, [r3, #124]	; 0x7c
   285b8:	cmp	r3, #0
   285bc:	beq	285cc <flatcc_builder_custom_reset@@Base+0x130>
   285c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285c4:	mov	r2, #16
   285c8:	str	r2, [r3, #124]	; 0x7c
   285cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285d0:	mov	r2, #0
   285d4:	strh	r2, [r3, #128]	; 0x80
   285d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285dc:	mov	r2, #0
   285e0:	str	r2, [r3, #136]	; 0x88
   285e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285e8:	mov	r2, #0
   285ec:	str	r2, [r3, #140]	; 0x8c
   285f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   285f4:	mov	r2, #0
   285f8:	str	r2, [r3, #156]	; 0x9c
   285fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28600:	mov	r2, #0
   28604:	str	r2, [r3, #160]	; 0xa0
   28608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2860c:	mov	r2, #0
   28610:	str	r2, [r3, #20]
   28614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28618:	mov	r2, #0
   2861c:	str	r2, [r3, #24]
   28620:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28624:	mov	r2, #0
   28628:	str	r2, [r3, #148]	; 0x94
   2862c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28630:	mov	r2, #0
   28634:	str	r2, [r3, #152]	; 0x98
   28638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2863c:	ldr	r2, [r3, #60]	; 0x3c
   28640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28644:	str	r2, [r3, #16]
   28648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2864c:	ldr	r2, [r3, #76]	; 0x4c
   28650:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28654:	str	r2, [r3]
   28658:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2865c:	ldr	r2, [r3, #52]	; 0x34
   28660:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28664:	str	r2, [r3, #4]
   28668:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2866c:	mov	r2, #0
   28670:	str	r2, [r3, #32]
   28674:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28678:	cmp	r3, #0
   2867c:	beq	286a4 <flatcc_builder_custom_reset@@Base+0x208>
   28680:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28684:	mov	r2, #0
   28688:	str	r2, [r3, #172]	; 0xac
   2868c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28690:	mov	r2, #0
   28694:	str	r2, [r3, #176]	; 0xb0
   28698:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2869c:	mov	r2, #0
   286a0:	str	r2, [r3, #180]	; 0xb4
   286a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   286a8:	ldr	r3, [r3, #184]	; 0xb8
   286ac:	cmp	r3, #0
   286b0:	beq	286c4 <flatcc_builder_custom_reset@@Base+0x228>
   286b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   286b8:	add	r3, r3, #188	; 0xbc
   286bc:	mov	r0, r3
   286c0:	bl	2dfc0 <flatcc_emitter_reset@@Base>
   286c4:	mov	r3, #0
   286c8:	mov	r0, r3
   286cc:	sub	sp, fp, #8
   286d0:	pop	{r4, fp, pc}
   286d4:	andeq	ip, r0, r4, lsl #18
   286d8:			; <UNDEFINED> instruction: 0x000001b2
   286dc:			; <UNDEFINED> instruction: 0x0000c4b4
   286e0:	andeq	ip, r0, r0, lsr #10

000286e4 <flatcc_builder_reset@@Base>:
   286e4:	push	{fp, lr}
   286e8:	add	fp, sp, #4
   286ec:	sub	sp, sp, #8
   286f0:	str	r0, [fp, #-8]
   286f4:	mov	r2, #0
   286f8:	mov	r1, #0
   286fc:	ldr	r0, [fp, #-8]
   28700:	bl	2849c <flatcc_builder_custom_reset@@Base>
   28704:	mov	r3, r0
   28708:	mov	r0, r3
   2870c:	sub	sp, fp, #4
   28710:	pop	{fp, pc}

00028714 <flatcc_builder_clear@@Base>:
   28714:	push	{r4, fp, lr}
   28718:	add	fp, sp, #8
   2871c:	sub	sp, sp, #28
   28720:	str	r0, [fp, #-24]	; 0xffffffe8
   28724:	mov	r3, #0
   28728:	str	r3, [fp, #-16]
   2872c:	b	2877c <flatcc_builder_clear@@Base+0x68>
   28730:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28734:	add	r2, r3, #52	; 0x34
   28738:	ldr	r3, [fp, #-16]
   2873c:	lsl	r3, r3, #3
   28740:	add	r3, r2, r3
   28744:	str	r3, [fp, #-20]	; 0xffffffec
   28748:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2874c:	ldr	r4, [r3, #48]	; 0x30
   28750:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28754:	ldr	r0, [r3, #40]	; 0x28
   28758:	ldr	r3, [fp, #-16]
   2875c:	str	r3, [sp]
   28760:	mov	r3, #0
   28764:	mov	r2, #0
   28768:	ldr	r1, [fp, #-20]	; 0xffffffec
   2876c:	blx	r4
   28770:	ldr	r3, [fp, #-16]
   28774:	add	r3, r3, #1
   28778:	str	r3, [fp, #-16]
   2877c:	ldr	r3, [fp, #-16]
   28780:	cmp	r3, #7
   28784:	ble	28730 <flatcc_builder_clear@@Base+0x1c>
   28788:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2878c:	ldr	r3, [r3, #184]	; 0xb8
   28790:	cmp	r3, #0
   28794:	beq	287a8 <flatcc_builder_clear@@Base+0x94>
   28798:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2879c:	add	r3, r3, #188	; 0xbc
   287a0:	mov	r0, r3
   287a4:	bl	2e14c <flatcc_emitter_clear@@Base>
   287a8:	mov	r2, #232	; 0xe8
   287ac:	mov	r1, #0
   287b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   287b4:	bl	129c0 <memset@plt>
   287b8:	nop			; (mov r0, r0)
   287bc:	sub	sp, fp, #8
   287c0:	pop	{r4, fp, pc}
   287c4:	push	{fp}		; (str fp, [sp, #-4]!)
   287c8:	add	fp, sp, #0
   287cc:	sub	sp, sp, #12
   287d0:	str	r0, [fp, #-8]
   287d4:	mov	r3, r1
   287d8:	strh	r3, [fp, #-10]
   287dc:	ldr	r3, [fp, #-8]
   287e0:	ldrh	r3, [r3, #128]	; 0x80
   287e4:	ldrh	r2, [fp, #-10]
   287e8:	cmp	r2, r3
   287ec:	bls	287fc <flatcc_builder_clear@@Base+0xe8>
   287f0:	ldr	r3, [fp, #-8]
   287f4:	ldrh	r2, [fp, #-10]
   287f8:	strh	r2, [r3, #128]	; 0x80
   287fc:	nop			; (mov r0, r0)
   28800:	add	sp, fp, #0
   28804:	pop	{fp}		; (ldr fp, [sp], #4)
   28808:	bx	lr
   2880c:	push	{fp}		; (str fp, [sp, #-4]!)
   28810:	add	fp, sp, #0
   28814:	sub	sp, sp, #12
   28818:	str	r0, [fp, #-8]
   2881c:	mov	r3, r1
   28820:	strh	r3, [fp, #-10]
   28824:	ldr	r3, [fp, #-8]
   28828:	ldrh	r3, [r3]
   2882c:	ldrh	r2, [fp, #-10]
   28830:	cmp	r2, r3
   28834:	bls	28844 <flatcc_builder_clear@@Base+0x130>
   28838:	ldr	r3, [fp, #-8]
   2883c:	ldrh	r2, [fp, #-10]
   28840:	strh	r2, [r3]
   28844:	nop			; (mov r0, r0)
   28848:	add	sp, fp, #0
   2884c:	pop	{fp}		; (ldr fp, [sp], #4)
   28850:	bx	lr

00028854 <flatcc_builder_enter_user_frame_ptr@@Base>:
   28854:	push	{fp, lr}
   28858:	add	fp, sp, #4
   2885c:	sub	sp, sp, #24
   28860:	str	r0, [fp, #-16]
   28864:	str	r1, [fp, #-20]	; 0xffffffec
   28868:	ldr	r3, [fp, #-20]	; 0xffffffec
   2886c:	add	r3, r3, #3
   28870:	bic	r3, r3, #3
   28874:	add	r3, r3, #4
   28878:	str	r3, [fp, #-20]	; 0xffffffec
   2887c:	ldr	r3, [fp, #-16]
   28880:	ldr	r2, [r3, #228]	; 0xe4
   28884:	mov	r3, #0
   28888:	str	r3, [sp]
   2888c:	ldr	r3, [fp, #-20]	; 0xffffffec
   28890:	mov	r1, #7
   28894:	ldr	r0, [fp, #-16]
   28898:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   2889c:	str	r0, [fp, #-8]
   288a0:	ldr	r3, [fp, #-8]
   288a4:	cmp	r3, #0
   288a8:	bne	288b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   288ac:	mov	r3, #0
   288b0:	b	2890c <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   288b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   288b8:	mov	r1, #0
   288bc:	ldr	r0, [fp, #-8]
   288c0:	bl	129c0 <memset@plt>
   288c4:	ldr	r3, [fp, #-8]
   288c8:	add	r2, r3, #4
   288cc:	str	r2, [fp, #-8]
   288d0:	ldr	r2, [fp, #-16]
   288d4:	ldr	r2, [r2, #224]	; 0xe0
   288d8:	str	r2, [r3]
   288dc:	ldr	r3, [fp, #-16]
   288e0:	ldr	r3, [r3, #228]	; 0xe4
   288e4:	add	r2, r3, #4
   288e8:	ldr	r3, [fp, #-16]
   288ec:	str	r2, [r3, #224]	; 0xe0
   288f0:	ldr	r3, [fp, #-16]
   288f4:	ldr	r2, [r3, #228]	; 0xe4
   288f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   288fc:	add	r2, r2, r3
   28900:	ldr	r3, [fp, #-16]
   28904:	str	r2, [r3, #228]	; 0xe4
   28908:	ldr	r3, [fp, #-8]
   2890c:	mov	r0, r3
   28910:	sub	sp, fp, #4
   28914:	pop	{fp, pc}

00028918 <flatcc_builder_enter_user_frame@@Base>:
   28918:	push	{fp, lr}
   2891c:	add	fp, sp, #4
   28920:	sub	sp, sp, #24
   28924:	str	r0, [fp, #-16]
   28928:	str	r1, [fp, #-20]	; 0xffffffec
   2892c:	ldr	r3, [fp, #-20]	; 0xffffffec
   28930:	add	r3, r3, #3
   28934:	bic	r3, r3, #3
   28938:	add	r3, r3, #4
   2893c:	str	r3, [fp, #-20]	; 0xffffffec
   28940:	ldr	r3, [fp, #-16]
   28944:	ldr	r2, [r3, #228]	; 0xe4
   28948:	mov	r3, #0
   2894c:	str	r3, [sp]
   28950:	ldr	r3, [fp, #-20]	; 0xffffffec
   28954:	mov	r1, #7
   28958:	ldr	r0, [fp, #-16]
   2895c:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   28960:	str	r0, [fp, #-8]
   28964:	ldr	r3, [fp, #-8]
   28968:	cmp	r3, #0
   2896c:	bne	28978 <flatcc_builder_enter_user_frame@@Base+0x60>
   28970:	mov	r3, #0
   28974:	b	289d4 <flatcc_builder_enter_user_frame@@Base+0xbc>
   28978:	ldr	r2, [fp, #-20]	; 0xffffffec
   2897c:	mov	r1, #0
   28980:	ldr	r0, [fp, #-8]
   28984:	bl	129c0 <memset@plt>
   28988:	ldr	r3, [fp, #-8]
   2898c:	add	r2, r3, #4
   28990:	str	r2, [fp, #-8]
   28994:	ldr	r2, [fp, #-16]
   28998:	ldr	r2, [r2, #224]	; 0xe0
   2899c:	str	r2, [r3]
   289a0:	ldr	r3, [fp, #-16]
   289a4:	ldr	r3, [r3, #228]	; 0xe4
   289a8:	add	r2, r3, #4
   289ac:	ldr	r3, [fp, #-16]
   289b0:	str	r2, [r3, #224]	; 0xe0
   289b4:	ldr	r3, [fp, #-16]
   289b8:	ldr	r2, [r3, #228]	; 0xe4
   289bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   289c0:	add	r2, r2, r3
   289c4:	ldr	r3, [fp, #-16]
   289c8:	str	r2, [r3, #228]	; 0xe4
   289cc:	ldr	r3, [fp, #-16]
   289d0:	ldr	r3, [r3, #224]	; 0xe0
   289d4:	mov	r0, r3
   289d8:	sub	sp, fp, #4
   289dc:	pop	{fp, pc}

000289e0 <flatcc_builder_exit_user_frame@@Base>:
   289e0:	push	{fp, lr}
   289e4:	add	fp, sp, #4
   289e8:	sub	sp, sp, #16
   289ec:	str	r0, [fp, #-16]
   289f0:	ldr	r3, [fp, #-16]
   289f4:	ldr	r3, [r3, #224]	; 0xe0
   289f8:	cmp	r3, #0
   289fc:	bne	28a20 <flatcc_builder_exit_user_frame@@Base+0x40>
   28a00:	ldr	r3, [pc, #104]	; 28a70 <flatcc_builder_exit_user_frame@@Base+0x90>
   28a04:	add	r3, pc, r3
   28a08:	ldr	r2, [pc, #100]	; 28a74 <flatcc_builder_exit_user_frame@@Base+0x94>
   28a0c:	ldr	r1, [pc, #100]	; 28a78 <flatcc_builder_exit_user_frame@@Base+0x98>
   28a10:	add	r1, pc, r1
   28a14:	ldr	r0, [pc, #96]	; 28a7c <flatcc_builder_exit_user_frame@@Base+0x9c>
   28a18:	add	r0, pc, r0
   28a1c:	bl	12a08 <__assert_fail@plt>
   28a20:	ldr	r3, [fp, #-16]
   28a24:	ldr	r2, [r3, #108]	; 0x6c
   28a28:	ldr	r3, [fp, #-16]
   28a2c:	ldr	r3, [r3, #224]	; 0xe0
   28a30:	add	r3, r2, r3
   28a34:	str	r3, [fp, #-8]
   28a38:	ldr	r3, [fp, #-16]
   28a3c:	ldr	r3, [r3, #224]	; 0xe0
   28a40:	sub	r2, r3, #4
   28a44:	ldr	r3, [fp, #-16]
   28a48:	str	r2, [r3, #228]	; 0xe4
   28a4c:	ldr	r3, [fp, #-8]
   28a50:	ldr	r2, [r3, #-4]
   28a54:	ldr	r3, [fp, #-16]
   28a58:	str	r2, [r3, #224]	; 0xe0
   28a5c:	ldr	r3, [fp, #-16]
   28a60:	ldr	r3, [r3, #224]	; 0xe0
   28a64:	mov	r0, r3
   28a68:	sub	sp, fp, #4
   28a6c:	pop	{fp, pc}
   28a70:	andeq	ip, r0, ip, lsl #9
   28a74:	andeq	r0, r0, lr, lsl r2
   28a78:	andeq	ip, r0, r0, lsr #32
   28a7c:	andeq	ip, r0, r0, lsr #1

00028a80 <flatcc_builder_exit_user_frame_at@@Base>:
   28a80:	push	{fp, lr}
   28a84:	add	fp, sp, #4
   28a88:	sub	sp, sp, #8
   28a8c:	str	r0, [fp, #-8]
   28a90:	str	r1, [fp, #-12]
   28a94:	ldr	r3, [fp, #-8]
   28a98:	ldr	r2, [r3, #224]	; 0xe0
   28a9c:	ldr	r3, [fp, #-12]
   28aa0:	cmp	r2, r3
   28aa4:	bcs	28ac8 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   28aa8:	ldr	r3, [pc, #60]	; 28aec <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   28aac:	add	r3, pc, r3
   28ab0:	ldr	r2, [pc, #56]	; 28af0 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   28ab4:	ldr	r1, [pc, #56]	; 28af4 <flatcc_builder_exit_user_frame_at@@Base+0x74>
   28ab8:	add	r1, pc, r1
   28abc:	ldr	r0, [pc, #52]	; 28af8 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   28ac0:	add	r0, pc, r0
   28ac4:	bl	12a08 <__assert_fail@plt>
   28ac8:	ldr	r3, [fp, #-8]
   28acc:	ldr	r2, [fp, #-12]
   28ad0:	str	r2, [r3, #224]	; 0xe0
   28ad4:	ldr	r0, [fp, #-8]
   28ad8:	bl	289e0 <flatcc_builder_exit_user_frame@@Base>
   28adc:	mov	r3, r0
   28ae0:	mov	r0, r3
   28ae4:	sub	sp, fp, #4
   28ae8:	pop	{fp, pc}
   28aec:	andeq	ip, r0, r4, lsl #8
   28af0:	andeq	r0, r0, r7, lsr #4
   28af4:	andeq	fp, r0, r8, ror pc
   28af8:	andeq	ip, r0, r4, lsl r0

00028afc <flatcc_builder_get_current_user_frame@@Base>:
   28afc:	push	{fp}		; (str fp, [sp, #-4]!)
   28b00:	add	fp, sp, #0
   28b04:	sub	sp, sp, #12
   28b08:	str	r0, [fp, #-8]
   28b0c:	ldr	r3, [fp, #-8]
   28b10:	ldr	r3, [r3, #224]	; 0xe0
   28b14:	mov	r0, r3
   28b18:	add	sp, fp, #0
   28b1c:	pop	{fp}		; (ldr fp, [sp], #4)
   28b20:	bx	lr

00028b24 <flatcc_builder_get_user_frame_ptr@@Base>:
   28b24:	push	{fp}		; (str fp, [sp, #-4]!)
   28b28:	add	fp, sp, #0
   28b2c:	sub	sp, sp, #12
   28b30:	str	r0, [fp, #-8]
   28b34:	str	r1, [fp, #-12]
   28b38:	ldr	r3, [fp, #-8]
   28b3c:	ldr	r2, [r3, #108]	; 0x6c
   28b40:	ldr	r3, [fp, #-12]
   28b44:	add	r3, r2, r3
   28b48:	mov	r0, r3
   28b4c:	add	sp, fp, #0
   28b50:	pop	{fp}		; (ldr fp, [sp], #4)
   28b54:	bx	lr
   28b58:	push	{fp, lr}
   28b5c:	add	fp, sp, #4
   28b60:	sub	sp, sp, #16
   28b64:	str	r0, [fp, #-8]
   28b68:	mov	r3, r1
   28b6c:	strh	r3, [fp, #-10]
   28b70:	ldr	r3, [fp, #-8]
   28b74:	ldr	r3, [r3, #156]	; 0x9c
   28b78:	add	r2, r3, #1
   28b7c:	ldr	r3, [fp, #-8]
   28b80:	str	r2, [r3, #156]	; 0x9c
   28b84:	ldr	r3, [fp, #-8]
   28b88:	ldr	r2, [r3, #156]	; 0x9c
   28b8c:	ldr	r3, [fp, #-8]
   28b90:	ldr	r3, [r3, #160]	; 0xa0
   28b94:	cmp	r2, r3
   28b98:	ble	28c88 <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   28b9c:	ldr	r3, [fp, #-8]
   28ba0:	ldr	r3, [r3, #176]	; 0xb0
   28ba4:	cmp	r3, #0
   28ba8:	ble	28bcc <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   28bac:	ldr	r3, [fp, #-8]
   28bb0:	ldr	r2, [r3, #156]	; 0x9c
   28bb4:	ldr	r3, [fp, #-8]
   28bb8:	ldr	r3, [r3, #176]	; 0xb0
   28bbc:	cmp	r2, r3
   28bc0:	ble	28bcc <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   28bc4:	mvn	r3, #0
   28bc8:	b	28d28 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   28bcc:	ldr	r3, [fp, #-8]
   28bd0:	ldr	r3, [r3, #156]	; 0x9c
   28bd4:	sub	r3, r3, #1
   28bd8:	mov	r2, r3
   28bdc:	mov	r3, r2
   28be0:	lsl	r3, r3, #3
   28be4:	add	r3, r3, r2
   28be8:	lsl	r3, r3, #2
   28bec:	mov	r2, r3
   28bf0:	mov	r3, #0
   28bf4:	str	r3, [sp]
   28bf8:	mov	r3, #36	; 0x24
   28bfc:	mov	r1, #4
   28c00:	ldr	r0, [fp, #-8]
   28c04:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   28c08:	mov	r2, r0
   28c0c:	ldr	r3, [fp, #-8]
   28c10:	str	r2, [r3, #32]
   28c14:	ldr	r3, [fp, #-8]
   28c18:	ldr	r3, [r3, #32]
   28c1c:	cmp	r3, #0
   28c20:	bne	28c2c <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   28c24:	mvn	r3, #0
   28c28:	b	28d28 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   28c2c:	ldr	r3, [fp, #-8]
   28c30:	ldr	r3, [r3, #88]	; 0x58
   28c34:	ldr	r2, [pc, #248]	; 28d34 <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   28c38:	umull	r2, r3, r2, r3
   28c3c:	lsr	r3, r3, #3
   28c40:	mov	r2, r3
   28c44:	ldr	r3, [fp, #-8]
   28c48:	str	r2, [r3, #160]	; 0xa0
   28c4c:	ldr	r3, [fp, #-8]
   28c50:	ldr	r3, [r3, #176]	; 0xb0
   28c54:	cmp	r3, #0
   28c58:	ble	28c9c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   28c5c:	ldr	r3, [fp, #-8]
   28c60:	ldr	r2, [r3, #176]	; 0xb0
   28c64:	ldr	r3, [fp, #-8]
   28c68:	ldr	r3, [r3, #160]	; 0xa0
   28c6c:	cmp	r2, r3
   28c70:	bge	28c9c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   28c74:	ldr	r3, [fp, #-8]
   28c78:	ldr	r2, [r3, #176]	; 0xb0
   28c7c:	ldr	r3, [fp, #-8]
   28c80:	str	r2, [r3, #160]	; 0xa0
   28c84:	b	28c9c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   28c88:	ldr	r3, [fp, #-8]
   28c8c:	ldr	r3, [r3, #32]
   28c90:	add	r2, r3, #36	; 0x24
   28c94:	ldr	r3, [fp, #-8]
   28c98:	str	r2, [r3, #32]
   28c9c:	ldr	r3, [fp, #-8]
   28ca0:	ldr	r3, [r3, #32]
   28ca4:	ldr	r2, [fp, #-8]
   28ca8:	ldr	r2, [r2, #20]
   28cac:	str	r2, [r3, #8]
   28cb0:	ldr	r3, [fp, #-8]
   28cb4:	ldr	r3, [r3, #32]
   28cb8:	ldr	r2, [fp, #-8]
   28cbc:	ldrh	r2, [r2, #130]	; 0x82
   28cc0:	strh	r2, [r3, #12]
   28cc4:	ldr	r3, [fp, #-8]
   28cc8:	ldrh	r2, [fp, #-10]
   28ccc:	strh	r2, [r3, #130]	; 0x82
   28cd0:	ldr	r3, [fp, #-8]
   28cd4:	ldr	r3, [r3, #32]
   28cd8:	ldr	r2, [fp, #-8]
   28cdc:	ldr	r2, [r2, #28]
   28ce0:	str	r2, [r3]
   28ce4:	ldr	r3, [fp, #-8]
   28ce8:	ldr	r3, [r3, #32]
   28cec:	mvn	r2, #3
   28cf0:	str	r2, [r3, #4]
   28cf4:	ldr	r3, [fp, #-8]
   28cf8:	ldr	r2, [r3, #28]
   28cfc:	ldr	r3, [fp, #-8]
   28d00:	ldr	r3, [r3, #20]
   28d04:	add	r3, r2, r3
   28d08:	add	r3, r3, #7
   28d0c:	bic	r2, r3, #7
   28d10:	ldr	r3, [fp, #-8]
   28d14:	str	r2, [r3, #28]
   28d18:	ldr	r3, [fp, #-8]
   28d1c:	mov	r2, #0
   28d20:	str	r2, [r3, #20]
   28d24:	mov	r3, #0
   28d28:	mov	r0, r3
   28d2c:	sub	sp, fp, #4
   28d30:	pop	{fp, pc}
   28d34:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   28d38:	push	{fp, lr}
   28d3c:	add	fp, sp, #4
   28d40:	sub	sp, sp, #8
   28d44:	str	r0, [fp, #-8]
   28d48:	ldr	r3, [fp, #-8]
   28d4c:	ldr	r0, [r3, #16]
   28d50:	ldr	r3, [fp, #-8]
   28d54:	ldr	r3, [r3, #20]
   28d58:	mov	r2, r3
   28d5c:	mov	r1, #0
   28d60:	bl	129c0 <memset@plt>
   28d64:	ldr	r3, [fp, #-8]
   28d68:	ldr	r3, [r3, #32]
   28d6c:	ldr	r2, [r3, #8]
   28d70:	ldr	r3, [fp, #-8]
   28d74:	str	r2, [r3, #20]
   28d78:	ldr	r3, [fp, #-8]
   28d7c:	ldr	r3, [r3, #32]
   28d80:	ldr	r2, [r3]
   28d84:	ldr	r3, [fp, #-8]
   28d88:	str	r2, [r3, #28]
   28d8c:	ldr	r3, [fp, #-8]
   28d90:	ldr	r3, [r3, #32]
   28d94:	ldr	r3, [r3, #4]
   28d98:	mov	r1, r3
   28d9c:	ldr	r0, [fp, #-8]
   28da0:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   28da4:	ldr	r3, [fp, #-8]
   28da8:	ldrh	r3, [r3, #130]	; 0x82
   28dac:	mov	r1, r3
   28db0:	ldr	r0, [fp, #-8]
   28db4:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   28db8:	ldr	r3, [fp, #-8]
   28dbc:	ldr	r3, [r3, #32]
   28dc0:	ldrh	r2, [r3, #12]
   28dc4:	ldr	r3, [fp, #-8]
   28dc8:	strh	r2, [r3, #130]	; 0x82
   28dcc:	ldr	r3, [fp, #-8]
   28dd0:	ldr	r3, [r3, #32]
   28dd4:	sub	r2, r3, #36	; 0x24
   28dd8:	ldr	r3, [fp, #-8]
   28ddc:	str	r2, [r3, #32]
   28de0:	ldr	r3, [fp, #-8]
   28de4:	ldr	r3, [r3, #156]	; 0x9c
   28de8:	sub	r2, r3, #1
   28dec:	ldr	r3, [fp, #-8]
   28df0:	str	r2, [r3, #156]	; 0x9c
   28df4:	nop			; (mov r0, r0)
   28df8:	sub	sp, fp, #4
   28dfc:	pop	{fp, pc}
   28e00:	push	{fp}		; (str fp, [sp, #-4]!)
   28e04:	add	fp, sp, #0
   28e08:	sub	sp, sp, #20
   28e0c:	str	r0, [fp, #-8]
   28e10:	str	r1, [fp, #-12]
   28e14:	mov	r3, r2
   28e18:	strh	r3, [fp, #-14]
   28e1c:	ldr	r3, [fp, #-8]
   28e20:	ldr	r3, [r3, #136]	; 0x88
   28e24:	mov	r2, r3
   28e28:	ldr	r3, [fp, #-12]
   28e2c:	sub	r3, r2, r3
   28e30:	ldrh	r2, [fp, #-14]
   28e34:	sub	r2, r2, #1
   28e38:	and	r3, r3, r2
   28e3c:	mov	r0, r3
   28e40:	add	sp, fp, #0
   28e44:	pop	{fp}		; (ldr fp, [sp], #4)
   28e48:	bx	lr
   28e4c:	push	{fp}		; (str fp, [sp, #-4]!)
   28e50:	add	fp, sp, #0
   28e54:	sub	sp, sp, #12
   28e58:	str	r0, [fp, #-8]
   28e5c:	mov	r3, r1
   28e60:	strh	r3, [fp, #-10]
   28e64:	ldr	r3, [fp, #-8]
   28e68:	ldr	r2, [r3, #140]	; 0x8c
   28e6c:	ldrh	r3, [fp, #-10]
   28e70:	sub	r3, r3, #1
   28e74:	and	r3, r3, r2
   28e78:	mov	r0, r3
   28e7c:	add	sp, fp, #0
   28e80:	pop	{fp}		; (ldr fp, [sp], #4)
   28e84:	bx	lr
   28e88:	push	{r4, fp, lr}
   28e8c:	add	fp, sp, #8
   28e90:	sub	sp, sp, #28
   28e94:	str	r0, [fp, #-24]	; 0xffffffe8
   28e98:	str	r1, [fp, #-28]	; 0xffffffe4
   28e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28ea0:	ldr	r3, [r3, #136]	; 0x88
   28ea4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   28ea8:	ldr	r2, [r2]
   28eac:	sub	r3, r3, r2
   28eb0:	str	r3, [fp, #-16]
   28eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28eb8:	ldr	r2, [r3, #136]	; 0x88
   28ebc:	ldr	r3, [fp, #-16]
   28ec0:	cmp	r2, r3
   28ec4:	bgt	28ee8 <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   28ec8:	ldr	r3, [pc, #152]	; 28f68 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   28ecc:	add	r3, pc, r3
   28ed0:	ldr	r2, [pc, #148]	; 28f6c <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   28ed4:	ldr	r1, [pc, #148]	; 28f70 <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   28ed8:	add	r1, pc, r1
   28edc:	ldr	r0, [pc, #144]	; 28f74 <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   28ee0:	add	r0, pc, r0
   28ee4:	bl	12a08 <__assert_fail@plt>
   28ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28eec:	ldr	r4, [r3, #44]	; 0x2c
   28ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28ef4:	ldr	r0, [r3, #36]	; 0x24
   28ef8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28efc:	add	r1, r3, #8
   28f00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28f04:	ldr	r2, [r3, #4]
   28f08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28f0c:	ldr	r3, [r3]
   28f10:	str	r3, [sp]
   28f14:	ldr	r3, [fp, #-16]
   28f18:	blx	r4
   28f1c:	mov	r3, r0
   28f20:	cmp	r3, #0
   28f24:	beq	28f48 <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   28f28:	ldr	r3, [pc, #72]	; 28f78 <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   28f2c:	add	r3, pc, r3
   28f30:	ldr	r2, [pc, #68]	; 28f7c <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   28f34:	ldr	r1, [pc, #68]	; 28f80 <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   28f38:	add	r1, pc, r1
   28f3c:	ldr	r0, [pc, #64]	; 28f84 <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   28f40:	add	r0, pc, r0
   28f44:	bl	12a08 <__assert_fail@plt>
   28f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28f4c:	ldr	r2, [fp, #-16]
   28f50:	str	r2, [r3, #136]	; 0x88
   28f54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28f58:	ldr	r3, [r3, #136]	; 0x88
   28f5c:	mov	r0, r3
   28f60:	sub	sp, fp, #8
   28f64:	pop	{r4, fp, pc}
   28f68:	andeq	ip, r0, r4, lsr #32
   28f6c:	andeq	r0, r0, r7, lsl #5
   28f70:	andeq	fp, r0, r8, asr fp
   28f74:			; <UNDEFINED> instruction: 0x0000bbb0
   28f78:	andeq	fp, r0, r4, asr #31
   28f7c:	andeq	r0, r0, fp, lsl #5
   28f80:	strdeq	fp, [r0], -r8
   28f84:	andeq	fp, r0, r0, asr fp
   28f88:	push	{r4, fp, lr}
   28f8c:	add	fp, sp, #8
   28f90:	sub	sp, sp, #28
   28f94:	str	r0, [fp, #-24]	; 0xffffffe8
   28f98:	str	r1, [fp, #-28]	; 0xffffffe4
   28f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fa0:	ldr	r3, [r3, #140]	; 0x8c
   28fa4:	str	r3, [fp, #-16]
   28fa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   28fac:	ldr	r3, [r3]
   28fb0:	mov	r2, r3
   28fb4:	ldr	r3, [fp, #-16]
   28fb8:	add	r2, r2, r3
   28fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fc0:	str	r2, [r3, #140]	; 0x8c
   28fc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28fc8:	ldr	r2, [r3, #140]	; 0x8c
   28fcc:	ldr	r3, [fp, #-16]
   28fd0:	cmp	r2, r3
   28fd4:	bge	28ff8 <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   28fd8:	ldr	r3, [pc, #140]	; 2906c <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   28fdc:	add	r3, pc, r3
   28fe0:	ldr	r2, [pc, #136]	; 29070 <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   28fe4:	ldr	r1, [pc, #136]	; 29074 <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   28fe8:	add	r1, pc, r1
   28fec:	ldr	r0, [pc, #132]	; 29078 <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   28ff0:	add	r0, pc, r0
   28ff4:	bl	12a08 <__assert_fail@plt>
   28ff8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   28ffc:	ldr	r4, [r3, #44]	; 0x2c
   29000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29004:	ldr	r0, [r3, #36]	; 0x24
   29008:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2900c:	add	r1, r3, #8
   29010:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29014:	ldr	r2, [r3, #4]
   29018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2901c:	ldr	r3, [r3]
   29020:	str	r3, [sp]
   29024:	ldr	r3, [fp, #-16]
   29028:	blx	r4
   2902c:	mov	r3, r0
   29030:	cmp	r3, #0
   29034:	beq	29058 <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   29038:	ldr	r3, [pc, #60]	; 2907c <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   2903c:	add	r3, pc, r3
   29040:	ldr	r2, [pc, #56]	; 29080 <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   29044:	ldr	r1, [pc, #56]	; 29084 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   29048:	add	r1, pc, r1
   2904c:	ldr	r0, [pc, #52]	; 29088 <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   29050:	add	r0, pc, r0
   29054:	bl	12a08 <__assert_fail@plt>
   29058:	ldr	r3, [fp, #-16]
   2905c:	add	r3, r3, #1
   29060:	mov	r0, r3
   29064:	sub	sp, fp, #8
   29068:	pop	{r4, fp, pc}
   2906c:	andeq	fp, r0, r8, lsl #30
   29070:	andeq	r0, r0, r1, lsr #5
   29074:	andeq	fp, r0, r8, asr #20
   29078:	andeq	fp, r0, r0, lsr #21
   2907c:	andeq	fp, r0, r8, lsr #29
   29080:	andeq	r0, r0, r5, lsr #5
   29084:	andeq	fp, r0, r8, ror #19
   29088:	andeq	fp, r0, r0, asr #20
   2908c:	push	{r4, fp, lr}
   29090:	add	fp, sp, #8
   29094:	sub	sp, sp, #100	; 0x64
   29098:	str	r0, [fp, #-96]	; 0xffffffa0
   2909c:	str	r1, [fp, #-100]	; 0xffffff9c
   290a0:	str	r3, [fp, #-108]	; 0xffffff94
   290a4:	strh	r2, [fp, #-102]	; 0xffffff9a
   290a8:	ldr	r4, [pc, #320]	; 291f0 <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   290ac:	add	r4, pc, r4
   290b0:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   290b4:	cmp	r3, #0
   290b8:	bne	290e0 <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   290bc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   290c0:	ldrh	r3, [r3, #132]	; 0x84
   290c4:	cmp	r3, #0
   290c8:	beq	290d8 <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   290cc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   290d0:	ldrh	r3, [r3, #132]	; 0x84
   290d4:	b	290e4 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   290d8:	mov	r3, #1
   290dc:	b	290e4 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   290e0:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   290e4:	strh	r3, [fp, #-102]	; 0xffffff9a
   290e8:	mov	r1, #4
   290ec:	ldr	r0, [fp, #-100]	; 0xffffff9c
   290f0:	bl	2880c <flatcc_builder_clear@@Base+0xf8>
   290f4:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   290f8:	mov	r1, r3
   290fc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   29100:	bl	2880c <flatcc_builder_clear@@Base+0xf8>
   29104:	ldr	r3, [fp, #-108]	; 0xffffff94
   29108:	cmp	r3, #0
   2910c:	bne	291e0 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   29110:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   29114:	mov	r1, r3
   29118:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2911c:	bl	28e4c <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   29120:	str	r0, [fp, #-16]
   29124:	ldr	r3, [fp, #-16]
   29128:	cmp	r3, #0
   2912c:	beq	291e0 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   29130:	mov	r3, #0
   29134:	str	r3, [fp, #-88]	; 0xffffffa8
   29138:	mov	r3, #0
   2913c:	str	r3, [fp, #-84]	; 0xffffffac
   29140:	ldr	r3, [fp, #-16]
   29144:	cmp	r3, #0
   29148:	beq	291a4 <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   2914c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   29150:	ldr	r3, [fp, #-16]
   29154:	add	r3, r2, r3
   29158:	str	r3, [fp, #-88]	; 0xffffffa8
   2915c:	ldr	r3, [fp, #-84]	; 0xffffffac
   29160:	add	r3, r3, #1
   29164:	lsl	r3, r3, #3
   29168:	sub	r2, fp, #12
   2916c:	add	r3, r2, r3
   29170:	ldr	r2, [pc, #124]	; 291f4 <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   29174:	ldr	r2, [r4, r2]
   29178:	str	r2, [r3, #-76]	; 0xffffffb4
   2917c:	ldr	r3, [fp, #-84]	; 0xffffffac
   29180:	add	r3, r3, #1
   29184:	lsl	r3, r3, #3
   29188:	sub	r2, fp, #12
   2918c:	add	r3, r2, r3
   29190:	ldr	r2, [fp, #-16]
   29194:	str	r2, [r3, #-72]	; 0xffffffb8
   29198:	ldr	r3, [fp, #-84]	; 0xffffffac
   2919c:	add	r3, r3, #1
   291a0:	str	r3, [fp, #-84]	; 0xffffffac
   291a4:	sub	r3, fp, #88	; 0x58
   291a8:	mov	r1, r3
   291ac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   291b0:	bl	28f88 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   291b4:	mov	r3, r0
   291b8:	cmp	r3, #0
   291bc:	bne	291e0 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   291c0:	ldr	r3, [pc, #48]	; 291f8 <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   291c4:	add	r3, pc, r3
   291c8:	ldr	r2, [pc, #44]	; 291fc <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   291cc:	ldr	r1, [pc, #44]	; 29200 <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   291d0:	add	r1, pc, r1
   291d4:	ldr	r0, [pc, #40]	; 29204 <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   291d8:	add	r0, pc, r0
   291dc:	bl	12a08 <__assert_fail@plt>
   291e0:	mov	r3, #0
   291e4:	mov	r0, r3
   291e8:	sub	sp, fp, #8
   291ec:	pop	{r4, fp, pc}
   291f0:	andeq	ip, r1, ip, asr #30
   291f4:	andeq	r0, r0, r4, rrx
   291f8:	andeq	fp, r0, r0, lsl sp
   291fc:			; <UNDEFINED> instruction: 0x000002be
   29200:	andeq	fp, r0, r0, ror #16
   29204:			; <UNDEFINED> instruction: 0x0000b8b8

00029208 <flatcc_builder_embed_buffer@@Base>:
   29208:	push	{r4, fp, lr}
   2920c:	add	fp, sp, #8
   29210:	sub	sp, sp, #108	; 0x6c
   29214:	str	r0, [fp, #-104]	; 0xffffff98
   29218:	str	r2, [fp, #-112]	; 0xffffff90
   2921c:	str	r3, [fp, #-116]	; 0xffffff8c
   29220:	strh	r1, [fp, #-106]	; 0xffffff96
   29224:	ldr	r4, [pc, #492]	; 29418 <flatcc_builder_embed_buffer@@Base+0x210>
   29228:	add	r4, pc, r4
   2922c:	ldr	r3, [fp, #8]
   29230:	and	r3, r3, #2
   29234:	str	r3, [fp, #-16]
   29238:	ldr	r3, [fp, #-104]	; 0xffffff98
   2923c:	ldr	r3, [r3, #152]	; 0x98
   29240:	cmp	r3, #0
   29244:	movne	r3, #1
   29248:	moveq	r3, #0
   2924c:	uxtb	r3, r3
   29250:	ldrh	r2, [fp, #-106]	; 0xffffff96
   29254:	add	r1, fp, #4
   29258:	ldr	r0, [fp, #-104]	; 0xffffff98
   2925c:	bl	2908c <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   29260:	mov	r3, r0
   29264:	cmp	r3, #0
   29268:	beq	29274 <flatcc_builder_embed_buffer@@Base+0x6c>
   2926c:	mov	r3, #0
   29270:	b	2940c <flatcc_builder_embed_buffer@@Base+0x204>
   29274:	ldr	r3, [fp, #-16]
   29278:	cmp	r3, #0
   2927c:	beq	29288 <flatcc_builder_embed_buffer@@Base+0x80>
   29280:	mov	r2, #4
   29284:	b	2928c <flatcc_builder_embed_buffer@@Base+0x84>
   29288:	mov	r2, #0
   2928c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   29290:	add	r3, r2, r3
   29294:	ldrh	r2, [fp, #4]
   29298:	mov	r1, r3
   2929c:	ldr	r0, [fp, #-104]	; 0xffffff98
   292a0:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   292a4:	str	r0, [fp, #-20]	; 0xffffffec
   292a8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   292ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   292b0:	add	r3, r2, r3
   292b4:	mov	r0, r3
   292b8:	bl	277c4 <main@@Base+0x524>
   292bc:	mov	r3, r0
   292c0:	str	r3, [fp, #-24]	; 0xffffffe8
   292c4:	mov	r3, #0
   292c8:	str	r3, [fp, #-96]	; 0xffffffa0
   292cc:	mov	r3, #0
   292d0:	str	r3, [fp, #-92]	; 0xffffffa4
   292d4:	ldr	r3, [fp, #-104]	; 0xffffff98
   292d8:	ldr	r3, [r3, #152]	; 0x98
   292dc:	cmp	r3, #0
   292e0:	beq	29334 <flatcc_builder_embed_buffer@@Base+0x12c>
   292e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   292e8:	add	r3, r3, #4
   292ec:	str	r3, [fp, #-96]	; 0xffffffa0
   292f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   292f4:	add	r3, r3, #1
   292f8:	lsl	r3, r3, #3
   292fc:	sub	r2, fp, #12
   29300:	add	r3, r2, r3
   29304:	sub	r2, fp, #24
   29308:	str	r2, [r3, #-84]	; 0xffffffac
   2930c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   29310:	add	r3, r3, #1
   29314:	lsl	r3, r3, #3
   29318:	sub	r2, fp, #12
   2931c:	add	r3, r2, r3
   29320:	mov	r2, #4
   29324:	str	r2, [r3, #-80]	; 0xffffffb0
   29328:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2932c:	add	r3, r3, #1
   29330:	str	r3, [fp, #-92]	; 0xffffffa4
   29334:	ldr	r3, [fp, #-116]	; 0xffffff8c
   29338:	cmp	r3, #0
   2933c:	beq	29394 <flatcc_builder_embed_buffer@@Base+0x18c>
   29340:	ldr	r2, [fp, #-96]	; 0xffffffa0
   29344:	ldr	r3, [fp, #-116]	; 0xffffff8c
   29348:	add	r3, r2, r3
   2934c:	str	r3, [fp, #-96]	; 0xffffffa0
   29350:	ldr	r3, [fp, #-92]	; 0xffffffa4
   29354:	add	r3, r3, #1
   29358:	lsl	r3, r3, #3
   2935c:	sub	r2, fp, #12
   29360:	add	r3, r2, r3
   29364:	ldr	r2, [fp, #-112]	; 0xffffff90
   29368:	str	r2, [r3, #-84]	; 0xffffffac
   2936c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   29370:	add	r3, r3, #1
   29374:	lsl	r3, r3, #3
   29378:	sub	r2, fp, #12
   2937c:	add	r3, r2, r3
   29380:	ldr	r2, [fp, #-116]	; 0xffffff8c
   29384:	str	r2, [r3, #-80]	; 0xffffffb0
   29388:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2938c:	add	r3, r3, #1
   29390:	str	r3, [fp, #-92]	; 0xffffffa4
   29394:	ldr	r3, [fp, #-20]	; 0xffffffec
   29398:	cmp	r3, #0
   2939c:	beq	293f8 <flatcc_builder_embed_buffer@@Base+0x1f0>
   293a0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   293a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   293a8:	add	r3, r2, r3
   293ac:	str	r3, [fp, #-96]	; 0xffffffa0
   293b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   293b4:	add	r3, r3, #1
   293b8:	lsl	r3, r3, #3
   293bc:	sub	r2, fp, #12
   293c0:	add	r3, r2, r3
   293c4:	ldr	r2, [pc, #80]	; 2941c <flatcc_builder_embed_buffer@@Base+0x214>
   293c8:	ldr	r2, [r4, r2]
   293cc:	str	r2, [r3, #-84]	; 0xffffffac
   293d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   293d4:	add	r3, r3, #1
   293d8:	lsl	r3, r3, #3
   293dc:	sub	r2, fp, #12
   293e0:	add	r3, r2, r3
   293e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   293e8:	str	r2, [r3, #-80]	; 0xffffffb0
   293ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   293f0:	add	r3, r3, #1
   293f4:	str	r3, [fp, #-92]	; 0xffffffa4
   293f8:	sub	r3, fp, #96	; 0x60
   293fc:	mov	r1, r3
   29400:	ldr	r0, [fp, #-104]	; 0xffffff98
   29404:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   29408:	mov	r3, r0
   2940c:	mov	r0, r3
   29410:	sub	sp, fp, #8
   29414:	pop	{r4, fp, pc}
   29418:	ldrdeq	ip, [r1], -r0
   2941c:	andeq	r0, r0, r4, rrx

00029420 <flatcc_builder_create_buffer@@Base>:
   29420:	push	{r4, fp, lr}
   29424:	add	fp, sp, #8
   29428:	sub	sp, sp, #132	; 0x84
   2942c:	str	r0, [fp, #-128]	; 0xffffff80
   29430:	str	r1, [fp, #-132]	; 0xffffff7c
   29434:	str	r3, [fp, #-140]	; 0xffffff74
   29438:	strh	r2, [fp, #-134]	; 0xffffff7a
   2943c:	ldr	r4, [pc, #932]	; 297e8 <flatcc_builder_create_buffer@@Base+0x3c8>
   29440:	add	r4, pc, r4
   29444:	mov	r3, #0
   29448:	str	r3, [fp, #-16]
   2944c:	mov	r3, #0
   29450:	str	r3, [fp, #-120]	; 0xffffff88
   29454:	ldr	r3, [fp, #8]
   29458:	and	r3, r3, #1
   2945c:	cmp	r3, #0
   29460:	movne	r3, #1
   29464:	moveq	r3, #0
   29468:	uxtb	r3, r3
   2946c:	str	r3, [fp, #-20]	; 0xffffffec
   29470:	ldr	r3, [fp, #8]
   29474:	and	r3, r3, #2
   29478:	cmp	r3, #0
   2947c:	movne	r3, #1
   29480:	moveq	r3, #0
   29484:	uxtb	r3, r3
   29488:	str	r3, [fp, #-24]	; 0xffffffe8
   2948c:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   29490:	ldr	r3, [fp, #-20]	; 0xffffffec
   29494:	add	r1, fp, #4
   29498:	ldr	r0, [fp, #-128]	; 0xffffff80
   2949c:	bl	2908c <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   294a0:	mov	r3, r0
   294a4:	cmp	r3, #0
   294a8:	beq	294b4 <flatcc_builder_create_buffer@@Base+0x94>
   294ac:	mov	r3, #0
   294b0:	b	297dc <flatcc_builder_create_buffer@@Base+0x3bc>
   294b4:	ldrh	r3, [fp, #4]
   294b8:	mov	r1, r3
   294bc:	ldr	r0, [fp, #-128]	; 0xffffff80
   294c0:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   294c4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   294c8:	cmp	r3, #0
   294cc:	beq	29504 <flatcc_builder_create_buffer@@Base+0xe4>
   294d0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   294d4:	ldr	r3, [r3]
   294d8:	str	r3, [fp, #-120]	; 0xffffff88
   294dc:	ldr	r3, [fp, #-120]	; 0xffffff88
   294e0:	mov	r0, r3
   294e4:	bl	27810 <main@@Base+0x570>
   294e8:	mov	r3, r0
   294ec:	str	r3, [fp, #-120]	; 0xffffff88
   294f0:	ldr	r3, [fp, #-120]	; 0xffffff88
   294f4:	mov	r0, r3
   294f8:	bl	277c4 <main@@Base+0x524>
   294fc:	mov	r3, r0
   29500:	str	r3, [fp, #-120]	; 0xffffff88
   29504:	ldr	r3, [fp, #-120]	; 0xffffff88
   29508:	cmp	r3, #0
   2950c:	beq	29518 <flatcc_builder_create_buffer@@Base+0xf8>
   29510:	mov	r3, #4
   29514:	b	2951c <flatcc_builder_create_buffer@@Base+0xfc>
   29518:	mov	r3, #0
   2951c:	str	r3, [fp, #-16]
   29520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29524:	cmp	r3, #0
   29528:	beq	29534 <flatcc_builder_create_buffer@@Base+0x114>
   2952c:	mov	r2, #4
   29530:	b	29538 <flatcc_builder_create_buffer@@Base+0x118>
   29534:	mov	r2, #0
   29538:	ldr	r3, [fp, #-16]
   2953c:	add	r3, r2, r3
   29540:	add	r3, r3, #4
   29544:	ldrh	r2, [fp, #4]
   29548:	mov	r1, r3
   2954c:	ldr	r0, [fp, #-128]	; 0xffffff80
   29550:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   29554:	str	r0, [fp, #-28]	; 0xffffffe4
   29558:	mov	r3, #0
   2955c:	str	r3, [fp, #-116]	; 0xffffff8c
   29560:	mov	r3, #0
   29564:	str	r3, [fp, #-112]	; 0xffffff90
   29568:	ldr	r3, [fp, #-20]	; 0xffffffec
   2956c:	cmp	r3, #0
   29570:	bne	29580 <flatcc_builder_create_buffer@@Base+0x160>
   29574:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29578:	cmp	r3, #0
   2957c:	beq	295d0 <flatcc_builder_create_buffer@@Base+0x1b0>
   29580:	ldr	r3, [fp, #-116]	; 0xffffff8c
   29584:	add	r3, r3, #4
   29588:	str	r3, [fp, #-116]	; 0xffffff8c
   2958c:	ldr	r3, [fp, #-112]	; 0xffffff90
   29590:	add	r3, r3, #1
   29594:	lsl	r3, r3, #3
   29598:	sub	r2, fp, #12
   2959c:	add	r3, r2, r3
   295a0:	sub	r2, fp, #44	; 0x2c
   295a4:	str	r2, [r3, #-104]	; 0xffffff98
   295a8:	ldr	r3, [fp, #-112]	; 0xffffff90
   295ac:	add	r3, r3, #1
   295b0:	lsl	r3, r3, #3
   295b4:	sub	r2, fp, #12
   295b8:	add	r3, r2, r3
   295bc:	mov	r2, #4
   295c0:	str	r2, [r3, #-100]	; 0xffffff9c
   295c4:	ldr	r3, [fp, #-112]	; 0xffffff90
   295c8:	add	r3, r3, #1
   295cc:	str	r3, [fp, #-112]	; 0xffffff90
   295d0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   295d4:	add	r3, r3, #4
   295d8:	str	r3, [fp, #-116]	; 0xffffff8c
   295dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   295e0:	add	r3, r3, #1
   295e4:	lsl	r3, r3, #3
   295e8:	sub	r2, fp, #12
   295ec:	add	r3, r2, r3
   295f0:	sub	r2, fp, #40	; 0x28
   295f4:	str	r2, [r3, #-104]	; 0xffffff98
   295f8:	ldr	r3, [fp, #-112]	; 0xffffff90
   295fc:	add	r3, r3, #1
   29600:	lsl	r3, r3, #3
   29604:	sub	r2, fp, #12
   29608:	add	r3, r2, r3
   2960c:	mov	r2, #4
   29610:	str	r2, [r3, #-100]	; 0xffffff9c
   29614:	ldr	r3, [fp, #-112]	; 0xffffff90
   29618:	add	r3, r3, #1
   2961c:	str	r3, [fp, #-112]	; 0xffffff90
   29620:	ldr	r3, [fp, #-16]
   29624:	cmp	r3, #0
   29628:	beq	29680 <flatcc_builder_create_buffer@@Base+0x260>
   2962c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   29630:	ldr	r3, [fp, #-16]
   29634:	add	r3, r2, r3
   29638:	str	r3, [fp, #-116]	; 0xffffff8c
   2963c:	ldr	r3, [fp, #-112]	; 0xffffff90
   29640:	add	r3, r3, #1
   29644:	lsl	r3, r3, #3
   29648:	sub	r2, fp, #12
   2964c:	add	r3, r2, r3
   29650:	sub	r2, fp, #120	; 0x78
   29654:	str	r2, [r3, #-104]	; 0xffffff98
   29658:	ldr	r3, [fp, #-112]	; 0xffffff90
   2965c:	add	r3, r3, #1
   29660:	lsl	r3, r3, #3
   29664:	sub	r2, fp, #12
   29668:	add	r3, r2, r3
   2966c:	ldr	r2, [fp, #-16]
   29670:	str	r2, [r3, #-100]	; 0xffffff9c
   29674:	ldr	r3, [fp, #-112]	; 0xffffff90
   29678:	add	r3, r3, #1
   2967c:	str	r3, [fp, #-112]	; 0xffffff90
   29680:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29684:	cmp	r3, #0
   29688:	beq	296e4 <flatcc_builder_create_buffer@@Base+0x2c4>
   2968c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   29690:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29694:	add	r3, r2, r3
   29698:	str	r3, [fp, #-116]	; 0xffffff8c
   2969c:	ldr	r3, [fp, #-112]	; 0xffffff90
   296a0:	add	r3, r3, #1
   296a4:	lsl	r3, r3, #3
   296a8:	sub	r2, fp, #12
   296ac:	add	r3, r2, r3
   296b0:	ldr	r2, [pc, #308]	; 297ec <flatcc_builder_create_buffer@@Base+0x3cc>
   296b4:	ldr	r2, [r4, r2]
   296b8:	str	r2, [r3, #-104]	; 0xffffff98
   296bc:	ldr	r3, [fp, #-112]	; 0xffffff90
   296c0:	add	r3, r3, #1
   296c4:	lsl	r3, r3, #3
   296c8:	sub	r2, fp, #12
   296cc:	add	r3, r2, r3
   296d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   296d4:	str	r2, [r3, #-100]	; 0xffffff9c
   296d8:	ldr	r3, [fp, #-112]	; 0xffffff90
   296dc:	add	r3, r3, #1
   296e0:	str	r3, [fp, #-112]	; 0xffffff90
   296e4:	ldr	r3, [fp, #-128]	; 0xffffff80
   296e8:	ldr	r3, [r3, #136]	; 0x88
   296ec:	mov	r2, r3
   296f0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   296f4:	sub	r2, r2, r3
   296f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   296fc:	cmp	r3, #0
   29700:	bne	29710 <flatcc_builder_create_buffer@@Base+0x2f0>
   29704:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29708:	cmp	r3, #0
   2970c:	beq	29718 <flatcc_builder_create_buffer@@Base+0x2f8>
   29710:	mov	r3, #4
   29714:	b	2971c <flatcc_builder_create_buffer@@Base+0x2fc>
   29718:	mov	r3, #0
   2971c:	add	r3, r2, r3
   29720:	str	r3, [fp, #-32]	; 0xffffffe0
   29724:	ldr	r3, [fp, #-20]	; 0xffffffec
   29728:	cmp	r3, #0
   2972c:	beq	29758 <flatcc_builder_create_buffer@@Base+0x338>
   29730:	ldr	r3, [fp, #-128]	; 0xffffff80
   29734:	ldr	r3, [r3, #144]	; 0x90
   29738:	mov	r2, r3
   2973c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29740:	sub	r3, r2, r3
   29744:	mov	r0, r3
   29748:	bl	277c4 <main@@Base+0x524>
   2974c:	mov	r3, r0
   29750:	str	r3, [fp, #-44]	; 0xffffffd4
   29754:	b	2977c <flatcc_builder_create_buffer@@Base+0x35c>
   29758:	ldr	r3, [fp, #-128]	; 0xffffff80
   2975c:	ldr	r3, [r3, #140]	; 0x8c
   29760:	mov	r2, r3
   29764:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29768:	sub	r3, r2, r3
   2976c:	mov	r0, r3
   29770:	bl	277c4 <main@@Base+0x524>
   29774:	mov	r3, r0
   29778:	str	r3, [fp, #-44]	; 0xffffffd4
   2977c:	ldr	r2, [fp, #-140]	; 0xffffff74
   29780:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29784:	sub	r3, r2, r3
   29788:	mov	r0, r3
   2978c:	bl	277c4 <main@@Base+0x524>
   29790:	mov	r3, r0
   29794:	str	r3, [fp, #-40]	; 0xffffffd8
   29798:	sub	r3, fp, #116	; 0x74
   2979c:	mov	r1, r3
   297a0:	ldr	r0, [fp, #-128]	; 0xffffff80
   297a4:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   297a8:	str	r0, [fp, #-36]	; 0xffffffdc
   297ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   297b0:	cmp	r3, #0
   297b4:	bne	297d8 <flatcc_builder_create_buffer@@Base+0x3b8>
   297b8:	ldr	r3, [pc, #48]	; 297f0 <flatcc_builder_create_buffer@@Base+0x3d0>
   297bc:	add	r3, pc, r3
   297c0:	mov	r2, #772	; 0x304
   297c4:	ldr	r1, [pc, #40]	; 297f4 <flatcc_builder_create_buffer@@Base+0x3d4>
   297c8:	add	r1, pc, r1
   297cc:	ldr	r0, [pc, #36]	; 297f8 <flatcc_builder_create_buffer@@Base+0x3d8>
   297d0:	add	r0, pc, r0
   297d4:	bl	12a08 <__assert_fail@plt>
   297d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   297dc:	mov	r0, r3
   297e0:	sub	sp, fp, #8
   297e4:	pop	{r4, fp, pc}
   297e8:			; <UNDEFINED> instruction: 0x0001cbb8
   297ec:	andeq	r0, r0, r4, rrx
   297f0:	andeq	fp, r0, r0, asr #14
   297f4:	andeq	fp, r0, r8, ror #4
   297f8:	andeq	fp, r0, r0, asr #5

000297fc <flatcc_builder_create_struct@@Base>:
   297fc:	push	{r4, fp, lr}
   29800:	add	fp, sp, #8
   29804:	sub	sp, sp, #100	; 0x64
   29808:	str	r0, [fp, #-96]	; 0xffffffa0
   2980c:	str	r1, [fp, #-100]	; 0xffffff9c
   29810:	str	r2, [fp, #-104]	; 0xffffff98
   29814:	strh	r3, [fp, #-106]	; 0xffffff96
   29818:	ldr	r4, [pc, #328]	; 29968 <flatcc_builder_create_struct@@Base+0x16c>
   2981c:	add	r4, pc, r4
   29820:	ldrh	r3, [fp, #-106]	; 0xffffff96
   29824:	cmp	r3, #0
   29828:	bne	2984c <flatcc_builder_create_struct@@Base+0x50>
   2982c:	ldr	r3, [pc, #312]	; 2996c <flatcc_builder_create_struct@@Base+0x170>
   29830:	add	r3, pc, r3
   29834:	ldr	r2, [pc, #308]	; 29970 <flatcc_builder_create_struct@@Base+0x174>
   29838:	ldr	r1, [pc, #308]	; 29974 <flatcc_builder_create_struct@@Base+0x178>
   2983c:	add	r1, pc, r1
   29840:	ldr	r0, [pc, #304]	; 29978 <flatcc_builder_create_struct@@Base+0x17c>
   29844:	add	r0, pc, r0
   29848:	bl	12a08 <__assert_fail@plt>
   2984c:	ldrh	r3, [fp, #-106]	; 0xffffff96
   29850:	mov	r1, r3
   29854:	ldr	r0, [fp, #-96]	; 0xffffffa0
   29858:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   2985c:	ldrh	r3, [fp, #-106]	; 0xffffff96
   29860:	mov	r2, r3
   29864:	ldr	r1, [fp, #-104]	; 0xffffff98
   29868:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2986c:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   29870:	str	r0, [fp, #-16]
   29874:	mov	r3, #0
   29878:	str	r3, [fp, #-88]	; 0xffffffa8
   2987c:	mov	r3, #0
   29880:	str	r3, [fp, #-84]	; 0xffffffac
   29884:	ldr	r3, [fp, #-104]	; 0xffffff98
   29888:	cmp	r3, #0
   2988c:	beq	298e4 <flatcc_builder_create_struct@@Base+0xe8>
   29890:	ldr	r2, [fp, #-88]	; 0xffffffa8
   29894:	ldr	r3, [fp, #-104]	; 0xffffff98
   29898:	add	r3, r2, r3
   2989c:	str	r3, [fp, #-88]	; 0xffffffa8
   298a0:	ldr	r3, [fp, #-84]	; 0xffffffac
   298a4:	add	r3, r3, #1
   298a8:	lsl	r3, r3, #3
   298ac:	sub	r2, fp, #12
   298b0:	add	r3, r2, r3
   298b4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   298b8:	str	r2, [r3, #-76]	; 0xffffffb4
   298bc:	ldr	r3, [fp, #-84]	; 0xffffffac
   298c0:	add	r3, r3, #1
   298c4:	lsl	r3, r3, #3
   298c8:	sub	r2, fp, #12
   298cc:	add	r3, r2, r3
   298d0:	ldr	r2, [fp, #-104]	; 0xffffff98
   298d4:	str	r2, [r3, #-72]	; 0xffffffb8
   298d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   298dc:	add	r3, r3, #1
   298e0:	str	r3, [fp, #-84]	; 0xffffffac
   298e4:	ldr	r3, [fp, #-16]
   298e8:	cmp	r3, #0
   298ec:	beq	29948 <flatcc_builder_create_struct@@Base+0x14c>
   298f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   298f4:	ldr	r3, [fp, #-16]
   298f8:	add	r3, r2, r3
   298fc:	str	r3, [fp, #-88]	; 0xffffffa8
   29900:	ldr	r3, [fp, #-84]	; 0xffffffac
   29904:	add	r3, r3, #1
   29908:	lsl	r3, r3, #3
   2990c:	sub	r2, fp, #12
   29910:	add	r3, r2, r3
   29914:	ldr	r2, [pc, #96]	; 2997c <flatcc_builder_create_struct@@Base+0x180>
   29918:	ldr	r2, [r4, r2]
   2991c:	str	r2, [r3, #-76]	; 0xffffffb4
   29920:	ldr	r3, [fp, #-84]	; 0xffffffac
   29924:	add	r3, r3, #1
   29928:	lsl	r3, r3, #3
   2992c:	sub	r2, fp, #12
   29930:	add	r3, r2, r3
   29934:	ldr	r2, [fp, #-16]
   29938:	str	r2, [r3, #-72]	; 0xffffffb8
   2993c:	ldr	r3, [fp, #-84]	; 0xffffffac
   29940:	add	r3, r3, #1
   29944:	str	r3, [fp, #-84]	; 0xffffffac
   29948:	sub	r3, fp, #88	; 0x58
   2994c:	mov	r1, r3
   29950:	ldr	r0, [fp, #-96]	; 0xffffffa0
   29954:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   29958:	mov	r3, r0
   2995c:	mov	r0, r3
   29960:	sub	sp, fp, #8
   29964:	pop	{r4, fp, pc}
   29968:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   2996c:	andeq	fp, r0, ip, ror #13
   29970:	andeq	r0, r0, pc, lsl #6
   29974:	strdeq	fp, [r0], -r4
   29978:			; <UNDEFINED> instruction: 0x0000b2b0
   2997c:	andeq	r0, r0, r4, rrx

00029980 <flatcc_builder_start_buffer@@Base>:
   29980:	push	{r4, fp, lr}
   29984:	add	fp, sp, #8
   29988:	sub	sp, sp, #20
   2998c:	str	r0, [fp, #-16]
   29990:	str	r1, [fp, #-20]	; 0xffffffec
   29994:	str	r3, [fp, #-28]	; 0xffffffe4
   29998:	strh	r2, [fp, #-22]	; 0xffffffea
   2999c:	ldr	r4, [pc, #300]	; 29ad0 <flatcc_builder_start_buffer@@Base+0x150>
   299a0:	add	r4, pc, r4
   299a4:	ldr	r3, [fp, #-16]
   299a8:	ldrh	r3, [r3, #128]	; 0x80
   299ac:	mov	r1, r3
   299b0:	ldr	r0, [fp, #-16]
   299b4:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   299b8:	mov	r3, r0
   299bc:	cmp	r3, #0
   299c0:	beq	299cc <flatcc_builder_start_buffer@@Base+0x4c>
   299c4:	mvn	r3, #0
   299c8:	b	29ac4 <flatcc_builder_start_buffer@@Base+0x144>
   299cc:	ldr	r3, [fp, #-16]
   299d0:	mov	r2, #1
   299d4:	strh	r2, [r3, #128]	; 0x80
   299d8:	ldr	r3, [fp, #-16]
   299dc:	ldr	r3, [r3, #32]
   299e0:	ldr	r2, [fp, #-16]
   299e4:	ldrh	r2, [r2, #132]	; 0x84
   299e8:	strh	r2, [r3, #34]	; 0x22
   299ec:	ldr	r3, [fp, #-16]
   299f0:	ldrh	r2, [fp, #-22]	; 0xffffffea
   299f4:	strh	r2, [r3, #132]	; 0x84
   299f8:	ldr	r3, [fp, #-16]
   299fc:	ldr	r3, [r3, #32]
   29a00:	ldr	r2, [fp, #-16]
   29a04:	ldrh	r2, [r2, #164]	; 0xa4
   29a08:	strh	r2, [r3, #32]
   29a0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   29a10:	uxth	r2, r3
   29a14:	ldr	r3, [fp, #-16]
   29a18:	strh	r2, [r3, #164]	; 0xa4
   29a1c:	ldr	r3, [fp, #-16]
   29a20:	ldr	r3, [r3, #32]
   29a24:	ldr	r2, [fp, #-16]
   29a28:	ldr	r2, [r2, #144]	; 0x90
   29a2c:	str	r2, [r3, #20]
   29a30:	ldr	r3, [fp, #-16]
   29a34:	ldr	r3, [r3, #32]
   29a38:	ldr	r2, [fp, #-16]
   29a3c:	ldr	r2, [r2, #152]	; 0x98
   29a40:	str	r2, [r3, #28]
   29a44:	ldr	r3, [fp, #-16]
   29a48:	ldr	r2, [r3, #136]	; 0x88
   29a4c:	ldr	r3, [fp, #-16]
   29a50:	str	r2, [r3, #144]	; 0x90
   29a54:	ldr	r3, [fp, #-16]
   29a58:	ldr	r3, [r3, #148]	; 0x94
   29a5c:	add	r1, r3, #1
   29a60:	ldr	r2, [fp, #-16]
   29a64:	str	r1, [r2, #148]	; 0x94
   29a68:	ldr	r2, [fp, #-16]
   29a6c:	str	r3, [r2, #152]	; 0x98
   29a70:	ldr	r3, [fp, #-16]
   29a74:	ldr	r3, [r3, #32]
   29a78:	ldr	r2, [fp, #-16]
   29a7c:	ldr	r2, [r2, #168]	; 0xa8
   29a80:	str	r2, [r3, #16]
   29a84:	ldr	r3, [fp, #-16]
   29a88:	add	r2, r3, #168	; 0xa8
   29a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29a90:	cmp	r3, #0
   29a94:	beq	29aa0 <flatcc_builder_start_buffer@@Base+0x120>
   29a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   29a9c:	b	29aa8 <flatcc_builder_start_buffer@@Base+0x128>
   29aa0:	ldr	r3, [pc, #44]	; 29ad4 <flatcc_builder_start_buffer@@Base+0x154>
   29aa4:	ldr	r3, [r4, r3]
   29aa8:	ldr	r3, [r3]
   29aac:	str	r3, [r2]
   29ab0:	ldr	r3, [fp, #-16]
   29ab4:	ldr	r3, [r3, #32]
   29ab8:	mov	r2, #1
   29abc:	strh	r2, [r3, #14]
   29ac0:	mov	r3, #0
   29ac4:	mov	r0, r3
   29ac8:	sub	sp, fp, #8
   29acc:	pop	{r4, fp, pc}
   29ad0:	andeq	ip, r1, r8, asr r6
   29ad4:	andeq	r0, r0, r4, rrx

00029ad8 <flatcc_builder_end_buffer@@Base>:
   29ad8:	push	{fp, lr}
   29adc:	add	fp, sp, #4
   29ae0:	sub	sp, sp, #24
   29ae4:	str	r0, [fp, #-16]
   29ae8:	str	r1, [fp, #-20]	; 0xffffffec
   29aec:	ldr	r3, [fp, #-16]
   29af0:	ldrh	r3, [r3, #164]	; 0xa4
   29af4:	and	r3, r3, #2
   29af8:	str	r3, [fp, #-8]
   29afc:	ldr	r3, [fp, #-16]
   29b00:	ldr	r3, [r3, #152]	; 0x98
   29b04:	cmp	r3, #0
   29b08:	movne	r3, #1
   29b0c:	moveq	r3, #0
   29b10:	uxtb	r3, r3
   29b14:	mov	r2, r3
   29b18:	ldr	r3, [fp, #-8]
   29b1c:	orr	r3, r3, r2
   29b20:	str	r3, [fp, #-8]
   29b24:	ldr	r3, [fp, #-16]
   29b28:	ldr	r3, [r3, #32]
   29b2c:	ldrh	r3, [r3, #14]
   29b30:	cmp	r3, #1
   29b34:	beq	29b58 <flatcc_builder_end_buffer@@Base+0x80>
   29b38:	ldr	r3, [pc, #224]	; 29c20 <flatcc_builder_end_buffer@@Base+0x148>
   29b3c:	add	r3, pc, r3
   29b40:	ldr	r2, [pc, #220]	; 29c24 <flatcc_builder_end_buffer@@Base+0x14c>
   29b44:	ldr	r1, [pc, #220]	; 29c28 <flatcc_builder_end_buffer@@Base+0x150>
   29b48:	add	r1, pc, r1
   29b4c:	ldr	r0, [pc, #216]	; 29c2c <flatcc_builder_end_buffer@@Base+0x154>
   29b50:	add	r0, pc, r0
   29b54:	bl	12a08 <__assert_fail@plt>
   29b58:	ldr	r3, [fp, #-16]
   29b5c:	ldrh	r3, [r3, #132]	; 0x84
   29b60:	mov	r1, r3
   29b64:	ldr	r0, [fp, #-16]
   29b68:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   29b6c:	ldr	r3, [fp, #-16]
   29b70:	add	r1, r3, #168	; 0xa8
   29b74:	ldr	r3, [fp, #-16]
   29b78:	ldrh	r0, [r3, #132]	; 0x84
   29b7c:	ldr	r3, [fp, #-16]
   29b80:	ldrh	r3, [r3, #128]	; 0x80
   29b84:	ldr	r2, [fp, #-8]
   29b88:	str	r2, [sp, #4]
   29b8c:	str	r3, [sp]
   29b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   29b94:	mov	r2, r0
   29b98:	ldr	r0, [fp, #-16]
   29b9c:	bl	29420 <flatcc_builder_create_buffer@@Base>
   29ba0:	str	r0, [fp, #-12]
   29ba4:	ldr	r3, [fp, #-12]
   29ba8:	cmp	r3, #0
   29bac:	bne	29bb8 <flatcc_builder_end_buffer@@Base+0xe0>
   29bb0:	mov	r3, #0
   29bb4:	b	29c14 <flatcc_builder_end_buffer@@Base+0x13c>
   29bb8:	ldr	r3, [fp, #-16]
   29bbc:	ldr	r3, [r3, #32]
   29bc0:	ldr	r2, [r3, #20]
   29bc4:	ldr	r3, [fp, #-16]
   29bc8:	str	r2, [r3, #144]	; 0x90
   29bcc:	ldr	r3, [fp, #-16]
   29bd0:	ldr	r3, [r3, #32]
   29bd4:	ldr	r2, [r3, #28]
   29bd8:	ldr	r3, [fp, #-16]
   29bdc:	str	r2, [r3, #152]	; 0x98
   29be0:	ldr	r3, [fp, #-16]
   29be4:	ldr	r3, [r3, #32]
   29be8:	ldr	r2, [r3, #16]
   29bec:	ldr	r3, [fp, #-16]
   29bf0:	str	r2, [r3, #168]	; 0xa8
   29bf4:	ldr	r3, [fp, #-16]
   29bf8:	ldr	r3, [r3, #32]
   29bfc:	ldrh	r2, [r3, #32]
   29c00:	ldr	r3, [fp, #-16]
   29c04:	strh	r2, [r3, #164]	; 0xa4
   29c08:	ldr	r0, [fp, #-16]
   29c0c:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   29c10:	ldr	r3, [fp, #-12]
   29c14:	mov	r0, r3
   29c18:	sub	sp, fp, #4
   29c1c:	pop	{fp, pc}
   29c20:	andeq	fp, r0, r0, lsl #8
   29c24:	andeq	r0, r0, r6, asr #6
   29c28:	andeq	sl, r0, r8, ror #29
   29c2c:			; <UNDEFINED> instruction: 0x0000afb0

00029c30 <flatcc_builder_start_struct@@Base>:
   29c30:	push	{fp, lr}
   29c34:	add	fp, sp, #4
   29c38:	sub	sp, sp, #16
   29c3c:	str	r0, [fp, #-8]
   29c40:	str	r1, [fp, #-12]
   29c44:	mov	r3, r2
   29c48:	strh	r3, [fp, #-14]
   29c4c:	ldrh	r3, [fp, #-14]
   29c50:	mov	r1, r3
   29c54:	ldr	r0, [fp, #-8]
   29c58:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   29c5c:	mov	r3, r0
   29c60:	cmp	r3, #0
   29c64:	beq	29c70 <flatcc_builder_start_struct@@Base+0x40>
   29c68:	mov	r3, #0
   29c6c:	b	29c9c <flatcc_builder_start_struct@@Base+0x6c>
   29c70:	ldr	r3, [fp, #-8]
   29c74:	ldr	r3, [r3, #32]
   29c78:	mov	r2, #2
   29c7c:	strh	r2, [r3, #14]
   29c80:	mvn	r1, #3
   29c84:	ldr	r0, [fp, #-8]
   29c88:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   29c8c:	ldr	r1, [fp, #-12]
   29c90:	ldr	r0, [fp, #-8]
   29c94:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   29c98:	mov	r3, r0
   29c9c:	mov	r0, r3
   29ca0:	sub	sp, fp, #4
   29ca4:	pop	{fp, pc}

00029ca8 <flatcc_builder_struct_edit@@Base>:
   29ca8:	push	{fp}		; (str fp, [sp, #-4]!)
   29cac:	add	fp, sp, #0
   29cb0:	sub	sp, sp, #12
   29cb4:	str	r0, [fp, #-8]
   29cb8:	ldr	r3, [fp, #-8]
   29cbc:	ldr	r3, [r3, #16]
   29cc0:	mov	r0, r3
   29cc4:	add	sp, fp, #0
   29cc8:	pop	{fp}		; (ldr fp, [sp], #4)
   29ccc:	bx	lr

00029cd0 <flatcc_builder_end_struct@@Base>:
   29cd0:	push	{fp, lr}
   29cd4:	add	fp, sp, #4
   29cd8:	sub	sp, sp, #16
   29cdc:	str	r0, [fp, #-16]
   29ce0:	ldr	r3, [fp, #-16]
   29ce4:	ldr	r3, [r3, #32]
   29ce8:	ldrh	r3, [r3, #14]
   29cec:	cmp	r3, #2
   29cf0:	beq	29d14 <flatcc_builder_end_struct@@Base+0x44>
   29cf4:	ldr	r3, [pc, #104]	; 29d64 <flatcc_builder_end_struct@@Base+0x94>
   29cf8:	add	r3, pc, r3
   29cfc:	mov	r2, #872	; 0x368
   29d00:	ldr	r1, [pc, #96]	; 29d68 <flatcc_builder_end_struct@@Base+0x98>
   29d04:	add	r1, pc, r1
   29d08:	ldr	r0, [pc, #92]	; 29d6c <flatcc_builder_end_struct@@Base+0x9c>
   29d0c:	add	r0, pc, r0
   29d10:	bl	12a08 <__assert_fail@plt>
   29d14:	ldr	r3, [fp, #-16]
   29d18:	ldr	r1, [r3, #16]
   29d1c:	ldr	r3, [fp, #-16]
   29d20:	ldr	r2, [r3, #20]
   29d24:	ldr	r3, [fp, #-16]
   29d28:	ldrh	r3, [r3, #130]	; 0x82
   29d2c:	ldr	r0, [fp, #-16]
   29d30:	bl	297fc <flatcc_builder_create_struct@@Base>
   29d34:	str	r0, [fp, #-8]
   29d38:	ldr	r3, [fp, #-8]
   29d3c:	cmp	r3, #0
   29d40:	bne	29d4c <flatcc_builder_end_struct@@Base+0x7c>
   29d44:	mov	r3, #0
   29d48:	b	29d58 <flatcc_builder_end_struct@@Base+0x88>
   29d4c:	ldr	r0, [fp, #-16]
   29d50:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   29d54:	ldr	r3, [fp, #-8]
   29d58:	mov	r0, r3
   29d5c:	sub	sp, fp, #4
   29d60:	pop	{fp, pc}
   29d64:	andeq	fp, r0, r0, ror #4
   29d68:	andeq	sl, r0, ip, lsr #26
   29d6c:	andeq	sl, r0, r0, lsr #28
   29d70:	push	{fp, lr}
   29d74:	add	fp, sp, #4
   29d78:	sub	sp, sp, #24
   29d7c:	str	r0, [fp, #-16]
   29d80:	str	r1, [fp, #-20]	; 0xffffffec
   29d84:	str	r2, [fp, #-24]	; 0xffffffe8
   29d88:	ldr	r3, [fp, #-16]
   29d8c:	ldr	r3, [r3, #32]
   29d90:	ldr	r3, [r3, #20]
   29d94:	str	r3, [fp, #-8]
   29d98:	ldr	r2, [fp, #-8]
   29d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   29da0:	add	r3, r2, r3
   29da4:	str	r3, [fp, #-12]
   29da8:	ldr	r2, [fp, #-8]
   29dac:	ldr	r3, [fp, #-12]
   29db0:	cmp	r2, r3
   29db4:	bhi	29dc8 <flatcc_builder_end_struct@@Base+0xf8>
   29db8:	ldr	r2, [fp, #-12]
   29dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29dc0:	cmp	r2, r3
   29dc4:	bls	29e10 <flatcc_builder_end_struct@@Base+0x140>
   29dc8:	ldr	r2, [fp, #-8]
   29dcc:	ldr	r3, [fp, #-12]
   29dd0:	cmp	r2, r3
   29dd4:	bhi	29de8 <flatcc_builder_end_struct@@Base+0x118>
   29dd8:	ldr	r2, [fp, #-12]
   29ddc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   29de0:	cmp	r2, r3
   29de4:	bls	29e08 <flatcc_builder_end_struct@@Base+0x138>
   29de8:	ldr	r3, [pc, #64]	; 29e30 <flatcc_builder_end_struct@@Base+0x160>
   29dec:	add	r3, pc, r3
   29df0:	mov	r2, #892	; 0x37c
   29df4:	ldr	r1, [pc, #56]	; 29e34 <flatcc_builder_end_struct@@Base+0x164>
   29df8:	add	r1, pc, r1
   29dfc:	ldr	r0, [pc, #52]	; 29e38 <flatcc_builder_end_struct@@Base+0x168>
   29e00:	add	r0, pc, r0
   29e04:	bl	12a08 <__assert_fail@plt>
   29e08:	mvn	r3, #0
   29e0c:	b	29e24 <flatcc_builder_end_struct@@Base+0x154>
   29e10:	ldr	r3, [fp, #-16]
   29e14:	ldr	r3, [r3, #32]
   29e18:	ldr	r2, [fp, #-12]
   29e1c:	str	r2, [r3, #20]
   29e20:	mov	r3, #0
   29e24:	mov	r0, r3
   29e28:	sub	sp, fp, #4
   29e2c:	pop	{fp, pc}
   29e30:	andeq	fp, r0, r8, lsl #3
   29e34:	andeq	sl, r0, r8, lsr ip
   29e38:	andeq	sl, r0, r8, asr sp

00029e3c <flatcc_builder_extend_vector@@Base>:
   29e3c:	push	{fp, lr}
   29e40:	add	fp, sp, #4
   29e44:	sub	sp, sp, #8
   29e48:	str	r0, [fp, #-8]
   29e4c:	str	r1, [fp, #-12]
   29e50:	ldr	r3, [fp, #-8]
   29e54:	ldr	r3, [r3, #32]
   29e58:	ldr	r3, [r3, #24]
   29e5c:	mov	r2, r3
   29e60:	ldr	r1, [fp, #-12]
   29e64:	ldr	r0, [fp, #-8]
   29e68:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   29e6c:	mov	r3, r0
   29e70:	cmp	r3, #0
   29e74:	beq	29e80 <flatcc_builder_extend_vector@@Base+0x44>
   29e78:	mov	r3, #0
   29e7c:	b	29ea4 <flatcc_builder_extend_vector@@Base+0x68>
   29e80:	ldr	r3, [fp, #-8]
   29e84:	ldr	r3, [r3, #32]
   29e88:	ldr	r3, [r3, #16]
   29e8c:	ldr	r2, [fp, #-12]
   29e90:	mul	r3, r2, r3
   29e94:	mov	r1, r3
   29e98:	ldr	r0, [fp, #-8]
   29e9c:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   29ea0:	mov	r3, r0
   29ea4:	mov	r0, r3
   29ea8:	sub	sp, fp, #4
   29eac:	pop	{fp, pc}

00029eb0 <flatcc_builder_vector_push@@Base>:
   29eb0:	push	{fp, lr}
   29eb4:	add	fp, sp, #4
   29eb8:	sub	sp, sp, #8
   29ebc:	str	r0, [fp, #-8]
   29ec0:	str	r1, [fp, #-12]
   29ec4:	ldr	r3, [fp, #-8]
   29ec8:	ldr	r3, [r3, #32]
   29ecc:	ldrh	r3, [r3, #14]
   29ed0:	cmp	r3, #4
   29ed4:	beq	29ef8 <flatcc_builder_vector_push@@Base+0x48>
   29ed8:	ldr	r3, [pc, #200]	; 29fa8 <flatcc_builder_vector_push@@Base+0xf8>
   29edc:	add	r3, pc, r3
   29ee0:	ldr	r2, [pc, #196]	; 29fac <flatcc_builder_vector_push@@Base+0xfc>
   29ee4:	ldr	r1, [pc, #196]	; 29fb0 <flatcc_builder_vector_push@@Base+0x100>
   29ee8:	add	r1, pc, r1
   29eec:	ldr	r0, [pc, #192]	; 29fb4 <flatcc_builder_vector_push@@Base+0x104>
   29ef0:	add	r0, pc, r0
   29ef4:	bl	12a08 <__assert_fail@plt>
   29ef8:	ldr	r3, [fp, #-8]
   29efc:	ldr	r3, [r3, #32]
   29f00:	ldr	r2, [r3, #20]
   29f04:	ldr	r3, [fp, #-8]
   29f08:	ldr	r3, [r3, #32]
   29f0c:	ldr	r3, [r3, #24]
   29f10:	cmp	r2, r3
   29f14:	bls	29f60 <flatcc_builder_vector_push@@Base+0xb0>
   29f18:	ldr	r3, [fp, #-8]
   29f1c:	ldr	r3, [r3, #32]
   29f20:	ldr	r2, [r3, #20]
   29f24:	ldr	r3, [fp, #-8]
   29f28:	ldr	r3, [r3, #32]
   29f2c:	ldr	r3, [r3, #24]
   29f30:	cmp	r2, r3
   29f34:	bls	29f58 <flatcc_builder_vector_push@@Base+0xa8>
   29f38:	ldr	r3, [pc, #120]	; 29fb8 <flatcc_builder_vector_push@@Base+0x108>
   29f3c:	add	r3, pc, r3
   29f40:	mov	r2, #908	; 0x38c
   29f44:	ldr	r1, [pc, #112]	; 29fbc <flatcc_builder_vector_push@@Base+0x10c>
   29f48:	add	r1, pc, r1
   29f4c:	ldr	r0, [pc, #108]	; 29fc0 <flatcc_builder_vector_push@@Base+0x110>
   29f50:	add	r0, pc, r0
   29f54:	bl	12a08 <__assert_fail@plt>
   29f58:	mov	r3, #0
   29f5c:	b	29f9c <flatcc_builder_vector_push@@Base+0xec>
   29f60:	ldr	r3, [fp, #-8]
   29f64:	ldr	r3, [r3, #32]
   29f68:	ldr	r2, [fp, #-8]
   29f6c:	ldr	r2, [r2, #32]
   29f70:	ldr	r2, [r2, #20]
   29f74:	add	r2, r2, #1
   29f78:	str	r2, [r3, #20]
   29f7c:	ldr	r3, [fp, #-8]
   29f80:	ldr	r3, [r3, #32]
   29f84:	ldr	r3, [r3, #16]
   29f88:	mov	r2, r3
   29f8c:	ldr	r1, [fp, #-12]
   29f90:	ldr	r0, [fp, #-8]
   29f94:	bl	27cf0 <flatcc_builder_default_alloc@@Base+0x3e8>
   29f98:	mov	r3, r0
   29f9c:	mov	r0, r3
   29fa0:	sub	sp, fp, #4
   29fa4:	pop	{fp, pc}
   29fa8:	andeq	fp, r0, ip, lsr #1
   29fac:	andeq	r0, r0, fp, lsl #7
   29fb0:	andeq	sl, r0, r8, asr #22
   29fb4:	andeq	sl, r0, r4, lsl #25
   29fb8:	andeq	fp, r0, ip, asr #32
   29fbc:	andeq	sl, r0, r8, ror #21
   29fc0:	andeq	sl, r0, r0, asr ip

00029fc4 <flatcc_builder_append_vector@@Base>:
   29fc4:	push	{fp, lr}
   29fc8:	add	fp, sp, #4
   29fcc:	sub	sp, sp, #16
   29fd0:	str	r0, [fp, #-8]
   29fd4:	str	r1, [fp, #-12]
   29fd8:	str	r2, [fp, #-16]
   29fdc:	ldr	r3, [fp, #-8]
   29fe0:	ldr	r3, [r3, #32]
   29fe4:	ldrh	r3, [r3, #14]
   29fe8:	cmp	r3, #4
   29fec:	beq	2a010 <flatcc_builder_append_vector@@Base+0x4c>
   29ff0:	ldr	r3, [pc, #124]	; 2a074 <flatcc_builder_append_vector@@Base+0xb0>
   29ff4:	add	r3, pc, r3
   29ff8:	ldr	r2, [pc, #120]	; 2a078 <flatcc_builder_append_vector@@Base+0xb4>
   29ffc:	ldr	r1, [pc, #120]	; 2a07c <flatcc_builder_append_vector@@Base+0xb8>
   2a000:	add	r1, pc, r1
   2a004:	ldr	r0, [pc, #116]	; 2a080 <flatcc_builder_append_vector@@Base+0xbc>
   2a008:	add	r0, pc, r0
   2a00c:	bl	12a08 <__assert_fail@plt>
   2a010:	ldr	r3, [fp, #-8]
   2a014:	ldr	r3, [r3, #32]
   2a018:	ldr	r3, [r3, #24]
   2a01c:	mov	r2, r3
   2a020:	ldr	r1, [fp, #-16]
   2a024:	ldr	r0, [fp, #-8]
   2a028:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2a02c:	mov	r3, r0
   2a030:	cmp	r3, #0
   2a034:	beq	2a040 <flatcc_builder_append_vector@@Base+0x7c>
   2a038:	mov	r3, #0
   2a03c:	b	2a068 <flatcc_builder_append_vector@@Base+0xa4>
   2a040:	ldr	r3, [fp, #-8]
   2a044:	ldr	r3, [r3, #32]
   2a048:	ldr	r3, [r3, #16]
   2a04c:	ldr	r2, [fp, #-16]
   2a050:	mul	r3, r2, r3
   2a054:	mov	r2, r3
   2a058:	ldr	r1, [fp, #-12]
   2a05c:	ldr	r0, [fp, #-8]
   2a060:	bl	27cf0 <flatcc_builder_default_alloc@@Base+0x3e8>
   2a064:	mov	r3, r0
   2a068:	mov	r0, r3
   2a06c:	sub	sp, fp, #4
   2a070:	pop	{fp, pc}
   2a074:			; <UNDEFINED> instruction: 0x0000afb0
   2a078:	muleq	r0, r3, r3
   2a07c:	andeq	sl, r0, r0, lsr sl
   2a080:	andeq	sl, r0, ip, ror #22

0002a084 <flatcc_builder_extend_offset_vector@@Base>:
   2a084:	push	{fp, lr}
   2a088:	add	fp, sp, #4
   2a08c:	sub	sp, sp, #8
   2a090:	str	r0, [fp, #-8]
   2a094:	str	r1, [fp, #-12]
   2a098:	mvn	r2, #-1073741824	; 0xc0000000
   2a09c:	ldr	r1, [fp, #-12]
   2a0a0:	ldr	r0, [fp, #-8]
   2a0a4:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2a0a8:	mov	r3, r0
   2a0ac:	cmp	r3, #0
   2a0b0:	beq	2a0bc <flatcc_builder_extend_offset_vector@@Base+0x38>
   2a0b4:	mov	r3, #0
   2a0b8:	b	2a0d4 <flatcc_builder_extend_offset_vector@@Base+0x50>
   2a0bc:	ldr	r3, [fp, #-12]
   2a0c0:	lsl	r3, r3, #2
   2a0c4:	mov	r1, r3
   2a0c8:	ldr	r0, [fp, #-8]
   2a0cc:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2a0d0:	mov	r3, r0
   2a0d4:	mov	r0, r3
   2a0d8:	sub	sp, fp, #4
   2a0dc:	pop	{fp, pc}

0002a0e0 <flatcc_builder_offset_vector_push@@Base>:
   2a0e0:	push	{fp, lr}
   2a0e4:	add	fp, sp, #4
   2a0e8:	sub	sp, sp, #16
   2a0ec:	str	r0, [fp, #-16]
   2a0f0:	str	r1, [fp, #-20]	; 0xffffffec
   2a0f4:	ldr	r3, [fp, #-16]
   2a0f8:	ldr	r3, [r3, #32]
   2a0fc:	ldrh	r3, [r3, #14]
   2a100:	cmp	r3, #5
   2a104:	beq	2a128 <flatcc_builder_offset_vector_push@@Base+0x48>
   2a108:	ldr	r3, [pc, #144]	; 2a1a0 <flatcc_builder_offset_vector_push@@Base+0xc0>
   2a10c:	add	r3, pc, r3
   2a110:	ldr	r2, [pc, #140]	; 2a1a4 <flatcc_builder_offset_vector_push@@Base+0xc4>
   2a114:	ldr	r1, [pc, #140]	; 2a1a8 <flatcc_builder_offset_vector_push@@Base+0xc8>
   2a118:	add	r1, pc, r1
   2a11c:	ldr	r0, [pc, #136]	; 2a1ac <flatcc_builder_offset_vector_push@@Base+0xcc>
   2a120:	add	r0, pc, r0
   2a124:	bl	12a08 <__assert_fail@plt>
   2a128:	ldr	r3, [fp, #-16]
   2a12c:	ldr	r3, [r3, #32]
   2a130:	ldr	r3, [r3, #20]
   2a134:	cmn	r3, #-1073741823	; 0xc0000001
   2a138:	bne	2a144 <flatcc_builder_offset_vector_push@@Base+0x64>
   2a13c:	mov	r3, #0
   2a140:	b	2a194 <flatcc_builder_offset_vector_push@@Base+0xb4>
   2a144:	ldr	r3, [fp, #-16]
   2a148:	ldr	r3, [r3, #32]
   2a14c:	ldr	r2, [fp, #-16]
   2a150:	ldr	r2, [r2, #32]
   2a154:	ldr	r2, [r2, #20]
   2a158:	add	r2, r2, #1
   2a15c:	str	r2, [r3, #20]
   2a160:	mov	r1, #4
   2a164:	ldr	r0, [fp, #-16]
   2a168:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2a16c:	str	r0, [fp, #-8]
   2a170:	ldr	r3, [fp, #-8]
   2a174:	cmp	r3, #0
   2a178:	bne	2a184 <flatcc_builder_offset_vector_push@@Base+0xa4>
   2a17c:	mov	r3, #0
   2a180:	b	2a194 <flatcc_builder_offset_vector_push@@Base+0xb4>
   2a184:	ldr	r3, [fp, #-8]
   2a188:	ldr	r2, [fp, #-20]	; 0xffffffec
   2a18c:	str	r2, [r3]
   2a190:	ldr	r3, [fp, #-8]
   2a194:	mov	r0, r3
   2a198:	sub	sp, fp, #4
   2a19c:	pop	{fp, pc}
   2a1a0:			; <UNDEFINED> instruction: 0x0000aeb8
   2a1a4:	andeq	r0, r0, r6, lsr #7
   2a1a8:	andeq	sl, r0, r8, lsl r9
   2a1ac:	andeq	sl, r0, r0, asr #21

0002a1b0 <flatcc_builder_append_offset_vector@@Base>:
   2a1b0:	push	{fp, lr}
   2a1b4:	add	fp, sp, #4
   2a1b8:	sub	sp, sp, #16
   2a1bc:	str	r0, [fp, #-8]
   2a1c0:	str	r1, [fp, #-12]
   2a1c4:	str	r2, [fp, #-16]
   2a1c8:	ldr	r3, [fp, #-8]
   2a1cc:	ldr	r3, [r3, #32]
   2a1d0:	ldrh	r3, [r3, #14]
   2a1d4:	cmp	r3, #5
   2a1d8:	beq	2a1fc <flatcc_builder_append_offset_vector@@Base+0x4c>
   2a1dc:	ldr	r3, [pc, #100]	; 2a248 <flatcc_builder_append_offset_vector@@Base+0x98>
   2a1e0:	add	r3, pc, r3
   2a1e4:	mov	r2, #948	; 0x3b4
   2a1e8:	ldr	r1, [pc, #92]	; 2a24c <flatcc_builder_append_offset_vector@@Base+0x9c>
   2a1ec:	add	r1, pc, r1
   2a1f0:	ldr	r0, [pc, #88]	; 2a250 <flatcc_builder_append_offset_vector@@Base+0xa0>
   2a1f4:	add	r0, pc, r0
   2a1f8:	bl	12a08 <__assert_fail@plt>
   2a1fc:	mvn	r2, #-1073741824	; 0xc0000000
   2a200:	ldr	r1, [fp, #-16]
   2a204:	ldr	r0, [fp, #-8]
   2a208:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2a20c:	mov	r3, r0
   2a210:	cmp	r3, #0
   2a214:	beq	2a220 <flatcc_builder_append_offset_vector@@Base+0x70>
   2a218:	mov	r3, #0
   2a21c:	b	2a23c <flatcc_builder_append_offset_vector@@Base+0x8c>
   2a220:	ldr	r3, [fp, #-16]
   2a224:	lsl	r3, r3, #2
   2a228:	mov	r2, r3
   2a22c:	ldr	r1, [fp, #-12]
   2a230:	ldr	r0, [fp, #-8]
   2a234:	bl	27cf0 <flatcc_builder_default_alloc@@Base+0x3e8>
   2a238:	mov	r3, r0
   2a23c:	mov	r0, r3
   2a240:	sub	sp, fp, #4
   2a244:	pop	{fp, pc}
   2a248:	andeq	sl, r0, r8, lsl #28
   2a24c:	andeq	sl, r0, r4, asr #16
   2a250:	andeq	sl, r0, ip, ror #19

0002a254 <flatcc_builder_extend_string@@Base>:
   2a254:	push	{fp, lr}
   2a258:	add	fp, sp, #4
   2a25c:	sub	sp, sp, #8
   2a260:	str	r0, [fp, #-8]
   2a264:	str	r1, [fp, #-12]
   2a268:	ldr	r3, [fp, #-8]
   2a26c:	ldr	r3, [r3, #32]
   2a270:	ldrh	r3, [r3, #14]
   2a274:	cmp	r3, #6
   2a278:	beq	2a29c <flatcc_builder_extend_string@@Base+0x48>
   2a27c:	ldr	r3, [pc, #88]	; 2a2dc <flatcc_builder_extend_string@@Base+0x88>
   2a280:	add	r3, pc, r3
   2a284:	ldr	r2, [pc, #84]	; 2a2e0 <flatcc_builder_extend_string@@Base+0x8c>
   2a288:	ldr	r1, [pc, #84]	; 2a2e4 <flatcc_builder_extend_string@@Base+0x90>
   2a28c:	add	r1, pc, r1
   2a290:	ldr	r0, [pc, #80]	; 2a2e8 <flatcc_builder_extend_string@@Base+0x94>
   2a294:	add	r0, pc, r0
   2a298:	bl	12a08 <__assert_fail@plt>
   2a29c:	mvn	r2, #0
   2a2a0:	ldr	r1, [fp, #-12]
   2a2a4:	ldr	r0, [fp, #-8]
   2a2a8:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2a2ac:	mov	r3, r0
   2a2b0:	cmp	r3, #0
   2a2b4:	beq	2a2c0 <flatcc_builder_extend_string@@Base+0x6c>
   2a2b8:	mov	r3, #0
   2a2bc:	b	2a2d0 <flatcc_builder_extend_string@@Base+0x7c>
   2a2c0:	ldr	r1, [fp, #-12]
   2a2c4:	ldr	r0, [fp, #-8]
   2a2c8:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2a2cc:	mov	r3, r0
   2a2d0:	mov	r0, r3
   2a2d4:	sub	sp, fp, #4
   2a2d8:	pop	{fp, pc}
   2a2dc:	andeq	sl, r0, ip, lsl #27
   2a2e0:			; <UNDEFINED> instruction: 0x000003bd
   2a2e4:	andeq	sl, r0, r4, lsr #15
   2a2e8:	andeq	sl, r0, r0, lsl #19

0002a2ec <flatcc_builder_append_string@@Base>:
   2a2ec:	push	{fp, lr}
   2a2f0:	add	fp, sp, #4
   2a2f4:	sub	sp, sp, #16
   2a2f8:	str	r0, [fp, #-8]
   2a2fc:	str	r1, [fp, #-12]
   2a300:	str	r2, [fp, #-16]
   2a304:	ldr	r3, [fp, #-8]
   2a308:	ldr	r3, [r3, #32]
   2a30c:	ldrh	r3, [r3, #14]
   2a310:	cmp	r3, #6
   2a314:	beq	2a338 <flatcc_builder_append_string@@Base+0x4c>
   2a318:	ldr	r3, [pc, #92]	; 2a37c <flatcc_builder_append_string@@Base+0x90>
   2a31c:	add	r3, pc, r3
   2a320:	ldr	r2, [pc, #88]	; 2a380 <flatcc_builder_append_string@@Base+0x94>
   2a324:	ldr	r1, [pc, #88]	; 2a384 <flatcc_builder_append_string@@Base+0x98>
   2a328:	add	r1, pc, r1
   2a32c:	ldr	r0, [pc, #84]	; 2a388 <flatcc_builder_append_string@@Base+0x9c>
   2a330:	add	r0, pc, r0
   2a334:	bl	12a08 <__assert_fail@plt>
   2a338:	mvn	r2, #0
   2a33c:	ldr	r1, [fp, #-16]
   2a340:	ldr	r0, [fp, #-8]
   2a344:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2a348:	mov	r3, r0
   2a34c:	cmp	r3, #0
   2a350:	beq	2a35c <flatcc_builder_append_string@@Base+0x70>
   2a354:	mov	r3, #0
   2a358:	b	2a370 <flatcc_builder_append_string@@Base+0x84>
   2a35c:	ldr	r2, [fp, #-16]
   2a360:	ldr	r1, [fp, #-12]
   2a364:	ldr	r0, [fp, #-8]
   2a368:	bl	27cf0 <flatcc_builder_default_alloc@@Base+0x3e8>
   2a36c:	mov	r3, r0
   2a370:	mov	r0, r3
   2a374:	sub	sp, fp, #4
   2a378:	pop	{fp, pc}
   2a37c:	andeq	sl, r0, r0, lsl sp
   2a380:	andeq	r0, r0, r6, asr #7
   2a384:	andeq	sl, r0, r8, lsl #14
   2a388:	andeq	sl, r0, r4, ror #17

0002a38c <flatcc_builder_append_string_str@@Base>:
   2a38c:	push	{fp, lr}
   2a390:	add	fp, sp, #4
   2a394:	sub	sp, sp, #8
   2a398:	str	r0, [fp, #-8]
   2a39c:	str	r1, [fp, #-12]
   2a3a0:	ldr	r0, [fp, #-12]
   2a3a4:	bl	1299c <strlen@plt>
   2a3a8:	mov	r3, r0
   2a3ac:	mov	r2, r3
   2a3b0:	ldr	r1, [fp, #-12]
   2a3b4:	ldr	r0, [fp, #-8]
   2a3b8:	bl	2a2ec <flatcc_builder_append_string@@Base>
   2a3bc:	mov	r3, r0
   2a3c0:	mov	r0, r3
   2a3c4:	sub	sp, fp, #4
   2a3c8:	pop	{fp, pc}

0002a3cc <flatcc_builder_append_string_strn@@Base>:
   2a3cc:	push	{fp, lr}
   2a3d0:	add	fp, sp, #4
   2a3d4:	sub	sp, sp, #16
   2a3d8:	str	r0, [fp, #-8]
   2a3dc:	str	r1, [fp, #-12]
   2a3e0:	str	r2, [fp, #-16]
   2a3e4:	ldr	r1, [fp, #-16]
   2a3e8:	ldr	r0, [fp, #-12]
   2a3ec:	bl	278b4 <main@@Base+0x614>
   2a3f0:	mov	r3, r0
   2a3f4:	mov	r2, r3
   2a3f8:	ldr	r1, [fp, #-12]
   2a3fc:	ldr	r0, [fp, #-8]
   2a400:	bl	2a2ec <flatcc_builder_append_string@@Base>
   2a404:	mov	r3, r0
   2a408:	mov	r0, r3
   2a40c:	sub	sp, fp, #4
   2a410:	pop	{fp, pc}

0002a414 <flatcc_builder_truncate_vector@@Base>:
   2a414:	push	{fp, lr}
   2a418:	add	fp, sp, #4
   2a41c:	sub	sp, sp, #8
   2a420:	str	r0, [fp, #-8]
   2a424:	str	r1, [fp, #-12]
   2a428:	ldr	r3, [fp, #-8]
   2a42c:	ldr	r3, [r3, #32]
   2a430:	ldrh	r3, [r3, #14]
   2a434:	cmp	r3, #4
   2a438:	beq	2a45c <flatcc_builder_truncate_vector@@Base+0x48>
   2a43c:	ldr	r3, [pc, #192]	; 2a504 <flatcc_builder_truncate_vector@@Base+0xf0>
   2a440:	add	r3, pc, r3
   2a444:	ldr	r2, [pc, #188]	; 2a508 <flatcc_builder_truncate_vector@@Base+0xf4>
   2a448:	ldr	r1, [pc, #188]	; 2a50c <flatcc_builder_truncate_vector@@Base+0xf8>
   2a44c:	add	r1, pc, r1
   2a450:	ldr	r0, [pc, #184]	; 2a510 <flatcc_builder_truncate_vector@@Base+0xfc>
   2a454:	add	r0, pc, r0
   2a458:	bl	12a08 <__assert_fail@plt>
   2a45c:	ldr	r3, [fp, #-8]
   2a460:	ldr	r3, [r3, #32]
   2a464:	ldr	r2, [r3, #20]
   2a468:	ldr	r3, [fp, #-12]
   2a46c:	cmp	r2, r3
   2a470:	bcs	2a4b4 <flatcc_builder_truncate_vector@@Base+0xa0>
   2a474:	ldr	r3, [fp, #-8]
   2a478:	ldr	r3, [r3, #32]
   2a47c:	ldr	r2, [r3, #20]
   2a480:	ldr	r3, [fp, #-12]
   2a484:	cmp	r2, r3
   2a488:	bcs	2a4ac <flatcc_builder_truncate_vector@@Base+0x98>
   2a48c:	ldr	r3, [pc, #128]	; 2a514 <flatcc_builder_truncate_vector@@Base+0x100>
   2a490:	add	r3, pc, r3
   2a494:	ldr	r2, [pc, #124]	; 2a518 <flatcc_builder_truncate_vector@@Base+0x104>
   2a498:	ldr	r1, [pc, #124]	; 2a51c <flatcc_builder_truncate_vector@@Base+0x108>
   2a49c:	add	r1, pc, r1
   2a4a0:	ldr	r0, [pc, #120]	; 2a520 <flatcc_builder_truncate_vector@@Base+0x10c>
   2a4a4:	add	r0, pc, r0
   2a4a8:	bl	12a08 <__assert_fail@plt>
   2a4ac:	mvn	r3, #0
   2a4b0:	b	2a4f8 <flatcc_builder_truncate_vector@@Base+0xe4>
   2a4b4:	ldr	r3, [fp, #-8]
   2a4b8:	ldr	r3, [r3, #32]
   2a4bc:	ldr	r2, [fp, #-8]
   2a4c0:	ldr	r2, [r2, #32]
   2a4c4:	ldr	r1, [r2, #20]
   2a4c8:	ldr	r2, [fp, #-12]
   2a4cc:	sub	r2, r1, r2
   2a4d0:	str	r2, [r3, #20]
   2a4d4:	ldr	r3, [fp, #-8]
   2a4d8:	ldr	r3, [r3, #32]
   2a4dc:	ldr	r3, [r3, #16]
   2a4e0:	ldr	r2, [fp, #-12]
   2a4e4:	mul	r3, r2, r3
   2a4e8:	mov	r1, r3
   2a4ec:	ldr	r0, [fp, #-8]
   2a4f0:	bl	27c94 <flatcc_builder_default_alloc@@Base+0x38c>
   2a4f4:	mov	r3, #0
   2a4f8:	mov	r0, r3
   2a4fc:	sub	sp, fp, #4
   2a500:	pop	{fp, pc}
   2a504:	andeq	sl, r0, ip, lsl #24
   2a508:	ldrdeq	r0, [r0], -r9
   2a50c:	andeq	sl, r0, r4, ror #11
   2a510:	andeq	sl, r0, r0, lsr #14
   2a514:			; <UNDEFINED> instruction: 0x0000abbc
   2a518:	ldrdeq	r0, [r0], -sl
   2a51c:	muleq	r0, r4, r5
   2a520:	muleq	r0, ip, r7

0002a524 <flatcc_builder_truncate_offset_vector@@Base>:
   2a524:	push	{fp, lr}
   2a528:	add	fp, sp, #4
   2a52c:	sub	sp, sp, #8
   2a530:	str	r0, [fp, #-8]
   2a534:	str	r1, [fp, #-12]
   2a538:	ldr	r3, [fp, #-8]
   2a53c:	ldr	r3, [r3, #32]
   2a540:	ldrh	r3, [r3, #14]
   2a544:	cmp	r3, #5
   2a548:	beq	2a56c <flatcc_builder_truncate_offset_vector@@Base+0x48>
   2a54c:	ldr	r3, [pc, #192]	; 2a614 <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   2a550:	add	r3, pc, r3
   2a554:	ldr	r2, [pc, #188]	; 2a618 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   2a558:	ldr	r1, [pc, #188]	; 2a61c <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   2a55c:	add	r1, pc, r1
   2a560:	ldr	r0, [pc, #184]	; 2a620 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   2a564:	add	r0, pc, r0
   2a568:	bl	12a08 <__assert_fail@plt>
   2a56c:	ldr	r3, [fp, #-8]
   2a570:	ldr	r3, [r3, #32]
   2a574:	ldr	r2, [r3, #20]
   2a578:	ldr	r3, [fp, #-12]
   2a57c:	cmp	r2, r3
   2a580:	bcs	2a5c4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   2a584:	ldr	r3, [fp, #-8]
   2a588:	ldr	r3, [r3, #32]
   2a58c:	ldr	r2, [r3, #20]
   2a590:	ldr	r3, [fp, #-12]
   2a594:	cmp	r2, r3
   2a598:	bcs	2a5bc <flatcc_builder_truncate_offset_vector@@Base+0x98>
   2a59c:	ldr	r3, [pc, #128]	; 2a624 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   2a5a0:	add	r3, pc, r3
   2a5a4:	ldr	r2, [pc, #124]	; 2a628 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   2a5a8:	ldr	r1, [pc, #124]	; 2a62c <flatcc_builder_truncate_offset_vector@@Base+0x108>
   2a5ac:	add	r1, pc, r1
   2a5b0:	ldr	r0, [pc, #120]	; 2a630 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   2a5b4:	add	r0, pc, r0
   2a5b8:	bl	12a08 <__assert_fail@plt>
   2a5bc:	mvn	r3, #0
   2a5c0:	b	2a608 <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   2a5c4:	ldr	r3, [fp, #-8]
   2a5c8:	ldr	r3, [r3, #32]
   2a5cc:	ldr	r2, [fp, #-8]
   2a5d0:	ldr	r2, [r2, #32]
   2a5d4:	ldr	r1, [r2, #20]
   2a5d8:	ldr	r2, [fp, #-12]
   2a5dc:	sub	r2, r1, r2
   2a5e0:	str	r2, [r3, #20]
   2a5e4:	ldr	r3, [fp, #-8]
   2a5e8:	ldr	r3, [r3, #32]
   2a5ec:	ldr	r3, [r3, #16]
   2a5f0:	ldr	r2, [fp, #-12]
   2a5f4:	mul	r3, r2, r3
   2a5f8:	mov	r1, r3
   2a5fc:	ldr	r0, [fp, #-8]
   2a600:	bl	27c94 <flatcc_builder_default_alloc@@Base+0x38c>
   2a604:	mov	r3, #0
   2a608:	mov	r0, r3
   2a60c:	sub	sp, fp, #4
   2a610:	pop	{fp, pc}
   2a614:	andeq	sl, r0, ip, lsl fp
   2a618:	andeq	r0, r0, r2, ror #7
   2a61c:	ldrdeq	sl, [r0], -r4
   2a620:	andeq	sl, r0, ip, ror r6
   2a624:	andeq	sl, r0, ip, asr #21
   2a628:	andeq	r0, r0, r3, ror #7
   2a62c:	andeq	sl, r0, r4, lsl #9
   2a630:			; <UNDEFINED> instruction: 0x0000a6b0

0002a634 <flatcc_builder_truncate_string@@Base>:
   2a634:	push	{fp, lr}
   2a638:	add	fp, sp, #4
   2a63c:	sub	sp, sp, #8
   2a640:	str	r0, [fp, #-8]
   2a644:	str	r1, [fp, #-12]
   2a648:	ldr	r3, [fp, #-8]
   2a64c:	ldr	r3, [r3, #32]
   2a650:	ldrh	r3, [r3, #14]
   2a654:	cmp	r3, #6
   2a658:	beq	2a67c <flatcc_builder_truncate_string@@Base+0x48>
   2a65c:	ldr	r3, [pc, #172]	; 2a710 <flatcc_builder_truncate_string@@Base+0xdc>
   2a660:	add	r3, pc, r3
   2a664:	ldr	r2, [pc, #168]	; 2a714 <flatcc_builder_truncate_string@@Base+0xe0>
   2a668:	ldr	r1, [pc, #168]	; 2a718 <flatcc_builder_truncate_string@@Base+0xe4>
   2a66c:	add	r1, pc, r1
   2a670:	ldr	r0, [pc, #164]	; 2a71c <flatcc_builder_truncate_string@@Base+0xe8>
   2a674:	add	r0, pc, r0
   2a678:	bl	12a08 <__assert_fail@plt>
   2a67c:	ldr	r3, [fp, #-8]
   2a680:	ldr	r3, [r3, #32]
   2a684:	ldr	r2, [r3, #20]
   2a688:	ldr	r3, [fp, #-12]
   2a68c:	cmp	r2, r3
   2a690:	bcs	2a6d4 <flatcc_builder_truncate_string@@Base+0xa0>
   2a694:	ldr	r3, [fp, #-8]
   2a698:	ldr	r3, [r3, #32]
   2a69c:	ldr	r2, [r3, #20]
   2a6a0:	ldr	r3, [fp, #-12]
   2a6a4:	cmp	r2, r3
   2a6a8:	bcs	2a6cc <flatcc_builder_truncate_string@@Base+0x98>
   2a6ac:	ldr	r3, [pc, #108]	; 2a720 <flatcc_builder_truncate_string@@Base+0xec>
   2a6b0:	add	r3, pc, r3
   2a6b4:	mov	r2, #1004	; 0x3ec
   2a6b8:	ldr	r1, [pc, #100]	; 2a724 <flatcc_builder_truncate_string@@Base+0xf0>
   2a6bc:	add	r1, pc, r1
   2a6c0:	ldr	r0, [pc, #96]	; 2a728 <flatcc_builder_truncate_string@@Base+0xf4>
   2a6c4:	add	r0, pc, r0
   2a6c8:	bl	12a08 <__assert_fail@plt>
   2a6cc:	mvn	r3, #0
   2a6d0:	b	2a704 <flatcc_builder_truncate_string@@Base+0xd0>
   2a6d4:	ldr	r3, [fp, #-8]
   2a6d8:	ldr	r3, [r3, #32]
   2a6dc:	ldr	r2, [fp, #-8]
   2a6e0:	ldr	r2, [r2, #32]
   2a6e4:	ldr	r1, [r2, #20]
   2a6e8:	ldr	r2, [fp, #-12]
   2a6ec:	sub	r2, r1, r2
   2a6f0:	str	r2, [r3, #20]
   2a6f4:	ldr	r1, [fp, #-12]
   2a6f8:	ldr	r0, [fp, #-8]
   2a6fc:	bl	27c94 <flatcc_builder_default_alloc@@Base+0x38c>
   2a700:	mov	r3, #0
   2a704:	mov	r0, r3
   2a708:	sub	sp, fp, #4
   2a70c:	pop	{fp, pc}
   2a710:	andeq	sl, r0, r4, lsr sl
   2a714:	andeq	r0, r0, fp, ror #7
   2a718:	andeq	sl, r0, r4, asr #7
   2a71c:	andeq	sl, r0, r0, lsr #11
   2a720:	andeq	sl, r0, r4, ror #19
   2a724:	andeq	sl, r0, r4, ror r3
   2a728:	ldrdeq	sl, [r0], -ip

0002a72c <flatcc_builder_start_vector@@Base>:
   2a72c:	push	{fp, lr}
   2a730:	add	fp, sp, #4
   2a734:	sub	sp, sp, #16
   2a738:	str	r0, [fp, #-8]
   2a73c:	str	r1, [fp, #-12]
   2a740:	str	r3, [fp, #-20]	; 0xffffffec
   2a744:	strh	r2, [fp, #-14]
   2a748:	sub	r3, fp, #14
   2a74c:	mov	r1, #4
   2a750:	mov	r0, r3
   2a754:	bl	2880c <flatcc_builder_clear@@Base+0xf8>
   2a758:	ldrh	r3, [fp, #-14]
   2a75c:	mov	r1, r3
   2a760:	ldr	r0, [fp, #-8]
   2a764:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2a768:	mov	r3, r0
   2a76c:	cmp	r3, #0
   2a770:	beq	2a77c <flatcc_builder_start_vector@@Base+0x50>
   2a774:	mvn	r3, #0
   2a778:	b	2a7cc <flatcc_builder_start_vector@@Base+0xa0>
   2a77c:	ldr	r3, [fp, #-8]
   2a780:	ldr	r3, [r3, #32]
   2a784:	ldr	r2, [fp, #-12]
   2a788:	str	r2, [r3, #16]
   2a78c:	ldr	r3, [fp, #-8]
   2a790:	ldr	r3, [r3, #32]
   2a794:	mov	r2, #0
   2a798:	str	r2, [r3, #20]
   2a79c:	ldr	r3, [fp, #-8]
   2a7a0:	ldr	r3, [r3, #32]
   2a7a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   2a7a8:	str	r2, [r3, #24]
   2a7ac:	ldr	r3, [fp, #-8]
   2a7b0:	ldr	r3, [r3, #32]
   2a7b4:	mov	r2, #4
   2a7b8:	strh	r2, [r3, #14]
   2a7bc:	mvn	r1, #3
   2a7c0:	ldr	r0, [fp, #-8]
   2a7c4:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   2a7c8:	mov	r3, #0
   2a7cc:	mov	r0, r3
   2a7d0:	sub	sp, fp, #4
   2a7d4:	pop	{fp, pc}

0002a7d8 <flatcc_builder_start_offset_vector@@Base>:
   2a7d8:	push	{fp, lr}
   2a7dc:	add	fp, sp, #4
   2a7e0:	sub	sp, sp, #8
   2a7e4:	str	r0, [fp, #-8]
   2a7e8:	mov	r1, #4
   2a7ec:	ldr	r0, [fp, #-8]
   2a7f0:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2a7f4:	mov	r3, r0
   2a7f8:	cmp	r3, #0
   2a7fc:	beq	2a808 <flatcc_builder_start_offset_vector@@Base+0x30>
   2a800:	mvn	r3, #0
   2a804:	b	2a848 <flatcc_builder_start_offset_vector@@Base+0x70>
   2a808:	ldr	r3, [fp, #-8]
   2a80c:	ldr	r3, [r3, #32]
   2a810:	mov	r2, #4
   2a814:	str	r2, [r3, #16]
   2a818:	ldr	r3, [fp, #-8]
   2a81c:	ldr	r3, [r3, #32]
   2a820:	mov	r2, #0
   2a824:	str	r2, [r3, #20]
   2a828:	ldr	r3, [fp, #-8]
   2a82c:	ldr	r3, [r3, #32]
   2a830:	mov	r2, #5
   2a834:	strh	r2, [r3, #14]
   2a838:	mvn	r1, #3
   2a83c:	ldr	r0, [fp, #-8]
   2a840:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   2a844:	mov	r3, #0
   2a848:	mov	r0, r3
   2a84c:	sub	sp, fp, #4
   2a850:	pop	{fp, pc}

0002a854 <flatcc_builder_create_offset_vector@@Base>:
   2a854:	push	{fp, lr}
   2a858:	add	fp, sp, #4
   2a85c:	sub	sp, sp, #24
   2a860:	str	r0, [fp, #-16]
   2a864:	str	r1, [fp, #-20]	; 0xffffffec
   2a868:	str	r2, [fp, #-24]	; 0xffffffe8
   2a86c:	ldr	r0, [fp, #-16]
   2a870:	bl	2a7d8 <flatcc_builder_start_offset_vector@@Base>
   2a874:	mov	r3, r0
   2a878:	cmp	r3, #0
   2a87c:	beq	2a888 <flatcc_builder_create_offset_vector@@Base+0x34>
   2a880:	mov	r3, #0
   2a884:	b	2a8d0 <flatcc_builder_create_offset_vector@@Base+0x7c>
   2a888:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2a88c:	ldr	r0, [fp, #-16]
   2a890:	bl	2a084 <flatcc_builder_extend_offset_vector@@Base>
   2a894:	str	r0, [fp, #-8]
   2a898:	ldr	r3, [fp, #-8]
   2a89c:	cmp	r3, #0
   2a8a0:	bne	2a8ac <flatcc_builder_create_offset_vector@@Base+0x58>
   2a8a4:	mov	r3, #0
   2a8a8:	b	2a8d0 <flatcc_builder_create_offset_vector@@Base+0x7c>
   2a8ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a8b0:	lsl	r3, r3, #2
   2a8b4:	mov	r2, r3
   2a8b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   2a8bc:	ldr	r0, [fp, #-8]
   2a8c0:	bl	12930 <memcpy@plt>
   2a8c4:	ldr	r0, [fp, #-16]
   2a8c8:	bl	2be2c <flatcc_builder_end_offset_vector@@Base>
   2a8cc:	mov	r3, r0
   2a8d0:	mov	r0, r3
   2a8d4:	sub	sp, fp, #4
   2a8d8:	pop	{fp, pc}

0002a8dc <flatcc_builder_start_string@@Base>:
   2a8dc:	push	{fp, lr}
   2a8e0:	add	fp, sp, #4
   2a8e4:	sub	sp, sp, #8
   2a8e8:	str	r0, [fp, #-8]
   2a8ec:	mov	r1, #1
   2a8f0:	ldr	r0, [fp, #-8]
   2a8f4:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2a8f8:	mov	r3, r0
   2a8fc:	cmp	r3, #0
   2a900:	beq	2a90c <flatcc_builder_start_string@@Base+0x30>
   2a904:	mvn	r3, #0
   2a908:	b	2a94c <flatcc_builder_start_string@@Base+0x70>
   2a90c:	ldr	r3, [fp, #-8]
   2a910:	ldr	r3, [r3, #32]
   2a914:	mov	r2, #1
   2a918:	str	r2, [r3, #16]
   2a91c:	ldr	r3, [fp, #-8]
   2a920:	ldr	r3, [r3, #32]
   2a924:	mov	r2, #0
   2a928:	str	r2, [r3, #20]
   2a92c:	ldr	r3, [fp, #-8]
   2a930:	ldr	r3, [r3, #32]
   2a934:	mov	r2, #6
   2a938:	strh	r2, [r3, #14]
   2a93c:	mvn	r1, #3
   2a940:	ldr	r0, [fp, #-8]
   2a944:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   2a948:	mov	r3, #0
   2a94c:	mov	r0, r3
   2a950:	sub	sp, fp, #4
   2a954:	pop	{fp, pc}

0002a958 <flatcc_builder_reserve_table@@Base>:
   2a958:	push	{fp, lr}
   2a95c:	add	fp, sp, #4
   2a960:	sub	sp, sp, #8
   2a964:	str	r0, [fp, #-8]
   2a968:	str	r1, [fp, #-12]
   2a96c:	ldr	r3, [fp, #-12]
   2a970:	cmp	r3, #0
   2a974:	bge	2a998 <flatcc_builder_reserve_table@@Base+0x40>
   2a978:	ldr	r3, [pc, #52]	; 2a9b4 <flatcc_builder_reserve_table@@Base+0x5c>
   2a97c:	add	r3, pc, r3
   2a980:	ldr	r2, [pc, #48]	; 2a9b8 <flatcc_builder_reserve_table@@Base+0x60>
   2a984:	ldr	r1, [pc, #48]	; 2a9bc <flatcc_builder_reserve_table@@Base+0x64>
   2a988:	add	r1, pc, r1
   2a98c:	ldr	r0, [pc, #44]	; 2a9c0 <flatcc_builder_reserve_table@@Base+0x68>
   2a990:	add	r0, pc, r0
   2a994:	bl	12a08 <__assert_fail@plt>
   2a998:	ldr	r1, [fp, #-12]
   2a99c:	ldr	r0, [fp, #-8]
   2a9a0:	bl	28040 <flatcc_builder_default_alloc@@Base+0x738>
   2a9a4:	mov	r3, r0
   2a9a8:	mov	r0, r3
   2a9ac:	sub	sp, fp, #4
   2a9b0:	pop	{fp, pc}
   2a9b4:	andeq	sl, r0, r8, lsr r7
   2a9b8:	andeq	r0, r0, r9, lsr #8
   2a9bc:	andeq	sl, r0, r8, lsr #1
   2a9c0:	andeq	sl, r0, r4, lsr r3

0002a9c4 <flatcc_builder_start_table@@Base>:
   2a9c4:	push	{fp, lr}
   2a9c8:	add	fp, sp, #4
   2a9cc:	sub	sp, sp, #8
   2a9d0:	str	r0, [fp, #-8]
   2a9d4:	str	r1, [fp, #-12]
   2a9d8:	mov	r1, #4
   2a9dc:	ldr	r0, [fp, #-8]
   2a9e0:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2a9e4:	mov	r3, r0
   2a9e8:	cmp	r3, #0
   2a9ec:	beq	2a9f8 <flatcc_builder_start_table@@Base+0x34>
   2a9f0:	mvn	r3, #0
   2a9f4:	b	2aacc <flatcc_builder_start_table@@Base+0x108>
   2a9f8:	ldr	r3, [fp, #-8]
   2a9fc:	ldr	r3, [r3, #32]
   2aa00:	ldr	r2, [fp, #-8]
   2aa04:	ldr	r2, [r2, #4]
   2aa08:	mov	r1, r2
   2aa0c:	ldr	r2, [fp, #-8]
   2aa10:	ldr	r2, [r2, #52]	; 0x34
   2aa14:	sub	r2, r1, r2
   2aa18:	str	r2, [r3, #16]
   2aa1c:	ldr	r3, [fp, #-8]
   2aa20:	ldr	r3, [r3, #32]
   2aa24:	ldr	r2, [fp, #-8]
   2aa28:	ldr	r2, [r2]
   2aa2c:	mov	r1, r2
   2aa30:	ldr	r2, [fp, #-8]
   2aa34:	ldr	r2, [r2, #76]	; 0x4c
   2aa38:	sub	r2, r1, r2
   2aa3c:	str	r2, [r3, #20]
   2aa40:	ldr	r3, [fp, #-8]
   2aa44:	ldr	r3, [r3, #32]
   2aa48:	ldr	r2, [fp, #-8]
   2aa4c:	ldr	r2, [r2, #12]
   2aa50:	str	r2, [r3, #24]
   2aa54:	ldr	r3, [fp, #-8]
   2aa58:	ldr	r3, [r3, #32]
   2aa5c:	ldr	r2, [fp, #-8]
   2aa60:	ldrh	r2, [r2, #8]
   2aa64:	strh	r2, [r3, #28]
   2aa68:	ldr	r3, [fp, #-8]
   2aa6c:	mov	r2, #0
   2aa70:	str	r2, [r3, #12]
   2aa74:	ldr	r3, [fp, #-8]
   2aa78:	ldr	r2, [pc, #88]	; 2aad8 <flatcc_builder_start_table@@Base+0x114>
   2aa7c:	str	r2, [r3, #12]
   2aa80:	ldr	r3, [fp, #-8]
   2aa84:	mov	r2, #0
   2aa88:	strh	r2, [r3, #8]
   2aa8c:	ldr	r3, [fp, #-8]
   2aa90:	ldr	r3, [r3, #32]
   2aa94:	mov	r2, #3
   2aa98:	strh	r2, [r3, #14]
   2aa9c:	ldr	r1, [fp, #-12]
   2aaa0:	ldr	r0, [fp, #-8]
   2aaa4:	bl	28040 <flatcc_builder_default_alloc@@Base+0x738>
   2aaa8:	mov	r3, r0
   2aaac:	cmp	r3, #0
   2aab0:	beq	2aabc <flatcc_builder_start_table@@Base+0xf8>
   2aab4:	mvn	r3, #0
   2aab8:	b	2aacc <flatcc_builder_start_table@@Base+0x108>
   2aabc:	ldr	r1, [pc, #24]	; 2aadc <flatcc_builder_start_table@@Base+0x118>
   2aac0:	ldr	r0, [fp, #-8]
   2aac4:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   2aac8:	mov	r3, #0
   2aacc:	mov	r0, r3
   2aad0:	sub	sp, fp, #4
   2aad4:	pop	{fp, pc}
   2aad8:	svccs	0x00693b52
   2aadc:	strdeq	pc, [r0], -ip

0002aae0 <flatcc_builder_create_vtable@@Base>:
   2aae0:	push	{fp, lr}
   2aae4:	add	fp, sp, #4
   2aae8:	sub	sp, sp, #96	; 0x60
   2aaec:	str	r0, [fp, #-88]	; 0xffffffa8
   2aaf0:	str	r1, [fp, #-92]	; 0xffffffa4
   2aaf4:	mov	r3, r2
   2aaf8:	strh	r3, [fp, #-94]	; 0xffffffa2
   2aafc:	mov	r3, #0
   2ab00:	str	r3, [fp, #-80]	; 0xffffffb0
   2ab04:	mov	r3, #0
   2ab08:	str	r3, [fp, #-76]	; 0xffffffb4
   2ab0c:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   2ab10:	cmp	r3, #0
   2ab14:	beq	2ab6c <flatcc_builder_create_vtable@@Base+0x8c>
   2ab18:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2ab1c:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   2ab20:	add	r3, r2, r3
   2ab24:	str	r3, [fp, #-80]	; 0xffffffb0
   2ab28:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2ab2c:	add	r3, r3, #1
   2ab30:	lsl	r3, r3, #3
   2ab34:	sub	r2, fp, #4
   2ab38:	add	r3, r2, r3
   2ab3c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2ab40:	str	r2, [r3, #-76]	; 0xffffffb4
   2ab44:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2ab48:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   2ab4c:	add	r3, r3, #1
   2ab50:	lsl	r3, r3, #3
   2ab54:	sub	r1, fp, #4
   2ab58:	add	r3, r1, r3
   2ab5c:	str	r2, [r3, #-72]	; 0xffffffb8
   2ab60:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2ab64:	add	r3, r3, #1
   2ab68:	str	r3, [fp, #-76]	; 0xffffffb4
   2ab6c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2ab70:	ldr	r3, [r3, #152]	; 0x98
   2ab74:	cmp	r3, #0
   2ab78:	bne	2abb4 <flatcc_builder_create_vtable@@Base+0xd4>
   2ab7c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2ab80:	ldr	r3, [r3, #180]	; 0xb4
   2ab84:	cmp	r3, #0
   2ab88:	bne	2abb4 <flatcc_builder_create_vtable@@Base+0xd4>
   2ab8c:	sub	r3, fp, #80	; 0x50
   2ab90:	mov	r1, r3
   2ab94:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2ab98:	bl	28f88 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   2ab9c:	str	r0, [fp, #-8]
   2aba0:	ldr	r3, [fp, #-8]
   2aba4:	cmp	r3, #0
   2aba8:	bne	2abe8 <flatcc_builder_create_vtable@@Base+0x108>
   2abac:	mov	r3, #0
   2abb0:	b	2abec <flatcc_builder_create_vtable@@Base+0x10c>
   2abb4:	sub	r3, fp, #80	; 0x50
   2abb8:	mov	r1, r3
   2abbc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2abc0:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   2abc4:	str	r0, [fp, #-8]
   2abc8:	ldr	r3, [fp, #-8]
   2abcc:	cmp	r3, #0
   2abd0:	bne	2abdc <flatcc_builder_create_vtable@@Base+0xfc>
   2abd4:	mov	r3, #0
   2abd8:	b	2abec <flatcc_builder_create_vtable@@Base+0x10c>
   2abdc:	ldr	r3, [fp, #-8]
   2abe0:	add	r3, r3, #1
   2abe4:	str	r3, [fp, #-8]
   2abe8:	ldr	r3, [fp, #-8]
   2abec:	mov	r0, r3
   2abf0:	sub	sp, fp, #4
   2abf4:	pop	{fp, pc}

0002abf8 <flatcc_builder_create_cached_vtable@@Base>:
   2abf8:	push	{fp, lr}
   2abfc:	add	fp, sp, #4
   2ac00:	sub	sp, sp, #48	; 0x30
   2ac04:	str	r0, [fp, #-32]	; 0xffffffe0
   2ac08:	str	r1, [fp, #-36]	; 0xffffffdc
   2ac0c:	str	r3, [fp, #-44]	; 0xffffffd4
   2ac10:	strh	r2, [fp, #-38]	; 0xffffffda
   2ac14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2ac18:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ac1c:	bl	282ac <flatcc_builder_default_alloc@@Base+0x9a4>
   2ac20:	str	r0, [fp, #-20]	; 0xffffffec
   2ac24:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ac28:	cmp	r3, #0
   2ac2c:	bne	2ac38 <flatcc_builder_create_cached_vtable@@Base+0x40>
   2ac30:	mov	r3, #0
   2ac34:	b	2aefc <flatcc_builder_create_cached_vtable@@Base+0x304>
   2ac38:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ac3c:	str	r3, [fp, #-12]
   2ac40:	ldr	r3, [fp, #-12]
   2ac44:	ldr	r3, [r3]
   2ac48:	str	r3, [fp, #-16]
   2ac4c:	mov	r3, #0
   2ac50:	str	r3, [fp, #-8]
   2ac54:	b	2ad58 <flatcc_builder_create_cached_vtable@@Base+0x160>
   2ac58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ac5c:	ldr	r2, [r3, #100]	; 0x64
   2ac60:	ldr	r3, [fp, #-16]
   2ac64:	add	r3, r2, r3
   2ac68:	str	r3, [fp, #-24]	; 0xffffffe8
   2ac6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ac70:	ldr	r2, [r3, #68]	; 0x44
   2ac74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ac78:	ldr	r3, [r3, #8]
   2ac7c:	add	r3, r2, r3
   2ac80:	str	r3, [fp, #-28]	; 0xffffffe4
   2ac84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ac88:	ldrh	r3, [r3]
   2ac8c:	ldrh	r2, [fp, #-38]	; 0xffffffda
   2ac90:	cmp	r2, r3
   2ac94:	bne	2acb8 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   2ac98:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2ac9c:	mov	r2, r3
   2aca0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2aca4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2aca8:	bl	1293c <memcmp@plt>
   2acac:	mov	r3, r0
   2acb0:	cmp	r3, #0
   2acb4:	beq	2acd4 <flatcc_builder_create_cached_vtable@@Base+0xdc>
   2acb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2acbc:	add	r3, r3, #12
   2acc0:	str	r3, [fp, #-12]
   2acc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2acc8:	ldr	r3, [r3, #12]
   2accc:	str	r3, [fp, #-16]
   2acd0:	b	2ad58 <flatcc_builder_create_cached_vtable@@Base+0x160>
   2acd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2acd8:	ldr	r2, [r3, #4]
   2acdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ace0:	ldr	r3, [r3, #152]	; 0x98
   2ace4:	cmp	r2, r3
   2ace8:	beq	2ad10 <flatcc_builder_create_cached_vtable@@Base+0x118>
   2acec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2acf0:	str	r3, [fp, #-8]
   2acf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2acf8:	add	r3, r3, #12
   2acfc:	str	r3, [fp, #-12]
   2ad00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad04:	ldr	r3, [r3, #12]
   2ad08:	str	r3, [fp, #-16]
   2ad0c:	b	2ad58 <flatcc_builder_create_cached_vtable@@Base+0x160>
   2ad10:	ldr	r2, [fp, #-12]
   2ad14:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ad18:	cmp	r2, r3
   2ad1c:	beq	2ad4c <flatcc_builder_create_cached_vtable@@Base+0x154>
   2ad20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad24:	ldr	r2, [r3, #12]
   2ad28:	ldr	r3, [fp, #-12]
   2ad2c:	str	r2, [r3]
   2ad30:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ad34:	ldr	r2, [r3]
   2ad38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad3c:	str	r2, [r3, #12]
   2ad40:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ad44:	ldr	r2, [fp, #-16]
   2ad48:	str	r2, [r3]
   2ad4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad50:	ldr	r3, [r3]
   2ad54:	b	2aefc <flatcc_builder_create_cached_vtable@@Base+0x304>
   2ad58:	ldr	r3, [fp, #-16]
   2ad5c:	cmp	r3, #0
   2ad60:	bne	2ac58 <flatcc_builder_create_cached_vtable@@Base+0x60>
   2ad64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad68:	ldr	r2, [r3, #124]	; 0x7c
   2ad6c:	mov	r3, #0
   2ad70:	str	r3, [sp]
   2ad74:	mov	r3, #16
   2ad78:	mov	r1, #6
   2ad7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ad80:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   2ad84:	str	r0, [fp, #-24]	; 0xffffffe8
   2ad88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad8c:	cmp	r3, #0
   2ad90:	bne	2ad9c <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   2ad94:	mov	r3, #0
   2ad98:	b	2aefc <flatcc_builder_create_cached_vtable@@Base+0x304>
   2ad9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ada0:	ldr	r3, [r3, #124]	; 0x7c
   2ada4:	str	r3, [fp, #-16]
   2ada8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2adac:	ldr	r3, [r3, #124]	; 0x7c
   2adb0:	add	r2, r3, #16
   2adb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2adb8:	str	r2, [r3, #124]	; 0x7c
   2adbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2adc0:	ldr	r2, [r3, #152]	; 0x98
   2adc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2adc8:	str	r2, [r3, #4]
   2adcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   2add0:	ldr	r2, [r3]
   2add4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2add8:	str	r2, [r3, #12]
   2addc:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ade0:	ldr	r2, [fp, #-16]
   2ade4:	str	r2, [r3]
   2ade8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2adec:	mov	r2, r3
   2adf0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2adf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2adf8:	bl	2aae0 <flatcc_builder_create_vtable@@Base>
   2adfc:	mov	r2, r0
   2ae00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae04:	str	r2, [r3]
   2ae08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae0c:	ldr	r3, [r3]
   2ae10:	cmp	r3, #0
   2ae14:	bne	2ae20 <flatcc_builder_create_cached_vtable@@Base+0x228>
   2ae18:	mov	r3, #0
   2ae1c:	b	2aefc <flatcc_builder_create_cached_vtable@@Base+0x304>
   2ae20:	ldr	r3, [fp, #-8]
   2ae24:	cmp	r3, #0
   2ae28:	beq	2ae40 <flatcc_builder_create_cached_vtable@@Base+0x248>
   2ae2c:	ldr	r3, [fp, #-8]
   2ae30:	ldr	r2, [r3, #8]
   2ae34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ae38:	str	r2, [r3, #8]
   2ae3c:	b	2aef4 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   2ae40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ae44:	ldr	r3, [r3, #172]	; 0xac
   2ae48:	cmp	r3, #0
   2ae4c:	beq	2ae7c <flatcc_builder_create_cached_vtable@@Base+0x284>
   2ae50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ae54:	ldr	r2, [r3, #172]	; 0xac
   2ae58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ae5c:	ldr	r1, [r3, #120]	; 0x78
   2ae60:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2ae64:	add	r3, r1, r3
   2ae68:	cmp	r2, r3
   2ae6c:	bcs	2ae7c <flatcc_builder_create_cached_vtable@@Base+0x284>
   2ae70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ae74:	bl	28324 <flatcc_builder_flush_vtable_cache@@Base>
   2ae78:	b	2aef4 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   2ae7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ae80:	ldr	r2, [r3, #120]	; 0x78
   2ae84:	ldrh	r1, [fp, #-38]	; 0xffffffda
   2ae88:	mov	r3, #0
   2ae8c:	str	r3, [sp]
   2ae90:	mov	r3, r1
   2ae94:	mov	r1, #2
   2ae98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ae9c:	bl	27f68 <flatcc_builder_default_alloc@@Base+0x660>
   2aea0:	str	r0, [fp, #-28]	; 0xffffffe4
   2aea4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2aea8:	cmp	r3, #0
   2aeac:	bne	2aeb8 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   2aeb0:	mvn	r3, #0
   2aeb4:	b	2aefc <flatcc_builder_create_cached_vtable@@Base+0x304>
   2aeb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2aebc:	ldr	r2, [r3, #120]	; 0x78
   2aec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aec4:	str	r2, [r3, #8]
   2aec8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2aecc:	ldr	r2, [r3, #120]	; 0x78
   2aed0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2aed4:	add	r2, r2, r3
   2aed8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2aedc:	str	r2, [r3, #120]	; 0x78
   2aee0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   2aee4:	mov	r2, r3
   2aee8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2aeec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2aef0:	bl	12930 <memcpy@plt>
   2aef4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aef8:	ldr	r3, [r3]
   2aefc:	mov	r0, r3
   2af00:	sub	sp, fp, #4
   2af04:	pop	{fp, pc}

0002af08 <flatcc_builder_create_table@@Base>:
   2af08:	push	{r4, fp, lr}
   2af0c:	add	fp, sp, #8
   2af10:	sub	sp, sp, #124	; 0x7c
   2af14:	str	r0, [fp, #-120]	; 0xffffff88
   2af18:	str	r1, [fp, #-124]	; 0xffffff84
   2af1c:	str	r2, [fp, #-128]	; 0xffffff80
   2af20:	strh	r3, [fp, #-130]	; 0xffffff7e
   2af24:	ldr	r4, [pc, #728]	; 2b204 <flatcc_builder_create_table@@Base+0x2fc>
   2af28:	add	r4, pc, r4
   2af2c:	ldr	r3, [fp, #8]
   2af30:	cmp	r3, #0
   2af34:	bge	2af58 <flatcc_builder_create_table@@Base+0x50>
   2af38:	ldr	r3, [pc, #712]	; 2b208 <flatcc_builder_create_table@@Base+0x300>
   2af3c:	add	r3, pc, r3
   2af40:	ldr	r2, [pc, #708]	; 2b20c <flatcc_builder_create_table@@Base+0x304>
   2af44:	ldr	r1, [pc, #708]	; 2b210 <flatcc_builder_create_table@@Base+0x308>
   2af48:	add	r1, pc, r1
   2af4c:	ldr	r0, [pc, #704]	; 2b214 <flatcc_builder_create_table@@Base+0x30c>
   2af50:	add	r0, pc, r0
   2af54:	bl	12a08 <__assert_fail@plt>
   2af58:	ldr	r3, [fp, #12]
   2af5c:	and	r3, r3, #1
   2af60:	cmp	r3, #0
   2af64:	bne	2af88 <flatcc_builder_create_table@@Base+0x80>
   2af68:	ldr	r3, [pc, #680]	; 2b218 <flatcc_builder_create_table@@Base+0x310>
   2af6c:	add	r3, pc, r3
   2af70:	ldr	r2, [pc, #676]	; 2b21c <flatcc_builder_create_table@@Base+0x314>
   2af74:	ldr	r1, [pc, #676]	; 2b220 <flatcc_builder_create_table@@Base+0x318>
   2af78:	add	r1, pc, r1
   2af7c:	ldr	r0, [pc, #672]	; 2b224 <flatcc_builder_create_table@@Base+0x31c>
   2af80:	add	r0, pc, r0
   2af84:	bl	12a08 <__assert_fail@plt>
   2af88:	sub	r3, fp, #130	; 0x82
   2af8c:	mov	r1, #4
   2af90:	mov	r0, r3
   2af94:	bl	2880c <flatcc_builder_clear@@Base+0xf8>
   2af98:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   2af9c:	mov	r1, r3
   2afa0:	ldr	r0, [fp, #-120]	; 0xffffff88
   2afa4:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   2afa8:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   2afac:	mov	r2, r3
   2afb0:	ldr	r1, [fp, #-128]	; 0xffffff80
   2afb4:	ldr	r0, [fp, #-120]	; 0xffffff88
   2afb8:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   2afbc:	str	r0, [fp, #-20]	; 0xffffffec
   2afc0:	ldr	r3, [fp, #-120]	; 0xffffff88
   2afc4:	ldr	r3, [r3, #136]	; 0x88
   2afc8:	mov	r1, r3
   2afcc:	ldr	r2, [fp, #-20]	; 0xffffffec
   2afd0:	ldr	r3, [fp, #-128]	; 0xffffff80
   2afd4:	add	r3, r2, r3
   2afd8:	sub	r3, r1, r3
   2afdc:	sub	r3, r3, #4
   2afe0:	str	r3, [fp, #-24]	; 0xffffffe8
   2afe4:	ldr	r3, [fp, #12]
   2afe8:	sub	r3, r3, #1
   2afec:	str	r3, [fp, #-28]	; 0xffffffe4
   2aff0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2aff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2aff8:	sub	r3, r2, r3
   2affc:	str	r3, [fp, #-32]	; 0xffffffe0
   2b000:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2b004:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b008:	sub	r2, r2, r3
   2b00c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2b010:	cmp	r2, r3
   2b014:	beq	2b020 <flatcc_builder_create_table@@Base+0x118>
   2b018:	mvn	r3, #0
   2b01c:	b	2b1f8 <flatcc_builder_create_table@@Base+0x2f0>
   2b020:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b024:	bl	277c4 <main@@Base+0x524>
   2b028:	mov	r3, r0
   2b02c:	str	r3, [fp, #-44]	; 0xffffffd4
   2b030:	mov	r3, #0
   2b034:	str	r3, [fp, #-16]
   2b038:	b	2b0b0 <flatcc_builder_create_table@@Base+0x1a8>
   2b03c:	ldr	r3, [fp, #-16]
   2b040:	lsl	r3, r3, #1
   2b044:	ldr	r2, [fp, #4]
   2b048:	add	r3, r2, r3
   2b04c:	ldrh	r3, [r3]
   2b050:	mov	r2, r3
   2b054:	ldr	r3, [fp, #-124]	; 0xffffff84
   2b058:	add	r3, r2, r3
   2b05c:	str	r3, [fp, #-36]	; 0xffffffdc
   2b060:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2b064:	ldr	r2, [r3]
   2b068:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b06c:	sub	r3, r2, r3
   2b070:	ldr	r2, [fp, #-16]
   2b074:	lsl	r2, r2, #1
   2b078:	ldr	r1, [fp, #4]
   2b07c:	add	r2, r1, r2
   2b080:	ldrh	r2, [r2]
   2b084:	sub	r3, r3, r2
   2b088:	sub	r3, r3, #4
   2b08c:	str	r3, [fp, #-40]	; 0xffffffd8
   2b090:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2b094:	bl	277c4 <main@@Base+0x524>
   2b098:	mov	r2, r0
   2b09c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2b0a0:	str	r2, [r3]
   2b0a4:	ldr	r3, [fp, #-16]
   2b0a8:	add	r3, r3, #1
   2b0ac:	str	r3, [fp, #-16]
   2b0b0:	ldr	r2, [fp, #-16]
   2b0b4:	ldr	r3, [fp, #8]
   2b0b8:	cmp	r2, r3
   2b0bc:	blt	2b03c <flatcc_builder_create_table@@Base+0x134>
   2b0c0:	mov	r3, #0
   2b0c4:	str	r3, [fp, #-116]	; 0xffffff8c
   2b0c8:	mov	r3, #0
   2b0cc:	str	r3, [fp, #-112]	; 0xffffff90
   2b0d0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   2b0d4:	add	r3, r3, #4
   2b0d8:	str	r3, [fp, #-116]	; 0xffffff8c
   2b0dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b0e0:	add	r3, r3, #1
   2b0e4:	lsl	r3, r3, #3
   2b0e8:	sub	r2, fp, #12
   2b0ec:	add	r3, r2, r3
   2b0f0:	sub	r2, fp, #44	; 0x2c
   2b0f4:	str	r2, [r3, #-104]	; 0xffffff98
   2b0f8:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b0fc:	add	r3, r3, #1
   2b100:	lsl	r3, r3, #3
   2b104:	sub	r2, fp, #12
   2b108:	add	r3, r2, r3
   2b10c:	mov	r2, #4
   2b110:	str	r2, [r3, #-100]	; 0xffffff9c
   2b114:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b118:	add	r3, r3, #1
   2b11c:	str	r3, [fp, #-112]	; 0xffffff90
   2b120:	ldr	r3, [fp, #-128]	; 0xffffff80
   2b124:	cmp	r3, #0
   2b128:	beq	2b180 <flatcc_builder_create_table@@Base+0x278>
   2b12c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2b130:	ldr	r3, [fp, #-128]	; 0xffffff80
   2b134:	add	r3, r2, r3
   2b138:	str	r3, [fp, #-116]	; 0xffffff8c
   2b13c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b140:	add	r3, r3, #1
   2b144:	lsl	r3, r3, #3
   2b148:	sub	r2, fp, #12
   2b14c:	add	r3, r2, r3
   2b150:	ldr	r2, [fp, #-124]	; 0xffffff84
   2b154:	str	r2, [r3, #-104]	; 0xffffff98
   2b158:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b15c:	add	r3, r3, #1
   2b160:	lsl	r3, r3, #3
   2b164:	sub	r2, fp, #12
   2b168:	add	r3, r2, r3
   2b16c:	ldr	r2, [fp, #-128]	; 0xffffff80
   2b170:	str	r2, [r3, #-100]	; 0xffffff9c
   2b174:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b178:	add	r3, r3, #1
   2b17c:	str	r3, [fp, #-112]	; 0xffffff90
   2b180:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b184:	cmp	r3, #0
   2b188:	beq	2b1e4 <flatcc_builder_create_table@@Base+0x2dc>
   2b18c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2b190:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b194:	add	r3, r2, r3
   2b198:	str	r3, [fp, #-116]	; 0xffffff8c
   2b19c:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b1a0:	add	r3, r3, #1
   2b1a4:	lsl	r3, r3, #3
   2b1a8:	sub	r2, fp, #12
   2b1ac:	add	r3, r2, r3
   2b1b0:	ldr	r2, [pc, #112]	; 2b228 <flatcc_builder_create_table@@Base+0x320>
   2b1b4:	ldr	r2, [r4, r2]
   2b1b8:	str	r2, [r3, #-104]	; 0xffffff98
   2b1bc:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b1c0:	add	r3, r3, #1
   2b1c4:	lsl	r3, r3, #3
   2b1c8:	sub	r2, fp, #12
   2b1cc:	add	r3, r2, r3
   2b1d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   2b1d4:	str	r2, [r3, #-100]	; 0xffffff9c
   2b1d8:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b1dc:	add	r3, r3, #1
   2b1e0:	str	r3, [fp, #-112]	; 0xffffff90
   2b1e4:	sub	r3, fp, #116	; 0x74
   2b1e8:	mov	r1, r3
   2b1ec:	ldr	r0, [fp, #-120]	; 0xffffff88
   2b1f0:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   2b1f4:	mov	r3, r0
   2b1f8:	mov	r0, r3
   2b1fc:	sub	sp, fp, #8
   2b200:	pop	{r4, fp, pc}
   2b204:	ldrdeq	fp, [r1], -r0
   2b208:	muleq	r0, r8, r1
   2b20c:	ldrdeq	r0, [r0], -r5
   2b210:	andeq	r9, r0, r8, ror #21
   2b214:	andeq	r9, r0, r0, lsl #27
   2b218:	andeq	sl, r0, r8, ror #2
   2b21c:	ldrdeq	r0, [r0], -fp
   2b220:			; <UNDEFINED> instruction: 0x00009ab8
   2b224:	andeq	r9, r0, r4, ror #26
   2b228:	andeq	r0, r0, r4, rrx

0002b22c <flatcc_builder_check_required_field@@Base>:
   2b22c:	push	{fp, lr}
   2b230:	add	fp, sp, #4
   2b234:	sub	sp, sp, #8
   2b238:	str	r0, [fp, #-8]
   2b23c:	mov	r3, r1
   2b240:	strh	r3, [fp, #-10]
   2b244:	ldr	r3, [fp, #-8]
   2b248:	ldr	r3, [r3, #32]
   2b24c:	ldrh	r3, [r3, #14]
   2b250:	cmp	r3, #3
   2b254:	beq	2b278 <flatcc_builder_check_required_field@@Base+0x4c>
   2b258:	ldr	r3, [pc, #100]	; 2b2c4 <flatcc_builder_check_required_field@@Base+0x98>
   2b25c:	add	r3, pc, r3
   2b260:	ldr	r2, [pc, #96]	; 2b2c8 <flatcc_builder_check_required_field@@Base+0x9c>
   2b264:	ldr	r1, [pc, #96]	; 2b2cc <flatcc_builder_check_required_field@@Base+0xa0>
   2b268:	add	r1, pc, r1
   2b26c:	ldr	r0, [pc, #92]	; 2b2d0 <flatcc_builder_check_required_field@@Base+0xa4>
   2b270:	add	r0, pc, r0
   2b274:	bl	12a08 <__assert_fail@plt>
   2b278:	ldr	r3, [fp, #-8]
   2b27c:	ldrh	r3, [r3, #8]
   2b280:	ldrh	r2, [fp, #-10]
   2b284:	cmp	r2, r3
   2b288:	bcs	2b2b4 <flatcc_builder_check_required_field@@Base+0x88>
   2b28c:	ldr	r3, [fp, #-8]
   2b290:	ldr	r2, [r3, #4]
   2b294:	ldrh	r3, [fp, #-10]
   2b298:	lsl	r3, r3, #1
   2b29c:	add	r3, r2, r3
   2b2a0:	ldrh	r3, [r3]
   2b2a4:	cmp	r3, #0
   2b2a8:	beq	2b2b4 <flatcc_builder_check_required_field@@Base+0x88>
   2b2ac:	mov	r3, #1
   2b2b0:	b	2b2b8 <flatcc_builder_check_required_field@@Base+0x8c>
   2b2b4:	mov	r3, #0
   2b2b8:	mov	r0, r3
   2b2bc:	sub	sp, fp, #4
   2b2c0:	pop	{fp, pc}
   2b2c4:	muleq	r0, r4, lr
   2b2c8:	strdeq	r0, [r0], -r8
   2b2cc:	andeq	r9, r0, r8, asr #15
   2b2d0:	andeq	r9, r0, r0, lsl #21

0002b2d4 <flatcc_builder_check_union_field@@Base>:
   2b2d4:	push	{fp, lr}
   2b2d8:	add	fp, sp, #4
   2b2dc:	sub	sp, sp, #8
   2b2e0:	str	r0, [fp, #-8]
   2b2e4:	mov	r3, r1
   2b2e8:	strh	r3, [fp, #-10]
   2b2ec:	ldr	r3, [fp, #-8]
   2b2f0:	ldr	r3, [r3, #32]
   2b2f4:	ldrh	r3, [r3, #14]
   2b2f8:	cmp	r3, #3
   2b2fc:	beq	2b320 <flatcc_builder_check_union_field@@Base+0x4c>
   2b300:	ldr	r3, [pc, #292]	; 2b42c <flatcc_builder_check_union_field@@Base+0x158>
   2b304:	add	r3, pc, r3
   2b308:	ldr	r2, [pc, #288]	; 2b430 <flatcc_builder_check_union_field@@Base+0x15c>
   2b30c:	ldr	r1, [pc, #288]	; 2b434 <flatcc_builder_check_union_field@@Base+0x160>
   2b310:	add	r1, pc, r1
   2b314:	ldr	r0, [pc, #284]	; 2b438 <flatcc_builder_check_union_field@@Base+0x164>
   2b318:	add	r0, pc, r0
   2b31c:	bl	12a08 <__assert_fail@plt>
   2b320:	ldrh	r3, [fp, #-10]
   2b324:	cmp	r3, #0
   2b328:	beq	2b340 <flatcc_builder_check_union_field@@Base+0x6c>
   2b32c:	ldr	r3, [fp, #-8]
   2b330:	ldrh	r3, [r3, #8]
   2b334:	ldrh	r2, [fp, #-10]
   2b338:	cmp	r2, r3
   2b33c:	bcc	2b348 <flatcc_builder_check_union_field@@Base+0x74>
   2b340:	mov	r3, #0
   2b344:	b	2b420 <flatcc_builder_check_union_field@@Base+0x14c>
   2b348:	ldr	r3, [fp, #-8]
   2b34c:	ldr	r2, [r3, #4]
   2b350:	ldrh	r3, [fp, #-10]
   2b354:	sub	r3, r3, #-2147483647	; 0x80000001
   2b358:	lsl	r3, r3, #1
   2b35c:	add	r3, r2, r3
   2b360:	ldrh	r3, [r3]
   2b364:	cmp	r3, #0
   2b368:	bne	2b398 <flatcc_builder_check_union_field@@Base+0xc4>
   2b36c:	ldr	r3, [fp, #-8]
   2b370:	ldr	r2, [r3, #4]
   2b374:	ldrh	r3, [fp, #-10]
   2b378:	lsl	r3, r3, #1
   2b37c:	add	r3, r2, r3
   2b380:	ldrh	r3, [r3]
   2b384:	cmp	r3, #0
   2b388:	moveq	r3, #1
   2b38c:	movne	r3, #0
   2b390:	uxtb	r3, r3
   2b394:	b	2b420 <flatcc_builder_check_union_field@@Base+0x14c>
   2b398:	ldr	r3, [fp, #-8]
   2b39c:	ldr	r3, [r3, #16]
   2b3a0:	ldr	r2, [fp, #-8]
   2b3a4:	ldr	r1, [r2, #4]
   2b3a8:	ldrh	r2, [fp, #-10]
   2b3ac:	sub	r2, r2, #-2147483647	; 0x80000001
   2b3b0:	lsl	r2, r2, #1
   2b3b4:	add	r2, r1, r2
   2b3b8:	ldrh	r2, [r2]
   2b3bc:	add	r3, r3, r2
   2b3c0:	ldrb	r3, [r3]
   2b3c4:	cmp	r3, #0
   2b3c8:	beq	2b3f8 <flatcc_builder_check_union_field@@Base+0x124>
   2b3cc:	ldr	r3, [fp, #-8]
   2b3d0:	ldr	r2, [r3, #4]
   2b3d4:	ldrh	r3, [fp, #-10]
   2b3d8:	lsl	r3, r3, #1
   2b3dc:	add	r3, r2, r3
   2b3e0:	ldrh	r3, [r3]
   2b3e4:	cmp	r3, #0
   2b3e8:	movne	r3, #1
   2b3ec:	moveq	r3, #0
   2b3f0:	uxtb	r3, r3
   2b3f4:	b	2b420 <flatcc_builder_check_union_field@@Base+0x14c>
   2b3f8:	ldr	r3, [fp, #-8]
   2b3fc:	ldr	r2, [r3, #4]
   2b400:	ldrh	r3, [fp, #-10]
   2b404:	lsl	r3, r3, #1
   2b408:	add	r3, r2, r3
   2b40c:	ldrh	r3, [r3]
   2b410:	cmp	r3, #0
   2b414:	moveq	r3, #1
   2b418:	movne	r3, #0
   2b41c:	uxtb	r3, r3
   2b420:	mov	r0, r3
   2b424:	sub	sp, fp, #4
   2b428:	pop	{fp, pc}
   2b42c:	andeq	r9, r0, r0, lsl lr
   2b430:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2b434:	andeq	r9, r0, r0, lsr #14
   2b438:	ldrdeq	r9, [r0], -r8

0002b43c <flatcc_builder_check_required@@Base>:
   2b43c:	push	{fp, lr}
   2b440:	add	fp, sp, #4
   2b444:	sub	sp, sp, #24
   2b448:	str	r0, [fp, #-16]
   2b44c:	str	r1, [fp, #-20]	; 0xffffffec
   2b450:	str	r2, [fp, #-24]	; 0xffffffe8
   2b454:	ldr	r3, [fp, #-16]
   2b458:	ldr	r3, [r3, #32]
   2b45c:	ldrh	r3, [r3, #14]
   2b460:	cmp	r3, #3
   2b464:	beq	2b488 <flatcc_builder_check_required@@Base+0x4c>
   2b468:	ldr	r3, [pc, #168]	; 2b518 <flatcc_builder_check_required@@Base+0xdc>
   2b46c:	add	r3, pc, r3
   2b470:	ldr	r2, [pc, #164]	; 2b51c <flatcc_builder_check_required@@Base+0xe0>
   2b474:	ldr	r1, [pc, #164]	; 2b520 <flatcc_builder_check_required@@Base+0xe4>
   2b478:	add	r1, pc, r1
   2b47c:	ldr	r0, [pc, #160]	; 2b524 <flatcc_builder_check_required@@Base+0xe8>
   2b480:	add	r0, pc, r0
   2b484:	bl	12a08 <__assert_fail@plt>
   2b488:	ldr	r3, [fp, #-16]
   2b48c:	ldrh	r3, [r3, #8]
   2b490:	mov	r2, r3
   2b494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b498:	cmp	r2, r3
   2b49c:	bge	2b4a8 <flatcc_builder_check_required@@Base+0x6c>
   2b4a0:	mov	r3, #0
   2b4a4:	b	2b50c <flatcc_builder_check_required@@Base+0xd0>
   2b4a8:	mov	r3, #0
   2b4ac:	str	r3, [fp, #-8]
   2b4b0:	b	2b4f8 <flatcc_builder_check_required@@Base+0xbc>
   2b4b4:	ldr	r3, [fp, #-16]
   2b4b8:	ldr	r2, [r3, #4]
   2b4bc:	ldr	r3, [fp, #-8]
   2b4c0:	lsl	r3, r3, #1
   2b4c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   2b4c8:	add	r3, r1, r3
   2b4cc:	ldrh	r3, [r3]
   2b4d0:	lsl	r3, r3, #1
   2b4d4:	add	r3, r2, r3
   2b4d8:	ldrh	r3, [r3]
   2b4dc:	cmp	r3, #0
   2b4e0:	bne	2b4ec <flatcc_builder_check_required@@Base+0xb0>
   2b4e4:	mov	r3, #0
   2b4e8:	b	2b50c <flatcc_builder_check_required@@Base+0xd0>
   2b4ec:	ldr	r3, [fp, #-8]
   2b4f0:	add	r3, r3, #1
   2b4f4:	str	r3, [fp, #-8]
   2b4f8:	ldr	r2, [fp, #-8]
   2b4fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b500:	cmp	r2, r3
   2b504:	blt	2b4b4 <flatcc_builder_check_required@@Base+0x78>
   2b508:	mov	r3, #1
   2b50c:	mov	r0, r3
   2b510:	sub	sp, fp, #4
   2b514:	pop	{fp, pc}
   2b518:	andeq	r9, r0, ip, asr #25
   2b51c:	andeq	r0, r0, r1, lsl r5
   2b520:			; <UNDEFINED> instruction: 0x000095b8
   2b524:	andeq	r9, r0, r0, ror r8

0002b528 <flatcc_builder_end_table@@Base>:
   2b528:	push	{fp, lr}
   2b52c:	add	fp, sp, #4
   2b530:	sub	sp, sp, #48	; 0x30
   2b534:	str	r0, [fp, #-32]	; 0xffffffe0
   2b538:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b53c:	ldr	r3, [r3, #32]
   2b540:	ldrh	r3, [r3, #14]
   2b544:	cmp	r3, #3
   2b548:	beq	2b56c <flatcc_builder_end_table@@Base+0x44>
   2b54c:	ldr	r3, [pc, #508]	; 2b750 <flatcc_builder_end_table@@Base+0x228>
   2b550:	add	r3, pc, r3
   2b554:	ldr	r2, [pc, #504]	; 2b754 <flatcc_builder_end_table@@Base+0x22c>
   2b558:	ldr	r1, [pc, #504]	; 2b758 <flatcc_builder_end_table@@Base+0x230>
   2b55c:	add	r1, pc, r1
   2b560:	ldr	r0, [pc, #500]	; 2b75c <flatcc_builder_end_table@@Base+0x234>
   2b564:	add	r0, pc, r0
   2b568:	bl	12a08 <__assert_fail@plt>
   2b56c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b570:	ldr	r3, [r3, #4]
   2b574:	sub	r3, r3, #4
   2b578:	str	r3, [fp, #-8]
   2b57c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b580:	ldrh	r3, [r3, #8]
   2b584:	add	r3, r3, #2
   2b588:	uxth	r3, r3
   2b58c:	lsl	r3, r3, #1
   2b590:	strh	r3, [fp, #-10]
   2b594:	ldr	r3, [fp, #-8]
   2b598:	ldrh	r2, [fp, #-10]
   2b59c:	strh	r2, [r3]
   2b5a0:	ldr	r3, [fp, #-8]
   2b5a4:	add	r3, r3, #2
   2b5a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2b5ac:	ldr	r2, [r2, #20]
   2b5b0:	uxth	r2, r2
   2b5b4:	add	r2, r2, #4
   2b5b8:	uxth	r2, r2
   2b5bc:	strh	r2, [r3]
   2b5c0:	ldr	r3, [fp, #-8]
   2b5c4:	ldrh	r3, [r3]
   2b5c8:	mov	r2, r3
   2b5cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b5d0:	ldr	r3, [r3, #12]
   2b5d4:	eor	r3, r3, r2
   2b5d8:	ldr	r2, [pc, #384]	; 2b760 <flatcc_builder_end_table@@Base+0x238>
   2b5dc:	mul	r3, r2, r3
   2b5e0:	ldr	r2, [fp, #-8]
   2b5e4:	add	r2, r2, #2
   2b5e8:	ldrh	r2, [r2]
   2b5ec:	eor	r3, r3, r2
   2b5f0:	ldr	r2, [pc, #360]	; 2b760 <flatcc_builder_end_table@@Base+0x238>
   2b5f4:	mul	r2, r2, r3
   2b5f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b5fc:	str	r2, [r3, #12]
   2b600:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b604:	ldr	r3, [r3, #12]
   2b608:	ldrh	r2, [fp, #-10]
   2b60c:	ldr	r1, [fp, #-8]
   2b610:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b614:	bl	2abf8 <flatcc_builder_create_cached_vtable@@Base>
   2b618:	str	r0, [fp, #-16]
   2b61c:	ldr	r3, [fp, #-16]
   2b620:	cmp	r3, #0
   2b624:	bne	2b630 <flatcc_builder_end_table@@Base+0x108>
   2b628:	mov	r3, #0
   2b62c:	b	2b744 <flatcc_builder_end_table@@Base+0x21c>
   2b630:	ldrh	r3, [fp, #-10]
   2b634:	mov	r2, r3
   2b638:	mov	r1, #0
   2b63c:	ldr	r0, [fp, #-8]
   2b640:	bl	129c0 <memset@plt>
   2b644:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b648:	ldr	r2, [r3, #76]	; 0x4c
   2b64c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b650:	ldr	r3, [r3, #32]
   2b654:	ldr	r3, [r3, #20]
   2b658:	add	r3, r2, r3
   2b65c:	str	r3, [fp, #-20]	; 0xffffffec
   2b660:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b664:	ldr	r3, [r3]
   2b668:	mov	r2, r3
   2b66c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b670:	sub	r3, r2, r3
   2b674:	asr	r3, r3, #1
   2b678:	str	r3, [fp, #-24]	; 0xffffffe8
   2b67c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b680:	ldr	r1, [r3, #16]
   2b684:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b688:	ldr	r2, [r3, #20]
   2b68c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b690:	ldrh	r0, [r3, #130]	; 0x82
   2b694:	ldr	r3, [fp, #-16]
   2b698:	str	r3, [sp, #8]
   2b69c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2b6a0:	str	r3, [sp, #4]
   2b6a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b6a8:	str	r3, [sp]
   2b6ac:	mov	r3, r0
   2b6b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b6b4:	bl	2af08 <flatcc_builder_create_table@@Base>
   2b6b8:	str	r0, [fp, #-28]	; 0xffffffe4
   2b6bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2b6c0:	cmp	r3, #0
   2b6c4:	bne	2b6d0 <flatcc_builder_end_table@@Base+0x1a8>
   2b6c8:	mov	r3, #0
   2b6cc:	b	2b744 <flatcc_builder_end_table@@Base+0x21c>
   2b6d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b6d4:	ldr	r3, [r3, #32]
   2b6d8:	ldr	r2, [r3, #24]
   2b6dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b6e0:	str	r2, [r3, #12]
   2b6e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b6e8:	ldr	r3, [r3, #32]
   2b6ec:	ldrh	r2, [r3, #28]
   2b6f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b6f4:	strh	r2, [r3, #8]
   2b6f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b6fc:	ldr	r2, [r3, #52]	; 0x34
   2b700:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b704:	ldr	r3, [r3, #32]
   2b708:	ldr	r3, [r3, #16]
   2b70c:	add	r2, r2, r3
   2b710:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b714:	str	r2, [r3, #4]
   2b718:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b71c:	ldr	r2, [r3, #76]	; 0x4c
   2b720:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b724:	ldr	r3, [r3, #32]
   2b728:	ldr	r3, [r3, #20]
   2b72c:	add	r2, r2, r3
   2b730:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2b734:	str	r2, [r3]
   2b738:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b73c:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2b740:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2b744:	mov	r0, r3
   2b748:	sub	sp, fp, #4
   2b74c:	pop	{fp, pc}
   2b750:	andeq	r9, r0, r8, lsl #24
   2b754:	andeq	r0, r0, r5, lsr #10
   2b758:	ldrdeq	r9, [r0], -r4
   2b75c:	andeq	r9, r0, ip, lsl #15
   2b760:			; <UNDEFINED> instruction: 0x9e3779b1

0002b764 <flatcc_builder_create_vector@@Base>:
   2b764:	push	{r4, fp, lr}
   2b768:	add	fp, sp, #8
   2b76c:	sub	sp, sp, #108	; 0x6c
   2b770:	str	r0, [fp, #-104]	; 0xffffff98
   2b774:	str	r1, [fp, #-108]	; 0xffffff94
   2b778:	str	r2, [fp, #-112]	; 0xffffff90
   2b77c:	str	r3, [fp, #-116]	; 0xffffff8c
   2b780:	ldr	r4, [pc, #484]	; 2b96c <flatcc_builder_create_vector@@Base+0x208>
   2b784:	add	r4, pc, r4
   2b788:	ldr	r2, [fp, #-112]	; 0xffffff90
   2b78c:	ldr	r3, [fp, #8]
   2b790:	cmp	r2, r3
   2b794:	bls	2b7d0 <flatcc_builder_create_vector@@Base+0x6c>
   2b798:	ldr	r2, [fp, #-112]	; 0xffffff90
   2b79c:	ldr	r3, [fp, #8]
   2b7a0:	cmp	r2, r3
   2b7a4:	bls	2b7c8 <flatcc_builder_create_vector@@Base+0x64>
   2b7a8:	ldr	r3, [pc, #448]	; 2b970 <flatcc_builder_create_vector@@Base+0x20c>
   2b7ac:	add	r3, pc, r3
   2b7b0:	ldr	r2, [pc, #444]	; 2b974 <flatcc_builder_create_vector@@Base+0x210>
   2b7b4:	ldr	r1, [pc, #444]	; 2b978 <flatcc_builder_create_vector@@Base+0x214>
   2b7b8:	add	r1, pc, r1
   2b7bc:	ldr	r0, [pc, #440]	; 2b97c <flatcc_builder_create_vector@@Base+0x218>
   2b7c0:	add	r0, pc, r0
   2b7c4:	bl	12a08 <__assert_fail@plt>
   2b7c8:	mov	r3, #0
   2b7cc:	b	2b960 <flatcc_builder_create_vector@@Base+0x1fc>
   2b7d0:	mov	r1, #4
   2b7d4:	add	r3, fp, #4
   2b7d8:	mov	r0, r3
   2b7dc:	bl	2880c <flatcc_builder_clear@@Base+0xf8>
   2b7e0:	ldrh	r3, [fp, #4]
   2b7e4:	mov	r1, r3
   2b7e8:	ldr	r0, [fp, #-104]	; 0xffffff98
   2b7ec:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   2b7f0:	ldr	r3, [fp, #-112]	; 0xffffff90
   2b7f4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2b7f8:	mul	r3, r2, r3
   2b7fc:	str	r3, [fp, #-16]
   2b800:	ldr	r0, [fp, #-112]	; 0xffffff90
   2b804:	bl	277c4 <main@@Base+0x524>
   2b808:	mov	r3, r0
   2b80c:	str	r3, [fp, #-24]	; 0xffffffe8
   2b810:	ldrh	r3, [fp, #4]
   2b814:	mov	r2, r3
   2b818:	ldr	r1, [fp, #-16]
   2b81c:	ldr	r0, [fp, #-104]	; 0xffffff98
   2b820:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   2b824:	str	r0, [fp, #-20]	; 0xffffffec
   2b828:	mov	r3, #0
   2b82c:	str	r3, [fp, #-96]	; 0xffffffa0
   2b830:	mov	r3, #0
   2b834:	str	r3, [fp, #-92]	; 0xffffffa4
   2b838:	ldr	r3, [fp, #-96]	; 0xffffffa0
   2b83c:	add	r3, r3, #4
   2b840:	str	r3, [fp, #-96]	; 0xffffffa0
   2b844:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b848:	add	r3, r3, #1
   2b84c:	lsl	r3, r3, #3
   2b850:	sub	r2, fp, #12
   2b854:	add	r3, r2, r3
   2b858:	sub	r2, fp, #24
   2b85c:	str	r2, [r3, #-84]	; 0xffffffac
   2b860:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b864:	add	r3, r3, #1
   2b868:	lsl	r3, r3, #3
   2b86c:	sub	r2, fp, #12
   2b870:	add	r3, r2, r3
   2b874:	mov	r2, #4
   2b878:	str	r2, [r3, #-80]	; 0xffffffb0
   2b87c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b880:	add	r3, r3, #1
   2b884:	str	r3, [fp, #-92]	; 0xffffffa4
   2b888:	ldr	r3, [fp, #-16]
   2b88c:	cmp	r3, #0
   2b890:	beq	2b8e8 <flatcc_builder_create_vector@@Base+0x184>
   2b894:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2b898:	ldr	r3, [fp, #-16]
   2b89c:	add	r3, r2, r3
   2b8a0:	str	r3, [fp, #-96]	; 0xffffffa0
   2b8a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b8a8:	add	r3, r3, #1
   2b8ac:	lsl	r3, r3, #3
   2b8b0:	sub	r2, fp, #12
   2b8b4:	add	r3, r2, r3
   2b8b8:	ldr	r2, [fp, #-108]	; 0xffffff94
   2b8bc:	str	r2, [r3, #-84]	; 0xffffffac
   2b8c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b8c4:	add	r3, r3, #1
   2b8c8:	lsl	r3, r3, #3
   2b8cc:	sub	r2, fp, #12
   2b8d0:	add	r3, r2, r3
   2b8d4:	ldr	r2, [fp, #-16]
   2b8d8:	str	r2, [r3, #-80]	; 0xffffffb0
   2b8dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b8e0:	add	r3, r3, #1
   2b8e4:	str	r3, [fp, #-92]	; 0xffffffa4
   2b8e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b8ec:	cmp	r3, #0
   2b8f0:	beq	2b94c <flatcc_builder_create_vector@@Base+0x1e8>
   2b8f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2b8f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2b8fc:	add	r3, r2, r3
   2b900:	str	r3, [fp, #-96]	; 0xffffffa0
   2b904:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b908:	add	r3, r3, #1
   2b90c:	lsl	r3, r3, #3
   2b910:	sub	r2, fp, #12
   2b914:	add	r3, r2, r3
   2b918:	ldr	r2, [pc, #96]	; 2b980 <flatcc_builder_create_vector@@Base+0x21c>
   2b91c:	ldr	r2, [r4, r2]
   2b920:	str	r2, [r3, #-84]	; 0xffffffac
   2b924:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b928:	add	r3, r3, #1
   2b92c:	lsl	r3, r3, #3
   2b930:	sub	r2, fp, #12
   2b934:	add	r3, r2, r3
   2b938:	ldr	r2, [fp, #-20]	; 0xffffffec
   2b93c:	str	r2, [r3, #-80]	; 0xffffffb0
   2b940:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2b944:	add	r3, r3, #1
   2b948:	str	r3, [fp, #-92]	; 0xffffffa4
   2b94c:	sub	r3, fp, #96	; 0x60
   2b950:	mov	r1, r3
   2b954:	ldr	r0, [fp, #-104]	; 0xffffff98
   2b958:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   2b95c:	mov	r3, r0
   2b960:	mov	r0, r3
   2b964:	sub	sp, fp, #8
   2b968:	pop	{r4, fp, pc}
   2b96c:	andeq	sl, r1, r4, ror r8
   2b970:	andeq	r9, r0, r8, asr #19
   2b974:	andeq	r0, r0, r5, asr r5
   2b978:	andeq	r9, r0, r8, ror r2
   2b97c:	andeq	r9, r0, ip, asr r5
   2b980:	andeq	r0, r0, r4, rrx

0002b984 <flatcc_builder_end_vector@@Base>:
   2b984:	push	{fp, lr}
   2b988:	add	fp, sp, #4
   2b98c:	sub	sp, sp, #24
   2b990:	str	r0, [fp, #-16]
   2b994:	ldr	r3, [fp, #-16]
   2b998:	ldr	r3, [r3, #32]
   2b99c:	ldrh	r3, [r3, #14]
   2b9a0:	cmp	r3, #4
   2b9a4:	beq	2b9c8 <flatcc_builder_end_vector@@Base+0x44>
   2b9a8:	ldr	r3, [pc, #148]	; 2ba44 <flatcc_builder_end_vector@@Base+0xc0>
   2b9ac:	add	r3, pc, r3
   2b9b0:	ldr	r2, [pc, #144]	; 2ba48 <flatcc_builder_end_vector@@Base+0xc4>
   2b9b4:	ldr	r1, [pc, #144]	; 2ba4c <flatcc_builder_end_vector@@Base+0xc8>
   2b9b8:	add	r1, pc, r1
   2b9bc:	ldr	r0, [pc, #140]	; 2ba50 <flatcc_builder_end_vector@@Base+0xcc>
   2b9c0:	add	r0, pc, r0
   2b9c4:	bl	12a08 <__assert_fail@plt>
   2b9c8:	ldr	r3, [fp, #-16]
   2b9cc:	ldr	r1, [r3, #16]
   2b9d0:	ldr	r3, [fp, #-16]
   2b9d4:	ldr	r3, [r3, #32]
   2b9d8:	ldr	r0, [r3, #20]
   2b9dc:	ldr	r3, [fp, #-16]
   2b9e0:	ldr	r3, [r3, #32]
   2b9e4:	ldr	ip, [r3, #16]
   2b9e8:	ldr	r3, [fp, #-16]
   2b9ec:	ldrh	r3, [r3, #130]	; 0x82
   2b9f0:	ldr	r2, [fp, #-16]
   2b9f4:	ldr	r2, [r2, #32]
   2b9f8:	ldr	r2, [r2, #24]
   2b9fc:	str	r2, [sp, #4]
   2ba00:	str	r3, [sp]
   2ba04:	mov	r3, ip
   2ba08:	mov	r2, r0
   2ba0c:	ldr	r0, [fp, #-16]
   2ba10:	bl	2b764 <flatcc_builder_create_vector@@Base>
   2ba14:	str	r0, [fp, #-8]
   2ba18:	ldr	r3, [fp, #-8]
   2ba1c:	cmp	r3, #0
   2ba20:	bne	2ba2c <flatcc_builder_end_vector@@Base+0xa8>
   2ba24:	mov	r3, #0
   2ba28:	b	2ba38 <flatcc_builder_end_vector@@Base+0xb4>
   2ba2c:	ldr	r0, [fp, #-16]
   2ba30:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2ba34:	ldr	r3, [fp, #-8]
   2ba38:	mov	r0, r3
   2ba3c:	sub	sp, fp, #4
   2ba40:	pop	{fp, pc}
   2ba44:	andeq	r9, r0, r8, ror #15
   2ba48:	andeq	r0, r0, r8, ror r5
   2ba4c:	andeq	r9, r0, r8, ror r0
   2ba50:			; <UNDEFINED> instruction: 0x000091b4

0002ba54 <flatcc_builder_vector_count@@Base>:
   2ba54:	push	{fp}		; (str fp, [sp, #-4]!)
   2ba58:	add	fp, sp, #0
   2ba5c:	sub	sp, sp, #12
   2ba60:	str	r0, [fp, #-8]
   2ba64:	ldr	r3, [fp, #-8]
   2ba68:	ldr	r3, [r3, #32]
   2ba6c:	ldr	r3, [r3, #20]
   2ba70:	mov	r0, r3
   2ba74:	add	sp, fp, #0
   2ba78:	pop	{fp}		; (ldr fp, [sp], #4)
   2ba7c:	bx	lr

0002ba80 <flatcc_builder_vector_edit@@Base>:
   2ba80:	push	{fp}		; (str fp, [sp, #-4]!)
   2ba84:	add	fp, sp, #0
   2ba88:	sub	sp, sp, #12
   2ba8c:	str	r0, [fp, #-8]
   2ba90:	ldr	r3, [fp, #-8]
   2ba94:	ldr	r3, [r3, #16]
   2ba98:	mov	r0, r3
   2ba9c:	add	sp, fp, #0
   2baa0:	pop	{fp}		; (ldr fp, [sp], #4)
   2baa4:	bx	lr
   2baa8:	push	{r4, fp, lr}
   2baac:	add	fp, sp, #8
   2bab0:	sub	sp, sp, #116	; 0x74
   2bab4:	str	r0, [fp, #-112]	; 0xffffff90
   2bab8:	str	r1, [fp, #-116]	; 0xffffff8c
   2babc:	str	r2, [fp, #-120]	; 0xffffff88
   2bac0:	str	r3, [fp, #-124]	; 0xffffff84
   2bac4:	ldr	r4, [pc, #748]	; 2bdb8 <flatcc_builder_vector_edit@@Base+0x338>
   2bac8:	add	r4, pc, r4
   2bacc:	ldr	r3, [fp, #-120]	; 0xffffff88
   2bad0:	cmn	r3, #-1073741823	; 0xc0000001
   2bad4:	bls	2bae0 <flatcc_builder_vector_edit@@Base+0x60>
   2bad8:	mov	r3, #0
   2badc:	b	2bdac <flatcc_builder_vector_edit@@Base+0x32c>
   2bae0:	mov	r1, #4
   2bae4:	ldr	r0, [fp, #-112]	; 0xffffff90
   2bae8:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   2baec:	ldr	r3, [fp, #-120]	; 0xffffff88
   2baf0:	lsl	r3, r3, #2
   2baf4:	str	r3, [fp, #-20]	; 0xffffffec
   2baf8:	ldr	r0, [fp, #-120]	; 0xffffff88
   2bafc:	bl	277c4 <main@@Base+0x524>
   2bb00:	mov	r3, r0
   2bb04:	str	r3, [fp, #-36]	; 0xffffffdc
   2bb08:	mov	r2, #4
   2bb0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   2bb10:	ldr	r0, [fp, #-112]	; 0xffffff90
   2bb14:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   2bb18:	str	r0, [fp, #-24]	; 0xffffffe8
   2bb1c:	mov	r3, #0
   2bb20:	str	r3, [fp, #-108]	; 0xffffff94
   2bb24:	mov	r3, #0
   2bb28:	str	r3, [fp, #-104]	; 0xffffff98
   2bb2c:	ldr	r3, [fp, #-108]	; 0xffffff94
   2bb30:	add	r3, r3, #4
   2bb34:	str	r3, [fp, #-108]	; 0xffffff94
   2bb38:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bb3c:	add	r3, r3, #1
   2bb40:	lsl	r3, r3, #3
   2bb44:	sub	r2, fp, #12
   2bb48:	add	r3, r2, r3
   2bb4c:	sub	r2, fp, #36	; 0x24
   2bb50:	str	r2, [r3, #-96]	; 0xffffffa0
   2bb54:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bb58:	add	r3, r3, #1
   2bb5c:	lsl	r3, r3, #3
   2bb60:	sub	r2, fp, #12
   2bb64:	add	r3, r2, r3
   2bb68:	mov	r2, #4
   2bb6c:	str	r2, [r3, #-92]	; 0xffffffa4
   2bb70:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bb74:	add	r3, r3, #1
   2bb78:	str	r3, [fp, #-104]	; 0xffffff98
   2bb7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2bb80:	cmp	r3, #0
   2bb84:	beq	2bbdc <flatcc_builder_vector_edit@@Base+0x15c>
   2bb88:	ldr	r2, [fp, #-108]	; 0xffffff94
   2bb8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2bb90:	add	r3, r2, r3
   2bb94:	str	r3, [fp, #-108]	; 0xffffff94
   2bb98:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bb9c:	add	r3, r3, #1
   2bba0:	lsl	r3, r3, #3
   2bba4:	sub	r2, fp, #12
   2bba8:	add	r3, r2, r3
   2bbac:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2bbb0:	str	r2, [r3, #-96]	; 0xffffffa0
   2bbb4:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bbb8:	add	r3, r3, #1
   2bbbc:	lsl	r3, r3, #3
   2bbc0:	sub	r2, fp, #12
   2bbc4:	add	r3, r2, r3
   2bbc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   2bbcc:	str	r2, [r3, #-92]	; 0xffffffa4
   2bbd0:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bbd4:	add	r3, r3, #1
   2bbd8:	str	r3, [fp, #-104]	; 0xffffff98
   2bbdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bbe0:	cmp	r3, #0
   2bbe4:	beq	2bc40 <flatcc_builder_vector_edit@@Base+0x1c0>
   2bbe8:	ldr	r2, [fp, #-108]	; 0xffffff94
   2bbec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bbf0:	add	r3, r2, r3
   2bbf4:	str	r3, [fp, #-108]	; 0xffffff94
   2bbf8:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bbfc:	add	r3, r3, #1
   2bc00:	lsl	r3, r3, #3
   2bc04:	sub	r2, fp, #12
   2bc08:	add	r3, r2, r3
   2bc0c:	ldr	r2, [pc, #424]	; 2bdbc <flatcc_builder_vector_edit@@Base+0x33c>
   2bc10:	ldr	r2, [r4, r2]
   2bc14:	str	r2, [r3, #-96]	; 0xffffffa0
   2bc18:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bc1c:	add	r3, r3, #1
   2bc20:	lsl	r3, r3, #3
   2bc24:	sub	r2, fp, #12
   2bc28:	add	r3, r2, r3
   2bc2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2bc30:	str	r2, [r3, #-92]	; 0xffffffa4
   2bc34:	ldr	r3, [fp, #-104]	; 0xffffff98
   2bc38:	add	r3, r3, #1
   2bc3c:	str	r3, [fp, #-104]	; 0xffffff98
   2bc40:	ldr	r3, [fp, #-112]	; 0xffffff90
   2bc44:	ldr	r3, [r3, #136]	; 0x88
   2bc48:	mov	r2, r3
   2bc4c:	ldr	r3, [fp, #-108]	; 0xffffff94
   2bc50:	sub	r3, r2, r3
   2bc54:	str	r3, [fp, #-28]	; 0xffffffe4
   2bc58:	mov	r3, #0
   2bc5c:	str	r3, [fp, #-16]
   2bc60:	b	2bd88 <flatcc_builder_vector_edit@@Base+0x308>
   2bc64:	ldr	r3, [fp, #-16]
   2bc68:	lsl	r3, r3, #2
   2bc6c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2bc70:	add	r3, r2, r3
   2bc74:	ldr	r3, [r3]
   2bc78:	cmp	r3, #0
   2bc7c:	beq	2bd18 <flatcc_builder_vector_edit@@Base+0x298>
   2bc80:	ldr	r3, [fp, #-16]
   2bc84:	lsl	r3, r3, #2
   2bc88:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2bc8c:	add	r3, r2, r3
   2bc90:	ldr	r3, [r3]
   2bc94:	mov	r2, r3
   2bc98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2bc9c:	sub	r2, r2, r3
   2bca0:	ldr	r3, [fp, #-16]
   2bca4:	lsl	r3, r3, #2
   2bca8:	sub	r3, r2, r3
   2bcac:	sub	r3, r3, #4
   2bcb0:	str	r3, [fp, #-32]	; 0xffffffe0
   2bcb4:	ldr	r3, [fp, #-16]
   2bcb8:	lsl	r3, r3, #2
   2bcbc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   2bcc0:	add	r4, r2, r3
   2bcc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2bcc8:	bl	277c4 <main@@Base+0x524>
   2bccc:	mov	r3, r0
   2bcd0:	str	r3, [r4]
   2bcd4:	ldr	r3, [fp, #-124]	; 0xffffff84
   2bcd8:	cmp	r3, #0
   2bcdc:	beq	2bd7c <flatcc_builder_vector_edit@@Base+0x2fc>
   2bce0:	ldr	r2, [fp, #-124]	; 0xffffff84
   2bce4:	ldr	r3, [fp, #-16]
   2bce8:	add	r3, r2, r3
   2bcec:	ldrb	r3, [r3]
   2bcf0:	cmp	r3, #0
   2bcf4:	bne	2bd7c <flatcc_builder_vector_edit@@Base+0x2fc>
   2bcf8:	ldr	r3, [pc, #192]	; 2bdc0 <flatcc_builder_vector_edit@@Base+0x340>
   2bcfc:	add	r3, pc, r3
   2bd00:	ldr	r2, [pc, #188]	; 2bdc4 <flatcc_builder_vector_edit@@Base+0x344>
   2bd04:	ldr	r1, [pc, #188]	; 2bdc8 <flatcc_builder_vector_edit@@Base+0x348>
   2bd08:	add	r1, pc, r1
   2bd0c:	ldr	r0, [pc, #184]	; 2bdcc <flatcc_builder_vector_edit@@Base+0x34c>
   2bd10:	add	r0, pc, r0
   2bd14:	bl	12a08 <__assert_fail@plt>
   2bd18:	ldr	r3, [fp, #-124]	; 0xffffff84
   2bd1c:	cmp	r3, #0
   2bd20:	beq	2bd5c <flatcc_builder_vector_edit@@Base+0x2dc>
   2bd24:	ldr	r2, [fp, #-124]	; 0xffffff84
   2bd28:	ldr	r3, [fp, #-16]
   2bd2c:	add	r3, r2, r3
   2bd30:	ldrb	r3, [r3]
   2bd34:	cmp	r3, #0
   2bd38:	beq	2bd7c <flatcc_builder_vector_edit@@Base+0x2fc>
   2bd3c:	ldr	r3, [pc, #140]	; 2bdd0 <flatcc_builder_vector_edit@@Base+0x350>
   2bd40:	add	r3, pc, r3
   2bd44:	ldr	r2, [pc, #136]	; 2bdd4 <flatcc_builder_vector_edit@@Base+0x354>
   2bd48:	ldr	r1, [pc, #136]	; 2bdd8 <flatcc_builder_vector_edit@@Base+0x358>
   2bd4c:	add	r1, pc, r1
   2bd50:	ldr	r0, [pc, #132]	; 2bddc <flatcc_builder_vector_edit@@Base+0x35c>
   2bd54:	add	r0, pc, r0
   2bd58:	bl	12a08 <__assert_fail@plt>
   2bd5c:	ldr	r3, [pc, #124]	; 2bde0 <flatcc_builder_vector_edit@@Base+0x360>
   2bd60:	add	r3, pc, r3
   2bd64:	ldr	r2, [pc, #120]	; 2bde4 <flatcc_builder_vector_edit@@Base+0x364>
   2bd68:	ldr	r1, [pc, #120]	; 2bde8 <flatcc_builder_vector_edit@@Base+0x368>
   2bd6c:	add	r1, pc, r1
   2bd70:	ldr	r0, [pc, #116]	; 2bdec <flatcc_builder_vector_edit@@Base+0x36c>
   2bd74:	add	r0, pc, r0
   2bd78:	bl	12a08 <__assert_fail@plt>
   2bd7c:	ldr	r3, [fp, #-16]
   2bd80:	add	r3, r3, #1
   2bd84:	str	r3, [fp, #-16]
   2bd88:	ldr	r2, [fp, #-16]
   2bd8c:	ldr	r3, [fp, #-120]	; 0xffffff88
   2bd90:	cmp	r2, r3
   2bd94:	bcc	2bc64 <flatcc_builder_vector_edit@@Base+0x1e4>
   2bd98:	sub	r3, fp, #108	; 0x6c
   2bd9c:	mov	r1, r3
   2bda0:	ldr	r0, [fp, #-112]	; 0xffffff90
   2bda4:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   2bda8:	mov	r3, r0
   2bdac:	mov	r0, r3
   2bdb0:	sub	sp, fp, #8
   2bdb4:	pop	{r4, fp, pc}
   2bdb8:	andeq	sl, r1, r0, lsr r5
   2bdbc:	andeq	r0, r0, r4, rrx
   2bdc0:			; <UNDEFINED> instruction: 0x000094b4
   2bdc4:			; <UNDEFINED> instruction: 0x000005b1
   2bdc8:	andeq	r8, r0, r8, lsr #26
   2bdcc:	andeq	r9, r0, r0, lsr #32
   2bdd0:	andeq	r9, r0, r0, ror r4
   2bdd4:			; <UNDEFINED> instruction: 0x000005b5
   2bdd8:	andeq	r8, r0, r4, ror #25
   2bddc:	andeq	r8, r0, ip, ror #31
   2bde0:	andeq	r9, r0, r0, asr r4
   2bde4:			; <UNDEFINED> instruction: 0x000005b7
   2bde8:	andeq	r8, r0, r4, asr #25
   2bdec:	andeq	r8, r0, ip, lsl sp

0002bdf0 <flatcc_builder_create_offset_vector_direct@@Base>:
   2bdf0:	push	{fp, lr}
   2bdf4:	add	fp, sp, #4
   2bdf8:	sub	sp, sp, #16
   2bdfc:	str	r0, [fp, #-8]
   2be00:	str	r1, [fp, #-12]
   2be04:	str	r2, [fp, #-16]
   2be08:	mov	r3, #0
   2be0c:	ldr	r2, [fp, #-16]
   2be10:	ldr	r1, [fp, #-12]
   2be14:	ldr	r0, [fp, #-8]
   2be18:	bl	2baa8 <flatcc_builder_vector_edit@@Base+0x28>
   2be1c:	mov	r3, r0
   2be20:	mov	r0, r3
   2be24:	sub	sp, fp, #4
   2be28:	pop	{fp, pc}

0002be2c <flatcc_builder_end_offset_vector@@Base>:
   2be2c:	push	{fp, lr}
   2be30:	add	fp, sp, #4
   2be34:	sub	sp, sp, #16
   2be38:	str	r0, [fp, #-16]
   2be3c:	ldr	r3, [fp, #-16]
   2be40:	ldr	r3, [r3, #32]
   2be44:	ldrh	r3, [r3, #14]
   2be48:	cmp	r3, #5
   2be4c:	beq	2be70 <flatcc_builder_end_offset_vector@@Base+0x44>
   2be50:	ldr	r3, [pc, #104]	; 2bec0 <flatcc_builder_end_offset_vector@@Base+0x94>
   2be54:	add	r3, pc, r3
   2be58:	ldr	r2, [pc, #100]	; 2bec4 <flatcc_builder_end_offset_vector@@Base+0x98>
   2be5c:	ldr	r1, [pc, #100]	; 2bec8 <flatcc_builder_end_offset_vector@@Base+0x9c>
   2be60:	add	r1, pc, r1
   2be64:	ldr	r0, [pc, #96]	; 2becc <flatcc_builder_end_offset_vector@@Base+0xa0>
   2be68:	add	r0, pc, r0
   2be6c:	bl	12a08 <__assert_fail@plt>
   2be70:	ldr	r3, [fp, #-16]
   2be74:	ldr	r1, [r3, #16]
   2be78:	ldr	r3, [fp, #-16]
   2be7c:	ldr	r3, [r3, #32]
   2be80:	ldr	r3, [r3, #20]
   2be84:	mov	r2, r3
   2be88:	ldr	r0, [fp, #-16]
   2be8c:	bl	2bdf0 <flatcc_builder_create_offset_vector_direct@@Base>
   2be90:	str	r0, [fp, #-8]
   2be94:	ldr	r3, [fp, #-8]
   2be98:	cmp	r3, #0
   2be9c:	bne	2bea8 <flatcc_builder_end_offset_vector@@Base+0x7c>
   2bea0:	mov	r3, #0
   2bea4:	b	2beb4 <flatcc_builder_end_offset_vector@@Base+0x88>
   2bea8:	ldr	r0, [fp, #-16]
   2beac:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2beb0:	ldr	r3, [fp, #-8]
   2beb4:	mov	r0, r3
   2beb8:	sub	sp, fp, #4
   2bebc:	pop	{fp, pc}
   2bec0:	andeq	r9, r0, ip, ror r3
   2bec4:	andeq	r0, r0, r8, asr #11
   2bec8:	ldrdeq	r8, [r0], -r0
   2becc:	andeq	r8, r0, r8, ror sp

0002bed0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2bed0:	push	{fp, lr}
   2bed4:	add	fp, sp, #4
   2bed8:	sub	sp, sp, #16
   2bedc:	str	r0, [fp, #-16]
   2bee0:	str	r1, [fp, #-20]	; 0xffffffec
   2bee4:	ldr	r3, [fp, #-16]
   2bee8:	ldr	r3, [r3, #32]
   2beec:	ldrh	r3, [r3, #14]
   2bef0:	cmp	r3, #5
   2bef4:	beq	2bf18 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   2bef8:	ldr	r3, [pc, #104]	; 2bf68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   2befc:	add	r3, pc, r3
   2bf00:	ldr	r2, [pc, #100]	; 2bf6c <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   2bf04:	ldr	r1, [pc, #100]	; 2bf70 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   2bf08:	add	r1, pc, r1
   2bf0c:	ldr	r0, [pc, #96]	; 2bf74 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   2bf10:	add	r0, pc, r0
   2bf14:	bl	12a08 <__assert_fail@plt>
   2bf18:	ldr	r3, [fp, #-16]
   2bf1c:	ldr	r1, [r3, #16]
   2bf20:	ldr	r3, [fp, #-16]
   2bf24:	ldr	r3, [r3, #32]
   2bf28:	ldr	r2, [r3, #20]
   2bf2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2bf30:	ldr	r0, [fp, #-16]
   2bf34:	bl	2baa8 <flatcc_builder_vector_edit@@Base+0x28>
   2bf38:	str	r0, [fp, #-8]
   2bf3c:	ldr	r3, [fp, #-8]
   2bf40:	cmp	r3, #0
   2bf44:	bne	2bf50 <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   2bf48:	mov	r3, #0
   2bf4c:	b	2bf5c <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   2bf50:	ldr	r0, [fp, #-16]
   2bf54:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2bf58:	ldr	r3, [fp, #-8]
   2bf5c:	mov	r0, r3
   2bf60:	sub	sp, fp, #4
   2bf64:	pop	{fp, pc}
   2bf68:	strdeq	r9, [r0], -r8
   2bf6c:	ldrdeq	r0, [r0], -r5
   2bf70:	andeq	r8, r0, r8, lsr #22
   2bf74:	ldrdeq	r8, [r0], -r0

0002bf78 <flatcc_builder_offset_vector_edit@@Base>:
   2bf78:	push	{fp}		; (str fp, [sp, #-4]!)
   2bf7c:	add	fp, sp, #0
   2bf80:	sub	sp, sp, #12
   2bf84:	str	r0, [fp, #-8]
   2bf88:	ldr	r3, [fp, #-8]
   2bf8c:	ldr	r3, [r3, #16]
   2bf90:	mov	r0, r3
   2bf94:	add	sp, fp, #0
   2bf98:	pop	{fp}		; (ldr fp, [sp], #4)
   2bf9c:	bx	lr

0002bfa0 <flatcc_builder_offset_vector_count@@Base>:
   2bfa0:	push	{fp}		; (str fp, [sp, #-4]!)
   2bfa4:	add	fp, sp, #0
   2bfa8:	sub	sp, sp, #12
   2bfac:	str	r0, [fp, #-8]
   2bfb0:	ldr	r3, [fp, #-8]
   2bfb4:	ldr	r3, [r3, #32]
   2bfb8:	ldr	r3, [r3, #20]
   2bfbc:	mov	r0, r3
   2bfc0:	add	sp, fp, #0
   2bfc4:	pop	{fp}		; (ldr fp, [sp], #4)
   2bfc8:	bx	lr

0002bfcc <flatcc_builder_table_add_union@@Base>:
   2bfcc:	push	{fp, lr}
   2bfd0:	add	fp, sp, #4
   2bfd4:	sub	sp, sp, #24
   2bfd8:	str	r0, [fp, #-16]
   2bfdc:	str	r1, [fp, #-20]	; 0xffffffec
   2bfe0:	sub	r1, fp, #28
   2bfe4:	stm	r1, {r2, r3}
   2bfe8:	ldr	r3, [fp, #-16]
   2bfec:	ldr	r3, [r3, #32]
   2bff0:	ldrh	r3, [r3, #14]
   2bff4:	cmp	r3, #3
   2bff8:	beq	2c01c <flatcc_builder_table_add_union@@Base+0x50>
   2bffc:	ldr	r3, [pc, #352]	; 2c164 <flatcc_builder_table_add_union@@Base+0x198>
   2c000:	add	r3, pc, r3
   2c004:	ldr	r2, [pc, #348]	; 2c168 <flatcc_builder_table_add_union@@Base+0x19c>
   2c008:	ldr	r1, [pc, #348]	; 2c16c <flatcc_builder_table_add_union@@Base+0x1a0>
   2c00c:	add	r1, pc, r1
   2c010:	ldr	r0, [pc, #344]	; 2c170 <flatcc_builder_table_add_union@@Base+0x1a4>
   2c014:	add	r0, pc, r0
   2c018:	bl	12a08 <__assert_fail@plt>
   2c01c:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   2c020:	cmp	r3, #0
   2c024:	bne	2c074 <flatcc_builder_table_add_union@@Base+0xa8>
   2c028:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c02c:	cmp	r3, #0
   2c030:	beq	2c074 <flatcc_builder_table_add_union@@Base+0xa8>
   2c034:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   2c038:	cmp	r3, #0
   2c03c:	bne	2c06c <flatcc_builder_table_add_union@@Base+0xa0>
   2c040:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c044:	cmp	r3, #0
   2c048:	beq	2c06c <flatcc_builder_table_add_union@@Base+0xa0>
   2c04c:	ldr	r3, [pc, #288]	; 2c174 <flatcc_builder_table_add_union@@Base+0x1a8>
   2c050:	add	r3, pc, r3
   2c054:	ldr	r2, [pc, #284]	; 2c178 <flatcc_builder_table_add_union@@Base+0x1ac>
   2c058:	ldr	r1, [pc, #284]	; 2c17c <flatcc_builder_table_add_union@@Base+0x1b0>
   2c05c:	add	r1, pc, r1
   2c060:	ldr	r0, [pc, #280]	; 2c180 <flatcc_builder_table_add_union@@Base+0x1b4>
   2c064:	add	r0, pc, r0
   2c068:	bl	12a08 <__assert_fail@plt>
   2c06c:	mvn	r3, #0
   2c070:	b	2c158 <flatcc_builder_table_add_union@@Base+0x18c>
   2c074:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c078:	cmp	r3, #0
   2c07c:	beq	2c0dc <flatcc_builder_table_add_union@@Base+0x110>
   2c080:	ldr	r1, [fp, #-20]	; 0xffffffec
   2c084:	ldr	r0, [fp, #-16]
   2c088:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   2c08c:	str	r0, [fp, #-8]
   2c090:	ldr	r3, [fp, #-8]
   2c094:	cmp	r3, #0
   2c098:	bne	2c0d0 <flatcc_builder_table_add_union@@Base+0x104>
   2c09c:	ldr	r3, [fp, #-8]
   2c0a0:	cmp	r3, #0
   2c0a4:	bne	2c0c8 <flatcc_builder_table_add_union@@Base+0xfc>
   2c0a8:	ldr	r3, [pc, #212]	; 2c184 <flatcc_builder_table_add_union@@Base+0x1b8>
   2c0ac:	add	r3, pc, r3
   2c0b0:	ldr	r2, [pc, #208]	; 2c188 <flatcc_builder_table_add_union@@Base+0x1bc>
   2c0b4:	ldr	r1, [pc, #208]	; 2c18c <flatcc_builder_table_add_union@@Base+0x1c0>
   2c0b8:	add	r1, pc, r1
   2c0bc:	ldr	r0, [pc, #204]	; 2c190 <flatcc_builder_table_add_union@@Base+0x1c4>
   2c0c0:	add	r0, pc, r0
   2c0c4:	bl	12a08 <__assert_fail@plt>
   2c0c8:	mvn	r3, #0
   2c0cc:	b	2c158 <flatcc_builder_table_add_union@@Base+0x18c>
   2c0d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2c0d4:	ldr	r3, [fp, #-8]
   2c0d8:	str	r2, [r3]
   2c0dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c0e0:	sub	r1, r3, #1
   2c0e4:	mov	r3, #1
   2c0e8:	mov	r2, #1
   2c0ec:	ldr	r0, [fp, #-16]
   2c0f0:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   2c0f4:	str	r0, [fp, #-12]
   2c0f8:	ldr	r3, [fp, #-12]
   2c0fc:	cmp	r3, #0
   2c100:	bne	2c138 <flatcc_builder_table_add_union@@Base+0x16c>
   2c104:	ldr	r3, [fp, #-12]
   2c108:	cmp	r3, #0
   2c10c:	bne	2c130 <flatcc_builder_table_add_union@@Base+0x164>
   2c110:	ldr	r3, [pc, #124]	; 2c194 <flatcc_builder_table_add_union@@Base+0x1c8>
   2c114:	add	r3, pc, r3
   2c118:	ldr	r2, [pc, #120]	; 2c198 <flatcc_builder_table_add_union@@Base+0x1cc>
   2c11c:	ldr	r1, [pc, #120]	; 2c19c <flatcc_builder_table_add_union@@Base+0x1d0>
   2c120:	add	r1, pc, r1
   2c124:	ldr	r0, [pc, #116]	; 2c1a0 <flatcc_builder_table_add_union@@Base+0x1d4>
   2c128:	add	r0, pc, r0
   2c12c:	bl	12a08 <__assert_fail@plt>
   2c130:	mvn	r3, #0
   2c134:	b	2c158 <flatcc_builder_table_add_union@@Base+0x18c>
   2c138:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   2c13c:	mov	r0, r3
   2c140:	bl	277e8 <main@@Base+0x548>
   2c144:	mov	r3, r0
   2c148:	mov	r2, r3
   2c14c:	ldr	r3, [fp, #-12]
   2c150:	strb	r2, [r3]
   2c154:	mov	r3, #0
   2c158:	mov	r0, r3
   2c15c:	sub	sp, fp, #4
   2c160:	pop	{fp, pc}
   2c164:	andeq	r9, r0, r0, lsr #4
   2c168:	andeq	r0, r0, lr, ror #11
   2c16c:	andeq	r8, r0, r4, lsr #20
   2c170:	ldrdeq	r8, [r0], -ip
   2c174:	ldrdeq	r9, [r0], -r0
   2c178:	andeq	r0, r0, pc, ror #11
   2c17c:	ldrdeq	r8, [r0], -r4
   2c180:	andeq	r8, r0, ip, ror #25
   2c184:	andeq	r9, r0, r4, ror r1
   2c188:	strdeq	r0, [r0], -r2
   2c18c:	andeq	r8, r0, r8, ror r9
   2c190:			; <UNDEFINED> instruction: 0x00008cb4
   2c194:	andeq	r9, r0, ip, lsl #2
   2c198:	strdeq	r0, [r0], -r6
   2c19c:	andeq	r8, r0, r0, lsl r9
   2c1a0:	andeq	r8, r0, r8, asr ip

0002c1a4 <flatcc_builder_table_add_union_vector@@Base>:
   2c1a4:	push	{fp, lr}
   2c1a8:	add	fp, sp, #4
   2c1ac:	sub	sp, sp, #24
   2c1b0:	str	r0, [fp, #-16]
   2c1b4:	str	r1, [fp, #-20]	; 0xffffffec
   2c1b8:	sub	r1, fp, #28
   2c1bc:	stm	r1, {r2, r3}
   2c1c0:	ldr	r3, [fp, #-16]
   2c1c4:	ldr	r3, [r3, #32]
   2c1c8:	ldrh	r3, [r3, #14]
   2c1cc:	cmp	r3, #3
   2c1d0:	beq	2c1f4 <flatcc_builder_table_add_union_vector@@Base+0x50>
   2c1d4:	ldr	r3, [pc, #396]	; 2c368 <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   2c1d8:	add	r3, pc, r3
   2c1dc:	mov	r2, #1536	; 0x600
   2c1e0:	ldr	r1, [pc, #388]	; 2c36c <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   2c1e4:	add	r1, pc, r1
   2c1e8:	ldr	r0, [pc, #384]	; 2c370 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   2c1ec:	add	r0, pc, r0
   2c1f0:	bl	12a08 <__assert_fail@plt>
   2c1f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c1f8:	cmp	r3, #0
   2c1fc:	moveq	r3, #1
   2c200:	movne	r3, #0
   2c204:	uxtb	r2, r3
   2c208:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c20c:	cmp	r3, #0
   2c210:	moveq	r3, #1
   2c214:	movne	r3, #0
   2c218:	uxtb	r3, r3
   2c21c:	eor	r3, r3, r2
   2c220:	uxtb	r3, r3
   2c224:	cmp	r3, #0
   2c228:	beq	2c28c <flatcc_builder_table_add_union_vector@@Base+0xe8>
   2c22c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c230:	cmp	r3, #0
   2c234:	movne	r3, #1
   2c238:	moveq	r3, #0
   2c23c:	uxtb	r2, r3
   2c240:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c244:	cmp	r3, #0
   2c248:	moveq	r3, #1
   2c24c:	movne	r3, #0
   2c250:	uxtb	r3, r3
   2c254:	eor	r3, r3, r2
   2c258:	uxtb	r3, r3
   2c25c:	cmp	r3, #0
   2c260:	bne	2c284 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   2c264:	ldr	r3, [pc, #264]	; 2c374 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   2c268:	add	r3, pc, r3
   2c26c:	ldr	r2, [pc, #260]	; 2c378 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   2c270:	ldr	r1, [pc, #260]	; 2c37c <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   2c274:	add	r1, pc, r1
   2c278:	ldr	r0, [pc, #256]	; 2c380 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   2c27c:	add	r0, pc, r0
   2c280:	bl	12a08 <__assert_fail@plt>
   2c284:	mvn	r3, #0
   2c288:	b	2c35c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   2c28c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c290:	cmp	r3, #0
   2c294:	beq	2c358 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   2c298:	ldr	r3, [fp, #-20]	; 0xffffffec
   2c29c:	sub	r3, r3, #1
   2c2a0:	mov	r1, r3
   2c2a4:	ldr	r0, [fp, #-16]
   2c2a8:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   2c2ac:	str	r0, [fp, #-8]
   2c2b0:	ldr	r3, [fp, #-8]
   2c2b4:	cmp	r3, #0
   2c2b8:	bne	2c2f0 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   2c2bc:	ldr	r3, [fp, #-8]
   2c2c0:	cmp	r3, #0
   2c2c4:	bne	2c2e8 <flatcc_builder_table_add_union_vector@@Base+0x144>
   2c2c8:	ldr	r3, [pc, #180]	; 2c384 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   2c2cc:	add	r3, pc, r3
   2c2d0:	ldr	r2, [pc, #176]	; 2c388 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   2c2d4:	ldr	r1, [pc, #176]	; 2c38c <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   2c2d8:	add	r1, pc, r1
   2c2dc:	ldr	r0, [pc, #172]	; 2c390 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   2c2e0:	add	r0, pc, r0
   2c2e4:	bl	12a08 <__assert_fail@plt>
   2c2e8:	mvn	r3, #0
   2c2ec:	b	2c35c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   2c2f0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2c2f4:	ldr	r3, [fp, #-8]
   2c2f8:	str	r2, [r3]
   2c2fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   2c300:	ldr	r0, [fp, #-16]
   2c304:	bl	2d114 <flatcc_builder_table_add_offset@@Base>
   2c308:	str	r0, [fp, #-8]
   2c30c:	ldr	r3, [fp, #-8]
   2c310:	cmp	r3, #0
   2c314:	bne	2c34c <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   2c318:	ldr	r3, [fp, #-8]
   2c31c:	cmp	r3, #0
   2c320:	bne	2c344 <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   2c324:	ldr	r3, [pc, #104]	; 2c394 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   2c328:	add	r3, pc, r3
   2c32c:	ldr	r2, [pc, #100]	; 2c398 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   2c330:	ldr	r1, [pc, #100]	; 2c39c <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   2c334:	add	r1, pc, r1
   2c338:	ldr	r0, [pc, #96]	; 2c3a0 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   2c33c:	add	r0, pc, r0
   2c340:	bl	12a08 <__assert_fail@plt>
   2c344:	mvn	r3, #0
   2c348:	b	2c35c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   2c34c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2c350:	ldr	r3, [fp, #-8]
   2c354:	str	r2, [r3]
   2c358:	mov	r3, #0
   2c35c:	mov	r0, r3
   2c360:	sub	sp, fp, #4
   2c364:	pop	{fp, pc}
   2c368:	andeq	r9, r0, r8, rrx
   2c36c:	andeq	r8, r0, ip, asr #16
   2c370:	andeq	r8, r0, r4, lsl #22
   2c374:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   2c378:	andeq	r0, r0, r1, lsl #12
   2c37c:			; <UNDEFINED> instruction: 0x000087bc
   2c380:	andeq	r8, r0, r0, lsl fp
   2c384:	andeq	r8, r0, r4, ror pc
   2c388:	andeq	r0, r0, r4, lsl #12
   2c38c:	andeq	r8, r0, r8, asr r7
   2c390:	muleq	r0, r4, sl
   2c394:	andeq	r8, r0, r8, lsl pc
   2c398:	andeq	r0, r0, r8, lsl #12
   2c39c:	strdeq	r8, [r0], -ip
   2c3a0:	andeq	r8, r0, r8, lsr sl

0002c3a4 <flatcc_builder_create_union_vector@@Base>:
   2c3a4:	push	{fp, lr}
   2c3a8:	add	fp, sp, #4
   2c3ac:	sub	sp, sp, #48	; 0x30
   2c3b0:	str	r0, [fp, #-32]	; 0xffffffe0
   2c3b4:	str	r1, [fp, #-36]	; 0xffffffdc
   2c3b8:	str	r2, [fp, #-40]	; 0xffffffd8
   2c3bc:	str	r3, [fp, #-44]	; 0xffffffd4
   2c3c0:	mov	r3, #0
   2c3c4:	str	r3, [fp, #-24]	; 0xffffffe8
   2c3c8:	mov	r3, #0
   2c3cc:	str	r3, [fp, #-20]	; 0xffffffec
   2c3d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c3d4:	bl	2a7d8 <flatcc_builder_start_offset_vector@@Base>
   2c3d8:	mov	r3, r0
   2c3dc:	cmp	r3, #0
   2c3e0:	beq	2c3fc <flatcc_builder_create_union_vector@@Base+0x58>
   2c3e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c3e8:	mov	r2, r3
   2c3ec:	sub	r3, fp, #24
   2c3f0:	ldm	r3, {r0, r1}
   2c3f4:	stm	r2, {r0, r1}
   2c3f8:	b	2c518 <flatcc_builder_create_union_vector@@Base+0x174>
   2c3fc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c400:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c404:	bl	2a084 <flatcc_builder_extend_offset_vector@@Base>
   2c408:	mov	r3, r0
   2c40c:	cmp	r3, #0
   2c410:	bne	2c42c <flatcc_builder_create_union_vector@@Base+0x88>
   2c414:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c418:	mov	r2, r3
   2c41c:	sub	r3, fp, #24
   2c420:	ldm	r3, {r0, r1}
   2c424:	stm	r2, {r0, r1}
   2c428:	b	2c518 <flatcc_builder_create_union_vector@@Base+0x174>
   2c42c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c430:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c434:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2c438:	str	r0, [fp, #-12]
   2c43c:	ldr	r3, [fp, #-12]
   2c440:	cmp	r3, #0
   2c444:	bne	2c460 <flatcc_builder_create_union_vector@@Base+0xbc>
   2c448:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c44c:	mov	r2, r3
   2c450:	sub	r3, fp, #24
   2c454:	ldm	r3, {r0, r1}
   2c458:	stm	r2, {r0, r1}
   2c45c:	b	2c518 <flatcc_builder_create_union_vector@@Base+0x174>
   2c460:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c464:	bl	2bf78 <flatcc_builder_offset_vector_edit@@Base>
   2c468:	str	r0, [fp, #-16]
   2c46c:	mov	r3, #0
   2c470:	str	r3, [fp, #-8]
   2c474:	b	2c4d0 <flatcc_builder_create_union_vector@@Base+0x12c>
   2c478:	ldr	r2, [fp, #-12]
   2c47c:	ldr	r3, [fp, #-8]
   2c480:	add	r3, r2, r3
   2c484:	ldr	r2, [fp, #-8]
   2c488:	lsl	r2, r2, #3
   2c48c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2c490:	add	r2, r1, r2
   2c494:	ldrb	r2, [r2]
   2c498:	strb	r2, [r3]
   2c49c:	ldr	r3, [fp, #-8]
   2c4a0:	lsl	r3, r3, #2
   2c4a4:	ldr	r2, [fp, #-16]
   2c4a8:	add	r3, r2, r3
   2c4ac:	ldr	r2, [fp, #-8]
   2c4b0:	lsl	r2, r2, #3
   2c4b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2c4b8:	add	r2, r1, r2
   2c4bc:	ldr	r2, [r2, #4]
   2c4c0:	str	r2, [r3]
   2c4c4:	ldr	r3, [fp, #-8]
   2c4c8:	add	r3, r3, #1
   2c4cc:	str	r3, [fp, #-8]
   2c4d0:	ldr	r2, [fp, #-8]
   2c4d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2c4d8:	cmp	r2, r3
   2c4dc:	bcc	2c478 <flatcc_builder_create_union_vector@@Base+0xd4>
   2c4e0:	sub	r0, fp, #24
   2c4e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2c4e8:	str	r3, [sp]
   2c4ec:	ldr	r3, [fp, #-16]
   2c4f0:	ldr	r2, [fp, #-12]
   2c4f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2c4f8:	bl	2c524 <flatcc_builder_create_union_vector_direct@@Base>
   2c4fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2c500:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2c504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2c508:	mov	r2, r3
   2c50c:	sub	r3, fp, #24
   2c510:	ldm	r3, {r0, r1}
   2c514:	stm	r2, {r0, r1}
   2c518:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c51c:	sub	sp, fp, #4
   2c520:	pop	{fp, pc}

0002c524 <flatcc_builder_create_union_vector_direct@@Base>:
   2c524:	push	{fp, lr}
   2c528:	add	fp, sp, #4
   2c52c:	sub	sp, sp, #32
   2c530:	str	r0, [fp, #-16]
   2c534:	str	r1, [fp, #-20]	; 0xffffffec
   2c538:	str	r2, [fp, #-24]	; 0xffffffe8
   2c53c:	str	r3, [fp, #-28]	; 0xffffffe4
   2c540:	mov	r3, #0
   2c544:	str	r3, [fp, #-12]
   2c548:	mov	r3, #0
   2c54c:	str	r3, [fp, #-8]
   2c550:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c554:	ldr	r2, [fp, #4]
   2c558:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2c55c:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c560:	bl	2baa8 <flatcc_builder_vector_edit@@Base+0x28>
   2c564:	mov	r3, r0
   2c568:	str	r3, [fp, #-8]
   2c56c:	ldr	r3, [fp, #-8]
   2c570:	cmp	r3, #0
   2c574:	bne	2c590 <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   2c578:	ldr	r3, [fp, #-16]
   2c57c:	mov	r2, r3
   2c580:	sub	r3, fp, #12
   2c584:	ldm	r3, {r0, r1}
   2c588:	stm	r2, {r0, r1}
   2c58c:	b	2c5f4 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   2c590:	mvn	r3, #0
   2c594:	str	r3, [sp, #4]
   2c598:	mov	r3, #1
   2c59c:	str	r3, [sp]
   2c5a0:	mov	r3, #1
   2c5a4:	ldr	r2, [fp, #4]
   2c5a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2c5ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   2c5b0:	bl	2b764 <flatcc_builder_create_vector@@Base>
   2c5b4:	mov	r3, r0
   2c5b8:	str	r3, [fp, #-12]
   2c5bc:	ldr	r3, [fp, #-12]
   2c5c0:	cmp	r3, #0
   2c5c4:	bne	2c5e0 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   2c5c8:	ldr	r3, [fp, #-16]
   2c5cc:	mov	r2, r3
   2c5d0:	sub	r3, fp, #12
   2c5d4:	ldm	r3, {r0, r1}
   2c5d8:	stm	r2, {r0, r1}
   2c5dc:	b	2c5f4 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   2c5e0:	ldr	r3, [fp, #-16]
   2c5e4:	mov	r2, r3
   2c5e8:	sub	r3, fp, #12
   2c5ec:	ldm	r3, {r0, r1}
   2c5f0:	stm	r2, {r0, r1}
   2c5f4:	ldr	r0, [fp, #-16]
   2c5f8:	sub	sp, fp, #4
   2c5fc:	pop	{fp, pc}

0002c600 <flatcc_builder_start_union_vector@@Base>:
   2c600:	push	{fp, lr}
   2c604:	add	fp, sp, #4
   2c608:	sub	sp, sp, #8
   2c60c:	str	r0, [fp, #-8]
   2c610:	mov	r1, #4
   2c614:	ldr	r0, [fp, #-8]
   2c618:	bl	28b58 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   2c61c:	mov	r3, r0
   2c620:	cmp	r3, #0
   2c624:	beq	2c630 <flatcc_builder_start_union_vector@@Base+0x30>
   2c628:	mvn	r3, #0
   2c62c:	b	2c670 <flatcc_builder_start_union_vector@@Base+0x70>
   2c630:	ldr	r3, [fp, #-8]
   2c634:	ldr	r3, [r3, #32]
   2c638:	mov	r2, #8
   2c63c:	str	r2, [r3, #16]
   2c640:	ldr	r3, [fp, #-8]
   2c644:	ldr	r3, [r3, #32]
   2c648:	mov	r2, #0
   2c64c:	str	r2, [r3, #20]
   2c650:	ldr	r3, [fp, #-8]
   2c654:	ldr	r3, [r3, #32]
   2c658:	mov	r2, #7
   2c65c:	strh	r2, [r3, #14]
   2c660:	mvn	r1, #3
   2c664:	ldr	r0, [fp, #-8]
   2c668:	bl	27ad0 <flatcc_builder_default_alloc@@Base+0x1c8>
   2c66c:	mov	r3, #0
   2c670:	mov	r0, r3
   2c674:	sub	sp, fp, #4
   2c678:	pop	{fp, pc}

0002c67c <flatcc_builder_end_union_vector@@Base>:
   2c67c:	push	{fp, lr}
   2c680:	add	fp, sp, #4
   2c684:	sub	sp, sp, #48	; 0x30
   2c688:	str	r0, [fp, #-40]	; 0xffffffd8
   2c68c:	str	r1, [fp, #-44]	; 0xffffffd4
   2c690:	mov	r3, #0
   2c694:	str	r3, [fp, #-32]	; 0xffffffe0
   2c698:	mov	r3, #0
   2c69c:	str	r3, [fp, #-28]	; 0xffffffe4
   2c6a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2c6a4:	ldr	r3, [r3, #32]
   2c6a8:	ldrh	r3, [r3, #14]
   2c6ac:	cmp	r3, #7
   2c6b0:	beq	2c6d4 <flatcc_builder_end_union_vector@@Base+0x58>
   2c6b4:	ldr	r3, [pc, #320]	; 2c7fc <flatcc_builder_end_union_vector@@Base+0x180>
   2c6b8:	add	r3, pc, r3
   2c6bc:	ldr	r2, [pc, #316]	; 2c800 <flatcc_builder_end_union_vector@@Base+0x184>
   2c6c0:	ldr	r1, [pc, #316]	; 2c804 <flatcc_builder_end_union_vector@@Base+0x188>
   2c6c4:	add	r1, pc, r1
   2c6c8:	ldr	r0, [pc, #312]	; 2c808 <flatcc_builder_end_union_vector@@Base+0x18c>
   2c6cc:	add	r0, pc, r0
   2c6d0:	bl	12a08 <__assert_fail@plt>
   2c6d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c6d8:	bl	2c834 <flatcc_builder_union_vector_count@@Base>
   2c6dc:	str	r0, [fp, #-12]
   2c6e0:	ldr	r2, [fp, #-12]
   2c6e4:	mov	r3, r2
   2c6e8:	lsl	r3, r3, #2
   2c6ec:	add	r3, r3, r2
   2c6f0:	mov	r1, r3
   2c6f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c6f8:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2c6fc:	str	r0, [fp, #-16]
   2c700:	ldr	r3, [fp, #-16]
   2c704:	cmp	r3, #0
   2c708:	bne	2c724 <flatcc_builder_end_union_vector@@Base+0xa8>
   2c70c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2c710:	mov	r2, r3
   2c714:	sub	r3, fp, #32
   2c718:	ldm	r3, {r0, r1}
   2c71c:	stm	r2, {r0, r1}
   2c720:	b	2c7f0 <flatcc_builder_end_union_vector@@Base+0x174>
   2c724:	ldr	r3, [fp, #-12]
   2c728:	lsl	r3, r3, #2
   2c72c:	ldr	r2, [fp, #-16]
   2c730:	add	r3, r2, r3
   2c734:	str	r3, [fp, #-20]	; 0xffffffec
   2c738:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c73c:	bl	2c80c <flatcc_builder_union_vector_edit@@Base>
   2c740:	str	r0, [fp, #-24]	; 0xffffffe8
   2c744:	mov	r3, #0
   2c748:	str	r3, [fp, #-8]
   2c74c:	b	2c7a8 <flatcc_builder_end_union_vector@@Base+0x12c>
   2c750:	ldr	r2, [fp, #-20]	; 0xffffffec
   2c754:	ldr	r3, [fp, #-8]
   2c758:	add	r3, r2, r3
   2c75c:	ldr	r2, [fp, #-8]
   2c760:	lsl	r2, r2, #3
   2c764:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2c768:	add	r2, r1, r2
   2c76c:	ldrb	r2, [r2]
   2c770:	strb	r2, [r3]
   2c774:	ldr	r3, [fp, #-8]
   2c778:	lsl	r3, r3, #2
   2c77c:	ldr	r2, [fp, #-16]
   2c780:	add	r3, r2, r3
   2c784:	ldr	r2, [fp, #-8]
   2c788:	lsl	r2, r2, #3
   2c78c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2c790:	add	r2, r1, r2
   2c794:	ldr	r2, [r2, #4]
   2c798:	str	r2, [r3]
   2c79c:	ldr	r3, [fp, #-8]
   2c7a0:	add	r3, r3, #1
   2c7a4:	str	r3, [fp, #-8]
   2c7a8:	ldr	r2, [fp, #-8]
   2c7ac:	ldr	r3, [fp, #-12]
   2c7b0:	cmp	r2, r3
   2c7b4:	bcc	2c750 <flatcc_builder_end_union_vector@@Base+0xd4>
   2c7b8:	sub	r0, fp, #32
   2c7bc:	ldr	r3, [fp, #-12]
   2c7c0:	str	r3, [sp]
   2c7c4:	ldr	r3, [fp, #-16]
   2c7c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   2c7cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2c7d0:	bl	2c524 <flatcc_builder_create_union_vector_direct@@Base>
   2c7d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2c7d8:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2c7dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2c7e0:	mov	r2, r3
   2c7e4:	sub	r3, fp, #32
   2c7e8:	ldm	r3, {r0, r1}
   2c7ec:	stm	r2, {r0, r1}
   2c7f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2c7f4:	sub	sp, fp, #4
   2c7f8:	pop	{fp, pc}
   2c7fc:			; <UNDEFINED> instruction: 0x00008bb0
   2c800:	andeq	r0, r0, r1, asr r6
   2c804:	andeq	r8, r0, ip, ror #6
   2c808:	andeq	r8, r0, r8, ror #13

0002c80c <flatcc_builder_union_vector_edit@@Base>:
   2c80c:	push	{fp}		; (str fp, [sp, #-4]!)
   2c810:	add	fp, sp, #0
   2c814:	sub	sp, sp, #12
   2c818:	str	r0, [fp, #-8]
   2c81c:	ldr	r3, [fp, #-8]
   2c820:	ldr	r3, [r3, #16]
   2c824:	mov	r0, r3
   2c828:	add	sp, fp, #0
   2c82c:	pop	{fp}		; (ldr fp, [sp], #4)
   2c830:	bx	lr

0002c834 <flatcc_builder_union_vector_count@@Base>:
   2c834:	push	{fp}		; (str fp, [sp, #-4]!)
   2c838:	add	fp, sp, #0
   2c83c:	sub	sp, sp, #12
   2c840:	str	r0, [fp, #-8]
   2c844:	ldr	r3, [fp, #-8]
   2c848:	ldr	r3, [r3, #32]
   2c84c:	ldr	r3, [r3, #20]
   2c850:	mov	r0, r3
   2c854:	add	sp, fp, #0
   2c858:	pop	{fp}		; (ldr fp, [sp], #4)
   2c85c:	bx	lr

0002c860 <flatcc_builder_extend_union_vector@@Base>:
   2c860:	push	{fp, lr}
   2c864:	add	fp, sp, #4
   2c868:	sub	sp, sp, #8
   2c86c:	str	r0, [fp, #-8]
   2c870:	str	r1, [fp, #-12]
   2c874:	mvn	r2, #-536870912	; 0xe0000000
   2c878:	ldr	r1, [fp, #-12]
   2c87c:	ldr	r0, [fp, #-8]
   2c880:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2c884:	mov	r3, r0
   2c888:	cmp	r3, #0
   2c88c:	beq	2c898 <flatcc_builder_extend_union_vector@@Base+0x38>
   2c890:	mov	r3, #0
   2c894:	b	2c8b0 <flatcc_builder_extend_union_vector@@Base+0x50>
   2c898:	ldr	r3, [fp, #-12]
   2c89c:	lsl	r3, r3, #3
   2c8a0:	mov	r1, r3
   2c8a4:	ldr	r0, [fp, #-8]
   2c8a8:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2c8ac:	mov	r3, r0
   2c8b0:	mov	r0, r3
   2c8b4:	sub	sp, fp, #4
   2c8b8:	pop	{fp, pc}

0002c8bc <flatcc_builder_truncate_union_vector@@Base>:
   2c8bc:	push	{fp, lr}
   2c8c0:	add	fp, sp, #4
   2c8c4:	sub	sp, sp, #8
   2c8c8:	str	r0, [fp, #-8]
   2c8cc:	str	r1, [fp, #-12]
   2c8d0:	ldr	r3, [fp, #-8]
   2c8d4:	ldr	r3, [r3, #32]
   2c8d8:	ldrh	r3, [r3, #14]
   2c8dc:	cmp	r3, #7
   2c8e0:	beq	2c904 <flatcc_builder_truncate_union_vector@@Base+0x48>
   2c8e4:	ldr	r3, [pc, #192]	; 2c9ac <flatcc_builder_truncate_union_vector@@Base+0xf0>
   2c8e8:	add	r3, pc, r3
   2c8ec:	ldr	r2, [pc, #188]	; 2c9b0 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   2c8f0:	ldr	r1, [pc, #188]	; 2c9b4 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   2c8f4:	add	r1, pc, r1
   2c8f8:	ldr	r0, [pc, #184]	; 2c9b8 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   2c8fc:	add	r0, pc, r0
   2c900:	bl	12a08 <__assert_fail@plt>
   2c904:	ldr	r3, [fp, #-8]
   2c908:	ldr	r3, [r3, #32]
   2c90c:	ldr	r2, [r3, #20]
   2c910:	ldr	r3, [fp, #-12]
   2c914:	cmp	r2, r3
   2c918:	bcs	2c95c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   2c91c:	ldr	r3, [fp, #-8]
   2c920:	ldr	r3, [r3, #32]
   2c924:	ldr	r2, [r3, #20]
   2c928:	ldr	r3, [fp, #-12]
   2c92c:	cmp	r2, r3
   2c930:	bcs	2c954 <flatcc_builder_truncate_union_vector@@Base+0x98>
   2c934:	ldr	r3, [pc, #128]	; 2c9bc <flatcc_builder_truncate_union_vector@@Base+0x100>
   2c938:	add	r3, pc, r3
   2c93c:	ldr	r2, [pc, #124]	; 2c9c0 <flatcc_builder_truncate_union_vector@@Base+0x104>
   2c940:	ldr	r1, [pc, #124]	; 2c9c4 <flatcc_builder_truncate_union_vector@@Base+0x108>
   2c944:	add	r1, pc, r1
   2c948:	ldr	r0, [pc, #120]	; 2c9c8 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   2c94c:	add	r0, pc, r0
   2c950:	bl	12a08 <__assert_fail@plt>
   2c954:	mvn	r3, #0
   2c958:	b	2c9a0 <flatcc_builder_truncate_union_vector@@Base+0xe4>
   2c95c:	ldr	r3, [fp, #-8]
   2c960:	ldr	r3, [r3, #32]
   2c964:	ldr	r2, [fp, #-8]
   2c968:	ldr	r2, [r2, #32]
   2c96c:	ldr	r1, [r2, #20]
   2c970:	ldr	r2, [fp, #-12]
   2c974:	sub	r2, r1, r2
   2c978:	str	r2, [r3, #20]
   2c97c:	ldr	r3, [fp, #-8]
   2c980:	ldr	r3, [r3, #32]
   2c984:	ldr	r3, [r3, #16]
   2c988:	ldr	r2, [fp, #-12]
   2c98c:	mul	r3, r2, r3
   2c990:	mov	r1, r3
   2c994:	ldr	r0, [fp, #-8]
   2c998:	bl	27c94 <flatcc_builder_default_alloc@@Base+0x38c>
   2c99c:	mov	r3, #0
   2c9a0:	mov	r0, r3
   2c9a4:	sub	sp, fp, #4
   2c9a8:	pop	{fp, pc}
   2c9ac:	andeq	r8, r0, r0, lsr #19
   2c9b0:	andeq	r0, r0, r1, lsl #13
   2c9b4:	andeq	r8, r0, ip, lsr r1
   2c9b8:			; <UNDEFINED> instruction: 0x000084b8
   2c9bc:	andeq	r8, r0, r0, asr r9
   2c9c0:	andeq	r0, r0, r2, lsl #13
   2c9c4:	andeq	r8, r0, ip, ror #1
   2c9c8:	andeq	r8, r0, r8, lsl r3

0002c9cc <flatcc_builder_union_vector_push@@Base>:
   2c9cc:	push	{fp, lr}
   2c9d0:	add	fp, sp, #4
   2c9d4:	sub	sp, sp, #24
   2c9d8:	str	r0, [fp, #-16]
   2c9dc:	sub	r3, fp, #24
   2c9e0:	stm	r3, {r1, r2}
   2c9e4:	ldr	r3, [fp, #-16]
   2c9e8:	ldr	r3, [r3, #32]
   2c9ec:	ldrh	r3, [r3, #14]
   2c9f0:	cmp	r3, #7
   2c9f4:	beq	2ca18 <flatcc_builder_union_vector_push@@Base+0x4c>
   2c9f8:	ldr	r3, [pc, #152]	; 2ca98 <flatcc_builder_union_vector_push@@Base+0xcc>
   2c9fc:	add	r3, pc, r3
   2ca00:	ldr	r2, [pc, #148]	; 2ca9c <flatcc_builder_union_vector_push@@Base+0xd0>
   2ca04:	ldr	r1, [pc, #148]	; 2caa0 <flatcc_builder_union_vector_push@@Base+0xd4>
   2ca08:	add	r1, pc, r1
   2ca0c:	ldr	r0, [pc, #144]	; 2caa4 <flatcc_builder_union_vector_push@@Base+0xd8>
   2ca10:	add	r0, pc, r0
   2ca14:	bl	12a08 <__assert_fail@plt>
   2ca18:	ldr	r3, [fp, #-16]
   2ca1c:	ldr	r3, [r3, #32]
   2ca20:	ldr	r3, [r3, #20]
   2ca24:	cmn	r3, #-536870911	; 0xe0000001
   2ca28:	bne	2ca34 <flatcc_builder_union_vector_push@@Base+0x68>
   2ca2c:	mov	r3, #0
   2ca30:	b	2ca8c <flatcc_builder_union_vector_push@@Base+0xc0>
   2ca34:	ldr	r3, [fp, #-16]
   2ca38:	ldr	r3, [r3, #32]
   2ca3c:	ldr	r2, [fp, #-16]
   2ca40:	ldr	r2, [r2, #32]
   2ca44:	ldr	r2, [r2, #20]
   2ca48:	add	r2, r2, #1
   2ca4c:	str	r2, [r3, #20]
   2ca50:	mov	r1, #8
   2ca54:	ldr	r0, [fp, #-16]
   2ca58:	bl	27bf8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2ca5c:	str	r0, [fp, #-8]
   2ca60:	ldr	r3, [fp, #-8]
   2ca64:	cmp	r3, #0
   2ca68:	bne	2ca74 <flatcc_builder_union_vector_push@@Base+0xa8>
   2ca6c:	mov	r3, #0
   2ca70:	b	2ca8c <flatcc_builder_union_vector_push@@Base+0xc0>
   2ca74:	ldr	r3, [fp, #-8]
   2ca78:	mov	r2, r3
   2ca7c:	sub	r3, fp, #24
   2ca80:	ldm	r3, {r0, r1}
   2ca84:	stm	r2, {r0, r1}
   2ca88:	ldr	r3, [fp, #-8]
   2ca8c:	mov	r0, r3
   2ca90:	sub	sp, fp, #4
   2ca94:	pop	{fp, pc}
   2ca98:			; <UNDEFINED> instruction: 0x000088b4
   2ca9c:	andeq	r0, r0, sp, lsl #13
   2caa0:	andeq	r8, r0, r8, lsr #32
   2caa4:	andeq	r8, r0, r4, lsr #7

0002caa8 <flatcc_builder_append_union_vector@@Base>:
   2caa8:	push	{fp, lr}
   2caac:	add	fp, sp, #4
   2cab0:	sub	sp, sp, #16
   2cab4:	str	r0, [fp, #-8]
   2cab8:	str	r1, [fp, #-12]
   2cabc:	str	r2, [fp, #-16]
   2cac0:	ldr	r3, [fp, #-8]
   2cac4:	ldr	r3, [r3, #32]
   2cac8:	ldrh	r3, [r3, #14]
   2cacc:	cmp	r3, #7
   2cad0:	beq	2caf4 <flatcc_builder_append_union_vector@@Base+0x4c>
   2cad4:	ldr	r3, [pc, #100]	; 2cb40 <flatcc_builder_append_union_vector@@Base+0x98>
   2cad8:	add	r3, pc, r3
   2cadc:	ldr	r2, [pc, #96]	; 2cb44 <flatcc_builder_append_union_vector@@Base+0x9c>
   2cae0:	ldr	r1, [pc, #96]	; 2cb48 <flatcc_builder_append_union_vector@@Base+0xa0>
   2cae4:	add	r1, pc, r1
   2cae8:	ldr	r0, [pc, #92]	; 2cb4c <flatcc_builder_append_union_vector@@Base+0xa4>
   2caec:	add	r0, pc, r0
   2caf0:	bl	12a08 <__assert_fail@plt>
   2caf4:	mvn	r2, #-536870912	; 0xe0000000
   2caf8:	ldr	r1, [fp, #-16]
   2cafc:	ldr	r0, [fp, #-8]
   2cb00:	bl	29d70 <flatcc_builder_end_struct@@Base+0xa0>
   2cb04:	mov	r3, r0
   2cb08:	cmp	r3, #0
   2cb0c:	beq	2cb18 <flatcc_builder_append_union_vector@@Base+0x70>
   2cb10:	mov	r3, #0
   2cb14:	b	2cb34 <flatcc_builder_append_union_vector@@Base+0x8c>
   2cb18:	ldr	r3, [fp, #-16]
   2cb1c:	lsl	r3, r3, #3
   2cb20:	mov	r2, r3
   2cb24:	ldr	r1, [fp, #-12]
   2cb28:	ldr	r0, [fp, #-8]
   2cb2c:	bl	27cf0 <flatcc_builder_default_alloc@@Base+0x3e8>
   2cb30:	mov	r3, r0
   2cb34:	mov	r0, r3
   2cb38:	sub	sp, fp, #4
   2cb3c:	pop	{fp, pc}
   2cb40:	strdeq	r8, [r0], -ip
   2cb44:	muleq	r0, ip, r6
   2cb48:	andeq	r7, r0, ip, asr #30
   2cb4c:	andeq	r8, r0, r8, asr #5

0002cb50 <flatcc_builder_create_string@@Base>:
   2cb50:	push	{r4, fp, lr}
   2cb54:	add	fp, sp, #8
   2cb58:	sub	sp, sp, #100	; 0x64
   2cb5c:	str	r0, [fp, #-96]	; 0xffffffa0
   2cb60:	str	r1, [fp, #-100]	; 0xffffff9c
   2cb64:	str	r2, [fp, #-104]	; 0xffffff98
   2cb68:	ldr	r4, [pc, #376]	; 2cce8 <flatcc_builder_create_string@@Base+0x198>
   2cb6c:	add	r4, pc, r4
   2cb70:	ldr	r0, [fp, #-104]	; 0xffffff98
   2cb74:	bl	277c4 <main@@Base+0x524>
   2cb78:	mov	r3, r0
   2cb7c:	str	r3, [fp, #-20]	; 0xffffffec
   2cb80:	ldr	r3, [fp, #-104]	; 0xffffff98
   2cb84:	add	r3, r3, #1
   2cb88:	mov	r2, #4
   2cb8c:	mov	r1, r3
   2cb90:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2cb94:	bl	28e00 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   2cb98:	mov	r3, r0
   2cb9c:	add	r3, r3, #1
   2cba0:	str	r3, [fp, #-16]
   2cba4:	mov	r3, #0
   2cba8:	str	r3, [fp, #-92]	; 0xffffffa4
   2cbac:	mov	r3, #0
   2cbb0:	str	r3, [fp, #-88]	; 0xffffffa8
   2cbb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2cbb8:	add	r3, r3, #4
   2cbbc:	str	r3, [fp, #-92]	; 0xffffffa4
   2cbc0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cbc4:	add	r3, r3, #1
   2cbc8:	lsl	r3, r3, #3
   2cbcc:	sub	r2, fp, #12
   2cbd0:	add	r3, r2, r3
   2cbd4:	sub	r2, fp, #20
   2cbd8:	str	r2, [r3, #-80]	; 0xffffffb0
   2cbdc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cbe0:	add	r3, r3, #1
   2cbe4:	lsl	r3, r3, #3
   2cbe8:	sub	r2, fp, #12
   2cbec:	add	r3, r2, r3
   2cbf0:	mov	r2, #4
   2cbf4:	str	r2, [r3, #-76]	; 0xffffffb4
   2cbf8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cbfc:	add	r3, r3, #1
   2cc00:	str	r3, [fp, #-88]	; 0xffffffa8
   2cc04:	ldr	r3, [fp, #-104]	; 0xffffff98
   2cc08:	cmp	r3, #0
   2cc0c:	beq	2cc64 <flatcc_builder_create_string@@Base+0x114>
   2cc10:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2cc14:	ldr	r3, [fp, #-104]	; 0xffffff98
   2cc18:	add	r3, r2, r3
   2cc1c:	str	r3, [fp, #-92]	; 0xffffffa4
   2cc20:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cc24:	add	r3, r3, #1
   2cc28:	lsl	r3, r3, #3
   2cc2c:	sub	r2, fp, #12
   2cc30:	add	r3, r2, r3
   2cc34:	ldr	r2, [fp, #-100]	; 0xffffff9c
   2cc38:	str	r2, [r3, #-80]	; 0xffffffb0
   2cc3c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cc40:	add	r3, r3, #1
   2cc44:	lsl	r3, r3, #3
   2cc48:	sub	r2, fp, #12
   2cc4c:	add	r3, r2, r3
   2cc50:	ldr	r2, [fp, #-104]	; 0xffffff98
   2cc54:	str	r2, [r3, #-76]	; 0xffffffb4
   2cc58:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cc5c:	add	r3, r3, #1
   2cc60:	str	r3, [fp, #-88]	; 0xffffffa8
   2cc64:	ldr	r3, [fp, #-16]
   2cc68:	cmp	r3, #0
   2cc6c:	beq	2ccc8 <flatcc_builder_create_string@@Base+0x178>
   2cc70:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2cc74:	ldr	r3, [fp, #-16]
   2cc78:	add	r3, r2, r3
   2cc7c:	str	r3, [fp, #-92]	; 0xffffffa4
   2cc80:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cc84:	add	r3, r3, #1
   2cc88:	lsl	r3, r3, #3
   2cc8c:	sub	r2, fp, #12
   2cc90:	add	r3, r2, r3
   2cc94:	ldr	r2, [pc, #80]	; 2ccec <flatcc_builder_create_string@@Base+0x19c>
   2cc98:	ldr	r2, [r4, r2]
   2cc9c:	str	r2, [r3, #-80]	; 0xffffffb0
   2cca0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2cca4:	add	r3, r3, #1
   2cca8:	lsl	r3, r3, #3
   2ccac:	sub	r2, fp, #12
   2ccb0:	add	r3, r2, r3
   2ccb4:	ldr	r2, [fp, #-16]
   2ccb8:	str	r2, [r3, #-76]	; 0xffffffb4
   2ccbc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2ccc0:	add	r3, r3, #1
   2ccc4:	str	r3, [fp, #-88]	; 0xffffffa8
   2ccc8:	sub	r3, fp, #92	; 0x5c
   2cccc:	mov	r1, r3
   2ccd0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   2ccd4:	bl	28e88 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   2ccd8:	mov	r3, r0
   2ccdc:	mov	r0, r3
   2cce0:	sub	sp, fp, #8
   2cce4:	pop	{r4, fp, pc}
   2cce8:	andeq	r9, r1, ip, lsl #9
   2ccec:	andeq	r0, r0, r4, rrx

0002ccf0 <flatcc_builder_create_string_str@@Base>:
   2ccf0:	push	{fp, lr}
   2ccf4:	add	fp, sp, #4
   2ccf8:	sub	sp, sp, #8
   2ccfc:	str	r0, [fp, #-8]
   2cd00:	str	r1, [fp, #-12]
   2cd04:	ldr	r0, [fp, #-12]
   2cd08:	bl	1299c <strlen@plt>
   2cd0c:	mov	r3, r0
   2cd10:	mov	r2, r3
   2cd14:	ldr	r1, [fp, #-12]
   2cd18:	ldr	r0, [fp, #-8]
   2cd1c:	bl	2cb50 <flatcc_builder_create_string@@Base>
   2cd20:	mov	r3, r0
   2cd24:	mov	r0, r3
   2cd28:	sub	sp, fp, #4
   2cd2c:	pop	{fp, pc}

0002cd30 <flatcc_builder_create_string_strn@@Base>:
   2cd30:	push	{fp, lr}
   2cd34:	add	fp, sp, #4
   2cd38:	sub	sp, sp, #16
   2cd3c:	str	r0, [fp, #-8]
   2cd40:	str	r1, [fp, #-12]
   2cd44:	str	r2, [fp, #-16]
   2cd48:	ldr	r1, [fp, #-16]
   2cd4c:	ldr	r0, [fp, #-12]
   2cd50:	bl	278b4 <main@@Base+0x614>
   2cd54:	mov	r3, r0
   2cd58:	mov	r2, r3
   2cd5c:	ldr	r1, [fp, #-12]
   2cd60:	ldr	r0, [fp, #-8]
   2cd64:	bl	2cb50 <flatcc_builder_create_string@@Base>
   2cd68:	mov	r3, r0
   2cd6c:	mov	r0, r3
   2cd70:	sub	sp, fp, #4
   2cd74:	pop	{fp, pc}

0002cd78 <flatcc_builder_end_string@@Base>:
   2cd78:	push	{fp, lr}
   2cd7c:	add	fp, sp, #4
   2cd80:	sub	sp, sp, #16
   2cd84:	str	r0, [fp, #-16]
   2cd88:	ldr	r3, [fp, #-16]
   2cd8c:	ldr	r3, [r3, #32]
   2cd90:	ldrh	r3, [r3, #14]
   2cd94:	cmp	r3, #6
   2cd98:	beq	2cdbc <flatcc_builder_end_string@@Base+0x44>
   2cd9c:	ldr	r3, [pc, #160]	; 2ce44 <flatcc_builder_end_string@@Base+0xcc>
   2cda0:	add	r3, pc, r3
   2cda4:	ldr	r2, [pc, #156]	; 2ce48 <flatcc_builder_end_string@@Base+0xd0>
   2cda8:	ldr	r1, [pc, #156]	; 2ce4c <flatcc_builder_end_string@@Base+0xd4>
   2cdac:	add	r1, pc, r1
   2cdb0:	ldr	r0, [pc, #152]	; 2ce50 <flatcc_builder_end_string@@Base+0xd8>
   2cdb4:	add	r0, pc, r0
   2cdb8:	bl	12a08 <__assert_fail@plt>
   2cdbc:	ldr	r3, [fp, #-16]
   2cdc0:	ldr	r3, [r3, #32]
   2cdc4:	ldr	r2, [r3, #20]
   2cdc8:	ldr	r3, [fp, #-16]
   2cdcc:	ldr	r3, [r3, #20]
   2cdd0:	cmp	r2, r3
   2cdd4:	beq	2cdf8 <flatcc_builder_end_string@@Base+0x80>
   2cdd8:	ldr	r3, [pc, #116]	; 2ce54 <flatcc_builder_end_string@@Base+0xdc>
   2cddc:	add	r3, pc, r3
   2cde0:	ldr	r2, [pc, #112]	; 2ce58 <flatcc_builder_end_string@@Base+0xe0>
   2cde4:	ldr	r1, [pc, #112]	; 2ce5c <flatcc_builder_end_string@@Base+0xe4>
   2cde8:	add	r1, pc, r1
   2cdec:	ldr	r0, [pc, #108]	; 2ce60 <flatcc_builder_end_string@@Base+0xe8>
   2cdf0:	add	r0, pc, r0
   2cdf4:	bl	12a08 <__assert_fail@plt>
   2cdf8:	ldr	r3, [fp, #-16]
   2cdfc:	ldr	r1, [r3, #16]
   2ce00:	ldr	r3, [fp, #-16]
   2ce04:	ldr	r3, [r3, #20]
   2ce08:	mov	r2, r3
   2ce0c:	ldr	r0, [fp, #-16]
   2ce10:	bl	2cb50 <flatcc_builder_create_string@@Base>
   2ce14:	str	r0, [fp, #-8]
   2ce18:	ldr	r3, [fp, #-8]
   2ce1c:	cmp	r3, #0
   2ce20:	bne	2ce2c <flatcc_builder_end_string@@Base+0xb4>
   2ce24:	mov	r3, #0
   2ce28:	b	2ce38 <flatcc_builder_end_string@@Base+0xc0>
   2ce2c:	ldr	r0, [fp, #-16]
   2ce30:	bl	28d38 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   2ce34:	ldr	r3, [fp, #-8]
   2ce38:	mov	r0, r3
   2ce3c:	sub	sp, fp, #4
   2ce40:	pop	{fp, pc}
   2ce44:	andeq	r8, r0, r8, asr r5
   2ce48:	andeq	r0, r0, r4, asr #13
   2ce4c:	andeq	r7, r0, r4, lsl #25
   2ce50:	andeq	r7, r0, r0, ror #28
   2ce54:	andeq	r8, r0, ip, lsl r5
   2ce58:	andeq	r0, r0, r5, asr #13
   2ce5c:	andeq	r7, r0, r8, asr #24
   2ce60:	strdeq	r7, [r0], -r8

0002ce64 <flatcc_builder_string_edit@@Base>:
   2ce64:	push	{fp}		; (str fp, [sp, #-4]!)
   2ce68:	add	fp, sp, #0
   2ce6c:	sub	sp, sp, #12
   2ce70:	str	r0, [fp, #-8]
   2ce74:	ldr	r3, [fp, #-8]
   2ce78:	ldr	r3, [r3, #16]
   2ce7c:	mov	r0, r3
   2ce80:	add	sp, fp, #0
   2ce84:	pop	{fp}		; (ldr fp, [sp], #4)
   2ce88:	bx	lr

0002ce8c <flatcc_builder_string_len@@Base>:
   2ce8c:	push	{fp}		; (str fp, [sp, #-4]!)
   2ce90:	add	fp, sp, #0
   2ce94:	sub	sp, sp, #12
   2ce98:	str	r0, [fp, #-8]
   2ce9c:	ldr	r3, [fp, #-8]
   2cea0:	ldr	r3, [r3, #32]
   2cea4:	ldr	r3, [r3, #20]
   2cea8:	mov	r0, r3
   2ceac:	add	sp, fp, #0
   2ceb0:	pop	{fp}		; (ldr fp, [sp], #4)
   2ceb4:	bx	lr

0002ceb8 <flatcc_builder_table_add@@Base>:
   2ceb8:	push	{fp, lr}
   2cebc:	add	fp, sp, #4
   2cec0:	sub	sp, sp, #16
   2cec4:	str	r0, [fp, #-8]
   2cec8:	str	r1, [fp, #-12]
   2cecc:	str	r2, [fp, #-16]
   2ced0:	strh	r3, [fp, #-18]	; 0xffffffee
   2ced4:	ldr	r3, [fp, #-8]
   2ced8:	ldr	r3, [r3, #32]
   2cedc:	ldrh	r3, [r3, #14]
   2cee0:	cmp	r3, #3
   2cee4:	beq	2cf08 <flatcc_builder_table_add@@Base+0x50>
   2cee8:	ldr	r3, [pc, #268]	; 2cffc <flatcc_builder_table_add@@Base+0x144>
   2ceec:	add	r3, pc, r3
   2cef0:	ldr	r2, [pc, #264]	; 2d000 <flatcc_builder_table_add@@Base+0x148>
   2cef4:	ldr	r1, [pc, #264]	; 2d004 <flatcc_builder_table_add@@Base+0x14c>
   2cef8:	add	r1, pc, r1
   2cefc:	ldr	r0, [pc, #260]	; 2d008 <flatcc_builder_table_add@@Base+0x150>
   2cf00:	add	r0, pc, r0
   2cf04:	bl	12a08 <__assert_fail@plt>
   2cf08:	ldr	r3, [fp, #-12]
   2cf0c:	cmp	r3, #0
   2cf10:	blt	2cf24 <flatcc_builder_table_add@@Base+0x6c>
   2cf14:	ldr	r3, [fp, #-12]
   2cf18:	ldr	r2, [pc, #236]	; 2d00c <flatcc_builder_table_add@@Base+0x154>
   2cf1c:	cmp	r3, r2
   2cf20:	ble	2cf44 <flatcc_builder_table_add@@Base+0x8c>
   2cf24:	ldr	r3, [pc, #228]	; 2d010 <flatcc_builder_table_add@@Base+0x158>
   2cf28:	add	r3, pc, r3
   2cf2c:	ldr	r2, [pc, #224]	; 2d014 <flatcc_builder_table_add@@Base+0x15c>
   2cf30:	ldr	r1, [pc, #224]	; 2d018 <flatcc_builder_table_add@@Base+0x160>
   2cf34:	add	r1, pc, r1
   2cf38:	ldr	r0, [pc, #220]	; 2d01c <flatcc_builder_table_add@@Base+0x164>
   2cf3c:	add	r0, pc, r0
   2cf40:	bl	12a08 <__assert_fail@plt>
   2cf44:	ldr	r3, [fp, #-8]
   2cf48:	ldrh	r3, [r3, #130]	; 0x82
   2cf4c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2cf50:	cmp	r2, r3
   2cf54:	bls	2cf64 <flatcc_builder_table_add@@Base+0xac>
   2cf58:	ldr	r3, [fp, #-8]
   2cf5c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2cf60:	strh	r2, [r3, #130]	; 0x82
   2cf64:	ldr	r3, [fp, #-8]
   2cf68:	ldr	r2, [r3, #4]
   2cf6c:	ldr	r3, [fp, #-12]
   2cf70:	lsl	r3, r3, #1
   2cf74:	add	r3, r2, r3
   2cf78:	ldrh	r3, [r3]
   2cf7c:	cmp	r3, #0
   2cf80:	beq	2cfa4 <flatcc_builder_table_add@@Base+0xec>
   2cf84:	ldr	r3, [pc, #148]	; 2d020 <flatcc_builder_table_add@@Base+0x168>
   2cf88:	add	r3, pc, r3
   2cf8c:	ldr	r2, [pc, #144]	; 2d024 <flatcc_builder_table_add@@Base+0x16c>
   2cf90:	ldr	r1, [pc, #144]	; 2d028 <flatcc_builder_table_add@@Base+0x170>
   2cf94:	add	r1, pc, r1
   2cf98:	ldr	r0, [pc, #140]	; 2d02c <flatcc_builder_table_add@@Base+0x174>
   2cf9c:	add	r0, pc, r0
   2cfa0:	bl	12a08 <__assert_fail@plt>
   2cfa4:	ldr	r3, [fp, #-8]
   2cfa8:	ldr	r2, [r3, #12]
   2cfac:	ldr	r3, [fp, #-12]
   2cfb0:	eor	r3, r3, r2
   2cfb4:	ldr	r2, [pc, #116]	; 2d030 <flatcc_builder_table_add@@Base+0x178>
   2cfb8:	mul	r2, r2, r3
   2cfbc:	ldr	r3, [fp, #-16]
   2cfc0:	eor	r3, r3, r2
   2cfc4:	ldr	r2, [pc, #100]	; 2d030 <flatcc_builder_table_add@@Base+0x178>
   2cfc8:	mul	r2, r2, r3
   2cfcc:	ldr	r3, [fp, #-8]
   2cfd0:	str	r2, [r3, #12]
   2cfd4:	ldr	r3, [fp, #-12]
   2cfd8:	uxth	r3, r3
   2cfdc:	ldrh	r2, [fp, #-18]	; 0xffffffee
   2cfe0:	ldr	r1, [fp, #-16]
   2cfe4:	ldr	r0, [fp, #-8]
   2cfe8:	bl	27d4c <flatcc_builder_default_alloc@@Base+0x444>
   2cfec:	mov	r3, r0
   2cff0:	mov	r0, r3
   2cff4:	sub	sp, fp, #4
   2cff8:	pop	{fp, pc}
   2cffc:	andeq	r8, r0, r8, lsr #8
   2d000:	andeq	r0, r0, sp, ror #13
   2d004:	andeq	r7, r0, r8, lsr fp
   2d008:	strdeq	r7, [r0], -r0
   2d00c:	strdeq	r7, [r0], -ip
   2d010:	andeq	r8, r0, ip, ror #7
   2d014:	andeq	r0, r0, lr, ror #13
   2d018:	strdeq	r7, [r0], -ip
   2d01c:	ldrdeq	r7, [r0], -r0
   2d020:	andeq	r8, r0, ip, lsl #7
   2d024:	strdeq	r0, [r0], -r8
   2d028:	muleq	r0, ip, sl
   2d02c:	strdeq	r7, [r0], -r4
   2d030:			; <UNDEFINED> instruction: 0x9e3779b1

0002d034 <flatcc_builder_table_edit@@Base>:
   2d034:	push	{fp, lr}
   2d038:	add	fp, sp, #4
   2d03c:	sub	sp, sp, #8
   2d040:	str	r0, [fp, #-8]
   2d044:	str	r1, [fp, #-12]
   2d048:	ldr	r3, [fp, #-8]
   2d04c:	ldr	r3, [r3, #32]
   2d050:	ldrh	r3, [r3, #14]
   2d054:	cmp	r3, #3
   2d058:	beq	2d07c <flatcc_builder_table_edit@@Base+0x48>
   2d05c:	ldr	r3, [pc, #64]	; 2d0a4 <flatcc_builder_table_edit@@Base+0x70>
   2d060:	add	r3, pc, r3
   2d064:	ldr	r2, [pc, #60]	; 2d0a8 <flatcc_builder_table_edit@@Base+0x74>
   2d068:	ldr	r1, [pc, #60]	; 2d0ac <flatcc_builder_table_edit@@Base+0x78>
   2d06c:	add	r1, pc, r1
   2d070:	ldr	r0, [pc, #56]	; 2d0b0 <flatcc_builder_table_edit@@Base+0x7c>
   2d074:	add	r0, pc, r0
   2d078:	bl	12a08 <__assert_fail@plt>
   2d07c:	ldr	r3, [fp, #-8]
   2d080:	ldr	r2, [r3, #16]
   2d084:	ldr	r3, [fp, #-8]
   2d088:	ldr	r1, [r3, #20]
   2d08c:	ldr	r3, [fp, #-12]
   2d090:	sub	r3, r1, r3
   2d094:	add	r3, r2, r3
   2d098:	mov	r0, r3
   2d09c:	sub	sp, fp, #4
   2d0a0:	pop	{fp, pc}
   2d0a4:	ldrdeq	r8, [r0], -r0
   2d0a8:	andeq	r0, r0, r2, lsl #14
   2d0ac:	andeq	r7, r0, r4, asr #19
   2d0b0:	andeq	r7, r0, ip, ror ip

0002d0b4 <flatcc_builder_table_add_copy@@Base>:
   2d0b4:	push	{fp, lr}
   2d0b8:	add	fp, sp, #4
   2d0bc:	sub	sp, sp, #24
   2d0c0:	str	r0, [fp, #-16]
   2d0c4:	str	r1, [fp, #-20]	; 0xffffffec
   2d0c8:	str	r2, [fp, #-24]	; 0xffffffe8
   2d0cc:	str	r3, [fp, #-28]	; 0xffffffe4
   2d0d0:	ldrh	r3, [fp, #4]
   2d0d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2d0d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   2d0dc:	ldr	r0, [fp, #-16]
   2d0e0:	bl	2ceb8 <flatcc_builder_table_add@@Base>
   2d0e4:	str	r0, [fp, #-8]
   2d0e8:	ldr	r3, [fp, #-8]
   2d0ec:	cmp	r3, #0
   2d0f0:	beq	2d104 <flatcc_builder_table_add_copy@@Base+0x50>
   2d0f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2d0f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2d0fc:	ldr	r0, [fp, #-8]
   2d100:	bl	12930 <memcpy@plt>
   2d104:	ldr	r3, [fp, #-8]
   2d108:	mov	r0, r3
   2d10c:	sub	sp, fp, #4
   2d110:	pop	{fp, pc}

0002d114 <flatcc_builder_table_add_offset@@Base>:
   2d114:	push	{fp, lr}
   2d118:	add	fp, sp, #4
   2d11c:	sub	sp, sp, #8
   2d120:	str	r0, [fp, #-8]
   2d124:	str	r1, [fp, #-12]
   2d128:	ldr	r3, [fp, #-8]
   2d12c:	ldr	r3, [r3, #32]
   2d130:	ldrh	r3, [r3, #14]
   2d134:	cmp	r3, #3
   2d138:	beq	2d15c <flatcc_builder_table_add_offset@@Base+0x48>
   2d13c:	ldr	r3, [pc, #228]	; 2d228 <flatcc_builder_table_add_offset@@Base+0x114>
   2d140:	add	r3, pc, r3
   2d144:	ldr	r2, [pc, #224]	; 2d22c <flatcc_builder_table_add_offset@@Base+0x118>
   2d148:	ldr	r1, [pc, #224]	; 2d230 <flatcc_builder_table_add_offset@@Base+0x11c>
   2d14c:	add	r1, pc, r1
   2d150:	ldr	r0, [pc, #220]	; 2d234 <flatcc_builder_table_add_offset@@Base+0x120>
   2d154:	add	r0, pc, r0
   2d158:	bl	12a08 <__assert_fail@plt>
   2d15c:	ldr	r3, [fp, #-12]
   2d160:	cmp	r3, #0
   2d164:	blt	2d178 <flatcc_builder_table_add_offset@@Base+0x64>
   2d168:	ldr	r3, [fp, #-12]
   2d16c:	ldr	r2, [pc, #196]	; 2d238 <flatcc_builder_table_add_offset@@Base+0x124>
   2d170:	cmp	r3, r2
   2d174:	ble	2d198 <flatcc_builder_table_add_offset@@Base+0x84>
   2d178:	ldr	r3, [pc, #188]	; 2d23c <flatcc_builder_table_add_offset@@Base+0x128>
   2d17c:	add	r3, pc, r3
   2d180:	ldr	r2, [pc, #184]	; 2d240 <flatcc_builder_table_add_offset@@Base+0x12c>
   2d184:	ldr	r1, [pc, #184]	; 2d244 <flatcc_builder_table_add_offset@@Base+0x130>
   2d188:	add	r1, pc, r1
   2d18c:	ldr	r0, [pc, #180]	; 2d248 <flatcc_builder_table_add_offset@@Base+0x134>
   2d190:	add	r0, pc, r0
   2d194:	bl	12a08 <__assert_fail@plt>
   2d198:	ldr	r3, [fp, #-8]
   2d19c:	ldr	r2, [r3, #4]
   2d1a0:	ldr	r3, [fp, #-12]
   2d1a4:	lsl	r3, r3, #1
   2d1a8:	add	r3, r2, r3
   2d1ac:	ldrh	r3, [r3]
   2d1b0:	cmp	r3, #0
   2d1b4:	beq	2d1d8 <flatcc_builder_table_add_offset@@Base+0xc4>
   2d1b8:	ldr	r3, [pc, #140]	; 2d24c <flatcc_builder_table_add_offset@@Base+0x138>
   2d1bc:	add	r3, pc, r3
   2d1c0:	ldr	r2, [pc, #136]	; 2d250 <flatcc_builder_table_add_offset@@Base+0x13c>
   2d1c4:	ldr	r1, [pc, #136]	; 2d254 <flatcc_builder_table_add_offset@@Base+0x140>
   2d1c8:	add	r1, pc, r1
   2d1cc:	ldr	r0, [pc, #132]	; 2d258 <flatcc_builder_table_add_offset@@Base+0x144>
   2d1d0:	add	r0, pc, r0
   2d1d4:	bl	12a08 <__assert_fail@plt>
   2d1d8:	ldr	r3, [fp, #-8]
   2d1dc:	ldr	r2, [r3, #12]
   2d1e0:	ldr	r3, [fp, #-12]
   2d1e4:	eor	r3, r3, r2
   2d1e8:	ldr	r2, [pc, #108]	; 2d25c <flatcc_builder_table_add_offset@@Base+0x148>
   2d1ec:	mul	r3, r2, r3
   2d1f0:	eor	r3, r3, #4
   2d1f4:	ldr	r2, [pc, #96]	; 2d25c <flatcc_builder_table_add_offset@@Base+0x148>
   2d1f8:	mul	r2, r2, r3
   2d1fc:	ldr	r3, [fp, #-8]
   2d200:	str	r2, [r3, #12]
   2d204:	ldr	r3, [fp, #-12]
   2d208:	uxth	r3, r3
   2d20c:	mov	r1, r3
   2d210:	ldr	r0, [fp, #-8]
   2d214:	bl	27e58 <flatcc_builder_default_alloc@@Base+0x550>
   2d218:	mov	r3, r0
   2d21c:	mov	r0, r3
   2d220:	sub	sp, fp, #4
   2d224:	pop	{fp, pc}
   2d228:	andeq	r8, r0, ip, lsl #4
   2d22c:	andeq	r0, r0, r3, lsl r7
   2d230:	andeq	r7, r0, r4, ror #17
   2d234:	muleq	r0, ip, fp
   2d238:	strdeq	r7, [r0], -ip
   2d23c:	ldrdeq	r8, [r0], -r0
   2d240:	andeq	r0, r0, r4, lsl r7
   2d244:	andeq	r7, r0, r8, lsr #17
   2d248:	andeq	r7, r0, ip, ror ip
   2d24c:	muleq	r0, r0, r1
   2d250:	andeq	r0, r0, fp, lsl r7
   2d254:	andeq	r7, r0, r8, ror #16
   2d258:	andeq	r7, r0, r0, asr #17
   2d25c:			; <UNDEFINED> instruction: 0x9e3779b1

0002d260 <flatcc_builder_push_buffer_alignment@@Base>:
   2d260:	push	{fp}		; (str fp, [sp, #-4]!)
   2d264:	add	fp, sp, #0
   2d268:	sub	sp, sp, #20
   2d26c:	str	r0, [fp, #-16]
   2d270:	ldr	r3, [fp, #-16]
   2d274:	ldrh	r3, [r3, #128]	; 0x80
   2d278:	strh	r3, [fp, #-6]
   2d27c:	ldr	r3, [fp, #-16]
   2d280:	mov	r2, #4
   2d284:	strh	r2, [r3, #128]	; 0x80
   2d288:	ldrh	r3, [fp, #-6]
   2d28c:	mov	r0, r3
   2d290:	add	sp, fp, #0
   2d294:	pop	{fp}		; (ldr fp, [sp], #4)
   2d298:	bx	lr

0002d29c <flatcc_builder_pop_buffer_alignment@@Base>:
   2d29c:	push	{fp, lr}
   2d2a0:	add	fp, sp, #4
   2d2a4:	sub	sp, sp, #8
   2d2a8:	str	r0, [fp, #-8]
   2d2ac:	mov	r3, r1
   2d2b0:	strh	r3, [fp, #-10]
   2d2b4:	ldrh	r3, [fp, #-10]
   2d2b8:	mov	r1, r3
   2d2bc:	ldr	r0, [fp, #-8]
   2d2c0:	bl	287c4 <flatcc_builder_clear@@Base+0xb0>
   2d2c4:	nop			; (mov r0, r0)
   2d2c8:	sub	sp, fp, #4
   2d2cc:	pop	{fp, pc}

0002d2d0 <flatcc_builder_get_buffer_alignment@@Base>:
   2d2d0:	push	{fp}		; (str fp, [sp, #-4]!)
   2d2d4:	add	fp, sp, #0
   2d2d8:	sub	sp, sp, #12
   2d2dc:	str	r0, [fp, #-8]
   2d2e0:	ldr	r3, [fp, #-8]
   2d2e4:	ldrh	r3, [r3, #128]	; 0x80
   2d2e8:	mov	r0, r3
   2d2ec:	add	sp, fp, #0
   2d2f0:	pop	{fp}		; (ldr fp, [sp], #4)
   2d2f4:	bx	lr

0002d2f8 <flatcc_builder_set_vtable_clustering@@Base>:
   2d2f8:	push	{fp}		; (str fp, [sp, #-4]!)
   2d2fc:	add	fp, sp, #0
   2d300:	sub	sp, sp, #12
   2d304:	str	r0, [fp, #-8]
   2d308:	str	r1, [fp, #-12]
   2d30c:	ldr	r3, [fp, #-12]
   2d310:	cmp	r3, #0
   2d314:	moveq	r3, #1
   2d318:	movne	r3, #0
   2d31c:	uxtb	r3, r3
   2d320:	mov	r2, r3
   2d324:	ldr	r3, [fp, #-8]
   2d328:	str	r2, [r3, #180]	; 0xb4
   2d32c:	nop			; (mov r0, r0)
   2d330:	add	sp, fp, #0
   2d334:	pop	{fp}		; (ldr fp, [sp], #4)
   2d338:	bx	lr

0002d33c <flatcc_builder_set_block_align@@Base>:
   2d33c:	push	{fp}		; (str fp, [sp, #-4]!)
   2d340:	add	fp, sp, #0
   2d344:	sub	sp, sp, #12
   2d348:	str	r0, [fp, #-8]
   2d34c:	mov	r3, r1
   2d350:	strh	r3, [fp, #-10]
   2d354:	ldr	r3, [fp, #-8]
   2d358:	ldrh	r2, [fp, #-10]
   2d35c:	strh	r2, [r3, #132]	; 0x84
   2d360:	nop			; (mov r0, r0)
   2d364:	add	sp, fp, #0
   2d368:	pop	{fp}		; (ldr fp, [sp], #4)
   2d36c:	bx	lr

0002d370 <flatcc_builder_get_level@@Base>:
   2d370:	push	{fp}		; (str fp, [sp, #-4]!)
   2d374:	add	fp, sp, #0
   2d378:	sub	sp, sp, #12
   2d37c:	str	r0, [fp, #-8]
   2d380:	ldr	r3, [fp, #-8]
   2d384:	ldr	r3, [r3, #156]	; 0x9c
   2d388:	mov	r0, r3
   2d38c:	add	sp, fp, #0
   2d390:	pop	{fp}		; (ldr fp, [sp], #4)
   2d394:	bx	lr

0002d398 <flatcc_builder_set_max_level@@Base>:
   2d398:	push	{fp}		; (str fp, [sp, #-4]!)
   2d39c:	add	fp, sp, #0
   2d3a0:	sub	sp, sp, #12
   2d3a4:	str	r0, [fp, #-8]
   2d3a8:	str	r1, [fp, #-12]
   2d3ac:	ldr	r3, [fp, #-8]
   2d3b0:	ldr	r2, [fp, #-12]
   2d3b4:	str	r2, [r3, #176]	; 0xb0
   2d3b8:	ldr	r3, [fp, #-8]
   2d3bc:	ldr	r2, [r3, #160]	; 0xa0
   2d3c0:	ldr	r3, [fp, #-8]
   2d3c4:	ldr	r3, [r3, #176]	; 0xb0
   2d3c8:	cmp	r2, r3
   2d3cc:	bge	2d3e0 <flatcc_builder_set_max_level@@Base+0x48>
   2d3d0:	ldr	r3, [fp, #-8]
   2d3d4:	ldr	r2, [r3, #176]	; 0xb0
   2d3d8:	ldr	r3, [fp, #-8]
   2d3dc:	str	r2, [r3, #160]	; 0xa0
   2d3e0:	nop			; (mov r0, r0)
   2d3e4:	add	sp, fp, #0
   2d3e8:	pop	{fp}		; (ldr fp, [sp], #4)
   2d3ec:	bx	lr

0002d3f0 <flatcc_builder_get_buffer_size@@Base>:
   2d3f0:	push	{fp}		; (str fp, [sp, #-4]!)
   2d3f4:	add	fp, sp, #0
   2d3f8:	sub	sp, sp, #12
   2d3fc:	str	r0, [fp, #-8]
   2d400:	ldr	r3, [fp, #-8]
   2d404:	ldr	r2, [r3, #140]	; 0x8c
   2d408:	ldr	r3, [fp, #-8]
   2d40c:	ldr	r3, [r3, #136]	; 0x88
   2d410:	sub	r3, r2, r3
   2d414:	mov	r0, r3
   2d418:	add	sp, fp, #0
   2d41c:	pop	{fp}		; (ldr fp, [sp], #4)
   2d420:	bx	lr

0002d424 <flatcc_builder_get_buffer_start@@Base>:
   2d424:	push	{fp}		; (str fp, [sp, #-4]!)
   2d428:	add	fp, sp, #0
   2d42c:	sub	sp, sp, #12
   2d430:	str	r0, [fp, #-8]
   2d434:	ldr	r3, [fp, #-8]
   2d438:	ldr	r3, [r3, #136]	; 0x88
   2d43c:	mov	r0, r3
   2d440:	add	sp, fp, #0
   2d444:	pop	{fp}		; (ldr fp, [sp], #4)
   2d448:	bx	lr

0002d44c <flatcc_builder_get_buffer_end@@Base>:
   2d44c:	push	{fp}		; (str fp, [sp, #-4]!)
   2d450:	add	fp, sp, #0
   2d454:	sub	sp, sp, #12
   2d458:	str	r0, [fp, #-8]
   2d45c:	ldr	r3, [fp, #-8]
   2d460:	ldr	r3, [r3, #140]	; 0x8c
   2d464:	mov	r0, r3
   2d468:	add	sp, fp, #0
   2d46c:	pop	{fp}		; (ldr fp, [sp], #4)
   2d470:	bx	lr

0002d474 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2d474:	push	{fp}		; (str fp, [sp, #-4]!)
   2d478:	add	fp, sp, #0
   2d47c:	sub	sp, sp, #12
   2d480:	str	r0, [fp, #-8]
   2d484:	str	r1, [fp, #-12]
   2d488:	ldr	r3, [fp, #-8]
   2d48c:	ldr	r2, [fp, #-12]
   2d490:	str	r2, [r3, #172]	; 0xac
   2d494:	nop			; (mov r0, r0)
   2d498:	add	sp, fp, #0
   2d49c:	pop	{fp}		; (ldr fp, [sp], #4)
   2d4a0:	bx	lr

0002d4a4 <flatcc_builder_set_identifier@@Base>:
   2d4a4:	push	{fp}		; (str fp, [sp, #-4]!)
   2d4a8:	add	fp, sp, #0
   2d4ac:	sub	sp, sp, #12
   2d4b0:	str	r0, [fp, #-8]
   2d4b4:	str	r1, [fp, #-12]
   2d4b8:	ldr	r1, [pc, #60]	; 2d4fc <flatcc_builder_set_identifier@@Base+0x58>
   2d4bc:	add	r1, pc, r1
   2d4c0:	ldr	r3, [fp, #-8]
   2d4c4:	add	r2, r3, #168	; 0xa8
   2d4c8:	ldr	r3, [fp, #-12]
   2d4cc:	cmp	r3, #0
   2d4d0:	beq	2d4dc <flatcc_builder_set_identifier@@Base+0x38>
   2d4d4:	ldr	r3, [fp, #-12]
   2d4d8:	b	2d4e4 <flatcc_builder_set_identifier@@Base+0x40>
   2d4dc:	ldr	r3, [pc, #28]	; 2d500 <flatcc_builder_set_identifier@@Base+0x5c>
   2d4e0:	ldr	r3, [r1, r3]
   2d4e4:	ldr	r3, [r3]
   2d4e8:	str	r3, [r2]
   2d4ec:	nop			; (mov r0, r0)
   2d4f0:	add	sp, fp, #0
   2d4f4:	pop	{fp}		; (ldr fp, [sp], #4)
   2d4f8:	bx	lr
   2d4fc:	andeq	r8, r1, ip, lsr fp
   2d500:	andeq	r0, r0, r4, rrx

0002d504 <flatcc_builder_get_type@@Base>:
   2d504:	push	{fp}		; (str fp, [sp, #-4]!)
   2d508:	add	fp, sp, #0
   2d50c:	sub	sp, sp, #12
   2d510:	str	r0, [fp, #-8]
   2d514:	ldr	r3, [fp, #-8]
   2d518:	ldr	r3, [r3, #32]
   2d51c:	cmp	r3, #0
   2d520:	beq	2d534 <flatcc_builder_get_type@@Base+0x30>
   2d524:	ldr	r3, [fp, #-8]
   2d528:	ldr	r3, [r3, #32]
   2d52c:	ldrh	r3, [r3, #14]
   2d530:	b	2d538 <flatcc_builder_get_type@@Base+0x34>
   2d534:	mov	r3, #0
   2d538:	mov	r0, r3
   2d53c:	add	sp, fp, #0
   2d540:	pop	{fp}		; (ldr fp, [sp], #4)
   2d544:	bx	lr

0002d548 <flatcc_builder_get_type_at@@Base>:
   2d548:	push	{fp}		; (str fp, [sp, #-4]!)
   2d54c:	add	fp, sp, #0
   2d550:	sub	sp, sp, #12
   2d554:	str	r0, [fp, #-8]
   2d558:	str	r1, [fp, #-12]
   2d55c:	ldr	r3, [fp, #-12]
   2d560:	cmp	r3, #0
   2d564:	ble	2d57c <flatcc_builder_get_type_at@@Base+0x34>
   2d568:	ldr	r3, [fp, #-8]
   2d56c:	ldr	r2, [r3, #156]	; 0x9c
   2d570:	ldr	r3, [fp, #-12]
   2d574:	cmp	r2, r3
   2d578:	bge	2d584 <flatcc_builder_get_type_at@@Base+0x3c>
   2d57c:	mov	r3, #0
   2d580:	b	2d5b8 <flatcc_builder_get_type_at@@Base+0x70>
   2d584:	ldr	r3, [fp, #-8]
   2d588:	ldr	r2, [r3, #32]
   2d58c:	ldr	r3, [fp, #-8]
   2d590:	ldr	r3, [r3, #156]	; 0x9c
   2d594:	ldr	r1, [fp, #-12]
   2d598:	sub	r3, r1, r3
   2d59c:	mov	r1, r3
   2d5a0:	mov	r3, r1
   2d5a4:	lsl	r3, r3, #3
   2d5a8:	add	r3, r3, r1
   2d5ac:	lsl	r3, r3, #2
   2d5b0:	add	r3, r2, r3
   2d5b4:	ldrh	r3, [r3, #14]
   2d5b8:	mov	r0, r3
   2d5bc:	add	sp, fp, #0
   2d5c0:	pop	{fp}		; (ldr fp, [sp], #4)
   2d5c4:	bx	lr

0002d5c8 <flatcc_builder_get_direct_buffer@@Base>:
   2d5c8:	push	{fp, lr}
   2d5cc:	add	fp, sp, #4
   2d5d0:	sub	sp, sp, #8
   2d5d4:	str	r0, [fp, #-8]
   2d5d8:	str	r1, [fp, #-12]
   2d5dc:	ldr	r3, [fp, #-8]
   2d5e0:	ldr	r3, [r3, #184]	; 0xb8
   2d5e4:	cmp	r3, #0
   2d5e8:	beq	2d608 <flatcc_builder_get_direct_buffer@@Base+0x40>
   2d5ec:	ldr	r3, [fp, #-8]
   2d5f0:	add	r3, r3, #188	; 0xbc
   2d5f4:	ldr	r1, [fp, #-12]
   2d5f8:	mov	r0, r3
   2d5fc:	bl	27834 <main@@Base+0x594>
   2d600:	mov	r3, r0
   2d604:	b	2d624 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   2d608:	ldr	r3, [fp, #-12]
   2d60c:	cmp	r3, #0
   2d610:	beq	2d620 <flatcc_builder_get_direct_buffer@@Base+0x58>
   2d614:	ldr	r3, [fp, #-12]
   2d618:	mov	r2, #0
   2d61c:	str	r2, [r3]
   2d620:	mov	r3, #0
   2d624:	mov	r0, r3
   2d628:	sub	sp, fp, #4
   2d62c:	pop	{fp, pc}

0002d630 <flatcc_builder_copy_buffer@@Base>:
   2d630:	push	{fp, lr}
   2d634:	add	fp, sp, #4
   2d638:	sub	sp, sp, #16
   2d63c:	str	r0, [fp, #-8]
   2d640:	str	r1, [fp, #-12]
   2d644:	str	r2, [fp, #-16]
   2d648:	ldr	r3, [fp, #-8]
   2d64c:	ldr	r3, [r3, #184]	; 0xb8
   2d650:	cmp	r3, #0
   2d654:	bne	2d660 <flatcc_builder_copy_buffer@@Base+0x30>
   2d658:	mov	r3, #0
   2d65c:	b	2d6ac <flatcc_builder_copy_buffer@@Base+0x7c>
   2d660:	ldr	r3, [fp, #-8]
   2d664:	add	r3, r3, #188	; 0xbc
   2d668:	ldr	r2, [fp, #-16]
   2d66c:	ldr	r1, [fp, #-12]
   2d670:	mov	r0, r3
   2d674:	bl	2e3f8 <flatcc_emitter_copy_buffer@@Base>
   2d678:	str	r0, [fp, #-12]
   2d67c:	ldr	r3, [fp, #-12]
   2d680:	cmp	r3, #0
   2d684:	bne	2d6a8 <flatcc_builder_copy_buffer@@Base+0x78>
   2d688:	ldr	r3, [pc, #40]	; 2d6b8 <flatcc_builder_copy_buffer@@Base+0x88>
   2d68c:	add	r3, pc, r3
   2d690:	ldr	r2, [pc, #36]	; 2d6bc <flatcc_builder_copy_buffer@@Base+0x8c>
   2d694:	ldr	r1, [pc, #36]	; 2d6c0 <flatcc_builder_copy_buffer@@Base+0x90>
   2d698:	add	r1, pc, r1
   2d69c:	ldr	r0, [pc, #32]	; 2d6c4 <flatcc_builder_copy_buffer@@Base+0x94>
   2d6a0:	add	r0, pc, r0
   2d6a4:	bl	12a08 <__assert_fail@plt>
   2d6a8:	ldr	r3, [fp, #-12]
   2d6ac:	mov	r0, r3
   2d6b0:	sub	sp, fp, #4
   2d6b4:	pop	{fp, pc}
   2d6b8:	andeq	r7, r0, r0, ror #25
   2d6bc:	andeq	r0, r0, r6, lsl #15
   2d6c0:	muleq	r0, r8, r3
   2d6c4:			; <UNDEFINED> instruction: 0x000077b0

0002d6c8 <flatcc_builder_finalize_buffer@@Base>:
   2d6c8:	push	{fp, lr}
   2d6cc:	add	fp, sp, #4
   2d6d0:	sub	sp, sp, #16
   2d6d4:	str	r0, [fp, #-16]
   2d6d8:	str	r1, [fp, #-20]	; 0xffffffec
   2d6dc:	ldr	r0, [fp, #-16]
   2d6e0:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   2d6e4:	str	r0, [fp, #-8]
   2d6e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d6ec:	cmp	r3, #0
   2d6f0:	beq	2d700 <flatcc_builder_finalize_buffer@@Base+0x38>
   2d6f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d6f8:	ldr	r2, [fp, #-8]
   2d6fc:	str	r2, [r3]
   2d700:	ldr	r0, [fp, #-8]
   2d704:	bl	12978 <malloc@plt>
   2d708:	mov	r3, r0
   2d70c:	str	r3, [fp, #-12]
   2d710:	ldr	r3, [fp, #-12]
   2d714:	cmp	r3, #0
   2d718:	bne	2d73c <flatcc_builder_finalize_buffer@@Base+0x74>
   2d71c:	ldr	r3, [pc, #136]	; 2d7ac <flatcc_builder_finalize_buffer@@Base+0xe4>
   2d720:	add	r3, pc, r3
   2d724:	ldr	r2, [pc, #132]	; 2d7b0 <flatcc_builder_finalize_buffer@@Base+0xe8>
   2d728:	ldr	r1, [pc, #132]	; 2d7b4 <flatcc_builder_finalize_buffer@@Base+0xec>
   2d72c:	add	r1, pc, r1
   2d730:	ldr	r0, [pc, #128]	; 2d7b8 <flatcc_builder_finalize_buffer@@Base+0xf0>
   2d734:	add	r0, pc, r0
   2d738:	bl	12a08 <__assert_fail@plt>
   2d73c:	ldr	r2, [fp, #-8]
   2d740:	ldr	r1, [fp, #-12]
   2d744:	ldr	r0, [fp, #-16]
   2d748:	bl	2d630 <flatcc_builder_copy_buffer@@Base>
   2d74c:	mov	r3, r0
   2d750:	cmp	r3, #0
   2d754:	bne	2d778 <flatcc_builder_finalize_buffer@@Base+0xb0>
   2d758:	ldr	r3, [pc, #92]	; 2d7bc <flatcc_builder_finalize_buffer@@Base+0xf4>
   2d75c:	add	r3, pc, r3
   2d760:	ldr	r2, [pc, #88]	; 2d7c0 <flatcc_builder_finalize_buffer@@Base+0xf8>
   2d764:	ldr	r1, [pc, #88]	; 2d7c4 <flatcc_builder_finalize_buffer@@Base+0xfc>
   2d768:	add	r1, pc, r1
   2d76c:	ldr	r0, [pc, #84]	; 2d7c8 <flatcc_builder_finalize_buffer@@Base+0x100>
   2d770:	add	r0, pc, r0
   2d774:	bl	12a08 <__assert_fail@plt>
   2d778:	ldr	r3, [fp, #-12]
   2d77c:	cmp	r3, #0
   2d780:	bne	2d79c <flatcc_builder_finalize_buffer@@Base+0xd4>
   2d784:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d788:	cmp	r3, #0
   2d78c:	beq	2d79c <flatcc_builder_finalize_buffer@@Base+0xd4>
   2d790:	ldr	r3, [fp, #-20]	; 0xffffffec
   2d794:	mov	r2, #0
   2d798:	str	r2, [r3]
   2d79c:	ldr	r3, [fp, #-12]
   2d7a0:	mov	r0, r3
   2d7a4:	sub	sp, fp, #4
   2d7a8:	pop	{fp, pc}
   2d7ac:	andeq	r7, r0, r8, ror #24
   2d7b0:	muleq	r0, r8, r7
   2d7b4:	andeq	r7, r0, r4, lsl #6
   2d7b8:	andeq	r7, r0, ip, asr r3
   2d7bc:	andeq	r7, r0, ip, lsr #24
   2d7c0:	muleq	r0, ip, r7
   2d7c4:	andeq	r7, r0, r8, asr #5
   2d7c8:	andeq	r7, r0, r0, lsr #6

0002d7cc <flatcc_builder_finalize_aligned_buffer@@Base>:
   2d7cc:	push	{fp, lr}
   2d7d0:	add	fp, sp, #4
   2d7d4:	sub	sp, sp, #24
   2d7d8:	str	r0, [fp, #-24]	; 0xffffffe8
   2d7dc:	str	r1, [fp, #-28]	; 0xffffffe4
   2d7e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2d7e4:	bl	2d3f0 <flatcc_builder_get_buffer_size@@Base>
   2d7e8:	str	r0, [fp, #-12]
   2d7ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d7f0:	cmp	r3, #0
   2d7f4:	beq	2d804 <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   2d7f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d7fc:	ldr	r2, [fp, #-12]
   2d800:	str	r2, [r3]
   2d804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2d808:	bl	2d2d0 <flatcc_builder_get_buffer_alignment@@Base>
   2d80c:	mov	r3, r0
   2d810:	str	r3, [fp, #-16]
   2d814:	ldr	r2, [fp, #-12]
   2d818:	ldr	r3, [fp, #-16]
   2d81c:	add	r3, r2, r3
   2d820:	sub	r2, r3, #1
   2d824:	ldr	r3, [fp, #-16]
   2d828:	rsb	r3, r3, #0
   2d82c:	and	r3, r3, r2
   2d830:	str	r3, [fp, #-12]
   2d834:	ldr	r1, [fp, #-12]
   2d838:	ldr	r0, [fp, #-16]
   2d83c:	bl	27740 <main@@Base+0x4a0>
   2d840:	str	r0, [fp, #-8]
   2d844:	ldr	r3, [fp, #-8]
   2d848:	cmp	r3, #0
   2d84c:	beq	2d880 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   2d850:	ldr	r2, [fp, #-12]
   2d854:	ldr	r1, [fp, #-8]
   2d858:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2d85c:	bl	2d630 <flatcc_builder_copy_buffer@@Base>
   2d860:	mov	r3, r0
   2d864:	cmp	r3, #0
   2d868:	bne	2d884 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   2d86c:	ldr	r0, [fp, #-8]
   2d870:	bl	12924 <free@plt>
   2d874:	mov	r3, #0
   2d878:	str	r3, [fp, #-8]
   2d87c:	b	2d884 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   2d880:	nop			; (mov r0, r0)
   2d884:	ldr	r3, [fp, #-8]
   2d888:	cmp	r3, #0
   2d88c:	bne	2d8a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   2d890:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d894:	cmp	r3, #0
   2d898:	beq	2d8a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   2d89c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d8a0:	mov	r2, #0
   2d8a4:	str	r2, [r3]
   2d8a8:	ldr	r3, [fp, #-8]
   2d8ac:	mov	r0, r3
   2d8b0:	sub	sp, fp, #4
   2d8b4:	pop	{fp, pc}

0002d8b8 <flatcc_builder_aligned_alloc@@Base>:
   2d8b8:	push	{fp, lr}
   2d8bc:	add	fp, sp, #4
   2d8c0:	sub	sp, sp, #8
   2d8c4:	str	r0, [fp, #-8]
   2d8c8:	str	r1, [fp, #-12]
   2d8cc:	ldr	r1, [fp, #-12]
   2d8d0:	ldr	r0, [fp, #-8]
   2d8d4:	bl	27740 <main@@Base+0x4a0>
   2d8d8:	mov	r3, r0
   2d8dc:	mov	r0, r3
   2d8e0:	sub	sp, fp, #4
   2d8e4:	pop	{fp, pc}

0002d8e8 <flatcc_builder_aligned_free@@Base>:
   2d8e8:	push	{fp, lr}
   2d8ec:	add	fp, sp, #4
   2d8f0:	sub	sp, sp, #8
   2d8f4:	str	r0, [fp, #-8]
   2d8f8:	ldr	r0, [fp, #-8]
   2d8fc:	bl	12924 <free@plt>
   2d900:	nop			; (mov r0, r0)
   2d904:	sub	sp, fp, #4
   2d908:	pop	{fp, pc}

0002d90c <flatcc_builder_get_emit_context@@Base>:
   2d90c:	push	{fp}		; (str fp, [sp, #-4]!)
   2d910:	add	fp, sp, #0
   2d914:	sub	sp, sp, #12
   2d918:	str	r0, [fp, #-8]
   2d91c:	ldr	r3, [fp, #-8]
   2d920:	ldr	r3, [r3, #36]	; 0x24
   2d924:	mov	r0, r3
   2d928:	add	sp, fp, #0
   2d92c:	pop	{fp}		; (ldr fp, [sp], #4)
   2d930:	bx	lr
   2d934:	push	{fp, lr}
   2d938:	add	fp, sp, #4
   2d93c:	sub	sp, sp, #16
   2d940:	str	r0, [fp, #-16]
   2d944:	mov	r3, #0
   2d948:	str	r3, [fp, #-8]
   2d94c:	ldr	r3, [fp, #-16]
   2d950:	ldr	r3, [r3]
   2d954:	cmp	r3, #0
   2d958:	beq	2d9b0 <flatcc_builder_get_emit_context@@Base+0xa4>
   2d95c:	ldr	r3, [fp, #-16]
   2d960:	ldr	r3, [r3]
   2d964:	ldr	r2, [r3, #2948]	; 0xb84
   2d968:	ldr	r3, [fp, #-16]
   2d96c:	ldr	r3, [r3, #4]
   2d970:	cmp	r2, r3
   2d974:	beq	2d9b0 <flatcc_builder_get_emit_context@@Base+0xa4>
   2d978:	ldr	r3, [fp, #-16]
   2d97c:	ldr	r3, [r3]
   2d980:	ldr	r3, [r3, #2948]	; 0xb84
   2d984:	ldr	r2, [fp, #-16]
   2d988:	ldr	r2, [r2]
   2d98c:	ldr	r2, [r2, #2952]	; 0xb88
   2d990:	sub	r2, r2, #2944	; 0xb80
   2d994:	str	r2, [r3, #2952]	; 0xb88
   2d998:	ldr	r3, [fp, #-16]
   2d99c:	ldr	r3, [r3]
   2d9a0:	ldr	r2, [r3, #2948]	; 0xb84
   2d9a4:	ldr	r3, [fp, #-16]
   2d9a8:	str	r2, [r3]
   2d9ac:	b	2dad8 <flatcc_builder_get_emit_context@@Base+0x1cc>
   2d9b0:	ldr	r0, [pc, #368]	; 2db28 <flatcc_builder_get_emit_context@@Base+0x21c>
   2d9b4:	bl	12978 <malloc@plt>
   2d9b8:	mov	r3, r0
   2d9bc:	str	r3, [fp, #-8]
   2d9c0:	ldr	r3, [fp, #-8]
   2d9c4:	cmp	r3, #0
   2d9c8:	bne	2d9d4 <flatcc_builder_get_emit_context@@Base+0xc8>
   2d9cc:	mvn	r3, #0
   2d9d0:	b	2db1c <flatcc_builder_get_emit_context@@Base+0x210>
   2d9d4:	ldr	r3, [fp, #-16]
   2d9d8:	ldr	r3, [r3, #28]
   2d9dc:	add	r2, r3, #2944	; 0xb80
   2d9e0:	ldr	r3, [fp, #-16]
   2d9e4:	str	r2, [r3, #28]
   2d9e8:	ldr	r3, [fp, #-16]
   2d9ec:	ldr	r3, [r3]
   2d9f0:	cmp	r3, #0
   2d9f4:	beq	2da48 <flatcc_builder_get_emit_context@@Base+0x13c>
   2d9f8:	ldr	r3, [fp, #-16]
   2d9fc:	ldr	r2, [r3, #4]
   2da00:	ldr	r3, [fp, #-8]
   2da04:	str	r2, [r3, #2948]	; 0xb84
   2da08:	ldr	r3, [fp, #-16]
   2da0c:	ldr	r2, [r3]
   2da10:	ldr	r3, [fp, #-8]
   2da14:	str	r2, [r3, #2944]	; 0xb80
   2da18:	ldr	r3, [fp, #-16]
   2da1c:	ldr	r3, [r3]
   2da20:	ldr	r2, [fp, #-8]
   2da24:	str	r2, [r3, #2948]	; 0xb84
   2da28:	ldr	r3, [fp, #-16]
   2da2c:	ldr	r3, [r3, #4]
   2da30:	ldr	r2, [fp, #-8]
   2da34:	str	r2, [r3, #2944]	; 0xb80
   2da38:	ldr	r3, [fp, #-16]
   2da3c:	ldr	r2, [fp, #-8]
   2da40:	str	r2, [r3]
   2da44:	b	2dad8 <flatcc_builder_get_emit_context@@Base+0x1cc>
   2da48:	ldr	r3, [fp, #-16]
   2da4c:	ldr	r2, [fp, #-8]
   2da50:	str	r2, [r3]
   2da54:	ldr	r3, [fp, #-16]
   2da58:	ldr	r2, [fp, #-8]
   2da5c:	str	r2, [r3, #4]
   2da60:	ldr	r3, [fp, #-8]
   2da64:	ldr	r2, [fp, #-8]
   2da68:	str	r2, [r3, #2944]	; 0xb80
   2da6c:	ldr	r3, [fp, #-8]
   2da70:	ldr	r2, [fp, #-8]
   2da74:	str	r2, [r3, #2948]	; 0xb84
   2da78:	ldr	r3, [fp, #-16]
   2da7c:	ldr	r3, [r3]
   2da80:	add	r2, r3, #1472	; 0x5c0
   2da84:	ldr	r3, [fp, #-16]
   2da88:	str	r2, [r3, #8]
   2da8c:	ldr	r3, [fp, #-16]
   2da90:	ldr	r2, [r3, #8]
   2da94:	ldr	r3, [fp, #-16]
   2da98:	str	r2, [r3, #16]
   2da9c:	ldr	r3, [fp, #-16]
   2daa0:	mov	r2, #1472	; 0x5c0
   2daa4:	str	r2, [r3, #12]
   2daa8:	ldr	r3, [fp, #-16]
   2daac:	ldr	r3, [r3, #12]
   2dab0:	rsb	r2, r3, #2944	; 0xb80
   2dab4:	ldr	r3, [fp, #-16]
   2dab8:	str	r2, [r3, #20]
   2dabc:	ldr	r3, [fp, #-16]
   2dac0:	ldr	r3, [r3, #12]
   2dac4:	rsb	r2, r3, #0
   2dac8:	ldr	r3, [fp, #-8]
   2dacc:	str	r2, [r3, #2952]	; 0xb88
   2dad0:	mov	r3, #0
   2dad4:	b	2db1c <flatcc_builder_get_emit_context@@Base+0x210>
   2dad8:	ldr	r3, [fp, #-16]
   2dadc:	ldr	r3, [r3]
   2dae0:	add	r2, r3, #2944	; 0xb80
   2dae4:	ldr	r3, [fp, #-16]
   2dae8:	str	r2, [r3, #8]
   2daec:	ldr	r3, [fp, #-16]
   2daf0:	mov	r2, #2944	; 0xb80
   2daf4:	str	r2, [r3, #12]
   2daf8:	ldr	r3, [fp, #-16]
   2dafc:	ldr	r3, [r3]
   2db00:	ldr	r2, [fp, #-16]
   2db04:	ldr	r2, [r2]
   2db08:	ldr	r2, [r2, #2944]	; 0xb80
   2db0c:	ldr	r2, [r2, #2952]	; 0xb88
   2db10:	sub	r2, r2, #2944	; 0xb80
   2db14:	str	r2, [r3, #2952]	; 0xb88
   2db18:	mov	r3, #0
   2db1c:	mov	r0, r3
   2db20:	sub	sp, fp, #4
   2db24:	pop	{fp, pc}
   2db28:	andeq	r0, r0, ip, lsl #23
   2db2c:	push	{fp, lr}
   2db30:	add	fp, sp, #4
   2db34:	sub	sp, sp, #16
   2db38:	str	r0, [fp, #-16]
   2db3c:	mov	r3, #0
   2db40:	str	r3, [fp, #-8]
   2db44:	ldr	r3, [fp, #-16]
   2db48:	ldr	r3, [r3, #4]
   2db4c:	cmp	r3, #0
   2db50:	beq	2db88 <flatcc_builder_get_emit_context@@Base+0x27c>
   2db54:	ldr	r3, [fp, #-16]
   2db58:	ldr	r3, [r3, #4]
   2db5c:	ldr	r2, [r3, #2944]	; 0xb80
   2db60:	ldr	r3, [fp, #-16]
   2db64:	ldr	r3, [r3]
   2db68:	cmp	r2, r3
   2db6c:	beq	2db88 <flatcc_builder_get_emit_context@@Base+0x27c>
   2db70:	ldr	r3, [fp, #-16]
   2db74:	ldr	r3, [r3, #4]
   2db78:	ldr	r2, [r3, #2944]	; 0xb80
   2db7c:	ldr	r3, [fp, #-16]
   2db80:	str	r2, [r3, #4]
   2db84:	b	2dcb0 <flatcc_builder_get_emit_context@@Base+0x3a4>
   2db88:	ldr	r0, [pc, #368]	; 2dd00 <flatcc_builder_get_emit_context@@Base+0x3f4>
   2db8c:	bl	12978 <malloc@plt>
   2db90:	mov	r3, r0
   2db94:	str	r3, [fp, #-8]
   2db98:	ldr	r3, [fp, #-8]
   2db9c:	cmp	r3, #0
   2dba0:	bne	2dbac <flatcc_builder_get_emit_context@@Base+0x2a0>
   2dba4:	mvn	r3, #0
   2dba8:	b	2dcf4 <flatcc_builder_get_emit_context@@Base+0x3e8>
   2dbac:	ldr	r3, [fp, #-16]
   2dbb0:	ldr	r3, [r3, #28]
   2dbb4:	add	r2, r3, #2944	; 0xb80
   2dbb8:	ldr	r3, [fp, #-16]
   2dbbc:	str	r2, [r3, #28]
   2dbc0:	ldr	r3, [fp, #-16]
   2dbc4:	ldr	r3, [r3, #4]
   2dbc8:	cmp	r3, #0
   2dbcc:	beq	2dc20 <flatcc_builder_get_emit_context@@Base+0x314>
   2dbd0:	ldr	r3, [fp, #-16]
   2dbd4:	ldr	r2, [r3, #4]
   2dbd8:	ldr	r3, [fp, #-8]
   2dbdc:	str	r2, [r3, #2948]	; 0xb84
   2dbe0:	ldr	r3, [fp, #-16]
   2dbe4:	ldr	r2, [r3]
   2dbe8:	ldr	r3, [fp, #-8]
   2dbec:	str	r2, [r3, #2944]	; 0xb80
   2dbf0:	ldr	r3, [fp, #-16]
   2dbf4:	ldr	r3, [r3]
   2dbf8:	ldr	r2, [fp, #-8]
   2dbfc:	str	r2, [r3, #2948]	; 0xb84
   2dc00:	ldr	r3, [fp, #-16]
   2dc04:	ldr	r3, [r3, #4]
   2dc08:	ldr	r2, [fp, #-8]
   2dc0c:	str	r2, [r3, #2944]	; 0xb80
   2dc10:	ldr	r3, [fp, #-16]
   2dc14:	ldr	r2, [fp, #-8]
   2dc18:	str	r2, [r3, #4]
   2dc1c:	b	2dcb0 <flatcc_builder_get_emit_context@@Base+0x3a4>
   2dc20:	ldr	r3, [fp, #-16]
   2dc24:	ldr	r2, [fp, #-8]
   2dc28:	str	r2, [r3]
   2dc2c:	ldr	r3, [fp, #-16]
   2dc30:	ldr	r2, [fp, #-8]
   2dc34:	str	r2, [r3, #4]
   2dc38:	ldr	r3, [fp, #-8]
   2dc3c:	ldr	r2, [fp, #-8]
   2dc40:	str	r2, [r3, #2944]	; 0xb80
   2dc44:	ldr	r3, [fp, #-8]
   2dc48:	ldr	r2, [fp, #-8]
   2dc4c:	str	r2, [r3, #2948]	; 0xb84
   2dc50:	ldr	r3, [fp, #-16]
   2dc54:	ldr	r3, [r3]
   2dc58:	add	r2, r3, #1472	; 0x5c0
   2dc5c:	ldr	r3, [fp, #-16]
   2dc60:	str	r2, [r3, #8]
   2dc64:	ldr	r3, [fp, #-16]
   2dc68:	ldr	r2, [r3, #8]
   2dc6c:	ldr	r3, [fp, #-16]
   2dc70:	str	r2, [r3, #16]
   2dc74:	ldr	r3, [fp, #-16]
   2dc78:	mov	r2, #1472	; 0x5c0
   2dc7c:	str	r2, [r3, #12]
   2dc80:	ldr	r3, [fp, #-16]
   2dc84:	ldr	r3, [r3, #12]
   2dc88:	rsb	r2, r3, #2944	; 0xb80
   2dc8c:	ldr	r3, [fp, #-16]
   2dc90:	str	r2, [r3, #20]
   2dc94:	ldr	r3, [fp, #-16]
   2dc98:	ldr	r3, [r3, #12]
   2dc9c:	rsb	r2, r3, #0
   2dca0:	ldr	r3, [fp, #-8]
   2dca4:	str	r2, [r3, #2952]	; 0xb88
   2dca8:	mov	r3, #0
   2dcac:	b	2dcf4 <flatcc_builder_get_emit_context@@Base+0x3e8>
   2dcb0:	ldr	r3, [fp, #-16]
   2dcb4:	ldr	r3, [r3, #4]
   2dcb8:	mov	r2, r3
   2dcbc:	ldr	r3, [fp, #-16]
   2dcc0:	str	r2, [r3, #16]
   2dcc4:	ldr	r3, [fp, #-16]
   2dcc8:	mov	r2, #2944	; 0xb80
   2dccc:	str	r2, [r3, #20]
   2dcd0:	ldr	r3, [fp, #-16]
   2dcd4:	ldr	r3, [r3, #4]
   2dcd8:	ldr	r2, [fp, #-16]
   2dcdc:	ldr	r2, [r2, #4]
   2dce0:	ldr	r2, [r2, #2948]	; 0xb84
   2dce4:	ldr	r2, [r2, #2952]	; 0xb88
   2dce8:	add	r2, r2, #2944	; 0xb80
   2dcec:	str	r2, [r3, #2952]	; 0xb88
   2dcf0:	mov	r3, #0
   2dcf4:	mov	r0, r3
   2dcf8:	sub	sp, fp, #4
   2dcfc:	pop	{fp, pc}
   2dd00:	andeq	r0, r0, ip, lsl #23
   2dd04:	push	{fp, lr}
   2dd08:	add	fp, sp, #4
   2dd0c:	sub	sp, sp, #24
   2dd10:	str	r0, [fp, #-16]
   2dd14:	str	r1, [fp, #-20]	; 0xffffffec
   2dd18:	str	r2, [fp, #-24]	; 0xffffffe8
   2dd1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   2dd20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2dd24:	add	r3, r2, r3
   2dd28:	str	r3, [fp, #-20]	; 0xffffffec
   2dd2c:	b	2ddf0 <flatcc_builder_get_emit_context@@Base+0x4e4>
   2dd30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2dd34:	str	r3, [fp, #-8]
   2dd38:	ldr	r3, [fp, #-16]
   2dd3c:	ldr	r2, [r3, #12]
   2dd40:	ldr	r3, [fp, #-8]
   2dd44:	cmp	r2, r3
   2dd48:	bcs	2dd80 <flatcc_builder_get_emit_context@@Base+0x474>
   2dd4c:	ldr	r3, [fp, #-16]
   2dd50:	ldr	r3, [r3, #12]
   2dd54:	str	r3, [fp, #-8]
   2dd58:	ldr	r3, [fp, #-8]
   2dd5c:	cmp	r3, #0
   2dd60:	bne	2dd80 <flatcc_builder_get_emit_context@@Base+0x474>
   2dd64:	ldr	r0, [fp, #-16]
   2dd68:	bl	2d934 <flatcc_builder_get_emit_context@@Base+0x28>
   2dd6c:	mov	r3, r0
   2dd70:	cmp	r3, #0
   2dd74:	beq	2ddf0 <flatcc_builder_get_emit_context@@Base+0x4e4>
   2dd78:	mvn	r3, #0
   2dd7c:	b	2de00 <flatcc_builder_get_emit_context@@Base+0x4f4>
   2dd80:	ldr	r3, [fp, #-16]
   2dd84:	ldr	r2, [r3, #8]
   2dd88:	ldr	r3, [fp, #-8]
   2dd8c:	rsb	r3, r3, #0
   2dd90:	add	r2, r2, r3
   2dd94:	ldr	r3, [fp, #-16]
   2dd98:	str	r2, [r3, #8]
   2dd9c:	ldr	r3, [fp, #-16]
   2dda0:	ldr	r2, [r3, #12]
   2dda4:	ldr	r3, [fp, #-8]
   2dda8:	sub	r2, r2, r3
   2ddac:	ldr	r3, [fp, #-16]
   2ddb0:	str	r2, [r3, #12]
   2ddb4:	ldr	r3, [fp, #-8]
   2ddb8:	rsb	r3, r3, #0
   2ddbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ddc0:	add	r3, r2, r3
   2ddc4:	str	r3, [fp, #-20]	; 0xffffffec
   2ddc8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2ddcc:	ldr	r3, [fp, #-8]
   2ddd0:	sub	r3, r2, r3
   2ddd4:	str	r3, [fp, #-24]	; 0xffffffe8
   2ddd8:	ldr	r3, [fp, #-16]
   2dddc:	ldr	r3, [r3, #8]
   2dde0:	ldr	r2, [fp, #-8]
   2dde4:	ldr	r1, [fp, #-20]	; 0xffffffec
   2dde8:	mov	r0, r3
   2ddec:	bl	12930 <memcpy@plt>
   2ddf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ddf4:	cmp	r3, #0
   2ddf8:	bne	2dd30 <flatcc_builder_get_emit_context@@Base+0x424>
   2ddfc:	mov	r3, #0
   2de00:	mov	r0, r3
   2de04:	sub	sp, fp, #4
   2de08:	pop	{fp, pc}
   2de0c:	push	{fp, lr}
   2de10:	add	fp, sp, #4
   2de14:	sub	sp, sp, #24
   2de18:	str	r0, [fp, #-16]
   2de1c:	str	r1, [fp, #-20]	; 0xffffffec
   2de20:	str	r2, [fp, #-24]	; 0xffffffe8
   2de24:	b	2dee0 <flatcc_builder_get_emit_context@@Base+0x5d4>
   2de28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2de2c:	str	r3, [fp, #-8]
   2de30:	ldr	r3, [fp, #-16]
   2de34:	ldr	r2, [r3, #20]
   2de38:	ldr	r3, [fp, #-8]
   2de3c:	cmp	r2, r3
   2de40:	bcs	2de78 <flatcc_builder_get_emit_context@@Base+0x56c>
   2de44:	ldr	r3, [fp, #-16]
   2de48:	ldr	r3, [r3, #20]
   2de4c:	str	r3, [fp, #-8]
   2de50:	ldr	r3, [fp, #-8]
   2de54:	cmp	r3, #0
   2de58:	bne	2de78 <flatcc_builder_get_emit_context@@Base+0x56c>
   2de5c:	ldr	r0, [fp, #-16]
   2de60:	bl	2db2c <flatcc_builder_get_emit_context@@Base+0x220>
   2de64:	mov	r3, r0
   2de68:	cmp	r3, #0
   2de6c:	beq	2dee0 <flatcc_builder_get_emit_context@@Base+0x5d4>
   2de70:	mvn	r3, #0
   2de74:	b	2def0 <flatcc_builder_get_emit_context@@Base+0x5e4>
   2de78:	ldr	r3, [fp, #-16]
   2de7c:	ldr	r3, [r3, #16]
   2de80:	ldr	r2, [fp, #-8]
   2de84:	ldr	r1, [fp, #-20]	; 0xffffffec
   2de88:	mov	r0, r3
   2de8c:	bl	12930 <memcpy@plt>
   2de90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2de94:	ldr	r3, [fp, #-8]
   2de98:	sub	r3, r2, r3
   2de9c:	str	r3, [fp, #-24]	; 0xffffffe8
   2dea0:	ldr	r2, [fp, #-20]	; 0xffffffec
   2dea4:	ldr	r3, [fp, #-8]
   2dea8:	add	r3, r2, r3
   2deac:	str	r3, [fp, #-20]	; 0xffffffec
   2deb0:	ldr	r3, [fp, #-16]
   2deb4:	ldr	r2, [r3, #16]
   2deb8:	ldr	r3, [fp, #-8]
   2debc:	add	r2, r2, r3
   2dec0:	ldr	r3, [fp, #-16]
   2dec4:	str	r2, [r3, #16]
   2dec8:	ldr	r3, [fp, #-16]
   2decc:	ldr	r2, [r3, #20]
   2ded0:	ldr	r3, [fp, #-8]
   2ded4:	sub	r2, r2, r3
   2ded8:	ldr	r3, [fp, #-16]
   2dedc:	str	r2, [r3, #20]
   2dee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2dee4:	cmp	r3, #0
   2dee8:	bne	2de28 <flatcc_builder_get_emit_context@@Base+0x51c>
   2deec:	mov	r3, #0
   2def0:	mov	r0, r3
   2def4:	sub	sp, fp, #4
   2def8:	pop	{fp, pc}

0002defc <flatcc_emitter_recycle_page@@Base>:
   2defc:	push	{fp}		; (str fp, [sp, #-4]!)
   2df00:	add	fp, sp, #0
   2df04:	sub	sp, sp, #12
   2df08:	str	r0, [fp, #-8]
   2df0c:	str	r1, [fp, #-12]
   2df10:	ldr	r3, [fp, #-8]
   2df14:	ldr	r2, [r3]
   2df18:	ldr	r3, [fp, #-12]
   2df1c:	cmp	r2, r3
   2df20:	beq	2df38 <flatcc_emitter_recycle_page@@Base+0x3c>
   2df24:	ldr	r3, [fp, #-8]
   2df28:	ldr	r2, [r3, #4]
   2df2c:	ldr	r3, [fp, #-12]
   2df30:	cmp	r2, r3
   2df34:	bne	2df40 <flatcc_emitter_recycle_page@@Base+0x44>
   2df38:	mvn	r3, #0
   2df3c:	b	2dfb0 <flatcc_emitter_recycle_page@@Base+0xb4>
   2df40:	ldr	r3, [fp, #-12]
   2df44:	ldr	r3, [r3, #2944]	; 0xb80
   2df48:	ldr	r2, [fp, #-12]
   2df4c:	ldr	r2, [r2, #2948]	; 0xb84
   2df50:	str	r2, [r3, #2948]	; 0xb84
   2df54:	ldr	r3, [fp, #-12]
   2df58:	ldr	r3, [r3, #2948]	; 0xb84
   2df5c:	ldr	r2, [fp, #-12]
   2df60:	ldr	r2, [r2, #2944]	; 0xb80
   2df64:	str	r2, [r3, #2944]	; 0xb80
   2df68:	ldr	r3, [fp, #-8]
   2df6c:	ldr	r3, [r3]
   2df70:	ldr	r2, [r3, #2948]	; 0xb84
   2df74:	ldr	r3, [fp, #-12]
   2df78:	str	r2, [r3, #2948]	; 0xb84
   2df7c:	ldr	r3, [fp, #-8]
   2df80:	ldr	r2, [r3]
   2df84:	ldr	r3, [fp, #-12]
   2df88:	str	r2, [r3, #2944]	; 0xb80
   2df8c:	ldr	r3, [fp, #-12]
   2df90:	ldr	r3, [r3, #2948]	; 0xb84
   2df94:	ldr	r2, [fp, #-12]
   2df98:	str	r2, [r3, #2944]	; 0xb80
   2df9c:	ldr	r3, [fp, #-12]
   2dfa0:	ldr	r3, [r3, #2944]	; 0xb80
   2dfa4:	ldr	r2, [fp, #-12]
   2dfa8:	str	r2, [r3, #2948]	; 0xb84
   2dfac:	mov	r3, #0
   2dfb0:	mov	r0, r3
   2dfb4:	add	sp, fp, #0
   2dfb8:	pop	{fp}		; (ldr fp, [sp], #4)
   2dfbc:	bx	lr

0002dfc0 <flatcc_emitter_reset@@Base>:
   2dfc0:	push	{fp, lr}
   2dfc4:	add	fp, sp, #4
   2dfc8:	sub	sp, sp, #16
   2dfcc:	str	r0, [fp, #-16]
   2dfd0:	ldr	r3, [fp, #-16]
   2dfd4:	ldr	r3, [r3]
   2dfd8:	str	r3, [fp, #-8]
   2dfdc:	ldr	r3, [fp, #-16]
   2dfe0:	ldr	r3, [r3]
   2dfe4:	cmp	r3, #0
   2dfe8:	beq	2e140 <flatcc_emitter_reset@@Base+0x180>
   2dfec:	ldr	r3, [fp, #-16]
   2dff0:	ldr	r2, [r3]
   2dff4:	ldr	r3, [fp, #-16]
   2dff8:	str	r2, [r3, #4]
   2dffc:	ldr	r3, [fp, #-16]
   2e000:	ldr	r3, [r3]
   2e004:	add	r2, r3, #1472	; 0x5c0
   2e008:	ldr	r3, [fp, #-16]
   2e00c:	str	r2, [r3, #8]
   2e010:	ldr	r3, [fp, #-16]
   2e014:	ldr	r2, [r3, #8]
   2e018:	ldr	r3, [fp, #-16]
   2e01c:	str	r2, [r3, #16]
   2e020:	ldr	r3, [fp, #-16]
   2e024:	mov	r2, #1472	; 0x5c0
   2e028:	str	r2, [r3, #12]
   2e02c:	ldr	r3, [fp, #-16]
   2e030:	mov	r2, #1472	; 0x5c0
   2e034:	str	r2, [r3, #20]
   2e038:	ldr	r3, [fp, #-16]
   2e03c:	ldr	r3, [r3]
   2e040:	ldr	r2, [fp, #-16]
   2e044:	ldr	r2, [r2, #12]
   2e048:	rsb	r2, r2, #0
   2e04c:	str	r2, [r3, #2952]	; 0xb88
   2e050:	ldr	r3, [fp, #-16]
   2e054:	ldr	r3, [r3, #32]
   2e058:	cmp	r3, #0
   2e05c:	bne	2e070 <flatcc_emitter_reset@@Base+0xb0>
   2e060:	ldr	r3, [fp, #-16]
   2e064:	ldr	r2, [r3, #24]
   2e068:	ldr	r3, [fp, #-16]
   2e06c:	str	r2, [r3, #32]
   2e070:	ldr	r3, [fp, #-16]
   2e074:	ldr	r2, [r3, #32]
   2e078:	mov	r3, r2
   2e07c:	lsl	r3, r3, #1
   2e080:	add	r3, r3, r2
   2e084:	lsr	r2, r3, #2
   2e088:	ldr	r3, [fp, #-16]
   2e08c:	ldr	r3, [r3, #24]
   2e090:	lsr	r3, r3, #2
   2e094:	add	r2, r2, r3
   2e098:	ldr	r3, [fp, #-16]
   2e09c:	str	r2, [r3, #32]
   2e0a0:	ldr	r3, [fp, #-16]
   2e0a4:	mov	r2, #0
   2e0a8:	str	r2, [r3, #24]
   2e0ac:	b	2e104 <flatcc_emitter_reset@@Base+0x144>
   2e0b0:	ldr	r3, [fp, #-16]
   2e0b4:	ldr	r3, [r3, #4]
   2e0b8:	ldr	r3, [r3, #2944]	; 0xb80
   2e0bc:	str	r3, [fp, #-8]
   2e0c0:	ldr	r3, [fp, #-16]
   2e0c4:	ldr	r3, [r3, #4]
   2e0c8:	ldr	r2, [fp, #-8]
   2e0cc:	ldr	r2, [r2, #2944]	; 0xb80
   2e0d0:	str	r2, [r3, #2944]	; 0xb80
   2e0d4:	ldr	r3, [fp, #-8]
   2e0d8:	ldr	r3, [r3, #2944]	; 0xb80
   2e0dc:	ldr	r2, [fp, #-16]
   2e0e0:	ldr	r2, [r2, #4]
   2e0e4:	str	r2, [r3, #2948]	; 0xb84
   2e0e8:	ldr	r0, [fp, #-8]
   2e0ec:	bl	12924 <free@plt>
   2e0f0:	ldr	r3, [fp, #-16]
   2e0f4:	ldr	r3, [r3, #28]
   2e0f8:	sub	r2, r3, #2944	; 0xb80
   2e0fc:	ldr	r3, [fp, #-16]
   2e100:	str	r2, [r3, #28]
   2e104:	ldr	r3, [fp, #-16]
   2e108:	ldr	r3, [r3, #32]
   2e10c:	lsl	r2, r3, #1
   2e110:	ldr	r3, [fp, #-16]
   2e114:	ldr	r3, [r3, #28]
   2e118:	cmp	r2, r3
   2e11c:	bcs	2e144 <flatcc_emitter_reset@@Base+0x184>
   2e120:	ldr	r3, [fp, #-16]
   2e124:	ldr	r3, [r3, #4]
   2e128:	ldr	r2, [r3, #2944]	; 0xb80
   2e12c:	ldr	r3, [fp, #-16]
   2e130:	ldr	r3, [r3]
   2e134:	cmp	r2, r3
   2e138:	bne	2e0b0 <flatcc_emitter_reset@@Base+0xf0>
   2e13c:	b	2e144 <flatcc_emitter_reset@@Base+0x184>
   2e140:	nop			; (mov r0, r0)
   2e144:	sub	sp, fp, #4
   2e148:	pop	{fp, pc}

0002e14c <flatcc_emitter_clear@@Base>:
   2e14c:	push	{fp, lr}
   2e150:	add	fp, sp, #4
   2e154:	sub	sp, sp, #16
   2e158:	str	r0, [fp, #-16]
   2e15c:	ldr	r3, [fp, #-16]
   2e160:	ldr	r3, [r3]
   2e164:	str	r3, [fp, #-8]
   2e168:	ldr	r3, [fp, #-8]
   2e16c:	cmp	r3, #0
   2e170:	beq	2e1d0 <flatcc_emitter_clear@@Base+0x84>
   2e174:	ldr	r3, [fp, #-8]
   2e178:	ldr	r3, [r3, #2948]	; 0xb84
   2e17c:	mov	r2, #0
   2e180:	str	r2, [r3, #2944]	; 0xb80
   2e184:	b	2e1a4 <flatcc_emitter_clear@@Base+0x58>
   2e188:	ldr	r3, [fp, #-8]
   2e18c:	ldr	r3, [r3, #2944]	; 0xb80
   2e190:	str	r3, [fp, #-8]
   2e194:	ldr	r3, [fp, #-8]
   2e198:	ldr	r3, [r3, #2948]	; 0xb84
   2e19c:	mov	r0, r3
   2e1a0:	bl	12924 <free@plt>
   2e1a4:	ldr	r3, [fp, #-8]
   2e1a8:	ldr	r3, [r3, #2944]	; 0xb80
   2e1ac:	cmp	r3, #0
   2e1b0:	bne	2e188 <flatcc_emitter_clear@@Base+0x3c>
   2e1b4:	ldr	r0, [fp, #-8]
   2e1b8:	bl	12924 <free@plt>
   2e1bc:	mov	r2, #36	; 0x24
   2e1c0:	mov	r1, #0
   2e1c4:	ldr	r0, [fp, #-16]
   2e1c8:	bl	129c0 <memset@plt>
   2e1cc:	b	2e1d4 <flatcc_emitter_clear@@Base+0x88>
   2e1d0:	nop			; (mov r0, r0)
   2e1d4:	sub	sp, fp, #4
   2e1d8:	pop	{fp, pc}

0002e1dc <flatcc_emitter@@Base>:
   2e1dc:	push	{fp, lr}
   2e1e0:	add	fp, sp, #4
   2e1e4:	sub	sp, sp, #24
   2e1e8:	str	r0, [fp, #-16]
   2e1ec:	str	r1, [fp, #-20]	; 0xffffffec
   2e1f0:	str	r2, [fp, #-24]	; 0xffffffe8
   2e1f4:	str	r3, [fp, #-28]	; 0xffffffe4
   2e1f8:	ldr	r3, [fp, #-16]
   2e1fc:	str	r3, [fp, #-12]
   2e200:	ldr	r3, [fp, #-12]
   2e204:	ldr	r2, [r3, #24]
   2e208:	ldr	r3, [fp, #4]
   2e20c:	add	r2, r2, r3
   2e210:	ldr	r3, [fp, #-12]
   2e214:	str	r2, [r3, #24]
   2e218:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2e21c:	cmp	r3, #0
   2e220:	bge	2e2e8 <flatcc_emitter@@Base+0x10c>
   2e224:	ldr	r3, [fp, #-12]
   2e228:	ldr	r2, [r3, #12]
   2e22c:	ldr	r3, [fp, #4]
   2e230:	cmp	r2, r3
   2e234:	bcc	2e27c <flatcc_emitter@@Base+0xa0>
   2e238:	ldr	r3, [fp, #-12]
   2e23c:	ldr	r2, [r3, #8]
   2e240:	ldr	r3, [fp, #4]
   2e244:	rsb	r3, r3, #0
   2e248:	add	r2, r2, r3
   2e24c:	ldr	r3, [fp, #-12]
   2e250:	str	r2, [r3, #8]
   2e254:	ldr	r3, [fp, #-12]
   2e258:	ldr	r2, [r3, #12]
   2e25c:	ldr	r3, [fp, #4]
   2e260:	sub	r2, r2, r3
   2e264:	ldr	r3, [fp, #-12]
   2e268:	str	r2, [r3, #12]
   2e26c:	ldr	r3, [fp, #-12]
   2e270:	ldr	r3, [r3, #8]
   2e274:	str	r3, [fp, #-8]
   2e278:	b	2e394 <flatcc_emitter@@Base+0x1b8>
   2e27c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e280:	lsl	r3, r3, #3
   2e284:	ldr	r2, [fp, #-20]	; 0xffffffec
   2e288:	add	r3, r2, r3
   2e28c:	str	r3, [fp, #-20]	; 0xffffffec
   2e290:	b	2e2d0 <flatcc_emitter@@Base+0xf4>
   2e294:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e298:	sub	r3, r3, #8
   2e29c:	str	r3, [fp, #-20]	; 0xffffffec
   2e2a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e2a4:	ldr	r1, [r3]
   2e2a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e2ac:	ldr	r3, [r3, #4]
   2e2b0:	mov	r2, r3
   2e2b4:	ldr	r0, [fp, #-12]
   2e2b8:	bl	2dd04 <flatcc_builder_get_emit_context@@Base+0x3f8>
   2e2bc:	mov	r3, r0
   2e2c0:	cmp	r3, #0
   2e2c4:	beq	2e2d0 <flatcc_emitter@@Base+0xf4>
   2e2c8:	mvn	r3, #0
   2e2cc:	b	2e3ec <flatcc_emitter@@Base+0x210>
   2e2d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e2d4:	sub	r2, r3, #1
   2e2d8:	str	r2, [fp, #-24]	; 0xffffffe8
   2e2dc:	cmp	r3, #0
   2e2e0:	bne	2e294 <flatcc_emitter@@Base+0xb8>
   2e2e4:	b	2e38c <flatcc_emitter@@Base+0x1b0>
   2e2e8:	ldr	r3, [fp, #-12]
   2e2ec:	ldr	r2, [r3, #20]
   2e2f0:	ldr	r3, [fp, #4]
   2e2f4:	cmp	r2, r3
   2e2f8:	bcc	2e378 <flatcc_emitter@@Base+0x19c>
   2e2fc:	ldr	r3, [fp, #-12]
   2e300:	ldr	r3, [r3, #16]
   2e304:	str	r3, [fp, #-8]
   2e308:	ldr	r3, [fp, #-12]
   2e30c:	ldr	r2, [r3, #16]
   2e310:	ldr	r3, [fp, #4]
   2e314:	add	r2, r2, r3
   2e318:	ldr	r3, [fp, #-12]
   2e31c:	str	r2, [r3, #16]
   2e320:	ldr	r3, [fp, #-12]
   2e324:	ldr	r2, [r3, #20]
   2e328:	ldr	r3, [fp, #4]
   2e32c:	sub	r2, r2, r3
   2e330:	ldr	r3, [fp, #-12]
   2e334:	str	r2, [r3, #20]
   2e338:	b	2e394 <flatcc_emitter@@Base+0x1b8>
   2e33c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e340:	ldr	r1, [r3]
   2e344:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e348:	ldr	r3, [r3, #4]
   2e34c:	mov	r2, r3
   2e350:	ldr	r0, [fp, #-12]
   2e354:	bl	2de0c <flatcc_builder_get_emit_context@@Base+0x500>
   2e358:	mov	r3, r0
   2e35c:	cmp	r3, #0
   2e360:	beq	2e36c <flatcc_emitter@@Base+0x190>
   2e364:	mvn	r3, #0
   2e368:	b	2e3ec <flatcc_emitter@@Base+0x210>
   2e36c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e370:	add	r3, r3, #8
   2e374:	str	r3, [fp, #-20]	; 0xffffffec
   2e378:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e37c:	sub	r2, r3, #1
   2e380:	str	r2, [fp, #-24]	; 0xffffffe8
   2e384:	cmp	r3, #0
   2e388:	bne	2e33c <flatcc_emitter@@Base+0x160>
   2e38c:	mov	r3, #0
   2e390:	b	2e3ec <flatcc_emitter@@Base+0x210>
   2e394:	b	2e3d4 <flatcc_emitter@@Base+0x1f8>
   2e398:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e39c:	ldr	r1, [r3]
   2e3a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e3a4:	ldr	r3, [r3, #4]
   2e3a8:	mov	r2, r3
   2e3ac:	ldr	r0, [fp, #-8]
   2e3b0:	bl	12930 <memcpy@plt>
   2e3b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e3b8:	ldr	r3, [r3, #4]
   2e3bc:	ldr	r2, [fp, #-8]
   2e3c0:	add	r3, r2, r3
   2e3c4:	str	r3, [fp, #-8]
   2e3c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e3cc:	add	r3, r3, #8
   2e3d0:	str	r3, [fp, #-20]	; 0xffffffec
   2e3d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e3d8:	sub	r2, r3, #1
   2e3dc:	str	r2, [fp, #-24]	; 0xffffffe8
   2e3e0:	cmp	r3, #0
   2e3e4:	bne	2e398 <flatcc_emitter@@Base+0x1bc>
   2e3e8:	mov	r3, #0
   2e3ec:	mov	r0, r3
   2e3f0:	sub	sp, fp, #4
   2e3f4:	pop	{fp, pc}

0002e3f8 <flatcc_emitter_copy_buffer@@Base>:
   2e3f8:	push	{fp, lr}
   2e3fc:	add	fp, sp, #4
   2e400:	sub	sp, sp, #24
   2e404:	str	r0, [fp, #-16]
   2e408:	str	r1, [fp, #-20]	; 0xffffffec
   2e40c:	str	r2, [fp, #-24]	; 0xffffffe8
   2e410:	ldr	r3, [fp, #-16]
   2e414:	ldr	r2, [r3, #24]
   2e418:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e41c:	cmp	r2, r3
   2e420:	bls	2e42c <flatcc_emitter_copy_buffer@@Base+0x34>
   2e424:	mov	r3, #0
   2e428:	b	2e52c <flatcc_emitter_copy_buffer@@Base+0x134>
   2e42c:	ldr	r3, [fp, #-16]
   2e430:	ldr	r3, [r3]
   2e434:	cmp	r3, #0
   2e438:	bne	2e444 <flatcc_emitter_copy_buffer@@Base+0x4c>
   2e43c:	mov	r3, #0
   2e440:	b	2e52c <flatcc_emitter_copy_buffer@@Base+0x134>
   2e444:	ldr	r3, [fp, #-16]
   2e448:	ldr	r2, [r3]
   2e44c:	ldr	r3, [fp, #-16]
   2e450:	ldr	r3, [r3, #4]
   2e454:	cmp	r2, r3
   2e458:	bne	2e480 <flatcc_emitter_copy_buffer@@Base+0x88>
   2e45c:	ldr	r3, [fp, #-16]
   2e460:	ldr	r1, [r3, #8]
   2e464:	ldr	r3, [fp, #-16]
   2e468:	ldr	r3, [r3, #24]
   2e46c:	mov	r2, r3
   2e470:	ldr	r0, [fp, #-20]	; 0xffffffec
   2e474:	bl	12930 <memcpy@plt>
   2e478:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e47c:	b	2e52c <flatcc_emitter_copy_buffer@@Base+0x134>
   2e480:	ldr	r3, [fp, #-16]
   2e484:	ldr	r3, [r3, #12]
   2e488:	rsb	r3, r3, #2944	; 0xb80
   2e48c:	str	r3, [fp, #-12]
   2e490:	ldr	r3, [fp, #-16]
   2e494:	ldr	r3, [r3, #8]
   2e498:	ldr	r2, [fp, #-12]
   2e49c:	mov	r1, r3
   2e4a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   2e4a4:	bl	12930 <memcpy@plt>
   2e4a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   2e4ac:	ldr	r3, [fp, #-12]
   2e4b0:	add	r3, r2, r3
   2e4b4:	str	r3, [fp, #-20]	; 0xffffffec
   2e4b8:	ldr	r3, [fp, #-16]
   2e4bc:	ldr	r3, [r3]
   2e4c0:	ldr	r3, [r3, #2944]	; 0xb80
   2e4c4:	str	r3, [fp, #-8]
   2e4c8:	b	2e4f8 <flatcc_emitter_copy_buffer@@Base+0x100>
   2e4cc:	ldr	r3, [fp, #-8]
   2e4d0:	mov	r2, #2944	; 0xb80
   2e4d4:	mov	r1, r3
   2e4d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   2e4dc:	bl	12930 <memcpy@plt>
   2e4e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e4e4:	add	r3, r3, #2944	; 0xb80
   2e4e8:	str	r3, [fp, #-20]	; 0xffffffec
   2e4ec:	ldr	r3, [fp, #-8]
   2e4f0:	ldr	r3, [r3, #2944]	; 0xb80
   2e4f4:	str	r3, [fp, #-8]
   2e4f8:	ldr	r3, [fp, #-16]
   2e4fc:	ldr	r2, [r3, #4]
   2e500:	ldr	r3, [fp, #-8]
   2e504:	cmp	r2, r3
   2e508:	bne	2e4cc <flatcc_emitter_copy_buffer@@Base+0xd4>
   2e50c:	ldr	r1, [fp, #-8]
   2e510:	ldr	r3, [fp, #-16]
   2e514:	ldr	r3, [r3, #20]
   2e518:	rsb	r3, r3, #2944	; 0xb80
   2e51c:	mov	r2, r3
   2e520:	ldr	r0, [fp, #-20]	; 0xffffffec
   2e524:	bl	12930 <memcpy@plt>
   2e528:	ldr	r3, [fp, #-20]	; 0xffffffec
   2e52c:	mov	r0, r3
   2e530:	sub	sp, fp, #4
   2e534:	pop	{fp, pc}
   2e538:	push	{fp}		; (str fp, [sp, #-4]!)
   2e53c:	add	fp, sp, #0
   2e540:	sub	sp, sp, #12
   2e544:	str	r0, [fp, #-8]
   2e548:	ldr	r3, [fp, #-8]
   2e54c:	mov	r0, r3
   2e550:	add	sp, fp, #0
   2e554:	pop	{fp}		; (ldr fp, [sp], #4)
   2e558:	bx	lr
   2e55c:	push	{fp, lr}
   2e560:	add	fp, sp, #4
   2e564:	sub	sp, sp, #8
   2e568:	str	r0, [fp, #-8]
   2e56c:	ldr	r3, [fp, #-8]
   2e570:	ldr	r3, [r3]
   2e574:	mov	r0, r3
   2e578:	bl	2e538 <flatcc_emitter_copy_buffer@@Base+0x140>
   2e57c:	mov	r3, r0
   2e580:	mov	r0, r3
   2e584:	sub	sp, fp, #4
   2e588:	pop	{fp, pc}
   2e58c:	push	{fp}		; (str fp, [sp, #-4]!)
   2e590:	add	fp, sp, #0
   2e594:	sub	sp, sp, #12
   2e598:	mov	r3, r0
   2e59c:	strh	r3, [fp, #-6]
   2e5a0:	ldrh	r3, [fp, #-6]
   2e5a4:	mov	r0, r3
   2e5a8:	add	sp, fp, #0
   2e5ac:	pop	{fp}		; (ldr fp, [sp], #4)
   2e5b0:	bx	lr
   2e5b4:	push	{fp, lr}
   2e5b8:	add	fp, sp, #4
   2e5bc:	sub	sp, sp, #8
   2e5c0:	str	r0, [fp, #-8]
   2e5c4:	ldr	r3, [fp, #-8]
   2e5c8:	ldrh	r3, [r3]
   2e5cc:	mov	r0, r3
   2e5d0:	bl	2e58c <flatcc_emitter_copy_buffer@@Base+0x194>
   2e5d4:	mov	r3, r0
   2e5d8:	mov	r0, r3
   2e5dc:	sub	sp, fp, #4
   2e5e0:	pop	{fp, pc}
   2e5e4:	push	{fp}		; (str fp, [sp, #-4]!)
   2e5e8:	add	fp, sp, #0
   2e5ec:	sub	sp, sp, #12
   2e5f0:	str	r0, [fp, #-8]
   2e5f4:	ldr	r3, [fp, #-8]
   2e5f8:	mov	r0, r3
   2e5fc:	add	sp, fp, #0
   2e600:	pop	{fp}		; (ldr fp, [sp], #4)
   2e604:	bx	lr
   2e608:	push	{fp}		; (str fp, [sp, #-4]!)
   2e60c:	add	fp, sp, #0
   2e610:	sub	sp, sp, #12
   2e614:	str	r0, [fp, #-8]
   2e618:	ldr	r3, [fp, #-8]
   2e61c:	mov	r0, r3
   2e620:	add	sp, fp, #0
   2e624:	pop	{fp}		; (ldr fp, [sp], #4)
   2e628:	bx	lr
   2e62c:	push	{fp, lr}
   2e630:	add	fp, sp, #4
   2e634:	sub	sp, sp, #8
   2e638:	str	r0, [fp, #-8]
   2e63c:	ldr	r3, [fp, #-8]
   2e640:	ldr	r3, [r3]
   2e644:	mov	r0, r3
   2e648:	bl	2e5e4 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   2e64c:	mov	r3, r0
   2e650:	mov	r0, r3
   2e654:	sub	sp, fp, #4
   2e658:	pop	{fp, pc}

0002e65c <flatcc_verify_error_string@@Base>:
   2e65c:	push	{fp}		; (str fp, [sp, #-4]!)
   2e660:	add	fp, sp, #0
   2e664:	sub	sp, sp, #12
   2e668:	str	r0, [fp, #-8]
   2e66c:	ldr	r3, [fp, #-8]
   2e670:	cmp	r3, #36	; 0x24
   2e674:	addls	pc, pc, r3, lsl #2
   2e678:	b	2e8cc <flatcc_verify_error_string@@Base+0x270>
   2e67c:	b	2e710 <flatcc_verify_error_string@@Base+0xb4>
   2e680:	b	2e71c <flatcc_verify_error_string@@Base+0xc0>
   2e684:	b	2e728 <flatcc_verify_error_string@@Base+0xcc>
   2e688:	b	2e734 <flatcc_verify_error_string@@Base+0xd8>
   2e68c:	b	2e740 <flatcc_verify_error_string@@Base+0xe4>
   2e690:	b	2e74c <flatcc_verify_error_string@@Base+0xf0>
   2e694:	b	2e758 <flatcc_verify_error_string@@Base+0xfc>
   2e698:	b	2e764 <flatcc_verify_error_string@@Base+0x108>
   2e69c:	b	2e770 <flatcc_verify_error_string@@Base+0x114>
   2e6a0:	b	2e77c <flatcc_verify_error_string@@Base+0x120>
   2e6a4:	b	2e788 <flatcc_verify_error_string@@Base+0x12c>
   2e6a8:	b	2e794 <flatcc_verify_error_string@@Base+0x138>
   2e6ac:	b	2e7a0 <flatcc_verify_error_string@@Base+0x144>
   2e6b0:	b	2e7ac <flatcc_verify_error_string@@Base+0x150>
   2e6b4:	b	2e7b8 <flatcc_verify_error_string@@Base+0x15c>
   2e6b8:	b	2e7c4 <flatcc_verify_error_string@@Base+0x168>
   2e6bc:	b	2e7d0 <flatcc_verify_error_string@@Base+0x174>
   2e6c0:	b	2e7dc <flatcc_verify_error_string@@Base+0x180>
   2e6c4:	b	2e7e8 <flatcc_verify_error_string@@Base+0x18c>
   2e6c8:	b	2e7f4 <flatcc_verify_error_string@@Base+0x198>
   2e6cc:	b	2e800 <flatcc_verify_error_string@@Base+0x1a4>
   2e6d0:	b	2e80c <flatcc_verify_error_string@@Base+0x1b0>
   2e6d4:	b	2e818 <flatcc_verify_error_string@@Base+0x1bc>
   2e6d8:	b	2e824 <flatcc_verify_error_string@@Base+0x1c8>
   2e6dc:	b	2e830 <flatcc_verify_error_string@@Base+0x1d4>
   2e6e0:	b	2e83c <flatcc_verify_error_string@@Base+0x1e0>
   2e6e4:	b	2e848 <flatcc_verify_error_string@@Base+0x1ec>
   2e6e8:	b	2e854 <flatcc_verify_error_string@@Base+0x1f8>
   2e6ec:	b	2e860 <flatcc_verify_error_string@@Base+0x204>
   2e6f0:	b	2e86c <flatcc_verify_error_string@@Base+0x210>
   2e6f4:	b	2e878 <flatcc_verify_error_string@@Base+0x21c>
   2e6f8:	b	2e884 <flatcc_verify_error_string@@Base+0x228>
   2e6fc:	b	2e890 <flatcc_verify_error_string@@Base+0x234>
   2e700:	b	2e89c <flatcc_verify_error_string@@Base+0x240>
   2e704:	b	2e8a8 <flatcc_verify_error_string@@Base+0x24c>
   2e708:	b	2e8b4 <flatcc_verify_error_string@@Base+0x258>
   2e70c:	b	2e8c0 <flatcc_verify_error_string@@Base+0x264>
   2e710:	ldr	r3, [pc, #460]	; 2e8e4 <flatcc_verify_error_string@@Base+0x288>
   2e714:	add	r3, pc, r3
   2e718:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e71c:	ldr	r3, [pc, #452]	; 2e8e8 <flatcc_verify_error_string@@Base+0x28c>
   2e720:	add	r3, pc, r3
   2e724:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e728:	ldr	r3, [pc, #444]	; 2e8ec <flatcc_verify_error_string@@Base+0x290>
   2e72c:	add	r3, pc, r3
   2e730:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e734:	ldr	r3, [pc, #436]	; 2e8f0 <flatcc_verify_error_string@@Base+0x294>
   2e738:	add	r3, pc, r3
   2e73c:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e740:	ldr	r3, [pc, #428]	; 2e8f4 <flatcc_verify_error_string@@Base+0x298>
   2e744:	add	r3, pc, r3
   2e748:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e74c:	ldr	r3, [pc, #420]	; 2e8f8 <flatcc_verify_error_string@@Base+0x29c>
   2e750:	add	r3, pc, r3
   2e754:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e758:	ldr	r3, [pc, #412]	; 2e8fc <flatcc_verify_error_string@@Base+0x2a0>
   2e75c:	add	r3, pc, r3
   2e760:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e764:	ldr	r3, [pc, #404]	; 2e900 <flatcc_verify_error_string@@Base+0x2a4>
   2e768:	add	r3, pc, r3
   2e76c:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e770:	ldr	r3, [pc, #396]	; 2e904 <flatcc_verify_error_string@@Base+0x2a8>
   2e774:	add	r3, pc, r3
   2e778:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e77c:	ldr	r3, [pc, #388]	; 2e908 <flatcc_verify_error_string@@Base+0x2ac>
   2e780:	add	r3, pc, r3
   2e784:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e788:	ldr	r3, [pc, #380]	; 2e90c <flatcc_verify_error_string@@Base+0x2b0>
   2e78c:	add	r3, pc, r3
   2e790:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e794:	ldr	r3, [pc, #372]	; 2e910 <flatcc_verify_error_string@@Base+0x2b4>
   2e798:	add	r3, pc, r3
   2e79c:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7a0:	ldr	r3, [pc, #364]	; 2e914 <flatcc_verify_error_string@@Base+0x2b8>
   2e7a4:	add	r3, pc, r3
   2e7a8:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7ac:	ldr	r3, [pc, #356]	; 2e918 <flatcc_verify_error_string@@Base+0x2bc>
   2e7b0:	add	r3, pc, r3
   2e7b4:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7b8:	ldr	r3, [pc, #348]	; 2e91c <flatcc_verify_error_string@@Base+0x2c0>
   2e7bc:	add	r3, pc, r3
   2e7c0:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7c4:	ldr	r3, [pc, #340]	; 2e920 <flatcc_verify_error_string@@Base+0x2c4>
   2e7c8:	add	r3, pc, r3
   2e7cc:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7d0:	ldr	r3, [pc, #332]	; 2e924 <flatcc_verify_error_string@@Base+0x2c8>
   2e7d4:	add	r3, pc, r3
   2e7d8:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7dc:	ldr	r3, [pc, #324]	; 2e928 <flatcc_verify_error_string@@Base+0x2cc>
   2e7e0:	add	r3, pc, r3
   2e7e4:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7e8:	ldr	r3, [pc, #316]	; 2e92c <flatcc_verify_error_string@@Base+0x2d0>
   2e7ec:	add	r3, pc, r3
   2e7f0:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e7f4:	ldr	r3, [pc, #308]	; 2e930 <flatcc_verify_error_string@@Base+0x2d4>
   2e7f8:	add	r3, pc, r3
   2e7fc:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e800:	ldr	r3, [pc, #300]	; 2e934 <flatcc_verify_error_string@@Base+0x2d8>
   2e804:	add	r3, pc, r3
   2e808:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e80c:	ldr	r3, [pc, #292]	; 2e938 <flatcc_verify_error_string@@Base+0x2dc>
   2e810:	add	r3, pc, r3
   2e814:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e818:	ldr	r3, [pc, #284]	; 2e93c <flatcc_verify_error_string@@Base+0x2e0>
   2e81c:	add	r3, pc, r3
   2e820:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e824:	ldr	r3, [pc, #276]	; 2e940 <flatcc_verify_error_string@@Base+0x2e4>
   2e828:	add	r3, pc, r3
   2e82c:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e830:	ldr	r3, [pc, #268]	; 2e944 <flatcc_verify_error_string@@Base+0x2e8>
   2e834:	add	r3, pc, r3
   2e838:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e83c:	ldr	r3, [pc, #260]	; 2e948 <flatcc_verify_error_string@@Base+0x2ec>
   2e840:	add	r3, pc, r3
   2e844:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e848:	ldr	r3, [pc, #252]	; 2e94c <flatcc_verify_error_string@@Base+0x2f0>
   2e84c:	add	r3, pc, r3
   2e850:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e854:	ldr	r3, [pc, #244]	; 2e950 <flatcc_verify_error_string@@Base+0x2f4>
   2e858:	add	r3, pc, r3
   2e85c:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e860:	ldr	r3, [pc, #236]	; 2e954 <flatcc_verify_error_string@@Base+0x2f8>
   2e864:	add	r3, pc, r3
   2e868:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e86c:	ldr	r3, [pc, #228]	; 2e958 <flatcc_verify_error_string@@Base+0x2fc>
   2e870:	add	r3, pc, r3
   2e874:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e878:	ldr	r3, [pc, #220]	; 2e95c <flatcc_verify_error_string@@Base+0x300>
   2e87c:	add	r3, pc, r3
   2e880:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e884:	ldr	r3, [pc, #212]	; 2e960 <flatcc_verify_error_string@@Base+0x304>
   2e888:	add	r3, pc, r3
   2e88c:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e890:	ldr	r3, [pc, #204]	; 2e964 <flatcc_verify_error_string@@Base+0x308>
   2e894:	add	r3, pc, r3
   2e898:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e89c:	ldr	r3, [pc, #196]	; 2e968 <flatcc_verify_error_string@@Base+0x30c>
   2e8a0:	add	r3, pc, r3
   2e8a4:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e8a8:	ldr	r3, [pc, #188]	; 2e96c <flatcc_verify_error_string@@Base+0x310>
   2e8ac:	add	r3, pc, r3
   2e8b0:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e8b4:	ldr	r3, [pc, #180]	; 2e970 <flatcc_verify_error_string@@Base+0x314>
   2e8b8:	add	r3, pc, r3
   2e8bc:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e8c0:	ldr	r3, [pc, #172]	; 2e974 <flatcc_verify_error_string@@Base+0x318>
   2e8c4:	add	r3, pc, r3
   2e8c8:	b	2e8d4 <flatcc_verify_error_string@@Base+0x278>
   2e8cc:	ldr	r3, [pc, #164]	; 2e978 <flatcc_verify_error_string@@Base+0x31c>
   2e8d0:	add	r3, pc, r3
   2e8d4:	mov	r0, r3
   2e8d8:	add	sp, fp, #0
   2e8dc:	pop	{fp}		; (ldr fp, [sp], #4)
   2e8e0:	bx	lr
   2e8e4:	muleq	r0, ip, ip
   2e8e8:	muleq	r0, r4, ip
   2e8ec:	andeq	r6, r0, r0, lsr #25
   2e8f0:	andeq	r6, r0, r8, lsr #25
   2e8f4:			; <UNDEFINED> instruction: 0x00006cb8
   2e8f8:	andeq	r6, r0, r4, asr #25
   2e8fc:	ldrdeq	r6, [r0], -ip
   2e900:	strdeq	r6, [r0], -r0
   2e904:	andeq	r6, r0, r0, lsl #26
   2e908:	andeq	r6, r0, r8, lsl #26
   2e90c:	andeq	r6, r0, r0, lsl sp
   2e910:	andeq	r6, r0, ip, lsl sp
   2e914:	andeq	r6, r0, r4, lsr #26
   2e918:	andeq	r6, r0, r0, lsr sp
   2e91c:	andeq	r6, r0, r0, asr #26
   2e920:	andeq	r6, r0, r0, asr sp
   2e924:	andeq	r6, r0, ip, ror #26
   2e928:	andeq	r6, r0, r8, lsl #27
   2e92c:	andeq	r6, r0, r4, lsr #27
   2e930:	andeq	r6, r0, ip, lsr #27
   2e934:	andeq	r6, r0, r8, asr #27
   2e938:	ldrdeq	r6, [r0], -r4
   2e93c:	strdeq	r6, [r0], -r4
   2e940:	andeq	r6, r0, ip, lsl lr
   2e944:	andeq	r6, r0, ip, lsr lr
   2e948:	andeq	r6, r0, ip, asr lr
   2e94c:	andeq	r6, r0, r0, lsl #29
   2e950:	andeq	r6, r0, r8, lsl #29
   2e954:	muleq	r0, r8, lr
   2e958:	andeq	r6, r0, r4, lsr #29
   2e95c:	andeq	r6, r0, r0, asr #29
   2e960:	ldrdeq	r6, [r0], -ip
   2e964:	andeq	r6, r0, r8, ror #29
   2e968:	andeq	r6, r0, r4, lsl #30
   2e96c:	andeq	r6, r0, r0, lsr #30
   2e970:	andeq	r6, r0, r8, asr #30
   2e974:	andeq	r6, r0, r4, ror #30
   2e978:	andeq	r6, r0, r8, ror #30
   2e97c:	push	{fp, lr}
   2e980:	add	fp, sp, #4
   2e984:	sub	sp, sp, #8
   2e988:	str	r0, [fp, #-8]
   2e98c:	str	r1, [fp, #-12]
   2e990:	ldr	r2, [fp, #-8]
   2e994:	ldr	r3, [fp, #-12]
   2e998:	add	r3, r2, r3
   2e99c:	mov	r0, r3
   2e9a0:	bl	2e55c <flatcc_emitter_copy_buffer@@Base+0x164>
   2e9a4:	mov	r3, r0
   2e9a8:	mov	r0, r3
   2e9ac:	sub	sp, fp, #4
   2e9b0:	pop	{fp, pc}
   2e9b4:	push	{fp, lr}
   2e9b8:	add	fp, sp, #4
   2e9bc:	sub	sp, sp, #16
   2e9c0:	str	r0, [fp, #-16]
   2e9c4:	mov	r3, #0
   2e9c8:	str	r3, [fp, #-8]
   2e9cc:	sub	r3, fp, #8
   2e9d0:	mov	r2, #4
   2e9d4:	ldr	r1, [fp, #-16]
   2e9d8:	mov	r0, r3
   2e9dc:	bl	129cc <strncpy@plt>
   2e9e0:	ldr	r3, [fp, #-8]
   2e9e4:	mov	r0, r3
   2e9e8:	bl	2e608 <flatcc_emitter_copy_buffer@@Base+0x210>
   2e9ec:	mov	r3, r0
   2e9f0:	mov	r0, r3
   2e9f4:	sub	sp, fp, #4
   2e9f8:	pop	{fp, pc}
   2e9fc:	push	{fp, lr}
   2ea00:	add	fp, sp, #4
   2ea04:	sub	sp, sp, #8
   2ea08:	str	r0, [fp, #-8]
   2ea0c:	str	r1, [fp, #-12]
   2ea10:	ldr	r2, [fp, #-8]
   2ea14:	ldr	r3, [fp, #-12]
   2ea18:	add	r3, r2, r3
   2ea1c:	mov	r0, r3
   2ea20:	bl	2e62c <flatcc_emitter_copy_buffer@@Base+0x234>
   2ea24:	mov	r3, r0
   2ea28:	mov	r0, r3
   2ea2c:	sub	sp, fp, #4
   2ea30:	pop	{fp, pc}
   2ea34:	push	{fp, lr}
   2ea38:	add	fp, sp, #4
   2ea3c:	sub	sp, sp, #8
   2ea40:	str	r0, [fp, #-8]
   2ea44:	str	r1, [fp, #-12]
   2ea48:	ldr	r2, [fp, #-8]
   2ea4c:	ldr	r3, [fp, #-12]
   2ea50:	add	r3, r2, r3
   2ea54:	mov	r0, r3
   2ea58:	bl	2e5b4 <flatcc_emitter_copy_buffer@@Base+0x1bc>
   2ea5c:	mov	r3, r0
   2ea60:	mov	r0, r3
   2ea64:	sub	sp, fp, #4
   2ea68:	pop	{fp, pc}
   2ea6c:	push	{fp}		; (str fp, [sp, #-4]!)
   2ea70:	add	fp, sp, #0
   2ea74:	sub	sp, sp, #28
   2ea78:	str	r0, [fp, #-16]
   2ea7c:	str	r1, [fp, #-20]	; 0xffffffec
   2ea80:	str	r2, [fp, #-24]	; 0xffffffe8
   2ea84:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ea88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ea8c:	add	r3, r2, r3
   2ea90:	str	r3, [fp, #-8]
   2ea94:	ldr	r2, [fp, #-8]
   2ea98:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ea9c:	cmp	r2, r3
   2eaa0:	bls	2ead0 <flatcc_verify_error_string@@Base+0x474>
   2eaa4:	ldr	r3, [fp, #-8]
   2eaa8:	add	r2, r3, #4
   2eaac:	ldr	r3, [fp, #-16]
   2eab0:	cmp	r2, r3
   2eab4:	bhi	2ead0 <flatcc_verify_error_string@@Base+0x474>
   2eab8:	ldr	r3, [fp, #-8]
   2eabc:	and	r3, r3, #3
   2eac0:	cmp	r3, #0
   2eac4:	bne	2ead0 <flatcc_verify_error_string@@Base+0x474>
   2eac8:	mov	r3, #1
   2eacc:	b	2ead4 <flatcc_verify_error_string@@Base+0x478>
   2ead0:	mov	r3, #0
   2ead4:	mov	r0, r3
   2ead8:	add	sp, fp, #0
   2eadc:	pop	{fp}		; (ldr fp, [sp], #4)
   2eae0:	bx	lr
   2eae4:	push	{fp}		; (str fp, [sp, #-4]!)
   2eae8:	add	fp, sp, #0
   2eaec:	sub	sp, sp, #28
   2eaf0:	str	r0, [fp, #-16]
   2eaf4:	str	r1, [fp, #-20]	; 0xffffffec
   2eaf8:	str	r2, [fp, #-24]	; 0xffffffe8
   2eafc:	strh	r3, [fp, #-26]	; 0xffffffe6
   2eb00:	ldr	r2, [fp, #-20]	; 0xffffffec
   2eb04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2eb08:	add	r3, r2, r3
   2eb0c:	str	r3, [fp, #-8]
   2eb10:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   2eb14:	cmp	r3, #4
   2eb18:	movcs	r3, r3
   2eb1c:	movcc	r3, #4
   2eb20:	strh	r3, [fp, #-26]	; 0xffffffe6
   2eb24:	ldr	r2, [fp, #-8]
   2eb28:	ldr	r3, [fp, #-20]	; 0xffffffec
   2eb2c:	cmp	r2, r3
   2eb30:	bls	2eb70 <flatcc_verify_error_string@@Base+0x514>
   2eb34:	ldr	r3, [fp, #-8]
   2eb38:	add	r2, r3, #4
   2eb3c:	ldr	r3, [fp, #-16]
   2eb40:	cmp	r2, r3
   2eb44:	bhi	2eb70 <flatcc_verify_error_string@@Base+0x514>
   2eb48:	ldr	r3, [fp, #-8]
   2eb4c:	add	r2, r3, #4
   2eb50:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   2eb54:	sub	r3, r3, #1
   2eb58:	orr	r3, r3, #3
   2eb5c:	and	r3, r3, r2
   2eb60:	cmp	r3, #0
   2eb64:	bne	2eb70 <flatcc_verify_error_string@@Base+0x514>
   2eb68:	mov	r3, #1
   2eb6c:	b	2eb74 <flatcc_verify_error_string@@Base+0x518>
   2eb70:	mov	r3, #0
   2eb74:	mov	r0, r3
   2eb78:	add	sp, fp, #0
   2eb7c:	pop	{fp}		; (ldr fp, [sp], #4)
   2eb80:	bx	lr
   2eb84:	push	{fp}		; (str fp, [sp, #-4]!)
   2eb88:	add	fp, sp, #0
   2eb8c:	sub	sp, sp, #36	; 0x24
   2eb90:	str	r0, [fp, #-24]	; 0xffffffe8
   2eb94:	str	r1, [fp, #-28]	; 0xffffffe4
   2eb98:	str	r2, [fp, #-32]	; 0xffffffe0
   2eb9c:	str	r3, [fp, #-36]	; 0xffffffdc
   2eba0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2eba4:	cmp	r3, #0
   2eba8:	beq	2ebc4 <flatcc_verify_error_string@@Base+0x568>
   2ebac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ebb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ebb4:	add	r2, r2, r3
   2ebb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ebbc:	cmp	r2, r3
   2ebc0:	bls	2ebcc <flatcc_verify_error_string@@Base+0x570>
   2ebc4:	mov	r3, #18
   2ebc8:	b	2ec8c <flatcc_verify_error_string@@Base+0x630>
   2ebcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ebd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ebd4:	add	r3, r2, r3
   2ebd8:	str	r3, [fp, #-28]	; 0xffffffe4
   2ebdc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ebe0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2ebe4:	add	r2, r2, r3
   2ebe8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ebec:	cmp	r2, r3
   2ebf0:	movcs	r3, #1
   2ebf4:	movcc	r3, #0
   2ebf8:	uxtb	r3, r3
   2ebfc:	str	r3, [fp, #-8]
   2ec00:	ldr	r3, [fp, #-8]
   2ec04:	cmp	r3, #0
   2ec08:	bne	2ec14 <flatcc_verify_error_string@@Base+0x5b8>
   2ec0c:	mov	r3, #10
   2ec10:	b	2ec8c <flatcc_verify_error_string@@Base+0x630>
   2ec14:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ec18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2ec1c:	add	r2, r2, r3
   2ec20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ec24:	cmp	r2, r3
   2ec28:	movls	r3, #1
   2ec2c:	movhi	r3, #0
   2ec30:	uxtb	r3, r3
   2ec34:	str	r3, [fp, #-12]
   2ec38:	ldr	r3, [fp, #-12]
   2ec3c:	cmp	r3, #0
   2ec40:	bne	2ec4c <flatcc_verify_error_string@@Base+0x5f0>
   2ec44:	mov	r3, #9
   2ec48:	b	2ec8c <flatcc_verify_error_string@@Base+0x630>
   2ec4c:	ldrh	r3, [fp, #4]
   2ec50:	sub	r3, r3, #1
   2ec54:	mov	r2, r3
   2ec58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ec5c:	and	r3, r3, r2
   2ec60:	cmp	r3, #0
   2ec64:	moveq	r3, #1
   2ec68:	movne	r3, #0
   2ec6c:	uxtb	r3, r3
   2ec70:	str	r3, [fp, #-16]
   2ec74:	ldr	r3, [fp, #-16]
   2ec78:	cmp	r3, #0
   2ec7c:	bne	2ec88 <flatcc_verify_error_string@@Base+0x62c>
   2ec80:	mov	r3, #11
   2ec84:	b	2ec8c <flatcc_verify_error_string@@Base+0x630>
   2ec88:	mov	r3, #0
   2ec8c:	mov	r0, r3
   2ec90:	add	sp, fp, #0
   2ec94:	pop	{fp}		; (ldr fp, [sp], #4)
   2ec98:	bx	lr
   2ec9c:	push	{fp, lr}
   2eca0:	add	fp, sp, #4
   2eca4:	sub	sp, sp, #16
   2eca8:	str	r0, [fp, #-16]
   2ecac:	mov	r3, r1
   2ecb0:	strh	r3, [fp, #-18]	; 0xffffffee
   2ecb4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   2ecb8:	add	r3, r3, #2
   2ecbc:	uxth	r3, r3
   2ecc0:	lsl	r3, r3, #1
   2ecc4:	strh	r3, [fp, #-6]
   2ecc8:	ldr	r3, [fp, #-16]
   2eccc:	ldrh	r3, [r3, #22]
   2ecd0:	ldrh	r2, [fp, #-6]
   2ecd4:	cmp	r2, r3
   2ecd8:	bcc	2ece4 <flatcc_verify_error_string@@Base+0x688>
   2ecdc:	mov	r3, #0
   2ece0:	b	2ed00 <flatcc_verify_error_string@@Base+0x6a4>
   2ece4:	ldr	r3, [fp, #-16]
   2ece8:	ldr	r3, [r3, #12]
   2ecec:	ldrh	r2, [fp, #-6]
   2ecf0:	mov	r1, r2
   2ecf4:	mov	r0, r3
   2ecf8:	bl	2ea34 <flatcc_verify_error_string@@Base+0x3d8>
   2ecfc:	mov	r3, r0
   2ed00:	mov	r0, r3
   2ed04:	sub	sp, fp, #4
   2ed08:	pop	{fp, pc}
   2ed0c:	push	{fp, lr}
   2ed10:	add	fp, sp, #4
   2ed14:	sub	sp, sp, #16
   2ed18:	str	r0, [fp, #-16]
   2ed1c:	mov	r3, r1
   2ed20:	strh	r3, [fp, #-18]	; 0xffffffee
   2ed24:	ldrh	r3, [fp, #-18]	; 0xffffffee
   2ed28:	mov	r1, r3
   2ed2c:	ldr	r0, [fp, #-16]
   2ed30:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   2ed34:	mov	r3, r0
   2ed38:	strh	r3, [fp, #-6]
   2ed3c:	ldrh	r3, [fp, #-6]
   2ed40:	cmp	r3, #0
   2ed44:	beq	2ed68 <flatcc_verify_error_string@@Base+0x70c>
   2ed48:	ldr	r3, [fp, #-16]
   2ed4c:	ldr	r2, [r3]
   2ed50:	ldr	r3, [fp, #-16]
   2ed54:	ldr	r1, [r3, #16]
   2ed58:	ldrh	r3, [fp, #-6]
   2ed5c:	add	r3, r1, r3
   2ed60:	add	r3, r2, r3
   2ed64:	b	2ed6c <flatcc_verify_error_string@@Base+0x710>
   2ed68:	mov	r3, #0
   2ed6c:	mov	r0, r3
   2ed70:	sub	sp, fp, #4
   2ed74:	pop	{fp, pc}
   2ed78:	push	{fp, lr}
   2ed7c:	add	fp, sp, #4
   2ed80:	sub	sp, sp, #48	; 0x30
   2ed84:	str	r0, [fp, #-40]	; 0xffffffd8
   2ed88:	str	r2, [fp, #-48]	; 0xffffffd0
   2ed8c:	str	r3, [fp, #-52]	; 0xffffffcc
   2ed90:	strh	r1, [fp, #-42]	; 0xffffffd6
   2ed94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ed98:	ldr	r3, [r3]
   2ed9c:	str	r3, [fp, #-8]
   2eda0:	ldrh	r3, [fp, #-42]	; 0xffffffd6
   2eda4:	mov	r1, r3
   2eda8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2edac:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   2edb0:	mov	r3, r0
   2edb4:	strh	r3, [fp, #-10]
   2edb8:	ldrh	r3, [fp, #-10]
   2edbc:	cmp	r3, #0
   2edc0:	bne	2edf8 <flatcc_verify_error_string@@Base+0x79c>
   2edc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   2edc8:	cmp	r3, #0
   2edcc:	moveq	r3, #1
   2edd0:	movne	r3, #0
   2edd4:	uxtb	r3, r3
   2edd8:	str	r3, [fp, #-16]
   2eddc:	ldr	r3, [fp, #-16]
   2ede0:	cmp	r3, #0
   2ede4:	bne	2edf0 <flatcc_verify_error_string@@Base+0x794>
   2ede8:	mov	r3, #4
   2edec:	b	2eec0 <flatcc_verify_error_string@@Base+0x864>
   2edf0:	mov	r3, #0
   2edf4:	b	2eec0 <flatcc_verify_error_string@@Base+0x864>
   2edf8:	ldrh	r3, [fp, #-10]
   2edfc:	str	r3, [fp, #-20]	; 0xffffffec
   2ee00:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ee04:	ldr	r3, [fp, #-52]	; 0xffffffcc
   2ee08:	add	r3, r2, r3
   2ee0c:	str	r3, [fp, #-24]	; 0xffffffe8
   2ee10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ee14:	ldrh	r3, [r3, #20]
   2ee18:	mov	r2, r3
   2ee1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ee20:	cmp	r2, r3
   2ee24:	movcs	r3, #1
   2ee28:	movcc	r3, #0
   2ee2c:	uxtb	r3, r3
   2ee30:	str	r3, [fp, #-28]	; 0xffffffe4
   2ee34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ee38:	cmp	r3, #0
   2ee3c:	bne	2ee48 <flatcc_verify_error_string@@Base+0x7ec>
   2ee40:	mov	r3, #13
   2ee44:	b	2eec0 <flatcc_verify_error_string@@Base+0x864>
   2ee48:	mov	r3, #1
   2ee4c:	str	r3, [fp, #-32]	; 0xffffffe0
   2ee50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ee54:	cmp	r3, #0
   2ee58:	bne	2ee64 <flatcc_verify_error_string@@Base+0x808>
   2ee5c:	mov	r3, #14
   2ee60:	b	2eec0 <flatcc_verify_error_string@@Base+0x864>
   2ee64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ee68:	ldr	r2, [r3, #16]
   2ee6c:	ldr	r3, [fp, #-8]
   2ee70:	add	r3, r2, r3
   2ee74:	ldr	r2, [fp, #-20]	; 0xffffffec
   2ee78:	add	r3, r2, r3
   2ee7c:	str	r3, [fp, #-20]	; 0xffffffec
   2ee80:	ldrh	r3, [fp, #4]
   2ee84:	sub	r3, r3, #1
   2ee88:	mov	r2, r3
   2ee8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ee90:	and	r3, r3, r2
   2ee94:	cmp	r3, #0
   2ee98:	moveq	r3, #1
   2ee9c:	movne	r3, #0
   2eea0:	uxtb	r3, r3
   2eea4:	str	r3, [fp, #-36]	; 0xffffffdc
   2eea8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2eeac:	cmp	r3, #0
   2eeb0:	bne	2eebc <flatcc_verify_error_string@@Base+0x860>
   2eeb4:	mov	r3, #12
   2eeb8:	b	2eec0 <flatcc_verify_error_string@@Base+0x864>
   2eebc:	mov	r3, #0
   2eec0:	mov	r0, r3
   2eec4:	sub	sp, fp, #4
   2eec8:	pop	{fp, pc}
   2eecc:	push	{fp, lr}
   2eed0:	add	fp, sp, #4
   2eed4:	sub	sp, sp, #40	; 0x28
   2eed8:	str	r0, [fp, #-32]	; 0xffffffe0
   2eedc:	str	r2, [fp, #-40]	; 0xffffffd8
   2eee0:	str	r3, [fp, #-44]	; 0xffffffd4
   2eee4:	strh	r1, [fp, #-34]	; 0xffffffde
   2eee8:	ldrh	r3, [fp, #-34]	; 0xffffffde
   2eeec:	mov	r1, r3
   2eef0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2eef4:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   2eef8:	mov	r3, r0
   2eefc:	strh	r3, [fp, #-6]
   2ef00:	ldrh	r3, [fp, #-6]
   2ef04:	cmp	r3, #0
   2ef08:	bne	2ef34 <flatcc_verify_error_string@@Base+0x8d8>
   2ef0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2ef10:	mov	r2, #0
   2ef14:	str	r2, [r3]
   2ef18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ef1c:	cmp	r3, #0
   2ef20:	beq	2ef2c <flatcc_verify_error_string@@Base+0x8d0>
   2ef24:	mov	r3, #4
   2ef28:	b	2eff0 <flatcc_verify_error_string@@Base+0x994>
   2ef2c:	mov	r3, #0
   2ef30:	b	2eff0 <flatcc_verify_error_string@@Base+0x994>
   2ef34:	ldrh	r3, [fp, #-6]
   2ef38:	str	r3, [fp, #-12]
   2ef3c:	ldr	r3, [fp, #-12]
   2ef40:	add	r3, r3, #4
   2ef44:	str	r3, [fp, #-16]
   2ef48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ef4c:	ldrh	r3, [r3, #20]
   2ef50:	mov	r2, r3
   2ef54:	ldr	r3, [fp, #-16]
   2ef58:	cmp	r2, r3
   2ef5c:	movcs	r3, #1
   2ef60:	movcc	r3, #0
   2ef64:	uxtb	r3, r3
   2ef68:	str	r3, [fp, #-20]	; 0xffffffec
   2ef6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ef70:	cmp	r3, #0
   2ef74:	bne	2ef80 <flatcc_verify_error_string@@Base+0x924>
   2ef78:	mov	r3, #13
   2ef7c:	b	2eff0 <flatcc_verify_error_string@@Base+0x994>
   2ef80:	mov	r3, #1
   2ef84:	str	r3, [fp, #-24]	; 0xffffffe8
   2ef88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ef8c:	cmp	r3, #0
   2ef90:	bne	2ef9c <flatcc_verify_error_string@@Base+0x940>
   2ef94:	mov	r3, #14
   2ef98:	b	2eff0 <flatcc_verify_error_string@@Base+0x994>
   2ef9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2efa0:	ldr	r3, [r3, #16]
   2efa4:	ldr	r2, [fp, #-12]
   2efa8:	add	r3, r2, r3
   2efac:	str	r3, [fp, #-12]
   2efb0:	ldr	r3, [fp, #-12]
   2efb4:	and	r3, r3, #3
   2efb8:	cmp	r3, #0
   2efbc:	moveq	r3, #1
   2efc0:	movne	r3, #0
   2efc4:	uxtb	r3, r3
   2efc8:	str	r3, [fp, #-28]	; 0xffffffe4
   2efcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2efd0:	cmp	r3, #0
   2efd4:	bne	2efe0 <flatcc_verify_error_string@@Base+0x984>
   2efd8:	mov	r3, #12
   2efdc:	b	2eff0 <flatcc_verify_error_string@@Base+0x994>
   2efe0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2efe4:	ldr	r2, [fp, #-12]
   2efe8:	str	r2, [r3]
   2efec:	mov	r3, #0
   2eff0:	mov	r0, r3
   2eff4:	sub	sp, fp, #4
   2eff8:	pop	{fp, pc}
   2effc:	push	{fp, lr}
   2f000:	add	fp, sp, #4
   2f004:	sub	sp, sp, #32
   2f008:	str	r0, [fp, #-24]	; 0xffffffe8
   2f00c:	str	r1, [fp, #-28]	; 0xffffffe4
   2f010:	str	r2, [fp, #-32]	; 0xffffffe0
   2f014:	str	r3, [fp, #-36]	; 0xffffffdc
   2f018:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2f01c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f020:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2f024:	bl	2ea6c <flatcc_verify_error_string@@Base+0x410>
   2f028:	str	r0, [fp, #-8]
   2f02c:	ldr	r3, [fp, #-8]
   2f030:	cmp	r3, #0
   2f034:	bne	2f040 <flatcc_verify_error_string@@Base+0x9e4>
   2f038:	mov	r3, #17
   2f03c:	b	2f0ec <flatcc_verify_error_string@@Base+0xa90>
   2f040:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f044:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2f048:	add	r3, r2, r3
   2f04c:	str	r3, [fp, #-32]	; 0xffffffe0
   2f050:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f054:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f058:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f05c:	str	r0, [fp, #-12]
   2f060:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f064:	add	r3, r3, #4
   2f068:	str	r3, [fp, #-32]	; 0xffffffe0
   2f06c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2f070:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f074:	sub	r2, r2, r3
   2f078:	ldr	r3, [fp, #-12]
   2f07c:	add	r3, r3, #1
   2f080:	cmp	r2, r3
   2f084:	movcs	r3, #1
   2f088:	movcc	r3, #0
   2f08c:	uxtb	r3, r3
   2f090:	str	r3, [fp, #-16]
   2f094:	ldr	r3, [fp, #-16]
   2f098:	cmp	r3, #0
   2f09c:	bne	2f0a8 <flatcc_verify_error_string@@Base+0xa4c>
   2f0a0:	mov	r3, #8
   2f0a4:	b	2f0ec <flatcc_verify_error_string@@Base+0xa90>
   2f0a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f0ac:	ldr	r3, [fp, #-12]
   2f0b0:	add	r3, r2, r3
   2f0b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f0b8:	add	r3, r2, r3
   2f0bc:	ldrb	r3, [r3]
   2f0c0:	cmp	r3, #0
   2f0c4:	moveq	r3, #1
   2f0c8:	movne	r3, #0
   2f0cc:	uxtb	r3, r3
   2f0d0:	str	r3, [fp, #-20]	; 0xffffffec
   2f0d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   2f0d8:	cmp	r3, #0
   2f0dc:	bne	2f0e8 <flatcc_verify_error_string@@Base+0xa8c>
   2f0e0:	mov	r3, #7
   2f0e4:	b	2f0ec <flatcc_verify_error_string@@Base+0xa90>
   2f0e8:	mov	r3, #0
   2f0ec:	mov	r0, r3
   2f0f0:	sub	sp, fp, #4
   2f0f4:	pop	{fp, pc}
   2f0f8:	push	{fp, lr}
   2f0fc:	add	fp, sp, #4
   2f100:	sub	sp, sp, #32
   2f104:	str	r0, [fp, #-24]	; 0xffffffe8
   2f108:	str	r1, [fp, #-28]	; 0xffffffe4
   2f10c:	str	r2, [fp, #-32]	; 0xffffffe0
   2f110:	str	r3, [fp, #-36]	; 0xffffffdc
   2f114:	ldrh	r3, [fp, #8]
   2f118:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2f11c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f120:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2f124:	bl	2eae4 <flatcc_verify_error_string@@Base+0x488>
   2f128:	str	r0, [fp, #-8]
   2f12c:	ldr	r3, [fp, #-8]
   2f130:	cmp	r3, #0
   2f134:	bne	2f140 <flatcc_verify_error_string@@Base+0xae4>
   2f138:	mov	r3, #16
   2f13c:	b	2f1e0 <flatcc_verify_error_string@@Base+0xb84>
   2f140:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f144:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2f148:	add	r3, r2, r3
   2f14c:	str	r3, [fp, #-32]	; 0xffffffe0
   2f150:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f154:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f158:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f15c:	str	r0, [fp, #-12]
   2f160:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f164:	add	r3, r3, #4
   2f168:	str	r3, [fp, #-32]	; 0xffffffe0
   2f16c:	ldr	r2, [fp, #-12]
   2f170:	ldr	r3, [fp, #12]
   2f174:	cmp	r2, r3
   2f178:	movls	r3, #1
   2f17c:	movhi	r3, #0
   2f180:	uxtb	r3, r3
   2f184:	str	r3, [fp, #-16]
   2f188:	ldr	r3, [fp, #-16]
   2f18c:	cmp	r3, #0
   2f190:	bne	2f19c <flatcc_verify_error_string@@Base+0xb40>
   2f194:	mov	r3, #25
   2f198:	b	2f1e0 <flatcc_verify_error_string@@Base+0xb84>
   2f19c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2f1a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f1a4:	sub	r2, r2, r3
   2f1a8:	ldr	r3, [fp, #-12]
   2f1ac:	ldr	r1, [fp, #4]
   2f1b0:	mul	r3, r1, r3
   2f1b4:	cmp	r2, r3
   2f1b8:	movcs	r3, #1
   2f1bc:	movcc	r3, #0
   2f1c0:	uxtb	r3, r3
   2f1c4:	str	r3, [fp, #-20]	; 0xffffffec
   2f1c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   2f1cc:	cmp	r3, #0
   2f1d0:	bne	2f1dc <flatcc_verify_error_string@@Base+0xb80>
   2f1d4:	mov	r3, #26
   2f1d8:	b	2f1e0 <flatcc_verify_error_string@@Base+0xb84>
   2f1dc:	mov	r3, #0
   2f1e0:	mov	r0, r3
   2f1e4:	sub	sp, fp, #4
   2f1e8:	pop	{fp, pc}
   2f1ec:	push	{fp, lr}
   2f1f0:	add	fp, sp, #4
   2f1f4:	sub	sp, sp, #40	; 0x28
   2f1f8:	str	r0, [fp, #-16]
   2f1fc:	str	r1, [fp, #-20]	; 0xffffffec
   2f200:	str	r2, [fp, #-24]	; 0xffffffe8
   2f204:	str	r3, [fp, #-28]	; 0xffffffe4
   2f208:	mvn	r3, #-1073741824	; 0xc0000000
   2f20c:	str	r3, [sp, #8]
   2f210:	mov	r3, #4
   2f214:	str	r3, [sp, #4]
   2f218:	mov	r3, #4
   2f21c:	str	r3, [sp]
   2f220:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f224:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f228:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f22c:	ldr	r0, [fp, #-16]
   2f230:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2f234:	mov	r3, r0
   2f238:	cmp	r3, #0
   2f23c:	beq	2f274 <flatcc_verify_error_string@@Base+0xc18>
   2f240:	mvn	r3, #-1073741824	; 0xc0000000
   2f244:	str	r3, [sp, #8]
   2f248:	mov	r3, #4
   2f24c:	str	r3, [sp, #4]
   2f250:	mov	r3, #4
   2f254:	str	r3, [sp]
   2f258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f25c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f260:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f264:	ldr	r0, [fp, #-16]
   2f268:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2f26c:	mov	r3, r0
   2f270:	b	2f32c <flatcc_verify_error_string@@Base+0xcd0>
   2f274:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f278:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f27c:	add	r3, r2, r3
   2f280:	str	r3, [fp, #-24]	; 0xffffffe8
   2f284:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2f288:	ldr	r0, [fp, #-16]
   2f28c:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f290:	str	r0, [fp, #-12]
   2f294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f298:	add	r3, r3, #4
   2f29c:	str	r3, [fp, #-24]	; 0xffffffe8
   2f2a0:	mov	r3, #0
   2f2a4:	str	r3, [fp, #-8]
   2f2a8:	b	2f318 <flatcc_verify_error_string@@Base+0xcbc>
   2f2ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2f2b0:	ldr	r0, [fp, #-16]
   2f2b4:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f2b8:	mov	r3, r0
   2f2bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f2c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f2c4:	ldr	r0, [fp, #-16]
   2f2c8:	bl	2effc <flatcc_verify_error_string@@Base+0x9a0>
   2f2cc:	mov	r3, r0
   2f2d0:	cmp	r3, #0
   2f2d4:	beq	2f300 <flatcc_verify_error_string@@Base+0xca4>
   2f2d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2f2dc:	ldr	r0, [fp, #-16]
   2f2e0:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f2e4:	mov	r3, r0
   2f2e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2f2ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   2f2f0:	ldr	r0, [fp, #-16]
   2f2f4:	bl	2effc <flatcc_verify_error_string@@Base+0x9a0>
   2f2f8:	mov	r3, r0
   2f2fc:	b	2f32c <flatcc_verify_error_string@@Base+0xcd0>
   2f300:	ldr	r3, [fp, #-8]
   2f304:	add	r3, r3, #1
   2f308:	str	r3, [fp, #-8]
   2f30c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f310:	add	r3, r3, #4
   2f314:	str	r3, [fp, #-24]	; 0xffffffe8
   2f318:	ldr	r2, [fp, #-8]
   2f31c:	ldr	r3, [fp, #-12]
   2f320:	cmp	r2, r3
   2f324:	bcc	2f2ac <flatcc_verify_error_string@@Base+0xc50>
   2f328:	mov	r3, #0
   2f32c:	mov	r0, r3
   2f330:	sub	sp, fp, #4
   2f334:	pop	{fp, pc}
   2f338:	push	{r4, fp, lr}
   2f33c:	add	fp, sp, #8
   2f340:	sub	sp, sp, #84	; 0x54
   2f344:	str	r0, [fp, #-80]	; 0xffffffb0
   2f348:	str	r1, [fp, #-84]	; 0xffffffac
   2f34c:	str	r2, [fp, #-88]	; 0xffffffa8
   2f350:	str	r3, [fp, #-92]	; 0xffffffa4
   2f354:	ldr	r3, [fp, #4]
   2f358:	sub	r3, r3, #1
   2f35c:	str	r3, [fp, #-68]	; 0xffffffbc
   2f360:	ldr	r3, [fp, #-68]	; 0xffffffbc
   2f364:	str	r3, [fp, #-16]
   2f368:	ldr	r3, [fp, #-16]
   2f36c:	cmp	r3, #0
   2f370:	bne	2f37c <flatcc_verify_error_string@@Base+0xd20>
   2f374:	mov	r3, #3
   2f378:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f37c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   2f380:	ldr	r1, [fp, #-88]	; 0xffffffa8
   2f384:	ldr	r0, [fp, #-84]	; 0xffffffac
   2f388:	bl	2ea6c <flatcc_verify_error_string@@Base+0x410>
   2f38c:	str	r0, [fp, #-20]	; 0xffffffec
   2f390:	ldr	r3, [fp, #-20]	; 0xffffffec
   2f394:	cmp	r3, #0
   2f398:	bne	2f3a4 <flatcc_verify_error_string@@Base+0xd48>
   2f39c:	mov	r3, #15
   2f3a0:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f3a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   2f3a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   2f3ac:	add	r3, r2, r3
   2f3b0:	str	r3, [fp, #-60]	; 0xffffffc4
   2f3b4:	ldr	r4, [fp, #-60]	; 0xffffffc4
   2f3b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   2f3bc:	mov	r1, r3
   2f3c0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f3c4:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f3c8:	mov	r3, r0
   2f3cc:	sub	r3, r4, r3
   2f3d0:	str	r3, [fp, #-24]	; 0xffffffe8
   2f3d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f3d8:	cmp	r3, #0
   2f3dc:	blt	2f3f8 <flatcc_verify_error_string@@Base+0xd9c>
   2f3e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f3e4:	and	r3, r3, #1
   2f3e8:	cmp	r3, #0
   2f3ec:	bne	2f3f8 <flatcc_verify_error_string@@Base+0xd9c>
   2f3f0:	mov	r3, #1
   2f3f4:	b	2f3fc <flatcc_verify_error_string@@Base+0xda0>
   2f3f8:	mov	r3, #0
   2f3fc:	str	r3, [fp, #-28]	; 0xffffffe4
   2f400:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f404:	cmp	r3, #0
   2f408:	bne	2f414 <flatcc_verify_error_string@@Base+0xdb8>
   2f40c:	mov	r3, #29
   2f410:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f418:	add	r2, r3, #2
   2f41c:	ldr	r3, [fp, #-84]	; 0xffffffac
   2f420:	cmp	r2, r3
   2f424:	movls	r3, #1
   2f428:	movhi	r3, #0
   2f42c:	uxtb	r3, r3
   2f430:	str	r3, [fp, #-32]	; 0xffffffe0
   2f434:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f438:	cmp	r3, #0
   2f43c:	bne	2f448 <flatcc_verify_error_string@@Base+0xdec>
   2f440:	mov	r3, #27
   2f444:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f448:	ldr	r1, [fp, #-24]	; 0xffffffe8
   2f44c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f450:	bl	2ea34 <flatcc_verify_error_string@@Base+0x3d8>
   2f454:	mov	r3, r0
   2f458:	strh	r3, [fp, #-54]	; 0xffffffca
   2f45c:	ldrh	r3, [fp, #-54]	; 0xffffffca
   2f460:	mov	r2, r3
   2f464:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f468:	add	r3, r2, r3
   2f46c:	str	r3, [fp, #-36]	; 0xffffffdc
   2f470:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2f474:	ldr	r3, [fp, #-84]	; 0xffffffac
   2f478:	cmp	r2, r3
   2f47c:	bhi	2f498 <flatcc_verify_error_string@@Base+0xe3c>
   2f480:	ldrh	r3, [fp, #-54]	; 0xffffffca
   2f484:	and	r3, r3, #1
   2f488:	cmp	r3, #0
   2f48c:	bne	2f498 <flatcc_verify_error_string@@Base+0xe3c>
   2f490:	mov	r3, #1
   2f494:	b	2f49c <flatcc_verify_error_string@@Base+0xe40>
   2f498:	mov	r3, #0
   2f49c:	str	r3, [fp, #-40]	; 0xffffffd8
   2f4a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2f4a4:	cmp	r3, #0
   2f4a8:	bne	2f4b4 <flatcc_verify_error_string@@Base+0xe58>
   2f4ac:	mov	r3, #30
   2f4b0:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f4b4:	mov	r3, #1
   2f4b8:	str	r3, [fp, #-44]	; 0xffffffd4
   2f4bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2f4c0:	cmp	r3, #0
   2f4c4:	bne	2f4d0 <flatcc_verify_error_string@@Base+0xe74>
   2f4c8:	mov	r3, #31
   2f4cc:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f4d0:	ldrh	r3, [fp, #-54]	; 0xffffffca
   2f4d4:	cmp	r3, #3
   2f4d8:	movhi	r3, #1
   2f4dc:	movls	r3, #0
   2f4e0:	uxtb	r3, r3
   2f4e4:	str	r3, [fp, #-48]	; 0xffffffd0
   2f4e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   2f4ec:	cmp	r3, #0
   2f4f0:	bne	2f4fc <flatcc_verify_error_string@@Base+0xea0>
   2f4f4:	mov	r3, #28
   2f4f8:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f4fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f500:	add	r3, r3, #2
   2f504:	mov	r1, r3
   2f508:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2f50c:	bl	2ea34 <flatcc_verify_error_string@@Base+0x3d8>
   2f510:	mov	r3, r0
   2f514:	strh	r3, [fp, #-56]	; 0xffffffc8
   2f518:	ldr	r3, [fp, #-60]	; 0xffffffc4
   2f51c:	ldr	r2, [fp, #-84]	; 0xffffffac
   2f520:	sub	r3, r2, r3
   2f524:	ldrh	r2, [fp, #-56]	; 0xffffffc8
   2f528:	cmp	r3, r2
   2f52c:	movcs	r3, #1
   2f530:	movcc	r3, #0
   2f534:	uxtb	r3, r3
   2f538:	str	r3, [fp, #-52]	; 0xffffffcc
   2f53c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   2f540:	cmp	r3, #0
   2f544:	bne	2f550 <flatcc_verify_error_string@@Base+0xef4>
   2f548:	mov	r3, #20
   2f54c:	b	2f584 <flatcc_verify_error_string@@Base+0xf28>
   2f550:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2f554:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f558:	add	r3, r2, r3
   2f55c:	str	r3, [fp, #-64]	; 0xffffffc0
   2f560:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2f564:	str	r3, [fp, #-76]	; 0xffffffb4
   2f568:	ldr	r3, [fp, #-84]	; 0xffffffac
   2f56c:	str	r3, [fp, #-72]	; 0xffffffb8
   2f570:	sub	r2, fp, #76	; 0x4c
   2f574:	ldr	r3, [fp, #8]
   2f578:	mov	r0, r2
   2f57c:	blx	r3
   2f580:	mov	r3, r0
   2f584:	mov	r0, r3
   2f588:	sub	sp, fp, #8
   2f58c:	pop	{r4, fp, pc}
   2f590:	push	{fp, lr}
   2f594:	add	fp, sp, #4
   2f598:	sub	sp, sp, #48	; 0x30
   2f59c:	str	r0, [fp, #-24]	; 0xffffffe8
   2f5a0:	str	r1, [fp, #-28]	; 0xffffffe4
   2f5a4:	str	r2, [fp, #-32]	; 0xffffffe0
   2f5a8:	str	r3, [fp, #-36]	; 0xffffffdc
   2f5ac:	ldr	r3, [fp, #4]
   2f5b0:	sub	r2, r3, #1
   2f5b4:	str	r2, [fp, #4]
   2f5b8:	cmp	r3, #0
   2f5bc:	movgt	r3, #1
   2f5c0:	movle	r3, #0
   2f5c4:	uxtb	r3, r3
   2f5c8:	str	r3, [fp, #-12]
   2f5cc:	ldr	r3, [fp, #-12]
   2f5d0:	cmp	r3, #0
   2f5d4:	bne	2f5e0 <flatcc_verify_error_string@@Base+0xf84>
   2f5d8:	mov	r3, #3
   2f5dc:	b	2f72c <flatcc_verify_error_string@@Base+0x10d0>
   2f5e0:	mvn	r3, #-1073741824	; 0xc0000000
   2f5e4:	str	r3, [sp, #8]
   2f5e8:	mov	r3, #4
   2f5ec:	str	r3, [sp, #4]
   2f5f0:	mov	r3, #4
   2f5f4:	str	r3, [sp]
   2f5f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2f5fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f600:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2f604:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f608:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2f60c:	mov	r3, r0
   2f610:	cmp	r3, #0
   2f614:	beq	2f64c <flatcc_verify_error_string@@Base+0xff0>
   2f618:	mvn	r3, #-1073741824	; 0xc0000000
   2f61c:	str	r3, [sp, #8]
   2f620:	mov	r3, #4
   2f624:	str	r3, [sp, #4]
   2f628:	mov	r3, #4
   2f62c:	str	r3, [sp]
   2f630:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2f634:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f638:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2f63c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f640:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2f644:	mov	r3, r0
   2f648:	b	2f72c <flatcc_verify_error_string@@Base+0x10d0>
   2f64c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f650:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2f654:	add	r3, r2, r3
   2f658:	str	r3, [fp, #-32]	; 0xffffffe0
   2f65c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f664:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f668:	str	r0, [fp, #-16]
   2f66c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f670:	add	r3, r3, #4
   2f674:	str	r3, [fp, #-32]	; 0xffffffe0
   2f678:	mov	r3, #0
   2f67c:	str	r3, [fp, #-8]
   2f680:	b	2f718 <flatcc_verify_error_string@@Base+0x10bc>
   2f684:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f68c:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f690:	mov	r2, r0
   2f694:	ldr	r3, [fp, #8]
   2f698:	str	r3, [sp, #4]
   2f69c:	ldr	r3, [fp, #4]
   2f6a0:	str	r3, [sp]
   2f6a4:	mov	r3, r2
   2f6a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f6ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2f6b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f6b4:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   2f6b8:	mov	r3, r0
   2f6bc:	cmp	r3, #0
   2f6c0:	beq	2f700 <flatcc_verify_error_string@@Base+0x10a4>
   2f6c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f6c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f6cc:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f6d0:	mov	r2, r0
   2f6d4:	ldr	r3, [fp, #8]
   2f6d8:	str	r3, [sp, #4]
   2f6dc:	ldr	r3, [fp, #4]
   2f6e0:	str	r3, [sp]
   2f6e4:	mov	r3, r2
   2f6e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2f6ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2f6f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f6f4:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   2f6f8:	mov	r3, r0
   2f6fc:	b	2f72c <flatcc_verify_error_string@@Base+0x10d0>
   2f700:	ldr	r3, [fp, #-8]
   2f704:	add	r3, r3, #1
   2f708:	str	r3, [fp, #-8]
   2f70c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f710:	add	r3, r3, #4
   2f714:	str	r3, [fp, #-32]	; 0xffffffe0
   2f718:	ldr	r2, [fp, #-8]
   2f71c:	ldr	r3, [fp, #-16]
   2f720:	cmp	r2, r3
   2f724:	bcc	2f684 <flatcc_verify_error_string@@Base+0x1028>
   2f728:	mov	r3, #0
   2f72c:	mov	r0, r3
   2f730:	sub	sp, fp, #4
   2f734:	pop	{fp, pc}
   2f738:	push	{fp, lr}
   2f73c:	add	fp, sp, #4
   2f740:	sub	sp, sp, #88	; 0x58
   2f744:	str	r0, [fp, #-64]	; 0xffffffc0
   2f748:	str	r1, [fp, #-68]	; 0xffffffbc
   2f74c:	str	r2, [fp, #-72]	; 0xffffffb8
   2f750:	str	r3, [fp, #-76]	; 0xffffffb4
   2f754:	ldr	r3, [fp, #12]
   2f758:	sub	r2, r3, #1
   2f75c:	str	r2, [fp, #12]
   2f760:	cmp	r3, #0
   2f764:	movgt	r3, #1
   2f768:	movle	r3, #0
   2f76c:	uxtb	r3, r3
   2f770:	str	r3, [fp, #-12]
   2f774:	ldr	r3, [fp, #-12]
   2f778:	cmp	r3, #0
   2f77c:	bne	2f788 <flatcc_verify_error_string@@Base+0x112c>
   2f780:	mov	r3, #3
   2f784:	b	2f984 <flatcc_verify_error_string@@Base+0x1328>
   2f788:	mvn	r3, #-1073741824	; 0xc0000000
   2f78c:	str	r3, [sp, #8]
   2f790:	mov	r3, #4
   2f794:	str	r3, [sp, #4]
   2f798:	mov	r3, #4
   2f79c:	str	r3, [sp]
   2f7a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2f7a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2f7a8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2f7ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2f7b0:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2f7b4:	mov	r3, r0
   2f7b8:	cmp	r3, #0
   2f7bc:	beq	2f7f4 <flatcc_verify_error_string@@Base+0x1198>
   2f7c0:	mvn	r3, #-1073741824	; 0xc0000000
   2f7c4:	str	r3, [sp, #8]
   2f7c8:	mov	r3, #4
   2f7cc:	str	r3, [sp, #4]
   2f7d0:	mov	r3, #4
   2f7d4:	str	r3, [sp]
   2f7d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2f7dc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2f7e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2f7e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2f7e8:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2f7ec:	mov	r3, r0
   2f7f0:	b	2f984 <flatcc_verify_error_string@@Base+0x1328>
   2f7f4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2f7f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2f7fc:	add	r3, r2, r3
   2f800:	str	r3, [fp, #-72]	; 0xffffffb8
   2f804:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2f808:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2f80c:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f810:	str	r0, [fp, #-16]
   2f814:	ldr	r2, [fp, #-16]
   2f818:	ldr	r3, [fp, #4]
   2f81c:	cmp	r2, r3
   2f820:	moveq	r3, #1
   2f824:	movne	r3, #0
   2f828:	uxtb	r3, r3
   2f82c:	str	r3, [fp, #-20]	; 0xffffffec
   2f830:	ldr	r3, [fp, #-20]	; 0xffffffec
   2f834:	cmp	r3, #0
   2f838:	bne	2f844 <flatcc_verify_error_string@@Base+0x11e8>
   2f83c:	mov	r3, #34	; 0x22
   2f840:	b	2f984 <flatcc_verify_error_string@@Base+0x1328>
   2f844:	ldr	r3, [fp, #-72]	; 0xffffffb8
   2f848:	add	r3, r3, #4
   2f84c:	str	r3, [fp, #-72]	; 0xffffffb8
   2f850:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2f854:	str	r3, [fp, #-56]	; 0xffffffc8
   2f858:	ldr	r3, [fp, #-68]	; 0xffffffbc
   2f85c:	str	r3, [fp, #-52]	; 0xffffffcc
   2f860:	ldr	r3, [fp, #12]
   2f864:	str	r3, [fp, #-48]	; 0xffffffd0
   2f868:	mov	r3, #0
   2f86c:	str	r3, [fp, #-8]
   2f870:	b	2f970 <flatcc_verify_error_string@@Base+0x1314>
   2f874:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2f878:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2f87c:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2f880:	str	r0, [fp, #-24]	; 0xffffffe8
   2f884:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f888:	cmp	r3, #0
   2f88c:	bne	2f8c8 <flatcc_verify_error_string@@Base+0x126c>
   2f890:	ldr	r2, [fp, #8]
   2f894:	ldr	r3, [fp, #-8]
   2f898:	add	r3, r2, r3
   2f89c:	ldrb	r3, [r3]
   2f8a0:	cmp	r3, #0
   2f8a4:	moveq	r3, #1
   2f8a8:	movne	r3, #0
   2f8ac:	uxtb	r3, r3
   2f8b0:	str	r3, [fp, #-32]	; 0xffffffe0
   2f8b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f8b8:	cmp	r3, #0
   2f8bc:	bne	2f958 <flatcc_verify_error_string@@Base+0x12fc>
   2f8c0:	mov	r3, #32
   2f8c4:	b	2f984 <flatcc_verify_error_string@@Base+0x1328>
   2f8c8:	ldr	r2, [fp, #8]
   2f8cc:	ldr	r3, [fp, #-8]
   2f8d0:	add	r3, r2, r3
   2f8d4:	ldrb	r3, [r3]
   2f8d8:	cmp	r3, #0
   2f8dc:	movne	r3, #1
   2f8e0:	moveq	r3, #0
   2f8e4:	uxtb	r3, r3
   2f8e8:	str	r3, [fp, #-28]	; 0xffffffe4
   2f8ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f8f0:	cmp	r3, #0
   2f8f4:	bne	2f900 <flatcc_verify_error_string@@Base+0x12a4>
   2f8f8:	mov	r3, #33	; 0x21
   2f8fc:	b	2f984 <flatcc_verify_error_string@@Base+0x1328>
   2f900:	ldr	r2, [fp, #8]
   2f904:	ldr	r3, [fp, #-8]
   2f908:	add	r3, r2, r3
   2f90c:	ldrb	r3, [r3]
   2f910:	strb	r3, [fp, #-44]	; 0xffffffd4
   2f914:	ldr	r3, [fp, #-72]	; 0xffffffb8
   2f918:	str	r3, [fp, #-40]	; 0xffffffd8
   2f91c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f920:	str	r3, [fp, #-36]	; 0xffffffdc
   2f924:	sub	r2, fp, #56	; 0x38
   2f928:	ldr	r3, [fp, #16]
   2f92c:	mov	r0, r2
   2f930:	blx	r3
   2f934:	mov	r3, r0
   2f938:	cmp	r3, #0
   2f93c:	beq	2f958 <flatcc_verify_error_string@@Base+0x12fc>
   2f940:	sub	r2, fp, #56	; 0x38
   2f944:	ldr	r3, [fp, #16]
   2f948:	mov	r0, r2
   2f94c:	blx	r3
   2f950:	mov	r3, r0
   2f954:	b	2f984 <flatcc_verify_error_string@@Base+0x1328>
   2f958:	ldr	r3, [fp, #-8]
   2f95c:	add	r3, r3, #1
   2f960:	str	r3, [fp, #-8]
   2f964:	ldr	r3, [fp, #-72]	; 0xffffffb8
   2f968:	add	r3, r3, #4
   2f96c:	str	r3, [fp, #-72]	; 0xffffffb8
   2f970:	ldr	r2, [fp, #-8]
   2f974:	ldr	r3, [fp, #-16]
   2f978:	cmp	r2, r3
   2f97c:	bcc	2f874 <flatcc_verify_error_string@@Base+0x1218>
   2f980:	mov	r3, #0
   2f984:	mov	r0, r3
   2f988:	sub	sp, fp, #4
   2f98c:	pop	{fp, pc}

0002f990 <flatcc_verify_field@@Base>:
   2f990:	push	{fp, lr}
   2f994:	add	fp, sp, #4
   2f998:	sub	sp, sp, #24
   2f99c:	str	r0, [fp, #-8]
   2f9a0:	str	r2, [fp, #-16]
   2f9a4:	strh	r1, [fp, #-10]
   2f9a8:	strh	r3, [fp, #-12]
   2f9ac:	ldrh	r1, [fp, #-10]
   2f9b0:	ldrh	r3, [fp, #-12]
   2f9b4:	str	r3, [sp]
   2f9b8:	ldr	r3, [fp, #-16]
   2f9bc:	mov	r2, #0
   2f9c0:	ldr	r0, [fp, #-8]
   2f9c4:	bl	2ed78 <flatcc_verify_error_string@@Base+0x71c>
   2f9c8:	mov	r3, r0
   2f9cc:	cmp	r3, #0
   2f9d0:	beq	2f9f8 <flatcc_verify_field@@Base+0x68>
   2f9d4:	ldrh	r1, [fp, #-10]
   2f9d8:	ldrh	r3, [fp, #-12]
   2f9dc:	str	r3, [sp]
   2f9e0:	ldr	r3, [fp, #-16]
   2f9e4:	mov	r2, #0
   2f9e8:	ldr	r0, [fp, #-8]
   2f9ec:	bl	2ed78 <flatcc_verify_error_string@@Base+0x71c>
   2f9f0:	mov	r3, r0
   2f9f4:	b	2f9fc <flatcc_verify_field@@Base+0x6c>
   2f9f8:	mov	r3, #0
   2f9fc:	mov	r0, r3
   2fa00:	sub	sp, fp, #4
   2fa04:	pop	{fp, pc}

0002fa08 <flatcc_verify_string_field@@Base>:
   2fa08:	push	{r4, r5, r6, fp, lr}
   2fa0c:	add	fp, sp, #16
   2fa10:	sub	sp, sp, #28
   2fa14:	str	r0, [fp, #-32]	; 0xffffffe0
   2fa18:	mov	r3, r1
   2fa1c:	str	r2, [fp, #-40]	; 0xffffffd8
   2fa20:	strh	r3, [fp, #-34]	; 0xffffffde
   2fa24:	sub	r3, fp, #28
   2fa28:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2fa2c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2fa30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fa34:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   2fa38:	str	r0, [fp, #-24]	; 0xffffffe8
   2fa3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fa40:	cmp	r3, #0
   2fa44:	bne	2fa54 <flatcc_verify_string_field@@Base+0x4c>
   2fa48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2fa4c:	cmp	r3, #0
   2fa50:	bne	2fa5c <flatcc_verify_string_field@@Base+0x54>
   2fa54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fa58:	b	2faa0 <flatcc_verify_string_field@@Base+0x98>
   2fa5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fa60:	ldr	r4, [r3]
   2fa64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fa68:	ldr	r5, [r3, #4]
   2fa6c:	ldr	r6, [fp, #-28]	; 0xffffffe4
   2fa70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fa74:	ldr	r3, [r3]
   2fa78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fa7c:	mov	r1, r2
   2fa80:	mov	r0, r3
   2fa84:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2fa88:	mov	r3, r0
   2fa8c:	mov	r2, r6
   2fa90:	mov	r1, r5
   2fa94:	mov	r0, r4
   2fa98:	bl	2effc <flatcc_verify_error_string@@Base+0x9a0>
   2fa9c:	mov	r3, r0
   2faa0:	mov	r0, r3
   2faa4:	sub	sp, fp, #16
   2faa8:	pop	{r4, r5, r6, fp, pc}

0002faac <flatcc_verify_vector_field@@Base>:
   2faac:	push	{r4, r5, r6, fp, lr}
   2fab0:	add	fp, sp, #16
   2fab4:	sub	sp, sp, #44	; 0x2c
   2fab8:	str	r0, [fp, #-32]	; 0xffffffe0
   2fabc:	str	r2, [fp, #-40]	; 0xffffffd8
   2fac0:	str	r3, [fp, #-44]	; 0xffffffd4
   2fac4:	strh	r1, [fp, #-34]	; 0xffffffde
   2fac8:	sub	r3, fp, #28
   2facc:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2fad0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2fad4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fad8:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   2fadc:	str	r0, [fp, #-24]	; 0xffffffe8
   2fae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fae4:	cmp	r3, #0
   2fae8:	bne	2faf8 <flatcc_verify_vector_field@@Base+0x4c>
   2faec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2faf0:	cmp	r3, #0
   2faf4:	bne	2fb00 <flatcc_verify_vector_field@@Base+0x54>
   2faf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fafc:	b	2fb60 <flatcc_verify_vector_field@@Base+0xb4>
   2fb00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fb04:	ldr	r4, [r3]
   2fb08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fb0c:	ldr	r5, [r3, #4]
   2fb10:	ldr	r6, [fp, #-28]	; 0xffffffe4
   2fb14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fb18:	ldr	r3, [r3]
   2fb1c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fb20:	mov	r1, r2
   2fb24:	mov	r0, r3
   2fb28:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2fb2c:	mov	r2, r0
   2fb30:	ldr	r3, [fp, #8]
   2fb34:	str	r3, [sp, #8]
   2fb38:	ldrh	r3, [fp, #4]
   2fb3c:	str	r3, [sp, #4]
   2fb40:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2fb44:	str	r3, [sp]
   2fb48:	mov	r3, r2
   2fb4c:	mov	r2, r6
   2fb50:	mov	r1, r5
   2fb54:	mov	r0, r4
   2fb58:	bl	2f0f8 <flatcc_verify_error_string@@Base+0xa9c>
   2fb5c:	mov	r3, r0
   2fb60:	mov	r0, r3
   2fb64:	sub	sp, fp, #16
   2fb68:	pop	{r4, r5, r6, fp, pc}

0002fb6c <flatcc_verify_string_vector_field@@Base>:
   2fb6c:	push	{r4, r5, r6, fp, lr}
   2fb70:	add	fp, sp, #16
   2fb74:	sub	sp, sp, #28
   2fb78:	str	r0, [fp, #-32]	; 0xffffffe0
   2fb7c:	mov	r3, r1
   2fb80:	str	r2, [fp, #-40]	; 0xffffffd8
   2fb84:	strh	r3, [fp, #-34]	; 0xffffffde
   2fb88:	sub	r3, fp, #28
   2fb8c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2fb90:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2fb94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fb98:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   2fb9c:	str	r0, [fp, #-24]	; 0xffffffe8
   2fba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fba4:	cmp	r3, #0
   2fba8:	bne	2fbb8 <flatcc_verify_string_vector_field@@Base+0x4c>
   2fbac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2fbb0:	cmp	r3, #0
   2fbb4:	bne	2fbc0 <flatcc_verify_string_vector_field@@Base+0x54>
   2fbb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fbbc:	b	2fc04 <flatcc_verify_string_vector_field@@Base+0x98>
   2fbc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fbc4:	ldr	r4, [r3]
   2fbc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fbcc:	ldr	r5, [r3, #4]
   2fbd0:	ldr	r6, [fp, #-28]	; 0xffffffe4
   2fbd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fbd8:	ldr	r3, [r3]
   2fbdc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fbe0:	mov	r1, r2
   2fbe4:	mov	r0, r3
   2fbe8:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2fbec:	mov	r3, r0
   2fbf0:	mov	r2, r6
   2fbf4:	mov	r1, r5
   2fbf8:	mov	r0, r4
   2fbfc:	bl	2f1ec <flatcc_verify_error_string@@Base+0xb90>
   2fc00:	mov	r3, r0
   2fc04:	mov	r0, r3
   2fc08:	sub	sp, fp, #16
   2fc0c:	pop	{r4, r5, r6, fp, pc}

0002fc10 <flatcc_verify_table_field@@Base>:
   2fc10:	push	{r4, r5, r6, fp, lr}
   2fc14:	add	fp, sp, #16
   2fc18:	sub	sp, sp, #36	; 0x24
   2fc1c:	str	r0, [fp, #-32]	; 0xffffffe0
   2fc20:	str	r2, [fp, #-40]	; 0xffffffd8
   2fc24:	str	r3, [fp, #-44]	; 0xffffffd4
   2fc28:	strh	r1, [fp, #-34]	; 0xffffffde
   2fc2c:	sub	r3, fp, #28
   2fc30:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2fc34:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2fc38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fc3c:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   2fc40:	str	r0, [fp, #-24]	; 0xffffffe8
   2fc44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fc48:	cmp	r3, #0
   2fc4c:	bne	2fc5c <flatcc_verify_table_field@@Base+0x4c>
   2fc50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2fc54:	cmp	r3, #0
   2fc58:	bne	2fc64 <flatcc_verify_table_field@@Base+0x54>
   2fc5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fc60:	b	2fcc0 <flatcc_verify_table_field@@Base+0xb0>
   2fc64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fc68:	ldr	r4, [r3]
   2fc6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fc70:	ldr	r5, [r3, #4]
   2fc74:	ldr	r6, [fp, #-28]	; 0xffffffe4
   2fc78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fc7c:	ldr	r3, [r3]
   2fc80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fc84:	mov	r1, r2
   2fc88:	mov	r0, r3
   2fc8c:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2fc90:	mov	r1, r0
   2fc94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fc98:	ldr	r3, [r3, #8]
   2fc9c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2fca0:	str	r2, [sp, #4]
   2fca4:	str	r3, [sp]
   2fca8:	mov	r3, r1
   2fcac:	mov	r2, r6
   2fcb0:	mov	r1, r5
   2fcb4:	mov	r0, r4
   2fcb8:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   2fcbc:	mov	r3, r0
   2fcc0:	mov	r0, r3
   2fcc4:	sub	sp, fp, #16
   2fcc8:	pop	{r4, r5, r6, fp, pc}

0002fccc <flatcc_verify_table_vector_field@@Base>:
   2fccc:	push	{r4, r5, r6, fp, lr}
   2fcd0:	add	fp, sp, #16
   2fcd4:	sub	sp, sp, #36	; 0x24
   2fcd8:	str	r0, [fp, #-32]	; 0xffffffe0
   2fcdc:	str	r2, [fp, #-40]	; 0xffffffd8
   2fce0:	str	r3, [fp, #-44]	; 0xffffffd4
   2fce4:	strh	r1, [fp, #-34]	; 0xffffffde
   2fce8:	sub	r3, fp, #28
   2fcec:	ldrh	r1, [fp, #-34]	; 0xffffffde
   2fcf0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2fcf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fcf8:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   2fcfc:	str	r0, [fp, #-24]	; 0xffffffe8
   2fd00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fd04:	cmp	r3, #0
   2fd08:	bne	2fd18 <flatcc_verify_table_vector_field@@Base+0x4c>
   2fd0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2fd10:	cmp	r3, #0
   2fd14:	bne	2fd20 <flatcc_verify_table_vector_field@@Base+0x54>
   2fd18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fd1c:	b	2fd7c <flatcc_verify_table_vector_field@@Base+0xb0>
   2fd20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fd24:	ldr	r4, [r3]
   2fd28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fd2c:	ldr	r5, [r3, #4]
   2fd30:	ldr	r6, [fp, #-28]	; 0xffffffe4
   2fd34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fd38:	ldr	r3, [r3]
   2fd3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2fd40:	mov	r1, r2
   2fd44:	mov	r0, r3
   2fd48:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   2fd4c:	mov	r1, r0
   2fd50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fd54:	ldr	r3, [r3, #8]
   2fd58:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2fd5c:	str	r2, [sp, #4]
   2fd60:	str	r3, [sp]
   2fd64:	mov	r3, r1
   2fd68:	mov	r2, r6
   2fd6c:	mov	r1, r5
   2fd70:	mov	r0, r4
   2fd74:	bl	2f590 <flatcc_verify_error_string@@Base+0xf34>
   2fd78:	mov	r3, r0
   2fd7c:	mov	r0, r3
   2fd80:	sub	sp, fp, #16
   2fd84:	pop	{r4, r5, r6, fp, pc}

0002fd88 <flatcc_verify_union_table@@Base>:
   2fd88:	push	{fp, lr}
   2fd8c:	add	fp, sp, #4
   2fd90:	sub	sp, sp, #16
   2fd94:	str	r0, [fp, #-8]
   2fd98:	str	r1, [fp, #-12]
   2fd9c:	ldr	r3, [fp, #-8]
   2fda0:	ldr	r0, [r3]
   2fda4:	ldr	r3, [fp, #-8]
   2fda8:	ldr	r1, [r3, #4]
   2fdac:	ldr	r3, [fp, #-8]
   2fdb0:	ldr	ip, [r3, #16]
   2fdb4:	ldr	r3, [fp, #-8]
   2fdb8:	ldr	lr, [r3, #20]
   2fdbc:	ldr	r3, [fp, #-8]
   2fdc0:	ldr	r3, [r3, #8]
   2fdc4:	ldr	r2, [fp, #-12]
   2fdc8:	str	r2, [sp, #4]
   2fdcc:	str	r3, [sp]
   2fdd0:	mov	r3, lr
   2fdd4:	mov	r2, ip
   2fdd8:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   2fddc:	mov	r3, r0
   2fde0:	mov	r0, r3
   2fde4:	sub	sp, fp, #4
   2fde8:	pop	{fp, pc}

0002fdec <flatcc_verify_union_struct@@Base>:
   2fdec:	push	{fp, lr}
   2fdf0:	add	fp, sp, #4
   2fdf4:	sub	sp, sp, #24
   2fdf8:	str	r0, [fp, #-8]
   2fdfc:	str	r1, [fp, #-12]
   2fe00:	mov	r3, r2
   2fe04:	strh	r3, [fp, #-14]
   2fe08:	ldr	r3, [fp, #-8]
   2fe0c:	ldr	r0, [r3, #4]
   2fe10:	ldr	r3, [fp, #-8]
   2fe14:	ldr	r1, [r3, #16]
   2fe18:	ldr	r3, [fp, #-8]
   2fe1c:	ldr	r2, [r3, #20]
   2fe20:	ldrh	r3, [fp, #-14]
   2fe24:	str	r3, [sp]
   2fe28:	ldr	r3, [fp, #-12]
   2fe2c:	bl	2eb84 <flatcc_verify_error_string@@Base+0x528>
   2fe30:	mov	r3, r0
   2fe34:	mov	r0, r3
   2fe38:	sub	sp, fp, #4
   2fe3c:	pop	{fp, pc}

0002fe40 <flatcc_verify_union_string@@Base>:
   2fe40:	push	{fp, lr}
   2fe44:	add	fp, sp, #4
   2fe48:	sub	sp, sp, #8
   2fe4c:	str	r0, [fp, #-8]
   2fe50:	ldr	r3, [fp, #-8]
   2fe54:	ldr	r0, [r3]
   2fe58:	ldr	r3, [fp, #-8]
   2fe5c:	ldr	r1, [r3, #4]
   2fe60:	ldr	r3, [fp, #-8]
   2fe64:	ldr	r2, [r3, #16]
   2fe68:	ldr	r3, [fp, #-8]
   2fe6c:	ldr	r3, [r3, #20]
   2fe70:	bl	2effc <flatcc_verify_error_string@@Base+0x9a0>
   2fe74:	mov	r3, r0
   2fe78:	mov	r0, r3
   2fe7c:	sub	sp, fp, #4
   2fe80:	pop	{fp, pc}

0002fe84 <flatcc_verify_buffer_header@@Base>:
   2fe84:	push	{fp, lr}
   2fe88:	add	fp, sp, #4
   2fe8c:	sub	sp, sp, #40	; 0x28
   2fe90:	str	r0, [fp, #-32]	; 0xffffffe0
   2fe94:	str	r1, [fp, #-36]	; 0xffffffdc
   2fe98:	str	r2, [fp, #-40]	; 0xffffffd8
   2fe9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fea0:	and	r3, r3, #3
   2fea4:	cmp	r3, #0
   2fea8:	moveq	r3, #1
   2feac:	movne	r3, #0
   2feb0:	uxtb	r3, r3
   2feb4:	str	r3, [fp, #-8]
   2feb8:	ldr	r3, [fp, #-8]
   2febc:	cmp	r3, #0
   2fec0:	bne	2fecc <flatcc_verify_buffer_header@@Base+0x48>
   2fec4:	mov	r3, #5
   2fec8:	b	2ff90 <flatcc_verify_buffer_header@@Base+0x10c>
   2fecc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2fed0:	cmn	r3, #9
   2fed4:	movls	r3, #1
   2fed8:	movhi	r3, #0
   2fedc:	uxtb	r3, r3
   2fee0:	str	r3, [fp, #-12]
   2fee4:	ldr	r3, [fp, #-12]
   2fee8:	cmp	r3, #0
   2feec:	bne	2fef8 <flatcc_verify_buffer_header@@Base+0x74>
   2fef0:	mov	r3, #6
   2fef4:	b	2ff90 <flatcc_verify_buffer_header@@Base+0x10c>
   2fef8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2fefc:	cmp	r3, #7
   2ff00:	movhi	r3, #1
   2ff04:	movls	r3, #0
   2ff08:	uxtb	r3, r3
   2ff0c:	str	r3, [fp, #-16]
   2ff10:	ldr	r3, [fp, #-16]
   2ff14:	cmp	r3, #0
   2ff18:	bne	2ff24 <flatcc_verify_buffer_header@@Base+0xa0>
   2ff1c:	mov	r3, #1
   2ff20:	b	2ff90 <flatcc_verify_buffer_header@@Base+0x10c>
   2ff24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ff28:	cmp	r3, #0
   2ff2c:	beq	2ff8c <flatcc_verify_buffer_header@@Base+0x108>
   2ff30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2ff34:	bl	2e9b4 <flatcc_verify_error_string@@Base+0x358>
   2ff38:	str	r0, [fp, #-20]	; 0xffffffec
   2ff3c:	mov	r1, #4
   2ff40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ff44:	bl	2e9fc <flatcc_verify_error_string@@Base+0x3a0>
   2ff48:	str	r0, [fp, #-24]	; 0xffffffe8
   2ff4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ff50:	cmp	r3, #0
   2ff54:	beq	2ff68 <flatcc_verify_buffer_header@@Base+0xe4>
   2ff58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2ff5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   2ff60:	cmp	r2, r3
   2ff64:	bne	2ff70 <flatcc_verify_buffer_header@@Base+0xec>
   2ff68:	mov	r3, #1
   2ff6c:	b	2ff74 <flatcc_verify_buffer_header@@Base+0xf0>
   2ff70:	mov	r3, #0
   2ff74:	str	r3, [fp, #-28]	; 0xffffffe4
   2ff78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ff7c:	cmp	r3, #0
   2ff80:	bne	2ff8c <flatcc_verify_buffer_header@@Base+0x108>
   2ff84:	mov	r3, #2
   2ff88:	b	2ff90 <flatcc_verify_buffer_header@@Base+0x10c>
   2ff8c:	mov	r3, #0
   2ff90:	mov	r0, r3
   2ff94:	sub	sp, fp, #4
   2ff98:	pop	{fp, pc}

0002ff9c <flatcc_verify_typed_buffer_header@@Base>:
   2ff9c:	push	{fp, lr}
   2ffa0:	add	fp, sp, #4
   2ffa4:	sub	sp, sp, #40	; 0x28
   2ffa8:	str	r0, [fp, #-32]	; 0xffffffe0
   2ffac:	str	r1, [fp, #-36]	; 0xffffffdc
   2ffb0:	str	r2, [fp, #-40]	; 0xffffffd8
   2ffb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ffb8:	and	r3, r3, #3
   2ffbc:	cmp	r3, #0
   2ffc0:	moveq	r3, #1
   2ffc4:	movne	r3, #0
   2ffc8:	uxtb	r3, r3
   2ffcc:	str	r3, [fp, #-8]
   2ffd0:	ldr	r3, [fp, #-8]
   2ffd4:	cmp	r3, #0
   2ffd8:	bne	2ffe4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   2ffdc:	mov	r3, #5
   2ffe0:	b	300a4 <flatcc_verify_typed_buffer_header@@Base+0x108>
   2ffe4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2ffe8:	cmn	r3, #9
   2ffec:	movls	r3, #1
   2fff0:	movhi	r3, #0
   2fff4:	uxtb	r3, r3
   2fff8:	str	r3, [fp, #-12]
   2fffc:	ldr	r3, [fp, #-12]
   30000:	cmp	r3, #0
   30004:	bne	30010 <flatcc_verify_typed_buffer_header@@Base+0x74>
   30008:	mov	r3, #6
   3000c:	b	300a4 <flatcc_verify_typed_buffer_header@@Base+0x108>
   30010:	ldr	r3, [fp, #-36]	; 0xffffffdc
   30014:	cmp	r3, #7
   30018:	movhi	r3, #1
   3001c:	movls	r3, #0
   30020:	uxtb	r3, r3
   30024:	str	r3, [fp, #-16]
   30028:	ldr	r3, [fp, #-16]
   3002c:	cmp	r3, #0
   30030:	bne	3003c <flatcc_verify_typed_buffer_header@@Base+0xa0>
   30034:	mov	r3, #1
   30038:	b	300a4 <flatcc_verify_typed_buffer_header@@Base+0x108>
   3003c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   30040:	cmp	r3, #0
   30044:	beq	300a0 <flatcc_verify_typed_buffer_header@@Base+0x104>
   30048:	ldr	r3, [fp, #-40]	; 0xffffffd8
   3004c:	str	r3, [fp, #-20]	; 0xffffffec
   30050:	mov	r1, #4
   30054:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30058:	bl	2e9fc <flatcc_verify_error_string@@Base+0x3a0>
   3005c:	str	r0, [fp, #-24]	; 0xffffffe8
   30060:	ldr	r3, [fp, #-20]	; 0xffffffec
   30064:	cmp	r3, #0
   30068:	beq	3007c <flatcc_verify_typed_buffer_header@@Base+0xe0>
   3006c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30070:	ldr	r3, [fp, #-20]	; 0xffffffec
   30074:	cmp	r2, r3
   30078:	bne	30084 <flatcc_verify_typed_buffer_header@@Base+0xe8>
   3007c:	mov	r3, #1
   30080:	b	30088 <flatcc_verify_typed_buffer_header@@Base+0xec>
   30084:	mov	r3, #0
   30088:	str	r3, [fp, #-28]	; 0xffffffe4
   3008c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30090:	cmp	r3, #0
   30094:	bne	300a0 <flatcc_verify_typed_buffer_header@@Base+0x104>
   30098:	mov	r3, #2
   3009c:	b	300a4 <flatcc_verify_typed_buffer_header@@Base+0x108>
   300a0:	mov	r3, #0
   300a4:	mov	r0, r3
   300a8:	sub	sp, fp, #4
   300ac:	pop	{fp, pc}

000300b0 <flatcc_verify_struct_as_root@@Base>:
   300b0:	push	{fp, lr}
   300b4:	add	fp, sp, #4
   300b8:	sub	sp, sp, #24
   300bc:	str	r0, [fp, #-8]
   300c0:	str	r1, [fp, #-12]
   300c4:	str	r2, [fp, #-16]
   300c8:	str	r3, [fp, #-20]	; 0xffffffec
   300cc:	ldr	r2, [fp, #-16]
   300d0:	ldr	r1, [fp, #-12]
   300d4:	ldr	r0, [fp, #-8]
   300d8:	bl	2fe84 <flatcc_verify_buffer_header@@Base>
   300dc:	mov	r3, r0
   300e0:	cmp	r3, #0
   300e4:	beq	30100 <flatcc_verify_struct_as_root@@Base+0x50>
   300e8:	ldr	r2, [fp, #-16]
   300ec:	ldr	r1, [fp, #-12]
   300f0:	ldr	r0, [fp, #-8]
   300f4:	bl	2fe84 <flatcc_verify_buffer_header@@Base>
   300f8:	mov	r3, r0
   300fc:	b	3012c <flatcc_verify_struct_as_root@@Base+0x7c>
   30100:	mov	r1, #0
   30104:	ldr	r0, [fp, #-8]
   30108:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   3010c:	mov	r2, r0
   30110:	ldrh	r3, [fp, #4]
   30114:	str	r3, [sp]
   30118:	ldr	r3, [fp, #-20]	; 0xffffffec
   3011c:	mov	r1, #0
   30120:	ldr	r0, [fp, #-12]
   30124:	bl	2eb84 <flatcc_verify_error_string@@Base+0x528>
   30128:	mov	r3, r0
   3012c:	mov	r0, r3
   30130:	sub	sp, fp, #4
   30134:	pop	{fp, pc}

00030138 <flatcc_verify_struct_as_typed_root@@Base>:
   30138:	push	{fp, lr}
   3013c:	add	fp, sp, #4
   30140:	sub	sp, sp, #24
   30144:	str	r0, [fp, #-8]
   30148:	str	r1, [fp, #-12]
   3014c:	str	r2, [fp, #-16]
   30150:	str	r3, [fp, #-20]	; 0xffffffec
   30154:	ldr	r2, [fp, #-16]
   30158:	ldr	r1, [fp, #-12]
   3015c:	ldr	r0, [fp, #-8]
   30160:	bl	2ff9c <flatcc_verify_typed_buffer_header@@Base>
   30164:	mov	r3, r0
   30168:	cmp	r3, #0
   3016c:	beq	30188 <flatcc_verify_struct_as_typed_root@@Base+0x50>
   30170:	ldr	r2, [fp, #-16]
   30174:	ldr	r1, [fp, #-12]
   30178:	ldr	r0, [fp, #-8]
   3017c:	bl	2ff9c <flatcc_verify_typed_buffer_header@@Base>
   30180:	mov	r3, r0
   30184:	b	301b4 <flatcc_verify_struct_as_typed_root@@Base+0x7c>
   30188:	mov	r1, #0
   3018c:	ldr	r0, [fp, #-8]
   30190:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   30194:	mov	r2, r0
   30198:	ldrh	r3, [fp, #4]
   3019c:	str	r3, [sp]
   301a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   301a4:	mov	r1, #0
   301a8:	ldr	r0, [fp, #-12]
   301ac:	bl	2eb84 <flatcc_verify_error_string@@Base+0x528>
   301b0:	mov	r3, r0
   301b4:	mov	r0, r3
   301b8:	sub	sp, fp, #4
   301bc:	pop	{fp, pc}

000301c0 <flatcc_verify_table_as_root@@Base>:
   301c0:	push	{fp, lr}
   301c4:	add	fp, sp, #4
   301c8:	sub	sp, sp, #24
   301cc:	str	r0, [fp, #-8]
   301d0:	str	r1, [fp, #-12]
   301d4:	str	r2, [fp, #-16]
   301d8:	str	r3, [fp, #-20]	; 0xffffffec
   301dc:	ldr	r2, [fp, #-16]
   301e0:	ldr	r1, [fp, #-12]
   301e4:	ldr	r0, [fp, #-8]
   301e8:	bl	2fe84 <flatcc_verify_buffer_header@@Base>
   301ec:	mov	r3, r0
   301f0:	cmp	r3, #0
   301f4:	beq	30210 <flatcc_verify_table_as_root@@Base+0x50>
   301f8:	ldr	r2, [fp, #-16]
   301fc:	ldr	r1, [fp, #-12]
   30200:	ldr	r0, [fp, #-8]
   30204:	bl	2fe84 <flatcc_verify_buffer_header@@Base>
   30208:	mov	r3, r0
   3020c:	b	30248 <flatcc_verify_table_as_root@@Base+0x88>
   30210:	mov	r1, #0
   30214:	ldr	r0, [fp, #-8]
   30218:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   3021c:	mov	r2, r0
   30220:	ldr	r3, [fp, #-20]	; 0xffffffec
   30224:	str	r3, [sp, #4]
   30228:	mov	r3, #100	; 0x64
   3022c:	str	r3, [sp]
   30230:	mov	r3, r2
   30234:	mov	r2, #0
   30238:	ldr	r1, [fp, #-12]
   3023c:	ldr	r0, [fp, #-8]
   30240:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   30244:	mov	r3, r0
   30248:	mov	r0, r3
   3024c:	sub	sp, fp, #4
   30250:	pop	{fp, pc}

00030254 <flatcc_verify_table_as_typed_root@@Base>:
   30254:	push	{fp, lr}
   30258:	add	fp, sp, #4
   3025c:	sub	sp, sp, #24
   30260:	str	r0, [fp, #-8]
   30264:	str	r1, [fp, #-12]
   30268:	str	r2, [fp, #-16]
   3026c:	str	r3, [fp, #-20]	; 0xffffffec
   30270:	ldr	r2, [fp, #-16]
   30274:	ldr	r1, [fp, #-12]
   30278:	ldr	r0, [fp, #-8]
   3027c:	bl	2ff9c <flatcc_verify_typed_buffer_header@@Base>
   30280:	mov	r3, r0
   30284:	cmp	r3, #0
   30288:	beq	302a4 <flatcc_verify_table_as_typed_root@@Base+0x50>
   3028c:	ldr	r2, [fp, #-16]
   30290:	ldr	r1, [fp, #-12]
   30294:	ldr	r0, [fp, #-8]
   30298:	bl	2ff9c <flatcc_verify_typed_buffer_header@@Base>
   3029c:	mov	r3, r0
   302a0:	b	302dc <flatcc_verify_table_as_typed_root@@Base+0x88>
   302a4:	mov	r1, #0
   302a8:	ldr	r0, [fp, #-8]
   302ac:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   302b0:	mov	r2, r0
   302b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   302b8:	str	r3, [sp, #4]
   302bc:	mov	r3, #100	; 0x64
   302c0:	str	r3, [sp]
   302c4:	mov	r3, r2
   302c8:	mov	r2, #0
   302cc:	ldr	r1, [fp, #-12]
   302d0:	ldr	r0, [fp, #-8]
   302d4:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   302d8:	mov	r3, r0
   302dc:	mov	r0, r3
   302e0:	sub	sp, fp, #4
   302e4:	pop	{fp, pc}

000302e8 <flatcc_verify_struct_as_nested_root@@Base>:
   302e8:	push	{fp, lr}
   302ec:	add	fp, sp, #4
   302f0:	sub	sp, sp, #32
   302f4:	str	r0, [fp, #-16]
   302f8:	str	r2, [fp, #-24]	; 0xffffffe8
   302fc:	str	r3, [fp, #-28]	; 0xffffffe4
   30300:	strh	r1, [fp, #-18]	; 0xffffffee
   30304:	ldrh	r2, [fp, #8]
   30308:	ldrh	r1, [fp, #-18]	; 0xffffffee
   3030c:	mvn	r3, #0
   30310:	str	r3, [sp, #4]
   30314:	mov	r3, #1
   30318:	str	r3, [sp]
   3031c:	mov	r3, r2
   30320:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30324:	ldr	r0, [fp, #-16]
   30328:	bl	2faac <flatcc_verify_vector_field@@Base>
   3032c:	mov	r3, r0
   30330:	cmp	r3, #0
   30334:	beq	30368 <flatcc_verify_struct_as_nested_root@@Base+0x80>
   30338:	ldrh	r2, [fp, #8]
   3033c:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30340:	mvn	r3, #0
   30344:	str	r3, [sp, #4]
   30348:	mov	r3, #1
   3034c:	str	r3, [sp]
   30350:	mov	r3, r2
   30354:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30358:	ldr	r0, [fp, #-16]
   3035c:	bl	2faac <flatcc_verify_vector_field@@Base>
   30360:	mov	r3, r0
   30364:	b	303e8 <flatcc_verify_struct_as_nested_root@@Base+0x100>
   30368:	ldrh	r3, [fp, #-18]	; 0xffffffee
   3036c:	mov	r1, r3
   30370:	ldr	r0, [fp, #-16]
   30374:	bl	2ed0c <flatcc_verify_error_string@@Base+0x6b0>
   30378:	str	r0, [fp, #-8]
   3037c:	ldr	r3, [fp, #-8]
   30380:	cmp	r3, #0
   30384:	bne	30390 <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   30388:	mov	r3, #0
   3038c:	b	303e8 <flatcc_verify_struct_as_nested_root@@Base+0x100>
   30390:	mov	r1, #0
   30394:	ldr	r0, [fp, #-8]
   30398:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   3039c:	mov	r2, r0
   303a0:	ldr	r3, [fp, #-8]
   303a4:	add	r3, r2, r3
   303a8:	str	r3, [fp, #-8]
   303ac:	mov	r1, #0
   303b0:	ldr	r0, [fp, #-8]
   303b4:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   303b8:	str	r0, [fp, #-12]
   303bc:	ldr	r3, [fp, #-8]
   303c0:	add	r3, r3, #4
   303c4:	str	r3, [fp, #-8]
   303c8:	ldrh	r3, [fp, #8]
   303cc:	str	r3, [sp]
   303d0:	ldr	r3, [fp, #4]
   303d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   303d8:	ldr	r1, [fp, #-12]
   303dc:	ldr	r0, [fp, #-8]
   303e0:	bl	300b0 <flatcc_verify_struct_as_root@@Base>
   303e4:	mov	r3, r0
   303e8:	mov	r0, r3
   303ec:	sub	sp, fp, #4
   303f0:	pop	{fp, pc}

000303f4 <flatcc_verify_table_as_nested_root@@Base>:
   303f4:	push	{fp, lr}
   303f8:	add	fp, sp, #4
   303fc:	sub	sp, sp, #32
   30400:	str	r0, [fp, #-16]
   30404:	str	r2, [fp, #-24]	; 0xffffffe8
   30408:	str	r3, [fp, #-28]	; 0xffffffe4
   3040c:	strh	r1, [fp, #-18]	; 0xffffffee
   30410:	ldrh	r2, [fp, #4]
   30414:	ldrh	r1, [fp, #-18]	; 0xffffffee
   30418:	mvn	r3, #0
   3041c:	str	r3, [sp, #4]
   30420:	mov	r3, #1
   30424:	str	r3, [sp]
   30428:	mov	r3, r2
   3042c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30430:	ldr	r0, [fp, #-16]
   30434:	bl	2faac <flatcc_verify_vector_field@@Base>
   30438:	mov	r3, r0
   3043c:	cmp	r3, #0
   30440:	beq	30474 <flatcc_verify_table_as_nested_root@@Base+0x80>
   30444:	ldrh	r2, [fp, #4]
   30448:	ldrh	r1, [fp, #-18]	; 0xffffffee
   3044c:	mvn	r3, #0
   30450:	str	r3, [sp, #4]
   30454:	mov	r3, #1
   30458:	str	r3, [sp]
   3045c:	mov	r3, r2
   30460:	ldr	r2, [fp, #-24]	; 0xffffffe8
   30464:	ldr	r0, [fp, #-16]
   30468:	bl	2faac <flatcc_verify_vector_field@@Base>
   3046c:	mov	r3, r0
   30470:	b	30544 <flatcc_verify_table_as_nested_root@@Base+0x150>
   30474:	ldrh	r3, [fp, #-18]	; 0xffffffee
   30478:	mov	r1, r3
   3047c:	ldr	r0, [fp, #-16]
   30480:	bl	2ed0c <flatcc_verify_error_string@@Base+0x6b0>
   30484:	str	r0, [fp, #-8]
   30488:	ldr	r3, [fp, #-8]
   3048c:	cmp	r3, #0
   30490:	bne	3049c <flatcc_verify_table_as_nested_root@@Base+0xa8>
   30494:	mov	r3, #0
   30498:	b	30544 <flatcc_verify_table_as_nested_root@@Base+0x150>
   3049c:	mov	r1, #0
   304a0:	ldr	r0, [fp, #-8]
   304a4:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   304a8:	mov	r2, r0
   304ac:	ldr	r3, [fp, #-8]
   304b0:	add	r3, r2, r3
   304b4:	str	r3, [fp, #-8]
   304b8:	mov	r1, #0
   304bc:	ldr	r0, [fp, #-8]
   304c0:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   304c4:	str	r0, [fp, #-12]
   304c8:	ldr	r3, [fp, #-8]
   304cc:	add	r3, r3, #4
   304d0:	str	r3, [fp, #-8]
   304d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   304d8:	ldr	r1, [fp, #-12]
   304dc:	ldr	r0, [fp, #-8]
   304e0:	bl	2fe84 <flatcc_verify_buffer_header@@Base>
   304e4:	mov	r3, r0
   304e8:	cmp	r3, #0
   304ec:	beq	30508 <flatcc_verify_table_as_nested_root@@Base+0x114>
   304f0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   304f4:	ldr	r1, [fp, #-12]
   304f8:	ldr	r0, [fp, #-8]
   304fc:	bl	2fe84 <flatcc_verify_buffer_header@@Base>
   30500:	mov	r3, r0
   30504:	b	30544 <flatcc_verify_table_as_nested_root@@Base+0x150>
   30508:	mov	r1, #0
   3050c:	ldr	r0, [fp, #-8]
   30510:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   30514:	mov	r1, r0
   30518:	ldr	r3, [fp, #-16]
   3051c:	ldr	r3, [r3, #8]
   30520:	ldr	r2, [fp, #8]
   30524:	str	r2, [sp, #4]
   30528:	str	r3, [sp]
   3052c:	mov	r3, r1
   30530:	mov	r2, #0
   30534:	ldr	r1, [fp, #-12]
   30538:	ldr	r0, [fp, #-8]
   3053c:	bl	2f338 <flatcc_verify_error_string@@Base+0xcdc>
   30540:	mov	r3, r0
   30544:	mov	r0, r3
   30548:	sub	sp, fp, #4
   3054c:	pop	{fp, pc}

00030550 <flatcc_verify_union_field@@Base>:
   30550:	push	{fp, lr}
   30554:	add	fp, sp, #4
   30558:	sub	sp, sp, #80	; 0x50
   3055c:	str	r0, [fp, #-64]	; 0xffffffc0
   30560:	str	r2, [fp, #-72]	; 0xffffffb8
   30564:	str	r3, [fp, #-76]	; 0xffffffb4
   30568:	strh	r1, [fp, #-66]	; 0xffffffbe
   3056c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   30570:	sub	r3, r3, #1
   30574:	uxth	r3, r3
   30578:	mov	r1, r3
   3057c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30580:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   30584:	mov	r3, r0
   30588:	strh	r3, [fp, #-6]
   3058c:	ldrh	r3, [fp, #-6]
   30590:	cmp	r3, #0
   30594:	bne	30610 <flatcc_verify_union_field@@Base+0xc0>
   30598:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   3059c:	mov	r1, r3
   305a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   305a4:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   305a8:	mov	r3, r0
   305ac:	strh	r3, [fp, #-8]
   305b0:	ldrh	r3, [fp, #-8]
   305b4:	cmp	r3, #0
   305b8:	moveq	r3, #1
   305bc:	movne	r3, #0
   305c0:	uxtb	r3, r3
   305c4:	str	r3, [fp, #-12]
   305c8:	ldr	r3, [fp, #-12]
   305cc:	cmp	r3, #0
   305d0:	bne	305dc <flatcc_verify_union_field@@Base+0x8c>
   305d4:	mov	r3, #23
   305d8:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   305dc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   305e0:	cmp	r3, #0
   305e4:	moveq	r3, #1
   305e8:	movne	r3, #0
   305ec:	uxtb	r3, r3
   305f0:	str	r3, [fp, #-16]
   305f4:	ldr	r3, [fp, #-16]
   305f8:	cmp	r3, #0
   305fc:	bne	30608 <flatcc_verify_union_field@@Base+0xb8>
   30600:	mov	r3, #21
   30604:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   30608:	mov	r3, #0
   3060c:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   30610:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   30614:	sub	r3, r3, #1
   30618:	uxth	r1, r3
   3061c:	mov	r3, #1
   30620:	str	r3, [sp]
   30624:	mov	r3, #1
   30628:	mov	r2, #0
   3062c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30630:	bl	2ed78 <flatcc_verify_error_string@@Base+0x71c>
   30634:	mov	r3, r0
   30638:	cmp	r3, #0
   3063c:	beq	3066c <flatcc_verify_union_field@@Base+0x11c>
   30640:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   30644:	sub	r3, r3, #1
   30648:	uxth	r1, r3
   3064c:	mov	r3, #1
   30650:	str	r3, [sp]
   30654:	mov	r3, #1
   30658:	mov	r2, #0
   3065c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30660:	bl	2ed78 <flatcc_verify_error_string@@Base+0x71c>
   30664:	mov	r3, r0
   30668:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   3066c:	ldrh	r3, [fp, #-66]	; 0xffffffbe
   30670:	mov	r1, r3
   30674:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30678:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   3067c:	mov	r3, r0
   30680:	strh	r3, [fp, #-8]
   30684:	ldr	r3, [fp, #-64]	; 0xffffffc0
   30688:	ldr	r2, [r3]
   3068c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   30690:	ldr	r1, [r3, #16]
   30694:	ldrh	r3, [fp, #-6]
   30698:	add	r3, r1, r3
   3069c:	add	r3, r2, r3
   306a0:	str	r3, [fp, #-20]	; 0xffffffec
   306a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   306a8:	ldrb	r3, [r3]
   306ac:	cmp	r3, #0
   306b0:	bne	306c0 <flatcc_verify_union_field@@Base+0x170>
   306b4:	ldrh	r3, [fp, #-8]
   306b8:	cmp	r3, #0
   306bc:	bne	306c8 <flatcc_verify_union_field@@Base+0x178>
   306c0:	mov	r3, #1
   306c4:	b	306cc <flatcc_verify_union_field@@Base+0x17c>
   306c8:	mov	r3, #0
   306cc:	str	r3, [fp, #-24]	; 0xffffffe8
   306d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   306d4:	cmp	r3, #0
   306d8:	bne	306e4 <flatcc_verify_union_field@@Base+0x194>
   306dc:	mov	r3, #24
   306e0:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   306e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   306e8:	ldrb	r3, [r3]
   306ec:	cmp	r3, #0
   306f0:	bne	306fc <flatcc_verify_union_field@@Base+0x1ac>
   306f4:	mov	r3, #0
   306f8:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   306fc:	sub	r3, fp, #32
   30700:	ldrh	r1, [fp, #-66]	; 0xffffffbe
   30704:	ldr	r2, [fp, #-72]	; 0xffffffb8
   30708:	ldr	r0, [fp, #-64]	; 0xffffffc0
   3070c:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   30710:	str	r0, [fp, #-28]	; 0xffffffe4
   30714:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30718:	cmp	r3, #0
   3071c:	bne	3072c <flatcc_verify_union_field@@Base+0x1dc>
   30720:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30724:	cmp	r3, #0
   30728:	bne	30734 <flatcc_verify_union_field@@Base+0x1e4>
   3072c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30730:	b	307a0 <flatcc_verify_union_field@@Base+0x250>
   30734:	ldr	r3, [fp, #-64]	; 0xffffffc0
   30738:	ldr	r3, [r3]
   3073c:	str	r3, [fp, #-56]	; 0xffffffc8
   30740:	ldr	r3, [fp, #-64]	; 0xffffffc0
   30744:	ldr	r3, [r3, #4]
   30748:	str	r3, [fp, #-52]	; 0xffffffcc
   3074c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   30750:	ldr	r3, [r3, #8]
   30754:	str	r3, [fp, #-48]	; 0xffffffd0
   30758:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3075c:	str	r3, [fp, #-40]	; 0xffffffd8
   30760:	ldr	r3, [fp, #-64]	; 0xffffffc0
   30764:	ldr	r3, [r3]
   30768:	ldr	r2, [fp, #-32]	; 0xffffffe0
   3076c:	mov	r1, r2
   30770:	mov	r0, r3
   30774:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   30778:	mov	r3, r0
   3077c:	str	r3, [fp, #-36]	; 0xffffffdc
   30780:	ldr	r3, [fp, #-20]	; 0xffffffec
   30784:	ldrb	r3, [r3]
   30788:	strb	r3, [fp, #-44]	; 0xffffffd4
   3078c:	sub	r2, fp, #56	; 0x38
   30790:	ldr	r3, [fp, #-76]	; 0xffffffb4
   30794:	mov	r0, r2
   30798:	blx	r3
   3079c:	mov	r3, r0
   307a0:	mov	r0, r3
   307a4:	sub	sp, fp, #4
   307a8:	pop	{fp, pc}

000307ac <flatcc_verify_union_vector_field@@Base>:
   307ac:	push	{r4, r5, r6, fp, lr}
   307b0:	add	fp, sp, #16
   307b4:	sub	sp, sp, #68	; 0x44
   307b8:	str	r0, [fp, #-56]	; 0xffffffc8
   307bc:	str	r2, [fp, #-64]	; 0xffffffc0
   307c0:	str	r3, [fp, #-68]	; 0xffffffbc
   307c4:	strh	r1, [fp, #-58]	; 0xffffffc6
   307c8:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   307cc:	sub	r3, r3, #1
   307d0:	uxth	r3, r3
   307d4:	mov	r1, r3
   307d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   307dc:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   307e0:	mov	r3, r0
   307e4:	strh	r3, [fp, #-22]	; 0xffffffea
   307e8:	ldrh	r3, [fp, #-22]	; 0xffffffea
   307ec:	cmp	r3, #0
   307f0:	bne	30844 <flatcc_verify_union_vector_field@@Base+0x98>
   307f4:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   307f8:	mov	r1, r3
   307fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   30800:	bl	2ec9c <flatcc_verify_error_string@@Base+0x640>
   30804:	mov	r3, r0
   30808:	strh	r3, [fp, #-24]	; 0xffffffe8
   3080c:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   30810:	cmp	r3, #0
   30814:	bne	30844 <flatcc_verify_union_vector_field@@Base+0x98>
   30818:	ldr	r3, [fp, #-64]	; 0xffffffc0
   3081c:	cmp	r3, #0
   30820:	moveq	r3, #1
   30824:	movne	r3, #0
   30828:	uxtb	r3, r3
   3082c:	str	r3, [fp, #-28]	; 0xffffffe4
   30830:	ldr	r3, [fp, #-28]	; 0xffffffe4
   30834:	cmp	r3, #0
   30838:	bne	30844 <flatcc_verify_union_vector_field@@Base+0x98>
   3083c:	mov	r3, #22
   30840:	b	309c4 <flatcc_verify_union_vector_field@@Base+0x218>
   30844:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   30848:	sub	r3, r3, #1
   3084c:	uxth	r1, r3
   30850:	mvn	r3, #0
   30854:	str	r3, [sp, #4]
   30858:	mov	r3, #1
   3085c:	str	r3, [sp]
   30860:	mov	r3, #1
   30864:	ldr	r2, [fp, #-64]	; 0xffffffc0
   30868:	ldr	r0, [fp, #-56]	; 0xffffffc8
   3086c:	bl	2faac <flatcc_verify_vector_field@@Base>
   30870:	mov	r3, r0
   30874:	cmp	r3, #0
   30878:	beq	308b0 <flatcc_verify_union_vector_field@@Base+0x104>
   3087c:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   30880:	sub	r3, r3, #1
   30884:	uxth	r1, r3
   30888:	mvn	r3, #0
   3088c:	str	r3, [sp, #4]
   30890:	mov	r3, #1
   30894:	str	r3, [sp]
   30898:	mov	r3, #1
   3089c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   308a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   308a4:	bl	2faac <flatcc_verify_vector_field@@Base>
   308a8:	mov	r3, r0
   308ac:	b	309c4 <flatcc_verify_union_vector_field@@Base+0x218>
   308b0:	ldrh	r3, [fp, #-58]	; 0xffffffc6
   308b4:	sub	r3, r3, #1
   308b8:	uxth	r3, r3
   308bc:	mov	r1, r3
   308c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   308c4:	bl	2ed0c <flatcc_verify_error_string@@Base+0x6b0>
   308c8:	str	r0, [fp, #-32]	; 0xffffffe0
   308cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   308d0:	cmp	r3, #0
   308d4:	bne	308e0 <flatcc_verify_union_vector_field@@Base+0x134>
   308d8:	mov	r3, #0
   308dc:	b	309c4 <flatcc_verify_union_vector_field@@Base+0x218>
   308e0:	mov	r1, #0
   308e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   308e8:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   308ec:	mov	r2, r0
   308f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   308f4:	add	r3, r2, r3
   308f8:	str	r3, [fp, #-32]	; 0xffffffe0
   308fc:	mov	r1, #0
   30900:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30904:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   30908:	str	r0, [fp, #-36]	; 0xffffffdc
   3090c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   30910:	add	r3, r3, #4
   30914:	str	r3, [fp, #-32]	; 0xffffffe0
   30918:	ldr	r3, [fp, #-32]	; 0xffffffe0
   3091c:	str	r3, [fp, #-40]	; 0xffffffd8
   30920:	sub	r3, fp, #48	; 0x30
   30924:	ldrh	r1, [fp, #-58]	; 0xffffffc6
   30928:	ldr	r2, [fp, #-64]	; 0xffffffc0
   3092c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   30930:	bl	2eecc <flatcc_verify_error_string@@Base+0x870>
   30934:	str	r0, [fp, #-44]	; 0xffffffd4
   30938:	ldr	r3, [fp, #-44]	; 0xffffffd4
   3093c:	cmp	r3, #0
   30940:	bne	30950 <flatcc_verify_union_vector_field@@Base+0x1a4>
   30944:	ldr	r3, [fp, #-48]	; 0xffffffd0
   30948:	cmp	r3, #0
   3094c:	bne	30958 <flatcc_verify_union_vector_field@@Base+0x1ac>
   30950:	ldr	r3, [fp, #-44]	; 0xffffffd4
   30954:	b	309c4 <flatcc_verify_union_vector_field@@Base+0x218>
   30958:	ldr	r3, [fp, #-56]	; 0xffffffc8
   3095c:	ldr	r4, [r3]
   30960:	ldr	r3, [fp, #-56]	; 0xffffffc8
   30964:	ldr	r5, [r3, #4]
   30968:	ldr	r6, [fp, #-48]	; 0xffffffd0
   3096c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   30970:	ldr	r3, [r3]
   30974:	ldr	r2, [fp, #-48]	; 0xffffffd0
   30978:	mov	r1, r2
   3097c:	mov	r0, r3
   30980:	bl	2e97c <flatcc_verify_error_string@@Base+0x320>
   30984:	mov	r1, r0
   30988:	ldr	r3, [fp, #-56]	; 0xffffffc8
   3098c:	ldr	r3, [r3, #8]
   30990:	ldr	r2, [fp, #-68]	; 0xffffffbc
   30994:	str	r2, [sp, #12]
   30998:	str	r3, [sp, #8]
   3099c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   309a0:	str	r3, [sp, #4]
   309a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   309a8:	str	r3, [sp]
   309ac:	mov	r3, r1
   309b0:	mov	r2, r6
   309b4:	mov	r1, r5
   309b8:	mov	r0, r4
   309bc:	bl	2f738 <flatcc_verify_error_string@@Base+0x10dc>
   309c0:	mov	r3, r0
   309c4:	mov	r0, r3
   309c8:	sub	sp, fp, #16
   309cc:	pop	{r4, r5, r6, fp, pc}

000309d0 <__libc_csu_init@@Base>:
   309d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   309d4:	mov	r7, r0
   309d8:	ldr	r6, [pc, #72]	; 30a28 <__libc_csu_init@@Base+0x58>
   309dc:	ldr	r5, [pc, #72]	; 30a2c <__libc_csu_init@@Base+0x5c>
   309e0:	add	r6, pc, r6
   309e4:	add	r5, pc, r5
   309e8:	sub	r6, r6, r5
   309ec:	mov	r8, r1
   309f0:	mov	r9, r2
   309f4:	bl	128ec <strcmp@plt-0x20>
   309f8:	asrs	r6, r6, #2
   309fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   30a00:	mov	r4, #0
   30a04:	add	r4, r4, #1
   30a08:	ldr	r3, [r5], #4
   30a0c:	mov	r2, r9
   30a10:	mov	r1, r8
   30a14:	mov	r0, r7
   30a18:	blx	r3
   30a1c:	cmp	r6, r4
   30a20:	bne	30a04 <__libc_csu_init@@Base+0x34>
   30a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   30a28:	andeq	r5, r1, r8, lsr #10
   30a2c:	andeq	r5, r1, r0, lsr #10

00030a30 <__libc_csu_fini@@Base>:
   30a30:	bx	lr

Disassembly of section .fini:

00030a34 <.fini>:
   30a34:	push	{r3, lr}
   30a38:	pop	{r3, pc}
