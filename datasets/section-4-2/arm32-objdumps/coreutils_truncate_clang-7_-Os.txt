
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	11058 <__assert_fail@plt+0x48>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r6, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <fputs_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <strcmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <fflush@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <free@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <_exit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <memcpy@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <mbsinit@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <ftruncate64@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <memcmp@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <dcgettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <iswprint@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <__fxstat64@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <lseek64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <__ctype_get_mb_cur_max@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <__fpending@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <ferror_unlocked@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <mbrtowc@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <error@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <open64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <__freading@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <__gmon_start__@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <getopt_long@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <__ctype_b_loc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <exit@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <strlen@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <strchr@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <__errno_location@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__cxa_atexit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <memset@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <__printf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <fileno@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <__fprintf_chk@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <strtoimax@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <fclose@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <fseeko64@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <setlocale@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <strrchr@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <nl_langinfo@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <bindtextdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <__xstat64@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <fputs@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <strncmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <abort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <close@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <__assert_fail@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

Disassembly of section .text:

0001101c <.text>:
   1101c:	mov	fp, #0
   11020:	mov	lr, #0
   11024:	pop	{r1}		; (ldr r1, [sp], #4)
   11028:	mov	r2, sp
   1102c:	push	{r2}		; (str r2, [sp, #-4]!)
   11030:	push	{r0}		; (str r0, [sp, #-4]!)
   11034:	ldr	ip, [pc, #16]	; 1104c <__assert_fail@plt+0x3c>
   11038:	push	{ip}		; (str ip, [sp, #-4]!)
   1103c:	ldr	r0, [pc, #12]	; 11050 <__assert_fail@plt+0x40>
   11040:	ldr	r3, [pc, #12]	; 11054 <__assert_fail@plt+0x44>
   11044:	bl	10ed8 <__libc_start_main@plt>
   11048:	bl	10ff8 <abort@plt>
   1104c:	andeq	r5, r1, r8, lsl #8
   11050:	ldrdeq	r1, [r1], -r8
   11054:	andeq	r5, r1, r8, lsr #7
   11058:	ldr	r3, [pc, #20]	; 11074 <__assert_fail@plt+0x64>
   1105c:	ldr	r2, [pc, #20]	; 11078 <__assert_fail@plt+0x68>
   11060:	add	r3, pc, r3
   11064:	ldr	r2, [r3, r2]
   11068:	cmp	r2, #0
   1106c:	bxeq	lr
   11070:	b	10ef0 <__gmon_start__@plt>
   11074:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11078:	ldrdeq	r0, [r0], -r8
   1107c:	ldr	r0, [pc, #24]	; 1109c <__assert_fail@plt+0x8c>
   11080:	ldr	r3, [pc, #24]	; 110a0 <__assert_fail@plt+0x90>
   11084:	cmp	r3, r0
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0x94>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r7, r2, r0, lsr r1
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	ldr	r0, [pc, #36]	; 110d4 <__assert_fail@plt+0xc4>
   110ac:	ldr	r1, [pc, #36]	; 110d8 <__assert_fail@plt+0xc8>
   110b0:	sub	r1, r1, r0
   110b4:	asr	r1, r1, #2
   110b8:	add	r1, r1, r1, lsr #31
   110bc:	asrs	r1, r1, #1
   110c0:	bxeq	lr
   110c4:	ldr	r3, [pc, #16]	; 110dc <__assert_fail@plt+0xcc>
   110c8:	cmp	r3, #0
   110cc:	bxeq	lr
   110d0:	bx	r3
   110d4:	andeq	r7, r2, r0, lsr r1
   110d8:	andeq	r7, r2, r0, lsr r1
   110dc:	andeq	r0, r0, r0
   110e0:	push	{r4, lr}
   110e4:	ldr	r4, [pc, #24]	; 11104 <__assert_fail@plt+0xf4>
   110e8:	ldrb	r3, [r4]
   110ec:	cmp	r3, #0
   110f0:	popne	{r4, pc}
   110f4:	bl	1107c <__assert_fail@plt+0x6c>
   110f8:	mov	r3, #1
   110fc:	strb	r3, [r4]
   11100:	pop	{r4, pc}
   11104:	andeq	r7, r2, ip, asr #2
   11108:	b	110a8 <__assert_fail@plt+0x98>
   1110c:	push	{fp, lr}
   11110:	mov	fp, sp
   11114:	sub	sp, sp, #56	; 0x38
   11118:	mov	r8, r0
   1111c:	cmp	r0, #0
   11120:	bne	11398 <__assert_fail@plt+0x388>
   11124:	movw	r1, #21627	; 0x547b
   11128:	mov	r0, #0
   1112c:	mov	r2, #5
   11130:	movt	r1, #1
   11134:	bl	10e3c <dcgettext@plt>
   11138:	mov	r1, r0
   1113c:	movw	r0, #29024	; 0x7160
   11140:	movt	r0, #2
   11144:	ldr	r2, [r0]
   11148:	mov	r0, #1
   1114c:	bl	10f5c <__printf_chk@plt>
   11150:	movw	r1, #21656	; 0x5498
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	movt	r1, #1
   11160:	bl	10e3c <dcgettext@plt>
   11164:	movw	r9, #28996	; 0x7144
   11168:	movt	r9, #2
   1116c:	ldr	r1, [r9]
   11170:	bl	10dc4 <fputs_unlocked@plt>
   11174:	movw	r1, #22855	; 0x5947
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10e3c <dcgettext@plt>
   11188:	ldr	r1, [r9]
   1118c:	bl	10dc4 <fputs_unlocked@plt>
   11190:	movw	r1, #21931	; 0x55ab
   11194:	mov	r0, #0
   11198:	mov	r2, #5
   1119c:	movt	r1, #1
   111a0:	bl	10e3c <dcgettext@plt>
   111a4:	ldr	r1, [r9]
   111a8:	bl	10dc4 <fputs_unlocked@plt>
   111ac:	movw	r1, #21981	; 0x55dd
   111b0:	mov	r0, #0
   111b4:	mov	r2, #5
   111b8:	movt	r1, #1
   111bc:	bl	10e3c <dcgettext@plt>
   111c0:	ldr	r1, [r9]
   111c4:	bl	10dc4 <fputs_unlocked@plt>
   111c8:	movw	r1, #22058	; 0x562a
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10e3c <dcgettext@plt>
   111dc:	ldr	r1, [r9]
   111e0:	bl	10dc4 <fputs_unlocked@plt>
   111e4:	movw	r1, #22170	; 0x569a
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10e3c <dcgettext@plt>
   111f8:	ldr	r1, [r9]
   111fc:	bl	10dc4 <fputs_unlocked@plt>
   11200:	movw	r1, #22215	; 0x56c7
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	movt	r1, #1
   11210:	bl	10e3c <dcgettext@plt>
   11214:	ldr	r1, [r9]
   11218:	bl	10dc4 <fputs_unlocked@plt>
   1121c:	movw	r1, #22930	; 0x5992
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10e3c <dcgettext@plt>
   11230:	ldr	r1, [r9]
   11234:	bl	10dc4 <fputs_unlocked@plt>
   11238:	movw	r1, #22269	; 0x56fd
   1123c:	mov	r0, #0
   11240:	mov	r2, #5
   11244:	movt	r1, #1
   11248:	bl	10e3c <dcgettext@plt>
   1124c:	ldr	r1, [r9]
   11250:	bl	10dc4 <fputs_unlocked@plt>
   11254:	movw	r0, #23768	; 0x5cd8
   11258:	mov	r6, sp
   1125c:	movt	r0, #1
   11260:	mov	r1, r6
   11264:	ldm	r0!, {r2, r3, r4, r5}
   11268:	stmia	r1!, {r2, r3, r4, r5}
   1126c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11270:	stmia	r1!, {r2, r3, r4, r5, r7}
   11274:	ldm	r0, {r2, r3, r4, r5, r7}
   11278:	stm	r1, {r2, r3, r4, r5, r7}
   1127c:	movw	r1, #23142	; 0x5a66
   11280:	movw	r5, #22460	; 0x57bc
   11284:	movt	r1, #1
   11288:	movt	r5, #1
   1128c:	mov	r0, r5
   11290:	bl	10ddc <strcmp@plt>
   11294:	cmp	r0, #0
   11298:	ldrne	r1, [r6, #8]!
   1129c:	cmpne	r1, #0
   112a0:	bne	1128c <__assert_fail@plt+0x27c>
   112a4:	ldr	r6, [r6, #4]
   112a8:	movw	r1, #23237	; 0x5ac5
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	movt	r1, #1
   112b8:	bl	10e3c <dcgettext@plt>
   112bc:	movw	r2, #22584	; 0x5838
   112c0:	movw	r3, #23260	; 0x5adc
   112c4:	mov	r1, r0
   112c8:	mov	r0, #1
   112cc:	movt	r2, #1
   112d0:	movt	r3, #1
   112d4:	bl	10f5c <__printf_chk@plt>
   112d8:	cmp	r6, #0
   112dc:	mov	r0, #5
   112e0:	mov	r1, #0
   112e4:	moveq	r6, r5
   112e8:	bl	10fa4 <setlocale@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11328 <__assert_fail@plt+0x318>
   112f4:	movw	r1, #23300	; 0x5b04
   112f8:	mov	r2, #3
   112fc:	movt	r1, #1
   11300:	bl	10fec <strncmp@plt>
   11304:	cmp	r0, #0
   11308:	beq	11328 <__assert_fail@plt+0x318>
   1130c:	movw	r1, #23304	; 0x5b08
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10e3c <dcgettext@plt>
   11320:	ldr	r1, [r9]
   11324:	bl	10dc4 <fputs_unlocked@plt>
   11328:	movw	r1, #23375	; 0x5b4f
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10e3c <dcgettext@plt>
   1133c:	movw	r2, #23260	; 0x5adc
   11340:	mov	r1, r0
   11344:	mov	r0, #1
   11348:	mov	r3, r5
   1134c:	movt	r2, #1
   11350:	bl	10f5c <__printf_chk@plt>
   11354:	movw	r1, #23402	; 0x5b6a
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	movt	r1, #1
   11364:	bl	10e3c <dcgettext@plt>
   11368:	movw	r3, #23452	; 0x5b9c
   1136c:	mov	r1, r0
   11370:	movw	r0, #23170	; 0x5a82
   11374:	cmp	r6, r5
   11378:	mov	r2, r6
   1137c:	movt	r0, #1
   11380:	movt	r3, #1
   11384:	moveq	r3, r0
   11388:	mov	r0, #1
   1138c:	bl	10f5c <__printf_chk@plt>
   11390:	mov	r0, r8
   11394:	bl	10f14 <exit@plt>
   11398:	movw	r0, #28992	; 0x7140
   1139c:	movw	r1, #21588	; 0x5454
   113a0:	mov	r2, #5
   113a4:	movt	r0, #2
   113a8:	movt	r1, #1
   113ac:	ldr	r5, [r0]
   113b0:	mov	r0, #0
   113b4:	bl	10e3c <dcgettext@plt>
   113b8:	mov	r2, r0
   113bc:	movw	r0, #29024	; 0x7160
   113c0:	mov	r1, #1
   113c4:	movt	r0, #2
   113c8:	ldr	r3, [r0]
   113cc:	mov	r0, r5
   113d0:	bl	10f74 <__fprintf_chk@plt>
   113d4:	b	11390 <__assert_fail@plt+0x380>
   113d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113dc:	add	fp, sp, #28
   113e0:	sub	sp, sp, #172	; 0xac
   113e4:	mov	sl, r0
   113e8:	ldr	r0, [r1]
   113ec:	mov	r9, r1
   113f0:	bl	120ac <__assert_fail@plt+0x109c>
   113f4:	movw	r1, #23452	; 0x5b9c
   113f8:	mov	r0, #6
   113fc:	movt	r1, #1
   11400:	bl	10fa4 <setlocale@plt>
   11404:	movw	r4, #22588	; 0x583c
   11408:	movw	r1, #22469	; 0x57c5
   1140c:	movt	r4, #1
   11410:	movt	r1, #1
   11414:	mov	r0, r4
   11418:	bl	10fc8 <bindtextdomain@plt>
   1141c:	mov	r0, r4
   11420:	bl	10e54 <textdomain@plt>
   11424:	movw	r0, #8132	; 0x1fc4
   11428:	movt	r0, #1
   1142c:	bl	1540c <__assert_fail@plt+0x43fc>
   11430:	movw	r7, #22493	; 0x57dd
   11434:	movw	r8, #29000	; 0x7148
   11438:	movw	r4, #29012	; 0x7154
   1143c:	mov	r0, #0
   11440:	mov	r5, #0
   11444:	mov	r6, #0
   11448:	str	r0, [sp, #36]	; 0x24
   1144c:	movt	r7, #1
   11450:	movt	r8, #2
   11454:	movt	r4, #2
   11458:	movw	r3, #23656	; 0x5c68
   1145c:	mov	r0, sl
   11460:	mov	r1, r9
   11464:	mov	r2, r7
   11468:	str	r5, [sp]
   1146c:	movt	r3, #1
   11470:	bl	10efc <getopt_long@plt>
   11474:	cmp	r0, #110	; 0x6e
   11478:	ble	11498 <__assert_fail@plt+0x488>
   1147c:	cmp	r0, #111	; 0x6f
   11480:	beq	114b4 <__assert_fail@plt+0x4a4>
   11484:	cmp	r0, #114	; 0x72
   11488:	bne	114c8 <__assert_fail@plt+0x4b8>
   1148c:	ldr	r0, [r8]
   11490:	str	r0, [r4]
   11494:	b	11458 <__assert_fail@plt+0x448>
   11498:	cmp	r0, #98	; 0x62
   1149c:	ble	11680 <__assert_fail@plt+0x670>
   114a0:	cmp	r0, #99	; 0x63
   114a4:	bne	11f38 <__assert_fail@plt+0xf28>
   114a8:	movw	r0, #29008	; 0x7150
   114ac:	movt	r0, #2
   114b0:	b	114bc <__assert_fail@plt+0x4ac>
   114b4:	movw	r0, #29009	; 0x7151
   114b8:	movt	r0, #2
   114bc:	mov	r1, #1
   114c0:	strb	r1, [r0]
   114c4:	b	11458 <__assert_fail@plt+0x448>
   114c8:	cmp	r0, #115	; 0x73
   114cc:	bne	11f38 <__assert_fail@plt+0xf28>
   114d0:	bl	10f08 <__ctype_b_loc@plt>
   114d4:	ldr	r6, [r8]
   114d8:	ldr	r2, [r0]
   114dc:	ldrb	r1, [r6]
   114e0:	add	r2, r2, r1, lsl #1
   114e4:	ldrb	r2, [r2, #1]
   114e8:	tst	r2, #32
   114ec:	beq	11514 <__assert_fail@plt+0x504>
   114f0:	add	r2, r6, #1
   114f4:	str	r2, [r8]
   114f8:	ldrb	r1, [r2], #1
   114fc:	ldr	r3, [r0]
   11500:	add	r3, r3, r1, lsl #1
   11504:	ldrb	r3, [r3, #1]
   11508:	tst	r3, #32
   1150c:	bne	114f4 <__assert_fail@plt+0x4e4>
   11510:	sub	r6, r2, #1
   11514:	cmp	r1, #59	; 0x3b
   11518:	bgt	11534 <__assert_fail@plt+0x524>
   1151c:	cmp	r1, #37	; 0x25
   11520:	beq	11554 <__assert_fail@plt+0x544>
   11524:	cmp	r1, #47	; 0x2f
   11528:	bne	1154c <__assert_fail@plt+0x53c>
   1152c:	mov	r1, #4
   11530:	b	11560 <__assert_fail@plt+0x550>
   11534:	cmp	r1, #60	; 0x3c
   11538:	beq	1155c <__assert_fail@plt+0x54c>
   1153c:	cmp	r1, #62	; 0x3e
   11540:	bne	1154c <__assert_fail@plt+0x53c>
   11544:	mov	r1, #2
   11548:	b	11560 <__assert_fail@plt+0x550>
   1154c:	ldr	r1, [sp, #36]	; 0x24
   11550:	b	11568 <__assert_fail@plt+0x558>
   11554:	mov	r1, #5
   11558:	b	11560 <__assert_fail@plt+0x550>
   1155c:	mov	r1, #3
   11560:	add	r6, r6, #1
   11564:	str	r6, [r8]
   11568:	ldrb	r2, [r6]
   1156c:	ldr	r3, [r0]
   11570:	str	r9, [sp, #60]	; 0x3c
   11574:	add	r3, r3, r2, lsl #1
   11578:	ldrb	r3, [r3, #1]
   1157c:	tst	r3, #32
   11580:	bne	1158c <__assert_fail@plt+0x57c>
   11584:	mov	r9, r7
   11588:	b	115b4 <__assert_fail@plt+0x5a4>
   1158c:	add	r3, r6, #1
   11590:	str	r3, [r8]
   11594:	ldrb	r2, [r3], #1
   11598:	ldr	r6, [r0]
   1159c:	add	r6, r6, r2, lsl #1
   115a0:	ldrb	r6, [r6, #1]
   115a4:	tst	r6, #32
   115a8:	bne	11590 <__assert_fail@plt+0x580>
   115ac:	mov	r9, r7
   115b0:	sub	r6, r3, #1
   115b4:	cmp	r2, #45	; 0x2d
   115b8:	mov	r7, r4
   115bc:	cmpne	r2, #43	; 0x2b
   115c0:	bne	115d4 <__assert_fail@plt+0x5c4>
   115c4:	mov	r4, #1
   115c8:	cmp	r1, #0
   115cc:	beq	115d8 <__assert_fail@plt+0x5c8>
   115d0:	b	11e6c <__assert_fail@plt+0xe5c>
   115d4:	mov	r4, r1
   115d8:	movw	r1, #22552	; 0x5818
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	10e3c <dcgettext@plt>
   115ec:	mvn	r1, #0
   115f0:	str	r0, [sp, #12]
   115f4:	mov	r0, #0
   115f8:	mov	r2, #0
   115fc:	mov	r3, #-2147483648	; 0x80000000
   11600:	str	r1, [sp]
   11604:	mvn	r1, #-2147483648	; 0x80000000
   11608:	str	r0, [sp, #16]
   1160c:	mov	r0, r6
   11610:	str	r1, [sp, #4]
   11614:	movw	r1, #22538	; 0x580a
   11618:	movt	r1, #1
   1161c:	str	r1, [sp, #8]
   11620:	bl	14644 <__assert_fail@plt+0x3634>
   11624:	str	r0, [sp, #52]	; 0x34
   11628:	orr	r0, r4, #1
   1162c:	str	r1, [sp, #44]	; 0x2c
   11630:	str	r4, [sp, #36]	; 0x24
   11634:	mov	r4, r7
   11638:	mov	r7, r9
   1163c:	ldr	r9, [sp, #60]	; 0x3c
   11640:	mov	r6, #1
   11644:	mov	r5, #0
   11648:	cmp	r0, #5
   1164c:	ldreq	r0, [sp, #52]	; 0x34
   11650:	ldreq	r1, [sp, #44]	; 0x2c
   11654:	orrseq	r0, r0, r1
   11658:	bne	11458 <__assert_fail@plt+0x448>
   1165c:	movw	r1, #22567	; 0x5827
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	10e3c <dcgettext@plt>
   11670:	mov	r2, r0
   11674:	mov	r0, #1
   11678:	mov	r1, #0
   1167c:	bl	10eb4 <error@plt>
   11680:	cmn	r0, #1
   11684:	bne	11e0c <__assert_fail@plt+0xdfc>
   11688:	ldr	r0, [r4]
   1168c:	movw	r8, #29009	; 0x7151
   11690:	movt	r8, #2
   11694:	cmp	r0, #0
   11698:	mov	r1, r0
   1169c:	movwne	r1, #1
   116a0:	orr	r1, r6, r1
   116a4:	tst	r1, #1
   116a8:	beq	11e78 <__assert_fail@plt+0xe68>
   116ac:	movw	r1, #28984	; 0x7138
   116b0:	cmp	r0, #0
   116b4:	movt	r1, #2
   116b8:	ldr	r7, [r1]
   116bc:	beq	116d4 <__assert_fail@plt+0x6c4>
   116c0:	ldr	r1, [sp, #36]	; 0x24
   116c4:	cmp	r1, #0
   116c8:	eoreq	r1, r6, #1
   116cc:	tsteq	r1, #1
   116d0:	beq	11ee4 <__assert_fail@plt+0xed4>
   116d4:	ldrb	r1, [r8]
   116d8:	mvn	r1, r1
   116dc:	orr	r1, r6, r1
   116e0:	tst	r1, #1
   116e4:	beq	11e84 <__assert_fail@plt+0xe74>
   116e8:	cmp	r7, sl
   116ec:	bge	11ebc <__assert_fail@plt+0xeac>
   116f0:	cmp	r0, #0
   116f4:	beq	11738 <__assert_fail@plt+0x728>
   116f8:	add	r1, sp, #64	; 0x40
   116fc:	bl	15424 <__assert_fail@plt+0x4414>
   11700:	cmp	r0, #0
   11704:	bne	11f40 <__assert_fail@plt+0xf30>
   11708:	ldr	r0, [sp, #80]	; 0x50
   1170c:	and	r0, r0, #53248	; 0xd000
   11710:	orr	r0, r0, #8192	; 0x2000
   11714:	cmp	r0, #40960	; 0xa000
   11718:	bne	11750 <__assert_fail@plt+0x740>
   1171c:	ldr	r0, [sp, #116]	; 0x74
   11720:	cmn	r0, #1
   11724:	ble	11f5c <__assert_fail@plt+0xf4c>
   11728:	ldr	r4, [sp, #112]	; 0x70
   1172c:	ldr	r1, [sp, #36]	; 0x24
   11730:	mov	r2, r0
   11734:	b	117d4 <__assert_fail@plt+0x7c4>
   11738:	ldr	r1, [sp, #36]	; 0x24
   1173c:	ldr	r6, [sp, #44]	; 0x2c
   11740:	mvn	r0, #0
   11744:	mvn	r4, #0
   11748:	str	r0, [sp, #32]
   1174c:	b	117fc <__assert_fail@plt+0x7ec>
   11750:	movw	r0, #29012	; 0x7154
   11754:	mov	r1, #0
   11758:	movt	r0, #2
   1175c:	ldr	r0, [r0]
   11760:	bl	10ec0 <open64@plt>
   11764:	cmp	r0, #0
   11768:	blt	11f5c <__assert_fail@plt+0xf4c>
   1176c:	mov	r4, r0
   11770:	mov	r0, #2
   11774:	mov	r2, #0
   11778:	mov	r3, #0
   1177c:	mov	sl, r9
   11780:	str	r0, [sp]
   11784:	mov	r0, r4
   11788:	bl	10e78 <lseek64@plt>
   1178c:	mov	r8, r0
   11790:	mov	r5, r1
   11794:	bl	10f38 <__errno_location@plt>
   11798:	mov	r9, r0
   1179c:	ldr	r0, [r0]
   117a0:	str	r0, [sp, #56]	; 0x38
   117a4:	mov	r0, r4
   117a8:	mov	r4, r8
   117ac:	bl	11004 <close@plt>
   117b0:	mvn	r1, #0
   117b4:	subs	r0, r1, r8
   117b8:	sbcs	r0, r1, r5
   117bc:	bge	11f54 <__assert_fail@plt+0xf44>
   117c0:	ldr	r1, [sp, #36]	; 0x24
   117c4:	movw	r8, #29009	; 0x7151
   117c8:	mov	r2, r5
   117cc:	mov	r9, sl
   117d0:	movt	r8, #2
   117d4:	ands	r0, r6, #1
   117d8:	ldr	r6, [sp, #44]	; 0x2c
   117dc:	ldr	r0, [sp, #52]	; 0x34
   117e0:	moveq	r6, r2
   117e4:	moveq	r0, r4
   117e8:	str	r0, [sp, #52]	; 0x34
   117ec:	mvn	r0, #0
   117f0:	moveq	r2, r0
   117f4:	moveq	r4, r0
   117f8:	str	r2, [sp, #32]
   117fc:	movw	r0, #29008	; 0x7150
   11800:	mov	r3, r9
   11804:	ldr	r9, [r9, r7, lsl #2]
   11808:	movw	r2, #2113	; 0x841
   1180c:	movt	r0, #2
   11810:	ldrb	r0, [r0]
   11814:	cmp	r0, #0
   11818:	movwne	r2, #2049	; 0x801
   1181c:	cmp	r9, #0
   11820:	str	r2, [sp, #56]	; 0x38
   11824:	beq	11dfc <__assert_fail@plt+0xdec>
   11828:	ldr	r0, [sp, #32]
   1182c:	mov	r5, #0
   11830:	str	r4, [sp, #28]
   11834:	str	r6, [sp, #44]	; 0x2c
   11838:	cmp	r0, #0
   1183c:	mov	r0, #0
   11840:	movwlt	r0, #1
   11844:	cmp	r1, #0
   11848:	movwne	r1, #1
   1184c:	and	r0, r1, r0
   11850:	str	r0, [sp, #40]	; 0x28
   11854:	add	r0, r3, r7, lsl #2
   11858:	add	sl, r0, #4
   1185c:	add	r0, sp, #64	; 0x40
   11860:	add	r0, r0, #48	; 0x30
   11864:	str	r0, [sp, #24]
   11868:	b	11964 <__assert_fail@plt+0x954>
   1186c:	movw	r1, #23538	; 0x5bf2
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	movt	r1, #1
   1187c:	bl	10e3c <dcgettext@plt>
   11880:	mov	r4, r0
   11884:	mov	r0, #4
   11888:	mov	r1, r9
   1188c:	bl	13778 <__assert_fail@plt+0x2768>
   11890:	mov	r3, r0
   11894:	mov	r0, #0
   11898:	mov	r1, #0
   1189c:	mov	r2, r4
   118a0:	b	118e0 <__assert_fail@plt+0x8d0>
   118a4:	bl	10f38 <__errno_location@plt>
   118a8:	ldr	r4, [r0]
   118ac:	movw	r1, #22783	; 0x58ff
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #1
   118bc:	bl	10e3c <dcgettext@plt>
   118c0:	mov	r5, r0
   118c4:	mov	r0, #4
   118c8:	mov	r1, r9
   118cc:	bl	13778 <__assert_fail@plt+0x2768>
   118d0:	mov	r3, r0
   118d4:	mov	r0, #0
   118d8:	mov	r1, r4
   118dc:	mov	r2, r5
   118e0:	bl	10eb4 <error@plt>
   118e4:	movw	r8, #29009	; 0x7151
   118e8:	mov	r7, #1
   118ec:	movt	r8, #2
   118f0:	b	11d88 <__assert_fail@plt+0xd78>
   118f4:	asr	r3, r5, #31
   118f8:	mvn	r0, #0
   118fc:	mvn	r1, #-2147483648	; 0x80000000
   11900:	mov	r2, r5
   11904:	bl	1519c <__assert_fail@plt+0x418c>
   11908:	ldr	r2, [sp, #52]	; 0x34
   1190c:	ldr	r3, [sp, #60]	; 0x3c
   11910:	subs	r0, r2, r0
   11914:	sbcs	r0, r6, r1
   11918:	bge	11b30 <__assert_fail@plt+0xb20>
   1191c:	movw	r1, #23492	; 0x5bc4
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #1
   1192c:	bl	10e3c <dcgettext@plt>
   11930:	mov	r4, r0
   11934:	mov	r0, #4
   11938:	mov	r1, r9
   1193c:	bl	13778 <__assert_fail@plt+0x2768>
   11940:	ldr	r1, [sp, #52]	; 0x34
   11944:	mov	r2, r4
   11948:	stm	sp, {r1, r6}
   1194c:	str	r0, [sp, #12]
   11950:	mov	r0, #0
   11954:	mov	r1, #0
   11958:	str	r5, [sp, #8]
   1195c:	bl	10eb4 <error@plt>
   11960:	b	11d84 <__assert_fail@plt+0xd74>
   11964:	ldr	r1, [sp, #56]	; 0x38
   11968:	mov	r0, r9
   1196c:	movw	r2, #438	; 0x1b6
   11970:	bl	10ec0 <open64@plt>
   11974:	cmn	r0, #1
   11978:	ble	119f8 <__assert_fail@plt+0x9e8>
   1197c:	mov	r3, r0
   11980:	ldrb	r0, [r8]
   11984:	ldr	r1, [sp, #40]	; 0x28
   11988:	ldr	r4, [sp, #52]	; 0x34
   1198c:	str	r5, [sp, #48]	; 0x30
   11990:	mov	r5, r6
   11994:	str	r3, [sp, #60]	; 0x3c
   11998:	orr	r0, r0, r1
   1199c:	tst	r0, #1
   119a0:	beq	11b44 <__assert_fail@plt+0xb34>
   119a4:	mov	r0, r3
   119a8:	add	r1, sp, #64	; 0x40
   119ac:	bl	15434 <__assert_fail@plt+0x4424>
   119b0:	cmp	r0, #0
   119b4:	beq	11a5c <__assert_fail@plt+0xa4c>
   119b8:	bl	10f38 <__errno_location@plt>
   119bc:	ldr	r4, [r0]
   119c0:	movw	r1, #23476	; 0x5bb4
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	movt	r1, #1
   119d0:	bl	10e3c <dcgettext@plt>
   119d4:	mov	r5, r0
   119d8:	mov	r0, #4
   119dc:	mov	r1, r9
   119e0:	bl	13778 <__assert_fail@plt+0x2768>
   119e4:	mov	r3, r0
   119e8:	mov	r0, #0
   119ec:	mov	r1, r4
   119f0:	mov	r2, r5
   119f4:	b	11d80 <__assert_fail@plt+0xd70>
   119f8:	movw	r0, #29008	; 0x7150
   119fc:	movt	r0, #2
   11a00:	ldrb	r4, [r0]
   11a04:	bl	10f38 <__errno_location@plt>
   11a08:	cmp	r4, #1
   11a0c:	ldreq	r1, [r0]
   11a10:	cmpeq	r1, #2
   11a14:	beq	11dec <__assert_fail@plt+0xddc>
   11a18:	ldr	r4, [r0]
   11a1c:	movw	r1, #22809	; 0x5919
   11a20:	mov	r0, #0
   11a24:	mov	r2, #5
   11a28:	movt	r1, #1
   11a2c:	bl	10e3c <dcgettext@plt>
   11a30:	mov	r5, r0
   11a34:	mov	r0, #4
   11a38:	mov	r1, r9
   11a3c:	bl	13778 <__assert_fail@plt+0x2768>
   11a40:	mov	r3, r0
   11a44:	mov	r0, #0
   11a48:	mov	r1, r4
   11a4c:	mov	r2, r5
   11a50:	bl	10eb4 <error@plt>
   11a54:	mov	r5, #1
   11a58:	b	11dec <__assert_fail@plt+0xddc>
   11a5c:	ldrb	r0, [r8]
   11a60:	ldr	r4, [sp, #52]	; 0x34
   11a64:	ldr	r3, [sp, #60]	; 0x3c
   11a68:	mov	r5, r6
   11a6c:	cmp	r0, #1
   11a70:	bne	11b44 <__assert_fail@plt+0xb34>
   11a74:	ldr	r0, [sp, #120]	; 0x78
   11a78:	mov	r5, #512	; 0x200
   11a7c:	cmp	r0, #536870913	; 0x20000001
   11a80:	movcc	r5, r0
   11a84:	cmp	r0, #0
   11a88:	mov	r0, #512	; 0x200
   11a8c:	movle	r5, r0
   11a90:	cmn	r5, #1
   11a94:	ble	11ab8 <__assert_fail@plt+0xaa8>
   11a98:	cmp	r5, #0
   11a9c:	beq	11b30 <__assert_fail@plt+0xb20>
   11aa0:	cmn	r6, #1
   11aa4:	ble	11af4 <__assert_fail@plt+0xae4>
   11aa8:	asr	r3, r5, #31
   11aac:	mvn	r0, #0
   11ab0:	mvn	r1, #-2147483648	; 0x80000000
   11ab4:	b	11ad4 <__assert_fail@plt+0xac4>
   11ab8:	cmn	r6, #1
   11abc:	ble	118f4 <__assert_fail@plt+0x8e4>
   11ac0:	cmn	r5, #1
   11ac4:	beq	11b30 <__assert_fail@plt+0xb20>
   11ac8:	asr	r3, r5, #31
   11acc:	mov	r0, #0
   11ad0:	mov	r1, #-2147483648	; 0x80000000
   11ad4:	mov	r2, r5
   11ad8:	bl	1519c <__assert_fail@plt+0x418c>
   11adc:	ldr	r2, [sp, #52]	; 0x34
   11ae0:	ldr	r3, [sp, #60]	; 0x3c
   11ae4:	subs	r0, r0, r2
   11ae8:	sbcs	r0, r1, r6
   11aec:	blt	1191c <__assert_fail@plt+0x90c>
   11af0:	b	11b30 <__assert_fail@plt+0xb20>
   11af4:	ldr	r0, [sp, #52]	; 0x34
   11af8:	mvn	r1, #0
   11afc:	eor	r0, r0, r1
   11b00:	eor	r1, r6, r1
   11b04:	orrs	r0, r0, r1
   11b08:	beq	11b30 <__assert_fail@plt+0xb20>
   11b0c:	ldr	r2, [sp, #52]	; 0x34
   11b10:	mov	r0, #0
   11b14:	mov	r1, #-2147483648	; 0x80000000
   11b18:	mov	r3, r6
   11b1c:	bl	1519c <__assert_fail@plt+0x418c>
   11b20:	ldr	r3, [sp, #60]	; 0x3c
   11b24:	subs	r0, r0, r5
   11b28:	sbcs	r0, r1, r5, asr #31
   11b2c:	blt	1191c <__assert_fail@plt+0x90c>
   11b30:	ldr	r2, [sp, #52]	; 0x34
   11b34:	asr	r1, r5, #31
   11b38:	umull	r4, r0, r2, r5
   11b3c:	mla	r0, r2, r1, r0
   11b40:	mla	r5, r6, r5, r0
   11b44:	ldr	r1, [sp, #36]	; 0x24
   11b48:	cmp	r1, #0
   11b4c:	beq	11d08 <__assert_fail@plt+0xcf8>
   11b50:	ldr	r8, [sp, #28]
   11b54:	ldr	r6, [sp, #32]
   11b58:	mvn	r2, #0
   11b5c:	subs	r0, r2, r8
   11b60:	sbcs	r0, r2, r6
   11b64:	blt	11bc4 <__assert_fail@plt+0xbb4>
   11b68:	ldr	r0, [sp, #80]	; 0x50
   11b6c:	and	r0, r0, #53248	; 0xd000
   11b70:	orr	r0, r0, #8192	; 0x2000
   11b74:	cmp	r0, #40960	; 0xa000
   11b78:	bne	11b94 <__assert_fail@plt+0xb84>
   11b7c:	ldr	r0, [sp, #24]
   11b80:	ldr	r6, [r0, #4]
   11b84:	cmn	r6, #1
   11b88:	ble	1186c <__assert_fail@plt+0x85c>
   11b8c:	ldr	r8, [r0]
   11b90:	b	11bc4 <__assert_fail@plt+0xbb4>
   11b94:	mov	r0, #2
   11b98:	mov	r2, #0
   11b9c:	str	r0, [sp]
   11ba0:	mov	r0, r3
   11ba4:	mov	r3, #0
   11ba8:	bl	10e78 <lseek64@plt>
   11bac:	cmn	r1, #1
   11bb0:	ble	118a4 <__assert_fail@plt+0x894>
   11bb4:	mov	r6, r1
   11bb8:	ldr	r1, [sp, #36]	; 0x24
   11bbc:	ldr	r3, [sp, #60]	; 0x3c
   11bc0:	mov	r8, r0
   11bc4:	sub	r0, r1, #2
   11bc8:	cmp	r0, #3
   11bcc:	bhi	11c78 <__assert_fail@plt+0xc68>
   11bd0:	add	r1, pc, #0
   11bd4:	ldr	pc, [r1, r0, lsl #2]
   11bd8:	andeq	r1, r1, r8, ror #23
   11bdc:	andeq	r1, r1, r0, asr ip
   11be0:	strdeq	r1, [r1], -r4
   11be4:	andeq	r1, r1, ip, lsl ip
   11be8:	subs	r0, r4, r8
   11bec:	sbcs	r0, r5, r6
   11bf0:	b	11c58 <__assert_fail@plt+0xc48>
   11bf4:	mov	r7, r3
   11bf8:	mov	r0, r8
   11bfc:	mov	r1, r6
   11c00:	mov	r2, r4
   11c04:	mov	r3, r5
   11c08:	bl	1519c <__assert_fail@plt+0x418c>
   11c0c:	subs	r4, r8, r2
   11c10:	sbc	r5, r6, r3
   11c14:	mov	r3, r7
   11c18:	b	11c6c <__assert_fail@plt+0xc5c>
   11c1c:	mov	r7, r3
   11c20:	mov	r0, r8
   11c24:	mov	r1, r6
   11c28:	mov	r2, r4
   11c2c:	mov	r3, r5
   11c30:	bl	1519c <__assert_fail@plt+0x418c>
   11c34:	subs	r4, r4, r2
   11c38:	sbc	r0, r5, r3
   11c3c:	orrs	r1, r2, r3
   11c40:	mov	r3, r7
   11c44:	moveq	r4, r1
   11c48:	moveq	r0, r1
   11c4c:	b	11c7c <__assert_fail@plt+0xc6c>
   11c50:	subs	r0, r8, r4
   11c54:	sbcs	r0, r6, r5
   11c58:	mov	r0, #0
   11c5c:	movwlt	r0, #1
   11c60:	cmp	r0, #0
   11c64:	movne	r5, r6
   11c68:	movne	r4, r8
   11c6c:	movw	r8, #29009	; 0x7151
   11c70:	movt	r8, #2
   11c74:	b	11d08 <__assert_fail@plt+0xcf8>
   11c78:	mov	r0, r5
   11c7c:	cmn	r6, #1
   11c80:	mov	r1, #0
   11c84:	mov	r2, #0
   11c88:	movwgt	r1, #1
   11c8c:	adds	r4, r8, r4
   11c90:	movw	r8, #29009	; 0x7151
   11c94:	adc	r5, r6, r0
   11c98:	movt	r8, #2
   11c9c:	cmn	r5, #1
   11ca0:	movwgt	r2, #1
   11ca4:	subs	r2, r1, r2
   11ca8:	movwne	r2, #1
   11cac:	cmn	r0, #1
   11cb0:	mov	r0, #0
   11cb4:	movwgt	r0, #1
   11cb8:	sub	r0, r1, r0
   11cbc:	clz	r0, r0
   11cc0:	lsr	r0, r0, #5
   11cc4:	and	r0, r0, r2
   11cc8:	cmp	r0, #1
   11ccc:	bne	11d08 <__assert_fail@plt+0xcf8>
   11cd0:	movw	r1, #23580	; 0x5c1c
   11cd4:	mov	r0, #0
   11cd8:	mov	r2, #5
   11cdc:	movt	r1, #1
   11ce0:	bl	10e3c <dcgettext@plt>
   11ce4:	mov	r4, r0
   11ce8:	mov	r0, #4
   11cec:	mov	r1, r9
   11cf0:	bl	13778 <__assert_fail@plt+0x2768>
   11cf4:	mov	r3, r0
   11cf8:	mov	r0, #0
   11cfc:	mov	r1, #0
   11d00:	mov	r2, r4
   11d04:	b	11d80 <__assert_fail@plt+0xd70>
   11d08:	rsbs	r0, r4, #0
   11d0c:	mov	r6, #0
   11d10:	mov	r7, #0
   11d14:	rscs	r0, r5, #0
   11d18:	movwlt	r6, #1
   11d1c:	mov	r0, r3
   11d20:	cmp	r6, #0
   11d24:	moveq	r4, r6
   11d28:	movne	r6, r5
   11d2c:	mov	r2, r4
   11d30:	mov	r3, r6
   11d34:	bl	10e24 <ftruncate64@plt>
   11d38:	cmp	r0, #0
   11d3c:	beq	11d88 <__assert_fail@plt+0xd78>
   11d40:	bl	10f38 <__errno_location@plt>
   11d44:	ldr	r5, [r0]
   11d48:	movw	r1, #23615	; 0x5c3f
   11d4c:	mov	r0, #0
   11d50:	mov	r2, #5
   11d54:	movt	r1, #1
   11d58:	bl	10e3c <dcgettext@plt>
   11d5c:	mov	r7, r0
   11d60:	mov	r0, #4
   11d64:	mov	r1, r9
   11d68:	bl	13778 <__assert_fail@plt+0x2768>
   11d6c:	mov	r3, r0
   11d70:	mov	r0, #0
   11d74:	mov	r1, r5
   11d78:	mov	r2, r7
   11d7c:	stm	sp, {r4, r6}
   11d80:	bl	10eb4 <error@plt>
   11d84:	mov	r7, #1
   11d88:	ldr	r0, [sp, #60]	; 0x3c
   11d8c:	bl	11004 <close@plt>
   11d90:	cmp	r0, #0
   11d94:	beq	11de0 <__assert_fail@plt+0xdd0>
   11d98:	bl	10f38 <__errno_location@plt>
   11d9c:	ldr	r4, [r0]
   11da0:	movw	r1, #22836	; 0x5934
   11da4:	mov	r0, #0
   11da8:	mov	r2, #5
   11dac:	movt	r1, #1
   11db0:	bl	10e3c <dcgettext@plt>
   11db4:	mov	r5, r0
   11db8:	mov	r0, #4
   11dbc:	mov	r1, r9
   11dc0:	bl	13778 <__assert_fail@plt+0x2768>
   11dc4:	mov	r3, r0
   11dc8:	mov	r0, #0
   11dcc:	mov	r1, r4
   11dd0:	mov	r2, r5
   11dd4:	bl	10eb4 <error@plt>
   11dd8:	mov	r5, #1
   11ddc:	b	11de8 <__assert_fail@plt+0xdd8>
   11de0:	ldr	r5, [sp, #48]	; 0x30
   11de4:	orr	r5, r5, r7
   11de8:	ldr	r6, [sp, #44]	; 0x2c
   11dec:	ldr	r9, [sl], #4
   11df0:	cmp	r9, #0
   11df4:	bne	11964 <__assert_fail@plt+0x954>
   11df8:	b	11e00 <__assert_fail@plt+0xdf0>
   11dfc:	mov	r5, #0
   11e00:	and	r0, r5, #1
   11e04:	sub	sp, fp, #28
   11e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e0c:	cmn	r0, #3
   11e10:	bne	11e5c <__assert_fail@plt+0xe4c>
   11e14:	movw	r0, #28904	; 0x70e8
   11e18:	movw	r2, #22598	; 0x5846
   11e1c:	mov	r1, #0
   11e20:	movt	r0, #2
   11e24:	movt	r2, #1
   11e28:	str	r1, [sp, #4]
   11e2c:	movw	r1, #22460	; 0x57bc
   11e30:	ldr	r3, [r0]
   11e34:	movw	r0, #28996	; 0x7144
   11e38:	str	r2, [sp]
   11e3c:	movw	r2, #22584	; 0x5838
   11e40:	movt	r1, #1
   11e44:	movt	r0, #2
   11e48:	movt	r2, #1
   11e4c:	ldr	r0, [r0]
   11e50:	bl	13f9c <__assert_fail@plt+0x2f8c>
   11e54:	mov	r0, #0
   11e58:	bl	10f14 <exit@plt>
   11e5c:	cmn	r0, #2
   11e60:	bne	11f38 <__assert_fail@plt+0xf28>
   11e64:	mov	r0, #0
   11e68:	bl	1110c <__assert_fail@plt+0xfc>
   11e6c:	movw	r1, #22500	; 0x57e4
   11e70:	movt	r1, #1
   11e74:	b	11ec4 <__assert_fail@plt+0xeb4>
   11e78:	movw	r1, #22612	; 0x5854
   11e7c:	movt	r1, #1
   11e80:	b	11eec <__assert_fail@plt+0xedc>
   11e84:	movw	r1, #22703	; 0x58af
   11e88:	mov	r0, #0
   11e8c:	mov	r2, #5
   11e90:	movt	r1, #1
   11e94:	bl	10e3c <dcgettext@plt>
   11e98:	movw	r1, #22735	; 0x58cf
   11e9c:	mov	r4, r0
   11ea0:	mov	r0, #0
   11ea4:	movt	r1, #1
   11ea8:	bl	13aa0 <__assert_fail@plt+0x2a90>
   11eac:	movw	r1, #22645	; 0x5875
   11eb0:	mov	r5, r0
   11eb4:	movt	r1, #1
   11eb8:	b	11f18 <__assert_fail@plt+0xf08>
   11ebc:	movw	r1, #22747	; 0x58db
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	bl	10e3c <dcgettext@plt>
   11ed0:	mov	r2, r0
   11ed4:	mov	r0, #0
   11ed8:	mov	r1, #0
   11edc:	bl	10eb4 <error@plt>
   11ee0:	b	11f38 <__assert_fail@plt+0xf28>
   11ee4:	movw	r1, #22664	; 0x5888
   11ee8:	movt	r1, #1
   11eec:	mov	r0, #0
   11ef0:	mov	r2, #5
   11ef4:	bl	10e3c <dcgettext@plt>
   11ef8:	movw	r1, #22645	; 0x5875
   11efc:	mov	r4, r0
   11f00:	mov	r0, #0
   11f04:	movt	r1, #1
   11f08:	bl	13aa0 <__assert_fail@plt+0x2a90>
   11f0c:	movw	r1, #22652	; 0x587c
   11f10:	mov	r5, r0
   11f14:	movt	r1, #1
   11f18:	mov	r0, #1
   11f1c:	bl	13aa0 <__assert_fail@plt+0x2a90>
   11f20:	str	r0, [sp]
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	mov	r2, r4
   11f30:	mov	r3, r5
   11f34:	bl	10eb4 <error@plt>
   11f38:	mov	r0, #1
   11f3c:	bl	1110c <__assert_fail@plt+0xfc>
   11f40:	bl	10f38 <__errno_location@plt>
   11f44:	ldr	r4, [r0]
   11f48:	movw	r1, #22768	; 0x58f0
   11f4c:	movt	r1, #1
   11f50:	b	11f6c <__assert_fail@plt+0xf5c>
   11f54:	ldr	r0, [sp, #56]	; 0x38
   11f58:	str	r0, [r9]
   11f5c:	bl	10f38 <__errno_location@plt>
   11f60:	ldr	r4, [r0]
   11f64:	movw	r1, #22783	; 0x58ff
   11f68:	movt	r1, #1
   11f6c:	mov	r0, #0
   11f70:	mov	r2, #5
   11f74:	bl	10e3c <dcgettext@plt>
   11f78:	mov	r5, r0
   11f7c:	movw	r0, #29012	; 0x7154
   11f80:	movt	r0, #2
   11f84:	ldr	r1, [r0]
   11f88:	mov	r0, #4
   11f8c:	bl	13778 <__assert_fail@plt+0x2768>
   11f90:	mov	r3, r0
   11f94:	mov	r0, #1
   11f98:	mov	r1, r4
   11f9c:	mov	r2, r5
   11fa0:	bl	10eb4 <error@plt>
   11fa4:	movw	r1, #29016	; 0x7158
   11fa8:	movt	r1, #2
   11fac:	str	r0, [r1]
   11fb0:	bx	lr
   11fb4:	movw	r1, #29020	; 0x715c
   11fb8:	movt	r1, #2
   11fbc:	strb	r0, [r1]
   11fc0:	bx	lr
   11fc4:	push	{r4, r5, r6, sl, fp, lr}
   11fc8:	add	fp, sp, #16
   11fcc:	sub	sp, sp, #8
   11fd0:	movw	r0, #28996	; 0x7144
   11fd4:	movt	r0, #2
   11fd8:	ldr	r0, [r0]
   11fdc:	bl	14d8c <__assert_fail@plt+0x3d7c>
   11fe0:	cmp	r0, #0
   11fe4:	beq	1200c <__assert_fail@plt+0xffc>
   11fe8:	movw	r0, #29020	; 0x715c
   11fec:	movt	r0, #2
   11ff0:	ldrb	r0, [r0]
   11ff4:	cmp	r0, #0
   11ff8:	beq	1202c <__assert_fail@plt+0x101c>
   11ffc:	bl	10f38 <__errno_location@plt>
   12000:	ldr	r0, [r0]
   12004:	cmp	r0, #32
   12008:	bne	1202c <__assert_fail@plt+0x101c>
   1200c:	movw	r0, #28992	; 0x7140
   12010:	movt	r0, #2
   12014:	ldr	r0, [r0]
   12018:	bl	14d8c <__assert_fail@plt+0x3d7c>
   1201c:	cmp	r0, #0
   12020:	subeq	sp, fp, #16
   12024:	popeq	{r4, r5, r6, sl, fp, pc}
   12028:	b	1209c <__assert_fail@plt+0x108c>
   1202c:	movw	r1, #23839	; 0x5d1f
   12030:	mov	r0, #0
   12034:	mov	r2, #5
   12038:	movt	r1, #1
   1203c:	bl	10e3c <dcgettext@plt>
   12040:	mov	r4, r0
   12044:	movw	r0, #29016	; 0x7158
   12048:	movt	r0, #2
   1204c:	ldr	r6, [r0]
   12050:	bl	10f38 <__errno_location@plt>
   12054:	ldr	r5, [r0]
   12058:	cmp	r6, #0
   1205c:	bne	12078 <__assert_fail@plt+0x1068>
   12060:	movw	r2, #23855	; 0x5d2f
   12064:	mov	r0, #0
   12068:	mov	r1, r5
   1206c:	mov	r3, r4
   12070:	movt	r2, #1
   12074:	b	12098 <__assert_fail@plt+0x1088>
   12078:	mov	r0, r6
   1207c:	bl	13870 <__assert_fail@plt+0x2860>
   12080:	movw	r2, #23851	; 0x5d2b
   12084:	mov	r3, r0
   12088:	str	r4, [sp]
   1208c:	mov	r0, #0
   12090:	mov	r1, r5
   12094:	movt	r2, #1
   12098:	bl	10eb4 <error@plt>
   1209c:	movw	r0, #28908	; 0x70ec
   120a0:	movt	r0, #2
   120a4:	ldr	r0, [r0]
   120a8:	bl	10e00 <_exit@plt>
   120ac:	push	{r4, r5, fp, lr}
   120b0:	add	fp, sp, #8
   120b4:	cmp	r0, #0
   120b8:	beq	1214c <__assert_fail@plt+0x113c>
   120bc:	mov	r1, #47	; 0x2f
   120c0:	mov	r4, r0
   120c4:	bl	10fb0 <strrchr@plt>
   120c8:	cmp	r0, #0
   120cc:	mov	r5, r4
   120d0:	addne	r5, r0, #1
   120d4:	sub	r0, r5, r4
   120d8:	cmp	r0, #7
   120dc:	blt	12130 <__assert_fail@plt+0x1120>
   120e0:	movw	r1, #23914	; 0x5d6a
   120e4:	sub	r0, r5, #7
   120e8:	mov	r2, #7
   120ec:	movt	r1, #1
   120f0:	bl	10fec <strncmp@plt>
   120f4:	cmp	r0, #0
   120f8:	bne	12130 <__assert_fail@plt+0x1120>
   120fc:	movw	r1, #23922	; 0x5d72
   12100:	mov	r0, r5
   12104:	mov	r2, #3
   12108:	movt	r1, #1
   1210c:	bl	10fec <strncmp@plt>
   12110:	cmp	r0, #0
   12114:	beq	12120 <__assert_fail@plt+0x1110>
   12118:	mov	r4, r5
   1211c:	b	12130 <__assert_fail@plt+0x1120>
   12120:	movw	r0, #28976	; 0x7130
   12124:	add	r4, r5, #3
   12128:	movt	r0, #2
   1212c:	str	r4, [r0]
   12130:	movw	r0, #28980	; 0x7134
   12134:	movt	r0, #2
   12138:	str	r4, [r0]
   1213c:	movw	r0, #29024	; 0x7160
   12140:	movt	r0, #2
   12144:	str	r4, [r0]
   12148:	pop	{r4, r5, fp, pc}
   1214c:	movw	r0, #28992	; 0x7140
   12150:	movt	r0, #2
   12154:	ldr	r1, [r0]
   12158:	movw	r0, #23858	; 0x5d32
   1215c:	movt	r0, #1
   12160:	bl	10fe0 <fputs@plt>
   12164:	bl	10ff8 <abort@plt>
   12168:	push	{r4, r5, r6, sl, fp, lr}
   1216c:	add	fp, sp, #16
   12170:	mov	r4, r0
   12174:	movw	r0, #29032	; 0x7168
   12178:	movt	r0, #2
   1217c:	cmp	r4, #0
   12180:	moveq	r4, r0
   12184:	bl	10f38 <__errno_location@plt>
   12188:	ldr	r6, [r0]
   1218c:	mov	r5, r0
   12190:	mov	r0, r4
   12194:	mov	r1, #48	; 0x30
   12198:	bl	143f4 <__assert_fail@plt+0x33e4>
   1219c:	str	r6, [r5]
   121a0:	pop	{r4, r5, r6, sl, fp, pc}
   121a4:	movw	r1, #29032	; 0x7168
   121a8:	cmp	r0, #0
   121ac:	movt	r1, #2
   121b0:	movne	r1, r0
   121b4:	ldr	r0, [r1]
   121b8:	bx	lr
   121bc:	movw	r2, #29032	; 0x7168
   121c0:	cmp	r0, #0
   121c4:	movt	r2, #2
   121c8:	movne	r2, r0
   121cc:	str	r1, [r2]
   121d0:	bx	lr
   121d4:	movw	r3, #29032	; 0x7168
   121d8:	cmp	r0, #0
   121dc:	movt	r3, #2
   121e0:	movne	r3, r0
   121e4:	ubfx	r0, r1, #5, #3
   121e8:	and	r1, r1, #31
   121ec:	add	r0, r3, r0, lsl #2
   121f0:	ldr	r3, [r0, #8]
   121f4:	eor	r2, r2, r3, lsr r1
   121f8:	and	r2, r2, #1
   121fc:	eor	r2, r3, r2, lsl r1
   12200:	str	r2, [r0, #8]
   12204:	mov	r0, #1
   12208:	and	r0, r0, r3, lsr r1
   1220c:	bx	lr
   12210:	movw	r2, #29032	; 0x7168
   12214:	cmp	r0, #0
   12218:	movt	r2, #2
   1221c:	movne	r2, r0
   12220:	ldr	r0, [r2, #4]
   12224:	str	r1, [r2, #4]
   12228:	bx	lr
   1222c:	movw	r3, #29032	; 0x7168
   12230:	cmp	r0, #0
   12234:	movt	r3, #2
   12238:	movne	r3, r0
   1223c:	cmp	r1, #0
   12240:	mov	r0, #10
   12244:	cmpne	r2, #0
   12248:	str	r0, [r3]
   1224c:	bne	1225c <__assert_fail@plt+0x124c>
   12250:	push	{fp, lr}
   12254:	mov	fp, sp
   12258:	bl	10ff8 <abort@plt>
   1225c:	str	r1, [r3, #40]	; 0x28
   12260:	str	r2, [r3, #44]	; 0x2c
   12264:	bx	lr
   12268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1226c:	add	fp, sp, #28
   12270:	sub	sp, sp, #20
   12274:	mov	r7, r0
   12278:	ldr	r0, [fp, #8]
   1227c:	movw	r5, #29032	; 0x7168
   12280:	mov	r8, r3
   12284:	mov	r9, r2
   12288:	mov	sl, r1
   1228c:	movt	r5, #2
   12290:	cmp	r0, #0
   12294:	movne	r5, r0
   12298:	bl	10f38 <__errno_location@plt>
   1229c:	mov	r4, r0
   122a0:	ldm	r5, {r0, r1}
   122a4:	ldr	r2, [r5, #40]	; 0x28
   122a8:	ldr	r3, [r5, #44]	; 0x2c
   122ac:	add	r5, r5, #8
   122b0:	ldr	r6, [r4]
   122b4:	stm	sp, {r0, r1, r5}
   122b8:	str	r2, [sp, #12]
   122bc:	str	r3, [sp, #16]
   122c0:	mov	r0, r7
   122c4:	mov	r1, sl
   122c8:	mov	r2, r9
   122cc:	mov	r3, r8
   122d0:	bl	122e0 <__assert_fail@plt+0x12d0>
   122d4:	str	r6, [r4]
   122d8:	sub	sp, fp, #28
   122dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e4:	add	fp, sp, #28
   122e8:	sub	sp, sp, #156	; 0x9c
   122ec:	str	r0, [fp, #-56]	; 0xffffffc8
   122f0:	ldr	r0, [fp, #12]
   122f4:	mov	r4, r1
   122f8:	str	r3, [sp, #80]	; 0x50
   122fc:	str	r2, [fp, #-84]	; 0xffffffac
   12300:	and	r1, r0, #4
   12304:	str	r1, [sp, #24]
   12308:	and	r1, r0, #1
   1230c:	str	r1, [sp, #28]
   12310:	ubfx	r7, r0, #1, #1
   12314:	bl	10e84 <__ctype_get_mb_cur_max@plt>
   12318:	str	r0, [sp, #32]
   1231c:	ldr	r0, [fp, #24]
   12320:	ldr	r9, [fp, #8]
   12324:	mov	r2, #0
   12328:	mov	r1, #0
   1232c:	mov	r5, #0
   12330:	str	r2, [sp, #52]	; 0x34
   12334:	mov	r2, #1
   12338:	str	r0, [sp, #72]	; 0x48
   1233c:	ldr	r0, [fp, #20]
   12340:	str	r0, [sp, #64]	; 0x40
   12344:	mov	r0, #0
   12348:	str	r0, [sp, #92]	; 0x5c
   1234c:	mov	r0, #0
   12350:	str	r0, [fp, #-76]	; 0xffffffb4
   12354:	mov	r0, #0
   12358:	cmp	r9, #10
   1235c:	str	r1, [sp, #68]	; 0x44
   12360:	bhi	13360 <__assert_fail@plt+0x2350>
   12364:	add	r1, pc, #28
   12368:	ldr	ip, [fp, #-84]	; 0xffffffac
   1236c:	ldr	lr, [sp, #80]	; 0x50
   12370:	mov	r6, r4
   12374:	mov	r8, #0
   12378:	mov	r3, #1
   1237c:	mov	sl, #0
   12380:	mov	r4, r2
   12384:	ldr	pc, [r1, r9, lsl #2]
   12388:	andeq	r2, r1, r8, asr r4
   1238c:	muleq	r1, r4, r4
   12390:	andeq	r2, r1, r8, ror #8
   12394:	andeq	r2, r1, r0, asr r4
   12398:	andeq	r2, r1, r8, lsl #9
   1239c:	andeq	r2, r1, r0, ror #9
   123a0:	andeq	r2, r1, r8, ror r4
   123a4:	andeq	r2, r1, r0, asr #10
   123a8:			; <UNDEFINED> instruction: 0x000123b4
   123ac:			; <UNDEFINED> instruction: 0x000123b4
   123b0:	ldrdeq	r2, [r1], -ip
   123b4:	movw	r0, #24004	; 0x5dc4
   123b8:	mov	r1, r9
   123bc:	movt	r0, #1
   123c0:	bl	13ac8 <__assert_fail@plt+0x2ab8>
   123c4:	str	r0, [sp, #64]	; 0x40
   123c8:	movw	r0, #24006	; 0x5dc6
   123cc:	mov	r1, r9
   123d0:	movt	r0, #1
   123d4:	bl	13ac8 <__assert_fail@plt+0x2ab8>
   123d8:	str	r0, [sp, #72]	; 0x48
   123dc:	mov	r8, #0
   123e0:	mov	sl, r7
   123e4:	tst	r7, #1
   123e8:	str	r5, [fp, #-48]	; 0xffffffd0
   123ec:	bne	12428 <__assert_fail@plt+0x1418>
   123f0:	ldr	r0, [sp, #64]	; 0x40
   123f4:	ldrb	r0, [r0]
   123f8:	cmp	r0, #0
   123fc:	beq	12428 <__assert_fail@plt+0x1418>
   12400:	ldr	r1, [sp, #64]	; 0x40
   12404:	mov	r8, #0
   12408:	add	r1, r1, #1
   1240c:	cmp	r8, r6
   12410:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12414:	strbcc	r0, [r2, r8]
   12418:	ldrb	r0, [r1, r8]
   1241c:	add	r8, r8, #1
   12420:	cmp	r0, #0
   12424:	bne	1240c <__assert_fail@plt+0x13fc>
   12428:	ldr	r7, [sp, #72]	; 0x48
   1242c:	mov	r0, r7
   12430:	bl	10f20 <strlen@plt>
   12434:	ldr	ip, [fp, #-84]	; 0xffffffac
   12438:	ldr	lr, [sp, #80]	; 0x50
   1243c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12440:	str	r0, [fp, #-76]	; 0xffffffb4
   12444:	str	r7, [sp, #92]	; 0x5c
   12448:	mov	r3, #1
   1244c:	b	12540 <__assert_fail@plt+0x1530>
   12450:	mov	r0, #1
   12454:	b	12494 <__assert_fail@plt+0x1484>
   12458:	mov	r9, #0
   1245c:	mov	r8, #0
   12460:	mov	r3, r0
   12464:	b	1253c <__assert_fail@plt+0x152c>
   12468:	tst	r7, #1
   1246c:	bne	12494 <__assert_fail@plt+0x1484>
   12470:	mov	r3, r0
   12474:	b	124bc <__assert_fail@plt+0x14ac>
   12478:	mov	r0, #1
   1247c:	mov	r8, #0
   12480:	mov	r9, #5
   12484:	b	124f4 <__assert_fail@plt+0x14e4>
   12488:	mov	r3, #1
   1248c:	tst	r7, #1
   12490:	beq	124bc <__assert_fail@plt+0x14ac>
   12494:	mov	r1, #1
   12498:	mov	r8, #0
   1249c:	mov	r9, #2
   124a0:	mov	r3, r0
   124a4:	mov	sl, #1
   124a8:	str	r1, [fp, #-76]	; 0xffffffb4
   124ac:	movw	r1, #24006	; 0x5dc6
   124b0:	movt	r1, #1
   124b4:	str	r1, [sp, #92]	; 0x5c
   124b8:	b	12540 <__assert_fail@plt+0x1530>
   124bc:	cmp	r6, #0
   124c0:	mov	r8, #1
   124c4:	mov	r9, #2
   124c8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   124cc:	movne	r0, #39	; 0x27
   124d0:	strbne	r0, [r1]
   124d4:	movw	r0, #24006	; 0x5dc6
   124d8:	movt	r0, #1
   124dc:	b	12530 <__assert_fail@plt+0x1520>
   124e0:	mov	r9, #5
   124e4:	tst	r7, #1
   124e8:	beq	12510 <__assert_fail@plt+0x1500>
   124ec:	mov	r0, #1
   124f0:	mov	r8, #0
   124f4:	str	r0, [fp, #-76]	; 0xffffffb4
   124f8:	movw	r0, #24002	; 0x5dc2
   124fc:	mov	r3, #1
   12500:	mov	sl, #1
   12504:	movt	r0, #1
   12508:	str	r0, [sp, #92]	; 0x5c
   1250c:	b	12540 <__assert_fail@plt+0x1530>
   12510:	cmp	r6, #0
   12514:	mov	r8, #1
   12518:	mov	r3, #1
   1251c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12520:	movne	r0, #34	; 0x22
   12524:	strbne	r0, [r1]
   12528:	movw	r0, #24002	; 0x5dc2
   1252c:	movt	r0, #1
   12530:	str	r0, [sp, #92]	; 0x5c
   12534:	mov	r0, #1
   12538:	str	r0, [fp, #-76]	; 0xffffffb4
   1253c:	mov	sl, #0
   12540:	ldr	r0, [fp, #16]
   12544:	mov	r7, #0
   12548:	str	r9, [fp, #-64]	; 0xffffffc0
   1254c:	str	sl, [fp, #-72]	; 0xffffffb8
   12550:	str	r3, [sp, #84]	; 0x54
   12554:	cmp	r0, #0
   12558:	movwne	r0, #1
   1255c:	and	r0, r0, sl
   12560:	str	r0, [fp, #-88]	; 0xffffffa8
   12564:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12568:	cmp	r0, #0
   1256c:	movwne	r0, #1
   12570:	subs	r2, r9, #2
   12574:	and	r1, r0, sl
   12578:	str	r2, [fp, #-80]	; 0xffffffb0
   1257c:	and	r1, r3, r1
   12580:	str	r1, [sp, #44]	; 0x2c
   12584:	clz	r1, r2
   12588:	lsr	r1, r1, #5
   1258c:	and	r1, r1, sl
   12590:	str	r1, [sp, #56]	; 0x38
   12594:	mov	r1, r2
   12598:	eor	r2, sl, #1
   1259c:	movwne	r1, #1
   125a0:	str	r2, [sp, #88]	; 0x58
   125a4:	orr	r2, r1, r2
   125a8:	and	r1, r1, r3
   125ac:	and	r0, r0, r1
   125b0:	str	r2, [sp, #60]	; 0x3c
   125b4:	str	r1, [fp, #-68]	; 0xffffffbc
   125b8:	str	r0, [fp, #-60]	; 0xffffffc4
   125bc:	eor	r0, r3, #1
   125c0:	str	r0, [sp, #48]	; 0x30
   125c4:	cmn	lr, #1
   125c8:	beq	125d8 <__assert_fail@plt+0x15c8>
   125cc:	cmp	r7, lr
   125d0:	bne	125e4 <__assert_fail@plt+0x15d4>
   125d4:	b	13190 <__assert_fail@plt+0x2180>
   125d8:	ldrb	r0, [ip, r7]
   125dc:	cmp	r0, #0
   125e0:	beq	13198 <__assert_fail@plt+0x2188>
   125e4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   125e8:	mov	r9, #0
   125ec:	str	r5, [fp, #-48]	; 0xffffffd0
   125f0:	str	r6, [fp, #-52]	; 0xffffffcc
   125f4:	cmp	r0, #0
   125f8:	beq	12638 <__assert_fail@plt+0x1628>
   125fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12600:	mov	r5, r4
   12604:	add	r4, r7, r0
   12608:	cmp	r0, #2
   1260c:	bcc	12628 <__assert_fail@plt+0x1618>
   12610:	cmn	lr, #1
   12614:	bne	12628 <__assert_fail@plt+0x1618>
   12618:	mov	r0, ip
   1261c:	bl	10f20 <strlen@plt>
   12620:	ldr	ip, [fp, #-84]	; 0xffffffac
   12624:	mov	lr, r0
   12628:	cmp	r4, lr
   1262c:	bls	12640 <__assert_fail@plt+0x1630>
   12630:	mov	r6, #0
   12634:	b	12680 <__assert_fail@plt+0x1670>
   12638:	mov	r6, #0
   1263c:	b	12684 <__assert_fail@plt+0x1674>
   12640:	ldr	r1, [sp, #92]	; 0x5c
   12644:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12648:	add	r0, ip, r7
   1264c:	mov	r4, lr
   12650:	bl	10e30 <memcmp@plt>
   12654:	ldr	r2, [sp, #88]	; 0x58
   12658:	cmp	r0, #0
   1265c:	mov	r1, r0
   12660:	movwne	r1, #1
   12664:	orr	r1, r1, r2
   12668:	tst	r1, #1
   1266c:	beq	1322c <__assert_fail@plt+0x221c>
   12670:	ldr	ip, [fp, #-84]	; 0xffffffac
   12674:	clz	r0, r0
   12678:	mov	lr, r4
   1267c:	lsr	r6, r0, #5
   12680:	mov	r4, r5
   12684:	ldrb	r5, [ip, r7]
   12688:	cmp	r5, #126	; 0x7e
   1268c:	bhi	12a54 <__assert_fail@plt+0x1a44>
   12690:	add	r3, pc, #16
   12694:	mov	sl, #1
   12698:	mov	r2, #110	; 0x6e
   1269c:	mov	r0, #97	; 0x61
   126a0:	mov	r1, #0
   126a4:	ldr	pc, [r3, r5, lsl #2]
   126a8:	andeq	r2, r1, r8, lsr r9
   126ac:	andeq	r2, r1, r4, asr sl
   126b0:	andeq	r2, r1, r4, asr sl
   126b4:	andeq	r2, r1, r4, asr sl
   126b8:	andeq	r2, r1, r4, asr sl
   126bc:	andeq	r2, r1, r4, asr sl
   126c0:	andeq	r2, r1, r4, asr sl
   126c4:	strdeq	r2, [r1], -r8
   126c8:	andeq	r2, r1, r8, lsl r9
   126cc:	andeq	r2, r1, r0, lsl r9
   126d0:	andeq	r2, r1, r4, lsr #18
   126d4:	andeq	r2, r1, r8, lsr #19
   126d8:	andeq	r2, r1, r8, lsl #18
   126dc:	andeq	r2, r1, r0, lsr #18
   126e0:	andeq	r2, r1, r4, asr sl
   126e4:	andeq	r2, r1, r4, asr sl
   126e8:	andeq	r2, r1, r4, asr sl
   126ec:	andeq	r2, r1, r4, asr sl
   126f0:	andeq	r2, r1, r4, asr sl
   126f4:	andeq	r2, r1, r4, asr sl
   126f8:	andeq	r2, r1, r4, asr sl
   126fc:	andeq	r2, r1, r4, asr sl
   12700:	andeq	r2, r1, r4, asr sl
   12704:	andeq	r2, r1, r4, asr sl
   12708:	andeq	r2, r1, r4, asr sl
   1270c:	andeq	r2, r1, r4, asr sl
   12710:	andeq	r2, r1, r4, asr sl
   12714:	andeq	r2, r1, r4, asr sl
   12718:	andeq	r2, r1, r4, asr sl
   1271c:	andeq	r2, r1, r4, asr sl
   12720:	andeq	r2, r1, r4, asr sl
   12724:	andeq	r2, r1, r4, asr sl
   12728:			; <UNDEFINED> instruction: 0x00012ab8
   1272c:			; <UNDEFINED> instruction: 0x00012abc
   12730:			; <UNDEFINED> instruction: 0x00012abc
   12734:			; <UNDEFINED> instruction: 0x000128b8
   12738:			; <UNDEFINED> instruction: 0x00012abc
   1273c:	andeq	r2, r1, r4, lsr #17
   12740:			; <UNDEFINED> instruction: 0x00012abc
   12744:			; <UNDEFINED> instruction: 0x000129b0
   12748:			; <UNDEFINED> instruction: 0x00012abc
   1274c:			; <UNDEFINED> instruction: 0x00012abc
   12750:			; <UNDEFINED> instruction: 0x00012abc
   12754:	andeq	r2, r1, r4, lsr #17
   12758:	andeq	r2, r1, r4, lsr #17
   1275c:	andeq	r2, r1, r4, lsr #17
   12760:	andeq	r2, r1, r4, lsr #17
   12764:	andeq	r2, r1, r4, lsr #17
   12768:	andeq	r2, r1, r4, lsr #17
   1276c:	andeq	r2, r1, r4, lsr #17
   12770:	andeq	r2, r1, r4, lsr #17
   12774:	andeq	r2, r1, r4, lsr #17
   12778:	andeq	r2, r1, r4, lsr #17
   1277c:	andeq	r2, r1, r4, lsr #17
   12780:	andeq	r2, r1, r4, lsr #17
   12784:	andeq	r2, r1, r4, lsr #17
   12788:	andeq	r2, r1, r4, lsr #17
   1278c:	andeq	r2, r1, r4, lsr #17
   12790:	andeq	r2, r1, r4, lsr #17
   12794:			; <UNDEFINED> instruction: 0x00012abc
   12798:			; <UNDEFINED> instruction: 0x00012abc
   1279c:			; <UNDEFINED> instruction: 0x00012abc
   127a0:			; <UNDEFINED> instruction: 0x00012abc
   127a4:	andeq	r2, r1, ip, ror r9
   127a8:	andeq	r2, r1, r4, asr sl
   127ac:	andeq	r2, r1, r4, lsr #17
   127b0:	andeq	r2, r1, r4, lsr #17
   127b4:	andeq	r2, r1, r4, lsr #17
   127b8:	andeq	r2, r1, r4, lsr #17
   127bc:	andeq	r2, r1, r4, lsr #17
   127c0:	andeq	r2, r1, r4, lsr #17
   127c4:	andeq	r2, r1, r4, lsr #17
   127c8:	andeq	r2, r1, r4, lsr #17
   127cc:	andeq	r2, r1, r4, lsr #17
   127d0:	andeq	r2, r1, r4, lsr #17
   127d4:	andeq	r2, r1, r4, lsr #17
   127d8:	andeq	r2, r1, r4, lsr #17
   127dc:	andeq	r2, r1, r4, lsr #17
   127e0:	andeq	r2, r1, r4, lsr #17
   127e4:	andeq	r2, r1, r4, lsr #17
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r2, r1, r4, lsr #17
   127f0:	andeq	r2, r1, r4, lsr #17
   127f4:	andeq	r2, r1, r4, lsr #17
   127f8:	andeq	r2, r1, r4, lsr #17
   127fc:	andeq	r2, r1, r4, lsr #17
   12800:	andeq	r2, r1, r4, lsr #17
   12804:	andeq	r2, r1, r4, lsr #17
   12808:	andeq	r2, r1, r4, lsr #17
   1280c:	andeq	r2, r1, r4, lsr #17
   12810:	andeq	r2, r1, r4, lsr #17
   12814:			; <UNDEFINED> instruction: 0x00012abc
   12818:	andeq	r2, r1, r4, ror #17
   1281c:	andeq	r2, r1, r4, lsr #17
   12820:			; <UNDEFINED> instruction: 0x00012abc
   12824:	andeq	r2, r1, r4, lsr #17
   12828:			; <UNDEFINED> instruction: 0x00012abc
   1282c:	andeq	r2, r1, r4, lsr #17
   12830:	andeq	r2, r1, r4, lsr #17
   12834:	andeq	r2, r1, r4, lsr #17
   12838:	andeq	r2, r1, r4, lsr #17
   1283c:	andeq	r2, r1, r4, lsr #17
   12840:	andeq	r2, r1, r4, lsr #17
   12844:	andeq	r2, r1, r4, lsr #17
   12848:	andeq	r2, r1, r4, lsr #17
   1284c:	andeq	r2, r1, r4, lsr #17
   12850:	andeq	r2, r1, r4, lsr #17
   12854:	andeq	r2, r1, r4, lsr #17
   12858:	andeq	r2, r1, r4, lsr #17
   1285c:	andeq	r2, r1, r4, lsr #17
   12860:	andeq	r2, r1, r4, lsr #17
   12864:	andeq	r2, r1, r4, lsr #17
   12868:	andeq	r2, r1, r4, lsr #17
   1286c:	andeq	r2, r1, r4, lsr #17
   12870:	andeq	r2, r1, r4, lsr #17
   12874:	andeq	r2, r1, r4, lsr #17
   12878:	andeq	r2, r1, r4, lsr #17
   1287c:	andeq	r2, r1, r4, lsr #17
   12880:	andeq	r2, r1, r4, lsr #17
   12884:	andeq	r2, r1, r4, lsr #17
   12888:	andeq	r2, r1, r4, lsr #17
   1288c:	andeq	r2, r1, r4, lsr #17
   12890:	andeq	r2, r1, r4, lsr #17
   12894:	andeq	r2, r1, r8, asr #17
   12898:			; <UNDEFINED> instruction: 0x00012abc
   1289c:	andeq	r2, r1, r8, asr #17
   128a0:			; <UNDEFINED> instruction: 0x000128b8
   128a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128a8:	cmp	r0, #0
   128ac:	beq	12b0c <__assert_fail@plt+0x1afc>
   128b0:	ldr	r0, [fp, #16]
   128b4:	b	12b10 <__assert_fail@plt+0x1b00>
   128b8:	mov	sl, #0
   128bc:	cmp	r7, #0
   128c0:	bne	12d28 <__assert_fail@plt+0x1d18>
   128c4:	b	12ab8 <__assert_fail@plt+0x1aa8>
   128c8:	mov	sl, #0
   128cc:	cmn	lr, #1
   128d0:	beq	12aa4 <__assert_fail@plt+0x1a94>
   128d4:	cmp	r7, #0
   128d8:	cmpeq	lr, #1
   128dc:	bne	12d28 <__assert_fail@plt+0x1d18>
   128e0:	b	12ab8 <__assert_fail@plt+0x1aa8>
   128e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128e8:	cmp	r0, #2
   128ec:	bne	12adc <__assert_fail@plt+0x1acc>
   128f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128f4:	tst	r0, #1
   128f8:	bne	13248 <__assert_fail@plt+0x2238>
   128fc:	mov	r9, #0
   12900:	mov	r0, #92	; 0x5c
   12904:	b	12af0 <__assert_fail@plt+0x1ae0>
   12908:	mov	r0, #102	; 0x66
   1290c:	b	12af8 <__assert_fail@plt+0x1ae8>
   12910:	mov	r2, #116	; 0x74
   12914:	b	12924 <__assert_fail@plt+0x1914>
   12918:	mov	r0, #98	; 0x62
   1291c:	b	12af8 <__assert_fail@plt+0x1ae8>
   12920:	mov	r2, #114	; 0x72
   12924:	ldr	r0, [sp, #60]	; 0x3c
   12928:	tst	r0, #1
   1292c:	mov	r0, r2
   12930:	bne	12af8 <__assert_fail@plt+0x1ae8>
   12934:	b	13248 <__assert_fail@plt+0x2238>
   12938:	ldr	r0, [sp, #84]	; 0x54
   1293c:	tst	r0, #1
   12940:	beq	12be4 <__assert_fail@plt+0x1bd4>
   12944:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12948:	tst	r0, #1
   1294c:	bne	13350 <__assert_fail@plt+0x2340>
   12950:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12954:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12958:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1295c:	cmp	r0, #2
   12960:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12964:	movwne	r0, #1
   12968:	orr	r0, r0, r3
   1296c:	tst	r0, #1
   12970:	beq	13064 <__assert_fail@plt+0x2054>
   12974:	mov	r0, r8
   12978:	b	130a4 <__assert_fail@plt+0x2094>
   1297c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12980:	mov	r9, #0
   12984:	mov	r5, #63	; 0x3f
   12988:	cmp	r0, #5
   1298c:	beq	12d30 <__assert_fail@plt+0x1d20>
   12990:	cmp	r0, #2
   12994:	bne	12df0 <__assert_fail@plt+0x1de0>
   12998:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1299c:	tst	r0, #1
   129a0:	beq	12df4 <__assert_fail@plt+0x1de4>
   129a4:	b	13248 <__assert_fail@plt+0x2238>
   129a8:	mov	r0, #118	; 0x76
   129ac:	b	12af8 <__assert_fail@plt+0x1ae8>
   129b0:	mov	r0, #1
   129b4:	mov	r5, #39	; 0x27
   129b8:	str	r0, [sp, #52]	; 0x34
   129bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129c0:	cmp	r0, #2
   129c4:	bne	12a4c <__assert_fail@plt+0x1a3c>
   129c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129cc:	tst	r0, #1
   129d0:	bne	13248 <__assert_fail@plt+0x2238>
   129d4:	ldr	r3, [sp, #68]	; 0x44
   129d8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   129dc:	mov	r9, #0
   129e0:	clz	r1, r2
   129e4:	cmp	r3, #0
   129e8:	mov	r0, r3
   129ec:	movwne	r0, #1
   129f0:	lsr	r1, r1, #5
   129f4:	orrs	r0, r0, r1
   129f8:	moveq	r3, r2
   129fc:	moveq	r2, r0
   12a00:	cmp	r8, r2
   12a04:	str	r3, [sp, #68]	; 0x44
   12a08:	str	r2, [fp, #-52]	; 0xffffffcc
   12a0c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12a10:	movcc	r0, #39	; 0x27
   12a14:	strbcc	r0, [r1, r8]
   12a18:	add	r0, r8, #1
   12a1c:	cmp	r0, r2
   12a20:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12a24:	movcc	r1, #92	; 0x5c
   12a28:	strbcc	r1, [r3, r0]
   12a2c:	add	r0, r8, #2
   12a30:	add	r8, r8, #3
   12a34:	cmp	r0, r2
   12a38:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12a3c:	movcc	r1, #39	; 0x27
   12a40:	strbcc	r1, [r2, r0]
   12a44:	mov	r0, #0
   12a48:	str	r0, [fp, #-48]	; 0xffffffd0
   12a4c:	mov	sl, #1
   12a50:	b	128a4 <__assert_fail@plt+0x1894>
   12a54:	ldr	r0, [sp, #32]
   12a58:	cmp	r0, #1
   12a5c:	bne	12c08 <__assert_fail@plt+0x1bf8>
   12a60:	str	lr, [sp, #80]	; 0x50
   12a64:	bl	10f08 <__ctype_b_loc@plt>
   12a68:	ldr	r0, [r0]
   12a6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a70:	mov	r1, #1
   12a74:	add	r0, r0, r5, lsl #1
   12a78:	ldrb	r0, [r0, #1]
   12a7c:	ubfx	sl, r0, #6, #1
   12a80:	ldr	r0, [sp, #48]	; 0x30
   12a84:	mov	r2, r1
   12a88:	cmp	r1, #1
   12a8c:	orr	r0, sl, r0
   12a90:	bhi	12dfc <__assert_fail@plt+0x1dec>
   12a94:	tst	r0, #1
   12a98:	beq	12dfc <__assert_fail@plt+0x1dec>
   12a9c:	ldr	lr, [sp, #80]	; 0x50
   12aa0:	b	128a4 <__assert_fail@plt+0x1894>
   12aa4:	cmp	r7, #0
   12aa8:	bne	12d24 <__assert_fail@plt+0x1d14>
   12aac:	ldrb	r0, [ip, #1]
   12ab0:	cmp	r0, #0
   12ab4:	bne	12d24 <__assert_fail@plt+0x1d14>
   12ab8:	mov	r1, #1
   12abc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ac0:	cmp	r0, #2
   12ac4:	bne	12ad4 <__assert_fail@plt+0x1ac4>
   12ac8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12acc:	tst	r0, #1
   12ad0:	bne	13248 <__assert_fail@plt+0x2238>
   12ad4:	mov	sl, r1
   12ad8:	b	128a4 <__assert_fail@plt+0x1894>
   12adc:	ldr	r1, [sp, #44]	; 0x2c
   12ae0:	mov	r9, #0
   12ae4:	mov	r0, #92	; 0x5c
   12ae8:	cmp	r1, #0
   12aec:	beq	12af8 <__assert_fail@plt+0x1ae8>
   12af0:	mov	sl, #0
   12af4:	b	13010 <__assert_fail@plt+0x2000>
   12af8:	ldr	r1, [sp, #84]	; 0x54
   12afc:	mov	sl, #0
   12b00:	mov	r9, #0
   12b04:	tst	r1, #1
   12b08:	bne	12b44 <__assert_fail@plt+0x1b34>
   12b0c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b10:	cmp	r0, #0
   12b14:	mov	r0, r5
   12b18:	beq	12b3c <__assert_fail@plt+0x1b2c>
   12b1c:	ldr	r1, [fp, #16]
   12b20:	ubfx	r0, r5, #5, #3
   12b24:	mov	r2, #1
   12b28:	ldr	r0, [r1, r0, lsl #2]
   12b2c:	and	r1, r5, #31
   12b30:	tst	r0, r2, lsl r1
   12b34:	mov	r0, r5
   12b38:	bne	12b44 <__assert_fail@plt+0x1b34>
   12b3c:	cmp	r6, #0
   12b40:	beq	13010 <__assert_fail@plt+0x2000>
   12b44:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b48:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12b4c:	tst	r1, #1
   12b50:	bne	13224 <__assert_fail@plt+0x2214>
   12b54:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12b58:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12b5c:	cmp	r1, #2
   12b60:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12b64:	movwne	r1, #1
   12b68:	orr	r1, r1, r5
   12b6c:	tst	r1, #1
   12b70:	bne	12bb4 <__assert_fail@plt+0x1ba4>
   12b74:	cmp	r8, r6
   12b78:	mov	r5, #1
   12b7c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12b80:	movcc	r1, #39	; 0x27
   12b84:	strbcc	r1, [r2, r8]
   12b88:	add	r1, r8, #1
   12b8c:	cmp	r1, r6
   12b90:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12b94:	movcc	r2, #36	; 0x24
   12b98:	strbcc	r2, [r3, r1]
   12b9c:	add	r1, r8, #2
   12ba0:	add	r8, r8, #3
   12ba4:	cmp	r1, r6
   12ba8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12bac:	movcc	r2, #39	; 0x27
   12bb0:	strbcc	r2, [r3, r1]
   12bb4:	cmp	r8, r6
   12bb8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12bbc:	movcc	r1, #92	; 0x5c
   12bc0:	strbcc	r1, [r2, r8]
   12bc4:	add	r8, r8, #1
   12bc8:	cmp	r8, r6
   12bcc:	and	r4, r4, sl
   12bd0:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12bd4:	strbcc	r0, [r1, r8]
   12bd8:	add	r8, r8, #1
   12bdc:	add	r7, r7, #1
   12be0:	b	125c4 <__assert_fail@plt+0x15b4>
   12be4:	ldr	r0, [sp, #28]
   12be8:	mov	sl, #0
   12bec:	mov	r9, #0
   12bf0:	mov	r5, #0
   12bf4:	cmp	r0, #0
   12bf8:	beq	12b0c <__assert_fail@plt+0x1afc>
   12bfc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c00:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c04:	b	12bdc <__assert_fail@plt+0x1bcc>
   12c08:	mov	r0, #0
   12c0c:	cmn	lr, #1
   12c10:	str	r6, [sp, #76]	; 0x4c
   12c14:	str	r4, [sp, #20]
   12c18:	str	r0, [fp, #-36]	; 0xffffffdc
   12c1c:	str	r0, [fp, #-40]	; 0xffffffd8
   12c20:	bne	12c34 <__assert_fail@plt+0x1c24>
   12c24:	mov	r0, ip
   12c28:	bl	10f20 <strlen@plt>
   12c2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c30:	mov	lr, r0
   12c34:	add	r0, ip, r7
   12c38:	mov	sl, #1
   12c3c:	mov	r6, #0
   12c40:	sub	r4, fp, #40	; 0x28
   12c44:	str	lr, [sp, #80]	; 0x50
   12c48:	str	r0, [sp, #36]	; 0x24
   12c4c:	str	r6, [sp, #40]	; 0x28
   12c50:	add	r6, r6, r7
   12c54:	sub	r0, fp, #44	; 0x2c
   12c58:	mov	r3, r4
   12c5c:	add	r1, ip, r6
   12c60:	sub	r2, lr, r6
   12c64:	bl	15008 <__assert_fail@plt+0x3ff8>
   12c68:	cmp	r0, #0
   12c6c:	beq	13178 <__assert_fail@plt+0x2168>
   12c70:	cmn	r0, #1
   12c74:	beq	13138 <__assert_fail@plt+0x2128>
   12c78:	ldr	lr, [sp, #80]	; 0x50
   12c7c:	cmn	r0, #2
   12c80:	beq	13140 <__assert_fail@plt+0x2130>
   12c84:	ldr	r2, [sp, #56]	; 0x38
   12c88:	cmp	r0, #2
   12c8c:	mov	r1, #0
   12c90:	movwcc	r1, #1
   12c94:	eor	r2, r2, #1
   12c98:	orrs	r1, r2, r1
   12c9c:	bne	12ce8 <__assert_fail@plt+0x1cd8>
   12ca0:	ldr	r1, [sp, #40]	; 0x28
   12ca4:	ldr	r2, [sp, #36]	; 0x24
   12ca8:	add	ip, r2, r1
   12cac:	mov	r2, #1
   12cb0:	ldrb	r3, [ip, r2]
   12cb4:	sub	r6, r3, #94	; 0x5e
   12cb8:	cmp	r6, #30
   12cbc:	bhi	12cd0 <__assert_fail@plt+0x1cc0>
   12cc0:	mov	r4, #1
   12cc4:	mov	r1, #1073741829	; 0x40000005
   12cc8:	tst	r1, r4, lsl r6
   12ccc:	bne	13244 <__assert_fail@plt+0x2234>
   12cd0:	sub	r3, r3, #91	; 0x5b
   12cd4:	cmp	r3, #2
   12cd8:	bcc	13244 <__assert_fail@plt+0x2234>
   12cdc:	add	r2, r2, #1
   12ce0:	cmp	r2, r0
   12ce4:	bcc	12cb0 <__assert_fail@plt+0x1ca0>
   12ce8:	ldr	r6, [sp, #40]	; 0x28
   12cec:	add	r6, r0, r6
   12cf0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12cf4:	bl	10e60 <iswprint@plt>
   12cf8:	cmp	r0, #0
   12cfc:	sub	r4, fp, #40	; 0x28
   12d00:	movwne	r0, #1
   12d04:	and	sl, sl, r0
   12d08:	mov	r0, r4
   12d0c:	bl	10e18 <mbsinit@plt>
   12d10:	ldr	lr, [sp, #80]	; 0x50
   12d14:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d18:	cmp	r0, #0
   12d1c:	beq	12c4c <__assert_fail@plt+0x1c3c>
   12d20:	b	13180 <__assert_fail@plt+0x2170>
   12d24:	mvn	lr, #0
   12d28:	mov	r9, #0
   12d2c:	b	128a4 <__assert_fail@plt+0x1894>
   12d30:	ldr	r0, [sp, #24]
   12d34:	cmp	r0, #0
   12d38:	beq	12df0 <__assert_fail@plt+0x1de0>
   12d3c:	add	r0, r7, #2
   12d40:	cmp	r0, lr
   12d44:	bcs	12df0 <__assert_fail@plt+0x1de0>
   12d48:	add	r1, ip, r7
   12d4c:	ldrb	r1, [r1, #1]
   12d50:	cmp	r1, #63	; 0x3f
   12d54:	bne	12df0 <__assert_fail@plt+0x1de0>
   12d58:	ldrb	r5, [ip, r0]
   12d5c:	sub	r1, r5, #33	; 0x21
   12d60:	cmp	r1, #29
   12d64:	bhi	12df0 <__assert_fail@plt+0x1de0>
   12d68:	movw	r3, #20929	; 0x51c1
   12d6c:	mov	r2, #1
   12d70:	movt	r3, #14336	; 0x3800
   12d74:	tst	r3, r2, lsl r1
   12d78:	beq	12df0 <__assert_fail@plt+0x1de0>
   12d7c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12d80:	tst	r1, #1
   12d84:	bne	13358 <__assert_fail@plt+0x2348>
   12d88:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12d8c:	mov	r7, r0
   12d90:	cmp	r8, r1
   12d94:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d98:	movcc	r1, #63	; 0x3f
   12d9c:	strbcc	r1, [r2, r8]
   12da0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12da4:	add	r1, r8, #1
   12da8:	cmp	r1, r2
   12dac:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12db0:	movcc	r2, #34	; 0x22
   12db4:	strbcc	r2, [r3, r1]
   12db8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12dbc:	add	r1, r8, #2
   12dc0:	cmp	r1, r2
   12dc4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12dc8:	movcc	r2, #34	; 0x22
   12dcc:	strbcc	r2, [r3, r1]
   12dd0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12dd4:	add	r1, r8, #3
   12dd8:	add	r8, r8, #4
   12ddc:	cmp	r1, r2
   12de0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12de4:	movcc	r2, #63	; 0x3f
   12de8:	strbcc	r2, [r3, r1]
   12dec:	b	12df4 <__assert_fail@plt+0x1de4>
   12df0:	mov	r5, #63	; 0x3f
   12df4:	mov	sl, #0
   12df8:	b	128a4 <__assert_fail@plt+0x1894>
   12dfc:	str	r0, [sp, #40]	; 0x28
   12e00:	add	r0, r2, r7
   12e04:	str	r6, [sp, #76]	; 0x4c
   12e08:	add	r1, r7, #1
   12e0c:	ldr	lr, [sp, #80]	; 0x50
   12e10:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12e14:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e18:	mov	r3, #0
   12e1c:	str	r0, [sp, #36]	; 0x24
   12e20:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12e24:	b	12eb8 <__assert_fail@plt+0x1ea8>
   12e28:	str	r0, [sp, #76]	; 0x4c
   12e2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12e30:	cmp	r9, #0
   12e34:	movwne	r9, #1
   12e38:	mvn	r7, r0
   12e3c:	orr	r7, r7, r9
   12e40:	tst	r7, #1
   12e44:	bne	12e94 <__assert_fail@plt+0x1e84>
   12e48:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e4c:	cmp	r8, r6
   12e50:	bcs	12e68 <__assert_fail@plt+0x1e58>
   12e54:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12e58:	mov	r2, r4
   12e5c:	mov	r4, #39	; 0x27
   12e60:	strb	r4, [r7, r8]
   12e64:	mov	r4, r2
   12e68:	add	r7, r8, #1
   12e6c:	cmp	r7, r6
   12e70:	bcs	12e88 <__assert_fail@plt+0x1e78>
   12e74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e78:	mov	r2, r4
   12e7c:	mov	r4, #39	; 0x27
   12e80:	strb	r4, [r0, r7]
   12e84:	mov	r4, r2
   12e88:	add	r8, r8, #2
   12e8c:	mov	r0, #0
   12e90:	b	12e9c <__assert_fail@plt+0x1e8c>
   12e94:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12e9c:	cmp	r8, r6
   12ea0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12ea4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12ea8:	strbcc	r5, [r2, r8]
   12eac:	add	r8, r8, #1
   12eb0:	ldrb	r5, [ip, r1]
   12eb4:	add	r1, r1, #1
   12eb8:	ldr	r2, [sp, #40]	; 0x28
   12ebc:	tst	r2, #1
   12ec0:	beq	12efc <__assert_fail@plt+0x1eec>
   12ec4:	ldr	r2, [sp, #76]	; 0x4c
   12ec8:	str	r0, [fp, #-48]	; 0xffffffd0
   12ecc:	tst	r2, #1
   12ed0:	beq	12ef4 <__assert_fail@plt+0x1ee4>
   12ed4:	cmp	r8, r6
   12ed8:	bcs	12ef0 <__assert_fail@plt+0x1ee0>
   12edc:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12ee0:	mov	r2, r4
   12ee4:	mov	r4, #92	; 0x5c
   12ee8:	strb	r4, [r6, r8]
   12eec:	mov	r4, r2
   12ef0:	add	r8, r8, #1
   12ef4:	mov	r0, #0
   12ef8:	b	12ff0 <__assert_fail@plt+0x1fe0>
   12efc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12f00:	tst	r2, #1
   12f04:	bne	13250 <__assert_fail@plt+0x2240>
   12f08:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12f0c:	cmp	r7, #2
   12f10:	movwne	r3, #1
   12f14:	orr	r3, r3, r0
   12f18:	tst	r3, #1
   12f1c:	bne	12f78 <__assert_fail@plt+0x1f68>
   12f20:	cmp	r8, r6
   12f24:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12f28:	movcc	r3, #39	; 0x27
   12f2c:	strbcc	r3, [r2, r8]
   12f30:	add	r3, r8, #1
   12f34:	cmp	r3, r6
   12f38:	bcs	12f50 <__assert_fail@plt+0x1f40>
   12f3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12f40:	mov	r7, r4
   12f44:	mov	r4, #36	; 0x24
   12f48:	strb	r4, [r2, r3]
   12f4c:	mov	r4, r7
   12f50:	add	r3, r8, #2
   12f54:	cmp	r3, r6
   12f58:	bcs	12f70 <__assert_fail@plt+0x1f60>
   12f5c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12f60:	mov	r7, r4
   12f64:	mov	r4, #39	; 0x27
   12f68:	strb	r4, [r2, r3]
   12f6c:	mov	r4, r7
   12f70:	add	r8, r8, #3
   12f74:	mov	r0, #1
   12f78:	cmp	r8, r6
   12f7c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12f80:	movcc	r3, #92	; 0x5c
   12f84:	strbcc	r3, [r2, r8]
   12f88:	add	r3, r8, #1
   12f8c:	cmp	r3, r6
   12f90:	bcs	12fb0 <__assert_fail@plt+0x1fa0>
   12f94:	mov	r2, r4
   12f98:	and	r7, r5, #192	; 0xc0
   12f9c:	mov	r4, #48	; 0x30
   12fa0:	orr	r7, r4, r7, lsr #6
   12fa4:	mov	r4, r2
   12fa8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12fac:	strb	r7, [r2, r3]
   12fb0:	add	r3, r8, #2
   12fb4:	cmp	r3, r6
   12fb8:	bcs	12fd8 <__assert_fail@plt+0x1fc8>
   12fbc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12fc0:	mov	r6, r4
   12fc4:	lsr	r7, r5, #3
   12fc8:	mov	r4, #6
   12fcc:	bfi	r7, r4, #3, #29
   12fd0:	mov	r4, r6
   12fd4:	strb	r7, [r2, r3]
   12fd8:	str	r0, [fp, #-48]	; 0xffffffd0
   12fdc:	ldr	r0, [sp, #76]	; 0x4c
   12fe0:	mov	r3, #6
   12fe4:	add	r8, r8, #3
   12fe8:	bfi	r5, r3, #3, #29
   12fec:	mov	r3, #1
   12ff0:	ldr	r2, [sp, #36]	; 0x24
   12ff4:	and	r9, r3, #1
   12ff8:	cmp	r2, r1
   12ffc:	bhi	12e28 <__assert_fail@plt+0x1e18>
   13000:	cmp	r9, #0
   13004:	sub	r7, r1, #1
   13008:	mov	r0, r5
   1300c:	movwne	r9, #1
   13010:	cmp	r9, #0
   13014:	bne	13058 <__assert_fail@plt+0x2048>
   13018:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1301c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13020:	tst	r5, #1
   13024:	beq	12bc8 <__assert_fail@plt+0x1bb8>
   13028:	cmp	r8, r6
   1302c:	mov	r5, #0
   13030:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13034:	movcc	r1, #39	; 0x27
   13038:	strbcc	r1, [r2, r8]
   1303c:	add	r1, r8, #1
   13040:	add	r8, r8, #2
   13044:	cmp	r1, r6
   13048:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1304c:	movcc	r2, #39	; 0x27
   13050:	strbcc	r2, [r3, r1]
   13054:	b	12bc8 <__assert_fail@plt+0x1bb8>
   13058:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1305c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13060:	b	12bc8 <__assert_fail@plt+0x1bb8>
   13064:	cmp	r8, r1
   13068:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1306c:	movcc	r0, #39	; 0x27
   13070:	strbcc	r0, [r2, r8]
   13074:	add	r0, r8, #1
   13078:	cmp	r0, r1
   1307c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13080:	movcc	r2, #36	; 0x24
   13084:	strbcc	r2, [r3, r0]
   13088:	add	r0, r8, #2
   1308c:	cmp	r0, r1
   13090:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13094:	movcc	r2, #39	; 0x27
   13098:	strbcc	r2, [r3, r0]
   1309c:	add	r0, r8, #3
   130a0:	mov	r3, #1
   130a4:	cmp	r0, r1
   130a8:	add	r8, r0, #1
   130ac:	str	r3, [fp, #-48]	; 0xffffffd0
   130b0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   130b4:	movcc	r1, #92	; 0x5c
   130b8:	strbcc	r1, [r2, r0]
   130bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   130c0:	cmp	r1, #2
   130c4:	beq	13128 <__assert_fail@plt+0x2118>
   130c8:	add	r1, r7, #1
   130cc:	mov	sl, #0
   130d0:	mov	r9, #1
   130d4:	mov	r5, #48	; 0x30
   130d8:	cmp	r1, lr
   130dc:	bcs	128a4 <__assert_fail@plt+0x1894>
   130e0:	ldrb	r1, [ip, r1]
   130e4:	sub	r1, r1, #48	; 0x30
   130e8:	uxtb	r1, r1
   130ec:	cmp	r1, #9
   130f0:	bhi	128a4 <__assert_fail@plt+0x1894>
   130f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   130f8:	cmp	r8, r1
   130fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13100:	movcc	r1, #48	; 0x30
   13104:	strbcc	r1, [r2, r8]
   13108:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1310c:	add	r1, r0, #2
   13110:	add	r8, r0, #3
   13114:	cmp	r1, r2
   13118:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1311c:	movcc	r2, #48	; 0x30
   13120:	strbcc	r2, [r3, r1]
   13124:	b	128a4 <__assert_fail@plt+0x1894>
   13128:	mov	r0, #48	; 0x30
   1312c:	mov	r9, #1
   13130:	mov	sl, #0
   13134:	b	12b3c <__assert_fail@plt+0x1b2c>
   13138:	mov	sl, #0
   1313c:	b	13178 <__assert_fail@plt+0x2168>
   13140:	mov	sl, #0
   13144:	cmp	lr, r6
   13148:	bls	13178 <__assert_fail@plt+0x2168>
   1314c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13150:	ldr	r6, [sp, #40]	; 0x28
   13154:	ldr	r0, [sp, #36]	; 0x24
   13158:	ldrb	r0, [r0, r6]
   1315c:	cmp	r0, #0
   13160:	beq	13180 <__assert_fail@plt+0x2170>
   13164:	add	r6, r6, #1
   13168:	add	r0, r7, r6
   1316c:	cmp	r0, lr
   13170:	bcc	13154 <__assert_fail@plt+0x2144>
   13174:	b	13180 <__assert_fail@plt+0x2170>
   13178:	ldr	ip, [fp, #-84]	; 0xffffffac
   1317c:	ldr	r6, [sp, #40]	; 0x28
   13180:	mov	r1, r6
   13184:	ldr	r4, [sp, #20]
   13188:	ldr	r6, [sp, #76]	; 0x4c
   1318c:	b	12a80 <__assert_fail@plt+0x1a70>
   13190:	mov	lr, r7
   13194:	b	1319c <__assert_fail@plt+0x218c>
   13198:	mvn	lr, #0
   1319c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   131a0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   131a4:	eor	r0, r9, #2
   131a8:	orr	r0, r0, r8
   131ac:	clz	r0, r0
   131b0:	lsr	r0, r0, #5
   131b4:	tst	r1, r0
   131b8:	bne	132b4 <__assert_fail@plt+0x22a4>
   131bc:	mov	r0, r1
   131c0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   131c4:	cmp	r9, #2
   131c8:	movwne	r1, #1
   131cc:	orr	r0, r0, r1
   131d0:	tst	r0, #1
   131d4:	bne	132f4 <__assert_fail@plt+0x22e4>
   131d8:	ldr	r0, [sp, #52]	; 0x34
   131dc:	ldr	r1, [sp, #68]	; 0x44
   131e0:	str	lr, [sp, #80]	; 0x50
   131e4:	eor	r0, r0, #1
   131e8:	tst	r0, #1
   131ec:	bne	132f4 <__assert_fail@plt+0x22e4>
   131f0:	tst	r4, #1
   131f4:	bne	132bc <__assert_fail@plt+0x22ac>
   131f8:	mov	r7, #0
   131fc:	cmp	r1, #0
   13200:	beq	132ec <__assert_fail@plt+0x22dc>
   13204:	ldr	r0, [sp, #84]	; 0x54
   13208:	mov	r3, #0
   1320c:	cmp	r6, #0
   13210:	mov	r2, #0
   13214:	mov	r4, r1
   13218:	str	r3, [fp, #-72]	; 0xffffffb8
   1321c:	beq	12358 <__assert_fail@plt+0x1348>
   13220:	b	132f4 <__assert_fail@plt+0x22e4>
   13224:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13228:	b	13250 <__assert_fail@plt+0x2240>
   1322c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13230:	mov	r2, #1
   13234:	mov	lr, r4
   13238:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1323c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13240:	b	13254 <__assert_fail@plt+0x2244>
   13244:	ldr	ip, [fp, #-84]	; 0xffffffac
   13248:	mov	r7, #2
   1324c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13250:	ldr	r2, [sp, #84]	; 0x54
   13254:	mov	r0, #0
   13258:	ldr	r1, [fp, #12]
   1325c:	tst	r2, #1
   13260:	mov	r2, r7
   13264:	mov	r3, lr
   13268:	str	r0, [sp, #8]
   1326c:	ldr	r0, [sp, #64]	; 0x40
   13270:	movwne	r2, #4
   13274:	cmp	r7, #2
   13278:	movne	r2, r7
   1327c:	str	r2, [sp]
   13280:	mov	r2, ip
   13284:	bic	r1, r1, #2
   13288:	str	r0, [sp, #12]
   1328c:	ldr	r0, [sp, #72]	; 0x48
   13290:	str	r1, [sp, #4]
   13294:	mov	r1, r6
   13298:	str	r0, [sp, #16]
   1329c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   132a0:	bl	122e0 <__assert_fail@plt+0x12d0>
   132a4:	mov	r8, r0
   132a8:	mov	r0, r8
   132ac:	sub	sp, fp, #28
   132b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b4:	mov	r7, #2
   132b8:	b	13250 <__assert_fail@plt+0x2240>
   132bc:	mov	r0, #5
   132c0:	ldr	r2, [fp, #-84]	; 0xffffffac
   132c4:	ldr	r3, [sp, #80]	; 0x50
   132c8:	str	r0, [sp]
   132cc:	ldr	r0, [fp, #12]
   132d0:	str	r0, [sp, #4]
   132d4:	ldr	r0, [fp, #16]
   132d8:	str	r0, [sp, #8]
   132dc:	ldr	r0, [sp, #64]	; 0x40
   132e0:	str	r0, [sp, #12]
   132e4:	ldr	r0, [sp, #72]	; 0x48
   132e8:	b	13298 <__assert_fail@plt+0x2288>
   132ec:	mov	r0, #0
   132f0:	str	r0, [fp, #-72]	; 0xffffffb8
   132f4:	ldr	r1, [sp, #92]	; 0x5c
   132f8:	cmp	r1, #0
   132fc:	beq	1333c <__assert_fail@plt+0x232c>
   13300:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13304:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13308:	tst	r0, #1
   1330c:	bne	13340 <__assert_fail@plt+0x2330>
   13310:	ldrb	r0, [r1]
   13314:	cmp	r0, #0
   13318:	beq	13340 <__assert_fail@plt+0x2330>
   1331c:	add	r1, r1, #1
   13320:	cmp	r8, r6
   13324:	strbcc	r0, [r2, r8]
   13328:	add	r8, r8, #1
   1332c:	ldrb	r0, [r1], #1
   13330:	cmp	r0, #0
   13334:	bne	13320 <__assert_fail@plt+0x2310>
   13338:	b	13340 <__assert_fail@plt+0x2330>
   1333c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13340:	cmp	r8, r6
   13344:	movcc	r0, #0
   13348:	strbcc	r0, [r2, r8]
   1334c:	b	132a8 <__assert_fail@plt+0x2298>
   13350:	mov	r2, #1
   13354:	b	13238 <__assert_fail@plt+0x2228>
   13358:	mov	r7, #5
   1335c:	b	1324c <__assert_fail@plt+0x223c>
   13360:	bl	10ff8 <abort@plt>
   13364:	mov	r3, r2
   13368:	mov	r2, #0
   1336c:	b	13370 <__assert_fail@plt+0x2360>
   13370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13374:	add	fp, sp, #28
   13378:	sub	sp, sp, #36	; 0x24
   1337c:	movw	r8, #29032	; 0x7168
   13380:	cmp	r3, #0
   13384:	mov	r4, r2
   13388:	str	r2, [sp, #24]
   1338c:	mov	r5, r1
   13390:	mov	r6, r0
   13394:	str	r0, [sp, #20]
   13398:	movt	r8, #2
   1339c:	movne	r8, r3
   133a0:	bl	10f38 <__errno_location@plt>
   133a4:	str	r0, [sp, #28]
   133a8:	cmp	r4, #0
   133ac:	add	sl, r8, #8
   133b0:	ldm	r8, {r3, r9}
   133b4:	ldr	r7, [r0]
   133b8:	ldr	r1, [r8, #40]	; 0x28
   133bc:	ldr	r2, [r8, #44]	; 0x2c
   133c0:	mov	r0, #0
   133c4:	orreq	r9, r9, #1
   133c8:	str	r7, [sp, #32]
   133cc:	mov	r7, r5
   133d0:	stm	sp, {r3, r9, sl}
   133d4:	str	r1, [sp, #12]
   133d8:	str	r2, [sp, #16]
   133dc:	mov	r1, #0
   133e0:	mov	r2, r6
   133e4:	mov	r3, r5
   133e8:	bl	122e0 <__assert_fail@plt+0x12d0>
   133ec:	add	r4, r0, #1
   133f0:	mov	r5, r0
   133f4:	mov	r0, r4
   133f8:	bl	140d4 <__assert_fail@plt+0x30c4>
   133fc:	mov	r6, r0
   13400:	ldr	r0, [r8]
   13404:	ldr	r2, [r8, #44]	; 0x2c
   13408:	ldr	r1, [r8, #40]	; 0x28
   1340c:	mov	r3, r7
   13410:	stm	sp, {r0, r9, sl}
   13414:	str	r2, [sp, #16]
   13418:	str	r1, [sp, #12]
   1341c:	mov	r0, r6
   13420:	mov	r1, r4
   13424:	ldr	r2, [sp, #20]
   13428:	bl	122e0 <__assert_fail@plt+0x12d0>
   1342c:	ldr	r0, [sp, #24]
   13430:	ldr	r1, [sp, #32]
   13434:	ldr	r2, [sp, #28]
   13438:	cmp	r0, #0
   1343c:	str	r1, [r2]
   13440:	strne	r5, [r0]
   13444:	mov	r0, r6
   13448:	sub	sp, fp, #28
   1344c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13450:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13454:	add	fp, sp, #24
   13458:	movw	r5, #28916	; 0x70f4
   1345c:	movw	r8, #28912	; 0x70f0
   13460:	movt	r5, #2
   13464:	movt	r8, #2
   13468:	ldr	r0, [r5]
   1346c:	ldr	r4, [r8]
   13470:	cmp	r0, #2
   13474:	blt	134a0 <__assert_fail@plt+0x2490>
   13478:	add	r7, r4, #12
   1347c:	mov	r6, #0
   13480:	ldr	r0, [r7, r6, lsl #3]
   13484:	bl	14f04 <__assert_fail@plt+0x3ef4>
   13488:	ldr	r1, [r5]
   1348c:	add	r2, r6, #2
   13490:	add	r0, r6, #1
   13494:	mov	r6, r0
   13498:	cmp	r2, r1
   1349c:	blt	13480 <__assert_fail@plt+0x2470>
   134a0:	ldr	r0, [r4, #4]
   134a4:	movw	r7, #29080	; 0x7198
   134a8:	movt	r7, #2
   134ac:	cmp	r0, r7
   134b0:	beq	134c8 <__assert_fail@plt+0x24b8>
   134b4:	bl	14f04 <__assert_fail@plt+0x3ef4>
   134b8:	movw	r0, #28920	; 0x70f8
   134bc:	mov	r6, #256	; 0x100
   134c0:	movt	r0, #2
   134c4:	strd	r6, [r0]
   134c8:	movw	r6, #28920	; 0x70f8
   134cc:	movt	r6, #2
   134d0:	cmp	r4, r6
   134d4:	beq	134e4 <__assert_fail@plt+0x24d4>
   134d8:	mov	r0, r4
   134dc:	bl	14f04 <__assert_fail@plt+0x3ef4>
   134e0:	str	r6, [r8]
   134e4:	mov	r0, #1
   134e8:	str	r0, [r5]
   134ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134f0:	movw	r3, #29032	; 0x7168
   134f4:	mvn	r2, #0
   134f8:	movt	r3, #2
   134fc:	b	13500 <__assert_fail@plt+0x24f0>
   13500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13504:	add	fp, sp, #28
   13508:	sub	sp, sp, #44	; 0x2c
   1350c:	mov	r7, r3
   13510:	str	r2, [sp, #36]	; 0x24
   13514:	str	r1, [sp, #32]
   13518:	mov	r5, r0
   1351c:	bl	10f38 <__errno_location@plt>
   13520:	cmp	r5, #0
   13524:	blt	13690 <__assert_fail@plt+0x2680>
   13528:	cmn	r5, #-2147483647	; 0x80000001
   1352c:	beq	13690 <__assert_fail@plt+0x2680>
   13530:	movw	r8, #28916	; 0x70f4
   13534:	movw	r4, #28912	; 0x70f0
   13538:	str	r0, [sp, #28]
   1353c:	ldr	r0, [r0]
   13540:	movt	r8, #2
   13544:	movt	r4, #2
   13548:	ldr	r1, [r8]
   1354c:	ldr	r6, [r4]
   13550:	str	r0, [sp, #24]
   13554:	cmp	r1, r5
   13558:	ble	13564 <__assert_fail@plt+0x2554>
   1355c:	mov	sl, r6
   13560:	b	135cc <__assert_fail@plt+0x25bc>
   13564:	movw	r9, #28920	; 0x70f8
   13568:	mov	r0, #8
   1356c:	add	r2, r5, #1
   13570:	str	r1, [fp, #-32]	; 0xffffffe0
   13574:	mvn	r3, #-2147483648	; 0x80000000
   13578:	movt	r9, #2
   1357c:	str	r0, [sp]
   13580:	sub	r2, r2, r1
   13584:	sub	r1, fp, #32
   13588:	subs	r0, r6, r9
   1358c:	movne	r0, r6
   13590:	bl	14204 <__assert_fail@plt+0x31f4>
   13594:	cmp	r6, r9
   13598:	mov	sl, r0
   1359c:	str	r0, [r4]
   135a0:	ldrdeq	r0, [r9]
   135a4:	stmeq	sl, {r0, r1}
   135a8:	ldr	r1, [r8]
   135ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   135b0:	add	r0, sl, r1, lsl #3
   135b4:	sub	r1, r2, r1
   135b8:	lsl	r2, r1, #3
   135bc:	mov	r1, #0
   135c0:	bl	10f50 <memset@plt>
   135c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   135c8:	str	r0, [r8]
   135cc:	mov	r9, sl
   135d0:	ldr	r6, [r9, r5, lsl #3]!
   135d4:	ldr	r4, [r9, #4]!
   135d8:	ldm	r7, {r0, r1}
   135dc:	ldr	r2, [r7, #40]	; 0x28
   135e0:	ldr	r3, [r7, #44]	; 0x2c
   135e4:	orr	r8, r1, #1
   135e8:	add	r1, r7, #8
   135ec:	stm	sp, {r0, r8}
   135f0:	add	r0, sp, #8
   135f4:	str	r1, [sp, #20]
   135f8:	stm	r0, {r1, r2, r3}
   135fc:	mov	r0, r4
   13600:	mov	r1, r6
   13604:	ldr	r2, [sp, #32]
   13608:	ldr	r3, [sp, #36]	; 0x24
   1360c:	bl	122e0 <__assert_fail@plt+0x12d0>
   13610:	cmp	r6, r0
   13614:	bhi	13678 <__assert_fail@plt+0x2668>
   13618:	add	r6, r0, #1
   1361c:	movw	r0, #29080	; 0x7198
   13620:	movt	r0, #2
   13624:	str	r6, [sl, r5, lsl #3]
   13628:	cmp	r4, r0
   1362c:	beq	13638 <__assert_fail@plt+0x2628>
   13630:	mov	r0, r4
   13634:	bl	14f04 <__assert_fail@plt+0x3ef4>
   13638:	mov	r0, r6
   1363c:	bl	140d4 <__assert_fail@plt+0x30c4>
   13640:	str	r0, [r9]
   13644:	mov	r4, r0
   13648:	add	r3, sp, #8
   1364c:	ldr	r0, [r7]
   13650:	ldr	r1, [r7, #40]	; 0x28
   13654:	ldr	r2, [r7, #44]	; 0x2c
   13658:	stm	sp, {r0, r8}
   1365c:	ldr	r0, [sp, #20]
   13660:	stm	r3, {r0, r1, r2}
   13664:	mov	r0, r4
   13668:	mov	r1, r6
   1366c:	ldr	r2, [sp, #32]
   13670:	ldr	r3, [sp, #36]	; 0x24
   13674:	bl	122e0 <__assert_fail@plt+0x12d0>
   13678:	ldr	r0, [sp, #28]
   1367c:	ldr	r1, [sp, #24]
   13680:	str	r1, [r0]
   13684:	mov	r0, r4
   13688:	sub	sp, fp, #28
   1368c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13690:	bl	10ff8 <abort@plt>
   13694:	movw	r3, #29032	; 0x7168
   13698:	movt	r3, #2
   1369c:	b	13500 <__assert_fail@plt+0x24f0>
   136a0:	movw	r3, #29032	; 0x7168
   136a4:	mov	r1, r0
   136a8:	mov	r0, #0
   136ac:	mvn	r2, #0
   136b0:	movt	r3, #2
   136b4:	b	13500 <__assert_fail@plt+0x24f0>
   136b8:	movw	r3, #29032	; 0x7168
   136bc:	mov	r2, r1
   136c0:	mov	r1, r0
   136c4:	mov	r0, #0
   136c8:	movt	r3, #2
   136cc:	b	13500 <__assert_fail@plt+0x24f0>
   136d0:	push	{fp, lr}
   136d4:	mov	fp, sp
   136d8:	sub	sp, sp, #48	; 0x30
   136dc:	vmov.i32	q8, #0	; 0x00000000
   136e0:	mov	ip, #32
   136e4:	mov	r3, sp
   136e8:	mov	lr, r2
   136ec:	cmp	r1, #10
   136f0:	add	r2, r3, #16
   136f4:	vst1.64	{d16-d17}, [r3], ip
   136f8:	vst1.64	{d16-d17}, [r3]
   136fc:	vst1.64	{d16-d17}, [r2]
   13700:	beq	13720 <__assert_fail@plt+0x2710>
   13704:	str	r1, [sp]
   13708:	mov	r3, sp
   1370c:	mov	r1, lr
   13710:	mvn	r2, #0
   13714:	bl	13500 <__assert_fail@plt+0x24f0>
   13718:	mov	sp, fp
   1371c:	pop	{fp, pc}
   13720:	bl	10ff8 <abort@plt>
   13724:	push	{r4, sl, fp, lr}
   13728:	add	fp, sp, #8
   1372c:	sub	sp, sp, #48	; 0x30
   13730:	mov	ip, r3
   13734:	mov	r3, sp
   13738:	vmov.i32	q8, #0	; 0x00000000
   1373c:	mov	lr, #32
   13740:	cmp	r1, #10
   13744:	add	r4, r3, #16
   13748:	vst1.64	{d16-d17}, [r3], lr
   1374c:	vst1.64	{d16-d17}, [r3]
   13750:	vst1.64	{d16-d17}, [r4]
   13754:	beq	13774 <__assert_fail@plt+0x2764>
   13758:	str	r1, [sp]
   1375c:	mov	r1, r2
   13760:	mov	r3, sp
   13764:	mov	r2, ip
   13768:	bl	13500 <__assert_fail@plt+0x24f0>
   1376c:	sub	sp, fp, #8
   13770:	pop	{r4, sl, fp, pc}
   13774:	bl	10ff8 <abort@plt>
   13778:	mov	r2, r1
   1377c:	mov	r1, r0
   13780:	mov	r0, #0
   13784:	b	136d0 <__assert_fail@plt+0x26c0>
   13788:	mov	r3, r2
   1378c:	mov	r2, r1
   13790:	mov	r1, r0
   13794:	mov	r0, #0
   13798:	b	13724 <__assert_fail@plt+0x2714>
   1379c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137a0:	add	fp, sp, #24
   137a4:	sub	sp, sp, #48	; 0x30
   137a8:	movw	r8, #29032	; 0x7168
   137ac:	mov	lr, r0
   137b0:	mov	r3, sp
   137b4:	mov	ip, r1
   137b8:	movt	r8, #2
   137bc:	mov	r1, r3
   137c0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   137c4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   137c8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   137cc:	stm	r1, {r0, r4, r5, r6, r7, r9}
   137d0:	ubfx	r0, r2, #5, #3
   137d4:	and	r2, r2, #31
   137d8:	mov	r4, #1
   137dc:	add	r0, r3, r0, lsl #2
   137e0:	ldr	r1, [r0, #8]
   137e4:	bic	r4, r4, r1, lsr r2
   137e8:	eor	r1, r1, r4, lsl r2
   137ec:	mov	r2, ip
   137f0:	str	r1, [r0, #8]
   137f4:	mov	r0, #0
   137f8:	mov	r1, lr
   137fc:	bl	13500 <__assert_fail@plt+0x24f0>
   13800:	sub	sp, fp, #24
   13804:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13808:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1380c:	add	fp, sp, #24
   13810:	sub	sp, sp, #48	; 0x30
   13814:	movw	lr, #29032	; 0x7168
   13818:	mov	ip, r0
   1381c:	mov	r3, sp
   13820:	movt	lr, #2
   13824:	mov	r2, r3
   13828:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1382c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13830:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13834:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13838:	ubfx	r0, r1, #5, #3
   1383c:	and	r1, r1, #31
   13840:	mov	r7, #1
   13844:	add	r0, r3, r0, lsl #2
   13848:	ldr	r2, [r0, #8]
   1384c:	bic	r7, r7, r2, lsr r1
   13850:	eor	r1, r2, r7, lsl r1
   13854:	mvn	r2, #0
   13858:	str	r1, [r0, #8]
   1385c:	mov	r0, #0
   13860:	mov	r1, ip
   13864:	bl	13500 <__assert_fail@plt+0x24f0>
   13868:	sub	sp, fp, #24
   1386c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13870:	push	{r4, r5, r6, r7, fp, lr}
   13874:	add	fp, sp, #16
   13878:	sub	sp, sp, #48	; 0x30
   1387c:	movw	lr, #29032	; 0x7168
   13880:	mov	ip, r0
   13884:	mov	r3, sp
   13888:	movt	lr, #2
   1388c:	mov	r2, r3
   13890:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13894:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13898:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1389c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   138a0:	mov	r1, ip
   138a4:	mvn	r2, #0
   138a8:	ldr	r0, [sp, #12]
   138ac:	orr	r0, r0, #67108864	; 0x4000000
   138b0:	str	r0, [sp, #12]
   138b4:	mov	r0, #0
   138b8:	bl	13500 <__assert_fail@plt+0x24f0>
   138bc:	sub	sp, fp, #16
   138c0:	pop	{r4, r5, r6, r7, fp, pc}
   138c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138c8:	add	fp, sp, #24
   138cc:	sub	sp, sp, #48	; 0x30
   138d0:	movw	r8, #29032	; 0x7168
   138d4:	mov	ip, r1
   138d8:	mov	lr, r0
   138dc:	mov	r3, sp
   138e0:	movt	r8, #2
   138e4:	mov	r2, r3
   138e8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   138ec:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   138f0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   138f4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   138f8:	mov	r1, lr
   138fc:	mov	r2, ip
   13900:	ldr	r0, [sp, #12]
   13904:	orr	r0, r0, #67108864	; 0x4000000
   13908:	str	r0, [sp, #12]
   1390c:	mov	r0, #0
   13910:	bl	13500 <__assert_fail@plt+0x24f0>
   13914:	sub	sp, fp, #24
   13918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1391c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13920:	add	fp, sp, #24
   13924:	sub	sp, sp, #96	; 0x60
   13928:	mov	lr, sp
   1392c:	vmov.i32	q8, #0	; 0x00000000
   13930:	mov	ip, r2
   13934:	cmp	r1, #10
   13938:	add	r3, lr, #16
   1393c:	mov	r2, lr
   13940:	vst1.64	{d16-d17}, [r3]
   13944:	mov	r3, #28
   13948:	vst1.64	{d16-d17}, [r2], r3
   1394c:	vst1.32	{d16-d17}, [r2]
   13950:	beq	13990 <__assert_fail@plt+0x2980>
   13954:	str	r1, [sp, #48]	; 0x30
   13958:	add	r3, sp, #48	; 0x30
   1395c:	ldm	lr!, {r2, r4, r5, r6, r7}
   13960:	add	r1, r3, #4
   13964:	stmia	r1!, {r2, r4, r5, r6, r7}
   13968:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1396c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13970:	mvn	r2, #0
   13974:	ldr	r1, [sp, #60]	; 0x3c
   13978:	orr	r1, r1, #67108864	; 0x4000000
   1397c:	str	r1, [sp, #60]	; 0x3c
   13980:	mov	r1, ip
   13984:	bl	13500 <__assert_fail@plt+0x24f0>
   13988:	sub	sp, fp, #24
   1398c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13990:	bl	10ff8 <abort@plt>
   13994:	push	{fp, lr}
   13998:	mov	fp, sp
   1399c:	sub	sp, sp, #8
   139a0:	mvn	ip, #0
   139a4:	str	ip, [sp]
   139a8:	bl	139b4 <__assert_fail@plt+0x29a4>
   139ac:	mov	sp, fp
   139b0:	pop	{fp, pc}
   139b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   139b8:	add	fp, sp, #24
   139bc:	sub	sp, sp, #48	; 0x30
   139c0:	movw	ip, #29032	; 0x7168
   139c4:	mov	lr, r3
   139c8:	mov	r3, sp
   139cc:	cmp	r1, #0
   139d0:	movt	ip, #2
   139d4:	cmpne	r2, #0
   139d8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   139dc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   139e0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   139e4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   139e8:	mov	r3, #10
   139ec:	str	r3, [sp]
   139f0:	bne	139f8 <__assert_fail@plt+0x29e8>
   139f4:	bl	10ff8 <abort@plt>
   139f8:	ldr	ip, [fp, #8]
   139fc:	str	r2, [sp, #44]	; 0x2c
   13a00:	str	r1, [sp, #40]	; 0x28
   13a04:	mov	r3, sp
   13a08:	mov	r1, lr
   13a0c:	mov	r2, ip
   13a10:	bl	13500 <__assert_fail@plt+0x24f0>
   13a14:	sub	sp, fp, #24
   13a18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a1c:	push	{fp, lr}
   13a20:	mov	fp, sp
   13a24:	sub	sp, sp, #8
   13a28:	mov	r3, r2
   13a2c:	mov	r2, r1
   13a30:	mov	r1, r0
   13a34:	mvn	r0, #0
   13a38:	str	r0, [sp]
   13a3c:	mov	r0, #0
   13a40:	bl	139b4 <__assert_fail@plt+0x29a4>
   13a44:	mov	sp, fp
   13a48:	pop	{fp, pc}
   13a4c:	push	{fp, lr}
   13a50:	mov	fp, sp
   13a54:	sub	sp, sp, #8
   13a58:	mov	ip, r2
   13a5c:	mov	r2, r1
   13a60:	mov	r1, r0
   13a64:	str	r3, [sp]
   13a68:	mov	r0, #0
   13a6c:	mov	r3, ip
   13a70:	bl	139b4 <__assert_fail@plt+0x29a4>
   13a74:	mov	sp, fp
   13a78:	pop	{fp, pc}
   13a7c:	movw	r3, #28928	; 0x7100
   13a80:	movt	r3, #2
   13a84:	b	13500 <__assert_fail@plt+0x24f0>
   13a88:	movw	r3, #28928	; 0x7100
   13a8c:	mov	r2, r1
   13a90:	mov	r1, r0
   13a94:	mov	r0, #0
   13a98:	movt	r3, #2
   13a9c:	b	13500 <__assert_fail@plt+0x24f0>
   13aa0:	movw	r3, #28928	; 0x7100
   13aa4:	mvn	r2, #0
   13aa8:	movt	r3, #2
   13aac:	b	13500 <__assert_fail@plt+0x24f0>
   13ab0:	movw	r3, #28928	; 0x7100
   13ab4:	mov	r1, r0
   13ab8:	mov	r0, #0
   13abc:	mvn	r2, #0
   13ac0:	movt	r3, #2
   13ac4:	b	13500 <__assert_fail@plt+0x24f0>
   13ac8:	push	{r4, r5, fp, lr}
   13acc:	add	fp, sp, #8
   13ad0:	mov	r5, r0
   13ad4:	mov	r4, r1
   13ad8:	mov	r0, #0
   13adc:	mov	r2, #5
   13ae0:	mov	r1, r5
   13ae4:	bl	10e3c <dcgettext@plt>
   13ae8:	cmp	r0, r5
   13aec:	popne	{r4, r5, fp, pc}
   13af0:	bl	14fd0 <__assert_fail@plt+0x3fc0>
   13af4:	ldrb	r1, [r0]
   13af8:	and	r1, r1, #223	; 0xdf
   13afc:	cmp	r1, #71	; 0x47
   13b00:	beq	13b68 <__assert_fail@plt+0x2b58>
   13b04:	cmp	r1, #85	; 0x55
   13b08:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13b0c:	ldrb	r1, [r0, #1]
   13b10:	and	r1, r1, #223	; 0xdf
   13b14:	cmp	r1, #84	; 0x54
   13b18:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13b1c:	ldrb	r1, [r0, #2]
   13b20:	and	r1, r1, #223	; 0xdf
   13b24:	cmp	r1, #70	; 0x46
   13b28:	ldrbeq	r1, [r0, #3]
   13b2c:	cmpeq	r1, #45	; 0x2d
   13b30:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13b34:	ldrb	r1, [r0, #4]
   13b38:	cmp	r1, #56	; 0x38
   13b3c:	ldrbeq	r0, [r0, #5]
   13b40:	cmpeq	r0, #0
   13b44:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13b48:	ldrb	r1, [r5]
   13b4c:	movw	r2, #24008	; 0x5dc8
   13b50:	movw	r0, #24012	; 0x5dcc
   13b54:	movt	r2, #1
   13b58:	movt	r0, #1
   13b5c:	cmp	r1, #96	; 0x60
   13b60:	moveq	r0, r2
   13b64:	pop	{r4, r5, fp, pc}
   13b68:	ldrb	r1, [r0, #1]
   13b6c:	and	r1, r1, #223	; 0xdf
   13b70:	cmp	r1, #66	; 0x42
   13b74:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13b78:	ldrb	r1, [r0, #2]
   13b7c:	cmp	r1, #49	; 0x31
   13b80:	ldrbeq	r1, [r0, #3]
   13b84:	cmpeq	r1, #56	; 0x38
   13b88:	beq	13ba8 <__assert_fail@plt+0x2b98>
   13b8c:	movw	r1, #24002	; 0x5dc2
   13b90:	movw	r0, #24006	; 0x5dc6
   13b94:	cmp	r4, #9
   13b98:	movt	r1, #1
   13b9c:	movt	r0, #1
   13ba0:	moveq	r0, r1
   13ba4:	pop	{r4, r5, fp, pc}
   13ba8:	ldrb	r1, [r0, #4]
   13bac:	cmp	r1, #48	; 0x30
   13bb0:	ldrbeq	r1, [r0, #5]
   13bb4:	cmpeq	r1, #51	; 0x33
   13bb8:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13bbc:	ldrb	r1, [r0, #6]
   13bc0:	cmp	r1, #48	; 0x30
   13bc4:	ldrbeq	r0, [r0, #7]
   13bc8:	cmpeq	r0, #0
   13bcc:	bne	13b8c <__assert_fail@plt+0x2b7c>
   13bd0:	ldrb	r1, [r5]
   13bd4:	movw	r2, #24016	; 0x5dd0
   13bd8:	movw	r0, #24020	; 0x5dd4
   13bdc:	movt	r2, #1
   13be0:	movt	r0, #1
   13be4:	b	13b5c <__assert_fail@plt+0x2b4c>
   13be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bec:	add	fp, sp, #24
   13bf0:	sub	sp, sp, #32
   13bf4:	ldr	r6, [fp, #12]
   13bf8:	ldr	r7, [fp, #8]
   13bfc:	mov	r4, r2
   13c00:	mov	r8, r0
   13c04:	cmp	r1, #0
   13c08:	beq	13c30 <__assert_fail@plt+0x2c20>
   13c0c:	movw	r2, #24108	; 0x5e2c
   13c10:	mov	r5, r1
   13c14:	str	r3, [sp, #4]
   13c18:	str	r4, [sp]
   13c1c:	mov	r0, r8
   13c20:	mov	r1, #1
   13c24:	movt	r2, #1
   13c28:	mov	r3, r5
   13c2c:	b	13c48 <__assert_fail@plt+0x2c38>
   13c30:	movw	r2, #24120	; 0x5e38
   13c34:	str	r3, [sp]
   13c38:	mov	r0, r8
   13c3c:	mov	r1, #1
   13c40:	mov	r3, r4
   13c44:	movt	r2, #1
   13c48:	bl	10f74 <__fprintf_chk@plt>
   13c4c:	movw	r1, #24127	; 0x5e3f
   13c50:	mov	r0, #0
   13c54:	mov	r2, #5
   13c58:	movt	r1, #1
   13c5c:	bl	10e3c <dcgettext@plt>
   13c60:	movw	r2, #24845	; 0x610d
   13c64:	mov	r3, r0
   13c68:	movw	r0, #2022	; 0x7e6
   13c6c:	mov	r1, #1
   13c70:	str	r0, [sp]
   13c74:	movt	r2, #1
   13c78:	mov	r0, r8
   13c7c:	bl	10f74 <__fprintf_chk@plt>
   13c80:	movw	r4, #23451	; 0x5b9b
   13c84:	mov	r1, r8
   13c88:	movt	r4, #1
   13c8c:	mov	r0, r4
   13c90:	bl	10dc4 <fputs_unlocked@plt>
   13c94:	movw	r1, #24131	; 0x5e43
   13c98:	mov	r0, #0
   13c9c:	mov	r2, #5
   13ca0:	movt	r1, #1
   13ca4:	bl	10e3c <dcgettext@plt>
   13ca8:	movw	r3, #24302	; 0x5eee
   13cac:	mov	r2, r0
   13cb0:	mov	r0, r8
   13cb4:	mov	r1, #1
   13cb8:	movt	r3, #1
   13cbc:	bl	10f74 <__fprintf_chk@plt>
   13cc0:	mov	r0, r4
   13cc4:	mov	r1, r8
   13cc8:	bl	10dc4 <fputs_unlocked@plt>
   13ccc:	cmp	r6, #9
   13cd0:	bhi	13d34 <__assert_fail@plt+0x2d24>
   13cd4:	add	r0, pc, #0
   13cd8:	ldr	pc, [r0, r6, lsl #2]
   13cdc:	andeq	r3, r1, ip, lsl #30
   13ce0:	andeq	r3, r1, r4, lsl #26
   13ce4:	andeq	r3, r1, r0, asr #26
   13ce8:	andeq	r3, r1, r8, ror #26
   13cec:	muleq	r1, r0, sp
   13cf0:			; <UNDEFINED> instruction: 0x00013db8
   13cf4:	andeq	r3, r1, r0, ror #27
   13cf8:	andeq	r3, r1, r8, lsl lr
   13cfc:			; <UNDEFINED> instruction: 0x00013eb8
   13d00:	andeq	r3, r1, r0, ror #28
   13d04:	movw	r1, #24336	; 0x5f10
   13d08:	mov	r0, #0
   13d0c:	mov	r2, #5
   13d10:	movt	r1, #1
   13d14:	bl	10e3c <dcgettext@plt>
   13d18:	ldr	r3, [r7]
   13d1c:	mov	r2, r0
   13d20:	mov	r0, r8
   13d24:	mov	r1, #1
   13d28:	sub	sp, fp, #24
   13d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d30:	b	10f74 <__fprintf_chk@plt>
   13d34:	movw	r1, #24655	; 0x604f
   13d38:	movt	r1, #1
   13d3c:	b	13e68 <__assert_fail@plt+0x2e58>
   13d40:	movw	r1, #24352	; 0x5f20
   13d44:	mov	r0, #0
   13d48:	mov	r2, #5
   13d4c:	movt	r1, #1
   13d50:	bl	10e3c <dcgettext@plt>
   13d54:	mov	r2, r0
   13d58:	ldr	r3, [r7]
   13d5c:	ldr	r0, [r7, #4]
   13d60:	str	r0, [sp]
   13d64:	b	13e54 <__assert_fail@plt+0x2e44>
   13d68:	movw	r1, #24375	; 0x5f37
   13d6c:	mov	r0, #0
   13d70:	mov	r2, #5
   13d74:	movt	r1, #1
   13d78:	bl	10e3c <dcgettext@plt>
   13d7c:	ldr	r3, [r7]
   13d80:	mov	r2, r0
   13d84:	ldmib	r7, {r0, r1}
   13d88:	stm	sp, {r0, r1}
   13d8c:	b	13e54 <__assert_fail@plt+0x2e44>
   13d90:	movw	r1, #24403	; 0x5f53
   13d94:	mov	r0, #0
   13d98:	mov	r2, #5
   13d9c:	movt	r1, #1
   13da0:	bl	10e3c <dcgettext@plt>
   13da4:	ldr	r3, [r7]
   13da8:	mov	r2, r0
   13dac:	ldmib	r7, {r0, r1, r7}
   13db0:	stm	sp, {r0, r1, r7}
   13db4:	b	13e54 <__assert_fail@plt+0x2e44>
   13db8:	movw	r1, #24435	; 0x5f73
   13dbc:	mov	r0, #0
   13dc0:	mov	r2, #5
   13dc4:	movt	r1, #1
   13dc8:	bl	10e3c <dcgettext@plt>
   13dcc:	ldr	r3, [r7]
   13dd0:	mov	r2, r0
   13dd4:	ldmib	r7, {r0, r1, r6, r7}
   13dd8:	stm	sp, {r0, r1, r6, r7}
   13ddc:	b	13e54 <__assert_fail@plt+0x2e44>
   13de0:	movw	r1, #24471	; 0x5f97
   13de4:	mov	r0, #0
   13de8:	mov	r2, #5
   13dec:	movt	r1, #1
   13df0:	bl	10e3c <dcgettext@plt>
   13df4:	ldr	r3, [r7]
   13df8:	mov	r2, r0
   13dfc:	ldmib	r7, {r0, r1, r6}
   13e00:	ldr	r5, [r7, #16]
   13e04:	ldr	r7, [r7, #20]
   13e08:	stm	sp, {r0, r1, r6}
   13e0c:	str	r5, [sp, #12]
   13e10:	str	r7, [sp, #16]
   13e14:	b	13e54 <__assert_fail@plt+0x2e44>
   13e18:	movw	r1, #24511	; 0x5fbf
   13e1c:	mov	r0, #0
   13e20:	mov	r2, #5
   13e24:	movt	r1, #1
   13e28:	bl	10e3c <dcgettext@plt>
   13e2c:	ldr	r3, [r7]
   13e30:	mov	r2, r0
   13e34:	ldmib	r7, {r0, r1, r6}
   13e38:	ldr	r5, [r7, #16]
   13e3c:	ldr	r4, [r7, #20]
   13e40:	ldr	r7, [r7, #24]
   13e44:	stm	sp, {r0, r1, r6}
   13e48:	str	r5, [sp, #12]
   13e4c:	str	r4, [sp, #16]
   13e50:	str	r7, [sp, #20]
   13e54:	mov	r0, r8
   13e58:	mov	r1, #1
   13e5c:	b	13f08 <__assert_fail@plt+0x2ef8>
   13e60:	movw	r1, #24603	; 0x601b
   13e64:	movt	r1, #1
   13e68:	mov	r0, #0
   13e6c:	mov	r2, #5
   13e70:	bl	10e3c <dcgettext@plt>
   13e74:	mov	ip, r0
   13e78:	ldr	r3, [r7]
   13e7c:	ldr	r0, [r7, #4]
   13e80:	ldr	r1, [r7, #8]
   13e84:	ldr	r6, [r7, #12]
   13e88:	ldr	r5, [r7, #16]
   13e8c:	ldr	r4, [r7, #20]
   13e90:	ldr	r2, [r7, #24]
   13e94:	ldr	lr, [r7, #28]
   13e98:	ldr	r7, [r7, #32]
   13e9c:	stm	sp, {r0, r1, r6}
   13ea0:	str	r5, [sp, #12]
   13ea4:	str	r4, [sp, #16]
   13ea8:	str	r2, [sp, #20]
   13eac:	str	lr, [sp, #24]
   13eb0:	str	r7, [sp, #28]
   13eb4:	b	13efc <__assert_fail@plt+0x2eec>
   13eb8:	movw	r1, #24555	; 0x5feb
   13ebc:	mov	r0, #0
   13ec0:	mov	r2, #5
   13ec4:	movt	r1, #1
   13ec8:	bl	10e3c <dcgettext@plt>
   13ecc:	mov	ip, r0
   13ed0:	ldr	r3, [r7]
   13ed4:	ldmib	r7, {r0, r1, r6}
   13ed8:	ldr	r5, [r7, #16]
   13edc:	ldr	r4, [r7, #20]
   13ee0:	ldr	r2, [r7, #24]
   13ee4:	ldr	r7, [r7, #28]
   13ee8:	stm	sp, {r0, r1, r6}
   13eec:	str	r5, [sp, #12]
   13ef0:	str	r4, [sp, #16]
   13ef4:	str	r2, [sp, #20]
   13ef8:	str	r7, [sp, #24]
   13efc:	mov	r0, r8
   13f00:	mov	r1, #1
   13f04:	mov	r2, ip
   13f08:	bl	10f74 <__fprintf_chk@plt>
   13f0c:	sub	sp, fp, #24
   13f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f14:	push	{r4, sl, fp, lr}
   13f18:	add	fp, sp, #8
   13f1c:	sub	sp, sp, #8
   13f20:	ldr	ip, [fp, #8]
   13f24:	mov	lr, #0
   13f28:	ldr	r4, [ip, lr, lsl #2]
   13f2c:	add	lr, lr, #1
   13f30:	cmp	r4, #0
   13f34:	bne	13f28 <__assert_fail@plt+0x2f18>
   13f38:	sub	r4, lr, #1
   13f3c:	str	ip, [sp]
   13f40:	str	r4, [sp, #4]
   13f44:	bl	13be8 <__assert_fail@plt+0x2bd8>
   13f48:	sub	sp, fp, #8
   13f4c:	pop	{r4, sl, fp, pc}
   13f50:	push	{r4, r5, fp, lr}
   13f54:	add	fp, sp, #8
   13f58:	sub	sp, sp, #48	; 0x30
   13f5c:	ldr	r4, [fp, #8]
   13f60:	mov	ip, #0
   13f64:	add	lr, sp, #8
   13f68:	ldr	r5, [r4]
   13f6c:	cmp	r5, #0
   13f70:	str	r5, [lr, ip, lsl #2]
   13f74:	beq	13f88 <__assert_fail@plt+0x2f78>
   13f78:	add	ip, ip, #1
   13f7c:	add	r4, r4, #4
   13f80:	cmp	ip, #10
   13f84:	bcc	13f68 <__assert_fail@plt+0x2f58>
   13f88:	str	lr, [sp]
   13f8c:	str	ip, [sp, #4]
   13f90:	bl	13be8 <__assert_fail@plt+0x2bd8>
   13f94:	sub	sp, fp, #8
   13f98:	pop	{r4, r5, fp, pc}
   13f9c:	push	{fp, lr}
   13fa0:	mov	fp, sp
   13fa4:	sub	sp, sp, #8
   13fa8:	add	ip, fp, #8
   13fac:	str	ip, [sp, #4]
   13fb0:	str	ip, [sp]
   13fb4:	bl	13f50 <__assert_fail@plt+0x2f40>
   13fb8:	mov	sp, fp
   13fbc:	pop	{fp, pc}
   13fc0:	push	{fp, lr}
   13fc4:	mov	fp, sp
   13fc8:	movw	r0, #28996	; 0x7144
   13fcc:	movt	r0, #2
   13fd0:	ldr	r1, [r0]
   13fd4:	movw	r0, #23451	; 0x5b9b
   13fd8:	movt	r0, #1
   13fdc:	bl	10dc4 <fputs_unlocked@plt>
   13fe0:	movw	r1, #24715	; 0x608b
   13fe4:	mov	r0, #0
   13fe8:	mov	r2, #5
   13fec:	movt	r1, #1
   13ff0:	bl	10e3c <dcgettext@plt>
   13ff4:	movw	r2, #24735	; 0x609f
   13ff8:	mov	r1, r0
   13ffc:	mov	r0, #1
   14000:	movt	r2, #1
   14004:	bl	10f5c <__printf_chk@plt>
   14008:	movw	r1, #24757	; 0x60b5
   1400c:	mov	r0, #0
   14010:	mov	r2, #5
   14014:	movt	r1, #1
   14018:	bl	10e3c <dcgettext@plt>
   1401c:	movw	r2, #22584	; 0x5838
   14020:	movw	r3, #23260	; 0x5adc
   14024:	mov	r1, r0
   14028:	mov	r0, #1
   1402c:	movt	r2, #1
   14030:	movt	r3, #1
   14034:	bl	10f5c <__printf_chk@plt>
   14038:	movw	r1, #24777	; 0x60c9
   1403c:	mov	r0, #0
   14040:	mov	r2, #5
   14044:	movt	r1, #1
   14048:	bl	10e3c <dcgettext@plt>
   1404c:	movw	r2, #24816	; 0x60f0
   14050:	mov	r1, r0
   14054:	mov	r0, #1
   14058:	movt	r2, #1
   1405c:	pop	{fp, lr}
   14060:	b	10f5c <__printf_chk@plt>
   14064:	b	14068 <__assert_fail@plt+0x3058>
   14068:	push	{r4, r5, r6, sl, fp, lr}
   1406c:	add	fp, sp, #16
   14070:	mov	r4, r2
   14074:	mov	r5, r1
   14078:	mov	r6, r0
   1407c:	bl	15068 <__assert_fail@plt+0x4058>
   14080:	cmp	r0, #0
   14084:	popne	{r4, r5, r6, sl, fp, pc}
   14088:	cmp	r6, #0
   1408c:	beq	140a0 <__assert_fail@plt+0x3090>
   14090:	cmp	r5, #0
   14094:	cmpne	r4, #0
   14098:	bne	140a0 <__assert_fail@plt+0x3090>
   1409c:	pop	{r4, r5, r6, sl, fp, pc}
   140a0:	bl	144f4 <__assert_fail@plt+0x34e4>
   140a4:	push	{fp, lr}
   140a8:	mov	fp, sp
   140ac:	bl	14d0c <__assert_fail@plt+0x3cfc>
   140b0:	cmp	r0, #0
   140b4:	popne	{fp, pc}
   140b8:	bl	144f4 <__assert_fail@plt+0x34e4>
   140bc:	push	{fp, lr}
   140c0:	mov	fp, sp
   140c4:	bl	14d0c <__assert_fail@plt+0x3cfc>
   140c8:	cmp	r0, #0
   140cc:	popne	{fp, pc}
   140d0:	bl	144f4 <__assert_fail@plt+0x34e4>
   140d4:	push	{fp, lr}
   140d8:	mov	fp, sp
   140dc:	bl	14d0c <__assert_fail@plt+0x3cfc>
   140e0:	cmp	r0, #0
   140e4:	popne	{fp, pc}
   140e8:	bl	144f4 <__assert_fail@plt+0x34e4>
   140ec:	push	{r4, r5, fp, lr}
   140f0:	add	fp, sp, #8
   140f4:	mov	r4, r1
   140f8:	mov	r5, r0
   140fc:	bl	14d3c <__assert_fail@plt+0x3d2c>
   14100:	cmp	r0, #0
   14104:	popne	{r4, r5, fp, pc}
   14108:	cmp	r5, #0
   1410c:	beq	1411c <__assert_fail@plt+0x310c>
   14110:	cmp	r4, #0
   14114:	bne	1411c <__assert_fail@plt+0x310c>
   14118:	pop	{r4, r5, fp, pc}
   1411c:	bl	144f4 <__assert_fail@plt+0x34e4>
   14120:	push	{fp, lr}
   14124:	mov	fp, sp
   14128:	cmp	r1, #0
   1412c:	orreq	r1, r1, #1
   14130:	bl	14d3c <__assert_fail@plt+0x3d2c>
   14134:	cmp	r0, #0
   14138:	popne	{fp, pc}
   1413c:	bl	144f4 <__assert_fail@plt+0x34e4>
   14140:	push	{fp, lr}
   14144:	mov	fp, sp
   14148:	clz	r3, r2
   1414c:	lsr	ip, r3, #5
   14150:	clz	r3, r1
   14154:	lsr	r3, r3, #5
   14158:	orrs	r3, r3, ip
   1415c:	movwne	r1, #1
   14160:	movwne	r2, #1
   14164:	bl	15068 <__assert_fail@plt+0x4058>
   14168:	cmp	r0, #0
   1416c:	popne	{fp, pc}
   14170:	bl	144f4 <__assert_fail@plt+0x34e4>
   14174:	push	{fp, lr}
   14178:	mov	fp, sp
   1417c:	mov	r2, r1
   14180:	mov	r1, r0
   14184:	mov	r0, #0
   14188:	bl	15068 <__assert_fail@plt+0x4058>
   1418c:	cmp	r0, #0
   14190:	popne	{fp, pc}
   14194:	bl	144f4 <__assert_fail@plt+0x34e4>
   14198:	mov	r2, r1
   1419c:	mov	r1, r0
   141a0:	mov	r0, #0
   141a4:	b	14140 <__assert_fail@plt+0x3130>
   141a8:	mov	r2, #1
   141ac:	b	141b0 <__assert_fail@plt+0x31a0>
   141b0:	push	{r4, r5, fp, lr}
   141b4:	add	fp, sp, #8
   141b8:	ldr	r5, [r1]
   141bc:	mov	r4, r1
   141c0:	cmp	r0, #0
   141c4:	beq	141dc <__assert_fail@plt+0x31cc>
   141c8:	mov	r1, #1
   141cc:	add	r1, r1, r5, lsr #1
   141d0:	adds	r5, r5, r1
   141d4:	bcc	141f4 <__assert_fail@plt+0x31e4>
   141d8:	bl	144f4 <__assert_fail@plt+0x34e4>
   141dc:	cmp	r5, #0
   141e0:	bne	141f4 <__assert_fail@plt+0x31e4>
   141e4:	mov	r1, #64	; 0x40
   141e8:	cmp	r2, #64	; 0x40
   141ec:	udiv	r5, r1, r2
   141f0:	addhi	r5, r5, #1
   141f4:	mov	r1, r5
   141f8:	bl	14068 <__assert_fail@plt+0x3058>
   141fc:	str	r5, [r4]
   14200:	pop	{r4, r5, fp, pc}
   14204:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14208:	add	fp, sp, #24
   1420c:	ldr	r6, [r1]
   14210:	mov	r8, r1
   14214:	ldr	r4, [fp, #8]
   14218:	add	r1, r6, r6, asr #1
   1421c:	cmp	r1, r6
   14220:	mvnvs	r1, #-2147483648	; 0x80000000
   14224:	cmp	r1, r3
   14228:	mov	r5, r1
   1422c:	movgt	r5, r3
   14230:	cmn	r3, #1
   14234:	movle	r5, r1
   14238:	cmn	r4, #1
   1423c:	ble	1425c <__assert_fail@plt+0x324c>
   14240:	cmp	r4, #0
   14244:	beq	142b0 <__assert_fail@plt+0x32a0>
   14248:	cmn	r5, #1
   1424c:	ble	14284 <__assert_fail@plt+0x3274>
   14250:	mvn	r7, #-2147483648	; 0x80000000
   14254:	udiv	r1, r7, r4
   14258:	b	14278 <__assert_fail@plt+0x3268>
   1425c:	cmn	r5, #1
   14260:	ble	142a0 <__assert_fail@plt+0x3290>
   14264:	cmn	r4, #1
   14268:	beq	142b0 <__assert_fail@plt+0x32a0>
   1426c:	mov	r1, #-2147483648	; 0x80000000
   14270:	mvn	r7, #-2147483648	; 0x80000000
   14274:	sdiv	r1, r1, r4
   14278:	cmp	r1, r5
   1427c:	bge	142b0 <__assert_fail@plt+0x32a0>
   14280:	b	142c0 <__assert_fail@plt+0x32b0>
   14284:	beq	142b0 <__assert_fail@plt+0x32a0>
   14288:	mov	r1, #-2147483648	; 0x80000000
   1428c:	mvn	r7, #-2147483648	; 0x80000000
   14290:	sdiv	r1, r1, r5
   14294:	cmp	r1, r4
   14298:	bge	142b0 <__assert_fail@plt+0x32a0>
   1429c:	b	142c0 <__assert_fail@plt+0x32b0>
   142a0:	mvn	r7, #-2147483648	; 0x80000000
   142a4:	sdiv	r1, r7, r4
   142a8:	cmp	r5, r1
   142ac:	blt	142c0 <__assert_fail@plt+0x32b0>
   142b0:	mul	r1, r5, r4
   142b4:	mov	r7, #64	; 0x40
   142b8:	cmp	r1, #63	; 0x3f
   142bc:	bgt	142c8 <__assert_fail@plt+0x32b8>
   142c0:	sdiv	r5, r7, r4
   142c4:	mul	r1, r5, r4
   142c8:	cmp	r0, #0
   142cc:	moveq	r7, #0
   142d0:	streq	r7, [r8]
   142d4:	sub	r7, r5, r6
   142d8:	cmp	r7, r2
   142dc:	bge	14380 <__assert_fail@plt+0x3370>
   142e0:	add	r5, r6, r2
   142e4:	mov	r2, #0
   142e8:	mov	r1, #0
   142ec:	cmp	r5, r3
   142f0:	movwgt	r2, #1
   142f4:	cmn	r3, #1
   142f8:	movwgt	r1, #1
   142fc:	cmp	r5, r6
   14300:	bvs	14368 <__assert_fail@plt+0x3358>
   14304:	ands	r1, r1, r2
   14308:	bne	14368 <__assert_fail@plt+0x3358>
   1430c:	cmn	r4, #1
   14310:	ble	14330 <__assert_fail@plt+0x3320>
   14314:	cmp	r4, #0
   14318:	beq	1437c <__assert_fail@plt+0x336c>
   1431c:	cmn	r5, #1
   14320:	ble	14354 <__assert_fail@plt+0x3344>
   14324:	mvn	r1, #-2147483648	; 0x80000000
   14328:	udiv	r1, r1, r4
   1432c:	b	14348 <__assert_fail@plt+0x3338>
   14330:	cmn	r5, #1
   14334:	ble	1436c <__assert_fail@plt+0x335c>
   14338:	cmn	r4, #1
   1433c:	beq	1437c <__assert_fail@plt+0x336c>
   14340:	mov	r1, #-2147483648	; 0x80000000
   14344:	sdiv	r1, r1, r4
   14348:	cmp	r1, r5
   1434c:	bge	1437c <__assert_fail@plt+0x336c>
   14350:	b	14368 <__assert_fail@plt+0x3358>
   14354:	beq	1437c <__assert_fail@plt+0x336c>
   14358:	mov	r1, #-2147483648	; 0x80000000
   1435c:	sdiv	r1, r1, r5
   14360:	cmp	r1, r4
   14364:	bge	1437c <__assert_fail@plt+0x336c>
   14368:	bl	144f4 <__assert_fail@plt+0x34e4>
   1436c:	mvn	r1, #-2147483648	; 0x80000000
   14370:	sdiv	r1, r1, r4
   14374:	cmp	r5, r1
   14378:	blt	14368 <__assert_fail@plt+0x3358>
   1437c:	mul	r1, r5, r4
   14380:	bl	140ec <__assert_fail@plt+0x30dc>
   14384:	str	r5, [r8]
   14388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1438c:	push	{fp, lr}
   14390:	mov	fp, sp
   14394:	mov	r1, #1
   14398:	bl	14cb8 <__assert_fail@plt+0x3ca8>
   1439c:	cmp	r0, #0
   143a0:	popne	{fp, pc}
   143a4:	bl	144f4 <__assert_fail@plt+0x34e4>
   143a8:	push	{fp, lr}
   143ac:	mov	fp, sp
   143b0:	bl	14cb8 <__assert_fail@plt+0x3ca8>
   143b4:	cmp	r0, #0
   143b8:	popne	{fp, pc}
   143bc:	bl	144f4 <__assert_fail@plt+0x34e4>
   143c0:	push	{fp, lr}
   143c4:	mov	fp, sp
   143c8:	mov	r1, #1
   143cc:	bl	14cb8 <__assert_fail@plt+0x3ca8>
   143d0:	cmp	r0, #0
   143d4:	popne	{fp, pc}
   143d8:	bl	144f4 <__assert_fail@plt+0x34e4>
   143dc:	push	{fp, lr}
   143e0:	mov	fp, sp
   143e4:	bl	14cb8 <__assert_fail@plt+0x3ca8>
   143e8:	cmp	r0, #0
   143ec:	popne	{fp, pc}
   143f0:	bl	144f4 <__assert_fail@plt+0x34e4>
   143f4:	push	{r4, r5, r6, sl, fp, lr}
   143f8:	add	fp, sp, #16
   143fc:	mov	r5, r0
   14400:	mov	r0, r1
   14404:	mov	r4, r1
   14408:	bl	14d0c <__assert_fail@plt+0x3cfc>
   1440c:	cmp	r0, #0
   14410:	beq	1442c <__assert_fail@plt+0x341c>
   14414:	mov	r1, r5
   14418:	mov	r2, r4
   1441c:	mov	r6, r0
   14420:	bl	10e0c <memcpy@plt>
   14424:	mov	r0, r6
   14428:	pop	{r4, r5, r6, sl, fp, pc}
   1442c:	bl	144f4 <__assert_fail@plt+0x34e4>
   14430:	push	{r4, r5, r6, sl, fp, lr}
   14434:	add	fp, sp, #16
   14438:	mov	r5, r0
   1443c:	mov	r0, r1
   14440:	mov	r4, r1
   14444:	bl	14d0c <__assert_fail@plt+0x3cfc>
   14448:	cmp	r0, #0
   1444c:	beq	14468 <__assert_fail@plt+0x3458>
   14450:	mov	r1, r5
   14454:	mov	r2, r4
   14458:	mov	r6, r0
   1445c:	bl	10e0c <memcpy@plt>
   14460:	mov	r0, r6
   14464:	pop	{r4, r5, r6, sl, fp, pc}
   14468:	bl	144f4 <__assert_fail@plt+0x34e4>
   1446c:	push	{r4, r5, r6, sl, fp, lr}
   14470:	add	fp, sp, #16
   14474:	mov	r5, r0
   14478:	add	r0, r1, #1
   1447c:	mov	r4, r1
   14480:	bl	14d0c <__assert_fail@plt+0x3cfc>
   14484:	cmp	r0, #0
   14488:	beq	144b0 <__assert_fail@plt+0x34a0>
   1448c:	mov	r6, r0
   14490:	mov	r0, #0
   14494:	mov	r1, r5
   14498:	mov	r2, r4
   1449c:	strb	r0, [r6, r4]
   144a0:	mov	r0, r6
   144a4:	bl	10e0c <memcpy@plt>
   144a8:	mov	r0, r6
   144ac:	pop	{r4, r5, r6, sl, fp, pc}
   144b0:	bl	144f4 <__assert_fail@plt+0x34e4>
   144b4:	push	{r4, r5, r6, sl, fp, lr}
   144b8:	add	fp, sp, #16
   144bc:	mov	r4, r0
   144c0:	bl	10f20 <strlen@plt>
   144c4:	add	r5, r0, #1
   144c8:	mov	r0, r5
   144cc:	bl	14d0c <__assert_fail@plt+0x3cfc>
   144d0:	cmp	r0, #0
   144d4:	beq	144f0 <__assert_fail@plt+0x34e0>
   144d8:	mov	r1, r4
   144dc:	mov	r2, r5
   144e0:	mov	r6, r0
   144e4:	bl	10e0c <memcpy@plt>
   144e8:	mov	r0, r6
   144ec:	pop	{r4, r5, r6, sl, fp, pc}
   144f0:	bl	144f4 <__assert_fail@plt+0x34e4>
   144f4:	push	{fp, lr}
   144f8:	mov	fp, sp
   144fc:	movw	r0, #28908	; 0x70ec
   14500:	movw	r1, #24892	; 0x613c
   14504:	mov	r2, #5
   14508:	movt	r0, #2
   1450c:	movt	r1, #1
   14510:	ldr	r4, [r0]
   14514:	mov	r0, #0
   14518:	bl	10e3c <dcgettext@plt>
   1451c:	movw	r2, #23855	; 0x5d2f
   14520:	mov	r3, r0
   14524:	mov	r0, r4
   14528:	mov	r1, #0
   1452c:	movt	r2, #1
   14530:	bl	10eb4 <error@plt>
   14534:	bl	10ff8 <abort@plt>
   14538:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1453c:	add	fp, sp, #24
   14540:	sub	sp, sp, #16
   14544:	mov	r8, r0
   14548:	ldr	r0, [fp, #16]
   1454c:	mov	r7, r3
   14550:	mov	r4, r2
   14554:	mov	r2, r1
   14558:	add	r3, sp, #8
   1455c:	mov	r1, #0
   14560:	str	r0, [sp]
   14564:	mov	r0, r8
   14568:	bl	1464c <__assert_fail@plt+0x363c>
   1456c:	cmp	r0, #0
   14570:	bne	14620 <__assert_fail@plt+0x3610>
   14574:	ldr	r6, [sp, #8]
   14578:	ldr	r5, [sp, #12]
   1457c:	subs	r0, r6, r4
   14580:	sbcs	r0, r5, r7
   14584:	blt	145a8 <__assert_fail@plt+0x3598>
   14588:	ldr	r1, [fp, #8]
   1458c:	ldr	r0, [fp, #12]
   14590:	subs	r1, r1, r6
   14594:	sbcs	r0, r0, r5
   14598:	movge	r0, r6
   1459c:	movge	r1, r5
   145a0:	subge	sp, fp, #24
   145a4:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   145a8:	subs	r0, r6, #1073741824	; 0x40000000
   145ac:	sbcs	r0, r5, #0
   145b0:	blt	145bc <__assert_fail@plt+0x35ac>
   145b4:	bl	10f38 <__errno_location@plt>
   145b8:	b	145d4 <__assert_fail@plt+0x35c4>
   145bc:	bl	10f38 <__errno_location@plt>
   145c0:	mvn	r2, #1073741824	; 0x40000000
   145c4:	mvn	r1, #0
   145c8:	subs	r2, r2, r6
   145cc:	sbcs	r1, r1, r5
   145d0:	blt	145dc <__assert_fail@plt+0x35cc>
   145d4:	mov	r1, #75	; 0x4b
   145d8:	b	145e0 <__assert_fail@plt+0x35d0>
   145dc:	mov	r1, #34	; 0x22
   145e0:	str	r1, [r0]
   145e4:	ldr	r6, [r0]
   145e8:	ldr	r4, [fp, #24]
   145ec:	ldr	r5, [fp, #20]
   145f0:	mov	r0, r8
   145f4:	bl	13ab0 <__assert_fail@plt+0x2aa0>
   145f8:	subs	r1, r6, #22
   145fc:	movw	r2, #23851	; 0x5d2b
   14600:	str	r0, [sp]
   14604:	mov	r3, r5
   14608:	movne	r1, r6
   1460c:	cmp	r4, #0
   14610:	movt	r2, #1
   14614:	movweq	r4, #1
   14618:	mov	r0, r4
   1461c:	bl	10eb4 <error@plt>
   14620:	cmp	r0, #1
   14624:	beq	145b4 <__assert_fail@plt+0x35a4>
   14628:	cmp	r0, #3
   1462c:	bne	1463c <__assert_fail@plt+0x362c>
   14630:	bl	10f38 <__errno_location@plt>
   14634:	mov	r1, #0
   14638:	b	145e0 <__assert_fail@plt+0x35d0>
   1463c:	bl	10f38 <__errno_location@plt>
   14640:	b	145e4 <__assert_fail@plt+0x35d4>
   14644:	mov	r1, #10
   14648:	b	14538 <__assert_fail@plt+0x3528>
   1464c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14650:	add	fp, sp, #28
   14654:	sub	sp, sp, #28
   14658:	cmp	r2, #37	; 0x25
   1465c:	str	r3, [sp, #12]
   14660:	bcs	14b70 <__assert_fail@plt+0x3b60>
   14664:	ldr	sl, [fp, #8]
   14668:	mov	r4, r2
   1466c:	mov	r6, r1
   14670:	mov	r5, r0
   14674:	bl	10f38 <__errno_location@plt>
   14678:	add	r8, sp, #24
   1467c:	cmp	r6, #0
   14680:	mov	r7, r0
   14684:	mov	r0, #0
   14688:	mov	r2, r4
   1468c:	movne	r8, r6
   14690:	str	r0, [r7]
   14694:	mov	r0, r5
   14698:	mov	r1, r8
   1469c:	bl	10f80 <strtoimax@plt>
   146a0:	str	r1, [sp, #20]
   146a4:	str	r0, [sp, #16]
   146a8:	ldr	r4, [r8]
   146ac:	cmp	r4, r5
   146b0:	beq	146dc <__assert_fail@plt+0x36cc>
   146b4:	mov	r6, r0
   146b8:	ldr	r0, [r7]
   146bc:	mov	r9, r1
   146c0:	cmp	r0, #0
   146c4:	beq	14718 <__assert_fail@plt+0x3708>
   146c8:	mov	r7, #4
   146cc:	cmp	r0, #34	; 0x22
   146d0:	bne	14b64 <__assert_fail@plt+0x3b54>
   146d4:	mov	r7, #1
   146d8:	b	1471c <__assert_fail@plt+0x370c>
   146dc:	cmp	sl, #0
   146e0:	mov	r7, #4
   146e4:	ldrbne	r1, [r5]
   146e8:	cmpne	r1, #0
   146ec:	beq	14b64 <__assert_fail@plt+0x3b54>
   146f0:	mov	r0, sl
   146f4:	bl	10f2c <strchr@plt>
   146f8:	cmp	r0, #0
   146fc:	beq	14b64 <__assert_fail@plt+0x3b54>
   14700:	mov	r9, #0
   14704:	mov	r6, #1
   14708:	mov	r7, #0
   1470c:	str	r9, [sp, #20]
   14710:	str	r6, [sp, #16]
   14714:	b	14724 <__assert_fail@plt+0x3714>
   14718:	mov	r7, r0
   1471c:	cmp	sl, #0
   14720:	beq	147c8 <__assert_fail@plt+0x37b8>
   14724:	ldrb	r5, [r4]
   14728:	cmp	r5, #0
   1472c:	beq	147d0 <__assert_fail@plt+0x37c0>
   14730:	mov	r0, sl
   14734:	mov	r1, r5
   14738:	bl	10f2c <strchr@plt>
   1473c:	cmp	r0, #0
   14740:	beq	147d8 <__assert_fail@plt+0x37c8>
   14744:	sub	r0, r5, #69	; 0x45
   14748:	str	r7, [sp, #4]
   1474c:	mov	r1, #1
   14750:	mov	r7, #1024	; 0x400
   14754:	cmp	r0, #21
   14758:	str	r1, [sp, #8]
   1475c:	bhi	14774 <__assert_fail@plt+0x3764>
   14760:	movw	r2, #35141	; 0x8945
   14764:	mov	r1, #1
   14768:	movt	r2, #48	; 0x30
   1476c:	tst	r2, r1, lsl r0
   14770:	bne	14790 <__assert_fail@plt+0x3780>
   14774:	sub	r0, r5, #103	; 0x67
   14778:	cmp	r0, #13
   1477c:	bhi	147e8 <__assert_fail@plt+0x37d8>
   14780:	mov	r1, #1
   14784:	movw	r2, #8273	; 0x2051
   14788:	tst	r2, r1, lsl r0
   1478c:	beq	147e8 <__assert_fail@plt+0x37d8>
   14790:	ldr	r0, [fp, #8]
   14794:	mov	r1, #48	; 0x30
   14798:	bl	10f2c <strchr@plt>
   1479c:	cmp	r0, #0
   147a0:	beq	147e8 <__assert_fail@plt+0x37d8>
   147a4:	ldrb	r0, [r4, #1]
   147a8:	ldr	sl, [sp, #12]
   147ac:	cmp	r0, #66	; 0x42
   147b0:	cmpne	r0, #68	; 0x44
   147b4:	bne	148bc <__assert_fail@plt+0x38ac>
   147b8:	mov	r0, #2
   147bc:	mov	r7, #1000	; 0x3e8
   147c0:	str	r0, [sp, #8]
   147c4:	b	147ec <__assert_fail@plt+0x37dc>
   147c8:	ldr	r0, [sp, #12]
   147cc:	b	147e0 <__assert_fail@plt+0x37d0>
   147d0:	ldr	sl, [sp, #12]
   147d4:	b	14b60 <__assert_fail@plt+0x3b50>
   147d8:	ldr	r0, [sp, #12]
   147dc:	orr	r7, r7, #2
   147e0:	stm	r0, {r6, r9}
   147e4:	b	14b64 <__assert_fail@plt+0x3b54>
   147e8:	ldr	sl, [sp, #12]
   147ec:	cmp	r5, #89	; 0x59
   147f0:	bgt	14858 <__assert_fail@plt+0x3848>
   147f4:	sub	r0, r5, #66	; 0x42
   147f8:	cmp	r0, #14
   147fc:	bhi	148dc <__assert_fail@plt+0x38cc>
   14800:	add	r1, pc, #0
   14804:	ldr	pc, [r1, r0, lsl #2]
   14808:	andeq	r4, r1, r4, asr #16
   1480c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14810:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14814:	andeq	r4, r1, r4, lsl #20
   14818:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1481c:	andeq	r4, r1, r8, lsr r9
   14820:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14824:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14828:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1482c:	andeq	r4, r1, r0, ror #18
   14830:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14834:	andeq	r4, r1, r4, ror r9
   14838:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1483c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14840:	andeq	r4, r1, ip, lsr #20
   14844:	cmn	r9, #1
   14848:	ble	14a54 <__assert_fail@plt+0x3a44>
   1484c:	cmp	r9, #2097152	; 0x200000
   14850:	blt	14a80 <__assert_fail@plt+0x3a70>
   14854:	b	14b00 <__assert_fail@plt+0x3af0>
   14858:	cmp	r5, #115	; 0x73
   1485c:	bgt	14914 <__assert_fail@plt+0x3904>
   14860:	sub	r0, r5, #98	; 0x62
   14864:	cmp	r0, #11
   14868:	bhi	149c4 <__assert_fail@plt+0x39b4>
   1486c:	add	r1, pc, #4
   14870:	mov	r4, #0
   14874:	ldr	pc, [r1, r0, lsl #2]
   14878:	andeq	r4, r1, r8, lsr #17
   1487c:	andeq	r4, r1, r4, lsr fp
   14880:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14884:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14888:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1488c:	andeq	r4, r1, r8, lsr r9
   14890:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14894:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14898:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1489c:	andeq	r4, r1, r0, ror #18
   148a0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a4:	andeq	r4, r1, r4, ror r9
   148a8:	cmn	r9, #1
   148ac:	ble	14a94 <__assert_fail@plt+0x3a84>
   148b0:	cmp	r9, #4194304	; 0x400000
   148b4:	blt	14ac0 <__assert_fail@plt+0x3ab0>
   148b8:	b	14b00 <__assert_fail@plt+0x3af0>
   148bc:	cmp	r0, #105	; 0x69
   148c0:	bne	147ec <__assert_fail@plt+0x37dc>
   148c4:	ldrb	r0, [r4, #2]
   148c8:	mov	r1, #1
   148cc:	cmp	r0, #66	; 0x42
   148d0:	movweq	r1, #3
   148d4:	str	r1, [sp, #8]
   148d8:	b	147ec <__assert_fail@plt+0x37dc>
   148dc:	cmp	r5, #84	; 0x54
   148e0:	beq	1499c <__assert_fail@plt+0x398c>
   148e4:	cmp	r5, #89	; 0x59
   148e8:	bne	149f4 <__assert_fail@plt+0x39e4>
   148ec:	mov	r4, #0
   148f0:	mvn	r6, #7
   148f4:	add	r5, sp, #16
   148f8:	mov	r0, r5
   148fc:	mov	r1, r7
   14900:	bl	14b90 <__assert_fail@plt+0x3b80>
   14904:	orr	r4, r0, r4
   14908:	adds	r6, r6, #1
   1490c:	bne	148f8 <__assert_fail@plt+0x38e8>
   14910:	b	14b34 <__assert_fail@plt+0x3b24>
   14914:	cmp	r5, #116	; 0x74
   14918:	beq	1499c <__assert_fail@plt+0x398c>
   1491c:	cmp	r5, #119	; 0x77
   14920:	bne	149f4 <__assert_fail@plt+0x39e4>
   14924:	cmn	r9, #1
   14928:	ble	14ad4 <__assert_fail@plt+0x3ac4>
   1492c:	cmp	r9, #1073741824	; 0x40000000
   14930:	bge	14b00 <__assert_fail@plt+0x3af0>
   14934:	b	14b1c <__assert_fail@plt+0x3b0c>
   14938:	mov	r4, #0
   1493c:	mvn	r6, #2
   14940:	add	r5, sp, #16
   14944:	mov	r0, r5
   14948:	mov	r1, r7
   1494c:	bl	14b90 <__assert_fail@plt+0x3b80>
   14950:	orr	r4, r0, r4
   14954:	adds	r6, r6, #1
   14958:	bne	14944 <__assert_fail@plt+0x3934>
   1495c:	b	14b34 <__assert_fail@plt+0x3b24>
   14960:	add	r0, sp, #16
   14964:	mov	r1, r7
   14968:	bl	14b90 <__assert_fail@plt+0x3b80>
   1496c:	mov	r4, r0
   14970:	b	14b34 <__assert_fail@plt+0x3b24>
   14974:	mov	r4, #0
   14978:	mvn	r6, #1
   1497c:	add	r5, sp, #16
   14980:	mov	r0, r5
   14984:	mov	r1, r7
   14988:	bl	14b90 <__assert_fail@plt+0x3b80>
   1498c:	orr	r4, r0, r4
   14990:	adds	r6, r6, #1
   14994:	bne	14980 <__assert_fail@plt+0x3970>
   14998:	b	14b34 <__assert_fail@plt+0x3b24>
   1499c:	mov	r4, #0
   149a0:	mvn	r6, #3
   149a4:	add	r5, sp, #16
   149a8:	mov	r0, r5
   149ac:	mov	r1, r7
   149b0:	bl	14b90 <__assert_fail@plt+0x3b80>
   149b4:	orr	r4, r0, r4
   149b8:	adds	r6, r6, #1
   149bc:	bne	149a8 <__assert_fail@plt+0x3998>
   149c0:	b	14b34 <__assert_fail@plt+0x3b24>
   149c4:	cmp	r5, #90	; 0x5a
   149c8:	bne	149f4 <__assert_fail@plt+0x39e4>
   149cc:	mov	r4, #0
   149d0:	mvn	r6, #6
   149d4:	add	r5, sp, #16
   149d8:	mov	r0, r5
   149dc:	mov	r1, r7
   149e0:	bl	14b90 <__assert_fail@plt+0x3b80>
   149e4:	orr	r4, r0, r4
   149e8:	adds	r6, r6, #1
   149ec:	bne	149d8 <__assert_fail@plt+0x39c8>
   149f0:	b	14b34 <__assert_fail@plt+0x3b24>
   149f4:	stm	sl, {r6, r9}
   149f8:	ldr	r7, [sp, #4]
   149fc:	orr	r7, r7, #2
   14a00:	b	14b64 <__assert_fail@plt+0x3b54>
   14a04:	mov	r4, #0
   14a08:	mvn	r6, #5
   14a0c:	add	r5, sp, #16
   14a10:	mov	r0, r5
   14a14:	mov	r1, r7
   14a18:	bl	14b90 <__assert_fail@plt+0x3b80>
   14a1c:	orr	r4, r0, r4
   14a20:	adds	r6, r6, #1
   14a24:	bne	14a10 <__assert_fail@plt+0x3a00>
   14a28:	b	14b34 <__assert_fail@plt+0x3b24>
   14a2c:	mov	r4, #0
   14a30:	mvn	r6, #4
   14a34:	add	r5, sp, #16
   14a38:	mov	r0, r5
   14a3c:	mov	r1, r7
   14a40:	bl	14b90 <__assert_fail@plt+0x3b80>
   14a44:	orr	r4, r0, r4
   14a48:	adds	r6, r6, #1
   14a4c:	bne	14a38 <__assert_fail@plt+0x3a28>
   14a50:	b	14b34 <__assert_fail@plt+0x3b24>
   14a54:	and	r0, r6, r9
   14a58:	cmn	r0, #1
   14a5c:	beq	14a80 <__assert_fail@plt+0x3a70>
   14a60:	mov	r0, #0
   14a64:	mov	r1, #-2147483648	; 0x80000000
   14a68:	mov	r2, r6
   14a6c:	mov	r3, r9
   14a70:	bl	1519c <__assert_fail@plt+0x418c>
   14a74:	subs	r0, r0, #1024	; 0x400
   14a78:	sbcs	r0, r1, #0
   14a7c:	blt	14b00 <__assert_fail@plt+0x3af0>
   14a80:	lsl	r0, r9, #10
   14a84:	lsl	r1, r6, #10
   14a88:	mov	r4, #0
   14a8c:	orr	r0, r0, r6, lsr #22
   14a90:	b	14b2c <__assert_fail@plt+0x3b1c>
   14a94:	and	r0, r6, r9
   14a98:	cmn	r0, #1
   14a9c:	beq	14ac0 <__assert_fail@plt+0x3ab0>
   14aa0:	mov	r0, #0
   14aa4:	mov	r1, #-2147483648	; 0x80000000
   14aa8:	mov	r2, r6
   14aac:	mov	r3, r9
   14ab0:	bl	1519c <__assert_fail@plt+0x418c>
   14ab4:	subs	r0, r0, #512	; 0x200
   14ab8:	sbcs	r0, r1, #0
   14abc:	blt	14b00 <__assert_fail@plt+0x3af0>
   14ac0:	lsl	r0, r9, #9
   14ac4:	lsl	r1, r6, #9
   14ac8:	mov	r4, #0
   14acc:	orr	r0, r0, r6, lsr #23
   14ad0:	b	14b2c <__assert_fail@plt+0x3b1c>
   14ad4:	and	r0, r6, r9
   14ad8:	cmn	r0, #1
   14adc:	beq	14b1c <__assert_fail@plt+0x3b0c>
   14ae0:	mov	r0, #0
   14ae4:	mov	r1, #-2147483648	; 0x80000000
   14ae8:	mov	r2, r6
   14aec:	mov	r3, r9
   14af0:	bl	1519c <__assert_fail@plt+0x418c>
   14af4:	subs	r0, r0, #2
   14af8:	sbcs	r0, r1, #0
   14afc:	bge	14b1c <__assert_fail@plt+0x3b0c>
   14b00:	mvn	r0, #-2147483648	; 0x80000000
   14b04:	cmp	r9, #0
   14b08:	mvn	r1, #0
   14b0c:	mov	r4, #1
   14b10:	movlt	r0, #-2147483648	; 0x80000000
   14b14:	movwlt	r1, #0
   14b18:	b	14b2c <__assert_fail@plt+0x3b1c>
   14b1c:	lsl	r0, r9, #1
   14b20:	lsl	r1, r6, #1
   14b24:	mov	r4, #0
   14b28:	orr	r0, r0, r6, lsr #31
   14b2c:	str	r1, [sp, #16]
   14b30:	str	r0, [sp, #20]
   14b34:	ldr	r0, [r8]
   14b38:	ldr	r2, [sp, #8]
   14b3c:	ldr	r7, [sp, #4]
   14b40:	add	r1, r0, r2
   14b44:	orr	r7, r4, r7
   14b48:	str	r1, [r8]
   14b4c:	ldrb	r0, [r0, r2]
   14b50:	ldr	r6, [sp, #16]
   14b54:	ldr	r9, [sp, #20]
   14b58:	cmp	r0, #0
   14b5c:	orrne	r7, r7, #2
   14b60:	stm	sl, {r6, r9}
   14b64:	mov	r0, r7
   14b68:	sub	sp, fp, #28
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b70:	movw	r0, #24909	; 0x614d
   14b74:	movw	r1, #24947	; 0x6173
   14b78:	movw	r3, #24963	; 0x6183
   14b7c:	mov	r2, #85	; 0x55
   14b80:	movt	r0, #1
   14b84:	movt	r1, #1
   14b88:	movt	r3, #1
   14b8c:	bl	11010 <__assert_fail@plt>
   14b90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b94:	add	fp, sp, #24
   14b98:	mov	r5, r1
   14b9c:	mov	r4, r0
   14ba0:	cmn	r1, #1
   14ba4:	ble	14bdc <__assert_fail@plt+0x3bcc>
   14ba8:	ldrd	r8, [r4]
   14bac:	cmp	r5, #0
   14bb0:	beq	14c14 <__assert_fail@plt+0x3c04>
   14bb4:	cmn	r9, #1
   14bb8:	ble	14c20 <__assert_fail@plt+0x3c10>
   14bbc:	asr	r3, r5, #31
   14bc0:	mvn	r0, #0
   14bc4:	mvn	r1, #-2147483648	; 0x80000000
   14bc8:	mov	r2, r5
   14bcc:	bl	1519c <__assert_fail@plt+0x418c>
   14bd0:	subs	r0, r0, r8
   14bd4:	sbcs	r0, r1, r9
   14bd8:	b	14c50 <__assert_fail@plt+0x3c40>
   14bdc:	ldrd	r6, [r4]
   14be0:	cmn	r7, #1
   14be4:	ble	14c78 <__assert_fail@plt+0x3c68>
   14be8:	cmn	r5, #1
   14bec:	beq	14c98 <__assert_fail@plt+0x3c88>
   14bf0:	asr	r3, r5, #31
   14bf4:	mov	r0, #0
   14bf8:	mov	r1, #-2147483648	; 0x80000000
   14bfc:	mov	r2, r5
   14c00:	bl	1519c <__assert_fail@plt+0x418c>
   14c04:	subs	r0, r0, r6
   14c08:	sbcs	r0, r1, r7
   14c0c:	blt	14c5c <__assert_fail@plt+0x3c4c>
   14c10:	b	14c98 <__assert_fail@plt+0x3c88>
   14c14:	mov	r6, r8
   14c18:	mov	r7, r9
   14c1c:	b	14c98 <__assert_fail@plt+0x3c88>
   14c20:	and	r0, r8, r9
   14c24:	mvn	r6, #0
   14c28:	mvn	r7, #0
   14c2c:	cmn	r0, #1
   14c30:	beq	14c98 <__assert_fail@plt+0x3c88>
   14c34:	mov	r0, #0
   14c38:	mov	r1, #-2147483648	; 0x80000000
   14c3c:	mov	r2, r8
   14c40:	mov	r3, r9
   14c44:	bl	1519c <__assert_fail@plt+0x418c>
   14c48:	subs	r0, r0, r5
   14c4c:	sbcs	r0, r1, r5, asr #31
   14c50:	mov	r7, r9
   14c54:	mov	r6, r8
   14c58:	bge	14c98 <__assert_fail@plt+0x3c88>
   14c5c:	mvn	r1, #-2147483648	; 0x80000000
   14c60:	cmp	r7, #0
   14c64:	mvn	r2, #0
   14c68:	mov	r0, #1
   14c6c:	movlt	r1, #-2147483648	; 0x80000000
   14c70:	movwlt	r2, #0
   14c74:	b	14cac <__assert_fail@plt+0x3c9c>
   14c78:	asr	r3, r5, #31
   14c7c:	mvn	r0, #0
   14c80:	mvn	r1, #-2147483648	; 0x80000000
   14c84:	mov	r2, r5
   14c88:	bl	1519c <__assert_fail@plt+0x418c>
   14c8c:	subs	r0, r6, r0
   14c90:	sbcs	r0, r7, r1
   14c94:	blt	14c5c <__assert_fail@plt+0x3c4c>
   14c98:	umull	r2, r0, r6, r5
   14c9c:	asr	r1, r5, #31
   14ca0:	mla	r0, r6, r1, r0
   14ca4:	mla	r1, r7, r5, r0
   14ca8:	mov	r0, #0
   14cac:	str	r2, [r4]
   14cb0:	str	r1, [r4, #4]
   14cb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14cb8:	clz	r2, r1
   14cbc:	clz	r3, r0
   14cc0:	lsr	r2, r2, #5
   14cc4:	lsr	r3, r3, #5
   14cc8:	orrs	r2, r3, r2
   14ccc:	movwne	r1, #1
   14cd0:	movwne	r0, #1
   14cd4:	cmp	r1, #0
   14cd8:	beq	14d08 <__assert_fail@plt+0x3cf8>
   14cdc:	mvn	r2, #-2147483648	; 0x80000000
   14ce0:	udiv	r2, r2, r1
   14ce4:	cmp	r2, r0
   14ce8:	bcs	14d08 <__assert_fail@plt+0x3cf8>
   14cec:	push	{fp, lr}
   14cf0:	mov	fp, sp
   14cf4:	bl	10f38 <__errno_location@plt>
   14cf8:	mov	r1, #12
   14cfc:	str	r1, [r0]
   14d00:	mov	r0, #0
   14d04:	pop	{fp, pc}
   14d08:	b	10db8 <calloc@plt>
   14d0c:	cmp	r0, #0
   14d10:	movweq	r0, #1
   14d14:	cmn	r0, #1
   14d18:	ble	14d20 <__assert_fail@plt+0x3d10>
   14d1c:	b	10ecc <malloc@plt>
   14d20:	push	{fp, lr}
   14d24:	mov	fp, sp
   14d28:	bl	10f38 <__errno_location@plt>
   14d2c:	mov	r1, #12
   14d30:	str	r1, [r0]
   14d34:	mov	r0, #0
   14d38:	pop	{fp, pc}
   14d3c:	push	{fp, lr}
   14d40:	mov	fp, sp
   14d44:	cmp	r0, #0
   14d48:	beq	14d64 <__assert_fail@plt+0x3d54>
   14d4c:	cmp	r1, #0
   14d50:	beq	14d70 <__assert_fail@plt+0x3d60>
   14d54:	cmn	r1, #1
   14d58:	ble	14d78 <__assert_fail@plt+0x3d68>
   14d5c:	pop	{fp, lr}
   14d60:	b	10e48 <realloc@plt>
   14d64:	mov	r0, r1
   14d68:	pop	{fp, lr}
   14d6c:	b	14d0c <__assert_fail@plt+0x3cfc>
   14d70:	bl	14f04 <__assert_fail@plt+0x3ef4>
   14d74:	b	14d84 <__assert_fail@plt+0x3d74>
   14d78:	bl	10f38 <__errno_location@plt>
   14d7c:	mov	r1, #12
   14d80:	str	r1, [r0]
   14d84:	mov	r0, #0
   14d88:	pop	{fp, pc}
   14d8c:	push	{r4, r5, r6, sl, fp, lr}
   14d90:	add	fp, sp, #16
   14d94:	mov	r4, r0
   14d98:	bl	10e90 <__fpending@plt>
   14d9c:	mov	r5, r0
   14da0:	mov	r0, r4
   14da4:	bl	10e9c <ferror_unlocked@plt>
   14da8:	mov	r6, r0
   14dac:	mov	r0, r4
   14db0:	bl	14e0c <__assert_fail@plt+0x3dfc>
   14db4:	cmp	r6, #0
   14db8:	beq	14dd8 <__assert_fail@plt+0x3dc8>
   14dbc:	mvn	r4, #0
   14dc0:	cmp	r0, #0
   14dc4:	bne	14e04 <__assert_fail@plt+0x3df4>
   14dc8:	bl	10f38 <__errno_location@plt>
   14dcc:	mov	r1, #0
   14dd0:	str	r1, [r0]
   14dd4:	b	14e04 <__assert_fail@plt+0x3df4>
   14dd8:	cmp	r0, #0
   14ddc:	mov	r4, r0
   14de0:	mvnne	r4, #0
   14de4:	cmp	r5, #0
   14de8:	bne	14e04 <__assert_fail@plt+0x3df4>
   14dec:	cmp	r0, #0
   14df0:	beq	14e04 <__assert_fail@plt+0x3df4>
   14df4:	bl	10f38 <__errno_location@plt>
   14df8:	ldr	r0, [r0]
   14dfc:	subs	r4, r0, #9
   14e00:	mvnne	r4, #0
   14e04:	mov	r0, r4
   14e08:	pop	{r4, r5, r6, sl, fp, pc}
   14e0c:	push	{r4, r5, r6, sl, fp, lr}
   14e10:	add	fp, sp, #16
   14e14:	sub	sp, sp, #8
   14e18:	mov	r4, r0
   14e1c:	bl	10f68 <fileno@plt>
   14e20:	cmn	r0, #1
   14e24:	ble	14e98 <__assert_fail@plt+0x3e88>
   14e28:	mov	r0, r4
   14e2c:	bl	10ee4 <__freading@plt>
   14e30:	cmp	r0, #0
   14e34:	beq	14e60 <__assert_fail@plt+0x3e50>
   14e38:	mov	r0, r4
   14e3c:	bl	10f68 <fileno@plt>
   14e40:	mov	r1, #1
   14e44:	mov	r2, #0
   14e48:	mov	r3, #0
   14e4c:	str	r1, [sp]
   14e50:	bl	10e78 <lseek64@plt>
   14e54:	and	r0, r0, r1
   14e58:	cmn	r0, #1
   14e5c:	beq	14e98 <__assert_fail@plt+0x3e88>
   14e60:	mov	r0, r4
   14e64:	bl	14ea8 <__assert_fail@plt+0x3e98>
   14e68:	cmp	r0, #0
   14e6c:	beq	14e98 <__assert_fail@plt+0x3e88>
   14e70:	bl	10f38 <__errno_location@plt>
   14e74:	ldr	r6, [r0]
   14e78:	mov	r5, r0
   14e7c:	mov	r0, r4
   14e80:	bl	10f8c <fclose@plt>
   14e84:	cmp	r6, #0
   14e88:	strne	r6, [r5]
   14e8c:	mvnne	r0, #0
   14e90:	sub	sp, fp, #16
   14e94:	pop	{r4, r5, r6, sl, fp, pc}
   14e98:	mov	r0, r4
   14e9c:	sub	sp, fp, #16
   14ea0:	pop	{r4, r5, r6, sl, fp, lr}
   14ea4:	b	10f8c <fclose@plt>
   14ea8:	push	{r4, sl, fp, lr}
   14eac:	add	fp, sp, #8
   14eb0:	sub	sp, sp, #8
   14eb4:	mov	r4, r0
   14eb8:	cmp	r0, #0
   14ebc:	beq	14ed8 <__assert_fail@plt+0x3ec8>
   14ec0:	mov	r0, r4
   14ec4:	bl	10ee4 <__freading@plt>
   14ec8:	cmp	r0, #0
   14ecc:	ldrbne	r0, [r4, #1]
   14ed0:	tstne	r0, #1
   14ed4:	bne	14ee8 <__assert_fail@plt+0x3ed8>
   14ed8:	mov	r0, r4
   14edc:	sub	sp, fp, #8
   14ee0:	pop	{r4, sl, fp, lr}
   14ee4:	b	10de8 <fflush@plt>
   14ee8:	mov	r0, #1
   14eec:	mov	r2, #0
   14ef0:	mov	r3, #0
   14ef4:	str	r0, [sp]
   14ef8:	mov	r0, r4
   14efc:	bl	14f2c <__assert_fail@plt+0x3f1c>
   14f00:	b	14ed8 <__assert_fail@plt+0x3ec8>
   14f04:	push	{r4, r5, r6, sl, fp, lr}
   14f08:	add	fp, sp, #16
   14f0c:	mov	r4, r0
   14f10:	bl	10f38 <__errno_location@plt>
   14f14:	ldr	r6, [r0]
   14f18:	mov	r5, r0
   14f1c:	mov	r0, r4
   14f20:	bl	10df4 <free@plt>
   14f24:	str	r6, [r5]
   14f28:	pop	{r4, r5, r6, sl, fp, pc}
   14f2c:	push	{r4, r5, r6, r7, fp, lr}
   14f30:	add	fp, sp, #16
   14f34:	sub	sp, sp, #8
   14f38:	mov	r4, r0
   14f3c:	ldr	r0, [r0, #4]
   14f40:	mov	r5, r3
   14f44:	mov	r6, r2
   14f48:	ldr	r1, [r4, #8]
   14f4c:	cmp	r1, r0
   14f50:	bne	14f6c <__assert_fail@plt+0x3f5c>
   14f54:	ldrd	r0, [r4, #16]
   14f58:	cmp	r1, r0
   14f5c:	bne	14f6c <__assert_fail@plt+0x3f5c>
   14f60:	ldr	r0, [r4, #36]	; 0x24
   14f64:	cmp	r0, #0
   14f68:	beq	14f84 <__assert_fail@plt+0x3f74>
   14f6c:	mov	r0, r4
   14f70:	mov	r2, r6
   14f74:	mov	r3, r5
   14f78:	sub	sp, fp, #16
   14f7c:	pop	{r4, r5, r6, r7, fp, lr}
   14f80:	b	10f98 <fseeko64@plt>
   14f84:	ldr	r7, [fp, #8]
   14f88:	mov	r0, r4
   14f8c:	bl	10f68 <fileno@plt>
   14f90:	mov	r2, r6
   14f94:	mov	r3, r5
   14f98:	str	r7, [sp]
   14f9c:	bl	10e78 <lseek64@plt>
   14fa0:	and	r2, r0, r1
   14fa4:	cmn	r2, #1
   14fa8:	beq	14fc4 <__assert_fail@plt+0x3fb4>
   14fac:	strd	r0, [r4, #80]	; 0x50
   14fb0:	ldr	r0, [r4]
   14fb4:	bic	r0, r0, #16
   14fb8:	str	r0, [r4]
   14fbc:	mov	r0, #0
   14fc0:	b	14fc8 <__assert_fail@plt+0x3fb8>
   14fc4:	mvn	r0, #0
   14fc8:	sub	sp, fp, #16
   14fcc:	pop	{r4, r5, r6, r7, fp, pc}
   14fd0:	push	{fp, lr}
   14fd4:	mov	fp, sp
   14fd8:	mov	r0, #14
   14fdc:	bl	10fbc <nl_langinfo@plt>
   14fe0:	movw	r1, #23452	; 0x5b9c
   14fe4:	cmp	r0, #0
   14fe8:	movt	r1, #1
   14fec:	movne	r1, r0
   14ff0:	movw	r0, #25041	; 0x61d1
   14ff4:	ldrb	r2, [r1]
   14ff8:	movt	r0, #1
   14ffc:	cmp	r2, #0
   15000:	movne	r0, r1
   15004:	pop	{fp, pc}
   15008:	push	{r4, r5, r6, r7, fp, lr}
   1500c:	add	fp, sp, #16
   15010:	sub	sp, sp, #8
   15014:	add	r5, sp, #4
   15018:	cmp	r0, #0
   1501c:	mov	r7, r2
   15020:	mov	r4, r1
   15024:	movne	r5, r0
   15028:	mov	r0, r5
   1502c:	bl	10ea8 <mbrtowc@plt>
   15030:	mov	r6, r0
   15034:	cmp	r7, #0
   15038:	beq	1505c <__assert_fail@plt+0x404c>
   1503c:	cmn	r6, #2
   15040:	bcc	1505c <__assert_fail@plt+0x404c>
   15044:	mov	r0, #0
   15048:	bl	150a4 <__assert_fail@plt+0x4094>
   1504c:	cmp	r0, #0
   15050:	ldrbeq	r0, [r4]
   15054:	moveq	r6, #1
   15058:	streq	r0, [r5]
   1505c:	mov	r0, r6
   15060:	sub	sp, fp, #16
   15064:	pop	{r4, r5, r6, r7, fp, pc}
   15068:	cmp	r2, #0
   1506c:	beq	1509c <__assert_fail@plt+0x408c>
   15070:	mvn	r3, #0
   15074:	udiv	r3, r3, r2
   15078:	cmp	r3, r1
   1507c:	bcs	1509c <__assert_fail@plt+0x408c>
   15080:	push	{fp, lr}
   15084:	mov	fp, sp
   15088:	bl	10f38 <__errno_location@plt>
   1508c:	mov	r1, #12
   15090:	str	r1, [r0]
   15094:	mov	r0, #0
   15098:	pop	{fp, pc}
   1509c:	mul	r1, r2, r1
   150a0:	b	14d3c <__assert_fail@plt+0x3d2c>
   150a4:	push	{r4, sl, fp, lr}
   150a8:	add	fp, sp, #8
   150ac:	sub	sp, sp, #264	; 0x108
   150b0:	add	r1, sp, #7
   150b4:	movw	r2, #257	; 0x101
   150b8:	bl	15108 <__assert_fail@plt+0x40f8>
   150bc:	mov	r4, #0
   150c0:	cmp	r0, #0
   150c4:	bne	150fc <__assert_fail@plt+0x40ec>
   150c8:	movw	r1, #25047	; 0x61d7
   150cc:	add	r0, sp, #7
   150d0:	movt	r1, #1
   150d4:	bl	10ddc <strcmp@plt>
   150d8:	cmp	r0, #0
   150dc:	beq	150fc <__assert_fail@plt+0x40ec>
   150e0:	movw	r1, #25049	; 0x61d9
   150e4:	add	r0, sp, #7
   150e8:	movt	r1, #1
   150ec:	bl	10ddc <strcmp@plt>
   150f0:	mov	r4, r0
   150f4:	cmp	r0, #0
   150f8:	movwne	r4, #1
   150fc:	mov	r0, r4
   15100:	sub	sp, fp, #8
   15104:	pop	{r4, sl, fp, pc}
   15108:	push	{r4, r5, r6, r7, fp, lr}
   1510c:	add	fp, sp, #16
   15110:	mov	r4, r1
   15114:	mov	r1, #0
   15118:	mov	r6, r2
   1511c:	bl	10fa4 <setlocale@plt>
   15120:	cmp	r0, #0
   15124:	beq	15150 <__assert_fail@plt+0x4140>
   15128:	mov	r7, r0
   1512c:	bl	10f20 <strlen@plt>
   15130:	cmp	r0, r6
   15134:	bcs	15164 <__assert_fail@plt+0x4154>
   15138:	add	r2, r0, #1
   1513c:	mov	r0, r4
   15140:	mov	r1, r7
   15144:	bl	10e0c <memcpy@plt>
   15148:	mov	r5, #0
   1514c:	b	1518c <__assert_fail@plt+0x417c>
   15150:	cmp	r6, #0
   15154:	mov	r5, #22
   15158:	movne	r0, #0
   1515c:	strbne	r0, [r4]
   15160:	b	1518c <__assert_fail@plt+0x417c>
   15164:	mov	r5, #34	; 0x22
   15168:	cmp	r6, #0
   1516c:	beq	1518c <__assert_fail@plt+0x417c>
   15170:	sub	r6, r6, #1
   15174:	mov	r0, r4
   15178:	mov	r1, r7
   1517c:	mov	r2, r6
   15180:	bl	10e0c <memcpy@plt>
   15184:	mov	r0, #0
   15188:	strb	r0, [r4, r6]
   1518c:	mov	r0, r5
   15190:	pop	{r4, r5, r6, r7, fp, pc}
   15194:	mov	r1, #0
   15198:	b	10fa4 <setlocale@plt>
   1519c:	cmp	r3, #0
   151a0:	cmpeq	r2, #0
   151a4:	bne	151c8 <__assert_fail@plt+0x41b8>
   151a8:	cmp	r1, #0
   151ac:	movlt	r1, #-2147483648	; 0x80000000
   151b0:	movlt	r0, #0
   151b4:	blt	151c4 <__assert_fail@plt+0x41b4>
   151b8:	cmpeq	r0, #0
   151bc:	mvnne	r1, #-2147483648	; 0x80000000
   151c0:	mvnne	r0, #0
   151c4:	b	15270 <__assert_fail@plt+0x4260>
   151c8:	sub	sp, sp, #8
   151cc:	push	{sp, lr}
   151d0:	cmp	r1, #0
   151d4:	blt	151f4 <__assert_fail@plt+0x41e4>
   151d8:	cmp	r3, #0
   151dc:	blt	15228 <__assert_fail@plt+0x4218>
   151e0:	bl	15280 <__assert_fail@plt+0x4270>
   151e4:	ldr	lr, [sp, #4]
   151e8:	add	sp, sp, #8
   151ec:	pop	{r2, r3}
   151f0:	bx	lr
   151f4:	rsbs	r0, r0, #0
   151f8:	sbc	r1, r1, r1, lsl #1
   151fc:	cmp	r3, #0
   15200:	blt	1524c <__assert_fail@plt+0x423c>
   15204:	bl	15280 <__assert_fail@plt+0x4270>
   15208:	ldr	lr, [sp, #4]
   1520c:	add	sp, sp, #8
   15210:	pop	{r2, r3}
   15214:	rsbs	r0, r0, #0
   15218:	sbc	r1, r1, r1, lsl #1
   1521c:	rsbs	r2, r2, #0
   15220:	sbc	r3, r3, r3, lsl #1
   15224:	bx	lr
   15228:	rsbs	r2, r2, #0
   1522c:	sbc	r3, r3, r3, lsl #1
   15230:	bl	15280 <__assert_fail@plt+0x4270>
   15234:	ldr	lr, [sp, #4]
   15238:	add	sp, sp, #8
   1523c:	pop	{r2, r3}
   15240:	rsbs	r0, r0, #0
   15244:	sbc	r1, r1, r1, lsl #1
   15248:	bx	lr
   1524c:	rsbs	r2, r2, #0
   15250:	sbc	r3, r3, r3, lsl #1
   15254:	bl	15280 <__assert_fail@plt+0x4270>
   15258:	ldr	lr, [sp, #4]
   1525c:	add	sp, sp, #8
   15260:	pop	{r2, r3}
   15264:	rsbs	r2, r2, #0
   15268:	sbc	r3, r3, r3, lsl #1
   1526c:	bx	lr
   15270:	push	{r1, lr}
   15274:	mov	r0, #8
   15278:	bl	10dd0 <raise@plt>
   1527c:	pop	{r1, pc}
   15280:	cmp	r1, r3
   15284:	cmpeq	r0, r2
   15288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1528c:	mov	r4, r0
   15290:	movcc	r0, #0
   15294:	mov	r5, r1
   15298:	ldr	lr, [sp, #36]	; 0x24
   1529c:	movcc	r1, r0
   152a0:	bcc	1539c <__assert_fail@plt+0x438c>
   152a4:	cmp	r3, #0
   152a8:	clzeq	ip, r2
   152ac:	clzne	ip, r3
   152b0:	addeq	ip, ip, #32
   152b4:	cmp	r5, #0
   152b8:	clzeq	r1, r4
   152bc:	addeq	r1, r1, #32
   152c0:	clzne	r1, r5
   152c4:	sub	ip, ip, r1
   152c8:	sub	sl, ip, #32
   152cc:	lsl	r9, r3, ip
   152d0:	rsb	fp, ip, #32
   152d4:	orr	r9, r9, r2, lsl sl
   152d8:	orr	r9, r9, r2, lsr fp
   152dc:	lsl	r8, r2, ip
   152e0:	cmp	r5, r9
   152e4:	cmpeq	r4, r8
   152e8:	movcc	r0, #0
   152ec:	movcc	r1, r0
   152f0:	bcc	1530c <__assert_fail@plt+0x42fc>
   152f4:	mov	r0, #1
   152f8:	subs	r4, r4, r8
   152fc:	lsl	r1, r0, sl
   15300:	orr	r1, r1, r0, lsr fp
   15304:	lsl	r0, r0, ip
   15308:	sbc	r5, r5, r9
   1530c:	cmp	ip, #0
   15310:	beq	1539c <__assert_fail@plt+0x438c>
   15314:	lsr	r6, r8, #1
   15318:	orr	r6, r6, r9, lsl #31
   1531c:	lsr	r7, r9, #1
   15320:	mov	r2, ip
   15324:	b	15348 <__assert_fail@plt+0x4338>
   15328:	subs	r3, r4, r6
   1532c:	sbc	r8, r5, r7
   15330:	adds	r3, r3, r3
   15334:	adc	r8, r8, r8
   15338:	adds	r4, r3, #1
   1533c:	adc	r5, r8, #0
   15340:	subs	r2, r2, #1
   15344:	beq	15364 <__assert_fail@plt+0x4354>
   15348:	cmp	r5, r7
   1534c:	cmpeq	r4, r6
   15350:	bcs	15328 <__assert_fail@plt+0x4318>
   15354:	adds	r4, r4, r4
   15358:	adc	r5, r5, r5
   1535c:	subs	r2, r2, #1
   15360:	bne	15348 <__assert_fail@plt+0x4338>
   15364:	lsr	r3, r4, ip
   15368:	orr	r3, r3, r5, lsl fp
   1536c:	lsr	r2, r5, ip
   15370:	orr	r3, r3, r5, lsr sl
   15374:	adds	r0, r0, r4
   15378:	mov	r4, r3
   1537c:	lsl	r3, r2, ip
   15380:	orr	r3, r3, r4, lsl sl
   15384:	lsl	ip, r4, ip
   15388:	orr	r3, r3, r4, lsr fp
   1538c:	adc	r1, r1, r5
   15390:	subs	r0, r0, ip
   15394:	mov	r5, r2
   15398:	sbc	r1, r1, r3
   1539c:	cmp	lr, #0
   153a0:	strdne	r4, [lr]
   153a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153ac:	mov	r7, r0
   153b0:	ldr	r6, [pc, #72]	; 15400 <__assert_fail@plt+0x43f0>
   153b4:	ldr	r5, [pc, #72]	; 15404 <__assert_fail@plt+0x43f4>
   153b8:	add	r6, pc, r6
   153bc:	add	r5, pc, r5
   153c0:	sub	r6, r6, r5
   153c4:	mov	r8, r1
   153c8:	mov	r9, r2
   153cc:	bl	10d98 <calloc@plt-0x20>
   153d0:	asrs	r6, r6, #2
   153d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   153d8:	mov	r4, #0
   153dc:	add	r4, r4, #1
   153e0:	ldr	r3, [r5], #4
   153e4:	mov	r2, r9
   153e8:	mov	r1, r8
   153ec:	mov	r0, r7
   153f0:	blx	r3
   153f4:	cmp	r6, r4
   153f8:	bne	153dc <__assert_fail@plt+0x43cc>
   153fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15400:	andeq	r1, r1, ip, asr #22
   15404:	andeq	r1, r1, r4, asr #22
   15408:	bx	lr
   1540c:	ldr	r3, [pc, #12]	; 15420 <__assert_fail@plt+0x4410>
   15410:	mov	r1, #0
   15414:	add	r3, pc, r3
   15418:	ldr	r2, [r3]
   1541c:	b	10f44 <__cxa_atexit@plt>
   15420:	andeq	r1, r1, r8, asr #25
   15424:	mov	r2, r1
   15428:	mov	r1, r0
   1542c:	mov	r0, #3
   15430:	b	10fd4 <__xstat64@plt>
   15434:	mov	r2, r1
   15438:	mov	r1, r0
   1543c:	mov	r0, #3
   15440:	b	10e6c <__fxstat64@plt>

Disassembly of section .fini:

00015444 <.fini>:
   15444:	push	{r3, lr}
   15448:	pop	{r3, pc}
