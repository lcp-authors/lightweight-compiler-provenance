
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c20 <.init>:
   10c20:	push	{r3, lr}
   10c24:	bl	110d8 <__assert_fail@plt+0x24c>
   10c28:	pop	{r3, pc}

Disassembly of section .plt:

00010c2c <calloc@plt-0x14>:
   10c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c30:	ldr	lr, [pc, #4]	; 10c3c <calloc@plt-0x4>
   10c34:	add	lr, pc, lr
   10c38:	ldr	pc, [lr, #8]!
   10c3c:	andeq	r8, r1, r4, asr #7

00010c40 <calloc@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #24, 20	; 0x18000
   10c48:	ldr	pc, [ip, #964]!	; 0x3c4

00010c4c <fputs_unlocked@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #24, 20	; 0x18000
   10c54:	ldr	pc, [ip, #956]!	; 0x3bc

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #24, 20	; 0x18000
   10c60:	ldr	pc, [ip, #948]!	; 0x3b4

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #932]!	; 0x3a4

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #924]!	; 0x39c

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #916]!	; 0x394

00010c94 <__strtoull_internal@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #908]!	; 0x38c

00010ca0 <mbsinit@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #900]!	; 0x384

00010cac <__sched_cpucount@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #892]!	; 0x37c

00010cb8 <memcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #884]!	; 0x374

00010cc4 <fputc_unlocked@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #876]!	; 0x36c

00010cd0 <dcgettext@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #868]!	; 0x364

00010cdc <sysconf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #860]!	; 0x35c

00010ce8 <realloc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #852]!	; 0x354

00010cf4 <textdomain@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #844]!	; 0x34c

00010d00 <iswprint@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #836]!	; 0x344

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #828]!	; 0x33c

00010d18 <lseek64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #820]!	; 0x334

00010d24 <__ctype_get_mb_cur_max@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #812]!	; 0x32c

00010d30 <__fpending@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #804]!	; 0x324

00010d3c <mbrtowc@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #796]!	; 0x31c

00010d48 <error@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #788]!	; 0x314

00010d54 <getenv@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #780]!	; 0x30c

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #772]!	; 0x304

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #764]!	; 0x2fc

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #756]!	; 0x2f4

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #740]!	; 0x2e4

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #732]!	; 0x2dc

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #724]!	; 0x2d4

00010db4 <strtoul@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dcc <strchr@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #700]!	; 0x2bc

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #692]!	; 0x2b4

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #684]!	; 0x2ac

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dfc <__printf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #668]!	; 0x29c

00010e08 <fileno@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #660]!	; 0x294

00010e14 <__fprintf_chk@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #652]!	; 0x28c

00010e20 <fclose@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #644]!	; 0x284

00010e2c <fseeko64@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #636]!	; 0x27c

00010e38 <setlocale@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #628]!	; 0x274

00010e44 <strrchr@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #620]!	; 0x26c

00010e50 <nl_langinfo@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #612]!	; 0x264

00010e5c <sched_getaffinity@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #604]!	; 0x25c

00010e68 <bindtextdomain@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #596]!	; 0x254

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #588]!	; 0x24c

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #580]!	; 0x244

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #572]!	; 0x23c

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	r3, #2
   10e9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10ea0:	movw	r5, #30780	; 0x783c
   10ea4:	movt	r5, #1
   10ea8:	strd	r6, [sp, #8]
   10eac:	mov	r7, r0
   10eb0:	strd	r8, [sp, #16]
   10eb4:	mov	r6, r1
   10eb8:	movw	r8, #37184	; 0x9140
   10ebc:	movt	r8, #2
   10ec0:	strd	sl, [sp, #24]
   10ec4:	mov	r9, r5
   10ec8:	str	lr, [sp, #32]
   10ecc:	sub	sp, sp, #36	; 0x24
   10ed0:	mov	fp, #0
   10ed4:	ldr	r0, [r1]
   10ed8:	str	r3, [sp, #28]
   10edc:	bl	117e8 <__assert_fail@plt+0x95c>
   10ee0:	mov	r1, r5
   10ee4:	mov	r0, #6
   10ee8:	bl	10e38 <setlocale@plt>
   10eec:	movw	r1, #31124	; 0x7994
   10ef0:	movt	r1, #1
   10ef4:	movw	r0, #30956	; 0x78ec
   10ef8:	movt	r0, #1
   10efc:	bl	10e68 <bindtextdomain@plt>
   10f00:	movw	r0, #30956	; 0x78ec
   10f04:	movt	r0, #1
   10f08:	bl	10cf4 <textdomain@plt>
   10f0c:	movw	r0, #5344	; 0x14e0
   10f10:	movt	r0, #1
   10f14:	bl	17654 <__assert_fail@plt+0x67c8>
   10f18:	mov	r4, #0
   10f1c:	ldr	r3, [pc, #372]	; 11098 <__assert_fail@plt+0x20c>
   10f20:	mov	r2, r9
   10f24:	mov	r1, r6
   10f28:	mov	r0, r7
   10f2c:	str	r4, [sp]
   10f30:	bl	10d90 <getopt_long@plt>
   10f34:	cmn	r0, #1
   10f38:	beq	10ff8 <__assert_fail@plt+0x16c>
   10f3c:	cmn	r0, #2
   10f40:	beq	11050 <__assert_fail@plt+0x1c4>
   10f44:	ble	10f5c <__assert_fail@plt+0xd0>
   10f48:	cmp	r0, #256	; 0x100
   10f4c:	bne	10fa4 <__assert_fail@plt+0x118>
   10f50:	mov	r3, #0
   10f54:	str	r3, [sp, #28]
   10f58:	b	10f1c <__assert_fail@plt+0x90>
   10f5c:	cmn	r0, #3
   10f60:	bne	11090 <__assert_fail@plt+0x204>
   10f64:	movw	r2, #31148	; 0x79ac
   10f68:	movt	r2, #1
   10f6c:	movw	r3, #37088	; 0x90e0
   10f70:	movt	r3, #2
   10f74:	movw	r0, #37180	; 0x913c
   10f78:	movt	r0, #2
   10f7c:	stm	sp, {r2, r4}
   10f80:	movw	r1, #30464	; 0x7700
   10f84:	movt	r1, #1
   10f88:	ldr	r0, [r0]
   10f8c:	movw	r2, #30952	; 0x78e8
   10f90:	movt	r2, #1
   10f94:	ldr	r3, [r3]
   10f98:	bl	1581c <__assert_fail@plt+0x4990>
   10f9c:	mov	r0, #0
   10fa0:	bl	10da8 <exit@plt>
   10fa4:	movw	r3, #257	; 0x101
   10fa8:	cmp	r0, r3
   10fac:	bne	11090 <__assert_fail@plt+0x204>
   10fb0:	ldr	fp, [r8]
   10fb4:	mov	r2, #5
   10fb8:	movw	r1, #31168	; 0x79c0
   10fbc:	movt	r1, #1
   10fc0:	mov	r0, #0
   10fc4:	bl	10cd0 <dcgettext@plt>
   10fc8:	mvn	sl, #0
   10fcc:	mov	r2, #0
   10fd0:	str	r5, [sp, #8]
   10fd4:	str	r0, [sp, #12]
   10fd8:	mov	r3, #0
   10fdc:	mov	r0, fp
   10fe0:	mov	fp, #0
   10fe4:	strd	sl, [sp]
   10fe8:	str	r4, [sp, #16]
   10fec:	bl	1616c <__assert_fail@plt+0x52e0>
   10ff0:	mov	fp, r0
   10ff4:	b	10f18 <__assert_fail@plt+0x8c>
   10ff8:	movw	r4, #37168	; 0x9130
   10ffc:	movt	r4, #2
   11000:	ldr	r3, [r4]
   11004:	cmp	r3, r7
   11008:	bne	11058 <__assert_fail@plt+0x1cc>
   1100c:	ldr	r0, [sp, #28]
   11010:	bl	11688 <__assert_fail@plt+0x7fc>
   11014:	cmp	fp, r0
   11018:	movw	r1, #31204	; 0x79e4
   1101c:	movt	r1, #1
   11020:	subcc	r2, r0, fp
   11024:	movcs	r2, #1
   11028:	mov	r0, #1
   1102c:	bl	10dfc <__printf_chk@plt>
   11030:	mov	r0, #0
   11034:	add	sp, sp, #36	; 0x24
   11038:	ldrd	r4, [sp]
   1103c:	ldrd	r6, [sp, #8]
   11040:	ldrd	r8, [sp, #16]
   11044:	ldrd	sl, [sp, #24]
   11048:	add	sp, sp, #32
   1104c:	pop	{pc}		; (ldr pc, [sp], #4)
   11050:	mov	r0, #0
   11054:	bl	1118c <__assert_fail@plt+0x300>
   11058:	mov	r2, #5
   1105c:	movw	r1, #31184	; 0x79d0
   11060:	movt	r1, #1
   11064:	mov	r0, #0
   11068:	bl	10cd0 <dcgettext@plt>
   1106c:	ldr	r3, [r4]
   11070:	mov	r5, r0
   11074:	ldr	r0, [r6, r3, lsl #2]
   11078:	bl	15158 <__assert_fail@plt+0x42cc>
   1107c:	mov	r1, #0
   11080:	mov	r3, r0
   11084:	mov	r2, r5
   11088:	mov	r0, r1
   1108c:	bl	10d48 <error@plt>
   11090:	mov	r0, #1
   11094:	bl	1118c <__assert_fail@plt+0x300>
   11098:			; <UNDEFINED> instruction: 0x000176b0
   1109c:	mov	fp, #0
   110a0:	mov	lr, #0
   110a4:	pop	{r1}		; (ldr r1, [sp], #4)
   110a8:	mov	r2, sp
   110ac:	push	{r2}		; (str r2, [sp, #-4]!)
   110b0:	push	{r0}		; (str r0, [sp, #-4]!)
   110b4:	ldr	ip, [pc, #16]	; 110cc <__assert_fail@plt+0x240>
   110b8:	push	{ip}		; (str ip, [sp, #-4]!)
   110bc:	ldr	r0, [pc, #12]	; 110d0 <__assert_fail@plt+0x244>
   110c0:	ldr	r3, [pc, #12]	; 110d4 <__assert_fail@plt+0x248>
   110c4:	bl	10d6c <__libc_start_main@plt>
   110c8:	bl	10e80 <abort@plt>
   110cc:	andeq	r7, r1, r0, asr r6
   110d0:	muleq	r1, r8, lr
   110d4:	strdeq	r7, [r1], -r0
   110d8:	ldr	r3, [pc, #20]	; 110f4 <__assert_fail@plt+0x268>
   110dc:	ldr	r2, [pc, #20]	; 110f8 <__assert_fail@plt+0x26c>
   110e0:	add	r3, pc, r3
   110e4:	ldr	r2, [r3, r2]
   110e8:	cmp	r2, #0
   110ec:	bxeq	lr
   110f0:	b	10d84 <__gmon_start__@plt>
   110f4:	andeq	r7, r1, r8, lsl pc
   110f8:	ldrdeq	r0, [r0], -r4
   110fc:	ldr	r0, [pc, #24]	; 1111c <__assert_fail@plt+0x290>
   11100:	ldr	r3, [pc, #24]	; 11120 <__assert_fail@plt+0x294>
   11104:	cmp	r3, r0
   11108:	bxeq	lr
   1110c:	ldr	r3, [pc, #16]	; 11124 <__assert_fail@plt+0x298>
   11110:	cmp	r3, #0
   11114:	bxeq	lr
   11118:	bx	r3
   1111c:	andeq	r9, r2, r8, lsr #2
   11120:	andeq	r9, r2, r8, lsr #2
   11124:	andeq	r0, r0, r0
   11128:	ldr	r0, [pc, #36]	; 11154 <__assert_fail@plt+0x2c8>
   1112c:	ldr	r1, [pc, #36]	; 11158 <__assert_fail@plt+0x2cc>
   11130:	sub	r1, r1, r0
   11134:	asr	r1, r1, #2
   11138:	add	r1, r1, r1, lsr #31
   1113c:	asrs	r1, r1, #1
   11140:	bxeq	lr
   11144:	ldr	r3, [pc, #16]	; 1115c <__assert_fail@plt+0x2d0>
   11148:	cmp	r3, #0
   1114c:	bxeq	lr
   11150:	bx	r3
   11154:	andeq	r9, r2, r8, lsr #2
   11158:	andeq	r9, r2, r8, lsr #2
   1115c:	andeq	r0, r0, r0
   11160:	push	{r4, lr}
   11164:	ldr	r4, [pc, #24]	; 11184 <__assert_fail@plt+0x2f8>
   11168:	ldrb	r3, [r4]
   1116c:	cmp	r3, #0
   11170:	popne	{r4, pc}
   11174:	bl	110fc <__assert_fail@plt+0x270>
   11178:	mov	r3, #1
   1117c:	strb	r3, [r4]
   11180:	pop	{r4, pc}
   11184:	andeq	r9, r2, r4, asr #2
   11188:	b	11128 <__assert_fail@plt+0x29c>
   1118c:	subs	r6, r0, #0
   11190:	str	r7, [sp, #-8]!
   11194:	str	lr, [sp, #4]
   11198:	sub	sp, sp, #56	; 0x38
   1119c:	beq	111e4 <__assert_fail@plt+0x358>
   111a0:	movw	r3, #37176	; 0x9138
   111a4:	movt	r3, #2
   111a8:	ldr	r4, [r3]
   111ac:	mov	r2, #5
   111b0:	movw	r1, #30472	; 0x7708
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	bl	10cd0 <dcgettext@plt>
   111c0:	movw	r3, #37200	; 0x9150
   111c4:	movt	r3, #2
   111c8:	mov	r2, r0
   111cc:	mov	r1, #1
   111d0:	ldr	r3, [r3]
   111d4:	mov	r0, r4
   111d8:	bl	10e14 <__fprintf_chk@plt>
   111dc:	mov	r0, r6
   111e0:	bl	10da8 <exit@plt>
   111e4:	mov	r2, #5
   111e8:	movw	r1, #30512	; 0x7730
   111ec:	movt	r1, #1
   111f0:	movw	r7, #37180	; 0x913c
   111f4:	movt	r7, #2
   111f8:	bl	10cd0 <dcgettext@plt>
   111fc:	movw	r3, #37200	; 0x9150
   11200:	movt	r3, #2
   11204:	mov	r1, r0
   11208:	mov	r0, #1
   1120c:	ldr	r2, [r3]
   11210:	bl	10dfc <__printf_chk@plt>
   11214:	mov	r2, #5
   11218:	movw	r1, #30536	; 0x7748
   1121c:	movt	r1, #1
   11220:	mov	r0, r6
   11224:	bl	10cd0 <dcgettext@plt>
   11228:	ldr	r1, [r7]
   1122c:	bl	10c4c <fputs_unlocked@plt>
   11230:	mov	r2, #5
   11234:	movw	r1, #30664	; 0x77c8
   11238:	movt	r1, #1
   1123c:	mov	r0, r6
   11240:	bl	10cd0 <dcgettext@plt>
   11244:	ldr	r1, [r7]
   11248:	bl	10c4c <fputs_unlocked@plt>
   1124c:	mov	r2, #5
   11250:	movw	r1, #30784	; 0x7840
   11254:	movt	r1, #1
   11258:	mov	r0, r6
   1125c:	bl	10cd0 <dcgettext@plt>
   11260:	ldr	r1, [r7]
   11264:	bl	10c4c <fputs_unlocked@plt>
   11268:	mov	r2, #5
   1126c:	movw	r1, #30832	; 0x7870
   11270:	movt	r1, #1
   11274:	mov	r0, r6
   11278:	bl	10cd0 <dcgettext@plt>
   1127c:	ldr	r1, [r7]
   11280:	bl	10c4c <fputs_unlocked@plt>
   11284:	movw	lr, #30328	; 0x7678
   11288:	movt	lr, #1
   1128c:	ldr	ip, [lr]
   11290:	ldr	r4, [lr, #4]
   11294:	ldrd	r8, [lr, #8]
   11298:	subs	r1, ip, #0
   1129c:	str	ip, [sp]
   112a0:	ldrd	r2, [lr, #16]
   112a4:	str	r4, [sp, #4]
   112a8:	ldrd	r4, [lr, #24]
   112ac:	strd	r8, [sp, #8]
   112b0:	ldrd	r8, [lr, #32]
   112b4:	strd	r2, [sp, #16]
   112b8:	ldrd	r2, [lr, #40]	; 0x28
   112bc:	strd	r4, [sp, #24]
   112c0:	ldrd	r4, [lr, #48]	; 0x30
   112c4:	strd	r8, [sp, #32]
   112c8:	strd	r2, [sp, #40]	; 0x28
   112cc:	strd	r4, [sp, #48]	; 0x30
   112d0:	movwne	r5, #30464	; 0x7700
   112d4:	mov	r4, sp
   112d8:	movtne	r5, #1
   112dc:	bne	113d4 <__assert_fail@plt+0x548>
   112e0:	ldr	r4, [r4, #4]
   112e4:	movw	r1, #30888	; 0x78a8
   112e8:	movt	r1, #1
   112ec:	mov	r2, #5
   112f0:	cmp	r4, #0
   112f4:	beq	113e8 <__assert_fail@plt+0x55c>
   112f8:	mov	r0, #0
   112fc:	bl	10cd0 <dcgettext@plt>
   11300:	mov	r1, r0
   11304:	movw	r3, #30912	; 0x78c0
   11308:	movt	r3, #1
   1130c:	movw	r2, #30952	; 0x78e8
   11310:	movt	r2, #1
   11314:	mov	r0, #1
   11318:	bl	10dfc <__printf_chk@plt>
   1131c:	mov	r1, #0
   11320:	mov	r0, #5
   11324:	bl	10e38 <setlocale@plt>
   11328:	cmp	r0, #0
   1132c:	movweq	r5, #30464	; 0x7700
   11330:	movteq	r5, #1
   11334:	beq	11358 <__assert_fail@plt+0x4cc>
   11338:	movw	r1, #30968	; 0x78f8
   1133c:	movt	r1, #1
   11340:	mov	r2, #3
   11344:	movw	r5, #30464	; 0x7700
   11348:	movt	r5, #1
   1134c:	bl	10e74 <strncmp@plt>
   11350:	cmp	r0, #0
   11354:	bne	114a0 <__assert_fail@plt+0x614>
   11358:	mov	r2, #5
   1135c:	movw	r1, #31044	; 0x7944
   11360:	movt	r1, #1
   11364:	mov	r0, #0
   11368:	bl	10cd0 <dcgettext@plt>
   1136c:	mov	r1, r0
   11370:	movw	r3, #30464	; 0x7700
   11374:	movt	r3, #1
   11378:	movw	r2, #30912	; 0x78c0
   1137c:	movt	r2, #1
   11380:	mov	r0, #1
   11384:	bl	10dfc <__printf_chk@plt>
   11388:	mov	r2, #5
   1138c:	movw	r1, #31072	; 0x7960
   11390:	movt	r1, #1
   11394:	mov	r0, #0
   11398:	bl	10cd0 <dcgettext@plt>
   1139c:	movw	r2, #31220	; 0x79f4
   113a0:	movt	r2, #1
   113a4:	cmp	r4, r5
   113a8:	movw	r3, #30780	; 0x783c
   113ac:	movt	r3, #1
   113b0:	mov	r1, r0
   113b4:	moveq	r3, r2
   113b8:	mov	r2, r4
   113bc:	mov	r0, #1
   113c0:	bl	10dfc <__printf_chk@plt>
   113c4:	b	111dc <__assert_fail@plt+0x350>
   113c8:	ldr	r1, [r4, #8]!
   113cc:	cmp	r1, #0
   113d0:	beq	112e0 <__assert_fail@plt+0x454>
   113d4:	mov	r0, r5
   113d8:	bl	10c58 <strcmp@plt>
   113dc:	cmp	r0, #0
   113e0:	bne	113c8 <__assert_fail@plt+0x53c>
   113e4:	b	112e0 <__assert_fail@plt+0x454>
   113e8:	mov	r0, r4
   113ec:	bl	10cd0 <dcgettext@plt>
   113f0:	mov	r1, r0
   113f4:	movw	r3, #30912	; 0x78c0
   113f8:	movt	r3, #1
   113fc:	movw	r2, #30952	; 0x78e8
   11400:	movt	r2, #1
   11404:	mov	r0, #1
   11408:	bl	10dfc <__printf_chk@plt>
   1140c:	mov	r1, r4
   11410:	mov	r0, #5
   11414:	bl	10e38 <setlocale@plt>
   11418:	cmp	r0, #0
   1141c:	beq	11438 <__assert_fail@plt+0x5ac>
   11420:	movw	r1, #30968	; 0x78f8
   11424:	movt	r1, #1
   11428:	mov	r2, #3
   1142c:	bl	10e74 <strncmp@plt>
   11430:	cmp	r0, #0
   11434:	bne	11494 <__assert_fail@plt+0x608>
   11438:	mov	r2, #5
   1143c:	movw	r1, #31044	; 0x7944
   11440:	movt	r1, #1
   11444:	mov	r0, #0
   11448:	bl	10cd0 <dcgettext@plt>
   1144c:	mov	r1, r0
   11450:	movw	r3, #30464	; 0x7700
   11454:	movt	r3, #1
   11458:	movw	r2, #30912	; 0x78c0
   1145c:	movt	r2, #1
   11460:	mov	r0, #1
   11464:	bl	10dfc <__printf_chk@plt>
   11468:	movw	r1, #31072	; 0x7960
   1146c:	movt	r1, #1
   11470:	mov	r2, #5
   11474:	mov	r0, #0
   11478:	bl	10cd0 <dcgettext@plt>
   1147c:	movw	r4, #30464	; 0x7700
   11480:	movt	r4, #1
   11484:	movw	r3, #31220	; 0x79f4
   11488:	movt	r3, #1
   1148c:	mov	r1, r0
   11490:	b	113b8 <__assert_fail@plt+0x52c>
   11494:	movw	r5, #30464	; 0x7700
   11498:	movt	r5, #1
   1149c:	mov	r4, r5
   114a0:	mov	r2, #5
   114a4:	movw	r1, #30972	; 0x78fc
   114a8:	movt	r1, #1
   114ac:	mov	r0, #0
   114b0:	bl	10cd0 <dcgettext@plt>
   114b4:	ldr	r1, [r7]
   114b8:	bl	10c4c <fputs_unlocked@plt>
   114bc:	b	11358 <__assert_fail@plt+0x4cc>
   114c0:	movw	r3, #37192	; 0x9148
   114c4:	movt	r3, #2
   114c8:	str	r0, [r3]
   114cc:	bx	lr
   114d0:	movw	r3, #37192	; 0x9148
   114d4:	movt	r3, #2
   114d8:	strb	r0, [r3, #4]
   114dc:	bx	lr
   114e0:	movw	r3, #37180	; 0x913c
   114e4:	movt	r3, #2
   114e8:	strd	r4, [sp, #-16]!
   114ec:	ldr	r0, [r3]
   114f0:	str	r6, [sp, #8]
   114f4:	str	lr, [sp, #12]
   114f8:	sub	sp, sp, #8
   114fc:	bl	17114 <__assert_fail@plt+0x6288>
   11500:	cmp	r0, #0
   11504:	beq	11530 <__assert_fail@plt+0x6a4>
   11508:	movw	r4, #37192	; 0x9148
   1150c:	movt	r4, #2
   11510:	ldrb	r6, [r4, #4]
   11514:	bl	10dd8 <__errno_location@plt>
   11518:	mov	r5, r0
   1151c:	cmp	r6, #0
   11520:	beq	1155c <__assert_fail@plt+0x6d0>
   11524:	ldr	r3, [r0]
   11528:	cmp	r3, #32
   1152c:	bne	1155c <__assert_fail@plt+0x6d0>
   11530:	movw	r3, #37176	; 0x9138
   11534:	movt	r3, #2
   11538:	ldr	r0, [r3]
   1153c:	bl	17114 <__assert_fail@plt+0x6288>
   11540:	cmp	r0, #0
   11544:	bne	115a4 <__assert_fail@plt+0x718>
   11548:	add	sp, sp, #8
   1154c:	ldrd	r4, [sp]
   11550:	ldr	r6, [sp, #8]
   11554:	add	sp, sp, #12
   11558:	pop	{pc}		; (ldr pc, [sp], #4)
   1155c:	movw	r1, #31364	; 0x7a84
   11560:	movt	r1, #1
   11564:	mov	r2, #5
   11568:	mov	r0, #0
   1156c:	bl	10cd0 <dcgettext@plt>
   11570:	mov	r6, r0
   11574:	ldr	r0, [r4]
   11578:	cmp	r0, #0
   1157c:	beq	115b4 <__assert_fail@plt+0x728>
   11580:	ldr	r4, [r5]
   11584:	bl	145dc <__assert_fail@plt+0x3750>
   11588:	mov	r3, r0
   1158c:	movw	r2, #31376	; 0x7a90
   11590:	movt	r2, #1
   11594:	mov	r0, #0
   11598:	str	r6, [sp]
   1159c:	mov	r1, r4
   115a0:	bl	10d48 <error@plt>
   115a4:	movw	r3, #37092	; 0x90e4
   115a8:	movt	r3, #2
   115ac:	ldr	r0, [r3]
   115b0:	bl	10c7c <_exit@plt>
   115b4:	mov	r3, r6
   115b8:	movw	r2, #31380	; 0x7a94
   115bc:	movt	r2, #1
   115c0:	ldr	r1, [r5]
   115c4:	bl	10d48 <error@plt>
   115c8:	b	115a4 <__assert_fail@plt+0x718>
   115cc:	ldrb	r3, [r0]
   115d0:	cmp	r3, #0
   115d4:	beq	115fc <__assert_fail@plt+0x770>
   115d8:	cmp	r3, #9
   115dc:	bcc	11604 <__assert_fail@plt+0x778>
   115e0:	cmp	r3, #13
   115e4:	bls	115f0 <__assert_fail@plt+0x764>
   115e8:	cmp	r3, #32
   115ec:	bne	11604 <__assert_fail@plt+0x778>
   115f0:	ldrb	r3, [r0, #1]!
   115f4:	cmp	r3, #0
   115f8:	bne	115d8 <__assert_fail@plt+0x74c>
   115fc:	mov	r0, #0
   11600:	bx	lr
   11604:	sub	r3, r3, #48	; 0x30
   11608:	cmp	r3, #9
   1160c:	bhi	115fc <__assert_fail@plt+0x770>
   11610:	mov	r3, #0
   11614:	push	{lr}		; (str lr, [sp, #-4]!)
   11618:	sub	sp, sp, #12
   1161c:	mov	r2, #10
   11620:	add	r1, sp, #4
   11624:	str	r3, [sp, #4]
   11628:	bl	10db4 <strtoul@plt>
   1162c:	ldr	r2, [sp, #4]
   11630:	cmp	r2, #0
   11634:	beq	11668 <__assert_fail@plt+0x7dc>
   11638:	ldrb	r3, [r2]
   1163c:	cmp	r3, #0
   11640:	beq	1166c <__assert_fail@plt+0x7e0>
   11644:	cmp	r3, #9
   11648:	add	r2, r2, #1
   1164c:	bcc	11660 <__assert_fail@plt+0x7d4>
   11650:	cmp	r3, #13
   11654:	bls	11674 <__assert_fail@plt+0x7e8>
   11658:	cmp	r3, #32
   1165c:	beq	11674 <__assert_fail@plt+0x7e8>
   11660:	cmp	r3, #44	; 0x2c
   11664:	beq	1166c <__assert_fail@plt+0x7e0>
   11668:	mov	r0, #0
   1166c:	add	sp, sp, #12
   11670:	pop	{pc}		; (ldr pc, [sp], #4)
   11674:	str	r2, [sp, #4]
   11678:	ldrb	r3, [r2]
   1167c:	cmp	r3, #0
   11680:	bne	11644 <__assert_fail@plt+0x7b8>
   11684:	b	1166c <__assert_fail@plt+0x7e0>
   11688:	cmp	r0, #2
   1168c:	strd	r4, [sp, #-12]!
   11690:	str	lr, [sp, #8]
   11694:	sub	sp, sp, #132	; 0x84
   11698:	beq	116dc <__assert_fail@plt+0x850>
   1169c:	cmp	r0, #1
   116a0:	beq	117e0 <__assert_fail@plt+0x954>
   116a4:	mov	r0, #83	; 0x53
   116a8:	bl	10cdc <sysconf@plt>
   116ac:	sub	r3, r0, #1
   116b0:	mov	r4, r0
   116b4:	cmp	r3, #1
   116b8:	bls	1175c <__assert_fail@plt+0x8d0>
   116bc:	cmp	r0, #0
   116c0:	movgt	r4, r0
   116c4:	movle	r4, #1
   116c8:	mov	r0, r4
   116cc:	add	sp, sp, #132	; 0x84
   116d0:	ldrd	r4, [sp]
   116d4:	add	sp, sp, #8
   116d8:	pop	{pc}		; (ldr pc, [sp], #4)
   116dc:	movw	r0, #31384	; 0x7a98
   116e0:	movt	r0, #1
   116e4:	bl	10d54 <getenv@plt>
   116e8:	cmp	r0, #0
   116ec:	beq	117c0 <__assert_fail@plt+0x934>
   116f0:	bl	115cc <__assert_fail@plt+0x740>
   116f4:	mov	r5, r0
   116f8:	movw	r0, #31400	; 0x7aa8
   116fc:	movt	r0, #1
   11700:	bl	10d54 <getenv@plt>
   11704:	cmp	r0, #0
   11708:	mvneq	r4, #0
   1170c:	beq	1171c <__assert_fail@plt+0x890>
   11710:	bl	115cc <__assert_fail@plt+0x740>
   11714:	subs	r4, r0, #0
   11718:	mvneq	r4, #0
   1171c:	cmp	r5, #0
   11720:	bne	11794 <__assert_fail@plt+0x908>
   11724:	mov	r1, #128	; 0x80
   11728:	mov	r2, sp
   1172c:	mov	r0, #0
   11730:	bl	10e5c <sched_getaffinity@plt>
   11734:	cmp	r0, #0
   11738:	beq	117a0 <__assert_fail@plt+0x914>
   1173c:	mov	r0, #84	; 0x54
   11740:	bl	10cdc <sysconf@plt>
   11744:	cmp	r0, #0
   11748:	movle	r4, #1
   1174c:	ble	116c8 <__assert_fail@plt+0x83c>
   11750:	cmp	r0, r4
   11754:	movcc	r4, r0
   11758:	b	116c8 <__assert_fail@plt+0x83c>
   1175c:	mov	r1, #128	; 0x80
   11760:	mov	r2, sp
   11764:	mov	r0, #0
   11768:	bl	10e5c <sched_getaffinity@plt>
   1176c:	cmp	r0, #0
   11770:	bne	116c8 <__assert_fail@plt+0x83c>
   11774:	mov	r1, sp
   11778:	mov	r0, #128	; 0x80
   1177c:	bl	10cac <__sched_cpucount@plt>
   11780:	cmp	r0, #0
   11784:	beq	116c8 <__assert_fail@plt+0x83c>
   11788:	cmp	r4, r0
   1178c:	bcc	116bc <__assert_fail@plt+0x830>
   11790:	b	116c8 <__assert_fail@plt+0x83c>
   11794:	cmp	r4, r5
   11798:	movcs	r4, r5
   1179c:	b	116c8 <__assert_fail@plt+0x83c>
   117a0:	mov	r1, sp
   117a4:	mov	r0, #128	; 0x80
   117a8:	bl	10cac <__sched_cpucount@plt>
   117ac:	cmp	r0, #0
   117b0:	beq	1173c <__assert_fail@plt+0x8b0>
   117b4:	cmp	r4, r0
   117b8:	movcs	r4, r0
   117bc:	b	116c8 <__assert_fail@plt+0x83c>
   117c0:	movw	r0, #31400	; 0x7aa8
   117c4:	movt	r0, #1
   117c8:	bl	10d54 <getenv@plt>
   117cc:	cmp	r0, #0
   117d0:	beq	117e0 <__assert_fail@plt+0x954>
   117d4:	bl	115cc <__assert_fail@plt+0x740>
   117d8:	subs	r4, r0, #0
   117dc:	bne	11724 <__assert_fail@plt+0x898>
   117e0:	mvn	r4, #0
   117e4:	b	11724 <__assert_fail@plt+0x898>
   117e8:	strd	r4, [sp, #-16]!
   117ec:	subs	r4, r0, #0
   117f0:	str	r6, [sp, #8]
   117f4:	str	lr, [sp, #12]
   117f8:	beq	11890 <__assert_fail@plt+0xa04>
   117fc:	mov	r1, #47	; 0x2f
   11800:	bl	10e44 <strrchr@plt>
   11804:	subs	r5, r0, #0
   11808:	beq	11868 <__assert_fail@plt+0x9dc>
   1180c:	add	r6, r5, #1
   11810:	sub	r3, r6, r4
   11814:	cmp	r3, #6
   11818:	ble	11868 <__assert_fail@plt+0x9dc>
   1181c:	movw	r1, #31476	; 0x7af4
   11820:	movt	r1, #1
   11824:	mov	r2, #7
   11828:	sub	r0, r5, #6
   1182c:	bl	10e74 <strncmp@plt>
   11830:	cmp	r0, #0
   11834:	bne	11868 <__assert_fail@plt+0x9dc>
   11838:	movw	r1, #31484	; 0x7afc
   1183c:	movt	r1, #1
   11840:	mov	r2, #3
   11844:	mov	r0, r6
   11848:	bl	10e74 <strncmp@plt>
   1184c:	cmp	r0, #0
   11850:	movne	r4, r6
   11854:	bne	11868 <__assert_fail@plt+0x9dc>
   11858:	add	r4, r5, #4
   1185c:	movw	r3, #37160	; 0x9128
   11860:	movt	r3, #2
   11864:	str	r4, [r3]
   11868:	movw	r2, #37200	; 0x9150
   1186c:	movt	r2, #2
   11870:	ldr	r6, [sp, #8]
   11874:	movw	r3, #37164	; 0x912c
   11878:	movt	r3, #2
   1187c:	str	r4, [r2]
   11880:	str	r4, [r3]
   11884:	ldrd	r4, [sp]
   11888:	add	sp, sp, #12
   1188c:	pop	{pc}		; (ldr pc, [sp], #4)
   11890:	movw	r3, #37176	; 0x9138
   11894:	movt	r3, #2
   11898:	movw	r0, #31420	; 0x7abc
   1189c:	movt	r0, #1
   118a0:	ldr	r3, [r3]
   118a4:	mov	r2, #55	; 0x37
   118a8:	mov	r1, #1
   118ac:	bl	10d0c <fwrite@plt>
   118b0:	bl	10e80 <abort@plt>
   118b4:	mov	r2, #5
   118b8:	strd	r4, [sp, #-16]!
   118bc:	mov	r5, r0
   118c0:	str	r6, [sp, #8]
   118c4:	mov	r6, r1
   118c8:	mov	r1, r0
   118cc:	mov	r0, #0
   118d0:	str	lr, [sp, #12]
   118d4:	bl	10cd0 <dcgettext@plt>
   118d8:	cmp	r5, r0
   118dc:	mov	r4, r0
   118e0:	beq	118f8 <__assert_fail@plt+0xa6c>
   118e4:	mov	r0, r4
   118e8:	ldrd	r4, [sp]
   118ec:	ldr	r6, [sp, #8]
   118f0:	add	sp, sp, #12
   118f4:	pop	{pc}		; (ldr pc, [sp], #4)
   118f8:	bl	173e0 <__assert_fail@plt+0x6554>
   118fc:	ldrb	r3, [r0]
   11900:	bic	r3, r3, #32
   11904:	cmp	r3, #85	; 0x55
   11908:	bne	11970 <__assert_fail@plt+0xae4>
   1190c:	ldrb	r3, [r0, #1]
   11910:	bic	r3, r3, #32
   11914:	cmp	r3, #84	; 0x54
   11918:	bne	119f0 <__assert_fail@plt+0xb64>
   1191c:	ldrb	r3, [r0, #2]
   11920:	bic	r3, r3, #32
   11924:	cmp	r3, #70	; 0x46
   11928:	bne	119f0 <__assert_fail@plt+0xb64>
   1192c:	ldrb	r3, [r0, #3]
   11930:	cmp	r3, #45	; 0x2d
   11934:	bne	119f0 <__assert_fail@plt+0xb64>
   11938:	ldrb	r3, [r0, #4]
   1193c:	cmp	r3, #56	; 0x38
   11940:	bne	119f0 <__assert_fail@plt+0xb64>
   11944:	ldrb	r3, [r0, #5]
   11948:	cmp	r3, #0
   1194c:	bne	119f0 <__assert_fail@plt+0xb64>
   11950:	ldrb	r2, [r4]
   11954:	movw	r3, #31576	; 0x7b58
   11958:	movt	r3, #1
   1195c:	movw	r4, #31588	; 0x7b64
   11960:	movt	r4, #1
   11964:	cmp	r2, #96	; 0x60
   11968:	movne	r4, r3
   1196c:	b	118e4 <__assert_fail@plt+0xa58>
   11970:	cmp	r3, #71	; 0x47
   11974:	bne	119f0 <__assert_fail@plt+0xb64>
   11978:	ldrb	r3, [r0, #1]
   1197c:	bic	r3, r3, #32
   11980:	cmp	r3, #66	; 0x42
   11984:	bne	119f0 <__assert_fail@plt+0xb64>
   11988:	ldrb	r3, [r0, #2]
   1198c:	cmp	r3, #49	; 0x31
   11990:	bne	119f0 <__assert_fail@plt+0xb64>
   11994:	ldrb	r3, [r0, #3]
   11998:	cmp	r3, #56	; 0x38
   1199c:	bne	119f0 <__assert_fail@plt+0xb64>
   119a0:	ldrb	r3, [r0, #4]
   119a4:	cmp	r3, #48	; 0x30
   119a8:	bne	119f0 <__assert_fail@plt+0xb64>
   119ac:	ldrb	r3, [r0, #5]
   119b0:	cmp	r3, #51	; 0x33
   119b4:	bne	119f0 <__assert_fail@plt+0xb64>
   119b8:	ldrb	r3, [r0, #6]
   119bc:	cmp	r3, #48	; 0x30
   119c0:	bne	119f0 <__assert_fail@plt+0xb64>
   119c4:	ldrb	r3, [r0, #7]
   119c8:	cmp	r3, #0
   119cc:	bne	119f0 <__assert_fail@plt+0xb64>
   119d0:	ldrb	r2, [r4]
   119d4:	movw	r3, #31580	; 0x7b5c
   119d8:	movt	r3, #1
   119dc:	movw	r4, #31584	; 0x7b60
   119e0:	movt	r4, #1
   119e4:	cmp	r2, #96	; 0x60
   119e8:	movne	r4, r3
   119ec:	b	118e4 <__assert_fail@plt+0xa58>
   119f0:	movw	r3, #31592	; 0x7b68
   119f4:	movt	r3, #1
   119f8:	cmp	r6, #9
   119fc:	movw	r4, #31572	; 0x7b54
   11a00:	movt	r4, #1
   11a04:	movne	r4, r3
   11a08:	b	118e4 <__assert_fail@plt+0xa58>
   11a0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a10:	strd	r6, [sp, #8]
   11a14:	strd	r8, [sp, #16]
   11a18:	mov	r8, r3
   11a1c:	strd	sl, [sp, #24]
   11a20:	mov	fp, r0
   11a24:	mov	sl, r1
   11a28:	str	lr, [sp, #32]
   11a2c:	sub	sp, sp, #140	; 0x8c
   11a30:	ldr	r3, [sp, #180]	; 0xb4
   11a34:	str	r2, [sp, #28]
   11a38:	and	r4, r3, #2
   11a3c:	ubfx	r3, r3, #1, #1
   11a40:	str	r3, [sp, #44]	; 0x2c
   11a44:	bl	10d24 <__ctype_get_mb_cur_max@plt>
   11a48:	ldr	r3, [sp, #176]	; 0xb0
   11a4c:	str	r0, [sp, #76]	; 0x4c
   11a50:	cmp	r3, #10
   11a54:	ldrls	pc, [pc, r3, lsl #2]
   11a58:	b	133f4 <__assert_fail@plt+0x2568>
   11a5c:	ldrdeq	r1, [r1], -ip
   11a60:	strdeq	r1, [r1], -r8
   11a64:	andeq	r2, r1, r4, ror r5
   11a68:	andeq	r2, r1, r4, rrx
   11a6c:	andeq	r1, r1, r4, ror #27
   11a70:	andeq	r1, r1, r0, ror #28
   11a74:	andeq	r1, r1, r8, lsr pc
   11a78:	andeq	r1, r1, r0, lsr #31
   11a7c:	andeq	r1, r1, r8, lsl #21
   11a80:	andeq	r1, r1, r8, lsl #21
   11a84:	andeq	r1, r1, r8, lsl #21
   11a88:	ldr	r3, [sp, #176]	; 0xb0
   11a8c:	cmp	r3, #10
   11a90:	beq	11abc <__assert_fail@plt+0xc30>
   11a94:	mov	r1, r3
   11a98:	movw	r0, #31596	; 0x7b6c
   11a9c:	movt	r0, #1
   11aa0:	bl	118b4 <__assert_fail@plt+0xa28>
   11aa4:	str	r0, [sp, #188]	; 0xbc
   11aa8:	movw	r0, #31592	; 0x7b68
   11aac:	movt	r0, #1
   11ab0:	ldr	r1, [sp, #176]	; 0xb0
   11ab4:	bl	118b4 <__assert_fail@plt+0xa28>
   11ab8:	str	r0, [sp, #192]	; 0xc0
   11abc:	cmp	r4, #0
   11ac0:	movne	r4, #0
   11ac4:	beq	13180 <__assert_fail@plt+0x22f4>
   11ac8:	mov	r5, #0
   11acc:	ldr	r0, [sp, #192]	; 0xc0
   11ad0:	mov	r9, r5
   11ad4:	str	r5, [sp, #64]	; 0x40
   11ad8:	bl	10dc0 <strlen@plt>
   11adc:	mov	r3, #1
   11ae0:	ldr	r2, [sp, #44]	; 0x2c
   11ae4:	cmp	r0, r5
   11ae8:	moveq	r2, r5
   11aec:	str	r3, [sp, #32]
   11af0:	str	r3, [sp, #48]	; 0x30
   11af4:	str	r5, [sp, #52]	; 0x34
   11af8:	str	r3, [sp, #60]	; 0x3c
   11afc:	ldr	r3, [sp, #180]	; 0xb4
   11b00:	str	r0, [sp, #56]	; 0x38
   11b04:	str	r5, [sp, #68]	; 0x44
   11b08:	str	r5, [sp, #80]	; 0x50
   11b0c:	str	r5, [sp, #84]	; 0x54
   11b10:	and	r3, r3, #1
   11b14:	str	r2, [sp, #88]	; 0x58
   11b18:	str	r3, [sp, #92]	; 0x5c
   11b1c:	ldr	r3, [sp, #180]	; 0xb4
   11b20:	and	r3, r3, #4
   11b24:	str	r3, [sp, #96]	; 0x60
   11b28:	ldr	r3, [sp, #192]	; 0xc0
   11b2c:	str	r3, [sp, #72]	; 0x48
   11b30:	mov	r3, fp
   11b34:	mov	r7, #0
   11b38:	mov	fp, r9
   11b3c:	mov	r9, r3
   11b40:	cmn	r8, #1
   11b44:	beq	12148 <__assert_fail@plt+0x12bc>
   11b48:	subs	r6, r8, r7
   11b4c:	movne	r6, #1
   11b50:	cmp	r6, #0
   11b54:	beq	12160 <__assert_fail@plt+0x12d4>
   11b58:	ldr	r0, [sp, #28]
   11b5c:	ldr	r3, [sp, #48]	; 0x30
   11b60:	cmp	r3, #0
   11b64:	add	r3, r0, r7
   11b68:	str	r3, [sp, #36]	; 0x24
   11b6c:	beq	125ec <__assert_fail@plt+0x1760>
   11b70:	ldr	r2, [sp, #56]	; 0x38
   11b74:	cmp	r2, #0
   11b78:	beq	12aec <__assert_fail@plt+0x1c60>
   11b7c:	cmp	r2, #1
   11b80:	mov	r3, r2
   11b84:	movls	r3, #0
   11b88:	movhi	r3, #1
   11b8c:	cmn	r8, #1
   11b90:	add	r5, r7, r2
   11b94:	movne	r3, #0
   11b98:	cmp	r3, #0
   11b9c:	beq	11ba8 <__assert_fail@plt+0xd1c>
   11ba0:	bl	10dc0 <strlen@plt>
   11ba4:	mov	r8, r0
   11ba8:	cmp	r5, r8
   11bac:	bhi	12aec <__assert_fail@plt+0x1c60>
   11bb0:	ldr	r0, [sp, #36]	; 0x24
   11bb4:	ldr	r2, [sp, #56]	; 0x38
   11bb8:	ldr	r1, [sp, #72]	; 0x48
   11bbc:	bl	10cb8 <memcmp@plt>
   11bc0:	cmp	r0, #0
   11bc4:	bne	12aec <__assert_fail@plt+0x1c60>
   11bc8:	ldr	r3, [sp, #44]	; 0x2c
   11bcc:	cmp	r3, #0
   11bd0:	bne	13298 <__assert_fail@plt+0x240c>
   11bd4:	ldr	r3, [sp, #36]	; 0x24
   11bd8:	ldrb	r5, [r3]
   11bdc:	cmp	r5, #126	; 0x7e
   11be0:	ldrls	pc, [pc, r5, lsl #2]
   11be4:	b	13080 <__assert_fail@plt+0x21f4>
   11be8:			; <UNDEFINED> instruction: 0x000122bc
   11bec:	andeq	r3, r1, r0, lsl #1
   11bf0:	andeq	r3, r1, r0, lsl #1
   11bf4:	andeq	r3, r1, r0, lsl #1
   11bf8:	andeq	r3, r1, r0, lsl #1
   11bfc:	andeq	r3, r1, r0, lsl #1
   11c00:	andeq	r3, r1, r0, lsl #1
   11c04:	andeq	r2, r1, r4, lsl r2
   11c08:	andeq	r2, r1, ip, lsl #4
   11c0c:	andeq	r2, r1, ip, lsl r2
   11c10:	andeq	r2, r1, r0, lsr #7
   11c14:	muleq	r1, r0, r3
   11c18:	strheq	r2, [r1], -r8
   11c1c:	andeq	r2, r1, ip, ror #6
   11c20:	andeq	r3, r1, r0, lsl #1
   11c24:	andeq	r3, r1, r0, lsl #1
   11c28:	andeq	r3, r1, r0, lsl #1
   11c2c:	andeq	r3, r1, r0, lsl #1
   11c30:	andeq	r3, r1, r0, lsl #1
   11c34:	andeq	r3, r1, r0, lsl #1
   11c38:	andeq	r3, r1, r0, lsl #1
   11c3c:	andeq	r3, r1, r0, lsl #1
   11c40:	andeq	r3, r1, r0, lsl #1
   11c44:	andeq	r3, r1, r0, lsl #1
   11c48:	andeq	r3, r1, r0, lsl #1
   11c4c:	andeq	r3, r1, r0, lsl #1
   11c50:	andeq	r3, r1, r0, lsl #1
   11c54:	andeq	r3, r1, r0, lsl #1
   11c58:	andeq	r3, r1, r0, lsl #1
   11c5c:	andeq	r3, r1, r0, lsl #1
   11c60:	andeq	r3, r1, r0, lsl #1
   11c64:	andeq	r3, r1, r0, lsl #1
   11c68:	andeq	r2, r1, r8, lsl r4
   11c6c:	andeq	r2, r1, ip, lsl #8
   11c70:	andeq	r2, r1, ip, lsl #8
   11c74:	andeq	r2, r1, r0, lsl #8
   11c78:	andeq	r2, r1, ip, lsl #8
   11c7c:	andeq	r2, r1, r4, ror #9
   11c80:	andeq	r2, r1, ip, lsl #8
   11c84:	andeq	r2, r1, r4, asr r5
   11c88:	andeq	r2, r1, ip, lsl #8
   11c8c:	andeq	r2, r1, ip, lsl #8
   11c90:	andeq	r2, r1, ip, lsl #8
   11c94:	andeq	r2, r1, r4, ror #9
   11c98:	andeq	r2, r1, r4, ror #9
   11c9c:	andeq	r2, r1, r4, ror #9
   11ca0:	andeq	r2, r1, r4, ror #9
   11ca4:	andeq	r2, r1, r4, ror #9
   11ca8:	andeq	r2, r1, r4, ror #9
   11cac:	andeq	r2, r1, r4, ror #9
   11cb0:	andeq	r2, r1, r4, ror #9
   11cb4:	andeq	r2, r1, r4, ror #9
   11cb8:	andeq	r2, r1, r4, ror #9
   11cbc:	andeq	r2, r1, r4, ror #9
   11cc0:	andeq	r2, r1, r4, ror #9
   11cc4:	andeq	r2, r1, r4, ror #9
   11cc8:	andeq	r2, r1, r4, ror #9
   11ccc:	andeq	r2, r1, r4, ror #9
   11cd0:	andeq	r2, r1, r4, ror #9
   11cd4:	andeq	r2, r1, ip, lsl #8
   11cd8:	andeq	r2, r1, ip, lsl #8
   11cdc:	andeq	r2, r1, ip, lsl #8
   11ce0:	andeq	r2, r1, ip, lsl #8
   11ce4:	andeq	r2, r1, r4, lsl #10
   11ce8:	andeq	r3, r1, r0, lsl #1
   11cec:	andeq	r2, r1, r4, ror #9
   11cf0:	andeq	r2, r1, r4, ror #9
   11cf4:	andeq	r2, r1, r4, ror #9
   11cf8:	andeq	r2, r1, r4, ror #9
   11cfc:	andeq	r2, r1, r4, ror #9
   11d00:	andeq	r2, r1, r4, ror #9
   11d04:	andeq	r2, r1, r4, ror #9
   11d08:	andeq	r2, r1, r4, ror #9
   11d0c:	andeq	r2, r1, r4, ror #9
   11d10:	andeq	r2, r1, r4, ror #9
   11d14:	andeq	r2, r1, r4, ror #9
   11d18:	andeq	r2, r1, r4, ror #9
   11d1c:	andeq	r2, r1, r4, ror #9
   11d20:	andeq	r2, r1, r4, ror #9
   11d24:	andeq	r2, r1, r4, ror #9
   11d28:	andeq	r2, r1, r4, ror #9
   11d2c:	andeq	r2, r1, r4, ror #9
   11d30:	andeq	r2, r1, r4, ror #9
   11d34:	andeq	r2, r1, r4, ror #9
   11d38:	andeq	r2, r1, r4, ror #9
   11d3c:	andeq	r2, r1, r4, ror #9
   11d40:	andeq	r2, r1, r4, ror #9
   11d44:	andeq	r2, r1, r4, ror #9
   11d48:	andeq	r2, r1, r4, ror #9
   11d4c:	andeq	r2, r1, r4, ror #9
   11d50:	andeq	r2, r1, r4, ror #9
   11d54:	andeq	r2, r1, ip, lsl #8
   11d58:	andeq	r2, r1, r8, lsr #9
   11d5c:	andeq	r2, r1, r4, ror #9
   11d60:	andeq	r2, r1, ip, lsl #8
   11d64:	andeq	r2, r1, r4, ror #9
   11d68:	andeq	r2, r1, ip, lsl #8
   11d6c:	andeq	r2, r1, r4, ror #9
   11d70:	andeq	r2, r1, r4, ror #9
   11d74:	andeq	r2, r1, r4, ror #9
   11d78:	andeq	r2, r1, r4, ror #9
   11d7c:	andeq	r2, r1, r4, ror #9
   11d80:	andeq	r2, r1, r4, ror #9
   11d84:	andeq	r2, r1, r4, ror #9
   11d88:	andeq	r2, r1, r4, ror #9
   11d8c:	andeq	r2, r1, r4, ror #9
   11d90:	andeq	r2, r1, r4, ror #9
   11d94:	andeq	r2, r1, r4, ror #9
   11d98:	andeq	r2, r1, r4, ror #9
   11d9c:	andeq	r2, r1, r4, ror #9
   11da0:	andeq	r2, r1, r4, ror #9
   11da4:	andeq	r2, r1, r4, ror #9
   11da8:	andeq	r2, r1, r4, ror #9
   11dac:	andeq	r2, r1, r4, ror #9
   11db0:	andeq	r2, r1, r4, ror #9
   11db4:	andeq	r2, r1, r4, ror #9
   11db8:	andeq	r2, r1, r4, ror #9
   11dbc:	andeq	r2, r1, r4, ror #9
   11dc0:	andeq	r2, r1, r4, ror #9
   11dc4:	andeq	r2, r1, r4, ror #9
   11dc8:	andeq	r2, r1, r4, ror #9
   11dcc:	andeq	r2, r1, r4, ror #9
   11dd0:	andeq	r2, r1, r4, ror #9
   11dd4:			; <UNDEFINED> instruction: 0x000123b4
   11dd8:	andeq	r2, r1, ip, lsl #8
   11ddc:			; <UNDEFINED> instruction: 0x000123b4
   11de0:	andeq	r2, r1, r0, lsl #8
   11de4:	ldr	r3, [sp, #180]	; 0xb4
   11de8:	cmp	r4, #0
   11dec:	and	r3, r3, #1
   11df0:	str	r3, [sp, #92]	; 0x5c
   11df4:	ldr	r3, [sp, #180]	; 0xb4
   11df8:	and	r3, r3, #4
   11dfc:	str	r3, [sp, #96]	; 0x60
   11e00:	moveq	r3, #1
   11e04:	streq	r3, [sp, #60]	; 0x3c
   11e08:	beq	12598 <__assert_fail@plt+0x170c>
   11e0c:	mov	r3, #0
   11e10:	mov	r2, #1
   11e14:	mov	r4, r3
   11e18:	mov	r9, r3
   11e1c:	str	r2, [sp, #32]
   11e20:	str	r2, [sp, #44]	; 0x2c
   11e24:	str	r3, [sp, #48]	; 0x30
   11e28:	str	r2, [sp, #52]	; 0x34
   11e2c:	str	r2, [sp, #56]	; 0x38
   11e30:	str	r3, [sp, #60]	; 0x3c
   11e34:	str	r2, [sp, #64]	; 0x40
   11e38:	str	r2, [sp, #68]	; 0x44
   11e3c:	str	r3, [sp, #80]	; 0x50
   11e40:	str	r3, [sp, #84]	; 0x54
   11e44:	str	r3, [sp, #88]	; 0x58
   11e48:	movw	r3, #31592	; 0x7b68
   11e4c:	movt	r3, #1
   11e50:	str	r3, [sp, #72]	; 0x48
   11e54:	mov	r3, #2
   11e58:	str	r3, [sp, #176]	; 0xb0
   11e5c:	b	11b30 <__assert_fail@plt+0xca4>
   11e60:	ldr	r3, [sp, #180]	; 0xb4
   11e64:	cmp	r4, #0
   11e68:	and	r3, r3, #1
   11e6c:	str	r3, [sp, #92]	; 0x5c
   11e70:	ldr	r3, [sp, #180]	; 0xb4
   11e74:	and	r3, r3, #4
   11e78:	str	r3, [sp, #96]	; 0x60
   11e7c:	bne	13250 <__assert_fail@plt+0x23c4>
   11e80:	cmp	sl, #0
   11e84:	beq	12ffc <__assert_fail@plt+0x2170>
   11e88:	mov	r3, #34	; 0x22
   11e8c:	mov	r2, r4
   11e90:	mov	r1, #1
   11e94:	mov	r9, r2
   11e98:	strb	r3, [fp]
   11e9c:	movw	r3, #31572	; 0x7b54
   11ea0:	movt	r3, #1
   11ea4:	mov	r4, r1
   11ea8:	str	r1, [sp, #32]
   11eac:	str	r2, [sp, #44]	; 0x2c
   11eb0:	str	r1, [sp, #48]	; 0x30
   11eb4:	str	r2, [sp, #52]	; 0x34
   11eb8:	str	r1, [sp, #56]	; 0x38
   11ebc:	str	r1, [sp, #60]	; 0x3c
   11ec0:	str	r2, [sp, #64]	; 0x40
   11ec4:	str	r2, [sp, #68]	; 0x44
   11ec8:	str	r3, [sp, #72]	; 0x48
   11ecc:	str	r2, [sp, #80]	; 0x50
   11ed0:	str	r2, [sp, #84]	; 0x54
   11ed4:	str	r2, [sp, #88]	; 0x58
   11ed8:	b	11b30 <__assert_fail@plt+0xca4>
   11edc:	mov	r3, #0
   11ee0:	mov	r2, #1
   11ee4:	mov	r9, r3
   11ee8:	str	r2, [sp, #32]
   11eec:	str	r3, [sp, #44]	; 0x2c
   11ef0:	str	r3, [sp, #48]	; 0x30
   11ef4:	str	r3, [sp, #52]	; 0x34
   11ef8:	str	r3, [sp, #60]	; 0x3c
   11efc:	strd	r2, [sp, #64]	; 0x40
   11f00:	str	r3, [sp, #72]	; 0x48
   11f04:	str	r3, [sp, #80]	; 0x50
   11f08:	str	r3, [sp, #88]	; 0x58
   11f0c:	ldr	r3, [sp, #180]	; 0xb4
   11f10:	and	r3, r3, r2
   11f14:	str	r3, [sp, #92]	; 0x5c
   11f18:	ldr	r3, [sp, #180]	; 0xb4
   11f1c:	and	r3, r3, #4
   11f20:	str	r3, [sp, #96]	; 0x60
   11f24:	ldr	r3, [sp, #176]	; 0xb0
   11f28:	mov	r4, r3
   11f2c:	str	r3, [sp, #56]	; 0x38
   11f30:	str	r3, [sp, #84]	; 0x54
   11f34:	b	11b30 <__assert_fail@plt+0xca4>
   11f38:	mov	r3, #1
   11f3c:	mov	r4, #0
   11f40:	mov	r9, r4
   11f44:	str	r3, [sp, #32]
   11f48:	str	r3, [sp, #44]	; 0x2c
   11f4c:	str	r3, [sp, #48]	; 0x30
   11f50:	str	r4, [sp, #52]	; 0x34
   11f54:	str	r3, [sp, #56]	; 0x38
   11f58:	str	r3, [sp, #60]	; 0x3c
   11f5c:	str	r3, [sp, #88]	; 0x58
   11f60:	movw	r3, #31572	; 0x7b54
   11f64:	movt	r3, #1
   11f68:	str	r4, [sp, #64]	; 0x40
   11f6c:	str	r4, [sp, #68]	; 0x44
   11f70:	str	r3, [sp, #72]	; 0x48
   11f74:	ldr	r3, [sp, #180]	; 0xb4
   11f78:	str	r4, [sp, #80]	; 0x50
   11f7c:	str	r4, [sp, #84]	; 0x54
   11f80:	and	r3, r3, #1
   11f84:	str	r3, [sp, #92]	; 0x5c
   11f88:	ldr	r3, [sp, #180]	; 0xb4
   11f8c:	and	r3, r3, #4
   11f90:	str	r3, [sp, #96]	; 0x60
   11f94:	mov	r3, #5
   11f98:	str	r3, [sp, #176]	; 0xb0
   11f9c:	b	11b30 <__assert_fail@plt+0xca4>
   11fa0:	mov	r3, #1
   11fa4:	mov	r4, #0
   11fa8:	mov	r9, r4
   11fac:	str	r3, [sp, #32]
   11fb0:	str	r4, [sp, #44]	; 0x2c
   11fb4:	str	r3, [sp, #48]	; 0x30
   11fb8:	str	r3, [sp, #60]	; 0x3c
   11fbc:	ldr	r3, [sp, #180]	; 0xb4
   11fc0:	str	r4, [sp, #52]	; 0x34
   11fc4:	str	r4, [sp, #56]	; 0x38
   11fc8:	str	r4, [sp, #64]	; 0x40
   11fcc:	str	r4, [sp, #68]	; 0x44
   11fd0:	and	r3, r3, #1
   11fd4:	str	r4, [sp, #72]	; 0x48
   11fd8:	str	r4, [sp, #80]	; 0x50
   11fdc:	str	r4, [sp, #84]	; 0x54
   11fe0:	str	r3, [sp, #92]	; 0x5c
   11fe4:	ldr	r3, [sp, #180]	; 0xb4
   11fe8:	str	r4, [sp, #88]	; 0x58
   11fec:	and	r3, r3, #4
   11ff0:	str	r3, [sp, #96]	; 0x60
   11ff4:	b	11b30 <__assert_fail@plt+0xca4>
   11ff8:	mov	r3, #0
   11ffc:	mov	r2, #1
   12000:	ldr	r1, [sp, #176]	; 0xb0
   12004:	mov	r4, r3
   12008:	mov	r9, r3
   1200c:	movw	r3, #31592	; 0x7b68
   12010:	movt	r3, #1
   12014:	str	r2, [sp, #32]
   12018:	str	r2, [sp, #44]	; 0x2c
   1201c:	str	r4, [sp, #48]	; 0x30
   12020:	strd	r2, [sp, #68]	; 0x44
   12024:	ldr	r3, [sp, #180]	; 0xb4
   12028:	str	r2, [sp, #52]	; 0x34
   1202c:	str	r1, [sp, #56]	; 0x38
   12030:	str	r4, [sp, #60]	; 0x3c
   12034:	str	r2, [sp, #64]	; 0x40
   12038:	and	r3, r3, r2
   1203c:	str	r4, [sp, #80]	; 0x50
   12040:	str	r4, [sp, #84]	; 0x54
   12044:	str	r4, [sp, #88]	; 0x58
   12048:	str	r3, [sp, #92]	; 0x5c
   1204c:	ldr	r3, [sp, #180]	; 0xb4
   12050:	and	r3, r3, #4
   12054:	str	r3, [sp, #96]	; 0x60
   12058:	mov	r3, #2
   1205c:	str	r3, [sp, #176]	; 0xb0
   12060:	b	11b30 <__assert_fail@plt+0xca4>
   12064:	mov	r3, #1
   12068:	mov	r2, #0
   1206c:	mov	r4, r2
   12070:	mov	r9, r2
   12074:	str	r3, [sp, #32]
   12078:	str	r3, [sp, #44]	; 0x2c
   1207c:	str	r2, [sp, #48]	; 0x30
   12080:	str	r3, [sp, #52]	; 0x34
   12084:	str	r3, [sp, #56]	; 0x38
   12088:	str	r3, [sp, #60]	; 0x3c
   1208c:	str	r3, [sp, #64]	; 0x40
   12090:	str	r3, [sp, #68]	; 0x44
   12094:	str	r3, [sp, #88]	; 0x58
   12098:	movw	r3, #31592	; 0x7b68
   1209c:	movt	r3, #1
   120a0:	str	r3, [sp, #72]	; 0x48
   120a4:	ldr	r3, [sp, #180]	; 0xb4
   120a8:	str	r2, [sp, #80]	; 0x50
   120ac:	str	r2, [sp, #84]	; 0x54
   120b0:	and	r3, r3, #1
   120b4:	b	12048 <__assert_fail@plt+0x11bc>
   120b8:	mov	r5, #102	; 0x66
   120bc:	mov	r6, #0
   120c0:	ldr	r3, [sp, #44]	; 0x2c
   120c4:	cmp	r3, #0
   120c8:	bne	12f78 <__assert_fail@plt+0x20ec>
   120cc:	ldr	r2, [sp, #52]	; 0x34
   120d0:	eor	r3, fp, #1
   120d4:	ands	r3, r2, r3
   120d8:	beq	12110 <__assert_fail@plt+0x1284>
   120dc:	cmp	sl, r4
   120e0:	mov	fp, r3
   120e4:	movhi	r2, #39	; 0x27
   120e8:	strbhi	r2, [r9, r4]
   120ec:	add	r2, r4, #1
   120f0:	cmp	sl, r2
   120f4:	movhi	r1, #36	; 0x24
   120f8:	strbhi	r1, [r9, r2]
   120fc:	add	r2, r4, #2
   12100:	add	r4, r4, #3
   12104:	cmp	sl, r2
   12108:	movhi	r1, #39	; 0x27
   1210c:	strbhi	r1, [r9, r2]
   12110:	cmp	sl, r4
   12114:	add	r7, r7, #1
   12118:	movhi	r3, #92	; 0x5c
   1211c:	strbhi	r3, [r9, r4]
   12120:	add	r4, r4, #1
   12124:	cmp	r4, sl
   12128:	ldr	r3, [sp, #32]
   1212c:	strbcc	r5, [r9, r4]
   12130:	cmp	r6, #0
   12134:	add	r4, r4, #1
   12138:	moveq	r3, #0
   1213c:	cmn	r8, #1
   12140:	str	r3, [sp, #32]
   12144:	bne	11b48 <__assert_fail@plt+0xcbc>
   12148:	ldr	r3, [sp, #28]
   1214c:	ldrb	r6, [r3, r7]
   12150:	adds	r6, r6, #0
   12154:	movne	r6, #1
   12158:	cmp	r6, #0
   1215c:	bne	11b58 <__assert_fail@plt+0xccc>
   12160:	mov	r3, r9
   12164:	mov	r9, fp
   12168:	mov	fp, r3
   1216c:	ldr	r3, [sp, #68]	; 0x44
   12170:	cmp	r4, #0
   12174:	movne	r3, #0
   12178:	cmp	r3, #0
   1217c:	bne	13370 <__assert_fail@plt+0x24e4>
   12180:	ldr	r3, [sp, #44]	; 0x2c
   12184:	ldr	r2, [sp, #52]	; 0x34
   12188:	eor	r3, r3, #1
   1218c:	ands	r2, r3, r2
   12190:	beq	132a8 <__assert_fail@plt+0x241c>
   12194:	ldr	r3, [sp, #80]	; 0x50
   12198:	cmp	r3, #0
   1219c:	beq	132ac <__assert_fail@plt+0x2420>
   121a0:	ldr	r3, [sp, #32]
   121a4:	cmp	r3, #0
   121a8:	bne	13320 <__assert_fail@plt+0x2494>
   121ac:	ldr	r3, [sp, #84]	; 0x54
   121b0:	adds	r3, r3, #0
   121b4:	movne	r3, #1
   121b8:	cmp	sl, #0
   121bc:	movne	r3, #0
   121c0:	cmp	r3, #0
   121c4:	ldreq	r2, [sp, #80]	; 0x50
   121c8:	beq	132ac <__assert_fail@plt+0x2420>
   121cc:	ldr	r2, [sp, #84]	; 0x54
   121d0:	mov	sl, r2
   121d4:	mov	r0, #0
   121d8:	mov	r4, #1
   121dc:	mov	r1, #39	; 0x27
   121e0:	str	r0, [sp, #44]	; 0x2c
   121e4:	strb	r1, [fp]
   121e8:	str	r0, [sp, #48]	; 0x30
   121ec:	str	r4, [sp, #52]	; 0x34
   121f0:	str	r4, [sp, #56]	; 0x38
   121f4:	str	r4, [sp, #64]	; 0x40
   121f8:	str	r0, [sp, #68]	; 0x44
   121fc:	str	r3, [sp, #80]	; 0x50
   12200:	str	r2, [sp, #84]	; 0x54
   12204:	str	r0, [sp, #88]	; 0x58
   12208:	b	11e48 <__assert_fail@plt+0xfbc>
   1220c:	mov	r5, #98	; 0x62
   12210:	b	120bc <__assert_fail@plt+0x1230>
   12214:	mov	r5, #97	; 0x61
   12218:	b	120bc <__assert_fail@plt+0x1230>
   1221c:	ldr	r3, [sp, #48]	; 0x30
   12220:	str	r3, [sp, #40]	; 0x28
   12224:	mov	r3, #116	; 0x74
   12228:	ldr	r2, [sp, #68]	; 0x44
   1222c:	cmp	r2, #0
   12230:	bne	1242c <__assert_fail@plt+0x15a0>
   12234:	ldr	r2, [sp, #60]	; 0x3c
   12238:	cmp	r2, #0
   1223c:	bne	12388 <__assert_fail@plt+0x14fc>
   12240:	ldr	r3, [sp, #44]	; 0x2c
   12244:	mov	r6, #0
   12248:	cmp	r3, #0
   1224c:	beq	123f8 <__assert_fail@plt+0x156c>
   12250:	mov	r3, fp
   12254:	ldr	r2, [sp, #184]	; 0xb8
   12258:	cmp	r2, #0
   1225c:	beq	1227c <__assert_fail@plt+0x13f0>
   12260:	ubfx	r1, r5, #5, #8
   12264:	mov	r0, r2
   12268:	and	r2, r5, #31
   1226c:	ldr	r1, [r0, r1, lsl #2]
   12270:	lsr	r2, r1, r2
   12274:	tst	r2, #1
   12278:	bne	120c0 <__assert_fail@plt+0x1234>
   1227c:	ldr	r2, [sp, #40]	; 0x28
   12280:	cmp	r2, #0
   12284:	addeq	r7, r7, #1
   12288:	bne	120c0 <__assert_fail@plt+0x1234>
   1228c:	cmp	r3, #0
   12290:	beq	12124 <__assert_fail@plt+0x1298>
   12294:	cmp	sl, r4
   12298:	mov	fp, #0
   1229c:	movhi	r3, #39	; 0x27
   122a0:	strbhi	r3, [r9, r4]
   122a4:	add	r3, r4, #1
   122a8:	add	r4, r4, #2
   122ac:	cmp	sl, r3
   122b0:	movhi	r2, #39	; 0x27
   122b4:	strbhi	r2, [r9, r3]
   122b8:	b	12124 <__assert_fail@plt+0x1298>
   122bc:	ldr	r3, [sp, #48]	; 0x30
   122c0:	str	r3, [sp, #40]	; 0x28
   122c4:	eor	r3, fp, #1
   122c8:	ldr	r2, [sp, #52]	; 0x34
   122cc:	ands	r2, r2, r3
   122d0:	beq	12f90 <__assert_fail@plt+0x2104>
   122d4:	cmp	sl, r4
   122d8:	movhi	r3, #39	; 0x27
   122dc:	strbhi	r3, [r9, r4]
   122e0:	add	r3, r4, #1
   122e4:	cmp	sl, r3
   122e8:	movhi	r1, #36	; 0x24
   122ec:	strbhi	r1, [r9, r3]
   122f0:	add	r3, r4, #2
   122f4:	cmp	sl, r3
   122f8:	movhi	r1, #39	; 0x27
   122fc:	strbhi	r1, [r9, r3]
   12300:	add	r3, r4, #3
   12304:	cmp	sl, r3
   12308:	bls	12fdc <__assert_fail@plt+0x2150>
   1230c:	mov	r4, r3
   12310:	mov	r3, #92	; 0x5c
   12314:	mov	fp, r2
   12318:	mov	r2, r4
   1231c:	strb	r3, [r9, r4]
   12320:	ldr	r3, [sp, #176]	; 0xb0
   12324:	add	r4, r4, #1
   12328:	cmp	r3, #2
   1232c:	beq	13044 <__assert_fail@plt+0x21b8>
   12330:	add	r3, r7, #1
   12334:	cmp	r3, r8
   12338:	bcs	12350 <__assert_fail@plt+0x14c4>
   1233c:	ldr	r1, [sp, #28]
   12340:	ldrb	r3, [r1, r3]
   12344:	sub	r3, r3, #48	; 0x30
   12348:	cmp	r3, #9
   1234c:	bls	13054 <__assert_fail@plt+0x21c8>
   12350:	mov	r3, #0
   12354:	mov	r5, #48	; 0x30
   12358:	ldr	r6, [sp, #64]	; 0x40
   1235c:	cmp	r6, #0
   12360:	beq	12254 <__assert_fail@plt+0x13c8>
   12364:	mov	r6, #0
   12368:	b	1227c <__assert_fail@plt+0x13f0>
   1236c:	ldr	r3, [sp, #48]	; 0x30
   12370:	str	r3, [sp, #40]	; 0x28
   12374:	ldr	r2, [sp, #60]	; 0x3c
   12378:	mov	r5, #13
   1237c:	mov	r3, #114	; 0x72
   12380:	cmp	r2, #0
   12384:	beq	12240 <__assert_fail@plt+0x13b4>
   12388:	mov	r5, r3
   1238c:	b	120bc <__assert_fail@plt+0x1230>
   12390:	ldr	r3, [sp, #48]	; 0x30
   12394:	str	r3, [sp, #40]	; 0x28
   12398:	mov	r3, #118	; 0x76
   1239c:	b	12234 <__assert_fail@plt+0x13a8>
   123a0:	ldr	r3, [sp, #48]	; 0x30
   123a4:	str	r3, [sp, #40]	; 0x28
   123a8:	mov	r5, #10
   123ac:	mov	r3, #110	; 0x6e
   123b0:	b	12234 <__assert_fail@plt+0x13a8>
   123b4:	ldr	r3, [sp, #48]	; 0x30
   123b8:	cmn	r8, #1
   123bc:	str	r3, [sp, #40]	; 0x28
   123c0:	beq	12808 <__assert_fail@plt+0x197c>
   123c4:	subs	r3, r8, #1
   123c8:	movne	r3, #1
   123cc:	cmp	r3, #0
   123d0:	bne	123dc <__assert_fail@plt+0x1550>
   123d4:	cmp	r7, #0
   123d8:	beq	12420 <__assert_fail@plt+0x1594>
   123dc:	mov	r6, #0
   123e0:	ldr	r3, [sp, #64]	; 0x40
   123e4:	cmp	r3, #0
   123e8:	beq	12250 <__assert_fail@plt+0x13c4>
   123ec:	ldr	r3, [sp, #44]	; 0x2c
   123f0:	cmp	r3, #0
   123f4:	bne	12250 <__assert_fail@plt+0x13c4>
   123f8:	mov	r3, fp
   123fc:	b	1227c <__assert_fail@plt+0x13f0>
   12400:	ldr	r3, [sp, #48]	; 0x30
   12404:	str	r3, [sp, #40]	; 0x28
   12408:	b	123d4 <__assert_fail@plt+0x1548>
   1240c:	ldr	r3, [sp, #48]	; 0x30
   12410:	str	r3, [sp, #40]	; 0x28
   12414:	b	123dc <__assert_fail@plt+0x1550>
   12418:	ldr	r6, [sp, #48]	; 0x30
   1241c:	str	r6, [sp, #40]	; 0x28
   12420:	ldr	r3, [sp, #68]	; 0x44
   12424:	cmp	r3, #0
   12428:	beq	123e0 <__assert_fail@plt+0x1554>
   1242c:	mov	r3, #2
   12430:	mov	fp, r9
   12434:	str	r3, [sp, #176]	; 0xb0
   12438:	ldr	r3, [sp, #60]	; 0x3c
   1243c:	cmp	r3, #0
   12440:	ldr	r3, [sp, #176]	; 0xb0
   12444:	movne	r3, #4
   12448:	str	r3, [sp, #176]	; 0xb0
   1244c:	mov	lr, #0
   12450:	mov	r0, fp
   12454:	ldr	r2, [sp, #28]
   12458:	ldr	r3, [sp, #180]	; 0xb4
   1245c:	ldr	r1, [sp, #188]	; 0xbc
   12460:	bic	ip, r3, #2
   12464:	ldr	r3, [sp, #176]	; 0xb0
   12468:	stm	sp, {r3, ip, lr}
   1246c:	mov	r3, r8
   12470:	ldr	ip, [sp, #192]	; 0xc0
   12474:	str	r1, [sp, #12]
   12478:	mov	r1, sl
   1247c:	str	ip, [sp, #16]
   12480:	bl	11a0c <__assert_fail@plt+0xb80>
   12484:	mov	r4, r0
   12488:	mov	r0, r4
   1248c:	add	sp, sp, #140	; 0x8c
   12490:	ldrd	r4, [sp]
   12494:	ldrd	r6, [sp, #8]
   12498:	ldrd	r8, [sp, #16]
   1249c:	ldrd	sl, [sp, #24]
   124a0:	add	sp, sp, #32
   124a4:	pop	{pc}		; (ldr pc, [sp], #4)
   124a8:	ldr	r3, [sp, #48]	; 0x30
   124ac:	str	r3, [sp, #40]	; 0x28
   124b0:	ldr	r3, [sp, #176]	; 0xb0
   124b4:	cmp	r3, #2
   124b8:	beq	12830 <__assert_fail@plt+0x19a4>
   124bc:	ldr	r3, [sp, #88]	; 0x58
   124c0:	cmp	r3, #0
   124c4:	moveq	r5, #92	; 0x5c
   124c8:	moveq	r3, r5
   124cc:	beq	12234 <__assert_fail@plt+0x13a8>
   124d0:	add	r7, r7, #1
   124d4:	mov	r3, fp
   124d8:	mov	r6, #0
   124dc:	mov	r5, #92	; 0x5c
   124e0:	b	1228c <__assert_fail@plt+0x1400>
   124e4:	ldr	r3, [sp, #64]	; 0x40
   124e8:	cmp	r3, #0
   124ec:	bne	13364 <__assert_fail@plt+0x24d8>
   124f0:	ldr	r2, [sp, #48]	; 0x30
   124f4:	mov	r3, fp
   124f8:	mov	r6, r2
   124fc:	str	r2, [sp, #40]	; 0x28
   12500:	b	12254 <__assert_fail@plt+0x13c8>
   12504:	ldr	r3, [sp, #176]	; 0xb0
   12508:	cmp	r3, #2
   1250c:	beq	132a0 <__assert_fail@plt+0x2414>
   12510:	cmp	r3, #5
   12514:	ldr	r3, [sp, #48]	; 0x30
   12518:	str	r3, [sp, #40]	; 0x28
   1251c:	bne	12548 <__assert_fail@plt+0x16bc>
   12520:	ldr	r3, [sp, #96]	; 0x60
   12524:	cmp	r3, #0
   12528:	beq	12fa4 <__assert_fail@plt+0x2118>
   1252c:	add	r3, r7, #2
   12530:	cmp	r3, r8
   12534:	bcs	12548 <__assert_fail@plt+0x16bc>
   12538:	ldr	r2, [sp, #36]	; 0x24
   1253c:	ldrb	r5, [r2, #1]
   12540:	cmp	r5, #63	; 0x3f
   12544:	beq	1308c <__assert_fail@plt+0x2200>
   12548:	mov	r6, #0
   1254c:	mov	r5, #63	; 0x3f
   12550:	b	123e0 <__assert_fail@plt+0x1554>
   12554:	ldr	r3, [sp, #176]	; 0xb0
   12558:	cmp	r3, #2
   1255c:	ldr	r3, [sp, #48]	; 0x30
   12560:	beq	12d48 <__assert_fail@plt+0x1ebc>
   12564:	mov	r5, #39	; 0x27
   12568:	str	r3, [sp, #40]	; 0x28
   1256c:	str	r6, [sp, #80]	; 0x50
   12570:	b	123e0 <__assert_fail@plt+0x1554>
   12574:	ldr	r3, [sp, #180]	; 0xb4
   12578:	cmp	r4, #0
   1257c:	and	r3, r3, #1
   12580:	str	r3, [sp, #92]	; 0x5c
   12584:	ldr	r3, [sp, #180]	; 0xb4
   12588:	and	r3, r3, #4
   1258c:	str	r3, [sp, #96]	; 0x60
   12590:	bne	133b0 <__assert_fail@plt+0x2524>
   12594:	str	r4, [sp, #60]	; 0x3c
   12598:	cmp	sl, #0
   1259c:	bne	13394 <__assert_fail@plt+0x2508>
   125a0:	mov	r3, #1
   125a4:	movw	r2, #31592	; 0x7b68
   125a8:	movt	r2, #1
   125ac:	mov	r4, r3
   125b0:	mov	r3, #2
   125b4:	mov	r9, sl
   125b8:	str	r4, [sp, #32]
   125bc:	str	sl, [sp, #44]	; 0x2c
   125c0:	str	sl, [sp, #48]	; 0x30
   125c4:	str	r4, [sp, #52]	; 0x34
   125c8:	str	r4, [sp, #56]	; 0x38
   125cc:	str	r4, [sp, #64]	; 0x40
   125d0:	str	sl, [sp, #68]	; 0x44
   125d4:	str	r2, [sp, #72]	; 0x48
   125d8:	str	sl, [sp, #80]	; 0x50
   125dc:	str	sl, [sp, #84]	; 0x54
   125e0:	str	sl, [sp, #88]	; 0x58
   125e4:	str	r3, [sp, #176]	; 0xb0
   125e8:	b	11b30 <__assert_fail@plt+0xca4>
   125ec:	ldrb	r5, [r0, r7]
   125f0:	cmp	r5, #126	; 0x7e
   125f4:	ldrls	pc, [pc, r5, lsl #2]
   125f8:	b	1295c <__assert_fail@plt+0x1ad0>
   125fc:	andeq	r2, r1, r8, lsr #18
   12600:	andeq	r2, r1, ip, asr r9
   12604:	andeq	r2, r1, ip, asr r9
   12608:	andeq	r2, r1, ip, asr r9
   1260c:	andeq	r2, r1, ip, asr r9
   12610:	andeq	r2, r1, ip, asr r9
   12614:	andeq	r2, r1, ip, asr r9
   12618:	andeq	r2, r1, r8, lsl r9
   1261c:	andeq	r2, r1, r8, lsl #18
   12620:	andeq	r2, r1, ip, lsl #17
   12624:	strdeq	r2, [r1], -r8
   12628:	andeq	r2, r1, ip, ror #16
   1262c:	andeq	r2, r1, ip, asr #18
   12630:	ldrdeq	r2, [r1], -r8
   12634:	andeq	r2, r1, ip, asr r9
   12638:	andeq	r2, r1, ip, asr r9
   1263c:	andeq	r2, r1, ip, asr r9
   12640:	andeq	r2, r1, ip, asr r9
   12644:	andeq	r2, r1, ip, asr r9
   12648:	andeq	r2, r1, ip, asr r9
   1264c:	andeq	r2, r1, ip, asr r9
   12650:	andeq	r2, r1, ip, asr r9
   12654:	andeq	r2, r1, ip, asr r9
   12658:	andeq	r2, r1, ip, asr r9
   1265c:	andeq	r2, r1, ip, asr r9
   12660:	andeq	r2, r1, ip, asr r9
   12664:	andeq	r2, r1, ip, asr r9
   12668:	andeq	r2, r1, ip, asr r9
   1266c:	andeq	r2, r1, ip, asr r9
   12670:	andeq	r2, r1, ip, asr r9
   12674:	andeq	r2, r1, ip, asr r9
   12678:	andeq	r2, r1, ip, asr r9
   1267c:	andeq	r2, r1, r0, lsl #17
   12680:	andeq	r2, r1, r8, ror #17
   12684:	andeq	r2, r1, r8, ror #17
   12688:	andeq	r2, r1, r0, ror #16
   1268c:	andeq	r2, r1, r8, ror #17
   12690:	andeq	r2, r1, r4, asr r8
   12694:	andeq	r2, r1, r8, ror #17
   12698:	andeq	r2, r1, r4, asr #17
   1269c:	andeq	r2, r1, r8, ror #17
   126a0:	andeq	r2, r1, r8, ror #17
   126a4:	andeq	r2, r1, r8, ror #17
   126a8:	andeq	r2, r1, r4, asr r8
   126ac:	andeq	r2, r1, r4, asr r8
   126b0:	andeq	r2, r1, r4, asr r8
   126b4:	andeq	r2, r1, r4, asr r8
   126b8:	andeq	r2, r1, r4, asr r8
   126bc:	andeq	r2, r1, r4, asr r8
   126c0:	andeq	r2, r1, r4, asr r8
   126c4:	andeq	r2, r1, r4, asr r8
   126c8:	andeq	r2, r1, r4, asr r8
   126cc:	andeq	r2, r1, r4, asr r8
   126d0:	andeq	r2, r1, r4, asr r8
   126d4:	andeq	r2, r1, r4, asr r8
   126d8:	andeq	r2, r1, r4, asr r8
   126dc:	andeq	r2, r1, r4, asr r8
   126e0:	andeq	r2, r1, r4, asr r8
   126e4:	andeq	r2, r1, r4, asr r8
   126e8:	andeq	r2, r1, r8, ror #17
   126ec:	andeq	r2, r1, r8, ror #17
   126f0:	andeq	r2, r1, r8, ror #17
   126f4:	andeq	r2, r1, r8, ror #17
   126f8:	muleq	r1, ip, r8
   126fc:	andeq	r2, r1, ip, asr r9
   12700:	andeq	r2, r1, r4, asr r8
   12704:	andeq	r2, r1, r4, asr r8
   12708:	andeq	r2, r1, r4, asr r8
   1270c:	andeq	r2, r1, r4, asr r8
   12710:	andeq	r2, r1, r4, asr r8
   12714:	andeq	r2, r1, r4, asr r8
   12718:	andeq	r2, r1, r4, asr r8
   1271c:	andeq	r2, r1, r4, asr r8
   12720:	andeq	r2, r1, r4, asr r8
   12724:	andeq	r2, r1, r4, asr r8
   12728:	andeq	r2, r1, r4, asr r8
   1272c:	andeq	r2, r1, r4, asr r8
   12730:	andeq	r2, r1, r4, asr r8
   12734:	andeq	r2, r1, r4, asr r8
   12738:	andeq	r2, r1, r4, asr r8
   1273c:	andeq	r2, r1, r4, asr r8
   12740:	andeq	r2, r1, r4, asr r8
   12744:	andeq	r2, r1, r4, asr r8
   12748:	andeq	r2, r1, r4, asr r8
   1274c:	andeq	r2, r1, r4, asr r8
   12750:	andeq	r2, r1, r4, asr r8
   12754:	andeq	r2, r1, r4, asr r8
   12758:	andeq	r2, r1, r4, asr r8
   1275c:	andeq	r2, r1, r4, asr r8
   12760:	andeq	r2, r1, r4, asr r8
   12764:	andeq	r2, r1, r4, asr r8
   12768:	andeq	r2, r1, r8, ror #17
   1276c:	andeq	r2, r1, ip, lsl r8
   12770:	andeq	r2, r1, r4, asr r8
   12774:	andeq	r2, r1, r8, ror #17
   12778:	andeq	r2, r1, r4, asr r8
   1277c:	andeq	r2, r1, r8, ror #17
   12780:	andeq	r2, r1, r4, asr r8
   12784:	andeq	r2, r1, r4, asr r8
   12788:	andeq	r2, r1, r4, asr r8
   1278c:	andeq	r2, r1, r4, asr r8
   12790:	andeq	r2, r1, r4, asr r8
   12794:	andeq	r2, r1, r4, asr r8
   12798:	andeq	r2, r1, r4, asr r8
   1279c:	andeq	r2, r1, r4, asr r8
   127a0:	andeq	r2, r1, r4, asr r8
   127a4:	andeq	r2, r1, r4, asr r8
   127a8:	andeq	r2, r1, r4, asr r8
   127ac:	andeq	r2, r1, r4, asr r8
   127b0:	andeq	r2, r1, r4, asr r8
   127b4:	andeq	r2, r1, r4, asr r8
   127b8:	andeq	r2, r1, r4, asr r8
   127bc:	andeq	r2, r1, r4, asr r8
   127c0:	andeq	r2, r1, r4, asr r8
   127c4:	andeq	r2, r1, r4, asr r8
   127c8:	andeq	r2, r1, r4, asr r8
   127cc:	andeq	r2, r1, r4, asr r8
   127d0:	andeq	r2, r1, r4, asr r8
   127d4:	andeq	r2, r1, r4, asr r8
   127d8:	andeq	r2, r1, r4, asr r8
   127dc:	andeq	r2, r1, r4, asr r8
   127e0:	andeq	r2, r1, r4, asr r8
   127e4:	andeq	r2, r1, r4, asr r8
   127e8:	strdeq	r2, [r1], -r8
   127ec:	andeq	r2, r1, r8, ror #17
   127f0:	strdeq	r2, [r1], -r8
   127f4:	andeq	r2, r1, r0, ror #16
   127f8:	mov	r3, #0
   127fc:	cmn	r8, #1
   12800:	str	r3, [sp, #40]	; 0x28
   12804:	bne	123c4 <__assert_fail@plt+0x1538>
   12808:	ldr	r3, [sp, #28]
   1280c:	ldrb	r3, [r3, #1]
   12810:	adds	r3, r3, #0
   12814:	movne	r3, #1
   12818:	b	123cc <__assert_fail@plt+0x1540>
   1281c:	mov	r3, #0
   12820:	str	r3, [sp, #40]	; 0x28
   12824:	ldr	r3, [sp, #176]	; 0xb0
   12828:	cmp	r3, #2
   1282c:	bne	124bc <__assert_fail@plt+0x1630>
   12830:	ldr	r3, [sp, #44]	; 0x2c
   12834:	cmp	r3, #0
   12838:	bne	13178 <__assert_fail@plt+0x22ec>
   1283c:	mov	r6, r3
   12840:	add	r7, r7, #1
   12844:	mov	r3, fp
   12848:	mov	r5, #92	; 0x5c
   1284c:	b	1228c <__assert_fail@plt+0x1400>
   12850:	ldr	r6, [sp, #48]	; 0x30
   12854:	mov	r3, #0
   12858:	str	r3, [sp, #40]	; 0x28
   1285c:	b	123e0 <__assert_fail@plt+0x1554>
   12860:	mov	r3, #0
   12864:	str	r3, [sp, #40]	; 0x28
   12868:	b	123d4 <__assert_fail@plt+0x1548>
   1286c:	mov	r3, #0
   12870:	str	r3, [sp, #40]	; 0x28
   12874:	mov	r3, #118	; 0x76
   12878:	b	12234 <__assert_fail@plt+0x13a8>
   1287c:	ldr	r6, [sp, #48]	; 0x30
   12880:	mov	r3, #0
   12884:	str	r3, [sp, #40]	; 0x28
   12888:	b	12420 <__assert_fail@plt+0x1594>
   1288c:	mov	r3, #0
   12890:	str	r3, [sp, #40]	; 0x28
   12894:	mov	r3, #116	; 0x74
   12898:	b	12228 <__assert_fail@plt+0x139c>
   1289c:	ldr	r3, [sp, #176]	; 0xb0
   128a0:	cmp	r3, #2
   128a4:	beq	12db4 <__assert_fail@plt+0x1f28>
   128a8:	cmp	r3, #5
   128ac:	mov	r3, #0
   128b0:	str	r3, [sp, #40]	; 0x28
   128b4:	beq	12520 <__assert_fail@plt+0x1694>
   128b8:	mov	r6, #0
   128bc:	mov	r5, #63	; 0x3f
   128c0:	b	123e0 <__assert_fail@plt+0x1554>
   128c4:	ldr	r3, [sp, #176]	; 0xb0
   128c8:	cmp	r3, #2
   128cc:	beq	12d3c <__assert_fail@plt+0x1eb0>
   128d0:	mov	r3, #0
   128d4:	b	12564 <__assert_fail@plt+0x16d8>
   128d8:	mov	r3, #0
   128dc:	str	r3, [sp, #40]	; 0x28
   128e0:	mov	r3, #114	; 0x72
   128e4:	b	12228 <__assert_fail@plt+0x139c>
   128e8:	mov	r3, #0
   128ec:	mov	r6, r3
   128f0:	str	r3, [sp, #40]	; 0x28
   128f4:	b	12420 <__assert_fail@plt+0x1594>
   128f8:	mov	r3, #0
   128fc:	str	r3, [sp, #40]	; 0x28
   12900:	mov	r3, #110	; 0x6e
   12904:	b	12228 <__assert_fail@plt+0x139c>
   12908:	mov	r3, #0
   1290c:	str	r3, [sp, #40]	; 0x28
   12910:	mov	r3, #98	; 0x62
   12914:	b	12234 <__assert_fail@plt+0x13a8>
   12918:	mov	r3, #0
   1291c:	str	r3, [sp, #40]	; 0x28
   12920:	mov	r3, #97	; 0x61
   12924:	b	12234 <__assert_fail@plt+0x13a8>
   12928:	ldr	r3, [sp, #60]	; 0x3c
   1292c:	cmp	r3, #0
   12930:	bne	12d20 <__assert_fail@plt+0x1e94>
   12934:	ldr	r3, [sp, #92]	; 0x5c
   12938:	cmp	r3, #0
   1293c:	addne	r7, r7, #1
   12940:	bne	11b40 <__assert_fail@plt+0xcb4>
   12944:	str	r3, [sp, #40]	; 0x28
   12948:	b	12240 <__assert_fail@plt+0x13b4>
   1294c:	mov	r3, #0
   12950:	str	r3, [sp, #40]	; 0x28
   12954:	mov	r3, #102	; 0x66
   12958:	b	12234 <__assert_fail@plt+0x13a8>
   1295c:	mov	r3, #0
   12960:	str	r3, [sp, #40]	; 0x28
   12964:	ldr	r3, [sp, #76]	; 0x4c
   12968:	cmp	r3, #1
   1296c:	bne	12dd4 <__assert_fail@plt+0x1f48>
   12970:	bl	10d9c <__ctype_b_loc@plt>
   12974:	ldr	r2, [r0]
   12978:	sxth	r3, r5
   1297c:	lsl	r3, r3, #1
   12980:	ldr	r1, [sp, #76]	; 0x4c
   12984:	ldrh	r3, [r2, r3]
   12988:	mov	r0, r1
   1298c:	and	r3, r3, #16384	; 0x4000
   12990:	cmp	r3, #0
   12994:	ldr	r3, [sp, #60]	; 0x3c
   12998:	movne	r6, #1
   1299c:	moveq	r6, #0
   129a0:	movne	r2, #0
   129a4:	andeq	r2, r3, #1
   129a8:	cmp	r2, #0
   129ac:	beq	123e0 <__assert_fail@plt+0x1554>
   129b0:	ldr	r2, [sp, #60]	; 0x3c
   129b4:	mov	r6, #0
   129b8:	add	r1, r0, r7
   129bc:	mov	ip, #39	; 0x27
   129c0:	str	r6, [sp, #100]	; 0x64
   129c4:	mov	r0, #0
   129c8:	ldr	lr, [sp, #36]	; 0x24
   129cc:	str	r8, [sp, #36]	; 0x24
   129d0:	ldr	r6, [sp, #40]	; 0x28
   129d4:	ldr	r8, [sp, #44]	; 0x2c
   129d8:	b	12a88 <__assert_fail@plt+0x1bfc>
   129dc:	cmp	r8, #0
   129e0:	bne	12fbc <__assert_fail@plt+0x2130>
   129e4:	ldr	r0, [sp, #52]	; 0x34
   129e8:	eor	r3, fp, #1
   129ec:	ands	r3, r0, r3
   129f0:	beq	12a20 <__assert_fail@plt+0x1b94>
   129f4:	cmp	sl, r4
   129f8:	add	r0, r4, #1
   129fc:	strbhi	ip, [r9, r4]
   12a00:	cmp	sl, r0
   12a04:	movhi	fp, #36	; 0x24
   12a08:	strbhi	fp, [r9, r0]
   12a0c:	add	r0, r4, #2
   12a10:	mov	fp, r3
   12a14:	cmp	sl, r0
   12a18:	add	r4, r4, #3
   12a1c:	strbhi	ip, [r9, r0]
   12a20:	cmp	sl, r4
   12a24:	movhi	r3, #92	; 0x5c
   12a28:	strbhi	r3, [r9, r4]
   12a2c:	add	r3, r4, #1
   12a30:	cmp	sl, r3
   12a34:	bls	12a44 <__assert_fail@plt+0x1bb8>
   12a38:	lsr	r0, r5, #6
   12a3c:	add	r0, r0, #48	; 0x30
   12a40:	strb	r0, [r9, r3]
   12a44:	add	r3, r4, #2
   12a48:	cmp	sl, r3
   12a4c:	bls	12a5c <__assert_fail@plt+0x1bd0>
   12a50:	ubfx	r0, r5, #3, #3
   12a54:	add	r0, r0, #48	; 0x30
   12a58:	strb	r0, [r9, r3]
   12a5c:	add	r7, r7, #1
   12a60:	and	r5, r5, #7
   12a64:	cmp	r1, r7
   12a68:	add	r5, r5, #48	; 0x30
   12a6c:	add	r4, r4, #3
   12a70:	bls	12fd0 <__assert_fail@plt+0x2144>
   12a74:	mov	r0, r2
   12a78:	cmp	sl, r4
   12a7c:	strbhi	r5, [r9, r4]
   12a80:	add	r4, r4, #1
   12a84:	ldrb	r5, [lr, #1]!
   12a88:	cmp	r2, #0
   12a8c:	bne	129dc <__assert_fail@plt+0x1b50>
   12a90:	eor	r3, r0, #1
   12a94:	cmp	r6, #0
   12a98:	and	r3, r3, fp
   12a9c:	uxtb	r3, r3
   12aa0:	beq	12ab4 <__assert_fail@plt+0x1c28>
   12aa4:	cmp	sl, r4
   12aa8:	movhi	r6, #92	; 0x5c
   12aac:	strbhi	r6, [r9, r4]
   12ab0:	add	r4, r4, #1
   12ab4:	add	r7, r7, #1
   12ab8:	cmp	r7, r1
   12abc:	bcs	12fb0 <__assert_fail@plt+0x2124>
   12ac0:	cmp	r3, #0
   12ac4:	beq	12ff4 <__assert_fail@plt+0x2168>
   12ac8:	cmp	sl, r4
   12acc:	add	r3, r4, #1
   12ad0:	mov	r6, #0
   12ad4:	strbhi	ip, [r9, r4]
   12ad8:	cmp	sl, r3
   12adc:	add	r4, r4, #2
   12ae0:	mov	fp, r6
   12ae4:	strbhi	ip, [r9, r3]
   12ae8:	b	12a78 <__assert_fail@plt+0x1bec>
   12aec:	ldr	r3, [sp, #36]	; 0x24
   12af0:	ldrb	r5, [r3]
   12af4:	cmp	r5, #126	; 0x7e
   12af8:	ldrls	pc, [pc, r5, lsl #2]
   12afc:	b	1295c <__assert_fail@plt+0x1ad0>
   12b00:	andeq	r2, r1, r0, lsr #26
   12b04:	andeq	r2, r1, ip, asr r9
   12b08:	andeq	r2, r1, ip, asr r9
   12b0c:	andeq	r2, r1, ip, asr r9
   12b10:	andeq	r2, r1, ip, asr r9
   12b14:	andeq	r2, r1, ip, asr r9
   12b18:	andeq	r2, r1, ip, asr r9
   12b1c:	andeq	r2, r1, r4, lsl r2
   12b20:	andeq	r2, r1, ip, lsl #4
   12b24:	andeq	r2, r1, ip, lsl #17
   12b28:	andeq	r2, r1, r4, lsl sp
   12b2c:	andeq	r2, r1, ip, ror #16
   12b30:	strheq	r2, [r1], -r8
   12b34:	andeq	r2, r1, r8, lsl #26
   12b38:	andeq	r2, r1, ip, asr r9
   12b3c:	andeq	r2, r1, ip, asr r9
   12b40:	andeq	r2, r1, ip, asr r9
   12b44:	andeq	r2, r1, ip, asr r9
   12b48:	andeq	r2, r1, ip, asr r9
   12b4c:	andeq	r2, r1, ip, asr r9
   12b50:	andeq	r2, r1, ip, asr r9
   12b54:	andeq	r2, r1, ip, asr r9
   12b58:	andeq	r2, r1, ip, asr r9
   12b5c:	andeq	r2, r1, ip, asr r9
   12b60:	andeq	r2, r1, ip, asr r9
   12b64:	andeq	r2, r1, ip, asr r9
   12b68:	andeq	r2, r1, ip, asr r9
   12b6c:	andeq	r2, r1, ip, asr r9
   12b70:	andeq	r2, r1, ip, asr r9
   12b74:	andeq	r2, r1, ip, asr r9
   12b78:	andeq	r2, r1, ip, asr r9
   12b7c:	andeq	r2, r1, ip, asr r9
   12b80:	andeq	r2, r1, ip, ror r8
   12b84:	strdeq	r2, [r1], -ip
   12b88:	strdeq	r2, [r1], -ip
   12b8c:	andeq	r2, r1, r0, ror #16
   12b90:	strdeq	r2, [r1], -ip
   12b94:	andeq	r2, r1, r0, asr r8
   12b98:	strdeq	r2, [r1], -ip
   12b9c:	andeq	r2, r1, r4, asr #17
   12ba0:	strdeq	r2, [r1], -ip
   12ba4:	strdeq	r2, [r1], -ip
   12ba8:	strdeq	r2, [r1], -ip
   12bac:	andeq	r2, r1, r0, asr r8
   12bb0:	andeq	r2, r1, r0, asr r8
   12bb4:	andeq	r2, r1, r0, asr r8
   12bb8:	andeq	r2, r1, r0, asr r8
   12bbc:	andeq	r2, r1, r0, asr r8
   12bc0:	andeq	r2, r1, r0, asr r8
   12bc4:	andeq	r2, r1, r0, asr r8
   12bc8:	andeq	r2, r1, r0, asr r8
   12bcc:	andeq	r2, r1, r0, asr r8
   12bd0:	andeq	r2, r1, r0, asr r8
   12bd4:	andeq	r2, r1, r0, asr r8
   12bd8:	andeq	r2, r1, r0, asr r8
   12bdc:	andeq	r2, r1, r0, asr r8
   12be0:	andeq	r2, r1, r0, asr r8
   12be4:	andeq	r2, r1, r0, asr r8
   12be8:	andeq	r2, r1, r0, asr r8
   12bec:	strdeq	r2, [r1], -ip
   12bf0:	strdeq	r2, [r1], -ip
   12bf4:	strdeq	r2, [r1], -ip
   12bf8:	strdeq	r2, [r1], -ip
   12bfc:	muleq	r1, ip, r8
   12c00:	andeq	r2, r1, ip, asr r9
   12c04:	andeq	r2, r1, r0, asr r8
   12c08:	andeq	r2, r1, r0, asr r8
   12c0c:	andeq	r2, r1, r0, asr r8
   12c10:	andeq	r2, r1, r0, asr r8
   12c14:	andeq	r2, r1, r0, asr r8
   12c18:	andeq	r2, r1, r0, asr r8
   12c1c:	andeq	r2, r1, r0, asr r8
   12c20:	andeq	r2, r1, r0, asr r8
   12c24:	andeq	r2, r1, r0, asr r8
   12c28:	andeq	r2, r1, r0, asr r8
   12c2c:	andeq	r2, r1, r0, asr r8
   12c30:	andeq	r2, r1, r0, asr r8
   12c34:	andeq	r2, r1, r0, asr r8
   12c38:	andeq	r2, r1, r0, asr r8
   12c3c:	andeq	r2, r1, r0, asr r8
   12c40:	andeq	r2, r1, r0, asr r8
   12c44:	andeq	r2, r1, r0, asr r8
   12c48:	andeq	r2, r1, r0, asr r8
   12c4c:	andeq	r2, r1, r0, asr r8
   12c50:	andeq	r2, r1, r0, asr r8
   12c54:	andeq	r2, r1, r0, asr r8
   12c58:	andeq	r2, r1, r0, asr r8
   12c5c:	andeq	r2, r1, r0, asr r8
   12c60:	andeq	r2, r1, r0, asr r8
   12c64:	andeq	r2, r1, r0, asr r8
   12c68:	andeq	r2, r1, r0, asr r8
   12c6c:	strdeq	r2, [r1], -ip
   12c70:	andeq	r2, r1, ip, lsl r8
   12c74:	andeq	r2, r1, r0, asr r8
   12c78:	strdeq	r2, [r1], -ip
   12c7c:	andeq	r2, r1, r0, asr r8
   12c80:	strdeq	r2, [r1], -ip
   12c84:	andeq	r2, r1, r0, asr r8
   12c88:	andeq	r2, r1, r0, asr r8
   12c8c:	andeq	r2, r1, r0, asr r8
   12c90:	andeq	r2, r1, r0, asr r8
   12c94:	andeq	r2, r1, r0, asr r8
   12c98:	andeq	r2, r1, r0, asr r8
   12c9c:	andeq	r2, r1, r0, asr r8
   12ca0:	andeq	r2, r1, r0, asr r8
   12ca4:	andeq	r2, r1, r0, asr r8
   12ca8:	andeq	r2, r1, r0, asr r8
   12cac:	andeq	r2, r1, r0, asr r8
   12cb0:	andeq	r2, r1, r0, asr r8
   12cb4:	andeq	r2, r1, r0, asr r8
   12cb8:	andeq	r2, r1, r0, asr r8
   12cbc:	andeq	r2, r1, r0, asr r8
   12cc0:	andeq	r2, r1, r0, asr r8
   12cc4:	andeq	r2, r1, r0, asr r8
   12cc8:	andeq	r2, r1, r0, asr r8
   12ccc:	andeq	r2, r1, r0, asr r8
   12cd0:	andeq	r2, r1, r0, asr r8
   12cd4:	andeq	r2, r1, r0, asr r8
   12cd8:	andeq	r2, r1, r0, asr r8
   12cdc:	andeq	r2, r1, r0, asr r8
   12ce0:	andeq	r2, r1, r0, asr r8
   12ce4:	andeq	r2, r1, r0, asr r8
   12ce8:	andeq	r2, r1, r0, asr r8
   12cec:	strdeq	r2, [r1], -r8
   12cf0:	strdeq	r2, [r1], -ip
   12cf4:	strdeq	r2, [r1], -r8
   12cf8:	andeq	r2, r1, r0, ror #16
   12cfc:	mov	r3, #0
   12d00:	str	r3, [sp, #40]	; 0x28
   12d04:	b	123dc <__assert_fail@plt+0x1550>
   12d08:	mov	r3, #0
   12d0c:	str	r3, [sp, #40]	; 0x28
   12d10:	b	12374 <__assert_fail@plt+0x14e8>
   12d14:	mov	r3, #0
   12d18:	str	r3, [sp, #40]	; 0x28
   12d1c:	b	123a8 <__assert_fail@plt+0x151c>
   12d20:	ldr	r3, [sp, #44]	; 0x2c
   12d24:	cmp	r3, #0
   12d28:	beq	122c0 <__assert_fail@plt+0x1434>
   12d2c:	ldr	r3, [sp, #52]	; 0x34
   12d30:	mov	fp, r9
   12d34:	str	r3, [sp, #60]	; 0x3c
   12d38:	b	12438 <__assert_fail@plt+0x15ac>
   12d3c:	ldr	r3, [sp, #44]	; 0x2c
   12d40:	cmp	r3, #0
   12d44:	bne	13178 <__assert_fail@plt+0x22ec>
   12d48:	str	r3, [sp, #40]	; 0x28
   12d4c:	cmp	sl, #0
   12d50:	ldr	r3, [sp, #84]	; 0x54
   12d54:	clz	r3, r3
   12d58:	lsr	r3, r3, #5
   12d5c:	moveq	r3, #0
   12d60:	cmp	r3, #0
   12d64:	strne	sl, [sp, #84]	; 0x54
   12d68:	movne	sl, #0
   12d6c:	bne	12d9c <__assert_fail@plt+0x1f10>
   12d70:	cmp	sl, r4
   12d74:	movhi	r3, #39	; 0x27
   12d78:	strbhi	r3, [r9, r4]
   12d7c:	add	r3, r4, #1
   12d80:	cmp	sl, r3
   12d84:	movhi	r2, #92	; 0x5c
   12d88:	strbhi	r2, [r9, r3]
   12d8c:	add	r3, r4, #2
   12d90:	cmp	sl, r3
   12d94:	movhi	r2, #39	; 0x27
   12d98:	strbhi	r2, [r9, r3]
   12d9c:	mov	r3, #0
   12da0:	add	r4, r4, #3
   12da4:	str	r6, [sp, #80]	; 0x50
   12da8:	mov	fp, r3
   12dac:	mov	r5, #39	; 0x27
   12db0:	b	1227c <__assert_fail@plt+0x13f0>
   12db4:	ldr	r3, [sp, #44]	; 0x2c
   12db8:	cmp	r3, #0
   12dbc:	bne	13178 <__assert_fail@plt+0x22ec>
   12dc0:	mov	r6, #0
   12dc4:	mov	r5, #63	; 0x3f
   12dc8:	str	r3, [sp, #40]	; 0x28
   12dcc:	mov	r3, fp
   12dd0:	b	1227c <__assert_fail@plt+0x13f0>
   12dd4:	mov	r2, #0
   12dd8:	mov	r3, #0
   12ddc:	cmn	r8, #1
   12de0:	strd	r2, [sp, #128]	; 0x80
   12de4:	bne	12df4 <__assert_fail@plt+0x1f68>
   12de8:	ldr	r0, [sp, #28]
   12dec:	bl	10dc0 <strlen@plt>
   12df0:	mov	r8, r0
   12df4:	str	r9, [sp, #100]	; 0x64
   12df8:	mov	r3, #0
   12dfc:	strd	sl, [sp, #104]	; 0x68
   12e00:	ldr	sl, [sp, #28]
   12e04:	str	r5, [sp, #112]	; 0x70
   12e08:	mov	r5, r3
   12e0c:	ldr	r9, [sp, #68]	; 0x44
   12e10:	str	r4, [sp, #116]	; 0x74
   12e14:	add	r4, r7, r5
   12e18:	add	r3, sp, #128	; 0x80
   12e1c:	add	fp, sl, r4
   12e20:	sub	r2, r8, r4
   12e24:	mov	r1, fp
   12e28:	add	r0, sp, #124	; 0x7c
   12e2c:	bl	1742c <__assert_fail@plt+0x65a0>
   12e30:	subs	r1, r0, #0
   12e34:	beq	12e74 <__assert_fail@plt+0x1fe8>
   12e38:	cmn	r1, #1
   12e3c:	beq	131cc <__assert_fail@plt+0x2340>
   12e40:	cmn	r1, #2
   12e44:	beq	131ec <__assert_fail@plt+0x2360>
   12e48:	cmp	r9, #0
   12e4c:	bne	12ea4 <__assert_fail@plt+0x2018>
   12e50:	ldr	r0, [sp, #124]	; 0x7c
   12e54:	add	r5, r5, r1
   12e58:	bl	10d00 <iswprint@plt>
   12e5c:	cmp	r0, #0
   12e60:	add	r0, sp, #128	; 0x80
   12e64:	moveq	r6, #0
   12e68:	bl	10ca0 <mbsinit@plt>
   12e6c:	cmp	r0, #0
   12e70:	beq	12e14 <__assert_fail@plt+0x1f88>
   12e74:	ldr	r3, [sp, #60]	; 0x3c
   12e78:	add	r9, sp, #100	; 0x64
   12e7c:	mov	r0, r5
   12e80:	ldm	r9, {r9, sl, fp}
   12e84:	eor	r2, r6, #1
   12e88:	ldr	r5, [sp, #112]	; 0x70
   12e8c:	and	r2, r2, r3
   12e90:	uxtb	r2, r2
   12e94:	ldr	r4, [sp, #116]	; 0x74
   12e98:	cmp	r0, #1
   12e9c:	bhi	129b8 <__assert_fail@plt+0x1b2c>
   12ea0:	b	129a8 <__assert_fail@plt+0x1b1c>
   12ea4:	cmp	r1, #1
   12ea8:	beq	12e50 <__assert_fail@plt+0x1fc4>
   12eac:	add	r2, r4, #1
   12eb0:	add	r3, sl, r1
   12eb4:	add	r2, sl, r2
   12eb8:	add	r4, r3, r4
   12ebc:	ldrb	r3, [r2], #1
   12ec0:	sub	r3, r3, #91	; 0x5b
   12ec4:	cmp	r3, #33	; 0x21
   12ec8:	ldrls	pc, [pc, r3, lsl #2]
   12ecc:	b	12f58 <__assert_fail@plt+0x20cc>
   12ed0:	andeq	r2, r1, r4, ror #30
   12ed4:	andeq	r2, r1, r4, ror #30
   12ed8:	andeq	r2, r1, r8, asr pc
   12edc:	andeq	r2, r1, r4, ror #30
   12ee0:	andeq	r2, r1, r8, asr pc
   12ee4:	andeq	r2, r1, r4, ror #30
   12ee8:	andeq	r2, r1, r8, asr pc
   12eec:	andeq	r2, r1, r8, asr pc
   12ef0:	andeq	r2, r1, r8, asr pc
   12ef4:	andeq	r2, r1, r8, asr pc
   12ef8:	andeq	r2, r1, r8, asr pc
   12efc:	andeq	r2, r1, r8, asr pc
   12f00:	andeq	r2, r1, r8, asr pc
   12f04:	andeq	r2, r1, r8, asr pc
   12f08:	andeq	r2, r1, r8, asr pc
   12f0c:	andeq	r2, r1, r8, asr pc
   12f10:	andeq	r2, r1, r8, asr pc
   12f14:	andeq	r2, r1, r8, asr pc
   12f18:	andeq	r2, r1, r8, asr pc
   12f1c:	andeq	r2, r1, r8, asr pc
   12f20:	andeq	r2, r1, r8, asr pc
   12f24:	andeq	r2, r1, r8, asr pc
   12f28:	andeq	r2, r1, r8, asr pc
   12f2c:	andeq	r2, r1, r8, asr pc
   12f30:	andeq	r2, r1, r8, asr pc
   12f34:	andeq	r2, r1, r8, asr pc
   12f38:	andeq	r2, r1, r8, asr pc
   12f3c:	andeq	r2, r1, r8, asr pc
   12f40:	andeq	r2, r1, r8, asr pc
   12f44:	andeq	r2, r1, r8, asr pc
   12f48:	andeq	r2, r1, r8, asr pc
   12f4c:	andeq	r2, r1, r8, asr pc
   12f50:	andeq	r2, r1, r8, asr pc
   12f54:	andeq	r2, r1, r4, ror #30
   12f58:	cmp	r4, r2
   12f5c:	bne	12ebc <__assert_fail@plt+0x2030>
   12f60:	b	12e50 <__assert_fail@plt+0x1fc4>
   12f64:	mov	r3, #2
   12f68:	ldr	fp, [sp, #100]	; 0x64
   12f6c:	str	r3, [sp, #176]	; 0xb0
   12f70:	ldr	sl, [sp, #104]	; 0x68
   12f74:	b	12438 <__assert_fail@plt+0x15ac>
   12f78:	ldr	r2, [sp, #52]	; 0x34
   12f7c:	mov	fp, r9
   12f80:	ldr	r3, [sp, #60]	; 0x3c
   12f84:	and	r3, r3, r2
   12f88:	str	r3, [sp, #60]	; 0x3c
   12f8c:	b	12438 <__assert_fail@plt+0x15ac>
   12f90:	cmp	sl, r4
   12f94:	movhi	r2, fp
   12f98:	bhi	12310 <__assert_fail@plt+0x1484>
   12f9c:	mov	r2, r4
   12fa0:	b	12320 <__assert_fail@plt+0x1494>
   12fa4:	mov	r6, r3
   12fa8:	mov	r5, #63	; 0x3f
   12fac:	b	123e0 <__assert_fail@plt+0x1554>
   12fb0:	ldr	r8, [sp, #36]	; 0x24
   12fb4:	ldr	r6, [sp, #100]	; 0x64
   12fb8:	b	1228c <__assert_fail@plt+0x1400>
   12fbc:	mov	fp, r9
   12fc0:	ldr	r8, [sp, #36]	; 0x24
   12fc4:	ldr	r3, [sp, #52]	; 0x34
   12fc8:	str	r3, [sp, #60]	; 0x3c
   12fcc:	b	12438 <__assert_fail@plt+0x15ac>
   12fd0:	ldr	r8, [sp, #36]	; 0x24
   12fd4:	ldr	r6, [sp, #100]	; 0x64
   12fd8:	b	12124 <__assert_fail@plt+0x1298>
   12fdc:	mov	r3, #0
   12fe0:	add	r4, r4, #4
   12fe4:	mov	fp, r2
   12fe8:	mov	r6, r3
   12fec:	mov	r5, #48	; 0x30
   12ff0:	b	1227c <__assert_fail@plt+0x13f0>
   12ff4:	mov	r6, r3
   12ff8:	b	12a78 <__assert_fail@plt+0x1bec>
   12ffc:	mov	r3, #1
   13000:	movw	r2, #31572	; 0x7b54
   13004:	movt	r2, #1
   13008:	mov	r4, r3
   1300c:	mov	r9, sl
   13010:	str	r3, [sp, #32]
   13014:	str	sl, [sp, #44]	; 0x2c
   13018:	str	r3, [sp, #48]	; 0x30
   1301c:	str	sl, [sp, #52]	; 0x34
   13020:	str	r3, [sp, #56]	; 0x38
   13024:	str	r3, [sp, #60]	; 0x3c
   13028:	str	sl, [sp, #64]	; 0x40
   1302c:	str	sl, [sp, #68]	; 0x44
   13030:	str	r2, [sp, #72]	; 0x48
   13034:	str	sl, [sp, #80]	; 0x50
   13038:	str	sl, [sp, #84]	; 0x54
   1303c:	str	sl, [sp, #88]	; 0x58
   13040:	b	11b30 <__assert_fail@plt+0xca4>
   13044:	mov	r3, #0
   13048:	mov	r5, #48	; 0x30
   1304c:	mov	r6, r3
   13050:	b	1227c <__assert_fail@plt+0x13f0>
   13054:	cmp	sl, r4
   13058:	mov	r5, #48	; 0x30
   1305c:	movhi	r3, #48	; 0x30
   13060:	strbhi	r3, [r9, r4]
   13064:	add	r3, r2, #2
   13068:	add	r4, r2, #3
   1306c:	cmp	sl, r3
   13070:	movhi	r1, #48	; 0x30
   13074:	strbhi	r1, [r9, r3]
   13078:	mov	r3, #0
   1307c:	b	12358 <__assert_fail@plt+0x14cc>
   13080:	ldr	r3, [sp, #48]	; 0x30
   13084:	str	r3, [sp, #40]	; 0x28
   13088:	b	12964 <__assert_fail@plt+0x1ad8>
   1308c:	ldr	r2, [sp, #28]
   13090:	ldrb	r2, [r2, r3]
   13094:	sub	r1, r2, #33	; 0x21
   13098:	cmp	r1, #29
   1309c:	ldrls	pc, [pc, r1, lsl #2]
   130a0:	b	123dc <__assert_fail@plt+0x1550>
   130a4:	andeq	r3, r1, ip, lsl r1
   130a8:	ldrdeq	r2, [r1], -ip
   130ac:	ldrdeq	r2, [r1], -ip
   130b0:	ldrdeq	r2, [r1], -ip
   130b4:	ldrdeq	r2, [r1], -ip
   130b8:	ldrdeq	r2, [r1], -ip
   130bc:	andeq	r3, r1, ip, lsl r1
   130c0:	andeq	r3, r1, ip, lsl r1
   130c4:	andeq	r3, r1, ip, lsl r1
   130c8:	ldrdeq	r2, [r1], -ip
   130cc:	ldrdeq	r2, [r1], -ip
   130d0:	ldrdeq	r2, [r1], -ip
   130d4:	andeq	r3, r1, ip, lsl r1
   130d8:	ldrdeq	r2, [r1], -ip
   130dc:	andeq	r3, r1, ip, lsl r1
   130e0:	ldrdeq	r2, [r1], -ip
   130e4:	ldrdeq	r2, [r1], -ip
   130e8:	ldrdeq	r2, [r1], -ip
   130ec:	ldrdeq	r2, [r1], -ip
   130f0:	ldrdeq	r2, [r1], -ip
   130f4:	ldrdeq	r2, [r1], -ip
   130f8:	ldrdeq	r2, [r1], -ip
   130fc:	ldrdeq	r2, [r1], -ip
   13100:	ldrdeq	r2, [r1], -ip
   13104:	ldrdeq	r2, [r1], -ip
   13108:	ldrdeq	r2, [r1], -ip
   1310c:	ldrdeq	r2, [r1], -ip
   13110:	andeq	r3, r1, ip, lsl r1
   13114:	andeq	r3, r1, ip, lsl r1
   13118:	andeq	r3, r1, ip, lsl r1
   1311c:	ldr	r1, [sp, #44]	; 0x2c
   13120:	cmp	r1, #0
   13124:	bne	13384 <__assert_fail@plt+0x24f8>
   13128:	cmp	sl, r4
   1312c:	mov	r7, r3
   13130:	movhi	r1, #63	; 0x3f
   13134:	mov	r5, r2
   13138:	mov	r3, fp
   1313c:	strbhi	r1, [r9, r4]
   13140:	add	r1, r4, #1
   13144:	cmp	sl, r1
   13148:	movhi	r0, #34	; 0x22
   1314c:	strbhi	r0, [r9, r1]
   13150:	add	r1, r4, #2
   13154:	cmp	sl, r1
   13158:	movhi	r0, #34	; 0x22
   1315c:	strbhi	r0, [r9, r1]
   13160:	add	r1, r4, #3
   13164:	add	r4, r4, #4
   13168:	cmp	sl, r1
   1316c:	movhi	r0, #63	; 0x3f
   13170:	strbhi	r0, [r9, r1]
   13174:	b	12358 <__assert_fail@plt+0x14cc>
   13178:	mov	fp, r9
   1317c:	b	12438 <__assert_fail@plt+0x15ac>
   13180:	ldr	r3, [sp, #188]	; 0xbc
   13184:	ldrb	r3, [r3]
   13188:	cmp	r3, #0
   1318c:	beq	11ac8 <__assert_fail@plt+0xc3c>
   13190:	ldr	r2, [sp, #188]	; 0xbc
   13194:	cmp	sl, r4
   13198:	bls	131b8 <__assert_fail@plt+0x232c>
   1319c:	strb	r3, [fp, r4]
   131a0:	add	r4, r4, #1
   131a4:	ldrb	r3, [r2, #1]!
   131a8:	cmp	r3, #0
   131ac:	beq	11ac8 <__assert_fail@plt+0xc3c>
   131b0:	cmp	sl, r4
   131b4:	bhi	1319c <__assert_fail@plt+0x2310>
   131b8:	ldrb	r3, [r2, #1]!
   131bc:	add	r4, r4, #1
   131c0:	cmp	r3, #0
   131c4:	bne	13194 <__assert_fail@plt+0x2308>
   131c8:	b	11ac8 <__assert_fail@plt+0xc3c>
   131cc:	add	r9, sp, #100	; 0x64
   131d0:	mov	r0, r5
   131d4:	ldr	r2, [sp, #60]	; 0x3c
   131d8:	mov	r6, #0
   131dc:	ldm	r9, {r9, sl, fp}
   131e0:	ldr	r5, [sp, #112]	; 0x70
   131e4:	ldr	r4, [sp, #116]	; 0x74
   131e8:	b	12e98 <__assert_fail@plt+0x200c>
   131ec:	cmp	r4, r8
   131f0:	add	r9, sp, #100	; 0x64
   131f4:	mov	r1, r4
   131f8:	mov	r2, fp
   131fc:	ldm	r9, {r9, sl, fp}
   13200:	mov	r3, r5
   13204:	mov	r0, r5
   13208:	ldr	r5, [sp, #112]	; 0x70
   1320c:	ldr	r4, [sp, #116]	; 0x74
   13210:	bcs	13244 <__assert_fail@plt+0x23b8>
   13214:	ldrb	r6, [r2]
   13218:	cmp	r6, #0
   1321c:	bne	13230 <__assert_fail@plt+0x23a4>
   13220:	b	1337c <__assert_fail@plt+0x24f0>
   13224:	ldrb	r6, [r2, #1]!
   13228:	cmp	r6, #0
   1322c:	beq	13314 <__assert_fail@plt+0x2488>
   13230:	add	r3, r3, #1
   13234:	add	r1, r7, r3
   13238:	cmp	r8, r1
   1323c:	bhi	13224 <__assert_fail@plt+0x2398>
   13240:	mov	r0, r3
   13244:	mov	r6, #0
   13248:	ldr	r2, [sp, #60]	; 0x3c
   1324c:	b	12e98 <__assert_fail@plt+0x200c>
   13250:	mov	r3, #1
   13254:	mov	r4, #0
   13258:	mov	r9, r4
   1325c:	str	r3, [sp, #32]
   13260:	str	r3, [sp, #44]	; 0x2c
   13264:	str	r3, [sp, #48]	; 0x30
   13268:	str	r4, [sp, #52]	; 0x34
   1326c:	str	r3, [sp, #56]	; 0x38
   13270:	str	r3, [sp, #60]	; 0x3c
   13274:	str	r3, [sp, #88]	; 0x58
   13278:	movw	r3, #31572	; 0x7b54
   1327c:	movt	r3, #1
   13280:	str	r4, [sp, #64]	; 0x40
   13284:	str	r4, [sp, #68]	; 0x44
   13288:	str	r3, [sp, #72]	; 0x48
   1328c:	str	r4, [sp, #80]	; 0x50
   13290:	str	r4, [sp, #84]	; 0x54
   13294:	b	11b30 <__assert_fail@plt+0xca4>
   13298:	mov	fp, r9
   1329c:	b	1244c <__assert_fail@plt+0x15c0>
   132a0:	ldr	r3, [sp, #48]	; 0x30
   132a4:	b	12dc0 <__assert_fail@plt+0x1f34>
   132a8:	mov	r2, r3
   132ac:	ldr	r3, [sp, #72]	; 0x48
   132b0:	cmp	r3, #0
   132b4:	moveq	r2, #0
   132b8:	andne	r2, r2, #1
   132bc:	cmp	r2, #0
   132c0:	beq	132f0 <__assert_fail@plt+0x2464>
   132c4:	mov	r2, r3
   132c8:	ldrb	r3, [r3]
   132cc:	cmp	r3, #0
   132d0:	beq	132f0 <__assert_fail@plt+0x2464>
   132d4:	cmp	sl, r4
   132d8:	bls	13300 <__assert_fail@plt+0x2474>
   132dc:	strb	r3, [fp, r4]
   132e0:	add	r4, r4, #1
   132e4:	ldrb	r3, [r2, #1]!
   132e8:	cmp	r3, #0
   132ec:	bne	132d4 <__assert_fail@plt+0x2448>
   132f0:	cmp	sl, r4
   132f4:	movhi	r3, #0
   132f8:	strbhi	r3, [fp, r4]
   132fc:	b	12488 <__assert_fail@plt+0x15fc>
   13300:	ldrb	r3, [r2, #1]!
   13304:	add	r4, r4, #1
   13308:	cmp	r3, #0
   1330c:	bne	132d4 <__assert_fail@plt+0x2448>
   13310:	b	132f0 <__assert_fail@plt+0x2464>
   13314:	mov	r0, r3
   13318:	ldr	r2, [sp, #60]	; 0x3c
   1331c:	b	12e98 <__assert_fail@plt+0x200c>
   13320:	mov	ip, #5
   13324:	mov	r3, r8
   13328:	ldr	r1, [sp, #84]	; 0x54
   1332c:	str	ip, [sp]
   13330:	ldr	r2, [sp, #180]	; 0xb4
   13334:	ldr	ip, [sp, #188]	; 0xbc
   13338:	ldr	r0, [sp, #184]	; 0xb8
   1333c:	str	r2, [sp, #4]
   13340:	ldr	r2, [sp, #28]
   13344:	str	ip, [sp, #12]
   13348:	ldr	ip, [sp, #192]	; 0xc0
   1334c:	str	r0, [sp, #8]
   13350:	mov	r0, fp
   13354:	str	ip, [sp, #16]
   13358:	bl	11a0c <__assert_fail@plt+0xb80>
   1335c:	mov	r4, r0
   13360:	b	12488 <__assert_fail@plt+0x15fc>
   13364:	mov	r6, r3
   13368:	str	r3, [sp, #40]	; 0x28
   1336c:	b	123f8 <__assert_fail@plt+0x156c>
   13370:	mov	r3, #2
   13374:	str	r3, [sp, #176]	; 0xb0
   13378:	b	12438 <__assert_fail@plt+0x15ac>
   1337c:	ldr	r2, [sp, #60]	; 0x3c
   13380:	b	12e98 <__assert_fail@plt+0x200c>
   13384:	mov	r3, #5
   13388:	mov	fp, r9
   1338c:	str	r3, [sp, #176]	; 0xb0
   13390:	b	1244c <__assert_fail@plt+0x15c0>
   13394:	mov	r1, #1
   13398:	mov	r9, #0
   1339c:	mov	r3, r9
   133a0:	mov	r2, r9
   133a4:	str	r1, [sp, #32]
   133a8:	str	sl, [sp, #84]	; 0x54
   133ac:	b	121d4 <__assert_fail@plt+0x1348>
   133b0:	mov	r3, #0
   133b4:	mov	r2, #1
   133b8:	mov	r9, r3
   133bc:	mov	r4, r3
   133c0:	str	r2, [sp, #32]
   133c4:	strd	r2, [sp, #44]	; 0x2c
   133c8:	strd	r2, [sp, #56]	; 0x38
   133cc:	str	r3, [sp, #80]	; 0x50
   133d0:	str	r3, [sp, #84]	; 0x54
   133d4:	str	r3, [sp, #88]	; 0x58
   133d8:	movw	r3, #31592	; 0x7b68
   133dc:	movt	r3, #1
   133e0:	str	r2, [sp, #52]	; 0x34
   133e4:	str	r2, [sp, #64]	; 0x40
   133e8:	str	r2, [sp, #68]	; 0x44
   133ec:	str	r3, [sp, #72]	; 0x48
   133f0:	b	11b30 <__assert_fail@plt+0xca4>
   133f4:	bl	10e80 <abort@plt>
   133f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   133fc:	mov	r4, r0
   13400:	mov	r5, r3
   13404:	strd	r6, [sp, #8]
   13408:	movw	r7, #37096	; 0x90e8
   1340c:	movt	r7, #2
   13410:	strd	r8, [sp, #16]
   13414:	strd	sl, [sp, #24]
   13418:	mov	sl, r1
   1341c:	mov	fp, r2
   13420:	str	lr, [sp, #32]
   13424:	sub	sp, sp, #60	; 0x3c
   13428:	bl	10dd8 <__errno_location@plt>
   1342c:	mov	r8, r0
   13430:	cmn	r4, #-2147483647	; 0x80000001
   13434:	ldr	r6, [r7]
   13438:	movne	r0, #0
   1343c:	moveq	r0, #1
   13440:	ldr	r3, [r8]
   13444:	orrs	r0, r0, r4, lsr #31
   13448:	str	r3, [sp, #28]
   1344c:	bne	135dc <__assert_fail@plt+0x2750>
   13450:	ldr	r3, [r7, #4]
   13454:	cmp	r3, r4
   13458:	bgt	134b8 <__assert_fail@plt+0x262c>
   1345c:	add	r1, r7, #8
   13460:	sub	r2, r4, r3
   13464:	str	r3, [sp, #52]	; 0x34
   13468:	cmp	r6, r1
   1346c:	add	r2, r2, #1
   13470:	beq	135b4 <__assert_fail@plt+0x2728>
   13474:	mov	r1, #8
   13478:	mov	r0, r6
   1347c:	mvn	r3, #-2147483648	; 0x80000000
   13480:	str	r1, [sp]
   13484:	add	r1, sp, #52	; 0x34
   13488:	bl	15d18 <__assert_fail@plt+0x4e8c>
   1348c:	mov	r6, r0
   13490:	str	r0, [r7]
   13494:	ldr	r0, [r7, #4]
   13498:	mov	r1, #0
   1349c:	ldr	r2, [sp, #52]	; 0x34
   134a0:	sub	r2, r2, r0
   134a4:	add	r0, r6, r0, lsl #3
   134a8:	lsl	r2, r2, #3
   134ac:	bl	10df0 <memset@plt>
   134b0:	ldr	r3, [sp, #52]	; 0x34
   134b4:	str	r3, [r7, #4]
   134b8:	ldr	r1, [r5, #4]
   134bc:	add	r0, r6, r4, lsl #3
   134c0:	add	ip, r5, #8
   134c4:	mov	r3, fp
   134c8:	mov	r2, sl
   134cc:	ldr	r7, [r0, #4]
   134d0:	str	r0, [sp, #36]	; 0x24
   134d4:	str	ip, [sp, #40]	; 0x28
   134d8:	orr	r0, r1, #1
   134dc:	ldr	r9, [r6, r4, lsl #3]
   134e0:	str	ip, [sp, #8]
   134e4:	ldr	lr, [r5, #44]	; 0x2c
   134e8:	str	r0, [sp, #4]
   134ec:	ldr	ip, [r5]
   134f0:	mov	r1, r9
   134f4:	str	ip, [sp, #32]
   134f8:	ldr	ip, [r5, #40]	; 0x28
   134fc:	str	ip, [sp, #12]
   13500:	ldr	ip, [sp, #32]
   13504:	str	lr, [sp, #16]
   13508:	str	r0, [sp, #44]	; 0x2c
   1350c:	mov	r0, r7
   13510:	str	ip, [sp]
   13514:	bl	11a0c <__assert_fail@plt+0xb80>
   13518:	cmp	r9, r0
   1351c:	bhi	1358c <__assert_fail@plt+0x2700>
   13520:	add	r9, r0, #1
   13524:	movw	r3, #37204	; 0x9154
   13528:	movt	r3, #2
   1352c:	cmp	r7, r3
   13530:	str	r9, [r6, r4, lsl #3]
   13534:	beq	13540 <__assert_fail@plt+0x26b4>
   13538:	mov	r0, r7
   1353c:	bl	172b0 <__assert_fail@plt+0x6424>
   13540:	mov	r0, r9
   13544:	bl	15a74 <__assert_fail@plt+0x4be8>
   13548:	ldr	ip, [r5]
   1354c:	mov	r3, fp
   13550:	mov	r2, sl
   13554:	mov	r1, r9
   13558:	mov	r7, r0
   1355c:	ldr	lr, [sp, #36]	; 0x24
   13560:	ldr	r4, [r5, #40]	; 0x28
   13564:	str	r0, [lr, #4]
   13568:	ldr	lr, [r5, #44]	; 0x2c
   1356c:	str	ip, [sp]
   13570:	ldr	ip, [sp, #44]	; 0x2c
   13574:	str	ip, [sp, #4]
   13578:	ldr	ip, [sp, #40]	; 0x28
   1357c:	str	r4, [sp, #12]
   13580:	str	lr, [sp, #16]
   13584:	str	ip, [sp, #8]
   13588:	bl	11a0c <__assert_fail@plt+0xb80>
   1358c:	ldr	r3, [sp, #28]
   13590:	mov	r0, r7
   13594:	str	r3, [r8]
   13598:	add	sp, sp, #60	; 0x3c
   1359c:	ldrd	r4, [sp]
   135a0:	ldrd	r6, [sp, #8]
   135a4:	ldrd	r8, [sp, #16]
   135a8:	ldrd	sl, [sp, #24]
   135ac:	add	sp, sp, #32
   135b0:	pop	{pc}		; (ldr pc, [sp], #4)
   135b4:	mov	r1, #8
   135b8:	mvn	r3, #-2147483648	; 0x80000000
   135bc:	str	r1, [sp]
   135c0:	add	r1, sp, #52	; 0x34
   135c4:	bl	15d18 <__assert_fail@plt+0x4e8c>
   135c8:	ldrd	r2, [r7, #8]
   135cc:	mov	r6, r0
   135d0:	str	r0, [r7]
   135d4:	strd	r2, [r0]
   135d8:	b	13494 <__assert_fail@plt+0x2608>
   135dc:	bl	10e80 <abort@plt>
   135e0:	strd	r4, [sp, #-16]!
   135e4:	mov	r5, r0
   135e8:	str	r6, [sp, #8]
   135ec:	str	lr, [sp, #12]
   135f0:	bl	10dd8 <__errno_location@plt>
   135f4:	mov	r4, r0
   135f8:	cmp	r5, #0
   135fc:	ldr	r0, [pc, #32]	; 13624 <__assert_fail@plt+0x2798>
   13600:	mov	r1, #48	; 0x30
   13604:	movne	r0, r5
   13608:	ldr	r6, [r4]
   1360c:	bl	15eb8 <__assert_fail@plt+0x502c>
   13610:	str	r6, [r4]
   13614:	ldrd	r4, [sp]
   13618:	ldr	r6, [sp, #8]
   1361c:	add	sp, sp, #12
   13620:	pop	{pc}		; (ldr pc, [sp], #4)
   13624:	andeq	r9, r2, r4, asr r2
   13628:	ldr	r3, [pc, #12]	; 1363c <__assert_fail@plt+0x27b0>
   1362c:	cmp	r0, #0
   13630:	moveq	r0, r3
   13634:	ldr	r0, [r0]
   13638:	bx	lr
   1363c:	andeq	r9, r2, r4, asr r2
   13640:	ldr	r3, [pc, #12]	; 13654 <__assert_fail@plt+0x27c8>
   13644:	cmp	r0, #0
   13648:	moveq	r0, r3
   1364c:	str	r1, [r0]
   13650:	bx	lr
   13654:	andeq	r9, r2, r4, asr r2
   13658:	ldr	r3, [pc, #52]	; 13694 <__assert_fail@plt+0x2808>
   1365c:	cmp	r0, #0
   13660:	push	{lr}		; (str lr, [sp, #-4]!)
   13664:	lsr	lr, r1, #5
   13668:	and	r1, r1, #31
   1366c:	moveq	r0, r3
   13670:	add	r3, r0, #8
   13674:	ldr	ip, [r3, lr, lsl #2]
   13678:	lsr	r0, ip, r1
   1367c:	eor	r2, r2, r0
   13680:	and	r0, r0, #1
   13684:	and	r2, r2, #1
   13688:	eor	r1, ip, r2, lsl r1
   1368c:	str	r1, [r3, lr, lsl #2]
   13690:	pop	{pc}		; (ldr pc, [sp], #4)
   13694:	andeq	r9, r2, r4, asr r2
   13698:	ldr	r3, [pc, #16]	; 136b0 <__assert_fail@plt+0x2824>
   1369c:	cmp	r0, #0
   136a0:	movne	r3, r0
   136a4:	ldr	r0, [r3, #4]
   136a8:	str	r1, [r3, #4]
   136ac:	bx	lr
   136b0:	andeq	r9, r2, r4, asr r2
   136b4:	ldr	r3, [pc, #48]	; 136ec <__assert_fail@plt+0x2860>
   136b8:	cmp	r0, #0
   136bc:	mov	ip, #10
   136c0:	moveq	r0, r3
   136c4:	cmp	r2, #0
   136c8:	cmpne	r1, #0
   136cc:	str	ip, [r0]
   136d0:	beq	136e0 <__assert_fail@plt+0x2854>
   136d4:	str	r1, [r0, #40]	; 0x28
   136d8:	str	r2, [r0, #44]	; 0x2c
   136dc:	bx	lr
   136e0:	str	r4, [sp, #-8]!
   136e4:	str	lr, [sp, #4]
   136e8:	bl	10e80 <abort@plt>
   136ec:	andeq	r9, r2, r4, asr r2
   136f0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   136f4:	strd	r6, [sp, #8]
   136f8:	mov	r7, r0
   136fc:	mov	r6, r1
   13700:	strd	r8, [sp, #16]
   13704:	mov	r8, r2
   13708:	mov	r9, r3
   1370c:	str	lr, [sp, #24]
   13710:	sub	sp, sp, #28
   13714:	ldr	r4, [sp, #56]	; 0x38
   13718:	ldr	ip, [pc, #104]	; 13788 <__assert_fail@plt+0x28fc>
   1371c:	cmp	r4, #0
   13720:	moveq	r4, ip
   13724:	bl	10dd8 <__errno_location@plt>
   13728:	ldr	ip, [r4, #44]	; 0x2c
   1372c:	mov	r5, r0
   13730:	mov	r1, r6
   13734:	add	lr, r4, #8
   13738:	mov	r3, r9
   1373c:	ldr	r6, [r5]
   13740:	mov	r2, r8
   13744:	mov	r0, r7
   13748:	str	ip, [sp, #16]
   1374c:	ldr	ip, [r4, #40]	; 0x28
   13750:	str	lr, [sp, #8]
   13754:	str	ip, [sp, #12]
   13758:	ldr	ip, [r4, #4]
   1375c:	str	ip, [sp, #4]
   13760:	ldr	ip, [r4]
   13764:	str	ip, [sp]
   13768:	bl	11a0c <__assert_fail@plt+0xb80>
   1376c:	str	r6, [r5]
   13770:	add	sp, sp, #28
   13774:	ldrd	r4, [sp]
   13778:	ldrd	r6, [sp, #8]
   1377c:	ldrd	r8, [sp, #16]
   13780:	add	sp, sp, #24
   13784:	pop	{pc}		; (ldr pc, [sp], #4)
   13788:	andeq	r9, r2, r4, asr r2
   1378c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13790:	cmp	r2, #0
   13794:	ldr	r4, [pc, #192]	; 1385c <__assert_fail@plt+0x29d0>
   13798:	movne	r4, r2
   1379c:	strd	r6, [sp, #8]
   137a0:	strd	r8, [sp, #16]
   137a4:	mov	r9, r1
   137a8:	mov	r8, r0
   137ac:	strd	sl, [sp, #24]
   137b0:	str	lr, [sp, #32]
   137b4:	sub	sp, sp, #36	; 0x24
   137b8:	bl	10dd8 <__errno_location@plt>
   137bc:	ldr	r5, [r4, #4]
   137c0:	mov	r6, r0
   137c4:	add	r7, r4, #8
   137c8:	mov	r1, #0
   137cc:	mov	r3, r9
   137d0:	ldr	ip, [r4, #44]	; 0x2c
   137d4:	mov	r2, r8
   137d8:	mov	r0, r1
   137dc:	ldr	sl, [r6]
   137e0:	orr	r5, r5, #1
   137e4:	str	ip, [sp, #16]
   137e8:	ldr	ip, [r4, #40]	; 0x28
   137ec:	stmib	sp, {r5, r7, ip}
   137f0:	ldr	ip, [r4]
   137f4:	str	ip, [sp]
   137f8:	bl	11a0c <__assert_fail@plt+0xb80>
   137fc:	add	r1, r0, #1
   13800:	mov	r0, r1
   13804:	str	r1, [sp, #28]
   13808:	bl	15a74 <__assert_fail@plt+0x4be8>
   1380c:	ldr	ip, [r4, #44]	; 0x2c
   13810:	mov	fp, r0
   13814:	mov	r3, r9
   13818:	mov	r2, r8
   1381c:	ldr	r1, [sp, #28]
   13820:	str	ip, [sp, #16]
   13824:	ldr	ip, [r4, #40]	; 0x28
   13828:	stmib	sp, {r5, r7, ip}
   1382c:	ldr	ip, [r4]
   13830:	str	ip, [sp]
   13834:	bl	11a0c <__assert_fail@plt+0xb80>
   13838:	mov	r0, fp
   1383c:	str	sl, [r6]
   13840:	add	sp, sp, #36	; 0x24
   13844:	ldrd	r4, [sp]
   13848:	ldrd	r6, [sp, #8]
   1384c:	ldrd	r8, [sp, #16]
   13850:	ldrd	sl, [sp, #24]
   13854:	add	sp, sp, #32
   13858:	pop	{pc}		; (ldr pc, [sp], #4)
   1385c:	andeq	r9, r2, r4, asr r2
   13860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13864:	cmp	r3, #0
   13868:	ldr	r4, [pc, #220]	; 1394c <__assert_fail@plt+0x2ac0>
   1386c:	movne	r4, r3
   13870:	strd	r6, [sp, #8]
   13874:	mov	r6, r2
   13878:	strd	r8, [sp, #16]
   1387c:	mov	r9, r0
   13880:	strd	sl, [sp, #24]
   13884:	mov	sl, r1
   13888:	str	lr, [sp, #32]
   1388c:	sub	sp, sp, #44	; 0x2c
   13890:	bl	10dd8 <__errno_location@plt>
   13894:	ldr	r5, [r4, #4]
   13898:	mov	r7, r0
   1389c:	mov	r1, #0
   138a0:	add	r8, r4, #8
   138a4:	mov	r3, sl
   138a8:	ldr	ip, [r4, #44]	; 0x2c
   138ac:	mov	r2, r9
   138b0:	mov	r0, r1
   138b4:	ldr	lr, [r7]
   138b8:	cmp	r6, r1
   138bc:	orreq	r5, r5, #1
   138c0:	str	ip, [sp, #16]
   138c4:	ldr	ip, [r4, #40]	; 0x28
   138c8:	stmib	sp, {r5, r8, ip}
   138cc:	ldr	ip, [r4]
   138d0:	str	lr, [sp, #28]
   138d4:	str	ip, [sp]
   138d8:	bl	11a0c <__assert_fail@plt+0xb80>
   138dc:	add	r1, r0, #1
   138e0:	mov	fp, r0
   138e4:	mov	r0, r1
   138e8:	str	r1, [sp, #36]	; 0x24
   138ec:	bl	15a74 <__assert_fail@plt+0x4be8>
   138f0:	ldr	ip, [r4, #44]	; 0x2c
   138f4:	mov	r3, sl
   138f8:	mov	r2, r9
   138fc:	ldr	r1, [sp, #36]	; 0x24
   13900:	str	ip, [sp, #16]
   13904:	ldr	ip, [r4, #40]	; 0x28
   13908:	str	r0, [sp, #32]
   1390c:	stmib	sp, {r5, r8, ip}
   13910:	ldr	ip, [r4]
   13914:	str	ip, [sp]
   13918:	bl	11a0c <__assert_fail@plt+0xb80>
   1391c:	ldr	lr, [sp, #28]
   13920:	cmp	r6, #0
   13924:	ldr	r0, [sp, #32]
   13928:	str	lr, [r7]
   1392c:	strne	fp, [r6]
   13930:	add	sp, sp, #44	; 0x2c
   13934:	ldrd	r4, [sp]
   13938:	ldrd	r6, [sp, #8]
   1393c:	ldrd	r8, [sp, #16]
   13940:	ldrd	sl, [sp, #24]
   13944:	add	sp, sp, #32
   13948:	pop	{pc}		; (ldr pc, [sp], #4)
   1394c:	andeq	r9, r2, r4, asr r2
   13950:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13954:	movw	r5, #37096	; 0x90e8
   13958:	movt	r5, #2
   1395c:	ldr	r3, [r5, #4]
   13960:	strd	r6, [sp, #8]
   13964:	str	r8, [sp, #16]
   13968:	str	lr, [sp, #20]
   1396c:	ldr	r7, [r5]
   13970:	cmp	r3, #1
   13974:	ble	13998 <__assert_fail@plt+0x2b0c>
   13978:	mov	r4, #1
   1397c:	add	r6, r7, #4
   13980:	ldr	r0, [r6, r4, lsl #3]
   13984:	add	r4, r4, #1
   13988:	bl	172b0 <__assert_fail@plt+0x6424>
   1398c:	ldr	r3, [r5, #4]
   13990:	cmp	r3, r4
   13994:	bgt	13980 <__assert_fail@plt+0x2af4>
   13998:	ldr	r0, [r7, #4]
   1399c:	movw	r4, #37204	; 0x9154
   139a0:	movt	r4, #2
   139a4:	cmp	r0, r4
   139a8:	beq	139bc <__assert_fail@plt+0x2b30>
   139ac:	bl	172b0 <__assert_fail@plt+0x6424>
   139b0:	mov	r3, #256	; 0x100
   139b4:	str	r3, [r5, #8]
   139b8:	str	r4, [r5, #12]
   139bc:	ldr	r4, [pc, #44]	; 139f0 <__assert_fail@plt+0x2b64>
   139c0:	cmp	r7, r4
   139c4:	beq	139d4 <__assert_fail@plt+0x2b48>
   139c8:	mov	r0, r7
   139cc:	bl	172b0 <__assert_fail@plt+0x6424>
   139d0:	str	r4, [r5]
   139d4:	mov	r3, #1
   139d8:	ldrd	r6, [sp, #8]
   139dc:	str	r3, [r5, #4]
   139e0:	ldrd	r4, [sp]
   139e4:	ldr	r8, [sp, #16]
   139e8:	add	sp, sp, #20
   139ec:	pop	{pc}		; (ldr pc, [sp], #4)
   139f0:	strdeq	r9, [r2], -r0
   139f4:	ldr	r3, [pc, #4]	; 13a00 <__assert_fail@plt+0x2b74>
   139f8:	mvn	r2, #0
   139fc:	b	133f8 <__assert_fail@plt+0x256c>
   13a00:	andeq	r9, r2, r4, asr r2
   13a04:	ldr	r3, [pc]	; 13a0c <__assert_fail@plt+0x2b80>
   13a08:	b	133f8 <__assert_fail@plt+0x256c>
   13a0c:	andeq	r9, r2, r4, asr r2
   13a10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a14:	movw	r4, #37096	; 0x90e8
   13a18:	movt	r4, #2
   13a1c:	strd	r6, [sp, #8]
   13a20:	strd	r8, [sp, #16]
   13a24:	strd	sl, [sp, #24]
   13a28:	mov	sl, r0
   13a2c:	str	lr, [sp, #32]
   13a30:	sub	sp, sp, #44	; 0x2c
   13a34:	bl	10dd8 <__errno_location@plt>
   13a38:	ldr	r3, [r0]
   13a3c:	mov	r8, r0
   13a40:	ldr	r2, [r4, #4]
   13a44:	ldr	r5, [r4]
   13a48:	str	r3, [sp, #28]
   13a4c:	cmp	r2, #0
   13a50:	bgt	13aac <__assert_fail@plt+0x2c20>
   13a54:	add	r3, r4, #8
   13a58:	str	r2, [sp, #36]	; 0x24
   13a5c:	rsb	r2, r2, #1
   13a60:	cmp	r5, r3
   13a64:	beq	13b78 <__assert_fail@plt+0x2cec>
   13a68:	mov	r1, #8
   13a6c:	mov	r0, r5
   13a70:	mvn	r3, #-2147483648	; 0x80000000
   13a74:	str	r1, [sp]
   13a78:	add	r1, sp, #36	; 0x24
   13a7c:	bl	15d18 <__assert_fail@plt+0x4e8c>
   13a80:	mov	r5, r0
   13a84:	str	r0, [r4]
   13a88:	ldr	r0, [r4, #4]
   13a8c:	mov	r1, #0
   13a90:	ldr	r2, [sp, #36]	; 0x24
   13a94:	sub	r2, r2, r0
   13a98:	add	r0, r5, r0, lsl #3
   13a9c:	lsl	r2, r2, #3
   13aa0:	bl	10df0 <memset@plt>
   13aa4:	ldr	r3, [sp, #36]	; 0x24
   13aa8:	str	r3, [r4, #4]
   13aac:	movw	r4, #37204	; 0x9154
   13ab0:	movt	r4, #2
   13ab4:	ldr	r9, [r5]
   13ab8:	add	fp, r4, #264	; 0x108
   13abc:	mvn	r3, #0
   13ac0:	ldr	r7, [r4, #260]	; 0x104
   13ac4:	mov	r2, sl
   13ac8:	ldr	r6, [r5, #4]
   13acc:	str	fp, [sp, #8]
   13ad0:	mov	r1, r9
   13ad4:	ldr	ip, [r4, #256]	; 0x100
   13ad8:	orr	r7, r7, #1
   13adc:	ldr	lr, [r4, #300]	; 0x12c
   13ae0:	mov	r0, r6
   13ae4:	str	ip, [sp]
   13ae8:	str	r7, [sp, #4]
   13aec:	str	lr, [sp, #16]
   13af0:	ldr	ip, [r4, #296]	; 0x128
   13af4:	str	ip, [sp, #12]
   13af8:	bl	11a0c <__assert_fail@plt+0xb80>
   13afc:	cmp	r9, r0
   13b00:	bhi	13b50 <__assert_fail@plt+0x2cc4>
   13b04:	add	r9, r0, #1
   13b08:	cmp	r6, r4
   13b0c:	str	r9, [r5]
   13b10:	beq	13b1c <__assert_fail@plt+0x2c90>
   13b14:	mov	r0, r6
   13b18:	bl	172b0 <__assert_fail@plt+0x6424>
   13b1c:	mov	r0, r9
   13b20:	bl	15a74 <__assert_fail@plt+0x4be8>
   13b24:	ldr	r3, [r4, #256]	; 0x100
   13b28:	mov	r2, sl
   13b2c:	mov	r1, r9
   13b30:	mov	r6, r0
   13b34:	ldr	lr, [r4, #296]	; 0x128
   13b38:	ldr	ip, [r4, #300]	; 0x12c
   13b3c:	str	r0, [r5, #4]
   13b40:	stm	sp, {r3, r7, fp, lr}
   13b44:	mvn	r3, #0
   13b48:	str	ip, [sp, #16]
   13b4c:	bl	11a0c <__assert_fail@plt+0xb80>
   13b50:	ldr	r3, [sp, #28]
   13b54:	mov	r0, r6
   13b58:	str	r3, [r8]
   13b5c:	add	sp, sp, #44	; 0x2c
   13b60:	ldrd	r4, [sp]
   13b64:	ldrd	r6, [sp, #8]
   13b68:	ldrd	r8, [sp, #16]
   13b6c:	ldrd	sl, [sp, #24]
   13b70:	add	sp, sp, #32
   13b74:	pop	{pc}		; (ldr pc, [sp], #4)
   13b78:	mov	r0, #8
   13b7c:	mvn	r3, #-2147483648	; 0x80000000
   13b80:	add	r1, sp, #36	; 0x24
   13b84:	str	r0, [sp]
   13b88:	mov	r0, #0
   13b8c:	bl	15d18 <__assert_fail@plt+0x4e8c>
   13b90:	ldrd	r2, [r4, #8]
   13b94:	mov	r5, r0
   13b98:	str	r0, [r4]
   13b9c:	strd	r2, [r0]
   13ba0:	b	13a88 <__assert_fail@plt+0x2bfc>
   13ba4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ba8:	movw	r4, #37096	; 0x90e8
   13bac:	movt	r4, #2
   13bb0:	strd	r6, [sp, #8]
   13bb4:	strd	r8, [sp, #16]
   13bb8:	strd	sl, [sp, #24]
   13bbc:	mov	sl, r0
   13bc0:	mov	fp, r1
   13bc4:	str	lr, [sp, #32]
   13bc8:	sub	sp, sp, #44	; 0x2c
   13bcc:	bl	10dd8 <__errno_location@plt>
   13bd0:	ldr	r3, [r0]
   13bd4:	mov	r8, r0
   13bd8:	ldr	r2, [r4, #4]
   13bdc:	ldr	r5, [r4]
   13be0:	str	r3, [sp, #28]
   13be4:	cmp	r2, #0
   13be8:	bgt	13c44 <__assert_fail@plt+0x2db8>
   13bec:	add	r3, r4, #8
   13bf0:	str	r2, [sp, #36]	; 0x24
   13bf4:	rsb	r2, r2, #1
   13bf8:	cmp	r5, r3
   13bfc:	beq	13d20 <__assert_fail@plt+0x2e94>
   13c00:	mov	r1, #8
   13c04:	mov	r0, r5
   13c08:	mvn	r3, #-2147483648	; 0x80000000
   13c0c:	str	r1, [sp]
   13c10:	add	r1, sp, #36	; 0x24
   13c14:	bl	15d18 <__assert_fail@plt+0x4e8c>
   13c18:	mov	r5, r0
   13c1c:	str	r0, [r4]
   13c20:	ldr	r0, [r4, #4]
   13c24:	mov	r1, #0
   13c28:	ldr	r2, [sp, #36]	; 0x24
   13c2c:	sub	r2, r2, r0
   13c30:	add	r0, r5, r0, lsl #3
   13c34:	lsl	r2, r2, #3
   13c38:	bl	10df0 <memset@plt>
   13c3c:	ldr	r3, [sp, #36]	; 0x24
   13c40:	str	r3, [r4, #4]
   13c44:	movw	r4, #37204	; 0x9154
   13c48:	movt	r4, #2
   13c4c:	ldr	r9, [r5]
   13c50:	add	r0, r4, #264	; 0x108
   13c54:	mov	r3, fp
   13c58:	ldr	r7, [r4, #260]	; 0x104
   13c5c:	mov	r2, sl
   13c60:	ldr	r6, [r5, #4]
   13c64:	str	r0, [sp, #8]
   13c68:	mov	r1, r9
   13c6c:	ldr	ip, [r4, #256]	; 0x100
   13c70:	orr	r7, r7, #1
   13c74:	ldr	lr, [r4, #300]	; 0x12c
   13c78:	mov	r0, r6
   13c7c:	str	ip, [sp]
   13c80:	str	r7, [sp, #4]
   13c84:	str	lr, [sp, #16]
   13c88:	ldr	ip, [r4, #296]	; 0x128
   13c8c:	str	ip, [sp, #12]
   13c90:	bl	11a0c <__assert_fail@plt+0xb80>
   13c94:	cmp	r9, r0
   13c98:	bhi	13cf8 <__assert_fail@plt+0x2e6c>
   13c9c:	add	r9, r0, #1
   13ca0:	cmp	r6, r4
   13ca4:	str	r9, [r5]
   13ca8:	beq	13cb4 <__assert_fail@plt+0x2e28>
   13cac:	mov	r0, r6
   13cb0:	bl	172b0 <__assert_fail@plt+0x6424>
   13cb4:	mov	r0, r9
   13cb8:	bl	15a74 <__assert_fail@plt+0x4be8>
   13cbc:	ldr	ip, [r4, #256]	; 0x100
   13cc0:	mov	r1, r9
   13cc4:	mov	r3, fp
   13cc8:	mov	r2, sl
   13ccc:	mov	r6, r0
   13cd0:	ldr	r9, [r4, #296]	; 0x128
   13cd4:	ldr	lr, [r4, #300]	; 0x12c
   13cd8:	str	r0, [r5, #4]
   13cdc:	str	ip, [sp]
   13ce0:	ldr	ip, [pc, #100]	; 13d4c <__assert_fail@plt+0x2ec0>
   13ce4:	str	r7, [sp, #4]
   13ce8:	str	ip, [sp, #8]
   13cec:	str	r9, [sp, #12]
   13cf0:	str	lr, [sp, #16]
   13cf4:	bl	11a0c <__assert_fail@plt+0xb80>
   13cf8:	ldr	r3, [sp, #28]
   13cfc:	mov	r0, r6
   13d00:	str	r3, [r8]
   13d04:	add	sp, sp, #44	; 0x2c
   13d08:	ldrd	r4, [sp]
   13d0c:	ldrd	r6, [sp, #8]
   13d10:	ldrd	r8, [sp, #16]
   13d14:	ldrd	sl, [sp, #24]
   13d18:	add	sp, sp, #32
   13d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d20:	mov	r0, #8
   13d24:	mvn	r3, #-2147483648	; 0x80000000
   13d28:	add	r1, sp, #36	; 0x24
   13d2c:	str	r0, [sp]
   13d30:	mov	r0, #0
   13d34:	bl	15d18 <__assert_fail@plt+0x4e8c>
   13d38:	ldrd	r2, [r4, #8]
   13d3c:	mov	r5, r0
   13d40:	str	r0, [r4]
   13d44:	strd	r2, [r0]
   13d48:	b	13c20 <__assert_fail@plt+0x2d94>
   13d4c:	andeq	r9, r2, ip, asr r2
   13d50:	strd	r4, [sp, #-20]!	; 0xffffffec
   13d54:	mov	r4, #0
   13d58:	mov	r5, #0
   13d5c:	strd	r6, [sp, #8]
   13d60:	cmp	r1, #10
   13d64:	str	lr, [sp, #16]
   13d68:	sub	sp, sp, #100	; 0x64
   13d6c:	strd	r4, [sp, #48]	; 0x30
   13d70:	beq	13db8 <__assert_fail@plt+0x2f2c>
   13d74:	mov	r3, sp
   13d78:	strd	r4, [sp, #8]
   13d7c:	str	r1, [sp, #48]	; 0x30
   13d80:	mov	r1, r2
   13d84:	mvn	r2, #0
   13d88:	ldrd	r6, [sp, #48]	; 0x30
   13d8c:	strd	r6, [sp]
   13d90:	strd	r4, [sp, #16]
   13d94:	strd	r4, [sp, #24]
   13d98:	strd	r4, [sp, #32]
   13d9c:	strd	r4, [sp, #40]	; 0x28
   13da0:	bl	133f8 <__assert_fail@plt+0x256c>
   13da4:	add	sp, sp, #100	; 0x64
   13da8:	ldrd	r4, [sp]
   13dac:	ldrd	r6, [sp, #8]
   13db0:	add	sp, sp, #16
   13db4:	pop	{pc}		; (ldr pc, [sp], #4)
   13db8:	bl	10e80 <abort@plt>
   13dbc:	strd	r4, [sp, #-20]!	; 0xffffffec
   13dc0:	mov	r4, #0
   13dc4:	mov	r5, #0
   13dc8:	strd	r6, [sp, #8]
   13dcc:	cmp	r1, #10
   13dd0:	str	lr, [sp, #16]
   13dd4:	sub	sp, sp, #100	; 0x64
   13dd8:	strd	r4, [sp, #48]	; 0x30
   13ddc:	beq	13e28 <__assert_fail@plt+0x2f9c>
   13de0:	mov	ip, r2
   13de4:	mov	r2, r3
   13de8:	strd	r4, [sp, #8]
   13dec:	str	r1, [sp, #48]	; 0x30
   13df0:	mov	r3, sp
   13df4:	mov	r1, ip
   13df8:	ldrd	r6, [sp, #48]	; 0x30
   13dfc:	strd	r6, [sp]
   13e00:	strd	r4, [sp, #16]
   13e04:	strd	r4, [sp, #24]
   13e08:	strd	r4, [sp, #32]
   13e0c:	strd	r4, [sp, #40]	; 0x28
   13e10:	bl	133f8 <__assert_fail@plt+0x256c>
   13e14:	add	sp, sp, #100	; 0x64
   13e18:	ldrd	r4, [sp]
   13e1c:	ldrd	r6, [sp, #8]
   13e20:	add	sp, sp, #16
   13e24:	pop	{pc}		; (ldr pc, [sp], #4)
   13e28:	bl	10e80 <abort@plt>
   13e2c:	mov	r2, #0
   13e30:	mov	r3, #0
   13e34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e38:	strd	r6, [sp, #8]
   13e3c:	cmp	r0, #10
   13e40:	strd	r8, [sp, #16]
   13e44:	strd	sl, [sp, #24]
   13e48:	str	lr, [sp, #32]
   13e4c:	sub	sp, sp, #124	; 0x7c
   13e50:	strd	r2, [sp, #72]	; 0x48
   13e54:	strd	r2, [sp, #80]	; 0x50
   13e58:	strd	r2, [sp, #88]	; 0x58
   13e5c:	strd	r2, [sp, #96]	; 0x60
   13e60:	strd	r2, [sp, #104]	; 0x68
   13e64:	strd	r2, [sp, #112]	; 0x70
   13e68:	beq	1400c <__assert_fail@plt+0x3180>
   13e6c:	mov	r6, r1
   13e70:	movw	r4, #37096	; 0x90e8
   13e74:	movt	r4, #2
   13e78:	str	r0, [sp, #72]	; 0x48
   13e7c:	ldrd	r0, [sp, #72]	; 0x48
   13e80:	strd	r0, [sp, #24]
   13e84:	strd	r2, [sp, #32]
   13e88:	strd	r2, [sp, #40]	; 0x28
   13e8c:	strd	r2, [sp, #48]	; 0x30
   13e90:	strd	r2, [sp, #56]	; 0x38
   13e94:	strd	r2, [sp, #64]	; 0x40
   13e98:	bl	10dd8 <__errno_location@plt>
   13e9c:	mov	r8, r0
   13ea0:	ldr	r5, [r4]
   13ea4:	ldr	r2, [r4, #4]
   13ea8:	ldr	r9, [r0]
   13eac:	cmp	r2, #0
   13eb0:	bgt	13f0c <__assert_fail@plt+0x3080>
   13eb4:	add	r3, r4, #8
   13eb8:	str	r2, [sp, #72]	; 0x48
   13ebc:	rsb	r2, r2, #1
   13ec0:	cmp	r5, r3
   13ec4:	beq	13fe0 <__assert_fail@plt+0x3154>
   13ec8:	mov	r3, #8
   13ecc:	mov	r0, r5
   13ed0:	add	r1, sp, #72	; 0x48
   13ed4:	str	r3, [sp]
   13ed8:	mvn	r3, #-2147483648	; 0x80000000
   13edc:	bl	15d18 <__assert_fail@plt+0x4e8c>
   13ee0:	mov	r5, r0
   13ee4:	str	r0, [r4]
   13ee8:	ldr	r0, [r4, #4]
   13eec:	mov	r1, #0
   13ef0:	ldr	r2, [sp, #72]	; 0x48
   13ef4:	sub	r2, r2, r0
   13ef8:	add	r0, r5, r0, lsl #3
   13efc:	lsl	r2, r2, #3
   13f00:	bl	10df0 <memset@plt>
   13f04:	ldr	r3, [sp, #72]	; 0x48
   13f08:	str	r3, [r4, #4]
   13f0c:	ldr	sl, [r5]
   13f10:	add	r0, sp, #32
   13f14:	mvn	r3, #0
   13f18:	mov	r2, r6
   13f1c:	ldr	r7, [sp, #28]
   13f20:	ldr	r4, [r5, #4]
   13f24:	mov	r1, sl
   13f28:	str	r0, [sp, #8]
   13f2c:	ldr	lr, [sp, #24]
   13f30:	orr	r7, r7, #1
   13f34:	ldr	ip, [sp, #64]	; 0x40
   13f38:	mov	r0, r4
   13f3c:	ldr	fp, [sp, #68]	; 0x44
   13f40:	str	lr, [sp]
   13f44:	str	r7, [sp, #4]
   13f48:	str	ip, [sp, #12]
   13f4c:	str	fp, [sp, #16]
   13f50:	bl	11a0c <__assert_fail@plt+0xb80>
   13f54:	cmp	sl, r0
   13f58:	bhi	13fbc <__assert_fail@plt+0x3130>
   13f5c:	add	sl, r0, #1
   13f60:	movw	r3, #37204	; 0x9154
   13f64:	movt	r3, #2
   13f68:	cmp	r4, r3
   13f6c:	str	sl, [r5]
   13f70:	beq	13f7c <__assert_fail@plt+0x30f0>
   13f74:	mov	r0, r4
   13f78:	bl	172b0 <__assert_fail@plt+0x6424>
   13f7c:	mov	r0, sl
   13f80:	bl	15a74 <__assert_fail@plt+0x4be8>
   13f84:	ldr	r3, [sp, #24]
   13f88:	mov	r2, r6
   13f8c:	mov	r1, sl
   13f90:	mov	r4, r0
   13f94:	ldr	lr, [sp, #64]	; 0x40
   13f98:	ldr	ip, [sp, #68]	; 0x44
   13f9c:	str	r0, [r5, #4]
   13fa0:	add	r5, sp, #32
   13fa4:	stm	sp, {r3, r7}
   13fa8:	mvn	r3, #0
   13fac:	str	r5, [sp, #8]
   13fb0:	str	lr, [sp, #12]
   13fb4:	str	ip, [sp, #16]
   13fb8:	bl	11a0c <__assert_fail@plt+0xb80>
   13fbc:	mov	r0, r4
   13fc0:	str	r9, [r8]
   13fc4:	add	sp, sp, #124	; 0x7c
   13fc8:	ldrd	r4, [sp]
   13fcc:	ldrd	r6, [sp, #8]
   13fd0:	ldrd	r8, [sp, #16]
   13fd4:	ldrd	sl, [sp, #24]
   13fd8:	add	sp, sp, #32
   13fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe0:	mov	r0, #8
   13fe4:	mvn	r3, #-2147483648	; 0x80000000
   13fe8:	add	r1, sp, #72	; 0x48
   13fec:	str	r0, [sp]
   13ff0:	mov	r0, #0
   13ff4:	bl	15d18 <__assert_fail@plt+0x4e8c>
   13ff8:	ldrd	r2, [r4, #8]
   13ffc:	mov	r5, r0
   14000:	str	r0, [r4]
   14004:	strd	r2, [r0]
   14008:	b	13ee8 <__assert_fail@plt+0x305c>
   1400c:	bl	10e80 <abort@plt>
   14010:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14014:	cmp	r0, #10
   14018:	strd	r6, [sp, #8]
   1401c:	mov	r6, #0
   14020:	mov	r7, #0
   14024:	strd	r8, [sp, #16]
   14028:	strd	sl, [sp, #24]
   1402c:	str	lr, [sp, #32]
   14030:	sub	sp, sp, #124	; 0x7c
   14034:	strd	r6, [sp, #72]	; 0x48
   14038:	strd	r6, [sp, #80]	; 0x50
   1403c:	strd	r6, [sp, #88]	; 0x58
   14040:	strd	r6, [sp, #96]	; 0x60
   14044:	strd	r6, [sp, #104]	; 0x68
   14048:	strd	r6, [sp, #112]	; 0x70
   1404c:	beq	141f8 <__assert_fail@plt+0x336c>
   14050:	mov	sl, r2
   14054:	movw	r5, #37096	; 0x90e8
   14058:	movt	r5, #2
   1405c:	str	r0, [sp, #72]	; 0x48
   14060:	mov	r9, r1
   14064:	ldrd	r2, [sp, #72]	; 0x48
   14068:	strd	r2, [sp, #24]
   1406c:	strd	r6, [sp, #32]
   14070:	strd	r6, [sp, #40]	; 0x28
   14074:	strd	r6, [sp, #48]	; 0x30
   14078:	strd	r6, [sp, #56]	; 0x38
   1407c:	strd	r6, [sp, #64]	; 0x40
   14080:	bl	10dd8 <__errno_location@plt>
   14084:	mov	r7, r0
   14088:	ldr	r4, [r5]
   1408c:	ldr	r2, [r5, #4]
   14090:	ldr	fp, [r0]
   14094:	cmp	r2, #0
   14098:	bgt	140f4 <__assert_fail@plt+0x3268>
   1409c:	add	r3, r5, #8
   140a0:	str	r2, [sp, #72]	; 0x48
   140a4:	rsb	r2, r2, #1
   140a8:	cmp	r4, r3
   140ac:	beq	141cc <__assert_fail@plt+0x3340>
   140b0:	mov	r3, #8
   140b4:	mov	r0, r4
   140b8:	add	r1, sp, #72	; 0x48
   140bc:	str	r3, [sp]
   140c0:	mvn	r3, #-2147483648	; 0x80000000
   140c4:	bl	15d18 <__assert_fail@plt+0x4e8c>
   140c8:	mov	r4, r0
   140cc:	str	r0, [r5]
   140d0:	ldr	r0, [r5, #4]
   140d4:	mov	r1, #0
   140d8:	ldr	r2, [sp, #72]	; 0x48
   140dc:	sub	r2, r2, r0
   140e0:	add	r0, r4, r0, lsl #3
   140e4:	lsl	r2, r2, #3
   140e8:	bl	10df0 <memset@plt>
   140ec:	ldr	r3, [sp, #72]	; 0x48
   140f0:	str	r3, [r5, #4]
   140f4:	ldr	ip, [sp, #24]
   140f8:	add	r0, sp, #32
   140fc:	mov	r3, sl
   14100:	mov	r2, r9
   14104:	ldr	r6, [sp, #28]
   14108:	ldr	r8, [r4]
   1410c:	ldr	r5, [r4, #4]
   14110:	str	ip, [sp]
   14114:	orr	r6, r6, #1
   14118:	ldr	ip, [sp, #64]	; 0x40
   1411c:	mov	r1, r8
   14120:	str	r6, [sp, #4]
   14124:	ldr	lr, [sp, #68]	; 0x44
   14128:	str	r0, [sp, #8]
   1412c:	mov	r0, r5
   14130:	str	ip, [sp, #12]
   14134:	str	lr, [sp, #16]
   14138:	bl	11a0c <__assert_fail@plt+0xb80>
   1413c:	cmp	r8, r0
   14140:	bhi	141a8 <__assert_fail@plt+0x331c>
   14144:	add	r8, r0, #1
   14148:	movw	r3, #37204	; 0x9154
   1414c:	movt	r3, #2
   14150:	cmp	r5, r3
   14154:	str	r8, [r4]
   14158:	beq	14164 <__assert_fail@plt+0x32d8>
   1415c:	mov	r0, r5
   14160:	bl	172b0 <__assert_fail@plt+0x6424>
   14164:	mov	r0, r8
   14168:	bl	15a74 <__assert_fail@plt+0x4be8>
   1416c:	ldr	lr, [sp, #24]
   14170:	mov	r1, r8
   14174:	mov	r3, sl
   14178:	mov	r2, r9
   1417c:	mov	r5, r0
   14180:	ldr	r8, [sp, #64]	; 0x40
   14184:	ldr	ip, [sp, #68]	; 0x44
   14188:	str	r0, [r4, #4]
   1418c:	str	lr, [sp]
   14190:	add	lr, sp, #32
   14194:	str	r6, [sp, #4]
   14198:	str	lr, [sp, #8]
   1419c:	str	r8, [sp, #12]
   141a0:	str	ip, [sp, #16]
   141a4:	bl	11a0c <__assert_fail@plt+0xb80>
   141a8:	mov	r0, r5
   141ac:	str	fp, [r7]
   141b0:	add	sp, sp, #124	; 0x7c
   141b4:	ldrd	r4, [sp]
   141b8:	ldrd	r6, [sp, #8]
   141bc:	ldrd	r8, [sp, #16]
   141c0:	ldrd	sl, [sp, #24]
   141c4:	add	sp, sp, #32
   141c8:	pop	{pc}		; (ldr pc, [sp], #4)
   141cc:	mov	r0, #8
   141d0:	mvn	r3, #-2147483648	; 0x80000000
   141d4:	add	r1, sp, #72	; 0x48
   141d8:	str	r0, [sp]
   141dc:	mov	r0, #0
   141e0:	bl	15d18 <__assert_fail@plt+0x4e8c>
   141e4:	ldrd	r2, [r5, #8]
   141e8:	mov	r4, r0
   141ec:	str	r0, [r5]
   141f0:	strd	r2, [r0]
   141f4:	b	140d0 <__assert_fail@plt+0x3244>
   141f8:	bl	10e80 <abort@plt>
   141fc:	ldr	r3, [pc, #492]	; 143f0 <__assert_fail@plt+0x3564>
   14200:	lsr	ip, r2, #5
   14204:	and	r2, r2, #31
   14208:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1420c:	movw	r5, #37096	; 0x90e8
   14210:	movt	r5, #2
   14214:	strd	r6, [sp, #8]
   14218:	strd	r8, [sp, #16]
   1421c:	strd	sl, [sp, #24]
   14220:	mov	sl, r0
   14224:	mov	fp, r1
   14228:	ldrd	r0, [r3]
   1422c:	str	lr, [sp, #32]
   14230:	sub	sp, sp, #92	; 0x5c
   14234:	ldrd	r8, [r3, #8]
   14238:	add	r6, sp, #48	; 0x30
   1423c:	strd	r0, [sp, #40]	; 0x28
   14240:	ldrd	r0, [r3, #16]
   14244:	strd	r8, [sp, #48]	; 0x30
   14248:	ldrd	r8, [r3, #24]
   1424c:	strd	r0, [sp, #56]	; 0x38
   14250:	ldrd	r0, [r3, #32]
   14254:	strd	r8, [sp, #64]	; 0x40
   14258:	ldrd	r8, [r3, #40]	; 0x28
   1425c:	strd	r0, [sp, #72]	; 0x48
   14260:	strd	r8, [sp, #80]	; 0x50
   14264:	ldr	r3, [r6, ip, lsl #2]
   14268:	mvn	r1, r3, lsr r2
   1426c:	and	r1, r1, #1
   14270:	eor	r2, r3, r1, lsl r2
   14274:	str	r2, [r6, ip, lsl #2]
   14278:	bl	10dd8 <__errno_location@plt>
   1427c:	ldr	r3, [r0]
   14280:	mov	r8, r0
   14284:	ldr	r2, [r5, #4]
   14288:	ldr	r4, [r5]
   1428c:	str	r3, [sp, #28]
   14290:	cmp	r2, #0
   14294:	bgt	142f0 <__assert_fail@plt+0x3464>
   14298:	add	r3, r5, #8
   1429c:	str	r2, [sp, #36]	; 0x24
   142a0:	rsb	r2, r2, #1
   142a4:	cmp	r4, r3
   142a8:	beq	143c4 <__assert_fail@plt+0x3538>
   142ac:	mov	r1, #8
   142b0:	mov	r0, r4
   142b4:	mvn	r3, #-2147483648	; 0x80000000
   142b8:	str	r1, [sp]
   142bc:	add	r1, sp, #36	; 0x24
   142c0:	bl	15d18 <__assert_fail@plt+0x4e8c>
   142c4:	mov	r4, r0
   142c8:	str	r0, [r5]
   142cc:	ldr	r0, [r5, #4]
   142d0:	mov	r1, #0
   142d4:	ldr	r2, [sp, #36]	; 0x24
   142d8:	sub	r2, r2, r0
   142dc:	add	r0, r4, r0, lsl #3
   142e0:	lsl	r2, r2, #3
   142e4:	bl	10df0 <memset@plt>
   142e8:	ldr	r3, [sp, #36]	; 0x24
   142ec:	str	r3, [r5, #4]
   142f0:	ldr	ip, [sp, #40]	; 0x28
   142f4:	mov	r3, fp
   142f8:	mov	r2, sl
   142fc:	ldr	r7, [sp, #44]	; 0x2c
   14300:	ldr	r9, [r4]
   14304:	ldr	r5, [r4, #4]
   14308:	str	ip, [sp]
   1430c:	orr	r7, r7, #1
   14310:	ldr	ip, [sp, #80]	; 0x50
   14314:	mov	r1, r9
   14318:	str	r7, [sp, #4]
   1431c:	ldr	lr, [sp, #84]	; 0x54
   14320:	mov	r0, r5
   14324:	str	r6, [sp, #8]
   14328:	str	ip, [sp, #12]
   1432c:	str	lr, [sp, #16]
   14330:	bl	11a0c <__assert_fail@plt+0xb80>
   14334:	cmp	r9, r0
   14338:	bhi	1439c <__assert_fail@plt+0x3510>
   1433c:	add	r9, r0, #1
   14340:	movw	r3, #37204	; 0x9154
   14344:	movt	r3, #2
   14348:	cmp	r5, r3
   1434c:	str	r9, [r4]
   14350:	beq	1435c <__assert_fail@plt+0x34d0>
   14354:	mov	r0, r5
   14358:	bl	172b0 <__assert_fail@plt+0x6424>
   1435c:	mov	r0, r9
   14360:	bl	15a74 <__assert_fail@plt+0x4be8>
   14364:	mov	r1, r9
   14368:	ldr	ip, [sp, #40]	; 0x28
   1436c:	mov	r3, fp
   14370:	mov	r2, sl
   14374:	mov	r5, r0
   14378:	ldr	r9, [sp, #80]	; 0x50
   1437c:	ldr	lr, [sp, #84]	; 0x54
   14380:	str	r0, [r4, #4]
   14384:	str	ip, [sp]
   14388:	str	r7, [sp, #4]
   1438c:	str	r6, [sp, #8]
   14390:	str	r9, [sp, #12]
   14394:	str	lr, [sp, #16]
   14398:	bl	11a0c <__assert_fail@plt+0xb80>
   1439c:	ldr	r3, [sp, #28]
   143a0:	mov	r0, r5
   143a4:	str	r3, [r8]
   143a8:	add	sp, sp, #92	; 0x5c
   143ac:	ldrd	r4, [sp]
   143b0:	ldrd	r6, [sp, #8]
   143b4:	ldrd	r8, [sp, #16]
   143b8:	ldrd	sl, [sp, #24]
   143bc:	add	sp, sp, #32
   143c0:	pop	{pc}		; (ldr pc, [sp], #4)
   143c4:	mov	r0, #8
   143c8:	mvn	r3, #-2147483648	; 0x80000000
   143cc:	add	r1, sp, #36	; 0x24
   143d0:	str	r0, [sp]
   143d4:	mov	r0, #0
   143d8:	bl	15d18 <__assert_fail@plt+0x4e8c>
   143dc:	ldrd	r2, [r5, #8]
   143e0:	mov	r4, r0
   143e4:	str	r0, [r5]
   143e8:	strd	r2, [r0]
   143ec:	b	142cc <__assert_fail@plt+0x3440>
   143f0:	andeq	r9, r2, r4, asr r2
   143f4:	ldr	ip, [pc, #476]	; 145d8 <__assert_fail@plt+0x374c>
   143f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143fc:	movw	r4, #37096	; 0x90e8
   14400:	movt	r4, #2
   14404:	ldrd	r2, [ip, #8]
   14408:	strd	r6, [sp, #8]
   1440c:	lsr	r7, r1, #5
   14410:	mov	r6, r0
   14414:	strd	r8, [sp, #16]
   14418:	str	lr, [sp, #32]
   1441c:	and	lr, r1, #31
   14420:	ldrd	r0, [ip]
   14424:	strd	sl, [sp, #24]
   14428:	sub	sp, sp, #84	; 0x54
   1442c:	add	r5, sp, #40	; 0x28
   14430:	strd	r0, [sp, #32]
   14434:	strd	r2, [sp, #40]	; 0x28
   14438:	ldrd	r0, [ip, #16]
   1443c:	ldrd	r2, [ip, #24]
   14440:	strd	r0, [sp, #48]	; 0x30
   14444:	ldrd	r0, [ip, #32]
   14448:	strd	r2, [sp, #56]	; 0x38
   1444c:	ldrd	r2, [ip, #40]	; 0x28
   14450:	strd	r0, [sp, #64]	; 0x40
   14454:	strd	r2, [sp, #72]	; 0x48
   14458:	ldr	r1, [r5, r7, lsl #2]
   1445c:	mvn	r3, r1, lsr lr
   14460:	and	r3, r3, #1
   14464:	eor	r1, r1, r3, lsl lr
   14468:	str	r1, [r5, r7, lsl #2]
   1446c:	bl	10dd8 <__errno_location@plt>
   14470:	mov	r9, r0
   14474:	ldr	sl, [r0]
   14478:	ldr	r2, [r4, #4]
   1447c:	ldr	r7, [r4]
   14480:	cmp	r2, #0
   14484:	bgt	144e0 <__assert_fail@plt+0x3654>
   14488:	add	r3, r4, #8
   1448c:	str	r2, [sp, #28]
   14490:	rsb	r2, r2, #1
   14494:	cmp	r7, r3
   14498:	beq	145ac <__assert_fail@plt+0x3720>
   1449c:	mov	r1, #8
   144a0:	mov	r0, r7
   144a4:	mvn	r3, #-2147483648	; 0x80000000
   144a8:	str	r1, [sp]
   144ac:	add	r1, sp, #28
   144b0:	bl	15d18 <__assert_fail@plt+0x4e8c>
   144b4:	mov	r7, r0
   144b8:	str	r0, [r4]
   144bc:	ldr	r0, [r4, #4]
   144c0:	mov	r1, #0
   144c4:	ldr	r2, [sp, #28]
   144c8:	sub	r2, r2, r0
   144cc:	add	r0, r7, r0, lsl #3
   144d0:	lsl	r2, r2, #3
   144d4:	bl	10df0 <memset@plt>
   144d8:	ldr	r3, [sp, #28]
   144dc:	str	r3, [r4, #4]
   144e0:	ldr	ip, [sp, #32]
   144e4:	mvn	r3, #0
   144e8:	mov	r2, r6
   144ec:	ldr	r8, [sp, #36]	; 0x24
   144f0:	ldr	fp, [r7]
   144f4:	ldr	r4, [r7, #4]
   144f8:	str	ip, [sp]
   144fc:	orr	r8, r8, #1
   14500:	ldr	ip, [sp, #72]	; 0x48
   14504:	mov	r1, fp
   14508:	str	r8, [sp, #4]
   1450c:	ldr	lr, [sp, #76]	; 0x4c
   14510:	mov	r0, r4
   14514:	str	r5, [sp, #8]
   14518:	str	ip, [sp, #12]
   1451c:	str	lr, [sp, #16]
   14520:	bl	11a0c <__assert_fail@plt+0xb80>
   14524:	cmp	fp, r0
   14528:	bhi	14588 <__assert_fail@plt+0x36fc>
   1452c:	add	fp, r0, #1
   14530:	movw	r3, #37204	; 0x9154
   14534:	movt	r3, #2
   14538:	cmp	r4, r3
   1453c:	str	fp, [r7]
   14540:	beq	1454c <__assert_fail@plt+0x36c0>
   14544:	mov	r0, r4
   14548:	bl	172b0 <__assert_fail@plt+0x6424>
   1454c:	mov	r0, fp
   14550:	bl	15a74 <__assert_fail@plt+0x4be8>
   14554:	ldr	r3, [sp, #32]
   14558:	mov	r2, r6
   1455c:	mov	r1, fp
   14560:	mov	r4, r0
   14564:	ldr	lr, [sp, #72]	; 0x48
   14568:	ldr	ip, [sp, #76]	; 0x4c
   1456c:	str	r0, [r7, #4]
   14570:	stm	sp, {r3, r8}
   14574:	mvn	r3, #0
   14578:	str	r5, [sp, #8]
   1457c:	str	lr, [sp, #12]
   14580:	str	ip, [sp, #16]
   14584:	bl	11a0c <__assert_fail@plt+0xb80>
   14588:	mov	r0, r4
   1458c:	str	sl, [r9]
   14590:	add	sp, sp, #84	; 0x54
   14594:	ldrd	r4, [sp]
   14598:	ldrd	r6, [sp, #8]
   1459c:	ldrd	r8, [sp, #16]
   145a0:	ldrd	sl, [sp, #24]
   145a4:	add	sp, sp, #32
   145a8:	pop	{pc}		; (ldr pc, [sp], #4)
   145ac:	mov	r0, #8
   145b0:	mvn	r3, #-2147483648	; 0x80000000
   145b4:	add	r1, sp, #28
   145b8:	str	r0, [sp]
   145bc:	mov	r0, #0
   145c0:	bl	15d18 <__assert_fail@plt+0x4e8c>
   145c4:	ldrd	r2, [r4, #8]
   145c8:	mov	r7, r0
   145cc:	str	r0, [r4]
   145d0:	strd	r2, [r0]
   145d4:	b	144bc <__assert_fail@plt+0x3630>
   145d8:	andeq	r9, r2, r4, asr r2
   145dc:	ldr	ip, [pc, #472]	; 147bc <__assert_fail@plt+0x3930>
   145e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   145e4:	mov	r5, r0
   145e8:	movw	r4, #37096	; 0x90e8
   145ec:	movt	r4, #2
   145f0:	ldrd	r2, [ip]
   145f4:	ldrd	r0, [ip, #8]
   145f8:	strd	r6, [sp, #8]
   145fc:	strd	r8, [sp, #16]
   14600:	strd	sl, [sp, #24]
   14604:	str	lr, [sp, #32]
   14608:	sub	sp, sp, #84	; 0x54
   1460c:	strd	r2, [sp, #32]
   14610:	strd	r0, [sp, #40]	; 0x28
   14614:	ldr	r6, [sp, #44]	; 0x2c
   14618:	ldrd	r2, [ip, #16]
   1461c:	ldrd	r0, [ip, #24]
   14620:	mvn	lr, r6
   14624:	and	lr, lr, #67108864	; 0x4000000
   14628:	eor	lr, lr, r6
   1462c:	ldrd	r6, [ip, #40]	; 0x28
   14630:	strd	r2, [sp, #48]	; 0x30
   14634:	ldrd	r2, [ip, #32]
   14638:	str	lr, [sp, #44]	; 0x2c
   1463c:	strd	r0, [sp, #56]	; 0x38
   14640:	strd	r2, [sp, #64]	; 0x40
   14644:	strd	r6, [sp, #72]	; 0x48
   14648:	bl	10dd8 <__errno_location@plt>
   1464c:	mov	r8, r0
   14650:	ldr	r9, [r0]
   14654:	ldr	r2, [r4, #4]
   14658:	ldr	r6, [r4]
   1465c:	cmp	r2, #0
   14660:	bgt	146bc <__assert_fail@plt+0x3830>
   14664:	add	r3, r4, #8
   14668:	str	r2, [sp, #28]
   1466c:	rsb	r2, r2, #1
   14670:	cmp	r6, r3
   14674:	beq	14790 <__assert_fail@plt+0x3904>
   14678:	mov	r1, #8
   1467c:	mov	r0, r6
   14680:	mvn	r3, #-2147483648	; 0x80000000
   14684:	str	r1, [sp]
   14688:	add	r1, sp, #28
   1468c:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14690:	mov	r6, r0
   14694:	str	r0, [r4]
   14698:	ldr	r0, [r4, #4]
   1469c:	mov	r1, #0
   146a0:	ldr	r2, [sp, #28]
   146a4:	sub	r2, r2, r0
   146a8:	add	r0, r6, r0, lsl #3
   146ac:	lsl	r2, r2, #3
   146b0:	bl	10df0 <memset@plt>
   146b4:	ldr	r3, [sp, #28]
   146b8:	str	r3, [r4, #4]
   146bc:	ldr	sl, [r6]
   146c0:	add	r0, sp, #40	; 0x28
   146c4:	mvn	r3, #0
   146c8:	mov	r2, r5
   146cc:	ldr	r7, [sp, #36]	; 0x24
   146d0:	ldr	r4, [r6, #4]
   146d4:	mov	r1, sl
   146d8:	str	r0, [sp, #8]
   146dc:	ldr	lr, [sp, #32]
   146e0:	orr	r7, r7, #1
   146e4:	ldr	ip, [sp, #72]	; 0x48
   146e8:	mov	r0, r4
   146ec:	ldr	fp, [sp, #76]	; 0x4c
   146f0:	str	lr, [sp]
   146f4:	str	r7, [sp, #4]
   146f8:	str	ip, [sp, #12]
   146fc:	str	fp, [sp, #16]
   14700:	bl	11a0c <__assert_fail@plt+0xb80>
   14704:	cmp	sl, r0
   14708:	bhi	1476c <__assert_fail@plt+0x38e0>
   1470c:	add	sl, r0, #1
   14710:	movw	r3, #37204	; 0x9154
   14714:	movt	r3, #2
   14718:	cmp	r4, r3
   1471c:	str	sl, [r6]
   14720:	beq	1472c <__assert_fail@plt+0x38a0>
   14724:	mov	r0, r4
   14728:	bl	172b0 <__assert_fail@plt+0x6424>
   1472c:	mov	r0, sl
   14730:	bl	15a74 <__assert_fail@plt+0x4be8>
   14734:	ldr	r3, [sp, #32]
   14738:	mov	r2, r5
   1473c:	add	r5, sp, #40	; 0x28
   14740:	mov	r1, sl
   14744:	mov	r4, r0
   14748:	ldr	lr, [sp, #72]	; 0x48
   1474c:	ldr	ip, [sp, #76]	; 0x4c
   14750:	str	r0, [r6, #4]
   14754:	stm	sp, {r3, r7}
   14758:	mvn	r3, #0
   1475c:	str	r5, [sp, #8]
   14760:	str	lr, [sp, #12]
   14764:	str	ip, [sp, #16]
   14768:	bl	11a0c <__assert_fail@plt+0xb80>
   1476c:	mov	r0, r4
   14770:	str	r9, [r8]
   14774:	add	sp, sp, #84	; 0x54
   14778:	ldrd	r4, [sp]
   1477c:	ldrd	r6, [sp, #8]
   14780:	ldrd	r8, [sp, #16]
   14784:	ldrd	sl, [sp, #24]
   14788:	add	sp, sp, #32
   1478c:	pop	{pc}		; (ldr pc, [sp], #4)
   14790:	mov	r0, #8
   14794:	mvn	r3, #-2147483648	; 0x80000000
   14798:	add	r1, sp, #28
   1479c:	str	r0, [sp]
   147a0:	mov	r0, #0
   147a4:	bl	15d18 <__assert_fail@plt+0x4e8c>
   147a8:	ldrd	r2, [r4, #8]
   147ac:	mov	r6, r0
   147b0:	str	r0, [r4]
   147b4:	strd	r2, [r0]
   147b8:	b	14698 <__assert_fail@plt+0x380c>
   147bc:	andeq	r9, r2, r4, asr r2
   147c0:	ldr	ip, [pc, #480]	; 149a8 <__assert_fail@plt+0x3b1c>
   147c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147c8:	mov	r5, r0
   147cc:	movw	r4, #37096	; 0x90e8
   147d0:	movt	r4, #2
   147d4:	ldrd	r2, [ip]
   147d8:	strd	r6, [sp, #8]
   147dc:	mov	r6, r1
   147e0:	ldrd	r0, [ip, #8]
   147e4:	strd	r8, [sp, #16]
   147e8:	strd	sl, [sp, #24]
   147ec:	str	lr, [sp, #32]
   147f0:	sub	sp, sp, #84	; 0x54
   147f4:	ldrd	r8, [ip, #40]	; 0x28
   147f8:	strd	r2, [sp, #32]
   147fc:	strd	r0, [sp, #40]	; 0x28
   14800:	ldrd	r2, [ip, #16]
   14804:	ldr	r7, [sp, #44]	; 0x2c
   14808:	ldrd	r0, [ip, #24]
   1480c:	strd	r2, [sp, #48]	; 0x30
   14810:	ldrd	r2, [ip, #32]
   14814:	mvn	lr, r7
   14818:	and	lr, lr, #67108864	; 0x4000000
   1481c:	eor	lr, lr, r7
   14820:	str	lr, [sp, #44]	; 0x2c
   14824:	strd	r0, [sp, #56]	; 0x38
   14828:	strd	r2, [sp, #64]	; 0x40
   1482c:	strd	r8, [sp, #72]	; 0x48
   14830:	bl	10dd8 <__errno_location@plt>
   14834:	mov	r9, r0
   14838:	ldr	sl, [r0]
   1483c:	ldr	r2, [r4, #4]
   14840:	ldr	r7, [r4]
   14844:	cmp	r2, #0
   14848:	bgt	148a4 <__assert_fail@plt+0x3a18>
   1484c:	add	r3, r4, #8
   14850:	str	r2, [sp, #28]
   14854:	rsb	r2, r2, #1
   14858:	cmp	r7, r3
   1485c:	beq	1497c <__assert_fail@plt+0x3af0>
   14860:	mov	r1, #8
   14864:	mov	r0, r7
   14868:	mvn	r3, #-2147483648	; 0x80000000
   1486c:	str	r1, [sp]
   14870:	add	r1, sp, #28
   14874:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14878:	mov	r7, r0
   1487c:	str	r0, [r4]
   14880:	ldr	r0, [r4, #4]
   14884:	mov	r1, #0
   14888:	ldr	r2, [sp, #28]
   1488c:	sub	r2, r2, r0
   14890:	add	r0, r7, r0, lsl #3
   14894:	lsl	r2, r2, #3
   14898:	bl	10df0 <memset@plt>
   1489c:	ldr	r3, [sp, #28]
   148a0:	str	r3, [r4, #4]
   148a4:	ldr	ip, [sp, #32]
   148a8:	add	r0, sp, #40	; 0x28
   148ac:	mov	r3, r6
   148b0:	mov	r2, r5
   148b4:	ldr	r8, [sp, #36]	; 0x24
   148b8:	ldr	fp, [r7]
   148bc:	ldr	r4, [r7, #4]
   148c0:	str	ip, [sp]
   148c4:	orr	r8, r8, #1
   148c8:	ldr	ip, [sp, #72]	; 0x48
   148cc:	mov	r1, fp
   148d0:	str	r8, [sp, #4]
   148d4:	ldr	lr, [sp, #76]	; 0x4c
   148d8:	str	r0, [sp, #8]
   148dc:	mov	r0, r4
   148e0:	str	ip, [sp, #12]
   148e4:	str	lr, [sp, #16]
   148e8:	bl	11a0c <__assert_fail@plt+0xb80>
   148ec:	cmp	fp, r0
   148f0:	bhi	14958 <__assert_fail@plt+0x3acc>
   148f4:	add	fp, r0, #1
   148f8:	movw	r3, #37204	; 0x9154
   148fc:	movt	r3, #2
   14900:	cmp	r4, r3
   14904:	str	fp, [r7]
   14908:	beq	14914 <__assert_fail@plt+0x3a88>
   1490c:	mov	r0, r4
   14910:	bl	172b0 <__assert_fail@plt+0x6424>
   14914:	mov	r0, fp
   14918:	bl	15a74 <__assert_fail@plt+0x4be8>
   1491c:	ldr	lr, [sp, #32]
   14920:	mov	r2, r5
   14924:	mov	r3, r6
   14928:	mov	r1, fp
   1492c:	mov	r4, r0
   14930:	ldr	r5, [sp, #72]	; 0x48
   14934:	ldr	ip, [sp, #76]	; 0x4c
   14938:	str	r0, [r7, #4]
   1493c:	str	lr, [sp]
   14940:	add	lr, sp, #40	; 0x28
   14944:	str	r8, [sp, #4]
   14948:	str	lr, [sp, #8]
   1494c:	str	r5, [sp, #12]
   14950:	str	ip, [sp, #16]
   14954:	bl	11a0c <__assert_fail@plt+0xb80>
   14958:	mov	r0, r4
   1495c:	str	sl, [r9]
   14960:	add	sp, sp, #84	; 0x54
   14964:	ldrd	r4, [sp]
   14968:	ldrd	r6, [sp, #8]
   1496c:	ldrd	r8, [sp, #16]
   14970:	ldrd	sl, [sp, #24]
   14974:	add	sp, sp, #32
   14978:	pop	{pc}		; (ldr pc, [sp], #4)
   1497c:	mov	r0, #8
   14980:	mvn	r3, #-2147483648	; 0x80000000
   14984:	add	r1, sp, #28
   14988:	str	r0, [sp]
   1498c:	mov	r0, #0
   14990:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14994:	ldrd	r2, [r4, #8]
   14998:	mov	r7, r0
   1499c:	str	r0, [r4]
   149a0:	strd	r2, [r0]
   149a4:	b	14880 <__assert_fail@plt+0x39f4>
   149a8:	andeq	r9, r2, r4, asr r2
   149ac:	strd	r4, [sp, #-12]!
   149b0:	mov	r4, #0
   149b4:	mov	r5, #0
   149b8:	str	lr, [sp, #8]
   149bc:	sub	sp, sp, #100	; 0x64
   149c0:	cmp	r1, #10
   149c4:	strd	r4, [sp]
   149c8:	strd	r4, [sp, #8]
   149cc:	strd	r4, [sp, #16]
   149d0:	strd	r4, [sp, #24]
   149d4:	strd	r4, [sp, #32]
   149d8:	strd	r4, [sp, #40]	; 0x28
   149dc:	beq	14a0c <__assert_fail@plt+0x3b80>
   149e0:	mov	ip, #67108864	; 0x4000000
   149e4:	mov	r3, sp
   149e8:	str	r1, [sp]
   149ec:	mov	r1, r2
   149f0:	mvn	r2, #0
   149f4:	str	ip, [sp, #12]
   149f8:	bl	133f8 <__assert_fail@plt+0x256c>
   149fc:	add	sp, sp, #100	; 0x64
   14a00:	ldrd	r4, [sp]
   14a04:	add	sp, sp, #8
   14a08:	pop	{pc}		; (ldr pc, [sp], #4)
   14a0c:	bl	10e80 <abort@plt>
   14a10:	ldr	ip, [pc, #156]	; 14ab4 <__assert_fail@plt+0x3c28>
   14a14:	cmp	r2, #0
   14a18:	cmpne	r1, #0
   14a1c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14a20:	strd	r6, [sp, #8]
   14a24:	mov	r6, r2
   14a28:	str	r8, [sp, #16]
   14a2c:	mov	r8, r3
   14a30:	strd	sl, [sp, #20]
   14a34:	ldrd	r4, [ip]
   14a38:	str	lr, [sp, #28]
   14a3c:	sub	sp, sp, #48	; 0x30
   14a40:	mov	lr, #10
   14a44:	ldrd	r2, [ip, #8]
   14a48:	ldrd	sl, [ip, #16]
   14a4c:	strd	r4, [sp]
   14a50:	ldrd	r4, [ip, #32]
   14a54:	str	lr, [sp]
   14a58:	strd	r2, [sp, #8]
   14a5c:	strd	sl, [sp, #16]
   14a60:	ldrd	r2, [ip, #24]
   14a64:	ldrd	sl, [ip, #40]	; 0x28
   14a68:	strd	r2, [sp, #24]
   14a6c:	strd	r4, [sp, #32]
   14a70:	strd	sl, [sp, #40]	; 0x28
   14a74:	beq	14ab0 <__assert_fail@plt+0x3c24>
   14a78:	mov	r7, r1
   14a7c:	mov	r3, sp
   14a80:	mov	r1, r8
   14a84:	mvn	r2, #0
   14a88:	str	r7, [sp, #40]	; 0x28
   14a8c:	str	r6, [sp, #44]	; 0x2c
   14a90:	bl	133f8 <__assert_fail@plt+0x256c>
   14a94:	add	sp, sp, #48	; 0x30
   14a98:	ldrd	r4, [sp]
   14a9c:	ldrd	r6, [sp, #8]
   14aa0:	ldr	r8, [sp, #16]
   14aa4:	ldrd	sl, [sp, #20]
   14aa8:	add	sp, sp, #28
   14aac:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab0:	bl	10e80 <abort@plt>
   14ab4:	andeq	r9, r2, r4, asr r2
   14ab8:	ldr	ip, [pc, #156]	; 14b5c <__assert_fail@plt+0x3cd0>
   14abc:	cmp	r2, #0
   14ac0:	cmpne	r1, #0
   14ac4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14ac8:	strd	r6, [sp, #8]
   14acc:	mov	r6, r2
   14ad0:	str	r8, [sp, #16]
   14ad4:	mov	r8, r3
   14ad8:	strd	sl, [sp, #20]
   14adc:	ldrd	r4, [ip]
   14ae0:	str	lr, [sp, #28]
   14ae4:	sub	sp, sp, #48	; 0x30
   14ae8:	mov	lr, #10
   14aec:	ldrd	r2, [ip, #8]
   14af0:	ldrd	sl, [ip, #16]
   14af4:	strd	r4, [sp]
   14af8:	ldrd	r4, [ip, #32]
   14afc:	str	lr, [sp]
   14b00:	strd	r2, [sp, #8]
   14b04:	strd	sl, [sp, #16]
   14b08:	ldrd	r2, [ip, #24]
   14b0c:	ldrd	sl, [ip, #40]	; 0x28
   14b10:	strd	r2, [sp, #24]
   14b14:	strd	r4, [sp, #32]
   14b18:	strd	sl, [sp, #40]	; 0x28
   14b1c:	beq	14b58 <__assert_fail@plt+0x3ccc>
   14b20:	ldr	r2, [sp, #80]	; 0x50
   14b24:	mov	r7, r1
   14b28:	mov	r3, sp
   14b2c:	mov	r1, r8
   14b30:	str	r7, [sp, #40]	; 0x28
   14b34:	str	r6, [sp, #44]	; 0x2c
   14b38:	bl	133f8 <__assert_fail@plt+0x256c>
   14b3c:	add	sp, sp, #48	; 0x30
   14b40:	ldrd	r4, [sp]
   14b44:	ldrd	r6, [sp, #8]
   14b48:	ldr	r8, [sp, #16]
   14b4c:	ldrd	sl, [sp, #20]
   14b50:	add	sp, sp, #28
   14b54:	pop	{pc}		; (ldr pc, [sp], #4)
   14b58:	bl	10e80 <abort@plt>
   14b5c:	andeq	r9, r2, r4, asr r2
   14b60:	ldr	ip, [pc, #512]	; 14d68 <__assert_fail@plt+0x3edc>
   14b64:	cmp	r0, #0
   14b68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b6c:	ldrd	r4, [ip, #16]
   14b70:	strd	r6, [sp, #8]
   14b74:	clz	r6, r1
   14b78:	mov	r7, r1
   14b7c:	strd	r8, [sp, #16]
   14b80:	mov	r8, r0
   14b84:	lsr	r6, r6, #5
   14b88:	strd	sl, [sp, #24]
   14b8c:	mov	fp, r2
   14b90:	mov	sl, #10
   14b94:	ldrd	r2, [ip]
   14b98:	moveq	r6, #1
   14b9c:	str	lr, [sp, #32]
   14ba0:	sub	sp, sp, #92	; 0x5c
   14ba4:	cmp	r6, #0
   14ba8:	ldrd	r0, [ip, #8]
   14bac:	strd	r2, [sp, #40]	; 0x28
   14bb0:	strd	r4, [sp, #56]	; 0x38
   14bb4:	ldrd	r2, [ip, #24]
   14bb8:	strd	r0, [sp, #48]	; 0x30
   14bbc:	ldrd	r0, [ip, #32]
   14bc0:	str	sl, [sp, #40]	; 0x28
   14bc4:	ldrd	r4, [ip, #40]	; 0x28
   14bc8:	strd	r2, [sp, #64]	; 0x40
   14bcc:	strd	r0, [sp, #72]	; 0x48
   14bd0:	strd	r4, [sp, #80]	; 0x50
   14bd4:	bne	14d64 <__assert_fail@plt+0x3ed8>
   14bd8:	movw	r5, #37096	; 0x90e8
   14bdc:	movt	r5, #2
   14be0:	str	r8, [sp, #80]	; 0x50
   14be4:	str	r7, [sp, #84]	; 0x54
   14be8:	bl	10dd8 <__errno_location@plt>
   14bec:	ldr	r3, [r0]
   14bf0:	mov	r9, r0
   14bf4:	ldr	r2, [r5, #4]
   14bf8:	ldr	r4, [r5]
   14bfc:	str	r3, [sp, #28]
   14c00:	cmp	r2, #0
   14c04:	movgt	r1, sl
   14c08:	bgt	14c70 <__assert_fail@plt+0x3de4>
   14c0c:	add	r3, r5, #8
   14c10:	str	r2, [sp, #36]	; 0x24
   14c14:	rsb	r2, r2, #1
   14c18:	cmp	r4, r3
   14c1c:	beq	14d38 <__assert_fail@plt+0x3eac>
   14c20:	mov	r1, #8
   14c24:	mov	r0, r4
   14c28:	mvn	r3, #-2147483648	; 0x80000000
   14c2c:	str	r1, [sp]
   14c30:	add	r1, sp, #36	; 0x24
   14c34:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14c38:	mov	r4, r0
   14c3c:	str	r0, [r5]
   14c40:	ldr	r0, [r5, #4]
   14c44:	mov	r1, #0
   14c48:	ldr	r2, [sp, #36]	; 0x24
   14c4c:	sub	r2, r2, r0
   14c50:	add	r0, r4, r0, lsl #3
   14c54:	lsl	r2, r2, #3
   14c58:	bl	10df0 <memset@plt>
   14c5c:	ldr	r3, [sp, #36]	; 0x24
   14c60:	ldr	r1, [sp, #40]	; 0x28
   14c64:	ldr	r8, [sp, #80]	; 0x50
   14c68:	str	r3, [r5, #4]
   14c6c:	ldr	r7, [sp, #84]	; 0x54
   14c70:	mvn	r3, #0
   14c74:	mov	r2, fp
   14c78:	ldr	r6, [sp, #44]	; 0x2c
   14c7c:	ldr	sl, [r4]
   14c80:	ldr	r5, [r4, #4]
   14c84:	orr	r6, r6, #1
   14c88:	stm	sp, {r1, r6}
   14c8c:	add	r1, sp, #48	; 0x30
   14c90:	str	r8, [sp, #12]
   14c94:	mov	r0, r5
   14c98:	str	r1, [sp, #8]
   14c9c:	mov	r1, sl
   14ca0:	str	r7, [sp, #16]
   14ca4:	bl	11a0c <__assert_fail@plt+0xb80>
   14ca8:	cmp	sl, r0
   14cac:	bhi	14d10 <__assert_fail@plt+0x3e84>
   14cb0:	add	r7, r0, #1
   14cb4:	movw	r3, #37204	; 0x9154
   14cb8:	movt	r3, #2
   14cbc:	cmp	r5, r3
   14cc0:	str	r7, [r4]
   14cc4:	beq	14cd0 <__assert_fail@plt+0x3e44>
   14cc8:	mov	r0, r5
   14ccc:	bl	172b0 <__assert_fail@plt+0x6424>
   14cd0:	mov	r0, r7
   14cd4:	bl	15a74 <__assert_fail@plt+0x4be8>
   14cd8:	ldr	r3, [sp, #40]	; 0x28
   14cdc:	mov	r2, fp
   14ce0:	mov	r1, r7
   14ce4:	mov	r5, r0
   14ce8:	ldr	lr, [sp, #80]	; 0x50
   14cec:	ldr	ip, [sp, #84]	; 0x54
   14cf0:	str	r0, [r4, #4]
   14cf4:	add	r4, sp, #48	; 0x30
   14cf8:	stm	sp, {r3, r6}
   14cfc:	mvn	r3, #0
   14d00:	str	r4, [sp, #8]
   14d04:	str	lr, [sp, #12]
   14d08:	str	ip, [sp, #16]
   14d0c:	bl	11a0c <__assert_fail@plt+0xb80>
   14d10:	ldr	r3, [sp, #28]
   14d14:	mov	r0, r5
   14d18:	str	r3, [r9]
   14d1c:	add	sp, sp, #92	; 0x5c
   14d20:	ldrd	r4, [sp]
   14d24:	ldrd	r6, [sp, #8]
   14d28:	ldrd	r8, [sp, #16]
   14d2c:	ldrd	sl, [sp, #24]
   14d30:	add	sp, sp, #32
   14d34:	pop	{pc}		; (ldr pc, [sp], #4)
   14d38:	mov	r1, #8
   14d3c:	mvn	r3, #-2147483648	; 0x80000000
   14d40:	mov	r0, r6
   14d44:	str	r1, [sp]
   14d48:	add	r1, sp, #36	; 0x24
   14d4c:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14d50:	ldrd	r2, [r5, #8]
   14d54:	mov	r4, r0
   14d58:	str	r0, [r5]
   14d5c:	strd	r2, [r0]
   14d60:	b	14c40 <__assert_fail@plt+0x3db4>
   14d64:	bl	10e80 <abort@plt>
   14d68:	andeq	r9, r2, r4, asr r2
   14d6c:	ldr	ip, [pc, #536]	; 14f8c <__assert_fail@plt+0x4100>
   14d70:	cmp	r0, #0
   14d74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d78:	ldrd	r4, [ip, #16]
   14d7c:	strd	r6, [sp, #8]
   14d80:	mov	r6, r1
   14d84:	mov	r7, r0
   14d88:	strd	r8, [sp, #16]
   14d8c:	mov	r9, #10
   14d90:	strd	sl, [sp, #24]
   14d94:	mov	sl, r2
   14d98:	mov	fp, r3
   14d9c:	str	lr, [sp, #32]
   14da0:	clz	lr, r1
   14da4:	sub	sp, sp, #92	; 0x5c
   14da8:	ldrd	r2, [ip]
   14dac:	lsr	lr, lr, #5
   14db0:	moveq	lr, #1
   14db4:	ldrd	r0, [ip, #8]
   14db8:	cmp	lr, #0
   14dbc:	strd	r4, [sp, #56]	; 0x38
   14dc0:	ldrd	r4, [ip, #40]	; 0x28
   14dc4:	str	lr, [sp, #28]
   14dc8:	strd	r2, [sp, #40]	; 0x28
   14dcc:	ldrd	r2, [ip, #24]
   14dd0:	strd	r0, [sp, #48]	; 0x30
   14dd4:	ldrd	r0, [ip, #32]
   14dd8:	str	r9, [sp, #40]	; 0x28
   14ddc:	strd	r2, [sp, #64]	; 0x40
   14de0:	strd	r4, [sp, #80]	; 0x50
   14de4:	strd	r0, [sp, #72]	; 0x48
   14de8:	bne	14f88 <__assert_fail@plt+0x40fc>
   14dec:	movw	r5, #37096	; 0x90e8
   14df0:	movt	r5, #2
   14df4:	str	r7, [sp, #80]	; 0x50
   14df8:	str	r6, [sp, #84]	; 0x54
   14dfc:	bl	10dd8 <__errno_location@plt>
   14e00:	ldr	r3, [r0]
   14e04:	mov	r8, r0
   14e08:	ldr	r2, [r5, #4]
   14e0c:	ldr	r4, [r5]
   14e10:	str	r3, [sp, #24]
   14e14:	cmp	r2, #0
   14e18:	movgt	r1, r9
   14e1c:	bgt	14e84 <__assert_fail@plt+0x3ff8>
   14e20:	add	r3, r5, #8
   14e24:	str	r2, [sp, #36]	; 0x24
   14e28:	rsb	r2, r2, #1
   14e2c:	cmp	r4, r3
   14e30:	beq	14f5c <__assert_fail@plt+0x40d0>
   14e34:	mov	r1, #8
   14e38:	mov	r0, r4
   14e3c:	mvn	r3, #-2147483648	; 0x80000000
   14e40:	str	r1, [sp]
   14e44:	add	r1, sp, #36	; 0x24
   14e48:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14e4c:	mov	r4, r0
   14e50:	str	r0, [r5]
   14e54:	ldr	r0, [r5, #4]
   14e58:	mov	r1, #0
   14e5c:	ldr	r2, [sp, #36]	; 0x24
   14e60:	sub	r2, r2, r0
   14e64:	add	r0, r4, r0, lsl #3
   14e68:	lsl	r2, r2, #3
   14e6c:	bl	10df0 <memset@plt>
   14e70:	ldr	r3, [sp, #36]	; 0x24
   14e74:	ldr	r1, [sp, #40]	; 0x28
   14e78:	ldr	r7, [sp, #80]	; 0x50
   14e7c:	str	r3, [r5, #4]
   14e80:	ldr	r6, [sp, #84]	; 0x54
   14e84:	mov	r3, fp
   14e88:	mov	r2, sl
   14e8c:	ldr	r0, [sp, #44]	; 0x2c
   14e90:	ldr	r9, [r4]
   14e94:	ldr	r5, [r4, #4]
   14e98:	orr	r0, r0, #1
   14e9c:	str	r1, [sp]
   14ea0:	add	r1, sp, #48	; 0x30
   14ea4:	str	r0, [sp, #4]
   14ea8:	str	r1, [sp, #8]
   14eac:	mov	r1, r9
   14eb0:	str	r7, [sp, #12]
   14eb4:	str	r6, [sp, #16]
   14eb8:	str	r0, [sp, #28]
   14ebc:	mov	r0, r5
   14ec0:	bl	11a0c <__assert_fail@plt+0xb80>
   14ec4:	cmp	r9, r0
   14ec8:	bhi	14f34 <__assert_fail@plt+0x40a8>
   14ecc:	add	r6, r0, #1
   14ed0:	movw	r3, #37204	; 0x9154
   14ed4:	movt	r3, #2
   14ed8:	cmp	r5, r3
   14edc:	str	r6, [r4]
   14ee0:	beq	14eec <__assert_fail@plt+0x4060>
   14ee4:	mov	r0, r5
   14ee8:	bl	172b0 <__assert_fail@plt+0x6424>
   14eec:	mov	r0, r6
   14ef0:	bl	15a74 <__assert_fail@plt+0x4be8>
   14ef4:	ldr	lr, [sp, #40]	; 0x28
   14ef8:	mov	r1, r6
   14efc:	mov	r3, fp
   14f00:	mov	r2, sl
   14f04:	mov	r5, r0
   14f08:	ldr	r6, [sp, #80]	; 0x50
   14f0c:	ldr	ip, [sp, #84]	; 0x54
   14f10:	str	r0, [r4, #4]
   14f14:	str	lr, [sp]
   14f18:	ldr	lr, [sp, #28]
   14f1c:	str	lr, [sp, #4]
   14f20:	add	lr, sp, #48	; 0x30
   14f24:	str	r6, [sp, #12]
   14f28:	str	lr, [sp, #8]
   14f2c:	str	ip, [sp, #16]
   14f30:	bl	11a0c <__assert_fail@plt+0xb80>
   14f34:	ldr	r3, [sp, #24]
   14f38:	mov	r0, r5
   14f3c:	str	r3, [r8]
   14f40:	add	sp, sp, #92	; 0x5c
   14f44:	ldrd	r4, [sp]
   14f48:	ldrd	r6, [sp, #8]
   14f4c:	ldrd	r8, [sp, #16]
   14f50:	ldrd	sl, [sp, #24]
   14f54:	add	sp, sp, #32
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	mov	r1, #8
   14f60:	mvn	r3, #-2147483648	; 0x80000000
   14f64:	ldr	r0, [sp, #28]
   14f68:	str	r1, [sp]
   14f6c:	add	r1, sp, #36	; 0x24
   14f70:	bl	15d18 <__assert_fail@plt+0x4e8c>
   14f74:	ldrd	r2, [r5, #8]
   14f78:	mov	r4, r0
   14f7c:	str	r0, [r5]
   14f80:	strd	r2, [r0]
   14f84:	b	14e54 <__assert_fail@plt+0x3fc8>
   14f88:	bl	10e80 <abort@plt>
   14f8c:	andeq	r9, r2, r4, asr r2
   14f90:	ldr	r3, [pc]	; 14f98 <__assert_fail@plt+0x410c>
   14f94:	b	133f8 <__assert_fail@plt+0x256c>
   14f98:	strdeq	r9, [r2], -r8
   14f9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fa0:	movw	r4, #37096	; 0x90e8
   14fa4:	movt	r4, #2
   14fa8:	strd	r6, [sp, #8]
   14fac:	strd	r8, [sp, #16]
   14fb0:	strd	sl, [sp, #24]
   14fb4:	mov	sl, r0
   14fb8:	mov	fp, r1
   14fbc:	str	lr, [sp, #32]
   14fc0:	sub	sp, sp, #44	; 0x2c
   14fc4:	bl	10dd8 <__errno_location@plt>
   14fc8:	ldr	r3, [r0]
   14fcc:	mov	r8, r0
   14fd0:	ldr	r2, [r4, #4]
   14fd4:	ldr	r5, [r4]
   14fd8:	str	r3, [sp, #28]
   14fdc:	cmp	r2, #0
   14fe0:	bgt	1503c <__assert_fail@plt+0x41b0>
   14fe4:	add	r3, r4, #8
   14fe8:	str	r2, [sp, #36]	; 0x24
   14fec:	rsb	r2, r2, #1
   14ff0:	cmp	r5, r3
   14ff4:	beq	15118 <__assert_fail@plt+0x428c>
   14ff8:	mov	r1, #8
   14ffc:	mov	r0, r5
   15000:	mvn	r3, #-2147483648	; 0x80000000
   15004:	str	r1, [sp]
   15008:	add	r1, sp, #36	; 0x24
   1500c:	bl	15d18 <__assert_fail@plt+0x4e8c>
   15010:	mov	r5, r0
   15014:	str	r0, [r4]
   15018:	ldr	r0, [r4, #4]
   1501c:	mov	r1, #0
   15020:	ldr	r2, [sp, #36]	; 0x24
   15024:	sub	r2, r2, r0
   15028:	add	r0, r5, r0, lsl #3
   1502c:	lsl	r2, r2, #3
   15030:	bl	10df0 <memset@plt>
   15034:	ldr	r3, [sp, #36]	; 0x24
   15038:	str	r3, [r4, #4]
   1503c:	ldr	ip, [r4, #16]
   15040:	mov	r3, fp
   15044:	mov	r2, sl
   15048:	ldr	r7, [r4, #20]
   1504c:	ldr	r0, [pc, #240]	; 15144 <__assert_fail@plt+0x42b8>
   15050:	ldr	r9, [r5]
   15054:	orr	r7, r7, #1
   15058:	ldr	r6, [r5, #4]
   1505c:	str	ip, [sp]
   15060:	ldr	ip, [r4, #56]	; 0x38
   15064:	mov	r1, r9
   15068:	str	r7, [sp, #4]
   1506c:	ldr	lr, [r4, #60]	; 0x3c
   15070:	str	r0, [sp, #8]
   15074:	mov	r0, r6
   15078:	str	ip, [sp, #12]
   1507c:	str	lr, [sp, #16]
   15080:	bl	11a0c <__assert_fail@plt+0xb80>
   15084:	cmp	r9, r0
   15088:	bhi	150f0 <__assert_fail@plt+0x4264>
   1508c:	add	r9, r0, #1
   15090:	movw	r3, #37204	; 0x9154
   15094:	movt	r3, #2
   15098:	cmp	r6, r3
   1509c:	str	r9, [r5]
   150a0:	beq	150ac <__assert_fail@plt+0x4220>
   150a4:	mov	r0, r6
   150a8:	bl	172b0 <__assert_fail@plt+0x6424>
   150ac:	mov	r0, r9
   150b0:	bl	15a74 <__assert_fail@plt+0x4be8>
   150b4:	ldr	ip, [r4, #16]
   150b8:	mov	r1, r9
   150bc:	mov	r3, fp
   150c0:	mov	r2, sl
   150c4:	mov	r6, r0
   150c8:	ldr	r9, [r4, #56]	; 0x38
   150cc:	ldr	lr, [r4, #60]	; 0x3c
   150d0:	str	r0, [r5, #4]
   150d4:	str	ip, [sp]
   150d8:	ldr	ip, [pc, #100]	; 15144 <__assert_fail@plt+0x42b8>
   150dc:	str	r7, [sp, #4]
   150e0:	str	ip, [sp, #8]
   150e4:	str	r9, [sp, #12]
   150e8:	str	lr, [sp, #16]
   150ec:	bl	11a0c <__assert_fail@plt+0xb80>
   150f0:	ldr	r3, [sp, #28]
   150f4:	mov	r0, r6
   150f8:	str	r3, [r8]
   150fc:	add	sp, sp, #44	; 0x2c
   15100:	ldrd	r4, [sp]
   15104:	ldrd	r6, [sp, #8]
   15108:	ldrd	r8, [sp, #16]
   1510c:	ldrd	sl, [sp, #24]
   15110:	add	sp, sp, #32
   15114:	pop	{pc}		; (ldr pc, [sp], #4)
   15118:	mov	r0, #8
   1511c:	mvn	r3, #-2147483648	; 0x80000000
   15120:	add	r1, sp, #36	; 0x24
   15124:	str	r0, [sp]
   15128:	mov	r0, #0
   1512c:	bl	15d18 <__assert_fail@plt+0x4e8c>
   15130:	ldrd	r2, [r4, #8]
   15134:	mov	r5, r0
   15138:	str	r0, [r4]
   1513c:	strd	r2, [r0]
   15140:	b	15018 <__assert_fail@plt+0x418c>
   15144:	andeq	r9, r2, r0, lsl #2
   15148:	ldr	r3, [pc, #4]	; 15154 <__assert_fail@plt+0x42c8>
   1514c:	mvn	r2, #0
   15150:	b	133f8 <__assert_fail@plt+0x256c>
   15154:	strdeq	r9, [r2], -r8
   15158:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1515c:	movw	r4, #37096	; 0x90e8
   15160:	movt	r4, #2
   15164:	strd	r6, [sp, #8]
   15168:	strd	r8, [sp, #16]
   1516c:	strd	sl, [sp, #24]
   15170:	mov	sl, r0
   15174:	str	lr, [sp, #32]
   15178:	sub	sp, sp, #44	; 0x2c
   1517c:	bl	10dd8 <__errno_location@plt>
   15180:	ldr	r3, [r0]
   15184:	mov	r8, r0
   15188:	ldr	r2, [r4, #4]
   1518c:	ldr	r5, [r4]
   15190:	str	r3, [sp, #28]
   15194:	cmp	r2, #0
   15198:	bgt	151f4 <__assert_fail@plt+0x4368>
   1519c:	add	r3, r4, #8
   151a0:	str	r2, [sp, #36]	; 0x24
   151a4:	rsb	r2, r2, #1
   151a8:	cmp	r5, r3
   151ac:	beq	152bc <__assert_fail@plt+0x4430>
   151b0:	mov	r1, #8
   151b4:	mov	r0, r5
   151b8:	mvn	r3, #-2147483648	; 0x80000000
   151bc:	str	r1, [sp]
   151c0:	add	r1, sp, #36	; 0x24
   151c4:	bl	15d18 <__assert_fail@plt+0x4e8c>
   151c8:	mov	r5, r0
   151cc:	str	r0, [r4]
   151d0:	ldr	r0, [r4, #4]
   151d4:	mov	r1, #0
   151d8:	ldr	r2, [sp, #36]	; 0x24
   151dc:	sub	r2, r2, r0
   151e0:	add	r0, r5, r0, lsl #3
   151e4:	lsl	r2, r2, #3
   151e8:	bl	10df0 <memset@plt>
   151ec:	ldr	r3, [sp, #36]	; 0x24
   151f0:	str	r3, [r4, #4]
   151f4:	ldr	ip, [r4, #16]
   151f8:	mvn	r3, #0
   151fc:	mov	r2, sl
   15200:	ldr	r7, [r4, #20]
   15204:	ldr	fp, [pc, #220]	; 152e8 <__assert_fail@plt+0x445c>
   15208:	ldr	r9, [r5]
   1520c:	orr	r7, r7, #1
   15210:	ldr	r6, [r5, #4]
   15214:	str	ip, [sp]
   15218:	ldr	ip, [r4, #56]	; 0x38
   1521c:	mov	r1, r9
   15220:	stmib	sp, {r7, fp}
   15224:	ldr	lr, [r4, #60]	; 0x3c
   15228:	mov	r0, r6
   1522c:	str	ip, [sp, #12]
   15230:	str	lr, [sp, #16]
   15234:	bl	11a0c <__assert_fail@plt+0xb80>
   15238:	cmp	r9, r0
   1523c:	bhi	15294 <__assert_fail@plt+0x4408>
   15240:	add	r9, r0, #1
   15244:	movw	r3, #37204	; 0x9154
   15248:	movt	r3, #2
   1524c:	cmp	r6, r3
   15250:	str	r9, [r5]
   15254:	beq	15260 <__assert_fail@plt+0x43d4>
   15258:	mov	r0, r6
   1525c:	bl	172b0 <__assert_fail@plt+0x6424>
   15260:	mov	r0, r9
   15264:	bl	15a74 <__assert_fail@plt+0x4be8>
   15268:	ldr	r3, [r4, #16]
   1526c:	mov	r2, sl
   15270:	mov	r1, r9
   15274:	mov	r6, r0
   15278:	ldr	lr, [r4, #56]	; 0x38
   1527c:	ldr	ip, [r4, #60]	; 0x3c
   15280:	str	r0, [r5, #4]
   15284:	stm	sp, {r3, r7, fp, lr}
   15288:	mvn	r3, #0
   1528c:	str	ip, [sp, #16]
   15290:	bl	11a0c <__assert_fail@plt+0xb80>
   15294:	ldr	r3, [sp, #28]
   15298:	mov	r0, r6
   1529c:	str	r3, [r8]
   152a0:	add	sp, sp, #44	; 0x2c
   152a4:	ldrd	r4, [sp]
   152a8:	ldrd	r6, [sp, #8]
   152ac:	ldrd	r8, [sp, #16]
   152b0:	ldrd	sl, [sp, #24]
   152b4:	add	sp, sp, #32
   152b8:	pop	{pc}		; (ldr pc, [sp], #4)
   152bc:	mov	r0, #8
   152c0:	mvn	r3, #-2147483648	; 0x80000000
   152c4:	add	r1, sp, #36	; 0x24
   152c8:	str	r0, [sp]
   152cc:	mov	r0, #0
   152d0:	bl	15d18 <__assert_fail@plt+0x4e8c>
   152d4:	ldrd	r2, [r4, #8]
   152d8:	mov	r5, r0
   152dc:	str	r0, [r4]
   152e0:	strd	r2, [r0]
   152e4:	b	151d0 <__assert_fail@plt+0x4344>
   152e8:	andeq	r9, r2, r0, lsl #2
   152ec:	cmp	r1, #0
   152f0:	strd	r4, [sp, #-16]!
   152f4:	mov	ip, r3
   152f8:	str	r6, [sp, #8]
   152fc:	mov	r4, r0
   15300:	str	lr, [sp, #12]
   15304:	sub	sp, sp, #32
   15308:	ldr	r5, [sp, #48]	; 0x30
   1530c:	ldr	r6, [sp, #52]	; 0x34
   15310:	beq	15454 <__assert_fail@plt+0x45c8>
   15314:	mov	r3, r1
   15318:	mov	r1, #1
   1531c:	stm	sp, {r2, ip}
   15320:	movw	r2, #31700	; 0x7bd4
   15324:	movt	r2, #1
   15328:	bl	10e14 <__fprintf_chk@plt>
   1532c:	mov	r2, #5
   15330:	movw	r1, #31720	; 0x7be8
   15334:	movt	r1, #1
   15338:	mov	r0, #0
   1533c:	bl	10cd0 <dcgettext@plt>
   15340:	movw	ip, #2022	; 0x7e6
   15344:	mov	r3, r0
   15348:	mov	r1, #1
   1534c:	movw	r2, #32448	; 0x7ec0
   15350:	movt	r2, #1
   15354:	mov	r0, r4
   15358:	str	ip, [sp]
   1535c:	bl	10e14 <__fprintf_chk@plt>
   15360:	mov	r1, r4
   15364:	mov	r0, #10
   15368:	bl	10cc4 <fputc_unlocked@plt>
   1536c:	mov	r2, #5
   15370:	movw	r1, #31724	; 0x7bec
   15374:	movt	r1, #1
   15378:	mov	r0, #0
   1537c:	bl	10cd0 <dcgettext@plt>
   15380:	mov	r2, r0
   15384:	mov	r1, #1
   15388:	movw	r3, #31896	; 0x7c98
   1538c:	movt	r3, #1
   15390:	mov	r0, r4
   15394:	bl	10e14 <__fprintf_chk@plt>
   15398:	mov	r1, r4
   1539c:	mov	r0, #10
   153a0:	bl	10cc4 <fputc_unlocked@plt>
   153a4:	cmp	r6, #9
   153a8:	ldrls	pc, [pc, r6, lsl #2]
   153ac:	b	156c0 <__assert_fail@plt+0x4834>
   153b0:	andeq	r5, r1, r0, asr #8
   153b4:	andeq	r5, r1, r0, ror r4
   153b8:	andeq	r5, r1, ip, lsr #9
   153bc:	andeq	r5, r1, ip, ror #9
   153c0:	andeq	r5, r1, r4, lsr r5
   153c4:	andeq	r5, r1, ip, ror #10
   153c8:			; <UNDEFINED> instruction: 0x000155b4
   153cc:	andeq	r5, r1, r8, lsl #12
   153d0:	andeq	r5, r1, r0, ror #12
   153d4:	ldrdeq	r5, [r1], -r8
   153d8:	movw	r1, #32200	; 0x7dc8
   153dc:	movt	r1, #1
   153e0:	mov	r2, #5
   153e4:	mov	r0, #0
   153e8:	bl	10cd0 <dcgettext@plt>
   153ec:	ldr	lr, [r5, #4]
   153f0:	mov	r2, r0
   153f4:	mov	r1, #1
   153f8:	mov	r0, r4
   153fc:	ldr	r3, [r5, #8]
   15400:	ldr	ip, [r5, #32]
   15404:	str	lr, [sp]
   15408:	ldr	lr, [r5, #12]
   1540c:	str	ip, [sp, #28]
   15410:	ldr	ip, [r5, #28]
   15414:	str	r3, [sp, #4]
   15418:	ldr	r3, [r5, #16]
   1541c:	str	lr, [sp, #8]
   15420:	ldr	lr, [r5, #20]
   15424:	str	ip, [sp, #24]
   15428:	ldr	ip, [r5, #24]
   1542c:	str	r3, [sp, #12]
   15430:	ldr	r3, [r5]
   15434:	str	lr, [sp, #16]
   15438:	str	ip, [sp, #20]
   1543c:	bl	10e14 <__fprintf_chk@plt>
   15440:	add	sp, sp, #32
   15444:	ldrd	r4, [sp]
   15448:	ldr	r6, [sp, #8]
   1544c:	add	sp, sp, #12
   15450:	pop	{pc}		; (ldr pc, [sp], #4)
   15454:	mov	r3, r2
   15458:	mov	r1, #1
   1545c:	str	ip, [sp]
   15460:	movw	r2, #31712	; 0x7be0
   15464:	movt	r2, #1
   15468:	bl	10e14 <__fprintf_chk@plt>
   1546c:	b	1532c <__assert_fail@plt+0x44a0>
   15470:	mov	r2, #5
   15474:	movw	r1, #31932	; 0x7cbc
   15478:	movt	r1, #1
   1547c:	mov	r0, #0
   15480:	bl	10cd0 <dcgettext@plt>
   15484:	ldr	r3, [r5]
   15488:	mov	r2, r0
   1548c:	mov	r1, #1
   15490:	mov	r0, r4
   15494:	add	sp, sp, #32
   15498:	ldrd	r4, [sp]
   1549c:	ldr	r6, [sp, #8]
   154a0:	ldr	lr, [sp, #12]
   154a4:	add	sp, sp, #16
   154a8:	b	10e14 <__fprintf_chk@plt>
   154ac:	mov	r2, #5
   154b0:	movw	r1, #31948	; 0x7ccc
   154b4:	movt	r1, #1
   154b8:	mov	r0, #0
   154bc:	bl	10cd0 <dcgettext@plt>
   154c0:	ldm	r5, {r3, ip}
   154c4:	mov	r2, r0
   154c8:	mov	r1, #1
   154cc:	mov	r0, r4
   154d0:	str	ip, [sp, #48]	; 0x30
   154d4:	add	sp, sp, #32
   154d8:	ldrd	r4, [sp]
   154dc:	ldr	r6, [sp, #8]
   154e0:	ldr	lr, [sp, #12]
   154e4:	add	sp, sp, #16
   154e8:	b	10e14 <__fprintf_chk@plt>
   154ec:	mov	r2, #5
   154f0:	movw	r1, #31972	; 0x7ce4
   154f4:	movt	r1, #1
   154f8:	mov	r0, #0
   154fc:	bl	10cd0 <dcgettext@plt>
   15500:	ldm	r5, {r3, lr}
   15504:	mov	r2, r0
   15508:	mov	r1, #1
   1550c:	mov	r0, r4
   15510:	ldr	ip, [r5, #8]
   15514:	str	lr, [sp, #48]	; 0x30
   15518:	str	ip, [sp, #52]	; 0x34
   1551c:	add	sp, sp, #32
   15520:	ldrd	r4, [sp]
   15524:	ldr	r6, [sp, #8]
   15528:	ldr	lr, [sp, #12]
   1552c:	add	sp, sp, #16
   15530:	b	10e14 <__fprintf_chk@plt>
   15534:	mov	r2, #5
   15538:	movw	r1, #32000	; 0x7d00
   1553c:	movt	r1, #1
   15540:	mov	r0, #0
   15544:	bl	10cd0 <dcgettext@plt>
   15548:	ldmib	r5, {r3, ip, lr}
   1554c:	mov	r2, r0
   15550:	mov	r1, #1
   15554:	mov	r0, r4
   15558:	str	r3, [sp]
   1555c:	ldr	r3, [r5]
   15560:	stmib	sp, {ip, lr}
   15564:	bl	10e14 <__fprintf_chk@plt>
   15568:	b	15440 <__assert_fail@plt+0x45b4>
   1556c:	mov	r2, #5
   15570:	movw	r1, #32032	; 0x7d20
   15574:	movt	r1, #1
   15578:	mov	r0, #0
   1557c:	bl	10cd0 <dcgettext@plt>
   15580:	ldmib	r5, {ip, lr}
   15584:	mov	r2, r0
   15588:	mov	r1, #1
   1558c:	mov	r0, r4
   15590:	ldr	r3, [r5, #16]
   15594:	str	ip, [sp]
   15598:	ldr	ip, [r5, #12]
   1559c:	str	r3, [sp, #12]
   155a0:	ldr	r3, [r5]
   155a4:	str	lr, [sp, #4]
   155a8:	str	ip, [sp, #8]
   155ac:	bl	10e14 <__fprintf_chk@plt>
   155b0:	b	15440 <__assert_fail@plt+0x45b4>
   155b4:	mov	r2, #5
   155b8:	movw	r1, #32068	; 0x7d44
   155bc:	movt	r1, #1
   155c0:	mov	r0, #0
   155c4:	bl	10cd0 <dcgettext@plt>
   155c8:	ldr	lr, [r5, #4]
   155cc:	mov	r2, r0
   155d0:	mov	r1, #1
   155d4:	mov	r0, r4
   155d8:	ldr	r3, [r5, #8]
   155dc:	ldr	ip, [r5, #20]
   155e0:	str	lr, [sp]
   155e4:	ldr	lr, [r5, #12]
   155e8:	str	ip, [sp, #16]
   155ec:	ldr	ip, [r5, #16]
   155f0:	str	r3, [sp, #4]
   155f4:	ldr	r3, [r5]
   155f8:	str	lr, [sp, #8]
   155fc:	str	ip, [sp, #12]
   15600:	bl	10e14 <__fprintf_chk@plt>
   15604:	b	15440 <__assert_fail@plt+0x45b4>
   15608:	mov	r2, #5
   1560c:	movw	r1, #32108	; 0x7d6c
   15610:	movt	r1, #1
   15614:	mov	r0, #0
   15618:	bl	10cd0 <dcgettext@plt>
   1561c:	ldmib	r5, {r3, ip}
   15620:	mov	r2, r0
   15624:	mov	r1, #1
   15628:	mov	r0, r4
   1562c:	ldr	lr, [r5, #24]
   15630:	str	r3, [sp]
   15634:	ldr	r3, [r5, #12]
   15638:	str	lr, [sp, #20]
   1563c:	ldr	lr, [r5, #20]
   15640:	str	ip, [sp, #4]
   15644:	ldr	ip, [r5, #16]
   15648:	str	r3, [sp, #8]
   1564c:	ldr	r3, [r5]
   15650:	str	ip, [sp, #12]
   15654:	str	lr, [sp, #16]
   15658:	bl	10e14 <__fprintf_chk@plt>
   1565c:	b	15440 <__assert_fail@plt+0x45b4>
   15660:	mov	r2, #5
   15664:	movw	r1, #32152	; 0x7d98
   15668:	movt	r1, #1
   1566c:	mov	r0, #0
   15670:	bl	10cd0 <dcgettext@plt>
   15674:	ldmib	r5, {ip, lr}
   15678:	mov	r2, r0
   1567c:	mov	r1, #1
   15680:	mov	r0, r4
   15684:	ldr	r3, [r5, #28]
   15688:	str	ip, [sp]
   1568c:	ldr	ip, [r5, #12]
   15690:	str	r3, [sp, #24]
   15694:	ldr	r3, [r5, #24]
   15698:	str	lr, [sp, #4]
   1569c:	ldr	lr, [r5, #16]
   156a0:	str	ip, [sp, #8]
   156a4:	ldr	ip, [r5, #20]
   156a8:	str	r3, [sp, #20]
   156ac:	ldr	r3, [r5]
   156b0:	str	lr, [sp, #12]
   156b4:	str	ip, [sp, #16]
   156b8:	bl	10e14 <__fprintf_chk@plt>
   156bc:	b	15440 <__assert_fail@plt+0x45b4>
   156c0:	movw	r1, #32252	; 0x7dfc
   156c4:	movt	r1, #1
   156c8:	b	153e0 <__assert_fail@plt+0x4554>
   156cc:	strd	r4, [sp, #-12]!
   156d0:	str	lr, [sp, #8]
   156d4:	sub	sp, sp, #12
   156d8:	ldr	r5, [sp, #24]
   156dc:	ldr	ip, [r5]
   156e0:	cmp	ip, #0
   156e4:	beq	15700 <__assert_fail@plt+0x4874>
   156e8:	mov	lr, r5
   156ec:	mov	ip, #0
   156f0:	ldr	r4, [lr, #4]!
   156f4:	add	ip, ip, #1
   156f8:	cmp	r4, #0
   156fc:	bne	156f0 <__assert_fail@plt+0x4864>
   15700:	stm	sp, {r5, ip}
   15704:	bl	152ec <__assert_fail@plt+0x4460>
   15708:	add	sp, sp, #12
   1570c:	ldrd	r4, [sp]
   15710:	add	sp, sp, #8
   15714:	pop	{pc}		; (ldr pc, [sp], #4)
   15718:	push	{lr}		; (str lr, [sp, #-4]!)
   1571c:	sub	sp, sp, #52	; 0x34
   15720:	ldr	ip, [sp, #56]	; 0x38
   15724:	ldr	lr, [ip]
   15728:	cmp	lr, #0
   1572c:	str	lr, [sp, #8]
   15730:	beq	157c8 <__assert_fail@plt+0x493c>
   15734:	ldr	lr, [ip, #4]
   15738:	cmp	lr, #0
   1573c:	str	lr, [sp, #12]
   15740:	beq	157dc <__assert_fail@plt+0x4950>
   15744:	ldr	lr, [ip, #8]
   15748:	cmp	lr, #0
   1574c:	str	lr, [sp, #16]
   15750:	beq	157e4 <__assert_fail@plt+0x4958>
   15754:	ldr	lr, [ip, #12]
   15758:	cmp	lr, #0
   1575c:	str	lr, [sp, #20]
   15760:	beq	157ec <__assert_fail@plt+0x4960>
   15764:	ldr	lr, [ip, #16]
   15768:	cmp	lr, #0
   1576c:	str	lr, [sp, #24]
   15770:	beq	157f4 <__assert_fail@plt+0x4968>
   15774:	ldr	lr, [ip, #20]
   15778:	cmp	lr, #0
   1577c:	str	lr, [sp, #28]
   15780:	beq	157fc <__assert_fail@plt+0x4970>
   15784:	ldr	lr, [ip, #24]
   15788:	cmp	lr, #0
   1578c:	str	lr, [sp, #32]
   15790:	beq	15804 <__assert_fail@plt+0x4978>
   15794:	ldr	lr, [ip, #28]
   15798:	cmp	lr, #0
   1579c:	str	lr, [sp, #36]	; 0x24
   157a0:	beq	1580c <__assert_fail@plt+0x4980>
   157a4:	ldr	lr, [ip, #32]
   157a8:	cmp	lr, #0
   157ac:	str	lr, [sp, #40]	; 0x28
   157b0:	beq	15814 <__assert_fail@plt+0x4988>
   157b4:	ldr	ip, [ip, #36]	; 0x24
   157b8:	cmp	ip, #0
   157bc:	str	ip, [sp, #44]	; 0x2c
   157c0:	movne	lr, #10
   157c4:	moveq	lr, #9
   157c8:	add	ip, sp, #8
   157cc:	stm	sp, {ip, lr}
   157d0:	bl	152ec <__assert_fail@plt+0x4460>
   157d4:	add	sp, sp, #52	; 0x34
   157d8:	pop	{pc}		; (ldr pc, [sp], #4)
   157dc:	mov	lr, #1
   157e0:	b	157c8 <__assert_fail@plt+0x493c>
   157e4:	mov	lr, #2
   157e8:	b	157c8 <__assert_fail@plt+0x493c>
   157ec:	mov	lr, #3
   157f0:	b	157c8 <__assert_fail@plt+0x493c>
   157f4:	mov	lr, #4
   157f8:	b	157c8 <__assert_fail@plt+0x493c>
   157fc:	mov	lr, #5
   15800:	b	157c8 <__assert_fail@plt+0x493c>
   15804:	mov	lr, #6
   15808:	b	157c8 <__assert_fail@plt+0x493c>
   1580c:	mov	lr, #7
   15810:	b	157c8 <__assert_fail@plt+0x493c>
   15814:	mov	lr, #8
   15818:	b	157c8 <__assert_fail@plt+0x493c>
   1581c:	push	{r3}		; (str r3, [sp, #-4]!)
   15820:	push	{lr}		; (str lr, [sp, #-4]!)
   15824:	sub	sp, sp, #56	; 0x38
   15828:	ldr	ip, [sp, #64]	; 0x40
   1582c:	add	r3, sp, #64	; 0x40
   15830:	str	r3, [sp, #12]
   15834:	cmp	ip, #0
   15838:	str	ip, [sp, #16]
   1583c:	beq	158d4 <__assert_fail@plt+0x4a48>
   15840:	ldr	ip, [sp, #68]	; 0x44
   15844:	cmp	ip, #0
   15848:	str	ip, [sp, #20]
   1584c:	beq	158f8 <__assert_fail@plt+0x4a6c>
   15850:	ldr	ip, [sp, #72]	; 0x48
   15854:	cmp	ip, #0
   15858:	str	ip, [sp, #24]
   1585c:	beq	15900 <__assert_fail@plt+0x4a74>
   15860:	ldr	ip, [sp, #76]	; 0x4c
   15864:	cmp	ip, #0
   15868:	str	ip, [sp, #28]
   1586c:	beq	15908 <__assert_fail@plt+0x4a7c>
   15870:	ldr	ip, [sp, #80]	; 0x50
   15874:	cmp	ip, #0
   15878:	str	ip, [sp, #32]
   1587c:	beq	15910 <__assert_fail@plt+0x4a84>
   15880:	ldr	ip, [sp, #84]	; 0x54
   15884:	cmp	ip, #0
   15888:	str	ip, [sp, #36]	; 0x24
   1588c:	beq	15918 <__assert_fail@plt+0x4a8c>
   15890:	ldr	ip, [sp, #88]	; 0x58
   15894:	cmp	ip, #0
   15898:	str	ip, [sp, #40]	; 0x28
   1589c:	beq	15920 <__assert_fail@plt+0x4a94>
   158a0:	ldr	ip, [sp, #92]	; 0x5c
   158a4:	cmp	ip, #0
   158a8:	str	ip, [sp, #44]	; 0x2c
   158ac:	beq	15928 <__assert_fail@plt+0x4a9c>
   158b0:	ldr	ip, [sp, #96]	; 0x60
   158b4:	cmp	ip, #0
   158b8:	str	ip, [sp, #48]	; 0x30
   158bc:	beq	15930 <__assert_fail@plt+0x4aa4>
   158c0:	ldr	r3, [sp, #100]	; 0x64
   158c4:	cmp	r3, #0
   158c8:	str	r3, [sp, #52]	; 0x34
   158cc:	movne	ip, #10
   158d0:	moveq	ip, #9
   158d4:	ldr	r3, [sp, #60]	; 0x3c
   158d8:	add	lr, sp, #16
   158dc:	str	lr, [sp]
   158e0:	str	ip, [sp, #4]
   158e4:	bl	152ec <__assert_fail@plt+0x4460>
   158e8:	add	sp, sp, #56	; 0x38
   158ec:	pop	{lr}		; (ldr lr, [sp], #4)
   158f0:	add	sp, sp, #4
   158f4:	bx	lr
   158f8:	mov	ip, #1
   158fc:	b	158d4 <__assert_fail@plt+0x4a48>
   15900:	mov	ip, #2
   15904:	b	158d4 <__assert_fail@plt+0x4a48>
   15908:	mov	ip, #3
   1590c:	b	158d4 <__assert_fail@plt+0x4a48>
   15910:	mov	ip, #4
   15914:	b	158d4 <__assert_fail@plt+0x4a48>
   15918:	mov	ip, #5
   1591c:	b	158d4 <__assert_fail@plt+0x4a48>
   15920:	mov	ip, #6
   15924:	b	158d4 <__assert_fail@plt+0x4a48>
   15928:	mov	ip, #7
   1592c:	b	158d4 <__assert_fail@plt+0x4a48>
   15930:	mov	ip, #8
   15934:	b	158d4 <__assert_fail@plt+0x4a48>
   15938:	movw	r3, #37180	; 0x913c
   1593c:	movt	r3, #2
   15940:	str	r4, [sp, #-8]!
   15944:	mov	r0, #10
   15948:	ldr	r1, [r3]
   1594c:	str	lr, [sp, #4]
   15950:	bl	10cc4 <fputc_unlocked@plt>
   15954:	mov	r2, #5
   15958:	movw	r1, #32312	; 0x7e38
   1595c:	movt	r1, #1
   15960:	mov	r0, #0
   15964:	bl	10cd0 <dcgettext@plt>
   15968:	mov	r1, r0
   1596c:	movw	r2, #32332	; 0x7e4c
   15970:	movt	r2, #1
   15974:	mov	r0, #1
   15978:	bl	10dfc <__printf_chk@plt>
   1597c:	mov	r2, #5
   15980:	movw	r1, #32356	; 0x7e64
   15984:	movt	r1, #1
   15988:	mov	r0, #0
   1598c:	bl	10cd0 <dcgettext@plt>
   15990:	mov	r1, r0
   15994:	movw	r3, #30912	; 0x78c0
   15998:	movt	r3, #1
   1599c:	movw	r2, #30952	; 0x78e8
   159a0:	movt	r2, #1
   159a4:	mov	r0, #1
   159a8:	bl	10dfc <__printf_chk@plt>
   159ac:	mov	r2, #5
   159b0:	movw	r1, #32376	; 0x7e78
   159b4:	movt	r1, #1
   159b8:	mov	r0, #0
   159bc:	bl	10cd0 <dcgettext@plt>
   159c0:	mov	r1, r0
   159c4:	movw	r2, #32416	; 0x7ea0
   159c8:	movt	r2, #1
   159cc:	mov	r0, #1
   159d0:	ldr	r4, [sp]
   159d4:	ldr	lr, [sp, #4]
   159d8:	add	sp, sp, #8
   159dc:	b	10dfc <__printf_chk@plt>
   159e0:	strd	r4, [sp, #-16]!
   159e4:	mov	r4, r0
   159e8:	mov	r5, r2
   159ec:	str	r6, [sp, #8]
   159f0:	mov	r6, r1
   159f4:	str	lr, [sp, #12]
   159f8:	bl	1749c <__assert_fail@plt+0x6610>
   159fc:	cmp	r0, #0
   15a00:	beq	15a14 <__assert_fail@plt+0x4b88>
   15a04:	ldrd	r4, [sp]
   15a08:	ldr	r6, [sp, #8]
   15a0c:	add	sp, sp, #12
   15a10:	pop	{pc}		; (ldr pc, [sp], #4)
   15a14:	cmp	r4, #0
   15a18:	beq	15a28 <__assert_fail@plt+0x4b9c>
   15a1c:	cmp	r6, #0
   15a20:	cmpne	r5, #0
   15a24:	beq	15a04 <__assert_fail@plt+0x4b78>
   15a28:	bl	15fe4 <__assert_fail@plt+0x5158>
   15a2c:	str	r4, [sp, #-8]!
   15a30:	str	lr, [sp, #4]
   15a34:	bl	17080 <__assert_fail@plt+0x61f4>
   15a38:	cmp	r0, #0
   15a3c:	beq	15a4c <__assert_fail@plt+0x4bc0>
   15a40:	ldr	r4, [sp]
   15a44:	add	sp, sp, #4
   15a48:	pop	{pc}		; (ldr pc, [sp], #4)
   15a4c:	bl	15fe4 <__assert_fail@plt+0x5158>
   15a50:	str	r4, [sp, #-8]!
   15a54:	str	lr, [sp, #4]
   15a58:	bl	17080 <__assert_fail@plt+0x61f4>
   15a5c:	cmp	r0, #0
   15a60:	beq	15a70 <__assert_fail@plt+0x4be4>
   15a64:	ldr	r4, [sp]
   15a68:	add	sp, sp, #4
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	bl	15fe4 <__assert_fail@plt+0x5158>
   15a74:	str	r4, [sp, #-8]!
   15a78:	str	lr, [sp, #4]
   15a7c:	bl	17080 <__assert_fail@plt+0x61f4>
   15a80:	cmp	r0, #0
   15a84:	beq	15a94 <__assert_fail@plt+0x4c08>
   15a88:	ldr	r4, [sp]
   15a8c:	add	sp, sp, #4
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	bl	15fe4 <__assert_fail@plt+0x5158>
   15a98:	strd	r4, [sp, #-16]!
   15a9c:	mov	r5, r0
   15aa0:	mov	r4, r1
   15aa4:	str	r6, [sp, #8]
   15aa8:	str	lr, [sp, #12]
   15aac:	bl	170bc <__assert_fail@plt+0x6230>
   15ab0:	cmp	r0, #0
   15ab4:	beq	15ac8 <__assert_fail@plt+0x4c3c>
   15ab8:	ldrd	r4, [sp]
   15abc:	ldr	r6, [sp, #8]
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac8:	adds	r4, r4, #0
   15acc:	movne	r4, #1
   15ad0:	cmp	r5, #0
   15ad4:	moveq	r4, #1
   15ad8:	cmp	r4, #0
   15adc:	beq	15ab8 <__assert_fail@plt+0x4c2c>
   15ae0:	bl	15fe4 <__assert_fail@plt+0x5158>
   15ae4:	cmp	r1, #0
   15ae8:	orreq	r1, r1, #1
   15aec:	str	r4, [sp, #-8]!
   15af0:	str	lr, [sp, #4]
   15af4:	bl	170bc <__assert_fail@plt+0x6230>
   15af8:	cmp	r0, #0
   15afc:	beq	15b0c <__assert_fail@plt+0x4c80>
   15b00:	ldr	r4, [sp]
   15b04:	add	sp, sp, #4
   15b08:	pop	{pc}		; (ldr pc, [sp], #4)
   15b0c:	bl	15fe4 <__assert_fail@plt+0x5158>
   15b10:	strd	r4, [sp, #-16]!
   15b14:	mov	r4, r0
   15b18:	mov	r5, r2
   15b1c:	str	r6, [sp, #8]
   15b20:	mov	r6, r1
   15b24:	str	lr, [sp, #12]
   15b28:	bl	1749c <__assert_fail@plt+0x6610>
   15b2c:	cmp	r0, #0
   15b30:	beq	15b44 <__assert_fail@plt+0x4cb8>
   15b34:	ldrd	r4, [sp]
   15b38:	ldr	r6, [sp, #8]
   15b3c:	add	sp, sp, #12
   15b40:	pop	{pc}		; (ldr pc, [sp], #4)
   15b44:	cmp	r4, #0
   15b48:	beq	15b58 <__assert_fail@plt+0x4ccc>
   15b4c:	cmp	r6, #0
   15b50:	cmpne	r5, #0
   15b54:	beq	15b34 <__assert_fail@plt+0x4ca8>
   15b58:	bl	15fe4 <__assert_fail@plt+0x5158>
   15b5c:	cmp	r2, #0
   15b60:	cmpne	r1, #0
   15b64:	str	r4, [sp, #-8]!
   15b68:	moveq	r2, #1
   15b6c:	str	lr, [sp, #4]
   15b70:	moveq	r1, r2
   15b74:	bl	1749c <__assert_fail@plt+0x6610>
   15b78:	cmp	r0, #0
   15b7c:	beq	15b8c <__assert_fail@plt+0x4d00>
   15b80:	ldr	r4, [sp]
   15b84:	add	sp, sp, #4
   15b88:	pop	{pc}		; (ldr pc, [sp], #4)
   15b8c:	bl	15fe4 <__assert_fail@plt+0x5158>
   15b90:	mov	r2, r1
   15b94:	mov	r1, r0
   15b98:	str	r4, [sp, #-8]!
   15b9c:	mov	r0, #0
   15ba0:	str	lr, [sp, #4]
   15ba4:	bl	1749c <__assert_fail@plt+0x6610>
   15ba8:	cmp	r0, #0
   15bac:	beq	15bbc <__assert_fail@plt+0x4d30>
   15bb0:	ldr	r4, [sp]
   15bb4:	add	sp, sp, #4
   15bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bbc:	bl	15fe4 <__assert_fail@plt+0x5158>
   15bc0:	cmp	r1, #0
   15bc4:	cmpne	r0, #0
   15bc8:	str	r4, [sp, #-8]!
   15bcc:	moveq	r2, #1
   15bd0:	movne	r2, r1
   15bd4:	str	lr, [sp, #4]
   15bd8:	movne	r1, r0
   15bdc:	moveq	r1, r2
   15be0:	mov	r0, #0
   15be4:	bl	1749c <__assert_fail@plt+0x6610>
   15be8:	cmp	r0, #0
   15bec:	beq	15bfc <__assert_fail@plt+0x4d70>
   15bf0:	ldr	r4, [sp]
   15bf4:	add	sp, sp, #4
   15bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bfc:	bl	15fe4 <__assert_fail@plt+0x5158>
   15c00:	cmp	r0, #0
   15c04:	strd	r4, [sp, #-16]!
   15c08:	mov	r5, r1
   15c0c:	ldr	r4, [r1]
   15c10:	str	r6, [sp, #8]
   15c14:	str	lr, [sp, #12]
   15c18:	beq	15c60 <__assert_fail@plt+0x4dd4>
   15c1c:	lsr	r3, r4, #1
   15c20:	add	r3, r3, #1
   15c24:	adds	r4, r4, r3
   15c28:	bcs	15c5c <__assert_fail@plt+0x4dd0>
   15c2c:	mov	r2, #1
   15c30:	mov	r1, r4
   15c34:	bl	1749c <__assert_fail@plt+0x6610>
   15c38:	cmp	r0, #0
   15c3c:	beq	15c54 <__assert_fail@plt+0x4dc8>
   15c40:	ldr	r6, [sp, #8]
   15c44:	str	r4, [r5]
   15c48:	ldrd	r4, [sp]
   15c4c:	add	sp, sp, #12
   15c50:	pop	{pc}		; (ldr pc, [sp], #4)
   15c54:	cmp	r4, #0
   15c58:	beq	15c40 <__assert_fail@plt+0x4db4>
   15c5c:	bl	15fe4 <__assert_fail@plt+0x5158>
   15c60:	cmp	r4, #0
   15c64:	mov	r2, #1
   15c68:	moveq	r4, #64	; 0x40
   15c6c:	mov	r1, r4
   15c70:	bl	1749c <__assert_fail@plt+0x6610>
   15c74:	cmp	r0, #0
   15c78:	bne	15c40 <__assert_fail@plt+0x4db4>
   15c7c:	b	15c5c <__assert_fail@plt+0x4dd0>
   15c80:	cmp	r0, #0
   15c84:	strd	r4, [sp, #-16]!
   15c88:	mov	r5, r1
   15c8c:	ldr	r4, [r1]
   15c90:	str	r6, [sp, #8]
   15c94:	mov	r6, r2
   15c98:	str	lr, [sp, #12]
   15c9c:	beq	15ce4 <__assert_fail@plt+0x4e58>
   15ca0:	lsr	r3, r4, #1
   15ca4:	add	r3, r3, #1
   15ca8:	adds	r4, r4, r3
   15cac:	bcs	15ce0 <__assert_fail@plt+0x4e54>
   15cb0:	mov	r1, r4
   15cb4:	bl	1749c <__assert_fail@plt+0x6610>
   15cb8:	cmp	r0, #0
   15cbc:	beq	15cd4 <__assert_fail@plt+0x4e48>
   15cc0:	ldr	r6, [sp, #8]
   15cc4:	str	r4, [r5]
   15cc8:	ldrd	r4, [sp]
   15ccc:	add	sp, sp, #12
   15cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd4:	cmp	r4, #0
   15cd8:	cmpne	r6, #0
   15cdc:	beq	15cc0 <__assert_fail@plt+0x4e34>
   15ce0:	bl	15fe4 <__assert_fail@plt+0x5158>
   15ce4:	cmp	r4, #0
   15ce8:	bne	15cfc <__assert_fail@plt+0x4e70>
   15cec:	mov	r4, #64	; 0x40
   15cf0:	udiv	r4, r4, r2
   15cf4:	cmp	r2, #64	; 0x40
   15cf8:	addhi	r4, r4, #1
   15cfc:	mov	r2, r6
   15d00:	mov	r1, r4
   15d04:	mov	r0, #0
   15d08:	bl	1749c <__assert_fail@plt+0x6610>
   15d0c:	cmp	r0, #0
   15d10:	bne	15cc0 <__assert_fail@plt+0x4e34>
   15d14:	b	15ce0 <__assert_fail@plt+0x4e54>
   15d18:	ldr	ip, [r1]
   15d1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d20:	strd	r6, [sp, #8]
   15d24:	mov	r7, r1
   15d28:	mov	r6, r0
   15d2c:	str	r8, [sp, #16]
   15d30:	mvn	r8, r3
   15d34:	lsr	r8, r8, #31
   15d38:	str	lr, [sp, #20]
   15d3c:	asr	r1, ip, #1
   15d40:	ldr	lr, [sp, #24]
   15d44:	adds	r4, ip, r1
   15d48:	mvnvs	r4, #-2147483648	; 0x80000000
   15d4c:	cmp	r3, r4
   15d50:	movge	r1, #0
   15d54:	andlt	r1, r8, #1
   15d58:	cmp	r1, #0
   15d5c:	movne	r4, r3
   15d60:	smull	r0, r1, r4, lr
   15d64:	cmp	r1, r0, asr #31
   15d68:	bne	15e18 <__assert_fail@plt+0x4f8c>
   15d6c:	cmp	r0, #63	; 0x3f
   15d70:	mov	r5, r0
   15d74:	ble	15de4 <__assert_fail@plt+0x4f58>
   15d78:	cmp	r6, #0
   15d7c:	sub	r1, r4, ip
   15d80:	streq	r6, [r7]
   15d84:	cmp	r1, r2
   15d88:	bge	15db8 <__assert_fail@plt+0x4f2c>
   15d8c:	adds	r4, ip, r2
   15d90:	bvs	15e14 <__assert_fail@plt+0x4f88>
   15d94:	cmp	r4, r3
   15d98:	movle	r3, #0
   15d9c:	andgt	r3, r8, #1
   15da0:	cmp	r3, #0
   15da4:	bne	15e14 <__assert_fail@plt+0x4f88>
   15da8:	smull	r0, r1, r4, lr
   15dac:	cmp	r1, r0, asr #31
   15db0:	mov	r5, r0
   15db4:	bne	15e14 <__assert_fail@plt+0x4f88>
   15db8:	mov	r1, r5
   15dbc:	mov	r0, r6
   15dc0:	bl	170bc <__assert_fail@plt+0x6230>
   15dc4:	cmp	r0, #0
   15dc8:	beq	15df8 <__assert_fail@plt+0x4f6c>
   15dcc:	ldr	r8, [sp, #16]
   15dd0:	str	r4, [r7]
   15dd4:	ldrd	r4, [sp]
   15dd8:	ldrd	r6, [sp, #8]
   15ddc:	add	sp, sp, #20
   15de0:	pop	{pc}		; (ldr pc, [sp], #4)
   15de4:	mov	r0, #64	; 0x40
   15de8:	sdiv	r4, r0, lr
   15dec:	mls	r5, lr, r4, r0
   15df0:	sub	r5, r0, r5
   15df4:	b	15d78 <__assert_fail@plt+0x4eec>
   15df8:	adds	r5, r5, #0
   15dfc:	movne	r5, #1
   15e00:	cmp	r6, #0
   15e04:	movne	r6, r5
   15e08:	moveq	r6, #1
   15e0c:	cmp	r6, #0
   15e10:	beq	15dcc <__assert_fail@plt+0x4f40>
   15e14:	bl	15fe4 <__assert_fail@plt+0x5158>
   15e18:	mvn	r0, #-2147483648	; 0x80000000
   15e1c:	b	15de8 <__assert_fail@plt+0x4f5c>
   15e20:	mov	r1, #1
   15e24:	str	r4, [sp, #-8]!
   15e28:	str	lr, [sp, #4]
   15e2c:	bl	1700c <__assert_fail@plt+0x6180>
   15e30:	cmp	r0, #0
   15e34:	beq	15e44 <__assert_fail@plt+0x4fb8>
   15e38:	ldr	r4, [sp]
   15e3c:	add	sp, sp, #4
   15e40:	pop	{pc}		; (ldr pc, [sp], #4)
   15e44:	bl	15fe4 <__assert_fail@plt+0x5158>
   15e48:	mov	r1, #1
   15e4c:	str	r4, [sp, #-8]!
   15e50:	str	lr, [sp, #4]
   15e54:	bl	1700c <__assert_fail@plt+0x6180>
   15e58:	cmp	r0, #0
   15e5c:	beq	15e6c <__assert_fail@plt+0x4fe0>
   15e60:	ldr	r4, [sp]
   15e64:	add	sp, sp, #4
   15e68:	pop	{pc}		; (ldr pc, [sp], #4)
   15e6c:	bl	15fe4 <__assert_fail@plt+0x5158>
   15e70:	str	r4, [sp, #-8]!
   15e74:	str	lr, [sp, #4]
   15e78:	bl	1700c <__assert_fail@plt+0x6180>
   15e7c:	cmp	r0, #0
   15e80:	beq	15e90 <__assert_fail@plt+0x5004>
   15e84:	ldr	r4, [sp]
   15e88:	add	sp, sp, #4
   15e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e90:	bl	15fe4 <__assert_fail@plt+0x5158>
   15e94:	str	r4, [sp, #-8]!
   15e98:	str	lr, [sp, #4]
   15e9c:	bl	1700c <__assert_fail@plt+0x6180>
   15ea0:	cmp	r0, #0
   15ea4:	beq	15eb4 <__assert_fail@plt+0x5028>
   15ea8:	ldr	r4, [sp]
   15eac:	add	sp, sp, #4
   15eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb4:	bl	15fe4 <__assert_fail@plt+0x5158>
   15eb8:	strd	r4, [sp, #-16]!
   15ebc:	mov	r4, r1
   15ec0:	str	r6, [sp, #8]
   15ec4:	mov	r6, r0
   15ec8:	mov	r0, r1
   15ecc:	str	lr, [sp, #12]
   15ed0:	bl	17080 <__assert_fail@plt+0x61f4>
   15ed4:	subs	r5, r0, #0
   15ed8:	beq	15efc <__assert_fail@plt+0x5070>
   15edc:	mov	r2, r4
   15ee0:	mov	r1, r6
   15ee4:	bl	10c88 <memcpy@plt>
   15ee8:	mov	r0, r5
   15eec:	ldrd	r4, [sp]
   15ef0:	ldr	r6, [sp, #8]
   15ef4:	add	sp, sp, #12
   15ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   15efc:	bl	15fe4 <__assert_fail@plt+0x5158>
   15f00:	strd	r4, [sp, #-16]!
   15f04:	mov	r4, r1
   15f08:	str	r6, [sp, #8]
   15f0c:	mov	r6, r0
   15f10:	mov	r0, r1
   15f14:	str	lr, [sp, #12]
   15f18:	bl	17080 <__assert_fail@plt+0x61f4>
   15f1c:	subs	r5, r0, #0
   15f20:	beq	15f44 <__assert_fail@plt+0x50b8>
   15f24:	mov	r2, r4
   15f28:	mov	r1, r6
   15f2c:	bl	10c88 <memcpy@plt>
   15f30:	mov	r0, r5
   15f34:	ldrd	r4, [sp]
   15f38:	ldr	r6, [sp, #8]
   15f3c:	add	sp, sp, #12
   15f40:	pop	{pc}		; (ldr pc, [sp], #4)
   15f44:	bl	15fe4 <__assert_fail@plt+0x5158>
   15f48:	strd	r4, [sp, #-16]!
   15f4c:	mov	r4, r1
   15f50:	str	r6, [sp, #8]
   15f54:	mov	r6, r0
   15f58:	add	r0, r1, #1
   15f5c:	str	lr, [sp, #12]
   15f60:	bl	17080 <__assert_fail@plt+0x61f4>
   15f64:	subs	r5, r0, #0
   15f68:	beq	15f94 <__assert_fail@plt+0x5108>
   15f6c:	mov	r3, #0
   15f70:	mov	r1, r6
   15f74:	mov	r2, r4
   15f78:	strb	r3, [r5, r4]
   15f7c:	bl	10c88 <memcpy@plt>
   15f80:	mov	r0, r5
   15f84:	ldrd	r4, [sp]
   15f88:	ldr	r6, [sp, #8]
   15f8c:	add	sp, sp, #12
   15f90:	pop	{pc}		; (ldr pc, [sp], #4)
   15f94:	bl	15fe4 <__assert_fail@plt+0x5158>
   15f98:	strd	r4, [sp, #-16]!
   15f9c:	str	r6, [sp, #8]
   15fa0:	mov	r6, r0
   15fa4:	str	lr, [sp, #12]
   15fa8:	bl	10dc0 <strlen@plt>
   15fac:	add	r4, r0, #1
   15fb0:	mov	r0, r4
   15fb4:	bl	17080 <__assert_fail@plt+0x61f4>
   15fb8:	subs	r5, r0, #0
   15fbc:	beq	15fe0 <__assert_fail@plt+0x5154>
   15fc0:	mov	r2, r4
   15fc4:	mov	r1, r6
   15fc8:	bl	10c88 <memcpy@plt>
   15fcc:	mov	r0, r5
   15fd0:	ldrd	r4, [sp]
   15fd4:	ldr	r6, [sp, #8]
   15fd8:	add	sp, sp, #12
   15fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe0:	bl	15fe4 <__assert_fail@plt+0x5158>
   15fe4:	movw	r3, #37092	; 0x90e4
   15fe8:	movt	r3, #2
   15fec:	str	r4, [sp, #-8]!
   15ff0:	ldr	r4, [r3]
   15ff4:	mov	r2, #5
   15ff8:	movw	r1, #32496	; 0x7ef0
   15ffc:	movt	r1, #1
   16000:	mov	r0, #0
   16004:	str	lr, [sp, #4]
   16008:	bl	10cd0 <dcgettext@plt>
   1600c:	mov	r3, r0
   16010:	movw	r2, #31380	; 0x7a94
   16014:	movt	r2, #1
   16018:	mov	r1, #0
   1601c:	mov	r0, r4
   16020:	bl	10d48 <error@plt>
   16024:	bl	10e80 <abort@plt>
   16028:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1602c:	strd	r6, [sp, #8]
   16030:	mov	r6, r2
   16034:	mov	r7, r3
   16038:	str	r8, [sp, #16]
   1603c:	mov	r2, r1
   16040:	mov	r1, #0
   16044:	str	lr, [sp, #20]
   16048:	sub	sp, sp, #16
   1604c:	mov	r8, r0
   16050:	ldr	ip, [sp, #48]	; 0x30
   16054:	add	r3, sp, #8
   16058:	str	ip, [sp]
   1605c:	bl	162b0 <__assert_fail@plt+0x5424>
   16060:	subs	r4, r0, #0
   16064:	bne	160b4 <__assert_fail@plt+0x5228>
   16068:	ldrd	r4, [sp, #8]
   1606c:	ldrd	r0, [sp, #40]	; 0x28
   16070:	cmp	r5, r7
   16074:	cmpeq	r4, r6
   16078:	movcc	r3, #1
   1607c:	movcs	r3, #0
   16080:	cmp	r5, r1
   16084:	cmpeq	r4, r0
   16088:	orrhi	r3, r3, #1
   1608c:	cmp	r3, #0
   16090:	bne	16134 <__assert_fail@plt+0x52a8>
   16094:	mov	r0, r4
   16098:	mov	r1, r5
   1609c:	add	sp, sp, #16
   160a0:	ldrd	r4, [sp]
   160a4:	ldrd	r6, [sp, #8]
   160a8:	ldr	r8, [sp, #16]
   160ac:	add	sp, sp, #20
   160b0:	pop	{pc}		; (ldr pc, [sp], #4)
   160b4:	bl	10dd8 <__errno_location@plt>
   160b8:	cmp	r4, #1
   160bc:	moveq	r3, #75	; 0x4b
   160c0:	moveq	r4, r3
   160c4:	streq	r3, [r0]
   160c8:	beq	1611c <__assert_fail@plt+0x5290>
   160cc:	cmp	r4, #3
   160d0:	beq	16110 <__assert_fail@plt+0x5284>
   160d4:	ldr	r3, [sp, #56]	; 0x38
   160d8:	ldr	r4, [r0]
   160dc:	cmp	r3, #0
   160e0:	beq	16128 <__assert_fail@plt+0x529c>
   160e4:	cmp	r4, #22
   160e8:	moveq	r4, #0
   160ec:	mov	r0, r8
   160f0:	bl	15158 <__assert_fail@plt+0x42cc>
   160f4:	movw	r2, #31376	; 0x7a90
   160f8:	movt	r2, #1
   160fc:	str	r0, [sp]
   16100:	mov	r1, r4
   16104:	ldr	r3, [sp, #52]	; 0x34
   16108:	ldr	r0, [sp, #56]	; 0x38
   1610c:	bl	10d48 <error@plt>
   16110:	mov	r3, #0
   16114:	mov	r4, r3
   16118:	str	r3, [r0]
   1611c:	ldr	r3, [sp, #56]	; 0x38
   16120:	cmp	r3, #0
   16124:	bne	160ec <__assert_fail@plt+0x5260>
   16128:	mov	r3, #1
   1612c:	str	r3, [sp, #56]	; 0x38
   16130:	b	160e4 <__assert_fail@plt+0x5258>
   16134:	bl	10dd8 <__errno_location@plt>
   16138:	mov	r3, #0
   1613c:	mvn	r2, #-1073741824	; 0xc0000000
   16140:	cmp	r5, r3
   16144:	cmpeq	r4, r2
   16148:	movhi	r3, #75	; 0x4b
   1614c:	movls	r3, #34	; 0x22
   16150:	mov	r4, r3
   16154:	str	r3, [r0]
   16158:	ldr	r3, [sp, #56]	; 0x38
   1615c:	cmp	r3, #0
   16160:	moveq	r3, #1
   16164:	str	r3, [sp, #56]	; 0x38
   16168:	b	160ec <__assert_fail@plt+0x5260>
   1616c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16170:	mov	r1, #0
   16174:	strd	r6, [sp, #8]
   16178:	mov	r6, r2
   1617c:	mov	r7, r3
   16180:	str	r8, [sp, #16]
   16184:	mov	r2, #10
   16188:	mov	r8, r0
   1618c:	str	lr, [sp, #20]
   16190:	sub	sp, sp, #16
   16194:	ldr	ip, [sp, #48]	; 0x30
   16198:	add	r3, sp, #8
   1619c:	str	ip, [sp]
   161a0:	bl	162b0 <__assert_fail@plt+0x5424>
   161a4:	subs	r4, r0, #0
   161a8:	bne	161f8 <__assert_fail@plt+0x536c>
   161ac:	ldrd	r4, [sp, #8]
   161b0:	ldrd	r0, [sp, #40]	; 0x28
   161b4:	cmp	r7, r5
   161b8:	cmpeq	r6, r4
   161bc:	movhi	r3, #1
   161c0:	movls	r3, #0
   161c4:	cmp	r1, r5
   161c8:	cmpeq	r0, r4
   161cc:	orrcc	r3, r3, #1
   161d0:	cmp	r3, #0
   161d4:	bne	16278 <__assert_fail@plt+0x53ec>
   161d8:	mov	r0, r4
   161dc:	mov	r1, r5
   161e0:	add	sp, sp, #16
   161e4:	ldrd	r4, [sp]
   161e8:	ldrd	r6, [sp, #8]
   161ec:	ldr	r8, [sp, #16]
   161f0:	add	sp, sp, #20
   161f4:	pop	{pc}		; (ldr pc, [sp], #4)
   161f8:	bl	10dd8 <__errno_location@plt>
   161fc:	cmp	r4, #1
   16200:	moveq	r3, #75	; 0x4b
   16204:	moveq	r4, r3
   16208:	streq	r3, [r0]
   1620c:	beq	16268 <__assert_fail@plt+0x53dc>
   16210:	cmp	r4, #3
   16214:	beq	1625c <__assert_fail@plt+0x53d0>
   16218:	ldr	r3, [sp, #56]	; 0x38
   1621c:	ldr	r4, [r0]
   16220:	cmp	r3, #0
   16224:	bne	16230 <__assert_fail@plt+0x53a4>
   16228:	mov	r3, #1
   1622c:	str	r3, [sp, #56]	; 0x38
   16230:	cmp	r4, #22
   16234:	moveq	r4, #0
   16238:	mov	r0, r8
   1623c:	bl	15158 <__assert_fail@plt+0x42cc>
   16240:	movw	r2, #31376	; 0x7a90
   16244:	movt	r2, #1
   16248:	str	r0, [sp]
   1624c:	mov	r1, r4
   16250:	ldr	r3, [sp, #52]	; 0x34
   16254:	ldr	r0, [sp, #56]	; 0x38
   16258:	bl	10d48 <error@plt>
   1625c:	mov	r3, #0
   16260:	mov	r4, r3
   16264:	str	r3, [r0]
   16268:	ldr	r3, [sp, #56]	; 0x38
   1626c:	cmp	r3, #0
   16270:	bne	16238 <__assert_fail@plt+0x53ac>
   16274:	b	16228 <__assert_fail@plt+0x539c>
   16278:	bl	10dd8 <__errno_location@plt>
   1627c:	mov	r3, #0
   16280:	mvn	r2, #-1073741824	; 0xc0000000
   16284:	cmp	r5, r3
   16288:	cmpeq	r4, r2
   1628c:	movhi	r3, #75	; 0x4b
   16290:	movls	r3, #34	; 0x22
   16294:	mov	r4, r3
   16298:	str	r3, [r0]
   1629c:	ldr	r3, [sp, #56]	; 0x38
   162a0:	cmp	r3, #0
   162a4:	moveq	r3, #1
   162a8:	str	r3, [sp, #56]	; 0x38
   162ac:	b	16238 <__assert_fail@plt+0x53ac>
   162b0:	cmp	r2, #36	; 0x24
   162b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162b8:	strd	r6, [sp, #8]
   162bc:	strd	r8, [sp, #16]
   162c0:	strd	sl, [sp, #24]
   162c4:	str	lr, [sp, #32]
   162c8:	sub	sp, sp, #36	; 0x24
   162cc:	bhi	16f44 <__assert_fail@plt+0x60b8>
   162d0:	cmp	r1, #0
   162d4:	mov	r6, r2
   162d8:	mov	r5, r1
   162dc:	mov	sl, r0
   162e0:	addeq	r5, sp, #28
   162e4:	mov	r9, r3
   162e8:	bl	10dd8 <__errno_location@plt>
   162ec:	mov	r3, #0
   162f0:	mov	fp, r0
   162f4:	str	r3, [r0]
   162f8:	ldrb	r4, [sl]
   162fc:	bl	10d9c <__ctype_b_loc@plt>
   16300:	ldr	r2, [r0]
   16304:	lsl	r3, r4, #1
   16308:	ldrh	r3, [r2, r3]
   1630c:	tst	r3, #8192	; 0x2000
   16310:	beq	1632c <__assert_fail@plt+0x54a0>
   16314:	mov	r3, sl
   16318:	ldrb	r4, [r3, #1]!
   1631c:	lsl	r1, r4, #1
   16320:	ldrh	r1, [r2, r1]
   16324:	tst	r1, #8192	; 0x2000
   16328:	bne	16318 <__assert_fail@plt+0x548c>
   1632c:	cmp	r4, #45	; 0x2d
   16330:	beq	163cc <__assert_fail@plt+0x5540>
   16334:	mov	r2, r6
   16338:	mov	r3, #0
   1633c:	mov	r1, r5
   16340:	mov	r0, sl
   16344:	bl	10c94 <__strtoull_internal@plt>
   16348:	ldr	r8, [r5]
   1634c:	mov	r6, r0
   16350:	mov	r7, r1
   16354:	cmp	r8, sl
   16358:	beq	163b4 <__assert_fail@plt+0x5528>
   1635c:	ldr	r4, [fp]
   16360:	cmp	r4, #0
   16364:	bne	163a4 <__assert_fail@plt+0x5518>
   16368:	ldr	r3, [sp, #72]	; 0x48
   1636c:	cmp	r3, #0
   16370:	beq	16380 <__assert_fail@plt+0x54f4>
   16374:	ldrb	sl, [r8]
   16378:	cmp	sl, #0
   1637c:	bne	16738 <__assert_fail@plt+0x58ac>
   16380:	strd	r6, [r9]
   16384:	mov	r0, r4
   16388:	add	sp, sp, #36	; 0x24
   1638c:	ldrd	r4, [sp]
   16390:	ldrd	r6, [sp, #8]
   16394:	ldrd	r8, [sp, #16]
   16398:	ldrd	sl, [sp, #24]
   1639c:	add	sp, sp, #32
   163a0:	pop	{pc}		; (ldr pc, [sp], #4)
   163a4:	cmp	r4, #34	; 0x22
   163a8:	bne	163cc <__assert_fail@plt+0x5540>
   163ac:	mov	r4, #1
   163b0:	b	16368 <__assert_fail@plt+0x54dc>
   163b4:	ldr	r3, [sp, #72]	; 0x48
   163b8:	cmp	r3, #0
   163bc:	beq	163cc <__assert_fail@plt+0x5540>
   163c0:	ldrb	sl, [sl]
   163c4:	cmp	sl, #0
   163c8:	bne	163d4 <__assert_fail@plt+0x5548>
   163cc:	mov	r4, #4
   163d0:	b	16384 <__assert_fail@plt+0x54f8>
   163d4:	mov	r1, sl
   163d8:	mov	r0, r3
   163dc:	bl	10dcc <strchr@plt>
   163e0:	cmp	r0, #0
   163e4:	movne	r4, #0
   163e8:	movne	r6, #1
   163ec:	movne	r7, r4
   163f0:	beq	163cc <__assert_fail@plt+0x5540>
   163f4:	sub	r3, sl, #69	; 0x45
   163f8:	cmp	r3, #47	; 0x2f
   163fc:	ldrls	pc, [pc, r3, lsl #2]
   16400:	b	16508 <__assert_fail@plt+0x567c>
   16404:	andeq	r6, r1, r4, asr #9
   16408:	andeq	r6, r1, r8, lsl #10
   1640c:	andeq	r6, r1, r4, asr #9
   16410:	andeq	r6, r1, r8, lsl #10
   16414:	andeq	r6, r1, r8, lsl #10
   16418:	andeq	r6, r1, r8, lsl #10
   1641c:	andeq	r6, r1, r4, asr #9
   16420:	andeq	r6, r1, r8, lsl #10
   16424:	andeq	r6, r1, r4, asr #9
   16428:	andeq	r6, r1, r8, lsl #10
   1642c:	andeq	r6, r1, r8, lsl #10
   16430:	andeq	r6, r1, r4, asr #9
   16434:	andeq	r6, r1, r8, lsl #10
   16438:	andeq	r6, r1, r8, lsl #10
   1643c:	andeq	r6, r1, r8, lsl #10
   16440:	andeq	r6, r1, r4, asr #9
   16444:	andeq	r6, r1, r8, lsl #10
   16448:	andeq	r6, r1, r8, lsl #10
   1644c:	andeq	r6, r1, r8, lsl #10
   16450:	andeq	r6, r1, r8, lsl #10
   16454:	andeq	r6, r1, r4, asr #9
   16458:	andeq	r6, r1, r4, asr #9
   1645c:	andeq	r6, r1, r8, lsl #10
   16460:	andeq	r6, r1, r8, lsl #10
   16464:	andeq	r6, r1, r8, lsl #10
   16468:	andeq	r6, r1, r8, lsl #10
   1646c:	andeq	r6, r1, r8, lsl #10
   16470:	andeq	r6, r1, r8, lsl #10
   16474:	andeq	r6, r1, r8, lsl #10
   16478:	andeq	r6, r1, r8, lsl #10
   1647c:	andeq	r6, r1, r8, lsl #10
   16480:	andeq	r6, r1, r8, lsl #10
   16484:	andeq	r6, r1, r8, lsl #10
   16488:	andeq	r6, r1, r8, lsl #10
   1648c:	andeq	r6, r1, r4, asr #9
   16490:	andeq	r6, r1, r8, lsl #10
   16494:	andeq	r6, r1, r8, lsl #10
   16498:	andeq	r6, r1, r8, lsl #10
   1649c:	andeq	r6, r1, r4, asr #9
   164a0:	andeq	r6, r1, r8, lsl #10
   164a4:	andeq	r6, r1, r4, asr #9
   164a8:	andeq	r6, r1, r8, lsl #10
   164ac:	andeq	r6, r1, r8, lsl #10
   164b0:	andeq	r6, r1, r8, lsl #10
   164b4:	andeq	r6, r1, r8, lsl #10
   164b8:	andeq	r6, r1, r8, lsl #10
   164bc:	andeq	r6, r1, r8, lsl #10
   164c0:	andeq	r6, r1, r4, asr #9
   164c4:	mov	r1, #48	; 0x30
   164c8:	ldr	r0, [sp, #72]	; 0x48
   164cc:	bl	10dcc <strchr@plt>
   164d0:	cmp	r0, #0
   164d4:	beq	16508 <__assert_fail@plt+0x567c>
   164d8:	ldrb	r3, [r8, #1]
   164dc:	cmp	r3, #68	; 0x44
   164e0:	beq	16a98 <__assert_fail@plt+0x5c0c>
   164e4:	cmp	r3, #105	; 0x69
   164e8:	beq	16750 <__assert_fail@plt+0x58c4>
   164ec:	cmp	r3, #66	; 0x42
   164f0:	moveq	r3, #2
   164f4:	movne	r3, #1
   164f8:	moveq	ip, #1000	; 0x3e8
   164fc:	movne	ip, #1024	; 0x400
   16500:	str	r3, [sp, #12]
   16504:	b	16514 <__assert_fail@plt+0x5688>
   16508:	mov	r3, #1
   1650c:	mov	ip, #1024	; 0x400
   16510:	str	r3, [sp, #12]
   16514:	sub	sl, sl, #66	; 0x42
   16518:	cmp	sl, #53	; 0x35
   1651c:	ldrls	pc, [pc, sl, lsl #2]
   16520:	b	166fc <__assert_fail@plt+0x5870>
   16524:	andeq	r6, r1, r4, ror #19
   16528:	strdeq	r6, [r1], -ip
   1652c:	strdeq	r6, [r1], -ip
   16530:	andeq	r6, r1, r4, lsl #19
   16534:	strdeq	r6, [r1], -ip
   16538:	andeq	r6, r1, r0, lsl #20
   1653c:	strdeq	r6, [r1], -ip
   16540:	strdeq	r6, [r1], -ip
   16544:	strdeq	r6, [r1], -ip
   16548:	andeq	r6, r1, r4, lsl #14
   1654c:	strdeq	r6, [r1], -ip
   16550:	andeq	r6, r1, ip, lsr #18
   16554:	strdeq	r6, [r1], -ip
   16558:	strdeq	r6, [r1], -ip
   1655c:	ldrdeq	r6, [r1], -r0
   16560:	strdeq	r6, [r1], -ip
   16564:	strdeq	r6, [r1], -ip
   16568:	strdeq	r6, [r1], -ip
   1656c:	andeq	r6, r1, r0, ror r8
   16570:	strdeq	r6, [r1], -ip
   16574:	strdeq	r6, [r1], -ip
   16578:	strdeq	r6, [r1], -ip
   1657c:	strdeq	r6, [r1], -ip
   16580:	andeq	r6, r1, r4, lsr #15
   16584:	strdeq	r6, [r1], -ip
   16588:	strdeq	r6, [r1], -ip
   1658c:	strdeq	r6, [r1], -ip
   16590:	strdeq	r6, [r1], -ip
   16594:	strdeq	r6, [r1], -ip
   16598:	strdeq	r6, [r1], -ip
   1659c:	strdeq	r6, [r1], -ip
   165a0:	strdeq	r6, [r1], -ip
   165a4:	andeq	r6, r1, r4, lsl #15
   165a8:	andeq	r6, r1, r4, ror #13
   165ac:	strdeq	r6, [r1], -ip
   165b0:	strdeq	r6, [r1], -ip
   165b4:	strdeq	r6, [r1], -ip
   165b8:	andeq	r6, r1, r0, lsl #20
   165bc:	strdeq	r6, [r1], -ip
   165c0:	strdeq	r6, [r1], -ip
   165c4:	strdeq	r6, [r1], -ip
   165c8:	andeq	r6, r1, r4, lsl #14
   165cc:	strdeq	r6, [r1], -ip
   165d0:	andeq	r6, r1, ip, lsr #18
   165d4:	strdeq	r6, [r1], -ip
   165d8:	strdeq	r6, [r1], -ip
   165dc:	strdeq	r6, [r1], -ip
   165e0:	strdeq	r6, [r1], -ip
   165e4:	strdeq	r6, [r1], -ip
   165e8:	strdeq	r6, [r1], -ip
   165ec:	andeq	r6, r1, r0, ror r8
   165f0:	strdeq	r6, [r1], -ip
   165f4:	strdeq	r6, [r1], -ip
   165f8:	andeq	r6, r1, ip, ror #14
   165fc:	asr	r3, ip, #31
   16600:	mov	r2, ip
   16604:	cmp	r7, #0
   16608:	mov	r1, #0
   1660c:	strd	r2, [sp]
   16610:	bne	16b50 <__assert_fail@plt+0x5cc4>
   16614:	umull	r6, r7, r6, ip
   16618:	mov	r2, r6
   1661c:	mov	r3, r7
   16620:	cmp	r1, #0
   16624:	bne	16a64 <__assert_fail@plt+0x5bd8>
   16628:	cmp	r3, #0
   1662c:	mov	lr, r1
   16630:	bne	16c7c <__assert_fail@plt+0x5df0>
   16634:	umull	r2, r3, r2, ip
   16638:	mov	r0, r2
   1663c:	mov	r1, r3
   16640:	cmp	lr, #0
   16644:	bne	16a64 <__assert_fail@plt+0x5bd8>
   16648:	cmp	r1, #0
   1664c:	bne	16c58 <__assert_fail@plt+0x5dcc>
   16650:	umull	r0, r1, r0, ip
   16654:	mov	r2, r0
   16658:	mov	r3, r1
   1665c:	cmp	lr, #0
   16660:	bne	16a64 <__assert_fail@plt+0x5bd8>
   16664:	cmp	r3, #0
   16668:	bne	16908 <__assert_fail@plt+0x5a7c>
   1666c:	umull	r2, r3, r2, ip
   16670:	mov	r0, r2
   16674:	mov	r1, r3
   16678:	cmp	lr, #0
   1667c:	bne	16a64 <__assert_fail@plt+0x5bd8>
   16680:	cmp	r1, #0
   16684:	bne	16b08 <__assert_fail@plt+0x5c7c>
   16688:	umull	r0, r1, r0, ip
   1668c:	mov	r2, r0
   16690:	mov	r3, r1
   16694:	cmp	lr, #0
   16698:	bne	16a64 <__assert_fail@plt+0x5bd8>
   1669c:	cmp	r3, #0
   166a0:	mov	r7, lr
   166a4:	bne	16ae4 <__assert_fail@plt+0x5c58>
   166a8:	umull	r2, r3, r2, ip
   166ac:	mov	r6, r2
   166b0:	mov	lr, r3
   166b4:	cmp	r7, #0
   166b8:	bne	16a64 <__assert_fail@plt+0x5bd8>
   166bc:	cmp	lr, #0
   166c0:	bne	16aa8 <__assert_fail@plt+0x5c1c>
   166c4:	umull	r2, r3, r6, ip
   166c8:	mov	r0, r2
   166cc:	mov	r2, r3
   166d0:	subs	r3, r7, #0
   166d4:	bne	16a64 <__assert_fail@plt+0x5bd8>
   166d8:	mov	r6, r0
   166dc:	mov	r7, r2
   166e0:	orr	r4, r4, r3
   166e4:	ldr	r2, [sp, #12]
   166e8:	add	r3, r8, r2
   166ec:	str	r3, [r5]
   166f0:	ldrb	r3, [r8, r2]
   166f4:	cmp	r3, #0
   166f8:	beq	16380 <__assert_fail@plt+0x54f4>
   166fc:	orr	r4, r4, #2
   16700:	b	16380 <__assert_fail@plt+0x54f4>
   16704:	cmp	r7, #0
   16708:	asr	r1, ip, #31
   1670c:	mov	lr, #0
   16710:	bne	16a74 <__assert_fail@plt+0x5be8>
   16714:	umull	r2, r3, r6, ip
   16718:	mov	r6, r2
   1671c:	mov	r7, r3
   16720:	cmp	lr, #0
   16724:	beq	166e4 <__assert_fail@plt+0x5858>
   16728:	mvn	r6, #0
   1672c:	mov	r4, #1
   16730:	mov	r7, r6
   16734:	b	166e4 <__assert_fail@plt+0x5858>
   16738:	mov	r0, r3
   1673c:	mov	r1, sl
   16740:	bl	10dcc <strchr@plt>
   16744:	cmp	r0, #0
   16748:	bne	163f4 <__assert_fail@plt+0x5568>
   1674c:	b	166fc <__assert_fail@plt+0x5870>
   16750:	ldrb	r3, [r8, #2]
   16754:	mov	ip, #1024	; 0x400
   16758:	cmp	r3, #66	; 0x42
   1675c:	movne	r3, #1
   16760:	moveq	r3, #3
   16764:	str	r3, [sp, #12]
   16768:	b	16514 <__assert_fail@plt+0x5688>
   1676c:	lsr	r3, r7, #31
   16770:	adds	r6, r6, r6
   16774:	adc	r7, r7, r7
   16778:	cmp	r3, #0
   1677c:	beq	166e4 <__assert_fail@plt+0x5858>
   16780:	b	16728 <__assert_fail@plt+0x589c>
   16784:	lsr	r3, r7, #23
   16788:	lsl	r7, r7, #9
   1678c:	cmp	r3, #0
   16790:	lsl	r3, r6, #9
   16794:	orr	r7, r7, r6, lsr #23
   16798:	bne	16728 <__assert_fail@plt+0x589c>
   1679c:	mov	r6, r3
   167a0:	b	166e4 <__assert_fail@plt+0x5858>
   167a4:	asr	r3, ip, #31
   167a8:	mov	r2, ip
   167ac:	cmp	r7, #0
   167b0:	mov	r1, #0
   167b4:	strd	r2, [sp]
   167b8:	bne	16bc4 <__assert_fail@plt+0x5d38>
   167bc:	umull	r6, r7, r6, ip
   167c0:	mov	r0, r6
   167c4:	mov	fp, r7
   167c8:	cmp	r1, #0
   167cc:	bne	16a64 <__assert_fail@plt+0x5bd8>
   167d0:	cmp	fp, #0
   167d4:	mov	lr, r1
   167d8:	bne	16d54 <__assert_fail@plt+0x5ec8>
   167dc:	umull	r0, r1, r0, ip
   167e0:	mov	r2, r0
   167e4:	mov	r3, r1
   167e8:	cmp	lr, #0
   167ec:	bne	16a64 <__assert_fail@plt+0x5bd8>
   167f0:	cmp	r3, #0
   167f4:	bne	16d7c <__assert_fail@plt+0x5ef0>
   167f8:	umull	r2, r3, r2, ip
   167fc:	mov	r0, r2
   16800:	mov	r1, r3
   16804:	cmp	lr, #0
   16808:	bne	16a64 <__assert_fail@plt+0x5bd8>
   1680c:	cmp	r1, #0
   16810:	bne	16cfc <__assert_fail@plt+0x5e70>
   16814:	umull	r0, r1, r0, ip
   16818:	mov	r2, r0
   1681c:	mov	r3, r1
   16820:	cmp	lr, #0
   16824:	bne	16a64 <__assert_fail@plt+0x5bd8>
   16828:	cmp	r3, #0
   1682c:	bne	16b2c <__assert_fail@plt+0x5ca0>
   16830:	umull	r2, r3, r2, ip
   16834:	mov	r0, r2
   16838:	mov	r1, r3
   1683c:	cmp	lr, #0
   16840:	bne	16a64 <__assert_fail@plt+0x5bd8>
   16844:	cmp	r1, #0
   16848:	beq	16688 <__assert_fail@plt+0x57fc>
   1684c:	umull	r6, r7, r0, ip
   16850:	mov	fp, lr
   16854:	mov	sl, r7
   16858:	umlal	sl, fp, r1, ip
   1685c:	cmp	fp, #0
   16860:	bne	16f64 <__assert_fail@plt+0x60d8>
   16864:	mov	r2, r6
   16868:	mov	r3, sl
   1686c:	b	16694 <__assert_fail@plt+0x5808>
   16870:	asr	r3, ip, #31
   16874:	mov	r2, ip
   16878:	cmp	r7, #0
   1687c:	mov	r1, #0
   16880:	strd	r2, [sp]
   16884:	bne	16be8 <__assert_fail@plt+0x5d5c>
   16888:	umull	r6, r7, r6, ip
   1688c:	mov	r0, r6
   16890:	mov	fp, r7
   16894:	cmp	r1, #0
   16898:	bne	16a64 <__assert_fail@plt+0x5bd8>
   1689c:	cmp	fp, #0
   168a0:	mov	lr, r1
   168a4:	beq	16688 <__assert_fail@plt+0x57fc>
   168a8:	umull	r6, r7, r0, ip
   168ac:	mov	r3, r1
   168b0:	mov	r2, r7
   168b4:	umlal	r2, r3, fp, ip
   168b8:	cmp	r3, #0
   168bc:	strd	r2, [sp, #16]
   168c0:	bne	16e48 <__assert_fail@plt+0x5fbc>
   168c4:	mov	r2, r6
   168c8:	ldr	r3, [sp, #16]
   168cc:	b	16694 <__assert_fail@plt+0x5808>
   168d0:	asr	r3, ip, #31
   168d4:	mov	r2, ip
   168d8:	cmp	r7, #0
   168dc:	mov	r1, #0
   168e0:	strd	r2, [sp]
   168e4:	bne	16c30 <__assert_fail@plt+0x5da4>
   168e8:	umull	r6, r7, r6, ip
   168ec:	mov	r2, r6
   168f0:	mov	r3, r7
   168f4:	cmp	r1, #0
   168f8:	bne	16a64 <__assert_fail@plt+0x5bd8>
   168fc:	cmp	r3, #0
   16900:	mov	lr, r1
   16904:	beq	1666c <__assert_fail@plt+0x57e0>
   16908:	umull	r6, r7, r2, ip
   1690c:	mov	fp, lr
   16910:	mov	sl, r7
   16914:	umlal	sl, fp, r3, ip
   16918:	cmp	fp, #0
   1691c:	bne	16f28 <__assert_fail@plt+0x609c>
   16920:	mov	r0, r6
   16924:	mov	r1, sl
   16928:	b	16678 <__assert_fail@plt+0x57ec>
   1692c:	asr	r3, ip, #31
   16930:	mov	r2, ip
   16934:	cmp	r7, #0
   16938:	mov	r1, #0
   1693c:	strd	r2, [sp]
   16940:	bne	16c0c <__assert_fail@plt+0x5d80>
   16944:	umull	r6, r7, r6, ip
   16948:	mov	sl, r6
   1694c:	mov	lr, r7
   16950:	cmp	r1, #0
   16954:	bne	16728 <__assert_fail@plt+0x589c>
   16958:	cmp	lr, #0
   1695c:	mov	r7, r1
   16960:	bne	16d20 <__assert_fail@plt+0x5e94>
   16964:	umull	sl, fp, sl, ip
   16968:	mov	r0, sl
   1696c:	mov	r2, fp
   16970:	cmp	r7, #0
   16974:	mov	r6, r0
   16978:	mov	r7, r2
   1697c:	beq	166e4 <__assert_fail@plt+0x5858>
   16980:	b	16728 <__assert_fail@plt+0x589c>
   16984:	asr	r3, ip, #31
   16988:	mov	r2, ip
   1698c:	cmp	r7, #0
   16990:	mov	r1, #0
   16994:	strd	r2, [sp]
   16998:	bne	16ba0 <__assert_fail@plt+0x5d14>
   1699c:	umull	r6, r7, r6, ip
   169a0:	mov	r0, r6
   169a4:	mov	fp, r7
   169a8:	cmp	r1, #0
   169ac:	bne	16a64 <__assert_fail@plt+0x5bd8>
   169b0:	cmp	fp, #0
   169b4:	mov	lr, r1
   169b8:	beq	16814 <__assert_fail@plt+0x5988>
   169bc:	umull	r6, r7, r0, ip
   169c0:	mov	r3, r1
   169c4:	mov	r2, r7
   169c8:	umlal	r2, r3, fp, ip
   169cc:	cmp	r3, #0
   169d0:	strd	r2, [sp, #16]
   169d4:	bne	16eb8 <__assert_fail@plt+0x602c>
   169d8:	mov	r2, r6
   169dc:	ldr	r3, [sp, #16]
   169e0:	b	16820 <__assert_fail@plt+0x5994>
   169e4:	lsr	r3, r7, #22
   169e8:	lsl	r7, r7, #10
   169ec:	cmp	r3, #0
   169f0:	lsl	r3, r6, #10
   169f4:	orr	r7, r7, r6, lsr #22
   169f8:	beq	1679c <__assert_fail@plt+0x5910>
   169fc:	b	16728 <__assert_fail@plt+0x589c>
   16a00:	asr	r3, ip, #31
   16a04:	mov	r2, ip
   16a08:	cmp	r7, #0
   16a0c:	mov	r1, #0
   16a10:	strd	r2, [sp]
   16a14:	bne	16b78 <__assert_fail@plt+0x5cec>
   16a18:	umull	r6, r7, r6, ip
   16a1c:	mov	r2, r6
   16a20:	mov	r3, r7
   16a24:	cmp	r1, #0
   16a28:	bne	16728 <__assert_fail@plt+0x589c>
   16a2c:	cmp	r3, #0
   16a30:	mov	r7, r1
   16a34:	bne	16cdc <__assert_fail@plt+0x5e50>
   16a38:	umull	r2, r3, r2, ip
   16a3c:	mov	r6, r2
   16a40:	mov	lr, r3
   16a44:	cmp	r7, #0
   16a48:	bne	16728 <__assert_fail@plt+0x589c>
   16a4c:	cmp	lr, #0
   16a50:	bne	16ca0 <__assert_fail@plt+0x5e14>
   16a54:	umull	r2, r3, r6, ip
   16a58:	mov	r0, r2
   16a5c:	mov	r2, r3
   16a60:	b	16970 <__assert_fail@plt+0x5ae4>
   16a64:	mvn	r6, #0
   16a68:	mov	r3, #1
   16a6c:	mov	r7, r6
   16a70:	b	166e0 <__assert_fail@plt+0x5854>
   16a74:	umull	sl, fp, r6, ip
   16a78:	mov	r3, lr
   16a7c:	mov	r2, fp
   16a80:	umlal	r2, r3, r7, ip
   16a84:	cmp	r3, #0
   16a88:	bne	16e80 <__assert_fail@plt+0x5ff4>
   16a8c:	mov	r6, sl
   16a90:	mov	r7, r2
   16a94:	b	16720 <__assert_fail@plt+0x5894>
   16a98:	mov	r3, #2
   16a9c:	mov	ip, #1000	; 0x3e8
   16aa0:	str	r3, [sp, #12]
   16aa4:	b	16514 <__assert_fail@plt+0x5688>
   16aa8:	umull	r0, r1, r6, ip
   16aac:	mov	r3, r7
   16ab0:	mov	r2, r1
   16ab4:	strd	r0, [sp, #16]
   16ab8:	umlal	r2, r3, lr, ip
   16abc:	cmp	r3, #0
   16ac0:	beq	166d0 <__assert_fail@plt+0x5844>
   16ac4:	ldrd	sl, [sp]
   16ac8:	mov	r7, #1
   16acc:	ldr	r0, [sp, #16]
   16ad0:	ldr	r3, [sp, #20]
   16ad4:	mul	r2, r6, fp
   16ad8:	mla	r2, lr, sl, r2
   16adc:	add	r2, r2, r3
   16ae0:	b	166d0 <__assert_fail@plt+0x5844>
   16ae4:	umull	sl, fp, r2, ip
   16ae8:	mov	r1, lr
   16aec:	mov	r0, fp
   16af0:	umlal	r0, r1, r3, ip
   16af4:	cmp	r1, #0
   16af8:	bne	16dd8 <__assert_fail@plt+0x5f4c>
   16afc:	mov	r6, sl
   16b00:	mov	lr, r0
   16b04:	b	166b4 <__assert_fail@plt+0x5828>
   16b08:	umull	sl, fp, r0, ip
   16b0c:	mov	r7, lr
   16b10:	mov	r6, fp
   16b14:	umlal	r6, r7, r1, ip
   16b18:	cmp	r7, #0
   16b1c:	bne	16f80 <__assert_fail@plt+0x60f4>
   16b20:	mov	r2, sl
   16b24:	mov	r3, r6
   16b28:	b	16694 <__assert_fail@plt+0x5808>
   16b2c:	umull	sl, fp, r2, ip
   16b30:	mov	r7, lr
   16b34:	mov	r6, fp
   16b38:	umlal	r6, r7, r3, ip
   16b3c:	cmp	r7, #0
   16b40:	bne	16e10 <__assert_fail@plt+0x5f84>
   16b44:	mov	r0, sl
   16b48:	mov	r1, r6
   16b4c:	b	1683c <__assert_fail@plt+0x59b0>
   16b50:	umull	sl, fp, r6, ip
   16b54:	mov	r3, r1
   16b58:	mov	r2, fp
   16b5c:	umlal	r2, r3, r7, ip
   16b60:	cmp	r3, #0
   16b64:	strd	r2, [sp, #16]
   16b68:	bne	16df4 <__assert_fail@plt+0x5f68>
   16b6c:	mov	r2, sl
   16b70:	ldr	r3, [sp, #16]
   16b74:	b	16620 <__assert_fail@plt+0x5794>
   16b78:	umull	sl, fp, r6, ip
   16b7c:	mov	r3, r1
   16b80:	mov	r2, fp
   16b84:	umlal	r2, r3, r7, ip
   16b88:	cmp	r3, #0
   16b8c:	strd	r2, [sp, #16]
   16b90:	bne	16ed4 <__assert_fail@plt+0x6048>
   16b94:	mov	r2, sl
   16b98:	ldr	r3, [sp, #16]
   16b9c:	b	16a24 <__assert_fail@plt+0x5b98>
   16ba0:	umull	sl, fp, r6, ip
   16ba4:	mov	r3, r1
   16ba8:	mov	r2, fp
   16bac:	umlal	r2, r3, r7, ip
   16bb0:	cmp	r3, #0
   16bb4:	bne	16da0 <__assert_fail@plt+0x5f14>
   16bb8:	mov	r0, sl
   16bbc:	mov	fp, r2
   16bc0:	b	169a8 <__assert_fail@plt+0x5b1c>
   16bc4:	umull	sl, fp, r6, ip
   16bc8:	mov	r3, r1
   16bcc:	mov	r2, fp
   16bd0:	umlal	r2, r3, r7, ip
   16bd4:	cmp	r3, #0
   16bd8:	bne	16e64 <__assert_fail@plt+0x5fd8>
   16bdc:	mov	r0, sl
   16be0:	mov	fp, r2
   16be4:	b	167c8 <__assert_fail@plt+0x593c>
   16be8:	umull	sl, fp, r6, ip
   16bec:	mov	r3, r1
   16bf0:	mov	r2, fp
   16bf4:	umlal	r2, r3, r7, ip
   16bf8:	cmp	r3, #0
   16bfc:	bne	16ef0 <__assert_fail@plt+0x6064>
   16c00:	mov	r0, sl
   16c04:	mov	fp, r2
   16c08:	b	16894 <__assert_fail@plt+0x5a08>
   16c0c:	umull	sl, fp, r6, ip
   16c10:	mov	r3, r1
   16c14:	mov	r2, fp
   16c18:	strd	sl, [sp, #16]
   16c1c:	umlal	r2, r3, r7, ip
   16c20:	cmp	r3, #0
   16c24:	bne	16e98 <__assert_fail@plt+0x600c>
   16c28:	mov	lr, r2
   16c2c:	b	16950 <__assert_fail@plt+0x5ac4>
   16c30:	umull	sl, fp, r6, ip
   16c34:	mov	r3, r1
   16c38:	mov	r2, fp
   16c3c:	umlal	r2, r3, r7, ip
   16c40:	cmp	r3, #0
   16c44:	strd	r2, [sp, #16]
   16c48:	bne	16f9c <__assert_fail@plt+0x6110>
   16c4c:	mov	r2, sl
   16c50:	ldr	r3, [sp, #16]
   16c54:	b	168f4 <__assert_fail@plt+0x5a68>
   16c58:	umull	sl, fp, r0, ip
   16c5c:	mov	r7, lr
   16c60:	mov	r6, fp
   16c64:	umlal	r6, r7, r1, ip
   16c68:	cmp	r7, #0
   16c6c:	bne	16fb8 <__assert_fail@plt+0x612c>
   16c70:	mov	r2, sl
   16c74:	mov	r3, r6
   16c78:	b	1665c <__assert_fail@plt+0x57d0>
   16c7c:	umull	r6, r7, r2, ip
   16c80:	mov	fp, r1
   16c84:	mov	sl, r7
   16c88:	umlal	sl, fp, r3, ip
   16c8c:	cmp	fp, #0
   16c90:	bne	16e2c <__assert_fail@plt+0x5fa0>
   16c94:	mov	r0, r6
   16c98:	mov	r1, sl
   16c9c:	b	16640 <__assert_fail@plt+0x57b4>
   16ca0:	umull	r0, r1, r6, ip
   16ca4:	mov	r3, r7
   16ca8:	mov	r2, r1
   16cac:	strd	r0, [sp, #16]
   16cb0:	umlal	r2, r3, lr, ip
   16cb4:	cmp	r3, #0
   16cb8:	beq	16970 <__assert_fail@plt+0x5ae4>
   16cbc:	ldrd	sl, [sp]
   16cc0:	mov	r7, #1
   16cc4:	ldr	r0, [sp, #16]
   16cc8:	ldr	r3, [sp, #20]
   16ccc:	mul	r2, r6, fp
   16cd0:	mla	r2, lr, sl, r2
   16cd4:	add	r2, r2, r3
   16cd8:	b	16970 <__assert_fail@plt+0x5ae4>
   16cdc:	umull	sl, fp, r2, ip
   16ce0:	mov	r0, fp
   16ce4:	umlal	r0, r1, r3, ip
   16ce8:	cmp	r1, #0
   16cec:	bne	16fd4 <__assert_fail@plt+0x6148>
   16cf0:	mov	r6, sl
   16cf4:	mov	lr, r0
   16cf8:	b	16a44 <__assert_fail@plt+0x5bb8>
   16cfc:	umull	r6, r7, r0, ip
   16d00:	mov	fp, lr
   16d04:	mov	sl, r7
   16d08:	umlal	sl, fp, r1, ip
   16d0c:	cmp	fp, #0
   16d10:	bne	16f0c <__assert_fail@plt+0x6080>
   16d14:	mov	r2, r6
   16d18:	mov	r3, sl
   16d1c:	b	16820 <__assert_fail@plt+0x5994>
   16d20:	umull	r0, r1, sl, ip
   16d24:	mov	r3, r7
   16d28:	mov	r2, r1
   16d2c:	umlal	r2, r3, lr, ip
   16d30:	cmp	r3, #0
   16d34:	beq	16970 <__assert_fail@plt+0x5ae4>
   16d38:	ldr	r3, [sp, #4]
   16d3c:	mov	r7, #1
   16d40:	mul	r2, sl, r3
   16d44:	ldr	r3, [sp]
   16d48:	mla	r2, lr, r3, r2
   16d4c:	add	r2, r2, r1
   16d50:	b	16970 <__assert_fail@plt+0x5ae4>
   16d54:	umull	r6, r7, r0, ip
   16d58:	mov	r3, r1
   16d5c:	mov	r2, r7
   16d60:	umlal	r2, r3, fp, ip
   16d64:	cmp	r3, #0
   16d68:	strd	r2, [sp, #16]
   16d6c:	bne	16ff0 <__assert_fail@plt+0x6164>
   16d70:	mov	r2, r6
   16d74:	ldr	r3, [sp, #16]
   16d78:	b	167e8 <__assert_fail@plt+0x595c>
   16d7c:	umull	sl, fp, r2, ip
   16d80:	mov	r7, lr
   16d84:	mov	r6, fp
   16d88:	umlal	r6, r7, r3, ip
   16d8c:	cmp	r7, #0
   16d90:	bne	16dbc <__assert_fail@plt+0x5f30>
   16d94:	mov	r0, sl
   16d98:	mov	r1, r6
   16d9c:	b	16804 <__assert_fail@plt+0x5978>
   16da0:	ldrd	r2, [sp]
   16da4:	mov	r0, sl
   16da8:	mov	r1, #1
   16dac:	mul	r6, r6, r3
   16db0:	mla	r7, r2, r7, r6
   16db4:	add	fp, r7, fp
   16db8:	b	169a8 <__assert_fail@plt+0x5b1c>
   16dbc:	ldrd	r6, [sp]
   16dc0:	mov	r0, sl
   16dc4:	mov	lr, #1
   16dc8:	mul	r2, r2, r7
   16dcc:	mla	r1, r3, r6, r2
   16dd0:	add	r1, r1, fp
   16dd4:	b	16804 <__assert_fail@plt+0x5978>
   16dd8:	ldrd	r0, [sp]
   16ddc:	mov	r6, sl
   16de0:	mov	r7, #1
   16de4:	mul	r2, r2, r1
   16de8:	mla	lr, r3, r0, r2
   16dec:	add	lr, lr, fp
   16df0:	b	166b4 <__assert_fail@plt+0x5828>
   16df4:	ldm	sp, {r0, r3}
   16df8:	mov	r2, sl
   16dfc:	mov	r1, #1
   16e00:	mul	r3, r6, r3
   16e04:	mla	r3, r0, r7, r3
   16e08:	add	r3, r3, fp
   16e0c:	b	16620 <__assert_fail@plt+0x5794>
   16e10:	ldrd	r6, [sp]
   16e14:	mov	r0, sl
   16e18:	mov	lr, #1
   16e1c:	mul	r2, r2, r7
   16e20:	mla	r1, r3, r6, r2
   16e24:	add	r1, r1, fp
   16e28:	b	1683c <__assert_fail@plt+0x59b0>
   16e2c:	ldrd	sl, [sp]
   16e30:	mov	r0, r6
   16e34:	mov	lr, #1
   16e38:	mul	r2, r2, fp
   16e3c:	mla	r1, r3, sl, r2
   16e40:	add	r1, r1, r7
   16e44:	b	16640 <__assert_fail@plt+0x57b4>
   16e48:	ldm	sp, {r1, r3}
   16e4c:	mov	r2, r6
   16e50:	mov	lr, #1
   16e54:	mul	r3, r0, r3
   16e58:	mla	r3, fp, r1, r3
   16e5c:	add	r3, r3, r7
   16e60:	b	16694 <__assert_fail@plt+0x5808>
   16e64:	ldrd	r2, [sp]
   16e68:	mov	r0, sl
   16e6c:	mov	r1, #1
   16e70:	mul	r6, r6, r3
   16e74:	mla	r7, r2, r7, r6
   16e78:	add	fp, r7, fp
   16e7c:	b	167c8 <__assert_fail@plt+0x593c>
   16e80:	mul	r3, r6, r1
   16e84:	mov	lr, #1
   16e88:	mov	r6, sl
   16e8c:	mla	r7, ip, r7, r3
   16e90:	add	r7, r7, fp
   16e94:	b	16720 <__assert_fail@plt+0x5894>
   16e98:	ldrd	r2, [sp]
   16e9c:	mov	r1, #1
   16ea0:	ldr	sl, [sp, #16]
   16ea4:	mul	lr, r6, r3
   16ea8:	ldr	r3, [sp, #20]
   16eac:	mla	lr, r2, r7, lr
   16eb0:	add	lr, lr, r3
   16eb4:	b	16950 <__assert_fail@plt+0x5ac4>
   16eb8:	ldm	sp, {r1, r3}
   16ebc:	mov	r2, r6
   16ec0:	mov	lr, #1
   16ec4:	mul	r3, r0, r3
   16ec8:	mla	r3, fp, r1, r3
   16ecc:	add	r3, r3, r7
   16ed0:	b	16820 <__assert_fail@plt+0x5994>
   16ed4:	ldm	sp, {r0, r3}
   16ed8:	mov	r2, sl
   16edc:	mov	r1, #1
   16ee0:	mul	r3, r6, r3
   16ee4:	mla	r3, r0, r7, r3
   16ee8:	add	r3, r3, fp
   16eec:	b	16a24 <__assert_fail@plt+0x5b98>
   16ef0:	ldrd	r2, [sp]
   16ef4:	mov	r0, sl
   16ef8:	mov	r1, #1
   16efc:	mul	r6, r6, r3
   16f00:	mla	r7, r2, r7, r6
   16f04:	add	fp, r7, fp
   16f08:	b	16894 <__assert_fail@plt+0x5a08>
   16f0c:	ldrd	sl, [sp]
   16f10:	mov	r2, r6
   16f14:	mov	lr, #1
   16f18:	mul	r3, r0, fp
   16f1c:	mla	r3, r1, sl, r3
   16f20:	add	r3, r3, r7
   16f24:	b	16820 <__assert_fail@plt+0x5994>
   16f28:	ldrd	sl, [sp]
   16f2c:	mov	r0, r6
   16f30:	mov	lr, #1
   16f34:	mul	r2, r2, fp
   16f38:	mla	r1, r3, sl, r2
   16f3c:	add	r1, r1, r7
   16f40:	b	16678 <__assert_fail@plt+0x57ec>
   16f44:	movw	r3, #32516	; 0x7f04
   16f48:	movt	r3, #1
   16f4c:	movw	r1, #32528	; 0x7f10
   16f50:	movt	r1, #1
   16f54:	movw	r0, #32544	; 0x7f20
   16f58:	movt	r0, #1
   16f5c:	mov	r2, #85	; 0x55
   16f60:	bl	10e8c <__assert_fail@plt>
   16f64:	ldrd	sl, [sp]
   16f68:	mov	r2, r6
   16f6c:	mov	lr, #1
   16f70:	mul	r3, r0, fp
   16f74:	mla	r3, r1, sl, r3
   16f78:	add	r3, r3, r7
   16f7c:	b	16694 <__assert_fail@plt+0x5808>
   16f80:	ldrd	r6, [sp]
   16f84:	mov	r2, sl
   16f88:	mov	lr, #1
   16f8c:	mul	r3, r0, r7
   16f90:	mla	r3, r1, r6, r3
   16f94:	add	r3, r3, fp
   16f98:	b	16694 <__assert_fail@plt+0x5808>
   16f9c:	ldm	sp, {r0, r3}
   16fa0:	mov	r2, sl
   16fa4:	mov	r1, #1
   16fa8:	mul	r3, r6, r3
   16fac:	mla	r3, r0, r7, r3
   16fb0:	add	r3, r3, fp
   16fb4:	b	168f4 <__assert_fail@plt+0x5a68>
   16fb8:	ldrd	r6, [sp]
   16fbc:	mov	r2, sl
   16fc0:	mov	lr, #1
   16fc4:	mul	r3, r0, r7
   16fc8:	mla	r3, r1, r6, r3
   16fcc:	add	r3, r3, fp
   16fd0:	b	1665c <__assert_fail@plt+0x57d0>
   16fd4:	ldrd	r0, [sp]
   16fd8:	mov	r6, sl
   16fdc:	mov	r7, #1
   16fe0:	mul	r2, r2, r1
   16fe4:	mla	lr, r3, r0, r2
   16fe8:	add	lr, lr, fp
   16fec:	b	16a44 <__assert_fail@plt+0x5bb8>
   16ff0:	ldm	sp, {r1, r3}
   16ff4:	mov	r2, r6
   16ff8:	mov	lr, #1
   16ffc:	mul	r3, r0, r3
   17000:	mla	r3, fp, r1, r3
   17004:	add	r3, r3, r7
   17008:	b	167e8 <__assert_fail@plt+0x595c>
   1700c:	cmp	r1, #0
   17010:	cmpne	r0, #0
   17014:	beq	17060 <__assert_fail@plt+0x61d4>
   17018:	strd	r4, [sp, #-16]!
   1701c:	umull	r4, r5, r0, r1
   17020:	str	r6, [sp, #8]
   17024:	str	lr, [sp, #12]
   17028:	adds	r3, r5, #0
   1702c:	movne	r3, #1
   17030:	cmp	r4, #0
   17034:	blt	17040 <__assert_fail@plt+0x61b4>
   17038:	cmp	r3, #0
   1703c:	beq	1706c <__assert_fail@plt+0x61e0>
   17040:	bl	10dd8 <__errno_location@plt>
   17044:	mov	r3, #12
   17048:	ldrd	r4, [sp]
   1704c:	ldr	r6, [sp, #8]
   17050:	add	sp, sp, #12
   17054:	str	r3, [r0]
   17058:	mov	r0, #0
   1705c:	pop	{pc}		; (ldr pc, [sp], #4)
   17060:	mov	r1, #1
   17064:	mov	r0, r1
   17068:	b	10c40 <calloc@plt>
   1706c:	ldrd	r4, [sp]
   17070:	ldr	r6, [sp, #8]
   17074:	ldr	lr, [sp, #12]
   17078:	add	sp, sp, #16
   1707c:	b	10c40 <calloc@plt>
   17080:	cmp	r0, #0
   17084:	beq	17090 <__assert_fail@plt+0x6204>
   17088:	blt	17098 <__assert_fail@plt+0x620c>
   1708c:	b	10d60 <malloc@plt>
   17090:	mov	r0, #1
   17094:	b	10d60 <malloc@plt>
   17098:	str	r4, [sp, #-8]!
   1709c:	str	lr, [sp, #4]
   170a0:	bl	10dd8 <__errno_location@plt>
   170a4:	mov	r3, #12
   170a8:	ldr	r4, [sp]
   170ac:	add	sp, sp, #4
   170b0:	str	r3, [r0]
   170b4:	mov	r0, #0
   170b8:	pop	{pc}		; (ldr pc, [sp], #4)
   170bc:	cmp	r0, #0
   170c0:	beq	170e8 <__assert_fail@plt+0x625c>
   170c4:	cmp	r1, #0
   170c8:	str	r4, [sp, #-8]!
   170cc:	str	lr, [sp, #4]
   170d0:	beq	170f0 <__assert_fail@plt+0x6264>
   170d4:	blt	17104 <__assert_fail@plt+0x6278>
   170d8:	ldr	r4, [sp]
   170dc:	ldr	lr, [sp, #4]
   170e0:	add	sp, sp, #8
   170e4:	b	10ce8 <realloc@plt>
   170e8:	mov	r0, r1
   170ec:	b	17080 <__assert_fail@plt+0x61f4>
   170f0:	bl	172b0 <__assert_fail@plt+0x6424>
   170f4:	ldr	r4, [sp]
   170f8:	add	sp, sp, #4
   170fc:	mov	r0, #0
   17100:	pop	{pc}		; (ldr pc, [sp], #4)
   17104:	bl	10dd8 <__errno_location@plt>
   17108:	mov	r3, #12
   1710c:	str	r3, [r0]
   17110:	b	170f4 <__assert_fail@plt+0x6268>
   17114:	strd	r4, [sp, #-16]!
   17118:	mov	r4, r0
   1711c:	str	r6, [sp, #8]
   17120:	str	lr, [sp, #12]
   17124:	bl	10d30 <__fpending@plt>
   17128:	ldr	r5, [r4]
   1712c:	mov	r6, r0
   17130:	mov	r0, r4
   17134:	bl	1719c <__assert_fail@plt+0x6310>
   17138:	mov	r4, r0
   1713c:	and	r5, r5, #32
   17140:	cmp	r5, #0
   17144:	bne	1717c <__assert_fail@plt+0x62f0>
   17148:	cmp	r0, #0
   1714c:	beq	17168 <__assert_fail@plt+0x62dc>
   17150:	cmp	r6, #0
   17154:	bne	17194 <__assert_fail@plt+0x6308>
   17158:	bl	10dd8 <__errno_location@plt>
   1715c:	ldr	r4, [r0]
   17160:	subs	r4, r4, #9
   17164:	mvnne	r4, #0
   17168:	mov	r0, r4
   1716c:	ldrd	r4, [sp]
   17170:	ldr	r6, [sp, #8]
   17174:	add	sp, sp, #12
   17178:	pop	{pc}		; (ldr pc, [sp], #4)
   1717c:	cmp	r0, #0
   17180:	bne	17194 <__assert_fail@plt+0x6308>
   17184:	bl	10dd8 <__errno_location@plt>
   17188:	str	r4, [r0]
   1718c:	mvn	r4, #0
   17190:	b	17168 <__assert_fail@plt+0x62dc>
   17194:	mvn	r4, #0
   17198:	b	17168 <__assert_fail@plt+0x62dc>
   1719c:	strd	r4, [sp, #-12]!
   171a0:	mov	r4, r0
   171a4:	str	lr, [sp, #8]
   171a8:	sub	sp, sp, #12
   171ac:	bl	10e08 <fileno@plt>
   171b0:	cmp	r0, #0
   171b4:	mov	r0, r4
   171b8:	blt	1723c <__assert_fail@plt+0x63b0>
   171bc:	bl	10d78 <__freading@plt>
   171c0:	cmp	r0, #0
   171c4:	bne	17208 <__assert_fail@plt+0x637c>
   171c8:	mov	r0, r4
   171cc:	bl	17250 <__assert_fail@plt+0x63c4>
   171d0:	cmp	r0, #0
   171d4:	beq	17238 <__assert_fail@plt+0x63ac>
   171d8:	bl	10dd8 <__errno_location@plt>
   171dc:	mov	r5, r0
   171e0:	mov	r0, r4
   171e4:	ldr	r4, [r5]
   171e8:	bl	10e20 <fclose@plt>
   171ec:	cmp	r4, #0
   171f0:	mvnne	r0, #0
   171f4:	strne	r4, [r5]
   171f8:	add	sp, sp, #12
   171fc:	ldrd	r4, [sp]
   17200:	add	sp, sp, #8
   17204:	pop	{pc}		; (ldr pc, [sp], #4)
   17208:	mov	r0, r4
   1720c:	bl	10e08 <fileno@plt>
   17210:	mov	r1, #1
   17214:	mov	r2, #0
   17218:	mov	r3, #0
   1721c:	str	r1, [sp]
   17220:	bl	10d18 <lseek64@plt>
   17224:	mvn	r3, #0
   17228:	mvn	r2, #0
   1722c:	cmp	r1, r3
   17230:	cmpeq	r0, r2
   17234:	bne	171c8 <__assert_fail@plt+0x633c>
   17238:	mov	r0, r4
   1723c:	add	sp, sp, #12
   17240:	ldrd	r4, [sp]
   17244:	ldr	lr, [sp, #8]
   17248:	add	sp, sp, #12
   1724c:	b	10e20 <fclose@plt>
   17250:	str	r4, [sp, #-8]!
   17254:	subs	r4, r0, #0
   17258:	str	lr, [sp, #4]
   1725c:	sub	sp, sp, #8
   17260:	beq	1727c <__assert_fail@plt+0x63f0>
   17264:	bl	10d78 <__freading@plt>
   17268:	cmp	r0, #0
   1726c:	beq	1727c <__assert_fail@plt+0x63f0>
   17270:	ldr	r3, [r4]
   17274:	tst	r3, #256	; 0x100
   17278:	bne	17294 <__assert_fail@plt+0x6408>
   1727c:	mov	r0, r4
   17280:	add	sp, sp, #8
   17284:	ldr	r4, [sp]
   17288:	ldr	lr, [sp, #4]
   1728c:	add	sp, sp, #8
   17290:	b	10c64 <fflush@plt>
   17294:	mov	r1, #1
   17298:	mov	r2, #0
   1729c:	mov	r3, #0
   172a0:	mov	r0, r4
   172a4:	str	r1, [sp]
   172a8:	bl	17310 <__assert_fail@plt+0x6484>
   172ac:	b	1727c <__assert_fail@plt+0x63f0>
   172b0:	strd	r4, [sp, #-12]!
   172b4:	mov	r5, r0
   172b8:	str	lr, [sp, #8]
   172bc:	sub	sp, sp, #12
   172c0:	bl	10dd8 <__errno_location@plt>
   172c4:	mov	r4, r0
   172c8:	mov	r2, #0
   172cc:	ldr	r3, [r4]
   172d0:	mov	r0, r5
   172d4:	str	r2, [r4]
   172d8:	str	r3, [sp]
   172dc:	str	r3, [sp, #4]
   172e0:	bl	10c70 <free@plt>
   172e4:	ldr	r3, [r4]
   172e8:	add	r2, sp, #8
   172ec:	clz	r3, r3
   172f0:	lsr	r3, r3, #5
   172f4:	add	r3, r2, r3, lsl #2
   172f8:	ldr	r3, [r3, #-8]
   172fc:	str	r3, [r4]
   17300:	add	sp, sp, #12
   17304:	ldrd	r4, [sp]
   17308:	add	sp, sp, #8
   1730c:	pop	{pc}		; (ldr pc, [sp], #4)
   17310:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17314:	mov	r4, r0
   17318:	ldr	ip, [r0, #4]
   1731c:	strd	r6, [sp, #8]
   17320:	str	lr, [sp, #20]
   17324:	ldr	lr, [r0, #8]
   17328:	str	r8, [sp, #16]
   1732c:	sub	sp, sp, #8
   17330:	ldr	r5, [sp, #32]
   17334:	cmp	lr, ip
   17338:	beq	17360 <__assert_fail@plt+0x64d4>
   1733c:	mov	r0, r4
   17340:	str	r5, [sp, #32]
   17344:	add	sp, sp, #8
   17348:	ldrd	r4, [sp]
   1734c:	ldrd	r6, [sp, #8]
   17350:	ldr	r8, [sp, #16]
   17354:	ldr	lr, [sp, #20]
   17358:	add	sp, sp, #24
   1735c:	b	10e2c <fseeko64@plt>
   17360:	ldr	ip, [r0, #16]
   17364:	ldr	lr, [r0, #20]
   17368:	cmp	lr, ip
   1736c:	bne	1733c <__assert_fail@plt+0x64b0>
   17370:	ldr	r8, [r0, #36]	; 0x24
   17374:	cmp	r8, #0
   17378:	bne	1733c <__assert_fail@plt+0x64b0>
   1737c:	mov	r6, r2
   17380:	mov	r7, r3
   17384:	bl	10e08 <fileno@plt>
   17388:	mov	r2, r6
   1738c:	mov	r3, r7
   17390:	str	r5, [sp]
   17394:	bl	10d18 <lseek64@plt>
   17398:	mvn	r3, #0
   1739c:	mvn	r2, #0
   173a0:	cmp	r1, r3
   173a4:	cmpeq	r0, r2
   173a8:	beq	173d8 <__assert_fail@plt+0x654c>
   173ac:	ldr	r3, [r4]
   173b0:	strd	r0, [r4, #80]	; 0x50
   173b4:	bic	r3, r3, #16
   173b8:	str	r3, [r4]
   173bc:	mov	r0, r8
   173c0:	add	sp, sp, #8
   173c4:	ldrd	r4, [sp]
   173c8:	ldrd	r6, [sp, #8]
   173cc:	ldr	r8, [sp, #16]
   173d0:	add	sp, sp, #20
   173d4:	pop	{pc}		; (ldr pc, [sp], #4)
   173d8:	mvn	r8, #0
   173dc:	b	173bc <__assert_fail@plt+0x6530>
   173e0:	mov	r0, #14
   173e4:	str	r4, [sp, #-8]!
   173e8:	str	lr, [sp, #4]
   173ec:	bl	10e50 <nl_langinfo@plt>
   173f0:	cmp	r0, #0
   173f4:	beq	17418 <__assert_fail@plt+0x658c>
   173f8:	ldrb	r2, [r0]
   173fc:	movw	r3, #32584	; 0x7f48
   17400:	movt	r3, #1
   17404:	ldr	r4, [sp]
   17408:	add	sp, sp, #4
   1740c:	cmp	r2, #0
   17410:	moveq	r0, r3
   17414:	pop	{pc}		; (ldr pc, [sp], #4)
   17418:	ldr	r4, [sp]
   1741c:	add	sp, sp, #4
   17420:	movw	r0, #32584	; 0x7f48
   17424:	movt	r0, #1
   17428:	pop	{pc}		; (ldr pc, [sp], #4)
   1742c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17430:	mov	r5, r2
   17434:	strd	r6, [sp, #8]
   17438:	subs	r6, r0, #0
   1743c:	mov	r7, r1
   17440:	str	lr, [sp, #16]
   17444:	sub	sp, sp, #12
   17448:	addeq	r6, sp, #4
   1744c:	mov	r0, r6
   17450:	bl	10d3c <mbrtowc@plt>
   17454:	cmp	r5, #0
   17458:	cmnne	r0, #3
   1745c:	mov	r4, r0
   17460:	bhi	1747c <__assert_fail@plt+0x65f0>
   17464:	mov	r0, r4
   17468:	add	sp, sp, #12
   1746c:	ldrd	r4, [sp]
   17470:	ldrd	r6, [sp, #8]
   17474:	add	sp, sp, #16
   17478:	pop	{pc}		; (ldr pc, [sp], #4)
   1747c:	mov	r0, #0
   17480:	bl	174d4 <__assert_fail@plt+0x6648>
   17484:	cmp	r0, #0
   17488:	bne	17464 <__assert_fail@plt+0x65d8>
   1748c:	ldrb	r3, [r7]
   17490:	mov	r4, #1
   17494:	str	r3, [r6]
   17498:	b	17464 <__assert_fail@plt+0x65d8>
   1749c:	umull	r2, r3, r1, r2
   174a0:	cmp	r3, #0
   174a4:	bne	174b0 <__assert_fail@plt+0x6624>
   174a8:	mov	r1, r2
   174ac:	b	170bc <__assert_fail@plt+0x6230>
   174b0:	str	r4, [sp, #-8]!
   174b4:	str	lr, [sp, #4]
   174b8:	bl	10dd8 <__errno_location@plt>
   174bc:	mov	r3, #12
   174c0:	ldr	r4, [sp]
   174c4:	add	sp, sp, #4
   174c8:	str	r3, [r0]
   174cc:	mov	r0, #0
   174d0:	pop	{pc}		; (ldr pc, [sp], #4)
   174d4:	push	{lr}		; (str lr, [sp, #-4]!)
   174d8:	sub	sp, sp, #268	; 0x10c
   174dc:	movw	r2, #257	; 0x101
   174e0:	add	r1, sp, #4
   174e4:	bl	1752c <__assert_fail@plt+0x66a0>
   174e8:	cmp	r0, #0
   174ec:	movne	r0, #0
   174f0:	bne	17524 <__assert_fail@plt+0x6698>
   174f4:	movw	r1, #32592	; 0x7f50
   174f8:	movt	r1, #1
   174fc:	add	r0, sp, #4
   17500:	bl	10c58 <strcmp@plt>
   17504:	cmp	r0, #0
   17508:	beq	17524 <__assert_fail@plt+0x6698>
   1750c:	add	r0, sp, #4
   17510:	movw	r1, #32596	; 0x7f54
   17514:	movt	r1, #1
   17518:	bl	10c58 <strcmp@plt>
   1751c:	adds	r0, r0, #0
   17520:	movne	r0, #1
   17524:	add	sp, sp, #268	; 0x10c
   17528:	pop	{pc}		; (ldr pc, [sp], #4)
   1752c:	strd	r4, [sp, #-16]!
   17530:	mov	r5, r1
   17534:	mov	r1, #0
   17538:	mov	r4, r2
   1753c:	str	r6, [sp, #8]
   17540:	str	lr, [sp, #12]
   17544:	bl	10e38 <setlocale@plt>
   17548:	subs	r6, r0, #0
   1754c:	beq	175cc <__assert_fail@plt+0x6740>
   17550:	bl	10dc0 <strlen@plt>
   17554:	cmp	r4, r0
   17558:	bhi	17578 <__assert_fail@plt+0x66ec>
   1755c:	cmp	r4, #0
   17560:	moveq	r0, #34	; 0x22
   17564:	bne	1759c <__assert_fail@plt+0x6710>
   17568:	ldrd	r4, [sp]
   1756c:	ldr	r6, [sp, #8]
   17570:	add	sp, sp, #12
   17574:	pop	{pc}		; (ldr pc, [sp], #4)
   17578:	add	r2, r0, #1
   1757c:	mov	r1, r6
   17580:	mov	r0, r5
   17584:	bl	10c88 <memcpy@plt>
   17588:	ldrd	r4, [sp]
   1758c:	mov	r0, #0
   17590:	ldr	r6, [sp, #8]
   17594:	add	sp, sp, #12
   17598:	pop	{pc}		; (ldr pc, [sp], #4)
   1759c:	sub	r4, r4, #1
   175a0:	mov	r1, r6
   175a4:	mov	r2, r4
   175a8:	mov	r0, r5
   175ac:	bl	10c88 <memcpy@plt>
   175b0:	mov	r3, #0
   175b4:	mov	r0, #34	; 0x22
   175b8:	strb	r3, [r5, r4]
   175bc:	ldrd	r4, [sp]
   175c0:	ldr	r6, [sp, #8]
   175c4:	add	sp, sp, #12
   175c8:	pop	{pc}		; (ldr pc, [sp], #4)
   175cc:	cmp	r4, #0
   175d0:	mov	r0, #22
   175d4:	strbne	r6, [r5]
   175d8:	ldrd	r4, [sp]
   175dc:	ldr	r6, [sp, #8]
   175e0:	add	sp, sp, #12
   175e4:	pop	{pc}		; (ldr pc, [sp], #4)
   175e8:	mov	r1, #0
   175ec:	b	10e38 <setlocale@plt>
   175f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175f4:	mov	r7, r0
   175f8:	ldr	r6, [pc, #72]	; 17648 <__assert_fail@plt+0x67bc>
   175fc:	ldr	r5, [pc, #72]	; 1764c <__assert_fail@plt+0x67c0>
   17600:	add	r6, pc, r6
   17604:	add	r5, pc, r5
   17608:	sub	r6, r6, r5
   1760c:	mov	r8, r1
   17610:	mov	r9, r2
   17614:	bl	10c20 <calloc@plt-0x20>
   17618:	asrs	r6, r6, #2
   1761c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17620:	mov	r4, #0
   17624:	add	r4, r4, #1
   17628:	ldr	r3, [r5], #4
   1762c:	mov	r2, r9
   17630:	mov	r1, r8
   17634:	mov	r0, r7
   17638:	blx	r3
   1763c:	cmp	r6, r4
   17640:	bne	17624 <__assert_fail@plt+0x6798>
   17644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17648:	andeq	r1, r1, ip, lsl #18
   1764c:	andeq	r1, r1, r4, lsl #18
   17650:	bx	lr
   17654:	ldr	r3, [pc, #12]	; 17668 <__assert_fail@plt+0x67dc>
   17658:	mov	r1, #0
   1765c:	add	r3, pc, r3
   17660:	ldr	r2, [r3]
   17664:	b	10de4 <__cxa_atexit@plt>
   17668:	andeq	r1, r1, r8, ror sl

Disassembly of section .fini:

0001766c <.fini>:
   1766c:	push	{r3, lr}
   17670:	pop	{r3, pc}
