
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

00000564 <.init>:
 564:	push	{r3, lr}
 568:	bl	5f0 <bloom_init@plt+0xc>
 56c:	pop	{r3, pc}

Disassembly of section .plt:

00000570 <calloc@plt-0x14>:
 570:	push	{lr}		; (str lr, [sp, #-4]!)
 574:	ldr	lr, [pc, #4]	; 580 <calloc@plt-0x4>
 578:	add	lr, pc, lr
 57c:	ldr	pc, [lr, #8]!
 580:	andeq	r1, r1, r0, lsl #21

00000584 <calloc@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #69632	; 0x11000
 58c:	ldr	pc, [ip, #2688]!	; 0xa80

00000590 <log@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #69632	; 0x11000
 598:	ldr	pc, [ip, #2680]!	; 0xa78

0000059c <__cxa_finalize@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #69632	; 0x11000
 5a4:	ldr	pc, [ip, #2672]!	; 0xa70

000005a8 <printf@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #69632	; 0x11000
 5b0:	ldr	pc, [ip, #2664]!	; 0xa68

000005b4 <murmurhash2@plt>:
 5b4:	add	ip, pc, #0, 12
 5b8:	add	ip, ip, #69632	; 0x11000
 5bc:	ldr	pc, [ip, #2656]!	; 0xa60

000005c0 <free@plt>:
 5c0:	add	ip, pc, #0, 12
 5c4:	add	ip, ip, #69632	; 0x11000
 5c8:	ldr	pc, [ip, #2648]!	; 0xa58

000005cc <__gmon_start__@plt>:
 5cc:	add	ip, pc, #0, 12
 5d0:	add	ip, ip, #69632	; 0x11000
 5d4:	ldr	pc, [ip, #2640]!	; 0xa50

000005d8 <memset@plt>:
 5d8:	add	ip, pc, #0, 12
 5dc:	add	ip, ip, #69632	; 0x11000
 5e0:	ldr	pc, [ip, #2632]!	; 0xa48

000005e4 <bloom_init@plt>:
 5e4:	add	ip, pc, #0, 12
 5e8:	add	ip, ip, #69632	; 0x11000
 5ec:	ldr	pc, [ip, #2624]!	; 0xa40

Disassembly of section .text:

000005f0 <bloom_init_size@@Base-0x128>:
 5f0:	ldr	r3, [pc, #20]	; 60c <bloom_init@plt+0x28>
 5f4:	ldr	r2, [pc, #20]	; 610 <bloom_init@plt+0x2c>
 5f8:	add	r3, pc, r3
 5fc:	ldr	r2, [r3, r2]
 600:	cmp	r2, #0
 604:	bxeq	lr
 608:	b	5cc <__gmon_start__@plt>
 60c:	andeq	r1, r1, r0, lsl #20
 610:	andeq	r0, r0, r8, lsr r0
 614:	ldr	r0, [pc, #44]	; 648 <bloom_init@plt+0x64>
 618:	ldr	r3, [pc, #44]	; 64c <bloom_init@plt+0x68>
 61c:	add	r0, pc, r0
 620:	add	r3, pc, r3
 624:	cmp	r3, r0
 628:	ldr	r3, [pc, #32]	; 650 <bloom_init@plt+0x6c>
 62c:	add	r3, pc, r3
 630:	bxeq	lr
 634:	ldr	r2, [pc, #24]	; 654 <bloom_init@plt+0x70>
 638:	ldr	r3, [r3, r2]
 63c:	cmp	r3, #0
 640:	bxeq	lr
 644:	bx	r3
 648:	andeq	r1, r1, r0, lsr #20
 64c:	andeq	r1, r1, ip, lsl sl
 650:	andeq	r1, r1, ip, asr #19
 654:	andeq	r0, r0, r4, lsr r0
 658:	ldr	r0, [pc, #56]	; 698 <bloom_init@plt+0xb4>
 65c:	ldr	r3, [pc, #56]	; 69c <bloom_init@plt+0xb8>
 660:	add	r0, pc, r0
 664:	add	r3, pc, r3
 668:	sub	r1, r3, r0
 66c:	ldr	r3, [pc, #44]	; 6a0 <bloom_init@plt+0xbc>
 670:	asr	r1, r1, #2
 674:	add	r3, pc, r3
 678:	add	r1, r1, r1, lsr #31
 67c:	asrs	r1, r1, #1
 680:	bxeq	lr
 684:	ldr	r2, [pc, #24]	; 6a4 <bloom_init@plt+0xc0>
 688:	ldr	r3, [r3, r2]
 68c:	cmp	r3, #0
 690:	bxeq	lr
 694:	bx	r3
 698:	ldrdeq	r1, [r1], -ip
 69c:	ldrdeq	r1, [r1], -r8
 6a0:	andeq	r1, r1, r4, lsl #19
 6a4:	andeq	r0, r0, ip, lsr r0
 6a8:	ldr	r3, [pc, #76]	; 6fc <bloom_init@plt+0x118>
 6ac:	ldr	r2, [pc, #76]	; 700 <bloom_init@plt+0x11c>
 6b0:	add	r3, pc, r3
 6b4:	add	r2, pc, r2
 6b8:	ldrb	r3, [r3]
 6bc:	cmp	r3, #0
 6c0:	bxne	lr
 6c4:	ldr	r3, [pc, #56]	; 704 <bloom_init@plt+0x120>
 6c8:	push	{r4, lr}
 6cc:	ldr	r3, [r2, r3]
 6d0:	cmp	r3, #0
 6d4:	beq	6e4 <bloom_init@plt+0x100>
 6d8:	ldr	r3, [pc, #40]	; 708 <bloom_init@plt+0x124>
 6dc:	ldr	r0, [pc, r3]
 6e0:	bl	59c <__cxa_finalize@plt>
 6e4:	bl	614 <bloom_init@plt+0x30>
 6e8:	ldr	r3, [pc, #28]	; 70c <bloom_init@plt+0x128>
 6ec:	mov	r2, #1
 6f0:	add	r3, pc, r3
 6f4:	strb	r2, [r3]
 6f8:	pop	{r4, pc}
 6fc:	andeq	r1, r1, ip, lsl #19
 700:	andeq	r1, r1, r4, asr #18
 704:	andeq	r0, r0, r0, lsr r0
 708:	andeq	r1, r1, ip, asr r9
 70c:	andeq	r1, r1, ip, asr #18
 710:	b	658 <bloom_init@plt+0x74>
 714:	andeq	r0, r0, r0

00000718 <bloom_init_size@@Base>:
 718:	push	{fp, lr}
 71c:	mov	fp, sp
 720:	sub	sp, sp, #24
 724:	str	r0, [fp, #-4]
 728:	str	r1, [fp, #-8]
 72c:	vstr	d0, [sp, #8]
 730:	str	r2, [sp, #4]
 734:	ldr	r0, [fp, #-4]
 738:	ldr	r1, [fp, #-8]
 73c:	vldr	d0, [sp, #8]
 740:	bl	5e4 <bloom_init@plt>
 744:	mov	sp, fp
 748:	pop	{fp, pc}
 74c:	nop	{0}

00000750 <bloom_init@@Base>:
 750:	push	{fp, lr}
 754:	mov	fp, sp
 758:	sub	sp, sp, #48	; 0x30
 75c:	str	r0, [fp, #-8]
 760:	str	r1, [fp, #-12]
 764:	vstr	d0, [sp, #24]
 768:	ldr	r0, [fp, #-8]
 76c:	movw	r1, #0
 770:	str	r1, [r0, #44]	; 0x2c
 774:	ldr	r0, [fp, #-12]
 778:	cmp	r0, #1000	; 0x3e8
 77c:	blt	790 <bloom_init@@Base+0x40>
 780:	vldr	d16, [sp, #24]
 784:	vcmp.f64	d16, #0.0
 788:	vmrs	APSR_nzcv, fpscr
 78c:	bne	79c <bloom_init@@Base+0x4c>
 790:	movw	r0, #1
 794:	str	r0, [fp, #-4]
 798:	b	8e0 <bloom_init@@Base+0x190>
 79c:	ldr	r0, [fp, #-12]
 7a0:	ldr	r1, [fp, #-8]
 7a4:	str	r0, [r1]
 7a8:	vldr	d16, [sp, #24]
 7ac:	ldr	r0, [fp, #-8]
 7b0:	vstr	d16, [r0, #8]
 7b4:	ldr	r0, [fp, #-8]
 7b8:	vldr	d0, [r0, #8]
 7bc:	bl	590 <log@plt>
 7c0:	vstr	d0, [sp, #16]
 7c4:	movw	r0, #49085	; 0xbfbd
 7c8:	movt	r0, #16350	; 0x3fde
 7cc:	str	r0, [sp, #12]
 7d0:	movw	r0, #50567	; 0xc587
 7d4:	movt	r0, #65410	; 0xff82
 7d8:	str	r0, [sp, #8]
 7dc:	vldr	d16, [sp, #16]
 7e0:	vldr	d0, [sp, #8]
 7e4:	vdiv.f64	d16, d16, d0
 7e8:	vneg.f64	d16, d16
 7ec:	ldr	r0, [fp, #-8]
 7f0:	vstr	d16, [r0, #32]
 7f4:	vldr	s2, [fp, #-12]
 7f8:	vcvt.f64.s32	d16, s2
 7fc:	vstr	d16, [sp]
 800:	vldr	d16, [sp]
 804:	ldr	r0, [fp, #-8]
 808:	vldr	d0, [r0, #32]
 80c:	vmul.f64	d16, d16, d0
 810:	vcvt.s32.f64	s2, d16
 814:	vstr	s2, [r0, #16]
 818:	ldr	r0, [fp, #-8]
 81c:	ldr	r0, [r0, #16]
 820:	asr	r1, r0, #31
 824:	add	r1, r0, r1, lsr #29
 828:	bic	r1, r1, #7
 82c:	sub	r0, r0, r1
 830:	cmp	r0, #0
 834:	beq	858 <bloom_init@@Base+0x108>
 838:	ldr	r0, [fp, #-8]
 83c:	ldr	r0, [r0, #16]
 840:	movw	r1, #8
 844:	sdiv	r0, r0, r1
 848:	add	r0, r0, #1
 84c:	ldr	r1, [fp, #-8]
 850:	str	r0, [r1, #20]
 854:	b	870 <bloom_init@@Base+0x120>
 858:	ldr	r0, [fp, #-8]
 85c:	ldr	r0, [r0, #16]
 860:	movw	r1, #8
 864:	sdiv	r0, r0, r1
 868:	ldr	r1, [fp, #-8]
 86c:	str	r0, [r1, #20]
 870:	vldr	d16, [pc, #120]	; 8f0 <bloom_init@@Base+0x1a0>
 874:	ldr	r0, [fp, #-8]
 878:	vldr	d17, [r0, #32]
 87c:	vmul.f64	d16, d16, d17
 880:	vrintp.f64	d16, d16
 884:	vcvt.s32.f64	s0, d16
 888:	vmov	r0, s0
 88c:	ldr	r1, [fp, #-8]
 890:	str	r0, [r1, #24]
 894:	ldr	r0, [fp, #-8]
 898:	ldr	r0, [r0, #20]
 89c:	movw	r1, #1
 8a0:	bl	584 <calloc@plt>
 8a4:	ldr	r1, [fp, #-8]
 8a8:	str	r0, [r1, #40]	; 0x28
 8ac:	ldr	r0, [fp, #-8]
 8b0:	ldr	r0, [r0, #40]	; 0x28
 8b4:	movw	r1, #0
 8b8:	cmp	r0, r1
 8bc:	bne	8cc <bloom_init@@Base+0x17c>
 8c0:	movw	r0, #1
 8c4:	str	r0, [fp, #-4]
 8c8:	b	8e0 <bloom_init@@Base+0x190>
 8cc:	ldr	r0, [fp, #-8]
 8d0:	movw	r1, #1
 8d4:	str	r1, [r0, #44]	; 0x2c
 8d8:	movw	r0, #0
 8dc:	str	r0, [fp, #-4]
 8e0:	ldr	r0, [fp, #-4]
 8e4:	mov	sp, fp
 8e8:	pop	{fp, pc}
 8ec:	nop	{0}
 8f0:			; <UNDEFINED> instruction: 0xfefa39ec
 8f4:	svccc	0x00e62e42

000008f8 <bloom_check@@Base>:
 8f8:	push	{fp, lr}
 8fc:	mov	fp, sp
 900:	sub	sp, sp, #16
 904:	str	r0, [fp, #-4]
 908:	str	r1, [sp, #8]
 90c:	str	r2, [sp, #4]
 910:	ldr	r0, [fp, #-4]
 914:	ldr	r1, [sp, #8]
 918:	ldr	r2, [sp, #4]
 91c:	movw	r3, #0
 920:	bl	92c <bloom_check@@Base+0x34>
 924:	mov	sp, fp
 928:	pop	{fp, pc}
 92c:	push	{fp, lr}
 930:	mov	fp, sp
 934:	sub	sp, sp, #48	; 0x30
 938:	str	r0, [fp, #-8]
 93c:	str	r1, [fp, #-12]
 940:	str	r2, [fp, #-16]
 944:	str	r3, [fp, #-20]	; 0xffffffec
 948:	ldr	r0, [fp, #-8]
 94c:	ldr	r0, [r0, #44]	; 0x2c
 950:	cmp	r0, #0
 954:	bne	978 <bloom_check@@Base+0x80>
 958:	ldr	r0, [pc, #300]	; a8c <bloom_check@@Base+0x194>
 95c:	add	r0, pc, r0
 960:	ldr	r1, [fp, #-8]
 964:	bl	5a8 <printf@plt>
 968:	mvn	r1, #0
 96c:	str	r1, [fp, #-4]
 970:	str	r0, [sp, #4]
 974:	b	a7c <bloom_check@@Base+0x184>
 978:	ldr	r2, [pc, #264]	; a88 <bloom_check@@Base+0x190>
 97c:	movw	r0, #0
 980:	str	r0, [sp, #24]
 984:	ldr	r0, [fp, #-12]
 988:	ldr	r1, [fp, #-16]
 98c:	bl	5b4 <murmurhash2@plt>
 990:	str	r0, [sp, #20]
 994:	ldr	r0, [fp, #-12]
 998:	ldr	r1, [fp, #-16]
 99c:	ldr	r2, [sp, #20]
 9a0:	bl	5b4 <murmurhash2@plt>
 9a4:	str	r0, [sp, #16]
 9a8:	movw	r0, #0
 9ac:	str	r0, [sp, #8]
 9b0:	ldr	r0, [sp, #8]
 9b4:	ldr	r1, [fp, #-8]
 9b8:	ldr	r1, [r1, #24]
 9bc:	cmp	r0, r1
 9c0:	bcs	a54 <bloom_check@@Base+0x15c>
 9c4:	ldr	r0, [sp, #20]
 9c8:	ldr	r1, [sp, #8]
 9cc:	ldr	r2, [sp, #16]
 9d0:	mla	r0, r1, r2, r0
 9d4:	mov	r1, r0
 9d8:	ldr	r2, [fp, #-8]
 9dc:	ldr	r2, [r2, #16]
 9e0:	udiv	r3, r0, r2
 9e4:	mls	r0, r3, r2, r0
 9e8:	str	r0, [sp, #12]
 9ec:	ldr	r0, [fp, #-8]
 9f0:	ldr	r0, [r0, #40]	; 0x28
 9f4:	ldr	r2, [sp, #12]
 9f8:	ldr	r3, [fp, #-20]	; 0xffffffec
 9fc:	str	r1, [sp]
 a00:	mov	r1, r2
 a04:	mov	r2, r3
 a08:	bl	c84 <bloom_version@@Base+0x10>
 a0c:	cmp	r0, #0
 a10:	beq	a24 <bloom_check@@Base+0x12c>
 a14:	ldr	r0, [sp, #24]
 a18:	add	r0, r0, #1
 a1c:	str	r0, [sp, #24]
 a20:	b	a40 <bloom_check@@Base+0x148>
 a24:	ldr	r0, [fp, #-20]	; 0xffffffec
 a28:	cmp	r0, #0
 a2c:	bne	a3c <bloom_check@@Base+0x144>
 a30:	movw	r0, #0
 a34:	str	r0, [fp, #-4]
 a38:	b	a7c <bloom_check@@Base+0x184>
 a3c:	b	a40 <bloom_check@@Base+0x148>
 a40:	b	a44 <bloom_check@@Base+0x14c>
 a44:	ldr	r0, [sp, #8]
 a48:	add	r0, r0, #1
 a4c:	str	r0, [sp, #8]
 a50:	b	9b0 <bloom_check@@Base+0xb8>
 a54:	ldr	r0, [sp, #24]
 a58:	ldr	r1, [fp, #-8]
 a5c:	ldr	r1, [r1, #24]
 a60:	cmp	r0, r1
 a64:	bne	a74 <bloom_check@@Base+0x17c>
 a68:	movw	r0, #1
 a6c:	str	r0, [fp, #-4]
 a70:	b	a7c <bloom_check@@Base+0x184>
 a74:	movw	r0, #0
 a78:	str	r0, [fp, #-4]
 a7c:	ldr	r0, [fp, #-4]
 a80:	mov	sp, fp
 a84:	pop	{fp, pc}
 a88:	strbls	fp, [r7, -ip, lsl #5]
 a8c:	andeq	r0, r0, sp, asr #11

00000a90 <bloom_add@@Base>:
 a90:	push	{fp, lr}
 a94:	mov	fp, sp
 a98:	sub	sp, sp, #16
 a9c:	str	r0, [fp, #-4]
 aa0:	str	r1, [sp, #8]
 aa4:	str	r2, [sp, #4]
 aa8:	ldr	r0, [fp, #-4]
 aac:	ldr	r1, [sp, #8]
 ab0:	ldr	r2, [sp, #4]
 ab4:	movw	r3, #1
 ab8:	bl	92c <bloom_check@@Base+0x34>
 abc:	mov	sp, fp
 ac0:	pop	{fp, pc}

00000ac4 <bloom_print@@Base>:
 ac4:	push	{fp, lr}
 ac8:	mov	fp, sp
 acc:	sub	sp, sp, #40	; 0x28
 ad0:	ldr	r1, [pc, #252]	; bd4 <bloom_print@@Base+0x110>
 ad4:	add	r1, pc, r1
 ad8:	str	r0, [fp, #-4]
 adc:	ldr	r0, [fp, #-4]
 ae0:	str	r0, [fp, #-8]
 ae4:	mov	r0, r1
 ae8:	ldr	r1, [fp, #-8]
 aec:	bl	5a8 <printf@plt>
 af0:	ldr	r1, [pc, #216]	; bd0 <bloom_print@@Base+0x10c>
 af4:	add	r1, pc, r1
 af8:	ldr	lr, [fp, #-4]
 afc:	ldr	lr, [lr]
 b00:	str	r0, [fp, #-12]
 b04:	mov	r0, r1
 b08:	mov	r1, lr
 b0c:	bl	5a8 <printf@plt>
 b10:	ldr	r1, [pc, #180]	; bcc <bloom_print@@Base+0x108>
 b14:	add	r1, pc, r1
 b18:	ldr	lr, [fp, #-4]
 b1c:	vldr	d16, [lr, #8]
 b20:	str	r0, [fp, #-16]
 b24:	mov	r0, r1
 b28:	vmov	r2, r3, d16
 b2c:	bl	5a8 <printf@plt>
 b30:	ldr	r1, [pc, #144]	; bc8 <bloom_print@@Base+0x104>
 b34:	add	r1, pc, r1
 b38:	ldr	r2, [fp, #-4]
 b3c:	ldr	r2, [r2, #16]
 b40:	str	r0, [sp, #20]
 b44:	mov	r0, r1
 b48:	mov	r1, r2
 b4c:	bl	5a8 <printf@plt>
 b50:	ldr	r1, [pc, #108]	; bc4 <bloom_print@@Base+0x100>
 b54:	add	r1, pc, r1
 b58:	ldr	r2, [fp, #-4]
 b5c:	vldr	d16, [r2, #32]
 b60:	str	r0, [sp, #16]
 b64:	mov	r0, r1
 b68:	vmov	r2, r3, d16
 b6c:	bl	5a8 <printf@plt>
 b70:	ldr	r1, [pc, #72]	; bc0 <bloom_print@@Base+0xfc>
 b74:	add	r1, pc, r1
 b78:	ldr	r2, [fp, #-4]
 b7c:	ldr	r2, [r2, #20]
 b80:	str	r0, [sp, #12]
 b84:	mov	r0, r1
 b88:	mov	r1, r2
 b8c:	bl	5a8 <printf@plt>
 b90:	ldr	r1, [pc, #36]	; bbc <bloom_print@@Base+0xf8>
 b94:	add	r1, pc, r1
 b98:	ldr	r2, [fp, #-4]
 b9c:	ldr	r2, [r2, #24]
 ba0:	str	r0, [sp, #8]
 ba4:	mov	r0, r1
 ba8:	mov	r1, r2
 bac:	bl	5a8 <printf@plt>
 bb0:	str	r0, [sp, #4]
 bb4:	mov	sp, fp
 bb8:	pop	{fp, pc}
 bbc:	andeq	r0, r0, r9, ror r3
 bc0:	andeq	r0, r0, sl, lsl #7
 bc4:	muleq	r0, r3, r3
 bc8:	andeq	r0, r0, r5, lsr #7
 bcc:			; <UNDEFINED> instruction: 0x000003b6
 bd0:	andeq	r0, r0, r5, asr #7
 bd4:	ldrdeq	r0, [r0], -r8

00000bd8 <bloom_free@@Base>:
 bd8:	push	{fp, lr}
 bdc:	mov	fp, sp
 be0:	sub	sp, sp, #8
 be4:	str	r0, [sp, #4]
 be8:	ldr	r0, [sp, #4]
 bec:	ldr	r0, [r0, #44]	; 0x2c
 bf0:	cmp	r0, #0
 bf4:	beq	c04 <bloom_free@@Base+0x2c>
 bf8:	ldr	r0, [sp, #4]
 bfc:	ldr	r0, [r0, #40]	; 0x28
 c00:	bl	5c0 <free@plt>
 c04:	ldr	r0, [sp, #4]
 c08:	movw	r1, #0
 c0c:	str	r1, [r0, #44]	; 0x2c
 c10:	mov	sp, fp
 c14:	pop	{fp, pc}

00000c18 <bloom_reset@@Base>:
 c18:	push	{fp, lr}
 c1c:	mov	fp, sp
 c20:	sub	sp, sp, #8
 c24:	str	r0, [sp]
 c28:	ldr	r0, [sp]
 c2c:	ldr	r0, [r0, #44]	; 0x2c
 c30:	cmp	r0, #0
 c34:	bne	c44 <bloom_reset@@Base+0x2c>
 c38:	movw	r0, #1
 c3c:	str	r0, [sp, #4]
 c40:	b	c68 <bloom_reset@@Base+0x50>
 c44:	ldr	r0, [sp]
 c48:	ldr	r0, [r0, #40]	; 0x28
 c4c:	ldr	r1, [sp]
 c50:	ldr	r2, [r1, #20]
 c54:	movw	r1, #0
 c58:	and	r1, r1, #255	; 0xff
 c5c:	bl	5d8 <memset@plt>
 c60:	movw	r0, #0
 c64:	str	r0, [sp, #4]
 c68:	ldr	r0, [sp, #4]
 c6c:	mov	sp, fp
 c70:	pop	{fp, pc}

00000c74 <bloom_version@@Base>:
 c74:	ldr	r0, [pc, #4]	; c80 <bloom_version@@Base+0xc>
 c78:	add	r0, pc, r0
 c7c:	bx	lr
 c80:	andeq	r0, r0, sp, lsr #5
 c84:	sub	sp, sp, #28
 c88:	str	r0, [sp, #20]
 c8c:	str	r1, [sp, #16]
 c90:	str	r2, [sp, #12]
 c94:	ldr	r0, [sp, #16]
 c98:	lsr	r0, r0, #3
 c9c:	str	r0, [sp, #8]
 ca0:	ldr	r0, [sp, #20]
 ca4:	ldr	r1, [sp, #8]
 ca8:	add	r0, r0, r1
 cac:	ldrb	r0, [r0]
 cb0:	strb	r0, [sp, #7]
 cb4:	ldr	r0, [sp, #16]
 cb8:	and	r0, r0, #7
 cbc:	movw	r1, #1
 cc0:	lsl	r0, r1, r0
 cc4:	str	r0, [sp]
 cc8:	ldrb	r0, [sp, #7]
 ccc:	ldr	r1, [sp]
 cd0:	and	r0, r0, r1
 cd4:	cmp	r0, #0
 cd8:	beq	ce8 <bloom_version@@Base+0x74>
 cdc:	movw	r0, #1
 ce0:	str	r0, [sp, #24]
 ce4:	b	d18 <bloom_version@@Base+0xa4>
 ce8:	ldr	r0, [sp, #12]
 cec:	cmp	r0, #0
 cf0:	beq	d10 <bloom_version@@Base+0x9c>
 cf4:	ldrb	r0, [sp, #7]
 cf8:	ldr	r1, [sp]
 cfc:	orr	r0, r0, r1
 d00:	ldr	r1, [sp, #20]
 d04:	ldr	r2, [sp, #8]
 d08:	add	r1, r1, r2
 d0c:	strb	r0, [r1]
 d10:	movw	r0, #0
 d14:	str	r0, [sp, #24]
 d18:	ldr	r0, [sp, #24]
 d1c:	add	sp, sp, #28
 d20:	bx	lr

00000d24 <murmurhash2@@Base>:
 d24:	sub	sp, sp, #36	; 0x24
 d28:	ldr	r3, [pc, #376]	; ea8 <murmurhash2@@Base+0x184>
 d2c:	str	r0, [sp, #32]
 d30:	str	r1, [sp, #28]
 d34:	str	r2, [sp, #24]
 d38:	str	r3, [sp, #20]
 d3c:	movw	r0, #24
 d40:	str	r0, [sp, #16]
 d44:	ldr	r0, [sp, #24]
 d48:	ldr	r1, [sp, #28]
 d4c:	eor	r0, r0, r1
 d50:	str	r0, [sp, #12]
 d54:	ldr	r0, [sp, #32]
 d58:	str	r0, [sp, #8]
 d5c:	ldr	r0, [sp, #28]
 d60:	cmp	r0, #4
 d64:	blt	ddc <murmurhash2@@Base+0xb8>
 d68:	ldr	r0, [pc, #312]	; ea8 <murmurhash2@@Base+0x184>
 d6c:	ldr	r1, [sp, #8]
 d70:	ldr	r1, [r1]
 d74:	str	r1, [sp, #4]
 d78:	ldr	r1, [sp, #4]
 d7c:	mul	r1, r1, r0
 d80:	str	r1, [sp, #4]
 d84:	ldr	r1, [sp, #4]
 d88:	lsr	r1, r1, #24
 d8c:	ldr	r2, [sp, #4]
 d90:	eor	r1, r2, r1
 d94:	str	r1, [sp, #4]
 d98:	ldr	r1, [sp, #4]
 d9c:	mul	r1, r1, r0
 da0:	str	r1, [sp, #4]
 da4:	ldr	r1, [sp, #12]
 da8:	mul	r0, r1, r0
 dac:	str	r0, [sp, #12]
 db0:	ldr	r0, [sp, #4]
 db4:	ldr	r1, [sp, #12]
 db8:	eor	r0, r1, r0
 dbc:	str	r0, [sp, #12]
 dc0:	ldr	r0, [sp, #8]
 dc4:	add	r0, r0, #4
 dc8:	str	r0, [sp, #8]
 dcc:	ldr	r0, [sp, #28]
 dd0:	sub	r0, r0, #4
 dd4:	str	r0, [sp, #28]
 dd8:	b	d5c <murmurhash2@@Base+0x38>
 ddc:	ldr	r0, [sp, #28]
 de0:	cmp	r0, #1
 de4:	str	r0, [sp]
 de8:	beq	e40 <murmurhash2@@Base+0x11c>
 dec:	b	df0 <murmurhash2@@Base+0xcc>
 df0:	ldr	r0, [sp]
 df4:	cmp	r0, #2
 df8:	beq	e28 <murmurhash2@@Base+0x104>
 dfc:	b	e00 <murmurhash2@@Base+0xdc>
 e00:	ldr	r0, [sp]
 e04:	cmp	r0, #3
 e08:	bne	e64 <murmurhash2@@Base+0x140>
 e0c:	b	e10 <murmurhash2@@Base+0xec>
 e10:	ldr	r0, [sp, #8]
 e14:	ldrb	r0, [r0, #2]
 e18:	lsl	r0, r0, #16
 e1c:	ldr	r1, [sp, #12]
 e20:	eor	r0, r1, r0
 e24:	str	r0, [sp, #12]
 e28:	ldr	r0, [sp, #8]
 e2c:	ldrb	r0, [r0, #1]
 e30:	lsl	r0, r0, #8
 e34:	ldr	r1, [sp, #12]
 e38:	eor	r0, r1, r0
 e3c:	str	r0, [sp, #12]
 e40:	ldr	r0, [pc, #96]	; ea8 <murmurhash2@@Base+0x184>
 e44:	ldr	r1, [sp, #8]
 e48:	ldrb	r1, [r1]
 e4c:	ldr	r2, [sp, #12]
 e50:	eor	r1, r2, r1
 e54:	str	r1, [sp, #12]
 e58:	ldr	r1, [sp, #12]
 e5c:	mul	r0, r1, r0
 e60:	str	r0, [sp, #12]
 e64:	ldr	r0, [pc, #60]	; ea8 <murmurhash2@@Base+0x184>
 e68:	ldr	r1, [sp, #12]
 e6c:	lsr	r1, r1, #13
 e70:	ldr	r2, [sp, #12]
 e74:	eor	r1, r2, r1
 e78:	str	r1, [sp, #12]
 e7c:	ldr	r1, [sp, #12]
 e80:	mul	r0, r1, r0
 e84:	str	r0, [sp, #12]
 e88:	ldr	r0, [sp, #12]
 e8c:	lsr	r0, r0, #15
 e90:	ldr	r1, [sp, #12]
 e94:	eor	r0, r1, r0
 e98:	str	r0, [sp, #12]
 e9c:	ldr	r0, [sp, #12]
 ea0:	add	sp, sp, #36	; 0x24
 ea4:	bx	lr
 ea8:	blpl	ff47b504 <murmurhash2@@Base+0xff47a7e0>

Disassembly of section .fini:

00000eac <.fini>:
 eac:	push	{r3, lr}
 eb0:	pop	{r3, pc}
