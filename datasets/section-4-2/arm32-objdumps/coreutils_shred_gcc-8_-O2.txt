
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

000110fc <.init>:
   110fc:	push	{r3, lr}
   11100:	bl	11e68 <__assert_fail@plt+0x9b0>
   11104:	pop	{r3, pc}

Disassembly of section .plt:

00011108 <fdopen@plt-0x14>:
   11108:	push	{lr}		; (str lr, [sp, #-4]!)
   1110c:	ldr	lr, [pc, #4]	; 11118 <fdopen@plt-0x4>
   11110:	add	lr, pc, lr
   11114:	ldr	pc, [lr, #8]!
   11118:	andeq	sl, r1, r8, ror #29

0001111c <fdopen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3816]!	; 0xee8

00011128 <calloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3808]!	; 0xee0

00011134 <fputs_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3800]!	; 0xed8

00011140 <raise@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3792]!	; 0xed0

0001114c <fsync@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3784]!	; 0xec8

00011158 <strcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3776]!	; 0xec0

00011164 <fflush@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011170 <memmove@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3760]!	; 0xeb0

0001117c <free@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3752]!	; 0xea8

00011188 <_exit@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3744]!	; 0xea0

00011194 <memcpy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3736]!	; 0xe98

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ac <mbsinit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3720]!	; 0xe88

000111b8 <time@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3712]!	; 0xe80

000111c4 <ftruncate64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3704]!	; 0xe78

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3696]!	; 0xe70

000111dc <fputc_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3688]!	; 0xe68

000111e8 <dcgettext@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3680]!	; 0xe60

000111f4 <unlink@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3672]!	; 0xe58

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3664]!	; 0xe50

0001120c <textdomain@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3656]!	; 0xe48

00011218 <__fxstatat64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3648]!	; 0xe40

00011224 <iswprint@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3640]!	; 0xe38

00011230 <__fxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3632]!	; 0xe30

0001123c <__memcpy_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3624]!	; 0xe28

00011248 <fwrite@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3616]!	; 0xe20

00011254 <ioctl@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3608]!	; 0xe18

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3600]!	; 0xe10

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3592]!	; 0xe08

00011278 <__strcpy_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3584]!	; 0xe00

00011284 <__fpending@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011290 <mbrtowc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3568]!	; 0xdf0

0001129c <error@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3560]!	; 0xde8

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3552]!	; 0xde0

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112c0 <malloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112cc <__libc_start_main@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d8 <__freading@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3512]!	; 0xdb8

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112fc <__ctype_b_loc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3496]!	; 0xda8

00011308 <exit@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3488]!	; 0xda0

00011314 <strlen@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3480]!	; 0xd98

00011320 <strchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3472]!	; 0xd90

0001132c <getpagesize@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3464]!	; 0xd88

00011338 <__errno_location@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3456]!	; 0xd80

00011344 <__sprintf_chk@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3448]!	; 0xd78

00011350 <__cxa_atexit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3440]!	; 0xd70

0001135c <setvbuf@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3432]!	; 0xd68

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3424]!	; 0xd60

00011374 <renameat2@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3416]!	; 0xd58

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3408]!	; 0xd50

0001138c <write@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3400]!	; 0xd48

00011398 <fileno@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3392]!	; 0xd40

000113a4 <__fprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3384]!	; 0xd38

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3376]!	; 0xd30

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3368]!	; 0xd28

000113c8 <fcntl64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3360]!	; 0xd20

000113d4 <__overflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3352]!	; 0xd18

000113e0 <setlocale@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ec <__explicit_bzero_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3336]!	; 0xd08

000113f8 <strrchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3328]!	; 0xd00

00011404 <nl_langinfo@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3312]!	; 0xcf0

0001141c <fopen64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3304]!	; 0xce8

00011428 <renameat@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3296]!	; 0xce0

00011434 <bindtextdomain@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011440 <fread_unlocked@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #106496	; 0x1a000
   11448:	ldr	pc, [ip, #3280]!	; 0xcd0

0001144c <getrandom@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #106496	; 0x1a000
   11454:	ldr	pc, [ip, #3272]!	; 0xcc8

00011458 <aligned_alloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #106496	; 0x1a000
   11460:	ldr	pc, [ip, #3264]!	; 0xcc0

00011464 <sync@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #106496	; 0x1a000
   1146c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011470 <chmod@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #106496	; 0x1a000
   11478:	ldr	pc, [ip, #3248]!	; 0xcb0

0001147c <isatty@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #106496	; 0x1a000
   11484:	ldr	pc, [ip, #3240]!	; 0xca8

00011488 <strncmp@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #3232]!	; 0xca0

00011494 <fdatasync@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #3224]!	; 0xc98

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #3216]!	; 0xc90

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #3208]!	; 0xc88

000114b8 <__assert_fail@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

000114c8 <.text>:
   114c8:	mov	r2, #0
   114cc:	mov	r3, #0
   114d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114d4:	strd	r6, [sp, #8]
   114d8:	mov	r7, r0
   114dc:	mov	r6, r1
   114e0:	strd	r8, [sp, #16]
   114e4:	movw	r5, #43316	; 0xa934
   114e8:	movt	r5, #1
   114ec:	strd	sl, [sp, #24]
   114f0:	movw	sl, #40176	; 0x9cf0
   114f4:	movt	sl, #1
   114f8:	str	lr, [sp, #32]
   114fc:	sub	sp, sp, #108	; 0x6c
   11500:	movw	r9, #49592	; 0xc1b8
   11504:	movt	r9, #2
   11508:	ldr	r0, [r1]
   1150c:	mov	fp, #0
   11510:	strd	r2, [sp, #80]	; 0x50
   11514:	add	r8, sl, #304	; 0x130
   11518:	strd	r2, [sp, #88]	; 0x58
   1151c:	strd	r2, [sp, #96]	; 0x60
   11520:	bl	14a54 <__assert_fail@plt+0x359c>
   11524:	movw	r1, #42628	; 0xa684
   11528:	movt	r1, #1
   1152c:	mov	r0, #6
   11530:	bl	113e0 <setlocale@plt>
   11534:	movw	r1, #43168	; 0xa8a0
   11538:	movt	r1, #1
   1153c:	movw	r0, #42988	; 0xa7ec
   11540:	movt	r0, #1
   11544:	bl	11434 <bindtextdomain@plt>
   11548:	movw	r0, #42988	; 0xa7ec
   1154c:	movt	r0, #1
   11550:	bl	1120c <textdomain@plt>
   11554:	movw	r0, #14672	; 0x3950
   11558:	movt	r0, #1
   1155c:	bl	19ccc <__assert_fail@plt+0x8814>
   11560:	mov	r1, #3
   11564:	mvn	r2, #0
   11568:	str	fp, [sp, #28]
   1156c:	mvn	r3, #0
   11570:	str	sl, [sp, #36]	; 0x24
   11574:	str	r1, [sp, #84]	; 0x54
   11578:	strd	r2, [sp, #88]	; 0x58
   1157c:	mov	r4, #0
   11580:	mov	r3, r8
   11584:	mov	r2, r5
   11588:	mov	r1, r6
   1158c:	mov	r0, r7
   11590:	str	r4, [sp]
   11594:	bl	112f0 <getopt_long@plt>
   11598:	cmn	r0, #1
   1159c:	beq	117a4 <__assert_fail@plt+0x2ec>
   115a0:	cmp	r0, #115	; 0x73
   115a4:	beq	1173c <__assert_fail@plt+0x284>
   115a8:	ble	11618 <__assert_fail@plt+0x160>
   115ac:	cmp	r0, #120	; 0x78
   115b0:	beq	11798 <__assert_fail@plt+0x2e0>
   115b4:	bgt	1164c <__assert_fail@plt+0x194>
   115b8:	cmp	r0, #117	; 0x75
   115bc:	bne	11638 <__assert_fail@plt+0x180>
   115c0:	ldr	r1, [r9]
   115c4:	cmp	r1, #0
   115c8:	moveq	r3, #3
   115cc:	streq	r3, [sp, #96]	; 0x60
   115d0:	beq	1157c <__assert_fail@plt+0xc4>
   115d4:	movw	r2, #49492	; 0xc154
   115d8:	movt	r2, #2
   115dc:	ldr	r3, [pc, #2108]	; 11e20 <__assert_fail@plt+0x968>
   115e0:	mov	r0, #1
   115e4:	ldr	ip, [r2]
   115e8:	mov	r2, #4
   115ec:	stm	sp, {r2, ip}
   115f0:	add	r2, r3, #12
   115f4:	str	r0, [sp, #8]
   115f8:	movw	r0, #43256	; 0xa8f8
   115fc:	movt	r0, #1
   11600:	bl	1376c <__assert_fail@plt+0x22b4>
   11604:	ldr	r3, [sp, #36]	; 0x24
   11608:	add	r0, r3, r0, lsl #2
   1160c:	ldr	r3, [r0, #276]	; 0x114
   11610:	str	r3, [sp, #96]	; 0x60
   11614:	b	1157c <__assert_fail@plt+0xc4>
   11618:	cmn	r0, #2
   1161c:	beq	11d9c <__assert_fail@plt+0x8e4>
   11620:	ble	116bc <__assert_fail@plt+0x204>
   11624:	cmp	r0, #102	; 0x66
   11628:	bne	11660 <__assert_fail@plt+0x1a8>
   1162c:	mov	r3, #1
   11630:	strb	r3, [sp, #80]	; 0x50
   11634:	b	1157c <__assert_fail@plt+0xc4>
   11638:	cmp	r0, #118	; 0x76
   1163c:	bne	11d94 <__assert_fail@plt+0x8dc>
   11640:	mov	r3, #1
   11644:	strb	r3, [sp, #100]	; 0x64
   11648:	b	1157c <__assert_fail@plt+0xc4>
   1164c:	cmp	r0, #122	; 0x7a
   11650:	bne	11704 <__assert_fail@plt+0x24c>
   11654:	mov	r3, #1
   11658:	strb	r3, [sp, #102]	; 0x66
   1165c:	b	1157c <__assert_fail@plt+0xc4>
   11660:	cmp	r0, #110	; 0x6e
   11664:	bne	11d94 <__assert_fail@plt+0x8dc>
   11668:	ldr	r3, [r9]
   1166c:	mov	r2, #5
   11670:	movw	r1, #43192	; 0xa8b8
   11674:	movt	r1, #1
   11678:	mov	r0, r4
   1167c:	mov	fp, #0
   11680:	mov	sl, r3
   11684:	bl	111e8 <dcgettext@plt>
   11688:	movw	r1, #42628	; 0xa684
   1168c:	movt	r1, #1
   11690:	mov	r2, #0
   11694:	mov	r3, #0
   11698:	str	r0, [sp, #12]
   1169c:	mov	r0, sl
   116a0:	mvn	sl, #-1073741824	; 0xc0000000
   116a4:	str	r4, [sp, #16]
   116a8:	strd	sl, [sp]
   116ac:	str	r1, [sp, #8]
   116b0:	bl	18630 <__assert_fail@plt+0x7178>
   116b4:	str	r0, [sp, #84]	; 0x54
   116b8:	b	1157c <__assert_fail@plt+0xc4>
   116bc:	cmn	r0, #3
   116c0:	bne	11d94 <__assert_fail@plt+0x8dc>
   116c4:	movw	r2, #43304	; 0xa928
   116c8:	movt	r2, #1
   116cc:	movw	r3, #49488	; 0xc150
   116d0:	movt	r3, #2
   116d4:	movw	r0, #49588	; 0xc1b4
   116d8:	movt	r0, #2
   116dc:	stm	sp, {r2, r4}
   116e0:	movw	r1, #41080	; 0xa078
   116e4:	movt	r1, #1
   116e8:	ldr	r0, [r0]
   116ec:	movw	r2, #42984	; 0xa7e8
   116f0:	movt	r2, #1
   116f4:	ldr	r3, [r3]
   116f8:	bl	17efc <__assert_fail@plt+0x6a44>
   116fc:	mov	r0, r4
   11700:	bl	11308 <exit@plt>
   11704:	cmp	r0, #256	; 0x100
   11708:	bne	11d94 <__assert_fail@plt+0x8dc>
   1170c:	ldr	r0, [sp, #28]
   11710:	ldr	r3, [r9]
   11714:	cmp	r0, #0
   11718:	beq	11734 <__assert_fail@plt+0x27c>
   1171c:	mov	r1, r3
   11720:	str	r3, [sp, #28]
   11724:	bl	11158 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	ldr	r3, [sp, #28]
   11730:	bne	11dfc <__assert_fail@plt+0x944>
   11734:	str	r3, [sp, #28]
   11738:	b	1157c <__assert_fail@plt+0xc4>
   1173c:	ldr	r3, [r9]
   11740:	mov	r2, #5
   11744:	movw	r1, #43268	; 0xa904
   11748:	movt	r1, #1
   1174c:	mov	r0, r4
   11750:	mvn	sl, #0
   11754:	mvn	fp, #-2147483648	; 0x80000000
   11758:	str	r3, [sp, #32]
   1175c:	bl	111e8 <dcgettext@plt>
   11760:	ldr	r3, [sp, #32]
   11764:	movw	r2, #43288	; 0xa918
   11768:	movt	r2, #1
   1176c:	mov	r1, r4
   11770:	strd	sl, [sp]
   11774:	str	r2, [sp, #8]
   11778:	mov	r2, #0
   1177c:	str	r0, [sp, #12]
   11780:	str	r4, [sp, #16]
   11784:	mov	r0, r3
   11788:	mov	r3, #0
   1178c:	bl	184ec <__assert_fail@plt+0x7034>
   11790:	strd	r0, [sp, #88]	; 0x58
   11794:	b	1157c <__assert_fail@plt+0xc4>
   11798:	mov	r3, #1
   1179c:	strb	r3, [sp, #101]	; 0x65
   117a0:	b	1157c <__assert_fail@plt+0xc4>
   117a4:	movw	r3, #49576	; 0xc1a8
   117a8:	movt	r3, #2
   117ac:	ldr	fp, [sp, #28]
   117b0:	ldr	r9, [r3]
   117b4:	subs	r3, r7, r9
   117b8:	str	r3, [sp, #40]	; 0x28
   117bc:	beq	11d6c <__assert_fail@plt+0x8b4>
   117c0:	mov	r1, r0
   117c4:	mov	r0, fp
   117c8:	bl	16d98 <__assert_fail@plt+0x58e0>
   117cc:	movw	r3, #49600	; 0xc1c0
   117d0:	movt	r3, #2
   117d4:	cmp	r0, #0
   117d8:	mov	r7, r0
   117dc:	str	r0, [r3]
   117e0:	str	r3, [sp, #44]	; 0x2c
   117e4:	beq	11dc0 <__assert_fail@plt+0x908>
   117e8:	movw	r0, #7968	; 0x1f20
   117ec:	movt	r0, #1
   117f0:	bl	19ccc <__assert_fail@plt+0x8814>
   117f4:	ldr	r3, [sp, #40]	; 0x28
   117f8:	cmp	r3, #0
   117fc:	ble	1199c <__assert_fail@plt+0x4e4>
   11800:	mov	r3, #1
   11804:	ldr	r8, [pc, #1560]	; 11e24 <__assert_fail@plt+0x96c>
   11808:	add	r9, r6, r9, lsl #2
   1180c:	str	r3, [sp, #28]
   11810:	str	r4, [sp, #32]
   11814:	b	11880 <__assert_fail@plt+0x3c8>
   11818:	ldr	r3, [sp, #44]	; 0x2c
   1181c:	mov	r1, #3
   11820:	mov	r0, #1
   11824:	ldr	r5, [r3]
   11828:	bl	13b54 <__assert_fail@plt+0x269c>
   1182c:	cmp	r0, #0
   11830:	blt	119dc <__assert_fail@plt+0x524>
   11834:	tst	r0, #1024	; 0x400
   11838:	bne	1196c <__assert_fail@plt+0x4b4>
   1183c:	mov	r2, r5
   11840:	add	r3, sp, #80	; 0x50
   11844:	mov	r1, r6
   11848:	mov	r0, #1
   1184c:	bl	129f0 <__assert_fail@plt+0x1538>
   11850:	ldr	r3, [sp, #28]
   11854:	and	r3, r3, r0
   11858:	str	r3, [sp, #28]
   1185c:	ldr	r3, [sp, #32]
   11860:	mov	r0, r6
   11864:	add	r3, r3, #1
   11868:	mov	r4, r3
   1186c:	str	r3, [sp, #32]
   11870:	bl	13d7c <__assert_fail@plt+0x28c4>
   11874:	ldr	r2, [sp, #40]	; 0x28
   11878:	cmp	r2, r4
   1187c:	beq	119a4 <__assert_fail@plt+0x4ec>
   11880:	mov	r1, #3
   11884:	mov	r0, #0
   11888:	ldr	r2, [r9]
   1188c:	bl	16b6c <__assert_fail@plt+0x56b4>
   11890:	bl	18480 <__assert_fail@plt+0x6fc8>
   11894:	ldr	r7, [r9], #4
   11898:	mov	r6, r0
   1189c:	movw	r1, #43352	; 0xa958
   118a0:	movt	r1, #1
   118a4:	mov	r0, r7
   118a8:	bl	11158 <strcmp@plt>
   118ac:	subs	r4, r0, #0
   118b0:	beq	11818 <__assert_fail@plt+0x360>
   118b4:	ldr	r3, [sp, #44]	; 0x2c
   118b8:	movw	r1, #257	; 0x101
   118bc:	mov	r0, r7
   118c0:	ldr	r5, [r3]
   118c4:	bl	13d3c <__assert_fail@plt+0x2884>
   118c8:	subs	r4, r0, #0
   118cc:	blt	11924 <__assert_fail@plt+0x46c>
   118d0:	mov	r2, r5
   118d4:	add	r3, sp, #80	; 0x50
   118d8:	mov	r1, r6
   118dc:	mov	r0, r4
   118e0:	bl	129f0 <__assert_fail@plt+0x1538>
   118e4:	str	r0, [sp, #36]	; 0x24
   118e8:	mov	r0, r4
   118ec:	bl	114ac <close@plt>
   118f0:	subs	r5, r0, #0
   118f4:	bne	119c8 <__assert_fail@plt+0x510>
   118f8:	ldr	r3, [sp, #36]	; 0x24
   118fc:	cmp	r3, #0
   11900:	beq	11910 <__assert_fail@plt+0x458>
   11904:	ldr	r3, [sp, #96]	; 0x60
   11908:	cmp	r3, #0
   1190c:	bne	11a3c <__assert_fail@plt+0x584>
   11910:	ldr	r2, [sp, #28]
   11914:	ldr	r3, [sp, #36]	; 0x24
   11918:	and	r3, r3, r2
   1191c:	str	r3, [sp, #28]
   11920:	b	1185c <__assert_fail@plt+0x3a4>
   11924:	bl	11338 <__errno_location@plt>
   11928:	ldr	r4, [r0]
   1192c:	mov	fp, r0
   11930:	cmp	r4, #13
   11934:	beq	11a14 <__assert_fail@plt+0x55c>
   11938:	movw	r1, #43424	; 0xa9a0
   1193c:	movt	r1, #1
   11940:	mov	r2, #5
   11944:	mov	r0, #0
   11948:	bl	111e8 <dcgettext@plt>
   1194c:	mov	r2, r0
   11950:	mov	r3, r6
   11954:	mov	r1, r4
   11958:	mov	r0, #0
   1195c:	bl	1129c <error@plt>
   11960:	mov	r3, #0
   11964:	str	r3, [sp, #36]	; 0x24
   11968:	b	11910 <__assert_fail@plt+0x458>
   1196c:	mov	r2, #5
   11970:	movw	r1, #43376	; 0xa970
   11974:	movt	r1, #1
   11978:	mov	r0, r4
   1197c:	bl	111e8 <dcgettext@plt>
   11980:	mov	r2, r0
   11984:	mov	r3, r6
   11988:	mov	r0, r4
   1198c:	mov	r1, r4
   11990:	bl	1129c <error@plt>
   11994:	mov	r0, r4
   11998:	b	11850 <__assert_fail@plt+0x398>
   1199c:	mov	r3, #1
   119a0:	str	r3, [sp, #28]
   119a4:	ldr	r3, [sp, #28]
   119a8:	eor	r0, r3, #1
   119ac:	add	sp, sp, #108	; 0x6c
   119b0:	ldrd	r4, [sp]
   119b4:	ldrd	r6, [sp, #8]
   119b8:	ldrd	r8, [sp, #16]
   119bc:	ldrd	sl, [sp, #24]
   119c0:	add	sp, sp, #32
   119c4:	pop	{pc}		; (ldr pc, [sp], #4)
   119c8:	bl	11338 <__errno_location@plt>
   119cc:	movw	r1, #43456	; 0xa9c0
   119d0:	movt	r1, #1
   119d4:	ldr	r4, [r0]
   119d8:	b	11940 <__assert_fail@plt+0x488>
   119dc:	bl	11338 <__errno_location@plt>
   119e0:	ldr	r5, [r0]
   119e4:	mov	r2, #5
   119e8:	movw	r1, #43356	; 0xa95c
   119ec:	movt	r1, #1
   119f0:	mov	r0, r4
   119f4:	bl	111e8 <dcgettext@plt>
   119f8:	mov	r2, r0
   119fc:	mov	r3, r6
   11a00:	mov	r0, r4
   11a04:	mov	r1, r5
   11a08:	bl	1129c <error@plt>
   11a0c:	mov	r0, r4
   11a10:	b	11850 <__assert_fail@plt+0x398>
   11a14:	ldrb	r3, [sp, #80]	; 0x50
   11a18:	cmp	r3, #0
   11a1c:	beq	11938 <__assert_fail@plt+0x480>
   11a20:	mov	r1, #128	; 0x80
   11a24:	mov	r0, r7
   11a28:	bl	11470 <chmod@plt>
   11a2c:	cmp	r0, #0
   11a30:	beq	11cc8 <__assert_fail@plt+0x810>
   11a34:	ldr	r4, [fp]
   11a38:	b	11938 <__assert_fail@plt+0x480>
   11a3c:	mov	r0, r7
   11a40:	bl	18480 <__assert_fail@plt+0x6fc8>
   11a44:	mov	sl, r0
   11a48:	str	r0, [sp, #48]	; 0x30
   11a4c:	bl	13878 <__assert_fail@plt+0x23c0>
   11a50:	mov	r4, r0
   11a54:	mov	r0, sl
   11a58:	bl	13a3c <__assert_fail@plt+0x2584>
   11a5c:	mov	r2, r0
   11a60:	mov	r1, #3
   11a64:	mov	r0, r5
   11a68:	str	r2, [sp, #68]	; 0x44
   11a6c:	bl	16b6c <__assert_fail@plt+0x56b4>
   11a70:	bl	18480 <__assert_fail@plt+0x6fc8>
   11a74:	ldr	r3, [sp, #96]	; 0x60
   11a78:	str	r0, [sp, #56]	; 0x38
   11a7c:	cmp	r3, #3
   11a80:	mvnne	r3, #0
   11a84:	strne	r3, [sp, #52]	; 0x34
   11a88:	beq	11c24 <__assert_fail@plt+0x76c>
   11a8c:	ldrb	r3, [sp, #100]	; 0x64
   11a90:	cmp	r3, #0
   11a94:	bne	11bbc <__assert_fail@plt+0x704>
   11a98:	ldr	r3, [sp, #96]	; 0x60
   11a9c:	cmp	r3, #1
   11aa0:	beq	11b78 <__assert_fail@plt+0x6c0>
   11aa4:	movw	r3, #43508	; 0xa9f4
   11aa8:	movt	r3, #1
   11aac:	mov	r0, r4
   11ab0:	str	r3, [sp, #72]	; 0x48
   11ab4:	ldr	r3, [sp, #36]	; 0x24
   11ab8:	str	r3, [sp, #60]	; 0x3c
   11abc:	bl	138c8 <__assert_fail@plt+0x2410>
   11ac0:	sub	r3, r0, #1
   11ac4:	add	sl, r4, r0
   11ac8:	str	r6, [sp, #64]	; 0x40
   11acc:	str	r9, [sp, #76]	; 0x4c
   11ad0:	mov	r9, r3
   11ad4:	cmn	r9, #1
   11ad8:	add	r2, r9, #1
   11adc:	beq	11b70 <__assert_fail@plt+0x6b8>
   11ae0:	mov	r1, #48	; 0x30
   11ae4:	mov	r0, r4
   11ae8:	mov	r5, r1
   11aec:	bl	11368 <memset@plt>
   11af0:	mov	r3, #0
   11af4:	strb	r3, [sl], #-1
   11af8:	mov	r1, #1
   11afc:	mvn	r2, #99	; 0x63
   11b00:	ldr	r3, [sp, #48]	; 0x30
   11b04:	mov	r0, r2
   11b08:	str	r1, [sp]
   11b0c:	mov	r1, r7
   11b10:	bl	17808 <__assert_fail@plt+0x6350>
   11b14:	cmp	r0, #0
   11b18:	beq	11c38 <__assert_fail@plt+0x780>
   11b1c:	bl	11338 <__errno_location@plt>
   11b20:	ldr	r3, [r0]
   11b24:	cmp	r3, #17
   11b28:	bne	11cc0 <__assert_fail@plt+0x808>
   11b2c:	mov	fp, sl
   11b30:	b	11b44 <__assert_fail@plt+0x68c>
   11b34:	cmp	r4, fp
   11b38:	strb	r5, [r6, #1]
   11b3c:	beq	11cc0 <__assert_fail@plt+0x808>
   11b40:	mov	fp, r6
   11b44:	mov	r6, fp
   11b48:	mov	r0, r8
   11b4c:	ldrb	r1, [r6], #-1
   11b50:	bl	11320 <strchr@plt>
   11b54:	cmp	r0, #0
   11b58:	beq	11da4 <__assert_fail@plt+0x8ec>
   11b5c:	ldrb	r3, [r0, #1]
   11b60:	cmp	r3, #0
   11b64:	beq	11b34 <__assert_fail@plt+0x67c>
   11b68:	strb	r3, [fp]
   11b6c:	b	11af8 <__assert_fail@plt+0x640>
   11b70:	ldr	r6, [sp, #64]	; 0x40
   11b74:	ldr	r9, [sp, #76]	; 0x4c
   11b78:	mov	r0, r7
   11b7c:	bl	111f4 <unlink@plt>
   11b80:	subs	r4, r0, #0
   11b84:	bne	11be8 <__assert_fail@plt+0x730>
   11b88:	ldrb	r3, [sp, #100]	; 0x64
   11b8c:	cmp	r3, #0
   11b90:	bne	11d44 <__assert_fail@plt+0x88c>
   11b94:	ldr	r4, [sp, #52]	; 0x34
   11b98:	cmp	r4, #0
   11b9c:	bge	11ce0 <__assert_fail@plt+0x828>
   11ba0:	ldr	r0, [sp, #48]	; 0x30
   11ba4:	bl	13d7c <__assert_fail@plt+0x28c4>
   11ba8:	ldr	r0, [sp, #68]	; 0x44
   11bac:	bl	13d7c <__assert_fail@plt+0x28c4>
   11bb0:	ldr	r0, [sp, #56]	; 0x38
   11bb4:	bl	13d7c <__assert_fail@plt+0x28c4>
   11bb8:	b	11910 <__assert_fail@plt+0x458>
   11bbc:	mov	r2, #5
   11bc0:	movw	r1, #43476	; 0xa9d4
   11bc4:	movt	r1, #1
   11bc8:	mov	r0, #0
   11bcc:	bl	111e8 <dcgettext@plt>
   11bd0:	mov	r1, #0
   11bd4:	mov	r2, r0
   11bd8:	mov	r3, r6
   11bdc:	mov	r0, r1
   11be0:	bl	1129c <error@plt>
   11be4:	b	11a98 <__assert_fail@plt+0x5e0>
   11be8:	bl	11338 <__errno_location@plt>
   11bec:	ldr	r4, [r0]
   11bf0:	mov	r2, #5
   11bf4:	movw	r1, #43528	; 0xaa08
   11bf8:	movt	r1, #1
   11bfc:	mov	r0, #0
   11c00:	bl	111e8 <dcgettext@plt>
   11c04:	mov	r2, r0
   11c08:	mov	r3, r6
   11c0c:	mov	r0, #0
   11c10:	mov	r1, r4
   11c14:	bl	1129c <error@plt>
   11c18:	mov	r3, #0
   11c1c:	str	r3, [sp, #36]	; 0x24
   11c20:	b	11b94 <__assert_fail@plt+0x6dc>
   11c24:	mov	r1, #18688	; 0x4900
   11c28:	ldr	r0, [sp, #68]	; 0x44
   11c2c:	bl	13d3c <__assert_fail@plt+0x2884>
   11c30:	str	r0, [sp, #52]	; 0x34
   11c34:	b	11a8c <__assert_fail@plt+0x5d4>
   11c38:	ldr	r3, [sp, #52]	; 0x34
   11c3c:	cmp	r3, #0
   11c40:	blt	11c5c <__assert_fail@plt+0x7a4>
   11c44:	ldrd	r0, [sp, #52]	; 0x34
   11c48:	bl	11f94 <__assert_fail@plt+0xadc>
   11c4c:	ldr	r3, [sp, #36]	; 0x24
   11c50:	cmp	r0, #0
   11c54:	movne	r3, #0
   11c58:	str	r3, [sp, #36]	; 0x24
   11c5c:	ldrb	r3, [sp, #100]	; 0x64
   11c60:	cmp	r3, #0
   11c64:	beq	11ca8 <__assert_fail@plt+0x7f0>
   11c68:	ldr	r3, [sp, #60]	; 0x3c
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	ldr	r5, [sp, #64]	; 0x40
   11c78:	ldr	r1, [sp, #72]	; 0x48
   11c7c:	cmp	r3, r0
   11c80:	moveq	r5, r7
   11c84:	bl	111e8 <dcgettext@plt>
   11c88:	ldr	r3, [sp, #48]	; 0x30
   11c8c:	mov	r1, #0
   11c90:	mov	r2, r0
   11c94:	mov	r0, r1
   11c98:	str	r3, [sp]
   11c9c:	mov	r3, r5
   11ca0:	str	r1, [sp, #60]	; 0x3c
   11ca4:	bl	1129c <error@plt>
   11ca8:	ldr	r3, [sp, #48]	; 0x30
   11cac:	add	r2, r9, #2
   11cb0:	mov	r1, r4
   11cb4:	sub	r0, r4, r3
   11cb8:	add	r0, r7, r0
   11cbc:	bl	11194 <memcpy@plt>
   11cc0:	sub	r9, r9, #1
   11cc4:	b	11ad4 <__assert_fail@plt+0x61c>
   11cc8:	movw	r1, #257	; 0x101
   11ccc:	mov	r0, r7
   11cd0:	bl	13d3c <__assert_fail@plt+0x2884>
   11cd4:	subs	r4, r0, #0
   11cd8:	bge	118d0 <__assert_fail@plt+0x418>
   11cdc:	b	11a34 <__assert_fail@plt+0x57c>
   11ce0:	mov	r0, r4
   11ce4:	ldr	r1, [sp, #56]	; 0x38
   11ce8:	bl	11f94 <__assert_fail@plt+0xadc>
   11cec:	ldr	r3, [sp, #36]	; 0x24
   11cf0:	cmp	r0, #0
   11cf4:	mov	r0, r4
   11cf8:	movne	r3, #0
   11cfc:	str	r3, [sp, #36]	; 0x24
   11d00:	bl	114ac <close@plt>
   11d04:	cmp	r0, #0
   11d08:	beq	11ba0 <__assert_fail@plt+0x6e8>
   11d0c:	bl	11338 <__errno_location@plt>
   11d10:	ldr	r4, [r0]
   11d14:	mov	r2, #5
   11d18:	movw	r1, #43456	; 0xa9c0
   11d1c:	movt	r1, #1
   11d20:	mov	r0, #0
   11d24:	bl	111e8 <dcgettext@plt>
   11d28:	mov	r2, r0
   11d2c:	mov	r0, #0
   11d30:	ldr	r3, [sp, #56]	; 0x38
   11d34:	mov	r1, r4
   11d38:	str	r0, [sp, #36]	; 0x24
   11d3c:	bl	1129c <error@plt>
   11d40:	b	11ba0 <__assert_fail@plt+0x6e8>
   11d44:	mov	r2, #5
   11d48:	movw	r1, #43552	; 0xaa20
   11d4c:	movt	r1, #1
   11d50:	bl	111e8 <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	mov	r3, r6
   11d5c:	mov	r1, r4
   11d60:	mov	r0, r4
   11d64:	bl	1129c <error@plt>
   11d68:	b	11b94 <__assert_fail@plt+0x6dc>
   11d6c:	mov	r2, #5
   11d70:	movw	r1, #43328	; 0xa940
   11d74:	movt	r1, #1
   11d78:	mov	r0, r3
   11d7c:	mov	r4, r3
   11d80:	bl	111e8 <dcgettext@plt>
   11d84:	mov	r2, r0
   11d88:	mov	r1, r4
   11d8c:	mov	r0, r4
   11d90:	bl	1129c <error@plt>
   11d94:	mov	r0, #1
   11d98:	bl	1303c <__assert_fail@plt+0x1b84>
   11d9c:	mov	r0, r4
   11da0:	bl	1303c <__assert_fail@plt+0x1b84>
   11da4:	movw	r1, #43492	; 0xa9e4
   11da8:	movt	r1, #1
   11dac:	ldr	r3, [pc, #116]	; 11e28 <__assert_fail@plt+0x970>
   11db0:	movw	r0, #43504	; 0xa9f0
   11db4:	movt	r0, #1
   11db8:	mov	r2, #1000	; 0x3e8
   11dbc:	bl	114b8 <__assert_fail@plt>
   11dc0:	bl	11338 <__errno_location@plt>
   11dc4:	ldr	r4, [r0]
   11dc8:	cmp	fp, #0
   11dcc:	mov	r1, #3
   11dd0:	movw	r2, #43156	; 0xa894
   11dd4:	movt	r2, #1
   11dd8:	mov	r0, r7
   11ddc:	movne	r2, fp
   11de0:	bl	16b6c <__assert_fail@plt+0x56b4>
   11de4:	mov	r3, r0
   11de8:	movw	r2, #43924	; 0xab94
   11dec:	movt	r2, #1
   11df0:	mov	r1, r4
   11df4:	mov	r0, #1
   11df8:	bl	1129c <error@plt>
   11dfc:	mov	r2, #5
   11e00:	movw	r1, #43220	; 0xa8d4
   11e04:	movt	r1, #1
   11e08:	mov	r0, r4
   11e0c:	bl	111e8 <dcgettext@plt>
   11e10:	mov	r2, r0
   11e14:	mov	r1, r4
   11e18:	mov	r0, #1
   11e1c:	bl	1129c <error@plt>
   11e20:	andeq	r9, r1, r4, lsl #28
   11e24:	ldrdeq	r9, [r1], -r0
   11e28:	andeq	r9, r1, r4, lsl pc
   11e2c:	mov	fp, #0
   11e30:	mov	lr, #0
   11e34:	pop	{r1}		; (ldr r1, [sp], #4)
   11e38:	mov	r2, sp
   11e3c:	push	{r2}		; (str r2, [sp, #-4]!)
   11e40:	push	{r0}		; (str r0, [sp, #-4]!)
   11e44:	ldr	ip, [pc, #16]	; 11e5c <__assert_fail@plt+0x9a4>
   11e48:	push	{ip}		; (str ip, [sp, #-4]!)
   11e4c:	ldr	r0, [pc, #12]	; 11e60 <__assert_fail@plt+0x9a8>
   11e50:	ldr	r3, [pc, #12]	; 11e64 <__assert_fail@plt+0x9ac>
   11e54:	bl	112cc <__libc_start_main@plt>
   11e58:	bl	114a0 <abort@plt>
   11e5c:	andeq	r9, r1, r8, asr #25
   11e60:	andeq	r1, r1, r8, asr #9
   11e64:	andeq	r9, r1, r8, ror #24
   11e68:	ldr	r3, [pc, #20]	; 11e84 <__assert_fail@plt+0x9cc>
   11e6c:	ldr	r2, [pc, #20]	; 11e88 <__assert_fail@plt+0x9d0>
   11e70:	add	r3, pc, r3
   11e74:	ldr	r2, [r3, r2]
   11e78:	cmp	r2, #0
   11e7c:	bxeq	lr
   11e80:	b	112e4 <__gmon_start__@plt>
   11e84:	andeq	sl, r1, r8, lsl #3
   11e88:	andeq	r0, r0, r4, asr #2
   11e8c:	ldr	r0, [pc, #24]	; 11eac <__assert_fail@plt+0x9f4>
   11e90:	ldr	r3, [pc, #24]	; 11eb0 <__assert_fail@plt+0x9f8>
   11e94:	cmp	r3, r0
   11e98:	bxeq	lr
   11e9c:	ldr	r3, [pc, #16]	; 11eb4 <__assert_fail@plt+0x9fc>
   11ea0:	cmp	r3, #0
   11ea4:	bxeq	lr
   11ea8:	bx	r3
   11eac:	muleq	r2, ip, r1
   11eb0:	muleq	r2, ip, r1
   11eb4:	andeq	r0, r0, r0
   11eb8:	ldr	r0, [pc, #36]	; 11ee4 <__assert_fail@plt+0xa2c>
   11ebc:	ldr	r1, [pc, #36]	; 11ee8 <__assert_fail@plt+0xa30>
   11ec0:	sub	r1, r1, r0
   11ec4:	asr	r1, r1, #2
   11ec8:	add	r1, r1, r1, lsr #31
   11ecc:	asrs	r1, r1, #1
   11ed0:	bxeq	lr
   11ed4:	ldr	r3, [pc, #16]	; 11eec <__assert_fail@plt+0xa34>
   11ed8:	cmp	r3, #0
   11edc:	bxeq	lr
   11ee0:	bx	r3
   11ee4:	muleq	r2, ip, r1
   11ee8:	muleq	r2, ip, r1
   11eec:	andeq	r0, r0, r0
   11ef0:	push	{r4, lr}
   11ef4:	ldr	r4, [pc, #24]	; 11f14 <__assert_fail@plt+0xa5c>
   11ef8:	ldrb	r3, [r4]
   11efc:	cmp	r3, #0
   11f00:	popne	{r4, pc}
   11f04:	bl	11e8c <__assert_fail@plt+0x9d4>
   11f08:	mov	r3, #1
   11f0c:	strb	r3, [r4]
   11f10:	pop	{r4, pc}
   11f14:			; <UNDEFINED> instruction: 0x0002c1bc
   11f18:	b	11eb8 <__assert_fail@plt+0xa00>
   11f1c:	andeq	r0, r0, r0
   11f20:	movw	r3, #49600	; 0xc1c0
   11f24:	movt	r3, #2
   11f28:	ldr	r0, [r3]
   11f2c:	b	16fd4 <__assert_fail@plt+0x5b1c>
   11f30:	strd	r4, [sp, #-16]!
   11f34:	mov	r4, r1
   11f38:	mov	r1, #3
   11f3c:	mov	r5, r0
   11f40:	str	r6, [sp, #8]
   11f44:	str	lr, [sp, #12]
   11f48:	bl	13b54 <__assert_fail@plt+0x269c>
   11f4c:	cmp	r0, #0
   11f50:	ble	11f68 <__assert_fail@plt+0xab0>
   11f54:	cmp	r4, #0
   11f58:	orrne	r2, r0, #65536	; 0x10000
   11f5c:	biceq	r2, r0, #65536	; 0x10000
   11f60:	cmp	r2, r0
   11f64:	bne	11f78 <__assert_fail@plt+0xac0>
   11f68:	ldrd	r4, [sp]
   11f6c:	ldr	r6, [sp, #8]
   11f70:	add	sp, sp, #12
   11f74:	pop	{pc}		; (ldr pc, [sp], #4)
   11f78:	mov	r0, r5
   11f7c:	mov	r1, #4
   11f80:	ldrd	r4, [sp]
   11f84:	ldr	r6, [sp, #8]
   11f88:	ldr	lr, [sp, #12]
   11f8c:	add	sp, sp, #16
   11f90:	b	13b54 <__assert_fail@plt+0x269c>
   11f94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f98:	strd	r6, [sp, #8]
   11f9c:	mov	r7, r1
   11fa0:	str	r8, [sp, #16]
   11fa4:	mov	r8, r0
   11fa8:	str	lr, [sp, #20]
   11fac:	bl	11494 <fdatasync@plt>
   11fb0:	cmp	r0, #0
   11fb4:	beq	1200c <__assert_fail@plt+0xb54>
   11fb8:	bl	11338 <__errno_location@plt>
   11fbc:	ldr	r4, [r0]
   11fc0:	mov	r6, r0
   11fc4:	sub	r0, r4, #21
   11fc8:	cmp	r4, #9
   11fcc:	cmpne	r0, #1
   11fd0:	movls	r5, #1
   11fd4:	movhi	r5, #0
   11fd8:	bhi	12024 <__assert_fail@plt+0xb6c>
   11fdc:	mov	r0, r8
   11fe0:	bl	1114c <fsync@plt>
   11fe4:	cmp	r0, #0
   11fe8:	beq	1200c <__assert_fail@plt+0xb54>
   11fec:	ldr	r4, [r6]
   11ff0:	sub	r3, r4, #21
   11ff4:	cmp	r4, #9
   11ff8:	cmpne	r3, #1
   11ffc:	movls	r5, #1
   12000:	movhi	r5, #0
   12004:	bhi	12058 <__assert_fail@plt+0xba0>
   12008:	bl	11464 <sync@plt>
   1200c:	mov	r0, #0
   12010:	ldrd	r4, [sp]
   12014:	ldrd	r6, [sp, #8]
   12018:	ldr	r8, [sp, #16]
   1201c:	add	sp, sp, #20
   12020:	pop	{pc}		; (ldr pc, [sp], #4)
   12024:	movw	r1, #40752	; 0x9f30
   12028:	movt	r1, #1
   1202c:	mov	r2, #5
   12030:	mov	r0, r5
   12034:	bl	111e8 <dcgettext@plt>
   12038:	mov	r2, r0
   1203c:	mov	r3, r7
   12040:	mov	r0, r5
   12044:	mov	r1, r4
   12048:	bl	1129c <error@plt>
   1204c:	mvn	r0, #0
   12050:	str	r4, [r6]
   12054:	b	12010 <__assert_fail@plt+0xb58>
   12058:	movw	r1, #40732	; 0x9f1c
   1205c:	movt	r1, #1
   12060:	b	1202c <__assert_fail@plt+0xb74>
   12064:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12068:	mov	r5, r3
   1206c:	mov	r4, r1
   12070:	strd	r6, [sp, #8]
   12074:	strd	r8, [sp, #16]
   12078:	mov	r8, r0
   1207c:	strd	sl, [sp, #24]
   12080:	str	lr, [sp, #32]
   12084:	sub	sp, sp, #2064	; 0x810
   12088:	sub	sp, sp, #12
   1208c:	str	r2, [sp, #40]	; 0x28
   12090:	str	r3, [sp, #72]	; 0x48
   12094:	bl	1132c <getpagesize@plt>
   12098:	ldrd	r2, [r5]
   1209c:	strd	r2, [sp, #32]
   120a0:	ldr	r3, [sp, #2112]	; 0x840
   120a4:	cmp	r3, #0
   120a8:	ble	12650 <__assert_fail@plt+0x1198>
   120ac:	ubfx	r3, r3, #0, #12
   120b0:	orr	r3, r3, r3, lsl #12
   120b4:	ubfx	r2, r3, #4, #8
   120b8:	uxtb	r1, r3
   120bc:	ubfx	r3, r3, #8, #8
   120c0:	cmp	r1, r2
   120c4:	cmpeq	r3, r2
   120c8:	beq	12650 <__assert_fail@plt+0x1198>
   120cc:	mov	r1, #61440	; 0xf000
   120d0:	mov	r7, r1
   120d4:	str	r1, [sp, #52]	; 0x34
   120d8:	bl	1800c <__assert_fail@plt+0x6b54>
   120dc:	mov	r5, r0
   120e0:	ldrd	r0, [sp, #32]
   120e4:	cmp	r0, #1
   120e8:	sbcs	r3, r1, #0
   120ec:	blt	12104 <__assert_fail@plt+0xc4c>
   120f0:	ldr	r2, [sp, #52]	; 0x34
   120f4:	mov	r3, #0
   120f8:	cmp	r0, r2
   120fc:	sbcs	r3, r1, r3
   12100:	blt	121b0 <__assert_fail@plt+0xcf8>
   12104:	mov	r1, #1
   12108:	mov	r0, r8
   1210c:	bl	11f30 <__assert_fail@plt+0xa78>
   12110:	mov	r3, #0
   12114:	str	r3, [sp, #44]	; 0x2c
   12118:	ldr	r3, [r4, #16]
   1211c:	and	r3, r3, #61440	; 0xf000
   12120:	cmp	r3, #8192	; 0x2000
   12124:	beq	121c8 <__assert_fail@plt+0xd10>
   12128:	mov	r1, #0
   1212c:	mov	r3, #0
   12130:	mov	r2, #0
   12134:	mov	r0, r8
   12138:	str	r1, [sp]
   1213c:	bl	11260 <lseek64@plt>
   12140:	cmp	r0, #1
   12144:	sbcs	r3, r1, #0
   12148:	blt	12200 <__assert_fail@plt+0xd48>
   1214c:	bl	11338 <__errno_location@plt>
   12150:	mov	r3, #22
   12154:	mov	r4, r3
   12158:	str	r3, [r0]
   1215c:	movw	r1, #40776	; 0x9f48
   12160:	movt	r1, #1
   12164:	mov	r2, #5
   12168:	mov	r0, #0
   1216c:	bl	111e8 <dcgettext@plt>
   12170:	ldr	r3, [sp, #40]	; 0x28
   12174:	mov	r2, r0
   12178:	mov	r1, r4
   1217c:	mov	r0, #0
   12180:	bl	1129c <error@plt>
   12184:	mov	r0, r5
   12188:	bl	13d7c <__assert_fail@plt+0x28c4>
   1218c:	mvn	r0, #0
   12190:	add	sp, sp, #2064	; 0x810
   12194:	add	sp, sp, #12
   12198:	ldrd	r4, [sp]
   1219c:	ldrd	r6, [sp, #8]
   121a0:	ldrd	r8, [sp, #16]
   121a4:	ldrd	sl, [sp, #24]
   121a8:	add	sp, sp, #32
   121ac:	pop	{pc}		; (ldr pc, [sp], #4)
   121b0:	mov	r3, #1
   121b4:	str	r3, [sp, #44]	; 0x2c
   121b8:	ldr	r3, [r4, #16]
   121bc:	and	r3, r3, #61440	; 0xf000
   121c0:	cmp	r3, #8192	; 0x2000
   121c4:	bne	12128 <__assert_fail@plt+0xc70>
   121c8:	add	r3, sp, #1408	; 0x580
   121cc:	mov	r1, #6
   121d0:	add	r3, r3, #12
   121d4:	mov	ip, #1
   121d8:	mov	r2, r3
   121dc:	mov	r0, r8
   121e0:	strh	r1, [r3]
   121e4:	movw	r1, #27905	; 0x6d01
   121e8:	movt	r1, #16392	; 0x4008
   121ec:	str	ip, [sp, #1424]	; 0x590
   121f0:	bl	11254 <ioctl@plt>
   121f4:	cmp	r0, #0
   121f8:	bne	12128 <__assert_fail@plt+0xc70>
   121fc:	b	12208 <__assert_fail@plt+0xd50>
   12200:	orrs	r3, r0, r1
   12204:	bne	129dc <__assert_fail@plt+0x1524>
   12208:	ldr	r3, [sp, #2112]	; 0x840
   1220c:	cmp	r3, #0
   12210:	blt	126b8 <__assert_fail@plt+0x1200>
   12214:	ldrd	sl, [sp, #32]
   12218:	mov	r3, #61440	; 0xf000
   1221c:	movt	r3, #255	; 0xff
   12220:	ldr	r1, [sp, #2112]	; 0x840
   12224:	ldr	r2, [sp, #2112]	; 0x840
   12228:	and	r3, r3, r1, lsl #12
   1222c:	mov	r1, #0
   12230:	cmp	r1, fp
   12234:	ubfx	r2, r2, #0, #12
   12238:	cmpeq	r7, sl
   1223c:	orr	r3, r3, r2
   12240:	ubfx	r1, r3, #4, #8
   12244:	uxtb	r2, r3
   12248:	ubfx	r3, r3, #8, #8
   1224c:	bhi	12710 <__assert_fail@plt+0x1258>
   12250:	lsr	r6, r7, #1
   12254:	strb	r1, [r5]
   12258:	strb	r3, [r5, #1]
   1225c:	strb	r2, [r5, #2]
   12260:	mov	r4, #3
   12264:	mov	r2, r4
   12268:	add	r0, r5, r4
   1226c:	lsl	r4, r4, #1
   12270:	mov	r1, r5
   12274:	bl	11194 <memcpy@plt>
   12278:	cmp	r4, r6
   1227c:	bls	12264 <__assert_fail@plt+0xdac>
   12280:	ldr	r3, [sp, #2112]	; 0x840
   12284:	cmp	r4, r7
   12288:	and	r6, r3, #4096	; 0x1000
   1228c:	bcc	12734 <__assert_fail@plt+0x127c>
   12290:	cmp	r6, #0
   12294:	bne	126e4 <__assert_fail@plt+0x122c>
   12298:	ldrb	r4, [r5, #2]
   1229c:	add	r3, sp, #120	; 0x78
   122a0:	mov	r1, #1
   122a4:	mov	r2, r3
   122a8:	movw	r3, #40960	; 0xa000
   122ac:	movt	r3, #1
   122b0:	ldrb	lr, [r5, #1]
   122b4:	sub	r2, r2, #12
   122b8:	mov	r0, r2
   122bc:	ldrb	ip, [r5]
   122c0:	stm	sp, {ip, lr}
   122c4:	str	r4, [sp, #8]
   122c8:	str	r2, [sp, #68]	; 0x44
   122cc:	mov	r2, #7
   122d0:	bl	11344 <__sprintf_chk@plt>
   122d4:	ldr	r3, [sp, #2124]	; 0x84c
   122d8:	cmp	r3, #0
   122dc:	bne	12668 <__assert_fail@plt+0x11b0>
   122e0:	ldr	r3, [sp, #2124]	; 0x84c
   122e4:	str	r3, [sp, #84]	; 0x54
   122e8:	mov	r3, #0
   122ec:	movw	r2, #42628	; 0xa684
   122f0:	movt	r2, #1
   122f4:	str	r3, [sp, #48]	; 0x30
   122f8:	strd	r2, [sp, #76]	; 0x4c
   122fc:	mov	r2, #0
   12300:	mov	r3, #0
   12304:	strd	r2, [sp, #24]
   12308:	ldrd	r0, [sp, #32]
   1230c:	cmp	r0, #0
   12310:	sbcs	r3, r1, #0
   12314:	blt	12610 <__assert_fail@plt+0x1158>
   12318:	ldrd	r6, [sp, #24]
   1231c:	ldr	r2, [sp, #52]	; 0x34
   12320:	subs	r3, r0, r6
   12324:	str	r3, [sp, #56]	; 0x38
   12328:	sbc	r3, r1, r7
   1232c:	str	r3, [sp, #60]	; 0x3c
   12330:	mov	r3, #0
   12334:	ldrd	sl, [sp, #56]	; 0x38
   12338:	cmp	sl, r2
   1233c:	sbcs	r3, fp, r3
   12340:	bge	12610 <__assert_fail@plt+0x1158>
   12344:	cmp	r0, r6
   12348:	sbcs	r3, r1, r7
   1234c:	blt	12970 <__assert_fail@plt+0x14b8>
   12350:	subs	r7, r0, r6
   12354:	beq	12970 <__assert_fail@plt+0x14b8>
   12358:	ldr	r3, [sp, #2112]	; 0x840
   1235c:	cmp	r3, #0
   12360:	blt	12620 <__assert_fail@plt+0x1168>
   12364:	movw	sl, #40844	; 0x9f8c
   12368:	movt	sl, #1
   1236c:	mov	r4, #0
   12370:	b	1237c <__assert_fail@plt+0xec4>
   12374:	cmp	r7, r4
   12378:	bls	1246c <__assert_fail@plt+0xfb4>
   1237c:	sub	r2, r7, r4
   12380:	add	r1, r5, r4
   12384:	mov	r0, r8
   12388:	bl	1138c <write@plt>
   1238c:	cmp	r0, #0
   12390:	addgt	r4, r4, r0
   12394:	bgt	12374 <__assert_fail@plt+0xebc>
   12398:	ldrd	r2, [sp, #32]
   1239c:	cmp	r2, #0
   123a0:	sbcs	r3, r3, #0
   123a4:	blt	125c4 <__assert_fail@plt+0x110c>
   123a8:	bl	11338 <__errno_location@plt>
   123ac:	ldr	r3, [sp, #44]	; 0x2c
   123b0:	str	r0, [sp, #64]	; 0x40
   123b4:	ldr	r9, [r0]
   123b8:	eor	r6, r3, #1
   123bc:	cmp	r9, #22
   123c0:	movne	r6, #0
   123c4:	andeq	r6, r6, #1
   123c8:	cmp	r6, #0
   123cc:	bne	125f8 <__assert_fail@plt+0x1140>
   123d0:	mov	r2, #5
   123d4:	mov	r1, sl
   123d8:	mov	r0, r6
   123dc:	bl	111e8 <dcgettext@plt>
   123e0:	mov	fp, r0
   123e4:	ldrd	r0, [sp, #24]
   123e8:	add	r2, sp, #1408	; 0x580
   123ec:	add	r2, r2, #12
   123f0:	adds	r0, r0, r4
   123f4:	adc	r1, r1, #0
   123f8:	bl	149dc <__assert_fail@plt+0x3524>
   123fc:	mov	r2, fp
   12400:	mov	r1, r9
   12404:	str	r0, [sp]
   12408:	mov	r0, r6
   1240c:	ldr	r3, [sp, #40]	; 0x28
   12410:	bl	1129c <error@plt>
   12414:	cmp	r9, #5
   12418:	bne	12184 <__assert_fail@plt+0xccc>
   1241c:	mvn	r4, r4, lsr #9
   12420:	mvn	r4, r4, lsl #9
   12424:	cmp	r4, r7
   12428:	bcs	12184 <__assert_fail@plt+0xccc>
   1242c:	ldrd	r2, [sp, #24]
   12430:	add	r4, r4, #1
   12434:	mov	r0, r8
   12438:	str	r6, [sp]
   1243c:	adds	r2, r2, r4
   12440:	adc	r3, r3, #0
   12444:	bl	11260 <lseek64@plt>
   12448:	mvn	r3, #0
   1244c:	mvn	r2, #0
   12450:	cmp	r1, r3
   12454:	cmpeq	r0, r2
   12458:	beq	12634 <__assert_fail@plt+0x117c>
   1245c:	mov	r3, #1
   12460:	cmp	r7, r4
   12464:	str	r3, [sp, #48]	; 0x30
   12468:	bhi	1237c <__assert_fail@plt+0xec4>
   1246c:	ldrd	r6, [sp, #24]
   12470:	mvn	r3, #0
   12474:	mvn	r1, #-2147483648	; 0x80000000
   12478:	subs	r3, r3, r6
   1247c:	sbc	r1, r1, r7
   12480:	str	r3, [sp, #88]	; 0x58
   12484:	mov	r3, #0
   12488:	str	r1, [sp, #92]	; 0x5c
   1248c:	ldrd	r0, [sp, #88]	; 0x58
   12490:	cmp	r0, r4
   12494:	sbcs	r1, r1, r3
   12498:	blt	12940 <__assert_fail@plt+0x1488>
   1249c:	adds	r1, r6, r4
   124a0:	str	r1, [sp, #24]
   124a4:	ldr	r1, [sp, #28]
   124a8:	adc	r3, r1, r3
   124ac:	str	r3, [sp, #28]
   124b0:	ldr	r3, [sp, #2124]	; 0x84c
   124b4:	cmp	r3, #0
   124b8:	beq	12308 <__assert_fail@plt+0xe50>
   124bc:	ldrd	r2, [sp, #24]
   124c0:	ldrd	r0, [sp, #32]
   124c4:	cmp	r3, r1
   124c8:	cmpeq	r2, r0
   124cc:	beq	12808 <__assert_fail@plt+0x1350>
   124d0:	mov	r0, #0
   124d4:	bl	111b8 <time@plt>
   124d8:	ldr	r2, [sp, #84]	; 0x54
   124dc:	str	r0, [sp, #80]	; 0x50
   124e0:	cmp	r2, r0
   124e4:	bgt	12308 <__assert_fail@plt+0xe50>
   124e8:	mov	r6, #1
   124ec:	mov	r7, #0
   124f0:	ldrd	r0, [sp, #24]
   124f4:	movw	r3, #434	; 0x1b2
   124f8:	add	r2, sp, #768	; 0x300
   124fc:	strd	r6, [sp]
   12500:	strd	r6, [sp, #8]
   12504:	bl	13de0 <__assert_fail@plt+0x2928>
   12508:	mov	r1, r0
   1250c:	mov	r9, r0
   12510:	ldr	r0, [sp, #76]	; 0x4c
   12514:	bl	11158 <strcmp@plt>
   12518:	cmp	r0, #0
   1251c:	beq	12308 <__assert_fail@plt+0xe50>
   12520:	ldrd	r2, [sp, #32]
   12524:	cmp	r2, #0
   12528:	sbcs	r3, r3, #0
   1252c:	bge	12850 <__assert_fail@plt+0x1398>
   12530:	mov	r2, #5
   12534:	movw	r1, #40896	; 0x9fc0
   12538:	movt	r1, #1
   1253c:	mov	r0, #0
   12540:	bl	111e8 <dcgettext@plt>
   12544:	ldr	r3, [sp, #2120]	; 0x848
   12548:	mov	r1, #0
   1254c:	mov	r2, r0
   12550:	mov	r0, r1
   12554:	str	r9, [sp, #12]
   12558:	ldr	ip, [sp, #2124]	; 0x84c
   1255c:	stm	sp, {r3, ip}
   12560:	ldr	r3, [sp, #40]	; 0x28
   12564:	ldr	ip, [sp, #68]	; 0x44
   12568:	str	ip, [sp, #8]
   1256c:	bl	1129c <error@plt>
   12570:	mov	r1, r9
   12574:	mov	r2, #652	; 0x28c
   12578:	add	r0, sp, #116	; 0x74
   1257c:	bl	11278 <__strcpy_chk@plt>
   12580:	mov	r0, r8
   12584:	ldr	r1, [sp, #40]	; 0x28
   12588:	bl	11f94 <__assert_fail@plt+0xadc>
   1258c:	ldr	r3, [sp, #80]	; 0x50
   12590:	cmp	r0, #0
   12594:	add	r3, r3, #5
   12598:	str	r3, [sp, #84]	; 0x54
   1259c:	beq	12964 <__assert_fail@plt+0x14ac>
   125a0:	bl	11338 <__errno_location@plt>
   125a4:	ldr	r3, [r0]
   125a8:	cmp	r3, #5
   125ac:	bne	12184 <__assert_fail@plt+0xccc>
   125b0:	add	r3, sp, #116	; 0x74
   125b4:	str	r3, [sp, #76]	; 0x4c
   125b8:	mov	r3, #1
   125bc:	str	r3, [sp, #48]	; 0x30
   125c0:	b	12308 <__assert_fail@plt+0xe50>
   125c4:	cmp	r0, #0
   125c8:	beq	1279c <__assert_fail@plt+0x12e4>
   125cc:	bl	11338 <__errno_location@plt>
   125d0:	ldr	r9, [r0]
   125d4:	cmp	r9, #28
   125d8:	beq	1279c <__assert_fail@plt+0x12e4>
   125dc:	ldr	r3, [sp, #44]	; 0x2c
   125e0:	eor	r6, r3, #1
   125e4:	cmp	r9, #22
   125e8:	movne	r6, #0
   125ec:	andeq	r6, r6, #1
   125f0:	cmp	r6, #0
   125f4:	beq	12750 <__assert_fail@plt+0x1298>
   125f8:	mov	r1, #0
   125fc:	mov	r0, r8
   12600:	bl	11f30 <__assert_fail@plt+0xa78>
   12604:	mov	r3, #1
   12608:	str	r3, [sp, #44]	; 0x2c
   1260c:	b	12374 <__assert_fail@plt+0xebc>
   12610:	ldr	r7, [sp, #52]	; 0x34
   12614:	ldr	r3, [sp, #2112]	; 0x840
   12618:	cmp	r3, #0
   1261c:	bge	12364 <__assert_fail@plt+0xeac>
   12620:	mov	r2, r7
   12624:	mov	r1, r5
   12628:	ldr	r0, [sp, #2116]	; 0x844
   1262c:	bl	17268 <__assert_fail@plt+0x5db0>
   12630:	b	12364 <__assert_fail@plt+0xeac>
   12634:	ldr	r3, [sp, #64]	; 0x40
   12638:	movw	r1, #40876	; 0x9fac
   1263c:	movt	r1, #1
   12640:	mov	r2, r9
   12644:	mov	r0, r6
   12648:	ldr	r4, [r3]
   1264c:	b	1216c <__assert_fail@plt+0xcb4>
   12650:	mov	r3, #65536	; 0x10000
   12654:	mov	r1, #2
   12658:	movt	r1, #1
   1265c:	mov	r7, r1
   12660:	str	r3, [sp, #52]	; 0x34
   12664:	b	120d8 <__assert_fail@plt+0xc20>
   12668:	mov	r2, #5
   1266c:	movw	r1, #40796	; 0x9f5c
   12670:	movt	r1, #1
   12674:	mov	r0, #0
   12678:	bl	111e8 <dcgettext@plt>
   1267c:	ldr	r3, [sp, #2120]	; 0x848
   12680:	mov	r1, #0
   12684:	mov	r2, r0
   12688:	mov	r0, r1
   1268c:	ldr	ip, [sp, #2124]	; 0x84c
   12690:	stm	sp, {r3, ip}
   12694:	ldr	r3, [sp, #40]	; 0x28
   12698:	ldr	ip, [sp, #68]	; 0x44
   1269c:	str	ip, [sp, #8]
   126a0:	bl	1129c <error@plt>
   126a4:	mov	r0, #0
   126a8:	bl	111b8 <time@plt>
   126ac:	add	r3, r0, #5
   126b0:	str	r3, [sp, #84]	; 0x54
   126b4:	b	122e8 <__assert_fail@plt+0xe30>
   126b8:	movw	r3, #40976	; 0xa010
   126bc:	movt	r3, #1
   126c0:	ldrh	r2, [r3, #4]
   126c4:	add	r0, sp, #108	; 0x6c
   126c8:	ldr	r1, [r3]
   126cc:	str	r0, [sp, #68]	; 0x44
   126d0:	ldrb	r3, [r3, #6]
   126d4:	str	r1, [sp, #108]	; 0x6c
   126d8:	strh	r2, [r0, #4]
   126dc:	strb	r3, [r0, #6]
   126e0:	b	122d4 <__assert_fail@plt+0xe1c>
   126e4:	cmp	r7, #0
   126e8:	beq	12298 <__assert_fail@plt+0xde0>
   126ec:	mov	r3, #0
   126f0:	mvn	r1, #127	; 0x7f
   126f4:	ldrb	r2, [r5, r3]
   126f8:	eor	r2, r2, r1
   126fc:	strb	r2, [r5, r3]
   12700:	add	r3, r3, #512	; 0x200
   12704:	cmp	r3, r7
   12708:	bcc	126f4 <__assert_fail@plt+0x123c>
   1270c:	b	12298 <__assert_fail@plt+0xde0>
   12710:	lsr	r6, sl, #1
   12714:	mov	r7, sl
   12718:	strb	r1, [r5]
   1271c:	strb	r3, [r5, #1]
   12720:	cmp	r6, #2
   12724:	strb	r2, [r5, #2]
   12728:	movls	r4, #3
   1272c:	bhi	12260 <__assert_fail@plt+0xda8>
   12730:	b	12280 <__assert_fail@plt+0xdc8>
   12734:	sub	r2, r7, r4
   12738:	add	r0, r5, r4
   1273c:	mov	r1, r5
   12740:	bl	11194 <memcpy@plt>
   12744:	cmp	r6, #0
   12748:	bne	126ec <__assert_fail@plt+0x1234>
   1274c:	b	12298 <__assert_fail@plt+0xde0>
   12750:	mov	r2, #5
   12754:	mov	r0, r6
   12758:	movw	r1, #40844	; 0x9f8c
   1275c:	movt	r1, #1
   12760:	bl	111e8 <dcgettext@plt>
   12764:	mov	r7, r0
   12768:	ldrd	r0, [sp, #24]
   1276c:	add	r2, sp, #1408	; 0x580
   12770:	add	r2, r2, #12
   12774:	adds	r0, r0, r4
   12778:	adc	r1, r1, #0
   1277c:	bl	149dc <__assert_fail@plt+0x3524>
   12780:	mov	r2, r7
   12784:	mov	r1, r9
   12788:	str	r0, [sp]
   1278c:	mov	r0, r6
   12790:	ldr	r3, [sp, #40]	; 0x28
   12794:	bl	1129c <error@plt>
   12798:	b	12184 <__assert_fail@plt+0xccc>
   1279c:	ldrd	r6, [sp, #24]
   127a0:	mvn	r3, #0
   127a4:	mvn	r1, #-2147483648	; 0x80000000
   127a8:	subs	r3, r3, r6
   127ac:	sbc	r1, r1, r7
   127b0:	str	r3, [sp, #96]	; 0x60
   127b4:	mov	r3, #0
   127b8:	str	r1, [sp, #100]	; 0x64
   127bc:	ldrd	r0, [sp, #96]	; 0x60
   127c0:	cmp	r0, r4
   127c4:	sbcs	r1, r1, r3
   127c8:	blt	12940 <__assert_fail@plt+0x1488>
   127cc:	ldr	r1, [sp, #24]
   127d0:	adds	r1, r1, r4
   127d4:	str	r1, [sp, #24]
   127d8:	ldr	r1, [sp, #28]
   127dc:	adc	r3, r1, r3
   127e0:	ldr	r1, [sp, #72]	; 0x48
   127e4:	str	r3, [sp, #28]
   127e8:	ldr	r3, [sp, #2124]	; 0x84c
   127ec:	cmp	r3, #0
   127f0:	ldrd	r2, [sp, #24]
   127f4:	strdeq	r2, [sp, #32]
   127f8:	strd	r2, [r1]
   127fc:	beq	12308 <__assert_fail@plt+0xe50>
   12800:	ldrd	r2, [sp, #24]
   12804:	strd	r2, [sp, #32]
   12808:	ldr	r3, [sp, #76]	; 0x4c
   1280c:	ldrb	r0, [r3]
   12810:	cmp	r0, #0
   12814:	bne	1282c <__assert_fail@plt+0x1374>
   12818:	bl	111b8 <time@plt>
   1281c:	ldr	r2, [sp, #84]	; 0x54
   12820:	str	r0, [sp, #80]	; 0x50
   12824:	cmp	r2, r0
   12828:	bgt	12308 <__assert_fail@plt+0xe50>
   1282c:	mov	r6, #1
   12830:	mov	r7, #0
   12834:	ldrd	r0, [sp, #24]
   12838:	movw	r3, #434	; 0x1b2
   1283c:	add	r2, sp, #768	; 0x300
   12840:	strd	r6, [sp]
   12844:	strd	r6, [sp, #8]
   12848:	bl	13de0 <__assert_fail@plt+0x2928>
   1284c:	mov	r9, r0
   12850:	ldrd	sl, [sp, #32]
   12854:	orrs	r3, sl, fp
   12858:	moveq	sl, #100	; 0x64
   1285c:	beq	128b4 <__assert_fail@plt+0x13fc>
   12860:	add	r3, pc, #384	; 0x180
   12864:	ldrd	r2, [r3]
   12868:	ldrd	r6, [sp, #24]
   1286c:	cmp	r2, r6
   12870:	sbcs	r3, r3, r7
   12874:	blt	129a4 <__assert_fail@plt+0x14ec>
   12878:	adds	r3, r6, r6
   1287c:	mov	r2, sl
   12880:	adc	r1, r7, r7
   12884:	adds	r3, r3, r6
   12888:	adc	r1, r1, r7
   1288c:	lsl	r0, r3, #5
   12890:	lsl	ip, r1, #5
   12894:	adds	r0, r3, r0
   12898:	orr	ip, ip, r3, lsr #27
   1289c:	mov	r3, fp
   128a0:	adc	r1, r1, ip
   128a4:	adds	r0, r0, r6
   128a8:	adc	r1, r1, r7
   128ac:	bl	19ab0 <__assert_fail@plt+0x85f8>
   128b0:	mov	sl, r0
   128b4:	mov	r6, #1
   128b8:	mov	r7, #0
   128bc:	ldrd	r0, [sp, #32]
   128c0:	add	r2, sp, #1408	; 0x580
   128c4:	mov	r3, #432	; 0x1b0
   128c8:	add	r2, r2, #12
   128cc:	strd	r6, [sp]
   128d0:	strd	r6, [sp, #8]
   128d4:	bl	13de0 <__assert_fail@plt+0x2928>
   128d8:	mov	r4, r0
   128dc:	ldrd	r0, [sp, #24]
   128e0:	ldrd	r2, [sp, #32]
   128e4:	cmp	r3, r1
   128e8:	movw	r1, #40924	; 0x9fdc
   128ec:	movt	r1, #1
   128f0:	cmpeq	r2, r0
   128f4:	mov	r2, #5
   128f8:	mov	r0, #0
   128fc:	moveq	r9, r4
   12900:	bl	111e8 <dcgettext@plt>
   12904:	ldr	ip, [sp, #68]	; 0x44
   12908:	mov	r1, #0
   1290c:	mov	r2, r0
   12910:	mov	r0, r1
   12914:	ldr	r3, [sp, #2120]	; 0x848
   12918:	str	r3, [sp]
   1291c:	ldr	r3, [sp, #2124]	; 0x84c
   12920:	str	ip, [sp, #8]
   12924:	str	r9, [sp, #12]
   12928:	str	r4, [sp, #16]
   1292c:	str	sl, [sp, #20]
   12930:	str	r3, [sp, #4]
   12934:	ldr	r3, [sp, #40]	; 0x28
   12938:	bl	1129c <error@plt>
   1293c:	b	12570 <__assert_fail@plt+0x10b8>
   12940:	mov	r2, #5
   12944:	movw	r1, #40824	; 0x9f78
   12948:	movt	r1, #1
   1294c:	mov	r0, #0
   12950:	bl	111e8 <dcgettext@plt>
   12954:	mov	r2, r0
   12958:	mov	r1, #0
   1295c:	ldr	r3, [sp, #40]	; 0x28
   12960:	b	1217c <__assert_fail@plt+0xcc4>
   12964:	add	r3, sp, #116	; 0x74
   12968:	str	r3, [sp, #76]	; 0x4c
   1296c:	b	12308 <__assert_fail@plt+0xe50>
   12970:	mov	r0, r8
   12974:	ldr	r1, [sp, #40]	; 0x28
   12978:	bl	11f94 <__assert_fail@plt+0xadc>
   1297c:	cmp	r0, #0
   12980:	beq	129cc <__assert_fail@plt+0x1514>
   12984:	bl	11338 <__errno_location@plt>
   12988:	ldr	r3, [r0]
   1298c:	mov	r0, r5
   12990:	cmp	r3, #5
   12994:	bne	12188 <__assert_fail@plt+0xcd0>
   12998:	bl	13d7c <__assert_fail@plt+0x28c4>
   1299c:	mov	r0, #1
   129a0:	b	12190 <__assert_fail@plt+0xcd8>
   129a4:	mov	r2, #100	; 0x64
   129a8:	mov	r3, #0
   129ac:	ldrd	r0, [sp, #32]
   129b0:	bl	199dc <__assert_fail@plt+0x8524>
   129b4:	mov	r2, r0
   129b8:	mov	r3, r1
   129bc:	ldrd	r0, [sp, #24]
   129c0:	bl	19ab0 <__assert_fail@plt+0x85f8>
   129c4:	mov	sl, r0
   129c8:	b	128b4 <__assert_fail@plt+0x13fc>
   129cc:	mov	r0, r5
   129d0:	bl	13d7c <__assert_fail@plt+0x28c4>
   129d4:	ldr	r0, [sp, #48]	; 0x30
   129d8:	b	12190 <__assert_fail@plt+0xcd8>
   129dc:	bl	11338 <__errno_location@plt>
   129e0:	ldr	r4, [r0]
   129e4:	b	1215c <__assert_fail@plt+0xca4>
   129e8:			; <UNDEFINED> instruction: 0xf5c28f5c
   129ec:	addeq	r5, pc, #40, 24	; 0x2800
   129f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129f4:	mov	r4, r3
   129f8:	ldrb	r3, [r3, #20]
   129fc:	strd	r6, [sp, #8]
   12a00:	strd	r8, [sp, #16]
   12a04:	mov	r8, r0
   12a08:	mov	r9, r1
   12a0c:	strd	sl, [sp, #24]
   12a10:	mov	r1, r0
   12a14:	mov	r0, #3
   12a18:	str	lr, [sp, #32]
   12a1c:	sub	sp, sp, #188	; 0xbc
   12a20:	cmp	r3, #0
   12a24:	ldrne	r3, [r4, #4]
   12a28:	str	r2, [sp, #20]
   12a2c:	ldrbne	r2, [r4, #22]
   12a30:	addne	r3, r2, r3
   12a34:	add	r2, sp, #80	; 0x50
   12a38:	str	r3, [sp, #56]	; 0x38
   12a3c:	bl	11230 <__fxstat64@plt>
   12a40:	cmp	r0, #0
   12a44:	bne	12bb8 <__assert_fail@plt+0x1700>
   12a48:	ldr	r3, [sp, #96]	; 0x60
   12a4c:	and	r3, r3, #61440	; 0xf000
   12a50:	cmp	r3, #8192	; 0x2000
   12a54:	beq	12dcc <__assert_fail@plt+0x1914>
   12a58:	cmp	r3, #49152	; 0xc000
   12a5c:	cmpne	r3, #4096	; 0x1000
   12a60:	moveq	r2, #1
   12a64:	movne	r2, #0
   12a68:	str	r2, [sp, #16]
   12a6c:	beq	12b6c <__assert_fail@plt+0x16b4>
   12a70:	cmp	r3, #32768	; 0x8000
   12a74:	bne	12a88 <__assert_fail@plt+0x15d0>
   12a78:	ldrd	r2, [sp, #128]	; 0x80
   12a7c:	cmp	r2, #0
   12a80:	sbcs	r3, r3, #0
   12a84:	blt	12f9c <__assert_fail@plt+0x1ae4>
   12a88:	mov	r1, #4
   12a8c:	ldr	r0, [r4, #4]
   12a90:	bl	18198 <__assert_fail@plt+0x6ce0>
   12a94:	ldrd	r2, [r4, #8]
   12a98:	mov	sl, r0
   12a9c:	mov	r1, r3
   12aa0:	mvn	r3, #0
   12aa4:	cmp	r1, r3
   12aa8:	ldr	r3, [sp, #96]	; 0x60
   12aac:	mov	r0, r2
   12ab0:	mvn	r2, #0
   12ab4:	cmpeq	r0, r2
   12ab8:	strd	r0, [sp, #24]
   12abc:	and	r3, r3, #61440	; 0xf000
   12ac0:	beq	12de8 <__assert_fail@plt+0x1930>
   12ac4:	cmp	r3, #32768	; 0x8000
   12ac8:	beq	12bf4 <__assert_fail@plt+0x173c>
   12acc:	ldr	r3, [r4, #4]
   12ad0:	cmp	r3, #0
   12ad4:	str	r3, [sp, #32]
   12ad8:	beq	12ee4 <__assert_fail@plt+0x1a2c>
   12adc:	mov	r2, #0
   12ae0:	mov	r3, #0
   12ae4:	strd	r2, [sp, #40]	; 0x28
   12ae8:	mov	r3, #0
   12aec:	movw	r6, #40176	; 0x9cf0
   12af0:	movt	r6, #1
   12af4:	mvn	r5, #1
   12af8:	str	sl, [sp, #48]	; 0x30
   12afc:	mov	fp, r3
   12b00:	str	r4, [sp, #60]	; 0x3c
   12b04:	mov	r4, sl
   12b08:	ldr	r7, [sp, #32]
   12b0c:	b	12b28 <__assert_fail@plt+0x1670>
   12b10:	rsb	r2, r5, #0
   12b14:	cmp	r2, r7
   12b18:	bcs	12ed0 <__assert_fail@plt+0x1a18>
   12b1c:	sub	fp, fp, r5
   12b20:	add	r7, r7, r5
   12b24:	ldr	r5, [r6]
   12b28:	cmp	r5, #0
   12b2c:	ldreq	r6, [pc, #1284]	; 13038 <__assert_fail@plt+0x1b80>
   12b30:	mvneq	r5, #1
   12b34:	beq	12b10 <__assert_fail@plt+0x1658>
   12b38:	add	r6, r6, #4
   12b3c:	lsl	sl, r5, #2
   12b40:	mov	r0, r4
   12b44:	mov	r1, r6
   12b48:	blt	12b10 <__assert_fail@plt+0x1658>
   12b4c:	cmp	r5, r7
   12b50:	mov	r2, sl
   12b54:	bhi	12cf4 <__assert_fail@plt+0x183c>
   12b58:	bl	11194 <memcpy@plt>
   12b5c:	add	r6, r6, sl
   12b60:	add	r4, r4, sl
   12b64:	sub	r7, r7, r5
   12b68:	b	12b24 <__assert_fail@plt+0x166c>
   12b6c:	mov	r2, #5
   12b70:	movw	r1, #41004	; 0xa02c
   12b74:	movt	r1, #1
   12b78:	mov	r0, #0
   12b7c:	bl	111e8 <dcgettext@plt>
   12b80:	mov	r1, #0
   12b84:	mov	r2, r0
   12b88:	mov	r3, r9
   12b8c:	mov	r0, r1
   12b90:	str	r1, [sp, #16]
   12b94:	bl	1129c <error@plt>
   12b98:	ldr	r0, [sp, #16]
   12b9c:	add	sp, sp, #188	; 0xbc
   12ba0:	ldrd	r4, [sp]
   12ba4:	ldrd	r6, [sp, #8]
   12ba8:	ldrd	r8, [sp, #16]
   12bac:	ldrd	sl, [sp, #24]
   12bb0:	add	sp, sp, #32
   12bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bb8:	bl	11338 <__errno_location@plt>
   12bbc:	ldr	r4, [r0]
   12bc0:	mov	r2, #5
   12bc4:	movw	r1, #40984	; 0xa018
   12bc8:	movt	r1, #1
   12bcc:	mov	r0, #0
   12bd0:	bl	111e8 <dcgettext@plt>
   12bd4:	mov	r2, r0
   12bd8:	mov	r3, r9
   12bdc:	mov	r0, #0
   12be0:	mov	r1, r4
   12be4:	bl	1129c <error@plt>
   12be8:	mov	r3, #0
   12bec:	str	r3, [sp, #16]
   12bf0:	b	12b98 <__assert_fail@plt+0x16e0>
   12bf4:	ldrd	r0, [sp, #128]	; 0x80
   12bf8:	ldr	r2, [sp, #136]	; 0x88
   12bfc:	strd	r0, [sp, #40]	; 0x28
   12c00:	ldrd	r0, [sp, #24]
   12c04:	sub	r3, r2, #1
   12c08:	cmp	r3, #536870912	; 0x20000000
   12c0c:	movcs	r2, #512	; 0x200
   12c10:	asr	r3, r2, #31
   12c14:	cmp	r0, r2
   12c18:	sbcs	ip, r1, r3
   12c1c:	movlt	r3, r1
   12c20:	movlt	r2, r0
   12c24:	ldrd	r0, [sp, #40]	; 0x28
   12c28:	cmp	r0, r2
   12c2c:	sbcs	r3, r1, r3
   12c30:	bge	12acc <__assert_fail@plt+0x1614>
   12c34:	ldr	r3, [r4, #4]
   12c38:	cmp	r3, #0
   12c3c:	str	r3, [sp, #32]
   12c40:	bne	12ae8 <__assert_fail@plt+0x1630>
   12c44:	ldr	r0, [sp, #20]
   12c48:	bl	16dd8 <__assert_fail@plt+0x5920>
   12c4c:	ldrd	r2, [sp, #40]	; 0x28
   12c50:	mov	r7, r0
   12c54:	orrs	r1, r2, r3
   12c58:	beq	12ccc <__assert_fail@plt+0x1814>
   12c5c:	mov	fp, #1
   12c60:	mov	r6, #0
   12c64:	strd	r2, [sp, #72]	; 0x48
   12c68:	mov	r5, #0
   12c6c:	ldrb	r3, [r4, #22]
   12c70:	mov	r1, #0
   12c74:	ldr	r2, [r4, #4]
   12c78:	add	r3, r3, r2
   12c7c:	cmp	r3, r5
   12c80:	bls	12cd0 <__assert_fail@plt+0x1818>
   12c84:	cmp	r2, r5
   12c88:	add	r3, sp, #72	; 0x48
   12c8c:	ldrhi	r1, [sl, r5, lsl #2]
   12c90:	add	r5, r5, #1
   12c94:	mov	r2, r9
   12c98:	mov	r0, r8
   12c9c:	stm	sp, {r1, r7}
   12ca0:	add	r1, sp, #80	; 0x50
   12ca4:	str	r5, [sp, #8]
   12ca8:	str	r6, [sp, #12]
   12cac:	bl	12064 <__assert_fail@plt+0xbac>
   12cb0:	cmp	r0, #0
   12cb4:	beq	12c6c <__assert_fail@plt+0x17b4>
   12cb8:	mov	fp, #0
   12cbc:	bge	12c6c <__assert_fail@plt+0x17b4>
   12cc0:	mov	r0, sl
   12cc4:	bl	13d7c <__assert_fail@plt+0x28c4>
   12cc8:	b	12b98 <__assert_fail@plt+0x16e0>
   12ccc:	mov	fp, #1
   12cd0:	ldrd	r2, [sp, #24]
   12cd4:	orrs	r1, r2, r3
   12cd8:	beq	12fcc <__assert_fail@plt+0x1b14>
   12cdc:	strd	r2, [sp, #72]	; 0x48
   12ce0:	mov	r2, #0
   12ce4:	mov	r3, #0
   12ce8:	ldr	r6, [sp, #56]	; 0x38
   12cec:	strd	r2, [sp, #24]
   12cf0:	b	12c68 <__assert_fail@plt+0x17b0>
   12cf4:	cmp	r7, #1
   12cf8:	ldr	sl, [sp, #48]	; 0x30
   12cfc:	str	fp, [sp, #48]	; 0x30
   12d00:	mov	fp, r4
   12d04:	ldr	r4, [sp, #60]	; 0x3c
   12d08:	bls	12d18 <__assert_fail@plt+0x1860>
   12d0c:	add	r3, r7, r7, lsl #1
   12d10:	cmp	r5, r3
   12d14:	bls	12f20 <__assert_fail@plt+0x1a68>
   12d18:	ldr	r3, [sp, #48]	; 0x30
   12d1c:	add	r3, r3, r7
   12d20:	str	r3, [sp, #48]	; 0x30
   12d24:	ldr	r3, [sp, #32]
   12d28:	mov	r5, #0
   12d2c:	str	r8, [sp, #32]
   12d30:	ldr	r2, [sp, #48]	; 0x30
   12d34:	str	r9, [sp, #48]	; 0x30
   12d38:	mov	r8, r3
   12d3c:	sub	r7, r2, #1
   12d40:	sub	r6, r3, r2
   12d44:	sub	r2, r3, #1
   12d48:	mov	fp, r7
   12d4c:	mov	r9, r2
   12d50:	b	12d7c <__assert_fail@plt+0x18c4>
   12d54:	ldr	r3, [sl, r5, lsl #2]
   12d58:	add	fp, fp, r9
   12d5c:	sub	fp, fp, r7
   12d60:	str	r3, [sl, r6, lsl #2]
   12d64:	mvn	r3, #0
   12d68:	add	r6, r6, #1
   12d6c:	str	r3, [sl, r5, lsl #2]
   12d70:	add	r5, r5, #1
   12d74:	cmp	r5, r8
   12d78:	beq	12dc0 <__assert_fail@plt+0x1908>
   12d7c:	cmp	fp, r7
   12d80:	bls	12d54 <__assert_fail@plt+0x189c>
   12d84:	sub	r2, r6, r5
   12d88:	mov	r3, #0
   12d8c:	ldr	r0, [sp, #20]
   12d90:	subs	r2, r2, #1
   12d94:	sub	fp, fp, r7
   12d98:	sbc	r3, r3, #0
   12d9c:	bl	16de0 <__assert_fail@plt+0x5928>
   12da0:	add	r0, r5, r0
   12da4:	ldr	r3, [sl, r5, lsl #2]
   12da8:	ldr	r2, [sl, r0, lsl #2]
   12dac:	str	r2, [sl, r5, lsl #2]
   12db0:	add	r5, r5, #1
   12db4:	cmp	r5, r8
   12db8:	str	r3, [sl, r0, lsl #2]
   12dbc:	bne	12d7c <__assert_fail@plt+0x18c4>
   12dc0:	ldr	r8, [sp, #32]
   12dc4:	ldr	r9, [sp, #48]	; 0x30
   12dc8:	b	12c44 <__assert_fail@plt+0x178c>
   12dcc:	mov	r0, r8
   12dd0:	bl	1147c <isatty@plt>
   12dd4:	cmp	r0, #0
   12dd8:	bne	12b6c <__assert_fail@plt+0x16b4>
   12ddc:	ldr	r3, [sp, #96]	; 0x60
   12de0:	and	r3, r3, #61440	; 0xf000
   12de4:	b	12a58 <__assert_fail@plt+0x15a0>
   12de8:	cmp	r3, #32768	; 0x8000
   12dec:	bne	12ef8 <__assert_fail@plt+0x1a40>
   12df0:	ldrb	r3, [r4, #21]
   12df4:	ldrd	r0, [sp, #128]	; 0x80
   12df8:	cmp	r3, #0
   12dfc:	strd	r0, [sp, #24]
   12e00:	bne	12acc <__assert_fail@plt+0x1614>
   12e04:	ldr	r6, [sp, #136]	; 0x88
   12e08:	sub	r3, r6, #1
   12e0c:	cmp	r3, #536870912	; 0x20000000
   12e10:	movcs	r6, #512	; 0x200
   12e14:	asr	r7, r6, #31
   12e18:	mov	r2, r6
   12e1c:	mov	r3, r7
   12e20:	bl	199dc <__assert_fail@plt+0x8524>
   12e24:	mov	r0, r2
   12e28:	mov	r1, r3
   12e2c:	ldrd	r2, [sp, #24]
   12e30:	mov	ip, r2
   12e34:	orrs	r3, ip, r3
   12e38:	ldrd	r2, [sp, #24]
   12e3c:	movne	ip, #1
   12e40:	moveq	ip, #0
   12e44:	cmp	r2, r6
   12e48:	sbcs	r3, r3, r7
   12e4c:	movge	r3, #0
   12e50:	andlt	r3, ip, #1
   12e54:	cmp	r3, #0
   12e58:	ldrdne	r2, [sp, #24]
   12e5c:	moveq	r2, #0
   12e60:	moveq	r3, #0
   12e64:	strd	r2, [sp, #40]	; 0x28
   12e68:	orrs	r3, r0, r1
   12e6c:	beq	12c34 <__assert_fail@plt+0x177c>
   12e70:	subs	r3, r6, r0
   12e74:	sbc	r2, r7, r1
   12e78:	ldrd	r0, [sp, #24]
   12e7c:	str	r3, [sp, #48]	; 0x30
   12e80:	mvn	r3, #0
   12e84:	str	r2, [sp, #52]	; 0x34
   12e88:	mvn	r2, #-2147483648	; 0x80000000
   12e8c:	subs	r3, r3, r0
   12e90:	str	r3, [sp, #32]
   12e94:	sbc	r3, r2, r1
   12e98:	str	r3, [sp, #36]	; 0x24
   12e9c:	ldrd	r0, [sp, #32]
   12ea0:	ldrd	r2, [sp, #48]	; 0x30
   12ea4:	cmp	r2, r0
   12ea8:	sbcs	r1, r3, r1
   12eac:	ldr	r1, [sp, #24]
   12eb0:	strdlt	r2, [sp, #32]
   12eb4:	ldrd	r2, [sp, #32]
   12eb8:	adds	r1, r1, r2
   12ebc:	str	r1, [sp, #24]
   12ec0:	ldr	r1, [sp, #28]
   12ec4:	adc	r3, r1, r3
   12ec8:	str	r3, [sp, #28]
   12ecc:	b	12c34 <__assert_fail@plt+0x177c>
   12ed0:	add	r3, fp, r7
   12ed4:	ldr	sl, [sp, #48]	; 0x30
   12ed8:	str	r3, [sp, #48]	; 0x30
   12edc:	ldr	r4, [sp, #60]	; 0x3c
   12ee0:	b	12d24 <__assert_fail@plt+0x186c>
   12ee4:	ldr	r0, [sp, #20]
   12ee8:	mov	fp, #1
   12eec:	bl	16dd8 <__assert_fail@plt+0x5920>
   12ef0:	mov	r7, r0
   12ef4:	b	12cd0 <__assert_fail@plt+0x1818>
   12ef8:	mov	r1, #2
   12efc:	mov	r3, #0
   12f00:	mov	r2, #0
   12f04:	mov	r0, r8
   12f08:	str	r1, [sp]
   12f0c:	bl	11260 <lseek64@plt>
   12f10:	cmp	r0, #1
   12f14:	sbcs	r3, r1, #0
   12f18:	strdge	r0, [sp, #24]
   12f1c:	b	12acc <__assert_fail@plt+0x1614>
   12f20:	asr	r3, r5, #31
   12f24:	subs	r1, r5, #1
   12f28:	str	sl, [sp, #60]	; 0x3c
   12f2c:	sub	r5, r5, r1
   12f30:	strd	r8, [sp, #64]	; 0x40
   12f34:	mov	r8, r1
   12f38:	sbc	r2, r3, #0
   12f3c:	ldr	sl, [sp, #20]
   12f40:	mov	r9, r2
   12f44:	b	12f50 <__assert_fail@plt+0x1a98>
   12f48:	subs	r8, r8, #1
   12f4c:	sbc	r9, r9, #0
   12f50:	add	r1, r5, r8
   12f54:	mov	r2, r8
   12f58:	cmp	r7, r1
   12f5c:	mov	r3, r9
   12f60:	mov	r0, sl
   12f64:	add	r6, r6, #4
   12f68:	beq	12f80 <__assert_fail@plt+0x1ac8>
   12f6c:	bl	16de0 <__assert_fail@plt+0x5928>
   12f70:	mov	r3, #0
   12f74:	cmp	r1, r3
   12f78:	cmpeq	r0, r7
   12f7c:	bcs	12f48 <__assert_fail@plt+0x1a90>
   12f80:	ldr	r3, [r6, #-4]
   12f84:	subs	r7, r7, #1
   12f88:	str	r3, [fp], #4
   12f8c:	bne	12f48 <__assert_fail@plt+0x1a90>
   12f90:	ldr	sl, [sp, #60]	; 0x3c
   12f94:	ldrd	r8, [sp, #64]	; 0x40
   12f98:	b	12d24 <__assert_fail@plt+0x186c>
   12f9c:	ldr	r4, [sp, #16]
   12fa0:	mov	r2, #5
   12fa4:	movw	r1, #41028	; 0xa044
   12fa8:	movt	r1, #1
   12fac:	mov	r0, r4
   12fb0:	bl	111e8 <dcgettext@plt>
   12fb4:	mov	r2, r0
   12fb8:	mov	r3, r9
   12fbc:	mov	r1, r4
   12fc0:	mov	r0, r4
   12fc4:	bl	1129c <error@plt>
   12fc8:	b	12b98 <__assert_fail@plt+0x16e0>
   12fcc:	ldr	r3, [r4, #16]
   12fd0:	cmp	r3, #0
   12fd4:	bne	12fe0 <__assert_fail@plt+0x1b28>
   12fd8:	str	fp, [sp, #16]
   12fdc:	b	12cc0 <__assert_fail@plt+0x1808>
   12fe0:	mov	r0, r8
   12fe4:	ldrd	r2, [sp, #24]
   12fe8:	bl	111c4 <ftruncate64@plt>
   12fec:	cmp	r0, #0
   12ff0:	beq	12fd8 <__assert_fail@plt+0x1b20>
   12ff4:	ldr	r3, [sp, #96]	; 0x60
   12ff8:	and	r3, r3, #61440	; 0xf000
   12ffc:	cmp	r3, #32768	; 0x8000
   13000:	bne	12fd8 <__assert_fail@plt+0x1b20>
   13004:	bl	11338 <__errno_location@plt>
   13008:	ldr	r4, [r0]
   1300c:	mov	r2, #5
   13010:	movw	r1, #41056	; 0xa060
   13014:	movt	r1, #1
   13018:	mov	r0, #0
   1301c:	bl	111e8 <dcgettext@plt>
   13020:	mov	r2, r0
   13024:	mov	r3, r9
   13028:	mov	r0, #0
   1302c:	mov	r1, r4
   13030:	bl	1129c <error@plt>
   13034:	b	12cc0 <__assert_fail@plt+0x1808>
   13038:	strdeq	r9, [r1], -r4
   1303c:	subs	r4, r0, #0
   13040:	str	r7, [sp, #-8]!
   13044:	str	lr, [sp, #4]
   13048:	sub	sp, sp, #56	; 0x38
   1304c:	beq	13094 <__assert_fail@plt+0x1bdc>
   13050:	movw	r3, #49584	; 0xc1b0
   13054:	movt	r3, #2
   13058:	ldr	r5, [r3]
   1305c:	mov	r2, #5
   13060:	movw	r1, #41088	; 0xa080
   13064:	movt	r1, #1
   13068:	mov	r0, #0
   1306c:	bl	111e8 <dcgettext@plt>
   13070:	movw	r3, #49616	; 0xc1d0
   13074:	movt	r3, #2
   13078:	mov	r2, r0
   1307c:	mov	r1, #1
   13080:	ldr	r3, [r3]
   13084:	mov	r0, r5
   13088:	bl	113a4 <__fprintf_chk@plt>
   1308c:	mov	r0, r4
   13090:	bl	11308 <exit@plt>
   13094:	mov	r2, #5
   13098:	movw	r1, #41128	; 0xa0a8
   1309c:	movt	r1, #1
   130a0:	movw	r5, #49588	; 0xc1b4
   130a4:	movt	r5, #2
   130a8:	bl	111e8 <dcgettext@plt>
   130ac:	movw	r3, #49616	; 0xc1d0
   130b0:	movt	r3, #2
   130b4:	mov	r1, r0
   130b8:	mov	r0, #1
   130bc:	ldr	r2, [r3]
   130c0:	bl	11380 <__printf_chk@plt>
   130c4:	mov	r2, #5
   130c8:	movw	r1, #41160	; 0xa0c8
   130cc:	movt	r1, #1
   130d0:	mov	r0, r4
   130d4:	bl	111e8 <dcgettext@plt>
   130d8:	ldr	r1, [r5]
   130dc:	bl	11134 <fputs_unlocked@plt>
   130e0:	mov	r2, #5
   130e4:	movw	r1, #41296	; 0xa150
   130e8:	movt	r1, #1
   130ec:	mov	r0, r4
   130f0:	bl	111e8 <dcgettext@plt>
   130f4:	ldr	r1, [r5]
   130f8:	bl	11134 <fputs_unlocked@plt>
   130fc:	mov	r2, #5
   13100:	movw	r1, #41336	; 0xa178
   13104:	movt	r1, #1
   13108:	mov	r0, r4
   1310c:	bl	111e8 <dcgettext@plt>
   13110:	ldr	r1, [r5]
   13114:	bl	11134 <fputs_unlocked@plt>
   13118:	mov	r2, #5
   1311c:	movw	r1, #41412	; 0xa1c4
   13120:	movt	r1, #1
   13124:	mov	r0, r4
   13128:	bl	111e8 <dcgettext@plt>
   1312c:	mov	r1, r0
   13130:	mov	r2, #3
   13134:	mov	r0, #1
   13138:	bl	11380 <__printf_chk@plt>
   1313c:	mov	r2, #5
   13140:	movw	r1, #41676	; 0xa2cc
   13144:	movt	r1, #1
   13148:	mov	r0, r4
   1314c:	bl	111e8 <dcgettext@plt>
   13150:	ldr	r1, [r5]
   13154:	bl	11134 <fputs_unlocked@plt>
   13158:	mov	r2, #5
   1315c:	movw	r1, #42044	; 0xa43c
   13160:	movt	r1, #1
   13164:	mov	r0, r4
   13168:	bl	111e8 <dcgettext@plt>
   1316c:	ldr	r1, [r5]
   13170:	bl	11134 <fputs_unlocked@plt>
   13174:	mov	r2, #5
   13178:	movw	r1, #42092	; 0xa46c
   1317c:	movt	r1, #1
   13180:	mov	r0, r4
   13184:	bl	111e8 <dcgettext@plt>
   13188:	ldr	r1, [r5]
   1318c:	bl	11134 <fputs_unlocked@plt>
   13190:	mov	r2, #5
   13194:	movw	r1, #42148	; 0xa4a4
   13198:	movt	r1, #1
   1319c:	mov	r0, r4
   131a0:	bl	111e8 <dcgettext@plt>
   131a4:	ldr	r1, [r5]
   131a8:	bl	11134 <fputs_unlocked@plt>
   131ac:	mov	r2, #5
   131b0:	movw	r1, #42632	; 0xa688
   131b4:	movt	r1, #1
   131b8:	mov	r0, r4
   131bc:	bl	111e8 <dcgettext@plt>
   131c0:	ldr	r1, [r5]
   131c4:	bl	11134 <fputs_unlocked@plt>
   131c8:	movw	r0, #40176	; 0x9cf0
   131cc:	movt	r0, #1
   131d0:	ldr	ip, [r0, #220]	; 0xdc
   131d4:	add	lr, r0, #220	; 0xdc
   131d8:	ldrd	r2, [r0, #228]	; 0xe4
   131dc:	ldr	r6, [r0, #224]	; 0xe0
   131e0:	subs	r1, ip, #0
   131e4:	str	ip, [sp]
   131e8:	ldrd	r8, [r0, #236]	; 0xec
   131ec:	strd	r2, [sp, #8]
   131f0:	ldrd	r2, [r0, #244]	; 0xf4
   131f4:	str	r6, [sp, #4]
   131f8:	ldrd	r6, [r0, #252]	; 0xfc
   131fc:	strd	r8, [sp, #16]
   13200:	ldrd	r8, [lr, #40]	; 0x28
   13204:	strd	r2, [sp, #24]
   13208:	ldrd	r2, [lr, #48]	; 0x30
   1320c:	strd	r6, [sp, #32]
   13210:	movwne	r7, #41080	; 0xa078
   13214:	mov	r6, sp
   13218:	movtne	r7, #1
   1321c:	strd	r8, [sp, #40]	; 0x28
   13220:	strd	r2, [sp, #48]	; 0x30
   13224:	bne	1331c <__assert_fail@plt+0x1e64>
   13228:	ldr	r6, [r6, #4]
   1322c:	movw	r1, #42920	; 0xa7a8
   13230:	movt	r1, #1
   13234:	mov	r2, #5
   13238:	cmp	r6, #0
   1323c:	beq	13330 <__assert_fail@plt+0x1e78>
   13240:	mov	r0, #0
   13244:	bl	111e8 <dcgettext@plt>
   13248:	mov	r1, r0
   1324c:	movw	r3, #42944	; 0xa7c0
   13250:	movt	r3, #1
   13254:	movw	r2, #42984	; 0xa7e8
   13258:	movt	r2, #1
   1325c:	mov	r0, #1
   13260:	bl	11380 <__printf_chk@plt>
   13264:	mov	r1, #0
   13268:	mov	r0, #5
   1326c:	bl	113e0 <setlocale@plt>
   13270:	cmp	r0, #0
   13274:	movweq	r7, #41080	; 0xa078
   13278:	movteq	r7, #1
   1327c:	beq	132a0 <__assert_fail@plt+0x1de8>
   13280:	movw	r1, #43000	; 0xa7f8
   13284:	movt	r1, #1
   13288:	mov	r2, #3
   1328c:	movw	r7, #41080	; 0xa078
   13290:	movt	r7, #1
   13294:	bl	11488 <strncmp@plt>
   13298:	cmp	r0, #0
   1329c:	bne	133e8 <__assert_fail@plt+0x1f30>
   132a0:	mov	r2, #5
   132a4:	movw	r1, #43076	; 0xa844
   132a8:	movt	r1, #1
   132ac:	mov	r0, #0
   132b0:	bl	111e8 <dcgettext@plt>
   132b4:	mov	r1, r0
   132b8:	movw	r3, #41080	; 0xa078
   132bc:	movt	r3, #1
   132c0:	movw	r2, #42944	; 0xa7c0
   132c4:	movt	r2, #1
   132c8:	mov	r0, #1
   132cc:	bl	11380 <__printf_chk@plt>
   132d0:	mov	r2, #5
   132d4:	movw	r1, #43104	; 0xa860
   132d8:	movt	r1, #1
   132dc:	mov	r0, #0
   132e0:	bl	111e8 <dcgettext@plt>
   132e4:	movw	r2, #43572	; 0xaa34
   132e8:	movt	r2, #1
   132ec:	cmp	r6, r7
   132f0:	movw	r3, #42628	; 0xa684
   132f4:	movt	r3, #1
   132f8:	mov	r1, r0
   132fc:	moveq	r3, r2
   13300:	mov	r2, r6
   13304:	mov	r0, #1
   13308:	bl	11380 <__printf_chk@plt>
   1330c:	b	1308c <__assert_fail@plt+0x1bd4>
   13310:	ldr	r1, [r6, #8]!
   13314:	cmp	r1, #0
   13318:	beq	13228 <__assert_fail@plt+0x1d70>
   1331c:	mov	r0, r7
   13320:	bl	11158 <strcmp@plt>
   13324:	cmp	r0, #0
   13328:	bne	13310 <__assert_fail@plt+0x1e58>
   1332c:	b	13228 <__assert_fail@plt+0x1d70>
   13330:	mov	r0, r6
   13334:	bl	111e8 <dcgettext@plt>
   13338:	mov	r1, r0
   1333c:	movw	r3, #42944	; 0xa7c0
   13340:	movt	r3, #1
   13344:	movw	r2, #42984	; 0xa7e8
   13348:	movt	r2, #1
   1334c:	mov	r0, #1
   13350:	bl	11380 <__printf_chk@plt>
   13354:	mov	r1, r6
   13358:	mov	r0, #5
   1335c:	bl	113e0 <setlocale@plt>
   13360:	cmp	r0, #0
   13364:	beq	13380 <__assert_fail@plt+0x1ec8>
   13368:	movw	r1, #43000	; 0xa7f8
   1336c:	movt	r1, #1
   13370:	mov	r2, #3
   13374:	bl	11488 <strncmp@plt>
   13378:	cmp	r0, #0
   1337c:	bne	133dc <__assert_fail@plt+0x1f24>
   13380:	mov	r2, #5
   13384:	movw	r1, #43076	; 0xa844
   13388:	movt	r1, #1
   1338c:	mov	r0, #0
   13390:	bl	111e8 <dcgettext@plt>
   13394:	mov	r1, r0
   13398:	movw	r3, #41080	; 0xa078
   1339c:	movt	r3, #1
   133a0:	movw	r2, #42944	; 0xa7c0
   133a4:	movt	r2, #1
   133a8:	mov	r0, #1
   133ac:	bl	11380 <__printf_chk@plt>
   133b0:	movw	r1, #43104	; 0xa860
   133b4:	movt	r1, #1
   133b8:	mov	r2, #5
   133bc:	mov	r0, #0
   133c0:	bl	111e8 <dcgettext@plt>
   133c4:	movw	r6, #41080	; 0xa078
   133c8:	movt	r6, #1
   133cc:	movw	r3, #43572	; 0xaa34
   133d0:	movt	r3, #1
   133d4:	mov	r1, r0
   133d8:	b	13300 <__assert_fail@plt+0x1e48>
   133dc:	movw	r7, #41080	; 0xa078
   133e0:	movt	r7, #1
   133e4:	mov	r6, r7
   133e8:	mov	r2, #5
   133ec:	movw	r1, #43004	; 0xa7fc
   133f0:	movt	r1, #1
   133f4:	mov	r0, #0
   133f8:	bl	111e8 <dcgettext@plt>
   133fc:	ldr	r1, [r5]
   13400:	bl	11134 <fputs_unlocked@plt>
   13404:	b	132a0 <__assert_fail@plt+0x1de8>
   13408:	mov	r0, #1
   1340c:	b	1303c <__assert_fail@plt+0x1b84>
   13410:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13414:	mov	r5, r1
   13418:	mov	r4, r2
   1341c:	strd	r6, [sp, #8]
   13420:	mov	r7, r3
   13424:	strd	r8, [sp, #16]
   13428:	strd	sl, [sp, #24]
   1342c:	mov	sl, r0
   13430:	str	lr, [sp, #32]
   13434:	sub	sp, sp, #12
   13438:	str	r2, [sp]
   1343c:	bl	11314 <strlen@plt>
   13440:	ldr	fp, [r5]
   13444:	cmp	fp, #0
   13448:	beq	13518 <__assert_fail@plt+0x2060>
   1344c:	mov	r6, #0
   13450:	mov	r8, r0
   13454:	mvn	r9, #0
   13458:	str	r6, [sp, #4]
   1345c:	b	13488 <__assert_fail@plt+0x1fd0>
   13460:	bl	111d0 <memcmp@plt>
   13464:	ldr	r3, [sp, #4]
   13468:	cmp	r0, #0
   1346c:	movne	r3, #1
   13470:	str	r3, [sp, #4]
   13474:	ldr	fp, [r5, #4]!
   13478:	add	r6, r6, #1
   1347c:	add	r4, r4, r7
   13480:	cmp	fp, #0
   13484:	beq	134e4 <__assert_fail@plt+0x202c>
   13488:	mov	r2, r8
   1348c:	mov	r1, sl
   13490:	mov	r0, fp
   13494:	bl	11488 <strncmp@plt>
   13498:	cmp	r0, #0
   1349c:	mov	r0, fp
   134a0:	bne	13474 <__assert_fail@plt+0x1fbc>
   134a4:	bl	11314 <strlen@plt>
   134a8:	ldr	r3, [sp]
   134ac:	cmp	r0, r8
   134b0:	mov	r2, r7
   134b4:	mov	r1, r4
   134b8:	mla	r0, r7, r9, r3
   134bc:	beq	13510 <__assert_fail@plt+0x2058>
   134c0:	cmn	r9, #1
   134c4:	moveq	r9, r6
   134c8:	beq	13474 <__assert_fail@plt+0x1fbc>
   134cc:	ldr	r3, [sp]
   134d0:	cmp	r3, #0
   134d4:	bne	13460 <__assert_fail@plt+0x1fa8>
   134d8:	mov	r3, #1
   134dc:	str	r3, [sp, #4]
   134e0:	b	13474 <__assert_fail@plt+0x1fbc>
   134e4:	ldr	r3, [sp, #4]
   134e8:	cmp	r3, #0
   134ec:	mvnne	r9, #1
   134f0:	mov	r0, r9
   134f4:	add	sp, sp, #12
   134f8:	ldrd	r4, [sp]
   134fc:	ldrd	r6, [sp, #8]
   13500:	ldrd	r8, [sp, #16]
   13504:	ldrd	sl, [sp, #24]
   13508:	add	sp, sp, #32
   1350c:	pop	{pc}		; (ldr pc, [sp], #4)
   13510:	mov	r9, r6
   13514:	b	134f0 <__assert_fail@plt+0x2038>
   13518:	mvn	r9, #0
   1351c:	b	134f0 <__assert_fail@plt+0x2038>
   13520:	strd	r4, [sp, #-16]!
   13524:	str	r6, [sp, #8]
   13528:	mov	r6, r0
   1352c:	ldr	r0, [r1]
   13530:	str	lr, [sp, #12]
   13534:	cmp	r0, #0
   13538:	beq	1357c <__assert_fail@plt+0x20c4>
   1353c:	mov	r4, r1
   13540:	mov	r5, #0
   13544:	b	13558 <__assert_fail@plt+0x20a0>
   13548:	ldr	r0, [r4, #4]!
   1354c:	add	r5, r5, #1
   13550:	cmp	r0, #0
   13554:	beq	1357c <__assert_fail@plt+0x20c4>
   13558:	mov	r1, r6
   1355c:	bl	11158 <strcmp@plt>
   13560:	cmp	r0, #0
   13564:	bne	13548 <__assert_fail@plt+0x2090>
   13568:	mov	r0, r5
   1356c:	ldrd	r4, [sp]
   13570:	ldr	r6, [sp, #8]
   13574:	add	sp, sp, #12
   13578:	pop	{pc}		; (ldr pc, [sp], #4)
   1357c:	ldrd	r4, [sp]
   13580:	mvn	r0, #0
   13584:	ldr	r6, [sp, #8]
   13588:	add	sp, sp, #12
   1358c:	pop	{pc}		; (ldr pc, [sp], #4)
   13590:	cmn	r2, #1
   13594:	strd	r4, [sp, #-16]!
   13598:	mov	r5, r1
   1359c:	movweq	r1, #43808	; 0xab20
   135a0:	movwne	r1, #43836	; 0xab3c
   135a4:	str	r6, [sp, #8]
   135a8:	movteq	r1, #1
   135ac:	movtne	r1, #1
   135b0:	str	lr, [sp, #12]
   135b4:	mov	r6, r0
   135b8:	sub	sp, sp, #8
   135bc:	mov	r2, #5
   135c0:	mov	r0, #0
   135c4:	bl	111e8 <dcgettext@plt>
   135c8:	mov	r4, r0
   135cc:	mov	r2, r5
   135d0:	mov	r1, #8
   135d4:	mov	r0, #0
   135d8:	bl	16a04 <__assert_fail@plt+0x554c>
   135dc:	mov	r5, r0
   135e0:	mov	r1, r6
   135e4:	mov	r0, #1
   135e8:	bl	16d34 <__assert_fail@plt+0x587c>
   135ec:	mov	r1, #0
   135f0:	mov	r3, r5
   135f4:	str	r0, [sp]
   135f8:	mov	r2, r4
   135fc:	mov	r0, r1
   13600:	bl	1129c <error@plt>
   13604:	add	sp, sp, #8
   13608:	ldrd	r4, [sp]
   1360c:	ldr	r6, [sp, #8]
   13610:	add	sp, sp, #12
   13614:	pop	{pc}		; (ldr pc, [sp], #4)
   13618:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1361c:	mov	r4, r1
   13620:	movw	r1, #43868	; 0xab5c
   13624:	movt	r1, #1
   13628:	strd	r6, [sp, #8]
   1362c:	mov	r6, r0
   13630:	mov	r7, r2
   13634:	mov	r0, #0
   13638:	strd	r8, [sp, #16]
   1363c:	mov	r2, #5
   13640:	strd	sl, [sp, #24]
   13644:	movw	sl, #49584	; 0xc1b0
   13648:	movt	sl, #2
   1364c:	str	lr, [sp, #32]
   13650:	sub	sp, sp, #12
   13654:	bl	111e8 <dcgettext@plt>
   13658:	ldr	r1, [sl]
   1365c:	bl	11134 <fputs_unlocked@plt>
   13660:	ldr	fp, [r6]
   13664:	cmp	fp, #0
   13668:	beq	13708 <__assert_fail@plt+0x2250>
   1366c:	movw	r3, #43892	; 0xab74
   13670:	movt	r3, #1
   13674:	mov	r9, #0
   13678:	str	r3, [sp]
   1367c:	movw	r3, #43900	; 0xab7c
   13680:	movt	r3, #1
   13684:	mov	r5, r9
   13688:	str	r3, [sp, #4]
   1368c:	b	136c4 <__assert_fail@plt+0x220c>
   13690:	mov	r0, fp
   13694:	mov	r9, r4
   13698:	bl	16d44 <__assert_fail@plt+0x588c>
   1369c:	mov	r3, r0
   136a0:	mov	r1, #1
   136a4:	ldr	r2, [sp]
   136a8:	mov	r0, r8
   136ac:	bl	113a4 <__fprintf_chk@plt>
   136b0:	ldr	fp, [r6, #4]!
   136b4:	add	r5, r5, #1
   136b8:	add	r4, r4, r7
   136bc:	cmp	fp, #0
   136c0:	beq	13708 <__assert_fail@plt+0x2250>
   136c4:	cmp	r5, #0
   136c8:	mov	r1, r4
   136cc:	ldr	r8, [sl]
   136d0:	mov	r2, r7
   136d4:	mov	r0, r9
   136d8:	beq	13690 <__assert_fail@plt+0x21d8>
   136dc:	bl	111d0 <memcmp@plt>
   136e0:	cmp	r0, #0
   136e4:	bne	13690 <__assert_fail@plt+0x21d8>
   136e8:	mov	r0, fp
   136ec:	bl	16d44 <__assert_fail@plt+0x588c>
   136f0:	mov	r3, r0
   136f4:	mov	r1, #1
   136f8:	ldr	r2, [sp, #4]
   136fc:	mov	r0, r8
   13700:	bl	113a4 <__fprintf_chk@plt>
   13704:	b	136b0 <__assert_fail@plt+0x21f8>
   13708:	ldr	r0, [sl]
   1370c:	ldr	r3, [r0, #20]
   13710:	ldr	r2, [r0, #24]
   13714:	cmp	r3, r2
   13718:	bcs	13748 <__assert_fail@plt+0x2290>
   1371c:	add	r1, r3, #1
   13720:	mov	r2, #10
   13724:	str	r1, [r0, #20]
   13728:	strb	r2, [r3]
   1372c:	add	sp, sp, #12
   13730:	ldrd	r4, [sp]
   13734:	ldrd	r6, [sp, #8]
   13738:	ldrd	r8, [sp, #16]
   1373c:	ldrd	sl, [sp, #24]
   13740:	add	sp, sp, #32
   13744:	pop	{pc}		; (ldr pc, [sp], #4)
   13748:	mov	r1, #10
   1374c:	add	sp, sp, #12
   13750:	ldrd	r4, [sp]
   13754:	ldrd	r6, [sp, #8]
   13758:	ldrd	r8, [sp, #16]
   1375c:	ldrd	sl, [sp, #24]
   13760:	ldr	lr, [sp, #32]
   13764:	add	sp, sp, #36	; 0x24
   13768:	b	113d4 <__overflow@plt>
   1376c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13770:	mov	r5, r1
   13774:	mov	r4, r2
   13778:	ldrb	ip, [sp, #32]
   1377c:	strd	r6, [sp, #8]
   13780:	mov	r7, r0
   13784:	mov	r6, r3
   13788:	str	r8, [sp, #16]
   1378c:	str	lr, [sp, #20]
   13790:	cmp	ip, #0
   13794:	beq	137c8 <__assert_fail@plt+0x2310>
   13798:	mov	r2, r3
   1379c:	mov	r1, r4
   137a0:	ldr	r3, [sp, #24]
   137a4:	mov	r0, r5
   137a8:	bl	13410 <__assert_fail@plt+0x1f58>
   137ac:	cmp	r0, #0
   137b0:	blt	137d8 <__assert_fail@plt+0x2320>
   137b4:	ldrd	r4, [sp]
   137b8:	ldrd	r6, [sp, #8]
   137bc:	ldr	r8, [sp, #16]
   137c0:	add	sp, sp, #20
   137c4:	pop	{pc}		; (ldr pc, [sp], #4)
   137c8:	mov	r1, r2
   137cc:	mov	r0, r5
   137d0:	bl	13520 <__assert_fail@plt+0x2068>
   137d4:	b	137ac <__assert_fail@plt+0x22f4>
   137d8:	mov	r2, r0
   137dc:	mov	r1, r5
   137e0:	mov	r0, r7
   137e4:	bl	13590 <__assert_fail@plt+0x20d8>
   137e8:	mov	r0, r4
   137ec:	mov	r1, r6
   137f0:	ldr	r2, [sp, #24]
   137f4:	bl	13618 <__assert_fail@plt+0x2160>
   137f8:	ldr	r3, [sp, #28]
   137fc:	blx	r3
   13800:	mvn	r0, #0
   13804:	b	137b4 <__assert_fail@plt+0x22fc>
   13808:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1380c:	strd	r6, [sp, #8]
   13810:	ldr	r7, [r1]
   13814:	str	r8, [sp, #16]
   13818:	str	lr, [sp, #20]
   1381c:	cmp	r7, #0
   13820:	beq	13860 <__assert_fail@plt+0x23a8>
   13824:	mov	r6, r3
   13828:	mov	r8, r0
   1382c:	mov	r4, r2
   13830:	mov	r5, r1
   13834:	b	13844 <__assert_fail@plt+0x238c>
   13838:	ldr	r7, [r5, #4]!
   1383c:	cmp	r7, #0
   13840:	beq	13860 <__assert_fail@plt+0x23a8>
   13844:	mov	r1, r4
   13848:	mov	r2, r6
   1384c:	mov	r0, r8
   13850:	add	r4, r4, r6
   13854:	bl	111d0 <memcmp@plt>
   13858:	cmp	r0, #0
   1385c:	bne	13838 <__assert_fail@plt+0x2380>
   13860:	mov	r0, r7
   13864:	ldrd	r4, [sp]
   13868:	ldrd	r6, [sp, #8]
   1386c:	ldr	r8, [sp, #16]
   13870:	add	sp, sp, #20
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	ldrb	r3, [r0]
   1387c:	cmp	r3, #47	; 0x2f
   13880:	bne	13890 <__assert_fail@plt+0x23d8>
   13884:	ldrb	r3, [r0, #1]!
   13888:	cmp	r3, #47	; 0x2f
   1388c:	beq	13884 <__assert_fail@plt+0x23cc>
   13890:	cmp	r3, #0
   13894:	beq	138c4 <__assert_fail@plt+0x240c>
   13898:	mov	r2, r0
   1389c:	mov	r1, #0
   138a0:	cmp	r3, #47	; 0x2f
   138a4:	moveq	r1, #1
   138a8:	beq	138b8 <__assert_fail@plt+0x2400>
   138ac:	cmp	r1, #0
   138b0:	movne	r0, r2
   138b4:	movne	r1, #0
   138b8:	ldrb	r3, [r2, #1]!
   138bc:	cmp	r3, #0
   138c0:	bne	138a0 <__assert_fail@plt+0x23e8>
   138c4:	bx	lr
   138c8:	str	r4, [sp, #-8]!
   138cc:	mov	r4, r0
   138d0:	str	lr, [sp, #4]
   138d4:	bl	11314 <strlen@plt>
   138d8:	cmp	r0, #1
   138dc:	bls	13900 <__assert_fail@plt+0x2448>
   138e0:	add	r2, r4, r0
   138e4:	mov	r3, r0
   138e8:	ldrb	r2, [r2, #-1]
   138ec:	cmp	r2, #47	; 0x2f
   138f0:	subeq	r3, r0, #2
   138f4:	rsbeq	r1, r4, #1
   138f8:	addeq	r3, r4, r3
   138fc:	beq	1390c <__assert_fail@plt+0x2454>
   13900:	ldr	r4, [sp]
   13904:	add	sp, sp, #4
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	cmp	r3, r4
   13910:	add	r0, r1, r3
   13914:	beq	13900 <__assert_fail@plt+0x2448>
   13918:	ldrb	r2, [r3], #-1
   1391c:	cmp	r2, #47	; 0x2f
   13920:	beq	1390c <__assert_fail@plt+0x2454>
   13924:	ldr	r4, [sp]
   13928:	add	sp, sp, #4
   1392c:	pop	{pc}		; (ldr pc, [sp], #4)
   13930:	movw	r3, #49604	; 0xc1c4
   13934:	movt	r3, #2
   13938:	str	r0, [r3]
   1393c:	bx	lr
   13940:	movw	r3, #49604	; 0xc1c4
   13944:	movt	r3, #2
   13948:	strb	r0, [r3, #4]
   1394c:	bx	lr
   13950:	movw	r3, #49588	; 0xc1b4
   13954:	movt	r3, #2
   13958:	strd	r4, [sp, #-16]!
   1395c:	ldr	r0, [r3]
   13960:	str	r6, [sp, #8]
   13964:	str	lr, [sp, #12]
   13968:	sub	sp, sp, #8
   1396c:	bl	190e8 <__assert_fail@plt+0x7c30>
   13970:	cmp	r0, #0
   13974:	beq	139a0 <__assert_fail@plt+0x24e8>
   13978:	movw	r4, #49604	; 0xc1c4
   1397c:	movt	r4, #2
   13980:	ldrb	r6, [r4, #4]
   13984:	bl	11338 <__errno_location@plt>
   13988:	mov	r5, r0
   1398c:	cmp	r6, #0
   13990:	beq	139cc <__assert_fail@plt+0x2514>
   13994:	ldr	r3, [r0]
   13998:	cmp	r3, #32
   1399c:	bne	139cc <__assert_fail@plt+0x2514>
   139a0:	movw	r3, #49584	; 0xc1b0
   139a4:	movt	r3, #2
   139a8:	ldr	r0, [r3]
   139ac:	bl	190e8 <__assert_fail@plt+0x7c30>
   139b0:	cmp	r0, #0
   139b4:	bne	13a14 <__assert_fail@plt+0x255c>
   139b8:	add	sp, sp, #8
   139bc:	ldrd	r4, [sp]
   139c0:	ldr	r6, [sp, #8]
   139c4:	add	sp, sp, #12
   139c8:	pop	{pc}		; (ldr pc, [sp], #4)
   139cc:	movw	r1, #43908	; 0xab84
   139d0:	movt	r1, #1
   139d4:	mov	r2, #5
   139d8:	mov	r0, #0
   139dc:	bl	111e8 <dcgettext@plt>
   139e0:	mov	r6, r0
   139e4:	ldr	r0, [r4]
   139e8:	cmp	r0, #0
   139ec:	beq	13a24 <__assert_fail@plt+0x256c>
   139f0:	ldr	r4, [r5]
   139f4:	bl	16b58 <__assert_fail@plt+0x56a0>
   139f8:	mov	r3, r0
   139fc:	movw	r2, #43920	; 0xab90
   13a00:	movt	r2, #1
   13a04:	mov	r0, #0
   13a08:	str	r6, [sp]
   13a0c:	mov	r1, r4
   13a10:	bl	1129c <error@plt>
   13a14:	movw	r3, #49496	; 0xc158
   13a18:	movt	r3, #2
   13a1c:	ldr	r0, [r3]
   13a20:	bl	11188 <_exit@plt>
   13a24:	mov	r3, r6
   13a28:	movw	r2, #43924	; 0xab94
   13a2c:	movt	r2, #1
   13a30:	ldr	r1, [r5]
   13a34:	bl	1129c <error@plt>
   13a38:	b	13a14 <__assert_fail@plt+0x255c>
   13a3c:	str	r4, [sp, #-8]!
   13a40:	str	lr, [sp, #4]
   13a44:	bl	13ae0 <__assert_fail@plt+0x2628>
   13a48:	cmp	r0, #0
   13a4c:	beq	13a5c <__assert_fail@plt+0x25a4>
   13a50:	ldr	r4, [sp]
   13a54:	add	sp, sp, #4
   13a58:	pop	{pc}		; (ldr pc, [sp], #4)
   13a5c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   13a60:	strd	r4, [sp, #-16]!
   13a64:	mov	r4, r0
   13a68:	str	r6, [sp, #8]
   13a6c:	str	lr, [sp, #12]
   13a70:	ldrb	ip, [r0]
   13a74:	sub	r5, ip, #47	; 0x2f
   13a78:	clz	r5, r5
   13a7c:	bl	13878 <__assert_fail@plt+0x23c0>
   13a80:	lsr	r5, r5, #5
   13a84:	sub	r0, r0, r4
   13a88:	cmp	r0, r5
   13a8c:	bls	13ad0 <__assert_fail@plt+0x2618>
   13a90:	add	r3, r4, r0
   13a94:	ldrb	r3, [r3, #-1]
   13a98:	cmp	r3, #47	; 0x2f
   13a9c:	bne	13ad0 <__assert_fail@plt+0x2618>
   13aa0:	sub	r0, r0, #2
   13aa4:	sub	ip, r4, #1
   13aa8:	add	r3, r4, r0
   13aac:	add	ip, ip, r5
   13ab0:	rsb	r2, r4, #1
   13ab4:	b	13ac4 <__assert_fail@plt+0x260c>
   13ab8:	ldrb	r1, [r3], #-1
   13abc:	cmp	r1, #47	; 0x2f
   13ac0:	bne	13ad0 <__assert_fail@plt+0x2618>
   13ac4:	cmp	r3, ip
   13ac8:	add	r0, r2, r3
   13acc:	bne	13ab8 <__assert_fail@plt+0x2600>
   13ad0:	ldrd	r4, [sp]
   13ad4:	ldr	r6, [sp, #8]
   13ad8:	add	sp, sp, #12
   13adc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae0:	strd	r4, [sp, #-16]!
   13ae4:	str	r6, [sp, #8]
   13ae8:	mov	r6, r0
   13aec:	str	lr, [sp, #12]
   13af0:	bl	13a60 <__assert_fail@plt+0x25a8>
   13af4:	add	r3, r0, #1
   13af8:	mov	r4, r0
   13afc:	cmp	r0, #0
   13b00:	movne	r0, r3
   13b04:	addeq	r0, r3, #1
   13b08:	bl	19054 <__assert_fail@plt+0x7b9c>
   13b0c:	subs	r5, r0, #0
   13b10:	beq	13b30 <__assert_fail@plt+0x2678>
   13b14:	mov	r1, r6
   13b18:	mov	r2, r4
   13b1c:	bl	11194 <memcpy@plt>
   13b20:	cmp	r4, #0
   13b24:	beq	13b44 <__assert_fail@plt+0x268c>
   13b28:	mov	r3, #0
   13b2c:	strb	r3, [r5, r4]
   13b30:	mov	r0, r5
   13b34:	ldrd	r4, [sp]
   13b38:	ldr	r6, [sp, #8]
   13b3c:	add	sp, sp, #12
   13b40:	pop	{pc}		; (ldr pc, [sp], #4)
   13b44:	mov	r3, #46	; 0x2e
   13b48:	mov	r4, #1
   13b4c:	strb	r3, [r5]
   13b50:	b	13b28 <__assert_fail@plt+0x2670>
   13b54:	push	{r1, r2, r3}
   13b58:	strd	r4, [sp, #-20]!	; 0xffffffec
   13b5c:	strd	r6, [sp, #8]
   13b60:	str	lr, [sp, #16]
   13b64:	sub	sp, sp, #8
   13b68:	ldr	r1, [sp, #28]
   13b6c:	add	r2, sp, #32
   13b70:	str	r2, [sp, #4]
   13b74:	cmp	r1, #0
   13b78:	beq	13c54 <__assert_fail@plt+0x279c>
   13b7c:	movw	r3, #1030	; 0x406
   13b80:	mov	r6, r0
   13b84:	cmp	r1, r3
   13b88:	beq	13c64 <__assert_fail@plt+0x27ac>
   13b8c:	cmp	r1, #11
   13b90:	beq	13c0c <__assert_fail@plt+0x2754>
   13b94:	ble	13bec <__assert_fail@plt+0x2734>
   13b98:	movw	r2, #1031	; 0x407
   13b9c:	cmp	r1, r2
   13ba0:	bgt	13c28 <__assert_fail@plt+0x2770>
   13ba4:	cmp	r1, r3
   13ba8:	bge	13bb8 <__assert_fail@plt+0x2700>
   13bac:	movw	r3, #1025	; 0x401
   13bb0:	cmp	r1, r3
   13bb4:	beq	13c0c <__assert_fail@plt+0x2754>
   13bb8:	ldr	r3, [sp, #4]
   13bbc:	mov	r0, r6
   13bc0:	ldr	r2, [r3]
   13bc4:	bl	113c8 <fcntl64@plt>
   13bc8:	mov	r4, r0
   13bcc:	mov	r0, r4
   13bd0:	add	sp, sp, #8
   13bd4:	ldrd	r4, [sp]
   13bd8:	ldrd	r6, [sp, #8]
   13bdc:	ldr	lr, [sp, #16]
   13be0:	add	sp, sp, #20
   13be4:	add	sp, sp, #12
   13be8:	bx	lr
   13bec:	cmp	r1, #4
   13bf0:	beq	13bb8 <__assert_fail@plt+0x2700>
   13bf4:	bgt	13c1c <__assert_fail@plt+0x2764>
   13bf8:	cmp	r1, #2
   13bfc:	beq	13bb8 <__assert_fail@plt+0x2700>
   13c00:	bgt	13c0c <__assert_fail@plt+0x2754>
   13c04:	cmp	r1, #1
   13c08:	bne	13bb8 <__assert_fail@plt+0x2700>
   13c0c:	mov	r0, r6
   13c10:	bl	113c8 <fcntl64@plt>
   13c14:	mov	r4, r0
   13c18:	b	13bcc <__assert_fail@plt+0x2714>
   13c1c:	cmp	r1, #9
   13c20:	bne	13bb8 <__assert_fail@plt+0x2700>
   13c24:	b	13c0c <__assert_fail@plt+0x2754>
   13c28:	movw	r3, #1033	; 0x409
   13c2c:	cmp	r1, r3
   13c30:	beq	13bb8 <__assert_fail@plt+0x2700>
   13c34:	blt	13c0c <__assert_fail@plt+0x2754>
   13c38:	movw	r3, #1034	; 0x40a
   13c3c:	cmp	r1, r3
   13c40:	bne	13bb8 <__assert_fail@plt+0x2700>
   13c44:	mov	r0, r6
   13c48:	bl	113c8 <fcntl64@plt>
   13c4c:	mov	r4, r0
   13c50:	b	13bcc <__assert_fail@plt+0x2714>
   13c54:	ldr	r2, [sp, #32]
   13c58:	bl	113c8 <fcntl64@plt>
   13c5c:	mov	r4, r0
   13c60:	b	13bcc <__assert_fail@plt+0x2714>
   13c64:	movw	r5, #49612	; 0xc1cc
   13c68:	movt	r5, #2
   13c6c:	ldr	r7, [r2]
   13c70:	add	r2, sp, #36	; 0x24
   13c74:	ldr	r3, [r5]
   13c78:	str	r2, [sp, #4]
   13c7c:	mov	r2, r7
   13c80:	cmp	r3, #0
   13c84:	blt	13ca0 <__assert_fail@plt+0x27e8>
   13c88:	bl	113c8 <fcntl64@plt>
   13c8c:	subs	r4, r0, #0
   13c90:	blt	13d08 <__assert_fail@plt+0x2850>
   13c94:	mov	r3, #1
   13c98:	str	r3, [r5]
   13c9c:	b	13bcc <__assert_fail@plt+0x2714>
   13ca0:	mov	r1, #0
   13ca4:	bl	113c8 <fcntl64@plt>
   13ca8:	subs	r4, r0, #0
   13cac:	blt	13bcc <__assert_fail@plt+0x2714>
   13cb0:	ldr	r3, [r5]
   13cb4:	cmn	r3, #1
   13cb8:	bne	13bcc <__assert_fail@plt+0x2714>
   13cbc:	mov	r1, #1
   13cc0:	mov	r0, r4
   13cc4:	bl	113c8 <fcntl64@plt>
   13cc8:	subs	r2, r0, #0
   13ccc:	blt	13ce8 <__assert_fail@plt+0x2830>
   13cd0:	orr	r2, r2, #1
   13cd4:	mov	r1, #2
   13cd8:	mov	r0, r4
   13cdc:	bl	113c8 <fcntl64@plt>
   13ce0:	cmn	r0, #1
   13ce4:	bne	13bcc <__assert_fail@plt+0x2714>
   13ce8:	bl	11338 <__errno_location@plt>
   13cec:	mov	r5, r0
   13cf0:	mov	r0, r4
   13cf4:	ldr	r6, [r5]
   13cf8:	mvn	r4, #0
   13cfc:	bl	114ac <close@plt>
   13d00:	str	r6, [r5]
   13d04:	b	13bcc <__assert_fail@plt+0x2714>
   13d08:	bl	11338 <__errno_location@plt>
   13d0c:	ldr	r3, [r0]
   13d10:	cmp	r3, #22
   13d14:	bne	13c94 <__assert_fail@plt+0x27dc>
   13d18:	mov	r2, r7
   13d1c:	mov	r0, r6
   13d20:	mov	r1, #0
   13d24:	bl	113c8 <fcntl64@plt>
   13d28:	subs	r4, r0, #0
   13d2c:	mvnge	r3, #0
   13d30:	strge	r3, [r5]
   13d34:	bge	13cbc <__assert_fail@plt+0x2804>
   13d38:	b	13bcc <__assert_fail@plt+0x2714>
   13d3c:	push	{r1, r2, r3}
   13d40:	push	{lr}		; (str lr, [sp, #-4]!)
   13d44:	sub	sp, sp, #8
   13d48:	ldr	r1, [sp, #12]
   13d4c:	ands	r2, r1, #64	; 0x40
   13d50:	bne	13d6c <__assert_fail@plt+0x28b4>
   13d54:	bl	112a8 <open64@plt>
   13d58:	bl	17a1c <__assert_fail@plt+0x6564>
   13d5c:	add	sp, sp, #8
   13d60:	pop	{lr}		; (ldr lr, [sp], #4)
   13d64:	add	sp, sp, #12
   13d68:	bx	lr
   13d6c:	add	r3, sp, #16
   13d70:	ldr	r2, [sp, #16]
   13d74:	str	r3, [sp, #4]
   13d78:	b	13d54 <__assert_fail@plt+0x289c>
   13d7c:	strd	r4, [sp, #-12]!
   13d80:	mov	r5, r0
   13d84:	str	lr, [sp, #8]
   13d88:	sub	sp, sp, #12
   13d8c:	bl	11338 <__errno_location@plt>
   13d90:	mov	r4, r0
   13d94:	mov	r2, #0
   13d98:	ldr	r3, [r4]
   13d9c:	mov	r0, r5
   13da0:	str	r2, [r4]
   13da4:	str	r3, [sp]
   13da8:	str	r3, [sp, #4]
   13dac:	bl	1117c <free@plt>
   13db0:	ldr	r3, [r4]
   13db4:	add	r2, sp, #8
   13db8:	clz	r3, r3
   13dbc:	lsr	r3, r3, #5
   13dc0:	add	r3, r2, r3, lsl #2
   13dc4:	ldr	r3, [r3, #-8]
   13dc8:	str	r3, [r4]
   13dcc:	add	sp, sp, #12
   13dd0:	ldrd	r4, [sp]
   13dd4:	add	sp, sp, #8
   13dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ddc:	andeq	r0, r0, r0
   13de0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13de4:	strd	r6, [sp, #8]
   13de8:	mov	r7, r1
   13dec:	mov	r6, r0
   13df0:	strd	r8, [sp, #16]
   13df4:	mov	r9, r3
   13df8:	ands	r3, r3, #32
   13dfc:	strd	sl, [sp, #24]
   13e00:	str	lr, [sp, #32]
   13e04:	vpush	{d8-d9}
   13e08:	sub	sp, sp, #124	; 0x7c
   13e0c:	str	r2, [sp, #20]
   13e10:	str	r3, [sp, #48]	; 0x30
   13e14:	movne	r3, #1024	; 0x400
   13e18:	moveq	r3, #1000	; 0x3e8
   13e1c:	strd	r6, [sp, #32]
   13e20:	str	r3, [sp, #44]	; 0x2c
   13e24:	add	r3, r2, #644	; 0x284
   13e28:	mov	r5, r3
   13e2c:	bl	11410 <localeconv@plt>
   13e30:	ldr	fp, [r0]
   13e34:	add	r3, r5, #3
   13e38:	mov	r4, r0
   13e3c:	str	r3, [sp, #16]
   13e40:	and	r3, r9, #3
   13e44:	str	r3, [sp, #40]	; 0x28
   13e48:	mov	r0, fp
   13e4c:	bl	11314 <strlen@plt>
   13e50:	sub	r2, r0, #1
   13e54:	ldr	sl, [r4, #4]
   13e58:	movw	r3, #43960	; 0xabb8
   13e5c:	movt	r3, #1
   13e60:	cmp	r2, #16
   13e64:	ldr	r2, [r4, #8]
   13e68:	movcs	fp, r3
   13e6c:	str	r2, [sp, #52]	; 0x34
   13e70:	mov	r2, r0
   13e74:	movcc	r2, r0
   13e78:	movcs	r2, #1
   13e7c:	mov	r0, sl
   13e80:	str	r2, [sp, #12]
   13e84:	bl	11314 <strlen@plt>
   13e88:	cmp	r0, #16
   13e8c:	movw	r3, #42628	; 0xa684
   13e90:	movt	r3, #1
   13e94:	ldrd	r4, [sp, #176]	; 0xb0
   13e98:	movhi	sl, r3
   13e9c:	ldrd	r2, [sp, #184]	; 0xb8
   13ea0:	cmp	r3, r5
   13ea4:	cmpeq	r2, r4
   13ea8:	bhi	14160 <__assert_fail@plt+0x2ca8>
   13eac:	mov	r0, r4
   13eb0:	mov	r1, r5
   13eb4:	bl	19ab0 <__assert_fail@plt+0x85f8>
   13eb8:	orrs	r3, r2, r3
   13ebc:	bne	13efc <__assert_fail@plt+0x2a44>
   13ec0:	mul	ip, r0, r7
   13ec4:	mov	r4, r6
   13ec8:	mov	r5, r7
   13ecc:	mov	r3, r1
   13ed0:	umull	r6, r7, r0, r6
   13ed4:	mov	r2, r0
   13ed8:	mla	r1, r4, r1, ip
   13edc:	strd	r6, [sp, #24]
   13ee0:	add	r1, r1, r7
   13ee4:	str	r1, [sp, #28]
   13ee8:	ldrd	r0, [sp, #24]
   13eec:	bl	19ab0 <__assert_fail@plt+0x85f8>
   13ef0:	cmp	r1, r5
   13ef4:	cmpeq	r0, r4
   13ef8:	beq	144ac <__assert_fail@plt+0x2ff4>
   13efc:	ldrd	r0, [sp, #176]	; 0xb0
   13f00:	bl	19968 <__assert_fail@plt+0x84b0>
   13f04:	vmov	d9, r0, r1
   13f08:	ldrd	r0, [sp, #184]	; 0xb8
   13f0c:	bl	19968 <__assert_fail@plt+0x84b0>
   13f10:	vmov	d7, r0, r1
   13f14:	ldrd	r0, [sp, #32]
   13f18:	vdiv.f64	d8, d9, d7
   13f1c:	bl	19968 <__assert_fail@plt+0x84b0>
   13f20:	vmov	d7, r0, r1
   13f24:	tst	r9, #16
   13f28:	vmul.f64	d8, d8, d7
   13f2c:	beq	140a4 <__assert_fail@plt+0x2bec>
   13f30:	ldr	r6, [sp, #12]
   13f34:	mov	r7, #0
   13f38:	vldr	s15, [sp, #44]	; 0x2c
   13f3c:	vcvt.f64.s32	d6, s15
   13f40:	vmov.f64	d7, d6
   13f44:	vmov.f64	d5, d7
   13f48:	vmul.f64	d7, d7, d6
   13f4c:	add	r7, r7, #1
   13f50:	vcmpe.f64	d7, d8
   13f54:	vmrs	APSR_nzcv, fpscr
   13f58:	bhi	13f64 <__assert_fail@plt+0x2aac>
   13f5c:	cmp	r7, #8
   13f60:	bne	13f44 <__assert_fail@plt+0x2a8c>
   13f64:	ldr	fp, [sp, #40]	; 0x28
   13f68:	add	r8, r6, #1
   13f6c:	vdiv.f64	d9, d8, d5
   13f70:	str	r6, [sp, #12]
   13f74:	ldr	r3, [sp, #48]	; 0x30
   13f78:	cmp	fp, #1
   13f7c:	clz	r4, r3
   13f80:	lsr	r4, r4, #5
   13f84:	add	r4, r4, #1
   13f88:	add	r4, r4, r8
   13f8c:	beq	1457c <__assert_fail@plt+0x30c4>
   13f90:	vldr	d7, [pc, #1000]	; 14380 <__assert_fail@plt+0x2ec8>
   13f94:	vcmpe.f64	d9, d7
   13f98:	vmrs	APSR_nzcv, fpscr
   13f9c:	vmovpl.f64	d7, d9
   13fa0:	bpl	13fe0 <__assert_fail@plt+0x2b28>
   13fa4:	vmov	r0, r1, d9
   13fa8:	bl	19b00 <__assert_fail@plt+0x8648>
   13fac:	mov	r5, r0
   13fb0:	mov	r6, r1
   13fb4:	bl	19968 <__assert_fail@plt+0x84b0>
   13fb8:	cmp	fp, #0
   13fbc:	vmov	d7, r0, r1
   13fc0:	bne	13fe0 <__assert_fail@plt+0x2b28>
   13fc4:	vcmp.f64	d9, d7
   13fc8:	vmrs	APSR_nzcv, fpscr
   13fcc:	beq	13fe0 <__assert_fail@plt+0x2b28>
   13fd0:	adds	r0, r5, #1
   13fd4:	adc	r1, r6, #0
   13fd8:	bl	19968 <__assert_fail@plt+0x84b0>
   13fdc:	vmov	d7, r0, r1
   13fe0:	ldr	r5, [sp, #20]
   13fe4:	mvn	r2, #0
   13fe8:	mov	r1, #1
   13fec:	movw	r3, #43972	; 0xabc4
   13ff0:	movt	r3, #1
   13ff4:	vstr	d7, [sp]
   13ff8:	mov	r0, r5
   13ffc:	bl	11344 <__sprintf_chk@plt>
   14000:	mov	r0, r5
   14004:	bl	11314 <strlen@plt>
   14008:	cmp	r0, r4
   1400c:	bls	14444 <__assert_fail@plt+0x2f8c>
   14010:	vldr	d7, [pc, #880]	; 14388 <__assert_fail@plt+0x2ed0>
   14014:	vmul.f64	d9, d9, d7
   14018:	vldr	d7, [pc, #864]	; 14380 <__assert_fail@plt+0x2ec8>
   1401c:	vcmpe.f64	d9, d7
   14020:	vmrs	APSR_nzcv, fpscr
   14024:	bpl	1406c <__assert_fail@plt+0x2bb4>
   14028:	vmov	r0, r1, d9
   1402c:	bl	19b00 <__assert_fail@plt+0x8648>
   14030:	mov	r4, r0
   14034:	mov	r5, r1
   14038:	bl	19968 <__assert_fail@plt+0x84b0>
   1403c:	ldr	r3, [sp, #40]	; 0x28
   14040:	vmov	d7, r0, r1
   14044:	cmp	r3, #0
   14048:	bne	14068 <__assert_fail@plt+0x2bb0>
   1404c:	vcmp.f64	d9, d7
   14050:	vmrs	APSR_nzcv, fpscr
   14054:	beq	14068 <__assert_fail@plt+0x2bb0>
   14058:	adds	r0, r4, #1
   1405c:	adc	r1, r5, #0
   14060:	bl	19968 <__assert_fail@plt+0x84b0>
   14064:	vmov	d7, r0, r1
   14068:	vmov.f64	d9, d7
   1406c:	vldr	d6, [pc, #788]	; 14388 <__assert_fail@plt+0x2ed0>
   14070:	mvn	r2, #0
   14074:	mov	r1, #1
   14078:	movw	r3, #43964	; 0xabbc
   1407c:	movt	r3, #1
   14080:	ldr	r4, [sp, #20]
   14084:	vdiv.f64	d7, d9, d6
   14088:	mov	r0, r4
   1408c:	vstr	d7, [sp]
   14090:	bl	11344 <__sprintf_chk@plt>
   14094:	mov	r0, r4
   14098:	bl	11314 <strlen@plt>
   1409c:	mov	r8, r0
   140a0:	b	140f0 <__assert_fail@plt+0x2c38>
   140a4:	and	r6, r9, #3
   140a8:	cmp	r6, #1
   140ac:	beq	140c0 <__assert_fail@plt+0x2c08>
   140b0:	vldr	d7, [pc, #712]	; 14380 <__assert_fail@plt+0x2ec8>
   140b4:	vcmpe.f64	d8, d7
   140b8:	vmrs	APSR_nzcv, fpscr
   140bc:	bmi	14468 <__assert_fail@plt+0x2fb0>
   140c0:	ldr	r4, [sp, #20]
   140c4:	mvn	r2, #0
   140c8:	mov	r1, #1
   140cc:	movw	r3, #43964	; 0xabbc
   140d0:	movt	r3, #1
   140d4:	vstr	d8, [sp]
   140d8:	mov	r7, r2
   140dc:	mov	r0, r4
   140e0:	bl	11344 <__sprintf_chk@plt>
   140e4:	mov	r0, r4
   140e8:	bl	11314 <strlen@plt>
   140ec:	mov	r8, r0
   140f0:	ldr	r3, [sp, #16]
   140f4:	mov	r2, r0
   140f8:	ldr	r1, [sp, #20]
   140fc:	sub	r6, r3, r0
   14100:	mov	r0, r6
   14104:	add	r8, r6, r8
   14108:	bl	11170 <memmove@plt>
   1410c:	tst	r9, #4
   14110:	bne	142d4 <__assert_fail@plt+0x2e1c>
   14114:	tst	r9, #128	; 0x80
   14118:	beq	14130 <__assert_fail@plt+0x2c78>
   1411c:	cmn	r7, #1
   14120:	beq	14390 <__assert_fail@plt+0x2ed8>
   14124:	and	r3, r9, #256	; 0x100
   14128:	orrs	r2, r3, r7
   1412c:	bne	14604 <__assert_fail@plt+0x314c>
   14130:	ldr	r2, [sp, #16]
   14134:	mov	r3, #0
   14138:	mov	r0, r6
   1413c:	strb	r3, [r2]
   14140:	add	sp, sp, #124	; 0x7c
   14144:	vpop	{d8-d9}
   14148:	ldrd	r4, [sp]
   1414c:	ldrd	r6, [sp, #8]
   14150:	ldrd	r8, [sp, #16]
   14154:	ldrd	sl, [sp, #24]
   14158:	add	sp, sp, #32
   1415c:	pop	{pc}		; (ldr pc, [sp], #4)
   14160:	ldrd	r2, [sp, #176]	; 0xb0
   14164:	orrs	r3, r2, r3
   14168:	beq	13efc <__assert_fail@plt+0x2a44>
   1416c:	ldrd	r2, [sp, #176]	; 0xb0
   14170:	ldrd	r0, [sp, #184]	; 0xb8
   14174:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14178:	orrs	r3, r2, r3
   1417c:	mov	r4, r0
   14180:	mov	r5, r1
   14184:	bne	13efc <__assert_fail@plt+0x2a44>
   14188:	mov	r2, r4
   1418c:	mov	r3, r5
   14190:	ldrd	r0, [sp, #32]
   14194:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14198:	mov	lr, r2
   1419c:	mov	r8, r1
   141a0:	lsl	r1, r3, #2
   141a4:	mov	r7, r0
   141a8:	lsl	r0, lr, #2
   141ac:	mov	ip, r3
   141b0:	orr	r1, r1, lr, lsr #30
   141b4:	mov	r2, r4
   141b8:	mov	r3, r5
   141bc:	adds	r0, r0, lr
   141c0:	adc	r1, r1, ip
   141c4:	adds	r0, r0, r0
   141c8:	adc	r1, r1, r1
   141cc:	bl	19ab0 <__assert_fail@plt+0x85f8>
   141d0:	adds	r1, r2, r2
   141d4:	mov	r2, r4
   141d8:	str	r7, [sp, #24]
   141dc:	adc	r3, r3, r3
   141e0:	mov	lr, r0
   141e4:	str	r8, [sp, #28]
   141e8:	str	r1, [sp, #56]	; 0x38
   141ec:	str	r3, [sp, #60]	; 0x3c
   141f0:	mov	r3, r5
   141f4:	ldrd	r4, [sp, #56]	; 0x38
   141f8:	cmp	r3, r5
   141fc:	cmpeq	r2, r4
   14200:	bls	145ec <__assert_fail@plt+0x3134>
   14204:	mov	r3, r4
   14208:	orrs	r3, r3, r5
   1420c:	movne	r3, #1
   14210:	moveq	r3, #0
   14214:	mov	r6, r3
   14218:	ands	r3, r9, #16
   1421c:	str	r3, [sp, #56]	; 0x38
   14220:	beq	144c4 <__assert_fail@plt+0x300c>
   14224:	ldrd	r4, [sp, #24]
   14228:	mov	r3, #0
   1422c:	mov	r7, #0
   14230:	ldr	r8, [sp, #44]	; 0x2c
   14234:	cmp	r3, r5
   14238:	mov	r2, r8
   1423c:	cmpeq	r8, r4
   14240:	strd	r2, [sp, #32]
   14244:	bhi	144c8 <__assert_fail@plt+0x3010>
   14248:	str	fp, [sp, #64]	; 0x40
   1424c:	mov	fp, r6
   14250:	mov	r6, lr
   14254:	str	r9, [sp, #68]	; 0x44
   14258:	ldr	r9, [sp, #12]
   1425c:	b	14284 <__assert_fail@plt+0x2dcc>
   14260:	adds	fp, fp, #0
   14264:	movne	fp, #1
   14268:	ldrd	r2, [sp, #32]
   1426c:	add	r7, r7, #1
   14270:	cmp	r3, r1
   14274:	cmpeq	r2, r0
   14278:	bhi	14688 <__assert_fail@plt+0x31d0>
   1427c:	cmp	r7, #8
   14280:	beq	14650 <__assert_fail@plt+0x3198>
   14284:	mov	r0, r4
   14288:	mov	r1, r5
   1428c:	ldrd	r2, [sp, #32]
   14290:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14294:	add	r2, r2, r2, lsl #2
   14298:	mov	r4, r0
   1429c:	mov	r5, r1
   142a0:	asr	r3, fp, #1
   142a4:	add	r6, r6, r2, lsl #1
   142a8:	udiv	ip, r6, r8
   142ac:	mls	r2, r8, ip, r6
   142b0:	mov	r6, ip
   142b4:	add	r3, r3, r2, lsl #1
   142b8:	cmp	r8, r3
   142bc:	add	fp, fp, r3
   142c0:	bhi	14260 <__assert_fail@plt+0x2da8>
   142c4:	cmp	r8, fp
   142c8:	movcc	fp, #3
   142cc:	movcs	fp, #2
   142d0:	b	14268 <__assert_fail@plt+0x2db0>
   142d4:	mov	r0, sl
   142d8:	sub	r4, r8, r6
   142dc:	bl	11314 <strlen@plt>
   142e0:	mov	fp, r0
   142e4:	mov	r1, r6
   142e8:	mov	r2, r4
   142ec:	add	r0, sp, #76	; 0x4c
   142f0:	mov	r3, #41	; 0x29
   142f4:	mvn	r5, #0
   142f8:	bl	1123c <__memcpy_chk@plt>
   142fc:	ldr	r6, [sp, #52]	; 0x34
   14300:	str	r7, [sp, #12]
   14304:	ldrb	r3, [r6]
   14308:	cmp	r3, #0
   1430c:	beq	14320 <__assert_fail@plt+0x2e68>
   14310:	cmp	r3, #255	; 0xff
   14314:	add	r6, r6, #1
   14318:	movne	r5, r3
   1431c:	moveq	r5, r4
   14320:	sub	r7, r8, r5
   14324:	cmp	r5, r4
   14328:	mov	r2, r5
   1432c:	mov	r0, r7
   14330:	bls	14350 <__assert_fail@plt+0x2e98>
   14334:	sub	r6, r8, r4
   14338:	mov	r2, r4
   1433c:	ldr	r7, [sp, #12]
   14340:	add	r1, sp, #76	; 0x4c
   14344:	mov	r0, r6
   14348:	bl	11194 <memcpy@plt>
   1434c:	b	14114 <__assert_fail@plt+0x2c5c>
   14350:	sub	r4, r4, r5
   14354:	add	r3, sp, #76	; 0x4c
   14358:	add	r1, r3, r4
   1435c:	sub	r8, r7, fp
   14360:	bl	11194 <memcpy@plt>
   14364:	cmp	r4, #0
   14368:	mov	r2, fp
   1436c:	mov	r1, sl
   14370:	mov	r0, r8
   14374:	beq	147f4 <__assert_fail@plt+0x333c>
   14378:	bl	11194 <memcpy@plt>
   1437c:	b	14304 <__assert_fail@plt+0x2e4c>
   14380:	andeq	r0, r0, r0
   14384:	mvnsmi	r0, #0
   14388:	andeq	r0, r0, r0
   1438c:	eormi	r0, r4, r0
   14390:	ldrd	r2, [sp, #184]	; 0xb8
   14394:	cmp	r3, #0
   14398:	cmpeq	r2, #1
   1439c:	bls	14648 <__assert_fail@plt+0x3190>
   143a0:	ldr	r1, [sp, #44]	; 0x2c
   143a4:	mov	r7, #1
   143a8:	mov	r2, #1
   143ac:	mov	r3, #0
   143b0:	ldrd	r4, [sp, #184]	; 0xb8
   143b4:	mul	r0, r1, r3
   143b8:	umull	r2, r3, r2, r1
   143bc:	add	r3, r0, r3
   143c0:	cmp	r5, r3
   143c4:	cmpeq	r4, r2
   143c8:	bls	143d8 <__assert_fail@plt+0x2f20>
   143cc:	add	r7, r7, #1
   143d0:	cmp	r7, #8
   143d4:	bne	143b4 <__assert_fail@plt+0x2efc>
   143d8:	tst	r9, #64	; 0x40
   143dc:	and	r3, r9, #256	; 0x100
   143e0:	beq	14400 <__assert_fail@plt+0x2f48>
   143e4:	ldr	r1, [sp, #20]
   143e8:	mov	r2, #32
   143ec:	add	r0, r1, #648	; 0x288
   143f0:	strb	r2, [r1, #647]	; 0x287
   143f4:	str	r0, [sp, #16]
   143f8:	cmp	r7, #0
   143fc:	beq	147e4 <__assert_fail@plt+0x332c>
   14400:	ldr	r0, [sp, #48]	; 0x30
   14404:	cmp	r0, #0
   14408:	cmpeq	r7, #1
   1440c:	beq	1466c <__assert_fail@plt+0x31b4>
   14410:	movw	r2, #43928	; 0xab98
   14414:	movt	r2, #1
   14418:	ldrb	r1, [r2, r7]
   1441c:	cmp	r3, #0
   14420:	ldr	r2, [sp, #16]
   14424:	strb	r1, [r2], #1
   14428:	beq	14680 <__assert_fail@plt+0x31c8>
   1442c:	cmp	r0, #0
   14430:	bne	14610 <__assert_fail@plt+0x3158>
   14434:	mov	r3, #66	; 0x42
   14438:	strb	r3, [r2], #1
   1443c:	str	r2, [sp, #16]
   14440:	b	14130 <__assert_fail@plt+0x2c78>
   14444:	tst	r9, #8
   14448:	beq	14460 <__assert_fail@plt+0x2fa8>
   1444c:	ldr	r3, [sp, #20]
   14450:	add	r3, r3, r0
   14454:	ldrb	r3, [r3, #-1]
   14458:	cmp	r3, #48	; 0x30
   1445c:	beq	14734 <__assert_fail@plt+0x327c>
   14460:	sub	r8, r0, r8
   14464:	b	140f0 <__assert_fail@plt+0x2c38>
   14468:	vmov	r0, r1, d8
   1446c:	bl	19b00 <__assert_fail@plt+0x8648>
   14470:	mov	r4, r0
   14474:	mov	r5, r1
   14478:	bl	19968 <__assert_fail@plt+0x84b0>
   1447c:	cmp	r6, #0
   14480:	vmov	d7, r0, r1
   14484:	bne	144a4 <__assert_fail@plt+0x2fec>
   14488:	vcmp.f64	d8, d7
   1448c:	vmrs	APSR_nzcv, fpscr
   14490:	beq	144a4 <__assert_fail@plt+0x2fec>
   14494:	adds	r0, r4, #1
   14498:	adc	r1, r5, #0
   1449c:	bl	19968 <__assert_fail@plt+0x84b0>
   144a0:	vmov	d7, r0, r1
   144a4:	vmov.f64	d8, d7
   144a8:	b	140c0 <__assert_fail@plt+0x2c08>
   144ac:	mov	r3, #0
   144b0:	mov	r6, r3
   144b4:	mov	lr, r3
   144b8:	ands	r3, r9, #16
   144bc:	str	r3, [sp, #56]	; 0x38
   144c0:	bne	14224 <__assert_fail@plt+0x2d6c>
   144c4:	mvn	r7, #0
   144c8:	ldr	r3, [sp, #40]	; 0x28
   144cc:	cmp	r3, #1
   144d0:	beq	145b8 <__assert_fail@plt+0x3100>
   144d4:	ldr	r8, [sp, #16]
   144d8:	ldr	r3, [sp, #40]	; 0x28
   144dc:	cmp	r3, #0
   144e0:	bne	1452c <__assert_fail@plt+0x3074>
   144e4:	add	r3, r6, lr
   144e8:	cmp	r3, #0
   144ec:	ble	1452c <__assert_fail@plt+0x3074>
   144f0:	ldr	r3, [sp, #24]
   144f4:	adds	r3, r3, #1
   144f8:	str	r3, [sp, #24]
   144fc:	ldr	r3, [sp, #28]
   14500:	adc	r3, r3, #0
   14504:	str	r3, [sp, #28]
   14508:	ldr	r3, [sp, #56]	; 0x38
   1450c:	cmp	r3, #0
   14510:	beq	1452c <__assert_fail@plt+0x3074>
   14514:	ldrd	r0, [sp, #24]
   14518:	mov	r3, #0
   1451c:	ldr	r2, [sp, #44]	; 0x2c
   14520:	cmp	r3, r1
   14524:	cmpeq	r2, r0
   14528:	beq	14624 <__assert_fail@plt+0x316c>
   1452c:	ldrd	r4, [sp, #24]
   14530:	mov	r6, r8
   14534:	mov	r0, r4
   14538:	mov	r1, r5
   1453c:	mov	r2, #10
   14540:	mov	r3, #0
   14544:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14548:	add	r2, r2, #48	; 0x30
   1454c:	mov	r0, r4
   14550:	mov	r1, r5
   14554:	mov	r3, #0
   14558:	strb	r2, [r6, #-1]!
   1455c:	mov	r2, #10
   14560:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14564:	cmp	r5, #0
   14568:	mov	r5, r1
   1456c:	cmpeq	r4, #9
   14570:	mov	r4, r0
   14574:	bhi	14534 <__assert_fail@plt+0x307c>
   14578:	b	1410c <__assert_fail@plt+0x2c54>
   1457c:	ldr	r5, [sp, #20]
   14580:	mvn	r2, #0
   14584:	movw	r3, #43972	; 0xabc4
   14588:	movt	r3, #1
   1458c:	vstr	d9, [sp]
   14590:	ldr	r1, [sp, #40]	; 0x28
   14594:	mov	r0, r5
   14598:	bl	11344 <__sprintf_chk@plt>
   1459c:	mov	r0, r5
   145a0:	bl	11314 <strlen@plt>
   145a4:	cmp	r0, r4
   145a8:	bls	14444 <__assert_fail@plt+0x2f8c>
   145ac:	vldr	d7, [pc, #-556]	; 14388 <__assert_fail@plt+0x2ed0>
   145b0:	vmul.f64	d9, d9, d7
   145b4:	b	1406c <__assert_fail@plt+0x2bb4>
   145b8:	mov	r5, #0
   145bc:	ldr	r8, [sp, #16]
   145c0:	ldr	r3, [sp, #24]
   145c4:	and	r4, r3, #1
   145c8:	adds	r2, r4, r6
   145cc:	adc	r3, r5, r6, asr #31
   145d0:	orr	r2, r2, r3
   145d4:	mov	r3, lr
   145d8:	cmp	r2, r5
   145dc:	addne	r3, r3, #1
   145e0:	cmp	r3, #5
   145e4:	bgt	144f0 <__assert_fail@plt+0x3038>
   145e8:	b	1452c <__assert_fail@plt+0x3074>
   145ec:	movcs	r3, #2
   145f0:	movcs	r6, r3
   145f4:	bcs	14218 <__assert_fail@plt+0x2d60>
   145f8:	mov	r3, #3
   145fc:	mov	r6, r3
   14600:	b	14218 <__assert_fail@plt+0x2d60>
   14604:	tst	r9, #64	; 0x40
   14608:	beq	143f8 <__assert_fail@plt+0x2f40>
   1460c:	b	143e4 <__assert_fail@plt+0x2f2c>
   14610:	ldr	r1, [sp, #16]
   14614:	mov	r3, #105	; 0x69
   14618:	add	r2, r1, #2
   1461c:	strb	r3, [r1, #1]
   14620:	b	14434 <__assert_fail@plt+0x2f7c>
   14624:	cmp	r7, #8
   14628:	beq	1452c <__assert_fail@plt+0x3074>
   1462c:	tst	r9, #8
   14630:	add	r7, r7, #1
   14634:	beq	147ac <__assert_fail@plt+0x32f4>
   14638:	mov	r3, #49	; 0x31
   1463c:	sub	r6, r8, #1
   14640:	strb	r3, [r8, #-1]
   14644:	b	1410c <__assert_fail@plt+0x2c54>
   14648:	mov	r7, #0
   1464c:	b	14124 <__assert_fail@plt+0x2c6c>
   14650:	mov	lr, r6
   14654:	mov	r6, fp
   14658:	str	r9, [sp, #12]
   1465c:	strd	r4, [sp, #24]
   14660:	ldr	fp, [sp, #64]	; 0x40
   14664:	ldr	r9, [sp, #68]	; 0x44
   14668:	b	144c8 <__assert_fail@plt+0x3010>
   1466c:	ldr	r2, [sp, #16]
   14670:	mov	r1, #107	; 0x6b
   14674:	cmp	r3, #0
   14678:	strb	r1, [r2], #1
   1467c:	bne	14434 <__assert_fail@plt+0x2f7c>
   14680:	str	r2, [sp, #16]
   14684:	b	14130 <__assert_fail@plt+0x2c78>
   14688:	cmp	r1, #0
   1468c:	mov	lr, r6
   14690:	str	r9, [sp, #12]
   14694:	cmpeq	r0, #9
   14698:	mov	r6, fp
   1469c:	strd	r4, [sp, #24]
   146a0:	ldr	fp, [sp, #64]	; 0x40
   146a4:	ldr	r9, [sp, #68]	; 0x44
   146a8:	bhi	144c8 <__assert_fail@plt+0x3010>
   146ac:	ldr	r3, [sp, #40]	; 0x28
   146b0:	cmp	r3, #1
   146b4:	beq	14760 <__assert_fail@plt+0x32a8>
   146b8:	ldr	r2, [sp, #40]	; 0x28
   146bc:	adds	r3, r6, #0
   146c0:	movne	r3, #1
   146c4:	cmp	r2, #0
   146c8:	movne	r3, #0
   146cc:	cmp	r3, #0
   146d0:	bne	1474c <__assert_fail@plt+0x3294>
   146d4:	cmp	ip, #0
   146d8:	addne	r3, ip, #48	; 0x30
   146dc:	uxtbne	r3, r3
   146e0:	bne	146f0 <__assert_fail@plt+0x3238>
   146e4:	tst	r9, #8
   146e8:	bne	147a4 <__assert_fail@plt+0x32ec>
   146ec:	mov	r3, #48	; 0x30
   146f0:	ldr	r2, [sp, #12]
   146f4:	ldr	r1, [sp, #20]
   146f8:	add	r8, r1, #644	; 0x284
   146fc:	strb	r3, [r1, #646]	; 0x286
   14700:	mov	r3, #0
   14704:	add	r8, r8, #2
   14708:	mov	r1, fp
   1470c:	sub	r8, r8, r2
   14710:	mov	r6, r3
   14714:	mov	r0, r8
   14718:	bl	11194 <memcpy@plt>
   1471c:	ldr	r3, [sp, #40]	; 0x28
   14720:	cmp	r3, #1
   14724:	beq	1452c <__assert_fail@plt+0x3074>
   14728:	mov	r3, #0
   1472c:	mov	lr, r3
   14730:	b	144d8 <__assert_fail@plt+0x3020>
   14734:	vldr	d7, [pc, #-948]	; 14388 <__assert_fail@plt+0x2ed0>
   14738:	ldr	r3, [sp, #40]	; 0x28
   1473c:	vmul.f64	d9, d9, d7
   14740:	cmp	r3, #1
   14744:	bne	14018 <__assert_fail@plt+0x2b60>
   14748:	b	1406c <__assert_fail@plt+0x2bb4>
   1474c:	cmp	ip, #9
   14750:	beq	14778 <__assert_fail@plt+0x32c0>
   14754:	add	r3, ip, #49	; 0x31
   14758:	uxtb	r3, r3
   1475c:	b	146f0 <__assert_fail@plt+0x3238>
   14760:	and	r3, ip, #1
   14764:	add	r3, r3, r6
   14768:	cmp	r3, #2
   1476c:	movle	r3, #0
   14770:	movgt	r3, #1
   14774:	b	146cc <__assert_fail@plt+0x3214>
   14778:	adds	r3, r0, #1
   1477c:	str	r3, [sp, #24]
   14780:	adc	r3, r1, #0
   14784:	str	r3, [sp, #28]
   14788:	ldrd	r2, [sp, #24]
   1478c:	cmp	r3, #0
   14790:	cmpeq	r2, #10
   14794:	beq	147d4 <__assert_fail@plt+0x331c>
   14798:	mov	r3, #0
   1479c:	mov	r6, r3
   147a0:	b	146e4 <__assert_fail@plt+0x322c>
   147a4:	ldr	r8, [sp, #16]
   147a8:	b	1471c <__assert_fail@plt+0x3264>
   147ac:	ldr	r3, [sp, #12]
   147b0:	mov	r0, #48	; 0x30
   147b4:	mov	r1, fp
   147b8:	strb	r0, [r8, #-1]
   147bc:	ldr	r2, [sp, #12]
   147c0:	mvn	r3, r3
   147c4:	add	r8, r8, r3
   147c8:	mov	r0, r8
   147cc:	bl	11194 <memcpy@plt>
   147d0:	b	14638 <__assert_fail@plt+0x3180>
   147d4:	mov	r3, #0
   147d8:	ldr	r8, [sp, #16]
   147dc:	mov	r6, r3
   147e0:	b	1471c <__assert_fail@plt+0x3264>
   147e4:	cmp	r3, #0
   147e8:	ldrne	r2, [sp, #16]
   147ec:	bne	14434 <__assert_fail@plt+0x2f7c>
   147f0:	b	14130 <__assert_fail@plt+0x2c78>
   147f4:	mov	r6, r7
   147f8:	ldr	r7, [sp, #12]
   147fc:	b	14114 <__assert_fail@plt+0x2c5c>
   14800:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14804:	subs	r4, r0, #0
   14808:	strd	r6, [sp, #8]
   1480c:	mov	r7, r1
   14810:	mov	r6, r2
   14814:	str	r8, [sp, #16]
   14818:	strd	sl, [sp, #20]
   1481c:	str	lr, [sp, #28]
   14820:	sub	sp, sp, #16
   14824:	beq	14944 <__assert_fail@plt+0x348c>
   14828:	ldrb	r3, [r4]
   1482c:	movw	r5, #43928	; 0xab98
   14830:	movt	r5, #1
   14834:	add	r2, r5, #12
   14838:	add	r1, r5, #20
   1483c:	cmp	r3, #39	; 0x27
   14840:	mov	r3, #4
   14844:	addeq	r4, r4, #1
   14848:	moveq	r8, #4
   1484c:	mov	r0, r4
   14850:	movne	r8, #0
   14854:	bl	13410 <__assert_fail@plt+0x1f58>
   14858:	cmp	r0, #0
   1485c:	blt	1489c <__assert_fail@plt+0x33e4>
   14860:	add	r5, r5, r0, lsl #2
   14864:	mov	sl, #1
   14868:	mov	fp, #0
   1486c:	mov	r0, #0
   14870:	ldr	r3, [r5, #12]
   14874:	strd	sl, [r6]
   14878:	orr	r3, r8, r3
   1487c:	str	r3, [r7]
   14880:	add	sp, sp, #16
   14884:	ldrd	r4, [sp]
   14888:	ldrd	r6, [sp, #8]
   1488c:	ldr	r8, [sp, #16]
   14890:	ldrd	sl, [sp, #20]
   14894:	add	sp, sp, #28
   14898:	pop	{pc}		; (ldr pc, [sp], #4)
   1489c:	movw	r0, #44020	; 0xabf4
   148a0:	movt	r0, #1
   148a4:	mov	r3, r6
   148a8:	mov	r2, #0
   148ac:	add	r1, sp, #12
   148b0:	str	r0, [sp]
   148b4:	mov	r0, r4
   148b8:	bl	18638 <__assert_fail@plt+0x7180>
   148bc:	cmp	r0, #0
   148c0:	bne	14908 <__assert_fail@plt+0x3450>
   148c4:	ldrb	r3, [r4]
   148c8:	sub	r3, r3, #48	; 0x30
   148cc:	cmp	r3, #9
   148d0:	bls	148fc <__assert_fail@plt+0x3444>
   148d4:	ldr	r2, [sp, #12]
   148d8:	cmp	r4, r2
   148dc:	bne	148ec <__assert_fail@plt+0x3434>
   148e0:	b	14998 <__assert_fail@plt+0x34e0>
   148e4:	cmp	r2, r4
   148e8:	beq	14998 <__assert_fail@plt+0x34e0>
   148ec:	ldrb	r3, [r4, #1]!
   148f0:	sub	r3, r3, #48	; 0x30
   148f4:	cmp	r3, #9
   148f8:	bhi	148e4 <__assert_fail@plt+0x342c>
   148fc:	ldrd	r2, [r6]
   14900:	str	r8, [r7]
   14904:	b	14914 <__assert_fail@plt+0x345c>
   14908:	mov	r1, #0
   1490c:	ldrd	r2, [r6]
   14910:	str	r1, [r7]
   14914:	orrs	r3, r2, r3
   14918:	bne	14880 <__assert_fail@plt+0x33c8>
   1491c:	movw	r0, #44004	; 0xabe4
   14920:	movt	r0, #1
   14924:	bl	112b4 <getenv@plt>
   14928:	cmp	r0, #0
   1492c:	mov	r3, #0
   14930:	moveq	r2, #1024	; 0x400
   14934:	movne	r2, #512	; 0x200
   14938:	mov	r0, #4
   1493c:	strd	r2, [r6]
   14940:	b	14880 <__assert_fail@plt+0x33c8>
   14944:	movw	r0, #43980	; 0xabcc
   14948:	movt	r0, #1
   1494c:	bl	112b4 <getenv@plt>
   14950:	subs	r4, r0, #0
   14954:	bne	14828 <__assert_fail@plt+0x3370>
   14958:	movw	r0, #43992	; 0xabd8
   1495c:	movt	r0, #1
   14960:	bl	112b4 <getenv@plt>
   14964:	subs	r4, r0, #0
   14968:	bne	14828 <__assert_fail@plt+0x3370>
   1496c:	movw	r0, #44004	; 0xabe4
   14970:	movt	r0, #1
   14974:	bl	112b4 <getenv@plt>
   14978:	subs	r3, r0, #0
   1497c:	beq	149c4 <__assert_fail@plt+0x350c>
   14980:	mov	r2, #512	; 0x200
   14984:	mov	r3, #0
   14988:	mov	r0, r4
   1498c:	strd	r2, [r6]
   14990:	str	r4, [r7]
   14994:	b	14880 <__assert_fail@plt+0x33c8>
   14998:	ldrb	r3, [r2, #-1]
   1499c:	cmp	r3, #66	; 0x42
   149a0:	orrne	r8, r8, #128	; 0x80
   149a4:	beq	149b0 <__assert_fail@plt+0x34f8>
   149a8:	orr	r8, r8, #32
   149ac:	b	148fc <__assert_fail@plt+0x3444>
   149b0:	ldrb	r3, [r2, #-2]
   149b4:	orr	r8, r8, #384	; 0x180
   149b8:	cmp	r3, #105	; 0x69
   149bc:	bne	148fc <__assert_fail@plt+0x3444>
   149c0:	b	149a8 <__assert_fail@plt+0x34f0>
   149c4:	mov	r4, #1024	; 0x400
   149c8:	mov	r5, #0
   149cc:	mov	r0, r3
   149d0:	strd	r4, [r6]
   149d4:	str	r3, [r7]
   149d8:	b	14880 <__assert_fail@plt+0x33c8>
   149dc:	mov	r3, #0
   149e0:	strd	r4, [sp, #-16]!
   149e4:	mov	r4, r0
   149e8:	mov	r5, r1
   149ec:	str	r6, [sp, #8]
   149f0:	add	r6, r2, #20
   149f4:	str	lr, [sp, #12]
   149f8:	strb	r3, [r2, #20]
   149fc:	mov	r0, r4
   14a00:	mov	r1, r5
   14a04:	mov	r2, #10
   14a08:	mov	r3, #0
   14a0c:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14a10:	add	ip, r2, #48	; 0x30
   14a14:	mov	r0, r4
   14a18:	mov	r1, r5
   14a1c:	mov	r2, #10
   14a20:	mov	r3, #0
   14a24:	strb	ip, [r6, #-1]!
   14a28:	bl	19ab0 <__assert_fail@plt+0x85f8>
   14a2c:	cmp	r5, #0
   14a30:	mov	r5, r1
   14a34:	cmpeq	r4, #9
   14a38:	mov	r4, r0
   14a3c:	bhi	149fc <__assert_fail@plt+0x3544>
   14a40:	mov	r0, r6
   14a44:	ldrd	r4, [sp]
   14a48:	ldr	r6, [sp, #8]
   14a4c:	add	sp, sp, #12
   14a50:	pop	{pc}		; (ldr pc, [sp], #4)
   14a54:	strd	r4, [sp, #-16]!
   14a58:	subs	r4, r0, #0
   14a5c:	str	r6, [sp, #8]
   14a60:	str	lr, [sp, #12]
   14a64:	beq	14afc <__assert_fail@plt+0x3644>
   14a68:	mov	r1, #47	; 0x2f
   14a6c:	bl	113f8 <strrchr@plt>
   14a70:	subs	r5, r0, #0
   14a74:	beq	14ad4 <__assert_fail@plt+0x361c>
   14a78:	add	r6, r5, #1
   14a7c:	sub	r3, r6, r4
   14a80:	cmp	r3, #6
   14a84:	ble	14ad4 <__assert_fail@plt+0x361c>
   14a88:	movw	r1, #44116	; 0xac54
   14a8c:	movt	r1, #1
   14a90:	mov	r2, #7
   14a94:	sub	r0, r5, #6
   14a98:	bl	11488 <strncmp@plt>
   14a9c:	cmp	r0, #0
   14aa0:	bne	14ad4 <__assert_fail@plt+0x361c>
   14aa4:	movw	r1, #44124	; 0xac5c
   14aa8:	movt	r1, #1
   14aac:	mov	r2, #3
   14ab0:	mov	r0, r6
   14ab4:	bl	11488 <strncmp@plt>
   14ab8:	cmp	r0, #0
   14abc:	movne	r4, r6
   14ac0:	bne	14ad4 <__assert_fail@plt+0x361c>
   14ac4:	add	r4, r5, #4
   14ac8:	movw	r3, #49568	; 0xc1a0
   14acc:	movt	r3, #2
   14ad0:	str	r4, [r3]
   14ad4:	movw	r2, #49616	; 0xc1d0
   14ad8:	movt	r2, #2
   14adc:	ldr	r6, [sp, #8]
   14ae0:	movw	r3, #49572	; 0xc1a4
   14ae4:	movt	r3, #2
   14ae8:	str	r4, [r2]
   14aec:	str	r4, [r3]
   14af0:	ldrd	r4, [sp]
   14af4:	add	sp, sp, #12
   14af8:	pop	{pc}		; (ldr pc, [sp], #4)
   14afc:	movw	r3, #49584	; 0xc1b0
   14b00:	movt	r3, #2
   14b04:	movw	r0, #44060	; 0xac1c
   14b08:	movt	r0, #1
   14b0c:	ldr	r3, [r3]
   14b10:	mov	r2, #55	; 0x37
   14b14:	mov	r1, #1
   14b18:	bl	11248 <fwrite@plt>
   14b1c:	bl	114a0 <abort@plt>
   14b20:	strd	r4, [sp, #-16]!
   14b24:	mov	r4, #0
   14b28:	mov	r5, #0
   14b2c:	cmp	r1, #10
   14b30:	str	r6, [sp, #8]
   14b34:	strd	r4, [r0]
   14b38:	strd	r4, [r0, #8]
   14b3c:	str	lr, [sp, #12]
   14b40:	strd	r4, [r0, #16]
   14b44:	strd	r4, [r0, #24]
   14b48:	strd	r4, [r0, #32]
   14b4c:	strd	r4, [r0, #40]	; 0x28
   14b50:	beq	14b68 <__assert_fail@plt+0x36b0>
   14b54:	ldrd	r4, [sp]
   14b58:	str	r1, [r0]
   14b5c:	ldr	r6, [sp, #8]
   14b60:	add	sp, sp, #12
   14b64:	pop	{pc}		; (ldr pc, [sp], #4)
   14b68:	bl	114a0 <abort@plt>
   14b6c:	mov	r2, #5
   14b70:	strd	r4, [sp, #-16]!
   14b74:	mov	r5, r0
   14b78:	str	r6, [sp, #8]
   14b7c:	mov	r6, r1
   14b80:	mov	r1, r0
   14b84:	mov	r0, #0
   14b88:	str	lr, [sp, #12]
   14b8c:	bl	111e8 <dcgettext@plt>
   14b90:	cmp	r5, r0
   14b94:	mov	r4, r0
   14b98:	beq	14bb0 <__assert_fail@plt+0x36f8>
   14b9c:	mov	r0, r4
   14ba0:	ldrd	r4, [sp]
   14ba4:	ldr	r6, [sp, #8]
   14ba8:	add	sp, sp, #12
   14bac:	pop	{pc}		; (ldr pc, [sp], #4)
   14bb0:	bl	19400 <__assert_fail@plt+0x7f48>
   14bb4:	ldrb	r3, [r0]
   14bb8:	bic	r3, r3, #32
   14bbc:	cmp	r3, #85	; 0x55
   14bc0:	bne	14c28 <__assert_fail@plt+0x3770>
   14bc4:	ldrb	r3, [r0, #1]
   14bc8:	bic	r3, r3, #32
   14bcc:	cmp	r3, #84	; 0x54
   14bd0:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14bd4:	ldrb	r3, [r0, #2]
   14bd8:	bic	r3, r3, #32
   14bdc:	cmp	r3, #70	; 0x46
   14be0:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14be4:	ldrb	r3, [r0, #3]
   14be8:	cmp	r3, #45	; 0x2d
   14bec:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14bf0:	ldrb	r3, [r0, #4]
   14bf4:	cmp	r3, #56	; 0x38
   14bf8:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14bfc:	ldrb	r3, [r0, #5]
   14c00:	cmp	r3, #0
   14c04:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c08:	ldrb	r2, [r4]
   14c0c:	movw	r3, #44216	; 0xacb8
   14c10:	movt	r3, #1
   14c14:	movw	r4, #44228	; 0xacc4
   14c18:	movt	r4, #1
   14c1c:	cmp	r2, #96	; 0x60
   14c20:	movne	r4, r3
   14c24:	b	14b9c <__assert_fail@plt+0x36e4>
   14c28:	cmp	r3, #71	; 0x47
   14c2c:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c30:	ldrb	r3, [r0, #1]
   14c34:	bic	r3, r3, #32
   14c38:	cmp	r3, #66	; 0x42
   14c3c:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c40:	ldrb	r3, [r0, #2]
   14c44:	cmp	r3, #49	; 0x31
   14c48:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c4c:	ldrb	r3, [r0, #3]
   14c50:	cmp	r3, #56	; 0x38
   14c54:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c58:	ldrb	r3, [r0, #4]
   14c5c:	cmp	r3, #48	; 0x30
   14c60:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c64:	ldrb	r3, [r0, #5]
   14c68:	cmp	r3, #51	; 0x33
   14c6c:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c70:	ldrb	r3, [r0, #6]
   14c74:	cmp	r3, #48	; 0x30
   14c78:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c7c:	ldrb	r3, [r0, #7]
   14c80:	cmp	r3, #0
   14c84:	bne	14ca8 <__assert_fail@plt+0x37f0>
   14c88:	ldrb	r2, [r4]
   14c8c:	movw	r3, #44220	; 0xacbc
   14c90:	movt	r3, #1
   14c94:	movw	r4, #44224	; 0xacc0
   14c98:	movt	r4, #1
   14c9c:	cmp	r2, #96	; 0x60
   14ca0:	movne	r4, r3
   14ca4:	b	14b9c <__assert_fail@plt+0x36e4>
   14ca8:	movw	r3, #44232	; 0xacc8
   14cac:	movt	r3, #1
   14cb0:	cmp	r6, #9
   14cb4:	movw	r4, #44212	; 0xacb4
   14cb8:	movt	r4, #1
   14cbc:	movne	r4, r3
   14cc0:	b	14b9c <__assert_fail@plt+0x36e4>
   14cc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cc8:	strd	r6, [sp, #8]
   14ccc:	strd	r8, [sp, #16]
   14cd0:	strd	sl, [sp, #24]
   14cd4:	mov	fp, r0
   14cd8:	mov	sl, r1
   14cdc:	str	lr, [sp, #32]
   14ce0:	sub	sp, sp, #116	; 0x74
   14ce4:	ldr	r8, [sp, #152]	; 0x98
   14ce8:	str	r3, [sp, #28]
   14cec:	ldr	r3, [sp, #156]	; 0x9c
   14cf0:	str	r2, [sp, #32]
   14cf4:	and	r4, r3, #2
   14cf8:	ubfx	r3, r3, #1, #1
   14cfc:	str	r3, [sp, #44]	; 0x2c
   14d00:	bl	1126c <__ctype_get_mb_cur_max@plt>
   14d04:	str	r0, [sp, #64]	; 0x40
   14d08:	cmp	r8, #10
   14d0c:	ldrls	pc, [pc, r8, lsl #2]
   14d10:	b	16480 <__assert_fail@plt+0x4fc8>
   14d14:	andeq	r5, r1, r8, lsl r1
   14d18:			; <UNDEFINED> instruction: 0x000151b4
   14d1c:	muleq	r1, r0, r7
   14d20:	ldrdeq	r5, [r1], -r4
   14d24:	andeq	r5, r1, ip, ror r0
   14d28:	andeq	r5, r1, r8, asr #1
   14d2c:	andeq	r5, r1, r8, asr #2
   14d30:	andeq	r5, r1, r4, lsl #3
   14d34:	andeq	r4, r1, r0, asr #26
   14d38:	andeq	r4, r1, r0, asr #26
   14d3c:	andeq	r4, r1, r0, asr #26
   14d40:	cmp	r8, #10
   14d44:	beq	14d70 <__assert_fail@plt+0x38b8>
   14d48:	mov	r1, r8
   14d4c:	movw	r0, #44236	; 0xaccc
   14d50:	movt	r0, #1
   14d54:	bl	14b6c <__assert_fail@plt+0x36b4>
   14d58:	mov	r1, r8
   14d5c:	str	r0, [sp, #164]	; 0xa4
   14d60:	movw	r0, #44232	; 0xacc8
   14d64:	movt	r0, #1
   14d68:	bl	14b6c <__assert_fail@plt+0x36b4>
   14d6c:	str	r0, [sp, #168]	; 0xa8
   14d70:	cmp	r4, #0
   14d74:	movne	r4, #0
   14d78:	beq	1615c <__assert_fail@plt+0x4ca4>
   14d7c:	mov	r3, #1
   14d80:	mov	r5, #0
   14d84:	ldr	r0, [sp, #168]	; 0xa8
   14d88:	str	r3, [sp, #36]	; 0x24
   14d8c:	str	r3, [sp, #40]	; 0x28
   14d90:	str	r5, [sp, #68]	; 0x44
   14d94:	bl	11314 <strlen@plt>
   14d98:	ldr	r3, [sp, #168]	; 0xa8
   14d9c:	str	r5, [sp, #48]	; 0x30
   14da0:	str	r0, [sp, #56]	; 0x38
   14da4:	str	r3, [sp, #60]	; 0x3c
   14da8:	str	r5, [sp, #72]	; 0x48
   14dac:	str	r8, [sp, #152]	; 0x98
   14db0:	mov	r8, fp
   14db4:	mov	r9, #0
   14db8:	ldr	fp, [sp, #152]	; 0x98
   14dbc:	ldr	r3, [sp, #28]
   14dc0:	cmn	r3, #1
   14dc4:	beq	15324 <__assert_fail@plt+0x3e6c>
   14dc8:	ldr	r3, [sp, #28]
   14dcc:	subs	r6, r3, r9
   14dd0:	movne	r6, #1
   14dd4:	cmp	r6, #0
   14dd8:	beq	1533c <__assert_fail@plt+0x3e84>
   14ddc:	ldr	r0, [sp, #32]
   14de0:	ldr	r7, [sp, #40]	; 0x28
   14de4:	add	r3, r0, r9
   14de8:	cmp	fp, #2
   14dec:	moveq	r7, #0
   14df0:	andne	r7, r7, #1
   14df4:	str	r3, [sp, #52]	; 0x34
   14df8:	cmp	r7, #0
   14dfc:	beq	157d8 <__assert_fail@plt+0x4320>
   14e00:	ldr	r2, [sp, #56]	; 0x38
   14e04:	cmp	r2, #0
   14e08:	beq	15a74 <__assert_fail@plt+0x45bc>
   14e0c:	ldr	r1, [sp, #28]
   14e10:	cmp	r2, #1
   14e14:	mov	r3, r2
   14e18:	movls	r3, #0
   14e1c:	movhi	r3, #1
   14e20:	add	r5, r9, r2
   14e24:	cmn	r1, #1
   14e28:	movne	r3, #0
   14e2c:	cmp	r3, #0
   14e30:	beq	14e3c <__assert_fail@plt+0x3984>
   14e34:	bl	11314 <strlen@plt>
   14e38:	str	r0, [sp, #28]
   14e3c:	ldr	r3, [sp, #28]
   14e40:	cmp	r5, r3
   14e44:	bhi	15a74 <__assert_fail@plt+0x45bc>
   14e48:	ldr	r0, [sp, #52]	; 0x34
   14e4c:	ldr	r2, [sp, #56]	; 0x38
   14e50:	ldr	r1, [sp, #60]	; 0x3c
   14e54:	bl	111d0 <memcmp@plt>
   14e58:	cmp	r0, #0
   14e5c:	bne	15a74 <__assert_fail@plt+0x45bc>
   14e60:	ldr	r3, [sp, #44]	; 0x2c
   14e64:	cmp	r3, #0
   14e68:	bne	163a4 <__assert_fail@plt+0x4eec>
   14e6c:	ldr	r3, [sp, #52]	; 0x34
   14e70:	ldrb	r5, [r3]
   14e74:	cmp	r5, #126	; 0x7e
   14e78:	ldrls	pc, [pc, r5, lsl #2]
   14e7c:	b	15734 <__assert_fail@plt+0x427c>
   14e80:	andeq	r5, r1, r8, lsr r6
   14e84:	andeq	r5, r1, r4, lsr r7
   14e88:	andeq	r5, r1, r4, lsr r7
   14e8c:	andeq	r5, r1, r4, lsr r7
   14e90:	andeq	r5, r1, r4, lsr r7
   14e94:	andeq	r5, r1, r4, lsr r7
   14e98:	andeq	r5, r1, r4, lsr r7
   14e9c:	andeq	r5, r1, ip, lsl #12
   14ea0:	andeq	r5, r1, r4, lsl #12
   14ea4:	andeq	r5, r1, ip, asr #10
   14ea8:	strdeq	r5, [r1], -r8
   14eac:	andeq	r5, r1, r4, asr #10
   14eb0:	ldrdeq	r5, [r1], -r4
   14eb4:	andeq	r5, r1, r0, lsr #12
   14eb8:	andeq	r5, r1, r4, lsr r7
   14ebc:	andeq	r5, r1, r4, lsr r7
   14ec0:	andeq	r5, r1, r4, lsr r7
   14ec4:	andeq	r5, r1, r4, lsr r7
   14ec8:	andeq	r5, r1, r4, lsr r7
   14ecc:	andeq	r5, r1, r4, lsr r7
   14ed0:	andeq	r5, r1, r4, lsr r7
   14ed4:	andeq	r5, r1, r4, lsr r7
   14ed8:	andeq	r5, r1, r4, lsr r7
   14edc:	andeq	r5, r1, r4, lsr r7
   14ee0:	andeq	r5, r1, r4, lsr r7
   14ee4:	andeq	r5, r1, r4, lsr r7
   14ee8:	andeq	r5, r1, r4, lsr r7
   14eec:	andeq	r5, r1, r4, lsr r7
   14ef0:	andeq	r5, r1, r4, lsr r7
   14ef4:	andeq	r5, r1, r4, lsr r7
   14ef8:	andeq	r5, r1, r4, lsr r7
   14efc:	andeq	r5, r1, r4, lsr r7
   14f00:	andeq	r5, r1, r0, lsl r7
   14f04:	andeq	r5, r1, r8, lsl r6
   14f08:	andeq	r5, r1, r8, lsl r6
   14f0c:	strdeq	r5, [r1], -r4
   14f10:	andeq	r5, r1, r8, lsl r6
   14f14:	andeq	r5, r1, r8, lsr #14
   14f18:	andeq	r5, r1, r8, lsl r6
   14f1c:	andeq	r5, r1, r4, ror r4
   14f20:	andeq	r5, r1, r8, lsl r6
   14f24:	andeq	r5, r1, r8, lsl r6
   14f28:	andeq	r5, r1, r8, lsl r6
   14f2c:	andeq	r5, r1, r8, lsr #14
   14f30:	andeq	r5, r1, r8, lsr #14
   14f34:	andeq	r5, r1, r8, lsr #14
   14f38:	andeq	r5, r1, r8, lsr #14
   14f3c:	andeq	r5, r1, r8, lsr #14
   14f40:	andeq	r5, r1, r8, lsr #14
   14f44:	andeq	r5, r1, r8, lsr #14
   14f48:	andeq	r5, r1, r8, lsr #14
   14f4c:	andeq	r5, r1, r8, lsr #14
   14f50:	andeq	r5, r1, r8, lsr #14
   14f54:	andeq	r5, r1, r8, lsr #14
   14f58:	andeq	r5, r1, r8, lsr #14
   14f5c:	andeq	r5, r1, r8, lsr #14
   14f60:	andeq	r5, r1, r8, lsr #14
   14f64:	andeq	r5, r1, r8, lsr #14
   14f68:	andeq	r5, r1, r8, lsr #14
   14f6c:	andeq	r5, r1, r8, lsl r6
   14f70:	andeq	r5, r1, r8, lsl r6
   14f74:	andeq	r5, r1, r8, lsl r6
   14f78:	andeq	r5, r1, r8, lsl r6
   14f7c:	andeq	r5, r1, r8, asr #8
   14f80:	andeq	r5, r1, r4, lsr r7
   14f84:	andeq	r5, r1, r8, lsr #14
   14f88:	andeq	r5, r1, r8, lsr #14
   14f8c:	andeq	r5, r1, r8, lsr #14
   14f90:	andeq	r5, r1, r8, lsr #14
   14f94:	andeq	r5, r1, r8, lsr #14
   14f98:	andeq	r5, r1, r8, lsr #14
   14f9c:	andeq	r5, r1, r8, lsr #14
   14fa0:	andeq	r5, r1, r8, lsr #14
   14fa4:	andeq	r5, r1, r8, lsr #14
   14fa8:	andeq	r5, r1, r8, lsr #14
   14fac:	andeq	r5, r1, r8, lsr #14
   14fb0:	andeq	r5, r1, r8, lsr #14
   14fb4:	andeq	r5, r1, r8, lsr #14
   14fb8:	andeq	r5, r1, r8, lsr #14
   14fbc:	andeq	r5, r1, r8, lsr #14
   14fc0:	andeq	r5, r1, r8, lsr #14
   14fc4:	andeq	r5, r1, r8, lsr #14
   14fc8:	andeq	r5, r1, r8, lsr #14
   14fcc:	andeq	r5, r1, r8, lsr #14
   14fd0:	andeq	r5, r1, r8, lsr #14
   14fd4:	andeq	r5, r1, r8, lsr #14
   14fd8:	andeq	r5, r1, r8, lsr #14
   14fdc:	andeq	r5, r1, r8, lsr #14
   14fe0:	andeq	r5, r1, r8, lsr #14
   14fe4:	andeq	r5, r1, r8, lsr #14
   14fe8:	andeq	r5, r1, r8, lsr #14
   14fec:	andeq	r5, r1, r8, lsl r6
   14ff0:	strdeq	r5, [r1], -r0
   14ff4:	andeq	r5, r1, r8, lsr #14
   14ff8:	andeq	r5, r1, r8, lsl r6
   14ffc:	andeq	r5, r1, r8, lsr #14
   15000:	andeq	r5, r1, r8, lsl r6
   15004:	andeq	r5, r1, r8, lsr #14
   15008:	andeq	r5, r1, r8, lsr #14
   1500c:	andeq	r5, r1, r8, lsr #14
   15010:	andeq	r5, r1, r8, lsr #14
   15014:	andeq	r5, r1, r8, lsr #14
   15018:	andeq	r5, r1, r8, lsr #14
   1501c:	andeq	r5, r1, r8, lsr #14
   15020:	andeq	r5, r1, r8, lsr #14
   15024:	andeq	r5, r1, r8, lsr #14
   15028:	andeq	r5, r1, r8, lsr #14
   1502c:	andeq	r5, r1, r8, lsr #14
   15030:	andeq	r5, r1, r8, lsr #14
   15034:	andeq	r5, r1, r8, lsr #14
   15038:	andeq	r5, r1, r8, lsr #14
   1503c:	andeq	r5, r1, r8, lsr #14
   15040:	andeq	r5, r1, r8, lsr #14
   15044:	andeq	r5, r1, r8, lsr #14
   15048:	andeq	r5, r1, r8, lsr #14
   1504c:	andeq	r5, r1, r8, lsr #14
   15050:	andeq	r5, r1, r8, lsr #14
   15054:	andeq	r5, r1, r8, lsr #14
   15058:	andeq	r5, r1, r8, lsr #14
   1505c:	andeq	r5, r1, r8, lsr #14
   15060:	andeq	r5, r1, r8, lsr #14
   15064:	andeq	r5, r1, r8, lsr #14
   15068:	andeq	r5, r1, r8, lsr #14
   1506c:	andeq	r5, r1, r4, lsl r2
   15070:	andeq	r5, r1, r8, lsl r6
   15074:	andeq	r5, r1, r4, lsl r2
   15078:	strdeq	r5, [r1], -r4
   1507c:	cmp	r4, #0
   15080:	moveq	r3, #1
   15084:	streq	r3, [sp, #40]	; 0x28
   15088:	beq	1579c <__assert_fail@plt+0x42e4>
   1508c:	mov	r3, #0
   15090:	mov	r2, #1
   15094:	mov	r4, r3
   15098:	str	r2, [sp, #36]	; 0x24
   1509c:	str	r2, [sp, #44]	; 0x2c
   150a0:	str	r2, [sp, #56]	; 0x38
   150a4:	str	r3, [sp, #68]	; 0x44
   150a8:	movw	r3, #44232	; 0xacc8
   150ac:	movt	r3, #1
   150b0:	str	r4, [sp, #40]	; 0x28
   150b4:	mov	r8, #2
   150b8:	str	r4, [sp, #48]	; 0x30
   150bc:	str	r3, [sp, #60]	; 0x3c
   150c0:	str	r4, [sp, #72]	; 0x48
   150c4:	b	14dac <__assert_fail@plt+0x38f4>
   150c8:	cmp	r4, #0
   150cc:	bne	16318 <__assert_fail@plt+0x4e60>
   150d0:	cmp	sl, #0
   150d4:	beq	160d8 <__assert_fail@plt+0x4c20>
   150d8:	mov	r3, #34	; 0x22
   150dc:	mov	r1, r4
   150e0:	mov	r2, #1
   150e4:	strb	r3, [fp]
   150e8:	movw	r3, #44212	; 0xacb4
   150ec:	movt	r3, #1
   150f0:	mov	r4, r2
   150f4:	str	r2, [sp, #36]	; 0x24
   150f8:	str	r2, [sp, #40]	; 0x28
   150fc:	str	r1, [sp, #44]	; 0x2c
   15100:	str	r1, [sp, #48]	; 0x30
   15104:	str	r2, [sp, #56]	; 0x38
   15108:	str	r3, [sp, #60]	; 0x3c
   1510c:	str	r1, [sp, #68]	; 0x44
   15110:	str	r1, [sp, #72]	; 0x48
   15114:	b	14dac <__assert_fail@plt+0x38f4>
   15118:	mov	r3, #0
   1511c:	mov	r4, r8
   15120:	str	r3, [sp, #40]	; 0x28
   15124:	str	r3, [sp, #44]	; 0x2c
   15128:	str	r3, [sp, #48]	; 0x30
   1512c:	str	r8, [sp, #56]	; 0x38
   15130:	str	r3, [sp, #60]	; 0x3c
   15134:	str	r3, [sp, #68]	; 0x44
   15138:	mov	r3, #1
   1513c:	str	r3, [sp, #36]	; 0x24
   15140:	str	r8, [sp, #72]	; 0x48
   15144:	b	14dac <__assert_fail@plt+0x38f4>
   15148:	mov	r3, #1
   1514c:	mov	r2, #0
   15150:	mov	r4, r2
   15154:	mov	r8, #5
   15158:	str	r3, [sp, #36]	; 0x24
   1515c:	str	r3, [sp, #40]	; 0x28
   15160:	str	r3, [sp, #44]	; 0x2c
   15164:	str	r2, [sp, #48]	; 0x30
   15168:	str	r3, [sp, #56]	; 0x38
   1516c:	movw	r3, #44212	; 0xacb4
   15170:	movt	r3, #1
   15174:	str	r3, [sp, #60]	; 0x3c
   15178:	str	r2, [sp, #68]	; 0x44
   1517c:	str	r2, [sp, #72]	; 0x48
   15180:	b	14dac <__assert_fail@plt+0x38f4>
   15184:	mov	r3, #0
   15188:	mov	r2, #1
   1518c:	mov	r4, r3
   15190:	str	r2, [sp, #36]	; 0x24
   15194:	str	r2, [sp, #40]	; 0x28
   15198:	str	r3, [sp, #44]	; 0x2c
   1519c:	str	r3, [sp, #48]	; 0x30
   151a0:	str	r3, [sp, #56]	; 0x38
   151a4:	str	r3, [sp, #60]	; 0x3c
   151a8:	str	r3, [sp, #68]	; 0x44
   151ac:	str	r3, [sp, #72]	; 0x48
   151b0:	b	14dac <__assert_fail@plt+0x38f4>
   151b4:	mov	r2, #1
   151b8:	mov	r3, #0
   151bc:	mov	r4, r3
   151c0:	str	r2, [sp, #36]	; 0x24
   151c4:	str	r2, [sp, #44]	; 0x2c
   151c8:	str	r8, [sp, #56]	; 0x38
   151cc:	str	r3, [sp, #68]	; 0x44
   151d0:	b	150a8 <__assert_fail@plt+0x3bf0>
   151d4:	mov	r3, #1
   151d8:	mov	r2, #0
   151dc:	mov	r4, r2
   151e0:	mov	r8, #2
   151e4:	str	r3, [sp, #36]	; 0x24
   151e8:	str	r3, [sp, #40]	; 0x28
   151ec:	str	r3, [sp, #44]	; 0x2c
   151f0:	str	r2, [sp, #48]	; 0x30
   151f4:	str	r3, [sp, #56]	; 0x38
   151f8:	movw	r3, #44232	; 0xacc8
   151fc:	movt	r3, #1
   15200:	str	r3, [sp, #60]	; 0x3c
   15204:	str	r2, [sp, #68]	; 0x44
   15208:	str	r2, [sp, #72]	; 0x48
   1520c:	b	14dac <__assert_fail@plt+0x38f4>
   15210:	mov	r7, #0
   15214:	ldr	r3, [sp, #28]
   15218:	cmn	r3, #1
   1521c:	beq	15cf4 <__assert_fail@plt+0x483c>
   15220:	ldr	r3, [sp, #28]
   15224:	subs	r2, r3, #1
   15228:	movne	r2, #1
   1522c:	sub	r3, fp, #2
   15230:	cmp	r2, #0
   15234:	clz	r3, r3
   15238:	lsr	r3, r3, #5
   1523c:	bne	15248 <__assert_fail@plt+0x3d90>
   15240:	cmp	r9, #0
   15244:	beq	15a54 <__assert_fail@plt+0x459c>
   15248:	mov	r6, #0
   1524c:	ldr	r2, [sp, #40]	; 0x28
   15250:	eor	r2, r2, #1
   15254:	orrs	r3, r3, r2
   15258:	bne	15430 <__assert_fail@plt+0x3f78>
   1525c:	ldr	r2, [sp, #160]	; 0xa0
   15260:	cmp	r2, #0
   15264:	beq	15284 <__assert_fail@plt+0x3dcc>
   15268:	ldr	r0, [sp, #160]	; 0xa0
   1526c:	ubfx	r1, r5, #5, #8
   15270:	and	r2, r5, #31
   15274:	ldr	r1, [r0, r1, lsl #2]
   15278:	lsr	r2, r1, r2
   1527c:	tst	r2, #1
   15280:	bne	1528c <__assert_fail@plt+0x3dd4>
   15284:	cmp	r7, #0
   15288:	beq	154fc <__assert_fail@plt+0x4044>
   1528c:	ldr	r2, [sp, #44]	; 0x2c
   15290:	sub	r3, fp, #2
   15294:	clz	r3, r3
   15298:	lsr	r3, r3, #5
   1529c:	cmp	r2, #0
   152a0:	bne	16048 <__assert_fail@plt+0x4b90>
   152a4:	ldr	r2, [sp, #48]	; 0x30
   152a8:	eor	r2, r2, #1
   152ac:	ands	r3, r3, r2
   152b0:	beq	152e8 <__assert_fail@plt+0x3e30>
   152b4:	cmp	sl, r4
   152b8:	str	r3, [sp, #48]	; 0x30
   152bc:	movhi	r2, #39	; 0x27
   152c0:	strbhi	r2, [r8, r4]
   152c4:	add	r2, r4, #1
   152c8:	cmp	sl, r2
   152cc:	movhi	r1, #36	; 0x24
   152d0:	strbhi	r1, [r8, r2]
   152d4:	add	r2, r4, #2
   152d8:	add	r4, r4, #3
   152dc:	cmp	sl, r2
   152e0:	movhi	r1, #39	; 0x27
   152e4:	strbhi	r1, [r8, r2]
   152e8:	cmp	r4, sl
   152ec:	add	r9, r9, #1
   152f0:	movcc	r3, #92	; 0x5c
   152f4:	strbcc	r3, [r8, r4]
   152f8:	add	r4, r4, #1
   152fc:	cmp	r4, sl
   15300:	ldr	r3, [sp, #36]	; 0x24
   15304:	strbcc	r5, [r8, r4]
   15308:	cmp	r6, #0
   1530c:	add	r4, r4, #1
   15310:	moveq	r3, #0
   15314:	str	r3, [sp, #36]	; 0x24
   15318:	ldr	r3, [sp, #28]
   1531c:	cmn	r3, #1
   15320:	bne	14dc8 <__assert_fail@plt+0x3910>
   15324:	ldr	r3, [sp, #32]
   15328:	ldrb	r6, [r3, r9]
   1532c:	adds	r6, r6, #0
   15330:	movne	r6, #1
   15334:	cmp	r6, #0
   15338:	bne	14ddc <__assert_fail@plt+0x3924>
   1533c:	str	fp, [sp, #152]	; 0x98
   15340:	mov	fp, r8
   15344:	cmp	r4, #0
   15348:	ldr	r1, [sp, #44]	; 0x2c
   1534c:	movne	r3, #0
   15350:	ldr	r8, [sp, #152]	; 0x98
   15354:	sub	r2, r8, #2
   15358:	clz	r2, r2
   1535c:	lsr	r2, r2, #5
   15360:	andeq	r3, r2, r1
   15364:	cmp	r3, #0
   15368:	bne	16424 <__assert_fail@plt+0x4f6c>
   1536c:	eor	r3, r1, #1
   15370:	ands	r2, r2, r3
   15374:	beq	16350 <__assert_fail@plt+0x4e98>
   15378:	ldr	r3, [sp, #68]	; 0x44
   1537c:	cmp	r3, #0
   15380:	beq	16354 <__assert_fail@plt+0x4e9c>
   15384:	ldr	r3, [sp, #36]	; 0x24
   15388:	cmp	r3, #0
   1538c:	bne	163e0 <__assert_fail@plt+0x4f28>
   15390:	ldr	r3, [sp, #72]	; 0x48
   15394:	adds	r3, r3, #0
   15398:	movne	r3, #1
   1539c:	cmp	sl, #0
   153a0:	movne	r3, #0
   153a4:	cmp	r3, #0
   153a8:	ldreq	r2, [sp, #68]	; 0x44
   153ac:	beq	16354 <__assert_fail@plt+0x4e9c>
   153b0:	ldr	r2, [sp, #72]	; 0x48
   153b4:	str	r3, [sp, #68]	; 0x44
   153b8:	movw	r3, #44232	; 0xacc8
   153bc:	movt	r3, #1
   153c0:	mov	r1, #39	; 0x27
   153c4:	mov	r4, #1
   153c8:	ldr	sl, [sp, #72]	; 0x48
   153cc:	mov	r8, #2
   153d0:	str	r3, [sp, #60]	; 0x3c
   153d4:	mov	r3, #0
   153d8:	strb	r1, [fp]
   153dc:	str	r3, [sp, #44]	; 0x2c
   153e0:	str	r4, [sp, #56]	; 0x38
   153e4:	str	r2, [sp, #72]	; 0x48
   153e8:	b	14dac <__assert_fail@plt+0x38f4>
   153ec:	mov	r7, #0
   153f0:	cmp	fp, #2
   153f4:	beq	15cd4 <__assert_fail@plt+0x481c>
   153f8:	ldr	r2, [sp, #40]	; 0x28
   153fc:	ldr	r3, [sp, #56]	; 0x38
   15400:	ldr	r1, [sp, #44]	; 0x2c
   15404:	cmp	r3, #0
   15408:	moveq	r3, #0
   1540c:	andne	r3, r2, r1
   15410:	cmp	r3, #0
   15414:	moveq	r5, #92	; 0x5c
   15418:	moveq	r3, r5
   1541c:	bne	15ce0 <__assert_fail@plt+0x4828>
   15420:	ldr	r2, [sp, #40]	; 0x28
   15424:	cmp	r2, #0
   15428:	bne	1611c <__assert_fail@plt+0x4c64>
   1542c:	mov	r6, #0
   15430:	ldr	r3, [sp, #44]	; 0x2c
   15434:	cmp	r3, #0
   15438:	beq	15ccc <__assert_fail@plt+0x4814>
   1543c:	mov	r3, #0
   15440:	b	1525c <__assert_fail@plt+0x3da4>
   15444:	mov	r7, #0
   15448:	cmp	fp, #2
   1544c:	beq	15d44 <__assert_fail@plt+0x488c>
   15450:	cmp	fp, #5
   15454:	beq	15d08 <__assert_fail@plt+0x4850>
   15458:	sub	r3, fp, #2
   1545c:	mov	r6, #0
   15460:	clz	r3, r3
   15464:	mov	r5, #63	; 0x3f
   15468:	lsr	r3, r3, #5
   1546c:	b	1524c <__assert_fail@plt+0x3d94>
   15470:	mov	r7, #0
   15474:	cmp	fp, #2
   15478:	movne	r3, #0
   1547c:	movne	r5, #39	; 0x27
   15480:	strne	r6, [sp, #68]	; 0x44
   15484:	bne	1524c <__assert_fail@plt+0x3d94>
   15488:	ldr	r3, [sp, #44]	; 0x2c
   1548c:	cmp	r3, #0
   15490:	bne	1614c <__assert_fail@plt+0x4c94>
   15494:	ldr	r3, [sp, #72]	; 0x48
   15498:	cmp	sl, #0
   1549c:	clz	r3, r3
   154a0:	lsr	r3, r3, #5
   154a4:	moveq	r3, #0
   154a8:	cmp	r3, #0
   154ac:	bne	16078 <__assert_fail@plt+0x4bc0>
   154b0:	cmp	sl, r4
   154b4:	movhi	r3, #39	; 0x27
   154b8:	strbhi	r3, [r8, r4]
   154bc:	add	r3, r4, #1
   154c0:	cmp	sl, r3
   154c4:	movhi	r2, #92	; 0x5c
   154c8:	strbhi	r2, [r8, r3]
   154cc:	add	r3, r4, #2
   154d0:	cmp	sl, r3
   154d4:	bls	154e0 <__assert_fail@plt+0x4028>
   154d8:	mov	r2, #39	; 0x27
   154dc:	strb	r2, [r8, r3]
   154e0:	mov	r3, #0
   154e4:	cmp	r7, #0
   154e8:	add	r4, r4, #3
   154ec:	mov	r5, #39	; 0x27
   154f0:	str	r3, [sp, #48]	; 0x30
   154f4:	str	r6, [sp, #68]	; 0x44
   154f8:	bne	1528c <__assert_fail@plt+0x3dd4>
   154fc:	ldr	r2, [sp, #48]	; 0x30
   15500:	eor	r3, r3, #1
   15504:	add	r9, r9, #1
   15508:	and	r3, r3, r2
   1550c:	uxtb	r3, r3
   15510:	cmp	r3, #0
   15514:	beq	152fc <__assert_fail@plt+0x3e44>
   15518:	cmp	sl, r4
   1551c:	movhi	r3, #39	; 0x27
   15520:	strbhi	r3, [r8, r4]
   15524:	add	r3, r4, #1
   15528:	add	r4, r4, #2
   1552c:	cmp	sl, r3
   15530:	movhi	r2, #39	; 0x27
   15534:	strbhi	r2, [r8, r3]
   15538:	mov	r3, #0
   1553c:	str	r3, [sp, #48]	; 0x30
   15540:	b	152fc <__assert_fail@plt+0x3e44>
   15544:	mov	r3, #118	; 0x76
   15548:	b	15420 <__assert_fail@plt+0x3f68>
   1554c:	mov	r3, #116	; 0x74
   15550:	ldr	r2, [sp, #44]	; 0x2c
   15554:	cmp	fp, #2
   15558:	movne	r2, #0
   1555c:	andeq	r2, r2, #1
   15560:	cmp	r2, #0
   15564:	beq	15420 <__assert_fail@plt+0x3f68>
   15568:	mov	fp, r8
   1556c:	mov	r8, #2
   15570:	ldr	r3, [sp, #40]	; 0x28
   15574:	cmp	r3, #0
   15578:	movne	r8, #4
   1557c:	mov	lr, #0
   15580:	mov	r0, fp
   15584:	ldr	r2, [sp, #32]
   15588:	ldr	r3, [sp, #156]	; 0x9c
   1558c:	ldr	r1, [sp, #164]	; 0xa4
   15590:	bic	ip, r3, #2
   15594:	ldr	r3, [sp, #28]
   15598:	stm	sp, {r8, ip, lr}
   1559c:	ldr	ip, [sp, #168]	; 0xa8
   155a0:	str	r1, [sp, #12]
   155a4:	mov	r1, sl
   155a8:	str	ip, [sp, #16]
   155ac:	bl	14cc4 <__assert_fail@plt+0x380c>
   155b0:	mov	r4, r0
   155b4:	mov	r0, r4
   155b8:	add	sp, sp, #116	; 0x74
   155bc:	ldrd	r4, [sp]
   155c0:	ldrd	r6, [sp, #8]
   155c4:	ldrd	r8, [sp, #16]
   155c8:	ldrd	sl, [sp, #24]
   155cc:	add	sp, sp, #32
   155d0:	pop	{pc}		; (ldr pc, [sp], #4)
   155d4:	mov	r5, #102	; 0x66
   155d8:	ldr	r2, [sp, #44]	; 0x2c
   155dc:	sub	r3, fp, #2
   155e0:	clz	r3, r3
   155e4:	lsr	r3, r3, #5
   155e8:	cmp	r2, #0
   155ec:	bne	16048 <__assert_fail@plt+0x4b90>
   155f0:	mov	r6, r2
   155f4:	b	152e8 <__assert_fail@plt+0x3e30>
   155f8:	mov	r5, #110	; 0x6e
   155fc:	mov	r6, #0
   15600:	b	1528c <__assert_fail@plt+0x3dd4>
   15604:	mov	r5, #98	; 0x62
   15608:	b	155d8 <__assert_fail@plt+0x4120>
   1560c:	mov	r5, #97	; 0x61
   15610:	b	155d8 <__assert_fail@plt+0x4120>
   15614:	mov	r7, #0
   15618:	mov	r6, #0
   1561c:	b	1543c <__assert_fail@plt+0x3f84>
   15620:	mov	r5, #114	; 0x72
   15624:	b	155fc <__assert_fail@plt+0x4144>
   15628:	ldr	r3, [sp, #44]	; 0x2c
   1562c:	cmp	r3, #0
   15630:	bne	163c0 <__assert_fail@plt+0x4f08>
   15634:	mov	r7, r3
   15638:	ldr	r3, [sp, #48]	; 0x30
   1563c:	sub	r2, fp, #2
   15640:	clz	r2, r2
   15644:	lsr	r2, r2, #5
   15648:	eor	r3, r3, #1
   1564c:	ands	r3, r2, r3
   15650:	beq	16064 <__assert_fail@plt+0x4bac>
   15654:	cmp	sl, r4
   15658:	movhi	r1, #39	; 0x27
   1565c:	strbhi	r1, [r8, r4]
   15660:	add	r1, r4, #1
   15664:	cmp	sl, r1
   15668:	movhi	r0, #36	; 0x24
   1566c:	strbhi	r0, [r8, r1]
   15670:	add	r1, r4, #2
   15674:	cmp	sl, r1
   15678:	movhi	r0, #39	; 0x27
   1567c:	strbhi	r0, [r8, r1]
   15680:	add	r1, r4, #3
   15684:	cmp	sl, r1
   15688:	bls	160bc <__assert_fail@plt+0x4c04>
   1568c:	mov	r4, r1
   15690:	mov	r1, #92	; 0x5c
   15694:	mov	r0, r4
   15698:	str	r3, [sp, #48]	; 0x30
   1569c:	strb	r1, [r8, r4]
   156a0:	cmp	fp, #2
   156a4:	add	r4, r4, #1
   156a8:	beq	1610c <__assert_fail@plt+0x4c54>
   156ac:	ldr	r1, [sp, #28]
   156b0:	add	r3, r9, #1
   156b4:	cmp	r3, r1
   156b8:	bcs	156d0 <__assert_fail@plt+0x4218>
   156bc:	ldr	r1, [sp, #32]
   156c0:	ldrb	r3, [r1, r3]
   156c4:	sub	r3, r3, #48	; 0x30
   156c8:	cmp	r3, #9
   156cc:	bls	16124 <__assert_fail@plt+0x4c6c>
   156d0:	mov	r5, #48	; 0x30
   156d4:	ldr	r3, [sp, #40]	; 0x28
   156d8:	eor	r3, r3, #1
   156dc:	orrs	r2, r2, r3
   156e0:	mov	r3, r6
   156e4:	moveq	r6, r2
   156e8:	beq	1525c <__assert_fail@plt+0x3da4>
   156ec:	mov	r6, #0
   156f0:	b	15284 <__assert_fail@plt+0x3dcc>
   156f4:	cmp	r9, #0
   156f8:	mov	r2, r7
   156fc:	bne	15c9c <__assert_fail@plt+0x47e4>
   15700:	mov	r6, r7
   15704:	mov	r3, r9
   15708:	mov	r7, r2
   1570c:	b	1524c <__assert_fail@plt+0x3d94>
   15710:	mov	r2, r7
   15714:	mov	r6, r7
   15718:	mov	r3, #0
   1571c:	mov	r7, r2
   15720:	mov	r5, #32
   15724:	b	1524c <__assert_fail@plt+0x3d94>
   15728:	mov	r6, r7
   1572c:	b	1543c <__assert_fail@plt+0x3f84>
   15730:	mov	r7, #0
   15734:	ldr	r3, [sp, #64]	; 0x40
   15738:	cmp	r3, #1
   1573c:	bne	15d5c <__assert_fail@plt+0x48a4>
   15740:	bl	112fc <__ctype_b_loc@plt>
   15744:	ldr	r2, [r0]
   15748:	sxth	r3, r5
   1574c:	lsl	r3, r3, #1
   15750:	ldr	r1, [sp, #64]	; 0x40
   15754:	ldrh	r3, [r2, r3]
   15758:	mov	ip, r1
   1575c:	and	r3, r3, #16384	; 0x4000
   15760:	cmp	r3, #0
   15764:	ldr	r3, [sp, #40]	; 0x28
   15768:	movne	r6, #1
   1576c:	moveq	r6, #0
   15770:	movne	r2, #0
   15774:	andeq	r2, r3, #1
   15778:	cmp	r2, #0
   1577c:	bne	160a4 <__assert_fail@plt+0x4bec>
   15780:	sub	r3, fp, #2
   15784:	clz	r3, r3
   15788:	lsr	r3, r3, #5
   1578c:	b	1524c <__assert_fail@plt+0x3d94>
   15790:	cmp	r4, #0
   15794:	bne	16434 <__assert_fail@plt+0x4f7c>
   15798:	str	r4, [sp, #40]	; 0x28
   1579c:	cmp	sl, #0
   157a0:	bne	16464 <__assert_fail@plt+0x4fac>
   157a4:	mov	r3, #1
   157a8:	movw	r2, #44232	; 0xacc8
   157ac:	movt	r2, #1
   157b0:	mov	r4, r3
   157b4:	mov	r8, #2
   157b8:	str	r3, [sp, #36]	; 0x24
   157bc:	str	sl, [sp, #44]	; 0x2c
   157c0:	str	sl, [sp, #48]	; 0x30
   157c4:	str	r3, [sp, #56]	; 0x38
   157c8:	str	r2, [sp, #60]	; 0x3c
   157cc:	str	sl, [sp, #68]	; 0x44
   157d0:	str	sl, [sp, #72]	; 0x48
   157d4:	b	14dac <__assert_fail@plt+0x38f4>
   157d8:	ldr	r3, [sp, #32]
   157dc:	ldrb	r5, [r3, r9]
   157e0:	cmp	r5, #126	; 0x7e
   157e4:	ldrls	pc, [pc, r5, lsl #2]
   157e8:	b	15734 <__assert_fail@plt+0x427c>
   157ec:	andeq	r5, r1, r0, lsl sl
   157f0:	andeq	r5, r1, r4, lsr r7
   157f4:	andeq	r5, r1, r4, lsr r7
   157f8:	andeq	r5, r1, r4, lsr r7
   157fc:	andeq	r5, r1, r4, lsr r7
   15800:	andeq	r5, r1, r4, lsr r7
   15804:	andeq	r5, r1, r4, lsr r7
   15808:	andeq	r5, r1, r8, lsl #20
   1580c:	andeq	r5, r1, r0, lsl #20
   15810:	andeq	r5, r1, ip, asr #10
   15814:	strdeq	r5, [r1], -r8
   15818:	andeq	r5, r1, r4, asr #10
   1581c:	strdeq	r5, [r1], -r0
   15820:	andeq	r5, r1, r8, ror #19
   15824:	andeq	r5, r1, r4, lsr r7
   15828:	andeq	r5, r1, r4, lsr r7
   1582c:	andeq	r5, r1, r4, lsr r7
   15830:	andeq	r5, r1, r4, lsr r7
   15834:	andeq	r5, r1, r4, lsr r7
   15838:	andeq	r5, r1, r4, lsr r7
   1583c:	andeq	r5, r1, r4, lsr r7
   15840:	andeq	r5, r1, r4, lsr r7
   15844:	andeq	r5, r1, r4, lsr r7
   15848:	andeq	r5, r1, r4, lsr r7
   1584c:	andeq	r5, r1, r4, lsr r7
   15850:	andeq	r5, r1, r4, lsr r7
   15854:	andeq	r5, r1, r4, lsr r7
   15858:	andeq	r5, r1, r4, lsr r7
   1585c:	andeq	r5, r1, r4, lsr r7
   15860:	andeq	r5, r1, r4, lsr r7
   15864:	andeq	r5, r1, r4, lsr r7
   15868:	andeq	r5, r1, r4, lsr r7
   1586c:	andeq	r5, r1, r4, ror #20
   15870:	andeq	r5, r1, r4, asr #20
   15874:	andeq	r5, r1, r4, asr #20
   15878:	andeq	r5, r1, r4, lsr sl
   1587c:	andeq	r5, r1, r4, asr #20
   15880:	andeq	r5, r1, r0, lsl #15
   15884:	andeq	r5, r1, r4, asr #20
   15888:	andeq	r5, r1, r4, ror r4
   1588c:	andeq	r5, r1, r4, asr #20
   15890:	andeq	r5, r1, r4, asr #20
   15894:	andeq	r5, r1, r4, asr #20
   15898:	andeq	r5, r1, r0, lsl #15
   1589c:	andeq	r5, r1, r0, lsl #15
   158a0:	andeq	r5, r1, r0, lsl #15
   158a4:	andeq	r5, r1, r0, lsl #15
   158a8:	andeq	r5, r1, r0, lsl #15
   158ac:	andeq	r5, r1, r0, lsl #15
   158b0:	andeq	r5, r1, r0, lsl #15
   158b4:	andeq	r5, r1, r0, lsl #15
   158b8:	andeq	r5, r1, r0, lsl #15
   158bc:	andeq	r5, r1, r0, lsl #15
   158c0:	andeq	r5, r1, r0, lsl #15
   158c4:	andeq	r5, r1, r0, lsl #15
   158c8:	andeq	r5, r1, r0, lsl #15
   158cc:	andeq	r5, r1, r0, lsl #15
   158d0:	andeq	r5, r1, r0, lsl #15
   158d4:	andeq	r5, r1, r0, lsl #15
   158d8:	andeq	r5, r1, r4, asr #20
   158dc:	andeq	r5, r1, r4, asr #20
   158e0:	andeq	r5, r1, r4, asr #20
   158e4:	andeq	r5, r1, r4, asr #20
   158e8:	andeq	r5, r1, r8, asr #8
   158ec:	andeq	r5, r1, r4, lsr r7
   158f0:	andeq	r5, r1, r0, lsl #15
   158f4:	andeq	r5, r1, r0, lsl #15
   158f8:	andeq	r5, r1, r0, lsl #15
   158fc:	andeq	r5, r1, r0, lsl #15
   15900:	andeq	r5, r1, r0, lsl #15
   15904:	andeq	r5, r1, r0, lsl #15
   15908:	andeq	r5, r1, r0, lsl #15
   1590c:	andeq	r5, r1, r0, lsl #15
   15910:	andeq	r5, r1, r0, lsl #15
   15914:	andeq	r5, r1, r0, lsl #15
   15918:	andeq	r5, r1, r0, lsl #15
   1591c:	andeq	r5, r1, r0, lsl #15
   15920:	andeq	r5, r1, r0, lsl #15
   15924:	andeq	r5, r1, r0, lsl #15
   15928:	andeq	r5, r1, r0, lsl #15
   1592c:	andeq	r5, r1, r0, lsl #15
   15930:	andeq	r5, r1, r0, lsl #15
   15934:	andeq	r5, r1, r0, lsl #15
   15938:	andeq	r5, r1, r0, lsl #15
   1593c:	andeq	r5, r1, r0, lsl #15
   15940:	andeq	r5, r1, r0, lsl #15
   15944:	andeq	r5, r1, r0, lsl #15
   15948:	andeq	r5, r1, r0, lsl #15
   1594c:	andeq	r5, r1, r0, lsl #15
   15950:	andeq	r5, r1, r0, lsl #15
   15954:	andeq	r5, r1, r0, lsl #15
   15958:	andeq	r5, r1, r4, asr #20
   1595c:	strdeq	r5, [r1], -r0
   15960:	andeq	r5, r1, r0, lsl #15
   15964:	andeq	r5, r1, r4, asr #20
   15968:	andeq	r5, r1, r0, lsl #15
   1596c:	andeq	r5, r1, r4, asr #20
   15970:	andeq	r5, r1, r0, lsl #15
   15974:	andeq	r5, r1, r0, lsl #15
   15978:	andeq	r5, r1, r0, lsl #15
   1597c:	andeq	r5, r1, r0, lsl #15
   15980:	andeq	r5, r1, r0, lsl #15
   15984:	andeq	r5, r1, r0, lsl #15
   15988:	andeq	r5, r1, r0, lsl #15
   1598c:	andeq	r5, r1, r0, lsl #15
   15990:	andeq	r5, r1, r0, lsl #15
   15994:	andeq	r5, r1, r0, lsl #15
   15998:	andeq	r5, r1, r0, lsl #15
   1599c:	andeq	r5, r1, r0, lsl #15
   159a0:	andeq	r5, r1, r0, lsl #15
   159a4:	andeq	r5, r1, r0, lsl #15
   159a8:	andeq	r5, r1, r0, lsl #15
   159ac:	andeq	r5, r1, r0, lsl #15
   159b0:	andeq	r5, r1, r0, lsl #15
   159b4:	andeq	r5, r1, r0, lsl #15
   159b8:	andeq	r5, r1, r0, lsl #15
   159bc:	andeq	r5, r1, r0, lsl #15
   159c0:	andeq	r5, r1, r0, lsl #15
   159c4:	andeq	r5, r1, r0, lsl #15
   159c8:	andeq	r5, r1, r0, lsl #15
   159cc:	andeq	r5, r1, r0, lsl #15
   159d0:	andeq	r5, r1, r0, lsl #15
   159d4:	andeq	r5, r1, r0, lsl #15
   159d8:	andeq	r5, r1, r4, lsl r2
   159dc:	andeq	r5, r1, r4, asr #20
   159e0:	andeq	r5, r1, r4, lsl r2
   159e4:	andeq	r5, r1, r4, lsr sl
   159e8:	mov	r3, #114	; 0x72
   159ec:	b	15550 <__assert_fail@plt+0x4098>
   159f0:	mov	r3, #102	; 0x66
   159f4:	b	15420 <__assert_fail@plt+0x3f68>
   159f8:	mov	r3, #110	; 0x6e
   159fc:	b	15550 <__assert_fail@plt+0x4098>
   15a00:	mov	r3, #98	; 0x62
   15a04:	b	15420 <__assert_fail@plt+0x3f68>
   15a08:	mov	r3, #97	; 0x61
   15a0c:	b	15420 <__assert_fail@plt+0x3f68>
   15a10:	ldr	r3, [sp, #40]	; 0x28
   15a14:	cmp	r3, #0
   15a18:	bne	15628 <__assert_fail@plt+0x4170>
   15a1c:	ldr	r3, [sp, #156]	; 0x9c
   15a20:	tst	r3, #1
   15a24:	addne	r9, r9, #1
   15a28:	bne	14dbc <__assert_fail@plt+0x3904>
   15a2c:	ldr	r7, [sp, #40]	; 0x28
   15a30:	b	1542c <__assert_fail@plt+0x3f74>
   15a34:	sub	r3, fp, #2
   15a38:	clz	r3, r3
   15a3c:	lsr	r3, r3, #5
   15a40:	b	15240 <__assert_fail@plt+0x3d88>
   15a44:	sub	r3, fp, #2
   15a48:	mov	r6, #0
   15a4c:	clz	r3, r3
   15a50:	lsr	r3, r3, #5
   15a54:	ldr	r2, [sp, #44]	; 0x2c
   15a58:	tst	r2, r3
   15a5c:	beq	1524c <__assert_fail@plt+0x3d94>
   15a60:	b	15568 <__assert_fail@plt+0x40b0>
   15a64:	sub	r3, fp, #2
   15a68:	clz	r3, r3
   15a6c:	lsr	r3, r3, #5
   15a70:	b	15a54 <__assert_fail@plt+0x459c>
   15a74:	ldr	r3, [sp, #52]	; 0x34
   15a78:	ldrb	r5, [r3]
   15a7c:	cmp	r5, #126	; 0x7e
   15a80:	ldrls	pc, [pc, r5, lsl #2]
   15a84:	b	15730 <__assert_fail@plt+0x4278>
   15a88:	andeq	r5, r1, r8, lsr #12
   15a8c:	andeq	r5, r1, r0, lsr r7
   15a90:	andeq	r5, r1, r0, lsr r7
   15a94:	andeq	r5, r1, r0, lsr r7
   15a98:	andeq	r5, r1, r0, lsr r7
   15a9c:	andeq	r5, r1, r0, lsr r7
   15aa0:	andeq	r5, r1, r0, lsr r7
   15aa4:	andeq	r5, r1, ip, lsl #12
   15aa8:	andeq	r5, r1, r4, lsl #12
   15aac:	andeq	r5, r1, r0, asr #25
   15ab0:	strdeq	r5, [r1], -r8
   15ab4:			; <UNDEFINED> instruction: 0x00015cb4
   15ab8:	ldrdeq	r5, [r1], -r4
   15abc:	andeq	r5, r1, r0, lsr #12
   15ac0:	andeq	r5, r1, r0, lsr r7
   15ac4:	andeq	r5, r1, r0, lsr r7
   15ac8:	andeq	r5, r1, r0, lsr r7
   15acc:	andeq	r5, r1, r0, lsr r7
   15ad0:	andeq	r5, r1, r0, lsr r7
   15ad4:	andeq	r5, r1, r0, lsr r7
   15ad8:	andeq	r5, r1, r0, lsr r7
   15adc:	andeq	r5, r1, r0, lsr r7
   15ae0:	andeq	r5, r1, r0, lsr r7
   15ae4:	andeq	r5, r1, r0, lsr r7
   15ae8:	andeq	r5, r1, r0, lsr r7
   15aec:	andeq	r5, r1, r0, lsr r7
   15af0:	andeq	r5, r1, r0, lsr r7
   15af4:	andeq	r5, r1, r0, lsr r7
   15af8:	andeq	r5, r1, r0, lsr r7
   15afc:	andeq	r5, r1, r0, lsr r7
   15b00:	andeq	r5, r1, r0, lsr r7
   15b04:	andeq	r5, r1, r0, lsr r7
   15b08:	andeq	r5, r1, ip, lsr #25
   15b0c:	andeq	r5, r1, r4, lsl r6
   15b10:	andeq	r5, r1, r4, lsl r6
   15b14:	muleq	r1, r0, ip
   15b18:	andeq	r5, r1, r4, lsl r6
   15b1c:	andeq	r5, r1, r4, lsl #25
   15b20:	andeq	r5, r1, r4, lsl r6
   15b24:	andeq	r5, r1, r0, ror r4
   15b28:	andeq	r5, r1, r4, lsl r6
   15b2c:	andeq	r5, r1, r4, lsl r6
   15b30:	andeq	r5, r1, r4, lsl r6
   15b34:	andeq	r5, r1, r4, lsl #25
   15b38:	andeq	r5, r1, r4, lsl #25
   15b3c:	andeq	r5, r1, r4, lsl #25
   15b40:	andeq	r5, r1, r4, lsl #25
   15b44:	andeq	r5, r1, r4, lsl #25
   15b48:	andeq	r5, r1, r4, lsl #25
   15b4c:	andeq	r5, r1, r4, lsl #25
   15b50:	andeq	r5, r1, r4, lsl #25
   15b54:	andeq	r5, r1, r4, lsl #25
   15b58:	andeq	r5, r1, r4, lsl #25
   15b5c:	andeq	r5, r1, r4, lsl #25
   15b60:	andeq	r5, r1, r4, lsl #25
   15b64:	andeq	r5, r1, r4, lsl #25
   15b68:	andeq	r5, r1, r4, lsl #25
   15b6c:	andeq	r5, r1, r4, lsl #25
   15b70:	andeq	r5, r1, r4, lsl #25
   15b74:	andeq	r5, r1, r4, lsl r6
   15b78:	andeq	r5, r1, r4, lsl r6
   15b7c:	andeq	r5, r1, r4, lsl r6
   15b80:	andeq	r5, r1, r4, lsl r6
   15b84:	andeq	r5, r1, r4, asr #8
   15b88:	andeq	r5, r1, r0, lsr r7
   15b8c:	andeq	r5, r1, r4, lsl #25
   15b90:	andeq	r5, r1, r4, lsl #25
   15b94:	andeq	r5, r1, r4, lsl #25
   15b98:	andeq	r5, r1, r4, lsl #25
   15b9c:	andeq	r5, r1, r4, lsl #25
   15ba0:	andeq	r5, r1, r4, lsl #25
   15ba4:	andeq	r5, r1, r4, lsl #25
   15ba8:	andeq	r5, r1, r4, lsl #25
   15bac:	andeq	r5, r1, r4, lsl #25
   15bb0:	andeq	r5, r1, r4, lsl #25
   15bb4:	andeq	r5, r1, r4, lsl #25
   15bb8:	andeq	r5, r1, r4, lsl #25
   15bbc:	andeq	r5, r1, r4, lsl #25
   15bc0:	andeq	r5, r1, r4, lsl #25
   15bc4:	andeq	r5, r1, r4, lsl #25
   15bc8:	andeq	r5, r1, r4, lsl #25
   15bcc:	andeq	r5, r1, r4, lsl #25
   15bd0:	andeq	r5, r1, r4, lsl #25
   15bd4:	andeq	r5, r1, r4, lsl #25
   15bd8:	andeq	r5, r1, r4, lsl #25
   15bdc:	andeq	r5, r1, r4, lsl #25
   15be0:	andeq	r5, r1, r4, lsl #25
   15be4:	andeq	r5, r1, r4, lsl #25
   15be8:	andeq	r5, r1, r4, lsl #25
   15bec:	andeq	r5, r1, r4, lsl #25
   15bf0:	andeq	r5, r1, r4, lsl #25
   15bf4:	andeq	r5, r1, r4, lsl r6
   15bf8:	andeq	r5, r1, ip, ror #7
   15bfc:	andeq	r5, r1, r4, lsl #25
   15c00:	andeq	r5, r1, r4, lsl r6
   15c04:	andeq	r5, r1, r4, lsl #25
   15c08:	andeq	r5, r1, r4, lsl r6
   15c0c:	andeq	r5, r1, r4, lsl #25
   15c10:	andeq	r5, r1, r4, lsl #25
   15c14:	andeq	r5, r1, r4, lsl #25
   15c18:	andeq	r5, r1, r4, lsl #25
   15c1c:	andeq	r5, r1, r4, lsl #25
   15c20:	andeq	r5, r1, r4, lsl #25
   15c24:	andeq	r5, r1, r4, lsl #25
   15c28:	andeq	r5, r1, r4, lsl #25
   15c2c:	andeq	r5, r1, r4, lsl #25
   15c30:	andeq	r5, r1, r4, lsl #25
   15c34:	andeq	r5, r1, r4, lsl #25
   15c38:	andeq	r5, r1, r4, lsl #25
   15c3c:	andeq	r5, r1, r4, lsl #25
   15c40:	andeq	r5, r1, r4, lsl #25
   15c44:	andeq	r5, r1, r4, lsl #25
   15c48:	andeq	r5, r1, r4, lsl #25
   15c4c:	andeq	r5, r1, r4, lsl #25
   15c50:	andeq	r5, r1, r4, lsl #25
   15c54:	andeq	r5, r1, r4, lsl #25
   15c58:	andeq	r5, r1, r4, lsl #25
   15c5c:	andeq	r5, r1, r4, lsl #25
   15c60:	andeq	r5, r1, r4, lsl #25
   15c64:	andeq	r5, r1, r4, lsl #25
   15c68:	andeq	r5, r1, r4, lsl #25
   15c6c:	andeq	r5, r1, r4, lsl #25
   15c70:	andeq	r5, r1, r4, lsl #25
   15c74:	andeq	r5, r1, r0, lsl r2
   15c78:	andeq	r5, r1, r4, lsl r6
   15c7c:	andeq	r5, r1, r0, lsl r2
   15c80:	muleq	r1, r0, ip
   15c84:	mov	r6, r7
   15c88:	mov	r7, #0
   15c8c:	b	1543c <__assert_fail@plt+0x3f84>
   15c90:	cmp	r9, #0
   15c94:	mov	r2, #0
   15c98:	beq	15700 <__assert_fail@plt+0x4248>
   15c9c:	mov	r6, #0
   15ca0:	mov	r7, r2
   15ca4:	mov	r3, r6
   15ca8:	b	1525c <__assert_fail@plt+0x3da4>
   15cac:	mov	r2, #0
   15cb0:	b	15714 <__assert_fail@plt+0x425c>
   15cb4:	mov	r7, #0
   15cb8:	mov	r3, #118	; 0x76
   15cbc:	b	15420 <__assert_fail@plt+0x3f68>
   15cc0:	mov	r7, #0
   15cc4:	mov	r3, #116	; 0x74
   15cc8:	b	15550 <__assert_fail@plt+0x4098>
   15ccc:	ldr	r3, [sp, #44]	; 0x2c
   15cd0:	b	15284 <__assert_fail@plt+0x3dcc>
   15cd4:	ldr	r3, [sp, #44]	; 0x2c
   15cd8:	cmp	r3, #0
   15cdc:	bne	1614c <__assert_fail@plt+0x4c94>
   15ce0:	add	r9, r9, #1
   15ce4:	mov	r6, #0
   15ce8:	ldr	r3, [sp, #48]	; 0x30
   15cec:	mov	r5, #92	; 0x5c
   15cf0:	b	15510 <__assert_fail@plt+0x4058>
   15cf4:	ldr	r3, [sp, #32]
   15cf8:	ldrb	r2, [r3, #1]
   15cfc:	adds	r2, r2, #0
   15d00:	movne	r2, #1
   15d04:	b	1522c <__assert_fail@plt+0x3d74>
   15d08:	ldr	r3, [sp, #156]	; 0x9c
   15d0c:	ands	r3, r3, #4
   15d10:	beq	15d38 <__assert_fail@plt+0x4880>
   15d14:	ldr	r2, [sp, #28]
   15d18:	add	r3, r9, #2
   15d1c:	cmp	r3, r2
   15d20:	bcs	15d34 <__assert_fail@plt+0x487c>
   15d24:	ldr	r2, [sp, #52]	; 0x34
   15d28:	ldrb	r5, [r2, #1]
   15d2c:	cmp	r5, #63	; 0x3f
   15d30:	beq	161b0 <__assert_fail@plt+0x4cf8>
   15d34:	mov	r3, #0
   15d38:	mov	r5, #63	; 0x3f
   15d3c:	mov	r6, r3
   15d40:	b	1524c <__assert_fail@plt+0x3d94>
   15d44:	ldr	r3, [sp, #44]	; 0x2c
   15d48:	cmp	r3, #0
   15d4c:	bne	1614c <__assert_fail@plt+0x4c94>
   15d50:	mov	r6, r3
   15d54:	mov	r5, #63	; 0x3f
   15d58:	b	15284 <__assert_fail@plt+0x3dcc>
   15d5c:	ldr	r1, [sp, #28]
   15d60:	mov	r2, #0
   15d64:	mov	r3, #0
   15d68:	strd	r2, [sp, #104]	; 0x68
   15d6c:	cmn	r1, #1
   15d70:	bne	15d80 <__assert_fail@plt+0x48c8>
   15d74:	ldr	r0, [sp, #32]
   15d78:	bl	11314 <strlen@plt>
   15d7c:	str	r0, [sp, #28]
   15d80:	str	r8, [sp, #76]	; 0x4c
   15d84:	mov	r3, #0
   15d88:	str	sl, [sp, #80]	; 0x50
   15d8c:	ldr	sl, [sp, #32]
   15d90:	str	r5, [sp, #84]	; 0x54
   15d94:	mov	r5, r3
   15d98:	ldr	r8, [sp, #44]	; 0x2c
   15d9c:	str	r7, [sp, #88]	; 0x58
   15da0:	str	r4, [sp, #92]	; 0x5c
   15da4:	ldr	r2, [sp, #28]
   15da8:	add	r4, r9, r5
   15dac:	add	r3, sp, #104	; 0x68
   15db0:	add	r7, sl, r4
   15db4:	add	r0, sp, #100	; 0x64
   15db8:	mov	r1, r7
   15dbc:	sub	r2, r2, r4
   15dc0:	bl	1944c <__assert_fail@plt+0x7f94>
   15dc4:	subs	r1, r0, #0
   15dc8:	beq	15e14 <__assert_fail@plt+0x495c>
   15dcc:	cmn	r1, #1
   15dd0:	beq	1618c <__assert_fail@plt+0x4cd4>
   15dd4:	cmn	r1, #2
   15dd8:	beq	162ac <__assert_fail@plt+0x4df4>
   15ddc:	cmp	fp, #2
   15de0:	movne	r3, #0
   15de4:	andeq	r3, r8, #1
   15de8:	cmp	r3, #0
   15dec:	bne	15f78 <__assert_fail@plt+0x4ac0>
   15df0:	ldr	r0, [sp, #100]	; 0x64
   15df4:	add	r5, r5, r1
   15df8:	bl	11224 <iswprint@plt>
   15dfc:	cmp	r0, #0
   15e00:	add	r0, sp, #104	; 0x68
   15e04:	moveq	r6, #0
   15e08:	bl	111ac <mbsinit@plt>
   15e0c:	cmp	r0, #0
   15e10:	beq	15da4 <__assert_fail@plt+0x48ec>
   15e14:	ldr	r3, [sp, #40]	; 0x28
   15e18:	mov	ip, r5
   15e1c:	eor	r2, r6, #1
   15e20:	ldr	r8, [sp, #76]	; 0x4c
   15e24:	ldr	sl, [sp, #80]	; 0x50
   15e28:	and	r2, r2, r3
   15e2c:	ldr	r5, [sp, #84]	; 0x54
   15e30:	ldr	r7, [sp, #88]	; 0x58
   15e34:	ldr	r4, [sp, #92]	; 0x5c
   15e38:	cmp	ip, #1
   15e3c:	bls	15778 <__assert_fail@plt+0x42c0>
   15e40:	add	r1, ip, r9
   15e44:	mov	r0, #39	; 0x27
   15e48:	ldr	lr, [sp, #52]	; 0x34
   15e4c:	mov	ip, #0
   15e50:	str	r6, [sp, #52]	; 0x34
   15e54:	ldr	r6, [sp, #48]	; 0x30
   15e58:	b	15f14 <__assert_fail@plt+0x4a5c>
   15e5c:	ldr	ip, [sp, #44]	; 0x2c
   15e60:	sub	r3, fp, #2
   15e64:	clz	r3, r3
   15e68:	lsr	r3, r3, #5
   15e6c:	cmp	ip, #0
   15e70:	bne	16084 <__assert_fail@plt+0x4bcc>
   15e74:	eor	ip, r6, #1
   15e78:	ands	r3, r3, ip
   15e7c:	beq	15eac <__assert_fail@plt+0x49f4>
   15e80:	cmp	sl, r4
   15e84:	add	ip, r4, #1
   15e88:	strbhi	r0, [r8, r4]
   15e8c:	cmp	sl, ip
   15e90:	movhi	r6, #36	; 0x24
   15e94:	strbhi	r6, [r8, ip]
   15e98:	add	ip, r4, #2
   15e9c:	mov	r6, r3
   15ea0:	cmp	sl, ip
   15ea4:	add	r4, r4, #3
   15ea8:	strbhi	r0, [r8, ip]
   15eac:	cmp	sl, r4
   15eb0:	movhi	r3, #92	; 0x5c
   15eb4:	strbhi	r3, [r8, r4]
   15eb8:	add	r3, r4, #1
   15ebc:	cmp	sl, r3
   15ec0:	bls	15ed0 <__assert_fail@plt+0x4a18>
   15ec4:	lsr	ip, r5, #6
   15ec8:	add	ip, ip, #48	; 0x30
   15ecc:	strb	ip, [r8, r3]
   15ed0:	add	r3, r4, #2
   15ed4:	cmp	sl, r3
   15ed8:	bls	15ee8 <__assert_fail@plt+0x4a30>
   15edc:	ubfx	ip, r5, #3, #3
   15ee0:	add	ip, ip, #48	; 0x30
   15ee4:	strb	ip, [r8, r3]
   15ee8:	add	r9, r9, #1
   15eec:	and	r5, r5, #7
   15ef0:	cmp	r9, r1
   15ef4:	add	r5, r5, #48	; 0x30
   15ef8:	add	r4, r4, #3
   15efc:	bcs	160b0 <__assert_fail@plt+0x4bf8>
   15f00:	mov	ip, r2
   15f04:	cmp	sl, r4
   15f08:	strbhi	r5, [r8, r4]
   15f0c:	add	r4, r4, #1
   15f10:	ldrb	r5, [lr, #1]!
   15f14:	cmp	r2, #0
   15f18:	bne	15e5c <__assert_fail@plt+0x49a4>
   15f1c:	eor	r3, ip, #1
   15f20:	cmp	r7, #0
   15f24:	and	r3, r3, r6
   15f28:	uxtb	r3, r3
   15f2c:	beq	15f40 <__assert_fail@plt+0x4a88>
   15f30:	cmp	sl, r4
   15f34:	movhi	r7, #92	; 0x5c
   15f38:	strbhi	r7, [r8, r4]
   15f3c:	add	r4, r4, #1
   15f40:	add	r9, r9, #1
   15f44:	cmp	r9, r1
   15f48:	bcs	16098 <__assert_fail@plt+0x4be0>
   15f4c:	cmp	r3, #0
   15f50:	beq	160d0 <__assert_fail@plt+0x4c18>
   15f54:	cmp	sl, r4
   15f58:	add	r3, r4, #1
   15f5c:	mov	r7, #0
   15f60:	strbhi	r0, [r8, r4]
   15f64:	cmp	sl, r3
   15f68:	add	r4, r4, #2
   15f6c:	mov	r6, r7
   15f70:	strbhi	r0, [r8, r3]
   15f74:	b	15f04 <__assert_fail@plt+0x4a4c>
   15f78:	cmp	r1, #1
   15f7c:	beq	15df0 <__assert_fail@plt+0x4938>
   15f80:	add	r2, r4, #1
   15f84:	add	r3, sl, r1
   15f88:	add	r2, sl, r2
   15f8c:	add	r4, r3, r4
   15f90:	ldrb	r3, [r2], #1
   15f94:	sub	r3, r3, #91	; 0x5b
   15f98:	cmp	r3, #33	; 0x21
   15f9c:	ldrls	pc, [pc, r3, lsl #2]
   15fa0:	b	1602c <__assert_fail@plt+0x4b74>
   15fa4:	andeq	r6, r1, r8, lsr r0
   15fa8:	andeq	r6, r1, r8, lsr r0
   15fac:	andeq	r6, r1, ip, lsr #32
   15fb0:	andeq	r6, r1, r8, lsr r0
   15fb4:	andeq	r6, r1, ip, lsr #32
   15fb8:	andeq	r6, r1, r8, lsr r0
   15fbc:	andeq	r6, r1, ip, lsr #32
   15fc0:	andeq	r6, r1, ip, lsr #32
   15fc4:	andeq	r6, r1, ip, lsr #32
   15fc8:	andeq	r6, r1, ip, lsr #32
   15fcc:	andeq	r6, r1, ip, lsr #32
   15fd0:	andeq	r6, r1, ip, lsr #32
   15fd4:	andeq	r6, r1, ip, lsr #32
   15fd8:	andeq	r6, r1, ip, lsr #32
   15fdc:	andeq	r6, r1, ip, lsr #32
   15fe0:	andeq	r6, r1, ip, lsr #32
   15fe4:	andeq	r6, r1, ip, lsr #32
   15fe8:	andeq	r6, r1, ip, lsr #32
   15fec:	andeq	r6, r1, ip, lsr #32
   15ff0:	andeq	r6, r1, ip, lsr #32
   15ff4:	andeq	r6, r1, ip, lsr #32
   15ff8:	andeq	r6, r1, ip, lsr #32
   15ffc:	andeq	r6, r1, ip, lsr #32
   16000:	andeq	r6, r1, ip, lsr #32
   16004:	andeq	r6, r1, ip, lsr #32
   16008:	andeq	r6, r1, ip, lsr #32
   1600c:	andeq	r6, r1, ip, lsr #32
   16010:	andeq	r6, r1, ip, lsr #32
   16014:	andeq	r6, r1, ip, lsr #32
   16018:	andeq	r6, r1, ip, lsr #32
   1601c:	andeq	r6, r1, ip, lsr #32
   16020:	andeq	r6, r1, ip, lsr #32
   16024:	andeq	r6, r1, ip, lsr #32
   16028:	andeq	r6, r1, r8, lsr r0
   1602c:	cmp	r4, r2
   16030:	bne	15f90 <__assert_fail@plt+0x4ad8>
   16034:	b	15df0 <__assert_fail@plt+0x4938>
   16038:	mov	r8, #2
   1603c:	ldr	fp, [sp, #76]	; 0x4c
   16040:	ldr	sl, [sp, #80]	; 0x50
   16044:	b	15570 <__assert_fail@plt+0x40b8>
   16048:	ldr	r2, [sp, #40]	; 0x28
   1604c:	str	fp, [sp, #152]	; 0x98
   16050:	mov	fp, r8
   16054:	ldr	r8, [sp, #152]	; 0x98
   16058:	and	r2, r2, r3
   1605c:	str	r2, [sp, #40]	; 0x28
   16060:	b	15570 <__assert_fail@plt+0x40b8>
   16064:	cmp	sl, r4
   16068:	movls	r0, r4
   1606c:	bls	156a0 <__assert_fail@plt+0x41e8>
   16070:	ldr	r3, [sp, #48]	; 0x30
   16074:	b	15690 <__assert_fail@plt+0x41d8>
   16078:	str	sl, [sp, #72]	; 0x48
   1607c:	ldr	sl, [sp, #44]	; 0x2c
   16080:	b	154e0 <__assert_fail@plt+0x4028>
   16084:	str	r3, [sp, #40]	; 0x28
   16088:	str	fp, [sp, #152]	; 0x98
   1608c:	mov	fp, r8
   16090:	ldr	r8, [sp, #152]	; 0x98
   16094:	b	15570 <__assert_fail@plt+0x40b8>
   16098:	str	r6, [sp, #48]	; 0x30
   1609c:	ldr	r6, [sp, #52]	; 0x34
   160a0:	b	15510 <__assert_fail@plt+0x4058>
   160a4:	mov	r6, #0
   160a8:	ldr	r2, [sp, #40]	; 0x28
   160ac:	b	15e40 <__assert_fail@plt+0x4988>
   160b0:	str	r6, [sp, #48]	; 0x30
   160b4:	ldr	r6, [sp, #52]	; 0x34
   160b8:	b	152fc <__assert_fail@plt+0x3e44>
   160bc:	add	r4, r4, #4
   160c0:	mov	r6, #0
   160c4:	str	r3, [sp, #48]	; 0x30
   160c8:	mov	r5, #48	; 0x30
   160cc:	b	15284 <__assert_fail@plt+0x3dcc>
   160d0:	mov	r7, r3
   160d4:	b	15f04 <__assert_fail@plt+0x4a4c>
   160d8:	mov	r3, #1
   160dc:	movw	r2, #44212	; 0xacb4
   160e0:	movt	r2, #1
   160e4:	mov	r4, r3
   160e8:	str	r3, [sp, #36]	; 0x24
   160ec:	str	r3, [sp, #40]	; 0x28
   160f0:	str	sl, [sp, #44]	; 0x2c
   160f4:	str	sl, [sp, #48]	; 0x30
   160f8:	str	r3, [sp, #56]	; 0x38
   160fc:	str	r2, [sp, #60]	; 0x3c
   16100:	str	sl, [sp, #68]	; 0x44
   16104:	str	sl, [sp, #72]	; 0x48
   16108:	b	14dac <__assert_fail@plt+0x38f4>
   1610c:	mov	r3, r6
   16110:	mov	r5, #48	; 0x30
   16114:	mov	r6, #0
   16118:	b	15284 <__assert_fail@plt+0x3dcc>
   1611c:	mov	r5, r3
   16120:	b	155fc <__assert_fail@plt+0x4144>
   16124:	cmp	sl, r4
   16128:	mov	r5, #48	; 0x30
   1612c:	movhi	r3, #48	; 0x30
   16130:	strbhi	r3, [r8, r4]
   16134:	add	r3, r0, #2
   16138:	add	r4, r0, #3
   1613c:	cmp	sl, r3
   16140:	movhi	r1, #48	; 0x30
   16144:	strbhi	r1, [r8, r3]
   16148:	b	156d4 <__assert_fail@plt+0x421c>
   1614c:	str	fp, [sp, #152]	; 0x98
   16150:	mov	fp, r8
   16154:	ldr	r8, [sp, #152]	; 0x98
   16158:	b	15570 <__assert_fail@plt+0x40b8>
   1615c:	ldr	r3, [sp, #164]	; 0xa4
   16160:	ldrb	r3, [r3]
   16164:	cmp	r3, #0
   16168:	beq	14d7c <__assert_fail@plt+0x38c4>
   1616c:	ldr	r2, [sp, #164]	; 0xa4
   16170:	cmp	sl, r4
   16174:	strbhi	r3, [fp, r4]
   16178:	add	r4, r4, #1
   1617c:	ldrb	r3, [r2, #1]!
   16180:	cmp	r3, #0
   16184:	bne	16170 <__assert_fail@plt+0x4cb8>
   16188:	b	14d7c <__assert_fail@plt+0x38c4>
   1618c:	mov	ip, r5
   16190:	mov	r6, #0
   16194:	ldr	r2, [sp, #40]	; 0x28
   16198:	ldr	r8, [sp, #76]	; 0x4c
   1619c:	ldr	sl, [sp, #80]	; 0x50
   161a0:	ldr	r5, [sp, #84]	; 0x54
   161a4:	ldr	r7, [sp, #88]	; 0x58
   161a8:	ldr	r4, [sp, #92]	; 0x5c
   161ac:	b	15e38 <__assert_fail@plt+0x4980>
   161b0:	ldr	r2, [sp, #32]
   161b4:	ldrb	r1, [r2, r3]
   161b8:	sub	r2, r1, #33	; 0x21
   161bc:	cmp	r2, #29
   161c0:	ldrls	pc, [pc, r2, lsl #2]
   161c4:	b	162a0 <__assert_fail@plt+0x4de8>
   161c8:	andeq	r6, r1, r0, asr #4
   161cc:	andeq	r6, r1, r0, lsr #5
   161d0:	andeq	r6, r1, r0, lsr #5
   161d4:	andeq	r6, r1, r0, lsr #5
   161d8:	andeq	r6, r1, r0, lsr #5
   161dc:	andeq	r6, r1, r0, lsr #5
   161e0:	andeq	r6, r1, r0, asr #4
   161e4:	andeq	r6, r1, r0, asr #4
   161e8:	andeq	r6, r1, r0, asr #4
   161ec:	andeq	r6, r1, r0, lsr #5
   161f0:	andeq	r6, r1, r0, lsr #5
   161f4:	andeq	r6, r1, r0, lsr #5
   161f8:	andeq	r6, r1, r0, asr #4
   161fc:	andeq	r6, r1, r0, lsr #5
   16200:	andeq	r6, r1, r0, asr #4
   16204:	andeq	r6, r1, r0, lsr #5
   16208:	andeq	r6, r1, r0, lsr #5
   1620c:	andeq	r6, r1, r0, lsr #5
   16210:	andeq	r6, r1, r0, lsr #5
   16214:	andeq	r6, r1, r0, lsr #5
   16218:	andeq	r6, r1, r0, lsr #5
   1621c:	andeq	r6, r1, r0, lsr #5
   16220:	andeq	r6, r1, r0, lsr #5
   16224:	andeq	r6, r1, r0, lsr #5
   16228:	andeq	r6, r1, r0, lsr #5
   1622c:	andeq	r6, r1, r0, lsr #5
   16230:	andeq	r6, r1, r0, lsr #5
   16234:	andeq	r6, r1, r0, asr #4
   16238:	andeq	r6, r1, r0, asr #4
   1623c:	andeq	r6, r1, r0, asr #4
   16240:	ldr	r2, [sp, #44]	; 0x2c
   16244:	cmp	r2, #0
   16248:	bne	163a4 <__assert_fail@plt+0x4eec>
   1624c:	cmp	sl, r4
   16250:	mov	r5, r1
   16254:	movhi	r2, #63	; 0x3f
   16258:	mov	r9, r3
   1625c:	strbhi	r2, [r8, r4]
   16260:	add	r2, r4, #1
   16264:	cmp	sl, r2
   16268:	movhi	r0, #34	; 0x22
   1626c:	strbhi	r0, [r8, r2]
   16270:	add	r2, r4, #2
   16274:	cmp	sl, r2
   16278:	movhi	r0, #34	; 0x22
   1627c:	strbhi	r0, [r8, r2]
   16280:	add	r2, r4, #3
   16284:	add	r4, r4, #4
   16288:	cmp	sl, r2
   1628c:	movhi	r0, #63	; 0x3f
   16290:	strbhi	r0, [r8, r2]
   16294:	mov	r2, #0
   16298:	mov	r6, r2
   1629c:	b	156d4 <__assert_fail@plt+0x421c>
   162a0:	mov	r3, #0
   162a4:	mov	r6, r3
   162a8:	b	1524c <__assert_fail@plt+0x3d94>
   162ac:	ldr	r0, [sp, #28]
   162b0:	mov	r1, r4
   162b4:	mov	r2, r7
   162b8:	mov	r3, r5
   162bc:	mov	ip, r5
   162c0:	ldr	r8, [sp, #76]	; 0x4c
   162c4:	ldr	sl, [sp, #80]	; 0x50
   162c8:	cmp	r1, r0
   162cc:	ldr	r5, [sp, #84]	; 0x54
   162d0:	ldr	r7, [sp, #88]	; 0x58
   162d4:	ldr	r4, [sp, #92]	; 0x5c
   162d8:	bcs	1630c <__assert_fail@plt+0x4e54>
   162dc:	ldrb	r6, [r2]
   162e0:	cmp	r6, #0
   162e4:	bne	162f8 <__assert_fail@plt+0x4e40>
   162e8:	b	1642c <__assert_fail@plt+0x4f74>
   162ec:	ldrb	r6, [r2, #1]!
   162f0:	cmp	r6, #0
   162f4:	beq	163b4 <__assert_fail@plt+0x4efc>
   162f8:	add	r3, r3, #1
   162fc:	add	r1, r9, r3
   16300:	cmp	r1, r0
   16304:	bcc	162ec <__assert_fail@plt+0x4e34>
   16308:	mov	ip, r3
   1630c:	mov	r6, #0
   16310:	ldr	r2, [sp, #40]	; 0x28
   16314:	b	15e38 <__assert_fail@plt+0x4980>
   16318:	mov	r3, #1
   1631c:	mov	r2, #0
   16320:	mov	r4, r2
   16324:	str	r3, [sp, #36]	; 0x24
   16328:	str	r3, [sp, #40]	; 0x28
   1632c:	str	r3, [sp, #44]	; 0x2c
   16330:	str	r2, [sp, #48]	; 0x30
   16334:	str	r3, [sp, #56]	; 0x38
   16338:	movw	r3, #44212	; 0xacb4
   1633c:	movt	r3, #1
   16340:	str	r3, [sp, #60]	; 0x3c
   16344:	str	r2, [sp, #68]	; 0x44
   16348:	str	r2, [sp, #72]	; 0x48
   1634c:	b	14dac <__assert_fail@plt+0x38f4>
   16350:	mov	r2, r3
   16354:	ldr	r3, [sp, #60]	; 0x3c
   16358:	cmp	r3, #0
   1635c:	moveq	r2, #0
   16360:	andne	r2, r2, #1
   16364:	cmp	r2, #0
   16368:	beq	16394 <__assert_fail@plt+0x4edc>
   1636c:	mov	r2, r3
   16370:	ldrb	r3, [r3]
   16374:	cmp	r3, #0
   16378:	beq	16394 <__assert_fail@plt+0x4edc>
   1637c:	cmp	sl, r4
   16380:	strbhi	r3, [fp, r4]
   16384:	add	r4, r4, #1
   16388:	ldrb	r3, [r2, #1]!
   1638c:	cmp	r3, #0
   16390:	bne	1637c <__assert_fail@plt+0x4ec4>
   16394:	cmp	sl, r4
   16398:	movhi	r3, #0
   1639c:	strbhi	r3, [fp, r4]
   163a0:	b	155b4 <__assert_fail@plt+0x40fc>
   163a4:	str	fp, [sp, #152]	; 0x98
   163a8:	mov	fp, r8
   163ac:	ldr	r8, [sp, #152]	; 0x98
   163b0:	b	1557c <__assert_fail@plt+0x40c4>
   163b4:	mov	ip, r3
   163b8:	ldr	r2, [sp, #40]	; 0x28
   163bc:	b	15e38 <__assert_fail@plt+0x4980>
   163c0:	str	fp, [sp, #152]	; 0x98
   163c4:	mov	fp, r8
   163c8:	ldr	r8, [sp, #152]	; 0x98
   163cc:	sub	r3, r8, #2
   163d0:	clz	r3, r3
   163d4:	lsr	r3, r3, #5
   163d8:	str	r3, [sp, #40]	; 0x28
   163dc:	b	15570 <__assert_fail@plt+0x40b8>
   163e0:	mov	ip, #5
   163e4:	ldr	r3, [sp, #28]
   163e8:	str	ip, [sp]
   163ec:	ldr	r2, [sp, #156]	; 0x9c
   163f0:	ldr	ip, [sp, #164]	; 0xa4
   163f4:	ldr	r0, [sp, #160]	; 0xa0
   163f8:	str	r2, [sp, #4]
   163fc:	ldr	r2, [sp, #32]
   16400:	ldr	r1, [sp, #72]	; 0x48
   16404:	str	ip, [sp, #12]
   16408:	ldr	ip, [sp, #168]	; 0xa8
   1640c:	str	r0, [sp, #8]
   16410:	mov	r0, fp
   16414:	str	ip, [sp, #16]
   16418:	bl	14cc4 <__assert_fail@plt+0x380c>
   1641c:	mov	r4, r0
   16420:	b	155b4 <__assert_fail@plt+0x40fc>
   16424:	mov	r8, #2
   16428:	b	15570 <__assert_fail@plt+0x40b8>
   1642c:	ldr	r2, [sp, #40]	; 0x28
   16430:	b	15e38 <__assert_fail@plt+0x4980>
   16434:	mov	r3, #0
   16438:	mov	r2, #1
   1643c:	mov	r4, r3
   16440:	strd	r2, [sp, #36]	; 0x24
   16444:	strd	r2, [sp, #44]	; 0x2c
   16448:	str	r2, [sp, #56]	; 0x38
   1644c:	str	r3, [sp, #68]	; 0x44
   16450:	str	r3, [sp, #72]	; 0x48
   16454:	movw	r3, #44232	; 0xacc8
   16458:	movt	r3, #1
   1645c:	str	r3, [sp, #60]	; 0x3c
   16460:	b	14dac <__assert_fail@plt+0x38f4>
   16464:	mov	r3, #0
   16468:	mov	r1, #1
   1646c:	mov	r2, r3
   16470:	str	r1, [sp, #36]	; 0x24
   16474:	str	r3, [sp, #48]	; 0x30
   16478:	str	sl, [sp, #72]	; 0x48
   1647c:	b	153b4 <__assert_fail@plt+0x3efc>
   16480:	bl	114a0 <abort@plt>
   16484:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16488:	mov	r4, r0
   1648c:	mov	r5, r3
   16490:	strd	r6, [sp, #8]
   16494:	movw	r7, #49500	; 0xc15c
   16498:	movt	r7, #2
   1649c:	strd	r8, [sp, #16]
   164a0:	strd	sl, [sp, #24]
   164a4:	mov	sl, r1
   164a8:	mov	fp, r2
   164ac:	str	lr, [sp, #32]
   164b0:	sub	sp, sp, #60	; 0x3c
   164b4:	bl	11338 <__errno_location@plt>
   164b8:	mov	r8, r0
   164bc:	cmn	r4, #-2147483647	; 0x80000001
   164c0:	ldr	r6, [r7]
   164c4:	movne	r0, #0
   164c8:	moveq	r0, #1
   164cc:	ldr	r3, [r8]
   164d0:	orrs	r0, r0, r4, lsr #31
   164d4:	str	r3, [sp, #28]
   164d8:	bne	16668 <__assert_fail@plt+0x51b0>
   164dc:	ldr	r3, [r7, #4]
   164e0:	cmp	r3, r4
   164e4:	bgt	16544 <__assert_fail@plt+0x508c>
   164e8:	add	r1, r7, #8
   164ec:	sub	r2, r4, r3
   164f0:	str	r3, [sp, #52]	; 0x34
   164f4:	cmp	r6, r1
   164f8:	add	r2, r2, #1
   164fc:	beq	16640 <__assert_fail@plt+0x5188>
   16500:	mov	r1, #8
   16504:	mov	r0, r6
   16508:	mvn	r3, #-2147483648	; 0x80000000
   1650c:	str	r1, [sp]
   16510:	add	r1, sp, #52	; 0x34
   16514:	bl	18228 <__assert_fail@plt+0x6d70>
   16518:	mov	r6, r0
   1651c:	str	r0, [r7]
   16520:	ldr	r0, [r7, #4]
   16524:	mov	r1, #0
   16528:	ldr	r2, [sp, #52]	; 0x34
   1652c:	sub	r2, r2, r0
   16530:	add	r0, r6, r0, lsl #3
   16534:	lsl	r2, r2, #3
   16538:	bl	11368 <memset@plt>
   1653c:	ldr	r3, [sp, #52]	; 0x34
   16540:	str	r3, [r7, #4]
   16544:	ldr	r1, [r5, #4]
   16548:	add	r0, r6, r4, lsl #3
   1654c:	add	ip, r5, #8
   16550:	mov	r3, fp
   16554:	mov	r2, sl
   16558:	ldr	r7, [r0, #4]
   1655c:	str	r0, [sp, #36]	; 0x24
   16560:	str	ip, [sp, #40]	; 0x28
   16564:	orr	r0, r1, #1
   16568:	ldr	r9, [r6, r4, lsl #3]
   1656c:	str	ip, [sp, #8]
   16570:	ldr	lr, [r5, #44]	; 0x2c
   16574:	str	r0, [sp, #4]
   16578:	ldr	ip, [r5]
   1657c:	mov	r1, r9
   16580:	str	ip, [sp, #32]
   16584:	ldr	ip, [r5, #40]	; 0x28
   16588:	str	ip, [sp, #12]
   1658c:	ldr	ip, [sp, #32]
   16590:	str	lr, [sp, #16]
   16594:	str	r0, [sp, #44]	; 0x2c
   16598:	mov	r0, r7
   1659c:	str	ip, [sp]
   165a0:	bl	14cc4 <__assert_fail@plt+0x380c>
   165a4:	cmp	r9, r0
   165a8:	bhi	16618 <__assert_fail@plt+0x5160>
   165ac:	add	r9, r0, #1
   165b0:	movw	r3, #49620	; 0xc1d4
   165b4:	movt	r3, #2
   165b8:	cmp	r7, r3
   165bc:	str	r9, [r6, r4, lsl #3]
   165c0:	beq	165cc <__assert_fail@plt+0x5114>
   165c4:	mov	r0, r7
   165c8:	bl	13d7c <__assert_fail@plt+0x28c4>
   165cc:	mov	r0, r9
   165d0:	bl	18078 <__assert_fail@plt+0x6bc0>
   165d4:	ldr	ip, [r5]
   165d8:	mov	r3, fp
   165dc:	mov	r2, sl
   165e0:	mov	r1, r9
   165e4:	mov	r7, r0
   165e8:	ldr	lr, [sp, #36]	; 0x24
   165ec:	ldr	r4, [r5, #40]	; 0x28
   165f0:	str	r0, [lr, #4]
   165f4:	ldr	lr, [r5, #44]	; 0x2c
   165f8:	str	ip, [sp]
   165fc:	ldr	ip, [sp, #44]	; 0x2c
   16600:	str	ip, [sp, #4]
   16604:	ldr	ip, [sp, #40]	; 0x28
   16608:	str	r4, [sp, #12]
   1660c:	str	lr, [sp, #16]
   16610:	str	ip, [sp, #8]
   16614:	bl	14cc4 <__assert_fail@plt+0x380c>
   16618:	ldr	r3, [sp, #28]
   1661c:	mov	r0, r7
   16620:	str	r3, [r8]
   16624:	add	sp, sp, #60	; 0x3c
   16628:	ldrd	r4, [sp]
   1662c:	ldrd	r6, [sp, #8]
   16630:	ldrd	r8, [sp, #16]
   16634:	ldrd	sl, [sp, #24]
   16638:	add	sp, sp, #32
   1663c:	pop	{pc}		; (ldr pc, [sp], #4)
   16640:	mov	r1, #8
   16644:	mvn	r3, #-2147483648	; 0x80000000
   16648:	str	r1, [sp]
   1664c:	add	r1, sp, #52	; 0x34
   16650:	bl	18228 <__assert_fail@plt+0x6d70>
   16654:	ldrd	r2, [r7, #8]
   16658:	mov	r6, r0
   1665c:	str	r0, [r7]
   16660:	strd	r2, [r0]
   16664:	b	16520 <__assert_fail@plt+0x5068>
   16668:	bl	114a0 <abort@plt>
   1666c:	strd	r4, [sp, #-16]!
   16670:	mov	r5, r0
   16674:	str	r6, [sp, #8]
   16678:	str	lr, [sp, #12]
   1667c:	bl	11338 <__errno_location@plt>
   16680:	mov	r4, r0
   16684:	cmp	r5, #0
   16688:	ldr	r0, [pc, #32]	; 166b0 <__assert_fail@plt+0x51f8>
   1668c:	mov	r1, #48	; 0x30
   16690:	movne	r0, r5
   16694:	ldr	r6, [r4]
   16698:	bl	183a0 <__assert_fail@plt+0x6ee8>
   1669c:	str	r6, [r4]
   166a0:	ldrd	r4, [sp]
   166a4:	ldr	r6, [sp, #8]
   166a8:	add	sp, sp, #12
   166ac:	pop	{pc}		; (ldr pc, [sp], #4)
   166b0:	ldrdeq	ip, [r2], -r4
   166b4:	ldr	r3, [pc, #12]	; 166c8 <__assert_fail@plt+0x5210>
   166b8:	cmp	r0, #0
   166bc:	moveq	r0, r3
   166c0:	ldr	r0, [r0]
   166c4:	bx	lr
   166c8:	ldrdeq	ip, [r2], -r4
   166cc:	ldr	r3, [pc, #12]	; 166e0 <__assert_fail@plt+0x5228>
   166d0:	cmp	r0, #0
   166d4:	moveq	r0, r3
   166d8:	str	r1, [r0]
   166dc:	bx	lr
   166e0:	ldrdeq	ip, [r2], -r4
   166e4:	ldr	r3, [pc, #52]	; 16720 <__assert_fail@plt+0x5268>
   166e8:	cmp	r0, #0
   166ec:	push	{lr}		; (str lr, [sp, #-4]!)
   166f0:	lsr	lr, r1, #5
   166f4:	and	r1, r1, #31
   166f8:	moveq	r0, r3
   166fc:	add	r3, r0, #8
   16700:	ldr	ip, [r3, lr, lsl #2]
   16704:	lsr	r0, ip, r1
   16708:	eor	r2, r2, r0
   1670c:	and	r0, r0, #1
   16710:	and	r2, r2, #1
   16714:	eor	r1, ip, r2, lsl r1
   16718:	str	r1, [r3, lr, lsl #2]
   1671c:	pop	{pc}		; (ldr pc, [sp], #4)
   16720:	ldrdeq	ip, [r2], -r4
   16724:	ldr	r3, [pc, #16]	; 1673c <__assert_fail@plt+0x5284>
   16728:	cmp	r0, #0
   1672c:	movne	r3, r0
   16730:	ldr	r0, [r3, #4]
   16734:	str	r1, [r3, #4]
   16738:	bx	lr
   1673c:	ldrdeq	ip, [r2], -r4
   16740:	ldr	r3, [pc, #48]	; 16778 <__assert_fail@plt+0x52c0>
   16744:	cmp	r0, #0
   16748:	mov	ip, #10
   1674c:	moveq	r0, r3
   16750:	cmp	r2, #0
   16754:	cmpne	r1, #0
   16758:	str	ip, [r0]
   1675c:	beq	1676c <__assert_fail@plt+0x52b4>
   16760:	str	r1, [r0, #40]	; 0x28
   16764:	str	r2, [r0, #44]	; 0x2c
   16768:	bx	lr
   1676c:	str	r4, [sp, #-8]!
   16770:	str	lr, [sp, #4]
   16774:	bl	114a0 <abort@plt>
   16778:	ldrdeq	ip, [r2], -r4
   1677c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16780:	strd	r6, [sp, #8]
   16784:	mov	r7, r0
   16788:	mov	r6, r1
   1678c:	strd	r8, [sp, #16]
   16790:	mov	r8, r2
   16794:	mov	r9, r3
   16798:	str	lr, [sp, #24]
   1679c:	sub	sp, sp, #28
   167a0:	ldr	r4, [sp, #56]	; 0x38
   167a4:	ldr	ip, [pc, #104]	; 16814 <__assert_fail@plt+0x535c>
   167a8:	cmp	r4, #0
   167ac:	moveq	r4, ip
   167b0:	bl	11338 <__errno_location@plt>
   167b4:	ldr	ip, [r4, #44]	; 0x2c
   167b8:	mov	r5, r0
   167bc:	mov	r1, r6
   167c0:	add	lr, r4, #8
   167c4:	mov	r3, r9
   167c8:	ldr	r6, [r5]
   167cc:	mov	r2, r8
   167d0:	mov	r0, r7
   167d4:	str	ip, [sp, #16]
   167d8:	ldr	ip, [r4, #40]	; 0x28
   167dc:	str	lr, [sp, #8]
   167e0:	str	ip, [sp, #12]
   167e4:	ldr	ip, [r4, #4]
   167e8:	str	ip, [sp, #4]
   167ec:	ldr	ip, [r4]
   167f0:	str	ip, [sp]
   167f4:	bl	14cc4 <__assert_fail@plt+0x380c>
   167f8:	str	r6, [r5]
   167fc:	add	sp, sp, #28
   16800:	ldrd	r4, [sp]
   16804:	ldrd	r6, [sp, #8]
   16808:	ldrd	r8, [sp, #16]
   1680c:	add	sp, sp, #24
   16810:	pop	{pc}		; (ldr pc, [sp], #4)
   16814:	ldrdeq	ip, [r2], -r4
   16818:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1681c:	cmp	r3, #0
   16820:	ldr	r4, [pc, #220]	; 16904 <__assert_fail@plt+0x544c>
   16824:	movne	r4, r3
   16828:	strd	r6, [sp, #8]
   1682c:	mov	r6, r2
   16830:	strd	r8, [sp, #16]
   16834:	mov	r9, r0
   16838:	strd	sl, [sp, #24]
   1683c:	mov	sl, r1
   16840:	str	lr, [sp, #32]
   16844:	sub	sp, sp, #44	; 0x2c
   16848:	bl	11338 <__errno_location@plt>
   1684c:	ldr	r5, [r4, #4]
   16850:	mov	r7, r0
   16854:	mov	r1, #0
   16858:	add	r8, r4, #8
   1685c:	mov	r3, sl
   16860:	ldr	ip, [r4, #44]	; 0x2c
   16864:	mov	r2, r9
   16868:	mov	r0, r1
   1686c:	ldr	lr, [r7]
   16870:	cmp	r6, r1
   16874:	orreq	r5, r5, #1
   16878:	str	ip, [sp, #16]
   1687c:	ldr	ip, [r4, #40]	; 0x28
   16880:	stmib	sp, {r5, r8, ip}
   16884:	ldr	ip, [r4]
   16888:	str	lr, [sp, #28]
   1688c:	str	ip, [sp]
   16890:	bl	14cc4 <__assert_fail@plt+0x380c>
   16894:	add	r1, r0, #1
   16898:	mov	fp, r0
   1689c:	mov	r0, r1
   168a0:	str	r1, [sp, #36]	; 0x24
   168a4:	bl	18078 <__assert_fail@plt+0x6bc0>
   168a8:	ldr	ip, [r4, #44]	; 0x2c
   168ac:	mov	r3, sl
   168b0:	mov	r2, r9
   168b4:	ldr	r1, [sp, #36]	; 0x24
   168b8:	str	ip, [sp, #16]
   168bc:	ldr	ip, [r4, #40]	; 0x28
   168c0:	str	r0, [sp, #32]
   168c4:	stmib	sp, {r5, r8, ip}
   168c8:	ldr	ip, [r4]
   168cc:	str	ip, [sp]
   168d0:	bl	14cc4 <__assert_fail@plt+0x380c>
   168d4:	ldr	lr, [sp, #28]
   168d8:	cmp	r6, #0
   168dc:	ldr	r0, [sp, #32]
   168e0:	str	lr, [r7]
   168e4:	strne	fp, [r6]
   168e8:	add	sp, sp, #44	; 0x2c
   168ec:	ldrd	r4, [sp]
   168f0:	ldrd	r6, [sp, #8]
   168f4:	ldrd	r8, [sp, #16]
   168f8:	ldrd	sl, [sp, #24]
   168fc:	add	sp, sp, #32
   16900:	pop	{pc}		; (ldr pc, [sp], #4)
   16904:	ldrdeq	ip, [r2], -r4
   16908:	mov	r3, r2
   1690c:	mov	r2, #0
   16910:	b	16818 <__assert_fail@plt+0x5360>
   16914:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16918:	movw	r5, #49500	; 0xc15c
   1691c:	movt	r5, #2
   16920:	ldr	r3, [r5, #4]
   16924:	strd	r6, [sp, #8]
   16928:	str	r8, [sp, #16]
   1692c:	str	lr, [sp, #20]
   16930:	ldr	r7, [r5]
   16934:	cmp	r3, #1
   16938:	ble	1695c <__assert_fail@plt+0x54a4>
   1693c:	mov	r4, #1
   16940:	add	r6, r7, #4
   16944:	ldr	r0, [r6, r4, lsl #3]
   16948:	add	r4, r4, #1
   1694c:	bl	13d7c <__assert_fail@plt+0x28c4>
   16950:	ldr	r3, [r5, #4]
   16954:	cmp	r3, r4
   16958:	bgt	16944 <__assert_fail@plt+0x548c>
   1695c:	ldr	r0, [r7, #4]
   16960:	movw	r4, #49620	; 0xc1d4
   16964:	movt	r4, #2
   16968:	cmp	r0, r4
   1696c:	beq	16980 <__assert_fail@plt+0x54c8>
   16970:	bl	13d7c <__assert_fail@plt+0x28c4>
   16974:	mov	r3, #256	; 0x100
   16978:	str	r3, [r5, #8]
   1697c:	str	r4, [r5, #12]
   16980:	ldr	r4, [pc, #44]	; 169b4 <__assert_fail@plt+0x54fc>
   16984:	cmp	r7, r4
   16988:	beq	16998 <__assert_fail@plt+0x54e0>
   1698c:	mov	r0, r7
   16990:	bl	13d7c <__assert_fail@plt+0x28c4>
   16994:	str	r4, [r5]
   16998:	mov	r3, #1
   1699c:	ldrd	r6, [sp, #8]
   169a0:	str	r3, [r5, #4]
   169a4:	ldrd	r4, [sp]
   169a8:	ldr	r8, [sp, #16]
   169ac:	add	sp, sp, #20
   169b0:	pop	{pc}		; (ldr pc, [sp], #4)
   169b4:	andeq	ip, r2, r4, ror #2
   169b8:	ldr	r3, [pc, #4]	; 169c4 <__assert_fail@plt+0x550c>
   169bc:	mvn	r2, #0
   169c0:	b	16484 <__assert_fail@plt+0x4fcc>
   169c4:	ldrdeq	ip, [r2], -r4
   169c8:	ldr	r3, [pc]	; 169d0 <__assert_fail@plt+0x5518>
   169cc:	b	16484 <__assert_fail@plt+0x4fcc>
   169d0:	ldrdeq	ip, [r2], -r4
   169d4:	mov	r1, r0
   169d8:	ldr	r3, [pc, #8]	; 169e8 <__assert_fail@plt+0x5530>
   169dc:	mvn	r2, #0
   169e0:	mov	r0, #0
   169e4:	b	16484 <__assert_fail@plt+0x4fcc>
   169e8:	ldrdeq	ip, [r2], -r4
   169ec:	mov	r2, r1
   169f0:	ldr	r3, [pc, #8]	; 16a00 <__assert_fail@plt+0x5548>
   169f4:	mov	r1, r0
   169f8:	mov	r0, #0
   169fc:	b	16484 <__assert_fail@plt+0x4fcc>
   16a00:	ldrdeq	ip, [r2], -r4
   16a04:	strd	r4, [sp, #-12]!
   16a08:	mov	r5, r2
   16a0c:	mov	r4, r0
   16a10:	str	lr, [sp, #8]
   16a14:	sub	sp, sp, #52	; 0x34
   16a18:	mov	r0, sp
   16a1c:	bl	14b20 <__assert_fail@plt+0x3668>
   16a20:	mov	r3, sp
   16a24:	mov	r1, r5
   16a28:	mov	r0, r4
   16a2c:	mvn	r2, #0
   16a30:	bl	16484 <__assert_fail@plt+0x4fcc>
   16a34:	add	sp, sp, #52	; 0x34
   16a38:	ldrd	r4, [sp]
   16a3c:	add	sp, sp, #8
   16a40:	pop	{pc}		; (ldr pc, [sp], #4)
   16a44:	strd	r4, [sp, #-16]!
   16a48:	mov	r5, r2
   16a4c:	mov	r4, r0
   16a50:	str	r6, [sp, #8]
   16a54:	mov	r6, r3
   16a58:	str	lr, [sp, #12]
   16a5c:	sub	sp, sp, #48	; 0x30
   16a60:	mov	r0, sp
   16a64:	bl	14b20 <__assert_fail@plt+0x3668>
   16a68:	mov	r3, sp
   16a6c:	mov	r2, r6
   16a70:	mov	r1, r5
   16a74:	mov	r0, r4
   16a78:	bl	16484 <__assert_fail@plt+0x4fcc>
   16a7c:	add	sp, sp, #48	; 0x30
   16a80:	ldrd	r4, [sp]
   16a84:	ldr	r6, [sp, #8]
   16a88:	add	sp, sp, #12
   16a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a90:	mov	r2, r1
   16a94:	mov	r1, r0
   16a98:	mov	r0, #0
   16a9c:	b	16a04 <__assert_fail@plt+0x554c>
   16aa0:	mov	r3, r2
   16aa4:	mov	r2, r1
   16aa8:	mov	r1, r0
   16aac:	mov	r0, #0
   16ab0:	b	16a44 <__assert_fail@plt+0x558c>
   16ab4:	ldr	ip, [pc, #140]	; 16b48 <__assert_fail@plt+0x5690>
   16ab8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16abc:	ldrd	r4, [ip]
   16ac0:	strd	r6, [sp, #8]
   16ac4:	ldrd	r6, [ip, #8]
   16ac8:	strd	r8, [sp, #16]
   16acc:	lsr	r9, r2, #5
   16ad0:	str	lr, [sp, #24]
   16ad4:	sub	sp, sp, #52	; 0x34
   16ad8:	and	lr, r2, #31
   16adc:	add	r8, sp, #8
   16ae0:	mov	r2, r1
   16ae4:	strd	r4, [sp]
   16ae8:	mov	r1, r0
   16aec:	mov	r3, sp
   16af0:	strd	r6, [sp, #8]
   16af4:	mov	r0, #0
   16af8:	ldrd	r4, [ip, #16]
   16afc:	ldrd	r6, [ip, #24]
   16b00:	strd	r4, [sp, #16]
   16b04:	ldrd	r4, [ip, #32]
   16b08:	strd	r6, [sp, #24]
   16b0c:	ldrd	r6, [ip, #40]	; 0x28
   16b10:	strd	r4, [sp, #32]
   16b14:	strd	r6, [sp, #40]	; 0x28
   16b18:	ldr	ip, [r8, r9, lsl #2]
   16b1c:	mvn	r4, ip, lsr lr
   16b20:	and	r4, r4, #1
   16b24:	eor	lr, ip, r4, lsl lr
   16b28:	str	lr, [r8, r9, lsl #2]
   16b2c:	bl	16484 <__assert_fail@plt+0x4fcc>
   16b30:	add	sp, sp, #52	; 0x34
   16b34:	ldrd	r4, [sp]
   16b38:	ldrd	r6, [sp, #8]
   16b3c:	ldrd	r8, [sp, #16]
   16b40:	add	sp, sp, #24
   16b44:	pop	{pc}		; (ldr pc, [sp], #4)
   16b48:	ldrdeq	ip, [r2], -r4
   16b4c:	mov	r2, r1
   16b50:	mvn	r1, #0
   16b54:	b	16ab4 <__assert_fail@plt+0x55fc>
   16b58:	mov	r2, #58	; 0x3a
   16b5c:	mvn	r1, #0
   16b60:	b	16ab4 <__assert_fail@plt+0x55fc>
   16b64:	mov	r2, #58	; 0x3a
   16b68:	b	16ab4 <__assert_fail@plt+0x55fc>
   16b6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16b70:	strd	r6, [sp, #8]
   16b74:	mov	r6, r0
   16b78:	mov	r7, r2
   16b7c:	str	lr, [sp, #16]
   16b80:	sub	sp, sp, #100	; 0x64
   16b84:	mov	r0, sp
   16b88:	bl	14b20 <__assert_fail@plt+0x3668>
   16b8c:	ldrd	r4, [sp, #8]
   16b90:	mov	r1, r7
   16b94:	mov	r0, r6
   16b98:	add	r3, sp, #48	; 0x30
   16b9c:	mvn	r2, #0
   16ba0:	ldrd	r6, [sp]
   16ba4:	strd	r4, [sp, #56]	; 0x38
   16ba8:	ldrd	r4, [sp, #16]
   16bac:	strd	r6, [sp, #48]	; 0x30
   16bb0:	ldrd	r6, [sp, #32]
   16bb4:	ldr	lr, [sp, #60]	; 0x3c
   16bb8:	strd	r4, [sp, #64]	; 0x40
   16bbc:	ldrd	r4, [sp, #24]
   16bc0:	mvn	ip, lr
   16bc4:	and	ip, ip, #67108864	; 0x4000000
   16bc8:	strd	r4, [sp, #72]	; 0x48
   16bcc:	eor	ip, ip, lr
   16bd0:	ldrd	r4, [sp, #40]	; 0x28
   16bd4:	str	ip, [sp, #60]	; 0x3c
   16bd8:	strd	r6, [sp, #80]	; 0x50
   16bdc:	strd	r4, [sp, #88]	; 0x58
   16be0:	bl	16484 <__assert_fail@plt+0x4fcc>
   16be4:	add	sp, sp, #100	; 0x64
   16be8:	ldrd	r4, [sp]
   16bec:	ldrd	r6, [sp, #8]
   16bf0:	add	sp, sp, #16
   16bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf8:	ldr	ip, [pc, #156]	; 16c9c <__assert_fail@plt+0x57e4>
   16bfc:	cmp	r2, #0
   16c00:	cmpne	r1, #0
   16c04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16c08:	strd	r6, [sp, #8]
   16c0c:	mov	r6, r2
   16c10:	str	r8, [sp, #16]
   16c14:	mov	r8, r3
   16c18:	strd	sl, [sp, #20]
   16c1c:	ldrd	r4, [ip]
   16c20:	str	lr, [sp, #28]
   16c24:	sub	sp, sp, #48	; 0x30
   16c28:	mov	lr, #10
   16c2c:	ldrd	r2, [ip, #8]
   16c30:	ldrd	sl, [ip, #16]
   16c34:	strd	r4, [sp]
   16c38:	ldrd	r4, [ip, #32]
   16c3c:	str	lr, [sp]
   16c40:	strd	r2, [sp, #8]
   16c44:	strd	sl, [sp, #16]
   16c48:	ldrd	r2, [ip, #24]
   16c4c:	ldrd	sl, [ip, #40]	; 0x28
   16c50:	strd	r2, [sp, #24]
   16c54:	strd	r4, [sp, #32]
   16c58:	strd	sl, [sp, #40]	; 0x28
   16c5c:	beq	16c98 <__assert_fail@plt+0x57e0>
   16c60:	ldr	r2, [sp, #80]	; 0x50
   16c64:	mov	r7, r1
   16c68:	mov	r3, sp
   16c6c:	mov	r1, r8
   16c70:	str	r7, [sp, #40]	; 0x28
   16c74:	str	r6, [sp, #44]	; 0x2c
   16c78:	bl	16484 <__assert_fail@plt+0x4fcc>
   16c7c:	add	sp, sp, #48	; 0x30
   16c80:	ldrd	r4, [sp]
   16c84:	ldrd	r6, [sp, #8]
   16c88:	ldr	r8, [sp, #16]
   16c8c:	ldrd	sl, [sp, #20]
   16c90:	add	sp, sp, #28
   16c94:	pop	{pc}		; (ldr pc, [sp], #4)
   16c98:	bl	114a0 <abort@plt>
   16c9c:	ldrdeq	ip, [r2], -r4
   16ca0:	mvn	ip, #0
   16ca4:	push	{lr}		; (str lr, [sp, #-4]!)
   16ca8:	sub	sp, sp, #12
   16cac:	str	ip, [sp]
   16cb0:	bl	16bf8 <__assert_fail@plt+0x5740>
   16cb4:	add	sp, sp, #12
   16cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cbc:	mvn	ip, #0
   16cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   16cc4:	sub	sp, sp, #12
   16cc8:	mov	r3, r2
   16ccc:	mov	r2, r1
   16cd0:	mov	r1, r0
   16cd4:	mov	r0, #0
   16cd8:	str	ip, [sp]
   16cdc:	bl	16bf8 <__assert_fail@plt+0x5740>
   16ce0:	add	sp, sp, #12
   16ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ce8:	push	{lr}		; (str lr, [sp, #-4]!)
   16cec:	sub	sp, sp, #12
   16cf0:	str	r3, [sp]
   16cf4:	mov	r3, r2
   16cf8:	mov	r2, r1
   16cfc:	mov	r1, r0
   16d00:	mov	r0, #0
   16d04:	bl	16bf8 <__assert_fail@plt+0x5740>
   16d08:	add	sp, sp, #12
   16d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d10:	ldr	r3, [pc]	; 16d18 <__assert_fail@plt+0x5860>
   16d14:	b	16484 <__assert_fail@plt+0x4fcc>
   16d18:	andeq	ip, r2, ip, ror #2
   16d1c:	mov	r2, r1
   16d20:	ldr	r3, [pc, #8]	; 16d30 <__assert_fail@plt+0x5878>
   16d24:	mov	r1, r0
   16d28:	mov	r0, #0
   16d2c:	b	16484 <__assert_fail@plt+0x4fcc>
   16d30:	andeq	ip, r2, ip, ror #2
   16d34:	ldr	r3, [pc, #4]	; 16d40 <__assert_fail@plt+0x5888>
   16d38:	mvn	r2, #0
   16d3c:	b	16484 <__assert_fail@plt+0x4fcc>
   16d40:	andeq	ip, r2, ip, ror #2
   16d44:	mov	r1, r0
   16d48:	ldr	r3, [pc, #8]	; 16d58 <__assert_fail@plt+0x58a0>
   16d4c:	mvn	r2, #0
   16d50:	mov	r0, #0
   16d54:	b	16484 <__assert_fail@plt+0x4fcc>
   16d58:	andeq	ip, r2, ip, ror #2
   16d5c:	strd	r4, [sp, #-16]!
   16d60:	mov	r4, #0
   16d64:	mov	r5, #0
   16d68:	str	r6, [sp, #8]
   16d6c:	mov	r6, r0
   16d70:	mov	r0, #24
   16d74:	str	lr, [sp, #12]
   16d78:	bl	18030 <__assert_fail@plt+0x6b78>
   16d7c:	str	r6, [r0]
   16d80:	strd	r4, [r0, #8]
   16d84:	strd	r4, [r0, #16]
   16d88:	ldrd	r4, [sp]
   16d8c:	ldr	r6, [sp, #8]
   16d90:	add	sp, sp, #12
   16d94:	pop	{pc}		; (ldr pc, [sp], #4)
   16d98:	str	r4, [sp, #-8]!
   16d9c:	str	lr, [sp, #4]
   16da0:	bl	17108 <__assert_fail@plt+0x5c50>
   16da4:	subs	r4, r0, #0
   16da8:	moveq	r0, r4
   16dac:	beq	16dcc <__assert_fail@plt+0x5914>
   16db0:	mov	r0, #24
   16db4:	bl	18030 <__assert_fail@plt+0x6b78>
   16db8:	mov	r2, #0
   16dbc:	mov	r3, #0
   16dc0:	str	r4, [r0]
   16dc4:	strd	r2, [r0, #8]
   16dc8:	strd	r2, [r0, #16]
   16dcc:	ldr	r4, [sp]
   16dd0:	add	sp, sp, #4
   16dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd8:	ldr	r0, [r0]
   16ddc:	bx	lr
   16de0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16de4:	strd	r6, [sp, #8]
   16de8:	strd	r8, [sp, #16]
   16dec:	mov	r8, r2
   16df0:	mov	r9, r3
   16df4:	ldr	r2, [r0]
   16df8:	strd	sl, [sp, #24]
   16dfc:	str	lr, [sp, #32]
   16e00:	sub	sp, sp, #52	; 0x34
   16e04:	ldrd	r6, [r0, #8]
   16e08:	strd	r8, [sp]
   16e0c:	str	r2, [sp, #32]
   16e10:	adds	r2, r8, #1
   16e14:	ldrd	r4, [r0, #16]
   16e18:	str	r2, [sp, #16]
   16e1c:	adc	r2, r9, #0
   16e20:	str	r0, [sp, #36]	; 0x24
   16e24:	str	r2, [sp, #20]
   16e28:	b	16eac <__assert_fail@plt+0x59f4>
   16e2c:	ldrd	r2, [sp]
   16e30:	cmp	r5, r3
   16e34:	cmpeq	r4, r2
   16e38:	beq	16f50 <__assert_fail@plt+0x5a98>
   16e3c:	ldrd	sl, [sp]
   16e40:	ldr	r9, [sp, #16]
   16e44:	ldr	r8, [sp, #20]
   16e48:	subs	r0, r4, sl
   16e4c:	sbc	r1, r5, fp
   16e50:	mov	r2, r9
   16e54:	mov	r3, r8
   16e58:	bl	19ab0 <__assert_fail@plt+0x85f8>
   16e5c:	mov	fp, r3
   16e60:	subs	r3, r4, r2
   16e64:	mov	sl, r2
   16e68:	mov	r2, r9
   16e6c:	str	r3, [sp, #8]
   16e70:	sbc	r3, r5, fp
   16e74:	strd	r0, [sp, #24]
   16e78:	mov	r0, r6
   16e7c:	mov	r1, r7
   16e80:	str	r3, [sp, #12]
   16e84:	mov	r3, r8
   16e88:	bl	19ab0 <__assert_fail@plt+0x85f8>
   16e8c:	ldrd	r8, [sp, #8]
   16e90:	cmp	r7, r9
   16e94:	cmpeq	r6, r8
   16e98:	bls	16f88 <__assert_fail@plt+0x5ad0>
   16e9c:	subs	r4, sl, #1
   16ea0:	mov	r6, r2
   16ea4:	sbc	r5, fp, #0
   16ea8:	mov	r7, r3
   16eac:	ldrd	r2, [sp]
   16eb0:	cmp	r5, r3
   16eb4:	cmpeq	r4, r2
   16eb8:	bcs	16e2c <__assert_fail@plt+0x5974>
   16ebc:	ldrd	r8, [sp]
   16ec0:	mov	r0, r4
   16ec4:	mov	r1, r5
   16ec8:	mov	r2, #0
   16ecc:	lsl	r3, r1, #8
   16ed0:	add	r2, r2, #1
   16ed4:	lsl	ip, r0, #8
   16ed8:	orr	r3, r3, r0, lsr #24
   16edc:	adds	r0, ip, #255	; 0xff
   16ee0:	adc	r1, r3, #0
   16ee4:	cmp	r9, r1
   16ee8:	cmpeq	r8, r0
   16eec:	bhi	16ecc <__assert_fail@plt+0x5a14>
   16ef0:	add	r1, sp, #40	; 0x28
   16ef4:	ldr	r0, [sp, #32]
   16ef8:	bl	17268 <__assert_fail@plt+0x5db0>
   16efc:	add	ip, sp, #39	; 0x27
   16f00:	ldrb	sl, [ip, #1]!
   16f04:	lsl	r0, r7, #8
   16f08:	mov	fp, #0
   16f0c:	lsl	r1, r5, #8
   16f10:	lsl	lr, r6, #8
   16f14:	orr	r0, r0, r6, lsr #24
   16f18:	lsl	r2, r4, #8
   16f1c:	adds	r6, sl, lr
   16f20:	orr	r1, r1, r4, lsr #24
   16f24:	adc	r7, fp, r0
   16f28:	adds	r4, r2, #255	; 0xff
   16f2c:	adc	r5, r1, #0
   16f30:	cmp	r9, r5
   16f34:	cmpeq	r8, r4
   16f38:	bhi	16f00 <__assert_fail@plt+0x5a48>
   16f3c:	strd	r8, [sp]
   16f40:	ldrd	r2, [sp]
   16f44:	cmp	r5, r3
   16f48:	cmpeq	r4, r2
   16f4c:	bne	16e3c <__assert_fail@plt+0x5984>
   16f50:	ldr	r1, [sp, #36]	; 0x24
   16f54:	mov	r2, #0
   16f58:	mov	r3, #0
   16f5c:	strd	r2, [r1, #8]
   16f60:	strd	r2, [r1, #16]
   16f64:	mov	r0, r6
   16f68:	mov	r1, r7
   16f6c:	add	sp, sp, #52	; 0x34
   16f70:	ldrd	r4, [sp]
   16f74:	ldrd	r6, [sp, #8]
   16f78:	ldrd	r8, [sp, #16]
   16f7c:	ldrd	sl, [sp, #24]
   16f80:	add	sp, sp, #32
   16f84:	pop	{pc}		; (ldr pc, [sp], #4)
   16f88:	mov	r6, r2
   16f8c:	ldr	r2, [sp, #36]	; 0x24
   16f90:	mov	r7, r3
   16f94:	strd	r0, [r2, #8]
   16f98:	mov	r1, r2
   16f9c:	ldrd	r2, [sp, #24]
   16fa0:	strd	r2, [r1, #16]
   16fa4:	b	16f64 <__assert_fail@plt+0x5aac>
   16fa8:	mvn	r2, #0
   16fac:	mov	r1, #24
   16fb0:	str	r4, [sp, #-8]!
   16fb4:	mov	r4, r0
   16fb8:	str	lr, [sp, #4]
   16fbc:	bl	113ec <__explicit_bzero_chk@plt>
   16fc0:	mov	r0, r4
   16fc4:	ldr	r4, [sp]
   16fc8:	ldr	lr, [sp, #4]
   16fcc:	add	sp, sp, #8
   16fd0:	b	13d7c <__assert_fail@plt+0x28c4>
   16fd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16fd8:	mov	r4, r0
   16fdc:	ldr	r0, [r0]
   16fe0:	strd	r6, [sp, #8]
   16fe4:	str	r8, [sp, #16]
   16fe8:	str	lr, [sp, #20]
   16fec:	bl	173b4 <__assert_fail@plt+0x5efc>
   16ff0:	mov	r7, r0
   16ff4:	bl	11338 <__errno_location@plt>
   16ff8:	mov	r5, r0
   16ffc:	mvn	r2, #0
   17000:	ldr	r6, [r5]
   17004:	mov	r0, r4
   17008:	mov	r1, #24
   1700c:	bl	113ec <__explicit_bzero_chk@plt>
   17010:	mov	r0, r4
   17014:	bl	13d7c <__assert_fail@plt+0x28c4>
   17018:	mov	r0, r7
   1701c:	ldr	r8, [sp, #16]
   17020:	str	r6, [r5]
   17024:	ldrd	r4, [sp]
   17028:	ldrd	r6, [sp, #8]
   1702c:	add	sp, sp, #20
   17030:	pop	{pc}		; (ldr pc, [sp], #4)
   17034:	subs	r5, r0, #0
   17038:	str	r7, [sp, #-8]!
   1703c:	str	lr, [sp, #4]
   17040:	beq	17094 <__assert_fail@plt+0x5bdc>
   17044:	movw	r3, #49496	; 0xc158
   17048:	movt	r3, #2
   1704c:	ldr	r6, [r3]
   17050:	bl	11338 <__errno_location@plt>
   17054:	ldr	r4, [r0]
   17058:	cmp	r4, #0
   1705c:	beq	17098 <__assert_fail@plt+0x5be0>
   17060:	movw	r1, #44356	; 0xad44
   17064:	movt	r1, #1
   17068:	mov	r2, #5
   1706c:	mov	r0, #0
   17070:	bl	111e8 <dcgettext@plt>
   17074:	mov	r7, r0
   17078:	mov	r0, r5
   1707c:	bl	16d44 <__assert_fail@plt+0x588c>
   17080:	mov	r3, r0
   17084:	mov	r2, r7
   17088:	mov	r1, r4
   1708c:	mov	r0, r6
   17090:	bl	1129c <error@plt>
   17094:	bl	114a0 <abort@plt>
   17098:	movw	r1, #44340	; 0xad34
   1709c:	movt	r1, #1
   170a0:	mov	r2, #5
   170a4:	mov	r0, r4
   170a8:	bl	111e8 <dcgettext@plt>
   170ac:	mov	r7, r0
   170b0:	b	17078 <__assert_fail@plt+0x5bc0>
   170b4:	strd	r4, [sp, #-16]!
   170b8:	mvn	r2, #0
   170bc:	mov	r4, r0
   170c0:	ldr	r5, [r0]
   170c4:	movw	r1, #2076	; 0x81c
   170c8:	str	r6, [sp, #8]
   170cc:	str	lr, [sp, #12]
   170d0:	bl	113ec <__explicit_bzero_chk@plt>
   170d4:	mov	r0, r4
   170d8:	bl	13d7c <__assert_fail@plt+0x28c4>
   170dc:	subs	r0, r5, #0
   170e0:	beq	170f8 <__assert_fail@plt+0x5c40>
   170e4:	ldrd	r4, [sp]
   170e8:	ldr	r6, [sp, #8]
   170ec:	ldr	lr, [sp, #12]
   170f0:	add	sp, sp, #16
   170f4:	b	19170 <__assert_fail@plt+0x7cb8>
   170f8:	ldrd	r4, [sp]
   170fc:	ldr	r6, [sp, #8]
   17100:	add	sp, sp, #12
   17104:	pop	{pc}		; (ldr pc, [sp], #4)
   17108:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1710c:	strd	r6, [sp, #8]
   17110:	subs	r6, r1, #0
   17114:	strd	r8, [sp, #16]
   17118:	str	sl, [sp, #24]
   1711c:	str	lr, [sp, #28]
   17120:	beq	17230 <__assert_fail@plt+0x5d78>
   17124:	cmp	r0, #0
   17128:	mov	r5, r0
   1712c:	beq	17198 <__assert_fail@plt+0x5ce0>
   17130:	movw	r1, #44372	; 0xad54
   17134:	movt	r1, #1
   17138:	bl	19284 <__assert_fail@plt+0x7dcc>
   1713c:	subs	r7, r0, #0
   17140:	beq	17250 <__assert_fail@plt+0x5d98>
   17144:	movw	r0, #2076	; 0x81c
   17148:	bl	18030 <__assert_fail@plt+0x6b78>
   1714c:	mov	r4, r0
   17150:	movw	r2, #28724	; 0x7034
   17154:	movt	r2, #1
   17158:	cmp	r6, #2048	; 0x800
   1715c:	movcc	r3, r6
   17160:	movcs	r3, #2048	; 0x800
   17164:	str	r7, [r4]
   17168:	mov	r0, r7
   1716c:	add	r1, r4, #12
   17170:	stmib	r4, {r2, r5}
   17174:	mov	r2, #0
   17178:	bl	1135c <setvbuf@plt>
   1717c:	mov	r0, r4
   17180:	ldrd	r4, [sp]
   17184:	ldrd	r6, [sp, #8]
   17188:	ldrd	r8, [sp, #16]
   1718c:	ldr	sl, [sp, #24]
   17190:	add	sp, sp, #28
   17194:	pop	{pc}		; (ldr pc, [sp], #4)
   17198:	movw	r0, #2076	; 0x81c
   1719c:	bl	18030 <__assert_fail@plt+0x6b78>
   171a0:	add	r9, r0, #16
   171a4:	movw	r3, #28724	; 0x7034
   171a8:	movt	r3, #1
   171ac:	cmp	r6, #1024	; 0x400
   171b0:	addls	r6, r9, r6
   171b4:	addhi	r6, r9, #1024	; 0x400
   171b8:	str	r5, [r0]
   171bc:	cmp	r9, r6
   171c0:	mov	r4, r0
   171c4:	stmib	r0, {r3, r5}
   171c8:	str	r5, [r0, #12]
   171cc:	movcc	r5, r9
   171d0:	bcc	171e0 <__assert_fail@plt+0x5d28>
   171d4:	b	17224 <__assert_fail@plt+0x5d6c>
   171d8:	cmp	r6, r5
   171dc:	bls	17224 <__assert_fail@plt+0x5d6c>
   171e0:	sub	r1, r6, r5
   171e4:	mov	r0, r5
   171e8:	mov	r2, #0
   171ec:	bl	1144c <getrandom@plt>
   171f0:	cmp	r0, #0
   171f4:	addge	r5, r5, r0
   171f8:	bge	171d8 <__assert_fail@plt+0x5d20>
   171fc:	bl	11338 <__errno_location@plt>
   17200:	ldr	r8, [r0]
   17204:	mov	r7, r0
   17208:	cmp	r8, #4
   1720c:	beq	171d8 <__assert_fail@plt+0x5d20>
   17210:	mov	r0, r4
   17214:	mov	r4, #0
   17218:	bl	170b4 <__assert_fail@plt+0x5bfc>
   1721c:	str	r8, [r7]
   17220:	b	1717c <__assert_fail@plt+0x5cc4>
   17224:	mov	r0, r9
   17228:	bl	175f0 <__assert_fail@plt+0x6138>
   1722c:	b	1717c <__assert_fail@plt+0x5cc4>
   17230:	movw	r0, #2076	; 0x81c
   17234:	bl	18030 <__assert_fail@plt+0x6b78>
   17238:	movw	r3, #28724	; 0x7034
   1723c:	movt	r3, #1
   17240:	str	r6, [r0]
   17244:	mov	r4, r0
   17248:	stmib	r0, {r3, r6}
   1724c:	b	1717c <__assert_fail@plt+0x5cc4>
   17250:	mov	r4, r7
   17254:	b	1717c <__assert_fail@plt+0x5cc4>
   17258:	str	r1, [r0, #4]
   1725c:	bx	lr
   17260:	str	r1, [r0, #8]
   17264:	bx	lr
   17268:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1726c:	mov	r5, r1
   17270:	mov	r4, r2
   17274:	strd	r6, [sp, #8]
   17278:	mov	r6, r0
   1727c:	ldr	r7, [r0]
   17280:	strd	r8, [sp, #16]
   17284:	str	sl, [sp, #24]
   17288:	str	lr, [sp, #28]
   1728c:	cmp	r7, #0
   17290:	beq	172fc <__assert_fail@plt+0x5e44>
   17294:	bl	11338 <__errno_location@plt>
   17298:	mov	r8, r0
   1729c:	b	172c0 <__assert_fail@plt+0x5e08>
   172a0:	ldm	r6, {r1, r2}
   172a4:	ldr	r0, [r6, #8]
   172a8:	ldr	r1, [r1]
   172ac:	tst	r1, #32
   172b0:	moveq	r3, #0
   172b4:	str	r3, [r8]
   172b8:	blx	r2
   172bc:	ldr	r7, [r6]
   172c0:	mov	r3, r7
   172c4:	mov	r2, r4
   172c8:	mov	r0, r5
   172cc:	mov	r1, #1
   172d0:	bl	11440 <fread_unlocked@plt>
   172d4:	subs	r4, r4, r0
   172d8:	add	r5, r5, r0
   172dc:	ldr	r3, [r8]
   172e0:	bne	172a0 <__assert_fail@plt+0x5de8>
   172e4:	ldrd	r4, [sp]
   172e8:	ldrd	r6, [sp, #8]
   172ec:	ldrd	r8, [sp, #16]
   172f0:	ldr	sl, [sp, #24]
   172f4:	add	sp, sp, #28
   172f8:	pop	{pc}		; (ldr pc, [sp], #4)
   172fc:	mov	r8, r0
   17300:	ldr	r7, [r8, #12]!
   17304:	cmp	r2, r7
   17308:	add	r8, r8, #1040	; 0x410
   1730c:	addhi	r9, r0, #16
   17310:	bls	173a8 <__assert_fail@plt+0x5ef0>
   17314:	rsb	r1, r7, #1024	; 0x400
   17318:	mov	r2, r7
   1731c:	add	r1, r8, r1
   17320:	mov	r0, r5
   17324:	add	r5, r5, r7
   17328:	sub	r4, r4, r7
   1732c:	bl	11194 <memcpy@plt>
   17330:	tst	r5, #3
   17334:	mov	r1, r8
   17338:	mov	r0, r9
   1733c:	mov	r7, #1024	; 0x400
   17340:	beq	1736c <__assert_fail@plt+0x5eb4>
   17344:	bl	173b8 <__assert_fail@plt+0x5f00>
   17348:	cmp	r4, #1024	; 0x400
   1734c:	bhi	17314 <__assert_fail@plt+0x5e5c>
   17350:	b	17380 <__assert_fail@plt+0x5ec8>
   17354:	mov	r1, r5
   17358:	mov	r0, r9
   1735c:	bl	173b8 <__assert_fail@plt+0x5f00>
   17360:	subs	r4, r4, #1024	; 0x400
   17364:	add	r5, r5, #1024	; 0x400
   17368:	beq	173a0 <__assert_fail@plt+0x5ee8>
   1736c:	cmp	r4, #1024	; 0x400
   17370:	bcs	17354 <__assert_fail@plt+0x5e9c>
   17374:	mov	r0, r9
   17378:	mov	r1, r8
   1737c:	bl	173b8 <__assert_fail@plt+0x5f00>
   17380:	mov	r7, #1024	; 0x400
   17384:	mov	r2, r4
   17388:	sub	r4, r7, r4
   1738c:	mov	r1, r8
   17390:	mov	r0, r5
   17394:	bl	11194 <memcpy@plt>
   17398:	str	r4, [r6, #12]
   1739c:	b	172e4 <__assert_fail@plt+0x5e2c>
   173a0:	str	r4, [r6, #12]
   173a4:	b	172e4 <__assert_fail@plt+0x5e2c>
   173a8:	rsb	r3, r7, #1024	; 0x400
   173ac:	add	r8, r8, r3
   173b0:	b	17384 <__assert_fail@plt+0x5ecc>
   173b4:	b	170b4 <__assert_fail@plt+0x5bfc>
   173b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   173bc:	add	r2, r0, #16
   173c0:	add	r5, r1, #16
   173c4:	ldr	r3, [r0, #1024]	; 0x400
   173c8:	str	lr, [sp, #20]
   173cc:	ldr	ip, [r0, #1028]	; 0x404
   173d0:	strd	r6, [sp, #8]
   173d4:	add	r6, r1, #528	; 0x210
   173d8:	ldr	lr, [r0, #1032]	; 0x408
   173dc:	str	r8, [sp, #16]
   173e0:	add	lr, lr, #1
   173e4:	add	ip, ip, lr
   173e8:	str	lr, [r0, #1032]	; 0x408
   173ec:	ldr	lr, [r2, #-16]
   173f0:	eor	r3, r3, r3, lsl #13
   173f4:	add	r5, r5, #16
   173f8:	add	r2, r2, #16
   173fc:	ldr	r4, [r2, #480]	; 0x1e0
   17400:	and	r7, lr, #1020	; 0x3fc
   17404:	ldr	r7, [r0, r7]
   17408:	add	r3, r3, r4
   1740c:	eor	r4, r3, r3, lsr #6
   17410:	add	r3, r3, r7
   17414:	add	r3, r3, ip
   17418:	lsr	ip, r3, #8
   1741c:	str	r3, [r2, #-32]	; 0xffffffe0
   17420:	and	r3, ip, #1020	; 0x3fc
   17424:	ldr	r7, [r0, r3]
   17428:	add	r7, lr, r7
   1742c:	str	r7, [r5, #-32]	; 0xffffffe0
   17430:	ldr	ip, [r2, #-28]	; 0xffffffe4
   17434:	ldr	lr, [r2, #484]	; 0x1e4
   17438:	and	r3, ip, #1020	; 0x3fc
   1743c:	ldr	r8, [r0, r3]
   17440:	add	lr, r4, lr
   17444:	eor	r3, lr, lr, lsl #2
   17448:	add	lr, lr, r8
   1744c:	add	lr, lr, r7
   17450:	lsr	r4, lr, #8
   17454:	str	lr, [r2, #-28]	; 0xffffffe4
   17458:	and	lr, r4, #1020	; 0x3fc
   1745c:	ldr	r4, [r0, lr]
   17460:	add	r4, ip, r4
   17464:	str	r4, [r5, #-28]	; 0xffffffe4
   17468:	ldr	lr, [r2, #-24]	; 0xffffffe8
   1746c:	ldr	ip, [r2, #488]	; 0x1e8
   17470:	and	r7, lr, #1020	; 0x3fc
   17474:	ldr	r8, [r0, r7]
   17478:	add	ip, r3, ip
   1747c:	eor	r7, ip, ip, lsr #16
   17480:	add	ip, ip, r8
   17484:	add	ip, ip, r4
   17488:	lsr	r3, ip, #8
   1748c:	str	ip, [r2, #-24]	; 0xffffffe8
   17490:	and	ip, r3, #1020	; 0x3fc
   17494:	ldr	r4, [r0, ip]
   17498:	add	r4, lr, r4
   1749c:	str	r4, [r5, #-24]	; 0xffffffe8
   174a0:	ldr	ip, [r2, #-20]	; 0xffffffec
   174a4:	ldr	r3, [r2, #492]	; 0x1ec
   174a8:	and	lr, ip, #1020	; 0x3fc
   174ac:	ldr	lr, [r0, lr]
   174b0:	add	r3, r7, r3
   174b4:	add	lr, r3, lr
   174b8:	add	lr, lr, r4
   174bc:	lsr	r4, lr, #8
   174c0:	str	lr, [r2, #-20]	; 0xffffffec
   174c4:	and	lr, r4, #1020	; 0x3fc
   174c8:	ldr	lr, [r0, lr]
   174cc:	add	ip, ip, lr
   174d0:	str	ip, [r5, #-20]	; 0xffffffec
   174d4:	cmp	r5, r6
   174d8:	bne	173ec <__assert_fail@plt+0x5f34>
   174dc:	add	r1, r1, #1040	; 0x410
   174e0:	add	r2, r0, #528	; 0x210
   174e4:	ldr	r4, [r2, #-528]	; 0xfffffdf0
   174e8:	eor	r3, r3, r3, lsl #13
   174ec:	add	r5, r5, #16
   174f0:	add	r2, r2, #16
   174f4:	ldr	lr, [r2, #-32]	; 0xffffffe0
   174f8:	add	r3, r3, r4
   174fc:	eor	r4, r3, r3, lsr #6
   17500:	and	r6, lr, #1020	; 0x3fc
   17504:	ldr	r6, [r0, r6]
   17508:	add	r3, r3, r6
   1750c:	add	r3, r3, ip
   17510:	lsr	ip, r3, #8
   17514:	str	r3, [r2, #-32]	; 0xffffffe0
   17518:	and	r3, ip, #1020	; 0x3fc
   1751c:	ldr	r6, [r0, r3]
   17520:	add	r6, lr, r6
   17524:	str	r6, [r5, #-32]	; 0xffffffe0
   17528:	ldr	lr, [r2, #-540]	; 0xfffffde4
   1752c:	ldr	ip, [r2, #-28]	; 0xffffffe4
   17530:	add	lr, r4, lr
   17534:	and	r3, ip, #1020	; 0x3fc
   17538:	ldr	r7, [r0, r3]
   1753c:	eor	r3, lr, lr, lsl #2
   17540:	add	lr, lr, r7
   17544:	add	lr, lr, r6
   17548:	lsr	r4, lr, #8
   1754c:	str	lr, [r2, #-28]	; 0xffffffe4
   17550:	and	lr, r4, #1020	; 0x3fc
   17554:	ldr	r4, [r0, lr]
   17558:	add	r4, ip, r4
   1755c:	str	r4, [r5, #-28]	; 0xffffffe4
   17560:	ldr	ip, [r2, #-536]	; 0xfffffde8
   17564:	ldr	lr, [r2, #-24]	; 0xffffffe8
   17568:	add	ip, r3, ip
   1756c:	and	r6, lr, #1020	; 0x3fc
   17570:	ldr	r7, [r0, r6]
   17574:	eor	r6, ip, ip, lsr #16
   17578:	add	ip, ip, r7
   1757c:	add	ip, ip, r4
   17580:	lsr	r4, ip, #8
   17584:	str	ip, [r2, #-24]	; 0xffffffe8
   17588:	and	ip, r4, #1020	; 0x3fc
   1758c:	ldr	r4, [r0, ip]
   17590:	add	r4, lr, r4
   17594:	str	r4, [r5, #-24]	; 0xffffffe8
   17598:	ldr	r3, [r2, #-532]	; 0xfffffdec
   1759c:	ldr	ip, [r2, #-20]	; 0xffffffec
   175a0:	add	r3, r6, r3
   175a4:	and	lr, ip, #1020	; 0x3fc
   175a8:	ldr	lr, [r0, lr]
   175ac:	add	lr, r3, lr
   175b0:	add	lr, lr, r4
   175b4:	lsr	r4, lr, #8
   175b8:	str	lr, [r2, #-20]	; 0xffffffec
   175bc:	and	lr, r4, #1020	; 0x3fc
   175c0:	ldr	lr, [r0, lr]
   175c4:	add	ip, ip, lr
   175c8:	str	ip, [r5, #-20]	; 0xffffffec
   175cc:	cmp	r1, r5
   175d0:	bne	174e4 <__assert_fail@plt+0x602c>
   175d4:	ldrd	r4, [sp]
   175d8:	str	r3, [r0, #1024]	; 0x400
   175dc:	ldrd	r6, [sp, #8]
   175e0:	str	ip, [r0, #1028]	; 0x404
   175e4:	ldr	r8, [sp, #16]
   175e8:	add	sp, sp, #20
   175ec:	pop	{pc}		; (ldr pc, [sp], #4)
   175f0:	mov	r1, #89	; 0x59
   175f4:	movt	r1, #38361	; 0x95d9
   175f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   175fc:	movw	r3, #57178	; 0xdf5a
   17600:	movt	r3, #4967	; 0x1367
   17604:	strd	r6, [sp, #8]
   17608:	movw	r5, #59931	; 0xea1b
   1760c:	movt	r5, #50415	; 0xc4ef
   17610:	strd	r8, [sp, #16]
   17614:	movw	r4, #15433	; 0x3c49
   17618:	movt	r4, #42266	; 0xa51a
   1761c:	strd	sl, [sp, #24]
   17620:	movw	r6, #37145	; 0x9119
   17624:	movt	r6, #12384	; 0x3060
   17628:	str	lr, [sp, #32]
   1762c:	movw	r8, #6872	; 0x1ad8
   17630:	movt	r8, #3906	; 0xf42
   17634:	sub	sp, sp, #12
   17638:	movw	lr, #19064	; 0x4a78
   1763c:	movt	lr, #55594	; 0xd92a
   17640:	movw	r7, #15947	; 0x3e4b
   17644:	movt	r7, #49942	; 0xc316
   17648:	mov	sl, r0
   1764c:	str	r0, [sp, #4]
   17650:	add	fp, r0, #1024	; 0x400
   17654:	mov	r9, r0
   17658:	ldr	r2, [r9]
   1765c:	ldr	r0, [r9, #8]
   17660:	ldr	ip, [r9, #12]
   17664:	add	r2, r3, r2
   17668:	ldr	r3, [r9, #4]
   1766c:	add	r7, r7, r0
   17670:	ldr	r0, [r9, #20]
   17674:	add	r1, r1, r3
   17678:	ldr	r3, [r9, #16]
   1767c:	eor	r2, r2, r1, lsl #11
   17680:	add	r1, r1, r7
   17684:	eor	r1, r1, r7, lsr #2
   17688:	add	ip, r2, ip
   1768c:	add	r8, ip, r8
   17690:	ldr	ip, [r9, #24]
   17694:	add	r7, r7, r8
   17698:	add	r3, r1, r3
   1769c:	eor	r7, r7, r8, lsl #8
   176a0:	add	r3, r3, lr
   176a4:	add	r8, r8, r3
   176a8:	add	lr, r7, r0
   176ac:	eor	r8, r8, r3, lsr #16
   176b0:	add	r4, lr, r4
   176b4:	add	r3, r3, r4
   176b8:	add	ip, r8, ip
   176bc:	eor	lr, r3, r4, lsl #10
   176c0:	ldr	r3, [r9, #28]
   176c4:	add	ip, ip, r5
   176c8:	add	r4, r4, ip
   176cc:	eor	r4, r4, ip, lsr #4
   176d0:	add	r2, r2, r4
   176d4:	add	r3, lr, r3
   176d8:	add	r6, r3, r6
   176dc:	add	ip, ip, r6
   176e0:	eor	r5, ip, r6, lsl #8
   176e4:	add	r6, r6, r2
   176e8:	eor	r6, r6, r2, lsr #9
   176ec:	add	r1, r1, r5
   176f0:	add	r3, r2, r1
   176f4:	add	r7, r7, r6
   176f8:	str	r3, [r9]
   176fc:	stmib	r9, {r1, r7, r8, lr}
   17700:	add	r9, r9, #32
   17704:	strd	r4, [r9, #-12]
   17708:	str	r6, [r9, #-4]
   1770c:	cmp	fp, r9
   17710:	bne	17658 <__assert_fail@plt+0x61a0>
   17714:	ldr	r0, [sp, #4]
   17718:	mov	r2, r1
   1771c:	mov	ip, r8
   17720:	mov	r1, r3
   17724:	mov	r3, r7
   17728:	ldrd	r8, [sl]
   1772c:	ldr	r7, [sl, #8]
   17730:	add	r2, r2, r9
   17734:	add	r1, r1, r8
   17738:	ldrd	r8, [sl, #12]
   1773c:	eor	r1, r1, r2, lsl #11
   17740:	add	r3, r3, r7
   17744:	ldr	r7, [sl, #20]
   17748:	add	r2, r2, r3
   1774c:	eor	r2, r2, r3, lsr #2
   17750:	add	r8, r1, r8
   17754:	add	ip, r8, ip
   17758:	add	r9, r2, r9
   1775c:	ldr	r8, [sl, #24]
   17760:	add	r3, r3, ip
   17764:	add	r9, r9, lr
   17768:	eor	r3, r3, ip, lsl #8
   1776c:	add	ip, ip, r9
   17770:	eor	ip, ip, r9, lsr #16
   17774:	add	r7, r3, r7
   17778:	add	r7, r7, r4
   1777c:	ldr	r4, [sl, #28]
   17780:	add	r8, ip, r8
   17784:	add	r9, r9, r7
   17788:	add	r5, r8, r5
   1778c:	eor	lr, r9, r7, lsl #10
   17790:	add	r7, r7, r5
   17794:	add	r8, lr, r4
   17798:	eor	r4, r7, r5, lsr #4
   1779c:	str	lr, [sl, #16]
   177a0:	add	r6, r8, r6
   177a4:	add	r1, r1, r4
   177a8:	add	r5, r5, r6
   177ac:	eor	r5, r5, r6, lsl #8
   177b0:	add	r6, r6, r1
   177b4:	eor	r6, r6, r1, lsr #9
   177b8:	add	r2, r2, r5
   177bc:	add	r1, r1, r2
   177c0:	add	r3, r3, r6
   177c4:	stm	sl, {r1, r2, r3, ip}
   177c8:	add	sl, sl, #32
   177cc:	strd	r4, [sl, #-12]
   177d0:	str	r6, [sl, #-4]
   177d4:	cmp	fp, sl
   177d8:	bne	17728 <__assert_fail@plt+0x6270>
   177dc:	mov	r3, #0
   177e0:	str	r3, [r0, #1024]	; 0x400
   177e4:	str	r3, [r0, #1028]	; 0x404
   177e8:	str	r3, [r0, #1032]	; 0x408
   177ec:	add	sp, sp, #12
   177f0:	ldrd	r4, [sp]
   177f4:	ldrd	r6, [sp, #8]
   177f8:	ldrd	r8, [sp, #16]
   177fc:	ldrd	sl, [sp, #24]
   17800:	add	sp, sp, #32
   17804:	pop	{pc}		; (ldr pc, [sp], #4)
   17808:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1780c:	mov	r5, r3
   17810:	strd	r6, [sp, #8]
   17814:	mov	r6, r1
   17818:	strd	r8, [sp, #16]
   1781c:	mov	r9, r0
   17820:	mov	r8, r2
   17824:	strd	sl, [sp, #24]
   17828:	str	lr, [sp, #32]
   1782c:	sub	sp, sp, #220	; 0xdc
   17830:	ldr	r4, [sp, #256]	; 0x100
   17834:	str	r4, [sp]
   17838:	bl	11374 <renameat2@plt>
   1783c:	subs	sl, r0, #0
   17840:	bge	178b8 <__assert_fail@plt+0x6400>
   17844:	bl	11338 <__errno_location@plt>
   17848:	ldr	r2, [r0]
   1784c:	mov	r7, r0
   17850:	sub	r3, r2, #22
   17854:	bic	r3, r3, #16
   17858:	cmp	r2, #95	; 0x5f
   1785c:	cmpne	r3, #0
   17860:	movne	fp, #1
   17864:	moveq	fp, #0
   17868:	bne	178b8 <__assert_fail@plt+0x6400>
   1786c:	cmp	r4, #0
   17870:	beq	178ec <__assert_fail@plt+0x6434>
   17874:	cmp	r4, #1
   17878:	bne	17974 <__assert_fail@plt+0x64bc>
   1787c:	mov	r0, #256	; 0x100
   17880:	add	r3, sp, #112	; 0x70
   17884:	mov	r2, r5
   17888:	mov	r1, r8
   1788c:	str	r0, [sp]
   17890:	mov	r0, #3
   17894:	bl	11218 <__fxstatat64@plt>
   17898:	cmp	r0, #0
   1789c:	beq	178d8 <__assert_fail@plt+0x6420>
   178a0:	ldr	r3, [r7]
   178a4:	cmp	r3, #75	; 0x4b
   178a8:	beq	178d8 <__assert_fail@plt+0x6420>
   178ac:	cmp	r3, #2
   178b0:	beq	178e8 <__assert_fail@plt+0x6430>
   178b4:	mvn	sl, #0
   178b8:	mov	r0, sl
   178bc:	add	sp, sp, #220	; 0xdc
   178c0:	ldrd	r4, [sp]
   178c4:	ldrd	r6, [sp, #8]
   178c8:	ldrd	r8, [sp, #16]
   178cc:	ldrd	sl, [sp, #24]
   178d0:	add	sp, sp, #32
   178d4:	pop	{pc}		; (ldr pc, [sp], #4)
   178d8:	mov	r3, #17
   178dc:	mvn	sl, #0
   178e0:	str	r3, [r7]
   178e4:	b	178b8 <__assert_fail@plt+0x6400>
   178e8:	mov	fp, r4
   178ec:	mov	r0, r6
   178f0:	bl	11314 <strlen@plt>
   178f4:	mov	r4, r0
   178f8:	mov	r0, r5
   178fc:	bl	11314 <strlen@plt>
   17900:	cmp	r0, #0
   17904:	cmpne	r4, #0
   17908:	beq	179c0 <__assert_fail@plt+0x6508>
   1790c:	add	r4, r6, r4
   17910:	add	r0, r5, r0
   17914:	ldrb	r2, [r4, #-1]
   17918:	ldrb	r3, [r0, #-1]
   1791c:	cmp	r2, #47	; 0x2f
   17920:	cmpne	r3, #47	; 0x2f
   17924:	bne	179c0 <__assert_fail@plt+0x6508>
   17928:	mov	r4, #256	; 0x100
   1792c:	add	r3, sp, #8
   17930:	mov	r2, r6
   17934:	mov	r1, r9
   17938:	mov	r0, #3
   1793c:	str	r4, [sp]
   17940:	bl	11218 <__fxstatat64@plt>
   17944:	cmp	r0, #0
   17948:	bne	178b4 <__assert_fail@plt+0x63fc>
   1794c:	cmp	fp, #0
   17950:	beq	17984 <__assert_fail@plt+0x64cc>
   17954:	ldr	r3, [sp, #24]
   17958:	and	r3, r3, #61440	; 0xf000
   1795c:	cmp	r3, #16384	; 0x4000
   17960:	beq	179c0 <__assert_fail@plt+0x6508>
   17964:	mov	r3, #2
   17968:	mvn	sl, #0
   1796c:	str	r3, [r7]
   17970:	b	178b8 <__assert_fail@plt+0x6400>
   17974:	mov	r3, #95	; 0x5f
   17978:	mvn	sl, #0
   1797c:	str	r3, [r0]
   17980:	b	178b8 <__assert_fail@plt+0x6400>
   17984:	add	r3, sp, #112	; 0x70
   17988:	mov	r2, r5
   1798c:	str	r4, [sp]
   17990:	mov	r1, r8
   17994:	mov	r0, #3
   17998:	bl	11218 <__fxstatat64@plt>
   1799c:	cmp	r0, #0
   179a0:	beq	179dc <__assert_fail@plt+0x6524>
   179a4:	ldr	r3, [r7]
   179a8:	cmp	r3, #2
   179ac:	bne	178b4 <__assert_fail@plt+0x63fc>
   179b0:	ldr	r3, [sp, #24]
   179b4:	and	r3, r3, #61440	; 0xf000
   179b8:	cmp	r3, #16384	; 0x4000
   179bc:	bne	178b4 <__assert_fail@plt+0x63fc>
   179c0:	mov	r3, r5
   179c4:	mov	r2, r8
   179c8:	mov	r1, r6
   179cc:	mov	r0, r9
   179d0:	bl	11428 <renameat@plt>
   179d4:	mov	sl, r0
   179d8:	b	178b8 <__assert_fail@plt+0x6400>
   179dc:	ldr	r3, [sp, #128]	; 0x80
   179e0:	and	r3, r3, #61440	; 0xf000
   179e4:	cmp	r3, #16384	; 0x4000
   179e8:	beq	179fc <__assert_fail@plt+0x6544>
   179ec:	mov	r3, #20
   179f0:	mvn	sl, #0
   179f4:	str	r3, [r7]
   179f8:	b	178b8 <__assert_fail@plt+0x6400>
   179fc:	ldr	r3, [sp, #24]
   17a00:	and	r3, r3, #61440	; 0xf000
   17a04:	cmp	r3, #16384	; 0x4000
   17a08:	beq	179c0 <__assert_fail@plt+0x6508>
   17a0c:	mov	r3, #21
   17a10:	mvn	sl, #0
   17a14:	str	r3, [r7]
   17a18:	b	178b8 <__assert_fail@plt+0x6400>
   17a1c:	cmp	r0, #2
   17a20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17a24:	mov	r4, r0
   17a28:	strd	r6, [sp, #8]
   17a2c:	str	r8, [sp, #16]
   17a30:	str	lr, [sp, #20]
   17a34:	bls	17a50 <__assert_fail@plt+0x6598>
   17a38:	mov	r0, r4
   17a3c:	ldrd	r4, [sp]
   17a40:	ldrd	r6, [sp, #8]
   17a44:	ldr	r8, [sp, #16]
   17a48:	add	sp, sp, #20
   17a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a50:	bl	194f4 <__assert_fail@plt+0x803c>
   17a54:	mov	r7, r0
   17a58:	bl	11338 <__errno_location@plt>
   17a5c:	mov	r5, r0
   17a60:	mov	r0, r4
   17a64:	ldr	r6, [r5]
   17a68:	mov	r4, r7
   17a6c:	bl	114ac <close@plt>
   17a70:	str	r6, [r5]
   17a74:	b	17a38 <__assert_fail@plt+0x6580>
   17a78:	cmp	r1, #0
   17a7c:	strd	r4, [sp, #-16]!
   17a80:	mov	ip, r3
   17a84:	str	r6, [sp, #8]
   17a88:	mov	r4, r0
   17a8c:	str	lr, [sp, #12]
   17a90:	sub	sp, sp, #32
   17a94:	ldr	r5, [sp, #48]	; 0x30
   17a98:	ldr	r6, [sp, #52]	; 0x34
   17a9c:	beq	17be0 <__assert_fail@plt+0x6728>
   17aa0:	mov	r3, r1
   17aa4:	mov	r1, #1
   17aa8:	stm	sp, {r2, ip}
   17aac:	movw	r2, #44376	; 0xad58
   17ab0:	movt	r2, #1
   17ab4:	bl	113a4 <__fprintf_chk@plt>
   17ab8:	mov	r2, #5
   17abc:	movw	r1, #44396	; 0xad6c
   17ac0:	movt	r1, #1
   17ac4:	mov	r0, #0
   17ac8:	bl	111e8 <dcgettext@plt>
   17acc:	movw	ip, #2022	; 0x7e6
   17ad0:	mov	r3, r0
   17ad4:	mov	r1, #1
   17ad8:	movw	r2, #45124	; 0xb044
   17adc:	movt	r2, #1
   17ae0:	mov	r0, r4
   17ae4:	str	ip, [sp]
   17ae8:	bl	113a4 <__fprintf_chk@plt>
   17aec:	mov	r1, r4
   17af0:	mov	r0, #10
   17af4:	bl	111dc <fputc_unlocked@plt>
   17af8:	mov	r2, #5
   17afc:	movw	r1, #44400	; 0xad70
   17b00:	movt	r1, #1
   17b04:	mov	r0, #0
   17b08:	bl	111e8 <dcgettext@plt>
   17b0c:	mov	r2, r0
   17b10:	mov	r1, #1
   17b14:	movw	r3, #44572	; 0xae1c
   17b18:	movt	r3, #1
   17b1c:	mov	r0, r4
   17b20:	bl	113a4 <__fprintf_chk@plt>
   17b24:	mov	r1, r4
   17b28:	mov	r0, #10
   17b2c:	bl	111dc <fputc_unlocked@plt>
   17b30:	cmp	r6, #9
   17b34:	ldrls	pc, [pc, r6, lsl #2]
   17b38:	b	17e4c <__assert_fail@plt+0x6994>
   17b3c:	andeq	r7, r1, ip, asr #23
   17b40:	strdeq	r7, [r1], -ip
   17b44:	andeq	r7, r1, r8, lsr ip
   17b48:	andeq	r7, r1, r8, ror ip
   17b4c:	andeq	r7, r1, r0, asr #25
   17b50:	strdeq	r7, [r1], -r8
   17b54:	andeq	r7, r1, r0, asr #26
   17b58:	muleq	r1, r4, sp
   17b5c:	andeq	r7, r1, ip, ror #27
   17b60:	andeq	r7, r1, r4, ror #22
   17b64:	movw	r1, #44876	; 0xaf4c
   17b68:	movt	r1, #1
   17b6c:	mov	r2, #5
   17b70:	mov	r0, #0
   17b74:	bl	111e8 <dcgettext@plt>
   17b78:	ldr	lr, [r5, #4]
   17b7c:	mov	r2, r0
   17b80:	mov	r1, #1
   17b84:	mov	r0, r4
   17b88:	ldr	r3, [r5, #8]
   17b8c:	ldr	ip, [r5, #32]
   17b90:	str	lr, [sp]
   17b94:	ldr	lr, [r5, #12]
   17b98:	str	ip, [sp, #28]
   17b9c:	ldr	ip, [r5, #28]
   17ba0:	str	r3, [sp, #4]
   17ba4:	ldr	r3, [r5, #16]
   17ba8:	str	lr, [sp, #8]
   17bac:	ldr	lr, [r5, #20]
   17bb0:	str	ip, [sp, #24]
   17bb4:	ldr	ip, [r5, #24]
   17bb8:	str	r3, [sp, #12]
   17bbc:	ldr	r3, [r5]
   17bc0:	str	lr, [sp, #16]
   17bc4:	str	ip, [sp, #20]
   17bc8:	bl	113a4 <__fprintf_chk@plt>
   17bcc:	add	sp, sp, #32
   17bd0:	ldrd	r4, [sp]
   17bd4:	ldr	r6, [sp, #8]
   17bd8:	add	sp, sp, #12
   17bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   17be0:	mov	r3, r2
   17be4:	mov	r1, #1
   17be8:	str	ip, [sp]
   17bec:	movw	r2, #44388	; 0xad64
   17bf0:	movt	r2, #1
   17bf4:	bl	113a4 <__fprintf_chk@plt>
   17bf8:	b	17ab8 <__assert_fail@plt+0x6600>
   17bfc:	mov	r2, #5
   17c00:	movw	r1, #44608	; 0xae40
   17c04:	movt	r1, #1
   17c08:	mov	r0, #0
   17c0c:	bl	111e8 <dcgettext@plt>
   17c10:	ldr	r3, [r5]
   17c14:	mov	r2, r0
   17c18:	mov	r1, #1
   17c1c:	mov	r0, r4
   17c20:	add	sp, sp, #32
   17c24:	ldrd	r4, [sp]
   17c28:	ldr	r6, [sp, #8]
   17c2c:	ldr	lr, [sp, #12]
   17c30:	add	sp, sp, #16
   17c34:	b	113a4 <__fprintf_chk@plt>
   17c38:	mov	r2, #5
   17c3c:	movw	r1, #44624	; 0xae50
   17c40:	movt	r1, #1
   17c44:	mov	r0, #0
   17c48:	bl	111e8 <dcgettext@plt>
   17c4c:	ldm	r5, {r3, ip}
   17c50:	mov	r2, r0
   17c54:	mov	r1, #1
   17c58:	mov	r0, r4
   17c5c:	str	ip, [sp, #48]	; 0x30
   17c60:	add	sp, sp, #32
   17c64:	ldrd	r4, [sp]
   17c68:	ldr	r6, [sp, #8]
   17c6c:	ldr	lr, [sp, #12]
   17c70:	add	sp, sp, #16
   17c74:	b	113a4 <__fprintf_chk@plt>
   17c78:	mov	r2, #5
   17c7c:	movw	r1, #44648	; 0xae68
   17c80:	movt	r1, #1
   17c84:	mov	r0, #0
   17c88:	bl	111e8 <dcgettext@plt>
   17c8c:	ldm	r5, {r3, lr}
   17c90:	mov	r2, r0
   17c94:	mov	r1, #1
   17c98:	mov	r0, r4
   17c9c:	ldr	ip, [r5, #8]
   17ca0:	str	lr, [sp, #48]	; 0x30
   17ca4:	str	ip, [sp, #52]	; 0x34
   17ca8:	add	sp, sp, #32
   17cac:	ldrd	r4, [sp]
   17cb0:	ldr	r6, [sp, #8]
   17cb4:	ldr	lr, [sp, #12]
   17cb8:	add	sp, sp, #16
   17cbc:	b	113a4 <__fprintf_chk@plt>
   17cc0:	mov	r2, #5
   17cc4:	movw	r1, #44676	; 0xae84
   17cc8:	movt	r1, #1
   17ccc:	mov	r0, #0
   17cd0:	bl	111e8 <dcgettext@plt>
   17cd4:	ldmib	r5, {r3, ip, lr}
   17cd8:	mov	r2, r0
   17cdc:	mov	r1, #1
   17ce0:	mov	r0, r4
   17ce4:	str	r3, [sp]
   17ce8:	ldr	r3, [r5]
   17cec:	stmib	sp, {ip, lr}
   17cf0:	bl	113a4 <__fprintf_chk@plt>
   17cf4:	b	17bcc <__assert_fail@plt+0x6714>
   17cf8:	mov	r2, #5
   17cfc:	movw	r1, #44708	; 0xaea4
   17d00:	movt	r1, #1
   17d04:	mov	r0, #0
   17d08:	bl	111e8 <dcgettext@plt>
   17d0c:	ldmib	r5, {ip, lr}
   17d10:	mov	r2, r0
   17d14:	mov	r1, #1
   17d18:	mov	r0, r4
   17d1c:	ldr	r3, [r5, #16]
   17d20:	str	ip, [sp]
   17d24:	ldr	ip, [r5, #12]
   17d28:	str	r3, [sp, #12]
   17d2c:	ldr	r3, [r5]
   17d30:	str	lr, [sp, #4]
   17d34:	str	ip, [sp, #8]
   17d38:	bl	113a4 <__fprintf_chk@plt>
   17d3c:	b	17bcc <__assert_fail@plt+0x6714>
   17d40:	mov	r2, #5
   17d44:	movw	r1, #44744	; 0xaec8
   17d48:	movt	r1, #1
   17d4c:	mov	r0, #0
   17d50:	bl	111e8 <dcgettext@plt>
   17d54:	ldr	lr, [r5, #4]
   17d58:	mov	r2, r0
   17d5c:	mov	r1, #1
   17d60:	mov	r0, r4
   17d64:	ldr	r3, [r5, #8]
   17d68:	ldr	ip, [r5, #20]
   17d6c:	str	lr, [sp]
   17d70:	ldr	lr, [r5, #12]
   17d74:	str	ip, [sp, #16]
   17d78:	ldr	ip, [r5, #16]
   17d7c:	str	r3, [sp, #4]
   17d80:	ldr	r3, [r5]
   17d84:	str	lr, [sp, #8]
   17d88:	str	ip, [sp, #12]
   17d8c:	bl	113a4 <__fprintf_chk@plt>
   17d90:	b	17bcc <__assert_fail@plt+0x6714>
   17d94:	mov	r2, #5
   17d98:	movw	r1, #44784	; 0xaef0
   17d9c:	movt	r1, #1
   17da0:	mov	r0, #0
   17da4:	bl	111e8 <dcgettext@plt>
   17da8:	ldmib	r5, {r3, ip}
   17dac:	mov	r2, r0
   17db0:	mov	r1, #1
   17db4:	mov	r0, r4
   17db8:	ldr	lr, [r5, #24]
   17dbc:	str	r3, [sp]
   17dc0:	ldr	r3, [r5, #12]
   17dc4:	str	lr, [sp, #20]
   17dc8:	ldr	lr, [r5, #20]
   17dcc:	str	ip, [sp, #4]
   17dd0:	ldr	ip, [r5, #16]
   17dd4:	str	r3, [sp, #8]
   17dd8:	ldr	r3, [r5]
   17ddc:	str	ip, [sp, #12]
   17de0:	str	lr, [sp, #16]
   17de4:	bl	113a4 <__fprintf_chk@plt>
   17de8:	b	17bcc <__assert_fail@plt+0x6714>
   17dec:	mov	r2, #5
   17df0:	movw	r1, #44828	; 0xaf1c
   17df4:	movt	r1, #1
   17df8:	mov	r0, #0
   17dfc:	bl	111e8 <dcgettext@plt>
   17e00:	ldmib	r5, {ip, lr}
   17e04:	mov	r2, r0
   17e08:	mov	r1, #1
   17e0c:	mov	r0, r4
   17e10:	ldr	r3, [r5, #28]
   17e14:	str	ip, [sp]
   17e18:	ldr	ip, [r5, #12]
   17e1c:	str	r3, [sp, #24]
   17e20:	ldr	r3, [r5, #24]
   17e24:	str	lr, [sp, #4]
   17e28:	ldr	lr, [r5, #16]
   17e2c:	str	ip, [sp, #8]
   17e30:	ldr	ip, [r5, #20]
   17e34:	str	r3, [sp, #20]
   17e38:	ldr	r3, [r5]
   17e3c:	str	lr, [sp, #12]
   17e40:	str	ip, [sp, #16]
   17e44:	bl	113a4 <__fprintf_chk@plt>
   17e48:	b	17bcc <__assert_fail@plt+0x6714>
   17e4c:	movw	r1, #44928	; 0xaf80
   17e50:	movt	r1, #1
   17e54:	b	17b6c <__assert_fail@plt+0x66b4>
   17e58:	strd	r4, [sp, #-12]!
   17e5c:	str	lr, [sp, #8]
   17e60:	sub	sp, sp, #12
   17e64:	ldr	r5, [sp, #24]
   17e68:	ldr	ip, [r5]
   17e6c:	cmp	ip, #0
   17e70:	beq	17e8c <__assert_fail@plt+0x69d4>
   17e74:	mov	lr, r5
   17e78:	mov	ip, #0
   17e7c:	ldr	r4, [lr, #4]!
   17e80:	add	ip, ip, #1
   17e84:	cmp	r4, #0
   17e88:	bne	17e7c <__assert_fail@plt+0x69c4>
   17e8c:	stm	sp, {r5, ip}
   17e90:	bl	17a78 <__assert_fail@plt+0x65c0>
   17e94:	add	sp, sp, #12
   17e98:	ldrd	r4, [sp]
   17e9c:	add	sp, sp, #8
   17ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ea4:	strd	r4, [sp, #-16]!
   17ea8:	mov	ip, #0
   17eac:	str	r6, [sp, #8]
   17eb0:	str	lr, [sp, #12]
   17eb4:	sub	sp, sp, #48	; 0x30
   17eb8:	ldr	r5, [sp, #64]	; 0x40
   17ebc:	add	r6, sp, #8
   17ec0:	mov	r4, r6
   17ec4:	ldr	lr, [r5], #4
   17ec8:	cmp	lr, #0
   17ecc:	str	lr, [r4], #4
   17ed0:	beq	17ee0 <__assert_fail@plt+0x6a28>
   17ed4:	add	ip, ip, #1
   17ed8:	cmp	ip, #10
   17edc:	bne	17ec4 <__assert_fail@plt+0x6a0c>
   17ee0:	stm	sp, {r6, ip}
   17ee4:	bl	17a78 <__assert_fail@plt+0x65c0>
   17ee8:	add	sp, sp, #48	; 0x30
   17eec:	ldrd	r4, [sp]
   17ef0:	ldr	r6, [sp, #8]
   17ef4:	add	sp, sp, #12
   17ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   17efc:	push	{r3}		; (str r3, [sp, #-4]!)
   17f00:	mov	ip, #0
   17f04:	strd	r4, [sp, #-12]!
   17f08:	str	lr, [sp, #8]
   17f0c:	sub	sp, sp, #56	; 0x38
   17f10:	add	r3, sp, #72	; 0x48
   17f14:	add	r5, sp, #16
   17f18:	mov	r4, r3
   17f1c:	mov	lr, r5
   17f20:	str	r3, [sp, #12]
   17f24:	ldr	r3, [r4], #4
   17f28:	cmp	r3, #0
   17f2c:	str	r3, [lr], #4
   17f30:	beq	17f40 <__assert_fail@plt+0x6a88>
   17f34:	add	ip, ip, #1
   17f38:	cmp	ip, #10
   17f3c:	bne	17f24 <__assert_fail@plt+0x6a6c>
   17f40:	ldr	r3, [sp, #68]	; 0x44
   17f44:	stm	sp, {r5, ip}
   17f48:	bl	17a78 <__assert_fail@plt+0x65c0>
   17f4c:	add	sp, sp, #56	; 0x38
   17f50:	ldrd	r4, [sp]
   17f54:	ldr	lr, [sp, #8]
   17f58:	add	sp, sp, #12
   17f5c:	add	sp, sp, #4
   17f60:	bx	lr
   17f64:	movw	r3, #49588	; 0xc1b4
   17f68:	movt	r3, #2
   17f6c:	str	r4, [sp, #-8]!
   17f70:	mov	r0, #10
   17f74:	ldr	r1, [r3]
   17f78:	str	lr, [sp, #4]
   17f7c:	bl	111dc <fputc_unlocked@plt>
   17f80:	mov	r2, #5
   17f84:	movw	r1, #44988	; 0xafbc
   17f88:	movt	r1, #1
   17f8c:	mov	r0, #0
   17f90:	bl	111e8 <dcgettext@plt>
   17f94:	mov	r1, r0
   17f98:	movw	r2, #45008	; 0xafd0
   17f9c:	movt	r2, #1
   17fa0:	mov	r0, #1
   17fa4:	bl	11380 <__printf_chk@plt>
   17fa8:	mov	r2, #5
   17fac:	movw	r1, #45032	; 0xafe8
   17fb0:	movt	r1, #1
   17fb4:	mov	r0, #0
   17fb8:	bl	111e8 <dcgettext@plt>
   17fbc:	mov	r1, r0
   17fc0:	movw	r3, #42944	; 0xa7c0
   17fc4:	movt	r3, #1
   17fc8:	movw	r2, #42984	; 0xa7e8
   17fcc:	movt	r2, #1
   17fd0:	mov	r0, #1
   17fd4:	bl	11380 <__printf_chk@plt>
   17fd8:	mov	r2, #5
   17fdc:	movw	r1, #45052	; 0xaffc
   17fe0:	movt	r1, #1
   17fe4:	mov	r0, #0
   17fe8:	bl	111e8 <dcgettext@plt>
   17fec:	mov	r1, r0
   17ff0:	movw	r2, #45092	; 0xb024
   17ff4:	movt	r2, #1
   17ff8:	mov	r0, #1
   17ffc:	ldr	r4, [sp]
   18000:	ldr	lr, [sp, #4]
   18004:	add	sp, sp, #8
   18008:	b	11380 <__printf_chk@plt>
   1800c:	str	r4, [sp, #-8]!
   18010:	str	lr, [sp, #4]
   18014:	bl	11458 <aligned_alloc@plt>
   18018:	cmp	r0, #0
   1801c:	beq	1802c <__assert_fail@plt+0x6b74>
   18020:	ldr	r4, [sp]
   18024:	add	sp, sp, #4
   18028:	pop	{pc}		; (ldr pc, [sp], #4)
   1802c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18030:	str	r4, [sp, #-8]!
   18034:	str	lr, [sp, #4]
   18038:	bl	19054 <__assert_fail@plt+0x7b9c>
   1803c:	cmp	r0, #0
   18040:	beq	18050 <__assert_fail@plt+0x6b98>
   18044:	ldr	r4, [sp]
   18048:	add	sp, sp, #4
   1804c:	pop	{pc}		; (ldr pc, [sp], #4)
   18050:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18054:	str	r4, [sp, #-8]!
   18058:	str	lr, [sp, #4]
   1805c:	bl	19054 <__assert_fail@plt+0x7b9c>
   18060:	cmp	r0, #0
   18064:	beq	18074 <__assert_fail@plt+0x6bbc>
   18068:	ldr	r4, [sp]
   1806c:	add	sp, sp, #4
   18070:	pop	{pc}		; (ldr pc, [sp], #4)
   18074:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18078:	str	r4, [sp, #-8]!
   1807c:	str	lr, [sp, #4]
   18080:	bl	19054 <__assert_fail@plt+0x7b9c>
   18084:	cmp	r0, #0
   18088:	beq	18098 <__assert_fail@plt+0x6be0>
   1808c:	ldr	r4, [sp]
   18090:	add	sp, sp, #4
   18094:	pop	{pc}		; (ldr pc, [sp], #4)
   18098:	bl	184a8 <__assert_fail@plt+0x6ff0>
   1809c:	strd	r4, [sp, #-16]!
   180a0:	mov	r5, r0
   180a4:	mov	r4, r1
   180a8:	str	r6, [sp, #8]
   180ac:	str	lr, [sp, #12]
   180b0:	bl	19090 <__assert_fail@plt+0x7bd8>
   180b4:	cmp	r0, #0
   180b8:	beq	180cc <__assert_fail@plt+0x6c14>
   180bc:	ldrd	r4, [sp]
   180c0:	ldr	r6, [sp, #8]
   180c4:	add	sp, sp, #12
   180c8:	pop	{pc}		; (ldr pc, [sp], #4)
   180cc:	adds	r4, r4, #0
   180d0:	movne	r4, #1
   180d4:	cmp	r5, #0
   180d8:	moveq	r4, #1
   180dc:	cmp	r4, #0
   180e0:	beq	180bc <__assert_fail@plt+0x6c04>
   180e4:	bl	184a8 <__assert_fail@plt+0x6ff0>
   180e8:	cmp	r1, #0
   180ec:	orreq	r1, r1, #1
   180f0:	str	r4, [sp, #-8]!
   180f4:	str	lr, [sp, #4]
   180f8:	bl	19090 <__assert_fail@plt+0x7bd8>
   180fc:	cmp	r0, #0
   18100:	beq	18110 <__assert_fail@plt+0x6c58>
   18104:	ldr	r4, [sp]
   18108:	add	sp, sp, #4
   1810c:	pop	{pc}		; (ldr pc, [sp], #4)
   18110:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18114:	strd	r4, [sp, #-16]!
   18118:	mov	r4, r0
   1811c:	mov	r5, r2
   18120:	str	r6, [sp, #8]
   18124:	mov	r6, r1
   18128:	str	lr, [sp, #12]
   1812c:	bl	194bc <__assert_fail@plt+0x8004>
   18130:	cmp	r0, #0
   18134:	beq	18148 <__assert_fail@plt+0x6c90>
   18138:	ldrd	r4, [sp]
   1813c:	ldr	r6, [sp, #8]
   18140:	add	sp, sp, #12
   18144:	pop	{pc}		; (ldr pc, [sp], #4)
   18148:	cmp	r4, #0
   1814c:	beq	1815c <__assert_fail@plt+0x6ca4>
   18150:	cmp	r6, #0
   18154:	cmpne	r5, #0
   18158:	beq	18138 <__assert_fail@plt+0x6c80>
   1815c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18160:	b	18114 <__assert_fail@plt+0x6c5c>
   18164:	cmp	r2, #0
   18168:	cmpne	r1, #0
   1816c:	str	r4, [sp, #-8]!
   18170:	moveq	r2, #1
   18174:	str	lr, [sp, #4]
   18178:	moveq	r1, r2
   1817c:	bl	194bc <__assert_fail@plt+0x8004>
   18180:	cmp	r0, #0
   18184:	beq	18194 <__assert_fail@plt+0x6cdc>
   18188:	ldr	r4, [sp]
   1818c:	add	sp, sp, #4
   18190:	pop	{pc}		; (ldr pc, [sp], #4)
   18194:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18198:	mov	r2, r1
   1819c:	mov	r1, r0
   181a0:	mov	r0, #0
   181a4:	b	18114 <__assert_fail@plt+0x6c5c>
   181a8:	mov	r2, r1
   181ac:	mov	r1, r0
   181b0:	mov	r0, #0
   181b4:	b	18164 <__assert_fail@plt+0x6cac>
   181b8:	cmp	r0, #0
   181bc:	strd	r4, [sp, #-16]!
   181c0:	mov	r5, r1
   181c4:	ldr	r4, [r1]
   181c8:	str	r6, [sp, #8]
   181cc:	str	lr, [sp, #12]
   181d0:	beq	18200 <__assert_fail@plt+0x6d48>
   181d4:	lsr	r3, r4, #1
   181d8:	add	r3, r3, #1
   181dc:	adds	r4, r4, r3
   181e0:	bcs	1821c <__assert_fail@plt+0x6d64>
   181e4:	mov	r1, r4
   181e8:	bl	18114 <__assert_fail@plt+0x6c5c>
   181ec:	ldr	r6, [sp, #8]
   181f0:	str	r4, [r5]
   181f4:	ldrd	r4, [sp]
   181f8:	add	sp, sp, #12
   181fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18200:	cmp	r4, #0
   18204:	bne	181e4 <__assert_fail@plt+0x6d2c>
   18208:	mov	r4, #64	; 0x40
   1820c:	udiv	r4, r4, r2
   18210:	cmp	r2, #64	; 0x40
   18214:	addhi	r4, r4, #1
   18218:	b	181e4 <__assert_fail@plt+0x6d2c>
   1821c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18220:	mov	r2, #1
   18224:	b	181b8 <__assert_fail@plt+0x6d00>
   18228:	ldr	ip, [r1]
   1822c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18230:	mov	r5, r1
   18234:	strd	r6, [sp, #8]
   18238:	str	lr, [sp, #28]
   1823c:	strd	r8, [sp, #16]
   18240:	asr	lr, ip, #1
   18244:	ldr	r8, [sp, #32]
   18248:	str	sl, [sp, #24]
   1824c:	adds	r4, ip, lr
   18250:	mvn	lr, r3
   18254:	lsr	lr, lr, #31
   18258:	mvnvs	r4, #-2147483648	; 0x80000000
   1825c:	cmp	r3, r4
   18260:	movge	r1, #0
   18264:	andlt	r1, lr, #1
   18268:	cmp	r1, #0
   1826c:	movne	r4, r3
   18270:	smull	r6, r7, r4, r8
   18274:	cmp	r7, r6, asr #31
   18278:	bne	18300 <__assert_fail@plt+0x6e48>
   1827c:	cmp	r6, #63	; 0x3f
   18280:	mov	r1, r6
   18284:	ble	182e8 <__assert_fail@plt+0x6e30>
   18288:	cmp	r0, #0
   1828c:	sub	r6, r4, ip
   18290:	streq	r0, [r5]
   18294:	cmp	r6, r2
   18298:	bge	182c8 <__assert_fail@plt+0x6e10>
   1829c:	adds	r4, ip, r2
   182a0:	bvs	182fc <__assert_fail@plt+0x6e44>
   182a4:	cmp	r4, r3
   182a8:	movle	r3, #0
   182ac:	andgt	r3, lr, #1
   182b0:	cmp	r3, #0
   182b4:	bne	182fc <__assert_fail@plt+0x6e44>
   182b8:	smull	r8, r9, r4, r8
   182bc:	cmp	r9, r8, asr #31
   182c0:	mov	r1, r8
   182c4:	bne	182fc <__assert_fail@plt+0x6e44>
   182c8:	bl	1809c <__assert_fail@plt+0x6be4>
   182cc:	ldrd	r6, [sp, #8]
   182d0:	ldrd	r8, [sp, #16]
   182d4:	ldr	sl, [sp, #24]
   182d8:	str	r4, [r5]
   182dc:	ldrd	r4, [sp]
   182e0:	add	sp, sp, #28
   182e4:	pop	{pc}		; (ldr pc, [sp], #4)
   182e8:	mov	r6, #64	; 0x40
   182ec:	sdiv	r4, r6, r8
   182f0:	mls	r1, r8, r4, r6
   182f4:	sub	r1, r6, r1
   182f8:	b	18288 <__assert_fail@plt+0x6dd0>
   182fc:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18300:	mvn	r6, #-2147483648	; 0x80000000
   18304:	b	182ec <__assert_fail@plt+0x6e34>
   18308:	mov	r1, #1
   1830c:	str	r4, [sp, #-8]!
   18310:	str	lr, [sp, #4]
   18314:	bl	18fe0 <__assert_fail@plt+0x7b28>
   18318:	cmp	r0, #0
   1831c:	beq	1832c <__assert_fail@plt+0x6e74>
   18320:	ldr	r4, [sp]
   18324:	add	sp, sp, #4
   18328:	pop	{pc}		; (ldr pc, [sp], #4)
   1832c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18330:	mov	r1, #1
   18334:	str	r4, [sp, #-8]!
   18338:	str	lr, [sp, #4]
   1833c:	bl	18fe0 <__assert_fail@plt+0x7b28>
   18340:	cmp	r0, #0
   18344:	beq	18354 <__assert_fail@plt+0x6e9c>
   18348:	ldr	r4, [sp]
   1834c:	add	sp, sp, #4
   18350:	pop	{pc}		; (ldr pc, [sp], #4)
   18354:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18358:	str	r4, [sp, #-8]!
   1835c:	str	lr, [sp, #4]
   18360:	bl	18fe0 <__assert_fail@plt+0x7b28>
   18364:	cmp	r0, #0
   18368:	beq	18378 <__assert_fail@plt+0x6ec0>
   1836c:	ldr	r4, [sp]
   18370:	add	sp, sp, #4
   18374:	pop	{pc}		; (ldr pc, [sp], #4)
   18378:	bl	184a8 <__assert_fail@plt+0x6ff0>
   1837c:	str	r4, [sp, #-8]!
   18380:	str	lr, [sp, #4]
   18384:	bl	18fe0 <__assert_fail@plt+0x7b28>
   18388:	cmp	r0, #0
   1838c:	beq	1839c <__assert_fail@plt+0x6ee4>
   18390:	ldr	r4, [sp]
   18394:	add	sp, sp, #4
   18398:	pop	{pc}		; (ldr pc, [sp], #4)
   1839c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   183a0:	strd	r4, [sp, #-16]!
   183a4:	mov	r4, r1
   183a8:	str	r6, [sp, #8]
   183ac:	mov	r6, r0
   183b0:	mov	r0, r1
   183b4:	str	lr, [sp, #12]
   183b8:	bl	19054 <__assert_fail@plt+0x7b9c>
   183bc:	subs	r5, r0, #0
   183c0:	beq	183e4 <__assert_fail@plt+0x6f2c>
   183c4:	mov	r2, r4
   183c8:	mov	r1, r6
   183cc:	bl	11194 <memcpy@plt>
   183d0:	mov	r0, r5
   183d4:	ldrd	r4, [sp]
   183d8:	ldr	r6, [sp, #8]
   183dc:	add	sp, sp, #12
   183e0:	pop	{pc}		; (ldr pc, [sp], #4)
   183e4:	bl	184a8 <__assert_fail@plt+0x6ff0>
   183e8:	strd	r4, [sp, #-16]!
   183ec:	mov	r4, r1
   183f0:	str	r6, [sp, #8]
   183f4:	mov	r6, r0
   183f8:	mov	r0, r1
   183fc:	str	lr, [sp, #12]
   18400:	bl	19054 <__assert_fail@plt+0x7b9c>
   18404:	subs	r5, r0, #0
   18408:	beq	1842c <__assert_fail@plt+0x6f74>
   1840c:	mov	r2, r4
   18410:	mov	r1, r6
   18414:	bl	11194 <memcpy@plt>
   18418:	mov	r0, r5
   1841c:	ldrd	r4, [sp]
   18420:	ldr	r6, [sp, #8]
   18424:	add	sp, sp, #12
   18428:	pop	{pc}		; (ldr pc, [sp], #4)
   1842c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18430:	strd	r4, [sp, #-16]!
   18434:	mov	r4, r1
   18438:	str	r6, [sp, #8]
   1843c:	mov	r6, r0
   18440:	add	r0, r1, #1
   18444:	str	lr, [sp, #12]
   18448:	bl	19054 <__assert_fail@plt+0x7b9c>
   1844c:	subs	r5, r0, #0
   18450:	beq	1847c <__assert_fail@plt+0x6fc4>
   18454:	mov	r3, #0
   18458:	mov	r1, r6
   1845c:	mov	r2, r4
   18460:	strb	r3, [r5, r4]
   18464:	bl	11194 <memcpy@plt>
   18468:	mov	r0, r5
   1846c:	ldrd	r4, [sp]
   18470:	ldr	r6, [sp, #8]
   18474:	add	sp, sp, #12
   18478:	pop	{pc}		; (ldr pc, [sp], #4)
   1847c:	bl	184a8 <__assert_fail@plt+0x6ff0>
   18480:	str	r4, [sp, #-8]!
   18484:	mov	r4, r0
   18488:	str	lr, [sp, #4]
   1848c:	bl	11314 <strlen@plt>
   18490:	add	r1, r0, #1
   18494:	mov	r0, r4
   18498:	ldr	r4, [sp]
   1849c:	ldr	lr, [sp, #4]
   184a0:	add	sp, sp, #8
   184a4:	b	183a0 <__assert_fail@plt+0x6ee8>
   184a8:	movw	r3, #49496	; 0xc158
   184ac:	movt	r3, #2
   184b0:	str	r4, [sp, #-8]!
   184b4:	ldr	r4, [r3]
   184b8:	mov	r2, #5
   184bc:	movw	r1, #45172	; 0xb074
   184c0:	movt	r1, #1
   184c4:	mov	r0, #0
   184c8:	str	lr, [sp, #4]
   184cc:	bl	111e8 <dcgettext@plt>
   184d0:	mov	r3, r0
   184d4:	movw	r2, #43924	; 0xab94
   184d8:	movt	r2, #1
   184dc:	mov	r1, #0
   184e0:	mov	r0, r4
   184e4:	bl	1129c <error@plt>
   184e8:	bl	114a0 <abort@plt>
   184ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   184f0:	strd	r6, [sp, #8]
   184f4:	mov	r6, r2
   184f8:	mov	r7, r3
   184fc:	str	r8, [sp, #16]
   18500:	mov	r2, r1
   18504:	mov	r1, #0
   18508:	str	lr, [sp, #20]
   1850c:	sub	sp, sp, #16
   18510:	mov	r8, r0
   18514:	ldr	ip, [sp, #48]	; 0x30
   18518:	add	r3, sp, #8
   1851c:	str	ip, [sp]
   18520:	bl	18638 <__assert_fail@plt+0x7180>
   18524:	subs	r4, r0, #0
   18528:	bne	18578 <__assert_fail@plt+0x70c0>
   1852c:	ldrd	r4, [sp, #8]
   18530:	ldrd	r0, [sp, #40]	; 0x28
   18534:	cmp	r5, r7
   18538:	cmpeq	r4, r6
   1853c:	movcc	r3, #1
   18540:	movcs	r3, #0
   18544:	cmp	r5, r1
   18548:	cmpeq	r4, r0
   1854c:	orrhi	r3, r3, #1
   18550:	cmp	r3, #0
   18554:	bne	185f8 <__assert_fail@plt+0x7140>
   18558:	mov	r0, r4
   1855c:	mov	r1, r5
   18560:	add	sp, sp, #16
   18564:	ldrd	r4, [sp]
   18568:	ldrd	r6, [sp, #8]
   1856c:	ldr	r8, [sp, #16]
   18570:	add	sp, sp, #20
   18574:	pop	{pc}		; (ldr pc, [sp], #4)
   18578:	bl	11338 <__errno_location@plt>
   1857c:	cmp	r4, #1
   18580:	moveq	r3, #75	; 0x4b
   18584:	moveq	r4, r3
   18588:	streq	r3, [r0]
   1858c:	beq	185e0 <__assert_fail@plt+0x7128>
   18590:	cmp	r4, #3
   18594:	beq	185d4 <__assert_fail@plt+0x711c>
   18598:	ldr	r3, [sp, #56]	; 0x38
   1859c:	ldr	r4, [r0]
   185a0:	cmp	r3, #0
   185a4:	beq	185ec <__assert_fail@plt+0x7134>
   185a8:	cmp	r4, #22
   185ac:	moveq	r4, #0
   185b0:	mov	r0, r8
   185b4:	bl	16d44 <__assert_fail@plt+0x588c>
   185b8:	movw	r2, #43920	; 0xab90
   185bc:	movt	r2, #1
   185c0:	str	r0, [sp]
   185c4:	mov	r1, r4
   185c8:	ldr	r3, [sp, #52]	; 0x34
   185cc:	ldr	r0, [sp, #56]	; 0x38
   185d0:	bl	1129c <error@plt>
   185d4:	mov	r3, #0
   185d8:	mov	r4, r3
   185dc:	str	r3, [r0]
   185e0:	ldr	r3, [sp, #56]	; 0x38
   185e4:	cmp	r3, #0
   185e8:	bne	185b0 <__assert_fail@plt+0x70f8>
   185ec:	mov	r3, #1
   185f0:	str	r3, [sp, #56]	; 0x38
   185f4:	b	185a8 <__assert_fail@plt+0x70f0>
   185f8:	bl	11338 <__errno_location@plt>
   185fc:	mov	r3, #0
   18600:	mvn	r2, #-1073741824	; 0xc0000000
   18604:	cmp	r5, r3
   18608:	cmpeq	r4, r2
   1860c:	movhi	r3, #75	; 0x4b
   18610:	movls	r3, #34	; 0x22
   18614:	mov	r4, r3
   18618:	str	r3, [r0]
   1861c:	ldr	r3, [sp, #56]	; 0x38
   18620:	cmp	r3, #0
   18624:	moveq	r3, #1
   18628:	str	r3, [sp, #56]	; 0x38
   1862c:	b	185b0 <__assert_fail@plt+0x70f8>
   18630:	mov	r1, #10
   18634:	b	184ec <__assert_fail@plt+0x7034>
   18638:	cmp	r2, #36	; 0x24
   1863c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18640:	strd	r6, [sp, #8]
   18644:	strd	r8, [sp, #16]
   18648:	strd	sl, [sp, #24]
   1864c:	str	lr, [sp, #32]
   18650:	sub	sp, sp, #36	; 0x24
   18654:	bhi	18ee4 <__assert_fail@plt+0x7a2c>
   18658:	cmp	r1, #0
   1865c:	mov	r8, r2
   18660:	mov	r6, r0
   18664:	mov	r5, r1
   18668:	mov	sl, r3
   1866c:	addeq	r5, sp, #28
   18670:	bl	11338 <__errno_location@plt>
   18674:	mov	r3, #0
   18678:	mov	r7, r0
   1867c:	str	r3, [r0]
   18680:	bl	112fc <__ctype_b_loc@plt>
   18684:	ldrb	r3, [r6]
   18688:	mov	r2, r6
   1868c:	ldr	r0, [r0]
   18690:	b	18698 <__assert_fail@plt+0x71e0>
   18694:	ldrb	r3, [r2, #1]!
   18698:	lsl	r1, r3, #1
   1869c:	ldrh	r4, [r0, r1]
   186a0:	ands	r4, r4, #8192	; 0x2000
   186a4:	bne	18694 <__assert_fail@plt+0x71dc>
   186a8:	cmp	r3, #45	; 0x2d
   186ac:	beq	1874c <__assert_fail@plt+0x7294>
   186b0:	mov	r2, r8
   186b4:	mov	r3, r4
   186b8:	mov	r1, r5
   186bc:	mov	r0, r6
   186c0:	bl	111a0 <__strtoull_internal@plt>
   186c4:	ldr	fp, [r5]
   186c8:	mov	r9, r0
   186cc:	mov	r8, r1
   186d0:	cmp	fp, r6
   186d4:	beq	18734 <__assert_fail@plt+0x727c>
   186d8:	ldr	r4, [r7]
   186dc:	cmp	r4, #0
   186e0:	bne	18724 <__assert_fail@plt+0x726c>
   186e4:	ldr	r3, [sp, #72]	; 0x48
   186e8:	cmp	r3, #0
   186ec:	beq	186fc <__assert_fail@plt+0x7244>
   186f0:	ldrb	r6, [fp]
   186f4:	cmp	r6, #0
   186f8:	bne	18a3c <__assert_fail@plt+0x7584>
   186fc:	str	r9, [sl]
   18700:	str	r8, [sl, #4]
   18704:	mov	r0, r4
   18708:	add	sp, sp, #36	; 0x24
   1870c:	ldrd	r4, [sp]
   18710:	ldrd	r6, [sp, #8]
   18714:	ldrd	r8, [sp, #16]
   18718:	ldrd	sl, [sp, #24]
   1871c:	add	sp, sp, #32
   18720:	pop	{pc}		; (ldr pc, [sp], #4)
   18724:	cmp	r4, #34	; 0x22
   18728:	bne	1874c <__assert_fail@plt+0x7294>
   1872c:	mov	r4, #1
   18730:	b	186e4 <__assert_fail@plt+0x722c>
   18734:	ldr	r3, [sp, #72]	; 0x48
   18738:	cmp	r3, #0
   1873c:	beq	1874c <__assert_fail@plt+0x7294>
   18740:	ldrb	r6, [r6]
   18744:	cmp	r6, #0
   18748:	bne	18754 <__assert_fail@plt+0x729c>
   1874c:	mov	r4, #4
   18750:	b	18704 <__assert_fail@plt+0x724c>
   18754:	mov	r1, r6
   18758:	mov	r0, r3
   1875c:	bl	11320 <strchr@plt>
   18760:	cmp	r0, #0
   18764:	movne	r9, #1
   18768:	movne	r8, #0
   1876c:	beq	1874c <__assert_fail@plt+0x7294>
   18770:	sub	r3, r6, #69	; 0x45
   18774:	cmp	r3, #47	; 0x2f
   18778:	ldrls	pc, [pc, r3, lsl #2]
   1877c:	b	18884 <__assert_fail@plt+0x73cc>
   18780:	andeq	r8, r1, r0, asr #16
   18784:	andeq	r8, r1, r4, lsl #17
   18788:	andeq	r8, r1, r0, asr #16
   1878c:	andeq	r8, r1, r4, lsl #17
   18790:	andeq	r8, r1, r4, lsl #17
   18794:	andeq	r8, r1, r4, lsl #17
   18798:	andeq	r8, r1, r0, asr #16
   1879c:	andeq	r8, r1, r4, lsl #17
   187a0:	andeq	r8, r1, r0, asr #16
   187a4:	andeq	r8, r1, r4, lsl #17
   187a8:	andeq	r8, r1, r4, lsl #17
   187ac:	andeq	r8, r1, r0, asr #16
   187b0:	andeq	r8, r1, r4, lsl #17
   187b4:	andeq	r8, r1, r4, lsl #17
   187b8:	andeq	r8, r1, r4, lsl #17
   187bc:	andeq	r8, r1, r0, asr #16
   187c0:	andeq	r8, r1, r4, lsl #17
   187c4:	andeq	r8, r1, r4, lsl #17
   187c8:	andeq	r8, r1, r4, lsl #17
   187cc:	andeq	r8, r1, r4, lsl #17
   187d0:	andeq	r8, r1, r0, asr #16
   187d4:	andeq	r8, r1, r0, asr #16
   187d8:	andeq	r8, r1, r4, lsl #17
   187dc:	andeq	r8, r1, r4, lsl #17
   187e0:	andeq	r8, r1, r4, lsl #17
   187e4:	andeq	r8, r1, r4, lsl #17
   187e8:	andeq	r8, r1, r4, lsl #17
   187ec:	andeq	r8, r1, r4, lsl #17
   187f0:	andeq	r8, r1, r4, lsl #17
   187f4:	andeq	r8, r1, r4, lsl #17
   187f8:	andeq	r8, r1, r4, lsl #17
   187fc:	andeq	r8, r1, r4, lsl #17
   18800:	andeq	r8, r1, r4, lsl #17
   18804:	andeq	r8, r1, r4, lsl #17
   18808:	andeq	r8, r1, r0, asr #16
   1880c:	andeq	r8, r1, r4, lsl #17
   18810:	andeq	r8, r1, r4, lsl #17
   18814:	andeq	r8, r1, r4, lsl #17
   18818:	andeq	r8, r1, r0, asr #16
   1881c:	andeq	r8, r1, r4, lsl #17
   18820:	andeq	r8, r1, r0, asr #16
   18824:	andeq	r8, r1, r4, lsl #17
   18828:	andeq	r8, r1, r4, lsl #17
   1882c:	andeq	r8, r1, r4, lsl #17
   18830:	andeq	r8, r1, r4, lsl #17
   18834:	andeq	r8, r1, r4, lsl #17
   18838:	andeq	r8, r1, r4, lsl #17
   1883c:	andeq	r8, r1, r0, asr #16
   18840:	mov	r1, #48	; 0x30
   18844:	ldr	r0, [sp, #72]	; 0x48
   18848:	bl	11320 <strchr@plt>
   1884c:	cmp	r0, #0
   18850:	beq	18884 <__assert_fail@plt+0x73cc>
   18854:	ldrb	r3, [fp, #1]
   18858:	cmp	r3, #68	; 0x44
   1885c:	beq	18db0 <__assert_fail@plt+0x78f8>
   18860:	cmp	r3, #105	; 0x69
   18864:	beq	18a54 <__assert_fail@plt+0x759c>
   18868:	cmp	r3, #66	; 0x42
   1886c:	moveq	r3, #2
   18870:	movne	r3, #1
   18874:	moveq	r7, #1000	; 0x3e8
   18878:	movne	r7, #1024	; 0x400
   1887c:	str	r3, [sp, #4]
   18880:	b	18890 <__assert_fail@plt+0x73d8>
   18884:	mov	r3, #1
   18888:	mov	r7, #1024	; 0x400
   1888c:	str	r3, [sp, #4]
   18890:	sub	r6, r6, #66	; 0x42
   18894:	cmp	r6, #53	; 0x35
   18898:	ldrls	pc, [pc, r6, lsl #2]
   1889c:	b	18a00 <__assert_fail@plt+0x7548>
   188a0:	andeq	r8, r1, r8, asr sp
   188a4:	andeq	r8, r1, r0, lsl #20
   188a8:	andeq	r8, r1, r0, lsl #20
   188ac:	andeq	r8, r1, r4, ror #22
   188b0:	andeq	r8, r1, r0, lsl #20
   188b4:	andeq	r8, r1, r8, ror r9
   188b8:	andeq	r8, r1, r0, lsl #20
   188bc:	andeq	r8, r1, r0, lsl #20
   188c0:	andeq	r8, r1, r0, lsl #20
   188c4:	andeq	r8, r1, r8, lsl #20
   188c8:	andeq	r8, r1, r0, lsl #20
   188cc:	andeq	r8, r1, r4, lsl #26
   188d0:	andeq	r8, r1, r0, lsl #20
   188d4:	andeq	r8, r1, r0, lsl #20
   188d8:	andeq	r8, r1, r4, asr ip
   188dc:	andeq	r8, r1, r0, lsl #20
   188e0:	andeq	r8, r1, r0, lsl #20
   188e4:	andeq	r8, r1, r0, lsl #20
   188e8:	ldrdeq	r8, [r1], -ip
   188ec:	andeq	r8, r1, r0, lsl #20
   188f0:	andeq	r8, r1, r0, lsl #20
   188f4:	andeq	r8, r1, r0, lsl #20
   188f8:	andeq	r8, r1, r0, lsl #20
   188fc:	andeq	r8, r1, ip, ror #21
   18900:	andeq	r8, r1, r0, ror sl
   18904:	andeq	r8, r1, r0, lsl #20
   18908:	andeq	r8, r1, r0, lsl #20
   1890c:	andeq	r8, r1, r0, lsl #20
   18910:	andeq	r8, r1, r0, lsl #20
   18914:	andeq	r8, r1, r0, lsl #20
   18918:	andeq	r8, r1, r0, lsl #20
   1891c:	andeq	r8, r1, r0, lsl #20
   18920:	andeq	r8, r1, r4, ror #25
   18924:	andeq	r8, r1, r8, ror #19
   18928:	andeq	r8, r1, r0, lsl #20
   1892c:	andeq	r8, r1, r0, lsl #20
   18930:	andeq	r8, r1, r0, lsl #20
   18934:	andeq	r8, r1, r8, ror r9
   18938:	andeq	r8, r1, r0, lsl #20
   1893c:	andeq	r8, r1, r0, lsl #20
   18940:	andeq	r8, r1, r0, lsl #20
   18944:	andeq	r8, r1, r8, lsl #20
   18948:	andeq	r8, r1, r0, lsl #20
   1894c:	andeq	r8, r1, r4, lsl #26
   18950:	andeq	r8, r1, r0, lsl #20
   18954:	andeq	r8, r1, r0, lsl #20
   18958:	andeq	r8, r1, r0, lsl #20
   1895c:	andeq	r8, r1, r0, lsl #20
   18960:	andeq	r8, r1, r0, lsl #20
   18964:	andeq	r8, r1, r0, lsl #20
   18968:	ldrdeq	r8, [r1], -ip
   1896c:	andeq	r8, r1, r0, lsl #20
   18970:	andeq	r8, r1, r0, lsl #20
   18974:	andeq	r8, r1, ip, asr #25
   18978:	asr	r3, r7, #31
   1897c:	mov	r2, r7
   18980:	cmp	r8, #0
   18984:	umull	r0, r1, r9, r7
   18988:	mov	ip, #0
   1898c:	strd	r2, [sp, #8]
   18990:	bne	18de4 <__assert_fail@plt+0x792c>
   18994:	mov	r2, r0
   18998:	mov	r3, r1
   1899c:	cmp	ip, #0
   189a0:	bne	18a2c <__assert_fail@plt+0x7574>
   189a4:	cmp	r3, #0
   189a8:	mov	lr, ip
   189ac:	bne	18e48 <__assert_fail@plt+0x7990>
   189b0:	umull	r2, r3, r2, r7
   189b4:	mov	ip, r2
   189b8:	mov	r1, r3
   189bc:	subs	r0, lr, #0
   189c0:	bne	18a2c <__assert_fail@plt+0x7574>
   189c4:	cmp	r1, #0
   189c8:	bne	18e28 <__assert_fail@plt+0x7970>
   189cc:	umull	r2, r3, ip, r7
   189d0:	mov	r6, r2
   189d4:	mov	r2, r3
   189d8:	cmp	r0, #0
   189dc:	mov	r9, r6
   189e0:	mov	r8, r2
   189e4:	bne	18a2c <__assert_fail@plt+0x7574>
   189e8:	ldr	r2, [sp, #4]
   189ec:	add	r3, fp, r2
   189f0:	str	r3, [r5]
   189f4:	ldrb	r3, [fp, r2]
   189f8:	cmp	r3, #0
   189fc:	beq	186fc <__assert_fail@plt+0x7244>
   18a00:	orr	r4, r4, #2
   18a04:	b	186fc <__assert_fail@plt+0x7244>
   18a08:	cmp	r8, #0
   18a0c:	umull	r2, r3, r9, r7
   18a10:	mov	ip, #0
   18a14:	asr	r1, r7, #31
   18a18:	bne	18d80 <__assert_fail@plt+0x78c8>
   18a1c:	mov	r9, r2
   18a20:	mov	r8, r3
   18a24:	cmp	ip, #0
   18a28:	beq	189e8 <__assert_fail@plt+0x7530>
   18a2c:	mvn	r9, #0
   18a30:	mov	r4, #1
   18a34:	mov	r8, r9
   18a38:	b	189e8 <__assert_fail@plt+0x7530>
   18a3c:	mov	r1, r6
   18a40:	ldr	r0, [sp, #72]	; 0x48
   18a44:	bl	11320 <strchr@plt>
   18a48:	cmp	r0, #0
   18a4c:	bne	18770 <__assert_fail@plt+0x72b8>
   18a50:	b	18a00 <__assert_fail@plt+0x7548>
   18a54:	ldrb	r3, [fp, #2]
   18a58:	mov	r7, #1024	; 0x400
   18a5c:	cmp	r3, #66	; 0x42
   18a60:	movne	r3, #1
   18a64:	moveq	r3, #3
   18a68:	str	r3, [sp, #4]
   18a6c:	b	18890 <__assert_fail@plt+0x73d8>
   18a70:	asr	r3, r7, #31
   18a74:	mov	r2, r7
   18a78:	mov	ip, #0
   18a7c:	mov	r0, #7
   18a80:	mov	lr, ip
   18a84:	mov	r6, r4
   18a88:	strd	r2, [sp, #8]
   18a8c:	str	r5, [sp, #16]
   18a90:	b	18abc <__assert_fail@plt+0x7604>
   18a94:	umull	r2, r3, r9, r7
   18a98:	mov	r9, r2
   18a9c:	mov	r8, r3
   18aa0:	cmp	r1, #0
   18aa4:	beq	18ab4 <__assert_fail@plt+0x75fc>
   18aa8:	mvn	r9, #0
   18aac:	mov	ip, #1
   18ab0:	mov	r8, r9
   18ab4:	subs	r0, r0, #1
   18ab8:	beq	18da4 <__assert_fail@plt+0x78ec>
   18abc:	cmp	r8, #0
   18ac0:	mov	r1, #0
   18ac4:	beq	18a94 <__assert_fail@plt+0x75dc>
   18ac8:	umull	r4, r5, r9, r7
   18acc:	mov	r3, lr
   18ad0:	mov	r2, r5
   18ad4:	umlal	r2, r3, r8, r7
   18ad8:	cmp	r3, #0
   18adc:	bne	18f04 <__assert_fail@plt+0x7a4c>
   18ae0:	mov	r9, r4
   18ae4:	mov	r8, r2
   18ae8:	b	18aa0 <__assert_fail@plt+0x75e8>
   18aec:	asr	r3, r7, #31
   18af0:	mov	r2, r7
   18af4:	mov	r6, #0
   18af8:	mov	lr, #8
   18afc:	mov	r0, r4
   18b00:	mov	ip, r5
   18b04:	strd	r2, [sp, #8]
   18b08:	b	18b34 <__assert_fail@plt+0x767c>
   18b0c:	umull	r2, r3, r9, r7
   18b10:	mov	r9, r2
   18b14:	mov	r8, r3
   18b18:	cmp	r1, #0
   18b1c:	beq	18b2c <__assert_fail@plt+0x7674>
   18b20:	mvn	r9, #0
   18b24:	mov	r6, #1
   18b28:	mov	r8, r9
   18b2c:	subs	lr, lr, #1
   18b30:	beq	18d74 <__assert_fail@plt+0x78bc>
   18b34:	cmp	r8, #0
   18b38:	mov	r1, #0
   18b3c:	beq	18b0c <__assert_fail@plt+0x7654>
   18b40:	umull	r4, r5, r9, r7
   18b44:	mov	r3, #0
   18b48:	mov	r2, r5
   18b4c:	umlal	r2, r3, r8, r7
   18b50:	cmp	r3, #0
   18b54:	bne	18f5c <__assert_fail@plt+0x7aa4>
   18b58:	mov	r9, r4
   18b5c:	mov	r8, r2
   18b60:	b	18b18 <__assert_fail@plt+0x7660>
   18b64:	asr	r3, r7, #31
   18b68:	mov	r2, r7
   18b6c:	mov	r6, #0
   18b70:	mov	lr, #6
   18b74:	mov	r0, r4
   18b78:	mov	ip, r5
   18b7c:	strd	r2, [sp, #8]
   18b80:	b	18bac <__assert_fail@plt+0x76f4>
   18b84:	umull	r2, r3, r9, r7
   18b88:	mov	r9, r2
   18b8c:	mov	r8, r3
   18b90:	cmp	r1, #0
   18b94:	beq	18ba4 <__assert_fail@plt+0x76ec>
   18b98:	mvn	r9, #0
   18b9c:	mov	r6, #1
   18ba0:	mov	r8, r9
   18ba4:	subs	lr, lr, #1
   18ba8:	beq	18d74 <__assert_fail@plt+0x78bc>
   18bac:	cmp	r8, #0
   18bb0:	mov	r1, #0
   18bb4:	beq	18b84 <__assert_fail@plt+0x76cc>
   18bb8:	umull	r4, r5, r9, r7
   18bbc:	mov	r3, #0
   18bc0:	mov	r2, r5
   18bc4:	umlal	r2, r3, r8, r7
   18bc8:	cmp	r3, #0
   18bcc:	bne	18f24 <__assert_fail@plt+0x7a6c>
   18bd0:	mov	r9, r4
   18bd4:	mov	r8, r2
   18bd8:	b	18b90 <__assert_fail@plt+0x76d8>
   18bdc:	asr	r3, r7, #31
   18be0:	mov	r2, r7
   18be4:	mov	r6, #0
   18be8:	mov	lr, #4
   18bec:	mov	r0, r4
   18bf0:	mov	ip, r5
   18bf4:	strd	r2, [sp, #8]
   18bf8:	b	18c24 <__assert_fail@plt+0x776c>
   18bfc:	umull	r2, r3, r9, r7
   18c00:	mov	r9, r2
   18c04:	mov	r8, r3
   18c08:	cmp	r1, #0
   18c0c:	beq	18c1c <__assert_fail@plt+0x7764>
   18c10:	mvn	r9, #0
   18c14:	mov	r6, #1
   18c18:	mov	r8, r9
   18c1c:	subs	lr, lr, #1
   18c20:	beq	18d74 <__assert_fail@plt+0x78bc>
   18c24:	cmp	r8, #0
   18c28:	mov	r1, #0
   18c2c:	beq	18bfc <__assert_fail@plt+0x7744>
   18c30:	umull	r4, r5, r9, r7
   18c34:	mov	r3, #0
   18c38:	mov	r2, r5
   18c3c:	umlal	r2, r3, r8, r7
   18c40:	cmp	r3, #0
   18c44:	bne	18f40 <__assert_fail@plt+0x7a88>
   18c48:	mov	r9, r4
   18c4c:	mov	r8, r2
   18c50:	b	18c08 <__assert_fail@plt+0x7750>
   18c54:	asr	r3, r7, #31
   18c58:	mov	r2, r7
   18c5c:	mov	r6, #0
   18c60:	mov	lr, #5
   18c64:	mov	r0, r4
   18c68:	mov	ip, r5
   18c6c:	strd	r2, [sp, #8]
   18c70:	b	18c9c <__assert_fail@plt+0x77e4>
   18c74:	umull	r2, r3, r9, r7
   18c78:	mov	r9, r2
   18c7c:	mov	r8, r3
   18c80:	cmp	r1, #0
   18c84:	beq	18c94 <__assert_fail@plt+0x77dc>
   18c88:	mvn	r9, #0
   18c8c:	mov	r6, #1
   18c90:	mov	r8, r9
   18c94:	subs	lr, lr, #1
   18c98:	beq	18d74 <__assert_fail@plt+0x78bc>
   18c9c:	cmp	r8, #0
   18ca0:	mov	r1, #0
   18ca4:	beq	18c74 <__assert_fail@plt+0x77bc>
   18ca8:	umull	r4, r5, r9, r7
   18cac:	mov	r3, #0
   18cb0:	mov	r2, r5
   18cb4:	umlal	r2, r3, r8, r7
   18cb8:	cmp	r3, #0
   18cbc:	bne	18eac <__assert_fail@plt+0x79f4>
   18cc0:	mov	r9, r4
   18cc4:	mov	r8, r2
   18cc8:	b	18c80 <__assert_fail@plt+0x77c8>
   18ccc:	lsr	r3, r8, #31
   18cd0:	adds	r9, r9, r9
   18cd4:	adc	r8, r8, r8
   18cd8:	cmp	r3, #0
   18cdc:	beq	189e8 <__assert_fail@plt+0x7530>
   18ce0:	b	18a2c <__assert_fail@plt+0x7574>
   18ce4:	lsr	r3, r8, #23
   18ce8:	lsl	r8, r8, #9
   18cec:	cmp	r3, #0
   18cf0:	lsl	r3, r9, #9
   18cf4:	orr	r8, r8, r9, lsr #23
   18cf8:	bne	18a2c <__assert_fail@plt+0x7574>
   18cfc:	mov	r9, r3
   18d00:	b	189e8 <__assert_fail@plt+0x7530>
   18d04:	asr	r3, r7, #31
   18d08:	mov	r2, r7
   18d0c:	cmp	r8, #0
   18d10:	mov	r1, #0
   18d14:	strd	r2, [sp, #8]
   18d18:	umull	r2, r3, r9, r7
   18d1c:	bne	18dc0 <__assert_fail@plt+0x7908>
   18d20:	mov	r0, r2
   18d24:	mov	ip, r3
   18d28:	cmp	r1, #0
   18d2c:	bne	18a2c <__assert_fail@plt+0x7574>
   18d30:	cmp	ip, #0
   18d34:	bne	18e08 <__assert_fail@plt+0x7950>
   18d38:	umull	r2, r3, r0, r7
   18d3c:	mov	r6, r2
   18d40:	mov	r2, r3
   18d44:	cmp	r1, #0
   18d48:	mov	r9, r6
   18d4c:	mov	r8, r2
   18d50:	beq	189e8 <__assert_fail@plt+0x7530>
   18d54:	b	18a2c <__assert_fail@plt+0x7574>
   18d58:	lsr	r3, r8, #22
   18d5c:	lsl	r8, r8, #10
   18d60:	cmp	r3, #0
   18d64:	lsl	r3, r9, #10
   18d68:	orr	r8, r8, r9, lsr #22
   18d6c:	beq	18cfc <__assert_fail@plt+0x7844>
   18d70:	b	18a2c <__assert_fail@plt+0x7574>
   18d74:	mov	r5, ip
   18d78:	orr	r4, r0, r6
   18d7c:	b	189e8 <__assert_fail@plt+0x7530>
   18d80:	strd	r2, [sp, #8]
   18d84:	mov	r3, ip
   18d88:	ldr	r2, [sp, #12]
   18d8c:	umlal	r2, r3, r8, r7
   18d90:	cmp	r3, #0
   18d94:	bne	18ec8 <__assert_fail@plt+0x7a10>
   18d98:	mov	r8, r2
   18d9c:	ldr	r9, [sp, #8]
   18da0:	b	18a24 <__assert_fail@plt+0x756c>
   18da4:	orr	r4, r6, ip
   18da8:	ldr	r5, [sp, #16]
   18dac:	b	189e8 <__assert_fail@plt+0x7530>
   18db0:	mov	r3, #2
   18db4:	mov	r7, #1000	; 0x3e8
   18db8:	str	r3, [sp, #4]
   18dbc:	b	18890 <__assert_fail@plt+0x73d8>
   18dc0:	strd	r2, [sp, #16]
   18dc4:	mov	r3, r1
   18dc8:	ldr	r2, [sp, #20]
   18dcc:	umlal	r2, r3, r8, r7
   18dd0:	cmp	r3, #0
   18dd4:	bne	18f98 <__assert_fail@plt+0x7ae0>
   18dd8:	mov	ip, r2
   18ddc:	ldr	r0, [sp, #16]
   18de0:	b	18d28 <__assert_fail@plt+0x7870>
   18de4:	mov	r2, r1
   18de8:	mov	r3, ip
   18dec:	umlal	r2, r3, r8, r7
   18df0:	cmp	r3, #0
   18df4:	strd	r2, [sp, #16]
   18df8:	bne	18e6c <__assert_fail@plt+0x79b4>
   18dfc:	mov	r2, r0
   18e00:	ldr	r3, [sp, #16]
   18e04:	b	1899c <__assert_fail@plt+0x74e4>
   18e08:	umull	r8, r9, r0, r7
   18e0c:	mov	r3, r1
   18e10:	mov	r2, r9
   18e14:	umlal	r2, r3, ip, r7
   18e18:	cmp	r3, #0
   18e1c:	bne	18f78 <__assert_fail@plt+0x7ac0>
   18e20:	mov	r6, r8
   18e24:	b	18d44 <__assert_fail@plt+0x788c>
   18e28:	umull	r8, r9, ip, r7
   18e2c:	mov	r3, r0
   18e30:	mov	r2, r9
   18e34:	umlal	r2, r3, r1, r7
   18e38:	cmp	r3, #0
   18e3c:	bne	18fc0 <__assert_fail@plt+0x7b08>
   18e40:	mov	r6, r8
   18e44:	b	189d8 <__assert_fail@plt+0x7520>
   18e48:	umull	r8, r9, r2, r7
   18e4c:	mov	r1, ip
   18e50:	mov	r0, r9
   18e54:	umlal	r0, r1, r3, r7
   18e58:	cmp	r1, #0
   18e5c:	bne	18e8c <__assert_fail@plt+0x79d4>
   18e60:	mov	ip, r8
   18e64:	mov	r1, r0
   18e68:	b	189bc <__assert_fail@plt+0x7504>
   18e6c:	ldr	lr, [sp, #8]
   18e70:	mov	r2, r0
   18e74:	mov	ip, #1
   18e78:	ldr	r3, [sp, #12]
   18e7c:	mul	r3, r9, r3
   18e80:	mla	r3, lr, r8, r3
   18e84:	add	r3, r3, r1
   18e88:	b	1899c <__assert_fail@plt+0x74e4>
   18e8c:	ldr	r1, [sp, #12]
   18e90:	mov	lr, #1
   18e94:	mov	ip, r8
   18e98:	mul	r1, r2, r1
   18e9c:	ldr	r2, [sp, #8]
   18ea0:	mla	r1, r3, r2, r1
   18ea4:	add	r1, r1, r9
   18ea8:	b	189bc <__assert_fail@plt+0x7504>
   18eac:	ldrd	r2, [sp, #8]
   18eb0:	mov	r1, #1
   18eb4:	mul	r3, r9, r3
   18eb8:	mov	r9, r4
   18ebc:	mla	r8, r2, r8, r3
   18ec0:	add	r8, r8, r5
   18ec4:	b	18c80 <__assert_fail@plt+0x77c8>
   18ec8:	mul	r3, r9, r1
   18ecc:	mov	ip, #1
   18ed0:	mla	r8, r7, r8, r3
   18ed4:	ldrd	r6, [sp, #8]
   18ed8:	mov	r9, r6
   18edc:	add	r8, r8, r7
   18ee0:	b	18a24 <__assert_fail@plt+0x756c>
   18ee4:	movw	r3, #45192	; 0xb088
   18ee8:	movt	r3, #1
   18eec:	movw	r1, #45204	; 0xb094
   18ef0:	movt	r1, #1
   18ef4:	movw	r0, #45220	; 0xb0a4
   18ef8:	movt	r0, #1
   18efc:	mov	r2, #85	; 0x55
   18f00:	bl	114b8 <__assert_fail@plt>
   18f04:	ldr	r3, [sp, #12]
   18f08:	mov	r1, #1
   18f0c:	mul	r2, r9, r3
   18f10:	ldr	r3, [sp, #8]
   18f14:	mov	r9, r4
   18f18:	mla	r8, r3, r8, r2
   18f1c:	add	r8, r8, r5
   18f20:	b	18aa0 <__assert_fail@plt+0x75e8>
   18f24:	ldrd	r2, [sp, #8]
   18f28:	mov	r1, #1
   18f2c:	mul	r3, r9, r3
   18f30:	mov	r9, r4
   18f34:	mla	r8, r2, r8, r3
   18f38:	add	r8, r8, r5
   18f3c:	b	18b90 <__assert_fail@plt+0x76d8>
   18f40:	ldrd	r2, [sp, #8]
   18f44:	mov	r1, #1
   18f48:	mul	r3, r9, r3
   18f4c:	mov	r9, r4
   18f50:	mla	r8, r2, r8, r3
   18f54:	add	r8, r8, r5
   18f58:	b	18c08 <__assert_fail@plt+0x7750>
   18f5c:	ldrd	r2, [sp, #8]
   18f60:	mov	r1, #1
   18f64:	mul	r3, r9, r3
   18f68:	mov	r9, r4
   18f6c:	mla	r8, r2, r8, r3
   18f70:	add	r8, r8, r5
   18f74:	b	18b18 <__assert_fail@plt+0x7660>
   18f78:	ldr	r3, [sp, #12]
   18f7c:	mov	r6, r8
   18f80:	mov	r1, #1
   18f84:	mul	r2, r0, r3
   18f88:	ldr	r3, [sp, #8]
   18f8c:	mla	r2, ip, r3, r2
   18f90:	add	r2, r2, r9
   18f94:	b	18d44 <__assert_fail@plt+0x788c>
   18f98:	ldr	r3, [sp, #12]
   18f9c:	mov	r1, #1
   18fa0:	ldr	r2, [sp, #16]
   18fa4:	mul	ip, r9, r3
   18fa8:	ldr	r3, [sp, #8]
   18fac:	mov	r0, r2
   18fb0:	mla	ip, r3, r8, ip
   18fb4:	ldr	r3, [sp, #20]
   18fb8:	add	ip, ip, r3
   18fbc:	b	18d28 <__assert_fail@plt+0x7870>
   18fc0:	ldr	r3, [sp, #12]
   18fc4:	mov	r6, r8
   18fc8:	mov	r0, #1
   18fcc:	mul	r2, ip, r3
   18fd0:	ldr	r3, [sp, #8]
   18fd4:	mla	r2, r1, r3, r2
   18fd8:	add	r2, r2, r9
   18fdc:	b	189d8 <__assert_fail@plt+0x7520>
   18fe0:	cmp	r1, #0
   18fe4:	cmpne	r0, #0
   18fe8:	beq	19034 <__assert_fail@plt+0x7b7c>
   18fec:	strd	r4, [sp, #-16]!
   18ff0:	umull	r4, r5, r0, r1
   18ff4:	str	r6, [sp, #8]
   18ff8:	str	lr, [sp, #12]
   18ffc:	adds	r3, r5, #0
   19000:	movne	r3, #1
   19004:	cmp	r4, #0
   19008:	blt	19014 <__assert_fail@plt+0x7b5c>
   1900c:	cmp	r3, #0
   19010:	beq	19040 <__assert_fail@plt+0x7b88>
   19014:	bl	11338 <__errno_location@plt>
   19018:	mov	r3, #12
   1901c:	ldrd	r4, [sp]
   19020:	ldr	r6, [sp, #8]
   19024:	add	sp, sp, #12
   19028:	str	r3, [r0]
   1902c:	mov	r0, #0
   19030:	pop	{pc}		; (ldr pc, [sp], #4)
   19034:	mov	r1, #1
   19038:	mov	r0, r1
   1903c:	b	11128 <calloc@plt>
   19040:	ldrd	r4, [sp]
   19044:	ldr	r6, [sp, #8]
   19048:	ldr	lr, [sp, #12]
   1904c:	add	sp, sp, #16
   19050:	b	11128 <calloc@plt>
   19054:	cmp	r0, #0
   19058:	beq	19064 <__assert_fail@plt+0x7bac>
   1905c:	blt	1906c <__assert_fail@plt+0x7bb4>
   19060:	b	112c0 <malloc@plt>
   19064:	mov	r0, #1
   19068:	b	112c0 <malloc@plt>
   1906c:	str	r4, [sp, #-8]!
   19070:	str	lr, [sp, #4]
   19074:	bl	11338 <__errno_location@plt>
   19078:	mov	r3, #12
   1907c:	ldr	r4, [sp]
   19080:	add	sp, sp, #4
   19084:	str	r3, [r0]
   19088:	mov	r0, #0
   1908c:	pop	{pc}		; (ldr pc, [sp], #4)
   19090:	cmp	r0, #0
   19094:	beq	190bc <__assert_fail@plt+0x7c04>
   19098:	cmp	r1, #0
   1909c:	str	r4, [sp, #-8]!
   190a0:	str	lr, [sp, #4]
   190a4:	beq	190c4 <__assert_fail@plt+0x7c0c>
   190a8:	blt	190d8 <__assert_fail@plt+0x7c20>
   190ac:	ldr	r4, [sp]
   190b0:	ldr	lr, [sp, #4]
   190b4:	add	sp, sp, #8
   190b8:	b	11200 <realloc@plt>
   190bc:	mov	r0, r1
   190c0:	b	19054 <__assert_fail@plt+0x7b9c>
   190c4:	bl	13d7c <__assert_fail@plt+0x28c4>
   190c8:	ldr	r4, [sp]
   190cc:	add	sp, sp, #4
   190d0:	mov	r0, #0
   190d4:	pop	{pc}		; (ldr pc, [sp], #4)
   190d8:	bl	11338 <__errno_location@plt>
   190dc:	mov	r3, #12
   190e0:	str	r3, [r0]
   190e4:	b	190c8 <__assert_fail@plt+0x7c10>
   190e8:	strd	r4, [sp, #-16]!
   190ec:	mov	r4, r0
   190f0:	str	r6, [sp, #8]
   190f4:	str	lr, [sp, #12]
   190f8:	bl	11284 <__fpending@plt>
   190fc:	ldr	r5, [r4]
   19100:	mov	r6, r0
   19104:	mov	r0, r4
   19108:	bl	19170 <__assert_fail@plt+0x7cb8>
   1910c:	mov	r4, r0
   19110:	and	r5, r5, #32
   19114:	cmp	r5, #0
   19118:	bne	19150 <__assert_fail@plt+0x7c98>
   1911c:	cmp	r0, #0
   19120:	beq	1913c <__assert_fail@plt+0x7c84>
   19124:	cmp	r6, #0
   19128:	bne	19168 <__assert_fail@plt+0x7cb0>
   1912c:	bl	11338 <__errno_location@plt>
   19130:	ldr	r4, [r0]
   19134:	subs	r4, r4, #9
   19138:	mvnne	r4, #0
   1913c:	mov	r0, r4
   19140:	ldrd	r4, [sp]
   19144:	ldr	r6, [sp, #8]
   19148:	add	sp, sp, #12
   1914c:	pop	{pc}		; (ldr pc, [sp], #4)
   19150:	cmp	r0, #0
   19154:	bne	19168 <__assert_fail@plt+0x7cb0>
   19158:	bl	11338 <__errno_location@plt>
   1915c:	str	r4, [r0]
   19160:	mvn	r4, #0
   19164:	b	1913c <__assert_fail@plt+0x7c84>
   19168:	mvn	r4, #0
   1916c:	b	1913c <__assert_fail@plt+0x7c84>
   19170:	strd	r4, [sp, #-12]!
   19174:	mov	r4, r0
   19178:	str	lr, [sp, #8]
   1917c:	sub	sp, sp, #12
   19180:	bl	11398 <fileno@plt>
   19184:	cmp	r0, #0
   19188:	mov	r0, r4
   1918c:	blt	19210 <__assert_fail@plt+0x7d58>
   19190:	bl	112d8 <__freading@plt>
   19194:	cmp	r0, #0
   19198:	bne	191dc <__assert_fail@plt+0x7d24>
   1919c:	mov	r0, r4
   191a0:	bl	19224 <__assert_fail@plt+0x7d6c>
   191a4:	cmp	r0, #0
   191a8:	beq	1920c <__assert_fail@plt+0x7d54>
   191ac:	bl	11338 <__errno_location@plt>
   191b0:	mov	r5, r0
   191b4:	mov	r0, r4
   191b8:	ldr	r4, [r5]
   191bc:	bl	113b0 <fclose@plt>
   191c0:	cmp	r4, #0
   191c4:	mvnne	r0, #0
   191c8:	strne	r4, [r5]
   191cc:	add	sp, sp, #12
   191d0:	ldrd	r4, [sp]
   191d4:	add	sp, sp, #8
   191d8:	pop	{pc}		; (ldr pc, [sp], #4)
   191dc:	mov	r0, r4
   191e0:	bl	11398 <fileno@plt>
   191e4:	mov	r1, #1
   191e8:	mov	r2, #0
   191ec:	mov	r3, #0
   191f0:	str	r1, [sp]
   191f4:	bl	11260 <lseek64@plt>
   191f8:	mvn	r3, #0
   191fc:	mvn	r2, #0
   19200:	cmp	r1, r3
   19204:	cmpeq	r0, r2
   19208:	bne	1919c <__assert_fail@plt+0x7ce4>
   1920c:	mov	r0, r4
   19210:	add	sp, sp, #12
   19214:	ldrd	r4, [sp]
   19218:	ldr	lr, [sp, #8]
   1921c:	add	sp, sp, #12
   19220:	b	113b0 <fclose@plt>
   19224:	str	r4, [sp, #-8]!
   19228:	subs	r4, r0, #0
   1922c:	str	lr, [sp, #4]
   19230:	sub	sp, sp, #8
   19234:	beq	19250 <__assert_fail@plt+0x7d98>
   19238:	bl	112d8 <__freading@plt>
   1923c:	cmp	r0, #0
   19240:	beq	19250 <__assert_fail@plt+0x7d98>
   19244:	ldr	r3, [r4]
   19248:	tst	r3, #256	; 0x100
   1924c:	bne	19268 <__assert_fail@plt+0x7db0>
   19250:	mov	r0, r4
   19254:	add	sp, sp, #8
   19258:	ldr	r4, [sp]
   1925c:	ldr	lr, [sp, #4]
   19260:	add	sp, sp, #8
   19264:	b	11164 <fflush@plt>
   19268:	mov	r1, #1
   1926c:	mov	r2, #0
   19270:	mov	r3, #0
   19274:	mov	r0, r4
   19278:	str	r1, [sp]
   1927c:	bl	19330 <__assert_fail@plt+0x7e78>
   19280:	b	19250 <__assert_fail@plt+0x7d98>
   19284:	strd	r4, [sp, #-16]!
   19288:	mov	r5, r1
   1928c:	str	r6, [sp, #8]
   19290:	str	lr, [sp, #12]
   19294:	bl	1141c <fopen64@plt>
   19298:	subs	r4, r0, #0
   1929c:	beq	192ac <__assert_fail@plt+0x7df4>
   192a0:	bl	11398 <fileno@plt>
   192a4:	cmp	r0, #2
   192a8:	bls	192c0 <__assert_fail@plt+0x7e08>
   192ac:	mov	r0, r4
   192b0:	ldrd	r4, [sp]
   192b4:	ldr	r6, [sp, #8]
   192b8:	add	sp, sp, #12
   192bc:	pop	{pc}		; (ldr pc, [sp], #4)
   192c0:	bl	194f4 <__assert_fail@plt+0x803c>
   192c4:	subs	r6, r0, #0
   192c8:	blt	19310 <__assert_fail@plt+0x7e58>
   192cc:	mov	r0, r4
   192d0:	bl	19170 <__assert_fail@plt+0x7cb8>
   192d4:	cmp	r0, #0
   192d8:	bne	192f0 <__assert_fail@plt+0x7e38>
   192dc:	mov	r1, r5
   192e0:	mov	r0, r6
   192e4:	bl	1111c <fdopen@plt>
   192e8:	subs	r4, r0, #0
   192ec:	bne	192ac <__assert_fail@plt+0x7df4>
   192f0:	bl	11338 <__errno_location@plt>
   192f4:	mov	r5, r0
   192f8:	mov	r0, r6
   192fc:	ldr	r6, [r5]
   19300:	mov	r4, #0
   19304:	bl	114ac <close@plt>
   19308:	str	r6, [r5]
   1930c:	b	192ac <__assert_fail@plt+0x7df4>
   19310:	bl	11338 <__errno_location@plt>
   19314:	mov	r5, r0
   19318:	mov	r0, r4
   1931c:	ldr	r6, [r5]
   19320:	mov	r4, #0
   19324:	bl	19170 <__assert_fail@plt+0x7cb8>
   19328:	str	r6, [r5]
   1932c:	b	192ac <__assert_fail@plt+0x7df4>
   19330:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19334:	mov	r4, r0
   19338:	ldr	ip, [r0, #4]
   1933c:	strd	r6, [sp, #8]
   19340:	str	lr, [sp, #20]
   19344:	ldr	lr, [r0, #8]
   19348:	str	r8, [sp, #16]
   1934c:	sub	sp, sp, #8
   19350:	ldr	r5, [sp, #32]
   19354:	cmp	lr, ip
   19358:	beq	19380 <__assert_fail@plt+0x7ec8>
   1935c:	mov	r0, r4
   19360:	str	r5, [sp, #32]
   19364:	add	sp, sp, #8
   19368:	ldrd	r4, [sp]
   1936c:	ldrd	r6, [sp, #8]
   19370:	ldr	r8, [sp, #16]
   19374:	ldr	lr, [sp, #20]
   19378:	add	sp, sp, #24
   1937c:	b	113bc <fseeko64@plt>
   19380:	ldr	ip, [r0, #16]
   19384:	ldr	lr, [r0, #20]
   19388:	cmp	lr, ip
   1938c:	bne	1935c <__assert_fail@plt+0x7ea4>
   19390:	ldr	r8, [r0, #36]	; 0x24
   19394:	cmp	r8, #0
   19398:	bne	1935c <__assert_fail@plt+0x7ea4>
   1939c:	mov	r6, r2
   193a0:	mov	r7, r3
   193a4:	bl	11398 <fileno@plt>
   193a8:	mov	r2, r6
   193ac:	mov	r3, r7
   193b0:	str	r5, [sp]
   193b4:	bl	11260 <lseek64@plt>
   193b8:	mvn	r3, #0
   193bc:	mvn	r2, #0
   193c0:	cmp	r1, r3
   193c4:	cmpeq	r0, r2
   193c8:	beq	193f8 <__assert_fail@plt+0x7f40>
   193cc:	ldr	r3, [r4]
   193d0:	strd	r0, [r4, #80]	; 0x50
   193d4:	bic	r3, r3, #16
   193d8:	str	r3, [r4]
   193dc:	mov	r0, r8
   193e0:	add	sp, sp, #8
   193e4:	ldrd	r4, [sp]
   193e8:	ldrd	r6, [sp, #8]
   193ec:	ldr	r8, [sp, #16]
   193f0:	add	sp, sp, #20
   193f4:	pop	{pc}		; (ldr pc, [sp], #4)
   193f8:	mvn	r8, #0
   193fc:	b	193dc <__assert_fail@plt+0x7f24>
   19400:	mov	r0, #14
   19404:	str	r4, [sp, #-8]!
   19408:	str	lr, [sp, #4]
   1940c:	bl	11404 <nl_langinfo@plt>
   19410:	cmp	r0, #0
   19414:	beq	19438 <__assert_fail@plt+0x7f80>
   19418:	ldrb	r2, [r0]
   1941c:	movw	r3, #45260	; 0xb0cc
   19420:	movt	r3, #1
   19424:	ldr	r4, [sp]
   19428:	add	sp, sp, #4
   1942c:	cmp	r2, #0
   19430:	moveq	r0, r3
   19434:	pop	{pc}		; (ldr pc, [sp], #4)
   19438:	ldr	r4, [sp]
   1943c:	add	sp, sp, #4
   19440:	movw	r0, #45260	; 0xb0cc
   19444:	movt	r0, #1
   19448:	pop	{pc}		; (ldr pc, [sp], #4)
   1944c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19450:	mov	r5, r2
   19454:	strd	r6, [sp, #8]
   19458:	subs	r6, r0, #0
   1945c:	mov	r7, r1
   19460:	str	lr, [sp, #16]
   19464:	sub	sp, sp, #12
   19468:	addeq	r6, sp, #4
   1946c:	mov	r0, r6
   19470:	bl	11290 <mbrtowc@plt>
   19474:	cmp	r5, #0
   19478:	cmnne	r0, #3
   1947c:	mov	r4, r0
   19480:	bhi	1949c <__assert_fail@plt+0x7fe4>
   19484:	mov	r0, r4
   19488:	add	sp, sp, #12
   1948c:	ldrd	r4, [sp]
   19490:	ldrd	r6, [sp, #8]
   19494:	add	sp, sp, #16
   19498:	pop	{pc}		; (ldr pc, [sp], #4)
   1949c:	mov	r0, #0
   194a0:	bl	19500 <__assert_fail@plt+0x8048>
   194a4:	cmp	r0, #0
   194a8:	bne	19484 <__assert_fail@plt+0x7fcc>
   194ac:	ldrb	r3, [r7]
   194b0:	mov	r4, #1
   194b4:	str	r3, [r6]
   194b8:	b	19484 <__assert_fail@plt+0x7fcc>
   194bc:	umull	r2, r3, r1, r2
   194c0:	cmp	r3, #0
   194c4:	bne	194d0 <__assert_fail@plt+0x8018>
   194c8:	mov	r1, r2
   194cc:	b	19090 <__assert_fail@plt+0x7bd8>
   194d0:	str	r4, [sp, #-8]!
   194d4:	str	lr, [sp, #4]
   194d8:	bl	11338 <__errno_location@plt>
   194dc:	mov	r3, #12
   194e0:	ldr	r4, [sp]
   194e4:	add	sp, sp, #4
   194e8:	str	r3, [r0]
   194ec:	mov	r0, #0
   194f0:	pop	{pc}		; (ldr pc, [sp], #4)
   194f4:	mov	r2, #3
   194f8:	mov	r1, #0
   194fc:	b	13b54 <__assert_fail@plt+0x269c>
   19500:	push	{lr}		; (str lr, [sp, #-4]!)
   19504:	sub	sp, sp, #268	; 0x10c
   19508:	movw	r2, #257	; 0x101
   1950c:	add	r1, sp, #4
   19510:	bl	19558 <__assert_fail@plt+0x80a0>
   19514:	cmp	r0, #0
   19518:	movne	r0, #0
   1951c:	bne	19550 <__assert_fail@plt+0x8098>
   19520:	movw	r1, #45268	; 0xb0d4
   19524:	movt	r1, #1
   19528:	add	r0, sp, #4
   1952c:	bl	11158 <strcmp@plt>
   19530:	cmp	r0, #0
   19534:	beq	19550 <__assert_fail@plt+0x8098>
   19538:	add	r0, sp, #4
   1953c:	movw	r1, #45272	; 0xb0d8
   19540:	movt	r1, #1
   19544:	bl	11158 <strcmp@plt>
   19548:	adds	r0, r0, #0
   1954c:	movne	r0, #1
   19550:	add	sp, sp, #268	; 0x10c
   19554:	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	strd	r4, [sp, #-16]!
   1955c:	mov	r5, r1
   19560:	mov	r1, #0
   19564:	mov	r4, r2
   19568:	str	r6, [sp, #8]
   1956c:	str	lr, [sp, #12]
   19570:	bl	113e0 <setlocale@plt>
   19574:	subs	r6, r0, #0
   19578:	beq	195f8 <__assert_fail@plt+0x8140>
   1957c:	bl	11314 <strlen@plt>
   19580:	cmp	r4, r0
   19584:	bhi	195a4 <__assert_fail@plt+0x80ec>
   19588:	cmp	r4, #0
   1958c:	moveq	r0, #34	; 0x22
   19590:	bne	195c8 <__assert_fail@plt+0x8110>
   19594:	ldrd	r4, [sp]
   19598:	ldr	r6, [sp, #8]
   1959c:	add	sp, sp, #12
   195a0:	pop	{pc}		; (ldr pc, [sp], #4)
   195a4:	add	r2, r0, #1
   195a8:	mov	r1, r6
   195ac:	mov	r0, r5
   195b0:	bl	11194 <memcpy@plt>
   195b4:	ldrd	r4, [sp]
   195b8:	mov	r0, #0
   195bc:	ldr	r6, [sp, #8]
   195c0:	add	sp, sp, #12
   195c4:	pop	{pc}		; (ldr pc, [sp], #4)
   195c8:	sub	r4, r4, #1
   195cc:	mov	r1, r6
   195d0:	mov	r2, r4
   195d4:	mov	r0, r5
   195d8:	bl	11194 <memcpy@plt>
   195dc:	mov	r3, #0
   195e0:	mov	r0, #34	; 0x22
   195e4:	strb	r3, [r5, r4]
   195e8:	ldrd	r4, [sp]
   195ec:	ldr	r6, [sp, #8]
   195f0:	add	sp, sp, #12
   195f4:	pop	{pc}		; (ldr pc, [sp], #4)
   195f8:	cmp	r4, #0
   195fc:	mov	r0, #22
   19600:	strbne	r6, [r5]
   19604:	ldrd	r4, [sp]
   19608:	ldr	r6, [sp, #8]
   1960c:	add	sp, sp, #12
   19610:	pop	{pc}		; (ldr pc, [sp], #4)
   19614:	mov	r1, #0
   19618:	b	113e0 <setlocale@plt>
   1961c:	eor	r1, r1, #-2147483648	; 0x80000000
   19620:	b	19628 <__assert_fail@plt+0x8170>
   19624:	eor	r3, r3, #-2147483648	; 0x80000000
   19628:	push	{r4, r5, lr}
   1962c:	lsl	r4, r1, #1
   19630:	lsl	r5, r3, #1
   19634:	teq	r4, r5
   19638:	teqeq	r0, r2
   1963c:	orrsne	ip, r4, r0
   19640:	orrsne	ip, r5, r2
   19644:	mvnsne	ip, r4, asr #21
   19648:	mvnsne	ip, r5, asr #21
   1964c:	beq	19838 <__assert_fail@plt+0x8380>
   19650:	lsr	r4, r4, #21
   19654:	rsbs	r5, r4, r5, lsr #21
   19658:	rsblt	r5, r5, #0
   1965c:	ble	1967c <__assert_fail@plt+0x81c4>
   19660:	add	r4, r4, r5
   19664:	eor	r2, r0, r2
   19668:	eor	r3, r1, r3
   1966c:	eor	r0, r2, r0
   19670:	eor	r1, r3, r1
   19674:	eor	r2, r0, r2
   19678:	eor	r3, r1, r3
   1967c:	cmp	r5, #54	; 0x36
   19680:	pophi	{r4, r5, pc}
   19684:	tst	r1, #-2147483648	; 0x80000000
   19688:	lsl	r1, r1, #12
   1968c:	mov	ip, #1048576	; 0x100000
   19690:	orr	r1, ip, r1, lsr #12
   19694:	beq	196a0 <__assert_fail@plt+0x81e8>
   19698:	rsbs	r0, r0, #0
   1969c:	rsc	r1, r1, #0
   196a0:	tst	r3, #-2147483648	; 0x80000000
   196a4:	lsl	r3, r3, #12
   196a8:	orr	r3, ip, r3, lsr #12
   196ac:	beq	196b8 <__assert_fail@plt+0x8200>
   196b0:	rsbs	r2, r2, #0
   196b4:	rsc	r3, r3, #0
   196b8:	teq	r4, r5
   196bc:	beq	19820 <__assert_fail@plt+0x8368>
   196c0:	sub	r4, r4, #1
   196c4:	rsbs	lr, r5, #32
   196c8:	blt	196e4 <__assert_fail@plt+0x822c>
   196cc:	lsl	ip, r2, lr
   196d0:	adds	r0, r0, r2, lsr r5
   196d4:	adc	r1, r1, #0
   196d8:	adds	r0, r0, r3, lsl lr
   196dc:	adcs	r1, r1, r3, asr r5
   196e0:	b	19700 <__assert_fail@plt+0x8248>
   196e4:	sub	r5, r5, #32
   196e8:	add	lr, lr, #32
   196ec:	cmp	r2, #1
   196f0:	lsl	ip, r3, lr
   196f4:	orrcs	ip, ip, #2
   196f8:	adds	r0, r0, r3, asr r5
   196fc:	adcs	r1, r1, r3, asr #31
   19700:	and	r5, r1, #-2147483648	; 0x80000000
   19704:	bpl	19714 <__assert_fail@plt+0x825c>
   19708:	rsbs	ip, ip, #0
   1970c:	rscs	r0, r0, #0
   19710:	rsc	r1, r1, #0
   19714:	cmp	r1, #1048576	; 0x100000
   19718:	bcc	19758 <__assert_fail@plt+0x82a0>
   1971c:	cmp	r1, #2097152	; 0x200000
   19720:	bcc	19740 <__assert_fail@plt+0x8288>
   19724:	lsrs	r1, r1, #1
   19728:	rrxs	r0, r0
   1972c:	rrx	ip, ip
   19730:	add	r4, r4, #1
   19734:	lsl	r2, r4, #21
   19738:	cmn	r2, #4194304	; 0x400000
   1973c:	bcs	19898 <__assert_fail@plt+0x83e0>
   19740:	cmp	ip, #-2147483648	; 0x80000000
   19744:	lsrseq	ip, r0, #1
   19748:	adcs	r0, r0, #0
   1974c:	adc	r1, r1, r4, lsl #20
   19750:	orr	r1, r1, r5
   19754:	pop	{r4, r5, pc}
   19758:	lsls	ip, ip, #1
   1975c:	adcs	r0, r0, r0
   19760:	adc	r1, r1, r1
   19764:	tst	r1, #1048576	; 0x100000
   19768:	sub	r4, r4, #1
   1976c:	bne	19740 <__assert_fail@plt+0x8288>
   19770:	teq	r1, #0
   19774:	moveq	r1, r0
   19778:	moveq	r0, #0
   1977c:	clz	r3, r1
   19780:	addeq	r3, r3, #32
   19784:	sub	r3, r3, #11
   19788:	subs	r2, r3, #32
   1978c:	bge	197b0 <__assert_fail@plt+0x82f8>
   19790:	adds	r2, r2, #12
   19794:	ble	197ac <__assert_fail@plt+0x82f4>
   19798:	add	ip, r2, #20
   1979c:	rsb	r2, r2, #12
   197a0:	lsl	r0, r1, ip
   197a4:	lsr	r1, r1, r2
   197a8:	b	197c0 <__assert_fail@plt+0x8308>
   197ac:	add	r2, r2, #20
   197b0:	rsble	ip, r2, #32
   197b4:	lsl	r1, r1, r2
   197b8:	orrle	r1, r1, r0, lsr ip
   197bc:	lslle	r0, r0, r2
   197c0:	subs	r4, r4, r3
   197c4:	addge	r1, r1, r4, lsl #20
   197c8:	orrge	r1, r1, r5
   197cc:	popge	{r4, r5, pc}
   197d0:	mvn	r4, r4
   197d4:	subs	r4, r4, #31
   197d8:	bge	19814 <__assert_fail@plt+0x835c>
   197dc:	adds	r4, r4, #12
   197e0:	bgt	197fc <__assert_fail@plt+0x8344>
   197e4:	add	r4, r4, #20
   197e8:	rsb	r2, r4, #32
   197ec:	lsr	r0, r0, r4
   197f0:	orr	r0, r0, r1, lsl r2
   197f4:	orr	r1, r5, r1, lsr r4
   197f8:	pop	{r4, r5, pc}
   197fc:	rsb	r4, r4, #12
   19800:	rsb	r2, r4, #32
   19804:	lsr	r0, r0, r2
   19808:	orr	r0, r0, r1, lsl r4
   1980c:	mov	r1, r5
   19810:	pop	{r4, r5, pc}
   19814:	lsr	r0, r1, r4
   19818:	mov	r1, r5
   1981c:	pop	{r4, r5, pc}
   19820:	teq	r4, #0
   19824:	eor	r3, r3, #1048576	; 0x100000
   19828:	eoreq	r1, r1, #1048576	; 0x100000
   1982c:	addeq	r4, r4, #1
   19830:	subne	r5, r5, #1
   19834:	b	196c0 <__assert_fail@plt+0x8208>
   19838:	mvns	ip, r4, asr #21
   1983c:	mvnsne	ip, r5, asr #21
   19840:	beq	198a8 <__assert_fail@plt+0x83f0>
   19844:	teq	r4, r5
   19848:	teqeq	r0, r2
   1984c:	beq	19860 <__assert_fail@plt+0x83a8>
   19850:	orrs	ip, r4, r0
   19854:	moveq	r1, r3
   19858:	moveq	r0, r2
   1985c:	pop	{r4, r5, pc}
   19860:	teq	r1, r3
   19864:	movne	r1, #0
   19868:	movne	r0, #0
   1986c:	popne	{r4, r5, pc}
   19870:	lsrs	ip, r4, #21
   19874:	bne	19888 <__assert_fail@plt+0x83d0>
   19878:	lsls	r0, r0, #1
   1987c:	adcs	r1, r1, r1
   19880:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19884:	pop	{r4, r5, pc}
   19888:	adds	r4, r4, #4194304	; 0x400000
   1988c:	addcc	r1, r1, #1048576	; 0x100000
   19890:	popcc	{r4, r5, pc}
   19894:	and	r5, r1, #-2147483648	; 0x80000000
   19898:	orr	r1, r5, #2130706432	; 0x7f000000
   1989c:	orr	r1, r1, #15728640	; 0xf00000
   198a0:	mov	r0, #0
   198a4:	pop	{r4, r5, pc}
   198a8:	mvns	ip, r4, asr #21
   198ac:	movne	r1, r3
   198b0:	movne	r0, r2
   198b4:	mvnseq	ip, r5, asr #21
   198b8:	movne	r3, r1
   198bc:	movne	r2, r0
   198c0:	orrs	r4, r0, r1, lsl #12
   198c4:	orrseq	r5, r2, r3, lsl #12
   198c8:	teqeq	r1, r3
   198cc:	orrne	r1, r1, #524288	; 0x80000
   198d0:	pop	{r4, r5, pc}
   198d4:	teq	r0, #0
   198d8:	moveq	r1, #0
   198dc:	bxeq	lr
   198e0:	push	{r4, r5, lr}
   198e4:	mov	r4, #1024	; 0x400
   198e8:	add	r4, r4, #50	; 0x32
   198ec:	mov	r5, #0
   198f0:	mov	r1, #0
   198f4:	b	19770 <__assert_fail@plt+0x82b8>
   198f8:	teq	r0, #0
   198fc:	moveq	r1, #0
   19900:	bxeq	lr
   19904:	push	{r4, r5, lr}
   19908:	mov	r4, #1024	; 0x400
   1990c:	add	r4, r4, #50	; 0x32
   19910:	ands	r5, r0, #-2147483648	; 0x80000000
   19914:	rsbmi	r0, r0, #0
   19918:	mov	r1, #0
   1991c:	b	19770 <__assert_fail@plt+0x82b8>
   19920:	lsls	r2, r0, #1
   19924:	asr	r1, r2, #3
   19928:	rrx	r1, r1
   1992c:	lsl	r0, r2, #28
   19930:	andsne	r3, r2, #-16777216	; 0xff000000
   19934:	teqne	r3, #-16777216	; 0xff000000
   19938:	eorne	r1, r1, #939524096	; 0x38000000
   1993c:	bxne	lr
   19940:	bics	r2, r2, #-16777216	; 0xff000000
   19944:	bxeq	lr
   19948:	teq	r3, #-16777216	; 0xff000000
   1994c:	orreq	r1, r1, #524288	; 0x80000
   19950:	bxeq	lr
   19954:	push	{r4, r5, lr}
   19958:	mov	r4, #896	; 0x380
   1995c:	and	r5, r1, #-2147483648	; 0x80000000
   19960:	bic	r1, r1, #-2147483648	; 0x80000000
   19964:	b	19770 <__assert_fail@plt+0x82b8>
   19968:	orrs	r2, r0, r1
   1996c:	bxeq	lr
   19970:	push	{r4, r5, lr}
   19974:	mov	r5, #0
   19978:	b	19998 <__assert_fail@plt+0x84e0>
   1997c:	orrs	r2, r0, r1
   19980:	bxeq	lr
   19984:	push	{r4, r5, lr}
   19988:	ands	r5, r1, #-2147483648	; 0x80000000
   1998c:	bpl	19998 <__assert_fail@plt+0x84e0>
   19990:	rsbs	r0, r0, #0
   19994:	rsc	r1, r1, #0
   19998:	mov	r4, #1024	; 0x400
   1999c:	add	r4, r4, #50	; 0x32
   199a0:	lsrs	ip, r1, #22
   199a4:	beq	19714 <__assert_fail@plt+0x825c>
   199a8:	mov	r2, #3
   199ac:	lsrs	ip, ip, #3
   199b0:	addne	r2, r2, #3
   199b4:	lsrs	ip, ip, #3
   199b8:	addne	r2, r2, #3
   199bc:	add	r2, r2, ip, lsr #3
   199c0:	rsb	r3, r2, #32
   199c4:	lsl	ip, r0, r3
   199c8:	lsr	r0, r0, r2
   199cc:	orr	r0, r0, r1, lsl r3
   199d0:	lsr	r1, r1, r2
   199d4:	add	r4, r4, r2
   199d8:	b	19714 <__assert_fail@plt+0x825c>
   199dc:	cmp	r3, #0
   199e0:	cmpeq	r2, #0
   199e4:	bne	19a08 <__assert_fail@plt+0x8550>
   199e8:	cmp	r1, #0
   199ec:	movlt	r1, #-2147483648	; 0x80000000
   199f0:	movlt	r0, #0
   199f4:	blt	19a04 <__assert_fail@plt+0x854c>
   199f8:	cmpeq	r0, #0
   199fc:	mvnne	r1, #-2147483648	; 0x80000000
   19a00:	mvnne	r0, #0
   19a04:	b	19aec <__assert_fail@plt+0x8634>
   19a08:	sub	sp, sp, #8
   19a0c:	push	{sp, lr}
   19a10:	cmp	r1, #0
   19a14:	blt	19a34 <__assert_fail@plt+0x857c>
   19a18:	cmp	r3, #0
   19a1c:	blt	19a68 <__assert_fail@plt+0x85b0>
   19a20:	bl	19b40 <__assert_fail@plt+0x8688>
   19a24:	ldr	lr, [sp, #4]
   19a28:	add	sp, sp, #8
   19a2c:	pop	{r2, r3}
   19a30:	bx	lr
   19a34:	rsbs	r0, r0, #0
   19a38:	sbc	r1, r1, r1, lsl #1
   19a3c:	cmp	r3, #0
   19a40:	blt	19a8c <__assert_fail@plt+0x85d4>
   19a44:	bl	19b40 <__assert_fail@plt+0x8688>
   19a48:	ldr	lr, [sp, #4]
   19a4c:	add	sp, sp, #8
   19a50:	pop	{r2, r3}
   19a54:	rsbs	r0, r0, #0
   19a58:	sbc	r1, r1, r1, lsl #1
   19a5c:	rsbs	r2, r2, #0
   19a60:	sbc	r3, r3, r3, lsl #1
   19a64:	bx	lr
   19a68:	rsbs	r2, r2, #0
   19a6c:	sbc	r3, r3, r3, lsl #1
   19a70:	bl	19b40 <__assert_fail@plt+0x8688>
   19a74:	ldr	lr, [sp, #4]
   19a78:	add	sp, sp, #8
   19a7c:	pop	{r2, r3}
   19a80:	rsbs	r0, r0, #0
   19a84:	sbc	r1, r1, r1, lsl #1
   19a88:	bx	lr
   19a8c:	rsbs	r2, r2, #0
   19a90:	sbc	r3, r3, r3, lsl #1
   19a94:	bl	19b40 <__assert_fail@plt+0x8688>
   19a98:	ldr	lr, [sp, #4]
   19a9c:	add	sp, sp, #8
   19aa0:	pop	{r2, r3}
   19aa4:	rsbs	r2, r2, #0
   19aa8:	sbc	r3, r3, r3, lsl #1
   19aac:	bx	lr
   19ab0:	cmp	r3, #0
   19ab4:	cmpeq	r2, #0
   19ab8:	bne	19ad0 <__assert_fail@plt+0x8618>
   19abc:	cmp	r1, #0
   19ac0:	cmpeq	r0, #0
   19ac4:	mvnne	r1, #0
   19ac8:	mvnne	r0, #0
   19acc:	b	19aec <__assert_fail@plt+0x8634>
   19ad0:	sub	sp, sp, #8
   19ad4:	push	{sp, lr}
   19ad8:	bl	19b40 <__assert_fail@plt+0x8688>
   19adc:	ldr	lr, [sp, #4]
   19ae0:	add	sp, sp, #8
   19ae4:	pop	{r2, r3}
   19ae8:	bx	lr
   19aec:	push	{r1, lr}
   19af0:	mov	r0, #8
   19af4:	bl	11140 <raise@plt>
   19af8:	pop	{r1, pc}
   19afc:	andeq	r0, r0, r0
   19b00:	vmov	d6, r0, r1
   19b04:	vldr	d7, [pc, #36]	; 19b30 <__assert_fail@plt+0x8678>
   19b08:	vldr	d5, [pc, #40]	; 19b38 <__assert_fail@plt+0x8680>
   19b0c:	vmul.f64	d7, d6, d7
   19b10:	vcvt.u32.f64	s14, d7
   19b14:	vcvt.f64.u32	d4, s14
   19b18:	vmov	r1, s14
   19b1c:	vmls.f64	d6, d4, d5
   19b20:	vcvt.u32.f64	s15, d6
   19b24:	vmov	r0, s15
   19b28:	bx	lr
   19b2c:	nop			; (mov r0, r0)
   19b30:	andeq	r0, r0, r0
   19b34:	ldclcc	0, cr0, [r0]
   19b38:	andeq	r0, r0, r0
   19b3c:	mvnsmi	r0, r0
   19b40:	cmp	r1, r3
   19b44:	cmpeq	r0, r2
   19b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b4c:	mov	r4, r0
   19b50:	movcc	r0, #0
   19b54:	mov	r5, r1
   19b58:	ldr	lr, [sp, #36]	; 0x24
   19b5c:	movcc	r1, r0
   19b60:	bcc	19c5c <__assert_fail@plt+0x87a4>
   19b64:	cmp	r3, #0
   19b68:	clzeq	ip, r2
   19b6c:	clzne	ip, r3
   19b70:	addeq	ip, ip, #32
   19b74:	cmp	r5, #0
   19b78:	clzeq	r1, r4
   19b7c:	addeq	r1, r1, #32
   19b80:	clzne	r1, r5
   19b84:	sub	ip, ip, r1
   19b88:	sub	sl, ip, #32
   19b8c:	lsl	r9, r3, ip
   19b90:	rsb	fp, ip, #32
   19b94:	orr	r9, r9, r2, lsl sl
   19b98:	orr	r9, r9, r2, lsr fp
   19b9c:	lsl	r8, r2, ip
   19ba0:	cmp	r5, r9
   19ba4:	cmpeq	r4, r8
   19ba8:	movcc	r0, #0
   19bac:	movcc	r1, r0
   19bb0:	bcc	19bcc <__assert_fail@plt+0x8714>
   19bb4:	mov	r0, #1
   19bb8:	subs	r4, r4, r8
   19bbc:	lsl	r1, r0, sl
   19bc0:	orr	r1, r1, r0, lsr fp
   19bc4:	lsl	r0, r0, ip
   19bc8:	sbc	r5, r5, r9
   19bcc:	cmp	ip, #0
   19bd0:	beq	19c5c <__assert_fail@plt+0x87a4>
   19bd4:	lsr	r6, r8, #1
   19bd8:	orr	r6, r6, r9, lsl #31
   19bdc:	lsr	r7, r9, #1
   19be0:	mov	r2, ip
   19be4:	b	19c08 <__assert_fail@plt+0x8750>
   19be8:	subs	r3, r4, r6
   19bec:	sbc	r8, r5, r7
   19bf0:	adds	r3, r3, r3
   19bf4:	adc	r8, r8, r8
   19bf8:	adds	r4, r3, #1
   19bfc:	adc	r5, r8, #0
   19c00:	subs	r2, r2, #1
   19c04:	beq	19c24 <__assert_fail@plt+0x876c>
   19c08:	cmp	r5, r7
   19c0c:	cmpeq	r4, r6
   19c10:	bcs	19be8 <__assert_fail@plt+0x8730>
   19c14:	adds	r4, r4, r4
   19c18:	adc	r5, r5, r5
   19c1c:	subs	r2, r2, #1
   19c20:	bne	19c08 <__assert_fail@plt+0x8750>
   19c24:	lsr	r3, r4, ip
   19c28:	orr	r3, r3, r5, lsl fp
   19c2c:	lsr	r2, r5, ip
   19c30:	orr	r3, r3, r5, lsr sl
   19c34:	adds	r0, r0, r4
   19c38:	mov	r4, r3
   19c3c:	lsl	r3, r2, ip
   19c40:	orr	r3, r3, r4, lsl sl
   19c44:	lsl	ip, r4, ip
   19c48:	orr	r3, r3, r4, lsr fp
   19c4c:	adc	r1, r1, r5
   19c50:	subs	r0, r0, ip
   19c54:	mov	r5, r2
   19c58:	sbc	r1, r1, r3
   19c5c:	cmp	lr, #0
   19c60:	strdne	r4, [lr]
   19c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c6c:	mov	r7, r0
   19c70:	ldr	r6, [pc, #72]	; 19cc0 <__assert_fail@plt+0x8808>
   19c74:	ldr	r5, [pc, #72]	; 19cc4 <__assert_fail@plt+0x880c>
   19c78:	add	r6, pc, r6
   19c7c:	add	r5, pc, r5
   19c80:	sub	r6, r6, r5
   19c84:	mov	r8, r1
   19c88:	mov	r9, r2
   19c8c:	bl	110fc <fdopen@plt-0x20>
   19c90:	asrs	r6, r6, #2
   19c94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c98:	mov	r4, #0
   19c9c:	add	r4, r4, #1
   19ca0:	ldr	r3, [r5], #4
   19ca4:	mov	r2, r9
   19ca8:	mov	r1, r8
   19cac:	mov	r0, r7
   19cb0:	blx	r3
   19cb4:	cmp	r6, r4
   19cb8:	bne	19c9c <__assert_fail@plt+0x87e4>
   19cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19cc0:	muleq	r1, r4, r2
   19cc4:	andeq	r2, r1, ip, lsl #5
   19cc8:	bx	lr
   19ccc:	ldr	r3, [pc, #12]	; 19ce0 <__assert_fail@plt+0x8828>
   19cd0:	mov	r1, #0
   19cd4:	add	r3, pc, r3
   19cd8:	ldr	r2, [r3]
   19cdc:	b	11350 <__cxa_atexit@plt>
   19ce0:	andeq	r2, r1, r0, ror r4

Disassembly of section .fini:

00019ce4 <.fini>:
   19ce4:	push	{r3, lr}
   19ce8:	pop	{r3, pc}
