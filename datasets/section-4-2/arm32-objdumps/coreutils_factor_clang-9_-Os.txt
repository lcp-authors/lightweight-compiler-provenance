
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011648 <.init>:
   11648:	push	{r3, lr}
   1164c:	bl	11ac4 <__assert_fail@plt+0x48>
   11650:	pop	{r3, pc}

Disassembly of section .plt:

00011654 <calloc@plt-0x14>:
   11654:	push	{lr}		; (str lr, [sp, #-4]!)
   11658:	ldr	lr, [pc, #4]	; 11664 <calloc@plt-0x4>
   1165c:	add	lr, pc, lr
   11660:	ldr	pc, [lr, #8]!
   11664:	muleq	r1, ip, r9

00011668 <calloc@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #126976	; 0x1f000
   11670:	ldr	pc, [ip, #2460]!	; 0x99c

00011674 <fputs_unlocked@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #126976	; 0x1f000
   1167c:	ldr	pc, [ip, #2452]!	; 0x994

00011680 <raise@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #126976	; 0x1f000
   11688:	ldr	pc, [ip, #2444]!	; 0x98c

0001168c <__gmpz_scan1@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #126976	; 0x1f000
   11694:	ldr	pc, [ip, #2436]!	; 0x984

00011698 <iconv_close@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #126976	; 0x1f000
   116a0:	ldr	pc, [ip, #2428]!	; 0x97c

000116a4 <iconv@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #126976	; 0x1f000
   116ac:	ldr	pc, [ip, #2420]!	; 0x974

000116b0 <strcmp@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #126976	; 0x1f000
   116b8:	ldr	pc, [ip, #2412]!	; 0x96c

000116bc <fflush@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #126976	; 0x1f000
   116c4:	ldr	pc, [ip, #2404]!	; 0x964

000116c8 <__gmpz_sub_ui@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #126976	; 0x1f000
   116d0:	ldr	pc, [ip, #2396]!	; 0x95c

000116d4 <__gmpz_clears@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #126976	; 0x1f000
   116dc:	ldr	pc, [ip, #2388]!	; 0x954

000116e0 <wcwidth@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #126976	; 0x1f000
   116e8:	ldr	pc, [ip, #2380]!	; 0x94c

000116ec <memmove@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #126976	; 0x1f000
   116f4:	ldr	pc, [ip, #2372]!	; 0x944

000116f8 <__gmpz_set_ui@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #126976	; 0x1f000
   11700:	ldr	pc, [ip, #2364]!	; 0x93c

00011704 <free@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #126976	; 0x1f000
   1170c:	ldr	pc, [ip, #2356]!	; 0x934

00011710 <_exit@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #126976	; 0x1f000
   11718:	ldr	pc, [ip, #2348]!	; 0x92c

0001171c <memcpy@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #126976	; 0x1f000
   11724:	ldr	pc, [ip, #2340]!	; 0x924

00011728 <__gmpz_sub@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #126976	; 0x1f000
   11730:	ldr	pc, [ip, #2332]!	; 0x91c

00011734 <mbsinit@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #126976	; 0x1f000
   1173c:	ldr	pc, [ip, #2324]!	; 0x914

00011740 <getc_unlocked@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #126976	; 0x1f000
   11748:	ldr	pc, [ip, #2316]!	; 0x90c

0001174c <dcgettext@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #126976	; 0x1f000
   11754:	ldr	pc, [ip, #2308]!	; 0x904

00011758 <__gmpz_powm@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #126976	; 0x1f000
   11760:	ldr	pc, [ip, #2300]!	; 0x8fc

00011764 <strdup@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #126976	; 0x1f000
   1176c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011770 <__gmpz_divexact@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #126976	; 0x1f000
   11778:	ldr	pc, [ip, #2284]!	; 0x8ec

0001177c <__gmpz_inits@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #126976	; 0x1f000
   11784:	ldr	pc, [ip, #2276]!	; 0x8e4

00011788 <__gmpz_set@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #126976	; 0x1f000
   11790:	ldr	pc, [ip, #2268]!	; 0x8dc

00011794 <realloc@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #126976	; 0x1f000
   1179c:	ldr	pc, [ip, #2260]!	; 0x8d4

000117a0 <__gmpz_mul@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #126976	; 0x1f000
   117a8:	ldr	pc, [ip, #2252]!	; 0x8cc

000117ac <__gmpz_tdiv_q_ui@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #126976	; 0x1f000
   117b4:	ldr	pc, [ip, #2244]!	; 0x8c4

000117b8 <textdomain@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #126976	; 0x1f000
   117c0:	ldr	pc, [ip, #2236]!	; 0x8bc

000117c4 <iswcntrl@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #126976	; 0x1f000
   117cc:	ldr	pc, [ip, #2228]!	; 0x8b4

000117d0 <__gmpz_out_str@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #126976	; 0x1f000
   117d8:	ldr	pc, [ip, #2220]!	; 0x8ac

000117dc <fflush_unlocked@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #126976	; 0x1f000
   117e4:	ldr	pc, [ip, #2212]!	; 0x8a4

000117e8 <iswprint@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #126976	; 0x1f000
   117f0:	ldr	pc, [ip, #2204]!	; 0x89c

000117f4 <lseek64@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #126976	; 0x1f000
   117fc:	ldr	pc, [ip, #2196]!	; 0x894

00011800 <__gmpz_fdiv_q_2exp@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #126976	; 0x1f000
   11808:	ldr	pc, [ip, #2188]!	; 0x88c

0001180c <__ctype_get_mb_cur_max@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #126976	; 0x1f000
   11814:	ldr	pc, [ip, #2180]!	; 0x884

00011818 <__fpending@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #126976	; 0x1f000
   11820:	ldr	pc, [ip, #2172]!	; 0x87c

00011824 <ferror_unlocked@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #126976	; 0x1f000
   1182c:	ldr	pc, [ip, #2164]!	; 0x874

00011830 <mbrtowc@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #126976	; 0x1f000
   11838:	ldr	pc, [ip, #2156]!	; 0x86c

0001183c <error@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #126976	; 0x1f000
   11844:	ldr	pc, [ip, #2148]!	; 0x864

00011848 <malloc@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #126976	; 0x1f000
   11850:	ldr	pc, [ip, #2140]!	; 0x85c

00011854 <iconv_open@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #126976	; 0x1f000
   1185c:	ldr	pc, [ip, #2132]!	; 0x854

00011860 <__libc_start_main@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #126976	; 0x1f000
   11868:	ldr	pc, [ip, #2124]!	; 0x84c

0001186c <__freading@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #126976	; 0x1f000
   11874:	ldr	pc, [ip, #2116]!	; 0x844

00011878 <__gmpz_init_set_si@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #126976	; 0x1f000
   11880:	ldr	pc, [ip, #2108]!	; 0x83c

00011884 <__gmpz_add_ui@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #126976	; 0x1f000
   1188c:	ldr	pc, [ip, #2100]!	; 0x834

00011890 <__gmon_start__@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #126976	; 0x1f000
   11898:	ldr	pc, [ip, #2092]!	; 0x82c

0001189c <getopt_long@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #126976	; 0x1f000
   118a4:	ldr	pc, [ip, #2084]!	; 0x824

000118a8 <__ctype_b_loc@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #126976	; 0x1f000
   118b0:	ldr	pc, [ip, #2076]!	; 0x81c

000118b4 <exit@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #126976	; 0x1f000
   118bc:	ldr	pc, [ip, #2068]!	; 0x814

000118c0 <iswspace@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #126976	; 0x1f000
   118c8:	ldr	pc, [ip, #2060]!	; 0x80c

000118cc <bcmp@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #126976	; 0x1f000
   118d4:	ldr	pc, [ip, #2052]!	; 0x804

000118d8 <strlen@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #126976	; 0x1f000
   118e0:	ldr	pc, [ip, #2044]!	; 0x7fc

000118e4 <strchr@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #126976	; 0x1f000
   118ec:	ldr	pc, [ip, #2036]!	; 0x7f4

000118f0 <__gmpz_divisible_ui_p@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #126976	; 0x1f000
   118f8:	ldr	pc, [ip, #2028]!	; 0x7ec

000118fc <__gmpz_clear@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #126976	; 0x1f000
   11904:	ldr	pc, [ip, #2020]!	; 0x7e4

00011908 <__errno_location@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #126976	; 0x1f000
   11910:	ldr	pc, [ip, #2012]!	; 0x7dc

00011914 <iswalnum@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #126976	; 0x1f000
   1191c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011920 <__sprintf_chk@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #126976	; 0x1f000
   11928:	ldr	pc, [ip, #1996]!	; 0x7cc

0001192c <__cxa_atexit@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #126976	; 0x1f000
   11934:	ldr	pc, [ip, #1988]!	; 0x7c4

00011938 <memset@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #126976	; 0x1f000
   11940:	ldr	pc, [ip, #1980]!	; 0x7bc

00011944 <__gmpz_tdiv_q_2exp@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #126976	; 0x1f000
   1194c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011950 <__printf_chk@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #126976	; 0x1f000
   11958:	ldr	pc, [ip, #1964]!	; 0x7ac

0001195c <write@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #126976	; 0x1f000
   11964:	ldr	pc, [ip, #1956]!	; 0x7a4

00011968 <fileno@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #126976	; 0x1f000
   11970:	ldr	pc, [ip, #1948]!	; 0x79c

00011974 <__fprintf_chk@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #126976	; 0x1f000
   1197c:	ldr	pc, [ip, #1940]!	; 0x794

00011980 <memchr@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #126976	; 0x1f000
   11988:	ldr	pc, [ip, #1932]!	; 0x78c

0001198c <fclose@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #126976	; 0x1f000
   11994:	ldr	pc, [ip, #1924]!	; 0x784

00011998 <strnlen@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #126976	; 0x1f000
   119a0:	ldr	pc, [ip, #1916]!	; 0x77c

000119a4 <fseeko64@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #126976	; 0x1f000
   119ac:	ldr	pc, [ip, #1908]!	; 0x774

000119b0 <__gmpz_mod@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #126976	; 0x1f000
   119b8:	ldr	pc, [ip, #1900]!	; 0x76c

000119bc <__gmpz_init_set_ui@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #126976	; 0x1f000
   119c4:	ldr	pc, [ip, #1892]!	; 0x764

000119c8 <__gmpz_cmp@plt>:
   119c8:	add	ip, pc, #0, 12
   119cc:	add	ip, ip, #126976	; 0x1f000
   119d0:	ldr	pc, [ip, #1884]!	; 0x75c

000119d4 <setlocale@plt>:
   119d4:	add	ip, pc, #0, 12
   119d8:	add	ip, ip, #126976	; 0x1f000
   119dc:	ldr	pc, [ip, #1876]!	; 0x754

000119e0 <strrchr@plt>:
   119e0:	add	ip, pc, #0, 12
   119e4:	add	ip, ip, #126976	; 0x1f000
   119e8:	ldr	pc, [ip, #1868]!	; 0x74c

000119ec <nl_langinfo@plt>:
   119ec:	add	ip, pc, #0, 12
   119f0:	add	ip, ip, #126976	; 0x1f000
   119f4:	ldr	pc, [ip, #1860]!	; 0x744

000119f8 <__gmpz_gcd@plt>:
   119f8:	add	ip, pc, #0, 12
   119fc:	add	ip, ip, #126976	; 0x1f000
   11a00:	ldr	pc, [ip, #1852]!	; 0x73c

00011a04 <__gmpz_init_set_str@plt>:
   11a04:	add	ip, pc, #0, 12
   11a08:	add	ip, ip, #126976	; 0x1f000
   11a0c:	ldr	pc, [ip, #1844]!	; 0x734

00011a10 <bindtextdomain@plt>:
   11a10:	add	ip, pc, #0, 12
   11a14:	add	ip, ip, #126976	; 0x1f000
   11a18:	ldr	pc, [ip, #1836]!	; 0x72c

00011a1c <__gmpz_cmp_ui@plt>:
   11a1c:	add	ip, pc, #0, 12
   11a20:	add	ip, ip, #126976	; 0x1f000
   11a24:	ldr	pc, [ip, #1828]!	; 0x724

00011a28 <__gmpz_init@plt>:
   11a28:	add	ip, pc, #0, 12
   11a2c:	add	ip, ip, #126976	; 0x1f000
   11a30:	ldr	pc, [ip, #1820]!	; 0x71c

00011a34 <__gmpz_powm_ui@plt>:
   11a34:	add	ip, pc, #0, 12
   11a38:	add	ip, ip, #126976	; 0x1f000
   11a3c:	ldr	pc, [ip, #1812]!	; 0x714

00011a40 <isatty@plt>:
   11a40:	add	ip, pc, #0, 12
   11a44:	add	ip, ip, #126976	; 0x1f000
   11a48:	ldr	pc, [ip, #1804]!	; 0x70c

00011a4c <fputs@plt>:
   11a4c:	add	ip, pc, #0, 12
   11a50:	add	ip, ip, #126976	; 0x1f000
   11a54:	ldr	pc, [ip, #1796]!	; 0x704

00011a58 <strncmp@plt>:
   11a58:	add	ip, pc, #0, 12
   11a5c:	add	ip, ip, #126976	; 0x1f000
   11a60:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a64 <abort@plt>:
   11a64:	add	ip, pc, #0, 12
   11a68:	add	ip, ip, #126976	; 0x1f000
   11a6c:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a70 <putchar_unlocked@plt>:
   11a70:	add	ip, pc, #0, 12
   11a74:	add	ip, ip, #126976	; 0x1f000
   11a78:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a7c <__assert_fail@plt>:
   11a7c:	add	ip, pc, #0, 12
   11a80:	add	ip, ip, #126976	; 0x1f000
   11a84:	ldr	pc, [ip, #1764]!	; 0x6e4

Disassembly of section .text:

00011a88 <.text>:
   11a88:	mov	fp, #0
   11a8c:	mov	lr, #0
   11a90:	pop	{r1}		; (ldr r1, [sp], #4)
   11a94:	mov	r2, sp
   11a98:	push	{r2}		; (str r2, [sp, #-4]!)
   11a9c:	push	{r0}		; (str r0, [sp, #-4]!)
   11aa0:	ldr	ip, [pc, #16]	; 11ab8 <__assert_fail@plt+0x3c>
   11aa4:	push	{ip}		; (str ip, [sp, #-4]!)
   11aa8:	ldr	r0, [pc, #12]	; 11abc <__assert_fail@plt+0x40>
   11aac:	ldr	r3, [pc, #12]	; 11ac0 <__assert_fail@plt+0x44>
   11ab0:	bl	11860 <__libc_start_main@plt>
   11ab4:	bl	11a64 <abort@plt>
   11ab8:	andeq	ip, r1, r0, ror #6
   11abc:	andeq	r1, r1, r0, lsr #27
   11ac0:	andeq	ip, r1, r0, lsl #6
   11ac4:	ldr	r3, [pc, #20]	; 11ae0 <__assert_fail@plt+0x64>
   11ac8:	ldr	r2, [pc, #20]	; 11ae4 <__assert_fail@plt+0x68>
   11acc:	add	r3, pc, r3
   11ad0:	ldr	r2, [r3, r2]
   11ad4:	cmp	r2, #0
   11ad8:	bxeq	lr
   11adc:	b	11890 <__gmon_start__@plt>
   11ae0:	andeq	pc, r1, ip, lsr #10
   11ae4:	andeq	r0, r0, ip, ror #2
   11ae8:	ldr	r0, [pc, #24]	; 11b08 <__assert_fail@plt+0x8c>
   11aec:	ldr	r3, [pc, #24]	; 11b0c <__assert_fail@plt+0x90>
   11af0:	cmp	r3, r0
   11af4:	bxeq	lr
   11af8:	ldr	r3, [pc, #16]	; 11b10 <__assert_fail@plt+0x94>
   11afc:	cmp	r3, #0
   11b00:	bxeq	lr
   11b04:	bx	r3
   11b08:	andeq	r1, r3, r8, asr #3
   11b0c:	andeq	r1, r3, r8, asr #3
   11b10:	andeq	r0, r0, r0
   11b14:	ldr	r0, [pc, #36]	; 11b40 <__assert_fail@plt+0xc4>
   11b18:	ldr	r1, [pc, #36]	; 11b44 <__assert_fail@plt+0xc8>
   11b1c:	sub	r1, r1, r0
   11b20:	asr	r1, r1, #2
   11b24:	add	r1, r1, r1, lsr #31
   11b28:	asrs	r1, r1, #1
   11b2c:	bxeq	lr
   11b30:	ldr	r3, [pc, #16]	; 11b48 <__assert_fail@plt+0xcc>
   11b34:	cmp	r3, #0
   11b38:	bxeq	lr
   11b3c:	bx	r3
   11b40:	andeq	r1, r3, r8, asr #3
   11b44:	andeq	r1, r3, r8, asr #3
   11b48:	andeq	r0, r0, r0
   11b4c:	push	{r4, lr}
   11b50:	ldr	r4, [pc, #24]	; 11b70 <__assert_fail@plt+0xf4>
   11b54:	ldrb	r3, [r4]
   11b58:	cmp	r3, #0
   11b5c:	popne	{r4, pc}
   11b60:	bl	11ae8 <__assert_fail@plt+0x6c>
   11b64:	mov	r3, #1
   11b68:	strb	r3, [r4]
   11b6c:	pop	{r4, pc}
   11b70:	andeq	r1, r3, r8, ror #3
   11b74:	b	11b14 <__assert_fail@plt+0x98>
   11b78:	push	{fp, lr}
   11b7c:	mov	fp, sp
   11b80:	sub	sp, sp, #56	; 0x38
   11b84:	mov	r8, r0
   11b88:	cmp	r0, #0
   11b8c:	bne	11d60 <__assert_fail@plt+0x2e4>
   11b90:	movw	r1, #50099	; 0xc3b3
   11b94:	mov	r0, #0
   11b98:	mov	r2, #5
   11b9c:	movt	r1, #1
   11ba0:	bl	1174c <dcgettext@plt>
   11ba4:	mov	r1, r0
   11ba8:	movw	r0, #4608	; 0x1200
   11bac:	movt	r0, #3
   11bb0:	ldr	r2, [r0]
   11bb4:	mov	r0, #1
   11bb8:	mov	r3, r2
   11bbc:	bl	11950 <__printf_chk@plt>
   11bc0:	movw	r1, #50139	; 0xc3db
   11bc4:	mov	r0, #0
   11bc8:	mov	r2, #5
   11bcc:	movt	r1, #1
   11bd0:	bl	1174c <dcgettext@plt>
   11bd4:	movw	r9, #4580	; 0x11e4
   11bd8:	movt	r9, #3
   11bdc:	ldr	r1, [r9]
   11be0:	bl	11674 <fputs_unlocked@plt>
   11be4:	movw	r1, #50274	; 0xc462
   11be8:	mov	r0, #0
   11bec:	mov	r2, #5
   11bf0:	movt	r1, #1
   11bf4:	bl	1174c <dcgettext@plt>
   11bf8:	ldr	r1, [r9]
   11bfc:	bl	11674 <fputs_unlocked@plt>
   11c00:	movw	r1, #50319	; 0xc48f
   11c04:	mov	r0, #0
   11c08:	mov	r2, #5
   11c0c:	movt	r1, #1
   11c10:	bl	1174c <dcgettext@plt>
   11c14:	ldr	r1, [r9]
   11c18:	bl	11674 <fputs_unlocked@plt>
   11c1c:	movw	r0, #51768	; 0xca38
   11c20:	mov	r6, sp
   11c24:	movt	r0, #1
   11c28:	mov	r1, r6
   11c2c:	ldm	r0!, {r2, r3, r4, r5}
   11c30:	stmia	r1!, {r2, r3, r4, r5}
   11c34:	ldm	r0!, {r2, r3, r4, r5, r7}
   11c38:	stmia	r1!, {r2, r3, r4, r5, r7}
   11c3c:	ldm	r0, {r2, r3, r4, r5, r7}
   11c40:	stm	r1, {r2, r3, r4, r5, r7}
   11c44:	movw	r1, #50493	; 0xc53d
   11c48:	movw	r5, #50373	; 0xc4c5
   11c4c:	movt	r1, #1
   11c50:	movt	r5, #1
   11c54:	mov	r0, r5
   11c58:	bl	116b0 <strcmp@plt>
   11c5c:	cmp	r0, #0
   11c60:	ldrne	r1, [r6, #8]!
   11c64:	cmpne	r1, #0
   11c68:	bne	11c54 <__assert_fail@plt+0x1d8>
   11c6c:	movw	r1, #50588	; 0xc59c
   11c70:	ldr	r6, [r6, #4]
   11c74:	mov	r0, #0
   11c78:	mov	r2, #5
   11c7c:	movt	r1, #1
   11c80:	bl	1174c <dcgettext@plt>
   11c84:	movw	r2, #50404	; 0xc4e4
   11c88:	movw	r3, #50611	; 0xc5b3
   11c8c:	mov	r1, r0
   11c90:	mov	r0, #1
   11c94:	movt	r2, #1
   11c98:	movt	r3, #1
   11c9c:	bl	11950 <__printf_chk@plt>
   11ca0:	cmp	r6, #0
   11ca4:	mov	r0, #5
   11ca8:	mov	r1, #0
   11cac:	moveq	r6, r5
   11cb0:	bl	119d4 <setlocale@plt>
   11cb4:	cmp	r0, #0
   11cb8:	beq	11cf0 <__assert_fail@plt+0x274>
   11cbc:	movw	r1, #50651	; 0xc5db
   11cc0:	mov	r2, #3
   11cc4:	movt	r1, #1
   11cc8:	bl	11a58 <strncmp@plt>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11cf0 <__assert_fail@plt+0x274>
   11cd4:	movw	r1, #50655	; 0xc5df
   11cd8:	mov	r0, #0
   11cdc:	mov	r2, #5
   11ce0:	movt	r1, #1
   11ce4:	bl	1174c <dcgettext@plt>
   11ce8:	ldr	r1, [r9]
   11cec:	bl	11674 <fputs_unlocked@plt>
   11cf0:	movw	r1, #50726	; 0xc626
   11cf4:	mov	r0, #0
   11cf8:	mov	r2, #5
   11cfc:	movt	r1, #1
   11d00:	bl	1174c <dcgettext@plt>
   11d04:	movw	r2, #50611	; 0xc5b3
   11d08:	mov	r1, r0
   11d0c:	mov	r0, #1
   11d10:	mov	r3, r5
   11d14:	movt	r2, #1
   11d18:	bl	11950 <__printf_chk@plt>
   11d1c:	movw	r1, #50753	; 0xc641
   11d20:	mov	r0, #0
   11d24:	mov	r2, #5
   11d28:	movt	r1, #1
   11d2c:	bl	1174c <dcgettext@plt>
   11d30:	mov	r1, r0
   11d34:	movw	r0, #50521	; 0xc559
   11d38:	movw	r3, #50273	; 0xc461
   11d3c:	cmp	r6, r5
   11d40:	mov	r2, r6
   11d44:	movt	r0, #1
   11d48:	movt	r3, #1
   11d4c:	moveq	r3, r0
   11d50:	mov	r0, #1
   11d54:	bl	11950 <__printf_chk@plt>
   11d58:	mov	r0, r8
   11d5c:	bl	118b4 <exit@plt>
   11d60:	movw	r0, #4568	; 0x11d8
   11d64:	movw	r1, #50060	; 0xc38c
   11d68:	mov	r2, #5
   11d6c:	movt	r0, #3
   11d70:	movt	r1, #1
   11d74:	ldr	r5, [r0]
   11d78:	mov	r0, #0
   11d7c:	bl	1174c <dcgettext@plt>
   11d80:	mov	r2, r0
   11d84:	movw	r0, #4608	; 0x1200
   11d88:	mov	r1, #1
   11d8c:	movt	r0, #3
   11d90:	ldr	r3, [r0]
   11d94:	mov	r0, r5
   11d98:	bl	11974 <__fprintf_chk@plt>
   11d9c:	b	11d58 <__assert_fail@plt+0x2dc>
   11da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da4:	add	fp, sp, #28
   11da8:	sub	sp, sp, #28
   11dac:	mov	r4, r0
   11db0:	ldr	r0, [r1]
   11db4:	mov	r5, r1
   11db8:	bl	175e8 <__assert_fail@plt+0x5b6c>
   11dbc:	movw	r1, #50273	; 0xc461
   11dc0:	mov	r0, #6
   11dc4:	movt	r1, #1
   11dc8:	bl	119d4 <setlocale@plt>
   11dcc:	movw	r6, #50408	; 0xc4e8
   11dd0:	movw	r1, #50380	; 0xc4cc
   11dd4:	movt	r6, #1
   11dd8:	movt	r1, #1
   11ddc:	mov	r0, r6
   11de0:	bl	11a10 <bindtextdomain@plt>
   11de4:	mov	r0, r6
   11de8:	bl	117b8 <textdomain@plt>
   11dec:	movw	r6, #4592	; 0x11f0
   11df0:	movt	r6, #3
   11df4:	ldr	r0, [r6]
   11df8:	cmp	r0, #0
   11dfc:	bne	11e18 <__assert_fail@plt+0x39c>
   11e00:	mov	r0, #1024	; 0x400
   11e04:	bl	1a108 <__assert_fail@plt+0x868c>
   11e08:	movw	r1, #4596	; 0x11f4
   11e0c:	str	r0, [r6]
   11e10:	movt	r1, #3
   11e14:	str	r0, [r1]
   11e18:	movw	r0, #29708	; 0x740c
   11e1c:	movt	r0, #1
   11e20:	bl	1c364 <__assert_fail@plt+0xa8e8>
   11e24:	movw	r0, #8172	; 0x1fec
   11e28:	movt	r0, #1
   11e2c:	bl	1c364 <__assert_fail@plt+0xa8e8>
   11e30:	movw	r6, #50273	; 0xc461
   11e34:	movw	r7, #51704	; 0xc9f8
   11e38:	movw	r9, #4588	; 0x11ec
   11e3c:	mov	r8, #0
   11e40:	mov	sl, #1
   11e44:	movt	r6, #1
   11e48:	movt	r7, #1
   11e4c:	movt	r9, #3
   11e50:	mov	r0, r4
   11e54:	mov	r1, r5
   11e58:	mov	r2, r6
   11e5c:	mov	r3, r7
   11e60:	str	r8, [sp]
   11e64:	bl	1189c <getopt_long@plt>
   11e68:	cmp	r0, #255	; 0xff
   11e6c:	ble	11e80 <__assert_fail@plt+0x404>
   11e70:	cmp	r0, #256	; 0x100
   11e74:	bne	11fe4 <__assert_fail@plt+0x568>
   11e78:	strb	sl, [r9]
   11e7c:	b	11e50 <__assert_fail@plt+0x3d4>
   11e80:	cmn	r0, #1
   11e84:	bne	11f4c <__assert_fail@plt+0x4d0>
   11e88:	movw	r0, #4560	; 0x11d0
   11e8c:	movt	r0, #3
   11e90:	ldr	r0, [r0]
   11e94:	cmp	r0, r4
   11e98:	bge	11ec0 <__assert_fail@plt+0x444>
   11e9c:	add	r5, r5, r0, lsl #2
   11ea0:	sub	r4, r4, r0
   11ea4:	mov	r7, #1
   11ea8:	ldr	r0, [r5], #4
   11eac:	bl	12060 <__assert_fail@plt+0x5e4>
   11eb0:	and	r7, r7, r0
   11eb4:	subs	r4, r4, #1
   11eb8:	bne	11ea8 <__assert_fail@plt+0x42c>
   11ebc:	b	11f40 <__assert_fail@plt+0x4c4>
   11ec0:	add	r4, sp, #20
   11ec4:	mov	r0, r4
   11ec8:	bl	196b4 <__assert_fail@plt+0x7c38>
   11ecc:	movw	r8, #4576	; 0x11e0
   11ed0:	movw	r1, #50836	; 0xc694
   11ed4:	mov	r2, #3
   11ed8:	mov	r3, r4
   11edc:	movt	r8, #3
   11ee0:	movt	r1, #1
   11ee4:	ldr	r0, [r8]
   11ee8:	bl	196c4 <__assert_fail@plt+0x7c48>
   11eec:	mov	r1, r0
   11ef0:	ldr	r0, [sp, #24]
   11ef4:	mov	r7, #1
   11ef8:	cmn	r1, #1
   11efc:	beq	11f3c <__assert_fail@plt+0x4c0>
   11f00:	movw	r4, #50836	; 0xc694
   11f04:	add	r5, sp, #20
   11f08:	movt	r4, #1
   11f0c:	bl	12060 <__assert_fail@plt+0x5e4>
   11f10:	mov	r6, r0
   11f14:	ldr	r0, [r8]
   11f18:	mov	r1, r4
   11f1c:	mov	r2, #3
   11f20:	mov	r3, r5
   11f24:	bl	196c4 <__assert_fail@plt+0x7c48>
   11f28:	mov	r1, r0
   11f2c:	ldr	r0, [sp, #24]
   11f30:	and	r7, r7, r6
   11f34:	cmn	r1, #1
   11f38:	bne	11f0c <__assert_fail@plt+0x490>
   11f3c:	bl	174f4 <__assert_fail@plt+0x5a78>
   11f40:	eor	r0, r7, #1
   11f44:	sub	sp, fp, #28
   11f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f4c:	cmn	r0, #3
   11f50:	bne	11fd4 <__assert_fail@plt+0x558>
   11f54:	movw	r0, #4476	; 0x117c
   11f58:	movw	r1, #50447	; 0xc50f
   11f5c:	movt	r0, #3
   11f60:	movt	r1, #1
   11f64:	ldr	r4, [r0]
   11f68:	movw	r0, #4580	; 0x11e4
   11f6c:	movt	r0, #3
   11f70:	ldr	r5, [r0]
   11f74:	movw	r0, #50429	; 0xc4fd
   11f78:	movt	r0, #1
   11f7c:	bl	179f4 <__assert_fail@plt+0x5f78>
   11f80:	movw	r1, #50479	; 0xc52f
   11f84:	mov	r6, r0
   11f88:	movw	r0, #50466	; 0xc522
   11f8c:	movt	r0, #1
   11f90:	movt	r1, #1
   11f94:	bl	179f4 <__assert_fail@plt+0x5f78>
   11f98:	movw	r2, #50418	; 0xc4f2
   11f9c:	mov	r1, #0
   11fa0:	mov	r3, r4
   11fa4:	movt	r2, #1
   11fa8:	stm	sp, {r2, r6}
   11fac:	movw	r2, #50404	; 0xc4e4
   11fb0:	str	r1, [sp, #12]
   11fb4:	movw	r1, #50373	; 0xc4c5
   11fb8:	str	r0, [sp, #8]
   11fbc:	mov	r0, r5
   11fc0:	movt	r1, #1
   11fc4:	movt	r2, #1
   11fc8:	bl	1a000 <__assert_fail@plt+0x8584>
   11fcc:	mov	r0, #0
   11fd0:	bl	118b4 <exit@plt>
   11fd4:	cmn	r0, #2
   11fd8:	bne	11fe4 <__assert_fail@plt+0x568>
   11fdc:	mov	r0, #0
   11fe0:	bl	11b78 <__assert_fail@plt+0xfc>
   11fe4:	mov	r0, #1
   11fe8:	bl	11b78 <__assert_fail@plt+0xfc>
   11fec:	push	{r4, r5, r6, sl, fp, lr}
   11ff0:	add	fp, sp, #16
   11ff4:	movw	r5, #4592	; 0x11f0
   11ff8:	movw	r6, #4596	; 0x11f4
   11ffc:	movt	r5, #3
   12000:	movt	r6, #3
   12004:	ldr	r1, [r5]
   12008:	ldr	r0, [r6]
   1200c:	sub	r4, r0, r1
   12010:	mov	r0, #1
   12014:	mov	r2, r4
   12018:	bl	1751c <__assert_fail@plt+0x5aa0>
   1201c:	cmp	r0, r4
   12020:	ldreq	r0, [r5]
   12024:	streq	r0, [r6]
   12028:	popeq	{r4, r5, r6, sl, fp, pc}
   1202c:	bl	11908 <__errno_location@plt>
   12030:	movw	r1, #50804	; 0xc674
   12034:	ldr	r4, [r0]
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #1
   12044:	bl	1174c <dcgettext@plt>
   12048:	movw	r2, #64121	; 0xfa79
   1204c:	mov	r3, r0
   12050:	mov	r0, #1
   12054:	mov	r1, r4
   12058:	movt	r2, #1
   1205c:	bl	1183c <error@plt>
   12060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12064:	add	fp, sp, #28
   12068:	sub	sp, sp, #284	; 0x11c
   1206c:	str	r0, [sp, #8]
   12070:	mov	sl, r0
   12074:	ldrb	r1, [r0], #1
   12078:	cmp	r1, #32
   1207c:	beq	12070 <__assert_fail@plt+0x5f4>
   12080:	sub	r1, r1, #43	; 0x2b
   12084:	clz	r1, r1
   12088:	lsr	r7, r1, #5
   1208c:	mov	r1, #0
   12090:	ldrb	r3, [sl, r7]!
   12094:	cmp	r3, #0
   12098:	beq	120cc <__assert_fail@plt+0x650>
   1209c:	mvn	r1, #47	; 0x2f
   120a0:	mov	r2, r7
   120a4:	uxtab	r3, r1, r3
   120a8:	cmp	r3, #10
   120ac:	bcs	120c8 <__assert_fail@plt+0x64c>
   120b0:	ldrb	r3, [r0, r2]
   120b4:	add	r2, r2, #1
   120b8:	cmp	r3, #0
   120bc:	bne	120a4 <__assert_fail@plt+0x628>
   120c0:	mov	r1, #1
   120c4:	b	120cc <__assert_fail@plt+0x650>
   120c8:	mov	r1, #0
   120cc:	sub	r2, r7, #1
   120d0:	mov	ip, #10
   120d4:	mov	r4, #0
   120d8:	mov	r5, #0
   120dc:	mov	r9, #0
   120e0:	mov	r6, #0
   120e4:	tst	r1, #1
   120e8:	beq	1217c <__assert_fail@plt+0x700>
   120ec:	ldrb	r1, [r0, r2]
   120f0:	cmp	r1, #0
   120f4:	beq	121b8 <__assert_fail@plt+0x73c>
   120f8:	movw	r3, #39321	; 0x9999
   120fc:	movt	r3, #39321	; 0x9999
   12100:	subs	r8, r3, r4
   12104:	movw	r3, #39321	; 0x9999
   12108:	movt	r3, #6553	; 0x1999
   1210c:	sbcs	r3, r3, r5
   12110:	bcc	12354 <__assert_fail@plt+0x8d8>
   12114:	mov	lr, r5
   12118:	umull	r7, r5, r9, ip
   1211c:	mov	r8, r4
   12120:	add	r4, r6, r6, lsl #2
   12124:	lsl	r3, r6, #1
   12128:	sub	r1, r1, #48	; 0x30
   1212c:	add	r2, r2, #1
   12130:	orr	r3, r3, r9, lsr #31
   12134:	add	r4, r5, r4, lsl #1
   12138:	lsr	r5, r6, #29
   1213c:	add	r5, r5, r6, lsr #31
   12140:	subs	r6, r7, r9, lsl #1
   12144:	umull	r8, r6, r8, ip
   12148:	sbcs	r3, r4, r3
   1214c:	add	r3, lr, lr, lsl #2
   12150:	addcc	r5, r5, #1
   12154:	adds	r9, r7, r1
   12158:	mov	r1, #0
   1215c:	add	r3, r6, r3, lsl #1
   12160:	adcs	r6, r4, #0
   12164:	adcs	r4, r8, r5
   12168:	adcs	r5, r3, #0
   1216c:	adcs	r1, r1, #0
   12170:	mov	r1, #1
   12174:	beq	120e4 <__assert_fail@plt+0x668>
   12178:	b	12354 <__assert_fail@plt+0x8d8>
   1217c:	movw	r1, #50877	; 0xc6bd
   12180:	mov	r0, #0
   12184:	mov	r2, #5
   12188:	mov	r4, #0
   1218c:	movt	r1, #1
   12190:	bl	1174c <dcgettext@plt>
   12194:	mov	r5, r0
   12198:	ldr	r0, [sp, #8]
   1219c:	bl	19568 <__assert_fail@plt+0x7aec>
   121a0:	mov	r3, r0
   121a4:	mov	r0, #0
   121a8:	mov	r1, #0
   121ac:	mov	r2, r5
   121b0:	bl	1183c <error@plt>
   121b4:	b	12450 <__assert_fail@plt+0x9d4>
   121b8:	cmp	r5, #0
   121bc:	bmi	12354 <__assert_fail@plt+0x8d8>
   121c0:	movw	r0, #4588	; 0x11ec
   121c4:	movt	r0, #3
   121c8:	ldrb	r0, [r0]
   121cc:	cmp	r0, #1
   121d0:	bne	121f0 <__assert_fail@plt+0x774>
   121d4:	movw	r0, #4568	; 0x11d8
   121d8:	movw	r2, #50840	; 0xc698
   121dc:	mov	r1, #1
   121e0:	movt	r0, #3
   121e4:	movt	r2, #1
   121e8:	ldr	r0, [r0]
   121ec:	bl	11974 <__fprintf_chk@plt>
   121f0:	mov	r0, r4
   121f4:	mov	r1, r5
   121f8:	mov	r2, r9
   121fc:	mov	r3, r6
   12200:	bl	12694 <__assert_fail@plt+0xc18>
   12204:	movw	r8, #4596	; 0x11f4
   12208:	add	sl, sp, #24
   1220c:	mov	r2, r9
   12210:	mov	r3, r6
   12214:	movt	r8, #3
   12218:	ldr	r0, [r8]
   1221c:	add	r1, r0, #1
   12220:	str	r1, [r8]
   12224:	mov	r1, #58	; 0x3a
   12228:	strb	r1, [r0]
   1222c:	mov	r0, r4
   12230:	mov	r1, r5
   12234:	str	sl, [sp]
   12238:	bl	127e4 <__assert_fail@plt+0xd68>
   1223c:	ldrb	r0, [sp, #274]	; 0x112
   12240:	cmp	r0, #0
   12244:	beq	122ac <__assert_fail@plt+0x830>
   12248:	mov	r9, #0
   1224c:	mov	r6, #32
   12250:	add	r7, sl, r9
   12254:	ldrb	r1, [r7, #224]!	; 0xe0
   12258:	cmp	r1, #0
   1225c:	beq	1229c <__assert_fail@plt+0x820>
   12260:	add	r0, sl, r9, lsl #3
   12264:	mov	r5, #0
   12268:	add	r4, r0, #16
   1226c:	ldr	r0, [r8]
   12270:	mov	r2, #0
   12274:	add	r1, r0, #1
   12278:	str	r1, [r8]
   1227c:	strb	r6, [r0]
   12280:	ldrd	r0, [r4]
   12284:	bl	131c8 <__assert_fail@plt+0x174c>
   12288:	ldrb	r0, [r7]
   1228c:	add	r5, r5, #1
   12290:	cmp	r5, r0
   12294:	bcc	1226c <__assert_fail@plt+0x7f0>
   12298:	ldrb	r0, [sp, #274]	; 0x112
   1229c:	uxtb	r1, r0
   122a0:	add	r9, r9, #1
   122a4:	cmp	r9, r1
   122a8:	bcc	12250 <__assert_fail@plt+0x7d4>
   122ac:	ldr	r0, [sp, #32]
   122b0:	ldr	r1, [sp, #36]	; 0x24
   122b4:	orrs	r0, r0, r1
   122b8:	beq	122e4 <__assert_fail@plt+0x868>
   122bc:	ldr	r1, [r8]
   122c0:	add	r0, sl, #8
   122c4:	add	r2, r1, #1
   122c8:	str	r2, [r8]
   122cc:	mov	r2, #32
   122d0:	strb	r2, [r1]
   122d4:	ldrd	r0, [r0]
   122d8:	ldr	r2, [sp, #24]
   122dc:	ldr	r3, [sp, #28]
   122e0:	bl	12694 <__assert_fail@plt+0xc18>
   122e4:	ldr	r0, [r8]
   122e8:	movw	r6, #4472	; 0x1178
   122ec:	movw	r4, #4592	; 0x11f0
   122f0:	mov	r1, #10
   122f4:	movt	r6, #3
   122f8:	movt	r4, #3
   122fc:	add	r5, r0, #1
   12300:	str	r5, [r8]
   12304:	strb	r1, [r0]
   12308:	ldr	r0, [r6]
   1230c:	ldr	r7, [r4]
   12310:	cmn	r0, #1
   12314:	bne	12344 <__assert_fail@plt+0x8c8>
   12318:	mov	r0, #0
   1231c:	bl	11a40 <isatty@plt>
   12320:	mov	r1, r0
   12324:	mov	r0, #1
   12328:	cmp	r1, #0
   1232c:	bne	12340 <__assert_fail@plt+0x8c4>
   12330:	mov	r0, #1
   12334:	bl	11a40 <isatty@plt>
   12338:	cmp	r0, #0
   1233c:	movwne	r0, #1
   12340:	str	r0, [r6]
   12344:	cmp	r0, #0
   12348:	beq	1245c <__assert_fail@plt+0x9e0>
   1234c:	bl	11fec <__assert_fail@plt+0x570>
   12350:	b	1244c <__assert_fail@plt+0x9d0>
   12354:	movw	r0, #4588	; 0x11ec
   12358:	movt	r0, #3
   1235c:	ldrb	r0, [r0]
   12360:	cmp	r0, #1
   12364:	bne	12384 <__assert_fail@plt+0x908>
   12368:	movw	r0, #4568	; 0x11d8
   1236c:	movw	r2, #50912	; 0xc6e0
   12370:	mov	r1, #1
   12374:	movt	r0, #3
   12378:	movt	r2, #1
   1237c:	ldr	r0, [r0]
   12380:	bl	11974 <__fprintf_chk@plt>
   12384:	add	r5, sp, #24
   12388:	mov	r1, sl
   1238c:	mov	r2, #10
   12390:	mov	r0, r5
   12394:	bl	11a04 <__gmpz_init_set_str@plt>
   12398:	movw	r4, #4580	; 0x11e4
   1239c:	mov	r1, #10
   123a0:	mov	r2, r5
   123a4:	movt	r4, #3
   123a8:	ldr	r0, [r4]
   123ac:	bl	117d0 <__gmpz_out_str@plt>
   123b0:	mov	r0, #58	; 0x3a
   123b4:	bl	11a70 <putchar_unlocked@plt>
   123b8:	add	r1, sp, #12
   123bc:	mov	r0, r5
   123c0:	bl	124b4 <__assert_fail@plt+0xa38>
   123c4:	ldr	r1, [sp, #20]
   123c8:	cmp	r1, #0
   123cc:	beq	1242c <__assert_fail@plt+0x9b0>
   123d0:	ldr	r0, [sp, #16]
   123d4:	mov	r5, #0
   123d8:	ldr	r2, [r0, r5, lsl #2]
   123dc:	cmp	r2, #0
   123e0:	beq	12420 <__assert_fail@plt+0x9a4>
   123e4:	mov	r6, #0
   123e8:	mov	r0, #32
   123ec:	bl	11a70 <putchar_unlocked@plt>
   123f0:	ldr	r1, [sp, #12]
   123f4:	add	r0, r5, r5, lsl #1
   123f8:	add	r2, r1, r0, lsl #2
   123fc:	ldr	r0, [r4]
   12400:	mov	r1, #10
   12404:	bl	117d0 <__gmpz_out_str@plt>
   12408:	ldr	r0, [sp, #16]
   1240c:	add	r6, r6, #1
   12410:	ldr	r1, [r0, r5, lsl #2]
   12414:	cmp	r6, r1
   12418:	bcc	123e8 <__assert_fail@plt+0x96c>
   1241c:	ldr	r1, [sp, #20]
   12420:	add	r5, r5, #1
   12424:	cmp	r5, r1
   12428:	bcc	123d8 <__assert_fail@plt+0x95c>
   1242c:	add	r0, sp, #12
   12430:	bl	12640 <__assert_fail@plt+0xbc4>
   12434:	add	r0, sp, #24
   12438:	bl	118fc <__gmpz_clear@plt>
   1243c:	mov	r0, #10
   12440:	bl	11a70 <putchar_unlocked@plt>
   12444:	ldr	r0, [r4]
   12448:	bl	117dc <fflush_unlocked@plt>
   1244c:	mov	r4, #1
   12450:	mov	r0, r4
   12454:	sub	sp, fp, #28
   12458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1245c:	sub	r0, r5, r7
   12460:	cmp	r0, #512	; 0x200
   12464:	bcc	1244c <__assert_fail@plt+0x9d0>
   12468:	ldr	r0, [r4]
   1246c:	ldr	r5, [r8]
   12470:	movw	r1, #513	; 0x201
   12474:	add	r7, r0, r1
   12478:	ldrb	r0, [r7, #-2]
   1247c:	sub	r7, r7, #1
   12480:	cmp	r0, #10
   12484:	bne	12478 <__assert_fail@plt+0x9fc>
   12488:	str	r7, [r8]
   1248c:	bl	11fec <__assert_fail@plt+0x570>
   12490:	ldr	r6, [r4]
   12494:	sub	r5, r5, r7
   12498:	mov	r1, r7
   1249c:	mov	r2, r5
   124a0:	mov	r0, r6
   124a4:	bl	1171c <memcpy@plt>
   124a8:	add	r0, r6, r5
   124ac:	str	r0, [r8]
   124b0:	b	1244c <__assert_fail@plt+0x9d0>
   124b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124b8:	add	fp, sp, #24
   124bc:	sub	sp, sp, #16
   124c0:	mov	r5, r0
   124c4:	mov	r0, #0
   124c8:	str	r0, [r1]
   124cc:	str	r0, [r1, #4]
   124d0:	str	r0, [r1, #8]
   124d4:	ldr	r0, [r5, #4]
   124d8:	cmp	r0, #0
   124dc:	beq	12638 <__assert_fail@plt+0xbbc>
   124e0:	movw	r8, #4588	; 0x11ec
   124e4:	mov	r4, r1
   124e8:	movt	r8, #3
   124ec:	ldrb	r0, [r8]
   124f0:	cmp	r0, #1
   124f4:	bne	12514 <__assert_fail@plt+0xa98>
   124f8:	movw	r0, #4568	; 0x11d8
   124fc:	movw	r2, #51615	; 0xc99f
   12500:	mov	r1, #1
   12504:	movt	r0, #3
   12508:	movt	r2, #1
   1250c:	ldr	r0, [r0]
   12510:	bl	11974 <__fprintf_chk@plt>
   12514:	add	r0, sp, #4
   12518:	bl	11a28 <__gmpz_init@plt>
   1251c:	mov	r0, r5
   12520:	mov	r1, #0
   12524:	bl	1168c <__gmpz_scan1@plt>
   12528:	mov	r6, r0
   1252c:	mov	r0, r5
   12530:	mov	r1, r5
   12534:	mov	r2, r6
   12538:	bl	11800 <__gmpz_fdiv_q_2exp@plt>
   1253c:	cmp	r6, #0
   12540:	beq	12558 <__assert_fail@plt+0xadc>
   12544:	mov	r0, r4
   12548:	mov	r1, #2
   1254c:	bl	172ec <__assert_fail@plt+0x5870>
   12550:	subs	r6, r6, #1
   12554:	bne	12544 <__assert_fail@plt+0xac8>
   12558:	movw	r9, #62624	; 0xf4a0
   1255c:	mov	r6, #3
   12560:	mov	r7, #1
   12564:	movt	r9, #1
   12568:	mov	r0, r5
   1256c:	mov	r1, r6
   12570:	bl	118f0 <__gmpz_divisible_ui_p@plt>
   12574:	cmp	r0, #0
   12578:	beq	1259c <__assert_fail@plt+0xb20>
   1257c:	mov	r0, r5
   12580:	mov	r1, r5
   12584:	mov	r2, r6
   12588:	bl	117ac <__gmpz_tdiv_q_ui@plt>
   1258c:	mov	r0, r4
   12590:	mov	r1, r6
   12594:	bl	172ec <__assert_fail@plt+0x5870>
   12598:	b	125bc <__assert_fail@plt+0xb40>
   1259c:	ldrb	r0, [r9, r7]
   125a0:	add	r6, r6, r0
   125a4:	mov	r0, r5
   125a8:	mul	r1, r6, r6
   125ac:	bl	11a1c <__gmpz_cmp_ui@plt>
   125b0:	cmp	r0, #0
   125b4:	bmi	125c4 <__assert_fail@plt+0xb48>
   125b8:	add	r7, r7, #1
   125bc:	cmp	r7, #668	; 0x29c
   125c0:	bls	12568 <__assert_fail@plt+0xaec>
   125c4:	add	r0, sp, #4
   125c8:	bl	118fc <__gmpz_clear@plt>
   125cc:	mov	r0, r5
   125d0:	mov	r1, #1
   125d4:	bl	11a1c <__gmpz_cmp_ui@plt>
   125d8:	cmp	r0, #0
   125dc:	beq	12638 <__assert_fail@plt+0xbbc>
   125e0:	ldrb	r0, [r8]
   125e4:	cmp	r0, #1
   125e8:	bne	12608 <__assert_fail@plt+0xb8c>
   125ec:	movw	r0, #4568	; 0x11d8
   125f0:	movw	r2, #51595	; 0xc98b
   125f4:	mov	r1, #1
   125f8:	movt	r0, #3
   125fc:	movt	r2, #1
   12600:	ldr	r0, [r0]
   12604:	bl	11974 <__fprintf_chk@plt>
   12608:	mov	r0, r5
   1260c:	bl	16bc8 <__assert_fail@plt+0x514c>
   12610:	cmp	r0, #0
   12614:	beq	12628 <__assert_fail@plt+0xbac>
   12618:	mov	r0, r4
   1261c:	mov	r1, r5
   12620:	bl	16dec <__assert_fail@plt+0x5370>
   12624:	b	12638 <__assert_fail@plt+0xbbc>
   12628:	mov	r0, r5
   1262c:	mov	r1, #1
   12630:	mov	r2, r4
   12634:	bl	16f40 <__assert_fail@plt+0x54c4>
   12638:	sub	sp, fp, #24
   1263c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12640:	push	{r4, r5, r6, sl, fp, lr}
   12644:	add	fp, sp, #16
   12648:	mov	r4, r0
   1264c:	ldr	r0, [r0, #8]
   12650:	cmp	r0, #0
   12654:	beq	12680 <__assert_fail@plt+0xc04>
   12658:	mov	r5, #0
   1265c:	mov	r6, #0
   12660:	ldr	r0, [r4]
   12664:	add	r0, r0, r5
   12668:	bl	118fc <__gmpz_clear@plt>
   1266c:	ldr	r0, [r4, #8]
   12670:	add	r6, r6, #1
   12674:	add	r5, r5, #12
   12678:	cmp	r6, r0
   1267c:	bcc	12660 <__assert_fail@plt+0xbe4>
   12680:	ldr	r0, [r4]
   12684:	bl	174f4 <__assert_fail@plt+0x5a78>
   12688:	ldr	r0, [r4, #4]
   1268c:	pop	{r4, r5, r6, sl, fp, lr}
   12690:	b	174f4 <__assert_fail@plt+0x5a78>
   12694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12698:	add	fp, sp, #28
   1269c:	sub	sp, sp, #20
   126a0:	mov	r7, r0
   126a4:	mov	r9, r2
   126a8:	orrs	r0, r0, r1
   126ac:	str	r3, [sp, #16]
   126b0:	beq	127cc <__assert_fail@plt+0xd50>
   126b4:	movw	r6, #51712	; 0xca00
   126b8:	mov	r0, r7
   126bc:	mov	r3, #0
   126c0:	mov	r4, r1
   126c4:	mov	r5, #0
   126c8:	movt	r6, #15258	; 0x3b9a
   126cc:	mov	r2, r6
   126d0:	bl	1c18c <__assert_fail@plt+0xa710>
   126d4:	umull	r2, r3, r0, r6
   126d8:	str	r0, [sp, #8]
   126dc:	str	r1, [sp, #4]
   126e0:	mov	sl, r9
   126e4:	mla	r3, r1, r6, r3
   126e8:	mov	r1, #0
   126ec:	subs	ip, r7, r2
   126f0:	mov	r2, #0
   126f4:	mov	r7, #0
   126f8:	sbc	lr, r4, r3
   126fc:	mvn	r4, #63	; 0x3f
   12700:	mov	r3, #0
   12704:	lsl	r0, r3, #1
   12708:	lsrs	r3, r2, #1
   1270c:	rrx	r1, r1
   12710:	lsrs	r7, r7, #1
   12714:	mov	r9, r5
   12718:	lsl	r5, r5, #1
   1271c:	str	r0, [sp, #12]
   12720:	orr	r2, r3, r6, lsl #31
   12724:	rrx	r6, r6
   12728:	subs	r3, r6, ip
   1272c:	sbcs	r3, r7, lr
   12730:	bcc	12754 <__assert_fail@plt+0xcd8>
   12734:	ldr	r0, [sp, #16]
   12738:	eor	r3, ip, r6
   1273c:	eor	r8, lr, r7
   12740:	orrs	r3, r3, r8
   12744:	bne	1279c <__assert_fail@plt+0xd20>
   12748:	subs	r3, sl, r1
   1274c:	sbcs	r3, r0, r2
   12750:	bcc	1279c <__assert_fail@plt+0xd20>
   12754:	subs	r3, ip, r6
   12758:	orr	r5, r5, #1
   1275c:	sbc	r0, lr, r7
   12760:	subs	ip, r3, #1
   12764:	sbc	lr, r0, #0
   12768:	subs	sl, sl, r1
   1276c:	mov	r8, sl
   12770:	mov	sl, r1
   12774:	ldr	r1, [sp, #16]
   12778:	sbcs	r1, r1, r2
   1277c:	str	r1, [sp, #16]
   12780:	mov	r1, #0
   12784:	movwcc	r1, #1
   12788:	cmp	r1, #0
   1278c:	mov	r1, sl
   12790:	mov	sl, r8
   12794:	moveq	ip, r3
   12798:	moveq	lr, r0
   1279c:	ldr	r0, [sp, #12]
   127a0:	adds	r4, r4, #1
   127a4:	orr	r3, r0, r9, lsr #31
   127a8:	bcc	12704 <__assert_fail@plt+0xc88>
   127ac:	ldr	r0, [sp, #8]
   127b0:	ldr	r1, [sp, #4]
   127b4:	mov	r2, r5
   127b8:	bl	12694 <__assert_fail@plt+0xc18>
   127bc:	ldr	r1, [sp, #16]
   127c0:	mov	r0, sl
   127c4:	mov	r2, #9
   127c8:	b	127d8 <__assert_fail@plt+0xd5c>
   127cc:	ldr	r1, [sp, #16]
   127d0:	mov	r0, r9
   127d4:	mov	r2, #0
   127d8:	sub	sp, fp, #28
   127dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e0:	b	131c8 <__assert_fail@plt+0x174c>
   127e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e8:	add	fp, sp, #28
   127ec:	sub	sp, sp, #4
   127f0:	vpush	{d8-d13}
   127f4:	sub	sp, sp, #64	; 0x40
   127f8:	ldr	lr, [fp, #8]
   127fc:	mov	ip, r2
   12800:	mov	r2, #0
   12804:	str	r2, [lr, #8]
   12808:	str	r2, [lr, #12]
   1280c:	strb	r2, [lr, #250]	; 0xfa
   12810:	orrs	r2, r0, r1
   12814:	bne	12824 <__assert_fail@plt+0xda8>
   12818:	subs	r2, ip, #2
   1281c:	sbcs	r2, r3, #0
   12820:	bcc	13194 <__assert_fail@plt+0x1718>
   12824:	tst	ip, #1
   12828:	bne	128c4 <__assert_fail@plt+0xe48>
   1282c:	orrs	r2, ip, r3
   12830:	beq	128d4 <__assert_fail@plt+0xe58>
   12834:	mov	r7, #0
   12838:	mov	r9, ip
   1283c:	mov	r2, r3
   12840:	lsrs	r2, r2, #1
   12844:	rrx	r5, ip
   12848:	tst	ip, #2
   1284c:	sub	r7, r7, #1
   12850:	mov	ip, r5
   12854:	beq	12840 <__assert_fail@plt+0xdc4>
   12858:	rsb	r2, r7, #0
   1285c:	add	r5, r7, #32
   12860:	add	ip, r7, #64	; 0x40
   12864:	lsr	r6, r0, r2
   12868:	lsr	sl, r1, r2
   1286c:	lsr	r4, r3, r2
   12870:	orr	r8, r6, r1, lsl r5
   12874:	mvn	r6, #31
   12878:	subs	r6, r6, r7
   1287c:	lsrpl	r8, r1, r6
   12880:	lsr	r7, r0, r6
   12884:	movwpl	sl, #0
   12888:	movwpl	r4, #0
   1288c:	cmp	r5, #0
   12890:	orr	r1, r7, r1, lsl ip
   12894:	lslpl	r1, r0, r5
   12898:	cmp	r6, #0
   1289c:	lsl	r0, r0, ip
   128a0:	orr	r1, r1, r4
   128a4:	str	r1, [sp, #48]	; 0x30
   128a8:	lsr	r1, r9, r2
   128ac:	orr	r1, r1, r3, lsl r5
   128b0:	lsrpl	r1, r3, r6
   128b4:	cmp	r5, #0
   128b8:	movwpl	r0, #0
   128bc:	orr	r5, r0, r1
   128c0:	b	12930 <__assert_fail@plt+0xeb4>
   128c4:	str	r3, [sp, #48]	; 0x30
   128c8:	mov	r9, r0
   128cc:	mov	r3, r1
   128d0:	b	12958 <__assert_fail@plt+0xedc>
   128d4:	mov	r8, #0
   128d8:	tst	r0, #1
   128dc:	mov	r2, #0
   128e0:	bne	12908 <__assert_fail@plt+0xe8c>
   128e4:	mov	r2, #0
   128e8:	mov	r3, r0
   128ec:	mov	r7, r1
   128f0:	lsrs	r7, r7, #1
   128f4:	rrx	r6, r3
   128f8:	tst	r3, #2
   128fc:	add	r2, r2, #1
   12900:	mov	r3, r6
   12904:	beq	128f0 <__assert_fail@plt+0xe74>
   12908:	lsr	r0, r0, r2
   1290c:	rsb	r3, r2, #32
   12910:	mov	sl, #0
   12914:	orr	r5, r0, r1, lsl r3
   12918:	subs	r0, r2, #32
   1291c:	lsrpl	r5, r1, r0
   12920:	lsr	r0, r1, r2
   12924:	movwpl	r0, #0
   12928:	add	r2, r2, #64	; 0x40
   1292c:	str	r0, [sp, #48]	; 0x30
   12930:	str	r2, [sp]
   12934:	mov	r0, lr
   12938:	mov	r2, #2
   1293c:	mov	r3, #0
   12940:	mov	r4, lr
   12944:	bl	15270 <__assert_fail@plt+0x37f4>
   12948:	mov	lr, r4
   1294c:	mov	r9, r8
   12950:	mov	r3, sl
   12954:	mov	ip, r5
   12958:	orrs	r0, r9, r3
   1295c:	str	lr, [sp, #20]
   12960:	beq	12ad0 <__assert_fail@plt+0x1054>
   12964:	mov	r2, #0
   12968:	mov	r5, #3
   1296c:	mov	r7, #0
   12970:	movw	r0, #51824	; 0xca70
   12974:	str	r9, [sp, #40]	; 0x28
   12978:	str	r7, [sp, #44]	; 0x2c
   1297c:	mov	sl, r3
   12980:	movt	r0, #1
   12984:	ldr	r6, [r0, r7, lsl #4]!
   12988:	add	r1, r0, #8
   1298c:	str	r1, [sp, #28]
   12990:	ldr	r1, [r0, #4]
   12994:	ldr	r7, [sp, #48]	; 0x30
   12998:	str	r1, [sp, #32]
   1299c:	umull	r8, r0, ip, r6
   129a0:	str	ip, [sp, #36]	; 0x24
   129a4:	str	r7, [sp, #48]	; 0x30
   129a8:	mov	r9, r2
   129ac:	mov	lr, r5
   129b0:	mla	r0, ip, r1, r0
   129b4:	mov	ip, r9
   129b8:	mla	r7, r7, r6, r0
   129bc:	umull	r0, r1, r8, r2
   129c0:	umull	r2, r3, r8, r5
   129c4:	umlal	r0, r1, r7, r5
   129c8:	adds	r0, r0, r3
   129cc:	umull	r2, r3, r7, r5
   129d0:	adc	r1, r1, #0
   129d4:	subs	r0, r0, r2
   129d8:	sbcs	r0, r1, r3
   129dc:	umull	r2, r3, r7, r9
   129e0:	ldr	r9, [sp, #40]	; 0x28
   129e4:	mov	r0, #0
   129e8:	movwcc	r0, #1
   129ec:	cmp	r0, #0
   129f0:	addne	r3, r3, #1
   129f4:	adds	r1, r2, r1
   129f8:	adc	r0, r3, #0
   129fc:	subs	r2, r9, r1
   12a00:	mov	r3, sl
   12a04:	sbcs	r2, sl, r0
   12a08:	bcc	12a80 <__assert_fail@plt+0x1004>
   12a0c:	subs	r1, r9, r1
   12a10:	mov	r4, r6
   12a14:	umull	r5, r2, r1, r6
   12a18:	mov	r6, r3
   12a1c:	ldr	r3, [sp, #32]
   12a20:	sbc	r0, r6, r0
   12a24:	mla	r1, r1, r3, r2
   12a28:	mov	r3, r6
   12a2c:	mla	sl, r0, r4, r1
   12a30:	ldr	r0, [sp, #28]
   12a34:	ldrd	r0, [r0]
   12a38:	subs	r0, r0, r5
   12a3c:	sbcs	r0, r1, sl
   12a40:	bcc	12a80 <__assert_fail@plt+0x1004>
   12a44:	mov	r0, #1
   12a48:	mov	r2, lr
   12a4c:	mov	r3, ip
   12a50:	mov	r6, r4
   12a54:	mov	r4, lr
   12a58:	mov	r9, ip
   12a5c:	str	r0, [sp]
   12a60:	ldr	r0, [sp, #20]
   12a64:	bl	15270 <__assert_fail@plt+0x37f4>
   12a68:	str	r5, [sp, #40]	; 0x28
   12a6c:	mov	r2, r9
   12a70:	mov	ip, r8
   12a74:	mov	r5, r4
   12a78:	ldr	r1, [sp, #32]
   12a7c:	b	1299c <__assert_fail@plt+0xf20>
   12a80:	ldr	r7, [sp, #44]	; 0x2c
   12a84:	movw	r0, #62624	; 0xf4a0
   12a88:	mov	r5, lr
   12a8c:	mov	r2, ip
   12a90:	movt	r0, #1
   12a94:	add	r7, r7, #1
   12a98:	ldrb	r0, [r0, r7]
   12a9c:	adds	r5, lr, r0
   12aa0:	lsr	r0, r7, #2
   12aa4:	adc	r2, ip, #0
   12aa8:	ldr	ip, [sp, #36]	; 0x24
   12aac:	cmp	r0, #166	; 0xa6
   12ab0:	bhi	12abc <__assert_fail@plt+0x1040>
   12ab4:	orrs	r1, r9, r3
   12ab8:	bne	12970 <__assert_fail@plt+0xef4>
   12abc:	ldr	lr, [sp, #20]
   12ac0:	ldr	r1, [sp, #48]	; 0x30
   12ac4:	cmp	r0, #166	; 0xa6
   12ac8:	bls	12ae8 <__assert_fail@plt+0x106c>
   12acc:	b	13114 <__assert_fail@plt+0x1698>
   12ad0:	ldr	r1, [sp, #48]	; 0x30
   12ad4:	mov	r9, #0
   12ad8:	mov	r5, #3
   12adc:	mov	r3, #0
   12ae0:	mov	r2, #0
   12ae4:	mov	r7, #0
   12ae8:	movw	r0, #62624	; 0xf4a0
   12aec:	vmov.i32	d9, #0	; 0x00000000
   12af0:	vmov.i64	q5, #0x00000000000000ff
   12af4:	movt	r0, #1
   12af8:	add	r0, r7, r0
   12afc:	add	r0, r0, #1
   12b00:	str	r0, [sp, #28]
   12b04:	str	r9, [sp, #40]	; 0x28
   12b08:	str	r3, [sp, #24]
   12b0c:	movw	sl, #51824	; 0xca70
   12b10:	str	r5, [sp, #36]	; 0x24
   12b14:	str	r2, [sp, #32]
   12b18:	str	r7, [sp, #44]	; 0x2c
   12b1c:	movt	sl, #1
   12b20:	ldr	r4, [sl, r7, lsl #4]!
   12b24:	ldmib	sl, {r5, lr}
   12b28:	ldr	r9, [sl, #12]
   12b2c:	umull	r6, r0, r4, ip
   12b30:	mla	r0, r4, r1, r0
   12b34:	mla	r8, r5, ip, r0
   12b38:	subs	r0, lr, r6
   12b3c:	sbcs	r0, r9, r8
   12b40:	bcs	12cbc <__assert_fail@plt+0x1240>
   12b44:	add	lr, sl, #16
   12b48:	ldr	r9, [sl, #28]
   12b4c:	ldm	lr, {r4, r6, lr}
   12b50:	umull	r8, r0, r4, ip
   12b54:	mla	r0, r4, r1, r0
   12b58:	mla	r5, r6, ip, r0
   12b5c:	subs	r0, lr, r8
   12b60:	sbcs	r0, r9, r5
   12b64:	bcs	12d14 <__assert_fail@plt+0x1298>
   12b68:	add	lr, sl, #32
   12b6c:	ldr	r3, [sl, #44]	; 0x2c
   12b70:	ldm	lr, {r6, r9, lr}
   12b74:	umull	r4, r0, r6, ip
   12b78:	mla	r0, r6, r1, r0
   12b7c:	mla	r5, r9, ip, r0
   12b80:	subs	r0, lr, r4
   12b84:	sbcs	r0, r3, r5
   12b88:	bcs	12d90 <__assert_fail@plt+0x1314>
   12b8c:	ldr	r4, [sl, #48]	; 0x30
   12b90:	add	r9, sl, #52	; 0x34
   12b94:	ldm	r9, {r3, r8, r9}
   12b98:	umull	r6, r0, r4, ip
   12b9c:	mla	r0, r4, r1, r0
   12ba0:	mla	r5, r3, ip, r0
   12ba4:	subs	r0, r8, r6
   12ba8:	sbcs	r0, r9, r5
   12bac:	bcs	12e40 <__assert_fail@plt+0x13c4>
   12bb0:	ldr	r4, [sl, #64]	; 0x40
   12bb4:	ldr	r9, [sl, #68]	; 0x44
   12bb8:	ldr	r3, [sl, #72]	; 0x48
   12bbc:	ldr	r8, [sl, #76]	; 0x4c
   12bc0:	umull	r5, r0, r4, ip
   12bc4:	mla	r0, r4, r1, r0
   12bc8:	mla	r6, r9, ip, r0
   12bcc:	subs	r0, r3, r5
   12bd0:	sbcs	r0, r8, r6
   12bd4:	bcs	12ebc <__assert_fail@plt+0x1440>
   12bd8:	ldr	r4, [sl, #80]	; 0x50
   12bdc:	ldr	r8, [sl, #84]	; 0x54
   12be0:	ldr	r7, [sl, #88]	; 0x58
   12be4:	ldr	r9, [sl, #92]	; 0x5c
   12be8:	umull	r6, r0, r4, ip
   12bec:	mla	r0, r4, r1, r0
   12bf0:	mla	r5, r8, ip, r0
   12bf4:	subs	r0, r7, r6
   12bf8:	sbcs	r0, r9, r5
   12bfc:	bcs	12f68 <__assert_fail@plt+0x14ec>
   12c00:	ldr	r5, [sl, #96]	; 0x60
   12c04:	add	lr, sl, #100	; 0x64
   12c08:	ldr	r9, [sp, #40]	; 0x28
   12c0c:	mov	r4, r1
   12c10:	ldm	lr, {r3, r8, lr}
   12c14:	umull	r7, r0, r5, ip
   12c18:	mla	r0, r5, r1, r0
   12c1c:	mla	r6, r3, ip, r0
   12c20:	subs	r0, r8, r7
   12c24:	sbcs	r0, lr, r6
   12c28:	bcs	12fd4 <__assert_fail@plt+0x1558>
   12c2c:	ldr	r8, [sl, #112]	; 0x70
   12c30:	ldr	r6, [sl, #116]	; 0x74
   12c34:	ldr	r5, [sl, #120]	; 0x78
   12c38:	str	r4, [sp, #48]	; 0x30
   12c3c:	ldr	sl, [sl, #124]	; 0x7c
   12c40:	ldr	r3, [sp, #24]
   12c44:	ldr	r7, [sp, #44]	; 0x2c
   12c48:	umull	r0, r1, r8, ip
   12c4c:	mla	r1, r8, r4, r1
   12c50:	mla	r1, r6, ip, r1
   12c54:	subs	r2, r5, r0
   12c58:	sbcs	r2, sl, r1
   12c5c:	bcs	1308c <__assert_fail@plt+0x1610>
   12c60:	movw	r0, #63299	; 0xf743
   12c64:	ldr	r5, [sp, #36]	; 0x24
   12c68:	ldr	r2, [sp, #32]
   12c6c:	movt	r0, #1
   12c70:	ldrb	r0, [r0, r7]
   12c74:	add	r7, r7, #8
   12c78:	adds	r5, r5, r0
   12c7c:	lsr	r0, r7, #2
   12c80:	adc	r2, r2, #0
   12c84:	cmp	r0, #166	; 0xa6
   12c88:	bhi	13104 <__assert_fail@plt+0x1688>
   12c8c:	ldr	r4, [sp, #28]
   12c90:	umull	r0, r1, r5, r5
   12c94:	mla	r1, r5, r2, r1
   12c98:	mla	r1, r5, r2, r1
   12c9c:	add	r4, r4, #8
   12ca0:	subs	r0, ip, r0
   12ca4:	str	r4, [sp, #28]
   12ca8:	ldr	sl, [sp, #48]	; 0x30
   12cac:	sbcs	r0, sl, r1
   12cb0:	mov	r1, sl
   12cb4:	bcs	12b0c <__assert_fail@plt+0x1090>
   12cb8:	b	13110 <__assert_fail@plt+0x1694>
   12cbc:	mov	r0, #1
   12cc0:	mov	r7, lr
   12cc4:	str	r0, [sp]
   12cc8:	ldr	r0, [sp, #20]
   12ccc:	ldr	r2, [sp, #36]	; 0x24
   12cd0:	ldr	r3, [sp, #32]
   12cd4:	bl	15270 <__assert_fail@plt+0x37f4>
   12cd8:	umull	r0, r1, r6, r4
   12cdc:	mov	lr, r7
   12ce0:	ldr	r7, [sp, #44]	; 0x2c
   12ce4:	mov	ip, r6
   12ce8:	mla	r1, r6, r5, r1
   12cec:	mla	r1, r8, r4, r1
   12cf0:	subs	r2, lr, r0
   12cf4:	mov	r6, r0
   12cf8:	sbcs	r2, r9, r1
   12cfc:	ldr	r2, [sp, #32]
   12d00:	str	r8, [sp, #48]	; 0x30
   12d04:	mov	r8, r1
   12d08:	ldr	r1, [sp, #48]	; 0x30
   12d0c:	bcc	12b44 <__assert_fail@plt+0x10c8>
   12d10:	b	12cbc <__assert_fail@plt+0x1240>
   12d14:	movw	r0, #62624	; 0xf4a0
   12d18:	ldr	r1, [sp, #36]	; 0x24
   12d1c:	movt	r0, #1
   12d20:	add	r0, r7, r0
   12d24:	ldrb	r0, [r0, #1]
   12d28:	adds	r0, r1, r0
   12d2c:	str	r0, [sp, #16]
   12d30:	adc	r0, r2, #0
   12d34:	str	r0, [sp, #12]
   12d38:	mov	r0, #1
   12d3c:	mov	r7, lr
   12d40:	str	r0, [sp]
   12d44:	ldr	r0, [sp, #20]
   12d48:	ldr	r2, [sp, #16]
   12d4c:	ldr	r3, [sp, #12]
   12d50:	bl	15270 <__assert_fail@plt+0x37f4>
   12d54:	umull	r0, r1, r8, r4
   12d58:	mov	lr, r7
   12d5c:	ldr	r7, [sp, #44]	; 0x2c
   12d60:	mov	ip, r8
   12d64:	mla	r1, r8, r6, r1
   12d68:	mla	r1, r5, r4, r1
   12d6c:	subs	r2, lr, r0
   12d70:	mov	r8, r0
   12d74:	sbcs	r2, r9, r1
   12d78:	ldr	r2, [sp, #32]
   12d7c:	str	r5, [sp, #48]	; 0x30
   12d80:	mov	r5, r1
   12d84:	ldr	r1, [sp, #48]	; 0x30
   12d88:	bcc	12b68 <__assert_fail@plt+0x10ec>
   12d8c:	b	12d38 <__assert_fail@plt+0x12bc>
   12d90:	movw	r0, #62624	; 0xf4a0
   12d94:	movt	r0, #1
   12d98:	add	r0, r7, r0
   12d9c:	ldrh	r0, [r0, #1]
   12da0:	strh	r0, [sp, #60]	; 0x3c
   12da4:	add	r0, sp, #60	; 0x3c
   12da8:	vld1.16	{d16[0]}, [r0 :16]
   12dac:	ldr	r0, [sp, #36]	; 0x24
   12db0:	vmov.32	d8[0], r0
   12db4:	vmovl.u8	q8, d16
   12db8:	vmovl.u16	q8, d16
   12dbc:	vmov.32	d8[1], r2
   12dc0:	vmovl.u32	q8, d16
   12dc4:	vand	q8, q8, q5
   12dc8:	vadd.i64	q8, q4, q8
   12dcc:	vorr	d18, d17, d17
   12dd0:	vadd.i64	q8, q8, q9
   12dd4:	vmov.32	r8, d16[1]
   12dd8:	vmov.32	r0, d16[0]
   12ddc:	str	r0, [sp, #16]
   12de0:	mov	r0, #1
   12de4:	str	r3, [sp, #48]	; 0x30
   12de8:	mov	r3, r8
   12dec:	mov	r7, lr
   12df0:	str	r0, [sp]
   12df4:	ldr	r0, [sp, #20]
   12df8:	ldr	r2, [sp, #16]
   12dfc:	bl	15270 <__assert_fail@plt+0x37f4>
   12e00:	umull	r0, r1, r4, r6
   12e04:	mov	r3, r5
   12e08:	mov	lr, r7
   12e0c:	mov	ip, r4
   12e10:	mla	r1, r4, r9, r1
   12e14:	mla	r1, r5, r6, r1
   12e18:	subs	r2, r7, r0
   12e1c:	ldr	r2, [sp, #48]	; 0x30
   12e20:	mov	r4, r0
   12e24:	mov	r5, r1
   12e28:	sbcs	r2, r2, r1
   12e2c:	mov	r1, r3
   12e30:	ldr	r2, [sp, #32]
   12e34:	ldr	r3, [sp, #48]	; 0x30
   12e38:	bcc	12b8c <__assert_fail@plt+0x1110>
   12e3c:	b	12de0 <__assert_fail@plt+0x1364>
   12e40:	str	r8, [sp, #48]	; 0x30
   12e44:	mov	r8, r3
   12e48:	mov	r3, r2
   12e4c:	mov	r0, #0
   12e50:	ldr	r2, [sp, #36]	; 0x24
   12e54:	ldr	ip, [sp, #28]
   12e58:	ldrb	r1, [ip, -r0]
   12e5c:	sub	r0, r0, #1
   12e60:	adds	r2, r2, r1
   12e64:	adc	r3, r3, #0
   12e68:	cmn	r0, #3
   12e6c:	bne	12e58 <__assert_fail@plt+0x13dc>
   12e70:	mov	r0, #1
   12e74:	str	r0, [sp]
   12e78:	ldr	r0, [sp, #20]
   12e7c:	bl	15270 <__assert_fail@plt+0x37f4>
   12e80:	umull	r0, r1, r6, r4
   12e84:	mov	r3, r8
   12e88:	mov	ip, r6
   12e8c:	mla	r1, r6, r8, r1
   12e90:	ldr	r8, [sp, #48]	; 0x30
   12e94:	mla	r1, r5, r4, r1
   12e98:	mov	r6, r0
   12e9c:	subs	r2, r8, r0
   12ea0:	sbcs	r2, r9, r1
   12ea4:	mov	r2, r5
   12ea8:	mov	r5, r1
   12eac:	mov	r1, r2
   12eb0:	ldr	r2, [sp, #32]
   12eb4:	bcc	12bb0 <__assert_fail@plt+0x1134>
   12eb8:	b	12e40 <__assert_fail@plt+0x13c4>
   12ebc:	ldr	r0, [sp, #36]	; 0x24
   12ec0:	vmov.32	d12[0], r0
   12ec4:	vmov.32	d12[1], r2
   12ec8:	vorr	d13, d9, d9
   12ecc:	str	r3, [sp, #48]	; 0x30
   12ed0:	vorr	q8, q6, q6
   12ed4:	mov	r0, #0
   12ed8:	add	r3, sp, #56	; 0x38
   12edc:	ldr	r2, [sp, #28]
   12ee0:	add	r1, r2, r0
   12ee4:	add	r0, r0, #2
   12ee8:	ldrh	r1, [r1]
   12eec:	cmp	r0, #4
   12ef0:	strh	r1, [sp, #56]	; 0x38
   12ef4:	vld1.16	{d18[0]}, [r3 :16]
   12ef8:	vmovl.u8	q9, d18
   12efc:	vmovl.u16	q9, d18
   12f00:	vmovl.u32	q9, d18
   12f04:	vand	q9, q9, q5
   12f08:	vadd.i64	q8, q8, q9
   12f0c:	bne	12ee0 <__assert_fail@plt+0x1464>
   12f10:	vorr	d18, d17, d17
   12f14:	mov	r0, #1
   12f18:	str	r0, [sp]
   12f1c:	ldr	r0, [sp, #20]
   12f20:	vadd.i64	q8, q8, q9
   12f24:	vmov.32	r2, d16[0]
   12f28:	vmov.32	r3, d16[1]
   12f2c:	bl	15270 <__assert_fail@plt+0x37f4>
   12f30:	umull	r0, r1, r5, r4
   12f34:	ldr	r3, [sp, #48]	; 0x30
   12f38:	mov	ip, r5
   12f3c:	mla	r1, r5, r9, r1
   12f40:	mla	r1, r6, r4, r1
   12f44:	subs	r2, r3, r0
   12f48:	mov	r5, r0
   12f4c:	sbcs	r2, r8, r1
   12f50:	mov	r2, r6
   12f54:	mov	r6, r1
   12f58:	mov	r1, r2
   12f5c:	ldr	r2, [sp, #32]
   12f60:	bcc	12bd8 <__assert_fail@plt+0x115c>
   12f64:	b	12ecc <__assert_fail@plt+0x1450>
   12f68:	mov	r3, r2
   12f6c:	ldr	r2, [sp, #36]	; 0x24
   12f70:	ldr	ip, [sp, #28]
   12f74:	mov	r0, #0
   12f78:	ldrb	r1, [ip, -r0]
   12f7c:	sub	r0, r0, #1
   12f80:	adds	r2, r2, r1
   12f84:	adc	r3, r3, #0
   12f88:	cmn	r0, #5
   12f8c:	bne	12f78 <__assert_fail@plt+0x14fc>
   12f90:	mov	r0, #1
   12f94:	str	r0, [sp]
   12f98:	ldr	r0, [sp, #20]
   12f9c:	bl	15270 <__assert_fail@plt+0x37f4>
   12fa0:	umull	r0, r1, r6, r4
   12fa4:	mov	ip, r6
   12fa8:	mla	r1, r6, r8, r1
   12fac:	mla	r1, r5, r4, r1
   12fb0:	subs	r2, r7, r0
   12fb4:	mov	r6, r0
   12fb8:	sbcs	r2, r9, r1
   12fbc:	mov	r2, r5
   12fc0:	mov	r5, r1
   12fc4:	mov	r1, r2
   12fc8:	ldr	r2, [sp, #32]
   12fcc:	bcc	12c00 <__assert_fail@plt+0x1184>
   12fd0:	b	12f68 <__assert_fail@plt+0x14ec>
   12fd4:	ldr	r0, [sp, #36]	; 0x24
   12fd8:	vmov.32	d12[0], r0
   12fdc:	vmov.32	d12[1], r2
   12fe0:	vorr	d13, d9, d9
   12fe4:	str	r6, [sp, #12]
   12fe8:	str	r7, [sp, #16]
   12fec:	str	lr, [sp, #48]	; 0x30
   12ff0:	vorr	q8, q6, q6
   12ff4:	mov	r6, r3
   12ff8:	mov	r4, r5
   12ffc:	mov	r0, #0
   13000:	add	r3, sp, #52	; 0x34
   13004:	ldr	r2, [sp, #28]
   13008:	add	r1, r2, r0
   1300c:	add	r0, r0, #2
   13010:	ldrh	r1, [r1]
   13014:	cmp	r0, #6
   13018:	strh	r1, [sp, #52]	; 0x34
   1301c:	vld1.16	{d18[0]}, [r3 :16]
   13020:	vmovl.u8	q9, d18
   13024:	vmovl.u16	q9, d18
   13028:	vmovl.u32	q9, d18
   1302c:	vand	q9, q9, q5
   13030:	vadd.i64	q8, q8, q9
   13034:	bne	13008 <__assert_fail@plt+0x158c>
   13038:	vorr	d18, d17, d17
   1303c:	mov	r0, #1
   13040:	str	r0, [sp]
   13044:	ldr	r0, [sp, #20]
   13048:	vadd.i64	q8, q8, q9
   1304c:	vmov.32	r2, d16[0]
   13050:	vmov.32	r3, d16[1]
   13054:	bl	15270 <__assert_fail@plt+0x37f4>
   13058:	ldr	ip, [sp, #16]
   1305c:	mov	r5, r4
   13060:	ldr	lr, [sp, #48]	; 0x30
   13064:	mov	r3, r6
   13068:	umull	r7, r1, ip, r4
   1306c:	ldr	r4, [sp, #12]
   13070:	mla	r1, ip, r6, r1
   13074:	mla	r1, r4, r5, r1
   13078:	subs	r2, r8, r7
   1307c:	sbcs	r2, lr, r1
   13080:	mov	r6, r1
   13084:	bcc	12c2c <__assert_fail@plt+0x11b0>
   13088:	b	12fe4 <__assert_fail@plt+0x1568>
   1308c:	str	r6, [sp, #12]
   13090:	str	r5, [sp, #16]
   13094:	str	r1, [sp, #48]	; 0x30
   13098:	mov	r4, r0
   1309c:	mov	r0, #0
   130a0:	ldr	r2, [sp, #36]	; 0x24
   130a4:	ldr	r3, [sp, #32]
   130a8:	ldr	ip, [sp, #28]
   130ac:	ldrb	r1, [ip, -r0]
   130b0:	sub	r0, r0, #1
   130b4:	adds	r2, r2, r1
   130b8:	adc	r3, r3, #0
   130bc:	cmn	r0, #7
   130c0:	bne	130ac <__assert_fail@plt+0x1630>
   130c4:	mov	r0, #1
   130c8:	str	r0, [sp]
   130cc:	ldr	r0, [sp, #20]
   130d0:	bl	15270 <__assert_fail@plt+0x37f4>
   130d4:	ldr	r6, [sp, #12]
   130d8:	ldr	r2, [sp, #48]	; 0x30
   130dc:	umull	r0, r1, r4, r8
   130e0:	ldr	r5, [sp, #16]
   130e4:	ldr	r3, [sp, #24]
   130e8:	mov	ip, r4
   130ec:	mla	r1, r4, r6, r1
   130f0:	mla	r1, r2, r8, r1
   130f4:	subs	r2, r5, r0
   130f8:	sbcs	r2, sl, r1
   130fc:	bcc	12c60 <__assert_fail@plt+0x11e4>
   13100:	b	1308c <__assert_fail@plt+0x1610>
   13104:	ldr	lr, [sp, #20]
   13108:	ldr	r1, [sp, #48]	; 0x30
   1310c:	b	13114 <__assert_fail@plt+0x1698>
   13110:	ldr	lr, [sp, #20]
   13114:	orrs	r4, r9, r3
   13118:	bne	13128 <__assert_fail@plt+0x16ac>
   1311c:	subs	r0, ip, #2
   13120:	sbcs	r0, r1, #0
   13124:	bcc	13194 <__assert_fail@plt+0x1718>
   13128:	mov	r7, r1
   1312c:	mov	r0, r9
   13130:	mov	r1, r3
   13134:	mov	sl, r3
   13138:	mov	r2, ip
   1313c:	mov	r8, lr
   13140:	mov	r6, r9
   13144:	mov	r5, ip
   13148:	mov	r3, r7
   1314c:	bl	13250 <__assert_fail@plt+0x17d4>
   13150:	cmp	r0, #0
   13154:	beq	13170 <__assert_fail@plt+0x16f4>
   13158:	mov	r0, r8
   1315c:	mov	r2, r6
   13160:	mov	r3, sl
   13164:	stm	sp, {r5, r7}
   13168:	bl	13c78 <__assert_fail@plt+0x21fc>
   1316c:	b	13194 <__assert_fail@plt+0x1718>
   13170:	mov	r2, r5
   13174:	cmp	r4, #0
   13178:	beq	131a4 <__assert_fail@plt+0x1728>
   1317c:	mov	r0, #1
   13180:	mov	r1, sl
   13184:	mov	r3, r7
   13188:	stm	sp, {r0, r8}
   1318c:	mov	r0, r6
   13190:	bl	14558 <__assert_fail@plt+0x2adc>
   13194:	sub	sp, fp, #80	; 0x50
   13198:	vpop	{d8-d13}
   1319c:	add	sp, sp, #4
   131a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a4:	mov	r0, r2
   131a8:	mov	r1, r7
   131ac:	mov	r2, #1
   131b0:	mov	r3, r8
   131b4:	sub	sp, fp, #80	; 0x50
   131b8:	vpop	{d8-d13}
   131bc:	add	sp, sp, #4
   131c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c4:	b	13cf4 <__assert_fail@plt+0x2278>
   131c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   131cc:	add	fp, sp, #24
   131d0:	sub	sp, sp, #24
   131d4:	add	r8, sp, #3
   131d8:	mov	r7, r2
   131dc:	mov	r2, r8
   131e0:	bl	1758c <__assert_fail@plt+0x5b10>
   131e4:	movw	r9, #4596	; 0x11f4
   131e8:	mov	r5, r0
   131ec:	sub	r0, r8, r0
   131f0:	movt	r9, #3
   131f4:	add	r4, r0, #20
   131f8:	cmp	r4, r7
   131fc:	ldr	r6, [r9]
   13200:	bcs	13230 <__assert_fail@plt+0x17b4>
   13204:	add	r0, r5, r7
   13208:	mov	r1, #48	; 0x30
   1320c:	sub	r0, r0, r8
   13210:	sub	r7, r0, #20
   13214:	mov	r0, r6
   13218:	mov	r2, r7
   1321c:	bl	11938 <memset@plt>
   13220:	subs	r7, r7, #1
   13224:	add	r6, r6, #1
   13228:	bne	13220 <__assert_fail@plt+0x17a4>
   1322c:	str	r6, [r9]
   13230:	mov	r0, r6
   13234:	mov	r1, r5
   13238:	mov	r2, r4
   1323c:	bl	1171c <memcpy@plt>
   13240:	add	r0, r6, r4
   13244:	str	r0, [r9]
   13248:	sub	sp, fp, #24
   1324c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13254:	add	fp, sp, #28
   13258:	sub	sp, sp, #516	; 0x204
   1325c:	rsbs	r6, r0, #0
   13260:	rsc	r5, r1, #0
   13264:	orrs	r7, r0, r1
   13268:	beq	1336c <__assert_fail@plt+0x18f0>
   1326c:	subs	ip, r0, #1
   13270:	orr	r7, r2, r3
   13274:	str	r6, [sp, #140]	; 0x8c
   13278:	str	r5, [sp, #132]	; 0x84
   1327c:	str	r1, [sp, #84]	; 0x54
   13280:	str	r0, [sp, #56]	; 0x38
   13284:	sbc	r8, r1, #0
   13288:	cmp	r7, #0
   1328c:	movne	r8, r1
   13290:	movne	ip, r0
   13294:	subs	r6, r2, #1
   13298:	sbc	r4, r3, #0
   1329c:	str	ip, [sp, #80]	; 0x50
   132a0:	str	r8, [sp, #76]	; 0x4c
   132a4:	str	r6, [sp, #92]	; 0x5c
   132a8:	mov	r7, r4
   132ac:	orrs	r7, r6, r4
   132b0:	str	r4, [sp, #88]	; 0x58
   132b4:	beq	1337c <__assert_fail@plt+0x1900>
   132b8:	mov	r5, #0
   132bc:	tst	r6, #1
   132c0:	bne	132e8 <__assert_fail@plt+0x186c>
   132c4:	ldr	r0, [sp, #92]	; 0x5c
   132c8:	ldr	r1, [sp, #88]	; 0x58
   132cc:	mov	r5, #0
   132d0:	lsrs	r1, r1, #1
   132d4:	rrx	r7, r0
   132d8:	tst	r0, #2
   132dc:	add	r5, r5, #1
   132e0:	mov	r0, r7
   132e4:	beq	132d0 <__assert_fail@plt+0x1854>
   132e8:	subs	lr, r5, #32
   132ec:	lsr	r0, r8, r5
   132f0:	rsb	r6, r5, #32
   132f4:	ldr	r1, [sp, #88]	; 0x58
   132f8:	rsb	r7, r5, #64	; 0x40
   132fc:	str	r5, [sp, #32]
   13300:	movwpl	r0, #0
   13304:	cmp	lr, #0
   13308:	lsl	r4, ip, r7
   1330c:	str	r0, [fp, #-36]	; 0xffffffdc
   13310:	lsr	r0, ip, r5
   13314:	orr	r0, r0, r8, lsl r6
   13318:	lsrpl	r0, r8, lr
   1331c:	str	r0, [fp, #-40]	; 0xffffffd8
   13320:	ldr	r0, [sp, #92]	; 0x5c
   13324:	lsr	r0, r0, r5
   13328:	orr	r0, r0, r1, lsl r6
   1332c:	lsrpl	r0, r1, lr
   13330:	cmp	r6, #0
   13334:	movwpl	r4, #0
   13338:	cmp	r6, #0
   1333c:	orr	r0, r4, r0
   13340:	str	r0, [fp, #-48]	; 0xffffffd0
   13344:	rsb	r0, r7, #32
   13348:	lsr	r0, ip, r0
   1334c:	orr	r0, r0, r8, lsl r7
   13350:	lslpl	r0, ip, r6
   13354:	cmp	lr, #0
   13358:	lsr	r7, r1, r5
   1335c:	movwpl	r7, #0
   13360:	orr	r0, r0, r7
   13364:	str	r0, [fp, #-44]	; 0xffffffd4
   13368:	b	133e8 <__assert_fail@plt+0x196c>
   1336c:	mov	r0, r2
   13370:	mov	r1, r3
   13374:	bl	1536c <__assert_fail@plt+0x38f0>
   13378:	b	13c48 <__assert_fail@plt+0x21cc>
   1337c:	mov	r1, #0
   13380:	tst	ip, #1
   13384:	mov	r0, #0
   13388:	bne	133b0 <__assert_fail@plt+0x1934>
   1338c:	mov	r0, #0
   13390:	mov	r4, ip
   13394:	mov	r7, r8
   13398:	lsrs	r7, r7, #1
   1339c:	rrx	r6, r4
   133a0:	tst	r4, #2
   133a4:	add	r0, r0, #1
   133a8:	mov	r4, r6
   133ac:	beq	13398 <__assert_fail@plt+0x191c>
   133b0:	subs	r6, r0, #32
   133b4:	str	r1, [fp, #-36]	; 0xffffffdc
   133b8:	str	r1, [fp, #-40]	; 0xffffffd8
   133bc:	lsr	r1, r8, r0
   133c0:	rsb	r7, r0, #32
   133c4:	movwpl	r1, #0
   133c8:	cmp	r6, #0
   133cc:	str	r1, [fp, #-44]	; 0xffffffd4
   133d0:	lsr	r1, ip, r0
   133d4:	add	r0, r0, #64	; 0x40
   133d8:	orr	r1, r1, r8, lsl r7
   133dc:	lsrpl	r1, r8, r6
   133e0:	str	r0, [sp, #32]
   133e4:	str	r1, [fp, #-48]	; 0xffffffd0
   133e8:	movw	r1, #63974	; 0xf9e6
   133ec:	ubfx	r0, r2, #1, #7
   133f0:	str	r3, [sp, #52]	; 0x34
   133f4:	movt	r1, #1
   133f8:	ldrb	r0, [r1, r0]
   133fc:	umull	r1, r7, r0, r2
   13400:	mla	r7, r0, r3, r7
   13404:	rsbs	r1, r1, #2
   13408:	umull	r1, r4, r1, r0
   1340c:	rsc	r8, r7, #0
   13410:	mla	r0, r8, r0, r4
   13414:	mov	r4, #0
   13418:	umull	r7, r5, r1, r2
   1341c:	rsbs	r6, r7, #2
   13420:	mov	r7, r2
   13424:	umull	ip, sl, r1, r6
   13428:	str	r7, [sp, #48]	; 0x30
   1342c:	umull	r9, r2, ip, r2
   13430:	mla	r2, ip, r3, r2
   13434:	mla	r3, r1, r3, r5
   13438:	mla	r3, r0, r7, r3
   1343c:	rsc	r3, r3, #0
   13440:	rsbs	lr, r9, #2
   13444:	mla	r1, r1, r3, sl
   13448:	ldr	sl, [sp, #84]	; 0x54
   1344c:	mov	r3, #127	; 0x7f
   13450:	mla	r0, r0, r6, r1
   13454:	mov	r6, #0
   13458:	str	r0, [sp, #148]	; 0x94
   1345c:	mla	r0, r0, r7, r2
   13460:	ldr	r2, [sp, #56]	; 0x38
   13464:	mov	r7, #0
   13468:	rsc	r0, r0, #0
   1346c:	rsbs	r1, r2, #1
   13470:	str	r0, [sp, #144]	; 0x90
   13474:	mov	r0, #0
   13478:	rscs	r1, sl, #0
   1347c:	movwcc	r6, #1
   13480:	cmp	r6, #0
   13484:	movwne	r3, #63	; 0x3f
   13488:	subs	r1, r2, #2
   1348c:	sbcs	r1, sl, #0
   13490:	mov	r1, #0
   13494:	movwcc	r7, #1
   13498:	str	r1, [sp, #156]	; 0x9c
   1349c:	mov	r1, r3
   134a0:	ldr	r3, [sp, #156]	; 0x9c
   134a4:	lsl	r2, r4, #1
   134a8:	ldr	r5, [sp, #56]	; 0x38
   134ac:	mov	r9, r0
   134b0:	orr	r4, r2, r6, lsr #31
   134b4:	lsl	r2, r6, #1
   134b8:	orr	r6, r2, r3, lsr #31
   134bc:	lsl	r0, r3, #1
   134c0:	orr	r0, r0, r7, lsr #31
   134c4:	lsl	r7, r7, #1
   134c8:	subs	r2, r5, r6
   134cc:	sbcs	r2, sl, r4
   134d0:	bcc	134fc <__assert_fail@plt+0x1a80>
   134d4:	ldr	r2, [sp, #48]	; 0x30
   134d8:	subs	r2, r7, r2
   134dc:	ldr	r2, [sp, #52]	; 0x34
   134e0:	sbcs	r2, r0, r2
   134e4:	bcc	13538 <__assert_fail@plt+0x1abc>
   134e8:	ldr	r5, [sp, #56]	; 0x38
   134ec:	eor	r3, r4, sl
   134f0:	eor	r2, r6, r5
   134f4:	orrs	r2, r2, r3
   134f8:	bne	13538 <__assert_fail@plt+0x1abc>
   134fc:	subs	r2, r6, r5
   13500:	ldr	r5, [sp, #48]	; 0x30
   13504:	sbc	r3, r4, sl
   13508:	subs	r6, r2, #1
   1350c:	sbc	r4, r3, #0
   13510:	subs	r7, r7, r5
   13514:	ldr	r5, [sp, #52]	; 0x34
   13518:	sbcs	r0, r0, r5
   1351c:	str	r0, [sp, #156]	; 0x9c
   13520:	mov	r0, #0
   13524:	movwcc	r0, #1
   13528:	cmp	r0, #0
   1352c:	moveq	r6, r2
   13530:	moveq	r4, r3
   13534:	b	1353c <__assert_fail@plt+0x1ac0>
   13538:	str	r0, [sp, #156]	; 0x9c
   1353c:	subs	r3, r1, #1
   13540:	sbc	r0, r9, #0
   13544:	orrs	r1, r1, r9
   13548:	bne	1349c <__assert_fail@plt+0x1a20>
   1354c:	ldr	r3, [sp, #156]	; 0x9c
   13550:	lsl	r0, r4, #1
   13554:	mov	r2, r7
   13558:	ldr	r1, [sp, #144]	; 0x90
   1355c:	str	r7, [fp, #-80]	; 0xffffffb0
   13560:	str	r6, [fp, #-72]	; 0xffffffb8
   13564:	str	r4, [sp, #96]	; 0x60
   13568:	lsl	r5, r7, #1
   1356c:	str	r6, [sp, #136]	; 0x88
   13570:	orr	r8, r0, r6, lsr #31
   13574:	str	r2, [sp, #100]	; 0x64
   13578:	str	r5, [fp, #-64]	; 0xffffffc0
   1357c:	str	r8, [fp, #-52]	; 0xffffffcc
   13580:	lsl	r0, r3, #1
   13584:	str	r3, [fp, #-76]	; 0xffffffb4
   13588:	str	r4, [fp, #-68]	; 0xffffffbc
   1358c:	ldr	r4, [sp, #56]	; 0x38
   13590:	orr	r9, r0, r7, lsr #31
   13594:	rsbs	r0, r2, r2, lsl #1
   13598:	mov	r7, sl
   1359c:	mov	sl, #0
   135a0:	sbcs	r0, r9, r3
   135a4:	umull	r3, r2, ip, lr
   135a8:	mov	r0, #0
   135ac:	str	r9, [fp, #-60]	; 0xffffffc4
   135b0:	movwcc	r0, #1
   135b4:	mla	r2, ip, r1, r2
   135b8:	ldr	r1, [sp, #148]	; 0x94
   135bc:	orr	r0, r0, r6, lsl #1
   135c0:	ldr	ip, [sp, #52]	; 0x34
   135c4:	str	r0, [fp, #-56]	; 0xffffffc8
   135c8:	str	r3, [sp, #152]	; 0x98
   135cc:	mla	r2, r1, lr, r2
   135d0:	ldr	lr, [sp, #48]	; 0x30
   135d4:	str	r2, [sp, #148]	; 0x94
   135d8:	sub	r2, fp, #64	; 0x40
   135dc:	add	r2, r2, #8
   135e0:	str	r2, [sp, #28]
   135e4:	subs	r2, r4, r0
   135e8:	sbcs	r2, r7, r8
   135ec:	bcc	13610 <__assert_fail@plt+0x1b94>
   135f0:	subs	r2, r5, lr
   135f4:	sbcs	r2, r9, ip
   135f8:	bcc	13650 <__assert_fail@plt+0x1bd4>
   135fc:	ldr	r7, [sp, #84]	; 0x54
   13600:	eor	r2, r0, r4
   13604:	eor	r7, r8, r7
   13608:	orrs	r2, r2, r7
   1360c:	bne	13650 <__assert_fail@plt+0x1bd4>
   13610:	ldr	r1, [sp, #140]	; 0x8c
   13614:	ldr	r3, [sp, #132]	; 0x84
   13618:	subs	r2, r1, #1
   1361c:	sbc	r7, r3, #0
   13620:	subs	r5, r5, lr
   13624:	sbcs	r6, r9, ip
   13628:	str	r5, [fp, #-64]	; 0xffffffc0
   1362c:	movwcc	sl, #1
   13630:	str	r6, [fp, #-60]	; 0xffffffc4
   13634:	cmp	sl, #0
   13638:	moveq	r2, r1
   1363c:	moveq	r7, r3
   13640:	adds	r0, r2, r0
   13644:	ldr	r2, [sp, #28]
   13648:	adc	r1, r7, r8
   1364c:	strd	r0, [r2]
   13650:	sub	r0, fp, #64	; 0x40
   13654:	sub	r2, fp, #48	; 0x30
   13658:	ldr	sl, [sp, #84]	; 0x54
   1365c:	ldr	r3, [sp, #148]	; 0x94
   13660:	sub	r1, fp, #80	; 0x50
   13664:	str	r4, [fp, #-88]	; 0xffffffa8
   13668:	str	lr, [fp, #-96]	; 0xffffffa0
   1366c:	stm	sp, {r0, r2}
   13670:	ldr	r0, [sp, #32]
   13674:	ldr	r2, [sp, #152]	; 0x98
   13678:	str	r1, [sp, #12]
   1367c:	str	sl, [fp, #-84]	; 0xffffffac
   13680:	str	ip, [fp, #-92]	; 0xffffffa4
   13684:	str	r0, [sp, #8]
   13688:	sub	r0, fp, #96	; 0x60
   1368c:	bl	15880 <__assert_fail@plt+0x3e04>
   13690:	mov	r1, r0
   13694:	mov	r0, #0
   13698:	cmp	r1, #0
   1369c:	beq	13c48 <__assert_fail@plt+0x21cc>
   136a0:	ldr	r5, [sp, #80]	; 0x50
   136a4:	ldr	r6, [sp, #76]	; 0x4c
   136a8:	ldr	r7, [sp, #92]	; 0x5c
   136ac:	ldr	r4, [sp, #88]	; 0x58
   136b0:	add	r8, sp, #192	; 0xc0
   136b4:	str	r8, [sp]
   136b8:	mov	r0, r5
   136bc:	mov	r1, r6
   136c0:	mov	r2, r7
   136c4:	mov	r3, r4
   136c8:	bl	127e4 <__assert_fail@plt+0xd68>
   136cc:	lsrs	r0, r6, #1
   136d0:	str	r0, [sp, #72]	; 0x48
   136d4:	rrx	r0, r5
   136d8:	str	r0, [sp, #68]	; 0x44
   136dc:	lsrs	r0, r4, #1
   136e0:	rrx	r1, r7
   136e4:	str	r1, [sp, #64]	; 0x40
   136e8:	orr	r0, r0, r5, lsl #31
   136ec:	str	r0, [sp, #60]	; 0x3c
   136f0:	add	r0, sp, #160	; 0xa0
   136f4:	add	r0, r0, #8
   136f8:	str	r0, [sp, #144]	; 0x90
   136fc:	add	r0, sp, #176	; 0xb0
   13700:	add	r0, r0, #8
   13704:	str	r0, [sp, #140]	; 0x8c
   13708:	add	r0, r8, #16
   1370c:	str	r0, [sp, #20]
   13710:	add	r0, r8, #8
   13714:	str	r0, [sp, #24]
   13718:	mov	r0, #2
   1371c:	str	r0, [sp, #40]	; 0x28
   13720:	mov	r0, #0
   13724:	str	r0, [sp, #36]	; 0x24
   13728:	mov	r0, #0
   1372c:	str	r0, [sp, #44]	; 0x2c
   13730:	ldr	r0, [sp, #24]
   13734:	mov	r4, #1
   13738:	mov	r8, sl
   1373c:	ldrd	r0, [r0]
   13740:	orrs	r0, r0, r1
   13744:	beq	13884 <__assert_fail@plt+0x1e08>
   13748:	ldr	r0, [sp, #192]	; 0xc0
   1374c:	movw	r1, #63974	; 0xf9e6
   13750:	ldr	ip, [sp, #196]	; 0xc4
   13754:	movt	r1, #1
   13758:	ubfx	r2, r0, #1, #7
   1375c:	ldrb	r2, [r1, r2]
   13760:	umull	r3, r7, r0, r2
   13764:	mla	r7, ip, r2, r7
   13768:	rsbs	r3, r3, #2
   1376c:	umull	r3, r6, r3, r2
   13770:	rsc	r7, r7, #0
   13774:	mla	r1, r7, r2, r6
   13778:	umull	r7, r6, r3, r0
   1377c:	str	r1, [sp, #112]	; 0x70
   13780:	mla	r6, r3, ip, r6
   13784:	mla	r6, r1, r0, r6
   13788:	rsbs	r9, r7, #2
   1378c:	rsc	r1, r6, #0
   13790:	str	r1, [sp, #132]	; 0x84
   13794:	umull	r5, r1, r3, r9
   13798:	str	r1, [sp, #124]	; 0x7c
   1379c:	umull	r6, r1, r5, r0
   137a0:	rsbs	sl, r6, #2
   137a4:	str	r1, [sp, #120]	; 0x78
   137a8:	ldr	r6, [sp, #92]	; 0x5c
   137ac:	umull	r1, r2, r5, sl
   137b0:	str	r2, [sp, #128]	; 0x80
   137b4:	umull	lr, r2, r1, r6
   137b8:	str	r2, [sp, #116]	; 0x74
   137bc:	ldr	r2, [sp, #88]	; 0x58
   137c0:	str	lr, [sp, #176]	; 0xb0
   137c4:	ldr	r7, [sp, #116]	; 0x74
   137c8:	mla	lr, r1, r2, r7
   137cc:	ldr	r1, [sp, #120]	; 0x78
   137d0:	ldr	r2, [sp, #132]	; 0x84
   137d4:	mla	ip, r5, ip, r1
   137d8:	ldr	r1, [sp, #124]	; 0x7c
   137dc:	mla	r3, r3, r2, r1
   137e0:	ldr	r1, [sp, #112]	; 0x70
   137e4:	mla	r2, r1, r9, r3
   137e8:	ldr	r1, [sp, #128]	; 0x80
   137ec:	sub	r3, fp, #96	; 0x60
   137f0:	mla	r0, r2, r0, ip
   137f4:	rsc	r0, r0, #0
   137f8:	mla	r0, r5, r0, r1
   137fc:	mov	r1, #0
   13800:	mla	r0, r2, sl, r0
   13804:	add	r2, sp, #176	; 0xb0
   13808:	mla	r0, r0, r6, lr
   1380c:	str	r0, [sp, #180]	; 0xb4
   13810:	ldr	r0, [sp, #140]	; 0x8c
   13814:	str	r1, [r0]
   13818:	str	r1, [r0, #4]
   1381c:	ldr	r0, [sp, #152]	; 0x98
   13820:	sub	r1, fp, #64	; 0x40
   13824:	str	r0, [sp]
   13828:	ldr	r0, [sp, #148]	; 0x94
   1382c:	str	r0, [sp, #4]
   13830:	sub	r0, fp, #80	; 0x50
   13834:	str	r0, [sp, #8]
   13838:	ldr	r0, [sp, #144]	; 0x90
   1383c:	bl	15ab4 <__assert_fail@plt+0x4038>
   13840:	ldr	r2, [sp, #156]	; 0x9c
   13844:	ldr	r9, [sp, #100]	; 0x64
   13848:	ldr	r7, [sp, #96]	; 0x60
   1384c:	str	r1, [sp, #164]	; 0xa4
   13850:	str	r0, [sp, #160]	; 0xa0
   13854:	eor	r1, r1, r2
   13858:	eor	r0, r0, r9
   1385c:	orrs	r0, r0, r1
   13860:	bne	1388c <__assert_fail@plt+0x1e10>
   13864:	ldr	r0, [sp, #144]	; 0x90
   13868:	ldr	r2, [sp, #136]	; 0x88
   1386c:	ldrd	r0, [r0]
   13870:	eor	r1, r1, r7
   13874:	eor	r0, r0, r2
   13878:	orrs	r4, r0, r1
   1387c:	movwne	r4, #1
   13880:	b	1388c <__assert_fail@plt+0x1e10>
   13884:	ldr	r9, [sp, #100]	; 0x64
   13888:	ldr	r7, [sp, #96]	; 0x60
   1388c:	cmp	r4, #0
   13890:	ldrbne	r0, [sp, #442]	; 0x1ba
   13894:	cmpne	r0, #0
   13898:	bne	13a10 <__assert_fail@plt+0x1f94>
   1389c:	cmp	r4, #0
   138a0:	bne	13c3c <__assert_fail@plt+0x21c0>
   138a4:	ldr	r1, [sp, #44]	; 0x2c
   138a8:	movw	r0, #62624	; 0xf4a0
   138ac:	ldr	r7, [sp, #40]	; 0x28
   138b0:	ldr	r6, [sp, #36]	; 0x24
   138b4:	ldr	r9, [sp, #56]	; 0x38
   138b8:	mov	sl, r8
   138bc:	ldr	lr, [sp, #52]	; 0x34
   138c0:	mov	r2, #0
   138c4:	mov	r4, #127	; 0x7f
   138c8:	movt	r0, #1
   138cc:	ldrb	r0, [r0, r1]
   138d0:	adds	r7, r7, r0
   138d4:	adc	r6, r6, #0
   138d8:	subs	r0, r7, r9
   138dc:	mov	r1, r7
   138e0:	str	r7, [sp, #40]	; 0x28
   138e4:	sbcs	r0, r6, r8
   138e8:	ldr	r8, [sp, #48]	; 0x30
   138ec:	mov	r0, #0
   138f0:	mov	r5, r6
   138f4:	str	r6, [sp, #36]	; 0x24
   138f8:	movwcc	r0, #1
   138fc:	cmp	r0, #0
   13900:	mov	r3, r0
   13904:	movwne	r4, #63	; 0x3f
   13908:	movwne	r5, #0
   1390c:	movwne	r1, #0
   13910:	movne	r3, r6
   13914:	movne	r0, r7
   13918:	lsl	r3, r3, #1
   1391c:	mov	ip, r2
   13920:	lsl	r2, r5, #1
   13924:	lsr	r5, r5, #31
   13928:	mov	r7, r4
   1392c:	orr	r3, r3, r0, lsr #31
   13930:	orr	r0, r5, r0, lsl #1
   13934:	orr	r2, r2, r1, lsr #31
   13938:	lsl	r1, r1, #1
   1393c:	subs	r5, r9, r0
   13940:	sbcs	r5, sl, r3
   13944:	bcc	13964 <__assert_fail@plt+0x1ee8>
   13948:	subs	r5, r1, r8
   1394c:	sbcs	r5, r2, lr
   13950:	bcc	13994 <__assert_fail@plt+0x1f18>
   13954:	eor	r5, r0, r9
   13958:	eor	r4, r3, sl
   1395c:	orrs	r5, r5, r4
   13960:	bne	13994 <__assert_fail@plt+0x1f18>
   13964:	subs	r4, r0, r9
   13968:	sbc	r6, r3, sl
   1396c:	subs	r0, r4, #1
   13970:	sbc	r3, r6, #0
   13974:	subs	r1, r1, r8
   13978:	sbcs	r5, r2, lr
   1397c:	mov	r2, #0
   13980:	movwcc	r2, #1
   13984:	cmp	r2, #0
   13988:	moveq	r0, r4
   1398c:	moveq	r3, r6
   13990:	b	13998 <__assert_fail@plt+0x1f1c>
   13994:	mov	r5, r2
   13998:	subs	r4, r7, #1
   1399c:	sbc	r2, ip, #0
   139a0:	orrs	r7, r7, ip
   139a4:	bne	13918 <__assert_fail@plt+0x1e9c>
   139a8:	ldr	r2, [sp, #28]
   139ac:	stm	r2, {r0, r3}
   139b0:	sub	r0, fp, #64	; 0x40
   139b4:	ldr	r2, [sp, #152]	; 0x98
   139b8:	ldr	r3, [sp, #148]	; 0x94
   139bc:	str	r5, [fp, #-60]	; 0xffffffc4
   139c0:	str	r1, [fp, #-64]	; 0xffffffc0
   139c4:	str	r0, [sp]
   139c8:	sub	r0, fp, #48	; 0x30
   139cc:	str	r0, [sp, #4]
   139d0:	ldr	r0, [sp, #32]
   139d4:	str	r0, [sp, #8]
   139d8:	sub	r0, fp, #80	; 0x50
   139dc:	str	r0, [sp, #12]
   139e0:	sub	r0, fp, #96	; 0x60
   139e4:	bl	15880 <__assert_fail@plt+0x3e04>
   139e8:	cmp	r0, #0
   139ec:	beq	13c44 <__assert_fail@plt+0x21c8>
   139f0:	ldr	r0, [sp, #44]	; 0x2c
   139f4:	mov	r1, r0
   139f8:	add	r1, r0, #1
   139fc:	cmp	r1, #668	; 0x29c
   13a00:	mov	r0, r1
   13a04:	str	r1, [sp, #44]	; 0x2c
   13a08:	bne	13730 <__assert_fail@plt+0x1cb4>
   13a0c:	b	13c50 <__assert_fail@plt+0x21d4>
   13a10:	ldr	r5, [sp, #20]
   13a14:	mov	r6, #1
   13a18:	ldrd	r0, [r5]
   13a1c:	eor	r2, r0, #2
   13a20:	orrs	r2, r2, r1
   13a24:	bne	13a50 <__assert_fail@plt+0x1fd4>
   13a28:	ldr	r0, [sp, #64]	; 0x40
   13a2c:	ldr	r1, [sp, #68]	; 0x44
   13a30:	ldr	r2, [sp, #140]	; 0x8c
   13a34:	str	r0, [sp, #176]	; 0xb0
   13a38:	ldr	r0, [sp, #60]	; 0x3c
   13a3c:	str	r0, [sp, #180]	; 0xb4
   13a40:	ldr	r0, [sp, #72]	; 0x48
   13a44:	str	r1, [r2]
   13a48:	str	r0, [r2, #4]
   13a4c:	b	13bb0 <__assert_fail@plt+0x2134>
   13a50:	movw	r3, #63974	; 0xf9e6
   13a54:	str	r6, [sp, #108]	; 0x6c
   13a58:	ubfx	r2, r0, #1, #7
   13a5c:	ldr	r9, [sp, #92]	; 0x5c
   13a60:	movt	r3, #1
   13a64:	ldrb	r2, [r3, r2]
   13a68:	umull	r3, r7, r0, r2
   13a6c:	mla	r7, r1, r2, r7
   13a70:	rsbs	r3, r3, #2
   13a74:	umull	r6, r3, r3, r2
   13a78:	rsc	r7, r7, #0
   13a7c:	mla	sl, r7, r2, r3
   13a80:	umull	r2, r3, r6, r0
   13a84:	mla	r3, r6, r1, r3
   13a88:	mla	r3, sl, r0, r3
   13a8c:	rsbs	r4, r2, #2
   13a90:	rsc	r2, r3, #0
   13a94:	str	r2, [sp, #128]	; 0x80
   13a98:	umull	r2, r3, r6, r4
   13a9c:	str	r3, [sp, #120]	; 0x78
   13aa0:	umull	r3, r7, r2, r0
   13aa4:	rsbs	ip, r3, #2
   13aa8:	str	r7, [sp, #112]	; 0x70
   13aac:	umull	r8, r3, r2, ip
   13ab0:	str	r3, [sp, #124]	; 0x7c
   13ab4:	umull	r3, lr, r8, r9
   13ab8:	str	r8, [sp, #104]	; 0x68
   13abc:	str	r3, [sp, #132]	; 0x84
   13ac0:	ldr	r3, [sp, #88]	; 0x58
   13ac4:	mla	r3, r8, r3, lr
   13ac8:	ldr	lr, [sp, #120]	; 0x78
   13acc:	str	r3, [sp, #116]	; 0x74
   13ad0:	ldr	r3, [sp, #112]	; 0x70
   13ad4:	mla	r8, r2, r1, r3
   13ad8:	ldr	r3, [sp, #128]	; 0x80
   13adc:	mla	r6, r6, r3, lr
   13ae0:	ldr	lr, [sp, #80]	; 0x50
   13ae4:	mla	r4, sl, r4, r6
   13ae8:	ldr	r6, [sp, #124]	; 0x7c
   13aec:	mla	r3, r4, r0, r8
   13af0:	rsc	r3, r3, #0
   13af4:	mla	r2, r2, r3, r6
   13af8:	mla	ip, r4, ip, r2
   13afc:	ldr	r2, [sp, #116]	; 0x74
   13b00:	mla	r6, ip, r9, r2
   13b04:	ldr	r9, [sp, #76]	; 0x4c
   13b08:	subs	r2, lr, r0
   13b0c:	sbcs	r2, r9, r1
   13b10:	bcs	13b34 <__assert_fail@plt+0x20b8>
   13b14:	ldr	r0, [sp, #132]	; 0x84
   13b18:	mov	r1, #0
   13b1c:	str	r6, [sp, #180]	; 0xb4
   13b20:	str	r0, [sp, #176]	; 0xb0
   13b24:	ldr	r0, [sp, #140]	; 0x8c
   13b28:	str	r1, [r0]
   13b2c:	str	r1, [r0, #4]
   13b30:	b	13ba0 <__assert_fail@plt+0x2124>
   13b34:	ldr	r8, [sp, #132]	; 0x84
   13b38:	umull	r2, r3, r8, r1
   13b3c:	umull	r4, r7, r8, r0
   13b40:	umlal	r2, r3, r6, r0
   13b44:	adds	r2, r2, r7
   13b48:	umull	r0, r7, r6, r0
   13b4c:	adc	r3, r3, #0
   13b50:	subs	r0, r2, r0
   13b54:	umull	r1, r2, r6, r1
   13b58:	sbcs	r0, r3, r7
   13b5c:	mov	r0, #0
   13b60:	ldr	r7, [sp, #104]	; 0x68
   13b64:	movwcc	r0, #1
   13b68:	cmp	r0, #0
   13b6c:	addne	r2, r2, #1
   13b70:	subs	r0, lr, r3
   13b74:	sbc	r3, r9, #0
   13b78:	subs	r0, r0, r1
   13b7c:	umull	r4, r1, r0, r7
   13b80:	mla	r0, r0, ip, r1
   13b84:	sbc	r1, r3, r2
   13b88:	mla	r1, r1, r7, r0
   13b8c:	ldr	r0, [sp, #140]	; 0x8c
   13b90:	str	r4, [r0]
   13b94:	str	r1, [r0, #4]
   13b98:	str	r6, [sp, #180]	; 0xb4
   13b9c:	str	r8, [sp, #176]	; 0xb0
   13ba0:	ldr	r8, [sp, #84]	; 0x54
   13ba4:	ldr	r9, [sp, #100]	; 0x64
   13ba8:	ldr	r7, [sp, #96]	; 0x60
   13bac:	ldr	r6, [sp, #108]	; 0x6c
   13bb0:	ldr	r0, [sp, #152]	; 0x98
   13bb4:	ldr	r4, [sp, #144]	; 0x90
   13bb8:	sub	r1, fp, #64	; 0x40
   13bbc:	add	r2, sp, #176	; 0xb0
   13bc0:	sub	r3, fp, #96	; 0x60
   13bc4:	str	r0, [sp]
   13bc8:	ldr	r0, [sp, #148]	; 0x94
   13bcc:	str	r0, [sp, #4]
   13bd0:	sub	r0, fp, #80	; 0x50
   13bd4:	str	r0, [sp, #8]
   13bd8:	mov	r0, r4
   13bdc:	bl	15ab4 <__assert_fail@plt+0x4038>
   13be0:	ldr	r2, [sp, #156]	; 0x9c
   13be4:	str	r1, [sp, #164]	; 0xa4
   13be8:	str	r0, [sp, #160]	; 0xa0
   13bec:	eor	r0, r0, r9
   13bf0:	eor	r1, r1, r2
   13bf4:	ldrd	r2, [r4]
   13bf8:	eor	r3, r3, r7
   13bfc:	orr	r1, r1, r3
   13c00:	ldr	r3, [sp, #136]	; 0x88
   13c04:	eor	r2, r2, r3
   13c08:	orr	r0, r0, r2
   13c0c:	orrs	r0, r0, r1
   13c10:	mov	r4, r0
   13c14:	movwne	r4, #1
   13c18:	cmp	r0, #0
   13c1c:	beq	1389c <__assert_fail@plt+0x1e20>
   13c20:	ldrb	r1, [sp, #442]	; 0x1ba
   13c24:	add	r0, r6, #1
   13c28:	add	r5, r5, #8
   13c2c:	cmp	r6, r1
   13c30:	mov	r6, r0
   13c34:	bcc	13a18 <__assert_fail@plt+0x1f9c>
   13c38:	b	1389c <__assert_fail@plt+0x1e20>
   13c3c:	mov	r0, #1
   13c40:	b	13c48 <__assert_fail@plt+0x21cc>
   13c44:	mov	r0, #0
   13c48:	sub	sp, fp, #28
   13c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c50:	movw	r1, #50965	; 0xc715
   13c54:	mov	r0, #0
   13c58:	mov	r2, #5
   13c5c:	movt	r1, #1
   13c60:	bl	1174c <dcgettext@plt>
   13c64:	mov	r2, r0
   13c68:	mov	r0, #0
   13c6c:	mov	r1, #0
   13c70:	bl	1183c <error@plt>
   13c74:	bl	11a64 <abort@plt>
   13c78:	push	{r4, r5, r7, r9, fp, lr}
   13c7c:	add	fp, sp, #16
   13c80:	sub	sp, sp, #8
   13c84:	mov	r4, r2
   13c88:	orrs	r1, r2, r3
   13c8c:	ldr	r9, [fp, #12]
   13c90:	ldr	r2, [fp, #8]
   13c94:	beq	13cdc <__assert_fail@plt+0x2260>
   13c98:	mov	r1, r0
   13c9c:	ldr	r5, [r1, #8]!
   13ca0:	ldr	r7, [r1, #4]
   13ca4:	orrs	r7, r5, r7
   13ca8:	stmeq	r0, {r2, r9}
   13cac:	streq	r4, [r1]
   13cb0:	streq	r3, [r1, #4]
   13cb4:	subeq	sp, fp, #16
   13cb8:	popeq	{r4, r5, r7, r9, fp, pc}
   13cbc:	movw	r0, #51263	; 0xc83f
   13cc0:	movw	r1, #50952	; 0xc708
   13cc4:	movw	r3, #51287	; 0xc857
   13cc8:	movw	r2, #558	; 0x22e
   13ccc:	movt	r0, #1
   13cd0:	movt	r1, #1
   13cd4:	movt	r3, #1
   13cd8:	bl	11a7c <__assert_fail@plt>
   13cdc:	mov	r1, #1
   13ce0:	mov	r3, r9
   13ce4:	str	r1, [sp]
   13ce8:	bl	15270 <__assert_fail@plt+0x37f4>
   13cec:	sub	sp, fp, #16
   13cf0:	pop	{r4, r5, r7, r9, fp, pc}
   13cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cf8:	add	fp, sp, #28
   13cfc:	sub	sp, sp, #84	; 0x54
   13d00:	mov	lr, r0
   13d04:	subs	r0, r0, #2
   13d08:	str	r3, [sp, #12]
   13d0c:	sbcs	r0, r1, #0
   13d10:	bcc	14500 <__assert_fail@plt+0x2a84>
   13d14:	mvn	r0, #63	; 0x3f
   13d18:	str	lr, [fp, #-32]	; 0xffffffe0
   13d1c:	mov	r6, lr
   13d20:	mov	r5, r1
   13d24:	mov	r9, r1
   13d28:	mov	r1, #0
   13d2c:	mov	r7, #0
   13d30:	mov	sl, #1
   13d34:	mov	r4, #0
   13d38:	mov	ip, #0
   13d3c:	mov	lr, #0
   13d40:	str	r2, [sp, #16]
   13d44:	str	r1, [fp, #-44]	; 0xffffffd4
   13d48:	lsrs	r3, lr, #1
   13d4c:	rrx	ip, ip
   13d50:	lsrs	r9, r9, #1
   13d54:	orr	lr, r3, r6, lsl #31
   13d58:	rrx	r6, r6
   13d5c:	subs	r3, r6, sl
   13d60:	sbcs	r3, r9, r4
   13d64:	bcc	13d88 <__assert_fail@plt+0x230c>
   13d68:	eor	r8, sl, r6
   13d6c:	eor	r3, r4, r9
   13d70:	orrs	r3, r8, r3
   13d74:	bne	13dc4 <__assert_fail@plt+0x2348>
   13d78:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13d7c:	subs	r3, r1, ip
   13d80:	sbcs	r3, r7, lr
   13d84:	bcc	13dc4 <__assert_fail@plt+0x2348>
   13d88:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13d8c:	subs	r3, sl, r6
   13d90:	sbc	r2, r4, r9
   13d94:	subs	sl, r3, #1
   13d98:	sbc	r4, r2, #0
   13d9c:	subs	r1, r1, ip
   13da0:	sbcs	r7, r7, lr
   13da4:	str	r1, [fp, #-44]	; 0xffffffd4
   13da8:	mov	r1, r7
   13dac:	mov	r7, #0
   13db0:	movwcc	r7, #1
   13db4:	cmp	r7, #0
   13db8:	mov	r7, r1
   13dbc:	moveq	sl, r3
   13dc0:	moveq	r4, r2
   13dc4:	adds	r0, r0, #1
   13dc8:	bcc	13d48 <__assert_fail@plt+0x22cc>
   13dcc:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13dd0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13dd4:	ldr	ip, [sp, #16]
   13dd8:	subs	r0, r4, r2
   13ddc:	sbc	r1, r5, r7
   13de0:	subs	r0, r2, r0
   13de4:	mov	r2, #0
   13de8:	sbcs	r1, r7, r1
   13dec:	movwcc	r2, #1
   13df0:	adds	r6, r0, r4
   13df4:	adc	r3, r1, r5
   13df8:	cmp	r2, #0
   13dfc:	moveq	r6, r0
   13e00:	eor	r0, r4, #1
   13e04:	moveq	r3, r1
   13e08:	orrs	r0, r0, r5
   13e0c:	str	r3, [sp, #28]
   13e10:	str	r6, [sp, #24]
   13e14:	beq	14530 <__assert_fail@plt+0x2ab4>
   13e18:	ldr	r8, [sp, #24]
   13e1c:	ldr	sl, [sp, #28]
   13e20:	add	r0, ip, #1
   13e24:	str	r0, [sp, #8]
   13e28:	mov	r0, #1
   13e2c:	str	r0, [fp, #-40]	; 0xffffffd8
   13e30:	mov	r0, #1
   13e34:	str	r0, [sp, #20]
   13e38:	mov	r9, r8
   13e3c:	mov	r6, sl
   13e40:	mov	r3, sl
   13e44:	str	r8, [fp, #-52]	; 0xffffffcc
   13e48:	subs	r0, ip, r4
   13e4c:	str	r6, [sp, #44]	; 0x2c
   13e50:	str	r9, [sp, #40]	; 0x28
   13e54:	str	r7, [sp, #56]	; 0x38
   13e58:	rscs	r0, r5, #0
   13e5c:	bcs	14538 <__assert_fail@plt+0x2abc>
   13e60:	movw	r1, #63974	; 0xf9e6
   13e64:	ubfx	r0, r4, #1, #7
   13e68:	mov	sl, r3
   13e6c:	str	r5, [fp, #-48]	; 0xffffffd0
   13e70:	str	r4, [fp, #-32]	; 0xffffffe0
   13e74:	movt	r1, #1
   13e78:	ldrb	r0, [r1, r0]
   13e7c:	umull	r1, r2, r4, r0
   13e80:	mla	r2, r5, r0, r2
   13e84:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e88:	rsbs	r1, r1, #2
   13e8c:	umull	r1, r3, r1, r0
   13e90:	rsc	r8, r2, #0
   13e94:	mla	r0, r8, r0, r3
   13e98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e9c:	umull	r7, r6, r1, r4
   13ea0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13ea4:	mla	r3, r1, r3, r6
   13ea8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13eac:	rsbs	r7, r7, #2
   13eb0:	umull	r2, lr, r1, r7
   13eb4:	mla	r3, r0, r6, r3
   13eb8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13ebc:	rsc	r3, r3, #0
   13ec0:	umull	r4, r9, r2, r4
   13ec4:	mla	r1, r1, r3, lr
   13ec8:	ldr	lr, [fp, #-32]	; 0xffffffe0
   13ecc:	mla	r0, r0, r7, r1
   13ed0:	mla	r9, r2, r5, r9
   13ed4:	mov	r5, sl
   13ed8:	rsbs	r3, r4, #2
   13edc:	mla	r1, r0, lr, r9
   13ee0:	umull	r8, r4, r2, r3
   13ee4:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13ee8:	rsc	r1, r1, #0
   13eec:	mla	r1, r2, r1, r4
   13ef0:	ldr	r2, [sp, #20]
   13ef4:	str	r8, [sp, #32]
   13ef8:	mla	r0, r0, r3, r1
   13efc:	str	r0, [fp, #-36]	; 0xffffffdc
   13f00:	subs	r0, lr, ip
   13f04:	str	r0, [sp, #48]	; 0x30
   13f08:	sbc	r0, r9, #0
   13f0c:	str	r0, [sp, #36]	; 0x24
   13f10:	ldr	ip, [sp, #28]
   13f14:	ldr	sl, [sp, #24]
   13f18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13f1c:	str	r2, [sp, #20]
   13f20:	str	r0, [fp, #-40]	; 0xffffffd8
   13f24:	umull	r0, r1, ip, sl
   13f28:	umull	r3, r4, sl, sl
   13f2c:	mov	sl, ip
   13f30:	str	r5, [sp, #52]	; 0x34
   13f34:	str	r6, [fp, #-52]	; 0xffffffcc
   13f38:	lsl	r2, r1, #1
   13f3c:	adds	r4, r4, r0, lsl #1
   13f40:	umull	r7, r5, r3, r8
   13f44:	orr	r2, r2, r0, lsr #31
   13f48:	adc	ip, r2, #0
   13f4c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13f50:	mla	r3, r3, r2, r5
   13f54:	umull	r5, r6, r7, r9
   13f58:	umull	r7, r2, r7, lr
   13f5c:	mla	r3, r4, r8, r3
   13f60:	umlal	r5, r6, r3, lr
   13f64:	adds	r2, r5, r2
   13f68:	adc	r7, r6, #0
   13f6c:	umull	r6, r5, r3, lr
   13f70:	subs	r2, r2, r6
   13f74:	umull	r3, r6, r3, r9
   13f78:	sbcs	r2, r7, r5
   13f7c:	mov	r2, #0
   13f80:	ldr	r5, [sp, #56]	; 0x38
   13f84:	movwcc	r2, #1
   13f88:	cmp	r2, #0
   13f8c:	addne	r6, r6, #1
   13f90:	adds	r2, r3, r7
   13f94:	adc	r3, r6, #0
   13f98:	subs	r0, r4, r0
   13f9c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   13fa0:	sbcs	r0, ip, r1
   13fa4:	umull	r1, r7, sl, sl
   13fa8:	mov	r0, #0
   13fac:	movwcc	r0, #1
   13fb0:	cmp	r0, #0
   13fb4:	addne	r7, r7, #1
   13fb8:	adds	r0, r1, ip
   13fbc:	adc	r1, r7, #0
   13fc0:	subs	r0, r0, r2
   13fc4:	mov	r2, #0
   13fc8:	sbcs	r1, r1, r3
   13fcc:	movwcc	r2, #1
   13fd0:	adds	r3, r0, lr
   13fd4:	adc	r7, r1, r9
   13fd8:	cmp	r2, #0
   13fdc:	mov	r2, #0
   13fe0:	moveq	r3, r0
   13fe4:	ldr	r0, [sp, #48]	; 0x30
   13fe8:	moveq	r7, r1
   13fec:	ldr	r1, [sp, #36]	; 0x24
   13ff0:	subs	r0, r3, r0
   13ff4:	sbcs	r1, r7, r1
   13ff8:	movwcc	r2, #1
   13ffc:	adds	sl, r0, lr
   14000:	adc	ip, r1, r9
   14004:	cmp	r2, #0
   14008:	mov	r2, #0
   1400c:	moveq	sl, r0
   14010:	ldr	r0, [sp, #40]	; 0x28
   14014:	moveq	ip, r1
   14018:	ldr	r1, [sp, #44]	; 0x2c
   1401c:	subs	r0, r0, sl
   14020:	sbcs	r1, r1, ip
   14024:	movwcc	r2, #1
   14028:	adds	r3, r0, lr
   1402c:	adc	r7, r1, r9
   14030:	cmp	r2, #0
   14034:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14038:	moveq	r7, r1
   1403c:	moveq	r3, r0
   14040:	umull	r0, r1, r7, r2
   14044:	umull	r2, r6, r3, r2
   14048:	umlal	r0, r1, r3, r5
   1404c:	adds	r0, r0, r6
   14050:	umull	r7, r6, r7, r5
   14054:	umull	r3, r5, r3, r5
   14058:	adc	r1, r1, #0
   1405c:	subs	r3, r0, r3
   14060:	sbcs	r3, r1, r5
   14064:	mov	r3, #0
   14068:	movwcc	r3, #1
   1406c:	cmp	r3, #0
   14070:	addne	r6, r6, #1
   14074:	adds	r1, r7, r1
   14078:	adc	r3, r6, #0
   1407c:	umull	r7, r6, r2, r8
   14080:	mla	r2, r2, r4, r6
   14084:	mla	r0, r0, r8, r2
   14088:	umull	r2, r6, r7, r9
   1408c:	umull	r7, r5, r7, lr
   14090:	umlal	r2, r6, r0, lr
   14094:	adds	r2, r2, r5
   14098:	adc	r7, r6, #0
   1409c:	umull	r6, r5, r0, r9
   140a0:	umull	r0, r4, r0, lr
   140a4:	subs	r0, r2, r0
   140a8:	sbcs	r0, r7, r4
   140ac:	mov	r0, #0
   140b0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   140b4:	movwcc	r0, #1
   140b8:	cmp	r0, #0
   140bc:	addne	r5, r5, #1
   140c0:	adds	r0, r6, r7
   140c4:	adc	r2, r5, #0
   140c8:	subs	r7, r1, r0
   140cc:	sbcs	r3, r3, r2
   140d0:	mov	r2, #0
   140d4:	movwcc	r2, #1
   140d8:	adds	r0, r7, lr
   140dc:	adc	r1, r3, r9
   140e0:	cmp	r2, #0
   140e4:	and	r2, r4, #31
   140e8:	moveq	r1, r3
   140ec:	moveq	r0, r7
   140f0:	cmp	r2, #1
   140f4:	str	r1, [sp, #56]	; 0x38
   140f8:	str	r0, [fp, #-44]	; 0xffffffd4
   140fc:	bne	14138 <__assert_fail@plt+0x26bc>
   14100:	mov	r2, lr
   14104:	mov	r3, r9
   14108:	str	ip, [sp, #28]
   1410c:	bl	166fc <__assert_fail@plt+0x4c80>
   14110:	ldr	ip, [sp, #28]
   14114:	ldr	lr, [fp, #-32]	; 0xffffffe0
   14118:	ldr	r5, [sp, #52]	; 0x34
   1411c:	ldr	r8, [fp, #-52]	; 0xffffffcc
   14120:	eor	r0, r0, #1
   14124:	orrs	r0, r0, r1
   14128:	mov	r0, sl
   1412c:	mov	r1, ip
   14130:	beq	14140 <__assert_fail@plt+0x26c4>
   14134:	b	142c0 <__assert_fail@plt+0x2844>
   14138:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1413c:	ldr	r1, [sp, #52]	; 0x34
   14140:	ldr	r8, [sp, #32]
   14144:	subs	r4, r4, #1
   14148:	mov	r6, r0
   1414c:	mov	r5, r1
   14150:	mov	r0, r4
   14154:	bne	13f20 <__assert_fail@plt+0x24a4>
   14158:	ldr	r3, [sp, #20]
   1415c:	mov	r6, sl
   14160:	mov	r5, ip
   14164:	mov	r0, ip
   14168:	str	sl, [sp, #24]
   1416c:	str	sl, [sp, #40]	; 0x28
   14170:	str	ip, [sp, #28]
   14174:	str	ip, [sp, #44]	; 0x2c
   14178:	lsl	r2, r3, #1
   1417c:	cmp	r3, #0
   14180:	str	r3, [fp, #-40]	; 0xffffffd8
   14184:	beq	13f10 <__assert_fail@plt+0x2494>
   14188:	ldr	r6, [sp, #24]
   1418c:	ldr	r5, [sp, #28]
   14190:	ldr	sl, [sp, #36]	; 0x24
   14194:	mov	r1, r3
   14198:	str	r2, [fp, #-52]	; 0xffffffcc
   1419c:	umull	r2, r9, r5, r6
   141a0:	mov	ip, r5
   141a4:	umull	r6, r5, r6, r6
   141a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   141ac:	umull	r4, r0, r6, r8
   141b0:	lsl	r7, r9, #1
   141b4:	adds	r5, r5, r2, lsl #1
   141b8:	orr	r7, r7, r2, lsr #31
   141bc:	mla	r0, r6, r3, r0
   141c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   141c4:	adc	lr, r7, #0
   141c8:	mla	r0, r5, r8, r0
   141cc:	umull	r6, r7, r4, r3
   141d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   141d4:	umlal	r6, r7, r0, r3
   141d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   141dc:	umull	r4, r3, r4, r3
   141e0:	adds	r3, r6, r3
   141e4:	ldr	r6, [fp, #-32]	; 0xffffffe0
   141e8:	adc	r4, r7, #0
   141ec:	umull	r6, r7, r0, r6
   141f0:	subs	r3, r3, r6
   141f4:	ldr	r6, [fp, #-48]	; 0xffffffd0
   141f8:	sbcs	r3, r4, r7
   141fc:	mov	r3, #0
   14200:	movwcc	r3, #1
   14204:	cmp	r3, #0
   14208:	umull	r0, r6, r0, r6
   1420c:	addne	r6, r6, #1
   14210:	adds	r0, r0, r4
   14214:	adc	r3, r6, #0
   14218:	subs	r2, r5, r2
   1421c:	umull	r4, r5, ip, ip
   14220:	sbcs	r2, lr, r9
   14224:	mov	r2, #0
   14228:	ldr	r9, [fp, #-48]	; 0xffffffd0
   1422c:	movwcc	r2, #1
   14230:	cmp	r2, #0
   14234:	addne	r5, r5, #1
   14238:	adds	r2, r4, lr
   1423c:	ldr	lr, [fp, #-32]	; 0xffffffe0
   14240:	adc	r7, r5, #0
   14244:	subs	r0, r2, r0
   14248:	sbcs	r2, r7, r3
   1424c:	mov	r3, #0
   14250:	movwcc	r3, #1
   14254:	adds	r7, r0, lr
   14258:	adc	r6, r2, r9
   1425c:	cmp	r3, #0
   14260:	mov	r3, #0
   14264:	moveq	r7, r0
   14268:	ldr	r0, [sp, #48]	; 0x30
   1426c:	moveq	r6, r2
   14270:	subs	r0, r7, r0
   14274:	sbcs	r2, r6, sl
   14278:	movwcc	r3, #1
   1427c:	adds	r6, r0, lr
   14280:	adc	r5, r2, r9
   14284:	cmp	r3, #0
   14288:	moveq	r5, r2
   1428c:	moveq	r6, r0
   14290:	subs	r1, r1, #1
   14294:	bne	1419c <__assert_fail@plt+0x2720>
   14298:	ldr	r0, [sp, #20]
   1429c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   142a0:	str	r0, [fp, #-40]	; 0xffffffd8
   142a4:	ldr	r0, [sp, #24]
   142a8:	str	r6, [sp, #24]
   142ac:	str	r0, [sp, #40]	; 0x28
   142b0:	ldr	r0, [sp, #28]
   142b4:	str	r5, [sp, #28]
   142b8:	str	r0, [sp, #44]	; 0x2c
   142bc:	b	13f10 <__assert_fail@plt+0x2494>
   142c0:	umull	r0, r9, r5, r8
   142c4:	umull	r3, r7, r8, r8
   142c8:	ldr	r1, [sp, #32]
   142cc:	mov	r8, r5
   142d0:	lsl	r2, r9, #1
   142d4:	adds	r7, r7, r0, lsl #1
   142d8:	umull	r6, r5, r3, r1
   142dc:	orr	r2, r2, r0, lsr #31
   142e0:	adc	ip, r2, #0
   142e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   142e8:	mla	r3, r3, r2, r5
   142ec:	mla	r1, r7, r1, r3
   142f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   142f4:	umull	r5, r4, r6, r3
   142f8:	umull	r6, r2, r6, lr
   142fc:	umlal	r5, r4, r1, lr
   14300:	adds	r2, r5, r2
   14304:	adc	r6, r4, #0
   14308:	umull	r5, r4, r1, lr
   1430c:	subs	r2, r2, r5
   14310:	umull	r1, r5, r1, r3
   14314:	sbcs	r2, r6, r4
   14318:	mov	r2, #0
   1431c:	movwcc	r2, #1
   14320:	cmp	r2, #0
   14324:	addne	r5, r5, #1
   14328:	adds	r2, r1, r6
   1432c:	adc	r4, r5, #0
   14330:	subs	r0, r7, r0
   14334:	umull	r1, r7, r8, r8
   14338:	sbcs	r0, ip, r9
   1433c:	mov	r0, #0
   14340:	movwcc	r0, #1
   14344:	cmp	r0, #0
   14348:	addne	r7, r7, #1
   1434c:	adds	r0, r1, ip
   14350:	adc	r1, r7, #0
   14354:	subs	r0, r0, r2
   14358:	mov	r2, #0
   1435c:	sbcs	r1, r1, r4
   14360:	movwcc	r2, #1
   14364:	adds	r6, r0, lr
   14368:	adc	r7, r1, r3
   1436c:	cmp	r2, #0
   14370:	mov	r2, #0
   14374:	moveq	r6, r0
   14378:	ldr	r0, [sp, #48]	; 0x30
   1437c:	moveq	r7, r1
   14380:	ldr	r1, [sp, #36]	; 0x24
   14384:	subs	r0, r6, r0
   14388:	sbcs	r1, r7, r1
   1438c:	mov	r7, #0
   14390:	movwcc	r2, #1
   14394:	adds	r8, r0, lr
   14398:	adc	r5, r1, r3
   1439c:	cmp	r2, #0
   143a0:	moveq	r8, r0
   143a4:	ldr	r0, [sp, #40]	; 0x28
   143a8:	moveq	r5, r1
   143ac:	subs	r2, r0, r8
   143b0:	ldr	r0, [sp, #44]	; 0x2c
   143b4:	sbcs	r6, r0, r5
   143b8:	movwcc	r7, #1
   143bc:	adds	r0, r2, lr
   143c0:	adc	r1, r6, r3
   143c4:	cmp	r7, #0
   143c8:	moveq	r0, r2
   143cc:	moveq	r1, r6
   143d0:	mov	r2, lr
   143d4:	bl	166fc <__assert_fail@plt+0x4c80>
   143d8:	ldr	lr, [fp, #-32]	; 0xffffffe0
   143dc:	mov	r9, r0
   143e0:	eor	r0, r0, #1
   143e4:	orrs	r0, r0, r1
   143e8:	beq	142c0 <__assert_fail@plt+0x2844>
   143ec:	mov	r4, r1
   143f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   143f4:	eor	r0, lr, r9
   143f8:	eor	r1, r1, r4
   143fc:	orrs	r0, r0, r1
   14400:	beq	144ec <__assert_fail@plt+0x2a70>
   14404:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14408:	mov	r0, lr
   1440c:	mov	r2, r9
   14410:	mov	r3, r4
   14414:	str	r5, [sp, #52]	; 0x34
   14418:	bl	1c18c <__assert_fail@plt+0xa710>
   1441c:	mov	r6, r0
   14420:	mov	r5, r1
   14424:	mov	r0, r9
   14428:	mov	r1, r4
   1442c:	bl	1536c <__assert_fail@plt+0x38f0>
   14430:	cmp	r0, #0
   14434:	beq	14454 <__assert_fail@plt+0x29d8>
   14438:	mov	r0, #1
   1443c:	mov	r2, r9
   14440:	mov	r3, r4
   14444:	str	r0, [sp]
   14448:	ldr	r0, [sp, #12]
   1444c:	bl	15270 <__assert_fail@plt+0x37f4>
   14450:	b	14468 <__assert_fail@plt+0x29ec>
   14454:	ldr	r2, [sp, #8]
   14458:	ldr	r3, [sp, #12]
   1445c:	mov	r0, r9
   14460:	mov	r1, r4
   14464:	bl	13cf4 <__assert_fail@plt+0x2278>
   14468:	ldr	r7, [sp, #56]	; 0x38
   1446c:	mov	r0, r6
   14470:	mov	r1, r5
   14474:	mov	r4, r6
   14478:	bl	1536c <__assert_fail@plt+0x38f0>
   1447c:	ldr	r6, [sp, #44]	; 0x2c
   14480:	cmp	r0, #0
   14484:	bne	14518 <__assert_fail@plt+0x2a9c>
   14488:	ldr	r1, [sp, #28]
   1448c:	mov	r0, sl
   14490:	mov	r2, r4
   14494:	mov	r3, r5
   14498:	bl	1c18c <__assert_fail@plt+0xa710>
   1449c:	ldr	r0, [sp, #40]	; 0x28
   144a0:	str	r2, [sp, #24]
   144a4:	str	r3, [sp, #28]
   144a8:	mov	r1, r6
   144ac:	mov	r2, r4
   144b0:	mov	r3, r5
   144b4:	bl	1c18c <__assert_fail@plt+0xa710>
   144b8:	ldr	r1, [sp, #52]	; 0x34
   144bc:	mov	r9, r2
   144c0:	mov	r6, r3
   144c4:	mov	r0, r8
   144c8:	mov	r2, r4
   144cc:	mov	r3, r5
   144d0:	bl	1c18c <__assert_fail@plt+0xa710>
   144d4:	ldr	ip, [sp, #16]
   144d8:	eor	r0, r4, #1
   144dc:	str	r2, [fp, #-52]	; 0xffffffcc
   144e0:	orrs	r0, r0, r5
   144e4:	bne	13e48 <__assert_fail@plt+0x23cc>
   144e8:	b	14530 <__assert_fail@plt+0x2ab4>
   144ec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   144f0:	ldr	r2, [sp, #8]
   144f4:	rsbs	r0, lr, #1
   144f8:	rscs	r0, r1, #0
   144fc:	bcc	13d14 <__assert_fail@plt+0x2298>
   14500:	movw	r0, #51015	; 0xc747
   14504:	movw	r1, #50952	; 0xc708
   14508:	movw	r3, #51352	; 0xc898
   1450c:	movw	r2, #1466	; 0x5ba
   14510:	movt	r0, #1
   14514:	b	1454c <__assert_fail@plt+0x2ad0>
   14518:	mov	r0, #1
   1451c:	mov	r2, r4
   14520:	mov	r3, r5
   14524:	str	r0, [sp]
   14528:	ldr	r0, [sp, #12]
   1452c:	bl	15270 <__assert_fail@plt+0x37f4>
   14530:	sub	sp, fp, #28
   14534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14538:	movw	r0, #51426	; 0xc8e2
   1453c:	movw	r1, #50952	; 0xc708
   14540:	movw	r3, #51352	; 0xc898
   14544:	mov	r2, #1472	; 0x5c0
   14548:	movt	r0, #1
   1454c:	movt	r1, #1
   14550:	movt	r3, #1
   14554:	bl	11a7c <__assert_fail@plt>
   14558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1455c:	add	fp, sp, #28
   14560:	sub	sp, sp, #204	; 0xcc
   14564:	str	r2, [fp, #-76]	; 0xffffffb4
   14568:	subs	r2, r0, #2
   1456c:	mov	r9, #0
   14570:	str	r0, [fp, #-108]	; 0xffffff94
   14574:	mov	r6, #0
   14578:	mov	ip, r3
   1457c:	mov	r7, #0
   14580:	mov	r3, #127	; 0x7f
   14584:	mov	r5, #0
   14588:	mov	lr, #0
   1458c:	sbcs	r2, r1, #0
   14590:	mov	r2, r1
   14594:	movwcc	r9, #1
   14598:	rsbs	r0, r0, #1
   1459c:	rscs	r0, r1, #0
   145a0:	movwcc	r6, #1
   145a4:	cmp	r6, #0
   145a8:	movwne	r3, #63	; 0x3f
   145ac:	mov	r8, r3
   145b0:	lsl	r3, lr, #1
   145b4:	ldr	r1, [fp, #-108]	; 0xffffff94
   145b8:	mov	sl, r7
   145bc:	mov	r0, r2
   145c0:	orr	r4, r3, r9, lsr #31
   145c4:	lsl	r3, r5, #1
   145c8:	lsl	r9, r9, #1
   145cc:	orr	r5, r3, r6, lsr #31
   145d0:	lsl	r3, r6, #1
   145d4:	orr	r6, r3, lr, lsr #31
   145d8:	subs	r3, r1, r6
   145dc:	sbcs	r3, r2, r5
   145e0:	bcc	1460c <__assert_fail@plt+0x2b90>
   145e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145e8:	subs	r3, r9, r0
   145ec:	sbcs	r3, r4, ip
   145f0:	bcc	14640 <__assert_fail@plt+0x2bc4>
   145f4:	ldr	r1, [fp, #-108]	; 0xffffff94
   145f8:	eor	r7, r5, r2
   145fc:	mov	r0, r2
   14600:	eor	r3, r6, r1
   14604:	orrs	r3, r3, r7
   14608:	bne	14640 <__assert_fail@plt+0x2bc4>
   1460c:	subs	r3, r6, r1
   14610:	sbc	r7, r5, r0
   14614:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14618:	subs	r6, r3, #1
   1461c:	sbc	r5, r7, #0
   14620:	subs	r9, r9, r0
   14624:	sbcs	lr, r4, ip
   14628:	mov	r4, #0
   1462c:	movwcc	r4, #1
   14630:	cmp	r4, #0
   14634:	moveq	r6, r3
   14638:	moveq	r5, r7
   1463c:	b	14644 <__assert_fail@plt+0x2bc8>
   14640:	mov	lr, r4
   14644:	subs	r3, r8, #1
   14648:	sbc	r7, sl, #0
   1464c:	orrs	r0, r8, sl
   14650:	bne	145ac <__assert_fail@plt+0x2b30>
   14654:	lsl	r0, r5, #1
   14658:	rsbs	r1, r9, r9, lsl #1
   1465c:	ldr	r3, [fp, #-108]	; 0xffffff94
   14660:	lsl	sl, r9, #1
   14664:	orr	r8, r0, r6, lsr #31
   14668:	lsl	r0, lr, #1
   1466c:	orr	r0, r0, r9, lsr #31
   14670:	str	r8, [fp, #-36]	; 0xffffffdc
   14674:	sbcs	r1, r0, lr
   14678:	mov	r1, #0
   1467c:	movwcc	r1, #1
   14680:	rsbs	r4, r3, #0
   14684:	orr	r1, r1, r6, lsl #1
   14688:	rsc	r7, r2, #0
   1468c:	str	r4, [fp, #-80]	; 0xffffffb0
   14690:	mov	r4, r2
   14694:	subs	r3, r3, r1
   14698:	str	r1, [fp, #-40]	; 0xffffffd8
   1469c:	sbcs	r3, r2, r8
   146a0:	bcc	146e0 <__assert_fail@plt+0x2c64>
   146a4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   146a8:	str	sl, [fp, #-112]	; 0xffffff90
   146ac:	str	r0, [fp, #-96]	; 0xffffffa0
   146b0:	subs	r3, sl, r3
   146b4:	sbcs	r3, r0, ip
   146b8:	bcc	14744 <__assert_fail@plt+0x2cc8>
   146bc:	ldr	r0, [fp, #-108]	; 0xffffff94
   146c0:	ldr	sl, [fp, #-112]	; 0xffffff90
   146c4:	mov	r4, r7
   146c8:	eor	r7, r8, r2
   146cc:	eor	r3, r1, r0
   146d0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   146d4:	orrs	r3, r3, r7
   146d8:	mov	r7, r4
   146dc:	bne	14744 <__assert_fail@plt+0x2cc8>
   146e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   146e4:	subs	r4, r3, #1
   146e8:	sbc	r3, r7, #0
   146ec:	str	r4, [fp, #-84]	; 0xffffffac
   146f0:	mov	r4, #0
   146f4:	str	r3, [fp, #-88]	; 0xffffffa8
   146f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   146fc:	subs	sl, sl, r3
   14700:	sbcs	r0, r0, ip
   14704:	str	sl, [fp, #-112]	; 0xffffff90
   14708:	mov	sl, ip
   1470c:	movwcc	r4, #1
   14710:	str	r0, [fp, #-96]	; 0xffffffa0
   14714:	mov	r0, r3
   14718:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1471c:	cmp	r4, #0
   14720:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14724:	moveq	r3, r7
   14728:	ldr	r7, [fp, #-84]	; 0xffffffac
   1472c:	moveq	r7, r4
   14730:	adds	r1, r7, r1
   14734:	adc	r8, r3, r8
   14738:	str	r1, [fp, #-40]	; 0xffffffd8
   1473c:	str	r8, [fp, #-36]	; 0xffffffdc
   14740:	b	1474c <__assert_fail@plt+0x2cd0>
   14744:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14748:	mov	sl, ip
   1474c:	eor	r0, r0, #1
   14750:	str	r1, [fp, #-56]	; 0xffffffc8
   14754:	str	r1, [sp, #80]	; 0x50
   14758:	str	r1, [fp, #-48]	; 0xffffffd0
   1475c:	str	r8, [fp, #-52]	; 0xffffffcc
   14760:	str	r8, [fp, #-44]	; 0xffffffd4
   14764:	orrs	r0, r0, sl
   14768:	ldreq	r0, [fp, #-108]	; 0xffffff94
   1476c:	orrseq	r0, r0, r2
   14770:	beq	15268 <__assert_fail@plt+0x37ec>
   14774:	add	r0, sp, #96	; 0x60
   14778:	ldr	r1, [fp, #-96]	; 0xffffffa0
   1477c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   14780:	str	r8, [sp, #84]	; 0x54
   14784:	str	r8, [sp, #68]	; 0x44
   14788:	str	r8, [sp, #116]	; 0x74
   1478c:	mov	r8, #1
   14790:	str	lr, [sp, #92]	; 0x5c
   14794:	stm	r0, {r5, r6, r9}
   14798:	ldr	r0, [fp, #8]
   1479c:	mov	r9, r2
   147a0:	str	r1, [sp, #72]	; 0x48
   147a4:	str	r1, [fp, #-96]	; 0xffffffa0
   147a8:	str	r1, [fp, #-104]	; 0xffffff98
   147ac:	add	r0, r0, #1
   147b0:	str	r0, [sp, #52]	; 0x34
   147b4:	ldr	r0, [sp, #80]	; 0x50
   147b8:	str	r0, [sp, #88]	; 0x58
   147bc:	str	r0, [sp, #112]	; 0x70
   147c0:	ldr	r0, [fp, #-112]	; 0xffffff90
   147c4:	str	r0, [sp, #76]	; 0x4c
   147c8:	str	r0, [fp, #-100]	; 0xffffff9c
   147cc:	mov	r0, #1
   147d0:	str	r0, [sp, #108]	; 0x6c
   147d4:	movw	r1, #63974	; 0xf9e6
   147d8:	str	r9, [fp, #-80]	; 0xffffffb0
   147dc:	str	sl, [fp, #-84]	; 0xffffffac
   147e0:	ubfx	r0, r7, #1, #7
   147e4:	mov	r5, r7
   147e8:	movt	r1, #1
   147ec:	str	r5, [fp, #-76]	; 0xffffffb4
   147f0:	ldrb	r0, [r1, r0]
   147f4:	umull	r1, r2, r7, r0
   147f8:	mla	r2, sl, r0, r2
   147fc:	rsbs	r1, r1, #2
   14800:	umull	r1, r3, r1, r0
   14804:	rsc	ip, r2, #0
   14808:	mla	r0, ip, r0, r3
   1480c:	ldr	r3, [fp, #-84]	; 0xffffffac
   14810:	ldr	ip, [sp, #116]	; 0x74
   14814:	umull	r7, r6, r1, r7
   14818:	mla	r3, r1, r3, r6
   1481c:	mla	r3, r0, r5, r3
   14820:	rsbs	r7, r7, #2
   14824:	umull	r2, lr, r1, r7
   14828:	rsc	r3, r3, #0
   1482c:	mla	r1, r1, r3, lr
   14830:	mla	r0, r0, r7, r1
   14834:	umull	r4, sl, r2, r5
   14838:	str	r4, [fp, #-88]	; 0xffffffa8
   1483c:	ldr	r4, [fp, #-84]	; 0xffffffac
   14840:	ldr	r3, [fp, #-88]	; 0xffffffa8
   14844:	mla	sl, r2, r4, sl
   14848:	ldr	r4, [fp, #-84]	; 0xffffffac
   1484c:	mla	r1, r0, r5, sl
   14850:	rsbs	r3, r3, #2
   14854:	ldr	sl, [sp, #112]	; 0x70
   14858:	ldr	r5, [fp, #-100]	; 0xffffff9c
   1485c:	umull	r6, r7, r2, r3
   14860:	rsc	r1, r1, #0
   14864:	mov	lr, r4
   14868:	mla	r1, r2, r1, r7
   1486c:	ldr	r7, [fp, #-112]	; 0xffffff90
   14870:	ldr	r2, [sp, #80]	; 0x50
   14874:	mla	r0, r0, r3, r1
   14878:	ldr	r1, [fp, #-108]	; 0xffffff94
   1487c:	str	r6, [fp, #-88]	; 0xffffffa8
   14880:	ldr	r3, [sp, #68]	; 0x44
   14884:	ldr	r6, [fp, #-104]	; 0xffffff98
   14888:	str	r0, [fp, #-92]	; 0xffffffa4
   1488c:	rsbs	r0, r1, #0
   14890:	str	r0, [sp, #64]	; 0x40
   14894:	rsc	r0, r9, #0
   14898:	mov	r9, r1
   1489c:	str	r0, [sp, #60]	; 0x3c
   148a0:	str	r8, [sp, #56]	; 0x38
   148a4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   148a8:	ldr	r8, [fp, #-76]	; 0xffffffb4
   148ac:	str	r5, [fp, #-100]	; 0xffffff9c
   148b0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   148b4:	str	r2, [sp, #80]	; 0x50
   148b8:	str	r3, [sp, #68]	; 0x44
   148bc:	str	lr, [sp, #36]	; 0x24
   148c0:	str	r7, [sp]
   148c4:	mov	r2, sl
   148c8:	mov	r3, ip
   148cc:	str	r6, [fp, #-104]	; 0xffffff98
   148d0:	mov	r6, lr
   148d4:	str	r0, [sp, #40]	; 0x28
   148d8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   148dc:	str	r8, [sp, #32]
   148e0:	str	r0, [sp, #44]	; 0x2c
   148e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   148e8:	stmib	sp, {r0, sl, ip}
   148ec:	str	r0, [sp, #20]
   148f0:	sub	r0, fp, #72	; 0x48
   148f4:	str	r7, [sp, #16]
   148f8:	str	r9, [sp, #24]
   148fc:	str	r5, [sp, #28]
   14900:	bl	16140 <__assert_fail@plt+0x46c4>
   14904:	ldr	r7, [fp, #8]
   14908:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1490c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14910:	ldr	ip, [sp, #104]	; 0x68
   14914:	adds	lr, r0, r7
   14918:	adcs	sl, r1, #0
   1491c:	adcs	r4, r2, #0
   14920:	ldr	r2, [sp, #100]	; 0x64
   14924:	adc	r7, r3, #0
   14928:	ldr	r3, [sp, #96]	; 0x60
   1492c:	subs	r0, r9, r4
   14930:	sbcs	r0, r5, r7
   14934:	bcc	14958 <__assert_fail@plt+0x2edc>
   14938:	subs	r0, lr, r8
   1493c:	sbcs	r0, sl, r6
   14940:	bcc	14994 <__assert_fail@plt+0x2f18>
   14944:	ldr	r6, [fp, #-84]	; 0xffffffac
   14948:	eor	r0, r4, r9
   1494c:	eor	r1, r7, r5
   14950:	orrs	r0, r0, r1
   14954:	bne	14994 <__assert_fail@plt+0x2f18>
   14958:	ldr	r9, [sp, #64]	; 0x40
   1495c:	ldr	r5, [sp, #60]	; 0x3c
   14960:	subs	r0, r9, #1
   14964:	sbc	r1, r5, #0
   14968:	subs	lr, lr, r8
   1496c:	sbcs	sl, sl, r6
   14970:	mov	r6, r7
   14974:	mov	r7, #0
   14978:	movwcc	r7, #1
   1497c:	cmp	r7, #0
   14980:	moveq	r0, r9
   14984:	moveq	r1, r5
   14988:	adds	r4, r0, r4
   1498c:	adc	r6, r1, r6
   14990:	b	14998 <__assert_fail@plt+0x2f1c>
   14994:	mov	r6, r7
   14998:	ldr	r0, [sp, #88]	; 0x58
   1499c:	ldr	r1, [sp, #76]	; 0x4c
   149a0:	str	r4, [sp, #112]	; 0x70
   149a4:	str	r6, [sp, #116]	; 0x74
   149a8:	str	lr, [fp, #-112]	; 0xffffff90
   149ac:	mov	r5, #0
   149b0:	str	sl, [fp, #-96]	; 0xffffffa0
   149b4:	subs	r7, r0, r4
   149b8:	ldr	r0, [sp, #84]	; 0x54
   149bc:	sbc	r6, r0, r6
   149c0:	subs	r4, r7, #1
   149c4:	sbc	r0, r6, #0
   149c8:	subs	lr, r1, lr
   149cc:	ldr	r1, [sp, #72]	; 0x48
   149d0:	sbcs	r1, r1, sl
   149d4:	movwcc	r5, #1
   149d8:	cmp	r5, #0
   149dc:	moveq	r0, r6
   149e0:	moveq	r4, r7
   149e4:	cmn	r0, #1
   149e8:	ble	14a04 <__assert_fail@plt+0x2f88>
   149ec:	ldr	r6, [fp, #-76]	; 0xffffffb4
   149f0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   149f4:	ldr	sl, [fp, #-108]	; 0xffffff94
   149f8:	ldr	r9, [sp, #108]	; 0x6c
   149fc:	ldr	r8, [fp, #-84]	; 0xffffffac
   14a00:	b	14a30 <__assert_fail@plt+0x2fb4>
   14a04:	ldr	sl, [fp, #-108]	; 0xffffff94
   14a08:	ldr	r5, [fp, #-80]	; 0xffffffb0
   14a0c:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14a10:	ldr	r8, [fp, #-84]	; 0xffffffac
   14a14:	ldr	r9, [sp, #108]	; 0x6c
   14a18:	adds	r7, r4, sl
   14a1c:	adc	r0, r0, r5
   14a20:	adds	lr, lr, r6
   14a24:	adcs	r1, r1, r8
   14a28:	adcs	r4, r7, #0
   14a2c:	adc	r0, r0, #0
   14a30:	ldr	r7, [fp, #-88]	; 0xffffffa8
   14a34:	str	r0, [sp, #12]
   14a38:	sub	r0, fp, #72	; 0x48
   14a3c:	str	r6, [sp, #32]
   14a40:	str	r8, [sp, #36]	; 0x24
   14a44:	str	ip, [sp]
   14a48:	str	r4, [sp, #8]
   14a4c:	str	lr, [sp, #16]
   14a50:	str	r1, [sp, #20]
   14a54:	str	sl, [sp, #24]
   14a58:	str	r5, [sp, #28]
   14a5c:	str	r7, [sp, #40]	; 0x28
   14a60:	ldr	r7, [fp, #-92]	; 0xffffffa4
   14a64:	str	r7, [sp, #44]	; 0x2c
   14a68:	ldr	r7, [sp, #92]	; 0x5c
   14a6c:	str	r7, [sp, #4]
   14a70:	bl	16140 <__assert_fail@plt+0x46c4>
   14a74:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14a78:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14a7c:	and	r7, r9, #31
   14a80:	str	r0, [sp, #104]	; 0x68
   14a84:	str	r1, [sp, #92]	; 0x5c
   14a88:	cmp	r7, #1
   14a8c:	str	r2, [sp, #100]	; 0x64
   14a90:	str	r3, [sp, #96]	; 0x60
   14a94:	bne	14af0 <__assert_fail@plt+0x3074>
   14a98:	stm	sp, {r0, r1}
   14a9c:	add	r0, sp, #12
   14aa0:	str	sl, [sp, #8]
   14aa4:	mov	r4, sl
   14aa8:	stm	r0, {r5, r6, r8}
   14aac:	sub	r0, fp, #64	; 0x40
   14ab0:	bl	16798 <__assert_fail@plt+0x4d1c>
   14ab4:	ldr	r7, [fp, #-112]	; 0xffffff90
   14ab8:	ldr	sl, [sp, #112]	; 0x70
   14abc:	ldr	ip, [sp, #116]	; 0x74
   14ac0:	eor	r0, r0, #1
   14ac4:	orrs	r0, r0, r1
   14ac8:	bne	14c80 <__assert_fail@plt+0x3204>
   14acc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ad0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14ad4:	mov	r2, sl
   14ad8:	mov	r3, ip
   14adc:	orrs	r0, r0, r1
   14ae0:	ldr	r1, [fp, #-96]	; 0xffffffa0
   14ae4:	mov	r0, r7
   14ae8:	beq	14b10 <__assert_fail@plt+0x3094>
   14aec:	b	14c80 <__assert_fail@plt+0x3204>
   14af0:	mov	r4, sl
   14af4:	ldr	r2, [sp, #80]	; 0x50
   14af8:	ldr	r3, [sp, #68]	; 0x44
   14afc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14b00:	ldr	r1, [fp, #-104]	; 0xffffff98
   14b04:	ldr	r7, [fp, #-112]	; 0xffffff90
   14b08:	ldr	sl, [sp, #112]	; 0x70
   14b0c:	ldr	ip, [sp, #116]	; 0x74
   14b10:	ldr	lr, [fp, #-84]	; 0xffffffac
   14b14:	subs	r9, r9, #1
   14b18:	mov	r5, r0
   14b1c:	mov	r6, r1
   14b20:	str	r9, [sp, #108]	; 0x6c
   14b24:	mov	r9, r4
   14b28:	bne	148a4 <__assert_fail@plt+0x2e28>
   14b2c:	ldr	r0, [sp, #56]	; 0x38
   14b30:	ldr	r1, [fp, #-96]	; 0xffffffa0
   14b34:	mov	r2, sl
   14b38:	mov	r3, ip
   14b3c:	mov	r5, r7
   14b40:	str	sl, [sp, #88]	; 0x58
   14b44:	str	ip, [sp, #84]	; 0x54
   14b48:	str	r7, [sp, #76]	; 0x4c
   14b4c:	lsl	r8, r0, #1
   14b50:	cmp	r0, #0
   14b54:	mov	r6, r1
   14b58:	str	r0, [sp, #108]	; 0x6c
   14b5c:	str	r1, [sp, #72]	; 0x48
   14b60:	beq	148a0 <__assert_fail@plt+0x2e24>
   14b64:	ldr	r6, [fp, #-96]	; 0xffffffa0
   14b68:	mov	r2, sl
   14b6c:	mov	sl, r0
   14b70:	mov	r3, ip
   14b74:	mov	r5, r7
   14b78:	str	r8, [fp, #-100]	; 0xffffff9c
   14b7c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14b80:	ldr	r8, [fp, #-76]	; 0xffffffb4
   14b84:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b88:	str	lr, [sp, #36]	; 0x24
   14b8c:	str	r0, [sp, #40]	; 0x28
   14b90:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14b94:	str	r8, [sp, #32]
   14b98:	str	r0, [sp, #44]	; 0x2c
   14b9c:	add	r0, sp, #8
   14ba0:	stm	sp, {r5, r6}
   14ba4:	stm	r0, {r2, r3, r5, r6, r9}
   14ba8:	sub	r0, fp, #72	; 0x48
   14bac:	str	r4, [sp, #28]
   14bb0:	bl	16140 <__assert_fail@plt+0x46c4>
   14bb4:	ldr	r7, [fp, #8]
   14bb8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14bbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14bc0:	ldr	lr, [fp, #-84]	; 0xffffffac
   14bc4:	adds	r5, r0, r7
   14bc8:	adcs	r6, r1, #0
   14bcc:	adcs	r2, r2, #0
   14bd0:	adc	r3, r3, #0
   14bd4:	subs	r0, r9, r2
   14bd8:	sbcs	r0, r4, r3
   14bdc:	bcc	14c04 <__assert_fail@plt+0x3188>
   14be0:	subs	r0, r5, r8
   14be4:	sbcs	r0, r6, lr
   14be8:	bcc	14c38 <__assert_fail@plt+0x31bc>
   14bec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14bf0:	ldr	r8, [fp, #-76]	; 0xffffffb4
   14bf4:	eor	r0, r2, r9
   14bf8:	eor	r1, r3, r1
   14bfc:	orrs	r0, r0, r1
   14c00:	bne	14c38 <__assert_fail@plt+0x31bc>
   14c04:	ldr	ip, [sp, #64]	; 0x40
   14c08:	ldr	r7, [sp, #60]	; 0x3c
   14c0c:	mov	r4, #0
   14c10:	subs	r0, ip, #1
   14c14:	sbc	r1, r7, #0
   14c18:	subs	r5, r5, r8
   14c1c:	sbcs	r6, r6, lr
   14c20:	movwcc	r4, #1
   14c24:	cmp	r4, #0
   14c28:	moveq	r0, ip
   14c2c:	moveq	r1, r7
   14c30:	adds	r2, r0, r2
   14c34:	adc	r3, r1, r3
   14c38:	subs	sl, sl, #1
   14c3c:	bne	14b7c <__assert_fail@plt+0x3100>
   14c40:	ldr	r0, [sp, #112]	; 0x70
   14c44:	ldr	r8, [fp, #-100]	; 0xffffff9c
   14c48:	mov	sl, r2
   14c4c:	mov	ip, r3
   14c50:	mov	r7, r5
   14c54:	str	r0, [sp, #88]	; 0x58
   14c58:	ldr	r0, [sp, #116]	; 0x74
   14c5c:	str	r0, [sp, #84]	; 0x54
   14c60:	ldr	r0, [sp, #56]	; 0x38
   14c64:	str	r0, [sp, #108]	; 0x6c
   14c68:	ldr	r0, [fp, #-112]	; 0xffffff90
   14c6c:	str	r0, [sp, #76]	; 0x4c
   14c70:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14c74:	str	r6, [fp, #-96]	; 0xffffffa0
   14c78:	str	r0, [sp, #72]	; 0x48
   14c7c:	b	148a0 <__assert_fail@plt+0x2e24>
   14c80:	ldr	r0, [sp, #88]	; 0x58
   14c84:	ldr	r2, [sp, #80]	; 0x50
   14c88:	ldr	r3, [sp, #68]	; 0x44
   14c8c:	str	sl, [fp, #-40]	; 0xffffffd8
   14c90:	str	ip, [fp, #-36]	; 0xffffffdc
   14c94:	str	r0, [fp, #-48]	; 0xffffffd0
   14c98:	ldr	r0, [sp, #84]	; 0x54
   14c9c:	str	r2, [fp, #-56]	; 0xffffffc8
   14ca0:	str	r3, [fp, #-52]	; 0xffffffcc
   14ca4:	str	r0, [fp, #-44]	; 0xffffffd4
   14ca8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14cac:	ldr	r4, [fp, #-84]	; 0xffffffac
   14cb0:	ldr	r8, [fp, #-76]	; 0xffffffb4
   14cb4:	ldr	r1, [fp, #-104]	; 0xffffff98
   14cb8:	ldr	r5, [fp, #-108]	; 0xffffff94
   14cbc:	ldr	r6, [fp, #-80]	; 0xffffffb0
   14cc0:	str	r0, [sp, #40]	; 0x28
   14cc4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14cc8:	str	r8, [sp, #32]
   14ccc:	str	r4, [sp, #36]	; 0x24
   14cd0:	mov	sl, r4
   14cd4:	str	r0, [sp, #44]	; 0x2c
   14cd8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14cdc:	str	r0, [sp]
   14ce0:	stmib	sp, {r1, r2, r3}
   14ce4:	str	r0, [sp, #16]
   14ce8:	sub	r0, fp, #72	; 0x48
   14cec:	str	r1, [sp, #20]
   14cf0:	str	r5, [sp, #24]
   14cf4:	str	r6, [sp, #28]
   14cf8:	bl	16140 <__assert_fail@plt+0x46c4>
   14cfc:	ldr	r7, [fp, #8]
   14d00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14d04:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14d08:	adds	ip, r0, r7
   14d0c:	adcs	lr, r1, #0
   14d10:	adcs	r4, r2, #0
   14d14:	adc	r3, r3, #0
   14d18:	subs	r0, r5, r4
   14d1c:	sbcs	r0, r6, r3
   14d20:	bcc	14d48 <__assert_fail@plt+0x32cc>
   14d24:	subs	r0, ip, r8
   14d28:	sbcs	r0, lr, sl
   14d2c:	bcc	14d7c <__assert_fail@plt+0x3300>
   14d30:	ldr	r0, [fp, #-108]	; 0xffffff94
   14d34:	ldr	r8, [fp, #-76]	; 0xffffffb4
   14d38:	eor	r1, r3, r6
   14d3c:	eor	r0, r4, r0
   14d40:	orrs	r0, r0, r1
   14d44:	bne	14d7c <__assert_fail@plt+0x3300>
   14d48:	ldr	r5, [sp, #64]	; 0x40
   14d4c:	ldr	r6, [sp, #60]	; 0x3c
   14d50:	mov	r2, #0
   14d54:	subs	r0, r5, #1
   14d58:	sbc	r1, r6, #0
   14d5c:	subs	ip, ip, r8
   14d60:	sbcs	lr, lr, sl
   14d64:	movwcc	r2, #1
   14d68:	cmp	r2, #0
   14d6c:	moveq	r0, r5
   14d70:	moveq	r1, r6
   14d74:	adds	r4, r0, r4
   14d78:	adc	r3, r1, r3
   14d7c:	ldr	r0, [sp, #88]	; 0x58
   14d80:	ldr	r1, [sp, #72]	; 0x48
   14d84:	mov	r8, r3
   14d88:	mov	r5, #0
   14d8c:	str	ip, [fp, #-100]	; 0xffffff9c
   14d90:	str	lr, [fp, #-104]	; 0xffffff98
   14d94:	subs	r7, r0, r4
   14d98:	ldr	r0, [sp, #84]	; 0x54
   14d9c:	sbc	r6, r0, r3
   14da0:	ldr	r0, [sp, #76]	; 0x4c
   14da4:	subs	r2, r7, #1
   14da8:	sbc	r3, r6, #0
   14dac:	subs	r0, r0, ip
   14db0:	sbcs	r1, r1, lr
   14db4:	movwcc	r5, #1
   14db8:	cmp	r5, #0
   14dbc:	moveq	r3, r6
   14dc0:	moveq	r2, r7
   14dc4:	cmn	r3, #1
   14dc8:	ble	14ddc <__assert_fail@plt+0x3360>
   14dcc:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14dd0:	ldr	r7, [fp, #-80]	; 0xffffffb0
   14dd4:	ldr	r6, [fp, #-108]	; 0xffffff94
   14dd8:	b	14e00 <__assert_fail@plt+0x3384>
   14ddc:	ldr	r6, [fp, #-108]	; 0xffffff94
   14de0:	ldr	r7, [fp, #-80]	; 0xffffffb0
   14de4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14de8:	adds	r2, r2, r6
   14dec:	adc	r3, r3, r7
   14df0:	adds	r0, r0, r5
   14df4:	adcs	r1, r1, sl
   14df8:	adcs	r2, r2, #0
   14dfc:	adc	r3, r3, #0
   14e00:	stm	sp, {r0, r1, r6, r7}
   14e04:	sub	r0, fp, #64	; 0x40
   14e08:	str	r5, [sp, #16]
   14e0c:	str	sl, [sp, #20]
   14e10:	bl	16798 <__assert_fail@plt+0x4d1c>
   14e14:	ldr	sl, [fp, #-64]	; 0xffffffc0
   14e18:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14e1c:	mov	r7, r0
   14e20:	eor	r0, r0, #1
   14e24:	mov	r5, r1
   14e28:	mov	r3, r8
   14e2c:	mov	r2, r4
   14e30:	orrs	r0, r0, r1
   14e34:	orrseq	r0, sl, r6
   14e38:	beq	14ca8 <__assert_fail@plt+0x322c>
   14e3c:	orrs	r0, sl, r6
   14e40:	str	r2, [fp, #-56]	; 0xffffffc8
   14e44:	str	r3, [fp, #-52]	; 0xffffffcc
   14e48:	bne	150ac <__assert_fail@plt+0x3630>
   14e4c:	movw	r1, #63974	; 0xf9e6
   14e50:	str	r2, [sp, #80]	; 0x50
   14e54:	ubfx	r0, r7, #1, #7
   14e58:	ldr	r9, [fp, #-76]	; 0xffffffb4
   14e5c:	movt	r1, #1
   14e60:	ldrb	r0, [r1, r0]
   14e64:	umull	r1, r2, r7, r0
   14e68:	mla	r2, r5, r0, r2
   14e6c:	rsbs	r1, r1, #2
   14e70:	umull	r1, r3, r1, r0
   14e74:	rsc	r2, r2, #0
   14e78:	mla	lr, r2, r0, r3
   14e7c:	umull	r2, r3, r1, r7
   14e80:	mla	r3, r1, r5, r3
   14e84:	mla	r3, lr, r7, r3
   14e88:	rsbs	r6, r2, #2
   14e8c:	rsc	r0, r3, #0
   14e90:	str	r0, [fp, #-92]	; 0xffffffa4
   14e94:	umull	r2, r0, r1, r6
   14e98:	umull	r3, sl, r2, r7
   14e9c:	str	r0, [sp, #64]	; 0x40
   14ea0:	mla	sl, r2, r5, sl
   14ea4:	rsbs	r3, r3, #2
   14ea8:	umull	r0, r4, r2, r3
   14eac:	str	r4, [sp, #68]	; 0x44
   14eb0:	umull	r4, ip, r0, r9
   14eb4:	str	r0, [sp, #60]	; 0x3c
   14eb8:	str	r4, [fp, #-88]	; 0xffffffa8
   14ebc:	ldr	r4, [fp, #-84]	; 0xffffffac
   14ec0:	mla	ip, r0, r4, ip
   14ec4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14ec8:	ldr	r4, [sp, #64]	; 0x40
   14ecc:	mla	r1, r1, r0, r4
   14ed0:	ldr	r4, [fp, #-108]	; 0xffffff94
   14ed4:	mla	r1, lr, r6, r1
   14ed8:	ldr	r6, [sp, #68]	; 0x44
   14edc:	mla	r0, r1, r7, sl
   14ee0:	rsc	r0, r0, #0
   14ee4:	mla	r0, r2, r0, r6
   14ee8:	mov	r6, #0
   14eec:	mla	lr, r1, r3, r0
   14ef0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14ef4:	mov	r1, r5
   14ef8:	subs	r0, r4, r7
   14efc:	mov	r5, #0
   14f00:	mla	sl, lr, r9, ip
   14f04:	sbcs	r0, r3, r1
   14f08:	bcc	14f68 <__assert_fail@plt+0x34ec>
   14f0c:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14f10:	mov	ip, r3
   14f14:	umull	r0, r2, r5, r1
   14f18:	umull	r3, r6, r5, r7
   14f1c:	umlal	r0, r2, sl, r7
   14f20:	adds	r0, r0, r6
   14f24:	umull	r3, r6, sl, r7
   14f28:	adc	r2, r2, #0
   14f2c:	subs	r0, r0, r3
   14f30:	sbcs	r0, r2, r6
   14f34:	umull	r3, r6, sl, r1
   14f38:	mov	r0, #0
   14f3c:	movwcc	r0, #1
   14f40:	cmp	r0, #0
   14f44:	addne	r6, r6, #1
   14f48:	subs	r0, r4, r2
   14f4c:	ldr	r4, [sp, #60]	; 0x3c
   14f50:	sbc	r2, ip, #0
   14f54:	subs	r0, r0, r3
   14f58:	sbc	r2, r2, r6
   14f5c:	umull	r5, r3, r0, r4
   14f60:	mla	r0, r0, lr, r3
   14f64:	mla	r6, r2, r4, r0
   14f68:	mov	r0, r7
   14f6c:	mov	r4, r1
   14f70:	bl	1536c <__assert_fail@plt+0x38f0>
   14f74:	ldr	r9, [fp, #-112]	; 0xffffff90
   14f78:	cmp	r0, #0
   14f7c:	beq	14f9c <__assert_fail@plt+0x3520>
   14f80:	mov	r0, #1
   14f84:	mov	r2, r7
   14f88:	mov	r3, r4
   14f8c:	str	r0, [sp]
   14f90:	ldr	r0, [fp, #12]
   14f94:	bl	15270 <__assert_fail@plt+0x37f4>
   14f98:	b	14fb0 <__assert_fail@plt+0x3534>
   14f9c:	ldr	r2, [sp, #52]	; 0x34
   14fa0:	ldr	r3, [fp, #12]
   14fa4:	mov	r0, r7
   14fa8:	mov	r1, r4
   14fac:	bl	13cf4 <__assert_fail@plt+0x2278>
   14fb0:	ldr	r4, [fp, #-96]	; 0xffffffa0
   14fb4:	mov	r7, r6
   14fb8:	orrs	r0, r5, r6
   14fbc:	ldr	r6, [sp, #116]	; 0x74
   14fc0:	beq	15220 <__assert_fail@plt+0x37a4>
   14fc4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fc8:	mov	r0, r5
   14fcc:	mov	r1, r7
   14fd0:	mov	r3, sl
   14fd4:	bl	13250 <__assert_fail@plt+0x17d4>
   14fd8:	cmp	r0, #0
   14fdc:	bne	151b4 <__assert_fail@plt+0x3738>
   14fe0:	str	r9, [sp]
   14fe4:	stmib	sp, {r4, r5, r7}
   14fe8:	mov	r9, r7
   14fec:	ldr	r7, [fp, #-88]	; 0xffffffa8
   14ff0:	ldr	r2, [sp, #112]	; 0x70
   14ff4:	sub	r0, fp, #40	; 0x28
   14ff8:	mov	r3, r6
   14ffc:	str	sl, [sp, #20]
   15000:	str	r7, [sp, #16]
   15004:	bl	1699c <__assert_fail@plt+0x4f20>
   15008:	str	r0, [fp, #-112]	; 0xffffff90
   1500c:	ldr	r0, [sp, #76]	; 0x4c
   15010:	ldr	r2, [sp, #88]	; 0x58
   15014:	ldr	r3, [sp, #84]	; 0x54
   15018:	str	r1, [fp, #-96]	; 0xffffffa0
   1501c:	str	r0, [sp]
   15020:	ldr	r0, [sp, #72]	; 0x48
   15024:	stmib	sp, {r0, r5, r9}
   15028:	sub	r0, fp, #48	; 0x30
   1502c:	str	r7, [sp, #16]
   15030:	str	sl, [sp, #20]
   15034:	bl	1699c <__assert_fail@plt+0x4f20>
   15038:	str	r0, [sp, #76]	; 0x4c
   1503c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15040:	ldr	r2, [sp, #80]	; 0x50
   15044:	mov	r3, r8
   15048:	str	r1, [sp, #72]	; 0x48
   1504c:	str	r0, [sp]
   15050:	ldr	r0, [fp, #-104]	; 0xffffff98
   15054:	stmib	sp, {r0, r5, r9}
   15058:	sub	r0, fp, #56	; 0x38
   1505c:	str	r7, [sp, #16]
   15060:	str	sl, [sp, #20]
   15064:	bl	1699c <__assert_fail@plt+0x4f20>
   15068:	str	r0, [fp, #-100]	; 0xffffff9c
   1506c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15070:	ldr	r8, [sp, #56]	; 0x38
   15074:	str	r1, [fp, #-104]	; 0xffffff98
   15078:	str	r5, [fp, #-108]	; 0xffffff94
   1507c:	str	r0, [sp, #80]	; 0x50
   15080:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15084:	str	r0, [sp, #68]	; 0x44
   15088:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1508c:	str	r0, [sp, #88]	; 0x58
   15090:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15094:	str	r0, [sp, #84]	; 0x54
   15098:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1509c:	str	r0, [sp, #112]	; 0x70
   150a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   150a4:	str	r0, [sp, #116]	; 0x74
   150a8:	b	147d4 <__assert_fail@plt+0x2d58>
   150ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   150b0:	ldr	r1, [fp, #-84]	; 0xffffffac
   150b4:	ldr	r2, [fp, #-108]	; 0xffffff94
   150b8:	eor	r0, r0, r7
   150bc:	eor	r1, r1, r5
   150c0:	orrs	r0, r0, r1
   150c4:	ldreq	r1, [fp, #-80]	; 0xffffffb0
   150c8:	eoreq	r0, r2, sl
   150cc:	eoreq	r1, r1, r6
   150d0:	orrseq	r0, r0, r1
   150d4:	beq	151d0 <__assert_fail@plt+0x3754>
   150d8:	movw	r1, #63974	; 0xf9e6
   150dc:	ubfx	r0, r7, #1, #7
   150e0:	ldr	r9, [fp, #-84]	; 0xffffffac
   150e4:	movt	r1, #1
   150e8:	ldrb	r0, [r1, r0]
   150ec:	umull	r1, r2, r7, r0
   150f0:	mla	r2, r5, r0, r2
   150f4:	rsbs	r1, r1, #2
   150f8:	umull	r1, r3, r1, r0
   150fc:	rsc	r2, r2, #0
   15100:	mla	r8, r2, r0, r3
   15104:	umull	r2, r3, r1, r7
   15108:	mla	r3, r1, r5, r3
   1510c:	mla	r3, r8, r7, r3
   15110:	rsbs	lr, r2, #2
   15114:	rsc	r0, r3, #0
   15118:	str	r0, [fp, #-80]	; 0xffffffb0
   1511c:	umull	r2, r0, r1, lr
   15120:	str	r0, [fp, #-96]	; 0xffffffa0
   15124:	umull	r3, r0, r2, r7
   15128:	rsbs	r3, r3, #2
   1512c:	str	r0, [fp, #-100]	; 0xffffff9c
   15130:	umull	r4, r0, r2, r3
   15134:	str	r0, [fp, #-92]	; 0xffffffa4
   15138:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1513c:	umull	r0, ip, r4, r0
   15140:	mla	ip, r4, r9, ip
   15144:	ldr	r4, [fp, #-96]	; 0xffffffa0
   15148:	str	r0, [fp, #-88]	; 0xffffffa8
   1514c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15150:	mla	r9, r2, r5, r0
   15154:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15158:	mla	r1, r1, r0, r4
   1515c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   15160:	mla	r0, r8, lr, r1
   15164:	mla	r1, r0, r7, r9
   15168:	rsc	r1, r1, #0
   1516c:	mla	r1, r2, r1, r4
   15170:	mov	r2, r7
   15174:	mla	r0, r0, r3, r1
   15178:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1517c:	mov	r3, r5
   15180:	mla	r4, r0, r1, ip
   15184:	mov	r0, sl
   15188:	mov	r1, r6
   1518c:	bl	13250 <__assert_fail@plt+0x17d4>
   15190:	cmp	r0, #0
   15194:	beq	151f8 <__assert_fail@plt+0x377c>
   15198:	ldr	r0, [fp, #12]
   1519c:	mov	r2, sl
   151a0:	mov	r3, r6
   151a4:	str	r7, [sp]
   151a8:	str	r5, [sp, #4]
   151ac:	bl	13c78 <__assert_fail@plt+0x21fc>
   151b0:	b	1521c <__assert_fail@plt+0x37a0>
   151b4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   151b8:	mov	r2, r5
   151bc:	mov	r3, r7
   151c0:	stm	sp, {r0, sl}
   151c4:	ldr	r0, [fp, #12]
   151c8:	bl	13c78 <__assert_fail@plt+0x21fc>
   151cc:	b	15268 <__assert_fail@plt+0x37ec>
   151d0:	ldr	r0, [sp, #52]	; 0x34
   151d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   151d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   151dc:	str	r0, [sp]
   151e0:	ldr	r0, [fp, #12]
   151e4:	str	r0, [sp, #4]
   151e8:	mov	r0, r2
   151ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   151f0:	bl	14558 <__assert_fail@plt+0x2adc>
   151f4:	b	15268 <__assert_fail@plt+0x37ec>
   151f8:	ldr	r0, [sp, #52]	; 0x34
   151fc:	mov	r1, r6
   15200:	mov	r2, r7
   15204:	mov	r3, r5
   15208:	str	r0, [sp]
   1520c:	ldr	r0, [fp, #12]
   15210:	str	r0, [sp, #4]
   15214:	mov	r0, sl
   15218:	bl	14558 <__assert_fail@plt+0x2adc>
   1521c:	mov	sl, r4
   15220:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15224:	ldr	r4, [fp, #8]
   15228:	mov	r1, sl
   1522c:	bl	1536c <__assert_fail@plt+0x38f0>
   15230:	cmp	r0, #0
   15234:	beq	15254 <__assert_fail@plt+0x37d8>
   15238:	mov	r0, #1
   1523c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15240:	mov	r3, sl
   15244:	str	r0, [sp]
   15248:	ldr	r0, [fp, #12]
   1524c:	bl	15270 <__assert_fail@plt+0x37f4>
   15250:	b	15268 <__assert_fail@plt+0x37ec>
   15254:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15258:	ldr	r3, [fp, #12]
   1525c:	mov	r1, sl
   15260:	mov	r2, r4
   15264:	bl	13cf4 <__assert_fail@plt+0x2278>
   15268:	sub	sp, fp, #28
   1526c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15270:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15274:	add	fp, sp, #24
   15278:	ldrb	r8, [r0, #250]	; 0xfa
   1527c:	ldr	ip, [fp, #8]
   15280:	mov	r1, r3
   15284:	mov	r4, r2
   15288:	sub	lr, r8, #1
   1528c:	cmp	r8, #0
   15290:	beq	15348 <__assert_fail@plt+0x38cc>
   15294:	mov	r2, #8
   15298:	add	r3, r8, #223	; 0xdf
   1529c:	add	r5, r2, r8, lsl #3
   152a0:	mov	r7, r0
   152a4:	ldr	r2, [r7, r5]!
   152a8:	ldr	r7, [r7, #4]
   152ac:	subs	r6, r4, r2
   152b0:	sbcs	r6, r1, r7
   152b4:	bcs	152d8 <__assert_fail@plt+0x385c>
   152b8:	sub	r2, r3, #1
   152bc:	sub	r3, r3, #224	; 0xe0
   152c0:	sub	r5, r5, #8
   152c4:	cmp	r3, #0
   152c8:	mov	r3, r2
   152cc:	bgt	152a0 <__assert_fail@plt+0x3824>
   152d0:	sub	r3, r2, #224	; 0xe0
   152d4:	b	152fc <__assert_fail@plt+0x3880>
   152d8:	eor	r2, r2, r4
   152dc:	eor	r5, r7, r1
   152e0:	orrs	r2, r2, r5
   152e4:	bne	152f8 <__assert_fail@plt+0x387c>
   152e8:	ldrb	r1, [r0, r3]
   152ec:	add	r1, r1, ip
   152f0:	strb	r1, [r0, r3]
   152f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152f8:	sub	r3, r3, #224	; 0xe0
   152fc:	cmp	lr, r3
   15300:	ble	15344 <__assert_fail@plt+0x38c8>
   15304:	lsl	r5, r8, #3
   15308:	add	r2, r8, #223	; 0xdf
   1530c:	add	r7, r0, r5
   15310:	sub	r5, r5, #8
   15314:	ldr	r6, [r7, #8]
   15318:	ldr	r9, [r7, #12]
   1531c:	str	r6, [r7, #16]
   15320:	str	r9, [r7, #20]
   15324:	mov	r7, r0
   15328:	ldrb	r6, [r7, r2]!
   1532c:	strb	r6, [r7, #1]
   15330:	sub	r7, r2, #1
   15334:	sub	r2, r2, #225	; 0xe1
   15338:	cmp	r2, r3
   1533c:	mov	r2, r7
   15340:	bgt	1530c <__assert_fail@plt+0x3890>
   15344:	mov	lr, r3
   15348:	add	r2, lr, #1
   1534c:	add	r3, r0, r2, lsl #3
   15350:	str	r4, [r3, #16]
   15354:	str	r1, [r3, #20]
   15358:	add	r1, r0, r2
   1535c:	strb	ip, [r1, #224]	; 0xe0
   15360:	add	r1, r8, #1
   15364:	strb	r1, [r0, #250]	; 0xfa
   15368:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1536c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15370:	add	fp, sp, #28
   15374:	sub	sp, sp, #356	; 0x164
   15378:	subs	r2, r0, #2
   1537c:	mov	r5, #0
   15380:	sbcs	r2, r1, #0
   15384:	bcc	15814 <__assert_fail@plt+0x3d98>
   15388:	movw	r2, #60793	; 0xed79
   1538c:	mov	r5, #1
   15390:	movt	r2, #381	; 0x17d
   15394:	subs	r2, r0, r2
   15398:	sbcs	r2, r1, #0
   1539c:	bcc	15814 <__assert_fail@plt+0x3d98>
   153a0:	subs	r2, r0, #1
   153a4:	mov	r7, #0
   153a8:	sbc	r3, r1, #0
   153ac:	tst	r2, #1
   153b0:	mov	r6, r2
   153b4:	str	r2, [sp, #76]	; 0x4c
   153b8:	str	r3, [sp, #72]	; 0x48
   153bc:	bne	153e4 <__assert_fail@plt+0x3968>
   153c0:	ldr	r2, [sp, #76]	; 0x4c
   153c4:	ldr	r3, [sp, #72]	; 0x48
   153c8:	mov	r7, #0
   153cc:	lsrs	r3, r3, #1
   153d0:	rrx	r6, r2
   153d4:	tst	r2, #2
   153d8:	add	r7, r7, #1
   153dc:	mov	r2, r6
   153e0:	beq	153cc <__assert_fail@plt+0x3950>
   153e4:	movw	r2, #63974	; 0xf9e6
   153e8:	str	r6, [sp, #48]	; 0x30
   153ec:	str	r3, [sp, #52]	; 0x34
   153f0:	str	r7, [sp, #56]	; 0x38
   153f4:	ubfx	r3, r0, #1, #7
   153f8:	mov	r5, r0
   153fc:	str	r1, [sp, #92]	; 0x5c
   15400:	movt	r2, #1
   15404:	ldrb	r4, [r2, r3]
   15408:	umull	r3, r2, r4, r0
   1540c:	mla	r2, r4, r1, r2
   15410:	ldr	r1, [sp, #92]	; 0x5c
   15414:	rsbs	r3, r3, #2
   15418:	umull	r3, r7, r3, r4
   1541c:	rsc	lr, r2, #0
   15420:	umull	r0, r6, r3, r0
   15424:	rsbs	r9, r0, #2
   15428:	umull	r0, r8, r3, r9
   1542c:	umull	ip, r2, r0, r5
   15430:	mla	r2, r0, r1, r2
   15434:	mla	r1, lr, r4, r7
   15438:	ldr	r7, [sp, #92]	; 0x5c
   1543c:	mla	r7, r3, r7, r6
   15440:	ldr	r6, [sp, #92]	; 0x5c
   15444:	mla	r7, r1, r5, r7
   15448:	rsc	r7, r7, #0
   1544c:	mla	r3, r3, r7, r8
   15450:	mla	r1, r1, r9, r3
   15454:	mla	r3, r1, r5, r2
   15458:	rsbs	r2, ip, #2
   1545c:	rsc	r3, r3, #0
   15460:	subs	r7, r5, #2
   15464:	sbcs	r7, r6, #0
   15468:	bcc	15848 <__assert_fail@plt+0x3dcc>
   1546c:	umull	r4, r7, r0, r2
   15470:	mov	ip, #0
   15474:	str	r5, [sp, #88]	; 0x58
   15478:	mov	lr, #0
   1547c:	mov	r9, #0
   15480:	mov	sl, #0
   15484:	mla	r0, r0, r3, r7
   15488:	mov	r3, r5
   1548c:	mov	r5, r6
   15490:	mov	r7, #0
   15494:	mla	r0, r1, r2, r0
   15498:	mov	r2, #1
   1549c:	mvn	r1, #63	; 0x3f
   154a0:	str	r4, [sp, #84]	; 0x54
   154a4:	str	r0, [sp, #80]	; 0x50
   154a8:	lsrs	r6, lr, #1
   154ac:	rrx	ip, ip
   154b0:	lsrs	r5, r5, #1
   154b4:	orr	lr, r6, r3, lsl #31
   154b8:	rrx	r3, r3
   154bc:	subs	r6, r3, r2
   154c0:	sbcs	r6, r5, r7
   154c4:	bcc	154e4 <__assert_fail@plt+0x3a68>
   154c8:	eor	r6, r2, r3
   154cc:	eor	r0, r7, r5
   154d0:	orrs	r0, r6, r0
   154d4:	bne	15510 <__assert_fail@plt+0x3a94>
   154d8:	subs	r0, r9, ip
   154dc:	sbcs	r0, sl, lr
   154e0:	bcc	15510 <__assert_fail@plt+0x3a94>
   154e4:	subs	r0, r2, r3
   154e8:	mov	r4, #0
   154ec:	sbc	r6, r7, r5
   154f0:	subs	r2, r0, #1
   154f4:	sbc	r7, r6, #0
   154f8:	subs	r9, r9, ip
   154fc:	sbcs	sl, sl, lr
   15500:	movwcc	r4, #1
   15504:	cmp	r4, #0
   15508:	moveq	r2, r0
   1550c:	moveq	r7, r6
   15510:	adds	r1, r1, #1
   15514:	bcc	154a8 <__assert_fail@plt+0x3a2c>
   15518:	ldr	r0, [sp, #48]	; 0x30
   1551c:	ldr	r1, [sp, #92]	; 0x5c
   15520:	str	r9, [sp, #24]
   15524:	str	sl, [sp, #28]
   15528:	mov	r5, #0
   1552c:	str	r0, [sp, #8]
   15530:	ldr	r0, [sp, #88]	; 0x58
   15534:	subs	r3, r0, r9
   15538:	sbc	r2, r1, sl
   1553c:	subs	r7, r9, r3
   15540:	sbcs	r3, sl, r2
   15544:	ldr	r2, [sp, #52]	; 0x34
   15548:	str	r2, [sp, #12]
   1554c:	ldr	r2, [sp, #56]	; 0x38
   15550:	str	r2, [sp, #16]
   15554:	mov	r2, #0
   15558:	movwcc	r2, #1
   1555c:	adds	r4, r7, r0
   15560:	adc	r8, r3, r1
   15564:	cmp	r2, #0
   15568:	ldr	r2, [sp, #84]	; 0x54
   1556c:	moveq	r8, r3
   15570:	ldr	r3, [sp, #80]	; 0x50
   15574:	moveq	r4, r7
   15578:	str	r8, [sp, #4]
   1557c:	str	r4, [sp]
   15580:	bl	15d7c <__assert_fail@plt+0x4300>
   15584:	cmp	r0, #0
   15588:	beq	15814 <__assert_fail@plt+0x3d98>
   1558c:	ldr	r2, [sp, #76]	; 0x4c
   15590:	ldr	r3, [sp, #72]	; 0x48
   15594:	mov	r0, #0
   15598:	add	r5, sp, #96	; 0x60
   1559c:	mov	r1, #0
   155a0:	str	r0, [sp, #64]	; 0x40
   155a4:	mov	r0, #0
   155a8:	str	r5, [sp]
   155ac:	bl	127e4 <__assert_fail@plt+0xd68>
   155b0:	add	r0, r5, #16
   155b4:	ldrb	r5, [sp, #346]	; 0x15a
   155b8:	str	r0, [sp, #44]	; 0x2c
   155bc:	mov	r0, #2
   155c0:	str	r0, [sp, #60]	; 0x3c
   155c4:	mov	r0, #0
   155c8:	str	r0, [sp, #68]	; 0x44
   155cc:	cmp	r5, #0
   155d0:	beq	15808 <__assert_fail@plt+0x3d8c>
   155d4:	ldr	r7, [sp, #44]	; 0x2c
   155d8:	mov	r6, #1
   155dc:	ldrd	r2, [r7]
   155e0:	ldr	r0, [sp, #76]	; 0x4c
   155e4:	ldr	r1, [sp, #72]	; 0x48
   155e8:	bl	1c18c <__assert_fail@plt+0xa710>
   155ec:	mov	r2, r0
   155f0:	ldr	r0, [sp, #88]	; 0x58
   155f4:	mov	r3, r1
   155f8:	add	r1, sp, #12
   155fc:	str	r0, [sp]
   15600:	ldr	r0, [sp, #92]	; 0x5c
   15604:	str	r0, [sp, #4]
   15608:	ldr	r0, [sp, #84]	; 0x54
   1560c:	str	r0, [sp, #8]
   15610:	ldr	r0, [sp, #80]	; 0x50
   15614:	stm	r1, {r0, r9, sl}
   15618:	mov	r0, r4
   1561c:	mov	r1, r8
   15620:	bl	15f1c <__assert_fail@plt+0x44a0>
   15624:	eor	r1, r1, sl
   15628:	eor	r0, r0, r9
   1562c:	orrs	r0, r0, r1
   15630:	beq	15648 <__assert_fail@plt+0x3bcc>
   15634:	add	r1, r6, #1
   15638:	cmp	r6, r5
   1563c:	add	r7, r7, #8
   15640:	mov	r6, r1
   15644:	bcc	155dc <__assert_fail@plt+0x3b60>
   15648:	cmp	r0, #0
   1564c:	bne	15808 <__assert_fail@plt+0x3d8c>
   15650:	ldr	r1, [sp, #68]	; 0x44
   15654:	movw	r0, #62624	; 0xf4a0
   15658:	ldr	r7, [sp, #60]	; 0x3c
   1565c:	ldr	r3, [sp, #64]	; 0x40
   15660:	movt	r0, #1
   15664:	ldrb	r0, [r0, r1]
   15668:	adds	r7, r7, r0
   1566c:	adc	r3, r3, #0
   15670:	umull	r4, r2, r7, r9
   15674:	str	r7, [sp, #60]	; 0x3c
   15678:	umull	r0, r1, r3, r9
   1567c:	str	r3, [sp, #64]	; 0x40
   15680:	umlal	r0, r1, r7, sl
   15684:	adds	r8, r0, r2
   15688:	adc	r0, r1, #0
   1568c:	umull	r1, r2, r7, sl
   15690:	subs	r1, r8, r1
   15694:	sbcs	r1, r0, r2
   15698:	umull	r2, r3, r3, sl
   1569c:	mov	r1, #0
   156a0:	movwcc	r1, #1
   156a4:	cmp	r1, #0
   156a8:	addne	r3, r3, #1
   156ac:	adds	r0, r2, r0
   156b0:	adc	r1, r3, #0
   156b4:	orrs	r2, r0, r1
   156b8:	bne	15740 <__assert_fail@plt+0x3cc4>
   156bc:	ldr	r7, [sp, #88]	; 0x58
   156c0:	ldr	r6, [sp, #92]	; 0x5c
   156c4:	mov	r0, r4
   156c8:	mov	r1, r8
   156cc:	mov	r2, r7
   156d0:	mov	r3, r6
   156d4:	bl	1c18c <__assert_fail@plt+0xa710>
   156d8:	mov	r4, r2
   156dc:	mov	r8, r3
   156e0:	ldr	r0, [sp, #48]	; 0x30
   156e4:	str	r9, [sp, #24]
   156e8:	str	sl, [sp, #28]
   156ec:	stm	sp, {r4, r8}
   156f0:	ldr	r2, [sp, #84]	; 0x54
   156f4:	ldr	r3, [sp, #80]	; 0x50
   156f8:	mov	r1, r6
   156fc:	str	r0, [sp, #8]
   15700:	ldr	r0, [sp, #52]	; 0x34
   15704:	str	r0, [sp, #12]
   15708:	ldr	r0, [sp, #56]	; 0x38
   1570c:	str	r0, [sp, #16]
   15710:	mov	r0, r7
   15714:	bl	15d7c <__assert_fail@plt+0x4300>
   15718:	cmp	r0, #0
   1571c:	beq	15810 <__assert_fail@plt+0x3d94>
   15720:	ldr	r0, [sp, #68]	; 0x44
   15724:	mov	r1, r0
   15728:	add	r1, r0, #1
   1572c:	cmp	r1, #668	; 0x29c
   15730:	mov	r0, r1
   15734:	str	r1, [sp, #68]	; 0x44
   15738:	bne	155cc <__assert_fail@plt+0x3b50>
   1573c:	b	15820 <__assert_fail@plt+0x3da4>
   15740:	ldr	r7, [sp, #88]	; 0x58
   15744:	ldr	ip, [sp, #92]	; 0x5c
   15748:	subs	r2, r0, r7
   1574c:	sbcs	r2, r1, ip
   15750:	bcs	15860 <__assert_fail@plt+0x3de4>
   15754:	str	ip, [sp, #40]	; 0x28
   15758:	mov	lr, #0
   1575c:	mvn	r3, #63	; 0x3f
   15760:	mov	r2, r7
   15764:	mov	ip, #0
   15768:	lsrs	r7, ip, #1
   1576c:	rrx	lr, lr
   15770:	orr	ip, r7, r2, lsl #31
   15774:	ldr	r7, [sp, #40]	; 0x28
   15778:	lsrs	r7, r7, #1
   1577c:	rrx	r2, r2
   15780:	subs	r6, r2, r0
   15784:	sbcs	r6, r7, r1
   15788:	str	r7, [sp, #40]	; 0x28
   1578c:	bcc	157b0 <__assert_fail@plt+0x3d34>
   15790:	eor	r6, r0, r2
   15794:	eor	r7, r1, r7
   15798:	orrs	r6, r6, r7
   1579c:	bne	157f4 <__assert_fail@plt+0x3d78>
   157a0:	ldr	r7, [sp, #40]	; 0x28
   157a4:	subs	r6, r4, lr
   157a8:	sbcs	r6, r8, ip
   157ac:	bcc	157f4 <__assert_fail@plt+0x3d78>
   157b0:	subs	r6, r0, r2
   157b4:	str	r2, [sp, #36]	; 0x24
   157b8:	mov	r2, ip
   157bc:	sbc	r7, r1, r7
   157c0:	subs	r0, r6, #1
   157c4:	sbc	r1, r7, #0
   157c8:	subs	r4, r4, lr
   157cc:	sbcs	r8, r8, ip
   157d0:	mov	ip, lr
   157d4:	mov	lr, #0
   157d8:	movwcc	lr, #1
   157dc:	cmp	lr, #0
   157e0:	mov	lr, ip
   157e4:	mov	ip, r2
   157e8:	ldr	r2, [sp, #36]	; 0x24
   157ec:	moveq	r0, r6
   157f0:	moveq	r1, r7
   157f4:	ldr	r6, [sp, #92]	; 0x5c
   157f8:	ldr	r7, [sp, #88]	; 0x58
   157fc:	adds	r3, r3, #1
   15800:	bcc	15768 <__assert_fail@plt+0x3cec>
   15804:	b	156e0 <__assert_fail@plt+0x3c64>
   15808:	mov	r5, #1
   1580c:	b	15814 <__assert_fail@plt+0x3d98>
   15810:	mov	r5, #0
   15814:	mov	r0, r5
   15818:	sub	sp, fp, #28
   1581c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15820:	movw	r1, #50965	; 0xc715
   15824:	mov	r0, #0
   15828:	mov	r2, #5
   1582c:	movt	r1, #1
   15830:	bl	1174c <dcgettext@plt>
   15834:	mov	r2, r0
   15838:	mov	r0, #0
   1583c:	mov	r1, #0
   15840:	bl	1183c <error@plt>
   15844:	bl	11a64 <abort@plt>
   15848:	movw	r0, #51015	; 0xc747
   1584c:	movw	r1, #50952	; 0xc708
   15850:	movw	r3, #51025	; 0xc751
   15854:	movw	r2, #1214	; 0x4be
   15858:	movt	r0, #1
   1585c:	b	15874 <__assert_fail@plt+0x3df8>
   15860:	movw	r0, #51050	; 0xc76a
   15864:	movw	r1, #50952	; 0xc708
   15868:	movw	r3, #51025	; 0xc751
   1586c:	movw	r2, #1262	; 0x4ee
   15870:	movt	r0, #1
   15874:	movt	r1, #1
   15878:	movt	r3, #1
   1587c:	bl	11a7c <__assert_fail@plt>
   15880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15884:	add	fp, sp, #28
   15888:	sub	sp, sp, #100	; 0x64
   1588c:	ldr	r5, [fp, #20]
   15890:	str	r2, [fp, #-44]	; 0xffffffd4
   15894:	stm	sp, {r2, r3, r5}
   15898:	ldr	r1, [fp, #8]
   1589c:	ldr	r2, [fp, #12]
   158a0:	mov	sl, r0
   158a4:	mov	r8, r3
   158a8:	sub	r0, fp, #40	; 0x28
   158ac:	mov	r3, sl
   158b0:	bl	15ab4 <__assert_fail@plt+0x4038>
   158b4:	ldm	r5, {r4, r6, lr}
   158b8:	eor	r2, r1, r6
   158bc:	ldr	ip, [r5, #12]
   158c0:	mov	r9, #1
   158c4:	eor	r3, r0, r4
   158c8:	orrs	r2, r3, r2
   158cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   158d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   158d4:	eoreq	r5, r2, lr
   158d8:	eoreq	r7, r3, ip
   158dc:	orrseq	r5, r5, r7
   158e0:	beq	15aa8 <__assert_fail@plt+0x402c>
   158e4:	str	r8, [fp, #-48]	; 0xffffffd0
   158e8:	ldr	r8, [sl, #12]
   158ec:	ldr	r7, [sl]
   158f0:	ldr	r5, [sl, #4]
   158f4:	str	r8, [sp, #64]	; 0x40
   158f8:	str	r7, [sp, #52]	; 0x34
   158fc:	subs	r7, r7, r4
   15900:	mov	r4, sl
   15904:	str	r5, [sp, #56]	; 0x38
   15908:	sbcs	r9, r5, r6
   1590c:	ldr	r5, [r4, #8]!
   15910:	mov	r6, #0
   15914:	str	r7, [fp, #-52]	; 0xffffffcc
   15918:	movwcc	r6, #1
   1591c:	str	r4, [fp, #-60]	; 0xffffffc4
   15920:	str	r9, [fp, #-56]	; 0xffffffc8
   15924:	str	r5, [sp, #60]	; 0x3c
   15928:	subs	r5, r5, lr
   1592c:	sbc	ip, r8, ip
   15930:	subs	r4, r5, #1
   15934:	sbc	r8, ip, #0
   15938:	cmp	r6, #0
   1593c:	eor	r6, r0, r7
   15940:	moveq	r4, r5
   15944:	eor	r5, r1, r9
   15948:	moveq	r8, ip
   1594c:	orrs	r6, r6, r5
   15950:	eoreq	r6, r2, r4
   15954:	eoreq	r5, r3, r8
   15958:	orrseq	r6, r6, r5
   1595c:	beq	15a9c <__assert_fail@plt+0x4020>
   15960:	ldr	r6, [fp, #16]
   15964:	cmp	r6, #2
   15968:	bcc	15aa4 <__assert_fail@plt+0x4028>
   1596c:	ldr	r7, [sp, #52]	; 0x34
   15970:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15974:	str	r7, [sp, #32]
   15978:	ldr	r7, [sp, #56]	; 0x38
   1597c:	str	r5, [sp, #40]	; 0x28
   15980:	str	r7, [sp, #36]	; 0x24
   15984:	ldr	r7, [fp, #-48]	; 0xffffffd0
   15988:	str	r7, [sp, #44]	; 0x2c
   1598c:	stm	sp, {r0, r1, r2, r3}
   15990:	str	r0, [sp, #16]
   15994:	ldr	r0, [sp, #60]	; 0x3c
   15998:	str	r1, [sp, #20]
   1599c:	str	r0, [sp, #24]
   159a0:	ldr	r0, [sp, #64]	; 0x40
   159a4:	str	r0, [sp, #28]
   159a8:	sub	r0, fp, #40	; 0x28
   159ac:	bl	16140 <__assert_fail@plt+0x46c4>
   159b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   159b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   159b8:	eor	r2, r1, r2
   159bc:	eor	r3, r0, r3
   159c0:	orrs	r2, r3, r2
   159c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   159c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   159cc:	moveq	r5, r8
   159d0:	eoreq	r7, r2, r4
   159d4:	eoreq	r5, r3, r8
   159d8:	orrseq	r7, r7, r5
   159dc:	beq	15a9c <__assert_fail@plt+0x4020>
   159e0:	ldr	r7, [fp, #20]
   159e4:	sub	r9, r6, #1
   159e8:	str	r4, [sp, #60]	; 0x3c
   159ec:	add	r7, r7, #8
   159f0:	str	r7, [sp, #64]	; 0x40
   159f4:	ldr	r7, [fp, #20]
   159f8:	ldrd	r4, [r7]
   159fc:	eor	r7, r1, r5
   15a00:	eor	r6, r0, r4
   15a04:	orrs	r7, r6, r7
   15a08:	bne	15a24 <__assert_fail@plt+0x3fa8>
   15a0c:	ldr	r7, [sp, #64]	; 0x40
   15a10:	ldrd	r4, [r7]
   15a14:	eor	r7, r3, r5
   15a18:	eor	r6, r2, r4
   15a1c:	orrs	r7, r6, r7
   15a20:	beq	15aa4 <__assert_fail@plt+0x4028>
   15a24:	subs	r9, r9, #1
   15a28:	beq	15aa4 <__assert_fail@plt+0x4028>
   15a2c:	ldr	r7, [fp, #-60]	; 0xffffffc4
   15a30:	add	ip, sp, #16
   15a34:	ldrd	r4, [r7]
   15a38:	ldrd	r6, [sl]
   15a3c:	str	r7, [sp, #36]	; 0x24
   15a40:	ldr	r7, [fp, #-44]	; 0xffffffd4
   15a44:	str	r6, [sp, #32]
   15a48:	str	r7, [sp, #40]	; 0x28
   15a4c:	ldr	r7, [fp, #-48]	; 0xffffffd0
   15a50:	str	r7, [sp, #44]	; 0x2c
   15a54:	stm	sp, {r0, r1, r2, r3}
   15a58:	stm	ip, {r0, r1, r4, r5}
   15a5c:	sub	r0, fp, #40	; 0x28
   15a60:	bl	16140 <__assert_fail@plt+0x46c4>
   15a64:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15a68:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15a6c:	eor	r2, r1, r2
   15a70:	eor	r3, r0, r3
   15a74:	orrs	r2, r3, r2
   15a78:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15a7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a80:	bne	159f4 <__assert_fail@plt+0x3f78>
   15a84:	ldr	r7, [sp, #60]	; 0x3c
   15a88:	mov	r6, r8
   15a8c:	eor	r6, r3, r8
   15a90:	eor	r7, r2, r7
   15a94:	orrs	r7, r7, r6
   15a98:	bne	159f4 <__assert_fail@plt+0x3f78>
   15a9c:	mov	r9, #1
   15aa0:	b	15aa8 <__assert_fail@plt+0x402c>
   15aa4:	mov	r9, #0
   15aa8:	mov	r0, r9
   15aac:	sub	sp, fp, #28
   15ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab8:	add	fp, sp, #28
   15abc:	sub	sp, sp, #100	; 0x64
   15ac0:	str	r0, [fp, #-40]	; 0xffffffd8
   15ac4:	ldr	r0, [r3]
   15ac8:	ldr	ip, [r1, #8]
   15acc:	ldr	r6, [r1, #12]
   15ad0:	ldr	r8, [r3, #4]
   15ad4:	ldr	sl, [r3, #12]
   15ad8:	mvn	r9, #63	; 0x3f
   15adc:	ldm	r1, {r5, lr}
   15ae0:	str	r2, [sp, #52]	; 0x34
   15ae4:	ldr	r4, [r2]
   15ae8:	ldr	r2, [r2, #4]
   15aec:	str	r0, [fp, #-44]	; 0xffffffd4
   15af0:	ldr	r0, [r3, #8]
   15af4:	str	sl, [sp, #64]	; 0x40
   15af8:	str	r8, [sp, #60]	; 0x3c
   15afc:	str	r0, [fp, #-32]	; 0xffffffe0
   15b00:	ldr	r0, [fp, #16]
   15b04:	ldr	r1, [r0]
   15b08:	str	r1, [fp, #-56]	; 0xffffffc8
   15b0c:	ldr	r1, [r0, #4]
   15b10:	str	r1, [fp, #-60]	; 0xffffffc4
   15b14:	ldr	r1, [r0, #8]
   15b18:	ldr	r0, [r0, #12]
   15b1c:	str	r1, [fp, #-52]	; 0xffffffcc
   15b20:	str	r0, [fp, #-48]	; 0xffffffd0
   15b24:	tst	r4, #1
   15b28:	str	r2, [fp, #-36]	; 0xffffffdc
   15b2c:	bne	15b48 <__assert_fail@plt+0x40cc>
   15b30:	ldr	r7, [fp, #-40]	; 0xffffffd8
   15b34:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15b38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b3c:	ldr	r1, [fp, #12]
   15b40:	ldr	r2, [fp, #8]
   15b44:	b	15bd8 <__assert_fail@plt+0x415c>
   15b48:	mov	r0, r8
   15b4c:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15b50:	ldr	r7, [fp, #-40]	; 0xffffffd8
   15b54:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15b58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b5c:	str	lr, [sp, #56]	; 0x38
   15b60:	str	r0, [sp, #36]	; 0x24
   15b64:	ldr	r0, [fp, #8]
   15b68:	str	r8, [sp, #32]
   15b6c:	str	r0, [sp, #40]	; 0x28
   15b70:	ldr	r0, [fp, #12]
   15b74:	str	r0, [sp, #44]	; 0x2c
   15b78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15b7c:	str	r0, [sp]
   15b80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15b84:	stmib	sp, {r0, ip}
   15b88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b8c:	str	sl, [sp, #28]
   15b90:	str	r6, [sp, #12]
   15b94:	str	r5, [sp, #16]
   15b98:	str	lr, [sp, #20]
   15b9c:	mov	sl, ip
   15ba0:	str	r0, [sp, #24]
   15ba4:	mov	r0, r7
   15ba8:	bl	16140 <__assert_fail@plt+0x46c4>
   15bac:	str	r0, [fp, #-56]	; 0xffffffc8
   15bb0:	str	r1, [fp, #-60]	; 0xffffffc4
   15bb4:	ldr	lr, [sp, #56]	; 0x38
   15bb8:	ldr	r2, [fp, #8]
   15bbc:	mov	ip, sl
   15bc0:	ldr	r1, [r7]
   15bc4:	ldr	r0, [r7, #4]
   15bc8:	str	r1, [fp, #-52]	; 0xffffffcc
   15bcc:	str	r0, [fp, #-48]	; 0xffffffd0
   15bd0:	ldr	r1, [fp, #12]
   15bd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15bd8:	str	r8, [sp, #32]
   15bdc:	ldr	r8, [sp, #60]	; 0x3c
   15be0:	ldr	sl, [sp, #64]	; 0x40
   15be4:	str	r2, [sp, #40]	; 0x28
   15be8:	str	r1, [sp, #44]	; 0x2c
   15bec:	mov	r2, ip
   15bf0:	mov	r3, r6
   15bf4:	str	r8, [sp, #36]	; 0x24
   15bf8:	stm	sp, {r5, lr}
   15bfc:	str	r0, [sp, #24]
   15c00:	mov	r0, r7
   15c04:	str	ip, [sp, #8]
   15c08:	str	r6, [sp, #12]
   15c0c:	str	r5, [sp, #16]
   15c10:	str	lr, [sp, #20]
   15c14:	str	sl, [sp, #28]
   15c18:	bl	16140 <__assert_fail@plt+0x46c4>
   15c1c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15c20:	ldr	ip, [r7]
   15c24:	ldr	r6, [r7, #4]
   15c28:	mov	r5, r0
   15c2c:	mov	lr, r1
   15c30:	lsrs	r2, r2, #1
   15c34:	rrx	r4, r4
   15c38:	adds	r9, r9, #1
   15c3c:	bcc	15b24 <__assert_fail@plt+0x40a8>
   15c40:	ldr	r0, [sp, #52]	; 0x34
   15c44:	ldr	r4, [r0, #8]
   15c48:	ldr	r9, [r0, #12]
   15c4c:	orrs	r0, r4, r9
   15c50:	beq	15d5c <__assert_fail@plt+0x42e0>
   15c54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c58:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15c5c:	ldr	r1, [fp, #12]
   15c60:	ldr	r2, [fp, #8]
   15c64:	tst	r4, #1
   15c68:	bne	15c74 <__assert_fail@plt+0x41f8>
   15c6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15c70:	b	15cf8 <__assert_fail@plt+0x427c>
   15c74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15c78:	str	r1, [sp, #44]	; 0x2c
   15c7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15c80:	str	r2, [sp, #40]	; 0x28
   15c84:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15c88:	str	r8, [sp, #36]	; 0x24
   15c8c:	str	ip, [fp, #-36]	; 0xffffffdc
   15c90:	str	r0, [sp, #32]
   15c94:	str	r1, [sp]
   15c98:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15c9c:	mov	r0, r3
   15ca0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15ca4:	stmib	sp, {r1, ip}
   15ca8:	str	r7, [sp, #24]
   15cac:	str	r6, [sp, #12]
   15cb0:	str	r5, [sp, #16]
   15cb4:	str	lr, [sp, #20]
   15cb8:	str	sl, [sp, #28]
   15cbc:	mov	r7, lr
   15cc0:	bl	16140 <__assert_fail@plt+0x46c4>
   15cc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15cc8:	str	r0, [fp, #-56]	; 0xffffffc8
   15ccc:	str	r1, [fp, #-60]	; 0xffffffc4
   15cd0:	mov	lr, r7
   15cd4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   15cd8:	ldr	r2, [fp, #8]
   15cdc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15ce0:	ldr	r1, [r3]
   15ce4:	ldr	r0, [r3, #4]
   15ce8:	str	r0, [fp, #-48]	; 0xffffffd0
   15cec:	str	r1, [fp, #-52]	; 0xffffffcc
   15cf0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15cf4:	ldr	r1, [fp, #12]
   15cf8:	str	r0, [sp, #32]
   15cfc:	str	r2, [sp, #40]	; 0x28
   15d00:	mov	r0, r3
   15d04:	mov	r2, ip
   15d08:	mov	r3, r6
   15d0c:	str	r8, [sp, #36]	; 0x24
   15d10:	str	r1, [sp, #44]	; 0x2c
   15d14:	stm	sp, {r5, lr}
   15d18:	str	ip, [sp, #8]
   15d1c:	str	r6, [sp, #12]
   15d20:	str	r5, [sp, #16]
   15d24:	str	lr, [sp, #20]
   15d28:	str	r7, [sp, #24]
   15d2c:	str	sl, [sp, #28]
   15d30:	bl	16140 <__assert_fail@plt+0x46c4>
   15d34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15d38:	lsrs	r9, r9, #1
   15d3c:	rrx	r4, r4
   15d40:	mov	r5, r0
   15d44:	mov	lr, r1
   15d48:	orrs	r0, r4, r9
   15d4c:	ldr	ip, [r3]
   15d50:	ldr	r6, [r3, #4]
   15d54:	bne	15c58 <__assert_fail@plt+0x41dc>
   15d58:	b	15d60 <__assert_fail@plt+0x42e4>
   15d5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15d60:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15d64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15d68:	strd	r0, [r3]
   15d6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15d70:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15d74:	sub	sp, fp, #28
   15d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d80:	add	fp, sp, #28
   15d84:	sub	sp, sp, #52	; 0x34
   15d88:	str	r3, [sp, #12]
   15d8c:	str	r3, [fp, #-32]	; 0xffffffe0
   15d90:	add	r3, fp, #8
   15d94:	mov	r7, r1
   15d98:	mov	r6, r0
   15d9c:	str	r2, [fp, #-36]	; 0xffffffdc
   15da0:	stm	sp, {r0, r1, r2}
   15da4:	ldr	r4, [fp, #36]	; 0x24
   15da8:	ldr	r5, [fp, #32]
   15dac:	ldm	r3, {r0, r1, r2, r3}
   15db0:	str	r4, [sp, #20]
   15db4:	str	r5, [sp, #16]
   15db8:	bl	15f1c <__assert_fail@plt+0x44a0>
   15dbc:	eor	r2, r1, r4
   15dc0:	eor	r3, r0, r5
   15dc4:	str	r6, [sp, #36]	; 0x24
   15dc8:	subs	r6, r6, r5
   15dcc:	str	r7, [sp, #40]	; 0x28
   15dd0:	orr	r2, r3, r2
   15dd4:	sbc	r5, r7, r4
   15dd8:	cmp	r2, #0
   15ddc:	eorne	r2, r0, r6
   15de0:	eorne	r3, r1, r5
   15de4:	orrsne	r2, r2, r3
   15de8:	beq	15f0c <__assert_fail@plt+0x4490>
   15dec:	ldr	r3, [fp, #24]
   15df0:	mov	r2, #0
   15df4:	cmp	r3, #2
   15df8:	bcc	15f10 <__assert_fail@plt+0x4494>
   15dfc:	ldr	sl, [sp, #40]	; 0x28
   15e00:	ldr	lr, [sp, #36]	; 0x24
   15e04:	mov	r9, #2
   15e08:	str	r6, [sp, #32]
   15e0c:	str	r5, [sp, #28]
   15e10:	umull	r2, ip, r1, r0
   15e14:	umull	r0, r5, r0, r0
   15e18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e1c:	lsl	r8, ip, #1
   15e20:	adds	r5, r5, r2, lsl #1
   15e24:	orr	r4, r8, r2, lsr #31
   15e28:	adc	r8, r4, #0
   15e2c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   15e30:	umull	r6, r7, r0, r4
   15e34:	mla	r0, r0, r3, r7
   15e38:	mla	r0, r5, r4, r0
   15e3c:	umull	r7, r3, r6, sl
   15e40:	umull	r6, r4, r6, lr
   15e44:	umlal	r7, r3, r0, lr
   15e48:	adds	r4, r7, r4
   15e4c:	umull	r6, r7, r0, lr
   15e50:	adc	r3, r3, #0
   15e54:	subs	r4, r4, r6
   15e58:	umull	r0, r6, r0, sl
   15e5c:	sbcs	r4, r3, r7
   15e60:	mov	r4, #0
   15e64:	umull	r1, r7, r1, r1
   15e68:	movwcc	r4, #1
   15e6c:	cmp	r4, #0
   15e70:	addne	r6, r6, #1
   15e74:	adds	r0, r0, r3
   15e78:	adc	r3, r6, #0
   15e7c:	subs	r2, r5, r2
   15e80:	ldr	r5, [sp, #28]
   15e84:	ldr	r6, [sp, #32]
   15e88:	sbcs	r2, r8, ip
   15e8c:	mov	r2, #0
   15e90:	movwcc	r2, #1
   15e94:	cmp	r2, #0
   15e98:	addne	r7, r7, #1
   15e9c:	adds	r1, r1, r8
   15ea0:	adc	r2, r7, #0
   15ea4:	subs	r7, r1, r0
   15ea8:	sbcs	r2, r2, r3
   15eac:	mov	r3, #0
   15eb0:	movwcc	r3, #1
   15eb4:	adds	r0, r7, lr
   15eb8:	adc	r1, r2, sl
   15ebc:	cmp	r3, #0
   15ec0:	moveq	r1, r2
   15ec4:	moveq	r0, r7
   15ec8:	eor	r2, r1, r5
   15ecc:	eor	r3, r0, r6
   15ed0:	orrs	r2, r3, r2
   15ed4:	beq	15f0c <__assert_fail@plt+0x4490>
   15ed8:	ldr	r2, [fp, #32]
   15edc:	ldr	r3, [fp, #36]	; 0x24
   15ee0:	eor	r2, r0, r2
   15ee4:	eor	r3, r1, r3
   15ee8:	orrs	r2, r2, r3
   15eec:	mov	r2, #0
   15ef0:	beq	15f10 <__assert_fail@plt+0x4494>
   15ef4:	ldr	r7, [fp, #24]
   15ef8:	add	r3, r9, #1
   15efc:	cmp	r9, r7
   15f00:	mov	r9, r3
   15f04:	bcc	15e10 <__assert_fail@plt+0x4394>
   15f08:	b	15f10 <__assert_fail@plt+0x4494>
   15f0c:	mov	r2, #1
   15f10:	mov	r0, r2
   15f14:	sub	sp, fp, #28
   15f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f20:	add	fp, sp, #28
   15f24:	sub	sp, sp, #20
   15f28:	mov	lr, r0
   15f2c:	ands	r0, r2, #1
   15f30:	ldr	r0, [fp, #28]
   15f34:	movne	r0, r1
   15f38:	str	r0, [sp, #8]
   15f3c:	ldr	r0, [fp, #24]
   15f40:	movne	r0, lr
   15f44:	orrs	r4, r2, r3
   15f48:	str	r0, [sp, #4]
   15f4c:	beq	16134 <__assert_fail@plt+0x46b8>
   15f50:	mov	sl, r1
   15f54:	ldr	r0, [fp, #20]
   15f58:	ldr	r1, [fp, #16]
   15f5c:	ldr	ip, [fp, #12]
   15f60:	mov	r8, r2
   15f64:	umull	r4, r9, sl, lr
   15f68:	umull	r7, r5, lr, lr
   15f6c:	str	sl, [sp, #12]
   15f70:	ldr	lr, [fp, #8]
   15f74:	str	r8, [sp, #16]
   15f78:	lsl	r6, r9, #1
   15f7c:	adds	r5, r5, r4, lsl #1
   15f80:	orr	r6, r6, r4, lsr #31
   15f84:	adc	r2, r6, #0
   15f88:	umull	r6, sl, r7, r1
   15f8c:	mla	r7, r7, r0, sl
   15f90:	mov	r0, r3
   15f94:	mla	sl, r5, r1, r7
   15f98:	umull	r7, r8, r6, ip
   15f9c:	umull	r6, r3, r6, lr
   15fa0:	umlal	r7, r8, sl, lr
   15fa4:	adds	r3, r7, r3
   15fa8:	umull	r7, r1, sl, lr
   15fac:	adc	r6, r8, #0
   15fb0:	subs	r3, r3, r7
   15fb4:	umull	r3, r7, sl, ip
   15fb8:	sbcs	r1, r6, r1
   15fbc:	mov	r1, #0
   15fc0:	movwcc	r1, #1
   15fc4:	cmp	r1, #0
   15fc8:	addne	r7, r7, #1
   15fcc:	adds	r1, r3, r6
   15fd0:	adc	r3, r7, #0
   15fd4:	ldr	r7, [sp, #12]
   15fd8:	subs	r4, r5, r4
   15fdc:	sbcs	r4, r2, r9
   15fe0:	mov	r4, #0
   15fe4:	mov	r9, lr
   15fe8:	movwcc	r4, #1
   15fec:	cmp	r4, #0
   15ff0:	mov	r4, #0
   15ff4:	umull	r7, r6, r7, r7
   15ff8:	addne	r6, r6, #1
   15ffc:	adds	r7, r7, r2
   16000:	adc	r6, r6, #0
   16004:	subs	r1, r7, r1
   16008:	sbcs	r3, r6, r3
   1600c:	movwcc	r4, #1
   16010:	adds	lr, r1, lr
   16014:	adc	sl, r3, ip
   16018:	cmp	r4, #0
   1601c:	moveq	sl, r3
   16020:	mov	r3, r0
   16024:	moveq	lr, r1
   16028:	lsrs	r3, r0, #1
   1602c:	ldr	r0, [sp, #16]
   16030:	rrx	r8, r0
   16034:	tst	r0, #2
   16038:	beq	16120 <__assert_fail@plt+0x46a4>
   1603c:	ldr	r0, [sp, #4]
   16040:	str	r3, [sp, #16]
   16044:	ldr	r3, [fp, #16]
   16048:	ldr	r4, [fp, #20]
   1604c:	umull	r1, r2, lr, r0
   16050:	mov	r6, r3
   16054:	umull	r3, r5, r1, r3
   16058:	mla	r1, r1, r4, r5
   1605c:	ldr	r4, [sp, #8]
   16060:	umull	r0, r5, sl, r0
   16064:	umlal	r0, r5, lr, r4
   16068:	adds	r0, r0, r2
   1606c:	mla	r1, r0, r6, r1
   16070:	umull	r2, r6, r1, ip
   16074:	str	r2, [sp, #12]
   16078:	umull	r7, r2, r1, r9
   1607c:	str	r7, [sp]
   16080:	str	r2, [sp, #4]
   16084:	umull	r2, r7, r3, ip
   16088:	umlal	r2, r7, r1, r9
   1608c:	adc	r1, r5, #0
   16090:	umull	r3, r5, r3, r9
   16094:	adds	r2, r2, r5
   16098:	ldr	r5, [sp]
   1609c:	adc	r3, r7, #0
   160a0:	subs	r2, r2, r5
   160a4:	ldr	r2, [sp, #4]
   160a8:	sbcs	r2, r3, r2
   160ac:	mov	r2, #0
   160b0:	movwcc	r2, #1
   160b4:	cmp	r2, #0
   160b8:	ldr	r2, [sp, #12]
   160bc:	addne	r6, r6, #1
   160c0:	adds	r2, r2, r3
   160c4:	adc	r3, r6, #0
   160c8:	umull	r5, r6, lr, r4
   160cc:	subs	r0, r0, r5
   160d0:	sbcs	r0, r1, r6
   160d4:	umull	r5, r6, sl, r4
   160d8:	mov	r0, #0
   160dc:	movwcc	r0, #1
   160e0:	cmp	r0, #0
   160e4:	addne	r6, r6, #1
   160e8:	adds	r0, r5, r1
   160ec:	adc	r1, r6, #0
   160f0:	subs	r2, r0, r2
   160f4:	sbcs	r1, r1, r3
   160f8:	mov	r3, #0
   160fc:	movwcc	r3, #1
   16100:	adds	r4, r2, r9
   16104:	adc	r0, r1, ip
   16108:	cmp	r3, #0
   1610c:	ldr	r3, [sp, #16]
   16110:	moveq	r0, r1
   16114:	moveq	r4, r2
   16118:	str	r0, [sp, #8]
   1611c:	str	r4, [sp, #4]
   16120:	orrs	r1, r8, r3
   16124:	ldr	r0, [fp, #20]
   16128:	ldr	r1, [fp, #16]
   1612c:	ldr	ip, [fp, #12]
   16130:	bne	15f64 <__assert_fail@plt+0x44e8>
   16134:	ldmib	sp, {r0, r1}
   16138:	sub	sp, fp, #28
   1613c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16144:	add	fp, sp, #28
   16148:	sub	sp, sp, #84	; 0x54
   1614c:	ldr	r1, [fp, #48]	; 0x30
   16150:	ldr	r7, [fp, #52]	; 0x34
   16154:	rsbs	r4, r1, #0
   16158:	rsc	ip, r7, #0
   1615c:	cmn	r3, #1
   16160:	ble	166ac <__assert_fail@plt+0x4c30>
   16164:	ldr	r1, [fp, #16]
   16168:	ldr	r7, [fp, #20]
   1616c:	mvn	r6, #0
   16170:	subs	r1, r6, r1
   16174:	sbcs	r1, r6, r7
   16178:	bge	166c4 <__assert_fail@plt+0x4c48>
   1617c:	sub	r1, fp, #40	; 0x28
   16180:	stm	r1, {r0, r2, r3}
   16184:	ldr	r0, [fp, #32]
   16188:	ldr	r2, [fp, #36]	; 0x24
   1618c:	subs	r1, r6, r0
   16190:	sbcs	r0, r6, r2
   16194:	bge	166dc <__assert_fail@plt+0x4c60>
   16198:	ldr	r7, [fp, #24]
   1619c:	ldr	r2, [fp, #8]
   161a0:	ldr	lr, [fp, #28]
   161a4:	ldr	r8, [fp, #12]
   161a8:	ldr	r5, [fp, #44]	; 0x2c
   161ac:	ldr	sl, [fp, #40]	; 0x28
   161b0:	str	ip, [fp, #-44]	; 0xffffffd4
   161b4:	str	r4, [fp, #-48]	; 0xffffffd0
   161b8:	umull	r3, r0, r7, r2
   161bc:	umull	r9, r1, r3, r4
   161c0:	str	r3, [sp, #32]
   161c4:	mla	r3, r3, ip, r1
   161c8:	umull	r1, r6, lr, r2
   161cc:	mov	lr, r2
   161d0:	umlal	r1, r6, r7, r8
   161d4:	mov	r7, r8
   161d8:	adds	r0, r1, r0
   161dc:	str	r0, [sp, #28]
   161e0:	mla	r0, r0, r4, r3
   161e4:	umull	r1, r2, r0, r5
   161e8:	str	r2, [sp, #24]
   161ec:	str	r1, [sp, #36]	; 0x24
   161f0:	umull	r2, r1, r0, sl
   161f4:	str	r2, [sp, #16]
   161f8:	str	r1, [sp, #20]
   161fc:	umull	r2, r1, r9, r5
   16200:	umlal	r2, r1, r0, sl
   16204:	str	r1, [sp, #12]
   16208:	ldr	r1, [fp, #36]	; 0x24
   1620c:	str	r2, [sp, #8]
   16210:	umull	r1, sl, r0, r1
   16214:	str	r1, [sp, #4]
   16218:	ldr	r1, [fp, #32]
   1621c:	umull	r8, ip, r0, r1
   16220:	ldr	r1, [fp, #36]	; 0x24
   16224:	umull	r3, r2, r9, r1
   16228:	ldr	r1, [fp, #32]
   1622c:	umlal	r3, r2, r0, r1
   16230:	adc	r0, r6, #0
   16234:	str	r0, [sp, #40]	; 0x28
   16238:	ldr	r0, [fp, #32]
   1623c:	umull	r1, r0, r9, r0
   16240:	adds	r0, r3, r0
   16244:	str	r1, [sp, #48]	; 0x30
   16248:	mov	r3, lr
   1624c:	str	r0, [sp, #44]	; 0x2c
   16250:	adc	r6, r2, #0
   16254:	subs	r0, r0, r8
   16258:	sbcs	r0, r6, ip
   1625c:	mov	r0, #0
   16260:	movwcc	r0, #1
   16264:	cmp	r0, #0
   16268:	ldr	r0, [fp, #20]
   1626c:	addne	sl, sl, #1
   16270:	umull	r1, r2, r0, lr
   16274:	ldr	lr, [fp, #16]
   16278:	mov	r0, r7
   1627c:	umlal	r1, r2, lr, r7
   16280:	umull	r7, r3, lr, r3
   16284:	mov	r5, lr
   16288:	adds	r4, r1, r3
   1628c:	umull	r3, r8, lr, r0
   16290:	str	r7, [sp]
   16294:	ldr	r7, [fp, #20]
   16298:	adc	r2, r2, #0
   1629c:	subs	r3, r4, r3
   162a0:	sbcs	r3, r2, r8
   162a4:	umull	r8, r0, r7, r0
   162a8:	mov	r3, #0
   162ac:	movwcc	r3, #1
   162b0:	cmp	r3, #0
   162b4:	addne	r0, r0, #1
   162b8:	adds	lr, r8, r2
   162bc:	ldr	r2, [fp, #20]
   162c0:	adc	ip, r0, #0
   162c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   162c8:	umull	r3, r8, r2, r0
   162cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   162d0:	umlal	r3, r8, r5, r2
   162d4:	umull	r2, r7, r5, r0
   162d8:	ldr	r5, [fp, #8]
   162dc:	adds	r7, r3, r7
   162e0:	str	r2, [sp, #56]	; 0x38
   162e4:	adc	r3, r8, #0
   162e8:	adds	r2, lr, r2
   162ec:	str	r7, [sp, #52]	; 0x34
   162f0:	str	r3, [fp, #-52]	; 0xffffffcc
   162f4:	ldr	r3, [sp, #4]
   162f8:	adc	r0, ip, r7
   162fc:	adds	r2, r2, r6
   16300:	ldr	r6, [fp, #16]
   16304:	adc	r0, r0, #0
   16308:	adds	r2, r2, r3
   1630c:	ldr	r3, [sp, #28]
   16310:	adc	r8, r0, sl
   16314:	adds	sl, r2, #1
   16318:	str	r2, [sp, #4]
   1631c:	ldr	r2, [fp, #40]	; 0x28
   16320:	ldr	r0, [sp, #8]
   16324:	adc	ip, r8, #0
   16328:	umull	r2, r7, r9, r2
   1632c:	adds	r2, r0, r7
   16330:	ldr	r0, [sp, #12]
   16334:	adc	r7, r0, #0
   16338:	ldr	r0, [sp, #16]
   1633c:	subs	r2, r2, r0
   16340:	ldr	r0, [sp, #20]
   16344:	sbcs	r2, r7, r0
   16348:	mov	r2, #0
   1634c:	ldr	r0, [sp, #24]
   16350:	movwcc	r2, #1
   16354:	cmp	r2, #0
   16358:	ldr	r2, [sp, #32]
   1635c:	addne	r0, r0, #1
   16360:	orrs	r2, r2, r3
   16364:	mov	r2, #1
   16368:	umlal	r2, r1, r6, r5
   1636c:	ldr	r5, [sp]
   16370:	moveq	r1, r4
   16374:	ldr	r4, [sp, #36]	; 0x24
   16378:	moveq	r2, r5
   1637c:	adds	r7, r7, r2
   16380:	adc	r5, r1, #0
   16384:	adds	r7, r7, r4
   16388:	ldr	r4, [fp, #24]
   1638c:	adc	lr, r5, r0
   16390:	subs	r2, r7, r2
   16394:	ldr	r0, [sp, #4]
   16398:	ldr	r2, [fp, #12]
   1639c:	ldr	r5, [sp, #40]	; 0x28
   163a0:	sbcs	r1, lr, r1
   163a4:	mov	r1, #0
   163a8:	movwcc	r1, #1
   163ac:	cmp	r1, #0
   163b0:	moveq	sl, r0
   163b4:	umull	r0, r1, r4, r2
   163b8:	moveq	ip, r8
   163bc:	subs	r0, r3, r0
   163c0:	ldr	r3, [fp, #28]
   163c4:	sbcs	r0, r5, r1
   163c8:	mov	r0, #0
   163cc:	movwcc	r0, #1
   163d0:	cmp	r0, #0
   163d4:	umull	r1, r2, r3, r2
   163d8:	addne	r2, r2, #1
   163dc:	adds	r0, r1, r5
   163e0:	adc	r1, r2, #0
   163e4:	ldr	r2, [sp, #48]	; 0x30
   163e8:	adds	r0, r0, r7
   163ec:	mov	r7, r3
   163f0:	adcs	r1, r1, lr
   163f4:	adcs	r8, sl, #0
   163f8:	adc	sl, ip, #0
   163fc:	adds	r9, r0, r2
   16400:	ldr	r0, [sp, #44]	; 0x2c
   16404:	adcs	r1, r1, r0
   16408:	mrs	lr, CPSR
   1640c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16410:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16414:	umull	r6, r5, r3, r2
   16418:	mov	r3, r4
   1641c:	umlal	r6, r5, r4, r0
   16420:	umull	r2, r4, r4, r2
   16424:	adds	r4, r6, r4
   16428:	adc	r6, r5, #0
   1642c:	umull	r5, r3, r3, r0
   16430:	subs	r5, r4, r5
   16434:	umull	r5, r7, r7, r0
   16438:	sbcs	r3, r6, r3
   1643c:	mov	r3, #0
   16440:	movwcc	r3, #1
   16444:	cmp	r3, #0
   16448:	addne	r7, r7, #1
   1644c:	adds	r0, r5, r6
   16450:	adc	r7, r7, #0
   16454:	adds	r5, r9, r2
   16458:	adcs	r3, r1, r4
   1645c:	str	r5, [sp, #36]	; 0x24
   16460:	adcs	r0, r0, #0
   16464:	str	r3, [sp, #32]
   16468:	str	r0, [fp, #-36]	; 0xffffffdc
   1646c:	adc	r0, r7, #0
   16470:	str	r0, [sp, #48]	; 0x30
   16474:	msr	CPSR_f, lr
   16478:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1647c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16480:	adcs	ip, r8, #0
   16484:	ldr	r8, [fp, #-52]	; 0xffffffcc
   16488:	adc	sl, sl, #0
   1648c:	str	ip, [sp, #16]
   16490:	umull	r6, r0, r5, r1
   16494:	mla	r0, r5, r2, r0
   16498:	mla	r4, r3, r1, r0
   1649c:	ldr	r0, [fp, #36]	; 0x24
   164a0:	ldr	r1, [fp, #32]
   164a4:	umull	r0, r2, r6, r0
   164a8:	umlal	r0, r2, r4, r1
   164ac:	ldr	r1, [fp, #32]
   164b0:	umull	r1, r7, r6, r1
   164b4:	str	r1, [fp, #-44]	; 0xffffffd4
   164b8:	adds	r1, r0, r7
   164bc:	ldr	r0, [fp, #32]
   164c0:	adc	r5, r2, #0
   164c4:	str	r1, [fp, #-48]	; 0xffffffd0
   164c8:	umull	r0, r2, r4, r0
   164cc:	subs	r0, r1, r0
   164d0:	ldr	r1, [fp, #44]	; 0x2c
   164d4:	sbcs	r0, r5, r2
   164d8:	mov	r0, #0
   164dc:	movwcc	r0, #1
   164e0:	cmp	r0, #0
   164e4:	ldr	r0, [sp, #56]	; 0x38
   164e8:	umull	r2, r3, r4, r1
   164ec:	str	r2, [sp, #44]	; 0x2c
   164f0:	ldr	r2, [fp, #40]	; 0x28
   164f4:	str	r3, [sp, #40]	; 0x28
   164f8:	umull	r7, r3, r4, r2
   164fc:	str	r7, [sp, #24]
   16500:	umull	r7, r9, r6, r1
   16504:	ldr	r1, [fp, #36]	; 0x24
   16508:	str	r3, [sp, #28]
   1650c:	mov	r3, r8
   16510:	umlal	r7, r9, r4, r2
   16514:	mov	r2, #0
   16518:	umull	r1, lr, r4, r1
   1651c:	ldr	r4, [fp, #20]
   16520:	addne	lr, lr, #1
   16524:	subs	r0, ip, r0
   16528:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1652c:	ldr	r0, [sp, #52]	; 0x34
   16530:	str	r1, [sp, #20]
   16534:	mov	r1, #1
   16538:	umaal	r3, r1, r4, ip
   1653c:	sbcs	r0, sl, r0
   16540:	mov	r0, #0
   16544:	movwcc	r2, #1
   16548:	umlal	r8, r0, r4, ip
   1654c:	cmp	r2, #0
   16550:	movne	r8, r3
   16554:	movne	r0, r1
   16558:	ldr	r3, [sp, #16]
   1655c:	adds	r1, r8, r5
   16560:	adc	r5, r0, #0
   16564:	ldr	r0, [sp, #20]
   16568:	adds	r0, r1, r0
   1656c:	ldr	r1, [sp, #32]
   16570:	adc	lr, r5, lr
   16574:	adds	r8, r0, #1
   16578:	str	r0, [fp, #-32]	; 0xffffffe0
   1657c:	ldr	r0, [sp, #36]	; 0x24
   16580:	adc	r4, lr, #0
   16584:	adds	r2, r3, #1
   16588:	adc	r5, sl, #0
   1658c:	orrs	r0, r0, r1
   16590:	ldr	r0, [fp, #40]	; 0x28
   16594:	ldr	r1, [sp, #24]
   16598:	moveq	r5, sl
   1659c:	moveq	r2, r3
   165a0:	umull	r0, r6, r6, r0
   165a4:	adds	r0, r7, r6
   165a8:	adc	r3, r9, #0
   165ac:	ldr	r9, [fp, #44]	; 0x2c
   165b0:	adds	r6, r3, r2
   165b4:	adc	ip, r5, #0
   165b8:	subs	r0, r0, r1
   165bc:	ldr	r0, [sp, #28]
   165c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   165c4:	sbcs	r0, r3, r0
   165c8:	mov	r0, #0
   165cc:	ldr	r3, [sp, #40]	; 0x28
   165d0:	movwcc	r0, #1
   165d4:	cmp	r0, #0
   165d8:	ldr	r0, [sp, #44]	; 0x2c
   165dc:	addne	r3, r3, #1
   165e0:	adds	r0, r6, r0
   165e4:	adc	r3, ip, r3
   165e8:	subs	r2, r0, r2
   165ec:	ldr	ip, [fp, #32]
   165f0:	sbcs	r2, r3, r5
   165f4:	mov	r2, #0
   165f8:	ldr	r5, [fp, #36]	; 0x24
   165fc:	movwcc	r2, #1
   16600:	cmp	r2, #0
   16604:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16608:	moveq	r8, r1
   1660c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16610:	moveq	r4, lr
   16614:	adds	r0, r1, r0
   16618:	ldr	r1, [sp, #48]	; 0x30
   1661c:	adcs	r1, r1, r3
   16620:	adcs	r3, r8, #0
   16624:	adc	r7, r4, #0
   16628:	adds	r2, r0, r2
   1662c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16630:	adcs	r1, r1, r0
   16634:	adcs	r0, r3, #0
   16638:	adc	r3, r7, #0
   1663c:	subs	r7, ip, r0
   16640:	sbcs	r7, r5, r3
   16644:	bcc	16668 <__assert_fail@plt+0x4bec>
   16648:	ldr	r4, [fp, #40]	; 0x28
   1664c:	subs	r7, r2, r4
   16650:	sbcs	r7, r1, r9
   16654:	bcc	16698 <__assert_fail@plt+0x4c1c>
   16658:	eor	r7, r0, ip
   1665c:	eor	r6, r3, r5
   16660:	orrs	r7, r7, r6
   16664:	bne	16698 <__assert_fail@plt+0x4c1c>
   16668:	ldr	r4, [fp, #40]	; 0x28
   1666c:	adds	r7, ip, #1
   16670:	adc	r6, r5, #0
   16674:	subs	r2, r2, r4
   16678:	mov	r4, #0
   1667c:	sbcs	r1, r1, r9
   16680:	movwcc	r4, #1
   16684:	cmp	r4, #0
   16688:	moveq	r7, ip
   1668c:	moveq	r6, r5
   16690:	subs	r0, r0, r7
   16694:	sbc	r3, r3, r6
   16698:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1669c:	stm	r7, {r0, r3}
   166a0:	mov	r0, r2
   166a4:	sub	sp, fp, #28
   166a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ac:	movw	r0, #51061	; 0xc775
   166b0:	movw	r1, #50952	; 0xc708
   166b4:	movw	r3, #51092	; 0xc794
   166b8:	movw	r2, #993	; 0x3e1
   166bc:	movt	r0, #1
   166c0:	b	166f0 <__assert_fail@plt+0x4c74>
   166c4:	movw	r0, #51201	; 0xc801
   166c8:	movw	r1, #50952	; 0xc708
   166cc:	movw	r3, #51092	; 0xc794
   166d0:	movw	r2, #994	; 0x3e2
   166d4:	movt	r0, #1
   166d8:	b	166f0 <__assert_fail@plt+0x4c74>
   166dc:	movw	r0, #51232	; 0xc820
   166e0:	movw	r1, #50952	; 0xc708
   166e4:	movw	r3, #51092	; 0xc794
   166e8:	movw	r2, #995	; 0x3e3
   166ec:	movt	r0, #1
   166f0:	movt	r1, #1
   166f4:	movt	r3, #1
   166f8:	bl	11a7c <__assert_fail@plt>
   166fc:	push	{r4, r5, r6, sl, fp, lr}
   16700:	add	fp, sp, #16
   16704:	mov	ip, r3
   16708:	mov	lr, r2
   1670c:	ands	r2, r2, #1
   16710:	mov	r3, r1
   16714:	mov	r4, r0
   16718:	moveq	r3, ip
   1671c:	moveq	r4, lr
   16720:	moveq	ip, r1
   16724:	moveq	lr, r0
   16728:	orr	r2, r4, r3
   1672c:	cmp	r2, #0
   16730:	beq	1678c <__assert_fail@plt+0x4d10>
   16734:	lsrs	r6, ip, #1
   16738:	rrx	r1, lr
   1673c:	mov	ip, r3
   16740:	mov	r2, r4
   16744:	lsrs	r3, r3, #1
   16748:	rrx	r4, r4
   1674c:	tst	r2, #1
   16750:	beq	1673c <__assert_fail@plt+0x4cc0>
   16754:	subs	r0, r4, r1
   16758:	sbc	r5, r3, r6
   1675c:	orrs	r3, r0, r5
   16760:	beq	16788 <__assert_fail@plt+0x4d0c>
   16764:	eor	r2, r0, r5, asr #31
   16768:	eor	r3, r5, r5, asr #31
   1676c:	and	r0, r0, r5, asr #31
   16770:	subs	r4, r2, r5, asr #31
   16774:	and	r2, r5, r5, asr #31
   16778:	sbc	r3, r3, r5, asr #31
   1677c:	adds	r1, r0, r1
   16780:	adc	r6, r2, r6
   16784:	b	1673c <__assert_fail@plt+0x4cc0>
   16788:	orr	lr, r2, #1
   1678c:	mov	r0, lr
   16790:	mov	r1, ip
   16794:	pop	{r4, r5, r6, sl, fp, pc}
   16798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1679c:	add	fp, sp, #28
   167a0:	sub	sp, sp, #4
   167a4:	ldr	ip, [fp, #24]
   167a8:	tst	ip, #1
   167ac:	beq	1697c <__assert_fail@plt+0x4f00>
   167b0:	add	sl, fp, #12
   167b4:	mov	r5, r3
   167b8:	ldr	r8, [fp, #8]
   167bc:	ldr	r1, [fp, #28]
   167c0:	mov	lr, r2
   167c4:	ldm	sl, {r3, r9, sl}
   167c8:	orr	r2, r8, r2
   167cc:	orr	r4, r3, r5
   167d0:	orrs	r2, r2, r4
   167d4:	beq	1680c <__assert_fail@plt+0x4d90>
   167d8:	tst	r8, #1
   167dc:	str	r0, [sp]
   167e0:	bne	1681c <__assert_fail@plt+0x4da0>
   167e4:	lsrs	r5, r5, #1
   167e8:	rrx	r0, lr
   167ec:	lsrs	r3, r3, #1
   167f0:	rrx	r2, r8
   167f4:	tst	r8, #2
   167f8:	mov	r8, r2
   167fc:	orr	r3, r3, lr, lsl #31
   16800:	mov	lr, r0
   16804:	beq	167e4 <__assert_fail@plt+0x4d68>
   16808:	b	16824 <__assert_fail@plt+0x4da8>
   1680c:	stm	r0, {r9, sl}
   16810:	mov	r0, ip
   16814:	sub	sp, fp, #28
   16818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1681c:	mov	r2, r8
   16820:	mov	r0, lr
   16824:	orr	r6, r0, r9
   16828:	orr	r4, r5, sl
   1682c:	orrs	r6, r6, r4
   16830:	beq	16948 <__assert_fail@plt+0x4ecc>
   16834:	subs	r6, r9, r0
   16838:	sbcs	r6, sl, r5
   1683c:	bcc	1685c <__assert_fail@plt+0x4de0>
   16840:	subs	r6, ip, r2
   16844:	sbcs	r6, r1, r3
   16848:	bcs	168b0 <__assert_fail@plt+0x4e34>
   1684c:	eor	r6, r0, r9
   16850:	eor	r4, r5, sl
   16854:	orrs	r6, r6, r4
   16858:	bne	168b0 <__assert_fail@plt+0x4e34>
   1685c:	subs	r7, r0, r9
   16860:	sbc	lr, r5, sl
   16864:	subs	r4, r7, #1
   16868:	sbc	r5, lr, #0
   1686c:	subs	r6, r2, ip
   16870:	mov	r2, #0
   16874:	sbcs	r3, r3, r1
   16878:	movwcc	r2, #1
   1687c:	cmp	r2, #0
   16880:	moveq	r4, r7
   16884:	moveq	r5, lr
   16888:	lsrs	r5, r5, #1
   1688c:	rrx	r0, r4
   16890:	lsrs	r3, r3, #1
   16894:	rrx	r2, r6
   16898:	tst	r6, #2
   1689c:	mov	r6, r2
   168a0:	orr	r3, r3, r4, lsl #31
   168a4:	mov	r4, r0
   168a8:	beq	16888 <__assert_fail@plt+0x4e0c>
   168ac:	b	16938 <__assert_fail@plt+0x4ebc>
   168b0:	subs	r6, r2, ip
   168b4:	sbcs	r6, r3, r1
   168b8:	mov	r6, #0
   168bc:	movwcc	r6, #1
   168c0:	subs	r4, r0, r9
   168c4:	sbcs	r4, r5, sl
   168c8:	bcc	168e8 <__assert_fail@plt+0x4e6c>
   168cc:	eor	lr, r0, r9
   168d0:	eor	r4, r5, sl
   168d4:	orr	r4, lr, r4
   168d8:	clz	r4, r4
   168dc:	lsr	r4, r4, #5
   168e0:	ands	r6, r6, r4
   168e4:	beq	16968 <__assert_fail@plt+0x4eec>
   168e8:	subs	lr, r9, r0
   168ec:	mov	r7, #0
   168f0:	sbc	r8, sl, r5
   168f4:	subs	r6, lr, #1
   168f8:	sbc	sl, r8, #0
   168fc:	subs	r4, ip, r2
   16900:	sbcs	r1, r1, r3
   16904:	movwcc	r7, #1
   16908:	cmp	r7, #0
   1690c:	moveq	r6, lr
   16910:	moveq	sl, r8
   16914:	lsrs	sl, sl, #1
   16918:	rrx	r9, r6
   1691c:	lsrs	r1, r1, #1
   16920:	rrx	ip, r4
   16924:	tst	r4, #2
   16928:	mov	r4, ip
   1692c:	orr	r1, r1, r6, lsl #31
   16930:	mov	r6, r9
   16934:	beq	16914 <__assert_fail@plt+0x4e98>
   16938:	orr	r7, r0, r9
   1693c:	orr	r6, r5, sl
   16940:	orrs	r7, r7, r6
   16944:	bne	16834 <__assert_fail@plt+0x4db8>
   16948:	ldr	r0, [sp]
   1694c:	mov	r7, #0
   16950:	str	r7, [r0]
   16954:	str	r7, [r0, #4]
   16958:	mov	r0, ip
   1695c:	sub	sp, fp, #28
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16964:	b	166fc <__assert_fail@plt+0x4c80>
   16968:	ldr	r1, [sp]
   1696c:	mov	ip, r2
   16970:	stm	r1, {r0, r5}
   16974:	mov	r1, r3
   16978:	b	16810 <__assert_fail@plt+0x4d94>
   1697c:	movw	r0, #51432	; 0xc8e8
   16980:	movw	r1, #50952	; 0xc708
   16984:	movw	r3, #51439	; 0xc8ef
   16988:	mov	r2, #476	; 0x1dc
   1698c:	movt	r0, #1
   16990:	movt	r1, #1
   16994:	movt	r3, #1
   16998:	bl	11a7c <__assert_fail@plt>
   1699c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a0:	add	fp, sp, #28
   169a4:	push	{r0}		; (str r0, [sp, #-4]!)
   169a8:	ldr	ip, [fp, #20]
   169ac:	ldr	r0, [fp, #16]
   169b0:	orrs	r1, r0, ip
   169b4:	beq	16ba8 <__assert_fail@plt+0x512c>
   169b8:	ldr	r1, [fp, #12]
   169bc:	ldr	r8, [fp, #8]
   169c0:	mov	r9, r2
   169c4:	mov	sl, r3
   169c8:	orrs	r2, r2, r3
   169cc:	beq	16b8c <__assert_fail@plt+0x5110>
   169d0:	mov	r3, #0
   169d4:	mov	r4, r0
   169d8:	mov	r6, ip
   169dc:	cmp	r3, ip, lsr #24
   169e0:	bne	16a08 <__assert_fail@plt+0x4f8c>
   169e4:	mov	r3, #0
   169e8:	mov	r4, r0
   169ec:	mov	r6, ip
   169f0:	lsl	r2, r6, #8
   169f4:	add	r3, r3, #8
   169f8:	orr	r6, r2, r4, lsr #24
   169fc:	lsl	r4, r4, #8
   16a00:	cmp	r6, #16777216	; 0x1000000
   16a04:	bcc	169f0 <__assert_fail@plt+0x4f74>
   16a08:	mvn	r2, #0
   16a0c:	cmp	r6, #0
   16a10:	bmi	16a34 <__assert_fail@plt+0x4fb8>
   16a14:	lsl	r5, r6, #1
   16a18:	add	r3, r3, #1
   16a1c:	orr	r6, r5, r4, lsr #31
   16a20:	lsl	r5, r4, #1
   16a24:	subs	r4, r2, r4, lsl #1
   16a28:	sbcs	r4, r2, r6
   16a2c:	mov	r4, r5
   16a30:	blt	16a14 <__assert_fail@plt+0x4f98>
   16a34:	mov	r6, #0
   16a38:	mov	r4, r9
   16a3c:	mov	r7, sl
   16a40:	cmp	r6, sl, lsr #24
   16a44:	bne	16a6c <__assert_fail@plt+0x4ff0>
   16a48:	mov	r6, #0
   16a4c:	mov	r4, r9
   16a50:	mov	r7, sl
   16a54:	lsl	r5, r7, #8
   16a58:	add	r6, r6, #8
   16a5c:	orr	r7, r5, r4, lsr #24
   16a60:	lsl	r4, r4, #8
   16a64:	cmp	r7, #16777216	; 0x1000000
   16a68:	bcc	16a54 <__assert_fail@plt+0x4fd8>
   16a6c:	subs	r5, r2, r4
   16a70:	sbcs	r5, r2, r7
   16a74:	bge	16a98 <__assert_fail@plt+0x501c>
   16a78:	lsl	r5, r7, #1
   16a7c:	add	r6, r6, #1
   16a80:	orr	r7, r5, r4, lsr #31
   16a84:	lsl	r5, r4, #1
   16a88:	subs	r4, r2, r4, lsl #1
   16a8c:	sbcs	r4, r2, r7
   16a90:	mov	r4, r5
   16a94:	blt	16a78 <__assert_fail@plt+0x4ffc>
   16a98:	sub	lr, r3, r6
   16a9c:	cmp	lr, #1
   16aa0:	blt	16b94 <__assert_fail@plt+0x5118>
   16aa4:	ldr	r7, [fp, #28]
   16aa8:	rsb	r6, lr, #32
   16aac:	subs	r3, lr, #32
   16ab0:	rsb	r5, lr, #64	; 0x40
   16ab4:	mov	r4, r0
   16ab8:	lsr	r2, r0, r6
   16abc:	orr	r2, r2, ip, lsl lr
   16ac0:	lslpl	r2, r0, r3
   16ac4:	cmp	r6, #0
   16ac8:	lsr	ip, r7, r5
   16acc:	movwpl	ip, #0
   16ad0:	cmp	r6, #0
   16ad4:	orr	r2, ip, r2
   16ad8:	ldr	ip, [fp, #24]
   16adc:	lsr	r0, ip, r5
   16ae0:	rsb	r5, r5, #32
   16ae4:	orr	r0, r0, r7, lsl r5
   16ae8:	lsrpl	r0, r7, r6
   16aec:	cmp	r3, #0
   16af0:	lsl	r5, r4, lr
   16af4:	movwpl	r5, #0
   16af8:	orr	r5, r0, r5
   16afc:	lsr	r0, ip, r6
   16b00:	orr	r6, r0, r7, lsl lr
   16b04:	lslpl	r6, ip, r3
   16b08:	cmp	r3, #0
   16b0c:	lsl	r7, ip, lr
   16b10:	movwpl	r7, #0
   16b14:	subs	r0, r5, r9
   16b18:	mov	r4, r5
   16b1c:	sbcs	r0, r2, sl
   16b20:	bcc	16b40 <__assert_fail@plt+0x50c4>
   16b24:	subs	r0, r8, r7
   16b28:	sbcs	r0, r1, r6
   16b2c:	bcc	16b6c <__assert_fail@plt+0x50f0>
   16b30:	eor	r0, r9, r4
   16b34:	eor	r5, sl, r2
   16b38:	orrs	r0, r0, r5
   16b3c:	bne	16b6c <__assert_fail@plt+0x50f0>
   16b40:	subs	r0, r9, r4
   16b44:	mov	r3, #0
   16b48:	sbc	r5, sl, r2
   16b4c:	subs	r9, r0, #1
   16b50:	sbc	sl, r5, #0
   16b54:	subs	r8, r8, r7
   16b58:	sbcs	r1, r1, r6
   16b5c:	movwcc	r3, #1
   16b60:	cmp	r3, #0
   16b64:	moveq	r9, r0
   16b68:	moveq	sl, r5
   16b6c:	lsrs	r2, r2, #1
   16b70:	rrx	r5, r4
   16b74:	lsrs	r0, r6, #1
   16b78:	rrx	r7, r7
   16b7c:	subs	lr, lr, #1
   16b80:	orr	r6, r0, r4, lsl #31
   16b84:	bne	16b14 <__assert_fail@plt+0x5098>
   16b88:	b	16b94 <__assert_fail@plt+0x5118>
   16b8c:	mov	r9, #0
   16b90:	mov	sl, #0
   16b94:	ldr	r0, [sp]
   16b98:	stm	r0, {r9, sl}
   16b9c:	mov	r0, r8
   16ba0:	sub	sp, fp, #28
   16ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba8:	movw	r0, #51515	; 0xc93b
   16bac:	movw	r1, #50952	; 0xc708
   16bb0:	movw	r3, #51523	; 0xc943
   16bb4:	movw	r2, #411	; 0x19b
   16bb8:	movt	r0, #1
   16bbc:	movt	r1, #1
   16bc0:	movt	r3, #1
   16bc4:	bl	11a7c <__assert_fail@plt>
   16bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bcc:	add	fp, sp, #28
   16bd0:	sub	sp, sp, #76	; 0x4c
   16bd4:	mov	r1, #1
   16bd8:	mov	r4, r0
   16bdc:	mov	r5, #1
   16be0:	bl	11a1c <__gmpz_cmp_ui@plt>
   16be4:	cmp	r0, #1
   16be8:	blt	16da8 <__assert_fail@plt+0x532c>
   16bec:	movw	r1, #60793	; 0xed79
   16bf0:	mov	r0, r4
   16bf4:	movt	r1, #381	; 0x17d
   16bf8:	bl	11a1c <__gmpz_cmp_ui@plt>
   16bfc:	cmp	r0, #0
   16c00:	bmi	16de0 <__assert_fail@plt+0x5364>
   16c04:	sub	sl, fp, #40	; 0x28
   16c08:	add	r9, sp, #52	; 0x34
   16c0c:	add	r7, sp, #40	; 0x28
   16c10:	add	r8, sp, #28
   16c14:	mov	r6, #0
   16c18:	mov	r0, sl
   16c1c:	mov	r1, r9
   16c20:	mov	r2, r7
   16c24:	mov	r3, r8
   16c28:	str	r6, [sp]
   16c2c:	bl	1177c <__gmpz_inits@plt>
   16c30:	mov	r0, r7
   16c34:	mov	r1, r4
   16c38:	mov	r2, #1
   16c3c:	bl	116c8 <__gmpz_sub_ui@plt>
   16c40:	mov	r0, r7
   16c44:	mov	r1, #0
   16c48:	bl	1168c <__gmpz_scan1@plt>
   16c4c:	mov	r5, r0
   16c50:	mov	r0, sl
   16c54:	mov	r1, r7
   16c58:	mov	r2, r5
   16c5c:	bl	11944 <__gmpz_tdiv_q_2exp@plt>
   16c60:	mov	r0, r9
   16c64:	mov	r1, #2
   16c68:	bl	116f8 <__gmpz_set_ui@plt>
   16c6c:	mov	r0, r4
   16c70:	mov	r1, r7
   16c74:	mov	r2, r9
   16c78:	mov	r3, r8
   16c7c:	str	sl, [sp]
   16c80:	str	r5, [sp, #12]
   16c84:	str	r5, [sp, #4]
   16c88:	bl	17324 <__assert_fail@plt+0x58a8>
   16c8c:	cmp	r0, #0
   16c90:	mov	r5, #0
   16c94:	beq	16dc8 <__assert_fail@plt+0x534c>
   16c98:	add	r5, sp, #28
   16c9c:	add	r6, sp, #40	; 0x28
   16ca0:	mov	r0, r5
   16ca4:	mov	r1, r6
   16ca8:	bl	11788 <__gmpz_set@plt>
   16cac:	add	r1, sp, #16
   16cb0:	mov	r0, r5
   16cb4:	bl	124b4 <__assert_fail@plt+0xa38>
   16cb8:	mov	r8, #0
   16cbc:	add	r7, sp, #52	; 0x34
   16cc0:	ldr	r0, [sp, #24]
   16cc4:	cmp	r0, #0
   16cc8:	beq	16db0 <__assert_fail@plt+0x5334>
   16ccc:	mov	sl, #1
   16cd0:	mov	r9, #0
   16cd4:	ldr	r0, [sp, #16]
   16cd8:	mov	r1, r6
   16cdc:	add	r2, r0, r9
   16ce0:	mov	r0, r5
   16ce4:	bl	11770 <__gmpz_divexact@plt>
   16ce8:	mov	r0, r5
   16cec:	mov	r1, r7
   16cf0:	mov	r2, r5
   16cf4:	mov	r3, r4
   16cf8:	bl	11758 <__gmpz_powm@plt>
   16cfc:	mov	r0, r5
   16d00:	mov	r1, #1
   16d04:	bl	11a1c <__gmpz_cmp_ui@plt>
   16d08:	cmp	r0, #0
   16d0c:	beq	16d28 <__assert_fail@plt+0x52ac>
   16d10:	ldr	r2, [sp, #24]
   16d14:	add	r1, sl, #1
   16d18:	add	r9, r9, #12
   16d1c:	cmp	sl, r2
   16d20:	mov	sl, r1
   16d24:	bcc	16cd4 <__assert_fail@plt+0x5258>
   16d28:	cmp	r0, #0
   16d2c:	bne	16db0 <__assert_fail@plt+0x5334>
   16d30:	movw	r0, #62624	; 0xf4a0
   16d34:	mov	r1, r7
   16d38:	movt	r0, #1
   16d3c:	ldrb	r2, [r0, r8]
   16d40:	mov	r0, r7
   16d44:	bl	11884 <__gmpz_add_ui@plt>
   16d48:	sub	r0, fp, #40	; 0x28
   16d4c:	mov	r1, r6
   16d50:	mov	r2, r7
   16d54:	mov	r3, r5
   16d58:	str	r0, [sp]
   16d5c:	ldr	r0, [sp, #12]
   16d60:	str	r0, [sp, #4]
   16d64:	mov	r0, r4
   16d68:	bl	17324 <__assert_fail@plt+0x58a8>
   16d6c:	cmp	r0, #0
   16d70:	beq	16db8 <__assert_fail@plt+0x533c>
   16d74:	add	r8, r8, #1
   16d78:	cmp	r8, #668	; 0x29c
   16d7c:	bne	16cc0 <__assert_fail@plt+0x5244>
   16d80:	movw	r1, #50965	; 0xc715
   16d84:	mov	r0, #0
   16d88:	mov	r2, #5
   16d8c:	movt	r1, #1
   16d90:	bl	1174c <dcgettext@plt>
   16d94:	mov	r2, r0
   16d98:	mov	r0, #0
   16d9c:	mov	r1, #0
   16da0:	bl	1183c <error@plt>
   16da4:	bl	11a64 <abort@plt>
   16da8:	mov	r5, #0
   16dac:	b	16de0 <__assert_fail@plt+0x5364>
   16db0:	mov	r5, #1
   16db4:	b	16dbc <__assert_fail@plt+0x5340>
   16db8:	mov	r5, #0
   16dbc:	add	r0, sp, #16
   16dc0:	bl	12640 <__assert_fail@plt+0xbc4>
   16dc4:	mov	r6, #0
   16dc8:	sub	r0, fp, #40	; 0x28
   16dcc:	add	r1, sp, #52	; 0x34
   16dd0:	add	r2, sp, #40	; 0x28
   16dd4:	add	r3, sp, #28
   16dd8:	str	r6, [sp]
   16ddc:	bl	116d4 <__gmpz_clears@plt>
   16de0:	mov	r0, r5
   16de4:	sub	sp, fp, #28
   16de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16df0:	add	fp, sp, #28
   16df4:	sub	sp, sp, #20
   16df8:	mov	r5, r0
   16dfc:	ldr	r0, [r0]
   16e00:	mov	sl, r1
   16e04:	ldr	r4, [r5, #8]
   16e08:	ldr	r6, [r5, #4]
   16e0c:	subs	r8, r4, #1
   16e10:	mov	r9, r8
   16e14:	bmi	16e68 <__assert_fail@plt+0x53ec>
   16e18:	add	r1, r8, r8, lsl #1
   16e1c:	str	r6, [sp, #16]
   16e20:	mov	r7, r4
   16e24:	str	r0, [sp, #12]
   16e28:	add	r6, r0, r1, lsl #2
   16e2c:	mov	r0, r6
   16e30:	mov	r1, sl
   16e34:	bl	119c8 <__gmpz_cmp@plt>
   16e38:	cmp	r0, #1
   16e3c:	blt	16e54 <__assert_fail@plt+0x53d8>
   16e40:	sub	r7, r7, #1
   16e44:	sub	r6, r6, #12
   16e48:	cmp	r7, #0
   16e4c:	bgt	16e2c <__assert_fail@plt+0x53b0>
   16e50:	b	16e5c <__assert_fail@plt+0x53e0>
   16e54:	cmp	r0, #0
   16e58:	beq	16f28 <__assert_fail@plt+0x54ac>
   16e5c:	ldr	r6, [sp, #16]
   16e60:	ldr	r0, [sp, #12]
   16e64:	sub	r9, r7, #1
   16e68:	str	r5, [sp, #12]
   16e6c:	add	r5, r4, r4, lsl #1
   16e70:	mov	r1, #12
   16e74:	add	r1, r1, r5, lsl #2
   16e78:	bl	1a150 <__assert_fail@plt+0x86d4>
   16e7c:	mov	r7, r0
   16e80:	add	r0, r4, #1
   16e84:	str	r0, [sp, #8]
   16e88:	lsl	r1, r0, #2
   16e8c:	mov	r0, r6
   16e90:	bl	1a150 <__assert_fail@plt+0x86d4>
   16e94:	add	r6, r7, r5, lsl #2
   16e98:	str	r0, [sp, #16]
   16e9c:	str	r7, [sp, #4]
   16ea0:	mov	r0, r6
   16ea4:	bl	11a28 <__gmpz_init@plt>
   16ea8:	cmp	r8, r9
   16eac:	ble	16ee8 <__assert_fail@plt+0x546c>
   16eb0:	ldr	r0, [sp, #16]
   16eb4:	add	r4, r0, r4, lsl #2
   16eb8:	mov	r5, r4
   16ebc:	sub	r7, r6, #12
   16ec0:	mov	r0, r6
   16ec4:	mov	r1, r7
   16ec8:	bl	11788 <__gmpz_set@plt>
   16ecc:	ldr	r0, [r5, #-4]!
   16ed0:	sub	r8, r8, #1
   16ed4:	mov	r6, r7
   16ed8:	cmp	r8, r9
   16edc:	str	r0, [r4]
   16ee0:	mov	r4, r5
   16ee4:	bgt	16ebc <__assert_fail@plt+0x5440>
   16ee8:	ldr	r5, [sp, #4]
   16eec:	add	r4, r9, #1
   16ef0:	mov	r1, sl
   16ef4:	add	r0, r4, r4, lsl #1
   16ef8:	add	r0, r5, r0, lsl #2
   16efc:	bl	11788 <__gmpz_set@plt>
   16f00:	ldr	r1, [sp, #16]
   16f04:	mov	r0, #1
   16f08:	str	r0, [r1, r4, lsl #2]
   16f0c:	ldr	r0, [sp, #12]
   16f10:	str	r5, [r0]
   16f14:	str	r1, [r0, #4]
   16f18:	ldr	r1, [sp, #8]
   16f1c:	str	r1, [r0, #8]
   16f20:	sub	sp, fp, #28
   16f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f28:	ldr	r0, [sp, #16]
   16f2c:	add	r0, r0, r7, lsl #2
   16f30:	ldr	r1, [r0, #-4]
   16f34:	add	r1, r1, #1
   16f38:	str	r1, [r0, #-4]
   16f3c:	b	16f20 <__assert_fail@plt+0x54a4>
   16f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f44:	add	fp, sp, #28
   16f48:	sub	sp, sp, #108	; 0x6c
   16f4c:	mov	r8, r0
   16f50:	movw	r0, #4588	; 0x11ec
   16f54:	mov	r9, r1
   16f58:	str	r2, [sp, #20]
   16f5c:	movt	r0, #3
   16f60:	ldrb	r0, [r0]
   16f64:	cmp	r0, #1
   16f68:	bne	16f8c <__assert_fail@plt+0x5510>
   16f6c:	movw	r0, #4568	; 0x11d8
   16f70:	movw	r2, #51633	; 0xc9b1
   16f74:	mov	r1, #1
   16f78:	mov	r3, r9
   16f7c:	movt	r0, #3
   16f80:	movt	r2, #1
   16f84:	ldr	r0, [r0]
   16f88:	bl	11974 <__fprintf_chk@plt>
   16f8c:	add	r0, sp, #48	; 0x30
   16f90:	add	r1, sp, #36	; 0x24
   16f94:	mov	r2, #0
   16f98:	mov	r6, #0
   16f9c:	bl	1177c <__gmpz_inits@plt>
   16fa0:	sub	r0, fp, #64	; 0x40
   16fa4:	mov	r1, #2
   16fa8:	bl	11878 <__gmpz_init_set_si@plt>
   16fac:	sub	r0, fp, #40	; 0x28
   16fb0:	mov	r1, #2
   16fb4:	bl	11878 <__gmpz_init_set_si@plt>
   16fb8:	sub	r0, fp, #52	; 0x34
   16fbc:	mov	r1, #2
   16fc0:	bl	11878 <__gmpz_init_set_si@plt>
   16fc4:	add	r0, sp, #60	; 0x3c
   16fc8:	mov	r1, #1
   16fcc:	mov	r4, #1
   16fd0:	bl	119bc <__gmpz_init_set_ui@plt>
   16fd4:	mov	r0, r8
   16fd8:	mov	r1, #1
   16fdc:	bl	11a1c <__gmpz_cmp_ui@plt>
   16fe0:	cmp	r0, #0
   16fe4:	beq	172b8 <__assert_fail@plt+0x583c>
   16fe8:	add	r0, r9, #1
   16fec:	add	r7, sp, #48	; 0x30
   16ff0:	sub	r5, fp, #40	; 0x28
   16ff4:	str	r0, [sp, #16]
   16ff8:	mov	r0, #1
   16ffc:	str	r0, [sp, #24]
   17000:	mov	r0, #0
   17004:	str	r0, [sp, #28]
   17008:	mov	r0, r7
   1700c:	mov	r1, r5
   17010:	mov	r2, r5
   17014:	str	r6, [sp, #32]
   17018:	bl	117a0 <__gmpz_mul@plt>
   1701c:	mov	r0, r5
   17020:	mov	r1, r7
   17024:	mov	r2, r8
   17028:	bl	119b0 <__gmpz_mod@plt>
   1702c:	mov	r0, r5
   17030:	mov	r1, r5
   17034:	mov	r2, r9
   17038:	bl	11884 <__gmpz_add_ui@plt>
   1703c:	mov	r0, r7
   17040:	sub	r1, fp, #52	; 0x34
   17044:	mov	r2, r5
   17048:	bl	11728 <__gmpz_sub@plt>
   1704c:	add	r6, sp, #36	; 0x24
   17050:	mov	sl, r5
   17054:	add	r5, sp, #60	; 0x3c
   17058:	mov	r2, r7
   1705c:	mov	r0, r6
   17060:	mov	r1, r5
   17064:	bl	117a0 <__gmpz_mul@plt>
   17068:	mov	r0, r5
   1706c:	mov	r1, r6
   17070:	mov	r2, r8
   17074:	mov	r5, sl
   17078:	bl	119b0 <__gmpz_mod@plt>
   1707c:	and	r0, r4, #31
   17080:	teq	r0, #1
   17084:	bne	170bc <__assert_fail@plt+0x5640>
   17088:	mov	r0, r7
   1708c:	add	r1, sp, #60	; 0x3c
   17090:	mov	r2, r8
   17094:	bl	119f8 <__gmpz_gcd@plt>
   17098:	mov	r0, r7
   1709c:	mov	r1, #1
   170a0:	bl	11a1c <__gmpz_cmp_ui@plt>
   170a4:	cmp	r0, #0
   170a8:	sub	r6, fp, #64	; 0x40
   170ac:	bne	1717c <__assert_fail@plt+0x5700>
   170b0:	mov	r0, r6
   170b4:	mov	r1, r5
   170b8:	bl	11788 <__gmpz_set@plt>
   170bc:	ldr	r6, [sp, #32]
   170c0:	subs	r4, r4, #1
   170c4:	sbc	r6, r6, #0
   170c8:	orrs	r0, r4, r6
   170cc:	bne	17008 <__assert_fail@plt+0x558c>
   170d0:	sub	r0, fp, #52	; 0x34
   170d4:	mov	r1, r5
   170d8:	bl	11788 <__gmpz_set@plt>
   170dc:	ldr	r0, [sp, #28]
   170e0:	ldr	r6, [sp, #24]
   170e4:	lsl	r1, r0, #1
   170e8:	str	r0, [sp, #28]
   170ec:	orrs	r0, r6, r0
   170f0:	str	r1, [sp, #32]
   170f4:	beq	17148 <__assert_fail@plt+0x56cc>
   170f8:	mov	r4, #0
   170fc:	mov	sl, #0
   17100:	mov	r0, r7
   17104:	mov	r1, r5
   17108:	mov	r2, r5
   1710c:	bl	117a0 <__gmpz_mul@plt>
   17110:	mov	r0, r5
   17114:	mov	r1, r7
   17118:	mov	r2, r8
   1711c:	bl	119b0 <__gmpz_mod@plt>
   17120:	mov	r0, r5
   17124:	mov	r1, r5
   17128:	mov	r2, r9
   1712c:	bl	11884 <__gmpz_add_ui@plt>
   17130:	adds	r4, r4, #1
   17134:	adc	sl, sl, #0
   17138:	subs	r0, r4, r6
   1713c:	ldr	r0, [sp, #28]
   17140:	sbcs	r0, sl, r0
   17144:	bcc	17100 <__assert_fail@plt+0x5684>
   17148:	ldr	r0, [sp, #32]
   1714c:	mov	r1, r5
   17150:	orr	sl, r0, r6, lsr #31
   17154:	lsl	r0, r6, #1
   17158:	str	r0, [sp, #32]
   1715c:	sub	r0, fp, #64	; 0x40
   17160:	bl	11788 <__gmpz_set@plt>
   17164:	ldr	r0, [sp, #32]
   17168:	mov	r4, r6
   1716c:	ldr	r6, [sp, #28]
   17170:	str	sl, [sp, #28]
   17174:	str	r0, [sp, #24]
   17178:	b	17008 <__assert_fail@plt+0x558c>
   1717c:	mov	r0, r7
   17180:	mov	r1, r6
   17184:	mov	r2, r6
   17188:	bl	117a0 <__gmpz_mul@plt>
   1718c:	mov	r0, r6
   17190:	mov	r1, r7
   17194:	mov	r2, r8
   17198:	bl	119b0 <__gmpz_mod@plt>
   1719c:	mov	r0, r6
   171a0:	mov	r1, r6
   171a4:	mov	r2, r9
   171a8:	bl	11884 <__gmpz_add_ui@plt>
   171ac:	mov	r0, r7
   171b0:	sub	r1, fp, #52	; 0x34
   171b4:	mov	r2, r6
   171b8:	bl	11728 <__gmpz_sub@plt>
   171bc:	mov	r0, r7
   171c0:	mov	r1, r7
   171c4:	mov	r2, r8
   171c8:	bl	119f8 <__gmpz_gcd@plt>
   171cc:	mov	r0, r7
   171d0:	mov	r1, #1
   171d4:	bl	11a1c <__gmpz_cmp_ui@plt>
   171d8:	cmp	r0, #0
   171dc:	beq	1717c <__assert_fail@plt+0x5700>
   171e0:	mov	r0, r8
   171e4:	mov	r1, r8
   171e8:	mov	r2, r7
   171ec:	bl	11770 <__gmpz_divexact@plt>
   171f0:	mov	r0, r7
   171f4:	bl	16bc8 <__assert_fail@plt+0x514c>
   171f8:	cmp	r0, #0
   171fc:	beq	17210 <__assert_fail@plt+0x5794>
   17200:	ldr	r0, [sp, #20]
   17204:	mov	r1, r7
   17208:	bl	16dec <__assert_fail@plt+0x5370>
   1720c:	b	17250 <__assert_fail@plt+0x57d4>
   17210:	movw	r0, #4588	; 0x11ec
   17214:	movt	r0, #3
   17218:	ldrb	r0, [r0]
   1721c:	cmp	r0, #1
   17220:	bne	17240 <__assert_fail@plt+0x57c4>
   17224:	movw	r0, #4568	; 0x11d8
   17228:	movw	r2, #51654	; 0xc9c6
   1722c:	mov	r1, #1
   17230:	movt	r0, #3
   17234:	movt	r2, #1
   17238:	ldr	r0, [r0]
   1723c:	bl	11974 <__fprintf_chk@plt>
   17240:	ldr	r1, [sp, #16]
   17244:	ldr	r2, [sp, #20]
   17248:	mov	r0, r7
   1724c:	bl	16f40 <__assert_fail@plt+0x54c4>
   17250:	mov	r0, r8
   17254:	bl	16bc8 <__assert_fail@plt+0x514c>
   17258:	cmp	r0, #0
   1725c:	bne	172ac <__assert_fail@plt+0x5830>
   17260:	mov	r0, r5
   17264:	mov	r1, r5
   17268:	mov	r2, r8
   1726c:	bl	119b0 <__gmpz_mod@plt>
   17270:	sub	r0, fp, #52	; 0x34
   17274:	mov	r2, r8
   17278:	mov	r1, r0
   1727c:	bl	119b0 <__gmpz_mod@plt>
   17280:	mov	r0, r6
   17284:	mov	r1, r6
   17288:	mov	r2, r8
   1728c:	bl	119b0 <__gmpz_mod@plt>
   17290:	mov	r0, r8
   17294:	mov	r1, #1
   17298:	bl	11a1c <__gmpz_cmp_ui@plt>
   1729c:	ldr	r6, [sp, #32]
   172a0:	cmp	r0, #0
   172a4:	bne	17008 <__assert_fail@plt+0x558c>
   172a8:	b	172b8 <__assert_fail@plt+0x583c>
   172ac:	ldr	r0, [sp, #20]
   172b0:	mov	r1, r8
   172b4:	bl	16dec <__assert_fail@plt+0x5370>
   172b8:	sub	r1, fp, #40	; 0x28
   172bc:	mov	r0, #0
   172c0:	add	r2, sp, #48	; 0x30
   172c4:	sub	r3, fp, #52	; 0x34
   172c8:	str	r1, [sp]
   172cc:	sub	r1, fp, #64	; 0x40
   172d0:	str	r0, [sp, #8]
   172d4:	add	r0, sp, #60	; 0x3c
   172d8:	str	r1, [sp, #4]
   172dc:	add	r1, sp, #36	; 0x24
   172e0:	bl	116d4 <__gmpz_clears@plt>
   172e4:	sub	sp, fp, #28
   172e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172ec:	push	{r4, r5, fp, lr}
   172f0:	add	fp, sp, #8
   172f4:	sub	sp, sp, #16
   172f8:	add	r5, sp, #4
   172fc:	mov	r4, r0
   17300:	mov	r0, r5
   17304:	bl	119bc <__gmpz_init_set_ui@plt>
   17308:	mov	r0, r4
   1730c:	mov	r1, r5
   17310:	bl	16dec <__assert_fail@plt+0x5370>
   17314:	mov	r0, r5
   17318:	bl	118fc <__gmpz_clear@plt>
   1731c:	sub	sp, fp, #8
   17320:	pop	{r4, r5, fp, pc}
   17324:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17328:	add	fp, sp, #24
   1732c:	mov	r4, r3
   17330:	mov	r3, r2
   17334:	ldr	r2, [fp, #8]
   17338:	mov	r7, r0
   1733c:	mov	r6, r1
   17340:	mov	r1, r3
   17344:	mov	r0, r4
   17348:	mov	r3, r7
   1734c:	bl	11758 <__gmpz_powm@plt>
   17350:	mov	r0, r4
   17354:	mov	r1, #1
   17358:	mov	r8, #1
   1735c:	bl	11a1c <__gmpz_cmp_ui@plt>
   17360:	cmp	r0, #0
   17364:	beq	173e4 <__assert_fail@plt+0x5968>
   17368:	mov	r0, r4
   1736c:	mov	r1, r6
   17370:	bl	119c8 <__gmpz_cmp@plt>
   17374:	cmp	r0, #0
   17378:	beq	173e4 <__assert_fail@plt+0x5968>
   1737c:	ldr	r9, [fp, #12]
   17380:	mov	r8, #0
   17384:	cmp	r9, #2
   17388:	bcc	173e4 <__assert_fail@plt+0x5968>
   1738c:	mov	r5, #2
   17390:	mov	r0, r4
   17394:	mov	r1, r4
   17398:	mov	r2, #2
   1739c:	mov	r3, r7
   173a0:	bl	11a34 <__gmpz_powm_ui@plt>
   173a4:	mov	r0, r4
   173a8:	mov	r1, r6
   173ac:	bl	119c8 <__gmpz_cmp@plt>
   173b0:	cmp	r0, #0
   173b4:	beq	173e0 <__assert_fail@plt+0x5964>
   173b8:	mov	r0, r4
   173bc:	mov	r1, #1
   173c0:	bl	11a1c <__gmpz_cmp_ui@plt>
   173c4:	cmp	r0, #0
   173c8:	beq	173e4 <__assert_fail@plt+0x5968>
   173cc:	add	r0, r5, #1
   173d0:	cmp	r5, r9
   173d4:	mov	r5, r0
   173d8:	bcc	17390 <__assert_fail@plt+0x5914>
   173dc:	b	173e4 <__assert_fail@plt+0x5968>
   173e0:	mov	r8, #1
   173e4:	mov	r0, r8
   173e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   173ec:	movw	r1, #4600	; 0x11f8
   173f0:	movt	r1, #3
   173f4:	str	r0, [r1]
   173f8:	bx	lr
   173fc:	movw	r1, #4604	; 0x11fc
   17400:	movt	r1, #3
   17404:	strb	r0, [r1]
   17408:	bx	lr
   1740c:	push	{r4, r5, r6, sl, fp, lr}
   17410:	add	fp, sp, #16
   17414:	sub	sp, sp, #8
   17418:	movw	r0, #4580	; 0x11e4
   1741c:	movt	r0, #3
   17420:	ldr	r0, [r0]
   17424:	bl	1a74c <__assert_fail@plt+0x8cd0>
   17428:	cmp	r0, #0
   1742c:	beq	17454 <__assert_fail@plt+0x59d8>
   17430:	movw	r0, #4604	; 0x11fc
   17434:	movt	r0, #3
   17438:	ldrb	r0, [r0]
   1743c:	cmp	r0, #0
   17440:	beq	17474 <__assert_fail@plt+0x59f8>
   17444:	bl	11908 <__errno_location@plt>
   17448:	ldr	r0, [r0]
   1744c:	cmp	r0, #32
   17450:	bne	17474 <__assert_fail@plt+0x59f8>
   17454:	movw	r0, #4568	; 0x11d8
   17458:	movt	r0, #3
   1745c:	ldr	r0, [r0]
   17460:	bl	1a74c <__assert_fail@plt+0x8cd0>
   17464:	cmp	r0, #0
   17468:	subeq	sp, fp, #16
   1746c:	popeq	{r4, r5, r6, sl, fp, pc}
   17470:	b	174e4 <__assert_fail@plt+0x5a68>
   17474:	movw	r1, #50804	; 0xc674
   17478:	mov	r0, #0
   1747c:	mov	r2, #5
   17480:	movt	r1, #1
   17484:	bl	1174c <dcgettext@plt>
   17488:	mov	r4, r0
   1748c:	movw	r0, #4600	; 0x11f8
   17490:	movt	r0, #3
   17494:	ldr	r6, [r0]
   17498:	bl	11908 <__errno_location@plt>
   1749c:	ldr	r5, [r0]
   174a0:	cmp	r6, #0
   174a4:	bne	174c0 <__assert_fail@plt+0x5a44>
   174a8:	movw	r2, #64121	; 0xfa79
   174ac:	mov	r0, #0
   174b0:	mov	r1, r5
   174b4:	mov	r3, r4
   174b8:	movt	r2, #1
   174bc:	b	174e0 <__assert_fail@plt+0x5a64>
   174c0:	mov	r0, r6
   174c4:	bl	19328 <__assert_fail@plt+0x78ac>
   174c8:	movw	r2, #64117	; 0xfa75
   174cc:	mov	r3, r0
   174d0:	str	r4, [sp]
   174d4:	mov	r0, #0
   174d8:	mov	r1, r5
   174dc:	movt	r2, #1
   174e0:	bl	1183c <error@plt>
   174e4:	movw	r0, #4480	; 0x1180
   174e8:	movt	r0, #3
   174ec:	ldr	r0, [r0]
   174f0:	bl	11710 <_exit@plt>
   174f4:	push	{r4, r5, r6, sl, fp, lr}
   174f8:	add	fp, sp, #16
   174fc:	mov	r4, r0
   17500:	bl	11908 <__errno_location@plt>
   17504:	ldr	r6, [r0]
   17508:	mov	r5, r0
   1750c:	mov	r0, r4
   17510:	bl	11704 <free@plt>
   17514:	str	r6, [r5]
   17518:	pop	{r4, r5, r6, sl, fp, pc}
   1751c:	push	{r4, r5, r6, r7, fp, lr}
   17520:	add	fp, sp, #16
   17524:	cmp	r2, #0
   17528:	beq	17570 <__assert_fail@plt+0x5af4>
   1752c:	mov	r5, r2
   17530:	mov	r6, r1
   17534:	mov	r7, r0
   17538:	mov	r4, #0
   1753c:	mov	r0, r7
   17540:	mov	r1, r6
   17544:	mov	r2, r5
   17548:	bl	19924 <__assert_fail@plt+0x7ea8>
   1754c:	cmn	r0, #1
   17550:	beq	17584 <__assert_fail@plt+0x5b08>
   17554:	cmp	r0, #0
   17558:	beq	17578 <__assert_fail@plt+0x5afc>
   1755c:	subs	r5, r5, r0
   17560:	add	r6, r6, r0
   17564:	add	r4, r0, r4
   17568:	bne	1753c <__assert_fail@plt+0x5ac0>
   1756c:	b	17584 <__assert_fail@plt+0x5b08>
   17570:	mov	r4, #0
   17574:	b	17584 <__assert_fail@plt+0x5b08>
   17578:	bl	11908 <__errno_location@plt>
   1757c:	mov	r1, #28
   17580:	str	r1, [r0]
   17584:	mov	r0, r4
   17588:	pop	{r4, r5, r6, r7, fp, pc}
   1758c:	push	{r4, r5, r6, sl, fp, lr}
   17590:	add	fp, sp, #16
   17594:	mov	r5, r0
   17598:	mov	r0, #0
   1759c:	mov	r4, r1
   175a0:	add	r6, r2, #19
   175a4:	strb	r0, [r2, #20]
   175a8:	mov	r0, r5
   175ac:	mov	r1, r4
   175b0:	mov	r2, #10
   175b4:	mov	r3, #0
   175b8:	bl	1c18c <__assert_fail@plt+0xa710>
   175bc:	add	r2, r0, r0, lsl #2
   175c0:	sub	r2, r5, r2, lsl #1
   175c4:	orr	r2, r2, #48	; 0x30
   175c8:	strb	r2, [r6], #-1
   175cc:	rsbs	r2, r5, #9
   175d0:	mov	r5, r0
   175d4:	rscs	r2, r4, #0
   175d8:	mov	r4, r1
   175dc:	bcc	175a8 <__assert_fail@plt+0x5b2c>
   175e0:	add	r0, r6, #1
   175e4:	pop	{r4, r5, r6, sl, fp, pc}
   175e8:	push	{r4, r5, fp, lr}
   175ec:	add	fp, sp, #8
   175f0:	cmp	r0, #0
   175f4:	beq	17688 <__assert_fail@plt+0x5c0c>
   175f8:	mov	r1, #47	; 0x2f
   175fc:	mov	r4, r0
   17600:	bl	119e0 <strrchr@plt>
   17604:	cmp	r0, #0
   17608:	mov	r5, r4
   1760c:	addne	r5, r0, #1
   17610:	sub	r0, r5, r4
   17614:	cmp	r0, #7
   17618:	blt	1766c <__assert_fail@plt+0x5bf0>
   1761c:	movw	r1, #64180	; 0xfab4
   17620:	sub	r0, r5, #7
   17624:	mov	r2, #7
   17628:	movt	r1, #1
   1762c:	bl	11a58 <strncmp@plt>
   17630:	cmp	r0, #0
   17634:	bne	1766c <__assert_fail@plt+0x5bf0>
   17638:	movw	r1, #64188	; 0xfabc
   1763c:	mov	r0, r5
   17640:	mov	r2, #3
   17644:	movt	r1, #1
   17648:	bl	11a58 <strncmp@plt>
   1764c:	cmp	r0, #0
   17650:	beq	1765c <__assert_fail@plt+0x5be0>
   17654:	mov	r4, r5
   17658:	b	1766c <__assert_fail@plt+0x5bf0>
   1765c:	movw	r0, #4552	; 0x11c8
   17660:	add	r4, r5, #3
   17664:	movt	r0, #3
   17668:	str	r4, [r0]
   1766c:	movw	r0, #4556	; 0x11cc
   17670:	movt	r0, #3
   17674:	str	r4, [r0]
   17678:	movw	r0, #4608	; 0x1200
   1767c:	movt	r0, #3
   17680:	str	r4, [r0]
   17684:	pop	{r4, r5, fp, pc}
   17688:	movw	r0, #4568	; 0x11d8
   1768c:	movt	r0, #3
   17690:	ldr	r1, [r0]
   17694:	movw	r0, #64124	; 0xfa7c
   17698:	movt	r0, #1
   1769c:	bl	11a4c <fputs@plt>
   176a0:	bl	11a64 <abort@plt>
   176a4:	push	{r4, r5, r6, sl, fp, lr}
   176a8:	add	fp, sp, #16
   176ac:	sub	sp, sp, #8
   176b0:	mov	r4, r0
   176b4:	mov	r0, #0
   176b8:	mov	r2, #5
   176bc:	mov	r1, r4
   176c0:	bl	1174c <dcgettext@plt>
   176c4:	cmp	r0, r4
   176c8:	beq	176e8 <__assert_fail@plt+0x5c6c>
   176cc:	mov	r1, r4
   176d0:	mov	r5, r0
   176d4:	bl	1773c <__assert_fail@plt+0x5cc0>
   176d8:	cmp	r0, #0
   176dc:	beq	176f0 <__assert_fail@plt+0x5c74>
   176e0:	mov	r6, r5
   176e4:	b	17730 <__assert_fail@plt+0x5cb4>
   176e8:	mov	r6, r4
   176ec:	b	17730 <__assert_fail@plt+0x5cb4>
   176f0:	mov	r0, r5
   176f4:	bl	118d8 <strlen@plt>
   176f8:	mov	r6, r0
   176fc:	mov	r0, r4
   17700:	bl	118d8 <strlen@plt>
   17704:	add	r0, r6, r0
   17708:	add	r0, r0, #4
   1770c:	bl	1a108 <__assert_fail@plt+0x868c>
   17710:	movw	r3, #64192	; 0xfac0
   17714:	mov	r1, #1
   17718:	mvn	r2, #0
   1771c:	mov	r6, r0
   17720:	str	r5, [sp]
   17724:	str	r4, [sp, #4]
   17728:	movt	r3, #1
   1772c:	bl	11920 <__sprintf_chk@plt>
   17730:	mov	r0, r6
   17734:	sub	sp, fp, #16
   17738:	pop	{r4, r5, r6, sl, fp, pc}
   1773c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17740:	add	fp, sp, #28
   17744:	sub	sp, sp, #124	; 0x7c
   17748:	mov	r4, r0
   1774c:	mov	r0, r1
   17750:	mov	r1, #2
   17754:	bl	19988 <__assert_fail@plt+0x7f0c>
   17758:	mov	sl, r0
   1775c:	ldrb	r0, [r4]
   17760:	cmp	r0, #0
   17764:	beq	179cc <__assert_fail@plt+0x5f50>
   17768:	add	r5, sp, #12
   1776c:	add	r6, sp, #68	; 0x44
   17770:	mov	r9, #0
   17774:	add	r8, r6, #4
   17778:	add	r0, r5, #4
   1777c:	str	r0, [sp, #4]
   17780:	str	r8, [sp]
   17784:	mov	r0, r4
   17788:	mov	r1, sl
   1778c:	bl	1ac3c <__assert_fail@plt+0x91c0>
   17790:	cmp	r0, #0
   17794:	beq	179cc <__assert_fail@plt+0x5f50>
   17798:	mov	r7, r0
   1779c:	bl	1180c <__ctype_get_mb_cur_max@plt>
   177a0:	cmp	r0, #2
   177a4:	bcc	178b8 <__assert_fail@plt+0x5e3c>
   177a8:	mov	r0, #1
   177ac:	cmp	r4, r7
   177b0:	strb	r9, [sp, #68]	; 0x44
   177b4:	str	r4, [sp, #84]	; 0x54
   177b8:	str	r9, [r8]
   177bc:	str	r9, [r8, #4]
   177c0:	strb	r9, [sp, #80]	; 0x50
   177c4:	str	r0, [sp, #8]
   177c8:	bcs	17820 <__assert_fail@plt+0x5da4>
   177cc:	mov	r0, r6
   177d0:	bl	1b674 <__assert_fail@plt+0x9bf8>
   177d4:	ldrb	r1, [sp, #92]	; 0x5c
   177d8:	ldr	r0, [sp, #96]	; 0x60
   177dc:	cmp	r1, #0
   177e0:	beq	177ec <__assert_fail@plt+0x5d70>
   177e4:	cmp	r0, #0
   177e8:	beq	179f0 <__assert_fail@plt+0x5f74>
   177ec:	strb	r9, [sp, #80]	; 0x50
   177f0:	ldr	r2, [sp, #84]	; 0x54
   177f4:	ldr	r3, [sp, #88]	; 0x58
   177f8:	add	r2, r2, r3
   177fc:	cmp	r2, r7
   17800:	str	r2, [sp, #84]	; 0x54
   17804:	bcc	177cc <__assert_fail@plt+0x5d50>
   17808:	cmp	r1, #0
   1780c:	beq	17820 <__assert_fail@plt+0x5da4>
   17810:	bl	11914 <iswalnum@plt>
   17814:	clz	r0, r0
   17818:	lsr	r0, r0, #5
   1781c:	str	r0, [sp, #8]
   17820:	ldr	r0, [sp, #4]
   17824:	strb	r9, [sp, #68]	; 0x44
   17828:	str	r7, [sp, #84]	; 0x54
   1782c:	strb	r9, [sp, #12]
   17830:	str	sl, [sp, #28]
   17834:	str	r9, [r8]
   17838:	str	r9, [r8, #4]
   1783c:	strb	r9, [sp, #80]	; 0x50
   17840:	str	r9, [r0]
   17844:	str	r9, [r0, #4]
   17848:	strb	r9, [sp, #24]
   1784c:	mov	r0, r5
   17850:	bl	1b674 <__assert_fail@plt+0x9bf8>
   17854:	ldrb	r0, [sp, #36]	; 0x24
   17858:	cmp	r0, #0
   1785c:	beq	1786c <__assert_fail@plt+0x5df0>
   17860:	ldr	r0, [sp, #40]	; 0x28
   17864:	cmp	r0, #0
   17868:	beq	1793c <__assert_fail@plt+0x5ec0>
   1786c:	mov	r0, r6
   17870:	bl	1b674 <__assert_fail@plt+0x9bf8>
   17874:	ldrb	r0, [sp, #92]	; 0x5c
   17878:	cmp	r0, #0
   1787c:	beq	1788c <__assert_fail@plt+0x5e10>
   17880:	ldr	r0, [sp, #96]	; 0x60
   17884:	cmp	r0, #0
   17888:	beq	179f0 <__assert_fail@plt+0x5f74>
   1788c:	strb	r9, [sp, #80]	; 0x50
   17890:	strb	r9, [sp, #24]
   17894:	ldr	r0, [sp, #84]	; 0x54
   17898:	ldr	r1, [sp, #88]	; 0x58
   1789c:	add	r0, r0, r1
   178a0:	ldr	r1, [sp, #32]
   178a4:	str	r0, [sp, #84]	; 0x54
   178a8:	ldr	r0, [sp, #28]
   178ac:	add	r0, r0, r1
   178b0:	str	r0, [sp, #28]
   178b4:	b	1784c <__assert_fail@plt+0x5dd0>
   178b8:	cmp	r4, r7
   178bc:	mov	r8, #1
   178c0:	mov	r4, #1
   178c4:	bcs	178e4 <__assert_fail@plt+0x5e68>
   178c8:	bl	118a8 <__ctype_b_loc@plt>
   178cc:	ldrb	r1, [r7, #-1]
   178d0:	ldr	r0, [r0]
   178d4:	ldrb	r0, [r0, r1, lsl #1]
   178d8:	mov	r1, #1
   178dc:	and	r0, r0, #8
   178e0:	eor	r4, r1, r0, lsr #3
   178e4:	mov	r0, sl
   178e8:	mov	r5, sl
   178ec:	bl	118d8 <strlen@plt>
   178f0:	ldrb	sl, [r7, r0]
   178f4:	cmp	sl, #0
   178f8:	beq	17914 <__assert_fail@plt+0x5e98>
   178fc:	bl	118a8 <__ctype_b_loc@plt>
   17900:	ldr	r0, [r0]
   17904:	mov	r1, #1
   17908:	ldrb	r0, [r0, sl, lsl #1]
   1790c:	and	r0, r0, #8
   17910:	eor	r8, r1, r0, lsr #3
   17914:	tst	r4, r8
   17918:	bne	179e4 <__assert_fail@plt+0x5f68>
   1791c:	ldrb	r0, [r7], #1
   17920:	ldr	r8, [sp]
   17924:	mov	sl, r5
   17928:	add	r5, sp, #12
   1792c:	mov	r4, r7
   17930:	cmp	r0, #0
   17934:	bne	179c0 <__assert_fail@plt+0x5f44>
   17938:	b	179cc <__assert_fail@plt+0x5f50>
   1793c:	mov	r0, r6
   17940:	bl	1b674 <__assert_fail@plt+0x9bf8>
   17944:	ldrb	r0, [sp, #92]	; 0x5c
   17948:	mov	r4, #1
   1794c:	mov	r1, #1
   17950:	cmp	r0, #0
   17954:	beq	17974 <__assert_fail@plt+0x5ef8>
   17958:	ldr	r0, [sp, #96]	; 0x60
   1795c:	mov	r1, #1
   17960:	cmp	r0, #0
   17964:	beq	17974 <__assert_fail@plt+0x5ef8>
   17968:	bl	11914 <iswalnum@plt>
   1796c:	clz	r0, r0
   17970:	lsr	r1, r0, #5
   17974:	ldr	r0, [sp, #8]
   17978:	tst	r0, r1
   1797c:	bne	179d0 <__assert_fail@plt+0x5f54>
   17980:	mov	r4, #0
   17984:	mov	r0, r6
   17988:	strb	r4, [sp, #68]	; 0x44
   1798c:	str	r7, [sp, #84]	; 0x54
   17990:	str	r4, [r8]
   17994:	str	r4, [r8, #4]
   17998:	strb	r4, [sp, #80]	; 0x50
   1799c:	bl	1b674 <__assert_fail@plt+0x9bf8>
   179a0:	ldrb	r0, [sp, #92]	; 0x5c
   179a4:	cmp	r0, #0
   179a8:	beq	179b8 <__assert_fail@plt+0x5f3c>
   179ac:	ldr	r0, [sp, #96]	; 0x60
   179b0:	cmp	r0, #0
   179b4:	beq	179d0 <__assert_fail@plt+0x5f54>
   179b8:	ldr	r0, [sp, #88]	; 0x58
   179bc:	add	r4, r7, r0
   179c0:	ldrb	r0, [r4]
   179c4:	cmp	r0, #0
   179c8:	bne	17784 <__assert_fail@plt+0x5d08>
   179cc:	mov	r4, #0
   179d0:	mov	r0, sl
   179d4:	bl	174f4 <__assert_fail@plt+0x5a78>
   179d8:	mov	r0, r4
   179dc:	sub	sp, fp, #28
   179e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179e4:	mov	r4, #1
   179e8:	mov	sl, r5
   179ec:	b	179d0 <__assert_fail@plt+0x5f54>
   179f0:	bl	11a64 <abort@plt>
   179f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179f8:	add	fp, sp, #28
   179fc:	sub	sp, sp, #12
   17a00:	mov	r8, r0
   17a04:	mov	r5, r1
   17a08:	mov	r0, #0
   17a0c:	mov	r2, #5
   17a10:	mov	r7, #0
   17a14:	mov	r1, r8
   17a18:	bl	1174c <dcgettext@plt>
   17a1c:	mov	r4, r0
   17a20:	bl	1a968 <__assert_fail@plt+0x8eec>
   17a24:	movw	r1, #64200	; 0xfac8
   17a28:	mov	r6, r0
   17a2c:	movt	r1, #1
   17a30:	bl	1a6f8 <__assert_fail@plt+0x8c7c>
   17a34:	cmp	r0, #0
   17a38:	beq	17aec <__assert_fail@plt+0x6070>
   17a3c:	str	r4, [sp, #8]
   17a40:	movw	r4, #64200	; 0xfac8
   17a44:	mov	r0, r5
   17a48:	mov	r2, r6
   17a4c:	movt	r4, #1
   17a50:	mov	r1, r4
   17a54:	bl	1a5f0 <__assert_fail@plt+0x8b74>
   17a58:	mov	sl, r0
   17a5c:	mov	r0, r6
   17a60:	bl	118d8 <strlen@plt>
   17a64:	mov	r7, r0
   17a68:	add	r0, r0, #11
   17a6c:	bl	1a108 <__assert_fail@plt+0x868c>
   17a70:	mov	r1, r6
   17a74:	mov	r2, r7
   17a78:	mov	r9, r0
   17a7c:	bl	1171c <memcpy@plt>
   17a80:	movw	r0, #64208	; 0xfad0
   17a84:	movw	r1, #18764	; 0x494c
   17a88:	mov	r2, r9
   17a8c:	movt	r0, #1
   17a90:	movt	r1, #84	; 0x54
   17a94:	vldr	d16, [r0]
   17a98:	add	r0, r9, r7
   17a9c:	str	r1, [r0, #7]
   17aa0:	mov	r1, r4
   17aa4:	vst1.8	{d16}, [r0]
   17aa8:	mov	r0, r5
   17aac:	bl	1a5f0 <__assert_fail@plt+0x8b74>
   17ab0:	mov	r7, r0
   17ab4:	mov	r0, r9
   17ab8:	bl	174f4 <__assert_fail@plt+0x5a78>
   17abc:	mov	r5, #0
   17ac0:	cmp	r7, #0
   17ac4:	beq	17ae4 <__assert_fail@plt+0x6068>
   17ac8:	mov	r0, r7
   17acc:	mov	r1, #63	; 0x3f
   17ad0:	bl	118e4 <strchr@plt>
   17ad4:	cmp	r0, #0
   17ad8:	beq	17af8 <__assert_fail@plt+0x607c>
   17adc:	mov	r0, r7
   17ae0:	bl	174f4 <__assert_fail@plt+0x5a78>
   17ae4:	mov	r7, #0
   17ae8:	b	17afc <__assert_fail@plt+0x6080>
   17aec:	mov	sl, r5
   17af0:	mov	r9, #0
   17af4:	b	17b04 <__assert_fail@plt+0x6088>
   17af8:	mov	r5, r7
   17afc:	ldr	r4, [sp, #8]
   17b00:	mov	r9, sl
   17b04:	cmp	r5, #0
   17b08:	mov	r6, r5
   17b0c:	mov	r0, r4
   17b10:	mov	r1, r8
   17b14:	moveq	r6, r8
   17b18:	cmp	sl, #0
   17b1c:	movne	r6, sl
   17b20:	bl	116b0 <strcmp@plt>
   17b24:	cmp	r0, #0
   17b28:	beq	17b9c <__assert_fail@plt+0x6120>
   17b2c:	mov	r0, r4
   17b30:	mov	r1, r8
   17b34:	bl	1773c <__assert_fail@plt+0x5cc0>
   17b38:	cmp	r0, #0
   17b3c:	bne	17b78 <__assert_fail@plt+0x60fc>
   17b40:	cmp	sl, #0
   17b44:	beq	17b5c <__assert_fail@plt+0x60e0>
   17b48:	mov	r0, r4
   17b4c:	mov	r1, sl
   17b50:	bl	1773c <__assert_fail@plt+0x5cc0>
   17b54:	cmp	r0, #0
   17b58:	bne	17b78 <__assert_fail@plt+0x60fc>
   17b5c:	cmp	r5, #0
   17b60:	beq	17bcc <__assert_fail@plt+0x6150>
   17b64:	mov	r0, r4
   17b68:	mov	r1, r5
   17b6c:	bl	1773c <__assert_fail@plt+0x5cc0>
   17b70:	cmp	r0, #0
   17b74:	beq	17bcc <__assert_fail@plt+0x6150>
   17b78:	cmp	r9, #0
   17b7c:	beq	17b88 <__assert_fail@plt+0x610c>
   17b80:	mov	r0, r9
   17b84:	bl	174f4 <__assert_fail@plt+0x5a78>
   17b88:	cmp	r7, #0
   17b8c:	beq	17c2c <__assert_fail@plt+0x61b0>
   17b90:	mov	r0, r7
   17b94:	bl	174f4 <__assert_fail@plt+0x5a78>
   17b98:	b	17c2c <__assert_fail@plt+0x61b0>
   17b9c:	cmp	r9, #0
   17ba0:	cmpne	r9, r6
   17ba4:	beq	17bb0 <__assert_fail@plt+0x6134>
   17ba8:	mov	r0, r9
   17bac:	bl	174f4 <__assert_fail@plt+0x5a78>
   17bb0:	cmp	r7, #0
   17bb4:	cmpne	r7, r6
   17bb8:	beq	17bc4 <__assert_fail@plt+0x6148>
   17bbc:	mov	r0, r7
   17bc0:	bl	174f4 <__assert_fail@plt+0x5a78>
   17bc4:	mov	r4, r6
   17bc8:	b	17c2c <__assert_fail@plt+0x61b0>
   17bcc:	mov	r0, r4
   17bd0:	bl	118d8 <strlen@plt>
   17bd4:	mov	r5, r0
   17bd8:	mov	r0, r6
   17bdc:	bl	118d8 <strlen@plt>
   17be0:	add	r0, r5, r0
   17be4:	add	r0, r0, #4
   17be8:	bl	1a108 <__assert_fail@plt+0x868c>
   17bec:	movw	r3, #64192	; 0xfac0
   17bf0:	mov	r1, #1
   17bf4:	mvn	r2, #0
   17bf8:	mov	r5, r0
   17bfc:	stm	sp, {r4, r6}
   17c00:	movt	r3, #1
   17c04:	bl	11920 <__sprintf_chk@plt>
   17c08:	cmp	r9, #0
   17c0c:	beq	17c18 <__assert_fail@plt+0x619c>
   17c10:	mov	r0, r9
   17c14:	bl	174f4 <__assert_fail@plt+0x5a78>
   17c18:	cmp	r7, #0
   17c1c:	beq	17c28 <__assert_fail@plt+0x61ac>
   17c20:	mov	r0, r7
   17c24:	bl	174f4 <__assert_fail@plt+0x5a78>
   17c28:	mov	r4, r5
   17c2c:	mov	r0, r4
   17c30:	sub	sp, fp, #28
   17c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c38:	push	{r4, r5, r6, sl, fp, lr}
   17c3c:	add	fp, sp, #16
   17c40:	mov	r4, r0
   17c44:	movw	r0, #4616	; 0x1208
   17c48:	movt	r0, #3
   17c4c:	cmp	r4, #0
   17c50:	moveq	r4, r0
   17c54:	bl	11908 <__errno_location@plt>
   17c58:	ldr	r6, [r0]
   17c5c:	mov	r5, r0
   17c60:	mov	r0, r4
   17c64:	mov	r1, #48	; 0x30
   17c68:	bl	1a458 <__assert_fail@plt+0x89dc>
   17c6c:	str	r6, [r5]
   17c70:	pop	{r4, r5, r6, sl, fp, pc}
   17c74:	movw	r1, #4616	; 0x1208
   17c78:	cmp	r0, #0
   17c7c:	movt	r1, #3
   17c80:	movne	r1, r0
   17c84:	ldr	r0, [r1]
   17c88:	bx	lr
   17c8c:	movw	r2, #4616	; 0x1208
   17c90:	cmp	r0, #0
   17c94:	movt	r2, #3
   17c98:	movne	r2, r0
   17c9c:	str	r1, [r2]
   17ca0:	bx	lr
   17ca4:	movw	r3, #4616	; 0x1208
   17ca8:	cmp	r0, #0
   17cac:	and	r2, r2, #1
   17cb0:	movt	r3, #3
   17cb4:	movne	r3, r0
   17cb8:	ubfx	r0, r1, #5, #3
   17cbc:	and	r1, r1, #31
   17cc0:	add	ip, r3, r0, lsl #2
   17cc4:	mov	r0, #1
   17cc8:	ldr	r3, [ip, #8]
   17ccc:	and	r0, r0, r3, lsr r1
   17cd0:	eor	r2, r0, r2
   17cd4:	eor	r1, r3, r2, lsl r1
   17cd8:	str	r1, [ip, #8]
   17cdc:	bx	lr
   17ce0:	movw	r2, #4616	; 0x1208
   17ce4:	cmp	r0, #0
   17ce8:	movt	r2, #3
   17cec:	movne	r2, r0
   17cf0:	ldr	r0, [r2, #4]
   17cf4:	str	r1, [r2, #4]
   17cf8:	bx	lr
   17cfc:	push	{fp, lr}
   17d00:	mov	fp, sp
   17d04:	movw	r3, #4616	; 0x1208
   17d08:	cmp	r0, #0
   17d0c:	movt	r3, #3
   17d10:	movne	r3, r0
   17d14:	cmp	r1, #0
   17d18:	mov	r0, #10
   17d1c:	cmpne	r2, #0
   17d20:	str	r0, [r3]
   17d24:	bne	17d2c <__assert_fail@plt+0x62b0>
   17d28:	bl	11a64 <abort@plt>
   17d2c:	str	r1, [r3, #40]	; 0x28
   17d30:	str	r2, [r3, #44]	; 0x2c
   17d34:	pop	{fp, pc}
   17d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d3c:	add	fp, sp, #28
   17d40:	sub	sp, sp, #20
   17d44:	mov	r7, r0
   17d48:	ldr	r0, [fp, #8]
   17d4c:	movw	r5, #4616	; 0x1208
   17d50:	mov	r8, r3
   17d54:	mov	r9, r2
   17d58:	mov	sl, r1
   17d5c:	movt	r5, #3
   17d60:	cmp	r0, #0
   17d64:	movne	r5, r0
   17d68:	bl	11908 <__errno_location@plt>
   17d6c:	ldr	r2, [r5, #40]	; 0x28
   17d70:	ldr	r3, [r5, #44]	; 0x2c
   17d74:	mov	r4, r0
   17d78:	ldm	r5, {r0, r1}
   17d7c:	add	r5, r5, #8
   17d80:	ldr	r6, [r4]
   17d84:	stm	sp, {r0, r1, r5}
   17d88:	mov	r0, r7
   17d8c:	mov	r1, sl
   17d90:	str	r2, [sp, #12]
   17d94:	str	r3, [sp, #16]
   17d98:	mov	r2, r9
   17d9c:	mov	r3, r8
   17da0:	bl	17db0 <__assert_fail@plt+0x6334>
   17da4:	str	r6, [r4]
   17da8:	sub	sp, fp, #28
   17dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17db4:	add	fp, sp, #28
   17db8:	sub	sp, sp, #156	; 0x9c
   17dbc:	mov	r5, r0
   17dc0:	add	r0, r2, #1
   17dc4:	mov	r6, r1
   17dc8:	mov	sl, r3
   17dcc:	str	r2, [fp, #-80]	; 0xffffffb0
   17dd0:	str	r0, [sp, #72]	; 0x48
   17dd4:	ldr	r0, [fp, #12]
   17dd8:	and	r1, r0, #1
   17ddc:	str	r1, [sp, #32]
   17de0:	and	r1, r0, #4
   17de4:	str	r1, [sp, #28]
   17de8:	ubfx	r9, r0, #1, #1
   17dec:	bl	1180c <__ctype_get_mb_cur_max@plt>
   17df0:	str	r0, [sp, #40]	; 0x28
   17df4:	ldr	r0, [fp, #24]
   17df8:	ldr	r7, [fp, #8]
   17dfc:	mov	r1, #0
   17e00:	mov	lr, #0
   17e04:	str	r5, [fp, #-84]	; 0xffffffac
   17e08:	str	r1, [sp, #60]	; 0x3c
   17e0c:	mov	r1, #1
   17e10:	str	r1, [fp, #-48]	; 0xffffffd0
   17e14:	str	r0, [sp, #80]	; 0x50
   17e18:	ldr	r0, [fp, #20]
   17e1c:	str	r0, [sp, #76]	; 0x4c
   17e20:	mov	r0, #0
   17e24:	str	r0, [sp, #56]	; 0x38
   17e28:	mov	r0, #0
   17e2c:	str	r0, [fp, #-88]	; 0xffffffa8
   17e30:	mov	r0, #0
   17e34:	str	r0, [fp, #-72]	; 0xffffffb8
   17e38:	mov	r0, #0
   17e3c:	cmp	r7, #10
   17e40:	bhi	18e1c <__assert_fail@plt+0x73a0>
   17e44:	add	r1, pc, #24
   17e48:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17e4c:	mov	ip, r6
   17e50:	mov	r8, #0
   17e54:	mov	r2, #1
   17e58:	mov	r6, #0
   17e5c:	mov	r3, sl
   17e60:	ldr	pc, [r1, r7, lsl #2]
   17e64:	andeq	r7, r1, r0, asr pc
   17e68:	andeq	r7, r1, r4, lsr #31
   17e6c:	andeq	r7, r1, r4, ror #30
   17e70:	andeq	r7, r1, r8, asr #30
   17e74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e78:	andeq	r7, r1, ip, asr #31
   17e7c:	andeq	r7, r1, r4, ror pc
   17e80:	andeq	r8, r1, r0, asr r0
   17e84:	muleq	r1, r0, lr
   17e88:	muleq	r1, r0, lr
   17e8c:	ldrdeq	r7, [r1], -r0
   17e90:	movw	r0, #64302	; 0xfb2e
   17e94:	mov	r1, r7
   17e98:	mov	r6, r5
   17e9c:	mov	r4, ip
   17ea0:	mov	r5, lr
   17ea4:	movt	r0, #1
   17ea8:	bl	19580 <__assert_fail@plt+0x7b04>
   17eac:	str	r0, [sp, #76]	; 0x4c
   17eb0:	movw	r0, #65316	; 0xff24
   17eb4:	mov	r1, r7
   17eb8:	movt	r0, #1
   17ebc:	bl	19580 <__assert_fail@plt+0x7b04>
   17ec0:	mov	lr, r5
   17ec4:	mov	r5, r6
   17ec8:	mov	ip, r4
   17ecc:	str	r0, [sp, #80]	; 0x50
   17ed0:	mov	r8, #0
   17ed4:	tst	r9, #1
   17ed8:	str	lr, [sp, #44]	; 0x2c
   17edc:	bne	17f14 <__assert_fail@plt+0x6498>
   17ee0:	ldr	r0, [sp, #76]	; 0x4c
   17ee4:	ldrb	r0, [r0]
   17ee8:	cmp	r0, #0
   17eec:	beq	17f14 <__assert_fail@plt+0x6498>
   17ef0:	ldr	r1, [sp, #76]	; 0x4c
   17ef4:	mov	r8, #0
   17ef8:	add	r1, r1, #1
   17efc:	cmp	r8, ip
   17f00:	strbcc	r0, [r5, r8]
   17f04:	ldrb	r0, [r1, r8]
   17f08:	add	r8, r8, #1
   17f0c:	cmp	r0, #0
   17f10:	bne	17efc <__assert_fail@plt+0x6480>
   17f14:	ldr	r6, [sp, #80]	; 0x50
   17f18:	mov	r4, ip
   17f1c:	mov	r0, r6
   17f20:	bl	118d8 <strlen@plt>
   17f24:	mov	ip, r4
   17f28:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17f2c:	ldr	lr, [sp, #44]	; 0x2c
   17f30:	str	r6, [fp, #-88]	; 0xffffffa8
   17f34:	str	r0, [fp, #-72]	; 0xffffffb8
   17f38:	mov	r2, #1
   17f3c:	mov	r6, r9
   17f40:	mov	r3, sl
   17f44:	b	18050 <__assert_fail@plt+0x65d4>
   17f48:	mov	r0, #1
   17f4c:	b	17fa4 <__assert_fail@plt+0x6528>
   17f50:	mov	r7, #0
   17f54:	mov	r8, #0
   17f58:	mov	r2, r0
   17f5c:	mov	r6, #0
   17f60:	b	18050 <__assert_fail@plt+0x65d4>
   17f64:	tst	r9, #1
   17f68:	bne	17fa4 <__assert_fail@plt+0x6528>
   17f6c:	mov	r2, r0
   17f70:	b	17ffc <__assert_fail@plt+0x6580>
   17f74:	mov	r0, #1
   17f78:	mov	r8, #0
   17f7c:	mov	r7, #5
   17f80:	mov	r2, #1
   17f84:	str	r0, [fp, #-72]	; 0xffffffb8
   17f88:	movw	r0, #64300	; 0xfb2c
   17f8c:	movt	r0, #1
   17f90:	str	r0, [fp, #-88]	; 0xffffffa8
   17f94:	b	17fc4 <__assert_fail@plt+0x6548>
   17f98:	mov	r2, #1
   17f9c:	tst	r9, #1
   17fa0:	beq	17ffc <__assert_fail@plt+0x6580>
   17fa4:	mov	r1, #1
   17fa8:	mov	r8, #0
   17fac:	mov	r7, #2
   17fb0:	mov	r2, r0
   17fb4:	str	r1, [fp, #-72]	; 0xffffffb8
   17fb8:	movw	r1, #65316	; 0xff24
   17fbc:	movt	r1, #1
   17fc0:	str	r1, [fp, #-88]	; 0xffffffa8
   17fc4:	mov	r6, #1
   17fc8:	b	18050 <__assert_fail@plt+0x65d4>
   17fcc:	tst	r9, #1
   17fd0:	beq	18020 <__assert_fail@plt+0x65a4>
   17fd4:	mov	r0, #1
   17fd8:	mov	r8, #0
   17fdc:	mov	r2, #1
   17fe0:	mov	r6, #1
   17fe4:	mov	r7, #5
   17fe8:	str	r0, [fp, #-72]	; 0xffffffb8
   17fec:	movw	r0, #64300	; 0xfb2c
   17ff0:	movt	r0, #1
   17ff4:	str	r0, [fp, #-88]	; 0xffffffa8
   17ff8:	b	18050 <__assert_fail@plt+0x65d4>
   17ffc:	cmp	ip, #0
   18000:	mov	r8, #1
   18004:	mov	r6, #0
   18008:	mov	r7, #2
   1800c:	movne	r0, #39	; 0x27
   18010:	strbne	r0, [r5]
   18014:	movw	r0, #65316	; 0xff24
   18018:	movt	r0, #1
   1801c:	b	18044 <__assert_fail@plt+0x65c8>
   18020:	cmp	ip, #0
   18024:	mov	r8, #1
   18028:	mov	r2, #1
   1802c:	mov	r7, #5
   18030:	mov	r6, #0
   18034:	movne	r0, #34	; 0x22
   18038:	strbne	r0, [r5]
   1803c:	movw	r0, #64300	; 0xfb2c
   18040:	movt	r0, #1
   18044:	str	r0, [fp, #-88]	; 0xffffffa8
   18048:	mov	r0, #1
   1804c:	str	r0, [fp, #-72]	; 0xffffffb8
   18050:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18054:	str	r7, [fp, #-68]	; 0xffffffbc
   18058:	str	r6, [fp, #-76]	; 0xffffffb4
   1805c:	str	r2, [sp, #84]	; 0x54
   18060:	cmp	r0, #0
   18064:	movwne	r0, #1
   18068:	and	r1, r0, r6
   1806c:	and	r1, r2, r1
   18070:	str	r1, [sp, #48]	; 0x30
   18074:	sub	r1, r7, #2
   18078:	clz	r1, r1
   1807c:	lsr	r1, r1, #5
   18080:	and	r1, r1, r6
   18084:	str	r1, [sp, #64]	; 0x40
   18088:	subs	r1, r7, #2
   1808c:	eor	r7, r6, #1
   18090:	movwne	r1, #1
   18094:	str	r7, [sp, #92]	; 0x5c
   18098:	orr	r7, r1, r7
   1809c:	and	r1, r1, r2
   180a0:	and	r0, r0, r1
   180a4:	str	r7, [sp, #68]	; 0x44
   180a8:	mov	r7, #0
   180ac:	str	r0, [fp, #-60]	; 0xffffffc4
   180b0:	orr	r0, r1, r6
   180b4:	ldr	r1, [fp, #16]
   180b8:	eor	r0, r0, #1
   180bc:	clz	r1, r1
   180c0:	lsr	r1, r1, #5
   180c4:	orr	r0, r1, r0
   180c8:	str	r0, [fp, #-64]	; 0xffffffc0
   180cc:	eor	r0, r2, #1
   180d0:	str	r0, [sp, #52]	; 0x34
   180d4:	cmn	r3, #1
   180d8:	beq	180e8 <__assert_fail@plt+0x666c>
   180dc:	cmp	r7, r3
   180e0:	bne	180f4 <__assert_fail@plt+0x6678>
   180e4:	b	18c50 <__assert_fail@plt+0x71d4>
   180e8:	ldrb	r0, [r4, r7]
   180ec:	cmp	r0, #0
   180f0:	beq	18c58 <__assert_fail@plt+0x71dc>
   180f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   180f8:	cmp	r0, #0
   180fc:	beq	18144 <__assert_fail@plt+0x66c8>
   18100:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18104:	add	r5, r7, r0
   18108:	cmp	r0, #2
   1810c:	bcc	18158 <__assert_fail@plt+0x66dc>
   18110:	mov	r0, #0
   18114:	cmn	r3, #1
   18118:	str	r0, [fp, #-56]	; 0xffffffc8
   1811c:	bne	18160 <__assert_fail@plt+0x66e4>
   18120:	mov	r0, r4
   18124:	mov	r4, ip
   18128:	mov	r6, lr
   1812c:	bl	118d8 <strlen@plt>
   18130:	mov	ip, r4
   18134:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18138:	mov	lr, r6
   1813c:	mov	r3, r0
   18140:	b	18160 <__assert_fail@plt+0x66e4>
   18144:	mov	r0, #0
   18148:	mov	sl, r3
   1814c:	str	r0, [fp, #-56]	; 0xffffffc8
   18150:	mov	r0, #0
   18154:	b	181cc <__assert_fail@plt+0x6750>
   18158:	mov	r0, #0
   1815c:	str	r0, [fp, #-56]	; 0xffffffc8
   18160:	cmp	r5, r3
   18164:	bls	18178 <__assert_fail@plt+0x66fc>
   18168:	ldr	r5, [fp, #-84]	; 0xffffffac
   1816c:	mov	r0, #0
   18170:	mov	sl, r3
   18174:	b	181cc <__assert_fail@plt+0x6750>
   18178:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1817c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18180:	add	r0, r4, r7
   18184:	mov	r5, lr
   18188:	mov	r6, ip
   1818c:	mov	sl, r3
   18190:	bl	118cc <bcmp@plt>
   18194:	ldr	r2, [sp, #92]	; 0x5c
   18198:	cmp	r0, #0
   1819c:	ldr	r3, [fp, #-84]	; 0xffffffac
   181a0:	mov	r1, r0
   181a4:	movwne	r1, #1
   181a8:	orr	r1, r1, r2
   181ac:	tst	r1, #1
   181b0:	beq	18cdc <__assert_fail@plt+0x7260>
   181b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   181b8:	clz	r0, r0
   181bc:	mov	lr, r5
   181c0:	mov	ip, r6
   181c4:	mov	r5, r3
   181c8:	lsr	r0, r0, #5
   181cc:	str	r0, [fp, #-52]	; 0xffffffcc
   181d0:	ldrb	r6, [r4, r7]
   181d4:	cmp	r6, #126	; 0x7e
   181d8:	bhi	18700 <__assert_fail@plt+0x6c84>
   181dc:	add	r3, pc, #16
   181e0:	mov	r9, #1
   181e4:	mov	r2, #110	; 0x6e
   181e8:	mov	r0, #97	; 0x61
   181ec:	mov	r1, #0
   181f0:	ldr	pc, [r3, r6, lsl #2]
   181f4:	andeq	r8, r1, r4, ror #10
   181f8:	andeq	r8, r1, r0, lsl #14
   181fc:	andeq	r8, r1, r0, lsl #14
   18200:	andeq	r8, r1, r0, lsl #14
   18204:	andeq	r8, r1, r0, lsl #14
   18208:	andeq	r8, r1, r0, lsl #14
   1820c:	andeq	r8, r1, r0, lsl #14
   18210:	andeq	r8, r1, r0, lsl #15
   18214:	andeq	r8, r1, r4, asr #10
   18218:	andeq	r8, r1, ip, lsr r5
   1821c:	andeq	r8, r1, r0, asr r5
   18220:	andeq	r8, r1, r8, ror #12
   18224:	andeq	r8, r1, r4, lsr r5
   18228:	andeq	r8, r1, ip, asr #10
   1822c:	andeq	r8, r1, r0, lsl #14
   18230:	andeq	r8, r1, r0, lsl #14
   18234:	andeq	r8, r1, r0, lsl #14
   18238:	andeq	r8, r1, r0, lsl #14
   1823c:	andeq	r8, r1, r0, lsl #14
   18240:	andeq	r8, r1, r0, lsl #14
   18244:	andeq	r8, r1, r0, lsl #14
   18248:	andeq	r8, r1, r0, lsl #14
   1824c:	andeq	r8, r1, r0, lsl #14
   18250:	andeq	r8, r1, r0, lsl #14
   18254:	andeq	r8, r1, r0, lsl #14
   18258:	andeq	r8, r1, r0, lsl #14
   1825c:	andeq	r8, r1, r0, lsl #14
   18260:	andeq	r8, r1, r0, lsl #14
   18264:	andeq	r8, r1, r0, lsl #14
   18268:	andeq	r8, r1, r0, lsl #14
   1826c:	andeq	r8, r1, r0, lsl #14
   18270:	andeq	r8, r1, r0, lsl #14
   18274:	andeq	r8, r1, r4, ror #9
   18278:	andeq	r8, r1, r8, ror #9
   1827c:	andeq	r8, r1, r8, ror #9
   18280:	andeq	r8, r1, ip, asr #9
   18284:	andeq	r8, r1, r8, ror #9
   18288:	strdeq	r8, [r1], -r0
   1828c:	andeq	r8, r1, r8, ror #9
   18290:	andeq	r8, r1, r0, ror r6
   18294:	andeq	r8, r1, r8, ror #9
   18298:	andeq	r8, r1, r8, ror #9
   1829c:	andeq	r8, r1, r8, ror #9
   182a0:	strdeq	r8, [r1], -r0
   182a4:	strdeq	r8, [r1], -r0
   182a8:	strdeq	r8, [r1], -r0
   182ac:	strdeq	r8, [r1], -r0
   182b0:	strdeq	r8, [r1], -r0
   182b4:	strdeq	r8, [r1], -r0
   182b8:	strdeq	r8, [r1], -r0
   182bc:	strdeq	r8, [r1], -r0
   182c0:	strdeq	r8, [r1], -r0
   182c4:	strdeq	r8, [r1], -r0
   182c8:	strdeq	r8, [r1], -r0
   182cc:	strdeq	r8, [r1], -r0
   182d0:	strdeq	r8, [r1], -r0
   182d4:	strdeq	r8, [r1], -r0
   182d8:	strdeq	r8, [r1], -r0
   182dc:	strdeq	r8, [r1], -r0
   182e0:	andeq	r8, r1, r8, ror #9
   182e4:	andeq	r8, r1, r8, ror #9
   182e8:	andeq	r8, r1, r8, ror #9
   182ec:	andeq	r8, r1, r8, ror #9
   182f0:	andeq	r8, r1, ip, lsr r6
   182f4:	andeq	r8, r1, r0, lsl #14
   182f8:	strdeq	r8, [r1], -r0
   182fc:	strdeq	r8, [r1], -r0
   18300:	strdeq	r8, [r1], -r0
   18304:	strdeq	r8, [r1], -r0
   18308:	strdeq	r8, [r1], -r0
   1830c:	strdeq	r8, [r1], -r0
   18310:	strdeq	r8, [r1], -r0
   18314:	strdeq	r8, [r1], -r0
   18318:	strdeq	r8, [r1], -r0
   1831c:	strdeq	r8, [r1], -r0
   18320:	strdeq	r8, [r1], -r0
   18324:	strdeq	r8, [r1], -r0
   18328:	strdeq	r8, [r1], -r0
   1832c:	strdeq	r8, [r1], -r0
   18330:	strdeq	r8, [r1], -r0
   18334:	strdeq	r8, [r1], -r0
   18338:	strdeq	r8, [r1], -r0
   1833c:	strdeq	r8, [r1], -r0
   18340:	strdeq	r8, [r1], -r0
   18344:	strdeq	r8, [r1], -r0
   18348:	strdeq	r8, [r1], -r0
   1834c:	strdeq	r8, [r1], -r0
   18350:	strdeq	r8, [r1], -r0
   18354:	strdeq	r8, [r1], -r0
   18358:	strdeq	r8, [r1], -r0
   1835c:	strdeq	r8, [r1], -r0
   18360:	andeq	r8, r1, r8, ror #9
   18364:	andeq	r8, r1, r0, lsl r5
   18368:	strdeq	r8, [r1], -r0
   1836c:	andeq	r8, r1, r8, ror #9
   18370:	strdeq	r8, [r1], -r0
   18374:	andeq	r8, r1, r8, ror #9
   18378:	strdeq	r8, [r1], -r0
   1837c:	strdeq	r8, [r1], -r0
   18380:	strdeq	r8, [r1], -r0
   18384:	strdeq	r8, [r1], -r0
   18388:	strdeq	r8, [r1], -r0
   1838c:	strdeq	r8, [r1], -r0
   18390:	strdeq	r8, [r1], -r0
   18394:	strdeq	r8, [r1], -r0
   18398:	strdeq	r8, [r1], -r0
   1839c:	strdeq	r8, [r1], -r0
   183a0:	strdeq	r8, [r1], -r0
   183a4:	strdeq	r8, [r1], -r0
   183a8:	strdeq	r8, [r1], -r0
   183ac:	strdeq	r8, [r1], -r0
   183b0:	strdeq	r8, [r1], -r0
   183b4:	strdeq	r8, [r1], -r0
   183b8:	strdeq	r8, [r1], -r0
   183bc:	strdeq	r8, [r1], -r0
   183c0:	strdeq	r8, [r1], -r0
   183c4:	strdeq	r8, [r1], -r0
   183c8:	strdeq	r8, [r1], -r0
   183cc:	strdeq	r8, [r1], -r0
   183d0:	strdeq	r8, [r1], -r0
   183d4:	strdeq	r8, [r1], -r0
   183d8:	strdeq	r8, [r1], -r0
   183dc:	strdeq	r8, [r1], -r0
   183e0:	andeq	r8, r1, r4, lsr #9
   183e4:	andeq	r8, r1, r8, ror #9
   183e8:	andeq	r8, r1, r4, lsr #9
   183ec:	andeq	r8, r1, ip, asr #9
   183f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   183f4:	tst	r0, #1
   183f8:	bne	18424 <__assert_fail@plt+0x69a8>
   183fc:	ldr	r1, [fp, #16]
   18400:	ubfx	r0, r6, #5, #3
   18404:	mov	r2, #1
   18408:	ldr	r0, [r1, r0, lsl #2]
   1840c:	and	r1, r6, #31
   18410:	tst	r0, r2, lsl r1
   18414:	beq	18424 <__assert_fail@plt+0x69a8>
   18418:	mov	r0, r6
   1841c:	mov	r1, r9
   18420:	b	18438 <__assert_fail@plt+0x69bc>
   18424:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18428:	mov	r1, r9
   1842c:	cmp	r0, #0
   18430:	mov	r0, r6
   18434:	beq	18b84 <__assert_fail@plt+0x7108>
   18438:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1843c:	tst	r2, #1
   18440:	bne	18d20 <__assert_fail@plt+0x72a4>
   18444:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18448:	subs	r2, r2, #2
   1844c:	movwne	r2, #1
   18450:	orr	r2, r2, lr
   18454:	tst	r2, #1
   18458:	bne	18490 <__assert_fail@plt+0x6a14>
   1845c:	cmp	r8, ip
   18460:	mov	lr, #1
   18464:	movcc	r2, #39	; 0x27
   18468:	strbcc	r2, [r5, r8]
   1846c:	add	r2, r8, #1
   18470:	cmp	r2, ip
   18474:	movcc	r3, #36	; 0x24
   18478:	strbcc	r3, [r5, r2]
   1847c:	add	r2, r8, #2
   18480:	add	r8, r8, #3
   18484:	cmp	r2, ip
   18488:	movcc	r3, #39	; 0x27
   1848c:	strbcc	r3, [r5, r2]
   18490:	cmp	r8, ip
   18494:	movcc	r2, #92	; 0x5c
   18498:	strbcc	r2, [r5, r8]
   1849c:	add	r8, r8, #1
   184a0:	b	18bc4 <__assert_fail@plt+0x7148>
   184a4:	cmp	sl, #1
   184a8:	beq	184cc <__assert_fail@plt+0x6a50>
   184ac:	mov	r9, #0
   184b0:	cmn	sl, #1
   184b4:	bne	184d8 <__assert_fail@plt+0x6a5c>
   184b8:	ldrb	r0, [r4, #1]
   184bc:	cmp	r0, #0
   184c0:	beq	184cc <__assert_fail@plt+0x6a50>
   184c4:	mvn	sl, #0
   184c8:	b	184d8 <__assert_fail@plt+0x6a5c>
   184cc:	mov	r9, #0
   184d0:	cmp	r7, #0
   184d4:	beq	184e4 <__assert_fail@plt+0x6a68>
   184d8:	mov	r0, #0
   184dc:	str	r0, [fp, #-56]	; 0xffffffc8
   184e0:	b	183f0 <__assert_fail@plt+0x6974>
   184e4:	mov	r1, #1
   184e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   184ec:	cmp	r0, #2
   184f0:	bne	18508 <__assert_fail@plt+0x6a8c>
   184f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   184f8:	mov	r9, r1
   184fc:	tst	r0, #1
   18500:	beq	183f0 <__assert_fail@plt+0x6974>
   18504:	b	18d20 <__assert_fail@plt+0x72a4>
   18508:	mov	r9, r1
   1850c:	b	183f0 <__assert_fail@plt+0x6974>
   18510:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18514:	cmp	r0, #2
   18518:	bne	1875c <__assert_fail@plt+0x6ce0>
   1851c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18520:	tst	r0, #1
   18524:	bne	18d20 <__assert_fail@plt+0x72a4>
   18528:	mov	r0, #0
   1852c:	str	r0, [fp, #-56]	; 0xffffffc8
   18530:	b	18774 <__assert_fail@plt+0x6cf8>
   18534:	mov	r0, #102	; 0x66
   18538:	b	18780 <__assert_fail@plt+0x6d04>
   1853c:	mov	r2, #116	; 0x74
   18540:	b	18550 <__assert_fail@plt+0x6ad4>
   18544:	mov	r0, #98	; 0x62
   18548:	b	18780 <__assert_fail@plt+0x6d04>
   1854c:	mov	r2, #114	; 0x72
   18550:	ldr	r0, [sp, #68]	; 0x44
   18554:	tst	r0, #1
   18558:	mov	r0, r2
   1855c:	bne	18780 <__assert_fail@plt+0x6d04>
   18560:	b	18d20 <__assert_fail@plt+0x72a4>
   18564:	ldr	r0, [sp, #84]	; 0x54
   18568:	tst	r0, #1
   1856c:	beq	187a0 <__assert_fail@plt+0x6d24>
   18570:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18574:	tst	r0, #1
   18578:	bne	18e0c <__assert_fail@plt+0x7390>
   1857c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18580:	mov	r2, sl
   18584:	subs	r0, r0, #2
   18588:	movwne	r0, #1
   1858c:	orr	r0, r0, lr
   18590:	tst	r0, #1
   18594:	bne	185cc <__assert_fail@plt+0x6b50>
   18598:	cmp	r8, ip
   1859c:	mov	lr, #1
   185a0:	movcc	r0, #39	; 0x27
   185a4:	strbcc	r0, [r5, r8]
   185a8:	add	r0, r8, #1
   185ac:	cmp	r0, ip
   185b0:	movcc	r1, #36	; 0x24
   185b4:	strbcc	r1, [r5, r0]
   185b8:	add	r0, r8, #2
   185bc:	add	r8, r8, #3
   185c0:	cmp	r0, ip
   185c4:	movcc	r1, #39	; 0x27
   185c8:	strbcc	r1, [r5, r0]
   185cc:	mov	r1, #1
   185d0:	cmp	r8, ip
   185d4:	mov	r9, #0
   185d8:	mov	r6, #48	; 0x30
   185dc:	str	r1, [fp, #-56]	; 0xffffffc8
   185e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   185e4:	movcc	r0, #92	; 0x5c
   185e8:	strbcc	r0, [r5, r8]
   185ec:	add	r0, r8, #1
   185f0:	cmp	r1, #2
   185f4:	beq	188fc <__assert_fail@plt+0x6e80>
   185f8:	add	r1, r7, #1
   185fc:	cmp	r1, r2
   18600:	bcs	188fc <__assert_fail@plt+0x6e80>
   18604:	ldrb	r1, [r4, r1]
   18608:	sub	r1, r1, #48	; 0x30
   1860c:	uxtb	r1, r1
   18610:	cmp	r1, #9
   18614:	bhi	188fc <__assert_fail@plt+0x6e80>
   18618:	cmp	r0, ip
   1861c:	movcc	r1, #48	; 0x30
   18620:	strbcc	r1, [r5, r0]
   18624:	add	r0, r8, #2
   18628:	add	r8, r8, #3
   1862c:	cmp	r0, ip
   18630:	movcc	r1, #48	; 0x30
   18634:	strbcc	r1, [r5, r0]
   18638:	b	183f0 <__assert_fail@plt+0x6974>
   1863c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18640:	mov	r6, #63	; 0x3f
   18644:	cmp	r0, #5
   18648:	beq	18904 <__assert_fail@plt+0x6e88>
   1864c:	mov	r1, #0
   18650:	cmp	r0, #2
   18654:	str	r1, [fp, #-56]	; 0xffffffc8
   18658:	bne	189b8 <__assert_fail@plt+0x6f3c>
   1865c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18660:	mov	r9, #0
   18664:	b	184fc <__assert_fail@plt+0x6a80>
   18668:	mov	r0, #118	; 0x76
   1866c:	b	18780 <__assert_fail@plt+0x6d04>
   18670:	mov	r0, #1
   18674:	mov	r6, #39	; 0x27
   18678:	str	r0, [sp, #60]	; 0x3c
   1867c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18680:	cmp	r0, #2
   18684:	bne	186f8 <__assert_fail@plt+0x6c7c>
   18688:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1868c:	tst	r0, #1
   18690:	bne	18d20 <__assert_fail@plt+0x72a4>
   18694:	ldr	r2, [sp, #56]	; 0x38
   18698:	clz	r1, ip
   1869c:	mov	lr, #0
   186a0:	lsr	r1, r1, #5
   186a4:	cmp	r2, #0
   186a8:	mov	r0, r2
   186ac:	movwne	r0, #1
   186b0:	orrs	r0, r0, r1
   186b4:	moveq	r2, ip
   186b8:	moveq	ip, r0
   186bc:	cmp	r8, ip
   186c0:	str	r2, [sp, #56]	; 0x38
   186c4:	movcc	r0, #39	; 0x27
   186c8:	strbcc	r0, [r5, r8]
   186cc:	add	r0, r8, #1
   186d0:	cmp	r0, ip
   186d4:	movcc	r1, #92	; 0x5c
   186d8:	strbcc	r1, [r5, r0]
   186dc:	add	r0, r8, #2
   186e0:	add	r8, r8, #3
   186e4:	cmp	r0, ip
   186e8:	movcc	r1, #39	; 0x27
   186ec:	strbcc	r1, [r5, r0]
   186f0:	mov	r0, #0
   186f4:	str	r0, [fp, #-56]	; 0xffffffc8
   186f8:	mov	r9, #1
   186fc:	b	183f0 <__assert_fail@plt+0x6974>
   18700:	ldr	r0, [sp, #40]	; 0x28
   18704:	str	lr, [sp, #44]	; 0x2c
   18708:	str	ip, [sp, #88]	; 0x58
   1870c:	cmp	r0, #1
   18710:	bne	187c0 <__assert_fail@plt+0x6d44>
   18714:	str	sl, [sp, #36]	; 0x24
   18718:	bl	118a8 <__ctype_b_loc@plt>
   1871c:	ldr	r0, [r0]
   18720:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18724:	mov	r1, #1
   18728:	add	r0, r0, r6, lsl #1
   1872c:	ldrb	r0, [r0, #1]
   18730:	ubfx	r9, r0, #6, #1
   18734:	ldr	r0, [sp, #52]	; 0x34
   18738:	ldr	lr, [sp, #44]	; 0x2c
   1873c:	cmp	r1, #1
   18740:	orr	r3, r9, r0
   18744:	bhi	189c0 <__assert_fail@plt+0x6f44>
   18748:	tst	r3, #1
   1874c:	beq	189c0 <__assert_fail@plt+0x6f44>
   18750:	ldr	sl, [sp, #36]	; 0x24
   18754:	ldr	ip, [sp, #88]	; 0x58
   18758:	b	183f0 <__assert_fail@plt+0x6974>
   1875c:	ldr	r1, [sp, #48]	; 0x30
   18760:	mov	r0, #0
   18764:	str	r0, [fp, #-56]	; 0xffffffc8
   18768:	mov	r0, #92	; 0x5c
   1876c:	cmp	r1, #0
   18770:	beq	18780 <__assert_fail@plt+0x6d04>
   18774:	mov	r6, #92	; 0x5c
   18778:	mov	r9, #0
   1877c:	b	18b84 <__assert_fail@plt+0x7108>
   18780:	mov	r1, #0
   18784:	mov	r9, #0
   18788:	str	r1, [fp, #-56]	; 0xffffffc8
   1878c:	ldr	r1, [sp, #84]	; 0x54
   18790:	tst	r1, #1
   18794:	mov	r1, #0
   18798:	beq	183f0 <__assert_fail@plt+0x6974>
   1879c:	b	18438 <__assert_fail@plt+0x69bc>
   187a0:	ldr	r0, [sp, #32]
   187a4:	mov	r6, #0
   187a8:	mov	r9, #0
   187ac:	cmp	r0, #0
   187b0:	mov	r0, #0
   187b4:	str	r0, [fp, #-56]	; 0xffffffc8
   187b8:	beq	183f0 <__assert_fail@plt+0x6974>
   187bc:	b	18bdc <__assert_fail@plt+0x7160>
   187c0:	mov	r0, #0
   187c4:	cmn	sl, #1
   187c8:	sub	r3, fp, #40	; 0x28
   187cc:	str	r0, [fp, #-36]	; 0xffffffdc
   187d0:	str	r0, [fp, #-40]	; 0xffffffd8
   187d4:	bne	187ec <__assert_fail@plt+0x6d70>
   187d8:	mov	r0, r4
   187dc:	bl	118d8 <strlen@plt>
   187e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   187e4:	sub	r3, fp, #40	; 0x28
   187e8:	mov	sl, r0
   187ec:	ldr	r0, [sp, #72]	; 0x48
   187f0:	mov	r9, #1
   187f4:	mov	r1, #0
   187f8:	str	sl, [sp, #36]	; 0x24
   187fc:	add	r0, r0, r7
   18800:	str	r0, [sp, #20]
   18804:	add	r0, r1, r7
   18808:	str	r1, [sp, #24]
   1880c:	add	r1, r4, r0
   18810:	mov	r4, r0
   18814:	sub	r2, sl, r0
   18818:	sub	r0, fp, #44	; 0x2c
   1881c:	bl	1abd8 <__assert_fail@plt+0x915c>
   18820:	cmp	r0, #0
   18824:	beq	18c30 <__assert_fail@plt+0x71b4>
   18828:	cmn	r0, #1
   1882c:	beq	18be8 <__assert_fail@plt+0x716c>
   18830:	ldr	r2, [sp, #36]	; 0x24
   18834:	cmn	r0, #2
   18838:	beq	18bf0 <__assert_fail@plt+0x7174>
   1883c:	ldr	r2, [sp, #64]	; 0x40
   18840:	ldr	ip, [sp, #88]	; 0x58
   18844:	ldr	r4, [sp, #84]	; 0x54
   18848:	ldr	lr, [fp, #-48]	; 0xffffffd0
   1884c:	cmp	r0, #2
   18850:	mov	r1, #0
   18854:	movwcc	r1, #1
   18858:	eor	r2, r2, #1
   1885c:	orrs	r1, r2, r1
   18860:	bne	188b0 <__assert_fail@plt+0x6e34>
   18864:	ldr	r1, [sp, #24]
   18868:	ldr	r2, [sp, #20]
   1886c:	add	r1, r2, r1
   18870:	sub	r2, r0, #1
   18874:	ldrb	r3, [r1]
   18878:	sub	r5, r3, #94	; 0x5e
   1887c:	cmp	r5, #30
   18880:	bhi	18898 <__assert_fail@plt+0x6e1c>
   18884:	mov	r4, #1
   18888:	mov	sl, #1073741829	; 0x40000005
   1888c:	tst	sl, r4, lsl r5
   18890:	ldr	r4, [sp, #84]	; 0x54
   18894:	bne	18cf8 <__assert_fail@plt+0x727c>
   18898:	sub	r3, r3, #91	; 0x5b
   1889c:	cmp	r3, #2
   188a0:	bcc	18cf8 <__assert_fail@plt+0x727c>
   188a4:	add	r1, r1, #1
   188a8:	subs	r2, r2, #1
   188ac:	bne	18874 <__assert_fail@plt+0x6df8>
   188b0:	ldr	r5, [sp, #24]
   188b4:	str	lr, [fp, #-48]	; 0xffffffd0
   188b8:	add	r5, r0, r5
   188bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   188c0:	bl	117e8 <iswprint@plt>
   188c4:	cmp	r0, #0
   188c8:	sub	r4, fp, #40	; 0x28
   188cc:	movwne	r0, #1
   188d0:	and	r9, r9, r0
   188d4:	mov	r0, r4
   188d8:	bl	11734 <mbsinit@plt>
   188dc:	mov	r1, r5
   188e0:	mov	r3, r4
   188e4:	ldr	sl, [sp, #36]	; 0x24
   188e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   188ec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   188f0:	cmp	r0, #0
   188f4:	beq	18804 <__assert_fail@plt+0x6d88>
   188f8:	b	18734 <__assert_fail@plt+0x6cb8>
   188fc:	mov	r8, r0
   18900:	b	183f0 <__assert_fail@plt+0x6974>
   18904:	mov	r0, #0
   18908:	str	r0, [fp, #-56]	; 0xffffffc8
   1890c:	ldr	r0, [sp, #28]
   18910:	cmp	r0, #0
   18914:	beq	189b8 <__assert_fail@plt+0x6f3c>
   18918:	add	r0, r7, #2
   1891c:	mov	r1, sl
   18920:	cmp	r0, sl
   18924:	bcs	189b8 <__assert_fail@plt+0x6f3c>
   18928:	add	r1, r7, r4
   1892c:	ldrb	r1, [r1, #1]
   18930:	cmp	r1, #63	; 0x3f
   18934:	bne	189b8 <__assert_fail@plt+0x6f3c>
   18938:	ldrb	r9, [r4, r0]
   1893c:	sub	r2, r9, #33	; 0x21
   18940:	cmp	r2, #29
   18944:	bhi	189b8 <__assert_fail@plt+0x6f3c>
   18948:	mov	r1, r4
   1894c:	movw	r4, #20929	; 0x51c1
   18950:	mov	r3, #1
   18954:	movt	r4, #14336	; 0x3800
   18958:	tst	r4, r3, lsl r2
   1895c:	beq	18c44 <__assert_fail@plt+0x71c8>
   18960:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18964:	tst	r2, #1
   18968:	bne	18e14 <__assert_fail@plt+0x7398>
   1896c:	cmp	r8, ip
   18970:	mov	r4, r1
   18974:	mov	r7, r0
   18978:	mov	r6, r9
   1897c:	movcc	r2, #63	; 0x3f
   18980:	strbcc	r2, [r5, r8]
   18984:	add	r2, r8, #1
   18988:	cmp	r2, ip
   1898c:	movcc	r3, #34	; 0x22
   18990:	strbcc	r3, [r5, r2]
   18994:	add	r2, r8, #2
   18998:	cmp	r2, ip
   1899c:	movcc	r3, #34	; 0x22
   189a0:	strbcc	r3, [r5, r2]
   189a4:	add	r2, r8, #3
   189a8:	add	r8, r8, #4
   189ac:	cmp	r2, ip
   189b0:	movcc	r3, #63	; 0x3f
   189b4:	strbcc	r3, [r5, r2]
   189b8:	mov	r9, #0
   189bc:	b	183f0 <__assert_fail@plt+0x6974>
   189c0:	ldr	sl, [sp, #36]	; 0x24
   189c4:	add	r0, r1, r7
   189c8:	mov	r2, #0
   189cc:	str	r3, [sp, #24]
   189d0:	str	r0, [fp, #-56]	; 0xffffffc8
   189d4:	tst	r3, #1
   189d8:	beq	18a04 <__assert_fail@plt+0x6f88>
   189dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   189e0:	tst	r0, #1
   189e4:	beq	18acc <__assert_fail@plt+0x7050>
   189e8:	ldr	r1, [sp, #88]	; 0x58
   189ec:	mov	r0, r3
   189f0:	cmp	r8, r1
   189f4:	movcc	r1, #92	; 0x5c
   189f8:	strbcc	r1, [r5, r8]
   189fc:	add	r8, r8, #1
   18a00:	b	18ad0 <__assert_fail@plt+0x7054>
   18a04:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18a08:	tst	r1, #1
   18a0c:	bne	18d1c <__assert_fail@plt+0x72a0>
   18a10:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18a14:	subs	r2, r1, #2
   18a18:	movwne	r2, #1
   18a1c:	orr	r2, r2, lr
   18a20:	tst	r2, #1
   18a24:	bne	18a68 <__assert_fail@plt+0x6fec>
   18a28:	ldr	r1, [sp, #88]	; 0x58
   18a2c:	add	r2, r8, #1
   18a30:	mov	lr, #1
   18a34:	cmp	r8, r1
   18a38:	movcc	r1, #39	; 0x27
   18a3c:	strbcc	r1, [r5, r8]
   18a40:	ldr	r1, [sp, #88]	; 0x58
   18a44:	cmp	r2, r1
   18a48:	movcc	r1, #36	; 0x24
   18a4c:	strbcc	r1, [r5, r2]
   18a50:	ldr	r1, [sp, #88]	; 0x58
   18a54:	add	r2, r8, #2
   18a58:	add	r8, r8, #3
   18a5c:	cmp	r2, r1
   18a60:	movcc	r1, #39	; 0x27
   18a64:	strbcc	r1, [r5, r2]
   18a68:	ldr	r1, [sp, #88]	; 0x58
   18a6c:	add	r2, r8, #1
   18a70:	mov	r0, r3
   18a74:	cmp	r8, r1
   18a78:	movcc	r1, #92	; 0x5c
   18a7c:	strbcc	r1, [r5, r8]
   18a80:	ldr	r1, [sp, #88]	; 0x58
   18a84:	cmp	r2, r1
   18a88:	bcs	18a9c <__assert_fail@plt+0x7020>
   18a8c:	uxtb	r3, r6
   18a90:	mov	r1, #48	; 0x30
   18a94:	orr	r3, r1, r3, lsr #6
   18a98:	strb	r3, [r5, r2]
   18a9c:	ldr	r1, [sp, #88]	; 0x58
   18aa0:	add	r2, r8, #2
   18aa4:	add	r8, r8, #3
   18aa8:	cmp	r2, r1
   18aac:	lsrcc	r3, r6, #3
   18ab0:	movcc	r1, #6
   18ab4:	bficc	r3, r1, #3, #29
   18ab8:	mov	r1, #6
   18abc:	bfi	r6, r1, #3, #29
   18ac0:	strbcc	r3, [r5, r2]
   18ac4:	mov	r2, #1
   18ac8:	b	18ad8 <__assert_fail@plt+0x705c>
   18acc:	mov	r0, r3
   18ad0:	mov	r1, #0
   18ad4:	str	r1, [fp, #-52]	; 0xffffffcc
   18ad8:	mov	ip, r2
   18adc:	and	r1, r2, #1
   18ae0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18ae4:	add	r3, r7, #1
   18ae8:	cmp	r2, r3
   18aec:	bls	18b74 <__assert_fail@plt+0x70f8>
   18af0:	cmp	r1, #0
   18af4:	mvn	r5, lr
   18af8:	movwne	r1, #1
   18afc:	orr	r5, r5, r1
   18b00:	tst	r5, #1
   18b04:	bne	18b48 <__assert_fail@plt+0x70cc>
   18b08:	ldr	r1, [sp, #88]	; 0x58
   18b0c:	ldr	r5, [fp, #-84]	; 0xffffffac
   18b10:	mov	r2, r4
   18b14:	ldr	r4, [sp, #88]	; 0x58
   18b18:	ldr	r0, [sp, #24]
   18b1c:	mov	lr, #0
   18b20:	cmp	r8, r1
   18b24:	movcc	r1, #39	; 0x27
   18b28:	strbcc	r1, [r5, r8]
   18b2c:	add	r1, r8, #1
   18b30:	add	r8, r8, #2
   18b34:	cmp	r1, r4
   18b38:	movcc	r4, #39	; 0x27
   18b3c:	strbcc	r4, [r5, r1]
   18b40:	mov	r4, r2
   18b44:	b	18b4c <__assert_fail@plt+0x70d0>
   18b48:	ldr	r5, [fp, #-84]	; 0xffffffac
   18b4c:	ldr	r1, [sp, #88]	; 0x58
   18b50:	mov	r2, ip
   18b54:	cmp	r8, r1
   18b58:	ldr	r1, [sp, #72]	; 0x48
   18b5c:	strbcc	r6, [r5, r8]
   18b60:	add	r8, r8, #1
   18b64:	ldrb	r6, [r1, r7]
   18b68:	mov	r7, r3
   18b6c:	mov	r3, r0
   18b70:	b	189d4 <__assert_fail@plt+0x6f58>
   18b74:	ldr	ip, [sp, #88]	; 0x58
   18b78:	cmp	r1, #0
   18b7c:	movwne	r1, #1
   18b80:	str	r1, [fp, #-56]	; 0xffffffc8
   18b84:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18b88:	cmp	r0, #0
   18b8c:	bne	18bbc <__assert_fail@plt+0x7140>
   18b90:	tst	lr, #1
   18b94:	beq	18bbc <__assert_fail@plt+0x7140>
   18b98:	cmp	r8, ip
   18b9c:	mov	lr, #0
   18ba0:	movcc	r0, #39	; 0x27
   18ba4:	strbcc	r0, [r5, r8]
   18ba8:	add	r0, r8, #1
   18bac:	add	r8, r8, #2
   18bb0:	cmp	r0, ip
   18bb4:	movcc	r1, #39	; 0x27
   18bb8:	strbcc	r1, [r5, r0]
   18bbc:	mov	r1, r9
   18bc0:	mov	r0, r6
   18bc4:	cmp	r8, ip
   18bc8:	strbcc	r0, [r5, r8]
   18bcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18bd0:	add	r8, r8, #1
   18bd4:	and	r0, r0, r1
   18bd8:	str	r0, [fp, #-48]	; 0xffffffd0
   18bdc:	mov	r3, sl
   18be0:	add	r7, r7, #1
   18be4:	b	180d4 <__assert_fail@plt+0x6658>
   18be8:	mov	r9, #0
   18bec:	b	18c30 <__assert_fail@plt+0x71b4>
   18bf0:	mov	r9, #0
   18bf4:	cmp	r2, r4
   18bf8:	bls	18c30 <__assert_fail@plt+0x71b4>
   18bfc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18c00:	ldr	r1, [sp, #24]
   18c04:	add	r0, r4, r7
   18c08:	mov	r3, r1
   18c0c:	ldrb	r1, [r0, r1]
   18c10:	cmp	r1, #0
   18c14:	beq	18c3c <__assert_fail@plt+0x71c0>
   18c18:	add	r3, r3, #1
   18c1c:	add	r1, r7, r3
   18c20:	cmp	r1, r2
   18c24:	mov	r1, r3
   18c28:	bcc	18c08 <__assert_fail@plt+0x718c>
   18c2c:	b	18734 <__assert_fail@plt+0x6cb8>
   18c30:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18c34:	ldr	r1, [sp, #24]
   18c38:	b	18734 <__assert_fail@plt+0x6cb8>
   18c3c:	mov	r1, r3
   18c40:	b	18734 <__assert_fail@plt+0x6cb8>
   18c44:	mov	r9, #0
   18c48:	mov	r4, r1
   18c4c:	b	183f0 <__assert_fail@plt+0x6974>
   18c50:	mov	sl, r7
   18c54:	b	18c5c <__assert_fail@plt+0x71e0>
   18c58:	mvn	sl, #0
   18c5c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18c60:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18c64:	eor	r0, r1, #2
   18c68:	orr	r0, r0, r8
   18c6c:	clz	r0, r0
   18c70:	lsr	r0, r0, #5
   18c74:	tst	r2, r0
   18c78:	bne	18d20 <__assert_fail@plt+0x72a4>
   18c7c:	subs	r0, r1, #2
   18c80:	movwne	r0, #1
   18c84:	orr	r0, r2, r0
   18c88:	tst	r0, #1
   18c8c:	ldreq	r0, [sp, #60]	; 0x3c
   18c90:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   18c94:	eoreq	r0, r0, #1
   18c98:	tsteq	r0, #1
   18c9c:	bne	18db4 <__assert_fail@plt+0x7338>
   18ca0:	tst	r1, #1
   18ca4:	bne	18d80 <__assert_fail@plt+0x7304>
   18ca8:	ldr	r6, [sp, #56]	; 0x38
   18cac:	mov	r9, #0
   18cb0:	cmp	r6, #0
   18cb4:	beq	18dac <__assert_fail@plt+0x7330>
   18cb8:	ldr	r0, [sp, #84]	; 0x54
   18cbc:	mov	r1, #0
   18cc0:	mov	r7, #2
   18cc4:	cmp	ip, #0
   18cc8:	str	r1, [fp, #-48]	; 0xffffffd0
   18ccc:	mov	r1, #0
   18cd0:	str	r1, [fp, #-76]	; 0xffffffb4
   18cd4:	beq	17e3c <__assert_fail@plt+0x63c0>
   18cd8:	b	18db4 <__assert_fail@plt+0x7338>
   18cdc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18ce0:	ldr	r1, [fp, #12]
   18ce4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18ce8:	mov	r5, r3
   18cec:	mov	ip, r6
   18cf0:	mov	r3, sl
   18cf4:	b	18d44 <__assert_fail@plt+0x72c8>
   18cf8:	tst	r4, #1
   18cfc:	ldr	r5, [fp, #-84]	; 0xffffffac
   18d00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18d04:	ldr	r1, [fp, #12]
   18d08:	ldr	r3, [sp, #36]	; 0x24
   18d0c:	mov	r0, #2
   18d10:	movwne	r0, #4
   18d14:	mov	r2, r0
   18d18:	b	18d44 <__assert_fail@plt+0x72c8>
   18d1c:	ldr	ip, [sp, #88]	; 0x58
   18d20:	ldr	r1, [sp, #84]	; 0x54
   18d24:	mov	r0, #2
   18d28:	tst	r1, #1
   18d2c:	movwne	r0, #4
   18d30:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18d34:	ldr	r1, [fp, #12]
   18d38:	mov	r3, sl
   18d3c:	cmp	r2, #2
   18d40:	moveq	r2, r0
   18d44:	mov	r0, #0
   18d48:	bic	r1, r1, #2
   18d4c:	str	r2, [sp]
   18d50:	mov	r2, r4
   18d54:	str	r0, [sp, #8]
   18d58:	ldr	r0, [sp, #76]	; 0x4c
   18d5c:	str	r1, [sp, #4]
   18d60:	mov	r1, ip
   18d64:	str	r0, [sp, #12]
   18d68:	ldr	r0, [sp, #80]	; 0x50
   18d6c:	str	r0, [sp, #16]
   18d70:	mov	r0, r5
   18d74:	bl	17db0 <__assert_fail@plt+0x6334>
   18d78:	mov	r8, r0
   18d7c:	b	18e00 <__assert_fail@plt+0x7384>
   18d80:	mov	r0, #5
   18d84:	ldr	r1, [sp, #56]	; 0x38
   18d88:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18d8c:	mov	r3, sl
   18d90:	str	r0, [sp]
   18d94:	ldr	r0, [fp, #12]
   18d98:	str	r0, [sp, #4]
   18d9c:	ldr	r0, [fp, #16]
   18da0:	str	r0, [sp, #8]
   18da4:	ldr	r0, [sp, #76]	; 0x4c
   18da8:	b	18d64 <__assert_fail@plt+0x72e8>
   18dac:	mov	r0, #0
   18db0:	str	r0, [fp, #-76]	; 0xffffffb4
   18db4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18db8:	cmp	r1, #0
   18dbc:	beq	18df4 <__assert_fail@plt+0x7378>
   18dc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18dc4:	tst	r0, #1
   18dc8:	bne	18df4 <__assert_fail@plt+0x7378>
   18dcc:	ldrb	r0, [r1]
   18dd0:	cmp	r0, #0
   18dd4:	beq	18df4 <__assert_fail@plt+0x7378>
   18dd8:	add	r1, r1, #1
   18ddc:	cmp	r8, ip
   18de0:	strbcc	r0, [r5, r8]
   18de4:	add	r8, r8, #1
   18de8:	ldrb	r0, [r1], #1
   18dec:	cmp	r0, #0
   18df0:	bne	18ddc <__assert_fail@plt+0x7360>
   18df4:	cmp	r8, ip
   18df8:	movcc	r0, #0
   18dfc:	strbcc	r0, [r5, r8]
   18e00:	mov	r0, r8
   18e04:	sub	sp, fp, #28
   18e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e0c:	mov	r0, #4
   18e10:	b	18d30 <__assert_fail@plt+0x72b4>
   18e14:	mov	r4, r1
   18e18:	b	18d20 <__assert_fail@plt+0x72a4>
   18e1c:	bl	11a64 <abort@plt>
   18e20:	mov	r3, r2
   18e24:	mov	r2, #0
   18e28:	b	18e2c <__assert_fail@plt+0x73b0>
   18e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e30:	add	fp, sp, #28
   18e34:	sub	sp, sp, #36	; 0x24
   18e38:	movw	r8, #4616	; 0x1208
   18e3c:	cmp	r3, #0
   18e40:	mov	r4, r2
   18e44:	str	r2, [sp, #24]
   18e48:	mov	r5, r1
   18e4c:	mov	r6, r0
   18e50:	str	r0, [sp, #20]
   18e54:	movt	r8, #3
   18e58:	movne	r8, r3
   18e5c:	bl	11908 <__errno_location@plt>
   18e60:	str	r0, [sp, #28]
   18e64:	ldr	r1, [r8, #40]	; 0x28
   18e68:	ldr	r2, [r8, #44]	; 0x2c
   18e6c:	ldr	r7, [r0]
   18e70:	cmp	r4, #0
   18e74:	add	sl, r8, #8
   18e78:	mov	r0, #0
   18e7c:	ldm	r8, {r3, r9}
   18e80:	orreq	r9, r9, #1
   18e84:	stm	sp, {r3, r9, sl}
   18e88:	str	r1, [sp, #12]
   18e8c:	str	r2, [sp, #16]
   18e90:	mov	r1, #0
   18e94:	mov	r2, r6
   18e98:	mov	r3, r5
   18e9c:	str	r7, [sp, #32]
   18ea0:	mov	r7, r5
   18ea4:	bl	17db0 <__assert_fail@plt+0x6334>
   18ea8:	add	r4, r0, #1
   18eac:	mov	r5, r0
   18eb0:	mov	r0, r4
   18eb4:	bl	1a138 <__assert_fail@plt+0x86bc>
   18eb8:	mov	r6, r0
   18ebc:	ldr	r0, [r8]
   18ec0:	ldr	r2, [r8, #44]	; 0x2c
   18ec4:	ldr	r1, [r8, #40]	; 0x28
   18ec8:	mov	r3, r7
   18ecc:	stm	sp, {r0, r9, sl}
   18ed0:	str	r2, [sp, #16]
   18ed4:	ldr	r2, [sp, #20]
   18ed8:	str	r1, [sp, #12]
   18edc:	mov	r0, r6
   18ee0:	mov	r1, r4
   18ee4:	bl	17db0 <__assert_fail@plt+0x6334>
   18ee8:	ldr	r0, [sp, #24]
   18eec:	ldr	r1, [sp, #32]
   18ef0:	ldr	r2, [sp, #28]
   18ef4:	cmp	r0, #0
   18ef8:	str	r1, [r2]
   18efc:	strne	r5, [r0]
   18f00:	mov	r0, r6
   18f04:	sub	sp, fp, #28
   18f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18f10:	add	fp, sp, #24
   18f14:	movw	r5, #4492	; 0x118c
   18f18:	movw	r8, #4488	; 0x1188
   18f1c:	movt	r5, #3
   18f20:	movt	r8, #3
   18f24:	ldr	r0, [r5]
   18f28:	ldr	r4, [r8]
   18f2c:	cmp	r0, #2
   18f30:	blt	18f5c <__assert_fail@plt+0x74e0>
   18f34:	add	r7, r4, #12
   18f38:	mov	r6, #0
   18f3c:	ldr	r0, [r7, r6, lsl #3]
   18f40:	bl	174f4 <__assert_fail@plt+0x5a78>
   18f44:	ldr	r1, [r5]
   18f48:	add	r2, r6, #2
   18f4c:	add	r0, r6, #1
   18f50:	mov	r6, r0
   18f54:	cmp	r2, r1
   18f58:	blt	18f3c <__assert_fail@plt+0x74c0>
   18f5c:	ldr	r0, [r4, #4]
   18f60:	movw	r9, #4664	; 0x1238
   18f64:	movw	r7, #4496	; 0x1190
   18f68:	movt	r9, #3
   18f6c:	movt	r7, #3
   18f70:	cmp	r0, r9
   18f74:	beq	18f84 <__assert_fail@plt+0x7508>
   18f78:	bl	174f4 <__assert_fail@plt+0x5a78>
   18f7c:	mov	r0, #256	; 0x100
   18f80:	stm	r7, {r0, r9}
   18f84:	cmp	r4, r7
   18f88:	beq	18f98 <__assert_fail@plt+0x751c>
   18f8c:	mov	r0, r4
   18f90:	bl	174f4 <__assert_fail@plt+0x5a78>
   18f94:	str	r7, [r8]
   18f98:	mov	r0, #1
   18f9c:	str	r0, [r5]
   18fa0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18fa4:	movw	r3, #4616	; 0x1208
   18fa8:	mvn	r2, #0
   18fac:	movt	r3, #3
   18fb0:	b	18fb4 <__assert_fail@plt+0x7538>
   18fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb8:	add	fp, sp, #28
   18fbc:	sub	sp, sp, #44	; 0x2c
   18fc0:	mov	r7, r3
   18fc4:	str	r2, [sp, #36]	; 0x24
   18fc8:	str	r1, [sp, #32]
   18fcc:	mov	r5, r0
   18fd0:	bl	11908 <__errno_location@plt>
   18fd4:	cmp	r5, #0
   18fd8:	bmi	19148 <__assert_fail@plt+0x76cc>
   18fdc:	cmn	r5, #-2147483647	; 0x80000001
   18fe0:	beq	19148 <__assert_fail@plt+0x76cc>
   18fe4:	movw	r8, #4492	; 0x118c
   18fe8:	movw	r4, #4488	; 0x1188
   18fec:	str	r0, [sp, #28]
   18ff0:	ldr	r0, [r0]
   18ff4:	movt	r8, #3
   18ff8:	movt	r4, #3
   18ffc:	ldr	r1, [r8]
   19000:	ldr	r6, [r4]
   19004:	str	r0, [sp, #24]
   19008:	cmp	r1, r5
   1900c:	ble	19018 <__assert_fail@plt+0x759c>
   19010:	mov	sl, r6
   19014:	b	19084 <__assert_fail@plt+0x7608>
   19018:	movw	r9, #4496	; 0x1190
   1901c:	mov	r0, #8
   19020:	str	r1, [fp, #-32]	; 0xffffffe0
   19024:	sub	r1, r5, r1
   19028:	mvn	r3, #-2147483648	; 0x80000000
   1902c:	movt	r9, #3
   19030:	str	r0, [sp]
   19034:	add	r2, r1, #1
   19038:	sub	r1, fp, #32
   1903c:	subs	r0, r6, r9
   19040:	movne	r0, r6
   19044:	bl	1a268 <__assert_fail@plt+0x87ec>
   19048:	mov	sl, r0
   1904c:	cmp	r6, r9
   19050:	str	r0, [r4]
   19054:	bne	19060 <__assert_fail@plt+0x75e4>
   19058:	ldrd	r0, [r9]
   1905c:	stm	sl, {r0, r1}
   19060:	ldr	r1, [r8]
   19064:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19068:	add	r0, sl, r1, lsl #3
   1906c:	sub	r1, r2, r1
   19070:	lsl	r2, r1, #3
   19074:	mov	r1, #0
   19078:	bl	11938 <memset@plt>
   1907c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19080:	str	r0, [r8]
   19084:	mov	r9, sl
   19088:	ldm	r7, {r0, r1}
   1908c:	orr	r8, r1, #1
   19090:	add	r1, r7, #8
   19094:	ldr	r2, [r7, #40]	; 0x28
   19098:	ldr	r3, [r7, #44]	; 0x2c
   1909c:	ldr	r6, [r9, r5, lsl #3]!
   190a0:	str	r1, [sp, #20]
   190a4:	ldr	r4, [r9, #4]!
   190a8:	stm	sp, {r0, r8}
   190ac:	add	r0, sp, #8
   190b0:	stm	r0, {r1, r2, r3}
   190b4:	ldr	r2, [sp, #32]
   190b8:	ldr	r3, [sp, #36]	; 0x24
   190bc:	mov	r1, r6
   190c0:	mov	r0, r4
   190c4:	bl	17db0 <__assert_fail@plt+0x6334>
   190c8:	cmp	r6, r0
   190cc:	bhi	19130 <__assert_fail@plt+0x76b4>
   190d0:	add	r6, r0, #1
   190d4:	movw	r0, #4664	; 0x1238
   190d8:	movt	r0, #3
   190dc:	str	r6, [sl, r5, lsl #3]
   190e0:	cmp	r4, r0
   190e4:	beq	190f0 <__assert_fail@plt+0x7674>
   190e8:	mov	r0, r4
   190ec:	bl	174f4 <__assert_fail@plt+0x5a78>
   190f0:	mov	r0, r6
   190f4:	bl	1a138 <__assert_fail@plt+0x86bc>
   190f8:	str	r0, [r9]
   190fc:	mov	r4, r0
   19100:	add	r3, sp, #8
   19104:	ldr	r0, [r7]
   19108:	ldr	r1, [r7, #40]	; 0x28
   1910c:	ldr	r2, [r7, #44]	; 0x2c
   19110:	stm	sp, {r0, r8}
   19114:	ldr	r0, [sp, #20]
   19118:	stm	r3, {r0, r1, r2}
   1911c:	ldr	r2, [sp, #32]
   19120:	ldr	r3, [sp, #36]	; 0x24
   19124:	mov	r0, r4
   19128:	mov	r1, r6
   1912c:	bl	17db0 <__assert_fail@plt+0x6334>
   19130:	ldr	r0, [sp, #28]
   19134:	ldr	r1, [sp, #24]
   19138:	str	r1, [r0]
   1913c:	mov	r0, r4
   19140:	sub	sp, fp, #28
   19144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19148:	bl	11a64 <abort@plt>
   1914c:	movw	r3, #4616	; 0x1208
   19150:	movt	r3, #3
   19154:	b	18fb4 <__assert_fail@plt+0x7538>
   19158:	movw	r3, #4616	; 0x1208
   1915c:	mov	r1, r0
   19160:	mov	r0, #0
   19164:	mvn	r2, #0
   19168:	movt	r3, #3
   1916c:	b	18fb4 <__assert_fail@plt+0x7538>
   19170:	movw	r3, #4616	; 0x1208
   19174:	mov	r2, r1
   19178:	mov	r1, r0
   1917c:	mov	r0, #0
   19180:	movt	r3, #3
   19184:	b	18fb4 <__assert_fail@plt+0x7538>
   19188:	push	{fp, lr}
   1918c:	mov	fp, sp
   19190:	sub	sp, sp, #48	; 0x30
   19194:	vmov.i32	q8, #0	; 0x00000000
   19198:	mov	ip, #32
   1919c:	mov	r3, sp
   191a0:	mov	lr, r2
   191a4:	cmp	r1, #10
   191a8:	add	r2, r3, #16
   191ac:	vst1.64	{d16-d17}, [r3], ip
   191b0:	vst1.64	{d16-d17}, [r2]
   191b4:	vst1.64	{d16-d17}, [r3]
   191b8:	beq	191d8 <__assert_fail@plt+0x775c>
   191bc:	str	r1, [sp]
   191c0:	mov	r3, sp
   191c4:	mov	r1, lr
   191c8:	mvn	r2, #0
   191cc:	bl	18fb4 <__assert_fail@plt+0x7538>
   191d0:	mov	sp, fp
   191d4:	pop	{fp, pc}
   191d8:	bl	11a64 <abort@plt>
   191dc:	push	{r4, sl, fp, lr}
   191e0:	add	fp, sp, #8
   191e4:	sub	sp, sp, #48	; 0x30
   191e8:	vmov.i32	q8, #0	; 0x00000000
   191ec:	mov	ip, r3
   191f0:	mov	r3, sp
   191f4:	mov	lr, #32
   191f8:	cmp	r1, #10
   191fc:	add	r4, r3, #16
   19200:	vst1.64	{d16-d17}, [r3], lr
   19204:	vst1.64	{d16-d17}, [r4]
   19208:	vst1.64	{d16-d17}, [r3]
   1920c:	beq	1922c <__assert_fail@plt+0x77b0>
   19210:	str	r1, [sp]
   19214:	mov	r1, r2
   19218:	mov	r3, sp
   1921c:	mov	r2, ip
   19220:	bl	18fb4 <__assert_fail@plt+0x7538>
   19224:	sub	sp, fp, #8
   19228:	pop	{r4, sl, fp, pc}
   1922c:	bl	11a64 <abort@plt>
   19230:	mov	r2, r1
   19234:	mov	r1, r0
   19238:	mov	r0, #0
   1923c:	b	19188 <__assert_fail@plt+0x770c>
   19240:	mov	r3, r2
   19244:	mov	r2, r1
   19248:	mov	r1, r0
   1924c:	mov	r0, #0
   19250:	b	191dc <__assert_fail@plt+0x7760>
   19254:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19258:	add	fp, sp, #24
   1925c:	sub	sp, sp, #48	; 0x30
   19260:	movw	r8, #4616	; 0x1208
   19264:	mov	lr, r0
   19268:	mov	r3, sp
   1926c:	mov	ip, r1
   19270:	movt	r8, #3
   19274:	mov	r1, r3
   19278:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1927c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   19280:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   19284:	stm	r1, {r0, r4, r5, r6, r7, r9}
   19288:	ubfx	r0, r2, #5, #3
   1928c:	and	r2, r2, #31
   19290:	mov	r4, #1
   19294:	add	r0, r3, r0, lsl #2
   19298:	ldr	r1, [r0, #8]
   1929c:	bic	r4, r4, r1, lsr r2
   192a0:	eor	r1, r1, r4, lsl r2
   192a4:	mov	r2, ip
   192a8:	str	r1, [r0, #8]
   192ac:	mov	r0, #0
   192b0:	mov	r1, lr
   192b4:	bl	18fb4 <__assert_fail@plt+0x7538>
   192b8:	sub	sp, fp, #24
   192bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   192c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   192c4:	add	fp, sp, #24
   192c8:	sub	sp, sp, #48	; 0x30
   192cc:	movw	lr, #4616	; 0x1208
   192d0:	mov	ip, r0
   192d4:	mov	r3, sp
   192d8:	movt	lr, #3
   192dc:	mov	r2, r3
   192e0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   192e4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   192e8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   192ec:	stm	r2, {r0, r4, r5, r6, r7, r8}
   192f0:	ubfx	r0, r1, #5, #3
   192f4:	and	r1, r1, #31
   192f8:	mov	r7, #1
   192fc:	add	r0, r3, r0, lsl #2
   19300:	ldr	r2, [r0, #8]
   19304:	bic	r7, r7, r2, lsr r1
   19308:	eor	r1, r2, r7, lsl r1
   1930c:	mvn	r2, #0
   19310:	str	r1, [r0, #8]
   19314:	mov	r0, #0
   19318:	mov	r1, ip
   1931c:	bl	18fb4 <__assert_fail@plt+0x7538>
   19320:	sub	sp, fp, #24
   19324:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19328:	push	{r4, r5, r6, r7, fp, lr}
   1932c:	add	fp, sp, #16
   19330:	sub	sp, sp, #48	; 0x30
   19334:	movw	lr, #4616	; 0x1208
   19338:	mov	ip, r0
   1933c:	mov	r3, sp
   19340:	movt	lr, #3
   19344:	mov	r2, r3
   19348:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1934c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   19350:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   19354:	stm	r2, {r0, r1, r4, r5, r6, r7}
   19358:	mov	r1, ip
   1935c:	mvn	r2, #0
   19360:	ldr	r0, [sp, #12]
   19364:	orr	r0, r0, #67108864	; 0x4000000
   19368:	str	r0, [sp, #12]
   1936c:	mov	r0, #0
   19370:	bl	18fb4 <__assert_fail@plt+0x7538>
   19374:	sub	sp, fp, #16
   19378:	pop	{r4, r5, r6, r7, fp, pc}
   1937c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19380:	add	fp, sp, #24
   19384:	sub	sp, sp, #48	; 0x30
   19388:	movw	r8, #4616	; 0x1208
   1938c:	mov	ip, r1
   19390:	mov	lr, r0
   19394:	mov	r3, sp
   19398:	movt	r8, #3
   1939c:	mov	r2, r3
   193a0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   193a4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   193a8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   193ac:	stm	r2, {r0, r1, r4, r5, r6, r7}
   193b0:	mov	r1, lr
   193b4:	mov	r2, ip
   193b8:	ldr	r0, [sp, #12]
   193bc:	orr	r0, r0, #67108864	; 0x4000000
   193c0:	str	r0, [sp, #12]
   193c4:	mov	r0, #0
   193c8:	bl	18fb4 <__assert_fail@plt+0x7538>
   193cc:	sub	sp, fp, #24
   193d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   193d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   193d8:	add	fp, sp, #24
   193dc:	sub	sp, sp, #96	; 0x60
   193e0:	vmov.i32	q8, #0	; 0x00000000
   193e4:	mov	lr, sp
   193e8:	mov	ip, r2
   193ec:	cmp	r1, #10
   193f0:	add	r3, lr, #16
   193f4:	mov	r2, lr
   193f8:	vst1.64	{d16-d17}, [r3]
   193fc:	mov	r3, #28
   19400:	vst1.64	{d16-d17}, [r2], r3
   19404:	vst1.32	{d16-d17}, [r2]
   19408:	beq	19448 <__assert_fail@plt+0x79cc>
   1940c:	str	r1, [sp, #48]	; 0x30
   19410:	add	r3, sp, #48	; 0x30
   19414:	ldm	lr!, {r2, r4, r5, r6, r7}
   19418:	add	r1, r3, #4
   1941c:	stmia	r1!, {r2, r4, r5, r6, r7}
   19420:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   19424:	stm	r1, {r2, r4, r5, r6, r7, r8}
   19428:	mvn	r2, #0
   1942c:	ldr	r1, [sp, #60]	; 0x3c
   19430:	orr	r1, r1, #67108864	; 0x4000000
   19434:	str	r1, [sp, #60]	; 0x3c
   19438:	mov	r1, ip
   1943c:	bl	18fb4 <__assert_fail@plt+0x7538>
   19440:	sub	sp, fp, #24
   19444:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19448:	bl	11a64 <abort@plt>
   1944c:	push	{fp, lr}
   19450:	mov	fp, sp
   19454:	sub	sp, sp, #8
   19458:	mvn	ip, #0
   1945c:	str	ip, [sp]
   19460:	bl	1946c <__assert_fail@plt+0x79f0>
   19464:	mov	sp, fp
   19468:	pop	{fp, pc}
   1946c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19470:	add	fp, sp, #24
   19474:	sub	sp, sp, #48	; 0x30
   19478:	movw	ip, #4616	; 0x1208
   1947c:	mov	lr, r3
   19480:	mov	r3, sp
   19484:	cmp	r1, #0
   19488:	movt	ip, #3
   1948c:	cmpne	r2, #0
   19490:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   19494:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   19498:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1949c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   194a0:	mov	r3, #10
   194a4:	str	r3, [sp]
   194a8:	bne	194b0 <__assert_fail@plt+0x7a34>
   194ac:	bl	11a64 <abort@plt>
   194b0:	ldr	ip, [fp, #8]
   194b4:	str	r2, [sp, #44]	; 0x2c
   194b8:	str	r1, [sp, #40]	; 0x28
   194bc:	mov	r3, sp
   194c0:	mov	r1, lr
   194c4:	mov	r2, ip
   194c8:	bl	18fb4 <__assert_fail@plt+0x7538>
   194cc:	sub	sp, fp, #24
   194d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   194d4:	push	{fp, lr}
   194d8:	mov	fp, sp
   194dc:	sub	sp, sp, #8
   194e0:	mov	r3, r2
   194e4:	mov	r2, r1
   194e8:	mov	r1, r0
   194ec:	mvn	r0, #0
   194f0:	str	r0, [sp]
   194f4:	mov	r0, #0
   194f8:	bl	1946c <__assert_fail@plt+0x79f0>
   194fc:	mov	sp, fp
   19500:	pop	{fp, pc}
   19504:	push	{fp, lr}
   19508:	mov	fp, sp
   1950c:	sub	sp, sp, #8
   19510:	mov	ip, r2
   19514:	mov	r2, r1
   19518:	mov	r1, r0
   1951c:	str	r3, [sp]
   19520:	mov	r0, #0
   19524:	mov	r3, ip
   19528:	bl	1946c <__assert_fail@plt+0x79f0>
   1952c:	mov	sp, fp
   19530:	pop	{fp, pc}
   19534:	movw	r3, #4504	; 0x1198
   19538:	movt	r3, #3
   1953c:	b	18fb4 <__assert_fail@plt+0x7538>
   19540:	movw	r3, #4504	; 0x1198
   19544:	mov	r2, r1
   19548:	mov	r1, r0
   1954c:	mov	r0, #0
   19550:	movt	r3, #3
   19554:	b	18fb4 <__assert_fail@plt+0x7538>
   19558:	movw	r3, #4504	; 0x1198
   1955c:	mvn	r2, #0
   19560:	movt	r3, #3
   19564:	b	18fb4 <__assert_fail@plt+0x7538>
   19568:	movw	r3, #4504	; 0x1198
   1956c:	mov	r1, r0
   19570:	mov	r0, #0
   19574:	mvn	r2, #0
   19578:	movt	r3, #3
   1957c:	b	18fb4 <__assert_fail@plt+0x7538>
   19580:	push	{r4, r5, fp, lr}
   19584:	add	fp, sp, #8
   19588:	mov	r5, r0
   1958c:	mov	r4, r1
   19590:	mov	r0, #0
   19594:	mov	r2, #5
   19598:	mov	r1, r5
   1959c:	bl	1174c <dcgettext@plt>
   195a0:	cmp	r0, r5
   195a4:	popne	{r4, r5, fp, pc}
   195a8:	bl	1a968 <__assert_fail@plt+0x8eec>
   195ac:	ldrb	r1, [r0]
   195b0:	and	r1, r1, #223	; 0xdf
   195b4:	cmp	r1, #71	; 0x47
   195b8:	beq	19620 <__assert_fail@plt+0x7ba4>
   195bc:	cmp	r1, #85	; 0x55
   195c0:	bne	19678 <__assert_fail@plt+0x7bfc>
   195c4:	ldrb	r1, [r0, #1]
   195c8:	and	r1, r1, #223	; 0xdf
   195cc:	cmp	r1, #84	; 0x54
   195d0:	bne	19678 <__assert_fail@plt+0x7bfc>
   195d4:	ldrb	r1, [r0, #2]
   195d8:	and	r1, r1, #223	; 0xdf
   195dc:	cmp	r1, #70	; 0x46
   195e0:	bne	19678 <__assert_fail@plt+0x7bfc>
   195e4:	ldrb	r1, [r0, #3]
   195e8:	cmp	r1, #45	; 0x2d
   195ec:	bne	19678 <__assert_fail@plt+0x7bfc>
   195f0:	ldrb	r1, [r0, #4]
   195f4:	cmp	r1, #56	; 0x38
   195f8:	bne	19678 <__assert_fail@plt+0x7bfc>
   195fc:	ldrb	r0, [r0, #5]
   19600:	cmp	r0, #0
   19604:	bne	19678 <__assert_fail@plt+0x7bfc>
   19608:	ldrb	r1, [r5]
   1960c:	movw	r2, #64304	; 0xfb30
   19610:	movw	r0, #64308	; 0xfb34
   19614:	movt	r2, #1
   19618:	movt	r0, #1
   1961c:	b	196a8 <__assert_fail@plt+0x7c2c>
   19620:	ldrb	r1, [r0, #1]
   19624:	and	r1, r1, #223	; 0xdf
   19628:	cmp	r1, #66	; 0x42
   1962c:	bne	19678 <__assert_fail@plt+0x7bfc>
   19630:	ldrb	r1, [r0, #2]
   19634:	cmp	r1, #49	; 0x31
   19638:	bne	19678 <__assert_fail@plt+0x7bfc>
   1963c:	ldrb	r1, [r0, #3]
   19640:	cmp	r1, #56	; 0x38
   19644:	bne	19678 <__assert_fail@plt+0x7bfc>
   19648:	ldrb	r1, [r0, #4]
   1964c:	cmp	r1, #48	; 0x30
   19650:	bne	19678 <__assert_fail@plt+0x7bfc>
   19654:	ldrb	r1, [r0, #5]
   19658:	cmp	r1, #51	; 0x33
   1965c:	bne	19678 <__assert_fail@plt+0x7bfc>
   19660:	ldrb	r1, [r0, #6]
   19664:	cmp	r1, #48	; 0x30
   19668:	bne	19678 <__assert_fail@plt+0x7bfc>
   1966c:	ldrb	r0, [r0, #7]
   19670:	cmp	r0, #0
   19674:	beq	19694 <__assert_fail@plt+0x7c18>
   19678:	movw	r1, #64300	; 0xfb2c
   1967c:	movw	r0, #65316	; 0xff24
   19680:	cmp	r4, #9
   19684:	movt	r1, #1
   19688:	movt	r0, #1
   1968c:	moveq	r0, r1
   19690:	pop	{r4, r5, fp, pc}
   19694:	ldrb	r1, [r5]
   19698:	movw	r2, #64312	; 0xfb38
   1969c:	movw	r0, #64316	; 0xfb3c
   196a0:	movt	r2, #1
   196a4:	movt	r0, #1
   196a8:	cmp	r1, #96	; 0x60
   196ac:	moveq	r0, r2
   196b0:	pop	{r4, r5, fp, pc}
   196b4:	mov	r1, #0
   196b8:	str	r1, [r0]
   196bc:	str	r1, [r0, #4]
   196c0:	bx	lr
   196c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196c8:	add	fp, sp, #28
   196cc:	sub	sp, sp, #52	; 0x34
   196d0:	vmov.i32	q8, #0	; 0x00000000
   196d4:	add	r5, sp, #16
   196d8:	mov	sl, r0
   196dc:	mov	r8, r3
   196e0:	cmp	r2, #0
   196e4:	mov	r0, r5
   196e8:	vst1.64	{d16-d17}, [r0]!
   196ec:	vst1.64	{d16-d17}, [r0]
   196f0:	beq	19718 <__assert_fail@plt+0x7c9c>
   196f4:	mov	r0, #1
   196f8:	ldrb	r3, [r1], #1
   196fc:	subs	r2, r2, #1
   19700:	ubfx	r7, r3, #5, #3
   19704:	and	r3, r3, #31
   19708:	ldr	r6, [r5, r7, lsl #2]
   1970c:	orr	r3, r6, r0, lsl r3
   19710:	str	r3, [r5, r7, lsl #2]
   19714:	bne	196f8 <__assert_fail@plt+0x7c7c>
   19718:	mov	r0, sl
   1971c:	bl	11740 <getc_unlocked@plt>
   19720:	mov	r6, r0
   19724:	cmp	r0, #0
   19728:	bmi	19758 <__assert_fail@plt+0x7cdc>
   1972c:	mov	r4, #1
   19730:	lsr	r0, r6, #5
   19734:	and	r1, r6, #31
   19738:	ldr	r0, [r5, r0, lsl #2]
   1973c:	tst	r0, r4, lsl r1
   19740:	beq	19758 <__assert_fail@plt+0x7cdc>
   19744:	mov	r0, sl
   19748:	bl	11740 <getc_unlocked@plt>
   1974c:	mov	r6, r0
   19750:	cmn	r0, #1
   19754:	bgt	19730 <__assert_fail@plt+0x7cb4>
   19758:	ldm	r8, {r0, r7}
   1975c:	cmp	r6, #0
   19760:	str	r0, [sp, #12]
   19764:	bmi	197ec <__assert_fail@plt+0x7d70>
   19768:	str	r8, [sp, #8]
   1976c:	mov	r9, #0
   19770:	mov	r8, #1
   19774:	mov	r4, #0
   19778:	b	19798 <__assert_fail@plt+0x7d1c>
   1977c:	mov	r0, sl
   19780:	strb	r6, [r7, r4]
   19784:	bl	11740 <getc_unlocked@plt>
   19788:	mov	r6, r0
   1978c:	lsr	r9, r0, #31
   19790:	ldr	r0, [sp, #12]
   19794:	add	r4, r4, #1
   19798:	cmp	r4, r0
   1979c:	bne	197bc <__assert_fail@plt+0x7d40>
   197a0:	mov	r0, r7
   197a4:	add	r1, sp, #12
   197a8:	mov	r2, #1
   197ac:	mvn	r3, #0
   197b0:	str	r8, [sp]
   197b4:	bl	1a268 <__assert_fail@plt+0x87ec>
   197b8:	mov	r7, r0
   197bc:	tst	r9, #1
   197c0:	lsreq	r0, r6, #5
   197c4:	andeq	r1, r6, #31
   197c8:	ldreq	r0, [r5, r0, lsl #2]
   197cc:	tsteq	r0, r8, lsl r1
   197d0:	beq	1977c <__assert_fail@plt+0x7d00>
   197d4:	mov	r0, #0
   197d8:	ldr	r1, [sp, #8]
   197dc:	strb	r0, [r7, r4]
   197e0:	ldr	r0, [sp, #12]
   197e4:	stm	r1, {r0, r7}
   197e8:	b	197f0 <__assert_fail@plt+0x7d74>
   197ec:	mvn	r4, #0
   197f0:	mov	r0, r4
   197f4:	sub	sp, fp, #28
   197f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19800:	add	fp, sp, #28
   19804:	sub	sp, sp, #28
   19808:	cmp	r1, #0
   1980c:	add	r4, r1, #1
   19810:	mov	r7, r0
   19814:	mov	r1, #4
   19818:	str	r3, [sp, #12]
   1981c:	str	r2, [sp, #8]
   19820:	movweq	r4, #64	; 0x40
   19824:	mov	r0, r4
   19828:	str	r4, [sp, #16]
   1982c:	bl	1a1d8 <__assert_fail@plt+0x875c>
   19830:	mov	r6, r0
   19834:	mov	r0, r4
   19838:	mov	r1, #4
   1983c:	bl	1a1d8 <__assert_fail@plt+0x875c>
   19840:	mov	r4, #0
   19844:	mov	r5, r0
   19848:	str	r4, [sp, #24]
   1984c:	str	r4, [sp, #20]
   19850:	ldr	r1, [sp, #8]
   19854:	ldr	r2, [sp, #12]
   19858:	mov	r0, r7
   1985c:	add	r3, sp, #20
   19860:	bl	196c4 <__assert_fail@plt+0x7c48>
   19864:	mov	sl, r0
   19868:	ldr	r0, [sp, #16]
   1986c:	cmp	r4, r0
   19870:	blt	198a8 <__assert_fail@plt+0x7e2c>
   19874:	mov	r0, #4
   19878:	add	r1, sp, #16
   1987c:	mov	r2, #1
   19880:	mvn	r3, #0
   19884:	str	r0, [sp]
   19888:	mov	r0, r6
   1988c:	bl	1a268 <__assert_fail@plt+0x87ec>
   19890:	ldr	r1, [sp, #16]
   19894:	mov	r6, r0
   19898:	mov	r0, r5
   1989c:	mov	r2, #4
   198a0:	bl	1a0cc <__assert_fail@plt+0x8650>
   198a4:	mov	r5, r0
   198a8:	cmn	sl, #1
   198ac:	beq	198e0 <__assert_fail@plt+0x7e64>
   198b0:	add	r8, sl, #1
   198b4:	mov	r1, #1
   198b8:	mov	r0, r8
   198bc:	bl	1a1d8 <__assert_fail@plt+0x875c>
   198c0:	str	sl, [r5, r4, lsl #2]
   198c4:	mov	r2, r8
   198c8:	mov	r9, r0
   198cc:	ldr	r1, [sp, #24]
   198d0:	bl	1171c <memcpy@plt>
   198d4:	str	r9, [r6, r4, lsl #2]
   198d8:	add	r4, r4, #1
   198dc:	b	19850 <__assert_fail@plt+0x7dd4>
   198e0:	mov	r0, #0
   198e4:	str	r0, [r6, r4, lsl #2]
   198e8:	str	r0, [r5, r4, lsl #2]
   198ec:	ldr	r0, [sp, #24]
   198f0:	bl	174f4 <__assert_fail@plt+0x5a78>
   198f4:	ldr	r0, [fp, #8]
   198f8:	str	r6, [r0]
   198fc:	ldr	r0, [fp, #12]
   19900:	cmp	r0, #0
   19904:	beq	19910 <__assert_fail@plt+0x7e94>
   19908:	str	r5, [r0]
   1990c:	b	19918 <__assert_fail@plt+0x7e9c>
   19910:	mov	r0, r5
   19914:	bl	174f4 <__assert_fail@plt+0x5a78>
   19918:	mov	r0, r4
   1991c:	sub	sp, fp, #28
   19920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19924:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19928:	add	fp, sp, #24
   1992c:	movw	r8, #0
   19930:	mov	r6, r2
   19934:	mov	r4, r1
   19938:	mov	r5, r0
   1993c:	movt	r8, #32752	; 0x7ff0
   19940:	mov	r0, r5
   19944:	mov	r1, r4
   19948:	mov	r2, r6
   1994c:	bl	1195c <write@plt>
   19950:	mov	r7, r0
   19954:	cmn	r0, #1
   19958:	bgt	19980 <__assert_fail@plt+0x7f04>
   1995c:	bl	11908 <__errno_location@plt>
   19960:	ldr	r0, [r0]
   19964:	cmp	r0, #4
   19968:	beq	19940 <__assert_fail@plt+0x7ec4>
   1996c:	cmp	r6, r8
   19970:	bls	19980 <__assert_fail@plt+0x7f04>
   19974:	cmp	r0, #22
   19978:	mov	r6, r8
   1997c:	beq	19940 <__assert_fail@plt+0x7ec4>
   19980:	mov	r0, r7
   19984:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19988:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1998c:	add	fp, sp, #24
   19990:	sub	sp, sp, #64	; 0x40
   19994:	mov	r5, r1
   19998:	bl	11764 <strdup@plt>
   1999c:	cmp	r0, #0
   199a0:	beq	19c44 <__assert_fail@plt+0x81c8>
   199a4:	mov	r4, r0
   199a8:	bl	1180c <__ctype_get_mb_cur_max@plt>
   199ac:	cmp	r0, #2
   199b0:	bcc	19b84 <__assert_fail@plt+0x8108>
   199b4:	cmp	r5, #0
   199b8:	beq	19a5c <__assert_fail@plt+0x7fe0>
   199bc:	mov	r0, r4
   199c0:	str	r4, [sp, #24]
   199c4:	bl	118d8 <strlen@plt>
   199c8:	mov	r7, #0
   199cc:	add	r1, r4, r0
   199d0:	cmp	r0, #1
   199d4:	mov	r6, r4
   199d8:	str	r7, [sp, #16]
   199dc:	str	r7, [sp, #12]
   199e0:	strb	r7, [sp, #20]
   199e4:	strb	r7, [sp, #8]
   199e8:	str	r1, [sp, #4]
   199ec:	blt	19a3c <__assert_fail@plt+0x7fc0>
   199f0:	add	r6, sp, #4
   199f4:	mov	r0, r6
   199f8:	bl	1a9a0 <__assert_fail@plt+0x8f24>
   199fc:	ldrb	r0, [sp, #32]
   19a00:	cmp	r0, #0
   19a04:	beq	19a38 <__assert_fail@plt+0x7fbc>
   19a08:	ldr	r0, [sp, #36]	; 0x24
   19a0c:	bl	118c0 <iswspace@plt>
   19a10:	cmp	r0, #0
   19a14:	beq	19a38 <__assert_fail@plt+0x7fbc>
   19a18:	strb	r7, [sp, #20]
   19a1c:	ldr	r1, [sp, #24]
   19a20:	ldr	r2, [sp, #28]
   19a24:	ldr	r0, [sp, #4]
   19a28:	add	r1, r1, r2
   19a2c:	cmp	r1, r0
   19a30:	str	r1, [sp, #24]
   19a34:	bcc	199f4 <__assert_fail@plt+0x7f78>
   19a38:	ldr	r6, [sp, #24]
   19a3c:	mov	r0, r6
   19a40:	bl	118d8 <strlen@plt>
   19a44:	add	r2, r0, #1
   19a48:	mov	r0, r4
   19a4c:	mov	r1, r6
   19a50:	bl	116ec <memmove@plt>
   19a54:	cmp	r5, #1
   19a58:	beq	19c38 <__assert_fail@plt+0x81bc>
   19a5c:	mov	r0, r4
   19a60:	str	r4, [sp, #24]
   19a64:	bl	118d8 <strlen@plt>
   19a68:	mov	r6, #0
   19a6c:	cmp	r0, #1
   19a70:	add	r1, r4, r0
   19a74:	str	r6, [sp, #16]
   19a78:	str	r6, [sp, #12]
   19a7c:	strb	r6, [sp, #20]
   19a80:	strb	r6, [sp, #8]
   19a84:	str	r1, [sp, #4]
   19a88:	blt	19c38 <__assert_fail@plt+0x81bc>
   19a8c:	add	r5, sp, #4
   19a90:	mov	r7, #0
   19a94:	mov	r0, r5
   19a98:	bl	1a9a0 <__assert_fail@plt+0x8f24>
   19a9c:	cmp	r7, #1
   19aa0:	beq	19ad4 <__assert_fail@plt+0x8058>
   19aa4:	cmp	r7, #0
   19aa8:	bne	19b1c <__assert_fail@plt+0x80a0>
   19aac:	ldrb	r0, [sp, #32]
   19ab0:	mov	r7, #1
   19ab4:	cmp	r0, #0
   19ab8:	beq	19b40 <__assert_fail@plt+0x80c4>
   19abc:	ldr	r0, [sp, #36]	; 0x24
   19ac0:	bl	118c0 <iswspace@plt>
   19ac4:	cmp	r0, #0
   19ac8:	beq	19b64 <__assert_fail@plt+0x80e8>
   19acc:	mov	r7, #0
   19ad0:	b	19b40 <__assert_fail@plt+0x80c4>
   19ad4:	ldrb	r0, [sp, #32]
   19ad8:	mov	r7, #1
   19adc:	cmp	r0, #0
   19ae0:	beq	19b40 <__assert_fail@plt+0x80c4>
   19ae4:	ldr	r0, [sp, #36]	; 0x24
   19ae8:	bl	118c0 <iswspace@plt>
   19aec:	cmp	r0, #0
   19af0:	beq	19b40 <__assert_fail@plt+0x80c4>
   19af4:	ldrb	r0, [sp, #32]
   19af8:	cmp	r0, #0
   19afc:	beq	19b3c <__assert_fail@plt+0x80c0>
   19b00:	ldr	r0, [sp, #36]	; 0x24
   19b04:	bl	118c0 <iswspace@plt>
   19b08:	cmp	r0, #0
   19b0c:	beq	19b3c <__assert_fail@plt+0x80c0>
   19b10:	ldr	r8, [sp, #24]
   19b14:	mov	r7, #2
   19b18:	b	19b40 <__assert_fail@plt+0x80c4>
   19b1c:	ldrb	r0, [sp, #32]
   19b20:	cmp	r0, #0
   19b24:	beq	19b3c <__assert_fail@plt+0x80c0>
   19b28:	ldr	r0, [sp, #36]	; 0x24
   19b2c:	bl	118c0 <iswspace@plt>
   19b30:	mov	r7, #2
   19b34:	cmp	r0, #0
   19b38:	bne	19b40 <__assert_fail@plt+0x80c4>
   19b3c:	mov	r7, #1
   19b40:	strb	r6, [sp, #20]
   19b44:	ldr	r1, [sp, #24]
   19b48:	ldr	r2, [sp, #28]
   19b4c:	ldr	r0, [sp, #4]
   19b50:	add	r1, r1, r2
   19b54:	cmp	r1, r0
   19b58:	str	r1, [sp, #24]
   19b5c:	bcc	19a94 <__assert_fail@plt+0x8018>
   19b60:	b	19c2c <__assert_fail@plt+0x81b0>
   19b64:	ldrb	r0, [sp, #32]
   19b68:	cmp	r0, #0
   19b6c:	beq	19b40 <__assert_fail@plt+0x80c4>
   19b70:	ldr	r0, [sp, #36]	; 0x24
   19b74:	bl	118c0 <iswspace@plt>
   19b78:	cmp	r0, #0
   19b7c:	movne	r7, #1
   19b80:	b	19b40 <__assert_fail@plt+0x80c4>
   19b84:	cmp	r5, #0
   19b88:	beq	19be4 <__assert_fail@plt+0x8168>
   19b8c:	ldrb	r7, [r4]
   19b90:	mov	r6, r4
   19b94:	cmp	r7, #0
   19b98:	beq	19bc4 <__assert_fail@plt+0x8148>
   19b9c:	bl	118a8 <__ctype_b_loc@plt>
   19ba0:	ldr	r0, [r0]
   19ba4:	mov	r6, r4
   19ba8:	uxtb	r1, r7
   19bac:	add	r1, r0, r1, lsl #1
   19bb0:	ldrb	r1, [r1, #1]
   19bb4:	tst	r1, #32
   19bb8:	ldrbne	r7, [r6, #1]!
   19bbc:	cmpne	r7, #0
   19bc0:	bne	19ba8 <__assert_fail@plt+0x812c>
   19bc4:	mov	r0, r6
   19bc8:	bl	118d8 <strlen@plt>
   19bcc:	add	r2, r0, #1
   19bd0:	mov	r0, r4
   19bd4:	mov	r1, r6
   19bd8:	bl	116ec <memmove@plt>
   19bdc:	cmp	r5, #1
   19be0:	beq	19c38 <__assert_fail@plt+0x81bc>
   19be4:	mov	r0, r4
   19be8:	bl	118d8 <strlen@plt>
   19bec:	add	r0, r4, r0
   19bf0:	sub	r5, r0, #1
   19bf4:	cmp	r5, r4
   19bf8:	bcc	19c38 <__assert_fail@plt+0x81bc>
   19bfc:	bl	118a8 <__ctype_b_loc@plt>
   19c00:	mov	r1, #0
   19c04:	ldrb	r2, [r5]
   19c08:	ldr	r3, [r0]
   19c0c:	add	r2, r3, r2, lsl #1
   19c10:	ldrb	r2, [r2, #1]
   19c14:	tst	r2, #32
   19c18:	beq	19c38 <__assert_fail@plt+0x81bc>
   19c1c:	strb	r1, [r5], #-1
   19c20:	cmp	r5, r4
   19c24:	bcs	19c04 <__assert_fail@plt+0x8188>
   19c28:	b	19c38 <__assert_fail@plt+0x81bc>
   19c2c:	cmp	r7, #2
   19c30:	moveq	r0, #0
   19c34:	strbeq	r0, [r8]
   19c38:	mov	r0, r4
   19c3c:	sub	sp, fp, #24
   19c40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c44:	bl	1a534 <__assert_fail@plt+0x8ab8>
   19c48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19c4c:	add	fp, sp, #24
   19c50:	sub	sp, sp, #32
   19c54:	ldr	r6, [fp, #12]
   19c58:	ldr	r7, [fp, #8]
   19c5c:	mov	r4, r2
   19c60:	mov	r8, r0
   19c64:	cmp	r1, #0
   19c68:	beq	19c90 <__assert_fail@plt+0x8214>
   19c6c:	movw	r2, #64404	; 0xfb94
   19c70:	mov	r5, r1
   19c74:	str	r3, [sp, #4]
   19c78:	str	r4, [sp]
   19c7c:	mov	r0, r8
   19c80:	mov	r1, #1
   19c84:	movt	r2, #1
   19c88:	mov	r3, r5
   19c8c:	b	19ca8 <__assert_fail@plt+0x822c>
   19c90:	movw	r2, #64416	; 0xfba0
   19c94:	str	r3, [sp]
   19c98:	mov	r0, r8
   19c9c:	mov	r1, #1
   19ca0:	mov	r3, r4
   19ca4:	movt	r2, #1
   19ca8:	bl	11974 <__fprintf_chk@plt>
   19cac:	movw	r1, #64423	; 0xfba7
   19cb0:	mov	r0, #0
   19cb4:	mov	r2, #5
   19cb8:	movt	r1, #1
   19cbc:	bl	1174c <dcgettext@plt>
   19cc0:	movw	r2, #65141	; 0xfe75
   19cc4:	mov	r3, r0
   19cc8:	movw	r0, #2022	; 0x7e6
   19ccc:	mov	r1, #1
   19cd0:	movt	r2, #1
   19cd4:	str	r0, [sp]
   19cd8:	mov	r0, r8
   19cdc:	bl	11974 <__fprintf_chk@plt>
   19ce0:	movw	r4, #50272	; 0xc460
   19ce4:	mov	r1, r8
   19ce8:	movt	r4, #1
   19cec:	mov	r0, r4
   19cf0:	bl	11674 <fputs_unlocked@plt>
   19cf4:	movw	r1, #64427	; 0xfbab
   19cf8:	mov	r0, #0
   19cfc:	mov	r2, #5
   19d00:	movt	r1, #1
   19d04:	bl	1174c <dcgettext@plt>
   19d08:	movw	r3, #64598	; 0xfc56
   19d0c:	mov	r2, r0
   19d10:	mov	r0, r8
   19d14:	mov	r1, #1
   19d18:	movt	r3, #1
   19d1c:	bl	11974 <__fprintf_chk@plt>
   19d20:	mov	r0, r4
   19d24:	mov	r1, r8
   19d28:	bl	11674 <fputs_unlocked@plt>
   19d2c:	cmp	r6, #9
   19d30:	bhi	19d94 <__assert_fail@plt+0x8318>
   19d34:	add	r0, pc, #0
   19d38:	ldr	pc, [r0, r6, lsl #2]
   19d3c:	andeq	r9, r1, ip, ror #30
   19d40:	andeq	r9, r1, r4, ror #26
   19d44:	andeq	r9, r1, r0, lsr #27
   19d48:	andeq	r9, r1, r8, asr #27
   19d4c:	strdeq	r9, [r1], -r0
   19d50:	andeq	r9, r1, r8, lsl lr
   19d54:	andeq	r9, r1, r0, asr #28
   19d58:	andeq	r9, r1, r8, ror lr
   19d5c:	andeq	r9, r1, r8, lsl pc
   19d60:	andeq	r9, r1, r0, asr #29
   19d64:	movw	r1, #64632	; 0xfc78
   19d68:	mov	r0, #0
   19d6c:	mov	r2, #5
   19d70:	movt	r1, #1
   19d74:	bl	1174c <dcgettext@plt>
   19d78:	ldr	r3, [r7]
   19d7c:	mov	r2, r0
   19d80:	mov	r0, r8
   19d84:	mov	r1, #1
   19d88:	sub	sp, fp, #24
   19d8c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19d90:	b	11974 <__fprintf_chk@plt>
   19d94:	movw	r1, #64951	; 0xfdb7
   19d98:	movt	r1, #1
   19d9c:	b	19ec8 <__assert_fail@plt+0x844c>
   19da0:	movw	r1, #64648	; 0xfc88
   19da4:	mov	r0, #0
   19da8:	mov	r2, #5
   19dac:	movt	r1, #1
   19db0:	bl	1174c <dcgettext@plt>
   19db4:	mov	r2, r0
   19db8:	ldr	r3, [r7]
   19dbc:	ldr	r0, [r7, #4]
   19dc0:	str	r0, [sp]
   19dc4:	b	19eb4 <__assert_fail@plt+0x8438>
   19dc8:	movw	r1, #64671	; 0xfc9f
   19dcc:	mov	r0, #0
   19dd0:	mov	r2, #5
   19dd4:	movt	r1, #1
   19dd8:	bl	1174c <dcgettext@plt>
   19ddc:	mov	r2, r0
   19de0:	ldr	r3, [r7]
   19de4:	ldmib	r7, {r0, r1}
   19de8:	stm	sp, {r0, r1}
   19dec:	b	19eb4 <__assert_fail@plt+0x8438>
   19df0:	movw	r1, #64699	; 0xfcbb
   19df4:	mov	r0, #0
   19df8:	mov	r2, #5
   19dfc:	movt	r1, #1
   19e00:	bl	1174c <dcgettext@plt>
   19e04:	ldr	r3, [r7]
   19e08:	mov	r2, r0
   19e0c:	ldmib	r7, {r0, r1, r7}
   19e10:	stm	sp, {r0, r1, r7}
   19e14:	b	19eb4 <__assert_fail@plt+0x8438>
   19e18:	movw	r1, #64731	; 0xfcdb
   19e1c:	mov	r0, #0
   19e20:	mov	r2, #5
   19e24:	movt	r1, #1
   19e28:	bl	1174c <dcgettext@plt>
   19e2c:	ldr	r3, [r7]
   19e30:	mov	r2, r0
   19e34:	ldmib	r7, {r0, r1, r6, r7}
   19e38:	stm	sp, {r0, r1, r6, r7}
   19e3c:	b	19eb4 <__assert_fail@plt+0x8438>
   19e40:	movw	r1, #64767	; 0xfcff
   19e44:	mov	r0, #0
   19e48:	mov	r2, #5
   19e4c:	movt	r1, #1
   19e50:	bl	1174c <dcgettext@plt>
   19e54:	mov	r2, r0
   19e58:	ldr	r3, [r7]
   19e5c:	ldmib	r7, {r0, r1, r6}
   19e60:	ldr	r5, [r7, #16]
   19e64:	ldr	r7, [r7, #20]
   19e68:	stm	sp, {r0, r1, r6}
   19e6c:	str	r5, [sp, #12]
   19e70:	str	r7, [sp, #16]
   19e74:	b	19eb4 <__assert_fail@plt+0x8438>
   19e78:	movw	r1, #64807	; 0xfd27
   19e7c:	mov	r0, #0
   19e80:	mov	r2, #5
   19e84:	movt	r1, #1
   19e88:	bl	1174c <dcgettext@plt>
   19e8c:	mov	r2, r0
   19e90:	ldr	r3, [r7]
   19e94:	ldmib	r7, {r0, r1, r6}
   19e98:	ldr	r5, [r7, #16]
   19e9c:	ldr	r4, [r7, #20]
   19ea0:	ldr	r7, [r7, #24]
   19ea4:	stm	sp, {r0, r1, r6}
   19ea8:	str	r5, [sp, #12]
   19eac:	str	r4, [sp, #16]
   19eb0:	str	r7, [sp, #20]
   19eb4:	mov	r0, r8
   19eb8:	mov	r1, #1
   19ebc:	b	19f68 <__assert_fail@plt+0x84ec>
   19ec0:	movw	r1, #64899	; 0xfd83
   19ec4:	movt	r1, #1
   19ec8:	mov	r0, #0
   19ecc:	mov	r2, #5
   19ed0:	bl	1174c <dcgettext@plt>
   19ed4:	mov	ip, r0
   19ed8:	ldr	r3, [r7]
   19edc:	ldr	r0, [r7, #4]
   19ee0:	ldr	r1, [r7, #8]
   19ee4:	ldr	r6, [r7, #12]
   19ee8:	ldr	r5, [r7, #16]
   19eec:	ldr	r4, [r7, #20]
   19ef0:	ldr	r2, [r7, #24]
   19ef4:	ldr	lr, [r7, #28]
   19ef8:	ldr	r7, [r7, #32]
   19efc:	stm	sp, {r0, r1, r6}
   19f00:	str	r5, [sp, #12]
   19f04:	str	r4, [sp, #16]
   19f08:	str	r2, [sp, #20]
   19f0c:	str	lr, [sp, #24]
   19f10:	str	r7, [sp, #28]
   19f14:	b	19f5c <__assert_fail@plt+0x84e0>
   19f18:	movw	r1, #64851	; 0xfd53
   19f1c:	mov	r0, #0
   19f20:	mov	r2, #5
   19f24:	movt	r1, #1
   19f28:	bl	1174c <dcgettext@plt>
   19f2c:	mov	ip, r0
   19f30:	ldr	r3, [r7]
   19f34:	ldmib	r7, {r0, r1, r6}
   19f38:	ldr	r5, [r7, #16]
   19f3c:	ldr	r4, [r7, #20]
   19f40:	ldr	r2, [r7, #24]
   19f44:	ldr	r7, [r7, #28]
   19f48:	stm	sp, {r0, r1, r6}
   19f4c:	str	r5, [sp, #12]
   19f50:	str	r4, [sp, #16]
   19f54:	str	r2, [sp, #20]
   19f58:	str	r7, [sp, #24]
   19f5c:	mov	r0, r8
   19f60:	mov	r1, #1
   19f64:	mov	r2, ip
   19f68:	bl	11974 <__fprintf_chk@plt>
   19f6c:	sub	sp, fp, #24
   19f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19f74:	push	{r4, sl, fp, lr}
   19f78:	add	fp, sp, #8
   19f7c:	sub	sp, sp, #8
   19f80:	ldr	ip, [fp, #8]
   19f84:	mov	lr, #0
   19f88:	ldr	r4, [ip, lr, lsl #2]
   19f8c:	add	lr, lr, #1
   19f90:	cmp	r4, #0
   19f94:	bne	19f88 <__assert_fail@plt+0x850c>
   19f98:	sub	r4, lr, #1
   19f9c:	str	ip, [sp]
   19fa0:	str	r4, [sp, #4]
   19fa4:	bl	19c48 <__assert_fail@plt+0x81cc>
   19fa8:	sub	sp, fp, #8
   19fac:	pop	{r4, sl, fp, pc}
   19fb0:	push	{r4, r5, fp, lr}
   19fb4:	add	fp, sp, #8
   19fb8:	sub	sp, sp, #48	; 0x30
   19fbc:	ldr	r4, [fp, #8]
   19fc0:	mov	ip, #0
   19fc4:	add	lr, sp, #8
   19fc8:	ldr	r5, [r4]
   19fcc:	cmp	r5, #0
   19fd0:	str	r5, [lr, ip, lsl #2]
   19fd4:	beq	19fec <__assert_fail@plt+0x8570>
   19fd8:	add	ip, ip, #1
   19fdc:	add	r4, r4, #4
   19fe0:	cmp	ip, #10
   19fe4:	bne	19fc8 <__assert_fail@plt+0x854c>
   19fe8:	mov	ip, #10
   19fec:	str	lr, [sp]
   19ff0:	str	ip, [sp, #4]
   19ff4:	bl	19c48 <__assert_fail@plt+0x81cc>
   19ff8:	sub	sp, fp, #8
   19ffc:	pop	{r4, r5, fp, pc}
   1a000:	push	{fp, lr}
   1a004:	mov	fp, sp
   1a008:	sub	sp, sp, #8
   1a00c:	add	ip, fp, #8
   1a010:	str	ip, [sp, #4]
   1a014:	str	ip, [sp]
   1a018:	bl	19fb0 <__assert_fail@plt+0x8534>
   1a01c:	mov	sp, fp
   1a020:	pop	{fp, pc}
   1a024:	push	{fp, lr}
   1a028:	mov	fp, sp
   1a02c:	movw	r0, #4580	; 0x11e4
   1a030:	movt	r0, #3
   1a034:	ldr	r1, [r0]
   1a038:	movw	r0, #50272	; 0xc460
   1a03c:	movt	r0, #1
   1a040:	bl	11674 <fputs_unlocked@plt>
   1a044:	movw	r1, #65011	; 0xfdf3
   1a048:	mov	r0, #0
   1a04c:	mov	r2, #5
   1a050:	movt	r1, #1
   1a054:	bl	1174c <dcgettext@plt>
   1a058:	movw	r2, #65031	; 0xfe07
   1a05c:	mov	r1, r0
   1a060:	mov	r0, #1
   1a064:	movt	r2, #1
   1a068:	bl	11950 <__printf_chk@plt>
   1a06c:	movw	r1, #65053	; 0xfe1d
   1a070:	mov	r0, #0
   1a074:	mov	r2, #5
   1a078:	movt	r1, #1
   1a07c:	bl	1174c <dcgettext@plt>
   1a080:	movw	r2, #50404	; 0xc4e4
   1a084:	movw	r3, #50611	; 0xc5b3
   1a088:	mov	r1, r0
   1a08c:	mov	r0, #1
   1a090:	movt	r2, #1
   1a094:	movt	r3, #1
   1a098:	bl	11950 <__printf_chk@plt>
   1a09c:	movw	r1, #65073	; 0xfe31
   1a0a0:	mov	r0, #0
   1a0a4:	mov	r2, #5
   1a0a8:	movt	r1, #1
   1a0ac:	bl	1174c <dcgettext@plt>
   1a0b0:	movw	r2, #65112	; 0xfe58
   1a0b4:	mov	r1, r0
   1a0b8:	mov	r0, #1
   1a0bc:	movt	r2, #1
   1a0c0:	pop	{fp, lr}
   1a0c4:	b	11950 <__printf_chk@plt>
   1a0c8:	b	1a0cc <__assert_fail@plt+0x8650>
   1a0cc:	push	{r4, r5, r6, sl, fp, lr}
   1a0d0:	add	fp, sp, #16
   1a0d4:	mov	r4, r2
   1a0d8:	mov	r5, r1
   1a0dc:	mov	r6, r0
   1a0e0:	bl	1b898 <__assert_fail@plt+0x9e1c>
   1a0e4:	cmp	r0, #0
   1a0e8:	popne	{r4, r5, r6, sl, fp, pc}
   1a0ec:	cmp	r6, #0
   1a0f0:	beq	1a104 <__assert_fail@plt+0x8688>
   1a0f4:	cmp	r5, #0
   1a0f8:	cmpne	r4, #0
   1a0fc:	bne	1a104 <__assert_fail@plt+0x8688>
   1a100:	pop	{r4, r5, r6, sl, fp, pc}
   1a104:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a108:	push	{fp, lr}
   1a10c:	mov	fp, sp
   1a110:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a114:	cmp	r0, #0
   1a118:	popne	{fp, pc}
   1a11c:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a120:	push	{fp, lr}
   1a124:	mov	fp, sp
   1a128:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a12c:	cmp	r0, #0
   1a130:	popne	{fp, pc}
   1a134:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a138:	push	{fp, lr}
   1a13c:	mov	fp, sp
   1a140:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a144:	cmp	r0, #0
   1a148:	popne	{fp, pc}
   1a14c:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a150:	push	{r4, r5, fp, lr}
   1a154:	add	fp, sp, #8
   1a158:	mov	r4, r1
   1a15c:	mov	r5, r0
   1a160:	bl	1a6a8 <__assert_fail@plt+0x8c2c>
   1a164:	cmp	r0, #0
   1a168:	popne	{r4, r5, fp, pc}
   1a16c:	cmp	r5, #0
   1a170:	beq	1a180 <__assert_fail@plt+0x8704>
   1a174:	cmp	r4, #0
   1a178:	bne	1a180 <__assert_fail@plt+0x8704>
   1a17c:	pop	{r4, r5, fp, pc}
   1a180:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a184:	push	{fp, lr}
   1a188:	mov	fp, sp
   1a18c:	cmp	r1, #0
   1a190:	orreq	r1, r1, #1
   1a194:	bl	1a6a8 <__assert_fail@plt+0x8c2c>
   1a198:	cmp	r0, #0
   1a19c:	popne	{fp, pc}
   1a1a0:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a1a4:	push	{fp, lr}
   1a1a8:	mov	fp, sp
   1a1ac:	clz	r3, r2
   1a1b0:	lsr	ip, r3, #5
   1a1b4:	clz	r3, r1
   1a1b8:	lsr	r3, r3, #5
   1a1bc:	orrs	r3, r3, ip
   1a1c0:	movwne	r1, #1
   1a1c4:	movwne	r2, #1
   1a1c8:	bl	1b898 <__assert_fail@plt+0x9e1c>
   1a1cc:	cmp	r0, #0
   1a1d0:	popne	{fp, pc}
   1a1d4:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a1d8:	push	{fp, lr}
   1a1dc:	mov	fp, sp
   1a1e0:	mov	r2, r1
   1a1e4:	mov	r1, r0
   1a1e8:	mov	r0, #0
   1a1ec:	bl	1b898 <__assert_fail@plt+0x9e1c>
   1a1f0:	cmp	r0, #0
   1a1f4:	popne	{fp, pc}
   1a1f8:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a1fc:	mov	r2, r1
   1a200:	mov	r1, r0
   1a204:	mov	r0, #0
   1a208:	b	1a1a4 <__assert_fail@plt+0x8728>
   1a20c:	mov	r2, #1
   1a210:	b	1a214 <__assert_fail@plt+0x8798>
   1a214:	push	{r4, r5, fp, lr}
   1a218:	add	fp, sp, #8
   1a21c:	ldr	r5, [r1]
   1a220:	mov	r4, r1
   1a224:	cmp	r0, #0
   1a228:	beq	1a240 <__assert_fail@plt+0x87c4>
   1a22c:	mov	r1, #1
   1a230:	add	r1, r1, r5, lsr #1
   1a234:	adds	r5, r5, r1
   1a238:	bcc	1a258 <__assert_fail@plt+0x87dc>
   1a23c:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a240:	cmp	r5, #0
   1a244:	bne	1a258 <__assert_fail@plt+0x87dc>
   1a248:	mov	r1, #64	; 0x40
   1a24c:	cmp	r2, #64	; 0x40
   1a250:	udiv	r5, r1, r2
   1a254:	addhi	r5, r5, #1
   1a258:	mov	r1, r5
   1a25c:	bl	1a0cc <__assert_fail@plt+0x8650>
   1a260:	str	r5, [r4]
   1a264:	pop	{r4, r5, fp, pc}
   1a268:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a26c:	add	fp, sp, #24
   1a270:	ldr	r6, [r1]
   1a274:	mov	r8, r1
   1a278:	ldr	r4, [fp, #8]
   1a27c:	add	r1, r6, r6, asr #1
   1a280:	cmp	r1, r6
   1a284:	mvnvs	r1, #-2147483648	; 0x80000000
   1a288:	cmp	r1, r3
   1a28c:	mov	r5, r1
   1a290:	movgt	r5, r3
   1a294:	cmn	r3, #1
   1a298:	movle	r5, r1
   1a29c:	cmn	r4, #1
   1a2a0:	ble	1a2c0 <__assert_fail@plt+0x8844>
   1a2a4:	cmp	r4, #0
   1a2a8:	beq	1a314 <__assert_fail@plt+0x8898>
   1a2ac:	cmn	r5, #1
   1a2b0:	ble	1a2e8 <__assert_fail@plt+0x886c>
   1a2b4:	mvn	r7, #-2147483648	; 0x80000000
   1a2b8:	udiv	r1, r7, r4
   1a2bc:	b	1a2dc <__assert_fail@plt+0x8860>
   1a2c0:	cmn	r5, #1
   1a2c4:	ble	1a304 <__assert_fail@plt+0x8888>
   1a2c8:	cmn	r4, #1
   1a2cc:	beq	1a314 <__assert_fail@plt+0x8898>
   1a2d0:	mov	r1, #-2147483648	; 0x80000000
   1a2d4:	mvn	r7, #-2147483648	; 0x80000000
   1a2d8:	sdiv	r1, r1, r4
   1a2dc:	cmp	r1, r5
   1a2e0:	bge	1a314 <__assert_fail@plt+0x8898>
   1a2e4:	b	1a324 <__assert_fail@plt+0x88a8>
   1a2e8:	beq	1a314 <__assert_fail@plt+0x8898>
   1a2ec:	mov	r1, #-2147483648	; 0x80000000
   1a2f0:	mvn	r7, #-2147483648	; 0x80000000
   1a2f4:	sdiv	r1, r1, r5
   1a2f8:	cmp	r1, r4
   1a2fc:	bge	1a314 <__assert_fail@plt+0x8898>
   1a300:	b	1a324 <__assert_fail@plt+0x88a8>
   1a304:	mvn	r7, #-2147483648	; 0x80000000
   1a308:	sdiv	r1, r7, r4
   1a30c:	cmp	r5, r1
   1a310:	blt	1a324 <__assert_fail@plt+0x88a8>
   1a314:	mul	r1, r5, r4
   1a318:	mov	r7, #64	; 0x40
   1a31c:	cmp	r1, #63	; 0x3f
   1a320:	bgt	1a32c <__assert_fail@plt+0x88b0>
   1a324:	sdiv	r5, r7, r4
   1a328:	mul	r1, r5, r4
   1a32c:	cmp	r0, #0
   1a330:	moveq	r7, #0
   1a334:	streq	r7, [r8]
   1a338:	sub	r7, r5, r6
   1a33c:	cmp	r7, r2
   1a340:	bge	1a3e4 <__assert_fail@plt+0x8968>
   1a344:	add	r5, r6, r2
   1a348:	mov	r2, #0
   1a34c:	mov	r1, #0
   1a350:	cmp	r5, r3
   1a354:	movwgt	r2, #1
   1a358:	cmn	r3, #1
   1a35c:	movwgt	r1, #1
   1a360:	cmp	r5, r6
   1a364:	bvs	1a3cc <__assert_fail@plt+0x8950>
   1a368:	ands	r1, r1, r2
   1a36c:	bne	1a3cc <__assert_fail@plt+0x8950>
   1a370:	cmn	r4, #1
   1a374:	ble	1a394 <__assert_fail@plt+0x8918>
   1a378:	cmp	r4, #0
   1a37c:	beq	1a3e0 <__assert_fail@plt+0x8964>
   1a380:	cmn	r5, #1
   1a384:	ble	1a3b8 <__assert_fail@plt+0x893c>
   1a388:	mvn	r1, #-2147483648	; 0x80000000
   1a38c:	udiv	r1, r1, r4
   1a390:	b	1a3ac <__assert_fail@plt+0x8930>
   1a394:	cmn	r5, #1
   1a398:	ble	1a3d0 <__assert_fail@plt+0x8954>
   1a39c:	cmn	r4, #1
   1a3a0:	beq	1a3e0 <__assert_fail@plt+0x8964>
   1a3a4:	mov	r1, #-2147483648	; 0x80000000
   1a3a8:	sdiv	r1, r1, r4
   1a3ac:	cmp	r1, r5
   1a3b0:	bge	1a3e0 <__assert_fail@plt+0x8964>
   1a3b4:	b	1a3cc <__assert_fail@plt+0x8950>
   1a3b8:	beq	1a3e0 <__assert_fail@plt+0x8964>
   1a3bc:	mov	r1, #-2147483648	; 0x80000000
   1a3c0:	sdiv	r1, r1, r5
   1a3c4:	cmp	r1, r4
   1a3c8:	bge	1a3e0 <__assert_fail@plt+0x8964>
   1a3cc:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a3d0:	mvn	r1, #-2147483648	; 0x80000000
   1a3d4:	sdiv	r1, r1, r4
   1a3d8:	cmp	r5, r1
   1a3dc:	blt	1a3cc <__assert_fail@plt+0x8950>
   1a3e0:	mul	r1, r5, r4
   1a3e4:	bl	1a150 <__assert_fail@plt+0x86d4>
   1a3e8:	str	r5, [r8]
   1a3ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a3f0:	push	{fp, lr}
   1a3f4:	mov	fp, sp
   1a3f8:	mov	r1, #1
   1a3fc:	bl	1a624 <__assert_fail@plt+0x8ba8>
   1a400:	cmp	r0, #0
   1a404:	popne	{fp, pc}
   1a408:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a40c:	push	{fp, lr}
   1a410:	mov	fp, sp
   1a414:	bl	1a624 <__assert_fail@plt+0x8ba8>
   1a418:	cmp	r0, #0
   1a41c:	popne	{fp, pc}
   1a420:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a424:	push	{fp, lr}
   1a428:	mov	fp, sp
   1a42c:	mov	r1, #1
   1a430:	bl	1a624 <__assert_fail@plt+0x8ba8>
   1a434:	cmp	r0, #0
   1a438:	popne	{fp, pc}
   1a43c:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a440:	push	{fp, lr}
   1a444:	mov	fp, sp
   1a448:	bl	1a624 <__assert_fail@plt+0x8ba8>
   1a44c:	cmp	r0, #0
   1a450:	popne	{fp, pc}
   1a454:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a458:	push	{r4, r5, fp, lr}
   1a45c:	add	fp, sp, #8
   1a460:	mov	r5, r0
   1a464:	mov	r0, r1
   1a468:	mov	r4, r1
   1a46c:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a470:	cmp	r0, #0
   1a474:	beq	1a488 <__assert_fail@plt+0x8a0c>
   1a478:	mov	r1, r5
   1a47c:	mov	r2, r4
   1a480:	pop	{r4, r5, fp, lr}
   1a484:	b	1171c <memcpy@plt>
   1a488:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a48c:	push	{r4, r5, fp, lr}
   1a490:	add	fp, sp, #8
   1a494:	mov	r5, r0
   1a498:	mov	r0, r1
   1a49c:	mov	r4, r1
   1a4a0:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a4a4:	cmp	r0, #0
   1a4a8:	beq	1a4bc <__assert_fail@plt+0x8a40>
   1a4ac:	mov	r1, r5
   1a4b0:	mov	r2, r4
   1a4b4:	pop	{r4, r5, fp, lr}
   1a4b8:	b	1171c <memcpy@plt>
   1a4bc:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a4c0:	push	{r4, r5, fp, lr}
   1a4c4:	add	fp, sp, #8
   1a4c8:	mov	r5, r0
   1a4cc:	add	r0, r1, #1
   1a4d0:	mov	r4, r1
   1a4d4:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a4d8:	cmp	r0, #0
   1a4dc:	beq	1a4f8 <__assert_fail@plt+0x8a7c>
   1a4e0:	mov	r1, #0
   1a4e4:	mov	r2, r4
   1a4e8:	strb	r1, [r0, r4]
   1a4ec:	mov	r1, r5
   1a4f0:	pop	{r4, r5, fp, lr}
   1a4f4:	b	1171c <memcpy@plt>
   1a4f8:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a4fc:	push	{r4, r5, fp, lr}
   1a500:	add	fp, sp, #8
   1a504:	mov	r4, r0
   1a508:	bl	118d8 <strlen@plt>
   1a50c:	add	r5, r0, #1
   1a510:	mov	r0, r5
   1a514:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1a518:	cmp	r0, #0
   1a51c:	beq	1a530 <__assert_fail@plt+0x8ab4>
   1a520:	mov	r1, r4
   1a524:	mov	r2, r5
   1a528:	pop	{r4, r5, fp, lr}
   1a52c:	b	1171c <memcpy@plt>
   1a530:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a534:	push	{fp, lr}
   1a538:	mov	fp, sp
   1a53c:	movw	r0, #4480	; 0x1180
   1a540:	movw	r1, #65188	; 0xfea4
   1a544:	mov	r2, #5
   1a548:	movt	r0, #3
   1a54c:	movt	r1, #1
   1a550:	ldr	r4, [r0]
   1a554:	mov	r0, #0
   1a558:	bl	1174c <dcgettext@plt>
   1a55c:	movw	r2, #64121	; 0xfa79
   1a560:	mov	r3, r0
   1a564:	mov	r0, r4
   1a568:	mov	r1, #0
   1a56c:	movt	r2, #1
   1a570:	bl	1183c <error@plt>
   1a574:	bl	11a64 <abort@plt>
   1a578:	push	{r4, sl, fp, lr}
   1a57c:	add	fp, sp, #8
   1a580:	sub	sp, sp, #8
   1a584:	ldr	r4, [fp, #8]
   1a588:	str	r4, [sp]
   1a58c:	bl	1b8d4 <__assert_fail@plt+0x9e58>
   1a590:	mov	r4, r0
   1a594:	cmn	r0, #1
   1a598:	bgt	1a5ac <__assert_fail@plt+0x8b30>
   1a59c:	bl	11908 <__errno_location@plt>
   1a5a0:	ldr	r0, [r0]
   1a5a4:	cmp	r0, #12
   1a5a8:	beq	1a5b8 <__assert_fail@plt+0x8b3c>
   1a5ac:	mov	r0, r4
   1a5b0:	sub	sp, fp, #8
   1a5b4:	pop	{r4, sl, fp, pc}
   1a5b8:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a5bc:	push	{r4, sl, fp, lr}
   1a5c0:	add	fp, sp, #8
   1a5c4:	bl	1bb58 <__assert_fail@plt+0xa0dc>
   1a5c8:	mov	r4, r0
   1a5cc:	cmp	r0, #0
   1a5d0:	bne	1a5e4 <__assert_fail@plt+0x8b68>
   1a5d4:	bl	11908 <__errno_location@plt>
   1a5d8:	ldr	r0, [r0]
   1a5dc:	cmp	r0, #12
   1a5e0:	beq	1a5ec <__assert_fail@plt+0x8b70>
   1a5e4:	mov	r0, r4
   1a5e8:	pop	{r4, sl, fp, pc}
   1a5ec:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a5f0:	push	{r4, sl, fp, lr}
   1a5f4:	add	fp, sp, #8
   1a5f8:	bl	1bd90 <__assert_fail@plt+0xa314>
   1a5fc:	mov	r4, r0
   1a600:	cmp	r0, #0
   1a604:	bne	1a618 <__assert_fail@plt+0x8b9c>
   1a608:	bl	11908 <__errno_location@plt>
   1a60c:	ldr	r0, [r0]
   1a610:	cmp	r0, #12
   1a614:	beq	1a620 <__assert_fail@plt+0x8ba4>
   1a618:	mov	r0, r4
   1a61c:	pop	{r4, sl, fp, pc}
   1a620:	bl	1a534 <__assert_fail@plt+0x8ab8>
   1a624:	clz	r2, r1
   1a628:	clz	r3, r0
   1a62c:	lsr	r2, r2, #5
   1a630:	lsr	r3, r3, #5
   1a634:	orrs	r2, r3, r2
   1a638:	movwne	r1, #1
   1a63c:	movwne	r0, #1
   1a640:	cmp	r1, #0
   1a644:	beq	1a674 <__assert_fail@plt+0x8bf8>
   1a648:	mvn	r2, #-2147483648	; 0x80000000
   1a64c:	udiv	r2, r2, r1
   1a650:	cmp	r2, r0
   1a654:	bcs	1a674 <__assert_fail@plt+0x8bf8>
   1a658:	push	{fp, lr}
   1a65c:	mov	fp, sp
   1a660:	bl	11908 <__errno_location@plt>
   1a664:	mov	r1, #12
   1a668:	str	r1, [r0]
   1a66c:	mov	r0, #0
   1a670:	pop	{fp, pc}
   1a674:	b	11668 <calloc@plt>
   1a678:	cmp	r0, #0
   1a67c:	movweq	r0, #1
   1a680:	cmn	r0, #1
   1a684:	ble	1a68c <__assert_fail@plt+0x8c10>
   1a688:	b	11848 <malloc@plt>
   1a68c:	push	{fp, lr}
   1a690:	mov	fp, sp
   1a694:	bl	11908 <__errno_location@plt>
   1a698:	mov	r1, #12
   1a69c:	str	r1, [r0]
   1a6a0:	mov	r0, #0
   1a6a4:	pop	{fp, pc}
   1a6a8:	push	{fp, lr}
   1a6ac:	mov	fp, sp
   1a6b0:	cmp	r0, #0
   1a6b4:	beq	1a6d0 <__assert_fail@plt+0x8c54>
   1a6b8:	cmp	r1, #0
   1a6bc:	beq	1a6dc <__assert_fail@plt+0x8c60>
   1a6c0:	cmn	r1, #1
   1a6c4:	ble	1a6e4 <__assert_fail@plt+0x8c68>
   1a6c8:	pop	{fp, lr}
   1a6cc:	b	11794 <realloc@plt>
   1a6d0:	mov	r0, r1
   1a6d4:	pop	{fp, lr}
   1a6d8:	b	1a678 <__assert_fail@plt+0x8bfc>
   1a6dc:	bl	174f4 <__assert_fail@plt+0x5a78>
   1a6e0:	b	1a6f0 <__assert_fail@plt+0x8c74>
   1a6e4:	bl	11908 <__errno_location@plt>
   1a6e8:	mov	r1, #12
   1a6ec:	str	r1, [r0]
   1a6f0:	mov	r0, #0
   1a6f4:	pop	{fp, pc}
   1a6f8:	cmp	r0, r1
   1a6fc:	moveq	r0, #0
   1a700:	bxeq	lr
   1a704:	ldrb	r3, [r1]
   1a708:	ldrb	ip, [r0]
   1a70c:	sub	r2, r3, #65	; 0x41
   1a710:	cmp	r2, #26
   1a714:	sub	r2, ip, #65	; 0x41
   1a718:	addcc	r3, r3, #32
   1a71c:	cmp	r2, #26
   1a720:	addcc	ip, ip, #32
   1a724:	uxtb	r3, r3
   1a728:	uxtb	r2, ip
   1a72c:	cmp	r2, #0
   1a730:	beq	1a744 <__assert_fail@plt+0x8cc8>
   1a734:	add	r1, r1, #1
   1a738:	add	r0, r0, #1
   1a73c:	cmp	r2, r3
   1a740:	beq	1a704 <__assert_fail@plt+0x8c88>
   1a744:	sub	r0, r2, r3
   1a748:	bx	lr
   1a74c:	push	{r4, r5, r6, sl, fp, lr}
   1a750:	add	fp, sp, #16
   1a754:	mov	r4, r0
   1a758:	bl	11818 <__fpending@plt>
   1a75c:	mov	r5, r0
   1a760:	mov	r0, r4
   1a764:	bl	11824 <ferror_unlocked@plt>
   1a768:	mov	r6, r0
   1a76c:	mov	r0, r4
   1a770:	bl	1a7cc <__assert_fail@plt+0x8d50>
   1a774:	cmp	r6, #0
   1a778:	beq	1a798 <__assert_fail@plt+0x8d1c>
   1a77c:	mvn	r4, #0
   1a780:	cmp	r0, #0
   1a784:	bne	1a7c4 <__assert_fail@plt+0x8d48>
   1a788:	bl	11908 <__errno_location@plt>
   1a78c:	mov	r1, #0
   1a790:	str	r1, [r0]
   1a794:	b	1a7c4 <__assert_fail@plt+0x8d48>
   1a798:	cmp	r0, #0
   1a79c:	mov	r4, r0
   1a7a0:	mvnne	r4, #0
   1a7a4:	cmp	r5, #0
   1a7a8:	bne	1a7c4 <__assert_fail@plt+0x8d48>
   1a7ac:	cmp	r0, #0
   1a7b0:	beq	1a7c4 <__assert_fail@plt+0x8d48>
   1a7b4:	bl	11908 <__errno_location@plt>
   1a7b8:	ldr	r0, [r0]
   1a7bc:	subs	r4, r0, #9
   1a7c0:	mvnne	r4, #0
   1a7c4:	mov	r0, r4
   1a7c8:	pop	{r4, r5, r6, sl, fp, pc}
   1a7cc:	push	{r4, r5, r6, sl, fp, lr}
   1a7d0:	add	fp, sp, #16
   1a7d4:	sub	sp, sp, #8
   1a7d8:	mov	r4, r0
   1a7dc:	bl	11968 <fileno@plt>
   1a7e0:	cmn	r0, #1
   1a7e4:	ble	1a858 <__assert_fail@plt+0x8ddc>
   1a7e8:	mov	r0, r4
   1a7ec:	bl	1186c <__freading@plt>
   1a7f0:	cmp	r0, #0
   1a7f4:	beq	1a820 <__assert_fail@plt+0x8da4>
   1a7f8:	mov	r0, r4
   1a7fc:	bl	11968 <fileno@plt>
   1a800:	mov	r1, #1
   1a804:	mov	r2, #0
   1a808:	mov	r3, #0
   1a80c:	str	r1, [sp]
   1a810:	bl	117f4 <lseek64@plt>
   1a814:	and	r0, r0, r1
   1a818:	cmn	r0, #1
   1a81c:	beq	1a858 <__assert_fail@plt+0x8ddc>
   1a820:	mov	r0, r4
   1a824:	bl	1a868 <__assert_fail@plt+0x8dec>
   1a828:	cmp	r0, #0
   1a82c:	beq	1a858 <__assert_fail@plt+0x8ddc>
   1a830:	bl	11908 <__errno_location@plt>
   1a834:	ldr	r6, [r0]
   1a838:	mov	r5, r0
   1a83c:	mov	r0, r4
   1a840:	bl	1198c <fclose@plt>
   1a844:	cmp	r6, #0
   1a848:	strne	r6, [r5]
   1a84c:	mvnne	r0, #0
   1a850:	sub	sp, fp, #16
   1a854:	pop	{r4, r5, r6, sl, fp, pc}
   1a858:	mov	r0, r4
   1a85c:	sub	sp, fp, #16
   1a860:	pop	{r4, r5, r6, sl, fp, lr}
   1a864:	b	1198c <fclose@plt>
   1a868:	push	{r4, sl, fp, lr}
   1a86c:	add	fp, sp, #8
   1a870:	sub	sp, sp, #8
   1a874:	mov	r4, r0
   1a878:	cmp	r0, #0
   1a87c:	beq	1a8b4 <__assert_fail@plt+0x8e38>
   1a880:	mov	r0, r4
   1a884:	bl	1186c <__freading@plt>
   1a888:	cmp	r0, #0
   1a88c:	beq	1a8b4 <__assert_fail@plt+0x8e38>
   1a890:	ldrb	r0, [r4, #1]
   1a894:	tst	r0, #1
   1a898:	beq	1a8b4 <__assert_fail@plt+0x8e38>
   1a89c:	mov	r0, #1
   1a8a0:	mov	r2, #0
   1a8a4:	mov	r3, #0
   1a8a8:	str	r0, [sp]
   1a8ac:	mov	r0, r4
   1a8b0:	bl	1a8c4 <__assert_fail@plt+0x8e48>
   1a8b4:	mov	r0, r4
   1a8b8:	sub	sp, fp, #8
   1a8bc:	pop	{r4, sl, fp, lr}
   1a8c0:	b	116bc <fflush@plt>
   1a8c4:	push	{r4, r5, r6, r7, fp, lr}
   1a8c8:	add	fp, sp, #16
   1a8cc:	sub	sp, sp, #8
   1a8d0:	mov	r4, r0
   1a8d4:	ldr	r0, [r0, #4]
   1a8d8:	mov	r5, r3
   1a8dc:	mov	r6, r2
   1a8e0:	ldr	r1, [r4, #8]
   1a8e4:	cmp	r1, r0
   1a8e8:	bne	1a904 <__assert_fail@plt+0x8e88>
   1a8ec:	ldrd	r0, [r4, #16]
   1a8f0:	cmp	r1, r0
   1a8f4:	bne	1a904 <__assert_fail@plt+0x8e88>
   1a8f8:	ldr	r0, [r4, #36]	; 0x24
   1a8fc:	cmp	r0, #0
   1a900:	beq	1a91c <__assert_fail@plt+0x8ea0>
   1a904:	mov	r0, r4
   1a908:	mov	r2, r6
   1a90c:	mov	r3, r5
   1a910:	sub	sp, fp, #16
   1a914:	pop	{r4, r5, r6, r7, fp, lr}
   1a918:	b	119a4 <fseeko64@plt>
   1a91c:	ldr	r7, [fp, #8]
   1a920:	mov	r0, r4
   1a924:	bl	11968 <fileno@plt>
   1a928:	mov	r2, r6
   1a92c:	mov	r3, r5
   1a930:	str	r7, [sp]
   1a934:	bl	117f4 <lseek64@plt>
   1a938:	and	r2, r0, r1
   1a93c:	cmn	r2, #1
   1a940:	beq	1a95c <__assert_fail@plt+0x8ee0>
   1a944:	strd	r0, [r4, #80]	; 0x50
   1a948:	ldr	r0, [r4]
   1a94c:	bic	r0, r0, #16
   1a950:	str	r0, [r4]
   1a954:	mov	r0, #0
   1a958:	b	1a960 <__assert_fail@plt+0x8ee4>
   1a95c:	mvn	r0, #0
   1a960:	sub	sp, fp, #16
   1a964:	pop	{r4, r5, r6, r7, fp, pc}
   1a968:	push	{fp, lr}
   1a96c:	mov	fp, sp
   1a970:	mov	r0, #14
   1a974:	bl	119ec <nl_langinfo@plt>
   1a978:	movw	r1, #50273	; 0xc461
   1a97c:	cmp	r0, #0
   1a980:	movt	r1, #1
   1a984:	movne	r1, r0
   1a988:	movw	r0, #65205	; 0xfeb5
   1a98c:	ldrb	r2, [r1]
   1a990:	movt	r0, #1
   1a994:	cmp	r2, #0
   1a998:	movne	r0, r1
   1a99c:	pop	{fp, pc}
   1a9a0:	push	{r4, r5, r6, r7, fp, lr}
   1a9a4:	add	fp, sp, #16
   1a9a8:	mov	r4, r0
   1a9ac:	ldrb	r0, [r0, #16]
   1a9b0:	cmp	r0, #0
   1a9b4:	popne	{r4, r5, r6, r7, fp, pc}
   1a9b8:	ldrb	r0, [r4, #4]
   1a9bc:	ldr	r5, [r4, #20]
   1a9c0:	cmp	r0, #0
   1a9c4:	beq	1aa14 <__assert_fail@plt+0x8f98>
   1a9c8:	ldr	r0, [r4]
   1a9cc:	add	r6, r4, #8
   1a9d0:	add	r7, r4, #32
   1a9d4:	mov	r1, r5
   1a9d8:	mov	r3, r6
   1a9dc:	sub	r2, r0, r5
   1a9e0:	mov	r0, r7
   1a9e4:	bl	1abd8 <__assert_fail@plt+0x915c>
   1a9e8:	cmn	r0, #2
   1a9ec:	str	r0, [r4, #24]
   1a9f0:	beq	1aa90 <__assert_fail@plt+0x9014>
   1a9f4:	cmp	r0, #0
   1a9f8:	beq	1aa4c <__assert_fail@plt+0x8fd0>
   1a9fc:	cmn	r0, #1
   1aa00:	bne	1aa70 <__assert_fail@plt+0x8ff4>
   1aa04:	mov	r0, #0
   1aa08:	strb	r0, [r4, #28]
   1aa0c:	mov	r0, #1
   1aa10:	b	1aaa4 <__assert_fail@plt+0x9028>
   1aa14:	ldrb	r0, [r5]
   1aa18:	movw	r2, #65408	; 0xff80
   1aa1c:	movt	r2, #1
   1aa20:	ubfx	r1, r0, #5, #3
   1aa24:	ldr	r1, [r2, r1, lsl #2]
   1aa28:	and	r2, r0, #31
   1aa2c:	mov	r0, #1
   1aa30:	tst	r1, r0, lsl r2
   1aa34:	beq	1aab4 <__assert_fail@plt+0x9038>
   1aa38:	str	r0, [r4, #24]
   1aa3c:	ldrb	r1, [r5]
   1aa40:	strb	r0, [r4, #28]
   1aa44:	str	r1, [r4, #32]
   1aa48:	b	1aaa8 <__assert_fail@plt+0x902c>
   1aa4c:	mov	r0, #1
   1aa50:	str	r0, [r4, #24]
   1aa54:	ldr	r0, [r4, #20]
   1aa58:	ldrb	r0, [r0]
   1aa5c:	cmp	r0, #0
   1aa60:	bne	1aad0 <__assert_fail@plt+0x9054>
   1aa64:	ldr	r0, [r7]
   1aa68:	cmp	r0, #0
   1aa6c:	bne	1aae8 <__assert_fail@plt+0x906c>
   1aa70:	mov	r0, #1
   1aa74:	strb	r0, [r4, #28]
   1aa78:	mov	r0, r6
   1aa7c:	bl	11734 <mbsinit@plt>
   1aa80:	cmp	r0, #0
   1aa84:	movne	r0, #0
   1aa88:	strbne	r0, [r4, #4]
   1aa8c:	b	1aaa8 <__assert_fail@plt+0x902c>
   1aa90:	mov	r0, #0
   1aa94:	strb	r0, [r4, #28]
   1aa98:	ldr	r0, [r4]
   1aa9c:	ldr	r1, [r4, #20]
   1aaa0:	sub	r0, r0, r1
   1aaa4:	str	r0, [r4, #24]
   1aaa8:	mov	r0, #1
   1aaac:	strb	r0, [r4, #16]
   1aab0:	pop	{r4, r5, r6, r7, fp, pc}
   1aab4:	add	r0, r4, #8
   1aab8:	bl	11734 <mbsinit@plt>
   1aabc:	cmp	r0, #0
   1aac0:	beq	1ab00 <__assert_fail@plt+0x9084>
   1aac4:	mov	r0, #1
   1aac8:	strb	r0, [r4, #4]
   1aacc:	b	1a9c8 <__assert_fail@plt+0x8f4c>
   1aad0:	movw	r0, #65295	; 0xff0f
   1aad4:	movw	r1, #65234	; 0xfed2
   1aad8:	movw	r3, #65249	; 0xfee1
   1aadc:	mov	r2, #162	; 0xa2
   1aae0:	movt	r0, #1
   1aae4:	b	1ab14 <__assert_fail@plt+0x9098>
   1aae8:	movw	r0, #65318	; 0xff26
   1aaec:	movw	r1, #65234	; 0xfed2
   1aaf0:	movw	r3, #65249	; 0xfee1
   1aaf4:	mov	r2, #163	; 0xa3
   1aaf8:	movt	r0, #1
   1aafc:	b	1ab14 <__assert_fail@plt+0x9098>
   1ab00:	movw	r0, #65211	; 0xfebb
   1ab04:	movw	r1, #65234	; 0xfed2
   1ab08:	movw	r3, #65249	; 0xfee1
   1ab0c:	mov	r2, #135	; 0x87
   1ab10:	movt	r0, #1
   1ab14:	movt	r1, #1
   1ab18:	movt	r3, #1
   1ab1c:	bl	11a7c <__assert_fail@plt>
   1ab20:	ldr	r3, [r0, #20]
   1ab24:	ldr	r2, [r0]
   1ab28:	add	r3, r3, r1
   1ab2c:	add	r1, r2, r1
   1ab30:	str	r3, [r0, #20]
   1ab34:	str	r1, [r0]
   1ab38:	bx	lr
   1ab3c:	push	{r4, r5, r6, sl, fp, lr}
   1ab40:	add	fp, sp, #16
   1ab44:	mov	r4, r0
   1ab48:	ldr	r0, [r1]
   1ab4c:	mov	r5, r1
   1ab50:	str	r0, [r4]
   1ab54:	add	r0, r4, #8
   1ab58:	ldrb	r1, [r1, #4]
   1ab5c:	cmp	r1, #0
   1ab60:	strb	r1, [r4, #4]
   1ab64:	beq	1ab78 <__assert_fail@plt+0x90fc>
   1ab68:	ldr	r1, [r5, #8]
   1ab6c:	ldr	r2, [r5, #12]
   1ab70:	stm	r0, {r1, r2}
   1ab74:	b	1ab84 <__assert_fail@plt+0x9108>
   1ab78:	mov	r1, #0
   1ab7c:	str	r1, [r0]
   1ab80:	str	r1, [r0, #4]
   1ab84:	ldrb	r0, [r5, #16]
   1ab88:	strb	r0, [r4, #16]
   1ab8c:	add	r0, r5, #36	; 0x24
   1ab90:	ldr	r1, [r5, #20]
   1ab94:	cmp	r1, r0
   1ab98:	beq	1aba4 <__assert_fail@plt+0x9128>
   1ab9c:	mov	r6, r1
   1aba0:	b	1abb4 <__assert_fail@plt+0x9138>
   1aba4:	ldr	r2, [r5, #24]
   1aba8:	add	r6, r4, #36	; 0x24
   1abac:	mov	r0, r6
   1abb0:	bl	1171c <memcpy@plt>
   1abb4:	str	r6, [r4, #20]
   1abb8:	ldr	r0, [r5, #24]
   1abbc:	str	r0, [r4, #24]
   1abc0:	ldrb	r0, [r5, #28]
   1abc4:	strb	r0, [r4, #28]
   1abc8:	cmp	r0, #0
   1abcc:	ldrne	r0, [r5, #32]
   1abd0:	strne	r0, [r4, #32]
   1abd4:	pop	{r4, r5, r6, sl, fp, pc}
   1abd8:	push	{r4, r5, r6, r7, fp, lr}
   1abdc:	add	fp, sp, #16
   1abe0:	sub	sp, sp, #8
   1abe4:	cmp	r0, #0
   1abe8:	add	r5, sp, #4
   1abec:	mov	r7, r2
   1abf0:	mov	r4, r1
   1abf4:	movne	r5, r0
   1abf8:	mov	r0, r5
   1abfc:	bl	11830 <mbrtowc@plt>
   1ac00:	mov	r6, r0
   1ac04:	cmp	r7, #0
   1ac08:	beq	1ac30 <__assert_fail@plt+0x91b4>
   1ac0c:	cmn	r6, #2
   1ac10:	bcc	1ac30 <__assert_fail@plt+0x91b4>
   1ac14:	mov	r0, #0
   1ac18:	bl	1be94 <__assert_fail@plt+0xa418>
   1ac1c:	cmp	r0, #0
   1ac20:	bne	1ac30 <__assert_fail@plt+0x91b4>
   1ac24:	ldrb	r0, [r4]
   1ac28:	mov	r6, #1
   1ac2c:	str	r0, [r5]
   1ac30:	mov	r0, r6
   1ac34:	sub	sp, fp, #16
   1ac38:	pop	{r4, r5, r6, r7, fp, pc}
   1ac3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac40:	add	fp, sp, #28
   1ac44:	sub	sp, sp, #308	; 0x134
   1ac48:	mov	r7, r1
   1ac4c:	mov	sl, r0
   1ac50:	bl	1180c <__ctype_get_mb_cur_max@plt>
   1ac54:	cmp	r0, #2
   1ac58:	bcc	1afe4 <__assert_fail@plt+0x9568>
   1ac5c:	mov	r4, #0
   1ac60:	sub	r0, fp, #88	; 0x58
   1ac64:	str	r4, [fp, #-80]	; 0xffffffb0
   1ac68:	str	r4, [fp, #-84]	; 0xffffffac
   1ac6c:	strb	r4, [fp, #-76]	; 0xffffffb4
   1ac70:	strb	r4, [fp, #-88]	; 0xffffffa8
   1ac74:	str	r7, [fp, #-72]	; 0xffffffb8
   1ac78:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1ac7c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1ac80:	cmp	r0, #0
   1ac84:	beq	1ac94 <__assert_fail@plt+0x9218>
   1ac88:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ac8c:	cmp	r0, #0
   1ac90:	beq	1b100 <__assert_fail@plt+0x9684>
   1ac94:	add	r0, sp, #136	; 0x88
   1ac98:	str	r4, [fp, #-136]	; 0xffffff78
   1ac9c:	str	r4, [fp, #-140]	; 0xffffff74
   1aca0:	str	r7, [fp, #-128]	; 0xffffff80
   1aca4:	strb	r4, [fp, #-132]	; 0xffffff7c
   1aca8:	str	r7, [sp, #12]
   1acac:	strb	r4, [fp, #-144]	; 0xffffff70
   1acb0:	str	r4, [sp, #144]	; 0x90
   1acb4:	str	r4, [sp, #140]	; 0x8c
   1acb8:	str	sl, [sp, #152]	; 0x98
   1acbc:	strb	r4, [sp, #148]	; 0x94
   1acc0:	strb	r4, [sp, #136]	; 0x88
   1acc4:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1acc8:	ldrb	r0, [sp, #160]	; 0xa0
   1accc:	cmp	r0, #0
   1acd0:	beq	1ace0 <__assert_fail@plt+0x9264>
   1acd4:	ldr	r0, [sp, #164]	; 0xa4
   1acd8:	cmp	r0, #0
   1acdc:	beq	1b10c <__assert_fail@plt+0x9690>
   1ace0:	add	r0, sp, #24
   1ace4:	mov	r5, #0
   1ace8:	sub	r7, fp, #144	; 0x90
   1acec:	mov	r1, #0
   1acf0:	mov	r6, #0
   1acf4:	mov	r9, #0
   1acf8:	add	r0, r0, #4
   1acfc:	str	r0, [sp, #8]
   1ad00:	mov	r0, #1
   1ad04:	str	r0, [sp, #16]
   1ad08:	add	r0, r9, r9, lsl #2
   1ad0c:	mov	r8, r6
   1ad10:	cmp	r6, r0
   1ad14:	bcc	1adc4 <__assert_fail@plt+0x9348>
   1ad18:	ldr	r0, [sp, #16]
   1ad1c:	tst	r0, #1
   1ad20:	beq	1adc4 <__assert_fail@plt+0x9348>
   1ad24:	cmp	r9, #10
   1ad28:	bcc	1adc4 <__assert_fail@plt+0x9348>
   1ad2c:	subs	r0, r8, r1
   1ad30:	beq	1ad74 <__assert_fail@plt+0x92f8>
   1ad34:	sub	r6, r1, r8
   1ad38:	mov	r0, r7
   1ad3c:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1ad40:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1ad44:	cmp	r0, #0
   1ad48:	beq	1ad58 <__assert_fail@plt+0x92dc>
   1ad4c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1ad50:	cmp	r0, #0
   1ad54:	beq	1ad74 <__assert_fail@plt+0x92f8>
   1ad58:	strb	r5, [fp, #-132]	; 0xffffff7c
   1ad5c:	adds	r6, r6, #1
   1ad60:	ldr	r0, [fp, #-128]	; 0xffffff80
   1ad64:	ldr	r1, [fp, #-124]	; 0xffffff84
   1ad68:	add	r0, r0, r1
   1ad6c:	str	r0, [fp, #-128]	; 0xffffff80
   1ad70:	bcc	1ad38 <__assert_fail@plt+0x92bc>
   1ad74:	mov	r0, r7
   1ad78:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1ad7c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1ad80:	cmp	r0, #0
   1ad84:	beq	1adc0 <__assert_fail@plt+0x9344>
   1ad88:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1ad8c:	mov	r1, r8
   1ad90:	cmp	r0, #0
   1ad94:	bne	1adc4 <__assert_fail@plt+0x9348>
   1ad98:	ldr	r1, [sp, #12]
   1ad9c:	mov	r0, sl
   1ada0:	add	r2, sp, #80	; 0x50
   1ada4:	bl	1b134 <__assert_fail@plt+0x96b8>
   1ada8:	mov	r1, #0
   1adac:	cmp	r0, #0
   1adb0:	str	r1, [sp, #16]
   1adb4:	mov	r1, r8
   1adb8:	beq	1adc4 <__assert_fail@plt+0x9348>
   1adbc:	b	1b128 <__assert_fail@plt+0x96ac>
   1adc0:	mov	r1, r8
   1adc4:	ldrb	r0, [sp, #160]	; 0xa0
   1adc8:	add	r6, r8, #1
   1adcc:	str	r1, [sp, #20]
   1add0:	cmp	r0, #0
   1add4:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1add8:	cmpne	r0, #0
   1addc:	bne	1ae08 <__assert_fail@plt+0x938c>
   1ade0:	ldr	r2, [sp, #156]	; 0x9c
   1ade4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ade8:	cmp	r2, r0
   1adec:	bne	1afa0 <__assert_fail@plt+0x9524>
   1adf0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1adf4:	ldr	r0, [sp, #152]	; 0x98
   1adf8:	bl	118cc <bcmp@plt>
   1adfc:	cmp	r0, #0
   1ae00:	bne	1afa0 <__assert_fail@plt+0x9524>
   1ae04:	b	1ae18 <__assert_fail@plt+0x939c>
   1ae08:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ae0c:	ldr	r1, [sp, #164]	; 0xa4
   1ae10:	cmp	r1, r0
   1ae14:	bne	1afa0 <__assert_fail@plt+0x9524>
   1ae18:	str	r9, [sp, #4]
   1ae1c:	add	r1, sp, #136	; 0x88
   1ae20:	add	r0, sp, #80	; 0x50
   1ae24:	mov	ip, #0
   1ae28:	ldm	r1!, {r2, r3, r5, r6}
   1ae2c:	stmia	r0!, {r2, r3, r5, r6}
   1ae30:	ldm	r1!, {r2, r3, r4, r5, r6}
   1ae34:	stmia	r0!, {r2, r3, r4, r5, r6}
   1ae38:	ldm	r1, {r2, r3, r4, r5, r6}
   1ae3c:	stm	r0, {r2, r3, r4, r5, r6}
   1ae40:	strb	ip, [sp, #92]	; 0x5c
   1ae44:	mov	r4, #0
   1ae48:	ldr	r0, [sp, #12]
   1ae4c:	ldr	r1, [sp, #100]	; 0x64
   1ae50:	str	r0, [sp, #40]	; 0x28
   1ae54:	ldr	r0, [sp, #96]	; 0x60
   1ae58:	strb	ip, [sp, #24]
   1ae5c:	add	r0, r0, r1
   1ae60:	str	r0, [sp, #96]	; 0x60
   1ae64:	ldr	r0, [sp, #8]
   1ae68:	str	ip, [r0]
   1ae6c:	str	ip, [r0, #4]
   1ae70:	add	r0, sp, #24
   1ae74:	strb	ip, [sp, #36]	; 0x24
   1ae78:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1ae7c:	ldrb	r0, [sp, #48]	; 0x30
   1ae80:	cmp	r0, #0
   1ae84:	beq	1ae94 <__assert_fail@plt+0x9418>
   1ae88:	ldr	r0, [sp, #52]	; 0x34
   1ae8c:	cmp	r0, #0
   1ae90:	beq	1b130 <__assert_fail@plt+0x96b4>
   1ae94:	strb	r4, [sp, #36]	; 0x24
   1ae98:	ldr	r0, [sp, #40]	; 0x28
   1ae9c:	ldr	r1, [sp, #44]	; 0x2c
   1aea0:	add	r0, r0, r1
   1aea4:	str	r0, [sp, #40]	; 0x28
   1aea8:	add	r0, sp, #24
   1aeac:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1aeb0:	ldrb	r0, [sp, #48]	; 0x30
   1aeb4:	add	r5, sp, #80	; 0x50
   1aeb8:	cmp	r0, #0
   1aebc:	beq	1aecc <__assert_fail@plt+0x9450>
   1aec0:	ldr	r0, [sp, #52]	; 0x34
   1aec4:	cmp	r0, #0
   1aec8:	beq	1b118 <__assert_fail@plt+0x969c>
   1aecc:	add	r6, r8, #2
   1aed0:	mov	r0, r5
   1aed4:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1aed8:	ldr	r0, [sp, #108]	; 0x6c
   1aedc:	ldrb	r1, [sp, #104]	; 0x68
   1aee0:	cmp	r0, #0
   1aee4:	bne	1aef0 <__assert_fail@plt+0x9474>
   1aee8:	cmp	r1, #0
   1aeec:	bne	1b108 <__assert_fail@plt+0x968c>
   1aef0:	cmp	r1, #0
   1aef4:	ldrbne	r1, [sp, #48]	; 0x30
   1aef8:	cmpne	r1, #0
   1aefc:	bne	1af38 <__assert_fail@plt+0x94bc>
   1af00:	ldr	r4, [sp, #100]	; 0x64
   1af04:	ldr	r0, [sp, #44]	; 0x2c
   1af08:	cmp	r4, r0
   1af0c:	bne	1af98 <__assert_fail@plt+0x951c>
   1af10:	ldr	r8, [sp, #40]	; 0x28
   1af14:	ldr	r9, [sp, #96]	; 0x60
   1af18:	mov	r2, r4
   1af1c:	mov	r0, r9
   1af20:	mov	r1, r8
   1af24:	bl	118cc <bcmp@plt>
   1af28:	cmp	r0, #0
   1af2c:	mov	r0, r4
   1af30:	beq	1af54 <__assert_fail@plt+0x94d8>
   1af34:	b	1af98 <__assert_fail@plt+0x951c>
   1af38:	ldr	r1, [sp, #52]	; 0x34
   1af3c:	cmp	r0, r1
   1af40:	bne	1af98 <__assert_fail@plt+0x951c>
   1af44:	ldr	r8, [sp, #40]	; 0x28
   1af48:	ldr	r4, [sp, #44]	; 0x2c
   1af4c:	ldr	r9, [sp, #96]	; 0x60
   1af50:	ldr	r0, [sp, #100]	; 0x64
   1af54:	mov	r1, #0
   1af58:	add	r0, r9, r0
   1af5c:	strb	r1, [sp, #92]	; 0x5c
   1af60:	str	r0, [sp, #96]	; 0x60
   1af64:	add	r0, r8, r4
   1af68:	strb	r1, [sp, #36]	; 0x24
   1af6c:	str	r0, [sp, #40]	; 0x28
   1af70:	add	r0, sp, #24
   1af74:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1af78:	ldrb	r0, [sp, #48]	; 0x30
   1af7c:	add	r6, r6, #1
   1af80:	cmp	r0, #0
   1af84:	beq	1aed0 <__assert_fail@plt+0x9454>
   1af88:	ldr	r0, [sp, #52]	; 0x34
   1af8c:	cmp	r0, #0
   1af90:	bne	1aed0 <__assert_fail@plt+0x9454>
   1af94:	b	1b118 <__assert_fail@plt+0x969c>
   1af98:	ldr	r9, [sp, #4]
   1af9c:	mov	r5, #0
   1afa0:	mov	r4, #0
   1afa4:	add	r9, r9, #1
   1afa8:	strb	r4, [sp, #148]	; 0x94
   1afac:	ldr	r0, [sp, #152]	; 0x98
   1afb0:	ldr	r1, [sp, #156]	; 0x9c
   1afb4:	add	r0, r0, r1
   1afb8:	str	r0, [sp, #152]	; 0x98
   1afbc:	add	r0, sp, #136	; 0x88
   1afc0:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1afc4:	ldrb	r0, [sp, #160]	; 0xa0
   1afc8:	ldr	r1, [sp, #20]
   1afcc:	cmp	r0, #0
   1afd0:	beq	1ad08 <__assert_fail@plt+0x928c>
   1afd4:	ldr	r0, [sp, #164]	; 0xa4
   1afd8:	cmp	r0, #0
   1afdc:	bne	1ad08 <__assert_fail@plt+0x928c>
   1afe0:	b	1b10c <__assert_fail@plt+0x9690>
   1afe4:	ldrb	r5, [r7]
   1afe8:	cmp	r5, #0
   1afec:	beq	1b100 <__assert_fail@plt+0x9684>
   1aff0:	ldrb	r9, [sl]
   1aff4:	cmp	r9, #0
   1aff8:	beq	1b108 <__assert_fail@plt+0x968c>
   1affc:	mov	lr, #1
   1b000:	mov	ip, #0
   1b004:	mov	r3, r7
   1b008:	mov	r6, #0
   1b00c:	mov	r8, #0
   1b010:	add	r0, r8, r8, lsl #2
   1b014:	cmp	r6, r0
   1b018:	bcc	1b0a8 <__assert_fail@plt+0x962c>
   1b01c:	tst	lr, #1
   1b020:	beq	1b0a8 <__assert_fail@plt+0x962c>
   1b024:	cmp	r8, #10
   1b028:	bcc	1b0a8 <__assert_fail@plt+0x962c>
   1b02c:	cmp	r3, #0
   1b030:	beq	1b070 <__assert_fail@plt+0x95f4>
   1b034:	sub	r1, r6, ip
   1b038:	mov	r0, r3
   1b03c:	str	r6, [sp, #20]
   1b040:	mov	r6, r5
   1b044:	mov	r4, lr
   1b048:	mov	r5, r3
   1b04c:	bl	11998 <strnlen@plt>
   1b050:	mov	r3, r5
   1b054:	mov	r5, r6
   1b058:	ldr	r6, [sp, #20]
   1b05c:	mov	lr, r4
   1b060:	ldrb	r0, [r3, r0]!
   1b064:	mov	ip, r6
   1b068:	cmp	r0, #0
   1b06c:	bne	1b0a8 <__assert_fail@plt+0x962c>
   1b070:	mov	r0, r7
   1b074:	mov	r4, ip
   1b078:	bl	118d8 <strlen@plt>
   1b07c:	mov	r2, r0
   1b080:	mov	r0, sl
   1b084:	mov	r1, r7
   1b088:	sub	r3, fp, #88	; 0x58
   1b08c:	bl	1b52c <__assert_fail@plt+0x9ab0>
   1b090:	cmp	r0, #0
   1b094:	bne	1b120 <__assert_fail@plt+0x96a4>
   1b098:	ldrb	r9, [sl]
   1b09c:	mov	lr, #0
   1b0a0:	mov	r3, #0
   1b0a4:	mov	ip, r4
   1b0a8:	uxtb	r0, r9
   1b0ac:	cmp	r0, r5
   1b0b0:	bne	1b0e4 <__assert_fail@plt+0x9668>
   1b0b4:	mov	r0, #1
   1b0b8:	ldrb	r1, [r7, r0]
   1b0bc:	cmp	r1, #0
   1b0c0:	beq	1b100 <__assert_fail@plt+0x9684>
   1b0c4:	ldrb	r2, [sl, r0]
   1b0c8:	cmp	r2, #0
   1b0cc:	beq	1b108 <__assert_fail@plt+0x968c>
   1b0d0:	add	r0, r0, #1
   1b0d4:	cmp	r2, r1
   1b0d8:	beq	1b0b8 <__assert_fail@plt+0x963c>
   1b0dc:	add	r6, r6, r0
   1b0e0:	b	1b0e8 <__assert_fail@plt+0x966c>
   1b0e4:	add	r6, r6, #1
   1b0e8:	ldrb	r9, [sl, #1]!
   1b0ec:	add	r8, r8, #1
   1b0f0:	mov	r4, #0
   1b0f4:	cmp	r9, #0
   1b0f8:	bne	1b010 <__assert_fail@plt+0x9594>
   1b0fc:	b	1b10c <__assert_fail@plt+0x9690>
   1b100:	mov	r4, sl
   1b104:	b	1b10c <__assert_fail@plt+0x9690>
   1b108:	mov	r4, #0
   1b10c:	mov	r0, r4
   1b110:	sub	sp, fp, #28
   1b114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b118:	ldr	r4, [sp, #152]	; 0x98
   1b11c:	b	1b10c <__assert_fail@plt+0x9690>
   1b120:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1b124:	b	1b10c <__assert_fail@plt+0x9690>
   1b128:	ldr	r4, [sp, #80]	; 0x50
   1b12c:	b	1b10c <__assert_fail@plt+0x9690>
   1b130:	bl	11a64 <abort@plt>
   1b134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b138:	add	fp, sp, #28
   1b13c:	sub	sp, sp, #132	; 0x84
   1b140:	mov	r4, r0
   1b144:	mov	r0, r1
   1b148:	mov	r8, r2
   1b14c:	mov	r7, r1
   1b150:	bl	1c044 <__assert_fail@plt+0xa5c8>
   1b154:	mov	sl, r0
   1b158:	movw	r0, #47662	; 0xba2e
   1b15c:	mov	r5, #0
   1b160:	movt	r0, #744	; 0x2e8
   1b164:	cmp	sl, r0
   1b168:	bhi	1b51c <__assert_fail@plt+0x9aa0>
   1b16c:	mov	r0, #44	; 0x2c
   1b170:	mul	r0, sl, r0
   1b174:	cmp	r0, #4016	; 0xfb0
   1b178:	bhi	1b198 <__assert_fail@plt+0x971c>
   1b17c:	add	r0, r0, #22
   1b180:	bic	r0, r0, #7
   1b184:	sub	r0, sp, r0
   1b188:	add	r1, r0, #15
   1b18c:	bic	r9, r1, #15
   1b190:	mov	sp, r0
   1b194:	b	1b1a0 <__assert_fail@plt+0x9724>
   1b198:	bl	1bf00 <__assert_fail@plt+0xa484>
   1b19c:	mov	r9, r0
   1b1a0:	cmp	r9, #0
   1b1a4:	beq	1b51c <__assert_fail@plt+0x9aa0>
   1b1a8:	sub	r6, fp, #88	; 0x58
   1b1ac:	str	r4, [fp, #-160]	; 0xffffff60
   1b1b0:	mov	r4, #0
   1b1b4:	mov	r0, r6
   1b1b8:	str	r4, [fp, #-80]	; 0xffffffb0
   1b1bc:	str	r4, [fp, #-84]	; 0xffffffac
   1b1c0:	strb	r4, [fp, #-76]	; 0xffffffb4
   1b1c4:	strb	r4, [fp, #-88]	; 0xffffffa8
   1b1c8:	str	r7, [fp, #-72]	; 0xffffffb8
   1b1cc:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1b1d0:	add	r0, sl, sl, lsl #2
   1b1d4:	add	r3, r9, r0, lsl #3
   1b1d8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b1dc:	str	r3, [fp, #-148]	; 0xffffff6c
   1b1e0:	cmp	r0, #0
   1b1e4:	beq	1b1f4 <__assert_fail@plt+0x9778>
   1b1e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b1ec:	cmp	r0, #0
   1b1f0:	beq	1b278 <__assert_fail@plt+0x97fc>
   1b1f4:	add	r7, r9, #16
   1b1f8:	add	r5, r6, #32
   1b1fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b200:	cmp	r0, r5
   1b204:	bne	1b21c <__assert_fail@plt+0x97a0>
   1b208:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b20c:	mov	r0, r7
   1b210:	mov	r1, r5
   1b214:	bl	1171c <memcpy@plt>
   1b218:	mov	r0, r7
   1b21c:	str	r0, [r7, #-16]
   1b220:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b224:	str	r0, [r7, #-12]
   1b228:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b22c:	strb	r0, [r7, #-8]
   1b230:	cmp	r0, #0
   1b234:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   1b238:	strne	r0, [r7, #-4]
   1b23c:	strb	r4, [fp, #-76]	; 0xffffffb4
   1b240:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b244:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b248:	add	r0, r0, r1
   1b24c:	str	r0, [fp, #-72]	; 0xffffffb8
   1b250:	mov	r0, r6
   1b254:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1b258:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1b25c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b260:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b264:	add	r7, r7, #40	; 0x28
   1b268:	cmp	r1, #0
   1b26c:	beq	1b1fc <__assert_fail@plt+0x9780>
   1b270:	cmp	r0, #0
   1b274:	bne	1b1fc <__assert_fail@plt+0x9780>
   1b278:	mov	r0, #1
   1b27c:	cmp	sl, #3
   1b280:	str	r8, [fp, #-156]	; 0xffffff64
   1b284:	str	sl, [fp, #-152]	; 0xffffff68
   1b288:	str	r0, [r3, #4]
   1b28c:	bcc	1b34c <__assert_fail@plt+0x98d0>
   1b290:	mov	r4, #2
   1b294:	mov	r5, #0
   1b298:	add	r0, r4, r4, lsl #2
   1b29c:	add	r0, r9, r0, lsl #3
   1b2a0:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   1b2a4:	sub	sl, r0, #40	; 0x28
   1b2a8:	sub	r6, r0, #36	; 0x24
   1b2ac:	sub	r7, r0, #28
   1b2b0:	cmp	r8, #0
   1b2b4:	beq	1b2e0 <__assert_fail@plt+0x9864>
   1b2b8:	add	r0, r5, r5, lsl #2
   1b2bc:	add	r0, r9, r0, lsl #3
   1b2c0:	ldrb	r1, [r0, #8]
   1b2c4:	cmp	r1, #0
   1b2c8:	beq	1b2e0 <__assert_fail@plt+0x9864>
   1b2cc:	ldr	r0, [r0, #12]
   1b2d0:	ldr	r1, [r7]
   1b2d4:	cmp	r1, r0
   1b2d8:	bne	1b310 <__assert_fail@plt+0x9894>
   1b2dc:	b	1b330 <__assert_fail@plt+0x98b4>
   1b2e0:	add	r0, r5, r5, lsl #2
   1b2e4:	ldr	r2, [r6]
   1b2e8:	add	r1, r9, r0, lsl #3
   1b2ec:	ldr	r1, [r1, #4]
   1b2f0:	cmp	r2, r1
   1b2f4:	bne	1b310 <__assert_fail@plt+0x9894>
   1b2f8:	ldr	r1, [r9, r0, lsl #3]
   1b2fc:	ldr	r0, [sl]
   1b300:	bl	118cc <bcmp@plt>
   1b304:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b308:	cmp	r0, #0
   1b30c:	beq	1b330 <__assert_fail@plt+0x98b4>
   1b310:	cmp	r5, #0
   1b314:	beq	1b324 <__assert_fail@plt+0x98a8>
   1b318:	ldr	r0, [r3, r5, lsl #2]
   1b31c:	sub	r5, r5, r0
   1b320:	b	1b2b0 <__assert_fail@plt+0x9834>
   1b324:	mov	r5, #0
   1b328:	mov	r0, r4
   1b32c:	b	1b338 <__assert_fail@plt+0x98bc>
   1b330:	add	r5, r5, #1
   1b334:	sub	r0, r4, r5
   1b338:	str	r0, [r3, r4, lsl #2]
   1b33c:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b340:	add	r4, r4, #1
   1b344:	cmp	r4, r0
   1b348:	bne	1b298 <__assert_fail@plt+0x981c>
   1b34c:	ldr	r8, [fp, #-156]	; 0xffffff64
   1b350:	ldr	r0, [fp, #-160]	; 0xffffff60
   1b354:	mov	r6, #0
   1b358:	str	r6, [r8]
   1b35c:	str	r6, [fp, #-80]	; 0xffffffb0
   1b360:	str	r6, [fp, #-84]	; 0xffffffac
   1b364:	strb	r6, [fp, #-76]	; 0xffffffb4
   1b368:	strb	r6, [fp, #-88]	; 0xffffffa8
   1b36c:	str	r6, [fp, #-136]	; 0xffffff78
   1b370:	str	r6, [fp, #-140]	; 0xffffff74
   1b374:	str	r0, [fp, #-128]	; 0xffffff80
   1b378:	str	r0, [fp, #-72]	; 0xffffffb8
   1b37c:	sub	r0, fp, #144	; 0x90
   1b380:	strb	r6, [fp, #-132]	; 0xffffff7c
   1b384:	strb	r6, [fp, #-144]	; 0xffffff70
   1b388:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1b38c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b390:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1b394:	cmp	r0, #0
   1b398:	bne	1b3a4 <__assert_fail@plt+0x9928>
   1b39c:	cmp	r1, #0
   1b3a0:	bne	1b510 <__assert_fail@plt+0x9a94>
   1b3a4:	clz	r1, r1
   1b3a8:	sub	r4, fp, #88	; 0x58
   1b3ac:	mov	sl, #0
   1b3b0:	lsr	r1, r1, #5
   1b3b4:	add	r2, sl, sl, lsl #2
   1b3b8:	tst	r1, #1
   1b3bc:	add	r3, r9, r2, lsl #3
   1b3c0:	bne	1b3e8 <__assert_fail@plt+0x996c>
   1b3c4:	ldrb	r1, [r3, #8]
   1b3c8:	cmp	r1, #0
   1b3cc:	beq	1b3e8 <__assert_fail@plt+0x996c>
   1b3d0:	ldr	r1, [r3, #12]
   1b3d4:	cmp	r1, r0
   1b3d8:	bne	1b414 <__assert_fail@plt+0x9998>
   1b3dc:	ldr	r7, [fp, #-128]	; 0xffffff80
   1b3e0:	ldr	r5, [fp, #-124]	; 0xffffff84
   1b3e4:	b	1b470 <__assert_fail@plt+0x99f4>
   1b3e8:	ldr	r5, [r3, #4]
   1b3ec:	ldr	r0, [fp, #-124]	; 0xffffff84
   1b3f0:	cmp	r5, r0
   1b3f4:	bne	1b414 <__assert_fail@plt+0x9998>
   1b3f8:	ldr	r0, [r9, r2, lsl #3]
   1b3fc:	ldr	r7, [fp, #-128]	; 0xffffff80
   1b400:	mov	r2, r5
   1b404:	mov	r1, r7
   1b408:	bl	118cc <bcmp@plt>
   1b40c:	cmp	r0, #0
   1b410:	beq	1b470 <__assert_fail@plt+0x99f4>
   1b414:	cmp	sl, #0
   1b418:	beq	1b490 <__assert_fail@plt+0x9a14>
   1b41c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1b420:	ldr	r5, [r0, sl, lsl #2]
   1b424:	sub	sl, sl, r5
   1b428:	cmp	r5, #0
   1b42c:	beq	1b4dc <__assert_fail@plt+0x9a60>
   1b430:	mov	r0, r4
   1b434:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1b438:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b43c:	cmp	r0, #0
   1b440:	beq	1b450 <__assert_fail@plt+0x99d4>
   1b444:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b448:	cmp	r0, #0
   1b44c:	beq	1b528 <__assert_fail@plt+0x9aac>
   1b450:	strb	r6, [fp, #-76]	; 0xffffffb4
   1b454:	subs	r5, r5, #1
   1b458:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b45c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b460:	add	r0, r0, r1
   1b464:	str	r0, [fp, #-72]	; 0xffffffb8
   1b468:	bne	1b430 <__assert_fail@plt+0x99b4>
   1b46c:	b	1b4dc <__assert_fail@plt+0x9a60>
   1b470:	add	r0, r7, r5
   1b474:	strb	r6, [fp, #-132]	; 0xffffff7c
   1b478:	add	sl, sl, #1
   1b47c:	str	r0, [fp, #-128]	; 0xffffff80
   1b480:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b484:	cmp	sl, r0
   1b488:	bne	1b4dc <__assert_fail@plt+0x9a60>
   1b48c:	b	1b508 <__assert_fail@plt+0x9a8c>
   1b490:	mov	r0, r4
   1b494:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1b498:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b49c:	cmp	r0, #0
   1b4a0:	beq	1b4b0 <__assert_fail@plt+0x9a34>
   1b4a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b4a8:	cmp	r0, #0
   1b4ac:	beq	1b528 <__assert_fail@plt+0x9aac>
   1b4b0:	mov	sl, #0
   1b4b4:	strb	sl, [fp, #-76]	; 0xffffffb4
   1b4b8:	strb	sl, [fp, #-132]	; 0xffffff7c
   1b4bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b4c0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b4c4:	add	r0, r0, r1
   1b4c8:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b4cc:	str	r0, [fp, #-72]	; 0xffffffb8
   1b4d0:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b4d4:	add	r0, r0, r1
   1b4d8:	str	r0, [fp, #-128]	; 0xffffff80
   1b4dc:	sub	r0, fp, #144	; 0x90
   1b4e0:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1b4e4:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1b4e8:	clz	r0, r2
   1b4ec:	lsr	r1, r0, #5
   1b4f0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b4f4:	cmp	r0, #0
   1b4f8:	bne	1b3b4 <__assert_fail@plt+0x9938>
   1b4fc:	cmp	r2, #0
   1b500:	beq	1b3b4 <__assert_fail@plt+0x9938>
   1b504:	b	1b510 <__assert_fail@plt+0x9a94>
   1b508:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b50c:	str	r0, [r8]
   1b510:	mov	r0, r9
   1b514:	bl	1bf68 <__assert_fail@plt+0xa4ec>
   1b518:	mov	r5, #1
   1b51c:	mov	r0, r5
   1b520:	sub	sp, fp, #28
   1b524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b528:	bl	11a64 <abort@plt>
   1b52c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b530:	add	fp, sp, #24
   1b534:	mov	r4, #0
   1b538:	cmn	r2, #-536870911	; 0xe0000001
   1b53c:	bhi	1b668 <__assert_fail@plt+0x9bec>
   1b540:	mov	r7, r0
   1b544:	lsl	r0, r2, #2
   1b548:	mov	r8, r3
   1b54c:	mov	r5, r2
   1b550:	mov	r6, r1
   1b554:	cmp	r0, #4016	; 0xfb0
   1b558:	bhi	1b578 <__assert_fail@plt+0x9afc>
   1b55c:	add	r0, r0, #22
   1b560:	bic	r0, r0, #7
   1b564:	sub	r1, sp, r0
   1b568:	add	r0, r1, #15
   1b56c:	bic	r0, r0, #15
   1b570:	mov	sp, r1
   1b574:	b	1b57c <__assert_fail@plt+0x9b00>
   1b578:	bl	1bf00 <__assert_fail@plt+0xa484>
   1b57c:	cmp	r0, #0
   1b580:	beq	1b668 <__assert_fail@plt+0x9bec>
   1b584:	mov	r1, #1
   1b588:	cmp	r5, #3
   1b58c:	str	r1, [r0, #4]
   1b590:	bcc	1b5ec <__assert_fail@plt+0x9b70>
   1b594:	mov	r1, #2
   1b598:	mov	r2, #0
   1b59c:	add	r3, r1, r6
   1b5a0:	ldrb	r4, [r6, r2]
   1b5a4:	ldrb	r3, [r3, #-1]
   1b5a8:	cmp	r3, r4
   1b5ac:	beq	1b5c8 <__assert_fail@plt+0x9b4c>
   1b5b0:	cmp	r2, #0
   1b5b4:	beq	1b5d4 <__assert_fail@plt+0x9b58>
   1b5b8:	ldr	r4, [r0, r2, lsl #2]
   1b5bc:	sub	r2, r2, r4
   1b5c0:	ldrb	r4, [r6, r2]
   1b5c4:	b	1b5a8 <__assert_fail@plt+0x9b2c>
   1b5c8:	add	r2, r2, #1
   1b5cc:	sub	r3, r1, r2
   1b5d0:	b	1b5dc <__assert_fail@plt+0x9b60>
   1b5d4:	mov	r2, #0
   1b5d8:	mov	r3, r1
   1b5dc:	str	r3, [r0, r1, lsl #2]
   1b5e0:	add	r1, r1, #1
   1b5e4:	cmp	r1, r5
   1b5e8:	bne	1b59c <__assert_fail@plt+0x9b20>
   1b5ec:	mov	r1, #0
   1b5f0:	str	r1, [r8]
   1b5f4:	ldrb	r3, [r7]
   1b5f8:	cmp	r3, #0
   1b5fc:	beq	1b660 <__assert_fail@plt+0x9be4>
   1b600:	mov	r2, r7
   1b604:	ldrb	r4, [r6, r1]
   1b608:	uxtb	r3, r3
   1b60c:	cmp	r4, r3
   1b610:	bne	1b628 <__assert_fail@plt+0x9bac>
   1b614:	add	r1, r1, #1
   1b618:	cmp	r1, r5
   1b61c:	beq	1b65c <__assert_fail@plt+0x9be0>
   1b620:	add	r7, r7, #1
   1b624:	b	1b64c <__assert_fail@plt+0x9bd0>
   1b628:	cmp	r1, #0
   1b62c:	beq	1b640 <__assert_fail@plt+0x9bc4>
   1b630:	ldr	r3, [r0, r1, lsl #2]
   1b634:	sub	r1, r1, r3
   1b638:	add	r2, r2, r3
   1b63c:	b	1b64c <__assert_fail@plt+0x9bd0>
   1b640:	add	r7, r7, #1
   1b644:	add	r2, r2, #1
   1b648:	mov	r1, #0
   1b64c:	ldrb	r3, [r7]
   1b650:	cmp	r3, #0
   1b654:	bne	1b604 <__assert_fail@plt+0x9b88>
   1b658:	b	1b660 <__assert_fail@plt+0x9be4>
   1b65c:	str	r2, [r8]
   1b660:	bl	1bf68 <__assert_fail@plt+0xa4ec>
   1b664:	mov	r4, #1
   1b668:	mov	r0, r4
   1b66c:	sub	sp, fp, #24
   1b670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b674:	push	{r4, r5, r6, r7, fp, lr}
   1b678:	add	fp, sp, #16
   1b67c:	mov	r4, r0
   1b680:	ldrb	r0, [r0, #12]
   1b684:	cmp	r0, #0
   1b688:	popne	{r4, r5, r6, r7, fp, pc}
   1b68c:	ldrb	r0, [r4]
   1b690:	ldr	r5, [r4, #16]
   1b694:	cmp	r0, #0
   1b698:	beq	1b6f4 <__assert_fail@plt+0x9c78>
   1b69c:	bl	1180c <__ctype_get_mb_cur_max@plt>
   1b6a0:	mov	r1, r0
   1b6a4:	mov	r0, r5
   1b6a8:	bl	1be64 <__assert_fail@plt+0xa3e8>
   1b6ac:	add	r6, r4, #4
   1b6b0:	add	r7, r4, #28
   1b6b4:	mov	r2, r0
   1b6b8:	mov	r1, r5
   1b6bc:	mov	r0, r7
   1b6c0:	mov	r3, r6
   1b6c4:	bl	1abd8 <__assert_fail@plt+0x915c>
   1b6c8:	cmn	r0, #2
   1b6cc:	str	r0, [r4, #20]
   1b6d0:	beq	1b770 <__assert_fail@plt+0x9cf4>
   1b6d4:	cmp	r0, #0
   1b6d8:	beq	1b72c <__assert_fail@plt+0x9cb0>
   1b6dc:	cmn	r0, #1
   1b6e0:	bne	1b750 <__assert_fail@plt+0x9cd4>
   1b6e4:	mov	r0, #0
   1b6e8:	strb	r0, [r4, #24]
   1b6ec:	mov	r0, #1
   1b6f0:	b	1b780 <__assert_fail@plt+0x9d04>
   1b6f4:	ldrb	r0, [r5]
   1b6f8:	movw	r2, #65408	; 0xff80
   1b6fc:	movt	r2, #1
   1b700:	ubfx	r1, r0, #5, #3
   1b704:	ldr	r1, [r2, r1, lsl #2]
   1b708:	and	r2, r0, #31
   1b70c:	mov	r0, #1
   1b710:	tst	r1, r0, lsl r2
   1b714:	beq	1b790 <__assert_fail@plt+0x9d14>
   1b718:	str	r0, [r4, #20]
   1b71c:	ldrb	r1, [r5]
   1b720:	strb	r0, [r4, #24]
   1b724:	str	r1, [r4, #28]
   1b728:	b	1b784 <__assert_fail@plt+0x9d08>
   1b72c:	mov	r0, #1
   1b730:	str	r0, [r4, #20]
   1b734:	ldr	r0, [r4, #16]
   1b738:	ldrb	r0, [r0]
   1b73c:	cmp	r0, #0
   1b740:	bne	1b7ac <__assert_fail@plt+0x9d30>
   1b744:	ldr	r0, [r7]
   1b748:	cmp	r0, #0
   1b74c:	bne	1b7c4 <__assert_fail@plt+0x9d48>
   1b750:	mov	r0, #1
   1b754:	strb	r0, [r4, #24]
   1b758:	mov	r0, r6
   1b75c:	bl	11734 <mbsinit@plt>
   1b760:	cmp	r0, #0
   1b764:	movne	r0, #0
   1b768:	strbne	r0, [r4]
   1b76c:	b	1b784 <__assert_fail@plt+0x9d08>
   1b770:	ldr	r0, [r4, #16]
   1b774:	bl	118d8 <strlen@plt>
   1b778:	mov	r1, #0
   1b77c:	strb	r1, [r4, #24]
   1b780:	str	r0, [r4, #20]
   1b784:	mov	r0, #1
   1b788:	strb	r0, [r4, #12]
   1b78c:	pop	{r4, r5, r6, r7, fp, pc}
   1b790:	add	r0, r4, #4
   1b794:	bl	11734 <mbsinit@plt>
   1b798:	cmp	r0, #0
   1b79c:	beq	1b7dc <__assert_fail@plt+0x9d60>
   1b7a0:	mov	r0, #1
   1b7a4:	strb	r0, [r4]
   1b7a8:	b	1b69c <__assert_fail@plt+0x9c20>
   1b7ac:	movw	r0, #65295	; 0xff0f
   1b7b0:	movw	r1, #65336	; 0xff38
   1b7b4:	movw	r3, #65352	; 0xff48
   1b7b8:	mov	r2, #171	; 0xab
   1b7bc:	movt	r0, #1
   1b7c0:	b	1b7f0 <__assert_fail@plt+0x9d74>
   1b7c4:	movw	r0, #65318	; 0xff26
   1b7c8:	movw	r1, #65336	; 0xff38
   1b7cc:	movw	r3, #65352	; 0xff48
   1b7d0:	mov	r2, #172	; 0xac
   1b7d4:	movt	r0, #1
   1b7d8:	b	1b7f0 <__assert_fail@plt+0x9d74>
   1b7dc:	movw	r0, #65211	; 0xfebb
   1b7e0:	movw	r1, #65336	; 0xff38
   1b7e4:	movw	r3, #65352	; 0xff48
   1b7e8:	mov	r2, #143	; 0x8f
   1b7ec:	movt	r0, #1
   1b7f0:	movt	r1, #1
   1b7f4:	movt	r3, #1
   1b7f8:	bl	11a7c <__assert_fail@plt>
   1b7fc:	ldr	r2, [r0, #16]
   1b800:	add	r1, r2, r1
   1b804:	str	r1, [r0, #16]
   1b808:	bx	lr
   1b80c:	push	{r4, r5, r6, sl, fp, lr}
   1b810:	add	fp, sp, #16
   1b814:	mov	r5, r1
   1b818:	ldrb	r1, [r1]
   1b81c:	mov	r4, r0
   1b820:	strb	r1, [r0], #4
   1b824:	cmp	r1, #0
   1b828:	beq	1b838 <__assert_fail@plt+0x9dbc>
   1b82c:	ldmib	r5, {r1, r2}
   1b830:	stm	r0, {r1, r2}
   1b834:	b	1b844 <__assert_fail@plt+0x9dc8>
   1b838:	mov	r1, #0
   1b83c:	str	r1, [r0]
   1b840:	str	r1, [r0, #4]
   1b844:	ldrb	r0, [r5, #12]
   1b848:	strb	r0, [r4, #12]
   1b84c:	add	r0, r5, #32
   1b850:	ldr	r1, [r5, #16]
   1b854:	cmp	r1, r0
   1b858:	beq	1b864 <__assert_fail@plt+0x9de8>
   1b85c:	mov	r6, r1
   1b860:	b	1b874 <__assert_fail@plt+0x9df8>
   1b864:	ldr	r2, [r5, #20]
   1b868:	add	r6, r4, #32
   1b86c:	mov	r0, r6
   1b870:	bl	1171c <memcpy@plt>
   1b874:	str	r6, [r4, #16]
   1b878:	ldr	r0, [r5, #20]
   1b87c:	str	r0, [r4, #20]
   1b880:	ldrb	r0, [r5, #24]
   1b884:	strb	r0, [r4, #24]
   1b888:	cmp	r0, #0
   1b88c:	ldrne	r0, [r5, #28]
   1b890:	strne	r0, [r4, #28]
   1b894:	pop	{r4, r5, r6, sl, fp, pc}
   1b898:	cmp	r2, #0
   1b89c:	beq	1b8cc <__assert_fail@plt+0x9e50>
   1b8a0:	mvn	r3, #0
   1b8a4:	udiv	r3, r3, r2
   1b8a8:	cmp	r3, r1
   1b8ac:	bcs	1b8cc <__assert_fail@plt+0x9e50>
   1b8b0:	push	{fp, lr}
   1b8b4:	mov	fp, sp
   1b8b8:	bl	11908 <__errno_location@plt>
   1b8bc:	mov	r1, #12
   1b8c0:	str	r1, [r0]
   1b8c4:	mov	r0, #0
   1b8c8:	pop	{fp, pc}
   1b8cc:	mul	r1, r2, r1
   1b8d0:	b	1a6a8 <__assert_fail@plt+0x8c2c>
   1b8d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8d8:	add	fp, sp, #28
   1b8dc:	sub	sp, sp, #44	; 0x2c
   1b8e0:	sub	sp, sp, #4096	; 0x1000
   1b8e4:	mov	r5, r0
   1b8e8:	mov	r0, #0
   1b8ec:	str	r3, [sp, #16]
   1b8f0:	mov	r4, r1
   1b8f4:	str	r2, [sp, #20]
   1b8f8:	mov	r1, #0
   1b8fc:	mov	r3, #0
   1b900:	str	r0, [sp]
   1b904:	mov	r0, r2
   1b908:	mov	r2, #0
   1b90c:	bl	116a4 <iconv@plt>
   1b910:	cmp	r4, #0
   1b914:	mov	r6, #0
   1b918:	str	r5, [sp, #8]
   1b91c:	str	r5, [sp, #36]	; 0x24
   1b920:	str	r4, [sp, #32]
   1b924:	str	r4, [sp, #12]
   1b928:	beq	1b998 <__assert_fail@plt+0x9f1c>
   1b92c:	mov	r6, #0
   1b930:	add	r8, sp, #40	; 0x28
   1b934:	mov	sl, #4096	; 0x1000
   1b938:	add	r9, sp, #24
   1b93c:	add	r4, sp, #36	; 0x24
   1b940:	add	r7, sp, #32
   1b944:	add	r5, sp, #28
   1b948:	ldr	r0, [sp, #20]
   1b94c:	mov	r1, r4
   1b950:	mov	r2, r7
   1b954:	mov	r3, r5
   1b958:	str	r8, [sp, #28]
   1b95c:	str	sl, [sp, #24]
   1b960:	str	r9, [sp]
   1b964:	bl	116a4 <iconv@plt>
   1b968:	cmn	r0, #1
   1b96c:	bne	1b980 <__assert_fail@plt+0x9f04>
   1b970:	bl	11908 <__errno_location@plt>
   1b974:	ldr	r0, [r0]
   1b978:	cmp	r0, #7
   1b97c:	bne	1b9e8 <__assert_fail@plt+0x9f6c>
   1b980:	ldr	r1, [sp, #28]
   1b984:	sub	r0, r6, r8
   1b988:	add	r6, r0, r1
   1b98c:	ldr	r0, [sp, #32]
   1b990:	cmp	r0, #0
   1b994:	bne	1b948 <__assert_fail@plt+0x9ecc>
   1b998:	mov	r0, #4096	; 0x1000
   1b99c:	add	r4, sp, #40	; 0x28
   1b9a0:	add	r3, sp, #28
   1b9a4:	mov	r1, #0
   1b9a8:	mov	r2, #0
   1b9ac:	str	r0, [sp, #24]
   1b9b0:	add	r0, sp, #24
   1b9b4:	str	r4, [sp, #28]
   1b9b8:	str	r0, [sp]
   1b9bc:	ldr	r0, [sp, #20]
   1b9c0:	bl	116a4 <iconv@plt>
   1b9c4:	cmn	r0, #1
   1b9c8:	beq	1b9e0 <__assert_fail@plt+0x9f64>
   1b9cc:	ldr	r1, [sp, #28]
   1b9d0:	sub	r0, r6, r4
   1b9d4:	add	r6, r0, r1
   1b9d8:	mov	r0, #1
   1b9dc:	b	1b9f4 <__assert_fail@plt+0x9f78>
   1b9e0:	mov	r0, #0
   1b9e4:	b	1b9f4 <__assert_fail@plt+0x9f78>
   1b9e8:	cmp	r0, #22
   1b9ec:	beq	1b998 <__assert_fail@plt+0x9f1c>
   1b9f0:	mov	r0, #0
   1b9f4:	mvn	r9, #0
   1b9f8:	cmp	r0, #0
   1b9fc:	beq	1bb48 <__assert_fail@plt+0xa0cc>
   1ba00:	ldr	r1, [fp, #8]
   1ba04:	cmp	r6, #0
   1ba08:	beq	1babc <__assert_fail@plt+0xa040>
   1ba0c:	ldr	r0, [sp, #16]
   1ba10:	ldr	r4, [r0]
   1ba14:	cmp	r4, #0
   1ba18:	beq	1ba28 <__assert_fail@plt+0x9fac>
   1ba1c:	ldr	r0, [r1]
   1ba20:	cmp	r0, r6
   1ba24:	bcs	1ba3c <__assert_fail@plt+0x9fc0>
   1ba28:	mov	r0, r6
   1ba2c:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1ba30:	mov	r4, r0
   1ba34:	cmp	r0, #0
   1ba38:	beq	1bac8 <__assert_fail@plt+0xa04c>
   1ba3c:	mov	r0, #0
   1ba40:	mov	r1, #0
   1ba44:	mov	r2, #0
   1ba48:	mov	r3, #0
   1ba4c:	str	r0, [sp]
   1ba50:	ldr	r0, [sp, #20]
   1ba54:	bl	116a4 <iconv@plt>
   1ba58:	ldr	r0, [sp, #8]
   1ba5c:	mov	sl, r4
   1ba60:	str	r4, [sp, #32]
   1ba64:	str	r6, [sp, #28]
   1ba68:	str	r0, [sp, #40]	; 0x28
   1ba6c:	ldr	r0, [sp, #12]
   1ba70:	cmp	r0, #0
   1ba74:	str	r0, [sp, #36]	; 0x24
   1ba78:	beq	1bae8 <__assert_fail@plt+0xa06c>
   1ba7c:	add	r8, sp, #28
   1ba80:	add	r5, sp, #40	; 0x28
   1ba84:	add	r7, sp, #36	; 0x24
   1ba88:	add	r4, sp, #32
   1ba8c:	ldr	r0, [sp, #20]
   1ba90:	mov	r1, r5
   1ba94:	mov	r2, r7
   1ba98:	mov	r3, r4
   1ba9c:	str	r8, [sp]
   1baa0:	bl	116a4 <iconv@plt>
   1baa4:	cmn	r0, #1
   1baa8:	beq	1bad8 <__assert_fail@plt+0xa05c>
   1baac:	ldr	r0, [sp, #36]	; 0x24
   1bab0:	cmp	r0, #0
   1bab4:	bne	1ba8c <__assert_fail@plt+0xa010>
   1bab8:	b	1bae8 <__assert_fail@plt+0xa06c>
   1babc:	mov	r9, #0
   1bac0:	str	r9, [r1]
   1bac4:	b	1bb48 <__assert_fail@plt+0xa0cc>
   1bac8:	bl	11908 <__errno_location@plt>
   1bacc:	mov	r1, #12
   1bad0:	str	r1, [r0]
   1bad4:	b	1bb48 <__assert_fail@plt+0xa0cc>
   1bad8:	bl	11908 <__errno_location@plt>
   1badc:	ldr	r0, [r0]
   1bae0:	cmp	r0, #22
   1bae4:	bne	1bb30 <__assert_fail@plt+0xa0b4>
   1bae8:	add	r0, sp, #28
   1baec:	add	r3, sp, #32
   1baf0:	mov	r1, #0
   1baf4:	mov	r2, #0
   1baf8:	str	r0, [sp]
   1bafc:	ldr	r0, [sp, #20]
   1bb00:	bl	116a4 <iconv@plt>
   1bb04:	cmn	r0, #1
   1bb08:	beq	1bb30 <__assert_fail@plt+0xa0b4>
   1bb0c:	ldr	r0, [sp, #28]
   1bb10:	cmp	r0, #0
   1bb14:	bne	1bb54 <__assert_fail@plt+0xa0d8>
   1bb18:	ldr	r0, [sp, #16]
   1bb1c:	mov	r9, #0
   1bb20:	str	sl, [r0]
   1bb24:	ldr	r0, [fp, #8]
   1bb28:	str	r6, [r0]
   1bb2c:	b	1bb48 <__assert_fail@plt+0xa0cc>
   1bb30:	ldr	r0, [sp, #16]
   1bb34:	ldr	r1, [r0]
   1bb38:	cmp	sl, r1
   1bb3c:	beq	1bb48 <__assert_fail@plt+0xa0cc>
   1bb40:	mov	r0, sl
   1bb44:	bl	174f4 <__assert_fail@plt+0x5a78>
   1bb48:	mov	r0, r9
   1bb4c:	sub	sp, fp, #28
   1bb50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb54:	bl	11a64 <abort@plt>
   1bb58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb5c:	add	fp, sp, #28
   1bb60:	sub	sp, sp, #20
   1bb64:	mov	r8, r1
   1bb68:	str	r0, [sp, #16]
   1bb6c:	bl	118d8 <strlen@plt>
   1bb70:	cmp	r0, #4096	; 0x1000
   1bb74:	mov	r5, r0
   1bb78:	str	r0, [sp, #12]
   1bb7c:	lslcc	r5, r0, #4
   1bb80:	add	r4, r5, #1
   1bb84:	mov	r0, r4
   1bb88:	bl	1a678 <__assert_fail@plt+0x8bfc>
   1bb8c:	cmp	r0, #0
   1bb90:	beq	1bc3c <__assert_fail@plt+0xa1c0>
   1bb94:	mov	r7, r0
   1bb98:	mov	r0, #0
   1bb9c:	mov	r1, #0
   1bba0:	mov	r2, #0
   1bba4:	mov	r3, #0
   1bba8:	str	r0, [sp]
   1bbac:	mov	r0, r8
   1bbb0:	bl	116a4 <iconv@plt>
   1bbb4:	stmib	sp, {r5, r7}
   1bbb8:	add	r5, sp, #4
   1bbbc:	add	r1, sp, #16
   1bbc0:	add	r2, sp, #12
   1bbc4:	add	r3, sp, #8
   1bbc8:	mov	r0, r8
   1bbcc:	str	r5, [sp]
   1bbd0:	bl	116a4 <iconv@plt>
   1bbd4:	cmn	r0, #1
   1bbd8:	beq	1bc4c <__assert_fail@plt+0xa1d0>
   1bbdc:	mov	r6, r7
   1bbe0:	add	r3, sp, #8
   1bbe4:	mov	r0, r8
   1bbe8:	mov	r1, #0
   1bbec:	mov	r2, #0
   1bbf0:	str	r5, [sp]
   1bbf4:	bl	116a4 <iconv@plt>
   1bbf8:	cmn	r0, #1
   1bbfc:	beq	1bccc <__assert_fail@plt+0xa250>
   1bc00:	mov	r5, r6
   1bc04:	ldr	r0, [sp, #8]
   1bc08:	add	r1, r0, #1
   1bc0c:	str	r1, [sp, #8]
   1bc10:	mov	r1, #0
   1bc14:	strb	r1, [r0]
   1bc18:	ldr	r0, [sp, #8]
   1bc1c:	sub	r1, r0, r5
   1bc20:	cmp	r1, r4
   1bc24:	bcs	1bd50 <__assert_fail@plt+0xa2d4>
   1bc28:	mov	r0, r5
   1bc2c:	bl	1a6a8 <__assert_fail@plt+0x8c2c>
   1bc30:	cmp	r0, #0
   1bc34:	moveq	r0, r5
   1bc38:	b	1bd7c <__assert_fail@plt+0xa300>
   1bc3c:	bl	11908 <__errno_location@plt>
   1bc40:	mov	r1, #12
   1bc44:	str	r1, [r0]
   1bc48:	b	1bd78 <__assert_fail@plt+0xa2fc>
   1bc4c:	bl	11908 <__errno_location@plt>
   1bc50:	mov	r9, r0
   1bc54:	ldr	r0, [r9]
   1bc58:	cmp	r0, #7
   1bc5c:	bne	1bd84 <__assert_fail@plt+0xa308>
   1bc60:	cmp	r4, r4, lsl #1
   1bc64:	bcs	1bd58 <__assert_fail@plt+0xa2dc>
   1bc68:	ldr	sl, [sp, #8]
   1bc6c:	lsl	r4, r4, #1
   1bc70:	mov	r0, r7
   1bc74:	mov	r1, r4
   1bc78:	bl	1a6a8 <__assert_fail@plt+0x8c2c>
   1bc7c:	cmp	r0, #0
   1bc80:	beq	1bd58 <__assert_fail@plt+0xa2dc>
   1bc84:	mov	r6, r0
   1bc88:	sub	r0, sl, r7
   1bc8c:	add	r5, sp, #4
   1bc90:	add	r2, sp, #12
   1bc94:	add	r3, sp, #8
   1bc98:	add	r1, r6, r0
   1bc9c:	mvn	r0, r0
   1bca0:	str	r5, [sp]
   1bca4:	add	r0, r4, r0
   1bca8:	str	r1, [sp, #8]
   1bcac:	add	r1, sp, #16
   1bcb0:	str	r0, [sp, #4]
   1bcb4:	mov	r0, r8
   1bcb8:	bl	116a4 <iconv@plt>
   1bcbc:	cmn	r0, #1
   1bcc0:	mov	r7, r6
   1bcc4:	beq	1bc54 <__assert_fail@plt+0xa1d8>
   1bcc8:	b	1bbe0 <__assert_fail@plt+0xa164>
   1bccc:	bl	11908 <__errno_location@plt>
   1bcd0:	mov	r7, r0
   1bcd4:	add	r9, sp, #8
   1bcd8:	ldr	r0, [r7]
   1bcdc:	cmp	r0, #7
   1bce0:	bne	1bd6c <__assert_fail@plt+0xa2f0>
   1bce4:	cmp	r4, r4, lsl #1
   1bce8:	bcs	1bd64 <__assert_fail@plt+0xa2e8>
   1bcec:	ldr	sl, [sp, #8]
   1bcf0:	lsl	r4, r4, #1
   1bcf4:	mov	r0, r6
   1bcf8:	mov	r1, r4
   1bcfc:	bl	1a6a8 <__assert_fail@plt+0x8c2c>
   1bd00:	cmp	r0, #0
   1bd04:	beq	1bd64 <__assert_fail@plt+0xa2e8>
   1bd08:	mov	r5, r0
   1bd0c:	sub	r0, sl, r6
   1bd10:	mov	r2, #0
   1bd14:	mov	r3, r9
   1bd18:	add	r1, r5, r0
   1bd1c:	mvn	r0, r0
   1bd20:	add	r0, r4, r0
   1bd24:	str	r1, [sp, #8]
   1bd28:	mov	r1, #0
   1bd2c:	str	r0, [sp, #4]
   1bd30:	add	r0, sp, #4
   1bd34:	str	r0, [sp]
   1bd38:	mov	r0, r8
   1bd3c:	bl	116a4 <iconv@plt>
   1bd40:	cmn	r0, #1
   1bd44:	mov	r6, r5
   1bd48:	beq	1bcd8 <__assert_fail@plt+0xa25c>
   1bd4c:	b	1bc04 <__assert_fail@plt+0xa188>
   1bd50:	mov	r0, r5
   1bd54:	b	1bd7c <__assert_fail@plt+0xa300>
   1bd58:	mov	r0, #12
   1bd5c:	str	r0, [r9]
   1bd60:	b	1bd70 <__assert_fail@plt+0xa2f4>
   1bd64:	mov	r0, #12
   1bd68:	str	r0, [r7]
   1bd6c:	mov	r7, r6
   1bd70:	mov	r0, r7
   1bd74:	bl	174f4 <__assert_fail@plt+0x5a78>
   1bd78:	mov	r0, #0
   1bd7c:	sub	sp, fp, #28
   1bd80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd84:	cmp	r0, #22
   1bd88:	beq	1bbdc <__assert_fail@plt+0xa160>
   1bd8c:	b	1bd70 <__assert_fail@plt+0xa2f4>
   1bd90:	push	{r4, r5, r6, r7, fp, lr}
   1bd94:	add	fp, sp, #16
   1bd98:	mov	r5, r0
   1bd9c:	ldrb	r0, [r0]
   1bda0:	cmp	r0, #0
   1bda4:	beq	1be10 <__assert_fail@plt+0xa394>
   1bda8:	mov	r4, r1
   1bdac:	mov	r0, r1
   1bdb0:	mov	r1, r2
   1bdb4:	mov	r6, r2
   1bdb8:	bl	1a6f8 <__assert_fail@plt+0x8c7c>
   1bdbc:	cmp	r0, #0
   1bdc0:	beq	1be10 <__assert_fail@plt+0xa394>
   1bdc4:	mov	r0, r6
   1bdc8:	mov	r1, r4
   1bdcc:	bl	11854 <iconv_open@plt>
   1bdd0:	mov	r4, #0
   1bdd4:	cmn	r0, #1
   1bdd8:	beq	1be5c <__assert_fail@plt+0xa3e0>
   1bddc:	mov	r6, r0
   1bde0:	mov	r0, r5
   1bde4:	mov	r1, r6
   1bde8:	bl	1bb58 <__assert_fail@plt+0xa0dc>
   1bdec:	cmp	r0, #0
   1bdf0:	beq	1be38 <__assert_fail@plt+0xa3bc>
   1bdf4:	mov	r5, r0
   1bdf8:	mov	r0, r6
   1bdfc:	bl	11698 <iconv_close@plt>
   1be00:	cmn	r0, #1
   1be04:	ble	1be54 <__assert_fail@plt+0xa3d8>
   1be08:	mov	r4, r5
   1be0c:	b	1be5c <__assert_fail@plt+0xa3e0>
   1be10:	mov	r0, r5
   1be14:	bl	11764 <strdup@plt>
   1be18:	mov	r4, r0
   1be1c:	cmp	r0, #0
   1be20:	bne	1be5c <__assert_fail@plt+0xa3e0>
   1be24:	bl	11908 <__errno_location@plt>
   1be28:	mov	r1, #12
   1be2c:	mov	r4, #0
   1be30:	str	r1, [r0]
   1be34:	b	1be5c <__assert_fail@plt+0xa3e0>
   1be38:	bl	11908 <__errno_location@plt>
   1be3c:	ldr	r7, [r0]
   1be40:	mov	r5, r0
   1be44:	mov	r0, r6
   1be48:	bl	11698 <iconv_close@plt>
   1be4c:	str	r7, [r5]
   1be50:	b	1be5c <__assert_fail@plt+0xa3e0>
   1be54:	mov	r0, r5
   1be58:	bl	174f4 <__assert_fail@plt+0x5a78>
   1be5c:	mov	r0, r4
   1be60:	pop	{r4, r5, r6, r7, fp, pc}
   1be64:	push	{r4, r5, fp, lr}
   1be68:	add	fp, sp, #8
   1be6c:	mov	r4, r1
   1be70:	mov	r1, #0
   1be74:	mov	r5, r0
   1be78:	mov	r2, r4
   1be7c:	bl	11980 <memchr@plt>
   1be80:	sub	r1, r0, r5
   1be84:	cmp	r0, #0
   1be88:	addne	r4, r1, #1
   1be8c:	mov	r0, r4
   1be90:	pop	{r4, r5, fp, pc}
   1be94:	push	{r4, sl, fp, lr}
   1be98:	add	fp, sp, #8
   1be9c:	sub	sp, sp, #264	; 0x108
   1bea0:	add	r1, sp, #7
   1bea4:	movw	r2, #257	; 0x101
   1bea8:	bl	1c0f8 <__assert_fail@plt+0xa67c>
   1beac:	mov	r4, #0
   1beb0:	cmp	r0, #0
   1beb4:	bne	1bef4 <__assert_fail@plt+0xa478>
   1beb8:	movw	r1, #65400	; 0xff78
   1bebc:	add	r0, sp, #7
   1bec0:	mov	r2, #2
   1bec4:	movt	r1, #1
   1bec8:	bl	118cc <bcmp@plt>
   1becc:	cmp	r0, #0
   1bed0:	beq	1bef4 <__assert_fail@plt+0xa478>
   1bed4:	movw	r1, #65402	; 0xff7a
   1bed8:	add	r0, sp, #7
   1bedc:	mov	r2, #6
   1bee0:	movt	r1, #1
   1bee4:	bl	118cc <bcmp@plt>
   1bee8:	cmp	r0, #0
   1beec:	mov	r4, r0
   1bef0:	movwne	r4, #1
   1bef4:	mov	r0, r4
   1bef8:	sub	sp, fp, #8
   1befc:	pop	{r4, sl, fp, pc}
   1bf00:	push	{r4, sl, fp, lr}
   1bf04:	add	fp, sp, #8
   1bf08:	mov	r4, #0
   1bf0c:	adds	r0, r0, #16
   1bf10:	adc	r1, r4, #0
   1bf14:	rsb	r2, r1, #0
   1bf18:	eors	r2, r2, r1
   1bf1c:	movwne	r2, #1
   1bf20:	cmp	r0, #0
   1bf24:	bmi	1bf60 <__assert_fail@plt+0xa4e4>
   1bf28:	cmp	r2, #0
   1bf2c:	asreq	r2, r0, #31
   1bf30:	eoreq	r3, r0, r0
   1bf34:	andeq	r2, r2, #1
   1bf38:	eoreq	r1, r1, r2
   1bf3c:	orrseq	r1, r3, r1
   1bf40:	bne	1bf60 <__assert_fail@plt+0xa4e4>
   1bf44:	bl	11848 <malloc@plt>
   1bf48:	cmp	r0, #0
   1bf4c:	addne	r4, r0, #8
   1bf50:	movne	r1, #8
   1bf54:	bfine	r4, r1, #0, #4
   1bf58:	subne	r0, r4, r0
   1bf5c:	strbne	r0, [r4, #-1]
   1bf60:	mov	r0, r4
   1bf64:	pop	{r4, sl, fp, pc}
   1bf68:	push	{fp, lr}
   1bf6c:	mov	fp, sp
   1bf70:	tst	r0, #7
   1bf74:	bne	1bf90 <__assert_fail@plt+0xa514>
   1bf78:	tst	r0, #8
   1bf7c:	popeq	{fp, pc}
   1bf80:	ldrb	r1, [r0, #-1]
   1bf84:	sub	r0, r0, r1
   1bf88:	pop	{fp, lr}
   1bf8c:	b	174f4 <__assert_fail@plt+0x5a78>
   1bf90:	bl	11a64 <abort@plt>
   1bf94:	push	{r4, sl, fp, lr}
   1bf98:	add	fp, sp, #8
   1bf9c:	mov	r4, r0
   1bfa0:	bl	116e0 <wcwidth@plt>
   1bfa4:	cmn	r0, #1
   1bfa8:	popgt	{r4, sl, fp, pc}
   1bfac:	mov	r0, r4
   1bfb0:	bl	117c4 <iswcntrl@plt>
   1bfb4:	clz	r0, r0
   1bfb8:	lsr	r0, r0, #5
   1bfbc:	pop	{r4, sl, fp, pc}
   1bfc0:	push	{r4, r5, r6, sl, fp, lr}
   1bfc4:	add	fp, sp, #16
   1bfc8:	mov	r4, r0
   1bfcc:	mov	r0, r1
   1bfd0:	mov	r5, r1
   1bfd4:	ldr	r1, [r0], #16
   1bfd8:	cmp	r1, r0
   1bfdc:	beq	1bfe8 <__assert_fail@plt+0xa56c>
   1bfe0:	mov	r6, r1
   1bfe4:	b	1bff8 <__assert_fail@plt+0xa57c>
   1bfe8:	ldr	r2, [r5, #4]
   1bfec:	add	r6, r4, #16
   1bff0:	mov	r0, r6
   1bff4:	bl	1171c <memcpy@plt>
   1bff8:	str	r6, [r4]
   1bffc:	ldr	r0, [r5, #4]
   1c000:	str	r0, [r4, #4]
   1c004:	ldrb	r0, [r5, #8]
   1c008:	strb	r0, [r4, #8]
   1c00c:	cmp	r0, #0
   1c010:	ldrne	r0, [r5, #12]
   1c014:	strne	r0, [r4, #12]
   1c018:	pop	{r4, r5, r6, sl, fp, pc}
   1c01c:	movw	r2, #65408	; 0xff80
   1c020:	ubfx	r1, r0, #5, #3
   1c024:	and	r0, r0, #31
   1c028:	movt	r2, #1
   1c02c:	ldr	r1, [r2, r1, lsl #2]
   1c030:	mov	r2, #1
   1c034:	and	r0, r1, r2, lsl r0
   1c038:	cmp	r0, #0
   1c03c:	movwne	r0, #1
   1c040:	bx	lr
   1c044:	push	{r4, r5, r6, sl, fp, lr}
   1c048:	add	fp, sp, #16
   1c04c:	sub	sp, sp, #56	; 0x38
   1c050:	mov	r5, r0
   1c054:	bl	1180c <__ctype_get_mb_cur_max@plt>
   1c058:	cmp	r0, #2
   1c05c:	bcc	1c0e8 <__assert_fail@plt+0xa66c>
   1c060:	mov	r4, #0
   1c064:	mov	r0, sp
   1c068:	str	r4, [sp, #8]
   1c06c:	str	r4, [sp, #4]
   1c070:	strb	r4, [sp, #12]
   1c074:	strb	r4, [sp]
   1c078:	str	r5, [sp, #16]
   1c07c:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1c080:	ldrb	r0, [sp, #24]
   1c084:	cmp	r0, #0
   1c088:	beq	1c098 <__assert_fail@plt+0xa61c>
   1c08c:	ldr	r0, [sp, #28]
   1c090:	cmp	r0, #0
   1c094:	beq	1c0dc <__assert_fail@plt+0xa660>
   1c098:	mov	r6, #0
   1c09c:	mov	r5, sp
   1c0a0:	mov	r4, #0
   1c0a4:	strb	r6, [sp, #12]
   1c0a8:	ldr	r0, [sp, #16]
   1c0ac:	ldr	r1, [sp, #20]
   1c0b0:	add	r0, r0, r1
   1c0b4:	str	r0, [sp, #16]
   1c0b8:	mov	r0, r5
   1c0bc:	bl	1b674 <__assert_fail@plt+0x9bf8>
   1c0c0:	ldrb	r1, [sp, #24]
   1c0c4:	ldr	r0, [sp, #28]
   1c0c8:	add	r4, r4, #1
   1c0cc:	cmp	r1, #0
   1c0d0:	beq	1c0a4 <__assert_fail@plt+0xa628>
   1c0d4:	cmp	r0, #0
   1c0d8:	bne	1c0a4 <__assert_fail@plt+0xa628>
   1c0dc:	mov	r0, r4
   1c0e0:	sub	sp, fp, #16
   1c0e4:	pop	{r4, r5, r6, sl, fp, pc}
   1c0e8:	mov	r0, r5
   1c0ec:	sub	sp, fp, #16
   1c0f0:	pop	{r4, r5, r6, sl, fp, lr}
   1c0f4:	b	118d8 <strlen@plt>
   1c0f8:	push	{r4, r5, r6, r7, fp, lr}
   1c0fc:	add	fp, sp, #16
   1c100:	mov	r4, r1
   1c104:	mov	r1, #0
   1c108:	mov	r6, r2
   1c10c:	bl	119d4 <setlocale@plt>
   1c110:	cmp	r0, #0
   1c114:	beq	1c140 <__assert_fail@plt+0xa6c4>
   1c118:	mov	r7, r0
   1c11c:	bl	118d8 <strlen@plt>
   1c120:	cmp	r0, r6
   1c124:	bcs	1c154 <__assert_fail@plt+0xa6d8>
   1c128:	add	r2, r0, #1
   1c12c:	mov	r0, r4
   1c130:	mov	r1, r7
   1c134:	bl	1171c <memcpy@plt>
   1c138:	mov	r5, #0
   1c13c:	b	1c17c <__assert_fail@plt+0xa700>
   1c140:	cmp	r6, #0
   1c144:	mov	r5, #22
   1c148:	movne	r0, #0
   1c14c:	strbne	r0, [r4]
   1c150:	b	1c17c <__assert_fail@plt+0xa700>
   1c154:	mov	r5, #34	; 0x22
   1c158:	cmp	r6, #0
   1c15c:	beq	1c17c <__assert_fail@plt+0xa700>
   1c160:	sub	r6, r6, #1
   1c164:	mov	r0, r4
   1c168:	mov	r1, r7
   1c16c:	mov	r2, r6
   1c170:	bl	1171c <memcpy@plt>
   1c174:	mov	r0, #0
   1c178:	strb	r0, [r4, r6]
   1c17c:	mov	r0, r5
   1c180:	pop	{r4, r5, r6, r7, fp, pc}
   1c184:	mov	r1, #0
   1c188:	b	119d4 <setlocale@plt>
   1c18c:	cmp	r3, #0
   1c190:	cmpeq	r2, #0
   1c194:	bne	1c1ac <__assert_fail@plt+0xa730>
   1c198:	cmp	r1, #0
   1c19c:	cmpeq	r0, #0
   1c1a0:	mvnne	r1, #0
   1c1a4:	mvnne	r0, #0
   1c1a8:	b	1c1c8 <__assert_fail@plt+0xa74c>
   1c1ac:	sub	sp, sp, #8
   1c1b0:	push	{sp, lr}
   1c1b4:	bl	1c1d8 <__assert_fail@plt+0xa75c>
   1c1b8:	ldr	lr, [sp, #4]
   1c1bc:	add	sp, sp, #8
   1c1c0:	pop	{r2, r3}
   1c1c4:	bx	lr
   1c1c8:	push	{r1, lr}
   1c1cc:	mov	r0, #8
   1c1d0:	bl	11680 <raise@plt>
   1c1d4:	pop	{r1, pc}
   1c1d8:	cmp	r1, r3
   1c1dc:	cmpeq	r0, r2
   1c1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1e4:	mov	r4, r0
   1c1e8:	movcc	r0, #0
   1c1ec:	mov	r5, r1
   1c1f0:	ldr	lr, [sp, #36]	; 0x24
   1c1f4:	movcc	r1, r0
   1c1f8:	bcc	1c2f4 <__assert_fail@plt+0xa878>
   1c1fc:	cmp	r3, #0
   1c200:	clzeq	ip, r2
   1c204:	clzne	ip, r3
   1c208:	addeq	ip, ip, #32
   1c20c:	cmp	r5, #0
   1c210:	clzeq	r1, r4
   1c214:	addeq	r1, r1, #32
   1c218:	clzne	r1, r5
   1c21c:	sub	ip, ip, r1
   1c220:	sub	sl, ip, #32
   1c224:	lsl	r9, r3, ip
   1c228:	rsb	fp, ip, #32
   1c22c:	orr	r9, r9, r2, lsl sl
   1c230:	orr	r9, r9, r2, lsr fp
   1c234:	lsl	r8, r2, ip
   1c238:	cmp	r5, r9
   1c23c:	cmpeq	r4, r8
   1c240:	movcc	r0, #0
   1c244:	movcc	r1, r0
   1c248:	bcc	1c264 <__assert_fail@plt+0xa7e8>
   1c24c:	mov	r0, #1
   1c250:	subs	r4, r4, r8
   1c254:	lsl	r1, r0, sl
   1c258:	orr	r1, r1, r0, lsr fp
   1c25c:	lsl	r0, r0, ip
   1c260:	sbc	r5, r5, r9
   1c264:	cmp	ip, #0
   1c268:	beq	1c2f4 <__assert_fail@plt+0xa878>
   1c26c:	lsr	r6, r8, #1
   1c270:	orr	r6, r6, r9, lsl #31
   1c274:	lsr	r7, r9, #1
   1c278:	mov	r2, ip
   1c27c:	b	1c2a0 <__assert_fail@plt+0xa824>
   1c280:	subs	r3, r4, r6
   1c284:	sbc	r8, r5, r7
   1c288:	adds	r3, r3, r3
   1c28c:	adc	r8, r8, r8
   1c290:	adds	r4, r3, #1
   1c294:	adc	r5, r8, #0
   1c298:	subs	r2, r2, #1
   1c29c:	beq	1c2bc <__assert_fail@plt+0xa840>
   1c2a0:	cmp	r5, r7
   1c2a4:	cmpeq	r4, r6
   1c2a8:	bcs	1c280 <__assert_fail@plt+0xa804>
   1c2ac:	adds	r4, r4, r4
   1c2b0:	adc	r5, r5, r5
   1c2b4:	subs	r2, r2, #1
   1c2b8:	bne	1c2a0 <__assert_fail@plt+0xa824>
   1c2bc:	lsr	r3, r4, ip
   1c2c0:	orr	r3, r3, r5, lsl fp
   1c2c4:	lsr	r2, r5, ip
   1c2c8:	orr	r3, r3, r5, lsr sl
   1c2cc:	adds	r0, r0, r4
   1c2d0:	mov	r4, r3
   1c2d4:	lsl	r3, r2, ip
   1c2d8:	orr	r3, r3, r4, lsl sl
   1c2dc:	lsl	ip, r4, ip
   1c2e0:	orr	r3, r3, r4, lsr fp
   1c2e4:	adc	r1, r1, r5
   1c2e8:	subs	r0, r0, ip
   1c2ec:	mov	r5, r2
   1c2f0:	sbc	r1, r1, r3
   1c2f4:	cmp	lr, #0
   1c2f8:	strdne	r4, [lr]
   1c2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c300:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c304:	mov	r7, r0
   1c308:	ldr	r6, [pc, #72]	; 1c358 <__assert_fail@plt+0xa8dc>
   1c30c:	ldr	r5, [pc, #72]	; 1c35c <__assert_fail@plt+0xa8e0>
   1c310:	add	r6, pc, r6
   1c314:	add	r5, pc, r5
   1c318:	sub	r6, r6, r5
   1c31c:	mov	r8, r1
   1c320:	mov	r9, r2
   1c324:	bl	11648 <calloc@plt-0x20>
   1c328:	asrs	r6, r6, #2
   1c32c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c330:	mov	r4, #0
   1c334:	add	r4, r4, #1
   1c338:	ldr	r3, [r5], #4
   1c33c:	mov	r2, r9
   1c340:	mov	r1, r8
   1c344:	mov	r0, r7
   1c348:	blx	r3
   1c34c:	cmp	r6, r4
   1c350:	bne	1c334 <__assert_fail@plt+0xa8b8>
   1c354:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c358:	andeq	r4, r1, ip, ror #23
   1c35c:	andeq	r4, r1, r4, ror #23
   1c360:	bx	lr
   1c364:	ldr	r3, [pc, #12]	; 1c378 <__assert_fail@plt+0xa8fc>
   1c368:	mov	r1, #0
   1c36c:	add	r3, pc, r3
   1c370:	ldr	r2, [r3]
   1c374:	b	1192c <__cxa_atexit@plt>
   1c378:	andeq	r4, r1, r0, lsl #28

Disassembly of section .fini:

0001c37c <.fini>:
   1c37c:	push	{r3, lr}
   1c380:	pop	{r3, pc}
