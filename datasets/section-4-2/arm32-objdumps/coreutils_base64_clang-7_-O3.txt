
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r8, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <memcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <dcgettext@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <realloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <textdomain@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <iswprint@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <fwrite@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <lseek64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__ctype_get_mb_cur_max@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <__fpending@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <mbrtowc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <error@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <getopt_long@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <__ctype_b_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f44 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r7, r1, ip, lsr r4
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	ldrdeq	r7, [r1], -ip
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f5c <__gmon_start__@plt>
   110ec:	andeq	r7, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r9, r2, r0, lsr r1
   11118:	andeq	r9, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r9, r2, r0, lsr r1
   11150:	andeq	r9, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r9, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #29835	; 0x748b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10ec0 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #37216	; 0x9160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #29865	; 0x74a9
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10ec0 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #64	; 0x40
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #30655	; 0x77bf
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10ec0 <dcgettext@plt>
   11200:	movw	r7, #37196	; 0x914c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #30711	; 0x77f7
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10ec0 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #29935	; 0x74ef
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ec0 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #30177	; 0x75e1
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10ec0 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #30222	; 0x760e
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10ec0 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #30276	; 0x7644
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ec0 <dcgettext@plt>
   11294:	movw	r5, #30544	; 0x7750
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #31296	; 0x7a40
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	add	r1, r6, #32
   112d8:	vldr	d22, [r0]
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #30786	; 0x7842
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	vst1.64	{d18-d19}, [r0], r2
   112f4:	movt	r1, #1
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	ldr	r6, [r6, #4]
   11318:	movw	r1, #30881	; 0x78a1
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10ec0 <dcgettext@plt>
   1132c:	movw	r2, #30605	; 0x778d
   11330:	movw	r3, #30904	; 0x78b8
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #30944	; 0x78e0
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #30948	; 0x78e4
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ec0 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #31019	; 0x792b
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10ec0 <dcgettext@plt>
   113ac:	movw	r2, #30904	; 0x78b8
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #31046	; 0x7946
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10ec0 <dcgettext@plt>
   113d8:	movw	r3, #31096	; 0x7978
   113dc:	mov	r1, r0
   113e0:	movw	r0, #30814	; 0x785e
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f80 <exit@plt>
   11408:	movw	r0, #37184	; 0x9140
   1140c:	movw	r1, #29796	; 0x7464
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10ec0 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #37216	; 0x9160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f80 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	12904 <__assert_fail@plt+0x187c>
   11468:	movw	r1, #31096	; 0x7978
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #30609	; 0x7791
   1147c:	movw	r1, #30551	; 0x7757
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ed8 <textdomain@plt>
   11498:	movw	r0, #9736	; 0x2608
   1149c:	movt	r0, #1
   114a0:	bl	17440 <__assert_fail@plt+0x63b8>
   114a4:	movw	r9, #30575	; 0x776f
   114a8:	movw	r7, #31200	; 0x79e0
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	b	114cc <__assert_fail@plt+0x444>
   114c8:	mov	r0, #1
   114cc:	str	r0, [sp, #12]
   114d0:	b	114d8 <__assert_fail@plt+0x450>
   114d4:	mov	sl, #1
   114d8:	mov	r0, r5
   114dc:	mov	r1, r4
   114e0:	mov	r2, r9
   114e4:	mov	r3, r7
   114e8:	str	r8, [sp]
   114ec:	bl	10f68 <getopt_long@plt>
   114f0:	cmp	r0, #99	; 0x63
   114f4:	ble	1156c <__assert_fail@plt+0x4e4>
   114f8:	cmp	r0, #100	; 0x64
   114fc:	beq	114d4 <__assert_fail@plt+0x44c>
   11500:	cmp	r0, #105	; 0x69
   11504:	beq	114c8 <__assert_fail@plt+0x440>
   11508:	cmp	r0, #119	; 0x77
   1150c:	bne	1173c <__assert_fail@plt+0x6b4>
   11510:	movw	r0, #37200	; 0x9150
   11514:	movw	r1, #31096	; 0x7978
   11518:	mov	r2, #10
   1151c:	add	r3, sp, #16
   11520:	movt	r0, #2
   11524:	movt	r1, #1
   11528:	ldr	r0, [r0]
   1152c:	str	r1, [sp]
   11530:	mov	r1, #0
   11534:	bl	154fc <__assert_fail@plt+0x4474>
   11538:	cmp	r0, #1
   1153c:	bhi	116f8 <__assert_fail@plt+0x670>
   11540:	ldr	r1, [sp, #20]
   11544:	cmn	r1, #1
   11548:	ble	116f8 <__assert_fail@plt+0x670>
   1154c:	ldr	r2, [sp, #16]
   11550:	mvn	r3, #-2147483648	; 0x80000000
   11554:	subs	r3, r3, r2
   11558:	rscs	r1, r1, #0
   1155c:	movwlt	r2, #0
   11560:	subs	r6, r0, #1
   11564:	movne	r6, r2
   11568:	b	114d8 <__assert_fail@plt+0x450>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #37096	; 0x90e8
   11588:	movw	r2, #30619	; 0x779b
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #30544	; 0x7750
   115a0:	ldr	r3, [r0]
   115a4:	movw	r0, #37196	; 0x914c
   115a8:	str	r2, [sp]
   115ac:	movw	r2, #30605	; 0x778d
   115b0:	movt	r1, #1
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	14d24 <__assert_fail@plt+0x3c9c>
   115c4:	mov	r0, #0
   115c8:	bl	10f80 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	1173c <__assert_fail@plt+0x6b4>
   115d4:	movw	r7, #37176	; 0x9138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #30635	; 0x77ab
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10ec0 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	14880 <__assert_fail@plt+0x37f8>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f2c <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	movw	r1, #31753	; 0x7c09
   11638:	ldrlt	r4, [r4, r0, lsl #2]
   1163c:	movt	r1, #1
   11640:	movwge	r4, #31753	; 0x7c09
   11644:	movtge	r4, #1
   11648:	mov	r0, r4
   1164c:	bl	10e48 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	bne	11668 <__assert_fail@plt+0x5e0>
   11658:	movw	r0, #37192	; 0x9148
   1165c:	movt	r0, #2
   11660:	ldr	r5, [r0]
   11664:	b	116b4 <__assert_fail@plt+0x62c>
   11668:	movw	r1, #30652	; 0x77bc
   1166c:	mov	r0, r4
   11670:	movt	r1, #1
   11674:	bl	1104c <fopen64@plt>
   11678:	mov	r5, r0
   1167c:	cmp	r0, #0
   11680:	bne	116b4 <__assert_fail@plt+0x62c>
   11684:	bl	10fa4 <__errno_location@plt>
   11688:	ldr	r5, [r0]
   1168c:	mov	r0, #0
   11690:	mov	r1, #3
   11694:	mov	r2, r4
   11698:	bl	145d4 <__assert_fail@plt+0x354c>
   1169c:	movw	r2, #30584	; 0x7778
   116a0:	mov	r3, r0
   116a4:	mov	r0, #1
   116a8:	mov	r1, r5
   116ac:	movt	r2, #1
   116b0:	bl	10f2c <error@plt>
   116b4:	mov	r0, r5
   116b8:	mov	r1, #2
   116bc:	bl	126f8 <__assert_fail@plt+0x1670>
   116c0:	movw	r0, #37196	; 0x914c
   116c4:	tst	sl, #1
   116c8:	movt	r0, #2
   116cc:	ldr	r2, [r0]
   116d0:	beq	116e8 <__assert_fail@plt+0x660>
   116d4:	ldr	r0, [sp, #12]
   116d8:	mov	r1, r4
   116dc:	and	r3, r0, #1
   116e0:	mov	r0, r5
   116e4:	bl	11744 <__assert_fail@plt+0x6bc>
   116e8:	mov	r0, r5
   116ec:	mov	r1, r4
   116f0:	mov	r3, r6
   116f4:	bl	11974 <__assert_fail@plt+0x8ec>
   116f8:	movw	r1, #30587	; 0x777b
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	10ec0 <dcgettext@plt>
   1170c:	mov	r4, r0
   11710:	movw	r0, #37200	; 0x9150
   11714:	movt	r0, #2
   11718:	ldr	r0, [r0]
   1171c:	bl	14880 <__assert_fail@plt+0x37f8>
   11720:	movw	r2, #30580	; 0x7774
   11724:	str	r0, [sp]
   11728:	mov	r0, #1
   1172c:	mov	r1, #0
   11730:	mov	r3, r4
   11734:	movt	r2, #1
   11738:	bl	10f2c <error@plt>
   1173c:	mov	r0, #1
   11740:	bl	11184 <__assert_fail@plt+0xfc>
   11744:	push	{fp, lr}
   11748:	mov	fp, sp
   1174c:	sub	sp, sp, #32
   11750:	mov	r6, r0
   11754:	mov	r0, #4096	; 0x1000
   11758:	str	r2, [sp, #16]
   1175c:	stmib	sp, {r1, r3}
   11760:	bl	14f58 <__assert_fail@plt+0x3ed0>
   11764:	mov	r4, r0
   11768:	mov	r0, #3072	; 0xc00
   1176c:	bl	14f58 <__assert_fail@plt+0x3ed0>
   11770:	str	r0, [sp, #12]
   11774:	sub	r0, fp, #8
   11778:	bl	11f40 <__assert_fail@plt+0xeb8>
   1177c:	ldr	r0, [sp, #8]
   11780:	mov	sl, #0
   11784:	cmp	r0, #0
   11788:	beq	1182c <__assert_fail@plt+0x7a4>
   1178c:	add	r9, r4, sl
   11790:	rsb	r2, sl, #4096	; 0x1000
   11794:	mov	r1, #1
   11798:	mov	r3, r6
   1179c:	mov	r0, r9
   117a0:	bl	11064 <fread_unlocked@plt>
   117a4:	mov	r8, r0
   117a8:	cmp	r0, #1
   117ac:	blt	11808 <__assert_fail@plt+0x780>
   117b0:	mov	r5, #0
   117b4:	add	r0, r5, sl
   117b8:	ldrb	r7, [r4, r0]
   117bc:	mov	r0, r7
   117c0:	bl	11f20 <__assert_fail@plt+0xe98>
   117c4:	cmp	r0, #0
   117c8:	bne	117fc <__assert_fail@plt+0x774>
   117cc:	cmp	r7, #61	; 0x3d
   117d0:	beq	117fc <__assert_fail@plt+0x774>
   117d4:	sub	r8, r8, #1
   117d8:	add	r0, r9, r5
   117dc:	sub	r2, r8, r5
   117e0:	add	r1, r0, #1
   117e4:	bl	10e6c <memmove@plt>
   117e8:	cmp	r8, #1
   117ec:	blt	11808 <__assert_fail@plt+0x780>
   117f0:	cmp	r5, r8
   117f4:	blt	117b4 <__assert_fail@plt+0x72c>
   117f8:	b	11808 <__assert_fail@plt+0x780>
   117fc:	add	r5, r5, #1
   11800:	cmp	r8, #1
   11804:	bge	117f0 <__assert_fail@plt+0x768>
   11808:	ldr	r0, [r6]
   1180c:	tst	r0, #32
   11810:	bne	11910 <__assert_fail@plt+0x888>
   11814:	add	sl, r8, sl
   11818:	cmp	sl, #4096	; 0x1000
   1181c:	bge	11860 <__assert_fail@plt+0x7d8>
   11820:	ands	r0, r0, #16
   11824:	beq	1178c <__assert_fail@plt+0x704>
   11828:	b	11860 <__assert_fail@plt+0x7d8>
   1182c:	add	r0, r4, sl
   11830:	rsb	r2, sl, #4096	; 0x1000
   11834:	mov	r1, #1
   11838:	mov	r3, r6
   1183c:	bl	11064 <fread_unlocked@plt>
   11840:	ldr	r1, [r6]
   11844:	tst	r1, #32
   11848:	bne	11910 <__assert_fail@plt+0x888>
   1184c:	add	sl, r0, sl
   11850:	cmp	sl, #4096	; 0x1000
   11854:	bge	11860 <__assert_fail@plt+0x7d8>
   11858:	ands	r0, r1, #16
   1185c:	beq	1182c <__assert_fail@plt+0x7a4>
   11860:	mov	r8, r6
   11864:	mov	r5, #0
   11868:	mov	r9, #0
   1186c:	ldr	r6, [sp, #12]
   11870:	mov	r0, #3072	; 0xc00
   11874:	cmp	r5, #0
   11878:	mov	r2, sl
   1187c:	mov	r1, r4
   11880:	str	r0, [fp, #-12]
   11884:	sub	r0, fp, #12
   11888:	movne	r2, #0
   1188c:	str	r0, [sp]
   11890:	sub	r0, fp, #8
   11894:	mov	r3, r6
   11898:	bl	11f4c <__assert_fail@plt+0xec4>
   1189c:	ldr	r2, [fp, #-12]
   118a0:	ldr	r3, [sp, #16]
   118a4:	mov	r7, r0
   118a8:	mov	r0, r6
   118ac:	mov	r1, #1
   118b0:	bl	10ea8 <fwrite_unlocked@plt>
   118b4:	ldr	r1, [fp, #-12]
   118b8:	cmp	r0, r1
   118bc:	bcc	11924 <__assert_fail@plt+0x89c>
   118c0:	cmp	r7, #0
   118c4:	beq	11950 <__assert_fail@plt+0x8c8>
   118c8:	ldr	r0, [r8]
   118cc:	mov	r2, #2
   118d0:	add	r1, r9, #1
   118d4:	ands	r0, r0, #16
   118d8:	movweq	r2, #1
   118dc:	cmp	r1, r2
   118e0:	bcs	118f8 <__assert_fail@plt+0x870>
   118e4:	ldr	r2, [fp, #-8]
   118e8:	sub	r5, r5, #1
   118ec:	orrs	r2, r9, r2
   118f0:	mov	r9, r1
   118f4:	bne	1186c <__assert_fail@plt+0x7e4>
   118f8:	cmp	r0, #0
   118fc:	mov	r6, r8
   11900:	beq	1177c <__assert_fail@plt+0x6f4>
   11904:	ldr	r1, [sp, #4]
   11908:	mov	r0, r6
   1190c:	bl	11c44 <__assert_fail@plt+0xbbc>
   11910:	bl	10fa4 <__errno_location@plt>
   11914:	ldr	r4, [r0]
   11918:	movw	r1, #31137	; 0x79a1
   1191c:	movt	r1, #1
   11920:	b	11934 <__assert_fail@plt+0x8ac>
   11924:	bl	10fa4 <__errno_location@plt>
   11928:	ldr	r4, [r0]
   1192c:	movw	r1, #31148	; 0x79ac
   11930:	movt	r1, #1
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	bl	10ec0 <dcgettext@plt>
   11940:	mov	r2, r0
   11944:	mov	r0, #1
   11948:	mov	r1, r4
   1194c:	bl	10f2c <error@plt>
   11950:	movw	r1, #31160	; 0x79b8
   11954:	mov	r0, #0
   11958:	mov	r2, #5
   1195c:	movt	r1, #1
   11960:	bl	10ec0 <dcgettext@plt>
   11964:	mov	r2, r0
   11968:	mov	r0, #1
   1196c:	mov	r1, #0
   11970:	bl	10f2c <error@plt>
   11974:	push	{fp, lr}
   11978:	mov	fp, sp
   1197c:	sub	sp, sp, #16
   11980:	mov	r5, r0
   11984:	mov	r0, #30720	; 0x7800
   11988:	mov	r6, r3
   1198c:	mov	r8, r2
   11990:	str	r1, [sp]
   11994:	bl	14f58 <__assert_fail@plt+0x3ed0>
   11998:	mov	r7, r0
   1199c:	mov	r0, #40960	; 0xa000
   119a0:	bl	14f58 <__assert_fail@plt+0x3ed0>
   119a4:	cmp	r6, #0
   119a8:	str	r0, [fp, #-4]
   119ac:	str	r7, [sp, #4]
   119b0:	beq	11b24 <__assert_fail@plt+0xa9c>
   119b4:	mov	r4, r6
   119b8:	mov	sl, #0
   119bc:	str	r8, [sp, #8]
   119c0:	mov	r6, #0
   119c4:	add	r0, r7, r6
   119c8:	rsb	r2, r6, #30720	; 0x7800
   119cc:	mov	r1, #1
   119d0:	mov	r3, r5
   119d4:	bl	11064 <fread_unlocked@plt>
   119d8:	add	r6, r0, r6
   119dc:	ldr	r0, [r5]
   119e0:	tst	r0, #16
   119e4:	bne	119f8 <__assert_fail@plt+0x970>
   119e8:	cmp	r6, #30720	; 0x7800
   119ec:	bge	119f8 <__assert_fail@plt+0x970>
   119f0:	ands	r1, r0, #32
   119f4:	beq	119c4 <__assert_fail@plt+0x93c>
   119f8:	cmp	r6, #1
   119fc:	blt	11ad8 <__assert_fail@plt+0xa50>
   11a00:	movw	r1, #21846	; 0x5556
   11a04:	add	r0, r6, #2
   11a08:	ldr	r2, [fp, #-4]
   11a0c:	movt	r1, #21845	; 0x5555
   11a10:	smmul	r0, r0, r1
   11a14:	mov	r1, r6
   11a18:	add	r0, r0, r0, lsr #31
   11a1c:	lsl	r8, r0, #2
   11a20:	mov	r0, r7
   11a24:	mov	r3, r8
   11a28:	bl	11cd4 <__assert_fail@plt+0xc4c>
   11a2c:	mov	r7, #0
   11a30:	sub	r0, r4, sl
   11a34:	sub	r9, r8, r7
   11a38:	cmp	r0, r9
   11a3c:	movlt	r9, r0
   11a40:	cmp	r9, #0
   11a44:	beq	11a84 <__assert_fail@plt+0x9fc>
   11a48:	movw	r1, #37196	; 0x914c
   11a4c:	ldr	r0, [fp, #-4]
   11a50:	mov	r2, r9
   11a54:	movt	r1, #2
   11a58:	ldr	r3, [r1]
   11a5c:	mov	r1, #1
   11a60:	add	r0, r0, r7
   11a64:	bl	10ea8 <fwrite_unlocked@plt>
   11a68:	cmp	r0, r9
   11a6c:	bcc	11bec <__assert_fail@plt+0xb64>
   11a70:	add	r7, r9, r7
   11a74:	add	sl, r9, sl
   11a78:	cmp	r7, r8
   11a7c:	blt	11a30 <__assert_fail@plt+0x9a8>
   11a80:	b	11ad0 <__assert_fail@plt+0xa48>
   11a84:	ldr	r0, [sp, #8]
   11a88:	ldr	r2, [r0, #20]
   11a8c:	ldr	r1, [r0, #24]
   11a90:	cmp	r2, r1
   11a94:	bcs	11ab8 <__assert_fail@plt+0xa30>
   11a98:	add	r1, r2, #1
   11a9c:	mov	sl, #0
   11aa0:	str	r1, [r0, #20]
   11aa4:	mov	r0, #10
   11aa8:	strb	r0, [r2]
   11aac:	cmp	r7, r8
   11ab0:	blt	11a30 <__assert_fail@plt+0x9a8>
   11ab4:	b	11ad0 <__assert_fail@plt+0xa48>
   11ab8:	mov	r1, #10
   11abc:	bl	11010 <__overflow@plt>
   11ac0:	mov	sl, #0
   11ac4:	cmn	r0, #1
   11ac8:	bne	11aac <__assert_fail@plt+0xa24>
   11acc:	b	11bec <__assert_fail@plt+0xb64>
   11ad0:	ldr	r0, [r5]
   11ad4:	ldr	r7, [sp, #4]
   11ad8:	tst	r0, #16
   11adc:	cmpeq	r6, #30720	; 0x7800
   11ae0:	bne	11aec <__assert_fail@plt+0xa64>
   11ae4:	ands	r0, r0, #32
   11ae8:	beq	119c0 <__assert_fail@plt+0x938>
   11aec:	cmp	r4, #0
   11af0:	beq	11c00 <__assert_fail@plt+0xb78>
   11af4:	cmp	sl, #1
   11af8:	blt	11c00 <__assert_fail@plt+0xb78>
   11afc:	ldr	r0, [sp, #8]
   11b00:	ldr	r2, [r0, #20]
   11b04:	ldr	r1, [r0, #24]
   11b08:	cmp	r2, r1
   11b0c:	bcs	11bdc <__assert_fail@plt+0xb54>
   11b10:	add	r1, r2, #1
   11b14:	str	r1, [r0, #20]
   11b18:	mov	r1, #10
   11b1c:	strb	r1, [r2]
   11b20:	b	11c00 <__assert_fail@plt+0xb78>
   11b24:	movw	r8, #21846	; 0x5556
   11b28:	movw	r9, #37196	; 0x914c
   11b2c:	mov	r4, #0
   11b30:	movt	r8, #21845	; 0x5555
   11b34:	movt	r9, #2
   11b38:	add	r0, r7, r4
   11b3c:	rsb	r2, r4, #30720	; 0x7800
   11b40:	mov	r1, #1
   11b44:	mov	r3, r5
   11b48:	bl	11064 <fread_unlocked@plt>
   11b4c:	add	r4, r0, r4
   11b50:	ldr	r0, [r5]
   11b54:	tst	r0, #16
   11b58:	bne	11b6c <__assert_fail@plt+0xae4>
   11b5c:	cmp	r4, #30720	; 0x7800
   11b60:	bge	11b6c <__assert_fail@plt+0xae4>
   11b64:	ands	r1, r0, #32
   11b68:	beq	11b38 <__assert_fail@plt+0xab0>
   11b6c:	cmp	r4, #1
   11b70:	blt	11bc0 <__assert_fail@plt+0xb38>
   11b74:	add	r0, r4, #2
   11b78:	smmul	r1, r0, r8
   11b7c:	mov	r0, r7
   11b80:	ldr	r7, [fp, #-4]
   11b84:	add	sl, r1, r1, lsr #31
   11b88:	mov	r1, r4
   11b8c:	lsl	r6, sl, #2
   11b90:	mov	r3, r6
   11b94:	mov	r2, r7
   11b98:	bl	11cd4 <__assert_fail@plt+0xc4c>
   11b9c:	ldr	r3, [r9]
   11ba0:	mov	r0, r7
   11ba4:	mov	r1, #1
   11ba8:	mov	r2, r6
   11bac:	bl	10ea8 <fwrite_unlocked@plt>
   11bb0:	cmp	r0, sl, lsl #2
   11bb4:	bcc	11bec <__assert_fail@plt+0xb64>
   11bb8:	ldr	r0, [r5]
   11bbc:	ldr	r7, [sp, #4]
   11bc0:	tst	r0, #16
   11bc4:	cmpeq	r4, #30720	; 0x7800
   11bc8:	bne	11c00 <__assert_fail@plt+0xb78>
   11bcc:	ands	r0, r0, #32
   11bd0:	mov	r4, #0
   11bd4:	beq	11b38 <__assert_fail@plt+0xab0>
   11bd8:	b	11c00 <__assert_fail@plt+0xb78>
   11bdc:	mov	r1, #10
   11be0:	bl	11010 <__overflow@plt>
   11be4:	cmn	r0, #1
   11be8:	bne	11c00 <__assert_fail@plt+0xb78>
   11bec:	bl	10fa4 <__errno_location@plt>
   11bf0:	ldr	r4, [r0]
   11bf4:	movw	r1, #31148	; 0x79ac
   11bf8:	movt	r1, #1
   11bfc:	b	11c28 <__assert_fail@plt+0xba0>
   11c00:	ldrb	r0, [r5]
   11c04:	tst	r0, #32
   11c08:	bne	11c18 <__assert_fail@plt+0xb90>
   11c0c:	ldr	r1, [sp]
   11c10:	mov	r0, r5
   11c14:	bl	11c44 <__assert_fail@plt+0xbbc>
   11c18:	bl	10fa4 <__errno_location@plt>
   11c1c:	ldr	r4, [r0]
   11c20:	movw	r1, #31137	; 0x79a1
   11c24:	movt	r1, #1
   11c28:	mov	r0, #0
   11c2c:	mov	r2, #5
   11c30:	bl	10ec0 <dcgettext@plt>
   11c34:	mov	r2, r0
   11c38:	mov	r0, #1
   11c3c:	mov	r1, r4
   11c40:	bl	10f2c <error@plt>
   11c44:	push	{fp, lr}
   11c48:	mov	fp, sp
   11c4c:	mov	r5, r1
   11c50:	bl	12734 <__assert_fail@plt+0x16ac>
   11c54:	cmp	r0, #0
   11c58:	bne	11c64 <__assert_fail@plt+0xbdc>
   11c5c:	mov	r0, #0
   11c60:	bl	10f80 <exit@plt>
   11c64:	movw	r1, #31753	; 0x7c09
   11c68:	mov	r0, r5
   11c6c:	movt	r1, #1
   11c70:	bl	10e48 <strcmp@plt>
   11c74:	mov	r6, r0
   11c78:	bl	10fa4 <__errno_location@plt>
   11c7c:	ldr	r4, [r0]
   11c80:	cmp	r6, #0
   11c84:	bne	11cac <__assert_fail@plt+0xc24>
   11c88:	movw	r1, #31174	; 0x79c6
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	movt	r1, #1
   11c98:	bl	10ec0 <dcgettext@plt>
   11c9c:	mov	r2, r0
   11ca0:	mov	r0, #1
   11ca4:	mov	r1, r4
   11ca8:	bl	10f2c <error@plt>
   11cac:	mov	r0, #0
   11cb0:	mov	r1, #3
   11cb4:	mov	r2, r5
   11cb8:	bl	145d4 <__assert_fail@plt+0x354c>
   11cbc:	movw	r2, #30584	; 0x7778
   11cc0:	mov	r3, r0
   11cc4:	mov	r0, #1
   11cc8:	mov	r1, r4
   11ccc:	movt	r2, #1
   11cd0:	bl	10f2c <error@plt>
   11cd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11cd8:	add	fp, sp, #24
   11cdc:	tst	r3, #3
   11ce0:	bne	11d58 <__assert_fail@plt+0xcd0>
   11ce4:	asr	r7, r3, #2
   11ce8:	add	r7, r7, r7, lsl #1
   11cec:	cmp	r7, r1
   11cf0:	bne	11d58 <__assert_fail@plt+0xcd0>
   11cf4:	cmp	r1, #0
   11cf8:	beq	11d74 <__assert_fail@plt+0xcec>
   11cfc:	movw	r3, #31367	; 0x7a87
   11d00:	movt	r3, #1
   11d04:	ldrb	r7, [r0]
   11d08:	subs	r1, r1, #3
   11d0c:	ldrb	r6, [r3, r7, lsr #2]
   11d10:	strb	r6, [r2]
   11d14:	ldrb	r6, [r0, #1]
   11d18:	lsr	r5, r6, #4
   11d1c:	bfi	r5, r7, #4, #2
   11d20:	ldrb	r7, [r3, r5]
   11d24:	strb	r7, [r2, #1]
   11d28:	ldrb	r7, [r0, #2]
   11d2c:	add	r0, r0, #3
   11d30:	and	r5, r7, #63	; 0x3f
   11d34:	lsr	r7, r7, #6
   11d38:	bfi	r7, r6, #2, #4
   11d3c:	ldrb	r5, [r3, r5]
   11d40:	ldrb	r7, [r3, r7]
   11d44:	strb	r5, [r2, #3]
   11d48:	strb	r7, [r2, #2]
   11d4c:	add	r2, r2, #4
   11d50:	bne	11d04 <__assert_fail@plt+0xc7c>
   11d54:	b	11d74 <__assert_fail@plt+0xcec>
   11d58:	cmp	r1, #0
   11d5c:	cmpne	r3, #0
   11d60:	bne	11d78 <__assert_fail@plt+0xcf0>
   11d64:	cmp	r3, #0
   11d68:	beq	11d74 <__assert_fail@plt+0xcec>
   11d6c:	mov	r0, #0
   11d70:	strb	r0, [r2]
   11d74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d78:	movw	r6, #31367	; 0x7a87
   11d7c:	add	r0, r0, #1
   11d80:	sub	ip, r3, #3
   11d84:	sub	lr, r3, #2
   11d88:	sub	r9, r3, #1
   11d8c:	sub	r8, r3, #4
   11d90:	mov	r3, #0
   11d94:	movt	r6, #1
   11d98:	ldrb	r4, [r0, #-1]
   11d9c:	mov	r7, r2
   11da0:	cmp	r9, r3
   11da4:	ldrb	r4, [r6, r4, lsr #2]
   11da8:	strb	r4, [r7, r3]!
   11dac:	beq	11d74 <__assert_fail@plt+0xcec>
   11db0:	ldrb	r4, [r0, #-1]
   11db4:	cmp	r1, #1
   11db8:	lsl	r5, r4, #4
   11dbc:	mov	r4, #0
   11dc0:	ldrbne	r4, [r0]
   11dc4:	lsrne	r4, r4, #4
   11dc8:	cmp	lr, r3
   11dcc:	add	r4, r4, r5
   11dd0:	and	r4, r4, #63	; 0x3f
   11dd4:	ldrb	r4, [r6, r4]
   11dd8:	strb	r4, [r7, #1]
   11ddc:	beq	11d74 <__assert_fail@plt+0xcec>
   11de0:	cmp	r1, #1
   11de4:	beq	11e10 <__assert_fail@plt+0xd88>
   11de8:	subs	r5, r1, #2
   11dec:	ldrb	r1, [r0]
   11df0:	ldrbne	r4, [r0, #1]
   11df4:	lsl	r1, r1, #2
   11df8:	lsrne	r4, r4, #6
   11dfc:	moveq	r4, #0
   11e00:	add	r1, r4, r1
   11e04:	and	r1, r1, #63	; 0x3f
   11e08:	ldrb	r1, [r6, r1]
   11e0c:	b	11e18 <__assert_fail@plt+0xd90>
   11e10:	mov	r1, #61	; 0x3d
   11e14:	mov	r5, #0
   11e18:	cmp	ip, r3
   11e1c:	strb	r1, [r7, #2]
   11e20:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e24:	cmp	r5, #0
   11e28:	beq	11e48 <__assert_fail@plt+0xdc0>
   11e2c:	ldrb	r1, [r0, #1]
   11e30:	and	r1, r1, #63	; 0x3f
   11e34:	ldrb	r1, [r6, r1]
   11e38:	cmp	r8, r3
   11e3c:	strb	r1, [r7, #3]
   11e40:	bne	11e58 <__assert_fail@plt+0xdd0>
   11e44:	b	11d74 <__assert_fail@plt+0xcec>
   11e48:	mov	r1, #61	; 0x3d
   11e4c:	cmp	r8, r3
   11e50:	strb	r1, [r7, #3]
   11e54:	beq	11d74 <__assert_fail@plt+0xcec>
   11e58:	subs	r1, r5, #1
   11e5c:	add	r3, r3, #4
   11e60:	addne	r0, r0, #3
   11e64:	cmpne	r5, #0
   11e68:	bne	11d98 <__assert_fail@plt+0xd10>
   11e6c:	add	r2, r2, r3
   11e70:	b	11d6c <__assert_fail@plt+0xce4>
   11e74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e78:	add	fp, sp, #24
   11e7c:	mov	r8, r0
   11e80:	movw	r0, #21846	; 0x5556
   11e84:	mov	r4, r1
   11e88:	mov	r6, r2
   11e8c:	movt	r0, #21845	; 0x5555
   11e90:	smmul	r0, r1, r0
   11e94:	add	r0, r0, r0, lsr #31
   11e98:	add	r1, r0, r0, lsl #1
   11e9c:	subs	r1, r4, r1
   11ea0:	addne	r0, r0, #1
   11ea4:	cmn	r0, #1
   11ea8:	ble	11eb8 <__assert_fail@plt+0xe30>
   11eac:	cmn	r0, #-536870911	; 0xe0000001
   11eb0:	ble	11ecc <__assert_fail@plt+0xe44>
   11eb4:	b	11f10 <__assert_fail@plt+0xe88>
   11eb8:	beq	11ecc <__assert_fail@plt+0xe44>
   11ebc:	mov	r1, #-2147483648	; 0x80000000
   11ec0:	sdiv	r1, r1, r0
   11ec4:	cmp	r1, #4
   11ec8:	blt	11f10 <__assert_fail@plt+0xe88>
   11ecc:	cmn	r4, #1
   11ed0:	ble	11f10 <__assert_fail@plt+0xe88>
   11ed4:	lsl	r7, r0, #2
   11ed8:	orr	r5, r7, #1
   11edc:	mov	r0, r5
   11ee0:	bl	16eb0 <__assert_fail@plt+0x5e28>
   11ee4:	cmp	r0, #0
   11ee8:	str	r0, [r6]
   11eec:	moveq	r0, r5
   11ef0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ef4:	mov	r2, r0
   11ef8:	mov	r0, r8
   11efc:	mov	r1, r4
   11f00:	mov	r3, r5
   11f04:	bl	11cd4 <__assert_fail@plt+0xc4c>
   11f08:	mov	r0, r7
   11f0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f10:	mov	r7, #0
   11f14:	mov	r0, r7
   11f18:	str	r7, [r6]
   11f1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f20:	movw	r1, #31431	; 0x7ac7
   11f24:	movt	r1, #1
   11f28:	add	r0, r1, r0
   11f2c:	ldrsb	r1, [r0]
   11f30:	mov	r0, #0
   11f34:	cmn	r1, #1
   11f38:	movwgt	r0, #1
   11f3c:	bx	lr
   11f40:	mov	r1, #0
   11f44:	str	r1, [r0]
   11f48:	bx	lr
   11f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f50:	add	fp, sp, #28
   11f54:	sub	sp, sp, #36	; 0x24
   11f58:	mov	r4, r0
   11f5c:	ldr	r0, [fp, #8]
   11f60:	mov	r7, r3
   11f64:	mov	sl, r2
   11f68:	mov	lr, #0
   11f6c:	str	r1, [sp, #32]
   11f70:	cmp	r4, #0
   11f74:	ldr	r3, [r0]
   11f78:	mov	r0, #0
   11f7c:	beq	11f94 <__assert_fail@plt+0xf0c>
   11f80:	clz	r0, sl
   11f84:	lsr	lr, r0, #5
   11f88:	ldr	r0, [r4]
   11f8c:	cmp	r0, #0
   11f90:	movwne	r0, #1
   11f94:	orr	r0, r0, lr
   11f98:	movw	r2, #31431	; 0x7ac7
   11f9c:	str	r4, [sp, #20]
   11fa0:	str	lr, [sp, #8]
   11fa4:	str	r0, [sp, #16]
   11fa8:	add	r0, r4, #4
   11fac:	movt	r2, #1
   11fb0:	str	r0, [sp, #4]
   11fb4:	clz	r0, r4
   11fb8:	lsr	ip, r0, #5
   11fbc:	str	ip, [sp, #12]
   11fc0:	b	11fd8 <__assert_fail@plt+0xf50>
   11fc4:	ldr	r0, [sp, #32]
   11fc8:	ldr	r4, [sp, #20]
   11fcc:	movw	r2, #31431	; 0x7ac7
   11fd0:	movt	r2, #1
   11fd4:	sub	sl, r5, r0
   11fd8:	ldr	r1, [sp, #16]
   11fdc:	cmp	sl, #2
   11fe0:	mov	r0, #0
   11fe4:	movwlt	r0, #1
   11fe8:	orrs	r0, r1, r0
   11fec:	beq	12024 <__assert_fail@plt+0xf9c>
   11ff0:	ldr	r6, [sp, #32]
   11ff4:	str	r3, [sp, #24]
   11ff8:	cmp	sl, #0
   11ffc:	mov	r0, sl
   12000:	movwne	r0, #1
   12004:	orr	r0, lr, r0
   12008:	cmp	r0, #1
   1200c:	bne	12524 <__assert_fail@plt+0x149c>
   12010:	mov	r1, lr
   12014:	cmp	sl, #0
   12018:	beq	12198 <__assert_fail@plt+0x1110>
   1201c:	ldr	r3, [sp, #24]
   12020:	b	12288 <__assert_fail@plt+0x1200>
   12024:	ldr	r6, [sp, #32]
   12028:	mov	lr, #0
   1202c:	mov	r8, #3
   12030:	mov	r1, sl
   12034:	mov	ip, sl
   12038:	ldr	r0, [sp, #32]
   1203c:	add	r4, r0, r8
   12040:	ldrb	r0, [r4, #-3]!
   12044:	add	r0, r2, r0
   12048:	ldrsb	r5, [r0]
   1204c:	cmp	r5, #0
   12050:	blt	121cc <__assert_fail@plt+0x1144>
   12054:	ldrb	r0, [r4, #1]
   12058:	mov	r9, r7
   1205c:	add	sl, ip, lr
   12060:	add	r0, r2, r0
   12064:	ldrsb	r7, [r0]
   12068:	cmp	r7, #0
   1206c:	blt	121d8 <__assert_fail@plt+0x1150>
   12070:	sub	r0, sl, #2
   12074:	cmp	r3, #0
   12078:	str	r1, [sp, #28]
   1207c:	beq	12130 <__assert_fail@plt+0x10a8>
   12080:	mov	r1, ip
   12084:	mov	ip, r3
   12088:	ubfx	r3, r7, #4, #4
   1208c:	orr	r3, r3, r5, lsl #2
   12090:	strb	r3, [r9], #1
   12094:	mov	r3, ip
   12098:	mov	ip, r1
   1209c:	sub	r1, r3, #1
   120a0:	cmp	r0, #0
   120a4:	beq	121e0 <__assert_fail@plt+0x1158>
   120a8:	ldrb	r0, [r4, #2]
   120ac:	cmp	r0, #61	; 0x3d
   120b0:	beq	121ec <__assert_fail@plt+0x1164>
   120b4:	add	r0, r2, r0
   120b8:	ldrsb	r5, [r0]
   120bc:	cmp	r5, #0
   120c0:	blt	12224 <__assert_fail@plt+0x119c>
   120c4:	sub	r0, sl, #3
   120c8:	cmp	r1, #0
   120cc:	beq	12140 <__assert_fail@plt+0x10b8>
   120d0:	mov	r2, r3
   120d4:	ubfx	r3, r5, #2, #6
   120d8:	sub	r1, r1, #1
   120dc:	orr	r3, r3, r7, lsl #4
   120e0:	mov	r7, r9
   120e4:	strb	r3, [r7], #1
   120e8:	mov	r3, r2
   120ec:	movw	r2, #31431	; 0x7ac7
   120f0:	movt	r2, #1
   120f4:	cmp	r0, #0
   120f8:	beq	12234 <__assert_fail@plt+0x11ac>
   120fc:	ldrb	r0, [r4, #3]
   12100:	cmp	r0, #61	; 0x3d
   12104:	beq	12240 <__assert_fail@plt+0x11b8>
   12108:	add	r0, r2, r0
   1210c:	ldrsb	r0, [r0]
   12110:	cmp	r0, #0
   12114:	blt	12274 <__assert_fail@plt+0x11ec>
   12118:	cmp	r1, #0
   1211c:	beq	12154 <__assert_fail@plt+0x10cc>
   12120:	orr	r0, r0, r5, lsl #6
   12124:	sub	r3, r1, #1
   12128:	strb	r0, [r7], #1
   1212c:	b	12158 <__assert_fail@plt+0x10d0>
   12130:	mov	r1, #0
   12134:	cmp	r0, #0
   12138:	bne	120a8 <__assert_fail@plt+0x1020>
   1213c:	b	121e0 <__assert_fail@plt+0x1158>
   12140:	mov	r1, #0
   12144:	mov	r7, r9
   12148:	cmp	r0, #0
   1214c:	bne	120fc <__assert_fail@plt+0x1074>
   12150:	b	12234 <__assert_fail@plt+0x11ac>
   12154:	mov	r3, r1
   12158:	ldr	r1, [sp, #28]
   1215c:	sub	lr, lr, #4
   12160:	add	r8, r8, #4
   12164:	add	r6, r4, #4
   12168:	add	sl, ip, lr
   1216c:	add	r0, sl, #4
   12170:	cmp	r0, #5
   12174:	sub	r1, r1, #4
   12178:	bgt	12038 <__assert_fail@plt+0xfb0>
   1217c:	ldr	r0, [sp, #32]
   12180:	ldr	r4, [sp, #20]
   12184:	ldr	ip, [sp, #12]
   12188:	str	r3, [sp, #24]
   1218c:	sub	r6, r0, lr
   12190:	ldr	lr, [sp, #8]
   12194:	b	11ff8 <__assert_fail@plt+0xf70>
   12198:	ldr	r3, [sp, #24]
   1219c:	mov	sl, #0
   121a0:	add	r5, r6, sl
   121a4:	cmp	r4, #0
   121a8:	mov	r9, r3
   121ac:	bne	122ac <__assert_fail@plt+0x1224>
   121b0:	str	r6, [sp, #32]
   121b4:	mov	r8, sl
   121b8:	mov	lr, r1
   121bc:	mov	sl, #0
   121c0:	cmp	r8, #0
   121c4:	bne	123b4 <__assert_fail@plt+0x132c>
   121c8:	b	12528 <__assert_fail@plt+0x14a0>
   121cc:	mov	sl, r1
   121d0:	str	r3, [sp, #24]
   121d4:	b	1227c <__assert_fail@plt+0x11f4>
   121d8:	str	r3, [sp, #24]
   121dc:	b	1222c <__assert_fail@plt+0x11a4>
   121e0:	str	r1, [sp, #24]
   121e4:	mov	sl, #2
   121e8:	b	1222c <__assert_fail@plt+0x11a4>
   121ec:	add	sl, ip, lr
   121f0:	str	r1, [sp, #24]
   121f4:	ldr	r4, [sp, #20]
   121f8:	ldr	r1, [sp, #8]
   121fc:	ldr	ip, [sp, #12]
   12200:	mov	r7, r9
   12204:	cmp	sl, #4
   12208:	bne	12288 <__assert_fail@plt+0x1200>
   1220c:	ldr	r0, [sp, #32]
   12210:	mov	sl, #4
   12214:	ldrb	r0, [r0, r8]
   12218:	cmp	r0, #61	; 0x3d
   1221c:	beq	1225c <__assert_fail@plt+0x11d4>
   12220:	b	12288 <__assert_fail@plt+0x1200>
   12224:	ldr	sl, [sp, #28]
   12228:	str	r1, [sp, #24]
   1222c:	mov	r7, r9
   12230:	b	1227c <__assert_fail@plt+0x11f4>
   12234:	str	r1, [sp, #24]
   12238:	mov	sl, #3
   1223c:	b	1227c <__assert_fail@plt+0x11f4>
   12240:	add	sl, ip, lr
   12244:	str	r1, [sp, #24]
   12248:	ldr	r4, [sp, #20]
   1224c:	ldr	r1, [sp, #8]
   12250:	ldr	ip, [sp, #12]
   12254:	cmp	sl, #4
   12258:	bne	12288 <__assert_fail@plt+0x1200>
   1225c:	ldr	r0, [sp, #32]
   12260:	mov	sl, #0
   12264:	sub	r0, r0, lr
   12268:	mov	lr, r1
   1226c:	add	r6, r0, #4
   12270:	b	11ff8 <__assert_fail@plt+0xf70>
   12274:	ldr	sl, [sp, #28]
   12278:	str	r1, [sp, #24]
   1227c:	ldr	r4, [sp, #20]
   12280:	ldr	r1, [sp, #8]
   12284:	ldr	ip, [sp, #12]
   12288:	ldrb	r0, [r6]
   1228c:	subs	r0, r0, #10
   12290:	movwne	r0, #1
   12294:	orrs	r0, r0, ip
   12298:	beq	12388 <__assert_fail@plt+0x1300>
   1229c:	add	r5, r6, sl
   122a0:	cmp	r4, #0
   122a4:	mov	r9, r3
   122a8:	beq	121b0 <__assert_fail@plt+0x1128>
   122ac:	ldr	r8, [r4]
   122b0:	mov	lr, r1
   122b4:	cmp	r8, #0
   122b8:	beq	122d0 <__assert_fail@plt+0x1248>
   122bc:	cmp	r8, #4
   122c0:	bne	12310 <__assert_fail@plt+0x1288>
   122c4:	ldr	r1, [sp, #20]
   122c8:	mov	r0, #0
   122cc:	str	r0, [r1]
   122d0:	sub	r0, r5, r6
   122d4:	mov	r8, #0
   122d8:	cmp	r0, #4
   122dc:	blt	12310 <__assert_fail@plt+0x1288>
   122e0:	mov	r0, r6
   122e4:	mov	r1, #10
   122e8:	mov	r2, #4
   122ec:	mov	r4, lr
   122f0:	bl	10fec <memchr@plt>
   122f4:	ldr	ip, [sp, #12]
   122f8:	movw	r2, #31431	; 0x7ac7
   122fc:	mov	r3, r9
   12300:	mov	lr, r4
   12304:	cmp	r0, #0
   12308:	movt	r2, #1
   1230c:	beq	1250c <__assert_fail@plt+0x1484>
   12310:	cmp	sl, #1
   12314:	blt	123a0 <__assert_fail@plt+0x1318>
   12318:	mov	r0, r6
   1231c:	ldrb	r1, [r6], #1
   12320:	cmp	r1, #10
   12324:	bne	12334 <__assert_fail@plt+0x12ac>
   12328:	cmp	r6, r5
   1232c:	bcc	12318 <__assert_fail@plt+0x1290>
   12330:	b	1236c <__assert_fail@plt+0x12e4>
   12334:	ldr	r4, [sp, #20]
   12338:	add	r2, r8, #1
   1233c:	add	r6, r0, #1
   12340:	cmp	r6, r5
   12344:	mov	r3, r4
   12348:	str	r2, [r3], r8
   1234c:	movw	r2, #31431	; 0x7ac7
   12350:	strb	r1, [r3, #4]
   12354:	movt	r2, #1
   12358:	mov	r3, r9
   1235c:	ldr	r8, [r4]
   12360:	bcs	1236c <__assert_fail@plt+0x12e4>
   12364:	cmp	r8, #4
   12368:	bne	12318 <__assert_fail@plt+0x1290>
   1236c:	add	r0, r0, #1
   12370:	str	r0, [sp, #32]
   12374:	ldr	r6, [sp, #4]
   12378:	mov	sl, #0
   1237c:	cmp	r8, #0
   12380:	bne	123b4 <__assert_fail@plt+0x132c>
   12384:	b	12528 <__assert_fail@plt+0x14a0>
   12388:	ldr	r3, [sp, #24]
   1238c:	add	r0, r6, #1
   12390:	sub	sl, sl, #1
   12394:	mov	lr, r1
   12398:	str	r0, [sp, #32]
   1239c:	b	11fd8 <__assert_fail@plt+0xf50>
   123a0:	str	r6, [sp, #32]
   123a4:	ldr	r6, [sp, #4]
   123a8:	mov	sl, #0
   123ac:	cmp	r8, #0
   123b0:	beq	12528 <__assert_fail@plt+0x14a0>
   123b4:	cmp	r8, #3
   123b8:	mov	r0, #0
   123bc:	movwgt	r0, #1
   123c0:	orr	r0, lr, r0
   123c4:	orr	r0, r0, ip
   123c8:	cmp	r0, #1
   123cc:	bne	12528 <__assert_fail@plt+0x14a0>
   123d0:	cmp	r8, #2
   123d4:	blt	1251c <__assert_fail@plt+0x1494>
   123d8:	ldrb	r0, [r6]
   123dc:	mov	r1, r2
   123e0:	add	r0, r2, r0
   123e4:	ldrsb	r2, [r0]
   123e8:	cmp	r2, #0
   123ec:	blt	1251c <__assert_fail@plt+0x1494>
   123f0:	ldrb	r0, [r6, #1]
   123f4:	add	r0, r1, r0
   123f8:	ldrsb	r0, [r0]
   123fc:	cmp	r0, #0
   12400:	blt	1251c <__assert_fail@plt+0x1494>
   12404:	ldr	r1, [sp, #24]
   12408:	cmp	r9, #0
   1240c:	sub	r3, r1, r9
   12410:	mov	r1, r9
   12414:	add	r7, r7, r3
   12418:	beq	124bc <__assert_fail@plt+0x1434>
   1241c:	ubfx	r3, r0, #4, #4
   12420:	orr	r2, r3, r2, lsl #2
   12424:	mov	r3, r9
   12428:	strb	r2, [r7], #1
   1242c:	sub	r3, r9, #1
   12430:	mov	sl, #2
   12434:	cmp	r8, #2
   12438:	beq	12528 <__assert_fail@plt+0x14a0>
   1243c:	ldrb	r2, [r6, #2]
   12440:	cmp	r2, #61	; 0x3d
   12444:	bne	12460 <__assert_fail@plt+0x13d8>
   12448:	cmp	r8, #4
   1244c:	bne	1251c <__assert_fail@plt+0x1494>
   12450:	ldrb	r0, [r6, #3]
   12454:	cmp	r0, #61	; 0x3d
   12458:	beq	11fc4 <__assert_fail@plt+0xf3c>
   1245c:	b	12528 <__assert_fail@plt+0x14a0>
   12460:	movw	r1, #31431	; 0x7ac7
   12464:	movt	r1, #1
   12468:	add	r2, r1, r2
   1246c:	ldrsb	r2, [r2]
   12470:	cmp	r2, #0
   12474:	blt	1251c <__assert_fail@plt+0x1494>
   12478:	cmp	r3, #0
   1247c:	beq	124fc <__assert_fail@plt+0x1474>
   12480:	mov	r1, r3
   12484:	ubfx	r3, r2, #2, #6
   12488:	orr	r0, r3, r0, lsl #4
   1248c:	mov	r3, r1
   12490:	strb	r0, [r7], #1
   12494:	sub	r3, r1, #1
   12498:	cmp	r8, #3
   1249c:	beq	12528 <__assert_fail@plt+0x14a0>
   124a0:	ldrb	r0, [r6, #3]
   124a4:	cmp	r0, #61	; 0x3d
   124a8:	bne	124d0 <__assert_fail@plt+0x1448>
   124ac:	cmp	r8, #4
   124b0:	mov	sl, r8
   124b4:	beq	11fc4 <__assert_fail@plt+0xf3c>
   124b8:	b	12528 <__assert_fail@plt+0x14a0>
   124bc:	mov	r3, #0
   124c0:	mov	sl, #2
   124c4:	cmp	r8, #2
   124c8:	bne	1243c <__assert_fail@plt+0x13b4>
   124cc:	b	12528 <__assert_fail@plt+0x14a0>
   124d0:	movw	r1, #31431	; 0x7ac7
   124d4:	movt	r1, #1
   124d8:	add	r0, r1, r0
   124dc:	ldrsb	r0, [r0]
   124e0:	cmp	r0, #0
   124e4:	blt	1251c <__assert_fail@plt+0x1494>
   124e8:	cmp	r3, #0
   124ec:	orrne	r0, r0, r2, lsl #6
   124f0:	subne	r3, r3, #1
   124f4:	strbne	r0, [r7], #1
   124f8:	b	11fc4 <__assert_fail@plt+0xf3c>
   124fc:	mov	r3, #0
   12500:	cmp	r8, #3
   12504:	bne	124a0 <__assert_fail@plt+0x1418>
   12508:	b	12528 <__assert_fail@plt+0x14a0>
   1250c:	add	r0, r6, #4
   12510:	mov	r8, #4
   12514:	str	r0, [sp, #32]
   12518:	b	123d8 <__assert_fail@plt+0x1350>
   1251c:	mov	sl, r8
   12520:	b	12528 <__assert_fail@plt+0x14a0>
   12524:	ldr	r3, [sp, #24]
   12528:	ldr	r0, [fp, #8]
   1252c:	mov	r1, r0
   12530:	ldr	r0, [r0]
   12534:	sub	r0, r0, r3
   12538:	str	r0, [r1]
   1253c:	clz	r0, sl
   12540:	lsr	r0, r0, #5
   12544:	sub	sp, fp, #28
   12548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1254c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12550:	add	fp, sp, #24
   12554:	sub	sp, sp, #8
   12558:	mov	r7, r0
   1255c:	asr	r0, r2, #2
   12560:	mov	r4, r3
   12564:	mov	r6, r2
   12568:	mov	r8, r1
   1256c:	add	r0, r0, r0, lsl #1
   12570:	add	r0, r0, #3
   12574:	str	r0, [sp, #4]
   12578:	bl	16eb0 <__assert_fail@plt+0x5e28>
   1257c:	mov	r5, #1
   12580:	cmp	r0, #0
   12584:	str	r0, [r4]
   12588:	beq	125c0 <__assert_fail@plt+0x1538>
   1258c:	mov	r3, r0
   12590:	add	r0, sp, #4
   12594:	mov	r1, r8
   12598:	mov	r2, r6
   1259c:	str	r0, [sp]
   125a0:	mov	r0, r7
   125a4:	bl	11f4c <__assert_fail@plt+0xec4>
   125a8:	cmp	r0, #0
   125ac:	beq	125cc <__assert_fail@plt+0x1544>
   125b0:	ldr	r0, [fp, #8]
   125b4:	cmp	r0, #0
   125b8:	ldrne	r1, [sp, #4]
   125bc:	strne	r1, [r0]
   125c0:	mov	r0, r5
   125c4:	sub	sp, fp, #24
   125c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   125cc:	ldr	r0, [r4]
   125d0:	bl	12838 <__assert_fail@plt+0x17b0>
   125d4:	mov	r5, #0
   125d8:	str	r5, [r4]
   125dc:	mov	r0, r5
   125e0:	sub	sp, fp, #24
   125e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   125e8:	movw	r1, #37208	; 0x9158
   125ec:	movt	r1, #2
   125f0:	str	r0, [r1, #4]
   125f4:	bx	lr
   125f8:	movw	r1, #37208	; 0x9158
   125fc:	movt	r1, #2
   12600:	strb	r0, [r1]
   12604:	bx	lr
   12608:	push	{r4, r5, r6, sl, fp, lr}
   1260c:	add	fp, sp, #16
   12610:	sub	sp, sp, #8
   12614:	movw	r0, #37196	; 0x914c
   12618:	movt	r0, #2
   1261c:	ldr	r0, [r0]
   12620:	bl	16f34 <__assert_fail@plt+0x5eac>
   12624:	cmp	r0, #0
   12628:	beq	12650 <__assert_fail@plt+0x15c8>
   1262c:	movw	r5, #37208	; 0x9158
   12630:	movt	r5, #2
   12634:	ldrb	r0, [r5]
   12638:	cmp	r0, #0
   1263c:	beq	1267c <__assert_fail@plt+0x15f4>
   12640:	bl	10fa4 <__errno_location@plt>
   12644:	ldr	r0, [r0]
   12648:	cmp	r0, #32
   1264c:	bne	1267c <__assert_fail@plt+0x15f4>
   12650:	movw	r0, #37184	; 0x9140
   12654:	movt	r0, #2
   12658:	ldr	r0, [r0]
   1265c:	bl	16f34 <__assert_fail@plt+0x5eac>
   12660:	cmp	r0, #0
   12664:	subeq	sp, fp, #16
   12668:	popeq	{r4, r5, r6, sl, fp, pc}
   1266c:	movw	r0, #37100	; 0x90ec
   12670:	movt	r0, #2
   12674:	ldr	r0, [r0]
   12678:	bl	10e84 <_exit@plt>
   1267c:	movw	r1, #31148	; 0x79ac
   12680:	mov	r0, #0
   12684:	mov	r2, #5
   12688:	movt	r1, #1
   1268c:	bl	10ec0 <dcgettext@plt>
   12690:	ldr	r6, [r5, #4]
   12694:	mov	r4, r0
   12698:	bl	10fa4 <__errno_location@plt>
   1269c:	ldr	r5, [r0]
   126a0:	cmp	r6, #0
   126a4:	bne	126c0 <__assert_fail@plt+0x1638>
   126a8:	movw	r2, #30584	; 0x7778
   126ac:	mov	r0, #0
   126b0:	mov	r1, r5
   126b4:	mov	r3, r4
   126b8:	movt	r2, #1
   126bc:	b	126e0 <__assert_fail@plt+0x1658>
   126c0:	mov	r0, r6
   126c4:	bl	144f8 <__assert_fail@plt+0x3470>
   126c8:	movw	r2, #30580	; 0x7774
   126cc:	mov	r3, r0
   126d0:	str	r4, [sp]
   126d4:	mov	r0, #0
   126d8:	mov	r1, r5
   126dc:	movt	r2, #1
   126e0:	bl	10f2c <error@plt>
   126e4:	movw	r0, #37100	; 0x90ec
   126e8:	movt	r0, #2
   126ec:	ldr	r0, [r0]
   126f0:	bl	10e84 <_exit@plt>
   126f4:	b	10e54 <posix_fadvise64@plt>
   126f8:	cmp	r0, #0
   126fc:	bxeq	lr
   12700:	push	{r4, sl, fp, lr}
   12704:	add	fp, sp, #8
   12708:	sub	sp, sp, #16
   1270c:	mov	r4, r1
   12710:	bl	10fd4 <fileno@plt>
   12714:	mov	r1, #0
   12718:	mov	r2, #0
   1271c:	mov	r3, #0
   12720:	str	r1, [sp]
   12724:	stmib	sp, {r1, r4}
   12728:	bl	10e54 <posix_fadvise64@plt>
   1272c:	sub	sp, fp, #8
   12730:	pop	{r4, sl, fp, pc}
   12734:	push	{r4, r5, r6, sl, fp, lr}
   12738:	add	fp, sp, #16
   1273c:	sub	sp, sp, #8
   12740:	mov	r4, r0
   12744:	bl	10fd4 <fileno@plt>
   12748:	cmn	r0, #1
   1274c:	ble	127c0 <__assert_fail@plt+0x1738>
   12750:	mov	r0, r4
   12754:	bl	10f50 <__freading@plt>
   12758:	cmp	r0, #0
   1275c:	beq	12788 <__assert_fail@plt+0x1700>
   12760:	mov	r0, r4
   12764:	bl	10fd4 <fileno@plt>
   12768:	mov	r1, #1
   1276c:	mov	r2, #0
   12770:	mov	r3, #0
   12774:	str	r1, [sp]
   12778:	bl	10efc <lseek64@plt>
   1277c:	and	r0, r0, r1
   12780:	cmn	r0, #1
   12784:	beq	127c0 <__assert_fail@plt+0x1738>
   12788:	mov	r0, r4
   1278c:	bl	127d0 <__assert_fail@plt+0x1748>
   12790:	cmp	r0, #0
   12794:	beq	127c0 <__assert_fail@plt+0x1738>
   12798:	bl	10fa4 <__errno_location@plt>
   1279c:	ldr	r6, [r0]
   127a0:	mov	r5, r0
   127a4:	mov	r0, r4
   127a8:	bl	10ff8 <fclose@plt>
   127ac:	cmp	r6, #0
   127b0:	strne	r6, [r5]
   127b4:	mvnne	r0, #0
   127b8:	sub	sp, fp, #16
   127bc:	pop	{r4, r5, r6, sl, fp, pc}
   127c0:	mov	r0, r4
   127c4:	sub	sp, fp, #16
   127c8:	pop	{r4, r5, r6, sl, fp, lr}
   127cc:	b	10ff8 <fclose@plt>
   127d0:	push	{r4, sl, fp, lr}
   127d4:	add	fp, sp, #8
   127d8:	sub	sp, sp, #8
   127dc:	mov	r4, r0
   127e0:	cmp	r0, #0
   127e4:	beq	12800 <__assert_fail@plt+0x1778>
   127e8:	mov	r0, r4
   127ec:	bl	10f50 <__freading@plt>
   127f0:	cmp	r0, #0
   127f4:	ldrbne	r0, [r4, #1]
   127f8:	tstne	r0, #1
   127fc:	bne	12810 <__assert_fail@plt+0x1788>
   12800:	mov	r0, r4
   12804:	sub	sp, fp, #8
   12808:	pop	{r4, sl, fp, lr}
   1280c:	b	10e60 <fflush@plt>
   12810:	mov	r0, #1
   12814:	mov	r2, #0
   12818:	mov	r3, #0
   1281c:	str	r0, [sp]
   12820:	mov	r0, r4
   12824:	bl	12860 <__assert_fail@plt+0x17d8>
   12828:	mov	r0, r4
   1282c:	sub	sp, fp, #8
   12830:	pop	{r4, sl, fp, lr}
   12834:	b	10e60 <fflush@plt>
   12838:	push	{r4, r5, r6, sl, fp, lr}
   1283c:	add	fp, sp, #16
   12840:	mov	r4, r0
   12844:	bl	10fa4 <__errno_location@plt>
   12848:	ldr	r6, [r0]
   1284c:	mov	r5, r0
   12850:	mov	r0, r4
   12854:	bl	10e78 <free@plt>
   12858:	str	r6, [r5]
   1285c:	pop	{r4, r5, r6, sl, fp, pc}
   12860:	push	{r4, r5, r6, r7, fp, lr}
   12864:	add	fp, sp, #16
   12868:	sub	sp, sp, #8
   1286c:	mov	r4, r0
   12870:	ldr	r0, [r0, #4]
   12874:	mov	r5, r3
   12878:	mov	r6, r2
   1287c:	ldr	r1, [r4, #8]
   12880:	cmp	r1, r0
   12884:	bne	128a0 <__assert_fail@plt+0x1818>
   12888:	ldrd	r0, [r4, #16]
   1288c:	cmp	r1, r0
   12890:	bne	128a0 <__assert_fail@plt+0x1818>
   12894:	ldr	r0, [r4, #36]	; 0x24
   12898:	cmp	r0, #0
   1289c:	beq	128b8 <__assert_fail@plt+0x1830>
   128a0:	mov	r0, r4
   128a4:	mov	r2, r6
   128a8:	mov	r3, r5
   128ac:	sub	sp, fp, #16
   128b0:	pop	{r4, r5, r6, r7, fp, lr}
   128b4:	b	11004 <fseeko64@plt>
   128b8:	ldr	r7, [fp, #8]
   128bc:	mov	r0, r4
   128c0:	bl	10fd4 <fileno@plt>
   128c4:	mov	r2, r6
   128c8:	mov	r3, r5
   128cc:	str	r7, [sp]
   128d0:	bl	10efc <lseek64@plt>
   128d4:	and	r2, r0, r1
   128d8:	cmn	r2, #1
   128dc:	mvneq	r0, #0
   128e0:	subeq	sp, fp, #16
   128e4:	popeq	{r4, r5, r6, r7, fp, pc}
   128e8:	strd	r0, [r4, #80]	; 0x50
   128ec:	ldr	r0, [r4]
   128f0:	bic	r0, r0, #16
   128f4:	str	r0, [r4]
   128f8:	mov	r0, #0
   128fc:	sub	sp, fp, #16
   12900:	pop	{r4, r5, r6, r7, fp, pc}
   12904:	push	{r4, r5, fp, lr}
   12908:	add	fp, sp, #8
   1290c:	cmp	r0, #0
   12910:	beq	129a4 <__assert_fail@plt+0x191c>
   12914:	mov	r1, #47	; 0x2f
   12918:	mov	r4, r0
   1291c:	bl	11028 <strrchr@plt>
   12920:	cmp	r0, #0
   12924:	mov	r5, r4
   12928:	addne	r5, r0, #1
   1292c:	sub	r0, r5, r4
   12930:	cmp	r0, #7
   12934:	blt	12988 <__assert_fail@plt+0x1900>
   12938:	movw	r1, #31743	; 0x7bff
   1293c:	sub	r0, r5, #7
   12940:	mov	r2, #7
   12944:	movt	r1, #1
   12948:	bl	11070 <strncmp@plt>
   1294c:	cmp	r0, #0
   12950:	bne	12988 <__assert_fail@plt+0x1900>
   12954:	movw	r1, #31751	; 0x7c07
   12958:	mov	r0, r5
   1295c:	mov	r2, #3
   12960:	movt	r1, #1
   12964:	bl	11070 <strncmp@plt>
   12968:	cmp	r0, #0
   1296c:	beq	12978 <__assert_fail@plt+0x18f0>
   12970:	mov	r4, r5
   12974:	b	12988 <__assert_fail@plt+0x1900>
   12978:	movw	r0, #37168	; 0x9130
   1297c:	add	r4, r5, #3
   12980:	movt	r0, #2
   12984:	str	r4, [r0]
   12988:	movw	r0, #37172	; 0x9134
   1298c:	movt	r0, #2
   12990:	str	r4, [r0]
   12994:	movw	r0, #37216	; 0x9160
   12998:	movt	r0, #2
   1299c:	str	r4, [r0]
   129a0:	pop	{r4, r5, fp, pc}
   129a4:	movw	r0, #37184	; 0x9140
   129a8:	mov	r1, #55	; 0x37
   129ac:	mov	r2, #1
   129b0:	movt	r0, #2
   129b4:	ldr	r3, [r0]
   129b8:	movw	r0, #31687	; 0x7bc7
   129bc:	movt	r0, #1
   129c0:	bl	10ef0 <fwrite@plt>
   129c4:	bl	1107c <abort@plt>
   129c8:	push	{r4, r5, r6, sl, fp, lr}
   129cc:	add	fp, sp, #16
   129d0:	mov	r4, r0
   129d4:	movw	r0, #37224	; 0x9168
   129d8:	movt	r0, #2
   129dc:	cmp	r4, #0
   129e0:	moveq	r4, r0
   129e4:	bl	10fa4 <__errno_location@plt>
   129e8:	ldr	r6, [r0]
   129ec:	mov	r5, r0
   129f0:	mov	r0, r4
   129f4:	mov	r1, #48	; 0x30
   129f8:	bl	153b8 <__assert_fail@plt+0x4330>
   129fc:	str	r6, [r5]
   12a00:	pop	{r4, r5, r6, sl, fp, pc}
   12a04:	movw	r1, #37224	; 0x9168
   12a08:	cmp	r0, #0
   12a0c:	movt	r1, #2
   12a10:	movne	r1, r0
   12a14:	ldr	r0, [r1]
   12a18:	bx	lr
   12a1c:	movw	r2, #37224	; 0x9168
   12a20:	cmp	r0, #0
   12a24:	movt	r2, #2
   12a28:	movne	r2, r0
   12a2c:	str	r1, [r2]
   12a30:	bx	lr
   12a34:	movw	r3, #37224	; 0x9168
   12a38:	cmp	r0, #0
   12a3c:	movt	r3, #2
   12a40:	movne	r3, r0
   12a44:	ubfx	r0, r1, #5, #3
   12a48:	and	r1, r1, #31
   12a4c:	add	r0, r3, r0, lsl #2
   12a50:	ldr	r3, [r0, #8]
   12a54:	eor	r2, r2, r3, lsr r1
   12a58:	and	r2, r2, #1
   12a5c:	eor	r2, r3, r2, lsl r1
   12a60:	str	r2, [r0, #8]
   12a64:	mov	r0, #1
   12a68:	and	r0, r0, r3, lsr r1
   12a6c:	bx	lr
   12a70:	movw	r2, #37224	; 0x9168
   12a74:	cmp	r0, #0
   12a78:	movt	r2, #2
   12a7c:	movne	r2, r0
   12a80:	ldr	r0, [r2, #4]
   12a84:	str	r1, [r2, #4]
   12a88:	bx	lr
   12a8c:	movw	r3, #37224	; 0x9168
   12a90:	cmp	r0, #0
   12a94:	movt	r3, #2
   12a98:	movne	r3, r0
   12a9c:	cmp	r1, #0
   12aa0:	mov	r0, #10
   12aa4:	cmpne	r2, #0
   12aa8:	str	r0, [r3]
   12aac:	bne	12abc <__assert_fail@plt+0x1a34>
   12ab0:	push	{fp, lr}
   12ab4:	mov	fp, sp
   12ab8:	bl	1107c <abort@plt>
   12abc:	str	r1, [r3, #40]	; 0x28
   12ac0:	str	r2, [r3, #44]	; 0x2c
   12ac4:	bx	lr
   12ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12acc:	add	fp, sp, #28
   12ad0:	sub	sp, sp, #20
   12ad4:	mov	r7, r0
   12ad8:	ldr	r0, [fp, #8]
   12adc:	movw	r5, #37224	; 0x9168
   12ae0:	mov	r8, r3
   12ae4:	mov	r9, r2
   12ae8:	mov	sl, r1
   12aec:	movt	r5, #2
   12af0:	cmp	r0, #0
   12af4:	movne	r5, r0
   12af8:	bl	10fa4 <__errno_location@plt>
   12afc:	mov	r4, r0
   12b00:	ldm	r5, {r0, r1}
   12b04:	ldr	r2, [r5, #40]	; 0x28
   12b08:	ldr	r3, [r5, #44]	; 0x2c
   12b0c:	add	r5, r5, #8
   12b10:	ldr	r6, [r4]
   12b14:	stm	sp, {r0, r1, r5}
   12b18:	str	r2, [sp, #12]
   12b1c:	str	r3, [sp, #16]
   12b20:	mov	r0, r7
   12b24:	mov	r1, sl
   12b28:	mov	r2, r9
   12b2c:	mov	r3, r8
   12b30:	bl	12b40 <__assert_fail@plt+0x1ab8>
   12b34:	str	r6, [r4]
   12b38:	sub	sp, fp, #28
   12b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b44:	add	fp, sp, #28
   12b48:	sub	sp, sp, #156	; 0x9c
   12b4c:	str	r0, [sp, #76]	; 0x4c
   12b50:	ldr	r0, [fp, #12]
   12b54:	mov	r6, r1
   12b58:	str	r3, [sp, #84]	; 0x54
   12b5c:	str	r2, [fp, #-84]	; 0xffffffac
   12b60:	and	r1, r0, #4
   12b64:	str	r1, [sp, #24]
   12b68:	and	r1, r0, #1
   12b6c:	str	r1, [sp, #28]
   12b70:	ubfx	r8, r0, #1, #1
   12b74:	bl	10f08 <__ctype_get_mb_cur_max@plt>
   12b78:	str	r0, [sp, #32]
   12b7c:	ldr	r0, [fp, #24]
   12b80:	ldr	r7, [fp, #8]
   12b84:	mov	r1, #0
   12b88:	mov	r2, #0
   12b8c:	mov	r4, #1
   12b90:	str	r1, [sp, #52]	; 0x34
   12b94:	str	r0, [sp, #72]	; 0x48
   12b98:	ldr	r0, [fp, #20]
   12b9c:	str	r0, [sp, #68]	; 0x44
   12ba0:	mov	r0, #0
   12ba4:	str	r0, [sp, #48]	; 0x30
   12ba8:	mov	r0, #0
   12bac:	str	r0, [sp, #92]	; 0x5c
   12bb0:	mov	r0, #0
   12bb4:	str	r0, [fp, #-76]	; 0xffffffb4
   12bb8:	mov	r0, #0
   12bbc:	cmp	r7, #10
   12bc0:	bhi	13ea8 <__assert_fail@plt+0x2e20>
   12bc4:	add	r1, pc, #28
   12bc8:	mov	sl, r6
   12bcc:	ldr	r6, [sp, #76]	; 0x4c
   12bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bd4:	ldr	lr, [sp, #84]	; 0x54
   12bd8:	mov	r9, #0
   12bdc:	mov	r3, #1
   12be0:	mov	r5, #0
   12be4:	ldr	pc, [r1, r7, lsl #2]
   12be8:			; <UNDEFINED> instruction: 0x00012cb8
   12bec:	strdeq	r2, [r1], -r4
   12bf0:	andeq	r2, r1, r8, asr #25
   12bf4:			; <UNDEFINED> instruction: 0x00012cb0
   12bf8:	andeq	r2, r1, r8, ror #25
   12bfc:	andeq	r2, r1, ip, lsl sp
   12c00:	ldrdeq	r2, [r1], -r8
   12c04:	andeq	r2, r1, r8, lsr #30
   12c08:	andeq	r2, r1, r4, lsl ip
   12c0c:	andeq	r2, r1, r4, lsl ip
   12c10:			; <UNDEFINED> instruction: 0x00012ebc
   12c14:	mov	r9, r4
   12c18:	movw	r4, #31833	; 0x7c59
   12c1c:	mov	r5, r8
   12c20:	mov	r8, r2
   12c24:	mov	r0, #0
   12c28:	mov	r2, #5
   12c2c:	movt	r4, #1
   12c30:	mov	r1, r4
   12c34:	bl	10ec0 <dcgettext@plt>
   12c38:	cmp	r0, r4
   12c3c:	str	r0, [sp, #68]	; 0x44
   12c40:	bne	12dd0 <__assert_fail@plt+0x1d48>
   12c44:	bl	16fb8 <__assert_fail@plt+0x5f30>
   12c48:	ldrb	r1, [r0]
   12c4c:	and	r1, r1, #223	; 0xdf
   12c50:	cmp	r1, #71	; 0x47
   12c54:	beq	12d9c <__assert_fail@plt+0x1d14>
   12c58:	cmp	r1, #85	; 0x55
   12c5c:	bne	12db4 <__assert_fail@plt+0x1d2c>
   12c60:	ldrb	r1, [r0, #1]
   12c64:	and	r1, r1, #223	; 0xdf
   12c68:	cmp	r1, #84	; 0x54
   12c6c:	bne	12db4 <__assert_fail@plt+0x1d2c>
   12c70:	ldrb	r1, [r0, #2]
   12c74:	and	r1, r1, #223	; 0xdf
   12c78:	cmp	r1, #70	; 0x46
   12c7c:	bne	12db4 <__assert_fail@plt+0x1d2c>
   12c80:	ldrb	r1, [r0, #3]
   12c84:	cmp	r1, #45	; 0x2d
   12c88:	ldrbeq	r1, [r0, #4]
   12c8c:	cmpeq	r1, #56	; 0x38
   12c90:	bne	12db4 <__assert_fail@plt+0x1d2c>
   12c94:	ldrb	r0, [r0, #5]
   12c98:	cmp	r0, #0
   12c9c:	movw	r0, #31837	; 0x7c5d
   12ca0:	movt	r0, #1
   12ca4:	str	r0, [sp, #68]	; 0x44
   12ca8:	bne	12db4 <__assert_fail@plt+0x1d2c>
   12cac:	b	12dd0 <__assert_fail@plt+0x1d48>
   12cb0:	mov	r0, #1
   12cb4:	b	12cf4 <__assert_fail@plt+0x1c6c>
   12cb8:	mov	r7, #0
   12cbc:	mov	r9, #0
   12cc0:	mov	r3, r0
   12cc4:	b	12d94 <__assert_fail@plt+0x1d0c>
   12cc8:	tst	r8, #1
   12ccc:	bne	12cf4 <__assert_fail@plt+0x1c6c>
   12cd0:	mov	r3, r0
   12cd4:	b	12d4c <__assert_fail@plt+0x1cc4>
   12cd8:	mov	r0, #1
   12cdc:	mov	r9, #0
   12ce0:	mov	r7, #5
   12ce4:	b	12d30 <__assert_fail@plt+0x1ca8>
   12ce8:	mov	r3, #1
   12cec:	tst	r8, #1
   12cf0:	beq	12d4c <__assert_fail@plt+0x1cc4>
   12cf4:	mov	r1, #1
   12cf8:	mov	r9, #0
   12cfc:	mov	r7, #2
   12d00:	mov	r3, r0
   12d04:	mov	r5, #1
   12d08:	str	r1, [fp, #-76]	; 0xffffffb4
   12d0c:	movw	r1, #31835	; 0x7c5b
   12d10:	movt	r1, #1
   12d14:	str	r1, [sp, #92]	; 0x5c
   12d18:	b	12f28 <__assert_fail@plt+0x1ea0>
   12d1c:	mov	r7, #5
   12d20:	tst	r8, #1
   12d24:	beq	12d6c <__assert_fail@plt+0x1ce4>
   12d28:	mov	r0, #1
   12d2c:	mov	r9, #0
   12d30:	str	r0, [fp, #-76]	; 0xffffffb4
   12d34:	movw	r0, #31831	; 0x7c57
   12d38:	mov	r3, #1
   12d3c:	mov	r5, #1
   12d40:	movt	r0, #1
   12d44:	str	r0, [sp, #92]	; 0x5c
   12d48:	b	12f28 <__assert_fail@plt+0x1ea0>
   12d4c:	cmp	sl, #0
   12d50:	mov	r9, #1
   12d54:	mov	r7, #2
   12d58:	movne	r0, #39	; 0x27
   12d5c:	strbne	r0, [r6]
   12d60:	movw	r0, #31835	; 0x7c5b
   12d64:	movt	r0, #1
   12d68:	b	12d88 <__assert_fail@plt+0x1d00>
   12d6c:	cmp	sl, #0
   12d70:	mov	r9, #1
   12d74:	mov	r3, #1
   12d78:	movne	r0, #34	; 0x22
   12d7c:	strbne	r0, [r6]
   12d80:	movw	r0, #31831	; 0x7c57
   12d84:	movt	r0, #1
   12d88:	str	r0, [sp, #92]	; 0x5c
   12d8c:	mov	r0, #1
   12d90:	str	r0, [fp, #-76]	; 0xffffffb4
   12d94:	mov	r5, #0
   12d98:	b	12f28 <__assert_fail@plt+0x1ea0>
   12d9c:	ldrb	r1, [r0, #1]
   12da0:	and	r1, r1, #223	; 0xdf
   12da4:	cmp	r1, #66	; 0x42
   12da8:	ldrbeq	r1, [r0, #2]
   12dac:	cmpeq	r1, #49	; 0x31
   12db0:	beq	13cd0 <__assert_fail@plt+0x2c48>
   12db4:	movw	r0, #31835	; 0x7c5b
   12db8:	movw	r1, #31831	; 0x7c57
   12dbc:	cmp	r7, #9
   12dc0:	movt	r0, #1
   12dc4:	movt	r1, #1
   12dc8:	moveq	r0, r1
   12dcc:	str	r0, [sp, #68]	; 0x44
   12dd0:	movw	r4, #31835	; 0x7c5b
   12dd4:	mov	r0, #0
   12dd8:	mov	r2, #5
   12ddc:	movt	r4, #1
   12de0:	mov	r1, r4
   12de4:	bl	10ec0 <dcgettext@plt>
   12de8:	cmp	r0, r4
   12dec:	str	r0, [sp, #72]	; 0x48
   12df0:	beq	12e00 <__assert_fail@plt+0x1d78>
   12df4:	mov	r4, r9
   12df8:	mov	r2, r8
   12dfc:	b	12eb8 <__assert_fail@plt+0x1e30>
   12e00:	bl	16fb8 <__assert_fail@plt+0x5f30>
   12e04:	ldrb	r1, [r0]
   12e08:	mov	r4, r9
   12e0c:	and	r1, r1, #223	; 0xdf
   12e10:	cmp	r1, #71	; 0x47
   12e14:	beq	12e70 <__assert_fail@plt+0x1de8>
   12e18:	cmp	r1, #85	; 0x55
   12e1c:	mov	r2, r8
   12e20:	bne	12e98 <__assert_fail@plt+0x1e10>
   12e24:	ldrb	r1, [r0, #1]
   12e28:	and	r1, r1, #223	; 0xdf
   12e2c:	cmp	r1, #84	; 0x54
   12e30:	bne	12e98 <__assert_fail@plt+0x1e10>
   12e34:	ldrb	r1, [r0, #2]
   12e38:	and	r1, r1, #223	; 0xdf
   12e3c:	cmp	r1, #70	; 0x46
   12e40:	ldrbeq	r1, [r0, #3]
   12e44:	cmpeq	r1, #45	; 0x2d
   12e48:	bne	12e98 <__assert_fail@plt+0x1e10>
   12e4c:	ldrb	r1, [r0, #4]
   12e50:	cmp	r1, #56	; 0x38
   12e54:	ldrbeq	r0, [r0, #5]
   12e58:	cmpeq	r0, #0
   12e5c:	bne	12e98 <__assert_fail@plt+0x1e10>
   12e60:	movw	r0, #31841	; 0x7c61
   12e64:	movt	r0, #1
   12e68:	str	r0, [sp, #72]	; 0x48
   12e6c:	b	12eb8 <__assert_fail@plt+0x1e30>
   12e70:	ldrb	r1, [r0, #1]
   12e74:	mov	r2, r8
   12e78:	and	r1, r1, #223	; 0xdf
   12e7c:	cmp	r1, #66	; 0x42
   12e80:	bne	12e98 <__assert_fail@plt+0x1e10>
   12e84:	ldrb	r1, [r0, #2]
   12e88:	cmp	r1, #49	; 0x31
   12e8c:	ldrbeq	r1, [r0, #3]
   12e90:	cmpeq	r1, #56	; 0x38
   12e94:	beq	13d14 <__assert_fail@plt+0x2c8c>
   12e98:	movw	r0, #31835	; 0x7c5b
   12e9c:	cmp	r7, #9
   12ea0:	movt	r0, #1
   12ea4:	mov	r1, r0
   12ea8:	movw	r0, #31831	; 0x7c57
   12eac:	movt	r0, #1
   12eb0:	moveq	r1, r0
   12eb4:	str	r1, [sp, #72]	; 0x48
   12eb8:	mov	r8, r5
   12ebc:	mov	r9, #0
   12ec0:	tst	r8, #1
   12ec4:	mov	r5, r8
   12ec8:	str	r2, [fp, #-48]	; 0xffffffd0
   12ecc:	bne	12f04 <__assert_fail@plt+0x1e7c>
   12ed0:	ldr	r0, [sp, #68]	; 0x44
   12ed4:	ldrb	r0, [r0]
   12ed8:	cmp	r0, #0
   12edc:	beq	12f04 <__assert_fail@plt+0x1e7c>
   12ee0:	ldr	r1, [sp, #68]	; 0x44
   12ee4:	mov	r9, #0
   12ee8:	add	r1, r1, #1
   12eec:	cmp	r9, sl
   12ef0:	strbcc	r0, [r6, r9]
   12ef4:	ldrb	r0, [r1, r9]
   12ef8:	add	r9, r9, #1
   12efc:	cmp	r0, #0
   12f00:	bne	12eec <__assert_fail@plt+0x1e64>
   12f04:	ldr	r8, [sp, #72]	; 0x48
   12f08:	mov	r0, r8
   12f0c:	bl	10f8c <strlen@plt>
   12f10:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f14:	ldr	lr, [sp, #84]	; 0x54
   12f18:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12f1c:	str	r0, [fp, #-76]	; 0xffffffb4
   12f20:	str	r8, [sp, #92]	; 0x5c
   12f24:	mov	r3, #1
   12f28:	ldr	r0, [fp, #16]
   12f2c:	str	r7, [fp, #-64]	; 0xffffffc0
   12f30:	str	r5, [fp, #-72]	; 0xffffffb8
   12f34:	str	r3, [sp, #80]	; 0x50
   12f38:	cmp	r0, #0
   12f3c:	movwne	r0, #1
   12f40:	and	r0, r0, r5
   12f44:	str	r0, [fp, #-88]	; 0xffffffa8
   12f48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f4c:	cmp	r0, #0
   12f50:	movwne	r0, #1
   12f54:	subs	r7, r7, #2
   12f58:	and	r1, r0, r5
   12f5c:	str	r7, [fp, #-80]	; 0xffffffb0
   12f60:	and	r1, r3, r1
   12f64:	str	r1, [sp, #40]	; 0x28
   12f68:	clz	r1, r7
   12f6c:	lsr	r1, r1, #5
   12f70:	and	r1, r1, r5
   12f74:	eor	r5, r5, #1
   12f78:	str	r1, [sp, #36]	; 0x24
   12f7c:	mov	r1, r7
   12f80:	str	r5, [sp, #88]	; 0x58
   12f84:	mov	r7, #0
   12f88:	movwne	r1, #1
   12f8c:	orr	r5, r1, r5
   12f90:	and	r1, r1, r3
   12f94:	and	r0, r0, r1
   12f98:	str	r5, [sp, #60]	; 0x3c
   12f9c:	str	r1, [fp, #-68]	; 0xffffffbc
   12fa0:	str	r0, [fp, #-60]	; 0xffffffc4
   12fa4:	eor	r0, r3, #1
   12fa8:	str	r0, [sp, #44]	; 0x2c
   12fac:	cmn	lr, #1
   12fb0:	beq	12fc0 <__assert_fail@plt+0x1f38>
   12fb4:	cmp	r7, lr
   12fb8:	bne	12fcc <__assert_fail@plt+0x1f44>
   12fbc:	b	13c44 <__assert_fail@plt+0x2bbc>
   12fc0:	ldrb	r0, [ip, r7]
   12fc4:	cmp	r0, #0
   12fc8:	beq	13c4c <__assert_fail@plt+0x2bc4>
   12fcc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fd0:	mov	r8, #0
   12fd4:	str	r4, [fp, #-52]	; 0xffffffcc
   12fd8:	str	r2, [fp, #-48]	; 0xffffffd0
   12fdc:	cmp	r0, #0
   12fe0:	beq	13014 <__assert_fail@plt+0x1f8c>
   12fe4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fe8:	add	r4, r7, r0
   12fec:	cmp	r0, #2
   12ff0:	bcc	1300c <__assert_fail@plt+0x1f84>
   12ff4:	cmn	lr, #1
   12ff8:	bne	1300c <__assert_fail@plt+0x1f84>
   12ffc:	mov	r0, ip
   13000:	bl	10f8c <strlen@plt>
   13004:	ldr	ip, [fp, #-84]	; 0xffffffac
   13008:	mov	lr, r0
   1300c:	cmp	r4, lr
   13010:	bls	1302c <__assert_fail@plt+0x1fa4>
   13014:	mov	r0, #0
   13018:	str	r0, [fp, #-56]	; 0xffffffc8
   1301c:	ldrb	r5, [ip, r7]
   13020:	cmp	r5, #126	; 0x7e
   13024:	bls	1307c <__assert_fail@plt+0x1ff4>
   13028:	b	13484 <__assert_fail@plt+0x23fc>
   1302c:	ldr	r1, [sp, #92]	; 0x5c
   13030:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13034:	add	r0, ip, r7
   13038:	mov	r4, lr
   1303c:	bl	10eb4 <memcmp@plt>
   13040:	ldr	r2, [sp, #88]	; 0x58
   13044:	cmp	r0, #0
   13048:	mov	r1, r0
   1304c:	movwne	r1, #1
   13050:	orr	r1, r1, r2
   13054:	tst	r1, #1
   13058:	beq	13d58 <__assert_fail@plt+0x2cd0>
   1305c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13060:	clz	r0, r0
   13064:	mov	lr, r4
   13068:	lsr	r0, r0, #5
   1306c:	str	r0, [fp, #-56]	; 0xffffffc8
   13070:	ldrb	r5, [ip, r7]
   13074:	cmp	r5, #126	; 0x7e
   13078:	bhi	13484 <__assert_fail@plt+0x23fc>
   1307c:	add	r3, pc, #16
   13080:	mov	r4, #1
   13084:	mov	r2, #110	; 0x6e
   13088:	mov	r0, #97	; 0x61
   1308c:	mov	r1, #0
   13090:	ldr	pc, [r3, r5, lsl #2]
   13094:	andeq	r3, r1, r4, ror #6
   13098:	andeq	r3, r1, r4, lsl #9
   1309c:	andeq	r3, r1, r4, lsl #9
   130a0:	andeq	r3, r1, r4, lsl #9
   130a4:	andeq	r3, r1, r4, lsl #9
   130a8:	andeq	r3, r1, r4, lsl #9
   130ac:	andeq	r3, r1, r4, lsl #9
   130b0:	andeq	r3, r1, r0, ror #10
   130b4:	andeq	r3, r1, r4, asr #6
   130b8:	andeq	r3, r1, ip, lsr #6
   130bc:	andeq	r3, r1, r0, asr r3
   130c0:	andeq	r3, r1, r0, ror #7
   130c4:	andeq	r3, r1, r4, lsr #6
   130c8:	andeq	r3, r1, ip, asr #6
   130cc:	andeq	r3, r1, r4, lsl #9
   130d0:	andeq	r3, r1, r4, lsl #9
   130d4:	andeq	r3, r1, r4, lsl #9
   130d8:	andeq	r3, r1, r4, lsl #9
   130dc:	andeq	r3, r1, r4, lsl #9
   130e0:	andeq	r3, r1, r4, lsl #9
   130e4:	andeq	r3, r1, r4, lsl #9
   130e8:	andeq	r3, r1, r4, lsl #9
   130ec:	andeq	r3, r1, r4, lsl #9
   130f0:	andeq	r3, r1, r4, lsl #9
   130f4:	andeq	r3, r1, r4, lsl #9
   130f8:	andeq	r3, r1, r4, lsl #9
   130fc:	andeq	r3, r1, r4, lsl #9
   13100:	andeq	r3, r1, r4, lsl #9
   13104:	andeq	r3, r1, r4, lsl #9
   13108:	andeq	r3, r1, r4, lsl #9
   1310c:	andeq	r3, r1, r4, lsl #9
   13110:	andeq	r3, r1, r4, lsl #9
   13114:	ldrdeq	r3, [r1], -ip
   13118:	andeq	r3, r1, r0, ror #9
   1311c:	andeq	r3, r1, r0, ror #9
   13120:			; <UNDEFINED> instruction: 0x000132b0
   13124:	andeq	r3, r1, r0, ror #9
   13128:	muleq	r1, r0, r2
   1312c:	andeq	r3, r1, r0, ror #9
   13130:	andeq	r3, r1, r8, ror #7
   13134:	andeq	r3, r1, r0, ror #9
   13138:	andeq	r3, r1, r0, ror #9
   1313c:	andeq	r3, r1, r0, ror #9
   13140:	muleq	r1, r0, r2
   13144:	muleq	r1, r0, r2
   13148:	muleq	r1, r0, r2
   1314c:	muleq	r1, r0, r2
   13150:	muleq	r1, r0, r2
   13154:	muleq	r1, r0, r2
   13158:	muleq	r1, r0, r2
   1315c:	muleq	r1, r0, r2
   13160:	muleq	r1, r0, r2
   13164:	muleq	r1, r0, r2
   13168:	muleq	r1, r0, r2
   1316c:	muleq	r1, r0, r2
   13170:	muleq	r1, r0, r2
   13174:	muleq	r1, r0, r2
   13178:	muleq	r1, r0, r2
   1317c:	muleq	r1, r0, r2
   13180:	andeq	r3, r1, r0, ror #9
   13184:	andeq	r3, r1, r0, ror #9
   13188:	andeq	r3, r1, r0, ror #9
   1318c:	andeq	r3, r1, r0, ror #9
   13190:	andeq	r3, r1, r4, lsr #7
   13194:	andeq	r3, r1, r4, lsl #9
   13198:	muleq	r1, r0, r2
   1319c:	muleq	r1, r0, r2
   131a0:	muleq	r1, r0, r2
   131a4:	muleq	r1, r0, r2
   131a8:	muleq	r1, r0, r2
   131ac:	muleq	r1, r0, r2
   131b0:	muleq	r1, r0, r2
   131b4:	muleq	r1, r0, r2
   131b8:	muleq	r1, r0, r2
   131bc:	muleq	r1, r0, r2
   131c0:	muleq	r1, r0, r2
   131c4:	muleq	r1, r0, r2
   131c8:	muleq	r1, r0, r2
   131cc:	muleq	r1, r0, r2
   131d0:	muleq	r1, r0, r2
   131d4:	muleq	r1, r0, r2
   131d8:	muleq	r1, r0, r2
   131dc:	muleq	r1, r0, r2
   131e0:	muleq	r1, r0, r2
   131e4:	muleq	r1, r0, r2
   131e8:	muleq	r1, r0, r2
   131ec:	muleq	r1, r0, r2
   131f0:	muleq	r1, r0, r2
   131f4:	muleq	r1, r0, r2
   131f8:	muleq	r1, r0, r2
   131fc:	muleq	r1, r0, r2
   13200:	andeq	r3, r1, r0, ror #9
   13204:	strdeq	r3, [r1], -r0
   13208:	muleq	r1, r0, r2
   1320c:	andeq	r3, r1, r0, ror #9
   13210:	muleq	r1, r0, r2
   13214:	andeq	r3, r1, r0, ror #9
   13218:	muleq	r1, r0, r2
   1321c:	muleq	r1, r0, r2
   13220:	muleq	r1, r0, r2
   13224:	muleq	r1, r0, r2
   13228:	muleq	r1, r0, r2
   1322c:	muleq	r1, r0, r2
   13230:	muleq	r1, r0, r2
   13234:	muleq	r1, r0, r2
   13238:	muleq	r1, r0, r2
   1323c:	muleq	r1, r0, r2
   13240:	muleq	r1, r0, r2
   13244:	muleq	r1, r0, r2
   13248:	muleq	r1, r0, r2
   1324c:	muleq	r1, r0, r2
   13250:	muleq	r1, r0, r2
   13254:	muleq	r1, r0, r2
   13258:	muleq	r1, r0, r2
   1325c:	muleq	r1, r0, r2
   13260:	muleq	r1, r0, r2
   13264:	muleq	r1, r0, r2
   13268:	muleq	r1, r0, r2
   1326c:	muleq	r1, r0, r2
   13270:	muleq	r1, r0, r2
   13274:	muleq	r1, r0, r2
   13278:	muleq	r1, r0, r2
   1327c:	muleq	r1, r0, r2
   13280:	ldrdeq	r3, [r1], -r0
   13284:	andeq	r3, r1, r0, ror #9
   13288:	ldrdeq	r3, [r1], -r0
   1328c:			; <UNDEFINED> instruction: 0x000132b0
   13290:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13294:	cmp	r0, #0
   13298:	beq	13574 <__assert_fail@plt+0x24ec>
   1329c:	ldr	r0, [fp, #16]
   132a0:	cmp	r0, #0
   132a4:	mov	r0, r5
   132a8:	bne	13584 <__assert_fail@plt+0x24fc>
   132ac:	b	135a4 <__assert_fail@plt+0x251c>
   132b0:	mov	r4, #0
   132b4:	cmp	r7, #0
   132b8:	beq	134dc <__assert_fail@plt+0x2454>
   132bc:	mov	r8, #0
   132c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132c4:	cmp	r0, #0
   132c8:	bne	1329c <__assert_fail@plt+0x2214>
   132cc:	b	13574 <__assert_fail@plt+0x24ec>
   132d0:	mov	r4, #0
   132d4:	cmn	lr, #1
   132d8:	beq	134b4 <__assert_fail@plt+0x242c>
   132dc:	cmp	r7, #0
   132e0:	bne	132bc <__assert_fail@plt+0x2234>
   132e4:	cmp	lr, #1
   132e8:	beq	134dc <__assert_fail@plt+0x2454>
   132ec:	b	132bc <__assert_fail@plt+0x2234>
   132f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132f4:	cmp	r0, #2
   132f8:	bne	1350c <__assert_fail@plt+0x2484>
   132fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13300:	tst	r0, #1
   13304:	bne	13d6c <__assert_fail@plt+0x2ce4>
   13308:	mov	r8, #0
   1330c:	mov	r0, #92	; 0x5c
   13310:	mov	r4, #0
   13314:	cmp	r8, #0
   13318:	beq	1352c <__assert_fail@plt+0x24a4>
   1331c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13320:	b	13620 <__assert_fail@plt+0x2598>
   13324:	mov	r0, #102	; 0x66
   13328:	b	13560 <__assert_fail@plt+0x24d8>
   1332c:	mov	r2, #116	; 0x74
   13330:	ldr	r0, [sp, #60]	; 0x3c
   13334:	tst	r0, #1
   13338:	mov	r0, r2
   1333c:	bne	13560 <__assert_fail@plt+0x24d8>
   13340:	b	13d6c <__assert_fail@plt+0x2ce4>
   13344:	mov	r0, #98	; 0x62
   13348:	b	13560 <__assert_fail@plt+0x24d8>
   1334c:	mov	r2, #114	; 0x72
   13350:	ldr	r0, [sp, #60]	; 0x3c
   13354:	tst	r0, #1
   13358:	mov	r0, r2
   1335c:	bne	13560 <__assert_fail@plt+0x24d8>
   13360:	b	13d6c <__assert_fail@plt+0x2ce4>
   13364:	ldr	r0, [sp, #80]	; 0x50
   13368:	tst	r0, #1
   1336c:	beq	13648 <__assert_fail@plt+0x25c0>
   13370:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13374:	tst	r0, #1
   13378:	bne	13e94 <__assert_fail@plt+0x2e0c>
   1337c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13380:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13384:	cmp	r0, #2
   13388:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1338c:	movwne	r0, #1
   13390:	orr	r0, r0, r2
   13394:	tst	r0, #1
   13398:	beq	13940 <__assert_fail@plt+0x28b8>
   1339c:	mov	r0, r9
   133a0:	b	13974 <__assert_fail@plt+0x28ec>
   133a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133a8:	mov	r8, #0
   133ac:	mov	r5, #63	; 0x3f
   133b0:	cmp	r0, #5
   133b4:	beq	137fc <__assert_fail@plt+0x2774>
   133b8:	cmp	r0, #2
   133bc:	bne	138ac <__assert_fail@plt+0x2824>
   133c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133c4:	tst	r0, #1
   133c8:	bne	13d6c <__assert_fail@plt+0x2ce4>
   133cc:	mov	r4, #0
   133d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133d4:	cmp	r0, #0
   133d8:	bne	1329c <__assert_fail@plt+0x2214>
   133dc:	b	13574 <__assert_fail@plt+0x24ec>
   133e0:	mov	r0, #118	; 0x76
   133e4:	b	13560 <__assert_fail@plt+0x24d8>
   133e8:	mov	r0, #1
   133ec:	mov	r5, #39	; 0x27
   133f0:	str	r0, [sp, #52]	; 0x34
   133f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133f8:	cmp	r0, #2
   133fc:	bne	13470 <__assert_fail@plt+0x23e8>
   13400:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13404:	tst	r0, #1
   13408:	bne	13d6c <__assert_fail@plt+0x2ce4>
   1340c:	ldr	r2, [sp, #48]	; 0x30
   13410:	clz	r1, sl
   13414:	mov	r8, #0
   13418:	lsr	r1, r1, #5
   1341c:	cmp	r2, #0
   13420:	mov	r0, r2
   13424:	movwne	r0, #1
   13428:	orrs	r0, r0, r1
   1342c:	moveq	r2, sl
   13430:	moveq	sl, r0
   13434:	cmp	r9, sl
   13438:	str	r2, [sp, #48]	; 0x30
   1343c:	movcc	r0, #39	; 0x27
   13440:	strbcc	r0, [r6, r9]
   13444:	add	r0, r9, #1
   13448:	cmp	r0, sl
   1344c:	movcc	r1, #92	; 0x5c
   13450:	strbcc	r1, [r6, r0]
   13454:	add	r0, r9, #2
   13458:	add	r9, r9, #3
   1345c:	cmp	r0, sl
   13460:	movcc	r1, #39	; 0x27
   13464:	strbcc	r1, [r6, r0]
   13468:	mov	r0, #0
   1346c:	str	r0, [fp, #-48]	; 0xffffffd0
   13470:	mov	r4, #1
   13474:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13478:	cmp	r0, #0
   1347c:	bne	1329c <__assert_fail@plt+0x2214>
   13480:	b	13574 <__assert_fail@plt+0x24ec>
   13484:	ldr	r0, [sp, #32]
   13488:	cmp	r0, #1
   1348c:	bne	13678 <__assert_fail@plt+0x25f0>
   13490:	str	lr, [sp, #84]	; 0x54
   13494:	bl	10f74 <__ctype_b_loc@plt>
   13498:	ldr	r0, [r0]
   1349c:	ldr	ip, [fp, #-84]	; 0xffffffac
   134a0:	mov	r1, #1
   134a4:	add	r0, r0, r5, lsl #1
   134a8:	ldrb	r0, [r0, #1]
   134ac:	ubfx	r4, r0, #6, #1
   134b0:	b	13a70 <__assert_fail@plt+0x29e8>
   134b4:	cmp	r7, #0
   134b8:	ldrbeq	r0, [ip, #1]
   134bc:	cmpeq	r0, #0
   134c0:	beq	134dc <__assert_fail@plt+0x2454>
   134c4:	mvn	lr, #0
   134c8:	mov	r8, #0
   134cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   134d0:	cmp	r0, #0
   134d4:	bne	1329c <__assert_fail@plt+0x2214>
   134d8:	b	13574 <__assert_fail@plt+0x24ec>
   134dc:	mov	r1, #1
   134e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134e4:	cmp	r0, #2
   134e8:	bne	134f8 <__assert_fail@plt+0x2470>
   134ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134f0:	tst	r0, #1
   134f4:	bne	13d6c <__assert_fail@plt+0x2ce4>
   134f8:	mov	r4, r1
   134fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13500:	cmp	r0, #0
   13504:	bne	1329c <__assert_fail@plt+0x2214>
   13508:	b	13574 <__assert_fail@plt+0x24ec>
   1350c:	ldr	r1, [sp, #40]	; 0x28
   13510:	mov	r8, #0
   13514:	mov	r0, #92	; 0x5c
   13518:	cmp	r1, #0
   1351c:	beq	13560 <__assert_fail@plt+0x24d8>
   13520:	mov	r4, #0
   13524:	cmp	r8, #0
   13528:	bne	1331c <__assert_fail@plt+0x2294>
   1352c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13530:	tst	r2, #1
   13534:	beq	13620 <__assert_fail@plt+0x2598>
   13538:	cmp	r9, sl
   1353c:	movcc	r1, #39	; 0x27
   13540:	strbcc	r1, [r6, r9]
   13544:	add	r1, r9, #1
   13548:	add	r9, r9, #2
   1354c:	cmp	r1, sl
   13550:	movcc	r2, #39	; 0x27
   13554:	strbcc	r2, [r6, r1]
   13558:	mov	r2, #0
   1355c:	b	13620 <__assert_fail@plt+0x2598>
   13560:	ldr	r1, [sp, #80]	; 0x50
   13564:	mov	r4, #0
   13568:	mov	r8, #0
   1356c:	tst	r1, #1
   13570:	bne	135b0 <__assert_fail@plt+0x2528>
   13574:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13578:	cmp	r0, #0
   1357c:	mov	r0, r5
   13580:	beq	135a4 <__assert_fail@plt+0x251c>
   13584:	ldr	r1, [fp, #16]
   13588:	ubfx	r0, r5, #5, #3
   1358c:	mov	r2, #1
   13590:	ldr	r0, [r1, r0, lsl #2]
   13594:	and	r1, r5, #31
   13598:	tst	r0, r2, lsl r1
   1359c:	mov	r0, r5
   135a0:	bne	135b0 <__assert_fail@plt+0x2528>
   135a4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   135a8:	cmp	r1, #0
   135ac:	beq	13a08 <__assert_fail@plt+0x2980>
   135b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   135b4:	tst	r1, #1
   135b8:	bne	13d4c <__assert_fail@plt+0x2cc4>
   135bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   135c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   135c4:	cmp	r1, #2
   135c8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   135cc:	movwne	r1, #1
   135d0:	orr	r1, r1, r2
   135d4:	tst	r1, #1
   135d8:	bne	13610 <__assert_fail@plt+0x2588>
   135dc:	cmp	r9, sl
   135e0:	movcc	r1, #39	; 0x27
   135e4:	strbcc	r1, [r6, r9]
   135e8:	add	r1, r9, #1
   135ec:	cmp	r1, sl
   135f0:	movcc	r2, #36	; 0x24
   135f4:	strbcc	r2, [r6, r1]
   135f8:	add	r1, r9, #2
   135fc:	add	r9, r9, #3
   13600:	cmp	r1, sl
   13604:	movcc	r2, #39	; 0x27
   13608:	strbcc	r2, [r6, r1]
   1360c:	mov	r2, #1
   13610:	cmp	r9, sl
   13614:	movcc	r1, #92	; 0x5c
   13618:	strbcc	r1, [r6, r9]
   1361c:	add	r9, r9, #1
   13620:	cmp	r9, sl
   13624:	add	r7, r7, #1
   13628:	strbcc	r0, [r6, r9]
   1362c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13630:	add	r9, r9, #1
   13634:	and	r0, r0, r4
   13638:	mov	r4, r0
   1363c:	cmn	lr, #1
   13640:	bne	12fb4 <__assert_fail@plt+0x1f2c>
   13644:	b	12fc0 <__assert_fail@plt+0x1f38>
   13648:	ldr	r0, [sp, #28]
   1364c:	mov	r4, #0
   13650:	mov	r8, #0
   13654:	mov	r5, #0
   13658:	cmp	r0, #0
   1365c:	beq	13574 <__assert_fail@plt+0x24ec>
   13660:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13664:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13668:	add	r7, r7, #1
   1366c:	cmn	lr, #1
   13670:	bne	12fb4 <__assert_fail@plt+0x1f2c>
   13674:	b	12fc0 <__assert_fail@plt+0x1f38>
   13678:	mov	r0, #0
   1367c:	cmn	lr, #1
   13680:	str	r0, [fp, #-36]	; 0xffffffdc
   13684:	str	r0, [fp, #-40]	; 0xffffffd8
   13688:	bne	1369c <__assert_fail@plt+0x2614>
   1368c:	mov	r0, ip
   13690:	bl	10f8c <strlen@plt>
   13694:	ldr	ip, [fp, #-84]	; 0xffffffac
   13698:	mov	lr, r0
   1369c:	ldr	r0, [sp, #36]	; 0x24
   136a0:	str	sl, [sp, #56]	; 0x38
   136a4:	str	lr, [sp, #84]	; 0x54
   136a8:	cmp	r0, #0
   136ac:	beq	138c4 <__assert_fail@plt+0x283c>
   136b0:	add	r0, ip, r7
   136b4:	mov	r4, #1
   136b8:	mov	r6, #0
   136bc:	sub	sl, fp, #40	; 0x28
   136c0:	str	r0, [sp, #20]
   136c4:	str	r6, [sp, #64]	; 0x40
   136c8:	add	r6, r6, r7
   136cc:	sub	r0, fp, #44	; 0x2c
   136d0:	mov	r3, sl
   136d4:	add	r1, ip, r6
   136d8:	sub	r2, lr, r6
   136dc:	bl	16ff0 <__assert_fail@plt+0x5f68>
   136e0:	cmn	r0, #2
   136e4:	beq	13a20 <__assert_fail@plt+0x2998>
   136e8:	ldr	sl, [sp, #56]	; 0x38
   136ec:	cmn	r0, #1
   136f0:	beq	13a14 <__assert_fail@plt+0x298c>
   136f4:	cmp	r0, #0
   136f8:	beq	13a18 <__assert_fail@plt+0x2990>
   136fc:	cmp	r0, #2
   13700:	bcc	137c0 <__assert_fail@plt+0x2738>
   13704:	ldr	r1, [sp, #64]	; 0x40
   13708:	ldr	r2, [sp, #20]
   1370c:	add	r1, r2, r1
   13710:	mov	r2, #1
   13714:	ldrb	r3, [r1, r2]
   13718:	sub	r3, r3, #91	; 0x5b
   1371c:	cmp	r3, #33	; 0x21
   13720:	bhi	137b4 <__assert_fail@plt+0x272c>
   13724:	add	r6, pc, #0
   13728:	ldr	pc, [r6, r3, lsl #2]
   1372c:	andeq	r3, r1, r8, ror sp
   13730:	andeq	r3, r1, r8, ror sp
   13734:			; <UNDEFINED> instruction: 0x000137b4
   13738:	andeq	r3, r1, r8, ror sp
   1373c:			; <UNDEFINED> instruction: 0x000137b4
   13740:	andeq	r3, r1, r8, ror sp
   13744:			; <UNDEFINED> instruction: 0x000137b4
   13748:			; <UNDEFINED> instruction: 0x000137b4
   1374c:			; <UNDEFINED> instruction: 0x000137b4
   13750:			; <UNDEFINED> instruction: 0x000137b4
   13754:			; <UNDEFINED> instruction: 0x000137b4
   13758:			; <UNDEFINED> instruction: 0x000137b4
   1375c:			; <UNDEFINED> instruction: 0x000137b4
   13760:			; <UNDEFINED> instruction: 0x000137b4
   13764:			; <UNDEFINED> instruction: 0x000137b4
   13768:			; <UNDEFINED> instruction: 0x000137b4
   1376c:			; <UNDEFINED> instruction: 0x000137b4
   13770:			; <UNDEFINED> instruction: 0x000137b4
   13774:			; <UNDEFINED> instruction: 0x000137b4
   13778:			; <UNDEFINED> instruction: 0x000137b4
   1377c:			; <UNDEFINED> instruction: 0x000137b4
   13780:			; <UNDEFINED> instruction: 0x000137b4
   13784:			; <UNDEFINED> instruction: 0x000137b4
   13788:			; <UNDEFINED> instruction: 0x000137b4
   1378c:			; <UNDEFINED> instruction: 0x000137b4
   13790:			; <UNDEFINED> instruction: 0x000137b4
   13794:			; <UNDEFINED> instruction: 0x000137b4
   13798:			; <UNDEFINED> instruction: 0x000137b4
   1379c:			; <UNDEFINED> instruction: 0x000137b4
   137a0:			; <UNDEFINED> instruction: 0x000137b4
   137a4:			; <UNDEFINED> instruction: 0x000137b4
   137a8:			; <UNDEFINED> instruction: 0x000137b4
   137ac:			; <UNDEFINED> instruction: 0x000137b4
   137b0:	andeq	r3, r1, r8, ror sp
   137b4:	add	r2, r2, #1
   137b8:	cmp	r2, r0
   137bc:	bcc	13714 <__assert_fail@plt+0x268c>
   137c0:	ldr	r6, [sp, #64]	; 0x40
   137c4:	add	r6, r0, r6
   137c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   137cc:	bl	10ee4 <iswprint@plt>
   137d0:	cmp	r0, #0
   137d4:	sub	sl, fp, #40	; 0x28
   137d8:	movwne	r0, #1
   137dc:	and	r4, r4, r0
   137e0:	mov	r0, sl
   137e4:	bl	10e9c <mbsinit@plt>
   137e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   137ec:	ldr	lr, [sp, #84]	; 0x54
   137f0:	cmp	r0, #0
   137f4:	beq	136c4 <__assert_fail@plt+0x263c>
   137f8:	b	13a64 <__assert_fail@plt+0x29dc>
   137fc:	ldr	r0, [sp, #24]
   13800:	cmp	r0, #0
   13804:	beq	138ac <__assert_fail@plt+0x2824>
   13808:	add	r0, r7, #2
   1380c:	cmp	r0, lr
   13810:	bcs	138ac <__assert_fail@plt+0x2824>
   13814:	add	r1, ip, r7
   13818:	ldrb	r1, [r1, #1]
   1381c:	cmp	r1, #63	; 0x3f
   13820:	bne	138ac <__assert_fail@plt+0x2824>
   13824:	ldrb	r5, [ip, r0]
   13828:	sub	r1, r5, #33	; 0x21
   1382c:	cmp	r1, #29
   13830:	bhi	138ac <__assert_fail@plt+0x2824>
   13834:	movw	r3, #20929	; 0x51c1
   13838:	mov	r2, #1
   1383c:	movt	r3, #14336	; 0x3800
   13840:	tst	r3, r2, lsl r1
   13844:	beq	138ac <__assert_fail@plt+0x2824>
   13848:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1384c:	tst	r1, #1
   13850:	bne	13e9c <__assert_fail@plt+0x2e14>
   13854:	cmp	r9, sl
   13858:	mov	r7, r0
   1385c:	mov	r4, #0
   13860:	movcc	r1, #63	; 0x3f
   13864:	strbcc	r1, [r6, r9]
   13868:	add	r1, r9, #1
   1386c:	cmp	r1, sl
   13870:	movcc	r2, #34	; 0x22
   13874:	strbcc	r2, [r6, r1]
   13878:	add	r1, r9, #2
   1387c:	cmp	r1, sl
   13880:	movcc	r2, #34	; 0x22
   13884:	strbcc	r2, [r6, r1]
   13888:	add	r1, r9, #3
   1388c:	add	r9, r9, #4
   13890:	cmp	r1, sl
   13894:	movcc	r2, #63	; 0x3f
   13898:	strbcc	r2, [r6, r1]
   1389c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138a0:	cmp	r0, #0
   138a4:	bne	1329c <__assert_fail@plt+0x2214>
   138a8:	b	13574 <__assert_fail@plt+0x24ec>
   138ac:	mov	r5, #63	; 0x3f
   138b0:	mov	r4, #0
   138b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138b8:	cmp	r0, #0
   138bc:	bne	1329c <__assert_fail@plt+0x2214>
   138c0:	b	13574 <__assert_fail@plt+0x24ec>
   138c4:	mov	r4, #1
   138c8:	mov	r6, #0
   138cc:	sub	sl, fp, #40	; 0x28
   138d0:	str	r6, [sp, #64]	; 0x40
   138d4:	add	r6, r6, r7
   138d8:	sub	r0, fp, #44	; 0x2c
   138dc:	mov	r3, sl
   138e0:	add	r1, ip, r6
   138e4:	sub	r2, lr, r6
   138e8:	bl	16ff0 <__assert_fail@plt+0x5f68>
   138ec:	cmn	r0, #2
   138f0:	beq	13a20 <__assert_fail@plt+0x2998>
   138f4:	cmn	r0, #1
   138f8:	beq	13a14 <__assert_fail@plt+0x298c>
   138fc:	ldr	r6, [sp, #64]	; 0x40
   13900:	cmp	r0, #0
   13904:	beq	13a60 <__assert_fail@plt+0x29d8>
   13908:	add	r6, r0, r6
   1390c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13910:	bl	10ee4 <iswprint@plt>
   13914:	cmp	r0, #0
   13918:	sub	sl, fp, #40	; 0x28
   1391c:	movwne	r0, #1
   13920:	and	r4, r4, r0
   13924:	mov	r0, sl
   13928:	bl	10e9c <mbsinit@plt>
   1392c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13930:	ldr	lr, [sp, #84]	; 0x54
   13934:	cmp	r0, #0
   13938:	beq	138d0 <__assert_fail@plt+0x2848>
   1393c:	b	13a64 <__assert_fail@plt+0x29dc>
   13940:	cmp	r9, sl
   13944:	mov	r2, #1
   13948:	movcc	r0, #39	; 0x27
   1394c:	strbcc	r0, [r6, r9]
   13950:	add	r0, r9, #1
   13954:	cmp	r0, sl
   13958:	movcc	r1, #36	; 0x24
   1395c:	strbcc	r1, [r6, r0]
   13960:	add	r0, r9, #2
   13964:	cmp	r0, sl
   13968:	movcc	r1, #39	; 0x27
   1396c:	strbcc	r1, [r6, r0]
   13970:	add	r0, r9, #3
   13974:	cmp	r0, sl
   13978:	add	r9, r0, #1
   1397c:	str	r2, [fp, #-48]	; 0xffffffd0
   13980:	movcc	r1, #92	; 0x5c
   13984:	strbcc	r1, [r6, r0]
   13988:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1398c:	cmp	r1, #2
   13990:	beq	139f0 <__assert_fail@plt+0x2968>
   13994:	add	r1, r7, #1
   13998:	mov	r4, #0
   1399c:	mov	r8, #1
   139a0:	mov	r5, #48	; 0x30
   139a4:	cmp	r1, lr
   139a8:	bcs	13290 <__assert_fail@plt+0x2208>
   139ac:	ldrb	r1, [ip, r1]
   139b0:	sub	r1, r1, #48	; 0x30
   139b4:	uxtb	r1, r1
   139b8:	cmp	r1, #9
   139bc:	bhi	13290 <__assert_fail@plt+0x2208>
   139c0:	cmp	r9, sl
   139c4:	movcc	r1, #48	; 0x30
   139c8:	strbcc	r1, [r6, r9]
   139cc:	add	r1, r0, #2
   139d0:	add	r9, r0, #3
   139d4:	cmp	r1, sl
   139d8:	movcc	r2, #48	; 0x30
   139dc:	strbcc	r2, [r6, r1]
   139e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139e4:	cmp	r0, #0
   139e8:	bne	1329c <__assert_fail@plt+0x2214>
   139ec:	b	13574 <__assert_fail@plt+0x24ec>
   139f0:	mov	r0, #48	; 0x30
   139f4:	mov	r8, #1
   139f8:	mov	r4, #0
   139fc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13a00:	cmp	r1, #0
   13a04:	bne	135b0 <__assert_fail@plt+0x2528>
   13a08:	cmp	r8, #0
   13a0c:	beq	1352c <__assert_fail@plt+0x24a4>
   13a10:	b	1331c <__assert_fail@plt+0x2294>
   13a14:	mov	r4, #0
   13a18:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a1c:	b	13a58 <__assert_fail@plt+0x29d0>
   13a20:	ldr	r1, [sp, #84]	; 0x54
   13a24:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a28:	mov	r4, #0
   13a2c:	cmp	r6, r1
   13a30:	bcs	13a58 <__assert_fail@plt+0x29d0>
   13a34:	ldrb	r0, [ip, r6]
   13a38:	cmp	r0, #0
   13a3c:	beq	13a58 <__assert_fail@plt+0x29d0>
   13a40:	ldr	r0, [sp, #64]	; 0x40
   13a44:	add	r0, r0, #1
   13a48:	add	r6, r0, r7
   13a4c:	str	r0, [sp, #64]	; 0x40
   13a50:	cmp	r6, r1
   13a54:	bcc	13a34 <__assert_fail@plt+0x29ac>
   13a58:	ldr	r6, [sp, #64]	; 0x40
   13a5c:	b	13a64 <__assert_fail@plt+0x29dc>
   13a60:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a64:	mov	r1, r6
   13a68:	ldr	r6, [sp, #76]	; 0x4c
   13a6c:	ldr	sl, [sp, #56]	; 0x38
   13a70:	ldr	r0, [sp, #44]	; 0x2c
   13a74:	cmp	r1, #1
   13a78:	orr	r2, r4, r0
   13a7c:	mov	r0, r1
   13a80:	bhi	13aa0 <__assert_fail@plt+0x2a18>
   13a84:	tst	r2, #1
   13a88:	beq	13aa0 <__assert_fail@plt+0x2a18>
   13a8c:	ldr	lr, [sp, #84]	; 0x54
   13a90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a94:	cmp	r0, #0
   13a98:	bne	1329c <__assert_fail@plt+0x2214>
   13a9c:	b	13574 <__assert_fail@plt+0x24ec>
   13aa0:	str	r2, [sp, #64]	; 0x40
   13aa4:	add	r0, r0, r7
   13aa8:	add	r1, r7, #1
   13aac:	ldr	lr, [sp, #84]	; 0x54
   13ab0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ab4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ab8:	mov	r3, #0
   13abc:	str	r0, [sp, #56]	; 0x38
   13ac0:	ldr	r0, [sp, #64]	; 0x40
   13ac4:	tst	r0, #1
   13ac8:	bne	13bb0 <__assert_fail@plt+0x2b28>
   13acc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ad0:	tst	r0, #1
   13ad4:	bne	13d50 <__assert_fail@plt+0x2cc8>
   13ad8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13adc:	cmp	r7, #2
   13ae0:	movwne	r3, #1
   13ae4:	orr	r3, r3, r2
   13ae8:	tst	r3, #1
   13aec:	bne	13b24 <__assert_fail@plt+0x2a9c>
   13af0:	cmp	r9, sl
   13af4:	add	r3, r9, #1
   13af8:	movcc	r2, #39	; 0x27
   13afc:	strbcc	r2, [r6, r9]
   13b00:	cmp	r3, sl
   13b04:	movcc	r2, #36	; 0x24
   13b08:	strbcc	r2, [r6, r3]
   13b0c:	add	r3, r9, #2
   13b10:	add	r9, r9, #3
   13b14:	cmp	r3, sl
   13b18:	movcc	r2, #39	; 0x27
   13b1c:	strbcc	r2, [r6, r3]
   13b20:	mov	r2, #1
   13b24:	cmp	r9, sl
   13b28:	mov	r0, r2
   13b2c:	movcc	r3, #92	; 0x5c
   13b30:	strbcc	r3, [r6, r9]
   13b34:	add	r3, r9, #1
   13b38:	cmp	r3, sl
   13b3c:	andcc	r7, r5, #192	; 0xc0
   13b40:	movcc	r2, #48	; 0x30
   13b44:	orrcc	r7, r2, r7, lsr #6
   13b48:	strbcc	r7, [r6, r3]
   13b4c:	add	r3, r9, #2
   13b50:	add	r9, r9, #3
   13b54:	cmp	r3, sl
   13b58:	lsrcc	r7, r5, #3
   13b5c:	movcc	r2, #6
   13b60:	bficc	r7, r2, #3, #29
   13b64:	mov	r2, #6
   13b68:	strbcc	r7, [r6, r3]
   13b6c:	bfi	r5, r2, #3, #29
   13b70:	mov	r3, #1
   13b74:	mov	r2, r0
   13b78:	ldr	r0, [sp, #56]	; 0x38
   13b7c:	and	r8, r3, #1
   13b80:	cmp	r0, r1
   13b84:	bhi	13be4 <__assert_fail@plt+0x2b5c>
   13b88:	b	13c24 <__assert_fail@plt+0x2b9c>
   13b8c:	cmp	r9, sl
   13b90:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b94:	strbcc	r5, [r6, r9]
   13b98:	add	r9, r9, #1
   13b9c:	ldrb	r5, [ip, r1]
   13ba0:	add	r1, r1, #1
   13ba4:	ldr	r0, [sp, #64]	; 0x40
   13ba8:	tst	r0, #1
   13bac:	beq	13acc <__assert_fail@plt+0x2a44>
   13bb0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13bb4:	tst	r7, #1
   13bb8:	beq	13bcc <__assert_fail@plt+0x2b44>
   13bbc:	cmp	r9, sl
   13bc0:	movcc	r7, #92	; 0x5c
   13bc4:	strbcc	r7, [r6, r9]
   13bc8:	add	r9, r9, #1
   13bcc:	mov	r7, #0
   13bd0:	str	r7, [fp, #-56]	; 0xffffffc8
   13bd4:	ldr	r0, [sp, #56]	; 0x38
   13bd8:	and	r8, r3, #1
   13bdc:	cmp	r0, r1
   13be0:	bls	13c24 <__assert_fail@plt+0x2b9c>
   13be4:	cmp	r8, #0
   13be8:	mvn	r7, r2
   13bec:	movwne	r8, #1
   13bf0:	orr	r7, r7, r8
   13bf4:	tst	r7, #1
   13bf8:	bne	13b8c <__assert_fail@plt+0x2b04>
   13bfc:	cmp	r9, sl
   13c00:	movcc	r7, #39	; 0x27
   13c04:	strbcc	r7, [r6, r9]
   13c08:	add	r7, r9, #1
   13c0c:	add	r9, r9, #2
   13c10:	cmp	r7, sl
   13c14:	movcc	r2, #39	; 0x27
   13c18:	strbcc	r2, [r6, r7]
   13c1c:	mov	r2, #0
   13c20:	b	13b8c <__assert_fail@plt+0x2b04>
   13c24:	cmp	r8, #0
   13c28:	sub	r7, r1, #1
   13c2c:	mov	r0, r5
   13c30:	str	r2, [fp, #-48]	; 0xffffffd0
   13c34:	movwne	r8, #1
   13c38:	cmp	r8, #0
   13c3c:	beq	1352c <__assert_fail@plt+0x24a4>
   13c40:	b	1331c <__assert_fail@plt+0x2294>
   13c44:	mov	lr, r7
   13c48:	b	13c50 <__assert_fail@plt+0x2bc8>
   13c4c:	mvn	lr, #0
   13c50:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c54:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13c58:	eor	r0, r7, #2
   13c5c:	orr	r0, r0, r9
   13c60:	clz	r0, r0
   13c64:	lsr	r0, r0, #5
   13c68:	tst	r1, r0
   13c6c:	bne	13d6c <__assert_fail@plt+0x2ce4>
   13c70:	mov	r0, r1
   13c74:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13c78:	cmp	r7, #2
   13c7c:	movwne	r1, #1
   13c80:	orr	r0, r0, r1
   13c84:	tst	r0, #1
   13c88:	ldreq	r0, [sp, #52]	; 0x34
   13c8c:	streq	lr, [sp, #84]	; 0x54
   13c90:	eoreq	r0, r0, #1
   13c94:	tsteq	r0, #1
   13c98:	bne	13e30 <__assert_fail@plt+0x2da8>
   13c9c:	tst	r4, #1
   13ca0:	bne	13dec <__assert_fail@plt+0x2d64>
   13ca4:	ldr	r6, [sp, #48]	; 0x30
   13ca8:	mov	r8, #0
   13cac:	cmp	r6, #0
   13cb0:	beq	13e28 <__assert_fail@plt+0x2da0>
   13cb4:	ldr	r0, [sp, #80]	; 0x50
   13cb8:	mov	r1, #0
   13cbc:	cmp	sl, #0
   13cc0:	mov	r4, #0
   13cc4:	str	r1, [fp, #-72]	; 0xffffffb8
   13cc8:	beq	12bbc <__assert_fail@plt+0x1b34>
   13ccc:	b	13e30 <__assert_fail@plt+0x2da8>
   13cd0:	ldrb	r1, [r0, #3]
   13cd4:	cmp	r1, #56	; 0x38
   13cd8:	ldrbeq	r1, [r0, #4]
   13cdc:	cmpeq	r1, #48	; 0x30
   13ce0:	bne	12db4 <__assert_fail@plt+0x1d2c>
   13ce4:	ldrb	r1, [r0, #5]
   13ce8:	cmp	r1, #51	; 0x33
   13cec:	ldrbeq	r1, [r0, #6]
   13cf0:	cmpeq	r1, #48	; 0x30
   13cf4:	bne	12db4 <__assert_fail@plt+0x1d2c>
   13cf8:	ldrb	r0, [r0, #7]
   13cfc:	cmp	r0, #0
   13d00:	movw	r0, #31845	; 0x7c65
   13d04:	movt	r0, #1
   13d08:	str	r0, [sp, #68]	; 0x44
   13d0c:	bne	12db4 <__assert_fail@plt+0x1d2c>
   13d10:	b	12dd0 <__assert_fail@plt+0x1d48>
   13d14:	ldrb	r1, [r0, #4]
   13d18:	cmp	r1, #48	; 0x30
   13d1c:	ldrbeq	r1, [r0, #5]
   13d20:	cmpeq	r1, #51	; 0x33
   13d24:	bne	12e98 <__assert_fail@plt+0x1e10>
   13d28:	ldrb	r1, [r0, #6]
   13d2c:	cmp	r1, #48	; 0x30
   13d30:	ldrbeq	r0, [r0, #7]
   13d34:	cmpeq	r0, #0
   13d38:	bne	12e98 <__assert_fail@plt+0x1e10>
   13d3c:	movw	r0, #31849	; 0x7c69
   13d40:	movt	r0, #1
   13d44:	str	r0, [sp, #72]	; 0x48
   13d48:	b	12eb8 <__assert_fail@plt+0x1e30>
   13d4c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d50:	ldr	r2, [sp, #80]	; 0x50
   13d54:	b	13d8c <__assert_fail@plt+0x2d04>
   13d58:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d5c:	mov	r2, #1
   13d60:	mov	lr, r4
   13d64:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d68:	b	13d8c <__assert_fail@plt+0x2d04>
   13d6c:	ldr	r2, [sp, #80]	; 0x50
   13d70:	mov	r7, #2
   13d74:	b	13d8c <__assert_fail@plt+0x2d04>
   13d78:	ldr	r6, [sp, #76]	; 0x4c
   13d7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d80:	ldr	lr, [sp, #84]	; 0x54
   13d84:	ldr	r2, [sp, #80]	; 0x50
   13d88:	mov	r7, #2
   13d8c:	mov	r0, #0
   13d90:	ldr	r1, [fp, #12]
   13d94:	tst	r2, #1
   13d98:	mov	r2, r7
   13d9c:	mov	r3, lr
   13da0:	str	r0, [sp, #8]
   13da4:	ldr	r0, [sp, #68]	; 0x44
   13da8:	movwne	r2, #4
   13dac:	cmp	r7, #2
   13db0:	movne	r2, r7
   13db4:	str	r2, [sp]
   13db8:	mov	r2, ip
   13dbc:	bic	r1, r1, #2
   13dc0:	str	r0, [sp, #12]
   13dc4:	ldr	r0, [sp, #72]	; 0x48
   13dc8:	str	r1, [sp, #4]
   13dcc:	mov	r1, sl
   13dd0:	str	r0, [sp, #16]
   13dd4:	mov	r0, r6
   13dd8:	bl	12b40 <__assert_fail@plt+0x1ab8>
   13ddc:	mov	r9, r0
   13de0:	mov	r0, r9
   13de4:	sub	sp, fp, #28
   13de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dec:	mov	r0, #5
   13df0:	ldr	r1, [sp, #48]	; 0x30
   13df4:	ldr	r2, [fp, #-84]	; 0xffffffac
   13df8:	ldr	r3, [sp, #84]	; 0x54
   13dfc:	str	r0, [sp]
   13e00:	ldr	r0, [fp, #12]
   13e04:	str	r0, [sp, #4]
   13e08:	ldr	r0, [fp, #16]
   13e0c:	str	r0, [sp, #8]
   13e10:	ldr	r0, [sp, #68]	; 0x44
   13e14:	str	r0, [sp, #12]
   13e18:	ldr	r0, [sp, #72]	; 0x48
   13e1c:	str	r0, [sp, #16]
   13e20:	ldr	r0, [sp, #76]	; 0x4c
   13e24:	b	13dd8 <__assert_fail@plt+0x2d50>
   13e28:	mov	r0, #0
   13e2c:	str	r0, [fp, #-72]	; 0xffffffb8
   13e30:	ldr	r1, [sp, #92]	; 0x5c
   13e34:	cmp	r1, #0
   13e38:	beq	13e78 <__assert_fail@plt+0x2df0>
   13e3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e40:	ldr	r2, [sp, #76]	; 0x4c
   13e44:	tst	r0, #1
   13e48:	bne	13e7c <__assert_fail@plt+0x2df4>
   13e4c:	ldrb	r0, [r1]
   13e50:	cmp	r0, #0
   13e54:	beq	13e7c <__assert_fail@plt+0x2df4>
   13e58:	add	r1, r1, #1
   13e5c:	cmp	r9, sl
   13e60:	strbcc	r0, [r2, r9]
   13e64:	add	r9, r9, #1
   13e68:	ldrb	r0, [r1], #1
   13e6c:	cmp	r0, #0
   13e70:	bne	13e5c <__assert_fail@plt+0x2dd4>
   13e74:	b	13e7c <__assert_fail@plt+0x2df4>
   13e78:	ldr	r2, [sp, #76]	; 0x4c
   13e7c:	cmp	r9, sl
   13e80:	movcc	r0, #0
   13e84:	strbcc	r0, [r2, r9]
   13e88:	mov	r0, r9
   13e8c:	sub	sp, fp, #28
   13e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e94:	mov	r2, #1
   13e98:	b	13d64 <__assert_fail@plt+0x2cdc>
   13e9c:	ldr	r2, [sp, #80]	; 0x50
   13ea0:	mov	r7, #5
   13ea4:	b	13d8c <__assert_fail@plt+0x2d04>
   13ea8:	bl	1107c <abort@plt>
   13eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eb0:	add	fp, sp, #28
   13eb4:	sub	sp, sp, #28
   13eb8:	movw	r5, #37224	; 0x9168
   13ebc:	cmp	r2, #0
   13ec0:	mov	r4, r1
   13ec4:	mov	r7, r0
   13ec8:	str	r0, [sp, #20]
   13ecc:	movt	r5, #2
   13ed0:	movne	r5, r2
   13ed4:	bl	10fa4 <__errno_location@plt>
   13ed8:	mov	sl, r0
   13edc:	ldm	r5, {r0, r1}
   13ee0:	ldr	r2, [r5, #40]	; 0x28
   13ee4:	ldr	r3, [r5, #44]	; 0x2c
   13ee8:	add	r9, r5, #8
   13eec:	ldr	r6, [sl]
   13ef0:	orr	r8, r1, #1
   13ef4:	mov	r1, #0
   13ef8:	str	r6, [sp, #24]
   13efc:	stm	sp, {r0, r8, r9}
   13f00:	str	r2, [sp, #12]
   13f04:	str	r3, [sp, #16]
   13f08:	mov	r0, #0
   13f0c:	mov	r2, r7
   13f10:	mov	r3, r4
   13f14:	mov	r6, r4
   13f18:	bl	12b40 <__assert_fail@plt+0x1ab8>
   13f1c:	add	r7, r0, #1
   13f20:	mov	r0, r7
   13f24:	bl	14f88 <__assert_fail@plt+0x3f00>
   13f28:	mov	r4, r0
   13f2c:	ldr	r0, [r5]
   13f30:	ldr	r2, [r5, #44]	; 0x2c
   13f34:	ldr	r1, [r5, #40]	; 0x28
   13f38:	mov	r3, r6
   13f3c:	stm	sp, {r0, r8, r9}
   13f40:	str	r2, [sp, #16]
   13f44:	str	r1, [sp, #12]
   13f48:	mov	r0, r4
   13f4c:	mov	r1, r7
   13f50:	ldr	r2, [sp, #20]
   13f54:	bl	12b40 <__assert_fail@plt+0x1ab8>
   13f58:	ldr	r0, [sp, #24]
   13f5c:	str	r0, [sl]
   13f60:	mov	r0, r4
   13f64:	sub	sp, fp, #28
   13f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f70:	add	fp, sp, #28
   13f74:	sub	sp, sp, #36	; 0x24
   13f78:	movw	r8, #37224	; 0x9168
   13f7c:	cmp	r3, #0
   13f80:	mov	r4, r2
   13f84:	str	r2, [sp, #24]
   13f88:	mov	r5, r1
   13f8c:	mov	r6, r0
   13f90:	str	r0, [sp, #20]
   13f94:	movt	r8, #2
   13f98:	movne	r8, r3
   13f9c:	bl	10fa4 <__errno_location@plt>
   13fa0:	str	r0, [sp, #28]
   13fa4:	cmp	r4, #0
   13fa8:	add	sl, r8, #8
   13fac:	ldm	r8, {r3, r9}
   13fb0:	ldr	r7, [r0]
   13fb4:	ldr	r1, [r8, #40]	; 0x28
   13fb8:	ldr	r2, [r8, #44]	; 0x2c
   13fbc:	mov	r0, #0
   13fc0:	orreq	r9, r9, #1
   13fc4:	str	r7, [sp, #32]
   13fc8:	mov	r7, r5
   13fcc:	stm	sp, {r3, r9, sl}
   13fd0:	str	r1, [sp, #12]
   13fd4:	str	r2, [sp, #16]
   13fd8:	mov	r1, #0
   13fdc:	mov	r2, r6
   13fe0:	mov	r3, r5
   13fe4:	bl	12b40 <__assert_fail@plt+0x1ab8>
   13fe8:	add	r4, r0, #1
   13fec:	mov	r5, r0
   13ff0:	mov	r0, r4
   13ff4:	bl	14f88 <__assert_fail@plt+0x3f00>
   13ff8:	mov	r6, r0
   13ffc:	ldr	r0, [r8]
   14000:	ldr	r2, [r8, #44]	; 0x2c
   14004:	ldr	r1, [r8, #40]	; 0x28
   14008:	mov	r3, r7
   1400c:	stm	sp, {r0, r9, sl}
   14010:	str	r2, [sp, #16]
   14014:	str	r1, [sp, #12]
   14018:	mov	r0, r6
   1401c:	mov	r1, r4
   14020:	ldr	r2, [sp, #20]
   14024:	bl	12b40 <__assert_fail@plt+0x1ab8>
   14028:	ldr	r0, [sp, #24]
   1402c:	ldr	r1, [sp, #32]
   14030:	ldr	r2, [sp, #28]
   14034:	cmp	r0, #0
   14038:	str	r1, [r2]
   1403c:	strne	r5, [r0]
   14040:	mov	r0, r6
   14044:	sub	sp, fp, #28
   14048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1404c:	push	{r4, r5, r6, r7, fp, lr}
   14050:	add	fp, sp, #16
   14054:	movw	r4, #37152	; 0x9120
   14058:	movt	r4, #2
   1405c:	ldrd	r6, [r4]
   14060:	cmp	r7, #2
   14064:	blt	14090 <__assert_fail@plt+0x3008>
   14068:	add	r5, r6, #12
   1406c:	mov	r7, #0
   14070:	ldr	r0, [r5, r7, lsl #3]
   14074:	bl	12838 <__assert_fail@plt+0x17b0>
   14078:	ldr	r1, [r4, #4]
   1407c:	add	r2, r7, #2
   14080:	add	r0, r7, #1
   14084:	mov	r7, r0
   14088:	cmp	r2, r1
   1408c:	blt	14070 <__assert_fail@plt+0x2fe8>
   14090:	ldr	r0, [r6, #4]
   14094:	movw	r5, #37272	; 0x9198
   14098:	movt	r5, #2
   1409c:	cmp	r0, r5
   140a0:	beq	140b4 <__assert_fail@plt+0x302c>
   140a4:	bl	12838 <__assert_fail@plt+0x17b0>
   140a8:	mov	r0, #256	; 0x100
   140ac:	str	r0, [r4, #8]
   140b0:	str	r5, [r4, #12]
   140b4:	add	r5, r4, #8
   140b8:	cmp	r6, r5
   140bc:	beq	140cc <__assert_fail@plt+0x3044>
   140c0:	mov	r0, r6
   140c4:	bl	12838 <__assert_fail@plt+0x17b0>
   140c8:	str	r5, [r4]
   140cc:	mov	r0, #1
   140d0:	str	r0, [r4, #4]
   140d4:	pop	{r4, r5, r6, r7, fp, pc}
   140d8:	movw	r3, #37224	; 0x9168
   140dc:	mvn	r2, #0
   140e0:	movt	r3, #2
   140e4:	b	140e8 <__assert_fail@plt+0x3060>
   140e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ec:	add	fp, sp, #28
   140f0:	sub	sp, sp, #44	; 0x2c
   140f4:	mov	r7, r3
   140f8:	str	r2, [sp, #36]	; 0x24
   140fc:	str	r1, [sp, #32]
   14100:	mov	r5, r0
   14104:	bl	10fa4 <__errno_location@plt>
   14108:	cmp	r5, #0
   1410c:	blt	14270 <__assert_fail@plt+0x31e8>
   14110:	cmn	r5, #-2147483647	; 0x80000001
   14114:	beq	14270 <__assert_fail@plt+0x31e8>
   14118:	movw	r8, #37152	; 0x9120
   1411c:	mov	r4, r0
   14120:	movt	r8, #2
   14124:	ldr	r6, [r8]
   14128:	ldr	r1, [r8, #4]
   1412c:	ldr	r0, [r0]
   14130:	str	r4, [sp, #28]
   14134:	cmp	r1, r5
   14138:	str	r0, [sp, #24]
   1413c:	ble	14148 <__assert_fail@plt+0x30c0>
   14140:	mov	sl, r6
   14144:	b	141ac <__assert_fail@plt+0x3124>
   14148:	mov	r0, #8
   1414c:	add	r9, r8, #8
   14150:	add	r2, r5, #1
   14154:	str	r1, [fp, #-32]	; 0xffffffe0
   14158:	mvn	r3, #-2147483648	; 0x80000000
   1415c:	str	r0, [sp]
   14160:	subs	r0, r6, r9
   14164:	sub	r2, r2, r1
   14168:	sub	r1, fp, #32
   1416c:	movne	r0, r6
   14170:	bl	15188 <__assert_fail@plt+0x4100>
   14174:	str	r0, [r8]
   14178:	cmp	r6, r9
   1417c:	mov	sl, r0
   14180:	ldrdeq	r0, [r8, #8]
   14184:	stmeq	sl, {r0, r1}
   14188:	ldr	r1, [r8, #4]
   1418c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14190:	add	r0, sl, r1, lsl #3
   14194:	sub	r1, r2, r1
   14198:	lsl	r2, r1, #3
   1419c:	mov	r1, #0
   141a0:	bl	10fbc <memset@plt>
   141a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141a8:	str	r0, [r8, #4]
   141ac:	mov	r9, sl
   141b0:	ldr	r6, [r9, r5, lsl #3]!
   141b4:	ldr	r4, [r9, #4]!
   141b8:	ldm	r7, {r0, r1}
   141bc:	ldr	r2, [r7, #40]	; 0x28
   141c0:	ldr	r3, [r7, #44]	; 0x2c
   141c4:	orr	r8, r1, #1
   141c8:	add	r1, r7, #8
   141cc:	stm	sp, {r0, r8}
   141d0:	add	r0, sp, #8
   141d4:	str	r1, [sp, #20]
   141d8:	stm	r0, {r1, r2, r3}
   141dc:	mov	r0, r4
   141e0:	mov	r1, r6
   141e4:	ldr	r2, [sp, #32]
   141e8:	ldr	r3, [sp, #36]	; 0x24
   141ec:	bl	12b40 <__assert_fail@plt+0x1ab8>
   141f0:	cmp	r6, r0
   141f4:	bhi	14258 <__assert_fail@plt+0x31d0>
   141f8:	add	r6, r0, #1
   141fc:	movw	r0, #37272	; 0x9198
   14200:	movt	r0, #2
   14204:	str	r6, [sl, r5, lsl #3]
   14208:	cmp	r4, r0
   1420c:	beq	14218 <__assert_fail@plt+0x3190>
   14210:	mov	r0, r4
   14214:	bl	12838 <__assert_fail@plt+0x17b0>
   14218:	mov	r0, r6
   1421c:	bl	14f88 <__assert_fail@plt+0x3f00>
   14220:	str	r0, [r9]
   14224:	mov	r4, r0
   14228:	add	r3, sp, #8
   1422c:	ldr	r0, [r7]
   14230:	ldr	r1, [r7, #40]	; 0x28
   14234:	ldr	r2, [r7, #44]	; 0x2c
   14238:	stm	sp, {r0, r8}
   1423c:	ldr	r0, [sp, #20]
   14240:	stm	r3, {r0, r1, r2}
   14244:	mov	r0, r4
   14248:	mov	r1, r6
   1424c:	ldr	r2, [sp, #32]
   14250:	ldr	r3, [sp, #36]	; 0x24
   14254:	bl	12b40 <__assert_fail@plt+0x1ab8>
   14258:	ldr	r1, [sp, #24]
   1425c:	ldr	r0, [sp, #28]
   14260:	str	r1, [r0]
   14264:	mov	r0, r4
   14268:	sub	sp, fp, #28
   1426c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14270:	bl	1107c <abort@plt>
   14274:	movw	r3, #37224	; 0x9168
   14278:	movt	r3, #2
   1427c:	b	140e8 <__assert_fail@plt+0x3060>
   14280:	movw	r3, #37224	; 0x9168
   14284:	mov	r1, r0
   14288:	mov	r0, #0
   1428c:	mvn	r2, #0
   14290:	movt	r3, #2
   14294:	b	140e8 <__assert_fail@plt+0x3060>
   14298:	movw	r3, #37224	; 0x9168
   1429c:	mov	r2, r1
   142a0:	mov	r1, r0
   142a4:	mov	r0, #0
   142a8:	movt	r3, #2
   142ac:	b	140e8 <__assert_fail@plt+0x3060>
   142b0:	push	{fp, lr}
   142b4:	mov	fp, sp
   142b8:	sub	sp, sp, #48	; 0x30
   142bc:	vmov.i32	q8, #0	; 0x00000000
   142c0:	mov	ip, #32
   142c4:	mov	r3, sp
   142c8:	mov	lr, r2
   142cc:	cmp	r1, #10
   142d0:	add	r2, r3, #16
   142d4:	vst1.64	{d16-d17}, [r3], ip
   142d8:	vst1.64	{d16-d17}, [r3]
   142dc:	vst1.64	{d16-d17}, [r2]
   142e0:	beq	14300 <__assert_fail@plt+0x3278>
   142e4:	str	r1, [sp]
   142e8:	mov	r3, sp
   142ec:	mov	r1, lr
   142f0:	mvn	r2, #0
   142f4:	bl	140e8 <__assert_fail@plt+0x3060>
   142f8:	mov	sp, fp
   142fc:	pop	{fp, pc}
   14300:	bl	1107c <abort@plt>
   14304:	push	{r4, sl, fp, lr}
   14308:	add	fp, sp, #8
   1430c:	sub	sp, sp, #48	; 0x30
   14310:	mov	ip, r3
   14314:	mov	r3, sp
   14318:	vmov.i32	q8, #0	; 0x00000000
   1431c:	mov	lr, #32
   14320:	cmp	r1, #10
   14324:	add	r4, r3, #16
   14328:	vst1.64	{d16-d17}, [r3], lr
   1432c:	vst1.64	{d16-d17}, [r3]
   14330:	vst1.64	{d16-d17}, [r4]
   14334:	beq	14354 <__assert_fail@plt+0x32cc>
   14338:	str	r1, [sp]
   1433c:	mov	r1, r2
   14340:	mov	r3, sp
   14344:	mov	r2, ip
   14348:	bl	140e8 <__assert_fail@plt+0x3060>
   1434c:	sub	sp, fp, #8
   14350:	pop	{r4, sl, fp, pc}
   14354:	bl	1107c <abort@plt>
   14358:	push	{fp, lr}
   1435c:	mov	fp, sp
   14360:	sub	sp, sp, #48	; 0x30
   14364:	mov	r3, sp
   14368:	vmov.i32	q8, #0	; 0x00000000
   1436c:	mov	ip, #32
   14370:	cmp	r0, #10
   14374:	add	r2, r3, #16
   14378:	vst1.64	{d16-d17}, [r3], ip
   1437c:	vst1.64	{d16-d17}, [r3]
   14380:	vst1.64	{d16-d17}, [r2]
   14384:	beq	143a4 <__assert_fail@plt+0x331c>
   14388:	str	r0, [sp]
   1438c:	mov	r3, sp
   14390:	mov	r0, #0
   14394:	mvn	r2, #0
   14398:	bl	140e8 <__assert_fail@plt+0x3060>
   1439c:	mov	sp, fp
   143a0:	pop	{fp, pc}
   143a4:	bl	1107c <abort@plt>
   143a8:	push	{fp, lr}
   143ac:	mov	fp, sp
   143b0:	sub	sp, sp, #48	; 0x30
   143b4:	mov	r3, sp
   143b8:	vmov.i32	q8, #0	; 0x00000000
   143bc:	mov	ip, #32
   143c0:	cmp	r0, #10
   143c4:	add	lr, r3, #16
   143c8:	vst1.64	{d16-d17}, [r3], ip
   143cc:	vst1.64	{d16-d17}, [r3]
   143d0:	vst1.64	{d16-d17}, [lr]
   143d4:	beq	143f0 <__assert_fail@plt+0x3368>
   143d8:	str	r0, [sp]
   143dc:	mov	r3, sp
   143e0:	mov	r0, #0
   143e4:	bl	140e8 <__assert_fail@plt+0x3060>
   143e8:	mov	sp, fp
   143ec:	pop	{fp, pc}
   143f0:	bl	1107c <abort@plt>
   143f4:	push	{r4, sl, fp, lr}
   143f8:	add	fp, sp, #8
   143fc:	sub	sp, sp, #48	; 0x30
   14400:	mov	lr, r0
   14404:	movw	r0, #37224	; 0x9168
   14408:	mov	r3, #32
   1440c:	mov	ip, r1
   14410:	mov	r4, #1
   14414:	movt	r0, #2
   14418:	add	r1, r0, #16
   1441c:	vld1.64	{d16-d17}, [r0], r3
   14420:	mov	r3, sp
   14424:	vld1.64	{d18-d19}, [r1]
   14428:	add	r1, r3, #16
   1442c:	vld1.64	{d20-d21}, [r0]
   14430:	add	r0, r3, #32
   14434:	vst1.64	{d18-d19}, [r1]
   14438:	mov	r1, r3
   1443c:	vst1.64	{d20-d21}, [r0]
   14440:	mov	r0, #28
   14444:	and	r0, r0, r2, lsr #3
   14448:	and	r2, r2, #31
   1444c:	vst1.64	{d16-d17}, [r1], r0
   14450:	ldr	r0, [r1, #8]
   14454:	bic	r4, r4, r0, lsr r2
   14458:	eor	r0, r0, r4, lsl r2
   1445c:	mov	r2, ip
   14460:	str	r0, [r1, #8]
   14464:	mov	r0, #0
   14468:	mov	r1, lr
   1446c:	bl	140e8 <__assert_fail@plt+0x3060>
   14470:	sub	sp, fp, #8
   14474:	pop	{r4, sl, fp, pc}
   14478:	push	{fp, lr}
   1447c:	mov	fp, sp
   14480:	sub	sp, sp, #48	; 0x30
   14484:	mov	ip, r0
   14488:	movw	r0, #37224	; 0x9168
   1448c:	mov	r3, #32
   14490:	movt	r0, #2
   14494:	add	r2, r0, #16
   14498:	vld1.64	{d16-d17}, [r0], r3
   1449c:	mov	r3, sp
   144a0:	vld1.64	{d18-d19}, [r2]
   144a4:	add	r2, r3, #16
   144a8:	vld1.64	{d20-d21}, [r0]
   144ac:	add	r0, r3, #32
   144b0:	vst1.64	{d18-d19}, [r2]
   144b4:	mov	r2, r3
   144b8:	vst1.64	{d20-d21}, [r0]
   144bc:	mov	r0, #28
   144c0:	and	r0, r0, r1, lsr #3
   144c4:	and	r1, r1, #31
   144c8:	vst1.64	{d16-d17}, [r2], r0
   144cc:	mov	r0, #1
   144d0:	ldr	lr, [r2, #8]
   144d4:	bic	r0, r0, lr, lsr r1
   144d8:	eor	r0, lr, r0, lsl r1
   144dc:	mov	r1, ip
   144e0:	str	r0, [r2, #8]
   144e4:	mov	r0, #0
   144e8:	mvn	r2, #0
   144ec:	bl	140e8 <__assert_fail@plt+0x3060>
   144f0:	mov	sp, fp
   144f4:	pop	{fp, pc}
   144f8:	push	{fp, lr}
   144fc:	mov	fp, sp
   14500:	sub	sp, sp, #48	; 0x30
   14504:	movw	r2, #37224	; 0x9168
   14508:	mov	r3, #32
   1450c:	mov	r1, r0
   14510:	movt	r2, #2
   14514:	add	r0, r2, #16
   14518:	vld1.64	{d16-d17}, [r2], r3
   1451c:	mov	r3, sp
   14520:	vld1.64	{d18-d19}, [r0]
   14524:	add	r0, r3, #16
   14528:	vld1.64	{d20-d21}, [r2]
   1452c:	mov	r2, r3
   14530:	vst1.64	{d18-d19}, [r0]
   14534:	add	r0, r3, #32
   14538:	vst1.64	{d20-d21}, [r0]
   1453c:	mov	r0, #12
   14540:	vst1.64	{d16-d17}, [r2], r0
   14544:	ldr	r0, [r2]
   14548:	orr	r0, r0, #67108864	; 0x4000000
   1454c:	str	r0, [r2]
   14550:	mov	r0, #0
   14554:	mvn	r2, #0
   14558:	bl	140e8 <__assert_fail@plt+0x3060>
   1455c:	mov	sp, fp
   14560:	pop	{fp, pc}
   14564:	push	{fp, lr}
   14568:	mov	fp, sp
   1456c:	sub	sp, sp, #48	; 0x30
   14570:	mov	ip, r1
   14574:	mov	r1, r0
   14578:	movw	r0, #37224	; 0x9168
   1457c:	mov	r3, #32
   14580:	movt	r0, #2
   14584:	add	r2, r0, #16
   14588:	vld1.64	{d16-d17}, [r0], r3
   1458c:	mov	r3, sp
   14590:	vld1.64	{d18-d19}, [r2]
   14594:	add	r2, r3, #16
   14598:	vld1.64	{d20-d21}, [r0]
   1459c:	add	r0, r3, #32
   145a0:	vst1.64	{d18-d19}, [r2]
   145a4:	mov	r2, r3
   145a8:	vst1.64	{d20-d21}, [r0]
   145ac:	mov	r0, #12
   145b0:	vst1.64	{d16-d17}, [r2], r0
   145b4:	ldr	r0, [r2]
   145b8:	orr	r0, r0, #67108864	; 0x4000000
   145bc:	str	r0, [r2]
   145c0:	mov	r0, #0
   145c4:	mov	r2, ip
   145c8:	bl	140e8 <__assert_fail@plt+0x3060>
   145cc:	mov	sp, fp
   145d0:	pop	{fp, pc}
   145d4:	push	{r4, sl, fp, lr}
   145d8:	add	fp, sp, #8
   145dc:	sub	sp, sp, #96	; 0x60
   145e0:	mov	ip, r2
   145e4:	mov	r2, sp
   145e8:	vmov.i32	q8, #0	; 0x00000000
   145ec:	mov	r4, #28
   145f0:	cmp	r1, #10
   145f4:	mov	r3, r2
   145f8:	add	lr, r2, #16
   145fc:	vst1.64	{d16-d17}, [r3], r4
   14600:	vst1.64	{d16-d17}, [lr]
   14604:	vst1.32	{d16-d17}, [r3]
   14608:	beq	14658 <__assert_fail@plt+0x35d0>
   1460c:	vld1.64	{d16-d17}, [r2], r4
   14610:	vld1.64	{d18-d19}, [lr]
   14614:	add	r3, sp, #48	; 0x30
   14618:	add	r4, r3, #4
   1461c:	vld1.32	{d20-d21}, [r2]
   14620:	add	r2, r3, #20
   14624:	vst1.32	{d16-d17}, [r4]
   14628:	vst1.32	{d18-d19}, [r2]
   1462c:	add	r2, r3, #32
   14630:	vst1.32	{d20-d21}, [r2]
   14634:	str	r1, [sp, #48]	; 0x30
   14638:	mvn	r2, #0
   1463c:	ldr	r1, [sp, #60]	; 0x3c
   14640:	orr	r1, r1, #67108864	; 0x4000000
   14644:	str	r1, [sp, #60]	; 0x3c
   14648:	mov	r1, ip
   1464c:	bl	140e8 <__assert_fail@plt+0x3060>
   14650:	sub	sp, fp, #8
   14654:	pop	{r4, sl, fp, pc}
   14658:	bl	1107c <abort@plt>
   1465c:	push	{r4, r5, fp, lr}
   14660:	add	fp, sp, #8
   14664:	sub	sp, sp, #48	; 0x30
   14668:	mov	ip, r3
   1466c:	movw	r3, #37224	; 0x9168
   14670:	mov	lr, #32
   14674:	cmp	r1, #0
   14678:	mov	r5, sp
   1467c:	movt	r3, #2
   14680:	cmpne	r2, #0
   14684:	add	r4, r3, #16
   14688:	vld1.64	{d16-d17}, [r3], lr
   1468c:	vld1.64	{d18-d19}, [r4]
   14690:	add	r4, r5, #16
   14694:	vld1.64	{d20-d21}, [r3]
   14698:	vst1.64	{d16-d17}, [r5], lr
   1469c:	mov	r3, #10
   146a0:	vst1.64	{d18-d19}, [r4]
   146a4:	vst1.64	{d20-d21}, [r5]
   146a8:	str	r3, [sp]
   146ac:	bne	146b4 <__assert_fail@plt+0x362c>
   146b0:	bl	1107c <abort@plt>
   146b4:	str	r2, [sp, #44]	; 0x2c
   146b8:	str	r1, [sp, #40]	; 0x28
   146bc:	mov	r3, sp
   146c0:	mov	r1, ip
   146c4:	mvn	r2, #0
   146c8:	bl	140e8 <__assert_fail@plt+0x3060>
   146cc:	sub	sp, fp, #8
   146d0:	pop	{r4, r5, fp, pc}
   146d4:	push	{r4, r5, fp, lr}
   146d8:	add	fp, sp, #8
   146dc:	sub	sp, sp, #48	; 0x30
   146e0:	mov	lr, r3
   146e4:	movw	r3, #37224	; 0x9168
   146e8:	mov	ip, #32
   146ec:	cmp	r1, #0
   146f0:	mov	r5, sp
   146f4:	movt	r3, #2
   146f8:	cmpne	r2, #0
   146fc:	add	r4, r3, #16
   14700:	vld1.64	{d16-d17}, [r3], ip
   14704:	vld1.64	{d18-d19}, [r4]
   14708:	add	r4, r5, #16
   1470c:	vld1.64	{d20-d21}, [r3]
   14710:	vst1.64	{d16-d17}, [r5], ip
   14714:	mov	r3, #10
   14718:	vst1.64	{d18-d19}, [r4]
   1471c:	vst1.64	{d20-d21}, [r5]
   14720:	str	r3, [sp]
   14724:	bne	1472c <__assert_fail@plt+0x36a4>
   14728:	bl	1107c <abort@plt>
   1472c:	ldr	ip, [fp, #8]
   14730:	str	r2, [sp, #44]	; 0x2c
   14734:	str	r1, [sp, #40]	; 0x28
   14738:	mov	r3, sp
   1473c:	mov	r1, lr
   14740:	mov	r2, ip
   14744:	bl	140e8 <__assert_fail@plt+0x3060>
   14748:	sub	sp, fp, #8
   1474c:	pop	{r4, r5, fp, pc}
   14750:	push	{r4, sl, fp, lr}
   14754:	add	fp, sp, #8
   14758:	sub	sp, sp, #48	; 0x30
   1475c:	mov	ip, r2
   14760:	movw	r2, #37224	; 0x9168
   14764:	mov	lr, #32
   14768:	cmp	r0, #0
   1476c:	mov	r4, sp
   14770:	movt	r2, #2
   14774:	cmpne	r1, #0
   14778:	add	r3, r2, #16
   1477c:	vld1.64	{d16-d17}, [r2], lr
   14780:	vld1.64	{d18-d19}, [r3]
   14784:	add	r3, r4, #16
   14788:	vld1.64	{d20-d21}, [r2]
   1478c:	vst1.64	{d16-d17}, [r4], lr
   14790:	mov	r2, #10
   14794:	vst1.64	{d18-d19}, [r3]
   14798:	vst1.64	{d20-d21}, [r4]
   1479c:	str	r2, [sp]
   147a0:	bne	147a8 <__assert_fail@plt+0x3720>
   147a4:	bl	1107c <abort@plt>
   147a8:	str	r1, [sp, #44]	; 0x2c
   147ac:	str	r0, [sp, #40]	; 0x28
   147b0:	mov	r3, sp
   147b4:	mov	r0, #0
   147b8:	mov	r1, ip
   147bc:	mvn	r2, #0
   147c0:	bl	140e8 <__assert_fail@plt+0x3060>
   147c4:	sub	sp, fp, #8
   147c8:	pop	{r4, sl, fp, pc}
   147cc:	push	{r4, r5, fp, lr}
   147d0:	add	fp, sp, #8
   147d4:	sub	sp, sp, #48	; 0x30
   147d8:	mov	lr, r2
   147dc:	movw	r2, #37224	; 0x9168
   147e0:	mov	ip, r3
   147e4:	mov	r3, #32
   147e8:	cmp	r0, #0
   147ec:	mov	r5, sp
   147f0:	movt	r2, #2
   147f4:	cmpne	r1, #0
   147f8:	add	r4, r2, #16
   147fc:	vld1.64	{d16-d17}, [r2], r3
   14800:	vld1.64	{d18-d19}, [r4]
   14804:	add	r4, r5, #16
   14808:	vld1.64	{d20-d21}, [r2]
   1480c:	vst1.64	{d16-d17}, [r5], r3
   14810:	mov	r2, #10
   14814:	vst1.64	{d18-d19}, [r4]
   14818:	vst1.64	{d20-d21}, [r5]
   1481c:	str	r2, [sp]
   14820:	bne	14828 <__assert_fail@plt+0x37a0>
   14824:	bl	1107c <abort@plt>
   14828:	str	r1, [sp, #44]	; 0x2c
   1482c:	str	r0, [sp, #40]	; 0x28
   14830:	mov	r3, sp
   14834:	mov	r0, #0
   14838:	mov	r1, lr
   1483c:	mov	r2, ip
   14840:	bl	140e8 <__assert_fail@plt+0x3060>
   14844:	sub	sp, fp, #8
   14848:	pop	{r4, r5, fp, pc}
   1484c:	movw	r3, #37104	; 0x90f0
   14850:	movt	r3, #2
   14854:	b	140e8 <__assert_fail@plt+0x3060>
   14858:	movw	r3, #37104	; 0x90f0
   1485c:	mov	r2, r1
   14860:	mov	r1, r0
   14864:	mov	r0, #0
   14868:	movt	r3, #2
   1486c:	b	140e8 <__assert_fail@plt+0x3060>
   14870:	movw	r3, #37104	; 0x90f0
   14874:	mvn	r2, #0
   14878:	movt	r3, #2
   1487c:	b	140e8 <__assert_fail@plt+0x3060>
   14880:	movw	r3, #37104	; 0x90f0
   14884:	mov	r1, r0
   14888:	mov	r0, #0
   1488c:	mvn	r2, #0
   14890:	movt	r3, #2
   14894:	b	140e8 <__assert_fail@plt+0x3060>
   14898:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1489c:	add	fp, sp, #24
   148a0:	sub	sp, sp, #32
   148a4:	ldr	r6, [fp, #12]
   148a8:	ldr	r7, [fp, #8]
   148ac:	mov	r4, r2
   148b0:	mov	r8, r0
   148b4:	cmp	r1, #0
   148b8:	beq	148e0 <__assert_fail@plt+0x3858>
   148bc:	movw	r2, #31936	; 0x7cc0
   148c0:	mov	r5, r1
   148c4:	str	r3, [sp, #4]
   148c8:	str	r4, [sp]
   148cc:	mov	r0, r8
   148d0:	mov	r1, #1
   148d4:	movt	r2, #1
   148d8:	mov	r3, r5
   148dc:	b	148f8 <__assert_fail@plt+0x3870>
   148e0:	movw	r2, #31948	; 0x7ccc
   148e4:	str	r3, [sp]
   148e8:	mov	r0, r8
   148ec:	mov	r1, #1
   148f0:	mov	r3, r4
   148f4:	movt	r2, #1
   148f8:	bl	10fe0 <__fprintf_chk@plt>
   148fc:	movw	r1, #31955	; 0x7cd3
   14900:	mov	r0, #0
   14904:	mov	r2, #5
   14908:	movt	r1, #1
   1490c:	bl	10ec0 <dcgettext@plt>
   14910:	movw	r2, #32673	; 0x7fa1
   14914:	mov	r3, r0
   14918:	movw	r0, #2022	; 0x7e6
   1491c:	mov	r1, #1
   14920:	str	r0, [sp]
   14924:	movt	r2, #1
   14928:	mov	r0, r8
   1492c:	bl	10fe0 <__fprintf_chk@plt>
   14930:	movw	r4, #31095	; 0x7977
   14934:	mov	r1, r8
   14938:	movt	r4, #1
   1493c:	mov	r0, r4
   14940:	bl	10e30 <fputs_unlocked@plt>
   14944:	movw	r1, #31959	; 0x7cd7
   14948:	mov	r0, #0
   1494c:	mov	r2, #5
   14950:	movt	r1, #1
   14954:	bl	10ec0 <dcgettext@plt>
   14958:	movw	r3, #32130	; 0x7d82
   1495c:	mov	r2, r0
   14960:	mov	r0, r8
   14964:	mov	r1, #1
   14968:	movt	r3, #1
   1496c:	bl	10fe0 <__fprintf_chk@plt>
   14970:	mov	r0, r4
   14974:	mov	r1, r8
   14978:	bl	10e30 <fputs_unlocked@plt>
   1497c:	cmp	r6, #9
   14980:	bhi	149bc <__assert_fail@plt+0x3934>
   14984:	add	r0, pc, #0
   14988:	ldr	pc, [r0, r6, lsl #2]
   1498c:			; <UNDEFINED> instruction: 0x000149b4
   14990:	andeq	r4, r1, r8, asr #19
   14994:	strdeq	r4, [r1], -r8
   14998:	andeq	r4, r1, r0, lsr #20
   1499c:	andeq	r4, r1, r8, asr #20
   149a0:	andeq	r4, r1, r0, ror sl
   149a4:	muleq	r1, r8, sl
   149a8:	ldrdeq	r4, [r1], -r0
   149ac:	andeq	r4, r1, r8, ror fp
   149b0:	andeq	r4, r1, r0, lsr #22
   149b4:	sub	sp, fp, #24
   149b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149bc:	movw	r1, #32483	; 0x7ee3
   149c0:	movt	r1, #1
   149c4:	b	14b28 <__assert_fail@plt+0x3aa0>
   149c8:	movw	r1, #32164	; 0x7da4
   149cc:	mov	r0, #0
   149d0:	mov	r2, #5
   149d4:	movt	r1, #1
   149d8:	bl	10ec0 <dcgettext@plt>
   149dc:	ldr	r3, [r7]
   149e0:	mov	r2, r0
   149e4:	mov	r0, r8
   149e8:	mov	r1, #1
   149ec:	sub	sp, fp, #24
   149f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   149f4:	b	10fe0 <__fprintf_chk@plt>
   149f8:	movw	r1, #32180	; 0x7db4
   149fc:	mov	r0, #0
   14a00:	mov	r2, #5
   14a04:	movt	r1, #1
   14a08:	bl	10ec0 <dcgettext@plt>
   14a0c:	mov	r2, r0
   14a10:	ldr	r3, [r7]
   14a14:	ldr	r0, [r7, #4]
   14a18:	str	r0, [sp]
   14a1c:	b	14b0c <__assert_fail@plt+0x3a84>
   14a20:	movw	r1, #32203	; 0x7dcb
   14a24:	mov	r0, #0
   14a28:	mov	r2, #5
   14a2c:	movt	r1, #1
   14a30:	bl	10ec0 <dcgettext@plt>
   14a34:	ldr	r3, [r7]
   14a38:	mov	r2, r0
   14a3c:	ldmib	r7, {r0, r1}
   14a40:	stm	sp, {r0, r1}
   14a44:	b	14b0c <__assert_fail@plt+0x3a84>
   14a48:	movw	r1, #32231	; 0x7de7
   14a4c:	mov	r0, #0
   14a50:	mov	r2, #5
   14a54:	movt	r1, #1
   14a58:	bl	10ec0 <dcgettext@plt>
   14a5c:	ldr	r3, [r7]
   14a60:	mov	r2, r0
   14a64:	ldmib	r7, {r0, r1, r7}
   14a68:	stm	sp, {r0, r1, r7}
   14a6c:	b	14b0c <__assert_fail@plt+0x3a84>
   14a70:	movw	r1, #32263	; 0x7e07
   14a74:	mov	r0, #0
   14a78:	mov	r2, #5
   14a7c:	movt	r1, #1
   14a80:	bl	10ec0 <dcgettext@plt>
   14a84:	ldr	r3, [r7]
   14a88:	mov	r2, r0
   14a8c:	ldmib	r7, {r0, r1, r6, r7}
   14a90:	stm	sp, {r0, r1, r6, r7}
   14a94:	b	14b0c <__assert_fail@plt+0x3a84>
   14a98:	movw	r1, #32299	; 0x7e2b
   14a9c:	mov	r0, #0
   14aa0:	mov	r2, #5
   14aa4:	movt	r1, #1
   14aa8:	bl	10ec0 <dcgettext@plt>
   14aac:	ldr	r3, [r7]
   14ab0:	mov	r2, r0
   14ab4:	ldmib	r7, {r0, r1, r6}
   14ab8:	ldr	r5, [r7, #16]
   14abc:	ldr	r7, [r7, #20]
   14ac0:	stm	sp, {r0, r1, r6}
   14ac4:	str	r5, [sp, #12]
   14ac8:	str	r7, [sp, #16]
   14acc:	b	14b0c <__assert_fail@plt+0x3a84>
   14ad0:	movw	r1, #32339	; 0x7e53
   14ad4:	mov	r0, #0
   14ad8:	mov	r2, #5
   14adc:	movt	r1, #1
   14ae0:	bl	10ec0 <dcgettext@plt>
   14ae4:	ldr	r3, [r7]
   14ae8:	mov	r2, r0
   14aec:	ldmib	r7, {r0, r1, r6}
   14af0:	ldr	r5, [r7, #16]
   14af4:	ldr	r4, [r7, #20]
   14af8:	ldr	r7, [r7, #24]
   14afc:	stm	sp, {r0, r1, r6}
   14b00:	str	r5, [sp, #12]
   14b04:	str	r4, [sp, #16]
   14b08:	str	r7, [sp, #20]
   14b0c:	mov	r0, r8
   14b10:	mov	r1, #1
   14b14:	bl	10fe0 <__fprintf_chk@plt>
   14b18:	sub	sp, fp, #24
   14b1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b20:	movw	r1, #32431	; 0x7eaf
   14b24:	movt	r1, #1
   14b28:	mov	r0, #0
   14b2c:	mov	r2, #5
   14b30:	bl	10ec0 <dcgettext@plt>
   14b34:	mov	ip, r0
   14b38:	ldr	r3, [r7]
   14b3c:	ldr	r0, [r7, #4]
   14b40:	ldr	r1, [r7, #8]
   14b44:	ldr	r6, [r7, #12]
   14b48:	ldr	r5, [r7, #16]
   14b4c:	ldr	r4, [r7, #20]
   14b50:	ldr	r2, [r7, #24]
   14b54:	ldr	lr, [r7, #28]
   14b58:	ldr	r7, [r7, #32]
   14b5c:	stm	sp, {r0, r1, r6}
   14b60:	str	r5, [sp, #12]
   14b64:	str	r4, [sp, #16]
   14b68:	str	r2, [sp, #20]
   14b6c:	str	lr, [sp, #24]
   14b70:	str	r7, [sp, #28]
   14b74:	b	14bbc <__assert_fail@plt+0x3b34>
   14b78:	movw	r1, #32383	; 0x7e7f
   14b7c:	mov	r0, #0
   14b80:	mov	r2, #5
   14b84:	movt	r1, #1
   14b88:	bl	10ec0 <dcgettext@plt>
   14b8c:	mov	ip, r0
   14b90:	ldr	r3, [r7]
   14b94:	ldmib	r7, {r0, r1, r6}
   14b98:	ldr	r5, [r7, #16]
   14b9c:	ldr	r4, [r7, #20]
   14ba0:	ldr	r2, [r7, #24]
   14ba4:	ldr	r7, [r7, #28]
   14ba8:	stm	sp, {r0, r1, r6}
   14bac:	str	r5, [sp, #12]
   14bb0:	str	r4, [sp, #16]
   14bb4:	str	r2, [sp, #20]
   14bb8:	str	r7, [sp, #24]
   14bbc:	mov	r0, r8
   14bc0:	mov	r1, #1
   14bc4:	mov	r2, ip
   14bc8:	bl	10fe0 <__fprintf_chk@plt>
   14bcc:	sub	sp, fp, #24
   14bd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bd4:	push	{r4, sl, fp, lr}
   14bd8:	add	fp, sp, #8
   14bdc:	sub	sp, sp, #8
   14be0:	ldr	ip, [fp, #8]
   14be4:	mov	lr, #0
   14be8:	ldr	r4, [ip, lr, lsl #2]
   14bec:	add	lr, lr, #1
   14bf0:	cmp	r4, #0
   14bf4:	bne	14be8 <__assert_fail@plt+0x3b60>
   14bf8:	sub	r4, lr, #1
   14bfc:	str	ip, [sp]
   14c00:	str	r4, [sp, #4]
   14c04:	bl	14898 <__assert_fail@plt+0x3810>
   14c08:	sub	sp, fp, #8
   14c0c:	pop	{r4, sl, fp, pc}
   14c10:	push	{fp, lr}
   14c14:	mov	fp, sp
   14c18:	sub	sp, sp, #48	; 0x30
   14c1c:	ldr	ip, [fp, #8]
   14c20:	ldr	lr, [ip]
   14c24:	cmp	lr, #0
   14c28:	str	lr, [sp, #8]
   14c2c:	beq	14cc8 <__assert_fail@plt+0x3c40>
   14c30:	ldr	lr, [ip, #4]
   14c34:	cmp	lr, #0
   14c38:	str	lr, [sp, #12]
   14c3c:	beq	14cd0 <__assert_fail@plt+0x3c48>
   14c40:	ldr	lr, [ip, #8]
   14c44:	cmp	lr, #0
   14c48:	str	lr, [sp, #16]
   14c4c:	beq	14cd8 <__assert_fail@plt+0x3c50>
   14c50:	ldr	lr, [ip, #12]
   14c54:	cmp	lr, #0
   14c58:	str	lr, [sp, #20]
   14c5c:	beq	14ce0 <__assert_fail@plt+0x3c58>
   14c60:	ldr	lr, [ip, #16]
   14c64:	cmp	lr, #0
   14c68:	str	lr, [sp, #24]
   14c6c:	beq	14ce8 <__assert_fail@plt+0x3c60>
   14c70:	ldr	lr, [ip, #20]
   14c74:	cmp	lr, #0
   14c78:	str	lr, [sp, #28]
   14c7c:	beq	14cf0 <__assert_fail@plt+0x3c68>
   14c80:	ldr	lr, [ip, #24]
   14c84:	cmp	lr, #0
   14c88:	str	lr, [sp, #32]
   14c8c:	beq	14cf8 <__assert_fail@plt+0x3c70>
   14c90:	ldr	lr, [ip, #28]
   14c94:	cmp	lr, #0
   14c98:	str	lr, [sp, #36]	; 0x24
   14c9c:	beq	14d00 <__assert_fail@plt+0x3c78>
   14ca0:	ldr	lr, [ip, #32]
   14ca4:	cmp	lr, #0
   14ca8:	str	lr, [sp, #40]	; 0x28
   14cac:	beq	14d08 <__assert_fail@plt+0x3c80>
   14cb0:	ldr	lr, [ip, #36]	; 0x24
   14cb4:	mov	ip, #10
   14cb8:	cmp	lr, #0
   14cbc:	str	lr, [sp, #44]	; 0x2c
   14cc0:	movweq	ip, #9
   14cc4:	b	14d0c <__assert_fail@plt+0x3c84>
   14cc8:	mov	ip, #0
   14ccc:	b	14d0c <__assert_fail@plt+0x3c84>
   14cd0:	mov	ip, #1
   14cd4:	b	14d0c <__assert_fail@plt+0x3c84>
   14cd8:	mov	ip, #2
   14cdc:	b	14d0c <__assert_fail@plt+0x3c84>
   14ce0:	mov	ip, #3
   14ce4:	b	14d0c <__assert_fail@plt+0x3c84>
   14ce8:	mov	ip, #4
   14cec:	b	14d0c <__assert_fail@plt+0x3c84>
   14cf0:	mov	ip, #5
   14cf4:	b	14d0c <__assert_fail@plt+0x3c84>
   14cf8:	mov	ip, #6
   14cfc:	b	14d0c <__assert_fail@plt+0x3c84>
   14d00:	mov	ip, #7
   14d04:	b	14d0c <__assert_fail@plt+0x3c84>
   14d08:	mov	ip, #8
   14d0c:	add	lr, sp, #8
   14d10:	str	ip, [sp, #4]
   14d14:	str	lr, [sp]
   14d18:	bl	14898 <__assert_fail@plt+0x3810>
   14d1c:	mov	sp, fp
   14d20:	pop	{fp, pc}
   14d24:	push	{fp, lr}
   14d28:	mov	fp, sp
   14d2c:	sub	sp, sp, #56	; 0x38
   14d30:	add	ip, fp, #8
   14d34:	str	ip, [sp, #12]
   14d38:	ldr	lr, [fp, #8]
   14d3c:	cmp	lr, #0
   14d40:	str	lr, [sp, #16]
   14d44:	beq	14de0 <__assert_fail@plt+0x3d58>
   14d48:	ldr	lr, [ip, #4]
   14d4c:	cmp	lr, #0
   14d50:	str	lr, [sp, #20]
   14d54:	beq	14de8 <__assert_fail@plt+0x3d60>
   14d58:	ldr	lr, [ip, #8]
   14d5c:	cmp	lr, #0
   14d60:	str	lr, [sp, #24]
   14d64:	beq	14df0 <__assert_fail@plt+0x3d68>
   14d68:	ldr	lr, [ip, #12]
   14d6c:	cmp	lr, #0
   14d70:	str	lr, [sp, #28]
   14d74:	beq	14df8 <__assert_fail@plt+0x3d70>
   14d78:	ldr	lr, [ip, #16]
   14d7c:	cmp	lr, #0
   14d80:	str	lr, [sp, #32]
   14d84:	beq	14e00 <__assert_fail@plt+0x3d78>
   14d88:	ldr	lr, [ip, #20]
   14d8c:	cmp	lr, #0
   14d90:	str	lr, [sp, #36]	; 0x24
   14d94:	beq	14e08 <__assert_fail@plt+0x3d80>
   14d98:	ldr	lr, [ip, #24]
   14d9c:	cmp	lr, #0
   14da0:	str	lr, [sp, #40]	; 0x28
   14da4:	beq	14e10 <__assert_fail@plt+0x3d88>
   14da8:	ldr	lr, [ip, #28]
   14dac:	cmp	lr, #0
   14db0:	str	lr, [sp, #44]	; 0x2c
   14db4:	beq	14e18 <__assert_fail@plt+0x3d90>
   14db8:	ldr	lr, [ip, #32]
   14dbc:	cmp	lr, #0
   14dc0:	str	lr, [sp, #48]	; 0x30
   14dc4:	beq	14e20 <__assert_fail@plt+0x3d98>
   14dc8:	ldr	lr, [ip, #36]	; 0x24
   14dcc:	mov	ip, #10
   14dd0:	cmp	lr, #0
   14dd4:	str	lr, [sp, #52]	; 0x34
   14dd8:	movweq	ip, #9
   14ddc:	b	14e24 <__assert_fail@plt+0x3d9c>
   14de0:	mov	ip, #0
   14de4:	b	14e24 <__assert_fail@plt+0x3d9c>
   14de8:	mov	ip, #1
   14dec:	b	14e24 <__assert_fail@plt+0x3d9c>
   14df0:	mov	ip, #2
   14df4:	b	14e24 <__assert_fail@plt+0x3d9c>
   14df8:	mov	ip, #3
   14dfc:	b	14e24 <__assert_fail@plt+0x3d9c>
   14e00:	mov	ip, #4
   14e04:	b	14e24 <__assert_fail@plt+0x3d9c>
   14e08:	mov	ip, #5
   14e0c:	b	14e24 <__assert_fail@plt+0x3d9c>
   14e10:	mov	ip, #6
   14e14:	b	14e24 <__assert_fail@plt+0x3d9c>
   14e18:	mov	ip, #7
   14e1c:	b	14e24 <__assert_fail@plt+0x3d9c>
   14e20:	mov	ip, #8
   14e24:	add	lr, sp, #16
   14e28:	str	ip, [sp, #4]
   14e2c:	str	lr, [sp]
   14e30:	bl	14898 <__assert_fail@plt+0x3810>
   14e34:	mov	sp, fp
   14e38:	pop	{fp, pc}
   14e3c:	push	{fp, lr}
   14e40:	mov	fp, sp
   14e44:	movw	r0, #37196	; 0x914c
   14e48:	movt	r0, #2
   14e4c:	ldr	r1, [r0]
   14e50:	movw	r0, #31095	; 0x7977
   14e54:	movt	r0, #1
   14e58:	bl	10e30 <fputs_unlocked@plt>
   14e5c:	movw	r1, #32543	; 0x7f1f
   14e60:	mov	r0, #0
   14e64:	mov	r2, #5
   14e68:	movt	r1, #1
   14e6c:	bl	10ec0 <dcgettext@plt>
   14e70:	movw	r2, #32563	; 0x7f33
   14e74:	mov	r1, r0
   14e78:	mov	r0, #1
   14e7c:	movt	r2, #1
   14e80:	bl	10fc8 <__printf_chk@plt>
   14e84:	movw	r1, #32585	; 0x7f49
   14e88:	mov	r0, #0
   14e8c:	mov	r2, #5
   14e90:	movt	r1, #1
   14e94:	bl	10ec0 <dcgettext@plt>
   14e98:	movw	r2, #30605	; 0x778d
   14e9c:	movw	r3, #30904	; 0x78b8
   14ea0:	mov	r1, r0
   14ea4:	mov	r0, #1
   14ea8:	movt	r2, #1
   14eac:	movt	r3, #1
   14eb0:	bl	10fc8 <__printf_chk@plt>
   14eb4:	movw	r1, #32605	; 0x7f5d
   14eb8:	mov	r0, #0
   14ebc:	mov	r2, #5
   14ec0:	movt	r1, #1
   14ec4:	bl	10ec0 <dcgettext@plt>
   14ec8:	movw	r2, #32644	; 0x7f84
   14ecc:	mov	r1, r0
   14ed0:	mov	r0, #1
   14ed4:	movt	r2, #1
   14ed8:	pop	{fp, lr}
   14edc:	b	10fc8 <__printf_chk@plt>
   14ee0:	push	{r4, r5, r6, sl, fp, lr}
   14ee4:	add	fp, sp, #16
   14ee8:	mov	r4, r2
   14eec:	mov	r5, r1
   14ef0:	mov	r6, r0
   14ef4:	bl	17050 <__assert_fail@plt+0x5fc8>
   14ef8:	cmp	r0, #0
   14efc:	popne	{r4, r5, r6, sl, fp, pc}
   14f00:	cmp	r6, #0
   14f04:	beq	14f18 <__assert_fail@plt+0x3e90>
   14f08:	cmp	r5, #0
   14f0c:	cmpne	r4, #0
   14f10:	bne	14f18 <__assert_fail@plt+0x3e90>
   14f14:	pop	{r4, r5, r6, sl, fp, pc}
   14f18:	bl	154b8 <__assert_fail@plt+0x4430>
   14f1c:	push	{r4, r5, r6, sl, fp, lr}
   14f20:	add	fp, sp, #16
   14f24:	mov	r4, r2
   14f28:	mov	r5, r1
   14f2c:	mov	r6, r0
   14f30:	bl	17050 <__assert_fail@plt+0x5fc8>
   14f34:	cmp	r0, #0
   14f38:	popne	{r4, r5, r6, sl, fp, pc}
   14f3c:	cmp	r6, #0
   14f40:	beq	14f54 <__assert_fail@plt+0x3ecc>
   14f44:	cmp	r5, #0
   14f48:	cmpne	r4, #0
   14f4c:	bne	14f54 <__assert_fail@plt+0x3ecc>
   14f50:	pop	{r4, r5, r6, sl, fp, pc}
   14f54:	bl	154b8 <__assert_fail@plt+0x4430>
   14f58:	push	{fp, lr}
   14f5c:	mov	fp, sp
   14f60:	bl	16eb0 <__assert_fail@plt+0x5e28>
   14f64:	cmp	r0, #0
   14f68:	popne	{fp, pc}
   14f6c:	bl	154b8 <__assert_fail@plt+0x4430>
   14f70:	push	{fp, lr}
   14f74:	mov	fp, sp
   14f78:	bl	16eb0 <__assert_fail@plt+0x5e28>
   14f7c:	cmp	r0, #0
   14f80:	popne	{fp, pc}
   14f84:	bl	154b8 <__assert_fail@plt+0x4430>
   14f88:	push	{fp, lr}
   14f8c:	mov	fp, sp
   14f90:	bl	16eb0 <__assert_fail@plt+0x5e28>
   14f94:	cmp	r0, #0
   14f98:	popne	{fp, pc}
   14f9c:	bl	154b8 <__assert_fail@plt+0x4430>
   14fa0:	push	{r4, r5, fp, lr}
   14fa4:	add	fp, sp, #8
   14fa8:	mov	r4, r1
   14fac:	mov	r5, r0
   14fb0:	bl	16ee0 <__assert_fail@plt+0x5e58>
   14fb4:	cmp	r0, #0
   14fb8:	popne	{r4, r5, fp, pc}
   14fbc:	cmp	r5, #0
   14fc0:	beq	14fd0 <__assert_fail@plt+0x3f48>
   14fc4:	cmp	r4, #0
   14fc8:	bne	14fd0 <__assert_fail@plt+0x3f48>
   14fcc:	pop	{r4, r5, fp, pc}
   14fd0:	bl	154b8 <__assert_fail@plt+0x4430>
   14fd4:	push	{fp, lr}
   14fd8:	mov	fp, sp
   14fdc:	cmp	r1, #0
   14fe0:	orreq	r1, r1, #1
   14fe4:	bl	16ee0 <__assert_fail@plt+0x5e58>
   14fe8:	cmp	r0, #0
   14fec:	popne	{fp, pc}
   14ff0:	bl	154b8 <__assert_fail@plt+0x4430>
   14ff4:	push	{fp, lr}
   14ff8:	mov	fp, sp
   14ffc:	clz	r3, r2
   15000:	lsr	ip, r3, #5
   15004:	clz	r3, r1
   15008:	lsr	r3, r3, #5
   1500c:	orrs	r3, r3, ip
   15010:	movwne	r1, #1
   15014:	movwne	r2, #1
   15018:	bl	17050 <__assert_fail@plt+0x5fc8>
   1501c:	cmp	r0, #0
   15020:	popne	{fp, pc}
   15024:	bl	154b8 <__assert_fail@plt+0x4430>
   15028:	push	{fp, lr}
   1502c:	mov	fp, sp
   15030:	mov	r2, r1
   15034:	mov	r1, r0
   15038:	mov	r0, #0
   1503c:	bl	17050 <__assert_fail@plt+0x5fc8>
   15040:	cmp	r0, #0
   15044:	popne	{fp, pc}
   15048:	bl	154b8 <__assert_fail@plt+0x4430>
   1504c:	push	{fp, lr}
   15050:	mov	fp, sp
   15054:	mov	r2, r1
   15058:	mov	r1, r0
   1505c:	clz	r0, r2
   15060:	clz	r3, r1
   15064:	lsr	r0, r0, #5
   15068:	lsr	r3, r3, #5
   1506c:	orrs	r0, r3, r0
   15070:	movwne	r1, #1
   15074:	movwne	r2, #1
   15078:	mov	r0, #0
   1507c:	bl	17050 <__assert_fail@plt+0x5fc8>
   15080:	cmp	r0, #0
   15084:	popne	{fp, pc}
   15088:	bl	154b8 <__assert_fail@plt+0x4430>
   1508c:	push	{r4, r5, r6, sl, fp, lr}
   15090:	add	fp, sp, #16
   15094:	ldr	r5, [r1]
   15098:	mov	r4, r1
   1509c:	mov	r6, r0
   150a0:	cmp	r0, #0
   150a4:	beq	150bc <__assert_fail@plt+0x4034>
   150a8:	mov	r0, #1
   150ac:	add	r0, r0, r5, lsr #1
   150b0:	adds	r5, r5, r0
   150b4:	bcc	150c4 <__assert_fail@plt+0x403c>
   150b8:	b	15100 <__assert_fail@plt+0x4078>
   150bc:	cmp	r5, #0
   150c0:	movweq	r5, #64	; 0x40
   150c4:	mov	r0, r6
   150c8:	mov	r1, r5
   150cc:	mov	r2, #1
   150d0:	bl	17050 <__assert_fail@plt+0x5fc8>
   150d4:	cmp	r5, #0
   150d8:	mov	r1, r5
   150dc:	movwne	r1, #1
   150e0:	cmp	r0, #0
   150e4:	bne	150f8 <__assert_fail@plt+0x4070>
   150e8:	clz	r2, r6
   150ec:	lsr	r2, r2, #5
   150f0:	orrs	r1, r2, r1
   150f4:	bne	15100 <__assert_fail@plt+0x4078>
   150f8:	str	r5, [r4]
   150fc:	pop	{r4, r5, r6, sl, fp, pc}
   15100:	bl	154b8 <__assert_fail@plt+0x4430>
   15104:	push	{r4, r5, r6, r7, fp, lr}
   15108:	add	fp, sp, #16
   1510c:	ldr	r5, [r1]
   15110:	mov	r6, r2
   15114:	mov	r4, r1
   15118:	mov	r7, r0
   1511c:	cmp	r0, #0
   15120:	beq	15138 <__assert_fail@plt+0x40b0>
   15124:	mov	r0, #1
   15128:	add	r0, r0, r5, lsr #1
   1512c:	adds	r5, r5, r0
   15130:	bcc	15150 <__assert_fail@plt+0x40c8>
   15134:	b	15184 <__assert_fail@plt+0x40fc>
   15138:	cmp	r5, #0
   1513c:	bne	15150 <__assert_fail@plt+0x40c8>
   15140:	mov	r0, #64	; 0x40
   15144:	cmp	r6, #64	; 0x40
   15148:	udiv	r5, r0, r6
   1514c:	addhi	r5, r5, #1
   15150:	mov	r0, r7
   15154:	mov	r1, r5
   15158:	mov	r2, r6
   1515c:	bl	17050 <__assert_fail@plt+0x5fc8>
   15160:	cmp	r0, #0
   15164:	bne	1517c <__assert_fail@plt+0x40f4>
   15168:	cmp	r7, #0
   1516c:	beq	15184 <__assert_fail@plt+0x40fc>
   15170:	cmp	r6, #0
   15174:	cmpne	r5, #0
   15178:	bne	15184 <__assert_fail@plt+0x40fc>
   1517c:	str	r5, [r4]
   15180:	pop	{r4, r5, r6, r7, fp, pc}
   15184:	bl	154b8 <__assert_fail@plt+0x4430>
   15188:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1518c:	add	fp, sp, #24
   15190:	mov	r8, r1
   15194:	ldr	r1, [r1]
   15198:	mov	r5, r0
   1519c:	add	r0, r1, r1, asr #1
   151a0:	cmp	r0, r1
   151a4:	mvnvs	r0, #-2147483648	; 0x80000000
   151a8:	cmp	r0, r3
   151ac:	mov	r7, r0
   151b0:	movgt	r7, r3
   151b4:	cmn	r3, #1
   151b8:	movle	r7, r0
   151bc:	ldr	r0, [fp, #8]
   151c0:	cmn	r0, #1
   151c4:	ble	151ec <__assert_fail@plt+0x4164>
   151c8:	cmp	r0, #0
   151cc:	beq	15240 <__assert_fail@plt+0x41b8>
   151d0:	cmn	r7, #1
   151d4:	ble	15214 <__assert_fail@plt+0x418c>
   151d8:	mvn	r4, #-2147483648	; 0x80000000
   151dc:	udiv	r6, r4, r0
   151e0:	cmp	r6, r7
   151e4:	bge	15240 <__assert_fail@plt+0x41b8>
   151e8:	b	15250 <__assert_fail@plt+0x41c8>
   151ec:	cmn	r7, #1
   151f0:	ble	15230 <__assert_fail@plt+0x41a8>
   151f4:	cmn	r0, #1
   151f8:	beq	15240 <__assert_fail@plt+0x41b8>
   151fc:	mov	r6, #-2147483648	; 0x80000000
   15200:	mvn	r4, #-2147483648	; 0x80000000
   15204:	sdiv	r6, r6, r0
   15208:	cmp	r6, r7
   1520c:	bge	15240 <__assert_fail@plt+0x41b8>
   15210:	b	15250 <__assert_fail@plt+0x41c8>
   15214:	beq	15240 <__assert_fail@plt+0x41b8>
   15218:	mov	r6, #-2147483648	; 0x80000000
   1521c:	mvn	r4, #-2147483648	; 0x80000000
   15220:	sdiv	r6, r6, r7
   15224:	cmp	r6, r0
   15228:	bge	15240 <__assert_fail@plt+0x41b8>
   1522c:	b	15250 <__assert_fail@plt+0x41c8>
   15230:	mvn	r4, #-2147483648	; 0x80000000
   15234:	sdiv	r6, r4, r0
   15238:	cmp	r7, r6
   1523c:	blt	15250 <__assert_fail@plt+0x41c8>
   15240:	mul	r6, r7, r0
   15244:	mov	r4, #64	; 0x40
   15248:	cmp	r6, #63	; 0x3f
   1524c:	bgt	15258 <__assert_fail@plt+0x41d0>
   15250:	sdiv	r7, r4, r0
   15254:	mul	r6, r7, r0
   15258:	cmp	r5, #0
   1525c:	moveq	r4, #0
   15260:	streq	r4, [r8]
   15264:	sub	r4, r7, r1
   15268:	cmp	r4, r2
   1526c:	bge	15318 <__assert_fail@plt+0x4290>
   15270:	add	r7, r1, r2
   15274:	mov	r6, #0
   15278:	mov	r2, #0
   1527c:	cmp	r7, r3
   15280:	movwgt	r6, #1
   15284:	cmn	r3, #1
   15288:	movwgt	r2, #1
   1528c:	cmp	r7, r1
   15290:	bvs	1534c <__assert_fail@plt+0x42c4>
   15294:	ands	r1, r2, r6
   15298:	bne	1534c <__assert_fail@plt+0x42c4>
   1529c:	cmn	r0, #1
   152a0:	ble	152c8 <__assert_fail@plt+0x4240>
   152a4:	cmp	r0, #0
   152a8:	beq	15314 <__assert_fail@plt+0x428c>
   152ac:	cmn	r7, #1
   152b0:	ble	152ec <__assert_fail@plt+0x4264>
   152b4:	mvn	r1, #-2147483648	; 0x80000000
   152b8:	udiv	r1, r1, r0
   152bc:	cmp	r1, r7
   152c0:	bge	15314 <__assert_fail@plt+0x428c>
   152c4:	b	1534c <__assert_fail@plt+0x42c4>
   152c8:	cmn	r7, #1
   152cc:	ble	15304 <__assert_fail@plt+0x427c>
   152d0:	cmn	r0, #1
   152d4:	beq	15314 <__assert_fail@plt+0x428c>
   152d8:	mov	r1, #-2147483648	; 0x80000000
   152dc:	sdiv	r1, r1, r0
   152e0:	cmp	r1, r7
   152e4:	bge	15314 <__assert_fail@plt+0x428c>
   152e8:	b	1534c <__assert_fail@plt+0x42c4>
   152ec:	beq	15314 <__assert_fail@plt+0x428c>
   152f0:	mov	r1, #-2147483648	; 0x80000000
   152f4:	sdiv	r1, r1, r7
   152f8:	cmp	r1, r0
   152fc:	bge	15314 <__assert_fail@plt+0x428c>
   15300:	b	1534c <__assert_fail@plt+0x42c4>
   15304:	mvn	r1, #-2147483648	; 0x80000000
   15308:	sdiv	r1, r1, r0
   1530c:	cmp	r7, r1
   15310:	blt	1534c <__assert_fail@plt+0x42c4>
   15314:	mul	r6, r7, r0
   15318:	mov	r0, r5
   1531c:	mov	r1, r6
   15320:	bl	16ee0 <__assert_fail@plt+0x5e58>
   15324:	cmp	r6, #0
   15328:	movwne	r6, #1
   1532c:	cmp	r0, #0
   15330:	bne	15344 <__assert_fail@plt+0x42bc>
   15334:	clz	r1, r5
   15338:	lsr	r1, r1, #5
   1533c:	orrs	r1, r1, r6
   15340:	bne	1534c <__assert_fail@plt+0x42c4>
   15344:	str	r7, [r8]
   15348:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1534c:	bl	154b8 <__assert_fail@plt+0x4430>
   15350:	push	{fp, lr}
   15354:	mov	fp, sp
   15358:	mov	r1, #1
   1535c:	bl	16e5c <__assert_fail@plt+0x5dd4>
   15360:	cmp	r0, #0
   15364:	popne	{fp, pc}
   15368:	bl	154b8 <__assert_fail@plt+0x4430>
   1536c:	push	{fp, lr}
   15370:	mov	fp, sp
   15374:	bl	16e5c <__assert_fail@plt+0x5dd4>
   15378:	cmp	r0, #0
   1537c:	popne	{fp, pc}
   15380:	bl	154b8 <__assert_fail@plt+0x4430>
   15384:	push	{fp, lr}
   15388:	mov	fp, sp
   1538c:	mov	r1, #1
   15390:	bl	16e5c <__assert_fail@plt+0x5dd4>
   15394:	cmp	r0, #0
   15398:	popne	{fp, pc}
   1539c:	bl	154b8 <__assert_fail@plt+0x4430>
   153a0:	push	{fp, lr}
   153a4:	mov	fp, sp
   153a8:	bl	16e5c <__assert_fail@plt+0x5dd4>
   153ac:	cmp	r0, #0
   153b0:	popne	{fp, pc}
   153b4:	bl	154b8 <__assert_fail@plt+0x4430>
   153b8:	push	{r4, r5, r6, sl, fp, lr}
   153bc:	add	fp, sp, #16
   153c0:	mov	r5, r0
   153c4:	mov	r0, r1
   153c8:	mov	r4, r1
   153cc:	bl	16eb0 <__assert_fail@plt+0x5e28>
   153d0:	cmp	r0, #0
   153d4:	beq	153f0 <__assert_fail@plt+0x4368>
   153d8:	mov	r1, r5
   153dc:	mov	r2, r4
   153e0:	mov	r6, r0
   153e4:	bl	10e90 <memcpy@plt>
   153e8:	mov	r0, r6
   153ec:	pop	{r4, r5, r6, sl, fp, pc}
   153f0:	bl	154b8 <__assert_fail@plt+0x4430>
   153f4:	push	{r4, r5, r6, sl, fp, lr}
   153f8:	add	fp, sp, #16
   153fc:	mov	r5, r0
   15400:	mov	r0, r1
   15404:	mov	r4, r1
   15408:	bl	16eb0 <__assert_fail@plt+0x5e28>
   1540c:	cmp	r0, #0
   15410:	beq	1542c <__assert_fail@plt+0x43a4>
   15414:	mov	r1, r5
   15418:	mov	r2, r4
   1541c:	mov	r6, r0
   15420:	bl	10e90 <memcpy@plt>
   15424:	mov	r0, r6
   15428:	pop	{r4, r5, r6, sl, fp, pc}
   1542c:	bl	154b8 <__assert_fail@plt+0x4430>
   15430:	push	{r4, r5, r6, sl, fp, lr}
   15434:	add	fp, sp, #16
   15438:	mov	r5, r0
   1543c:	add	r0, r1, #1
   15440:	mov	r4, r1
   15444:	bl	16eb0 <__assert_fail@plt+0x5e28>
   15448:	cmp	r0, #0
   1544c:	beq	15474 <__assert_fail@plt+0x43ec>
   15450:	mov	r6, r0
   15454:	mov	r0, #0
   15458:	mov	r1, r5
   1545c:	mov	r2, r4
   15460:	strb	r0, [r6, r4]
   15464:	mov	r0, r6
   15468:	bl	10e90 <memcpy@plt>
   1546c:	mov	r0, r6
   15470:	pop	{r4, r5, r6, sl, fp, pc}
   15474:	bl	154b8 <__assert_fail@plt+0x4430>
   15478:	push	{r4, r5, r6, sl, fp, lr}
   1547c:	add	fp, sp, #16
   15480:	mov	r4, r0
   15484:	bl	10f8c <strlen@plt>
   15488:	add	r5, r0, #1
   1548c:	mov	r0, r5
   15490:	bl	16eb0 <__assert_fail@plt+0x5e28>
   15494:	cmp	r0, #0
   15498:	beq	154b4 <__assert_fail@plt+0x442c>
   1549c:	mov	r1, r4
   154a0:	mov	r2, r5
   154a4:	mov	r6, r0
   154a8:	bl	10e90 <memcpy@plt>
   154ac:	mov	r0, r6
   154b0:	pop	{r4, r5, r6, sl, fp, pc}
   154b4:	bl	154b8 <__assert_fail@plt+0x4430>
   154b8:	push	{fp, lr}
   154bc:	mov	fp, sp
   154c0:	movw	r0, #37100	; 0x90ec
   154c4:	movw	r1, #32720	; 0x7fd0
   154c8:	mov	r2, #5
   154cc:	movt	r0, #2
   154d0:	movt	r1, #1
   154d4:	ldr	r4, [r0]
   154d8:	mov	r0, #0
   154dc:	bl	10ec0 <dcgettext@plt>
   154e0:	movw	r2, #30584	; 0x7778
   154e4:	mov	r3, r0
   154e8:	mov	r0, r4
   154ec:	mov	r1, #0
   154f0:	movt	r2, #1
   154f4:	bl	10f2c <error@plt>
   154f8:	bl	1107c <abort@plt>
   154fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15500:	add	fp, sp, #28
   15504:	sub	sp, sp, #36	; 0x24
   15508:	cmp	r2, #37	; 0x25
   1550c:	bcs	16e3c <__assert_fail@plt+0x5db4>
   15510:	ldr	r8, [fp, #8]
   15514:	mov	r9, r3
   15518:	mov	r6, r2
   1551c:	mov	r7, r1
   15520:	mov	r4, r0
   15524:	bl	10fa4 <__errno_location@plt>
   15528:	add	sl, sp, #32
   1552c:	cmp	r7, #0
   15530:	mov	r5, r0
   15534:	mov	r0, #0
   15538:	mov	r2, r6
   1553c:	mov	r3, #0
   15540:	movne	sl, r7
   15544:	str	r0, [r5]
   15548:	mov	r0, r4
   1554c:	mov	r1, sl
   15550:	bl	11040 <__strtoll_internal@plt>
   15554:	mov	r7, r1
   15558:	ldr	r1, [sl]
   1555c:	cmp	r1, r4
   15560:	beq	1559c <__assert_fail@plt+0x4514>
   15564:	mov	r6, r0
   15568:	ldr	r0, [r5]
   1556c:	cmp	r0, #0
   15570:	beq	15728 <__assert_fail@plt+0x46a0>
   15574:	mov	r5, #4
   15578:	cmp	r0, #34	; 0x22
   1557c:	bne	15980 <__assert_fail@plt+0x48f8>
   15580:	mov	r5, #1
   15584:	cmp	r8, #0
   15588:	beq	15734 <__assert_fail@plt+0x46ac>
   1558c:	ldrb	r4, [r1]
   15590:	cmp	r4, #0
   15594:	bne	155e4 <__assert_fail@plt+0x455c>
   15598:	b	15734 <__assert_fail@plt+0x46ac>
   1559c:	mov	r5, #4
   155a0:	cmp	r8, #0
   155a4:	beq	15980 <__assert_fail@plt+0x48f8>
   155a8:	mov	r6, r1
   155ac:	ldrb	r1, [r4]
   155b0:	cmp	r1, #0
   155b4:	beq	15980 <__assert_fail@plt+0x48f8>
   155b8:	mov	r0, r8
   155bc:	bl	10f98 <strchr@plt>
   155c0:	cmp	r0, #0
   155c4:	beq	15980 <__assert_fail@plt+0x48f8>
   155c8:	mov	r1, r6
   155cc:	mov	r5, #0
   155d0:	mov	r6, #1
   155d4:	mov	r7, #0
   155d8:	ldrb	r4, [r1]
   155dc:	cmp	r4, #0
   155e0:	beq	15734 <__assert_fail@plt+0x46ac>
   155e4:	str	r1, [sp, #20]
   155e8:	mov	r0, r8
   155ec:	mov	r1, r4
   155f0:	bl	10f98 <strchr@plt>
   155f4:	cmp	r0, #0
   155f8:	beq	15978 <__assert_fail@plt+0x48f0>
   155fc:	sub	r0, r4, #69	; 0x45
   15600:	mov	r1, #1
   15604:	mov	r3, #0
   15608:	mov	r2, #1024	; 0x400
   1560c:	cmp	r0, #47	; 0x2f
   15610:	str	r1, [sp, #16]
   15614:	bhi	1574c <__assert_fail@plt+0x46c4>
   15618:	add	r1, pc, #0
   1561c:	ldr	pc, [r1, r0, lsl #2]
   15620:	andeq	r5, r1, r0, ror #13
   15624:	andeq	r5, r1, ip, asr #14
   15628:	andeq	r5, r1, r0, ror #13
   1562c:	andeq	r5, r1, ip, asr #14
   15630:	andeq	r5, r1, ip, asr #14
   15634:	andeq	r5, r1, ip, asr #14
   15638:	andeq	r5, r1, r0, ror #13
   1563c:	andeq	r5, r1, ip, asr #14
   15640:	andeq	r5, r1, r0, ror #13
   15644:	andeq	r5, r1, ip, asr #14
   15648:	andeq	r5, r1, ip, asr #14
   1564c:	andeq	r5, r1, r0, ror #13
   15650:	andeq	r5, r1, ip, asr #14
   15654:	andeq	r5, r1, ip, asr #14
   15658:	andeq	r5, r1, ip, asr #14
   1565c:	andeq	r5, r1, r0, ror #13
   15660:	andeq	r5, r1, ip, asr #14
   15664:	andeq	r5, r1, ip, asr #14
   15668:	andeq	r5, r1, ip, asr #14
   1566c:	andeq	r5, r1, ip, asr #14
   15670:	andeq	r5, r1, r0, ror #13
   15674:	andeq	r5, r1, r0, ror #13
   15678:	andeq	r5, r1, ip, asr #14
   1567c:	andeq	r5, r1, ip, asr #14
   15680:	andeq	r5, r1, ip, asr #14
   15684:	andeq	r5, r1, ip, asr #14
   15688:	andeq	r5, r1, ip, asr #14
   1568c:	andeq	r5, r1, ip, asr #14
   15690:	andeq	r5, r1, ip, asr #14
   15694:	andeq	r5, r1, ip, asr #14
   15698:	andeq	r5, r1, ip, asr #14
   1569c:	andeq	r5, r1, ip, asr #14
   156a0:	andeq	r5, r1, ip, asr #14
   156a4:	andeq	r5, r1, ip, asr #14
   156a8:	andeq	r5, r1, r0, ror #13
   156ac:	andeq	r5, r1, ip, asr #14
   156b0:	andeq	r5, r1, ip, asr #14
   156b4:	andeq	r5, r1, ip, asr #14
   156b8:	andeq	r5, r1, r0, ror #13
   156bc:	andeq	r5, r1, ip, asr #14
   156c0:	andeq	r5, r1, r0, ror #13
   156c4:	andeq	r5, r1, ip, asr #14
   156c8:	andeq	r5, r1, ip, asr #14
   156cc:	andeq	r5, r1, ip, asr #14
   156d0:	andeq	r5, r1, ip, asr #14
   156d4:	andeq	r5, r1, ip, asr #14
   156d8:	andeq	r5, r1, ip, asr #14
   156dc:	andeq	r5, r1, r0, ror #13
   156e0:	mov	r0, r8
   156e4:	mov	r1, #48	; 0x30
   156e8:	bl	10f98 <strchr@plt>
   156ec:	cmp	r0, #0
   156f0:	beq	15744 <__assert_fail@plt+0x46bc>
   156f4:	ldr	r1, [sp, #20]
   156f8:	ldrb	r0, [r1, #1]
   156fc:	cmp	r0, #66	; 0x42
   15700:	cmpne	r0, #68	; 0x44
   15704:	bne	15880 <__assert_fail@plt+0x47f8>
   15708:	mov	r0, #2
   1570c:	mov	r2, #1000	; 0x3e8
   15710:	mov	r3, #0
   15714:	str	r0, [sp, #16]
   15718:	sub	r0, r4, #66	; 0x42
   1571c:	cmp	r0, #53	; 0x35
   15720:	bls	15758 <__assert_fail@plt+0x46d0>
   15724:	b	15978 <__assert_fail@plt+0x48f0>
   15728:	mov	r5, r0
   1572c:	cmp	r8, #0
   15730:	bne	1558c <__assert_fail@plt+0x4504>
   15734:	strd	r6, [r9]
   15738:	mov	r0, r5
   1573c:	sub	sp, fp, #28
   15740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15744:	mov	r3, #0
   15748:	mov	r2, #1024	; 0x400
   1574c:	sub	r0, r4, #66	; 0x42
   15750:	cmp	r0, #53	; 0x35
   15754:	bhi	15978 <__assert_fail@plt+0x48f0>
   15758:	add	r1, pc, #8
   1575c:	str	r3, [sp, #28]
   15760:	str	r2, [sp, #24]
   15764:	ldr	pc, [r1, r0, lsl #2]
   15768:	ldrdeq	r5, [r1], -r0
   1576c:	andeq	r5, r1, r8, ror r9
   15770:	andeq	r5, r1, r8, ror r9
   15774:	andeq	r5, r1, r4, ror #19
   15778:	andeq	r5, r1, r8, ror r9
   1577c:	andeq	r5, r1, r0, asr #16
   15780:	andeq	r5, r1, r8, ror r9
   15784:	andeq	r5, r1, r8, ror r9
   15788:	andeq	r5, r1, r8, ror r9
   1578c:			; <UNDEFINED> instruction: 0x000158b4
   15790:	andeq	r5, r1, r8, ror r9
   15794:	andeq	r5, r1, r4, ror #17
   15798:	andeq	r5, r1, r8, ror r9
   1579c:	andeq	r5, r1, r8, ror r9
   157a0:	andeq	r5, r1, r8, lsr #20
   157a4:	andeq	r5, r1, r8, ror r9
   157a8:	andeq	r5, r1, r8, ror r9
   157ac:	andeq	r5, r1, r8, ror r9
   157b0:	andeq	r5, r1, r4, lsr #18
   157b4:	andeq	r5, r1, r8, ror r9
   157b8:	andeq	r5, r1, r8, ror r9
   157bc:	andeq	r5, r1, r8, ror r9
   157c0:	andeq	r5, r1, r8, ror r9
   157c4:	andeq	r5, r1, ip, ror #20
   157c8:	andeq	r5, r1, ip, lsl #19
   157cc:	andeq	r5, r1, r8, ror r9
   157d0:	andeq	r5, r1, r8, ror r9
   157d4:	andeq	r5, r1, r8, ror r9
   157d8:	andeq	r5, r1, r8, ror r9
   157dc:	andeq	r5, r1, r8, ror r9
   157e0:	andeq	r5, r1, r8, ror r9
   157e4:	andeq	r5, r1, r8, ror r9
   157e8:			; <UNDEFINED> instruction: 0x00015ab0
   157ec:	andeq	r6, r1, r8, lsr #20
   157f0:	andeq	r5, r1, r8, ror r9
   157f4:	andeq	r5, r1, r8, ror r9
   157f8:	andeq	r5, r1, r8, ror r9
   157fc:	andeq	r5, r1, r0, asr #16
   15800:	andeq	r5, r1, r8, ror r9
   15804:	andeq	r5, r1, r8, ror r9
   15808:	andeq	r5, r1, r8, ror r9
   1580c:			; <UNDEFINED> instruction: 0x000158b4
   15810:	andeq	r5, r1, r8, ror r9
   15814:	andeq	r5, r1, r4, ror #17
   15818:	andeq	r5, r1, r8, ror r9
   1581c:	andeq	r5, r1, r8, ror r9
   15820:	andeq	r5, r1, r8, ror r9
   15824:	andeq	r5, r1, r8, ror r9
   15828:	andeq	r5, r1, r8, ror r9
   1582c:	andeq	r5, r1, r8, ror r9
   15830:	andeq	r5, r1, r4, lsr #18
   15834:	andeq	r5, r1, r8, ror r9
   15838:	andeq	r5, r1, r8, ror r9
   1583c:	andeq	r5, r1, r4, asr #21
   15840:	cmn	r7, #1
   15844:	str	r9, [sp, #12]
   15848:	ble	15ad8 <__assert_fail@plt+0x4a50>
   1584c:	ldr	r3, [sp, #28]
   15850:	mvn	r0, #0
   15854:	mvn	r1, #-2147483648	; 0x80000000
   15858:	mvn	r8, #0
   1585c:	mvn	r9, #-2147483648	; 0x80000000
   15860:	bl	17268 <__assert_fail@plt+0x61e0>
   15864:	ldr	r2, [sp, #24]
   15868:	ldr	r3, [sp, #28]
   1586c:	subs	r0, r0, r6
   15870:	mov	r4, #1
   15874:	sbcs	r0, r1, r7
   15878:	bge	15b18 <__assert_fail@plt+0x4a90>
   1587c:	b	15b30 <__assert_fail@plt+0x4aa8>
   15880:	cmp	r0, #105	; 0x69
   15884:	mov	r3, #0
   15888:	bne	15968 <__assert_fail@plt+0x48e0>
   1588c:	ldrb	r0, [r1, #2]
   15890:	mov	r1, #1
   15894:	mov	r2, #1024	; 0x400
   15898:	cmp	r0, #66	; 0x42
   1589c:	movweq	r1, #3
   158a0:	str	r1, [sp, #16]
   158a4:	sub	r0, r4, #66	; 0x42
   158a8:	cmp	r0, #53	; 0x35
   158ac:	bls	15758 <__assert_fail@plt+0x46d0>
   158b0:	b	15978 <__assert_fail@plt+0x48f0>
   158b4:	cmn	r7, #1
   158b8:	ble	15b6c <__assert_fail@plt+0x4ae4>
   158bc:	ldr	r3, [sp, #28]
   158c0:	mvn	r0, #0
   158c4:	mvn	r1, #-2147483648	; 0x80000000
   158c8:	bl	17268 <__assert_fail@plt+0x61e0>
   158cc:	ldr	r2, [sp, #24]
   158d0:	ldr	r3, [sp, #28]
   158d4:	subs	r0, r0, r6
   158d8:	sbcs	r0, r1, r7
   158dc:	bge	15ba0 <__assert_fail@plt+0x4b18>
   158e0:	b	162b0 <__assert_fail@plt+0x5228>
   158e4:	cmn	r7, #1
   158e8:	str	r9, [sp, #12]
   158ec:	ble	15bb4 <__assert_fail@plt+0x4b2c>
   158f0:	ldr	r3, [sp, #28]
   158f4:	mvn	r0, #0
   158f8:	mvn	r1, #-2147483648	; 0x80000000
   158fc:	mvn	r8, #0
   15900:	mvn	r9, #-2147483648	; 0x80000000
   15904:	bl	17268 <__assert_fail@plt+0x61e0>
   15908:	ldr	r2, [sp, #24]
   1590c:	ldr	r3, [sp, #28]
   15910:	subs	r0, r0, r6
   15914:	mov	r4, #1
   15918:	sbcs	r0, r1, r7
   1591c:	bge	15bf4 <__assert_fail@plt+0x4b6c>
   15920:	b	15c0c <__assert_fail@plt+0x4b84>
   15924:	cmn	r7, #1
   15928:	str	r9, [sp, #12]
   1592c:	ble	15c44 <__assert_fail@plt+0x4bbc>
   15930:	ldr	r3, [sp, #28]
   15934:	mvn	r0, #0
   15938:	mvn	r1, #-2147483648	; 0x80000000
   1593c:	mvn	r9, #-2147483648	; 0x80000000
   15940:	str	r0, [sp, #8]
   15944:	mvn	r0, #0
   15948:	bl	17268 <__assert_fail@plt+0x61e0>
   1594c:	ldr	r2, [sp, #24]
   15950:	ldr	r3, [sp, #28]
   15954:	subs	r0, r0, r6
   15958:	mov	r4, #1
   1595c:	sbcs	r0, r1, r7
   15960:	bge	15c88 <__assert_fail@plt+0x4c00>
   15964:	b	15ca4 <__assert_fail@plt+0x4c1c>
   15968:	mov	r2, #1024	; 0x400
   1596c:	sub	r0, r4, #66	; 0x42
   15970:	cmp	r0, #53	; 0x35
   15974:	bls	15758 <__assert_fail@plt+0x46d0>
   15978:	orr	r5, r5, #2
   1597c:	strd	r6, [r9]
   15980:	mov	r0, r5
   15984:	sub	sp, fp, #28
   15988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1598c:	cmp	r7, #0
   15990:	str	r9, [sp, #12]
   15994:	blt	15f8c <__assert_fail@plt+0x4f04>
   15998:	ldr	r3, [sp, #28]
   1599c:	mvn	r0, #0
   159a0:	mvn	r1, #-2147483648	; 0x80000000
   159a4:	mvn	r9, #-2147483648	; 0x80000000
   159a8:	str	r0, [sp, #8]
   159ac:	mvn	r0, #0
   159b0:	bl	17268 <__assert_fail@plt+0x61e0>
   159b4:	ldr	r2, [sp, #24]
   159b8:	ldr	r3, [sp, #28]
   159bc:	subs	r0, r0, r6
   159c0:	mov	r4, #1
   159c4:	sbcs	r0, r1, r7
   159c8:	bge	15fd0 <__assert_fail@plt+0x4f48>
   159cc:	b	15fec <__assert_fail@plt+0x4f64>
   159d0:	cmn	r7, #1
   159d4:	ble	16028 <__assert_fail@plt+0x4fa0>
   159d8:	cmp	r7, #2097152	; 0x200000
   159dc:	blt	16058 <__assert_fail@plt+0x4fd0>
   159e0:	b	162b0 <__assert_fail@plt+0x5228>
   159e4:	cmp	r7, #0
   159e8:	str	r9, [sp, #12]
   159ec:	blt	16068 <__assert_fail@plt+0x4fe0>
   159f0:	ldr	r3, [sp, #28]
   159f4:	mvn	r0, #0
   159f8:	mvn	r1, #-2147483648	; 0x80000000
   159fc:	mvn	r9, #-2147483648	; 0x80000000
   15a00:	str	r0, [sp, #8]
   15a04:	mvn	r0, #0
   15a08:	bl	17268 <__assert_fail@plt+0x61e0>
   15a0c:	ldr	r2, [sp, #24]
   15a10:	ldr	r3, [sp, #28]
   15a14:	subs	r0, r0, r6
   15a18:	mov	r4, #1
   15a1c:	sbcs	r0, r1, r7
   15a20:	bge	160ac <__assert_fail@plt+0x5024>
   15a24:	b	160c8 <__assert_fail@plt+0x5040>
   15a28:	cmp	r7, #0
   15a2c:	str	r9, [sp, #12]
   15a30:	blt	16104 <__assert_fail@plt+0x507c>
   15a34:	ldr	r3, [sp, #28]
   15a38:	mvn	r0, #0
   15a3c:	mvn	r1, #-2147483648	; 0x80000000
   15a40:	mvn	r8, #-2147483648	; 0x80000000
   15a44:	str	r0, [sp, #8]
   15a48:	mvn	r0, #0
   15a4c:	bl	17268 <__assert_fail@plt+0x61e0>
   15a50:	ldr	r2, [sp, #24]
   15a54:	ldr	r3, [sp, #28]
   15a58:	subs	r0, r0, r6
   15a5c:	mov	r4, #1
   15a60:	sbcs	r0, r1, r7
   15a64:	bge	16148 <__assert_fail@plt+0x50c0>
   15a68:	b	16164 <__assert_fail@plt+0x50dc>
   15a6c:	cmp	r7, #0
   15a70:	str	r9, [sp, #12]
   15a74:	blt	161a0 <__assert_fail@plt+0x5118>
   15a78:	ldr	r3, [sp, #28]
   15a7c:	mvn	r0, #0
   15a80:	mvn	r1, #-2147483648	; 0x80000000
   15a84:	mvn	r9, #-2147483648	; 0x80000000
   15a88:	str	r0, [sp, #8]
   15a8c:	mvn	r0, #0
   15a90:	bl	17268 <__assert_fail@plt+0x61e0>
   15a94:	ldr	r2, [sp, #24]
   15a98:	ldr	r3, [sp, #28]
   15a9c:	subs	r0, r0, r6
   15aa0:	mov	r4, #1
   15aa4:	sbcs	r0, r1, r7
   15aa8:	bge	161e4 <__assert_fail@plt+0x515c>
   15aac:	b	16200 <__assert_fail@plt+0x5178>
   15ab0:	cmn	r7, #1
   15ab4:	ble	16240 <__assert_fail@plt+0x51b8>
   15ab8:	cmp	r7, #4194304	; 0x400000
   15abc:	blt	16270 <__assert_fail@plt+0x51e8>
   15ac0:	b	162b0 <__assert_fail@plt+0x5228>
   15ac4:	cmn	r7, #1
   15ac8:	ble	16280 <__assert_fail@plt+0x51f8>
   15acc:	cmp	r7, #1073741824	; 0x40000000
   15ad0:	bge	162b0 <__assert_fail@plt+0x5228>
   15ad4:	b	162d0 <__assert_fail@plt+0x5248>
   15ad8:	and	r0, r6, r7
   15adc:	cmn	r0, #1
   15ae0:	beq	15b18 <__assert_fail@plt+0x4a90>
   15ae4:	mov	r0, #0
   15ae8:	mov	r1, #-2147483648	; 0x80000000
   15aec:	mov	r2, r6
   15af0:	mov	r3, r7
   15af4:	mov	r8, #0
   15af8:	mov	r9, #-2147483648	; 0x80000000
   15afc:	bl	17194 <__assert_fail@plt+0x610c>
   15b00:	ldr	r2, [sp, #24]
   15b04:	ldr	r3, [sp, #28]
   15b08:	mov	r4, #1
   15b0c:	subs	r0, r0, r2
   15b10:	sbcs	r0, r1, r3
   15b14:	blt	15ce0 <__assert_fail@plt+0x4c58>
   15b18:	umull	r8, r0, r6, r2
   15b1c:	mov	r4, #0
   15b20:	mla	r0, r6, r3, r0
   15b24:	mla	r9, r7, r2, r0
   15b28:	cmp	r9, #0
   15b2c:	blt	15ce0 <__assert_fail@plt+0x4c58>
   15b30:	ldr	r3, [sp, #28]
   15b34:	mvn	r0, #-2147483648	; 0x80000000
   15b38:	mvn	r1, #-2147483648	; 0x80000000
   15b3c:	mov	r6, r4
   15b40:	mvn	r4, #0
   15b44:	str	r0, [sp, #8]
   15b48:	mvn	r0, #0
   15b4c:	bl	17268 <__assert_fail@plt+0x61e0>
   15b50:	ldr	r2, [sp, #24]
   15b54:	ldr	r3, [sp, #28]
   15b58:	subs	r0, r0, r8
   15b5c:	mov	r7, #1
   15b60:	sbcs	r0, r1, r9
   15b64:	bge	15d1c <__assert_fail@plt+0x4c94>
   15b68:	b	15d38 <__assert_fail@plt+0x4cb0>
   15b6c:	and	r0, r6, r7
   15b70:	cmn	r0, #1
   15b74:	beq	15ba0 <__assert_fail@plt+0x4b18>
   15b78:	mov	r0, #0
   15b7c:	mov	r1, #-2147483648	; 0x80000000
   15b80:	mov	r2, r6
   15b84:	mov	r3, r7
   15b88:	bl	17194 <__assert_fail@plt+0x610c>
   15b8c:	ldr	r2, [sp, #24]
   15b90:	ldr	r3, [sp, #28]
   15b94:	subs	r0, r0, r2
   15b98:	sbcs	r0, r1, r3
   15b9c:	blt	162b0 <__assert_fail@plt+0x5228>
   15ba0:	umull	r0, r1, r6, r2
   15ba4:	mla	r1, r6, r3, r1
   15ba8:	mov	r6, r0
   15bac:	mla	r7, r7, r2, r1
   15bb0:	b	16a28 <__assert_fail@plt+0x59a0>
   15bb4:	and	r0, r6, r7
   15bb8:	cmn	r0, #1
   15bbc:	beq	15bf4 <__assert_fail@plt+0x4b6c>
   15bc0:	mov	r0, #0
   15bc4:	mov	r1, #-2147483648	; 0x80000000
   15bc8:	mov	r2, r6
   15bcc:	mov	r3, r7
   15bd0:	mov	r8, #0
   15bd4:	mov	r9, #-2147483648	; 0x80000000
   15bd8:	bl	17194 <__assert_fail@plt+0x610c>
   15bdc:	ldr	r2, [sp, #24]
   15be0:	ldr	r3, [sp, #28]
   15be4:	mov	r4, #1
   15be8:	subs	r0, r0, r2
   15bec:	sbcs	r0, r1, r3
   15bf0:	blt	15dcc <__assert_fail@plt+0x4d44>
   15bf4:	umull	r8, r0, r6, r2
   15bf8:	mov	r4, #0
   15bfc:	mla	r0, r6, r3, r0
   15c00:	mla	r9, r7, r2, r0
   15c04:	cmp	r9, #0
   15c08:	blt	15dcc <__assert_fail@plt+0x4d44>
   15c0c:	ldr	r3, [sp, #28]
   15c10:	mvn	r0, #0
   15c14:	mvn	r1, #-2147483648	; 0x80000000
   15c18:	str	r4, [sp, #8]
   15c1c:	mvn	r6, #0
   15c20:	mvn	r7, #-2147483648	; 0x80000000
   15c24:	bl	17268 <__assert_fail@plt+0x61e0>
   15c28:	ldr	r4, [sp, #24]
   15c2c:	ldr	r3, [sp, #28]
   15c30:	subs	r0, r0, r8
   15c34:	mov	r2, #1
   15c38:	sbcs	r0, r1, r9
   15c3c:	bge	15e04 <__assert_fail@plt+0x4d7c>
   15c40:	b	15f3c <__assert_fail@plt+0x4eb4>
   15c44:	and	r0, r6, r7
   15c48:	cmn	r0, #1
   15c4c:	beq	15c88 <__assert_fail@plt+0x4c00>
   15c50:	mov	r0, #0
   15c54:	mov	r1, #-2147483648	; 0x80000000
   15c58:	mov	r2, r6
   15c5c:	mov	r3, r7
   15c60:	bl	17194 <__assert_fail@plt+0x610c>
   15c64:	ldr	r2, [sp, #24]
   15c68:	ldr	r3, [sp, #28]
   15c6c:	mov	r4, #1
   15c70:	mov	r9, #-2147483648	; 0x80000000
   15c74:	subs	r0, r0, r2
   15c78:	sbcs	r0, r1, r3
   15c7c:	mov	r0, #0
   15c80:	str	r0, [sp, #8]
   15c84:	blt	15e18 <__assert_fail@plt+0x4d90>
   15c88:	umull	r1, r0, r6, r2
   15c8c:	mov	r4, #0
   15c90:	mla	r0, r6, r3, r0
   15c94:	str	r1, [sp, #8]
   15c98:	mla	r9, r7, r2, r0
   15c9c:	cmp	r9, #0
   15ca0:	blt	15e18 <__assert_fail@plt+0x4d90>
   15ca4:	ldr	r3, [sp, #28]
   15ca8:	mvn	r0, #0
   15cac:	mvn	r1, #-2147483648	; 0x80000000
   15cb0:	str	r4, [sp, #4]
   15cb4:	mvn	r6, #0
   15cb8:	mvn	r8, #-2147483648	; 0x80000000
   15cbc:	bl	17268 <__assert_fail@plt+0x61e0>
   15cc0:	ldr	r4, [sp, #8]
   15cc4:	ldr	r2, [sp, #24]
   15cc8:	ldr	r3, [sp, #28]
   15ccc:	mov	r7, #1
   15cd0:	subs	r0, r0, r4
   15cd4:	sbcs	r0, r1, r9
   15cd8:	bge	15e54 <__assert_fail@plt+0x4dcc>
   15cdc:	b	15e6c <__assert_fail@plt+0x4de4>
   15ce0:	mov	r0, #-2147483648	; 0x80000000
   15ce4:	mov	r1, #-2147483648	; 0x80000000
   15ce8:	mov	r2, r8
   15cec:	mov	r3, r9
   15cf0:	mov	r6, r4
   15cf4:	mov	r4, #0
   15cf8:	str	r0, [sp, #8]
   15cfc:	mov	r0, #0
   15d00:	bl	17194 <__assert_fail@plt+0x610c>
   15d04:	ldr	r2, [sp, #24]
   15d08:	ldr	r3, [sp, #28]
   15d0c:	mov	r7, #1
   15d10:	subs	r0, r0, r2
   15d14:	sbcs	r0, r1, r3
   15d18:	blt	15d8c <__assert_fail@plt+0x4d04>
   15d1c:	umull	r4, r0, r8, r2
   15d20:	mov	r7, r6
   15d24:	mla	r0, r8, r3, r0
   15d28:	mla	r0, r9, r2, r0
   15d2c:	cmp	r0, #0
   15d30:	str	r0, [sp, #8]
   15d34:	blt	15d8c <__assert_fail@plt+0x4d04>
   15d38:	ldr	r3, [sp, #28]
   15d3c:	mvn	r0, #0
   15d40:	mvn	r1, #-2147483648	; 0x80000000
   15d44:	mov	r9, r7
   15d48:	mvn	r6, #0
   15d4c:	mvn	r7, #-2147483648	; 0x80000000
   15d50:	bl	17268 <__assert_fail@plt+0x61e0>
   15d54:	ldr	r8, [sp, #8]
   15d58:	ldr	r3, [sp, #24]
   15d5c:	ldr	ip, [sp, #28]
   15d60:	subs	r0, r0, r4
   15d64:	mov	r2, #1
   15d68:	sbcs	r0, r1, r8
   15d6c:	blt	15d80 <__assert_fail@plt+0x4cf8>
   15d70:	umull	r6, r0, r4, r3
   15d74:	mov	r2, #0
   15d78:	mla	r0, r4, ip, r0
   15d7c:	mla	r7, r8, r3, r0
   15d80:	orr	r3, r2, r9
   15d84:	ldr	r9, [sp, #12]
   15d88:	b	16a28 <__assert_fail@plt+0x59a0>
   15d8c:	ldr	r8, [sp, #8]
   15d90:	mov	r0, #0
   15d94:	mov	r1, #-2147483648	; 0x80000000
   15d98:	mov	r2, r4
   15d9c:	mov	r9, r7
   15da0:	mov	r6, #0
   15da4:	mov	r7, #-2147483648	; 0x80000000
   15da8:	mov	r3, r8
   15dac:	bl	17194 <__assert_fail@plt+0x610c>
   15db0:	ldr	r3, [sp, #24]
   15db4:	ldr	ip, [sp, #28]
   15db8:	mov	r2, #1
   15dbc:	subs	r0, r0, r3
   15dc0:	sbcs	r0, r1, ip
   15dc4:	bge	15d70 <__assert_fail@plt+0x4ce8>
   15dc8:	b	15d80 <__assert_fail@plt+0x4cf8>
   15dcc:	mov	r0, #0
   15dd0:	mov	r1, #-2147483648	; 0x80000000
   15dd4:	mov	r2, r8
   15dd8:	mov	r3, r9
   15ddc:	str	r4, [sp, #8]
   15de0:	mov	r6, #0
   15de4:	mov	r7, #-2147483648	; 0x80000000
   15de8:	bl	17194 <__assert_fail@plt+0x610c>
   15dec:	ldr	r4, [sp, #24]
   15df0:	ldr	r3, [sp, #28]
   15df4:	mov	r2, #1
   15df8:	subs	r0, r0, r4
   15dfc:	sbcs	r0, r1, r3
   15e00:	blt	15f3c <__assert_fail@plt+0x4eb4>
   15e04:	umull	r6, r0, r8, r4
   15e08:	mov	r2, #0
   15e0c:	mla	r0, r8, r3, r0
   15e10:	mla	r7, r9, r4, r0
   15e14:	b	15f3c <__assert_fail@plt+0x4eb4>
   15e18:	str	r4, [sp, #4]
   15e1c:	ldr	r4, [sp, #8]
   15e20:	mov	r0, #0
   15e24:	mov	r1, #-2147483648	; 0x80000000
   15e28:	mov	r3, r9
   15e2c:	mov	r2, r4
   15e30:	bl	17194 <__assert_fail@plt+0x610c>
   15e34:	ldr	r2, [sp, #24]
   15e38:	ldr	r3, [sp, #28]
   15e3c:	mov	r7, #1
   15e40:	mov	r6, #0
   15e44:	mov	r8, #-2147483648	; 0x80000000
   15e48:	subs	r0, r0, r2
   15e4c:	sbcs	r0, r1, r3
   15e50:	blt	15ea4 <__assert_fail@plt+0x4e1c>
   15e54:	umull	r6, r0, r4, r2
   15e58:	ldr	r7, [sp, #4]
   15e5c:	mla	r0, r4, r3, r0
   15e60:	mla	r8, r9, r2, r0
   15e64:	cmp	r8, #0
   15e68:	blt	15ea4 <__assert_fail@plt+0x4e1c>
   15e6c:	ldr	r3, [sp, #28]
   15e70:	mvn	r0, #0
   15e74:	mvn	r1, #-2147483648	; 0x80000000
   15e78:	str	r7, [sp, #8]
   15e7c:	mvn	r4, #0
   15e80:	mvn	r9, #-2147483648	; 0x80000000
   15e84:	bl	17268 <__assert_fail@plt+0x61e0>
   15e88:	ldr	r2, [sp, #24]
   15e8c:	ldr	r3, [sp, #28]
   15e90:	subs	r0, r0, r6
   15e94:	mov	r7, #1
   15e98:	sbcs	r0, r1, r8
   15e9c:	bge	15edc <__assert_fail@plt+0x4e54>
   15ea0:	b	15ef4 <__assert_fail@plt+0x4e6c>
   15ea4:	mov	r0, #0
   15ea8:	mov	r1, #-2147483648	; 0x80000000
   15eac:	mov	r2, r6
   15eb0:	mov	r3, r8
   15eb4:	str	r7, [sp, #8]
   15eb8:	bl	17194 <__assert_fail@plt+0x610c>
   15ebc:	ldr	r2, [sp, #24]
   15ec0:	ldr	r3, [sp, #28]
   15ec4:	mov	r7, #1
   15ec8:	mov	r4, #0
   15ecc:	mov	r9, #-2147483648	; 0x80000000
   15ed0:	subs	r0, r0, r2
   15ed4:	sbcs	r0, r1, r3
   15ed8:	blt	15f4c <__assert_fail@plt+0x4ec4>
   15edc:	umull	r4, r0, r6, r2
   15ee0:	ldr	r7, [sp, #8]
   15ee4:	mla	r0, r6, r3, r0
   15ee8:	mla	r9, r8, r2, r0
   15eec:	cmp	r9, #0
   15ef0:	blt	15f4c <__assert_fail@plt+0x4ec4>
   15ef4:	ldr	r3, [sp, #28]
   15ef8:	mvn	r0, #0
   15efc:	mvn	r1, #-2147483648	; 0x80000000
   15f00:	str	r7, [sp, #8]
   15f04:	mvn	r6, #0
   15f08:	mvn	r7, #-2147483648	; 0x80000000
   15f0c:	bl	17268 <__assert_fail@plt+0x61e0>
   15f10:	ldr	r3, [sp, #24]
   15f14:	ldr	ip, [sp, #28]
   15f18:	subs	r0, r0, r4
   15f1c:	mov	r2, #1
   15f20:	mov	r8, r4
   15f24:	sbcs	r0, r1, r9
   15f28:	blt	15f3c <__assert_fail@plt+0x4eb4>
   15f2c:	umull	r6, r0, r8, r3
   15f30:	mov	r2, #0
   15f34:	mla	r0, r8, ip, r0
   15f38:	mla	r7, r9, r3, r0
   15f3c:	ldr	r0, [sp, #8]
   15f40:	ldr	r9, [sp, #12]
   15f44:	orr	r3, r2, r0
   15f48:	b	16a28 <__assert_fail@plt+0x59a0>
   15f4c:	mov	r0, #0
   15f50:	mov	r1, #-2147483648	; 0x80000000
   15f54:	mov	r2, r4
   15f58:	mov	r3, r9
   15f5c:	str	r7, [sp, #8]
   15f60:	mov	r8, r4
   15f64:	bl	17194 <__assert_fail@plt+0x610c>
   15f68:	ldr	r3, [sp, #24]
   15f6c:	ldr	ip, [sp, #28]
   15f70:	mov	r2, #1
   15f74:	mov	r6, #0
   15f78:	mov	r7, #-2147483648	; 0x80000000
   15f7c:	subs	r0, r0, r3
   15f80:	sbcs	r0, r1, ip
   15f84:	bge	15f2c <__assert_fail@plt+0x4ea4>
   15f88:	b	15f3c <__assert_fail@plt+0x4eb4>
   15f8c:	and	r0, r6, r7
   15f90:	cmn	r0, #1
   15f94:	beq	15fd0 <__assert_fail@plt+0x4f48>
   15f98:	mov	r0, #0
   15f9c:	mov	r1, #-2147483648	; 0x80000000
   15fa0:	mov	r2, r6
   15fa4:	mov	r3, r7
   15fa8:	bl	17194 <__assert_fail@plt+0x610c>
   15fac:	ldr	r2, [sp, #24]
   15fb0:	ldr	r3, [sp, #28]
   15fb4:	mov	r4, #1
   15fb8:	mov	r9, #-2147483648	; 0x80000000
   15fbc:	subs	r0, r0, r2
   15fc0:	sbcs	r0, r1, r3
   15fc4:	mov	r0, #0
   15fc8:	str	r0, [sp, #8]
   15fcc:	blt	162e0 <__assert_fail@plt+0x5258>
   15fd0:	umull	r1, r0, r6, r2
   15fd4:	mov	r4, #0
   15fd8:	mla	r0, r6, r3, r0
   15fdc:	str	r1, [sp, #8]
   15fe0:	mla	r9, r7, r2, r0
   15fe4:	cmp	r9, #0
   15fe8:	blt	162e0 <__assert_fail@plt+0x5258>
   15fec:	ldr	r3, [sp, #28]
   15ff0:	mvn	r0, #0
   15ff4:	mvn	r1, #-2147483648	; 0x80000000
   15ff8:	str	r4, [sp, #4]
   15ffc:	mvn	r8, #0
   16000:	mvn	r4, #-2147483648	; 0x80000000
   16004:	bl	17268 <__assert_fail@plt+0x61e0>
   16008:	ldr	r6, [sp, #8]
   1600c:	ldr	r2, [sp, #24]
   16010:	ldr	r3, [sp, #28]
   16014:	mov	r7, #1
   16018:	subs	r0, r0, r6
   1601c:	sbcs	r0, r1, r9
   16020:	bge	1631c <__assert_fail@plt+0x5294>
   16024:	b	16334 <__assert_fail@plt+0x52ac>
   16028:	and	r0, r6, r7
   1602c:	cmn	r0, #1
   16030:	beq	16058 <__assert_fail@plt+0x4fd0>
   16034:	mov	r0, #0
   16038:	mov	r1, #-2147483648	; 0x80000000
   1603c:	mov	r2, r6
   16040:	mov	r3, r7
   16044:	bl	17194 <__assert_fail@plt+0x610c>
   16048:	ldr	r3, [sp, #28]
   1604c:	subs	r0, r0, #1024	; 0x400
   16050:	sbcs	r0, r1, #0
   16054:	blt	162b0 <__assert_fail@plt+0x5228>
   16058:	lsl	r0, r7, #10
   1605c:	orr	r7, r0, r6, lsr #22
   16060:	lsl	r6, r6, #10
   16064:	b	16a28 <__assert_fail@plt+0x59a0>
   16068:	and	r0, r6, r7
   1606c:	cmn	r0, #1
   16070:	beq	160ac <__assert_fail@plt+0x5024>
   16074:	mov	r0, #0
   16078:	mov	r1, #-2147483648	; 0x80000000
   1607c:	mov	r2, r6
   16080:	mov	r3, r7
   16084:	bl	17194 <__assert_fail@plt+0x610c>
   16088:	ldr	r2, [sp, #24]
   1608c:	ldr	r3, [sp, #28]
   16090:	mov	r4, #1
   16094:	mov	r9, #-2147483648	; 0x80000000
   16098:	subs	r0, r0, r2
   1609c:	sbcs	r0, r1, r3
   160a0:	mov	r0, #0
   160a4:	str	r0, [sp, #8]
   160a8:	blt	165f8 <__assert_fail@plt+0x5570>
   160ac:	umull	r1, r0, r6, r2
   160b0:	mov	r4, #0
   160b4:	mla	r0, r6, r3, r0
   160b8:	str	r1, [sp, #8]
   160bc:	mla	r9, r7, r2, r0
   160c0:	cmp	r9, #0
   160c4:	blt	165f8 <__assert_fail@plt+0x5570>
   160c8:	ldr	r3, [sp, #28]
   160cc:	mvn	r0, #0
   160d0:	mvn	r1, #-2147483648	; 0x80000000
   160d4:	str	r4, [sp, #4]
   160d8:	mvn	r8, #0
   160dc:	mvn	r4, #-2147483648	; 0x80000000
   160e0:	bl	17268 <__assert_fail@plt+0x61e0>
   160e4:	ldr	r6, [sp, #8]
   160e8:	ldr	r2, [sp, #24]
   160ec:	ldr	r3, [sp, #28]
   160f0:	mov	r7, #1
   160f4:	subs	r0, r0, r6
   160f8:	sbcs	r0, r1, r9
   160fc:	bge	16634 <__assert_fail@plt+0x55ac>
   16100:	b	1664c <__assert_fail@plt+0x55c4>
   16104:	and	r0, r6, r7
   16108:	cmn	r0, #1
   1610c:	beq	16148 <__assert_fail@plt+0x50c0>
   16110:	mov	r0, #0
   16114:	mov	r1, #-2147483648	; 0x80000000
   16118:	mov	r2, r6
   1611c:	mov	r3, r7
   16120:	bl	17194 <__assert_fail@plt+0x610c>
   16124:	ldr	r2, [sp, #24]
   16128:	ldr	r3, [sp, #28]
   1612c:	mov	r4, #1
   16130:	mov	r8, #-2147483648	; 0x80000000
   16134:	subs	r0, r0, r2
   16138:	sbcs	r0, r1, r3
   1613c:	mov	r0, #0
   16140:	str	r0, [sp, #8]
   16144:	blt	16874 <__assert_fail@plt+0x57ec>
   16148:	umull	r1, r0, r6, r2
   1614c:	mov	r4, #0
   16150:	mla	r0, r6, r3, r0
   16154:	str	r1, [sp, #8]
   16158:	mla	r8, r7, r2, r0
   1615c:	cmp	r8, #0
   16160:	blt	16874 <__assert_fail@plt+0x57ec>
   16164:	ldr	r3, [sp, #28]
   16168:	mvn	r0, #0
   1616c:	mvn	r1, #-2147483648	; 0x80000000
   16170:	str	r4, [sp, #4]
   16174:	mvn	r9, #0
   16178:	mvn	r4, #-2147483648	; 0x80000000
   1617c:	bl	17268 <__assert_fail@plt+0x61e0>
   16180:	ldr	r6, [sp, #8]
   16184:	ldr	r2, [sp, #24]
   16188:	ldr	r3, [sp, #28]
   1618c:	mov	r7, #1
   16190:	subs	r0, r0, r6
   16194:	sbcs	r0, r1, r8
   16198:	bge	168b0 <__assert_fail@plt+0x5828>
   1619c:	b	168c8 <__assert_fail@plt+0x5840>
   161a0:	and	r0, r6, r7
   161a4:	cmn	r0, #1
   161a8:	beq	161e4 <__assert_fail@plt+0x515c>
   161ac:	mov	r0, #0
   161b0:	mov	r1, #-2147483648	; 0x80000000
   161b4:	mov	r2, r6
   161b8:	mov	r3, r7
   161bc:	bl	17194 <__assert_fail@plt+0x610c>
   161c0:	ldr	r2, [sp, #24]
   161c4:	ldr	r3, [sp, #28]
   161c8:	mov	r4, #1
   161cc:	mov	r9, #-2147483648	; 0x80000000
   161d0:	subs	r0, r0, r2
   161d4:	sbcs	r0, r1, r3
   161d8:	mov	r0, #0
   161dc:	str	r0, [sp, #8]
   161e0:	blt	16a90 <__assert_fail@plt+0x5a08>
   161e4:	umull	r1, r0, r6, r2
   161e8:	mov	r4, #0
   161ec:	mla	r0, r6, r3, r0
   161f0:	str	r1, [sp, #8]
   161f4:	mla	r9, r7, r2, r0
   161f8:	cmp	r9, #0
   161fc:	blt	16a90 <__assert_fail@plt+0x5a08>
   16200:	ldr	r3, [sp, #28]
   16204:	mvn	r0, #0
   16208:	mvn	r1, #-2147483648	; 0x80000000
   1620c:	str	r4, [sp]
   16210:	mvn	r8, #-2147483648	; 0x80000000
   16214:	str	r0, [sp, #4]
   16218:	mvn	r0, #0
   1621c:	bl	17268 <__assert_fail@plt+0x61e0>
   16220:	ldr	r6, [sp, #8]
   16224:	ldr	r2, [sp, #24]
   16228:	ldr	r3, [sp, #28]
   1622c:	mov	r7, #1
   16230:	subs	r0, r0, r6
   16234:	sbcs	r0, r1, r9
   16238:	bge	16ad0 <__assert_fail@plt+0x5a48>
   1623c:	b	16aec <__assert_fail@plt+0x5a64>
   16240:	and	r0, r6, r7
   16244:	cmn	r0, #1
   16248:	beq	16270 <__assert_fail@plt+0x51e8>
   1624c:	mov	r0, #0
   16250:	mov	r1, #-2147483648	; 0x80000000
   16254:	mov	r2, r6
   16258:	mov	r3, r7
   1625c:	bl	17194 <__assert_fail@plt+0x610c>
   16260:	ldr	r3, [sp, #28]
   16264:	subs	r0, r0, #512	; 0x200
   16268:	sbcs	r0, r1, #0
   1626c:	blt	162b0 <__assert_fail@plt+0x5228>
   16270:	lsl	r0, r7, #9
   16274:	orr	r7, r0, r6, lsr #23
   16278:	lsl	r6, r6, #9
   1627c:	b	16a28 <__assert_fail@plt+0x59a0>
   16280:	and	r0, r6, r7
   16284:	cmn	r0, #1
   16288:	beq	162d0 <__assert_fail@plt+0x5248>
   1628c:	mov	r0, #0
   16290:	mov	r1, #-2147483648	; 0x80000000
   16294:	mov	r2, r6
   16298:	mov	r3, r7
   1629c:	bl	17194 <__assert_fail@plt+0x610c>
   162a0:	ldr	r3, [sp, #28]
   162a4:	subs	r0, r0, #2
   162a8:	sbcs	r0, r1, #0
   162ac:	bge	162d0 <__assert_fail@plt+0x5248>
   162b0:	mvn	r0, #-2147483648	; 0x80000000
   162b4:	cmp	r7, #0
   162b8:	mvn	r6, #0
   162bc:	mov	r3, #1
   162c0:	movlt	r0, #-2147483648	; 0x80000000
   162c4:	movwlt	r6, #0
   162c8:	mov	r7, r0
   162cc:	b	16a28 <__assert_fail@plt+0x59a0>
   162d0:	lsl	r0, r7, #1
   162d4:	orr	r7, r0, r6, lsr #31
   162d8:	lsl	r6, r6, #1
   162dc:	b	16a28 <__assert_fail@plt+0x59a0>
   162e0:	ldr	r6, [sp, #8]
   162e4:	mov	r0, #0
   162e8:	mov	r1, #-2147483648	; 0x80000000
   162ec:	mov	r3, r9
   162f0:	str	r4, [sp, #4]
   162f4:	mov	r2, r6
   162f8:	bl	17194 <__assert_fail@plt+0x610c>
   162fc:	ldr	r2, [sp, #24]
   16300:	ldr	r3, [sp, #28]
   16304:	mov	r7, #1
   16308:	mov	r8, #0
   1630c:	mov	r4, #-2147483648	; 0x80000000
   16310:	subs	r0, r0, r2
   16314:	sbcs	r0, r1, r3
   16318:	blt	1636c <__assert_fail@plt+0x52e4>
   1631c:	umull	r8, r0, r6, r2
   16320:	ldr	r7, [sp, #4]
   16324:	mla	r0, r6, r3, r0
   16328:	mla	r4, r9, r2, r0
   1632c:	cmp	r4, #0
   16330:	blt	1636c <__assert_fail@plt+0x52e4>
   16334:	ldr	r3, [sp, #28]
   16338:	mvn	r0, #0
   1633c:	mvn	r1, #-2147483648	; 0x80000000
   16340:	str	r7, [sp, #8]
   16344:	mvn	r7, #0
   16348:	mvn	r9, #-2147483648	; 0x80000000
   1634c:	bl	17268 <__assert_fail@plt+0x61e0>
   16350:	ldr	r2, [sp, #24]
   16354:	ldr	r3, [sp, #28]
   16358:	subs	r0, r0, r8
   1635c:	mov	r6, #1
   16360:	sbcs	r0, r1, r4
   16364:	bge	163a4 <__assert_fail@plt+0x531c>
   16368:	b	163bc <__assert_fail@plt+0x5334>
   1636c:	mov	r0, #0
   16370:	mov	r1, #-2147483648	; 0x80000000
   16374:	mov	r2, r8
   16378:	mov	r3, r4
   1637c:	str	r7, [sp, #8]
   16380:	bl	17194 <__assert_fail@plt+0x610c>
   16384:	ldr	r2, [sp, #24]
   16388:	ldr	r3, [sp, #28]
   1638c:	mov	r6, #1
   16390:	mov	r7, #0
   16394:	mov	r9, #-2147483648	; 0x80000000
   16398:	subs	r0, r0, r2
   1639c:	sbcs	r0, r1, r3
   163a0:	blt	163fc <__assert_fail@plt+0x5374>
   163a4:	umull	r7, r0, r8, r2
   163a8:	ldr	r6, [sp, #8]
   163ac:	mla	r0, r8, r3, r0
   163b0:	mla	r9, r4, r2, r0
   163b4:	cmp	r9, #0
   163b8:	blt	163fc <__assert_fail@plt+0x5374>
   163bc:	ldr	r3, [sp, #28]
   163c0:	mvn	r0, #0
   163c4:	mvn	r1, #-2147483648	; 0x80000000
   163c8:	str	r6, [sp, #8]
   163cc:	mvn	r8, #0
   163d0:	mvn	r4, #-2147483648	; 0x80000000
   163d4:	bl	17268 <__assert_fail@plt+0x61e0>
   163d8:	ldr	r2, [sp, #24]
   163dc:	ldr	r3, [sp, #28]
   163e0:	subs	r0, r0, r7
   163e4:	sbcs	r0, r1, r9
   163e8:	bge	16440 <__assert_fail@plt+0x53b8>
   163ec:	mov	r0, #1
   163f0:	mov	r6, #0
   163f4:	str	r0, [sp, #8]
   163f8:	b	16458 <__assert_fail@plt+0x53d0>
   163fc:	mov	r0, #0
   16400:	mov	r1, #-2147483648	; 0x80000000
   16404:	mov	r2, r7
   16408:	mov	r3, r9
   1640c:	str	r6, [sp, #8]
   16410:	bl	17194 <__assert_fail@plt+0x610c>
   16414:	ldr	r2, [sp, #24]
   16418:	ldr	r3, [sp, #28]
   1641c:	subs	r0, r0, r2
   16420:	sbcs	r0, r1, r3
   16424:	bge	16440 <__assert_fail@plt+0x53b8>
   16428:	mov	r0, #1
   1642c:	mov	r8, #0
   16430:	mov	r4, #-2147483648	; 0x80000000
   16434:	mov	r6, #0
   16438:	str	r0, [sp, #8]
   1643c:	b	16490 <__assert_fail@plt+0x5408>
   16440:	umull	r8, r0, r7, r2
   16444:	mov	r6, #0
   16448:	mla	r0, r7, r3, r0
   1644c:	mla	r4, r9, r2, r0
   16450:	cmp	r4, #0
   16454:	blt	16490 <__assert_fail@plt+0x5408>
   16458:	ldr	r3, [sp, #28]
   1645c:	mvn	r0, #0
   16460:	mvn	r1, #-2147483648	; 0x80000000
   16464:	mvn	r9, #0
   16468:	mvn	r7, #-2147483648	; 0x80000000
   1646c:	bl	17268 <__assert_fail@plt+0x61e0>
   16470:	ldr	r2, [sp, #24]
   16474:	ldr	r3, [sp, #28]
   16478:	subs	r0, r0, r8
   1647c:	sbcs	r0, r1, r4
   16480:	bge	164cc <__assert_fail@plt+0x5444>
   16484:	mov	r0, #1
   16488:	str	r0, [sp, #8]
   1648c:	b	164e0 <__assert_fail@plt+0x5458>
   16490:	mov	r0, #0
   16494:	mov	r1, #-2147483648	; 0x80000000
   16498:	mov	r2, r8
   1649c:	mov	r3, r4
   164a0:	bl	17194 <__assert_fail@plt+0x610c>
   164a4:	ldr	r2, [sp, #24]
   164a8:	ldr	r3, [sp, #28]
   164ac:	subs	r0, r0, r2
   164b0:	sbcs	r0, r1, r3
   164b4:	bge	164cc <__assert_fail@plt+0x5444>
   164b8:	mov	r0, #1
   164bc:	mov	r9, #0
   164c0:	mov	r7, #-2147483648	; 0x80000000
   164c4:	str	r0, [sp, #8]
   164c8:	b	1651c <__assert_fail@plt+0x5494>
   164cc:	umull	r9, r0, r8, r2
   164d0:	mla	r0, r8, r3, r0
   164d4:	mla	r7, r4, r2, r0
   164d8:	cmp	r7, #0
   164dc:	blt	1651c <__assert_fail@plt+0x5494>
   164e0:	ldr	r3, [sp, #28]
   164e4:	mvn	r0, #0
   164e8:	mvn	r1, #-2147483648	; 0x80000000
   164ec:	mvn	r8, #0
   164f0:	mvn	r4, #-2147483648	; 0x80000000
   164f4:	bl	17268 <__assert_fail@plt+0x61e0>
   164f8:	ldr	r2, [sp, #24]
   164fc:	ldr	r3, [sp, #28]
   16500:	subs	r0, r0, r9
   16504:	sbcs	r0, r1, r7
   16508:	bge	1655c <__assert_fail@plt+0x54d4>
   1650c:	ldr	r9, [sp, #12]
   16510:	mov	r0, #1
   16514:	str	r0, [sp, #8]
   16518:	b	16574 <__assert_fail@plt+0x54ec>
   1651c:	mov	r0, #0
   16520:	mov	r1, #-2147483648	; 0x80000000
   16524:	mov	r2, r9
   16528:	mov	r3, r7
   1652c:	bl	17194 <__assert_fail@plt+0x610c>
   16530:	ldr	r2, [sp, #24]
   16534:	ldr	r3, [sp, #28]
   16538:	subs	r0, r0, r2
   1653c:	sbcs	r0, r1, r3
   16540:	bge	1655c <__assert_fail@plt+0x54d4>
   16544:	ldr	r9, [sp, #12]
   16548:	mov	r0, #1
   1654c:	mov	r8, #0
   16550:	mov	r4, #-2147483648	; 0x80000000
   16554:	str	r0, [sp, #8]
   16558:	b	165c4 <__assert_fail@plt+0x553c>
   1655c:	umull	r8, r0, r9, r2
   16560:	mla	r0, r9, r3, r0
   16564:	ldr	r9, [sp, #12]
   16568:	mla	r4, r7, r2, r0
   1656c:	cmp	r4, #0
   16570:	blt	165c4 <__assert_fail@plt+0x553c>
   16574:	ldr	r3, [sp, #28]
   16578:	mvn	r0, #0
   1657c:	mvn	r1, #-2147483648	; 0x80000000
   16580:	mvn	r6, #0
   16584:	bl	17268 <__assert_fail@plt+0x61e0>
   16588:	ldr	r7, [sp, #24]
   1658c:	ldr	r3, [sp, #28]
   16590:	subs	r0, r0, r8
   16594:	mov	r2, #1
   16598:	sbcs	r0, r1, r4
   1659c:	mvn	r0, #-2147483648	; 0x80000000
   165a0:	blt	165b4 <__assert_fail@plt+0x552c>
   165a4:	umull	r6, r0, r8, r7
   165a8:	mov	r2, #0
   165ac:	mla	r0, r8, r3, r0
   165b0:	mla	r0, r4, r7, r0
   165b4:	ldr	r1, [sp, #8]
   165b8:	mov	r7, r0
   165bc:	orr	r3, r2, r1
   165c0:	b	16a28 <__assert_fail@plt+0x59a0>
   165c4:	mov	r0, #0
   165c8:	mov	r1, #-2147483648	; 0x80000000
   165cc:	mov	r2, r8
   165d0:	mov	r3, r4
   165d4:	bl	17194 <__assert_fail@plt+0x610c>
   165d8:	ldr	r7, [sp, #24]
   165dc:	ldr	r3, [sp, #28]
   165e0:	mov	r2, #1
   165e4:	subs	r0, r0, r7
   165e8:	sbcs	r0, r1, r3
   165ec:	mov	r0, #-2147483648	; 0x80000000
   165f0:	bge	165a4 <__assert_fail@plt+0x551c>
   165f4:	b	165b4 <__assert_fail@plt+0x552c>
   165f8:	ldr	r6, [sp, #8]
   165fc:	mov	r0, #0
   16600:	mov	r1, #-2147483648	; 0x80000000
   16604:	mov	r3, r9
   16608:	str	r4, [sp, #4]
   1660c:	mov	r2, r6
   16610:	bl	17194 <__assert_fail@plt+0x610c>
   16614:	ldr	r2, [sp, #24]
   16618:	ldr	r3, [sp, #28]
   1661c:	mov	r7, #1
   16620:	mov	r8, #0
   16624:	mov	r4, #-2147483648	; 0x80000000
   16628:	subs	r0, r0, r2
   1662c:	sbcs	r0, r1, r3
   16630:	blt	16688 <__assert_fail@plt+0x5600>
   16634:	umull	r8, r0, r6, r2
   16638:	ldr	r7, [sp, #4]
   1663c:	mla	r0, r6, r3, r0
   16640:	mla	r4, r9, r2, r0
   16644:	cmp	r4, #0
   16648:	blt	16688 <__assert_fail@plt+0x5600>
   1664c:	ldr	r3, [sp, #28]
   16650:	mvn	r0, #0
   16654:	mvn	r1, #-2147483648	; 0x80000000
   16658:	str	r7, [sp, #4]
   1665c:	mvn	r7, #0
   16660:	mvn	r9, #-2147483648	; 0x80000000
   16664:	bl	17268 <__assert_fail@plt+0x61e0>
   16668:	ldr	r2, [sp, #24]
   1666c:	ldr	r3, [sp, #28]
   16670:	subs	r0, r0, r8
   16674:	mov	r6, #1
   16678:	sbcs	r0, r1, r4
   1667c:	str	r6, [sp, #8]
   16680:	bge	166c4 <__assert_fail@plt+0x563c>
   16684:	b	166e0 <__assert_fail@plt+0x5658>
   16688:	mov	r0, #0
   1668c:	mov	r1, #-2147483648	; 0x80000000
   16690:	mov	r2, r8
   16694:	mov	r3, r4
   16698:	str	r7, [sp, #4]
   1669c:	bl	17194 <__assert_fail@plt+0x610c>
   166a0:	ldr	r2, [sp, #24]
   166a4:	ldr	r3, [sp, #28]
   166a8:	mov	r7, #1
   166ac:	mov	r9, #-2147483648	; 0x80000000
   166b0:	str	r7, [sp, #8]
   166b4:	mov	r7, #0
   166b8:	subs	r0, r0, r2
   166bc:	sbcs	r0, r1, r3
   166c0:	blt	16718 <__assert_fail@plt+0x5690>
   166c4:	umull	r7, r0, r8, r2
   166c8:	mla	r0, r8, r3, r0
   166cc:	mla	r9, r4, r2, r0
   166d0:	ldr	r0, [sp, #4]
   166d4:	cmp	r9, #0
   166d8:	str	r0, [sp, #8]
   166dc:	blt	16718 <__assert_fail@plt+0x5690>
   166e0:	ldr	r3, [sp, #28]
   166e4:	mvn	r0, #0
   166e8:	mvn	r1, #-2147483648	; 0x80000000
   166ec:	mvn	r4, #0
   166f0:	mvn	r8, #-2147483648	; 0x80000000
   166f4:	bl	17268 <__assert_fail@plt+0x61e0>
   166f8:	ldr	r2, [sp, #24]
   166fc:	ldr	r3, [sp, #28]
   16700:	subs	r0, r0, r7
   16704:	sbcs	r0, r1, r9
   16708:	bge	16754 <__assert_fail@plt+0x56cc>
   1670c:	mov	r0, #1
   16710:	str	r0, [sp, #8]
   16714:	b	16768 <__assert_fail@plt+0x56e0>
   16718:	mov	r0, #0
   1671c:	mov	r1, #-2147483648	; 0x80000000
   16720:	mov	r2, r7
   16724:	mov	r3, r9
   16728:	bl	17194 <__assert_fail@plt+0x610c>
   1672c:	ldr	r2, [sp, #24]
   16730:	ldr	r3, [sp, #28]
   16734:	subs	r0, r0, r2
   16738:	sbcs	r0, r1, r3
   1673c:	bge	16754 <__assert_fail@plt+0x56cc>
   16740:	mov	r0, #1
   16744:	mov	r4, #0
   16748:	mov	r8, #-2147483648	; 0x80000000
   1674c:	str	r0, [sp, #8]
   16750:	b	1679c <__assert_fail@plt+0x5714>
   16754:	umull	r4, r0, r7, r2
   16758:	mla	r0, r7, r3, r0
   1675c:	mla	r8, r9, r2, r0
   16760:	cmp	r8, #0
   16764:	blt	1679c <__assert_fail@plt+0x5714>
   16768:	ldr	r3, [sp, #28]
   1676c:	mvn	r0, #0
   16770:	mvn	r1, #-2147483648	; 0x80000000
   16774:	mvn	r6, #0
   16778:	mvn	r9, #-2147483648	; 0x80000000
   1677c:	bl	17268 <__assert_fail@plt+0x61e0>
   16780:	ldr	r2, [sp, #24]
   16784:	ldr	r3, [sp, #28]
   16788:	subs	r0, r0, r4
   1678c:	sbcs	r0, r1, r8
   16790:	bge	167d4 <__assert_fail@plt+0x574c>
   16794:	mov	r8, #1
   16798:	b	167ec <__assert_fail@plt+0x5764>
   1679c:	mov	r0, #0
   167a0:	mov	r1, #-2147483648	; 0x80000000
   167a4:	mov	r2, r4
   167a8:	mov	r3, r8
   167ac:	bl	17194 <__assert_fail@plt+0x610c>
   167b0:	ldr	r2, [sp, #24]
   167b4:	ldr	r3, [sp, #28]
   167b8:	subs	r0, r0, r2
   167bc:	sbcs	r0, r1, r3
   167c0:	bge	167d4 <__assert_fail@plt+0x574c>
   167c4:	mov	r8, #1
   167c8:	mov	r6, #0
   167cc:	mov	r9, #-2147483648	; 0x80000000
   167d0:	b	1683c <__assert_fail@plt+0x57b4>
   167d4:	umull	r6, r0, r4, r2
   167d8:	mla	r0, r4, r3, r0
   167dc:	mla	r9, r8, r2, r0
   167e0:	ldr	r8, [sp, #8]
   167e4:	cmp	r9, #0
   167e8:	blt	1683c <__assert_fail@plt+0x57b4>
   167ec:	ldr	r3, [sp, #28]
   167f0:	mvn	r0, #0
   167f4:	mvn	r1, #-2147483648	; 0x80000000
   167f8:	mvn	r4, #0
   167fc:	mvn	r7, #-2147483648	; 0x80000000
   16800:	bl	17268 <__assert_fail@plt+0x61e0>
   16804:	ldr	r3, [sp, #24]
   16808:	ldr	ip, [sp, #28]
   1680c:	subs	r0, r0, r6
   16810:	mov	r2, #1
   16814:	sbcs	r0, r1, r9
   16818:	blt	1682c <__assert_fail@plt+0x57a4>
   1681c:	umull	r4, r0, r6, r3
   16820:	mov	r2, #0
   16824:	mla	r0, r6, ip, r0
   16828:	mla	r7, r9, r3, r0
   1682c:	ldr	r9, [sp, #12]
   16830:	orr	r3, r2, r8
   16834:	mov	r6, r4
   16838:	b	16a28 <__assert_fail@plt+0x59a0>
   1683c:	mov	r0, #0
   16840:	mov	r1, #-2147483648	; 0x80000000
   16844:	mov	r2, r6
   16848:	mov	r3, r9
   1684c:	bl	17194 <__assert_fail@plt+0x610c>
   16850:	ldr	r3, [sp, #24]
   16854:	ldr	ip, [sp, #28]
   16858:	mov	r2, #1
   1685c:	mov	r4, #0
   16860:	mov	r7, #-2147483648	; 0x80000000
   16864:	subs	r0, r0, r3
   16868:	sbcs	r0, r1, ip
   1686c:	bge	1681c <__assert_fail@plt+0x5794>
   16870:	b	1682c <__assert_fail@plt+0x57a4>
   16874:	ldr	r6, [sp, #8]
   16878:	mov	r0, #0
   1687c:	mov	r1, #-2147483648	; 0x80000000
   16880:	mov	r3, r8
   16884:	str	r4, [sp, #4]
   16888:	mov	r2, r6
   1688c:	bl	17194 <__assert_fail@plt+0x610c>
   16890:	ldr	r2, [sp, #24]
   16894:	ldr	r3, [sp, #28]
   16898:	mov	r7, #1
   1689c:	mov	r9, #0
   168a0:	mov	r4, #-2147483648	; 0x80000000
   168a4:	subs	r0, r0, r2
   168a8:	sbcs	r0, r1, r3
   168ac:	blt	16904 <__assert_fail@plt+0x587c>
   168b0:	umull	r9, r0, r6, r2
   168b4:	ldr	r7, [sp, #4]
   168b8:	mla	r0, r6, r3, r0
   168bc:	mla	r4, r8, r2, r0
   168c0:	cmp	r4, #0
   168c4:	blt	16904 <__assert_fail@plt+0x587c>
   168c8:	ldr	r3, [sp, #28]
   168cc:	mvn	r0, #0
   168d0:	mvn	r1, #-2147483648	; 0x80000000
   168d4:	str	r7, [sp, #4]
   168d8:	mvn	r8, #0
   168dc:	mvn	r7, #-2147483648	; 0x80000000
   168e0:	bl	17268 <__assert_fail@plt+0x61e0>
   168e4:	ldr	r2, [sp, #24]
   168e8:	ldr	r3, [sp, #28]
   168ec:	subs	r0, r0, r9
   168f0:	mov	r6, #1
   168f4:	sbcs	r0, r1, r4
   168f8:	str	r6, [sp, #8]
   168fc:	bge	16940 <__assert_fail@plt+0x58b8>
   16900:	b	1695c <__assert_fail@plt+0x58d4>
   16904:	mov	r0, #0
   16908:	mov	r1, #-2147483648	; 0x80000000
   1690c:	mov	r2, r9
   16910:	mov	r3, r4
   16914:	str	r7, [sp, #4]
   16918:	bl	17194 <__assert_fail@plt+0x610c>
   1691c:	ldr	r2, [sp, #24]
   16920:	ldr	r3, [sp, #28]
   16924:	mov	r7, #1
   16928:	mov	r8, #0
   1692c:	str	r7, [sp, #8]
   16930:	mov	r7, #-2147483648	; 0x80000000
   16934:	subs	r0, r0, r2
   16938:	sbcs	r0, r1, r3
   1693c:	blt	16990 <__assert_fail@plt+0x5908>
   16940:	umull	r8, r0, r9, r2
   16944:	mla	r0, r9, r3, r0
   16948:	mla	r7, r4, r2, r0
   1694c:	ldr	r0, [sp, #4]
   16950:	cmp	r7, #0
   16954:	str	r0, [sp, #8]
   16958:	blt	16990 <__assert_fail@plt+0x5908>
   1695c:	ldr	r3, [sp, #28]
   16960:	mvn	r0, #0
   16964:	mvn	r1, #-2147483648	; 0x80000000
   16968:	mvn	r4, #0
   1696c:	mvn	r9, #-2147483648	; 0x80000000
   16970:	bl	17268 <__assert_fail@plt+0x61e0>
   16974:	ldr	r2, [sp, #24]
   16978:	ldr	r3, [sp, #28]
   1697c:	subs	r0, r0, r8
   16980:	sbcs	r0, r1, r7
   16984:	bge	169c8 <__assert_fail@plt+0x5940>
   16988:	mov	r8, #1
   1698c:	b	169e0 <__assert_fail@plt+0x5958>
   16990:	mov	r0, #0
   16994:	mov	r1, #-2147483648	; 0x80000000
   16998:	mov	r2, r8
   1699c:	mov	r3, r7
   169a0:	bl	17194 <__assert_fail@plt+0x610c>
   169a4:	ldr	r2, [sp, #24]
   169a8:	ldr	r3, [sp, #28]
   169ac:	subs	r0, r0, r2
   169b0:	sbcs	r0, r1, r3
   169b4:	bge	169c8 <__assert_fail@plt+0x5940>
   169b8:	mov	r8, #1
   169bc:	mov	r4, #0
   169c0:	mov	r9, #-2147483648	; 0x80000000
   169c4:	b	16a58 <__assert_fail@plt+0x59d0>
   169c8:	umull	r4, r0, r8, r2
   169cc:	mla	r0, r8, r3, r0
   169d0:	ldr	r8, [sp, #8]
   169d4:	mla	r9, r7, r2, r0
   169d8:	cmp	r9, #0
   169dc:	blt	16a58 <__assert_fail@plt+0x59d0>
   169e0:	ldr	r3, [sp, #28]
   169e4:	mvn	r0, #0
   169e8:	mvn	r1, #-2147483648	; 0x80000000
   169ec:	mvn	r6, #0
   169f0:	mvn	r7, #-2147483648	; 0x80000000
   169f4:	bl	17268 <__assert_fail@plt+0x61e0>
   169f8:	ldr	r3, [sp, #24]
   169fc:	ldr	ip, [sp, #28]
   16a00:	subs	r0, r0, r4
   16a04:	mov	r2, #1
   16a08:	sbcs	r0, r1, r9
   16a0c:	blt	16a20 <__assert_fail@plt+0x5998>
   16a10:	umull	r6, r0, r4, r3
   16a14:	mov	r2, #0
   16a18:	mla	r0, r4, ip, r0
   16a1c:	mla	r7, r9, r3, r0
   16a20:	ldr	r9, [sp, #12]
   16a24:	orr	r3, r2, r8
   16a28:	ldr	r1, [sp, #20]
   16a2c:	ldr	r2, [sp, #16]
   16a30:	orr	r5, r3, r5
   16a34:	add	r0, r1, r2
   16a38:	str	r0, [sl]
   16a3c:	ldrb	r0, [r1, r2]
   16a40:	cmp	r0, #0
   16a44:	orrne	r5, r5, #2
   16a48:	strd	r6, [r9]
   16a4c:	mov	r0, r5
   16a50:	sub	sp, fp, #28
   16a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a58:	mov	r0, #0
   16a5c:	mov	r1, #-2147483648	; 0x80000000
   16a60:	mov	r2, r4
   16a64:	mov	r3, r9
   16a68:	bl	17194 <__assert_fail@plt+0x610c>
   16a6c:	ldr	r3, [sp, #24]
   16a70:	ldr	ip, [sp, #28]
   16a74:	mov	r2, #1
   16a78:	mov	r6, #0
   16a7c:	mov	r7, #-2147483648	; 0x80000000
   16a80:	subs	r0, r0, r3
   16a84:	sbcs	r0, r1, ip
   16a88:	bge	16a10 <__assert_fail@plt+0x5988>
   16a8c:	b	16a20 <__assert_fail@plt+0x5998>
   16a90:	ldr	r6, [sp, #8]
   16a94:	mov	r0, #0
   16a98:	mov	r1, #-2147483648	; 0x80000000
   16a9c:	mov	r3, r9
   16aa0:	str	r4, [sp]
   16aa4:	mov	r2, r6
   16aa8:	bl	17194 <__assert_fail@plt+0x610c>
   16aac:	ldr	r2, [sp, #24]
   16ab0:	ldr	r3, [sp, #28]
   16ab4:	mov	r7, #1
   16ab8:	mov	r8, #-2147483648	; 0x80000000
   16abc:	subs	r0, r0, r2
   16ac0:	sbcs	r0, r1, r3
   16ac4:	mov	r0, #0
   16ac8:	str	r0, [sp, #4]
   16acc:	blt	16b2c <__assert_fail@plt+0x5aa4>
   16ad0:	umull	r1, r0, r6, r2
   16ad4:	ldr	r7, [sp]
   16ad8:	mla	r0, r6, r3, r0
   16adc:	str	r1, [sp, #4]
   16ae0:	mla	r8, r9, r2, r0
   16ae4:	cmp	r8, #0
   16ae8:	blt	16b2c <__assert_fail@plt+0x5aa4>
   16aec:	ldr	r3, [sp, #28]
   16af0:	mvn	r0, #0
   16af4:	mvn	r1, #-2147483648	; 0x80000000
   16af8:	str	r7, [sp]
   16afc:	mvn	r7, #0
   16b00:	mvn	r4, #-2147483648	; 0x80000000
   16b04:	bl	17268 <__assert_fail@plt+0x61e0>
   16b08:	mov	r6, #1
   16b0c:	ldr	r2, [sp, #24]
   16b10:	ldr	r3, [sp, #28]
   16b14:	str	r6, [sp, #8]
   16b18:	ldr	r6, [sp, #4]
   16b1c:	subs	r0, r0, r6
   16b20:	sbcs	r0, r1, r8
   16b24:	bge	16b6c <__assert_fail@plt+0x5ae4>
   16b28:	b	16b88 <__assert_fail@plt+0x5b00>
   16b2c:	ldr	r6, [sp, #4]
   16b30:	mov	r0, #0
   16b34:	mov	r1, #-2147483648	; 0x80000000
   16b38:	mov	r3, r8
   16b3c:	str	r7, [sp]
   16b40:	mov	r2, r6
   16b44:	bl	17194 <__assert_fail@plt+0x610c>
   16b48:	ldr	r2, [sp, #24]
   16b4c:	ldr	r3, [sp, #28]
   16b50:	mov	r7, #1
   16b54:	mov	r4, #-2147483648	; 0x80000000
   16b58:	str	r7, [sp, #8]
   16b5c:	mov	r7, #0
   16b60:	subs	r0, r0, r2
   16b64:	sbcs	r0, r1, r3
   16b68:	blt	16bc0 <__assert_fail@plt+0x5b38>
   16b6c:	umull	r7, r0, r6, r2
   16b70:	mla	r0, r6, r3, r0
   16b74:	mla	r4, r8, r2, r0
   16b78:	ldr	r0, [sp]
   16b7c:	cmp	r4, #0
   16b80:	str	r0, [sp, #8]
   16b84:	blt	16bc0 <__assert_fail@plt+0x5b38>
   16b88:	ldr	r3, [sp, #28]
   16b8c:	mvn	r0, #0
   16b90:	mvn	r1, #-2147483648	; 0x80000000
   16b94:	mvn	r9, #0
   16b98:	mvn	r8, #-2147483648	; 0x80000000
   16b9c:	bl	17268 <__assert_fail@plt+0x61e0>
   16ba0:	ldr	r2, [sp, #24]
   16ba4:	ldr	r3, [sp, #28]
   16ba8:	subs	r0, r0, r7
   16bac:	sbcs	r0, r1, r4
   16bb0:	bge	16bfc <__assert_fail@plt+0x5b74>
   16bb4:	mov	r0, #1
   16bb8:	str	r0, [sp, #8]
   16bbc:	b	16c10 <__assert_fail@plt+0x5b88>
   16bc0:	mov	r0, #0
   16bc4:	mov	r1, #-2147483648	; 0x80000000
   16bc8:	mov	r2, r7
   16bcc:	mov	r3, r4
   16bd0:	bl	17194 <__assert_fail@plt+0x610c>
   16bd4:	ldr	r2, [sp, #24]
   16bd8:	ldr	r3, [sp, #28]
   16bdc:	subs	r0, r0, r2
   16be0:	sbcs	r0, r1, r3
   16be4:	bge	16bfc <__assert_fail@plt+0x5b74>
   16be8:	mov	r0, #1
   16bec:	mov	r9, #0
   16bf0:	mov	r8, #-2147483648	; 0x80000000
   16bf4:	str	r0, [sp, #8]
   16bf8:	b	16c48 <__assert_fail@plt+0x5bc0>
   16bfc:	umull	r9, r0, r7, r2
   16c00:	mla	r0, r7, r3, r0
   16c04:	mla	r8, r4, r2, r0
   16c08:	cmp	r8, #0
   16c0c:	blt	16c48 <__assert_fail@plt+0x5bc0>
   16c10:	ldr	r3, [sp, #28]
   16c14:	mvn	r0, #0
   16c18:	mvn	r1, #-2147483648	; 0x80000000
   16c1c:	mvn	r4, #0
   16c20:	mvn	r7, #-2147483648	; 0x80000000
   16c24:	bl	17268 <__assert_fail@plt+0x61e0>
   16c28:	ldr	r2, [sp, #24]
   16c2c:	ldr	r3, [sp, #28]
   16c30:	subs	r0, r0, r9
   16c34:	sbcs	r0, r1, r8
   16c38:	bge	16c84 <__assert_fail@plt+0x5bfc>
   16c3c:	mov	r0, #1
   16c40:	str	r0, [sp, #8]
   16c44:	b	16c98 <__assert_fail@plt+0x5c10>
   16c48:	mov	r0, #0
   16c4c:	mov	r1, #-2147483648	; 0x80000000
   16c50:	mov	r2, r9
   16c54:	mov	r3, r8
   16c58:	bl	17194 <__assert_fail@plt+0x610c>
   16c5c:	ldr	r2, [sp, #24]
   16c60:	ldr	r3, [sp, #28]
   16c64:	subs	r0, r0, r2
   16c68:	sbcs	r0, r1, r3
   16c6c:	bge	16c84 <__assert_fail@plt+0x5bfc>
   16c70:	mov	r0, #1
   16c74:	mov	r4, #0
   16c78:	mov	r7, #-2147483648	; 0x80000000
   16c7c:	str	r0, [sp, #8]
   16c80:	b	16cd0 <__assert_fail@plt+0x5c48>
   16c84:	umull	r4, r0, r9, r2
   16c88:	mla	r0, r9, r3, r0
   16c8c:	mla	r7, r8, r2, r0
   16c90:	cmp	r7, #0
   16c94:	blt	16cd0 <__assert_fail@plt+0x5c48>
   16c98:	ldr	r3, [sp, #28]
   16c9c:	mvn	r0, #0
   16ca0:	mvn	r1, #-2147483648	; 0x80000000
   16ca4:	mvn	r8, #0
   16ca8:	mvn	r9, #-2147483648	; 0x80000000
   16cac:	bl	17268 <__assert_fail@plt+0x61e0>
   16cb0:	ldr	r2, [sp, #24]
   16cb4:	ldr	r3, [sp, #28]
   16cb8:	subs	r0, r0, r4
   16cbc:	sbcs	r0, r1, r7
   16cc0:	bge	16d0c <__assert_fail@plt+0x5c84>
   16cc4:	mov	r0, #1
   16cc8:	str	r0, [sp, #8]
   16ccc:	b	16d20 <__assert_fail@plt+0x5c98>
   16cd0:	mov	r0, #0
   16cd4:	mov	r1, #-2147483648	; 0x80000000
   16cd8:	mov	r2, r4
   16cdc:	mov	r3, r7
   16ce0:	bl	17194 <__assert_fail@plt+0x610c>
   16ce4:	ldr	r2, [sp, #24]
   16ce8:	ldr	r3, [sp, #28]
   16cec:	subs	r0, r0, r2
   16cf0:	sbcs	r0, r1, r3
   16cf4:	bge	16d0c <__assert_fail@plt+0x5c84>
   16cf8:	mov	r0, #1
   16cfc:	mov	r8, #0
   16d00:	mov	r9, #-2147483648	; 0x80000000
   16d04:	str	r0, [sp, #8]
   16d08:	b	16d5c <__assert_fail@plt+0x5cd4>
   16d0c:	umull	r8, r0, r4, r2
   16d10:	mla	r0, r4, r3, r0
   16d14:	mla	r9, r7, r2, r0
   16d18:	cmp	r9, #0
   16d1c:	blt	16d5c <__assert_fail@plt+0x5cd4>
   16d20:	ldr	r3, [sp, #28]
   16d24:	mvn	r0, #0
   16d28:	mvn	r1, #-2147483648	; 0x80000000
   16d2c:	mvn	r4, #0
   16d30:	mvn	r6, #-2147483648	; 0x80000000
   16d34:	bl	17268 <__assert_fail@plt+0x61e0>
   16d38:	ldr	r2, [sp, #24]
   16d3c:	ldr	r3, [sp, #28]
   16d40:	subs	r0, r0, r8
   16d44:	sbcs	r0, r1, r9
   16d48:	bge	16d9c <__assert_fail@plt+0x5d14>
   16d4c:	ldr	r9, [sp, #12]
   16d50:	mov	r0, #1
   16d54:	str	r0, [sp, #8]
   16d58:	b	16db4 <__assert_fail@plt+0x5d2c>
   16d5c:	mov	r0, #0
   16d60:	mov	r1, #-2147483648	; 0x80000000
   16d64:	mov	r2, r8
   16d68:	mov	r3, r9
   16d6c:	bl	17194 <__assert_fail@plt+0x610c>
   16d70:	ldr	r2, [sp, #24]
   16d74:	ldr	r3, [sp, #28]
   16d78:	subs	r0, r0, r2
   16d7c:	sbcs	r0, r1, r3
   16d80:	bge	16d9c <__assert_fail@plt+0x5d14>
   16d84:	ldr	r9, [sp, #12]
   16d88:	mov	r0, #1
   16d8c:	mov	r4, #0
   16d90:	mov	r6, #-2147483648	; 0x80000000
   16d94:	str	r0, [sp, #8]
   16d98:	b	16e00 <__assert_fail@plt+0x5d78>
   16d9c:	umull	r4, r0, r8, r2
   16da0:	mla	r0, r8, r3, r0
   16da4:	mla	r6, r9, r2, r0
   16da8:	ldr	r9, [sp, #12]
   16dac:	cmp	r6, #0
   16db0:	blt	16e00 <__assert_fail@plt+0x5d78>
   16db4:	ldr	r3, [sp, #28]
   16db8:	mvn	r0, #0
   16dbc:	mvn	r1, #-2147483648	; 0x80000000
   16dc0:	mov	r8, r6
   16dc4:	mvn	r6, #0
   16dc8:	mvn	r7, #-2147483648	; 0x80000000
   16dcc:	bl	17268 <__assert_fail@plt+0x61e0>
   16dd0:	ldr	r3, [sp, #24]
   16dd4:	ldr	ip, [sp, #28]
   16dd8:	subs	r0, r0, r4
   16ddc:	mov	r2, #1
   16de0:	sbcs	r0, r1, r8
   16de4:	blt	16df8 <__assert_fail@plt+0x5d70>
   16de8:	umull	r6, r0, r4, r3
   16dec:	mov	r2, #0
   16df0:	mla	r0, r4, ip, r0
   16df4:	mla	r7, r8, r3, r0
   16df8:	ldr	r0, [sp, #8]
   16dfc:	b	15f44 <__assert_fail@plt+0x4ebc>
   16e00:	mov	r0, #0
   16e04:	mov	r1, #-2147483648	; 0x80000000
   16e08:	mov	r2, r4
   16e0c:	mov	r3, r6
   16e10:	bl	17194 <__assert_fail@plt+0x610c>
   16e14:	ldr	r3, [sp, #24]
   16e18:	ldr	ip, [sp, #28]
   16e1c:	mov	r8, r6
   16e20:	mov	r2, #1
   16e24:	mov	r6, #0
   16e28:	mov	r7, #-2147483648	; 0x80000000
   16e2c:	subs	r0, r0, r3
   16e30:	sbcs	r0, r1, ip
   16e34:	bge	16de8 <__assert_fail@plt+0x5d60>
   16e38:	b	16df8 <__assert_fail@plt+0x5d70>
   16e3c:	movw	r0, #32737	; 0x7fe1
   16e40:	movw	r1, #32775	; 0x8007
   16e44:	movw	r3, #32791	; 0x8017
   16e48:	mov	r2, #85	; 0x55
   16e4c:	movt	r0, #1
   16e50:	movt	r1, #1
   16e54:	movt	r3, #1
   16e58:	bl	11088 <__assert_fail@plt>
   16e5c:	clz	r2, r1
   16e60:	clz	r3, r0
   16e64:	lsr	r2, r2, #5
   16e68:	lsr	r3, r3, #5
   16e6c:	orrs	r2, r3, r2
   16e70:	movwne	r1, #1
   16e74:	movwne	r0, #1
   16e78:	cmp	r1, #0
   16e7c:	beq	16eac <__assert_fail@plt+0x5e24>
   16e80:	mvn	r2, #-2147483648	; 0x80000000
   16e84:	udiv	r2, r2, r1
   16e88:	cmp	r2, r0
   16e8c:	bcs	16eac <__assert_fail@plt+0x5e24>
   16e90:	push	{fp, lr}
   16e94:	mov	fp, sp
   16e98:	bl	10fa4 <__errno_location@plt>
   16e9c:	mov	r1, #12
   16ea0:	str	r1, [r0]
   16ea4:	mov	r0, #0
   16ea8:	pop	{fp, pc}
   16eac:	b	10e24 <calloc@plt>
   16eb0:	cmp	r0, #0
   16eb4:	movweq	r0, #1
   16eb8:	cmn	r0, #1
   16ebc:	ble	16ec4 <__assert_fail@plt+0x5e3c>
   16ec0:	b	10f38 <malloc@plt>
   16ec4:	push	{fp, lr}
   16ec8:	mov	fp, sp
   16ecc:	bl	10fa4 <__errno_location@plt>
   16ed0:	mov	r1, #12
   16ed4:	str	r1, [r0]
   16ed8:	mov	r0, #0
   16edc:	pop	{fp, pc}
   16ee0:	push	{fp, lr}
   16ee4:	mov	fp, sp
   16ee8:	cmp	r0, #0
   16eec:	beq	16f08 <__assert_fail@plt+0x5e80>
   16ef0:	cmp	r1, #0
   16ef4:	beq	16f14 <__assert_fail@plt+0x5e8c>
   16ef8:	cmn	r1, #1
   16efc:	ble	16f20 <__assert_fail@plt+0x5e98>
   16f00:	pop	{fp, lr}
   16f04:	b	10ecc <realloc@plt>
   16f08:	mov	r0, r1
   16f0c:	pop	{fp, lr}
   16f10:	b	16eb0 <__assert_fail@plt+0x5e28>
   16f14:	bl	12838 <__assert_fail@plt+0x17b0>
   16f18:	mov	r0, #0
   16f1c:	pop	{fp, pc}
   16f20:	bl	10fa4 <__errno_location@plt>
   16f24:	mov	r1, #12
   16f28:	str	r1, [r0]
   16f2c:	mov	r0, #0
   16f30:	pop	{fp, pc}
   16f34:	push	{r4, r5, r6, sl, fp, lr}
   16f38:	add	fp, sp, #16
   16f3c:	mov	r4, r0
   16f40:	bl	10f14 <__fpending@plt>
   16f44:	ldr	r6, [r4]
   16f48:	mov	r5, r0
   16f4c:	mov	r0, r4
   16f50:	bl	12734 <__assert_fail@plt+0x16ac>
   16f54:	tst	r6, #32
   16f58:	bne	16f90 <__assert_fail@plt+0x5f08>
   16f5c:	cmp	r0, #0
   16f60:	mov	r4, r0
   16f64:	mvnne	r4, #0
   16f68:	cmp	r5, #0
   16f6c:	bne	16f9c <__assert_fail@plt+0x5f14>
   16f70:	cmp	r0, #0
   16f74:	beq	16f9c <__assert_fail@plt+0x5f14>
   16f78:	bl	10fa4 <__errno_location@plt>
   16f7c:	ldr	r0, [r0]
   16f80:	subs	r4, r0, #9
   16f84:	mvnne	r4, #0
   16f88:	mov	r0, r4
   16f8c:	pop	{r4, r5, r6, sl, fp, pc}
   16f90:	mvn	r4, #0
   16f94:	cmp	r0, #0
   16f98:	beq	16fa4 <__assert_fail@plt+0x5f1c>
   16f9c:	mov	r0, r4
   16fa0:	pop	{r4, r5, r6, sl, fp, pc}
   16fa4:	bl	10fa4 <__errno_location@plt>
   16fa8:	mov	r1, #0
   16fac:	str	r1, [r0]
   16fb0:	mov	r0, r4
   16fb4:	pop	{r4, r5, r6, sl, fp, pc}
   16fb8:	push	{fp, lr}
   16fbc:	mov	fp, sp
   16fc0:	mov	r0, #14
   16fc4:	bl	11034 <nl_langinfo@plt>
   16fc8:	movw	r1, #31096	; 0x7978
   16fcc:	cmp	r0, #0
   16fd0:	movt	r1, #1
   16fd4:	movne	r1, r0
   16fd8:	movw	r0, #32869	; 0x8065
   16fdc:	ldrb	r2, [r1]
   16fe0:	movt	r0, #1
   16fe4:	cmp	r2, #0
   16fe8:	movne	r0, r1
   16fec:	pop	{fp, pc}
   16ff0:	push	{r4, r5, r6, r7, fp, lr}
   16ff4:	add	fp, sp, #16
   16ff8:	sub	sp, sp, #8
   16ffc:	add	r5, sp, #4
   17000:	cmp	r0, #0
   17004:	mov	r7, r2
   17008:	mov	r4, r1
   1700c:	movne	r5, r0
   17010:	mov	r0, r5
   17014:	bl	10f20 <mbrtowc@plt>
   17018:	mov	r6, r0
   1701c:	cmp	r7, #0
   17020:	beq	17044 <__assert_fail@plt+0x5fbc>
   17024:	cmn	r6, #2
   17028:	bcc	17044 <__assert_fail@plt+0x5fbc>
   1702c:	mov	r0, #0
   17030:	bl	1708c <__assert_fail@plt+0x6004>
   17034:	cmp	r0, #0
   17038:	ldrbeq	r0, [r4]
   1703c:	moveq	r6, #1
   17040:	streq	r0, [r5]
   17044:	mov	r0, r6
   17048:	sub	sp, fp, #16
   1704c:	pop	{r4, r5, r6, r7, fp, pc}
   17050:	cmp	r2, #0
   17054:	beq	17084 <__assert_fail@plt+0x5ffc>
   17058:	mvn	r3, #0
   1705c:	udiv	r3, r3, r2
   17060:	cmp	r3, r1
   17064:	bcs	17084 <__assert_fail@plt+0x5ffc>
   17068:	push	{fp, lr}
   1706c:	mov	fp, sp
   17070:	bl	10fa4 <__errno_location@plt>
   17074:	mov	r1, #12
   17078:	str	r1, [r0]
   1707c:	mov	r0, #0
   17080:	pop	{fp, pc}
   17084:	mul	r1, r2, r1
   17088:	b	16ee0 <__assert_fail@plt+0x5e58>
   1708c:	push	{r4, sl, fp, lr}
   17090:	add	fp, sp, #8
   17094:	sub	sp, sp, #264	; 0x108
   17098:	add	r1, sp, #7
   1709c:	movw	r2, #257	; 0x101
   170a0:	bl	170f0 <__assert_fail@plt+0x6068>
   170a4:	mov	r4, #0
   170a8:	cmp	r0, #0
   170ac:	bne	170e4 <__assert_fail@plt+0x605c>
   170b0:	movw	r1, #32875	; 0x806b
   170b4:	add	r0, sp, #7
   170b8:	movt	r1, #1
   170bc:	bl	10e48 <strcmp@plt>
   170c0:	cmp	r0, #0
   170c4:	beq	170e4 <__assert_fail@plt+0x605c>
   170c8:	movw	r1, #32877	; 0x806d
   170cc:	add	r0, sp, #7
   170d0:	movt	r1, #1
   170d4:	bl	10e48 <strcmp@plt>
   170d8:	mov	r4, r0
   170dc:	cmp	r0, #0
   170e0:	movwne	r4, #1
   170e4:	mov	r0, r4
   170e8:	sub	sp, fp, #8
   170ec:	pop	{r4, sl, fp, pc}
   170f0:	push	{r4, r5, r6, r7, fp, lr}
   170f4:	add	fp, sp, #16
   170f8:	mov	r4, r1
   170fc:	mov	r1, #0
   17100:	mov	r6, r2
   17104:	bl	1101c <setlocale@plt>
   17108:	cmp	r0, #0
   1710c:	beq	1713c <__assert_fail@plt+0x60b4>
   17110:	mov	r7, r0
   17114:	bl	10f8c <strlen@plt>
   17118:	cmp	r0, r6
   1711c:	bcs	1715c <__assert_fail@plt+0x60d4>
   17120:	add	r2, r0, #1
   17124:	mov	r0, r4
   17128:	mov	r1, r7
   1712c:	bl	10e90 <memcpy@plt>
   17130:	mov	r5, #0
   17134:	mov	r0, r5
   17138:	pop	{r4, r5, r6, r7, fp, pc}
   1713c:	cmp	r6, #0
   17140:	mov	r5, #22
   17144:	movne	r0, #0
   17148:	strbne	r0, [r4]
   1714c:	movne	r0, r5
   17150:	popne	{r4, r5, r6, r7, fp, pc}
   17154:	mov	r0, r5
   17158:	pop	{r4, r5, r6, r7, fp, pc}
   1715c:	mov	r5, #34	; 0x22
   17160:	cmp	r6, #0
   17164:	beq	17184 <__assert_fail@plt+0x60fc>
   17168:	sub	r6, r6, #1
   1716c:	mov	r0, r4
   17170:	mov	r1, r7
   17174:	mov	r2, r6
   17178:	bl	10e90 <memcpy@plt>
   1717c:	mov	r0, #0
   17180:	strb	r0, [r4, r6]
   17184:	mov	r0, r5
   17188:	pop	{r4, r5, r6, r7, fp, pc}
   1718c:	mov	r1, #0
   17190:	b	1101c <setlocale@plt>
   17194:	cmp	r3, #0
   17198:	cmpeq	r2, #0
   1719c:	bne	171c0 <__assert_fail@plt+0x6138>
   171a0:	cmp	r1, #0
   171a4:	movlt	r1, #-2147483648	; 0x80000000
   171a8:	movlt	r0, #0
   171ac:	blt	171bc <__assert_fail@plt+0x6134>
   171b0:	cmpeq	r0, #0
   171b4:	mvnne	r1, #-2147483648	; 0x80000000
   171b8:	mvnne	r0, #0
   171bc:	b	172a4 <__assert_fail@plt+0x621c>
   171c0:	sub	sp, sp, #8
   171c4:	push	{sp, lr}
   171c8:	cmp	r1, #0
   171cc:	blt	171ec <__assert_fail@plt+0x6164>
   171d0:	cmp	r3, #0
   171d4:	blt	17220 <__assert_fail@plt+0x6198>
   171d8:	bl	172b4 <__assert_fail@plt+0x622c>
   171dc:	ldr	lr, [sp, #4]
   171e0:	add	sp, sp, #8
   171e4:	pop	{r2, r3}
   171e8:	bx	lr
   171ec:	rsbs	r0, r0, #0
   171f0:	sbc	r1, r1, r1, lsl #1
   171f4:	cmp	r3, #0
   171f8:	blt	17244 <__assert_fail@plt+0x61bc>
   171fc:	bl	172b4 <__assert_fail@plt+0x622c>
   17200:	ldr	lr, [sp, #4]
   17204:	add	sp, sp, #8
   17208:	pop	{r2, r3}
   1720c:	rsbs	r0, r0, #0
   17210:	sbc	r1, r1, r1, lsl #1
   17214:	rsbs	r2, r2, #0
   17218:	sbc	r3, r3, r3, lsl #1
   1721c:	bx	lr
   17220:	rsbs	r2, r2, #0
   17224:	sbc	r3, r3, r3, lsl #1
   17228:	bl	172b4 <__assert_fail@plt+0x622c>
   1722c:	ldr	lr, [sp, #4]
   17230:	add	sp, sp, #8
   17234:	pop	{r2, r3}
   17238:	rsbs	r0, r0, #0
   1723c:	sbc	r1, r1, r1, lsl #1
   17240:	bx	lr
   17244:	rsbs	r2, r2, #0
   17248:	sbc	r3, r3, r3, lsl #1
   1724c:	bl	172b4 <__assert_fail@plt+0x622c>
   17250:	ldr	lr, [sp, #4]
   17254:	add	sp, sp, #8
   17258:	pop	{r2, r3}
   1725c:	rsbs	r2, r2, #0
   17260:	sbc	r3, r3, r3, lsl #1
   17264:	bx	lr
   17268:	cmp	r3, #0
   1726c:	cmpeq	r2, #0
   17270:	bne	17288 <__assert_fail@plt+0x6200>
   17274:	cmp	r1, #0
   17278:	cmpeq	r0, #0
   1727c:	mvnne	r1, #0
   17280:	mvnne	r0, #0
   17284:	b	172a4 <__assert_fail@plt+0x621c>
   17288:	sub	sp, sp, #8
   1728c:	push	{sp, lr}
   17290:	bl	172b4 <__assert_fail@plt+0x622c>
   17294:	ldr	lr, [sp, #4]
   17298:	add	sp, sp, #8
   1729c:	pop	{r2, r3}
   172a0:	bx	lr
   172a4:	push	{r1, lr}
   172a8:	mov	r0, #8
   172ac:	bl	10e3c <raise@plt>
   172b0:	pop	{r1, pc}
   172b4:	cmp	r1, r3
   172b8:	cmpeq	r0, r2
   172bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c0:	mov	r4, r0
   172c4:	movcc	r0, #0
   172c8:	mov	r5, r1
   172cc:	ldr	lr, [sp, #36]	; 0x24
   172d0:	movcc	r1, r0
   172d4:	bcc	173d0 <__assert_fail@plt+0x6348>
   172d8:	cmp	r3, #0
   172dc:	clzeq	ip, r2
   172e0:	clzne	ip, r3
   172e4:	addeq	ip, ip, #32
   172e8:	cmp	r5, #0
   172ec:	clzeq	r1, r4
   172f0:	addeq	r1, r1, #32
   172f4:	clzne	r1, r5
   172f8:	sub	ip, ip, r1
   172fc:	sub	sl, ip, #32
   17300:	lsl	r9, r3, ip
   17304:	rsb	fp, ip, #32
   17308:	orr	r9, r9, r2, lsl sl
   1730c:	orr	r9, r9, r2, lsr fp
   17310:	lsl	r8, r2, ip
   17314:	cmp	r5, r9
   17318:	cmpeq	r4, r8
   1731c:	movcc	r0, #0
   17320:	movcc	r1, r0
   17324:	bcc	17340 <__assert_fail@plt+0x62b8>
   17328:	mov	r0, #1
   1732c:	subs	r4, r4, r8
   17330:	lsl	r1, r0, sl
   17334:	orr	r1, r1, r0, lsr fp
   17338:	lsl	r0, r0, ip
   1733c:	sbc	r5, r5, r9
   17340:	cmp	ip, #0
   17344:	beq	173d0 <__assert_fail@plt+0x6348>
   17348:	lsr	r6, r8, #1
   1734c:	orr	r6, r6, r9, lsl #31
   17350:	lsr	r7, r9, #1
   17354:	mov	r2, ip
   17358:	b	1737c <__assert_fail@plt+0x62f4>
   1735c:	subs	r3, r4, r6
   17360:	sbc	r8, r5, r7
   17364:	adds	r3, r3, r3
   17368:	adc	r8, r8, r8
   1736c:	adds	r4, r3, #1
   17370:	adc	r5, r8, #0
   17374:	subs	r2, r2, #1
   17378:	beq	17398 <__assert_fail@plt+0x6310>
   1737c:	cmp	r5, r7
   17380:	cmpeq	r4, r6
   17384:	bcs	1735c <__assert_fail@plt+0x62d4>
   17388:	adds	r4, r4, r4
   1738c:	adc	r5, r5, r5
   17390:	subs	r2, r2, #1
   17394:	bne	1737c <__assert_fail@plt+0x62f4>
   17398:	lsr	r3, r4, ip
   1739c:	orr	r3, r3, r5, lsl fp
   173a0:	lsr	r2, r5, ip
   173a4:	orr	r3, r3, r5, lsr sl
   173a8:	adds	r0, r0, r4
   173ac:	mov	r4, r3
   173b0:	lsl	r3, r2, ip
   173b4:	orr	r3, r3, r4, lsl sl
   173b8:	lsl	ip, r4, ip
   173bc:	orr	r3, r3, r4, lsr fp
   173c0:	adc	r1, r1, r5
   173c4:	subs	r0, r0, ip
   173c8:	mov	r5, r2
   173cc:	sbc	r1, r1, r3
   173d0:	cmp	lr, #0
   173d4:	strdne	r4, [lr]
   173d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173e0:	mov	r7, r0
   173e4:	ldr	r6, [pc, #72]	; 17434 <__assert_fail@plt+0x63ac>
   173e8:	ldr	r5, [pc, #72]	; 17438 <__assert_fail@plt+0x63b0>
   173ec:	add	r6, pc, r6
   173f0:	add	r5, pc, r5
   173f4:	sub	r6, r6, r5
   173f8:	mov	r8, r1
   173fc:	mov	r9, r2
   17400:	bl	10e04 <calloc@plt-0x20>
   17404:	asrs	r6, r6, #2
   17408:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1740c:	mov	r4, #0
   17410:	add	r4, r4, #1
   17414:	ldr	r3, [r5], #4
   17418:	mov	r2, r9
   1741c:	mov	r1, r8
   17420:	mov	r0, r7
   17424:	blx	r3
   17428:	cmp	r6, r4
   1742c:	bne	17410 <__assert_fail@plt+0x6388>
   17430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17434:	andeq	r1, r1, r8, lsl fp
   17438:	andeq	r1, r1, r0, lsl fp
   1743c:	bx	lr
   17440:	ldr	r3, [pc, #12]	; 17454 <__assert_fail@plt+0x63cc>
   17444:	mov	r1, #0
   17448:	add	r3, pc, r3
   1744c:	ldr	r2, [r3]
   17450:	b	10fb0 <__cxa_atexit@plt>
   17454:	muleq	r1, r4, ip

Disassembly of section .fini:

00017458 <.fini>:
   17458:	push	{r3, lr}
   1745c:	pop	{r3, pc}
