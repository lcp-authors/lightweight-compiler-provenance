
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	11270 <__assert_fail@plt+0x48>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	r9, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <endgrent@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <fputs_unlocked@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #102400	; 0x19000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <raise@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #102400	; 0x19000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <getpwnam@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #102400	; 0x19000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <strcmp@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #102400	; 0x19000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <getpwuid@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #102400	; 0x19000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <printf@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #102400	; 0x19000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <fflush@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #102400	; 0x19000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <free@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #102400	; 0x19000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <_exit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #102400	; 0x19000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <memcpy@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #102400	; 0x19000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <execvp@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #102400	; 0x19000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <mbsinit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #102400	; 0x19000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <memcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #102400	; 0x19000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <fputc_unlocked@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #102400	; 0x19000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #102400	; 0x19000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #102400	; 0x19000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <chdir@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #102400	; 0x19000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <iswprint@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #102400	; 0x19000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <setgroups@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #102400	; 0x19000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <fwrite@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #102400	; 0x19000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <lseek64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #102400	; 0x19000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__ctype_get_mb_cur_max@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #102400	; 0x19000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <chroot@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #102400	; 0x19000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <__fpending@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #102400	; 0x19000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <ferror_unlocked@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #102400	; 0x19000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <mbrtowc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #102400	; 0x19000
   1105c:	ldr	pc, [ip, #28]!

00011060 <error@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #102400	; 0x19000
   11068:	ldr	pc, [ip, #20]!

0001106c <getenv@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #102400	; 0x19000
   11074:	ldr	pc, [ip, #12]!

00011078 <setgid@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #102400	; 0x19000
   11080:	ldr	pc, [ip, #4]!

00011084 <malloc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__libc_start_main@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <__freading@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__gmon_start__@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <getopt_long@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <__ctype_b_loc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <exit@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #24, 20	; 0x18000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <gettext@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #24, 20	; 0x18000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <strtoul@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #24, 20	; 0x18000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <strlen@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #24, 20	; 0x18000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <strchr@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #24, 20	; 0x18000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <fprintf@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #24, 20	; 0x18000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <__errno_location@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #24, 20	; 0x18000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__cxa_atexit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #24, 20	; 0x18000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <getgrouplist@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #24, 20	; 0x18000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <memset@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #24, 20	; 0x18000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <setgrent@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #24, 20	; 0x18000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <getgrent@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #24, 20	; 0x18000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fileno@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #24, 20	; 0x18000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <strtoumax@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #24, 20	; 0x18000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <fclose@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #24, 20	; 0x18000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <fseeko64@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #24, 20	; 0x18000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <strtok@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #24, 20	; 0x18000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <setlocale@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #24, 20	; 0x18000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <endpwent@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #24, 20	; 0x18000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <strrchr@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #24, 20	; 0x18000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <nl_langinfo@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #24, 20	; 0x18000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <setuid@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #24, 20	; 0x18000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <getgroups@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #24, 20	; 0x18000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <canonicalize_file_name@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #24, 20	; 0x18000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <bindtextdomain@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #24, 20	; 0x18000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <strncmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #24, 20	; 0x18000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <abort@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #24, 20	; 0x18000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

00011210 <getgrgid@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #24, 20	; 0x18000
   11218:	ldr	pc, [ip, #3828]!	; 0xef4

0001121c <getgrnam@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #24, 20	; 0x18000
   11224:	ldr	pc, [ip, #3820]!	; 0xeec

00011228 <__assert_fail@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #24, 20	; 0x18000
   11230:	ldr	pc, [ip, #3812]!	; 0xee4

Disassembly of section .text:

00011234 <.text>:
   11234:	mov	fp, #0
   11238:	mov	lr, #0
   1123c:	pop	{r1}		; (ldr r1, [sp], #4)
   11240:	mov	r2, sp
   11244:	push	{r2}		; (str r2, [sp, #-4]!)
   11248:	push	{r0}		; (str r0, [sp, #-4]!)
   1124c:	ldr	ip, [pc, #16]	; 11264 <__assert_fail@plt+0x3c>
   11250:	push	{ip}		; (str ip, [sp, #-4]!)
   11254:	ldr	r0, [pc, #12]	; 11268 <__assert_fail@plt+0x40>
   11258:	ldr	r3, [pc, #12]	; 1126c <__assert_fail@plt+0x44>
   1125c:	bl	11090 <__libc_start_main@plt>
   11260:	bl	11204 <abort@plt>
   11264:	andeq	r9, r1, r0, ror r1
   11268:	strdeq	r1, [r1], -r8
   1126c:	andeq	r9, r1, r0, lsl r1
   11270:	ldr	r3, [pc, #20]	; 1128c <__assert_fail@plt+0x64>
   11274:	ldr	r2, [pc, #20]	; 11290 <__assert_fail@plt+0x68>
   11278:	add	r3, pc, r3
   1127c:	ldr	r2, [r3, r2]
   11280:	cmp	r2, #0
   11284:	bxeq	lr
   11288:	b	110a8 <__gmon_start__@plt>
   1128c:	andeq	r8, r1, r0, lsl #27
   11290:	andeq	r0, r0, r8, lsl r1
   11294:	ldr	r0, [pc, #24]	; 112b4 <__assert_fail@plt+0x8c>
   11298:	ldr	r3, [pc, #24]	; 112b8 <__assert_fail@plt+0x90>
   1129c:	cmp	r3, r0
   112a0:	bxeq	lr
   112a4:	ldr	r3, [pc, #16]	; 112bc <__assert_fail@plt+0x94>
   112a8:	cmp	r3, #0
   112ac:	bxeq	lr
   112b0:	bx	r3
   112b4:	andeq	sl, r2, r8, ror r1
   112b8:	andeq	sl, r2, r8, ror r1
   112bc:	andeq	r0, r0, r0
   112c0:	ldr	r0, [pc, #36]	; 112ec <__assert_fail@plt+0xc4>
   112c4:	ldr	r1, [pc, #36]	; 112f0 <__assert_fail@plt+0xc8>
   112c8:	sub	r1, r1, r0
   112cc:	asr	r1, r1, #2
   112d0:	add	r1, r1, r1, lsr #31
   112d4:	asrs	r1, r1, #1
   112d8:	bxeq	lr
   112dc:	ldr	r3, [pc, #16]	; 112f4 <__assert_fail@plt+0xcc>
   112e0:	cmp	r3, #0
   112e4:	bxeq	lr
   112e8:	bx	r3
   112ec:	andeq	sl, r2, r8, ror r1
   112f0:	andeq	sl, r2, r8, ror r1
   112f4:	andeq	r0, r0, r0
   112f8:	push	{r4, lr}
   112fc:	ldr	r4, [pc, #24]	; 1131c <__assert_fail@plt+0xf4>
   11300:	ldrb	r3, [r4]
   11304:	cmp	r3, #0
   11308:	popne	{r4, pc}
   1130c:	bl	11294 <__assert_fail@plt+0x6c>
   11310:	mov	r3, #1
   11314:	strb	r3, [r4]
   11318:	pop	{r4, pc}
   1131c:	muleq	r2, r4, r1
   11320:	b	112c0 <__assert_fail@plt+0x98>
   11324:	push	{fp}		; (str fp, [sp, #-4]!)
   11328:	add	fp, sp, #0
   1132c:	sub	sp, sp, #12
   11330:	str	r0, [fp, #-8]
   11334:	ldr	r3, [fp, #-8]
   11338:	cmp	r3, #1
   1133c:	beq	11350 <__assert_fail@plt+0x128>
   11340:	movw	r3, #41256	; 0xa128
   11344:	movt	r3, #2
   11348:	ldr	r2, [fp, #-8]
   1134c:	str	r2, [r3]
   11350:	nop	{0}
   11354:	add	sp, fp, #0
   11358:	pop	{fp}		; (ldr fp, [sp], #4)
   1135c:	bx	lr
   11360:	push	{fp}		; (str fp, [sp, #-4]!)
   11364:	add	fp, sp, #0
   11368:	sub	sp, sp, #12
   1136c:	mov	r3, r0
   11370:	strb	r3, [fp, #-5]
   11374:	ldrb	r3, [fp, #-5]
   11378:	mov	r0, r3
   1137c:	add	sp, fp, #0
   11380:	pop	{fp}		; (ldr fp, [sp], #4)
   11384:	bx	lr
   11388:	str	fp, [sp, #-8]!
   1138c:	str	lr, [sp, #4]
   11390:	add	fp, sp, #4
   11394:	sub	sp, sp, #80	; 0x50
   11398:	str	r0, [fp, #-80]	; 0xffffffb0
   1139c:	movw	r2, #37644	; 0x930c
   113a0:	movt	r2, #1
   113a4:	sub	r3, fp, #72	; 0x48
   113a8:	ldrd	r0, [r2]
   113ac:	strd	r0, [r3]
   113b0:	ldrd	r0, [r2, #8]
   113b4:	strd	r0, [r3, #8]
   113b8:	ldrd	r0, [r2, #16]
   113bc:	strd	r0, [r3, #16]
   113c0:	ldrd	r0, [r2, #24]
   113c4:	strd	r0, [r3, #24]
   113c8:	ldrd	r0, [r2, #32]
   113cc:	strd	r0, [r3, #32]
   113d0:	ldrd	r0, [r2, #40]	; 0x28
   113d4:	strd	r0, [r3, #40]	; 0x28
   113d8:	ldrd	r0, [r2, #48]	; 0x30
   113dc:	strd	r0, [r3, #48]	; 0x30
   113e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   113e4:	str	r3, [fp, #-8]
   113e8:	sub	r3, fp, #72	; 0x48
   113ec:	str	r3, [fp, #-12]
   113f0:	b	11400 <__assert_fail@plt+0x1d8>
   113f4:	ldr	r3, [fp, #-12]
   113f8:	add	r3, r3, #8
   113fc:	str	r3, [fp, #-12]
   11400:	ldr	r3, [fp, #-12]
   11404:	ldr	r3, [r3]
   11408:	cmp	r3, #0
   1140c:	beq	11430 <__assert_fail@plt+0x208>
   11410:	ldr	r3, [fp, #-12]
   11414:	ldr	r3, [r3]
   11418:	mov	r1, r3
   1141c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11420:	bl	10f4c <strcmp@plt>
   11424:	mov	r3, r0
   11428:	cmp	r3, #0
   1142c:	bne	113f4 <__assert_fail@plt+0x1cc>
   11430:	ldr	r3, [fp, #-12]
   11434:	ldr	r3, [r3, #4]
   11438:	cmp	r3, #0
   1143c:	beq	1144c <__assert_fail@plt+0x224>
   11440:	ldr	r3, [fp, #-12]
   11444:	ldr	r3, [r3, #4]
   11448:	str	r3, [fp, #-8]
   1144c:	movw	r0, #37272	; 0x9198
   11450:	movt	r0, #1
   11454:	bl	110d8 <gettext@plt>
   11458:	mov	r3, r0
   1145c:	movw	r2, #37296	; 0x91b0
   11460:	movt	r2, #1
   11464:	movw	r1, #37336	; 0x91d8
   11468:	movt	r1, #1
   1146c:	mov	r0, r3
   11470:	bl	10f64 <printf@plt>
   11474:	mov	r1, #0
   11478:	mov	r0, #5
   1147c:	bl	11198 <setlocale@plt>
   11480:	str	r0, [fp, #-16]
   11484:	ldr	r3, [fp, #-16]
   11488:	cmp	r3, #0
   1148c:	beq	114d8 <__assert_fail@plt+0x2b0>
   11490:	mov	r2, #3
   11494:	movw	r1, #37352	; 0x91e8
   11498:	movt	r1, #1
   1149c:	ldr	r0, [fp, #-16]
   114a0:	bl	111f8 <strncmp@plt>
   114a4:	mov	r3, r0
   114a8:	cmp	r3, #0
   114ac:	beq	114d8 <__assert_fail@plt+0x2b0>
   114b0:	movw	r0, #37356	; 0x91ec
   114b4:	movt	r0, #1
   114b8:	bl	110d8 <gettext@plt>
   114bc:	mov	r2, r0
   114c0:	movw	r3, #41356	; 0xa18c
   114c4:	movt	r3, #2
   114c8:	ldr	r3, [r3]
   114cc:	mov	r1, r3
   114d0:	mov	r0, r2
   114d4:	bl	10f28 <fputs_unlocked@plt>
   114d8:	movw	r0, #37428	; 0x9234
   114dc:	movt	r0, #1
   114e0:	bl	110d8 <gettext@plt>
   114e4:	mov	r3, r0
   114e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   114ec:	movw	r1, #37296	; 0x91b0
   114f0:	movt	r1, #1
   114f4:	mov	r0, r3
   114f8:	bl	10f64 <printf@plt>
   114fc:	movw	r0, #37456	; 0x9250
   11500:	movt	r0, #1
   11504:	bl	110d8 <gettext@plt>
   11508:	ldr	r2, [fp, #-8]
   1150c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11510:	cmp	r2, r3
   11514:	bne	11524 <__assert_fail@plt+0x2fc>
   11518:	movw	r3, #37508	; 0x9284
   1151c:	movt	r3, #1
   11520:	b	1152c <__assert_fail@plt+0x304>
   11524:	movw	r3, #37520	; 0x9290
   11528:	movt	r3, #1
   1152c:	mov	r2, r3
   11530:	ldr	r1, [fp, #-8]
   11534:	bl	10f64 <printf@plt>
   11538:	nop	{0}
   1153c:	sub	sp, fp, #4
   11540:	ldr	fp, [sp]
   11544:	add	sp, sp, #4
   11548:	pop	{pc}		; (ldr pc, [sp], #4)
   1154c:	push	{fp}		; (str fp, [sp, #-4]!)
   11550:	add	fp, sp, #0
   11554:	sub	sp, sp, #12
   11558:	str	r0, [fp, #-8]
   1155c:	ldr	r3, [fp, #-8]
   11560:	mov	r0, r3
   11564:	add	sp, fp, #0
   11568:	pop	{fp}		; (ldr fp, [sp], #4)
   1156c:	bx	lr
   11570:	push	{fp}		; (str fp, [sp, #-4]!)
   11574:	add	fp, sp, #0
   11578:	sub	sp, sp, #12
   1157c:	str	r0, [fp, #-8]
   11580:	ldr	r3, [fp, #-8]
   11584:	cmn	r3, #1
   11588:	moveq	r3, #1
   1158c:	movne	r3, #0
   11590:	uxtb	r3, r3
   11594:	mov	r0, r3
   11598:	add	sp, fp, #0
   1159c:	pop	{fp}		; (ldr fp, [sp], #4)
   115a0:	bx	lr
   115a4:	push	{fp}		; (str fp, [sp, #-4]!)
   115a8:	add	fp, sp, #0
   115ac:	sub	sp, sp, #12
   115b0:	str	r0, [fp, #-8]
   115b4:	ldr	r3, [fp, #-8]
   115b8:	cmn	r3, #1
   115bc:	moveq	r3, #1
   115c0:	movne	r3, #0
   115c4:	uxtb	r3, r3
   115c8:	mov	r0, r3
   115cc:	add	sp, fp, #0
   115d0:	pop	{fp}		; (ldr fp, [sp], #4)
   115d4:	bx	lr
   115d8:	strd	r4, [sp, #-16]!
   115dc:	str	fp, [sp, #8]
   115e0:	str	lr, [sp, #12]
   115e4:	add	fp, sp, #12
   115e8:	sub	sp, sp, #64	; 0x40
   115ec:	str	r0, [fp, #-56]	; 0xffffffc8
   115f0:	str	r1, [fp, #-60]	; 0xffffffc4
   115f4:	str	r2, [fp, #-64]	; 0xffffffc0
   115f8:	strb	r3, [fp, #-65]	; 0xffffffbf
   115fc:	mov	r3, #0
   11600:	str	r3, [fp, #-16]
   11604:	mov	r3, #0
   11608:	str	r3, [fp, #-40]	; 0xffffffd8
   1160c:	mov	r3, #0
   11610:	str	r3, [fp, #-20]	; 0xffffffec
   11614:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11618:	bl	166ac <__assert_fail@plt+0x5484>
   1161c:	mov	r3, r0
   11620:	str	r3, [fp, #-36]	; 0xffffffdc
   11624:	mov	r3, #0
   11628:	str	r3, [fp, #-28]	; 0xffffffe4
   1162c:	movw	r1, #37844	; 0x93d4
   11630:	movt	r1, #1
   11634:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11638:	bl	1118c <strtok@plt>
   1163c:	str	r0, [fp, #-24]	; 0xffffffe8
   11640:	b	11804 <__assert_fail@plt+0x5dc>
   11644:	sub	r2, fp, #52	; 0x34
   11648:	movw	r3, #37520	; 0x9290
   1164c:	movt	r3, #1
   11650:	str	r3, [sp]
   11654:	mov	r3, r2
   11658:	mov	r2, #10
   1165c:	mov	r1, #0
   11660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11664:	bl	17158 <__assert_fail@plt+0x5f30>
   11668:	mov	r3, r0
   1166c:	cmp	r3, #0
   11670:	bne	1171c <__assert_fail@plt+0x4f4>
   11674:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11678:	mvn	r0, #0
   1167c:	mov	r1, #0
   11680:	cmp	r3, r1
   11684:	cmpeq	r2, r0
   11688:	bhi	1171c <__assert_fail@plt+0x4f4>
   1168c:	b	1169c <__assert_fail@plt+0x474>
   11690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11694:	add	r3, r3, #1
   11698:	str	r3, [fp, #-24]	; 0xffffffe8
   1169c:	bl	110c0 <__ctype_b_loc@plt>
   116a0:	mov	r3, r0
   116a4:	ldr	r4, [r3]
   116a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ac:	ldrb	r3, [r3]
   116b0:	mov	r0, r3
   116b4:	bl	11360 <__assert_fail@plt+0x138>
   116b8:	mov	r3, r0
   116bc:	lsl	r3, r3, #1
   116c0:	add	r3, r4, r3
   116c4:	ldrh	r3, [r3]
   116c8:	and	r3, r3, #8192	; 0x2000
   116cc:	cmp	r3, #0
   116d0:	bne	11690 <__assert_fail@plt+0x468>
   116d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116d8:	ldrb	r3, [r3]
   116dc:	cmp	r3, #43	; 0x2b
   116e0:	beq	11710 <__assert_fail@plt+0x4e8>
   116e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   116e8:	bl	1121c <getgrnam@plt>
   116ec:	str	r0, [fp, #-32]	; 0xffffffe0
   116f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   116f4:	cmp	r3, #0
   116f8:	beq	11710 <__assert_fail@plt+0x4e8>
   116fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11700:	ldr	r3, [r3, #8]
   11704:	mov	r2, r3
   11708:	mov	r3, #0
   1170c:	strd	r2, [fp, #-52]	; 0xffffffcc
   11710:	mov	r3, #1
   11714:	str	r3, [fp, #-32]	; 0xffffffe0
   11718:	b	11748 <__assert_fail@plt+0x520>
   1171c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11720:	bl	1121c <getgrnam@plt>
   11724:	str	r0, [fp, #-32]	; 0xffffffe0
   11728:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1172c:	cmp	r3, #0
   11730:	beq	11748 <__assert_fail@plt+0x520>
   11734:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11738:	ldr	r3, [r3, #8]
   1173c:	mov	r2, r3
   11740:	mov	r3, #0
   11744:	strd	r2, [fp, #-52]	; 0xffffffcc
   11748:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1174c:	cmp	r3, #0
   11750:	bne	117a4 <__assert_fail@plt+0x57c>
   11754:	mvn	r3, #0
   11758:	str	r3, [fp, #-28]	; 0xffffffe4
   1175c:	ldrb	r3, [fp, #-65]	; 0xffffffbf
   11760:	cmp	r3, #0
   11764:	beq	11814 <__assert_fail@plt+0x5ec>
   11768:	bl	11114 <__errno_location@plt>
   1176c:	mov	r3, r0
   11770:	ldr	r4, [r3]
   11774:	movw	r0, #37848	; 0x93d8
   11778:	movt	r0, #1
   1177c:	bl	110d8 <gettext@plt>
   11780:	mov	r5, r0
   11784:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11788:	bl	150c0 <__assert_fail@plt+0x3e98>
   1178c:	mov	r3, r0
   11790:	mov	r2, r5
   11794:	mov	r1, r4
   11798:	mov	r0, #0
   1179c:	bl	11060 <error@plt>
   117a0:	b	117f0 <__assert_fail@plt+0x5c8>
   117a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   117a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   117ac:	cmp	r2, r3
   117b0:	bne	117cc <__assert_fail@plt+0x5a4>
   117b4:	sub	r3, fp, #40	; 0x28
   117b8:	mov	r2, #4
   117bc:	mov	r1, r3
   117c0:	ldr	r0, [fp, #-16]
   117c4:	bl	16170 <__assert_fail@plt+0x4f48>
   117c8:	str	r0, [fp, #-16]
   117cc:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   117d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117d4:	add	r2, r3, #1
   117d8:	str	r2, [fp, #-20]	; 0xffffffec
   117dc:	lsl	r3, r3, #2
   117e0:	ldr	r2, [fp, #-16]
   117e4:	add	r3, r2, r3
   117e8:	mov	r2, r0
   117ec:	str	r2, [r3]
   117f0:	movw	r1, #37844	; 0x93d4
   117f4:	movt	r1, #1
   117f8:	mov	r0, #0
   117fc:	bl	1118c <strtok@plt>
   11800:	str	r0, [fp, #-24]	; 0xffffffe8
   11804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11808:	cmp	r3, #0
   1180c:	bne	11644 <__assert_fail@plt+0x41c>
   11810:	b	11818 <__assert_fail@plt+0x5f0>
   11814:	nop	{0}
   11818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1181c:	cmp	r3, #0
   11820:	bne	11870 <__assert_fail@plt+0x648>
   11824:	ldr	r3, [fp, #-20]	; 0xffffffec
   11828:	cmp	r3, #0
   1182c:	bne	11870 <__assert_fail@plt+0x648>
   11830:	ldrb	r3, [fp, #-65]	; 0xffffffbf
   11834:	cmp	r3, #0
   11838:	beq	11868 <__assert_fail@plt+0x640>
   1183c:	movw	r0, #37868	; 0x93ec
   11840:	movt	r0, #1
   11844:	bl	110d8 <gettext@plt>
   11848:	mov	r4, r0
   1184c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11850:	bl	150c0 <__assert_fail@plt+0x3e98>
   11854:	mov	r3, r0
   11858:	mov	r2, r4
   1185c:	mov	r1, #0
   11860:	mov	r0, #0
   11864:	bl	11060 <error@plt>
   11868:	mvn	r3, #0
   1186c:	str	r3, [fp, #-28]	; 0xffffffe4
   11870:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11874:	ldr	r2, [fp, #-16]
   11878:	str	r2, [r3]
   1187c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11880:	cmp	r3, #0
   11884:	bne	11894 <__assert_fail@plt+0x66c>
   11888:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1188c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11890:	str	r2, [r3]
   11894:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11898:	bl	126bc <__assert_fail@plt+0x1494>
   1189c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118a0:	mov	r0, r3
   118a4:	sub	sp, fp, #12
   118a8:	ldrd	r4, [sp]
   118ac:	ldr	fp, [sp, #8]
   118b0:	add	sp, sp, #12
   118b4:	pop	{pc}		; (ldr pc, [sp], #4)
   118b8:	str	fp, [sp, #-8]!
   118bc:	str	lr, [sp, #4]
   118c0:	add	fp, sp, #4
   118c4:	sub	sp, sp, #16
   118c8:	str	r0, [fp, #-16]
   118cc:	ldr	r0, [fp, #-16]
   118d0:	bl	111e0 <canonicalize_file_name@plt>
   118d4:	str	r0, [fp, #-8]
   118d8:	ldr	r3, [fp, #-8]
   118dc:	cmp	r3, #0
   118e0:	beq	11908 <__assert_fail@plt+0x6e0>
   118e4:	ldr	r1, [fp, #-8]
   118e8:	movw	r0, #37892	; 0x9404
   118ec:	movt	r0, #1
   118f0:	bl	10f4c <strcmp@plt>
   118f4:	mov	r3, r0
   118f8:	cmp	r3, #0
   118fc:	bne	11908 <__assert_fail@plt+0x6e0>
   11900:	mov	r3, #1
   11904:	b	1190c <__assert_fail@plt+0x6e4>
   11908:	mov	r3, #0
   1190c:	strb	r3, [fp, #-9]
   11910:	ldrb	r3, [fp, #-9]
   11914:	and	r3, r3, #1
   11918:	strb	r3, [fp, #-9]
   1191c:	ldr	r0, [fp, #-8]
   11920:	bl	126bc <__assert_fail@plt+0x1494>
   11924:	ldrb	r3, [fp, #-9]
   11928:	mov	r0, r3
   1192c:	sub	sp, fp, #4
   11930:	ldr	fp, [sp]
   11934:	add	sp, sp, #4
   11938:	pop	{pc}		; (ldr pc, [sp], #4)
   1193c:	str	r4, [sp, #-12]!
   11940:	str	fp, [sp, #4]
   11944:	str	lr, [sp, #8]
   11948:	add	fp, sp, #8
   1194c:	sub	sp, sp, #12
   11950:	str	r0, [fp, #-16]
   11954:	ldr	r3, [fp, #-16]
   11958:	cmp	r3, #0
   1195c:	beq	11998 <__assert_fail@plt+0x770>
   11960:	movw	r3, #41352	; 0xa188
   11964:	movt	r3, #2
   11968:	ldr	r4, [r3]
   1196c:	movw	r0, #37896	; 0x9408
   11970:	movt	r0, #1
   11974:	bl	110d8 <gettext@plt>
   11978:	mov	r1, r0
   1197c:	movw	r3, #41376	; 0xa1a0
   11980:	movt	r3, #2
   11984:	ldr	r3, [r3]
   11988:	mov	r2, r3
   1198c:	mov	r0, r4
   11990:	bl	11108 <fprintf@plt>
   11994:	b	11af0 <__assert_fail@plt+0x8c8>
   11998:	movw	r0, #37936	; 0x9430
   1199c:	movt	r0, #1
   119a0:	bl	110d8 <gettext@plt>
   119a4:	movw	r3, #41376	; 0xa1a0
   119a8:	movt	r3, #2
   119ac:	ldr	r1, [r3]
   119b0:	movw	r3, #41376	; 0xa1a0
   119b4:	movt	r3, #2
   119b8:	ldr	r3, [r3]
   119bc:	mov	r2, r3
   119c0:	bl	10f64 <printf@plt>
   119c4:	movw	r0, #38000	; 0x9470
   119c8:	movt	r0, #1
   119cc:	bl	110d8 <gettext@plt>
   119d0:	mov	r2, r0
   119d4:	movw	r3, #41356	; 0xa18c
   119d8:	movt	r3, #2
   119dc:	ldr	r3, [r3]
   119e0:	mov	r1, r3
   119e4:	mov	r0, r2
   119e8:	bl	10f28 <fputs_unlocked@plt>
   119ec:	movw	r0, #38052	; 0x94a4
   119f0:	movt	r0, #1
   119f4:	bl	110d8 <gettext@plt>
   119f8:	mov	r2, r0
   119fc:	movw	r3, #41356	; 0xa18c
   11a00:	movt	r3, #2
   11a04:	ldr	r3, [r3]
   11a08:	mov	r1, r3
   11a0c:	mov	r0, r2
   11a10:	bl	10f28 <fputs_unlocked@plt>
   11a14:	movw	r0, #38128	; 0x94f0
   11a18:	movt	r0, #1
   11a1c:	bl	110d8 <gettext@plt>
   11a20:	mov	r2, r0
   11a24:	movw	r3, #41356	; 0xa18c
   11a28:	movt	r3, #2
   11a2c:	ldr	r3, [r3]
   11a30:	mov	r1, r3
   11a34:	mov	r0, r2
   11a38:	bl	10f28 <fputs_unlocked@plt>
   11a3c:	movw	r0, #38204	; 0x953c
   11a40:	movt	r0, #1
   11a44:	bl	110d8 <gettext@plt>
   11a48:	mov	r4, r0
   11a4c:	movw	r1, #37892	; 0x9404
   11a50:	movt	r1, #1
   11a54:	mov	r0, #4
   11a58:	bl	14be0 <__assert_fail@plt+0x39b8>
   11a5c:	mov	r3, r0
   11a60:	mov	r1, r3
   11a64:	mov	r0, r4
   11a68:	bl	10f64 <printf@plt>
   11a6c:	movw	r0, #38272	; 0x9580
   11a70:	movt	r0, #1
   11a74:	bl	110d8 <gettext@plt>
   11a78:	mov	r2, r0
   11a7c:	movw	r3, #41356	; 0xa18c
   11a80:	movt	r3, #2
   11a84:	ldr	r3, [r3]
   11a88:	mov	r1, r3
   11a8c:	mov	r0, r2
   11a90:	bl	10f28 <fputs_unlocked@plt>
   11a94:	movw	r0, #38320	; 0x95b0
   11a98:	movt	r0, #1
   11a9c:	bl	110d8 <gettext@plt>
   11aa0:	mov	r2, r0
   11aa4:	movw	r3, #41356	; 0xa18c
   11aa8:	movt	r3, #2
   11aac:	ldr	r3, [r3]
   11ab0:	mov	r1, r3
   11ab4:	mov	r0, r2
   11ab8:	bl	10f28 <fputs_unlocked@plt>
   11abc:	movw	r0, #38376	; 0x95e8
   11ac0:	movt	r0, #1
   11ac4:	bl	110d8 <gettext@plt>
   11ac8:	mov	r2, r0
   11acc:	movw	r3, #41356	; 0xa18c
   11ad0:	movt	r3, #2
   11ad4:	ldr	r3, [r3]
   11ad8:	mov	r1, r3
   11adc:	mov	r0, r2
   11ae0:	bl	10f28 <fputs_unlocked@plt>
   11ae4:	movw	r0, #38448	; 0x9630
   11ae8:	movt	r0, #1
   11aec:	bl	11388 <__assert_fail@plt+0x160>
   11af0:	ldr	r0, [fp, #-16]
   11af4:	bl	110cc <exit@plt>
   11af8:	strd	r4, [sp, #-16]!
   11afc:	str	fp, [sp, #8]
   11b00:	str	lr, [sp, #12]
   11b04:	add	fp, sp, #12
   11b08:	sub	sp, sp, #112	; 0x70
   11b0c:	str	r0, [fp, #-112]	; 0xffffff90
   11b10:	str	r1, [fp, #-116]	; 0xffffff8c
   11b14:	mov	r3, #0
   11b18:	str	r3, [fp, #-16]
   11b1c:	mov	r3, #0
   11b20:	str	r3, [fp, #-20]	; 0xffffffec
   11b24:	mov	r3, #0
   11b28:	str	r3, [fp, #-24]	; 0xffffffe8
   11b2c:	mov	r3, #0
   11b30:	strb	r3, [fp, #-25]	; 0xffffffe7
   11b34:	mvn	r3, #0
   11b38:	str	r3, [fp, #-88]	; 0xffffffa8
   11b3c:	mvn	r3, #0
   11b40:	str	r3, [fp, #-92]	; 0xffffffa4
   11b44:	mov	r3, #0
   11b48:	str	r3, [fp, #-96]	; 0xffffffa0
   11b4c:	mov	r3, #0
   11b50:	str	r3, [fp, #-100]	; 0xffffff9c
   11b54:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11b58:	ldr	r3, [r3]
   11b5c:	mov	r0, r3
   11b60:	bl	12760 <__assert_fail@plt+0x1538>
   11b64:	movw	r1, #37520	; 0x9290
   11b68:	movt	r1, #1
   11b6c:	mov	r0, #6
   11b70:	bl	11198 <setlocale@plt>
   11b74:	movw	r1, #38456	; 0x9638
   11b78:	movt	r1, #1
   11b7c:	movw	r0, #37544	; 0x92a8
   11b80:	movt	r0, #1
   11b84:	bl	111ec <bindtextdomain@plt>
   11b88:	movw	r0, #37544	; 0x92a8
   11b8c:	movt	r0, #1
   11b90:	bl	10fdc <textdomain@plt>
   11b94:	mov	r0, #125	; 0x7d
   11b98:	bl	11324 <__assert_fail@plt+0xfc>
   11b9c:	movw	r0, #9580	; 0x256c
   11ba0:	movt	r0, #1
   11ba4:	bl	19174 <__assert_fail@plt+0x7f4c>
   11ba8:	b	11ce0 <__assert_fail@plt+0xab8>
   11bac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bb0:	cmp	r3, #256	; 0x100
   11bb4:	beq	11c64 <__assert_fail@plt+0xa3c>
   11bb8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bbc:	cmp	r3, #256	; 0x100
   11bc0:	bgt	11be0 <__assert_fail@plt+0x9b8>
   11bc4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bc8:	cmn	r3, #3
   11bcc:	beq	11c8c <__assert_fail@plt+0xa64>
   11bd0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bd4:	cmn	r3, #2
   11bd8:	beq	11c84 <__assert_fail@plt+0xa5c>
   11bdc:	b	11cd8 <__assert_fail@plt+0xab0>
   11be0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11be4:	movw	r2, #257	; 0x101
   11be8:	cmp	r3, r2
   11bec:	beq	11c04 <__assert_fail@plt+0x9dc>
   11bf0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bf4:	movw	r2, #258	; 0x102
   11bf8:	cmp	r3, r2
   11bfc:	beq	11c78 <__assert_fail@plt+0xa50>
   11c00:	b	11cd8 <__assert_fail@plt+0xab0>
   11c04:	movw	r3, #41360	; 0xa190
   11c08:	movt	r3, #2
   11c0c:	ldr	r3, [r3]
   11c10:	str	r3, [fp, #-16]
   11c14:	ldr	r0, [fp, #-16]
   11c18:	bl	110f0 <strlen@plt>
   11c1c:	str	r0, [fp, #-44]	; 0xffffffd4
   11c20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c24:	cmp	r3, #0
   11c28:	beq	11ce0 <__assert_fail@plt+0xab8>
   11c2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c30:	sub	r3, r3, #1
   11c34:	ldr	r2, [fp, #-16]
   11c38:	add	r3, r2, r3
   11c3c:	ldrb	r3, [r3]
   11c40:	cmp	r3, #58	; 0x3a
   11c44:	bne	11ce0 <__assert_fail@plt+0xab8>
   11c48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c4c:	sub	r3, r3, #1
   11c50:	ldr	r2, [fp, #-16]
   11c54:	add	r3, r2, r3
   11c58:	mov	r2, #0
   11c5c:	strb	r2, [r3]
   11c60:	b	11ce0 <__assert_fail@plt+0xab8>
   11c64:	movw	r3, #41360	; 0xa190
   11c68:	movt	r3, #2
   11c6c:	ldr	r3, [r3]
   11c70:	str	r3, [fp, #-24]	; 0xffffffe8
   11c74:	b	11ce0 <__assert_fail@plt+0xab8>
   11c78:	mov	r3, #1
   11c7c:	strb	r3, [fp, #-25]	; 0xffffffe7
   11c80:	b	11ce0 <__assert_fail@plt+0xab8>
   11c84:	mov	r0, #0
   11c88:	bl	1193c <__assert_fail@plt+0x714>
   11c8c:	movw	r3, #41356	; 0xa18c
   11c90:	movt	r3, #2
   11c94:	ldr	r0, [r3]
   11c98:	movw	r3, #41252	; 0xa124
   11c9c:	movt	r3, #2
   11ca0:	ldr	r2, [r3]
   11ca4:	mov	r3, #0
   11ca8:	str	r3, [sp, #4]
   11cac:	movw	r3, #38480	; 0x9650
   11cb0:	movt	r3, #1
   11cb4:	str	r3, [sp]
   11cb8:	mov	r3, r2
   11cbc:	movw	r2, #37336	; 0x91d8
   11cc0:	movt	r2, #1
   11cc4:	movw	r1, #38448	; 0x9630
   11cc8:	movt	r1, #1
   11ccc:	bl	15d00 <__assert_fail@plt+0x4ad8>
   11cd0:	mov	r0, #0
   11cd4:	bl	110cc <exit@plt>
   11cd8:	mov	r0, #125	; 0x7d
   11cdc:	bl	1193c <__assert_fail@plt+0x714>
   11ce0:	mov	r3, #0
   11ce4:	str	r3, [sp]
   11ce8:	movw	r3, #37748	; 0x9374
   11cec:	movt	r3, #1
   11cf0:	movw	r2, #38496	; 0x9660
   11cf4:	movt	r2, #1
   11cf8:	ldr	r1, [fp, #-116]	; 0xffffff8c
   11cfc:	ldr	r0, [fp, #-112]	; 0xffffff90
   11d00:	bl	110b4 <getopt_long@plt>
   11d04:	str	r0, [fp, #-40]	; 0xffffffd8
   11d08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d0c:	cmn	r3, #1
   11d10:	bne	11bac <__assert_fail@plt+0x984>
   11d14:	movw	r3, #41344	; 0xa180
   11d18:	movt	r3, #2
   11d1c:	ldr	r3, [r3]
   11d20:	ldr	r2, [fp, #-112]	; 0xffffff90
   11d24:	cmp	r2, r3
   11d28:	bgt	11d54 <__assert_fail@plt+0xb2c>
   11d2c:	movw	r0, #38500	; 0x9664
   11d30:	movt	r0, #1
   11d34:	bl	110d8 <gettext@plt>
   11d38:	mov	r3, r0
   11d3c:	mov	r2, r3
   11d40:	mov	r1, #0
   11d44:	mov	r0, #0
   11d48:	bl	11060 <error@plt>
   11d4c:	mov	r0, #125	; 0x7d
   11d50:	bl	1193c <__assert_fail@plt+0x714>
   11d54:	movw	r3, #41344	; 0xa180
   11d58:	movt	r3, #2
   11d5c:	ldr	r3, [r3]
   11d60:	lsl	r3, r3, #2
   11d64:	ldr	r2, [fp, #-116]	; 0xffffff8c
   11d68:	add	r3, r2, r3
   11d6c:	ldr	r3, [r3]
   11d70:	str	r3, [fp, #-48]	; 0xffffffd0
   11d74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d78:	bl	118b8 <__assert_fail@plt+0x690>
   11d7c:	mov	r3, r0
   11d80:	strb	r3, [fp, #-49]	; 0xffffffcf
   11d84:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   11d88:	eor	r3, r3, #1
   11d8c:	uxtb	r3, r3
   11d90:	cmp	r3, #0
   11d94:	beq	11de0 <__assert_fail@plt+0xbb8>
   11d98:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11d9c:	cmp	r3, #0
   11da0:	beq	11de0 <__assert_fail@plt+0xbb8>
   11da4:	movw	r0, #38516	; 0x9674
   11da8:	movt	r0, #1
   11dac:	bl	110d8 <gettext@plt>
   11db0:	mov	r4, r0
   11db4:	movw	r1, #37892	; 0x9404
   11db8:	movt	r1, #1
   11dbc:	mov	r0, #4
   11dc0:	bl	14be0 <__assert_fail@plt+0x39b8>
   11dc4:	mov	r3, r0
   11dc8:	mov	r2, r4
   11dcc:	mov	r1, #0
   11dd0:	mov	r0, #0
   11dd4:	bl	11060 <error@plt>
   11dd8:	mov	r0, #125	; 0x7d
   11ddc:	bl	1193c <__assert_fail@plt+0x714>
   11de0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   11de4:	eor	r3, r3, #1
   11de8:	uxtb	r3, r3
   11dec:	cmp	r3, #0
   11df0:	beq	11f4c <__assert_fail@plt+0xd24>
   11df4:	ldr	r3, [fp, #-16]
   11df8:	cmp	r3, #0
   11dfc:	beq	11e20 <__assert_fail@plt+0xbf8>
   11e00:	sub	r2, fp, #92	; 0x5c
   11e04:	sub	r1, fp, #88	; 0x58
   11e08:	mov	r3, #0
   11e0c:	str	r3, [sp]
   11e10:	mov	r3, #0
   11e14:	ldr	r0, [fp, #-16]
   11e18:	bl	15530 <__assert_fail@plt+0x4308>
   11e1c:	str	r0, [fp, #-56]	; 0xffffffc8
   11e20:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11e24:	mov	r0, r3
   11e28:	bl	11570 <__assert_fail@plt+0x348>
   11e2c:	mov	r3, r0
   11e30:	eor	r3, r3, #1
   11e34:	uxtb	r3, r3
   11e38:	cmp	r3, #0
   11e3c:	beq	11eb0 <__assert_fail@plt+0xc88>
   11e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e44:	cmp	r3, #0
   11e48:	beq	11e64 <__assert_fail@plt+0xc3c>
   11e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11e50:	mov	r0, r3
   11e54:	bl	115a4 <__assert_fail@plt+0x37c>
   11e58:	mov	r3, r0
   11e5c:	cmp	r3, #0
   11e60:	beq	11eb0 <__assert_fail@plt+0xc88>
   11e64:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11e68:	mov	r0, r3
   11e6c:	bl	10f58 <getpwuid@plt>
   11e70:	str	r0, [fp, #-60]	; 0xffffffc4
   11e74:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e78:	cmp	r3, #0
   11e7c:	beq	11eb0 <__assert_fail@plt+0xc88>
   11e80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11e84:	mov	r0, r3
   11e88:	bl	115a4 <__assert_fail@plt+0x37c>
   11e8c:	mov	r3, r0
   11e90:	cmp	r3, #0
   11e94:	beq	11ea4 <__assert_fail@plt+0xc7c>
   11e98:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e9c:	ldr	r3, [r3, #12]
   11ea0:	str	r3, [fp, #-92]	; 0xffffffa4
   11ea4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ea8:	ldr	r3, [r3]
   11eac:	str	r3, [fp, #-20]	; 0xffffffec
   11eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11eb4:	cmp	r3, #0
   11eb8:	beq	11ee8 <__assert_fail@plt+0xcc0>
   11ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ec0:	ldrb	r3, [r3]
   11ec4:	cmp	r3, #0
   11ec8:	beq	11ee8 <__assert_fail@plt+0xcc0>
   11ecc:	sub	r2, fp, #100	; 0x64
   11ed0:	sub	r1, fp, #96	; 0x60
   11ed4:	mov	r3, #0
   11ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11edc:	bl	115d8 <__assert_fail@plt+0x3b0>
   11ee0:	str	r0, [fp, #-64]	; 0xffffffc0
   11ee4:	b	11f4c <__assert_fail@plt+0xd24>
   11ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11eec:	cmp	r3, #0
   11ef0:	bne	11f4c <__assert_fail@plt+0xd24>
   11ef4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11ef8:	mov	r0, r3
   11efc:	bl	115a4 <__assert_fail@plt+0x37c>
   11f00:	mov	r3, r0
   11f04:	eor	r3, r3, #1
   11f08:	uxtb	r3, r3
   11f0c:	cmp	r3, #0
   11f10:	beq	11f4c <__assert_fail@plt+0xd24>
   11f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f18:	cmp	r3, #0
   11f1c:	beq	11f4c <__assert_fail@plt+0xd24>
   11f20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11f24:	sub	r2, fp, #96	; 0x60
   11f28:	mov	r1, r3
   11f2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11f30:	bl	16738 <__assert_fail@plt+0x5510>
   11f34:	str	r0, [fp, #-68]	; 0xffffffbc
   11f38:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11f3c:	cmp	r3, #0
   11f40:	ble	11f4c <__assert_fail@plt+0xd24>
   11f44:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11f48:	str	r3, [fp, #-100]	; 0xffffff9c
   11f4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11f50:	bl	11030 <chroot@plt>
   11f54:	mov	r3, r0
   11f58:	cmp	r3, #0
   11f5c:	beq	11f9c <__assert_fail@plt+0xd74>
   11f60:	bl	11114 <__errno_location@plt>
   11f64:	mov	r3, r0
   11f68:	ldr	r4, [r3]
   11f6c:	movw	r0, #38572	; 0x96ac
   11f70:	movt	r0, #1
   11f74:	bl	110d8 <gettext@plt>
   11f78:	mov	r5, r0
   11f7c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11f80:	mov	r0, #4
   11f84:	bl	14be0 <__assert_fail@plt+0x39b8>
   11f88:	mov	r3, r0
   11f8c:	mov	r2, r5
   11f90:	mov	r1, r4
   11f94:	mov	r0, #125	; 0x7d
   11f98:	bl	11060 <error@plt>
   11f9c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11fa0:	eor	r3, r3, #1
   11fa4:	uxtb	r3, r3
   11fa8:	cmp	r3, #0
   11fac:	beq	11ff4 <__assert_fail@plt+0xdcc>
   11fb0:	movw	r0, #37892	; 0x9404
   11fb4:	movt	r0, #1
   11fb8:	bl	10fe8 <chdir@plt>
   11fbc:	mov	r3, r0
   11fc0:	cmp	r3, #0
   11fc4:	beq	11ff4 <__assert_fail@plt+0xdcc>
   11fc8:	bl	11114 <__errno_location@plt>
   11fcc:	mov	r3, r0
   11fd0:	ldr	r4, [r3]
   11fd4:	movw	r0, #38608	; 0x96d0
   11fd8:	movt	r0, #1
   11fdc:	bl	110d8 <gettext@plt>
   11fe0:	mov	r3, r0
   11fe4:	mov	r2, r3
   11fe8:	mov	r1, r4
   11fec:	mov	r0, #125	; 0x7d
   11ff0:	bl	11060 <error@plt>
   11ff4:	movw	r3, #41344	; 0xa180
   11ff8:	movt	r3, #2
   11ffc:	ldr	r3, [r3]
   12000:	add	r3, r3, #1
   12004:	ldr	r2, [fp, #-112]	; 0xffffff90
   12008:	cmp	r2, r3
   1200c:	bne	12078 <__assert_fail@plt+0xe50>
   12010:	movw	r0, #38640	; 0x96f0
   12014:	movt	r0, #1
   12018:	bl	1106c <getenv@plt>
   1201c:	str	r0, [fp, #-32]	; 0xffffffe0
   12020:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12024:	cmp	r3, #0
   12028:	bne	1203c <__assert_fail@plt+0xe14>
   1202c:	movw	r0, #38648	; 0x96f8
   12030:	movt	r0, #1
   12034:	bl	1154c <__assert_fail@plt+0x324>
   12038:	str	r0, [fp, #-32]	; 0xffffffe0
   1203c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   12040:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12044:	str	r2, [r3]
   12048:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1204c:	add	r4, r3, #4
   12050:	movw	r0, #38656	; 0x9700
   12054:	movt	r0, #1
   12058:	bl	1154c <__assert_fail@plt+0x324>
   1205c:	mov	r3, r0
   12060:	str	r3, [r4]
   12064:	ldr	r3, [fp, #-116]	; 0xffffff8c
   12068:	add	r3, r3, #8
   1206c:	mov	r2, #0
   12070:	str	r2, [r3]
   12074:	b	12098 <__assert_fail@plt+0xe70>
   12078:	movw	r3, #41344	; 0xa180
   1207c:	movt	r3, #2
   12080:	ldr	r3, [r3]
   12084:	add	r3, r3, #1
   12088:	lsl	r3, r3, #2
   1208c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   12090:	add	r3, r2, r3
   12094:	str	r3, [fp, #-116]	; 0xffffff8c
   12098:	ldr	r3, [fp, #-16]
   1209c:	cmp	r3, #0
   120a0:	beq	12120 <__assert_fail@plt+0xef8>
   120a4:	sub	r2, fp, #92	; 0x5c
   120a8:	sub	r1, fp, #88	; 0x58
   120ac:	mov	r3, #0
   120b0:	str	r3, [sp]
   120b4:	mov	r3, #0
   120b8:	ldr	r0, [fp, #-16]
   120bc:	bl	15530 <__assert_fail@plt+0x4308>
   120c0:	str	r0, [fp, #-72]	; 0xffffffb8
   120c4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   120c8:	cmp	r3, #0
   120cc:	beq	12120 <__assert_fail@plt+0xef8>
   120d0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   120d4:	mov	r0, r3
   120d8:	bl	11570 <__assert_fail@plt+0x348>
   120dc:	mov	r3, r0
   120e0:	cmp	r3, #0
   120e4:	beq	12120 <__assert_fail@plt+0xef8>
   120e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120ec:	mov	r0, r3
   120f0:	bl	115a4 <__assert_fail@plt+0x37c>
   120f4:	mov	r3, r0
   120f8:	cmp	r3, #0
   120fc:	beq	12120 <__assert_fail@plt+0xef8>
   12100:	bl	11114 <__errno_location@plt>
   12104:	mov	r3, r0
   12108:	ldr	r1, [r3]
   1210c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12110:	movw	r2, #38660	; 0x9704
   12114:	movt	r2, #1
   12118:	mov	r0, #125	; 0x7d
   1211c:	bl	11060 <error@plt>
   12120:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12124:	mov	r0, r3
   12128:	bl	11570 <__assert_fail@plt+0x348>
   1212c:	mov	r3, r0
   12130:	eor	r3, r3, #1
   12134:	uxtb	r3, r3
   12138:	cmp	r3, #0
   1213c:	beq	121f8 <__assert_fail@plt+0xfd0>
   12140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12144:	cmp	r3, #0
   12148:	beq	12164 <__assert_fail@plt+0xf3c>
   1214c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12150:	mov	r0, r3
   12154:	bl	115a4 <__assert_fail@plt+0x37c>
   12158:	mov	r3, r0
   1215c:	cmp	r3, #0
   12160:	beq	121f8 <__assert_fail@plt+0xfd0>
   12164:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12168:	mov	r0, r3
   1216c:	bl	10f58 <getpwuid@plt>
   12170:	str	r0, [fp, #-76]	; 0xffffffb4
   12174:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12178:	cmp	r3, #0
   1217c:	beq	121b4 <__assert_fail@plt+0xf8c>
   12180:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12184:	mov	r0, r3
   12188:	bl	115a4 <__assert_fail@plt+0x37c>
   1218c:	mov	r3, r0
   12190:	cmp	r3, #0
   12194:	beq	121a4 <__assert_fail@plt+0xf7c>
   12198:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1219c:	ldr	r3, [r3, #12]
   121a0:	str	r3, [fp, #-92]	; 0xffffffa4
   121a4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   121a8:	ldr	r3, [r3]
   121ac:	str	r3, [fp, #-20]	; 0xffffffec
   121b0:	b	121f8 <__assert_fail@plt+0xfd0>
   121b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   121b8:	mov	r0, r3
   121bc:	bl	115a4 <__assert_fail@plt+0x37c>
   121c0:	mov	r3, r0
   121c4:	cmp	r3, #0
   121c8:	beq	121f8 <__assert_fail@plt+0xfd0>
   121cc:	bl	11114 <__errno_location@plt>
   121d0:	mov	r3, r0
   121d4:	ldr	r4, [r3]
   121d8:	movw	r0, #38664	; 0x9708
   121dc:	movt	r0, #1
   121e0:	bl	110d8 <gettext@plt>
   121e4:	mov	r2, r0
   121e8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   121ec:	mov	r1, r4
   121f0:	mov	r0, #125	; 0x7d
   121f4:	bl	11060 <error@plt>
   121f8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   121fc:	str	r3, [fp, #-36]	; 0xffffffdc
   12200:	mov	r3, #0
   12204:	str	r3, [fp, #-104]	; 0xffffff98
   12208:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1220c:	cmp	r3, #0
   12210:	beq	12274 <__assert_fail@plt+0x104c>
   12214:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12218:	ldrb	r3, [r3]
   1221c:	cmp	r3, #0
   12220:	beq	12274 <__assert_fail@plt+0x104c>
   12224:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12228:	cmp	r3, #0
   1222c:	moveq	r3, #1
   12230:	movne	r3, #0
   12234:	uxtb	r3, r3
   12238:	sub	r2, fp, #100	; 0x64
   1223c:	sub	r1, fp, #104	; 0x68
   12240:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12244:	bl	115d8 <__assert_fail@plt+0x3b0>
   12248:	mov	r3, r0
   1224c:	cmp	r3, #0
   12250:	beq	12268 <__assert_fail@plt+0x1040>
   12254:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12258:	cmp	r3, #0
   1225c:	bne	1231c <__assert_fail@plt+0x10f4>
   12260:	mov	r3, #125	; 0x7d
   12264:	b	124f0 <__assert_fail@plt+0x12c8>
   12268:	ldr	r3, [fp, #-104]	; 0xffffff98
   1226c:	str	r3, [fp, #-36]	; 0xffffffdc
   12270:	b	1231c <__assert_fail@plt+0x10f4>
   12274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12278:	cmp	r3, #0
   1227c:	bne	12320 <__assert_fail@plt+0x10f8>
   12280:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12284:	mov	r0, r3
   12288:	bl	115a4 <__assert_fail@plt+0x37c>
   1228c:	mov	r3, r0
   12290:	eor	r3, r3, #1
   12294:	uxtb	r3, r3
   12298:	cmp	r3, #0
   1229c:	beq	12320 <__assert_fail@plt+0x10f8>
   122a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   122a4:	cmp	r3, #0
   122a8:	beq	12320 <__assert_fail@plt+0x10f8>
   122ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   122b0:	sub	r2, fp, #104	; 0x68
   122b4:	mov	r1, r3
   122b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   122bc:	bl	16738 <__assert_fail@plt+0x5510>
   122c0:	str	r0, [fp, #-80]	; 0xffffffb0
   122c4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   122c8:	cmp	r3, #0
   122cc:	bgt	12308 <__assert_fail@plt+0x10e0>
   122d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   122d4:	cmp	r3, #0
   122d8:	bne	12320 <__assert_fail@plt+0x10f8>
   122dc:	bl	11114 <__errno_location@plt>
   122e0:	mov	r3, r0
   122e4:	ldr	r4, [r3]
   122e8:	movw	r0, #38704	; 0x9730
   122ec:	movt	r0, #1
   122f0:	bl	110d8 <gettext@plt>
   122f4:	mov	r3, r0
   122f8:	mov	r2, r3
   122fc:	mov	r1, r4
   12300:	mov	r0, #125	; 0x7d
   12304:	bl	11060 <error@plt>
   12308:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1230c:	str	r3, [fp, #-100]	; 0xffffff9c
   12310:	ldr	r3, [fp, #-104]	; 0xffffff98
   12314:	str	r3, [fp, #-36]	; 0xffffffdc
   12318:	b	12320 <__assert_fail@plt+0x10f8>
   1231c:	nop	{0}
   12320:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12324:	mov	r0, r3
   12328:	bl	11570 <__assert_fail@plt+0x348>
   1232c:	mov	r3, r0
   12330:	eor	r3, r3, #1
   12334:	uxtb	r3, r3
   12338:	cmp	r3, #0
   1233c:	bne	1234c <__assert_fail@plt+0x1124>
   12340:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12344:	cmp	r3, #0
   12348:	beq	12394 <__assert_fail@plt+0x116c>
   1234c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12350:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12354:	mov	r0, r3
   12358:	bl	11000 <setgroups@plt>
   1235c:	mov	r3, r0
   12360:	cmp	r3, #0
   12364:	beq	12394 <__assert_fail@plt+0x116c>
   12368:	bl	11114 <__errno_location@plt>
   1236c:	mov	r3, r0
   12370:	ldr	r4, [r3]
   12374:	movw	r0, #38740	; 0x9754
   12378:	movt	r0, #1
   1237c:	bl	110d8 <gettext@plt>
   12380:	mov	r3, r0
   12384:	mov	r2, r3
   12388:	mov	r1, r4
   1238c:	mov	r0, #125	; 0x7d
   12390:	bl	11060 <error@plt>
   12394:	ldr	r3, [fp, #-104]	; 0xffffff98
   12398:	mov	r0, r3
   1239c:	bl	126bc <__assert_fail@plt+0x1494>
   123a0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   123a4:	mov	r0, r3
   123a8:	bl	126bc <__assert_fail@plt+0x1494>
   123ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   123b0:	mov	r0, r3
   123b4:	bl	115a4 <__assert_fail@plt+0x37c>
   123b8:	mov	r3, r0
   123bc:	eor	r3, r3, #1
   123c0:	uxtb	r3, r3
   123c4:	cmp	r3, #0
   123c8:	beq	12410 <__assert_fail@plt+0x11e8>
   123cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   123d0:	mov	r0, r3
   123d4:	bl	11078 <setgid@plt>
   123d8:	mov	r3, r0
   123dc:	cmp	r3, #0
   123e0:	beq	12410 <__assert_fail@plt+0x11e8>
   123e4:	bl	11114 <__errno_location@plt>
   123e8:	mov	r3, r0
   123ec:	ldr	r4, [r3]
   123f0:	movw	r0, #38776	; 0x9778
   123f4:	movt	r0, #1
   123f8:	bl	110d8 <gettext@plt>
   123fc:	mov	r3, r0
   12400:	mov	r2, r3
   12404:	mov	r1, r4
   12408:	mov	r0, #125	; 0x7d
   1240c:	bl	11060 <error@plt>
   12410:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12414:	mov	r0, r3
   12418:	bl	11570 <__assert_fail@plt+0x348>
   1241c:	mov	r3, r0
   12420:	eor	r3, r3, #1
   12424:	uxtb	r3, r3
   12428:	cmp	r3, #0
   1242c:	beq	12474 <__assert_fail@plt+0x124c>
   12430:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12434:	mov	r0, r3
   12438:	bl	111c8 <setuid@plt>
   1243c:	mov	r3, r0
   12440:	cmp	r3, #0
   12444:	beq	12474 <__assert_fail@plt+0x124c>
   12448:	bl	11114 <__errno_location@plt>
   1244c:	mov	r3, r0
   12450:	ldr	r4, [r3]
   12454:	movw	r0, #38800	; 0x9790
   12458:	movt	r0, #1
   1245c:	bl	110d8 <gettext@plt>
   12460:	mov	r3, r0
   12464:	mov	r2, r3
   12468:	mov	r1, r4
   1246c:	mov	r0, #125	; 0x7d
   12470:	bl	11060 <error@plt>
   12474:	ldr	r3, [fp, #-116]	; 0xffffff8c
   12478:	ldr	r3, [r3]
   1247c:	ldr	r1, [fp, #-116]	; 0xffffff8c
   12480:	mov	r0, r3
   12484:	bl	10fa0 <execvp@plt>
   12488:	bl	11114 <__errno_location@plt>
   1248c:	mov	r3, r0
   12490:	ldr	r3, [r3]
   12494:	cmp	r3, #2
   12498:	bne	124a4 <__assert_fail@plt+0x127c>
   1249c:	mov	r3, #127	; 0x7f
   124a0:	b	124a8 <__assert_fail@plt+0x1280>
   124a4:	mov	r3, #126	; 0x7e
   124a8:	str	r3, [fp, #-84]	; 0xffffffac
   124ac:	bl	11114 <__errno_location@plt>
   124b0:	mov	r3, r0
   124b4:	ldr	r4, [r3]
   124b8:	movw	r0, #38824	; 0x97a8
   124bc:	movt	r0, #1
   124c0:	bl	110d8 <gettext@plt>
   124c4:	mov	r5, r0
   124c8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   124cc:	ldr	r3, [r3]
   124d0:	mov	r0, r3
   124d4:	bl	150c0 <__assert_fail@plt+0x3e98>
   124d8:	mov	r3, r0
   124dc:	mov	r2, r5
   124e0:	mov	r1, r4
   124e4:	mov	r0, #0
   124e8:	bl	11060 <error@plt>
   124ec:	ldr	r3, [fp, #-84]	; 0xffffffac
   124f0:	mov	r0, r3
   124f4:	sub	sp, fp, #12
   124f8:	ldrd	r4, [sp]
   124fc:	ldr	fp, [sp, #8]
   12500:	add	sp, sp, #12
   12504:	pop	{pc}		; (ldr pc, [sp], #4)
   12508:	push	{fp}		; (str fp, [sp, #-4]!)
   1250c:	add	fp, sp, #0
   12510:	sub	sp, sp, #12
   12514:	str	r0, [fp, #-8]
   12518:	movw	r3, #41368	; 0xa198
   1251c:	movt	r3, #2
   12520:	ldr	r2, [fp, #-8]
   12524:	str	r2, [r3]
   12528:	nop	{0}
   1252c:	add	sp, fp, #0
   12530:	pop	{fp}		; (ldr fp, [sp], #4)
   12534:	bx	lr
   12538:	push	{fp}		; (str fp, [sp, #-4]!)
   1253c:	add	fp, sp, #0
   12540:	sub	sp, sp, #12
   12544:	mov	r3, r0
   12548:	strb	r3, [fp, #-5]
   1254c:	movw	r3, #41372	; 0xa19c
   12550:	movt	r3, #2
   12554:	ldrb	r2, [fp, #-5]
   12558:	strb	r2, [r3]
   1255c:	nop	{0}
   12560:	add	sp, fp, #0
   12564:	pop	{fp}		; (ldr fp, [sp], #4)
   12568:	bx	lr
   1256c:	str	r4, [sp, #-12]!
   12570:	str	fp, [sp, #4]
   12574:	str	lr, [sp, #8]
   12578:	add	fp, sp, #8
   1257c:	sub	sp, sp, #20
   12580:	movw	r3, #41356	; 0xa18c
   12584:	movt	r3, #2
   12588:	ldr	r3, [r3]
   1258c:	mov	r0, r3
   12590:	bl	17a70 <__assert_fail@plt+0x6848>
   12594:	mov	r3, r0
   12598:	cmp	r3, #0
   1259c:	beq	12670 <__assert_fail@plt+0x1448>
   125a0:	movw	r3, #41372	; 0xa19c
   125a4:	movt	r3, #2
   125a8:	ldrb	r3, [r3]
   125ac:	eor	r3, r3, #1
   125b0:	uxtb	r3, r3
   125b4:	cmp	r3, #0
   125b8:	bne	125d0 <__assert_fail@plt+0x13a8>
   125bc:	bl	11114 <__errno_location@plt>
   125c0:	mov	r3, r0
   125c4:	ldr	r3, [r3]
   125c8:	cmp	r3, #32
   125cc:	beq	12670 <__assert_fail@plt+0x1448>
   125d0:	movw	r0, #38868	; 0x97d4
   125d4:	movt	r0, #1
   125d8:	bl	110d8 <gettext@plt>
   125dc:	str	r0, [fp, #-16]
   125e0:	movw	r3, #41368	; 0xa198
   125e4:	movt	r3, #2
   125e8:	ldr	r3, [r3]
   125ec:	cmp	r3, #0
   125f0:	beq	1263c <__assert_fail@plt+0x1414>
   125f4:	bl	11114 <__errno_location@plt>
   125f8:	mov	r3, r0
   125fc:	ldr	r4, [r3]
   12600:	movw	r3, #41368	; 0xa198
   12604:	movt	r3, #2
   12608:	ldr	r3, [r3]
   1260c:	mov	r0, r3
   12610:	bl	14d4c <__assert_fail@plt+0x3b24>
   12614:	mov	r2, r0
   12618:	ldr	r3, [fp, #-16]
   1261c:	str	r3, [sp]
   12620:	mov	r3, r2
   12624:	movw	r2, #38880	; 0x97e0
   12628:	movt	r2, #1
   1262c:	mov	r1, r4
   12630:	mov	r0, #0
   12634:	bl	11060 <error@plt>
   12638:	b	1265c <__assert_fail@plt+0x1434>
   1263c:	bl	11114 <__errno_location@plt>
   12640:	mov	r3, r0
   12644:	ldr	r1, [r3]
   12648:	ldr	r3, [fp, #-16]
   1264c:	movw	r2, #38888	; 0x97e8
   12650:	movt	r2, #1
   12654:	mov	r0, #0
   12658:	bl	11060 <error@plt>
   1265c:	movw	r3, #41256	; 0xa128
   12660:	movt	r3, #2
   12664:	ldr	r3, [r3]
   12668:	mov	r0, r3
   1266c:	bl	10f88 <_exit@plt>
   12670:	movw	r3, #41352	; 0xa188
   12674:	movt	r3, #2
   12678:	ldr	r3, [r3]
   1267c:	mov	r0, r3
   12680:	bl	17a70 <__assert_fail@plt+0x6848>
   12684:	mov	r3, r0
   12688:	cmp	r3, #0
   1268c:	beq	126a4 <__assert_fail@plt+0x147c>
   12690:	movw	r3, #41256	; 0xa128
   12694:	movt	r3, #2
   12698:	ldr	r3, [r3]
   1269c:	mov	r0, r3
   126a0:	bl	10f88 <_exit@plt>
   126a4:	nop	{0}
   126a8:	sub	sp, fp, #8
   126ac:	ldr	r4, [sp]
   126b0:	ldr	fp, [sp, #4]
   126b4:	add	sp, sp, #8
   126b8:	pop	{pc}		; (ldr pc, [sp], #4)
   126bc:	str	r4, [sp, #-12]!
   126c0:	str	fp, [sp, #4]
   126c4:	str	lr, [sp, #8]
   126c8:	add	fp, sp, #8
   126cc:	sub	sp, sp, #20
   126d0:	str	r0, [fp, #-24]	; 0xffffffe8
   126d4:	bl	11114 <__errno_location@plt>
   126d8:	mov	r3, r0
   126dc:	ldr	r3, [r3]
   126e0:	str	r3, [fp, #-20]	; 0xffffffec
   126e4:	bl	11114 <__errno_location@plt>
   126e8:	mov	r3, r0
   126ec:	ldr	r3, [r3]
   126f0:	str	r3, [fp, #-16]
   126f4:	bl	11114 <__errno_location@plt>
   126f8:	mov	r2, r0
   126fc:	mov	r3, #0
   12700:	str	r3, [r2]
   12704:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12708:	bl	10f7c <free@plt>
   1270c:	bl	11114 <__errno_location@plt>
   12710:	mov	r3, r0
   12714:	ldr	r3, [r3]
   12718:	cmp	r3, #0
   1271c:	moveq	r3, #1
   12720:	movne	r3, #0
   12724:	uxtb	r3, r3
   12728:	mov	r4, r3
   1272c:	bl	11114 <__errno_location@plt>
   12730:	mov	r2, r0
   12734:	lsl	r3, r4, #2
   12738:	sub	r1, fp, #12
   1273c:	add	r3, r1, r3
   12740:	ldr	r3, [r3, #-8]
   12744:	str	r3, [r2]
   12748:	nop	{0}
   1274c:	sub	sp, fp, #8
   12750:	ldr	r4, [sp]
   12754:	ldr	fp, [sp, #4]
   12758:	add	sp, sp, #8
   1275c:	pop	{pc}		; (ldr pc, [sp], #4)
   12760:	str	fp, [sp, #-8]!
   12764:	str	lr, [sp, #4]
   12768:	add	fp, sp, #4
   1276c:	sub	sp, sp, #16
   12770:	str	r0, [fp, #-16]
   12774:	ldr	r3, [fp, #-16]
   12778:	cmp	r3, #0
   1277c:	bne	127a4 <__assert_fail@plt+0x157c>
   12780:	movw	r3, #41352	; 0xa188
   12784:	movt	r3, #2
   12788:	ldr	r3, [r3]
   1278c:	mov	r2, #55	; 0x37
   12790:	mov	r1, #1
   12794:	movw	r0, #38892	; 0x97ec
   12798:	movt	r0, #1
   1279c:	bl	1100c <fwrite@plt>
   127a0:	bl	11204 <abort@plt>
   127a4:	mov	r1, #47	; 0x2f
   127a8:	ldr	r0, [fp, #-16]
   127ac:	bl	111b0 <strrchr@plt>
   127b0:	str	r0, [fp, #-8]
   127b4:	ldr	r3, [fp, #-8]
   127b8:	cmp	r3, #0
   127bc:	beq	127cc <__assert_fail@plt+0x15a4>
   127c0:	ldr	r3, [fp, #-8]
   127c4:	add	r3, r3, #1
   127c8:	b	127d0 <__assert_fail@plt+0x15a8>
   127cc:	ldr	r3, [fp, #-16]
   127d0:	str	r3, [fp, #-12]
   127d4:	ldr	r2, [fp, #-12]
   127d8:	ldr	r3, [fp, #-16]
   127dc:	sub	r3, r2, r3
   127e0:	cmp	r3, #6
   127e4:	ble	12854 <__assert_fail@plt+0x162c>
   127e8:	ldr	r3, [fp, #-12]
   127ec:	sub	r3, r3, #7
   127f0:	mov	r2, #7
   127f4:	movw	r1, #38948	; 0x9824
   127f8:	movt	r1, #1
   127fc:	mov	r0, r3
   12800:	bl	111f8 <strncmp@plt>
   12804:	mov	r3, r0
   12808:	cmp	r3, #0
   1280c:	bne	12854 <__assert_fail@plt+0x162c>
   12810:	ldr	r3, [fp, #-12]
   12814:	str	r3, [fp, #-16]
   12818:	mov	r2, #3
   1281c:	movw	r1, #38956	; 0x982c
   12820:	movt	r1, #1
   12824:	ldr	r0, [fp, #-12]
   12828:	bl	111f8 <strncmp@plt>
   1282c:	mov	r3, r0
   12830:	cmp	r3, #0
   12834:	bne	12854 <__assert_fail@plt+0x162c>
   12838:	ldr	r3, [fp, #-12]
   1283c:	add	r3, r3, #3
   12840:	str	r3, [fp, #-16]
   12844:	movw	r3, #41336	; 0xa178
   12848:	movt	r3, #2
   1284c:	ldr	r2, [fp, #-16]
   12850:	str	r2, [r3]
   12854:	movw	r3, #41376	; 0xa1a0
   12858:	movt	r3, #2
   1285c:	ldr	r2, [fp, #-16]
   12860:	str	r2, [r3]
   12864:	movw	r3, #41340	; 0xa17c
   12868:	movt	r3, #2
   1286c:	ldr	r2, [fp, #-16]
   12870:	str	r2, [r3]
   12874:	nop	{0}
   12878:	sub	sp, fp, #4
   1287c:	ldr	fp, [sp]
   12880:	add	sp, sp, #4
   12884:	pop	{pc}		; (ldr pc, [sp], #4)
   12888:	str	fp, [sp, #-8]!
   1288c:	str	lr, [sp, #4]
   12890:	add	fp, sp, #4
   12894:	sub	sp, sp, #16
   12898:	str	r0, [fp, #-16]
   1289c:	bl	11114 <__errno_location@plt>
   128a0:	mov	r3, r0
   128a4:	ldr	r3, [r3]
   128a8:	str	r3, [fp, #-8]
   128ac:	ldr	r3, [fp, #-16]
   128b0:	cmp	r3, #0
   128b4:	beq	128c0 <__assert_fail@plt+0x1698>
   128b8:	ldr	r3, [fp, #-16]
   128bc:	b	128c8 <__assert_fail@plt+0x16a0>
   128c0:	movw	r3, #41380	; 0xa1a4
   128c4:	movt	r3, #2
   128c8:	mov	r1, #48	; 0x30
   128cc:	mov	r0, r3
   128d0:	bl	165a0 <__assert_fail@plt+0x5378>
   128d4:	mov	r3, r0
   128d8:	str	r3, [fp, #-12]
   128dc:	bl	11114 <__errno_location@plt>
   128e0:	mov	r2, r0
   128e4:	ldr	r3, [fp, #-8]
   128e8:	str	r3, [r2]
   128ec:	ldr	r3, [fp, #-12]
   128f0:	mov	r0, r3
   128f4:	sub	sp, fp, #4
   128f8:	ldr	fp, [sp]
   128fc:	add	sp, sp, #4
   12900:	pop	{pc}		; (ldr pc, [sp], #4)
   12904:	push	{fp}		; (str fp, [sp, #-4]!)
   12908:	add	fp, sp, #0
   1290c:	sub	sp, sp, #12
   12910:	str	r0, [fp, #-8]
   12914:	ldr	r3, [fp, #-8]
   12918:	cmp	r3, #0
   1291c:	beq	12928 <__assert_fail@plt+0x1700>
   12920:	ldr	r3, [fp, #-8]
   12924:	b	12930 <__assert_fail@plt+0x1708>
   12928:	movw	r3, #41380	; 0xa1a4
   1292c:	movt	r3, #2
   12930:	ldr	r3, [r3]
   12934:	mov	r0, r3
   12938:	add	sp, fp, #0
   1293c:	pop	{fp}		; (ldr fp, [sp], #4)
   12940:	bx	lr
   12944:	push	{fp}		; (str fp, [sp, #-4]!)
   12948:	add	fp, sp, #0
   1294c:	sub	sp, sp, #12
   12950:	str	r0, [fp, #-8]
   12954:	str	r1, [fp, #-12]
   12958:	ldr	r3, [fp, #-8]
   1295c:	cmp	r3, #0
   12960:	beq	1296c <__assert_fail@plt+0x1744>
   12964:	ldr	r3, [fp, #-8]
   12968:	b	12974 <__assert_fail@plt+0x174c>
   1296c:	movw	r3, #41380	; 0xa1a4
   12970:	movt	r3, #2
   12974:	ldr	r2, [fp, #-12]
   12978:	str	r2, [r3]
   1297c:	nop	{0}
   12980:	add	sp, fp, #0
   12984:	pop	{fp}		; (ldr fp, [sp], #4)
   12988:	bx	lr
   1298c:	push	{fp}		; (str fp, [sp, #-4]!)
   12990:	add	fp, sp, #0
   12994:	sub	sp, sp, #36	; 0x24
   12998:	str	r0, [fp, #-24]	; 0xffffffe8
   1299c:	mov	r3, r1
   129a0:	str	r2, [fp, #-32]	; 0xffffffe0
   129a4:	strb	r3, [fp, #-25]	; 0xffffffe7
   129a8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   129ac:	strb	r3, [fp, #-5]
   129b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129b4:	cmp	r3, #0
   129b8:	beq	129c4 <__assert_fail@plt+0x179c>
   129bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129c0:	b	129cc <__assert_fail@plt+0x17a4>
   129c4:	movw	r3, #41380	; 0xa1a4
   129c8:	movt	r3, #2
   129cc:	add	r2, r3, #8
   129d0:	ldrb	r3, [fp, #-5]
   129d4:	lsr	r3, r3, #5
   129d8:	uxtb	r3, r3
   129dc:	lsl	r3, r3, #2
   129e0:	add	r3, r2, r3
   129e4:	str	r3, [fp, #-12]
   129e8:	ldrb	r3, [fp, #-5]
   129ec:	and	r3, r3, #31
   129f0:	str	r3, [fp, #-16]
   129f4:	ldr	r3, [fp, #-12]
   129f8:	ldr	r2, [r3]
   129fc:	ldr	r3, [fp, #-16]
   12a00:	lsr	r3, r2, r3
   12a04:	and	r3, r3, #1
   12a08:	str	r3, [fp, #-20]	; 0xffffffec
   12a0c:	ldr	r3, [fp, #-12]
   12a10:	ldr	r3, [r3]
   12a14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12a18:	and	r1, r2, #1
   12a1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a20:	eor	r1, r1, r2
   12a24:	ldr	r2, [fp, #-16]
   12a28:	lsl	r2, r1, r2
   12a2c:	eor	r2, r2, r3
   12a30:	ldr	r3, [fp, #-12]
   12a34:	str	r2, [r3]
   12a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a3c:	mov	r0, r3
   12a40:	add	sp, fp, #0
   12a44:	pop	{fp}		; (ldr fp, [sp], #4)
   12a48:	bx	lr
   12a4c:	push	{fp}		; (str fp, [sp, #-4]!)
   12a50:	add	fp, sp, #0
   12a54:	sub	sp, sp, #20
   12a58:	str	r0, [fp, #-16]
   12a5c:	str	r1, [fp, #-20]	; 0xffffffec
   12a60:	ldr	r3, [fp, #-16]
   12a64:	cmp	r3, #0
   12a68:	bne	12a78 <__assert_fail@plt+0x1850>
   12a6c:	movw	r3, #41380	; 0xa1a4
   12a70:	movt	r3, #2
   12a74:	str	r3, [fp, #-16]
   12a78:	ldr	r3, [fp, #-16]
   12a7c:	ldr	r3, [r3, #4]
   12a80:	str	r3, [fp, #-8]
   12a84:	ldr	r3, [fp, #-16]
   12a88:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a8c:	str	r2, [r3, #4]
   12a90:	ldr	r3, [fp, #-8]
   12a94:	mov	r0, r3
   12a98:	add	sp, fp, #0
   12a9c:	pop	{fp}		; (ldr fp, [sp], #4)
   12aa0:	bx	lr
   12aa4:	str	fp, [sp, #-8]!
   12aa8:	str	lr, [sp, #4]
   12aac:	add	fp, sp, #4
   12ab0:	sub	sp, sp, #16
   12ab4:	str	r0, [fp, #-8]
   12ab8:	str	r1, [fp, #-12]
   12abc:	str	r2, [fp, #-16]
   12ac0:	ldr	r3, [fp, #-8]
   12ac4:	cmp	r3, #0
   12ac8:	bne	12ad8 <__assert_fail@plt+0x18b0>
   12acc:	movw	r3, #41380	; 0xa1a4
   12ad0:	movt	r3, #2
   12ad4:	str	r3, [fp, #-8]
   12ad8:	ldr	r3, [fp, #-8]
   12adc:	mov	r2, #10
   12ae0:	str	r2, [r3]
   12ae4:	ldr	r3, [fp, #-12]
   12ae8:	cmp	r3, #0
   12aec:	beq	12afc <__assert_fail@plt+0x18d4>
   12af0:	ldr	r3, [fp, #-16]
   12af4:	cmp	r3, #0
   12af8:	bne	12b00 <__assert_fail@plt+0x18d8>
   12afc:	bl	11204 <abort@plt>
   12b00:	ldr	r3, [fp, #-8]
   12b04:	ldr	r2, [fp, #-12]
   12b08:	str	r2, [r3, #40]	; 0x28
   12b0c:	ldr	r3, [fp, #-8]
   12b10:	ldr	r2, [fp, #-16]
   12b14:	str	r2, [r3, #44]	; 0x2c
   12b18:	nop	{0}
   12b1c:	sub	sp, fp, #4
   12b20:	ldr	fp, [sp]
   12b24:	add	sp, sp, #4
   12b28:	pop	{pc}		; (ldr pc, [sp], #4)
   12b2c:	str	fp, [sp, #-8]!
   12b30:	str	lr, [sp, #4]
   12b34:	add	fp, sp, #4
   12b38:	sub	sp, sp, #56	; 0x38
   12b3c:	str	r0, [fp, #-56]	; 0xffffffc8
   12b40:	str	r1, [fp, #-60]	; 0xffffffc4
   12b44:	sub	r1, fp, #52	; 0x34
   12b48:	mov	r2, #0
   12b4c:	mov	r3, #0
   12b50:	strd	r2, [r1]
   12b54:	strd	r2, [r1, #8]
   12b58:	strd	r2, [r1, #16]
   12b5c:	strd	r2, [r1, #24]
   12b60:	strd	r2, [r1, #32]
   12b64:	strd	r2, [r1, #40]	; 0x28
   12b68:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12b6c:	cmp	r3, #10
   12b70:	bne	12b78 <__assert_fail@plt+0x1950>
   12b74:	bl	11204 <abort@plt>
   12b78:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12b7c:	str	r3, [fp, #-52]	; 0xffffffcc
   12b80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12b84:	mov	r2, r3
   12b88:	sub	r3, fp, #52	; 0x34
   12b8c:	ldrd	r0, [r3]
   12b90:	strd	r0, [r2]
   12b94:	ldrd	r0, [r3, #8]
   12b98:	strd	r0, [r2, #8]
   12b9c:	ldrd	r0, [r3, #16]
   12ba0:	strd	r0, [r2, #16]
   12ba4:	ldrd	r0, [r3, #24]
   12ba8:	strd	r0, [r2, #24]
   12bac:	ldrd	r0, [r3, #32]
   12bb0:	strd	r0, [r2, #32]
   12bb4:	ldrd	r0, [r3, #40]	; 0x28
   12bb8:	strd	r0, [r2, #40]	; 0x28
   12bbc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12bc0:	sub	sp, fp, #4
   12bc4:	ldr	fp, [sp]
   12bc8:	add	sp, sp, #4
   12bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   12bd0:	str	fp, [sp, #-8]!
   12bd4:	str	lr, [sp, #4]
   12bd8:	add	fp, sp, #4
   12bdc:	sub	sp, sp, #16
   12be0:	str	r0, [fp, #-16]
   12be4:	str	r1, [fp, #-20]	; 0xffffffec
   12be8:	ldr	r0, [fp, #-16]
   12bec:	bl	110d8 <gettext@plt>
   12bf0:	str	r0, [fp, #-8]
   12bf4:	ldr	r2, [fp, #-8]
   12bf8:	ldr	r3, [fp, #-16]
   12bfc:	cmp	r2, r3
   12c00:	beq	12c0c <__assert_fail@plt+0x19e4>
   12c04:	ldr	r3, [fp, #-8]
   12c08:	b	12cbc <__assert_fail@plt+0x1a94>
   12c0c:	bl	18024 <__assert_fail@plt+0x6dfc>
   12c10:	str	r0, [fp, #-12]
   12c14:	movw	r1, #39148	; 0x98ec
   12c18:	movt	r1, #1
   12c1c:	ldr	r0, [fp, #-12]
   12c20:	bl	179c4 <__assert_fail@plt+0x679c>
   12c24:	mov	r3, r0
   12c28:	cmp	r3, #0
   12c2c:	bne	12c58 <__assert_fail@plt+0x1a30>
   12c30:	ldr	r3, [fp, #-16]
   12c34:	ldrb	r3, [r3]
   12c38:	cmp	r3, #96	; 0x60
   12c3c:	bne	12c4c <__assert_fail@plt+0x1a24>
   12c40:	movw	r3, #39156	; 0x98f4
   12c44:	movt	r3, #1
   12c48:	b	12cbc <__assert_fail@plt+0x1a94>
   12c4c:	movw	r3, #39160	; 0x98f8
   12c50:	movt	r3, #1
   12c54:	b	12cbc <__assert_fail@plt+0x1a94>
   12c58:	movw	r1, #39164	; 0x98fc
   12c5c:	movt	r1, #1
   12c60:	ldr	r0, [fp, #-12]
   12c64:	bl	179c4 <__assert_fail@plt+0x679c>
   12c68:	mov	r3, r0
   12c6c:	cmp	r3, #0
   12c70:	bne	12c9c <__assert_fail@plt+0x1a74>
   12c74:	ldr	r3, [fp, #-16]
   12c78:	ldrb	r3, [r3]
   12c7c:	cmp	r3, #96	; 0x60
   12c80:	bne	12c90 <__assert_fail@plt+0x1a68>
   12c84:	movw	r3, #39172	; 0x9904
   12c88:	movt	r3, #1
   12c8c:	b	12cbc <__assert_fail@plt+0x1a94>
   12c90:	movw	r3, #39176	; 0x9908
   12c94:	movt	r3, #1
   12c98:	b	12cbc <__assert_fail@plt+0x1a94>
   12c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ca0:	cmp	r3, #9
   12ca4:	bne	12cb4 <__assert_fail@plt+0x1a8c>
   12ca8:	movw	r3, #39180	; 0x990c
   12cac:	movt	r3, #1
   12cb0:	b	12cbc <__assert_fail@plt+0x1a94>
   12cb4:	movw	r3, #39184	; 0x9910
   12cb8:	movt	r3, #1
   12cbc:	mov	r0, r3
   12cc0:	sub	sp, fp, #4
   12cc4:	ldr	fp, [sp]
   12cc8:	add	sp, sp, #4
   12ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd0:	str	r4, [sp, #-12]!
   12cd4:	str	fp, [sp, #4]
   12cd8:	str	lr, [sp, #8]
   12cdc:	add	fp, sp, #8
   12ce0:	sub	sp, sp, #116	; 0x74
   12ce4:	str	r0, [fp, #-88]	; 0xffffffa8
   12ce8:	str	r1, [fp, #-92]	; 0xffffffa4
   12cec:	str	r2, [fp, #-96]	; 0xffffffa0
   12cf0:	str	r3, [fp, #-100]	; 0xffffff9c
   12cf4:	mov	r3, #0
   12cf8:	str	r3, [fp, #-20]	; 0xffffffec
   12cfc:	mov	r3, #0
   12d00:	str	r3, [fp, #-24]	; 0xffffffe8
   12d04:	mov	r3, #0
   12d08:	str	r3, [fp, #-28]	; 0xffffffe4
   12d0c:	mov	r3, #0
   12d10:	str	r3, [fp, #-32]	; 0xffffffe0
   12d14:	mov	r3, #0
   12d18:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d1c:	bl	11024 <__ctype_get_mb_cur_max@plt>
   12d20:	mov	r3, r0
   12d24:	cmp	r3, #1
   12d28:	moveq	r3, #1
   12d2c:	movne	r3, #0
   12d30:	strb	r3, [fp, #-57]	; 0xffffffc7
   12d34:	ldr	r3, [fp, #8]
   12d38:	and	r3, r3, #2
   12d3c:	cmp	r3, #0
   12d40:	movne	r3, #1
   12d44:	moveq	r3, #0
   12d48:	strb	r3, [fp, #-34]	; 0xffffffde
   12d4c:	mov	r3, #0
   12d50:	strb	r3, [fp, #-35]	; 0xffffffdd
   12d54:	mov	r3, #0
   12d58:	strb	r3, [fp, #-36]	; 0xffffffdc
   12d5c:	mov	r3, #1
   12d60:	strb	r3, [fp, #-37]	; 0xffffffdb
   12d64:	ldr	r3, [fp, #4]
   12d68:	cmp	r3, #10
   12d6c:	ldrls	pc, [pc, r3, lsl #2]
   12d70:	b	12f88 <__assert_fail@plt+0x1d60>
   12d74:	andeq	r2, r1, ip, ror pc
   12d78:	strdeq	r2, [r1], -r4
   12d7c:	andeq	r2, r1, r8, lsl pc
   12d80:	andeq	r2, r1, ip, ror #29
   12d84:	strdeq	r2, [r1], -ip
   12d88:			; <UNDEFINED> instruction: 0x00012db0
   12d8c:	andeq	r2, r1, r0, lsr #27
   12d90:	andeq	r2, r1, r4, lsl lr
   12d94:	andeq	r2, r1, r8, lsr #28
   12d98:	andeq	r2, r1, r8, lsr #28
   12d9c:	andeq	r2, r1, r8, lsr #28
   12da0:	mov	r3, #5
   12da4:	str	r3, [fp, #4]
   12da8:	mov	r3, #1
   12dac:	strb	r3, [fp, #-34]	; 0xffffffde
   12db0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12db4:	eor	r3, r3, #1
   12db8:	uxtb	r3, r3
   12dbc:	cmp	r3, #0
   12dc0:	beq	12df4 <__assert_fail@plt+0x1bcc>
   12dc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dc8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12dcc:	cmp	r2, r3
   12dd0:	bcs	12de8 <__assert_fail@plt+0x1bc0>
   12dd4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12dd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ddc:	add	r3, r2, r3
   12de0:	mov	r2, #34	; 0x22
   12de4:	strb	r2, [r3]
   12de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dec:	add	r3, r3, #1
   12df0:	str	r3, [fp, #-20]	; 0xffffffec
   12df4:	mov	r3, #1
   12df8:	strb	r3, [fp, #-33]	; 0xffffffdf
   12dfc:	movw	r3, #39180	; 0x990c
   12e00:	movt	r3, #1
   12e04:	str	r3, [fp, #-28]	; 0xffffffe4
   12e08:	mov	r3, #1
   12e0c:	str	r3, [fp, #-32]	; 0xffffffe0
   12e10:	b	12f8c <__assert_fail@plt+0x1d64>
   12e14:	mov	r3, #1
   12e18:	strb	r3, [fp, #-33]	; 0xffffffdf
   12e1c:	mov	r3, #0
   12e20:	strb	r3, [fp, #-34]	; 0xffffffde
   12e24:	b	12f8c <__assert_fail@plt+0x1d64>
   12e28:	ldr	r3, [fp, #4]
   12e2c:	cmp	r3, #10
   12e30:	beq	12e5c <__assert_fail@plt+0x1c34>
   12e34:	ldr	r1, [fp, #4]
   12e38:	movw	r0, #39188	; 0x9914
   12e3c:	movt	r0, #1
   12e40:	bl	12bd0 <__assert_fail@plt+0x19a8>
   12e44:	str	r0, [fp, #16]
   12e48:	ldr	r1, [fp, #4]
   12e4c:	movw	r0, #39184	; 0x9910
   12e50:	movt	r0, #1
   12e54:	bl	12bd0 <__assert_fail@plt+0x19a8>
   12e58:	str	r0, [fp, #20]
   12e5c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12e60:	eor	r3, r3, #1
   12e64:	uxtb	r3, r3
   12e68:	cmp	r3, #0
   12e6c:	beq	12ecc <__assert_fail@plt+0x1ca4>
   12e70:	ldr	r3, [fp, #16]
   12e74:	str	r3, [fp, #-28]	; 0xffffffe4
   12e78:	b	12ebc <__assert_fail@plt+0x1c94>
   12e7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e84:	cmp	r2, r3
   12e88:	bcs	12ea4 <__assert_fail@plt+0x1c7c>
   12e8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e90:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e94:	add	r3, r2, r3
   12e98:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12e9c:	ldrb	r2, [r2]
   12ea0:	strb	r2, [r3]
   12ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ea8:	add	r3, r3, #1
   12eac:	str	r3, [fp, #-20]	; 0xffffffec
   12eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12eb4:	add	r3, r3, #1
   12eb8:	str	r3, [fp, #-28]	; 0xffffffe4
   12ebc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ec0:	ldrb	r3, [r3]
   12ec4:	cmp	r3, #0
   12ec8:	bne	12e7c <__assert_fail@plt+0x1c54>
   12ecc:	mov	r3, #1
   12ed0:	strb	r3, [fp, #-33]	; 0xffffffdf
   12ed4:	ldr	r3, [fp, #20]
   12ed8:	str	r3, [fp, #-28]	; 0xffffffe4
   12edc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12ee0:	bl	110f0 <strlen@plt>
   12ee4:	str	r0, [fp, #-32]	; 0xffffffe0
   12ee8:	b	12f8c <__assert_fail@plt+0x1d64>
   12eec:	mov	r3, #1
   12ef0:	strb	r3, [fp, #-33]	; 0xffffffdf
   12ef4:	mov	r3, #1
   12ef8:	strb	r3, [fp, #-34]	; 0xffffffde
   12efc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12f00:	eor	r3, r3, #1
   12f04:	uxtb	r3, r3
   12f08:	cmp	r3, #0
   12f0c:	beq	12f18 <__assert_fail@plt+0x1cf0>
   12f10:	mov	r3, #1
   12f14:	strb	r3, [fp, #-33]	; 0xffffffdf
   12f18:	mov	r3, #2
   12f1c:	str	r3, [fp, #4]
   12f20:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12f24:	eor	r3, r3, #1
   12f28:	uxtb	r3, r3
   12f2c:	cmp	r3, #0
   12f30:	beq	12f64 <__assert_fail@plt+0x1d3c>
   12f34:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f3c:	cmp	r2, r3
   12f40:	bcs	12f58 <__assert_fail@plt+0x1d30>
   12f44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f48:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f4c:	add	r3, r2, r3
   12f50:	mov	r2, #39	; 0x27
   12f54:	strb	r2, [r3]
   12f58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f5c:	add	r3, r3, #1
   12f60:	str	r3, [fp, #-20]	; 0xffffffec
   12f64:	movw	r3, #39184	; 0x9910
   12f68:	movt	r3, #1
   12f6c:	str	r3, [fp, #-28]	; 0xffffffe4
   12f70:	mov	r3, #1
   12f74:	str	r3, [fp, #-32]	; 0xffffffe0
   12f78:	b	12f8c <__assert_fail@plt+0x1d64>
   12f7c:	mov	r3, #0
   12f80:	strb	r3, [fp, #-34]	; 0xffffffde
   12f84:	b	12f8c <__assert_fail@plt+0x1d64>
   12f88:	bl	11204 <abort@plt>
   12f8c:	mov	r3, #0
   12f90:	str	r3, [fp, #-16]
   12f94:	b	14130 <__assert_fail@plt+0x2f08>
   12f98:	mov	r3, #0
   12f9c:	strb	r3, [fp, #-40]	; 0xffffffd8
   12fa0:	mov	r3, #0
   12fa4:	strb	r3, [fp, #-41]	; 0xffffffd7
   12fa8:	mov	r3, #0
   12fac:	strb	r3, [fp, #-42]	; 0xffffffd6
   12fb0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12fb4:	cmp	r3, #0
   12fb8:	beq	13054 <__assert_fail@plt+0x1e2c>
   12fbc:	ldr	r3, [fp, #4]
   12fc0:	cmp	r3, #2
   12fc4:	beq	13054 <__assert_fail@plt+0x1e2c>
   12fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fcc:	cmp	r3, #0
   12fd0:	beq	13054 <__assert_fail@plt+0x1e2c>
   12fd4:	ldr	r2, [fp, #-16]
   12fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fdc:	add	r4, r2, r3
   12fe0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12fe4:	cmn	r3, #1
   12fe8:	bne	1300c <__assert_fail@plt+0x1de4>
   12fec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ff0:	cmp	r3, #1
   12ff4:	bls	1300c <__assert_fail@plt+0x1de4>
   12ff8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12ffc:	bl	110f0 <strlen@plt>
   13000:	str	r0, [fp, #-100]	; 0xffffff9c
   13004:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13008:	b	13010 <__assert_fail@plt+0x1de8>
   1300c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13010:	cmp	r3, r4
   13014:	bcc	13054 <__assert_fail@plt+0x1e2c>
   13018:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1301c:	ldr	r3, [fp, #-16]
   13020:	add	r3, r2, r3
   13024:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13028:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1302c:	mov	r0, r3
   13030:	bl	10fb8 <memcmp@plt>
   13034:	mov	r3, r0
   13038:	cmp	r3, #0
   1303c:	bne	13054 <__assert_fail@plt+0x1e2c>
   13040:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13044:	cmp	r3, #0
   13048:	bne	142ec <__assert_fail@plt+0x30c4>
   1304c:	mov	r3, #1
   13050:	strb	r3, [fp, #-40]	; 0xffffffd8
   13054:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13058:	ldr	r3, [fp, #-16]
   1305c:	add	r3, r2, r3
   13060:	ldrb	r3, [r3]
   13064:	strb	r3, [fp, #-38]	; 0xffffffda
   13068:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1306c:	cmp	r3, #126	; 0x7e
   13070:	ldrls	pc, [pc, r3, lsl #2]
   13074:	b	138ac <__assert_fail@plt+0x2684>
   13078:	andeq	r3, r1, r4, ror r2
   1307c:	andeq	r3, r1, ip, lsr #17
   13080:	andeq	r3, r1, ip, lsr #17
   13084:	andeq	r3, r1, ip, lsr #17
   13088:	andeq	r3, r1, ip, lsr #17
   1308c:	andeq	r3, r1, ip, lsr #17
   13090:	andeq	r3, r1, ip, lsr #17
   13094:	andeq	r3, r1, r8, ror #12
   13098:	andeq	r3, r1, r4, ror r6
   1309c:	andeq	r3, r1, r4, lsr #13
   130a0:	andeq	r3, r1, ip, lsl #13
   130a4:			; <UNDEFINED> instruction: 0x000136b0
   130a8:	andeq	r3, r1, r0, lsl #13
   130ac:	muleq	r1, r8, r6
   130b0:	andeq	r3, r1, ip, lsr #17
   130b4:	andeq	r3, r1, ip, lsr #17
   130b8:	andeq	r3, r1, ip, lsr #17
   130bc:	andeq	r3, r1, ip, lsr #17
   130c0:	andeq	r3, r1, ip, lsr #17
   130c4:	andeq	r3, r1, ip, lsr #17
   130c8:	andeq	r3, r1, ip, lsr #17
   130cc:	andeq	r3, r1, ip, lsr #17
   130d0:	andeq	r3, r1, ip, lsr #17
   130d4:	andeq	r3, r1, ip, lsr #17
   130d8:	andeq	r3, r1, ip, lsr #17
   130dc:	andeq	r3, r1, ip, lsr #17
   130e0:	andeq	r3, r1, ip, lsr #17
   130e4:	andeq	r3, r1, ip, lsr #17
   130e8:	andeq	r3, r1, ip, lsr #17
   130ec:	andeq	r3, r1, ip, lsr #17
   130f0:	andeq	r3, r1, ip, lsr #17
   130f4:	andeq	r3, r1, ip, lsr #17
   130f8:	muleq	r1, r0, r7
   130fc:	muleq	r1, r8, r7
   13100:	muleq	r1, r8, r7
   13104:	andeq	r3, r1, r4, lsl #15
   13108:	muleq	r1, r8, r7
   1310c:	andeq	r3, r1, r0, lsr #17
   13110:	muleq	r1, r8, r7
   13114:			; <UNDEFINED> instruction: 0x000137b4
   13118:	muleq	r1, r8, r7
   1311c:	muleq	r1, r8, r7
   13120:	muleq	r1, r8, r7
   13124:	andeq	r3, r1, r0, lsr #17
   13128:	andeq	r3, r1, r0, lsr #17
   1312c:	andeq	r3, r1, r0, lsr #17
   13130:	andeq	r3, r1, r0, lsr #17
   13134:	andeq	r3, r1, r0, lsr #17
   13138:	andeq	r3, r1, r0, lsr #17
   1313c:	andeq	r3, r1, r0, lsr #17
   13140:	andeq	r3, r1, r0, lsr #17
   13144:	andeq	r3, r1, r0, lsr #17
   13148:	andeq	r3, r1, r0, lsr #17
   1314c:	andeq	r3, r1, r0, lsr #17
   13150:	andeq	r3, r1, r0, lsr #17
   13154:	andeq	r3, r1, r0, lsr #17
   13158:	andeq	r3, r1, r0, lsr #17
   1315c:	andeq	r3, r1, r0, lsr #17
   13160:	andeq	r3, r1, r0, lsr #17
   13164:	muleq	r1, r8, r7
   13168:	muleq	r1, r8, r7
   1316c:	muleq	r1, r8, r7
   13170:	muleq	r1, r8, r7
   13174:	andeq	r3, r1, r4, asr r4
   13178:	andeq	r3, r1, ip, lsr #17
   1317c:	andeq	r3, r1, r0, lsr #17
   13180:	andeq	r3, r1, r0, lsr #17
   13184:	andeq	r3, r1, r0, lsr #17
   13188:	andeq	r3, r1, r0, lsr #17
   1318c:	andeq	r3, r1, r0, lsr #17
   13190:	andeq	r3, r1, r0, lsr #17
   13194:	andeq	r3, r1, r0, lsr #17
   13198:	andeq	r3, r1, r0, lsr #17
   1319c:	andeq	r3, r1, r0, lsr #17
   131a0:	andeq	r3, r1, r0, lsr #17
   131a4:	andeq	r3, r1, r0, lsr #17
   131a8:	andeq	r3, r1, r0, lsr #17
   131ac:	andeq	r3, r1, r0, lsr #17
   131b0:	andeq	r3, r1, r0, lsr #17
   131b4:	andeq	r3, r1, r0, lsr #17
   131b8:	andeq	r3, r1, r0, lsr #17
   131bc:	andeq	r3, r1, r0, lsr #17
   131c0:	andeq	r3, r1, r0, lsr #17
   131c4:	andeq	r3, r1, r0, lsr #17
   131c8:	andeq	r3, r1, r0, lsr #17
   131cc:	andeq	r3, r1, r0, lsr #17
   131d0:	andeq	r3, r1, r0, lsr #17
   131d4:	andeq	r3, r1, r0, lsr #17
   131d8:	andeq	r3, r1, r0, lsr #17
   131dc:	andeq	r3, r1, r0, lsr #17
   131e0:	andeq	r3, r1, r0, lsr #17
   131e4:	muleq	r1, r8, r7
   131e8:			; <UNDEFINED> instruction: 0x000136bc
   131ec:	andeq	r3, r1, r0, lsr #17
   131f0:	muleq	r1, r8, r7
   131f4:	andeq	r3, r1, r0, lsr #17
   131f8:	muleq	r1, r8, r7
   131fc:	andeq	r3, r1, r0, lsr #17
   13200:	andeq	r3, r1, r0, lsr #17
   13204:	andeq	r3, r1, r0, lsr #17
   13208:	andeq	r3, r1, r0, lsr #17
   1320c:	andeq	r3, r1, r0, lsr #17
   13210:	andeq	r3, r1, r0, lsr #17
   13214:	andeq	r3, r1, r0, lsr #17
   13218:	andeq	r3, r1, r0, lsr #17
   1321c:	andeq	r3, r1, r0, lsr #17
   13220:	andeq	r3, r1, r0, lsr #17
   13224:	andeq	r3, r1, r0, lsr #17
   13228:	andeq	r3, r1, r0, lsr #17
   1322c:	andeq	r3, r1, r0, lsr #17
   13230:	andeq	r3, r1, r0, lsr #17
   13234:	andeq	r3, r1, r0, lsr #17
   13238:	andeq	r3, r1, r0, lsr #17
   1323c:	andeq	r3, r1, r0, lsr #17
   13240:	andeq	r3, r1, r0, lsr #17
   13244:	andeq	r3, r1, r0, lsr #17
   13248:	andeq	r3, r1, r0, lsr #17
   1324c:	andeq	r3, r1, r0, lsr #17
   13250:	andeq	r3, r1, r0, lsr #17
   13254:	andeq	r3, r1, r0, lsr #17
   13258:	andeq	r3, r1, r0, lsr #17
   1325c:	andeq	r3, r1, r0, lsr #17
   13260:	andeq	r3, r1, r0, lsr #17
   13264:	andeq	r3, r1, ip, lsr r7
   13268:	muleq	r1, r8, r7
   1326c:	andeq	r3, r1, ip, lsr r7
   13270:	andeq	r3, r1, r4, lsl #15
   13274:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13278:	cmp	r3, #0
   1327c:	beq	13440 <__assert_fail@plt+0x2218>
   13280:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13284:	cmp	r3, #0
   13288:	bne	142f4 <__assert_fail@plt+0x30cc>
   1328c:	mov	r3, #1
   13290:	strb	r3, [fp, #-41]	; 0xffffffd7
   13294:	ldr	r3, [fp, #4]
   13298:	cmp	r3, #2
   1329c:	bne	1334c <__assert_fail@plt+0x2124>
   132a0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   132a4:	eor	r3, r3, #1
   132a8:	uxtb	r3, r3
   132ac:	cmp	r3, #0
   132b0:	beq	1334c <__assert_fail@plt+0x2124>
   132b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   132b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132bc:	cmp	r2, r3
   132c0:	bcs	132d8 <__assert_fail@plt+0x20b0>
   132c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132cc:	add	r3, r2, r3
   132d0:	mov	r2, #39	; 0x27
   132d4:	strb	r2, [r3]
   132d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132dc:	add	r3, r3, #1
   132e0:	str	r3, [fp, #-20]	; 0xffffffec
   132e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   132e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132ec:	cmp	r2, r3
   132f0:	bcs	13308 <__assert_fail@plt+0x20e0>
   132f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132fc:	add	r3, r2, r3
   13300:	mov	r2, #36	; 0x24
   13304:	strb	r2, [r3]
   13308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1330c:	add	r3, r3, #1
   13310:	str	r3, [fp, #-20]	; 0xffffffec
   13314:	ldr	r2, [fp, #-20]	; 0xffffffec
   13318:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1331c:	cmp	r2, r3
   13320:	bcs	13338 <__assert_fail@plt+0x2110>
   13324:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1332c:	add	r3, r2, r3
   13330:	mov	r2, #39	; 0x27
   13334:	strb	r2, [r3]
   13338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1333c:	add	r3, r3, #1
   13340:	str	r3, [fp, #-20]	; 0xffffffec
   13344:	mov	r3, #1
   13348:	strb	r3, [fp, #-35]	; 0xffffffdd
   1334c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13350:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13354:	cmp	r2, r3
   13358:	bcs	13370 <__assert_fail@plt+0x2148>
   1335c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13360:	ldr	r3, [fp, #-20]	; 0xffffffec
   13364:	add	r3, r2, r3
   13368:	mov	r2, #92	; 0x5c
   1336c:	strb	r2, [r3]
   13370:	ldr	r3, [fp, #-20]	; 0xffffffec
   13374:	add	r3, r3, #1
   13378:	str	r3, [fp, #-20]	; 0xffffffec
   1337c:	ldr	r3, [fp, #4]
   13380:	cmp	r3, #2
   13384:	beq	13434 <__assert_fail@plt+0x220c>
   13388:	ldr	r3, [fp, #-16]
   1338c:	add	r3, r3, #1
   13390:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13394:	cmp	r2, r3
   13398:	bls	13434 <__assert_fail@plt+0x220c>
   1339c:	ldr	r3, [fp, #-16]
   133a0:	add	r3, r3, #1
   133a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133a8:	add	r3, r2, r3
   133ac:	ldrb	r3, [r3]
   133b0:	cmp	r3, #47	; 0x2f
   133b4:	bls	13434 <__assert_fail@plt+0x220c>
   133b8:	ldr	r3, [fp, #-16]
   133bc:	add	r3, r3, #1
   133c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133c4:	add	r3, r2, r3
   133c8:	ldrb	r3, [r3]
   133cc:	cmp	r3, #57	; 0x39
   133d0:	bhi	13434 <__assert_fail@plt+0x220c>
   133d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   133d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133dc:	cmp	r2, r3
   133e0:	bcs	133f8 <__assert_fail@plt+0x21d0>
   133e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133ec:	add	r3, r2, r3
   133f0:	mov	r2, #48	; 0x30
   133f4:	strb	r2, [r3]
   133f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133fc:	add	r3, r3, #1
   13400:	str	r3, [fp, #-20]	; 0xffffffec
   13404:	ldr	r2, [fp, #-20]	; 0xffffffec
   13408:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1340c:	cmp	r2, r3
   13410:	bcs	13428 <__assert_fail@plt+0x2200>
   13414:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13418:	ldr	r3, [fp, #-20]	; 0xffffffec
   1341c:	add	r3, r2, r3
   13420:	mov	r2, #48	; 0x30
   13424:	strb	r2, [r3]
   13428:	ldr	r3, [fp, #-20]	; 0xffffffec
   1342c:	add	r3, r3, #1
   13430:	str	r3, [fp, #-20]	; 0xffffffec
   13434:	mov	r3, #48	; 0x30
   13438:	strb	r3, [fp, #-38]	; 0xffffffda
   1343c:	b	13e7c <__assert_fail@plt+0x2c54>
   13440:	ldr	r3, [fp, #8]
   13444:	and	r3, r3, #1
   13448:	cmp	r3, #0
   1344c:	beq	13e7c <__assert_fail@plt+0x2c54>
   13450:	b	14124 <__assert_fail@plt+0x2efc>
   13454:	ldr	r3, [fp, #4]
   13458:	cmp	r3, #2
   1345c:	beq	13470 <__assert_fail@plt+0x2248>
   13460:	ldr	r3, [fp, #4]
   13464:	cmp	r3, #5
   13468:	beq	13480 <__assert_fail@plt+0x2258>
   1346c:	b	13664 <__assert_fail@plt+0x243c>
   13470:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13474:	cmp	r3, #0
   13478:	beq	13658 <__assert_fail@plt+0x2430>
   1347c:	b	14328 <__assert_fail@plt+0x3100>
   13480:	ldr	r3, [fp, #8]
   13484:	and	r3, r3, #4
   13488:	cmp	r3, #0
   1348c:	beq	13660 <__assert_fail@plt+0x2438>
   13490:	ldr	r3, [fp, #-16]
   13494:	add	r3, r3, #2
   13498:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1349c:	cmp	r2, r3
   134a0:	bls	13660 <__assert_fail@plt+0x2438>
   134a4:	ldr	r3, [fp, #-16]
   134a8:	add	r3, r3, #1
   134ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   134b0:	add	r3, r2, r3
   134b4:	ldrb	r3, [r3]
   134b8:	cmp	r3, #63	; 0x3f
   134bc:	bne	13660 <__assert_fail@plt+0x2438>
   134c0:	ldr	r3, [fp, #-16]
   134c4:	add	r3, r3, #2
   134c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   134cc:	add	r3, r2, r3
   134d0:	ldrb	r3, [r3]
   134d4:	sub	r3, r3, #33	; 0x21
   134d8:	cmp	r3, #29
   134dc:	ldrls	pc, [pc, r3, lsl #2]
   134e0:	b	13650 <__assert_fail@plt+0x2428>
   134e4:	andeq	r3, r1, ip, asr r5
   134e8:	andeq	r3, r1, r0, asr r6
   134ec:	andeq	r3, r1, r0, asr r6
   134f0:	andeq	r3, r1, r0, asr r6
   134f4:	andeq	r3, r1, r0, asr r6
   134f8:	andeq	r3, r1, r0, asr r6
   134fc:	andeq	r3, r1, ip, asr r5
   13500:	andeq	r3, r1, ip, asr r5
   13504:	andeq	r3, r1, ip, asr r5
   13508:	andeq	r3, r1, r0, asr r6
   1350c:	andeq	r3, r1, r0, asr r6
   13510:	andeq	r3, r1, r0, asr r6
   13514:	andeq	r3, r1, ip, asr r5
   13518:	andeq	r3, r1, r0, asr r6
   1351c:	andeq	r3, r1, ip, asr r5
   13520:	andeq	r3, r1, r0, asr r6
   13524:	andeq	r3, r1, r0, asr r6
   13528:	andeq	r3, r1, r0, asr r6
   1352c:	andeq	r3, r1, r0, asr r6
   13530:	andeq	r3, r1, r0, asr r6
   13534:	andeq	r3, r1, r0, asr r6
   13538:	andeq	r3, r1, r0, asr r6
   1353c:	andeq	r3, r1, r0, asr r6
   13540:	andeq	r3, r1, r0, asr r6
   13544:	andeq	r3, r1, r0, asr r6
   13548:	andeq	r3, r1, r0, asr r6
   1354c:	andeq	r3, r1, r0, asr r6
   13550:	andeq	r3, r1, ip, asr r5
   13554:	andeq	r3, r1, ip, asr r5
   13558:	andeq	r3, r1, ip, asr r5
   1355c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13560:	cmp	r3, #0
   13564:	bne	142fc <__assert_fail@plt+0x30d4>
   13568:	ldr	r3, [fp, #-16]
   1356c:	add	r3, r3, #2
   13570:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13574:	add	r3, r2, r3
   13578:	ldrb	r3, [r3]
   1357c:	strb	r3, [fp, #-38]	; 0xffffffda
   13580:	ldr	r3, [fp, #-16]
   13584:	add	r3, r3, #2
   13588:	str	r3, [fp, #-16]
   1358c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13590:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13594:	cmp	r2, r3
   13598:	bcs	135b0 <__assert_fail@plt+0x2388>
   1359c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135a4:	add	r3, r2, r3
   135a8:	mov	r2, #63	; 0x3f
   135ac:	strb	r2, [r3]
   135b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135b4:	add	r3, r3, #1
   135b8:	str	r3, [fp, #-20]	; 0xffffffec
   135bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   135c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135c4:	cmp	r2, r3
   135c8:	bcs	135e0 <__assert_fail@plt+0x23b8>
   135cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135d4:	add	r3, r2, r3
   135d8:	mov	r2, #34	; 0x22
   135dc:	strb	r2, [r3]
   135e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135e4:	add	r3, r3, #1
   135e8:	str	r3, [fp, #-20]	; 0xffffffec
   135ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   135f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135f4:	cmp	r2, r3
   135f8:	bcs	13610 <__assert_fail@plt+0x23e8>
   135fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13600:	ldr	r3, [fp, #-20]	; 0xffffffec
   13604:	add	r3, r2, r3
   13608:	mov	r2, #34	; 0x22
   1360c:	strb	r2, [r3]
   13610:	ldr	r3, [fp, #-20]	; 0xffffffec
   13614:	add	r3, r3, #1
   13618:	str	r3, [fp, #-20]	; 0xffffffec
   1361c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13620:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13624:	cmp	r2, r3
   13628:	bcs	13640 <__assert_fail@plt+0x2418>
   1362c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13630:	ldr	r3, [fp, #-20]	; 0xffffffec
   13634:	add	r3, r2, r3
   13638:	mov	r2, #63	; 0x3f
   1363c:	strb	r2, [r3]
   13640:	ldr	r3, [fp, #-20]	; 0xffffffec
   13644:	add	r3, r3, #1
   13648:	str	r3, [fp, #-20]	; 0xffffffec
   1364c:	b	13654 <__assert_fail@plt+0x242c>
   13650:	nop	{0}
   13654:	b	13660 <__assert_fail@plt+0x2438>
   13658:	nop	{0}
   1365c:	b	13eb0 <__assert_fail@plt+0x2c88>
   13660:	nop	{0}
   13664:	b	13eb0 <__assert_fail@plt+0x2c88>
   13668:	mov	r3, #97	; 0x61
   1366c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13670:	b	13724 <__assert_fail@plt+0x24fc>
   13674:	mov	r3, #98	; 0x62
   13678:	strb	r3, [fp, #-39]	; 0xffffffd9
   1367c:	b	13724 <__assert_fail@plt+0x24fc>
   13680:	mov	r3, #102	; 0x66
   13684:	strb	r3, [fp, #-39]	; 0xffffffd9
   13688:	b	13724 <__assert_fail@plt+0x24fc>
   1368c:	mov	r3, #110	; 0x6e
   13690:	strb	r3, [fp, #-39]	; 0xffffffd9
   13694:	b	13708 <__assert_fail@plt+0x24e0>
   13698:	mov	r3, #114	; 0x72
   1369c:	strb	r3, [fp, #-39]	; 0xffffffd9
   136a0:	b	13708 <__assert_fail@plt+0x24e0>
   136a4:	mov	r3, #116	; 0x74
   136a8:	strb	r3, [fp, #-39]	; 0xffffffd9
   136ac:	b	13708 <__assert_fail@plt+0x24e0>
   136b0:	mov	r3, #118	; 0x76
   136b4:	strb	r3, [fp, #-39]	; 0xffffffd9
   136b8:	b	13724 <__assert_fail@plt+0x24fc>
   136bc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   136c0:	strb	r3, [fp, #-39]	; 0xffffffd9
   136c4:	ldr	r3, [fp, #4]
   136c8:	cmp	r3, #2
   136cc:	bne	136e0 <__assert_fail@plt+0x24b8>
   136d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   136d4:	cmp	r3, #0
   136d8:	beq	1403c <__assert_fail@plt+0x2e14>
   136dc:	b	14328 <__assert_fail@plt+0x3100>
   136e0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   136e4:	cmp	r3, #0
   136e8:	beq	13704 <__assert_fail@plt+0x24dc>
   136ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   136f0:	cmp	r3, #0
   136f4:	beq	13704 <__assert_fail@plt+0x24dc>
   136f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136fc:	cmp	r3, #0
   13700:	bne	14044 <__assert_fail@plt+0x2e1c>
   13704:	nop	{0}
   13708:	ldr	r3, [fp, #4]
   1370c:	cmp	r3, #2
   13710:	bne	13720 <__assert_fail@plt+0x24f8>
   13714:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13718:	cmp	r3, #0
   1371c:	bne	14304 <__assert_fail@plt+0x30dc>
   13720:	nop	{0}
   13724:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13728:	cmp	r3, #0
   1372c:	beq	13e84 <__assert_fail@plt+0x2c5c>
   13730:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13734:	strb	r3, [fp, #-38]	; 0xffffffda
   13738:	b	13f3c <__assert_fail@plt+0x2d14>
   1373c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13740:	cmn	r3, #1
   13744:	bne	13768 <__assert_fail@plt+0x2540>
   13748:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1374c:	add	r3, r3, #1
   13750:	ldrb	r3, [r3]
   13754:	cmp	r3, #0
   13758:	movne	r3, #1
   1375c:	moveq	r3, #0
   13760:	uxtb	r3, r3
   13764:	b	1377c <__assert_fail@plt+0x2554>
   13768:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1376c:	cmp	r3, #1
   13770:	movne	r3, #1
   13774:	moveq	r3, #0
   13778:	uxtb	r3, r3
   1377c:	cmp	r3, #0
   13780:	bne	13e8c <__assert_fail@plt+0x2c64>
   13784:	ldr	r3, [fp, #-16]
   13788:	cmp	r3, #0
   1378c:	bne	13e94 <__assert_fail@plt+0x2c6c>
   13790:	mov	r3, #1
   13794:	strb	r3, [fp, #-42]	; 0xffffffd6
   13798:	ldr	r3, [fp, #4]
   1379c:	cmp	r3, #2
   137a0:	bne	13e9c <__assert_fail@plt+0x2c74>
   137a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   137a8:	cmp	r3, #0
   137ac:	beq	13e9c <__assert_fail@plt+0x2c74>
   137b0:	b	14328 <__assert_fail@plt+0x3100>
   137b4:	mov	r3, #1
   137b8:	strb	r3, [fp, #-36]	; 0xffffffdc
   137bc:	mov	r3, #1
   137c0:	strb	r3, [fp, #-42]	; 0xffffffd6
   137c4:	ldr	r3, [fp, #4]
   137c8:	cmp	r3, #2
   137cc:	bne	13ea4 <__assert_fail@plt+0x2c7c>
   137d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   137d4:	cmp	r3, #0
   137d8:	bne	1430c <__assert_fail@plt+0x30e4>
   137dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137e0:	cmp	r3, #0
   137e4:	beq	13804 <__assert_fail@plt+0x25dc>
   137e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   137ec:	cmp	r3, #0
   137f0:	bne	13804 <__assert_fail@plt+0x25dc>
   137f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137f8:	str	r3, [fp, #-24]	; 0xffffffe8
   137fc:	mov	r3, #0
   13800:	str	r3, [fp, #-92]	; 0xffffffa4
   13804:	ldr	r2, [fp, #-20]	; 0xffffffec
   13808:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1380c:	cmp	r2, r3
   13810:	bcs	13828 <__assert_fail@plt+0x2600>
   13814:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1381c:	add	r3, r2, r3
   13820:	mov	r2, #39	; 0x27
   13824:	strb	r2, [r3]
   13828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1382c:	add	r3, r3, #1
   13830:	str	r3, [fp, #-20]	; 0xffffffec
   13834:	ldr	r2, [fp, #-20]	; 0xffffffec
   13838:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1383c:	cmp	r2, r3
   13840:	bcs	13858 <__assert_fail@plt+0x2630>
   13844:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1384c:	add	r3, r2, r3
   13850:	mov	r2, #92	; 0x5c
   13854:	strb	r2, [r3]
   13858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1385c:	add	r3, r3, #1
   13860:	str	r3, [fp, #-20]	; 0xffffffec
   13864:	ldr	r2, [fp, #-20]	; 0xffffffec
   13868:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1386c:	cmp	r2, r3
   13870:	bcs	13888 <__assert_fail@plt+0x2660>
   13874:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1387c:	add	r3, r2, r3
   13880:	mov	r2, #39	; 0x27
   13884:	strb	r2, [r3]
   13888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1388c:	add	r3, r3, #1
   13890:	str	r3, [fp, #-20]	; 0xffffffec
   13894:	mov	r3, #0
   13898:	strb	r3, [fp, #-35]	; 0xffffffdd
   1389c:	b	13ea4 <__assert_fail@plt+0x2c7c>
   138a0:	mov	r3, #1
   138a4:	strb	r3, [fp, #-42]	; 0xffffffd6
   138a8:	b	13eb0 <__assert_fail@plt+0x2c88>
   138ac:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   138b0:	cmp	r3, #0
   138b4:	beq	138f4 <__assert_fail@plt+0x26cc>
   138b8:	mov	r3, #1
   138bc:	str	r3, [fp, #-48]	; 0xffffffd0
   138c0:	bl	110c0 <__ctype_b_loc@plt>
   138c4:	mov	r3, r0
   138c8:	ldr	r2, [r3]
   138cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   138d0:	lsl	r3, r3, #1
   138d4:	add	r3, r2, r3
   138d8:	ldrh	r3, [r3]
   138dc:	and	r3, r3, #16384	; 0x4000
   138e0:	cmp	r3, #0
   138e4:	movne	r3, #1
   138e8:	moveq	r3, #0
   138ec:	strb	r3, [fp, #-49]	; 0xffffffcf
   138f0:	b	13b40 <__assert_fail@plt+0x2918>
   138f4:	sub	r3, fp, #76	; 0x4c
   138f8:	mov	r2, #8
   138fc:	mov	r1, #0
   13900:	mov	r0, r3
   13904:	bl	11138 <memset@plt>
   13908:	mov	r3, #0
   1390c:	str	r3, [fp, #-48]	; 0xffffffd0
   13910:	mov	r3, #1
   13914:	strb	r3, [fp, #-49]	; 0xffffffcf
   13918:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1391c:	cmn	r3, #1
   13920:	bne	13930 <__assert_fail@plt+0x2708>
   13924:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13928:	bl	110f0 <strlen@plt>
   1392c:	str	r0, [fp, #-100]	; 0xffffff9c
   13930:	ldr	r2, [fp, #-16]
   13934:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13938:	add	r3, r2, r3
   1393c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13940:	add	r1, r2, r3
   13944:	ldr	r2, [fp, #-16]
   13948:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1394c:	add	r3, r2, r3
   13950:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13954:	sub	r2, r2, r3
   13958:	sub	r3, fp, #76	; 0x4c
   1395c:	sub	r0, fp, #80	; 0x50
   13960:	bl	1808c <__assert_fail@plt+0x6e64>
   13964:	str	r0, [fp, #-64]	; 0xffffffc0
   13968:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1396c:	cmp	r3, #0
   13970:	beq	13b34 <__assert_fail@plt+0x290c>
   13974:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13978:	cmn	r3, #1
   1397c:	bne	1398c <__assert_fail@plt+0x2764>
   13980:	mov	r3, #0
   13984:	strb	r3, [fp, #-49]	; 0xffffffcf
   13988:	b	13b40 <__assert_fail@plt+0x2918>
   1398c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13990:	cmn	r3, #2
   13994:	bne	139ec <__assert_fail@plt+0x27c4>
   13998:	mov	r3, #0
   1399c:	strb	r3, [fp, #-49]	; 0xffffffcf
   139a0:	b	139b0 <__assert_fail@plt+0x2788>
   139a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139a8:	add	r3, r3, #1
   139ac:	str	r3, [fp, #-48]	; 0xffffffd0
   139b0:	ldr	r2, [fp, #-16]
   139b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139b8:	add	r3, r2, r3
   139bc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   139c0:	cmp	r2, r3
   139c4:	bls	13b3c <__assert_fail@plt+0x2914>
   139c8:	ldr	r2, [fp, #-16]
   139cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139d0:	add	r3, r2, r3
   139d4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   139d8:	add	r3, r2, r3
   139dc:	ldrb	r3, [r3]
   139e0:	cmp	r3, #0
   139e4:	bne	139a4 <__assert_fail@plt+0x277c>
   139e8:	b	13b3c <__assert_fail@plt+0x2914>
   139ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   139f0:	cmp	r3, #0
   139f4:	beq	13ae8 <__assert_fail@plt+0x28c0>
   139f8:	ldr	r3, [fp, #4]
   139fc:	cmp	r3, #2
   13a00:	bne	13ae8 <__assert_fail@plt+0x28c0>
   13a04:	mov	r3, #1
   13a08:	str	r3, [fp, #-56]	; 0xffffffc8
   13a0c:	b	13ad8 <__assert_fail@plt+0x28b0>
   13a10:	ldr	r2, [fp, #-16]
   13a14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a18:	add	r2, r2, r3
   13a1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a20:	add	r3, r2, r3
   13a24:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13a28:	add	r3, r2, r3
   13a2c:	ldrb	r3, [r3]
   13a30:	sub	r3, r3, #91	; 0x5b
   13a34:	cmp	r3, #33	; 0x21
   13a38:	ldrls	pc, [pc, r3, lsl #2]
   13a3c:	b	13ac8 <__assert_fail@plt+0x28a0>
   13a40:	andeq	r4, r1, r8, lsr #6
   13a44:	andeq	r4, r1, r8, lsr #6
   13a48:	andeq	r3, r1, r8, asr #21
   13a4c:	andeq	r4, r1, r8, lsr #6
   13a50:	andeq	r3, r1, r8, asr #21
   13a54:	andeq	r4, r1, r8, lsr #6
   13a58:	andeq	r3, r1, r8, asr #21
   13a5c:	andeq	r3, r1, r8, asr #21
   13a60:	andeq	r3, r1, r8, asr #21
   13a64:	andeq	r3, r1, r8, asr #21
   13a68:	andeq	r3, r1, r8, asr #21
   13a6c:	andeq	r3, r1, r8, asr #21
   13a70:	andeq	r3, r1, r8, asr #21
   13a74:	andeq	r3, r1, r8, asr #21
   13a78:	andeq	r3, r1, r8, asr #21
   13a7c:	andeq	r3, r1, r8, asr #21
   13a80:	andeq	r3, r1, r8, asr #21
   13a84:	andeq	r3, r1, r8, asr #21
   13a88:	andeq	r3, r1, r8, asr #21
   13a8c:	andeq	r3, r1, r8, asr #21
   13a90:	andeq	r3, r1, r8, asr #21
   13a94:	andeq	r3, r1, r8, asr #21
   13a98:	andeq	r3, r1, r8, asr #21
   13a9c:	andeq	r3, r1, r8, asr #21
   13aa0:	andeq	r3, r1, r8, asr #21
   13aa4:	andeq	r3, r1, r8, asr #21
   13aa8:	andeq	r3, r1, r8, asr #21
   13aac:	andeq	r3, r1, r8, asr #21
   13ab0:	andeq	r3, r1, r8, asr #21
   13ab4:	andeq	r3, r1, r8, asr #21
   13ab8:	andeq	r3, r1, r8, asr #21
   13abc:	andeq	r3, r1, r8, asr #21
   13ac0:	andeq	r3, r1, r8, asr #21
   13ac4:	andeq	r4, r1, r8, lsr #6
   13ac8:	nop	{0}
   13acc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ad0:	add	r3, r3, #1
   13ad4:	str	r3, [fp, #-56]	; 0xffffffc8
   13ad8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13adc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13ae0:	cmp	r2, r3
   13ae4:	bcc	13a10 <__assert_fail@plt+0x27e8>
   13ae8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13aec:	mov	r0, r3
   13af0:	bl	10ff4 <iswprint@plt>
   13af4:	mov	r3, r0
   13af8:	cmp	r3, #0
   13afc:	bne	13b08 <__assert_fail@plt+0x28e0>
   13b00:	mov	r3, #0
   13b04:	strb	r3, [fp, #-49]	; 0xffffffcf
   13b08:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13b0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13b10:	add	r3, r2, r3
   13b14:	str	r3, [fp, #-48]	; 0xffffffd0
   13b18:	sub	r3, fp, #76	; 0x4c
   13b1c:	mov	r0, r3
   13b20:	bl	10fac <mbsinit@plt>
   13b24:	mov	r3, r0
   13b28:	cmp	r3, #0
   13b2c:	beq	13930 <__assert_fail@plt+0x2708>
   13b30:	b	13b40 <__assert_fail@plt+0x2918>
   13b34:	nop	{0}
   13b38:	b	13b40 <__assert_fail@plt+0x2918>
   13b3c:	nop	{0}
   13b40:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13b44:	strb	r3, [fp, #-42]	; 0xffffffd6
   13b48:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b4c:	cmp	r3, #1
   13b50:	bhi	13b74 <__assert_fail@plt+0x294c>
   13b54:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13b58:	cmp	r3, #0
   13b5c:	beq	13eac <__assert_fail@plt+0x2c84>
   13b60:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13b64:	eor	r3, r3, #1
   13b68:	uxtb	r3, r3
   13b6c:	cmp	r3, #0
   13b70:	beq	13eac <__assert_fail@plt+0x2c84>
   13b74:	ldr	r2, [fp, #-16]
   13b78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b7c:	add	r3, r2, r3
   13b80:	str	r3, [fp, #-68]	; 0xffffffbc
   13b84:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13b88:	cmp	r3, #0
   13b8c:	beq	13d40 <__assert_fail@plt+0x2b18>
   13b90:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13b94:	eor	r3, r3, #1
   13b98:	uxtb	r3, r3
   13b9c:	cmp	r3, #0
   13ba0:	beq	13d40 <__assert_fail@plt+0x2b18>
   13ba4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ba8:	cmp	r3, #0
   13bac:	bne	14314 <__assert_fail@plt+0x30ec>
   13bb0:	mov	r3, #1
   13bb4:	strb	r3, [fp, #-41]	; 0xffffffd7
   13bb8:	ldr	r3, [fp, #4]
   13bbc:	cmp	r3, #2
   13bc0:	bne	13c70 <__assert_fail@plt+0x2a48>
   13bc4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13bc8:	eor	r3, r3, #1
   13bcc:	uxtb	r3, r3
   13bd0:	cmp	r3, #0
   13bd4:	beq	13c70 <__assert_fail@plt+0x2a48>
   13bd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bdc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13be0:	cmp	r2, r3
   13be4:	bcs	13bfc <__assert_fail@plt+0x29d4>
   13be8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bf0:	add	r3, r2, r3
   13bf4:	mov	r2, #39	; 0x27
   13bf8:	strb	r2, [r3]
   13bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c00:	add	r3, r3, #1
   13c04:	str	r3, [fp, #-20]	; 0xffffffec
   13c08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c10:	cmp	r2, r3
   13c14:	bcs	13c2c <__assert_fail@plt+0x2a04>
   13c18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c20:	add	r3, r2, r3
   13c24:	mov	r2, #36	; 0x24
   13c28:	strb	r2, [r3]
   13c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c30:	add	r3, r3, #1
   13c34:	str	r3, [fp, #-20]	; 0xffffffec
   13c38:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c40:	cmp	r2, r3
   13c44:	bcs	13c5c <__assert_fail@plt+0x2a34>
   13c48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c50:	add	r3, r2, r3
   13c54:	mov	r2, #39	; 0x27
   13c58:	strb	r2, [r3]
   13c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c60:	add	r3, r3, #1
   13c64:	str	r3, [fp, #-20]	; 0xffffffec
   13c68:	mov	r3, #1
   13c6c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13c70:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c78:	cmp	r2, r3
   13c7c:	bcs	13c94 <__assert_fail@plt+0x2a6c>
   13c80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c88:	add	r3, r2, r3
   13c8c:	mov	r2, #92	; 0x5c
   13c90:	strb	r2, [r3]
   13c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c98:	add	r3, r3, #1
   13c9c:	str	r3, [fp, #-20]	; 0xffffffec
   13ca0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ca4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ca8:	cmp	r2, r3
   13cac:	bcs	13cd4 <__assert_fail@plt+0x2aac>
   13cb0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13cb4:	lsr	r3, r3, #6
   13cb8:	uxtb	r2, r3
   13cbc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc4:	add	r3, r1, r3
   13cc8:	add	r2, r2, #48	; 0x30
   13ccc:	uxtb	r2, r2
   13cd0:	strb	r2, [r3]
   13cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cd8:	add	r3, r3, #1
   13cdc:	str	r3, [fp, #-20]	; 0xffffffec
   13ce0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ce4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ce8:	cmp	r2, r3
   13cec:	bcs	13d1c <__assert_fail@plt+0x2af4>
   13cf0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13cf4:	lsr	r3, r3, #3
   13cf8:	uxtb	r3, r3
   13cfc:	and	r3, r3, #7
   13d00:	uxtb	r2, r3
   13d04:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d0c:	add	r3, r1, r3
   13d10:	add	r2, r2, #48	; 0x30
   13d14:	uxtb	r2, r2
   13d18:	strb	r2, [r3]
   13d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d20:	add	r3, r3, #1
   13d24:	str	r3, [fp, #-20]	; 0xffffffec
   13d28:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d2c:	and	r3, r3, #7
   13d30:	uxtb	r3, r3
   13d34:	add	r3, r3, #48	; 0x30
   13d38:	strb	r3, [fp, #-38]	; 0xffffffda
   13d3c:	b	13d84 <__assert_fail@plt+0x2b5c>
   13d40:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13d44:	cmp	r3, #0
   13d48:	beq	13d84 <__assert_fail@plt+0x2b5c>
   13d4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d54:	cmp	r2, r3
   13d58:	bcs	13d70 <__assert_fail@plt+0x2b48>
   13d5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13d60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d64:	add	r3, r2, r3
   13d68:	mov	r2, #92	; 0x5c
   13d6c:	strb	r2, [r3]
   13d70:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d74:	add	r3, r3, #1
   13d78:	str	r3, [fp, #-20]	; 0xffffffec
   13d7c:	mov	r3, #0
   13d80:	strb	r3, [fp, #-40]	; 0xffffffd8
   13d84:	ldr	r3, [fp, #-16]
   13d88:	add	r3, r3, #1
   13d8c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13d90:	cmp	r2, r3
   13d94:	bls	13e74 <__assert_fail@plt+0x2c4c>
   13d98:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13d9c:	cmp	r3, #0
   13da0:	beq	13e20 <__assert_fail@plt+0x2bf8>
   13da4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13da8:	eor	r3, r3, #1
   13dac:	uxtb	r3, r3
   13db0:	cmp	r3, #0
   13db4:	beq	13e20 <__assert_fail@plt+0x2bf8>
   13db8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13dc0:	cmp	r2, r3
   13dc4:	bcs	13ddc <__assert_fail@plt+0x2bb4>
   13dc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dd0:	add	r3, r2, r3
   13dd4:	mov	r2, #39	; 0x27
   13dd8:	strb	r2, [r3]
   13ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13de0:	add	r3, r3, #1
   13de4:	str	r3, [fp, #-20]	; 0xffffffec
   13de8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13df0:	cmp	r2, r3
   13df4:	bcs	13e0c <__assert_fail@plt+0x2be4>
   13df8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e00:	add	r3, r2, r3
   13e04:	mov	r2, #39	; 0x27
   13e08:	strb	r2, [r3]
   13e0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e10:	add	r3, r3, #1
   13e14:	str	r3, [fp, #-20]	; 0xffffffec
   13e18:	mov	r3, #0
   13e1c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13e20:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e28:	cmp	r2, r3
   13e2c:	bcs	13e44 <__assert_fail@plt+0x2c1c>
   13e30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e38:	add	r3, r2, r3
   13e3c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13e40:	strb	r2, [r3]
   13e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e48:	add	r3, r3, #1
   13e4c:	str	r3, [fp, #-20]	; 0xffffffec
   13e50:	ldr	r3, [fp, #-16]
   13e54:	add	r3, r3, #1
   13e58:	str	r3, [fp, #-16]
   13e5c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e60:	ldr	r3, [fp, #-16]
   13e64:	add	r3, r2, r3
   13e68:	ldrb	r3, [r3]
   13e6c:	strb	r3, [fp, #-38]	; 0xffffffda
   13e70:	b	13b84 <__assert_fail@plt+0x295c>
   13e74:	nop	{0}
   13e78:	b	14050 <__assert_fail@plt+0x2e28>
   13e7c:	nop	{0}
   13e80:	b	13eb0 <__assert_fail@plt+0x2c88>
   13e84:	nop	{0}
   13e88:	b	13eb0 <__assert_fail@plt+0x2c88>
   13e8c:	nop	{0}
   13e90:	b	13eb0 <__assert_fail@plt+0x2c88>
   13e94:	nop	{0}
   13e98:	b	13eb0 <__assert_fail@plt+0x2c88>
   13e9c:	nop	{0}
   13ea0:	b	13eb0 <__assert_fail@plt+0x2c88>
   13ea4:	nop	{0}
   13ea8:	b	13eb0 <__assert_fail@plt+0x2c88>
   13eac:	nop	{0}
   13eb0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13eb4:	eor	r3, r3, #1
   13eb8:	uxtb	r3, r3
   13ebc:	cmp	r3, #0
   13ec0:	bne	13ed0 <__assert_fail@plt+0x2ca8>
   13ec4:	ldr	r3, [fp, #4]
   13ec8:	cmp	r3, #2
   13ecc:	bne	13ee4 <__assert_fail@plt+0x2cbc>
   13ed0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ed4:	eor	r3, r3, #1
   13ed8:	uxtb	r3, r3
   13edc:	cmp	r3, #0
   13ee0:	bne	13f24 <__assert_fail@plt+0x2cfc>
   13ee4:	ldr	r3, [fp, #12]
   13ee8:	cmp	r3, #0
   13eec:	beq	13f24 <__assert_fail@plt+0x2cfc>
   13ef0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ef4:	lsr	r3, r3, #5
   13ef8:	uxtb	r3, r3
   13efc:	lsl	r3, r3, #2
   13f00:	ldr	r2, [fp, #12]
   13f04:	add	r3, r2, r3
   13f08:	ldr	r2, [r3]
   13f0c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13f10:	and	r3, r3, #31
   13f14:	lsr	r3, r2, r3
   13f18:	and	r3, r3, #1
   13f1c:	cmp	r3, #0
   13f20:	bne	13f38 <__assert_fail@plt+0x2d10>
   13f24:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13f28:	eor	r3, r3, #1
   13f2c:	uxtb	r3, r3
   13f30:	cmp	r3, #0
   13f34:	bne	1404c <__assert_fail@plt+0x2e24>
   13f38:	nop	{0}
   13f3c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f40:	cmp	r3, #0
   13f44:	bne	1431c <__assert_fail@plt+0x30f4>
   13f48:	mov	r3, #1
   13f4c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13f50:	ldr	r3, [fp, #4]
   13f54:	cmp	r3, #2
   13f58:	bne	14008 <__assert_fail@plt+0x2de0>
   13f5c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13f60:	eor	r3, r3, #1
   13f64:	uxtb	r3, r3
   13f68:	cmp	r3, #0
   13f6c:	beq	14008 <__assert_fail@plt+0x2de0>
   13f70:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f78:	cmp	r2, r3
   13f7c:	bcs	13f94 <__assert_fail@plt+0x2d6c>
   13f80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f88:	add	r3, r2, r3
   13f8c:	mov	r2, #39	; 0x27
   13f90:	strb	r2, [r3]
   13f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f98:	add	r3, r3, #1
   13f9c:	str	r3, [fp, #-20]	; 0xffffffec
   13fa0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fa4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fa8:	cmp	r2, r3
   13fac:	bcs	13fc4 <__assert_fail@plt+0x2d9c>
   13fb0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fb8:	add	r3, r2, r3
   13fbc:	mov	r2, #36	; 0x24
   13fc0:	strb	r2, [r3]
   13fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc8:	add	r3, r3, #1
   13fcc:	str	r3, [fp, #-20]	; 0xffffffec
   13fd0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fd4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fd8:	cmp	r2, r3
   13fdc:	bcs	13ff4 <__assert_fail@plt+0x2dcc>
   13fe0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fe8:	add	r3, r2, r3
   13fec:	mov	r2, #39	; 0x27
   13ff0:	strb	r2, [r3]
   13ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ff8:	add	r3, r3, #1
   13ffc:	str	r3, [fp, #-20]	; 0xffffffec
   14000:	mov	r3, #1
   14004:	strb	r3, [fp, #-35]	; 0xffffffdd
   14008:	ldr	r2, [fp, #-20]	; 0xffffffec
   1400c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14010:	cmp	r2, r3
   14014:	bcs	1402c <__assert_fail@plt+0x2e04>
   14018:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1401c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14020:	add	r3, r2, r3
   14024:	mov	r2, #92	; 0x5c
   14028:	strb	r2, [r3]
   1402c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14030:	add	r3, r3, #1
   14034:	str	r3, [fp, #-20]	; 0xffffffec
   14038:	b	14050 <__assert_fail@plt+0x2e28>
   1403c:	nop	{0}
   14040:	b	14050 <__assert_fail@plt+0x2e28>
   14044:	nop	{0}
   14048:	b	14050 <__assert_fail@plt+0x2e28>
   1404c:	nop	{0}
   14050:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14054:	cmp	r3, #0
   14058:	beq	140d8 <__assert_fail@plt+0x2eb0>
   1405c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14060:	eor	r3, r3, #1
   14064:	uxtb	r3, r3
   14068:	cmp	r3, #0
   1406c:	beq	140d8 <__assert_fail@plt+0x2eb0>
   14070:	ldr	r2, [fp, #-20]	; 0xffffffec
   14074:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14078:	cmp	r2, r3
   1407c:	bcs	14094 <__assert_fail@plt+0x2e6c>
   14080:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14084:	ldr	r3, [fp, #-20]	; 0xffffffec
   14088:	add	r3, r2, r3
   1408c:	mov	r2, #39	; 0x27
   14090:	strb	r2, [r3]
   14094:	ldr	r3, [fp, #-20]	; 0xffffffec
   14098:	add	r3, r3, #1
   1409c:	str	r3, [fp, #-20]	; 0xffffffec
   140a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   140a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140a8:	cmp	r2, r3
   140ac:	bcs	140c4 <__assert_fail@plt+0x2e9c>
   140b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140b8:	add	r3, r2, r3
   140bc:	mov	r2, #39	; 0x27
   140c0:	strb	r2, [r3]
   140c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140c8:	add	r3, r3, #1
   140cc:	str	r3, [fp, #-20]	; 0xffffffec
   140d0:	mov	r3, #0
   140d4:	strb	r3, [fp, #-35]	; 0xffffffdd
   140d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   140dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140e0:	cmp	r2, r3
   140e4:	bcs	140fc <__assert_fail@plt+0x2ed4>
   140e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   140f0:	add	r3, r2, r3
   140f4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   140f8:	strb	r2, [r3]
   140fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14100:	add	r3, r3, #1
   14104:	str	r3, [fp, #-20]	; 0xffffffec
   14108:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1410c:	eor	r3, r3, #1
   14110:	uxtb	r3, r3
   14114:	cmp	r3, #0
   14118:	beq	14124 <__assert_fail@plt+0x2efc>
   1411c:	mov	r3, #0
   14120:	strb	r3, [fp, #-37]	; 0xffffffdb
   14124:	ldr	r3, [fp, #-16]
   14128:	add	r3, r3, #1
   1412c:	str	r3, [fp, #-16]
   14130:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14134:	cmn	r3, #1
   14138:	bne	14160 <__assert_fail@plt+0x2f38>
   1413c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14140:	ldr	r3, [fp, #-16]
   14144:	add	r3, r2, r3
   14148:	ldrb	r3, [r3]
   1414c:	cmp	r3, #0
   14150:	movne	r3, #1
   14154:	moveq	r3, #0
   14158:	uxtb	r3, r3
   1415c:	b	14178 <__assert_fail@plt+0x2f50>
   14160:	ldr	r2, [fp, #-16]
   14164:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14168:	cmp	r2, r3
   1416c:	movne	r3, #1
   14170:	moveq	r3, #0
   14174:	uxtb	r3, r3
   14178:	cmp	r3, #0
   1417c:	bne	12f98 <__assert_fail@plt+0x1d70>
   14180:	ldr	r3, [fp, #-20]	; 0xffffffec
   14184:	cmp	r3, #0
   14188:	bne	141a4 <__assert_fail@plt+0x2f7c>
   1418c:	ldr	r3, [fp, #4]
   14190:	cmp	r3, #2
   14194:	bne	141a4 <__assert_fail@plt+0x2f7c>
   14198:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1419c:	cmp	r3, #0
   141a0:	bne	14324 <__assert_fail@plt+0x30fc>
   141a4:	ldr	r3, [fp, #4]
   141a8:	cmp	r3, #2
   141ac:	bne	1424c <__assert_fail@plt+0x3024>
   141b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   141b4:	eor	r3, r3, #1
   141b8:	uxtb	r3, r3
   141bc:	cmp	r3, #0
   141c0:	beq	1424c <__assert_fail@plt+0x3024>
   141c4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   141c8:	cmp	r3, #0
   141cc:	beq	1424c <__assert_fail@plt+0x3024>
   141d0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   141d4:	cmp	r3, #0
   141d8:	beq	14220 <__assert_fail@plt+0x2ff8>
   141dc:	ldr	r3, [fp, #20]
   141e0:	str	r3, [sp, #16]
   141e4:	ldr	r3, [fp, #16]
   141e8:	str	r3, [sp, #12]
   141ec:	ldr	r3, [fp, #12]
   141f0:	str	r3, [sp, #8]
   141f4:	ldr	r3, [fp, #8]
   141f8:	str	r3, [sp, #4]
   141fc:	mov	r3, #5
   14200:	str	r3, [sp]
   14204:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14208:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1420c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14210:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14214:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   14218:	mov	r3, r0
   1421c:	b	1438c <__assert_fail@plt+0x3164>
   14220:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14224:	cmp	r3, #0
   14228:	bne	1424c <__assert_fail@plt+0x3024>
   1422c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14230:	cmp	r3, #0
   14234:	beq	1424c <__assert_fail@plt+0x3024>
   14238:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1423c:	str	r3, [fp, #-92]	; 0xffffffa4
   14240:	mov	r3, #0
   14244:	str	r3, [fp, #-20]	; 0xffffffec
   14248:	b	12d64 <__assert_fail@plt+0x1b3c>
   1424c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14250:	cmp	r3, #0
   14254:	beq	142c0 <__assert_fail@plt+0x3098>
   14258:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1425c:	eor	r3, r3, #1
   14260:	uxtb	r3, r3
   14264:	cmp	r3, #0
   14268:	beq	142c0 <__assert_fail@plt+0x3098>
   1426c:	b	142b0 <__assert_fail@plt+0x3088>
   14270:	ldr	r2, [fp, #-20]	; 0xffffffec
   14274:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14278:	cmp	r2, r3
   1427c:	bcs	14298 <__assert_fail@plt+0x3070>
   14280:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14284:	ldr	r3, [fp, #-20]	; 0xffffffec
   14288:	add	r3, r2, r3
   1428c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14290:	ldrb	r2, [r2]
   14294:	strb	r2, [r3]
   14298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1429c:	add	r3, r3, #1
   142a0:	str	r3, [fp, #-20]	; 0xffffffec
   142a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   142a8:	add	r3, r3, #1
   142ac:	str	r3, [fp, #-28]	; 0xffffffe4
   142b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   142b4:	ldrb	r3, [r3]
   142b8:	cmp	r3, #0
   142bc:	bne	14270 <__assert_fail@plt+0x3048>
   142c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142c8:	cmp	r2, r3
   142cc:	bcs	142e4 <__assert_fail@plt+0x30bc>
   142d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142d8:	add	r3, r2, r3
   142dc:	mov	r2, #0
   142e0:	strb	r2, [r3]
   142e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e8:	b	1438c <__assert_fail@plt+0x3164>
   142ec:	nop	{0}
   142f0:	b	14328 <__assert_fail@plt+0x3100>
   142f4:	nop	{0}
   142f8:	b	14328 <__assert_fail@plt+0x3100>
   142fc:	nop	{0}
   14300:	b	14328 <__assert_fail@plt+0x3100>
   14304:	nop	{0}
   14308:	b	14328 <__assert_fail@plt+0x3100>
   1430c:	nop	{0}
   14310:	b	14328 <__assert_fail@plt+0x3100>
   14314:	nop	{0}
   14318:	b	14328 <__assert_fail@plt+0x3100>
   1431c:	nop	{0}
   14320:	b	14328 <__assert_fail@plt+0x3100>
   14324:	nop	{0}
   14328:	ldr	r3, [fp, #4]
   1432c:	cmp	r3, #2
   14330:	bne	14348 <__assert_fail@plt+0x3120>
   14334:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14338:	cmp	r3, #0
   1433c:	beq	14348 <__assert_fail@plt+0x3120>
   14340:	mov	r3, #4
   14344:	str	r3, [fp, #4]
   14348:	ldr	r3, [fp, #8]
   1434c:	bic	r3, r3, #2
   14350:	ldr	r2, [fp, #20]
   14354:	str	r2, [sp, #16]
   14358:	ldr	r2, [fp, #16]
   1435c:	str	r2, [sp, #12]
   14360:	mov	r2, #0
   14364:	str	r2, [sp, #8]
   14368:	str	r3, [sp, #4]
   1436c:	ldr	r3, [fp, #4]
   14370:	str	r3, [sp]
   14374:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14378:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1437c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14380:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14384:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   14388:	mov	r3, r0
   1438c:	mov	r0, r3
   14390:	sub	sp, fp, #8
   14394:	ldr	r4, [sp]
   14398:	ldr	fp, [sp, #4]
   1439c:	add	sp, sp, #8
   143a0:	pop	{pc}		; (ldr pc, [sp], #4)
   143a4:	str	fp, [sp, #-8]!
   143a8:	str	lr, [sp, #4]
   143ac:	add	fp, sp, #4
   143b0:	sub	sp, sp, #56	; 0x38
   143b4:	str	r0, [fp, #-24]	; 0xffffffe8
   143b8:	str	r1, [fp, #-28]	; 0xffffffe4
   143bc:	str	r2, [fp, #-32]	; 0xffffffe0
   143c0:	str	r3, [fp, #-36]	; 0xffffffdc
   143c4:	ldr	r3, [fp, #4]
   143c8:	cmp	r3, #0
   143cc:	beq	143d8 <__assert_fail@plt+0x31b0>
   143d0:	ldr	r3, [fp, #4]
   143d4:	b	143e0 <__assert_fail@plt+0x31b8>
   143d8:	movw	r3, #41380	; 0xa1a4
   143dc:	movt	r3, #2
   143e0:	str	r3, [fp, #-8]
   143e4:	bl	11114 <__errno_location@plt>
   143e8:	mov	r3, r0
   143ec:	ldr	r3, [r3]
   143f0:	str	r3, [fp, #-12]
   143f4:	ldr	r3, [fp, #-8]
   143f8:	ldr	r3, [r3]
   143fc:	ldr	r2, [fp, #-8]
   14400:	ldr	r2, [r2, #4]
   14404:	ldr	r1, [fp, #-8]
   14408:	add	r1, r1, #8
   1440c:	ldr	r0, [fp, #-8]
   14410:	ldr	r0, [r0, #40]	; 0x28
   14414:	ldr	ip, [fp, #-8]
   14418:	ldr	ip, [ip, #44]	; 0x2c
   1441c:	str	ip, [sp, #16]
   14420:	str	r0, [sp, #12]
   14424:	str	r1, [sp, #8]
   14428:	str	r2, [sp, #4]
   1442c:	str	r3, [sp]
   14430:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14434:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14438:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1443c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14440:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   14444:	str	r0, [fp, #-16]
   14448:	bl	11114 <__errno_location@plt>
   1444c:	mov	r2, r0
   14450:	ldr	r3, [fp, #-12]
   14454:	str	r3, [r2]
   14458:	ldr	r3, [fp, #-16]
   1445c:	mov	r0, r3
   14460:	sub	sp, fp, #4
   14464:	ldr	fp, [sp]
   14468:	add	sp, sp, #4
   1446c:	pop	{pc}		; (ldr pc, [sp], #4)
   14470:	str	fp, [sp, #-8]!
   14474:	str	lr, [sp, #4]
   14478:	add	fp, sp, #4
   1447c:	sub	sp, sp, #16
   14480:	str	r0, [fp, #-8]
   14484:	str	r1, [fp, #-12]
   14488:	str	r2, [fp, #-16]
   1448c:	ldr	r3, [fp, #-16]
   14490:	mov	r2, #0
   14494:	ldr	r1, [fp, #-12]
   14498:	ldr	r0, [fp, #-8]
   1449c:	bl	144b8 <__assert_fail@plt+0x3290>
   144a0:	mov	r3, r0
   144a4:	mov	r0, r3
   144a8:	sub	sp, fp, #4
   144ac:	ldr	fp, [sp]
   144b0:	add	sp, sp, #4
   144b4:	pop	{pc}		; (ldr pc, [sp], #4)
   144b8:	str	fp, [sp, #-8]!
   144bc:	str	lr, [sp, #4]
   144c0:	add	fp, sp, #4
   144c4:	sub	sp, sp, #64	; 0x40
   144c8:	str	r0, [fp, #-32]	; 0xffffffe0
   144cc:	str	r1, [fp, #-36]	; 0xffffffdc
   144d0:	str	r2, [fp, #-40]	; 0xffffffd8
   144d4:	str	r3, [fp, #-44]	; 0xffffffd4
   144d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   144dc:	cmp	r3, #0
   144e0:	beq	144ec <__assert_fail@plt+0x32c4>
   144e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   144e8:	b	144f4 <__assert_fail@plt+0x32cc>
   144ec:	movw	r3, #41380	; 0xa1a4
   144f0:	movt	r3, #2
   144f4:	str	r3, [fp, #-8]
   144f8:	bl	11114 <__errno_location@plt>
   144fc:	mov	r3, r0
   14500:	ldr	r3, [r3]
   14504:	str	r3, [fp, #-12]
   14508:	ldr	r3, [fp, #-8]
   1450c:	ldr	r3, [r3, #4]
   14510:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14514:	cmp	r2, #0
   14518:	moveq	r2, #1
   1451c:	movne	r2, #0
   14520:	uxtb	r2, r2
   14524:	orr	r3, r3, r2
   14528:	str	r3, [fp, #-16]
   1452c:	ldr	r3, [fp, #-8]
   14530:	ldr	r3, [r3]
   14534:	ldr	r2, [fp, #-8]
   14538:	add	r2, r2, #8
   1453c:	ldr	r1, [fp, #-8]
   14540:	ldr	r1, [r1, #40]	; 0x28
   14544:	ldr	r0, [fp, #-8]
   14548:	ldr	r0, [r0, #44]	; 0x2c
   1454c:	str	r0, [sp, #16]
   14550:	str	r1, [sp, #12]
   14554:	str	r2, [sp, #8]
   14558:	ldr	r2, [fp, #-16]
   1455c:	str	r2, [sp, #4]
   14560:	str	r3, [sp]
   14564:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14568:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1456c:	mov	r1, #0
   14570:	mov	r0, #0
   14574:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   14578:	mov	r3, r0
   1457c:	add	r3, r3, #1
   14580:	str	r3, [fp, #-20]	; 0xffffffec
   14584:	ldr	r0, [fp, #-20]	; 0xffffffec
   14588:	bl	15f00 <__assert_fail@plt+0x4cd8>
   1458c:	mov	r3, r0
   14590:	str	r3, [fp, #-24]	; 0xffffffe8
   14594:	ldr	r3, [fp, #-8]
   14598:	ldr	r3, [r3]
   1459c:	ldr	r2, [fp, #-8]
   145a0:	add	r2, r2, #8
   145a4:	ldr	r1, [fp, #-8]
   145a8:	ldr	r1, [r1, #40]	; 0x28
   145ac:	ldr	r0, [fp, #-8]
   145b0:	ldr	r0, [r0, #44]	; 0x2c
   145b4:	str	r0, [sp, #16]
   145b8:	str	r1, [sp, #12]
   145bc:	str	r2, [sp, #8]
   145c0:	ldr	r2, [fp, #-16]
   145c4:	str	r2, [sp, #4]
   145c8:	str	r3, [sp]
   145cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   145d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   145d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145dc:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   145e0:	bl	11114 <__errno_location@plt>
   145e4:	mov	r2, r0
   145e8:	ldr	r3, [fp, #-12]
   145ec:	str	r3, [r2]
   145f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   145f4:	cmp	r3, #0
   145f8:	beq	1460c <__assert_fail@plt+0x33e4>
   145fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14600:	sub	r2, r3, #1
   14604:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14608:	str	r2, [r3]
   1460c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14610:	mov	r0, r3
   14614:	sub	sp, fp, #4
   14618:	ldr	fp, [sp]
   1461c:	add	sp, sp, #4
   14620:	pop	{pc}		; (ldr pc, [sp], #4)
   14624:	str	fp, [sp, #-8]!
   14628:	str	lr, [sp, #4]
   1462c:	add	fp, sp, #4
   14630:	sub	sp, sp, #8
   14634:	movw	r3, #41272	; 0xa138
   14638:	movt	r3, #2
   1463c:	ldr	r3, [r3]
   14640:	str	r3, [fp, #-12]
   14644:	mov	r3, #1
   14648:	str	r3, [fp, #-8]
   1464c:	b	14678 <__assert_fail@plt+0x3450>
   14650:	ldr	r3, [fp, #-8]
   14654:	lsl	r3, r3, #3
   14658:	ldr	r2, [fp, #-12]
   1465c:	add	r3, r2, r3
   14660:	ldr	r3, [r3, #4]
   14664:	mov	r0, r3
   14668:	bl	126bc <__assert_fail@plt+0x1494>
   1466c:	ldr	r3, [fp, #-8]
   14670:	add	r3, r3, #1
   14674:	str	r3, [fp, #-8]
   14678:	movw	r3, #41260	; 0xa12c
   1467c:	movt	r3, #2
   14680:	ldr	r3, [r3]
   14684:	ldr	r2, [fp, #-8]
   14688:	cmp	r2, r3
   1468c:	blt	14650 <__assert_fail@plt+0x3428>
   14690:	ldr	r3, [fp, #-12]
   14694:	ldr	r2, [r3, #4]
   14698:	movw	r3, #41428	; 0xa1d4
   1469c:	movt	r3, #2
   146a0:	cmp	r2, r3
   146a4:	beq	146dc <__assert_fail@plt+0x34b4>
   146a8:	ldr	r3, [fp, #-12]
   146ac:	ldr	r3, [r3, #4]
   146b0:	mov	r0, r3
   146b4:	bl	126bc <__assert_fail@plt+0x1494>
   146b8:	movw	r3, #41264	; 0xa130
   146bc:	movt	r3, #2
   146c0:	mov	r2, #256	; 0x100
   146c4:	str	r2, [r3]
   146c8:	movw	r3, #41264	; 0xa130
   146cc:	movt	r3, #2
   146d0:	movw	r2, #41428	; 0xa1d4
   146d4:	movt	r2, #2
   146d8:	str	r2, [r3, #4]
   146dc:	ldr	r2, [fp, #-12]
   146e0:	movw	r3, #41264	; 0xa130
   146e4:	movt	r3, #2
   146e8:	cmp	r2, r3
   146ec:	beq	1470c <__assert_fail@plt+0x34e4>
   146f0:	ldr	r0, [fp, #-12]
   146f4:	bl	126bc <__assert_fail@plt+0x1494>
   146f8:	movw	r3, #41272	; 0xa138
   146fc:	movt	r3, #2
   14700:	movw	r2, #41264	; 0xa130
   14704:	movt	r2, #2
   14708:	str	r2, [r3]
   1470c:	movw	r3, #41260	; 0xa12c
   14710:	movt	r3, #2
   14714:	mov	r2, #1
   14718:	str	r2, [r3]
   1471c:	nop	{0}
   14720:	sub	sp, fp, #4
   14724:	ldr	fp, [sp]
   14728:	add	sp, sp, #4
   1472c:	pop	{pc}		; (ldr pc, [sp], #4)
   14730:	str	fp, [sp, #-8]!
   14734:	str	lr, [sp, #4]
   14738:	add	fp, sp, #4
   1473c:	sub	sp, sp, #80	; 0x50
   14740:	str	r0, [fp, #-48]	; 0xffffffd0
   14744:	str	r1, [fp, #-52]	; 0xffffffcc
   14748:	str	r2, [fp, #-56]	; 0xffffffc8
   1474c:	str	r3, [fp, #-60]	; 0xffffffc4
   14750:	bl	11114 <__errno_location@plt>
   14754:	mov	r3, r0
   14758:	ldr	r3, [r3]
   1475c:	str	r3, [fp, #-16]
   14760:	movw	r3, #41272	; 0xa138
   14764:	movt	r3, #2
   14768:	ldr	r3, [r3]
   1476c:	str	r3, [fp, #-8]
   14770:	mvn	r3, #-2147483648	; 0x80000000
   14774:	str	r3, [fp, #-20]	; 0xffffffec
   14778:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1477c:	cmp	r3, #0
   14780:	blt	14794 <__assert_fail@plt+0x356c>
   14784:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1478c:	cmp	r2, r3
   14790:	blt	14798 <__assert_fail@plt+0x3570>
   14794:	bl	11204 <abort@plt>
   14798:	movw	r3, #41260	; 0xa12c
   1479c:	movt	r3, #2
   147a0:	ldr	r3, [r3]
   147a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   147a8:	cmp	r2, r3
   147ac:	blt	148a4 <__assert_fail@plt+0x367c>
   147b0:	ldr	r2, [fp, #-8]
   147b4:	movw	r3, #41264	; 0xa130
   147b8:	movt	r3, #2
   147bc:	cmp	r2, r3
   147c0:	moveq	r3, #1
   147c4:	movne	r3, #0
   147c8:	strb	r3, [fp, #-21]	; 0xffffffeb
   147cc:	movw	r3, #41260	; 0xa12c
   147d0:	movt	r3, #2
   147d4:	ldr	r3, [r3]
   147d8:	str	r3, [fp, #-40]	; 0xffffffd8
   147dc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   147e0:	cmp	r3, #0
   147e4:	beq	147f0 <__assert_fail@plt+0x35c8>
   147e8:	mov	r0, #0
   147ec:	b	147f4 <__assert_fail@plt+0x35cc>
   147f0:	ldr	r0, [fp, #-8]
   147f4:	movw	r3, #41260	; 0xa12c
   147f8:	movt	r3, #2
   147fc:	ldr	r3, [r3]
   14800:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14804:	sub	r3, r2, r3
   14808:	add	r2, r3, #1
   1480c:	sub	r1, fp, #40	; 0x28
   14810:	mov	r3, #8
   14814:	str	r3, [sp]
   14818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1481c:	bl	16260 <__assert_fail@plt+0x5038>
   14820:	str	r0, [fp, #-8]
   14824:	movw	r3, #41272	; 0xa138
   14828:	movt	r3, #2
   1482c:	ldr	r2, [fp, #-8]
   14830:	str	r2, [r3]
   14834:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14838:	cmp	r3, #0
   1483c:	beq	14858 <__assert_fail@plt+0x3630>
   14840:	ldr	r2, [fp, #-8]
   14844:	movw	r3, #41264	; 0xa130
   14848:	movt	r3, #2
   1484c:	mov	r1, r2
   14850:	ldrd	r2, [r3]
   14854:	strd	r2, [r1]
   14858:	movw	r3, #41260	; 0xa12c
   1485c:	movt	r3, #2
   14860:	ldr	r3, [r3]
   14864:	lsl	r3, r3, #3
   14868:	ldr	r2, [fp, #-8]
   1486c:	add	r0, r2, r3
   14870:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14874:	movw	r3, #41260	; 0xa12c
   14878:	movt	r3, #2
   1487c:	ldr	r3, [r3]
   14880:	sub	r3, r2, r3
   14884:	lsl	r3, r3, #3
   14888:	mov	r2, r3
   1488c:	mov	r1, #0
   14890:	bl	11138 <memset@plt>
   14894:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14898:	movw	r3, #41260	; 0xa12c
   1489c:	movt	r3, #2
   148a0:	str	r2, [r3]
   148a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148a8:	lsl	r3, r3, #3
   148ac:	ldr	r2, [fp, #-8]
   148b0:	add	r3, r2, r3
   148b4:	ldr	r3, [r3]
   148b8:	str	r3, [fp, #-28]	; 0xffffffe4
   148bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148c0:	lsl	r3, r3, #3
   148c4:	ldr	r2, [fp, #-8]
   148c8:	add	r3, r2, r3
   148cc:	ldr	r3, [r3, #4]
   148d0:	str	r3, [fp, #-12]
   148d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   148d8:	ldr	r3, [r3, #4]
   148dc:	orr	r3, r3, #1
   148e0:	str	r3, [fp, #-32]	; 0xffffffe0
   148e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   148e8:	ldr	r3, [r3]
   148ec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   148f0:	add	r2, r2, #8
   148f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   148f8:	ldr	r1, [r1, #40]	; 0x28
   148fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14900:	ldr	r0, [r0, #44]	; 0x2c
   14904:	str	r0, [sp, #16]
   14908:	str	r1, [sp, #12]
   1490c:	str	r2, [sp, #8]
   14910:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14914:	str	r2, [sp, #4]
   14918:	str	r3, [sp]
   1491c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14920:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14924:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14928:	ldr	r0, [fp, #-12]
   1492c:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   14930:	str	r0, [fp, #-36]	; 0xffffffdc
   14934:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14938:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1493c:	cmp	r2, r3
   14940:	bhi	149f8 <__assert_fail@plt+0x37d0>
   14944:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14948:	add	r3, r3, #1
   1494c:	str	r3, [fp, #-28]	; 0xffffffe4
   14950:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14954:	lsl	r3, r3, #3
   14958:	ldr	r2, [fp, #-8]
   1495c:	add	r3, r2, r3
   14960:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14964:	str	r2, [r3]
   14968:	ldr	r2, [fp, #-12]
   1496c:	movw	r3, #41428	; 0xa1d4
   14970:	movt	r3, #2
   14974:	cmp	r2, r3
   14978:	beq	14984 <__assert_fail@plt+0x375c>
   1497c:	ldr	r0, [fp, #-12]
   14980:	bl	126bc <__assert_fail@plt+0x1494>
   14984:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14988:	bl	15f00 <__assert_fail@plt+0x4cd8>
   1498c:	mov	r3, r0
   14990:	str	r3, [fp, #-12]
   14994:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14998:	lsl	r3, r3, #3
   1499c:	ldr	r2, [fp, #-8]
   149a0:	add	r3, r2, r3
   149a4:	ldr	r2, [fp, #-12]
   149a8:	str	r2, [r3, #4]
   149ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   149b0:	ldr	r3, [r3]
   149b4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   149b8:	add	r2, r2, #8
   149bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   149c0:	ldr	r1, [r1, #40]	; 0x28
   149c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   149c8:	ldr	r0, [r0, #44]	; 0x2c
   149cc:	str	r0, [sp, #16]
   149d0:	str	r1, [sp, #12]
   149d4:	str	r2, [sp, #8]
   149d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   149dc:	str	r2, [sp, #4]
   149e0:	str	r3, [sp]
   149e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   149e8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   149ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   149f0:	ldr	r0, [fp, #-12]
   149f4:	bl	12cd0 <__assert_fail@plt+0x1aa8>
   149f8:	bl	11114 <__errno_location@plt>
   149fc:	mov	r2, r0
   14a00:	ldr	r3, [fp, #-16]
   14a04:	str	r3, [r2]
   14a08:	ldr	r3, [fp, #-12]
   14a0c:	mov	r0, r3
   14a10:	sub	sp, fp, #4
   14a14:	ldr	fp, [sp]
   14a18:	add	sp, sp, #4
   14a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a20:	str	fp, [sp, #-8]!
   14a24:	str	lr, [sp, #4]
   14a28:	add	fp, sp, #4
   14a2c:	sub	sp, sp, #8
   14a30:	str	r0, [fp, #-8]
   14a34:	str	r1, [fp, #-12]
   14a38:	movw	r3, #41380	; 0xa1a4
   14a3c:	movt	r3, #2
   14a40:	mvn	r2, #0
   14a44:	ldr	r1, [fp, #-12]
   14a48:	ldr	r0, [fp, #-8]
   14a4c:	bl	14730 <__assert_fail@plt+0x3508>
   14a50:	mov	r3, r0
   14a54:	mov	r0, r3
   14a58:	sub	sp, fp, #4
   14a5c:	ldr	fp, [sp]
   14a60:	add	sp, sp, #4
   14a64:	pop	{pc}		; (ldr pc, [sp], #4)
   14a68:	str	fp, [sp, #-8]!
   14a6c:	str	lr, [sp, #4]
   14a70:	add	fp, sp, #4
   14a74:	sub	sp, sp, #16
   14a78:	str	r0, [fp, #-8]
   14a7c:	str	r1, [fp, #-12]
   14a80:	str	r2, [fp, #-16]
   14a84:	movw	r3, #41380	; 0xa1a4
   14a88:	movt	r3, #2
   14a8c:	ldr	r2, [fp, #-16]
   14a90:	ldr	r1, [fp, #-12]
   14a94:	ldr	r0, [fp, #-8]
   14a98:	bl	14730 <__assert_fail@plt+0x3508>
   14a9c:	mov	r3, r0
   14aa0:	mov	r0, r3
   14aa4:	sub	sp, fp, #4
   14aa8:	ldr	fp, [sp]
   14aac:	add	sp, sp, #4
   14ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab4:	str	fp, [sp, #-8]!
   14ab8:	str	lr, [sp, #4]
   14abc:	add	fp, sp, #4
   14ac0:	sub	sp, sp, #8
   14ac4:	str	r0, [fp, #-8]
   14ac8:	ldr	r1, [fp, #-8]
   14acc:	mov	r0, #0
   14ad0:	bl	14a20 <__assert_fail@plt+0x37f8>
   14ad4:	mov	r3, r0
   14ad8:	mov	r0, r3
   14adc:	sub	sp, fp, #4
   14ae0:	ldr	fp, [sp]
   14ae4:	add	sp, sp, #4
   14ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   14aec:	str	fp, [sp, #-8]!
   14af0:	str	lr, [sp, #4]
   14af4:	add	fp, sp, #4
   14af8:	sub	sp, sp, #8
   14afc:	str	r0, [fp, #-8]
   14b00:	str	r1, [fp, #-12]
   14b04:	ldr	r2, [fp, #-12]
   14b08:	ldr	r1, [fp, #-8]
   14b0c:	mov	r0, #0
   14b10:	bl	14a68 <__assert_fail@plt+0x3840>
   14b14:	mov	r3, r0
   14b18:	mov	r0, r3
   14b1c:	sub	sp, fp, #4
   14b20:	ldr	fp, [sp]
   14b24:	add	sp, sp, #4
   14b28:	pop	{pc}		; (ldr pc, [sp], #4)
   14b2c:	str	fp, [sp, #-8]!
   14b30:	str	lr, [sp, #4]
   14b34:	add	fp, sp, #4
   14b38:	sub	sp, sp, #64	; 0x40
   14b3c:	str	r0, [fp, #-56]	; 0xffffffc8
   14b40:	str	r1, [fp, #-60]	; 0xffffffc4
   14b44:	str	r2, [fp, #-64]	; 0xffffffc0
   14b48:	sub	r3, fp, #52	; 0x34
   14b4c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14b50:	mov	r0, r3
   14b54:	bl	12b2c <__assert_fail@plt+0x1904>
   14b58:	sub	r3, fp, #52	; 0x34
   14b5c:	mvn	r2, #0
   14b60:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14b64:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14b68:	bl	14730 <__assert_fail@plt+0x3508>
   14b6c:	mov	r3, r0
   14b70:	mov	r0, r3
   14b74:	sub	sp, fp, #4
   14b78:	ldr	fp, [sp]
   14b7c:	add	sp, sp, #4
   14b80:	pop	{pc}		; (ldr pc, [sp], #4)
   14b84:	str	fp, [sp, #-8]!
   14b88:	str	lr, [sp, #4]
   14b8c:	add	fp, sp, #4
   14b90:	sub	sp, sp, #64	; 0x40
   14b94:	str	r0, [fp, #-56]	; 0xffffffc8
   14b98:	str	r1, [fp, #-60]	; 0xffffffc4
   14b9c:	str	r2, [fp, #-64]	; 0xffffffc0
   14ba0:	str	r3, [fp, #-68]	; 0xffffffbc
   14ba4:	sub	r3, fp, #52	; 0x34
   14ba8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14bac:	mov	r0, r3
   14bb0:	bl	12b2c <__assert_fail@plt+0x1904>
   14bb4:	sub	r3, fp, #52	; 0x34
   14bb8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14bbc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14bc0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14bc4:	bl	14730 <__assert_fail@plt+0x3508>
   14bc8:	mov	r3, r0
   14bcc:	mov	r0, r3
   14bd0:	sub	sp, fp, #4
   14bd4:	ldr	fp, [sp]
   14bd8:	add	sp, sp, #4
   14bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   14be0:	str	fp, [sp, #-8]!
   14be4:	str	lr, [sp, #4]
   14be8:	add	fp, sp, #4
   14bec:	sub	sp, sp, #8
   14bf0:	str	r0, [fp, #-8]
   14bf4:	str	r1, [fp, #-12]
   14bf8:	ldr	r2, [fp, #-12]
   14bfc:	ldr	r1, [fp, #-8]
   14c00:	mov	r0, #0
   14c04:	bl	14b2c <__assert_fail@plt+0x3904>
   14c08:	mov	r3, r0
   14c0c:	mov	r0, r3
   14c10:	sub	sp, fp, #4
   14c14:	ldr	fp, [sp]
   14c18:	add	sp, sp, #4
   14c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c20:	str	fp, [sp, #-8]!
   14c24:	str	lr, [sp, #4]
   14c28:	add	fp, sp, #4
   14c2c:	sub	sp, sp, #16
   14c30:	str	r0, [fp, #-8]
   14c34:	str	r1, [fp, #-12]
   14c38:	str	r2, [fp, #-16]
   14c3c:	ldr	r3, [fp, #-16]
   14c40:	ldr	r2, [fp, #-12]
   14c44:	ldr	r1, [fp, #-8]
   14c48:	mov	r0, #0
   14c4c:	bl	14b84 <__assert_fail@plt+0x395c>
   14c50:	mov	r3, r0
   14c54:	mov	r0, r3
   14c58:	sub	sp, fp, #4
   14c5c:	ldr	fp, [sp]
   14c60:	add	sp, sp, #4
   14c64:	pop	{pc}		; (ldr pc, [sp], #4)
   14c68:	str	fp, [sp, #-8]!
   14c6c:	str	lr, [sp, #4]
   14c70:	add	fp, sp, #4
   14c74:	sub	sp, sp, #64	; 0x40
   14c78:	str	r0, [fp, #-56]	; 0xffffffc8
   14c7c:	str	r1, [fp, #-60]	; 0xffffffc4
   14c80:	mov	r3, r2
   14c84:	strb	r3, [fp, #-61]	; 0xffffffc3
   14c88:	movw	r2, #41380	; 0xa1a4
   14c8c:	movt	r2, #2
   14c90:	sub	r3, fp, #52	; 0x34
   14c94:	ldrd	r0, [r2]
   14c98:	strd	r0, [r3]
   14c9c:	ldrd	r0, [r2, #8]
   14ca0:	strd	r0, [r3, #8]
   14ca4:	ldrd	r0, [r2, #16]
   14ca8:	strd	r0, [r3, #16]
   14cac:	ldrd	r0, [r2, #24]
   14cb0:	strd	r0, [r3, #24]
   14cb4:	ldrd	r0, [r2, #32]
   14cb8:	strd	r0, [r3, #32]
   14cbc:	ldrd	r0, [r2, #40]	; 0x28
   14cc0:	strd	r0, [r3, #40]	; 0x28
   14cc4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14cc8:	sub	r3, fp, #52	; 0x34
   14ccc:	mov	r2, #1
   14cd0:	mov	r0, r3
   14cd4:	bl	1298c <__assert_fail@plt+0x1764>
   14cd8:	sub	r3, fp, #52	; 0x34
   14cdc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14ce0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14ce4:	mov	r0, #0
   14ce8:	bl	14730 <__assert_fail@plt+0x3508>
   14cec:	mov	r3, r0
   14cf0:	mov	r0, r3
   14cf4:	sub	sp, fp, #4
   14cf8:	ldr	fp, [sp]
   14cfc:	add	sp, sp, #4
   14d00:	pop	{pc}		; (ldr pc, [sp], #4)
   14d04:	str	fp, [sp, #-8]!
   14d08:	str	lr, [sp, #4]
   14d0c:	add	fp, sp, #4
   14d10:	sub	sp, sp, #8
   14d14:	str	r0, [fp, #-8]
   14d18:	mov	r3, r1
   14d1c:	strb	r3, [fp, #-9]
   14d20:	ldrb	r3, [fp, #-9]
   14d24:	mov	r2, r3
   14d28:	mvn	r1, #0
   14d2c:	ldr	r0, [fp, #-8]
   14d30:	bl	14c68 <__assert_fail@plt+0x3a40>
   14d34:	mov	r3, r0
   14d38:	mov	r0, r3
   14d3c:	sub	sp, fp, #4
   14d40:	ldr	fp, [sp]
   14d44:	add	sp, sp, #4
   14d48:	pop	{pc}		; (ldr pc, [sp], #4)
   14d4c:	str	fp, [sp, #-8]!
   14d50:	str	lr, [sp, #4]
   14d54:	add	fp, sp, #4
   14d58:	sub	sp, sp, #8
   14d5c:	str	r0, [fp, #-8]
   14d60:	mov	r1, #58	; 0x3a
   14d64:	ldr	r0, [fp, #-8]
   14d68:	bl	14d04 <__assert_fail@plt+0x3adc>
   14d6c:	mov	r3, r0
   14d70:	mov	r0, r3
   14d74:	sub	sp, fp, #4
   14d78:	ldr	fp, [sp]
   14d7c:	add	sp, sp, #4
   14d80:	pop	{pc}		; (ldr pc, [sp], #4)
   14d84:	str	fp, [sp, #-8]!
   14d88:	str	lr, [sp, #4]
   14d8c:	add	fp, sp, #4
   14d90:	sub	sp, sp, #8
   14d94:	str	r0, [fp, #-8]
   14d98:	str	r1, [fp, #-12]
   14d9c:	mov	r2, #58	; 0x3a
   14da0:	ldr	r1, [fp, #-12]
   14da4:	ldr	r0, [fp, #-8]
   14da8:	bl	14c68 <__assert_fail@plt+0x3a40>
   14dac:	mov	r3, r0
   14db0:	mov	r0, r3
   14db4:	sub	sp, fp, #4
   14db8:	ldr	fp, [sp]
   14dbc:	add	sp, sp, #4
   14dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc4:	str	fp, [sp, #-8]!
   14dc8:	str	lr, [sp, #4]
   14dcc:	add	fp, sp, #4
   14dd0:	sub	sp, sp, #112	; 0x70
   14dd4:	str	r0, [fp, #-56]	; 0xffffffc8
   14dd8:	str	r1, [fp, #-60]	; 0xffffffc4
   14ddc:	str	r2, [fp, #-64]	; 0xffffffc0
   14de0:	sub	r3, fp, #116	; 0x74
   14de4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14de8:	mov	r0, r3
   14dec:	bl	12b2c <__assert_fail@plt+0x1904>
   14df0:	sub	r3, fp, #52	; 0x34
   14df4:	sub	r2, fp, #116	; 0x74
   14df8:	ldrd	r0, [r2]
   14dfc:	strd	r0, [r3]
   14e00:	ldrd	r0, [r2, #8]
   14e04:	strd	r0, [r3, #8]
   14e08:	ldrd	r0, [r2, #16]
   14e0c:	strd	r0, [r3, #16]
   14e10:	ldrd	r0, [r2, #24]
   14e14:	strd	r0, [r3, #24]
   14e18:	ldrd	r0, [r2, #32]
   14e1c:	strd	r0, [r3, #32]
   14e20:	ldrd	r0, [r2, #40]	; 0x28
   14e24:	strd	r0, [r3, #40]	; 0x28
   14e28:	sub	r3, fp, #52	; 0x34
   14e2c:	mov	r2, #1
   14e30:	mov	r1, #58	; 0x3a
   14e34:	mov	r0, r3
   14e38:	bl	1298c <__assert_fail@plt+0x1764>
   14e3c:	sub	r3, fp, #52	; 0x34
   14e40:	mvn	r2, #0
   14e44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14e48:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e4c:	bl	14730 <__assert_fail@plt+0x3508>
   14e50:	mov	r3, r0
   14e54:	mov	r0, r3
   14e58:	sub	sp, fp, #4
   14e5c:	ldr	fp, [sp]
   14e60:	add	sp, sp, #4
   14e64:	pop	{pc}		; (ldr pc, [sp], #4)
   14e68:	str	fp, [sp, #-8]!
   14e6c:	str	lr, [sp, #4]
   14e70:	add	fp, sp, #4
   14e74:	sub	sp, sp, #24
   14e78:	str	r0, [fp, #-8]
   14e7c:	str	r1, [fp, #-12]
   14e80:	str	r2, [fp, #-16]
   14e84:	str	r3, [fp, #-20]	; 0xffffffec
   14e88:	mvn	r3, #0
   14e8c:	str	r3, [sp]
   14e90:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e94:	ldr	r2, [fp, #-16]
   14e98:	ldr	r1, [fp, #-12]
   14e9c:	ldr	r0, [fp, #-8]
   14ea0:	bl	14ebc <__assert_fail@plt+0x3c94>
   14ea4:	mov	r3, r0
   14ea8:	mov	r0, r3
   14eac:	sub	sp, fp, #4
   14eb0:	ldr	fp, [sp]
   14eb4:	add	sp, sp, #4
   14eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ebc:	str	fp, [sp, #-8]!
   14ec0:	str	lr, [sp, #4]
   14ec4:	add	fp, sp, #4
   14ec8:	sub	sp, sp, #64	; 0x40
   14ecc:	str	r0, [fp, #-56]	; 0xffffffc8
   14ed0:	str	r1, [fp, #-60]	; 0xffffffc4
   14ed4:	str	r2, [fp, #-64]	; 0xffffffc0
   14ed8:	str	r3, [fp, #-68]	; 0xffffffbc
   14edc:	movw	r2, #41380	; 0xa1a4
   14ee0:	movt	r2, #2
   14ee4:	sub	r3, fp, #52	; 0x34
   14ee8:	ldrd	r0, [r2]
   14eec:	strd	r0, [r3]
   14ef0:	ldrd	r0, [r2, #8]
   14ef4:	strd	r0, [r3, #8]
   14ef8:	ldrd	r0, [r2, #16]
   14efc:	strd	r0, [r3, #16]
   14f00:	ldrd	r0, [r2, #24]
   14f04:	strd	r0, [r3, #24]
   14f08:	ldrd	r0, [r2, #32]
   14f0c:	strd	r0, [r3, #32]
   14f10:	ldrd	r0, [r2, #40]	; 0x28
   14f14:	strd	r0, [r3, #40]	; 0x28
   14f18:	sub	r3, fp, #52	; 0x34
   14f1c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14f20:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14f24:	mov	r0, r3
   14f28:	bl	12aa4 <__assert_fail@plt+0x187c>
   14f2c:	sub	r3, fp, #52	; 0x34
   14f30:	ldr	r2, [fp, #4]
   14f34:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14f38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14f3c:	bl	14730 <__assert_fail@plt+0x3508>
   14f40:	mov	r3, r0
   14f44:	mov	r0, r3
   14f48:	sub	sp, fp, #4
   14f4c:	ldr	fp, [sp]
   14f50:	add	sp, sp, #4
   14f54:	pop	{pc}		; (ldr pc, [sp], #4)
   14f58:	str	fp, [sp, #-8]!
   14f5c:	str	lr, [sp, #4]
   14f60:	add	fp, sp, #4
   14f64:	sub	sp, sp, #16
   14f68:	str	r0, [fp, #-8]
   14f6c:	str	r1, [fp, #-12]
   14f70:	str	r2, [fp, #-16]
   14f74:	ldr	r3, [fp, #-16]
   14f78:	ldr	r2, [fp, #-12]
   14f7c:	ldr	r1, [fp, #-8]
   14f80:	mov	r0, #0
   14f84:	bl	14e68 <__assert_fail@plt+0x3c40>
   14f88:	mov	r3, r0
   14f8c:	mov	r0, r3
   14f90:	sub	sp, fp, #4
   14f94:	ldr	fp, [sp]
   14f98:	add	sp, sp, #4
   14f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa0:	str	fp, [sp, #-8]!
   14fa4:	str	lr, [sp, #4]
   14fa8:	add	fp, sp, #4
   14fac:	sub	sp, sp, #24
   14fb0:	str	r0, [fp, #-8]
   14fb4:	str	r1, [fp, #-12]
   14fb8:	str	r2, [fp, #-16]
   14fbc:	str	r3, [fp, #-20]	; 0xffffffec
   14fc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc4:	str	r3, [sp]
   14fc8:	ldr	r3, [fp, #-16]
   14fcc:	ldr	r2, [fp, #-12]
   14fd0:	ldr	r1, [fp, #-8]
   14fd4:	mov	r0, #0
   14fd8:	bl	14ebc <__assert_fail@plt+0x3c94>
   14fdc:	mov	r3, r0
   14fe0:	mov	r0, r3
   14fe4:	sub	sp, fp, #4
   14fe8:	ldr	fp, [sp]
   14fec:	add	sp, sp, #4
   14ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff4:	str	fp, [sp, #-8]!
   14ff8:	str	lr, [sp, #4]
   14ffc:	add	fp, sp, #4
   15000:	sub	sp, sp, #16
   15004:	str	r0, [fp, #-8]
   15008:	str	r1, [fp, #-12]
   1500c:	str	r2, [fp, #-16]
   15010:	movw	r3, #41276	; 0xa13c
   15014:	movt	r3, #2
   15018:	ldr	r2, [fp, #-16]
   1501c:	ldr	r1, [fp, #-12]
   15020:	ldr	r0, [fp, #-8]
   15024:	bl	14730 <__assert_fail@plt+0x3508>
   15028:	mov	r3, r0
   1502c:	mov	r0, r3
   15030:	sub	sp, fp, #4
   15034:	ldr	fp, [sp]
   15038:	add	sp, sp, #4
   1503c:	pop	{pc}		; (ldr pc, [sp], #4)
   15040:	str	fp, [sp, #-8]!
   15044:	str	lr, [sp, #4]
   15048:	add	fp, sp, #4
   1504c:	sub	sp, sp, #8
   15050:	str	r0, [fp, #-8]
   15054:	str	r1, [fp, #-12]
   15058:	ldr	r2, [fp, #-12]
   1505c:	ldr	r1, [fp, #-8]
   15060:	mov	r0, #0
   15064:	bl	14ff4 <__assert_fail@plt+0x3dcc>
   15068:	mov	r3, r0
   1506c:	mov	r0, r3
   15070:	sub	sp, fp, #4
   15074:	ldr	fp, [sp]
   15078:	add	sp, sp, #4
   1507c:	pop	{pc}		; (ldr pc, [sp], #4)
   15080:	str	fp, [sp, #-8]!
   15084:	str	lr, [sp, #4]
   15088:	add	fp, sp, #4
   1508c:	sub	sp, sp, #8
   15090:	str	r0, [fp, #-8]
   15094:	str	r1, [fp, #-12]
   15098:	mvn	r2, #0
   1509c:	ldr	r1, [fp, #-12]
   150a0:	ldr	r0, [fp, #-8]
   150a4:	bl	14ff4 <__assert_fail@plt+0x3dcc>
   150a8:	mov	r3, r0
   150ac:	mov	r0, r3
   150b0:	sub	sp, fp, #4
   150b4:	ldr	fp, [sp]
   150b8:	add	sp, sp, #4
   150bc:	pop	{pc}		; (ldr pc, [sp], #4)
   150c0:	str	fp, [sp, #-8]!
   150c4:	str	lr, [sp, #4]
   150c8:	add	fp, sp, #4
   150cc:	sub	sp, sp, #8
   150d0:	str	r0, [fp, #-8]
   150d4:	ldr	r1, [fp, #-8]
   150d8:	mov	r0, #0
   150dc:	bl	15080 <__assert_fail@plt+0x3e58>
   150e0:	mov	r3, r0
   150e4:	mov	r0, r3
   150e8:	sub	sp, fp, #4
   150ec:	ldr	fp, [sp]
   150f0:	add	sp, sp, #4
   150f4:	pop	{pc}		; (ldr pc, [sp], #4)
   150f8:	str	fp, [sp, #-8]!
   150fc:	str	lr, [sp, #4]
   15100:	add	fp, sp, #4
   15104:	sub	sp, sp, #96	; 0x60
   15108:	str	r0, [fp, #-80]	; 0xffffffb0
   1510c:	str	r1, [fp, #-84]	; 0xffffffac
   15110:	str	r2, [fp, #-88]	; 0xffffffa8
   15114:	str	r3, [fp, #-92]	; 0xffffffa4
   15118:	mov	r3, #0
   1511c:	str	r3, [fp, #-16]
   15120:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15124:	ldr	r3, [r3]
   15128:	str	r3, [fp, #-20]	; 0xffffffec
   1512c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15130:	cmp	r3, #0
   15134:	beq	15144 <__assert_fail@plt+0x3f1c>
   15138:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1513c:	ldr	r3, [r3]
   15140:	b	15148 <__assert_fail@plt+0x3f20>
   15144:	mvn	r3, #0
   15148:	str	r3, [fp, #-24]	; 0xffffffe8
   1514c:	mov	r3, #0
   15150:	str	r3, [fp, #-8]
   15154:	ldr	r3, [fp, #4]
   15158:	cmp	r3, #0
   1515c:	beq	1516c <__assert_fail@plt+0x3f44>
   15160:	ldr	r3, [fp, #4]
   15164:	mov	r2, #0
   15168:	str	r2, [r3]
   1516c:	ldr	r3, [fp, #8]
   15170:	cmp	r3, #0
   15174:	beq	15184 <__assert_fail@plt+0x3f5c>
   15178:	ldr	r3, [fp, #8]
   1517c:	mov	r2, #0
   15180:	str	r2, [r3]
   15184:	mov	r3, #0
   15188:	str	r3, [fp, #-12]
   1518c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15190:	cmp	r3, #0
   15194:	bne	151bc <__assert_fail@plt+0x3f94>
   15198:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1519c:	ldrb	r3, [r3]
   151a0:	cmp	r3, #0
   151a4:	beq	15208 <__assert_fail@plt+0x3fe0>
   151a8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   151ac:	bl	166ac <__assert_fail@plt+0x5484>
   151b0:	mov	r3, r0
   151b4:	str	r3, [fp, #-12]
   151b8:	b	15208 <__assert_fail@plt+0x3fe0>
   151bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   151c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   151c4:	sub	r3, r2, r3
   151c8:	str	r3, [fp, #-28]	; 0xffffffe4
   151cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151d0:	cmp	r3, #0
   151d4:	beq	15208 <__assert_fail@plt+0x3fe0>
   151d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151dc:	add	r3, r3, #1
   151e0:	mov	r1, r3
   151e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   151e8:	bl	165ec <__assert_fail@plt+0x53c4>
   151ec:	mov	r3, r0
   151f0:	str	r3, [fp, #-12]
   151f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151f8:	ldr	r2, [fp, #-12]
   151fc:	add	r3, r2, r3
   15200:	mov	r2, #0
   15204:	strb	r2, [r3]
   15208:	ldr	r3, [fp, #-84]	; 0xffffffac
   1520c:	cmp	r3, #0
   15210:	beq	15234 <__assert_fail@plt+0x400c>
   15214:	ldr	r3, [fp, #-84]	; 0xffffffac
   15218:	add	r3, r3, #1
   1521c:	ldrb	r3, [r3]
   15220:	cmp	r3, #0
   15224:	beq	15234 <__assert_fail@plt+0x400c>
   15228:	ldr	r3, [fp, #-84]	; 0xffffffac
   1522c:	add	r3, r3, #1
   15230:	b	15238 <__assert_fail@plt+0x4010>
   15234:	mov	r3, #0
   15238:	str	r3, [fp, #-32]	; 0xffffffe0
   1523c:	ldr	r3, [fp, #-12]
   15240:	cmp	r3, #0
   15244:	beq	153b4 <__assert_fail@plt+0x418c>
   15248:	ldr	r3, [fp, #-12]
   1524c:	ldrb	r3, [r3]
   15250:	cmp	r3, #43	; 0x2b
   15254:	beq	15268 <__assert_fail@plt+0x4040>
   15258:	ldr	r0, [fp, #-12]
   1525c:	bl	10f40 <getpwnam@plt>
   15260:	mov	r3, r0
   15264:	b	1526c <__assert_fail@plt+0x4044>
   15268:	mov	r3, #0
   1526c:	str	r3, [fp, #-36]	; 0xffffffdc
   15270:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15274:	cmp	r3, #0
   15278:	bne	1532c <__assert_fail@plt+0x4104>
   1527c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15280:	cmp	r3, #0
   15284:	beq	1529c <__assert_fail@plt+0x4074>
   15288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1528c:	cmp	r3, #0
   15290:	bne	1529c <__assert_fail@plt+0x4074>
   15294:	mov	r3, #1
   15298:	b	152a0 <__assert_fail@plt+0x4078>
   1529c:	mov	r3, #0
   152a0:	strb	r3, [fp, #-37]	; 0xffffffdb
   152a4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   152a8:	and	r3, r3, #1
   152ac:	strb	r3, [fp, #-37]	; 0xffffffdb
   152b0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   152b4:	cmp	r3, #0
   152b8:	beq	152d0 <__assert_fail@plt+0x40a8>
   152bc:	movw	r3, #41324	; 0xa16c
   152c0:	movt	r3, #2
   152c4:	ldr	r3, [r3]
   152c8:	str	r3, [fp, #-8]
   152cc:	b	153b0 <__assert_fail@plt+0x4188>
   152d0:	sub	r2, fp, #48	; 0x30
   152d4:	movw	r3, #39192	; 0x9918
   152d8:	movt	r3, #1
   152dc:	str	r3, [sp]
   152e0:	mov	r3, r2
   152e4:	mov	r2, #10
   152e8:	mov	r1, #0
   152ec:	ldr	r0, [fp, #-12]
   152f0:	bl	168c0 <__assert_fail@plt+0x5698>
   152f4:	mov	r3, r0
   152f8:	cmp	r3, #0
   152fc:	bne	15318 <__assert_fail@plt+0x40f0>
   15300:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15304:	cmn	r3, #1
   15308:	beq	15318 <__assert_fail@plt+0x40f0>
   1530c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15310:	str	r3, [fp, #-20]	; 0xffffffec
   15314:	b	153b0 <__assert_fail@plt+0x4188>
   15318:	movw	r3, #41328	; 0xa170
   1531c:	movt	r3, #2
   15320:	ldr	r3, [r3]
   15324:	str	r3, [fp, #-8]
   15328:	b	153b0 <__assert_fail@plt+0x4188>
   1532c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15330:	ldr	r3, [r3, #8]
   15334:	str	r3, [fp, #-20]	; 0xffffffec
   15338:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1533c:	cmp	r3, #0
   15340:	bne	153b0 <__assert_fail@plt+0x4188>
   15344:	ldr	r3, [fp, #-84]	; 0xffffffac
   15348:	cmp	r3, #0
   1534c:	beq	153b0 <__assert_fail@plt+0x4188>
   15350:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15354:	ldr	r3, [r3, #12]
   15358:	str	r3, [fp, #-24]	; 0xffffffe8
   1535c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15360:	bl	11210 <getgrgid@plt>
   15364:	str	r0, [fp, #-44]	; 0xffffffd4
   15368:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1536c:	cmp	r3, #0
   15370:	beq	15380 <__assert_fail@plt+0x4158>
   15374:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15378:	ldr	r3, [r3]
   1537c:	b	1539c <__assert_fail@plt+0x4174>
   15380:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15384:	mov	r0, r3
   15388:	mov	r1, #0
   1538c:	sub	r3, fp, #72	; 0x48
   15390:	mov	r2, r3
   15394:	bl	17f84 <__assert_fail@plt+0x6d5c>
   15398:	mov	r3, r0
   1539c:	mov	r0, r3
   153a0:	bl	166ac <__assert_fail@plt+0x5484>
   153a4:	mov	r3, r0
   153a8:	str	r3, [fp, #-16]
   153ac:	bl	10f1c <endgrent@plt>
   153b0:	bl	111a4 <endpwent@plt>
   153b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   153b8:	cmp	r3, #0
   153bc:	beq	1547c <__assert_fail@plt+0x4254>
   153c0:	ldr	r3, [fp, #-8]
   153c4:	cmp	r3, #0
   153c8:	bne	1547c <__assert_fail@plt+0x4254>
   153cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   153d0:	ldrb	r3, [r3]
   153d4:	cmp	r3, #43	; 0x2b
   153d8:	beq	153ec <__assert_fail@plt+0x41c4>
   153dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   153e0:	bl	1121c <getgrnam@plt>
   153e4:	mov	r3, r0
   153e8:	b	153f0 <__assert_fail@plt+0x41c8>
   153ec:	mov	r3, #0
   153f0:	str	r3, [fp, #-44]	; 0xffffffd4
   153f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153f8:	cmp	r3, #0
   153fc:	bne	1545c <__assert_fail@plt+0x4234>
   15400:	sub	r2, fp, #76	; 0x4c
   15404:	movw	r3, #39192	; 0x9918
   15408:	movt	r3, #1
   1540c:	str	r3, [sp]
   15410:	mov	r3, r2
   15414:	mov	r2, #10
   15418:	mov	r1, #0
   1541c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15420:	bl	168c0 <__assert_fail@plt+0x5698>
   15424:	mov	r3, r0
   15428:	cmp	r3, #0
   1542c:	bne	15448 <__assert_fail@plt+0x4220>
   15430:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15434:	cmn	r3, #1
   15438:	beq	15448 <__assert_fail@plt+0x4220>
   1543c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15440:	str	r3, [fp, #-24]	; 0xffffffe8
   15444:	b	15468 <__assert_fail@plt+0x4240>
   15448:	movw	r3, #41332	; 0xa174
   1544c:	movt	r3, #2
   15450:	ldr	r3, [r3]
   15454:	str	r3, [fp, #-8]
   15458:	b	15468 <__assert_fail@plt+0x4240>
   1545c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15460:	ldr	r3, [r3, #8]
   15464:	str	r3, [fp, #-24]	; 0xffffffe8
   15468:	bl	10f1c <endgrent@plt>
   1546c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15470:	bl	166ac <__assert_fail@plt+0x5484>
   15474:	mov	r3, r0
   15478:	str	r3, [fp, #-16]
   1547c:	ldr	r3, [fp, #-8]
   15480:	cmp	r3, #0
   15484:	bne	154ec <__assert_fail@plt+0x42c4>
   15488:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1548c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15490:	str	r2, [r3]
   15494:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15498:	cmp	r3, #0
   1549c:	beq	154ac <__assert_fail@plt+0x4284>
   154a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   154a8:	str	r2, [r3]
   154ac:	ldr	r3, [fp, #4]
   154b0:	cmp	r3, #0
   154b4:	beq	154cc <__assert_fail@plt+0x42a4>
   154b8:	ldr	r3, [fp, #4]
   154bc:	ldr	r2, [fp, #-12]
   154c0:	str	r2, [r3]
   154c4:	mov	r3, #0
   154c8:	str	r3, [fp, #-12]
   154cc:	ldr	r3, [fp, #8]
   154d0:	cmp	r3, #0
   154d4:	beq	154ec <__assert_fail@plt+0x42c4>
   154d8:	ldr	r3, [fp, #8]
   154dc:	ldr	r2, [fp, #-16]
   154e0:	str	r2, [r3]
   154e4:	mov	r3, #0
   154e8:	str	r3, [fp, #-16]
   154ec:	ldr	r0, [fp, #-12]
   154f0:	bl	126bc <__assert_fail@plt+0x1494>
   154f4:	ldr	r0, [fp, #-16]
   154f8:	bl	126bc <__assert_fail@plt+0x1494>
   154fc:	ldr	r3, [fp, #-8]
   15500:	cmp	r3, #0
   15504:	beq	15518 <__assert_fail@plt+0x42f0>
   15508:	ldr	r0, [fp, #-8]
   1550c:	bl	110d8 <gettext@plt>
   15510:	mov	r3, r0
   15514:	b	1551c <__assert_fail@plt+0x42f4>
   15518:	mov	r3, #0
   1551c:	mov	r0, r3
   15520:	sub	sp, fp, #4
   15524:	ldr	fp, [sp]
   15528:	add	sp, sp, #4
   1552c:	pop	{pc}		; (ldr pc, [sp], #4)
   15530:	str	fp, [sp, #-8]!
   15534:	str	lr, [sp, #4]
   15538:	add	fp, sp, #4
   1553c:	sub	sp, sp, #40	; 0x28
   15540:	str	r0, [fp, #-24]	; 0xffffffe8
   15544:	str	r1, [fp, #-28]	; 0xffffffe4
   15548:	str	r2, [fp, #-32]	; 0xffffffe0
   1554c:	str	r3, [fp, #-36]	; 0xffffffdc
   15550:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15554:	cmp	r3, #0
   15558:	beq	15570 <__assert_fail@plt+0x4348>
   1555c:	mov	r1, #58	; 0x3a
   15560:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15564:	bl	110fc <strchr@plt>
   15568:	mov	r3, r0
   1556c:	b	15574 <__assert_fail@plt+0x434c>
   15570:	mov	r3, #0
   15574:	str	r3, [fp, #-12]
   15578:	ldr	r3, [fp, #4]
   1557c:	str	r3, [sp, #4]
   15580:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15584:	str	r3, [sp]
   15588:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1558c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15590:	ldr	r1, [fp, #-12]
   15594:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15598:	bl	150f8 <__assert_fail@plt+0x3ed0>
   1559c:	str	r0, [fp, #-8]
   155a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   155a4:	cmp	r3, #0
   155a8:	beq	15618 <__assert_fail@plt+0x43f0>
   155ac:	ldr	r3, [fp, #-12]
   155b0:	cmp	r3, #0
   155b4:	bne	15618 <__assert_fail@plt+0x43f0>
   155b8:	ldr	r3, [fp, #-8]
   155bc:	cmp	r3, #0
   155c0:	beq	15618 <__assert_fail@plt+0x43f0>
   155c4:	mov	r1, #46	; 0x2e
   155c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155cc:	bl	110fc <strchr@plt>
   155d0:	str	r0, [fp, #-16]
   155d4:	ldr	r3, [fp, #-16]
   155d8:	cmp	r3, #0
   155dc:	beq	15618 <__assert_fail@plt+0x43f0>
   155e0:	ldr	r3, [fp, #4]
   155e4:	str	r3, [sp, #4]
   155e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   155ec:	str	r3, [sp]
   155f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   155f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   155f8:	ldr	r1, [fp, #-16]
   155fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15600:	bl	150f8 <__assert_fail@plt+0x3ed0>
   15604:	mov	r3, r0
   15608:	cmp	r3, #0
   1560c:	bne	15618 <__assert_fail@plt+0x43f0>
   15610:	mov	r3, #0
   15614:	str	r3, [fp, #-8]
   15618:	ldr	r3, [fp, #-8]
   1561c:	mov	r0, r3
   15620:	sub	sp, fp, #4
   15624:	ldr	fp, [sp]
   15628:	add	sp, sp, #4
   1562c:	pop	{pc}		; (ldr pc, [sp], #4)
   15630:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15634:	strd	r6, [sp, #8]
   15638:	str	fp, [sp, #16]
   1563c:	str	lr, [sp, #20]
   15640:	add	fp, sp, #20
   15644:	sub	sp, sp, #48	; 0x30
   15648:	str	r0, [fp, #-24]	; 0xffffffe8
   1564c:	str	r1, [fp, #-28]	; 0xffffffe4
   15650:	str	r2, [fp, #-32]	; 0xffffffe0
   15654:	str	r3, [fp, #-36]	; 0xffffffdc
   15658:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1565c:	cmp	r3, #0
   15660:	beq	15688 <__assert_fail@plt+0x4460>
   15664:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15668:	str	r3, [sp]
   1566c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15670:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15674:	movw	r1, #39244	; 0x994c
   15678:	movt	r1, #1
   1567c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15680:	bl	11108 <fprintf@plt>
   15684:	b	156a0 <__assert_fail@plt+0x4478>
   15688:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1568c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15690:	movw	r1, #39256	; 0x9958
   15694:	movt	r1, #1
   15698:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1569c:	bl	11108 <fprintf@plt>
   156a0:	movw	r0, #39264	; 0x9960
   156a4:	movt	r0, #1
   156a8:	bl	110d8 <gettext@plt>
   156ac:	mov	r2, r0
   156b0:	movw	r3, #2022	; 0x7e6
   156b4:	movw	r1, #40048	; 0x9c70
   156b8:	movt	r1, #1
   156bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156c0:	bl	11108 <fprintf@plt>
   156c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   156c8:	mov	r0, #10
   156cc:	bl	10fc4 <fputc_unlocked@plt>
   156d0:	movw	r0, #39268	; 0x9964
   156d4:	movt	r0, #1
   156d8:	bl	110d8 <gettext@plt>
   156dc:	mov	r3, r0
   156e0:	movw	r2, #39440	; 0x9a10
   156e4:	movt	r2, #1
   156e8:	mov	r1, r3
   156ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156f0:	bl	11108 <fprintf@plt>
   156f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   156f8:	mov	r0, #10
   156fc:	bl	10fc4 <fputc_unlocked@plt>
   15700:	ldr	r3, [fp, #8]
   15704:	cmp	r3, #9
   15708:	ldrls	pc, [pc, r3, lsl #2]
   1570c:	b	15aec <__assert_fail@plt+0x48c4>
   15710:	muleq	r1, r8, fp
   15714:	andeq	r5, r1, r8, lsr r7
   15718:	andeq	r5, r1, r0, ror #14
   1571c:	muleq	r1, r0, r7
   15720:	ldrdeq	r5, [r1], -r4
   15724:	andeq	r5, r1, r0, lsr r8
   15728:	muleq	r1, ip, r8
   1572c:	andeq	r5, r1, r8, lsl r9
   15730:	andeq	r5, r1, r4, lsr #19
   15734:	andeq	r5, r1, r0, asr #20
   15738:	movw	r0, #39476	; 0x9a34
   1573c:	movt	r0, #1
   15740:	bl	110d8 <gettext@plt>
   15744:	mov	r1, r0
   15748:	ldr	r3, [fp, #4]
   1574c:	ldr	r3, [r3]
   15750:	mov	r2, r3
   15754:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15758:	bl	11108 <fprintf@plt>
   1575c:	b	15b9c <__assert_fail@plt+0x4974>
   15760:	movw	r0, #39492	; 0x9a44
   15764:	movt	r0, #1
   15768:	bl	110d8 <gettext@plt>
   1576c:	mov	r1, r0
   15770:	ldr	r3, [fp, #4]
   15774:	ldr	r2, [r3]
   15778:	ldr	r3, [fp, #4]
   1577c:	add	r3, r3, #4
   15780:	ldr	r3, [r3]
   15784:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15788:	bl	11108 <fprintf@plt>
   1578c:	b	15b9c <__assert_fail@plt+0x4974>
   15790:	movw	r0, #39516	; 0x9a5c
   15794:	movt	r0, #1
   15798:	bl	110d8 <gettext@plt>
   1579c:	ldr	r3, [fp, #4]
   157a0:	ldr	r2, [r3]
   157a4:	ldr	r3, [fp, #4]
   157a8:	add	r3, r3, #4
   157ac:	ldr	r1, [r3]
   157b0:	ldr	r3, [fp, #4]
   157b4:	add	r3, r3, #8
   157b8:	ldr	r3, [r3]
   157bc:	str	r3, [sp]
   157c0:	mov	r3, r1
   157c4:	mov	r1, r0
   157c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157cc:	bl	11108 <fprintf@plt>
   157d0:	b	15b9c <__assert_fail@plt+0x4974>
   157d4:	movw	r0, #39544	; 0x9a78
   157d8:	movt	r0, #1
   157dc:	bl	110d8 <gettext@plt>
   157e0:	mov	ip, r0
   157e4:	ldr	r3, [fp, #4]
   157e8:	ldr	r1, [r3]
   157ec:	ldr	r3, [fp, #4]
   157f0:	add	r3, r3, #4
   157f4:	ldr	r0, [r3]
   157f8:	ldr	r3, [fp, #4]
   157fc:	add	r3, r3, #8
   15800:	ldr	r3, [r3]
   15804:	ldr	r2, [fp, #4]
   15808:	add	r2, r2, #12
   1580c:	ldr	r2, [r2]
   15810:	str	r2, [sp, #4]
   15814:	str	r3, [sp]
   15818:	mov	r3, r0
   1581c:	mov	r2, r1
   15820:	mov	r1, ip
   15824:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15828:	bl	11108 <fprintf@plt>
   1582c:	b	15b9c <__assert_fail@plt+0x4974>
   15830:	movw	r0, #39576	; 0x9a98
   15834:	movt	r0, #1
   15838:	bl	110d8 <gettext@plt>
   1583c:	mov	lr, r0
   15840:	ldr	r3, [fp, #4]
   15844:	ldr	r0, [r3]
   15848:	ldr	r3, [fp, #4]
   1584c:	add	r3, r3, #4
   15850:	ldr	ip, [r3]
   15854:	ldr	r3, [fp, #4]
   15858:	add	r3, r3, #8
   1585c:	ldr	r3, [r3]
   15860:	ldr	r2, [fp, #4]
   15864:	add	r2, r2, #12
   15868:	ldr	r2, [r2]
   1586c:	ldr	r1, [fp, #4]
   15870:	add	r1, r1, #16
   15874:	ldr	r1, [r1]
   15878:	str	r1, [sp, #8]
   1587c:	str	r2, [sp, #4]
   15880:	str	r3, [sp]
   15884:	mov	r3, ip
   15888:	mov	r2, r0
   1588c:	mov	r1, lr
   15890:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15894:	bl	11108 <fprintf@plt>
   15898:	b	15b9c <__assert_fail@plt+0x4974>
   1589c:	movw	r0, #39612	; 0x9abc
   158a0:	movt	r0, #1
   158a4:	bl	110d8 <gettext@plt>
   158a8:	mov	r4, r0
   158ac:	ldr	r3, [fp, #4]
   158b0:	ldr	ip, [r3]
   158b4:	ldr	r3, [fp, #4]
   158b8:	add	r3, r3, #4
   158bc:	ldr	lr, [r3]
   158c0:	ldr	r3, [fp, #4]
   158c4:	add	r3, r3, #8
   158c8:	ldr	r3, [r3]
   158cc:	ldr	r2, [fp, #4]
   158d0:	add	r2, r2, #12
   158d4:	ldr	r2, [r2]
   158d8:	ldr	r1, [fp, #4]
   158dc:	add	r1, r1, #16
   158e0:	ldr	r1, [r1]
   158e4:	ldr	r0, [fp, #4]
   158e8:	add	r0, r0, #20
   158ec:	ldr	r0, [r0]
   158f0:	str	r0, [sp, #12]
   158f4:	str	r1, [sp, #8]
   158f8:	str	r2, [sp, #4]
   158fc:	str	r3, [sp]
   15900:	mov	r3, lr
   15904:	mov	r2, ip
   15908:	mov	r1, r4
   1590c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15910:	bl	11108 <fprintf@plt>
   15914:	b	15b9c <__assert_fail@plt+0x4974>
   15918:	movw	r0, #39652	; 0x9ae4
   1591c:	movt	r0, #1
   15920:	bl	110d8 <gettext@plt>
   15924:	mov	r5, r0
   15928:	ldr	r3, [fp, #4]
   1592c:	ldr	lr, [r3]
   15930:	ldr	r3, [fp, #4]
   15934:	add	r3, r3, #4
   15938:	ldr	r4, [r3]
   1593c:	ldr	r3, [fp, #4]
   15940:	add	r3, r3, #8
   15944:	ldr	r3, [r3]
   15948:	ldr	r2, [fp, #4]
   1594c:	add	r2, r2, #12
   15950:	ldr	r2, [r2]
   15954:	ldr	r1, [fp, #4]
   15958:	add	r1, r1, #16
   1595c:	ldr	r1, [r1]
   15960:	ldr	r0, [fp, #4]
   15964:	add	r0, r0, #20
   15968:	ldr	r0, [r0]
   1596c:	ldr	ip, [fp, #4]
   15970:	add	ip, ip, #24
   15974:	ldr	ip, [ip]
   15978:	str	ip, [sp, #16]
   1597c:	str	r0, [sp, #12]
   15980:	str	r1, [sp, #8]
   15984:	str	r2, [sp, #4]
   15988:	str	r3, [sp]
   1598c:	mov	r3, r4
   15990:	mov	r2, lr
   15994:	mov	r1, r5
   15998:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1599c:	bl	11108 <fprintf@plt>
   159a0:	b	15b9c <__assert_fail@plt+0x4974>
   159a4:	movw	r0, #39696	; 0x9b10
   159a8:	movt	r0, #1
   159ac:	bl	110d8 <gettext@plt>
   159b0:	mov	r6, r0
   159b4:	ldr	r3, [fp, #4]
   159b8:	ldr	r4, [r3]
   159bc:	ldr	r3, [fp, #4]
   159c0:	add	r3, r3, #4
   159c4:	ldr	r5, [r3]
   159c8:	ldr	r3, [fp, #4]
   159cc:	add	r3, r3, #8
   159d0:	ldr	r3, [r3]
   159d4:	ldr	r2, [fp, #4]
   159d8:	add	r2, r2, #12
   159dc:	ldr	r2, [r2]
   159e0:	ldr	r1, [fp, #4]
   159e4:	add	r1, r1, #16
   159e8:	ldr	r1, [r1]
   159ec:	ldr	r0, [fp, #4]
   159f0:	add	r0, r0, #20
   159f4:	ldr	r0, [r0]
   159f8:	ldr	ip, [fp, #4]
   159fc:	add	ip, ip, #24
   15a00:	ldr	ip, [ip]
   15a04:	ldr	lr, [fp, #4]
   15a08:	add	lr, lr, #28
   15a0c:	ldr	lr, [lr]
   15a10:	str	lr, [sp, #20]
   15a14:	str	ip, [sp, #16]
   15a18:	str	r0, [sp, #12]
   15a1c:	str	r1, [sp, #8]
   15a20:	str	r2, [sp, #4]
   15a24:	str	r3, [sp]
   15a28:	mov	r3, r5
   15a2c:	mov	r2, r4
   15a30:	mov	r1, r6
   15a34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a38:	bl	11108 <fprintf@plt>
   15a3c:	b	15b9c <__assert_fail@plt+0x4974>
   15a40:	movw	r0, #39744	; 0x9b40
   15a44:	movt	r0, #1
   15a48:	bl	110d8 <gettext@plt>
   15a4c:	mov	r7, r0
   15a50:	ldr	r3, [fp, #4]
   15a54:	ldr	r5, [r3]
   15a58:	ldr	r3, [fp, #4]
   15a5c:	add	r3, r3, #4
   15a60:	ldr	r6, [r3]
   15a64:	ldr	r3, [fp, #4]
   15a68:	add	r3, r3, #8
   15a6c:	ldr	r3, [r3]
   15a70:	ldr	r2, [fp, #4]
   15a74:	add	r2, r2, #12
   15a78:	ldr	r2, [r2]
   15a7c:	ldr	r1, [fp, #4]
   15a80:	add	r1, r1, #16
   15a84:	ldr	r1, [r1]
   15a88:	ldr	r0, [fp, #4]
   15a8c:	add	r0, r0, #20
   15a90:	ldr	r0, [r0]
   15a94:	ldr	ip, [fp, #4]
   15a98:	add	ip, ip, #24
   15a9c:	ldr	ip, [ip]
   15aa0:	ldr	lr, [fp, #4]
   15aa4:	add	lr, lr, #28
   15aa8:	ldr	lr, [lr]
   15aac:	ldr	r4, [fp, #4]
   15ab0:	add	r4, r4, #32
   15ab4:	ldr	r4, [r4]
   15ab8:	str	r4, [sp, #24]
   15abc:	str	lr, [sp, #20]
   15ac0:	str	ip, [sp, #16]
   15ac4:	str	r0, [sp, #12]
   15ac8:	str	r1, [sp, #8]
   15acc:	str	r2, [sp, #4]
   15ad0:	str	r3, [sp]
   15ad4:	mov	r3, r6
   15ad8:	mov	r2, r5
   15adc:	mov	r1, r7
   15ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ae4:	bl	11108 <fprintf@plt>
   15ae8:	b	15b9c <__assert_fail@plt+0x4974>
   15aec:	movw	r0, #39796	; 0x9b74
   15af0:	movt	r0, #1
   15af4:	bl	110d8 <gettext@plt>
   15af8:	mov	r7, r0
   15afc:	ldr	r3, [fp, #4]
   15b00:	ldr	r5, [r3]
   15b04:	ldr	r3, [fp, #4]
   15b08:	add	r3, r3, #4
   15b0c:	ldr	r6, [r3]
   15b10:	ldr	r3, [fp, #4]
   15b14:	add	r3, r3, #8
   15b18:	ldr	r3, [r3]
   15b1c:	ldr	r2, [fp, #4]
   15b20:	add	r2, r2, #12
   15b24:	ldr	r2, [r2]
   15b28:	ldr	r1, [fp, #4]
   15b2c:	add	r1, r1, #16
   15b30:	ldr	r1, [r1]
   15b34:	ldr	r0, [fp, #4]
   15b38:	add	r0, r0, #20
   15b3c:	ldr	r0, [r0]
   15b40:	ldr	ip, [fp, #4]
   15b44:	add	ip, ip, #24
   15b48:	ldr	ip, [ip]
   15b4c:	ldr	lr, [fp, #4]
   15b50:	add	lr, lr, #28
   15b54:	ldr	lr, [lr]
   15b58:	ldr	r4, [fp, #4]
   15b5c:	add	r4, r4, #32
   15b60:	ldr	r4, [r4]
   15b64:	str	r4, [sp, #24]
   15b68:	str	lr, [sp, #20]
   15b6c:	str	ip, [sp, #16]
   15b70:	str	r0, [sp, #12]
   15b74:	str	r1, [sp, #8]
   15b78:	str	r2, [sp, #4]
   15b7c:	str	r3, [sp]
   15b80:	mov	r3, r6
   15b84:	mov	r2, r5
   15b88:	mov	r1, r7
   15b8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b90:	bl	11108 <fprintf@plt>
   15b94:	b	15b9c <__assert_fail@plt+0x4974>
   15b98:	nop	{0}
   15b9c:	nop	{0}
   15ba0:	sub	sp, fp, #20
   15ba4:	ldrd	r4, [sp]
   15ba8:	ldrd	r6, [sp, #8]
   15bac:	ldr	fp, [sp, #16]
   15bb0:	add	sp, sp, #20
   15bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb8:	str	fp, [sp, #-8]!
   15bbc:	str	lr, [sp, #4]
   15bc0:	add	fp, sp, #4
   15bc4:	sub	sp, sp, #32
   15bc8:	str	r0, [fp, #-16]
   15bcc:	str	r1, [fp, #-20]	; 0xffffffec
   15bd0:	str	r2, [fp, #-24]	; 0xffffffe8
   15bd4:	str	r3, [fp, #-28]	; 0xffffffe4
   15bd8:	mov	r3, #0
   15bdc:	str	r3, [fp, #-8]
   15be0:	b	15bf0 <__assert_fail@plt+0x49c8>
   15be4:	ldr	r3, [fp, #-8]
   15be8:	add	r3, r3, #1
   15bec:	str	r3, [fp, #-8]
   15bf0:	ldr	r3, [fp, #-8]
   15bf4:	lsl	r3, r3, #2
   15bf8:	ldr	r2, [fp, #4]
   15bfc:	add	r3, r2, r3
   15c00:	ldr	r3, [r3]
   15c04:	cmp	r3, #0
   15c08:	bne	15be4 <__assert_fail@plt+0x49bc>
   15c0c:	ldr	r3, [fp, #-8]
   15c10:	str	r3, [sp, #4]
   15c14:	ldr	r3, [fp, #4]
   15c18:	str	r3, [sp]
   15c1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c24:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c28:	ldr	r0, [fp, #-16]
   15c2c:	bl	15630 <__assert_fail@plt+0x4408>
   15c30:	nop	{0}
   15c34:	sub	sp, fp, #4
   15c38:	ldr	fp, [sp]
   15c3c:	add	sp, sp, #4
   15c40:	pop	{pc}		; (ldr pc, [sp], #4)
   15c44:	str	fp, [sp, #-8]!
   15c48:	str	lr, [sp, #4]
   15c4c:	add	fp, sp, #4
   15c50:	sub	sp, sp, #72	; 0x48
   15c54:	str	r0, [fp, #-56]	; 0xffffffc8
   15c58:	str	r1, [fp, #-60]	; 0xffffffc4
   15c5c:	str	r2, [fp, #-64]	; 0xffffffc0
   15c60:	str	r3, [fp, #-68]	; 0xffffffbc
   15c64:	mov	r3, #0
   15c68:	str	r3, [fp, #-8]
   15c6c:	b	15c7c <__assert_fail@plt+0x4a54>
   15c70:	ldr	r3, [fp, #-8]
   15c74:	add	r3, r3, #1
   15c78:	str	r3, [fp, #-8]
   15c7c:	ldr	r3, [fp, #-8]
   15c80:	cmp	r3, #9
   15c84:	bhi	15cc8 <__assert_fail@plt+0x4aa0>
   15c88:	ldr	r3, [fp, #4]
   15c8c:	add	r2, r3, #4
   15c90:	str	r2, [fp, #4]
   15c94:	ldr	r2, [r3]
   15c98:	ldr	r3, [fp, #-8]
   15c9c:	lsl	r3, r3, #2
   15ca0:	sub	r1, fp, #4
   15ca4:	add	r3, r1, r3
   15ca8:	str	r2, [r3, #-44]	; 0xffffffd4
   15cac:	ldr	r3, [fp, #-8]
   15cb0:	lsl	r3, r3, #2
   15cb4:	sub	r2, fp, #4
   15cb8:	add	r3, r2, r3
   15cbc:	ldr	r3, [r3, #-44]	; 0xffffffd4
   15cc0:	cmp	r3, #0
   15cc4:	bne	15c70 <__assert_fail@plt+0x4a48>
   15cc8:	ldr	r3, [fp, #-8]
   15ccc:	str	r3, [sp, #4]
   15cd0:	sub	r3, fp, #48	; 0x30
   15cd4:	str	r3, [sp]
   15cd8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15cdc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15ce0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ce4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15ce8:	bl	15630 <__assert_fail@plt+0x4408>
   15cec:	nop	{0}
   15cf0:	sub	sp, fp, #4
   15cf4:	ldr	fp, [sp]
   15cf8:	add	sp, sp, #4
   15cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15d00:	push	{r3}		; (str r3, [sp, #-4]!)
   15d04:	str	fp, [sp, #-8]!
   15d08:	str	lr, [sp, #4]
   15d0c:	add	fp, sp, #4
   15d10:	sub	sp, sp, #36	; 0x24
   15d14:	str	r0, [fp, #-20]	; 0xffffffec
   15d18:	str	r1, [fp, #-24]	; 0xffffffe8
   15d1c:	str	r2, [fp, #-28]	; 0xffffffe4
   15d20:	add	r3, fp, #8
   15d24:	str	r3, [fp, #-12]
   15d28:	ldr	r3, [fp, #-12]
   15d2c:	str	r3, [sp]
   15d30:	ldr	r3, [fp, #4]
   15d34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15d38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15d3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d40:	bl	15c44 <__assert_fail@plt+0x4a1c>
   15d44:	nop	{0}
   15d48:	sub	sp, fp, #4
   15d4c:	ldr	fp, [sp]
   15d50:	ldr	lr, [sp, #4]
   15d54:	add	sp, sp, #8
   15d58:	add	sp, sp, #4
   15d5c:	bx	lr
   15d60:	str	fp, [sp, #-8]!
   15d64:	str	lr, [sp, #4]
   15d68:	add	fp, sp, #4
   15d6c:	movw	r3, #41356	; 0xa18c
   15d70:	movt	r3, #2
   15d74:	ldr	r3, [r3]
   15d78:	mov	r1, r3
   15d7c:	mov	r0, #10
   15d80:	bl	10fc4 <fputc_unlocked@plt>
   15d84:	movw	r0, #39856	; 0x9bb0
   15d88:	movt	r0, #1
   15d8c:	bl	110d8 <gettext@plt>
   15d90:	mov	r3, r0
   15d94:	movw	r1, #39876	; 0x9bc4
   15d98:	movt	r1, #1
   15d9c:	mov	r0, r3
   15da0:	bl	10f64 <printf@plt>
   15da4:	movw	r0, #39900	; 0x9bdc
   15da8:	movt	r0, #1
   15dac:	bl	110d8 <gettext@plt>
   15db0:	mov	r3, r0
   15db4:	movw	r2, #39920	; 0x9bf0
   15db8:	movt	r2, #1
   15dbc:	movw	r1, #39960	; 0x9c18
   15dc0:	movt	r1, #1
   15dc4:	mov	r0, r3
   15dc8:	bl	10f64 <printf@plt>
   15dcc:	movw	r0, #39976	; 0x9c28
   15dd0:	movt	r0, #1
   15dd4:	bl	110d8 <gettext@plt>
   15dd8:	mov	r3, r0
   15ddc:	movw	r1, #40016	; 0x9c50
   15de0:	movt	r1, #1
   15de4:	mov	r0, r3
   15de8:	bl	10f64 <printf@plt>
   15dec:	nop	{0}
   15df0:	sub	sp, fp, #4
   15df4:	ldr	fp, [sp]
   15df8:	add	sp, sp, #4
   15dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15e00:	str	fp, [sp, #-8]!
   15e04:	str	lr, [sp, #4]
   15e08:	add	fp, sp, #4
   15e0c:	sub	sp, sp, #16
   15e10:	str	r0, [fp, #-8]
   15e14:	str	r1, [fp, #-12]
   15e18:	str	r2, [fp, #-16]
   15e1c:	ldr	r2, [fp, #-16]
   15e20:	ldr	r1, [fp, #-12]
   15e24:	ldr	r0, [fp, #-8]
   15e28:	bl	15fe4 <__assert_fail@plt+0x4dbc>
   15e2c:	mov	r3, r0
   15e30:	mov	r0, r3
   15e34:	sub	sp, fp, #4
   15e38:	ldr	fp, [sp]
   15e3c:	add	sp, sp, #4
   15e40:	pop	{pc}		; (ldr pc, [sp], #4)
   15e44:	str	fp, [sp, #-8]!
   15e48:	str	lr, [sp, #4]
   15e4c:	add	fp, sp, #4
   15e50:	sub	sp, sp, #8
   15e54:	str	r0, [fp, #-8]
   15e58:	ldr	r3, [fp, #-8]
   15e5c:	cmp	r3, #0
   15e60:	bne	15e68 <__assert_fail@plt+0x4c40>
   15e64:	bl	166f4 <__assert_fail@plt+0x54cc>
   15e68:	ldr	r3, [fp, #-8]
   15e6c:	mov	r0, r3
   15e70:	sub	sp, fp, #4
   15e74:	ldr	fp, [sp]
   15e78:	add	sp, sp, #4
   15e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e80:	str	fp, [sp, #-8]!
   15e84:	str	lr, [sp, #4]
   15e88:	add	fp, sp, #4
   15e8c:	sub	sp, sp, #8
   15e90:	str	r0, [fp, #-8]
   15e94:	ldr	r0, [fp, #-8]
   15e98:	bl	1787c <__assert_fail@plt+0x6654>
   15e9c:	mov	r3, r0
   15ea0:	mov	r0, r3
   15ea4:	bl	15e44 <__assert_fail@plt+0x4c1c>
   15ea8:	mov	r3, r0
   15eac:	mov	r0, r3
   15eb0:	sub	sp, fp, #4
   15eb4:	ldr	fp, [sp]
   15eb8:	add	sp, sp, #4
   15ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec0:	str	fp, [sp, #-8]!
   15ec4:	str	lr, [sp, #4]
   15ec8:	add	fp, sp, #4
   15ecc:	sub	sp, sp, #8
   15ed0:	str	r0, [fp, #-8]
   15ed4:	ldr	r0, [fp, #-8]
   15ed8:	bl	17e3c <__assert_fail@plt+0x6c14>
   15edc:	mov	r3, r0
   15ee0:	mov	r0, r3
   15ee4:	bl	15e44 <__assert_fail@plt+0x4c1c>
   15ee8:	mov	r3, r0
   15eec:	mov	r0, r3
   15ef0:	sub	sp, fp, #4
   15ef4:	ldr	fp, [sp]
   15ef8:	add	sp, sp, #4
   15efc:	pop	{pc}		; (ldr pc, [sp], #4)
   15f00:	str	fp, [sp, #-8]!
   15f04:	str	lr, [sp, #4]
   15f08:	add	fp, sp, #4
   15f0c:	sub	sp, sp, #8
   15f10:	str	r0, [fp, #-8]
   15f14:	ldr	r0, [fp, #-8]
   15f18:	bl	15e80 <__assert_fail@plt+0x4c58>
   15f1c:	mov	r3, r0
   15f20:	mov	r0, r3
   15f24:	sub	sp, fp, #4
   15f28:	ldr	fp, [sp]
   15f2c:	add	sp, sp, #4
   15f30:	pop	{pc}		; (ldr pc, [sp], #4)
   15f34:	str	fp, [sp, #-8]!
   15f38:	str	lr, [sp, #4]
   15f3c:	add	fp, sp, #4
   15f40:	sub	sp, sp, #16
   15f44:	str	r0, [fp, #-16]
   15f48:	str	r1, [fp, #-20]	; 0xffffffec
   15f4c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15f50:	ldr	r0, [fp, #-16]
   15f54:	bl	1790c <__assert_fail@plt+0x66e4>
   15f58:	str	r0, [fp, #-8]
   15f5c:	ldr	r3, [fp, #-8]
   15f60:	cmp	r3, #0
   15f64:	bne	15f84 <__assert_fail@plt+0x4d5c>
   15f68:	ldr	r3, [fp, #-16]
   15f6c:	cmp	r3, #0
   15f70:	beq	15f80 <__assert_fail@plt+0x4d58>
   15f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f78:	cmp	r3, #0
   15f7c:	beq	15f84 <__assert_fail@plt+0x4d5c>
   15f80:	bl	166f4 <__assert_fail@plt+0x54cc>
   15f84:	ldr	r3, [fp, #-8]
   15f88:	mov	r0, r3
   15f8c:	sub	sp, fp, #4
   15f90:	ldr	fp, [sp]
   15f94:	add	sp, sp, #4
   15f98:	pop	{pc}		; (ldr pc, [sp], #4)
   15f9c:	str	fp, [sp, #-8]!
   15fa0:	str	lr, [sp, #4]
   15fa4:	add	fp, sp, #4
   15fa8:	sub	sp, sp, #8
   15fac:	str	r0, [fp, #-8]
   15fb0:	str	r1, [fp, #-12]
   15fb4:	ldr	r1, [fp, #-12]
   15fb8:	ldr	r0, [fp, #-8]
   15fbc:	bl	17e74 <__assert_fail@plt+0x6c4c>
   15fc0:	mov	r3, r0
   15fc4:	mov	r0, r3
   15fc8:	bl	15e44 <__assert_fail@plt+0x4c1c>
   15fcc:	mov	r3, r0
   15fd0:	mov	r0, r3
   15fd4:	sub	sp, fp, #4
   15fd8:	ldr	fp, [sp]
   15fdc:	add	sp, sp, #4
   15fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe4:	str	fp, [sp, #-8]!
   15fe8:	str	lr, [sp, #4]
   15fec:	add	fp, sp, #4
   15ff0:	sub	sp, sp, #24
   15ff4:	str	r0, [fp, #-16]
   15ff8:	str	r1, [fp, #-20]	; 0xffffffec
   15ffc:	str	r2, [fp, #-24]	; 0xffffffe8
   16000:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16004:	ldr	r1, [fp, #-20]	; 0xffffffec
   16008:	ldr	r0, [fp, #-16]
   1600c:	bl	18570 <__assert_fail@plt+0x7348>
   16010:	str	r0, [fp, #-8]
   16014:	ldr	r3, [fp, #-8]
   16018:	cmp	r3, #0
   1601c:	bne	16048 <__assert_fail@plt+0x4e20>
   16020:	ldr	r3, [fp, #-16]
   16024:	cmp	r3, #0
   16028:	beq	16044 <__assert_fail@plt+0x4e1c>
   1602c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16030:	cmp	r3, #0
   16034:	beq	16048 <__assert_fail@plt+0x4e20>
   16038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1603c:	cmp	r3, #0
   16040:	beq	16048 <__assert_fail@plt+0x4e20>
   16044:	bl	166f4 <__assert_fail@plt+0x54cc>
   16048:	ldr	r3, [fp, #-8]
   1604c:	mov	r0, r3
   16050:	sub	sp, fp, #4
   16054:	ldr	fp, [sp]
   16058:	add	sp, sp, #4
   1605c:	pop	{pc}		; (ldr pc, [sp], #4)
   16060:	str	fp, [sp, #-8]!
   16064:	str	lr, [sp, #4]
   16068:	add	fp, sp, #4
   1606c:	sub	sp, sp, #16
   16070:	str	r0, [fp, #-8]
   16074:	str	r1, [fp, #-12]
   16078:	str	r2, [fp, #-16]
   1607c:	ldr	r2, [fp, #-16]
   16080:	ldr	r1, [fp, #-12]
   16084:	ldr	r0, [fp, #-8]
   16088:	bl	17f14 <__assert_fail@plt+0x6cec>
   1608c:	mov	r3, r0
   16090:	mov	r0, r3
   16094:	bl	15e44 <__assert_fail@plt+0x4c1c>
   16098:	mov	r3, r0
   1609c:	mov	r0, r3
   160a0:	sub	sp, fp, #4
   160a4:	ldr	fp, [sp]
   160a8:	add	sp, sp, #4
   160ac:	pop	{pc}		; (ldr pc, [sp], #4)
   160b0:	str	fp, [sp, #-8]!
   160b4:	str	lr, [sp, #4]
   160b8:	add	fp, sp, #4
   160bc:	sub	sp, sp, #8
   160c0:	str	r0, [fp, #-8]
   160c4:	str	r1, [fp, #-12]
   160c8:	ldr	r2, [fp, #-12]
   160cc:	ldr	r1, [fp, #-8]
   160d0:	mov	r0, #0
   160d4:	bl	15fe4 <__assert_fail@plt+0x4dbc>
   160d8:	mov	r3, r0
   160dc:	mov	r0, r3
   160e0:	sub	sp, fp, #4
   160e4:	ldr	fp, [sp]
   160e8:	add	sp, sp, #4
   160ec:	pop	{pc}		; (ldr pc, [sp], #4)
   160f0:	str	fp, [sp, #-8]!
   160f4:	str	lr, [sp, #4]
   160f8:	add	fp, sp, #4
   160fc:	sub	sp, sp, #8
   16100:	str	r0, [fp, #-8]
   16104:	str	r1, [fp, #-12]
   16108:	ldr	r2, [fp, #-12]
   1610c:	ldr	r1, [fp, #-8]
   16110:	mov	r0, #0
   16114:	bl	16060 <__assert_fail@plt+0x4e38>
   16118:	mov	r3, r0
   1611c:	mov	r0, r3
   16120:	sub	sp, fp, #4
   16124:	ldr	fp, [sp]
   16128:	add	sp, sp, #4
   1612c:	pop	{pc}		; (ldr pc, [sp], #4)
   16130:	str	fp, [sp, #-8]!
   16134:	str	lr, [sp, #4]
   16138:	add	fp, sp, #4
   1613c:	sub	sp, sp, #8
   16140:	str	r0, [fp, #-8]
   16144:	str	r1, [fp, #-12]
   16148:	mov	r2, #1
   1614c:	ldr	r1, [fp, #-12]
   16150:	ldr	r0, [fp, #-8]
   16154:	bl	16170 <__assert_fail@plt+0x4f48>
   16158:	mov	r3, r0
   1615c:	mov	r0, r3
   16160:	sub	sp, fp, #4
   16164:	ldr	fp, [sp]
   16168:	add	sp, sp, #4
   1616c:	pop	{pc}		; (ldr pc, [sp], #4)
   16170:	str	fp, [sp, #-8]!
   16174:	str	lr, [sp, #4]
   16178:	add	fp, sp, #4
   1617c:	sub	sp, sp, #24
   16180:	str	r0, [fp, #-16]
   16184:	str	r1, [fp, #-20]	; 0xffffffec
   16188:	str	r2, [fp, #-24]	; 0xffffffe8
   1618c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16190:	ldr	r3, [r3]
   16194:	str	r3, [fp, #-8]
   16198:	ldr	r3, [fp, #-16]
   1619c:	cmp	r3, #0
   161a0:	bne	161e8 <__assert_fail@plt+0x4fc0>
   161a4:	ldr	r3, [fp, #-8]
   161a8:	cmp	r3, #0
   161ac:	bne	16224 <__assert_fail@plt+0x4ffc>
   161b0:	mov	r2, #64	; 0x40
   161b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   161b8:	udiv	r3, r2, r3
   161bc:	str	r3, [fp, #-8]
   161c0:	ldr	r3, [fp, #-8]
   161c4:	cmp	r3, #0
   161c8:	moveq	r3, #1
   161cc:	movne	r3, #0
   161d0:	uxtb	r3, r3
   161d4:	mov	r2, r3
   161d8:	ldr	r3, [fp, #-8]
   161dc:	add	r3, r2, r3
   161e0:	str	r3, [fp, #-8]
   161e4:	b	16224 <__assert_fail@plt+0x4ffc>
   161e8:	ldr	r2, [fp, #-8]
   161ec:	ldr	r3, [fp, #-8]
   161f0:	lsr	r3, r3, #1
   161f4:	add	r3, r3, #1
   161f8:	mov	r1, #0
   161fc:	adds	r3, r2, r3
   16200:	bcc	16208 <__assert_fail@plt+0x4fe0>
   16204:	mov	r1, #1
   16208:	str	r3, [fp, #-8]
   1620c:	mov	r3, r1
   16210:	and	r3, r3, #1
   16214:	uxtb	r3, r3
   16218:	cmp	r3, #0
   1621c:	beq	16224 <__assert_fail@plt+0x4ffc>
   16220:	bl	166f4 <__assert_fail@plt+0x54cc>
   16224:	ldr	r3, [fp, #-8]
   16228:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1622c:	mov	r1, r3
   16230:	ldr	r0, [fp, #-16]
   16234:	bl	15fe4 <__assert_fail@plt+0x4dbc>
   16238:	str	r0, [fp, #-16]
   1623c:	ldr	r2, [fp, #-8]
   16240:	ldr	r3, [fp, #-20]	; 0xffffffec
   16244:	str	r2, [r3]
   16248:	ldr	r3, [fp, #-16]
   1624c:	mov	r0, r3
   16250:	sub	sp, fp, #4
   16254:	ldr	fp, [sp]
   16258:	add	sp, sp, #4
   1625c:	pop	{pc}		; (ldr pc, [sp], #4)
   16260:	str	fp, [sp, #-8]!
   16264:	str	lr, [sp, #4]
   16268:	add	fp, sp, #4
   1626c:	sub	sp, sp, #32
   16270:	str	r0, [fp, #-24]	; 0xffffffe8
   16274:	str	r1, [fp, #-28]	; 0xffffffe4
   16278:	str	r2, [fp, #-32]	; 0xffffffe0
   1627c:	str	r3, [fp, #-36]	; 0xffffffdc
   16280:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16284:	ldr	r3, [r3]
   16288:	str	r3, [fp, #-8]
   1628c:	ldr	r3, [fp, #-8]
   16290:	asr	r3, r3, #1
   16294:	mov	r1, #0
   16298:	ldr	r2, [fp, #-8]
   1629c:	adds	r3, r2, r3
   162a0:	bvc	162a8 <__assert_fail@plt+0x5080>
   162a4:	mov	r1, #1
   162a8:	str	r3, [fp, #-16]
   162ac:	mov	r3, r1
   162b0:	and	r3, r3, #1
   162b4:	uxtb	r3, r3
   162b8:	cmp	r3, #0
   162bc:	beq	162c8 <__assert_fail@plt+0x50a0>
   162c0:	mvn	r3, #-2147483648	; 0x80000000
   162c4:	str	r3, [fp, #-16]
   162c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   162cc:	cmp	r3, #0
   162d0:	blt	162ec <__assert_fail@plt+0x50c4>
   162d4:	ldr	r3, [fp, #-16]
   162d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   162dc:	cmp	r2, r3
   162e0:	bge	162ec <__assert_fail@plt+0x50c4>
   162e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   162e8:	str	r3, [fp, #-16]
   162ec:	ldr	r2, [fp, #-16]
   162f0:	mov	lr, #0
   162f4:	ldr	r3, [fp, #4]
   162f8:	smull	r2, r3, r2, r3
   162fc:	mov	r0, #0
   16300:	mov	r1, #0
   16304:	mov	r0, r3
   16308:	asr	r1, r3, #31
   1630c:	asr	ip, r2, #31
   16310:	cmp	ip, r0
   16314:	beq	1631c <__assert_fail@plt+0x50f4>
   16318:	mov	lr, #1
   1631c:	mov	r3, r2
   16320:	str	r3, [fp, #-20]	; 0xffffffec
   16324:	mov	r3, lr
   16328:	and	r3, r3, #1
   1632c:	uxtb	r3, r3
   16330:	cmp	r3, #0
   16334:	beq	16340 <__assert_fail@plt+0x5118>
   16338:	mvn	r3, #-2147483648	; 0x80000000
   1633c:	b	16358 <__assert_fail@plt+0x5130>
   16340:	ldr	r3, [fp, #-20]	; 0xffffffec
   16344:	cmp	r3, #63	; 0x3f
   16348:	bgt	16354 <__assert_fail@plt+0x512c>
   1634c:	mov	r3, #64	; 0x40
   16350:	b	16358 <__assert_fail@plt+0x5130>
   16354:	mov	r3, #0
   16358:	str	r3, [fp, #-12]
   1635c:	ldr	r3, [fp, #-12]
   16360:	cmp	r3, #0
   16364:	beq	1639c <__assert_fail@plt+0x5174>
   16368:	ldr	r2, [fp, #-12]
   1636c:	ldr	r3, [fp, #4]
   16370:	sdiv	r3, r2, r3
   16374:	str	r3, [fp, #-16]
   16378:	ldr	r3, [fp, #-12]
   1637c:	ldr	r2, [fp, #4]
   16380:	sdiv	r2, r3, r2
   16384:	ldr	r1, [fp, #4]
   16388:	mul	r2, r1, r2
   1638c:	sub	r3, r3, r2
   16390:	ldr	r2, [fp, #-12]
   16394:	sub	r3, r2, r3
   16398:	str	r3, [fp, #-20]	; 0xffffffec
   1639c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163a0:	cmp	r3, #0
   163a4:	bne	163b4 <__assert_fail@plt+0x518c>
   163a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   163ac:	mov	r2, #0
   163b0:	str	r2, [r3]
   163b4:	ldr	r2, [fp, #-16]
   163b8:	ldr	r3, [fp, #-8]
   163bc:	sub	r3, r2, r3
   163c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   163c4:	cmp	r2, r3
   163c8:	ble	16468 <__assert_fail@plt+0x5240>
   163cc:	mov	r1, #0
   163d0:	ldr	r2, [fp, #-8]
   163d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   163d8:	adds	r3, r2, r3
   163dc:	bvc	163e4 <__assert_fail@plt+0x51bc>
   163e0:	mov	r1, #1
   163e4:	str	r3, [fp, #-16]
   163e8:	mov	r3, r1
   163ec:	and	r3, r3, #1
   163f0:	uxtb	r3, r3
   163f4:	cmp	r3, #0
   163f8:	bne	16464 <__assert_fail@plt+0x523c>
   163fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16400:	cmp	r3, #0
   16404:	blt	16418 <__assert_fail@plt+0x51f0>
   16408:	ldr	r3, [fp, #-16]
   1640c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16410:	cmp	r2, r3
   16414:	blt	16464 <__assert_fail@plt+0x523c>
   16418:	ldr	r2, [fp, #-16]
   1641c:	mov	lr, #0
   16420:	ldr	r3, [fp, #4]
   16424:	smull	r2, r3, r2, r3
   16428:	mov	r0, #0
   1642c:	mov	r1, #0
   16430:	mov	r0, r3
   16434:	asr	r1, r3, #31
   16438:	asr	ip, r2, #31
   1643c:	cmp	ip, r0
   16440:	beq	16448 <__assert_fail@plt+0x5220>
   16444:	mov	lr, #1
   16448:	mov	r3, r2
   1644c:	str	r3, [fp, #-20]	; 0xffffffec
   16450:	mov	r3, lr
   16454:	and	r3, r3, #1
   16458:	uxtb	r3, r3
   1645c:	cmp	r3, #0
   16460:	beq	16468 <__assert_fail@plt+0x5240>
   16464:	bl	166f4 <__assert_fail@plt+0x54cc>
   16468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1646c:	mov	r1, r3
   16470:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16474:	bl	15f34 <__assert_fail@plt+0x4d0c>
   16478:	str	r0, [fp, #-24]	; 0xffffffe8
   1647c:	ldr	r2, [fp, #-16]
   16480:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16484:	str	r2, [r3]
   16488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1648c:	mov	r0, r3
   16490:	sub	sp, fp, #4
   16494:	ldr	fp, [sp]
   16498:	add	sp, sp, #4
   1649c:	pop	{pc}		; (ldr pc, [sp], #4)
   164a0:	str	fp, [sp, #-8]!
   164a4:	str	lr, [sp, #4]
   164a8:	add	fp, sp, #4
   164ac:	sub	sp, sp, #8
   164b0:	str	r0, [fp, #-8]
   164b4:	mov	r1, #1
   164b8:	ldr	r0, [fp, #-8]
   164bc:	bl	16510 <__assert_fail@plt+0x52e8>
   164c0:	mov	r3, r0
   164c4:	mov	r0, r3
   164c8:	sub	sp, fp, #4
   164cc:	ldr	fp, [sp]
   164d0:	add	sp, sp, #4
   164d4:	pop	{pc}		; (ldr pc, [sp], #4)
   164d8:	str	fp, [sp, #-8]!
   164dc:	str	lr, [sp, #4]
   164e0:	add	fp, sp, #4
   164e4:	sub	sp, sp, #8
   164e8:	str	r0, [fp, #-8]
   164ec:	mov	r1, #1
   164f0:	ldr	r0, [fp, #-8]
   164f4:	bl	16558 <__assert_fail@plt+0x5330>
   164f8:	mov	r3, r0
   164fc:	mov	r0, r3
   16500:	sub	sp, fp, #4
   16504:	ldr	fp, [sp]
   16508:	add	sp, sp, #4
   1650c:	pop	{pc}		; (ldr pc, [sp], #4)
   16510:	str	fp, [sp, #-8]!
   16514:	str	lr, [sp, #4]
   16518:	add	fp, sp, #4
   1651c:	sub	sp, sp, #8
   16520:	str	r0, [fp, #-8]
   16524:	str	r1, [fp, #-12]
   16528:	ldr	r1, [fp, #-12]
   1652c:	ldr	r0, [fp, #-8]
   16530:	bl	177ac <__assert_fail@plt+0x6584>
   16534:	mov	r3, r0
   16538:	mov	r0, r3
   1653c:	bl	15e44 <__assert_fail@plt+0x4c1c>
   16540:	mov	r3, r0
   16544:	mov	r0, r3
   16548:	sub	sp, fp, #4
   1654c:	ldr	fp, [sp]
   16550:	add	sp, sp, #4
   16554:	pop	{pc}		; (ldr pc, [sp], #4)
   16558:	str	fp, [sp, #-8]!
   1655c:	str	lr, [sp, #4]
   16560:	add	fp, sp, #4
   16564:	sub	sp, sp, #8
   16568:	str	r0, [fp, #-8]
   1656c:	str	r1, [fp, #-12]
   16570:	ldr	r1, [fp, #-12]
   16574:	ldr	r0, [fp, #-8]
   16578:	bl	17ed0 <__assert_fail@plt+0x6ca8>
   1657c:	mov	r3, r0
   16580:	mov	r0, r3
   16584:	bl	15e44 <__assert_fail@plt+0x4c1c>
   16588:	mov	r3, r0
   1658c:	mov	r0, r3
   16590:	sub	sp, fp, #4
   16594:	ldr	fp, [sp]
   16598:	add	sp, sp, #4
   1659c:	pop	{pc}		; (ldr pc, [sp], #4)
   165a0:	str	fp, [sp, #-8]!
   165a4:	str	lr, [sp, #4]
   165a8:	add	fp, sp, #4
   165ac:	sub	sp, sp, #8
   165b0:	str	r0, [fp, #-8]
   165b4:	str	r1, [fp, #-12]
   165b8:	ldr	r0, [fp, #-12]
   165bc:	bl	15e80 <__assert_fail@plt+0x4c58>
   165c0:	mov	r3, r0
   165c4:	ldr	r2, [fp, #-12]
   165c8:	ldr	r1, [fp, #-8]
   165cc:	mov	r0, r3
   165d0:	bl	10f94 <memcpy@plt>
   165d4:	mov	r3, r0
   165d8:	mov	r0, r3
   165dc:	sub	sp, fp, #4
   165e0:	ldr	fp, [sp]
   165e4:	add	sp, sp, #4
   165e8:	pop	{pc}		; (ldr pc, [sp], #4)
   165ec:	str	fp, [sp, #-8]!
   165f0:	str	lr, [sp, #4]
   165f4:	add	fp, sp, #4
   165f8:	sub	sp, sp, #8
   165fc:	str	r0, [fp, #-8]
   16600:	str	r1, [fp, #-12]
   16604:	ldr	r0, [fp, #-12]
   16608:	bl	15ec0 <__assert_fail@plt+0x4c98>
   1660c:	mov	r3, r0
   16610:	mov	r0, r3
   16614:	ldr	r3, [fp, #-12]
   16618:	mov	r2, r3
   1661c:	ldr	r1, [fp, #-8]
   16620:	bl	10f94 <memcpy@plt>
   16624:	mov	r3, r0
   16628:	mov	r0, r3
   1662c:	sub	sp, fp, #4
   16630:	ldr	fp, [sp]
   16634:	add	sp, sp, #4
   16638:	pop	{pc}		; (ldr pc, [sp], #4)
   1663c:	str	fp, [sp, #-8]!
   16640:	str	lr, [sp, #4]
   16644:	add	fp, sp, #4
   16648:	sub	sp, sp, #16
   1664c:	str	r0, [fp, #-16]
   16650:	str	r1, [fp, #-20]	; 0xffffffec
   16654:	ldr	r3, [fp, #-20]	; 0xffffffec
   16658:	add	r3, r3, #1
   1665c:	mov	r0, r3
   16660:	bl	15ec0 <__assert_fail@plt+0x4c98>
   16664:	mov	r3, r0
   16668:	str	r3, [fp, #-8]
   1666c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16670:	ldr	r2, [fp, #-8]
   16674:	add	r3, r2, r3
   16678:	mov	r2, #0
   1667c:	strb	r2, [r3]
   16680:	ldr	r3, [fp, #-20]	; 0xffffffec
   16684:	mov	r2, r3
   16688:	ldr	r1, [fp, #-16]
   1668c:	ldr	r0, [fp, #-8]
   16690:	bl	10f94 <memcpy@plt>
   16694:	mov	r3, r0
   16698:	mov	r0, r3
   1669c:	sub	sp, fp, #4
   166a0:	ldr	fp, [sp]
   166a4:	add	sp, sp, #4
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	str	fp, [sp, #-8]!
   166b0:	str	lr, [sp, #4]
   166b4:	add	fp, sp, #4
   166b8:	sub	sp, sp, #8
   166bc:	str	r0, [fp, #-8]
   166c0:	ldr	r0, [fp, #-8]
   166c4:	bl	110f0 <strlen@plt>
   166c8:	mov	r3, r0
   166cc:	add	r3, r3, #1
   166d0:	mov	r1, r3
   166d4:	ldr	r0, [fp, #-8]
   166d8:	bl	165a0 <__assert_fail@plt+0x5378>
   166dc:	mov	r3, r0
   166e0:	mov	r0, r3
   166e4:	sub	sp, fp, #4
   166e8:	ldr	fp, [sp]
   166ec:	add	sp, sp, #4
   166f0:	pop	{pc}		; (ldr pc, [sp], #4)
   166f4:	strd	r4, [sp, #-16]!
   166f8:	str	fp, [sp, #8]
   166fc:	str	lr, [sp, #12]
   16700:	add	fp, sp, #12
   16704:	movw	r3, #41256	; 0xa128
   16708:	movt	r3, #2
   1670c:	ldr	r4, [r3]
   16710:	movw	r0, #40096	; 0x9ca0
   16714:	movt	r0, #1
   16718:	bl	110d8 <gettext@plt>
   1671c:	mov	r3, r0
   16720:	movw	r2, #40116	; 0x9cb4
   16724:	movt	r2, #1
   16728:	mov	r1, #0
   1672c:	mov	r0, r4
   16730:	bl	11060 <error@plt>
   16734:	bl	11204 <abort@plt>
   16738:	str	fp, [sp, #-8]!
   1673c:	str	lr, [sp, #4]
   16740:	add	fp, sp, #4
   16744:	sub	sp, sp, #24
   16748:	str	r0, [fp, #-16]
   1674c:	str	r1, [fp, #-20]	; 0xffffffec
   16750:	str	r2, [fp, #-24]	; 0xffffffe8
   16754:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16758:	ldr	r1, [fp, #-20]	; 0xffffffec
   1675c:	ldr	r0, [fp, #-16]
   16760:	bl	181dc <__assert_fail@plt+0x6fb4>
   16764:	str	r0, [fp, #-8]
   16768:	ldr	r3, [fp, #-8]
   1676c:	cmn	r3, #1
   16770:	bne	1678c <__assert_fail@plt+0x5564>
   16774:	bl	11114 <__errno_location@plt>
   16778:	mov	r3, r0
   1677c:	ldr	r3, [r3]
   16780:	cmp	r3, #12
   16784:	bne	1678c <__assert_fail@plt+0x5564>
   16788:	bl	166f4 <__assert_fail@plt+0x54cc>
   1678c:	ldr	r3, [fp, #-8]
   16790:	mov	r0, r3
   16794:	sub	sp, fp, #4
   16798:	ldr	fp, [sp]
   1679c:	add	sp, sp, #4
   167a0:	pop	{pc}		; (ldr pc, [sp], #4)
   167a4:	push	{fp}		; (str fp, [sp, #-4]!)
   167a8:	add	fp, sp, #0
   167ac:	sub	sp, sp, #20
   167b0:	str	r0, [fp, #-16]
   167b4:	str	r1, [fp, #-20]	; 0xffffffec
   167b8:	ldr	r3, [fp, #-16]
   167bc:	ldr	r3, [r3]
   167c0:	mov	ip, #0
   167c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   167c8:	cmp	r2, #0
   167cc:	bge	167dc <__assert_fail@plt+0x55b4>
   167d0:	cmp	r3, #0
   167d4:	beq	167dc <__assert_fail@plt+0x55b4>
   167d8:	mov	ip, #1
   167dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   167e0:	umull	r0, r1, r3, r2
   167e4:	mov	r2, #0
   167e8:	mov	r3, #0
   167ec:	mov	r2, r1
   167f0:	mov	r3, #0
   167f4:	cmp	r2, #0
   167f8:	beq	16800 <__assert_fail@plt+0x55d8>
   167fc:	mov	ip, #1
   16800:	mov	r3, r0
   16804:	str	r3, [fp, #-8]
   16808:	mov	r3, ip
   1680c:	and	r3, r3, #1
   16810:	uxtb	r3, r3
   16814:	cmp	r3, #0
   16818:	beq	16830 <__assert_fail@plt+0x5608>
   1681c:	ldr	r3, [fp, #-16]
   16820:	mvn	r2, #0
   16824:	str	r2, [r3]
   16828:	mov	r3, #1
   1682c:	b	16840 <__assert_fail@plt+0x5618>
   16830:	ldr	r2, [fp, #-8]
   16834:	ldr	r3, [fp, #-16]
   16838:	str	r2, [r3]
   1683c:	mov	r3, #0
   16840:	mov	r0, r3
   16844:	add	sp, fp, #0
   16848:	pop	{fp}		; (ldr fp, [sp], #4)
   1684c:	bx	lr
   16850:	str	fp, [sp, #-8]!
   16854:	str	lr, [sp, #4]
   16858:	add	fp, sp, #4
   1685c:	sub	sp, sp, #24
   16860:	str	r0, [fp, #-16]
   16864:	str	r1, [fp, #-20]	; 0xffffffec
   16868:	str	r2, [fp, #-24]	; 0xffffffe8
   1686c:	mov	r3, #0
   16870:	str	r3, [fp, #-8]
   16874:	b	16894 <__assert_fail@plt+0x566c>
   16878:	ldr	r1, [fp, #-20]	; 0xffffffec
   1687c:	ldr	r0, [fp, #-16]
   16880:	bl	167a4 <__assert_fail@plt+0x557c>
   16884:	mov	r2, r0
   16888:	ldr	r3, [fp, #-8]
   1688c:	orr	r3, r3, r2
   16890:	str	r3, [fp, #-8]
   16894:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16898:	sub	r2, r3, #1
   1689c:	str	r2, [fp, #-24]	; 0xffffffe8
   168a0:	cmp	r3, #0
   168a4:	bne	16878 <__assert_fail@plt+0x5650>
   168a8:	ldr	r3, [fp, #-8]
   168ac:	mov	r0, r3
   168b0:	sub	sp, fp, #4
   168b4:	ldr	fp, [sp]
   168b8:	add	sp, sp, #4
   168bc:	pop	{pc}		; (ldr pc, [sp], #4)
   168c0:	str	fp, [sp, #-8]!
   168c4:	str	lr, [sp, #4]
   168c8:	add	fp, sp, #4
   168cc:	sub	sp, sp, #56	; 0x38
   168d0:	str	r0, [fp, #-48]	; 0xffffffd0
   168d4:	str	r1, [fp, #-52]	; 0xffffffcc
   168d8:	str	r2, [fp, #-56]	; 0xffffffc8
   168dc:	str	r3, [fp, #-60]	; 0xffffffc4
   168e0:	mov	r3, #0
   168e4:	str	r3, [fp, #-8]
   168e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   168ec:	cmp	r3, #0
   168f0:	blt	16900 <__assert_fail@plt+0x56d8>
   168f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   168f8:	cmp	r3, #36	; 0x24
   168fc:	ble	16920 <__assert_fail@plt+0x56f8>
   16900:	movw	r3, #40176	; 0x9cf0
   16904:	movt	r3, #1
   16908:	mov	r2, #85	; 0x55
   1690c:	movw	r1, #40120	; 0x9cb8
   16910:	movt	r1, #1
   16914:	movw	r0, #40136	; 0x9cc8
   16918:	movt	r0, #1
   1691c:	bl	11228 <__assert_fail@plt>
   16920:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16924:	cmp	r3, #0
   16928:	bne	16934 <__assert_fail@plt+0x570c>
   1692c:	sub	r3, fp, #36	; 0x24
   16930:	b	16938 <__assert_fail@plt+0x5710>
   16934:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16938:	str	r3, [fp, #-32]	; 0xffffffe0
   1693c:	bl	11114 <__errno_location@plt>
   16940:	mov	r2, r0
   16944:	mov	r3, #0
   16948:	str	r3, [r2]
   1694c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16950:	str	r3, [fp, #-12]
   16954:	ldr	r3, [fp, #-12]
   16958:	ldrb	r3, [r3]
   1695c:	strb	r3, [fp, #-13]
   16960:	b	1697c <__assert_fail@plt+0x5754>
   16964:	ldr	r3, [fp, #-12]
   16968:	add	r3, r3, #1
   1696c:	str	r3, [fp, #-12]
   16970:	ldr	r3, [fp, #-12]
   16974:	ldrb	r3, [r3]
   16978:	strb	r3, [fp, #-13]
   1697c:	bl	110c0 <__ctype_b_loc@plt>
   16980:	mov	r3, r0
   16984:	ldr	r2, [r3]
   16988:	ldrb	r3, [fp, #-13]
   1698c:	lsl	r3, r3, #1
   16990:	add	r3, r2, r3
   16994:	ldrh	r3, [r3]
   16998:	and	r3, r3, #8192	; 0x2000
   1699c:	cmp	r3, #0
   169a0:	bne	16964 <__assert_fail@plt+0x573c>
   169a4:	ldrb	r3, [fp, #-13]
   169a8:	cmp	r3, #45	; 0x2d
   169ac:	bne	169b8 <__assert_fail@plt+0x5790>
   169b0:	mov	r3, #4
   169b4:	b	16ef8 <__assert_fail@plt+0x5cd0>
   169b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   169bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   169c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   169c4:	bl	110e4 <strtoul@plt>
   169c8:	mov	r3, r0
   169cc:	str	r3, [fp, #-40]	; 0xffffffd8
   169d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   169d4:	ldr	r3, [r3]
   169d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   169dc:	cmp	r2, r3
   169e0:	bne	16a3c <__assert_fail@plt+0x5814>
   169e4:	ldr	r3, [fp, #4]
   169e8:	cmp	r3, #0
   169ec:	beq	16a34 <__assert_fail@plt+0x580c>
   169f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   169f4:	ldr	r3, [r3]
   169f8:	ldrb	r3, [r3]
   169fc:	cmp	r3, #0
   16a00:	beq	16a34 <__assert_fail@plt+0x580c>
   16a04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a08:	ldr	r3, [r3]
   16a0c:	ldrb	r3, [r3]
   16a10:	mov	r1, r3
   16a14:	ldr	r0, [fp, #4]
   16a18:	bl	110fc <strchr@plt>
   16a1c:	mov	r3, r0
   16a20:	cmp	r3, #0
   16a24:	beq	16a34 <__assert_fail@plt+0x580c>
   16a28:	mov	r3, #1
   16a2c:	str	r3, [fp, #-40]	; 0xffffffd8
   16a30:	b	16a74 <__assert_fail@plt+0x584c>
   16a34:	mov	r3, #4
   16a38:	b	16ef8 <__assert_fail@plt+0x5cd0>
   16a3c:	bl	11114 <__errno_location@plt>
   16a40:	mov	r3, r0
   16a44:	ldr	r3, [r3]
   16a48:	cmp	r3, #0
   16a4c:	beq	16a74 <__assert_fail@plt+0x584c>
   16a50:	bl	11114 <__errno_location@plt>
   16a54:	mov	r3, r0
   16a58:	ldr	r3, [r3]
   16a5c:	cmp	r3, #34	; 0x22
   16a60:	beq	16a6c <__assert_fail@plt+0x5844>
   16a64:	mov	r3, #4
   16a68:	b	16ef8 <__assert_fail@plt+0x5cd0>
   16a6c:	mov	r3, #1
   16a70:	str	r3, [fp, #-8]
   16a74:	ldr	r3, [fp, #4]
   16a78:	cmp	r3, #0
   16a7c:	bne	16a94 <__assert_fail@plt+0x586c>
   16a80:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16a84:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16a88:	str	r2, [r3]
   16a8c:	ldr	r3, [fp, #-8]
   16a90:	b	16ef8 <__assert_fail@plt+0x5cd0>
   16a94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a98:	ldr	r3, [r3]
   16a9c:	ldrb	r3, [r3]
   16aa0:	cmp	r3, #0
   16aa4:	beq	16ee8 <__assert_fail@plt+0x5cc0>
   16aa8:	mov	r3, #1024	; 0x400
   16aac:	str	r3, [fp, #-20]	; 0xffffffec
   16ab0:	mov	r3, #1
   16ab4:	str	r3, [fp, #-24]	; 0xffffffe8
   16ab8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16abc:	ldr	r3, [r3]
   16ac0:	ldrb	r3, [r3]
   16ac4:	mov	r1, r3
   16ac8:	ldr	r0, [fp, #4]
   16acc:	bl	110fc <strchr@plt>
   16ad0:	mov	r3, r0
   16ad4:	cmp	r3, #0
   16ad8:	bne	16af4 <__assert_fail@plt+0x58cc>
   16adc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16ae0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16ae4:	str	r2, [r3]
   16ae8:	ldr	r3, [fp, #-8]
   16aec:	orr	r3, r3, #2
   16af0:	b	16ef8 <__assert_fail@plt+0x5cd0>
   16af4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16af8:	ldr	r3, [r3]
   16afc:	ldrb	r3, [r3]
   16b00:	sub	r3, r3, #69	; 0x45
   16b04:	cmp	r3, #47	; 0x2f
   16b08:	ldrls	pc, [pc, r3, lsl #2]
   16b0c:	b	16c60 <__assert_fail@plt+0x5a38>
   16b10:	ldrdeq	r6, [r1], -r0
   16b14:	andeq	r6, r1, r0, ror #24
   16b18:	ldrdeq	r6, [r1], -r0
   16b1c:	andeq	r6, r1, r0, ror #24
   16b20:	andeq	r6, r1, r0, ror #24
   16b24:	andeq	r6, r1, r0, ror #24
   16b28:	ldrdeq	r6, [r1], -r0
   16b2c:	andeq	r6, r1, r0, ror #24
   16b30:	ldrdeq	r6, [r1], -r0
   16b34:	andeq	r6, r1, r0, ror #24
   16b38:	andeq	r6, r1, r0, ror #24
   16b3c:	ldrdeq	r6, [r1], -r0
   16b40:	andeq	r6, r1, r0, ror #24
   16b44:	andeq	r6, r1, r0, ror #24
   16b48:	andeq	r6, r1, r0, ror #24
   16b4c:	ldrdeq	r6, [r1], -r0
   16b50:	andeq	r6, r1, r0, ror #24
   16b54:	andeq	r6, r1, r0, ror #24
   16b58:	andeq	r6, r1, r0, ror #24
   16b5c:	andeq	r6, r1, r0, ror #24
   16b60:	ldrdeq	r6, [r1], -r0
   16b64:	ldrdeq	r6, [r1], -r0
   16b68:	andeq	r6, r1, r0, ror #24
   16b6c:	andeq	r6, r1, r0, ror #24
   16b70:	andeq	r6, r1, r0, ror #24
   16b74:	andeq	r6, r1, r0, ror #24
   16b78:	andeq	r6, r1, r0, ror #24
   16b7c:	andeq	r6, r1, r0, ror #24
   16b80:	andeq	r6, r1, r0, ror #24
   16b84:	andeq	r6, r1, r0, ror #24
   16b88:	andeq	r6, r1, r0, ror #24
   16b8c:	andeq	r6, r1, r0, ror #24
   16b90:	andeq	r6, r1, r0, ror #24
   16b94:	andeq	r6, r1, r0, ror #24
   16b98:	ldrdeq	r6, [r1], -r0
   16b9c:	andeq	r6, r1, r0, ror #24
   16ba0:	andeq	r6, r1, r0, ror #24
   16ba4:	andeq	r6, r1, r0, ror #24
   16ba8:	ldrdeq	r6, [r1], -r0
   16bac:	andeq	r6, r1, r0, ror #24
   16bb0:	ldrdeq	r6, [r1], -r0
   16bb4:	andeq	r6, r1, r0, ror #24
   16bb8:	andeq	r6, r1, r0, ror #24
   16bbc:	andeq	r6, r1, r0, ror #24
   16bc0:	andeq	r6, r1, r0, ror #24
   16bc4:	andeq	r6, r1, r0, ror #24
   16bc8:	andeq	r6, r1, r0, ror #24
   16bcc:	ldrdeq	r6, [r1], -r0
   16bd0:	mov	r1, #48	; 0x30
   16bd4:	ldr	r0, [fp, #4]
   16bd8:	bl	110fc <strchr@plt>
   16bdc:	mov	r3, r0
   16be0:	cmp	r3, #0
   16be4:	beq	16c54 <__assert_fail@plt+0x5a2c>
   16be8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bec:	ldr	r3, [r3]
   16bf0:	add	r3, r3, #1
   16bf4:	ldrb	r3, [r3]
   16bf8:	cmp	r3, #68	; 0x44
   16bfc:	beq	16c3c <__assert_fail@plt+0x5a14>
   16c00:	cmp	r3, #105	; 0x69
   16c04:	beq	16c14 <__assert_fail@plt+0x59ec>
   16c08:	cmp	r3, #66	; 0x42
   16c0c:	beq	16c3c <__assert_fail@plt+0x5a14>
   16c10:	b	16c60 <__assert_fail@plt+0x5a38>
   16c14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c18:	ldr	r3, [r3]
   16c1c:	add	r3, r3, #2
   16c20:	ldrb	r3, [r3]
   16c24:	cmp	r3, #66	; 0x42
   16c28:	bne	16c5c <__assert_fail@plt+0x5a34>
   16c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c30:	add	r3, r3, #2
   16c34:	str	r3, [fp, #-24]	; 0xffffffe8
   16c38:	b	16c5c <__assert_fail@plt+0x5a34>
   16c3c:	mov	r3, #1000	; 0x3e8
   16c40:	str	r3, [fp, #-20]	; 0xffffffec
   16c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c48:	add	r3, r3, #1
   16c4c:	str	r3, [fp, #-24]	; 0xffffffe8
   16c50:	b	16c60 <__assert_fail@plt+0x5a38>
   16c54:	nop	{0}
   16c58:	b	16c60 <__assert_fail@plt+0x5a38>
   16c5c:	nop	{0}
   16c60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c64:	ldr	r3, [r3]
   16c68:	ldrb	r3, [r3]
   16c6c:	sub	r3, r3, #66	; 0x42
   16c70:	cmp	r3, #53	; 0x35
   16c74:	ldrls	pc, [pc, r3, lsl #2]
   16c78:	b	16e88 <__assert_fail@plt+0x5c60>
   16c7c:	andeq	r6, r1, ip, ror #26
   16c80:	andeq	r6, r1, r8, lsl #29
   16c84:	andeq	r6, r1, r8, lsl #29
   16c88:	muleq	r1, r0, sp
   16c8c:	andeq	r6, r1, r8, lsl #29
   16c90:	andeq	r6, r1, ip, lsr #27
   16c94:	andeq	r6, r1, r8, lsl #29
   16c98:	andeq	r6, r1, r8, lsl #29
   16c9c:	andeq	r6, r1, r8, lsl #29
   16ca0:	andeq	r6, r1, r8, asr #27
   16ca4:	andeq	r6, r1, r8, lsl #29
   16ca8:	andeq	r6, r1, r4, ror #27
   16cac:	andeq	r6, r1, r8, lsl #29
   16cb0:	andeq	r6, r1, r8, lsl #29
   16cb4:	andeq	r6, r1, r0, lsl #28
   16cb8:	andeq	r6, r1, r8, lsl #29
   16cbc:	andeq	r6, r1, r8, lsl #29
   16cc0:	andeq	r6, r1, r8, lsl #29
   16cc4:	andeq	r6, r1, ip, lsl lr
   16cc8:	andeq	r6, r1, r8, lsl #29
   16ccc:	andeq	r6, r1, r8, lsl #29
   16cd0:	andeq	r6, r1, r8, lsl #29
   16cd4:	andeq	r6, r1, r8, lsl #29
   16cd8:	andeq	r6, r1, r0, asr lr
   16cdc:	andeq	r6, r1, ip, ror #28
   16ce0:	andeq	r6, r1, r8, lsl #29
   16ce4:	andeq	r6, r1, r8, lsl #29
   16ce8:	andeq	r6, r1, r8, lsl #29
   16cec:	andeq	r6, r1, r8, lsl #29
   16cf0:	andeq	r6, r1, r8, lsl #29
   16cf4:	andeq	r6, r1, r8, lsl #29
   16cf8:	andeq	r6, r1, r8, lsl #29
   16cfc:	andeq	r6, r1, r4, asr sp
   16d00:	andeq	r6, r1, r4, lsl #27
   16d04:	andeq	r6, r1, r8, lsl #29
   16d08:	andeq	r6, r1, r8, lsl #29
   16d0c:	andeq	r6, r1, r8, lsl #29
   16d10:	andeq	r6, r1, ip, lsr #27
   16d14:	andeq	r6, r1, r8, lsl #29
   16d18:	andeq	r6, r1, r8, lsl #29
   16d1c:	andeq	r6, r1, r8, lsl #29
   16d20:	andeq	r6, r1, r8, asr #27
   16d24:	andeq	r6, r1, r8, lsl #29
   16d28:	andeq	r6, r1, r4, ror #27
   16d2c:	andeq	r6, r1, r8, lsl #29
   16d30:	andeq	r6, r1, r8, lsl #29
   16d34:	andeq	r6, r1, r8, lsl #29
   16d38:	andeq	r6, r1, r8, lsl #29
   16d3c:	andeq	r6, r1, r8, lsl #29
   16d40:	andeq	r6, r1, r8, lsl #29
   16d44:	andeq	r6, r1, ip, lsl lr
   16d48:	andeq	r6, r1, r8, lsl #29
   16d4c:	andeq	r6, r1, r8, lsl #29
   16d50:	andeq	r6, r1, r8, lsr lr
   16d54:	sub	r3, fp, #40	; 0x28
   16d58:	mov	r1, #512	; 0x200
   16d5c:	mov	r0, r3
   16d60:	bl	167a4 <__assert_fail@plt+0x557c>
   16d64:	str	r0, [fp, #-28]	; 0xffffffe4
   16d68:	b	16ea0 <__assert_fail@plt+0x5c78>
   16d6c:	sub	r3, fp, #40	; 0x28
   16d70:	mov	r1, #1024	; 0x400
   16d74:	mov	r0, r3
   16d78:	bl	167a4 <__assert_fail@plt+0x557c>
   16d7c:	str	r0, [fp, #-28]	; 0xffffffe4
   16d80:	b	16ea0 <__assert_fail@plt+0x5c78>
   16d84:	mov	r3, #0
   16d88:	str	r3, [fp, #-28]	; 0xffffffe4
   16d8c:	b	16ea0 <__assert_fail@plt+0x5c78>
   16d90:	sub	r3, fp, #40	; 0x28
   16d94:	mov	r2, #6
   16d98:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d9c:	mov	r0, r3
   16da0:	bl	16850 <__assert_fail@plt+0x5628>
   16da4:	str	r0, [fp, #-28]	; 0xffffffe4
   16da8:	b	16ea0 <__assert_fail@plt+0x5c78>
   16dac:	sub	r3, fp, #40	; 0x28
   16db0:	mov	r2, #3
   16db4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16db8:	mov	r0, r3
   16dbc:	bl	16850 <__assert_fail@plt+0x5628>
   16dc0:	str	r0, [fp, #-28]	; 0xffffffe4
   16dc4:	b	16ea0 <__assert_fail@plt+0x5c78>
   16dc8:	sub	r3, fp, #40	; 0x28
   16dcc:	mov	r2, #1
   16dd0:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dd4:	mov	r0, r3
   16dd8:	bl	16850 <__assert_fail@plt+0x5628>
   16ddc:	str	r0, [fp, #-28]	; 0xffffffe4
   16de0:	b	16ea0 <__assert_fail@plt+0x5c78>
   16de4:	sub	r3, fp, #40	; 0x28
   16de8:	mov	r2, #2
   16dec:	ldr	r1, [fp, #-20]	; 0xffffffec
   16df0:	mov	r0, r3
   16df4:	bl	16850 <__assert_fail@plt+0x5628>
   16df8:	str	r0, [fp, #-28]	; 0xffffffe4
   16dfc:	b	16ea0 <__assert_fail@plt+0x5c78>
   16e00:	sub	r3, fp, #40	; 0x28
   16e04:	mov	r2, #5
   16e08:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e0c:	mov	r0, r3
   16e10:	bl	16850 <__assert_fail@plt+0x5628>
   16e14:	str	r0, [fp, #-28]	; 0xffffffe4
   16e18:	b	16ea0 <__assert_fail@plt+0x5c78>
   16e1c:	sub	r3, fp, #40	; 0x28
   16e20:	mov	r2, #4
   16e24:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e28:	mov	r0, r3
   16e2c:	bl	16850 <__assert_fail@plt+0x5628>
   16e30:	str	r0, [fp, #-28]	; 0xffffffe4
   16e34:	b	16ea0 <__assert_fail@plt+0x5c78>
   16e38:	sub	r3, fp, #40	; 0x28
   16e3c:	mov	r1, #2
   16e40:	mov	r0, r3
   16e44:	bl	167a4 <__assert_fail@plt+0x557c>
   16e48:	str	r0, [fp, #-28]	; 0xffffffe4
   16e4c:	b	16ea0 <__assert_fail@plt+0x5c78>
   16e50:	sub	r3, fp, #40	; 0x28
   16e54:	mov	r2, #8
   16e58:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e5c:	mov	r0, r3
   16e60:	bl	16850 <__assert_fail@plt+0x5628>
   16e64:	str	r0, [fp, #-28]	; 0xffffffe4
   16e68:	b	16ea0 <__assert_fail@plt+0x5c78>
   16e6c:	sub	r3, fp, #40	; 0x28
   16e70:	mov	r2, #7
   16e74:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e78:	mov	r0, r3
   16e7c:	bl	16850 <__assert_fail@plt+0x5628>
   16e80:	str	r0, [fp, #-28]	; 0xffffffe4
   16e84:	b	16ea0 <__assert_fail@plt+0x5c78>
   16e88:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16e8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16e90:	str	r2, [r3]
   16e94:	ldr	r3, [fp, #-8]
   16e98:	orr	r3, r3, #2
   16e9c:	b	16ef8 <__assert_fail@plt+0x5cd0>
   16ea0:	ldr	r2, [fp, #-8]
   16ea4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ea8:	orr	r3, r2, r3
   16eac:	str	r3, [fp, #-8]
   16eb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16eb4:	ldr	r2, [r3]
   16eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ebc:	add	r2, r2, r3
   16ec0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ec4:	str	r2, [r3]
   16ec8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ecc:	ldr	r3, [r3]
   16ed0:	ldrb	r3, [r3]
   16ed4:	cmp	r3, #0
   16ed8:	beq	16ee8 <__assert_fail@plt+0x5cc0>
   16edc:	ldr	r3, [fp, #-8]
   16ee0:	orr	r3, r3, #2
   16ee4:	str	r3, [fp, #-8]
   16ee8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16eec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16ef0:	str	r2, [r3]
   16ef4:	ldr	r3, [fp, #-8]
   16ef8:	mov	r0, r3
   16efc:	sub	sp, fp, #4
   16f00:	ldr	fp, [sp]
   16f04:	add	sp, sp, #4
   16f08:	pop	{pc}		; (ldr pc, [sp], #4)
   16f0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16f10:	strd	r6, [sp, #8]
   16f14:	strd	r8, [sp, #16]
   16f18:	str	fp, [sp, #24]
   16f1c:	add	fp, sp, #24
   16f20:	sub	sp, sp, #44	; 0x2c
   16f24:	str	r0, [fp, #-40]	; 0xffffffd8
   16f28:	str	r1, [fp, #-44]	; 0xffffffd4
   16f2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16f30:	ldrd	r4, [r3]
   16f34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16f38:	mov	r6, r3
   16f3c:	asr	r7, r6, #31
   16f40:	mov	r2, #0
   16f44:	mov	r3, #0
   16f48:	strd	r2, [fp, #-60]	; 0xffffffc4
   16f4c:	cmp	r6, #0
   16f50:	sbcs	r3, r7, #0
   16f54:	bge	16f6c <__assert_fail@plt+0x5d44>
   16f58:	orrs	r3, r4, r5
   16f5c:	beq	16f6c <__assert_fail@plt+0x5d44>
   16f60:	mov	r2, #1
   16f64:	mov	r3, #0
   16f68:	strd	r2, [fp, #-60]	; 0xffffffc4
   16f6c:	mov	r0, #0
   16f70:	mov	r1, #0
   16f74:	mov	r0, r7
   16f78:	mov	r1, #0
   16f7c:	mov	r2, #0
   16f80:	mov	r3, #0
   16f84:	mov	r2, r5
   16f88:	mov	r3, #0
   16f8c:	cmp	r0, #0
   16f90:	bne	16fb4 <__assert_fail@plt+0x5d8c>
   16f94:	cmp	r2, #0
   16f98:	bne	16fa8 <__assert_fail@plt+0x5d80>
   16f9c:	umull	r2, r3, r6, r4
   16fa0:	strd	r2, [fp, #-52]	; 0xffffffcc
   16fa4:	b	17080 <__assert_fail@plt+0x5e58>
   16fa8:	mov	r3, r2
   16fac:	mov	r2, r6
   16fb0:	b	16fc4 <__assert_fail@plt+0x5d9c>
   16fb4:	cmp	r2, #0
   16fb8:	bne	1703c <__assert_fail@plt+0x5e14>
   16fbc:	mov	r3, r0
   16fc0:	mov	r2, r4
   16fc4:	umull	r8, r9, r6, r4
   16fc8:	umull	r2, r3, r2, r3
   16fcc:	mov	r0, r2
   16fd0:	mov	r1, r3
   16fd4:	mov	r2, #0
   16fd8:	mov	r3, #0
   16fdc:	mov	r2, r9
   16fe0:	mov	r3, #0
   16fe4:	adds	ip, r0, r2
   16fe8:	str	ip, [fp, #-68]	; 0xffffffbc
   16fec:	adc	r3, r1, r3
   16ff0:	str	r3, [fp, #-64]	; 0xffffffc0
   16ff4:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   16ff8:	mov	r2, #0
   16ffc:	mov	r3, #0
   17000:	mov	r2, r1
   17004:	asr	r3, r1, #31
   17008:	cmp	r2, #0
   1700c:	bne	17058 <__assert_fail@plt+0x5e30>
   17010:	mov	r2, #0
   17014:	mov	r3, #0
   17018:	mov	r3, r0
   1701c:	mov	r2, #0
   17020:	mov	r0, r8
   17024:	mov	r1, #0
   17028:	orr	ip, r2, r0
   1702c:	str	ip, [fp, #-52]	; 0xffffffcc
   17030:	orr	r3, r3, r1
   17034:	str	r3, [fp, #-48]	; 0xffffffd0
   17038:	b	17080 <__assert_fail@plt+0x5e58>
   1703c:	mul	r2, r4, r7
   17040:	mul	r3, r6, r5
   17044:	add	r1, r2, r3
   17048:	umull	r2, r3, r6, r4
   1704c:	add	r1, r1, r3
   17050:	mov	r3, r1
   17054:	strd	r2, [fp, #-52]	; 0xffffffcc
   17058:	mul	r2, r4, r7
   1705c:	mul	r3, r6, r5
   17060:	add	r1, r2, r3
   17064:	umull	r2, r3, r6, r4
   17068:	add	r1, r1, r3
   1706c:	mov	r3, r1
   17070:	strd	r2, [fp, #-52]	; 0xffffffcc
   17074:	mov	r2, #1
   17078:	mov	r3, #0
   1707c:	strd	r2, [fp, #-60]	; 0xffffffc4
   17080:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   17084:	strd	r2, [fp, #-36]	; 0xffffffdc
   17088:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1708c:	mov	r3, r2
   17090:	and	r3, r3, #1
   17094:	uxtb	r3, r3
   17098:	cmp	r3, #0
   1709c:	beq	170b8 <__assert_fail@plt+0x5e90>
   170a0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   170a4:	mvn	r2, #0
   170a8:	mvn	r3, #0
   170ac:	strd	r2, [r1]
   170b0:	mov	r3, #1
   170b4:	b	170c8 <__assert_fail@plt+0x5ea0>
   170b8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   170bc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   170c0:	strd	r2, [r1]
   170c4:	mov	r3, #0
   170c8:	mov	r0, r3
   170cc:	sub	sp, fp, #24
   170d0:	ldrd	r4, [sp]
   170d4:	ldrd	r6, [sp, #8]
   170d8:	ldrd	r8, [sp, #16]
   170dc:	ldr	fp, [sp, #24]
   170e0:	add	sp, sp, #28
   170e4:	bx	lr
   170e8:	str	fp, [sp, #-8]!
   170ec:	str	lr, [sp, #4]
   170f0:	add	fp, sp, #4
   170f4:	sub	sp, sp, #24
   170f8:	str	r0, [fp, #-16]
   170fc:	str	r1, [fp, #-20]	; 0xffffffec
   17100:	str	r2, [fp, #-24]	; 0xffffffe8
   17104:	mov	r3, #0
   17108:	str	r3, [fp, #-8]
   1710c:	b	1712c <__assert_fail@plt+0x5f04>
   17110:	ldr	r1, [fp, #-20]	; 0xffffffec
   17114:	ldr	r0, [fp, #-16]
   17118:	bl	16f0c <__assert_fail@plt+0x5ce4>
   1711c:	mov	r2, r0
   17120:	ldr	r3, [fp, #-8]
   17124:	orr	r3, r3, r2
   17128:	str	r3, [fp, #-8]
   1712c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17130:	sub	r2, r3, #1
   17134:	str	r2, [fp, #-24]	; 0xffffffe8
   17138:	cmp	r3, #0
   1713c:	bne	17110 <__assert_fail@plt+0x5ee8>
   17140:	ldr	r3, [fp, #-8]
   17144:	mov	r0, r3
   17148:	sub	sp, fp, #4
   1714c:	ldr	fp, [sp]
   17150:	add	sp, sp, #4
   17154:	pop	{pc}		; (ldr pc, [sp], #4)
   17158:	str	fp, [sp, #-8]!
   1715c:	str	lr, [sp, #4]
   17160:	add	fp, sp, #4
   17164:	sub	sp, sp, #56	; 0x38
   17168:	str	r0, [fp, #-48]	; 0xffffffd0
   1716c:	str	r1, [fp, #-52]	; 0xffffffcc
   17170:	str	r2, [fp, #-56]	; 0xffffffc8
   17174:	str	r3, [fp, #-60]	; 0xffffffc4
   17178:	mov	r3, #0
   1717c:	str	r3, [fp, #-8]
   17180:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17184:	cmp	r3, #0
   17188:	blt	17198 <__assert_fail@plt+0x5f70>
   1718c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17190:	cmp	r3, #36	; 0x24
   17194:	ble	171b8 <__assert_fail@plt+0x5f90>
   17198:	movw	r3, #40244	; 0x9d34
   1719c:	movt	r3, #1
   171a0:	mov	r2, #85	; 0x55
   171a4:	movw	r1, #40188	; 0x9cfc
   171a8:	movt	r1, #1
   171ac:	movw	r0, #40204	; 0x9d0c
   171b0:	movt	r0, #1
   171b4:	bl	11228 <__assert_fail@plt>
   171b8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   171bc:	cmp	r3, #0
   171c0:	bne	171cc <__assert_fail@plt+0x5fa4>
   171c4:	sub	r3, fp, #36	; 0x24
   171c8:	b	171d0 <__assert_fail@plt+0x5fa8>
   171cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   171d0:	str	r3, [fp, #-32]	; 0xffffffe0
   171d4:	bl	11114 <__errno_location@plt>
   171d8:	mov	r2, r0
   171dc:	mov	r3, #0
   171e0:	str	r3, [r2]
   171e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   171e8:	str	r3, [fp, #-12]
   171ec:	ldr	r3, [fp, #-12]
   171f0:	ldrb	r3, [r3]
   171f4:	strb	r3, [fp, #-13]
   171f8:	b	17214 <__assert_fail@plt+0x5fec>
   171fc:	ldr	r3, [fp, #-12]
   17200:	add	r3, r3, #1
   17204:	str	r3, [fp, #-12]
   17208:	ldr	r3, [fp, #-12]
   1720c:	ldrb	r3, [r3]
   17210:	strb	r3, [fp, #-13]
   17214:	bl	110c0 <__ctype_b_loc@plt>
   17218:	mov	r3, r0
   1721c:	ldr	r2, [r3]
   17220:	ldrb	r3, [fp, #-13]
   17224:	lsl	r3, r3, #1
   17228:	add	r3, r2, r3
   1722c:	ldrh	r3, [r3]
   17230:	and	r3, r3, #8192	; 0x2000
   17234:	cmp	r3, #0
   17238:	bne	171fc <__assert_fail@plt+0x5fd4>
   1723c:	ldrb	r3, [fp, #-13]
   17240:	cmp	r3, #45	; 0x2d
   17244:	bne	17250 <__assert_fail@plt+0x6028>
   17248:	mov	r3, #4
   1724c:	b	17798 <__assert_fail@plt+0x6570>
   17250:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17254:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17258:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1725c:	bl	11168 <strtoumax@plt>
   17260:	mov	r2, r0
   17264:	mov	r3, r1
   17268:	strd	r2, [fp, #-44]	; 0xffffffd4
   1726c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17270:	ldr	r3, [r3]
   17274:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17278:	cmp	r2, r3
   1727c:	bne	172dc <__assert_fail@plt+0x60b4>
   17280:	ldr	r3, [fp, #4]
   17284:	cmp	r3, #0
   17288:	beq	172d4 <__assert_fail@plt+0x60ac>
   1728c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17290:	ldr	r3, [r3]
   17294:	ldrb	r3, [r3]
   17298:	cmp	r3, #0
   1729c:	beq	172d4 <__assert_fail@plt+0x60ac>
   172a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172a4:	ldr	r3, [r3]
   172a8:	ldrb	r3, [r3]
   172ac:	mov	r1, r3
   172b0:	ldr	r0, [fp, #4]
   172b4:	bl	110fc <strchr@plt>
   172b8:	mov	r3, r0
   172bc:	cmp	r3, #0
   172c0:	beq	172d4 <__assert_fail@plt+0x60ac>
   172c4:	mov	r2, #1
   172c8:	mov	r3, #0
   172cc:	strd	r2, [fp, #-44]	; 0xffffffd4
   172d0:	b	17314 <__assert_fail@plt+0x60ec>
   172d4:	mov	r3, #4
   172d8:	b	17798 <__assert_fail@plt+0x6570>
   172dc:	bl	11114 <__errno_location@plt>
   172e0:	mov	r3, r0
   172e4:	ldr	r3, [r3]
   172e8:	cmp	r3, #0
   172ec:	beq	17314 <__assert_fail@plt+0x60ec>
   172f0:	bl	11114 <__errno_location@plt>
   172f4:	mov	r3, r0
   172f8:	ldr	r3, [r3]
   172fc:	cmp	r3, #34	; 0x22
   17300:	beq	1730c <__assert_fail@plt+0x60e4>
   17304:	mov	r3, #4
   17308:	b	17798 <__assert_fail@plt+0x6570>
   1730c:	mov	r3, #1
   17310:	str	r3, [fp, #-8]
   17314:	ldr	r3, [fp, #4]
   17318:	cmp	r3, #0
   1731c:	bne	17334 <__assert_fail@plt+0x610c>
   17320:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17324:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17328:	strd	r2, [r1]
   1732c:	ldr	r3, [fp, #-8]
   17330:	b	17798 <__assert_fail@plt+0x6570>
   17334:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17338:	ldr	r3, [r3]
   1733c:	ldrb	r3, [r3]
   17340:	cmp	r3, #0
   17344:	beq	17788 <__assert_fail@plt+0x6560>
   17348:	mov	r3, #1024	; 0x400
   1734c:	str	r3, [fp, #-20]	; 0xffffffec
   17350:	mov	r3, #1
   17354:	str	r3, [fp, #-24]	; 0xffffffe8
   17358:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1735c:	ldr	r3, [r3]
   17360:	ldrb	r3, [r3]
   17364:	mov	r1, r3
   17368:	ldr	r0, [fp, #4]
   1736c:	bl	110fc <strchr@plt>
   17370:	mov	r3, r0
   17374:	cmp	r3, #0
   17378:	bne	17394 <__assert_fail@plt+0x616c>
   1737c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17380:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17384:	strd	r2, [r1]
   17388:	ldr	r3, [fp, #-8]
   1738c:	orr	r3, r3, #2
   17390:	b	17798 <__assert_fail@plt+0x6570>
   17394:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17398:	ldr	r3, [r3]
   1739c:	ldrb	r3, [r3]
   173a0:	sub	r3, r3, #69	; 0x45
   173a4:	cmp	r3, #47	; 0x2f
   173a8:	ldrls	pc, [pc, r3, lsl #2]
   173ac:	b	17500 <__assert_fail@plt+0x62d8>
   173b0:	andeq	r7, r1, r0, ror r4
   173b4:	andeq	r7, r1, r0, lsl #10
   173b8:	andeq	r7, r1, r0, ror r4
   173bc:	andeq	r7, r1, r0, lsl #10
   173c0:	andeq	r7, r1, r0, lsl #10
   173c4:	andeq	r7, r1, r0, lsl #10
   173c8:	andeq	r7, r1, r0, ror r4
   173cc:	andeq	r7, r1, r0, lsl #10
   173d0:	andeq	r7, r1, r0, ror r4
   173d4:	andeq	r7, r1, r0, lsl #10
   173d8:	andeq	r7, r1, r0, lsl #10
   173dc:	andeq	r7, r1, r0, ror r4
   173e0:	andeq	r7, r1, r0, lsl #10
   173e4:	andeq	r7, r1, r0, lsl #10
   173e8:	andeq	r7, r1, r0, lsl #10
   173ec:	andeq	r7, r1, r0, ror r4
   173f0:	andeq	r7, r1, r0, lsl #10
   173f4:	andeq	r7, r1, r0, lsl #10
   173f8:	andeq	r7, r1, r0, lsl #10
   173fc:	andeq	r7, r1, r0, lsl #10
   17400:	andeq	r7, r1, r0, ror r4
   17404:	andeq	r7, r1, r0, ror r4
   17408:	andeq	r7, r1, r0, lsl #10
   1740c:	andeq	r7, r1, r0, lsl #10
   17410:	andeq	r7, r1, r0, lsl #10
   17414:	andeq	r7, r1, r0, lsl #10
   17418:	andeq	r7, r1, r0, lsl #10
   1741c:	andeq	r7, r1, r0, lsl #10
   17420:	andeq	r7, r1, r0, lsl #10
   17424:	andeq	r7, r1, r0, lsl #10
   17428:	andeq	r7, r1, r0, lsl #10
   1742c:	andeq	r7, r1, r0, lsl #10
   17430:	andeq	r7, r1, r0, lsl #10
   17434:	andeq	r7, r1, r0, lsl #10
   17438:	andeq	r7, r1, r0, ror r4
   1743c:	andeq	r7, r1, r0, lsl #10
   17440:	andeq	r7, r1, r0, lsl #10
   17444:	andeq	r7, r1, r0, lsl #10
   17448:	andeq	r7, r1, r0, ror r4
   1744c:	andeq	r7, r1, r0, lsl #10
   17450:	andeq	r7, r1, r0, ror r4
   17454:	andeq	r7, r1, r0, lsl #10
   17458:	andeq	r7, r1, r0, lsl #10
   1745c:	andeq	r7, r1, r0, lsl #10
   17460:	andeq	r7, r1, r0, lsl #10
   17464:	andeq	r7, r1, r0, lsl #10
   17468:	andeq	r7, r1, r0, lsl #10
   1746c:	andeq	r7, r1, r0, ror r4
   17470:	mov	r1, #48	; 0x30
   17474:	ldr	r0, [fp, #4]
   17478:	bl	110fc <strchr@plt>
   1747c:	mov	r3, r0
   17480:	cmp	r3, #0
   17484:	beq	174f4 <__assert_fail@plt+0x62cc>
   17488:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1748c:	ldr	r3, [r3]
   17490:	add	r3, r3, #1
   17494:	ldrb	r3, [r3]
   17498:	cmp	r3, #68	; 0x44
   1749c:	beq	174dc <__assert_fail@plt+0x62b4>
   174a0:	cmp	r3, #105	; 0x69
   174a4:	beq	174b4 <__assert_fail@plt+0x628c>
   174a8:	cmp	r3, #66	; 0x42
   174ac:	beq	174dc <__assert_fail@plt+0x62b4>
   174b0:	b	17500 <__assert_fail@plt+0x62d8>
   174b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174b8:	ldr	r3, [r3]
   174bc:	add	r3, r3, #2
   174c0:	ldrb	r3, [r3]
   174c4:	cmp	r3, #66	; 0x42
   174c8:	bne	174fc <__assert_fail@plt+0x62d4>
   174cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174d0:	add	r3, r3, #2
   174d4:	str	r3, [fp, #-24]	; 0xffffffe8
   174d8:	b	174fc <__assert_fail@plt+0x62d4>
   174dc:	mov	r3, #1000	; 0x3e8
   174e0:	str	r3, [fp, #-20]	; 0xffffffec
   174e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174e8:	add	r3, r3, #1
   174ec:	str	r3, [fp, #-24]	; 0xffffffe8
   174f0:	b	17500 <__assert_fail@plt+0x62d8>
   174f4:	nop	{0}
   174f8:	b	17500 <__assert_fail@plt+0x62d8>
   174fc:	nop	{0}
   17500:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17504:	ldr	r3, [r3]
   17508:	ldrb	r3, [r3]
   1750c:	sub	r3, r3, #66	; 0x42
   17510:	cmp	r3, #53	; 0x35
   17514:	ldrls	pc, [pc, r3, lsl #2]
   17518:	b	17728 <__assert_fail@plt+0x6500>
   1751c:	andeq	r7, r1, ip, lsl #12
   17520:	andeq	r7, r1, r8, lsr #14
   17524:	andeq	r7, r1, r8, lsr #14
   17528:	andeq	r7, r1, r0, lsr r6
   1752c:	andeq	r7, r1, r8, lsr #14
   17530:	andeq	r7, r1, ip, asr #12
   17534:	andeq	r7, r1, r8, lsr #14
   17538:	andeq	r7, r1, r8, lsr #14
   1753c:	andeq	r7, r1, r8, lsr #14
   17540:	andeq	r7, r1, r8, ror #12
   17544:	andeq	r7, r1, r8, lsr #14
   17548:	andeq	r7, r1, r4, lsl #13
   1754c:	andeq	r7, r1, r8, lsr #14
   17550:	andeq	r7, r1, r8, lsr #14
   17554:	andeq	r7, r1, r0, lsr #13
   17558:	andeq	r7, r1, r8, lsr #14
   1755c:	andeq	r7, r1, r8, lsr #14
   17560:	andeq	r7, r1, r8, lsr #14
   17564:			; <UNDEFINED> instruction: 0x000176bc
   17568:	andeq	r7, r1, r8, lsr #14
   1756c:	andeq	r7, r1, r8, lsr #14
   17570:	andeq	r7, r1, r8, lsr #14
   17574:	andeq	r7, r1, r8, lsr #14
   17578:	strdeq	r7, [r1], -r0
   1757c:	andeq	r7, r1, ip, lsl #14
   17580:	andeq	r7, r1, r8, lsr #14
   17584:	andeq	r7, r1, r8, lsr #14
   17588:	andeq	r7, r1, r8, lsr #14
   1758c:	andeq	r7, r1, r8, lsr #14
   17590:	andeq	r7, r1, r8, lsr #14
   17594:	andeq	r7, r1, r8, lsr #14
   17598:	andeq	r7, r1, r8, lsr #14
   1759c:	strdeq	r7, [r1], -r4
   175a0:	andeq	r7, r1, r4, lsr #12
   175a4:	andeq	r7, r1, r8, lsr #14
   175a8:	andeq	r7, r1, r8, lsr #14
   175ac:	andeq	r7, r1, r8, lsr #14
   175b0:	andeq	r7, r1, ip, asr #12
   175b4:	andeq	r7, r1, r8, lsr #14
   175b8:	andeq	r7, r1, r8, lsr #14
   175bc:	andeq	r7, r1, r8, lsr #14
   175c0:	andeq	r7, r1, r8, ror #12
   175c4:	andeq	r7, r1, r8, lsr #14
   175c8:	andeq	r7, r1, r4, lsl #13
   175cc:	andeq	r7, r1, r8, lsr #14
   175d0:	andeq	r7, r1, r8, lsr #14
   175d4:	andeq	r7, r1, r8, lsr #14
   175d8:	andeq	r7, r1, r8, lsr #14
   175dc:	andeq	r7, r1, r8, lsr #14
   175e0:	andeq	r7, r1, r8, lsr #14
   175e4:			; <UNDEFINED> instruction: 0x000176bc
   175e8:	andeq	r7, r1, r8, lsr #14
   175ec:	andeq	r7, r1, r8, lsr #14
   175f0:	ldrdeq	r7, [r1], -r8
   175f4:	sub	r3, fp, #44	; 0x2c
   175f8:	mov	r1, #512	; 0x200
   175fc:	mov	r0, r3
   17600:	bl	16f0c <__assert_fail@plt+0x5ce4>
   17604:	str	r0, [fp, #-28]	; 0xffffffe4
   17608:	b	17740 <__assert_fail@plt+0x6518>
   1760c:	sub	r3, fp, #44	; 0x2c
   17610:	mov	r1, #1024	; 0x400
   17614:	mov	r0, r3
   17618:	bl	16f0c <__assert_fail@plt+0x5ce4>
   1761c:	str	r0, [fp, #-28]	; 0xffffffe4
   17620:	b	17740 <__assert_fail@plt+0x6518>
   17624:	mov	r3, #0
   17628:	str	r3, [fp, #-28]	; 0xffffffe4
   1762c:	b	17740 <__assert_fail@plt+0x6518>
   17630:	sub	r3, fp, #44	; 0x2c
   17634:	mov	r2, #6
   17638:	ldr	r1, [fp, #-20]	; 0xffffffec
   1763c:	mov	r0, r3
   17640:	bl	170e8 <__assert_fail@plt+0x5ec0>
   17644:	str	r0, [fp, #-28]	; 0xffffffe4
   17648:	b	17740 <__assert_fail@plt+0x6518>
   1764c:	sub	r3, fp, #44	; 0x2c
   17650:	mov	r2, #3
   17654:	ldr	r1, [fp, #-20]	; 0xffffffec
   17658:	mov	r0, r3
   1765c:	bl	170e8 <__assert_fail@plt+0x5ec0>
   17660:	str	r0, [fp, #-28]	; 0xffffffe4
   17664:	b	17740 <__assert_fail@plt+0x6518>
   17668:	sub	r3, fp, #44	; 0x2c
   1766c:	mov	r2, #1
   17670:	ldr	r1, [fp, #-20]	; 0xffffffec
   17674:	mov	r0, r3
   17678:	bl	170e8 <__assert_fail@plt+0x5ec0>
   1767c:	str	r0, [fp, #-28]	; 0xffffffe4
   17680:	b	17740 <__assert_fail@plt+0x6518>
   17684:	sub	r3, fp, #44	; 0x2c
   17688:	mov	r2, #2
   1768c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17690:	mov	r0, r3
   17694:	bl	170e8 <__assert_fail@plt+0x5ec0>
   17698:	str	r0, [fp, #-28]	; 0xffffffe4
   1769c:	b	17740 <__assert_fail@plt+0x6518>
   176a0:	sub	r3, fp, #44	; 0x2c
   176a4:	mov	r2, #5
   176a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   176ac:	mov	r0, r3
   176b0:	bl	170e8 <__assert_fail@plt+0x5ec0>
   176b4:	str	r0, [fp, #-28]	; 0xffffffe4
   176b8:	b	17740 <__assert_fail@plt+0x6518>
   176bc:	sub	r3, fp, #44	; 0x2c
   176c0:	mov	r2, #4
   176c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   176c8:	mov	r0, r3
   176cc:	bl	170e8 <__assert_fail@plt+0x5ec0>
   176d0:	str	r0, [fp, #-28]	; 0xffffffe4
   176d4:	b	17740 <__assert_fail@plt+0x6518>
   176d8:	sub	r3, fp, #44	; 0x2c
   176dc:	mov	r1, #2
   176e0:	mov	r0, r3
   176e4:	bl	16f0c <__assert_fail@plt+0x5ce4>
   176e8:	str	r0, [fp, #-28]	; 0xffffffe4
   176ec:	b	17740 <__assert_fail@plt+0x6518>
   176f0:	sub	r3, fp, #44	; 0x2c
   176f4:	mov	r2, #8
   176f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   176fc:	mov	r0, r3
   17700:	bl	170e8 <__assert_fail@plt+0x5ec0>
   17704:	str	r0, [fp, #-28]	; 0xffffffe4
   17708:	b	17740 <__assert_fail@plt+0x6518>
   1770c:	sub	r3, fp, #44	; 0x2c
   17710:	mov	r2, #7
   17714:	ldr	r1, [fp, #-20]	; 0xffffffec
   17718:	mov	r0, r3
   1771c:	bl	170e8 <__assert_fail@plt+0x5ec0>
   17720:	str	r0, [fp, #-28]	; 0xffffffe4
   17724:	b	17740 <__assert_fail@plt+0x6518>
   17728:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1772c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17730:	strd	r2, [r1]
   17734:	ldr	r3, [fp, #-8]
   17738:	orr	r3, r3, #2
   1773c:	b	17798 <__assert_fail@plt+0x6570>
   17740:	ldr	r2, [fp, #-8]
   17744:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17748:	orr	r3, r2, r3
   1774c:	str	r3, [fp, #-8]
   17750:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17754:	ldr	r2, [r3]
   17758:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1775c:	add	r2, r2, r3
   17760:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17764:	str	r2, [r3]
   17768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1776c:	ldr	r3, [r3]
   17770:	ldrb	r3, [r3]
   17774:	cmp	r3, #0
   17778:	beq	17788 <__assert_fail@plt+0x6560>
   1777c:	ldr	r3, [fp, #-8]
   17780:	orr	r3, r3, #2
   17784:	str	r3, [fp, #-8]
   17788:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1778c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17790:	strd	r2, [r1]
   17794:	ldr	r3, [fp, #-8]
   17798:	mov	r0, r3
   1779c:	sub	sp, fp, #4
   177a0:	ldr	fp, [sp]
   177a4:	add	sp, sp, #4
   177a8:	pop	{pc}		; (ldr pc, [sp], #4)
   177ac:	str	fp, [sp, #-8]!
   177b0:	str	lr, [sp, #4]
   177b4:	add	fp, sp, #4
   177b8:	sub	sp, sp, #16
   177bc:	str	r0, [fp, #-16]
   177c0:	str	r1, [fp, #-20]	; 0xffffffec
   177c4:	ldr	r3, [fp, #-16]
   177c8:	cmp	r3, #0
   177cc:	beq	177dc <__assert_fail@plt+0x65b4>
   177d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   177d4:	cmp	r3, #0
   177d8:	bne	177ec <__assert_fail@plt+0x65c4>
   177dc:	mov	r3, #1
   177e0:	str	r3, [fp, #-20]	; 0xffffffec
   177e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   177e8:	str	r3, [fp, #-16]
   177ec:	mov	ip, #0
   177f0:	ldr	r2, [fp, #-16]
   177f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   177f8:	umull	r0, r1, r2, r3
   177fc:	mov	r2, #0
   17800:	mov	r3, #0
   17804:	mov	r2, r1
   17808:	mov	r3, #0
   1780c:	cmp	r2, #0
   17810:	beq	17818 <__assert_fail@plt+0x65f0>
   17814:	mov	ip, #1
   17818:	cmp	r0, #0
   1781c:	bge	17824 <__assert_fail@plt+0x65fc>
   17820:	mov	ip, #1
   17824:	mov	r3, ip
   17828:	and	r3, r3, #1
   1782c:	uxtb	r3, r3
   17830:	cmp	r3, #0
   17834:	beq	17850 <__assert_fail@plt+0x6628>
   17838:	bl	11114 <__errno_location@plt>
   1783c:	mov	r2, r0
   17840:	mov	r3, #12
   17844:	str	r3, [r2]
   17848:	mov	r3, #0
   1784c:	b	17868 <__assert_fail@plt+0x6640>
   17850:	ldr	r1, [fp, #-20]	; 0xffffffec
   17854:	ldr	r0, [fp, #-16]
   17858:	bl	10f10 <calloc@plt>
   1785c:	mov	r3, r0
   17860:	str	r3, [fp, #-8]
   17864:	ldr	r3, [fp, #-8]
   17868:	mov	r0, r3
   1786c:	sub	sp, fp, #4
   17870:	ldr	fp, [sp]
   17874:	add	sp, sp, #4
   17878:	pop	{pc}		; (ldr pc, [sp], #4)
   1787c:	str	fp, [sp, #-8]!
   17880:	str	lr, [sp, #4]
   17884:	add	fp, sp, #4
   17888:	sub	sp, sp, #16
   1788c:	str	r0, [fp, #-16]
   17890:	ldr	r3, [fp, #-16]
   17894:	cmp	r3, #0
   17898:	bne	178a4 <__assert_fail@plt+0x667c>
   1789c:	mov	r3, #1
   178a0:	str	r3, [fp, #-16]
   178a4:	mov	r2, #0
   178a8:	ldr	r3, [fp, #-16]
   178ac:	cmp	r3, #0
   178b0:	bge	178b8 <__assert_fail@plt+0x6690>
   178b4:	mov	r2, #1
   178b8:	mov	r3, r2
   178bc:	and	r3, r3, #1
   178c0:	uxtb	r3, r3
   178c4:	cmp	r3, #0
   178c8:	beq	178e4 <__assert_fail@plt+0x66bc>
   178cc:	bl	11114 <__errno_location@plt>
   178d0:	mov	r2, r0
   178d4:	mov	r3, #12
   178d8:	str	r3, [r2]
   178dc:	mov	r3, #0
   178e0:	b	178f8 <__assert_fail@plt+0x66d0>
   178e4:	ldr	r0, [fp, #-16]
   178e8:	bl	11084 <malloc@plt>
   178ec:	mov	r3, r0
   178f0:	str	r3, [fp, #-8]
   178f4:	ldr	r3, [fp, #-8]
   178f8:	mov	r0, r3
   178fc:	sub	sp, fp, #4
   17900:	ldr	fp, [sp]
   17904:	add	sp, sp, #4
   17908:	pop	{pc}		; (ldr pc, [sp], #4)
   1790c:	str	fp, [sp, #-8]!
   17910:	str	lr, [sp, #4]
   17914:	add	fp, sp, #4
   17918:	sub	sp, sp, #16
   1791c:	str	r0, [fp, #-16]
   17920:	str	r1, [fp, #-20]	; 0xffffffec
   17924:	ldr	r3, [fp, #-16]
   17928:	cmp	r3, #0
   1792c:	bne	17940 <__assert_fail@plt+0x6718>
   17930:	ldr	r0, [fp, #-20]	; 0xffffffec
   17934:	bl	1787c <__assert_fail@plt+0x6654>
   17938:	mov	r3, r0
   1793c:	b	179b0 <__assert_fail@plt+0x6788>
   17940:	ldr	r3, [fp, #-20]	; 0xffffffec
   17944:	cmp	r3, #0
   17948:	bne	1795c <__assert_fail@plt+0x6734>
   1794c:	ldr	r0, [fp, #-16]
   17950:	bl	126bc <__assert_fail@plt+0x1494>
   17954:	mov	r3, #0
   17958:	b	179b0 <__assert_fail@plt+0x6788>
   1795c:	mov	r2, #0
   17960:	ldr	r3, [fp, #-20]	; 0xffffffec
   17964:	cmp	r3, #0
   17968:	bge	17970 <__assert_fail@plt+0x6748>
   1796c:	mov	r2, #1
   17970:	mov	r3, r2
   17974:	and	r3, r3, #1
   17978:	uxtb	r3, r3
   1797c:	cmp	r3, #0
   17980:	beq	1799c <__assert_fail@plt+0x6774>
   17984:	bl	11114 <__errno_location@plt>
   17988:	mov	r2, r0
   1798c:	mov	r3, #12
   17990:	str	r3, [r2]
   17994:	mov	r3, #0
   17998:	b	179b0 <__assert_fail@plt+0x6788>
   1799c:	ldr	r1, [fp, #-20]	; 0xffffffec
   179a0:	ldr	r0, [fp, #-16]
   179a4:	bl	10fd0 <realloc@plt>
   179a8:	str	r0, [fp, #-8]
   179ac:	ldr	r3, [fp, #-8]
   179b0:	mov	r0, r3
   179b4:	sub	sp, fp, #4
   179b8:	ldr	fp, [sp]
   179bc:	add	sp, sp, #4
   179c0:	pop	{pc}		; (ldr pc, [sp], #4)
   179c4:	strd	r4, [sp, #-16]!
   179c8:	str	fp, [sp, #8]
   179cc:	str	lr, [sp, #12]
   179d0:	add	fp, sp, #12
   179d4:	sub	sp, sp, #16
   179d8:	str	r0, [fp, #-24]	; 0xffffffe8
   179dc:	str	r1, [fp, #-28]	; 0xffffffe4
   179e0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   179e4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   179e8:	cmp	r5, r4
   179ec:	bne	179f8 <__assert_fail@plt+0x67d0>
   179f0:	mov	r3, #0
   179f4:	b	17a58 <__assert_fail@plt+0x6830>
   179f8:	ldrb	r3, [r5]
   179fc:	mov	r0, r3
   17a00:	bl	18abc <__assert_fail@plt+0x7894>
   17a04:	mov	r3, r0
   17a08:	strb	r3, [fp, #-13]
   17a0c:	ldrb	r3, [r4]
   17a10:	mov	r0, r3
   17a14:	bl	18abc <__assert_fail@plt+0x7894>
   17a18:	mov	r3, r0
   17a1c:	strb	r3, [fp, #-14]
   17a20:	ldrb	r3, [fp, #-13]
   17a24:	cmp	r3, #0
   17a28:	beq	17a48 <__assert_fail@plt+0x6820>
   17a2c:	add	r5, r5, #1
   17a30:	add	r4, r4, #1
   17a34:	ldrb	r2, [fp, #-13]
   17a38:	ldrb	r3, [fp, #-14]
   17a3c:	cmp	r2, r3
   17a40:	beq	179f8 <__assert_fail@plt+0x67d0>
   17a44:	b	17a4c <__assert_fail@plt+0x6824>
   17a48:	nop	{0}
   17a4c:	ldrb	r2, [fp, #-13]
   17a50:	ldrb	r3, [fp, #-14]
   17a54:	sub	r3, r2, r3
   17a58:	mov	r0, r3
   17a5c:	sub	sp, fp, #12
   17a60:	ldrd	r4, [sp]
   17a64:	ldr	fp, [sp, #8]
   17a68:	add	sp, sp, #12
   17a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a70:	str	fp, [sp, #-8]!
   17a74:	str	lr, [sp, #4]
   17a78:	add	fp, sp, #4
   17a7c:	sub	sp, sp, #16
   17a80:	str	r0, [fp, #-16]
   17a84:	ldr	r0, [fp, #-16]
   17a88:	bl	1103c <__fpending@plt>
   17a8c:	mov	r3, r0
   17a90:	cmp	r3, #0
   17a94:	movne	r3, #1
   17a98:	moveq	r3, #0
   17a9c:	strb	r3, [fp, #-5]
   17aa0:	ldr	r0, [fp, #-16]
   17aa4:	bl	11048 <ferror_unlocked@plt>
   17aa8:	mov	r3, r0
   17aac:	cmp	r3, #0
   17ab0:	movne	r3, #1
   17ab4:	moveq	r3, #0
   17ab8:	strb	r3, [fp, #-6]
   17abc:	ldr	r0, [fp, #-16]
   17ac0:	bl	17b54 <__assert_fail@plt+0x692c>
   17ac4:	mov	r3, r0
   17ac8:	cmp	r3, #0
   17acc:	movne	r3, #1
   17ad0:	moveq	r3, #0
   17ad4:	strb	r3, [fp, #-7]
   17ad8:	ldrb	r3, [fp, #-6]
   17adc:	cmp	r3, #0
   17ae0:	bne	17b10 <__assert_fail@plt+0x68e8>
   17ae4:	ldrb	r3, [fp, #-7]
   17ae8:	cmp	r3, #0
   17aec:	beq	17b3c <__assert_fail@plt+0x6914>
   17af0:	ldrb	r3, [fp, #-5]
   17af4:	cmp	r3, #0
   17af8:	bne	17b10 <__assert_fail@plt+0x68e8>
   17afc:	bl	11114 <__errno_location@plt>
   17b00:	mov	r3, r0
   17b04:	ldr	r3, [r3]
   17b08:	cmp	r3, #9
   17b0c:	beq	17b3c <__assert_fail@plt+0x6914>
   17b10:	ldrb	r3, [fp, #-7]
   17b14:	eor	r3, r3, #1
   17b18:	uxtb	r3, r3
   17b1c:	cmp	r3, #0
   17b20:	beq	17b34 <__assert_fail@plt+0x690c>
   17b24:	bl	11114 <__errno_location@plt>
   17b28:	mov	r2, r0
   17b2c:	mov	r3, #0
   17b30:	str	r3, [r2]
   17b34:	mvn	r3, #0
   17b38:	b	17b40 <__assert_fail@plt+0x6918>
   17b3c:	mov	r3, #0
   17b40:	mov	r0, r3
   17b44:	sub	sp, fp, #4
   17b48:	ldr	fp, [sp]
   17b4c:	add	sp, sp, #4
   17b50:	pop	{pc}		; (ldr pc, [sp], #4)
   17b54:	str	fp, [sp, #-8]!
   17b58:	str	lr, [sp, #4]
   17b5c:	add	fp, sp, #4
   17b60:	sub	sp, sp, #32
   17b64:	str	r0, [fp, #-24]	; 0xffffffe8
   17b68:	mov	r3, #0
   17b6c:	str	r3, [fp, #-8]
   17b70:	mov	r3, #0
   17b74:	str	r3, [fp, #-12]
   17b78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b7c:	bl	1115c <fileno@plt>
   17b80:	str	r0, [fp, #-16]
   17b84:	ldr	r3, [fp, #-16]
   17b88:	cmp	r3, #0
   17b8c:	bge	17ba0 <__assert_fail@plt+0x6978>
   17b90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b94:	bl	11174 <fclose@plt>
   17b98:	mov	r3, r0
   17b9c:	b	17c44 <__assert_fail@plt+0x6a1c>
   17ba0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ba4:	bl	1109c <__freading@plt>
   17ba8:	mov	r3, r0
   17bac:	cmp	r3, #0
   17bb0:	beq	17bec <__assert_fail@plt+0x69c4>
   17bb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17bb8:	bl	1115c <fileno@plt>
   17bbc:	mov	r1, r0
   17bc0:	mov	r3, #1
   17bc4:	str	r3, [sp]
   17bc8:	mov	r2, #0
   17bcc:	mov	r3, #0
   17bd0:	mov	r0, r1
   17bd4:	bl	11018 <lseek64@plt>
   17bd8:	mvn	r2, #0
   17bdc:	mvn	r3, #0
   17be0:	cmp	r1, r3
   17be4:	cmpeq	r0, r2
   17be8:	beq	17c10 <__assert_fail@plt+0x69e8>
   17bec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17bf0:	bl	17cac <__assert_fail@plt+0x6a84>
   17bf4:	mov	r3, r0
   17bf8:	cmp	r3, #0
   17bfc:	beq	17c10 <__assert_fail@plt+0x69e8>
   17c00:	bl	11114 <__errno_location@plt>
   17c04:	mov	r3, r0
   17c08:	ldr	r3, [r3]
   17c0c:	str	r3, [fp, #-8]
   17c10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17c14:	bl	11174 <fclose@plt>
   17c18:	str	r0, [fp, #-12]
   17c1c:	ldr	r3, [fp, #-8]
   17c20:	cmp	r3, #0
   17c24:	beq	17c40 <__assert_fail@plt+0x6a18>
   17c28:	bl	11114 <__errno_location@plt>
   17c2c:	mov	r2, r0
   17c30:	ldr	r3, [fp, #-8]
   17c34:	str	r3, [r2]
   17c38:	mvn	r3, #0
   17c3c:	str	r3, [fp, #-12]
   17c40:	ldr	r3, [fp, #-12]
   17c44:	mov	r0, r3
   17c48:	sub	sp, fp, #4
   17c4c:	ldr	fp, [sp]
   17c50:	add	sp, sp, #4
   17c54:	pop	{pc}		; (ldr pc, [sp], #4)
   17c58:	str	fp, [sp, #-8]!
   17c5c:	str	lr, [sp, #4]
   17c60:	add	fp, sp, #4
   17c64:	sub	sp, sp, #16
   17c68:	str	r0, [fp, #-8]
   17c6c:	ldr	r3, [fp, #-8]
   17c70:	ldr	r3, [r3]
   17c74:	and	r3, r3, #256	; 0x100
   17c78:	cmp	r3, #0
   17c7c:	beq	17c98 <__assert_fail@plt+0x6a70>
   17c80:	mov	r3, #1
   17c84:	str	r3, [sp]
   17c88:	mov	r2, #0
   17c8c:	mov	r3, #0
   17c90:	ldr	r0, [fp, #-8]
   17c94:	bl	17d18 <__assert_fail@plt+0x6af0>
   17c98:	nop	{0}
   17c9c:	sub	sp, fp, #4
   17ca0:	ldr	fp, [sp]
   17ca4:	add	sp, sp, #4
   17ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   17cac:	str	fp, [sp, #-8]!
   17cb0:	str	lr, [sp, #4]
   17cb4:	add	fp, sp, #4
   17cb8:	sub	sp, sp, #8
   17cbc:	str	r0, [fp, #-8]
   17cc0:	ldr	r3, [fp, #-8]
   17cc4:	cmp	r3, #0
   17cc8:	beq	17ce0 <__assert_fail@plt+0x6ab8>
   17ccc:	ldr	r0, [fp, #-8]
   17cd0:	bl	1109c <__freading@plt>
   17cd4:	mov	r3, r0
   17cd8:	cmp	r3, #0
   17cdc:	bne	17cf0 <__assert_fail@plt+0x6ac8>
   17ce0:	ldr	r0, [fp, #-8]
   17ce4:	bl	10f70 <fflush@plt>
   17ce8:	mov	r3, r0
   17cec:	b	17d04 <__assert_fail@plt+0x6adc>
   17cf0:	ldr	r0, [fp, #-8]
   17cf4:	bl	17c58 <__assert_fail@plt+0x6a30>
   17cf8:	ldr	r0, [fp, #-8]
   17cfc:	bl	10f70 <fflush@plt>
   17d00:	mov	r3, r0
   17d04:	mov	r0, r3
   17d08:	sub	sp, fp, #4
   17d0c:	ldr	fp, [sp]
   17d10:	add	sp, sp, #4
   17d14:	pop	{pc}		; (ldr pc, [sp], #4)
   17d18:	str	fp, [sp, #-8]!
   17d1c:	str	lr, [sp, #4]
   17d20:	add	fp, sp, #4
   17d24:	sub	sp, sp, #32
   17d28:	str	r0, [fp, #-16]
   17d2c:	strd	r2, [fp, #-28]	; 0xffffffe4
   17d30:	ldr	r3, [fp, #-16]
   17d34:	ldr	r2, [r3, #8]
   17d38:	ldr	r3, [fp, #-16]
   17d3c:	ldr	r3, [r3, #4]
   17d40:	cmp	r2, r3
   17d44:	bne	17ddc <__assert_fail@plt+0x6bb4>
   17d48:	ldr	r3, [fp, #-16]
   17d4c:	ldr	r2, [r3, #20]
   17d50:	ldr	r3, [fp, #-16]
   17d54:	ldr	r3, [r3, #16]
   17d58:	cmp	r2, r3
   17d5c:	bne	17ddc <__assert_fail@plt+0x6bb4>
   17d60:	ldr	r3, [fp, #-16]
   17d64:	ldr	r3, [r3, #36]	; 0x24
   17d68:	cmp	r3, #0
   17d6c:	bne	17ddc <__assert_fail@plt+0x6bb4>
   17d70:	ldr	r0, [fp, #-16]
   17d74:	bl	1115c <fileno@plt>
   17d78:	mov	r1, r0
   17d7c:	ldr	r3, [fp, #4]
   17d80:	str	r3, [sp]
   17d84:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17d88:	mov	r0, r1
   17d8c:	bl	11018 <lseek64@plt>
   17d90:	strd	r0, [fp, #-12]
   17d94:	ldrd	r2, [fp, #-12]
   17d98:	mvn	r0, #0
   17d9c:	mvn	r1, #0
   17da0:	cmp	r3, r1
   17da4:	cmpeq	r2, r0
   17da8:	bne	17db4 <__assert_fail@plt+0x6b8c>
   17dac:	mvn	r3, #0
   17db0:	b	17df4 <__assert_fail@plt+0x6bcc>
   17db4:	ldr	r3, [fp, #-16]
   17db8:	ldr	r3, [r3]
   17dbc:	bic	r2, r3, #16
   17dc0:	ldr	r3, [fp, #-16]
   17dc4:	str	r2, [r3]
   17dc8:	ldr	r1, [fp, #-16]
   17dcc:	ldrd	r2, [fp, #-12]
   17dd0:	strd	r2, [r1, #80]	; 0x50
   17dd4:	mov	r3, #0
   17dd8:	b	17df4 <__assert_fail@plt+0x6bcc>
   17ddc:	ldr	r3, [fp, #4]
   17de0:	str	r3, [sp]
   17de4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17de8:	ldr	r0, [fp, #-16]
   17dec:	bl	11180 <fseeko64@plt>
   17df0:	mov	r3, r0
   17df4:	mov	r0, r3
   17df8:	sub	sp, fp, #4
   17dfc:	ldr	fp, [sp]
   17e00:	add	sp, sp, #4
   17e04:	pop	{pc}		; (ldr pc, [sp], #4)
   17e08:	str	fp, [sp, #-8]!
   17e0c:	str	lr, [sp, #4]
   17e10:	add	fp, sp, #4
   17e14:	bl	11114 <__errno_location@plt>
   17e18:	mov	r2, r0
   17e1c:	mov	r3, #12
   17e20:	str	r3, [r2]
   17e24:	mov	r3, #0
   17e28:	mov	r0, r3
   17e2c:	sub	sp, fp, #4
   17e30:	ldr	fp, [sp]
   17e34:	add	sp, sp, #4
   17e38:	pop	{pc}		; (ldr pc, [sp], #4)
   17e3c:	str	fp, [sp, #-8]!
   17e40:	str	lr, [sp, #4]
   17e44:	add	fp, sp, #4
   17e48:	sub	sp, sp, #8
   17e4c:	str	r0, [fp, #-8]
   17e50:	ldr	r3, [fp, #-8]
   17e54:	mov	r0, r3
   17e58:	bl	1787c <__assert_fail@plt+0x6654>
   17e5c:	mov	r3, r0
   17e60:	mov	r0, r3
   17e64:	sub	sp, fp, #4
   17e68:	ldr	fp, [sp]
   17e6c:	add	sp, sp, #4
   17e70:	pop	{pc}		; (ldr pc, [sp], #4)
   17e74:	str	fp, [sp, #-8]!
   17e78:	str	lr, [sp, #4]
   17e7c:	add	fp, sp, #4
   17e80:	sub	sp, sp, #8
   17e84:	str	r0, [fp, #-8]
   17e88:	str	r1, [fp, #-12]
   17e8c:	ldr	r3, [fp, #-12]
   17e90:	cmp	r3, #0
   17e94:	moveq	r3, #1
   17e98:	movne	r3, #0
   17e9c:	uxtb	r3, r3
   17ea0:	mov	r2, r3
   17ea4:	ldr	r3, [fp, #-12]
   17ea8:	orr	r3, r2, r3
   17eac:	mov	r1, r3
   17eb0:	ldr	r0, [fp, #-8]
   17eb4:	bl	1790c <__assert_fail@plt+0x66e4>
   17eb8:	mov	r3, r0
   17ebc:	mov	r0, r3
   17ec0:	sub	sp, fp, #4
   17ec4:	ldr	fp, [sp]
   17ec8:	add	sp, sp, #4
   17ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed0:	str	fp, [sp, #-8]!
   17ed4:	str	lr, [sp, #4]
   17ed8:	add	fp, sp, #4
   17edc:	sub	sp, sp, #8
   17ee0:	str	r0, [fp, #-8]
   17ee4:	str	r1, [fp, #-12]
   17ee8:	ldr	r3, [fp, #-8]
   17eec:	ldr	r2, [fp, #-12]
   17ef0:	mov	r1, r2
   17ef4:	mov	r0, r3
   17ef8:	bl	177ac <__assert_fail@plt+0x6584>
   17efc:	mov	r3, r0
   17f00:	mov	r0, r3
   17f04:	sub	sp, fp, #4
   17f08:	ldr	fp, [sp]
   17f0c:	add	sp, sp, #4
   17f10:	pop	{pc}		; (ldr pc, [sp], #4)
   17f14:	str	fp, [sp, #-8]!
   17f18:	str	lr, [sp, #4]
   17f1c:	add	fp, sp, #4
   17f20:	sub	sp, sp, #16
   17f24:	str	r0, [fp, #-8]
   17f28:	str	r1, [fp, #-12]
   17f2c:	str	r2, [fp, #-16]
   17f30:	ldr	r3, [fp, #-12]
   17f34:	cmp	r3, #0
   17f38:	beq	17f48 <__assert_fail@plt+0x6d20>
   17f3c:	ldr	r3, [fp, #-16]
   17f40:	cmp	r3, #0
   17f44:	bne	17f58 <__assert_fail@plt+0x6d30>
   17f48:	mov	r3, #1
   17f4c:	str	r3, [fp, #-16]
   17f50:	ldr	r3, [fp, #-16]
   17f54:	str	r3, [fp, #-12]
   17f58:	ldr	r3, [fp, #-12]
   17f5c:	ldr	r2, [fp, #-16]
   17f60:	mov	r1, r3
   17f64:	ldr	r0, [fp, #-8]
   17f68:	bl	18570 <__assert_fail@plt+0x7348>
   17f6c:	mov	r3, r0
   17f70:	mov	r0, r3
   17f74:	sub	sp, fp, #4
   17f78:	ldr	fp, [sp]
   17f7c:	add	sp, sp, #4
   17f80:	pop	{pc}		; (ldr pc, [sp], #4)
   17f84:	str	fp, [sp, #-8]!
   17f88:	str	lr, [sp, #4]
   17f8c:	add	fp, sp, #4
   17f90:	sub	sp, sp, #24
   17f94:	strd	r0, [fp, #-20]	; 0xffffffec
   17f98:	str	r2, [fp, #-24]	; 0xffffffe8
   17f9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fa0:	add	r3, r3, #20
   17fa4:	str	r3, [fp, #-8]
   17fa8:	ldr	r3, [fp, #-8]
   17fac:	mov	r2, #0
   17fb0:	strb	r2, [r3]
   17fb4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17fb8:	mov	r2, #10
   17fbc:	mov	r3, #0
   17fc0:	bl	18f9c <__assert_fail@plt+0x7d74>
   17fc4:	uxtb	r3, r2
   17fc8:	ldr	r2, [fp, #-8]
   17fcc:	sub	r2, r2, #1
   17fd0:	str	r2, [fp, #-8]
   17fd4:	add	r3, r3, #48	; 0x30
   17fd8:	uxtb	r2, r3
   17fdc:	ldr	r3, [fp, #-8]
   17fe0:	strb	r2, [r3]
   17fe4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17fe8:	mov	r2, #10
   17fec:	mov	r3, #0
   17ff0:	bl	18f9c <__assert_fail@plt+0x7d74>
   17ff4:	mov	r2, r0
   17ff8:	mov	r3, r1
   17ffc:	strd	r2, [fp, #-20]	; 0xffffffec
   18000:	ldrd	r2, [fp, #-20]	; 0xffffffec
   18004:	orrs	r3, r2, r3
   18008:	bne	17fb4 <__assert_fail@plt+0x6d8c>
   1800c:	ldr	r3, [fp, #-8]
   18010:	mov	r0, r3
   18014:	sub	sp, fp, #4
   18018:	ldr	fp, [sp]
   1801c:	add	sp, sp, #4
   18020:	pop	{pc}		; (ldr pc, [sp], #4)
   18024:	str	fp, [sp, #-8]!
   18028:	str	lr, [sp, #4]
   1802c:	add	fp, sp, #4
   18030:	sub	sp, sp, #8
   18034:	mov	r0, #14
   18038:	bl	111bc <nl_langinfo@plt>
   1803c:	str	r0, [fp, #-8]
   18040:	ldr	r3, [fp, #-8]
   18044:	cmp	r3, #0
   18048:	bne	18058 <__assert_fail@plt+0x6e30>
   1804c:	movw	r3, #40256	; 0x9d40
   18050:	movt	r3, #1
   18054:	str	r3, [fp, #-8]
   18058:	ldr	r3, [fp, #-8]
   1805c:	ldrb	r3, [r3]
   18060:	cmp	r3, #0
   18064:	bne	18074 <__assert_fail@plt+0x6e4c>
   18068:	movw	r3, #40260	; 0x9d44
   1806c:	movt	r3, #1
   18070:	str	r3, [fp, #-8]
   18074:	ldr	r3, [fp, #-8]
   18078:	mov	r0, r3
   1807c:	sub	sp, fp, #4
   18080:	ldr	fp, [sp]
   18084:	add	sp, sp, #4
   18088:	pop	{pc}		; (ldr pc, [sp], #4)
   1808c:	str	fp, [sp, #-8]!
   18090:	str	lr, [sp, #4]
   18094:	add	fp, sp, #4
   18098:	sub	sp, sp, #32
   1809c:	str	r0, [fp, #-24]	; 0xffffffe8
   180a0:	str	r1, [fp, #-28]	; 0xffffffe4
   180a4:	str	r2, [fp, #-32]	; 0xffffffe0
   180a8:	str	r3, [fp, #-36]	; 0xffffffdc
   180ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180b0:	cmp	r3, #0
   180b4:	bne	180c0 <__assert_fail@plt+0x6e98>
   180b8:	sub	r3, fp, #16
   180bc:	str	r3, [fp, #-24]	; 0xffffffe8
   180c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   180c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   180cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180d0:	bl	11054 <mbrtowc@plt>
   180d4:	str	r0, [fp, #-8]
   180d8:	ldr	r3, [fp, #-8]
   180dc:	cmn	r3, #3
   180e0:	bls	1812c <__assert_fail@plt+0x6f04>
   180e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   180e8:	cmp	r3, #0
   180ec:	beq	1812c <__assert_fail@plt+0x6f04>
   180f0:	mov	r0, #0
   180f4:	bl	18d60 <__assert_fail@plt+0x7b38>
   180f8:	mov	r3, r0
   180fc:	eor	r3, r3, #1
   18100:	uxtb	r3, r3
   18104:	cmp	r3, #0
   18108:	beq	1812c <__assert_fail@plt+0x6f04>
   1810c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18110:	ldrb	r3, [r3]
   18114:	strb	r3, [fp, #-9]
   18118:	ldrb	r2, [fp, #-9]
   1811c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18120:	str	r2, [r3]
   18124:	mov	r3, #1
   18128:	b	18130 <__assert_fail@plt+0x6f08>
   1812c:	ldr	r3, [fp, #-8]
   18130:	mov	r0, r3
   18134:	sub	sp, fp, #4
   18138:	ldr	fp, [sp]
   1813c:	add	sp, sp, #4
   18140:	pop	{pc}		; (ldr pc, [sp], #4)
   18144:	str	fp, [sp, #-8]!
   18148:	str	lr, [sp, #4]
   1814c:	add	fp, sp, #4
   18150:	sub	sp, sp, #8
   18154:	str	r0, [fp, #-8]
   18158:	str	r1, [fp, #-12]
   1815c:	mov	r3, #0
   18160:	ldr	r2, [fp, #-12]
   18164:	lsl	r2, r2, #2
   18168:	ldr	r1, [fp, #-12]
   1816c:	lsr	r1, r1, #30
   18170:	cmp	r1, #0
   18174:	beq	1817c <__assert_fail@plt+0x6f54>
   18178:	mov	r3, #1
   1817c:	cmp	r2, #0
   18180:	bge	18188 <__assert_fail@plt+0x6f60>
   18184:	mov	r3, #1
   18188:	and	r3, r3, #1
   1818c:	uxtb	r3, r3
   18190:	cmp	r3, #0
   18194:	beq	181b0 <__assert_fail@plt+0x6f88>
   18198:	bl	11114 <__errno_location@plt>
   1819c:	mov	r2, r0
   181a0:	mov	r3, #12
   181a4:	str	r3, [r2]
   181a8:	mov	r3, #0
   181ac:	b	181c8 <__assert_fail@plt+0x6fa0>
   181b0:	ldr	r3, [fp, #-12]
   181b4:	lsl	r3, r3, #2
   181b8:	mov	r1, r3
   181bc:	ldr	r0, [fp, #-8]
   181c0:	bl	1790c <__assert_fail@plt+0x66e4>
   181c4:	mov	r3, r0
   181c8:	mov	r0, r3
   181cc:	sub	sp, fp, #4
   181d0:	ldr	fp, [sp]
   181d4:	add	sp, sp, #4
   181d8:	pop	{pc}		; (ldr pc, [sp], #4)
   181dc:	str	fp, [sp, #-8]!
   181e0:	str	lr, [sp, #4]
   181e4:	add	fp, sp, #4
   181e8:	sub	sp, sp, #48	; 0x30
   181ec:	str	r0, [fp, #-40]	; 0xffffffd8
   181f0:	str	r1, [fp, #-44]	; 0xffffffd4
   181f4:	str	r2, [fp, #-48]	; 0xffffffd0
   181f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   181fc:	cmp	r3, #0
   18200:	beq	182d4 <__assert_fail@plt+0x70ac>
   18204:	mov	r3, #10
   18208:	str	r3, [fp, #-36]	; 0xffffffdc
   1820c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18210:	mov	r1, r3
   18214:	mov	r0, #0
   18218:	bl	18144 <__assert_fail@plt+0x6f1c>
   1821c:	str	r0, [fp, #-12]
   18220:	ldr	r3, [fp, #-12]
   18224:	cmp	r3, #0
   18228:	bne	18234 <__assert_fail@plt+0x700c>
   1822c:	mvn	r3, #0
   18230:	b	1855c <__assert_fail@plt+0x7334>
   18234:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18238:	str	r3, [fp, #-20]	; 0xffffffec
   1823c:	sub	r3, fp, #36	; 0x24
   18240:	ldr	r2, [fp, #-12]
   18244:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18248:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1824c:	bl	1112c <getgrouplist@plt>
   18250:	str	r0, [fp, #-8]
   18254:	ldr	r3, [fp, #-8]
   18258:	cmp	r3, #0
   1825c:	bge	1827c <__assert_fail@plt+0x7054>
   18260:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18264:	ldr	r2, [fp, #-20]	; 0xffffffec
   18268:	cmp	r2, r3
   1826c:	bne	1827c <__assert_fail@plt+0x7054>
   18270:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18274:	lsl	r3, r3, #1
   18278:	str	r3, [fp, #-36]	; 0xffffffdc
   1827c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18280:	mov	r1, r3
   18284:	ldr	r0, [fp, #-12]
   18288:	bl	18144 <__assert_fail@plt+0x6f1c>
   1828c:	str	r0, [fp, #-24]	; 0xffffffe8
   18290:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18294:	cmp	r3, #0
   18298:	bne	182ac <__assert_fail@plt+0x7084>
   1829c:	ldr	r0, [fp, #-12]
   182a0:	bl	126bc <__assert_fail@plt+0x1494>
   182a4:	mvn	r3, #0
   182a8:	b	1855c <__assert_fail@plt+0x7334>
   182ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182b0:	str	r3, [fp, #-12]
   182b4:	ldr	r3, [fp, #-8]
   182b8:	cmp	r3, #0
   182bc:	blt	18234 <__assert_fail@plt+0x700c>
   182c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   182c4:	ldr	r2, [fp, #-12]
   182c8:	str	r2, [r3]
   182cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   182d0:	b	1855c <__assert_fail@plt+0x7334>
   182d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   182d8:	cmp	r3, #0
   182dc:	beq	182fc <__assert_fail@plt+0x70d4>
   182e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   182e4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   182e8:	mov	r1, #0
   182ec:	mov	r0, #0
   182f0:	bl	18b3c <__assert_fail@plt+0x7914>
   182f4:	mov	r3, r0
   182f8:	b	1830c <__assert_fail@plt+0x70e4>
   182fc:	mov	r1, #0
   18300:	mov	r0, #0
   18304:	bl	111d4 <getgroups@plt>
   18308:	mov	r3, r0
   1830c:	str	r3, [fp, #-36]	; 0xffffffdc
   18310:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18314:	cmp	r3, #0
   18318:	bge	18384 <__assert_fail@plt+0x715c>
   1831c:	bl	11114 <__errno_location@plt>
   18320:	mov	r3, r0
   18324:	ldr	r3, [r3]
   18328:	cmp	r3, #38	; 0x26
   1832c:	bne	1837c <__assert_fail@plt+0x7154>
   18330:	mov	r1, #1
   18334:	mov	r0, #0
   18338:	bl	18144 <__assert_fail@plt+0x6f1c>
   1833c:	str	r0, [fp, #-12]
   18340:	ldr	r3, [fp, #-12]
   18344:	cmp	r3, #0
   18348:	beq	1837c <__assert_fail@plt+0x7154>
   1834c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18350:	ldr	r2, [fp, #-12]
   18354:	str	r2, [r3]
   18358:	ldr	r3, [fp, #-12]
   1835c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18360:	str	r2, [r3]
   18364:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18368:	cmn	r3, #1
   1836c:	movne	r3, #1
   18370:	moveq	r3, #0
   18374:	uxtb	r3, r3
   18378:	b	1855c <__assert_fail@plt+0x7334>
   1837c:	mvn	r3, #0
   18380:	b	1855c <__assert_fail@plt+0x7334>
   18384:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18388:	cmp	r3, #0
   1838c:	beq	183a8 <__assert_fail@plt+0x7180>
   18390:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18394:	cmp	r3, #0
   18398:	bne	183b4 <__assert_fail@plt+0x718c>
   1839c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   183a0:	cmn	r3, #1
   183a4:	beq	183b4 <__assert_fail@plt+0x718c>
   183a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   183ac:	add	r3, r3, #1
   183b0:	str	r3, [fp, #-36]	; 0xffffffdc
   183b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   183b8:	mov	r1, r3
   183bc:	mov	r0, #0
   183c0:	bl	18144 <__assert_fail@plt+0x6f1c>
   183c4:	str	r0, [fp, #-12]
   183c8:	ldr	r3, [fp, #-12]
   183cc:	cmp	r3, #0
   183d0:	bne	183dc <__assert_fail@plt+0x71b4>
   183d4:	mvn	r3, #0
   183d8:	b	1855c <__assert_fail@plt+0x7334>
   183dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   183e0:	cmp	r3, #0
   183e4:	beq	18404 <__assert_fail@plt+0x71dc>
   183e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   183ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   183f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   183f4:	ldr	r1, [fp, #-12]
   183f8:	bl	18b3c <__assert_fail@plt+0x7914>
   183fc:	mov	r3, r0
   18400:	b	1844c <__assert_fail@plt+0x7224>
   18404:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18408:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1840c:	cmn	r2, #1
   18410:	movne	r2, #1
   18414:	moveq	r2, #0
   18418:	uxtb	r2, r2
   1841c:	sub	r0, r3, r2
   18420:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18424:	cmn	r3, #1
   18428:	beq	18434 <__assert_fail@plt+0x720c>
   1842c:	mov	r3, #4
   18430:	b	18438 <__assert_fail@plt+0x7210>
   18434:	mov	r3, #0
   18438:	ldr	r2, [fp, #-12]
   1843c:	add	r3, r2, r3
   18440:	mov	r1, r3
   18444:	bl	111d4 <getgroups@plt>
   18448:	mov	r3, r0
   1844c:	str	r3, [fp, #-8]
   18450:	ldr	r3, [fp, #-8]
   18454:	cmp	r3, #0
   18458:	bge	1846c <__assert_fail@plt+0x7244>
   1845c:	ldr	r0, [fp, #-12]
   18460:	bl	126bc <__assert_fail@plt+0x1494>
   18464:	mvn	r3, #0
   18468:	b	1855c <__assert_fail@plt+0x7334>
   1846c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18470:	cmp	r3, #0
   18474:	bne	1849c <__assert_fail@plt+0x7274>
   18478:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1847c:	cmn	r3, #1
   18480:	beq	1849c <__assert_fail@plt+0x7274>
   18484:	ldr	r3, [fp, #-12]
   18488:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1848c:	str	r2, [r3]
   18490:	ldr	r3, [fp, #-8]
   18494:	add	r3, r3, #1
   18498:	str	r3, [fp, #-8]
   1849c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   184a0:	ldr	r2, [fp, #-12]
   184a4:	str	r2, [r3]
   184a8:	ldr	r3, [fp, #-8]
   184ac:	cmp	r3, #1
   184b0:	ble	18558 <__assert_fail@plt+0x7330>
   184b4:	ldr	r3, [fp, #-12]
   184b8:	ldr	r3, [r3]
   184bc:	str	r3, [fp, #-28]	; 0xffffffe4
   184c0:	ldr	r3, [fp, #-8]
   184c4:	lsl	r3, r3, #2
   184c8:	ldr	r2, [fp, #-12]
   184cc:	add	r3, r2, r3
   184d0:	str	r3, [fp, #-32]	; 0xffffffe0
   184d4:	ldr	r3, [fp, #-12]
   184d8:	add	r3, r3, #4
   184dc:	str	r3, [fp, #-16]
   184e0:	b	18548 <__assert_fail@plt+0x7320>
   184e4:	ldr	r3, [fp, #-16]
   184e8:	ldr	r3, [r3]
   184ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   184f0:	cmp	r2, r3
   184f4:	beq	18510 <__assert_fail@plt+0x72e8>
   184f8:	ldr	r3, [fp, #-16]
   184fc:	ldr	r2, [r3]
   18500:	ldr	r3, [fp, #-12]
   18504:	ldr	r3, [r3]
   18508:	cmp	r2, r3
   1850c:	bne	18520 <__assert_fail@plt+0x72f8>
   18510:	ldr	r3, [fp, #-8]
   18514:	sub	r3, r3, #1
   18518:	str	r3, [fp, #-8]
   1851c:	b	1853c <__assert_fail@plt+0x7314>
   18520:	ldr	r3, [fp, #-12]
   18524:	add	r3, r3, #4
   18528:	str	r3, [fp, #-12]
   1852c:	ldr	r3, [fp, #-16]
   18530:	ldr	r2, [r3]
   18534:	ldr	r3, [fp, #-12]
   18538:	str	r2, [r3]
   1853c:	ldr	r3, [fp, #-16]
   18540:	add	r3, r3, #4
   18544:	str	r3, [fp, #-16]
   18548:	ldr	r2, [fp, #-16]
   1854c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18550:	cmp	r2, r3
   18554:	bcc	184e4 <__assert_fail@plt+0x72bc>
   18558:	ldr	r3, [fp, #-8]
   1855c:	mov	r0, r3
   18560:	sub	sp, fp, #4
   18564:	ldr	fp, [sp]
   18568:	add	sp, sp, #4
   1856c:	pop	{pc}		; (ldr pc, [sp], #4)
   18570:	str	fp, [sp, #-8]!
   18574:	str	lr, [sp, #4]
   18578:	add	fp, sp, #4
   1857c:	sub	sp, sp, #24
   18580:	str	r0, [fp, #-16]
   18584:	str	r1, [fp, #-20]	; 0xffffffec
   18588:	str	r2, [fp, #-24]	; 0xffffffe8
   1858c:	mov	ip, #0
   18590:	ldr	r2, [fp, #-20]	; 0xffffffec
   18594:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18598:	umull	r0, r1, r2, r3
   1859c:	mov	r2, #0
   185a0:	mov	r3, #0
   185a4:	mov	r2, r1
   185a8:	mov	r3, #0
   185ac:	cmp	r2, #0
   185b0:	beq	185b8 <__assert_fail@plt+0x7390>
   185b4:	mov	ip, #1
   185b8:	mov	r3, r0
   185bc:	str	r3, [fp, #-8]
   185c0:	mov	r3, ip
   185c4:	and	r3, r3, #1
   185c8:	uxtb	r3, r3
   185cc:	cmp	r3, #0
   185d0:	beq	185ec <__assert_fail@plt+0x73c4>
   185d4:	bl	11114 <__errno_location@plt>
   185d8:	mov	r2, r0
   185dc:	mov	r3, #12
   185e0:	str	r3, [r2]
   185e4:	mov	r3, #0
   185e8:	b	18600 <__assert_fail@plt+0x73d8>
   185ec:	ldr	r3, [fp, #-8]
   185f0:	mov	r1, r3
   185f4:	ldr	r0, [fp, #-16]
   185f8:	bl	1790c <__assert_fail@plt+0x66e4>
   185fc:	mov	r3, r0
   18600:	mov	r0, r3
   18604:	sub	sp, fp, #4
   18608:	ldr	fp, [sp]
   1860c:	add	sp, sp, #4
   18610:	pop	{pc}		; (ldr pc, [sp], #4)
   18614:	push	{fp}		; (str fp, [sp, #-4]!)
   18618:	add	fp, sp, #0
   1861c:	sub	sp, sp, #12
   18620:	str	r0, [fp, #-8]
   18624:	ldr	r3, [fp, #-8]
   18628:	cmp	r3, #90	; 0x5a
   1862c:	bgt	18650 <__assert_fail@plt+0x7428>
   18630:	ldr	r3, [fp, #-8]
   18634:	cmp	r3, #65	; 0x41
   18638:	bge	18660 <__assert_fail@plt+0x7438>
   1863c:	ldr	r3, [fp, #-8]
   18640:	sub	r3, r3, #48	; 0x30
   18644:	cmp	r3, #9
   18648:	bhi	18668 <__assert_fail@plt+0x7440>
   1864c:	b	18660 <__assert_fail@plt+0x7438>
   18650:	ldr	r3, [fp, #-8]
   18654:	sub	r3, r3, #97	; 0x61
   18658:	cmp	r3, #25
   1865c:	bhi	18668 <__assert_fail@plt+0x7440>
   18660:	mov	r3, #1
   18664:	b	1866c <__assert_fail@plt+0x7444>
   18668:	mov	r3, #0
   1866c:	mov	r0, r3
   18670:	add	sp, fp, #0
   18674:	pop	{fp}		; (ldr fp, [sp], #4)
   18678:	bx	lr
   1867c:	push	{fp}		; (str fp, [sp, #-4]!)
   18680:	add	fp, sp, #0
   18684:	sub	sp, sp, #12
   18688:	str	r0, [fp, #-8]
   1868c:	ldr	r3, [fp, #-8]
   18690:	cmp	r3, #65	; 0x41
   18694:	blt	186bc <__assert_fail@plt+0x7494>
   18698:	ldr	r3, [fp, #-8]
   1869c:	cmp	r3, #90	; 0x5a
   186a0:	ble	186b4 <__assert_fail@plt+0x748c>
   186a4:	ldr	r3, [fp, #-8]
   186a8:	sub	r3, r3, #97	; 0x61
   186ac:	cmp	r3, #25
   186b0:	bhi	186bc <__assert_fail@plt+0x7494>
   186b4:	mov	r3, #1
   186b8:	b	186c0 <__assert_fail@plt+0x7498>
   186bc:	mov	r3, #0
   186c0:	mov	r0, r3
   186c4:	add	sp, fp, #0
   186c8:	pop	{fp}		; (ldr fp, [sp], #4)
   186cc:	bx	lr
   186d0:	push	{fp}		; (str fp, [sp, #-4]!)
   186d4:	add	fp, sp, #0
   186d8:	sub	sp, sp, #12
   186dc:	str	r0, [fp, #-8]
   186e0:	ldr	r3, [fp, #-8]
   186e4:	cmp	r3, #127	; 0x7f
   186e8:	bhi	186f4 <__assert_fail@plt+0x74cc>
   186ec:	mov	r3, #1
   186f0:	b	186f8 <__assert_fail@plt+0x74d0>
   186f4:	mov	r3, #0
   186f8:	mov	r0, r3
   186fc:	add	sp, fp, #0
   18700:	pop	{fp}		; (ldr fp, [sp], #4)
   18704:	bx	lr
   18708:	push	{fp}		; (str fp, [sp, #-4]!)
   1870c:	add	fp, sp, #0
   18710:	sub	sp, sp, #12
   18714:	str	r0, [fp, #-8]
   18718:	ldr	r3, [fp, #-8]
   1871c:	cmp	r3, #32
   18720:	beq	18730 <__assert_fail@plt+0x7508>
   18724:	ldr	r3, [fp, #-8]
   18728:	cmp	r3, #9
   1872c:	bne	18738 <__assert_fail@plt+0x7510>
   18730:	mov	r3, #1
   18734:	b	1873c <__assert_fail@plt+0x7514>
   18738:	mov	r3, #0
   1873c:	and	r3, r3, #1
   18740:	uxtb	r3, r3
   18744:	mov	r0, r3
   18748:	add	sp, fp, #0
   1874c:	pop	{fp}		; (ldr fp, [sp], #4)
   18750:	bx	lr
   18754:	push	{fp}		; (str fp, [sp, #-4]!)
   18758:	add	fp, sp, #0
   1875c:	sub	sp, sp, #12
   18760:	str	r0, [fp, #-8]
   18764:	ldr	r3, [fp, #-8]
   18768:	cmp	r3, #0
   1876c:	blt	18790 <__assert_fail@plt+0x7568>
   18770:	ldr	r3, [fp, #-8]
   18774:	cmp	r3, #31
   18778:	ble	18788 <__assert_fail@plt+0x7560>
   1877c:	ldr	r3, [fp, #-8]
   18780:	cmp	r3, #127	; 0x7f
   18784:	bne	18790 <__assert_fail@plt+0x7568>
   18788:	mov	r3, #1
   1878c:	b	18794 <__assert_fail@plt+0x756c>
   18790:	mov	r3, #0
   18794:	mov	r0, r3
   18798:	add	sp, fp, #0
   1879c:	pop	{fp}		; (ldr fp, [sp], #4)
   187a0:	bx	lr
   187a4:	push	{fp}		; (str fp, [sp, #-4]!)
   187a8:	add	fp, sp, #0
   187ac:	sub	sp, sp, #12
   187b0:	str	r0, [fp, #-8]
   187b4:	ldr	r3, [fp, #-8]
   187b8:	sub	r3, r3, #48	; 0x30
   187bc:	cmp	r3, #9
   187c0:	bhi	187cc <__assert_fail@plt+0x75a4>
   187c4:	mov	r3, #1
   187c8:	b	187d0 <__assert_fail@plt+0x75a8>
   187cc:	mov	r3, #0
   187d0:	mov	r0, r3
   187d4:	add	sp, fp, #0
   187d8:	pop	{fp}		; (ldr fp, [sp], #4)
   187dc:	bx	lr
   187e0:	push	{fp}		; (str fp, [sp, #-4]!)
   187e4:	add	fp, sp, #0
   187e8:	sub	sp, sp, #12
   187ec:	str	r0, [fp, #-8]
   187f0:	ldr	r3, [fp, #-8]
   187f4:	sub	r3, r3, #33	; 0x21
   187f8:	cmp	r3, #93	; 0x5d
   187fc:	bhi	18808 <__assert_fail@plt+0x75e0>
   18800:	mov	r3, #1
   18804:	b	1880c <__assert_fail@plt+0x75e4>
   18808:	mov	r3, #0
   1880c:	mov	r0, r3
   18810:	add	sp, fp, #0
   18814:	pop	{fp}		; (ldr fp, [sp], #4)
   18818:	bx	lr
   1881c:	push	{fp}		; (str fp, [sp, #-4]!)
   18820:	add	fp, sp, #0
   18824:	sub	sp, sp, #12
   18828:	str	r0, [fp, #-8]
   1882c:	ldr	r3, [fp, #-8]
   18830:	sub	r3, r3, #97	; 0x61
   18834:	cmp	r3, #25
   18838:	bhi	18844 <__assert_fail@plt+0x761c>
   1883c:	mov	r3, #1
   18840:	b	18848 <__assert_fail@plt+0x7620>
   18844:	mov	r3, #0
   18848:	mov	r0, r3
   1884c:	add	sp, fp, #0
   18850:	pop	{fp}		; (ldr fp, [sp], #4)
   18854:	bx	lr
   18858:	push	{fp}		; (str fp, [sp, #-4]!)
   1885c:	add	fp, sp, #0
   18860:	sub	sp, sp, #12
   18864:	str	r0, [fp, #-8]
   18868:	ldr	r3, [fp, #-8]
   1886c:	sub	r3, r3, #32
   18870:	cmp	r3, #94	; 0x5e
   18874:	bhi	18880 <__assert_fail@plt+0x7658>
   18878:	mov	r3, #1
   1887c:	b	18884 <__assert_fail@plt+0x765c>
   18880:	mov	r3, #0
   18884:	mov	r0, r3
   18888:	add	sp, fp, #0
   1888c:	pop	{fp}		; (ldr fp, [sp], #4)
   18890:	bx	lr
   18894:	push	{fp}		; (str fp, [sp, #-4]!)
   18898:	add	fp, sp, #0
   1889c:	sub	sp, sp, #12
   188a0:	str	r0, [fp, #-8]
   188a4:	ldr	r3, [fp, #-8]
   188a8:	cmp	r3, #64	; 0x40
   188ac:	bgt	188d0 <__assert_fail@plt+0x76a8>
   188b0:	ldr	r3, [fp, #-8]
   188b4:	cmp	r3, #58	; 0x3a
   188b8:	bge	188f8 <__assert_fail@plt+0x76d0>
   188bc:	ldr	r3, [fp, #-8]
   188c0:	sub	r3, r3, #33	; 0x21
   188c4:	cmp	r3, #14
   188c8:	bhi	18900 <__assert_fail@plt+0x76d8>
   188cc:	b	188f8 <__assert_fail@plt+0x76d0>
   188d0:	ldr	r3, [fp, #-8]
   188d4:	cmp	r3, #91	; 0x5b
   188d8:	blt	18900 <__assert_fail@plt+0x76d8>
   188dc:	ldr	r3, [fp, #-8]
   188e0:	cmp	r3, #96	; 0x60
   188e4:	ble	188f8 <__assert_fail@plt+0x76d0>
   188e8:	ldr	r3, [fp, #-8]
   188ec:	sub	r3, r3, #123	; 0x7b
   188f0:	cmp	r3, #3
   188f4:	bhi	18900 <__assert_fail@plt+0x76d8>
   188f8:	mov	r3, #1
   188fc:	b	18904 <__assert_fail@plt+0x76dc>
   18900:	mov	r3, #0
   18904:	mov	r0, r3
   18908:	add	sp, fp, #0
   1890c:	pop	{fp}		; (ldr fp, [sp], #4)
   18910:	bx	lr
   18914:	push	{fp}		; (str fp, [sp, #-4]!)
   18918:	add	fp, sp, #0
   1891c:	sub	sp, sp, #12
   18920:	str	r0, [fp, #-8]
   18924:	ldr	r3, [fp, #-8]
   18928:	cmp	r3, #9
   1892c:	blt	18950 <__assert_fail@plt+0x7728>
   18930:	ldr	r3, [fp, #-8]
   18934:	cmp	r3, #13
   18938:	ble	18948 <__assert_fail@plt+0x7720>
   1893c:	ldr	r3, [fp, #-8]
   18940:	cmp	r3, #32
   18944:	bne	18950 <__assert_fail@plt+0x7728>
   18948:	mov	r3, #1
   1894c:	b	18954 <__assert_fail@plt+0x772c>
   18950:	mov	r3, #0
   18954:	mov	r0, r3
   18958:	add	sp, fp, #0
   1895c:	pop	{fp}		; (ldr fp, [sp], #4)
   18960:	bx	lr
   18964:	push	{fp}		; (str fp, [sp, #-4]!)
   18968:	add	fp, sp, #0
   1896c:	sub	sp, sp, #12
   18970:	str	r0, [fp, #-8]
   18974:	ldr	r3, [fp, #-8]
   18978:	sub	r3, r3, #65	; 0x41
   1897c:	cmp	r3, #25
   18980:	bhi	1898c <__assert_fail@plt+0x7764>
   18984:	mov	r3, #1
   18988:	b	18990 <__assert_fail@plt+0x7768>
   1898c:	mov	r3, #0
   18990:	mov	r0, r3
   18994:	add	sp, fp, #0
   18998:	pop	{fp}		; (ldr fp, [sp], #4)
   1899c:	bx	lr
   189a0:	push	{fp}		; (str fp, [sp, #-4]!)
   189a4:	add	fp, sp, #0
   189a8:	sub	sp, sp, #12
   189ac:	str	r0, [fp, #-8]
   189b0:	ldr	r3, [fp, #-8]
   189b4:	sub	r3, r3, #48	; 0x30
   189b8:	cmp	r3, #54	; 0x36
   189bc:	ldrls	pc, [pc, r3, lsl #2]
   189c0:	b	18aa8 <__assert_fail@plt+0x7880>
   189c4:	andeq	r8, r1, r0, lsr #21
   189c8:	andeq	r8, r1, r0, lsr #21
   189cc:	andeq	r8, r1, r0, lsr #21
   189d0:	andeq	r8, r1, r0, lsr #21
   189d4:	andeq	r8, r1, r0, lsr #21
   189d8:	andeq	r8, r1, r0, lsr #21
   189dc:	andeq	r8, r1, r0, lsr #21
   189e0:	andeq	r8, r1, r0, lsr #21
   189e4:	andeq	r8, r1, r0, lsr #21
   189e8:	andeq	r8, r1, r0, lsr #21
   189ec:	andeq	r8, r1, r8, lsr #21
   189f0:	andeq	r8, r1, r8, lsr #21
   189f4:	andeq	r8, r1, r8, lsr #21
   189f8:	andeq	r8, r1, r8, lsr #21
   189fc:	andeq	r8, r1, r8, lsr #21
   18a00:	andeq	r8, r1, r8, lsr #21
   18a04:	andeq	r8, r1, r8, lsr #21
   18a08:	andeq	r8, r1, r0, lsr #21
   18a0c:	andeq	r8, r1, r0, lsr #21
   18a10:	andeq	r8, r1, r0, lsr #21
   18a14:	andeq	r8, r1, r0, lsr #21
   18a18:	andeq	r8, r1, r0, lsr #21
   18a1c:	andeq	r8, r1, r0, lsr #21
   18a20:	andeq	r8, r1, r8, lsr #21
   18a24:	andeq	r8, r1, r8, lsr #21
   18a28:	andeq	r8, r1, r8, lsr #21
   18a2c:	andeq	r8, r1, r8, lsr #21
   18a30:	andeq	r8, r1, r8, lsr #21
   18a34:	andeq	r8, r1, r8, lsr #21
   18a38:	andeq	r8, r1, r8, lsr #21
   18a3c:	andeq	r8, r1, r8, lsr #21
   18a40:	andeq	r8, r1, r8, lsr #21
   18a44:	andeq	r8, r1, r8, lsr #21
   18a48:	andeq	r8, r1, r8, lsr #21
   18a4c:	andeq	r8, r1, r8, lsr #21
   18a50:	andeq	r8, r1, r8, lsr #21
   18a54:	andeq	r8, r1, r8, lsr #21
   18a58:	andeq	r8, r1, r8, lsr #21
   18a5c:	andeq	r8, r1, r8, lsr #21
   18a60:	andeq	r8, r1, r8, lsr #21
   18a64:	andeq	r8, r1, r8, lsr #21
   18a68:	andeq	r8, r1, r8, lsr #21
   18a6c:	andeq	r8, r1, r8, lsr #21
   18a70:	andeq	r8, r1, r8, lsr #21
   18a74:	andeq	r8, r1, r8, lsr #21
   18a78:	andeq	r8, r1, r8, lsr #21
   18a7c:	andeq	r8, r1, r8, lsr #21
   18a80:	andeq	r8, r1, r8, lsr #21
   18a84:	andeq	r8, r1, r8, lsr #21
   18a88:	andeq	r8, r1, r0, lsr #21
   18a8c:	andeq	r8, r1, r0, lsr #21
   18a90:	andeq	r8, r1, r0, lsr #21
   18a94:	andeq	r8, r1, r0, lsr #21
   18a98:	andeq	r8, r1, r0, lsr #21
   18a9c:	andeq	r8, r1, r0, lsr #21
   18aa0:	mov	r3, #1
   18aa4:	b	18aac <__assert_fail@plt+0x7884>
   18aa8:	mov	r3, #0
   18aac:	mov	r0, r3
   18ab0:	add	sp, fp, #0
   18ab4:	pop	{fp}		; (ldr fp, [sp], #4)
   18ab8:	bx	lr
   18abc:	push	{fp}		; (str fp, [sp, #-4]!)
   18ac0:	add	fp, sp, #0
   18ac4:	sub	sp, sp, #12
   18ac8:	str	r0, [fp, #-8]
   18acc:	ldr	r3, [fp, #-8]
   18ad0:	sub	r3, r3, #65	; 0x41
   18ad4:	cmp	r3, #25
   18ad8:	bhi	18ae8 <__assert_fail@plt+0x78c0>
   18adc:	ldr	r3, [fp, #-8]
   18ae0:	add	r3, r3, #32
   18ae4:	b	18aec <__assert_fail@plt+0x78c4>
   18ae8:	ldr	r3, [fp, #-8]
   18aec:	mov	r0, r3
   18af0:	add	sp, fp, #0
   18af4:	pop	{fp}		; (ldr fp, [sp], #4)
   18af8:	bx	lr
   18afc:	push	{fp}		; (str fp, [sp, #-4]!)
   18b00:	add	fp, sp, #0
   18b04:	sub	sp, sp, #12
   18b08:	str	r0, [fp, #-8]
   18b0c:	ldr	r3, [fp, #-8]
   18b10:	sub	r3, r3, #97	; 0x61
   18b14:	cmp	r3, #25
   18b18:	bhi	18b28 <__assert_fail@plt+0x7900>
   18b1c:	ldr	r3, [fp, #-8]
   18b20:	sub	r3, r3, #32
   18b24:	b	18b2c <__assert_fail@plt+0x7904>
   18b28:	ldr	r3, [fp, #-8]
   18b2c:	mov	r0, r3
   18b30:	add	sp, fp, #0
   18b34:	pop	{fp}		; (ldr fp, [sp], #4)
   18b38:	bx	lr
   18b3c:	str	fp, [sp, #-8]!
   18b40:	str	lr, [sp, #4]
   18b44:	add	fp, sp, #4
   18b48:	sub	sp, sp, #40	; 0x28
   18b4c:	str	r0, [fp, #-32]	; 0xffffffe0
   18b50:	str	r1, [fp, #-36]	; 0xffffffdc
   18b54:	str	r2, [fp, #-40]	; 0xffffffd8
   18b58:	str	r3, [fp, #-44]	; 0xffffffd4
   18b5c:	mov	r3, #0
   18b60:	str	r3, [fp, #-8]
   18b64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18b68:	cmn	r3, #1
   18b6c:	beq	18ba0 <__assert_fail@plt+0x7978>
   18b70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18b74:	cmp	r3, #0
   18b78:	beq	18b94 <__assert_fail@plt+0x796c>
   18b7c:	ldr	r3, [fp, #-8]
   18b80:	lsl	r3, r3, #2
   18b84:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18b88:	add	r3, r2, r3
   18b8c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18b90:	str	r2, [r3]
   18b94:	ldr	r3, [fp, #-8]
   18b98:	add	r3, r3, #1
   18b9c:	str	r3, [fp, #-8]
   18ba0:	bl	11144 <setgrent@plt>
   18ba4:	bl	11114 <__errno_location@plt>
   18ba8:	mov	r2, r0
   18bac:	mov	r3, #0
   18bb0:	str	r3, [r2]
   18bb4:	bl	11150 <getgrent@plt>
   18bb8:	str	r0, [fp, #-20]	; 0xffffffec
   18bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bc0:	cmp	r3, #0
   18bc4:	beq	18cf4 <__assert_fail@plt+0x7acc>
   18bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bcc:	ldr	r3, [r3, #12]
   18bd0:	str	r3, [fp, #-12]
   18bd4:	b	18ce0 <__assert_fail@plt+0x7ab8>
   18bd8:	ldr	r3, [fp, #-12]
   18bdc:	ldr	r3, [r3]
   18be0:	mov	r1, r3
   18be4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18be8:	bl	10f4c <strcmp@plt>
   18bec:	mov	r3, r0
   18bf0:	cmp	r3, #0
   18bf4:	bne	18cd0 <__assert_fail@plt+0x7aa8>
   18bf8:	mov	r3, #0
   18bfc:	str	r3, [fp, #-16]
   18c00:	b	18c40 <__assert_fail@plt+0x7a18>
   18c04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18c08:	cmp	r3, #0
   18c0c:	beq	18c34 <__assert_fail@plt+0x7a0c>
   18c10:	ldr	r3, [fp, #-16]
   18c14:	lsl	r3, r3, #2
   18c18:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18c1c:	add	r3, r2, r3
   18c20:	ldr	r2, [r3]
   18c24:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c28:	ldr	r3, [r3, #8]
   18c2c:	cmp	r2, r3
   18c30:	beq	18c54 <__assert_fail@plt+0x7a2c>
   18c34:	ldr	r3, [fp, #-16]
   18c38:	add	r3, r3, #1
   18c3c:	str	r3, [fp, #-16]
   18c40:	ldr	r2, [fp, #-16]
   18c44:	ldr	r3, [fp, #-8]
   18c48:	cmp	r2, r3
   18c4c:	blt	18c04 <__assert_fail@plt+0x79dc>
   18c50:	b	18c58 <__assert_fail@plt+0x7a30>
   18c54:	nop	{0}
   18c58:	ldr	r2, [fp, #-16]
   18c5c:	ldr	r3, [fp, #-8]
   18c60:	cmp	r2, r3
   18c64:	bne	18cd4 <__assert_fail@plt+0x7aac>
   18c68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18c6c:	cmp	r3, #0
   18c70:	beq	18ca0 <__assert_fail@plt+0x7a78>
   18c74:	ldr	r2, [fp, #-8]
   18c78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18c7c:	cmp	r2, r3
   18c80:	bge	18d18 <__assert_fail@plt+0x7af0>
   18c84:	ldr	r3, [fp, #-8]
   18c88:	lsl	r3, r3, #2
   18c8c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18c90:	add	r3, r2, r3
   18c94:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c98:	ldr	r2, [r2, #8]
   18c9c:	str	r2, [r3]
   18ca0:	ldr	r3, [fp, #-8]
   18ca4:	cmn	r3, #-2147483647	; 0x80000001
   18ca8:	bne	18cc0 <__assert_fail@plt+0x7a98>
   18cac:	bl	11114 <__errno_location@plt>
   18cb0:	mov	r2, r0
   18cb4:	mov	r3, #75	; 0x4b
   18cb8:	str	r3, [r2]
   18cbc:	b	18d24 <__assert_fail@plt+0x7afc>
   18cc0:	ldr	r3, [fp, #-8]
   18cc4:	add	r3, r3, #1
   18cc8:	str	r3, [fp, #-8]
   18ccc:	b	18cd4 <__assert_fail@plt+0x7aac>
   18cd0:	nop	{0}
   18cd4:	ldr	r3, [fp, #-12]
   18cd8:	add	r3, r3, #4
   18cdc:	str	r3, [fp, #-12]
   18ce0:	ldr	r3, [fp, #-12]
   18ce4:	ldr	r3, [r3]
   18ce8:	cmp	r3, #0
   18cec:	bne	18bd8 <__assert_fail@plt+0x79b0>
   18cf0:	b	18ba4 <__assert_fail@plt+0x797c>
   18cf4:	nop	{0}
   18cf8:	bl	11114 <__errno_location@plt>
   18cfc:	mov	r3, r0
   18d00:	ldr	r3, [r3]
   18d04:	cmp	r3, #0
   18d08:	beq	18d20 <__assert_fail@plt+0x7af8>
   18d0c:	mvn	r3, #0
   18d10:	str	r3, [fp, #-8]
   18d14:	b	18d24 <__assert_fail@plt+0x7afc>
   18d18:	nop	{0}
   18d1c:	b	18d24 <__assert_fail@plt+0x7afc>
   18d20:	nop	{0}
   18d24:	bl	11114 <__errno_location@plt>
   18d28:	mov	r3, r0
   18d2c:	ldr	r3, [r3]
   18d30:	str	r3, [fp, #-24]	; 0xffffffe8
   18d34:	bl	10f1c <endgrent@plt>
   18d38:	bl	11114 <__errno_location@plt>
   18d3c:	mov	r2, r0
   18d40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d44:	str	r3, [r2]
   18d48:	ldr	r3, [fp, #-8]
   18d4c:	mov	r0, r3
   18d50:	sub	sp, fp, #4
   18d54:	ldr	fp, [sp]
   18d58:	add	sp, sp, #4
   18d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d60:	str	fp, [sp, #-8]!
   18d64:	str	lr, [sp, #4]
   18d68:	add	fp, sp, #4
   18d6c:	sub	sp, sp, #272	; 0x110
   18d70:	str	r0, [fp, #-272]	; 0xfffffef0
   18d74:	sub	r3, fp, #264	; 0x108
   18d78:	movw	r2, #257	; 0x101
   18d7c:	mov	r1, r3
   18d80:	ldr	r0, [fp, #-272]	; 0xfffffef0
   18d84:	bl	18f24 <__assert_fail@plt+0x7cfc>
   18d88:	mov	r3, r0
   18d8c:	cmp	r3, #0
   18d90:	beq	18d9c <__assert_fail@plt+0x7b74>
   18d94:	mov	r3, #0
   18d98:	b	18df0 <__assert_fail@plt+0x7bc8>
   18d9c:	sub	r3, fp, #264	; 0x108
   18da0:	movw	r1, #40268	; 0x9d4c
   18da4:	movt	r1, #1
   18da8:	mov	r0, r3
   18dac:	bl	10f4c <strcmp@plt>
   18db0:	mov	r3, r0
   18db4:	cmp	r3, #0
   18db8:	beq	18de4 <__assert_fail@plt+0x7bbc>
   18dbc:	sub	r3, fp, #264	; 0x108
   18dc0:	movw	r1, #40272	; 0x9d50
   18dc4:	movt	r1, #1
   18dc8:	mov	r0, r3
   18dcc:	bl	10f4c <strcmp@plt>
   18dd0:	mov	r3, r0
   18dd4:	cmp	r3, #0
   18dd8:	beq	18de4 <__assert_fail@plt+0x7bbc>
   18ddc:	mov	r3, #1
   18de0:	b	18de8 <__assert_fail@plt+0x7bc0>
   18de4:	mov	r3, #0
   18de8:	and	r3, r3, #1
   18dec:	uxtb	r3, r3
   18df0:	mov	r0, r3
   18df4:	sub	sp, fp, #4
   18df8:	ldr	fp, [sp]
   18dfc:	add	sp, sp, #4
   18e00:	pop	{pc}		; (ldr pc, [sp], #4)
   18e04:	str	fp, [sp, #-8]!
   18e08:	str	lr, [sp, #4]
   18e0c:	add	fp, sp, #4
   18e10:	sub	sp, sp, #16
   18e14:	str	r0, [fp, #-16]
   18e18:	mov	r1, #0
   18e1c:	ldr	r0, [fp, #-16]
   18e20:	bl	11198 <setlocale@plt>
   18e24:	str	r0, [fp, #-8]
   18e28:	ldr	r3, [fp, #-8]
   18e2c:	mov	r0, r3
   18e30:	sub	sp, fp, #4
   18e34:	ldr	fp, [sp]
   18e38:	add	sp, sp, #4
   18e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e40:	str	fp, [sp, #-8]!
   18e44:	str	lr, [sp, #4]
   18e48:	add	fp, sp, #4
   18e4c:	sub	sp, sp, #24
   18e50:	str	r0, [fp, #-16]
   18e54:	str	r1, [fp, #-20]	; 0xffffffec
   18e58:	str	r2, [fp, #-24]	; 0xffffffe8
   18e5c:	ldr	r0, [fp, #-16]
   18e60:	bl	18e04 <__assert_fail@plt+0x7bdc>
   18e64:	str	r0, [fp, #-8]
   18e68:	ldr	r3, [fp, #-8]
   18e6c:	cmp	r3, #0
   18e70:	bne	18e94 <__assert_fail@plt+0x7c6c>
   18e74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e78:	cmp	r3, #0
   18e7c:	beq	18e8c <__assert_fail@plt+0x7c64>
   18e80:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e84:	mov	r2, #0
   18e88:	strb	r2, [r3]
   18e8c:	mov	r3, #22
   18e90:	b	18f10 <__assert_fail@plt+0x7ce8>
   18e94:	ldr	r0, [fp, #-8]
   18e98:	bl	110f0 <strlen@plt>
   18e9c:	str	r0, [fp, #-12]
   18ea0:	ldr	r2, [fp, #-12]
   18ea4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ea8:	cmp	r2, r3
   18eac:	bcs	18ed0 <__assert_fail@plt+0x7ca8>
   18eb0:	ldr	r3, [fp, #-12]
   18eb4:	add	r3, r3, #1
   18eb8:	mov	r2, r3
   18ebc:	ldr	r1, [fp, #-8]
   18ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
   18ec4:	bl	10f94 <memcpy@plt>
   18ec8:	mov	r3, #0
   18ecc:	b	18f10 <__assert_fail@plt+0x7ce8>
   18ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ed4:	cmp	r3, #0
   18ed8:	beq	18f0c <__assert_fail@plt+0x7ce4>
   18edc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ee0:	sub	r3, r3, #1
   18ee4:	mov	r2, r3
   18ee8:	ldr	r1, [fp, #-8]
   18eec:	ldr	r0, [fp, #-20]	; 0xffffffec
   18ef0:	bl	10f94 <memcpy@plt>
   18ef4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ef8:	sub	r3, r3, #1
   18efc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18f00:	add	r3, r2, r3
   18f04:	mov	r2, #0
   18f08:	strb	r2, [r3]
   18f0c:	mov	r3, #34	; 0x22
   18f10:	mov	r0, r3
   18f14:	sub	sp, fp, #4
   18f18:	ldr	fp, [sp]
   18f1c:	add	sp, sp, #4
   18f20:	pop	{pc}		; (ldr pc, [sp], #4)
   18f24:	str	fp, [sp, #-8]!
   18f28:	str	lr, [sp, #4]
   18f2c:	add	fp, sp, #4
   18f30:	sub	sp, sp, #16
   18f34:	str	r0, [fp, #-8]
   18f38:	str	r1, [fp, #-12]
   18f3c:	str	r2, [fp, #-16]
   18f40:	ldr	r2, [fp, #-16]
   18f44:	ldr	r1, [fp, #-12]
   18f48:	ldr	r0, [fp, #-8]
   18f4c:	bl	18e40 <__assert_fail@plt+0x7c18>
   18f50:	mov	r3, r0
   18f54:	mov	r0, r3
   18f58:	sub	sp, fp, #4
   18f5c:	ldr	fp, [sp]
   18f60:	add	sp, sp, #4
   18f64:	pop	{pc}		; (ldr pc, [sp], #4)
   18f68:	str	fp, [sp, #-8]!
   18f6c:	str	lr, [sp, #4]
   18f70:	add	fp, sp, #4
   18f74:	sub	sp, sp, #8
   18f78:	str	r0, [fp, #-8]
   18f7c:	ldr	r0, [fp, #-8]
   18f80:	bl	18e04 <__assert_fail@plt+0x7bdc>
   18f84:	mov	r3, r0
   18f88:	mov	r0, r3
   18f8c:	sub	sp, fp, #4
   18f90:	ldr	fp, [sp]
   18f94:	add	sp, sp, #4
   18f98:	pop	{pc}		; (ldr pc, [sp], #4)
   18f9c:	cmp	r3, #0
   18fa0:	cmpeq	r2, #0
   18fa4:	bne	18fbc <__assert_fail@plt+0x7d94>
   18fa8:	cmp	r1, #0
   18fac:	cmpeq	r0, #0
   18fb0:	mvnne	r1, #0
   18fb4:	mvnne	r0, #0
   18fb8:	b	18fd8 <__assert_fail@plt+0x7db0>
   18fbc:	sub	sp, sp, #8
   18fc0:	push	{sp, lr}
   18fc4:	bl	18fe8 <__assert_fail@plt+0x7dc0>
   18fc8:	ldr	lr, [sp, #4]
   18fcc:	add	sp, sp, #8
   18fd0:	pop	{r2, r3}
   18fd4:	bx	lr
   18fd8:	push	{r1, lr}
   18fdc:	mov	r0, #8
   18fe0:	bl	10f34 <raise@plt>
   18fe4:	pop	{r1, pc}
   18fe8:	cmp	r1, r3
   18fec:	cmpeq	r0, r2
   18ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff4:	mov	r4, r0
   18ff8:	movcc	r0, #0
   18ffc:	mov	r5, r1
   19000:	ldr	lr, [sp, #36]	; 0x24
   19004:	movcc	r1, r0
   19008:	bcc	19104 <__assert_fail@plt+0x7edc>
   1900c:	cmp	r3, #0
   19010:	clzeq	ip, r2
   19014:	clzne	ip, r3
   19018:	addeq	ip, ip, #32
   1901c:	cmp	r5, #0
   19020:	clzeq	r1, r4
   19024:	addeq	r1, r1, #32
   19028:	clzne	r1, r5
   1902c:	sub	ip, ip, r1
   19030:	sub	sl, ip, #32
   19034:	lsl	r9, r3, ip
   19038:	rsb	fp, ip, #32
   1903c:	orr	r9, r9, r2, lsl sl
   19040:	orr	r9, r9, r2, lsr fp
   19044:	lsl	r8, r2, ip
   19048:	cmp	r5, r9
   1904c:	cmpeq	r4, r8
   19050:	movcc	r0, #0
   19054:	movcc	r1, r0
   19058:	bcc	19074 <__assert_fail@plt+0x7e4c>
   1905c:	mov	r0, #1
   19060:	subs	r4, r4, r8
   19064:	lsl	r1, r0, sl
   19068:	orr	r1, r1, r0, lsr fp
   1906c:	lsl	r0, r0, ip
   19070:	sbc	r5, r5, r9
   19074:	cmp	ip, #0
   19078:	beq	19104 <__assert_fail@plt+0x7edc>
   1907c:	lsr	r6, r8, #1
   19080:	orr	r6, r6, r9, lsl #31
   19084:	lsr	r7, r9, #1
   19088:	mov	r2, ip
   1908c:	b	190b0 <__assert_fail@plt+0x7e88>
   19090:	subs	r3, r4, r6
   19094:	sbc	r8, r5, r7
   19098:	adds	r3, r3, r3
   1909c:	adc	r8, r8, r8
   190a0:	adds	r4, r3, #1
   190a4:	adc	r5, r8, #0
   190a8:	subs	r2, r2, #1
   190ac:	beq	190cc <__assert_fail@plt+0x7ea4>
   190b0:	cmp	r5, r7
   190b4:	cmpeq	r4, r6
   190b8:	bcs	19090 <__assert_fail@plt+0x7e68>
   190bc:	adds	r4, r4, r4
   190c0:	adc	r5, r5, r5
   190c4:	subs	r2, r2, #1
   190c8:	bne	190b0 <__assert_fail@plt+0x7e88>
   190cc:	lsr	r3, r4, ip
   190d0:	orr	r3, r3, r5, lsl fp
   190d4:	lsr	r2, r5, ip
   190d8:	orr	r3, r3, r5, lsr sl
   190dc:	adds	r0, r0, r4
   190e0:	mov	r4, r3
   190e4:	lsl	r3, r2, ip
   190e8:	orr	r3, r3, r4, lsl sl
   190ec:	lsl	ip, r4, ip
   190f0:	orr	r3, r3, r4, lsr fp
   190f4:	adc	r1, r1, r5
   190f8:	subs	r0, r0, ip
   190fc:	mov	r5, r2
   19100:	sbc	r1, r1, r3
   19104:	cmp	lr, #0
   19108:	strdne	r4, [lr]
   1910c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19110:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19114:	mov	r7, r0
   19118:	ldr	r6, [pc, #72]	; 19168 <__assert_fail@plt+0x7f40>
   1911c:	ldr	r5, [pc, #72]	; 1916c <__assert_fail@plt+0x7f44>
   19120:	add	r6, pc, r6
   19124:	add	r5, pc, r5
   19128:	sub	r6, r6, r5
   1912c:	mov	r8, r1
   19130:	mov	r9, r2
   19134:	bl	10ef0 <calloc@plt-0x20>
   19138:	asrs	r6, r6, #2
   1913c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19140:	mov	r4, #0
   19144:	add	r4, r4, #1
   19148:	ldr	r3, [r5], #4
   1914c:	mov	r2, r9
   19150:	mov	r1, r8
   19154:	mov	r0, r7
   19158:	blx	r3
   1915c:	cmp	r6, r4
   19160:	bne	19144 <__assert_fail@plt+0x7f1c>
   19164:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19168:	andeq	r0, r1, ip, ror #27
   1916c:	andeq	r0, r1, r4, ror #27
   19170:	bx	lr
   19174:	ldr	r3, [pc, #12]	; 19188 <__assert_fail@plt+0x7f60>
   19178:	mov	r1, #0
   1917c:	add	r3, pc, r3
   19180:	ldr	r2, [r3]
   19184:	b	11120 <__cxa_atexit@plt>
   19188:	muleq	r1, ip, pc	; <UNPREDICTABLE>

Disassembly of section .fini:

0001918c <.fini>:
   1918c:	push	{r3, lr}
   19190:	pop	{r3, pc}
