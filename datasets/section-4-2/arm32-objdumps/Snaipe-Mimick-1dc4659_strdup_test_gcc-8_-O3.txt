
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	11258 <_start@@Base+0x3c>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <strstr@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <strstr@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	r2, r1, ip, asr #29

00011138 <strstr@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #73728	; 0x12000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <strcmp@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #73728	; 0x12000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <mprotect@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #73728	; 0x12000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <free@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #73728	; 0x12000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <memcpy@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #73728	; 0x12000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #73728	; 0x12000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <malloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #73728	; 0x12000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <__libc_start_main@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #73728	; 0x12000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <__gmon_start__@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #73728	; 0x12000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <strlen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #73728	; 0x12000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <mmap@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #73728	; 0x12000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <strchr@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #73728	; 0x12000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <fprintf@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #73728	; 0x12000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <__errno_location@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #73728	; 0x12000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <snprintf@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #73728	; 0x12000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <munmap@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #73728	; 0x12000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <my_strdup@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #73728	; 0x12000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <strncmp@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #73728	; 0x12000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <abort@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #73728	; 0x12000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

Disassembly of section .text:

0001121c <_start@@Base>:
   1121c:	mov	fp, #0
   11220:	mov	lr, #0
   11224:	pop	{r1}		; (ldr r1, [sp], #4)
   11228:	mov	r2, sp
   1122c:	push	{r2}		; (str r2, [sp, #-4]!)
   11230:	push	{r0}		; (str r0, [sp, #-4]!)
   11234:	ldr	ip, [pc, #16]	; 1124c <_start@@Base+0x30>
   11238:	push	{ip}		; (str ip, [sp, #-4]!)
   1123c:	ldr	r0, [pc, #12]	; 11250 <_start@@Base+0x34>
   11240:	ldr	r3, [pc, #12]	; 11254 <_start@@Base+0x38>
   11244:	bl	1118c <__libc_start_main@plt>
   11248:	bl	11210 <abort@plt>
   1124c:	ldrdeq	r3, [r1], -r0
   11250:	andeq	r1, r1, r4, ror #21
   11254:	andeq	r3, r1, r0, ror r6
   11258:	ldr	r3, [pc, #20]	; 11274 <_start@@Base+0x58>
   1125c:	ldr	r2, [pc, #20]	; 11278 <_start@@Base+0x5c>
   11260:	add	r3, pc, r3
   11264:	ldr	r2, [r3, r2]
   11268:	cmp	r2, #0
   1126c:	bxeq	lr
   11270:	b	11198 <__gmon_start__@plt>
   11274:	muleq	r1, r8, sp
   11278:	andeq	r0, r0, r8, asr r0
   1127c:	ldr	r0, [pc, #24]	; 1129c <_start@@Base+0x80>
   11280:	ldr	r3, [pc, #24]	; 112a0 <_start@@Base+0x84>
   11284:	cmp	r3, r0
   11288:	bxeq	lr
   1128c:	ldr	r3, [pc, #16]	; 112a4 <_start@@Base+0x88>
   11290:	cmp	r3, #0
   11294:	bxeq	lr
   11298:	bx	r3
   1129c:	andeq	r4, r2, r0, ror r0
   112a0:	andeq	r4, r2, r0, ror r0
   112a4:	andeq	r0, r0, r0
   112a8:	ldr	r0, [pc, #36]	; 112d4 <_start@@Base+0xb8>
   112ac:	ldr	r1, [pc, #36]	; 112d8 <_start@@Base+0xbc>
   112b0:	sub	r1, r1, r0
   112b4:	asr	r1, r1, #2
   112b8:	add	r1, r1, r1, lsr #31
   112bc:	asrs	r1, r1, #1
   112c0:	bxeq	lr
   112c4:	ldr	r3, [pc, #16]	; 112dc <_start@@Base+0xc0>
   112c8:	cmp	r3, #0
   112cc:	bxeq	lr
   112d0:	bx	r3
   112d4:	andeq	r4, r2, r0, ror r0
   112d8:	andeq	r4, r2, r0, ror r0
   112dc:	andeq	r0, r0, r0
   112e0:	push	{r4, lr}
   112e4:	ldr	r4, [pc, #24]	; 11304 <_start@@Base+0xe8>
   112e8:	ldrb	r3, [r4]
   112ec:	cmp	r3, #0
   112f0:	popne	{r4, pc}
   112f4:	bl	1127c <_start@@Base+0x60>
   112f8:	mov	r3, #1
   112fc:	strb	r3, [r4]
   11300:	pop	{r4, pc}
   11304:	andeq	r4, r2, r8, lsl #1
   11308:	b	112a8 <_start@@Base+0x8c>
   1130c:	str	fp, [sp, #-8]!
   11310:	str	lr, [sp, #4]
   11314:	add	fp, sp, #4
   11318:	sub	sp, sp, #96	; 0x60
   1131c:	str	r0, [fp, #-96]	; 0xffffffa0
   11320:	bl	11cf4 <mmk_matcher_ctx@@Base>
   11324:	str	r0, [fp, #-24]	; 0xffffffe8
   11328:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1132c:	cmp	r3, #0
   11330:	beq	1158c <_start@@Base+0x370>
   11334:	bl	12b68 <mmk_ctx@@Base>
   11338:	mov	r3, r0
   1133c:	mov	r0, r3
   11340:	bl	12768 <mmk_stub_context@@Base>
   11344:	str	r0, [fp, #-28]	; 0xffffffe4
   11348:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1134c:	ldr	r3, [r3]
   11350:	cmp	r3, #0
   11354:	bne	113a8 <_start@@Base+0x18c>
   11358:	mov	r0, #44	; 0x2c
   1135c:	bl	133e8 <mmk_malloc@@Base>
   11360:	str	r0, [fp, #-32]	; 0xffffffe0
   11364:	bl	13588 <mmk_when_get_result@@Base>
   11368:	mov	r2, r0
   1136c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11370:	add	r3, r3, #8
   11374:	ldrd	r0, [r2]
   11378:	strd	r0, [r3]
   1137c:	ldrd	r0, [r2, #8]
   11380:	strd	r0, [r3, #8]
   11384:	ldr	r2, [r2, #16]
   11388:	str	r2, [r3, #16]
   1138c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11390:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11394:	str	r2, [r3, #40]	; 0x28
   11398:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1139c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   113a0:	bl	135b0 <mmk_when_impl@@Base>
   113a4:	b	1157c <_start@@Base+0x360>
   113a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113ac:	ldr	r3, [r3]
   113b0:	cmp	r3, #1
   113b4:	bne	1157c <_start@@Base+0x360>
   113b8:	mov	r3, #0
   113bc:	str	r3, [fp, #-8]
   113c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   113c4:	bl	12064 <mmk_mock_params_begin@@Base>
   113c8:	str	r0, [fp, #-12]
   113cc:	b	11534 <_start@@Base+0x318>
   113d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113d4:	str	r3, [fp, #-36]	; 0xffffffdc
   113d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   113dc:	ldr	r3, [r3, #8]
   113e0:	cmp	r3, #0
   113e4:	beq	114d4 <_start@@Base+0x2b8>
   113e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   113ec:	ldr	r3, [r3, #8]
   113f0:	str	r3, [fp, #-36]	; 0xffffffdc
   113f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   113f8:	ldr	r3, [r3]
   113fc:	cmp	r3, #0
   11400:	beq	114f8 <_start@@Base+0x2dc>
   11404:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11408:	ldr	r3, [r3]
   1140c:	cmp	r3, #0
   11410:	bge	11494 <_start@@Base+0x278>
   11414:	ldr	r3, [fp, #-12]
   11418:	add	r3, r3, #12
   1141c:	sub	r1, fp, #96	; 0x60
   11420:	mov	r2, #4
   11424:	mov	r0, r3
   11428:	bl	13118 <mmk_memcmp@@Base>
   1142c:	str	r0, [fp, #-40]	; 0xffffffd8
   11430:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11434:	cmp	r3, #0
   11438:	bne	11450 <_start@@Base+0x234>
   1143c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11440:	ldr	r3, [r3]
   11444:	and	r3, r3, #2
   11448:	cmp	r3, #0
   1144c:	beq	11510 <_start@@Base+0x2f4>
   11450:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11454:	cmp	r3, #0
   11458:	bge	11470 <_start@@Base+0x254>
   1145c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11460:	ldr	r3, [r3]
   11464:	and	r3, r3, #4
   11468:	cmp	r3, #0
   1146c:	beq	11518 <_start@@Base+0x2fc>
   11470:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11474:	cmp	r3, #0
   11478:	ble	114f8 <_start@@Base+0x2dc>
   1147c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11480:	ldr	r3, [r3]
   11484:	and	r3, r3, #8
   11488:	cmp	r3, #0
   1148c:	bne	114f8 <_start@@Base+0x2dc>
   11490:	b	11524 <_start@@Base+0x308>
   11494:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11498:	ldr	r3, [r3]
   1149c:	cmp	r3, #1
   114a0:	bne	114f8 <_start@@Base+0x2dc>
   114a4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   114a8:	bl	11d88 <mmk_matcher_get_predicate@@Base>
   114ac:	str	r0, [fp, #-44]	; 0xffffffd4
   114b0:	ldr	r3, [fp, #-12]
   114b4:	ldr	r2, [r3, #12]
   114b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   114bc:	mov	r0, r2
   114c0:	blx	r3
   114c4:	mov	r3, r0
   114c8:	cmp	r3, #0
   114cc:	bne	114f8 <_start@@Base+0x2dc>
   114d0:	b	11524 <_start@@Base+0x308>
   114d4:	ldr	r3, [fp, #-12]
   114d8:	add	r3, r3, #12
   114dc:	sub	r1, fp, #96	; 0x60
   114e0:	mov	r2, #4
   114e4:	mov	r0, r3
   114e8:	bl	13118 <mmk_memcmp@@Base>
   114ec:	mov	r3, r0
   114f0:	cmp	r3, #0
   114f4:	bne	11520 <_start@@Base+0x304>
   114f8:	ldr	r3, [fp, #-12]
   114fc:	ldr	r3, [r3]
   11500:	ldr	r2, [fp, #-8]
   11504:	add	r3, r2, r3
   11508:	str	r3, [fp, #-8]
   1150c:	b	11524 <_start@@Base+0x308>
   11510:	nop	{0}
   11514:	b	11524 <_start@@Base+0x308>
   11518:	nop	{0}
   1151c:	b	11524 <_start@@Base+0x308>
   11520:	nop	{0}
   11524:	ldr	r1, [fp, #-12]
   11528:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1152c:	bl	120b8 <mmk_mock_params_next@@Base>
   11530:	str	r0, [fp, #-12]
   11534:	ldr	r3, [fp, #-12]
   11538:	cmp	r3, #0
   1153c:	bne	113d0 <_start@@Base+0x1b4>
   11540:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11544:	str	r3, [fp, #-16]
   11548:	b	11568 <_start@@Base+0x34c>
   1154c:	ldr	r3, [fp, #-16]
   11550:	ldr	r3, [r3, #8]
   11554:	str	r3, [fp, #-48]	; 0xffffffd0
   11558:	ldr	r0, [fp, #-16]
   1155c:	bl	13408 <mmk_free@@Base>
   11560:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11564:	str	r3, [fp, #-16]
   11568:	ldr	r3, [fp, #-16]
   1156c:	cmp	r3, #0
   11570:	bne	1154c <_start@@Base+0x330>
   11574:	ldr	r0, [fp, #-8]
   11578:	bl	12ce4 <mmk_verify_set_times@@Base>
   1157c:	movw	r3, #16524	; 0x408c
   11580:	movt	r3, #2
   11584:	ldr	r3, [r3]
   11588:	b	117fc <_start@@Base+0x5e0>
   1158c:	sub	r1, fp, #88	; 0x58
   11590:	mov	r2, #0
   11594:	mov	r3, #0
   11598:	strd	r2, [r1]
   1159c:	strd	r2, [r1, #8]
   115a0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   115a4:	str	r3, [fp, #-76]	; 0xffffffb4
   115a8:	sub	r3, fp, #88	; 0x58
   115ac:	str	r3, [fp, #-52]	; 0xffffffcc
   115b0:	mov	r1, #16
   115b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   115b8:	bl	12efc <mmk_verify_register_call@@Base>
   115bc:	bl	12130 <mmk_mock_get_params@@Base>
   115c0:	str	r0, [fp, #-20]	; 0xffffffec
   115c4:	b	117e4 <_start@@Base+0x5c8>
   115c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   115cc:	str	r3, [fp, #-56]	; 0xffffffc8
   115d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   115d4:	ldr	r3, [r3]
   115d8:	str	r3, [fp, #-60]	; 0xffffffc4
   115dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   115e0:	ldr	r3, [r3, #8]
   115e4:	cmp	r3, #0
   115e8:	beq	116d0 <_start@@Base+0x4b4>
   115ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   115f0:	ldr	r3, [r3, #8]
   115f4:	str	r3, [fp, #-60]	; 0xffffffc4
   115f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   115fc:	ldr	r3, [r3]
   11600:	cmp	r3, #0
   11604:	beq	116f4 <_start@@Base+0x4d8>
   11608:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1160c:	ldr	r3, [r3]
   11610:	cmp	r3, #0
   11614:	bge	11694 <_start@@Base+0x478>
   11618:	sub	r1, fp, #96	; 0x60
   1161c:	sub	r3, fp, #96	; 0x60
   11620:	mov	r2, #4
   11624:	mov	r0, r3
   11628:	bl	13118 <mmk_memcmp@@Base>
   1162c:	str	r0, [fp, #-64]	; 0xffffffc0
   11630:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11634:	cmp	r3, #0
   11638:	bne	11650 <_start@@Base+0x434>
   1163c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11640:	ldr	r3, [r3]
   11644:	and	r3, r3, #2
   11648:	cmp	r3, #0
   1164c:	beq	117cc <_start@@Base+0x5b0>
   11650:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11654:	cmp	r3, #0
   11658:	bge	11670 <_start@@Base+0x454>
   1165c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11660:	ldr	r3, [r3]
   11664:	and	r3, r3, #4
   11668:	cmp	r3, #0
   1166c:	beq	117cc <_start@@Base+0x5b0>
   11670:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11674:	cmp	r3, #0
   11678:	ble	116f4 <_start@@Base+0x4d8>
   1167c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11680:	ldr	r3, [r3]
   11684:	and	r3, r3, #8
   11688:	cmp	r3, #0
   1168c:	bne	116f4 <_start@@Base+0x4d8>
   11690:	b	117cc <_start@@Base+0x5b0>
   11694:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11698:	ldr	r3, [r3]
   1169c:	cmp	r3, #1
   116a0:	bne	116f4 <_start@@Base+0x4d8>
   116a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   116a8:	bl	11d88 <mmk_matcher_get_predicate@@Base>
   116ac:	str	r0, [fp, #-68]	; 0xffffffbc
   116b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   116b4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   116b8:	mov	r0, r2
   116bc:	blx	r3
   116c0:	mov	r3, r0
   116c4:	cmp	r3, #0
   116c8:	bne	116f4 <_start@@Base+0x4d8>
   116cc:	b	117d8 <_start@@Base+0x5bc>
   116d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   116d4:	add	r1, r3, #40	; 0x28
   116d8:	sub	r3, fp, #96	; 0x60
   116dc:	mov	r2, #4
   116e0:	mov	r0, r3
   116e4:	bl	13118 <mmk_memcmp@@Base>
   116e8:	mov	r3, r0
   116ec:	cmp	r3, #0
   116f0:	bne	117d4 <_start@@Base+0x5b8>
   116f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   116f8:	ldr	r3, [r3, #12]
   116fc:	cmp	r3, #0
   11700:	beq	11718 <_start@@Base+0x4fc>
   11704:	bl	111d4 <__errno_location@plt>
   11708:	mov	r2, r0
   1170c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11710:	ldr	r3, [r3, #12]
   11714:	str	r3, [r2]
   11718:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1171c:	ldr	r3, [r3, #20]
   11720:	cmp	r3, #0
   11724:	beq	11758 <_start@@Base+0x53c>
   11728:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1172c:	ldr	r3, [r3, #16]
   11730:	cmp	r3, #0
   11734:	bne	11758 <_start@@Base+0x53c>
   11738:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1173c:	ldr	r3, [r3, #20]
   11740:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11744:	mov	r0, r2
   11748:	blx	r3
   1174c:	str	r0, [fp, #-72]	; 0xffffffb8
   11750:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11754:	b	117fc <_start@@Base+0x5e0>
   11758:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1175c:	ldr	r3, [r3, #20]
   11760:	cmp	r3, #0
   11764:	beq	1179c <_start@@Base+0x580>
   11768:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1176c:	ldr	r3, [r3, #16]
   11770:	cmp	r3, #0
   11774:	beq	1179c <_start@@Base+0x580>
   11778:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1177c:	ldr	r3, [r3, #20]
   11780:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11784:	mov	r0, r2
   11788:	blx	r3
   1178c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11790:	ldr	r3, [r3, #16]
   11794:	ldr	r3, [r3]
   11798:	b	117fc <_start@@Base+0x5e0>
   1179c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117a0:	ldr	r3, [r3, #16]
   117a4:	cmp	r3, #0
   117a8:	beq	117bc <_start@@Base+0x5a0>
   117ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117b0:	ldr	r3, [r3, #16]
   117b4:	ldr	r3, [r3]
   117b8:	b	117fc <_start@@Base+0x5e0>
   117bc:	movw	r3, #16524	; 0x408c
   117c0:	movt	r3, #2
   117c4:	ldr	r3, [r3]
   117c8:	b	117fc <_start@@Base+0x5e0>
   117cc:	nop	{0}
   117d0:	b	117d8 <_start@@Base+0x5bc>
   117d4:	nop	{0}
   117d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   117dc:	ldr	r3, [r3, #4]
   117e0:	str	r3, [fp, #-20]	; 0xffffffec
   117e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   117e8:	cmp	r3, #0
   117ec:	bne	115c8 <_start@@Base+0x3ac>
   117f0:	movw	r3, #16524	; 0x408c
   117f4:	movt	r3, #2
   117f8:	ldr	r3, [r3]
   117fc:	mov	r0, r3
   11800:	sub	sp, fp, #4
   11804:	ldr	fp, [sp]
   11808:	add	sp, sp, #4
   1180c:	pop	{pc}		; (ldr pc, [sp], #4)
   11810:	str	fp, [sp, #-8]!
   11814:	str	lr, [sp, #4]
   11818:	add	fp, sp, #4
   1181c:	sub	sp, sp, #8
   11820:	str	r0, [fp, #-8]
   11824:	movw	r1, #4876	; 0x130c
   11828:	movt	r1, #1
   1182c:	ldr	r0, [fp, #-8]
   11830:	bl	11d90 <mmk_mock_create_internal@@Base>
   11834:	mov	r3, r0
   11838:	mov	r0, r3
   1183c:	sub	sp, fp, #4
   11840:	ldr	fp, [sp]
   11844:	add	sp, sp, #4
   11848:	pop	{pc}		; (ldr pc, [sp], #4)

0001184c <test_simple_case@@Base>:
   1184c:	str	fp, [sp, #-8]!
   11850:	str	lr, [sp, #4]
   11854:	add	fp, sp, #4
   11858:	sub	sp, sp, #72	; 0x48
   1185c:	movw	r0, #14048	; 0x36e0
   11860:	movt	r0, #1
   11864:	bl	11810 <_start@@Base+0x5f4>
   11868:	mov	r0, #0
   1186c:	bl	11c9c <mmk_matcher_init@@Base>
   11870:	sub	r1, fp, #60	; 0x3c
   11874:	mov	r2, #0
   11878:	mov	r3, #0
   1187c:	strd	r2, [r1]
   11880:	strd	r2, [r1, #8]
   11884:	mov	r3, r2
   11888:	str	r3, [r1, #16]
   1188c:	sub	r3, fp, #68	; 0x44
   11890:	str	r3, [fp, #-40]	; 0xffffffd8
   11894:	sub	r3, fp, #40	; 0x28
   11898:	str	r3, [fp, #-52]	; 0xffffffcc
   1189c:	sub	r3, fp, #60	; 0x3c
   118a0:	mov	r0, r3
   118a4:	bl	13554 <mmk_when_init@@Base>
   118a8:	mov	r0, #6
   118ac:	bl	11180 <malloc@plt>
   118b0:	bl	11cdc <mmk_matcher_term@@Base>
   118b4:	movw	r0, #14068	; 0x36f4
   118b8:	movt	r0, #1
   118bc:	bl	111f8 <my_strdup@plt>
   118c0:	str	r0, [fp, #-8]
   118c4:	mov	r0, #1
   118c8:	bl	11c9c <mmk_matcher_init@@Base>
   118cc:	mov	r1, #0
   118d0:	mov	r0, #-2147483638	; 0x8000000a
   118d4:	bl	11d08 <mmk_matcher_add@@Base>
   118d8:	mov	r0, #6
   118dc:	bl	11180 <malloc@plt>
   118e0:	bl	11cdc <mmk_matcher_term@@Base>
   118e4:	sub	r1, fp, #36	; 0x24
   118e8:	mov	r2, #0
   118ec:	mov	r3, #0
   118f0:	strd	r2, [r1]
   118f4:	strd	r2, [r1, #8]
   118f8:	strd	r2, [r1, #16]
   118fc:	mov	r3, #1
   11900:	str	r3, [fp, #-36]	; 0xffffffdc
   11904:	mov	r3, #1
   11908:	str	r3, [fp, #-20]	; 0xffffffec
   1190c:	sub	r3, fp, #36	; 0x24
   11910:	mov	r0, r3
   11914:	bl	12d18 <mmk_verify_times@@Base>
   11918:	str	r0, [fp, #-12]
   1191c:	ldr	r3, [fp, #-12]
   11920:	cmp	r3, #0
   11924:	bne	1195c <test_simple_case@@Base+0x110>
   11928:	movw	r3, #16496	; 0x4070
   1192c:	movt	r3, #2
   11930:	ldr	r0, [r3]
   11934:	movw	r3, #14176	; 0x3760
   11938:	movt	r3, #1
   1193c:	str	r3, [sp]
   11940:	mov	r3, #23
   11944:	movw	r2, #14076	; 0x36fc
   11948:	movt	r2, #1
   1194c:	movw	r1, #14144	; 0x3740
   11950:	movt	r1, #1
   11954:	bl	111c8 <fprintf@plt>
   11958:	bl	11210 <abort@plt>
   1195c:	sub	r3, fp, #68	; 0x44
   11960:	ldr	r2, [fp, #-8]
   11964:	cmp	r2, r3
   11968:	bne	1198c <test_simple_case@@Base+0x140>
   1196c:	sub	r3, fp, #68	; 0x44
   11970:	mov	r1, r3
   11974:	movw	r0, #16484	; 0x4064
   11978:	movt	r0, #2
   1197c:	bl	11144 <strcmp@plt>
   11980:	mov	r3, r0
   11984:	cmp	r3, #0
   11988:	beq	119c0 <test_simple_case@@Base+0x174>
   1198c:	movw	r3, #16496	; 0x4070
   11990:	movt	r3, #2
   11994:	ldr	r0, [r3]
   11998:	movw	r3, #14184	; 0x3768
   1199c:	movt	r3, #1
   119a0:	str	r3, [sp]
   119a4:	mov	r3, #24
   119a8:	movw	r2, #14076	; 0x36fc
   119ac:	movt	r2, #1
   119b0:	movw	r1, #14144	; 0x3740
   119b4:	movt	r1, #1
   119b8:	bl	111c8 <fprintf@plt>
   119bc:	bl	11210 <abort@plt>
   119c0:	movw	r0, #4480	; 0x1180
   119c4:	movt	r0, #1
   119c8:	bl	11c44 <mmk_reset@@Base>
   119cc:	nop	{0}
   119d0:	sub	sp, fp, #4
   119d4:	ldr	fp, [sp]
   119d8:	add	sp, sp, #4
   119dc:	pop	{pc}		; (ldr pc, [sp], #4)

000119e0 <test_error_case@@Base>:
   119e0:	str	fp, [sp, #-8]!
   119e4:	str	lr, [sp, #4]
   119e8:	add	fp, sp, #4
   119ec:	sub	sp, sp, #40	; 0x28
   119f0:	movw	r0, #14048	; 0x36e0
   119f4:	movt	r0, #1
   119f8:	bl	11810 <_start@@Base+0x5f4>
   119fc:	str	r0, [fp, #-8]
   11a00:	mov	r0, #0
   11a04:	bl	11c9c <mmk_matcher_init@@Base>
   11a08:	sub	r1, fp, #36	; 0x24
   11a0c:	mov	r2, #0
   11a10:	mov	r3, #0
   11a14:	strd	r2, [r1]
   11a18:	strd	r2, [r1, #8]
   11a1c:	mov	r3, r2
   11a20:	str	r3, [r1, #16]
   11a24:	mov	r3, #12
   11a28:	str	r3, [fp, #-32]	; 0xffffffe0
   11a2c:	mov	r3, #0
   11a30:	str	r3, [fp, #-16]
   11a34:	sub	r3, fp, #16
   11a38:	str	r3, [fp, #-28]	; 0xffffffe4
   11a3c:	sub	r3, fp, #36	; 0x24
   11a40:	mov	r0, r3
   11a44:	bl	13554 <mmk_when_init@@Base>
   11a48:	mov	r1, #1
   11a4c:	mov	r0, #0
   11a50:	bl	11d08 <mmk_matcher_add@@Base>
   11a54:	ldr	r3, [fp, #-8]
   11a58:	mov	r0, #0
   11a5c:	blx	r3
   11a60:	bl	11cdc <mmk_matcher_term@@Base>
   11a64:	movw	r0, #14216	; 0x3788
   11a68:	movt	r0, #1
   11a6c:	bl	111f8 <my_strdup@plt>
   11a70:	str	r0, [fp, #-12]
   11a74:	ldr	r3, [fp, #-12]
   11a78:	cmp	r3, #0
   11a7c:	bne	11a94 <test_error_case@@Base+0xb4>
   11a80:	bl	111d4 <__errno_location@plt>
   11a84:	mov	r3, r0
   11a88:	ldr	r3, [r3]
   11a8c:	cmp	r3, #12
   11a90:	beq	11ac8 <test_error_case@@Base+0xe8>
   11a94:	movw	r3, #16496	; 0x4070
   11a98:	movt	r3, #2
   11a9c:	ldr	r0, [r3]
   11aa0:	movw	r3, #14220	; 0x378c
   11aa4:	movt	r3, #1
   11aa8:	str	r3, [sp]
   11aac:	mov	r3, #39	; 0x27
   11ab0:	movw	r2, #14076	; 0x36fc
   11ab4:	movt	r2, #1
   11ab8:	movw	r1, #14144	; 0x3740
   11abc:	movt	r1, #1
   11ac0:	bl	111c8 <fprintf@plt>
   11ac4:	bl	11210 <abort@plt>
   11ac8:	ldr	r0, [fp, #-8]
   11acc:	bl	11c44 <mmk_reset@@Base>
   11ad0:	nop	{0}
   11ad4:	sub	sp, fp, #4
   11ad8:	ldr	fp, [sp]
   11adc:	add	sp, sp, #4
   11ae0:	pop	{pc}		; (ldr pc, [sp], #4)

00011ae4 <main@@Base>:
   11ae4:	str	fp, [sp, #-8]!
   11ae8:	str	lr, [sp, #4]
   11aec:	add	fp, sp, #4
   11af0:	bl	1184c <test_simple_case@@Base>
   11af4:	bl	119e0 <test_error_case@@Base>
   11af8:	mov	r3, #0
   11afc:	mov	r0, r3
   11b00:	sub	sp, fp, #4
   11b04:	ldr	fp, [sp]
   11b08:	add	sp, sp, #4
   11b0c:	pop	{pc}		; (ldr pc, [sp], #4)

00011b10 <mmk_init@@Base>:
   11b10:	str	fp, [sp, #-8]!
   11b14:	str	lr, [sp, #4]
   11b18:	add	fp, sp, #4
   11b1c:	sub	sp, sp, #8
   11b20:	movw	r3, #16528	; 0x4090
   11b24:	movt	r3, #2
   11b28:	ldr	r3, [r3]
   11b2c:	cmp	r3, #0
   11b30:	bne	11bb8 <mmk_init@@Base+0xa8>
   11b34:	bl	12390 <plt_init_ctx@@Base>
   11b38:	mov	r2, r0
   11b3c:	movw	r3, #16528	; 0x4090
   11b40:	movt	r3, #2
   11b44:	str	r2, [r3, #4]
   11b48:	movw	r3, #16528	; 0x4090
   11b4c:	movt	r3, #2
   11b50:	ldr	r3, [r3, #4]
   11b54:	cmn	r3, #1
   11b58:	bne	11b90 <mmk_init@@Base+0x80>
   11b5c:	movw	r3, #16496	; 0x4070
   11b60:	movt	r3, #2
   11b64:	ldr	r0, [r3]
   11b68:	movw	r3, #14340	; 0x3804
   11b6c:	movt	r3, #1
   11b70:	str	r3, [sp]
   11b74:	mov	r3, #45	; 0x2d
   11b78:	movw	r2, #14252	; 0x37ac
   11b7c:	movt	r2, #1
   11b80:	movw	r1, #14308	; 0x37e4
   11b84:	movt	r1, #1
   11b88:	bl	111c8 <fprintf@plt>
   11b8c:	bl	11210 <abort@plt>
   11b90:	movw	r3, #16528	; 0x4090
   11b94:	movt	r3, #2
   11b98:	ldr	r3, [r3, #4]
   11b9c:	mov	r0, r3
   11ba0:	bl	13418 <mmk_init_vital_functions@@Base>
   11ba4:	movw	r3, #16528	; 0x4090
   11ba8:	movt	r3, #2
   11bac:	mov	r2, #1
   11bb0:	str	r2, [r3]
   11bb4:	b	11bbc <mmk_init@@Base+0xac>
   11bb8:	nop	{0}
   11bbc:	sub	sp, fp, #4
   11bc0:	ldr	fp, [sp]
   11bc4:	add	sp, sp, #4
   11bc8:	pop	{pc}		; (ldr pc, [sp], #4)

00011bcc <mmk_plt_ctx@@Base>:
   11bcc:	str	fp, [sp, #-8]!
   11bd0:	str	lr, [sp, #4]
   11bd4:	add	fp, sp, #4
   11bd8:	sub	sp, sp, #8
   11bdc:	movw	r3, #16528	; 0x4090
   11be0:	movt	r3, #2
   11be4:	ldr	r3, [r3]
   11be8:	cmp	r3, #0
   11bec:	bne	11c24 <mmk_plt_ctx@@Base+0x58>
   11bf0:	movw	r3, #16496	; 0x4070
   11bf4:	movt	r3, #2
   11bf8:	ldr	r0, [r3]
   11bfc:	movw	r3, #14364	; 0x381c
   11c00:	movt	r3, #1
   11c04:	str	r3, [sp]
   11c08:	mov	r3, #54	; 0x36
   11c0c:	movw	r2, #14252	; 0x37ac
   11c10:	movt	r2, #1
   11c14:	movw	r1, #14308	; 0x37e4
   11c18:	movt	r1, #1
   11c1c:	bl	111c8 <fprintf@plt>
   11c20:	bl	11210 <abort@plt>
   11c24:	movw	r3, #16528	; 0x4090
   11c28:	movt	r3, #2
   11c2c:	ldr	r3, [r3, #4]
   11c30:	mov	r0, r3
   11c34:	sub	sp, fp, #4
   11c38:	ldr	fp, [sp]
   11c3c:	add	sp, sp, #4
   11c40:	pop	{pc}		; (ldr pc, [sp], #4)

00011c44 <mmk_reset@@Base>:
   11c44:	str	fp, [sp, #-8]!
   11c48:	str	lr, [sp, #4]
   11c4c:	add	fp, sp, #4
   11c50:	sub	sp, sp, #16
   11c54:	str	r0, [fp, #-16]
   11c58:	ldr	r3, [fp, #-16]
   11c5c:	cmp	r3, #0
   11c60:	beq	11c88 <mmk_reset@@Base+0x44>
   11c64:	ldr	r0, [fp, #-16]
   11c68:	bl	12adc <mmk_ask_ctx@@Base>
   11c6c:	str	r0, [fp, #-8]
   11c70:	ldr	r0, [fp, #-8]
   11c74:	bl	12768 <mmk_stub_context@@Base>
   11c78:	str	r0, [fp, #-12]
   11c7c:	ldr	r0, [fp, #-12]
   11c80:	bl	11f7c <mmk_mock_destroy_internal@@Base>
   11c84:	b	11c8c <mmk_reset@@Base+0x48>
   11c88:	nop	{0}
   11c8c:	sub	sp, fp, #4
   11c90:	ldr	fp, [sp]
   11c94:	add	sp, sp, #4
   11c98:	pop	{pc}		; (ldr pc, [sp], #4)

00011c9c <mmk_matcher_init@@Base>:
   11c9c:	str	r4, [sp, #-8]!
   11ca0:	mov	r4, r0
   11ca4:	mov	r0, #12
   11ca8:	str	lr, [sp, #4]
   11cac:	bl	133e8 <mmk_malloc@@Base>
   11cb0:	ldr	r1, [pc, #32]	; 11cd8 <mmk_matcher_init@@Base+0x3c>
   11cb4:	mov	r2, #0
   11cb8:	mrc	15, 0, r3, cr13, cr0, {3}
   11cbc:	str	r4, [r0]
   11cc0:	ldr	r4, [sp]
   11cc4:	add	sp, sp, #4
   11cc8:	str	r2, [r0, #4]
   11ccc:	str	r2, [r0, #8]
   11cd0:	str	r0, [r3, r1]
   11cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   11cd8:	andeq	r0, r0, r8

00011cdc <mmk_matcher_term@@Base>:
   11cdc:	ldr	r2, [pc, #12]	; 11cf0 <mmk_matcher_term@@Base+0x14>
   11ce0:	mrc	15, 0, r3, cr13, cr0, {3}
   11ce4:	mov	r1, #0
   11ce8:	str	r1, [r3, r2]
   11cec:	bx	lr
   11cf0:	andeq	r0, r0, r8

00011cf4 <mmk_matcher_ctx@@Base>:
   11cf4:	ldr	r2, [pc, #8]	; 11d04 <mmk_matcher_ctx@@Base+0x10>
   11cf8:	mrc	15, 0, r3, cr13, cr0, {3}
   11cfc:	ldr	r0, [r2, r3]
   11d00:	bx	lr
   11d04:	andeq	r0, r0, r8

00011d08 <mmk_matcher_add@@Base>:
   11d08:	strd	r4, [sp, #-16]!
   11d0c:	mov	r5, r0
   11d10:	mov	r0, #12
   11d14:	mov	r4, r1
   11d18:	str	r6, [sp, #8]
   11d1c:	str	lr, [sp, #12]
   11d20:	bl	133e8 <mmk_malloc@@Base>
   11d24:	ldr	r2, [pc, #88]	; 11d84 <mmk_matcher_add@@Base+0x7c>
   11d28:	mrc	15, 0, r3, cr13, cr0, {3}
   11d2c:	mov	r1, #0
   11d30:	str	r5, [r0]
   11d34:	str	r4, [r0, #4]
   11d38:	str	r1, [r0, #8]
   11d3c:	ldr	r2, [r3, r2]
   11d40:	ldr	r3, [r2, #8]
   11d44:	cmp	r3, r1
   11d48:	beq	11d58 <mmk_matcher_add@@Base+0x50>
   11d4c:	ldr	r1, [r3, #4]
   11d50:	cmp	r4, r1
   11d54:	bhi	11d70 <mmk_matcher_add@@Base+0x68>
   11d58:	ldrd	r4, [sp]
   11d5c:	ldr	r6, [sp, #8]
   11d60:	add	sp, sp, #12
   11d64:	str	r3, [r0, #8]
   11d68:	str	r0, [r2, #8]
   11d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d70:	mov	r2, r3
   11d74:	ldr	r3, [r3, #8]
   11d78:	cmp	r3, #0
   11d7c:	bne	11d4c <mmk_matcher_add@@Base+0x44>
   11d80:	b	11d58 <mmk_matcher_add@@Base+0x50>
   11d84:	andeq	r0, r0, r8

00011d88 <mmk_matcher_get_predicate@@Base>:
   11d88:	add	r0, r0, #12
   11d8c:	bx	lr

00011d90 <mmk_mock_create_internal@@Base>:
   11d90:	str	r4, [sp, #-12]!
   11d94:	str	fp, [sp, #4]
   11d98:	str	lr, [sp, #8]
   11d9c:	add	fp, sp, #8
   11da0:	sub	sp, sp, #44	; 0x2c
   11da4:	str	r0, [fp, #-40]	; 0xffffffd8
   11da8:	str	r1, [fp, #-44]	; 0xffffffd4
   11dac:	bl	11b10 <mmk_init@@Base>
   11db0:	mov	r0, #20
   11db4:	bl	133e8 <mmk_malloc@@Base>
   11db8:	str	r0, [fp, #-20]	; 0xffffffec
   11dbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11dc0:	cmp	r3, #0
   11dc4:	bne	11dfc <mmk_mock_create_internal@@Base+0x6c>
   11dc8:	movw	r3, #16496	; 0x4070
   11dcc:	movt	r3, #2
   11dd0:	ldr	r0, [r3]
   11dd4:	movw	r3, #14472	; 0x3888
   11dd8:	movt	r3, #1
   11ddc:	str	r3, [sp]
   11de0:	mov	r3, #36	; 0x24
   11de4:	movw	r2, #14384	; 0x3830
   11de8:	movt	r2, #1
   11dec:	movw	r1, #14440	; 0x3868
   11df0:	movt	r1, #1
   11df4:	bl	111c8 <fprintf@plt>
   11df8:	bl	11210 <abort@plt>
   11dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e00:	mov	r1, r3
   11e04:	mov	r2, #0
   11e08:	mov	r3, #0
   11e0c:	strd	r2, [r1]
   11e10:	strd	r2, [r1, #8]
   11e14:	mov	r3, r2
   11e18:	str	r3, [r1, #16]
   11e1c:	mov	r1, #64	; 0x40
   11e20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e24:	bl	132ec <mmk_strchr@@Base>
   11e28:	str	r0, [fp, #-24]	; 0xffffffe8
   11e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e30:	cmp	r3, #0
   11e34:	bne	11e48 <mmk_mock_create_internal@@Base+0xb8>
   11e38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e3c:	bl	13398 <mmk_strlen@@Base>
   11e40:	str	r0, [fp, #-16]
   11e44:	b	11e58 <mmk_mock_create_internal@@Base+0xc8>
   11e48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11e4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e50:	sub	r3, r2, r3
   11e54:	str	r3, [fp, #-16]
   11e58:	ldr	r3, [fp, #-16]
   11e5c:	add	r3, r3, #1
   11e60:	mov	r0, r3
   11e64:	bl	133e8 <mmk_malloc@@Base>
   11e68:	str	r0, [fp, #-28]	; 0xffffffe4
   11e6c:	ldr	r2, [fp, #-16]
   11e70:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11e74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11e78:	bl	1335c <mmk_strncpy@@Base>
   11e7c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11e80:	ldr	r3, [fp, #-16]
   11e84:	add	r3, r2, r3
   11e88:	mov	r2, #0
   11e8c:	strb	r2, [r3]
   11e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e94:	cmp	r3, #0
   11e98:	beq	11ec4 <mmk_mock_create_internal@@Base+0x134>
   11e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ea0:	add	r3, r3, #1
   11ea4:	mov	r2, #4
   11ea8:	movw	r1, #14476	; 0x388c
   11eac:	movt	r1, #1
   11eb0:	mov	r0, r3
   11eb4:	bl	13238 <mmk_strneq@@Base>
   11eb8:	mov	r3, r0
   11ebc:	cmp	r3, #0
   11ec0:	beq	11ecc <mmk_mock_create_internal@@Base+0x13c>
   11ec4:	mov	r3, #1
   11ec8:	b	11ed0 <mmk_mock_create_internal@@Base+0x140>
   11ecc:	mov	r3, #0
   11ed0:	str	r3, [fp, #-32]	; 0xffffffe0
   11ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11ed8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11edc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11ee0:	bl	129a8 <mmk_stub_create@@Base>
   11ee4:	mov	r2, r0
   11ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11eec:	str	r2, [r3, #4]
   11ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ef4:	ldr	r3, [r3, #4]
   11ef8:	cmp	r3, #0
   11efc:	bne	11f24 <mmk_mock_create_internal@@Base+0x194>
   11f00:	movw	r3, #16496	; 0x4070
   11f04:	movt	r3, #2
   11f08:	ldr	r3, [r3]
   11f0c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11f10:	movw	r1, #14484	; 0x3894
   11f14:	movt	r1, #1
   11f18:	mov	r0, r3
   11f1c:	bl	111c8 <fprintf@plt>
   11f20:	bl	11210 <abort@plt>
   11f24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f28:	cmp	r3, #0
   11f2c:	bne	11f50 <mmk_mock_create_internal@@Base+0x1c0>
   11f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f34:	ldr	r4, [r3, #4]
   11f38:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f3c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11f40:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11f44:	bl	129a8 <mmk_stub_create@@Base>
   11f48:	mov	r3, r0
   11f4c:	str	r3, [r4, #36]	; 0x24
   11f50:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11f54:	bl	13408 <mmk_free@@Base>
   11f58:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f5c:	ldr	r3, [r3, #4]
   11f60:	ldr	r3, [r3, #32]
   11f64:	mov	r0, r3
   11f68:	sub	sp, fp, #8
   11f6c:	ldr	r4, [sp]
   11f70:	ldr	fp, [sp, #4]
   11f74:	add	sp, sp, #8
   11f78:	pop	{pc}		; (ldr pc, [sp], #4)

00011f7c <mmk_mock_destroy_internal@@Base>:
   11f7c:	str	fp, [sp, #-8]!
   11f80:	str	lr, [sp, #4]
   11f84:	add	fp, sp, #4
   11f88:	sub	sp, sp, #32
   11f8c:	str	r0, [fp, #-32]	; 0xffffffe0
   11f90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f94:	ldr	r3, [r3, #4]
   11f98:	str	r3, [fp, #-8]
   11f9c:	b	11fbc <mmk_mock_destroy_internal@@Base+0x40>
   11fa0:	ldr	r3, [fp, #-8]
   11fa4:	ldr	r3, [r3, #36]	; 0x24
   11fa8:	str	r3, [fp, #-20]	; 0xffffffec
   11fac:	ldr	r0, [fp, #-8]
   11fb0:	bl	12aa4 <mmk_stub_destroy@@Base>
   11fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fb8:	str	r3, [fp, #-8]
   11fbc:	ldr	r3, [fp, #-8]
   11fc0:	cmp	r3, #0
   11fc4:	bne	11fa0 <mmk_mock_destroy_internal@@Base+0x24>
   11fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11fcc:	ldr	r3, [r3, #8]
   11fd0:	mov	r0, r3
   11fd4:	bl	13408 <mmk_free@@Base>
   11fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11fdc:	ldr	r3, [r3]
   11fe0:	str	r3, [fp, #-12]
   11fe4:	b	1203c <mmk_mock_destroy_internal@@Base+0xc0>
   11fe8:	ldr	r3, [fp, #-12]
   11fec:	ldr	r3, [r3, #4]
   11ff0:	str	r3, [fp, #-24]	; 0xffffffe8
   11ff4:	ldr	r3, [fp, #-12]
   11ff8:	ldr	r3, [r3]
   11ffc:	str	r3, [fp, #-16]
   12000:	b	12020 <mmk_mock_destroy_internal@@Base+0xa4>
   12004:	ldr	r3, [fp, #-16]
   12008:	ldr	r3, [r3, #8]
   1200c:	str	r3, [fp, #-28]	; 0xffffffe4
   12010:	ldr	r0, [fp, #-16]
   12014:	bl	13408 <mmk_free@@Base>
   12018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1201c:	str	r3, [fp, #-16]
   12020:	ldr	r3, [fp, #-16]
   12024:	cmp	r3, #0
   12028:	bne	12004 <mmk_mock_destroy_internal@@Base+0x88>
   1202c:	ldr	r0, [fp, #-12]
   12030:	bl	13408 <mmk_free@@Base>
   12034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12038:	str	r3, [fp, #-12]
   1203c:	ldr	r3, [fp, #-12]
   12040:	cmp	r3, #0
   12044:	bne	11fe8 <mmk_mock_destroy_internal@@Base+0x6c>
   12048:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1204c:	bl	13408 <mmk_free@@Base>
   12050:	nop	{0}
   12054:	sub	sp, fp, #4
   12058:	ldr	fp, [sp]
   1205c:	add	sp, sp, #4
   12060:	pop	{pc}		; (ldr pc, [sp], #4)

00012064 <mmk_mock_params_begin@@Base>:
   12064:	push	{fp}		; (str fp, [sp, #-4]!)
   12068:	add	fp, sp, #0
   1206c:	sub	sp, sp, #12
   12070:	str	r0, [fp, #-8]
   12074:	ldr	r3, [fp, #-8]
   12078:	ldr	r3, [r3, #8]
   1207c:	cmp	r3, #0
   12080:	beq	12094 <mmk_mock_params_begin@@Base+0x30>
   12084:	ldr	r3, [fp, #-8]
   12088:	ldr	r3, [r3, #12]
   1208c:	cmp	r3, #0
   12090:	bne	1209c <mmk_mock_params_begin@@Base+0x38>
   12094:	mov	r3, #0
   12098:	b	120a8 <mmk_mock_params_begin@@Base+0x44>
   1209c:	ldr	r3, [fp, #-8]
   120a0:	ldr	r3, [r3, #8]
   120a4:	add	r3, r3, #4
   120a8:	mov	r0, r3
   120ac:	add	sp, fp, #0
   120b0:	pop	{fp}		; (ldr fp, [sp], #4)
   120b4:	bx	lr

000120b8 <mmk_mock_params_next@@Base>:
   120b8:	push	{fp}		; (str fp, [sp, #-4]!)
   120bc:	add	fp, sp, #0
   120c0:	sub	sp, sp, #20
   120c4:	str	r0, [fp, #-16]
   120c8:	str	r1, [fp, #-20]	; 0xffffffec
   120cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   120d0:	str	r3, [fp, #-8]
   120d4:	ldr	r3, [fp, #-8]
   120d8:	ldr	r3, [r3, #-4]
   120dc:	str	r3, [fp, #-12]
   120e0:	ldr	r3, [fp, #-12]
   120e4:	add	r3, r3, #4
   120e8:	ldr	r2, [fp, #-8]
   120ec:	add	r3, r2, r3
   120f0:	str	r3, [fp, #-8]
   120f4:	ldr	r3, [fp, #-16]
   120f8:	ldr	r2, [r3, #8]
   120fc:	ldr	r3, [fp, #-16]
   12100:	ldr	r3, [r3, #12]
   12104:	add	r3, r2, r3
   12108:	ldr	r2, [fp, #-8]
   1210c:	cmp	r2, r3
   12110:	bcc	1211c <mmk_mock_params_next@@Base+0x64>
   12114:	mov	r3, #0
   12118:	b	12120 <mmk_mock_params_next@@Base+0x68>
   1211c:	ldr	r3, [fp, #-8]
   12120:	mov	r0, r3
   12124:	add	sp, fp, #0
   12128:	pop	{fp}		; (ldr fp, [sp], #4)
   1212c:	bx	lr

00012130 <mmk_mock_get_params@@Base>:
   12130:	str	fp, [sp, #-8]!
   12134:	str	lr, [sp, #4]
   12138:	add	fp, sp, #4
   1213c:	sub	sp, sp, #8
   12140:	bl	12b68 <mmk_ctx@@Base>
   12144:	mov	r3, r0
   12148:	mov	r0, r3
   1214c:	bl	12768 <mmk_stub_context@@Base>
   12150:	str	r0, [fp, #-8]
   12154:	ldr	r3, [fp, #-8]
   12158:	ldr	r3, [r3]
   1215c:	mov	r0, r3
   12160:	sub	sp, fp, #4
   12164:	ldr	fp, [sp]
   12168:	add	sp, sp, #4
   1216c:	pop	{pc}		; (ldr pc, [sp], #4)
   12170:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12174:	strd	r6, [sp, #8]
   12178:	str	lr, [sp, #32]
   1217c:	strd	r8, [sp, #16]
   12180:	ldr	lr, [r0, #8]
   12184:	strd	sl, [sp, #24]
   12188:	sub	sp, sp, #4
   1218c:	ldr	r7, [r0]
   12190:	ldr	ip, [lr]
   12194:	cmp	ip, #0
   12198:	beq	1237c <mmk_mock_get_params@@Base+0x24c>
   1219c:	cmp	ip, #6
   121a0:	mov	r3, lr
   121a4:	bne	121b4 <mmk_mock_get_params@@Base+0x84>
   121a8:	b	1234c <mmk_mock_get_params@@Base+0x21c>
   121ac:	cmp	r4, #6
   121b0:	beq	1234c <mmk_mock_get_params@@Base+0x21c>
   121b4:	ldr	r4, [r3, #8]!
   121b8:	cmp	r4, #0
   121bc:	bne	121ac <mmk_mock_get_params@@Base+0x7c>
   121c0:	mov	r0, #1
   121c4:	cmp	ip, #5
   121c8:	mov	r3, lr
   121cc:	bne	121dc <mmk_mock_get_params@@Base+0xac>
   121d0:	b	12334 <mmk_mock_get_params@@Base+0x204>
   121d4:	cmp	r5, #5
   121d8:	beq	12334 <mmk_mock_get_params@@Base+0x204>
   121dc:	ldr	r5, [r3, #8]!
   121e0:	cmp	r5, #0
   121e4:	bne	121d4 <mmk_mock_get_params@@Base+0xa4>
   121e8:	mov	r0, #1
   121ec:	cmp	ip, #20
   121f0:	mov	r3, lr
   121f4:	bne	12204 <mmk_mock_get_params@@Base+0xd4>
   121f8:	b	12328 <mmk_mock_get_params@@Base+0x1f8>
   121fc:	cmp	r2, #20
   12200:	beq	12328 <mmk_mock_get_params@@Base+0x1f8>
   12204:	ldr	r2, [r3, #8]!
   12208:	cmp	r2, #0
   1220c:	bne	121fc <mmk_mock_get_params@@Base+0xcc>
   12210:	mov	r6, #2
   12214:	cmp	ip, #23
   12218:	mov	r8, lr
   1221c:	bne	1222c <mmk_mock_get_params@@Base+0xfc>
   12220:	b	12314 <mmk_mock_get_params@@Base+0x1e4>
   12224:	cmp	r3, #23
   12228:	beq	12314 <mmk_mock_get_params@@Base+0x1e4>
   1222c:	ldr	r3, [r8, #8]!
   12230:	cmp	r3, #0
   12234:	bne	12224 <mmk_mock_get_params@@Base+0xf4>
   12238:	mov	r8, r3
   1223c:	cmp	ip, #2
   12240:	mov	r9, lr
   12244:	bne	12254 <mmk_mock_get_params@@Base+0x124>
   12248:	b	1230c <mmk_mock_get_params@@Base+0x1dc>
   1224c:	cmp	r3, #2
   12250:	beq	1230c <mmk_mock_get_params@@Base+0x1dc>
   12254:	ldr	r3, [r9, #8]!
   12258:	cmp	r3, #0
   1225c:	bne	1224c <mmk_mock_get_params@@Base+0x11c>
   12260:	b	12270 <mmk_mock_get_params@@Base+0x140>
   12264:	ldr	ip, [lr, #8]!
   12268:	cmp	ip, #0
   1226c:	beq	12370 <mmk_mock_get_params@@Base+0x240>
   12270:	cmp	ip, r6
   12274:	bne	12264 <mmk_mock_get_params@@Base+0x134>
   12278:	cmp	r0, #0
   1227c:	ldr	r9, [lr, #4]
   12280:	bne	1237c <mmk_mock_get_params@@Base+0x24c>
   12284:	cmp	r8, #0
   12288:	cmpne	r2, #0
   1228c:	beq	122f0 <mmk_mock_get_params@@Base+0x1c0>
   12290:	cmp	r9, #0
   12294:	cmpne	r3, #0
   12298:	beq	122f0 <mmk_mock_get_params@@Base+0x1c0>
   1229c:	cmp	r9, r3
   122a0:	udiv	r6, r3, r9
   122a4:	bhi	122f0 <mmk_mock_get_params@@Base+0x1c0>
   122a8:	mov	sl, r1
   122ac:	mov	fp, r0
   122b0:	b	122c0 <mmk_mock_get_params@@Base+0x190>
   122b4:	cmp	r6, fp
   122b8:	add	r8, r8, r9
   122bc:	bls	1237c <mmk_mock_get_params@@Base+0x24c>
   122c0:	ldr	r3, [r8, #4]
   122c4:	mov	r1, sl
   122c8:	add	fp, fp, #1
   122cc:	lsr	r3, r3, #8
   122d0:	ldr	r0, [r4, r3, lsl #4]
   122d4:	add	r0, r5, r0
   122d8:	bl	11144 <strcmp@plt>
   122dc:	cmp	r0, #0
   122e0:	bne	122b4 <mmk_mock_get_params@@Base+0x184>
   122e4:	ldr	r0, [r8]
   122e8:	cmp	r0, #0
   122ec:	addne	r0, r7, r0
   122f0:	add	sp, sp, #4
   122f4:	ldrd	r4, [sp]
   122f8:	ldrd	r6, [sp, #8]
   122fc:	ldrd	r8, [sp, #16]
   12300:	ldrd	sl, [sp, #24]
   12304:	add	sp, sp, #32
   12308:	pop	{pc}		; (ldr pc, [sp], #4)
   1230c:	ldr	r3, [r9, #4]
   12310:	b	12270 <mmk_mock_get_params@@Base+0x140>
   12314:	ldr	r3, [r8, #4]
   12318:	cmp	r7, r3
   1231c:	addhi	r8, r7, r3
   12320:	bhi	1223c <mmk_mock_get_params@@Base+0x10c>
   12324:	b	12238 <mmk_mock_get_params@@Base+0x108>
   12328:	ldr	r2, [r3, #4]
   1232c:	add	r6, r2, #2
   12330:	b	12214 <mmk_mock_get_params@@Base+0xe4>
   12334:	ldr	r5, [r3, #4]
   12338:	cmp	r7, r5
   1233c:	bhi	12384 <mmk_mock_get_params@@Base+0x254>
   12340:	cmp	r5, #0
   12344:	moveq	r0, #1
   12348:	b	121ec <mmk_mock_get_params@@Base+0xbc>
   1234c:	ldr	r4, [r3, #4]
   12350:	cmp	r7, r4
   12354:	clzls	r0, r4
   12358:	lsrls	r0, r0, #5
   1235c:	bls	121c4 <mmk_mock_get_params@@Base+0x94>
   12360:	adds	r4, r7, r4
   12364:	moveq	r0, #1
   12368:	movne	r0, #0
   1236c:	b	121c4 <mmk_mock_get_params@@Base+0x94>
   12370:	cmp	r0, #0
   12374:	mov	r9, ip
   12378:	beq	12284 <mmk_mock_get_params@@Base+0x154>
   1237c:	mov	r0, #0
   12380:	b	122f0 <mmk_mock_get_params@@Base+0x1c0>
   12384:	adds	r5, r7, r5
   12388:	moveq	r0, #1
   1238c:	b	121ec <mmk_mock_get_params@@Base+0xbc>

00012390 <plt_init_ctx@@Base>:
   12390:	movw	r3, #16492	; 0x406c
   12394:	movt	r3, #2
   12398:	ldr	r0, [r3]
   1239c:	cmn	r0, #1
   123a0:	beq	123a8 <plt_init_ctx@@Base+0x18>
   123a4:	bx	lr
   123a8:	movw	r2, #16500	; 0x4074
   123ac:	movt	r2, #2
   123b0:	mov	r0, r2
   123b4:	str	r2, [r3]
   123b8:	bx	lr

000123bc <plt_get_lib@@Base>:
   123bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123c0:	mov	r4, r0
   123c4:	strd	r6, [sp, #8]
   123c8:	subs	r7, r1, #0
   123cc:	strd	r8, [sp, #16]
   123d0:	strd	sl, [sp, #24]
   123d4:	add	fp, sp, #32
   123d8:	str	lr, [sp, #32]
   123dc:	sub	sp, sp, #12
   123e0:	beq	125ec <plt_get_lib@@Base+0x230>
   123e4:	movw	r1, #14536	; 0x38c8
   123e8:	movt	r1, #1
   123ec:	mov	r2, #4
   123f0:	mov	r0, r7
   123f4:	bl	11204 <strncmp@plt>
   123f8:	cmp	r0, #0
   123fc:	moveq	r5, #1
   12400:	bne	12558 <plt_get_lib@@Base+0x19c>
   12404:	mov	r1, #58	; 0x3a
   12408:	mov	r0, r7
   1240c:	bl	111bc <strchr@plt>
   12410:	add	r9, r0, #1
   12414:	movw	r1, #14736	; 0x3990
   12418:	movt	r1, #1
   1241c:	mov	r0, r9
   12420:	bl	11144 <strcmp@plt>
   12424:	mov	r8, r0
   12428:	mov	r0, r9
   1242c:	bl	111a4 <strlen@plt>
   12430:	str	r0, [fp, #-40]	; 0xffffffd8
   12434:	ldr	r4, [r4, #4]
   12438:	cmp	r4, #0
   1243c:	beq	1250c <plt_get_lib@@Base+0x150>
   12440:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12444:	bic	r6, r5, #2
   12448:	add	r3, r3, #15
   1244c:	bic	r3, r3, #7
   12450:	str	r3, [fp, #-44]	; 0xffffffd4
   12454:	b	12480 <plt_get_lib@@Base+0xc4>
   12458:	cmp	r6, #0
   1245c:	bne	124e4 <plt_get_lib@@Base+0x128>
   12460:	mov	r0, r7
   12464:	ldr	r1, [r4, #4]
   12468:	bl	11144 <strcmp@plt>
   1246c:	cmp	r0, #0
   12470:	beq	124c4 <plt_get_lib@@Base+0x108>
   12474:	ldr	r4, [r4, #12]
   12478:	cmp	r4, #0
   1247c:	beq	1250c <plt_get_lib@@Base+0x150>
   12480:	cmp	r5, #1
   12484:	bne	12458 <plt_get_lib@@Base+0x9c>
   12488:	cmp	r8, #0
   1248c:	bne	12514 <plt_get_lib@@Base+0x158>
   12490:	ldr	sl, [r4, #4]
   12494:	movw	r1, #14640	; 0x3930
   12498:	movt	r1, #1
   1249c:	mov	r0, sl
   124a0:	bl	11138 <strstr@plt>
   124a4:	cmp	r0, #0
   124a8:	bne	124c4 <plt_get_lib@@Base+0x108>
   124ac:	mov	r0, sl
   124b0:	movw	r1, #14652	; 0x393c
   124b4:	movt	r1, #1
   124b8:	bl	11138 <strstr@plt>
   124bc:	cmp	r0, #0
   124c0:	beq	12474 <plt_get_lib@@Base+0xb8>
   124c4:	mov	r0, r4
   124c8:	sub	sp, fp, #32
   124cc:	ldrd	r4, [sp]
   124d0:	ldrd	r6, [sp, #8]
   124d4:	ldrd	r8, [sp, #16]
   124d8:	ldrd	sl, [sp, #24]
   124dc:	add	sp, sp, #32
   124e0:	pop	{pc}		; (ldr pc, [sp], #4)
   124e4:	cmp	r5, #3
   124e8:	bne	12474 <plt_get_lib@@Base+0xb8>
   124ec:	mov	r1, r9
   124f0:	mov	r0, r4
   124f4:	bl	12170 <mmk_mock_get_params@@Base+0x40>
   124f8:	cmp	r0, #0
   124fc:	bne	124c4 <plt_get_lib@@Base+0x108>
   12500:	ldr	r4, [r4, #12]
   12504:	cmp	r4, #0
   12508:	bne	12480 <plt_get_lib@@Base+0xc4>
   1250c:	mov	r4, #0
   12510:	b	124c4 <plt_get_lib@@Base+0x108>
   12514:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12518:	mov	sl, sp
   1251c:	movw	r2, #14664	; 0x3948
   12520:	movt	r2, #1
   12524:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12528:	sub	sp, sp, r3
   1252c:	mov	r3, r9
   12530:	mov	r0, sp
   12534:	add	r1, r1, #8
   12538:	bl	111e0 <snprintf@plt>
   1253c:	mov	r1, sp
   12540:	ldr	r0, [r4, #4]
   12544:	bl	11138 <strstr@plt>
   12548:	cmp	r0, #0
   1254c:	bne	12608 <plt_get_lib@@Base+0x24c>
   12550:	mov	sp, sl
   12554:	b	12474 <plt_get_lib@@Base+0xb8>
   12558:	movw	r1, #14544	; 0x38d0
   1255c:	movt	r1, #1
   12560:	mov	r2, #5
   12564:	mov	r0, r7
   12568:	bl	11204 <strncmp@plt>
   1256c:	cmp	r0, #0
   12570:	moveq	r5, #2
   12574:	beq	12404 <plt_get_lib@@Base+0x48>
   12578:	movw	r1, #14552	; 0x38d8
   1257c:	movt	r1, #1
   12580:	mov	r2, #4
   12584:	mov	r0, r7
   12588:	bl	11204 <strncmp@plt>
   1258c:	cmp	r0, #0
   12590:	moveq	r5, #3
   12594:	beq	12404 <plt_get_lib@@Base+0x48>
   12598:	movw	r1, #14560	; 0x38e0
   1259c:	movt	r1, #1
   125a0:	mov	r0, r7
   125a4:	bl	11144 <strcmp@plt>
   125a8:	cmp	r0, #0
   125ac:	beq	12610 <plt_get_lib@@Base+0x254>
   125b0:	mov	r1, #58	; 0x3a
   125b4:	mov	r0, r7
   125b8:	bl	111bc <strchr@plt>
   125bc:	subs	r2, r0, #0
   125c0:	movw	r3, #16496	; 0x4070
   125c4:	movt	r3, #2
   125c8:	ldr	r0, [r3]
   125cc:	beq	1262c <plt_get_lib@@Base+0x270>
   125d0:	sub	r2, r2, r7
   125d4:	movw	r1, #14568	; 0x38e8
   125d8:	movt	r1, #1
   125dc:	mov	r3, r7
   125e0:	add	r2, r2, #1
   125e4:	bl	111c8 <fprintf@plt>
   125e8:	bl	11210 <abort@plt>
   125ec:	mov	r5, r7
   125f0:	movw	r7, #14768	; 0x39b0
   125f4:	movt	r7, #1
   125f8:	mvn	r8, #0
   125fc:	mov	r9, r7
   12600:	str	r5, [fp, #-40]	; 0xffffffd8
   12604:	b	12434 <plt_get_lib@@Base+0x78>
   12608:	mov	sp, sl
   1260c:	b	124c4 <plt_get_lib@@Base+0x108>
   12610:	movw	r7, #14768	; 0x39b0
   12614:	movt	r7, #1
   12618:	str	r0, [fp, #-40]	; 0xffffffd8
   1261c:	mov	r5, r0
   12620:	mov	r9, r7
   12624:	mvn	r8, #0
   12628:	b	12434 <plt_get_lib@@Base+0x78>
   1262c:	mov	r2, r7
   12630:	movw	r1, #14604	; 0x390c
   12634:	movt	r1, #1
   12638:	bl	111c8 <fprintf@plt>
   1263c:	b	125e8 <plt_get_lib@@Base+0x22c>

00012640 <plt_get_offsets@@Base>:
   12640:	strd	r4, [sp, #-16]!
   12644:	mov	r5, r2
   12648:	str	r6, [sp, #8]
   1264c:	str	lr, [sp, #12]
   12650:	bl	12170 <mmk_mock_get_params@@Base+0x40>
   12654:	subs	r4, r0, #0
   12658:	beq	12680 <plt_get_offsets@@Base+0x40>
   1265c:	mov	r0, #8
   12660:	bl	133e8 <mmk_malloc@@Base>
   12664:	mov	r1, #1
   12668:	mov	r2, #0
   1266c:	mov	r3, #0
   12670:	str	r1, [r5]
   12674:	strd	r2, [r0]
   12678:	str	r4, [r0]
   1267c:	mov	r4, r0
   12680:	mov	r0, r4
   12684:	ldrd	r4, [sp]
   12688:	ldr	r6, [sp, #8]
   1268c:	add	sp, sp, #12
   12690:	pop	{pc}		; (ldr pc, [sp], #4)

00012694 <plt_set_offsets@@Base>:
   12694:	cmp	r1, #0
   12698:	beq	126bc <plt_set_offsets@@Base+0x28>
   1269c:	add	r1, r0, r1, lsl #3
   126a0:	ldm	r0, {r3, ip}
   126a4:	cmp	ip, #0
   126a8:	beq	126c0 <plt_set_offsets@@Base+0x2c>
   126ac:	add	r0, r0, #8
   126b0:	str	r2, [r3]
   126b4:	cmp	r1, r0
   126b8:	bne	126a0 <plt_set_offsets@@Base+0xc>
   126bc:	bx	lr
   126c0:	ldr	ip, [r3]
   126c4:	add	r0, r0, #8
   126c8:	str	ip, [r0, #-4]
   126cc:	cmp	r0, r1
   126d0:	str	r2, [r3]
   126d4:	bne	126a0 <plt_set_offsets@@Base+0xc>
   126d8:	bx	lr

000126dc <plt_reset_offsets@@Base>:
   126dc:	cmp	r1, #0
   126e0:	beq	126fc <plt_reset_offsets@@Base+0x20>
   126e4:	add	r1, r0, r1, lsl #3
   126e8:	ldr	r2, [r0, #4]
   126ec:	ldr	r3, [r0], #8
   126f0:	cmp	r1, r0
   126f4:	str	r2, [r3]
   126f8:	bne	126e8 <plt_reset_offsets@@Base+0xc>
   126fc:	bx	lr

00012700 <plt_get_real_fn@@Base>:
   12700:	strd	r4, [sp, #-16]!
   12704:	ldr	r4, [r0, #4]
   12708:	str	r6, [sp, #8]
   1270c:	str	lr, [sp, #12]
   12710:	cmp	r4, #0
   12714:	beq	12754 <plt_get_real_fn@@Base+0x54>
   12718:	mov	r5, r1
   1271c:	b	1272c <plt_get_real_fn@@Base+0x2c>
   12720:	ldr	r4, [r4, #12]
   12724:	cmp	r4, #0
   12728:	beq	12754 <plt_get_real_fn@@Base+0x54>
   1272c:	mov	r1, r5
   12730:	mov	r0, r4
   12734:	bl	12170 <mmk_mock_get_params@@Base+0x40>
   12738:	cmp	r0, #0
   1273c:	beq	12720 <plt_get_real_fn@@Base+0x20>
   12740:	ldrd	r4, [sp]
   12744:	ldr	r6, [sp, #8]
   12748:	add	sp, sp, #12
   1274c:	ldr	r0, [r0]
   12750:	pop	{pc}		; (ldr pc, [sp], #4)
   12754:	mov	r0, r4
   12758:	ldrd	r4, [sp]
   1275c:	ldr	r6, [sp, #8]
   12760:	add	sp, sp, #12
   12764:	pop	{pc}		; (ldr pc, [sp], #4)

00012768 <mmk_stub_context@@Base>:
   12768:	push	{fp}		; (str fp, [sp, #-4]!)
   1276c:	add	fp, sp, #0
   12770:	sub	sp, sp, #12
   12774:	str	r0, [fp, #-8]
   12778:	ldr	r3, [fp, #-8]
   1277c:	cmp	r3, #0
   12780:	bne	1278c <mmk_stub_context@@Base+0x24>
   12784:	mov	r3, #0
   12788:	b	12794 <mmk_stub_context@@Base+0x2c>
   1278c:	ldr	r3, [fp, #-8]
   12790:	ldr	r3, [r3, #12]
   12794:	mov	r0, r3
   12798:	add	sp, fp, #0
   1279c:	pop	{fp}		; (ldr fp, [sp], #4)
   127a0:	bx	lr

000127a4 <mmk_stub_create_static@@Base>:
   127a4:	str	fp, [sp, #-8]!
   127a8:	str	lr, [sp, #4]
   127ac:	add	fp, sp, #4
   127b0:	sub	sp, sp, #40	; 0x28
   127b4:	str	r0, [fp, #-32]	; 0xffffffe0
   127b8:	str	r1, [fp, #-36]	; 0xffffffdc
   127bc:	str	r2, [fp, #-40]	; 0xffffffd8
   127c0:	str	r3, [fp, #-44]	; 0xffffffd4
   127c4:	mrc	15, 0, r3, cr13, cr0, {3}
   127c8:	ldr	r2, [pc, #464]	; 129a0 <mmk_stub_create_static@@Base+0x1fc>
   127cc:	mov	r1, #0
   127d0:	str	r1, [r3, r2]
   127d4:	mrc	15, 0, r3, cr13, cr0, {3}
   127d8:	ldr	r2, [pc, #452]	; 129a4 <mmk_stub_create_static@@Base+0x200>
   127dc:	mov	r1, #0
   127e0:	str	r1, [r3, r2]
   127e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   127e8:	bl	13398 <mmk_strlen@@Base>
   127ec:	mov	r3, r0
   127f0:	add	r3, r3, #1
   127f4:	mov	r0, r3
   127f8:	bl	133e8 <mmk_malloc@@Base>
   127fc:	str	r0, [fp, #-12]
   12800:	ldr	r3, [fp, #-12]
   12804:	cmp	r3, #0
   12808:	bne	12814 <mmk_stub_create_static@@Base+0x70>
   1280c:	mvn	r3, #11
   12810:	b	1298c <mmk_stub_create_static@@Base+0x1e8>
   12814:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12818:	ldr	r0, [fp, #-12]
   1281c:	bl	1332c <mmk_strcpy@@Base>
   12820:	mov	r3, #0
   12824:	str	r3, [fp, #-8]
   12828:	mov	r1, #64	; 0x40
   1282c:	ldr	r0, [fp, #-12]
   12830:	bl	132ec <mmk_strchr@@Base>
   12834:	str	r0, [fp, #-16]
   12838:	ldr	r3, [fp, #-16]
   1283c:	cmp	r3, #0
   12840:	beq	1285c <mmk_stub_create_static@@Base+0xb8>
   12844:	ldr	r3, [fp, #-16]
   12848:	mov	r2, #0
   1284c:	strb	r2, [r3]
   12850:	ldr	r3, [fp, #-16]
   12854:	add	r3, r3, #1
   12858:	str	r3, [fp, #-8]
   1285c:	bl	11bcc <mmk_plt_ctx@@Base>
   12860:	mov	r3, r0
   12864:	ldr	r1, [fp, #-8]
   12868:	mov	r0, r3
   1286c:	bl	123bc <plt_get_lib@@Base>
   12870:	str	r0, [fp, #-20]	; 0xffffffec
   12874:	ldr	r3, [fp, #-20]	; 0xffffffec
   12878:	cmp	r3, #0
   1287c:	bne	12888 <mmk_stub_create_static@@Base+0xe4>
   12880:	mvn	r3, #1
   12884:	b	1298c <mmk_stub_create_static@@Base+0x1e8>
   12888:	mov	r3, #0
   1288c:	str	r3, [fp, #-28]	; 0xffffffe4
   12890:	sub	r3, fp, #28
   12894:	mov	r2, r3
   12898:	ldr	r1, [fp, #-12]
   1289c:	ldr	r0, [fp, #-20]	; 0xffffffec
   128a0:	bl	12640 <plt_get_offsets@@Base>
   128a4:	str	r0, [fp, #-24]	; 0xffffffe8
   128a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128ac:	cmp	r3, #0
   128b0:	beq	128c0 <mmk_stub_create_static@@Base+0x11c>
   128b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   128b8:	cmp	r3, #0
   128bc:	bne	128c8 <mmk_stub_create_static@@Base+0x124>
   128c0:	mvn	r3, #1
   128c4:	b	1298c <mmk_stub_create_static@@Base+0x1e8>
   128c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   128d0:	mov	r1, r3
   128d4:	mov	r2, #0
   128d8:	mov	r3, #0
   128dc:	strd	r2, [r1]
   128e0:	strd	r2, [r1, #8]
   128e4:	strd	r2, [r1, #16]
   128e8:	strd	r2, [r1, #24]
   128ec:	strd	r2, [r1, #32]
   128f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   128f4:	movw	r3, #11044	; 0x2b24
   128f8:	movt	r3, #1
   128fc:	str	r3, [r2]
   12900:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12904:	movw	r3, #11152	; 0x2b90
   12908:	movt	r3, #1
   1290c:	str	r3, [r2, #4]
   12910:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12914:	movw	r3, #11112	; 0x2b68
   12918:	movt	r3, #1
   1291c:	str	r3, [r2, #8]
   12920:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12924:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12928:	str	r2, [r3, #12]
   1292c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12930:	ldr	r2, [fp, #-12]
   12934:	str	r2, [r3, #16]
   12938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1293c:	ldr	r2, [fp, #-8]
   12940:	str	r2, [r3, #20]
   12944:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12948:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1294c:	str	r2, [r3, #24]
   12950:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12954:	str	r0, [r3, #28]
   12958:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1295c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12960:	bl	12bc4 <create_trampoline@@Base>
   12964:	mov	r2, r0
   12968:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1296c:	str	r2, [r3, #32]
   12970:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12974:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12978:	ldr	r3, [r3, #32]
   1297c:	mov	r2, r3
   12980:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12984:	bl	12694 <plt_set_offsets@@Base>
   12988:	mov	r3, #0
   1298c:	mov	r0, r3
   12990:	sub	sp, fp, #4
   12994:	ldr	fp, [sp]
   12998:	add	sp, sp, #4
   1299c:	pop	{pc}		; (ldr pc, [sp], #4)
   129a0:	andeq	r0, r0, ip
   129a4:	andeq	r0, r0, r0, lsl r0

000129a8 <mmk_stub_create@@Base>:
   129a8:	str	fp, [sp, #-8]!
   129ac:	str	lr, [sp, #4]
   129b0:	add	fp, sp, #4
   129b4:	sub	sp, sp, #24
   129b8:	str	r0, [fp, #-16]
   129bc:	str	r1, [fp, #-20]	; 0xffffffec
   129c0:	str	r2, [fp, #-24]	; 0xffffffe8
   129c4:	bl	11b10 <mmk_init@@Base>
   129c8:	mov	r0, #40	; 0x28
   129cc:	bl	133e8 <mmk_malloc@@Base>
   129d0:	str	r0, [fp, #-8]
   129d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   129dc:	ldr	r1, [fp, #-16]
   129e0:	ldr	r0, [fp, #-8]
   129e4:	bl	127a4 <mmk_stub_create_static@@Base>
   129e8:	str	r0, [fp, #-12]
   129ec:	ldr	r3, [fp, #-12]
   129f0:	cmp	r3, #0
   129f4:	bge	12a18 <mmk_stub_create@@Base+0x70>
   129f8:	ldr	r0, [fp, #-8]
   129fc:	bl	13408 <mmk_free@@Base>
   12a00:	bl	111d4 <__errno_location@plt>
   12a04:	mov	r2, r0
   12a08:	ldr	r3, [fp, #-12]
   12a0c:	str	r3, [r2]
   12a10:	mov	r3, #0
   12a14:	str	r3, [fp, #-8]
   12a18:	ldr	r3, [fp, #-8]
   12a1c:	mov	r0, r3
   12a20:	sub	sp, fp, #4
   12a24:	ldr	fp, [sp]
   12a28:	add	sp, sp, #4
   12a2c:	pop	{pc}		; (ldr pc, [sp], #4)

00012a30 <mmk_stub_destroy_static@@Base>:
   12a30:	str	fp, [sp, #-8]!
   12a34:	str	lr, [sp, #4]
   12a38:	add	fp, sp, #4
   12a3c:	sub	sp, sp, #8
   12a40:	str	r0, [fp, #-8]
   12a44:	ldr	r3, [fp, #-8]
   12a48:	ldr	r2, [r3, #24]
   12a4c:	ldr	r3, [fp, #-8]
   12a50:	ldr	r3, [r3, #28]
   12a54:	mov	r1, r3
   12a58:	mov	r0, r2
   12a5c:	bl	126dc <plt_reset_offsets@@Base>
   12a60:	ldr	r3, [fp, #-8]
   12a64:	ldr	r3, [r3, #24]
   12a68:	mov	r0, r3
   12a6c:	bl	13408 <mmk_free@@Base>
   12a70:	ldr	r3, [fp, #-8]
   12a74:	ldr	r3, [r3, #32]
   12a78:	mov	r0, r3
   12a7c:	bl	12cd8 <destroy_trampoline@@Base>
   12a80:	ldr	r3, [fp, #-8]
   12a84:	ldr	r3, [r3, #16]
   12a88:	mov	r0, r3
   12a8c:	bl	13408 <mmk_free@@Base>
   12a90:	nop	{0}
   12a94:	sub	sp, fp, #4
   12a98:	ldr	fp, [sp]
   12a9c:	add	sp, sp, #4
   12aa0:	pop	{pc}		; (ldr pc, [sp], #4)

00012aa4 <mmk_stub_destroy@@Base>:
   12aa4:	str	fp, [sp, #-8]!
   12aa8:	str	lr, [sp, #4]
   12aac:	add	fp, sp, #4
   12ab0:	sub	sp, sp, #8
   12ab4:	str	r0, [fp, #-8]
   12ab8:	ldr	r0, [fp, #-8]
   12abc:	bl	12a30 <mmk_stub_destroy_static@@Base>
   12ac0:	ldr	r0, [fp, #-8]
   12ac4:	bl	13408 <mmk_free@@Base>
   12ac8:	nop	{0}
   12acc:	sub	sp, fp, #4
   12ad0:	ldr	fp, [sp]
   12ad4:	add	sp, sp, #4
   12ad8:	pop	{pc}		; (ldr pc, [sp], #4)

00012adc <mmk_ask_ctx@@Base>:
   12adc:	str	fp, [sp, #-8]!
   12ae0:	str	lr, [sp, #4]
   12ae4:	add	fp, sp, #4
   12ae8:	sub	sp, sp, #8
   12aec:	str	r0, [fp, #-8]
   12af0:	mrc	15, 0, r3, cr13, cr0, {3}
   12af4:	ldr	r2, [pc, #36]	; 12b20 <mmk_ask_ctx@@Base+0x44>
   12af8:	mov	r1, #1
   12afc:	str	r1, [r3, r2]
   12b00:	ldr	r3, [fp, #-8]
   12b04:	blx	r3
   12b08:	mov	r3, r0
   12b0c:	mov	r0, r3
   12b10:	sub	sp, fp, #4
   12b14:	ldr	fp, [sp]
   12b18:	add	sp, sp, #4
   12b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b20:	andeq	r0, r0, ip

00012b24 <mmk_ctx_asked@@Base>:
   12b24:	push	{fp}		; (str fp, [sp, #-4]!)
   12b28:	add	fp, sp, #0
   12b2c:	sub	sp, sp, #12
   12b30:	mrc	15, 0, r3, cr13, cr0, {3}
   12b34:	ldr	r2, [pc, #40]	; 12b64 <mmk_ctx_asked@@Base+0x40>
   12b38:	ldr	r3, [r3, r2]
   12b3c:	str	r3, [fp, #-8]
   12b40:	mrc	15, 0, r3, cr13, cr0, {3}
   12b44:	ldr	r2, [pc, #24]	; 12b64 <mmk_ctx_asked@@Base+0x40>
   12b48:	mov	r1, #0
   12b4c:	str	r1, [r3, r2]
   12b50:	ldr	r3, [fp, #-8]
   12b54:	mov	r0, r3
   12b58:	add	sp, fp, #0
   12b5c:	pop	{fp}		; (ldr fp, [sp], #4)
   12b60:	bx	lr
   12b64:	andeq	r0, r0, ip

00012b68 <mmk_ctx@@Base>:
   12b68:	push	{fp}		; (str fp, [sp, #-4]!)
   12b6c:	add	fp, sp, #0
   12b70:	mrc	15, 0, r3, cr13, cr0, {3}
   12b74:	ldr	r2, [pc, #16]	; 12b8c <mmk_ctx@@Base+0x24>
   12b78:	ldr	r3, [r3, r2]
   12b7c:	mov	r0, r3
   12b80:	add	sp, fp, #0
   12b84:	pop	{fp}		; (ldr fp, [sp], #4)
   12b88:	bx	lr
   12b8c:	andeq	r0, r0, r0, lsl r0

00012b90 <mmk_set_ctx@@Base>:
   12b90:	push	{fp}		; (str fp, [sp, #-4]!)
   12b94:	add	fp, sp, #0
   12b98:	sub	sp, sp, #12
   12b9c:	str	r0, [fp, #-8]
   12ba0:	mrc	15, 0, r3, cr13, cr0, {3}
   12ba4:	ldr	r1, [pc, #20]	; 12bc0 <mmk_set_ctx@@Base+0x30>
   12ba8:	ldr	r2, [fp, #-8]
   12bac:	str	r2, [r3, r1]
   12bb0:	nop	{0}
   12bb4:	add	sp, fp, #0
   12bb8:	pop	{fp}		; (ldr fp, [sp], #4)
   12bbc:	bx	lr
   12bc0:	andeq	r0, r0, r0, lsl r0

00012bc4 <create_trampoline@@Base>:
   12bc4:	movw	r2, #13932	; 0x366c
   12bc8:	movt	r2, #1
   12bcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12bd0:	strd	r6, [sp, #8]
   12bd4:	movw	r6, #13840	; 0x3610
   12bd8:	movt	r6, #1
   12bdc:	sub	r4, r2, r6
   12be0:	strd	r8, [sp, #16]
   12be4:	cmp	r4, #4096	; 0x1000
   12be8:	str	lr, [sp, #24]
   12bec:	sub	sp, sp, #12
   12bf0:	bcs	12c70 <create_trampoline@@Base+0xac>
   12bf4:	mov	ip, #0
   12bf8:	mvn	r2, #0
   12bfc:	mov	r9, r0
   12c00:	mov	r8, r1
   12c04:	mov	r0, ip
   12c08:	mov	r3, #34	; 0x22
   12c0c:	stm	sp, {r2, ip}
   12c10:	mov	r1, #4096	; 0x1000
   12c14:	mov	r2, #7
   12c18:	bl	111b0 <mmap@plt>
   12c1c:	cmn	r0, #1
   12c20:	mov	r5, r0
   12c24:	beq	12ca4 <create_trampoline@@Base+0xe0>
   12c28:	add	r7, r0, #8
   12c2c:	mov	r2, r4
   12c30:	str	r9, [r5]
   12c34:	mov	r1, r6
   12c38:	mov	r0, r7
   12c3c:	str	r8, [r5, #4]
   12c40:	bl	11168 <memcpy@plt>
   12c44:	mov	r0, r5
   12c48:	mov	r2, #5
   12c4c:	mov	r1, #4096	; 0x1000
   12c50:	bl	11150 <mprotect@plt>
   12c54:	mov	r0, r7
   12c58:	add	sp, sp, #12
   12c5c:	ldrd	r4, [sp]
   12c60:	ldrd	r6, [sp, #8]
   12c64:	ldrd	r8, [sp, #16]
   12c68:	add	sp, sp, #24
   12c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c70:	movw	r1, #14772	; 0x39b4
   12c74:	movt	r1, #1
   12c78:	movw	r3, #16496	; 0x4070
   12c7c:	movt	r3, #2
   12c80:	movw	r2, #14676	; 0x3954
   12c84:	movt	r2, #1
   12c88:	str	r1, [sp]
   12c8c:	movw	r1, #14740	; 0x3994
   12c90:	movt	r1, #1
   12c94:	ldr	r0, [r3]
   12c98:	mov	r3, #45	; 0x2d
   12c9c:	bl	111c8 <fprintf@plt>
   12ca0:	bl	11210 <abort@plt>
   12ca4:	movw	r1, #14800	; 0x39d0
   12ca8:	movt	r1, #1
   12cac:	movw	r3, #16496	; 0x4070
   12cb0:	movt	r3, #2
   12cb4:	movw	r2, #14676	; 0x3954
   12cb8:	movt	r2, #1
   12cbc:	str	r1, [sp]
   12cc0:	movw	r1, #14740	; 0x3994
   12cc4:	movt	r1, #1
   12cc8:	ldr	r0, [r3]
   12ccc:	mov	r3, #69	; 0x45
   12cd0:	bl	111c8 <fprintf@plt>
   12cd4:	bl	11210 <abort@plt>

00012cd8 <destroy_trampoline@@Base>:
   12cd8:	sub	r0, r0, #8
   12cdc:	mov	r1, #4096	; 0x1000
   12ce0:	b	111ec <munmap@plt>

00012ce4 <mmk_verify_set_times@@Base>:
   12ce4:	push	{fp}		; (str fp, [sp, #-4]!)
   12ce8:	add	fp, sp, #0
   12cec:	sub	sp, sp, #12
   12cf0:	str	r0, [fp, #-8]
   12cf4:	mrc	15, 0, r3, cr13, cr0, {3}
   12cf8:	ldr	r1, [pc, #20]	; 12d14 <mmk_verify_set_times@@Base+0x30>
   12cfc:	ldr	r2, [fp, #-8]
   12d00:	str	r2, [r3, r1]
   12d04:	nop	{0}
   12d08:	add	sp, fp, #0
   12d0c:	pop	{fp}		; (ldr fp, [sp], #4)
   12d10:	bx	lr
   12d14:	andeq	r0, r0, r4, lsl r0

00012d18 <mmk_verify_times@@Base>:
   12d18:	str	fp, [sp, #-8]!
   12d1c:	str	lr, [sp, #4]
   12d20:	add	fp, sp, #4
   12d24:	sub	sp, sp, #16
   12d28:	str	r0, [fp, #-16]
   12d2c:	mrc	15, 0, r3, cr13, cr0, {3}
   12d30:	ldr	r2, [pc, #252]	; 12e34 <mmk_verify_times@@Base+0x11c>
   12d34:	ldr	r3, [r3, r2]
   12d38:	str	r3, [fp, #-8]
   12d3c:	ldr	r3, [fp, #-16]
   12d40:	ldr	r3, [r3, #4]
   12d44:	cmp	r3, #0
   12d48:	beq	12d64 <mmk_verify_times@@Base+0x4c>
   12d4c:	ldr	r3, [fp, #-8]
   12d50:	cmp	r3, #0
   12d54:	moveq	r3, #1
   12d58:	movne	r3, #0
   12d5c:	uxtb	r3, r3
   12d60:	b	12e20 <mmk_verify_times@@Base+0x108>
   12d64:	ldr	r3, [fp, #-16]
   12d68:	ldr	r3, [r3, #8]
   12d6c:	cmp	r3, #0
   12d70:	bne	12d84 <mmk_verify_times@@Base+0x6c>
   12d74:	ldr	r3, [fp, #-16]
   12d78:	ldr	r3, [r3, #12]
   12d7c:	cmp	r3, #0
   12d80:	beq	12ddc <mmk_verify_times@@Base+0xc4>
   12d84:	ldr	r3, [fp, #-16]
   12d88:	ldr	r3, [r3, #12]
   12d8c:	cmp	r3, #0
   12d90:	beq	12da0 <mmk_verify_times@@Base+0x88>
   12d94:	ldr	r3, [fp, #-16]
   12d98:	ldr	r3, [r3, #12]
   12d9c:	b	12da4 <mmk_verify_times@@Base+0x8c>
   12da0:	ldr	r3, [fp, #-8]
   12da4:	str	r3, [fp, #-12]
   12da8:	ldr	r3, [fp, #-16]
   12dac:	ldr	r3, [r3, #8]
   12db0:	ldr	r2, [fp, #-8]
   12db4:	cmp	r2, r3
   12db8:	bcc	12dd4 <mmk_verify_times@@Base+0xbc>
   12dbc:	ldr	r2, [fp, #-8]
   12dc0:	ldr	r3, [fp, #-12]
   12dc4:	cmp	r2, r3
   12dc8:	bhi	12dd4 <mmk_verify_times@@Base+0xbc>
   12dcc:	mov	r3, #1
   12dd0:	b	12e20 <mmk_verify_times@@Base+0x108>
   12dd4:	mov	r3, #0
   12dd8:	b	12e20 <mmk_verify_times@@Base+0x108>
   12ddc:	ldr	r3, [fp, #-16]
   12de0:	ldr	r3, [r3, #20]
   12de4:	cmp	r3, #0
   12de8:	beq	12e04 <mmk_verify_times@@Base+0xec>
   12dec:	ldr	r3, [fp, #-16]
   12df0:	ldr	r3, [r3, #20]
   12df4:	ldr	r0, [fp, #-8]
   12df8:	blx	r3
   12dfc:	mov	r3, r0
   12e00:	b	12e20 <mmk_verify_times@@Base+0x108>
   12e04:	ldr	r3, [fp, #-16]
   12e08:	ldr	r3, [r3, #16]
   12e0c:	ldr	r2, [fp, #-8]
   12e10:	cmp	r2, r3
   12e14:	moveq	r3, #1
   12e18:	movne	r3, #0
   12e1c:	uxtb	r3, r3
   12e20:	mov	r0, r3
   12e24:	sub	sp, fp, #4
   12e28:	ldr	fp, [sp]
   12e2c:	add	sp, sp, #4
   12e30:	pop	{pc}		; (ldr pc, [sp], #4)
   12e34:	andeq	r0, r0, r4, lsl r0
   12e38:	str	fp, [sp, #-8]!
   12e3c:	str	lr, [sp, #4]
   12e40:	add	fp, sp, #4
   12e44:	sub	sp, sp, #32
   12e48:	str	r0, [fp, #-24]	; 0xffffffe8
   12e4c:	str	r1, [fp, #-28]	; 0xffffffe4
   12e50:	str	r2, [fp, #-32]	; 0xffffffe0
   12e54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12e58:	add	r3, r3, #4
   12e5c:	str	r3, [fp, #-28]	; 0xffffffe4
   12e60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e64:	sub	r3, r3, #4
   12e68:	str	r3, [fp, #-32]	; 0xffffffe0
   12e6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e70:	bl	12064 <mmk_mock_params_begin@@Base>
   12e74:	str	r0, [fp, #-8]
   12e78:	b	12ed8 <mmk_verify_times@@Base+0x1c0>
   12e7c:	ldr	r3, [fp, #-8]
   12e80:	add	r3, r3, #4
   12e84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12e88:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12e8c:	mov	r0, r3
   12e90:	bl	13118 <mmk_memcmp@@Base>
   12e94:	str	r0, [fp, #-12]
   12e98:	ldr	r3, [fp, #-12]
   12e9c:	cmp	r3, #0
   12ea0:	bne	12ec8 <mmk_verify_times@@Base+0x1b0>
   12ea4:	ldr	r3, [fp, #-8]
   12ea8:	str	r3, [fp, #-16]
   12eac:	ldr	r3, [fp, #-16]
   12eb0:	ldr	r3, [r3]
   12eb4:	add	r2, r3, #1
   12eb8:	ldr	r3, [fp, #-16]
   12ebc:	str	r2, [r3]
   12ec0:	mov	r3, #1
   12ec4:	b	12ee8 <mmk_verify_times@@Base+0x1d0>
   12ec8:	ldr	r1, [fp, #-8]
   12ecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ed0:	bl	120b8 <mmk_mock_params_next@@Base>
   12ed4:	str	r0, [fp, #-8]
   12ed8:	ldr	r3, [fp, #-8]
   12edc:	cmp	r3, #0
   12ee0:	bne	12e7c <mmk_verify_times@@Base+0x164>
   12ee4:	mov	r3, #0
   12ee8:	mov	r0, r3
   12eec:	sub	sp, fp, #4
   12ef0:	ldr	fp, [sp]
   12ef4:	add	sp, sp, #4
   12ef8:	pop	{pc}		; (ldr pc, [sp], #4)

00012efc <mmk_verify_register_call@@Base>:
   12efc:	str	fp, [sp, #-8]!
   12f00:	str	lr, [sp, #4]
   12f04:	add	fp, sp, #4
   12f08:	sub	sp, sp, #24
   12f0c:	str	r0, [fp, #-16]
   12f10:	str	r1, [fp, #-20]	; 0xffffffec
   12f14:	bl	12b68 <mmk_ctx@@Base>
   12f18:	mov	r3, r0
   12f1c:	mov	r0, r3
   12f20:	bl	12768 <mmk_stub_context@@Base>
   12f24:	str	r0, [fp, #-8]
   12f28:	ldr	r3, [fp, #-8]
   12f2c:	ldr	r3, [r3, #8]
   12f30:	cmp	r3, #0
   12f34:	bne	12f9c <mmk_verify_register_call@@Base+0xa0>
   12f38:	mov	r0, #4096	; 0x1000
   12f3c:	bl	133e8 <mmk_malloc@@Base>
   12f40:	mov	r2, r0
   12f44:	ldr	r3, [fp, #-8]
   12f48:	str	r2, [r3, #8]
   12f4c:	ldr	r3, [fp, #-8]
   12f50:	ldr	r3, [r3, #8]
   12f54:	cmp	r3, #0
   12f58:	bne	12f90 <mmk_verify_register_call@@Base+0x94>
   12f5c:	movw	r3, #16496	; 0x4070
   12f60:	movt	r3, #2
   12f64:	ldr	r0, [r3]
   12f68:	movw	r3, #14912	; 0x3a40
   12f6c:	movt	r3, #1
   12f70:	str	r3, [sp]
   12f74:	mov	r3, #79	; 0x4f
   12f78:	movw	r2, #14820	; 0x39e4
   12f7c:	movt	r2, #1
   12f80:	movw	r1, #14880	; 0x3a20
   12f84:	movt	r1, #1
   12f88:	bl	111c8 <fprintf@plt>
   12f8c:	bl	11210 <abort@plt>
   12f90:	ldr	r3, [fp, #-8]
   12f94:	mov	r2, #4096	; 0x1000
   12f98:	str	r2, [r3, #16]
   12f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fa0:	mov	r2, r3
   12fa4:	ldr	r1, [fp, #-16]
   12fa8:	ldr	r0, [fp, #-8]
   12fac:	bl	12e38 <mmk_verify_times@@Base+0x120>
   12fb0:	mov	r3, r0
   12fb4:	cmp	r3, #0
   12fb8:	bne	13104 <mmk_verify_register_call@@Base+0x208>
   12fbc:	ldr	r3, [fp, #-8]
   12fc0:	ldr	r2, [r3, #12]
   12fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fc8:	add	r3, r2, r3
   12fcc:	add	r2, r3, #4
   12fd0:	ldr	r3, [fp, #-8]
   12fd4:	ldr	r3, [r3, #16]
   12fd8:	cmp	r2, r3
   12fdc:	bcc	13088 <mmk_verify_register_call@@Base+0x18c>
   12fe0:	b	12ff8 <mmk_verify_register_call@@Base+0xfc>
   12fe4:	ldr	r3, [fp, #-8]
   12fe8:	ldr	r3, [r3, #16]
   12fec:	add	r2, r3, #4096	; 0x1000
   12ff0:	ldr	r3, [fp, #-8]
   12ff4:	str	r2, [r3, #16]
   12ff8:	ldr	r3, [fp, #-8]
   12ffc:	ldr	r2, [r3, #12]
   13000:	ldr	r3, [fp, #-20]	; 0xffffffec
   13004:	add	r3, r2, r3
   13008:	add	r2, r3, #4
   1300c:	ldr	r3, [fp, #-8]
   13010:	ldr	r3, [r3, #16]
   13014:	cmp	r2, r3
   13018:	bcs	12fe4 <mmk_verify_register_call@@Base+0xe8>
   1301c:	ldr	r3, [fp, #-8]
   13020:	ldr	r2, [r3, #8]
   13024:	ldr	r3, [fp, #-8]
   13028:	ldr	r3, [r3, #16]
   1302c:	mov	r1, r3
   13030:	mov	r0, r2
   13034:	bl	133f8 <mmk_realloc@@Base>
   13038:	mov	r2, r0
   1303c:	ldr	r3, [fp, #-8]
   13040:	str	r2, [r3, #8]
   13044:	ldr	r3, [fp, #-8]
   13048:	ldr	r3, [r3, #8]
   1304c:	cmp	r3, #0
   13050:	bne	13088 <mmk_verify_register_call@@Base+0x18c>
   13054:	movw	r3, #16496	; 0x4070
   13058:	movt	r3, #2
   1305c:	ldr	r0, [r3]
   13060:	movw	r3, #14912	; 0x3a40
   13064:	movt	r3, #1
   13068:	str	r3, [sp]
   1306c:	mov	r3, #91	; 0x5b
   13070:	movw	r2, #14820	; 0x39e4
   13074:	movt	r2, #1
   13078:	movw	r1, #14880	; 0x3a20
   1307c:	movt	r1, #1
   13080:	bl	111c8 <fprintf@plt>
   13084:	bl	11210 <abort@plt>
   13088:	ldr	r3, [fp, #-8]
   1308c:	ldr	r2, [r3, #8]
   13090:	ldr	r3, [fp, #-8]
   13094:	ldr	r3, [r3, #12]
   13098:	add	r3, r2, r3
   1309c:	sub	r1, fp, #20
   130a0:	mov	r2, #4
   130a4:	mov	r0, r3
   130a8:	bl	1316c <mmk_memcpy@@Base>
   130ac:	ldr	r3, [fp, #-8]
   130b0:	ldr	r2, [r3, #8]
   130b4:	ldr	r3, [fp, #-8]
   130b8:	ldr	r3, [r3, #12]
   130bc:	add	r3, r3, #4
   130c0:	add	r3, r2, r3
   130c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   130c8:	ldr	r1, [fp, #-16]
   130cc:	mov	r0, r3
   130d0:	bl	1316c <mmk_memcpy@@Base>
   130d4:	str	r0, [fp, #-12]
   130d8:	ldr	r3, [fp, #-12]
   130dc:	mov	r2, #1
   130e0:	str	r2, [r3]
   130e4:	ldr	r3, [fp, #-8]
   130e8:	ldr	r2, [r3, #12]
   130ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f0:	add	r3, r2, r3
   130f4:	add	r2, r3, #4
   130f8:	ldr	r3, [fp, #-8]
   130fc:	str	r2, [r3, #12]
   13100:	b	13108 <mmk_verify_register_call@@Base+0x20c>
   13104:	nop	{0}
   13108:	sub	sp, fp, #4
   1310c:	ldr	fp, [sp]
   13110:	add	sp, sp, #4
   13114:	pop	{pc}		; (ldr pc, [sp], #4)

00013118 <mmk_memcmp@@Base>:
   13118:	cmp	r2, #0
   1311c:	beq	13154 <mmk_memcmp@@Base+0x3c>
   13120:	ldrb	r3, [r0]
   13124:	ldrb	ip, [r1]
   13128:	cmp	r3, ip
   1312c:	subeq	r2, r2, #1
   13130:	addeq	r2, r1, r2
   13134:	beq	1314c <mmk_memcmp@@Base+0x34>
   13138:	b	1315c <mmk_memcmp@@Base+0x44>
   1313c:	ldrb	r3, [r0, #1]!
   13140:	ldrb	ip, [r1, #1]!
   13144:	cmp	r3, ip
   13148:	bne	1315c <mmk_memcmp@@Base+0x44>
   1314c:	cmp	r1, r2
   13150:	bne	1313c <mmk_memcmp@@Base+0x24>
   13154:	mov	r0, #0
   13158:	bx	lr
   1315c:	cmp	ip, r3
   13160:	mvnhi	r0, #0
   13164:	movls	r0, #1
   13168:	bx	lr

0001316c <mmk_memcpy@@Base>:
   1316c:	cmp	r2, #0
   13170:	bxeq	lr
   13174:	add	r3, r0, #4
   13178:	add	ip, r1, #4
   1317c:	cmp	r0, ip
   13180:	cmpcc	r1, r3
   13184:	sub	ip, r2, #1
   13188:	movcs	r3, #1
   1318c:	movcc	r3, #0
   13190:	cmp	ip, #7
   13194:	movls	r3, #0
   13198:	andhi	r3, r3, #1
   1319c:	cmp	r3, #0
   131a0:	beq	13218 <mmk_memcpy@@Base+0xac>
   131a4:	str	r4, [sp, #-8]!
   131a8:	bic	r4, r2, #3
   131ac:	mov	r3, r1
   131b0:	add	r4, r4, r1
   131b4:	mov	ip, r0
   131b8:	str	lr, [sp, #4]
   131bc:	ldr	lr, [r3], #4
   131c0:	cmp	r3, r4
   131c4:	str	lr, [ip], #4
   131c8:	bne	131bc <mmk_memcpy@@Base+0x50>
   131cc:	bic	r3, r2, #3
   131d0:	cmp	r2, r3
   131d4:	add	lr, r1, r3
   131d8:	sub	r2, r2, r3
   131dc:	add	ip, r0, r3
   131e0:	beq	1320c <mmk_memcpy@@Base+0xa0>
   131e4:	ldrb	r1, [r1, r3]
   131e8:	cmp	r2, #1
   131ec:	strb	r1, [r0, r3]
   131f0:	beq	1320c <mmk_memcpy@@Base+0xa0>
   131f4:	ldrb	r3, [lr, #1]
   131f8:	cmp	r2, #2
   131fc:	strb	r3, [ip, #1]
   13200:	beq	1320c <mmk_memcpy@@Base+0xa0>
   13204:	ldrb	r3, [lr, #2]
   13208:	strb	r3, [ip, #2]
   1320c:	ldr	r4, [sp]
   13210:	add	sp, sp, #4
   13214:	pop	{pc}		; (ldr pc, [sp], #4)
   13218:	sub	r1, r1, #1
   1321c:	add	r2, r0, r2
   13220:	mov	r3, r0
   13224:	ldrb	ip, [r1, #1]!
   13228:	strb	ip, [r3], #1
   1322c:	cmp	r3, r2
   13230:	bne	13224 <mmk_memcpy@@Base+0xb8>
   13234:	bx	lr

00013238 <mmk_strneq@@Base>:
   13238:	ldrb	r3, [r0]
   1323c:	cmp	r3, #0
   13240:	beq	132d4 <mmk_strneq@@Base+0x9c>
   13244:	ldrb	ip, [r1]
   13248:	cmp	ip, #0
   1324c:	beq	132d4 <mmk_strneq@@Base+0x9c>
   13250:	cmp	r2, #0
   13254:	beq	132c4 <mmk_strneq@@Base+0x8c>
   13258:	cmp	r3, ip
   1325c:	bne	132cc <mmk_strneq@@Base+0x94>
   13260:	add	r3, r1, #1
   13264:	push	{lr}		; (str lr, [sp, #-4]!)
   13268:	b	13288 <mmk_strneq@@Base+0x50>
   1326c:	ldrb	lr, [r3], #1
   13270:	cmp	lr, #0
   13274:	beq	1329c <mmk_strneq@@Base+0x64>
   13278:	cmp	r2, #0
   1327c:	beq	132b4 <mmk_strneq@@Base+0x7c>
   13280:	cmp	ip, lr
   13284:	bne	132bc <mmk_strneq@@Base+0x84>
   13288:	ldrb	ip, [r0, #1]!
   1328c:	sub	r2, r2, #1
   13290:	mov	r1, r3
   13294:	cmp	ip, #0
   13298:	bne	1326c <mmk_strneq@@Base+0x34>
   1329c:	cmp	r2, #0
   132a0:	beq	132b4 <mmk_strneq@@Base+0x7c>
   132a4:	ldrb	r0, [r1]
   132a8:	clz	r0, r0
   132ac:	lsr	r0, r0, #5
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	mov	r0, #1
   132b8:	pop	{pc}		; (ldr pc, [sp], #4)
   132bc:	mov	r0, #0
   132c0:	pop	{pc}		; (ldr pc, [sp], #4)
   132c4:	mov	r0, #1
   132c8:	bx	lr
   132cc:	mov	r0, #0
   132d0:	bx	lr
   132d4:	cmp	r2, #0
   132d8:	beq	132c4 <mmk_strneq@@Base+0x8c>
   132dc:	ldrb	r0, [r1]
   132e0:	clz	r0, r0
   132e4:	lsr	r0, r0, #5
   132e8:	bx	lr

000132ec <mmk_strchr@@Base>:
   132ec:	ldrb	r2, [r0]
   132f0:	cmp	r2, #0
   132f4:	beq	13320 <mmk_strchr@@Base+0x34>
   132f8:	cmp	r1, r2
   132fc:	bne	1330c <mmk_strchr@@Base+0x20>
   13300:	b	13328 <mmk_strchr@@Base+0x3c>
   13304:	cmp	r3, r1
   13308:	beq	13324 <mmk_strchr@@Base+0x38>
   1330c:	ldrb	r3, [r0, #1]!
   13310:	cmp	r3, #0
   13314:	bne	13304 <mmk_strchr@@Base+0x18>
   13318:	mov	r0, r3
   1331c:	bx	lr
   13320:	mov	r0, r2
   13324:	bx	lr
   13328:	bx	lr

0001332c <mmk_strcpy@@Base>:
   1332c:	ldrb	r3, [r1]
   13330:	mov	r2, r0
   13334:	cmp	r3, #0
   13338:	beq	1334c <mmk_strcpy@@Base+0x20>
   1333c:	strb	r3, [r2], #1
   13340:	ldrb	r3, [r1, #1]!
   13344:	cmp	r3, #0
   13348:	bne	1333c <mmk_strcpy@@Base+0x10>
   1334c:	mov	r3, #0
   13350:	mov	r0, r2
   13354:	strb	r3, [r2]
   13358:	bx	lr

0001335c <mmk_strncpy@@Base>:
   1335c:	ldrb	ip, [r1]
   13360:	mov	r3, r0
   13364:	cmp	r2, #0
   13368:	cmpne	ip, #0
   1336c:	beq	13388 <mmk_strncpy@@Base+0x2c>
   13370:	add	r2, r0, r2
   13374:	strb	ip, [r3], #1
   13378:	ldrb	ip, [r1, #1]!
   1337c:	cmp	r3, r2
   13380:	cmpne	ip, #0
   13384:	bne	13374 <mmk_strncpy@@Base+0x18>
   13388:	mov	r2, #0
   1338c:	mov	r0, r3
   13390:	strb	r2, [r3]
   13394:	bx	lr

00013398 <mmk_strlen@@Base>:
   13398:	ldrb	r3, [r0]
   1339c:	cmp	r3, #0
   133a0:	beq	133c0 <mmk_strlen@@Base+0x28>
   133a4:	mov	r3, r0
   133a8:	rsb	r1, r0, #1
   133ac:	add	r0, r3, r1
   133b0:	ldrb	r2, [r3, #1]!
   133b4:	cmp	r2, #0
   133b8:	bne	133ac <mmk_strlen@@Base+0x14>
   133bc:	bx	lr
   133c0:	mov	r0, r3
   133c4:	bx	lr

000133c8 <mmk_isspace@@Base>:
   133c8:	sub	r3, r0, #9
   133cc:	cmp	r0, #32
   133d0:	cmpne	r3, #1
   133d4:	subhi	r0, r0, #13
   133d8:	clzhi	r0, r0
   133dc:	lsrhi	r0, r0, #5
   133e0:	movls	r0, #1
   133e4:	bx	lr

000133e8 <mmk_malloc@@Base>:
   133e8:	movw	r3, #16544	; 0x40a0
   133ec:	movt	r3, #2
   133f0:	ldr	r3, [r3]
   133f4:	bx	r3

000133f8 <mmk_realloc@@Base>:
   133f8:	movw	r3, #16536	; 0x4098
   133fc:	movt	r3, #2
   13400:	ldr	r3, [r3]
   13404:	bx	r3

00013408 <mmk_free@@Base>:
   13408:	movw	r3, #16540	; 0x409c
   1340c:	movt	r3, #2
   13410:	ldr	r3, [r3]
   13414:	bx	r3

00013418 <mmk_init_vital_functions@@Base>:
   13418:	str	r4, [sp, #-8]!
   1341c:	mov	r4, r0
   13420:	mov	r0, #0
   13424:	str	lr, [sp, #4]
   13428:	sub	sp, sp, #8
   1342c:	bl	11180 <malloc@plt>
   13430:	mov	r1, #0
   13434:	bl	11174 <realloc@plt>
   13438:	bl	1115c <free@plt>
   1343c:	mov	r0, r4
   13440:	movw	r1, #14928	; 0x3a50
   13444:	movt	r1, #1
   13448:	bl	12700 <plt_get_real_fn@@Base>
   1344c:	movw	r3, #16544	; 0x40a0
   13450:	movt	r3, #2
   13454:	cmp	r0, #0
   13458:	str	r0, [r3]
   1345c:	beq	134b8 <mmk_init_vital_functions@@Base+0xa0>
   13460:	movw	r1, #15052	; 0x3acc
   13464:	movt	r1, #1
   13468:	mov	r0, r4
   1346c:	bl	12700 <plt_get_real_fn@@Base>
   13470:	movw	r3, #16536	; 0x4098
   13474:	movt	r3, #2
   13478:	cmp	r0, #0
   1347c:	str	r0, [r3]
   13480:	beq	13520 <mmk_init_vital_functions@@Base+0x108>
   13484:	mov	r0, r4
   13488:	movw	r1, #15116	; 0x3b0c
   1348c:	movt	r1, #1
   13490:	bl	12700 <plt_get_real_fn@@Base>
   13494:	movw	r3, #16540	; 0x409c
   13498:	movt	r3, #2
   1349c:	cmp	r0, #0
   134a0:	str	r0, [r3]
   134a4:	beq	134ec <mmk_init_vital_functions@@Base+0xd4>
   134a8:	add	sp, sp, #8
   134ac:	ldr	r4, [sp]
   134b0:	add	sp, sp, #4
   134b4:	pop	{pc}		; (ldr pc, [sp], #4)
   134b8:	movw	r1, #14996	; 0x3a94
   134bc:	movt	r1, #1
   134c0:	movw	r3, #16496	; 0x4070
   134c4:	movt	r3, #2
   134c8:	movw	r2, #14936	; 0x3a58
   134cc:	movt	r2, #1
   134d0:	str	r1, [sp]
   134d4:	movw	r1, #14740	; 0x3994
   134d8:	movt	r1, #1
   134dc:	ldr	r0, [r3]
   134e0:	mov	r3, #88	; 0x58
   134e4:	bl	111c8 <fprintf@plt>
   134e8:	bl	11210 <abort@plt>
   134ec:	movw	r1, #15124	; 0x3b14
   134f0:	movt	r1, #1
   134f4:	movw	r3, #16496	; 0x4070
   134f8:	movt	r3, #2
   134fc:	movw	r2, #14936	; 0x3a58
   13500:	movt	r2, #1
   13504:	str	r1, [sp]
   13508:	movw	r1, #14740	; 0x3994
   1350c:	movt	r1, #1
   13510:	ldr	r0, [r3]
   13514:	mov	r3, #90	; 0x5a
   13518:	bl	111c8 <fprintf@plt>
   1351c:	bl	11210 <abort@plt>
   13520:	movw	r1, #15060	; 0x3ad4
   13524:	movt	r1, #1
   13528:	movw	r3, #16496	; 0x4070
   1352c:	movt	r3, #2
   13530:	movw	r2, #14936	; 0x3a58
   13534:	movt	r2, #1
   13538:	str	r1, [sp]
   1353c:	movw	r1, #14740	; 0x3994
   13540:	movt	r1, #1
   13544:	ldr	r0, [r3]
   13548:	mov	r3, #89	; 0x59
   1354c:	bl	111c8 <fprintf@plt>
   13550:	bl	11210 <abort@plt>

00013554 <mmk_when_init@@Base>:
   13554:	push	{fp}		; (str fp, [sp, #-4]!)
   13558:	add	fp, sp, #0
   1355c:	sub	sp, sp, #12
   13560:	str	r0, [fp, #-8]
   13564:	mrc	15, 0, r3, cr13, cr0, {3}
   13568:	ldr	r1, [pc, #20]	; 13584 <mmk_when_init@@Base+0x30>
   1356c:	ldr	r2, [fp, #-8]
   13570:	str	r2, [r3, r1]
   13574:	nop	{0}
   13578:	add	sp, fp, #0
   1357c:	pop	{fp}		; (ldr fp, [sp], #4)
   13580:	bx	lr
   13584:	andeq	r0, r0, r8, lsl r0

00013588 <mmk_when_get_result@@Base>:
   13588:	push	{fp}		; (str fp, [sp, #-4]!)
   1358c:	add	fp, sp, #0
   13590:	mrc	15, 0, r3, cr13, cr0, {3}
   13594:	ldr	r2, [pc, #16]	; 135ac <mmk_when_get_result@@Base+0x24>
   13598:	ldr	r3, [r3, r2]
   1359c:	mov	r0, r3
   135a0:	add	sp, fp, #0
   135a4:	pop	{fp}		; (ldr fp, [sp], #4)
   135a8:	bx	lr
   135ac:	andeq	r0, r0, r8, lsl r0

000135b0 <mmk_when_impl@@Base>:
   135b0:	str	fp, [sp, #-8]!
   135b4:	str	lr, [sp, #4]
   135b8:	add	fp, sp, #4
   135bc:	sub	sp, sp, #16
   135c0:	str	r0, [fp, #-16]
   135c4:	str	r1, [fp, #-20]	; 0xffffffec
   135c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   135cc:	str	r3, [fp, #-8]
   135d0:	bl	11cf4 <mmk_matcher_ctx@@Base>
   135d4:	mov	r2, r0
   135d8:	ldr	r3, [fp, #-8]
   135dc:	str	r2, [r3]
   135e0:	ldr	r3, [fp, #-16]
   135e4:	ldr	r2, [r3]
   135e8:	ldr	r3, [fp, #-8]
   135ec:	str	r2, [r3, #4]
   135f0:	ldr	r3, [fp, #-16]
   135f4:	ldr	r2, [fp, #-8]
   135f8:	str	r2, [r3]
   135fc:	nop	{0}
   13600:	sub	sp, fp, #4
   13604:	ldr	fp, [sp]
   13608:	add	sp, sp, #4
   1360c:	pop	{pc}		; (ldr pc, [sp], #4)

00013610 <mmk_trampoline@@Base>:
   13610:	sub	ip, pc, #8
   13614:	push	{r0, r1, r2, r3}
   13618:	push	{ip, lr}
   1361c:	ldr	r0, [ip, #-8]
   13620:	ldr	ip, [r0, #4]
   13624:	blx	ip
   13628:	pop	{ip, lr}
   1362c:	push	{ip, lr}
   13630:	ldr	ip, [ip, #-8]
   13634:	ldr	ip, [ip]
   13638:	blx	ip
   1363c:	cmp	r0, #0
   13640:	bne	13650 <mmk_trampoline@@Base+0x40>
   13644:	pop	{ip, lr}
   13648:	pop	{r0, r1, r2, r3}
   1364c:	ldr	pc, [ip, #-4]
   13650:	pop	{ip, lr}
   13654:	pop	{r0, r1, r2, r3}
   13658:	push	{ip, lr}
   1365c:	ldr	ip, [ip, #-8]
   13660:	ldr	ip, [ip, #8]
   13664:	blx	ip
   13668:	pop	{ip, pc}

0001366c <mmk_trampoline_end@@Base>:
   1366c:	nop			; (mov r0, r0)

00013670 <__libc_csu_init@@Base>:
   13670:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13674:	mov	r7, r0
   13678:	ldr	r6, [pc, #72]	; 136c8 <__libc_csu_init@@Base+0x58>
   1367c:	ldr	r5, [pc, #72]	; 136cc <__libc_csu_init@@Base+0x5c>
   13680:	add	r6, pc, r6
   13684:	add	r5, pc, r5
   13688:	sub	r6, r6, r5
   1368c:	mov	r8, r1
   13690:	mov	r9, r2
   13694:	bl	11118 <strstr@plt-0x20>
   13698:	asrs	r6, r6, #2
   1369c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136a0:	mov	r4, #0
   136a4:	add	r4, r4, #1
   136a8:	ldr	r3, [r5], #4
   136ac:	mov	r2, r9
   136b0:	mov	r1, r8
   136b4:	mov	r0, r7
   136b8:	blx	r3
   136bc:	cmp	r6, r4
   136c0:	bne	136a4 <__libc_csu_init@@Base+0x34>
   136c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136c8:	andeq	r0, r1, r4, ror r8
   136cc:	andeq	r0, r1, ip, ror #16

000136d0 <__libc_csu_fini@@Base>:
   136d0:	bx	lr

Disassembly of section .fini:

000136d4 <.fini>:
   136d4:	push	{r3, lr}
   136d8:	pop	{r3, pc}
