
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010c9c <.init>:
   10c9c:	push	{r3, lr}
   10ca0:	bl	10f8c <__assert_fail@plt+0x48>
   10ca4:	pop	{r3, pc}

Disassembly of section .plt:

00010ca8 <calloc@plt-0x14>:
   10ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cac:	ldr	lr, [pc, #4]	; 10cb8 <calloc@plt-0x4>
   10cb0:	add	lr, pc, lr
   10cb4:	ldr	pc, [lr, #8]!
   10cb8:	andeq	ip, r1, r8, asr #6

00010cbc <calloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #28, 20	; 0x1c000
   10cc4:	ldr	pc, [ip, #840]!	; 0x348

00010cc8 <fputs_unlocked@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #28, 20	; 0x1c000
   10cd0:	ldr	pc, [ip, #832]!	; 0x340

00010cd4 <raise@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #28, 20	; 0x1c000
   10cdc:	ldr	pc, [ip, #824]!	; 0x338

00010ce0 <strcmp@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #28, 20	; 0x1c000
   10ce8:	ldr	pc, [ip, #816]!	; 0x330

00010cec <posix_fadvise64@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #28, 20	; 0x1c000
   10cf4:	ldr	pc, [ip, #808]!	; 0x328

00010cf8 <printf@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #28, 20	; 0x1c000
   10d00:	ldr	pc, [ip, #800]!	; 0x320

00010d04 <read@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #28, 20	; 0x1c000
   10d0c:	ldr	pc, [ip, #792]!	; 0x318

00010d10 <fflush@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #28, 20	; 0x1c000
   10d18:	ldr	pc, [ip, #784]!	; 0x310

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #28, 20	; 0x1c000
   10d24:	ldr	pc, [ip, #776]!	; 0x308

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #28, 20	; 0x1c000
   10d30:	ldr	pc, [ip, #768]!	; 0x300

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #28, 20	; 0x1c000
   10d3c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d40 <tolower@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #28, 20	; 0x1c000
   10d48:	ldr	pc, [ip, #752]!	; 0x2f0

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #28, 20	; 0x1c000
   10d54:	ldr	pc, [ip, #744]!	; 0x2e8

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #28, 20	; 0x1c000
   10d60:	ldr	pc, [ip, #736]!	; 0x2e0

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #28, 20	; 0x1c000
   10d6c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d70 <stpcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #28, 20	; 0x1c000
   10d78:	ldr	pc, [ip, #720]!	; 0x2d0

00010d7c <fputc_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #28, 20	; 0x1c000
   10d84:	ldr	pc, [ip, #712]!	; 0x2c8

00010d88 <realloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #28, 20	; 0x1c000
   10d90:	ldr	pc, [ip, #704]!	; 0x2c0

00010d94 <textdomain@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #28, 20	; 0x1c000
   10d9c:	ldr	pc, [ip, #696]!	; 0x2b8

00010da0 <iswprint@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #28, 20	; 0x1c000
   10da8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dac <fwrite@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #28, 20	; 0x1c000
   10db4:	ldr	pc, [ip, #680]!	; 0x2a8

00010db8 <lseek64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #28, 20	; 0x1c000
   10dc0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc4 <__ctype_get_mb_cur_max@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #28, 20	; 0x1c000
   10dcc:	ldr	pc, [ip, #664]!	; 0x298

00010dd0 <__fpending@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #28, 20	; 0x1c000
   10dd8:	ldr	pc, [ip, #656]!	; 0x290

00010ddc <ferror_unlocked@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #28, 20	; 0x1c000
   10de4:	ldr	pc, [ip, #648]!	; 0x288

00010de8 <mbrtowc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #28, 20	; 0x1c000
   10df0:	ldr	pc, [ip, #640]!	; 0x280

00010df4 <error@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #28, 20	; 0x1c000
   10dfc:	ldr	pc, [ip, #632]!	; 0x278

00010e00 <malloc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #28, 20	; 0x1c000
   10e08:	ldr	pc, [ip, #624]!	; 0x270

00010e0c <__libc_start_main@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #28, 20	; 0x1c000
   10e14:	ldr	pc, [ip, #616]!	; 0x268

00010e18 <__freading@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #28, 20	; 0x1c000
   10e20:	ldr	pc, [ip, #608]!	; 0x260

00010e24 <__gmon_start__@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #28, 20	; 0x1c000
   10e2c:	ldr	pc, [ip, #600]!	; 0x258

00010e30 <getopt_long@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #28, 20	; 0x1c000
   10e38:	ldr	pc, [ip, #592]!	; 0x250

00010e3c <__ctype_b_loc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #28, 20	; 0x1c000
   10e44:	ldr	pc, [ip, #584]!	; 0x248

00010e48 <exit@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #28, 20	; 0x1c000
   10e50:	ldr	pc, [ip, #576]!	; 0x240

00010e54 <gettext@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #28, 20	; 0x1c000
   10e5c:	ldr	pc, [ip, #568]!	; 0x238

00010e60 <strlen@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #28, 20	; 0x1c000
   10e68:	ldr	pc, [ip, #560]!	; 0x230

00010e6c <strchr@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #28, 20	; 0x1c000
   10e74:	ldr	pc, [ip, #552]!	; 0x228

00010e78 <fprintf@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #28, 20	; 0x1c000
   10e80:	ldr	pc, [ip, #544]!	; 0x220

00010e84 <__errno_location@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #28, 20	; 0x1c000
   10e8c:	ldr	pc, [ip, #536]!	; 0x218

00010e90 <__cxa_atexit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #28, 20	; 0x1c000
   10e98:	ldr	pc, [ip, #528]!	; 0x210

00010e9c <memset@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #28, 20	; 0x1c000
   10ea4:	ldr	pc, [ip, #520]!	; 0x208

00010ea8 <fileno@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #28, 20	; 0x1c000
   10eb0:	ldr	pc, [ip, #512]!	; 0x200

00010eb4 <strtoumax@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #28, 20	; 0x1c000
   10ebc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec0 <fclose@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #28, 20	; 0x1c000
   10ec8:	ldr	pc, [ip, #496]!	; 0x1f0

00010ecc <fseeko64@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #28, 20	; 0x1c000
   10ed4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ed8 <setlocale@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #28, 20	; 0x1c000
   10ee0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ee4 <toupper@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #28, 20	; 0x1c000
   10eec:	ldr	pc, [ip, #472]!	; 0x1d8

00010ef0 <strrchr@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #28, 20	; 0x1c000
   10ef8:	ldr	pc, [ip, #464]!	; 0x1d0

00010efc <nl_langinfo@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #28, 20	; 0x1c000
   10f04:	ldr	pc, [ip, #456]!	; 0x1c8

00010f08 <sprintf@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #28, 20	; 0x1c000
   10f10:	ldr	pc, [ip, #448]!	; 0x1c0

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #28, 20	; 0x1c000
   10f1c:	ldr	pc, [ip, #440]!	; 0x1b8

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #28, 20	; 0x1c000
   10f28:	ldr	pc, [ip, #432]!	; 0x1b0

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #28, 20	; 0x1c000
   10f34:	ldr	pc, [ip, #424]!	; 0x1a8

00010f38 <close@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #28, 20	; 0x1c000
   10f40:	ldr	pc, [ip, #416]!	; 0x1a0

00010f44 <__assert_fail@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #28, 20	; 0x1c000
   10f4c:	ldr	pc, [ip, #408]!	; 0x198

Disassembly of section .text:

00010f50 <.text>:
   10f50:	mov	fp, #0
   10f54:	mov	lr, #0
   10f58:	pop	{r1}		; (ldr r1, [sp], #4)
   10f5c:	mov	r2, sp
   10f60:	push	{r2}		; (str r2, [sp, #-4]!)
   10f64:	push	{r0}		; (str r0, [sp, #-4]!)
   10f68:	ldr	ip, [pc, #16]	; 10f80 <__assert_fail@plt+0x3c>
   10f6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f70:	ldr	r0, [pc, #12]	; 10f84 <__assert_fail@plt+0x40>
   10f74:	ldr	r3, [pc, #12]	; 10f88 <__assert_fail@plt+0x44>
   10f78:	bl	10e0c <__libc_start_main@plt>
   10f7c:	bl	10f2c <abort@plt>
   10f80:	andeq	sl, r1, r8, asr sl
   10f84:	andeq	r4, r1, r8, lsr #5
   10f88:	strdeq	sl, [r1], -r8
   10f8c:	ldr	r3, [pc, #20]	; 10fa8 <__assert_fail@plt+0x64>
   10f90:	ldr	r2, [pc, #20]	; 10fac <__assert_fail@plt+0x68>
   10f94:	add	r3, pc, r3
   10f98:	ldr	r2, [r3, r2]
   10f9c:	cmp	r2, #0
   10fa0:	bxeq	lr
   10fa4:	b	10e24 <__gmon_start__@plt>
   10fa8:	andeq	ip, r1, r4, rrx
   10fac:	andeq	r0, r0, r8, ror #1
   10fb0:	ldr	r3, [pc, #28]	; 10fd4 <__assert_fail@plt+0x90>
   10fb4:	ldr	r0, [pc, #28]	; 10fd8 <__assert_fail@plt+0x94>
   10fb8:	sub	r3, r3, r0
   10fbc:	cmp	r3, #6
   10fc0:	bxls	lr
   10fc4:	ldr	r3, [pc, #16]	; 10fdc <__assert_fail@plt+0x98>
   10fc8:	cmp	r3, #0
   10fcc:	bxeq	lr
   10fd0:	bx	r3
   10fd4:	andeq	sp, r2, pc, lsr r1
   10fd8:	andeq	sp, r2, ip, lsr r1
   10fdc:	andeq	r0, r0, r0
   10fe0:	ldr	r1, [pc, #36]	; 1100c <__assert_fail@plt+0xc8>
   10fe4:	ldr	r0, [pc, #36]	; 11010 <__assert_fail@plt+0xcc>
   10fe8:	sub	r1, r1, r0
   10fec:	asr	r1, r1, #2
   10ff0:	add	r1, r1, r1, lsr #31
   10ff4:	asrs	r1, r1, #1
   10ff8:	bxeq	lr
   10ffc:	ldr	r3, [pc, #16]	; 11014 <__assert_fail@plt+0xd0>
   11000:	cmp	r3, #0
   11004:	bxeq	lr
   11008:	bx	r3
   1100c:	andeq	sp, r2, ip, lsr r1
   11010:	andeq	sp, r2, ip, lsr r1
   11014:	andeq	r0, r0, r0
   11018:	push	{r4, lr}
   1101c:	ldr	r4, [pc, #24]	; 1103c <__assert_fail@plt+0xf8>
   11020:	ldrb	r3, [r4]
   11024:	cmp	r3, #0
   11028:	popne	{r4, pc}
   1102c:	bl	10fb0 <__assert_fail@plt+0x6c>
   11030:	mov	r3, #1
   11034:	strb	r3, [r4]
   11038:	pop	{r4, pc}
   1103c:	andeq	sp, r2, r0, ror #2
   11040:	ldr	r0, [pc, #40]	; 11070 <__assert_fail@plt+0x12c>
   11044:	ldr	r3, [r0]
   11048:	cmp	r3, #0
   1104c:	bne	11054 <__assert_fail@plt+0x110>
   11050:	b	10fe0 <__assert_fail@plt+0x9c>
   11054:	ldr	r3, [pc, #24]	; 11074 <__assert_fail@plt+0x130>
   11058:	cmp	r3, #0
   1105c:	beq	11050 <__assert_fail@plt+0x10c>
   11060:	push	{r4, lr}
   11064:	blx	r3
   11068:	pop	{r4, lr}
   1106c:	b	10fe0 <__assert_fail@plt+0x9c>
   11070:	andeq	ip, r2, r4, lsl pc
   11074:	andeq	r0, r0, r0
   11078:	push	{fp}		; (str fp, [sp, #-4]!)
   1107c:	add	fp, sp, #0
   11080:	sub	sp, sp, #12
   11084:	mov	r3, r0
   11088:	strb	r3, [fp, #-5]
   1108c:	ldrb	r3, [fp, #-5]
   11090:	mov	r0, r3
   11094:	add	sp, fp, #0
   11098:	pop	{fp}		; (ldr fp, [sp], #4)
   1109c:	bx	lr
   110a0:	push	{fp, lr}
   110a4:	add	fp, sp, #4
   110a8:	sub	sp, sp, #80	; 0x50
   110ac:	str	r0, [fp, #-80]	; 0xffffffb0
   110b0:	ldr	r3, [pc, #348]	; 11214 <__assert_fail@plt+0x2d0>
   110b4:	sub	ip, fp, #72	; 0x48
   110b8:	mov	lr, r3
   110bc:	ldm	lr!, {r0, r1, r2, r3}
   110c0:	stmia	ip!, {r0, r1, r2, r3}
   110c4:	ldm	lr!, {r0, r1, r2, r3}
   110c8:	stmia	ip!, {r0, r1, r2, r3}
   110cc:	ldm	lr!, {r0, r1, r2, r3}
   110d0:	stmia	ip!, {r0, r1, r2, r3}
   110d4:	ldm	lr, {r0, r1}
   110d8:	stm	ip, {r0, r1}
   110dc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110e0:	str	r3, [fp, #-8]
   110e4:	sub	r3, fp, #72	; 0x48
   110e8:	str	r3, [fp, #-12]
   110ec:	b	110fc <__assert_fail@plt+0x1b8>
   110f0:	ldr	r3, [fp, #-12]
   110f4:	add	r3, r3, #8
   110f8:	str	r3, [fp, #-12]
   110fc:	ldr	r3, [fp, #-12]
   11100:	ldr	r3, [r3]
   11104:	cmp	r3, #0
   11108:	beq	1112c <__assert_fail@plt+0x1e8>
   1110c:	ldr	r3, [fp, #-12]
   11110:	ldr	r3, [r3]
   11114:	mov	r1, r3
   11118:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1111c:	bl	10ce0 <strcmp@plt>
   11120:	mov	r3, r0
   11124:	cmp	r3, #0
   11128:	bne	110f0 <__assert_fail@plt+0x1ac>
   1112c:	ldr	r3, [fp, #-12]
   11130:	ldr	r3, [r3, #4]
   11134:	cmp	r3, #0
   11138:	beq	11148 <__assert_fail@plt+0x204>
   1113c:	ldr	r3, [fp, #-12]
   11140:	ldr	r3, [r3, #4]
   11144:	str	r3, [fp, #-8]
   11148:	ldr	r0, [pc, #200]	; 11218 <__assert_fail@plt+0x2d4>
   1114c:	bl	10e54 <gettext@plt>
   11150:	mov	r3, r0
   11154:	ldr	r2, [pc, #192]	; 1121c <__assert_fail@plt+0x2d8>
   11158:	ldr	r1, [pc, #192]	; 11220 <__assert_fail@plt+0x2dc>
   1115c:	mov	r0, r3
   11160:	bl	10cf8 <printf@plt>
   11164:	mov	r1, #0
   11168:	mov	r0, #5
   1116c:	bl	10ed8 <setlocale@plt>
   11170:	str	r0, [fp, #-16]
   11174:	ldr	r3, [fp, #-16]
   11178:	cmp	r3, #0
   1117c:	beq	111bc <__assert_fail@plt+0x278>
   11180:	mov	r2, #3
   11184:	ldr	r1, [pc, #152]	; 11224 <__assert_fail@plt+0x2e0>
   11188:	ldr	r0, [fp, #-16]
   1118c:	bl	10f20 <strncmp@plt>
   11190:	mov	r3, r0
   11194:	cmp	r3, #0
   11198:	beq	111bc <__assert_fail@plt+0x278>
   1119c:	ldr	r0, [pc, #132]	; 11228 <__assert_fail@plt+0x2e4>
   111a0:	bl	10e54 <gettext@plt>
   111a4:	mov	r2, r0
   111a8:	ldr	r3, [pc, #124]	; 1122c <__assert_fail@plt+0x2e8>
   111ac:	ldr	r3, [r3]
   111b0:	mov	r1, r3
   111b4:	mov	r0, r2
   111b8:	bl	10cc8 <fputs_unlocked@plt>
   111bc:	ldr	r0, [pc, #108]	; 11230 <__assert_fail@plt+0x2ec>
   111c0:	bl	10e54 <gettext@plt>
   111c4:	mov	r3, r0
   111c8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   111cc:	ldr	r1, [pc, #72]	; 1121c <__assert_fail@plt+0x2d8>
   111d0:	mov	r0, r3
   111d4:	bl	10cf8 <printf@plt>
   111d8:	ldr	r0, [pc, #84]	; 11234 <__assert_fail@plt+0x2f0>
   111dc:	bl	10e54 <gettext@plt>
   111e0:	ldr	r2, [fp, #-8]
   111e4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   111e8:	cmp	r2, r3
   111ec:	bne	111f8 <__assert_fail@plt+0x2b4>
   111f0:	ldr	r3, [pc, #64]	; 11238 <__assert_fail@plt+0x2f4>
   111f4:	b	111fc <__assert_fail@plt+0x2b8>
   111f8:	ldr	r3, [pc, #60]	; 1123c <__assert_fail@plt+0x2f8>
   111fc:	mov	r2, r3
   11200:	ldr	r1, [fp, #-8]
   11204:	bl	10cf8 <printf@plt>
   11208:	nop			; (mov r0, r0)
   1120c:	sub	sp, fp, #4
   11210:	pop	{fp, pc}
   11214:	strdeq	sl, [r1], -r4
   11218:	andeq	sl, r1, r0, lsl #21
   1121c:	muleq	r1, r8, sl
   11220:	andeq	sl, r1, r0, asr #21
   11224:	ldrdeq	sl, [r1], -r0
   11228:	ldrdeq	sl, [r1], -r4
   1122c:	andeq	sp, r2, ip, asr r1
   11230:	andeq	sl, r1, ip, lsl fp
   11234:	andeq	sl, r1, r8, lsr fp
   11238:	andeq	sl, r1, ip, ror #22
   1123c:	andeq	sl, r1, r8, ror fp
   11240:	push	{fp}		; (str fp, [sp, #-4]!)
   11244:	add	fp, sp, #0
   11248:	sub	sp, sp, #20
   1124c:	str	r0, [fp, #-8]
   11250:	str	r1, [fp, #-12]
   11254:	mov	r3, r2
   11258:	strb	r3, [fp, #-13]
   1125c:	ldr	r3, [fp, #-8]
   11260:	ldr	r2, [r3]
   11264:	ldr	r3, [fp, #-12]
   11268:	add	r3, r2, r3
   1126c:	ldrb	r3, [r3]
   11270:	ldrb	r2, [fp, #-13]
   11274:	cmp	r2, r3
   11278:	bne	112a8 <__assert_fail@plt+0x364>
   1127c:	ldr	r3, [fp, #-8]
   11280:	ldr	r2, [r3, #4]
   11284:	ldr	r3, [fp, #-12]
   11288:	add	r3, r2, r3
   1128c:	ldrb	r3, [r3]
   11290:	eor	r3, r3, #1
   11294:	uxtb	r3, r3
   11298:	cmp	r3, #0
   1129c:	beq	112a8 <__assert_fail@plt+0x364>
   112a0:	mov	r3, #1
   112a4:	b	112ac <__assert_fail@plt+0x368>
   112a8:	mov	r3, #0
   112ac:	and	r3, r3, #1
   112b0:	uxtb	r3, r3
   112b4:	mov	r0, r3
   112b8:	add	sp, fp, #0
   112bc:	pop	{fp}		; (ldr fp, [sp], #4)
   112c0:	bx	lr
   112c4:	push	{r4, fp, lr}
   112c8:	add	fp, sp, #8
   112cc:	sub	sp, sp, #12
   112d0:	str	r0, [fp, #-16]
   112d4:	ldr	r3, [fp, #-16]
   112d8:	cmp	r3, #0
   112dc:	beq	1130c <__assert_fail@plt+0x3c8>
   112e0:	ldr	r3, [pc, #308]	; 1141c <__assert_fail@plt+0x4d8>
   112e4:	ldr	r4, [r3]
   112e8:	ldr	r0, [pc, #304]	; 11420 <__assert_fail@plt+0x4dc>
   112ec:	bl	10e54 <gettext@plt>
   112f0:	mov	r1, r0
   112f4:	ldr	r3, [pc, #296]	; 11424 <__assert_fail@plt+0x4e0>
   112f8:	ldr	r3, [r3]
   112fc:	mov	r2, r3
   11300:	mov	r0, r4
   11304:	bl	10e78 <fprintf@plt>
   11308:	b	11414 <__assert_fail@plt+0x4d0>
   1130c:	ldr	r0, [pc, #276]	; 11428 <__assert_fail@plt+0x4e4>
   11310:	bl	10e54 <gettext@plt>
   11314:	mov	r2, r0
   11318:	ldr	r3, [pc, #260]	; 11424 <__assert_fail@plt+0x4e0>
   1131c:	ldr	r3, [r3]
   11320:	mov	r1, r3
   11324:	mov	r0, r2
   11328:	bl	10cf8 <printf@plt>
   1132c:	ldr	r0, [pc, #248]	; 1142c <__assert_fail@plt+0x4e8>
   11330:	bl	10e54 <gettext@plt>
   11334:	mov	r2, r0
   11338:	ldr	r3, [pc, #240]	; 11430 <__assert_fail@plt+0x4ec>
   1133c:	ldr	r3, [r3]
   11340:	mov	r1, r3
   11344:	mov	r0, r2
   11348:	bl	10cc8 <fputs_unlocked@plt>
   1134c:	ldr	r0, [pc, #224]	; 11434 <__assert_fail@plt+0x4f0>
   11350:	bl	10e54 <gettext@plt>
   11354:	mov	r2, r0
   11358:	ldr	r3, [pc, #208]	; 11430 <__assert_fail@plt+0x4ec>
   1135c:	ldr	r3, [r3]
   11360:	mov	r1, r3
   11364:	mov	r0, r2
   11368:	bl	10cc8 <fputs_unlocked@plt>
   1136c:	ldr	r0, [pc, #196]	; 11438 <__assert_fail@plt+0x4f4>
   11370:	bl	10e54 <gettext@plt>
   11374:	mov	r2, r0
   11378:	ldr	r3, [pc, #176]	; 11430 <__assert_fail@plt+0x4ec>
   1137c:	ldr	r3, [r3]
   11380:	mov	r1, r3
   11384:	mov	r0, r2
   11388:	bl	10cc8 <fputs_unlocked@plt>
   1138c:	ldr	r0, [pc, #168]	; 1143c <__assert_fail@plt+0x4f8>
   11390:	bl	10e54 <gettext@plt>
   11394:	mov	r2, r0
   11398:	ldr	r3, [pc, #144]	; 11430 <__assert_fail@plt+0x4ec>
   1139c:	ldr	r3, [r3]
   113a0:	mov	r1, r3
   113a4:	mov	r0, r2
   113a8:	bl	10cc8 <fputs_unlocked@plt>
   113ac:	ldr	r0, [pc, #140]	; 11440 <__assert_fail@plt+0x4fc>
   113b0:	bl	10e54 <gettext@plt>
   113b4:	mov	r2, r0
   113b8:	ldr	r3, [pc, #112]	; 11430 <__assert_fail@plt+0x4ec>
   113bc:	ldr	r3, [r3]
   113c0:	mov	r1, r3
   113c4:	mov	r0, r2
   113c8:	bl	10cc8 <fputs_unlocked@plt>
   113cc:	ldr	r0, [pc, #112]	; 11444 <__assert_fail@plt+0x500>
   113d0:	bl	10e54 <gettext@plt>
   113d4:	mov	r2, r0
   113d8:	ldr	r3, [pc, #80]	; 11430 <__assert_fail@plt+0x4ec>
   113dc:	ldr	r3, [r3]
   113e0:	mov	r1, r3
   113e4:	mov	r0, r2
   113e8:	bl	10cc8 <fputs_unlocked@plt>
   113ec:	ldr	r0, [pc, #84]	; 11448 <__assert_fail@plt+0x504>
   113f0:	bl	10e54 <gettext@plt>
   113f4:	mov	r2, r0
   113f8:	ldr	r3, [pc, #48]	; 11430 <__assert_fail@plt+0x4ec>
   113fc:	ldr	r3, [r3]
   11400:	mov	r1, r3
   11404:	mov	r0, r2
   11408:	bl	10cc8 <fputs_unlocked@plt>
   1140c:	ldr	r0, [pc, #56]	; 1144c <__assert_fail@plt+0x508>
   11410:	bl	110a0 <__assert_fail@plt+0x15c>
   11414:	ldr	r0, [fp, #-16]
   11418:	bl	10e48 <exit@plt>
   1141c:	andeq	sp, r2, r0, asr r1
   11420:	andeq	sl, r1, r0, ror sp
   11424:	andeq	pc, r2, r4, ror r4	; <UNPREDICTABLE>
   11428:	muleq	r1, r8, sp
   1142c:			; <UNDEFINED> instruction: 0x0001adbc
   11430:	andeq	sp, r2, ip, asr r1
   11434:	andeq	sl, r1, ip, lsr #31
   11438:	ldrdeq	sl, [r1], -ip
   1143c:	andeq	fp, r1, r4, lsl r0
   11440:	andeq	fp, r1, ip, lsl #3
   11444:	andeq	fp, r1, r8, lsr r3
   11448:	ldrdeq	fp, [r1], -r4
   1144c:	andeq	fp, r1, ip, lsr #13
   11450:	push	{fp}		; (str fp, [sp, #-4]!)
   11454:	add	fp, sp, #0
   11458:	sub	sp, sp, #12
   1145c:	mov	r3, r0
   11460:	mov	r2, r1
   11464:	strb	r3, [fp, #-5]
   11468:	mov	r3, r2
   1146c:	strb	r3, [fp, #-6]
   11470:	ldrb	r2, [fp, #-5]
   11474:	ldrb	r3, [fp, #-6]
   11478:	cmp	r2, r3
   1147c:	moveq	r3, #1
   11480:	movne	r3, #0
   11484:	uxtb	r3, r3
   11488:	mov	r0, r3
   1148c:	add	sp, fp, #0
   11490:	pop	{fp}		; (ldr fp, [sp], #4)
   11494:	bx	lr
   11498:	push	{fp, lr}
   1149c:	add	fp, sp, #4
   114a0:	sub	sp, sp, #16
   114a4:	str	r0, [fp, #-16]
   114a8:	mov	r3, r1
   114ac:	strb	r3, [fp, #-17]	; 0xffffffef
   114b0:	ldr	r3, [fp, #-16]
   114b4:	cmp	r3, #11
   114b8:	ldrls	pc, [pc, r3, lsl #2]
   114bc:	b	116d0 <__assert_fail@plt+0x78c>
   114c0:	strdeq	r1, [r1], -r0
   114c4:	andeq	r1, r1, r8, lsl r5
   114c8:	andeq	r1, r1, r0, asr #10
   114cc:	andeq	r1, r1, r8, ror #10
   114d0:	muleq	r1, r0, r5
   114d4:			; <UNDEFINED> instruction: 0x000115b8
   114d8:	andeq	r1, r1, r0, ror #11
   114dc:	andeq	r1, r1, r8, lsl #12
   114e0:	andeq	r1, r1, r0, lsr r6
   114e4:	andeq	r1, r1, r8, asr r6
   114e8:	andeq	r1, r1, r0, lsl #13
   114ec:	andeq	r1, r1, r8, lsr #13
   114f0:	bl	10e3c <__ctype_b_loc@plt>
   114f4:	mov	r3, r0
   114f8:	ldr	r2, [r3]
   114fc:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11500:	lsl	r3, r3, #1
   11504:	add	r3, r2, r3
   11508:	ldrh	r3, [r3]
   1150c:	and	r3, r3, #8
   11510:	str	r3, [fp, #-8]
   11514:	b	116d4 <__assert_fail@plt+0x790>
   11518:	bl	10e3c <__ctype_b_loc@plt>
   1151c:	mov	r3, r0
   11520:	ldr	r2, [r3]
   11524:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11528:	lsl	r3, r3, #1
   1152c:	add	r3, r2, r3
   11530:	ldrh	r3, [r3]
   11534:	and	r3, r3, #1024	; 0x400
   11538:	str	r3, [fp, #-8]
   1153c:	b	116d4 <__assert_fail@plt+0x790>
   11540:	bl	10e3c <__ctype_b_loc@plt>
   11544:	mov	r3, r0
   11548:	ldr	r2, [r3]
   1154c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11550:	lsl	r3, r3, #1
   11554:	add	r3, r2, r3
   11558:	ldrh	r3, [r3]
   1155c:	and	r3, r3, #1
   11560:	str	r3, [fp, #-8]
   11564:	b	116d4 <__assert_fail@plt+0x790>
   11568:	bl	10e3c <__ctype_b_loc@plt>
   1156c:	mov	r3, r0
   11570:	ldr	r2, [r3]
   11574:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11578:	lsl	r3, r3, #1
   1157c:	add	r3, r2, r3
   11580:	ldrh	r3, [r3]
   11584:	and	r3, r3, #2
   11588:	str	r3, [fp, #-8]
   1158c:	b	116d4 <__assert_fail@plt+0x790>
   11590:	bl	10e3c <__ctype_b_loc@plt>
   11594:	mov	r3, r0
   11598:	ldr	r2, [r3]
   1159c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   115a0:	lsl	r3, r3, #1
   115a4:	add	r3, r2, r3
   115a8:	ldrh	r3, [r3]
   115ac:	and	r3, r3, #2048	; 0x800
   115b0:	str	r3, [fp, #-8]
   115b4:	b	116d4 <__assert_fail@plt+0x790>
   115b8:	bl	10e3c <__ctype_b_loc@plt>
   115bc:	mov	r3, r0
   115c0:	ldr	r2, [r3]
   115c4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   115c8:	lsl	r3, r3, #1
   115cc:	add	r3, r2, r3
   115d0:	ldrh	r3, [r3]
   115d4:	and	r3, r3, #32768	; 0x8000
   115d8:	str	r3, [fp, #-8]
   115dc:	b	116d4 <__assert_fail@plt+0x790>
   115e0:	bl	10e3c <__ctype_b_loc@plt>
   115e4:	mov	r3, r0
   115e8:	ldr	r2, [r3]
   115ec:	ldrb	r3, [fp, #-17]	; 0xffffffef
   115f0:	lsl	r3, r3, #1
   115f4:	add	r3, r2, r3
   115f8:	ldrh	r3, [r3]
   115fc:	and	r3, r3, #512	; 0x200
   11600:	str	r3, [fp, #-8]
   11604:	b	116d4 <__assert_fail@plt+0x790>
   11608:	bl	10e3c <__ctype_b_loc@plt>
   1160c:	mov	r3, r0
   11610:	ldr	r2, [r3]
   11614:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11618:	lsl	r3, r3, #1
   1161c:	add	r3, r2, r3
   11620:	ldrh	r3, [r3]
   11624:	and	r3, r3, #16384	; 0x4000
   11628:	str	r3, [fp, #-8]
   1162c:	b	116d4 <__assert_fail@plt+0x790>
   11630:	bl	10e3c <__ctype_b_loc@plt>
   11634:	mov	r3, r0
   11638:	ldr	r2, [r3]
   1163c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11640:	lsl	r3, r3, #1
   11644:	add	r3, r2, r3
   11648:	ldrh	r3, [r3]
   1164c:	and	r3, r3, #4
   11650:	str	r3, [fp, #-8]
   11654:	b	116d4 <__assert_fail@plt+0x790>
   11658:	bl	10e3c <__ctype_b_loc@plt>
   1165c:	mov	r3, r0
   11660:	ldr	r2, [r3]
   11664:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11668:	lsl	r3, r3, #1
   1166c:	add	r3, r2, r3
   11670:	ldrh	r3, [r3]
   11674:	and	r3, r3, #8192	; 0x2000
   11678:	str	r3, [fp, #-8]
   1167c:	b	116d4 <__assert_fail@plt+0x790>
   11680:	bl	10e3c <__ctype_b_loc@plt>
   11684:	mov	r3, r0
   11688:	ldr	r2, [r3]
   1168c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   11690:	lsl	r3, r3, #1
   11694:	add	r3, r2, r3
   11698:	ldrh	r3, [r3]
   1169c:	and	r3, r3, #256	; 0x100
   116a0:	str	r3, [fp, #-8]
   116a4:	b	116d4 <__assert_fail@plt+0x790>
   116a8:	bl	10e3c <__ctype_b_loc@plt>
   116ac:	mov	r3, r0
   116b0:	ldr	r2, [r3]
   116b4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   116b8:	lsl	r3, r3, #1
   116bc:	add	r3, r2, r3
   116c0:	ldrh	r3, [r3]
   116c4:	and	r3, r3, #4096	; 0x1000
   116c8:	str	r3, [fp, #-8]
   116cc:	b	116d4 <__assert_fail@plt+0x790>
   116d0:	bl	10f2c <abort@plt>
   116d4:	ldr	r3, [fp, #-8]
   116d8:	cmp	r3, #0
   116dc:	movne	r3, #1
   116e0:	moveq	r3, #0
   116e4:	uxtb	r3, r3
   116e8:	mov	r0, r3
   116ec:	sub	sp, fp, #4
   116f0:	pop	{fp, pc}
   116f4:	push	{fp, lr}
   116f8:	add	fp, sp, #4
   116fc:	sub	sp, sp, #8
   11700:	str	r0, [fp, #-8]
   11704:	ldr	r3, [fp, #-8]
   11708:	ldr	r3, [r3]
   1170c:	mov	r0, r3
   11710:	bl	14f98 <__assert_fail@plt+0x4054>
   11714:	ldr	r3, [fp, #-8]
   11718:	ldr	r3, [r3, #4]
   1171c:	mov	r0, r3
   11720:	bl	14f98 <__assert_fail@plt+0x4054>
   11724:	nop			; (mov r0, r0)
   11728:	sub	sp, fp, #4
   1172c:	pop	{fp, pc}
   11730:	push	{r4, r5, fp, lr}
   11734:	add	fp, sp, #12
   11738:	sub	sp, sp, #56	; 0x38
   1173c:	str	r0, [fp, #-40]	; 0xffffffd8
   11740:	str	r1, [fp, #-44]	; 0xffffffd4
   11744:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11748:	bl	10e60 <strlen@plt>
   1174c:	str	r0, [fp, #-28]	; 0xffffffe4
   11750:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11754:	bl	18010 <__assert_fail@plt+0x70cc>
   11758:	mov	r3, r0
   1175c:	mov	r2, r3
   11760:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11764:	str	r2, [r3]
   11768:	mov	r1, #1
   1176c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11770:	bl	18990 <__assert_fail@plt+0x7a4c>
   11774:	mov	r3, r0
   11778:	mov	r2, r3
   1177c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11780:	str	r2, [r3, #4]
   11784:	mov	r3, #0
   11788:	str	r3, [fp, #-16]
   1178c:	mov	r3, #0
   11790:	str	r3, [fp, #-20]	; 0xffffffec
   11794:	b	11b38 <__assert_fail@plt+0xbf4>
   11798:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1179c:	ldr	r3, [fp, #-20]	; 0xffffffec
   117a0:	add	r3, r2, r3
   117a4:	ldrb	r3, [r3]
   117a8:	cmp	r3, #92	; 0x5c
   117ac:	bne	11afc <__assert_fail@plt+0xbb8>
   117b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   117b4:	ldr	r2, [r3, #4]
   117b8:	ldr	r3, [fp, #-16]
   117bc:	add	r3, r2, r3
   117c0:	mov	r2, #1
   117c4:	strb	r2, [r3]
   117c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   117cc:	add	r3, r3, #1
   117d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   117d4:	add	r3, r2, r3
   117d8:	ldrb	r3, [r3]
   117dc:	cmp	r3, #98	; 0x62
   117e0:	beq	1186c <__assert_fail@plt+0x928>
   117e4:	cmp	r3, #98	; 0x62
   117e8:	bgt	1181c <__assert_fail@plt+0x8d8>
   117ec:	cmp	r3, #55	; 0x37
   117f0:	bgt	11808 <__assert_fail@plt+0x8c4>
   117f4:	cmp	r3, #48	; 0x30
   117f8:	bge	118b4 <__assert_fail@plt+0x970>
   117fc:	cmp	r3, #0
   11800:	beq	11a60 <__assert_fail@plt+0xb1c>
   11804:	b	11aac <__assert_fail@plt+0xb68>
   11808:	cmp	r3, #92	; 0x5c
   1180c:	beq	11854 <__assert_fail@plt+0x910>
   11810:	cmp	r3, #97	; 0x61
   11814:	beq	11860 <__assert_fail@plt+0x91c>
   11818:	b	11aac <__assert_fail@plt+0xb68>
   1181c:	cmp	r3, #114	; 0x72
   11820:	beq	11890 <__assert_fail@plt+0x94c>
   11824:	cmp	r3, #114	; 0x72
   11828:	bgt	11840 <__assert_fail@plt+0x8fc>
   1182c:	cmp	r3, #102	; 0x66
   11830:	beq	11878 <__assert_fail@plt+0x934>
   11834:	cmp	r3, #110	; 0x6e
   11838:	beq	11884 <__assert_fail@plt+0x940>
   1183c:	b	11aac <__assert_fail@plt+0xb68>
   11840:	cmp	r3, #116	; 0x74
   11844:	beq	1189c <__assert_fail@plt+0x958>
   11848:	cmp	r3, #118	; 0x76
   1184c:	beq	118a8 <__assert_fail@plt+0x964>
   11850:	b	11aac <__assert_fail@plt+0xb68>
   11854:	mov	r3, #92	; 0x5c
   11858:	strb	r3, [fp, #-21]	; 0xffffffeb
   1185c:	b	11acc <__assert_fail@plt+0xb88>
   11860:	mov	r3, #7
   11864:	strb	r3, [fp, #-21]	; 0xffffffeb
   11868:	b	11acc <__assert_fail@plt+0xb88>
   1186c:	mov	r3, #8
   11870:	strb	r3, [fp, #-21]	; 0xffffffeb
   11874:	b	11acc <__assert_fail@plt+0xb88>
   11878:	mov	r3, #12
   1187c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11880:	b	11acc <__assert_fail@plt+0xb88>
   11884:	mov	r3, #10
   11888:	strb	r3, [fp, #-21]	; 0xffffffeb
   1188c:	b	11acc <__assert_fail@plt+0xb88>
   11890:	mov	r3, #13
   11894:	strb	r3, [fp, #-21]	; 0xffffffeb
   11898:	b	11acc <__assert_fail@plt+0xb88>
   1189c:	mov	r3, #9
   118a0:	strb	r3, [fp, #-21]	; 0xffffffeb
   118a4:	b	11acc <__assert_fail@plt+0xb88>
   118a8:	mov	r3, #11
   118ac:	strb	r3, [fp, #-21]	; 0xffffffeb
   118b0:	b	11acc <__assert_fail@plt+0xb88>
   118b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   118b8:	add	r3, r3, #1
   118bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   118c0:	add	r3, r2, r3
   118c4:	ldrb	r3, [r3]
   118c8:	sub	r3, r3, #48	; 0x30
   118cc:	strb	r3, [fp, #-21]	; 0xffffffeb
   118d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   118d4:	add	r3, r3, #2
   118d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   118dc:	add	r3, r2, r3
   118e0:	ldrb	r3, [r3]
   118e4:	sub	r3, r3, #48	; 0x30
   118e8:	str	r3, [fp, #-32]	; 0xffffffe0
   118ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118f0:	cmp	r3, #0
   118f4:	blt	11ac8 <__assert_fail@plt+0xb84>
   118f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118fc:	cmp	r3, #7
   11900:	bgt	11ac8 <__assert_fail@plt+0xb84>
   11904:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11908:	lsl	r3, r3, #3
   1190c:	uxtb	r2, r3
   11910:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11914:	uxtb	r3, r3
   11918:	add	r3, r2, r3
   1191c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11920:	ldr	r3, [fp, #-20]	; 0xffffffec
   11924:	add	r3, r3, #1
   11928:	str	r3, [fp, #-20]	; 0xffffffec
   1192c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11930:	add	r3, r3, #2
   11934:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11938:	add	r3, r2, r3
   1193c:	ldrb	r3, [r3]
   11940:	sub	r3, r3, #48	; 0x30
   11944:	str	r3, [fp, #-32]	; 0xffffffe0
   11948:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1194c:	cmp	r3, #0
   11950:	blt	11ac8 <__assert_fail@plt+0xb84>
   11954:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11958:	cmp	r3, #7
   1195c:	bgt	11ac8 <__assert_fail@plt+0xb84>
   11960:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11964:	lsl	r2, r3, #3
   11968:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1196c:	add	r3, r2, r3
   11970:	cmp	r3, #255	; 0xff
   11974:	bgt	119a4 <__assert_fail@plt+0xa60>
   11978:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1197c:	lsl	r3, r3, #3
   11980:	uxtb	r2, r3
   11984:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11988:	uxtb	r3, r3
   1198c:	add	r3, r2, r3
   11990:	strb	r3, [fp, #-21]	; 0xffffffeb
   11994:	ldr	r3, [fp, #-20]	; 0xffffffec
   11998:	add	r3, r3, #1
   1199c:	str	r3, [fp, #-20]	; 0xffffffec
   119a0:	b	11ac8 <__assert_fail@plt+0xb84>
   119a4:	ldr	r0, [pc, #448]	; 11b6c <__assert_fail@plt+0xc28>
   119a8:	bl	10e54 <gettext@plt>
   119ac:	mov	r4, r0
   119b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   119b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   119b8:	add	r3, r2, r3
   119bc:	ldrb	r3, [r3]
   119c0:	mov	r5, r3
   119c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   119c8:	add	r3, r3, #1
   119cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   119d0:	add	r3, r2, r3
   119d4:	ldrb	r3, [r3]
   119d8:	mov	r1, r3
   119dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   119e0:	add	r3, r3, #2
   119e4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   119e8:	add	r3, r2, r3
   119ec:	ldrb	r3, [r3]
   119f0:	mov	r0, r3
   119f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   119f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119fc:	add	r3, r2, r3
   11a00:	ldrb	r3, [r3]
   11a04:	mov	ip, r3
   11a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a0c:	add	r3, r3, #1
   11a10:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11a14:	add	r3, r2, r3
   11a18:	ldrb	r3, [r3]
   11a1c:	mov	lr, r3
   11a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a24:	add	r3, r3, #2
   11a28:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11a2c:	add	r3, r2, r3
   11a30:	ldrb	r3, [r3]
   11a34:	str	r3, [sp, #16]
   11a38:	str	lr, [sp, #12]
   11a3c:	str	ip, [sp, #8]
   11a40:	str	r0, [sp, #4]
   11a44:	str	r1, [sp]
   11a48:	mov	r3, r5
   11a4c:	mov	r2, r4
   11a50:	mov	r1, #0
   11a54:	mov	r0, #0
   11a58:	bl	10df4 <error@plt>
   11a5c:	b	11ac8 <__assert_fail@plt+0xb84>
   11a60:	ldr	r0, [pc, #264]	; 11b70 <__assert_fail@plt+0xc2c>
   11a64:	bl	10e54 <gettext@plt>
   11a68:	mov	r3, r0
   11a6c:	mov	r2, r3
   11a70:	mov	r1, #0
   11a74:	mov	r0, #0
   11a78:	bl	10df4 <error@plt>
   11a7c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a80:	ldr	r2, [r3, #4]
   11a84:	ldr	r3, [fp, #-16]
   11a88:	add	r3, r2, r3
   11a8c:	mov	r2, #0
   11a90:	strb	r2, [r3]
   11a94:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a98:	sub	r3, r3, #1
   11a9c:	str	r3, [fp, #-20]	; 0xffffffec
   11aa0:	mov	r3, #92	; 0x5c
   11aa4:	strb	r3, [fp, #-21]	; 0xffffffeb
   11aa8:	b	11acc <__assert_fail@plt+0xb88>
   11aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ab0:	add	r3, r3, #1
   11ab4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11ab8:	add	r3, r2, r3
   11abc:	ldrb	r3, [r3]
   11ac0:	strb	r3, [fp, #-21]	; 0xffffffeb
   11ac4:	b	11acc <__assert_fail@plt+0xb88>
   11ac8:	nop			; (mov r0, r0)
   11acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ad0:	add	r3, r3, #1
   11ad4:	str	r3, [fp, #-20]	; 0xffffffec
   11ad8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11adc:	ldr	r2, [r3]
   11ae0:	ldr	r3, [fp, #-16]
   11ae4:	add	r1, r3, #1
   11ae8:	str	r1, [fp, #-16]
   11aec:	add	r3, r2, r3
   11af0:	ldrb	r2, [fp, #-21]	; 0xffffffeb
   11af4:	strb	r2, [r3]
   11af8:	b	11b2c <__assert_fail@plt+0xbe8>
   11afc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11b00:	ldr	r2, [r3]
   11b04:	ldr	r3, [fp, #-16]
   11b08:	add	r1, r3, #1
   11b0c:	str	r1, [fp, #-16]
   11b10:	add	r3, r2, r3
   11b14:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11b18:	ldr	r2, [fp, #-20]	; 0xffffffec
   11b1c:	add	r2, r1, r2
   11b20:	ldrb	r2, [r2]
   11b24:	strb	r2, [r3]
   11b28:	nop			; (mov r0, r0)
   11b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b30:	add	r3, r3, #1
   11b34:	str	r3, [fp, #-20]	; 0xffffffec
   11b38:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b40:	add	r3, r2, r3
   11b44:	ldrb	r3, [r3]
   11b48:	cmp	r3, #0
   11b4c:	bne	11798 <__assert_fail@plt+0x854>
   11b50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11b54:	ldr	r2, [fp, #-16]
   11b58:	str	r2, [r3, #8]
   11b5c:	mov	r3, #1
   11b60:	mov	r0, r3
   11b64:	sub	sp, fp, #12
   11b68:	pop	{r4, r5, fp, pc}
   11b6c:			; <UNDEFINED> instruction: 0x0001b6b0
   11b70:	andeq	fp, r1, r4, lsl r7
   11b74:	push	{fp, lr}
   11b78:	add	fp, sp, #4
   11b7c:	sub	sp, sp, #16
   11b80:	str	r0, [fp, #-16]
   11b84:	str	r1, [fp, #-20]	; 0xffffffec
   11b88:	mov	r3, #0
   11b8c:	str	r3, [fp, #-8]
   11b90:	b	11bf4 <__assert_fail@plt+0xcb0>
   11b94:	ldr	r2, [pc, #116]	; 11c10 <__assert_fail@plt+0xccc>
   11b98:	ldr	r3, [fp, #-8]
   11b9c:	ldr	r3, [r2, r3, lsl #2]
   11ba0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11ba4:	mov	r1, r3
   11ba8:	ldr	r0, [fp, #-16]
   11bac:	bl	10f20 <strncmp@plt>
   11bb0:	mov	r3, r0
   11bb4:	cmp	r3, #0
   11bb8:	bne	11be8 <__assert_fail@plt+0xca4>
   11bbc:	ldr	r2, [pc, #76]	; 11c10 <__assert_fail@plt+0xccc>
   11bc0:	ldr	r3, [fp, #-8]
   11bc4:	ldr	r3, [r2, r3, lsl #2]
   11bc8:	mov	r0, r3
   11bcc:	bl	10e60 <strlen@plt>
   11bd0:	mov	r2, r0
   11bd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11bd8:	cmp	r2, r3
   11bdc:	bne	11be8 <__assert_fail@plt+0xca4>
   11be0:	ldr	r3, [fp, #-8]
   11be4:	b	11c04 <__assert_fail@plt+0xcc0>
   11be8:	ldr	r3, [fp, #-8]
   11bec:	add	r3, r3, #1
   11bf0:	str	r3, [fp, #-8]
   11bf4:	ldr	r3, [fp, #-8]
   11bf8:	cmp	r3, #11
   11bfc:	bls	11b94 <__assert_fail@plt+0xc50>
   11c00:	ldr	r3, [pc, #12]	; 11c14 <__assert_fail@plt+0xcd0>
   11c04:	mov	r0, r3
   11c08:	sub	sp, fp, #4
   11c0c:	pop	{fp, pc}
   11c10:	andeq	sl, r1, ip, lsl #25
   11c14:	andeq	r2, r0, pc, lsl #14
   11c18:	push	{fp, lr}
   11c1c:	add	fp, sp, #4
   11c20:	sub	sp, sp, #16
   11c24:	mov	r3, r0
   11c28:	strb	r3, [fp, #-13]
   11c2c:	mov	r0, #5
   11c30:	bl	18010 <__assert_fail@plt+0x70cc>
   11c34:	mov	r3, r0
   11c38:	str	r3, [fp, #-8]
   11c3c:	bl	10e3c <__ctype_b_loc@plt>
   11c40:	mov	r3, r0
   11c44:	ldr	r2, [r3]
   11c48:	ldrb	r3, [fp, #-13]
   11c4c:	lsl	r3, r3, #1
   11c50:	add	r3, r2, r3
   11c54:	ldrh	r3, [r3]
   11c58:	and	r3, r3, #16384	; 0x4000
   11c5c:	cmp	r3, #0
   11c60:	beq	11c84 <__assert_fail@plt+0xd40>
   11c64:	ldr	r3, [fp, #-8]
   11c68:	ldrb	r2, [fp, #-13]
   11c6c:	strb	r2, [r3]
   11c70:	ldr	r3, [fp, #-8]
   11c74:	add	r3, r3, #1
   11c78:	mov	r2, #0
   11c7c:	strb	r2, [r3]
   11c80:	b	11c98 <__assert_fail@plt+0xd54>
   11c84:	ldrb	r3, [fp, #-13]
   11c88:	mov	r2, r3
   11c8c:	ldr	r1, [pc, #20]	; 11ca8 <__assert_fail@plt+0xd64>
   11c90:	ldr	r0, [fp, #-8]
   11c94:	bl	10f08 <sprintf@plt>
   11c98:	ldr	r3, [fp, #-8]
   11c9c:	mov	r0, r3
   11ca0:	sub	sp, fp, #4
   11ca4:	pop	{fp, pc}
   11ca8:	andeq	fp, r1, r8, asr r7
   11cac:	push	{fp, lr}
   11cb0:	add	fp, sp, #4
   11cb4:	sub	sp, sp, #32
   11cb8:	str	r0, [fp, #-32]	; 0xffffffe0
   11cbc:	str	r1, [fp, #-36]	; 0xffffffdc
   11cc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11cc4:	add	r3, r3, #1
   11cc8:	mov	r1, #4
   11ccc:	mov	r0, r3
   11cd0:	bl	181ec <__assert_fail@plt+0x72a8>
   11cd4:	mov	r3, r0
   11cd8:	str	r3, [fp, #-20]	; 0xffffffec
   11cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ce0:	str	r3, [fp, #-8]
   11ce4:	mov	r3, #0
   11ce8:	str	r3, [fp, #-12]
   11cec:	b	11e34 <__assert_fail@plt+0xef0>
   11cf0:	mov	r3, #0
   11cf4:	str	r3, [fp, #-16]
   11cf8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11cfc:	ldr	r3, [fp, #-12]
   11d00:	add	r3, r2, r3
   11d04:	ldrb	r3, [r3]
   11d08:	strb	r3, [fp, #-21]	; 0xffffffeb
   11d0c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11d10:	cmp	r3, #10
   11d14:	beq	11d8c <__assert_fail@plt+0xe48>
   11d18:	cmp	r3, #10
   11d1c:	bgt	11d3c <__assert_fail@plt+0xdf8>
   11d20:	cmp	r3, #8
   11d24:	beq	11d74 <__assert_fail@plt+0xe30>
   11d28:	cmp	r3, #8
   11d2c:	bgt	11da4 <__assert_fail@plt+0xe60>
   11d30:	cmp	r3, #7
   11d34:	beq	11d68 <__assert_fail@plt+0xe24>
   11d38:	b	11dbc <__assert_fail@plt+0xe78>
   11d3c:	cmp	r3, #12
   11d40:	beq	11d80 <__assert_fail@plt+0xe3c>
   11d44:	cmp	r3, #12
   11d48:	blt	11db0 <__assert_fail@plt+0xe6c>
   11d4c:	cmp	r3, #13
   11d50:	beq	11d98 <__assert_fail@plt+0xe54>
   11d54:	cmp	r3, #92	; 0x5c
   11d58:	bne	11dbc <__assert_fail@plt+0xe78>
   11d5c:	ldr	r3, [pc, #240]	; 11e54 <__assert_fail@plt+0xf10>
   11d60:	str	r3, [fp, #-16]
   11d64:	b	11e18 <__assert_fail@plt+0xed4>
   11d68:	ldr	r3, [pc, #232]	; 11e58 <__assert_fail@plt+0xf14>
   11d6c:	str	r3, [fp, #-16]
   11d70:	b	11e18 <__assert_fail@plt+0xed4>
   11d74:	ldr	r3, [pc, #224]	; 11e5c <__assert_fail@plt+0xf18>
   11d78:	str	r3, [fp, #-16]
   11d7c:	b	11e18 <__assert_fail@plt+0xed4>
   11d80:	ldr	r3, [pc, #216]	; 11e60 <__assert_fail@plt+0xf1c>
   11d84:	str	r3, [fp, #-16]
   11d88:	b	11e18 <__assert_fail@plt+0xed4>
   11d8c:	ldr	r3, [pc, #208]	; 11e64 <__assert_fail@plt+0xf20>
   11d90:	str	r3, [fp, #-16]
   11d94:	b	11e18 <__assert_fail@plt+0xed4>
   11d98:	ldr	r3, [pc, #200]	; 11e68 <__assert_fail@plt+0xf24>
   11d9c:	str	r3, [fp, #-16]
   11da0:	b	11e18 <__assert_fail@plt+0xed4>
   11da4:	ldr	r3, [pc, #192]	; 11e6c <__assert_fail@plt+0xf28>
   11da8:	str	r3, [fp, #-16]
   11dac:	b	11e18 <__assert_fail@plt+0xed4>
   11db0:	ldr	r3, [pc, #184]	; 11e70 <__assert_fail@plt+0xf2c>
   11db4:	str	r3, [fp, #-16]
   11db8:	b	11e18 <__assert_fail@plt+0xed4>
   11dbc:	bl	10e3c <__ctype_b_loc@plt>
   11dc0:	mov	r3, r0
   11dc4:	ldr	r2, [r3]
   11dc8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11dcc:	lsl	r3, r3, #1
   11dd0:	add	r3, r2, r3
   11dd4:	ldrh	r3, [r3]
   11dd8:	and	r3, r3, #16384	; 0x4000
   11ddc:	cmp	r3, #0
   11de0:	beq	11df8 <__assert_fail@plt+0xeb4>
   11de4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11de8:	strb	r3, [fp, #-28]	; 0xffffffe4
   11dec:	mov	r3, #0
   11df0:	strb	r3, [fp, #-27]	; 0xffffffe5
   11df4:	b	11e0c <__assert_fail@plt+0xec8>
   11df8:	ldrb	r2, [fp, #-21]	; 0xffffffeb
   11dfc:	sub	r3, fp, #28
   11e00:	ldr	r1, [pc, #108]	; 11e74 <__assert_fail@plt+0xf30>
   11e04:	mov	r0, r3
   11e08:	bl	10f08 <sprintf@plt>
   11e0c:	sub	r3, fp, #28
   11e10:	str	r3, [fp, #-16]
   11e14:	nop			; (mov r0, r0)
   11e18:	ldr	r1, [fp, #-16]
   11e1c:	ldr	r0, [fp, #-8]
   11e20:	bl	10d70 <stpcpy@plt>
   11e24:	str	r0, [fp, #-8]
   11e28:	ldr	r3, [fp, #-12]
   11e2c:	add	r3, r3, #1
   11e30:	str	r3, [fp, #-12]
   11e34:	ldr	r2, [fp, #-12]
   11e38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11e3c:	cmp	r2, r3
   11e40:	bcc	11cf0 <__assert_fail@plt+0xdac>
   11e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e48:	mov	r0, r3
   11e4c:	sub	sp, fp, #4
   11e50:	pop	{fp, pc}
   11e54:	andeq	fp, r1, r0, ror #14
   11e58:	andeq	fp, r1, r4, ror #14
   11e5c:	andeq	fp, r1, r8, ror #14
   11e60:	andeq	fp, r1, ip, ror #14
   11e64:	andeq	fp, r1, r0, ror r7
   11e68:	andeq	fp, r1, r4, ror r7
   11e6c:	andeq	fp, r1, r8, ror r7
   11e70:	andeq	fp, r1, ip, ror r7
   11e74:	andeq	fp, r1, r8, asr r7
   11e78:	push	{fp, lr}
   11e7c:	add	fp, sp, #4
   11e80:	sub	sp, sp, #16
   11e84:	str	r0, [fp, #-16]
   11e88:	mov	r3, r1
   11e8c:	strb	r3, [fp, #-17]	; 0xffffffef
   11e90:	mov	r0, #24
   11e94:	bl	18010 <__assert_fail@plt+0x70cc>
   11e98:	mov	r3, r0
   11e9c:	str	r3, [fp, #-8]
   11ea0:	ldr	r3, [fp, #-8]
   11ea4:	mov	r2, #0
   11ea8:	str	r2, [r3, #4]
   11eac:	ldr	r3, [fp, #-8]
   11eb0:	mov	r2, #0
   11eb4:	str	r2, [r3]
   11eb8:	ldr	r3, [fp, #-8]
   11ebc:	ldrb	r2, [fp, #-17]	; 0xffffffef
   11ec0:	strb	r2, [r3, #8]
   11ec4:	ldr	r3, [fp, #-16]
   11ec8:	ldr	r3, [r3, #4]
   11ecc:	cmp	r3, #0
   11ed0:	bne	11ee8 <__assert_fail@plt+0xfa4>
   11ed4:	ldr	r3, [pc, #52]	; 11f10 <__assert_fail@plt+0xfcc>
   11ed8:	ldr	r2, [pc, #52]	; 11f14 <__assert_fail@plt+0xfd0>
   11edc:	ldr	r1, [pc, #52]	; 11f18 <__assert_fail@plt+0xfd4>
   11ee0:	ldr	r0, [pc, #52]	; 11f1c <__assert_fail@plt+0xfd8>
   11ee4:	bl	10f44 <__assert_fail@plt>
   11ee8:	ldr	r3, [fp, #-16]
   11eec:	ldr	r3, [r3, #4]
   11ef0:	ldr	r2, [fp, #-8]
   11ef4:	str	r2, [r3, #4]
   11ef8:	ldr	r3, [fp, #-16]
   11efc:	ldr	r2, [fp, #-8]
   11f00:	str	r2, [r3, #4]
   11f04:	nop			; (mov r0, r0)
   11f08:	sub	sp, fp, #4
   11f0c:	pop	{fp, pc}
   11f10:	ldrdeq	fp, [r1], -r8
   11f14:	andeq	r0, r0, r9, lsl #5
   11f18:	andeq	fp, r1, r0, lsl #15
   11f1c:	andeq	fp, r1, ip, lsl #15
   11f20:	push	{fp, lr}
   11f24:	add	fp, sp, #4
   11f28:	sub	sp, sp, #32
   11f2c:	str	r0, [fp, #-24]	; 0xffffffe8
   11f30:	mov	r3, r1
   11f34:	strb	r3, [fp, #-25]	; 0xffffffe7
   11f38:	mov	r3, r2
   11f3c:	strb	r3, [fp, #-26]	; 0xffffffe6
   11f40:	ldrb	r2, [fp, #-26]	; 0xffffffe6
   11f44:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11f48:	cmp	r2, r3
   11f4c:	bcs	11fac <__assert_fail@plt+0x1068>
   11f50:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11f54:	mov	r0, r3
   11f58:	bl	11c18 <__assert_fail@plt+0xcd4>
   11f5c:	str	r0, [fp, #-8]
   11f60:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   11f64:	mov	r0, r3
   11f68:	bl	11c18 <__assert_fail@plt+0xcd4>
   11f6c:	str	r0, [fp, #-12]
   11f70:	ldr	r0, [pc, #196]	; 1203c <__assert_fail@plt+0x10f8>
   11f74:	bl	10e54 <gettext@plt>
   11f78:	mov	r2, r0
   11f7c:	ldr	r3, [fp, #-12]
   11f80:	str	r3, [sp]
   11f84:	ldr	r3, [fp, #-8]
   11f88:	mov	r1, #0
   11f8c:	mov	r0, #0
   11f90:	bl	10df4 <error@plt>
   11f94:	ldr	r0, [fp, #-8]
   11f98:	bl	14f98 <__assert_fail@plt+0x4054>
   11f9c:	ldr	r0, [fp, #-12]
   11fa0:	bl	14f98 <__assert_fail@plt+0x4054>
   11fa4:	mov	r3, #0
   11fa8:	b	12030 <__assert_fail@plt+0x10ec>
   11fac:	mov	r0, #24
   11fb0:	bl	18010 <__assert_fail@plt+0x70cc>
   11fb4:	mov	r3, r0
   11fb8:	str	r3, [fp, #-16]
   11fbc:	ldr	r3, [fp, #-16]
   11fc0:	mov	r2, #0
   11fc4:	str	r2, [r3, #4]
   11fc8:	ldr	r3, [fp, #-16]
   11fcc:	mov	r2, #1
   11fd0:	str	r2, [r3]
   11fd4:	ldr	r3, [fp, #-16]
   11fd8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   11fdc:	strb	r2, [r3, #8]
   11fe0:	ldr	r3, [fp, #-16]
   11fe4:	ldrb	r2, [fp, #-26]	; 0xffffffe6
   11fe8:	strb	r2, [r3, #9]
   11fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ff0:	ldr	r3, [r3, #4]
   11ff4:	cmp	r3, #0
   11ff8:	bne	12010 <__assert_fail@plt+0x10cc>
   11ffc:	ldr	r3, [pc, #60]	; 12040 <__assert_fail@plt+0x10fc>
   12000:	ldr	r2, [pc, #60]	; 12044 <__assert_fail@plt+0x1100>
   12004:	ldr	r1, [pc, #60]	; 12048 <__assert_fail@plt+0x1104>
   12008:	ldr	r0, [pc, #60]	; 1204c <__assert_fail@plt+0x1108>
   1200c:	bl	10f44 <__assert_fail@plt>
   12010:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12014:	ldr	r3, [r3, #4]
   12018:	ldr	r2, [fp, #-16]
   1201c:	str	r2, [r3, #4]
   12020:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12024:	ldr	r2, [fp, #-16]
   12028:	str	r2, [r3, #4]
   1202c:	mov	r3, #1
   12030:	mov	r0, r3
   12034:	sub	sp, fp, #4
   12038:	pop	{fp, pc}
   1203c:	muleq	r1, r8, r7
   12040:	andeq	fp, r1, ip, ror #27
   12044:	andeq	r0, r0, r7, lsr #5
   12048:	andeq	fp, r1, r0, lsl #15
   1204c:	andeq	fp, r1, ip, lsl #15
   12050:	push	{fp, lr}
   12054:	add	fp, sp, #4
   12058:	sub	sp, sp, #24
   1205c:	str	r0, [fp, #-16]
   12060:	str	r1, [fp, #-20]	; 0xffffffec
   12064:	str	r2, [fp, #-24]	; 0xffffffe8
   12068:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1206c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12070:	bl	11b74 <__assert_fail@plt+0xc30>
   12074:	str	r0, [fp, #-8]
   12078:	ldr	r3, [fp, #-8]
   1207c:	ldr	r2, [pc, #144]	; 12114 <__assert_fail@plt+0x11d0>
   12080:	cmp	r3, r2
   12084:	bne	12090 <__assert_fail@plt+0x114c>
   12088:	mov	r3, #0
   1208c:	b	12108 <__assert_fail@plt+0x11c4>
   12090:	mov	r0, #24
   12094:	bl	18010 <__assert_fail@plt+0x70cc>
   12098:	mov	r3, r0
   1209c:	str	r3, [fp, #-12]
   120a0:	ldr	r3, [fp, #-12]
   120a4:	mov	r2, #0
   120a8:	str	r2, [r3, #4]
   120ac:	ldr	r3, [fp, #-12]
   120b0:	mov	r2, #2
   120b4:	str	r2, [r3]
   120b8:	ldr	r3, [fp, #-12]
   120bc:	ldr	r2, [fp, #-8]
   120c0:	str	r2, [r3, #8]
   120c4:	ldr	r3, [fp, #-16]
   120c8:	ldr	r3, [r3, #4]
   120cc:	cmp	r3, #0
   120d0:	bne	120e8 <__assert_fail@plt+0x11a4>
   120d4:	ldr	r3, [pc, #60]	; 12118 <__assert_fail@plt+0x11d4>
   120d8:	ldr	r2, [pc, #60]	; 1211c <__assert_fail@plt+0x11d8>
   120dc:	ldr	r1, [pc, #60]	; 12120 <__assert_fail@plt+0x11dc>
   120e0:	ldr	r0, [pc, #60]	; 12124 <__assert_fail@plt+0x11e0>
   120e4:	bl	10f44 <__assert_fail@plt>
   120e8:	ldr	r3, [fp, #-16]
   120ec:	ldr	r3, [r3, #4]
   120f0:	ldr	r2, [fp, #-12]
   120f4:	str	r2, [r3, #4]
   120f8:	ldr	r3, [fp, #-16]
   120fc:	ldr	r2, [fp, #-12]
   12100:	str	r2, [r3, #4]
   12104:	mov	r3, #1
   12108:	mov	r0, r3
   1210c:	sub	sp, fp, #4
   12110:	pop	{fp, pc}
   12114:	andeq	r2, r0, pc, lsl #14
   12118:	strdeq	fp, [r1], -ip
   1211c:			; <UNDEFINED> instruction: 0x000002bd
   12120:	andeq	fp, r1, r0, lsl #15
   12124:	andeq	fp, r1, ip, lsl #15
   12128:	push	{fp, lr}
   1212c:	add	fp, sp, #4
   12130:	sub	sp, sp, #24
   12134:	str	r0, [fp, #-16]
   12138:	strd	r2, [fp, #-28]	; 0xffffffe4
   1213c:	mov	r3, r1
   12140:	strb	r3, [fp, #-17]	; 0xffffffef
   12144:	mov	r0, #24
   12148:	bl	18010 <__assert_fail@plt+0x70cc>
   1214c:	mov	r3, r0
   12150:	str	r3, [fp, #-8]
   12154:	ldr	r3, [fp, #-8]
   12158:	mov	r2, #0
   1215c:	str	r2, [r3, #4]
   12160:	ldr	r3, [fp, #-8]
   12164:	mov	r2, #4
   12168:	str	r2, [r3]
   1216c:	ldr	r3, [fp, #-8]
   12170:	ldrb	r2, [fp, #-17]	; 0xffffffef
   12174:	strb	r2, [r3, #8]
   12178:	ldr	r1, [fp, #-8]
   1217c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12180:	strd	r2, [r1, #16]
   12184:	ldr	r3, [fp, #-16]
   12188:	ldr	r3, [r3, #4]
   1218c:	cmp	r3, #0
   12190:	bne	121a8 <__assert_fail@plt+0x1264>
   12194:	ldr	r3, [pc, #52]	; 121d0 <__assert_fail@plt+0x128c>
   12198:	ldr	r2, [pc, #52]	; 121d4 <__assert_fail@plt+0x1290>
   1219c:	ldr	r1, [pc, #52]	; 121d8 <__assert_fail@plt+0x1294>
   121a0:	ldr	r0, [pc, #52]	; 121dc <__assert_fail@plt+0x1298>
   121a4:	bl	10f44 <__assert_fail@plt>
   121a8:	ldr	r3, [fp, #-16]
   121ac:	ldr	r3, [r3, #4]
   121b0:	ldr	r2, [fp, #-8]
   121b4:	str	r2, [r3, #4]
   121b8:	ldr	r3, [fp, #-16]
   121bc:	ldr	r2, [fp, #-8]
   121c0:	str	r2, [r3, #4]
   121c4:	nop			; (mov r0, r0)
   121c8:	sub	sp, fp, #4
   121cc:	pop	{fp, pc}
   121d0:	andeq	fp, r1, r0, lsl lr
   121d4:	ldrdeq	r0, [r0], -r1
   121d8:	andeq	fp, r1, r0, lsl #15
   121dc:	andeq	fp, r1, ip, lsl #15
   121e0:	push	{fp, lr}
   121e4:	add	fp, sp, #4
   121e8:	sub	sp, sp, #24
   121ec:	str	r0, [fp, #-16]
   121f0:	str	r1, [fp, #-20]	; 0xffffffec
   121f4:	str	r2, [fp, #-24]	; 0xffffffe8
   121f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   121fc:	cmp	r3, #1
   12200:	beq	1220c <__assert_fail@plt+0x12c8>
   12204:	mov	r3, #0
   12208:	b	12288 <__assert_fail@plt+0x1344>
   1220c:	mov	r0, #24
   12210:	bl	18010 <__assert_fail@plt+0x70cc>
   12214:	mov	r3, r0
   12218:	str	r3, [fp, #-8]
   1221c:	ldr	r3, [fp, #-8]
   12220:	mov	r2, #0
   12224:	str	r2, [r3, #4]
   12228:	ldr	r3, [fp, #-8]
   1222c:	mov	r2, #3
   12230:	str	r2, [r3]
   12234:	ldr	r3, [fp, #-20]	; 0xffffffec
   12238:	ldrb	r2, [r3]
   1223c:	ldr	r3, [fp, #-8]
   12240:	strb	r2, [r3, #8]
   12244:	ldr	r3, [fp, #-16]
   12248:	ldr	r3, [r3, #4]
   1224c:	cmp	r3, #0
   12250:	bne	12268 <__assert_fail@plt+0x1324>
   12254:	ldr	r3, [pc, #56]	; 12294 <__assert_fail@plt+0x1350>
   12258:	ldr	r2, [pc, #56]	; 12298 <__assert_fail@plt+0x1354>
   1225c:	ldr	r1, [pc, #56]	; 1229c <__assert_fail@plt+0x1358>
   12260:	ldr	r0, [pc, #56]	; 122a0 <__assert_fail@plt+0x135c>
   12264:	bl	10f44 <__assert_fail@plt>
   12268:	ldr	r3, [fp, #-16]
   1226c:	ldr	r3, [r3, #4]
   12270:	ldr	r2, [fp, #-8]
   12274:	str	r2, [r3, #4]
   12278:	ldr	r3, [fp, #-16]
   1227c:	ldr	r2, [fp, #-8]
   12280:	str	r2, [r3, #4]
   12284:	mov	r3, #1
   12288:	mov	r0, r3
   1228c:	sub	sp, fp, #4
   12290:	pop	{fp, pc}
   12294:	andeq	fp, r1, r8, lsr #28
   12298:	andeq	r0, r0, r7, ror #5
   1229c:	andeq	fp, r1, r0, lsl #15
   122a0:	andeq	fp, r1, ip, lsl #15
   122a4:	push	{fp}		; (str fp, [sp, #-4]!)
   122a8:	add	fp, sp, #0
   122ac:	sub	sp, sp, #28
   122b0:	str	r0, [fp, #-16]
   122b4:	str	r1, [fp, #-20]	; 0xffffffec
   122b8:	str	r3, [fp, #-28]	; 0xffffffe4
   122bc:	mov	r3, r2
   122c0:	strb	r3, [fp, #-21]	; 0xffffffeb
   122c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   122c8:	str	r3, [fp, #-8]
   122cc:	b	1237c <__assert_fail@plt+0x1438>
   122d0:	ldr	r3, [fp, #-16]
   122d4:	ldr	r2, [r3]
   122d8:	ldr	r3, [fp, #-8]
   122dc:	add	r3, r2, r3
   122e0:	ldrb	r3, [r3]
   122e4:	ldrb	r2, [fp, #-21]	; 0xffffffeb
   122e8:	cmp	r2, r3
   122ec:	bne	12370 <__assert_fail@plt+0x142c>
   122f0:	ldr	r3, [fp, #-16]
   122f4:	ldr	r2, [r3]
   122f8:	ldr	r3, [fp, #-8]
   122fc:	add	r3, r3, #1
   12300:	add	r3, r2, r3
   12304:	ldrb	r3, [r3]
   12308:	cmp	r3, #93	; 0x5d
   1230c:	bne	12370 <__assert_fail@plt+0x142c>
   12310:	ldr	r3, [fp, #-16]
   12314:	ldr	r2, [r3, #4]
   12318:	ldr	r3, [fp, #-8]
   1231c:	add	r3, r2, r3
   12320:	ldrb	r3, [r3]
   12324:	eor	r3, r3, #1
   12328:	uxtb	r3, r3
   1232c:	cmp	r3, #0
   12330:	beq	12370 <__assert_fail@plt+0x142c>
   12334:	ldr	r3, [fp, #-16]
   12338:	ldr	r2, [r3, #4]
   1233c:	ldr	r3, [fp, #-8]
   12340:	add	r3, r3, #1
   12344:	add	r3, r2, r3
   12348:	ldrb	r3, [r3]
   1234c:	eor	r3, r3, #1
   12350:	uxtb	r3, r3
   12354:	cmp	r3, #0
   12358:	beq	12370 <__assert_fail@plt+0x142c>
   1235c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12360:	ldr	r2, [fp, #-8]
   12364:	str	r2, [r3]
   12368:	mov	r3, #1
   1236c:	b	12398 <__assert_fail@plt+0x1454>
   12370:	ldr	r3, [fp, #-8]
   12374:	add	r3, r3, #1
   12378:	str	r3, [fp, #-8]
   1237c:	ldr	r3, [fp, #-16]
   12380:	ldr	r3, [r3, #8]
   12384:	sub	r2, r3, #1
   12388:	ldr	r3, [fp, #-8]
   1238c:	cmp	r2, r3
   12390:	bhi	122d0 <__assert_fail@plt+0x138c>
   12394:	mov	r3, #0
   12398:	mov	r0, r3
   1239c:	add	sp, fp, #0
   123a0:	pop	{fp}		; (ldr fp, [sp], #4)
   123a4:	bx	lr
   123a8:	push	{r4, fp, lr}
   123ac:	add	fp, sp, #8
   123b0:	sub	sp, sp, #52	; 0x34
   123b4:	str	r0, [fp, #-40]	; 0xffffffd8
   123b8:	str	r1, [fp, #-44]	; 0xffffffd4
   123bc:	str	r2, [fp, #-48]	; 0xffffffd0
   123c0:	str	r3, [fp, #-52]	; 0xffffffcc
   123c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   123c8:	add	r2, r3, #1
   123cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   123d0:	ldr	r3, [r3, #8]
   123d4:	cmp	r2, r3
   123d8:	bcc	123f0 <__assert_fail@plt+0x14ac>
   123dc:	ldr	r3, [pc, #504]	; 125dc <__assert_fail@plt+0x1698>
   123e0:	mov	r2, #784	; 0x310
   123e4:	ldr	r1, [pc, #500]	; 125e0 <__assert_fail@plt+0x169c>
   123e8:	ldr	r0, [pc, #500]	; 125e4 <__assert_fail@plt+0x16a0>
   123ec:	bl	10f44 <__assert_fail@plt>
   123f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   123f4:	add	r3, r3, #1
   123f8:	mov	r2, #42	; 0x2a
   123fc:	mov	r1, r3
   12400:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12404:	bl	11240 <__assert_fail@plt+0x2fc>
   12408:	mov	r3, r0
   1240c:	eor	r3, r3, #1
   12410:	uxtb	r3, r3
   12414:	cmp	r3, #0
   12418:	beq	12424 <__assert_fail@plt+0x14e0>
   1241c:	mvn	r3, #0
   12420:	b	125d0 <__assert_fail@plt+0x168c>
   12424:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12428:	add	r3, r3, #2
   1242c:	str	r3, [fp, #-16]
   12430:	b	12594 <__assert_fail@plt+0x1650>
   12434:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12438:	ldr	r2, [r3]
   1243c:	ldr	r3, [fp, #-16]
   12440:	add	r3, r2, r3
   12444:	ldrb	r3, [r3]
   12448:	cmp	r3, #93	; 0x5d
   1244c:	bne	12588 <__assert_fail@plt+0x1644>
   12450:	ldr	r2, [fp, #-16]
   12454:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12458:	sub	r3, r2, r3
   1245c:	sub	r3, r3, #2
   12460:	str	r3, [fp, #-20]	; 0xffffffec
   12464:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12468:	ldr	r2, [r3]
   1246c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12470:	add	r3, r2, r3
   12474:	ldrb	r2, [r3]
   12478:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1247c:	strb	r2, [r3]
   12480:	ldr	r3, [fp, #-20]	; 0xffffffec
   12484:	cmp	r3, #0
   12488:	bne	124a0 <__assert_fail@plt+0x155c>
   1248c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12490:	mov	r2, #0
   12494:	mov	r3, #0
   12498:	strd	r2, [r1]
   1249c:	b	12574 <__assert_fail@plt+0x1630>
   124a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   124a4:	ldr	r2, [r3]
   124a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   124ac:	add	r3, r3, #2
   124b0:	add	r3, r2, r3
   124b4:	str	r3, [fp, #-24]	; 0xffffffe8
   124b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124bc:	ldrb	r3, [r3]
   124c0:	cmp	r3, #48	; 0x30
   124c4:	bne	124d0 <__assert_fail@plt+0x158c>
   124c8:	mov	r2, #8
   124cc:	b	124d4 <__assert_fail@plt+0x1590>
   124d0:	mov	r2, #10
   124d4:	sub	r1, fp, #32
   124d8:	mov	r3, #0
   124dc:	str	r3, [sp]
   124e0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   124e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   124e8:	bl	18d84 <__assert_fail@plt+0x7e40>
   124ec:	mov	r3, r0
   124f0:	cmp	r3, #0
   124f4:	bne	1252c <__assert_fail@plt+0x15e8>
   124f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   124fc:	ldrd	r2, [r3]
   12500:	mvn	r0, #0
   12504:	mvn	r1, #0
   12508:	cmp	r3, r1
   1250c:	cmpeq	r2, r0
   12510:	beq	1252c <__assert_fail@plt+0x15e8>
   12514:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1251c:	add	r2, r2, r3
   12520:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12524:	cmp	r2, r3
   12528:	beq	12574 <__assert_fail@plt+0x1630>
   1252c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12530:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12534:	bl	11cac <__assert_fail@plt+0xd68>
   12538:	str	r0, [fp, #-28]	; 0xffffffe4
   1253c:	ldr	r0, [pc, #164]	; 125e8 <__assert_fail@plt+0x16a4>
   12540:	bl	10e54 <gettext@plt>
   12544:	mov	r4, r0
   12548:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1254c:	bl	17754 <__assert_fail@plt+0x6810>
   12550:	mov	r3, r0
   12554:	mov	r2, r4
   12558:	mov	r1, #0
   1255c:	mov	r0, #0
   12560:	bl	10df4 <error@plt>
   12564:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12568:	bl	14f98 <__assert_fail@plt+0x4054>
   1256c:	mvn	r3, #1
   12570:	b	125d0 <__assert_fail@plt+0x168c>
   12574:	ldr	r3, [fp, #4]
   12578:	ldr	r2, [fp, #-16]
   1257c:	str	r2, [r3]
   12580:	mov	r3, #0
   12584:	b	125d0 <__assert_fail@plt+0x168c>
   12588:	ldr	r3, [fp, #-16]
   1258c:	add	r3, r3, #1
   12590:	str	r3, [fp, #-16]
   12594:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12598:	ldr	r2, [r3, #8]
   1259c:	ldr	r3, [fp, #-16]
   125a0:	cmp	r2, r3
   125a4:	bls	125cc <__assert_fail@plt+0x1688>
   125a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   125ac:	ldr	r2, [r3, #4]
   125b0:	ldr	r3, [fp, #-16]
   125b4:	add	r3, r2, r3
   125b8:	ldrb	r3, [r3]
   125bc:	eor	r3, r3, #1
   125c0:	uxtb	r3, r3
   125c4:	cmp	r3, #0
   125c8:	bne	12434 <__assert_fail@plt+0x14f0>
   125cc:	mvn	r3, #0
   125d0:	mov	r0, r3
   125d4:	sub	sp, fp, #8
   125d8:	pop	{r4, fp, pc}
   125dc:	andeq	fp, r1, ip, lsr lr
   125e0:	andeq	fp, r1, r0, lsl #15
   125e4:	ldrdeq	fp, [r1], -ip
   125e8:	strdeq	fp, [r1], -r4
   125ec:	push	{fp, lr}
   125f0:	add	fp, sp, #4
   125f4:	sub	sp, sp, #16
   125f8:	str	r0, [fp, #-16]
   125fc:	str	r1, [fp, #-20]	; 0xffffffec
   12600:	mov	r2, #42	; 0x2a
   12604:	ldr	r1, [fp, #-20]	; 0xffffffec
   12608:	ldr	r0, [fp, #-16]
   1260c:	bl	11240 <__assert_fail@plt+0x2fc>
   12610:	mov	r3, r0
   12614:	eor	r3, r3, #1
   12618:	uxtb	r3, r3
   1261c:	cmp	r3, #0
   12620:	beq	1262c <__assert_fail@plt+0x16e8>
   12624:	mov	r3, #0
   12628:	b	126c0 <__assert_fail@plt+0x177c>
   1262c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12630:	add	r3, r3, #1
   12634:	str	r3, [fp, #-8]
   12638:	b	126a8 <__assert_fail@plt+0x1764>
   1263c:	ldr	r3, [fp, #-16]
   12640:	ldr	r2, [r3]
   12644:	ldr	r3, [fp, #-8]
   12648:	add	r3, r2, r3
   1264c:	ldrb	r3, [r3]
   12650:	mov	r0, r3
   12654:	bl	11078 <__assert_fail@plt+0x134>
   12658:	mov	r3, r0
   1265c:	sub	r3, r3, #48	; 0x30
   12660:	cmp	r3, #9
   12664:	bhi	12684 <__assert_fail@plt+0x1740>
   12668:	ldr	r3, [fp, #-16]
   1266c:	ldr	r2, [r3, #4]
   12670:	ldr	r3, [fp, #-8]
   12674:	add	r3, r2, r3
   12678:	ldrb	r3, [r3]
   1267c:	cmp	r3, #0
   12680:	beq	1269c <__assert_fail@plt+0x1758>
   12684:	mov	r2, #93	; 0x5d
   12688:	ldr	r1, [fp, #-8]
   1268c:	ldr	r0, [fp, #-16]
   12690:	bl	11240 <__assert_fail@plt+0x2fc>
   12694:	mov	r3, r0
   12698:	b	126c0 <__assert_fail@plt+0x177c>
   1269c:	ldr	r3, [fp, #-8]
   126a0:	add	r3, r3, #1
   126a4:	str	r3, [fp, #-8]
   126a8:	ldr	r3, [fp, #-16]
   126ac:	ldr	r2, [r3, #8]
   126b0:	ldr	r3, [fp, #-8]
   126b4:	cmp	r2, r3
   126b8:	bhi	1263c <__assert_fail@plt+0x16f8>
   126bc:	mov	r3, #0
   126c0:	mov	r0, r3
   126c4:	sub	sp, fp, #4
   126c8:	pop	{fp, pc}
   126cc:	push	{r4, fp, lr}
   126d0:	add	fp, sp, #8
   126d4:	sub	sp, sp, #76	; 0x4c
   126d8:	str	r0, [fp, #-72]	; 0xffffffb8
   126dc:	str	r1, [fp, #-76]	; 0xffffffb4
   126e0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   126e4:	ldr	r3, [r3]
   126e8:	str	r3, [fp, #-24]	; 0xffffffe8
   126ec:	mov	r3, #0
   126f0:	str	r3, [fp, #-16]
   126f4:	b	12aa0 <__assert_fail@plt+0x1b5c>
   126f8:	mov	r2, #91	; 0x5b
   126fc:	ldr	r1, [fp, #-16]
   12700:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12704:	bl	11240 <__assert_fail@plt+0x2fc>
   12708:	mov	r3, r0
   1270c:	cmp	r3, #0
   12710:	beq	129f8 <__assert_fail@plt+0x1ab4>
   12714:	mov	r3, #1
   12718:	strb	r3, [fp, #-17]	; 0xffffffef
   1271c:	ldr	r3, [fp, #-16]
   12720:	add	r3, r3, #1
   12724:	mov	r2, #58	; 0x3a
   12728:	mov	r1, r3
   1272c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12730:	bl	11240 <__assert_fail@plt+0x2fc>
   12734:	mov	r3, r0
   12738:	cmp	r3, #0
   1273c:	bne	12764 <__assert_fail@plt+0x1820>
   12740:	ldr	r3, [fp, #-16]
   12744:	add	r3, r3, #1
   12748:	mov	r2, #61	; 0x3d
   1274c:	mov	r1, r3
   12750:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12754:	bl	11240 <__assert_fail@plt+0x2fc>
   12758:	mov	r3, r0
   1275c:	cmp	r3, #0
   12760:	beq	12970 <__assert_fail@plt+0x1a2c>
   12764:	ldr	r3, [fp, #-16]
   12768:	add	r1, r3, #2
   1276c:	ldr	r3, [fp, #-16]
   12770:	add	r3, r3, #1
   12774:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12778:	add	r3, r2, r3
   1277c:	ldrb	r2, [r3]
   12780:	sub	r3, fp, #64	; 0x40
   12784:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12788:	bl	122a4 <__assert_fail@plt+0x1360>
   1278c:	mov	r3, r0
   12790:	cmp	r3, #0
   12794:	beq	12970 <__assert_fail@plt+0x1a2c>
   12798:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1279c:	ldr	r3, [fp, #-16]
   127a0:	sub	r3, r2, r3
   127a4:	sub	r3, r3, #2
   127a8:	str	r3, [fp, #-32]	; 0xffffffe0
   127ac:	ldr	r3, [fp, #-16]
   127b0:	add	r3, r3, #2
   127b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127b8:	add	r3, r2, r3
   127bc:	str	r3, [fp, #-36]	; 0xffffffdc
   127c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   127c4:	cmp	r3, #0
   127c8:	bne	1282c <__assert_fail@plt+0x18e8>
   127cc:	ldr	r3, [fp, #-16]
   127d0:	add	r3, r3, #1
   127d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127d8:	add	r3, r2, r3
   127dc:	ldrb	r3, [r3]
   127e0:	cmp	r3, #58	; 0x3a
   127e4:	bne	12808 <__assert_fail@plt+0x18c4>
   127e8:	ldr	r0, [pc, #792]	; 12b08 <__assert_fail@plt+0x1bc4>
   127ec:	bl	10e54 <gettext@plt>
   127f0:	mov	r3, r0
   127f4:	mov	r2, r3
   127f8:	mov	r1, #0
   127fc:	mov	r0, #0
   12800:	bl	10df4 <error@plt>
   12804:	b	12824 <__assert_fail@plt+0x18e0>
   12808:	ldr	r0, [pc, #764]	; 12b0c <__assert_fail@plt+0x1bc8>
   1280c:	bl	10e54 <gettext@plt>
   12810:	mov	r3, r0
   12814:	mov	r2, r3
   12818:	mov	r1, #0
   1281c:	mov	r0, #0
   12820:	bl	10df4 <error@plt>
   12824:	mov	r3, #0
   12828:	b	12afc <__assert_fail@plt+0x1bb8>
   1282c:	ldr	r3, [fp, #-16]
   12830:	add	r3, r3, #1
   12834:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12838:	add	r3, r2, r3
   1283c:	ldrb	r3, [r3]
   12840:	cmp	r3, #58	; 0x3a
   12844:	bne	128d4 <__assert_fail@plt+0x1990>
   12848:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1284c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12850:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12854:	bl	12050 <__assert_fail@plt+0x110c>
   12858:	mov	r3, r0
   1285c:	eor	r3, r3, #1
   12860:	uxtb	r3, r3
   12864:	cmp	r3, #0
   12868:	beq	12954 <__assert_fail@plt+0x1a10>
   1286c:	ldr	r3, [fp, #-16]
   12870:	add	r3, r3, #2
   12874:	mov	r1, r3
   12878:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1287c:	bl	125ec <__assert_fail@plt+0x16a8>
   12880:	mov	r3, r0
   12884:	cmp	r3, #0
   12888:	bne	12964 <__assert_fail@plt+0x1a20>
   1288c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12890:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12894:	bl	11cac <__assert_fail@plt+0xd68>
   12898:	str	r0, [fp, #-40]	; 0xffffffd8
   1289c:	ldr	r0, [pc, #620]	; 12b10 <__assert_fail@plt+0x1bcc>
   128a0:	bl	10e54 <gettext@plt>
   128a4:	mov	r4, r0
   128a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   128ac:	bl	17754 <__assert_fail@plt+0x6810>
   128b0:	mov	r3, r0
   128b4:	mov	r2, r4
   128b8:	mov	r1, #0
   128bc:	mov	r0, #0
   128c0:	bl	10df4 <error@plt>
   128c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   128c8:	bl	14f98 <__assert_fail@plt+0x4054>
   128cc:	mov	r3, #0
   128d0:	b	12afc <__assert_fail@plt+0x1bb8>
   128d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   128d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   128dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128e0:	bl	121e0 <__assert_fail@plt+0x129c>
   128e4:	mov	r3, r0
   128e8:	eor	r3, r3, #1
   128ec:	uxtb	r3, r3
   128f0:	cmp	r3, #0
   128f4:	beq	12954 <__assert_fail@plt+0x1a10>
   128f8:	ldr	r3, [fp, #-16]
   128fc:	add	r3, r3, #2
   12900:	mov	r1, r3
   12904:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12908:	bl	125ec <__assert_fail@plt+0x16a8>
   1290c:	mov	r3, r0
   12910:	cmp	r3, #0
   12914:	bne	1296c <__assert_fail@plt+0x1a28>
   12918:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1291c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12920:	bl	11cac <__assert_fail@plt+0xd68>
   12924:	str	r0, [fp, #-44]	; 0xffffffd4
   12928:	ldr	r0, [pc, #484]	; 12b14 <__assert_fail@plt+0x1bd0>
   1292c:	bl	10e54 <gettext@plt>
   12930:	mov	r2, r0
   12934:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12938:	mov	r1, #0
   1293c:	mov	r0, #0
   12940:	bl	10df4 <error@plt>
   12944:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12948:	bl	14f98 <__assert_fail@plt+0x4054>
   1294c:	mov	r3, #0
   12950:	b	12afc <__assert_fail@plt+0x1bb8>
   12954:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12958:	add	r3, r3, #2
   1295c:	str	r3, [fp, #-16]
   12960:	b	12aa0 <__assert_fail@plt+0x1b5c>
   12964:	nop			; (mov r0, r0)
   12968:	b	12970 <__assert_fail@plt+0x1a2c>
   1296c:	nop			; (mov r0, r0)
   12970:	ldr	r3, [fp, #-16]
   12974:	add	r1, r3, #1
   12978:	sub	r0, fp, #60	; 0x3c
   1297c:	sub	r2, fp, #49	; 0x31
   12980:	sub	r3, fp, #48	; 0x30
   12984:	str	r3, [sp]
   12988:	mov	r3, r0
   1298c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12990:	bl	123a8 <__assert_fail@plt+0x1464>
   12994:	str	r0, [fp, #-28]	; 0xffffffe4
   12998:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1299c:	cmp	r3, #0
   129a0:	bne	129c4 <__assert_fail@plt+0x1a80>
   129a4:	ldrb	r1, [fp, #-49]	; 0xffffffcf
   129a8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   129ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   129b0:	bl	12128 <__assert_fail@plt+0x11e4>
   129b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   129b8:	add	r3, r3, #1
   129bc:	str	r3, [fp, #-16]
   129c0:	b	129e4 <__assert_fail@plt+0x1aa0>
   129c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   129c8:	cmn	r3, #1
   129cc:	bne	129dc <__assert_fail@plt+0x1a98>
   129d0:	mov	r3, #0
   129d4:	strb	r3, [fp, #-17]	; 0xffffffef
   129d8:	b	129e4 <__assert_fail@plt+0x1aa0>
   129dc:	mov	r3, #0
   129e0:	b	12afc <__assert_fail@plt+0x1bb8>
   129e4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   129e8:	cmp	r3, #0
   129ec:	beq	129f8 <__assert_fail@plt+0x1ab4>
   129f0:	nop			; (mov r0, r0)
   129f4:	b	12aa0 <__assert_fail@plt+0x1b5c>
   129f8:	ldr	r3, [fp, #-16]
   129fc:	add	r3, r3, #1
   12a00:	mov	r2, #45	; 0x2d
   12a04:	mov	r1, r3
   12a08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a0c:	bl	11240 <__assert_fail@plt+0x2fc>
   12a10:	mov	r3, r0
   12a14:	cmp	r3, #0
   12a18:	beq	12a78 <__assert_fail@plt+0x1b34>
   12a1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a20:	ldr	r3, [fp, #-16]
   12a24:	add	r3, r2, r3
   12a28:	ldrb	r1, [r3]
   12a2c:	ldr	r3, [fp, #-16]
   12a30:	add	r3, r3, #2
   12a34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a38:	add	r3, r2, r3
   12a3c:	ldrb	r3, [r3]
   12a40:	mov	r2, r3
   12a44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a48:	bl	11f20 <__assert_fail@plt+0xfdc>
   12a4c:	mov	r3, r0
   12a50:	eor	r3, r3, #1
   12a54:	uxtb	r3, r3
   12a58:	cmp	r3, #0
   12a5c:	beq	12a68 <__assert_fail@plt+0x1b24>
   12a60:	mov	r3, #0
   12a64:	b	12afc <__assert_fail@plt+0x1bb8>
   12a68:	ldr	r3, [fp, #-16]
   12a6c:	add	r3, r3, #3
   12a70:	str	r3, [fp, #-16]
   12a74:	b	12aa0 <__assert_fail@plt+0x1b5c>
   12a78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a7c:	ldr	r3, [fp, #-16]
   12a80:	add	r3, r2, r3
   12a84:	ldrb	r3, [r3]
   12a88:	mov	r1, r3
   12a8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a90:	bl	11e78 <__assert_fail@plt+0xf34>
   12a94:	ldr	r3, [fp, #-16]
   12a98:	add	r3, r3, #1
   12a9c:	str	r3, [fp, #-16]
   12aa0:	ldr	r3, [fp, #-16]
   12aa4:	add	r2, r3, #2
   12aa8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12aac:	ldr	r3, [r3, #8]
   12ab0:	cmp	r2, r3
   12ab4:	bcc	126f8 <__assert_fail@plt+0x17b4>
   12ab8:	b	12ae4 <__assert_fail@plt+0x1ba0>
   12abc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ac0:	ldr	r3, [fp, #-16]
   12ac4:	add	r3, r2, r3
   12ac8:	ldrb	r3, [r3]
   12acc:	mov	r1, r3
   12ad0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ad4:	bl	11e78 <__assert_fail@plt+0xf34>
   12ad8:	ldr	r3, [fp, #-16]
   12adc:	add	r3, r3, #1
   12ae0:	str	r3, [fp, #-16]
   12ae4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12ae8:	ldr	r2, [r3, #8]
   12aec:	ldr	r3, [fp, #-16]
   12af0:	cmp	r2, r3
   12af4:	bhi	12abc <__assert_fail@plt+0x1b78>
   12af8:	mov	r3, #1
   12afc:	mov	r0, r3
   12b00:	sub	sp, fp, #8
   12b04:	pop	{r4, fp, pc}
   12b08:	andeq	fp, r1, r0, lsr #16
   12b0c:	andeq	fp, r1, r4, asr #16
   12b10:	andeq	fp, r1, r0, ror r8
   12b14:	andeq	fp, r1, ip, lsl #17
   12b18:	push	{fp}		; (str fp, [sp, #-4]!)
   12b1c:	add	fp, sp, #0
   12b20:	sub	sp, sp, #12
   12b24:	str	r0, [fp, #-8]
   12b28:	ldr	r3, [fp, #-8]
   12b2c:	ldr	r3, [r3, #4]
   12b30:	ldr	r2, [r3, #4]
   12b34:	ldr	r3, [fp, #-8]
   12b38:	str	r2, [r3, #4]
   12b3c:	ldr	r1, [fp, #-8]
   12b40:	mvn	r2, #0
   12b44:	mvn	r3, #0
   12b48:	strd	r2, [r1, #8]
   12b4c:	nop			; (mov r0, r0)
   12b50:	add	sp, fp, #0
   12b54:	pop	{fp}		; (ldr fp, [sp], #4)
   12b58:	bx	lr
   12b5c:	push	{fp, lr}
   12b60:	add	fp, sp, #4
   12b64:	sub	sp, sp, #24
   12b68:	str	r0, [fp, #-24]	; 0xffffffe8
   12b6c:	str	r1, [fp, #-28]	; 0xffffffe4
   12b70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b74:	cmp	r3, #0
   12b78:	beq	12b88 <__assert_fail@plt+0x1c44>
   12b7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b80:	mov	r2, #2
   12b84:	str	r2, [r3]
   12b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b8c:	ldrd	r2, [r3, #8]
   12b90:	mvn	r0, #1
   12b94:	mvn	r1, #0
   12b98:	cmp	r3, r1
   12b9c:	cmpeq	r2, r0
   12ba0:	bne	12bc8 <__assert_fail@plt+0x1c84>
   12ba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ba8:	ldr	r3, [r3]
   12bac:	ldr	r2, [r3, #4]
   12bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bb4:	str	r2, [r3, #4]
   12bb8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12bbc:	mvn	r2, #0
   12bc0:	mvn	r3, #0
   12bc4:	strd	r2, [r1, #8]
   12bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bcc:	ldr	r3, [r3, #4]
   12bd0:	str	r3, [fp, #-16]
   12bd4:	ldr	r3, [fp, #-16]
   12bd8:	cmp	r3, #0
   12bdc:	bne	12be8 <__assert_fail@plt+0x1ca4>
   12be0:	mvn	r3, #0
   12be4:	b	12fe0 <__assert_fail@plt+0x209c>
   12be8:	ldr	r3, [fp, #-16]
   12bec:	ldr	r3, [r3]
   12bf0:	cmp	r3, #4
   12bf4:	ldrls	pc, [pc, r3, lsl #2]
   12bf8:	b	12fcc <__assert_fail@plt+0x2088>
   12bfc:	andeq	r2, r1, r0, lsl ip
   12c00:	andeq	r2, r1, r0, asr #24
   12c04:	andeq	r2, r1, r8, ror #25
   12c08:	andeq	r2, r1, r8, asr #29
   12c0c:	strdeq	r2, [r1], -r8
   12c10:	ldr	r3, [fp, #-16]
   12c14:	ldrb	r3, [r3, #8]
   12c18:	str	r3, [fp, #-8]
   12c1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c20:	mvn	r2, #0
   12c24:	mvn	r3, #0
   12c28:	strd	r2, [r1, #8]
   12c2c:	ldr	r3, [fp, #-16]
   12c30:	ldr	r2, [r3, #4]
   12c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c38:	str	r2, [r3, #4]
   12c3c:	b	12fdc <__assert_fail@plt+0x2098>
   12c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c44:	ldrd	r2, [r3, #8]
   12c48:	mvn	r0, #0
   12c4c:	mvn	r1, #0
   12c50:	cmp	r3, r1
   12c54:	cmpeq	r2, r0
   12c58:	bne	12c78 <__assert_fail@plt+0x1d34>
   12c5c:	ldr	r3, [fp, #-16]
   12c60:	ldrb	r3, [r3, #8]
   12c64:	uxtb	r2, r3
   12c68:	mov	r3, #0
   12c6c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c70:	strd	r2, [r1, #8]
   12c74:	b	12c90 <__assert_fail@plt+0x1d4c>
   12c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c7c:	ldrd	r2, [r3, #8]
   12c80:	adds	r2, r2, #1
   12c84:	adc	r3, r3, #0
   12c88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12c8c:	strd	r2, [r1, #8]
   12c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c94:	ldrd	r2, [r3, #8]
   12c98:	mov	r3, r2
   12c9c:	str	r3, [fp, #-8]
   12ca0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ca4:	ldrd	r0, [r3, #8]
   12ca8:	ldr	r3, [fp, #-16]
   12cac:	ldrb	r3, [r3, #9]
   12cb0:	uxtb	r2, r3
   12cb4:	mov	r3, #0
   12cb8:	cmp	r1, r3
   12cbc:	cmpeq	r0, r2
   12cc0:	bne	12fd0 <__assert_fail@plt+0x208c>
   12cc4:	ldr	r3, [fp, #-16]
   12cc8:	ldr	r2, [r3, #4]
   12ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cd0:	str	r2, [r3, #4]
   12cd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12cd8:	mvn	r2, #0
   12cdc:	mvn	r3, #0
   12ce0:	strd	r2, [r1, #8]
   12ce4:	b	12fd0 <__assert_fail@plt+0x208c>
   12ce8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12cec:	cmp	r3, #0
   12cf0:	beq	12d30 <__assert_fail@plt+0x1dec>
   12cf4:	ldr	r3, [fp, #-16]
   12cf8:	ldr	r3, [r3, #8]
   12cfc:	cmp	r3, #6
   12d00:	beq	12d10 <__assert_fail@plt+0x1dcc>
   12d04:	cmp	r3, #10
   12d08:	beq	12d20 <__assert_fail@plt+0x1ddc>
   12d0c:	b	12d30 <__assert_fail@plt+0x1dec>
   12d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d14:	mov	r2, #0
   12d18:	str	r2, [r3]
   12d1c:	b	12d30 <__assert_fail@plt+0x1dec>
   12d20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d24:	mov	r2, #1
   12d28:	str	r2, [r3]
   12d2c:	nop			; (mov r0, r0)
   12d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d34:	ldrd	r2, [r3, #8]
   12d38:	mvn	r0, #0
   12d3c:	mvn	r1, #0
   12d40:	cmp	r3, r1
   12d44:	cmpeq	r2, r0
   12d48:	bne	12dd4 <__assert_fail@plt+0x1e90>
   12d4c:	mov	r3, #0
   12d50:	str	r3, [fp, #-12]
   12d54:	b	12d8c <__assert_fail@plt+0x1e48>
   12d58:	ldr	r3, [fp, #-16]
   12d5c:	ldr	r3, [r3, #8]
   12d60:	ldr	r2, [fp, #-12]
   12d64:	uxtb	r2, r2
   12d68:	mov	r1, r2
   12d6c:	mov	r0, r3
   12d70:	bl	11498 <__assert_fail@plt+0x554>
   12d74:	mov	r3, r0
   12d78:	cmp	r3, #0
   12d7c:	bne	12d9c <__assert_fail@plt+0x1e58>
   12d80:	ldr	r3, [fp, #-12]
   12d84:	add	r3, r3, #1
   12d88:	str	r3, [fp, #-12]
   12d8c:	ldr	r3, [fp, #-12]
   12d90:	cmp	r3, #255	; 0xff
   12d94:	ble	12d58 <__assert_fail@plt+0x1e14>
   12d98:	b	12da0 <__assert_fail@plt+0x1e5c>
   12d9c:	nop			; (mov r0, r0)
   12da0:	ldr	r3, [fp, #-12]
   12da4:	cmp	r3, #255	; 0xff
   12da8:	ble	12dc0 <__assert_fail@plt+0x1e7c>
   12dac:	ldr	r3, [pc, #568]	; 12fec <__assert_fail@plt+0x20a8>
   12db0:	ldr	r2, [pc, #568]	; 12ff0 <__assert_fail@plt+0x20ac>
   12db4:	ldr	r1, [pc, #568]	; 12ff4 <__assert_fail@plt+0x20b0>
   12db8:	ldr	r0, [pc, #568]	; 12ff8 <__assert_fail@plt+0x20b4>
   12dbc:	bl	10f44 <__assert_fail@plt>
   12dc0:	ldr	r3, [fp, #-12]
   12dc4:	mov	r2, r3
   12dc8:	asr	r3, r2, #31
   12dcc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12dd0:	strd	r2, [r1, #8]
   12dd4:	ldr	r3, [fp, #-16]
   12dd8:	ldr	r0, [r3, #8]
   12ddc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12de0:	ldrd	r2, [r3, #8]
   12de4:	uxtb	r3, r2
   12de8:	mov	r1, r3
   12dec:	bl	11498 <__assert_fail@plt+0x554>
   12df0:	mov	r3, r0
   12df4:	cmp	r3, #0
   12df8:	bne	12e10 <__assert_fail@plt+0x1ecc>
   12dfc:	ldr	r3, [pc, #488]	; 12fec <__assert_fail@plt+0x20a8>
   12e00:	ldr	r2, [pc, #500]	; 12ffc <__assert_fail@plt+0x20b8>
   12e04:	ldr	r1, [pc, #488]	; 12ff4 <__assert_fail@plt+0x20b0>
   12e08:	ldr	r0, [pc, #496]	; 13000 <__assert_fail@plt+0x20bc>
   12e0c:	bl	10f44 <__assert_fail@plt>
   12e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e14:	ldrd	r2, [r3, #8]
   12e18:	mov	r3, r2
   12e1c:	str	r3, [fp, #-8]
   12e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e24:	ldrd	r2, [r3, #8]
   12e28:	mov	r3, r2
   12e2c:	add	r3, r3, #1
   12e30:	str	r3, [fp, #-12]
   12e34:	b	12e6c <__assert_fail@plt+0x1f28>
   12e38:	ldr	r3, [fp, #-16]
   12e3c:	ldr	r3, [r3, #8]
   12e40:	ldr	r2, [fp, #-12]
   12e44:	uxtb	r2, r2
   12e48:	mov	r1, r2
   12e4c:	mov	r0, r3
   12e50:	bl	11498 <__assert_fail@plt+0x554>
   12e54:	mov	r3, r0
   12e58:	cmp	r3, #0
   12e5c:	bne	12e7c <__assert_fail@plt+0x1f38>
   12e60:	ldr	r3, [fp, #-12]
   12e64:	add	r3, r3, #1
   12e68:	str	r3, [fp, #-12]
   12e6c:	ldr	r3, [fp, #-12]
   12e70:	cmp	r3, #255	; 0xff
   12e74:	ble	12e38 <__assert_fail@plt+0x1ef4>
   12e78:	b	12e80 <__assert_fail@plt+0x1f3c>
   12e7c:	nop			; (mov r0, r0)
   12e80:	ldr	r3, [fp, #-12]
   12e84:	cmp	r3, #255	; 0xff
   12e88:	bgt	12ea4 <__assert_fail@plt+0x1f60>
   12e8c:	ldr	r3, [fp, #-12]
   12e90:	mov	r2, r3
   12e94:	asr	r3, r2, #31
   12e98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12e9c:	strd	r2, [r1, #8]
   12ea0:	b	12fdc <__assert_fail@plt+0x2098>
   12ea4:	ldr	r3, [fp, #-16]
   12ea8:	ldr	r2, [r3, #4]
   12eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12eb0:	str	r2, [r3, #4]
   12eb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12eb8:	mvn	r2, #0
   12ebc:	mvn	r3, #0
   12ec0:	strd	r2, [r1, #8]
   12ec4:	b	12fdc <__assert_fail@plt+0x2098>
   12ec8:	ldr	r3, [fp, #-16]
   12ecc:	ldrb	r3, [r3, #8]
   12ed0:	str	r3, [fp, #-8]
   12ed4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12ed8:	mvn	r2, #0
   12edc:	mvn	r3, #0
   12ee0:	strd	r2, [r1, #8]
   12ee4:	ldr	r3, [fp, #-16]
   12ee8:	ldr	r2, [r3, #4]
   12eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ef0:	str	r2, [r3, #4]
   12ef4:	b	12fdc <__assert_fail@plt+0x2098>
   12ef8:	ldr	r3, [fp, #-16]
   12efc:	ldrd	r2, [r3, #16]
   12f00:	orrs	r3, r2, r3
   12f04:	bne	12f3c <__assert_fail@plt+0x1ff8>
   12f08:	ldr	r3, [fp, #-16]
   12f0c:	ldr	r2, [r3, #4]
   12f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f14:	str	r2, [r3, #4]
   12f18:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12f1c:	mvn	r2, #0
   12f20:	mvn	r3, #0
   12f24:	strd	r2, [r1, #8]
   12f28:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12f2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f30:	bl	12b5c <__assert_fail@plt+0x1c18>
   12f34:	str	r0, [fp, #-8]
   12f38:	b	12fd8 <__assert_fail@plt+0x2094>
   12f3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f40:	ldrd	r2, [r3, #8]
   12f44:	mvn	r0, #0
   12f48:	mvn	r1, #0
   12f4c:	cmp	r3, r1
   12f50:	cmpeq	r2, r0
   12f54:	bne	12f68 <__assert_fail@plt+0x2024>
   12f58:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12f5c:	mov	r2, #0
   12f60:	mov	r3, #0
   12f64:	strd	r2, [r1, #8]
   12f68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f6c:	ldrd	r2, [r3, #8]
   12f70:	adds	r2, r2, #1
   12f74:	adc	r3, r3, #0
   12f78:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12f7c:	strd	r2, [r1, #8]
   12f80:	ldr	r3, [fp, #-16]
   12f84:	ldrb	r3, [r3, #8]
   12f88:	str	r3, [fp, #-8]
   12f8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f90:	ldrd	r0, [r3, #8]
   12f94:	ldr	r3, [fp, #-16]
   12f98:	ldrd	r2, [r3, #16]
   12f9c:	cmp	r1, r3
   12fa0:	cmpeq	r0, r2
   12fa4:	bne	12fd8 <__assert_fail@plt+0x2094>
   12fa8:	ldr	r3, [fp, #-16]
   12fac:	ldr	r2, [r3, #4]
   12fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fb4:	str	r2, [r3, #4]
   12fb8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12fbc:	mvn	r2, #0
   12fc0:	mvn	r3, #0
   12fc4:	strd	r2, [r1, #8]
   12fc8:	b	12fd8 <__assert_fail@plt+0x2094>
   12fcc:	bl	10f2c <abort@plt>
   12fd0:	nop			; (mov r0, r0)
   12fd4:	b	12fdc <__assert_fail@plt+0x2098>
   12fd8:	nop			; (mov r0, r0)
   12fdc:	ldr	r3, [fp, #-8]
   12fe0:	mov	r0, r3
   12fe4:	sub	sp, fp, #4
   12fe8:	pop	{fp, pc}
   12fec:	andeq	fp, r1, r4, asr lr
   12ff0:	andeq	r0, r0, r7, lsr r4
   12ff4:	andeq	fp, r1, r0, lsl #15
   12ff8:	andeq	fp, r1, r8, asr #17
   12ffc:	andeq	r0, r0, sl, lsr r4
   13000:	ldrdeq	fp, [r1], -r4
   13004:	push	{fp, lr}
   13008:	add	fp, sp, #4
   1300c:	sub	sp, sp, #272	; 0x110
   13010:	str	r0, [fp, #-272]	; 0xfffffef0
   13014:	mov	r3, #256	; 0x100
   13018:	str	r3, [fp, #-8]
   1301c:	sub	r3, fp, #268	; 0x10c
   13020:	mov	r2, #256	; 0x100
   13024:	mov	r1, #0
   13028:	mov	r0, r3
   1302c:	bl	10e9c <memset@plt>
   13030:	ldr	r1, [fp, #-272]	; 0xfffffef0
   13034:	mvn	r2, #1
   13038:	mvn	r3, #0
   1303c:	strd	r2, [r1, #8]
   13040:	b	13080 <__assert_fail@plt+0x213c>
   13044:	sub	r2, fp, #268	; 0x10c
   13048:	ldr	r3, [fp, #-12]
   1304c:	add	r3, r2, r3
   13050:	ldrb	r3, [r3]
   13054:	eor	r3, r3, #1
   13058:	uxtb	r3, r3
   1305c:	mov	r2, r3
   13060:	ldr	r3, [fp, #-8]
   13064:	sub	r3, r3, r2
   13068:	str	r3, [fp, #-8]
   1306c:	sub	r2, fp, #268	; 0x10c
   13070:	ldr	r3, [fp, #-12]
   13074:	add	r3, r2, r3
   13078:	mov	r2, #1
   1307c:	strb	r2, [r3]
   13080:	mov	r1, #0
   13084:	ldr	r0, [fp, #-272]	; 0xfffffef0
   13088:	bl	12b5c <__assert_fail@plt+0x1c18>
   1308c:	str	r0, [fp, #-12]
   13090:	ldr	r3, [fp, #-12]
   13094:	cmn	r3, #1
   13098:	bne	13044 <__assert_fail@plt+0x2100>
   1309c:	ldr	r3, [fp, #-8]
   130a0:	mov	r0, r3
   130a4:	sub	sp, fp, #4
   130a8:	pop	{fp, pc}
   130ac:	push	{fp, lr}
   130b0:	add	fp, sp, #4
   130b4:	sub	sp, sp, #64	; 0x40
   130b8:	str	r0, [fp, #-64]	; 0xffffffc0
   130bc:	str	r1, [fp, #-68]	; 0xffffffbc
   130c0:	mov	r3, #0
   130c4:	str	r3, [fp, #-8]
   130c8:	mov	r3, #0
   130cc:	str	r3, [fp, #-12]
   130d0:	mov	r3, #0
   130d4:	str	r3, [fp, #-16]
   130d8:	mov	r3, #0
   130dc:	str	r3, [fp, #-20]	; 0xffffffec
   130e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   130e4:	ldrd	r2, [r3, #16]
   130e8:	strd	r2, [fp, #-36]	; 0xffffffdc
   130ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
   130f0:	ldrd	r2, [r3, #16]
   130f4:	strd	r2, [fp, #-44]	; 0xffffffd4
   130f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   130fc:	ldr	r3, [r3, #4]
   13100:	str	r3, [fp, #-48]	; 0xffffffd0
   13104:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13108:	ldr	r3, [r3, #4]
   1310c:	str	r3, [fp, #-52]	; 0xffffffcc
   13110:	mov	r3, #1
   13114:	strb	r3, [fp, #-21]	; 0xffffffeb
   13118:	mov	r3, #1
   1311c:	strb	r3, [fp, #-22]	; 0xffffffea
   13120:	ldr	r3, [pc, #676]	; 133cc <__assert_fail@plt+0x2488>
   13124:	ldrb	r3, [r3]
   13128:	cmp	r3, #0
   1312c:	bne	133c0 <__assert_fail@plt+0x247c>
   13130:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13134:	ldrb	r3, [r3, #33]	; 0x21
   13138:	eor	r3, r3, #1
   1313c:	uxtb	r3, r3
   13140:	cmp	r3, #0
   13144:	bne	133c0 <__assert_fail@plt+0x247c>
   13148:	mov	r3, #0
   1314c:	str	r3, [fp, #-28]	; 0xffffffe4
   13150:	b	131c8 <__assert_fail@plt+0x2284>
   13154:	bl	10e3c <__ctype_b_loc@plt>
   13158:	mov	r3, r0
   1315c:	ldr	r2, [r3]
   13160:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13164:	lsl	r3, r3, #1
   13168:	add	r3, r2, r3
   1316c:	ldrh	r3, [r3]
   13170:	and	r3, r3, #256	; 0x100
   13174:	cmp	r3, #0
   13178:	beq	13188 <__assert_fail@plt+0x2244>
   1317c:	ldr	r3, [fp, #-8]
   13180:	add	r3, r3, #1
   13184:	str	r3, [fp, #-8]
   13188:	bl	10e3c <__ctype_b_loc@plt>
   1318c:	mov	r3, r0
   13190:	ldr	r2, [r3]
   13194:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13198:	lsl	r3, r3, #1
   1319c:	add	r3, r2, r3
   131a0:	ldrh	r3, [r3]
   131a4:	and	r3, r3, #512	; 0x200
   131a8:	cmp	r3, #0
   131ac:	beq	131bc <__assert_fail@plt+0x2278>
   131b0:	ldr	r3, [fp, #-12]
   131b4:	add	r3, r3, #1
   131b8:	str	r3, [fp, #-12]
   131bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131c0:	add	r3, r3, #1
   131c4:	str	r3, [fp, #-28]	; 0xffffffe4
   131c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131cc:	cmp	r3, #255	; 0xff
   131d0:	ble	13154 <__assert_fail@plt+0x2210>
   131d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   131d8:	mvn	r2, #1
   131dc:	mvn	r3, #0
   131e0:	strd	r2, [r1, #8]
   131e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   131e8:	mvn	r2, #1
   131ec:	mvn	r3, #0
   131f0:	strd	r2, [r1, #8]
   131f4:	b	13348 <__assert_fail@plt+0x2404>
   131f8:	sub	r3, fp, #56	; 0x38
   131fc:	mov	r1, r3
   13200:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13204:	bl	12b5c <__assert_fail@plt+0x1c18>
   13208:	str	r0, [fp, #-16]
   1320c:	sub	r3, fp, #60	; 0x3c
   13210:	mov	r1, r3
   13214:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13218:	bl	12b5c <__assert_fail@plt+0x1c18>
   1321c:	str	r0, [fp, #-20]	; 0xffffffec
   13220:	ldrb	r3, [fp, #-22]	; 0xffffffea
   13224:	cmp	r3, #0
   13228:	beq	13274 <__assert_fail@plt+0x2330>
   1322c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13230:	cmp	r3, #2
   13234:	beq	13274 <__assert_fail@plt+0x2330>
   13238:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1323c:	eor	r3, r3, #1
   13240:	uxtb	r3, r3
   13244:	cmp	r3, #0
   13248:	bne	13258 <__assert_fail@plt+0x2314>
   1324c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13250:	cmp	r3, #2
   13254:	bne	13274 <__assert_fail@plt+0x2330>
   13258:	ldr	r0, [pc, #368]	; 133d0 <__assert_fail@plt+0x248c>
   1325c:	bl	10e54 <gettext@plt>
   13260:	mov	r3, r0
   13264:	mov	r2, r3
   13268:	mov	r1, #0
   1326c:	mov	r0, #1
   13270:	bl	10df4 <error@plt>
   13274:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13278:	cmp	r3, #2
   1327c:	beq	13310 <__assert_fail@plt+0x23cc>
   13280:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13284:	bl	12b18 <__assert_fail@plt+0x1bd4>
   13288:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1328c:	bl	12b18 <__assert_fail@plt+0x1bd4>
   13290:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13294:	ldrd	r0, [r3, #16]
   13298:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1329c:	cmp	r3, #1
   132a0:	bne	132b0 <__assert_fail@plt+0x236c>
   132a4:	ldr	r3, [fp, #-8]
   132a8:	sub	r3, r3, #1
   132ac:	b	132b8 <__assert_fail@plt+0x2374>
   132b0:	ldr	r3, [fp, #-12]
   132b4:	sub	r3, r3, #1
   132b8:	mov	r2, r3
   132bc:	mov	r3, #0
   132c0:	subs	r2, r0, r2
   132c4:	sbc	r3, r1, r3
   132c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   132cc:	strd	r2, [r1, #16]
   132d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   132d4:	ldrd	r0, [r3, #16]
   132d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   132dc:	cmp	r3, #1
   132e0:	bne	132f0 <__assert_fail@plt+0x23ac>
   132e4:	ldr	r3, [fp, #-8]
   132e8:	sub	r3, r3, #1
   132ec:	b	132f8 <__assert_fail@plt+0x23b4>
   132f0:	ldr	r3, [fp, #-12]
   132f4:	sub	r3, r3, #1
   132f8:	mov	r2, r3
   132fc:	mov	r3, #0
   13300:	subs	r2, r0, r2
   13304:	sbc	r3, r1, r3
   13308:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1330c:	strd	r2, [r1, #16]
   13310:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13314:	ldrd	r2, [r3, #8]
   13318:	and	r3, r3, r2
   1331c:	cmn	r3, #1
   13320:	moveq	r3, #1
   13324:	movne	r3, #0
   13328:	strb	r3, [fp, #-21]	; 0xffffffeb
   1332c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13330:	ldrd	r2, [r3, #8]
   13334:	and	r3, r3, r2
   13338:	cmn	r3, #1
   1333c:	moveq	r3, #1
   13340:	movne	r3, #0
   13344:	strb	r3, [fp, #-22]	; 0xffffffea
   13348:	ldr	r3, [fp, #-16]
   1334c:	cmn	r3, #1
   13350:	beq	13360 <__assert_fail@plt+0x241c>
   13354:	ldr	r3, [fp, #-20]	; 0xffffffec
   13358:	cmn	r3, #1
   1335c:	bne	131f8 <__assert_fail@plt+0x22b4>
   13360:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13364:	ldrd	r0, [r3, #16]
   13368:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1336c:	cmp	r1, r3
   13370:	cmpeq	r0, r2
   13374:	bhi	13390 <__assert_fail@plt+0x244c>
   13378:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1337c:	ldrd	r0, [r3, #16]
   13380:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13384:	cmp	r1, r3
   13388:	cmpeq	r0, r2
   1338c:	bls	133a4 <__assert_fail@plt+0x2460>
   13390:	ldr	r3, [pc, #60]	; 133d4 <__assert_fail@plt+0x2490>
   13394:	ldr	r2, [pc, #60]	; 133d8 <__assert_fail@plt+0x2494>
   13398:	ldr	r1, [pc, #60]	; 133dc <__assert_fail@plt+0x2498>
   1339c:	ldr	r0, [pc, #60]	; 133e0 <__assert_fail@plt+0x249c>
   133a0:	bl	10f44 <__assert_fail@plt>
   133a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   133a8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   133ac:	str	r2, [r3, #4]
   133b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   133b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133b8:	str	r2, [r3, #4]
   133bc:	b	133c4 <__assert_fail@plt+0x2480>
   133c0:	nop			; (mov r0, r0)
   133c4:	sub	sp, fp, #4
   133c8:	pop	{fp, pc}
   133cc:	andeq	sp, r2, r6, ror #2
   133d0:	andeq	fp, r1, r8, lsl #18
   133d4:	andeq	fp, r1, r0, ror #28
   133d8:	andeq	r0, r0, r8, asr #9
   133dc:	andeq	fp, r1, r0, lsl #15
   133e0:	andeq	fp, r1, r8, lsr r9
   133e4:	push	{fp, lr}
   133e8:	add	fp, sp, #4
   133ec:	sub	sp, sp, #48	; 0x30
   133f0:	str	r0, [fp, #-48]	; 0xffffffd0
   133f4:	mov	r2, #0
   133f8:	mov	r3, #0
   133fc:	strd	r2, [fp, #-20]	; 0xffffffec
   13400:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13404:	mov	r2, #0
   13408:	str	r2, [r3, #24]
   1340c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13410:	mov	r2, #0
   13414:	strb	r2, [r3, #32]
   13418:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1341c:	mov	r2, #0
   13420:	strb	r2, [r3, #34]	; 0x22
   13424:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13428:	mov	r2, #0
   1342c:	strb	r2, [r3, #33]	; 0x21
   13430:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13434:	ldr	r3, [r3]
   13438:	ldr	r3, [r3, #4]
   1343c:	str	r3, [fp, #-8]
   13440:	b	1369c <__assert_fail@plt+0x2758>
   13444:	mov	r2, #0
   13448:	mov	r3, #0
   1344c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13450:	ldr	r3, [fp, #-8]
   13454:	ldr	r3, [r3]
   13458:	cmp	r3, #4
   1345c:	ldrls	pc, [pc, r3, lsl #2]
   13460:	b	13628 <__assert_fail@plt+0x26e4>
   13464:	andeq	r3, r1, r8, ror r4
   13468:	andeq	r3, r1, r8, lsl #9
   1346c:	andeq	r3, r1, r0, ror #9
   13470:	andeq	r3, r1, r8, ror r5
   13474:	andeq	r3, r1, r4, ror #11
   13478:	mov	r2, #1
   1347c:	mov	r3, #0
   13480:	strd	r2, [fp, #-28]	; 0xffffffe4
   13484:	b	1362c <__assert_fail@plt+0x26e8>
   13488:	ldr	r3, [fp, #-8]
   1348c:	ldrb	r2, [r3, #9]
   13490:	ldr	r3, [fp, #-8]
   13494:	ldrb	r3, [r3, #8]
   13498:	cmp	r2, r3
   1349c:	bcs	134b4 <__assert_fail@plt+0x2570>
   134a0:	ldr	r3, [pc, #536]	; 136c0 <__assert_fail@plt+0x277c>
   134a4:	ldr	r2, [pc, #536]	; 136c4 <__assert_fail@plt+0x2780>
   134a8:	ldr	r1, [pc, #536]	; 136c8 <__assert_fail@plt+0x2784>
   134ac:	ldr	r0, [pc, #536]	; 136cc <__assert_fail@plt+0x2788>
   134b0:	bl	10f44 <__assert_fail@plt>
   134b4:	ldr	r3, [fp, #-8]
   134b8:	ldrb	r3, [r3, #9]
   134bc:	mov	r2, r3
   134c0:	ldr	r3, [fp, #-8]
   134c4:	ldrb	r3, [r3, #8]
   134c8:	sub	r3, r2, r3
   134cc:	add	r3, r3, #1
   134d0:	mov	r2, r3
   134d4:	asr	r3, r2, #31
   134d8:	strd	r2, [fp, #-28]	; 0xffffffe4
   134dc:	b	1362c <__assert_fail@plt+0x26e8>
   134e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   134e4:	mov	r2, #1
   134e8:	strb	r2, [r3, #33]	; 0x21
   134ec:	mov	r3, #0
   134f0:	str	r3, [fp, #-32]	; 0xffffffe0
   134f4:	b	1353c <__assert_fail@plt+0x25f8>
   134f8:	ldr	r3, [fp, #-8]
   134fc:	ldr	r3, [r3, #8]
   13500:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13504:	uxtb	r2, r2
   13508:	mov	r1, r2
   1350c:	mov	r0, r3
   13510:	bl	11498 <__assert_fail@plt+0x554>
   13514:	mov	r3, r0
   13518:	cmp	r3, #0
   1351c:	beq	13530 <__assert_fail@plt+0x25ec>
   13520:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13524:	adds	r2, r2, #1
   13528:	adc	r3, r3, #0
   1352c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13530:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13534:	add	r3, r3, #1
   13538:	str	r3, [fp, #-32]	; 0xffffffe0
   1353c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13540:	cmp	r3, #255	; 0xff
   13544:	ble	134f8 <__assert_fail@plt+0x25b4>
   13548:	ldr	r3, [fp, #-8]
   1354c:	ldr	r3, [r3, #8]
   13550:	cmp	r3, #6
   13554:	beq	13570 <__assert_fail@plt+0x262c>
   13558:	cmp	r3, #10
   1355c:	beq	13570 <__assert_fail@plt+0x262c>
   13560:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13564:	mov	r2, #1
   13568:	strb	r2, [r3, #34]	; 0x22
   1356c:	b	13574 <__assert_fail@plt+0x2630>
   13570:	nop			; (mov r0, r0)
   13574:	b	1362c <__assert_fail@plt+0x26e8>
   13578:	mov	r3, #0
   1357c:	str	r3, [fp, #-36]	; 0xffffffdc
   13580:	b	135c8 <__assert_fail@plt+0x2684>
   13584:	ldr	r3, [fp, #-8]
   13588:	ldrb	r3, [r3, #8]
   1358c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13590:	uxtb	r2, r2
   13594:	mov	r1, r2
   13598:	mov	r0, r3
   1359c:	bl	11450 <__assert_fail@plt+0x50c>
   135a0:	mov	r3, r0
   135a4:	cmp	r3, #0
   135a8:	beq	135bc <__assert_fail@plt+0x2678>
   135ac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   135b0:	adds	r2, r2, #1
   135b4:	adc	r3, r3, #0
   135b8:	strd	r2, [fp, #-28]	; 0xffffffe4
   135bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135c0:	add	r3, r3, #1
   135c4:	str	r3, [fp, #-36]	; 0xffffffdc
   135c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135cc:	cmp	r3, #255	; 0xff
   135d0:	ble	13584 <__assert_fail@plt+0x2640>
   135d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   135d8:	mov	r2, #1
   135dc:	strb	r2, [r3, #32]
   135e0:	b	1362c <__assert_fail@plt+0x26e8>
   135e4:	ldr	r3, [fp, #-8]
   135e8:	ldrd	r2, [r3, #16]
   135ec:	orrs	r3, r2, r3
   135f0:	beq	13604 <__assert_fail@plt+0x26c0>
   135f4:	ldr	r3, [fp, #-8]
   135f8:	ldrd	r2, [r3, #16]
   135fc:	strd	r2, [fp, #-28]	; 0xffffffe4
   13600:	b	1362c <__assert_fail@plt+0x26e8>
   13604:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13608:	ldr	r2, [fp, #-8]
   1360c:	str	r2, [r3, #28]
   13610:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13614:	ldr	r3, [r3, #24]
   13618:	add	r2, r3, #1
   1361c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13620:	str	r2, [r3, #24]
   13624:	b	1362c <__assert_fail@plt+0x26e8>
   13628:	bl	10f2c <abort@plt>
   1362c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13630:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13634:	adds	r2, r2, r0
   13638:	adc	r3, r3, r1
   1363c:	strd	r2, [fp, #-44]	; 0xffffffd4
   13640:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13644:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13648:	cmp	r1, r3
   1364c:	cmpeq	r0, r2
   13650:	bhi	1366c <__assert_fail@plt+0x2728>
   13654:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13658:	mvn	r0, #0
   1365c:	mvn	r1, #0
   13660:	cmp	r3, r1
   13664:	cmpeq	r2, r0
   13668:	bne	13688 <__assert_fail@plt+0x2744>
   1366c:	ldr	r0, [pc, #92]	; 136d0 <__assert_fail@plt+0x278c>
   13670:	bl	10e54 <gettext@plt>
   13674:	mov	r3, r0
   13678:	mov	r2, r3
   1367c:	mov	r1, #0
   13680:	mov	r0, #1
   13684:	bl	10df4 <error@plt>
   13688:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1368c:	strd	r2, [fp, #-20]	; 0xffffffec
   13690:	ldr	r3, [fp, #-8]
   13694:	ldr	r3, [r3, #4]
   13698:	str	r3, [fp, #-8]
   1369c:	ldr	r3, [fp, #-8]
   136a0:	cmp	r3, #0
   136a4:	bne	13444 <__assert_fail@plt+0x2500>
   136a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   136ac:	ldrd	r2, [fp, #-20]	; 0xffffffec
   136b0:	strd	r2, [r1, #16]
   136b4:	nop			; (mov r0, r0)
   136b8:	sub	sp, fp, #4
   136bc:	pop	{fp, pc}
   136c0:	andeq	fp, r1, r8, ror lr
   136c4:	strdeq	r0, [r0], -r1
   136c8:	andeq	fp, r1, r0, lsl #15
   136cc:	andeq	fp, r1, r0, ror r9
   136d0:	andeq	fp, r1, r0, lsr #19
   136d4:	push	{fp, lr}
   136d8:	add	fp, sp, #4
   136dc:	sub	sp, sp, #8
   136e0:	str	r0, [fp, #-8]
   136e4:	ldr	r0, [fp, #-8]
   136e8:	bl	133e4 <__assert_fail@plt+0x24a0>
   136ec:	ldr	r3, [pc, #48]	; 13724 <__assert_fail@plt+0x27e0>
   136f0:	ldrb	r3, [r3]
   136f4:	cmp	r3, #0
   136f8:	beq	13718 <__assert_fail@plt+0x27d4>
   136fc:	ldr	r0, [fp, #-8]
   13700:	bl	13004 <__assert_fail@plt+0x20c0>
   13704:	mov	r3, r0
   13708:	mov	r2, r3
   1370c:	asr	r3, r2, #31
   13710:	ldr	r1, [fp, #-8]
   13714:	strd	r2, [r1, #16]
   13718:	nop			; (mov r0, r0)
   1371c:	sub	sp, fp, #4
   13720:	pop	{fp, pc}
   13724:	andeq	sp, r2, r6, ror #2
   13728:	push	{fp, lr}
   1372c:	add	fp, sp, #4
   13730:	sub	sp, sp, #16
   13734:	str	r0, [fp, #-8]
   13738:	strd	r2, [fp, #-20]	; 0xffffffec
   1373c:	ldr	r0, [fp, #-8]
   13740:	bl	133e4 <__assert_fail@plt+0x24a0>
   13744:	ldr	r3, [fp, #-8]
   13748:	ldrd	r0, [r3, #16]
   1374c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13750:	cmp	r1, r3
   13754:	cmpeq	r0, r2
   13758:	bhi	13798 <__assert_fail@plt+0x2854>
   1375c:	ldr	r3, [fp, #-8]
   13760:	ldr	r3, [r3, #24]
   13764:	cmp	r3, #1
   13768:	bne	13798 <__assert_fail@plt+0x2854>
   1376c:	ldr	r3, [fp, #-8]
   13770:	ldr	ip, [r3, #28]
   13774:	ldr	r3, [fp, #-8]
   13778:	ldrd	r2, [r3, #16]
   1377c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13780:	subs	r2, r0, r2
   13784:	sbc	r3, r1, r3
   13788:	strd	r2, [ip, #16]
   1378c:	ldr	r1, [fp, #-8]
   13790:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13794:	strd	r2, [r1, #16]
   13798:	nop			; (mov r0, r0)
   1379c:	sub	sp, fp, #4
   137a0:	pop	{fp, pc}
   137a4:	push	{fp, lr}
   137a8:	add	fp, sp, #4
   137ac:	sub	sp, sp, #16
   137b0:	str	r0, [fp, #-16]
   137b4:	mov	r0, #24
   137b8:	bl	18010 <__assert_fail@plt+0x70cc>
   137bc:	mov	r3, r0
   137c0:	str	r3, [fp, #-8]
   137c4:	ldr	r3, [fp, #-16]
   137c8:	ldr	r2, [fp, #-8]
   137cc:	str	r2, [r3, #4]
   137d0:	ldr	r3, [fp, #-16]
   137d4:	ldr	r2, [r3, #4]
   137d8:	ldr	r3, [fp, #-16]
   137dc:	str	r2, [r3]
   137e0:	ldr	r3, [fp, #-16]
   137e4:	ldr	r3, [r3]
   137e8:	mov	r2, #0
   137ec:	str	r2, [r3, #4]
   137f0:	nop			; (mov r0, r0)
   137f4:	sub	sp, fp, #4
   137f8:	pop	{fp, pc}
   137fc:	push	{fp, lr}
   13800:	add	fp, sp, #4
   13804:	sub	sp, sp, #24
   13808:	str	r0, [fp, #-24]	; 0xffffffe8
   1380c:	str	r1, [fp, #-28]	; 0xffffffe4
   13810:	sub	r3, fp, #20
   13814:	mov	r1, r3
   13818:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1381c:	bl	11730 <__assert_fail@plt+0x7ec>
   13820:	mov	r3, r0
   13824:	cmp	r3, #0
   13828:	beq	13850 <__assert_fail@plt+0x290c>
   1382c:	sub	r3, fp, #20
   13830:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13834:	mov	r0, r3
   13838:	bl	126cc <__assert_fail@plt+0x1788>
   1383c:	mov	r3, r0
   13840:	cmp	r3, #0
   13844:	beq	13850 <__assert_fail@plt+0x290c>
   13848:	mov	r3, #1
   1384c:	b	13854 <__assert_fail@plt+0x2910>
   13850:	mov	r3, #0
   13854:	strb	r3, [fp, #-5]
   13858:	ldrb	r3, [fp, #-5]
   1385c:	and	r3, r3, #1
   13860:	strb	r3, [fp, #-5]
   13864:	sub	r3, fp, #20
   13868:	mov	r0, r3
   1386c:	bl	116f4 <__assert_fail@plt+0x7b0>
   13870:	ldrb	r3, [fp, #-5]
   13874:	mov	r0, r3
   13878:	sub	sp, fp, #4
   1387c:	pop	{fp, pc}
   13880:	push	{fp, lr}
   13884:	add	fp, sp, #4
   13888:	sub	sp, sp, #16
   1388c:	str	r0, [fp, #-16]
   13890:	str	r1, [fp, #-20]	; 0xffffffec
   13894:	ldr	r3, [pc, #312]	; 139d4 <__assert_fail@plt+0x2a90>
   13898:	ldrb	r3, [r3]
   1389c:	cmp	r3, #0
   138a0:	bne	138b8 <__assert_fail@plt+0x2974>
   138a4:	ldr	r3, [pc, #300]	; 139d8 <__assert_fail@plt+0x2a94>
   138a8:	ldr	r2, [pc, #300]	; 139dc <__assert_fail@plt+0x2a98>
   138ac:	ldr	r1, [pc, #300]	; 139e0 <__assert_fail@plt+0x2a9c>
   138b0:	ldr	r0, [pc, #300]	; 139e4 <__assert_fail@plt+0x2aa0>
   138b4:	bl	10f44 <__assert_fail@plt>
   138b8:	ldr	r3, [fp, #-16]
   138bc:	ldrd	r0, [r3, #16]
   138c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   138c4:	ldrd	r2, [r3, #16]
   138c8:	cmp	r1, r3
   138cc:	cmpeq	r0, r2
   138d0:	bhi	138e8 <__assert_fail@plt+0x29a4>
   138d4:	ldr	r3, [pc, #252]	; 139d8 <__assert_fail@plt+0x2a94>
   138d8:	ldr	r2, [pc, #264]	; 139e8 <__assert_fail@plt+0x2aa4>
   138dc:	ldr	r1, [pc, #252]	; 139e0 <__assert_fail@plt+0x2a9c>
   138e0:	ldr	r0, [pc, #260]	; 139ec <__assert_fail@plt+0x2aa8>
   138e4:	bl	10f44 <__assert_fail@plt>
   138e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138ec:	ldrd	r2, [r3, #16]
   138f0:	orrs	r3, r2, r3
   138f4:	bne	1390c <__assert_fail@plt+0x29c8>
   138f8:	ldr	r3, [pc, #216]	; 139d8 <__assert_fail@plt+0x2a94>
   138fc:	ldr	r2, [pc, #236]	; 139f0 <__assert_fail@plt+0x2aac>
   13900:	ldr	r1, [pc, #216]	; 139e0 <__assert_fail@plt+0x2a9c>
   13904:	ldr	r0, [pc, #232]	; 139f4 <__assert_fail@plt+0x2ab0>
   13908:	bl	10f44 <__assert_fail@plt>
   1390c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13910:	ldr	r3, [r3, #4]
   13914:	str	r3, [fp, #-12]
   13918:	ldr	r3, [fp, #-12]
   1391c:	ldr	r3, [r3]
   13920:	cmp	r3, #4
   13924:	ldrls	pc, [pc, r3, lsl #2]
   13928:	b	13990 <__assert_fail@plt+0x2a4c>
   1392c:	andeq	r3, r1, r0, asr #18
   13930:	andeq	r3, r1, r0, asr r9
   13934:	andeq	r3, r1, r0, ror #18
   13938:	andeq	r3, r1, ip, lsl #19
   1393c:	andeq	r3, r1, ip, ror r9
   13940:	ldr	r3, [fp, #-12]
   13944:	ldrb	r3, [r3, #8]
   13948:	strb	r3, [fp, #-5]
   1394c:	b	13994 <__assert_fail@plt+0x2a50>
   13950:	ldr	r3, [fp, #-12]
   13954:	ldrb	r3, [r3, #9]
   13958:	strb	r3, [fp, #-5]
   1395c:	b	13994 <__assert_fail@plt+0x2a50>
   13960:	ldr	r0, [pc, #144]	; 139f8 <__assert_fail@plt+0x2ab4>
   13964:	bl	10e54 <gettext@plt>
   13968:	mov	r3, r0
   1396c:	mov	r2, r3
   13970:	mov	r1, #0
   13974:	mov	r0, #1
   13978:	bl	10df4 <error@plt>
   1397c:	ldr	r3, [fp, #-12]
   13980:	ldrb	r3, [r3, #8]
   13984:	strb	r3, [fp, #-5]
   13988:	b	13994 <__assert_fail@plt+0x2a50>
   1398c:	bl	10f2c <abort@plt>
   13990:	bl	10f2c <abort@plt>
   13994:	ldr	r3, [fp, #-16]
   13998:	ldrd	r0, [r3, #16]
   1399c:	ldr	r3, [fp, #-20]	; 0xffffffec
   139a0:	ldrd	r2, [r3, #16]
   139a4:	subs	r2, r0, r2
   139a8:	sbc	r3, r1, r3
   139ac:	ldrb	r1, [fp, #-5]
   139b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   139b4:	bl	12128 <__assert_fail@plt+0x11e4>
   139b8:	ldr	r3, [fp, #-16]
   139bc:	ldrd	r2, [r3, #16]
   139c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   139c4:	strd	r2, [r1, #16]
   139c8:	nop			; (mov r0, r0)
   139cc:	sub	sp, fp, #4
   139d0:	pop	{fp, pc}
   139d4:	andeq	sp, r2, r8, ror #2
   139d8:	andeq	fp, r1, r8, lsl #29
   139dc:	andeq	r0, r0, r1, ror #10
   139e0:	andeq	fp, r1, r0, lsl #15
   139e4:			; <UNDEFINED> instruction: 0x0001b9bc
   139e8:	andeq	r0, r0, r2, ror #10
   139ec:	andeq	fp, r1, r8, asr #19
   139f0:	andeq	r0, r0, r3, ror #10
   139f4:	andeq	fp, r1, r0, ror #19
   139f8:	strdeq	fp, [r1], -r0
   139fc:	push	{fp, lr}
   13a00:	add	fp, sp, #4
   13a04:	sub	sp, sp, #16
   13a08:	str	r0, [fp, #-16]
   13a0c:	ldr	r1, [fp, #-16]
   13a10:	mvn	r2, #1
   13a14:	mvn	r3, #0
   13a18:	strd	r2, [r1, #8]
   13a1c:	mov	r1, #0
   13a20:	ldr	r0, [fp, #-16]
   13a24:	bl	12b5c <__assert_fail@plt+0x1c18>
   13a28:	str	r0, [fp, #-8]
   13a2c:	ldr	r3, [fp, #-8]
   13a30:	cmn	r3, #1
   13a34:	bne	13a58 <__assert_fail@plt+0x2b14>
   13a38:	mov	r3, #0
   13a3c:	b	13a78 <__assert_fail@plt+0x2b34>
   13a40:	ldr	r2, [fp, #-12]
   13a44:	ldr	r3, [fp, #-8]
   13a48:	cmp	r2, r3
   13a4c:	beq	13a58 <__assert_fail@plt+0x2b14>
   13a50:	mov	r3, #0
   13a54:	b	13a78 <__assert_fail@plt+0x2b34>
   13a58:	mov	r1, #0
   13a5c:	ldr	r0, [fp, #-16]
   13a60:	bl	12b5c <__assert_fail@plt+0x1c18>
   13a64:	str	r0, [fp, #-12]
   13a68:	ldr	r3, [fp, #-12]
   13a6c:	cmn	r3, #1
   13a70:	bne	13a40 <__assert_fail@plt+0x2afc>
   13a74:	mov	r3, #1
   13a78:	mov	r0, r3
   13a7c:	sub	sp, fp, #4
   13a80:	pop	{fp, pc}
   13a84:	push	{fp, lr}
   13a88:	add	fp, sp, #4
   13a8c:	sub	sp, sp, #8
   13a90:	str	r0, [fp, #-8]
   13a94:	str	r1, [fp, #-12]
   13a98:	ldr	r0, [fp, #-8]
   13a9c:	bl	136d4 <__assert_fail@plt+0x2790>
   13aa0:	ldr	r3, [fp, #-8]
   13aa4:	ldr	r3, [r3, #24]
   13aa8:	cmp	r3, #0
   13aac:	beq	13acc <__assert_fail@plt+0x2b88>
   13ab0:	ldr	r0, [pc, #488]	; 13ca0 <__assert_fail@plt+0x2d5c>
   13ab4:	bl	10e54 <gettext@plt>
   13ab8:	mov	r3, r0
   13abc:	mov	r2, r3
   13ac0:	mov	r1, #0
   13ac4:	mov	r0, #1
   13ac8:	bl	10df4 <error@plt>
   13acc:	ldr	r3, [fp, #-12]
   13ad0:	cmp	r3, #0
   13ad4:	beq	13c94 <__assert_fail@plt+0x2d50>
   13ad8:	ldr	r3, [fp, #-8]
   13adc:	ldrd	r2, [r3, #16]
   13ae0:	ldr	r0, [fp, #-12]
   13ae4:	bl	13728 <__assert_fail@plt+0x27e4>
   13ae8:	ldr	r3, [fp, #-12]
   13aec:	ldr	r3, [r3, #24]
   13af0:	cmp	r3, #1
   13af4:	bls	13b14 <__assert_fail@plt+0x2bd0>
   13af8:	ldr	r0, [pc, #420]	; 13ca4 <__assert_fail@plt+0x2d60>
   13afc:	bl	10e54 <gettext@plt>
   13b00:	mov	r3, r0
   13b04:	mov	r2, r3
   13b08:	mov	r1, #0
   13b0c:	mov	r0, #1
   13b10:	bl	10df4 <error@plt>
   13b14:	ldr	r3, [pc, #396]	; 13ca8 <__assert_fail@plt+0x2d64>
   13b18:	ldrb	r3, [r3]
   13b1c:	cmp	r3, #0
   13b20:	beq	13c68 <__assert_fail@plt+0x2d24>
   13b24:	ldr	r3, [fp, #-12]
   13b28:	ldrb	r3, [r3, #32]
   13b2c:	cmp	r3, #0
   13b30:	beq	13b50 <__assert_fail@plt+0x2c0c>
   13b34:	ldr	r0, [pc, #368]	; 13cac <__assert_fail@plt+0x2d68>
   13b38:	bl	10e54 <gettext@plt>
   13b3c:	mov	r3, r0
   13b40:	mov	r2, r3
   13b44:	mov	r1, #0
   13b48:	mov	r0, #1
   13b4c:	bl	10df4 <error@plt>
   13b50:	ldr	r3, [fp, #-12]
   13b54:	ldrb	r3, [r3, #34]	; 0x22
   13b58:	cmp	r3, #0
   13b5c:	beq	13b7c <__assert_fail@plt+0x2c38>
   13b60:	ldr	r0, [pc, #328]	; 13cb0 <__assert_fail@plt+0x2d6c>
   13b64:	bl	10e54 <gettext@plt>
   13b68:	mov	r3, r0
   13b6c:	mov	r2, r3
   13b70:	mov	r1, #0
   13b74:	mov	r0, #1
   13b78:	bl	10df4 <error@plt>
   13b7c:	ldr	r1, [fp, #-12]
   13b80:	ldr	r0, [fp, #-8]
   13b84:	bl	130ac <__assert_fail@plt+0x2168>
   13b88:	ldr	r3, [fp, #-8]
   13b8c:	ldrd	r0, [r3, #16]
   13b90:	ldr	r3, [fp, #-12]
   13b94:	ldrd	r2, [r3, #16]
   13b98:	cmp	r1, r3
   13b9c:	cmpeq	r0, r2
   13ba0:	bls	13bf4 <__assert_fail@plt+0x2cb0>
   13ba4:	ldr	r3, [pc, #264]	; 13cb4 <__assert_fail@plt+0x2d70>
   13ba8:	ldrb	r3, [r3]
   13bac:	eor	r3, r3, #1
   13bb0:	uxtb	r3, r3
   13bb4:	cmp	r3, #0
   13bb8:	beq	13bf4 <__assert_fail@plt+0x2cb0>
   13bbc:	ldr	r3, [fp, #-12]
   13bc0:	ldrd	r2, [r3, #16]
   13bc4:	orrs	r3, r2, r3
   13bc8:	bne	13be8 <__assert_fail@plt+0x2ca4>
   13bcc:	ldr	r0, [pc, #228]	; 13cb8 <__assert_fail@plt+0x2d74>
   13bd0:	bl	10e54 <gettext@plt>
   13bd4:	mov	r3, r0
   13bd8:	mov	r2, r3
   13bdc:	mov	r1, #0
   13be0:	mov	r0, #1
   13be4:	bl	10df4 <error@plt>
   13be8:	ldr	r1, [fp, #-12]
   13bec:	ldr	r0, [fp, #-8]
   13bf0:	bl	13880 <__assert_fail@plt+0x293c>
   13bf4:	ldr	r3, [pc, #192]	; 13cbc <__assert_fail@plt+0x2d78>
   13bf8:	ldrb	r3, [r3]
   13bfc:	cmp	r3, #0
   13c00:	beq	13c94 <__assert_fail@plt+0x2d50>
   13c04:	ldr	r3, [fp, #-8]
   13c08:	ldrb	r3, [r3, #33]	; 0x21
   13c0c:	cmp	r3, #0
   13c10:	beq	13c94 <__assert_fail@plt+0x2d50>
   13c14:	ldr	r3, [fp, #-12]
   13c18:	ldrd	r0, [r3, #16]
   13c1c:	ldr	r3, [fp, #-8]
   13c20:	ldrd	r2, [r3, #16]
   13c24:	cmp	r1, r3
   13c28:	cmpeq	r0, r2
   13c2c:	bne	13c4c <__assert_fail@plt+0x2d08>
   13c30:	ldr	r0, [fp, #-12]
   13c34:	bl	139fc <__assert_fail@plt+0x2ab8>
   13c38:	mov	r3, r0
   13c3c:	eor	r3, r3, #1
   13c40:	uxtb	r3, r3
   13c44:	cmp	r3, #0
   13c48:	beq	13c94 <__assert_fail@plt+0x2d50>
   13c4c:	ldr	r0, [pc, #108]	; 13cc0 <__assert_fail@plt+0x2d7c>
   13c50:	bl	10e54 <gettext@plt>
   13c54:	mov	r3, r0
   13c58:	mov	r2, r3
   13c5c:	mov	r1, #0
   13c60:	mov	r0, #1
   13c64:	bl	10df4 <error@plt>
   13c68:	ldr	r3, [fp, #-12]
   13c6c:	ldr	r3, [r3, #24]
   13c70:	cmp	r3, #0
   13c74:	beq	13c94 <__assert_fail@plt+0x2d50>
   13c78:	ldr	r0, [pc, #68]	; 13cc4 <__assert_fail@plt+0x2d80>
   13c7c:	bl	10e54 <gettext@plt>
   13c80:	mov	r3, r0
   13c84:	mov	r2, r3
   13c88:	mov	r1, #0
   13c8c:	mov	r0, #1
   13c90:	bl	10df4 <error@plt>
   13c94:	nop			; (mov r0, r0)
   13c98:	sub	sp, fp, #4
   13c9c:	pop	{fp, pc}
   13ca0:	andeq	fp, r1, ip, asr sl
   13ca4:	muleq	r1, r0, sl
   13ca8:	andeq	sp, r2, r8, ror #2
   13cac:	andeq	fp, r1, r8, asr #21
   13cb0:	andeq	fp, r1, r8, lsl #22
   13cb4:	andeq	sp, r2, r7, ror #2
   13cb8:	andeq	fp, r1, r8, ror #22
   13cbc:	andeq	sp, r2, r6, ror #2
   13cc0:	muleq	r1, ip, fp
   13cc4:	andeq	fp, r1, r8, lsl #24
   13cc8:	push	{r4, fp, lr}
   13ccc:	add	fp, sp, #8
   13cd0:	sub	sp, sp, #44	; 0x2c
   13cd4:	str	r0, [fp, #-40]	; 0xffffffd8
   13cd8:	str	r1, [fp, #-44]	; 0xffffffd4
   13cdc:	str	r2, [fp, #-48]	; 0xffffffd0
   13ce0:	mvn	r3, #-2147483648	; 0x80000000
   13ce4:	str	r3, [fp, #-32]	; 0xffffffe0
   13ce8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13cec:	str	r3, [fp, #-16]
   13cf0:	mov	r3, #0
   13cf4:	str	r3, [fp, #-20]	; 0xffffffec
   13cf8:	mov	r3, #0
   13cfc:	str	r3, [fp, #-24]	; 0xffffffe8
   13d00:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d08:	cmp	r2, r3
   13d0c:	bcc	13d38 <__assert_fail@plt+0x2df4>
   13d10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13d18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13d1c:	blx	r3
   13d20:	str	r0, [fp, #-24]	; 0xffffffe8
   13d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d28:	cmp	r3, #0
   13d2c:	beq	13f5c <__assert_fail@plt+0x3018>
   13d30:	mov	r3, #0
   13d34:	str	r3, [fp, #-20]	; 0xffffffec
   13d38:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d3c:	str	r3, [fp, #-36]	; 0xffffffdc
   13d40:	ldr	r2, [fp, #-16]
   13d44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13d48:	cmp	r2, r3
   13d4c:	bne	13ef0 <__assert_fail@plt+0x2fac>
   13d50:	b	13d60 <__assert_fail@plt+0x2e1c>
   13d54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d58:	add	r3, r3, #2
   13d5c:	str	r3, [fp, #-20]	; 0xffffffec
   13d60:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d68:	cmp	r2, r3
   13d6c:	bcs	13da8 <__assert_fail@plt+0x2e64>
   13d70:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d78:	add	r3, r2, r3
   13d7c:	ldrb	r3, [r3]
   13d80:	mov	r0, r3
   13d84:	bl	11078 <__assert_fail@plt+0x134>
   13d88:	mov	r3, r0
   13d8c:	mov	r2, r3
   13d90:	ldr	r3, [pc, #468]	; 13f6c <__assert_fail@plt+0x3028>
   13d94:	ldrb	r3, [r3, r2]
   13d98:	eor	r3, r3, #1
   13d9c:	uxtb	r3, r3
   13da0:	cmp	r3, #0
   13da4:	bne	13d54 <__assert_fail@plt+0x2e10>
   13da8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13db0:	cmp	r2, r3
   13db4:	bne	13df8 <__assert_fail@plt+0x2eb4>
   13db8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dbc:	sub	r3, r3, #1
   13dc0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13dc4:	add	r3, r2, r3
   13dc8:	ldrb	r3, [r3]
   13dcc:	mov	r0, r3
   13dd0:	bl	11078 <__assert_fail@plt+0x134>
   13dd4:	mov	r3, r0
   13dd8:	mov	r2, r3
   13ddc:	ldr	r3, [pc, #392]	; 13f6c <__assert_fail@plt+0x3028>
   13de0:	ldrb	r3, [r3, r2]
   13de4:	cmp	r3, #0
   13de8:	beq	13df8 <__assert_fail@plt+0x2eb4>
   13dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13df0:	sub	r3, r3, #1
   13df4:	str	r3, [fp, #-20]	; 0xffffffec
   13df8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e00:	cmp	r2, r3
   13e04:	bcc	13e1c <__assert_fail@plt+0x2ed8>
   13e08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13e0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13e10:	sub	r3, r2, r3
   13e14:	str	r3, [fp, #-28]	; 0xffffffe4
   13e18:	b	13e8c <__assert_fail@plt+0x2f48>
   13e1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e24:	add	r3, r2, r3
   13e28:	ldrb	r3, [r3]
   13e2c:	str	r3, [fp, #-16]
   13e30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13e38:	sub	r3, r2, r3
   13e3c:	add	r3, r3, #1
   13e40:	str	r3, [fp, #-28]	; 0xffffffe4
   13e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e48:	cmp	r3, #0
   13e4c:	beq	13e80 <__assert_fail@plt+0x2f3c>
   13e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e54:	sub	r3, r3, #1
   13e58:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13e5c:	add	r3, r2, r3
   13e60:	ldrb	r3, [r3]
   13e64:	mov	r2, r3
   13e68:	ldr	r3, [fp, #-16]
   13e6c:	cmp	r2, r3
   13e70:	bne	13e80 <__assert_fail@plt+0x2f3c>
   13e74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e78:	sub	r3, r3, #1
   13e7c:	str	r3, [fp, #-28]	; 0xffffffe4
   13e80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e84:	add	r3, r3, #1
   13e88:	str	r3, [fp, #-20]	; 0xffffffec
   13e8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e90:	cmp	r3, #0
   13e94:	beq	13ef0 <__assert_fail@plt+0x2fac>
   13e98:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13e9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13ea0:	add	r0, r2, r3
   13ea4:	ldr	r3, [pc, #196]	; 13f70 <__assert_fail@plt+0x302c>
   13ea8:	ldr	r3, [r3]
   13eac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13eb0:	mov	r1, #1
   13eb4:	bl	10d58 <fwrite_unlocked@plt>
   13eb8:	mov	r2, r0
   13ebc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ec0:	cmp	r2, r3
   13ec4:	beq	13ef0 <__assert_fail@plt+0x2fac>
   13ec8:	bl	10e84 <__errno_location@plt>
   13ecc:	mov	r3, r0
   13ed0:	ldr	r4, [r3]
   13ed4:	ldr	r0, [pc, #152]	; 13f74 <__assert_fail@plt+0x3030>
   13ed8:	bl	10e54 <gettext@plt>
   13edc:	mov	r3, r0
   13ee0:	mov	r2, r3
   13ee4:	mov	r1, r4
   13ee8:	mov	r0, #1
   13eec:	bl	10df4 <error@plt>
   13ef0:	ldr	r2, [fp, #-16]
   13ef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ef8:	cmp	r2, r3
   13efc:	beq	13d00 <__assert_fail@plt+0x2dbc>
   13f00:	b	13f10 <__assert_fail@plt+0x2fcc>
   13f04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f08:	add	r3, r3, #1
   13f0c:	str	r3, [fp, #-20]	; 0xffffffec
   13f10:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f18:	cmp	r2, r3
   13f1c:	bcs	13f40 <__assert_fail@plt+0x2ffc>
   13f20:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f28:	add	r3, r2, r3
   13f2c:	ldrb	r3, [r3]
   13f30:	mov	r2, r3
   13f34:	ldr	r3, [fp, #-16]
   13f38:	cmp	r2, r3
   13f3c:	beq	13f04 <__assert_fail@plt+0x2fc0>
   13f40:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f48:	cmp	r2, r3
   13f4c:	bcs	13d00 <__assert_fail@plt+0x2dbc>
   13f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13f54:	str	r3, [fp, #-16]
   13f58:	b	13d00 <__assert_fail@plt+0x2dbc>
   13f5c:	nop			; (mov r0, r0)
   13f60:	nop			; (mov r0, r0)
   13f64:	sub	sp, fp, #8
   13f68:	pop	{r4, fp, pc}
   13f6c:	andeq	pc, r2, ip, ror #2
   13f70:	andeq	sp, r2, ip, asr r1
   13f74:	andeq	fp, r1, r8, asr #24
   13f78:	push	{r4, fp, lr}
   13f7c:	add	fp, sp, #8
   13f80:	sub	sp, sp, #20
   13f84:	str	r0, [fp, #-24]	; 0xffffffe8
   13f88:	str	r1, [fp, #-28]	; 0xffffffe4
   13f8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13f90:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13f94:	mov	r0, #0
   13f98:	bl	17780 <__assert_fail@plt+0x683c>
   13f9c:	str	r0, [fp, #-16]
   13fa0:	ldr	r3, [fp, #-16]
   13fa4:	cmn	r3, #1
   13fa8:	bne	13fd4 <__assert_fail@plt+0x3090>
   13fac:	bl	10e84 <__errno_location@plt>
   13fb0:	mov	r3, r0
   13fb4:	ldr	r4, [r3]
   13fb8:	ldr	r0, [pc, #36]	; 13fe4 <__assert_fail@plt+0x30a0>
   13fbc:	bl	10e54 <gettext@plt>
   13fc0:	mov	r3, r0
   13fc4:	mov	r2, r3
   13fc8:	mov	r1, r4
   13fcc:	mov	r0, #1
   13fd0:	bl	10df4 <error@plt>
   13fd4:	ldr	r3, [fp, #-16]
   13fd8:	mov	r0, r3
   13fdc:	sub	sp, fp, #8
   13fe0:	pop	{r4, fp, pc}
   13fe4:	andeq	fp, r1, r4, asr ip
   13fe8:	push	{fp, lr}
   13fec:	add	fp, sp, #4
   13ff0:	sub	sp, sp, #24
   13ff4:	str	r0, [fp, #-24]	; 0xffffffe8
   13ff8:	str	r1, [fp, #-28]	; 0xffffffe4
   13ffc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14000:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14004:	bl	13f78 <__assert_fail@plt+0x3034>
   14008:	str	r0, [fp, #-16]
   1400c:	ldr	r3, [fp, #-16]
   14010:	cmp	r3, #0
   14014:	bne	14020 <__assert_fail@plt+0x30dc>
   14018:	mov	r3, #0
   1401c:	b	14124 <__assert_fail@plt+0x31e0>
   14020:	mov	r3, #0
   14024:	str	r3, [fp, #-12]
   14028:	b	14038 <__assert_fail@plt+0x30f4>
   1402c:	ldr	r3, [fp, #-12]
   14030:	add	r3, r3, #1
   14034:	str	r3, [fp, #-12]
   14038:	ldr	r2, [fp, #-12]
   1403c:	ldr	r3, [fp, #-16]
   14040:	cmp	r2, r3
   14044:	bcs	14080 <__assert_fail@plt+0x313c>
   14048:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1404c:	ldr	r3, [fp, #-12]
   14050:	add	r3, r2, r3
   14054:	ldrb	r3, [r3]
   14058:	mov	r0, r3
   1405c:	bl	11078 <__assert_fail@plt+0x134>
   14060:	mov	r3, r0
   14064:	mov	r2, r3
   14068:	ldr	r3, [pc, #192]	; 14130 <__assert_fail@plt+0x31ec>
   1406c:	ldrb	r3, [r3, r2]
   14070:	eor	r3, r3, #1
   14074:	uxtb	r3, r3
   14078:	cmp	r3, #0
   1407c:	bne	1402c <__assert_fail@plt+0x30e8>
   14080:	ldr	r3, [fp, #-12]
   14084:	str	r3, [fp, #-8]
   14088:	ldr	r3, [fp, #-12]
   1408c:	add	r3, r3, #1
   14090:	str	r3, [fp, #-12]
   14094:	b	14104 <__assert_fail@plt+0x31c0>
   14098:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1409c:	ldr	r3, [fp, #-12]
   140a0:	add	r3, r2, r3
   140a4:	ldrb	r3, [r3]
   140a8:	mov	r0, r3
   140ac:	bl	11078 <__assert_fail@plt+0x134>
   140b0:	mov	r3, r0
   140b4:	mov	r2, r3
   140b8:	ldr	r3, [pc, #112]	; 14130 <__assert_fail@plt+0x31ec>
   140bc:	ldrb	r3, [r3, r2]
   140c0:	eor	r3, r3, #1
   140c4:	uxtb	r3, r3
   140c8:	cmp	r3, #0
   140cc:	beq	140f8 <__assert_fail@plt+0x31b4>
   140d0:	ldr	r3, [fp, #-8]
   140d4:	add	r2, r3, #1
   140d8:	str	r2, [fp, #-8]
   140dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   140e0:	add	r3, r2, r3
   140e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   140e8:	ldr	r2, [fp, #-12]
   140ec:	add	r2, r1, r2
   140f0:	ldrb	r2, [r2]
   140f4:	strb	r2, [r3]
   140f8:	ldr	r3, [fp, #-12]
   140fc:	add	r3, r3, #1
   14100:	str	r3, [fp, #-12]
   14104:	ldr	r2, [fp, #-12]
   14108:	ldr	r3, [fp, #-16]
   1410c:	cmp	r2, r3
   14110:	bcc	14098 <__assert_fail@plt+0x3154>
   14114:	ldr	r3, [fp, #-8]
   14118:	cmp	r3, #0
   1411c:	beq	13ffc <__assert_fail@plt+0x30b8>
   14120:	ldr	r3, [fp, #-8]
   14124:	mov	r0, r3
   14128:	sub	sp, fp, #4
   1412c:	pop	{fp, pc}
   14130:	andeq	pc, r2, ip, ror #4
   14134:	push	{r4, fp, lr}
   14138:	add	fp, sp, #8
   1413c:	sub	sp, sp, #20
   14140:	str	r0, [fp, #-24]	; 0xffffffe8
   14144:	str	r1, [fp, #-28]	; 0xffffffe4
   14148:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1414c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14150:	bl	13f78 <__assert_fail@plt+0x3034>
   14154:	str	r0, [fp, #-20]	; 0xffffffec
   14158:	mov	r3, #0
   1415c:	str	r3, [fp, #-16]
   14160:	b	141a8 <__assert_fail@plt+0x3264>
   14164:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14168:	ldr	r3, [fp, #-16]
   1416c:	add	r4, r2, r3
   14170:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14174:	ldr	r3, [fp, #-16]
   14178:	add	r3, r2, r3
   1417c:	ldrb	r3, [r3]
   14180:	mov	r0, r3
   14184:	bl	11078 <__assert_fail@plt+0x134>
   14188:	mov	r3, r0
   1418c:	mov	r2, r3
   14190:	ldr	r3, [pc, #48]	; 141c8 <__assert_fail@plt+0x3284>
   14194:	ldrb	r3, [r3, r2]
   14198:	strb	r3, [r4]
   1419c:	ldr	r3, [fp, #-16]
   141a0:	add	r3, r3, #1
   141a4:	str	r3, [fp, #-16]
   141a8:	ldr	r2, [fp, #-16]
   141ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   141b0:	cmp	r2, r3
   141b4:	bcc	14164 <__assert_fail@plt+0x3220>
   141b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141bc:	mov	r0, r3
   141c0:	sub	sp, fp, #8
   141c4:	pop	{r4, fp, pc}
   141c8:	andeq	pc, r2, ip, ror #6
   141cc:	push	{fp, lr}
   141d0:	add	fp, sp, #4
   141d4:	sub	sp, sp, #24
   141d8:	str	r0, [fp, #-16]
   141dc:	mov	r3, r1
   141e0:	str	r2, [fp, #-24]	; 0xffffffe8
   141e4:	strb	r3, [fp, #-17]	; 0xffffffef
   141e8:	ldr	r1, [fp, #-16]
   141ec:	mvn	r2, #1
   141f0:	mvn	r3, #0
   141f4:	strd	r2, [r1, #8]
   141f8:	b	14210 <__assert_fail@plt+0x32cc>
   141fc:	ldr	r3, [fp, #-12]
   14200:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14204:	add	r3, r2, r3
   14208:	mov	r2, #1
   1420c:	strb	r2, [r3]
   14210:	mov	r1, #0
   14214:	ldr	r0, [fp, #-16]
   14218:	bl	12b5c <__assert_fail@plt+0x1c18>
   1421c:	str	r0, [fp, #-12]
   14220:	ldr	r3, [fp, #-12]
   14224:	cmn	r3, #1
   14228:	bne	141fc <__assert_fail@plt+0x32b8>
   1422c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   14230:	cmp	r3, #0
   14234:	beq	1429c <__assert_fail@plt+0x3358>
   14238:	mov	r3, #0
   1423c:	str	r3, [fp, #-8]
   14240:	b	14290 <__assert_fail@plt+0x334c>
   14244:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14248:	ldr	r3, [fp, #-8]
   1424c:	add	r3, r2, r3
   14250:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14254:	ldr	r2, [fp, #-8]
   14258:	add	r2, r1, r2
   1425c:	ldrb	r2, [r2]
   14260:	cmp	r2, #0
   14264:	movne	r2, #1
   14268:	moveq	r2, #0
   1426c:	uxtb	r2, r2
   14270:	eor	r2, r2, #1
   14274:	uxtb	r2, r2
   14278:	and	r2, r2, #1
   1427c:	uxtb	r2, r2
   14280:	strb	r2, [r3]
   14284:	ldr	r3, [fp, #-8]
   14288:	add	r3, r3, #1
   1428c:	str	r3, [fp, #-8]
   14290:	ldr	r3, [fp, #-8]
   14294:	cmp	r3, #255	; 0xff
   14298:	bls	14244 <__assert_fail@plt+0x3300>
   1429c:	nop			; (mov r0, r0)
   142a0:	sub	sp, fp, #4
   142a4:	pop	{fp, pc}
   142a8:	push	{r4, fp, lr}
   142ac:	add	fp, sp, #8
   142b0:	sub	sp, sp, #180	; 0xb4
   142b4:	str	r0, [fp, #-176]	; 0xffffff50
   142b8:	str	r1, [fp, #-180]	; 0xffffff4c
   142bc:	sub	r3, fp, #124	; 0x7c
   142c0:	str	r3, [fp, #-40]	; 0xffffffd8
   142c4:	sub	r3, fp, #164	; 0xa4
   142c8:	str	r3, [fp, #-16]
   142cc:	ldr	r3, [fp, #-180]	; 0xffffff4c
   142d0:	ldr	r3, [r3]
   142d4:	mov	r0, r3
   142d8:	bl	15024 <__assert_fail@plt+0x40e0>
   142dc:	ldr	r1, [pc, #2524]	; 14cc0 <__assert_fail@plt+0x3d7c>
   142e0:	mov	r0, #6
   142e4:	bl	10ed8 <setlocale@plt>
   142e8:	ldr	r1, [pc, #2516]	; 14cc4 <__assert_fail@plt+0x3d80>
   142ec:	ldr	r0, [pc, #2516]	; 14cc8 <__assert_fail@plt+0x3d84>
   142f0:	bl	10f14 <bindtextdomain@plt>
   142f4:	ldr	r0, [pc, #2508]	; 14cc8 <__assert_fail@plt+0x3d84>
   142f8:	bl	10d94 <textdomain@plt>
   142fc:	ldr	r0, [pc, #2504]	; 14ccc <__assert_fail@plt+0x3d88>
   14300:	bl	1aa5c <__assert_fail@plt+0x9b18>
   14304:	b	1440c <__assert_fail@plt+0x34c8>
   14308:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1430c:	cmp	r3, #67	; 0x43
   14310:	beq	14384 <__assert_fail@plt+0x3440>
   14314:	cmp	r3, #67	; 0x43
   14318:	bgt	14338 <__assert_fail@plt+0x33f4>
   1431c:	cmn	r3, #2
   14320:	beq	143c4 <__assert_fail@plt+0x3480>
   14324:	cmp	r3, #65	; 0x41
   14328:	beq	14368 <__assert_fail@plt+0x3424>
   1432c:	cmn	r3, #3
   14330:	beq	143cc <__assert_fail@plt+0x3488>
   14334:	b	14404 <__assert_fail@plt+0x34c0>
   14338:	cmp	r3, #100	; 0x64
   1433c:	beq	14394 <__assert_fail@plt+0x3450>
   14340:	cmp	r3, #100	; 0x64
   14344:	bgt	14354 <__assert_fail@plt+0x3410>
   14348:	cmp	r3, #99	; 0x63
   1434c:	beq	14384 <__assert_fail@plt+0x3440>
   14350:	b	14404 <__assert_fail@plt+0x34c0>
   14354:	cmp	r3, #115	; 0x73
   14358:	beq	143a4 <__assert_fail@plt+0x3460>
   1435c:	cmp	r3, #116	; 0x74
   14360:	beq	143b4 <__assert_fail@plt+0x3470>
   14364:	b	14404 <__assert_fail@plt+0x34c0>
   14368:	ldr	r1, [pc, #2400]	; 14cd0 <__assert_fail@plt+0x3d8c>
   1436c:	mov	r0, #3
   14370:	bl	10ed8 <setlocale@plt>
   14374:	ldr	r1, [pc, #2388]	; 14cd0 <__assert_fail@plt+0x3d8c>
   14378:	mov	r0, #0
   1437c:	bl	10ed8 <setlocale@plt>
   14380:	b	1440c <__assert_fail@plt+0x34c8>
   14384:	ldr	r3, [pc, #2376]	; 14cd4 <__assert_fail@plt+0x3d90>
   14388:	mov	r2, #1
   1438c:	strb	r2, [r3]
   14390:	b	1440c <__assert_fail@plt+0x34c8>
   14394:	ldr	r3, [pc, #2364]	; 14cd8 <__assert_fail@plt+0x3d94>
   14398:	mov	r2, #1
   1439c:	strb	r2, [r3]
   143a0:	b	1440c <__assert_fail@plt+0x34c8>
   143a4:	ldr	r3, [pc, #2352]	; 14cdc <__assert_fail@plt+0x3d98>
   143a8:	mov	r2, #1
   143ac:	strb	r2, [r3]
   143b0:	b	1440c <__assert_fail@plt+0x34c8>
   143b4:	ldr	r3, [pc, #2340]	; 14ce0 <__assert_fail@plt+0x3d9c>
   143b8:	mov	r2, #1
   143bc:	strb	r2, [r3]
   143c0:	b	1440c <__assert_fail@plt+0x34c8>
   143c4:	mov	r0, #0
   143c8:	bl	112c4 <__assert_fail@plt+0x380>
   143cc:	ldr	r3, [pc, #2320]	; 14ce4 <__assert_fail@plt+0x3da0>
   143d0:	ldr	r0, [r3]
   143d4:	ldr	r3, [pc, #2316]	; 14ce8 <__assert_fail@plt+0x3da4>
   143d8:	ldr	r2, [r3]
   143dc:	mov	r3, #0
   143e0:	str	r3, [sp, #4]
   143e4:	ldr	r3, [pc, #2304]	; 14cec <__assert_fail@plt+0x3da8>
   143e8:	str	r3, [sp]
   143ec:	mov	r3, r2
   143f0:	ldr	r2, [pc, #2296]	; 14cf0 <__assert_fail@plt+0x3dac>
   143f4:	ldr	r1, [pc, #2296]	; 14cf4 <__assert_fail@plt+0x3db0>
   143f8:	bl	17ec4 <__assert_fail@plt+0x6f80>
   143fc:	mov	r0, #0
   14400:	bl	10e48 <exit@plt>
   14404:	mov	r0, #1
   14408:	bl	112c4 <__assert_fail@plt+0x380>
   1440c:	mov	r3, #0
   14410:	str	r3, [sp]
   14414:	ldr	r3, [pc, #2268]	; 14cf8 <__assert_fail@plt+0x3db4>
   14418:	ldr	r2, [pc, #2268]	; 14cfc <__assert_fail@plt+0x3db8>
   1441c:	ldr	r1, [fp, #-180]	; 0xffffff4c
   14420:	ldr	r0, [fp, #-176]	; 0xffffff50
   14424:	bl	10e30 <getopt_long@plt>
   14428:	str	r0, [fp, #-44]	; 0xffffffd4
   1442c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14430:	cmn	r3, #1
   14434:	bne	14308 <__assert_fail@plt+0x33c4>
   14438:	ldr	r3, [pc, #2240]	; 14d00 <__assert_fail@plt+0x3dbc>
   1443c:	ldr	r3, [r3]
   14440:	ldr	r2, [fp, #-176]	; 0xffffff50
   14444:	sub	r3, r2, r3
   14448:	str	r3, [fp, #-48]	; 0xffffffd0
   1444c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14450:	cmp	r3, #2
   14454:	bne	14478 <__assert_fail@plt+0x3534>
   14458:	ldr	r3, [pc, #2168]	; 14cd8 <__assert_fail@plt+0x3d94>
   1445c:	ldrb	r3, [r3]
   14460:	eor	r3, r3, #1
   14464:	uxtb	r3, r3
   14468:	cmp	r3, #0
   1446c:	beq	14478 <__assert_fail@plt+0x3534>
   14470:	mov	r3, #1
   14474:	b	1447c <__assert_fail@plt+0x3538>
   14478:	mov	r3, #0
   1447c:	and	r3, r3, #1
   14480:	uxtb	r2, r3
   14484:	ldr	r3, [pc, #2168]	; 14d04 <__assert_fail@plt+0x3dc0>
   14488:	strb	r2, [r3]
   1448c:	ldr	r3, [pc, #2116]	; 14cd8 <__assert_fail@plt+0x3d94>
   14490:	ldrb	r2, [r3]
   14494:	ldr	r3, [pc, #2112]	; 14cdc <__assert_fail@plt+0x3d98>
   14498:	ldrb	r3, [r3]
   1449c:	cmp	r2, r3
   144a0:	bne	144ac <__assert_fail@plt+0x3568>
   144a4:	mov	r3, #2
   144a8:	b	144b0 <__assert_fail@plt+0x356c>
   144ac:	mov	r3, #1
   144b0:	str	r3, [fp, #-52]	; 0xffffffcc
   144b4:	ldr	r3, [pc, #2076]	; 14cd8 <__assert_fail@plt+0x3d94>
   144b8:	ldrb	r3, [r3]
   144bc:	mov	r2, r3
   144c0:	ldr	r3, [pc, #2068]	; 14cdc <__assert_fail@plt+0x3d98>
   144c4:	ldrb	r3, [r3]
   144c8:	cmp	r2, r3
   144cc:	bgt	144d8 <__assert_fail@plt+0x3594>
   144d0:	mov	r3, #2
   144d4:	b	144dc <__assert_fail@plt+0x3598>
   144d8:	mov	r3, #1
   144dc:	str	r3, [fp, #-56]	; 0xffffffc8
   144e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   144e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   144e8:	cmp	r2, r3
   144ec:	bge	145a4 <__assert_fail@plt+0x3660>
   144f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   144f4:	cmp	r3, #0
   144f8:	bne	1451c <__assert_fail@plt+0x35d8>
   144fc:	ldr	r0, [pc, #2052]	; 14d08 <__assert_fail@plt+0x3dc4>
   14500:	bl	10e54 <gettext@plt>
   14504:	mov	r3, r0
   14508:	mov	r2, r3
   1450c:	mov	r1, #0
   14510:	mov	r0, #0
   14514:	bl	10df4 <error@plt>
   14518:	b	1459c <__assert_fail@plt+0x3658>
   1451c:	ldr	r0, [pc, #2024]	; 14d0c <__assert_fail@plt+0x3dc8>
   14520:	bl	10e54 <gettext@plt>
   14524:	mov	r4, r0
   14528:	ldr	r3, [fp, #-176]	; 0xffffff50
   1452c:	sub	r3, r3, #-1073741823	; 0xc0000001
   14530:	lsl	r3, r3, #2
   14534:	ldr	r2, [fp, #-180]	; 0xffffff4c
   14538:	add	r3, r2, r3
   1453c:	ldr	r3, [r3]
   14540:	mov	r0, r3
   14544:	bl	17754 <__assert_fail@plt+0x6810>
   14548:	mov	r3, r0
   1454c:	mov	r2, r4
   14550:	mov	r1, #0
   14554:	mov	r0, #0
   14558:	bl	10df4 <error@plt>
   1455c:	ldr	r3, [pc, #1964]	; 14d10 <__assert_fail@plt+0x3dcc>
   14560:	ldr	r4, [r3]
   14564:	ldr	r3, [pc, #1904]	; 14cdc <__assert_fail@plt+0x3d98>
   14568:	ldrb	r3, [r3]
   1456c:	cmp	r3, #0
   14570:	beq	1457c <__assert_fail@plt+0x3638>
   14574:	ldr	r3, [pc, #1944]	; 14d14 <__assert_fail@plt+0x3dd0>
   14578:	b	14580 <__assert_fail@plt+0x363c>
   1457c:	ldr	r3, [pc, #1940]	; 14d18 <__assert_fail@plt+0x3dd4>
   14580:	mov	r0, r3
   14584:	bl	10e54 <gettext@plt>
   14588:	mov	r3, r0
   1458c:	mov	r2, r3
   14590:	ldr	r1, [pc, #1924]	; 14d1c <__assert_fail@plt+0x3dd8>
   14594:	mov	r0, r4
   14598:	bl	10e78 <fprintf@plt>
   1459c:	mov	r0, #1
   145a0:	bl	112c4 <__assert_fail@plt+0x380>
   145a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145ac:	cmp	r2, r3
   145b0:	bge	14634 <__assert_fail@plt+0x36f0>
   145b4:	ldr	r0, [pc, #1892]	; 14d20 <__assert_fail@plt+0x3ddc>
   145b8:	bl	10e54 <gettext@plt>
   145bc:	mov	r4, r0
   145c0:	ldr	r3, [pc, #1848]	; 14d00 <__assert_fail@plt+0x3dbc>
   145c4:	ldr	r2, [r3]
   145c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   145cc:	add	r3, r2, r3
   145d0:	lsl	r3, r3, #2
   145d4:	ldr	r2, [fp, #-180]	; 0xffffff4c
   145d8:	add	r3, r2, r3
   145dc:	ldr	r3, [r3]
   145e0:	mov	r0, r3
   145e4:	bl	17754 <__assert_fail@plt+0x6810>
   145e8:	mov	r3, r0
   145ec:	mov	r2, r4
   145f0:	mov	r1, #0
   145f4:	mov	r0, #0
   145f8:	bl	10df4 <error@plt>
   145fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14600:	cmp	r3, #2
   14604:	bne	1462c <__assert_fail@plt+0x36e8>
   14608:	ldr	r3, [pc, #1792]	; 14d10 <__assert_fail@plt+0x3dcc>
   1460c:	ldr	r4, [r3]
   14610:	ldr	r0, [pc, #1804]	; 14d24 <__assert_fail@plt+0x3de0>
   14614:	bl	10e54 <gettext@plt>
   14618:	mov	r3, r0
   1461c:	mov	r2, r3
   14620:	ldr	r1, [pc, #1780]	; 14d1c <__assert_fail@plt+0x3dd8>
   14624:	mov	r0, r4
   14628:	bl	10e78 <fprintf@plt>
   1462c:	mov	r0, #1
   14630:	bl	112c4 <__assert_fail@plt+0x380>
   14634:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14638:	bl	137a4 <__assert_fail@plt+0x2860>
   1463c:	ldr	r3, [pc, #1724]	; 14d00 <__assert_fail@plt+0x3dbc>
   14640:	ldr	r3, [r3]
   14644:	lsl	r3, r3, #2
   14648:	ldr	r2, [fp, #-180]	; 0xffffff4c
   1464c:	add	r3, r2, r3
   14650:	ldr	r3, [r3]
   14654:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14658:	mov	r0, r3
   1465c:	bl	137fc <__assert_fail@plt+0x28b8>
   14660:	mov	r3, r0
   14664:	eor	r3, r3, #1
   14668:	uxtb	r3, r3
   1466c:	cmp	r3, #0
   14670:	beq	1467c <__assert_fail@plt+0x3738>
   14674:	mov	r3, #1
   14678:	b	14cb4 <__assert_fail@plt+0x3d70>
   1467c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14680:	cmp	r3, #2
   14684:	bne	146d4 <__assert_fail@plt+0x3790>
   14688:	ldr	r0, [fp, #-16]
   1468c:	bl	137a4 <__assert_fail@plt+0x2860>
   14690:	ldr	r3, [pc, #1640]	; 14d00 <__assert_fail@plt+0x3dbc>
   14694:	ldr	r3, [r3]
   14698:	add	r3, r3, #1
   1469c:	lsl	r3, r3, #2
   146a0:	ldr	r2, [fp, #-180]	; 0xffffff4c
   146a4:	add	r3, r2, r3
   146a8:	ldr	r3, [r3]
   146ac:	ldr	r1, [fp, #-16]
   146b0:	mov	r0, r3
   146b4:	bl	137fc <__assert_fail@plt+0x28b8>
   146b8:	mov	r3, r0
   146bc:	eor	r3, r3, #1
   146c0:	uxtb	r3, r3
   146c4:	cmp	r3, #0
   146c8:	beq	146dc <__assert_fail@plt+0x3798>
   146cc:	mov	r3, #1
   146d0:	b	14cb4 <__assert_fail@plt+0x3d70>
   146d4:	mov	r3, #0
   146d8:	str	r3, [fp, #-16]
   146dc:	ldr	r1, [fp, #-16]
   146e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   146e4:	bl	13a84 <__assert_fail@plt+0x2b40>
   146e8:	mov	r1, #0
   146ec:	mov	r0, #0
   146f0:	bl	18b80 <__assert_fail@plt+0x7c3c>
   146f4:	mov	r1, #0
   146f8:	mov	r0, #1
   146fc:	bl	18b80 <__assert_fail@plt+0x7c3c>
   14700:	ldr	r3, [pc, #1568]	; 14d28 <__assert_fail@plt+0x3de4>
   14704:	ldr	r3, [r3]
   14708:	mov	r1, #2
   1470c:	mov	r0, r3
   14710:	bl	14f3c <__assert_fail@plt+0x3ff8>
   14714:	ldr	r3, [pc, #1472]	; 14cdc <__assert_fail@plt+0x3d98>
   14718:	ldrb	r3, [r3]
   1471c:	cmp	r3, #0
   14720:	beq	1475c <__assert_fail@plt+0x3818>
   14724:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14728:	cmp	r3, #1
   1472c:	bne	1475c <__assert_fail@plt+0x3818>
   14730:	ldr	r3, [pc, #1436]	; 14cd4 <__assert_fail@plt+0x3d90>
   14734:	ldrb	r3, [r3]
   14738:	ldr	r2, [pc, #1516]	; 14d2c <__assert_fail@plt+0x3de8>
   1473c:	mov	r1, r3
   14740:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14744:	bl	141cc <__assert_fail@plt+0x3288>
   14748:	ldr	r2, [pc, #1504]	; 14d30 <__assert_fail@plt+0x3dec>
   1474c:	mov	r1, #8192	; 0x2000
   14750:	ldr	r0, [pc, #1500]	; 14d34 <__assert_fail@plt+0x3df0>
   14754:	bl	13cc8 <__assert_fail@plt+0x2d84>
   14758:	b	14c70 <__assert_fail@plt+0x3d2c>
   1475c:	ldr	r3, [pc, #1396]	; 14cd8 <__assert_fail@plt+0x3d94>
   14760:	ldrb	r3, [r3]
   14764:	cmp	r3, #0
   14768:	beq	14804 <__assert_fail@plt+0x38c0>
   1476c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14770:	cmp	r3, #1
   14774:	bne	14804 <__assert_fail@plt+0x38c0>
   14778:	ldr	r3, [pc, #1364]	; 14cd4 <__assert_fail@plt+0x3d90>
   1477c:	ldrb	r3, [r3]
   14780:	ldr	r2, [pc, #1456]	; 14d38 <__assert_fail@plt+0x3df4>
   14784:	mov	r1, r3
   14788:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1478c:	bl	141cc <__assert_fail@plt+0x3288>
   14790:	mov	r1, #8192	; 0x2000
   14794:	ldr	r0, [pc, #1432]	; 14d34 <__assert_fail@plt+0x3df0>
   14798:	bl	13fe8 <__assert_fail@plt+0x30a4>
   1479c:	str	r0, [fp, #-60]	; 0xffffffc4
   147a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   147a4:	cmp	r3, #0
   147a8:	beq	147fc <__assert_fail@plt+0x38b8>
   147ac:	ldr	r3, [pc, #1328]	; 14ce4 <__assert_fail@plt+0x3da0>
   147b0:	ldr	r3, [r3]
   147b4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   147b8:	mov	r1, #1
   147bc:	ldr	r0, [pc, #1392]	; 14d34 <__assert_fail@plt+0x3df0>
   147c0:	bl	10d58 <fwrite_unlocked@plt>
   147c4:	mov	r2, r0
   147c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   147cc:	cmp	r2, r3
   147d0:	beq	14790 <__assert_fail@plt+0x384c>
   147d4:	bl	10e84 <__errno_location@plt>
   147d8:	mov	r3, r0
   147dc:	ldr	r4, [r3]
   147e0:	ldr	r0, [pc, #1364]	; 14d3c <__assert_fail@plt+0x3df8>
   147e4:	bl	10e54 <gettext@plt>
   147e8:	mov	r3, r0
   147ec:	mov	r2, r3
   147f0:	mov	r1, r4
   147f4:	mov	r0, #1
   147f8:	bl	10df4 <error@plt>
   147fc:	nop			; (mov r0, r0)
   14800:	b	14c70 <__assert_fail@plt+0x3d2c>
   14804:	ldr	r3, [pc, #1232]	; 14cdc <__assert_fail@plt+0x3d98>
   14808:	ldrb	r3, [r3]
   1480c:	cmp	r3, #0
   14810:	beq	1486c <__assert_fail@plt+0x3928>
   14814:	ldr	r3, [pc, #1212]	; 14cd8 <__assert_fail@plt+0x3d94>
   14818:	ldrb	r3, [r3]
   1481c:	cmp	r3, #0
   14820:	beq	1486c <__assert_fail@plt+0x3928>
   14824:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14828:	cmp	r3, #2
   1482c:	bne	1486c <__assert_fail@plt+0x3928>
   14830:	ldr	r3, [pc, #1180]	; 14cd4 <__assert_fail@plt+0x3d90>
   14834:	ldrb	r3, [r3]
   14838:	ldr	r2, [pc, #1272]	; 14d38 <__assert_fail@plt+0x3df4>
   1483c:	mov	r1, r3
   14840:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14844:	bl	141cc <__assert_fail@plt+0x3288>
   14848:	ldr	r2, [pc, #1244]	; 14d2c <__assert_fail@plt+0x3de8>
   1484c:	mov	r1, #0
   14850:	ldr	r0, [fp, #-16]
   14854:	bl	141cc <__assert_fail@plt+0x3288>
   14858:	ldr	r2, [pc, #1248]	; 14d40 <__assert_fail@plt+0x3dfc>
   1485c:	mov	r1, #8192	; 0x2000
   14860:	ldr	r0, [pc, #1228]	; 14d34 <__assert_fail@plt+0x3df0>
   14864:	bl	13cc8 <__assert_fail@plt+0x2d84>
   14868:	b	14c70 <__assert_fail@plt+0x3d2c>
   1486c:	ldr	r3, [pc, #1168]	; 14d04 <__assert_fail@plt+0x3dc0>
   14870:	ldrb	r3, [r3]
   14874:	cmp	r3, #0
   14878:	beq	14c70 <__assert_fail@plt+0x3d2c>
   1487c:	ldr	r3, [pc, #1104]	; 14cd4 <__assert_fail@plt+0x3d90>
   14880:	ldrb	r3, [r3]
   14884:	cmp	r3, #0
   14888:	beq	149a4 <__assert_fail@plt+0x3a60>
   1488c:	ldr	r3, [pc, #1188]	; 14d38 <__assert_fail@plt+0x3df4>
   14890:	str	r3, [fp, #-64]	; 0xffffffc0
   14894:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14898:	mov	r1, #0
   1489c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148a0:	bl	141cc <__assert_fail@plt+0x3288>
   148a4:	ldr	r1, [fp, #-16]
   148a8:	mvn	r2, #1
   148ac:	mvn	r3, #0
   148b0:	strd	r2, [r1, #8]
   148b4:	mov	r3, #0
   148b8:	str	r3, [fp, #-20]	; 0xffffffec
   148bc:	b	148e8 <__assert_fail@plt+0x39a4>
   148c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148c4:	uxtb	r1, r3
   148c8:	ldr	r2, [pc, #1140]	; 14d44 <__assert_fail@plt+0x3e00>
   148cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   148d0:	add	r3, r2, r3
   148d4:	mov	r2, r1
   148d8:	strb	r2, [r3]
   148dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   148e0:	add	r3, r3, #1
   148e4:	str	r3, [fp, #-20]	; 0xffffffec
   148e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148ec:	cmp	r3, #255	; 0xff
   148f0:	ble	148c0 <__assert_fail@plt+0x397c>
   148f4:	mov	r3, #0
   148f8:	str	r3, [fp, #-24]	; 0xffffffe8
   148fc:	b	14994 <__assert_fail@plt+0x3a50>
   14900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14904:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14908:	add	r3, r2, r3
   1490c:	ldrb	r3, [r3]
   14910:	eor	r3, r3, #1
   14914:	uxtb	r3, r3
   14918:	cmp	r3, #0
   1491c:	beq	14988 <__assert_fail@plt+0x3a44>
   14920:	mov	r1, #0
   14924:	ldr	r0, [fp, #-16]
   14928:	bl	12b5c <__assert_fail@plt+0x1c18>
   1492c:	str	r0, [fp, #-68]	; 0xffffffbc
   14930:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14934:	cmn	r3, #1
   14938:	bne	14960 <__assert_fail@plt+0x3a1c>
   1493c:	ldr	r3, [pc, #924]	; 14ce0 <__assert_fail@plt+0x3d9c>
   14940:	ldrb	r3, [r3]
   14944:	cmp	r3, #0
   14948:	bne	14960 <__assert_fail@plt+0x3a1c>
   1494c:	ldr	r3, [pc, #1012]	; 14d48 <__assert_fail@plt+0x3e04>
   14950:	mov	r2, #1840	; 0x730
   14954:	ldr	r1, [pc, #1008]	; 14d4c <__assert_fail@plt+0x3e08>
   14958:	ldr	r0, [pc, #1008]	; 14d50 <__assert_fail@plt+0x3e0c>
   1495c:	bl	10f44 <__assert_fail@plt>
   14960:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14964:	cmn	r3, #1
   14968:	beq	14bc8 <__assert_fail@plt+0x3c84>
   1496c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14970:	uxtb	r1, r3
   14974:	ldr	r2, [pc, #968]	; 14d44 <__assert_fail@plt+0x3e00>
   14978:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1497c:	add	r3, r2, r3
   14980:	mov	r2, r1
   14984:	strb	r2, [r3]
   14988:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1498c:	add	r3, r3, #1
   14990:	str	r3, [fp, #-24]	; 0xffffffe8
   14994:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14998:	cmp	r3, #255	; 0xff
   1499c:	ble	14900 <__assert_fail@plt+0x39bc>
   149a0:	b	14bcc <__assert_fail@plt+0x3c88>
   149a4:	mov	r3, #0
   149a8:	str	r3, [fp, #-28]	; 0xffffffe4
   149ac:	b	149d8 <__assert_fail@plt+0x3a94>
   149b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149b4:	uxtb	r1, r3
   149b8:	ldr	r2, [pc, #900]	; 14d44 <__assert_fail@plt+0x3e00>
   149bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149c0:	add	r3, r2, r3
   149c4:	mov	r2, r1
   149c8:	strb	r2, [r3]
   149cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149d0:	add	r3, r3, #1
   149d4:	str	r3, [fp, #-28]	; 0xffffffe4
   149d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149dc:	cmp	r3, #255	; 0xff
   149e0:	ble	149b0 <__assert_fail@plt+0x3a6c>
   149e4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   149e8:	mvn	r2, #1
   149ec:	mvn	r3, #0
   149f0:	strd	r2, [r1, #8]
   149f4:	ldr	r1, [fp, #-16]
   149f8:	mvn	r2, #1
   149fc:	mvn	r3, #0
   14a00:	strd	r2, [r1, #8]
   14a04:	sub	r3, fp, #168	; 0xa8
   14a08:	mov	r1, r3
   14a0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a10:	bl	12b5c <__assert_fail@plt+0x1c18>
   14a14:	str	r0, [fp, #-72]	; 0xffffffb8
   14a18:	sub	r3, fp, #172	; 0xac
   14a1c:	mov	r1, r3
   14a20:	ldr	r0, [fp, #-16]
   14a24:	bl	12b5c <__assert_fail@plt+0x1c18>
   14a28:	str	r0, [fp, #-76]	; 0xffffffb4
   14a2c:	ldr	r3, [fp, #-168]	; 0xffffff58
   14a30:	cmp	r3, #0
   14a34:	bne	14ab8 <__assert_fail@plt+0x3b74>
   14a38:	ldr	r3, [fp, #-172]	; 0xffffff54
   14a3c:	cmp	r3, #1
   14a40:	bne	14ab8 <__assert_fail@plt+0x3b74>
   14a44:	mov	r3, #0
   14a48:	str	r3, [fp, #-32]	; 0xffffffe0
   14a4c:	b	14aa8 <__assert_fail@plt+0x3b64>
   14a50:	bl	10e3c <__ctype_b_loc@plt>
   14a54:	mov	r3, r0
   14a58:	ldr	r2, [r3]
   14a5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a60:	lsl	r3, r3, #1
   14a64:	add	r3, r2, r3
   14a68:	ldrh	r3, [r3]
   14a6c:	and	r3, r3, #512	; 0x200
   14a70:	cmp	r3, #0
   14a74:	beq	14a9c <__assert_fail@plt+0x3b58>
   14a78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a7c:	bl	10ee4 <toupper@plt>
   14a80:	mov	r3, r0
   14a84:	uxtb	r1, r3
   14a88:	ldr	r2, [pc, #692]	; 14d44 <__assert_fail@plt+0x3e00>
   14a8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14a90:	add	r3, r2, r3
   14a94:	mov	r2, r1
   14a98:	strb	r2, [r3]
   14a9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14aa0:	add	r3, r3, #1
   14aa4:	str	r3, [fp, #-32]	; 0xffffffe0
   14aa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14aac:	cmp	r3, #255	; 0xff
   14ab0:	ble	14a50 <__assert_fail@plt+0x3b0c>
   14ab4:	b	14b78 <__assert_fail@plt+0x3c34>
   14ab8:	ldr	r3, [fp, #-168]	; 0xffffff58
   14abc:	cmp	r3, #1
   14ac0:	bne	14b44 <__assert_fail@plt+0x3c00>
   14ac4:	ldr	r3, [fp, #-172]	; 0xffffff54
   14ac8:	cmp	r3, #0
   14acc:	bne	14b44 <__assert_fail@plt+0x3c00>
   14ad0:	mov	r3, #0
   14ad4:	str	r3, [fp, #-36]	; 0xffffffdc
   14ad8:	b	14b34 <__assert_fail@plt+0x3bf0>
   14adc:	bl	10e3c <__ctype_b_loc@plt>
   14ae0:	mov	r3, r0
   14ae4:	ldr	r2, [r3]
   14ae8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14aec:	lsl	r3, r3, #1
   14af0:	add	r3, r2, r3
   14af4:	ldrh	r3, [r3]
   14af8:	and	r3, r3, #256	; 0x100
   14afc:	cmp	r3, #0
   14b00:	beq	14b28 <__assert_fail@plt+0x3be4>
   14b04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14b08:	bl	10d40 <tolower@plt>
   14b0c:	mov	r3, r0
   14b10:	uxtb	r1, r3
   14b14:	ldr	r2, [pc, #552]	; 14d44 <__assert_fail@plt+0x3e00>
   14b18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b1c:	add	r3, r2, r3
   14b20:	mov	r2, r1
   14b24:	strb	r2, [r3]
   14b28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b2c:	add	r3, r3, #1
   14b30:	str	r3, [fp, #-36]	; 0xffffffdc
   14b34:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b38:	cmp	r3, #255	; 0xff
   14b3c:	ble	14adc <__assert_fail@plt+0x3b98>
   14b40:	b	14b78 <__assert_fail@plt+0x3c34>
   14b44:	ldr	r3, [fp, #-72]	; 0xffffffb8
   14b48:	cmn	r3, #1
   14b4c:	beq	14b98 <__assert_fail@plt+0x3c54>
   14b50:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14b54:	cmn	r3, #1
   14b58:	beq	14b98 <__assert_fail@plt+0x3c54>
   14b5c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14b60:	uxtb	r1, r3
   14b64:	ldr	r2, [pc, #472]	; 14d44 <__assert_fail@plt+0x3e00>
   14b68:	ldr	r3, [fp, #-72]	; 0xffffffb8
   14b6c:	add	r3, r2, r3
   14b70:	mov	r2, r1
   14b74:	strb	r2, [r3]
   14b78:	ldr	r3, [fp, #-172]	; 0xffffff54
   14b7c:	cmp	r3, #2
   14b80:	beq	14a04 <__assert_fail@plt+0x3ac0>
   14b84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b88:	bl	12b18 <__assert_fail@plt+0x1bd4>
   14b8c:	ldr	r0, [fp, #-16]
   14b90:	bl	12b18 <__assert_fail@plt+0x1bd4>
   14b94:	b	14a04 <__assert_fail@plt+0x3ac0>
   14b98:	ldr	r3, [fp, #-72]	; 0xffffffb8
   14b9c:	cmn	r3, #1
   14ba0:	beq	14bcc <__assert_fail@plt+0x3c88>
   14ba4:	ldr	r3, [pc, #308]	; 14ce0 <__assert_fail@plt+0x3d9c>
   14ba8:	ldrb	r3, [r3]
   14bac:	cmp	r3, #0
   14bb0:	bne	14bcc <__assert_fail@plt+0x3c88>
   14bb4:	ldr	r3, [pc, #396]	; 14d48 <__assert_fail@plt+0x3e04>
   14bb8:	ldr	r2, [pc, #404]	; 14d54 <__assert_fail@plt+0x3e10>
   14bbc:	ldr	r1, [pc, #392]	; 14d4c <__assert_fail@plt+0x3e08>
   14bc0:	ldr	r0, [pc, #400]	; 14d58 <__assert_fail@plt+0x3e14>
   14bc4:	bl	10f44 <__assert_fail@plt>
   14bc8:	nop			; (mov r0, r0)
   14bcc:	ldr	r3, [pc, #264]	; 14cdc <__assert_fail@plt+0x3d98>
   14bd0:	ldrb	r3, [r3]
   14bd4:	cmp	r3, #0
   14bd8:	beq	14c00 <__assert_fail@plt+0x3cbc>
   14bdc:	ldr	r2, [pc, #328]	; 14d2c <__assert_fail@plt+0x3de8>
   14be0:	mov	r1, #0
   14be4:	ldr	r0, [fp, #-16]
   14be8:	bl	141cc <__assert_fail@plt+0x3288>
   14bec:	ldr	r2, [pc, #360]	; 14d5c <__assert_fail@plt+0x3e18>
   14bf0:	mov	r1, #8192	; 0x2000
   14bf4:	ldr	r0, [pc, #312]	; 14d34 <__assert_fail@plt+0x3df0>
   14bf8:	bl	13cc8 <__assert_fail@plt+0x2d84>
   14bfc:	b	14c70 <__assert_fail@plt+0x3d2c>
   14c00:	mov	r1, #8192	; 0x2000
   14c04:	ldr	r0, [pc, #296]	; 14d34 <__assert_fail@plt+0x3df0>
   14c08:	bl	14134 <__assert_fail@plt+0x31f0>
   14c0c:	str	r0, [fp, #-80]	; 0xffffffb0
   14c10:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14c14:	cmp	r3, #0
   14c18:	beq	14c6c <__assert_fail@plt+0x3d28>
   14c1c:	ldr	r3, [pc, #192]	; 14ce4 <__assert_fail@plt+0x3da0>
   14c20:	ldr	r3, [r3]
   14c24:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14c28:	mov	r1, #1
   14c2c:	ldr	r0, [pc, #256]	; 14d34 <__assert_fail@plt+0x3df0>
   14c30:	bl	10d58 <fwrite_unlocked@plt>
   14c34:	mov	r2, r0
   14c38:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14c3c:	cmp	r2, r3
   14c40:	beq	14c00 <__assert_fail@plt+0x3cbc>
   14c44:	bl	10e84 <__errno_location@plt>
   14c48:	mov	r3, r0
   14c4c:	ldr	r4, [r3]
   14c50:	ldr	r0, [pc, #228]	; 14d3c <__assert_fail@plt+0x3df8>
   14c54:	bl	10e54 <gettext@plt>
   14c58:	mov	r3, r0
   14c5c:	mov	r2, r3
   14c60:	mov	r1, r4
   14c64:	mov	r0, #1
   14c68:	bl	10df4 <error@plt>
   14c6c:	nop			; (mov r0, r0)
   14c70:	mov	r0, #0
   14c74:	bl	10f38 <close@plt>
   14c78:	mov	r3, r0
   14c7c:	cmp	r3, #0
   14c80:	beq	14cac <__assert_fail@plt+0x3d68>
   14c84:	bl	10e84 <__errno_location@plt>
   14c88:	mov	r3, r0
   14c8c:	ldr	r4, [r3]
   14c90:	ldr	r0, [pc, #200]	; 14d60 <__assert_fail@plt+0x3e1c>
   14c94:	bl	10e54 <gettext@plt>
   14c98:	mov	r3, r0
   14c9c:	mov	r2, r3
   14ca0:	mov	r1, r4
   14ca4:	mov	r0, #1
   14ca8:	bl	10df4 <error@plt>
   14cac:	mov	r0, #0
   14cb0:	bl	10e48 <exit@plt>
   14cb4:	mov	r0, r3
   14cb8:	sub	sp, fp, #8
   14cbc:	pop	{r4, fp, pc}
   14cc0:	andeq	sl, r1, r8, ror fp
   14cc4:	andeq	fp, r1, r0, ror #24
   14cc8:	muleq	r1, r0, fp
   14ccc:	andeq	r4, r1, r8, asr #27
   14cd0:	andeq	fp, r1, r8, ror ip
   14cd4:	andeq	sp, r2, r6, ror #2
   14cd8:	andeq	sp, r2, r5, ror #2
   14cdc:	andeq	sp, r2, r4, ror #2
   14ce0:	andeq	sp, r2, r7, ror #2
   14ce4:	andeq	sp, r2, ip, asr r1
   14ce8:	strdeq	sp, [r2], -r4
   14cec:	andeq	fp, r1, ip, ror ip
   14cf0:	andeq	sl, r1, r0, asr #21
   14cf4:	andeq	fp, r1, ip, lsr #13
   14cf8:	andeq	sl, r1, r0, lsl #26
   14cfc:	andeq	fp, r1, ip, lsl #25
   14d00:	andeq	sp, r2, r8, asr #2
   14d04:	andeq	sp, r2, r8, ror #2
   14d08:	muleq	r1, r4, ip
   14d0c:	andeq	fp, r1, r4, lsr #25
   14d10:	andeq	sp, r2, r0, asr r1
   14d14:	andeq	fp, r1, r0, asr #25
   14d18:	andeq	fp, r1, r4, lsl #26
   14d1c:	andeq	fp, r1, r0, lsr sp
   14d20:	andeq	fp, r1, r4, lsr sp
   14d24:	andeq	fp, r1, r8, asr #26
   14d28:	andeq	sp, r2, r8, asr r1
   14d2c:	andeq	pc, r2, ip, ror #2
   14d30:	andeq	r3, r1, r8, ror pc
   14d34:	andeq	sp, r2, ip, ror #2
   14d38:	andeq	pc, r2, ip, ror #4
   14d3c:	andeq	fp, r1, r8, asr #24
   14d40:	andeq	r3, r1, r8, ror #31
   14d44:	andeq	pc, r2, ip, ror #6
   14d48:	muleq	r1, r8, lr
   14d4c:	andeq	fp, r1, r0, lsl #15
   14d50:	muleq	r1, r0, sp
   14d54:	andeq	r0, r0, r5, ror #14
   14d58:	andeq	fp, r1, ip, lsr #27
   14d5c:	andeq	r4, r1, r4, lsr r1
   14d60:	andeq	fp, r1, r8, asr #27
   14d64:	push	{fp}		; (str fp, [sp, #-4]!)
   14d68:	add	fp, sp, #0
   14d6c:	sub	sp, sp, #12
   14d70:	str	r0, [fp, #-8]
   14d74:	ldr	r2, [pc, #20]	; 14d90 <__assert_fail@plt+0x3e4c>
   14d78:	ldr	r3, [fp, #-8]
   14d7c:	str	r3, [r2]
   14d80:	nop			; (mov r0, r0)
   14d84:	add	sp, fp, #0
   14d88:	pop	{fp}		; (ldr fp, [sp], #4)
   14d8c:	bx	lr
   14d90:	andeq	pc, r2, ip, ror #8
   14d94:	push	{fp}		; (str fp, [sp, #-4]!)
   14d98:	add	fp, sp, #0
   14d9c:	sub	sp, sp, #12
   14da0:	mov	r3, r0
   14da4:	strb	r3, [fp, #-5]
   14da8:	ldr	r2, [pc, #20]	; 14dc4 <__assert_fail@plt+0x3e80>
   14dac:	ldrb	r3, [fp, #-5]
   14db0:	strb	r3, [r2]
   14db4:	nop			; (mov r0, r0)
   14db8:	add	sp, fp, #0
   14dbc:	pop	{fp}		; (ldr fp, [sp], #4)
   14dc0:	bx	lr
   14dc4:	andeq	pc, r2, r0, ror r4	; <UNPREDICTABLE>
   14dc8:	push	{r4, fp, lr}
   14dcc:	add	fp, sp, #8
   14dd0:	sub	sp, sp, #20
   14dd4:	ldr	r3, [pc, #256]	; 14edc <__assert_fail@plt+0x3f98>
   14dd8:	ldr	r3, [r3]
   14ddc:	mov	r0, r3
   14de0:	bl	196f0 <__assert_fail@plt+0x87ac>
   14de4:	mov	r3, r0
   14de8:	cmp	r3, #0
   14dec:	beq	14ea4 <__assert_fail@plt+0x3f60>
   14df0:	ldr	r3, [pc, #232]	; 14ee0 <__assert_fail@plt+0x3f9c>
   14df4:	ldrb	r3, [r3]
   14df8:	eor	r3, r3, #1
   14dfc:	uxtb	r3, r3
   14e00:	cmp	r3, #0
   14e04:	bne	14e1c <__assert_fail@plt+0x3ed8>
   14e08:	bl	10e84 <__errno_location@plt>
   14e0c:	mov	r3, r0
   14e10:	ldr	r3, [r3]
   14e14:	cmp	r3, #32
   14e18:	beq	14ea4 <__assert_fail@plt+0x3f60>
   14e1c:	ldr	r0, [pc, #192]	; 14ee4 <__assert_fail@plt+0x3fa0>
   14e20:	bl	10e54 <gettext@plt>
   14e24:	str	r0, [fp, #-16]
   14e28:	ldr	r3, [pc, #184]	; 14ee8 <__assert_fail@plt+0x3fa4>
   14e2c:	ldr	r3, [r3]
   14e30:	cmp	r3, #0
   14e34:	beq	14e78 <__assert_fail@plt+0x3f34>
   14e38:	bl	10e84 <__errno_location@plt>
   14e3c:	mov	r3, r0
   14e40:	ldr	r4, [r3]
   14e44:	ldr	r3, [pc, #156]	; 14ee8 <__assert_fail@plt+0x3fa4>
   14e48:	ldr	r3, [r3]
   14e4c:	mov	r0, r3
   14e50:	bl	17484 <__assert_fail@plt+0x6540>
   14e54:	mov	r2, r0
   14e58:	ldr	r3, [fp, #-16]
   14e5c:	str	r3, [sp]
   14e60:	mov	r3, r2
   14e64:	ldr	r2, [pc, #128]	; 14eec <__assert_fail@plt+0x3fa8>
   14e68:	mov	r1, r4
   14e6c:	mov	r0, #0
   14e70:	bl	10df4 <error@plt>
   14e74:	b	14e94 <__assert_fail@plt+0x3f50>
   14e78:	bl	10e84 <__errno_location@plt>
   14e7c:	mov	r3, r0
   14e80:	ldr	r1, [r3]
   14e84:	ldr	r3, [fp, #-16]
   14e88:	ldr	r2, [pc, #96]	; 14ef0 <__assert_fail@plt+0x3fac>
   14e8c:	mov	r0, #0
   14e90:	bl	10df4 <error@plt>
   14e94:	ldr	r3, [pc, #88]	; 14ef4 <__assert_fail@plt+0x3fb0>
   14e98:	ldr	r3, [r3]
   14e9c:	mov	r0, r3
   14ea0:	bl	10d28 <_exit@plt>
   14ea4:	ldr	r3, [pc, #76]	; 14ef8 <__assert_fail@plt+0x3fb4>
   14ea8:	ldr	r3, [r3]
   14eac:	mov	r0, r3
   14eb0:	bl	196f0 <__assert_fail@plt+0x87ac>
   14eb4:	mov	r3, r0
   14eb8:	cmp	r3, #0
   14ebc:	beq	14ed0 <__assert_fail@plt+0x3f8c>
   14ec0:	ldr	r3, [pc, #44]	; 14ef4 <__assert_fail@plt+0x3fb0>
   14ec4:	ldr	r3, [r3]
   14ec8:	mov	r0, r3
   14ecc:	bl	10d28 <_exit@plt>
   14ed0:	nop			; (mov r0, r0)
   14ed4:	sub	sp, fp, #8
   14ed8:	pop	{r4, fp, pc}
   14edc:	andeq	sp, r2, ip, asr r1
   14ee0:	andeq	pc, r2, r0, ror r4	; <UNPREDICTABLE>
   14ee4:			; <UNDEFINED> instruction: 0x0001beb0
   14ee8:	andeq	pc, r2, ip, ror #8
   14eec:			; <UNDEFINED> instruction: 0x0001bebc
   14ef0:	andeq	fp, r1, r4, asr #29
   14ef4:	strdeq	sp, [r2], -r8
   14ef8:	andeq	sp, r2, r0, asr r1
   14efc:	push	{fp, lr}
   14f00:	add	fp, sp, #4
   14f04:	sub	sp, sp, #40	; 0x28
   14f08:	str	r0, [fp, #-16]
   14f0c:	strd	r2, [fp, #-28]	; 0xffffffe4
   14f10:	ldr	r3, [fp, #12]
   14f14:	str	r3, [sp, #8]
   14f18:	ldrd	r2, [fp, #4]
   14f1c:	strd	r2, [sp]
   14f20:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14f24:	ldr	r0, [fp, #-16]
   14f28:	bl	10cec <posix_fadvise64@plt>
   14f2c:	str	r0, [fp, #-8]
   14f30:	nop			; (mov r0, r0)
   14f34:	sub	sp, fp, #4
   14f38:	pop	{fp, pc}
   14f3c:	push	{fp, lr}
   14f40:	add	fp, sp, #4
   14f44:	sub	sp, sp, #24
   14f48:	str	r0, [fp, #-8]
   14f4c:	str	r1, [fp, #-12]
   14f50:	ldr	r3, [fp, #-8]
   14f54:	cmp	r3, #0
   14f58:	beq	14f8c <__assert_fail@plt+0x4048>
   14f5c:	ldr	r0, [fp, #-8]
   14f60:	bl	10ea8 <fileno@plt>
   14f64:	mov	r1, r0
   14f68:	ldr	r3, [fp, #-12]
   14f6c:	str	r3, [sp, #8]
   14f70:	mov	r2, #0
   14f74:	mov	r3, #0
   14f78:	strd	r2, [sp]
   14f7c:	mov	r2, #0
   14f80:	mov	r3, #0
   14f84:	mov	r0, r1
   14f88:	bl	14efc <__assert_fail@plt+0x3fb8>
   14f8c:	nop			; (mov r0, r0)
   14f90:	sub	sp, fp, #4
   14f94:	pop	{fp, pc}
   14f98:	push	{r4, fp, lr}
   14f9c:	add	fp, sp, #8
   14fa0:	sub	sp, sp, #20
   14fa4:	str	r0, [fp, #-24]	; 0xffffffe8
   14fa8:	bl	10e84 <__errno_location@plt>
   14fac:	mov	r3, r0
   14fb0:	ldr	r3, [r3]
   14fb4:	str	r3, [fp, #-20]	; 0xffffffec
   14fb8:	bl	10e84 <__errno_location@plt>
   14fbc:	mov	r3, r0
   14fc0:	ldr	r3, [r3]
   14fc4:	str	r3, [fp, #-16]
   14fc8:	bl	10e84 <__errno_location@plt>
   14fcc:	mov	r2, r0
   14fd0:	mov	r3, #0
   14fd4:	str	r3, [r2]
   14fd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14fdc:	bl	10d1c <free@plt>
   14fe0:	bl	10e84 <__errno_location@plt>
   14fe4:	mov	r4, r0
   14fe8:	bl	10e84 <__errno_location@plt>
   14fec:	mov	r3, r0
   14ff0:	ldr	r3, [r3]
   14ff4:	cmp	r3, #0
   14ff8:	moveq	r3, #1
   14ffc:	movne	r3, #0
   15000:	uxtb	r3, r3
   15004:	lsl	r3, r3, #2
   15008:	sub	r2, fp, #12
   1500c:	add	r3, r2, r3
   15010:	ldr	r3, [r3, #-8]
   15014:	str	r3, [r4]
   15018:	nop			; (mov r0, r0)
   1501c:	sub	sp, fp, #8
   15020:	pop	{r4, fp, pc}
   15024:	push	{fp, lr}
   15028:	add	fp, sp, #4
   1502c:	sub	sp, sp, #16
   15030:	str	r0, [fp, #-16]
   15034:	ldr	r3, [fp, #-16]
   15038:	cmp	r3, #0
   1503c:	bne	1505c <__assert_fail@plt+0x4118>
   15040:	ldr	r3, [pc, #220]	; 15124 <__assert_fail@plt+0x41e0>
   15044:	ldr	r3, [r3]
   15048:	mov	r2, #55	; 0x37
   1504c:	mov	r1, #1
   15050:	ldr	r0, [pc, #208]	; 15128 <__assert_fail@plt+0x41e4>
   15054:	bl	10dac <fwrite@plt>
   15058:	bl	10f2c <abort@plt>
   1505c:	mov	r1, #47	; 0x2f
   15060:	ldr	r0, [fp, #-16]
   15064:	bl	10ef0 <strrchr@plt>
   15068:	str	r0, [fp, #-8]
   1506c:	ldr	r3, [fp, #-8]
   15070:	cmp	r3, #0
   15074:	beq	15084 <__assert_fail@plt+0x4140>
   15078:	ldr	r3, [fp, #-8]
   1507c:	add	r3, r3, #1
   15080:	b	15088 <__assert_fail@plt+0x4144>
   15084:	ldr	r3, [fp, #-16]
   15088:	str	r3, [fp, #-12]
   1508c:	ldr	r2, [fp, #-12]
   15090:	ldr	r3, [fp, #-16]
   15094:	sub	r3, r2, r3
   15098:	cmp	r3, #6
   1509c:	ble	15100 <__assert_fail@plt+0x41bc>
   150a0:	ldr	r3, [fp, #-12]
   150a4:	sub	r3, r3, #7
   150a8:	mov	r2, #7
   150ac:	ldr	r1, [pc, #120]	; 1512c <__assert_fail@plt+0x41e8>
   150b0:	mov	r0, r3
   150b4:	bl	10f20 <strncmp@plt>
   150b8:	mov	r3, r0
   150bc:	cmp	r3, #0
   150c0:	bne	15100 <__assert_fail@plt+0x41bc>
   150c4:	ldr	r3, [fp, #-12]
   150c8:	str	r3, [fp, #-16]
   150cc:	mov	r2, #3
   150d0:	ldr	r1, [pc, #88]	; 15130 <__assert_fail@plt+0x41ec>
   150d4:	ldr	r0, [fp, #-12]
   150d8:	bl	10f20 <strncmp@plt>
   150dc:	mov	r3, r0
   150e0:	cmp	r3, #0
   150e4:	bne	15100 <__assert_fail@plt+0x41bc>
   150e8:	ldr	r3, [fp, #-12]
   150ec:	add	r3, r3, #3
   150f0:	str	r3, [fp, #-16]
   150f4:	ldr	r2, [pc, #56]	; 15134 <__assert_fail@plt+0x41f0>
   150f8:	ldr	r3, [fp, #-16]
   150fc:	str	r3, [r2]
   15100:	ldr	r2, [pc, #48]	; 15138 <__assert_fail@plt+0x41f4>
   15104:	ldr	r3, [fp, #-16]
   15108:	str	r3, [r2]
   1510c:	ldr	r2, [pc, #40]	; 1513c <__assert_fail@plt+0x41f8>
   15110:	ldr	r3, [fp, #-16]
   15114:	str	r3, [r2]
   15118:	nop			; (mov r0, r0)
   1511c:	sub	sp, fp, #4
   15120:	pop	{fp, pc}
   15124:	andeq	sp, r2, r0, asr r1
   15128:	andeq	fp, r1, r8, asr #29
   1512c:	andeq	fp, r1, r0, lsl #30
   15130:	andeq	fp, r1, r8, lsl #30
   15134:	andeq	sp, r2, r0, asr #2
   15138:	andeq	pc, r2, r4, ror r4	; <UNPREDICTABLE>
   1513c:	andeq	sp, r2, r4, asr #2
   15140:	push	{fp, lr}
   15144:	add	fp, sp, #4
   15148:	sub	sp, sp, #16
   1514c:	str	r0, [fp, #-16]
   15150:	bl	10e84 <__errno_location@plt>
   15154:	mov	r3, r0
   15158:	ldr	r3, [r3]
   1515c:	str	r3, [fp, #-8]
   15160:	ldr	r3, [fp, #-16]
   15164:	cmp	r3, #0
   15168:	beq	15174 <__assert_fail@plt+0x4230>
   1516c:	ldr	r3, [fp, #-16]
   15170:	b	15178 <__assert_fail@plt+0x4234>
   15174:	ldr	r3, [pc, #48]	; 151ac <__assert_fail@plt+0x4268>
   15178:	mov	r1, #48	; 0x30
   1517c:	mov	r0, r3
   15180:	bl	18a08 <__assert_fail@plt+0x7ac4>
   15184:	mov	r3, r0
   15188:	str	r3, [fp, #-12]
   1518c:	bl	10e84 <__errno_location@plt>
   15190:	mov	r2, r0
   15194:	ldr	r3, [fp, #-8]
   15198:	str	r3, [r2]
   1519c:	ldr	r3, [fp, #-12]
   151a0:	mov	r0, r3
   151a4:	sub	sp, fp, #4
   151a8:	pop	{fp, pc}
   151ac:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   151b0:	push	{fp}		; (str fp, [sp, #-4]!)
   151b4:	add	fp, sp, #0
   151b8:	sub	sp, sp, #12
   151bc:	str	r0, [fp, #-8]
   151c0:	ldr	r3, [fp, #-8]
   151c4:	cmp	r3, #0
   151c8:	beq	151d4 <__assert_fail@plt+0x4290>
   151cc:	ldr	r3, [fp, #-8]
   151d0:	b	151d8 <__assert_fail@plt+0x4294>
   151d4:	ldr	r3, [pc, #16]	; 151ec <__assert_fail@plt+0x42a8>
   151d8:	ldr	r3, [r3]
   151dc:	mov	r0, r3
   151e0:	add	sp, fp, #0
   151e4:	pop	{fp}		; (ldr fp, [sp], #4)
   151e8:	bx	lr
   151ec:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   151f0:	push	{fp}		; (str fp, [sp, #-4]!)
   151f4:	add	fp, sp, #0
   151f8:	sub	sp, sp, #12
   151fc:	str	r0, [fp, #-8]
   15200:	str	r1, [fp, #-12]
   15204:	ldr	r3, [fp, #-8]
   15208:	cmp	r3, #0
   1520c:	beq	15218 <__assert_fail@plt+0x42d4>
   15210:	ldr	r3, [fp, #-8]
   15214:	b	1521c <__assert_fail@plt+0x42d8>
   15218:	ldr	r3, [pc, #20]	; 15234 <__assert_fail@plt+0x42f0>
   1521c:	ldr	r2, [fp, #-12]
   15220:	str	r2, [r3]
   15224:	nop			; (mov r0, r0)
   15228:	add	sp, fp, #0
   1522c:	pop	{fp}		; (ldr fp, [sp], #4)
   15230:	bx	lr
   15234:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   15238:	push	{fp}		; (str fp, [sp, #-4]!)
   1523c:	add	fp, sp, #0
   15240:	sub	sp, sp, #36	; 0x24
   15244:	str	r0, [fp, #-24]	; 0xffffffe8
   15248:	mov	r3, r1
   1524c:	str	r2, [fp, #-32]	; 0xffffffe0
   15250:	strb	r3, [fp, #-25]	; 0xffffffe7
   15254:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15258:	strb	r3, [fp, #-5]
   1525c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15260:	cmp	r3, #0
   15264:	beq	15270 <__assert_fail@plt+0x432c>
   15268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1526c:	b	15274 <__assert_fail@plt+0x4330>
   15270:	ldr	r3, [pc, #124]	; 152f4 <__assert_fail@plt+0x43b0>
   15274:	add	r2, r3, #8
   15278:	ldrb	r3, [fp, #-5]
   1527c:	lsr	r3, r3, #5
   15280:	uxtb	r3, r3
   15284:	lsl	r3, r3, #2
   15288:	add	r3, r2, r3
   1528c:	str	r3, [fp, #-12]
   15290:	ldrb	r3, [fp, #-5]
   15294:	and	r3, r3, #31
   15298:	str	r3, [fp, #-16]
   1529c:	ldr	r3, [fp, #-12]
   152a0:	ldr	r2, [r3]
   152a4:	ldr	r3, [fp, #-16]
   152a8:	lsr	r3, r2, r3
   152ac:	and	r3, r3, #1
   152b0:	str	r3, [fp, #-20]	; 0xffffffec
   152b4:	ldr	r3, [fp, #-12]
   152b8:	ldr	r3, [r3]
   152bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   152c0:	and	r1, r2, #1
   152c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   152c8:	eor	r1, r1, r2
   152cc:	ldr	r2, [fp, #-16]
   152d0:	lsl	r2, r1, r2
   152d4:	eor	r2, r2, r3
   152d8:	ldr	r3, [fp, #-12]
   152dc:	str	r2, [r3]
   152e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152e4:	mov	r0, r3
   152e8:	add	sp, fp, #0
   152ec:	pop	{fp}		; (ldr fp, [sp], #4)
   152f0:	bx	lr
   152f4:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   152f8:	push	{fp}		; (str fp, [sp, #-4]!)
   152fc:	add	fp, sp, #0
   15300:	sub	sp, sp, #20
   15304:	str	r0, [fp, #-16]
   15308:	str	r1, [fp, #-20]	; 0xffffffec
   1530c:	ldr	r3, [fp, #-16]
   15310:	cmp	r3, #0
   15314:	bne	15320 <__assert_fail@plt+0x43dc>
   15318:	ldr	r3, [pc, #44]	; 1534c <__assert_fail@plt+0x4408>
   1531c:	str	r3, [fp, #-16]
   15320:	ldr	r3, [fp, #-16]
   15324:	ldr	r3, [r3, #4]
   15328:	str	r3, [fp, #-8]
   1532c:	ldr	r3, [fp, #-16]
   15330:	ldr	r2, [fp, #-20]	; 0xffffffec
   15334:	str	r2, [r3, #4]
   15338:	ldr	r3, [fp, #-8]
   1533c:	mov	r0, r3
   15340:	add	sp, fp, #0
   15344:	pop	{fp}		; (ldr fp, [sp], #4)
   15348:	bx	lr
   1534c:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   15350:	push	{fp, lr}
   15354:	add	fp, sp, #4
   15358:	sub	sp, sp, #16
   1535c:	str	r0, [fp, #-8]
   15360:	str	r1, [fp, #-12]
   15364:	str	r2, [fp, #-16]
   15368:	ldr	r3, [fp, #-8]
   1536c:	cmp	r3, #0
   15370:	bne	1537c <__assert_fail@plt+0x4438>
   15374:	ldr	r3, [pc, #76]	; 153c8 <__assert_fail@plt+0x4484>
   15378:	str	r3, [fp, #-8]
   1537c:	ldr	r3, [fp, #-8]
   15380:	mov	r2, #10
   15384:	str	r2, [r3]
   15388:	ldr	r3, [fp, #-12]
   1538c:	cmp	r3, #0
   15390:	beq	153a0 <__assert_fail@plt+0x445c>
   15394:	ldr	r3, [fp, #-16]
   15398:	cmp	r3, #0
   1539c:	bne	153a4 <__assert_fail@plt+0x4460>
   153a0:	bl	10f2c <abort@plt>
   153a4:	ldr	r3, [fp, #-8]
   153a8:	ldr	r2, [fp, #-12]
   153ac:	str	r2, [r3, #40]	; 0x28
   153b0:	ldr	r3, [fp, #-8]
   153b4:	ldr	r2, [fp, #-16]
   153b8:	str	r2, [r3, #44]	; 0x2c
   153bc:	nop			; (mov r0, r0)
   153c0:	sub	sp, fp, #4
   153c4:	pop	{fp, pc}
   153c8:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   153cc:	push	{fp, lr}
   153d0:	add	fp, sp, #4
   153d4:	sub	sp, sp, #56	; 0x38
   153d8:	str	r0, [fp, #-56]	; 0xffffffc8
   153dc:	str	r1, [fp, #-60]	; 0xffffffc4
   153e0:	sub	r3, fp, #52	; 0x34
   153e4:	mov	r2, #48	; 0x30
   153e8:	mov	r1, #0
   153ec:	mov	r0, r3
   153f0:	bl	10e9c <memset@plt>
   153f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   153f8:	cmp	r3, #10
   153fc:	bne	15404 <__assert_fail@plt+0x44c0>
   15400:	bl	10f2c <abort@plt>
   15404:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15408:	str	r3, [fp, #-52]	; 0xffffffcc
   1540c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15410:	mov	lr, r3
   15414:	sub	ip, fp, #52	; 0x34
   15418:	ldm	ip!, {r0, r1, r2, r3}
   1541c:	stmia	lr!, {r0, r1, r2, r3}
   15420:	ldm	ip!, {r0, r1, r2, r3}
   15424:	stmia	lr!, {r0, r1, r2, r3}
   15428:	ldm	ip, {r0, r1, r2, r3}
   1542c:	stm	lr, {r0, r1, r2, r3}
   15430:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15434:	sub	sp, fp, #4
   15438:	pop	{fp, pc}
   1543c:	push	{fp, lr}
   15440:	add	fp, sp, #4
   15444:	sub	sp, sp, #16
   15448:	str	r0, [fp, #-16]
   1544c:	str	r1, [fp, #-20]	; 0xffffffec
   15450:	ldr	r0, [fp, #-16]
   15454:	bl	10e54 <gettext@plt>
   15458:	str	r0, [fp, #-8]
   1545c:	ldr	r2, [fp, #-8]
   15460:	ldr	r3, [fp, #-16]
   15464:	cmp	r2, r3
   15468:	beq	15474 <__assert_fail@plt+0x4530>
   1546c:	ldr	r3, [fp, #-8]
   15470:	b	15504 <__assert_fail@plt+0x45c0>
   15474:	bl	19b88 <__assert_fail@plt+0x8c44>
   15478:	str	r0, [fp, #-12]
   1547c:	ldr	r1, [pc, #140]	; 15510 <__assert_fail@plt+0x45cc>
   15480:	ldr	r0, [fp, #-12]
   15484:	bl	19658 <__assert_fail@plt+0x8714>
   15488:	mov	r3, r0
   1548c:	cmp	r3, #0
   15490:	bne	154b4 <__assert_fail@plt+0x4570>
   15494:	ldr	r3, [fp, #-16]
   15498:	ldrb	r3, [r3]
   1549c:	cmp	r3, #96	; 0x60
   154a0:	bne	154ac <__assert_fail@plt+0x4568>
   154a4:	ldr	r3, [pc, #104]	; 15514 <__assert_fail@plt+0x45d0>
   154a8:	b	15504 <__assert_fail@plt+0x45c0>
   154ac:	ldr	r3, [pc, #100]	; 15518 <__assert_fail@plt+0x45d4>
   154b0:	b	15504 <__assert_fail@plt+0x45c0>
   154b4:	ldr	r1, [pc, #96]	; 1551c <__assert_fail@plt+0x45d8>
   154b8:	ldr	r0, [fp, #-12]
   154bc:	bl	19658 <__assert_fail@plt+0x8714>
   154c0:	mov	r3, r0
   154c4:	cmp	r3, #0
   154c8:	bne	154ec <__assert_fail@plt+0x45a8>
   154cc:	ldr	r3, [fp, #-16]
   154d0:	ldrb	r3, [r3]
   154d4:	cmp	r3, #96	; 0x60
   154d8:	bne	154e4 <__assert_fail@plt+0x45a0>
   154dc:	ldr	r3, [pc, #60]	; 15520 <__assert_fail@plt+0x45dc>
   154e0:	b	15504 <__assert_fail@plt+0x45c0>
   154e4:	ldr	r3, [pc, #56]	; 15524 <__assert_fail@plt+0x45e0>
   154e8:	b	15504 <__assert_fail@plt+0x45c0>
   154ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   154f0:	cmp	r3, #9
   154f4:	bne	15500 <__assert_fail@plt+0x45bc>
   154f8:	ldr	r3, [pc, #40]	; 15528 <__assert_fail@plt+0x45e4>
   154fc:	b	15504 <__assert_fail@plt+0x45c0>
   15500:	ldr	r3, [pc, #36]	; 1552c <__assert_fail@plt+0x45e8>
   15504:	mov	r0, r3
   15508:	sub	sp, fp, #4
   1550c:	pop	{fp, pc}
   15510:	andeq	fp, r1, r8, asr #31
   15514:	ldrdeq	fp, [r1], -r0
   15518:	ldrdeq	fp, [r1], -r4
   1551c:	ldrdeq	fp, [r1], -r8
   15520:	andeq	fp, r1, r0, ror #31
   15524:	andeq	fp, r1, r4, ror #31
   15528:	andeq	fp, r1, r8, ror #31
   1552c:	andeq	fp, r1, ip, ror #31
   15530:	push	{r4, fp, lr}
   15534:	add	fp, sp, #8
   15538:	sub	sp, sp, #116	; 0x74
   1553c:	str	r0, [fp, #-88]	; 0xffffffa8
   15540:	str	r1, [fp, #-92]	; 0xffffffa4
   15544:	str	r2, [fp, #-96]	; 0xffffffa0
   15548:	str	r3, [fp, #-100]	; 0xffffff9c
   1554c:	mov	r3, #0
   15550:	str	r3, [fp, #-20]	; 0xffffffec
   15554:	mov	r3, #0
   15558:	str	r3, [fp, #-24]	; 0xffffffe8
   1555c:	mov	r3, #0
   15560:	str	r3, [fp, #-28]	; 0xffffffe4
   15564:	mov	r3, #0
   15568:	str	r3, [fp, #-32]	; 0xffffffe0
   1556c:	mov	r3, #0
   15570:	strb	r3, [fp, #-33]	; 0xffffffdf
   15574:	bl	10dc4 <__ctype_get_mb_cur_max@plt>
   15578:	mov	r3, r0
   1557c:	cmp	r3, #1
   15580:	moveq	r3, #1
   15584:	movne	r3, #0
   15588:	strb	r3, [fp, #-57]	; 0xffffffc7
   1558c:	ldr	r3, [fp, #8]
   15590:	and	r3, r3, #2
   15594:	cmp	r3, #0
   15598:	movne	r3, #1
   1559c:	moveq	r3, #0
   155a0:	strb	r3, [fp, #-34]	; 0xffffffde
   155a4:	mov	r3, #0
   155a8:	strb	r3, [fp, #-35]	; 0xffffffdd
   155ac:	mov	r3, #0
   155b0:	strb	r3, [fp, #-36]	; 0xffffffdc
   155b4:	mov	r3, #1
   155b8:	strb	r3, [fp, #-37]	; 0xffffffdb
   155bc:	ldr	r3, [fp, #4]
   155c0:	cmp	r3, #10
   155c4:	ldrls	pc, [pc, r3, lsl #2]
   155c8:	b	157d0 <__assert_fail@plt+0x488c>
   155cc:	andeq	r5, r1, r4, asr #15
   155d0:	andeq	r5, r1, r0, asr #14
   155d4:	andeq	r5, r1, r4, ror #14
   155d8:	andeq	r5, r1, r8, lsr r7
   155dc:	andeq	r5, r1, r8, asr #14
   155e0:	andeq	r5, r1, r8, lsl #12
   155e4:	strdeq	r5, [r1], -r8
   155e8:	andeq	r5, r1, r8, ror #12
   155ec:	andeq	r5, r1, ip, ror r6
   155f0:	andeq	r5, r1, ip, ror r6
   155f4:	andeq	r5, r1, ip, ror r6
   155f8:	mov	r3, #5
   155fc:	str	r3, [fp, #4]
   15600:	mov	r3, #1
   15604:	strb	r3, [fp, #-34]	; 0xffffffde
   15608:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1560c:	eor	r3, r3, #1
   15610:	uxtb	r3, r3
   15614:	cmp	r3, #0
   15618:	beq	1564c <__assert_fail@plt+0x4708>
   1561c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15620:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15624:	cmp	r2, r3
   15628:	bcs	15640 <__assert_fail@plt+0x46fc>
   1562c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15630:	ldr	r3, [fp, #-20]	; 0xffffffec
   15634:	add	r3, r2, r3
   15638:	mov	r2, #34	; 0x22
   1563c:	strb	r2, [r3]
   15640:	ldr	r3, [fp, #-20]	; 0xffffffec
   15644:	add	r3, r3, #1
   15648:	str	r3, [fp, #-20]	; 0xffffffec
   1564c:	mov	r3, #1
   15650:	strb	r3, [fp, #-33]	; 0xffffffdf
   15654:	ldr	r3, [pc, #3872]	; 1657c <__assert_fail@plt+0x5638>
   15658:	str	r3, [fp, #-28]	; 0xffffffe4
   1565c:	mov	r3, #1
   15660:	str	r3, [fp, #-32]	; 0xffffffe0
   15664:	b	157d4 <__assert_fail@plt+0x4890>
   15668:	mov	r3, #1
   1566c:	strb	r3, [fp, #-33]	; 0xffffffdf
   15670:	mov	r3, #0
   15674:	strb	r3, [fp, #-34]	; 0xffffffde
   15678:	b	157d4 <__assert_fail@plt+0x4890>
   1567c:	ldr	r3, [fp, #4]
   15680:	cmp	r3, #10
   15684:	beq	156a8 <__assert_fail@plt+0x4764>
   15688:	ldr	r1, [fp, #4]
   1568c:	ldr	r0, [pc, #3820]	; 16580 <__assert_fail@plt+0x563c>
   15690:	bl	1543c <__assert_fail@plt+0x44f8>
   15694:	str	r0, [fp, #16]
   15698:	ldr	r1, [fp, #4]
   1569c:	ldr	r0, [pc, #3808]	; 16584 <__assert_fail@plt+0x5640>
   156a0:	bl	1543c <__assert_fail@plt+0x44f8>
   156a4:	str	r0, [fp, #20]
   156a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   156ac:	eor	r3, r3, #1
   156b0:	uxtb	r3, r3
   156b4:	cmp	r3, #0
   156b8:	beq	15718 <__assert_fail@plt+0x47d4>
   156bc:	ldr	r3, [fp, #16]
   156c0:	str	r3, [fp, #-28]	; 0xffffffe4
   156c4:	b	15708 <__assert_fail@plt+0x47c4>
   156c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   156cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   156d0:	cmp	r2, r3
   156d4:	bcs	156f0 <__assert_fail@plt+0x47ac>
   156d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   156dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   156e0:	add	r3, r2, r3
   156e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   156e8:	ldrb	r2, [r2]
   156ec:	strb	r2, [r3]
   156f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   156f4:	add	r3, r3, #1
   156f8:	str	r3, [fp, #-20]	; 0xffffffec
   156fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15700:	add	r3, r3, #1
   15704:	str	r3, [fp, #-28]	; 0xffffffe4
   15708:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1570c:	ldrb	r3, [r3]
   15710:	cmp	r3, #0
   15714:	bne	156c8 <__assert_fail@plt+0x4784>
   15718:	mov	r3, #1
   1571c:	strb	r3, [fp, #-33]	; 0xffffffdf
   15720:	ldr	r3, [fp, #20]
   15724:	str	r3, [fp, #-28]	; 0xffffffe4
   15728:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1572c:	bl	10e60 <strlen@plt>
   15730:	str	r0, [fp, #-32]	; 0xffffffe0
   15734:	b	157d4 <__assert_fail@plt+0x4890>
   15738:	mov	r3, #1
   1573c:	strb	r3, [fp, #-33]	; 0xffffffdf
   15740:	mov	r3, #1
   15744:	strb	r3, [fp, #-34]	; 0xffffffde
   15748:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1574c:	eor	r3, r3, #1
   15750:	uxtb	r3, r3
   15754:	cmp	r3, #0
   15758:	beq	15764 <__assert_fail@plt+0x4820>
   1575c:	mov	r3, #1
   15760:	strb	r3, [fp, #-33]	; 0xffffffdf
   15764:	mov	r3, #2
   15768:	str	r3, [fp, #4]
   1576c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15770:	eor	r3, r3, #1
   15774:	uxtb	r3, r3
   15778:	cmp	r3, #0
   1577c:	beq	157b0 <__assert_fail@plt+0x486c>
   15780:	ldr	r2, [fp, #-20]	; 0xffffffec
   15784:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15788:	cmp	r2, r3
   1578c:	bcs	157a4 <__assert_fail@plt+0x4860>
   15790:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15794:	ldr	r3, [fp, #-20]	; 0xffffffec
   15798:	add	r3, r2, r3
   1579c:	mov	r2, #39	; 0x27
   157a0:	strb	r2, [r3]
   157a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   157a8:	add	r3, r3, #1
   157ac:	str	r3, [fp, #-20]	; 0xffffffec
   157b0:	ldr	r3, [pc, #3532]	; 16584 <__assert_fail@plt+0x5640>
   157b4:	str	r3, [fp, #-28]	; 0xffffffe4
   157b8:	mov	r3, #1
   157bc:	str	r3, [fp, #-32]	; 0xffffffe0
   157c0:	b	157d4 <__assert_fail@plt+0x4890>
   157c4:	mov	r3, #0
   157c8:	strb	r3, [fp, #-34]	; 0xffffffde
   157cc:	b	157d4 <__assert_fail@plt+0x4890>
   157d0:	bl	10f2c <abort@plt>
   157d4:	mov	r3, #0
   157d8:	str	r3, [fp, #-16]
   157dc:	b	1696c <__assert_fail@plt+0x5a28>
   157e0:	mov	r3, #0
   157e4:	strb	r3, [fp, #-40]	; 0xffffffd8
   157e8:	mov	r3, #0
   157ec:	strb	r3, [fp, #-41]	; 0xffffffd7
   157f0:	mov	r3, #0
   157f4:	strb	r3, [fp, #-42]	; 0xffffffd6
   157f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   157fc:	cmp	r3, #0
   15800:	beq	1589c <__assert_fail@plt+0x4958>
   15804:	ldr	r3, [fp, #4]
   15808:	cmp	r3, #2
   1580c:	beq	1589c <__assert_fail@plt+0x4958>
   15810:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15814:	cmp	r3, #0
   15818:	beq	1589c <__assert_fail@plt+0x4958>
   1581c:	ldr	r2, [fp, #-16]
   15820:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15824:	add	r4, r2, r3
   15828:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1582c:	cmn	r3, #1
   15830:	bne	15854 <__assert_fail@plt+0x4910>
   15834:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15838:	cmp	r3, #1
   1583c:	bls	15854 <__assert_fail@plt+0x4910>
   15840:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15844:	bl	10e60 <strlen@plt>
   15848:	str	r0, [fp, #-100]	; 0xffffff9c
   1584c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15850:	b	15858 <__assert_fail@plt+0x4914>
   15854:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15858:	cmp	r4, r3
   1585c:	bhi	1589c <__assert_fail@plt+0x4958>
   15860:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15864:	ldr	r3, [fp, #-16]
   15868:	add	r3, r2, r3
   1586c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15870:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15874:	mov	r0, r3
   15878:	bl	10d64 <memcmp@plt>
   1587c:	mov	r3, r0
   15880:	cmp	r3, #0
   15884:	bne	1589c <__assert_fail@plt+0x4958>
   15888:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1588c:	cmp	r3, #0
   15890:	bne	16b28 <__assert_fail@plt+0x5be4>
   15894:	mov	r3, #1
   15898:	strb	r3, [fp, #-40]	; 0xffffffd8
   1589c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   158a0:	ldr	r3, [fp, #-16]
   158a4:	add	r3, r2, r3
   158a8:	ldrb	r3, [r3]
   158ac:	strb	r3, [fp, #-38]	; 0xffffffda
   158b0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   158b4:	cmp	r3, #126	; 0x7e
   158b8:	ldrls	pc, [pc, r3, lsl #2]
   158bc:	b	160e8 <__assert_fail@plt+0x51a4>
   158c0:			; <UNDEFINED> instruction: 0x00015abc
   158c4:	andeq	r6, r1, r8, ror #1
   158c8:	andeq	r6, r1, r8, ror #1
   158cc:	andeq	r6, r1, r8, ror #1
   158d0:	andeq	r6, r1, r8, ror #1
   158d4:	andeq	r6, r1, r8, ror #1
   158d8:	andeq	r6, r1, r8, ror #1
   158dc:	andeq	r5, r1, ip, lsr #29
   158e0:			; <UNDEFINED> instruction: 0x00015eb8
   158e4:	andeq	r5, r1, r8, ror #29
   158e8:	ldrdeq	r5, [r1], -r0
   158ec:	strdeq	r5, [r1], -r4
   158f0:	andeq	r5, r1, r4, asr #29
   158f4:	ldrdeq	r5, [r1], -ip
   158f8:	andeq	r6, r1, r8, ror #1
   158fc:	andeq	r6, r1, r8, ror #1
   15900:	andeq	r6, r1, r8, ror #1
   15904:	andeq	r6, r1, r8, ror #1
   15908:	andeq	r6, r1, r8, ror #1
   1590c:	andeq	r6, r1, r8, ror #1
   15910:	andeq	r6, r1, r8, ror #1
   15914:	andeq	r6, r1, r8, ror #1
   15918:	andeq	r6, r1, r8, ror #1
   1591c:	andeq	r6, r1, r8, ror #1
   15920:	andeq	r6, r1, r8, ror #1
   15924:	andeq	r6, r1, r8, ror #1
   15928:	andeq	r6, r1, r8, ror #1
   1592c:	andeq	r6, r1, r8, ror #1
   15930:	andeq	r6, r1, r8, ror #1
   15934:	andeq	r6, r1, r8, ror #1
   15938:	andeq	r6, r1, r8, ror #1
   1593c:	andeq	r6, r1, r8, ror #1
   15940:	andeq	r5, r1, ip, asr #31
   15944:	ldrdeq	r5, [r1], -r4
   15948:	ldrdeq	r5, [r1], -r4
   1594c:	andeq	r5, r1, r0, asr #31
   15950:	ldrdeq	r5, [r1], -r4
   15954:	ldrdeq	r6, [r1], -ip
   15958:	ldrdeq	r5, [r1], -r4
   1595c:	strdeq	r5, [r1], -r0
   15960:	ldrdeq	r5, [r1], -r4
   15964:	ldrdeq	r5, [r1], -r4
   15968:	ldrdeq	r5, [r1], -r4
   1596c:	ldrdeq	r6, [r1], -ip
   15970:	ldrdeq	r6, [r1], -ip
   15974:	ldrdeq	r6, [r1], -ip
   15978:	ldrdeq	r6, [r1], -ip
   1597c:	ldrdeq	r6, [r1], -ip
   15980:	ldrdeq	r6, [r1], -ip
   15984:	ldrdeq	r6, [r1], -ip
   15988:	ldrdeq	r6, [r1], -ip
   1598c:	ldrdeq	r6, [r1], -ip
   15990:	ldrdeq	r6, [r1], -ip
   15994:	ldrdeq	r6, [r1], -ip
   15998:	ldrdeq	r6, [r1], -ip
   1599c:	ldrdeq	r6, [r1], -ip
   159a0:	ldrdeq	r6, [r1], -ip
   159a4:	ldrdeq	r6, [r1], -ip
   159a8:	ldrdeq	r6, [r1], -ip
   159ac:	ldrdeq	r5, [r1], -r4
   159b0:	ldrdeq	r5, [r1], -r4
   159b4:	ldrdeq	r5, [r1], -r4
   159b8:	ldrdeq	r5, [r1], -r4
   159bc:	muleq	r1, ip, ip
   159c0:	andeq	r6, r1, r8, ror #1
   159c4:	ldrdeq	r6, [r1], -ip
   159c8:	ldrdeq	r6, [r1], -ip
   159cc:	ldrdeq	r6, [r1], -ip
   159d0:	ldrdeq	r6, [r1], -ip
   159d4:	ldrdeq	r6, [r1], -ip
   159d8:	ldrdeq	r6, [r1], -ip
   159dc:	ldrdeq	r6, [r1], -ip
   159e0:	ldrdeq	r6, [r1], -ip
   159e4:	ldrdeq	r6, [r1], -ip
   159e8:	ldrdeq	r6, [r1], -ip
   159ec:	ldrdeq	r6, [r1], -ip
   159f0:	ldrdeq	r6, [r1], -ip
   159f4:	ldrdeq	r6, [r1], -ip
   159f8:	ldrdeq	r6, [r1], -ip
   159fc:	ldrdeq	r6, [r1], -ip
   15a00:	ldrdeq	r6, [r1], -ip
   15a04:	ldrdeq	r6, [r1], -ip
   15a08:	ldrdeq	r6, [r1], -ip
   15a0c:	ldrdeq	r6, [r1], -ip
   15a10:	ldrdeq	r6, [r1], -ip
   15a14:	ldrdeq	r6, [r1], -ip
   15a18:	ldrdeq	r6, [r1], -ip
   15a1c:	ldrdeq	r6, [r1], -ip
   15a20:	ldrdeq	r6, [r1], -ip
   15a24:	ldrdeq	r6, [r1], -ip
   15a28:	ldrdeq	r6, [r1], -ip
   15a2c:	ldrdeq	r5, [r1], -r4
   15a30:	andeq	r5, r1, r0, lsl #30
   15a34:	ldrdeq	r6, [r1], -ip
   15a38:	ldrdeq	r5, [r1], -r4
   15a3c:	ldrdeq	r6, [r1], -ip
   15a40:	ldrdeq	r5, [r1], -r4
   15a44:	ldrdeq	r6, [r1], -ip
   15a48:	ldrdeq	r6, [r1], -ip
   15a4c:	ldrdeq	r6, [r1], -ip
   15a50:	ldrdeq	r6, [r1], -ip
   15a54:	ldrdeq	r6, [r1], -ip
   15a58:	ldrdeq	r6, [r1], -ip
   15a5c:	ldrdeq	r6, [r1], -ip
   15a60:	ldrdeq	r6, [r1], -ip
   15a64:	ldrdeq	r6, [r1], -ip
   15a68:	ldrdeq	r6, [r1], -ip
   15a6c:	ldrdeq	r6, [r1], -ip
   15a70:	ldrdeq	r6, [r1], -ip
   15a74:	ldrdeq	r6, [r1], -ip
   15a78:	ldrdeq	r6, [r1], -ip
   15a7c:	ldrdeq	r6, [r1], -ip
   15a80:	ldrdeq	r6, [r1], -ip
   15a84:	ldrdeq	r6, [r1], -ip
   15a88:	ldrdeq	r6, [r1], -ip
   15a8c:	ldrdeq	r6, [r1], -ip
   15a90:	ldrdeq	r6, [r1], -ip
   15a94:	ldrdeq	r6, [r1], -ip
   15a98:	ldrdeq	r6, [r1], -ip
   15a9c:	ldrdeq	r6, [r1], -ip
   15aa0:	ldrdeq	r6, [r1], -ip
   15aa4:	ldrdeq	r6, [r1], -ip
   15aa8:	ldrdeq	r6, [r1], -ip
   15aac:	andeq	r5, r1, r8, ror pc
   15ab0:	ldrdeq	r5, [r1], -r4
   15ab4:	andeq	r5, r1, r8, ror pc
   15ab8:	andeq	r5, r1, r0, asr #31
   15abc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15ac0:	cmp	r3, #0
   15ac4:	beq	15c88 <__assert_fail@plt+0x4d44>
   15ac8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15acc:	cmp	r3, #0
   15ad0:	bne	16b30 <__assert_fail@plt+0x5bec>
   15ad4:	mov	r3, #1
   15ad8:	strb	r3, [fp, #-41]	; 0xffffffd7
   15adc:	ldr	r3, [fp, #4]
   15ae0:	cmp	r3, #2
   15ae4:	bne	15b94 <__assert_fail@plt+0x4c50>
   15ae8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15aec:	eor	r3, r3, #1
   15af0:	uxtb	r3, r3
   15af4:	cmp	r3, #0
   15af8:	beq	15b94 <__assert_fail@plt+0x4c50>
   15afc:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b04:	cmp	r2, r3
   15b08:	bcs	15b20 <__assert_fail@plt+0x4bdc>
   15b0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b14:	add	r3, r2, r3
   15b18:	mov	r2, #39	; 0x27
   15b1c:	strb	r2, [r3]
   15b20:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b24:	add	r3, r3, #1
   15b28:	str	r3, [fp, #-20]	; 0xffffffec
   15b2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b34:	cmp	r2, r3
   15b38:	bcs	15b50 <__assert_fail@plt+0x4c0c>
   15b3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b40:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b44:	add	r3, r2, r3
   15b48:	mov	r2, #36	; 0x24
   15b4c:	strb	r2, [r3]
   15b50:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b54:	add	r3, r3, #1
   15b58:	str	r3, [fp, #-20]	; 0xffffffec
   15b5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b64:	cmp	r2, r3
   15b68:	bcs	15b80 <__assert_fail@plt+0x4c3c>
   15b6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b74:	add	r3, r2, r3
   15b78:	mov	r2, #39	; 0x27
   15b7c:	strb	r2, [r3]
   15b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b84:	add	r3, r3, #1
   15b88:	str	r3, [fp, #-20]	; 0xffffffec
   15b8c:	mov	r3, #1
   15b90:	strb	r3, [fp, #-35]	; 0xffffffdd
   15b94:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b9c:	cmp	r2, r3
   15ba0:	bcs	15bb8 <__assert_fail@plt+0x4c74>
   15ba4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bac:	add	r3, r2, r3
   15bb0:	mov	r2, #92	; 0x5c
   15bb4:	strb	r2, [r3]
   15bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bbc:	add	r3, r3, #1
   15bc0:	str	r3, [fp, #-20]	; 0xffffffec
   15bc4:	ldr	r3, [fp, #4]
   15bc8:	cmp	r3, #2
   15bcc:	beq	15c7c <__assert_fail@plt+0x4d38>
   15bd0:	ldr	r3, [fp, #-16]
   15bd4:	add	r2, r3, #1
   15bd8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15bdc:	cmp	r2, r3
   15be0:	bcs	15c7c <__assert_fail@plt+0x4d38>
   15be4:	ldr	r3, [fp, #-16]
   15be8:	add	r3, r3, #1
   15bec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15bf0:	add	r3, r2, r3
   15bf4:	ldrb	r3, [r3]
   15bf8:	cmp	r3, #47	; 0x2f
   15bfc:	bls	15c7c <__assert_fail@plt+0x4d38>
   15c00:	ldr	r3, [fp, #-16]
   15c04:	add	r3, r3, #1
   15c08:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15c0c:	add	r3, r2, r3
   15c10:	ldrb	r3, [r3]
   15c14:	cmp	r3, #57	; 0x39
   15c18:	bhi	15c7c <__assert_fail@plt+0x4d38>
   15c1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15c24:	cmp	r2, r3
   15c28:	bcs	15c40 <__assert_fail@plt+0x4cfc>
   15c2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c34:	add	r3, r2, r3
   15c38:	mov	r2, #48	; 0x30
   15c3c:	strb	r2, [r3]
   15c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c44:	add	r3, r3, #1
   15c48:	str	r3, [fp, #-20]	; 0xffffffec
   15c4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15c54:	cmp	r2, r3
   15c58:	bcs	15c70 <__assert_fail@plt+0x4d2c>
   15c5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c64:	add	r3, r2, r3
   15c68:	mov	r2, #48	; 0x30
   15c6c:	strb	r2, [r3]
   15c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c74:	add	r3, r3, #1
   15c78:	str	r3, [fp, #-20]	; 0xffffffec
   15c7c:	mov	r3, #48	; 0x30
   15c80:	strb	r3, [fp, #-38]	; 0xffffffda
   15c84:	b	166c4 <__assert_fail@plt+0x5780>
   15c88:	ldr	r3, [fp, #8]
   15c8c:	and	r3, r3, #1
   15c90:	cmp	r3, #0
   15c94:	beq	166c4 <__assert_fail@plt+0x5780>
   15c98:	b	16960 <__assert_fail@plt+0x5a1c>
   15c9c:	ldr	r3, [fp, #4]
   15ca0:	cmp	r3, #2
   15ca4:	beq	15cb4 <__assert_fail@plt+0x4d70>
   15ca8:	cmp	r3, #5
   15cac:	beq	15cc4 <__assert_fail@plt+0x4d80>
   15cb0:	b	15ea8 <__assert_fail@plt+0x4f64>
   15cb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15cb8:	cmp	r3, #0
   15cbc:	beq	15e9c <__assert_fail@plt+0x4f58>
   15cc0:	b	16b6c <__assert_fail@plt+0x5c28>
   15cc4:	ldr	r3, [fp, #8]
   15cc8:	and	r3, r3, #4
   15ccc:	cmp	r3, #0
   15cd0:	beq	15ea4 <__assert_fail@plt+0x4f60>
   15cd4:	ldr	r3, [fp, #-16]
   15cd8:	add	r2, r3, #2
   15cdc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15ce0:	cmp	r2, r3
   15ce4:	bcs	15ea4 <__assert_fail@plt+0x4f60>
   15ce8:	ldr	r3, [fp, #-16]
   15cec:	add	r3, r3, #1
   15cf0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15cf4:	add	r3, r2, r3
   15cf8:	ldrb	r3, [r3]
   15cfc:	cmp	r3, #63	; 0x3f
   15d00:	bne	15ea4 <__assert_fail@plt+0x4f60>
   15d04:	ldr	r3, [fp, #-16]
   15d08:	add	r3, r3, #2
   15d0c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15d10:	add	r3, r2, r3
   15d14:	ldrb	r3, [r3]
   15d18:	sub	r3, r3, #33	; 0x21
   15d1c:	cmp	r3, #29
   15d20:	ldrls	pc, [pc, r3, lsl #2]
   15d24:	b	15e94 <__assert_fail@plt+0x4f50>
   15d28:	andeq	r5, r1, r0, lsr #27
   15d2c:	muleq	r1, r4, lr
   15d30:	muleq	r1, r4, lr
   15d34:	muleq	r1, r4, lr
   15d38:	muleq	r1, r4, lr
   15d3c:	muleq	r1, r4, lr
   15d40:	andeq	r5, r1, r0, lsr #27
   15d44:	andeq	r5, r1, r0, lsr #27
   15d48:	andeq	r5, r1, r0, lsr #27
   15d4c:	muleq	r1, r4, lr
   15d50:	muleq	r1, r4, lr
   15d54:	muleq	r1, r4, lr
   15d58:	andeq	r5, r1, r0, lsr #27
   15d5c:	muleq	r1, r4, lr
   15d60:	andeq	r5, r1, r0, lsr #27
   15d64:	muleq	r1, r4, lr
   15d68:	muleq	r1, r4, lr
   15d6c:	muleq	r1, r4, lr
   15d70:	muleq	r1, r4, lr
   15d74:	muleq	r1, r4, lr
   15d78:	muleq	r1, r4, lr
   15d7c:	muleq	r1, r4, lr
   15d80:	muleq	r1, r4, lr
   15d84:	muleq	r1, r4, lr
   15d88:	muleq	r1, r4, lr
   15d8c:	muleq	r1, r4, lr
   15d90:	muleq	r1, r4, lr
   15d94:	andeq	r5, r1, r0, lsr #27
   15d98:	andeq	r5, r1, r0, lsr #27
   15d9c:	andeq	r5, r1, r0, lsr #27
   15da0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15da4:	cmp	r3, #0
   15da8:	bne	16b38 <__assert_fail@plt+0x5bf4>
   15dac:	ldr	r3, [fp, #-16]
   15db0:	add	r3, r3, #2
   15db4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15db8:	add	r3, r2, r3
   15dbc:	ldrb	r3, [r3]
   15dc0:	strb	r3, [fp, #-38]	; 0xffffffda
   15dc4:	ldr	r3, [fp, #-16]
   15dc8:	add	r3, r3, #2
   15dcc:	str	r3, [fp, #-16]
   15dd0:	ldr	r2, [fp, #-20]	; 0xffffffec
   15dd4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15dd8:	cmp	r2, r3
   15ddc:	bcs	15df4 <__assert_fail@plt+0x4eb0>
   15de0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15de4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15de8:	add	r3, r2, r3
   15dec:	mov	r2, #63	; 0x3f
   15df0:	strb	r2, [r3]
   15df4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15df8:	add	r3, r3, #1
   15dfc:	str	r3, [fp, #-20]	; 0xffffffec
   15e00:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e08:	cmp	r2, r3
   15e0c:	bcs	15e24 <__assert_fail@plt+0x4ee0>
   15e10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e18:	add	r3, r2, r3
   15e1c:	mov	r2, #34	; 0x22
   15e20:	strb	r2, [r3]
   15e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e28:	add	r3, r3, #1
   15e2c:	str	r3, [fp, #-20]	; 0xffffffec
   15e30:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e38:	cmp	r2, r3
   15e3c:	bcs	15e54 <__assert_fail@plt+0x4f10>
   15e40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e48:	add	r3, r2, r3
   15e4c:	mov	r2, #34	; 0x22
   15e50:	strb	r2, [r3]
   15e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e58:	add	r3, r3, #1
   15e5c:	str	r3, [fp, #-20]	; 0xffffffec
   15e60:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e68:	cmp	r2, r3
   15e6c:	bcs	15e84 <__assert_fail@plt+0x4f40>
   15e70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e78:	add	r3, r2, r3
   15e7c:	mov	r2, #63	; 0x3f
   15e80:	strb	r2, [r3]
   15e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e88:	add	r3, r3, #1
   15e8c:	str	r3, [fp, #-20]	; 0xffffffec
   15e90:	b	15e98 <__assert_fail@plt+0x4f54>
   15e94:	nop			; (mov r0, r0)
   15e98:	b	15ea4 <__assert_fail@plt+0x4f60>
   15e9c:	nop			; (mov r0, r0)
   15ea0:	b	166f0 <__assert_fail@plt+0x57ac>
   15ea4:	nop			; (mov r0, r0)
   15ea8:	b	166f0 <__assert_fail@plt+0x57ac>
   15eac:	mov	r3, #97	; 0x61
   15eb0:	strb	r3, [fp, #-39]	; 0xffffffd9
   15eb4:	b	15f60 <__assert_fail@plt+0x501c>
   15eb8:	mov	r3, #98	; 0x62
   15ebc:	strb	r3, [fp, #-39]	; 0xffffffd9
   15ec0:	b	15f60 <__assert_fail@plt+0x501c>
   15ec4:	mov	r3, #102	; 0x66
   15ec8:	strb	r3, [fp, #-39]	; 0xffffffd9
   15ecc:	b	15f60 <__assert_fail@plt+0x501c>
   15ed0:	mov	r3, #110	; 0x6e
   15ed4:	strb	r3, [fp, #-39]	; 0xffffffd9
   15ed8:	b	15f48 <__assert_fail@plt+0x5004>
   15edc:	mov	r3, #114	; 0x72
   15ee0:	strb	r3, [fp, #-39]	; 0xffffffd9
   15ee4:	b	15f48 <__assert_fail@plt+0x5004>
   15ee8:	mov	r3, #116	; 0x74
   15eec:	strb	r3, [fp, #-39]	; 0xffffffd9
   15ef0:	b	15f48 <__assert_fail@plt+0x5004>
   15ef4:	mov	r3, #118	; 0x76
   15ef8:	strb	r3, [fp, #-39]	; 0xffffffd9
   15efc:	b	15f60 <__assert_fail@plt+0x501c>
   15f00:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15f04:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f08:	ldr	r3, [fp, #4]
   15f0c:	cmp	r3, #2
   15f10:	bne	15f24 <__assert_fail@plt+0x4fe0>
   15f14:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f18:	cmp	r3, #0
   15f1c:	beq	16878 <__assert_fail@plt+0x5934>
   15f20:	b	16b6c <__assert_fail@plt+0x5c28>
   15f24:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15f28:	cmp	r3, #0
   15f2c:	beq	15f48 <__assert_fail@plt+0x5004>
   15f30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f34:	cmp	r3, #0
   15f38:	beq	15f48 <__assert_fail@plt+0x5004>
   15f3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f40:	cmp	r3, #0
   15f44:	bne	16880 <__assert_fail@plt+0x593c>
   15f48:	ldr	r3, [fp, #4]
   15f4c:	cmp	r3, #2
   15f50:	bne	15f60 <__assert_fail@plt+0x501c>
   15f54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f58:	cmp	r3, #0
   15f5c:	bne	16b40 <__assert_fail@plt+0x5bfc>
   15f60:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15f64:	cmp	r3, #0
   15f68:	beq	166cc <__assert_fail@plt+0x5788>
   15f6c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   15f70:	strb	r3, [fp, #-38]	; 0xffffffda
   15f74:	b	16778 <__assert_fail@plt+0x5834>
   15f78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15f7c:	cmn	r3, #1
   15f80:	bne	15fa4 <__assert_fail@plt+0x5060>
   15f84:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15f88:	add	r3, r3, #1
   15f8c:	ldrb	r3, [r3]
   15f90:	cmp	r3, #0
   15f94:	movne	r3, #1
   15f98:	moveq	r3, #0
   15f9c:	uxtb	r3, r3
   15fa0:	b	15fb8 <__assert_fail@plt+0x5074>
   15fa4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15fa8:	cmp	r3, #1
   15fac:	movne	r3, #1
   15fb0:	moveq	r3, #0
   15fb4:	uxtb	r3, r3
   15fb8:	cmp	r3, #0
   15fbc:	bne	166d4 <__assert_fail@plt+0x5790>
   15fc0:	ldr	r3, [fp, #-16]
   15fc4:	cmp	r3, #0
   15fc8:	bne	166dc <__assert_fail@plt+0x5798>
   15fcc:	mov	r3, #1
   15fd0:	strb	r3, [fp, #-42]	; 0xffffffd6
   15fd4:	ldr	r3, [fp, #4]
   15fd8:	cmp	r3, #2
   15fdc:	bne	166e4 <__assert_fail@plt+0x57a0>
   15fe0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15fe4:	cmp	r3, #0
   15fe8:	beq	166e4 <__assert_fail@plt+0x57a0>
   15fec:	b	16b6c <__assert_fail@plt+0x5c28>
   15ff0:	mov	r3, #1
   15ff4:	strb	r3, [fp, #-36]	; 0xffffffdc
   15ff8:	mov	r3, #1
   15ffc:	strb	r3, [fp, #-42]	; 0xffffffd6
   16000:	ldr	r3, [fp, #4]
   16004:	cmp	r3, #2
   16008:	bne	166ec <__assert_fail@plt+0x57a8>
   1600c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16010:	cmp	r3, #0
   16014:	bne	16b48 <__assert_fail@plt+0x5c04>
   16018:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1601c:	cmp	r3, #0
   16020:	beq	16040 <__assert_fail@plt+0x50fc>
   16024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16028:	cmp	r3, #0
   1602c:	bne	16040 <__assert_fail@plt+0x50fc>
   16030:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16034:	str	r3, [fp, #-24]	; 0xffffffe8
   16038:	mov	r3, #0
   1603c:	str	r3, [fp, #-92]	; 0xffffffa4
   16040:	ldr	r2, [fp, #-20]	; 0xffffffec
   16044:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16048:	cmp	r2, r3
   1604c:	bcs	16064 <__assert_fail@plt+0x5120>
   16050:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16054:	ldr	r3, [fp, #-20]	; 0xffffffec
   16058:	add	r3, r2, r3
   1605c:	mov	r2, #39	; 0x27
   16060:	strb	r2, [r3]
   16064:	ldr	r3, [fp, #-20]	; 0xffffffec
   16068:	add	r3, r3, #1
   1606c:	str	r3, [fp, #-20]	; 0xffffffec
   16070:	ldr	r2, [fp, #-20]	; 0xffffffec
   16074:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16078:	cmp	r2, r3
   1607c:	bcs	16094 <__assert_fail@plt+0x5150>
   16080:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16084:	ldr	r3, [fp, #-20]	; 0xffffffec
   16088:	add	r3, r2, r3
   1608c:	mov	r2, #92	; 0x5c
   16090:	strb	r2, [r3]
   16094:	ldr	r3, [fp, #-20]	; 0xffffffec
   16098:	add	r3, r3, #1
   1609c:	str	r3, [fp, #-20]	; 0xffffffec
   160a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   160a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160a8:	cmp	r2, r3
   160ac:	bcs	160c4 <__assert_fail@plt+0x5180>
   160b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   160b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   160b8:	add	r3, r2, r3
   160bc:	mov	r2, #39	; 0x27
   160c0:	strb	r2, [r3]
   160c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   160c8:	add	r3, r3, #1
   160cc:	str	r3, [fp, #-20]	; 0xffffffec
   160d0:	mov	r3, #0
   160d4:	strb	r3, [fp, #-35]	; 0xffffffdd
   160d8:	b	166ec <__assert_fail@plt+0x57a8>
   160dc:	mov	r3, #1
   160e0:	strb	r3, [fp, #-42]	; 0xffffffd6
   160e4:	b	166f0 <__assert_fail@plt+0x57ac>
   160e8:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   160ec:	cmp	r3, #0
   160f0:	beq	16130 <__assert_fail@plt+0x51ec>
   160f4:	mov	r3, #1
   160f8:	str	r3, [fp, #-48]	; 0xffffffd0
   160fc:	bl	10e3c <__ctype_b_loc@plt>
   16100:	mov	r3, r0
   16104:	ldr	r2, [r3]
   16108:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1610c:	lsl	r3, r3, #1
   16110:	add	r3, r2, r3
   16114:	ldrh	r3, [r3]
   16118:	and	r3, r3, #16384	; 0x4000
   1611c:	cmp	r3, #0
   16120:	movne	r3, #1
   16124:	moveq	r3, #0
   16128:	strb	r3, [fp, #-49]	; 0xffffffcf
   1612c:	b	1637c <__assert_fail@plt+0x5438>
   16130:	sub	r3, fp, #76	; 0x4c
   16134:	mov	r2, #8
   16138:	mov	r1, #0
   1613c:	mov	r0, r3
   16140:	bl	10e9c <memset@plt>
   16144:	mov	r3, #0
   16148:	str	r3, [fp, #-48]	; 0xffffffd0
   1614c:	mov	r3, #1
   16150:	strb	r3, [fp, #-49]	; 0xffffffcf
   16154:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16158:	cmn	r3, #1
   1615c:	bne	1616c <__assert_fail@plt+0x5228>
   16160:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16164:	bl	10e60 <strlen@plt>
   16168:	str	r0, [fp, #-100]	; 0xffffff9c
   1616c:	ldr	r2, [fp, #-16]
   16170:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16174:	add	r3, r2, r3
   16178:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1617c:	add	r1, r2, r3
   16180:	ldr	r2, [fp, #-16]
   16184:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16188:	add	r3, r2, r3
   1618c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16190:	sub	r2, r2, r3
   16194:	sub	r3, fp, #76	; 0x4c
   16198:	sub	r0, fp, #80	; 0x50
   1619c:	bl	19be4 <__assert_fail@plt+0x8ca0>
   161a0:	str	r0, [fp, #-64]	; 0xffffffc0
   161a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   161a8:	cmp	r3, #0
   161ac:	beq	16370 <__assert_fail@plt+0x542c>
   161b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   161b4:	cmn	r3, #1
   161b8:	bne	161c8 <__assert_fail@plt+0x5284>
   161bc:	mov	r3, #0
   161c0:	strb	r3, [fp, #-49]	; 0xffffffcf
   161c4:	b	1637c <__assert_fail@plt+0x5438>
   161c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   161cc:	cmn	r3, #2
   161d0:	bne	16228 <__assert_fail@plt+0x52e4>
   161d4:	mov	r3, #0
   161d8:	strb	r3, [fp, #-49]	; 0xffffffcf
   161dc:	b	161ec <__assert_fail@plt+0x52a8>
   161e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   161e4:	add	r3, r3, #1
   161e8:	str	r3, [fp, #-48]	; 0xffffffd0
   161ec:	ldr	r2, [fp, #-16]
   161f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   161f4:	add	r2, r2, r3
   161f8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   161fc:	cmp	r2, r3
   16200:	bcs	16378 <__assert_fail@plt+0x5434>
   16204:	ldr	r2, [fp, #-16]
   16208:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1620c:	add	r3, r2, r3
   16210:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16214:	add	r3, r2, r3
   16218:	ldrb	r3, [r3]
   1621c:	cmp	r3, #0
   16220:	bne	161e0 <__assert_fail@plt+0x529c>
   16224:	b	16378 <__assert_fail@plt+0x5434>
   16228:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1622c:	cmp	r3, #0
   16230:	beq	16324 <__assert_fail@plt+0x53e0>
   16234:	ldr	r3, [fp, #4]
   16238:	cmp	r3, #2
   1623c:	bne	16324 <__assert_fail@plt+0x53e0>
   16240:	mov	r3, #1
   16244:	str	r3, [fp, #-56]	; 0xffffffc8
   16248:	b	16314 <__assert_fail@plt+0x53d0>
   1624c:	ldr	r2, [fp, #-16]
   16250:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16254:	add	r2, r2, r3
   16258:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1625c:	add	r3, r2, r3
   16260:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16264:	add	r3, r2, r3
   16268:	ldrb	r3, [r3]
   1626c:	sub	r3, r3, #91	; 0x5b
   16270:	cmp	r3, #33	; 0x21
   16274:	ldrls	pc, [pc, r3, lsl #2]
   16278:	b	16304 <__assert_fail@plt+0x53c0>
   1627c:	andeq	r6, r1, r0, asr fp
   16280:	andeq	r6, r1, r0, asr fp
   16284:	andeq	r6, r1, r4, lsl #6
   16288:	andeq	r6, r1, r0, asr fp
   1628c:	andeq	r6, r1, r4, lsl #6
   16290:	andeq	r6, r1, r0, asr fp
   16294:	andeq	r6, r1, r4, lsl #6
   16298:	andeq	r6, r1, r4, lsl #6
   1629c:	andeq	r6, r1, r4, lsl #6
   162a0:	andeq	r6, r1, r4, lsl #6
   162a4:	andeq	r6, r1, r4, lsl #6
   162a8:	andeq	r6, r1, r4, lsl #6
   162ac:	andeq	r6, r1, r4, lsl #6
   162b0:	andeq	r6, r1, r4, lsl #6
   162b4:	andeq	r6, r1, r4, lsl #6
   162b8:	andeq	r6, r1, r4, lsl #6
   162bc:	andeq	r6, r1, r4, lsl #6
   162c0:	andeq	r6, r1, r4, lsl #6
   162c4:	andeq	r6, r1, r4, lsl #6
   162c8:	andeq	r6, r1, r4, lsl #6
   162cc:	andeq	r6, r1, r4, lsl #6
   162d0:	andeq	r6, r1, r4, lsl #6
   162d4:	andeq	r6, r1, r4, lsl #6
   162d8:	andeq	r6, r1, r4, lsl #6
   162dc:	andeq	r6, r1, r4, lsl #6
   162e0:	andeq	r6, r1, r4, lsl #6
   162e4:	andeq	r6, r1, r4, lsl #6
   162e8:	andeq	r6, r1, r4, lsl #6
   162ec:	andeq	r6, r1, r4, lsl #6
   162f0:	andeq	r6, r1, r4, lsl #6
   162f4:	andeq	r6, r1, r4, lsl #6
   162f8:	andeq	r6, r1, r4, lsl #6
   162fc:	andeq	r6, r1, r4, lsl #6
   16300:	andeq	r6, r1, r0, asr fp
   16304:	nop			; (mov r0, r0)
   16308:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1630c:	add	r3, r3, #1
   16310:	str	r3, [fp, #-56]	; 0xffffffc8
   16314:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16318:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1631c:	cmp	r2, r3
   16320:	bcc	1624c <__assert_fail@plt+0x5308>
   16324:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16328:	mov	r0, r3
   1632c:	bl	10da0 <iswprint@plt>
   16330:	mov	r3, r0
   16334:	cmp	r3, #0
   16338:	bne	16344 <__assert_fail@plt+0x5400>
   1633c:	mov	r3, #0
   16340:	strb	r3, [fp, #-49]	; 0xffffffcf
   16344:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16348:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1634c:	add	r3, r2, r3
   16350:	str	r3, [fp, #-48]	; 0xffffffd0
   16354:	sub	r3, fp, #76	; 0x4c
   16358:	mov	r0, r3
   1635c:	bl	10d4c <mbsinit@plt>
   16360:	mov	r3, r0
   16364:	cmp	r3, #0
   16368:	beq	1616c <__assert_fail@plt+0x5228>
   1636c:	b	1637c <__assert_fail@plt+0x5438>
   16370:	nop			; (mov r0, r0)
   16374:	b	1637c <__assert_fail@plt+0x5438>
   16378:	nop			; (mov r0, r0)
   1637c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   16380:	strb	r3, [fp, #-42]	; 0xffffffd6
   16384:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16388:	cmp	r3, #1
   1638c:	bhi	163b0 <__assert_fail@plt+0x546c>
   16390:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16394:	cmp	r3, #0
   16398:	beq	166f0 <__assert_fail@plt+0x57ac>
   1639c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   163a0:	eor	r3, r3, #1
   163a4:	uxtb	r3, r3
   163a8:	cmp	r3, #0
   163ac:	beq	166f0 <__assert_fail@plt+0x57ac>
   163b0:	ldr	r2, [fp, #-16]
   163b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   163b8:	add	r3, r2, r3
   163bc:	str	r3, [fp, #-68]	; 0xffffffbc
   163c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   163c4:	cmp	r3, #0
   163c8:	beq	16588 <__assert_fail@plt+0x5644>
   163cc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   163d0:	eor	r3, r3, #1
   163d4:	uxtb	r3, r3
   163d8:	cmp	r3, #0
   163dc:	beq	16588 <__assert_fail@plt+0x5644>
   163e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   163e4:	cmp	r3, #0
   163e8:	bne	16b58 <__assert_fail@plt+0x5c14>
   163ec:	mov	r3, #1
   163f0:	strb	r3, [fp, #-41]	; 0xffffffd7
   163f4:	ldr	r3, [fp, #4]
   163f8:	cmp	r3, #2
   163fc:	bne	164ac <__assert_fail@plt+0x5568>
   16400:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16404:	eor	r3, r3, #1
   16408:	uxtb	r3, r3
   1640c:	cmp	r3, #0
   16410:	beq	164ac <__assert_fail@plt+0x5568>
   16414:	ldr	r2, [fp, #-20]	; 0xffffffec
   16418:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1641c:	cmp	r2, r3
   16420:	bcs	16438 <__assert_fail@plt+0x54f4>
   16424:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16428:	ldr	r3, [fp, #-20]	; 0xffffffec
   1642c:	add	r3, r2, r3
   16430:	mov	r2, #39	; 0x27
   16434:	strb	r2, [r3]
   16438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1643c:	add	r3, r3, #1
   16440:	str	r3, [fp, #-20]	; 0xffffffec
   16444:	ldr	r2, [fp, #-20]	; 0xffffffec
   16448:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1644c:	cmp	r2, r3
   16450:	bcs	16468 <__assert_fail@plt+0x5524>
   16454:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1645c:	add	r3, r2, r3
   16460:	mov	r2, #36	; 0x24
   16464:	strb	r2, [r3]
   16468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1646c:	add	r3, r3, #1
   16470:	str	r3, [fp, #-20]	; 0xffffffec
   16474:	ldr	r2, [fp, #-20]	; 0xffffffec
   16478:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1647c:	cmp	r2, r3
   16480:	bcs	16498 <__assert_fail@plt+0x5554>
   16484:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1648c:	add	r3, r2, r3
   16490:	mov	r2, #39	; 0x27
   16494:	strb	r2, [r3]
   16498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1649c:	add	r3, r3, #1
   164a0:	str	r3, [fp, #-20]	; 0xffffffec
   164a4:	mov	r3, #1
   164a8:	strb	r3, [fp, #-35]	; 0xffffffdd
   164ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   164b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   164b4:	cmp	r2, r3
   164b8:	bcs	164d0 <__assert_fail@plt+0x558c>
   164bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   164c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164c4:	add	r3, r2, r3
   164c8:	mov	r2, #92	; 0x5c
   164cc:	strb	r2, [r3]
   164d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164d4:	add	r3, r3, #1
   164d8:	str	r3, [fp, #-20]	; 0xffffffec
   164dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   164e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   164e4:	cmp	r2, r3
   164e8:	bcs	16510 <__assert_fail@plt+0x55cc>
   164ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   164f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164f4:	add	r3, r2, r3
   164f8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   164fc:	lsr	r2, r2, #6
   16500:	uxtb	r2, r2
   16504:	add	r2, r2, #48	; 0x30
   16508:	uxtb	r2, r2
   1650c:	strb	r2, [r3]
   16510:	ldr	r3, [fp, #-20]	; 0xffffffec
   16514:	add	r3, r3, #1
   16518:	str	r3, [fp, #-20]	; 0xffffffec
   1651c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16520:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16524:	cmp	r2, r3
   16528:	bcs	16558 <__assert_fail@plt+0x5614>
   1652c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16530:	ldr	r3, [fp, #-20]	; 0xffffffec
   16534:	add	r3, r2, r3
   16538:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1653c:	lsr	r2, r2, #3
   16540:	uxtb	r2, r2
   16544:	and	r2, r2, #7
   16548:	uxtb	r2, r2
   1654c:	add	r2, r2, #48	; 0x30
   16550:	uxtb	r2, r2
   16554:	strb	r2, [r3]
   16558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1655c:	add	r3, r3, #1
   16560:	str	r3, [fp, #-20]	; 0xffffffec
   16564:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16568:	and	r3, r3, #7
   1656c:	uxtb	r3, r3
   16570:	add	r3, r3, #48	; 0x30
   16574:	strb	r3, [fp, #-38]	; 0xffffffda
   16578:	b	165cc <__assert_fail@plt+0x5688>
   1657c:	andeq	fp, r1, r8, ror #31
   16580:	strdeq	fp, [r1], -r0
   16584:	andeq	fp, r1, ip, ror #31
   16588:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1658c:	cmp	r3, #0
   16590:	beq	165cc <__assert_fail@plt+0x5688>
   16594:	ldr	r2, [fp, #-20]	; 0xffffffec
   16598:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1659c:	cmp	r2, r3
   165a0:	bcs	165b8 <__assert_fail@plt+0x5674>
   165a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   165a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   165ac:	add	r3, r2, r3
   165b0:	mov	r2, #92	; 0x5c
   165b4:	strb	r2, [r3]
   165b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   165bc:	add	r3, r3, #1
   165c0:	str	r3, [fp, #-20]	; 0xffffffec
   165c4:	mov	r3, #0
   165c8:	strb	r3, [fp, #-40]	; 0xffffffd8
   165cc:	ldr	r3, [fp, #-16]
   165d0:	add	r2, r3, #1
   165d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   165d8:	cmp	r2, r3
   165dc:	bcs	166bc <__assert_fail@plt+0x5778>
   165e0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   165e4:	cmp	r3, #0
   165e8:	beq	16668 <__assert_fail@plt+0x5724>
   165ec:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   165f0:	eor	r3, r3, #1
   165f4:	uxtb	r3, r3
   165f8:	cmp	r3, #0
   165fc:	beq	16668 <__assert_fail@plt+0x5724>
   16600:	ldr	r2, [fp, #-20]	; 0xffffffec
   16604:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16608:	cmp	r2, r3
   1660c:	bcs	16624 <__assert_fail@plt+0x56e0>
   16610:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16614:	ldr	r3, [fp, #-20]	; 0xffffffec
   16618:	add	r3, r2, r3
   1661c:	mov	r2, #39	; 0x27
   16620:	strb	r2, [r3]
   16624:	ldr	r3, [fp, #-20]	; 0xffffffec
   16628:	add	r3, r3, #1
   1662c:	str	r3, [fp, #-20]	; 0xffffffec
   16630:	ldr	r2, [fp, #-20]	; 0xffffffec
   16634:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16638:	cmp	r2, r3
   1663c:	bcs	16654 <__assert_fail@plt+0x5710>
   16640:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16644:	ldr	r3, [fp, #-20]	; 0xffffffec
   16648:	add	r3, r2, r3
   1664c:	mov	r2, #39	; 0x27
   16650:	strb	r2, [r3]
   16654:	ldr	r3, [fp, #-20]	; 0xffffffec
   16658:	add	r3, r3, #1
   1665c:	str	r3, [fp, #-20]	; 0xffffffec
   16660:	mov	r3, #0
   16664:	strb	r3, [fp, #-35]	; 0xffffffdd
   16668:	ldr	r2, [fp, #-20]	; 0xffffffec
   1666c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16670:	cmp	r2, r3
   16674:	bcs	1668c <__assert_fail@plt+0x5748>
   16678:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1667c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16680:	add	r3, r2, r3
   16684:	ldrb	r2, [fp, #-38]	; 0xffffffda
   16688:	strb	r2, [r3]
   1668c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16690:	add	r3, r3, #1
   16694:	str	r3, [fp, #-20]	; 0xffffffec
   16698:	ldr	r3, [fp, #-16]
   1669c:	add	r3, r3, #1
   166a0:	str	r3, [fp, #-16]
   166a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   166a8:	ldr	r3, [fp, #-16]
   166ac:	add	r3, r2, r3
   166b0:	ldrb	r3, [r3]
   166b4:	strb	r3, [fp, #-38]	; 0xffffffda
   166b8:	b	163c0 <__assert_fail@plt+0x547c>
   166bc:	nop			; (mov r0, r0)
   166c0:	b	1688c <__assert_fail@plt+0x5948>
   166c4:	nop			; (mov r0, r0)
   166c8:	b	166f0 <__assert_fail@plt+0x57ac>
   166cc:	nop			; (mov r0, r0)
   166d0:	b	166f0 <__assert_fail@plt+0x57ac>
   166d4:	nop			; (mov r0, r0)
   166d8:	b	166f0 <__assert_fail@plt+0x57ac>
   166dc:	nop			; (mov r0, r0)
   166e0:	b	166f0 <__assert_fail@plt+0x57ac>
   166e4:	nop			; (mov r0, r0)
   166e8:	b	166f0 <__assert_fail@plt+0x57ac>
   166ec:	nop			; (mov r0, r0)
   166f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   166f4:	eor	r3, r3, #1
   166f8:	uxtb	r3, r3
   166fc:	cmp	r3, #0
   16700:	bne	16710 <__assert_fail@plt+0x57cc>
   16704:	ldr	r3, [fp, #4]
   16708:	cmp	r3, #2
   1670c:	bne	16724 <__assert_fail@plt+0x57e0>
   16710:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16714:	eor	r3, r3, #1
   16718:	uxtb	r3, r3
   1671c:	cmp	r3, #0
   16720:	bne	16764 <__assert_fail@plt+0x5820>
   16724:	ldr	r3, [fp, #12]
   16728:	cmp	r3, #0
   1672c:	beq	16764 <__assert_fail@plt+0x5820>
   16730:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16734:	lsr	r3, r3, #5
   16738:	uxtb	r3, r3
   1673c:	lsl	r3, r3, #2
   16740:	ldr	r2, [fp, #12]
   16744:	add	r3, r2, r3
   16748:	ldr	r2, [r3]
   1674c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16750:	and	r3, r3, #31
   16754:	lsr	r3, r2, r3
   16758:	and	r3, r3, #1
   1675c:	cmp	r3, #0
   16760:	bne	16778 <__assert_fail@plt+0x5834>
   16764:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   16768:	eor	r3, r3, #1
   1676c:	uxtb	r3, r3
   16770:	cmp	r3, #0
   16774:	bne	16888 <__assert_fail@plt+0x5944>
   16778:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1677c:	cmp	r3, #0
   16780:	bne	16b60 <__assert_fail@plt+0x5c1c>
   16784:	mov	r3, #1
   16788:	strb	r3, [fp, #-41]	; 0xffffffd7
   1678c:	ldr	r3, [fp, #4]
   16790:	cmp	r3, #2
   16794:	bne	16844 <__assert_fail@plt+0x5900>
   16798:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1679c:	eor	r3, r3, #1
   167a0:	uxtb	r3, r3
   167a4:	cmp	r3, #0
   167a8:	beq	16844 <__assert_fail@plt+0x5900>
   167ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   167b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   167b4:	cmp	r2, r3
   167b8:	bcs	167d0 <__assert_fail@plt+0x588c>
   167bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   167c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   167c4:	add	r3, r2, r3
   167c8:	mov	r2, #39	; 0x27
   167cc:	strb	r2, [r3]
   167d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   167d4:	add	r3, r3, #1
   167d8:	str	r3, [fp, #-20]	; 0xffffffec
   167dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   167e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   167e4:	cmp	r2, r3
   167e8:	bcs	16800 <__assert_fail@plt+0x58bc>
   167ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   167f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   167f4:	add	r3, r2, r3
   167f8:	mov	r2, #36	; 0x24
   167fc:	strb	r2, [r3]
   16800:	ldr	r3, [fp, #-20]	; 0xffffffec
   16804:	add	r3, r3, #1
   16808:	str	r3, [fp, #-20]	; 0xffffffec
   1680c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16810:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16814:	cmp	r2, r3
   16818:	bcs	16830 <__assert_fail@plt+0x58ec>
   1681c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16820:	ldr	r3, [fp, #-20]	; 0xffffffec
   16824:	add	r3, r2, r3
   16828:	mov	r2, #39	; 0x27
   1682c:	strb	r2, [r3]
   16830:	ldr	r3, [fp, #-20]	; 0xffffffec
   16834:	add	r3, r3, #1
   16838:	str	r3, [fp, #-20]	; 0xffffffec
   1683c:	mov	r3, #1
   16840:	strb	r3, [fp, #-35]	; 0xffffffdd
   16844:	ldr	r2, [fp, #-20]	; 0xffffffec
   16848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1684c:	cmp	r2, r3
   16850:	bcs	16868 <__assert_fail@plt+0x5924>
   16854:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1685c:	add	r3, r2, r3
   16860:	mov	r2, #92	; 0x5c
   16864:	strb	r2, [r3]
   16868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1686c:	add	r3, r3, #1
   16870:	str	r3, [fp, #-20]	; 0xffffffec
   16874:	b	1688c <__assert_fail@plt+0x5948>
   16878:	nop			; (mov r0, r0)
   1687c:	b	1688c <__assert_fail@plt+0x5948>
   16880:	nop			; (mov r0, r0)
   16884:	b	1688c <__assert_fail@plt+0x5948>
   16888:	nop			; (mov r0, r0)
   1688c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16890:	cmp	r3, #0
   16894:	beq	16914 <__assert_fail@plt+0x59d0>
   16898:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1689c:	eor	r3, r3, #1
   168a0:	uxtb	r3, r3
   168a4:	cmp	r3, #0
   168a8:	beq	16914 <__assert_fail@plt+0x59d0>
   168ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   168b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   168b4:	cmp	r2, r3
   168b8:	bcs	168d0 <__assert_fail@plt+0x598c>
   168bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   168c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168c4:	add	r3, r2, r3
   168c8:	mov	r2, #39	; 0x27
   168cc:	strb	r2, [r3]
   168d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168d4:	add	r3, r3, #1
   168d8:	str	r3, [fp, #-20]	; 0xffffffec
   168dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   168e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   168e4:	cmp	r2, r3
   168e8:	bcs	16900 <__assert_fail@plt+0x59bc>
   168ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   168f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168f4:	add	r3, r2, r3
   168f8:	mov	r2, #39	; 0x27
   168fc:	strb	r2, [r3]
   16900:	ldr	r3, [fp, #-20]	; 0xffffffec
   16904:	add	r3, r3, #1
   16908:	str	r3, [fp, #-20]	; 0xffffffec
   1690c:	mov	r3, #0
   16910:	strb	r3, [fp, #-35]	; 0xffffffdd
   16914:	ldr	r2, [fp, #-20]	; 0xffffffec
   16918:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1691c:	cmp	r2, r3
   16920:	bcs	16938 <__assert_fail@plt+0x59f4>
   16924:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1692c:	add	r3, r2, r3
   16930:	ldrb	r2, [fp, #-38]	; 0xffffffda
   16934:	strb	r2, [r3]
   16938:	ldr	r3, [fp, #-20]	; 0xffffffec
   1693c:	add	r3, r3, #1
   16940:	str	r3, [fp, #-20]	; 0xffffffec
   16944:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   16948:	eor	r3, r3, #1
   1694c:	uxtb	r3, r3
   16950:	cmp	r3, #0
   16954:	beq	16960 <__assert_fail@plt+0x5a1c>
   16958:	mov	r3, #0
   1695c:	strb	r3, [fp, #-37]	; 0xffffffdb
   16960:	ldr	r3, [fp, #-16]
   16964:	add	r3, r3, #1
   16968:	str	r3, [fp, #-16]
   1696c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16970:	cmn	r3, #1
   16974:	bne	1699c <__assert_fail@plt+0x5a58>
   16978:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1697c:	ldr	r3, [fp, #-16]
   16980:	add	r3, r2, r3
   16984:	ldrb	r3, [r3]
   16988:	cmp	r3, #0
   1698c:	movne	r3, #1
   16990:	moveq	r3, #0
   16994:	uxtb	r3, r3
   16998:	b	169b4 <__assert_fail@plt+0x5a70>
   1699c:	ldr	r2, [fp, #-16]
   169a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   169a4:	cmp	r2, r3
   169a8:	movne	r3, #1
   169ac:	moveq	r3, #0
   169b0:	uxtb	r3, r3
   169b4:	cmp	r3, #0
   169b8:	bne	157e0 <__assert_fail@plt+0x489c>
   169bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   169c0:	cmp	r3, #0
   169c4:	bne	169e0 <__assert_fail@plt+0x5a9c>
   169c8:	ldr	r3, [fp, #4]
   169cc:	cmp	r3, #2
   169d0:	bne	169e0 <__assert_fail@plt+0x5a9c>
   169d4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   169d8:	cmp	r3, #0
   169dc:	bne	16b68 <__assert_fail@plt+0x5c24>
   169e0:	ldr	r3, [fp, #4]
   169e4:	cmp	r3, #2
   169e8:	bne	16a88 <__assert_fail@plt+0x5b44>
   169ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   169f0:	eor	r3, r3, #1
   169f4:	uxtb	r3, r3
   169f8:	cmp	r3, #0
   169fc:	beq	16a88 <__assert_fail@plt+0x5b44>
   16a00:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   16a04:	cmp	r3, #0
   16a08:	beq	16a88 <__assert_fail@plt+0x5b44>
   16a0c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   16a10:	cmp	r3, #0
   16a14:	beq	16a5c <__assert_fail@plt+0x5b18>
   16a18:	ldr	r3, [fp, #20]
   16a1c:	str	r3, [sp, #16]
   16a20:	ldr	r3, [fp, #16]
   16a24:	str	r3, [sp, #12]
   16a28:	ldr	r3, [fp, #12]
   16a2c:	str	r3, [sp, #8]
   16a30:	ldr	r3, [fp, #8]
   16a34:	str	r3, [sp, #4]
   16a38:	mov	r3, #5
   16a3c:	str	r3, [sp]
   16a40:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16a44:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16a48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16a4c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16a50:	bl	15530 <__assert_fail@plt+0x45ec>
   16a54:	mov	r3, r0
   16a58:	b	16bd0 <__assert_fail@plt+0x5c8c>
   16a5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16a60:	cmp	r3, #0
   16a64:	bne	16a88 <__assert_fail@plt+0x5b44>
   16a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a6c:	cmp	r3, #0
   16a70:	beq	16a88 <__assert_fail@plt+0x5b44>
   16a74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a78:	str	r3, [fp, #-92]	; 0xffffffa4
   16a7c:	mov	r3, #0
   16a80:	str	r3, [fp, #-20]	; 0xffffffec
   16a84:	b	155bc <__assert_fail@plt+0x4678>
   16a88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a8c:	cmp	r3, #0
   16a90:	beq	16afc <__assert_fail@plt+0x5bb8>
   16a94:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16a98:	eor	r3, r3, #1
   16a9c:	uxtb	r3, r3
   16aa0:	cmp	r3, #0
   16aa4:	beq	16afc <__assert_fail@plt+0x5bb8>
   16aa8:	b	16aec <__assert_fail@plt+0x5ba8>
   16aac:	ldr	r2, [fp, #-20]	; 0xffffffec
   16ab0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16ab4:	cmp	r2, r3
   16ab8:	bcs	16ad4 <__assert_fail@plt+0x5b90>
   16abc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ac4:	add	r3, r2, r3
   16ac8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16acc:	ldrb	r2, [r2]
   16ad0:	strb	r2, [r3]
   16ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ad8:	add	r3, r3, #1
   16adc:	str	r3, [fp, #-20]	; 0xffffffec
   16ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ae4:	add	r3, r3, #1
   16ae8:	str	r3, [fp, #-28]	; 0xffffffe4
   16aec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16af0:	ldrb	r3, [r3]
   16af4:	cmp	r3, #0
   16af8:	bne	16aac <__assert_fail@plt+0x5b68>
   16afc:	ldr	r2, [fp, #-20]	; 0xffffffec
   16b00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16b04:	cmp	r2, r3
   16b08:	bcs	16b20 <__assert_fail@plt+0x5bdc>
   16b0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b14:	add	r3, r2, r3
   16b18:	mov	r2, #0
   16b1c:	strb	r2, [r3]
   16b20:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b24:	b	16bd0 <__assert_fail@plt+0x5c8c>
   16b28:	nop			; (mov r0, r0)
   16b2c:	b	16b6c <__assert_fail@plt+0x5c28>
   16b30:	nop			; (mov r0, r0)
   16b34:	b	16b6c <__assert_fail@plt+0x5c28>
   16b38:	nop			; (mov r0, r0)
   16b3c:	b	16b6c <__assert_fail@plt+0x5c28>
   16b40:	nop			; (mov r0, r0)
   16b44:	b	16b6c <__assert_fail@plt+0x5c28>
   16b48:	nop			; (mov r0, r0)
   16b4c:	b	16b6c <__assert_fail@plt+0x5c28>
   16b50:	nop			; (mov r0, r0)
   16b54:	b	16b6c <__assert_fail@plt+0x5c28>
   16b58:	nop			; (mov r0, r0)
   16b5c:	b	16b6c <__assert_fail@plt+0x5c28>
   16b60:	nop			; (mov r0, r0)
   16b64:	b	16b6c <__assert_fail@plt+0x5c28>
   16b68:	nop			; (mov r0, r0)
   16b6c:	ldr	r3, [fp, #4]
   16b70:	cmp	r3, #2
   16b74:	bne	16b8c <__assert_fail@plt+0x5c48>
   16b78:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16b7c:	cmp	r3, #0
   16b80:	beq	16b8c <__assert_fail@plt+0x5c48>
   16b84:	mov	r3, #4
   16b88:	str	r3, [fp, #4]
   16b8c:	ldr	r3, [fp, #8]
   16b90:	bic	r3, r3, #2
   16b94:	ldr	r2, [fp, #20]
   16b98:	str	r2, [sp, #16]
   16b9c:	ldr	r2, [fp, #16]
   16ba0:	str	r2, [sp, #12]
   16ba4:	mov	r2, #0
   16ba8:	str	r2, [sp, #8]
   16bac:	str	r3, [sp, #4]
   16bb0:	ldr	r3, [fp, #4]
   16bb4:	str	r3, [sp]
   16bb8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16bbc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16bc0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   16bc4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16bc8:	bl	15530 <__assert_fail@plt+0x45ec>
   16bcc:	mov	r3, r0
   16bd0:	mov	r0, r3
   16bd4:	sub	sp, fp, #8
   16bd8:	pop	{r4, fp, pc}
   16bdc:	push	{fp, lr}
   16be0:	add	fp, sp, #4
   16be4:	sub	sp, sp, #56	; 0x38
   16be8:	str	r0, [fp, #-24]	; 0xffffffe8
   16bec:	str	r1, [fp, #-28]	; 0xffffffe4
   16bf0:	str	r2, [fp, #-32]	; 0xffffffe0
   16bf4:	str	r3, [fp, #-36]	; 0xffffffdc
   16bf8:	ldr	r3, [fp, #4]
   16bfc:	cmp	r3, #0
   16c00:	beq	16c0c <__assert_fail@plt+0x5cc8>
   16c04:	ldr	r3, [fp, #4]
   16c08:	b	16c10 <__assert_fail@plt+0x5ccc>
   16c0c:	ldr	r3, [pc, #132]	; 16c98 <__assert_fail@plt+0x5d54>
   16c10:	str	r3, [fp, #-8]
   16c14:	bl	10e84 <__errno_location@plt>
   16c18:	mov	r3, r0
   16c1c:	ldr	r3, [r3]
   16c20:	str	r3, [fp, #-12]
   16c24:	ldr	r3, [fp, #-8]
   16c28:	ldr	r3, [r3]
   16c2c:	ldr	r2, [fp, #-8]
   16c30:	ldr	r2, [r2, #4]
   16c34:	ldr	r1, [fp, #-8]
   16c38:	add	r1, r1, #8
   16c3c:	ldr	r0, [fp, #-8]
   16c40:	ldr	r0, [r0, #40]	; 0x28
   16c44:	ldr	ip, [fp, #-8]
   16c48:	ldr	ip, [ip, #44]	; 0x2c
   16c4c:	str	ip, [sp, #16]
   16c50:	str	r0, [sp, #12]
   16c54:	str	r1, [sp, #8]
   16c58:	str	r2, [sp, #4]
   16c5c:	str	r3, [sp]
   16c60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16c64:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16c68:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16c6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c70:	bl	15530 <__assert_fail@plt+0x45ec>
   16c74:	str	r0, [fp, #-16]
   16c78:	bl	10e84 <__errno_location@plt>
   16c7c:	mov	r2, r0
   16c80:	ldr	r3, [fp, #-12]
   16c84:	str	r3, [r2]
   16c88:	ldr	r3, [fp, #-16]
   16c8c:	mov	r0, r3
   16c90:	sub	sp, fp, #4
   16c94:	pop	{fp, pc}
   16c98:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   16c9c:	push	{fp, lr}
   16ca0:	add	fp, sp, #4
   16ca4:	sub	sp, sp, #16
   16ca8:	str	r0, [fp, #-8]
   16cac:	str	r1, [fp, #-12]
   16cb0:	str	r2, [fp, #-16]
   16cb4:	ldr	r3, [fp, #-16]
   16cb8:	mov	r2, #0
   16cbc:	ldr	r1, [fp, #-12]
   16cc0:	ldr	r0, [fp, #-8]
   16cc4:	bl	16cd8 <__assert_fail@plt+0x5d94>
   16cc8:	mov	r3, r0
   16ccc:	mov	r0, r3
   16cd0:	sub	sp, fp, #4
   16cd4:	pop	{fp, pc}
   16cd8:	push	{fp, lr}
   16cdc:	add	fp, sp, #4
   16ce0:	sub	sp, sp, #64	; 0x40
   16ce4:	str	r0, [fp, #-32]	; 0xffffffe0
   16ce8:	str	r1, [fp, #-36]	; 0xffffffdc
   16cec:	str	r2, [fp, #-40]	; 0xffffffd8
   16cf0:	str	r3, [fp, #-44]	; 0xffffffd4
   16cf4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16cf8:	cmp	r3, #0
   16cfc:	beq	16d08 <__assert_fail@plt+0x5dc4>
   16d00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16d04:	b	16d0c <__assert_fail@plt+0x5dc8>
   16d08:	ldr	r3, [pc, #292]	; 16e34 <__assert_fail@plt+0x5ef0>
   16d0c:	str	r3, [fp, #-8]
   16d10:	bl	10e84 <__errno_location@plt>
   16d14:	mov	r3, r0
   16d18:	ldr	r3, [r3]
   16d1c:	str	r3, [fp, #-12]
   16d20:	ldr	r3, [fp, #-8]
   16d24:	ldr	r3, [r3, #4]
   16d28:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d2c:	cmp	r2, #0
   16d30:	moveq	r2, #1
   16d34:	movne	r2, #0
   16d38:	uxtb	r2, r2
   16d3c:	orr	r3, r3, r2
   16d40:	str	r3, [fp, #-16]
   16d44:	ldr	r3, [fp, #-8]
   16d48:	ldr	r3, [r3]
   16d4c:	ldr	r2, [fp, #-8]
   16d50:	add	r2, r2, #8
   16d54:	ldr	r1, [fp, #-8]
   16d58:	ldr	r1, [r1, #40]	; 0x28
   16d5c:	ldr	r0, [fp, #-8]
   16d60:	ldr	r0, [r0, #44]	; 0x2c
   16d64:	str	r0, [sp, #16]
   16d68:	str	r1, [sp, #12]
   16d6c:	str	r2, [sp, #8]
   16d70:	ldr	r2, [fp, #-16]
   16d74:	str	r2, [sp, #4]
   16d78:	str	r3, [sp]
   16d7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16d80:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16d84:	mov	r1, #0
   16d88:	mov	r0, #0
   16d8c:	bl	15530 <__assert_fail@plt+0x45ec>
   16d90:	mov	r3, r0
   16d94:	add	r3, r3, #1
   16d98:	str	r3, [fp, #-20]	; 0xffffffec
   16d9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16da0:	bl	18078 <__assert_fail@plt+0x7134>
   16da4:	mov	r3, r0
   16da8:	str	r3, [fp, #-24]	; 0xffffffe8
   16dac:	ldr	r3, [fp, #-8]
   16db0:	ldr	r3, [r3]
   16db4:	ldr	r2, [fp, #-8]
   16db8:	add	r2, r2, #8
   16dbc:	ldr	r1, [fp, #-8]
   16dc0:	ldr	r1, [r1, #40]	; 0x28
   16dc4:	ldr	r0, [fp, #-8]
   16dc8:	ldr	r0, [r0, #44]	; 0x2c
   16dcc:	str	r0, [sp, #16]
   16dd0:	str	r1, [sp, #12]
   16dd4:	str	r2, [sp, #8]
   16dd8:	ldr	r2, [fp, #-16]
   16ddc:	str	r2, [sp, #4]
   16de0:	str	r3, [sp]
   16de4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16de8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16dec:	ldr	r1, [fp, #-20]	; 0xffffffec
   16df0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16df4:	bl	15530 <__assert_fail@plt+0x45ec>
   16df8:	bl	10e84 <__errno_location@plt>
   16dfc:	mov	r2, r0
   16e00:	ldr	r3, [fp, #-12]
   16e04:	str	r3, [r2]
   16e08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16e0c:	cmp	r3, #0
   16e10:	beq	16e24 <__assert_fail@plt+0x5ee0>
   16e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e18:	sub	r2, r3, #1
   16e1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16e20:	str	r2, [r3]
   16e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e28:	mov	r0, r3
   16e2c:	sub	sp, fp, #4
   16e30:	pop	{fp, pc}
   16e34:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   16e38:	push	{fp, lr}
   16e3c:	add	fp, sp, #4
   16e40:	sub	sp, sp, #8
   16e44:	ldr	r3, [pc, #196]	; 16f10 <__assert_fail@plt+0x5fcc>
   16e48:	ldr	r3, [r3]
   16e4c:	str	r3, [fp, #-12]
   16e50:	mov	r3, #1
   16e54:	str	r3, [fp, #-8]
   16e58:	b	16e84 <__assert_fail@plt+0x5f40>
   16e5c:	ldr	r3, [fp, #-8]
   16e60:	lsl	r3, r3, #3
   16e64:	ldr	r2, [fp, #-12]
   16e68:	add	r3, r2, r3
   16e6c:	ldr	r3, [r3, #4]
   16e70:	mov	r0, r3
   16e74:	bl	14f98 <__assert_fail@plt+0x4054>
   16e78:	ldr	r3, [fp, #-8]
   16e7c:	add	r3, r3, #1
   16e80:	str	r3, [fp, #-8]
   16e84:	ldr	r3, [pc, #136]	; 16f14 <__assert_fail@plt+0x5fd0>
   16e88:	ldr	r3, [r3]
   16e8c:	ldr	r2, [fp, #-8]
   16e90:	cmp	r2, r3
   16e94:	blt	16e5c <__assert_fail@plt+0x5f18>
   16e98:	ldr	r3, [fp, #-12]
   16e9c:	ldr	r3, [r3, #4]
   16ea0:	ldr	r2, [pc, #112]	; 16f18 <__assert_fail@plt+0x5fd4>
   16ea4:	cmp	r3, r2
   16ea8:	beq	16ed4 <__assert_fail@plt+0x5f90>
   16eac:	ldr	r3, [fp, #-12]
   16eb0:	ldr	r3, [r3, #4]
   16eb4:	mov	r0, r3
   16eb8:	bl	14f98 <__assert_fail@plt+0x4054>
   16ebc:	ldr	r3, [pc, #88]	; 16f1c <__assert_fail@plt+0x5fd8>
   16ec0:	mov	r2, #256	; 0x100
   16ec4:	str	r2, [r3]
   16ec8:	ldr	r3, [pc, #76]	; 16f1c <__assert_fail@plt+0x5fd8>
   16ecc:	ldr	r2, [pc, #68]	; 16f18 <__assert_fail@plt+0x5fd4>
   16ed0:	str	r2, [r3, #4]
   16ed4:	ldr	r3, [fp, #-12]
   16ed8:	ldr	r2, [pc, #60]	; 16f1c <__assert_fail@plt+0x5fd8>
   16edc:	cmp	r3, r2
   16ee0:	beq	16ef8 <__assert_fail@plt+0x5fb4>
   16ee4:	ldr	r0, [fp, #-12]
   16ee8:	bl	14f98 <__assert_fail@plt+0x4054>
   16eec:	ldr	r3, [pc, #28]	; 16f10 <__assert_fail@plt+0x5fcc>
   16ef0:	ldr	r2, [pc, #36]	; 16f1c <__assert_fail@plt+0x5fd8>
   16ef4:	str	r2, [r3]
   16ef8:	ldr	r3, [pc, #20]	; 16f14 <__assert_fail@plt+0x5fd0>
   16efc:	mov	r2, #1
   16f00:	str	r2, [r3]
   16f04:	nop			; (mov r0, r0)
   16f08:	sub	sp, fp, #4
   16f0c:	pop	{fp, pc}
   16f10:	andeq	sp, r2, r8, lsl #2
   16f14:	strdeq	sp, [r2], -ip
   16f18:	andeq	pc, r2, r8, lsr #9
   16f1c:	andeq	sp, r2, r0, lsl #2
   16f20:	push	{r4, fp, lr}
   16f24:	add	fp, sp, #8
   16f28:	sub	sp, sp, #84	; 0x54
   16f2c:	str	r0, [fp, #-56]	; 0xffffffc8
   16f30:	str	r1, [fp, #-60]	; 0xffffffc4
   16f34:	str	r2, [fp, #-64]	; 0xffffffc0
   16f38:	str	r3, [fp, #-68]	; 0xffffffbc
   16f3c:	bl	10e84 <__errno_location@plt>
   16f40:	mov	r3, r0
   16f44:	ldr	r3, [r3]
   16f48:	str	r3, [fp, #-24]	; 0xffffffe8
   16f4c:	ldr	r3, [pc, #640]	; 171d4 <__assert_fail@plt+0x6290>
   16f50:	ldr	r3, [r3]
   16f54:	str	r3, [fp, #-16]
   16f58:	mvn	r3, #-2147483648	; 0x80000000
   16f5c:	str	r3, [fp, #-28]	; 0xffffffe4
   16f60:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16f64:	cmp	r3, #0
   16f68:	blt	16f7c <__assert_fail@plt+0x6038>
   16f6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16f70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f74:	cmp	r2, r3
   16f78:	blt	16f80 <__assert_fail@plt+0x603c>
   16f7c:	bl	10f2c <abort@plt>
   16f80:	ldr	r3, [pc, #592]	; 171d8 <__assert_fail@plt+0x6294>
   16f84:	ldr	r2, [r3]
   16f88:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16f8c:	cmp	r2, r3
   16f90:	bgt	17064 <__assert_fail@plt+0x6120>
   16f94:	ldr	r3, [fp, #-16]
   16f98:	ldr	r2, [pc, #572]	; 171dc <__assert_fail@plt+0x6298>
   16f9c:	cmp	r3, r2
   16fa0:	moveq	r3, #1
   16fa4:	movne	r3, #0
   16fa8:	strb	r3, [fp, #-29]	; 0xffffffe3
   16fac:	ldr	r3, [pc, #548]	; 171d8 <__assert_fail@plt+0x6294>
   16fb0:	ldr	r3, [r3]
   16fb4:	str	r3, [fp, #-48]	; 0xffffffd0
   16fb8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   16fbc:	cmp	r3, #0
   16fc0:	beq	16fcc <__assert_fail@plt+0x6088>
   16fc4:	mov	r0, #0
   16fc8:	b	16fd0 <__assert_fail@plt+0x608c>
   16fcc:	ldr	r0, [fp, #-16]
   16fd0:	ldr	r3, [pc, #512]	; 171d8 <__assert_fail@plt+0x6294>
   16fd4:	ldr	r3, [r3]
   16fd8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16fdc:	sub	r3, r2, r3
   16fe0:	add	r2, r3, #1
   16fe4:	sub	r1, fp, #48	; 0x30
   16fe8:	mov	r3, #8
   16fec:	str	r3, [sp]
   16ff0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ff4:	bl	18398 <__assert_fail@plt+0x7454>
   16ff8:	str	r0, [fp, #-16]
   16ffc:	ldr	r2, [pc, #464]	; 171d4 <__assert_fail@plt+0x6290>
   17000:	ldr	r3, [fp, #-16]
   17004:	str	r3, [r2]
   17008:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1700c:	cmp	r3, #0
   17010:	beq	17024 <__assert_fail@plt+0x60e0>
   17014:	ldr	r3, [fp, #-16]
   17018:	ldr	r2, [pc, #444]	; 171dc <__assert_fail@plt+0x6298>
   1701c:	ldm	r2, {r0, r1}
   17020:	stm	r3, {r0, r1}
   17024:	ldr	r3, [pc, #428]	; 171d8 <__assert_fail@plt+0x6294>
   17028:	ldr	r3, [r3]
   1702c:	lsl	r3, r3, #3
   17030:	ldr	r2, [fp, #-16]
   17034:	add	r0, r2, r3
   17038:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1703c:	ldr	r3, [pc, #404]	; 171d8 <__assert_fail@plt+0x6294>
   17040:	ldr	r3, [r3]
   17044:	sub	r3, r2, r3
   17048:	lsl	r3, r3, #3
   1704c:	mov	r2, r3
   17050:	mov	r1, #0
   17054:	bl	10e9c <memset@plt>
   17058:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1705c:	ldr	r2, [pc, #372]	; 171d8 <__assert_fail@plt+0x6294>
   17060:	str	r3, [r2]
   17064:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17068:	lsl	r3, r3, #3
   1706c:	ldr	r2, [fp, #-16]
   17070:	add	r3, r2, r3
   17074:	ldr	r3, [r3]
   17078:	str	r3, [fp, #-36]	; 0xffffffdc
   1707c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17080:	lsl	r3, r3, #3
   17084:	ldr	r2, [fp, #-16]
   17088:	add	r3, r2, r3
   1708c:	ldr	r3, [r3, #4]
   17090:	str	r3, [fp, #-20]	; 0xffffffec
   17094:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17098:	ldr	r3, [r3, #4]
   1709c:	orr	r3, r3, #1
   170a0:	str	r3, [fp, #-40]	; 0xffffffd8
   170a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   170a8:	ldr	r3, [r3]
   170ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   170b0:	add	r2, r2, #8
   170b4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   170b8:	ldr	r1, [r1, #40]	; 0x28
   170bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   170c0:	ldr	r0, [r0, #44]	; 0x2c
   170c4:	str	r0, [sp, #16]
   170c8:	str	r1, [sp, #12]
   170cc:	str	r2, [sp, #8]
   170d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   170d4:	str	r2, [sp, #4]
   170d8:	str	r3, [sp]
   170dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   170e0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   170e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   170e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   170ec:	bl	15530 <__assert_fail@plt+0x45ec>
   170f0:	str	r0, [fp, #-44]	; 0xffffffd4
   170f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   170f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   170fc:	cmp	r2, r3
   17100:	bhi	171b4 <__assert_fail@plt+0x6270>
   17104:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17108:	lsl	r3, r3, #3
   1710c:	ldr	r2, [fp, #-16]
   17110:	add	r3, r2, r3
   17114:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17118:	add	r2, r2, #1
   1711c:	str	r2, [fp, #-36]	; 0xffffffdc
   17120:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17124:	str	r2, [r3]
   17128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1712c:	ldr	r2, [pc, #172]	; 171e0 <__assert_fail@plt+0x629c>
   17130:	cmp	r3, r2
   17134:	beq	17140 <__assert_fail@plt+0x61fc>
   17138:	ldr	r0, [fp, #-20]	; 0xffffffec
   1713c:	bl	14f98 <__assert_fail@plt+0x4054>
   17140:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17144:	lsl	r3, r3, #3
   17148:	ldr	r2, [fp, #-16]
   1714c:	add	r4, r2, r3
   17150:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17154:	bl	18078 <__assert_fail@plt+0x7134>
   17158:	mov	r3, r0
   1715c:	str	r3, [fp, #-20]	; 0xffffffec
   17160:	ldr	r3, [fp, #-20]	; 0xffffffec
   17164:	str	r3, [r4, #4]
   17168:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1716c:	ldr	r3, [r3]
   17170:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17174:	add	r2, r2, #8
   17178:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1717c:	ldr	r1, [r1, #40]	; 0x28
   17180:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17184:	ldr	r0, [r0, #44]	; 0x2c
   17188:	str	r0, [sp, #16]
   1718c:	str	r1, [sp, #12]
   17190:	str	r2, [sp, #8]
   17194:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17198:	str	r2, [sp, #4]
   1719c:	str	r3, [sp]
   171a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   171a4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   171a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   171ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   171b0:	bl	15530 <__assert_fail@plt+0x45ec>
   171b4:	bl	10e84 <__errno_location@plt>
   171b8:	mov	r2, r0
   171bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171c0:	str	r3, [r2]
   171c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   171c8:	mov	r0, r3
   171cc:	sub	sp, fp, #8
   171d0:	pop	{r4, fp, pc}
   171d4:	andeq	sp, r2, r8, lsl #2
   171d8:	strdeq	sp, [r2], -ip
   171dc:	andeq	sp, r2, r0, lsl #2
   171e0:	andeq	pc, r2, r8, lsr #9
   171e4:	push	{fp, lr}
   171e8:	add	fp, sp, #4
   171ec:	sub	sp, sp, #8
   171f0:	str	r0, [fp, #-8]
   171f4:	str	r1, [fp, #-12]
   171f8:	ldr	r3, [pc, #28]	; 1721c <__assert_fail@plt+0x62d8>
   171fc:	mvn	r2, #0
   17200:	ldr	r1, [fp, #-12]
   17204:	ldr	r0, [fp, #-8]
   17208:	bl	16f20 <__assert_fail@plt+0x5fdc>
   1720c:	mov	r3, r0
   17210:	mov	r0, r3
   17214:	sub	sp, fp, #4
   17218:	pop	{fp, pc}
   1721c:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   17220:	push	{fp, lr}
   17224:	add	fp, sp, #4
   17228:	sub	sp, sp, #16
   1722c:	str	r0, [fp, #-8]
   17230:	str	r1, [fp, #-12]
   17234:	str	r2, [fp, #-16]
   17238:	ldr	r3, [pc, #28]	; 1725c <__assert_fail@plt+0x6318>
   1723c:	ldr	r2, [fp, #-16]
   17240:	ldr	r1, [fp, #-12]
   17244:	ldr	r0, [fp, #-8]
   17248:	bl	16f20 <__assert_fail@plt+0x5fdc>
   1724c:	mov	r3, r0
   17250:	mov	r0, r3
   17254:	sub	sp, fp, #4
   17258:	pop	{fp, pc}
   1725c:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   17260:	push	{fp, lr}
   17264:	add	fp, sp, #4
   17268:	sub	sp, sp, #8
   1726c:	str	r0, [fp, #-8]
   17270:	ldr	r1, [fp, #-8]
   17274:	mov	r0, #0
   17278:	bl	171e4 <__assert_fail@plt+0x62a0>
   1727c:	mov	r3, r0
   17280:	mov	r0, r3
   17284:	sub	sp, fp, #4
   17288:	pop	{fp, pc}
   1728c:	push	{fp, lr}
   17290:	add	fp, sp, #4
   17294:	sub	sp, sp, #8
   17298:	str	r0, [fp, #-8]
   1729c:	str	r1, [fp, #-12]
   172a0:	ldr	r2, [fp, #-12]
   172a4:	ldr	r1, [fp, #-8]
   172a8:	mov	r0, #0
   172ac:	bl	17220 <__assert_fail@plt+0x62dc>
   172b0:	mov	r3, r0
   172b4:	mov	r0, r3
   172b8:	sub	sp, fp, #4
   172bc:	pop	{fp, pc}
   172c0:	push	{fp, lr}
   172c4:	add	fp, sp, #4
   172c8:	sub	sp, sp, #64	; 0x40
   172cc:	str	r0, [fp, #-56]	; 0xffffffc8
   172d0:	str	r1, [fp, #-60]	; 0xffffffc4
   172d4:	str	r2, [fp, #-64]	; 0xffffffc0
   172d8:	sub	r3, fp, #52	; 0x34
   172dc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   172e0:	mov	r0, r3
   172e4:	bl	153cc <__assert_fail@plt+0x4488>
   172e8:	sub	r3, fp, #52	; 0x34
   172ec:	mvn	r2, #0
   172f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   172f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   172f8:	bl	16f20 <__assert_fail@plt+0x5fdc>
   172fc:	mov	r3, r0
   17300:	mov	r0, r3
   17304:	sub	sp, fp, #4
   17308:	pop	{fp, pc}
   1730c:	push	{fp, lr}
   17310:	add	fp, sp, #4
   17314:	sub	sp, sp, #64	; 0x40
   17318:	str	r0, [fp, #-56]	; 0xffffffc8
   1731c:	str	r1, [fp, #-60]	; 0xffffffc4
   17320:	str	r2, [fp, #-64]	; 0xffffffc0
   17324:	str	r3, [fp, #-68]	; 0xffffffbc
   17328:	sub	r3, fp, #52	; 0x34
   1732c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17330:	mov	r0, r3
   17334:	bl	153cc <__assert_fail@plt+0x4488>
   17338:	sub	r3, fp, #52	; 0x34
   1733c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17340:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17344:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17348:	bl	16f20 <__assert_fail@plt+0x5fdc>
   1734c:	mov	r3, r0
   17350:	mov	r0, r3
   17354:	sub	sp, fp, #4
   17358:	pop	{fp, pc}
   1735c:	push	{fp, lr}
   17360:	add	fp, sp, #4
   17364:	sub	sp, sp, #8
   17368:	str	r0, [fp, #-8]
   1736c:	str	r1, [fp, #-12]
   17370:	ldr	r2, [fp, #-12]
   17374:	ldr	r1, [fp, #-8]
   17378:	mov	r0, #0
   1737c:	bl	172c0 <__assert_fail@plt+0x637c>
   17380:	mov	r3, r0
   17384:	mov	r0, r3
   17388:	sub	sp, fp, #4
   1738c:	pop	{fp, pc}
   17390:	push	{fp, lr}
   17394:	add	fp, sp, #4
   17398:	sub	sp, sp, #16
   1739c:	str	r0, [fp, #-8]
   173a0:	str	r1, [fp, #-12]
   173a4:	str	r2, [fp, #-16]
   173a8:	ldr	r3, [fp, #-16]
   173ac:	ldr	r2, [fp, #-12]
   173b0:	ldr	r1, [fp, #-8]
   173b4:	mov	r0, #0
   173b8:	bl	1730c <__assert_fail@plt+0x63c8>
   173bc:	mov	r3, r0
   173c0:	mov	r0, r3
   173c4:	sub	sp, fp, #4
   173c8:	pop	{fp, pc}
   173cc:	push	{fp, lr}
   173d0:	add	fp, sp, #4
   173d4:	sub	sp, sp, #64	; 0x40
   173d8:	str	r0, [fp, #-56]	; 0xffffffc8
   173dc:	str	r1, [fp, #-60]	; 0xffffffc4
   173e0:	mov	r3, r2
   173e4:	strb	r3, [fp, #-61]	; 0xffffffc3
   173e8:	ldr	r3, [pc, #84]	; 17444 <__assert_fail@plt+0x6500>
   173ec:	sub	ip, fp, #52	; 0x34
   173f0:	mov	lr, r3
   173f4:	ldm	lr!, {r0, r1, r2, r3}
   173f8:	stmia	ip!, {r0, r1, r2, r3}
   173fc:	ldm	lr!, {r0, r1, r2, r3}
   17400:	stmia	ip!, {r0, r1, r2, r3}
   17404:	ldm	lr, {r0, r1, r2, r3}
   17408:	stm	ip, {r0, r1, r2, r3}
   1740c:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   17410:	sub	r3, fp, #52	; 0x34
   17414:	mov	r2, #1
   17418:	mov	r0, r3
   1741c:	bl	15238 <__assert_fail@plt+0x42f4>
   17420:	sub	r3, fp, #52	; 0x34
   17424:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17428:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1742c:	mov	r0, #0
   17430:	bl	16f20 <__assert_fail@plt+0x5fdc>
   17434:	mov	r3, r0
   17438:	mov	r0, r3
   1743c:	sub	sp, fp, #4
   17440:	pop	{fp, pc}
   17444:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   17448:	push	{fp, lr}
   1744c:	add	fp, sp, #4
   17450:	sub	sp, sp, #8
   17454:	str	r0, [fp, #-8]
   17458:	mov	r3, r1
   1745c:	strb	r3, [fp, #-9]
   17460:	ldrb	r3, [fp, #-9]
   17464:	mov	r2, r3
   17468:	mvn	r1, #0
   1746c:	ldr	r0, [fp, #-8]
   17470:	bl	173cc <__assert_fail@plt+0x6488>
   17474:	mov	r3, r0
   17478:	mov	r0, r3
   1747c:	sub	sp, fp, #4
   17480:	pop	{fp, pc}
   17484:	push	{fp, lr}
   17488:	add	fp, sp, #4
   1748c:	sub	sp, sp, #8
   17490:	str	r0, [fp, #-8]
   17494:	mov	r1, #58	; 0x3a
   17498:	ldr	r0, [fp, #-8]
   1749c:	bl	17448 <__assert_fail@plt+0x6504>
   174a0:	mov	r3, r0
   174a4:	mov	r0, r3
   174a8:	sub	sp, fp, #4
   174ac:	pop	{fp, pc}
   174b0:	push	{fp, lr}
   174b4:	add	fp, sp, #4
   174b8:	sub	sp, sp, #8
   174bc:	str	r0, [fp, #-8]
   174c0:	str	r1, [fp, #-12]
   174c4:	mov	r2, #58	; 0x3a
   174c8:	ldr	r1, [fp, #-12]
   174cc:	ldr	r0, [fp, #-8]
   174d0:	bl	173cc <__assert_fail@plt+0x6488>
   174d4:	mov	r3, r0
   174d8:	mov	r0, r3
   174dc:	sub	sp, fp, #4
   174e0:	pop	{fp, pc}
   174e4:	push	{fp, lr}
   174e8:	add	fp, sp, #4
   174ec:	sub	sp, sp, #112	; 0x70
   174f0:	str	r0, [fp, #-56]	; 0xffffffc8
   174f4:	str	r1, [fp, #-60]	; 0xffffffc4
   174f8:	str	r2, [fp, #-64]	; 0xffffffc0
   174fc:	sub	r3, fp, #116	; 0x74
   17500:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17504:	mov	r0, r3
   17508:	bl	153cc <__assert_fail@plt+0x4488>
   1750c:	sub	ip, fp, #52	; 0x34
   17510:	sub	lr, fp, #116	; 0x74
   17514:	ldm	lr!, {r0, r1, r2, r3}
   17518:	stmia	ip!, {r0, r1, r2, r3}
   1751c:	ldm	lr!, {r0, r1, r2, r3}
   17520:	stmia	ip!, {r0, r1, r2, r3}
   17524:	ldm	lr, {r0, r1, r2, r3}
   17528:	stm	ip, {r0, r1, r2, r3}
   1752c:	sub	r3, fp, #52	; 0x34
   17530:	mov	r2, #1
   17534:	mov	r1, #58	; 0x3a
   17538:	mov	r0, r3
   1753c:	bl	15238 <__assert_fail@plt+0x42f4>
   17540:	sub	r3, fp, #52	; 0x34
   17544:	mvn	r2, #0
   17548:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1754c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17550:	bl	16f20 <__assert_fail@plt+0x5fdc>
   17554:	mov	r3, r0
   17558:	mov	r0, r3
   1755c:	sub	sp, fp, #4
   17560:	pop	{fp, pc}
   17564:	push	{fp, lr}
   17568:	add	fp, sp, #4
   1756c:	sub	sp, sp, #24
   17570:	str	r0, [fp, #-8]
   17574:	str	r1, [fp, #-12]
   17578:	str	r2, [fp, #-16]
   1757c:	str	r3, [fp, #-20]	; 0xffffffec
   17580:	mvn	r3, #0
   17584:	str	r3, [sp]
   17588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1758c:	ldr	r2, [fp, #-16]
   17590:	ldr	r1, [fp, #-12]
   17594:	ldr	r0, [fp, #-8]
   17598:	bl	175ac <__assert_fail@plt+0x6668>
   1759c:	mov	r3, r0
   175a0:	mov	r0, r3
   175a4:	sub	sp, fp, #4
   175a8:	pop	{fp, pc}
   175ac:	push	{fp, lr}
   175b0:	add	fp, sp, #4
   175b4:	sub	sp, sp, #64	; 0x40
   175b8:	str	r0, [fp, #-56]	; 0xffffffc8
   175bc:	str	r1, [fp, #-60]	; 0xffffffc4
   175c0:	str	r2, [fp, #-64]	; 0xffffffc0
   175c4:	str	r3, [fp, #-68]	; 0xffffffbc
   175c8:	ldr	r3, [pc, #84]	; 17624 <__assert_fail@plt+0x66e0>
   175cc:	sub	ip, fp, #52	; 0x34
   175d0:	mov	lr, r3
   175d4:	ldm	lr!, {r0, r1, r2, r3}
   175d8:	stmia	ip!, {r0, r1, r2, r3}
   175dc:	ldm	lr!, {r0, r1, r2, r3}
   175e0:	stmia	ip!, {r0, r1, r2, r3}
   175e4:	ldm	lr, {r0, r1, r2, r3}
   175e8:	stm	ip, {r0, r1, r2, r3}
   175ec:	sub	r3, fp, #52	; 0x34
   175f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   175f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   175f8:	mov	r0, r3
   175fc:	bl	15350 <__assert_fail@plt+0x440c>
   17600:	sub	r3, fp, #52	; 0x34
   17604:	ldr	r2, [fp, #4]
   17608:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1760c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17610:	bl	16f20 <__assert_fail@plt+0x5fdc>
   17614:	mov	r3, r0
   17618:	mov	r0, r3
   1761c:	sub	sp, fp, #4
   17620:	pop	{fp, pc}
   17624:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   17628:	push	{fp, lr}
   1762c:	add	fp, sp, #4
   17630:	sub	sp, sp, #16
   17634:	str	r0, [fp, #-8]
   17638:	str	r1, [fp, #-12]
   1763c:	str	r2, [fp, #-16]
   17640:	ldr	r3, [fp, #-16]
   17644:	ldr	r2, [fp, #-12]
   17648:	ldr	r1, [fp, #-8]
   1764c:	mov	r0, #0
   17650:	bl	17564 <__assert_fail@plt+0x6620>
   17654:	mov	r3, r0
   17658:	mov	r0, r3
   1765c:	sub	sp, fp, #4
   17660:	pop	{fp, pc}
   17664:	push	{fp, lr}
   17668:	add	fp, sp, #4
   1766c:	sub	sp, sp, #24
   17670:	str	r0, [fp, #-8]
   17674:	str	r1, [fp, #-12]
   17678:	str	r2, [fp, #-16]
   1767c:	str	r3, [fp, #-20]	; 0xffffffec
   17680:	ldr	r3, [fp, #-20]	; 0xffffffec
   17684:	str	r3, [sp]
   17688:	ldr	r3, [fp, #-16]
   1768c:	ldr	r2, [fp, #-12]
   17690:	ldr	r1, [fp, #-8]
   17694:	mov	r0, #0
   17698:	bl	175ac <__assert_fail@plt+0x6668>
   1769c:	mov	r3, r0
   176a0:	mov	r0, r3
   176a4:	sub	sp, fp, #4
   176a8:	pop	{fp, pc}
   176ac:	push	{fp, lr}
   176b0:	add	fp, sp, #4
   176b4:	sub	sp, sp, #16
   176b8:	str	r0, [fp, #-8]
   176bc:	str	r1, [fp, #-12]
   176c0:	str	r2, [fp, #-16]
   176c4:	ldr	r3, [pc, #28]	; 176e8 <__assert_fail@plt+0x67a4>
   176c8:	ldr	r2, [fp, #-16]
   176cc:	ldr	r1, [fp, #-12]
   176d0:	ldr	r0, [fp, #-8]
   176d4:	bl	16f20 <__assert_fail@plt+0x5fdc>
   176d8:	mov	r3, r0
   176dc:	mov	r0, r3
   176e0:	sub	sp, fp, #4
   176e4:	pop	{fp, pc}
   176e8:	andeq	sp, r2, ip, lsl #2
   176ec:	push	{fp, lr}
   176f0:	add	fp, sp, #4
   176f4:	sub	sp, sp, #8
   176f8:	str	r0, [fp, #-8]
   176fc:	str	r1, [fp, #-12]
   17700:	ldr	r2, [fp, #-12]
   17704:	ldr	r1, [fp, #-8]
   17708:	mov	r0, #0
   1770c:	bl	176ac <__assert_fail@plt+0x6768>
   17710:	mov	r3, r0
   17714:	mov	r0, r3
   17718:	sub	sp, fp, #4
   1771c:	pop	{fp, pc}
   17720:	push	{fp, lr}
   17724:	add	fp, sp, #4
   17728:	sub	sp, sp, #8
   1772c:	str	r0, [fp, #-8]
   17730:	str	r1, [fp, #-12]
   17734:	mvn	r2, #0
   17738:	ldr	r1, [fp, #-12]
   1773c:	ldr	r0, [fp, #-8]
   17740:	bl	176ac <__assert_fail@plt+0x6768>
   17744:	mov	r3, r0
   17748:	mov	r0, r3
   1774c:	sub	sp, fp, #4
   17750:	pop	{fp, pc}
   17754:	push	{fp, lr}
   17758:	add	fp, sp, #4
   1775c:	sub	sp, sp, #8
   17760:	str	r0, [fp, #-8]
   17764:	ldr	r1, [fp, #-8]
   17768:	mov	r0, #0
   1776c:	bl	17720 <__assert_fail@plt+0x67dc>
   17770:	mov	r3, r0
   17774:	mov	r0, r3
   17778:	sub	sp, fp, #4
   1777c:	pop	{fp, pc}
   17780:	push	{fp, lr}
   17784:	add	fp, sp, #4
   17788:	sub	sp, sp, #24
   1778c:	str	r0, [fp, #-16]
   17790:	str	r1, [fp, #-20]	; 0xffffffec
   17794:	str	r2, [fp, #-24]	; 0xffffffe8
   17798:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1779c:	ldr	r1, [fp, #-20]	; 0xffffffec
   177a0:	ldr	r0, [fp, #-16]
   177a4:	bl	10d04 <read@plt>
   177a8:	str	r0, [fp, #-8]
   177ac:	ldr	r3, [fp, #-8]
   177b0:	cmp	r3, #0
   177b4:	blt	177c0 <__assert_fail@plt+0x687c>
   177b8:	ldr	r3, [fp, #-8]
   177bc:	b	17814 <__assert_fail@plt+0x68d0>
   177c0:	bl	10e84 <__errno_location@plt>
   177c4:	mov	r3, r0
   177c8:	ldr	r3, [r3]
   177cc:	cmp	r3, #4
   177d0:	beq	1780c <__assert_fail@plt+0x68c8>
   177d4:	bl	10e84 <__errno_location@plt>
   177d8:	mov	r3, r0
   177dc:	ldr	r3, [r3]
   177e0:	cmp	r3, #22
   177e4:	bne	17804 <__assert_fail@plt+0x68c0>
   177e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177ec:	ldr	r2, [pc, #44]	; 17820 <__assert_fail@plt+0x68dc>
   177f0:	cmp	r3, r2
   177f4:	bls	17804 <__assert_fail@plt+0x68c0>
   177f8:	ldr	r3, [pc, #32]	; 17820 <__assert_fail@plt+0x68dc>
   177fc:	str	r3, [fp, #-24]	; 0xffffffe8
   17800:	b	17810 <__assert_fail@plt+0x68cc>
   17804:	ldr	r3, [fp, #-8]
   17808:	b	17814 <__assert_fail@plt+0x68d0>
   1780c:	nop			; (mov r0, r0)
   17810:	b	17798 <__assert_fail@plt+0x6854>
   17814:	mov	r0, r3
   17818:	sub	sp, fp, #4
   1781c:	pop	{fp, pc}
   17820:	svcvc	0x00f00000	; IMB
   17824:	push	{r4, r5, r6, r7, fp, lr}
   17828:	add	fp, sp, #20
   1782c:	sub	sp, sp, #48	; 0x30
   17830:	str	r0, [fp, #-24]	; 0xffffffe8
   17834:	str	r1, [fp, #-28]	; 0xffffffe4
   17838:	str	r2, [fp, #-32]	; 0xffffffe0
   1783c:	str	r3, [fp, #-36]	; 0xffffffdc
   17840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17844:	cmp	r3, #0
   17848:	beq	1786c <__assert_fail@plt+0x6928>
   1784c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17850:	str	r3, [sp]
   17854:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17858:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1785c:	ldr	r1, [pc, #1260]	; 17d50 <__assert_fail@plt+0x6e0c>
   17860:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17864:	bl	10e78 <fprintf@plt>
   17868:	b	17880 <__assert_fail@plt+0x693c>
   1786c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17870:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17874:	ldr	r1, [pc, #1240]	; 17d54 <__assert_fail@plt+0x6e10>
   17878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1787c:	bl	10e78 <fprintf@plt>
   17880:	ldr	r0, [pc, #1232]	; 17d58 <__assert_fail@plt+0x6e14>
   17884:	bl	10e54 <gettext@plt>
   17888:	mov	r2, r0
   1788c:	ldr	r3, [pc, #1224]	; 17d5c <__assert_fail@plt+0x6e18>
   17890:	ldr	r1, [pc, #1224]	; 17d60 <__assert_fail@plt+0x6e1c>
   17894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17898:	bl	10e78 <fprintf@plt>
   1789c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   178a0:	mov	r0, #10
   178a4:	bl	10d7c <fputc_unlocked@plt>
   178a8:	ldr	r0, [pc, #1204]	; 17d64 <__assert_fail@plt+0x6e20>
   178ac:	bl	10e54 <gettext@plt>
   178b0:	mov	r3, r0
   178b4:	ldr	r2, [pc, #1196]	; 17d68 <__assert_fail@plt+0x6e24>
   178b8:	mov	r1, r3
   178bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   178c0:	bl	10e78 <fprintf@plt>
   178c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   178c8:	mov	r0, #10
   178cc:	bl	10d7c <fputc_unlocked@plt>
   178d0:	ldr	r3, [fp, #8]
   178d4:	cmp	r3, #9
   178d8:	ldrls	pc, [pc, r3, lsl #2]
   178dc:	b	17c98 <__assert_fail@plt+0x6d54>
   178e0:	andeq	r7, r1, r0, asr #26
   178e4:	andeq	r7, r1, r8, lsl #18
   178e8:	andeq	r7, r1, ip, lsr #18
   178ec:	andeq	r7, r1, r8, asr r9
   178f0:	muleq	r1, r8, r9
   178f4:	strdeq	r7, [r1], -r0
   178f8:	andeq	r7, r1, r8, asr sl
   178fc:	ldrdeq	r7, [r1], -r0
   17900:	andeq	r7, r1, r8, asr fp
   17904:	strdeq	r7, [r1], -r0
   17908:	ldr	r0, [pc, #1116]	; 17d6c <__assert_fail@plt+0x6e28>
   1790c:	bl	10e54 <gettext@plt>
   17910:	mov	r1, r0
   17914:	ldr	r3, [fp, #4]
   17918:	ldr	r3, [r3]
   1791c:	mov	r2, r3
   17920:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17924:	bl	10e78 <fprintf@plt>
   17928:	b	17d44 <__assert_fail@plt+0x6e00>
   1792c:	ldr	r0, [pc, #1084]	; 17d70 <__assert_fail@plt+0x6e2c>
   17930:	bl	10e54 <gettext@plt>
   17934:	mov	r1, r0
   17938:	ldr	r3, [fp, #4]
   1793c:	ldr	r2, [r3]
   17940:	ldr	r3, [fp, #4]
   17944:	add	r3, r3, #4
   17948:	ldr	r3, [r3]
   1794c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17950:	bl	10e78 <fprintf@plt>
   17954:	b	17d44 <__assert_fail@plt+0x6e00>
   17958:	ldr	r0, [pc, #1044]	; 17d74 <__assert_fail@plt+0x6e30>
   1795c:	bl	10e54 <gettext@plt>
   17960:	ldr	r3, [fp, #4]
   17964:	ldr	r2, [r3]
   17968:	ldr	r3, [fp, #4]
   1796c:	add	r3, r3, #4
   17970:	ldr	r1, [r3]
   17974:	ldr	r3, [fp, #4]
   17978:	add	r3, r3, #8
   1797c:	ldr	r3, [r3]
   17980:	str	r3, [sp]
   17984:	mov	r3, r1
   17988:	mov	r1, r0
   1798c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17990:	bl	10e78 <fprintf@plt>
   17994:	b	17d44 <__assert_fail@plt+0x6e00>
   17998:	ldr	r0, [pc, #984]	; 17d78 <__assert_fail@plt+0x6e34>
   1799c:	bl	10e54 <gettext@plt>
   179a0:	mov	ip, r0
   179a4:	ldr	r3, [fp, #4]
   179a8:	ldr	r1, [r3]
   179ac:	ldr	r3, [fp, #4]
   179b0:	add	r3, r3, #4
   179b4:	ldr	r0, [r3]
   179b8:	ldr	r3, [fp, #4]
   179bc:	add	r3, r3, #8
   179c0:	ldr	r3, [r3]
   179c4:	ldr	r2, [fp, #4]
   179c8:	add	r2, r2, #12
   179cc:	ldr	r2, [r2]
   179d0:	str	r2, [sp, #4]
   179d4:	str	r3, [sp]
   179d8:	mov	r3, r0
   179dc:	mov	r2, r1
   179e0:	mov	r1, ip
   179e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179e8:	bl	10e78 <fprintf@plt>
   179ec:	b	17d44 <__assert_fail@plt+0x6e00>
   179f0:	ldr	r0, [pc, #900]	; 17d7c <__assert_fail@plt+0x6e38>
   179f4:	bl	10e54 <gettext@plt>
   179f8:	mov	lr, r0
   179fc:	ldr	r3, [fp, #4]
   17a00:	ldr	r0, [r3]
   17a04:	ldr	r3, [fp, #4]
   17a08:	add	r3, r3, #4
   17a0c:	ldr	ip, [r3]
   17a10:	ldr	r3, [fp, #4]
   17a14:	add	r3, r3, #8
   17a18:	ldr	r3, [r3]
   17a1c:	ldr	r2, [fp, #4]
   17a20:	add	r2, r2, #12
   17a24:	ldr	r2, [r2]
   17a28:	ldr	r1, [fp, #4]
   17a2c:	add	r1, r1, #16
   17a30:	ldr	r1, [r1]
   17a34:	str	r1, [sp, #8]
   17a38:	str	r2, [sp, #4]
   17a3c:	str	r3, [sp]
   17a40:	mov	r3, ip
   17a44:	mov	r2, r0
   17a48:	mov	r1, lr
   17a4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a50:	bl	10e78 <fprintf@plt>
   17a54:	b	17d44 <__assert_fail@plt+0x6e00>
   17a58:	ldr	r0, [pc, #800]	; 17d80 <__assert_fail@plt+0x6e3c>
   17a5c:	bl	10e54 <gettext@plt>
   17a60:	mov	r4, r0
   17a64:	ldr	r3, [fp, #4]
   17a68:	ldr	ip, [r3]
   17a6c:	ldr	r3, [fp, #4]
   17a70:	add	r3, r3, #4
   17a74:	ldr	lr, [r3]
   17a78:	ldr	r3, [fp, #4]
   17a7c:	add	r3, r3, #8
   17a80:	ldr	r3, [r3]
   17a84:	ldr	r2, [fp, #4]
   17a88:	add	r2, r2, #12
   17a8c:	ldr	r2, [r2]
   17a90:	ldr	r1, [fp, #4]
   17a94:	add	r1, r1, #16
   17a98:	ldr	r1, [r1]
   17a9c:	ldr	r0, [fp, #4]
   17aa0:	add	r0, r0, #20
   17aa4:	ldr	r0, [r0]
   17aa8:	str	r0, [sp, #12]
   17aac:	str	r1, [sp, #8]
   17ab0:	str	r2, [sp, #4]
   17ab4:	str	r3, [sp]
   17ab8:	mov	r3, lr
   17abc:	mov	r2, ip
   17ac0:	mov	r1, r4
   17ac4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ac8:	bl	10e78 <fprintf@plt>
   17acc:	b	17d44 <__assert_fail@plt+0x6e00>
   17ad0:	ldr	r0, [pc, #684]	; 17d84 <__assert_fail@plt+0x6e40>
   17ad4:	bl	10e54 <gettext@plt>
   17ad8:	mov	r5, r0
   17adc:	ldr	r3, [fp, #4]
   17ae0:	ldr	lr, [r3]
   17ae4:	ldr	r3, [fp, #4]
   17ae8:	add	r3, r3, #4
   17aec:	ldr	r4, [r3]
   17af0:	ldr	r3, [fp, #4]
   17af4:	add	r3, r3, #8
   17af8:	ldr	r3, [r3]
   17afc:	ldr	r2, [fp, #4]
   17b00:	add	r2, r2, #12
   17b04:	ldr	r2, [r2]
   17b08:	ldr	r1, [fp, #4]
   17b0c:	add	r1, r1, #16
   17b10:	ldr	r1, [r1]
   17b14:	ldr	r0, [fp, #4]
   17b18:	add	r0, r0, #20
   17b1c:	ldr	r0, [r0]
   17b20:	ldr	ip, [fp, #4]
   17b24:	add	ip, ip, #24
   17b28:	ldr	ip, [ip]
   17b2c:	str	ip, [sp, #16]
   17b30:	str	r0, [sp, #12]
   17b34:	str	r1, [sp, #8]
   17b38:	str	r2, [sp, #4]
   17b3c:	str	r3, [sp]
   17b40:	mov	r3, r4
   17b44:	mov	r2, lr
   17b48:	mov	r1, r5
   17b4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b50:	bl	10e78 <fprintf@plt>
   17b54:	b	17d44 <__assert_fail@plt+0x6e00>
   17b58:	ldr	r0, [pc, #552]	; 17d88 <__assert_fail@plt+0x6e44>
   17b5c:	bl	10e54 <gettext@plt>
   17b60:	mov	r6, r0
   17b64:	ldr	r3, [fp, #4]
   17b68:	ldr	r4, [r3]
   17b6c:	ldr	r3, [fp, #4]
   17b70:	add	r3, r3, #4
   17b74:	ldr	r5, [r3]
   17b78:	ldr	r3, [fp, #4]
   17b7c:	add	r3, r3, #8
   17b80:	ldr	r3, [r3]
   17b84:	ldr	r2, [fp, #4]
   17b88:	add	r2, r2, #12
   17b8c:	ldr	r2, [r2]
   17b90:	ldr	r1, [fp, #4]
   17b94:	add	r1, r1, #16
   17b98:	ldr	r1, [r1]
   17b9c:	ldr	r0, [fp, #4]
   17ba0:	add	r0, r0, #20
   17ba4:	ldr	r0, [r0]
   17ba8:	ldr	ip, [fp, #4]
   17bac:	add	ip, ip, #24
   17bb0:	ldr	ip, [ip]
   17bb4:	ldr	lr, [fp, #4]
   17bb8:	add	lr, lr, #28
   17bbc:	ldr	lr, [lr]
   17bc0:	str	lr, [sp, #20]
   17bc4:	str	ip, [sp, #16]
   17bc8:	str	r0, [sp, #12]
   17bcc:	str	r1, [sp, #8]
   17bd0:	str	r2, [sp, #4]
   17bd4:	str	r3, [sp]
   17bd8:	mov	r3, r5
   17bdc:	mov	r2, r4
   17be0:	mov	r1, r6
   17be4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17be8:	bl	10e78 <fprintf@plt>
   17bec:	b	17d44 <__assert_fail@plt+0x6e00>
   17bf0:	ldr	r0, [pc, #404]	; 17d8c <__assert_fail@plt+0x6e48>
   17bf4:	bl	10e54 <gettext@plt>
   17bf8:	mov	r7, r0
   17bfc:	ldr	r3, [fp, #4]
   17c00:	ldr	r5, [r3]
   17c04:	ldr	r3, [fp, #4]
   17c08:	add	r3, r3, #4
   17c0c:	ldr	r6, [r3]
   17c10:	ldr	r3, [fp, #4]
   17c14:	add	r3, r3, #8
   17c18:	ldr	r3, [r3]
   17c1c:	ldr	r2, [fp, #4]
   17c20:	add	r2, r2, #12
   17c24:	ldr	r2, [r2]
   17c28:	ldr	r1, [fp, #4]
   17c2c:	add	r1, r1, #16
   17c30:	ldr	r1, [r1]
   17c34:	ldr	r0, [fp, #4]
   17c38:	add	r0, r0, #20
   17c3c:	ldr	r0, [r0]
   17c40:	ldr	ip, [fp, #4]
   17c44:	add	ip, ip, #24
   17c48:	ldr	ip, [ip]
   17c4c:	ldr	lr, [fp, #4]
   17c50:	add	lr, lr, #28
   17c54:	ldr	lr, [lr]
   17c58:	ldr	r4, [fp, #4]
   17c5c:	add	r4, r4, #32
   17c60:	ldr	r4, [r4]
   17c64:	str	r4, [sp, #24]
   17c68:	str	lr, [sp, #20]
   17c6c:	str	ip, [sp, #16]
   17c70:	str	r0, [sp, #12]
   17c74:	str	r1, [sp, #8]
   17c78:	str	r2, [sp, #4]
   17c7c:	str	r3, [sp]
   17c80:	mov	r3, r6
   17c84:	mov	r2, r5
   17c88:	mov	r1, r7
   17c8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17c90:	bl	10e78 <fprintf@plt>
   17c94:	b	17d44 <__assert_fail@plt+0x6e00>
   17c98:	ldr	r0, [pc, #240]	; 17d90 <__assert_fail@plt+0x6e4c>
   17c9c:	bl	10e54 <gettext@plt>
   17ca0:	mov	r7, r0
   17ca4:	ldr	r3, [fp, #4]
   17ca8:	ldr	r5, [r3]
   17cac:	ldr	r3, [fp, #4]
   17cb0:	add	r3, r3, #4
   17cb4:	ldr	r6, [r3]
   17cb8:	ldr	r3, [fp, #4]
   17cbc:	add	r3, r3, #8
   17cc0:	ldr	r3, [r3]
   17cc4:	ldr	r2, [fp, #4]
   17cc8:	add	r2, r2, #12
   17ccc:	ldr	r2, [r2]
   17cd0:	ldr	r1, [fp, #4]
   17cd4:	add	r1, r1, #16
   17cd8:	ldr	r1, [r1]
   17cdc:	ldr	r0, [fp, #4]
   17ce0:	add	r0, r0, #20
   17ce4:	ldr	r0, [r0]
   17ce8:	ldr	ip, [fp, #4]
   17cec:	add	ip, ip, #24
   17cf0:	ldr	ip, [ip]
   17cf4:	ldr	lr, [fp, #4]
   17cf8:	add	lr, lr, #28
   17cfc:	ldr	lr, [lr]
   17d00:	ldr	r4, [fp, #4]
   17d04:	add	r4, r4, #32
   17d08:	ldr	r4, [r4]
   17d0c:	str	r4, [sp, #24]
   17d10:	str	lr, [sp, #20]
   17d14:	str	ip, [sp, #16]
   17d18:	str	r0, [sp, #12]
   17d1c:	str	r1, [sp, #8]
   17d20:	str	r2, [sp, #4]
   17d24:	str	r3, [sp]
   17d28:	mov	r3, r6
   17d2c:	mov	r2, r5
   17d30:	mov	r1, r7
   17d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d38:	bl	10e78 <fprintf@plt>
   17d3c:	b	17d44 <__assert_fail@plt+0x6e00>
   17d40:	nop			; (mov r0, r0)
   17d44:	nop			; (mov r0, r0)
   17d48:	sub	sp, fp, #20
   17d4c:	pop	{r4, r5, r6, r7, fp, pc}
   17d50:	strdeq	fp, [r1], -r4
   17d54:	andeq	ip, r1, r0
   17d58:	andeq	ip, r1, r8
   17d5c:	andeq	r0, r0, r6, ror #15
   17d60:	andeq	ip, r1, r8, lsl r3
   17d64:	andeq	ip, r1, ip
   17d68:	strheq	ip, [r1], -r8
   17d6c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   17d70:	andeq	ip, r1, ip, ror #1
   17d74:	andeq	ip, r1, r4, lsl #2
   17d78:	andeq	ip, r1, r0, lsr #2
   17d7c:	andeq	ip, r1, r0, asr #2
   17d80:	andeq	ip, r1, r4, ror #2
   17d84:	andeq	ip, r1, ip, lsl #3
   17d88:			; <UNDEFINED> instruction: 0x0001c1b8
   17d8c:	andeq	ip, r1, r8, ror #3
   17d90:	andeq	ip, r1, ip, lsl r2
   17d94:	push	{fp, lr}
   17d98:	add	fp, sp, #4
   17d9c:	sub	sp, sp, #32
   17da0:	str	r0, [fp, #-16]
   17da4:	str	r1, [fp, #-20]	; 0xffffffec
   17da8:	str	r2, [fp, #-24]	; 0xffffffe8
   17dac:	str	r3, [fp, #-28]	; 0xffffffe4
   17db0:	mov	r3, #0
   17db4:	str	r3, [fp, #-8]
   17db8:	b	17dc8 <__assert_fail@plt+0x6e84>
   17dbc:	ldr	r3, [fp, #-8]
   17dc0:	add	r3, r3, #1
   17dc4:	str	r3, [fp, #-8]
   17dc8:	ldr	r3, [fp, #-8]
   17dcc:	lsl	r3, r3, #2
   17dd0:	ldr	r2, [fp, #4]
   17dd4:	add	r3, r2, r3
   17dd8:	ldr	r3, [r3]
   17ddc:	cmp	r3, #0
   17de0:	bne	17dbc <__assert_fail@plt+0x6e78>
   17de4:	ldr	r3, [fp, #-8]
   17de8:	str	r3, [sp, #4]
   17dec:	ldr	r3, [fp, #4]
   17df0:	str	r3, [sp]
   17df4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17df8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17dfc:	ldr	r1, [fp, #-20]	; 0xffffffec
   17e00:	ldr	r0, [fp, #-16]
   17e04:	bl	17824 <__assert_fail@plt+0x68e0>
   17e08:	nop			; (mov r0, r0)
   17e0c:	sub	sp, fp, #4
   17e10:	pop	{fp, pc}
   17e14:	push	{fp, lr}
   17e18:	add	fp, sp, #4
   17e1c:	sub	sp, sp, #72	; 0x48
   17e20:	str	r0, [fp, #-56]	; 0xffffffc8
   17e24:	str	r1, [fp, #-60]	; 0xffffffc4
   17e28:	str	r2, [fp, #-64]	; 0xffffffc0
   17e2c:	str	r3, [fp, #-68]	; 0xffffffbc
   17e30:	mov	r3, #0
   17e34:	str	r3, [fp, #-8]
   17e38:	b	17e48 <__assert_fail@plt+0x6f04>
   17e3c:	ldr	r3, [fp, #-8]
   17e40:	add	r3, r3, #1
   17e44:	str	r3, [fp, #-8]
   17e48:	ldr	r3, [fp, #-8]
   17e4c:	cmp	r3, #9
   17e50:	bhi	17e94 <__assert_fail@plt+0x6f50>
   17e54:	ldr	r3, [fp, #4]
   17e58:	add	r2, r3, #4
   17e5c:	str	r2, [fp, #4]
   17e60:	ldr	r2, [r3]
   17e64:	ldr	r3, [fp, #-8]
   17e68:	lsl	r3, r3, #2
   17e6c:	sub	r1, fp, #4
   17e70:	add	r3, r1, r3
   17e74:	str	r2, [r3, #-44]	; 0xffffffd4
   17e78:	ldr	r3, [fp, #-8]
   17e7c:	lsl	r3, r3, #2
   17e80:	sub	r2, fp, #4
   17e84:	add	r3, r2, r3
   17e88:	ldr	r3, [r3, #-44]	; 0xffffffd4
   17e8c:	cmp	r3, #0
   17e90:	bne	17e3c <__assert_fail@plt+0x6ef8>
   17e94:	ldr	r3, [fp, #-8]
   17e98:	str	r3, [sp, #4]
   17e9c:	sub	r3, fp, #48	; 0x30
   17ea0:	str	r3, [sp]
   17ea4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17ea8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17eac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17eb0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17eb4:	bl	17824 <__assert_fail@plt+0x68e0>
   17eb8:	nop			; (mov r0, r0)
   17ebc:	sub	sp, fp, #4
   17ec0:	pop	{fp, pc}
   17ec4:	push	{r3}		; (str r3, [sp, #-4]!)
   17ec8:	push	{fp, lr}
   17ecc:	add	fp, sp, #4
   17ed0:	sub	sp, sp, #36	; 0x24
   17ed4:	str	r0, [fp, #-20]	; 0xffffffec
   17ed8:	str	r1, [fp, #-24]	; 0xffffffe8
   17edc:	str	r2, [fp, #-28]	; 0xffffffe4
   17ee0:	add	r3, fp, #8
   17ee4:	str	r3, [fp, #-12]
   17ee8:	ldr	r3, [fp, #-12]
   17eec:	str	r3, [sp]
   17ef0:	ldr	r3, [fp, #4]
   17ef4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17ef8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17efc:	ldr	r0, [fp, #-20]	; 0xffffffec
   17f00:	bl	17e14 <__assert_fail@plt+0x6ed0>
   17f04:	nop			; (mov r0, r0)
   17f08:	sub	sp, fp, #4
   17f0c:	pop	{fp, lr}
   17f10:	add	sp, sp, #4
   17f14:	bx	lr
   17f18:	push	{fp, lr}
   17f1c:	add	fp, sp, #4
   17f20:	ldr	r3, [pc, #96]	; 17f88 <__assert_fail@plt+0x7044>
   17f24:	ldr	r3, [r3]
   17f28:	mov	r1, r3
   17f2c:	mov	r0, #10
   17f30:	bl	10d7c <fputc_unlocked@plt>
   17f34:	ldr	r0, [pc, #80]	; 17f8c <__assert_fail@plt+0x7048>
   17f38:	bl	10e54 <gettext@plt>
   17f3c:	mov	r3, r0
   17f40:	ldr	r1, [pc, #72]	; 17f90 <__assert_fail@plt+0x704c>
   17f44:	mov	r0, r3
   17f48:	bl	10cf8 <printf@plt>
   17f4c:	ldr	r0, [pc, #64]	; 17f94 <__assert_fail@plt+0x7050>
   17f50:	bl	10e54 <gettext@plt>
   17f54:	mov	r3, r0
   17f58:	ldr	r2, [pc, #56]	; 17f98 <__assert_fail@plt+0x7054>
   17f5c:	ldr	r1, [pc, #56]	; 17f9c <__assert_fail@plt+0x7058>
   17f60:	mov	r0, r3
   17f64:	bl	10cf8 <printf@plt>
   17f68:	ldr	r0, [pc, #48]	; 17fa0 <__assert_fail@plt+0x705c>
   17f6c:	bl	10e54 <gettext@plt>
   17f70:	mov	r3, r0
   17f74:	ldr	r1, [pc, #40]	; 17fa4 <__assert_fail@plt+0x7060>
   17f78:	mov	r0, r3
   17f7c:	bl	10cf8 <printf@plt>
   17f80:	nop			; (mov r0, r0)
   17f84:	pop	{fp, pc}
   17f88:	andeq	sp, r2, ip, asr r1
   17f8c:	andeq	ip, r1, r8, asr r2
   17f90:	andeq	ip, r1, ip, ror #4
   17f94:	andeq	ip, r1, r4, lsl #5
   17f98:	muleq	r1, r8, r2
   17f9c:	andeq	ip, r1, r0, asr #5
   17fa0:	ldrdeq	ip, [r1], -r0
   17fa4:	strdeq	ip, [r1], -r8
   17fa8:	push	{fp, lr}
   17fac:	add	fp, sp, #4
   17fb0:	sub	sp, sp, #16
   17fb4:	str	r0, [fp, #-8]
   17fb8:	str	r1, [fp, #-12]
   17fbc:	str	r2, [fp, #-16]
   17fc0:	ldr	r2, [fp, #-16]
   17fc4:	ldr	r1, [fp, #-12]
   17fc8:	ldr	r0, [fp, #-8]
   17fcc:	bl	18138 <__assert_fail@plt+0x71f4>
   17fd0:	mov	r3, r0
   17fd4:	mov	r0, r3
   17fd8:	sub	sp, fp, #4
   17fdc:	pop	{fp, pc}
   17fe0:	push	{fp, lr}
   17fe4:	add	fp, sp, #4
   17fe8:	sub	sp, sp, #8
   17fec:	str	r0, [fp, #-8]
   17ff0:	ldr	r3, [fp, #-8]
   17ff4:	cmp	r3, #0
   17ff8:	bne	18000 <__assert_fail@plt+0x70bc>
   17ffc:	bl	18b2c <__assert_fail@plt+0x7be8>
   18000:	ldr	r3, [fp, #-8]
   18004:	mov	r0, r3
   18008:	sub	sp, fp, #4
   1800c:	pop	{fp, pc}
   18010:	push	{fp, lr}
   18014:	add	fp, sp, #4
   18018:	sub	sp, sp, #8
   1801c:	str	r0, [fp, #-8]
   18020:	ldr	r0, [fp, #-8]
   18024:	bl	19488 <__assert_fail@plt+0x8544>
   18028:	mov	r3, r0
   1802c:	mov	r0, r3
   18030:	bl	17fe0 <__assert_fail@plt+0x709c>
   18034:	mov	r3, r0
   18038:	mov	r0, r3
   1803c:	sub	sp, fp, #4
   18040:	pop	{fp, pc}
   18044:	push	{fp, lr}
   18048:	add	fp, sp, #4
   1804c:	sub	sp, sp, #8
   18050:	str	r0, [fp, #-8]
   18054:	ldr	r0, [fp, #-8]
   18058:	bl	19a70 <__assert_fail@plt+0x8b2c>
   1805c:	mov	r3, r0
   18060:	mov	r0, r3
   18064:	bl	17fe0 <__assert_fail@plt+0x709c>
   18068:	mov	r3, r0
   1806c:	mov	r0, r3
   18070:	sub	sp, fp, #4
   18074:	pop	{fp, pc}
   18078:	push	{fp, lr}
   1807c:	add	fp, sp, #4
   18080:	sub	sp, sp, #8
   18084:	str	r0, [fp, #-8]
   18088:	ldr	r0, [fp, #-8]
   1808c:	bl	18010 <__assert_fail@plt+0x70cc>
   18090:	mov	r3, r0
   18094:	mov	r0, r3
   18098:	sub	sp, fp, #4
   1809c:	pop	{fp, pc}
   180a0:	push	{fp, lr}
   180a4:	add	fp, sp, #4
   180a8:	sub	sp, sp, #16
   180ac:	str	r0, [fp, #-16]
   180b0:	str	r1, [fp, #-20]	; 0xffffffec
   180b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   180b8:	ldr	r0, [fp, #-16]
   180bc:	bl	19530 <__assert_fail@plt+0x85ec>
   180c0:	str	r0, [fp, #-8]
   180c4:	ldr	r3, [fp, #-8]
   180c8:	cmp	r3, #0
   180cc:	bne	180ec <__assert_fail@plt+0x71a8>
   180d0:	ldr	r3, [fp, #-16]
   180d4:	cmp	r3, #0
   180d8:	beq	180e8 <__assert_fail@plt+0x71a4>
   180dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   180e0:	cmp	r3, #0
   180e4:	beq	180ec <__assert_fail@plt+0x71a8>
   180e8:	bl	18b2c <__assert_fail@plt+0x7be8>
   180ec:	ldr	r3, [fp, #-8]
   180f0:	mov	r0, r3
   180f4:	sub	sp, fp, #4
   180f8:	pop	{fp, pc}
   180fc:	push	{fp, lr}
   18100:	add	fp, sp, #4
   18104:	sub	sp, sp, #8
   18108:	str	r0, [fp, #-8]
   1810c:	str	r1, [fp, #-12]
   18110:	ldr	r1, [fp, #-12]
   18114:	ldr	r0, [fp, #-8]
   18118:	bl	19a9c <__assert_fail@plt+0x8b58>
   1811c:	mov	r3, r0
   18120:	mov	r0, r3
   18124:	bl	17fe0 <__assert_fail@plt+0x709c>
   18128:	mov	r3, r0
   1812c:	mov	r0, r3
   18130:	sub	sp, fp, #4
   18134:	pop	{fp, pc}
   18138:	push	{fp, lr}
   1813c:	add	fp, sp, #4
   18140:	sub	sp, sp, #24
   18144:	str	r0, [fp, #-16]
   18148:	str	r1, [fp, #-20]	; 0xffffffec
   1814c:	str	r2, [fp, #-24]	; 0xffffffe8
   18150:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18154:	ldr	r1, [fp, #-20]	; 0xffffffec
   18158:	ldr	r0, [fp, #-16]
   1815c:	bl	19c90 <__assert_fail@plt+0x8d4c>
   18160:	str	r0, [fp, #-8]
   18164:	ldr	r3, [fp, #-8]
   18168:	cmp	r3, #0
   1816c:	bne	18198 <__assert_fail@plt+0x7254>
   18170:	ldr	r3, [fp, #-16]
   18174:	cmp	r3, #0
   18178:	beq	18194 <__assert_fail@plt+0x7250>
   1817c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18180:	cmp	r3, #0
   18184:	beq	18198 <__assert_fail@plt+0x7254>
   18188:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1818c:	cmp	r3, #0
   18190:	beq	18198 <__assert_fail@plt+0x7254>
   18194:	bl	18b2c <__assert_fail@plt+0x7be8>
   18198:	ldr	r3, [fp, #-8]
   1819c:	mov	r0, r3
   181a0:	sub	sp, fp, #4
   181a4:	pop	{fp, pc}
   181a8:	push	{fp, lr}
   181ac:	add	fp, sp, #4
   181b0:	sub	sp, sp, #16
   181b4:	str	r0, [fp, #-8]
   181b8:	str	r1, [fp, #-12]
   181bc:	str	r2, [fp, #-16]
   181c0:	ldr	r2, [fp, #-16]
   181c4:	ldr	r1, [fp, #-12]
   181c8:	ldr	r0, [fp, #-8]
   181cc:	bl	19b24 <__assert_fail@plt+0x8be0>
   181d0:	mov	r3, r0
   181d4:	mov	r0, r3
   181d8:	bl	17fe0 <__assert_fail@plt+0x709c>
   181dc:	mov	r3, r0
   181e0:	mov	r0, r3
   181e4:	sub	sp, fp, #4
   181e8:	pop	{fp, pc}
   181ec:	push	{fp, lr}
   181f0:	add	fp, sp, #4
   181f4:	sub	sp, sp, #8
   181f8:	str	r0, [fp, #-8]
   181fc:	str	r1, [fp, #-12]
   18200:	ldr	r2, [fp, #-12]
   18204:	ldr	r1, [fp, #-8]
   18208:	mov	r0, #0
   1820c:	bl	18138 <__assert_fail@plt+0x71f4>
   18210:	mov	r3, r0
   18214:	mov	r0, r3
   18218:	sub	sp, fp, #4
   1821c:	pop	{fp, pc}
   18220:	push	{fp, lr}
   18224:	add	fp, sp, #4
   18228:	sub	sp, sp, #8
   1822c:	str	r0, [fp, #-8]
   18230:	str	r1, [fp, #-12]
   18234:	ldr	r2, [fp, #-12]
   18238:	ldr	r1, [fp, #-8]
   1823c:	mov	r0, #0
   18240:	bl	181a8 <__assert_fail@plt+0x7264>
   18244:	mov	r3, r0
   18248:	mov	r0, r3
   1824c:	sub	sp, fp, #4
   18250:	pop	{fp, pc}
   18254:	push	{fp, lr}
   18258:	add	fp, sp, #4
   1825c:	sub	sp, sp, #8
   18260:	str	r0, [fp, #-8]
   18264:	str	r1, [fp, #-12]
   18268:	mov	r2, #1
   1826c:	ldr	r1, [fp, #-12]
   18270:	ldr	r0, [fp, #-8]
   18274:	bl	18288 <__assert_fail@plt+0x7344>
   18278:	mov	r3, r0
   1827c:	mov	r0, r3
   18280:	sub	sp, fp, #4
   18284:	pop	{fp, pc}
   18288:	push	{fp, lr}
   1828c:	add	fp, sp, #4
   18290:	sub	sp, sp, #24
   18294:	str	r0, [fp, #-16]
   18298:	str	r1, [fp, #-20]	; 0xffffffec
   1829c:	str	r2, [fp, #-24]	; 0xffffffe8
   182a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   182a4:	ldr	r3, [r3]
   182a8:	str	r3, [fp, #-8]
   182ac:	ldr	r3, [fp, #-16]
   182b0:	cmp	r3, #0
   182b4:	bne	18300 <__assert_fail@plt+0x73bc>
   182b8:	ldr	r3, [fp, #-8]
   182bc:	cmp	r3, #0
   182c0:	bne	18364 <__assert_fail@plt+0x7420>
   182c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   182c8:	mov	r0, #64	; 0x40
   182cc:	bl	1a438 <__assert_fail@plt+0x94f4>
   182d0:	mov	r3, r0
   182d4:	str	r3, [fp, #-8]
   182d8:	ldr	r3, [fp, #-8]
   182dc:	cmp	r3, #0
   182e0:	moveq	r3, #1
   182e4:	movne	r3, #0
   182e8:	uxtb	r3, r3
   182ec:	mov	r2, r3
   182f0:	ldr	r3, [fp, #-8]
   182f4:	add	r3, r2, r3
   182f8:	str	r3, [fp, #-8]
   182fc:	b	18364 <__assert_fail@plt+0x7420>
   18300:	ldr	r3, [fp, #-8]
   18304:	lsr	r3, r3, #1
   18308:	add	r3, r3, #1
   1830c:	mvn	r2, r3
   18310:	ldr	r3, [fp, #-8]
   18314:	cmp	r2, r3
   18318:	bcs	1833c <__assert_fail@plt+0x73f8>
   1831c:	ldr	r3, [fp, #-8]
   18320:	lsr	r2, r3, #1
   18324:	ldr	r3, [fp, #-8]
   18328:	add	r3, r2, r3
   1832c:	add	r3, r3, #1
   18330:	str	r3, [fp, #-8]
   18334:	mov	r3, #1
   18338:	b	18358 <__assert_fail@plt+0x7414>
   1833c:	ldr	r3, [fp, #-8]
   18340:	lsr	r2, r3, #1
   18344:	ldr	r3, [fp, #-8]
   18348:	add	r3, r2, r3
   1834c:	add	r3, r3, #1
   18350:	str	r3, [fp, #-8]
   18354:	mov	r3, #0
   18358:	cmp	r3, #0
   1835c:	beq	18364 <__assert_fail@plt+0x7420>
   18360:	bl	18b2c <__assert_fail@plt+0x7be8>
   18364:	ldr	r3, [fp, #-8]
   18368:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1836c:	mov	r1, r3
   18370:	ldr	r0, [fp, #-16]
   18374:	bl	18138 <__assert_fail@plt+0x71f4>
   18378:	str	r0, [fp, #-16]
   1837c:	ldr	r2, [fp, #-8]
   18380:	ldr	r3, [fp, #-20]	; 0xffffffec
   18384:	str	r2, [r3]
   18388:	ldr	r3, [fp, #-16]
   1838c:	mov	r0, r3
   18390:	sub	sp, fp, #4
   18394:	pop	{fp, pc}
   18398:	push	{fp, lr}
   1839c:	add	fp, sp, #4
   183a0:	sub	sp, sp, #32
   183a4:	str	r0, [fp, #-24]	; 0xffffffe8
   183a8:	str	r1, [fp, #-28]	; 0xffffffe4
   183ac:	str	r2, [fp, #-32]	; 0xffffffe0
   183b0:	str	r3, [fp, #-36]	; 0xffffffdc
   183b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183b8:	ldr	r3, [r3]
   183bc:	str	r3, [fp, #-8]
   183c0:	ldr	r3, [fp, #-8]
   183c4:	asr	r3, r3, #1
   183c8:	cmp	r3, #0
   183cc:	bge	183f4 <__assert_fail@plt+0x74b0>
   183d0:	ldr	r3, [fp, #-8]
   183d4:	asr	r3, r3, #1
   183d8:	rsb	r2, r3, #-2147483648	; 0x80000000
   183dc:	ldr	r3, [fp, #-8]
   183e0:	cmp	r2, r3
   183e4:	movgt	r3, #1
   183e8:	movle	r3, #0
   183ec:	uxtb	r3, r3
   183f0:	b	18448 <__assert_fail@plt+0x7504>
   183f4:	ldr	r3, [fp, #-8]
   183f8:	cmp	r3, #0
   183fc:	bge	18424 <__assert_fail@plt+0x74e0>
   18400:	ldr	r3, [fp, #-8]
   18404:	asr	r2, r3, #1
   18408:	ldr	r3, [fp, #-8]
   1840c:	rsb	r3, r3, #-2147483648	; 0x80000000
   18410:	cmp	r2, r3
   18414:	movlt	r3, #1
   18418:	movge	r3, #0
   1841c:	uxtb	r3, r3
   18420:	b	18448 <__assert_fail@plt+0x7504>
   18424:	ldr	r3, [fp, #-8]
   18428:	asr	r2, r3, #1
   1842c:	mvn	r3, #-2147483648	; 0x80000000
   18430:	sub	r3, r3, r2
   18434:	ldr	r2, [fp, #-8]
   18438:	cmp	r3, r2
   1843c:	movlt	r3, #1
   18440:	movge	r3, #0
   18444:	uxtb	r3, r3
   18448:	cmp	r3, #0
   1844c:	beq	18470 <__assert_fail@plt+0x752c>
   18450:	ldr	r3, [fp, #-8]
   18454:	asr	r3, r3, #1
   18458:	mov	r2, r3
   1845c:	ldr	r3, [fp, #-8]
   18460:	add	r3, r2, r3
   18464:	str	r3, [fp, #-16]
   18468:	mov	r3, #1
   1846c:	b	1848c <__assert_fail@plt+0x7548>
   18470:	ldr	r3, [fp, #-8]
   18474:	asr	r3, r3, #1
   18478:	mov	r2, r3
   1847c:	ldr	r3, [fp, #-8]
   18480:	add	r3, r2, r3
   18484:	str	r3, [fp, #-16]
   18488:	mov	r3, #0
   1848c:	cmp	r3, #0
   18490:	beq	1849c <__assert_fail@plt+0x7558>
   18494:	mvn	r3, #-2147483648	; 0x80000000
   18498:	str	r3, [fp, #-16]
   1849c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   184a0:	cmp	r3, #0
   184a4:	blt	184c0 <__assert_fail@plt+0x757c>
   184a8:	ldr	r3, [fp, #-16]
   184ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   184b0:	cmp	r2, r3
   184b4:	bge	184c0 <__assert_fail@plt+0x757c>
   184b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   184bc:	str	r3, [fp, #-16]
   184c0:	ldr	r3, [fp, #4]
   184c4:	cmp	r3, #0
   184c8:	bge	18558 <__assert_fail@plt+0x7614>
   184cc:	ldr	r3, [fp, #-16]
   184d0:	cmp	r3, #0
   184d4:	bge	18504 <__assert_fail@plt+0x75c0>
   184d8:	ldr	r1, [fp, #4]
   184dc:	mvn	r0, #-2147483648	; 0x80000000
   184e0:	bl	1a644 <__assert_fail@plt+0x9700>
   184e4:	mov	r3, r0
   184e8:	mov	r2, r3
   184ec:	ldr	r3, [fp, #-16]
   184f0:	cmp	r2, r3
   184f4:	movgt	r3, #1
   184f8:	movle	r3, #0
   184fc:	uxtb	r3, r3
   18500:	b	185f8 <__assert_fail@plt+0x76b4>
   18504:	ldr	r3, [fp, #4]
   18508:	cmn	r3, #1
   1850c:	bne	1852c <__assert_fail@plt+0x75e8>
   18510:	ldr	r3, [fp, #-16]
   18514:	add	r3, r3, #-2147483648	; 0x80000000
   18518:	cmp	r3, #0
   1851c:	movgt	r3, #1
   18520:	movle	r3, #0
   18524:	uxtb	r3, r3
   18528:	b	185f8 <__assert_fail@plt+0x76b4>
   1852c:	ldr	r1, [fp, #4]
   18530:	mov	r0, #-2147483648	; 0x80000000
   18534:	bl	1a644 <__assert_fail@plt+0x9700>
   18538:	mov	r3, r0
   1853c:	mov	r2, r3
   18540:	ldr	r3, [fp, #-16]
   18544:	cmp	r2, r3
   18548:	movlt	r3, #1
   1854c:	movge	r3, #0
   18550:	uxtb	r3, r3
   18554:	b	185f8 <__assert_fail@plt+0x76b4>
   18558:	ldr	r3, [fp, #4]
   1855c:	cmp	r3, #0
   18560:	beq	185f4 <__assert_fail@plt+0x76b0>
   18564:	ldr	r3, [fp, #-16]
   18568:	cmp	r3, #0
   1856c:	bge	185c8 <__assert_fail@plt+0x7684>
   18570:	ldr	r3, [fp, #-16]
   18574:	cmn	r3, #1
   18578:	bne	18598 <__assert_fail@plt+0x7654>
   1857c:	ldr	r3, [fp, #4]
   18580:	add	r3, r3, #-2147483648	; 0x80000000
   18584:	cmp	r3, #0
   18588:	movgt	r3, #1
   1858c:	movle	r3, #0
   18590:	uxtb	r3, r3
   18594:	b	185f8 <__assert_fail@plt+0x76b4>
   18598:	ldr	r3, [fp, #-16]
   1859c:	mov	r1, r3
   185a0:	mov	r0, #-2147483648	; 0x80000000
   185a4:	bl	1a644 <__assert_fail@plt+0x9700>
   185a8:	mov	r3, r0
   185ac:	mov	r2, r3
   185b0:	ldr	r3, [fp, #4]
   185b4:	cmp	r2, r3
   185b8:	movlt	r3, #1
   185bc:	movge	r3, #0
   185c0:	uxtb	r3, r3
   185c4:	b	185f8 <__assert_fail@plt+0x76b4>
   185c8:	ldr	r1, [fp, #4]
   185cc:	mvn	r0, #-2147483648	; 0x80000000
   185d0:	bl	1a644 <__assert_fail@plt+0x9700>
   185d4:	mov	r3, r0
   185d8:	mov	r2, r3
   185dc:	ldr	r3, [fp, #-16]
   185e0:	cmp	r2, r3
   185e4:	movlt	r3, #1
   185e8:	movge	r3, #0
   185ec:	uxtb	r3, r3
   185f0:	b	185f8 <__assert_fail@plt+0x76b4>
   185f4:	mov	r3, #0
   185f8:	cmp	r3, #0
   185fc:	beq	1861c <__assert_fail@plt+0x76d8>
   18600:	ldr	r3, [fp, #-16]
   18604:	mov	r2, r3
   18608:	ldr	r3, [fp, #4]
   1860c:	mul	r3, r3, r2
   18610:	str	r3, [fp, #-20]	; 0xffffffec
   18614:	mov	r3, #1
   18618:	b	18634 <__assert_fail@plt+0x76f0>
   1861c:	ldr	r3, [fp, #-16]
   18620:	mov	r2, r3
   18624:	ldr	r3, [fp, #4]
   18628:	mul	r3, r3, r2
   1862c:	str	r3, [fp, #-20]	; 0xffffffec
   18630:	mov	r3, #0
   18634:	cmp	r3, #0
   18638:	beq	18644 <__assert_fail@plt+0x7700>
   1863c:	mvn	r3, #-2147483648	; 0x80000000
   18640:	b	1865c <__assert_fail@plt+0x7718>
   18644:	ldr	r3, [fp, #-20]	; 0xffffffec
   18648:	cmp	r3, #63	; 0x3f
   1864c:	bgt	18658 <__assert_fail@plt+0x7714>
   18650:	mov	r3, #64	; 0x40
   18654:	b	1865c <__assert_fail@plt+0x7718>
   18658:	mov	r3, #0
   1865c:	str	r3, [fp, #-12]
   18660:	ldr	r3, [fp, #-12]
   18664:	cmp	r3, #0
   18668:	beq	186a4 <__assert_fail@plt+0x7760>
   1866c:	ldr	r1, [fp, #4]
   18670:	ldr	r0, [fp, #-12]
   18674:	bl	1a644 <__assert_fail@plt+0x9700>
   18678:	mov	r3, r0
   1867c:	str	r3, [fp, #-16]
   18680:	ldr	r3, [fp, #-12]
   18684:	ldr	r1, [fp, #4]
   18688:	mov	r0, r3
   1868c:	bl	1a864 <__assert_fail@plt+0x9920>
   18690:	mov	r3, r1
   18694:	mov	r2, r3
   18698:	ldr	r3, [fp, #-12]
   1869c:	sub	r3, r3, r2
   186a0:	str	r3, [fp, #-20]	; 0xffffffec
   186a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   186a8:	cmp	r3, #0
   186ac:	bne	186bc <__assert_fail@plt+0x7778>
   186b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186b4:	mov	r2, #0
   186b8:	str	r2, [r3]
   186bc:	ldr	r2, [fp, #-16]
   186c0:	ldr	r3, [fp, #-8]
   186c4:	sub	r2, r2, r3
   186c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186cc:	cmp	r2, r3
   186d0:	bge	18908 <__assert_fail@plt+0x79c4>
   186d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186d8:	cmp	r3, #0
   186dc:	bge	18700 <__assert_fail@plt+0x77bc>
   186e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   186e4:	rsb	r2, r3, #-2147483648	; 0x80000000
   186e8:	ldr	r3, [fp, #-8]
   186ec:	cmp	r2, r3
   186f0:	movgt	r3, #1
   186f4:	movle	r3, #0
   186f8:	uxtb	r3, r3
   186fc:	b	1874c <__assert_fail@plt+0x7808>
   18700:	ldr	r3, [fp, #-8]
   18704:	cmp	r3, #0
   18708:	bge	1872c <__assert_fail@plt+0x77e8>
   1870c:	ldr	r3, [fp, #-8]
   18710:	rsb	r2, r3, #-2147483648	; 0x80000000
   18714:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18718:	cmp	r2, r3
   1871c:	movgt	r3, #1
   18720:	movle	r3, #0
   18724:	uxtb	r3, r3
   18728:	b	1874c <__assert_fail@plt+0x7808>
   1872c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18730:	mvn	r3, #-2147483648	; 0x80000000
   18734:	sub	r3, r3, r2
   18738:	ldr	r2, [fp, #-8]
   1873c:	cmp	r3, r2
   18740:	movlt	r3, #1
   18744:	movge	r3, #0
   18748:	uxtb	r3, r3
   1874c:	cmp	r3, #0
   18750:	beq	18768 <__assert_fail@plt+0x7824>
   18754:	ldr	r2, [fp, #-8]
   18758:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1875c:	add	r3, r2, r3
   18760:	str	r3, [fp, #-16]
   18764:	b	18904 <__assert_fail@plt+0x79c0>
   18768:	ldr	r2, [fp, #-8]
   1876c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18770:	add	r3, r2, r3
   18774:	str	r3, [fp, #-16]
   18778:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1877c:	cmp	r3, #0
   18780:	blt	18794 <__assert_fail@plt+0x7850>
   18784:	ldr	r3, [fp, #-16]
   18788:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1878c:	cmp	r2, r3
   18790:	blt	18904 <__assert_fail@plt+0x79c0>
   18794:	ldr	r3, [fp, #4]
   18798:	cmp	r3, #0
   1879c:	bge	1882c <__assert_fail@plt+0x78e8>
   187a0:	ldr	r3, [fp, #-16]
   187a4:	cmp	r3, #0
   187a8:	bge	187d8 <__assert_fail@plt+0x7894>
   187ac:	ldr	r1, [fp, #4]
   187b0:	mvn	r0, #-2147483648	; 0x80000000
   187b4:	bl	1a644 <__assert_fail@plt+0x9700>
   187b8:	mov	r3, r0
   187bc:	mov	r2, r3
   187c0:	ldr	r3, [fp, #-16]
   187c4:	cmp	r2, r3
   187c8:	movgt	r3, #1
   187cc:	movle	r3, #0
   187d0:	uxtb	r3, r3
   187d4:	b	188cc <__assert_fail@plt+0x7988>
   187d8:	ldr	r3, [fp, #4]
   187dc:	cmn	r3, #1
   187e0:	bne	18800 <__assert_fail@plt+0x78bc>
   187e4:	ldr	r3, [fp, #-16]
   187e8:	add	r3, r3, #-2147483648	; 0x80000000
   187ec:	cmp	r3, #0
   187f0:	movgt	r3, #1
   187f4:	movle	r3, #0
   187f8:	uxtb	r3, r3
   187fc:	b	188cc <__assert_fail@plt+0x7988>
   18800:	ldr	r1, [fp, #4]
   18804:	mov	r0, #-2147483648	; 0x80000000
   18808:	bl	1a644 <__assert_fail@plt+0x9700>
   1880c:	mov	r3, r0
   18810:	mov	r2, r3
   18814:	ldr	r3, [fp, #-16]
   18818:	cmp	r2, r3
   1881c:	movlt	r3, #1
   18820:	movge	r3, #0
   18824:	uxtb	r3, r3
   18828:	b	188cc <__assert_fail@plt+0x7988>
   1882c:	ldr	r3, [fp, #4]
   18830:	cmp	r3, #0
   18834:	beq	188c8 <__assert_fail@plt+0x7984>
   18838:	ldr	r3, [fp, #-16]
   1883c:	cmp	r3, #0
   18840:	bge	1889c <__assert_fail@plt+0x7958>
   18844:	ldr	r3, [fp, #-16]
   18848:	cmn	r3, #1
   1884c:	bne	1886c <__assert_fail@plt+0x7928>
   18850:	ldr	r3, [fp, #4]
   18854:	add	r3, r3, #-2147483648	; 0x80000000
   18858:	cmp	r3, #0
   1885c:	movgt	r3, #1
   18860:	movle	r3, #0
   18864:	uxtb	r3, r3
   18868:	b	188cc <__assert_fail@plt+0x7988>
   1886c:	ldr	r3, [fp, #-16]
   18870:	mov	r1, r3
   18874:	mov	r0, #-2147483648	; 0x80000000
   18878:	bl	1a644 <__assert_fail@plt+0x9700>
   1887c:	mov	r3, r0
   18880:	mov	r2, r3
   18884:	ldr	r3, [fp, #4]
   18888:	cmp	r2, r3
   1888c:	movlt	r3, #1
   18890:	movge	r3, #0
   18894:	uxtb	r3, r3
   18898:	b	188cc <__assert_fail@plt+0x7988>
   1889c:	ldr	r1, [fp, #4]
   188a0:	mvn	r0, #-2147483648	; 0x80000000
   188a4:	bl	1a644 <__assert_fail@plt+0x9700>
   188a8:	mov	r3, r0
   188ac:	mov	r2, r3
   188b0:	ldr	r3, [fp, #-16]
   188b4:	cmp	r2, r3
   188b8:	movlt	r3, #1
   188bc:	movge	r3, #0
   188c0:	uxtb	r3, r3
   188c4:	b	188cc <__assert_fail@plt+0x7988>
   188c8:	mov	r3, #0
   188cc:	cmp	r3, #0
   188d0:	beq	188ec <__assert_fail@plt+0x79a8>
   188d4:	ldr	r3, [fp, #-16]
   188d8:	mov	r2, r3
   188dc:	ldr	r3, [fp, #4]
   188e0:	mul	r3, r3, r2
   188e4:	str	r3, [fp, #-20]	; 0xffffffec
   188e8:	b	18904 <__assert_fail@plt+0x79c0>
   188ec:	ldr	r3, [fp, #-16]
   188f0:	mov	r2, r3
   188f4:	ldr	r3, [fp, #4]
   188f8:	mul	r3, r3, r2
   188fc:	str	r3, [fp, #-20]	; 0xffffffec
   18900:	b	18908 <__assert_fail@plt+0x79c4>
   18904:	bl	18b2c <__assert_fail@plt+0x7be8>
   18908:	ldr	r3, [fp, #-20]	; 0xffffffec
   1890c:	mov	r1, r3
   18910:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18914:	bl	180a0 <__assert_fail@plt+0x715c>
   18918:	str	r0, [fp, #-24]	; 0xffffffe8
   1891c:	ldr	r2, [fp, #-16]
   18920:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18924:	str	r2, [r3]
   18928:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1892c:	mov	r0, r3
   18930:	sub	sp, fp, #4
   18934:	pop	{fp, pc}
   18938:	push	{fp, lr}
   1893c:	add	fp, sp, #4
   18940:	sub	sp, sp, #8
   18944:	str	r0, [fp, #-8]
   18948:	mov	r1, #1
   1894c:	ldr	r0, [fp, #-8]
   18950:	bl	18990 <__assert_fail@plt+0x7a4c>
   18954:	mov	r3, r0
   18958:	mov	r0, r3
   1895c:	sub	sp, fp, #4
   18960:	pop	{fp, pc}
   18964:	push	{fp, lr}
   18968:	add	fp, sp, #4
   1896c:	sub	sp, sp, #8
   18970:	str	r0, [fp, #-8]
   18974:	mov	r1, #1
   18978:	ldr	r0, [fp, #-8]
   1897c:	bl	189cc <__assert_fail@plt+0x7a88>
   18980:	mov	r3, r0
   18984:	mov	r0, r3
   18988:	sub	sp, fp, #4
   1898c:	pop	{fp, pc}
   18990:	push	{fp, lr}
   18994:	add	fp, sp, #4
   18998:	sub	sp, sp, #8
   1899c:	str	r0, [fp, #-8]
   189a0:	str	r1, [fp, #-12]
   189a4:	ldr	r1, [fp, #-12]
   189a8:	ldr	r0, [fp, #-8]
   189ac:	bl	193c4 <__assert_fail@plt+0x8480>
   189b0:	mov	r3, r0
   189b4:	mov	r0, r3
   189b8:	bl	17fe0 <__assert_fail@plt+0x709c>
   189bc:	mov	r3, r0
   189c0:	mov	r0, r3
   189c4:	sub	sp, fp, #4
   189c8:	pop	{fp, pc}
   189cc:	push	{fp, lr}
   189d0:	add	fp, sp, #4
   189d4:	sub	sp, sp, #8
   189d8:	str	r0, [fp, #-8]
   189dc:	str	r1, [fp, #-12]
   189e0:	ldr	r1, [fp, #-12]
   189e4:	ldr	r0, [fp, #-8]
   189e8:	bl	19aec <__assert_fail@plt+0x8ba8>
   189ec:	mov	r3, r0
   189f0:	mov	r0, r3
   189f4:	bl	17fe0 <__assert_fail@plt+0x709c>
   189f8:	mov	r3, r0
   189fc:	mov	r0, r3
   18a00:	sub	sp, fp, #4
   18a04:	pop	{fp, pc}
   18a08:	push	{fp, lr}
   18a0c:	add	fp, sp, #4
   18a10:	sub	sp, sp, #8
   18a14:	str	r0, [fp, #-8]
   18a18:	str	r1, [fp, #-12]
   18a1c:	ldr	r0, [fp, #-12]
   18a20:	bl	18010 <__assert_fail@plt+0x70cc>
   18a24:	mov	r3, r0
   18a28:	ldr	r2, [fp, #-12]
   18a2c:	ldr	r1, [fp, #-8]
   18a30:	mov	r0, r3
   18a34:	bl	10d34 <memcpy@plt>
   18a38:	mov	r3, r0
   18a3c:	mov	r0, r3
   18a40:	sub	sp, fp, #4
   18a44:	pop	{fp, pc}
   18a48:	push	{fp, lr}
   18a4c:	add	fp, sp, #4
   18a50:	sub	sp, sp, #8
   18a54:	str	r0, [fp, #-8]
   18a58:	str	r1, [fp, #-12]
   18a5c:	ldr	r0, [fp, #-12]
   18a60:	bl	18044 <__assert_fail@plt+0x7100>
   18a64:	mov	r3, r0
   18a68:	mov	r0, r3
   18a6c:	ldr	r3, [fp, #-12]
   18a70:	mov	r2, r3
   18a74:	ldr	r1, [fp, #-8]
   18a78:	bl	10d34 <memcpy@plt>
   18a7c:	mov	r3, r0
   18a80:	mov	r0, r3
   18a84:	sub	sp, fp, #4
   18a88:	pop	{fp, pc}
   18a8c:	push	{fp, lr}
   18a90:	add	fp, sp, #4
   18a94:	sub	sp, sp, #16
   18a98:	str	r0, [fp, #-16]
   18a9c:	str	r1, [fp, #-20]	; 0xffffffec
   18aa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18aa4:	add	r3, r3, #1
   18aa8:	mov	r0, r3
   18aac:	bl	18044 <__assert_fail@plt+0x7100>
   18ab0:	mov	r3, r0
   18ab4:	str	r3, [fp, #-8]
   18ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18abc:	ldr	r2, [fp, #-8]
   18ac0:	add	r3, r2, r3
   18ac4:	mov	r2, #0
   18ac8:	strb	r2, [r3]
   18acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ad0:	mov	r2, r3
   18ad4:	ldr	r1, [fp, #-16]
   18ad8:	ldr	r0, [fp, #-8]
   18adc:	bl	10d34 <memcpy@plt>
   18ae0:	mov	r3, r0
   18ae4:	mov	r0, r3
   18ae8:	sub	sp, fp, #4
   18aec:	pop	{fp, pc}
   18af0:	push	{fp, lr}
   18af4:	add	fp, sp, #4
   18af8:	sub	sp, sp, #8
   18afc:	str	r0, [fp, #-8]
   18b00:	ldr	r0, [fp, #-8]
   18b04:	bl	10e60 <strlen@plt>
   18b08:	mov	r3, r0
   18b0c:	add	r3, r3, #1
   18b10:	mov	r1, r3
   18b14:	ldr	r0, [fp, #-8]
   18b18:	bl	18a08 <__assert_fail@plt+0x7ac4>
   18b1c:	mov	r3, r0
   18b20:	mov	r0, r3
   18b24:	sub	sp, fp, #4
   18b28:	pop	{fp, pc}
   18b2c:	push	{r4, r5, fp, lr}
   18b30:	add	fp, sp, #12
   18b34:	ldr	r3, [pc, #32]	; 18b5c <__assert_fail@plt+0x7c18>
   18b38:	ldr	r4, [r3]
   18b3c:	ldr	r0, [pc, #28]	; 18b60 <__assert_fail@plt+0x7c1c>
   18b40:	bl	10e54 <gettext@plt>
   18b44:	mov	r3, r0
   18b48:	ldr	r2, [pc, #20]	; 18b64 <__assert_fail@plt+0x7c20>
   18b4c:	mov	r1, #0
   18b50:	mov	r0, r4
   18b54:	bl	10df4 <error@plt>
   18b58:	bl	10f2c <abort@plt>
   18b5c:	strdeq	sp, [r2], -r8
   18b60:	andeq	ip, r1, r8, asr #6
   18b64:	andeq	ip, r1, ip, asr r3
   18b68:	push	{fp}		; (str fp, [sp, #-4]!)
   18b6c:	add	fp, sp, #0
   18b70:	nop			; (mov r0, r0)
   18b74:	add	sp, fp, #0
   18b78:	pop	{fp}		; (ldr fp, [sp], #4)
   18b7c:	bx	lr
   18b80:	push	{fp, lr}
   18b84:	add	fp, sp, #4
   18b88:	sub	sp, sp, #8
   18b8c:	str	r0, [fp, #-8]
   18b90:	str	r1, [fp, #-12]
   18b94:	ldr	r1, [fp, #-12]
   18b98:	ldr	r0, [fp, #-8]
   18b9c:	bl	19628 <__assert_fail@plt+0x86e4>
   18ba0:	mov	r3, r0
   18ba4:	cmp	r3, #0
   18ba8:	bge	18bb0 <__assert_fail@plt+0x7c6c>
   18bac:	bl	18b68 <__assert_fail@plt+0x7c24>
   18bb0:	nop			; (mov r0, r0)
   18bb4:	sub	sp, fp, #4
   18bb8:	pop	{fp, pc}
   18bbc:	push	{fp, lr}
   18bc0:	add	fp, sp, #4
   18bc4:	sub	sp, sp, #16
   18bc8:	str	r0, [fp, #-16]
   18bcc:	str	r1, [fp, #-20]	; 0xffffffec
   18bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bd4:	cmp	r3, #0
   18bd8:	bge	18c14 <__assert_fail@plt+0x7cd0>
   18bdc:	ldr	r1, [fp, #-20]	; 0xffffffec
   18be0:	mov	r0, #0
   18be4:	bl	1a644 <__assert_fail@plt+0x9700>
   18be8:	mov	r3, r0
   18bec:	mov	r0, r3
   18bf0:	asr	r1, r0, #31
   18bf4:	ldr	r3, [fp, #-16]
   18bf8:	ldrd	r2, [r3]
   18bfc:	cmp	r1, r3
   18c00:	cmpeq	r0, r2
   18c04:	movcc	r3, #1
   18c08:	movcs	r3, #0
   18c0c:	uxtb	r3, r3
   18c10:	b	18c70 <__assert_fail@plt+0x7d2c>
   18c14:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c18:	cmp	r3, #0
   18c1c:	beq	18c64 <__assert_fail@plt+0x7d20>
   18c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c24:	mov	r2, r3
   18c28:	asr	r3, r2, #31
   18c2c:	mvn	r0, #0
   18c30:	mvn	r1, #0
   18c34:	bl	1a884 <__assert_fail@plt+0x9940>
   18c38:	mov	r2, r0
   18c3c:	mov	r3, r1
   18c40:	mov	r0, r2
   18c44:	mov	r1, r3
   18c48:	ldr	r3, [fp, #-16]
   18c4c:	ldrd	r2, [r3]
   18c50:	cmp	r1, r3
   18c54:	cmpeq	r0, r2
   18c58:	bcs	18c64 <__assert_fail@plt+0x7d20>
   18c5c:	mov	r3, #1
   18c60:	b	18c68 <__assert_fail@plt+0x7d24>
   18c64:	mov	r3, #0
   18c68:	and	r3, r3, #1
   18c6c:	uxtb	r3, r3
   18c70:	cmp	r3, #0
   18c74:	beq	18cb0 <__assert_fail@plt+0x7d6c>
   18c78:	ldr	r3, [fp, #-16]
   18c7c:	ldrd	r0, [r3]
   18c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c84:	mov	r2, r3
   18c88:	asr	r3, r2, #31
   18c8c:	mul	lr, r2, r1
   18c90:	mul	ip, r0, r3
   18c94:	add	ip, lr, ip
   18c98:	umull	r2, r3, r0, r2
   18c9c:	add	r1, ip, r3
   18ca0:	mov	r3, r1
   18ca4:	strd	r2, [fp, #-12]
   18ca8:	mov	r3, #1
   18cac:	b	18ce4 <__assert_fail@plt+0x7da0>
   18cb0:	ldr	r3, [fp, #-16]
   18cb4:	ldrd	r0, [r3]
   18cb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cbc:	mov	r2, r3
   18cc0:	asr	r3, r2, #31
   18cc4:	mul	lr, r2, r1
   18cc8:	mul	ip, r0, r3
   18ccc:	add	ip, lr, ip
   18cd0:	umull	r2, r3, r0, r2
   18cd4:	add	r1, ip, r3
   18cd8:	mov	r3, r1
   18cdc:	strd	r2, [fp, #-12]
   18ce0:	mov	r3, #0
   18ce4:	cmp	r3, #0
   18ce8:	beq	18d04 <__assert_fail@plt+0x7dc0>
   18cec:	ldr	r1, [fp, #-16]
   18cf0:	mvn	r2, #0
   18cf4:	mvn	r3, #0
   18cf8:	strd	r2, [r1]
   18cfc:	mov	r3, #1
   18d00:	b	18d14 <__assert_fail@plt+0x7dd0>
   18d04:	ldrd	r2, [fp, #-12]
   18d08:	ldr	r1, [fp, #-16]
   18d0c:	strd	r2, [r1]
   18d10:	mov	r3, #0
   18d14:	mov	r0, r3
   18d18:	sub	sp, fp, #4
   18d1c:	pop	{fp, pc}
   18d20:	push	{fp, lr}
   18d24:	add	fp, sp, #4
   18d28:	sub	sp, sp, #24
   18d2c:	str	r0, [fp, #-16]
   18d30:	str	r1, [fp, #-20]	; 0xffffffec
   18d34:	str	r2, [fp, #-24]	; 0xffffffe8
   18d38:	mov	r3, #0
   18d3c:	str	r3, [fp, #-8]
   18d40:	b	18d60 <__assert_fail@plt+0x7e1c>
   18d44:	ldr	r1, [fp, #-20]	; 0xffffffec
   18d48:	ldr	r0, [fp, #-16]
   18d4c:	bl	18bbc <__assert_fail@plt+0x7c78>
   18d50:	mov	r2, r0
   18d54:	ldr	r3, [fp, #-8]
   18d58:	orr	r3, r3, r2
   18d5c:	str	r3, [fp, #-8]
   18d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d64:	sub	r2, r3, #1
   18d68:	str	r2, [fp, #-24]	; 0xffffffe8
   18d6c:	cmp	r3, #0
   18d70:	bne	18d44 <__assert_fail@plt+0x7e00>
   18d74:	ldr	r3, [fp, #-8]
   18d78:	mov	r0, r3
   18d7c:	sub	sp, fp, #4
   18d80:	pop	{fp, pc}
   18d84:	push	{fp, lr}
   18d88:	add	fp, sp, #4
   18d8c:	sub	sp, sp, #56	; 0x38
   18d90:	str	r0, [fp, #-48]	; 0xffffffd0
   18d94:	str	r1, [fp, #-52]	; 0xffffffcc
   18d98:	str	r2, [fp, #-56]	; 0xffffffc8
   18d9c:	str	r3, [fp, #-60]	; 0xffffffc4
   18da0:	mov	r3, #0
   18da4:	str	r3, [fp, #-8]
   18da8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18dac:	cmp	r3, #0
   18db0:	blt	18dc0 <__assert_fail@plt+0x7e7c>
   18db4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18db8:	cmp	r3, #36	; 0x24
   18dbc:	ble	18dd4 <__assert_fail@plt+0x7e90>
   18dc0:	ldr	r3, [pc, #1520]	; 193b8 <__assert_fail@plt+0x8474>
   18dc4:	mov	r2, #85	; 0x55
   18dc8:	ldr	r1, [pc, #1516]	; 193bc <__assert_fail@plt+0x8478>
   18dcc:	ldr	r0, [pc, #1516]	; 193c0 <__assert_fail@plt+0x847c>
   18dd0:	bl	10f44 <__assert_fail@plt>
   18dd4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18dd8:	cmp	r3, #0
   18ddc:	bne	18de8 <__assert_fail@plt+0x7ea4>
   18de0:	sub	r3, fp, #36	; 0x24
   18de4:	b	18dec <__assert_fail@plt+0x7ea8>
   18de8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18dec:	str	r3, [fp, #-32]	; 0xffffffe0
   18df0:	bl	10e84 <__errno_location@plt>
   18df4:	mov	r2, r0
   18df8:	mov	r3, #0
   18dfc:	str	r3, [r2]
   18e00:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18e04:	str	r3, [fp, #-12]
   18e08:	ldr	r3, [fp, #-12]
   18e0c:	ldrb	r3, [r3]
   18e10:	strb	r3, [fp, #-13]
   18e14:	b	18e30 <__assert_fail@plt+0x7eec>
   18e18:	ldr	r3, [fp, #-12]
   18e1c:	add	r3, r3, #1
   18e20:	str	r3, [fp, #-12]
   18e24:	ldr	r3, [fp, #-12]
   18e28:	ldrb	r3, [r3]
   18e2c:	strb	r3, [fp, #-13]
   18e30:	bl	10e3c <__ctype_b_loc@plt>
   18e34:	mov	r3, r0
   18e38:	ldr	r2, [r3]
   18e3c:	ldrb	r3, [fp, #-13]
   18e40:	lsl	r3, r3, #1
   18e44:	add	r3, r2, r3
   18e48:	ldrh	r3, [r3]
   18e4c:	and	r3, r3, #8192	; 0x2000
   18e50:	cmp	r3, #0
   18e54:	bne	18e18 <__assert_fail@plt+0x7ed4>
   18e58:	ldrb	r3, [fp, #-13]
   18e5c:	cmp	r3, #45	; 0x2d
   18e60:	bne	18e6c <__assert_fail@plt+0x7f28>
   18e64:	mov	r3, #4
   18e68:	b	193ac <__assert_fail@plt+0x8468>
   18e6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18e70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18e74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18e78:	bl	10eb4 <strtoumax@plt>
   18e7c:	mov	r2, r0
   18e80:	mov	r3, r1
   18e84:	strd	r2, [fp, #-44]	; 0xffffffd4
   18e88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e8c:	ldr	r2, [r3]
   18e90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18e94:	cmp	r2, r3
   18e98:	bne	18ef8 <__assert_fail@plt+0x7fb4>
   18e9c:	ldr	r3, [fp, #4]
   18ea0:	cmp	r3, #0
   18ea4:	beq	18ef0 <__assert_fail@plt+0x7fac>
   18ea8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18eac:	ldr	r3, [r3]
   18eb0:	ldrb	r3, [r3]
   18eb4:	cmp	r3, #0
   18eb8:	beq	18ef0 <__assert_fail@plt+0x7fac>
   18ebc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ec0:	ldr	r3, [r3]
   18ec4:	ldrb	r3, [r3]
   18ec8:	mov	r1, r3
   18ecc:	ldr	r0, [fp, #4]
   18ed0:	bl	10e6c <strchr@plt>
   18ed4:	mov	r3, r0
   18ed8:	cmp	r3, #0
   18edc:	beq	18ef0 <__assert_fail@plt+0x7fac>
   18ee0:	mov	r2, #1
   18ee4:	mov	r3, #0
   18ee8:	strd	r2, [fp, #-44]	; 0xffffffd4
   18eec:	b	18f30 <__assert_fail@plt+0x7fec>
   18ef0:	mov	r3, #4
   18ef4:	b	193ac <__assert_fail@plt+0x8468>
   18ef8:	bl	10e84 <__errno_location@plt>
   18efc:	mov	r3, r0
   18f00:	ldr	r3, [r3]
   18f04:	cmp	r3, #0
   18f08:	beq	18f30 <__assert_fail@plt+0x7fec>
   18f0c:	bl	10e84 <__errno_location@plt>
   18f10:	mov	r3, r0
   18f14:	ldr	r3, [r3]
   18f18:	cmp	r3, #34	; 0x22
   18f1c:	beq	18f28 <__assert_fail@plt+0x7fe4>
   18f20:	mov	r3, #4
   18f24:	b	193ac <__assert_fail@plt+0x8468>
   18f28:	mov	r3, #1
   18f2c:	str	r3, [fp, #-8]
   18f30:	ldr	r3, [fp, #4]
   18f34:	cmp	r3, #0
   18f38:	bne	18f50 <__assert_fail@plt+0x800c>
   18f3c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   18f40:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18f44:	strd	r2, [r1]
   18f48:	ldr	r3, [fp, #-8]
   18f4c:	b	193ac <__assert_fail@plt+0x8468>
   18f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f54:	ldr	r3, [r3]
   18f58:	ldrb	r3, [r3]
   18f5c:	cmp	r3, #0
   18f60:	beq	1939c <__assert_fail@plt+0x8458>
   18f64:	mov	r3, #1024	; 0x400
   18f68:	str	r3, [fp, #-20]	; 0xffffffec
   18f6c:	mov	r3, #1
   18f70:	str	r3, [fp, #-24]	; 0xffffffe8
   18f74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f78:	ldr	r3, [r3]
   18f7c:	ldrb	r3, [r3]
   18f80:	mov	r1, r3
   18f84:	ldr	r0, [fp, #4]
   18f88:	bl	10e6c <strchr@plt>
   18f8c:	mov	r3, r0
   18f90:	cmp	r3, #0
   18f94:	bne	18fb0 <__assert_fail@plt+0x806c>
   18f98:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   18f9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18fa0:	strd	r2, [r1]
   18fa4:	ldr	r3, [fp, #-8]
   18fa8:	orr	r3, r3, #2
   18fac:	b	193ac <__assert_fail@plt+0x8468>
   18fb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fb4:	ldr	r3, [r3]
   18fb8:	ldrb	r3, [r3]
   18fbc:	sub	r3, r3, #69	; 0x45
   18fc0:	cmp	r3, #47	; 0x2f
   18fc4:	ldrls	pc, [pc, r3, lsl #2]
   18fc8:	b	19114 <__assert_fail@plt+0x81d0>
   18fcc:	andeq	r9, r1, ip, lsl #1
   18fd0:	andeq	r9, r1, r4, lsl r1
   18fd4:	andeq	r9, r1, ip, lsl #1
   18fd8:	andeq	r9, r1, r4, lsl r1
   18fdc:	andeq	r9, r1, r4, lsl r1
   18fe0:	andeq	r9, r1, r4, lsl r1
   18fe4:	andeq	r9, r1, ip, lsl #1
   18fe8:	andeq	r9, r1, r4, lsl r1
   18fec:	andeq	r9, r1, ip, lsl #1
   18ff0:	andeq	r9, r1, r4, lsl r1
   18ff4:	andeq	r9, r1, r4, lsl r1
   18ff8:	andeq	r9, r1, ip, lsl #1
   18ffc:	andeq	r9, r1, r4, lsl r1
   19000:	andeq	r9, r1, r4, lsl r1
   19004:	andeq	r9, r1, r4, lsl r1
   19008:	andeq	r9, r1, ip, lsl #1
   1900c:	andeq	r9, r1, r4, lsl r1
   19010:	andeq	r9, r1, r4, lsl r1
   19014:	andeq	r9, r1, r4, lsl r1
   19018:	andeq	r9, r1, r4, lsl r1
   1901c:	andeq	r9, r1, ip, lsl #1
   19020:	andeq	r9, r1, ip, lsl #1
   19024:	andeq	r9, r1, r4, lsl r1
   19028:	andeq	r9, r1, r4, lsl r1
   1902c:	andeq	r9, r1, r4, lsl r1
   19030:	andeq	r9, r1, r4, lsl r1
   19034:	andeq	r9, r1, r4, lsl r1
   19038:	andeq	r9, r1, r4, lsl r1
   1903c:	andeq	r9, r1, r4, lsl r1
   19040:	andeq	r9, r1, r4, lsl r1
   19044:	andeq	r9, r1, r4, lsl r1
   19048:	andeq	r9, r1, r4, lsl r1
   1904c:	andeq	r9, r1, r4, lsl r1
   19050:	andeq	r9, r1, r4, lsl r1
   19054:	andeq	r9, r1, ip, lsl #1
   19058:	andeq	r9, r1, r4, lsl r1
   1905c:	andeq	r9, r1, r4, lsl r1
   19060:	andeq	r9, r1, r4, lsl r1
   19064:	andeq	r9, r1, ip, lsl #1
   19068:	andeq	r9, r1, r4, lsl r1
   1906c:	andeq	r9, r1, ip, lsl #1
   19070:	andeq	r9, r1, r4, lsl r1
   19074:	andeq	r9, r1, r4, lsl r1
   19078:	andeq	r9, r1, r4, lsl r1
   1907c:	andeq	r9, r1, r4, lsl r1
   19080:	andeq	r9, r1, r4, lsl r1
   19084:	andeq	r9, r1, r4, lsl r1
   19088:	andeq	r9, r1, ip, lsl #1
   1908c:	mov	r1, #48	; 0x30
   19090:	ldr	r0, [fp, #4]
   19094:	bl	10e6c <strchr@plt>
   19098:	mov	r3, r0
   1909c:	cmp	r3, #0
   190a0:	beq	19114 <__assert_fail@plt+0x81d0>
   190a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190a8:	ldr	r3, [r3]
   190ac:	add	r3, r3, #1
   190b0:	ldrb	r3, [r3]
   190b4:	cmp	r3, #68	; 0x44
   190b8:	beq	190f8 <__assert_fail@plt+0x81b4>
   190bc:	cmp	r3, #105	; 0x69
   190c0:	beq	190d0 <__assert_fail@plt+0x818c>
   190c4:	cmp	r3, #66	; 0x42
   190c8:	beq	190f8 <__assert_fail@plt+0x81b4>
   190cc:	b	19114 <__assert_fail@plt+0x81d0>
   190d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190d4:	ldr	r3, [r3]
   190d8:	add	r3, r3, #2
   190dc:	ldrb	r3, [r3]
   190e0:	cmp	r3, #66	; 0x42
   190e4:	bne	19110 <__assert_fail@plt+0x81cc>
   190e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   190ec:	add	r3, r3, #2
   190f0:	str	r3, [fp, #-24]	; 0xffffffe8
   190f4:	b	19110 <__assert_fail@plt+0x81cc>
   190f8:	mov	r3, #1000	; 0x3e8
   190fc:	str	r3, [fp, #-20]	; 0xffffffec
   19100:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19104:	add	r3, r3, #1
   19108:	str	r3, [fp, #-24]	; 0xffffffe8
   1910c:	b	19114 <__assert_fail@plt+0x81d0>
   19110:	nop			; (mov r0, r0)
   19114:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19118:	ldr	r3, [r3]
   1911c:	ldrb	r3, [r3]
   19120:	sub	r3, r3, #66	; 0x42
   19124:	cmp	r3, #53	; 0x35
   19128:	ldrls	pc, [pc, r3, lsl #2]
   1912c:	b	1933c <__assert_fail@plt+0x83f8>
   19130:	andeq	r9, r1, r0, lsr #4
   19134:	andeq	r9, r1, ip, lsr r3
   19138:	andeq	r9, r1, ip, lsr r3
   1913c:	andeq	r9, r1, r4, asr #4
   19140:	andeq	r9, r1, ip, lsr r3
   19144:	andeq	r9, r1, r0, ror #4
   19148:	andeq	r9, r1, ip, lsr r3
   1914c:	andeq	r9, r1, ip, lsr r3
   19150:	andeq	r9, r1, ip, lsr r3
   19154:	andeq	r9, r1, ip, ror r2
   19158:	andeq	r9, r1, ip, lsr r3
   1915c:	muleq	r1, r8, r2
   19160:	andeq	r9, r1, ip, lsr r3
   19164:	andeq	r9, r1, ip, lsr r3
   19168:			; <UNDEFINED> instruction: 0x000192b4
   1916c:	andeq	r9, r1, ip, lsr r3
   19170:	andeq	r9, r1, ip, lsr r3
   19174:	andeq	r9, r1, ip, lsr r3
   19178:	ldrdeq	r9, [r1], -r0
   1917c:	andeq	r9, r1, ip, lsr r3
   19180:	andeq	r9, r1, ip, lsr r3
   19184:	andeq	r9, r1, ip, lsr r3
   19188:	andeq	r9, r1, ip, lsr r3
   1918c:	andeq	r9, r1, r4, lsl #6
   19190:	andeq	r9, r1, r0, lsr #6
   19194:	andeq	r9, r1, ip, lsr r3
   19198:	andeq	r9, r1, ip, lsr r3
   1919c:	andeq	r9, r1, ip, lsr r3
   191a0:	andeq	r9, r1, ip, lsr r3
   191a4:	andeq	r9, r1, ip, lsr r3
   191a8:	andeq	r9, r1, ip, lsr r3
   191ac:	andeq	r9, r1, ip, lsr r3
   191b0:	andeq	r9, r1, r8, lsl #4
   191b4:	andeq	r9, r1, r8, lsr r2
   191b8:	andeq	r9, r1, ip, lsr r3
   191bc:	andeq	r9, r1, ip, lsr r3
   191c0:	andeq	r9, r1, ip, lsr r3
   191c4:	andeq	r9, r1, r0, ror #4
   191c8:	andeq	r9, r1, ip, lsr r3
   191cc:	andeq	r9, r1, ip, lsr r3
   191d0:	andeq	r9, r1, ip, lsr r3
   191d4:	andeq	r9, r1, ip, ror r2
   191d8:	andeq	r9, r1, ip, lsr r3
   191dc:	muleq	r1, r8, r2
   191e0:	andeq	r9, r1, ip, lsr r3
   191e4:	andeq	r9, r1, ip, lsr r3
   191e8:	andeq	r9, r1, ip, lsr r3
   191ec:	andeq	r9, r1, ip, lsr r3
   191f0:	andeq	r9, r1, ip, lsr r3
   191f4:	andeq	r9, r1, ip, lsr r3
   191f8:	ldrdeq	r9, [r1], -r0
   191fc:	andeq	r9, r1, ip, lsr r3
   19200:	andeq	r9, r1, ip, lsr r3
   19204:	andeq	r9, r1, ip, ror #5
   19208:	sub	r3, fp, #44	; 0x2c
   1920c:	mov	r1, #512	; 0x200
   19210:	mov	r0, r3
   19214:	bl	18bbc <__assert_fail@plt+0x7c78>
   19218:	str	r0, [fp, #-28]	; 0xffffffe4
   1921c:	b	19354 <__assert_fail@plt+0x8410>
   19220:	sub	r3, fp, #44	; 0x2c
   19224:	mov	r1, #1024	; 0x400
   19228:	mov	r0, r3
   1922c:	bl	18bbc <__assert_fail@plt+0x7c78>
   19230:	str	r0, [fp, #-28]	; 0xffffffe4
   19234:	b	19354 <__assert_fail@plt+0x8410>
   19238:	mov	r3, #0
   1923c:	str	r3, [fp, #-28]	; 0xffffffe4
   19240:	b	19354 <__assert_fail@plt+0x8410>
   19244:	sub	r3, fp, #44	; 0x2c
   19248:	mov	r2, #6
   1924c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19250:	mov	r0, r3
   19254:	bl	18d20 <__assert_fail@plt+0x7ddc>
   19258:	str	r0, [fp, #-28]	; 0xffffffe4
   1925c:	b	19354 <__assert_fail@plt+0x8410>
   19260:	sub	r3, fp, #44	; 0x2c
   19264:	mov	r2, #3
   19268:	ldr	r1, [fp, #-20]	; 0xffffffec
   1926c:	mov	r0, r3
   19270:	bl	18d20 <__assert_fail@plt+0x7ddc>
   19274:	str	r0, [fp, #-28]	; 0xffffffe4
   19278:	b	19354 <__assert_fail@plt+0x8410>
   1927c:	sub	r3, fp, #44	; 0x2c
   19280:	mov	r2, #1
   19284:	ldr	r1, [fp, #-20]	; 0xffffffec
   19288:	mov	r0, r3
   1928c:	bl	18d20 <__assert_fail@plt+0x7ddc>
   19290:	str	r0, [fp, #-28]	; 0xffffffe4
   19294:	b	19354 <__assert_fail@plt+0x8410>
   19298:	sub	r3, fp, #44	; 0x2c
   1929c:	mov	r2, #2
   192a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   192a4:	mov	r0, r3
   192a8:	bl	18d20 <__assert_fail@plt+0x7ddc>
   192ac:	str	r0, [fp, #-28]	; 0xffffffe4
   192b0:	b	19354 <__assert_fail@plt+0x8410>
   192b4:	sub	r3, fp, #44	; 0x2c
   192b8:	mov	r2, #5
   192bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   192c0:	mov	r0, r3
   192c4:	bl	18d20 <__assert_fail@plt+0x7ddc>
   192c8:	str	r0, [fp, #-28]	; 0xffffffe4
   192cc:	b	19354 <__assert_fail@plt+0x8410>
   192d0:	sub	r3, fp, #44	; 0x2c
   192d4:	mov	r2, #4
   192d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   192dc:	mov	r0, r3
   192e0:	bl	18d20 <__assert_fail@plt+0x7ddc>
   192e4:	str	r0, [fp, #-28]	; 0xffffffe4
   192e8:	b	19354 <__assert_fail@plt+0x8410>
   192ec:	sub	r3, fp, #44	; 0x2c
   192f0:	mov	r1, #2
   192f4:	mov	r0, r3
   192f8:	bl	18bbc <__assert_fail@plt+0x7c78>
   192fc:	str	r0, [fp, #-28]	; 0xffffffe4
   19300:	b	19354 <__assert_fail@plt+0x8410>
   19304:	sub	r3, fp, #44	; 0x2c
   19308:	mov	r2, #8
   1930c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19310:	mov	r0, r3
   19314:	bl	18d20 <__assert_fail@plt+0x7ddc>
   19318:	str	r0, [fp, #-28]	; 0xffffffe4
   1931c:	b	19354 <__assert_fail@plt+0x8410>
   19320:	sub	r3, fp, #44	; 0x2c
   19324:	mov	r2, #7
   19328:	ldr	r1, [fp, #-20]	; 0xffffffec
   1932c:	mov	r0, r3
   19330:	bl	18d20 <__assert_fail@plt+0x7ddc>
   19334:	str	r0, [fp, #-28]	; 0xffffffe4
   19338:	b	19354 <__assert_fail@plt+0x8410>
   1933c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   19340:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19344:	strd	r2, [r1]
   19348:	ldr	r3, [fp, #-8]
   1934c:	orr	r3, r3, #2
   19350:	b	193ac <__assert_fail@plt+0x8468>
   19354:	ldr	r2, [fp, #-8]
   19358:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1935c:	orr	r3, r2, r3
   19360:	str	r3, [fp, #-8]
   19364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19368:	ldr	r2, [r3]
   1936c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19370:	add	r2, r2, r3
   19374:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19378:	str	r2, [r3]
   1937c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19380:	ldr	r3, [r3]
   19384:	ldrb	r3, [r3]
   19388:	cmp	r3, #0
   1938c:	beq	1939c <__assert_fail@plt+0x8458>
   19390:	ldr	r3, [fp, #-8]
   19394:	orr	r3, r3, #2
   19398:	str	r3, [fp, #-8]
   1939c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   193a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   193a4:	strd	r2, [r1]
   193a8:	ldr	r3, [fp, #-8]
   193ac:	mov	r0, r3
   193b0:	sub	sp, fp, #4
   193b4:	pop	{fp, pc}
   193b8:	muleq	r1, r8, r3
   193bc:	andeq	ip, r1, r0, ror #6
   193c0:	andeq	ip, r1, r0, ror r3
   193c4:	push	{r4, r5, fp, lr}
   193c8:	add	fp, sp, #12
   193cc:	sub	sp, sp, #16
   193d0:	str	r0, [fp, #-24]	; 0xffffffe8
   193d4:	str	r1, [fp, #-28]	; 0xffffffe4
   193d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   193dc:	cmp	r3, #0
   193e0:	beq	193f0 <__assert_fail@plt+0x84ac>
   193e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   193e8:	cmp	r3, #0
   193ec:	bne	19400 <__assert_fail@plt+0x84bc>
   193f0:	mov	r3, #1
   193f4:	str	r3, [fp, #-28]	; 0xffffffe4
   193f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   193fc:	str	r3, [fp, #-24]	; 0xffffffe8
   19400:	mov	r1, #0
   19404:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19408:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1940c:	umull	r2, r3, r2, r3
   19410:	mov	r4, r3
   19414:	mov	r5, #0
   19418:	cmp	r4, #0
   1941c:	beq	19424 <__assert_fail@plt+0x84e0>
   19420:	mov	r1, #1
   19424:	cmp	r2, #0
   19428:	bge	19430 <__assert_fail@plt+0x84ec>
   1942c:	mov	r1, #1
   19430:	mov	r3, r2
   19434:	str	r3, [fp, #-20]	; 0xffffffec
   19438:	mov	r3, r1
   1943c:	and	r3, r3, #1
   19440:	uxtb	r3, r3
   19444:	cmp	r3, #0
   19448:	beq	19464 <__assert_fail@plt+0x8520>
   1944c:	bl	10e84 <__errno_location@plt>
   19450:	mov	r2, r0
   19454:	mov	r3, #12
   19458:	str	r3, [r2]
   1945c:	mov	r3, #0
   19460:	b	1947c <__assert_fail@plt+0x8538>
   19464:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19468:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1946c:	bl	10cbc <calloc@plt>
   19470:	mov	r3, r0
   19474:	str	r3, [fp, #-16]
   19478:	ldr	r3, [fp, #-16]
   1947c:	mov	r0, r3
   19480:	sub	sp, fp, #12
   19484:	pop	{r4, r5, fp, pc}
   19488:	push	{r4, r5, fp, lr}
   1948c:	add	fp, sp, #12
   19490:	sub	sp, sp, #16
   19494:	str	r0, [fp, #-24]	; 0xffffffe8
   19498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1949c:	cmp	r3, #0
   194a0:	bne	194ac <__assert_fail@plt+0x8568>
   194a4:	mov	r3, #1
   194a8:	str	r3, [fp, #-24]	; 0xffffffe8
   194ac:	mov	r1, #0
   194b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194b4:	mov	r2, r3
   194b8:	mov	r3, #0
   194bc:	mov	r4, r3
   194c0:	mov	r5, #0
   194c4:	cmp	r4, #0
   194c8:	beq	194d0 <__assert_fail@plt+0x858c>
   194cc:	mov	r1, #1
   194d0:	cmp	r2, #0
   194d4:	bge	194dc <__assert_fail@plt+0x8598>
   194d8:	mov	r1, #1
   194dc:	mov	r3, r2
   194e0:	str	r3, [fp, #-20]	; 0xffffffec
   194e4:	mov	r3, r1
   194e8:	and	r3, r3, #1
   194ec:	uxtb	r3, r3
   194f0:	cmp	r3, #0
   194f4:	beq	19510 <__assert_fail@plt+0x85cc>
   194f8:	bl	10e84 <__errno_location@plt>
   194fc:	mov	r2, r0
   19500:	mov	r3, #12
   19504:	str	r3, [r2]
   19508:	mov	r3, #0
   1950c:	b	19524 <__assert_fail@plt+0x85e0>
   19510:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19514:	bl	10e00 <malloc@plt>
   19518:	mov	r3, r0
   1951c:	str	r3, [fp, #-16]
   19520:	ldr	r3, [fp, #-16]
   19524:	mov	r0, r3
   19528:	sub	sp, fp, #12
   1952c:	pop	{r4, r5, fp, pc}
   19530:	push	{r4, r5, fp, lr}
   19534:	add	fp, sp, #12
   19538:	sub	sp, sp, #16
   1953c:	str	r0, [fp, #-24]	; 0xffffffe8
   19540:	str	r1, [fp, #-28]	; 0xffffffe4
   19544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19548:	cmp	r3, #0
   1954c:	bne	19560 <__assert_fail@plt+0x861c>
   19550:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19554:	bl	19488 <__assert_fail@plt+0x8544>
   19558:	mov	r3, r0
   1955c:	b	195f4 <__assert_fail@plt+0x86b0>
   19560:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19564:	cmp	r3, #0
   19568:	bne	1957c <__assert_fail@plt+0x8638>
   1956c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19570:	bl	14f98 <__assert_fail@plt+0x4054>
   19574:	mov	r3, #0
   19578:	b	195f4 <__assert_fail@plt+0x86b0>
   1957c:	mov	r1, #0
   19580:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19584:	mov	r2, r3
   19588:	mov	r3, #0
   1958c:	mov	r4, r3
   19590:	mov	r5, #0
   19594:	cmp	r4, #0
   19598:	beq	195a0 <__assert_fail@plt+0x865c>
   1959c:	mov	r1, #1
   195a0:	cmp	r2, #0
   195a4:	bge	195ac <__assert_fail@plt+0x8668>
   195a8:	mov	r1, #1
   195ac:	mov	r3, r2
   195b0:	str	r3, [fp, #-20]	; 0xffffffec
   195b4:	mov	r3, r1
   195b8:	and	r3, r3, #1
   195bc:	uxtb	r3, r3
   195c0:	cmp	r3, #0
   195c4:	beq	195e0 <__assert_fail@plt+0x869c>
   195c8:	bl	10e84 <__errno_location@plt>
   195cc:	mov	r2, r0
   195d0:	mov	r3, #12
   195d4:	str	r3, [r2]
   195d8:	mov	r3, #0
   195dc:	b	195f4 <__assert_fail@plt+0x86b0>
   195e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   195e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   195e8:	bl	10d88 <realloc@plt>
   195ec:	str	r0, [fp, #-16]
   195f0:	ldr	r3, [fp, #-16]
   195f4:	mov	r0, r3
   195f8:	sub	sp, fp, #12
   195fc:	pop	{r4, r5, fp, pc}
   19600:	push	{fp}		; (str fp, [sp, #-4]!)
   19604:	add	fp, sp, #0
   19608:	sub	sp, sp, #12
   1960c:	str	r0, [fp, #-8]
   19610:	str	r1, [fp, #-12]
   19614:	mov	r3, #0
   19618:	mov	r0, r3
   1961c:	add	sp, fp, #0
   19620:	pop	{fp}		; (ldr fp, [sp], #4)
   19624:	bx	lr
   19628:	push	{fp, lr}
   1962c:	add	fp, sp, #4
   19630:	sub	sp, sp, #8
   19634:	str	r0, [fp, #-8]
   19638:	str	r1, [fp, #-12]
   1963c:	ldr	r1, [fp, #-12]
   19640:	ldr	r0, [fp, #-8]
   19644:	bl	19600 <__assert_fail@plt+0x86bc>
   19648:	mov	r3, r0
   1964c:	mov	r0, r3
   19650:	sub	sp, fp, #4
   19654:	pop	{fp, pc}
   19658:	push	{r4, r5, fp, lr}
   1965c:	add	fp, sp, #12
   19660:	sub	sp, sp, #16
   19664:	str	r0, [fp, #-24]	; 0xffffffe8
   19668:	str	r1, [fp, #-28]	; 0xffffffe4
   1966c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   19670:	ldr	r4, [fp, #-28]	; 0xffffffe4
   19674:	cmp	r5, r4
   19678:	bne	19684 <__assert_fail@plt+0x8740>
   1967c:	mov	r3, #0
   19680:	b	196e4 <__assert_fail@plt+0x87a0>
   19684:	ldrb	r3, [r5]
   19688:	mov	r0, r3
   1968c:	bl	1a1b4 <__assert_fail@plt+0x9270>
   19690:	mov	r3, r0
   19694:	strb	r3, [fp, #-13]
   19698:	ldrb	r3, [r4]
   1969c:	mov	r0, r3
   196a0:	bl	1a1b4 <__assert_fail@plt+0x9270>
   196a4:	mov	r3, r0
   196a8:	strb	r3, [fp, #-14]
   196ac:	ldrb	r3, [fp, #-13]
   196b0:	cmp	r3, #0
   196b4:	beq	196d4 <__assert_fail@plt+0x8790>
   196b8:	add	r5, r5, #1
   196bc:	add	r4, r4, #1
   196c0:	ldrb	r2, [fp, #-13]
   196c4:	ldrb	r3, [fp, #-14]
   196c8:	cmp	r2, r3
   196cc:	beq	19684 <__assert_fail@plt+0x8740>
   196d0:	b	196d8 <__assert_fail@plt+0x8794>
   196d4:	nop			; (mov r0, r0)
   196d8:	ldrb	r2, [fp, #-13]
   196dc:	ldrb	r3, [fp, #-14]
   196e0:	sub	r3, r2, r3
   196e4:	mov	r0, r3
   196e8:	sub	sp, fp, #12
   196ec:	pop	{r4, r5, fp, pc}
   196f0:	push	{fp, lr}
   196f4:	add	fp, sp, #4
   196f8:	sub	sp, sp, #16
   196fc:	str	r0, [fp, #-16]
   19700:	ldr	r0, [fp, #-16]
   19704:	bl	10dd0 <__fpending@plt>
   19708:	mov	r3, r0
   1970c:	cmp	r3, #0
   19710:	movne	r3, #1
   19714:	moveq	r3, #0
   19718:	strb	r3, [fp, #-5]
   1971c:	ldr	r0, [fp, #-16]
   19720:	bl	10ddc <ferror_unlocked@plt>
   19724:	mov	r3, r0
   19728:	cmp	r3, #0
   1972c:	movne	r3, #1
   19730:	moveq	r3, #0
   19734:	strb	r3, [fp, #-6]
   19738:	ldr	r0, [fp, #-16]
   1973c:	bl	197c8 <__assert_fail@plt+0x8884>
   19740:	mov	r3, r0
   19744:	cmp	r3, #0
   19748:	movne	r3, #1
   1974c:	moveq	r3, #0
   19750:	strb	r3, [fp, #-7]
   19754:	ldrb	r3, [fp, #-6]
   19758:	cmp	r3, #0
   1975c:	bne	1978c <__assert_fail@plt+0x8848>
   19760:	ldrb	r3, [fp, #-7]
   19764:	cmp	r3, #0
   19768:	beq	197b8 <__assert_fail@plt+0x8874>
   1976c:	ldrb	r3, [fp, #-5]
   19770:	cmp	r3, #0
   19774:	bne	1978c <__assert_fail@plt+0x8848>
   19778:	bl	10e84 <__errno_location@plt>
   1977c:	mov	r3, r0
   19780:	ldr	r3, [r3]
   19784:	cmp	r3, #9
   19788:	beq	197b8 <__assert_fail@plt+0x8874>
   1978c:	ldrb	r3, [fp, #-7]
   19790:	eor	r3, r3, #1
   19794:	uxtb	r3, r3
   19798:	cmp	r3, #0
   1979c:	beq	197b0 <__assert_fail@plt+0x886c>
   197a0:	bl	10e84 <__errno_location@plt>
   197a4:	mov	r2, r0
   197a8:	mov	r3, #0
   197ac:	str	r3, [r2]
   197b0:	mvn	r3, #0
   197b4:	b	197bc <__assert_fail@plt+0x8878>
   197b8:	mov	r3, #0
   197bc:	mov	r0, r3
   197c0:	sub	sp, fp, #4
   197c4:	pop	{fp, pc}
   197c8:	push	{fp, lr}
   197cc:	add	fp, sp, #4
   197d0:	sub	sp, sp, #32
   197d4:	str	r0, [fp, #-24]	; 0xffffffe8
   197d8:	mov	r3, #0
   197dc:	str	r3, [fp, #-8]
   197e0:	mov	r3, #0
   197e4:	str	r3, [fp, #-12]
   197e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197ec:	bl	10ea8 <fileno@plt>
   197f0:	str	r0, [fp, #-16]
   197f4:	ldr	r3, [fp, #-16]
   197f8:	cmp	r3, #0
   197fc:	bge	19810 <__assert_fail@plt+0x88cc>
   19800:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19804:	bl	10ec0 <fclose@plt>
   19808:	mov	r3, r0
   1980c:	b	198b4 <__assert_fail@plt+0x8970>
   19810:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19814:	bl	10e18 <__freading@plt>
   19818:	mov	r3, r0
   1981c:	cmp	r3, #0
   19820:	beq	1985c <__assert_fail@plt+0x8918>
   19824:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19828:	bl	10ea8 <fileno@plt>
   1982c:	mov	r1, r0
   19830:	mov	r3, #1
   19834:	str	r3, [sp]
   19838:	mov	r2, #0
   1983c:	mov	r3, #0
   19840:	mov	r0, r1
   19844:	bl	10db8 <lseek64@plt>
   19848:	mvn	r2, #0
   1984c:	mvn	r3, #0
   19850:	cmp	r1, r3
   19854:	cmpeq	r0, r2
   19858:	beq	19880 <__assert_fail@plt+0x893c>
   1985c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19860:	bl	19908 <__assert_fail@plt+0x89c4>
   19864:	mov	r3, r0
   19868:	cmp	r3, #0
   1986c:	beq	19880 <__assert_fail@plt+0x893c>
   19870:	bl	10e84 <__errno_location@plt>
   19874:	mov	r3, r0
   19878:	ldr	r3, [r3]
   1987c:	str	r3, [fp, #-8]
   19880:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19884:	bl	10ec0 <fclose@plt>
   19888:	str	r0, [fp, #-12]
   1988c:	ldr	r3, [fp, #-8]
   19890:	cmp	r3, #0
   19894:	beq	198b0 <__assert_fail@plt+0x896c>
   19898:	bl	10e84 <__errno_location@plt>
   1989c:	mov	r2, r0
   198a0:	ldr	r3, [fp, #-8]
   198a4:	str	r3, [r2]
   198a8:	mvn	r3, #0
   198ac:	str	r3, [fp, #-12]
   198b0:	ldr	r3, [fp, #-12]
   198b4:	mov	r0, r3
   198b8:	sub	sp, fp, #4
   198bc:	pop	{fp, pc}
   198c0:	push	{fp, lr}
   198c4:	add	fp, sp, #4
   198c8:	sub	sp, sp, #16
   198cc:	str	r0, [fp, #-8]
   198d0:	ldr	r3, [fp, #-8]
   198d4:	ldr	r3, [r3]
   198d8:	and	r3, r3, #256	; 0x100
   198dc:	cmp	r3, #0
   198e0:	beq	198fc <__assert_fail@plt+0x89b8>
   198e4:	mov	r3, #1
   198e8:	str	r3, [sp]
   198ec:	mov	r2, #0
   198f0:	mov	r3, #0
   198f4:	ldr	r0, [fp, #-8]
   198f8:	bl	19968 <__assert_fail@plt+0x8a24>
   198fc:	nop			; (mov r0, r0)
   19900:	sub	sp, fp, #4
   19904:	pop	{fp, pc}
   19908:	push	{fp, lr}
   1990c:	add	fp, sp, #4
   19910:	sub	sp, sp, #8
   19914:	str	r0, [fp, #-8]
   19918:	ldr	r3, [fp, #-8]
   1991c:	cmp	r3, #0
   19920:	beq	19938 <__assert_fail@plt+0x89f4>
   19924:	ldr	r0, [fp, #-8]
   19928:	bl	10e18 <__freading@plt>
   1992c:	mov	r3, r0
   19930:	cmp	r3, #0
   19934:	bne	19948 <__assert_fail@plt+0x8a04>
   19938:	ldr	r0, [fp, #-8]
   1993c:	bl	10d10 <fflush@plt>
   19940:	mov	r3, r0
   19944:	b	1995c <__assert_fail@plt+0x8a18>
   19948:	ldr	r0, [fp, #-8]
   1994c:	bl	198c0 <__assert_fail@plt+0x897c>
   19950:	ldr	r0, [fp, #-8]
   19954:	bl	10d10 <fflush@plt>
   19958:	mov	r3, r0
   1995c:	mov	r0, r3
   19960:	sub	sp, fp, #4
   19964:	pop	{fp, pc}
   19968:	push	{fp, lr}
   1996c:	add	fp, sp, #4
   19970:	sub	sp, sp, #32
   19974:	str	r0, [fp, #-16]
   19978:	strd	r2, [fp, #-28]	; 0xffffffe4
   1997c:	ldr	r3, [fp, #-16]
   19980:	ldr	r2, [r3, #8]
   19984:	ldr	r3, [fp, #-16]
   19988:	ldr	r3, [r3, #4]
   1998c:	cmp	r2, r3
   19990:	bne	19a28 <__assert_fail@plt+0x8ae4>
   19994:	ldr	r3, [fp, #-16]
   19998:	ldr	r2, [r3, #20]
   1999c:	ldr	r3, [fp, #-16]
   199a0:	ldr	r3, [r3, #16]
   199a4:	cmp	r2, r3
   199a8:	bne	19a28 <__assert_fail@plt+0x8ae4>
   199ac:	ldr	r3, [fp, #-16]
   199b0:	ldr	r3, [r3, #36]	; 0x24
   199b4:	cmp	r3, #0
   199b8:	bne	19a28 <__assert_fail@plt+0x8ae4>
   199bc:	ldr	r0, [fp, #-16]
   199c0:	bl	10ea8 <fileno@plt>
   199c4:	mov	r1, r0
   199c8:	ldr	r3, [fp, #4]
   199cc:	str	r3, [sp]
   199d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   199d4:	mov	r0, r1
   199d8:	bl	10db8 <lseek64@plt>
   199dc:	strd	r0, [fp, #-12]
   199e0:	ldrd	r2, [fp, #-12]
   199e4:	mvn	r0, #0
   199e8:	mvn	r1, #0
   199ec:	cmp	r3, r1
   199f0:	cmpeq	r2, r0
   199f4:	bne	19a00 <__assert_fail@plt+0x8abc>
   199f8:	mvn	r3, #0
   199fc:	b	19a40 <__assert_fail@plt+0x8afc>
   19a00:	ldr	r3, [fp, #-16]
   19a04:	ldr	r3, [r3]
   19a08:	bic	r2, r3, #16
   19a0c:	ldr	r3, [fp, #-16]
   19a10:	str	r2, [r3]
   19a14:	ldr	r1, [fp, #-16]
   19a18:	ldrd	r2, [fp, #-12]
   19a1c:	strd	r2, [r1, #80]	; 0x50
   19a20:	mov	r3, #0
   19a24:	b	19a40 <__assert_fail@plt+0x8afc>
   19a28:	ldr	r3, [fp, #4]
   19a2c:	str	r3, [sp]
   19a30:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   19a34:	ldr	r0, [fp, #-16]
   19a38:	bl	10ecc <fseeko64@plt>
   19a3c:	mov	r3, r0
   19a40:	mov	r0, r3
   19a44:	sub	sp, fp, #4
   19a48:	pop	{fp, pc}
   19a4c:	push	{fp, lr}
   19a50:	add	fp, sp, #4
   19a54:	bl	10e84 <__errno_location@plt>
   19a58:	mov	r2, r0
   19a5c:	mov	r3, #12
   19a60:	str	r3, [r2]
   19a64:	mov	r3, #0
   19a68:	mov	r0, r3
   19a6c:	pop	{fp, pc}
   19a70:	push	{fp, lr}
   19a74:	add	fp, sp, #4
   19a78:	sub	sp, sp, #8
   19a7c:	str	r0, [fp, #-8]
   19a80:	ldr	r3, [fp, #-8]
   19a84:	mov	r0, r3
   19a88:	bl	19488 <__assert_fail@plt+0x8544>
   19a8c:	mov	r3, r0
   19a90:	mov	r0, r3
   19a94:	sub	sp, fp, #4
   19a98:	pop	{fp, pc}
   19a9c:	push	{fp, lr}
   19aa0:	add	fp, sp, #4
   19aa4:	sub	sp, sp, #8
   19aa8:	str	r0, [fp, #-8]
   19aac:	str	r1, [fp, #-12]
   19ab0:	ldr	r3, [fp, #-12]
   19ab4:	cmp	r3, #0
   19ab8:	moveq	r3, #1
   19abc:	movne	r3, #0
   19ac0:	uxtb	r3, r3
   19ac4:	mov	r2, r3
   19ac8:	ldr	r3, [fp, #-12]
   19acc:	orr	r3, r2, r3
   19ad0:	mov	r1, r3
   19ad4:	ldr	r0, [fp, #-8]
   19ad8:	bl	19530 <__assert_fail@plt+0x85ec>
   19adc:	mov	r3, r0
   19ae0:	mov	r0, r3
   19ae4:	sub	sp, fp, #4
   19ae8:	pop	{fp, pc}
   19aec:	push	{fp, lr}
   19af0:	add	fp, sp, #4
   19af4:	sub	sp, sp, #8
   19af8:	str	r0, [fp, #-8]
   19afc:	str	r1, [fp, #-12]
   19b00:	ldr	r3, [fp, #-8]
   19b04:	ldr	r2, [fp, #-12]
   19b08:	mov	r1, r2
   19b0c:	mov	r0, r3
   19b10:	bl	193c4 <__assert_fail@plt+0x8480>
   19b14:	mov	r3, r0
   19b18:	mov	r0, r3
   19b1c:	sub	sp, fp, #4
   19b20:	pop	{fp, pc}
   19b24:	push	{fp, lr}
   19b28:	add	fp, sp, #4
   19b2c:	sub	sp, sp, #16
   19b30:	str	r0, [fp, #-8]
   19b34:	str	r1, [fp, #-12]
   19b38:	str	r2, [fp, #-16]
   19b3c:	ldr	r3, [fp, #-12]
   19b40:	cmp	r3, #0
   19b44:	beq	19b54 <__assert_fail@plt+0x8c10>
   19b48:	ldr	r3, [fp, #-16]
   19b4c:	cmp	r3, #0
   19b50:	bne	19b64 <__assert_fail@plt+0x8c20>
   19b54:	mov	r3, #1
   19b58:	str	r3, [fp, #-16]
   19b5c:	ldr	r3, [fp, #-16]
   19b60:	str	r3, [fp, #-12]
   19b64:	ldr	r3, [fp, #-12]
   19b68:	ldr	r2, [fp, #-16]
   19b6c:	mov	r1, r3
   19b70:	ldr	r0, [fp, #-8]
   19b74:	bl	19c90 <__assert_fail@plt+0x8d4c>
   19b78:	mov	r3, r0
   19b7c:	mov	r0, r3
   19b80:	sub	sp, fp, #4
   19b84:	pop	{fp, pc}
   19b88:	push	{fp, lr}
   19b8c:	add	fp, sp, #4
   19b90:	sub	sp, sp, #8
   19b94:	mov	r0, #14
   19b98:	bl	10efc <nl_langinfo@plt>
   19b9c:	str	r0, [fp, #-8]
   19ba0:	ldr	r3, [fp, #-8]
   19ba4:	cmp	r3, #0
   19ba8:	bne	19bb4 <__assert_fail@plt+0x8c70>
   19bac:	ldr	r3, [pc, #40]	; 19bdc <__assert_fail@plt+0x8c98>
   19bb0:	str	r3, [fp, #-8]
   19bb4:	ldr	r3, [fp, #-8]
   19bb8:	ldrb	r3, [r3]
   19bbc:	cmp	r3, #0
   19bc0:	bne	19bcc <__assert_fail@plt+0x8c88>
   19bc4:	ldr	r3, [pc, #20]	; 19be0 <__assert_fail@plt+0x8c9c>
   19bc8:	str	r3, [fp, #-8]
   19bcc:	ldr	r3, [fp, #-8]
   19bd0:	mov	r0, r3
   19bd4:	sub	sp, fp, #4
   19bd8:	pop	{fp, pc}
   19bdc:	andeq	ip, r1, r4, lsr #7
   19be0:	andeq	ip, r1, r8, lsr #7
   19be4:	push	{fp, lr}
   19be8:	add	fp, sp, #4
   19bec:	sub	sp, sp, #32
   19bf0:	str	r0, [fp, #-24]	; 0xffffffe8
   19bf4:	str	r1, [fp, #-28]	; 0xffffffe4
   19bf8:	str	r2, [fp, #-32]	; 0xffffffe0
   19bfc:	str	r3, [fp, #-36]	; 0xffffffdc
   19c00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c04:	cmp	r3, #0
   19c08:	bne	19c14 <__assert_fail@plt+0x8cd0>
   19c0c:	sub	r3, fp, #16
   19c10:	str	r3, [fp, #-24]	; 0xffffffe8
   19c14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19c18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19c1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19c20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c24:	bl	10de8 <mbrtowc@plt>
   19c28:	str	r0, [fp, #-8]
   19c2c:	ldr	r3, [fp, #-8]
   19c30:	cmn	r3, #3
   19c34:	bls	19c80 <__assert_fail@plt+0x8d3c>
   19c38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19c3c:	cmp	r3, #0
   19c40:	beq	19c80 <__assert_fail@plt+0x8d3c>
   19c44:	mov	r0, #0
   19c48:	bl	1a234 <__assert_fail@plt+0x92f0>
   19c4c:	mov	r3, r0
   19c50:	eor	r3, r3, #1
   19c54:	uxtb	r3, r3
   19c58:	cmp	r3, #0
   19c5c:	beq	19c80 <__assert_fail@plt+0x8d3c>
   19c60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19c64:	ldrb	r3, [r3]
   19c68:	strb	r3, [fp, #-9]
   19c6c:	ldrb	r2, [fp, #-9]
   19c70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c74:	str	r2, [r3]
   19c78:	mov	r3, #1
   19c7c:	b	19c84 <__assert_fail@plt+0x8d40>
   19c80:	ldr	r3, [fp, #-8]
   19c84:	mov	r0, r3
   19c88:	sub	sp, fp, #4
   19c8c:	pop	{fp, pc}
   19c90:	push	{fp, lr}
   19c94:	add	fp, sp, #4
   19c98:	sub	sp, sp, #24
   19c9c:	str	r0, [fp, #-16]
   19ca0:	str	r1, [fp, #-20]	; 0xffffffec
   19ca4:	str	r2, [fp, #-24]	; 0xffffffe8
   19ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19cac:	cmp	r3, #0
   19cb0:	beq	19cec <__assert_fail@plt+0x8da8>
   19cb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19cb8:	mvn	r0, #0
   19cbc:	bl	1a438 <__assert_fail@plt+0x94f4>
   19cc0:	mov	r3, r0
   19cc4:	mov	r2, r3
   19cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ccc:	cmp	r2, r3
   19cd0:	bcs	19cec <__assert_fail@plt+0x8da8>
   19cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19cdc:	mul	r3, r2, r3
   19ce0:	str	r3, [fp, #-8]
   19ce4:	mov	r3, #1
   19ce8:	b	19d00 <__assert_fail@plt+0x8dbc>
   19cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cf0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19cf4:	mul	r3, r2, r3
   19cf8:	str	r3, [fp, #-8]
   19cfc:	mov	r3, #0
   19d00:	cmp	r3, #0
   19d04:	beq	19d20 <__assert_fail@plt+0x8ddc>
   19d08:	bl	10e84 <__errno_location@plt>
   19d0c:	mov	r2, r0
   19d10:	mov	r3, #12
   19d14:	str	r3, [r2]
   19d18:	mov	r3, #0
   19d1c:	b	19d34 <__assert_fail@plt+0x8df0>
   19d20:	ldr	r3, [fp, #-8]
   19d24:	mov	r1, r3
   19d28:	ldr	r0, [fp, #-16]
   19d2c:	bl	19530 <__assert_fail@plt+0x85ec>
   19d30:	mov	r3, r0
   19d34:	mov	r0, r3
   19d38:	sub	sp, fp, #4
   19d3c:	pop	{fp, pc}
   19d40:	push	{fp}		; (str fp, [sp, #-4]!)
   19d44:	add	fp, sp, #0
   19d48:	sub	sp, sp, #12
   19d4c:	str	r0, [fp, #-8]
   19d50:	ldr	r3, [fp, #-8]
   19d54:	cmp	r3, #90	; 0x5a
   19d58:	bgt	19d74 <__assert_fail@plt+0x8e30>
   19d5c:	cmp	r3, #65	; 0x41
   19d60:	bge	19d80 <__assert_fail@plt+0x8e3c>
   19d64:	sub	r3, r3, #48	; 0x30
   19d68:	cmp	r3, #9
   19d6c:	bhi	19d88 <__assert_fail@plt+0x8e44>
   19d70:	b	19d80 <__assert_fail@plt+0x8e3c>
   19d74:	sub	r3, r3, #97	; 0x61
   19d78:	cmp	r3, #25
   19d7c:	bhi	19d88 <__assert_fail@plt+0x8e44>
   19d80:	mov	r3, #1
   19d84:	b	19d8c <__assert_fail@plt+0x8e48>
   19d88:	mov	r3, #0
   19d8c:	mov	r0, r3
   19d90:	add	sp, fp, #0
   19d94:	pop	{fp}		; (ldr fp, [sp], #4)
   19d98:	bx	lr
   19d9c:	push	{fp}		; (str fp, [sp, #-4]!)
   19da0:	add	fp, sp, #0
   19da4:	sub	sp, sp, #12
   19da8:	str	r0, [fp, #-8]
   19dac:	ldr	r3, [fp, #-8]
   19db0:	cmp	r3, #65	; 0x41
   19db4:	blt	19dd4 <__assert_fail@plt+0x8e90>
   19db8:	cmp	r3, #90	; 0x5a
   19dbc:	ble	19dcc <__assert_fail@plt+0x8e88>
   19dc0:	sub	r3, r3, #97	; 0x61
   19dc4:	cmp	r3, #25
   19dc8:	bhi	19dd4 <__assert_fail@plt+0x8e90>
   19dcc:	mov	r3, #1
   19dd0:	b	19dd8 <__assert_fail@plt+0x8e94>
   19dd4:	mov	r3, #0
   19dd8:	mov	r0, r3
   19ddc:	add	sp, fp, #0
   19de0:	pop	{fp}		; (ldr fp, [sp], #4)
   19de4:	bx	lr
   19de8:	push	{fp}		; (str fp, [sp, #-4]!)
   19dec:	add	fp, sp, #0
   19df0:	sub	sp, sp, #12
   19df4:	str	r0, [fp, #-8]
   19df8:	ldr	r3, [fp, #-8]
   19dfc:	add	r3, r3, #0
   19e00:	cmp	r3, #127	; 0x7f
   19e04:	bhi	19e10 <__assert_fail@plt+0x8ecc>
   19e08:	mov	r3, #1
   19e0c:	b	19e14 <__assert_fail@plt+0x8ed0>
   19e10:	mov	r3, #0
   19e14:	mov	r0, r3
   19e18:	add	sp, fp, #0
   19e1c:	pop	{fp}		; (ldr fp, [sp], #4)
   19e20:	bx	lr
   19e24:	push	{fp}		; (str fp, [sp, #-4]!)
   19e28:	add	fp, sp, #0
   19e2c:	sub	sp, sp, #12
   19e30:	str	r0, [fp, #-8]
   19e34:	ldr	r3, [fp, #-8]
   19e38:	cmp	r3, #32
   19e3c:	beq	19e4c <__assert_fail@plt+0x8f08>
   19e40:	ldr	r3, [fp, #-8]
   19e44:	cmp	r3, #9
   19e48:	bne	19e54 <__assert_fail@plt+0x8f10>
   19e4c:	mov	r3, #1
   19e50:	b	19e58 <__assert_fail@plt+0x8f14>
   19e54:	mov	r3, #0
   19e58:	and	r3, r3, #1
   19e5c:	uxtb	r3, r3
   19e60:	mov	r0, r3
   19e64:	add	sp, fp, #0
   19e68:	pop	{fp}		; (ldr fp, [sp], #4)
   19e6c:	bx	lr
   19e70:	push	{fp}		; (str fp, [sp, #-4]!)
   19e74:	add	fp, sp, #0
   19e78:	sub	sp, sp, #12
   19e7c:	str	r0, [fp, #-8]
   19e80:	ldr	r3, [fp, #-8]
   19e84:	cmp	r3, #0
   19e88:	blt	19ea4 <__assert_fail@plt+0x8f60>
   19e8c:	cmp	r3, #31
   19e90:	ble	19e9c <__assert_fail@plt+0x8f58>
   19e94:	cmp	r3, #127	; 0x7f
   19e98:	bne	19ea4 <__assert_fail@plt+0x8f60>
   19e9c:	mov	r3, #1
   19ea0:	b	19ea8 <__assert_fail@plt+0x8f64>
   19ea4:	mov	r3, #0
   19ea8:	mov	r0, r3
   19eac:	add	sp, fp, #0
   19eb0:	pop	{fp}		; (ldr fp, [sp], #4)
   19eb4:	bx	lr
   19eb8:	push	{fp}		; (str fp, [sp, #-4]!)
   19ebc:	add	fp, sp, #0
   19ec0:	sub	sp, sp, #12
   19ec4:	str	r0, [fp, #-8]
   19ec8:	ldr	r3, [fp, #-8]
   19ecc:	sub	r3, r3, #48	; 0x30
   19ed0:	cmp	r3, #9
   19ed4:	bhi	19ee0 <__assert_fail@plt+0x8f9c>
   19ed8:	mov	r3, #1
   19edc:	b	19ee4 <__assert_fail@plt+0x8fa0>
   19ee0:	mov	r3, #0
   19ee4:	mov	r0, r3
   19ee8:	add	sp, fp, #0
   19eec:	pop	{fp}		; (ldr fp, [sp], #4)
   19ef0:	bx	lr
   19ef4:	push	{fp}		; (str fp, [sp, #-4]!)
   19ef8:	add	fp, sp, #0
   19efc:	sub	sp, sp, #12
   19f00:	str	r0, [fp, #-8]
   19f04:	ldr	r3, [fp, #-8]
   19f08:	sub	r3, r3, #33	; 0x21
   19f0c:	cmp	r3, #93	; 0x5d
   19f10:	bhi	19f1c <__assert_fail@plt+0x8fd8>
   19f14:	mov	r3, #1
   19f18:	b	19f20 <__assert_fail@plt+0x8fdc>
   19f1c:	mov	r3, #0
   19f20:	mov	r0, r3
   19f24:	add	sp, fp, #0
   19f28:	pop	{fp}		; (ldr fp, [sp], #4)
   19f2c:	bx	lr
   19f30:	push	{fp}		; (str fp, [sp, #-4]!)
   19f34:	add	fp, sp, #0
   19f38:	sub	sp, sp, #12
   19f3c:	str	r0, [fp, #-8]
   19f40:	ldr	r3, [fp, #-8]
   19f44:	sub	r3, r3, #97	; 0x61
   19f48:	cmp	r3, #25
   19f4c:	bhi	19f58 <__assert_fail@plt+0x9014>
   19f50:	mov	r3, #1
   19f54:	b	19f5c <__assert_fail@plt+0x9018>
   19f58:	mov	r3, #0
   19f5c:	mov	r0, r3
   19f60:	add	sp, fp, #0
   19f64:	pop	{fp}		; (ldr fp, [sp], #4)
   19f68:	bx	lr
   19f6c:	push	{fp}		; (str fp, [sp, #-4]!)
   19f70:	add	fp, sp, #0
   19f74:	sub	sp, sp, #12
   19f78:	str	r0, [fp, #-8]
   19f7c:	ldr	r3, [fp, #-8]
   19f80:	sub	r3, r3, #32
   19f84:	cmp	r3, #94	; 0x5e
   19f88:	bhi	19f94 <__assert_fail@plt+0x9050>
   19f8c:	mov	r3, #1
   19f90:	b	19f98 <__assert_fail@plt+0x9054>
   19f94:	mov	r3, #0
   19f98:	mov	r0, r3
   19f9c:	add	sp, fp, #0
   19fa0:	pop	{fp}		; (ldr fp, [sp], #4)
   19fa4:	bx	lr
   19fa8:	push	{fp}		; (str fp, [sp, #-4]!)
   19fac:	add	fp, sp, #0
   19fb0:	sub	sp, sp, #12
   19fb4:	str	r0, [fp, #-8]
   19fb8:	ldr	r3, [fp, #-8]
   19fbc:	cmp	r3, #64	; 0x40
   19fc0:	bgt	19fdc <__assert_fail@plt+0x9098>
   19fc4:	cmp	r3, #58	; 0x3a
   19fc8:	bge	19ff8 <__assert_fail@plt+0x90b4>
   19fcc:	sub	r3, r3, #33	; 0x21
   19fd0:	cmp	r3, #14
   19fd4:	bhi	1a000 <__assert_fail@plt+0x90bc>
   19fd8:	b	19ff8 <__assert_fail@plt+0x90b4>
   19fdc:	cmp	r3, #91	; 0x5b
   19fe0:	blt	1a000 <__assert_fail@plt+0x90bc>
   19fe4:	cmp	r3, #96	; 0x60
   19fe8:	ble	19ff8 <__assert_fail@plt+0x90b4>
   19fec:	sub	r3, r3, #123	; 0x7b
   19ff0:	cmp	r3, #3
   19ff4:	bhi	1a000 <__assert_fail@plt+0x90bc>
   19ff8:	mov	r3, #1
   19ffc:	b	1a004 <__assert_fail@plt+0x90c0>
   1a000:	mov	r3, #0
   1a004:	mov	r0, r3
   1a008:	add	sp, fp, #0
   1a00c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a010:	bx	lr
   1a014:	push	{fp}		; (str fp, [sp, #-4]!)
   1a018:	add	fp, sp, #0
   1a01c:	sub	sp, sp, #12
   1a020:	str	r0, [fp, #-8]
   1a024:	ldr	r3, [fp, #-8]
   1a028:	cmp	r3, #9
   1a02c:	blt	1a048 <__assert_fail@plt+0x9104>
   1a030:	cmp	r3, #13
   1a034:	ble	1a040 <__assert_fail@plt+0x90fc>
   1a038:	cmp	r3, #32
   1a03c:	bne	1a048 <__assert_fail@plt+0x9104>
   1a040:	mov	r3, #1
   1a044:	b	1a04c <__assert_fail@plt+0x9108>
   1a048:	mov	r3, #0
   1a04c:	mov	r0, r3
   1a050:	add	sp, fp, #0
   1a054:	pop	{fp}		; (ldr fp, [sp], #4)
   1a058:	bx	lr
   1a05c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a060:	add	fp, sp, #0
   1a064:	sub	sp, sp, #12
   1a068:	str	r0, [fp, #-8]
   1a06c:	ldr	r3, [fp, #-8]
   1a070:	sub	r3, r3, #65	; 0x41
   1a074:	cmp	r3, #25
   1a078:	bhi	1a084 <__assert_fail@plt+0x9140>
   1a07c:	mov	r3, #1
   1a080:	b	1a088 <__assert_fail@plt+0x9144>
   1a084:	mov	r3, #0
   1a088:	mov	r0, r3
   1a08c:	add	sp, fp, #0
   1a090:	pop	{fp}		; (ldr fp, [sp], #4)
   1a094:	bx	lr
   1a098:	push	{fp}		; (str fp, [sp, #-4]!)
   1a09c:	add	fp, sp, #0
   1a0a0:	sub	sp, sp, #12
   1a0a4:	str	r0, [fp, #-8]
   1a0a8:	ldr	r3, [fp, #-8]
   1a0ac:	sub	r3, r3, #48	; 0x30
   1a0b0:	cmp	r3, #54	; 0x36
   1a0b4:	addls	pc, pc, r3, lsl #2
   1a0b8:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0bc:	b	1a198 <__assert_fail@plt+0x9254>
   1a0c0:	b	1a198 <__assert_fail@plt+0x9254>
   1a0c4:	b	1a198 <__assert_fail@plt+0x9254>
   1a0c8:	b	1a198 <__assert_fail@plt+0x9254>
   1a0cc:	b	1a198 <__assert_fail@plt+0x9254>
   1a0d0:	b	1a198 <__assert_fail@plt+0x9254>
   1a0d4:	b	1a198 <__assert_fail@plt+0x9254>
   1a0d8:	b	1a198 <__assert_fail@plt+0x9254>
   1a0dc:	b	1a198 <__assert_fail@plt+0x9254>
   1a0e0:	b	1a198 <__assert_fail@plt+0x9254>
   1a0e4:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0e8:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0ec:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0f0:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0f4:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0f8:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a0fc:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a100:	b	1a198 <__assert_fail@plt+0x9254>
   1a104:	b	1a198 <__assert_fail@plt+0x9254>
   1a108:	b	1a198 <__assert_fail@plt+0x9254>
   1a10c:	b	1a198 <__assert_fail@plt+0x9254>
   1a110:	b	1a198 <__assert_fail@plt+0x9254>
   1a114:	b	1a198 <__assert_fail@plt+0x9254>
   1a118:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a11c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a120:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a124:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a128:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a12c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a130:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a134:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a138:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a13c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a140:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a144:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a148:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a14c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a150:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a154:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a158:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a15c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a160:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a164:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a168:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a16c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a170:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a174:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a178:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a17c:	b	1a1a0 <__assert_fail@plt+0x925c>
   1a180:	b	1a198 <__assert_fail@plt+0x9254>
   1a184:	b	1a198 <__assert_fail@plt+0x9254>
   1a188:	b	1a198 <__assert_fail@plt+0x9254>
   1a18c:	b	1a198 <__assert_fail@plt+0x9254>
   1a190:	b	1a198 <__assert_fail@plt+0x9254>
   1a194:	b	1a198 <__assert_fail@plt+0x9254>
   1a198:	mov	r3, #1
   1a19c:	b	1a1a4 <__assert_fail@plt+0x9260>
   1a1a0:	mov	r3, #0
   1a1a4:	mov	r0, r3
   1a1a8:	add	sp, fp, #0
   1a1ac:	pop	{fp}		; (ldr fp, [sp], #4)
   1a1b0:	bx	lr
   1a1b4:	push	{fp}		; (str fp, [sp, #-4]!)
   1a1b8:	add	fp, sp, #0
   1a1bc:	sub	sp, sp, #12
   1a1c0:	str	r0, [fp, #-8]
   1a1c4:	ldr	r3, [fp, #-8]
   1a1c8:	sub	r3, r3, #65	; 0x41
   1a1cc:	cmp	r3, #25
   1a1d0:	bhi	1a1e0 <__assert_fail@plt+0x929c>
   1a1d4:	ldr	r3, [fp, #-8]
   1a1d8:	add	r3, r3, #32
   1a1dc:	b	1a1e4 <__assert_fail@plt+0x92a0>
   1a1e0:	ldr	r3, [fp, #-8]
   1a1e4:	mov	r0, r3
   1a1e8:	add	sp, fp, #0
   1a1ec:	pop	{fp}		; (ldr fp, [sp], #4)
   1a1f0:	bx	lr
   1a1f4:	push	{fp}		; (str fp, [sp, #-4]!)
   1a1f8:	add	fp, sp, #0
   1a1fc:	sub	sp, sp, #12
   1a200:	str	r0, [fp, #-8]
   1a204:	ldr	r3, [fp, #-8]
   1a208:	sub	r3, r3, #97	; 0x61
   1a20c:	cmp	r3, #25
   1a210:	bhi	1a220 <__assert_fail@plt+0x92dc>
   1a214:	ldr	r3, [fp, #-8]
   1a218:	sub	r3, r3, #32
   1a21c:	b	1a224 <__assert_fail@plt+0x92e0>
   1a220:	ldr	r3, [fp, #-8]
   1a224:	mov	r0, r3
   1a228:	add	sp, fp, #0
   1a22c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a230:	bx	lr
   1a234:	push	{fp, lr}
   1a238:	add	fp, sp, #4
   1a23c:	sub	sp, sp, #272	; 0x110
   1a240:	str	r0, [fp, #-272]	; 0xfffffef0
   1a244:	sub	r3, fp, #264	; 0x108
   1a248:	ldr	r2, [pc, #116]	; 1a2c4 <__assert_fail@plt+0x9380>
   1a24c:	mov	r1, r3
   1a250:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1a254:	bl	1a3d8 <__assert_fail@plt+0x9494>
   1a258:	mov	r3, r0
   1a25c:	cmp	r3, #0
   1a260:	beq	1a26c <__assert_fail@plt+0x9328>
   1a264:	mov	r3, #0
   1a268:	b	1a2b8 <__assert_fail@plt+0x9374>
   1a26c:	sub	r3, fp, #264	; 0x108
   1a270:	ldr	r1, [pc, #80]	; 1a2c8 <__assert_fail@plt+0x9384>
   1a274:	mov	r0, r3
   1a278:	bl	10ce0 <strcmp@plt>
   1a27c:	mov	r3, r0
   1a280:	cmp	r3, #0
   1a284:	beq	1a2ac <__assert_fail@plt+0x9368>
   1a288:	sub	r3, fp, #264	; 0x108
   1a28c:	ldr	r1, [pc, #56]	; 1a2cc <__assert_fail@plt+0x9388>
   1a290:	mov	r0, r3
   1a294:	bl	10ce0 <strcmp@plt>
   1a298:	mov	r3, r0
   1a29c:	cmp	r3, #0
   1a2a0:	beq	1a2ac <__assert_fail@plt+0x9368>
   1a2a4:	mov	r3, #1
   1a2a8:	b	1a2b0 <__assert_fail@plt+0x936c>
   1a2ac:	mov	r3, #0
   1a2b0:	and	r3, r3, #1
   1a2b4:	uxtb	r3, r3
   1a2b8:	mov	r0, r3
   1a2bc:	sub	sp, fp, #4
   1a2c0:	pop	{fp, pc}
   1a2c4:	andeq	r0, r0, r1, lsl #2
   1a2c8:			; <UNDEFINED> instruction: 0x0001c3b0
   1a2cc:			; <UNDEFINED> instruction: 0x0001c3b4
   1a2d0:	push	{fp, lr}
   1a2d4:	add	fp, sp, #4
   1a2d8:	sub	sp, sp, #16
   1a2dc:	str	r0, [fp, #-16]
   1a2e0:	mov	r1, #0
   1a2e4:	ldr	r0, [fp, #-16]
   1a2e8:	bl	10ed8 <setlocale@plt>
   1a2ec:	str	r0, [fp, #-8]
   1a2f0:	ldr	r3, [fp, #-8]
   1a2f4:	mov	r0, r3
   1a2f8:	sub	sp, fp, #4
   1a2fc:	pop	{fp, pc}
   1a300:	push	{fp, lr}
   1a304:	add	fp, sp, #4
   1a308:	sub	sp, sp, #24
   1a30c:	str	r0, [fp, #-16]
   1a310:	str	r1, [fp, #-20]	; 0xffffffec
   1a314:	str	r2, [fp, #-24]	; 0xffffffe8
   1a318:	ldr	r0, [fp, #-16]
   1a31c:	bl	1a2d0 <__assert_fail@plt+0x938c>
   1a320:	str	r0, [fp, #-8]
   1a324:	ldr	r3, [fp, #-8]
   1a328:	cmp	r3, #0
   1a32c:	bne	1a350 <__assert_fail@plt+0x940c>
   1a330:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a334:	cmp	r3, #0
   1a338:	beq	1a348 <__assert_fail@plt+0x9404>
   1a33c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a340:	mov	r2, #0
   1a344:	strb	r2, [r3]
   1a348:	mov	r3, #22
   1a34c:	b	1a3cc <__assert_fail@plt+0x9488>
   1a350:	ldr	r0, [fp, #-8]
   1a354:	bl	10e60 <strlen@plt>
   1a358:	str	r0, [fp, #-12]
   1a35c:	ldr	r2, [fp, #-12]
   1a360:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a364:	cmp	r2, r3
   1a368:	bcs	1a38c <__assert_fail@plt+0x9448>
   1a36c:	ldr	r3, [fp, #-12]
   1a370:	add	r3, r3, #1
   1a374:	mov	r2, r3
   1a378:	ldr	r1, [fp, #-8]
   1a37c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a380:	bl	10d34 <memcpy@plt>
   1a384:	mov	r3, #0
   1a388:	b	1a3cc <__assert_fail@plt+0x9488>
   1a38c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a390:	cmp	r3, #0
   1a394:	beq	1a3c8 <__assert_fail@plt+0x9484>
   1a398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a39c:	sub	r3, r3, #1
   1a3a0:	mov	r2, r3
   1a3a4:	ldr	r1, [fp, #-8]
   1a3a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a3ac:	bl	10d34 <memcpy@plt>
   1a3b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a3b4:	sub	r3, r3, #1
   1a3b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3bc:	add	r3, r2, r3
   1a3c0:	mov	r2, #0
   1a3c4:	strb	r2, [r3]
   1a3c8:	mov	r3, #34	; 0x22
   1a3cc:	mov	r0, r3
   1a3d0:	sub	sp, fp, #4
   1a3d4:	pop	{fp, pc}
   1a3d8:	push	{fp, lr}
   1a3dc:	add	fp, sp, #4
   1a3e0:	sub	sp, sp, #16
   1a3e4:	str	r0, [fp, #-8]
   1a3e8:	str	r1, [fp, #-12]
   1a3ec:	str	r2, [fp, #-16]
   1a3f0:	ldr	r2, [fp, #-16]
   1a3f4:	ldr	r1, [fp, #-12]
   1a3f8:	ldr	r0, [fp, #-8]
   1a3fc:	bl	1a300 <__assert_fail@plt+0x93bc>
   1a400:	mov	r3, r0
   1a404:	mov	r0, r3
   1a408:	sub	sp, fp, #4
   1a40c:	pop	{fp, pc}
   1a410:	push	{fp, lr}
   1a414:	add	fp, sp, #4
   1a418:	sub	sp, sp, #8
   1a41c:	str	r0, [fp, #-8]
   1a420:	ldr	r0, [fp, #-8]
   1a424:	bl	1a2d0 <__assert_fail@plt+0x938c>
   1a428:	mov	r3, r0
   1a42c:	mov	r0, r3
   1a430:	sub	sp, fp, #4
   1a434:	pop	{fp, pc}
   1a438:	subs	r2, r1, #1
   1a43c:	bxeq	lr
   1a440:	bcc	1a618 <__assert_fail@plt+0x96d4>
   1a444:	cmp	r0, r1
   1a448:	bls	1a5fc <__assert_fail@plt+0x96b8>
   1a44c:	tst	r1, r2
   1a450:	beq	1a608 <__assert_fail@plt+0x96c4>
   1a454:	clz	r3, r0
   1a458:	clz	r2, r1
   1a45c:	sub	r3, r2, r3
   1a460:	rsbs	r3, r3, #31
   1a464:	addne	r3, r3, r3, lsl #1
   1a468:	mov	r2, #0
   1a46c:	addne	pc, pc, r3, lsl #2
   1a470:	nop			; (mov r0, r0)
   1a474:	cmp	r0, r1, lsl #31
   1a478:	adc	r2, r2, r2
   1a47c:	subcs	r0, r0, r1, lsl #31
   1a480:	cmp	r0, r1, lsl #30
   1a484:	adc	r2, r2, r2
   1a488:	subcs	r0, r0, r1, lsl #30
   1a48c:	cmp	r0, r1, lsl #29
   1a490:	adc	r2, r2, r2
   1a494:	subcs	r0, r0, r1, lsl #29
   1a498:	cmp	r0, r1, lsl #28
   1a49c:	adc	r2, r2, r2
   1a4a0:	subcs	r0, r0, r1, lsl #28
   1a4a4:	cmp	r0, r1, lsl #27
   1a4a8:	adc	r2, r2, r2
   1a4ac:	subcs	r0, r0, r1, lsl #27
   1a4b0:	cmp	r0, r1, lsl #26
   1a4b4:	adc	r2, r2, r2
   1a4b8:	subcs	r0, r0, r1, lsl #26
   1a4bc:	cmp	r0, r1, lsl #25
   1a4c0:	adc	r2, r2, r2
   1a4c4:	subcs	r0, r0, r1, lsl #25
   1a4c8:	cmp	r0, r1, lsl #24
   1a4cc:	adc	r2, r2, r2
   1a4d0:	subcs	r0, r0, r1, lsl #24
   1a4d4:	cmp	r0, r1, lsl #23
   1a4d8:	adc	r2, r2, r2
   1a4dc:	subcs	r0, r0, r1, lsl #23
   1a4e0:	cmp	r0, r1, lsl #22
   1a4e4:	adc	r2, r2, r2
   1a4e8:	subcs	r0, r0, r1, lsl #22
   1a4ec:	cmp	r0, r1, lsl #21
   1a4f0:	adc	r2, r2, r2
   1a4f4:	subcs	r0, r0, r1, lsl #21
   1a4f8:	cmp	r0, r1, lsl #20
   1a4fc:	adc	r2, r2, r2
   1a500:	subcs	r0, r0, r1, lsl #20
   1a504:	cmp	r0, r1, lsl #19
   1a508:	adc	r2, r2, r2
   1a50c:	subcs	r0, r0, r1, lsl #19
   1a510:	cmp	r0, r1, lsl #18
   1a514:	adc	r2, r2, r2
   1a518:	subcs	r0, r0, r1, lsl #18
   1a51c:	cmp	r0, r1, lsl #17
   1a520:	adc	r2, r2, r2
   1a524:	subcs	r0, r0, r1, lsl #17
   1a528:	cmp	r0, r1, lsl #16
   1a52c:	adc	r2, r2, r2
   1a530:	subcs	r0, r0, r1, lsl #16
   1a534:	cmp	r0, r1, lsl #15
   1a538:	adc	r2, r2, r2
   1a53c:	subcs	r0, r0, r1, lsl #15
   1a540:	cmp	r0, r1, lsl #14
   1a544:	adc	r2, r2, r2
   1a548:	subcs	r0, r0, r1, lsl #14
   1a54c:	cmp	r0, r1, lsl #13
   1a550:	adc	r2, r2, r2
   1a554:	subcs	r0, r0, r1, lsl #13
   1a558:	cmp	r0, r1, lsl #12
   1a55c:	adc	r2, r2, r2
   1a560:	subcs	r0, r0, r1, lsl #12
   1a564:	cmp	r0, r1, lsl #11
   1a568:	adc	r2, r2, r2
   1a56c:	subcs	r0, r0, r1, lsl #11
   1a570:	cmp	r0, r1, lsl #10
   1a574:	adc	r2, r2, r2
   1a578:	subcs	r0, r0, r1, lsl #10
   1a57c:	cmp	r0, r1, lsl #9
   1a580:	adc	r2, r2, r2
   1a584:	subcs	r0, r0, r1, lsl #9
   1a588:	cmp	r0, r1, lsl #8
   1a58c:	adc	r2, r2, r2
   1a590:	subcs	r0, r0, r1, lsl #8
   1a594:	cmp	r0, r1, lsl #7
   1a598:	adc	r2, r2, r2
   1a59c:	subcs	r0, r0, r1, lsl #7
   1a5a0:	cmp	r0, r1, lsl #6
   1a5a4:	adc	r2, r2, r2
   1a5a8:	subcs	r0, r0, r1, lsl #6
   1a5ac:	cmp	r0, r1, lsl #5
   1a5b0:	adc	r2, r2, r2
   1a5b4:	subcs	r0, r0, r1, lsl #5
   1a5b8:	cmp	r0, r1, lsl #4
   1a5bc:	adc	r2, r2, r2
   1a5c0:	subcs	r0, r0, r1, lsl #4
   1a5c4:	cmp	r0, r1, lsl #3
   1a5c8:	adc	r2, r2, r2
   1a5cc:	subcs	r0, r0, r1, lsl #3
   1a5d0:	cmp	r0, r1, lsl #2
   1a5d4:	adc	r2, r2, r2
   1a5d8:	subcs	r0, r0, r1, lsl #2
   1a5dc:	cmp	r0, r1, lsl #1
   1a5e0:	adc	r2, r2, r2
   1a5e4:	subcs	r0, r0, r1, lsl #1
   1a5e8:	cmp	r0, r1
   1a5ec:	adc	r2, r2, r2
   1a5f0:	subcs	r0, r0, r1
   1a5f4:	mov	r0, r2
   1a5f8:	bx	lr
   1a5fc:	moveq	r0, #1
   1a600:	movne	r0, #0
   1a604:	bx	lr
   1a608:	clz	r2, r1
   1a60c:	rsb	r2, r2, #31
   1a610:	lsr	r0, r0, r2
   1a614:	bx	lr
   1a618:	cmp	r0, #0
   1a61c:	mvnne	r0, #0
   1a620:	b	1a8c0 <__assert_fail@plt+0x997c>
   1a624:	cmp	r1, #0
   1a628:	beq	1a618 <__assert_fail@plt+0x96d4>
   1a62c:	push	{r0, r1, lr}
   1a630:	bl	1a438 <__assert_fail@plt+0x94f4>
   1a634:	pop	{r1, r2, lr}
   1a638:	mul	r3, r2, r0
   1a63c:	sub	r1, r1, r3
   1a640:	bx	lr
   1a644:	cmp	r1, #0
   1a648:	beq	1a854 <__assert_fail@plt+0x9910>
   1a64c:	eor	ip, r0, r1
   1a650:	rsbmi	r1, r1, #0
   1a654:	subs	r2, r1, #1
   1a658:	beq	1a820 <__assert_fail@plt+0x98dc>
   1a65c:	movs	r3, r0
   1a660:	rsbmi	r3, r0, #0
   1a664:	cmp	r3, r1
   1a668:	bls	1a82c <__assert_fail@plt+0x98e8>
   1a66c:	tst	r1, r2
   1a670:	beq	1a83c <__assert_fail@plt+0x98f8>
   1a674:	clz	r2, r3
   1a678:	clz	r0, r1
   1a67c:	sub	r2, r0, r2
   1a680:	rsbs	r2, r2, #31
   1a684:	addne	r2, r2, r2, lsl #1
   1a688:	mov	r0, #0
   1a68c:	addne	pc, pc, r2, lsl #2
   1a690:	nop			; (mov r0, r0)
   1a694:	cmp	r3, r1, lsl #31
   1a698:	adc	r0, r0, r0
   1a69c:	subcs	r3, r3, r1, lsl #31
   1a6a0:	cmp	r3, r1, lsl #30
   1a6a4:	adc	r0, r0, r0
   1a6a8:	subcs	r3, r3, r1, lsl #30
   1a6ac:	cmp	r3, r1, lsl #29
   1a6b0:	adc	r0, r0, r0
   1a6b4:	subcs	r3, r3, r1, lsl #29
   1a6b8:	cmp	r3, r1, lsl #28
   1a6bc:	adc	r0, r0, r0
   1a6c0:	subcs	r3, r3, r1, lsl #28
   1a6c4:	cmp	r3, r1, lsl #27
   1a6c8:	adc	r0, r0, r0
   1a6cc:	subcs	r3, r3, r1, lsl #27
   1a6d0:	cmp	r3, r1, lsl #26
   1a6d4:	adc	r0, r0, r0
   1a6d8:	subcs	r3, r3, r1, lsl #26
   1a6dc:	cmp	r3, r1, lsl #25
   1a6e0:	adc	r0, r0, r0
   1a6e4:	subcs	r3, r3, r1, lsl #25
   1a6e8:	cmp	r3, r1, lsl #24
   1a6ec:	adc	r0, r0, r0
   1a6f0:	subcs	r3, r3, r1, lsl #24
   1a6f4:	cmp	r3, r1, lsl #23
   1a6f8:	adc	r0, r0, r0
   1a6fc:	subcs	r3, r3, r1, lsl #23
   1a700:	cmp	r3, r1, lsl #22
   1a704:	adc	r0, r0, r0
   1a708:	subcs	r3, r3, r1, lsl #22
   1a70c:	cmp	r3, r1, lsl #21
   1a710:	adc	r0, r0, r0
   1a714:	subcs	r3, r3, r1, lsl #21
   1a718:	cmp	r3, r1, lsl #20
   1a71c:	adc	r0, r0, r0
   1a720:	subcs	r3, r3, r1, lsl #20
   1a724:	cmp	r3, r1, lsl #19
   1a728:	adc	r0, r0, r0
   1a72c:	subcs	r3, r3, r1, lsl #19
   1a730:	cmp	r3, r1, lsl #18
   1a734:	adc	r0, r0, r0
   1a738:	subcs	r3, r3, r1, lsl #18
   1a73c:	cmp	r3, r1, lsl #17
   1a740:	adc	r0, r0, r0
   1a744:	subcs	r3, r3, r1, lsl #17
   1a748:	cmp	r3, r1, lsl #16
   1a74c:	adc	r0, r0, r0
   1a750:	subcs	r3, r3, r1, lsl #16
   1a754:	cmp	r3, r1, lsl #15
   1a758:	adc	r0, r0, r0
   1a75c:	subcs	r3, r3, r1, lsl #15
   1a760:	cmp	r3, r1, lsl #14
   1a764:	adc	r0, r0, r0
   1a768:	subcs	r3, r3, r1, lsl #14
   1a76c:	cmp	r3, r1, lsl #13
   1a770:	adc	r0, r0, r0
   1a774:	subcs	r3, r3, r1, lsl #13
   1a778:	cmp	r3, r1, lsl #12
   1a77c:	adc	r0, r0, r0
   1a780:	subcs	r3, r3, r1, lsl #12
   1a784:	cmp	r3, r1, lsl #11
   1a788:	adc	r0, r0, r0
   1a78c:	subcs	r3, r3, r1, lsl #11
   1a790:	cmp	r3, r1, lsl #10
   1a794:	adc	r0, r0, r0
   1a798:	subcs	r3, r3, r1, lsl #10
   1a79c:	cmp	r3, r1, lsl #9
   1a7a0:	adc	r0, r0, r0
   1a7a4:	subcs	r3, r3, r1, lsl #9
   1a7a8:	cmp	r3, r1, lsl #8
   1a7ac:	adc	r0, r0, r0
   1a7b0:	subcs	r3, r3, r1, lsl #8
   1a7b4:	cmp	r3, r1, lsl #7
   1a7b8:	adc	r0, r0, r0
   1a7bc:	subcs	r3, r3, r1, lsl #7
   1a7c0:	cmp	r3, r1, lsl #6
   1a7c4:	adc	r0, r0, r0
   1a7c8:	subcs	r3, r3, r1, lsl #6
   1a7cc:	cmp	r3, r1, lsl #5
   1a7d0:	adc	r0, r0, r0
   1a7d4:	subcs	r3, r3, r1, lsl #5
   1a7d8:	cmp	r3, r1, lsl #4
   1a7dc:	adc	r0, r0, r0
   1a7e0:	subcs	r3, r3, r1, lsl #4
   1a7e4:	cmp	r3, r1, lsl #3
   1a7e8:	adc	r0, r0, r0
   1a7ec:	subcs	r3, r3, r1, lsl #3
   1a7f0:	cmp	r3, r1, lsl #2
   1a7f4:	adc	r0, r0, r0
   1a7f8:	subcs	r3, r3, r1, lsl #2
   1a7fc:	cmp	r3, r1, lsl #1
   1a800:	adc	r0, r0, r0
   1a804:	subcs	r3, r3, r1, lsl #1
   1a808:	cmp	r3, r1
   1a80c:	adc	r0, r0, r0
   1a810:	subcs	r3, r3, r1
   1a814:	cmp	ip, #0
   1a818:	rsbmi	r0, r0, #0
   1a81c:	bx	lr
   1a820:	teq	ip, r0
   1a824:	rsbmi	r0, r0, #0
   1a828:	bx	lr
   1a82c:	movcc	r0, #0
   1a830:	asreq	r0, ip, #31
   1a834:	orreq	r0, r0, #1
   1a838:	bx	lr
   1a83c:	clz	r2, r1
   1a840:	rsb	r2, r2, #31
   1a844:	cmp	ip, #0
   1a848:	lsr	r0, r3, r2
   1a84c:	rsbmi	r0, r0, #0
   1a850:	bx	lr
   1a854:	cmp	r0, #0
   1a858:	mvngt	r0, #-2147483648	; 0x80000000
   1a85c:	movlt	r0, #-2147483648	; 0x80000000
   1a860:	b	1a8c0 <__assert_fail@plt+0x997c>
   1a864:	cmp	r1, #0
   1a868:	beq	1a854 <__assert_fail@plt+0x9910>
   1a86c:	push	{r0, r1, lr}
   1a870:	bl	1a64c <__assert_fail@plt+0x9708>
   1a874:	pop	{r1, r2, lr}
   1a878:	mul	r3, r2, r0
   1a87c:	sub	r1, r1, r3
   1a880:	bx	lr
   1a884:	cmp	r3, #0
   1a888:	cmpeq	r2, #0
   1a88c:	bne	1a8a4 <__assert_fail@plt+0x9960>
   1a890:	cmp	r1, #0
   1a894:	cmpeq	r0, #0
   1a898:	mvnne	r1, #0
   1a89c:	mvnne	r0, #0
   1a8a0:	b	1a8c0 <__assert_fail@plt+0x997c>
   1a8a4:	sub	sp, sp, #8
   1a8a8:	push	{sp, lr}
   1a8ac:	bl	1a8d0 <__assert_fail@plt+0x998c>
   1a8b0:	ldr	lr, [sp, #4]
   1a8b4:	add	sp, sp, #8
   1a8b8:	pop	{r2, r3}
   1a8bc:	bx	lr
   1a8c0:	push	{r1, lr}
   1a8c4:	mov	r0, #8
   1a8c8:	bl	10cd4 <raise@plt>
   1a8cc:	pop	{r1, pc}
   1a8d0:	cmp	r1, r3
   1a8d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a8d8:	cmpeq	r0, r2
   1a8dc:	mov	r4, r0
   1a8e0:	mov	r5, r1
   1a8e4:	ldr	r9, [sp, #28]
   1a8e8:	movcc	r0, #0
   1a8ec:	movcc	r1, #0
   1a8f0:	bcc	1a9e8 <__assert_fail@plt+0x9aa4>
   1a8f4:	cmp	r3, #0
   1a8f8:	clzeq	ip, r2
   1a8fc:	clzne	ip, r3
   1a900:	addeq	ip, ip, #32
   1a904:	cmp	r5, #0
   1a908:	clzeq	r1, r4
   1a90c:	addeq	r1, r1, #32
   1a910:	clzne	r1, r5
   1a914:	sub	ip, ip, r1
   1a918:	sub	lr, ip, #32
   1a91c:	lsl	r7, r3, ip
   1a920:	rsb	r8, ip, #32
   1a924:	orr	r7, r7, r2, lsl lr
   1a928:	orr	r7, r7, r2, lsr r8
   1a92c:	lsl	r6, r2, ip
   1a930:	cmp	r5, r7
   1a934:	cmpeq	r4, r6
   1a938:	movcc	r0, #0
   1a93c:	movcc	r1, #0
   1a940:	bcc	1a95c <__assert_fail@plt+0x9a18>
   1a944:	mov	r3, #1
   1a948:	subs	r4, r4, r6
   1a94c:	lsl	r1, r3, lr
   1a950:	lsl	r0, r3, ip
   1a954:	orr	r1, r1, r3, lsr r8
   1a958:	sbc	r5, r5, r7
   1a95c:	cmp	ip, #0
   1a960:	beq	1a9e8 <__assert_fail@plt+0x9aa4>
   1a964:	lsrs	r3, r7, #1
   1a968:	rrx	r2, r6
   1a96c:	mov	r6, ip
   1a970:	b	1a994 <__assert_fail@plt+0x9a50>
   1a974:	subs	r4, r4, r2
   1a978:	sbc	r5, r5, r3
   1a97c:	adds	r4, r4, r4
   1a980:	adc	r5, r5, r5
   1a984:	adds	r4, r4, #1
   1a988:	adc	r5, r5, #0
   1a98c:	subs	r6, r6, #1
   1a990:	beq	1a9b0 <__assert_fail@plt+0x9a6c>
   1a994:	cmp	r5, r3
   1a998:	cmpeq	r4, r2
   1a99c:	bcs	1a974 <__assert_fail@plt+0x9a30>
   1a9a0:	adds	r4, r4, r4
   1a9a4:	adc	r5, r5, r5
   1a9a8:	subs	r6, r6, #1
   1a9ac:	bne	1a994 <__assert_fail@plt+0x9a50>
   1a9b0:	lsr	r6, r4, ip
   1a9b4:	lsr	r7, r5, ip
   1a9b8:	orr	r6, r6, r5, lsl r8
   1a9bc:	adds	r2, r0, r4
   1a9c0:	orr	r6, r6, r5, lsr lr
   1a9c4:	adc	r3, r1, r5
   1a9c8:	lsl	r1, r7, ip
   1a9cc:	orr	r1, r1, r6, lsl lr
   1a9d0:	lsl	r0, r6, ip
   1a9d4:	orr	r1, r1, r6, lsr r8
   1a9d8:	subs	r0, r2, r0
   1a9dc:	mov	r4, r6
   1a9e0:	mov	r5, r7
   1a9e4:	sbc	r1, r3, r1
   1a9e8:	cmp	r9, #0
   1a9ec:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a9f0:	strd	r4, [r9]
   1a9f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a9f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a9fc:	mov	r7, r0
   1aa00:	ldr	r6, [pc, #72]	; 1aa50 <__assert_fail@plt+0x9b0c>
   1aa04:	ldr	r5, [pc, #72]	; 1aa54 <__assert_fail@plt+0x9b10>
   1aa08:	add	r6, pc, r6
   1aa0c:	add	r5, pc, r5
   1aa10:	sub	r6, r6, r5
   1aa14:	mov	r8, r1
   1aa18:	mov	r9, r2
   1aa1c:	bl	10c9c <calloc@plt-0x20>
   1aa20:	asrs	r6, r6, #2
   1aa24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa28:	mov	r4, #0
   1aa2c:	add	r4, r4, #1
   1aa30:	ldr	r3, [r5], #4
   1aa34:	mov	r2, r9
   1aa38:	mov	r1, r8
   1aa3c:	mov	r0, r7
   1aa40:	blx	r3
   1aa44:	cmp	r6, r4
   1aa48:	bne	1aa2c <__assert_fail@plt+0x9ae8>
   1aa4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa50:	andeq	r2, r1, r0, lsl #10
   1aa54:	strdeq	r2, [r1], -r8
   1aa58:	bx	lr
   1aa5c:	ldr	r3, [pc, #12]	; 1aa70 <__assert_fail@plt+0x9b2c>
   1aa60:	mov	r1, #0
   1aa64:	add	r3, pc, r3
   1aa68:	ldr	r2, [r3]
   1aa6c:	b	10e90 <__cxa_atexit@plt>
   1aa70:	andeq	r2, r1, r4, lsl #13

Disassembly of section .fini:

0001aa74 <.fini>:
   1aa74:	push	{r3, lr}
   1aa78:	pop	{r3, pc}
