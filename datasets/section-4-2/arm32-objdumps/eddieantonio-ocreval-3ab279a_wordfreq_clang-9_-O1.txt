
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b64 <.init>:
   10b64:	push	{r3, lr}
   10b68:	bl	10d94 <__assert_fail@plt+0x48>
   10b6c:	pop	{r3, pc}

Disassembly of section .plt:

00010b70 <calloc@plt-0x14>:
   10b70:	push	{lr}		; (str lr, [sp, #-4]!)
   10b74:	ldr	lr, [pc, #4]	; 10b80 <calloc@plt-0x4>
   10b78:	add	lr, pc, lr
   10b7c:	ldr	pc, [lr, #8]!
   10b80:	andeq	r6, r1, r0, lsl #9

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1152]!	; 0x480

00010b90 <strcmp@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1144]!	; 0x478

00010b9c <printf@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1136]!	; 0x470

00010ba8 <fopen@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #90112	; 0x16000
   10bb0:	ldr	pc, [ip, #1128]!	; 0x468

00010bb4 <free@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #90112	; 0x16000
   10bbc:	ldr	pc, [ip, #1120]!	; 0x460

00010bc0 <utf8proc_get_property@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #90112	; 0x16000
   10bc8:	ldr	pc, [ip, #1112]!	; 0x458

00010bcc <fgets@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #90112	; 0x16000
   10bd4:	ldr	pc, [ip, #1104]!	; 0x450

00010bd8 <utf8proc_encode_char@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #90112	; 0x16000
   10be0:	ldr	pc, [ip, #1096]!	; 0x448

00010be4 <strdup@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #90112	; 0x16000
   10bec:	ldr	pc, [ip, #1088]!	; 0x440

00010bf0 <rewind@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #90112	; 0x16000
   10bf8:	ldr	pc, [ip, #1080]!	; 0x438

00010bfc <unlink@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #90112	; 0x16000
   10c04:	ldr	pc, [ip, #1072]!	; 0x430

00010c08 <utf8proc_tolower@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #90112	; 0x16000
   10c10:	ldr	pc, [ip, #1064]!	; 0x428

00010c14 <__xstat@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #90112	; 0x16000
   10c1c:	ldr	pc, [ip, #1056]!	; 0x420

00010c20 <fwrite@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #90112	; 0x16000
   10c28:	ldr	pc, [ip, #1048]!	; 0x418

00010c2c <fread@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #90112	; 0x16000
   10c34:	ldr	pc, [ip, #1040]!	; 0x410

00010c38 <utf8proc_iterate@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #90112	; 0x16000
   10c40:	ldr	pc, [ip, #1032]!	; 0x408

00010c44 <puts@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #90112	; 0x16000
   10c4c:	ldr	pc, [ip, #1024]!	; 0x400

00010c50 <malloc@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #90112	; 0x16000
   10c58:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c5c <__libc_start_main@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #90112	; 0x16000
   10c64:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c68 <__sysv_signal@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #90112	; 0x16000
   10c70:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c74 <__gmon_start__@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #90112	; 0x16000
   10c7c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c80 <getpid@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #90112	; 0x16000
   10c88:	ldr	pc, [ip, #984]!	; 0x3d8

00010c8c <exit@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #90112	; 0x16000
   10c94:	ldr	pc, [ip, #976]!	; 0x3d0

00010c98 <bcmp@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #90112	; 0x16000
   10ca0:	ldr	pc, [ip, #968]!	; 0x3c8

00010ca4 <utf8proc_category@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #90112	; 0x16000
   10cac:	ldr	pc, [ip, #960]!	; 0x3c0

00010cb0 <strlen@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #90112	; 0x16000
   10cb8:	ldr	pc, [ip, #952]!	; 0x3b8

00010cbc <fprintf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #90112	; 0x16000
   10cc4:	ldr	pc, [ip, #944]!	; 0x3b0

00010cc8 <__isoc99_sscanf@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #936]!	; 0x3a8

00010cd4 <fclose@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #928]!	; 0x3a0

00010ce0 <utf8proc_NFC@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #920]!	; 0x398

00010cec <fputc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #912]!	; 0x390

00010cf8 <sprintf@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #904]!	; 0x388

00010d04 <atoi@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #896]!	; 0x380

00010d10 <utf8proc_errmsg@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #888]!	; 0x378

00010d1c <fputs@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #880]!	; 0x370

00010d28 <strncmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #872]!	; 0x368

00010d34 <abort@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #864]!	; 0x360

00010d40 <getc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #856]!	; 0x358

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #848]!	; 0x350

Disassembly of section .text:

00010d58 <error@@Base-0x1a28>:
   10d58:	mov	fp, #0
   10d5c:	mov	lr, #0
   10d60:	pop	{r1}		; (ldr r1, [sp], #4)
   10d64:	mov	r2, sp
   10d68:	push	{r2}		; (str r2, [sp, #-4]!)
   10d6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d70:	ldr	ip, [pc, #16]	; 10d88 <__assert_fail@plt+0x3c>
   10d74:	push	{ip}		; (str ip, [sp, #-4]!)
   10d78:	ldr	r0, [pc, #12]	; 10d8c <__assert_fail@plt+0x40>
   10d7c:	ldr	r3, [pc, #12]	; 10d90 <__assert_fail@plt+0x44>
   10d80:	bl	10c5c <__libc_start_main@plt>
   10d84:	bl	10d34 <abort@plt>
   10d88:	muleq	r1, r8, r1
   10d8c:	andeq	r0, r1, ip, ror #31
   10d90:	andeq	r3, r1, r8, lsr r1
   10d94:	ldr	r3, [pc, #20]	; 10db0 <__assert_fail@plt+0x64>
   10d98:	ldr	r2, [pc, #20]	; 10db4 <__assert_fail@plt+0x68>
   10d9c:	add	r3, pc, r3
   10da0:	ldr	r2, [r3, r2]
   10da4:	cmp	r2, #0
   10da8:	bxeq	lr
   10dac:	b	10c74 <__gmon_start__@plt>
   10db0:	andeq	r6, r1, ip, asr r2
   10db4:	andeq	r0, r0, r8, lsr #1
   10db8:	ldr	r0, [pc, #24]	; 10dd8 <__assert_fail@plt+0x8c>
   10dbc:	ldr	r3, [pc, #24]	; 10ddc <__assert_fail@plt+0x90>
   10dc0:	cmp	r3, r0
   10dc4:	bxeq	lr
   10dc8:	ldr	r3, [pc, #16]	; 10de0 <__assert_fail@plt+0x94>
   10dcc:	cmp	r3, #0
   10dd0:	bxeq	lr
   10dd4:	bx	r3
   10dd8:	andeq	r7, r2, r8, asr #1
   10ddc:	andeq	r7, r2, r8, asr #1
   10de0:	andeq	r0, r0, r0
   10de4:	ldr	r0, [pc, #36]	; 10e10 <__assert_fail@plt+0xc4>
   10de8:	ldr	r1, [pc, #36]	; 10e14 <__assert_fail@plt+0xc8>
   10dec:	sub	r1, r1, r0
   10df0:	asr	r1, r1, #2
   10df4:	add	r1, r1, r1, lsr #31
   10df8:	asrs	r1, r1, #1
   10dfc:	bxeq	lr
   10e00:	ldr	r3, [pc, #16]	; 10e18 <__assert_fail@plt+0xcc>
   10e04:	cmp	r3, #0
   10e08:	bxeq	lr
   10e0c:	bx	r3
   10e10:	andeq	r7, r2, r8, asr #1
   10e14:	andeq	r7, r2, r8, asr #1
   10e18:	andeq	r0, r0, r0
   10e1c:	push	{r4, lr}
   10e20:	ldr	r4, [pc, #24]	; 10e40 <__assert_fail@plt+0xf4>
   10e24:	ldrb	r3, [r4]
   10e28:	cmp	r3, #0
   10e2c:	popne	{r4, pc}
   10e30:	bl	10db8 <__assert_fail@plt+0x6c>
   10e34:	mov	r3, #1
   10e38:	strb	r3, [r4]
   10e3c:	pop	{r4, pc}
   10e40:	ldrdeq	r7, [r2], -r8
   10e44:	b	10de4 <__assert_fail@plt+0x98>
   10e48:	push	{r4, r5, fp, lr}
   10e4c:	add	fp, sp, #8
   10e50:	mov	r1, r0
   10e54:	movw	r4, #29004	; 0x714c
   10e58:	movt	r4, #2
   10e5c:	movw	r2, #28852	; 0x70b4
   10e60:	movt	r2, #2
   10e64:	mov	r0, r4
   10e68:	bl	12a6c <error@@Base+0x2ec>
   10e6c:	movw	r5, #29020	; 0x715c
   10e70:	movt	r5, #2
   10e74:	mov	r0, r5
   10e78:	mov	r1, r4
   10e7c:	bl	11e10 <__assert_fail@plt+0x10c4>
   10e80:	ldr	r5, [r5]
   10e84:	cmp	r5, #0
   10e88:	beq	10eb4 <__assert_fail@plt+0x168>
   10e8c:	movw	r4, #29036	; 0x716c
   10e90:	movt	r4, #2
   10e94:	ldr	r1, [r5, #8]
   10e98:	mov	r0, r4
   10e9c:	mov	r2, #1
   10ea0:	mov	r3, #0
   10ea4:	bl	11354 <__assert_fail@plt+0x608>
   10ea8:	ldr	r5, [r5, #4]
   10eac:	cmp	r5, #0
   10eb0:	bne	10e94 <__assert_fail@plt+0x148>
   10eb4:	movw	r0, #29004	; 0x714c
   10eb8:	movt	r0, #2
   10ebc:	movw	r1, #2996	; 0xbb4
   10ec0:	movt	r1, #1
   10ec4:	bl	111b8 <__assert_fail@plt+0x46c>
   10ec8:	movw	r0, #29020	; 0x715c
   10ecc:	movt	r0, #2
   10ed0:	movw	r1, #8536	; 0x2158
   10ed4:	movt	r1, #1
   10ed8:	pop	{r4, r5, fp, lr}
   10edc:	b	111b8 <__assert_fail@plt+0x46c>
   10ee0:	ldr	r1, [r1, #8]
   10ee4:	ldr	r0, [r0, #8]
   10ee8:	b	123ec <__assert_fail@plt+0x16a0>
   10eec:	ldr	r2, [r1, #12]
   10ef0:	ldr	r3, [r0, #12]
   10ef4:	cmp	r2, r3
   10ef8:	subne	r0, r2, r3
   10efc:	bxne	lr
   10f00:	b	10ee0 <__assert_fail@plt+0x194>
   10f04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f08:	add	fp, sp, #24
   10f0c:	movw	r0, #12813	; 0x320d
   10f10:	movt	r0, #1
   10f14:	bl	10c44 <puts@plt>
   10f18:	movw	r0, #8052	; 0x1f74
   10f1c:	movw	r8, #29036	; 0x716c
   10f20:	movt	r8, #2
   10f24:	ldr	r0, [r8, r0]
   10f28:	mov	r4, #0
   10f2c:	cmp	r0, #1
   10f30:	blt	10f7c <__assert_fail@plt+0x230>
   10f34:	movw	r9, #8048	; 0x1f70
   10f38:	movw	r5, #12728	; 0x31b8
   10f3c:	movt	r5, #1
   10f40:	mov	r6, #0
   10f44:	mov	r7, r8
   10f48:	ldr	r0, [r7, r9]!
   10f4c:	ldr	r0, [r0, r6, lsl #2]
   10f50:	ldr	r2, [r0, #8]
   10f54:	ldr	r1, [r0, #12]
   10f58:	mov	r0, r5
   10f5c:	bl	10b9c <printf@plt>
   10f60:	ldm	r7, {r0, r1}
   10f64:	ldr	r0, [r0, r6, lsl #2]
   10f68:	ldr	r0, [r0, #12]
   10f6c:	add	r4, r0, r4
   10f70:	add	r6, r6, #1
   10f74:	cmp	r6, r1
   10f78:	blt	10f44 <__assert_fail@plt+0x1f8>
   10f7c:	movw	r0, #12739	; 0x31c3
   10f80:	movt	r0, #1
   10f84:	mov	r1, r4
   10f88:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f8c:	b	10b9c <printf@plt>
   10f90:	push	{r4, sl, fp, lr}
   10f94:	add	fp, sp, #8
   10f98:	movw	r4, #29036	; 0x716c
   10f9c:	movt	r4, #2
   10fa0:	mov	r0, r4
   10fa4:	bl	11d48 <__assert_fail@plt+0xffc>
   10fa8:	movw	r0, #8052	; 0x1f74
   10fac:	ldr	r0, [r4, r0]!
   10fb0:	ldr	r1, [r4, #-4]
   10fb4:	movw	r2, #3808	; 0xee0
   10fb8:	movt	r2, #1
   10fbc:	bl	111f8 <__assert_fail@plt+0x4ac>
   10fc0:	bl	10f04 <__assert_fail@plt+0x1b8>
   10fc4:	movw	r0, #26391	; 0x6717
   10fc8:	movt	r0, #1
   10fcc:	bl	10c44 <puts@plt>
   10fd0:	ldr	r1, [r4, #-4]
   10fd4:	ldr	r0, [r4]
   10fd8:	movw	r2, #3820	; 0xeec
   10fdc:	movt	r2, #1
   10fe0:	bl	111f8 <__assert_fail@plt+0x4ac>
   10fe4:	pop	{r4, sl, fp, lr}
   10fe8:	b	10f04 <__assert_fail@plt+0x1b8>
   10fec:	push	{fp, lr}
   10ff0:	mov	fp, sp
   10ff4:	sub	sp, sp, #8
   10ff8:	mov	r4, r1
   10ffc:	str	r0, [sp, #4]
   11000:	add	r0, sp, #4
   11004:	movw	r2, #12753	; 0x31d1
   11008:	movt	r2, #1
   1100c:	mov	r3, #0
   11010:	bl	125fc <__assert_fail@plt+0x18b0>
   11014:	ldr	r0, [sp, #4]
   11018:	cmp	r0, #0
   1101c:	beq	11050 <__assert_fail@plt+0x304>
   11020:	ldr	r0, [sp, #4]
   11024:	cmp	r0, #1
   11028:	blt	11048 <__assert_fail@plt+0x2fc>
   1102c:	mov	r5, #0
   11030:	ldr	r0, [r4, r5, lsl #2]
   11034:	bl	10e48 <__assert_fail@plt+0xfc>
   11038:	add	r5, r5, #1
   1103c:	ldr	r0, [sp, #4]
   11040:	cmp	r5, r0
   11044:	blt	11030 <__assert_fail@plt+0x2e4>
   11048:	bl	10f90 <__assert_fail@plt+0x244>
   1104c:	bl	12740 <__assert_fail@plt+0x19f4>
   11050:	movw	r0, #12789	; 0x31f5
   11054:	movt	r0, #1
   11058:	bl	12780 <error@@Base>
   1105c:	vmov.i32	q8, #0	; 0x00000000
   11060:	vst1.32	{d16-d17}, [r0]
   11064:	bx	lr
   11068:	mov	r2, r1
   1106c:	ldr	r3, [r0]
   11070:	mov	r1, #0
   11074:	b	11078 <__assert_fail@plt+0x32c>
   11078:	push	{r4, sl, fp, lr}
   1107c:	add	fp, sp, #8
   11080:	mov	r4, r0
   11084:	stm	r2, {r1, r3}
   11088:	cmp	r1, #0
   1108c:	addne	r0, r1, #4
   11090:	str	r2, [r0]
   11094:	cmp	r3, #0
   11098:	addeq	r3, r4, #4
   1109c:	str	r2, [r3]
   110a0:	mov	r0, r4
   110a4:	bl	11134 <__assert_fail@plt+0x3e8>
   110a8:	ldr	r0, [r4, #12]
   110ac:	add	r0, r0, #1
   110b0:	str	r0, [r4, #12]
   110b4:	pop	{r4, sl, fp, pc}
   110b8:	mov	r2, r1
   110bc:	ldr	r1, [r0, #4]
   110c0:	mov	r3, #0
   110c4:	b	11078 <__assert_fail@plt+0x32c>
   110c8:	mov	r3, r2
   110cc:	mov	r2, r1
   110d0:	ldr	r1, [r3]
   110d4:	b	11078 <__assert_fail@plt+0x32c>
   110d8:	ldr	r3, [r1, #4]
   110dc:	b	11078 <__assert_fail@plt+0x32c>
   110e0:	push	{r4, sl, fp, lr}
   110e4:	add	fp, sp, #8
   110e8:	mov	r4, r0
   110ec:	ldm	r1, {r0, r2}
   110f0:	cmp	r0, #0
   110f4:	mov	r3, r4
   110f8:	addne	r3, r0, #4
   110fc:	str	r2, [r3]
   11100:	ldm	r1, {r0, r2}
   11104:	cmp	r2, #0
   11108:	addeq	r2, r4, #4
   1110c:	str	r0, [r2]
   11110:	mov	r0, #0
   11114:	str	r0, [r1]
   11118:	str	r0, [r1, #4]
   1111c:	mov	r0, r4
   11120:	bl	11134 <__assert_fail@plt+0x3e8>
   11124:	ldr	r0, [r4, #12]
   11128:	sub	r0, r0, #1
   1112c:	str	r0, [r4, #12]
   11130:	pop	{r4, sl, fp, pc}
   11134:	push	{r4, sl, fp, lr}
   11138:	add	fp, sp, #8
   1113c:	mov	r4, r0
   11140:	ldr	r0, [r0, #8]
   11144:	cmp	r0, #0
   11148:	popeq	{r4, sl, fp, pc}
   1114c:	bl	10bb4 <free@plt>
   11150:	mov	r0, #0
   11154:	str	r0, [r4, #8]
   11158:	pop	{r4, sl, fp, pc}
   1115c:	push	{r4, sl, fp, lr}
   11160:	add	fp, sp, #8
   11164:	mov	r4, r0
   11168:	ldr	r0, [r0, #8]
   1116c:	cmp	r0, #0
   11170:	bne	111b4 <__assert_fail@plt+0x468>
   11174:	ldr	r0, [r4, #12]
   11178:	cmp	r0, #0
   1117c:	beq	111b4 <__assert_fail@plt+0x468>
   11180:	mov	r1, #4
   11184:	bl	123cc <__assert_fail@plt+0x1680>
   11188:	str	r0, [r4, #8]
   1118c:	ldr	r0, [r4]
   11190:	cmp	r0, #0
   11194:	popeq	{r4, sl, fp, pc}
   11198:	mov	r1, #0
   1119c:	ldr	r2, [r4, #8]
   111a0:	str	r0, [r2, r1]
   111a4:	add	r1, r1, #4
   111a8:	ldr	r0, [r0, #4]
   111ac:	cmp	r0, #0
   111b0:	bne	1119c <__assert_fail@plt+0x450>
   111b4:	pop	{r4, sl, fp, pc}
   111b8:	push	{r4, r5, r6, sl, fp, lr}
   111bc:	add	fp, sp, #16
   111c0:	ldr	r6, [r0]
   111c4:	cmp	r6, #0
   111c8:	beq	111f4 <__assert_fail@plt+0x4a8>
   111cc:	mov	r4, r1
   111d0:	mov	r5, r0
   111d4:	mov	r0, r5
   111d8:	mov	r1, r6
   111dc:	bl	110e0 <__assert_fail@plt+0x394>
   111e0:	mov	r0, r6
   111e4:	blx	r4
   111e8:	ldr	r6, [r5]
   111ec:	cmp	r6, #0
   111f0:	bne	111d4 <__assert_fail@plt+0x488>
   111f4:	pop	{r4, r5, r6, sl, fp, pc}
   111f8:	cmp	r0, #2
   111fc:	bxlt	lr
   11200:	movw	r3, #28896	; 0x70e0
   11204:	movt	r3, #2
   11208:	str	r2, [r3]
   1120c:	movw	r2, #28892	; 0x70dc
   11210:	movt	r2, #2
   11214:	str	r1, [r2]
   11218:	sub	r1, r0, #1
   1121c:	mov	r0, #0
   11220:	b	11224 <__assert_fail@plt+0x4d8>
   11224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11228:	add	fp, sp, #28
   1122c:	sub	sp, sp, #4
   11230:	mov	r8, r1
   11234:	mov	r9, r0
   11238:	movw	r7, #28892	; 0x70dc
   1123c:	movt	r7, #2
   11240:	movw	sl, #28896	; 0x70e0
   11244:	movt	sl, #2
   11248:	b	11270 <__assert_fail@plt+0x524>
   1124c:	ldr	r0, [r7]
   11250:	str	r6, [r0, r4, lsl #2]
   11254:	sub	r1, r4, #1
   11258:	cmp	r1, r9
   1125c:	movgt	r0, r9
   11260:	blgt	11224 <__assert_fail@plt+0x4d8>
   11264:	add	r9, r5, #1
   11268:	cmp	r9, r8
   1126c:	bge	11338 <__assert_fail@plt+0x5ec>
   11270:	ldr	r0, [r7]
   11274:	ldr	r6, [r0, r9, lsl #2]
   11278:	cmp	r9, r8
   1127c:	mov	r4, r8
   11280:	mov	r5, r9
   11284:	bge	1124c <__assert_fail@plt+0x500>
   11288:	mov	r5, r9
   1128c:	mov	r4, r8
   11290:	cmp	r5, r4
   11294:	blt	112ac <__assert_fail@plt+0x560>
   11298:	b	112d4 <__assert_fail@plt+0x588>
   1129c:	cmp	r5, r4
   112a0:	bge	1124c <__assert_fail@plt+0x500>
   112a4:	cmp	r5, r4
   112a8:	bge	112d4 <__assert_fail@plt+0x588>
   112ac:	ldr	r0, [r7]
   112b0:	ldr	r1, [r0, r4, lsl #2]
   112b4:	ldr	r2, [sl]
   112b8:	mov	r0, r6
   112bc:	blx	r2
   112c0:	cmn	r0, #1
   112c4:	bgt	112d4 <__assert_fail@plt+0x588>
   112c8:	sub	r4, r4, #1
   112cc:	cmp	r5, r4
   112d0:	blt	112ac <__assert_fail@plt+0x560>
   112d4:	cmp	r5, r4
   112d8:	beq	112ec <__assert_fail@plt+0x5a0>
   112dc:	ldr	r0, [r7]
   112e0:	ldr	r1, [r0, r4, lsl #2]
   112e4:	str	r1, [r0, r5, lsl #2]
   112e8:	add	r5, r5, #1
   112ec:	cmp	r5, r4
   112f0:	bge	1131c <__assert_fail@plt+0x5d0>
   112f4:	ldr	r0, [r7]
   112f8:	ldr	r1, [r0, r5, lsl #2]
   112fc:	ldr	r2, [sl]
   11300:	mov	r0, r6
   11304:	blx	r2
   11308:	cmp	r0, #1
   1130c:	blt	1131c <__assert_fail@plt+0x5d0>
   11310:	add	r5, r5, #1
   11314:	cmp	r4, r5
   11318:	bne	112f4 <__assert_fail@plt+0x5a8>
   1131c:	cmp	r5, r4
   11320:	beq	1129c <__assert_fail@plt+0x550>
   11324:	ldr	r0, [r7]
   11328:	ldr	r1, [r0, r5, lsl #2]
   1132c:	str	r1, [r0, r4, lsl #2]
   11330:	sub	r4, r4, #1
   11334:	b	1129c <__assert_fail@plt+0x550>
   11338:	sub	sp, fp, #28
   1133c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11340:	ldm	r0, {r3, ip}
   11344:	add	r1, r3, r1
   11348:	add	r2, ip, r2
   1134c:	stm	r0, {r1, r2}
   11350:	bx	lr
   11354:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11358:	add	fp, sp, #24
   1135c:	mov	r8, r3
   11360:	mov	r5, r2
   11364:	mov	r7, r1
   11368:	mov	r6, r0
   1136c:	bl	11bf4 <__assert_fail@plt+0xea8>
   11370:	mov	r4, r0
   11374:	cmp	r0, #0
   11378:	bne	113a4 <__assert_fail@plt+0x658>
   1137c:	mov	r0, #1
   11380:	mov	r1, #20
   11384:	bl	123cc <__assert_fail@plt+0x1680>
   11388:	mov	r4, r0
   1138c:	mov	r0, r7
   11390:	bl	10be4 <strdup@plt>
   11394:	str	r0, [r4, #8]
   11398:	mov	r0, r6
   1139c:	mov	r1, r4
   113a0:	bl	11c9c <__assert_fail@plt+0xf50>
   113a4:	add	r0, r4, #12
   113a8:	mov	r1, r5
   113ac:	mov	r2, r8
   113b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   113b4:	b	11340 <__assert_fail@plt+0x5f4>
   113b8:	push	{r4, r5, r6, r7, fp, lr}
   113bc:	add	fp, sp, #16
   113c0:	sub	sp, sp, #8
   113c4:	mov	r6, r1
   113c8:	mov	r5, r0
   113cc:	movw	r1, #26677	; 0x6835
   113d0:	movt	r1, #1
   113d4:	mov	r0, r6
   113d8:	bl	12470 <__assert_fail@plt+0x1724>
   113dc:	mov	r4, r0
   113e0:	bl	11528 <__assert_fail@plt+0x7dc>
   113e4:	cmp	r0, #0
   113e8:	beq	1150c <__assert_fail@plt+0x7c0>
   113ec:	movw	r0, #28900	; 0x70e4
   113f0:	movt	r0, #2
   113f4:	movw	r1, #12822	; 0x3216
   113f8:	movt	r1, #1
   113fc:	mov	r2, #45	; 0x2d
   11400:	bl	10c98 <bcmp@plt>
   11404:	cmp	r0, #0
   11408:	bne	1150c <__assert_fail@plt+0x7c0>
   1140c:	mov	r0, r4
   11410:	bl	11528 <__assert_fail@plt+0x7dc>
   11414:	cmp	r0, #0
   11418:	beq	1150c <__assert_fail@plt+0x7c0>
   1141c:	movw	r0, #28900	; 0x70e4
   11420:	movt	r0, #2
   11424:	movw	r1, #26607	; 0x67ef
   11428:	movt	r1, #1
   1142c:	mov	r2, #48	; 0x30
   11430:	bl	10c98 <bcmp@plt>
   11434:	cmp	r0, #0
   11438:	bne	1150c <__assert_fail@plt+0x7c0>
   1143c:	add	r1, sp, #4
   11440:	mov	r0, r4
   11444:	bl	11550 <__assert_fail@plt+0x804>
   11448:	cmp	r0, #0
   1144c:	beq	1150c <__assert_fail@plt+0x7c0>
   11450:	mov	r1, sp
   11454:	mov	r0, r4
   11458:	bl	11550 <__assert_fail@plt+0x804>
   1145c:	cmp	r0, #0
   11460:	beq	1150c <__assert_fail@plt+0x7c0>
   11464:	mov	r0, r4
   11468:	bl	11528 <__assert_fail@plt+0x7dc>
   1146c:	cmp	r0, #0
   11470:	beq	1150c <__assert_fail@plt+0x7c0>
   11474:	mov	r0, r4
   11478:	bl	11528 <__assert_fail@plt+0x7dc>
   1147c:	cmp	r0, #0
   11480:	beq	1150c <__assert_fail@plt+0x7c0>
   11484:	ldr	r2, [sp]
   11488:	ldr	r1, [sp, #4]
   1148c:	mov	r0, r5
   11490:	bl	11340 <__assert_fail@plt+0x5f4>
   11494:	add	r1, r5, #8
   11498:	mov	r0, r4
   1149c:	bl	11598 <__assert_fail@plt+0x84c>
   114a0:	mov	r7, r0
   114a4:	add	r1, r5, #416	; 0x1a0
   114a8:	mov	r0, r4
   114ac:	bl	11598 <__assert_fail@plt+0x84c>
   114b0:	mov	r6, r0
   114b4:	add	r1, r5, #824	; 0x338
   114b8:	mov	r0, r4
   114bc:	bl	11598 <__assert_fail@plt+0x84c>
   114c0:	ldr	r0, [sp, #4]
   114c4:	cmp	r0, #1
   114c8:	blt	114fc <__assert_fail@plt+0x7b0>
   114cc:	add	r1, r5, #920	; 0x398
   114d0:	mov	r0, r4
   114d4:	bl	11598 <__assert_fail@plt+0x84c>
   114d8:	cmp	r7, #1
   114dc:	addge	r1, r5, #992	; 0x3e0
   114e0:	movge	r0, r4
   114e4:	blge	11670 <__assert_fail@plt+0x924>
   114e8:	cmp	r6, #1
   114ec:	movwge	r0, #9048	; 0x2358
   114f0:	addge	r1, r5, r0
   114f4:	movge	r0, r4
   114f8:	blge	11670 <__assert_fail@plt+0x924>
   114fc:	mov	r0, r4
   11500:	bl	124e8 <__assert_fail@plt+0x179c>
   11504:	sub	sp, fp, #16
   11508:	pop	{r4, r5, r6, r7, fp, pc}
   1150c:	movw	r1, #12888	; 0x3258
   11510:	movt	r1, #1
   11514:	cmp	r6, #0
   11518:	movne	r1, r6
   1151c:	movw	r0, #12870	; 0x3246
   11520:	movt	r0, #1
   11524:	bl	127c0 <error@@Base+0x40>
   11528:	push	{fp, lr}
   1152c:	mov	fp, sp
   11530:	mov	r2, r0
   11534:	movw	r0, #28900	; 0x70e4
   11538:	movt	r0, #2
   1153c:	mov	r1, #99	; 0x63
   11540:	bl	10bcc <fgets@plt>
   11544:	cmp	r0, #0
   11548:	movwne	r0, #1
   1154c:	pop	{fp, pc}
   11550:	push	{r4, sl, fp, lr}
   11554:	add	fp, sp, #8
   11558:	mov	r4, r1
   1155c:	bl	11528 <__assert_fail@plt+0x7dc>
   11560:	cmp	r0, #0
   11564:	beq	11590 <__assert_fail@plt+0x844>
   11568:	movw	r0, #28900	; 0x70e4
   1156c:	movt	r0, #2
   11570:	movw	r1, #12995	; 0x32c3
   11574:	movt	r1, #1
   11578:	mov	r2, r4
   1157c:	bl	10cc8 <__isoc99_sscanf@plt>
   11580:	sub	r0, r0, #1
   11584:	clz	r0, r0
   11588:	lsr	r0, r0, #5
   1158c:	pop	{r4, sl, fp, pc}
   11590:	mov	r0, #0
   11594:	pop	{r4, sl, fp, pc}
   11598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1159c:	add	fp, sp, #28
   115a0:	sub	sp, sp, #12
   115a4:	mov	r4, r1
   115a8:	mov	r6, r0
   115ac:	bl	11528 <__assert_fail@plt+0x7dc>
   115b0:	mov	r5, #0
   115b4:	cmp	r0, #0
   115b8:	beq	11664 <__assert_fail@plt+0x918>
   115bc:	mov	r0, r6
   115c0:	bl	11528 <__assert_fail@plt+0x7dc>
   115c4:	cmp	r0, #0
   115c8:	beq	11664 <__assert_fail@plt+0x918>
   115cc:	add	r1, sp, #8
   115d0:	add	r2, sp, #4
   115d4:	mov	r0, r6
   115d8:	bl	11aec <__assert_fail@plt+0xda0>
   115dc:	cmp	r0, #0
   115e0:	beq	11664 <__assert_fail@plt+0x918>
   115e4:	mov	r5, #0
   115e8:	movw	r0, #28900	; 0x70e4
   115ec:	movt	r0, #2
   115f0:	add	r7, r0, #29
   115f4:	movw	r8, #12745	; 0x31c9
   115f8:	movt	r8, #1
   115fc:	add	r9, sp, #8
   11600:	add	sl, sp, #4
   11604:	b	11630 <__assert_fail@plt+0x8e4>
   11608:	add	r0, r4, r0, lsl #3
   1160c:	ldr	r2, [sp, #4]
   11610:	ldr	r1, [sp, #8]
   11614:	bl	11340 <__assert_fail@plt+0x5f4>
   11618:	mov	r0, r6
   1161c:	mov	r1, r9
   11620:	mov	r2, sl
   11624:	bl	11aec <__assert_fail@plt+0xda0>
   11628:	cmp	r0, #0
   1162c:	beq	11664 <__assert_fail@plt+0x918>
   11630:	mov	r0, r7
   11634:	bl	10d04 <atoi@plt>
   11638:	cmp	r0, #0
   1163c:	bne	11608 <__assert_fail@plt+0x8bc>
   11640:	mov	r0, r7
   11644:	mov	r1, r8
   11648:	mov	r2, #8
   1164c:	bl	10c98 <bcmp@plt>
   11650:	ldr	r1, [sp, #8]
   11654:	cmp	r0, #0
   11658:	moveq	r5, r1
   1165c:	movwne	r0, #11
   11660:	b	11608 <__assert_fail@plt+0x8bc>
   11664:	mov	r0, r5
   11668:	sub	sp, fp, #28
   1166c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11674:	add	fp, sp, #28
   11678:	sub	sp, sp, #12
   1167c:	mov	r4, r1
   11680:	mov	r5, r0
   11684:	bl	11528 <__assert_fail@plt+0x7dc>
   11688:	cmp	r0, #0
   1168c:	beq	1170c <__assert_fail@plt+0x9c0>
   11690:	mov	r0, r5
   11694:	bl	11528 <__assert_fail@plt+0x7dc>
   11698:	cmp	r0, #0
   1169c:	beq	1170c <__assert_fail@plt+0x9c0>
   116a0:	add	r1, sp, #8
   116a4:	add	r2, sp, #4
   116a8:	mov	r0, r5
   116ac:	bl	11aec <__assert_fail@plt+0xda0>
   116b0:	cmp	r0, #0
   116b4:	beq	1170c <__assert_fail@plt+0x9c0>
   116b8:	movw	r6, #28900	; 0x70e4
   116bc:	movt	r6, #2
   116c0:	mov	sl, #0
   116c4:	add	r7, r6, #29
   116c8:	add	r8, sp, #8
   116cc:	add	r9, sp, #4
   116d0:	mov	r0, r6
   116d4:	bl	10cb0 <strlen@plt>
   116d8:	add	r0, r0, r6
   116dc:	strb	sl, [r0, #-1]
   116e0:	ldr	r2, [sp, #8]
   116e4:	ldr	r3, [sp, #4]
   116e8:	mov	r0, r4
   116ec:	mov	r1, r7
   116f0:	bl	11354 <__assert_fail@plt+0x608>
   116f4:	mov	r0, r5
   116f8:	mov	r1, r8
   116fc:	mov	r2, r9
   11700:	bl	11aec <__assert_fail@plt+0xda0>
   11704:	cmp	r0, #0
   11708:	bne	116d0 <__assert_fail@plt+0x984>
   1170c:	sub	sp, fp, #28
   11710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11714:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11718:	add	fp, sp, #24
   1171c:	sub	sp, sp, #8
   11720:	mov	r2, r1
   11724:	mov	r5, r0
   11728:	movw	r1, #12894	; 0x325e
   1172c:	movt	r1, #1
   11730:	mov	r0, r2
   11734:	bl	12470 <__assert_fail@plt+0x1724>
   11738:	mov	r4, r0
   1173c:	movw	r1, #12896	; 0x3260
   11740:	movt	r1, #1
   11744:	movw	r2, #12822	; 0x3216
   11748:	movt	r2, #1
   1174c:	movw	r3, #26607	; 0x67ef
   11750:	movt	r3, #1
   11754:	bl	10cbc <fprintf@plt>
   11758:	ldr	r2, [r5]
   1175c:	movw	r1, #12901	; 0x3265
   11760:	movt	r1, #1
   11764:	mov	r0, r4
   11768:	bl	10cbc <fprintf@plt>
   1176c:	ldr	r2, [r5, #4]
   11770:	movw	r1, #12915	; 0x3273
   11774:	movt	r1, #1
   11778:	mov	r0, r4
   1177c:	bl	10cbc <fprintf@plt>
   11780:	mov	r0, r4
   11784:	mov	r1, r5
   11788:	bl	11890 <__assert_fail@plt+0xb44>
   1178c:	movw	r0, #12937	; 0x3289
   11790:	movt	r0, #1
   11794:	mov	r7, #1
   11798:	mov	r1, #12
   1179c:	mov	r2, #1
   117a0:	mov	r3, r4
   117a4:	bl	10c20 <fwrite@plt>
   117a8:	mov	r8, #0
   117ac:	str	r8, [sp]
   117b0:	str	r7, [sp, #4]
   117b4:	add	r1, r5, #8
   117b8:	movw	r3, #12950	; 0x3296
   117bc:	movt	r3, #1
   117c0:	mov	r0, r4
   117c4:	mov	r2, #50	; 0x32
   117c8:	bl	118f8 <__assert_fail@plt+0xbac>
   117cc:	str	r8, [sp]
   117d0:	str	r7, [sp, #4]
   117d4:	add	r6, r5, #416	; 0x1a0
   117d8:	movw	r3, #12969	; 0x32a9
   117dc:	movt	r3, #1
   117e0:	mov	r0, r4
   117e4:	mov	r1, r6
   117e8:	mov	r2, #50	; 0x32
   117ec:	bl	118f8 <__assert_fail@plt+0xbac>
   117f0:	str	r7, [sp]
   117f4:	str	r7, [sp, #4]
   117f8:	add	r1, r5, #824	; 0x338
   117fc:	movw	r3, #12960	; 0x32a0
   11800:	movt	r3, #1
   11804:	mov	r0, r4
   11808:	mov	r2, #10
   1180c:	bl	118f8 <__assert_fail@plt+0xbac>
   11810:	ldr	r0, [r5]
   11814:	cmp	r0, #1
   11818:	blt	11880 <__assert_fail@plt+0xb34>
   1181c:	str	r8, [sp]
   11820:	str	r8, [sp, #4]
   11824:	add	r1, r5, #920	; 0x398
   11828:	movw	r3, #12983	; 0x32b7
   1182c:	movt	r3, #1
   11830:	mov	r0, r4
   11834:	mov	r2, #8
   11838:	bl	118f8 <__assert_fail@plt+0xbac>
   1183c:	ldr	r0, [r5, #8]
   11840:	cmp	r0, #1
   11844:	blt	1185c <__assert_fail@plt+0xb10>
   11848:	add	r1, r5, #992	; 0x3e0
   1184c:	movw	r2, #12950	; 0x3296
   11850:	movt	r2, #1
   11854:	mov	r0, r4
   11858:	bl	11a34 <__assert_fail@plt+0xce8>
   1185c:	ldr	r0, [r6]
   11860:	cmp	r0, #1
   11864:	blt	11880 <__assert_fail@plt+0xb34>
   11868:	movw	r0, #9048	; 0x2358
   1186c:	add	r1, r5, r0
   11870:	movw	r2, #12969	; 0x32a9
   11874:	movt	r2, #1
   11878:	mov	r0, r4
   1187c:	bl	11a34 <__assert_fail@plt+0xce8>
   11880:	mov	r0, r4
   11884:	sub	sp, fp, #24
   11888:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1188c:	b	124e8 <__assert_fail@plt+0x179c>
   11890:	mov	ip, r0
   11894:	ldr	r0, [r1]
   11898:	cmp	r0, #0
   1189c:	beq	118d8 <__assert_fail@plt+0xb8c>
   118a0:	ldr	r1, [r1, #4]
   118a4:	sub	r1, r0, r1
   118a8:	vldr	d16, [pc, #64]	; 118f0 <__assert_fail@plt+0xba4>
   118ac:	vmov	s0, r1
   118b0:	vmov	s2, r0
   118b4:	vcvt.f64.s32	d17, s0
   118b8:	vcvt.f64.s32	d18, s2
   118bc:	vmul.f64	d16, d17, d16
   118c0:	vdiv.f64	d16, d16, d18
   118c4:	vmov	r2, r3, d16
   118c8:	movw	r1, #13008	; 0x32d0
   118cc:	movt	r1, #1
   118d0:	mov	r0, ip
   118d4:	b	10cbc <fprintf@plt>
   118d8:	movw	r0, #12999	; 0x32c7
   118dc:	movt	r0, #1
   118e0:	mov	r1, #8
   118e4:	mov	r2, #1
   118e8:	mov	r3, ip
   118ec:	b	10c20 <fwrite@plt>
   118f0:	andeq	r0, r0, r0
   118f4:	subsmi	r0, r9, r0
   118f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118fc:	add	fp, sp, #28
   11900:	sub	sp, sp, #4
   11904:	mov	r7, r2
   11908:	mov	r5, r1
   1190c:	mov	r4, r0
   11910:	movw	r1, #13014	; 0x32d6
   11914:	movt	r1, #1
   11918:	mov	r2, r3
   1191c:	bl	10cbc <fprintf@plt>
   11920:	mov	r0, r4
   11924:	mov	r1, #0
   11928:	bl	11b3c <__assert_fail@plt+0xdf0>
   1192c:	ldrb	sl, [fp, #8]
   11930:	movw	r0, #13019	; 0x32db
   11934:	movt	r0, #1
   11938:	movw	r2, #13026	; 0x32e2
   1193c:	movt	r2, #1
   11940:	cmp	sl, #0
   11944:	movne	r2, r0
   11948:	movw	r1, #13015	; 0x32d7
   1194c:	movt	r1, #1
   11950:	mov	r0, r4
   11954:	bl	10cbc <fprintf@plt>
   11958:	sxth	r6, r7
   1195c:	lsl	r0, r7, #16
   11960:	ldr	r1, [fp, #12]
   11964:	str	r1, [sp]
   11968:	cmp	r0, #65536	; 0x10000
   1196c:	blt	119c0 <__assert_fail@plt+0xc74>
   11970:	mov	r7, #1
   11974:	movw	r8, #13033	; 0x32e9
   11978:	movt	r8, #1
   1197c:	mov	r9, #1
   11980:	b	11994 <__assert_fail@plt+0xc48>
   11984:	add	r9, r9, #1
   11988:	sxth	r7, r9
   1198c:	cmp	r6, r7
   11990:	blt	119c0 <__assert_fail@plt+0xc74>
   11994:	mov	r1, r5
   11998:	ldr	r0, [r1, r7, lsl #3]!
   1199c:	cmp	r0, #1
   119a0:	blt	11984 <__assert_fail@plt+0xc38>
   119a4:	mov	r0, r4
   119a8:	bl	11b3c <__assert_fail@plt+0xdf0>
   119ac:	mov	r0, r4
   119b0:	mov	r1, r8
   119b4:	mov	r2, r7
   119b8:	bl	10cbc <fprintf@plt>
   119bc:	b	11984 <__assert_fail@plt+0xc38>
   119c0:	cmp	sl, #0
   119c4:	beq	119f4 <__assert_fail@plt+0xca8>
   119c8:	add	r1, r5, r6, lsl #3
   119cc:	ldr	r0, [r1, #8]!
   119d0:	cmp	r0, #1
   119d4:	blt	119f4 <__assert_fail@plt+0xca8>
   119d8:	mov	r0, r4
   119dc:	bl	11b3c <__assert_fail@plt+0xdf0>
   119e0:	movw	r1, #13042	; 0x32f2
   119e4:	movt	r1, #1
   119e8:	mov	r0, r4
   119ec:	mov	r2, r6
   119f0:	bl	10cbc <fprintf@plt>
   119f4:	ldr	r0, [sp]
   119f8:	tst	r0, #255	; 0xff
   119fc:	beq	11a2c <__assert_fail@plt+0xce0>
   11a00:	mov	r0, r4
   11a04:	mov	r1, r5
   11a08:	bl	11b3c <__assert_fail@plt+0xdf0>
   11a0c:	movw	r0, #12745	; 0x31c9
   11a10:	movt	r0, #1
   11a14:	mov	r1, #7
   11a18:	mov	r2, #1
   11a1c:	mov	r3, r4
   11a20:	sub	sp, fp, #28
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a28:	b	10c20 <fwrite@plt>
   11a2c:	sub	sp, fp, #28
   11a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a34:	push	{r4, r5, r6, r7, fp, lr}
   11a38:	add	fp, sp, #16
   11a3c:	mov	r6, r2
   11a40:	mov	r4, r1
   11a44:	mov	r5, r0
   11a48:	mov	r0, r1
   11a4c:	bl	11d48 <__assert_fail@plt+0xffc>
   11a50:	movw	r0, #8048	; 0x1f70
   11a54:	ldr	r1, [r4, r0]!
   11a58:	ldr	r0, [r4, #4]
   11a5c:	movw	r2, #7084	; 0x1bac
   11a60:	movt	r2, #1
   11a64:	bl	111f8 <__assert_fail@plt+0x4ac>
   11a68:	movw	r1, #13014	; 0x32d6
   11a6c:	movt	r1, #1
   11a70:	mov	r0, r5
   11a74:	mov	r2, r6
   11a78:	bl	10cbc <fprintf@plt>
   11a7c:	mov	r7, #0
   11a80:	mov	r0, r5
   11a84:	mov	r1, #0
   11a88:	bl	11b3c <__assert_fail@plt+0xdf0>
   11a8c:	mov	r0, #10
   11a90:	mov	r1, r5
   11a94:	bl	10cec <fputc@plt>
   11a98:	ldr	r0, [r4, #4]
   11a9c:	cmp	r0, #1
   11aa0:	blt	11ae8 <__assert_fail@plt+0xd9c>
   11aa4:	movw	r6, #13015	; 0x32d7
   11aa8:	movt	r6, #1
   11aac:	ldr	r0, [r4]
   11ab0:	ldr	r0, [r0, r7, lsl #2]
   11ab4:	add	r1, r0, #12
   11ab8:	mov	r0, r5
   11abc:	bl	11b3c <__assert_fail@plt+0xdf0>
   11ac0:	ldr	r0, [r4]
   11ac4:	ldr	r0, [r0, r7, lsl #2]
   11ac8:	ldr	r2, [r0, #8]
   11acc:	mov	r0, r5
   11ad0:	mov	r1, r6
   11ad4:	bl	10cbc <fprintf@plt>
   11ad8:	add	r7, r7, #1
   11adc:	ldr	r0, [r4, #4]
   11ae0:	cmp	r7, r0
   11ae4:	blt	11aac <__assert_fail@plt+0xd60>
   11ae8:	pop	{r4, r5, r6, r7, fp, pc}
   11aec:	push	{r4, r5, fp, lr}
   11af0:	add	fp, sp, #8
   11af4:	mov	r4, r2
   11af8:	mov	r5, r1
   11afc:	bl	11528 <__assert_fail@plt+0x7dc>
   11b00:	cmp	r0, #0
   11b04:	beq	11b34 <__assert_fail@plt+0xde8>
   11b08:	movw	r0, #28900	; 0x70e4
   11b0c:	movt	r0, #2
   11b10:	movw	r1, #12991	; 0x32bf
   11b14:	movt	r1, #1
   11b18:	mov	r2, r5
   11b1c:	mov	r3, r4
   11b20:	bl	10cc8 <__isoc99_sscanf@plt>
   11b24:	sub	r0, r0, #2
   11b28:	clz	r0, r0
   11b2c:	lsr	r0, r0, #5
   11b30:	pop	{r4, r5, fp, pc}
   11b34:	mov	r0, #0
   11b38:	pop	{r4, r5, fp, pc}
   11b3c:	push	{r4, r5, fp, lr}
   11b40:	add	fp, sp, #8
   11b44:	mov	r4, r0
   11b48:	cmp	r1, #0
   11b4c:	beq	11b78 <__assert_fail@plt+0xe2c>
   11b50:	mov	r5, r1
   11b54:	ldm	r1, {r2, r3}
   11b58:	movw	r1, #13051	; 0x32fb
   11b5c:	movt	r1, #1
   11b60:	mov	r0, r4
   11b64:	bl	10cbc <fprintf@plt>
   11b68:	mov	r0, r4
   11b6c:	mov	r1, r5
   11b70:	bl	11890 <__assert_fail@plt+0xb44>
   11b74:	b	11b90 <__assert_fail@plt+0xe44>
   11b78:	movw	r0, #13062	; 0x3306
   11b7c:	movt	r0, #1
   11b80:	mov	r1, #26
   11b84:	mov	r2, #1
   11b88:	mov	r3, r4
   11b8c:	bl	10c20 <fwrite@plt>
   11b90:	movw	r0, #13089	; 0x3321
   11b94:	movt	r0, #1
   11b98:	mov	r1, #3
   11b9c:	mov	r2, #1
   11ba0:	mov	r3, r4
   11ba4:	pop	{r4, r5, fp, lr}
   11ba8:	b	10c20 <fwrite@plt>
   11bac:	ldr	r1, [r1, #8]
   11bb0:	ldr	r0, [r0, #8]
   11bb4:	b	123ec <__assert_fail@plt+0x16a0>
   11bb8:	push	{r4, r5, r6, sl, fp, lr}
   11bbc:	add	fp, sp, #16
   11bc0:	mov	r4, r0
   11bc4:	movw	r0, #8048	; 0x1f70
   11bc8:	add	r5, r4, r0
   11bcc:	movw	r6, #503	; 0x1f7
   11bd0:	mov	r0, r4
   11bd4:	bl	1105c <__assert_fail@plt+0x310>
   11bd8:	subs	r6, r6, #1
   11bdc:	add	r4, r4, #16
   11be0:	bne	11bd0 <__assert_fail@plt+0xe84>
   11be4:	mov	r0, #0
   11be8:	str	r0, [r5]
   11bec:	str	r0, [r5, #4]
   11bf0:	pop	{r4, r5, r6, sl, fp, pc}
   11bf4:	push	{r4, r5, r6, sl, fp, lr}
   11bf8:	add	fp, sp, #16
   11bfc:	mov	r5, r1
   11c00:	mov	r4, r0
   11c04:	mov	r0, r1
   11c08:	bl	11c50 <__assert_fail@plt+0xf04>
   11c0c:	ldr	r6, [r4, r0, lsl #4]
   11c10:	mov	r4, #0
   11c14:	cmp	r6, #0
   11c18:	beq	11c3c <__assert_fail@plt+0xef0>
   11c1c:	ldr	r1, [r6, #8]
   11c20:	mov	r0, r5
   11c24:	bl	10b90 <strcmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	beq	11c44 <__assert_fail@plt+0xef8>
   11c30:	ldr	r6, [r6, #4]
   11c34:	cmp	r6, #0
   11c38:	bne	11c1c <__assert_fail@plt+0xed0>
   11c3c:	mov	r0, r4
   11c40:	pop	{r4, r5, r6, sl, fp, pc}
   11c44:	mov	r4, r6
   11c48:	mov	r0, r4
   11c4c:	pop	{r4, r5, r6, sl, fp, pc}
   11c50:	ldrb	r1, [r0]
   11c54:	cmp	r1, #0
   11c58:	moveq	r0, #0
   11c5c:	sxtheq	r0, r0
   11c60:	bxeq	lr
   11c64:	add	r2, r0, #1
   11c68:	mov	r0, #0
   11c6c:	uxtab	r0, r0, r1
   11c70:	ldrb	r1, [r2], #1
   11c74:	cmp	r1, #0
   11c78:	bne	11c6c <__assert_fail@plt+0xf20>
   11c7c:	movw	r1, #20065	; 0x4e61
   11c80:	movt	r1, #33354	; 0x824a
   11c84:	umull	r1, r2, r0, r1
   11c88:	lsr	r1, r2, #8
   11c8c:	movw	r2, #503	; 0x1f7
   11c90:	mls	r0, r1, r2, r0
   11c94:	sxth	r0, r0
   11c98:	bx	lr
   11c9c:	push	{r4, r5, fp, lr}
   11ca0:	add	fp, sp, #8
   11ca4:	mov	r4, r1
   11ca8:	mov	r5, r0
   11cac:	ldr	r0, [r1, #8]
   11cb0:	bl	11c50 <__assert_fail@plt+0xf04>
   11cb4:	add	r0, r5, r0, lsl #4
   11cb8:	mov	r1, r4
   11cbc:	bl	11068 <__assert_fail@plt+0x31c>
   11cc0:	mov	r0, r5
   11cc4:	bl	11cdc <__assert_fail@plt+0xf90>
   11cc8:	movw	r0, #8052	; 0x1f74
   11ccc:	ldr	r0, [r5, r0]!
   11cd0:	add	r0, r0, #1
   11cd4:	str	r0, [r5]
   11cd8:	pop	{r4, r5, fp, pc}
   11cdc:	push	{r4, sl, fp, lr}
   11ce0:	add	fp, sp, #8
   11ce4:	mov	r4, r0
   11ce8:	movw	r0, #8048	; 0x1f70
   11cec:	ldr	r0, [r4, r0]!
   11cf0:	cmp	r0, #0
   11cf4:	popeq	{r4, sl, fp, pc}
   11cf8:	bl	10bb4 <free@plt>
   11cfc:	mov	r0, #0
   11d00:	str	r0, [r4]
   11d04:	pop	{r4, sl, fp, pc}
   11d08:	push	{r4, r5, fp, lr}
   11d0c:	add	fp, sp, #8
   11d10:	mov	r4, r1
   11d14:	mov	r5, r0
   11d18:	ldr	r0, [r1, #8]
   11d1c:	bl	11c50 <__assert_fail@plt+0xf04>
   11d20:	add	r0, r5, r0, lsl #4
   11d24:	mov	r1, r4
   11d28:	bl	110e0 <__assert_fail@plt+0x394>
   11d2c:	mov	r0, r5
   11d30:	bl	11cdc <__assert_fail@plt+0xf90>
   11d34:	movw	r0, #8052	; 0x1f74
   11d38:	ldr	r0, [r5, r0]!
   11d3c:	sub	r0, r0, #1
   11d40:	str	r0, [r5]
   11d44:	pop	{r4, r5, fp, pc}
   11d48:	push	{r4, r5, fp, lr}
   11d4c:	add	fp, sp, #8
   11d50:	mov	r4, r0
   11d54:	movw	r0, #8048	; 0x1f70
   11d58:	mov	r5, r4
   11d5c:	ldr	r0, [r5, r0]!
   11d60:	cmp	r0, #0
   11d64:	bne	11dc4 <__assert_fail@plt+0x1078>
   11d68:	ldr	r0, [r5, #4]
   11d6c:	cmp	r0, #0
   11d70:	popeq	{r4, r5, fp, pc}
   11d74:	mov	r1, #4
   11d78:	bl	123cc <__assert_fail@plt+0x1680>
   11d7c:	str	r0, [r5]
   11d80:	mov	r0, #0
   11d84:	movw	ip, #503	; 0x1f7
   11d88:	mov	r2, #0
   11d8c:	b	11d9c <__assert_fail@plt+0x1050>
   11d90:	add	r2, r2, #1
   11d94:	cmp	r2, ip
   11d98:	beq	11dc4 <__assert_fail@plt+0x1078>
   11d9c:	ldr	r3, [r4, r2, lsl #4]
   11da0:	cmp	r3, #0
   11da4:	beq	11d90 <__assert_fail@plt+0x1044>
   11da8:	ldr	r1, [r5]
   11dac:	str	r3, [r1, r0, lsl #2]
   11db0:	add	r0, r0, #1
   11db4:	ldr	r3, [r3, #4]
   11db8:	cmp	r3, #0
   11dbc:	bne	11da8 <__assert_fail@plt+0x105c>
   11dc0:	b	11d90 <__assert_fail@plt+0x1044>
   11dc4:	pop	{r4, r5, fp, pc}
   11dc8:	push	{r4, r5, r6, r7, fp, lr}
   11dcc:	add	fp, sp, #16
   11dd0:	mov	r5, r1
   11dd4:	mov	r4, r0
   11dd8:	mov	r6, #0
   11ddc:	movw	r7, #8048	; 0x1f70
   11de0:	add	r0, r4, r6
   11de4:	mov	r1, r5
   11de8:	bl	111b8 <__assert_fail@plt+0x46c>
   11dec:	add	r6, r6, #16
   11df0:	cmp	r6, r7
   11df4:	bne	11de0 <__assert_fail@plt+0x1094>
   11df8:	mov	r0, r4
   11dfc:	bl	11cdc <__assert_fail@plt+0xf90>
   11e00:	movw	r0, #8052	; 0x1f74
   11e04:	mov	r1, #0
   11e08:	str	r1, [r4, r0]
   11e0c:	pop	{r4, r5, r6, r7, fp, pc}
   11e10:	push	{r4, r5, r6, sl, fp, lr}
   11e14:	add	fp, sp, #16
   11e18:	mov	r4, r0
   11e1c:	ldr	r5, [r1]
   11e20:	mov	r0, r5
   11e24:	bl	11e6c <__assert_fail@plt+0x1120>
   11e28:	cmp	r0, #0
   11e2c:	beq	11e68 <__assert_fail@plt+0x111c>
   11e30:	mov	r6, r0
   11e34:	ldr	r0, [r5, #12]
   11e38:	bl	120c0 <__assert_fail@plt+0x1374>
   11e3c:	cmp	r0, #0
   11e40:	movne	r0, r4
   11e44:	movne	r1, r5
   11e48:	movne	r2, r6
   11e4c:	blne	120ec <__assert_fail@plt+0x13a0>
   11e50:	ldr	r5, [r6, #4]
   11e54:	mov	r0, r5
   11e58:	bl	11e6c <__assert_fail@plt+0x1120>
   11e5c:	mov	r6, r0
   11e60:	cmp	r0, #0
   11e64:	bne	11e34 <__assert_fail@plt+0x10e8>
   11e68:	pop	{r4, r5, r6, sl, fp, pc}
   11e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e70:	add	fp, sp, #28
   11e74:	sub	sp, sp, #20
   11e78:	str	r0, [sp, #8]
   11e7c:	cmp	r0, #0
   11e80:	beq	11eac <__assert_fail@plt+0x1160>
   11e84:	ldr	r0, [sp, #8]
   11e88:	cmp	r0, #0
   11e8c:	beq	11eb8 <__assert_fail@plt+0x116c>
   11e90:	mov	r5, #17
   11e94:	add	r4, sp, #4
   11e98:	mov	sl, #1
   11e9c:	mov	r8, #13312	; 0x3400
   11ea0:	movw	r9, #33664	; 0x8380
   11ea4:	movt	r9, #1
   11ea8:	b	11ed4 <__assert_fail@plt+0x1188>
   11eac:	mov	r0, #0
   11eb0:	sub	sp, fp, #28
   11eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb8:	add	r4, sp, #4
   11ebc:	b	120b0 <__assert_fail@plt+0x1364>
   11ec0:	cmp	r0, #8
   11ec4:	bne	11f9c <__assert_fail@plt+0x1250>
   11ec8:	ldr	r0, [r4, #4]
   11ecc:	cmp	r0, #0
   11ed0:	beq	120b0 <__assert_fail@plt+0x1364>
   11ed4:	mov	r7, r5
   11ed8:	mov	r0, r4
   11edc:	bl	12178 <__assert_fail@plt+0x142c>
   11ee0:	mov	r4, r0
   11ee4:	bl	121cc <__assert_fail@plt+0x1480>
   11ee8:	mov	r5, r0
   11eec:	mov	r0, r4
   11ef0:	bl	12178 <__assert_fail@plt+0x142c>
   11ef4:	bl	121cc <__assert_fail@plt+0x1480>
   11ef8:	mov	r6, r0
   11efc:	mov	r0, r4
   11f00:	bl	121e0 <__assert_fail@plt+0x1494>
   11f04:	bl	121cc <__assert_fail@plt+0x1480>
   11f08:	cmp	r5, #1
   11f0c:	cmpeq	r6, #2
   11f10:	beq	11ec8 <__assert_fail@plt+0x117c>
   11f14:	sub	r1, r5, #1
   11f18:	cmp	r1, #3
   11f1c:	subcs	r1, r6, #1
   11f20:	cmpcs	r1, #3
   11f24:	bcc	120b0 <__assert_fail@plt+0x1364>
   11f28:	orr	r1, r6, #1
   11f2c:	orr	r2, r5, #1
   11f30:	cmp	r2, #9
   11f34:	cmpeq	r1, #9
   11f38:	beq	11ec8 <__assert_fail@plt+0x117c>
   11f3c:	cmp	r2, #9
   11f40:	bne	11f60 <__assert_fail@plt+0x1214>
   11f44:	cmp	r6, #13
   11f48:	bhi	11f60 <__assert_fail@plt+0x1214>
   11f4c:	tst	r8, sl, lsl r6
   11f50:	beq	11f60 <__assert_fail@plt+0x1214>
   11f54:	orr	r3, r0, #1
   11f58:	cmp	r3, #9
   11f5c:	beq	11ec8 <__assert_fail@plt+0x117c>
   11f60:	orr	r3, r7, #1
   11f64:	cmp	r3, #9
   11f68:	bne	11f84 <__assert_fail@plt+0x1238>
   11f6c:	cmp	r5, #13
   11f70:	bhi	11f84 <__assert_fail@plt+0x1238>
   11f74:	tst	r8, sl, lsl r5
   11f78:	beq	11f84 <__assert_fail@plt+0x1238>
   11f7c:	cmp	r1, #9
   11f80:	beq	11ec8 <__assert_fail@plt+0x117c>
   11f84:	cmp	r5, #8
   11f88:	cmpeq	r6, #10
   11f8c:	beq	11ec8 <__assert_fail@plt+0x117c>
   11f90:	cmp	r5, #8
   11f94:	cmpeq	r6, #11
   11f98:	beq	11ec0 <__assert_fail@plt+0x1174>
   11f9c:	cmp	r7, #8
   11fa0:	cmpeq	r5, #11
   11fa4:	beq	12040 <__assert_fail@plt+0x12f4>
   11fa8:	sub	r3, r5, #15
   11fac:	clz	r3, r3
   11fb0:	lsr	lr, r3, #5
   11fb4:	sub	r2, r2, #9
   11fb8:	clz	r2, r2
   11fbc:	lsr	ip, r2, #5
   11fc0:	orr	r2, lr, ip
   11fc4:	sub	r3, r6, #15
   11fc8:	clz	r3, r3
   11fcc:	lsr	r3, r3, #5
   11fd0:	tst	r2, r3
   11fd4:	subeq	r1, r1, #9
   11fd8:	clzeq	r1, r1
   11fdc:	lsreq	r1, r1, #5
   11fe0:	andseq	r1, lr, r1
   11fe4:	bne	11ec8 <__assert_fail@plt+0x117c>
   11fe8:	cmp	r7, #15
   11fec:	bne	12010 <__assert_fail@plt+0x12c4>
   11ff0:	subs	r1, r5, #10
   11ff4:	movwne	r1, #1
   11ff8:	orr	r2, r5, #2
   11ffc:	subs	r2, r2, #14
   12000:	movwne	r2, #1
   12004:	tst	r1, r2
   12008:	cmpeq	r6, #15
   1200c:	beq	11ec8 <__assert_fail@plt+0x117c>
   12010:	cmp	r5, #15
   12014:	bne	1204c <__assert_fail@plt+0x1300>
   12018:	subs	r1, r6, #10
   1201c:	movwne	r1, #1
   12020:	orr	r2, r6, #2
   12024:	subs	r2, r2, #14
   12028:	movwne	r2, #1
   1202c:	tst	r1, r2
   12030:	bne	12058 <__assert_fail@plt+0x130c>
   12034:	cmp	r0, #15
   12038:	beq	11ec8 <__assert_fail@plt+0x117c>
   1203c:	b	12058 <__assert_fail@plt+0x130c>
   12040:	cmp	r6, #8
   12044:	beq	11ec8 <__assert_fail@plt+0x117c>
   12048:	b	11fa8 <__assert_fail@plt+0x125c>
   1204c:	cmp	r5, #7
   12050:	cmpeq	r6, #7
   12054:	beq	11ec8 <__assert_fail@plt+0x117c>
   12058:	cmp	r6, #16
   1205c:	bne	12088 <__assert_fail@plt+0x133c>
   12060:	orr	r0, r5, #8
   12064:	sub	r0, r0, #15
   12068:	clz	r0, r0
   1206c:	lsr	r0, r0, #5
   12070:	orr	r0, r0, ip
   12074:	sub	r1, r5, #16
   12078:	clz	r1, r1
   1207c:	lsr	r1, r1, #5
   12080:	orrs	r0, r1, r0
   12084:	bne	11ec8 <__assert_fail@plt+0x117c>
   12088:	cmp	r5, #16
   1208c:	bne	120a4 <__assert_fail@plt+0x1358>
   12090:	cmp	r6, #16
   12094:	bhi	120b0 <__assert_fail@plt+0x1364>
   12098:	tst	r9, sl, lsl r6
   1209c:	bne	11ec8 <__assert_fail@plt+0x117c>
   120a0:	b	120b0 <__assert_fail@plt+0x1364>
   120a4:	cmp	r5, #5
   120a8:	cmpeq	r6, #5
   120ac:	beq	11ec8 <__assert_fail@plt+0x117c>
   120b0:	mov	r0, r4
   120b4:	bl	121f4 <__assert_fail@plt+0x14a8>
   120b8:	sub	sp, fp, #28
   120bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120c0:	push	{fp, lr}
   120c4:	mov	fp, sp
   120c8:	bl	10bc0 <utf8proc_get_property@plt>
   120cc:	ldrsh	r1, [r0]
   120d0:	sub	r2, r1, #1
   120d4:	mov	r0, #1
   120d8:	cmp	r2, #12
   120dc:	popcc	{fp, pc}
   120e0:	cmp	r1, #29
   120e4:	movne	r0, #0
   120e8:	pop	{fp, pc}
   120ec:	push	{r4, r5, r6, r7, fp, lr}
   120f0:	add	fp, sp, #16
   120f4:	mov	r5, r1
   120f8:	mov	r4, r0
   120fc:	ldr	r6, [r2, #4]
   12100:	mov	r0, r1
   12104:	mov	r1, r6
   12108:	bl	122b4 <__assert_fail@plt+0x1568>
   1210c:	add	r0, r0, #1
   12110:	bl	10c50 <malloc@plt>
   12114:	mov	r7, r0
   12118:	mov	r1, r5
   1211c:	mov	r2, r6
   12120:	bl	12358 <__assert_fail@plt+0x160c>
   12124:	mov	r0, #1
   12128:	mov	r1, #12
   1212c:	bl	123cc <__assert_fail@plt+0x1680>
   12130:	mov	r5, r0
   12134:	mov	r0, r7
   12138:	bl	10ce0 <utf8proc_NFC@plt>
   1213c:	str	r0, [r5, #8]
   12140:	mov	r0, r4
   12144:	mov	r1, r5
   12148:	bl	110b8 <__assert_fail@plt+0x36c>
   1214c:	mov	r0, r7
   12150:	pop	{r4, r5, r6, r7, fp, lr}
   12154:	b	10bb4 <free@plt>
   12158:	push	{r4, sl, fp, lr}
   1215c:	add	fp, sp, #8
   12160:	mov	r4, r0
   12164:	ldr	r0, [r0, #8]
   12168:	bl	10bb4 <free@plt>
   1216c:	mov	r0, r4
   12170:	pop	{r4, sl, fp, lr}
   12174:	b	10bb4 <free@plt>
   12178:	push	{r4, r5, fp, lr}
   1217c:	add	fp, sp, #8
   12180:	mov	r4, #0
   12184:	cmp	r0, #0
   12188:	beq	121b8 <__assert_fail@plt+0x146c>
   1218c:	ldr	r5, [r0, #4]
   12190:	cmp	r5, #0
   12194:	beq	121b8 <__assert_fail@plt+0x146c>
   12198:	mov	r0, r5
   1219c:	bl	121cc <__assert_fail@plt+0x1480>
   121a0:	orr	r0, r0, #2
   121a4:	cmp	r0, #6
   121a8:	bne	121c0 <__assert_fail@plt+0x1474>
   121ac:	ldr	r5, [r5, #4]
   121b0:	cmp	r5, #0
   121b4:	bne	12198 <__assert_fail@plt+0x144c>
   121b8:	mov	r0, r4
   121bc:	pop	{r4, r5, fp, pc}
   121c0:	mov	r4, r5
   121c4:	mov	r0, r4
   121c8:	pop	{r4, r5, fp, pc}
   121cc:	cmp	r0, #0
   121d0:	moveq	r0, #18
   121d4:	bxeq	lr
   121d8:	ldr	r0, [r0, #12]
   121dc:	b	12240 <__assert_fail@plt+0x14f4>
   121e0:	push	{fp, lr}
   121e4:	mov	fp, sp
   121e8:	bl	12178 <__assert_fail@plt+0x142c>
   121ec:	pop	{fp, lr}
   121f0:	b	12178 <__assert_fail@plt+0x142c>
   121f4:	push	{r4, r5, fp, lr}
   121f8:	add	fp, sp, #8
   121fc:	cmp	r0, #0
   12200:	beq	12234 <__assert_fail@plt+0x14e8>
   12204:	mov	r5, r0
   12208:	mov	r4, r5
   1220c:	ldr	r5, [r5, #4]
   12210:	cmp	r5, #0
   12214:	beq	1222c <__assert_fail@plt+0x14e0>
   12218:	mov	r0, r5
   1221c:	bl	121cc <__assert_fail@plt+0x1480>
   12220:	orr	r0, r0, #2
   12224:	cmp	r0, #6
   12228:	beq	12208 <__assert_fail@plt+0x14bc>
   1222c:	mov	r0, r4
   12230:	pop	{r4, r5, fp, pc}
   12234:	mov	r4, #0
   12238:	mov	r0, r4
   1223c:	pop	{r4, r5, fp, pc}
   12240:	mov	r1, #0
   12244:	movw	r2, #1092	; 0x444
   12248:	b	1224c <__assert_fail@plt+0x1500>
   1224c:	push	{r4, r5, fp, lr}
   12250:	add	fp, sp, #8
   12254:	mov	lr, r0
   12258:	mov	r0, #0
   1225c:	cmp	r2, r1
   12260:	popcc	{r4, r5, fp, pc}
   12264:	movw	ip, #13096	; 0x3328
   12268:	movt	ip, #1
   1226c:	sub	r3, r2, r1
   12270:	add	r3, r1, r3, lsr #1
   12274:	add	r4, r3, r3, lsl #1
   12278:	ldr	r5, [ip, r4, lsl #2]
   1227c:	cmp	r5, lr
   12280:	bls	12294 <__assert_fail@plt+0x1548>
   12284:	sub	r2, r3, #1
   12288:	cmp	r2, r1
   1228c:	bcs	1226c <__assert_fail@plt+0x1520>
   12290:	b	122b0 <__assert_fail@plt+0x1564>
   12294:	add	r1, ip, r4, lsl #2
   12298:	ldr	r4, [r1, #4]
   1229c:	cmp	r4, lr
   122a0:	bcs	122ac <__assert_fail@plt+0x1560>
   122a4:	add	r1, r3, #1
   122a8:	b	12288 <__assert_fail@plt+0x153c>
   122ac:	ldr	r0, [r1, #8]
   122b0:	pop	{r4, r5, fp, pc}
   122b4:	push	{r4, r5, r6, r7, fp, lr}
   122b8:	add	fp, sp, #16
   122bc:	sub	sp, sp, #8
   122c0:	cmp	r0, r1
   122c4:	beq	12308 <__assert_fail@plt+0x15bc>
   122c8:	mov	r5, r1
   122cc:	mov	r6, r0
   122d0:	mov	r4, #0
   122d4:	add	r7, sp, #4
   122d8:	cmp	r6, #0
   122dc:	beq	12318 <__assert_fail@plt+0x15cc>
   122e0:	ldr	r0, [r6, #12]
   122e4:	mov	r1, r7
   122e8:	bl	10bd8 <utf8proc_encode_char@plt>
   122ec:	cmp	r0, #0
   122f0:	beq	12338 <__assert_fail@plt+0x15ec>
   122f4:	add	r4, r0, r4
   122f8:	ldr	r6, [r6, #4]
   122fc:	cmp	r6, r5
   12300:	bne	122d8 <__assert_fail@plt+0x158c>
   12304:	b	1230c <__assert_fail@plt+0x15c0>
   12308:	mov	r4, #0
   1230c:	mov	r0, r4
   12310:	sub	sp, fp, #16
   12314:	pop	{r4, r5, r6, r7, fp, pc}
   12318:	movw	r0, #26219	; 0x666b
   1231c:	movt	r0, #1
   12320:	movw	r1, #26212	; 0x6664
   12324:	movt	r1, #1
   12328:	movw	r3, #26235	; 0x667b
   1232c:	movt	r3, #1
   12330:	mov	r2, #249	; 0xf9
   12334:	bl	10d4c <__assert_fail@plt>
   12338:	movw	r0, #26261	; 0x6695
   1233c:	movt	r0, #1
   12340:	movw	r1, #26212	; 0x6664
   12344:	movt	r1, #1
   12348:	movw	r3, #26235	; 0x667b
   1234c:	movt	r3, #1
   12350:	mov	r2, #253	; 0xfd
   12354:	bl	10d4c <__assert_fail@plt>
   12358:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1235c:	add	fp, sp, #24
   12360:	mov	r4, r0
   12364:	mov	r8, #0
   12368:	cmp	r1, r2
   1236c:	mov	r7, #0
   12370:	beq	123a4 <__assert_fail@plt+0x1658>
   12374:	mov	r5, r2
   12378:	mov	r6, r1
   1237c:	mov	r7, #0
   12380:	cmp	r6, #0
   12384:	beq	123ac <__assert_fail@plt+0x1660>
   12388:	add	r1, r4, r7
   1238c:	ldr	r0, [r6, #12]
   12390:	bl	10bd8 <utf8proc_encode_char@plt>
   12394:	add	r7, r0, r7
   12398:	ldr	r6, [r6, #4]
   1239c:	cmp	r6, r5
   123a0:	bne	12380 <__assert_fail@plt+0x1634>
   123a4:	strb	r8, [r4, r7]
   123a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123ac:	movw	r0, #26219	; 0x666b
   123b0:	movt	r0, #1
   123b4:	movw	r1, #26212	; 0x6664
   123b8:	movt	r1, #1
   123bc:	movw	r3, #26280	; 0x66a8
   123c0:	movt	r3, #1
   123c4:	movw	r2, #269	; 0x10d
   123c8:	bl	10d4c <__assert_fail@plt>
   123cc:	push	{fp, lr}
   123d0:	mov	fp, sp
   123d4:	bl	10b84 <calloc@plt>
   123d8:	cmp	r0, #0
   123dc:	popne	{fp, pc}
   123e0:	movw	r0, #26304	; 0x66c0
   123e4:	movt	r0, #1
   123e8:	bl	12780 <error@@Base>
   123ec:	push	{r4, r5, r6, sl, fp, lr}
   123f0:	add	fp, sp, #16
   123f4:	mov	r2, r0
   123f8:	ldrb	ip, [r1]
   123fc:	ldrb	r3, [r0]
   12400:	mov	r0, #0
   12404:	cmp	r3, #0
   12408:	beq	12448 <__assert_fail@plt+0x16fc>
   1240c:	add	lr, r1, #1
   12410:	add	r6, r2, #1
   12414:	mov	r2, #0
   12418:	uxtb	r4, ip
   1241c:	uxtb	r5, r3
   12420:	cmp	r5, r4
   12424:	bne	12458 <__assert_fail@plt+0x170c>
   12428:	ldrb	ip, [lr, r2]
   1242c:	ldrb	r3, [r6, r2]
   12430:	add	r2, r2, #1
   12434:	cmp	r3, #0
   12438:	bne	12418 <__assert_fail@plt+0x16cc>
   1243c:	cmp	ip, #0
   12440:	bne	12454 <__assert_fail@plt+0x1708>
   12444:	pop	{r4, r5, r6, sl, fp, pc}
   12448:	mov	r2, #0
   1244c:	cmp	ip, #0
   12450:	beq	12444 <__assert_fail@plt+0x16f8>
   12454:	mov	r3, #0
   12458:	ldrb	r1, [r1, r2]
   1245c:	uxtb	r2, r3
   12460:	mov	r0, #1
   12464:	cmp	r2, r1
   12468:	mvncc	r0, #0
   1246c:	pop	{r4, r5, r6, sl, fp, pc}
   12470:	push	{r4, r5, fp, lr}
   12474:	add	fp, sp, #8
   12478:	mov	r5, r1
   1247c:	cmp	r0, #0
   12480:	beq	124b4 <__assert_fail@plt+0x1768>
   12484:	mov	r4, r0
   12488:	mov	r1, r5
   1248c:	bl	10ba8 <fopen@plt>
   12490:	cmp	r0, #0
   12494:	popne	{r4, r5, fp, pc}
   12498:	ldrb	r0, [r5]
   1249c:	cmp	r0, #119	; 0x77
   124a0:	bne	124d8 <__assert_fail@plt+0x178c>
   124a4:	movw	r0, #26330	; 0x66da
   124a8:	movt	r0, #1
   124ac:	mov	r1, r4
   124b0:	bl	127c0 <error@@Base+0x40>
   124b4:	ldrb	r0, [r5]
   124b8:	movw	r1, #28880	; 0x70d0
   124bc:	movt	r1, #2
   124c0:	movw	r2, #28884	; 0x70d4
   124c4:	movt	r2, #2
   124c8:	cmp	r0, #114	; 0x72
   124cc:	moveq	r2, r1
   124d0:	ldr	r0, [r2]
   124d4:	pop	{r4, r5, fp, pc}
   124d8:	movw	r0, #26352	; 0x66f0
   124dc:	movt	r0, #1
   124e0:	mov	r1, r4
   124e4:	bl	127c0 <error@@Base+0x40>
   124e8:	movw	r1, #28880	; 0x70d0
   124ec:	movt	r1, #2
   124f0:	ldr	r1, [r1]
   124f4:	cmp	r1, r0
   124f8:	bxeq	lr
   124fc:	movw	r1, #28884	; 0x70d4
   12500:	movt	r1, #2
   12504:	ldr	r1, [r1]
   12508:	cmp	r1, r0
   1250c:	beq	12514 <__assert_fail@plt+0x17c8>
   12510:	b	10cd4 <fclose@plt>
   12514:	bx	lr
   12518:	push	{fp, lr}
   1251c:	mov	fp, sp
   12520:	sub	sp, sp, #88	; 0x58
   12524:	mov	r1, sp
   12528:	bl	1319c <error@@Base+0xa1c>
   1252c:	clz	r0, r0
   12530:	lsr	r0, r0, #5
   12534:	mov	sp, fp
   12538:	pop	{fp, pc}
   1253c:	push	{r4, sl, fp, lr}
   12540:	add	fp, sp, #8
   12544:	movw	r0, #29000	; 0x7148
   12548:	movt	r0, #2
   1254c:	ldrh	r1, [r0]
   12550:	add	r1, r1, #1
   12554:	strh	r1, [r0]
   12558:	sxth	r0, r1
   1255c:	bl	12570 <__assert_fail@plt+0x1824>
   12560:	mov	r4, r0
   12564:	bl	10bfc <unlink@plt>
   12568:	mov	r0, r4
   1256c:	pop	{r4, sl, fp, pc}
   12570:	push	{r4, r5, fp, lr}
   12574:	add	fp, sp, #8
   12578:	sub	sp, sp, #104	; 0x68
   1257c:	mov	r4, r0
   12580:	movw	r0, #37096	; 0x90e8
   12584:	movt	r0, #2
   12588:	ldr	r5, [r0]
   1258c:	bl	10c80 <getpid@plt>
   12590:	mov	r3, r0
   12594:	sxth	r0, r4
   12598:	str	r0, [sp]
   1259c:	add	r4, sp, #4
   125a0:	movw	r1, #26393	; 0x6719
   125a4:	movt	r1, #1
   125a8:	mov	r0, r4
   125ac:	mov	r2, r5
   125b0:	bl	10cf8 <sprintf@plt>
   125b4:	mov	r0, r4
   125b8:	bl	10be4 <strdup@plt>
   125bc:	sub	sp, fp, #8
   125c0:	pop	{r4, r5, fp, pc}
   125c4:	push	{r4, sl, fp, lr}
   125c8:	add	fp, sp, #8
   125cc:	mov	r4, r0
   125d0:	bl	10cb0 <strlen@plt>
   125d4:	sub	r0, r0, #1
   125d8:	sxth	r0, r0
   125dc:	cmp	r0, #0
   125e0:	bmi	125f0 <__assert_fail@plt+0x18a4>
   125e4:	ldrb	r1, [r4, r0]
   125e8:	cmp	r1, #47	; 0x2f
   125ec:	bne	125d4 <__assert_fail@plt+0x1888>
   125f0:	add	r0, r0, r4
   125f4:	add	r0, r0, #1
   125f8:	pop	{r4, sl, fp, pc}
   125fc:	push	{r4, r5, r6, r7, fp, lr}
   12600:	add	fp, sp, #16
   12604:	mov	r4, r3
   12608:	mov	r5, r2
   1260c:	mov	r6, r1
   12610:	mov	r7, r0
   12614:	ldr	r0, [r1]
   12618:	bl	125c4 <__assert_fail@plt+0x1878>
   1261c:	movw	r1, #37096	; 0x90e8
   12620:	movt	r1, #2
   12624:	str	r0, [r1]
   12628:	bl	12848 <error@@Base+0xc8>
   1262c:	mov	r0, r7
   12630:	mov	r1, r6
   12634:	mov	r2, r5
   12638:	mov	r3, r4
   1263c:	pop	{r4, r5, r6, r7, fp, lr}
   12640:	b	12644 <__assert_fail@plt+0x18f8>
   12644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12648:	add	fp, sp, #28
   1264c:	sub	sp, sp, #12
   12650:	stmib	sp, {r2, r3}
   12654:	mov	r7, r1
   12658:	mov	r5, r0
   1265c:	ldr	r0, [r0]
   12660:	cmp	r0, #1
   12664:	bne	1267c <__assert_fail@plt+0x1930>
   12668:	movw	r0, #28864	; 0x70c0
   1266c:	movt	r0, #2
   12670:	ldrb	r0, [r0]
   12674:	cmp	r0, #0
   12678:	bne	12738 <__assert_fail@plt+0x19ec>
   1267c:	ldr	r9, [r5]
   12680:	mov	r6, #0
   12684:	cmp	r9, #2
   12688:	blt	12728 <__assert_fail@plt+0x19dc>
   1268c:	mov	sl, #1
   12690:	mov	r6, #0
   12694:	mov	r8, #1
   12698:	b	126c0 <__assert_fail@plt+0x1974>
   1269c:	ldr	r0, [r7, sl, lsl #2]
   126a0:	sxth	r1, r6
   126a4:	str	r0, [r7, r1, lsl #2]
   126a8:	add	r6, r6, #1
   126ac:	ldr	r9, [r5]
   126b0:	add	r8, r8, #1
   126b4:	sxth	sl, r8
   126b8:	cmp	r9, sl
   126bc:	ble	12728 <__assert_fail@plt+0x19dc>
   126c0:	ldr	r4, [r7, sl, lsl #2]
   126c4:	ldrb	r0, [r4]
   126c8:	cmp	r0, #45	; 0x2d
   126cc:	bne	1269c <__assert_fail@plt+0x1950>
   126d0:	ldrb	r0, [r4, #1]
   126d4:	cmp	r0, #0
   126d8:	beq	1269c <__assert_fail@plt+0x1950>
   126dc:	mov	r0, r4
   126e0:	bl	10cb0 <strlen@plt>
   126e4:	mov	r2, r0
   126e8:	movw	r0, #26422	; 0x6736
   126ec:	movt	r0, #1
   126f0:	mov	r1, r4
   126f4:	bl	10d28 <strncmp@plt>
   126f8:	cmp	r0, #0
   126fc:	beq	12738 <__assert_fail@plt+0x19ec>
   12700:	add	r0, sl, #1
   12704:	mov	r1, #0
   12708:	cmp	r0, r9
   1270c:	ldrlt	r1, [r7, r0, lsl #2]
   12710:	mov	r0, r4
   12714:	ldr	r2, [sp, #8]
   12718:	bl	128f4 <error@@Base+0x174>
   1271c:	cmp	r0, #0
   12720:	addne	r8, r8, #1
   12724:	b	126ac <__assert_fail@plt+0x1960>
   12728:	sxth	r0, r6
   1272c:	str	r0, [r5]
   12730:	sub	sp, fp, #28
   12734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12738:	ldr	r0, [sp, #4]
   1273c:	bl	128a4 <error@@Base+0x124>
   12740:	push	{fp, lr}
   12744:	mov	fp, sp
   12748:	mov	r0, #0
   1274c:	bl	12750 <__assert_fail@plt+0x1a04>
   12750:	push	{fp, lr}
   12754:	mov	fp, sp
   12758:	mov	r4, r0
   1275c:	movw	r0, #37100	; 0x90ec
   12760:	movt	r0, #2
   12764:	ldr	r0, [r0]
   12768:	cmp	r0, #0
   1276c:	beq	12774 <__assert_fail@plt+0x1a28>
   12770:	blx	r0
   12774:	bl	129e4 <error@@Base+0x264>
   12778:	mov	r0, r4
   1277c:	bl	10c8c <exit@plt>

00012780 <error@@Base>:
   12780:	push	{fp, lr}
   12784:	mov	fp, sp
   12788:	mov	r3, r0
   1278c:	movw	r0, #37096	; 0x90e8
   12790:	movt	r0, #2
   12794:	ldr	r2, [r0]
   12798:	movw	r0, #28872	; 0x70c8
   1279c:	movt	r0, #2
   127a0:	ldr	r0, [r0]
   127a4:	movw	r1, #26372	; 0x6704
   127a8:	movt	r1, #1
   127ac:	bl	10cbc <fprintf@plt>
   127b0:	movw	r0, #28868	; 0x70c4
   127b4:	movt	r0, #2
   127b8:	ldr	r0, [r0]
   127bc:	bl	12750 <__assert_fail@plt+0x1a04>
   127c0:	push	{fp, lr}
   127c4:	mov	fp, sp
   127c8:	sub	sp, sp, #8
   127cc:	mov	r3, r0
   127d0:	movw	r0, #37096	; 0x90e8
   127d4:	movt	r0, #2
   127d8:	ldr	r2, [r0]
   127dc:	movw	r0, #28872	; 0x70c8
   127e0:	movt	r0, #2
   127e4:	ldr	r0, [r0]
   127e8:	str	r1, [sp]
   127ec:	movw	r1, #26380	; 0x670c
   127f0:	movt	r1, #1
   127f4:	bl	10cbc <fprintf@plt>
   127f8:	movw	r0, #28868	; 0x70c4
   127fc:	movt	r0, #2
   12800:	ldr	r0, [r0]
   12804:	bl	12750 <__assert_fail@plt+0x1a04>
   12808:	push	{fp, lr}
   1280c:	mov	fp, sp
   12810:	sub	sp, sp, #8
   12814:	mov	r3, r0
   12818:	movw	r0, #37096	; 0x90e8
   1281c:	movt	r0, #2
   12820:	ldr	r2, [r0]
   12824:	movw	r0, #28872	; 0x70c8
   12828:	movt	r0, #2
   1282c:	ldr	r0, [r0]
   12830:	str	r1, [sp]
   12834:	movw	r1, #26380	; 0x670c
   12838:	movt	r1, #1
   1283c:	bl	10cbc <fprintf@plt>
   12840:	mov	sp, fp
   12844:	pop	{fp, pc}
   12848:	push	{r4, sl, fp, lr}
   1284c:	add	fp, sp, #8
   12850:	movw	r4, #10356	; 0x2874
   12854:	movt	r4, #1
   12858:	mov	r0, #2
   1285c:	mov	r1, r4
   12860:	bl	10c68 <__sysv_signal@plt>
   12864:	mov	r0, #15
   12868:	mov	r1, r4
   1286c:	pop	{r4, sl, fp, lr}
   12870:	b	10c68 <__sysv_signal@plt>
   12874:	push	{fp, lr}
   12878:	mov	fp, sp
   1287c:	movw	r0, #29002	; 0x714a
   12880:	movt	r0, #2
   12884:	ldrb	r1, [r0]
   12888:	cmp	r1, #1
   1288c:	popeq	{fp, pc}
   12890:	mov	r1, #1
   12894:	strb	r1, [r0]
   12898:	movw	r0, #26407	; 0x6727
   1289c:	movt	r0, #1
   128a0:	bl	12780 <error@@Base>
   128a4:	push	{fp, lr}
   128a8:	mov	fp, sp
   128ac:	mov	r3, r0
   128b0:	movw	r0, #37092	; 0x90e4
   128b4:	movt	r0, #2
   128b8:	ldr	r0, [r0]
   128bc:	cmp	r0, #0
   128c0:	bne	128ec <error@@Base+0x16c>
   128c4:	movw	r0, #37096	; 0x90e8
   128c8:	movt	r0, #2
   128cc:	ldr	r2, [r0]
   128d0:	movw	r0, #28872	; 0x70c8
   128d4:	movt	r0, #2
   128d8:	ldr	r0, [r0]
   128dc:	movw	r1, #26428	; 0x673c
   128e0:	movt	r1, #1
   128e4:	bl	10cbc <fprintf@plt>
   128e8:	bl	12740 <__assert_fail@plt+0x19f4>
   128ec:	blx	r0
   128f0:	bl	12740 <__assert_fail@plt+0x19f4>
   128f4:	push	{r4, sl, fp, lr}
   128f8:	add	fp, sp, #8
   128fc:	mov	ip, r0
   12900:	cmp	r2, #0
   12904:	ldrbne	r0, [r2]
   12908:	cmpne	r0, #0
   1290c:	bne	12920 <error@@Base+0x1a0>
   12910:	movw	r0, #26443	; 0x674b
   12914:	movt	r0, #1
   12918:	mov	r1, ip
   1291c:	bl	127c0 <error@@Base+0x40>
   12920:	ldrb	lr, [ip, #1]
   12924:	mov	r3, #0
   12928:	cmp	lr, r0
   1292c:	beq	12954 <error@@Base+0x1d4>
   12930:	mov	r0, #1
   12934:	sxth	r3, r0
   12938:	add	r4, r3, r3, lsl #1
   1293c:	ldrb	r4, [r2, r4, lsl #2]
   12940:	cmp	r4, #0
   12944:	beq	12910 <error@@Base+0x190>
   12948:	add	r0, r0, #1
   1294c:	cmp	lr, r4
   12950:	bne	12934 <error@@Base+0x1b4>
   12954:	add	r0, r3, r3, lsl #1
   12958:	add	r3, r2, r0, lsl #2
   1295c:	ldr	r0, [r3, #4]
   12960:	cmp	r0, #0
   12964:	beq	129a4 <error@@Base+0x224>
   12968:	mov	r2, ip
   1296c:	ldrb	lr, [r2, #2]!
   12970:	cmp	r1, #0
   12974:	cmpeq	lr, #0
   12978:	beq	129a4 <error@@Base+0x224>
   1297c:	ldr	r3, [r0]
   12980:	cmp	r3, #0
   12984:	bne	129d4 <error@@Base+0x254>
   12988:	cmp	lr, #0
   1298c:	movne	r1, r2
   12990:	str	r1, [r0]
   12994:	ldrb	r0, [r2]
   12998:	clz	r0, r0
   1299c:	lsr	r0, r0, #5
   129a0:	pop	{r4, sl, fp, pc}
   129a4:	ldr	r0, [r3, #8]
   129a8:	cmp	r0, #0
   129ac:	beq	12910 <error@@Base+0x190>
   129b0:	ldrb	r1, [ip, #2]
   129b4:	cmp	r1, #0
   129b8:	bne	12910 <error@@Base+0x190>
   129bc:	ldrb	r1, [r0]
   129c0:	cmp	r1, #0
   129c4:	moveq	r1, #1
   129c8:	strbeq	r1, [r0]
   129cc:	moveq	r0, #0
   129d0:	popeq	{r4, sl, fp, pc}
   129d4:	movw	r0, #26458	; 0x675a
   129d8:	movt	r0, #1
   129dc:	mov	r1, ip
   129e0:	bl	127c0 <error@@Base+0x40>
   129e4:	push	{r4, r5, r6, sl, fp, lr}
   129e8:	add	fp, sp, #16
   129ec:	movw	r5, #29000	; 0x7148
   129f0:	movt	r5, #2
   129f4:	ldrsh	r0, [r5]
   129f8:	cmp	r0, #1
   129fc:	blt	12a30 <error@@Base+0x2b0>
   12a00:	mov	r6, #1
   12a04:	sxth	r0, r6
   12a08:	bl	12570 <__assert_fail@plt+0x1824>
   12a0c:	mov	r4, r0
   12a10:	bl	10bfc <unlink@plt>
   12a14:	mov	r0, r4
   12a18:	bl	10bb4 <free@plt>
   12a1c:	add	r0, r6, #1
   12a20:	sxth	r6, r0
   12a24:	ldrsh	r0, [r5]
   12a28:	cmp	r6, r0
   12a2c:	ble	12a04 <error@@Base+0x284>
   12a30:	pop	{r4, r5, r6, sl, fp, pc}
   12a34:	push	{r4, r5, r6, sl, fp, lr}
   12a38:	add	fp, sp, #16
   12a3c:	mov	r4, r2
   12a40:	mov	r5, r1
   12a44:	mov	r6, r0
   12a48:	mov	r0, #1
   12a4c:	mov	r1, #16
   12a50:	bl	123cc <__assert_fail@plt+0x1680>
   12a54:	mov	r1, r0
   12a58:	str	r4, [r0, #12]
   12a5c:	strb	r5, [r0, #8]
   12a60:	mov	r0, r6
   12a64:	pop	{r4, r5, r6, sl, fp, lr}
   12a68:	b	110b8 <__assert_fail@plt+0x36c>
   12a6c:	push	{r4, r5, r6, r7, fp, lr}
   12a70:	add	fp, sp, #16
   12a74:	mov	r5, r2
   12a78:	mov	r2, r1
   12a7c:	mov	r4, r0
   12a80:	cmp	r1, #0
   12a84:	bne	12a94 <error@@Base+0x314>
   12a88:	ldrb	r0, [r5]
   12a8c:	cmp	r0, #0
   12a90:	bne	12b30 <error@@Base+0x3b0>
   12a94:	ldr	r7, [r4, #4]
   12a98:	movw	r1, #26677	; 0x6835
   12a9c:	movt	r1, #1
   12aa0:	mov	r0, r2
   12aa4:	bl	12470 <__assert_fail@plt+0x1724>
   12aa8:	mov	r6, r0
   12aac:	ldrb	r0, [r5]
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ac4 <error@@Base+0x344>
   12ab8:	mov	r0, r6
   12abc:	bl	12b44 <error@@Base+0x3c4>
   12ac0:	strb	r0, [r5, #11]
   12ac4:	ldrb	r2, [r5, #1]
   12ac8:	ldr	r3, [r5, #4]
   12acc:	cmp	r3, #0
   12ad0:	movweq	r3, #94	; 0x5e
   12ad4:	mov	r0, r6
   12ad8:	mov	r1, r4
   12adc:	bl	12bf4 <error@@Base+0x474>
   12ae0:	mov	r0, r6
   12ae4:	bl	124e8 <__assert_fail@plt+0x179c>
   12ae8:	ldrb	r0, [r5, #9]
   12aec:	cmp	r0, #0
   12af0:	beq	12b0c <error@@Base+0x38c>
   12af4:	cmp	r7, #0
   12af8:	mov	r0, r4
   12afc:	addne	r0, r7, #4
   12b00:	ldr	r1, [r0]
   12b04:	mov	r0, r4
   12b08:	bl	12d04 <error@@Base+0x584>
   12b0c:	ldrb	r0, [r5, #10]
   12b10:	cmp	r0, #0
   12b14:	beq	12b2c <error@@Base+0x3ac>
   12b18:	cmp	r7, #0
   12b1c:	addne	r4, r7, #4
   12b20:	ldr	r0, [r4]
   12b24:	pop	{r4, r5, r6, r7, fp, lr}
   12b28:	b	12de8 <error@@Base+0x668>
   12b2c:	pop	{r4, r5, r6, r7, fp, pc}
   12b30:	movw	r0, #26475	; 0x676b
   12b34:	movt	r0, #1
   12b38:	movw	r1, #26491	; 0x677b
   12b3c:	movt	r1, #1
   12b40:	bl	127c0 <error@@Base+0x40>
   12b44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b48:	add	fp, sp, #24
   12b4c:	sub	sp, sp, #104	; 0x68
   12b50:	mov	r4, r0
   12b54:	add	r0, sp, #4
   12b58:	mov	r1, #99	; 0x63
   12b5c:	mov	r2, r4
   12b60:	bl	10bcc <fgets@plt>
   12b64:	cmp	r0, #0
   12b68:	beq	12b88 <error@@Base+0x408>
   12b6c:	add	r0, sp, #4
   12b70:	movw	r1, #26543	; 0x67af
   12b74:	movt	r1, #1
   12b78:	mov	r2, #51	; 0x33
   12b7c:	bl	10c98 <bcmp@plt>
   12b80:	cmp	r0, #0
   12b84:	beq	12ba0 <error@@Base+0x420>
   12b88:	mov	r0, r4
   12b8c:	bl	10bf0 <rewind@plt>
   12b90:	mov	r7, #0
   12b94:	mov	r0, r7
   12b98:	sub	sp, fp, #24
   12b9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ba0:	mov	r6, #0
   12ba4:	add	r5, sp, #4
   12ba8:	movw	r8, #26599	; 0x67e7
   12bac:	movt	r8, #1
   12bb0:	mov	r7, #1
   12bb4:	mov	r0, r5
   12bb8:	mov	r1, #99	; 0x63
   12bbc:	mov	r2, r4
   12bc0:	bl	10bcc <fgets@plt>
   12bc4:	cmp	r0, #0
   12bc8:	beq	12b94 <error@@Base+0x414>
   12bcc:	mov	r0, r5
   12bd0:	mov	r1, r8
   12bd4:	mov	r2, #56	; 0x38
   12bd8:	bl	10c98 <bcmp@plt>
   12bdc:	cmp	r0, #0
   12be0:	addeq	r6, r6, #1
   12be4:	uxth	r0, r6
   12be8:	cmp	r0, #2
   12bec:	bcc	12bb4 <error@@Base+0x434>
   12bf0:	b	12b94 <error@@Base+0x414>
   12bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bf8:	add	fp, sp, #28
   12bfc:	sub	sp, sp, #20
   12c00:	str	r3, [sp, #8]
   12c04:	mov	r5, r2
   12c08:	str	r1, [sp, #4]
   12c0c:	mov	r9, r0
   12c10:	bl	10d40 <getc@plt>
   12c14:	cmn	r0, #1
   12c18:	beq	12cdc <error@@Base+0x55c>
   12c1c:	uxtb	r8, r5
   12c20:	add	r4, sp, #16
   12c24:	add	r1, r4, #1
   12c28:	str	r1, [sp]
   12c2c:	mov	r7, #0
   12c30:	movw	r6, #28160	; 0x6e00
   12c34:	movt	r6, #2
   12c38:	b	12c60 <error@@Base+0x4e0>
   12c3c:	ldr	r0, [sp, #4]
   12c40:	mov	r1, r7
   12c44:	bl	12a34 <error@@Base+0x2b4>
   12c48:	mov	r5, #0
   12c4c:	mov	r0, r9
   12c50:	bl	10d40 <getc@plt>
   12c54:	cmn	r0, #1
   12c58:	mov	r7, r5
   12c5c:	beq	12cdc <error@@Base+0x55c>
   12c60:	add	r1, r6, r0
   12c64:	ldrsb	sl, [r1]
   12c68:	cmp	sl, #0
   12c6c:	ble	12ce4 <error@@Base+0x564>
   12c70:	strb	r0, [sp, #16]
   12c74:	cmp	sl, #1
   12c78:	beq	12ca4 <error@@Base+0x524>
   12c7c:	mov	r5, r8
   12c80:	sub	r8, sl, #1
   12c84:	ldr	r0, [sp]
   12c88:	mov	r1, #1
   12c8c:	mov	r2, r8
   12c90:	mov	r3, r9
   12c94:	bl	10c2c <fread@plt>
   12c98:	cmp	r0, r8
   12c9c:	mov	r8, r5
   12ca0:	bne	12cf8 <error@@Base+0x578>
   12ca4:	mov	r0, r4
   12ca8:	mov	r1, #4
   12cac:	add	r2, sp, #12
   12cb0:	bl	10c38 <utf8proc_iterate@plt>
   12cb4:	cmp	r0, sl
   12cb8:	bne	12cf0 <error@@Base+0x570>
   12cbc:	ldr	r2, [sp, #12]
   12cc0:	cmp	r8, #0
   12cc4:	beq	12c3c <error@@Base+0x4bc>
   12cc8:	mov	r5, #1
   12ccc:	ldr	r0, [sp, #8]
   12cd0:	cmp	r2, r0
   12cd4:	beq	12c4c <error@@Base+0x4cc>
   12cd8:	b	12c3c <error@@Base+0x4bc>
   12cdc:	sub	sp, fp, #28
   12ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce4:	movw	r0, #26655	; 0x681f
   12ce8:	movt	r0, #1
   12cec:	bl	12780 <error@@Base>
   12cf0:	bl	10d10 <utf8proc_errmsg@plt>
   12cf4:	bl	12780 <error@@Base>
   12cf8:	movw	r0, #26679	; 0x6837
   12cfc:	movt	r0, #1
   12d00:	bl	12780 <error@@Base>
   12d04:	push	{r4, r5, r6, r7, fp, lr}
   12d08:	add	fp, sp, #16
   12d0c:	cmp	r1, #0
   12d10:	beq	12de4 <error@@Base+0x664>
   12d14:	mov	r5, r1
   12d18:	mov	r4, r0
   12d1c:	mov	r6, #32
   12d20:	mov	r7, r1
   12d24:	ldr	r0, [r7, #12]
   12d28:	bl	130c4 <error@@Base+0x944>
   12d2c:	cmp	r0, #0
   12d30:	strne	r6, [r7, #12]
   12d34:	ldr	r7, [r7, #4]
   12d38:	cmp	r7, #0
   12d3c:	bne	12d24 <error@@Base+0x5a4>
   12d40:	mov	r6, #0
   12d44:	b	12d68 <error@@Base+0x5e8>
   12d48:	mov	r0, r4
   12d4c:	mov	r1, r5
   12d50:	bl	110e0 <__assert_fail@plt+0x394>
   12d54:	mov	r0, r5
   12d58:	bl	10bb4 <free@plt>
   12d5c:	cmp	r7, #0
   12d60:	mov	r5, r7
   12d64:	beq	12de4 <error@@Base+0x664>
   12d68:	ldr	r7, [r5, #4]
   12d6c:	ldr	r1, [r5, #12]
   12d70:	cmp	r1, #32
   12d74:	bne	12db0 <error@@Base+0x630>
   12d78:	tst	r6, #255	; 0xff
   12d7c:	cmpne	r7, #0
   12d80:	bne	12dcc <error@@Base+0x64c>
   12d84:	tst	r6, #255	; 0xff
   12d88:	cmpne	r7, #0
   12d8c:	beq	12d48 <error@@Base+0x5c8>
   12d90:	ldr	r0, [r7, #12]
   12d94:	cmp	r0, #32
   12d98:	bne	12d48 <error@@Base+0x5c8>
   12d9c:	ldrb	r0, [r5, #8]
   12da0:	ldrb	r1, [r7, #8]
   12da4:	orr	r0, r1, r0
   12da8:	strb	r0, [r7, #8]
   12dac:	b	12d48 <error@@Base+0x5c8>
   12db0:	subs	r0, r1, #10
   12db4:	movwne	r0, #1
   12db8:	tst	r6, #255	; 0xff
   12dbc:	cmpeq	r1, #10
   12dc0:	beq	12d48 <error@@Base+0x5c8>
   12dc4:	mov	r6, r0
   12dc8:	b	12d5c <error@@Base+0x5dc>
   12dcc:	ldr	r1, [r7, #12]
   12dd0:	cmp	r1, #10
   12dd4:	movne	r0, #1
   12dd8:	cmpne	r1, #32
   12ddc:	beq	12d84 <error@@Base+0x604>
   12de0:	b	12dc4 <error@@Base+0x644>
   12de4:	pop	{r4, r5, r6, r7, fp, pc}
   12de8:	push	{r4, sl, fp, lr}
   12dec:	add	fp, sp, #8
   12df0:	cmp	r0, #0
   12df4:	popeq	{r4, sl, fp, pc}
   12df8:	mov	r4, r0
   12dfc:	ldr	r0, [r4, #12]
   12e00:	bl	10c08 <utf8proc_tolower@plt>
   12e04:	str	r0, [r4, #12]
   12e08:	ldr	r4, [r4, #4]
   12e0c:	cmp	r4, #0
   12e10:	bne	12dfc <error@@Base+0x67c>
   12e14:	pop	{r4, sl, fp, pc}
   12e18:	push	{fp, lr}
   12e1c:	mov	fp, sp
   12e20:	bl	10bd8 <utf8proc_encode_char@plt>
   12e24:	cmp	r0, #0
   12e28:	sxtbgt	r0, r0
   12e2c:	popgt	{fp, pc}
   12e30:	movw	r0, #26501	; 0x6785
   12e34:	movt	r0, #1
   12e38:	bl	12780 <error@@Base>
   12e3c:	push	{r4, r5, r6, r7, fp, lr}
   12e40:	add	fp, sp, #16
   12e44:	mov	r7, r3
   12e48:	mov	r4, r2
   12e4c:	mov	r5, r1
   12e50:	tst	r0, #255	; 0xff
   12e54:	beq	12e94 <error@@Base+0x714>
   12e58:	mov	r0, #94	; 0x5e
   12e5c:	mov	r1, r4
   12e60:	bl	12e18 <error@@Base+0x698>
   12e64:	mov	r6, r0
   12e68:	cmp	r5, #10
   12e6c:	bne	12ea0 <error@@Base+0x720>
   12e70:	movw	r0, #26391	; 0x6717
   12e74:	movt	r0, #1
   12e78:	movw	r1, #26524	; 0x679c
   12e7c:	movt	r1, #1
   12e80:	tst	r7, #255	; 0xff
   12e84:	moveq	r1, r0
   12e88:	add	r0, r4, r6
   12e8c:	pop	{r4, r5, r6, r7, fp, lr}
   12e90:	b	10cf8 <sprintf@plt>
   12e94:	mov	r6, #0
   12e98:	cmp	r5, #10
   12e9c:	beq	12e70 <error@@Base+0x6f0>
   12ea0:	mov	r0, r5
   12ea4:	bl	12f18 <error@@Base+0x798>
   12ea8:	cmp	r0, #0
   12eac:	beq	12eec <error@@Base+0x76c>
   12eb0:	mov	r0, r5
   12eb4:	bl	12f58 <error@@Base+0x7d8>
   12eb8:	cmp	r0, #0
   12ebc:	beq	12ed0 <error@@Base+0x750>
   12ec0:	add	r1, r4, r6
   12ec4:	movw	r0, #9676	; 0x25cc
   12ec8:	bl	12e18 <error@@Base+0x698>
   12ecc:	add	r6, r6, r0
   12ed0:	add	r1, r4, r6
   12ed4:	mov	r0, r5
   12ed8:	bl	12e18 <error@@Base+0x698>
   12edc:	add	r0, r6, r0
   12ee0:	mov	r1, #0
   12ee4:	strb	r1, [r4, r0]
   12ee8:	pop	{r4, r5, r6, r7, fp, pc}
   12eec:	add	r0, r4, r6
   12ef0:	cmp	r5, #255	; 0xff
   12ef4:	bhi	12f04 <error@@Base+0x784>
   12ef8:	movw	r1, #26529	; 0x67a1
   12efc:	movt	r1, #1
   12f00:	b	12f0c <error@@Base+0x78c>
   12f04:	movw	r1, #26536	; 0x67a8
   12f08:	movt	r1, #1
   12f0c:	mov	r2, r5
   12f10:	pop	{r4, r5, r6, r7, fp, lr}
   12f14:	b	10cf8 <sprintf@plt>
   12f18:	push	{r4, sl, fp, lr}
   12f1c:	add	fp, sp, #8
   12f20:	mov	r4, r0
   12f24:	bl	10bc0 <utf8proc_get_property@plt>
   12f28:	mov	r1, r0
   12f2c:	mov	r0, #1
   12f30:	cmp	r4, #32
   12f34:	popeq	{r4, sl, fp, pc}
   12f38:	ldrsh	r1, [r1]
   12f3c:	sub	r2, r1, #1
   12f40:	cmp	r2, #22
   12f44:	bcs	12f4c <error@@Base+0x7cc>
   12f48:	pop	{r4, sl, fp, pc}
   12f4c:	cmp	r1, #29
   12f50:	movne	r0, #0
   12f54:	pop	{r4, sl, fp, pc}
   12f58:	push	{fp, lr}
   12f5c:	mov	fp, sp
   12f60:	bl	10ca4 <utf8proc_category@plt>
   12f64:	sub	r1, r0, #6
   12f68:	mov	r0, #0
   12f6c:	cmp	r1, #3
   12f70:	movwcc	r0, #1
   12f74:	pop	{fp, pc}
   12f78:	push	{r4, r5, r6, r7, fp, lr}
   12f7c:	add	fp, sp, #16
   12f80:	sub	sp, sp, #16
   12f84:	mov	r6, r2
   12f88:	mov	r2, r1
   12f8c:	mov	r5, r0
   12f90:	movw	r1, #12894	; 0x325e
   12f94:	movt	r1, #1
   12f98:	mov	r0, r2
   12f9c:	bl	12470 <__assert_fail@plt+0x1724>
   12fa0:	mov	r4, r0
   12fa4:	cmp	r6, #0
   12fa8:	beq	12ffc <error@@Base+0x87c>
   12fac:	movw	r0, #26543	; 0x67af
   12fb0:	movt	r0, #1
   12fb4:	mov	r1, #55	; 0x37
   12fb8:	mov	r2, #1
   12fbc:	mov	r3, r4
   12fc0:	bl	10c20 <fwrite@plt>
   12fc4:	movw	r7, #26599	; 0x67e7
   12fc8:	movt	r7, #1
   12fcc:	mov	r0, r7
   12fd0:	mov	r1, #55	; 0x37
   12fd4:	mov	r2, #1
   12fd8:	mov	r3, r4
   12fdc:	bl	10c20 <fwrite@plt>
   12fe0:	mov	r0, r4
   12fe4:	blx	r6
   12fe8:	mov	r0, r7
   12fec:	mov	r1, #55	; 0x37
   12ff0:	mov	r2, #1
   12ff4:	mov	r3, r4
   12ff8:	bl	10c20 <fwrite@plt>
   12ffc:	ldr	r6, [r5]
   13000:	cmp	r6, #0
   13004:	beq	13038 <error@@Base+0x8b8>
   13008:	add	r5, sp, #7
   1300c:	ldr	r1, [r6, #12]
   13010:	ldrb	r0, [r6, #8]
   13014:	mov	r2, r5
   13018:	mov	r3, #0
   1301c:	bl	12e3c <error@@Base+0x6bc>
   13020:	mov	r0, r5
   13024:	mov	r1, r4
   13028:	bl	10d1c <fputs@plt>
   1302c:	ldr	r6, [r6, #4]
   13030:	cmp	r6, #0
   13034:	bne	1300c <error@@Base+0x88c>
   13038:	mov	r0, r4
   1303c:	bl	124e8 <__assert_fail@plt+0x179c>
   13040:	sub	sp, fp, #16
   13044:	pop	{r4, r5, r6, r7, fp, pc}
   13048:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1304c:	add	fp, sp, #24
   13050:	sub	sp, sp, #8
   13054:	mov	r6, r0
   13058:	mov	r0, #0
   1305c:	str	r0, [sp, #4]
   13060:	ldrb	r0, [r1]
   13064:	mov	r8, #1
   13068:	cmp	r0, #0
   1306c:	beq	130b8 <error@@Base+0x938>
   13070:	mov	r5, r1
   13074:	add	r7, sp, #4
   13078:	mov	r0, r5
   1307c:	mvn	r1, #0
   13080:	mov	r2, r7
   13084:	bl	10c38 <utf8proc_iterate@plt>
   13088:	cmp	r0, #1
   1308c:	blt	130b4 <error@@Base+0x934>
   13090:	mov	r4, r0
   13094:	ldr	r2, [sp, #4]
   13098:	mov	r0, r6
   1309c:	mov	r1, #0
   130a0:	bl	12a34 <error@@Base+0x2b4>
   130a4:	ldrb	r0, [r5, r4]!
   130a8:	cmp	r0, #0
   130ac:	bne	13078 <error@@Base+0x8f8>
   130b0:	b	130b8 <error@@Base+0x938>
   130b4:	mov	r8, #0
   130b8:	mov	r0, r8
   130bc:	sub	sp, fp, #24
   130c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130c4:	push	{r4, sl, fp, lr}
   130c8:	add	fp, sp, #8
   130cc:	mov	r4, r0
   130d0:	bl	10bc0 <utf8proc_get_property@plt>
   130d4:	cmp	r4, #10
   130d8:	ble	130f4 <error@@Base+0x974>
   130dc:	sub	r1, r4, #11
   130e0:	cmp	r1, #3
   130e4:	bcc	13110 <error@@Base+0x990>
   130e8:	cmp	r4, #160	; 0xa0
   130ec:	beq	13110 <error@@Base+0x990>
   130f0:	b	1311c <error@@Base+0x99c>
   130f4:	cmp	r4, #9
   130f8:	beq	13110 <error@@Base+0x990>
   130fc:	mov	r1, #0
   13100:	cmp	r4, #10
   13104:	bne	1311c <error@@Base+0x99c>
   13108:	mov	r0, r1
   1310c:	pop	{r4, sl, fp, pc}
   13110:	mov	r1, #1
   13114:	mov	r0, r1
   13118:	pop	{r4, sl, fp, pc}
   1311c:	ldrsh	r0, [r0]
   13120:	sub	r0, r0, #23
   13124:	mov	r1, #0
   13128:	cmp	r0, #3
   1312c:	movwcc	r1, #1
   13130:	mov	r0, r1
   13134:	pop	{r4, sl, fp, pc}
   13138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1313c:	mov	r7, r0
   13140:	ldr	r6, [pc, #72]	; 13190 <error@@Base+0xa10>
   13144:	ldr	r5, [pc, #72]	; 13194 <error@@Base+0xa14>
   13148:	add	r6, pc, r6
   1314c:	add	r5, pc, r5
   13150:	sub	r6, r6, r5
   13154:	mov	r8, r1
   13158:	mov	r9, r2
   1315c:	bl	10b64 <calloc@plt-0x20>
   13160:	asrs	r6, r6, #2
   13164:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13168:	mov	r4, #0
   1316c:	add	r4, r4, #1
   13170:	ldr	r3, [r5], #4
   13174:	mov	r2, r9
   13178:	mov	r1, r8
   1317c:	mov	r0, r7
   13180:	blx	r3
   13184:	cmp	r6, r4
   13188:	bne	1316c <error@@Base+0x9ec>
   1318c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13190:	andeq	r3, r1, ip, lsr #25
   13194:	andeq	r3, r1, r4, lsr #25
   13198:	bx	lr
   1319c:	mov	r2, r1
   131a0:	mov	r1, r0
   131a4:	mov	r0, #3
   131a8:	b	10c14 <__xstat@plt>

Disassembly of section .fini:

000131ac <.fini>:
   131ac:	push	{r3, lr}
   131b0:	pop	{r3, pc}
