
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

0001059c <.init>:
   1059c:	push	{r3, lr}
   105a0:	bl	10770 <_start@@Base+0x3c>
   105a4:	pop	{r3, pc}

Disassembly of section .plt:

000105a8 <printf@plt-0x14>:
   105a8:	push	{lr}		; (str lr, [sp, #-4]!)
   105ac:	ldr	lr, [pc, #4]	; 105b8 <printf@plt-0x4>
   105b0:	add	lr, pc, lr
   105b4:	ldr	pc, [lr, #8]!
   105b8:	andeq	r0, r1, r8, asr #20

000105bc <printf@plt>:
   105bc:	add	ip, pc, #0, 12
   105c0:	add	ip, ip, #16, 20	; 0x10000
   105c4:	ldr	pc, [ip, #2632]!	; 0xa48

000105c8 <malloc@plt>:
   105c8:	add	ip, pc, #0, 12
   105cc:	add	ip, ip, #16, 20	; 0x10000
   105d0:	ldr	pc, [ip, #2624]!	; 0xa40

000105d4 <__libc_start_main@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #16, 20	; 0x10000
   105dc:	ldr	pc, [ip, #2616]!	; 0xa38

000105e0 <__gmon_start__@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2608]!	; 0xa30

000105ec <exit@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2600]!	; 0xa28

000105f8 <__isoc99_scanf@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2592]!	; 0xa20

00010604 <abort@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2584]!	; 0xa18

Disassembly of section .text:

00010610 <main@@Base>:
   10610:	movw	r3, #2200	; 0x898
   10614:	movt	r3, #1
   10618:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1061c:	strd	r6, [sp, #8]
   10620:	movw	r6, #2220	; 0x8ac
   10624:	movt	r6, #1
   10628:	strd	r8, [sp, #16]
   1062c:	movw	r8, #2196	; 0x894
   10630:	movt	r8, #1
   10634:	strd	sl, [sp, #24]
   10638:	str	lr, [sp, #32]
   1063c:	sub	sp, sp, #20
   10640:	str	r3, [sp, #4]
   10644:	add	r1, sp, #12
   10648:	mov	r0, r8
   1064c:	bl	105f8 <__isoc99_scanf@plt>
   10650:	ldr	r0, [sp, #12]
   10654:	cmp	r0, #0
   10658:	beq	1071c <main@@Base+0x10c>
   1065c:	lsl	r0, r0, #3
   10660:	bl	105c8 <malloc@plt>
   10664:	ldr	r5, [sp, #12]
   10668:	mov	r7, r0
   1066c:	cmp	r5, #0
   10670:	subgt	r2, r0, #4
   10674:	movgt	r3, #0
   10678:	ble	10720 <main@@Base+0x110>
   1067c:	add	r3, r3, #1
   10680:	cmp	r5, r3
   10684:	str	r3, [r2, #4]!
   10688:	bne	1067c <main@@Base+0x6c>
   1068c:	ldr	r0, [sp, #4]
   10690:	bl	105bc <printf@plt>
   10694:	cmp	r5, #2
   10698:	movle	r3, r7
   1069c:	movle	r5, #4
   106a0:	ble	106f0 <main@@Base+0xe0>
   106a4:	lsl	sl, r5, #3
   106a8:	add	r4, r7, r5, lsl #2
   106ac:	rsb	fp, sl, #0
   106b0:	sub	sl, sl, #8
   106b4:	add	r2, fp, #4
   106b8:	add	sl, sl, r7
   106bc:	sub	r9, r2, r7
   106c0:	sub	fp, fp, r7
   106c4:	mov	r0, r6
   106c8:	ldr	r1, [fp, r4, lsl #1]
   106cc:	bl	105bc <printf@plt>
   106d0:	ldr	r3, [r9, r4, lsl #1]
   106d4:	str	r3, [r4], #4
   106d8:	cmp	sl, r4
   106dc:	bne	106c4 <main@@Base+0xb4>
   106e0:	lsl	r5, r5, #3
   106e4:	sub	r5, r5, #16
   106e8:	add	r3, r7, r5
   106ec:	add	r5, r5, #4
   106f0:	mov	r0, r8
   106f4:	ldr	r1, [r3]
   106f8:	bl	105bc <printf@plt>
   106fc:	movw	r0, #2228	; 0x8b4
   10700:	movt	r0, #1
   10704:	bl	105bc <printf@plt>
   10708:	movw	r0, #2248	; 0x8c8
   1070c:	movt	r0, #1
   10710:	ldr	r1, [r7, r5]
   10714:	bl	105bc <printf@plt>
   10718:	b	10644 <main@@Base+0x34>
   1071c:	bl	105ec <exit@plt>
   10720:	ldr	r0, [sp, #4]
   10724:	mov	r5, #4
   10728:	bl	105bc <printf@plt>
   1072c:	mov	r3, r7
   10730:	b	106f0 <main@@Base+0xe0>

00010734 <_start@@Base>:
   10734:	mov	fp, #0
   10738:	mov	lr, #0
   1073c:	pop	{r1}		; (ldr r1, [sp], #4)
   10740:	mov	r2, sp
   10744:	push	{r2}		; (str r2, [sp, #-4]!)
   10748:	push	{r0}		; (str r0, [sp, #-4]!)
   1074c:	ldr	ip, [pc, #16]	; 10764 <_start@@Base+0x30>
   10750:	push	{ip}		; (str ip, [sp, #-4]!)
   10754:	ldr	r0, [pc, #12]	; 10768 <_start@@Base+0x34>
   10758:	ldr	r3, [pc, #12]	; 1076c <_start@@Base+0x38>
   1075c:	bl	105d4 <__libc_start_main@plt>
   10760:	bl	10604 <abort@plt>
   10764:	andeq	r0, r1, r4, lsl #17
   10768:	andeq	r0, r1, r0, lsl r6
   1076c:	andeq	r0, r1, r4, lsr #16
   10770:	ldr	r3, [pc, #20]	; 1078c <_start@@Base+0x58>
   10774:	ldr	r2, [pc, #20]	; 10790 <_start@@Base+0x5c>
   10778:	add	r3, pc, r3
   1077c:	ldr	r2, [r3, r2]
   10780:	cmp	r2, #0
   10784:	bxeq	lr
   10788:	b	105e0 <__gmon_start__@plt>
   1078c:	andeq	r0, r1, r0, lsl #17
   10790:	andeq	r0, r0, r8, lsr #32
   10794:	ldr	r0, [pc, #24]	; 107b4 <_start@@Base+0x80>
   10798:	ldr	r3, [pc, #24]	; 107b8 <_start@@Base+0x84>
   1079c:	cmp	r3, r0
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0x88>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r1, r2, r4, lsr r0
   107b8:	andeq	r1, r2, r4, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	ldr	r0, [pc, #36]	; 107ec <_start@@Base+0xb8>
   107c4:	ldr	r1, [pc, #36]	; 107f0 <_start@@Base+0xbc>
   107c8:	sub	r1, r1, r0
   107cc:	asr	r1, r1, #2
   107d0:	add	r1, r1, r1, lsr #31
   107d4:	asrs	r1, r1, #1
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0xc0>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, r4, lsr r0
   107f0:	andeq	r1, r2, r4, lsr r0
   107f4:	andeq	r0, r0, r0
   107f8:	push	{r4, lr}
   107fc:	ldr	r4, [pc, #24]	; 1081c <_start@@Base+0xe8>
   10800:	ldrb	r3, [r4]
   10804:	cmp	r3, #0
   10808:	popne	{r4, pc}
   1080c:	bl	10794 <_start@@Base+0x60>
   10810:	mov	r3, #1
   10814:	strb	r3, [r4]
   10818:	pop	{r4, pc}
   1081c:	andeq	r1, r2, r4, lsr r0
   10820:	b	107c0 <_start@@Base+0x8c>

00010824 <__libc_csu_init@@Base>:
   10824:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10828:	mov	r7, r0
   1082c:	ldr	r6, [pc, #72]	; 1087c <__libc_csu_init@@Base+0x58>
   10830:	ldr	r5, [pc, #72]	; 10880 <__libc_csu_init@@Base+0x5c>
   10834:	add	r6, pc, r6
   10838:	add	r5, pc, r5
   1083c:	sub	r6, r6, r5
   10840:	mov	r8, r1
   10844:	mov	r9, r2
   10848:	bl	1059c <printf@plt-0x20>
   1084c:	asrs	r6, r6, #2
   10850:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10854:	mov	r4, #0
   10858:	add	r4, r4, #1
   1085c:	ldr	r3, [r5], #4
   10860:	mov	r2, r9
   10864:	mov	r1, r8
   10868:	mov	r0, r7
   1086c:	blx	r3
   10870:	cmp	r6, r4
   10874:	bne	10858 <__libc_csu_init@@Base+0x34>
   10878:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1087c:	ldrdeq	r0, [r1], -r8
   10880:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00010884 <__libc_csu_fini@@Base>:
   10884:	bx	lr

Disassembly of section .fini:

00010888 <.fini>:
   10888:	push	{r3, lr}
   1088c:	pop	{r3, pc}
