
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011824 <.init>:
   11824:	push	{r3, lr}
   11828:	bl	11a3c <_start@@Base+0x3c>
   1182c:	pop	{r3, pc}

Disassembly of section .plt:

00011830 <fdopen@plt-0x14>:
   11830:	push	{lr}		; (str lr, [sp, #-4]!)
   11834:	ldr	lr, [pc, #4]	; 11840 <fdopen@plt-0x4>
   11838:	add	lr, pc, lr
   1183c:	ldr	pc, [lr, #8]!
   11840:	andeq	r7, r1, r0, asr #15

00011844 <fdopen@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #94208	; 0x17000
   1184c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011850 <raise@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #94208	; 0x17000
   11858:	ldr	pc, [ip, #1976]!	; 0x7b8

0001185c <setbuf@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #94208	; 0x17000
   11864:	ldr	pc, [ip, #1968]!	; 0x7b0

00011868 <printf@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #94208	; 0x17000
   11870:	ldr	pc, [ip, #1960]!	; 0x7a8

00011874 <fflush@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #94208	; 0x17000
   1187c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011880 <free@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #94208	; 0x17000
   11888:	ldr	pc, [ip, #1944]!	; 0x798

0001188c <memcpy@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #94208	; 0x17000
   11894:	ldr	pc, [ip, #1936]!	; 0x790

00011898 <ftell@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #94208	; 0x17000
   118a0:	ldr	pc, [ip, #1928]!	; 0x788

000118a4 <fwrite@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #94208	; 0x17000
   118ac:	ldr	pc, [ip, #1920]!	; 0x780

000118b0 <strcpy@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #94208	; 0x17000
   118b8:	ldr	pc, [ip, #1912]!	; 0x778

000118bc <fread@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #94208	; 0x17000
   118c4:	ldr	pc, [ip, #1904]!	; 0x770

000118c8 <getenv@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #94208	; 0x17000
   118d0:	ldr	pc, [ip, #1896]!	; 0x768

000118d4 <puts@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #94208	; 0x17000
   118dc:	ldr	pc, [ip, #1888]!	; 0x760

000118e0 <malloc@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #94208	; 0x17000
   118e8:	ldr	pc, [ip, #1880]!	; 0x758

000118ec <__libc_start_main@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #94208	; 0x17000
   118f4:	ldr	pc, [ip, #1872]!	; 0x750

000118f8 <__fxstat@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #94208	; 0x17000
   11900:	ldr	pc, [ip, #1864]!	; 0x748

00011904 <__gmon_start__@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #94208	; 0x17000
   1190c:	ldr	pc, [ip, #1856]!	; 0x740

00011910 <open@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #94208	; 0x17000
   11918:	ldr	pc, [ip, #1848]!	; 0x738

0001191c <getpid@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #94208	; 0x17000
   11924:	ldr	pc, [ip, #1840]!	; 0x730

00011928 <exit@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #94208	; 0x17000
   11930:	ldr	pc, [ip, #1832]!	; 0x728

00011934 <strlen@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #94208	; 0x17000
   1193c:	ldr	pc, [ip, #1824]!	; 0x720

00011940 <fprintf@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #94208	; 0x17000
   11948:	ldr	pc, [ip, #1816]!	; 0x718

0001194c <__errno_location@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #94208	; 0x17000
   11954:	ldr	pc, [ip, #1808]!	; 0x710

00011958 <__cxa_atexit@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #94208	; 0x17000
   11960:	ldr	pc, [ip, #1800]!	; 0x708

00011964 <mkdir@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #94208	; 0x17000
   1196c:	ldr	pc, [ip, #1792]!	; 0x700

00011970 <fcntl@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #94208	; 0x17000
   11978:	ldr	pc, [ip, #1784]!	; 0x6f8

0001197c <memset@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #94208	; 0x17000
   11984:	ldr	pc, [ip, #1776]!	; 0x6f0

00011988 <access@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #94208	; 0x17000
   11990:	ldr	pc, [ip, #1768]!	; 0x6e8

00011994 <fclose@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #94208	; 0x17000
   1199c:	ldr	pc, [ip, #1760]!	; 0x6e0

000119a0 <strnlen@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #94208	; 0x17000
   119a8:	ldr	pc, [ip, #1752]!	; 0x6d8

000119ac <vfprintf@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #94208	; 0x17000
   119b4:	ldr	pc, [ip, #1744]!	; 0x6d0

000119b8 <atoi@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #94208	; 0x17000
   119c0:	ldr	pc, [ip, #1736]!	; 0x6c8

000119c4 <fseek@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #94208	; 0x17000
   119cc:	ldr	pc, [ip, #1728]!	; 0x6c0

000119d0 <strncmp@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #94208	; 0x17000
   119d8:	ldr	pc, [ip, #1720]!	; 0x6b8

000119dc <abort@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #94208	; 0x17000
   119e4:	ldr	pc, [ip, #1712]!	; 0x6b0

000119e8 <close@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #94208	; 0x17000
   119f0:	ldr	pc, [ip, #1704]!	; 0x6a8

000119f4 <__assert_fail@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #94208	; 0x17000
   119fc:	ldr	pc, [ip, #1696]!	; 0x6a0

Disassembly of section .text:

00011a00 <_start@@Base>:
   11a00:	mov	fp, #0
   11a04:	mov	lr, #0
   11a08:	pop	{r1}		; (ldr r1, [sp], #4)
   11a0c:	mov	r2, sp
   11a10:	push	{r2}		; (str r2, [sp, #-4]!)
   11a14:	push	{r0}		; (str r0, [sp, #-4]!)
   11a18:	ldr	ip, [pc, #16]	; 11a30 <_start@@Base+0x30>
   11a1c:	push	{ip}		; (str ip, [sp, #-4]!)
   11a20:	ldr	r0, [pc, #12]	; 11a34 <_start@@Base+0x34>
   11a24:	ldr	r3, [pc, #12]	; 11a38 <_start@@Base+0x38>
   11a28:	bl	118ec <__libc_start_main@plt>
   11a2c:	bl	119dc <abort@plt>
   11a30:	andeq	r7, r1, r0, lsr pc
   11a34:	andeq	r3, r1, ip, ror #23
   11a38:	ldrdeq	r7, [r1], -r0
   11a3c:	ldr	r3, [pc, #20]	; 11a58 <_start@@Base+0x58>
   11a40:	ldr	r2, [pc, #20]	; 11a5c <_start@@Base+0x5c>
   11a44:	add	r3, pc, r3
   11a48:	ldr	r2, [r3, r2]
   11a4c:	cmp	r2, #0
   11a50:	bxeq	lr
   11a54:	b	11904 <__gmon_start__@plt>
   11a58:			; <UNDEFINED> instruction: 0x000175b4
   11a5c:	andeq	r0, r0, r4, lsr #1
   11a60:	ldr	r3, [pc, #28]	; 11a84 <_start@@Base+0x84>
   11a64:	ldr	r0, [pc, #28]	; 11a88 <_start@@Base+0x88>
   11a68:	sub	r3, r3, r0
   11a6c:	cmp	r3, #6
   11a70:	bxls	lr
   11a74:	ldr	r3, [pc, #16]	; 11a8c <_start@@Base+0x8c>
   11a78:	cmp	r3, #0
   11a7c:	bxeq	lr
   11a80:	bx	r3
   11a84:	andeq	r9, r2, r7, lsl #19
   11a88:	andeq	r9, r2, r4, lsl #19
   11a8c:	andeq	r0, r0, r0
   11a90:	ldr	r1, [pc, #36]	; 11abc <_start@@Base+0xbc>
   11a94:	ldr	r0, [pc, #36]	; 11ac0 <_start@@Base+0xc0>
   11a98:	sub	r1, r1, r0
   11a9c:	asr	r1, r1, #2
   11aa0:	add	r1, r1, r1, lsr #31
   11aa4:	asrs	r1, r1, #1
   11aa8:	bxeq	lr
   11aac:	ldr	r3, [pc, #16]	; 11ac4 <_start@@Base+0xc4>
   11ab0:	cmp	r3, #0
   11ab4:	bxeq	lr
   11ab8:	bx	r3
   11abc:	andeq	r9, r2, r4, lsl #19
   11ac0:	andeq	r9, r2, r4, lsl #19
   11ac4:	andeq	r0, r0, r0
   11ac8:	push	{r4, lr}
   11acc:	ldr	r4, [pc, #24]	; 11aec <_start@@Base+0xec>
   11ad0:	ldrb	r3, [r4]
   11ad4:	cmp	r3, #0
   11ad8:	popne	{r4, pc}
   11adc:	bl	11a60 <_start@@Base+0x60>
   11ae0:	mov	r3, #1
   11ae4:	strb	r3, [r4]
   11ae8:	pop	{r4, pc}
   11aec:	muleq	r2, r0, r9
   11af0:	ldr	r0, [pc, #40]	; 11b20 <_start@@Base+0x120>
   11af4:	ldr	r3, [r0]
   11af8:	cmp	r3, #0
   11afc:	bne	11b04 <_start@@Base+0x104>
   11b00:	b	11a90 <_start@@Base+0x90>
   11b04:	ldr	r3, [pc, #24]	; 11b24 <_start@@Base+0x124>
   11b08:	cmp	r3, #0
   11b0c:	beq	11b00 <_start@@Base+0x100>
   11b10:	push	{r4, lr}
   11b14:	blx	r3
   11b18:	pop	{r4, lr}
   11b1c:	b	11a90 <_start@@Base+0x90>
   11b20:	andeq	r8, r2, r4, lsl pc
   11b24:	andeq	r0, r0, r0

00011b28 <next@@Base>:
   11b28:	ldr	r3, [pc, #348]	; 11c8c <next@@Base+0x164>
   11b2c:	str	r0, [r3]
   11b30:	ldr	r3, [r3, #204]	; 0xcc
   11b34:	cmp	r3, #49	; 0x31
   11b38:	bhi	11bd0 <next@@Base+0xa8>
   11b3c:	add	r3, r3, #1
   11b40:	ldr	r2, [pc, #324]	; 11c8c <next@@Base+0x164>
   11b44:	str	r0, [r2, r3, lsl #2]
   11b48:	ldr	r2, [pc, #316]	; 11c8c <next@@Base+0x164>
   11b4c:	ldr	r3, [r2, #204]	; 0xcc
   11b50:	add	r3, r3, #1
   11b54:	str	r3, [r2, #204]	; 0xcc
   11b58:	ldr	r3, [pc, #304]	; 11c90 <next@@Base+0x168>
   11b5c:	ldr	r3, [r3, #200]	; 0xc8
   11b60:	cmp	r3, #49	; 0x31
   11b64:	bhi	11b90 <next@@Base+0x68>
   11b68:	ldr	r2, [pc, #288]	; 11c90 <next@@Base+0x168>
   11b6c:	add	r1, r3, #1
   11b70:	str	r1, [r2, #200]	; 0xc8
   11b74:	ldr	r1, [pc, #280]	; 11c94 <next@@Base+0x16c>
   11b78:	str	r1, [r2, r3, lsl #2]
   11b7c:	ldr	r1, [pc, #276]	; 11c98 <next@@Base+0x170>
   11b80:	ldrd	r2, [r1, #8]
   11b84:	adds	r2, r2, #1
   11b88:	adc	r3, r3, #0
   11b8c:	strd	r2, [r1, #8]
   11b90:	ldr	r3, [pc, #244]	; 11c8c <next@@Base+0x164>
   11b94:	ldr	r1, [r3, #232]	; 0xe8
   11b98:	cmp	r1, #0
   11b9c:	beq	11bf8 <next@@Base+0xd0>
   11ba0:	push	{r4, lr}
   11ba4:	ldr	r4, [pc, #236]	; 11c98 <next@@Base+0x170>
   11ba8:	ldrd	r2, [r4, #16]
   11bac:	adds	r2, r2, #1
   11bb0:	adc	r3, r3, #0
   11bb4:	strd	r2, [r4, #16]
   11bb8:	blx	r1
   11bbc:	ldrd	r2, [r4, #24]
   11bc0:	adds	r2, r2, #1
   11bc4:	adc	r3, r3, #0
   11bc8:	strd	r2, [r4, #24]
   11bcc:	pop	{r4, pc}
   11bd0:	ldr	r2, [pc, #180]	; 11c8c <next@@Base+0x164>
   11bd4:	ldr	r3, [r2, #212]	; 0xd4
   11bd8:	add	r3, r3, #1
   11bdc:	str	r3, [r2, #212]	; 0xd4
   11be0:	ldr	r1, [pc, #176]	; 11c98 <next@@Base+0x170>
   11be4:	ldrd	r2, [r1]
   11be8:	adds	r2, r2, #1
   11bec:	adc	r3, r3, #0
   11bf0:	strd	r2, [r1]
   11bf4:	b	11b48 <next@@Base+0x20>
   11bf8:	ldr	r3, [pc, #140]	; 11c8c <next@@Base+0x164>
   11bfc:	ldr	r3, [r3, #220]	; 0xdc
   11c00:	cmp	r3, #0
   11c04:	beq	11c6c <next@@Base+0x144>
   11c08:	ldr	r2, [pc, #124]	; 11c8c <next@@Base+0x164>
   11c0c:	ldr	r2, [r2, #224]	; 0xe0
   11c10:	cmp	r3, r2
   11c14:	ble	11c44 <next@@Base+0x11c>
   11c18:	ldr	r3, [pc, #108]	; 11c8c <next@@Base+0x164>
   11c1c:	ldr	r1, [r3, #228]	; 0xe4
   11c20:	add	r0, r2, #1
   11c24:	str	r0, [r3, #224]	; 0xe0
   11c28:	ldr	r0, [r1, r2, lsl #2]
   11c2c:	ldr	r1, [pc, #100]	; 11c98 <next@@Base+0x170>
   11c30:	ldrd	r2, [r1, #32]
   11c34:	adds	r2, r2, #1
   11c38:	adc	r3, r3, #0
   11c3c:	strd	r2, [r1, #32]
   11c40:	bx	lr
   11c44:	sub	r3, r3, #-1073741823	; 0xc0000001
   11c48:	ldr	r2, [pc, #60]	; 11c8c <next@@Base+0x164>
   11c4c:	ldr	r2, [r2, #228]	; 0xe4
   11c50:	ldr	r0, [r2, r3, lsl #2]
   11c54:	ldr	r1, [pc, #60]	; 11c98 <next@@Base+0x170>
   11c58:	ldrd	r2, [r1, #40]	; 0x28
   11c5c:	adds	r2, r2, #1
   11c60:	adc	r3, r3, #0
   11c64:	strd	r2, [r1, #40]	; 0x28
   11c68:	bx	lr
   11c6c:	ldr	r3, [pc, #24]	; 11c8c <next@@Base+0x164>
   11c70:	ldr	r0, [r3, #216]	; 0xd8
   11c74:	ldr	r1, [pc, #28]	; 11c98 <next@@Base+0x170>
   11c78:	ldrd	r2, [r1, #48]	; 0x30
   11c7c:	adds	r2, r2, #1
   11c80:	adc	r3, r3, #0
   11c84:	strd	r2, [r1, #48]	; 0x30
   11c88:	bx	lr
   11c8c:	andeq	sl, r2, r8, lsr r9
   11c90:	andeq	sl, r2, r4, lsr #20
   11c94:	andeq	r1, r1, r8, lsr #22
   11c98:	muleq	r2, r8, r9

00011c9c <push_back@@Base>:
   11c9c:	push	{r4, r5, r6, lr}
   11ca0:	ldr	r3, [pc, #232]	; 11d90 <push_back@@Base+0xf4>
   11ca4:	str	r0, [r3]
   11ca8:	str	r1, [r3, #204]	; 0xcc
   11cac:	ldr	r3, [r3, #408]	; 0x198
   11cb0:	cmp	r3, #49	; 0x31
   11cb4:	bhi	11d68 <push_back@@Base+0xcc>
   11cb8:	add	r3, r3, #1
   11cbc:	ldr	r2, [pc, #204]	; 11d90 <push_back@@Base+0xf4>
   11cc0:	str	r0, [r2, r3, lsl #2]
   11cc4:	ldr	r3, [r2, #408]	; 0x198
   11cc8:	add	r3, r3, #52	; 0x34
   11ccc:	str	r1, [r2, r3, lsl #2]
   11cd0:	ldr	ip, [pc, #188]	; 11d94 <push_back@@Base+0xf8>
   11cd4:	ldrd	r2, [ip, #56]	; 0x38
   11cd8:	adds	r2, r2, #1
   11cdc:	adc	r3, r3, #0
   11ce0:	strd	r2, [ip, #56]	; 0x38
   11ce4:	ldr	r2, [pc, #164]	; 11d90 <push_back@@Base+0xf4>
   11ce8:	ldr	r3, [r2, #408]	; 0x198
   11cec:	add	r3, r3, #1
   11cf0:	str	r3, [r2, #408]	; 0x198
   11cf4:	ldr	r3, [pc, #156]	; 11d98 <push_back@@Base+0xfc>
   11cf8:	ldr	r3, [r3, #200]	; 0xc8
   11cfc:	cmp	r3, #49	; 0x31
   11d00:	bhi	11d2c <push_back@@Base+0x90>
   11d04:	ldr	r2, [pc, #140]	; 11d98 <push_back@@Base+0xfc>
   11d08:	add	ip, r3, #1
   11d0c:	str	ip, [r2, #200]	; 0xc8
   11d10:	ldr	ip, [pc, #132]	; 11d9c <push_back@@Base+0x100>
   11d14:	str	ip, [r2, r3, lsl #2]
   11d18:	ldr	ip, [pc, #116]	; 11d94 <push_back@@Base+0xf8>
   11d1c:	ldrd	r2, [ip, #72]	; 0x48
   11d20:	adds	r2, r2, #1
   11d24:	adc	r3, r3, #0
   11d28:	strd	r2, [ip, #72]	; 0x48
   11d2c:	ldr	r3, [pc, #92]	; 11d90 <push_back@@Base+0xf4>
   11d30:	ldr	r5, [r3, #420]	; 0x1a4
   11d34:	cmp	r5, #0
   11d38:	popeq	{r4, r5, r6, pc}
   11d3c:	ldr	r4, [pc, #80]	; 11d94 <push_back@@Base+0xf8>
   11d40:	ldrd	r2, [r4, #80]	; 0x50
   11d44:	adds	r2, r2, #1
   11d48:	adc	r3, r3, #0
   11d4c:	strd	r2, [r4, #80]	; 0x50
   11d50:	blx	r5
   11d54:	ldrd	r2, [r4, #88]	; 0x58
   11d58:	adds	r2, r2, #1
   11d5c:	adc	r3, r3, #0
   11d60:	strd	r2, [r4, #88]	; 0x58
   11d64:	pop	{r4, r5, r6, pc}
   11d68:	ldr	r2, [pc, #32]	; 11d90 <push_back@@Base+0xf4>
   11d6c:	ldr	r3, [r2, #416]	; 0x1a0
   11d70:	add	r3, r3, #1
   11d74:	str	r3, [r2, #416]	; 0x1a0
   11d78:	ldr	ip, [pc, #20]	; 11d94 <push_back@@Base+0xf8>
   11d7c:	ldrd	r2, [ip, #64]	; 0x40
   11d80:	adds	r2, r2, #1
   11d84:	adc	r3, r3, #0
   11d88:	strd	r2, [ip, #64]	; 0x40
   11d8c:	b	11ce4 <push_back@@Base+0x48>
   11d90:	muleq	r2, r0, r7
   11d94:	muleq	r2, r8, r9
   11d98:	andeq	sl, r2, r4, lsr #20
   11d9c:	muleq	r1, ip, ip

00011da0 <next_reset@@Base>:
   11da0:	push	{r4, lr}
   11da4:	ldr	r1, [pc, #44]	; 11dd8 <next_reset@@Base+0x38>
   11da8:	ldrd	r2, [r1, #96]	; 0x60
   11dac:	adds	r2, r2, #1
   11db0:	adc	r3, r3, #0
   11db4:	strd	r2, [r1, #96]	; 0x60
   11db8:	ldr	r4, [pc, #28]	; 11ddc <next_reset@@Base+0x3c>
   11dbc:	mov	r2, #236	; 0xec
   11dc0:	mov	r1, #0
   11dc4:	mov	r0, r4
   11dc8:	bl	1197c <memset@plt>
   11dcc:	mov	r3, #50	; 0x32
   11dd0:	str	r3, [r4, #208]	; 0xd0
   11dd4:	pop	{r4, pc}
   11dd8:	muleq	r2, r8, r9
   11ddc:	andeq	sl, r2, r8, lsr r9

00011de0 <push_back_reset@@Base>:
   11de0:	push	{r4, lr}
   11de4:	ldr	r1, [pc, #44]	; 11e18 <push_back_reset@@Base+0x38>
   11de8:	ldrd	r2, [r1, #104]	; 0x68
   11dec:	adds	r2, r2, #1
   11df0:	adc	r3, r3, #0
   11df4:	strd	r2, [r1, #104]	; 0x68
   11df8:	ldr	r4, [pc, #28]	; 11e1c <push_back_reset@@Base+0x3c>
   11dfc:	mov	r2, #424	; 0x1a8
   11e00:	mov	r1, #0
   11e04:	mov	r0, r4
   11e08:	bl	1197c <memset@plt>
   11e0c:	mov	r3, #50	; 0x32
   11e10:	str	r3, [r4, #412]	; 0x19c
   11e14:	pop	{r4, pc}
   11e18:	muleq	r2, r8, r9
   11e1c:	muleq	r2, r0, r7

00011e20 <setup@@Base>:
   11e20:	push	{r4, lr}
   11e24:	ldr	r4, [pc, #56]	; 11e64 <setup@@Base+0x44>
   11e28:	ldrd	r2, [r4, #112]	; 0x70
   11e2c:	adds	r2, r2, #1
   11e30:	adc	r3, r3, #0
   11e34:	strd	r2, [r4, #112]	; 0x70
   11e38:	bl	11da0 <next_reset@@Base>
   11e3c:	ldrd	r2, [r4, #120]	; 0x78
   11e40:	adds	r2, r2, #1
   11e44:	adc	r3, r3, #0
   11e48:	strd	r2, [r4, #120]	; 0x78
   11e4c:	bl	11de0 <push_back_reset@@Base>
   11e50:	ldrd	r2, [r4, #128]	; 0x80
   11e54:	adds	r2, r2, #1
   11e58:	adc	r3, r3, #0
   11e5c:	strd	r2, [r4, #128]	; 0x80
   11e60:	pop	{r4, pc}
   11e64:	muleq	r2, r8, r9

00011e68 <no_int_as_first_stuff@@Base>:
   11e68:	push	{r4, r5, lr}
   11e6c:	sub	sp, sp, #20
   11e70:	ldr	r4, [pc, #216]	; 11f50 <no_int_as_first_stuff@@Base+0xe8>
   11e74:	ldrd	r2, [r4, #136]	; 0x88
   11e78:	adds	r2, r2, #1
   11e7c:	adc	r3, r3, #0
   11e80:	strd	r2, [r4, #136]	; 0x88
   11e84:	add	r1, sp, #4
   11e88:	mov	r0, sp
   11e8c:	bl	14f30 <init_grammar@@Base>
   11e90:	ldrd	r2, [r4, #144]	; 0x90
   11e94:	adds	r2, r2, #1
   11e98:	adc	r3, r3, #0
   11e9c:	strd	r2, [r4, #144]	; 0x90
   11ea0:	mov	r0, #4
   11ea4:	bl	118e0 <malloc@plt>
   11ea8:	mov	r5, r0
   11eac:	bl	142a0 <init_token_opar@@Base>
   11eb0:	ldrd	r2, [r4, #152]	; 0x98
   11eb4:	adds	r2, r2, #1
   11eb8:	adc	r3, r3, #0
   11ebc:	strd	r2, [r4, #152]	; 0x98
   11ec0:	ldr	r4, [pc, #140]	; 11f54 <no_int_as_first_stuff@@Base+0xec>
   11ec4:	str	r5, [r4, #216]	; 0xd8
   11ec8:	mov	r0, sp
   11ecc:	bl	15a80 <read_function_ast_node@@Base>
   11ed0:	ldr	r3, [r4, #204]	; 0xcc
   11ed4:	cmp	r3, #1
   11ed8:	bne	11f00 <no_int_as_first_stuff@@Base+0x98>
   11edc:	cmp	r0, #0
   11ee0:	bne	11f28 <no_int_as_first_stuff@@Base+0xc0>
   11ee4:	ldr	r1, [pc, #100]	; 11f50 <no_int_as_first_stuff@@Base+0xe8>
   11ee8:	ldrd	r2, [r1, #168]	; 0xa8
   11eec:	adds	r2, r2, #1
   11ef0:	adc	r3, r3, #0
   11ef4:	strd	r2, [r1, #168]	; 0xa8
   11ef8:	add	sp, sp, #20
   11efc:	pop	{r4, r5, pc}
   11f00:	ldr	r1, [pc, #72]	; 11f50 <no_int_as_first_stuff@@Base+0xe8>
   11f04:	ldrd	r2, [r1, #160]	; 0xa0
   11f08:	adds	r2, r2, #1
   11f0c:	adc	r3, r3, #0
   11f10:	strd	r2, [r1, #160]	; 0xa0
   11f14:	ldr	r3, [pc, #60]	; 11f58 <no_int_as_first_stuff@@Base+0xf0>
   11f18:	mov	r2, #41	; 0x29
   11f1c:	ldr	r1, [pc, #56]	; 11f5c <no_int_as_first_stuff@@Base+0xf4>
   11f20:	ldr	r0, [pc, #56]	; 11f60 <no_int_as_first_stuff@@Base+0xf8>
   11f24:	bl	119f4 <__assert_fail@plt>
   11f28:	ldr	r1, [pc, #32]	; 11f50 <no_int_as_first_stuff@@Base+0xe8>
   11f2c:	ldrd	r2, [r1, #176]	; 0xb0
   11f30:	adds	r2, r2, #1
   11f34:	adc	r3, r3, #0
   11f38:	strd	r2, [r1, #176]	; 0xb0
   11f3c:	ldr	r3, [pc, #20]	; 11f58 <no_int_as_first_stuff@@Base+0xf0>
   11f40:	mov	r2, #42	; 0x2a
   11f44:	ldr	r1, [pc, #16]	; 11f5c <no_int_as_first_stuff@@Base+0xf4>
   11f48:	ldr	r0, [pc, #20]	; 11f64 <no_int_as_first_stuff@@Base+0xfc>
   11f4c:	bl	119f4 <__assert_fail@plt>
   11f50:	muleq	r2, r8, r9
   11f54:	andeq	sl, r2, r8, lsr r9
   11f58:	andeq	r7, r1, r8, ror #30
   11f5c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11f60:	andeq	r8, r1, ip, lsl r1
   11f64:	andeq	r8, r1, r8, lsr r1

00011f68 <int_but_not_followed_by_function@@Base>:
   11f68:	push	{r4, r5, lr}
   11f6c:	sub	sp, sp, #20
   11f70:	ldr	r4, [pc, #268]	; 12084 <int_but_not_followed_by_function@@Base+0x11c>
   11f74:	ldrd	r2, [r4, #184]	; 0xb8
   11f78:	adds	r2, r2, #1
   11f7c:	adc	r3, r3, #0
   11f80:	strd	r2, [r4, #184]	; 0xb8
   11f84:	add	r1, sp, #4
   11f88:	mov	r0, sp
   11f8c:	bl	14f30 <init_grammar@@Base>
   11f90:	ldrd	r2, [r4, #192]	; 0xc0
   11f94:	adds	r2, r2, #1
   11f98:	adc	r3, r3, #0
   11f9c:	strd	r2, [r4, #192]	; 0xc0
   11fa0:	mov	r0, #8
   11fa4:	bl	118e0 <malloc@plt>
   11fa8:	mov	r5, r0
   11fac:	mov	r0, #4
   11fb0:	bl	118e0 <malloc@plt>
   11fb4:	str	r0, [r5]
   11fb8:	bl	1422c <init_token_int_type@@Base>
   11fbc:	ldrd	r2, [r4, #200]	; 0xc8
   11fc0:	adds	r2, r2, #1
   11fc4:	adc	r3, r3, #0
   11fc8:	strd	r2, [r4, #200]	; 0xc8
   11fcc:	mov	r0, #4
   11fd0:	bl	118e0 <malloc@plt>
   11fd4:	str	r0, [r5, #4]
   11fd8:	bl	142a0 <init_token_opar@@Base>
   11fdc:	ldrd	r2, [r4, #208]	; 0xd0
   11fe0:	adds	r2, r2, #1
   11fe4:	adc	r3, r3, #0
   11fe8:	strd	r2, [r4, #208]	; 0xd0
   11fec:	ldr	r4, [pc, #148]	; 12088 <int_but_not_followed_by_function@@Base+0x120>
   11ff0:	str	r5, [r4, #228]	; 0xe4
   11ff4:	mov	r3, #2
   11ff8:	str	r3, [r4, #220]	; 0xdc
   11ffc:	mov	r0, sp
   12000:	bl	15a80 <read_function_ast_node@@Base>
   12004:	ldr	r3, [r4, #204]	; 0xcc
   12008:	cmp	r3, #2
   1200c:	bne	12034 <int_but_not_followed_by_function@@Base+0xcc>
   12010:	cmp	r0, #0
   12014:	bne	1205c <int_but_not_followed_by_function@@Base+0xf4>
   12018:	ldr	r1, [pc, #100]	; 12084 <int_but_not_followed_by_function@@Base+0x11c>
   1201c:	ldrd	r2, [r1, #224]	; 0xe0
   12020:	adds	r2, r2, #1
   12024:	adc	r3, r3, #0
   12028:	strd	r2, [r1, #224]	; 0xe0
   1202c:	add	sp, sp, #20
   12030:	pop	{r4, r5, pc}
   12034:	ldr	r1, [pc, #72]	; 12084 <int_but_not_followed_by_function@@Base+0x11c>
   12038:	ldrd	r2, [r1, #216]	; 0xd8
   1203c:	adds	r2, r2, #1
   12040:	adc	r3, r3, #0
   12044:	strd	r2, [r1, #216]	; 0xd8
   12048:	ldr	r3, [pc, #60]	; 1208c <int_but_not_followed_by_function@@Base+0x124>
   1204c:	mov	r2, #67	; 0x43
   12050:	ldr	r1, [pc, #56]	; 12090 <int_but_not_followed_by_function@@Base+0x128>
   12054:	ldr	r0, [pc, #56]	; 12094 <int_but_not_followed_by_function@@Base+0x12c>
   12058:	bl	119f4 <__assert_fail@plt>
   1205c:	ldr	r1, [pc, #32]	; 12084 <int_but_not_followed_by_function@@Base+0x11c>
   12060:	ldrd	r2, [r1, #232]	; 0xe8
   12064:	adds	r2, r2, #1
   12068:	adc	r3, r3, #0
   1206c:	strd	r2, [r1, #232]	; 0xe8
   12070:	ldr	r3, [pc, #20]	; 1208c <int_but_not_followed_by_function@@Base+0x124>
   12074:	mov	r2, #68	; 0x44
   12078:	ldr	r1, [pc, #16]	; 12090 <int_but_not_followed_by_function@@Base+0x128>
   1207c:	ldr	r0, [pc, #20]	; 12098 <int_but_not_followed_by_function@@Base+0x130>
   12080:	bl	119f4 <__assert_fail@plt>
   12084:	muleq	r2, r8, r9
   12088:	andeq	sl, r2, r8, lsr r9
   1208c:	andeq	r7, r1, r0, lsl #31
   12090:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12094:	andeq	r8, r1, r4, asr #2
   12098:	andeq	r8, r1, r8, lsr r1

0001209c <boolean_expression_is_read_properly@@Base>:
   1209c:	push	{r4, r5, r6, r7, lr}
   120a0:	sub	sp, sp, #20
   120a4:	ldr	r4, [pc, #488]	; 12294 <boolean_expression_is_read_properly@@Base+0x1f8>
   120a8:	ldrd	r2, [r4, #240]	; 0xf0
   120ac:	adds	r2, r2, #1
   120b0:	adc	r3, r3, #0
   120b4:	strd	r2, [r4, #240]	; 0xf0
   120b8:	mov	r0, #3
   120bc:	bl	118e0 <malloc@plt>
   120c0:	mov	r7, r0
   120c4:	mov	r3, #33	; 0x21
   120c8:	strb	r3, [r0]
   120cc:	mov	r3, #61	; 0x3d
   120d0:	strb	r3, [r0, #1]
   120d4:	mov	r3, #0
   120d8:	strb	r3, [r0, #2]
   120dc:	add	r1, sp, #4
   120e0:	mov	r0, sp
   120e4:	bl	14f30 <init_grammar@@Base>
   120e8:	ldrd	r2, [r4, #248]	; 0xf8
   120ec:	adds	r2, r2, #1
   120f0:	adc	r3, r3, #0
   120f4:	strd	r2, [r4, #248]	; 0xf8
   120f8:	mov	r0, #20
   120fc:	bl	118e0 <malloc@plt>
   12100:	mov	r5, r0
   12104:	mov	r0, #8
   12108:	bl	118e0 <malloc@plt>
   1210c:	str	r0, [r5]
   12110:	mov	r1, #2
   12114:	bl	14250 <init_token_int_value@@Base>
   12118:	add	r1, r4, #256	; 0x100
   1211c:	ldrd	r2, [r1]
   12120:	adds	r2, r2, #1
   12124:	adc	r3, r3, #0
   12128:	strd	r2, [r1]
   1212c:	mov	r0, #8
   12130:	bl	118e0 <malloc@plt>
   12134:	str	r0, [r5, #4]
   12138:	mov	r1, #2
   1213c:	bl	14250 <init_token_int_value@@Base>
   12140:	add	r6, r4, #272	; 0x110
   12144:	ldrd	r2, [r6, #-8]
   12148:	adds	r2, r2, #1
   1214c:	adc	r3, r3, #0
   12150:	strd	r2, [r6, #-8]
   12154:	mov	r0, #8
   12158:	bl	118e0 <malloc@plt>
   1215c:	str	r0, [r5, #8]
   12160:	mov	r1, r7
   12164:	bl	143e4 <init_token_boolean_op@@Base>
   12168:	ldrd	r2, [r6]
   1216c:	adds	r2, r2, #1
   12170:	adc	r3, r3, #0
   12174:	strd	r2, [r6]
   12178:	mov	r0, #8
   1217c:	bl	118e0 <malloc@plt>
   12180:	str	r0, [r5, #12]
   12184:	mov	r1, #1
   12188:	bl	14250 <init_token_int_value@@Base>
   1218c:	add	r4, r4, #288	; 0x120
   12190:	ldrd	r2, [r4, #-8]
   12194:	adds	r2, r2, #1
   12198:	adc	r3, r3, #0
   1219c:	strd	r2, [r4, #-8]
   121a0:	mov	r0, #4
   121a4:	bl	118e0 <malloc@plt>
   121a8:	str	r0, [r5, #16]
   121ac:	bl	142c4 <init_token_cpar@@Base>
   121b0:	ldrd	r2, [r4]
   121b4:	adds	r2, r2, #1
   121b8:	adc	r3, r3, #0
   121bc:	strd	r2, [r4]
   121c0:	ldr	r4, [pc, #208]	; 12298 <boolean_expression_is_read_properly@@Base+0x1fc>
   121c4:	str	r5, [r4, #228]	; 0xe4
   121c8:	mov	r3, #5
   121cc:	str	r3, [r4, #220]	; 0xdc
   121d0:	mov	r0, sp
   121d4:	bl	1557c <read_boolean_expression@@Base>
   121d8:	ldr	r3, [r4, #204]	; 0xcc
   121dc:	cmp	r3, #5
   121e0:	bne	1221c <boolean_expression_is_read_properly@@Base+0x180>
   121e4:	ldr	r3, [pc, #176]	; 1229c <boolean_expression_is_read_properly@@Base+0x200>
   121e8:	ldr	r3, [r3, #408]	; 0x198
   121ec:	cmp	r3, #1
   121f0:	bne	12244 <boolean_expression_is_read_properly@@Base+0x1a8>
   121f4:	ldr	r3, [r0]
   121f8:	cmp	r3, #5
   121fc:	bne	1226c <boolean_expression_is_read_properly@@Base+0x1d0>
   12200:	ldr	r1, [pc, #152]	; 122a0 <boolean_expression_is_read_properly@@Base+0x204>
   12204:	ldrd	r2, [r1, #-8]
   12208:	adds	r2, r2, #1
   1220c:	adc	r3, r3, #0
   12210:	strd	r2, [r1, #-8]
   12214:	add	sp, sp, #20
   12218:	pop	{r4, r5, r6, r7, pc}
   1221c:	add	r1, r6, #32
   12220:	ldrd	r2, [r1, #-8]
   12224:	adds	r2, r2, #1
   12228:	adc	r3, r3, #0
   1222c:	strd	r2, [r1, #-8]
   12230:	ldr	r3, [pc, #108]	; 122a4 <boolean_expression_is_read_properly@@Base+0x208>
   12234:	mov	r2, #105	; 0x69
   12238:	ldr	r1, [pc, #104]	; 122a8 <boolean_expression_is_read_properly@@Base+0x20c>
   1223c:	ldr	r0, [pc, #104]	; 122ac <boolean_expression_is_read_properly@@Base+0x210>
   12240:	bl	119f4 <__assert_fail@plt>
   12244:	ldr	r1, [pc, #100]	; 122b0 <boolean_expression_is_read_properly@@Base+0x214>
   12248:	ldrd	r2, [r1]
   1224c:	adds	r2, r2, #1
   12250:	adc	r3, r3, #0
   12254:	strd	r2, [r1]
   12258:	ldr	r3, [pc, #68]	; 122a4 <boolean_expression_is_read_properly@@Base+0x208>
   1225c:	mov	r2, #106	; 0x6a
   12260:	ldr	r1, [pc, #64]	; 122a8 <boolean_expression_is_read_properly@@Base+0x20c>
   12264:	ldr	r0, [pc, #72]	; 122b4 <boolean_expression_is_read_properly@@Base+0x218>
   12268:	bl	119f4 <__assert_fail@plt>
   1226c:	ldr	r1, [pc, #44]	; 122a0 <boolean_expression_is_read_properly@@Base+0x204>
   12270:	ldrd	r2, [r1]
   12274:	adds	r2, r2, #1
   12278:	adc	r3, r3, #0
   1227c:	strd	r2, [r1]
   12280:	ldr	r3, [pc, #28]	; 122a4 <boolean_expression_is_read_properly@@Base+0x208>
   12284:	mov	r2, #107	; 0x6b
   12288:	ldr	r1, [pc, #24]	; 122a8 <boolean_expression_is_read_properly@@Base+0x20c>
   1228c:	ldr	r0, [pc, #36]	; 122b8 <boolean_expression_is_read_properly@@Base+0x21c>
   12290:	bl	119f4 <__assert_fail@plt>
   12294:	muleq	r2, r8, r9
   12298:	andeq	sl, r2, r8, lsr r9
   1229c:	muleq	r2, r0, r7
   122a0:	ldrdeq	r9, [r2], -r8
   122a4:	andeq	r7, r1, r4, lsr #31
   122a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   122ac:	andeq	r8, r1, r0, ror #2
   122b0:	andeq	r9, r2, r8, asr #21
   122b4:	andeq	r8, r1, ip, ror r1
   122b8:	muleq	r1, ip, r1

000122bc <boolean_expression_complex@@Base>:
   122bc:	push	{r4, r5, r6, r7, r8, lr}
   122c0:	sub	sp, sp, #16
   122c4:	ldr	r4, [pc, #652]	; 12558 <boolean_expression_complex@@Base+0x29c>
   122c8:	ldrd	r2, [r4, #-8]
   122cc:	adds	r2, r2, #1
   122d0:	adc	r3, r3, #0
   122d4:	strd	r2, [r4, #-8]
   122d8:	mov	r0, #3
   122dc:	bl	118e0 <malloc@plt>
   122e0:	mov	r8, r0
   122e4:	mov	r0, #3
   122e8:	bl	118e0 <malloc@plt>
   122ec:	mov	r7, r0
   122f0:	mov	r0, #3
   122f4:	bl	118e0 <malloc@plt>
   122f8:	mov	r6, r0
   122fc:	mov	r3, #60	; 0x3c
   12300:	strb	r3, [r8]
   12304:	mov	r2, #61	; 0x3d
   12308:	strb	r2, [r8, #1]
   1230c:	mov	r3, #0
   12310:	strb	r3, [r8, #2]
   12314:	mov	r1, #38	; 0x26
   12318:	strb	r1, [r7]
   1231c:	strb	r1, [r7, #1]
   12320:	strb	r3, [r7, #2]
   12324:	strb	r2, [r0]
   12328:	strb	r2, [r0, #1]
   1232c:	strb	r3, [r0, #2]
   12330:	add	r1, sp, #4
   12334:	mov	r0, sp
   12338:	bl	14f30 <init_grammar@@Base>
   1233c:	ldrd	r2, [r4]
   12340:	adds	r2, r2, #1
   12344:	adc	r3, r3, #0
   12348:	strd	r2, [r4]
   1234c:	mov	r0, #40	; 0x28
   12350:	bl	118e0 <malloc@plt>
   12354:	mov	r5, r0
   12358:	mov	r0, #8
   1235c:	bl	118e0 <malloc@plt>
   12360:	str	r0, [r5]
   12364:	mov	r1, #2
   12368:	bl	14250 <init_token_int_value@@Base>
   1236c:	ldrd	r2, [r4, #8]
   12370:	adds	r2, r2, #1
   12374:	adc	r3, r3, #0
   12378:	strd	r2, [r4, #8]
   1237c:	mov	r0, #8
   12380:	bl	118e0 <malloc@plt>
   12384:	str	r0, [r5, #4]
   12388:	mov	r1, #2
   1238c:	bl	14250 <init_token_int_value@@Base>
   12390:	ldrd	r2, [r4, #16]
   12394:	adds	r2, r2, #1
   12398:	adc	r3, r3, #0
   1239c:	strd	r2, [r4, #16]
   123a0:	mov	r0, #8
   123a4:	bl	118e0 <malloc@plt>
   123a8:	str	r0, [r5, #8]
   123ac:	mov	r1, r8
   123b0:	bl	143e4 <init_token_boolean_op@@Base>
   123b4:	ldrd	r2, [r4, #24]
   123b8:	adds	r2, r2, #1
   123bc:	adc	r3, r3, #0
   123c0:	strd	r2, [r4, #24]
   123c4:	mov	r0, #8
   123c8:	bl	118e0 <malloc@plt>
   123cc:	str	r0, [r5, #12]
   123d0:	mov	r1, #1
   123d4:	bl	14250 <init_token_int_value@@Base>
   123d8:	ldrd	r2, [r4, #32]
   123dc:	adds	r2, r2, #1
   123e0:	adc	r3, r3, #0
   123e4:	strd	r2, [r4, #32]
   123e8:	mov	r0, #8
   123ec:	bl	118e0 <malloc@plt>
   123f0:	str	r0, [r5, #16]
   123f4:	mov	r1, r7
   123f8:	bl	143e4 <init_token_boolean_op@@Base>
   123fc:	ldrd	r2, [r4, #40]	; 0x28
   12400:	adds	r2, r2, #1
   12404:	adc	r3, r3, #0
   12408:	strd	r2, [r4, #40]	; 0x28
   1240c:	mov	r0, #8
   12410:	bl	118e0 <malloc@plt>
   12414:	str	r0, [r5, #20]
   12418:	mov	r1, #4
   1241c:	bl	14250 <init_token_int_value@@Base>
   12420:	ldrd	r2, [r4, #48]	; 0x30
   12424:	adds	r2, r2, #1
   12428:	adc	r3, r3, #0
   1242c:	strd	r2, [r4, #48]	; 0x30
   12430:	mov	r0, #8
   12434:	bl	118e0 <malloc@plt>
   12438:	str	r0, [r5, #24]
   1243c:	mov	r1, #4
   12440:	bl	14250 <init_token_int_value@@Base>
   12444:	ldrd	r2, [r4, #56]	; 0x38
   12448:	adds	r2, r2, #1
   1244c:	adc	r3, r3, #0
   12450:	strd	r2, [r4, #56]	; 0x38
   12454:	mov	r0, #8
   12458:	bl	118e0 <malloc@plt>
   1245c:	str	r0, [r5, #28]
   12460:	mov	r1, r6
   12464:	bl	143e4 <init_token_boolean_op@@Base>
   12468:	ldrd	r2, [r4, #64]	; 0x40
   1246c:	adds	r2, r2, #1
   12470:	adc	r3, r3, #0
   12474:	strd	r2, [r4, #64]	; 0x40
   12478:	mov	r0, #8
   1247c:	bl	118e0 <malloc@plt>
   12480:	str	r0, [r5, #32]
   12484:	mov	r1, #4
   12488:	bl	14250 <init_token_int_value@@Base>
   1248c:	ldrd	r2, [r4, #72]	; 0x48
   12490:	adds	r2, r2, #1
   12494:	adc	r3, r3, #0
   12498:	strd	r2, [r4, #72]	; 0x48
   1249c:	mov	r0, #4
   124a0:	bl	118e0 <malloc@plt>
   124a4:	str	r0, [r5, #36]	; 0x24
   124a8:	bl	142c4 <init_token_cpar@@Base>
   124ac:	ldrd	r2, [r4, #80]	; 0x50
   124b0:	adds	r2, r2, #1
   124b4:	adc	r3, r3, #0
   124b8:	strd	r2, [r4, #80]	; 0x50
   124bc:	ldr	r4, [pc, #152]	; 1255c <boolean_expression_complex@@Base+0x2a0>
   124c0:	str	r5, [r4, #228]	; 0xe4
   124c4:	mov	r3, #10
   124c8:	str	r3, [r4, #220]	; 0xdc
   124cc:	mov	r0, sp
   124d0:	bl	1557c <read_boolean_expression@@Base>
   124d4:	ldr	r3, [r4, #204]	; 0xcc
   124d8:	cmp	r3, #10
   124dc:	bne	12508 <boolean_expression_complex@@Base+0x24c>
   124e0:	ldr	r3, [r0]
   124e4:	cmp	r3, #5
   124e8:	bne	12530 <boolean_expression_complex@@Base+0x274>
   124ec:	ldr	r1, [pc, #100]	; 12558 <boolean_expression_complex@@Base+0x29c>
   124f0:	ldrd	r2, [r1, #96]	; 0x60
   124f4:	adds	r2, r2, #1
   124f8:	adc	r3, r3, #0
   124fc:	strd	r2, [r1, #96]	; 0x60
   12500:	add	sp, sp, #16
   12504:	pop	{r4, r5, r6, r7, r8, pc}
   12508:	ldr	r1, [pc, #72]	; 12558 <boolean_expression_complex@@Base+0x29c>
   1250c:	ldrd	r2, [r1, #88]	; 0x58
   12510:	adds	r2, r2, #1
   12514:	adc	r3, r3, #0
   12518:	strd	r2, [r1, #88]	; 0x58
   1251c:	ldr	r3, [pc, #60]	; 12560 <boolean_expression_complex@@Base+0x2a4>
   12520:	mov	r2, #166	; 0xa6
   12524:	ldr	r1, [pc, #56]	; 12564 <boolean_expression_complex@@Base+0x2a8>
   12528:	ldr	r0, [pc, #56]	; 12568 <boolean_expression_complex@@Base+0x2ac>
   1252c:	bl	119f4 <__assert_fail@plt>
   12530:	ldr	r1, [pc, #32]	; 12558 <boolean_expression_complex@@Base+0x29c>
   12534:	ldrd	r2, [r1, #104]	; 0x68
   12538:	adds	r2, r2, #1
   1253c:	adc	r3, r3, #0
   12540:	strd	r2, [r1, #104]	; 0x68
   12544:	ldr	r3, [pc, #20]	; 12560 <boolean_expression_complex@@Base+0x2a4>
   12548:	mov	r2, #167	; 0xa7
   1254c:	ldr	r1, [pc, #16]	; 12564 <boolean_expression_complex@@Base+0x2a8>
   12550:	ldr	r0, [pc, #20]	; 1256c <boolean_expression_complex@@Base+0x2b0>
   12554:	bl	119f4 <__assert_fail@plt>
   12558:	andeq	r9, r2, r8, ror #21
   1255c:	andeq	sl, r2, r8, lsr r9
   12560:	andeq	r7, r1, r8, asr #31
   12564:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12568:			; <UNDEFINED> instruction: 0x000181bc
   1256c:	muleq	r1, ip, r1

00012570 <boolean_binary_operator_is_read_properly@@Base>:
   12570:	push	{r4, r5, r6, lr}
   12574:	sub	sp, sp, #16
   12578:	ldr	r4, [pc, #516]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   1257c:	ldrd	r2, [r4]
   12580:	adds	r2, r2, #1
   12584:	adc	r3, r3, #0
   12588:	strd	r2, [r4]
   1258c:	mov	r0, #3
   12590:	bl	118e0 <malloc@plt>
   12594:	mov	r6, r0
   12598:	mov	r3, #33	; 0x21
   1259c:	strb	r3, [r0]
   125a0:	mov	r3, #61	; 0x3d
   125a4:	strb	r3, [r0, #1]
   125a8:	mov	r3, #0
   125ac:	strb	r3, [r0, #2]
   125b0:	add	r1, sp, #4
   125b4:	mov	r0, sp
   125b8:	bl	14f30 <init_grammar@@Base>
   125bc:	ldrd	r2, [r4, #8]
   125c0:	adds	r2, r2, #1
   125c4:	adc	r3, r3, #0
   125c8:	strd	r2, [r4, #8]
   125cc:	mov	r0, #12
   125d0:	bl	118e0 <malloc@plt>
   125d4:	mov	r5, r0
   125d8:	mov	r0, #8
   125dc:	bl	118e0 <malloc@plt>
   125e0:	str	r0, [r5]
   125e4:	mov	r1, #2
   125e8:	bl	14250 <init_token_int_value@@Base>
   125ec:	ldrd	r2, [r4, #16]
   125f0:	adds	r2, r2, #1
   125f4:	adc	r3, r3, #0
   125f8:	strd	r2, [r4, #16]
   125fc:	mov	r0, #8
   12600:	bl	118e0 <malloc@plt>
   12604:	str	r0, [r5, #4]
   12608:	mov	r1, r6
   1260c:	bl	143e4 <init_token_boolean_op@@Base>
   12610:	ldrd	r2, [r4, #24]
   12614:	adds	r2, r2, #1
   12618:	adc	r3, r3, #0
   1261c:	strd	r2, [r4, #24]
   12620:	mov	r0, #8
   12624:	bl	118e0 <malloc@plt>
   12628:	str	r0, [r5, #8]
   1262c:	mov	r1, #1
   12630:	bl	14250 <init_token_int_value@@Base>
   12634:	ldrd	r2, [r4, #32]
   12638:	adds	r2, r2, #1
   1263c:	adc	r3, r3, #0
   12640:	strd	r2, [r4, #32]
   12644:	ldr	r4, [pc, #316]	; 12788 <boolean_binary_operator_is_read_properly@@Base+0x218>
   12648:	str	r5, [r4, #228]	; 0xe4
   1264c:	mov	r3, #3
   12650:	str	r3, [r4, #220]	; 0xdc
   12654:	mov	r0, sp
   12658:	bl	151fc <read_boolean_binary_expression@@Base>
   1265c:	ldr	r3, [r4, #204]	; 0xcc
   12660:	cmp	r3, #3
   12664:	bne	126bc <boolean_binary_operator_is_read_properly@@Base+0x14c>
   12668:	ldr	r3, [r0]
   1266c:	cmp	r3, #5
   12670:	bne	126e4 <boolean_binary_operator_is_read_properly@@Base+0x174>
   12674:	ldr	r3, [r0, #8]
   12678:	ldr	r3, [r3]
   1267c:	cmp	r3, #1
   12680:	bne	1270c <boolean_binary_operator_is_read_properly@@Base+0x19c>
   12684:	ldr	r3, [r0, #16]
   12688:	cmp	r3, #1
   1268c:	bne	12734 <boolean_binary_operator_is_read_properly@@Base+0x1c4>
   12690:	ldr	r3, [r0, #12]
   12694:	ldr	r3, [r3]
   12698:	cmp	r3, #1
   1269c:	bne	1275c <boolean_binary_operator_is_read_properly@@Base+0x1ec>
   126a0:	ldr	r1, [pc, #220]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   126a4:	ldrd	r2, [r1, #72]	; 0x48
   126a8:	adds	r2, r2, #1
   126ac:	adc	r3, r3, #0
   126b0:	strd	r2, [r1, #72]	; 0x48
   126b4:	add	sp, sp, #16
   126b8:	pop	{r4, r5, r6, pc}
   126bc:	ldr	r1, [pc, #192]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   126c0:	ldrd	r2, [r1, #40]	; 0x28
   126c4:	adds	r2, r2, #1
   126c8:	adc	r3, r3, #0
   126cc:	strd	r2, [r1, #40]	; 0x28
   126d0:	ldr	r3, [pc, #180]	; 1278c <boolean_binary_operator_is_read_properly@@Base+0x21c>
   126d4:	mov	r2, #200	; 0xc8
   126d8:	ldr	r1, [pc, #176]	; 12790 <boolean_binary_operator_is_read_properly@@Base+0x220>
   126dc:	ldr	r0, [pc, #176]	; 12794 <boolean_binary_operator_is_read_properly@@Base+0x224>
   126e0:	bl	119f4 <__assert_fail@plt>
   126e4:	ldr	r1, [pc, #152]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   126e8:	ldrd	r2, [r1, #48]	; 0x30
   126ec:	adds	r2, r2, #1
   126f0:	adc	r3, r3, #0
   126f4:	strd	r2, [r1, #48]	; 0x30
   126f8:	ldr	r3, [pc, #140]	; 1278c <boolean_binary_operator_is_read_properly@@Base+0x21c>
   126fc:	mov	r2, #201	; 0xc9
   12700:	ldr	r1, [pc, #136]	; 12790 <boolean_binary_operator_is_read_properly@@Base+0x220>
   12704:	ldr	r0, [pc, #140]	; 12798 <boolean_binary_operator_is_read_properly@@Base+0x228>
   12708:	bl	119f4 <__assert_fail@plt>
   1270c:	ldr	r1, [pc, #112]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   12710:	ldrd	r2, [r1, #56]	; 0x38
   12714:	adds	r2, r2, #1
   12718:	adc	r3, r3, #0
   1271c:	strd	r2, [r1, #56]	; 0x38
   12720:	ldr	r3, [pc, #100]	; 1278c <boolean_binary_operator_is_read_properly@@Base+0x21c>
   12724:	mov	r2, #203	; 0xcb
   12728:	ldr	r1, [pc, #96]	; 12790 <boolean_binary_operator_is_read_properly@@Base+0x220>
   1272c:	ldr	r0, [pc, #104]	; 1279c <boolean_binary_operator_is_read_properly@@Base+0x22c>
   12730:	bl	119f4 <__assert_fail@plt>
   12734:	ldr	r1, [pc, #72]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   12738:	ldrd	r2, [r1, #64]	; 0x40
   1273c:	adds	r2, r2, #1
   12740:	adc	r3, r3, #0
   12744:	strd	r2, [r1, #64]	; 0x40
   12748:	ldr	r3, [pc, #60]	; 1278c <boolean_binary_operator_is_read_properly@@Base+0x21c>
   1274c:	mov	r2, #204	; 0xcc
   12750:	ldr	r1, [pc, #56]	; 12790 <boolean_binary_operator_is_read_properly@@Base+0x220>
   12754:	ldr	r0, [pc, #68]	; 127a0 <boolean_binary_operator_is_read_properly@@Base+0x230>
   12758:	bl	119f4 <__assert_fail@plt>
   1275c:	ldr	r1, [pc, #32]	; 12784 <boolean_binary_operator_is_read_properly@@Base+0x214>
   12760:	ldrd	r2, [r1, #80]	; 0x50
   12764:	adds	r2, r2, #1
   12768:	adc	r3, r3, #0
   1276c:	strd	r2, [r1, #80]	; 0x50
   12770:	ldr	r3, [pc, #20]	; 1278c <boolean_binary_operator_is_read_properly@@Base+0x21c>
   12774:	mov	r2, #205	; 0xcd
   12778:	ldr	r1, [pc, #16]	; 12790 <boolean_binary_operator_is_read_properly@@Base+0x220>
   1277c:	ldr	r0, [pc, #32]	; 127a4 <boolean_binary_operator_is_read_properly@@Base+0x234>
   12780:	bl	119f4 <__assert_fail@plt>
   12784:	andeq	r9, r2, r8, asr fp
   12788:	andeq	sl, r2, r8, lsr r9
   1278c:	andeq	r7, r1, r4, ror #31
   12790:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12794:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12798:	muleq	r1, ip, r1
   1279c:	strdeq	r8, [r1], -r4
   127a0:	andeq	r8, r1, r0, lsl r2
   127a4:	andeq	r8, r1, ip, lsr #4

000127a8 <boolean_unary_operator_is_read_properly@@Base>:
   127a8:	push	{r4, r5, r6, lr}
   127ac:	sub	sp, sp, #16
   127b0:	ldr	r4, [pc, #468]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   127b4:	ldrd	r2, [r4, #-8]
   127b8:	adds	r2, r2, #1
   127bc:	adc	r3, r3, #0
   127c0:	strd	r2, [r4, #-8]
   127c4:	mov	r0, #2
   127c8:	bl	118e0 <malloc@plt>
   127cc:	mov	r6, r0
   127d0:	mov	r3, #33	; 0x21
   127d4:	strb	r3, [r0]
   127d8:	mov	r3, #0
   127dc:	strb	r3, [r0, #1]
   127e0:	add	r1, sp, #4
   127e4:	mov	r0, sp
   127e8:	bl	14f30 <init_grammar@@Base>
   127ec:	ldrd	r2, [r4]
   127f0:	adds	r2, r2, #1
   127f4:	adc	r3, r3, #0
   127f8:	strd	r2, [r4]
   127fc:	mov	r0, #8
   12800:	bl	118e0 <malloc@plt>
   12804:	mov	r5, r0
   12808:	mov	r0, #8
   1280c:	bl	118e0 <malloc@plt>
   12810:	str	r0, [r5]
   12814:	mov	r1, r6
   12818:	bl	143e4 <init_token_boolean_op@@Base>
   1281c:	ldrd	r2, [r4, #8]
   12820:	adds	r2, r2, #1
   12824:	adc	r3, r3, #0
   12828:	strd	r2, [r4, #8]
   1282c:	mov	r0, #8
   12830:	bl	118e0 <malloc@plt>
   12834:	str	r0, [r5, #4]
   12838:	mov	r1, #1
   1283c:	bl	14250 <init_token_int_value@@Base>
   12840:	ldrd	r2, [r4, #16]
   12844:	adds	r2, r2, #1
   12848:	adc	r3, r3, #0
   1284c:	strd	r2, [r4, #16]
   12850:	ldr	r4, [pc, #312]	; 12990 <boolean_unary_operator_is_read_properly@@Base+0x1e8>
   12854:	str	r5, [r4, #228]	; 0xe4
   12858:	mov	r3, #2
   1285c:	str	r3, [r4, #220]	; 0xdc
   12860:	mov	r0, sp
   12864:	bl	1507c <read_boolean_unary_expression@@Base>
   12868:	ldr	r3, [r4, #204]	; 0xcc
   1286c:	cmp	r3, #2
   12870:	bne	128c4 <boolean_unary_operator_is_read_properly@@Base+0x11c>
   12874:	ldr	r3, [r0]
   12878:	cmp	r3, #5
   1287c:	bne	128ec <boolean_unary_operator_is_read_properly@@Base+0x144>
   12880:	ldr	r3, [r0, #8]
   12884:	ldr	r3, [r3]
   12888:	cmp	r3, #1
   1288c:	bne	12914 <boolean_unary_operator_is_read_properly@@Base+0x16c>
   12890:	ldr	r3, [r0, #16]
   12894:	cmp	r3, #8
   12898:	bne	1293c <boolean_unary_operator_is_read_properly@@Base+0x194>
   1289c:	ldr	r3, [r0, #12]
   128a0:	cmp	r3, #0
   128a4:	bne	12964 <boolean_unary_operator_is_read_properly@@Base+0x1bc>
   128a8:	ldr	r1, [pc, #220]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   128ac:	ldrd	r2, [r1, #56]	; 0x38
   128b0:	adds	r2, r2, #1
   128b4:	adc	r3, r3, #0
   128b8:	strd	r2, [r1, #56]	; 0x38
   128bc:	add	sp, sp, #16
   128c0:	pop	{r4, r5, r6, pc}
   128c4:	ldr	r1, [pc, #192]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   128c8:	ldrd	r2, [r1, #24]
   128cc:	adds	r2, r2, #1
   128d0:	adc	r3, r3, #0
   128d4:	strd	r2, [r1, #24]
   128d8:	ldr	r3, [pc, #180]	; 12994 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   128dc:	mov	r2, #235	; 0xeb
   128e0:	ldr	r1, [pc, #176]	; 12998 <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   128e4:	ldr	r0, [pc, #176]	; 1299c <boolean_unary_operator_is_read_properly@@Base+0x1f4>
   128e8:	bl	119f4 <__assert_fail@plt>
   128ec:	ldr	r1, [pc, #152]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   128f0:	ldrd	r2, [r1, #32]
   128f4:	adds	r2, r2, #1
   128f8:	adc	r3, r3, #0
   128fc:	strd	r2, [r1, #32]
   12900:	ldr	r3, [pc, #140]	; 12994 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   12904:	mov	r2, #236	; 0xec
   12908:	ldr	r1, [pc, #136]	; 12998 <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   1290c:	ldr	r0, [pc, #140]	; 129a0 <boolean_unary_operator_is_read_properly@@Base+0x1f8>
   12910:	bl	119f4 <__assert_fail@plt>
   12914:	ldr	r1, [pc, #112]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   12918:	ldrd	r2, [r1, #40]	; 0x28
   1291c:	adds	r2, r2, #1
   12920:	adc	r3, r3, #0
   12924:	strd	r2, [r1, #40]	; 0x28
   12928:	ldr	r3, [pc, #100]	; 12994 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   1292c:	mov	r2, #238	; 0xee
   12930:	ldr	r1, [pc, #96]	; 12998 <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   12934:	ldr	r0, [pc, #104]	; 129a4 <boolean_unary_operator_is_read_properly@@Base+0x1fc>
   12938:	bl	119f4 <__assert_fail@plt>
   1293c:	ldr	r1, [pc, #72]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   12940:	ldrd	r2, [r1, #48]	; 0x30
   12944:	adds	r2, r2, #1
   12948:	adc	r3, r3, #0
   1294c:	strd	r2, [r1, #48]	; 0x30
   12950:	ldr	r3, [pc, #60]	; 12994 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   12954:	mov	r2, #239	; 0xef
   12958:	ldr	r1, [pc, #56]	; 12998 <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   1295c:	ldr	r0, [pc, #68]	; 129a8 <boolean_unary_operator_is_read_properly@@Base+0x200>
   12960:	bl	119f4 <__assert_fail@plt>
   12964:	ldr	r1, [pc, #32]	; 1298c <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   12968:	ldrd	r2, [r1, #64]	; 0x40
   1296c:	adds	r2, r2, #1
   12970:	adc	r3, r3, #0
   12974:	strd	r2, [r1, #64]	; 0x40
   12978:	ldr	r3, [pc, #20]	; 12994 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   1297c:	mov	r2, #240	; 0xf0
   12980:	ldr	r1, [pc, #16]	; 12998 <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   12984:	ldr	r0, [pc, #32]	; 129ac <boolean_unary_operator_is_read_properly@@Base+0x204>
   12988:	bl	119f4 <__assert_fail@plt>
   1298c:			; <UNDEFINED> instruction: 0x00029bb8
   12990:	andeq	sl, r2, r8, lsr r9
   12994:	andeq	r8, r1, r0, lsl r0
   12998:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1299c:	andeq	r8, r1, r4, asr #2
   129a0:	muleq	r1, ip, r1
   129a4:	strdeq	r8, [r1], -r4
   129a8:	andeq	r8, r1, r8, asr #4
   129ac:	andeq	r8, r1, ip, asr r2

000129b0 <if_statement_only@@Base>:
   129b0:	push	{r4, r5, r6, lr}
   129b4:	sub	sp, sp, #16
   129b8:	ldr	r4, [pc, #596]	; 12c14 <if_statement_only@@Base+0x264>
   129bc:	ldrd	r2, [r4, #-8]
   129c0:	adds	r2, r2, #1
   129c4:	adc	r3, r3, #0
   129c8:	strd	r2, [r4, #-8]
   129cc:	add	r1, sp, #4
   129d0:	mov	r0, sp
   129d4:	bl	14f30 <init_grammar@@Base>
   129d8:	ldrd	r2, [r4]
   129dc:	adds	r2, r2, #1
   129e0:	adc	r3, r3, #0
   129e4:	strd	r2, [r4]
   129e8:	mov	r0, #3
   129ec:	bl	118e0 <malloc@plt>
   129f0:	mov	r6, r0
   129f4:	mov	r3, #33	; 0x21
   129f8:	strb	r3, [r0]
   129fc:	mov	r3, #61	; 0x3d
   12a00:	strb	r3, [r0, #1]
   12a04:	mov	r3, #0
   12a08:	strb	r3, [r0, #2]
   12a0c:	mov	r0, #36	; 0x24
   12a10:	bl	118e0 <malloc@plt>
   12a14:	mov	r5, r0
   12a18:	mov	r0, #4
   12a1c:	bl	118e0 <malloc@plt>
   12a20:	str	r0, [r5]
   12a24:	bl	142a0 <init_token_opar@@Base>
   12a28:	ldrd	r2, [r4, #8]
   12a2c:	adds	r2, r2, #1
   12a30:	adc	r3, r3, #0
   12a34:	strd	r2, [r4, #8]
   12a38:	mov	r0, #8
   12a3c:	bl	118e0 <malloc@plt>
   12a40:	str	r0, [r5, #4]
   12a44:	mov	r1, #1
   12a48:	bl	14250 <init_token_int_value@@Base>
   12a4c:	ldrd	r2, [r4, #16]
   12a50:	adds	r2, r2, #1
   12a54:	adc	r3, r3, #0
   12a58:	strd	r2, [r4, #16]
   12a5c:	mov	r0, #8
   12a60:	bl	118e0 <malloc@plt>
   12a64:	str	r0, [r5, #8]
   12a68:	mov	r1, #1
   12a6c:	bl	14250 <init_token_int_value@@Base>
   12a70:	ldrd	r2, [r4, #24]
   12a74:	adds	r2, r2, #1
   12a78:	adc	r3, r3, #0
   12a7c:	strd	r2, [r4, #24]
   12a80:	mov	r0, #8
   12a84:	bl	118e0 <malloc@plt>
   12a88:	str	r0, [r5, #12]
   12a8c:	mov	r1, r6
   12a90:	bl	143e4 <init_token_boolean_op@@Base>
   12a94:	ldrd	r2, [r4, #32]
   12a98:	adds	r2, r2, #1
   12a9c:	adc	r3, r3, #0
   12aa0:	strd	r2, [r4, #32]
   12aa4:	mov	r0, #8
   12aa8:	bl	118e0 <malloc@plt>
   12aac:	str	r0, [r5, #16]
   12ab0:	mov	r1, #1
   12ab4:	bl	14250 <init_token_int_value@@Base>
   12ab8:	ldrd	r2, [r4, #40]	; 0x28
   12abc:	adds	r2, r2, #1
   12ac0:	adc	r3, r3, #0
   12ac4:	strd	r2, [r4, #40]	; 0x28
   12ac8:	mov	r0, #4
   12acc:	bl	118e0 <malloc@plt>
   12ad0:	str	r0, [r5, #20]
   12ad4:	bl	142c4 <init_token_cpar@@Base>
   12ad8:	ldrd	r2, [r4, #48]	; 0x30
   12adc:	adds	r2, r2, #1
   12ae0:	adc	r3, r3, #0
   12ae4:	strd	r2, [r4, #48]	; 0x30
   12ae8:	mov	r0, #4
   12aec:	bl	118e0 <malloc@plt>
   12af0:	str	r0, [r5, #24]
   12af4:	bl	142e8 <init_token_obra@@Base>
   12af8:	ldrd	r2, [r4, #56]	; 0x38
   12afc:	adds	r2, r2, #1
   12b00:	adc	r3, r3, #0
   12b04:	strd	r2, [r4, #56]	; 0x38
   12b08:	mov	r0, #4
   12b0c:	bl	118e0 <malloc@plt>
   12b10:	str	r0, [r5, #28]
   12b14:	bl	1430c <init_token_cbra@@Base>
   12b18:	ldrd	r2, [r4, #64]	; 0x40
   12b1c:	adds	r2, r2, #1
   12b20:	adc	r3, r3, #0
   12b24:	strd	r2, [r4, #64]	; 0x40
   12b28:	mov	r0, #4
   12b2c:	bl	118e0 <malloc@plt>
   12b30:	str	r0, [r5, #32]
   12b34:	bl	14378 <init_token_eof@@Base>
   12b38:	ldrd	r2, [r4, #72]	; 0x48
   12b3c:	adds	r2, r2, #1
   12b40:	adc	r3, r3, #0
   12b44:	strd	r2, [r4, #72]	; 0x48
   12b48:	ldr	r4, [pc, #200]	; 12c18 <if_statement_only@@Base+0x268>
   12b4c:	str	r5, [r4, #228]	; 0xe4
   12b50:	mov	r3, #9
   12b54:	str	r3, [r4, #220]	; 0xdc
   12b58:	mov	r0, sp
   12b5c:	bl	15748 <read_if_statement@@Base>
   12b60:	ldr	r3, [r4, #204]	; 0xcc
   12b64:	cmp	r3, #9
   12b68:	bne	12b9c <if_statement_only@@Base+0x1ec>
   12b6c:	cmp	r0, #0
   12b70:	beq	12bc4 <if_statement_only@@Base+0x214>
   12b74:	ldr	r3, [r0]
   12b78:	cmp	r3, #4
   12b7c:	bne	12bec <if_statement_only@@Base+0x23c>
   12b80:	ldr	r1, [pc, #140]	; 12c14 <if_statement_only@@Base+0x264>
   12b84:	ldrd	r2, [r1, #96]	; 0x60
   12b88:	adds	r2, r2, #1
   12b8c:	adc	r3, r3, #0
   12b90:	strd	r2, [r1, #96]	; 0x60
   12b94:	add	sp, sp, #16
   12b98:	pop	{r4, r5, r6, pc}
   12b9c:	ldr	r1, [pc, #112]	; 12c14 <if_statement_only@@Base+0x264>
   12ba0:	ldrd	r2, [r1, #80]	; 0x50
   12ba4:	adds	r2, r2, #1
   12ba8:	adc	r3, r3, #0
   12bac:	strd	r2, [r1, #80]	; 0x50
   12bb0:	ldr	r3, [pc, #100]	; 12c1c <if_statement_only@@Base+0x26c>
   12bb4:	ldr	r2, [pc, #100]	; 12c20 <if_statement_only@@Base+0x270>
   12bb8:	ldr	r1, [pc, #100]	; 12c24 <if_statement_only@@Base+0x274>
   12bbc:	ldr	r0, [pc, #100]	; 12c28 <if_statement_only@@Base+0x278>
   12bc0:	bl	119f4 <__assert_fail@plt>
   12bc4:	ldr	r1, [pc, #72]	; 12c14 <if_statement_only@@Base+0x264>
   12bc8:	ldrd	r2, [r1, #88]	; 0x58
   12bcc:	adds	r2, r2, #1
   12bd0:	adc	r3, r3, #0
   12bd4:	strd	r2, [r1, #88]	; 0x58
   12bd8:	ldr	r3, [pc, #60]	; 12c1c <if_statement_only@@Base+0x26c>
   12bdc:	mov	r2, #284	; 0x11c
   12be0:	ldr	r1, [pc, #60]	; 12c24 <if_statement_only@@Base+0x274>
   12be4:	ldr	r0, [pc, #64]	; 12c2c <if_statement_only@@Base+0x27c>
   12be8:	bl	119f4 <__assert_fail@plt>
   12bec:	ldr	r1, [pc, #32]	; 12c14 <if_statement_only@@Base+0x264>
   12bf0:	ldrd	r2, [r1, #104]	; 0x68
   12bf4:	adds	r2, r2, #1
   12bf8:	adc	r3, r3, #0
   12bfc:	strd	r2, [r1, #104]	; 0x68
   12c00:	ldr	r3, [pc, #20]	; 12c1c <if_statement_only@@Base+0x26c>
   12c04:	ldr	r2, [pc, #36]	; 12c30 <if_statement_only@@Base+0x280>
   12c08:	ldr	r1, [pc, #20]	; 12c24 <if_statement_only@@Base+0x274>
   12c0c:	ldr	r0, [pc, #32]	; 12c34 <if_statement_only@@Base+0x284>
   12c10:	bl	119f4 <__assert_fail@plt>
   12c14:	andeq	r9, r2, r8, lsl #24
   12c18:	andeq	sl, r2, r8, lsr r9
   12c1c:	andeq	r8, r1, r8, lsr r0
   12c20:	andeq	r0, r0, fp, lsl r1
   12c24:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12c28:	andeq	r8, r1, r4, ror r2
   12c2c:	muleq	r1, r0, r2
   12c30:	andeq	r0, r0, sp, lsl r1
   12c34:	muleq	r1, ip, r2

00012c38 <if_else_statements@@Base>:
   12c38:	push	{r4, r5, r6, lr}
   12c3c:	sub	sp, sp, #16
   12c40:	ldr	r4, [pc, #660]	; 12edc <if_else_statements@@Base+0x2a4>
   12c44:	ldrd	r2, [r4]
   12c48:	adds	r2, r2, #1
   12c4c:	adc	r3, r3, #0
   12c50:	strd	r2, [r4]
   12c54:	add	r1, sp, #4
   12c58:	mov	r0, sp
   12c5c:	bl	14f30 <init_grammar@@Base>
   12c60:	ldrd	r2, [r4, #8]
   12c64:	adds	r2, r2, #1
   12c68:	adc	r3, r3, #0
   12c6c:	strd	r2, [r4, #8]
   12c70:	mov	r0, #3
   12c74:	bl	118e0 <malloc@plt>
   12c78:	mov	r6, r0
   12c7c:	mov	r3, #33	; 0x21
   12c80:	strb	r3, [r0]
   12c84:	mov	r3, #61	; 0x3d
   12c88:	strb	r3, [r0, #1]
   12c8c:	mov	r3, #0
   12c90:	strb	r3, [r0, #2]
   12c94:	mov	r0, #44	; 0x2c
   12c98:	bl	118e0 <malloc@plt>
   12c9c:	mov	r5, r0
   12ca0:	mov	r0, #4
   12ca4:	bl	118e0 <malloc@plt>
   12ca8:	str	r0, [r5]
   12cac:	bl	142a0 <init_token_opar@@Base>
   12cb0:	ldrd	r2, [r4, #16]
   12cb4:	adds	r2, r2, #1
   12cb8:	adc	r3, r3, #0
   12cbc:	strd	r2, [r4, #16]
   12cc0:	mov	r0, #8
   12cc4:	bl	118e0 <malloc@plt>
   12cc8:	str	r0, [r5, #4]
   12ccc:	mov	r1, #1
   12cd0:	bl	14250 <init_token_int_value@@Base>
   12cd4:	ldrd	r2, [r4, #24]
   12cd8:	adds	r2, r2, #1
   12cdc:	adc	r3, r3, #0
   12ce0:	strd	r2, [r4, #24]
   12ce4:	mov	r0, #8
   12ce8:	bl	118e0 <malloc@plt>
   12cec:	str	r0, [r5, #8]
   12cf0:	mov	r1, #1
   12cf4:	bl	14250 <init_token_int_value@@Base>
   12cf8:	ldrd	r2, [r4, #32]
   12cfc:	adds	r2, r2, #1
   12d00:	adc	r3, r3, #0
   12d04:	strd	r2, [r4, #32]
   12d08:	mov	r0, #8
   12d0c:	bl	118e0 <malloc@plt>
   12d10:	str	r0, [r5, #12]
   12d14:	mov	r1, r6
   12d18:	bl	143e4 <init_token_boolean_op@@Base>
   12d1c:	ldrd	r2, [r4, #40]	; 0x28
   12d20:	adds	r2, r2, #1
   12d24:	adc	r3, r3, #0
   12d28:	strd	r2, [r4, #40]	; 0x28
   12d2c:	mov	r0, #8
   12d30:	bl	118e0 <malloc@plt>
   12d34:	str	r0, [r5, #16]
   12d38:	mov	r1, #1
   12d3c:	bl	14250 <init_token_int_value@@Base>
   12d40:	ldrd	r2, [r4, #48]	; 0x30
   12d44:	adds	r2, r2, #1
   12d48:	adc	r3, r3, #0
   12d4c:	strd	r2, [r4, #48]	; 0x30
   12d50:	mov	r0, #4
   12d54:	bl	118e0 <malloc@plt>
   12d58:	str	r0, [r5, #20]
   12d5c:	bl	142c4 <init_token_cpar@@Base>
   12d60:	ldrd	r2, [r4, #56]	; 0x38
   12d64:	adds	r2, r2, #1
   12d68:	adc	r3, r3, #0
   12d6c:	strd	r2, [r4, #56]	; 0x38
   12d70:	mov	r0, #4
   12d74:	bl	118e0 <malloc@plt>
   12d78:	str	r0, [r5, #24]
   12d7c:	bl	142e8 <init_token_obra@@Base>
   12d80:	ldrd	r2, [r4, #64]	; 0x40
   12d84:	adds	r2, r2, #1
   12d88:	adc	r3, r3, #0
   12d8c:	strd	r2, [r4, #64]	; 0x40
   12d90:	mov	r0, #4
   12d94:	bl	118e0 <malloc@plt>
   12d98:	str	r0, [r5, #28]
   12d9c:	bl	1430c <init_token_cbra@@Base>
   12da0:	ldrd	r2, [r4, #72]	; 0x48
   12da4:	adds	r2, r2, #1
   12da8:	adc	r3, r3, #0
   12dac:	strd	r2, [r4, #72]	; 0x48
   12db0:	mov	r0, #4
   12db4:	bl	118e0 <malloc@plt>
   12db8:	str	r0, [r5, #32]
   12dbc:	bl	143c0 <init_token_else@@Base>
   12dc0:	ldrd	r2, [r4, #80]	; 0x50
   12dc4:	adds	r2, r2, #1
   12dc8:	adc	r3, r3, #0
   12dcc:	strd	r2, [r4, #80]	; 0x50
   12dd0:	mov	r0, #4
   12dd4:	bl	118e0 <malloc@plt>
   12dd8:	str	r0, [r5, #36]	; 0x24
   12ddc:	bl	142e8 <init_token_obra@@Base>
   12de0:	ldrd	r2, [r4, #88]	; 0x58
   12de4:	adds	r2, r2, #1
   12de8:	adc	r3, r3, #0
   12dec:	strd	r2, [r4, #88]	; 0x58
   12df0:	mov	r0, #4
   12df4:	bl	118e0 <malloc@plt>
   12df8:	str	r0, [r5, #40]	; 0x28
   12dfc:	bl	1430c <init_token_cbra@@Base>
   12e00:	ldrd	r2, [r4, #96]	; 0x60
   12e04:	adds	r2, r2, #1
   12e08:	adc	r3, r3, #0
   12e0c:	strd	r2, [r4, #96]	; 0x60
   12e10:	ldr	r4, [pc, #200]	; 12ee0 <if_else_statements@@Base+0x2a8>
   12e14:	str	r5, [r4, #228]	; 0xe4
   12e18:	mov	r3, #11
   12e1c:	str	r3, [r4, #220]	; 0xdc
   12e20:	mov	r0, sp
   12e24:	bl	15748 <read_if_statement@@Base>
   12e28:	ldr	r3, [r4, #204]	; 0xcc
   12e2c:	cmp	r3, #11
   12e30:	bne	12e64 <if_else_statements@@Base+0x22c>
   12e34:	cmp	r0, #0
   12e38:	beq	12e8c <if_else_statements@@Base+0x254>
   12e3c:	ldr	r3, [r0]
   12e40:	cmp	r3, #4
   12e44:	bne	12eb4 <if_else_statements@@Base+0x27c>
   12e48:	ldr	r1, [pc, #140]	; 12edc <if_else_statements@@Base+0x2a4>
   12e4c:	ldrd	r2, [r1, #120]	; 0x78
   12e50:	adds	r2, r2, #1
   12e54:	adc	r3, r3, #0
   12e58:	strd	r2, [r1, #120]	; 0x78
   12e5c:	add	sp, sp, #16
   12e60:	pop	{r4, r5, r6, pc}
   12e64:	ldr	r1, [pc, #112]	; 12edc <if_else_statements@@Base+0x2a4>
   12e68:	ldrd	r2, [r1, #104]	; 0x68
   12e6c:	adds	r2, r2, #1
   12e70:	adc	r3, r3, #0
   12e74:	strd	r2, [r1, #104]	; 0x68
   12e78:	ldr	r3, [pc, #100]	; 12ee4 <if_else_statements@@Base+0x2ac>
   12e7c:	mov	r2, #332	; 0x14c
   12e80:	ldr	r1, [pc, #96]	; 12ee8 <if_else_statements@@Base+0x2b0>
   12e84:	ldr	r0, [pc, #96]	; 12eec <if_else_statements@@Base+0x2b4>
   12e88:	bl	119f4 <__assert_fail@plt>
   12e8c:	ldr	r1, [pc, #72]	; 12edc <if_else_statements@@Base+0x2a4>
   12e90:	ldrd	r2, [r1, #112]	; 0x70
   12e94:	adds	r2, r2, #1
   12e98:	adc	r3, r3, #0
   12e9c:	strd	r2, [r1, #112]	; 0x70
   12ea0:	ldr	r3, [pc, #60]	; 12ee4 <if_else_statements@@Base+0x2ac>
   12ea4:	ldr	r2, [pc, #68]	; 12ef0 <if_else_statements@@Base+0x2b8>
   12ea8:	ldr	r1, [pc, #56]	; 12ee8 <if_else_statements@@Base+0x2b0>
   12eac:	ldr	r0, [pc, #64]	; 12ef4 <if_else_statements@@Base+0x2bc>
   12eb0:	bl	119f4 <__assert_fail@plt>
   12eb4:	ldr	r1, [pc, #32]	; 12edc <if_else_statements@@Base+0x2a4>
   12eb8:	ldrd	r2, [r1, #128]	; 0x80
   12ebc:	adds	r2, r2, #1
   12ec0:	adc	r3, r3, #0
   12ec4:	strd	r2, [r1, #128]	; 0x80
   12ec8:	ldr	r3, [pc, #20]	; 12ee4 <if_else_statements@@Base+0x2ac>
   12ecc:	ldr	r2, [pc, #36]	; 12ef8 <if_else_statements@@Base+0x2c0>
   12ed0:	ldr	r1, [pc, #16]	; 12ee8 <if_else_statements@@Base+0x2b0>
   12ed4:	ldr	r0, [pc, #32]	; 12efc <if_else_statements@@Base+0x2c4>
   12ed8:	bl	119f4 <__assert_fail@plt>
   12edc:	andeq	r9, r2, r8, ror ip
   12ee0:	andeq	sl, r2, r8, lsr r9
   12ee4:	andeq	r8, r1, ip, asr #32
   12ee8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12eec:			; <UNDEFINED> instruction: 0x000182b0
   12ef0:	andeq	r0, r0, sp, asr #2
   12ef4:	muleq	r1, r0, r2
   12ef8:	andeq	r0, r0, lr, asr #2
   12efc:	muleq	r1, ip, r2

00012f00 <body_with_two_returns@@Base>:
   12f00:	push	{r4, r5, lr}
   12f04:	sub	sp, sp, #20
   12f08:	ldr	r4, [pc, #628]	; 13184 <body_with_two_returns@@Base+0x284>
   12f0c:	ldrd	r2, [r4, #-8]
   12f10:	adds	r2, r2, #1
   12f14:	adc	r3, r3, #0
   12f18:	strd	r2, [r4, #-8]
   12f1c:	add	r1, sp, #4
   12f20:	mov	r0, sp
   12f24:	bl	14f30 <init_grammar@@Base>
   12f28:	ldrd	r2, [r4]
   12f2c:	adds	r2, r2, #1
   12f30:	adc	r3, r3, #0
   12f34:	strd	r2, [r4]
   12f38:	mov	r0, #32
   12f3c:	bl	118e0 <malloc@plt>
   12f40:	mov	r5, r0
   12f44:	mov	r0, #4
   12f48:	bl	118e0 <malloc@plt>
   12f4c:	str	r0, [r5]
   12f50:	bl	142e8 <init_token_obra@@Base>
   12f54:	ldrd	r2, [r4, #8]
   12f58:	adds	r2, r2, #1
   12f5c:	adc	r3, r3, #0
   12f60:	strd	r2, [r4, #8]
   12f64:	mov	r0, #4
   12f68:	bl	118e0 <malloc@plt>
   12f6c:	str	r0, [r5, #4]
   12f70:	bl	14330 <init_token_return@@Base>
   12f74:	ldrd	r2, [r4, #16]
   12f78:	adds	r2, r2, #1
   12f7c:	adc	r3, r3, #0
   12f80:	strd	r2, [r4, #16]
   12f84:	mov	r0, #8
   12f88:	bl	118e0 <malloc@plt>
   12f8c:	str	r0, [r5, #8]
   12f90:	mov	r1, #1
   12f94:	bl	14250 <init_token_int_value@@Base>
   12f98:	ldrd	r2, [r4, #24]
   12f9c:	adds	r2, r2, #1
   12fa0:	adc	r3, r3, #0
   12fa4:	strd	r2, [r4, #24]
   12fa8:	mov	r0, #4
   12fac:	bl	118e0 <malloc@plt>
   12fb0:	str	r0, [r5, #12]
   12fb4:	bl	14354 <init_token_semicolon@@Base>
   12fb8:	ldrd	r2, [r4, #32]
   12fbc:	adds	r2, r2, #1
   12fc0:	adc	r3, r3, #0
   12fc4:	strd	r2, [r4, #32]
   12fc8:	mov	r0, #4
   12fcc:	bl	118e0 <malloc@plt>
   12fd0:	str	r0, [r5, #16]
   12fd4:	bl	14330 <init_token_return@@Base>
   12fd8:	ldrd	r2, [r4, #40]	; 0x28
   12fdc:	adds	r2, r2, #1
   12fe0:	adc	r3, r3, #0
   12fe4:	strd	r2, [r4, #40]	; 0x28
   12fe8:	mov	r0, #8
   12fec:	bl	118e0 <malloc@plt>
   12ff0:	str	r0, [r5, #20]
   12ff4:	mov	r1, #1
   12ff8:	bl	14250 <init_token_int_value@@Base>
   12ffc:	ldrd	r2, [r4, #48]	; 0x30
   13000:	adds	r2, r2, #1
   13004:	adc	r3, r3, #0
   13008:	strd	r2, [r4, #48]	; 0x30
   1300c:	mov	r0, #4
   13010:	bl	118e0 <malloc@plt>
   13014:	str	r0, [r5, #24]
   13018:	bl	14354 <init_token_semicolon@@Base>
   1301c:	ldrd	r2, [r4, #56]	; 0x38
   13020:	adds	r2, r2, #1
   13024:	adc	r3, r3, #0
   13028:	strd	r2, [r4, #56]	; 0x38
   1302c:	mov	r0, #4
   13030:	bl	118e0 <malloc@plt>
   13034:	str	r0, [r5, #28]
   13038:	bl	1430c <init_token_cbra@@Base>
   1303c:	ldrd	r2, [r4, #64]	; 0x40
   13040:	adds	r2, r2, #1
   13044:	adc	r3, r3, #0
   13048:	strd	r2, [r4, #64]	; 0x40
   1304c:	ldr	r4, [pc, #308]	; 13188 <body_with_two_returns@@Base+0x288>
   13050:	str	r5, [r4, #228]	; 0xe4
   13054:	mov	r3, #8
   13058:	str	r3, [r4, #220]	; 0xdc
   1305c:	mov	r0, sp
   13060:	bl	158b0 <read_body@@Base>
   13064:	ldr	r3, [r4, #204]	; 0xcc
   13068:	cmp	r3, #8
   1306c:	bne	130bc <body_with_two_returns@@Base+0x1bc>
   13070:	cmp	r0, #0
   13074:	beq	130e4 <body_with_two_returns@@Base+0x1e4>
   13078:	ldr	r3, [r0]
   1307c:	cmp	r3, #3
   13080:	bne	1310c <body_with_two_returns@@Base+0x20c>
   13084:	ldr	r3, [r0, #4]
   13088:	ldr	r2, [r3]
   1308c:	cmp	r2, #3
   13090:	bne	13134 <body_with_two_returns@@Base+0x234>
   13094:	ldr	r3, [r3, #4]
   13098:	cmp	r3, #0
   1309c:	bne	1315c <body_with_two_returns@@Base+0x25c>
   130a0:	ldr	r1, [pc, #220]	; 13184 <body_with_two_returns@@Base+0x284>
   130a4:	ldrd	r2, [r1, #104]	; 0x68
   130a8:	adds	r2, r2, #1
   130ac:	adc	r3, r3, #0
   130b0:	strd	r2, [r1, #104]	; 0x68
   130b4:	add	sp, sp, #20
   130b8:	pop	{r4, r5, pc}
   130bc:	ldr	r1, [pc, #192]	; 13184 <body_with_two_returns@@Base+0x284>
   130c0:	ldrd	r2, [r1, #72]	; 0x48
   130c4:	adds	r2, r2, #1
   130c8:	adc	r3, r3, #0
   130cc:	strd	r2, [r1, #72]	; 0x48
   130d0:	ldr	r3, [pc, #180]	; 1318c <body_with_two_returns@@Base+0x28c>
   130d4:	ldr	r2, [pc, #180]	; 13190 <body_with_two_returns@@Base+0x290>
   130d8:	ldr	r1, [pc, #180]	; 13194 <body_with_two_returns@@Base+0x294>
   130dc:	ldr	r0, [pc, #180]	; 13198 <body_with_two_returns@@Base+0x298>
   130e0:	bl	119f4 <__assert_fail@plt>
   130e4:	ldr	r1, [pc, #152]	; 13184 <body_with_two_returns@@Base+0x284>
   130e8:	ldrd	r2, [r1, #80]	; 0x50
   130ec:	adds	r2, r2, #1
   130f0:	adc	r3, r3, #0
   130f4:	strd	r2, [r1, #80]	; 0x50
   130f8:	ldr	r3, [pc, #140]	; 1318c <body_with_two_returns@@Base+0x28c>
   130fc:	mov	r2, #372	; 0x174
   13100:	ldr	r1, [pc, #140]	; 13194 <body_with_two_returns@@Base+0x294>
   13104:	ldr	r0, [pc, #144]	; 1319c <body_with_two_returns@@Base+0x29c>
   13108:	bl	119f4 <__assert_fail@plt>
   1310c:	ldr	r1, [pc, #112]	; 13184 <body_with_two_returns@@Base+0x284>
   13110:	ldrd	r2, [r1, #88]	; 0x58
   13114:	adds	r2, r2, #1
   13118:	adc	r3, r3, #0
   1311c:	strd	r2, [r1, #88]	; 0x58
   13120:	ldr	r3, [pc, #100]	; 1318c <body_with_two_returns@@Base+0x28c>
   13124:	ldr	r2, [pc, #116]	; 131a0 <body_with_two_returns@@Base+0x2a0>
   13128:	ldr	r1, [pc, #100]	; 13194 <body_with_two_returns@@Base+0x294>
   1312c:	ldr	r0, [pc, #112]	; 131a4 <body_with_two_returns@@Base+0x2a4>
   13130:	bl	119f4 <__assert_fail@plt>
   13134:	ldr	r1, [pc, #72]	; 13184 <body_with_two_returns@@Base+0x284>
   13138:	ldrd	r2, [r1, #96]	; 0x60
   1313c:	adds	r2, r2, #1
   13140:	adc	r3, r3, #0
   13144:	strd	r2, [r1, #96]	; 0x60
   13148:	ldr	r3, [pc, #60]	; 1318c <body_with_two_returns@@Base+0x28c>
   1314c:	ldr	r2, [pc, #84]	; 131a8 <body_with_two_returns@@Base+0x2a8>
   13150:	ldr	r1, [pc, #60]	; 13194 <body_with_two_returns@@Base+0x294>
   13154:	ldr	r0, [pc, #80]	; 131ac <body_with_two_returns@@Base+0x2ac>
   13158:	bl	119f4 <__assert_fail@plt>
   1315c:	ldr	r1, [pc, #32]	; 13184 <body_with_two_returns@@Base+0x284>
   13160:	ldrd	r2, [r1, #112]	; 0x70
   13164:	adds	r2, r2, #1
   13168:	adc	r3, r3, #0
   1316c:	strd	r2, [r1, #112]	; 0x70
   13170:	ldr	r3, [pc, #20]	; 1318c <body_with_two_returns@@Base+0x28c>
   13174:	ldr	r2, [pc, #52]	; 131b0 <body_with_two_returns@@Base+0x2b0>
   13178:	ldr	r1, [pc, #20]	; 13194 <body_with_two_returns@@Base+0x294>
   1317c:	ldr	r0, [pc, #48]	; 131b4 <body_with_two_returns@@Base+0x2b4>
   13180:	bl	119f4 <__assert_fail@plt>
   13184:	andeq	r9, r2, r8, lsl #26
   13188:	andeq	sl, r2, r8, lsr r9
   1318c:	andeq	r8, r1, r0, rrx
   13190:	andeq	r0, r0, r3, ror r1
   13194:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13198:	andeq	r8, r1, ip, asr #5
   1319c:	muleq	r1, r0, r2
   131a0:	andeq	r0, r0, r5, ror r1
   131a4:	andeq	r8, r1, r8, ror #5
   131a8:	andeq	r0, r0, r6, ror r1
   131ac:	andeq	r8, r1, r0, lsl #6
   131b0:	andeq	r0, r0, r7, ror r1
   131b4:	andeq	r8, r1, ip, lsl r3

000131b8 <body_with_one_return@@Base>:
   131b8:	push	{r4, r5, lr}
   131bc:	sub	sp, sp, #20
   131c0:	ldr	r4, [pc, #472]	; 133a0 <body_with_one_return@@Base+0x1e8>
   131c4:	ldrd	r2, [r4, #-8]
   131c8:	adds	r2, r2, #1
   131cc:	adc	r3, r3, #0
   131d0:	strd	r2, [r4, #-8]
   131d4:	add	r1, sp, #4
   131d8:	mov	r0, sp
   131dc:	bl	14f30 <init_grammar@@Base>
   131e0:	ldrd	r2, [r4]
   131e4:	adds	r2, r2, #1
   131e8:	adc	r3, r3, #0
   131ec:	strd	r2, [r4]
   131f0:	mov	r0, #20
   131f4:	bl	118e0 <malloc@plt>
   131f8:	mov	r5, r0
   131fc:	mov	r0, #4
   13200:	bl	118e0 <malloc@plt>
   13204:	str	r0, [r5]
   13208:	bl	142e8 <init_token_obra@@Base>
   1320c:	ldrd	r2, [r4, #8]
   13210:	adds	r2, r2, #1
   13214:	adc	r3, r3, #0
   13218:	strd	r2, [r4, #8]
   1321c:	mov	r0, #4
   13220:	bl	118e0 <malloc@plt>
   13224:	str	r0, [r5, #4]
   13228:	bl	14330 <init_token_return@@Base>
   1322c:	ldrd	r2, [r4, #16]
   13230:	adds	r2, r2, #1
   13234:	adc	r3, r3, #0
   13238:	strd	r2, [r4, #16]
   1323c:	mov	r0, #8
   13240:	bl	118e0 <malloc@plt>
   13244:	str	r0, [r5, #8]
   13248:	mov	r1, #1
   1324c:	bl	14250 <init_token_int_value@@Base>
   13250:	ldrd	r2, [r4, #24]
   13254:	adds	r2, r2, #1
   13258:	adc	r3, r3, #0
   1325c:	strd	r2, [r4, #24]
   13260:	mov	r0, #4
   13264:	bl	118e0 <malloc@plt>
   13268:	str	r0, [r5, #12]
   1326c:	bl	14354 <init_token_semicolon@@Base>
   13270:	ldrd	r2, [r4, #32]
   13274:	adds	r2, r2, #1
   13278:	adc	r3, r3, #0
   1327c:	strd	r2, [r4, #32]
   13280:	mov	r0, #4
   13284:	bl	118e0 <malloc@plt>
   13288:	str	r0, [r5, #16]
   1328c:	bl	1430c <init_token_cbra@@Base>
   13290:	ldrd	r2, [r4, #40]	; 0x28
   13294:	adds	r2, r2, #1
   13298:	adc	r3, r3, #0
   1329c:	strd	r2, [r4, #40]	; 0x28
   132a0:	ldr	r4, [pc, #252]	; 133a4 <body_with_one_return@@Base+0x1ec>
   132a4:	str	r5, [r4, #228]	; 0xe4
   132a8:	mov	r3, #5
   132ac:	str	r3, [r4, #220]	; 0xdc
   132b0:	mov	r0, sp
   132b4:	bl	158b0 <read_body@@Base>
   132b8:	ldr	r3, [r4, #204]	; 0xcc
   132bc:	cmp	r3, #5
   132c0:	bne	13300 <body_with_one_return@@Base+0x148>
   132c4:	cmp	r0, #0
   132c8:	beq	13328 <body_with_one_return@@Base+0x170>
   132cc:	ldr	r3, [r0]
   132d0:	cmp	r3, #3
   132d4:	bne	13350 <body_with_one_return@@Base+0x198>
   132d8:	ldr	r3, [r0, #4]
   132dc:	cmp	r3, #0
   132e0:	bne	13378 <body_with_one_return@@Base+0x1c0>
   132e4:	ldr	r1, [pc, #180]	; 133a0 <body_with_one_return@@Base+0x1e8>
   132e8:	ldrd	r2, [r1, #72]	; 0x48
   132ec:	adds	r2, r2, #1
   132f0:	adc	r3, r3, #0
   132f4:	strd	r2, [r1, #72]	; 0x48
   132f8:	add	sp, sp, #20
   132fc:	pop	{r4, r5, pc}
   13300:	ldr	r1, [pc, #152]	; 133a0 <body_with_one_return@@Base+0x1e8>
   13304:	ldrd	r2, [r1, #48]	; 0x30
   13308:	adds	r2, r2, #1
   1330c:	adc	r3, r3, #0
   13310:	strd	r2, [r1, #48]	; 0x30
   13314:	ldr	r3, [pc, #140]	; 133a8 <body_with_one_return@@Base+0x1f0>
   13318:	ldr	r2, [pc, #140]	; 133ac <body_with_one_return@@Base+0x1f4>
   1331c:	ldr	r1, [pc, #140]	; 133b0 <body_with_one_return@@Base+0x1f8>
   13320:	ldr	r0, [pc, #140]	; 133b4 <body_with_one_return@@Base+0x1fc>
   13324:	bl	119f4 <__assert_fail@plt>
   13328:	ldr	r1, [pc, #112]	; 133a0 <body_with_one_return@@Base+0x1e8>
   1332c:	ldrd	r2, [r1, #56]	; 0x38
   13330:	adds	r2, r2, #1
   13334:	adc	r3, r3, #0
   13338:	strd	r2, [r1, #56]	; 0x38
   1333c:	ldr	r3, [pc, #100]	; 133a8 <body_with_one_return@@Base+0x1f0>
   13340:	ldr	r2, [pc, #112]	; 133b8 <body_with_one_return@@Base+0x200>
   13344:	ldr	r1, [pc, #100]	; 133b0 <body_with_one_return@@Base+0x1f8>
   13348:	ldr	r0, [pc, #108]	; 133bc <body_with_one_return@@Base+0x204>
   1334c:	bl	119f4 <__assert_fail@plt>
   13350:	ldr	r1, [pc, #72]	; 133a0 <body_with_one_return@@Base+0x1e8>
   13354:	ldrd	r2, [r1, #64]	; 0x40
   13358:	adds	r2, r2, #1
   1335c:	adc	r3, r3, #0
   13360:	strd	r2, [r1, #64]	; 0x40
   13364:	ldr	r3, [pc, #60]	; 133a8 <body_with_one_return@@Base+0x1f0>
   13368:	mov	r2, #408	; 0x198
   1336c:	ldr	r1, [pc, #60]	; 133b0 <body_with_one_return@@Base+0x1f8>
   13370:	ldr	r0, [pc, #72]	; 133c0 <body_with_one_return@@Base+0x208>
   13374:	bl	119f4 <__assert_fail@plt>
   13378:	ldr	r1, [pc, #32]	; 133a0 <body_with_one_return@@Base+0x1e8>
   1337c:	ldrd	r2, [r1, #80]	; 0x50
   13380:	adds	r2, r2, #1
   13384:	adc	r3, r3, #0
   13388:	strd	r2, [r1, #80]	; 0x50
   1338c:	ldr	r3, [pc, #20]	; 133a8 <body_with_one_return@@Base+0x1f0>
   13390:	ldr	r2, [pc, #44]	; 133c4 <body_with_one_return@@Base+0x20c>
   13394:	ldr	r1, [pc, #20]	; 133b0 <body_with_one_return@@Base+0x1f8>
   13398:	ldr	r0, [pc, #40]	; 133c8 <body_with_one_return@@Base+0x210>
   1339c:	bl	119f4 <__assert_fail@plt>
   133a0:	andeq	r9, r2, r8, lsl #27
   133a4:	andeq	sl, r2, r8, lsr r9
   133a8:	andeq	r8, r1, r8, ror r0
   133ac:	muleq	r0, r6, r1
   133b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   133b4:	andeq	r8, r1, r0, ror #2
   133b8:	muleq	r0, r7, r1
   133bc:	muleq	r1, r0, r2
   133c0:	andeq	r8, r1, r8, ror #5
   133c4:	muleq	r0, r9, r1
   133c8:	andeq	r8, r1, r4, lsr r3

000133cc <if_statement_inside_if_statement@@Base>:
   133cc:	push	{r4, r5, r6, r7, lr}
   133d0:	sub	sp, sp, #20
   133d4:	ldr	r4, [pc, #956]	; 13798 <if_statement_inside_if_statement@@Base+0x3cc>
   133d8:	ldrd	r2, [r4, #-8]
   133dc:	adds	r2, r2, #1
   133e0:	adc	r3, r3, #0
   133e4:	strd	r2, [r4, #-8]
   133e8:	add	r1, sp, #4
   133ec:	mov	r0, sp
   133f0:	bl	14f30 <init_grammar@@Base>
   133f4:	ldrd	r2, [r4]
   133f8:	adds	r2, r2, #1
   133fc:	adc	r3, r3, #0
   13400:	strd	r2, [r4]
   13404:	mov	r0, #3
   13408:	bl	118e0 <malloc@plt>
   1340c:	mov	r7, r0
   13410:	mov	r0, #3
   13414:	bl	118e0 <malloc@plt>
   13418:	mov	r6, r0
   1341c:	mov	r1, #33	; 0x21
   13420:	strb	r1, [r7]
   13424:	mov	r2, #61	; 0x3d
   13428:	strb	r2, [r7, #1]
   1342c:	mov	r3, #0
   13430:	strb	r3, [r7, #2]
   13434:	strb	r1, [r0]
   13438:	strb	r2, [r0, #1]
   1343c:	strb	r3, [r0, #2]
   13440:	mov	r0, #76	; 0x4c
   13444:	bl	118e0 <malloc@plt>
   13448:	mov	r5, r0
   1344c:	mov	r0, #4
   13450:	bl	118e0 <malloc@plt>
   13454:	str	r0, [r5]
   13458:	bl	142a0 <init_token_opar@@Base>
   1345c:	ldrd	r2, [r4, #8]
   13460:	adds	r2, r2, #1
   13464:	adc	r3, r3, #0
   13468:	strd	r2, [r4, #8]
   1346c:	mov	r0, #8
   13470:	bl	118e0 <malloc@plt>
   13474:	str	r0, [r5, #4]
   13478:	mov	r1, #1
   1347c:	bl	14250 <init_token_int_value@@Base>
   13480:	ldrd	r2, [r4, #16]
   13484:	adds	r2, r2, #1
   13488:	adc	r3, r3, #0
   1348c:	strd	r2, [r4, #16]
   13490:	mov	r0, #8
   13494:	bl	118e0 <malloc@plt>
   13498:	str	r0, [r5, #8]
   1349c:	mov	r1, #1
   134a0:	bl	14250 <init_token_int_value@@Base>
   134a4:	ldrd	r2, [r4, #24]
   134a8:	adds	r2, r2, #1
   134ac:	adc	r3, r3, #0
   134b0:	strd	r2, [r4, #24]
   134b4:	mov	r0, #8
   134b8:	bl	118e0 <malloc@plt>
   134bc:	str	r0, [r5, #12]
   134c0:	mov	r1, r7
   134c4:	bl	143e4 <init_token_boolean_op@@Base>
   134c8:	ldrd	r2, [r4, #32]
   134cc:	adds	r2, r2, #1
   134d0:	adc	r3, r3, #0
   134d4:	strd	r2, [r4, #32]
   134d8:	mov	r0, #8
   134dc:	bl	118e0 <malloc@plt>
   134e0:	str	r0, [r5, #16]
   134e4:	mov	r1, #1
   134e8:	bl	14250 <init_token_int_value@@Base>
   134ec:	ldrd	r2, [r4, #40]	; 0x28
   134f0:	adds	r2, r2, #1
   134f4:	adc	r3, r3, #0
   134f8:	strd	r2, [r4, #40]	; 0x28
   134fc:	mov	r0, #4
   13500:	bl	118e0 <malloc@plt>
   13504:	str	r0, [r5, #20]
   13508:	bl	142c4 <init_token_cpar@@Base>
   1350c:	ldrd	r2, [r4, #48]	; 0x30
   13510:	adds	r2, r2, #1
   13514:	adc	r3, r3, #0
   13518:	strd	r2, [r4, #48]	; 0x30
   1351c:	mov	r0, #4
   13520:	bl	118e0 <malloc@plt>
   13524:	str	r0, [r5, #24]
   13528:	bl	142e8 <init_token_obra@@Base>
   1352c:	ldrd	r2, [r4, #56]	; 0x38
   13530:	adds	r2, r2, #1
   13534:	adc	r3, r3, #0
   13538:	strd	r2, [r4, #56]	; 0x38
   1353c:	mov	r0, #4
   13540:	bl	118e0 <malloc@plt>
   13544:	str	r0, [r5, #28]
   13548:	bl	1439c <init_token_if@@Base>
   1354c:	ldrd	r2, [r4, #64]	; 0x40
   13550:	adds	r2, r2, #1
   13554:	adc	r3, r3, #0
   13558:	strd	r2, [r4, #64]	; 0x40
   1355c:	mov	r0, #4
   13560:	bl	118e0 <malloc@plt>
   13564:	str	r0, [r5, #32]
   13568:	bl	142a0 <init_token_opar@@Base>
   1356c:	ldrd	r2, [r4, #72]	; 0x48
   13570:	adds	r2, r2, #1
   13574:	adc	r3, r3, #0
   13578:	strd	r2, [r4, #72]	; 0x48
   1357c:	mov	r0, #8
   13580:	bl	118e0 <malloc@plt>
   13584:	str	r0, [r5, #36]	; 0x24
   13588:	mov	r1, #1
   1358c:	bl	14250 <init_token_int_value@@Base>
   13590:	ldrd	r2, [r4, #80]	; 0x50
   13594:	adds	r2, r2, #1
   13598:	adc	r3, r3, #0
   1359c:	strd	r2, [r4, #80]	; 0x50
   135a0:	mov	r0, #8
   135a4:	bl	118e0 <malloc@plt>
   135a8:	str	r0, [r5, #40]	; 0x28
   135ac:	mov	r1, #1
   135b0:	bl	14250 <init_token_int_value@@Base>
   135b4:	ldrd	r2, [r4, #88]	; 0x58
   135b8:	adds	r2, r2, #1
   135bc:	adc	r3, r3, #0
   135c0:	strd	r2, [r4, #88]	; 0x58
   135c4:	mov	r0, #8
   135c8:	bl	118e0 <malloc@plt>
   135cc:	str	r0, [r5, #44]	; 0x2c
   135d0:	mov	r1, r6
   135d4:	bl	143e4 <init_token_boolean_op@@Base>
   135d8:	ldrd	r2, [r4, #96]	; 0x60
   135dc:	adds	r2, r2, #1
   135e0:	adc	r3, r3, #0
   135e4:	strd	r2, [r4, #96]	; 0x60
   135e8:	mov	r0, #8
   135ec:	bl	118e0 <malloc@plt>
   135f0:	str	r0, [r5, #48]	; 0x30
   135f4:	mov	r1, #1
   135f8:	bl	14250 <init_token_int_value@@Base>
   135fc:	ldrd	r2, [r4, #104]	; 0x68
   13600:	adds	r2, r2, #1
   13604:	adc	r3, r3, #0
   13608:	strd	r2, [r4, #104]	; 0x68
   1360c:	mov	r0, #4
   13610:	bl	118e0 <malloc@plt>
   13614:	str	r0, [r5, #52]	; 0x34
   13618:	bl	142c4 <init_token_cpar@@Base>
   1361c:	ldrd	r2, [r4, #112]	; 0x70
   13620:	adds	r2, r2, #1
   13624:	adc	r3, r3, #0
   13628:	strd	r2, [r4, #112]	; 0x70
   1362c:	mov	r0, #4
   13630:	bl	118e0 <malloc@plt>
   13634:	str	r0, [r5, #56]	; 0x38
   13638:	bl	142e8 <init_token_obra@@Base>
   1363c:	ldrd	r2, [r4, #120]	; 0x78
   13640:	adds	r2, r2, #1
   13644:	adc	r3, r3, #0
   13648:	strd	r2, [r4, #120]	; 0x78
   1364c:	mov	r0, #4
   13650:	bl	118e0 <malloc@plt>
   13654:	str	r0, [r5, #60]	; 0x3c
   13658:	bl	1430c <init_token_cbra@@Base>
   1365c:	ldrd	r2, [r4, #128]	; 0x80
   13660:	adds	r2, r2, #1
   13664:	adc	r3, r3, #0
   13668:	strd	r2, [r4, #128]	; 0x80
   1366c:	mov	r0, #4
   13670:	bl	118e0 <malloc@plt>
   13674:	str	r0, [r5, #64]	; 0x40
   13678:	bl	1430c <init_token_cbra@@Base>
   1367c:	ldrd	r2, [r4, #136]	; 0x88
   13680:	adds	r2, r2, #1
   13684:	adc	r3, r3, #0
   13688:	strd	r2, [r4, #136]	; 0x88
   1368c:	mov	r0, #4
   13690:	bl	118e0 <malloc@plt>
   13694:	str	r0, [r5, #68]	; 0x44
   13698:	bl	1430c <init_token_cbra@@Base>
   1369c:	ldrd	r2, [r4, #144]	; 0x90
   136a0:	adds	r2, r2, #1
   136a4:	adc	r3, r3, #0
   136a8:	strd	r2, [r4, #144]	; 0x90
   136ac:	mov	r0, #4
   136b0:	bl	118e0 <malloc@plt>
   136b4:	str	r0, [r5, #72]	; 0x48
   136b8:	bl	14378 <init_token_eof@@Base>
   136bc:	ldrd	r2, [r4, #152]	; 0x98
   136c0:	adds	r2, r2, #1
   136c4:	adc	r3, r3, #0
   136c8:	strd	r2, [r4, #152]	; 0x98
   136cc:	ldr	r4, [pc, #200]	; 1379c <if_statement_inside_if_statement@@Base+0x3d0>
   136d0:	str	r5, [r4, #228]	; 0xe4
   136d4:	mov	r3, #19
   136d8:	str	r3, [r4, #220]	; 0xdc
   136dc:	mov	r0, sp
   136e0:	bl	15748 <read_if_statement@@Base>
   136e4:	ldr	r3, [r4, #204]	; 0xcc
   136e8:	cmp	r3, #19
   136ec:	bne	13720 <if_statement_inside_if_statement@@Base+0x354>
   136f0:	cmp	r0, #0
   136f4:	beq	13748 <if_statement_inside_if_statement@@Base+0x37c>
   136f8:	ldr	r3, [r0]
   136fc:	cmp	r3, #4
   13700:	bne	13770 <if_statement_inside_if_statement@@Base+0x3a4>
   13704:	ldr	r1, [pc, #140]	; 13798 <if_statement_inside_if_statement@@Base+0x3cc>
   13708:	ldrd	r2, [r1, #176]	; 0xb0
   1370c:	adds	r2, r2, #1
   13710:	adc	r3, r3, #0
   13714:	strd	r2, [r1, #176]	; 0xb0
   13718:	add	sp, sp, #20
   1371c:	pop	{r4, r5, r6, r7, pc}
   13720:	ldr	r1, [pc, #112]	; 13798 <if_statement_inside_if_statement@@Base+0x3cc>
   13724:	ldrd	r2, [r1, #160]	; 0xa0
   13728:	adds	r2, r2, #1
   1372c:	adc	r3, r3, #0
   13730:	strd	r2, [r1, #160]	; 0xa0
   13734:	ldr	r3, [pc, #100]	; 137a0 <if_statement_inside_if_statement@@Base+0x3d4>
   13738:	mov	r2, #480	; 0x1e0
   1373c:	ldr	r1, [pc, #96]	; 137a4 <if_statement_inside_if_statement@@Base+0x3d8>
   13740:	ldr	r0, [pc, #96]	; 137a8 <if_statement_inside_if_statement@@Base+0x3dc>
   13744:	bl	119f4 <__assert_fail@plt>
   13748:	ldr	r1, [pc, #72]	; 13798 <if_statement_inside_if_statement@@Base+0x3cc>
   1374c:	ldrd	r2, [r1, #168]	; 0xa8
   13750:	adds	r2, r2, #1
   13754:	adc	r3, r3, #0
   13758:	strd	r2, [r1, #168]	; 0xa8
   1375c:	ldr	r3, [pc, #60]	; 137a0 <if_statement_inside_if_statement@@Base+0x3d4>
   13760:	ldr	r2, [pc, #68]	; 137ac <if_statement_inside_if_statement@@Base+0x3e0>
   13764:	ldr	r1, [pc, #56]	; 137a4 <if_statement_inside_if_statement@@Base+0x3d8>
   13768:	ldr	r0, [pc, #64]	; 137b0 <if_statement_inside_if_statement@@Base+0x3e4>
   1376c:	bl	119f4 <__assert_fail@plt>
   13770:	ldr	r1, [pc, #32]	; 13798 <if_statement_inside_if_statement@@Base+0x3cc>
   13774:	ldrd	r2, [r1, #184]	; 0xb8
   13778:	adds	r2, r2, #1
   1377c:	adc	r3, r3, #0
   13780:	strd	r2, [r1, #184]	; 0xb8
   13784:	ldr	r3, [pc, #20]	; 137a0 <if_statement_inside_if_statement@@Base+0x3d4>
   13788:	ldr	r2, [pc, #36]	; 137b4 <if_statement_inside_if_statement@@Base+0x3e8>
   1378c:	ldr	r1, [pc, #16]	; 137a4 <if_statement_inside_if_statement@@Base+0x3d8>
   13790:	ldr	r0, [pc, #32]	; 137b8 <if_statement_inside_if_statement@@Base+0x3ec>
   13794:	bl	119f4 <__assert_fail@plt>
   13798:	andeq	r9, r2, r8, ror #27
   1379c:	andeq	sl, r2, r8, lsr r9
   137a0:	muleq	r1, r0, r0
   137a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   137a8:	andeq	r8, r1, r8, asr #6
   137ac:	andeq	r0, r0, r1, ror #3
   137b0:	muleq	r1, r0, r2
   137b4:	andeq	r0, r0, r2, ror #3
   137b8:	muleq	r1, ip, r2

000137bc <if_statement_inside_else_statement@@Base>:
   137bc:	push	{r4, r5, r6, r7, lr}
   137c0:	sub	sp, sp, #20
   137c4:	ldr	r4, [pc, #1020]	; 13bc8 <if_statement_inside_else_statement@@Base+0x40c>
   137c8:	ldrd	r2, [r4]
   137cc:	adds	r2, r2, #1
   137d0:	adc	r3, r3, #0
   137d4:	strd	r2, [r4]
   137d8:	add	r1, sp, #4
   137dc:	mov	r0, sp
   137e0:	bl	14f30 <init_grammar@@Base>
   137e4:	ldrd	r2, [r4, #8]
   137e8:	adds	r2, r2, #1
   137ec:	adc	r3, r3, #0
   137f0:	strd	r2, [r4, #8]
   137f4:	mov	r0, #3
   137f8:	bl	118e0 <malloc@plt>
   137fc:	mov	r7, r0
   13800:	mov	r0, #3
   13804:	bl	118e0 <malloc@plt>
   13808:	mov	r6, r0
   1380c:	mov	r1, #33	; 0x21
   13810:	strb	r1, [r7]
   13814:	mov	r2, #61	; 0x3d
   13818:	strb	r2, [r7, #1]
   1381c:	mov	r3, #0
   13820:	strb	r3, [r7, #2]
   13824:	strb	r1, [r0]
   13828:	strb	r2, [r0, #1]
   1382c:	strb	r3, [r0, #2]
   13830:	mov	r0, #84	; 0x54
   13834:	bl	118e0 <malloc@plt>
   13838:	mov	r5, r0
   1383c:	mov	r0, #4
   13840:	bl	118e0 <malloc@plt>
   13844:	str	r0, [r5]
   13848:	bl	142a0 <init_token_opar@@Base>
   1384c:	ldrd	r2, [r4, #16]
   13850:	adds	r2, r2, #1
   13854:	adc	r3, r3, #0
   13858:	strd	r2, [r4, #16]
   1385c:	mov	r0, #8
   13860:	bl	118e0 <malloc@plt>
   13864:	str	r0, [r5, #4]
   13868:	mov	r1, #1
   1386c:	bl	14250 <init_token_int_value@@Base>
   13870:	ldrd	r2, [r4, #24]
   13874:	adds	r2, r2, #1
   13878:	adc	r3, r3, #0
   1387c:	strd	r2, [r4, #24]
   13880:	mov	r0, #8
   13884:	bl	118e0 <malloc@plt>
   13888:	str	r0, [r5, #8]
   1388c:	mov	r1, #1
   13890:	bl	14250 <init_token_int_value@@Base>
   13894:	ldrd	r2, [r4, #32]
   13898:	adds	r2, r2, #1
   1389c:	adc	r3, r3, #0
   138a0:	strd	r2, [r4, #32]
   138a4:	mov	r0, #8
   138a8:	bl	118e0 <malloc@plt>
   138ac:	str	r0, [r5, #12]
   138b0:	mov	r1, r7
   138b4:	bl	143e4 <init_token_boolean_op@@Base>
   138b8:	ldrd	r2, [r4, #40]	; 0x28
   138bc:	adds	r2, r2, #1
   138c0:	adc	r3, r3, #0
   138c4:	strd	r2, [r4, #40]	; 0x28
   138c8:	mov	r0, #8
   138cc:	bl	118e0 <malloc@plt>
   138d0:	str	r0, [r5, #16]
   138d4:	mov	r1, #1
   138d8:	bl	14250 <init_token_int_value@@Base>
   138dc:	ldrd	r2, [r4, #48]	; 0x30
   138e0:	adds	r2, r2, #1
   138e4:	adc	r3, r3, #0
   138e8:	strd	r2, [r4, #48]	; 0x30
   138ec:	mov	r0, #4
   138f0:	bl	118e0 <malloc@plt>
   138f4:	str	r0, [r5, #20]
   138f8:	bl	142c4 <init_token_cpar@@Base>
   138fc:	ldrd	r2, [r4, #56]	; 0x38
   13900:	adds	r2, r2, #1
   13904:	adc	r3, r3, #0
   13908:	strd	r2, [r4, #56]	; 0x38
   1390c:	mov	r0, #4
   13910:	bl	118e0 <malloc@plt>
   13914:	str	r0, [r5, #24]
   13918:	bl	142e8 <init_token_obra@@Base>
   1391c:	ldrd	r2, [r4, #64]	; 0x40
   13920:	adds	r2, r2, #1
   13924:	adc	r3, r3, #0
   13928:	strd	r2, [r4, #64]	; 0x40
   1392c:	mov	r0, #4
   13930:	bl	118e0 <malloc@plt>
   13934:	str	r0, [r5, #28]
   13938:	bl	1430c <init_token_cbra@@Base>
   1393c:	ldrd	r2, [r4, #72]	; 0x48
   13940:	adds	r2, r2, #1
   13944:	adc	r3, r3, #0
   13948:	strd	r2, [r4, #72]	; 0x48
   1394c:	mov	r0, #4
   13950:	bl	118e0 <malloc@plt>
   13954:	str	r0, [r5, #32]
   13958:	bl	143c0 <init_token_else@@Base>
   1395c:	ldrd	r2, [r4, #80]	; 0x50
   13960:	adds	r2, r2, #1
   13964:	adc	r3, r3, #0
   13968:	strd	r2, [r4, #80]	; 0x50
   1396c:	mov	r0, #4
   13970:	bl	118e0 <malloc@plt>
   13974:	str	r0, [r5, #36]	; 0x24
   13978:	bl	142e8 <init_token_obra@@Base>
   1397c:	ldrd	r2, [r4, #88]	; 0x58
   13980:	adds	r2, r2, #1
   13984:	adc	r3, r3, #0
   13988:	strd	r2, [r4, #88]	; 0x58
   1398c:	mov	r0, #4
   13990:	bl	118e0 <malloc@plt>
   13994:	str	r0, [r5, #40]	; 0x28
   13998:	bl	1439c <init_token_if@@Base>
   1399c:	ldrd	r2, [r4, #96]	; 0x60
   139a0:	adds	r2, r2, #1
   139a4:	adc	r3, r3, #0
   139a8:	strd	r2, [r4, #96]	; 0x60
   139ac:	mov	r0, #4
   139b0:	bl	118e0 <malloc@plt>
   139b4:	str	r0, [r5, #44]	; 0x2c
   139b8:	bl	142a0 <init_token_opar@@Base>
   139bc:	ldrd	r2, [r4, #104]	; 0x68
   139c0:	adds	r2, r2, #1
   139c4:	adc	r3, r3, #0
   139c8:	strd	r2, [r4, #104]	; 0x68
   139cc:	mov	r0, #8
   139d0:	bl	118e0 <malloc@plt>
   139d4:	str	r0, [r5, #48]	; 0x30
   139d8:	mov	r1, #1
   139dc:	bl	14250 <init_token_int_value@@Base>
   139e0:	ldrd	r2, [r4, #112]	; 0x70
   139e4:	adds	r2, r2, #1
   139e8:	adc	r3, r3, #0
   139ec:	strd	r2, [r4, #112]	; 0x70
   139f0:	mov	r0, #8
   139f4:	bl	118e0 <malloc@plt>
   139f8:	str	r0, [r5, #52]	; 0x34
   139fc:	mov	r1, #1
   13a00:	bl	14250 <init_token_int_value@@Base>
   13a04:	ldrd	r2, [r4, #120]	; 0x78
   13a08:	adds	r2, r2, #1
   13a0c:	adc	r3, r3, #0
   13a10:	strd	r2, [r4, #120]	; 0x78
   13a14:	mov	r0, #8
   13a18:	bl	118e0 <malloc@plt>
   13a1c:	str	r0, [r5, #56]	; 0x38
   13a20:	mov	r1, r6
   13a24:	bl	143e4 <init_token_boolean_op@@Base>
   13a28:	ldrd	r2, [r4, #128]	; 0x80
   13a2c:	adds	r2, r2, #1
   13a30:	adc	r3, r3, #0
   13a34:	strd	r2, [r4, #128]	; 0x80
   13a38:	mov	r0, #8
   13a3c:	bl	118e0 <malloc@plt>
   13a40:	str	r0, [r5, #60]	; 0x3c
   13a44:	mov	r1, #1
   13a48:	bl	14250 <init_token_int_value@@Base>
   13a4c:	ldrd	r2, [r4, #136]	; 0x88
   13a50:	adds	r2, r2, #1
   13a54:	adc	r3, r3, #0
   13a58:	strd	r2, [r4, #136]	; 0x88
   13a5c:	mov	r0, #4
   13a60:	bl	118e0 <malloc@plt>
   13a64:	str	r0, [r5, #64]	; 0x40
   13a68:	bl	142c4 <init_token_cpar@@Base>
   13a6c:	ldrd	r2, [r4, #144]	; 0x90
   13a70:	adds	r2, r2, #1
   13a74:	adc	r3, r3, #0
   13a78:	strd	r2, [r4, #144]	; 0x90
   13a7c:	mov	r0, #4
   13a80:	bl	118e0 <malloc@plt>
   13a84:	str	r0, [r5, #68]	; 0x44
   13a88:	bl	142e8 <init_token_obra@@Base>
   13a8c:	ldrd	r2, [r4, #152]	; 0x98
   13a90:	adds	r2, r2, #1
   13a94:	adc	r3, r3, #0
   13a98:	strd	r2, [r4, #152]	; 0x98
   13a9c:	mov	r0, #4
   13aa0:	bl	118e0 <malloc@plt>
   13aa4:	str	r0, [r5, #72]	; 0x48
   13aa8:	bl	1430c <init_token_cbra@@Base>
   13aac:	ldrd	r2, [r4, #160]	; 0xa0
   13ab0:	adds	r2, r2, #1
   13ab4:	adc	r3, r3, #0
   13ab8:	strd	r2, [r4, #160]	; 0xa0
   13abc:	mov	r0, #4
   13ac0:	bl	118e0 <malloc@plt>
   13ac4:	str	r0, [r5, #76]	; 0x4c
   13ac8:	bl	1430c <init_token_cbra@@Base>
   13acc:	ldrd	r2, [r4, #168]	; 0xa8
   13ad0:	adds	r2, r2, #1
   13ad4:	adc	r3, r3, #0
   13ad8:	strd	r2, [r4, #168]	; 0xa8
   13adc:	mov	r0, #4
   13ae0:	bl	118e0 <malloc@plt>
   13ae4:	str	r0, [r5, #80]	; 0x50
   13ae8:	bl	1430c <init_token_cbra@@Base>
   13aec:	ldrd	r2, [r4, #176]	; 0xb0
   13af0:	adds	r2, r2, #1
   13af4:	adc	r3, r3, #0
   13af8:	strd	r2, [r4, #176]	; 0xb0
   13afc:	ldr	r4, [pc, #200]	; 13bcc <if_statement_inside_else_statement@@Base+0x410>
   13b00:	str	r5, [r4, #228]	; 0xe4
   13b04:	mov	r3, #21
   13b08:	str	r3, [r4, #220]	; 0xdc
   13b0c:	mov	r0, sp
   13b10:	bl	15748 <read_if_statement@@Base>
   13b14:	ldr	r3, [r4, #204]	; 0xcc
   13b18:	cmp	r3, #21
   13b1c:	bne	13b50 <if_statement_inside_else_statement@@Base+0x394>
   13b20:	cmp	r0, #0
   13b24:	beq	13b78 <if_statement_inside_else_statement@@Base+0x3bc>
   13b28:	ldr	r3, [r0]
   13b2c:	cmp	r3, #4
   13b30:	bne	13ba0 <if_statement_inside_else_statement@@Base+0x3e4>
   13b34:	ldr	r1, [pc, #140]	; 13bc8 <if_statement_inside_else_statement@@Base+0x40c>
   13b38:	ldrd	r2, [r1, #200]	; 0xc8
   13b3c:	adds	r2, r2, #1
   13b40:	adc	r3, r3, #0
   13b44:	strd	r2, [r1, #200]	; 0xc8
   13b48:	add	sp, sp, #20
   13b4c:	pop	{r4, r5, r6, r7, pc}
   13b50:	ldr	r1, [pc, #112]	; 13bc8 <if_statement_inside_else_statement@@Base+0x40c>
   13b54:	ldrd	r2, [r1, #184]	; 0xb8
   13b58:	adds	r2, r2, #1
   13b5c:	adc	r3, r3, #0
   13b60:	strd	r2, [r1, #184]	; 0xb8
   13b64:	ldr	r3, [pc, #100]	; 13bd0 <if_statement_inside_else_statement@@Base+0x414>
   13b68:	ldr	r2, [pc, #100]	; 13bd4 <if_statement_inside_else_statement@@Base+0x418>
   13b6c:	ldr	r1, [pc, #100]	; 13bd8 <if_statement_inside_else_statement@@Base+0x41c>
   13b70:	ldr	r0, [pc, #100]	; 13bdc <if_statement_inside_else_statement@@Base+0x420>
   13b74:	bl	119f4 <__assert_fail@plt>
   13b78:	ldr	r1, [pc, #72]	; 13bc8 <if_statement_inside_else_statement@@Base+0x40c>
   13b7c:	ldrd	r2, [r1, #192]	; 0xc0
   13b80:	adds	r2, r2, #1
   13b84:	adc	r3, r3, #0
   13b88:	strd	r2, [r1, #192]	; 0xc0
   13b8c:	ldr	r3, [pc, #60]	; 13bd0 <if_statement_inside_else_statement@@Base+0x414>
   13b90:	ldr	r2, [pc, #72]	; 13be0 <if_statement_inside_else_statement@@Base+0x424>
   13b94:	ldr	r1, [pc, #60]	; 13bd8 <if_statement_inside_else_statement@@Base+0x41c>
   13b98:	ldr	r0, [pc, #68]	; 13be4 <if_statement_inside_else_statement@@Base+0x428>
   13b9c:	bl	119f4 <__assert_fail@plt>
   13ba0:	ldr	r1, [pc, #32]	; 13bc8 <if_statement_inside_else_statement@@Base+0x40c>
   13ba4:	ldrd	r2, [r1, #208]	; 0xd0
   13ba8:	adds	r2, r2, #1
   13bac:	adc	r3, r3, #0
   13bb0:	strd	r2, [r1, #208]	; 0xd0
   13bb4:	ldr	r3, [pc, #20]	; 13bd0 <if_statement_inside_else_statement@@Base+0x414>
   13bb8:	mov	r2, #560	; 0x230
   13bbc:	ldr	r1, [pc, #20]	; 13bd8 <if_statement_inside_else_statement@@Base+0x41c>
   13bc0:	ldr	r0, [pc, #32]	; 13be8 <if_statement_inside_else_statement@@Base+0x42c>
   13bc4:	bl	119f4 <__assert_fail@plt>
   13bc8:	andeq	r9, r2, r8, lsr #29
   13bcc:	andeq	sl, r2, r8, lsr r9
   13bd0:	strheq	r8, [r1], -r4
   13bd4:	andeq	r0, r0, lr, lsr #4
   13bd8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13bdc:	andeq	r8, r1, r4, ror #6
   13be0:	andeq	r0, r0, pc, lsr #4
   13be4:	muleq	r1, r0, r2
   13be8:	muleq	r1, ip, r2

00013bec <main@@Base>:
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bf0:	ldr	r5, [pc, #1480]	; 141c0 <main@@Base+0x5d4>
   13bf4:	add	r4, r5, #1520	; 0x5f0
   13bf8:	ldrd	r2, [r4, #-8]
   13bfc:	adds	r2, r2, #1
   13c00:	adc	r3, r3, #0
   13c04:	strd	r2, [r4, #-8]
   13c08:	ldr	r6, [pc, #1460]	; 141c4 <main@@Base+0x5d8>
   13c0c:	mov	r1, #0
   13c10:	ldr	r0, [r6]
   13c14:	bl	1185c <setbuf@plt>
   13c18:	ldrd	r2, [r4]
   13c1c:	adds	r2, r2, #1
   13c20:	adc	r3, r3, #0
   13c24:	strd	r2, [r4]
   13c28:	ldr	r9, [pc, #1432]	; 141c8 <main@@Base+0x5dc>
   13c2c:	ldr	r3, [r6]
   13c30:	mov	r2, #14
   13c34:	mov	r1, #1
   13c38:	mov	r0, r9
   13c3c:	bl	118a4 <fwrite@plt>
   13c40:	ldrd	r2, [r4, #8]
   13c44:	adds	r2, r2, #1
   13c48:	adc	r3, r3, #0
   13c4c:	strd	r2, [r4, #8]
   13c50:	ldr	r3, [r6]
   13c54:	mov	r2, #14
   13c58:	mov	r1, #1
   13c5c:	ldr	r0, [pc, #1384]	; 141cc <main@@Base+0x5e0>
   13c60:	bl	118a4 <fwrite@plt>
   13c64:	ldrd	r2, [r4, #16]
   13c68:	adds	r2, r2, #1
   13c6c:	adc	r3, r3, #0
   13c70:	strd	r2, [r4, #16]
   13c74:	ldr	r3, [r6]
   13c78:	mov	r2, #15
   13c7c:	mov	r1, #1
   13c80:	ldr	r0, [pc, #1352]	; 141d0 <main@@Base+0x5e4>
   13c84:	bl	118a4 <fwrite@plt>
   13c88:	ldrd	r2, [r4, #24]
   13c8c:	adds	r2, r2, #1
   13c90:	adc	r3, r3, #0
   13c94:	strd	r2, [r4, #24]
   13c98:	mov	r0, #0
   13c9c:	bl	11874 <fflush@plt>
   13ca0:	ldrd	r2, [r4, #32]
   13ca4:	adds	r2, r2, #1
   13ca8:	adc	r3, r3, #0
   13cac:	strd	r2, [r4, #32]
   13cb0:	ldr	r8, [pc, #1308]	; 141d4 <main@@Base+0x5e8>
   13cb4:	ldr	r7, [pc, #1308]	; 141d8 <main@@Base+0x5ec>
   13cb8:	ldr	r2, [pc, #1308]	; 141dc <main@@Base+0x5f0>
   13cbc:	mov	r1, r8
   13cc0:	mov	r0, r7
   13cc4:	bl	11868 <printf@plt>
   13cc8:	ldrd	r2, [r4, #40]	; 0x28
   13ccc:	adds	r2, r2, #1
   13cd0:	adc	r3, r3, #0
   13cd4:	strd	r2, [r4, #40]	; 0x28
   13cd8:	bl	11e20 <setup@@Base>
   13cdc:	ldrd	r2, [r4, #48]	; 0x30
   13ce0:	adds	r2, r2, #1
   13ce4:	adc	r3, r3, #0
   13ce8:	strd	r2, [r4, #48]	; 0x30
   13cec:	bl	11e68 <no_int_as_first_stuff@@Base>
   13cf0:	ldrd	r2, [r4, #56]	; 0x38
   13cf4:	adds	r2, r2, #1
   13cf8:	adc	r3, r3, #0
   13cfc:	strd	r2, [r4, #56]	; 0x38
   13d00:	ldr	r6, [pc, #1240]	; 141e0 <main@@Base+0x5f4>
   13d04:	mov	r0, r6
   13d08:	bl	118d4 <puts@plt>
   13d0c:	ldrd	r2, [r4, #64]	; 0x40
   13d10:	adds	r2, r2, #1
   13d14:	adc	r3, r3, #0
   13d18:	strd	r2, [r4, #64]	; 0x40
   13d1c:	ldr	r2, [pc, #1216]	; 141e4 <main@@Base+0x5f8>
   13d20:	mov	r1, r8
   13d24:	mov	r0, r7
   13d28:	bl	11868 <printf@plt>
   13d2c:	ldrd	r2, [r4, #72]	; 0x48
   13d30:	adds	r2, r2, #1
   13d34:	adc	r3, r3, #0
   13d38:	strd	r2, [r4, #72]	; 0x48
   13d3c:	bl	11e20 <setup@@Base>
   13d40:	ldrd	r2, [r4, #80]	; 0x50
   13d44:	adds	r2, r2, #1
   13d48:	adc	r3, r3, #0
   13d4c:	strd	r2, [r4, #80]	; 0x50
   13d50:	bl	11f68 <int_but_not_followed_by_function@@Base>
   13d54:	ldrd	r2, [r4, #88]	; 0x58
   13d58:	adds	r2, r2, #1
   13d5c:	adc	r3, r3, #0
   13d60:	strd	r2, [r4, #88]	; 0x58
   13d64:	mov	r0, r6
   13d68:	bl	118d4 <puts@plt>
   13d6c:	ldrd	r2, [r4, #96]	; 0x60
   13d70:	adds	r2, r2, #1
   13d74:	adc	r3, r3, #0
   13d78:	strd	r2, [r4, #96]	; 0x60
   13d7c:	ldr	r2, [pc, #1124]	; 141e8 <main@@Base+0x5fc>
   13d80:	mov	r1, r8
   13d84:	mov	r0, r7
   13d88:	bl	11868 <printf@plt>
   13d8c:	ldrd	r2, [r4, #104]	; 0x68
   13d90:	adds	r2, r2, #1
   13d94:	adc	r3, r3, #0
   13d98:	strd	r2, [r4, #104]	; 0x68
   13d9c:	bl	11e20 <setup@@Base>
   13da0:	ldrd	r2, [r4, #112]	; 0x70
   13da4:	adds	r2, r2, #1
   13da8:	adc	r3, r3, #0
   13dac:	strd	r2, [r4, #112]	; 0x70
   13db0:	bl	127a8 <boolean_unary_operator_is_read_properly@@Base>
   13db4:	ldrd	r2, [r4, #120]	; 0x78
   13db8:	adds	r2, r2, #1
   13dbc:	adc	r3, r3, #0
   13dc0:	strd	r2, [r4, #120]	; 0x78
   13dc4:	mov	r0, r6
   13dc8:	bl	118d4 <puts@plt>
   13dcc:	ldrd	r2, [r4, #128]	; 0x80
   13dd0:	adds	r2, r2, #1
   13dd4:	adc	r3, r3, #0
   13dd8:	strd	r2, [r4, #128]	; 0x80
   13ddc:	ldr	r2, [pc, #1032]	; 141ec <main@@Base+0x600>
   13de0:	mov	r1, r8
   13de4:	mov	r0, r7
   13de8:	bl	11868 <printf@plt>
   13dec:	ldrd	r2, [r4, #136]	; 0x88
   13df0:	adds	r2, r2, #1
   13df4:	adc	r3, r3, #0
   13df8:	strd	r2, [r4, #136]	; 0x88
   13dfc:	bl	11e20 <setup@@Base>
   13e00:	ldrd	r2, [r4, #144]	; 0x90
   13e04:	adds	r2, r2, #1
   13e08:	adc	r3, r3, #0
   13e0c:	strd	r2, [r4, #144]	; 0x90
   13e10:	bl	12570 <boolean_binary_operator_is_read_properly@@Base>
   13e14:	ldrd	r2, [r4, #152]	; 0x98
   13e18:	adds	r2, r2, #1
   13e1c:	adc	r3, r3, #0
   13e20:	strd	r2, [r4, #152]	; 0x98
   13e24:	mov	r0, r6
   13e28:	bl	118d4 <puts@plt>
   13e2c:	ldrd	r2, [r4, #160]	; 0xa0
   13e30:	adds	r2, r2, #1
   13e34:	adc	r3, r3, #0
   13e38:	strd	r2, [r4, #160]	; 0xa0
   13e3c:	ldr	r2, [pc, #940]	; 141f0 <main@@Base+0x604>
   13e40:	mov	r1, r8
   13e44:	mov	r0, r7
   13e48:	bl	11868 <printf@plt>
   13e4c:	ldrd	r2, [r4, #168]	; 0xa8
   13e50:	adds	r2, r2, #1
   13e54:	adc	r3, r3, #0
   13e58:	strd	r2, [r4, #168]	; 0xa8
   13e5c:	bl	11e20 <setup@@Base>
   13e60:	ldrd	r2, [r4, #176]	; 0xb0
   13e64:	adds	r2, r2, #1
   13e68:	adc	r3, r3, #0
   13e6c:	strd	r2, [r4, #176]	; 0xb0
   13e70:	bl	1209c <boolean_expression_is_read_properly@@Base>
   13e74:	ldrd	r2, [r4, #184]	; 0xb8
   13e78:	adds	r2, r2, #1
   13e7c:	adc	r3, r3, #0
   13e80:	strd	r2, [r4, #184]	; 0xb8
   13e84:	mov	r0, r6
   13e88:	bl	118d4 <puts@plt>
   13e8c:	ldrd	r2, [r4, #192]	; 0xc0
   13e90:	adds	r2, r2, #1
   13e94:	adc	r3, r3, #0
   13e98:	strd	r2, [r4, #192]	; 0xc0
   13e9c:	ldr	r2, [pc, #848]	; 141f4 <main@@Base+0x608>
   13ea0:	mov	r1, r8
   13ea4:	mov	r0, r7
   13ea8:	bl	11868 <printf@plt>
   13eac:	ldrd	r2, [r4, #200]	; 0xc8
   13eb0:	adds	r2, r2, #1
   13eb4:	adc	r3, r3, #0
   13eb8:	strd	r2, [r4, #200]	; 0xc8
   13ebc:	bl	11e20 <setup@@Base>
   13ec0:	ldrd	r2, [r4, #208]	; 0xd0
   13ec4:	adds	r2, r2, #1
   13ec8:	adc	r3, r3, #0
   13ecc:	strd	r2, [r4, #208]	; 0xd0
   13ed0:	bl	122bc <boolean_expression_complex@@Base>
   13ed4:	ldrd	r2, [r4, #216]	; 0xd8
   13ed8:	adds	r2, r2, #1
   13edc:	adc	r3, r3, #0
   13ee0:	strd	r2, [r4, #216]	; 0xd8
   13ee4:	mov	r0, r6
   13ee8:	bl	118d4 <puts@plt>
   13eec:	ldrd	r2, [r4, #224]	; 0xe0
   13ef0:	adds	r2, r2, #1
   13ef4:	adc	r3, r3, #0
   13ef8:	strd	r2, [r4, #224]	; 0xe0
   13efc:	ldr	r2, [pc, #756]	; 141f8 <main@@Base+0x60c>
   13f00:	mov	r1, r8
   13f04:	mov	r0, r7
   13f08:	bl	11868 <printf@plt>
   13f0c:	ldrd	r2, [r4, #232]	; 0xe8
   13f10:	adds	r2, r2, #1
   13f14:	adc	r3, r3, #0
   13f18:	strd	r2, [r4, #232]	; 0xe8
   13f1c:	bl	11e20 <setup@@Base>
   13f20:	ldrd	r2, [r4, #240]	; 0xf0
   13f24:	adds	r2, r2, #1
   13f28:	adc	r3, r3, #0
   13f2c:	strd	r2, [r4, #240]	; 0xf0
   13f30:	bl	129b0 <if_statement_only@@Base>
   13f34:	ldrd	r2, [r4, #248]	; 0xf8
   13f38:	adds	r2, r2, #1
   13f3c:	adc	r3, r3, #0
   13f40:	strd	r2, [r4, #248]	; 0xf8
   13f44:	mov	r0, r6
   13f48:	bl	118d4 <puts@plt>
   13f4c:	add	r1, r5, #1776	; 0x6f0
   13f50:	ldrd	r2, [r1]
   13f54:	adds	r2, r2, #1
   13f58:	adc	r3, r3, #0
   13f5c:	strd	r2, [r1]
   13f60:	ldr	r2, [pc, #660]	; 141fc <main@@Base+0x610>
   13f64:	mov	r1, r8
   13f68:	mov	r0, r7
   13f6c:	bl	11868 <printf@plt>
   13f70:	add	r4, r5, #1792	; 0x700
   13f74:	ldrd	r2, [r4, #-8]
   13f78:	adds	r2, r2, #1
   13f7c:	adc	r3, r3, #0
   13f80:	strd	r2, [r4, #-8]
   13f84:	bl	11e20 <setup@@Base>
   13f88:	ldrd	r2, [r4]
   13f8c:	adds	r2, r2, #1
   13f90:	adc	r3, r3, #0
   13f94:	strd	r2, [r4]
   13f98:	bl	12c38 <if_else_statements@@Base>
   13f9c:	add	r4, r5, #1808	; 0x710
   13fa0:	ldrd	r2, [r4, #-8]
   13fa4:	adds	r2, r2, #1
   13fa8:	adc	r3, r3, #0
   13fac:	strd	r2, [r4, #-8]
   13fb0:	mov	r0, r6
   13fb4:	bl	118d4 <puts@plt>
   13fb8:	ldrd	r2, [r4]
   13fbc:	adds	r2, r2, #1
   13fc0:	adc	r3, r3, #0
   13fc4:	strd	r2, [r4]
   13fc8:	ldr	r2, [pc, #560]	; 14200 <main@@Base+0x614>
   13fcc:	mov	r1, r8
   13fd0:	mov	r0, r7
   13fd4:	bl	11868 <printf@plt>
   13fd8:	add	r4, r5, #1824	; 0x720
   13fdc:	ldrd	r2, [r4, #-8]
   13fe0:	adds	r2, r2, #1
   13fe4:	adc	r3, r3, #0
   13fe8:	strd	r2, [r4, #-8]
   13fec:	bl	11e20 <setup@@Base>
   13ff0:	ldrd	r2, [r4]
   13ff4:	adds	r2, r2, #1
   13ff8:	adc	r3, r3, #0
   13ffc:	strd	r2, [r4]
   14000:	bl	133cc <if_statement_inside_if_statement@@Base>
   14004:	add	r4, r5, #1840	; 0x730
   14008:	ldrd	r2, [r4, #-8]
   1400c:	adds	r2, r2, #1
   14010:	adc	r3, r3, #0
   14014:	strd	r2, [r4, #-8]
   14018:	mov	r0, r6
   1401c:	bl	118d4 <puts@plt>
   14020:	ldrd	r2, [r4]
   14024:	adds	r2, r2, #1
   14028:	adc	r3, r3, #0
   1402c:	strd	r2, [r4]
   14030:	ldr	r2, [pc, #460]	; 14204 <main@@Base+0x618>
   14034:	mov	r1, r8
   14038:	mov	r0, r7
   1403c:	bl	11868 <printf@plt>
   14040:	add	r4, r5, #1856	; 0x740
   14044:	ldrd	r2, [r4, #-8]
   14048:	adds	r2, r2, #1
   1404c:	adc	r3, r3, #0
   14050:	strd	r2, [r4, #-8]
   14054:	bl	11e20 <setup@@Base>
   14058:	ldrd	r2, [r4]
   1405c:	adds	r2, r2, #1
   14060:	adc	r3, r3, #0
   14064:	strd	r2, [r4]
   14068:	bl	137bc <if_statement_inside_else_statement@@Base>
   1406c:	add	r4, r5, #1872	; 0x750
   14070:	ldrd	r2, [r4, #-8]
   14074:	adds	r2, r2, #1
   14078:	adc	r3, r3, #0
   1407c:	strd	r2, [r4, #-8]
   14080:	mov	r0, r6
   14084:	bl	118d4 <puts@plt>
   14088:	ldrd	r2, [r4]
   1408c:	adds	r2, r2, #1
   14090:	adc	r3, r3, #0
   14094:	strd	r2, [r4]
   14098:	ldr	r2, [pc, #360]	; 14208 <main@@Base+0x61c>
   1409c:	mov	r1, r8
   140a0:	mov	r0, r7
   140a4:	bl	11868 <printf@plt>
   140a8:	add	r4, r5, #1888	; 0x760
   140ac:	ldrd	r2, [r4, #-8]
   140b0:	adds	r2, r2, #1
   140b4:	adc	r3, r3, #0
   140b8:	strd	r2, [r4, #-8]
   140bc:	bl	11e20 <setup@@Base>
   140c0:	ldrd	r2, [r4]
   140c4:	adds	r2, r2, #1
   140c8:	adc	r3, r3, #0
   140cc:	strd	r2, [r4]
   140d0:	bl	131b8 <body_with_one_return@@Base>
   140d4:	add	r4, r5, #1904	; 0x770
   140d8:	ldrd	r2, [r4, #-8]
   140dc:	adds	r2, r2, #1
   140e0:	adc	r3, r3, #0
   140e4:	strd	r2, [r4, #-8]
   140e8:	mov	r0, r6
   140ec:	bl	118d4 <puts@plt>
   140f0:	ldrd	r2, [r4]
   140f4:	adds	r2, r2, #1
   140f8:	adc	r3, r3, #0
   140fc:	strd	r2, [r4]
   14100:	ldr	r2, [pc, #260]	; 1420c <main@@Base+0x620>
   14104:	mov	r1, r8
   14108:	mov	r0, r7
   1410c:	bl	11868 <printf@plt>
   14110:	add	r4, r5, #1920	; 0x780
   14114:	ldrd	r2, [r4, #-8]
   14118:	adds	r2, r2, #1
   1411c:	adc	r3, r3, #0
   14120:	strd	r2, [r4, #-8]
   14124:	bl	11e20 <setup@@Base>
   14128:	ldrd	r2, [r4]
   1412c:	adds	r2, r2, #1
   14130:	adc	r3, r3, #0
   14134:	strd	r2, [r4]
   14138:	bl	12f00 <body_with_two_returns@@Base>
   1413c:	add	r4, r5, #1936	; 0x790
   14140:	ldrd	r2, [r4, #-8]
   14144:	adds	r2, r2, #1
   14148:	adc	r3, r3, #0
   1414c:	strd	r2, [r4, #-8]
   14150:	mov	r0, r6
   14154:	bl	118d4 <puts@plt>
   14158:	ldrd	r2, [r4]
   1415c:	adds	r2, r2, #1
   14160:	adc	r3, r3, #0
   14164:	strd	r2, [r4]
   14168:	ldr	r0, [pc, #160]	; 14210 <main@@Base+0x624>
   1416c:	bl	118d4 <puts@plt>
   14170:	add	r4, r5, #1952	; 0x7a0
   14174:	ldrd	r2, [r4, #-8]
   14178:	adds	r2, r2, #1
   1417c:	adc	r3, r3, #0
   14180:	strd	r2, [r4, #-8]
   14184:	ldr	r0, [pc, #136]	; 14214 <main@@Base+0x628>
   14188:	bl	118d4 <puts@plt>
   1418c:	ldrd	r2, [r4]
   14190:	adds	r2, r2, #1
   14194:	adc	r3, r3, #0
   14198:	strd	r2, [r4]
   1419c:	mov	r0, r9
   141a0:	bl	118d4 <puts@plt>
   141a4:	add	r5, r5, #1968	; 0x7b0
   141a8:	ldrd	r2, [r5, #-8]
   141ac:	adds	r2, r2, #1
   141b0:	adc	r3, r3, #0
   141b4:	strd	r2, [r5, #-8]
   141b8:	mov	r0, #0
   141bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141c0:	muleq	r2, r8, r9
   141c4:	andeq	r9, r2, ip, lsl #19
   141c8:	andeq	r8, r1, r0, lsl #7
   141cc:	muleq	r1, r0, r3
   141d0:	andeq	r8, r1, r0, lsr #7
   141d4:	andeq	r8, r1, r8, asr #7
   141d8:	ldrdeq	r8, [r1], -r4
   141dc:			; <UNDEFINED> instruction: 0x000183b0
   141e0:	andeq	r8, r1, r8, ror #7
   141e4:	strdeq	r8, [r1], -r4
   141e8:	andeq	r8, r1, r8, lsl r4
   141ec:	andeq	r8, r1, r0, asr #8
   141f0:	andeq	r8, r1, ip, ror #8
   141f4:	muleq	r1, r0, r4
   141f8:	andeq	r8, r1, ip, lsr #9
   141fc:	andeq	r8, r1, r0, asr #9
   14200:	ldrdeq	r8, [r1], -r4
   14204:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14208:	andeq	r8, r1, ip, lsl r5
   1420c:	andeq	r8, r1, r4, lsr r5
   14210:	andeq	r8, r1, ip, asr #10
   14214:	andeq	r8, r1, ip, asr r5
   14218:	push	{r4, lr}
   1421c:	ldr	r0, [pc, #4]	; 14228 <main@@Base+0x63c>
   14220:	bl	17ba4 <__gcov_sort_n_vals@@Base+0x458>
   14224:	pop	{r4, pc}
   14228:	strheq	r9, [r2], -r8

0001422c <init_token_int_type@@Base>:
   1422c:	ldr	r1, [pc, #24]	; 1424c <init_token_int_type@@Base+0x20>
   14230:	ldrd	r2, [r1]
   14234:	adds	r2, r2, #1
   14238:	adc	r3, r3, #0
   1423c:	strd	r2, [r1]
   14240:	mov	r3, #0
   14244:	str	r3, [r0]
   14248:	bx	lr
   1424c:	andeq	sl, r2, r8, asr #2

00014250 <init_token_int_value@@Base>:
   14250:	ldr	ip, [pc, #28]	; 14274 <init_token_int_value@@Base+0x24>
   14254:	ldrd	r2, [ip, #8]
   14258:	adds	r2, r2, #1
   1425c:	adc	r3, r3, #0
   14260:	strd	r2, [ip, #8]
   14264:	mov	r3, #1
   14268:	str	r3, [r0]
   1426c:	str	r1, [r0, #4]
   14270:	bx	lr
   14274:	andeq	sl, r2, r8, asr #2

00014278 <init_token_function@@Base>:
   14278:	ldr	ip, [pc, #28]	; 1429c <init_token_function@@Base+0x24>
   1427c:	ldrd	r2, [ip, #16]
   14280:	adds	r2, r2, #1
   14284:	adc	r3, r3, #0
   14288:	strd	r2, [ip, #16]
   1428c:	mov	r3, #2
   14290:	str	r3, [r0]
   14294:	str	r1, [r0, #4]
   14298:	bx	lr
   1429c:	andeq	sl, r2, r8, asr #2

000142a0 <init_token_opar@@Base>:
   142a0:	ldr	r1, [pc, #24]	; 142c0 <init_token_opar@@Base+0x20>
   142a4:	ldrd	r2, [r1, #24]
   142a8:	adds	r2, r2, #1
   142ac:	adc	r3, r3, #0
   142b0:	strd	r2, [r1, #24]
   142b4:	mov	r3, #3
   142b8:	str	r3, [r0]
   142bc:	bx	lr
   142c0:	andeq	sl, r2, r8, asr #2

000142c4 <init_token_cpar@@Base>:
   142c4:	ldr	r1, [pc, #24]	; 142e4 <init_token_cpar@@Base+0x20>
   142c8:	ldrd	r2, [r1, #32]
   142cc:	adds	r2, r2, #1
   142d0:	adc	r3, r3, #0
   142d4:	strd	r2, [r1, #32]
   142d8:	mov	r3, #4
   142dc:	str	r3, [r0]
   142e0:	bx	lr
   142e4:	andeq	sl, r2, r8, asr #2

000142e8 <init_token_obra@@Base>:
   142e8:	ldr	r1, [pc, #24]	; 14308 <init_token_obra@@Base+0x20>
   142ec:	ldrd	r2, [r1, #40]	; 0x28
   142f0:	adds	r2, r2, #1
   142f4:	adc	r3, r3, #0
   142f8:	strd	r2, [r1, #40]	; 0x28
   142fc:	mov	r3, #5
   14300:	str	r3, [r0]
   14304:	bx	lr
   14308:	andeq	sl, r2, r8, asr #2

0001430c <init_token_cbra@@Base>:
   1430c:	ldr	r1, [pc, #24]	; 1432c <init_token_cbra@@Base+0x20>
   14310:	ldrd	r2, [r1, #48]	; 0x30
   14314:	adds	r2, r2, #1
   14318:	adc	r3, r3, #0
   1431c:	strd	r2, [r1, #48]	; 0x30
   14320:	mov	r3, #6
   14324:	str	r3, [r0]
   14328:	bx	lr
   1432c:	andeq	sl, r2, r8, asr #2

00014330 <init_token_return@@Base>:
   14330:	ldr	r1, [pc, #24]	; 14350 <init_token_return@@Base+0x20>
   14334:	ldrd	r2, [r1, #56]	; 0x38
   14338:	adds	r2, r2, #1
   1433c:	adc	r3, r3, #0
   14340:	strd	r2, [r1, #56]	; 0x38
   14344:	mov	r3, #7
   14348:	str	r3, [r0]
   1434c:	bx	lr
   14350:	andeq	sl, r2, r8, asr #2

00014354 <init_token_semicolon@@Base>:
   14354:	ldr	r1, [pc, #24]	; 14374 <init_token_semicolon@@Base+0x20>
   14358:	ldrd	r2, [r1, #64]	; 0x40
   1435c:	adds	r2, r2, #1
   14360:	adc	r3, r3, #0
   14364:	strd	r2, [r1, #64]	; 0x40
   14368:	mov	r3, #8
   1436c:	str	r3, [r0]
   14370:	bx	lr
   14374:	andeq	sl, r2, r8, asr #2

00014378 <init_token_eof@@Base>:
   14378:	ldr	r1, [pc, #24]	; 14398 <init_token_eof@@Base+0x20>
   1437c:	ldrd	r2, [r1, #72]	; 0x48
   14380:	adds	r2, r2, #1
   14384:	adc	r3, r3, #0
   14388:	strd	r2, [r1, #72]	; 0x48
   1438c:	mov	r3, #9
   14390:	str	r3, [r0]
   14394:	bx	lr
   14398:	andeq	sl, r2, r8, asr #2

0001439c <init_token_if@@Base>:
   1439c:	ldr	r1, [pc, #24]	; 143bc <init_token_if@@Base+0x20>
   143a0:	ldrd	r2, [r1, #80]	; 0x50
   143a4:	adds	r2, r2, #1
   143a8:	adc	r3, r3, #0
   143ac:	strd	r2, [r1, #80]	; 0x50
   143b0:	mov	r3, #10
   143b4:	str	r3, [r0]
   143b8:	bx	lr
   143bc:	andeq	sl, r2, r8, asr #2

000143c0 <init_token_else@@Base>:
   143c0:	ldr	r1, [pc, #24]	; 143e0 <init_token_else@@Base+0x20>
   143c4:	ldrd	r2, [r1, #88]	; 0x58
   143c8:	adds	r2, r2, #1
   143cc:	adc	r3, r3, #0
   143d0:	strd	r2, [r1, #88]	; 0x58
   143d4:	mov	r3, #11
   143d8:	str	r3, [r0]
   143dc:	bx	lr
   143e0:	andeq	sl, r2, r8, asr #2

000143e4 <init_token_boolean_op@@Base>:
   143e4:	ldr	ip, [pc, #28]	; 14408 <init_token_boolean_op@@Base+0x24>
   143e8:	ldrd	r2, [ip, #96]	; 0x60
   143ec:	adds	r2, r2, #1
   143f0:	adc	r3, r3, #0
   143f4:	strd	r2, [ip, #96]	; 0x60
   143f8:	mov	r3, #12
   143fc:	str	r3, [r0]
   14400:	str	r1, [r0, #4]
   14404:	bx	lr
   14408:	andeq	sl, r2, r8, asr #2

0001440c <free_token_int_type@@Base>:
   1440c:	push	{r4, lr}
   14410:	ldr	r1, [pc, #20]	; 1442c <free_token_int_type@@Base+0x20>
   14414:	ldrd	r2, [r1, #104]	; 0x68
   14418:	adds	r2, r2, #1
   1441c:	adc	r3, r3, #0
   14420:	strd	r2, [r1, #104]	; 0x68
   14424:	bl	11880 <free@plt>
   14428:	pop	{r4, pc}
   1442c:	andeq	sl, r2, r8, asr #2

00014430 <free_token_int_value@@Base>:
   14430:	push	{r4, lr}
   14434:	ldr	r1, [pc, #20]	; 14450 <free_token_int_value@@Base+0x20>
   14438:	ldrd	r2, [r1, #112]	; 0x70
   1443c:	adds	r2, r2, #1
   14440:	adc	r3, r3, #0
   14444:	strd	r2, [r1, #112]	; 0x70
   14448:	bl	11880 <free@plt>
   1444c:	pop	{r4, pc}
   14450:	andeq	sl, r2, r8, asr #2

00014454 <free_token_function@@Base>:
   14454:	push	{r4, lr}
   14458:	ldr	r1, [pc, #20]	; 14474 <free_token_function@@Base+0x20>
   1445c:	ldrd	r2, [r1, #120]	; 0x78
   14460:	adds	r2, r2, #1
   14464:	adc	r3, r3, #0
   14468:	strd	r2, [r1, #120]	; 0x78
   1446c:	bl	11880 <free@plt>
   14470:	pop	{r4, pc}
   14474:	andeq	sl, r2, r8, asr #2

00014478 <free_token_opar@@Base>:
   14478:	push	{r4, lr}
   1447c:	ldr	r1, [pc, #20]	; 14498 <free_token_opar@@Base+0x20>
   14480:	ldrd	r2, [r1, #128]	; 0x80
   14484:	adds	r2, r2, #1
   14488:	adc	r3, r3, #0
   1448c:	strd	r2, [r1, #128]	; 0x80
   14490:	bl	11880 <free@plt>
   14494:	pop	{r4, pc}
   14498:	andeq	sl, r2, r8, asr #2

0001449c <free_token_cpar@@Base>:
   1449c:	push	{r4, lr}
   144a0:	ldr	r1, [pc, #20]	; 144bc <free_token_cpar@@Base+0x20>
   144a4:	ldrd	r2, [r1, #136]	; 0x88
   144a8:	adds	r2, r2, #1
   144ac:	adc	r3, r3, #0
   144b0:	strd	r2, [r1, #136]	; 0x88
   144b4:	bl	11880 <free@plt>
   144b8:	pop	{r4, pc}
   144bc:	andeq	sl, r2, r8, asr #2

000144c0 <free_token_obra@@Base>:
   144c0:	push	{r4, lr}
   144c4:	ldr	r1, [pc, #20]	; 144e0 <free_token_obra@@Base+0x20>
   144c8:	ldrd	r2, [r1, #144]	; 0x90
   144cc:	adds	r2, r2, #1
   144d0:	adc	r3, r3, #0
   144d4:	strd	r2, [r1, #144]	; 0x90
   144d8:	bl	11880 <free@plt>
   144dc:	pop	{r4, pc}
   144e0:	andeq	sl, r2, r8, asr #2

000144e4 <free_token_cbra@@Base>:
   144e4:	push	{r4, lr}
   144e8:	ldr	r1, [pc, #20]	; 14504 <free_token_cbra@@Base+0x20>
   144ec:	ldrd	r2, [r1, #152]	; 0x98
   144f0:	adds	r2, r2, #1
   144f4:	adc	r3, r3, #0
   144f8:	strd	r2, [r1, #152]	; 0x98
   144fc:	bl	11880 <free@plt>
   14500:	pop	{r4, pc}
   14504:	andeq	sl, r2, r8, asr #2

00014508 <free_token_return@@Base>:
   14508:	push	{r4, lr}
   1450c:	ldr	r1, [pc, #20]	; 14528 <free_token_return@@Base+0x20>
   14510:	ldrd	r2, [r1, #160]	; 0xa0
   14514:	adds	r2, r2, #1
   14518:	adc	r3, r3, #0
   1451c:	strd	r2, [r1, #160]	; 0xa0
   14520:	bl	11880 <free@plt>
   14524:	pop	{r4, pc}
   14528:	andeq	sl, r2, r8, asr #2

0001452c <free_token_semicolon@@Base>:
   1452c:	push	{r4, lr}
   14530:	ldr	r1, [pc, #20]	; 1454c <free_token_semicolon@@Base+0x20>
   14534:	ldrd	r2, [r1, #168]	; 0xa8
   14538:	adds	r2, r2, #1
   1453c:	adc	r3, r3, #0
   14540:	strd	r2, [r1, #168]	; 0xa8
   14544:	bl	11880 <free@plt>
   14548:	pop	{r4, pc}
   1454c:	andeq	sl, r2, r8, asr #2

00014550 <free_token_eof@@Base>:
   14550:	push	{r4, lr}
   14554:	ldr	r1, [pc, #20]	; 14570 <free_token_eof@@Base+0x20>
   14558:	ldrd	r2, [r1, #176]	; 0xb0
   1455c:	adds	r2, r2, #1
   14560:	adc	r3, r3, #0
   14564:	strd	r2, [r1, #176]	; 0xb0
   14568:	bl	11880 <free@plt>
   1456c:	pop	{r4, pc}
   14570:	andeq	sl, r2, r8, asr #2

00014574 <free_token_if@@Base>:
   14574:	push	{r4, lr}
   14578:	ldr	r1, [pc, #20]	; 14594 <free_token_if@@Base+0x20>
   1457c:	ldrd	r2, [r1, #184]	; 0xb8
   14580:	adds	r2, r2, #1
   14584:	adc	r3, r3, #0
   14588:	strd	r2, [r1, #184]	; 0xb8
   1458c:	bl	11880 <free@plt>
   14590:	pop	{r4, pc}
   14594:	andeq	sl, r2, r8, asr #2

00014598 <free_token_else@@Base>:
   14598:	push	{r4, lr}
   1459c:	ldr	r1, [pc, #20]	; 145b8 <free_token_else@@Base+0x20>
   145a0:	ldrd	r2, [r1, #192]	; 0xc0
   145a4:	adds	r2, r2, #1
   145a8:	adc	r3, r3, #0
   145ac:	strd	r2, [r1, #192]	; 0xc0
   145b0:	bl	11880 <free@plt>
   145b4:	pop	{r4, pc}
   145b8:	andeq	sl, r2, r8, asr #2

000145bc <free_token_boolean_op@@Base>:
   145bc:	push	{r4, lr}
   145c0:	mov	r4, r0
   145c4:	ldr	r1, [pc, #60]	; 14608 <free_token_boolean_op@@Base+0x4c>
   145c8:	ldrd	r2, [r1, #200]	; 0xc8
   145cc:	adds	r2, r2, #1
   145d0:	adc	r3, r3, #0
   145d4:	strd	r2, [r1, #200]	; 0xc8
   145d8:	ldr	r0, [r0, #4]
   145dc:	cmp	r0, #0
   145e0:	beq	145fc <free_token_boolean_op@@Base+0x40>
   145e4:	bl	11880 <free@plt>
   145e8:	ldr	r1, [pc, #24]	; 14608 <free_token_boolean_op@@Base+0x4c>
   145ec:	ldrd	r2, [r1, #208]	; 0xd0
   145f0:	adds	r2, r2, #1
   145f4:	adc	r3, r3, #0
   145f8:	strd	r2, [r1, #208]	; 0xd0
   145fc:	mov	r0, r4
   14600:	bl	11880 <free@plt>
   14604:	pop	{r4, pc}
   14608:	andeq	sl, r2, r8, asr #2
   1460c:	push	{r4, lr}
   14610:	ldr	r0, [pc, #4]	; 1461c <free_token_boolean_op@@Base+0x60>
   14614:	bl	17ba4 <__gcov_sort_n_vals@@Base+0x458>
   14618:	pop	{r4, pc}
   1461c:	strdeq	r9, [r2], -r0

00014620 <init_ast_base@@Base>:
   14620:	push	{r4, r5}
   14624:	ldr	r3, [pc, #28]	; 14648 <init_ast_base@@Base+0x28>
   14628:	ldrd	r4, [r3]
   1462c:	adds	r4, r4, #1
   14630:	adc	r5, r5, #0
   14634:	strd	r4, [r3]
   14638:	str	r1, [r0]
   1463c:	str	r2, [r0, #4]
   14640:	pop	{r4, r5}
   14644:	bx	lr
   14648:	andeq	sl, r2, r0, lsr #4

0001464c <init_ast_base_single@@Base>:
   1464c:	push	{r4, lr}
   14650:	ldr	r4, [pc, #40]	; 14680 <init_ast_base_single@@Base+0x34>
   14654:	ldrd	r2, [r4, #8]
   14658:	adds	r2, r2, #1
   1465c:	adc	r3, r3, #0
   14660:	strd	r2, [r4, #8]
   14664:	mov	r2, #0
   14668:	bl	14620 <init_ast_base@@Base>
   1466c:	ldrd	r2, [r4, #16]
   14670:	adds	r2, r2, #1
   14674:	adc	r3, r3, #0
   14678:	strd	r2, [r4, #16]
   1467c:	pop	{r4, pc}
   14680:	andeq	sl, r2, r0, lsr #4

00014684 <init_node_id@@Base>:
   14684:	push	{r4, r5, r6, lr}
   14688:	mov	r5, r0
   1468c:	mov	r6, r1
   14690:	ldr	r4, [pc, #44]	; 146c4 <init_node_id@@Base+0x40>
   14694:	ldrd	r2, [r4, #24]
   14698:	adds	r2, r2, #1
   1469c:	adc	r3, r3, #0
   146a0:	strd	r2, [r4, #24]
   146a4:	mov	r1, #0
   146a8:	bl	1464c <init_ast_base_single@@Base>
   146ac:	ldrd	r2, [r4, #32]
   146b0:	adds	r2, r2, #1
   146b4:	adc	r3, r3, #0
   146b8:	strd	r2, [r4, #32]
   146bc:	str	r6, [r5, #8]
   146c0:	pop	{r4, r5, r6, pc}
   146c4:	andeq	sl, r2, r0, lsr #4

000146c8 <init_node_int@@Base>:
   146c8:	push	{r4, r5, r6, lr}
   146cc:	mov	r5, r0
   146d0:	mov	r6, r1
   146d4:	ldr	r4, [pc, #44]	; 14708 <init_node_int@@Base+0x40>
   146d8:	ldrd	r2, [r4, #40]	; 0x28
   146dc:	adds	r2, r2, #1
   146e0:	adc	r3, r3, #0
   146e4:	strd	r2, [r4, #40]	; 0x28
   146e8:	mov	r1, #1
   146ec:	bl	1464c <init_ast_base_single@@Base>
   146f0:	ldrd	r2, [r4, #48]	; 0x30
   146f4:	adds	r2, r2, #1
   146f8:	adc	r3, r3, #0
   146fc:	strd	r2, [r4, #48]	; 0x30
   14700:	str	r6, [r5, #8]
   14704:	pop	{r4, r5, r6, pc}
   14708:	andeq	sl, r2, r0, lsr #4

0001470c <init_node_function@@Base>:
   1470c:	push	{r4, r5, r6, r7, r8, lr}
   14710:	mov	r5, r0
   14714:	mov	r7, r1
   14718:	mov	r6, r2
   1471c:	ldr	r4, [pc, #48]	; 14754 <init_node_function@@Base+0x48>
   14720:	ldrd	r2, [r4, #56]	; 0x38
   14724:	adds	r2, r2, #1
   14728:	adc	r3, r3, #0
   1472c:	strd	r2, [r4, #56]	; 0x38
   14730:	mov	r1, #2
   14734:	bl	1464c <init_ast_base_single@@Base>
   14738:	ldrd	r2, [r4, #64]	; 0x40
   1473c:	adds	r2, r2, #1
   14740:	adc	r3, r3, #0
   14744:	strd	r2, [r4, #64]	; 0x40
   14748:	str	r7, [r5, #8]
   1474c:	str	r6, [r5, #12]
   14750:	pop	{r4, r5, r6, r7, r8, pc}
   14754:	andeq	sl, r2, r0, lsr #4

00014758 <init_node_return@@Base>:
   14758:	push	{r4, r5, r6, lr}
   1475c:	mov	r5, r0
   14760:	mov	r6, r1
   14764:	ldr	r4, [pc, #44]	; 14798 <init_node_return@@Base+0x40>
   14768:	ldrd	r2, [r4, #72]	; 0x48
   1476c:	adds	r2, r2, #1
   14770:	adc	r3, r3, #0
   14774:	strd	r2, [r4, #72]	; 0x48
   14778:	mov	r1, #3
   1477c:	bl	1464c <init_ast_base_single@@Base>
   14780:	ldrd	r2, [r4, #80]	; 0x50
   14784:	adds	r2, r2, #1
   14788:	adc	r3, r3, #0
   1478c:	strd	r2, [r4, #80]	; 0x50
   14790:	str	r6, [r5, #8]
   14794:	pop	{r4, r5, r6, pc}
   14798:	andeq	sl, r2, r0, lsr #4

0001479c <init_node_if@@Base>:
   1479c:	push	{r4, r5, r6, r7, r8, lr}
   147a0:	mov	r5, r0
   147a4:	mov	r8, r1
   147a8:	mov	r7, r2
   147ac:	mov	r6, r3
   147b0:	ldr	r4, [pc, #52]	; 147ec <init_node_if@@Base+0x50>
   147b4:	ldrd	r2, [r4, #88]	; 0x58
   147b8:	adds	r2, r2, #1
   147bc:	adc	r3, r3, #0
   147c0:	strd	r2, [r4, #88]	; 0x58
   147c4:	mov	r1, #4
   147c8:	bl	1464c <init_ast_base_single@@Base>
   147cc:	ldrd	r2, [r4, #96]	; 0x60
   147d0:	adds	r2, r2, #1
   147d4:	adc	r3, r3, #0
   147d8:	strd	r2, [r4, #96]	; 0x60
   147dc:	str	r8, [r5, #8]
   147e0:	str	r7, [r5, #12]
   147e4:	str	r6, [r5, #16]
   147e8:	pop	{r4, r5, r6, r7, r8, pc}
   147ec:	andeq	sl, r2, r0, lsr #4

000147f0 <init_node_boolean_operator@@Base>:
   147f0:	push	{r4, r5, r6, r7, r8, lr}
   147f4:	mov	r4, r0
   147f8:	mov	r8, r1
   147fc:	mov	r7, r2
   14800:	mov	r6, r3
   14804:	ldr	r5, [pc, #60]	; 14848 <init_node_boolean_operator@@Base+0x58>
   14808:	ldrd	r2, [r5, #104]	; 0x68
   1480c:	adds	r2, r2, #1
   14810:	adc	r3, r3, #0
   14814:	strd	r2, [r5, #104]	; 0x68
   14818:	mov	r1, #0
   1481c:	bl	1464c <init_ast_base_single@@Base>
   14820:	ldrd	r2, [r5, #112]	; 0x70
   14824:	adds	r2, r2, #1
   14828:	adc	r3, r3, #0
   1482c:	strd	r2, [r5, #112]	; 0x70
   14830:	mov	r3, #5
   14834:	str	r3, [r4]
   14838:	str	r8, [r4, #16]
   1483c:	str	r7, [r4, #8]
   14840:	str	r6, [r4, #12]
   14844:	pop	{r4, r5, r6, r7, r8, pc}
   14848:	andeq	sl, r2, r0, lsr #4

0001484c <free_node_boolean_operator@@Base>:
   1484c:	push	{r4, r5, r6, lr}
   14850:	mov	r4, r0
   14854:	ldr	r1, [pc, #128]	; 148dc <free_node_boolean_operator@@Base+0x90>
   14858:	ldrd	r2, [r1, #120]	; 0x78
   1485c:	adds	r2, r2, #1
   14860:	adc	r3, r3, #0
   14864:	strd	r2, [r1, #120]	; 0x78
   14868:	ldr	r0, [r0, #4]
   1486c:	cmp	r0, #0
   14870:	beq	1489c <free_node_boolean_operator@@Base+0x50>
   14874:	mov	r5, r1
   14878:	ldrd	r2, [r1, #128]	; 0x80
   1487c:	adds	r2, r2, #1
   14880:	adc	r3, r3, #0
   14884:	strd	r2, [r1, #128]	; 0x80
   14888:	bl	148e0 <free_node@@Base>
   1488c:	ldrd	r2, [r5, #136]	; 0x88
   14890:	adds	r2, r2, #1
   14894:	adc	r3, r3, #0
   14898:	strd	r2, [r5, #136]	; 0x88
   1489c:	ldr	r0, [r4, #8]
   148a0:	bl	148e0 <free_node@@Base>
   148a4:	ldr	r5, [pc, #48]	; 148dc <free_node_boolean_operator@@Base+0x90>
   148a8:	ldrd	r2, [r5, #144]	; 0x90
   148ac:	adds	r2, r2, #1
   148b0:	adc	r3, r3, #0
   148b4:	strd	r2, [r5, #144]	; 0x90
   148b8:	ldr	r0, [r4, #12]
   148bc:	bl	148e0 <free_node@@Base>
   148c0:	ldrd	r2, [r5, #152]	; 0x98
   148c4:	adds	r2, r2, #1
   148c8:	adc	r3, r3, #0
   148cc:	strd	r2, [r5, #152]	; 0x98
   148d0:	mov	r0, r4
   148d4:	bl	11880 <free@plt>
   148d8:	pop	{r4, r5, r6, pc}
   148dc:	andeq	sl, r2, r0, lsr #4

000148e0 <free_node@@Base>:
   148e0:	push	{r4, lr}
   148e4:	ldr	r3, [r0]
   148e8:	cmp	r3, #5
   148ec:	ldrls	pc, [pc, r3, lsl #2]
   148f0:	b	14a18 <free_node@@Base+0x138>
   148f4:	andeq	r4, r1, ip, lsl #18
   148f8:	andeq	r4, r1, ip, lsr r9
   148fc:	andeq	r4, r1, r8, ror #18
   14900:	muleq	r1, r4, r9
   14904:	andeq	r4, r1, r0, asr #19
   14908:	andeq	r4, r1, ip, ror #19
   1490c:	ldr	r4, [pc, #332]	; 14a60 <free_node@@Base+0x180>
   14910:	ldrd	r2, [r4, #168]	; 0xa8
   14914:	adds	r2, r2, #1
   14918:	adc	r3, r3, #0
   1491c:	strd	r2, [r4, #168]	; 0xa8
   14920:	bl	14c40 <free_node_id@@Base>
   14924:	add	r4, r4, #272	; 0x110
   14928:	ldrd	r2, [r4, #-8]
   1492c:	adds	r2, r2, #1
   14930:	adc	r3, r3, #0
   14934:	strd	r2, [r4, #-8]
   14938:	pop	{r4, pc}
   1493c:	ldr	r4, [pc, #284]	; 14a60 <free_node@@Base+0x180>
   14940:	ldrd	r2, [r4, #176]	; 0xb0
   14944:	adds	r2, r2, #1
   14948:	adc	r3, r3, #0
   1494c:	strd	r2, [r4, #176]	; 0xb0
   14950:	bl	14be0 <free_node_int@@Base>
   14954:	ldrd	r2, [r4, #216]	; 0xd8
   14958:	adds	r2, r2, #1
   1495c:	adc	r3, r3, #0
   14960:	strd	r2, [r4, #216]	; 0xd8
   14964:	pop	{r4, pc}
   14968:	ldr	r4, [pc, #240]	; 14a60 <free_node@@Base+0x180>
   1496c:	ldrd	r2, [r4, #184]	; 0xb8
   14970:	adds	r2, r2, #1
   14974:	adc	r3, r3, #0
   14978:	strd	r2, [r4, #184]	; 0xb8
   1497c:	bl	14b78 <free_node_function@@Base>
   14980:	ldrd	r2, [r4, #224]	; 0xe0
   14984:	adds	r2, r2, #1
   14988:	adc	r3, r3, #0
   1498c:	strd	r2, [r4, #224]	; 0xe0
   14990:	pop	{r4, pc}
   14994:	ldr	r4, [pc, #196]	; 14a60 <free_node@@Base+0x180>
   14998:	ldrd	r2, [r4, #192]	; 0xc0
   1499c:	adds	r2, r2, #1
   149a0:	adc	r3, r3, #0
   149a4:	strd	r2, [r4, #192]	; 0xc0
   149a8:	bl	14b18 <free_node_return@@Base>
   149ac:	ldrd	r2, [r4, #232]	; 0xe8
   149b0:	adds	r2, r2, #1
   149b4:	adc	r3, r3, #0
   149b8:	strd	r2, [r4, #232]	; 0xe8
   149bc:	pop	{r4, pc}
   149c0:	ldr	r4, [pc, #152]	; 14a60 <free_node@@Base+0x180>
   149c4:	ldrd	r2, [r4, #200]	; 0xc8
   149c8:	adds	r2, r2, #1
   149cc:	adc	r3, r3, #0
   149d0:	strd	r2, [r4, #200]	; 0xc8
   149d4:	bl	14a6c <free_node_if@@Base>
   149d8:	ldrd	r2, [r4, #240]	; 0xf0
   149dc:	adds	r2, r2, #1
   149e0:	adc	r3, r3, #0
   149e4:	strd	r2, [r4, #240]	; 0xf0
   149e8:	pop	{r4, pc}
   149ec:	ldr	r4, [pc, #108]	; 14a60 <free_node@@Base+0x180>
   149f0:	ldrd	r2, [r4, #208]	; 0xd0
   149f4:	adds	r2, r2, #1
   149f8:	adc	r3, r3, #0
   149fc:	strd	r2, [r4, #208]	; 0xd0
   14a00:	bl	1484c <free_node_boolean_operator@@Base>
   14a04:	ldrd	r2, [r4, #248]	; 0xf8
   14a08:	adds	r2, r2, #1
   14a0c:	adc	r3, r3, #0
   14a10:	strd	r2, [r4, #248]	; 0xf8
   14a14:	pop	{r4, pc}
   14a18:	ldr	r4, [pc, #64]	; 14a60 <free_node@@Base+0x180>
   14a1c:	ldrd	r2, [r4, #160]	; 0xa0
   14a20:	adds	r2, r2, #1
   14a24:	adc	r3, r3, #0
   14a28:	strd	r2, [r4, #160]	; 0xa0
   14a2c:	ldr	r3, [pc, #48]	; 14a64 <free_node@@Base+0x184>
   14a30:	ldr	r3, [r3]
   14a34:	mov	r2, #31
   14a38:	mov	r1, #1
   14a3c:	ldr	r0, [pc, #36]	; 14a68 <free_node@@Base+0x188>
   14a40:	bl	118a4 <fwrite@plt>
   14a44:	add	r4, r4, #256	; 0x100
   14a48:	ldrd	r2, [r4]
   14a4c:	adds	r2, r2, #1
   14a50:	adc	r3, r3, #0
   14a54:	strd	r2, [r4]
   14a58:	mov	r0, #1
   14a5c:	bl	11928 <exit@plt>
   14a60:	andeq	sl, r2, r0, lsr #4
   14a64:	andeq	r9, r2, r8, lsl #19
   14a68:	andeq	r8, r1, ip, lsr #12

00014a6c <free_node_if@@Base>:
   14a6c:	push	{r4, r5, r6, lr}
   14a70:	mov	r5, r0
   14a74:	ldr	r1, [pc, #152]	; 14b14 <free_node_if@@Base+0xa8>
   14a78:	ldrd	r2, [r1]
   14a7c:	adds	r2, r2, #1
   14a80:	adc	r3, r3, #0
   14a84:	strd	r2, [r1]
   14a88:	ldr	r0, [r0, #4]
   14a8c:	cmp	r0, #0
   14a90:	beq	14abc <free_node_if@@Base+0x50>
   14a94:	mov	r4, r1
   14a98:	ldrd	r2, [r1, #8]
   14a9c:	adds	r2, r2, #1
   14aa0:	adc	r3, r3, #0
   14aa4:	strd	r2, [r1, #8]
   14aa8:	bl	148e0 <free_node@@Base>
   14aac:	ldrd	r2, [r4, #16]
   14ab0:	adds	r2, r2, #1
   14ab4:	adc	r3, r3, #0
   14ab8:	strd	r2, [r4, #16]
   14abc:	ldr	r0, [r5, #8]
   14ac0:	bl	148e0 <free_node@@Base>
   14ac4:	ldr	r4, [pc, #72]	; 14b14 <free_node_if@@Base+0xa8>
   14ac8:	ldrd	r2, [r4, #24]
   14acc:	adds	r2, r2, #1
   14ad0:	adc	r3, r3, #0
   14ad4:	strd	r2, [r4, #24]
   14ad8:	ldr	r0, [r5, #12]
   14adc:	bl	148e0 <free_node@@Base>
   14ae0:	ldrd	r2, [r4, #32]
   14ae4:	adds	r2, r2, #1
   14ae8:	adc	r3, r3, #0
   14aec:	strd	r2, [r4, #32]
   14af0:	ldr	r0, [r5, #16]
   14af4:	bl	148e0 <free_node@@Base>
   14af8:	ldrd	r2, [r4, #40]	; 0x28
   14afc:	adds	r2, r2, #1
   14b00:	adc	r3, r3, #0
   14b04:	strd	r2, [r4, #40]	; 0x28
   14b08:	mov	r0, r5
   14b0c:	bl	11880 <free@plt>
   14b10:	pop	{r4, r5, r6, pc}
   14b14:	andeq	sl, r2, r0, lsr r3

00014b18 <free_node_return@@Base>:
   14b18:	push	{r4, r5, r6, lr}
   14b1c:	mov	r5, r0
   14b20:	ldr	r1, [pc, #76]	; 14b74 <free_node_return@@Base+0x5c>
   14b24:	ldrd	r2, [r1]
   14b28:	adds	r2, r2, #1
   14b2c:	adc	r3, r3, #0
   14b30:	strd	r2, [r1]
   14b34:	ldr	r0, [r0, #4]
   14b38:	cmp	r0, #0
   14b3c:	beq	14b68 <free_node_return@@Base+0x50>
   14b40:	mov	r4, r1
   14b44:	ldrd	r2, [r1, #8]
   14b48:	adds	r2, r2, #1
   14b4c:	adc	r3, r3, #0
   14b50:	strd	r2, [r1, #8]
   14b54:	bl	148e0 <free_node@@Base>
   14b58:	ldrd	r2, [r4, #16]
   14b5c:	adds	r2, r2, #1
   14b60:	adc	r3, r3, #0
   14b64:	strd	r2, [r4, #16]
   14b68:	mov	r0, r5
   14b6c:	bl	11880 <free@plt>
   14b70:	pop	{r4, r5, r6, pc}
   14b74:	andeq	sl, r2, r0, ror #6

00014b78 <free_node_function@@Base>:
   14b78:	push	{r4, r5, r6, lr}
   14b7c:	mov	r4, r0
   14b80:	ldr	r1, [pc, #84]	; 14bdc <free_node_function@@Base+0x64>
   14b84:	ldrd	r2, [r1, #-8]
   14b88:	adds	r2, r2, #1
   14b8c:	adc	r3, r3, #0
   14b90:	strd	r2, [r1, #-8]
   14b94:	ldr	r0, [r0, #4]
   14b98:	cmp	r0, #0
   14b9c:	beq	14bc8 <free_node_function@@Base+0x50>
   14ba0:	mov	r5, r1
   14ba4:	ldrd	r2, [r1]
   14ba8:	adds	r2, r2, #1
   14bac:	adc	r3, r3, #0
   14bb0:	strd	r2, [r1]
   14bb4:	bl	148e0 <free_node@@Base>
   14bb8:	ldrd	r2, [r5, #8]
   14bbc:	adds	r2, r2, #1
   14bc0:	adc	r3, r3, #0
   14bc4:	strd	r2, [r5, #8]
   14bc8:	ldr	r0, [r4, #8]
   14bcc:	bl	11880 <free@plt>
   14bd0:	mov	r0, r4
   14bd4:	bl	11880 <free@plt>
   14bd8:	pop	{r4, r5, r6, pc}
   14bdc:	andeq	sl, r2, r0, lsl #7

00014be0 <free_node_int@@Base>:
   14be0:	push	{r4, r5, r6, lr}
   14be4:	mov	r5, r0
   14be8:	ldr	r1, [pc, #76]	; 14c3c <free_node_int@@Base+0x5c>
   14bec:	ldrd	r2, [r1]
   14bf0:	adds	r2, r2, #1
   14bf4:	adc	r3, r3, #0
   14bf8:	strd	r2, [r1]
   14bfc:	ldr	r0, [r0, #4]
   14c00:	cmp	r0, #0
   14c04:	beq	14c30 <free_node_int@@Base+0x50>
   14c08:	mov	r4, r1
   14c0c:	ldrd	r2, [r1, #8]
   14c10:	adds	r2, r2, #1
   14c14:	adc	r3, r3, #0
   14c18:	strd	r2, [r1, #8]
   14c1c:	bl	148e0 <free_node@@Base>
   14c20:	ldrd	r2, [r4, #16]
   14c24:	adds	r2, r2, #1
   14c28:	adc	r3, r3, #0
   14c2c:	strd	r2, [r4, #16]
   14c30:	mov	r0, r5
   14c34:	bl	11880 <free@plt>
   14c38:	pop	{r4, r5, r6, pc}
   14c3c:	muleq	r2, r0, r3

00014c40 <free_node_id@@Base>:
   14c40:	push	{r4, r5, r6, lr}
   14c44:	mov	r5, r0
   14c48:	ldr	r1, [pc, #76]	; 14c9c <free_node_id@@Base+0x5c>
   14c4c:	ldrd	r2, [r1, #-8]
   14c50:	adds	r2, r2, #1
   14c54:	adc	r3, r3, #0
   14c58:	strd	r2, [r1, #-8]
   14c5c:	ldr	r0, [r0, #4]
   14c60:	cmp	r0, #0
   14c64:	beq	14c90 <free_node_id@@Base+0x50>
   14c68:	mov	r4, r1
   14c6c:	ldrd	r2, [r1]
   14c70:	adds	r2, r2, #1
   14c74:	adc	r3, r3, #0
   14c78:	strd	r2, [r1]
   14c7c:	bl	148e0 <free_node@@Base>
   14c80:	ldrd	r2, [r4, #8]
   14c84:	adds	r2, r2, #1
   14c88:	adc	r3, r3, #0
   14c8c:	strd	r2, [r4, #8]
   14c90:	mov	r0, r5
   14c94:	bl	11880 <free@plt>
   14c98:	pop	{r4, r5, r6, pc}
   14c9c:			; <UNDEFINED> instruction: 0x0002a3b0

00014ca0 <get_boolean_op_value@@Base>:
   14ca0:	push	{r4, r5, r6, lr}
   14ca4:	ldr	r1, [pc, #588]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14ca8:	ldrd	r2, [r1]
   14cac:	adds	r2, r2, #1
   14cb0:	adc	r3, r3, #0
   14cb4:	strd	r2, [r1]
   14cb8:	ldr	r4, [r0, #4]
   14cbc:	mov	r1, #2
   14cc0:	mov	r0, r4
   14cc4:	bl	119a0 <strnlen@plt>
   14cc8:	cmp	r0, #2
   14ccc:	beq	14d40 <get_boolean_op_value@@Base+0xa0>
   14cd0:	ldr	r1, [pc, #544]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14cd4:	ldrd	r2, [r1, #16]
   14cd8:	adds	r2, r2, #1
   14cdc:	adc	r3, r3, #0
   14ce0:	strd	r2, [r1, #16]
   14ce4:	ldrb	r3, [r4]
   14ce8:	cmp	r3, #60	; 0x3c
   14cec:	beq	14ea8 <get_boolean_op_value@@Base+0x208>
   14cf0:	cmp	r3, #62	; 0x3e
   14cf4:	beq	14ec4 <get_boolean_op_value@@Base+0x224>
   14cf8:	cmp	r3, #33	; 0x21
   14cfc:	beq	14ef0 <get_boolean_op_value@@Base+0x250>
   14d00:	ldr	r5, [pc, #496]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14d04:	ldrd	r2, [r5, #80]	; 0x50
   14d08:	adds	r2, r2, #1
   14d0c:	adc	r3, r3, #0
   14d10:	strd	r2, [r5, #80]	; 0x50
   14d14:	mov	r2, r4
   14d18:	ldr	r1, [pc, #476]	; 14efc <get_boolean_op_value@@Base+0x25c>
   14d1c:	ldr	r3, [pc, #476]	; 14f00 <get_boolean_op_value@@Base+0x260>
   14d20:	ldr	r0, [r3]
   14d24:	bl	11940 <fprintf@plt>
   14d28:	ldrd	r2, [r5, #104]	; 0x68
   14d2c:	adds	r2, r2, #1
   14d30:	adc	r3, r3, #0
   14d34:	strd	r2, [r5, #104]	; 0x68
   14d38:	mov	r0, #1
   14d3c:	bl	11928 <exit@plt>
   14d40:	ldr	r1, [pc, #432]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14d44:	ldrd	r2, [r1, #8]
   14d48:	adds	r2, r2, #1
   14d4c:	adc	r3, r3, #0
   14d50:	strd	r2, [r1, #8]
   14d54:	mov	r2, #2
   14d58:	ldr	r1, [pc, #420]	; 14f04 <get_boolean_op_value@@Base+0x264>
   14d5c:	mov	r0, r4
   14d60:	bl	119d0 <strncmp@plt>
   14d64:	cmp	r0, #0
   14d68:	beq	14ee0 <get_boolean_op_value@@Base+0x240>
   14d6c:	ldr	r1, [pc, #388]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14d70:	ldrd	r2, [r1, #24]
   14d74:	adds	r2, r2, #1
   14d78:	adc	r3, r3, #0
   14d7c:	strd	r2, [r1, #24]
   14d80:	mov	r2, #2
   14d84:	ldr	r1, [pc, #380]	; 14f08 <get_boolean_op_value@@Base+0x268>
   14d88:	mov	r0, r4
   14d8c:	bl	119d0 <strncmp@plt>
   14d90:	cmp	r0, #0
   14d94:	beq	14ee8 <get_boolean_op_value@@Base+0x248>
   14d98:	ldr	r1, [pc, #344]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14d9c:	ldrd	r2, [r1, #32]
   14da0:	adds	r2, r2, #1
   14da4:	adc	r3, r3, #0
   14da8:	strd	r2, [r1, #32]
   14dac:	mov	r2, #2
   14db0:	ldr	r1, [pc, #340]	; 14f0c <get_boolean_op_value@@Base+0x26c>
   14db4:	mov	r0, r4
   14db8:	bl	119d0 <strncmp@plt>
   14dbc:	cmp	r0, #0
   14dc0:	bne	14dcc <get_boolean_op_value@@Base+0x12c>
   14dc4:	mov	r0, #2
   14dc8:	pop	{r4, r5, r6, pc}
   14dcc:	ldr	r1, [pc, #292]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14dd0:	ldrd	r2, [r1, #40]	; 0x28
   14dd4:	adds	r2, r2, #1
   14dd8:	adc	r3, r3, #0
   14ddc:	strd	r2, [r1, #40]	; 0x28
   14de0:	mov	r2, #2
   14de4:	ldr	r1, [pc, #292]	; 14f10 <get_boolean_op_value@@Base+0x270>
   14de8:	mov	r0, r4
   14dec:	bl	119d0 <strncmp@plt>
   14df0:	cmp	r0, #0
   14df4:	bne	14e00 <get_boolean_op_value@@Base+0x160>
   14df8:	mov	r0, #3
   14dfc:	pop	{r4, r5, r6, pc}
   14e00:	ldr	r1, [pc, #240]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14e04:	ldrd	r2, [r1, #48]	; 0x30
   14e08:	adds	r2, r2, #1
   14e0c:	adc	r3, r3, #0
   14e10:	strd	r2, [r1, #48]	; 0x30
   14e14:	mov	r2, #2
   14e18:	ldr	r1, [pc, #244]	; 14f14 <get_boolean_op_value@@Base+0x274>
   14e1c:	mov	r0, r4
   14e20:	bl	119d0 <strncmp@plt>
   14e24:	cmp	r0, #0
   14e28:	bne	14e34 <get_boolean_op_value@@Base+0x194>
   14e2c:	mov	r0, #4
   14e30:	pop	{r4, r5, r6, pc}
   14e34:	ldr	r1, [pc, #188]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14e38:	ldrd	r2, [r1, #56]	; 0x38
   14e3c:	adds	r2, r2, #1
   14e40:	adc	r3, r3, #0
   14e44:	strd	r2, [r1, #56]	; 0x38
   14e48:	mov	r2, #2
   14e4c:	ldr	r1, [pc, #196]	; 14f18 <get_boolean_op_value@@Base+0x278>
   14e50:	mov	r0, r4
   14e54:	bl	119d0 <strncmp@plt>
   14e58:	cmp	r0, #0
   14e5c:	bne	14e68 <get_boolean_op_value@@Base+0x1c8>
   14e60:	mov	r0, #5
   14e64:	pop	{r4, r5, r6, pc}
   14e68:	ldr	r5, [pc, #136]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14e6c:	ldrd	r2, [r5, #64]	; 0x40
   14e70:	adds	r2, r2, #1
   14e74:	adc	r3, r3, #0
   14e78:	strd	r2, [r5, #64]	; 0x40
   14e7c:	mov	r2, r4
   14e80:	ldr	r1, [pc, #116]	; 14efc <get_boolean_op_value@@Base+0x25c>
   14e84:	ldr	r3, [pc, #116]	; 14f00 <get_boolean_op_value@@Base+0x260>
   14e88:	ldr	r0, [r3]
   14e8c:	bl	11940 <fprintf@plt>
   14e90:	ldrd	r2, [r5, #72]	; 0x48
   14e94:	adds	r2, r2, #1
   14e98:	adc	r3, r3, #0
   14e9c:	strd	r2, [r5, #72]	; 0x48
   14ea0:	mov	r0, #1
   14ea4:	bl	11928 <exit@plt>
   14ea8:	ldr	r1, [pc, #72]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14eac:	ldrd	r2, [r1, #88]	; 0x58
   14eb0:	adds	r2, r2, #1
   14eb4:	adc	r3, r3, #0
   14eb8:	strd	r2, [r1, #88]	; 0x58
   14ebc:	mov	r0, #6
   14ec0:	pop	{r4, r5, r6, pc}
   14ec4:	ldr	r1, [pc, #44]	; 14ef8 <get_boolean_op_value@@Base+0x258>
   14ec8:	ldrd	r2, [r1, #96]	; 0x60
   14ecc:	adds	r2, r2, #1
   14ed0:	adc	r3, r3, #0
   14ed4:	strd	r2, [r1, #96]	; 0x60
   14ed8:	mov	r0, #7
   14edc:	pop	{r4, r5, r6, pc}
   14ee0:	mov	r0, #0
   14ee4:	pop	{r4, r5, r6, pc}
   14ee8:	mov	r0, #1
   14eec:	pop	{r4, r5, r6, pc}
   14ef0:	mov	r0, #8
   14ef4:	pop	{r4, r5, r6, pc}
   14ef8:	andeq	sl, r2, r0, asr #7
   14efc:	andeq	r8, r1, r4, ror #12
   14f00:	andeq	r9, r2, r8, lsl #19
   14f04:	andeq	r8, r1, ip, asr #12
   14f08:	andeq	r8, r1, r0, asr r6
   14f0c:	andeq	r8, r1, r4, asr r6
   14f10:	andeq	r8, r1, r8, asr r6
   14f14:	andeq	r8, r1, ip, asr r6
   14f18:	andeq	r8, r1, r0, ror #12
   14f1c:	push	{r4, lr}
   14f20:	ldr	r0, [pc, #4]	; 14f2c <get_boolean_op_value@@Base+0x28c>
   14f24:	bl	17ba4 <__gcov_sort_n_vals@@Base+0x458>
   14f28:	pop	{r4, pc}
   14f2c:	andeq	r9, r2, r8, lsl #12

00014f30 <init_grammar@@Base>:
   14f30:	ldr	ip, [pc, #20]	; 14f4c <init_grammar@@Base+0x1c>
   14f34:	ldrd	r2, [ip]
   14f38:	adds	r2, r2, #1
   14f3c:	adc	r3, r3, #0
   14f40:	strd	r2, [ip]
   14f44:	str	r1, [r0]
   14f48:	bx	lr
   14f4c:	andeq	sl, r2, r0, lsr r4

00014f50 <destroy_grammar@@Base>:
   14f50:	ldr	r1, [pc, #16]	; 14f68 <destroy_grammar@@Base+0x18>
   14f54:	ldrd	r2, [r1, #8]
   14f58:	adds	r2, r2, #1
   14f5c:	adc	r3, r3, #0
   14f60:	strd	r2, [r1, #8]
   14f64:	bx	lr
   14f68:	andeq	sl, r2, r0, lsr r4

00014f6c <read_return_expression@@Base>:
   14f6c:	push	{r4, r5, r6, r7, r8, lr}
   14f70:	mov	r5, r0
   14f74:	ldr	r4, [pc, #252]	; 15078 <read_return_expression@@Base+0x10c>
   14f78:	ldrd	r2, [r4, #16]
   14f7c:	adds	r2, r2, #1
   14f80:	adc	r3, r3, #0
   14f84:	strd	r2, [r4, #16]
   14f88:	ldr	r0, [r0]
   14f8c:	bl	11b28 <next@@Base>
   14f90:	ldrd	r2, [r4, #24]
   14f94:	adds	r2, r2, #1
   14f98:	adc	r3, r3, #0
   14f9c:	strd	r2, [r4, #24]
   14fa0:	ldr	r3, [r0]
   14fa4:	cmp	r3, #1
   14fa8:	movne	r6, #0
   14fac:	bne	15070 <read_return_expression@@Base+0x104>
   14fb0:	mov	r6, r0
   14fb4:	ldrd	r2, [r4, #32]
   14fb8:	adds	r2, r2, #1
   14fbc:	adc	r3, r3, #0
   14fc0:	strd	r2, [r4, #32]
   14fc4:	mov	r0, #12
   14fc8:	bl	118e0 <malloc@plt>
   14fcc:	mov	r7, r0
   14fd0:	ldr	r1, [r6, #4]
   14fd4:	bl	146c8 <init_node_int@@Base>
   14fd8:	ldrd	r2, [r4, #40]	; 0x28
   14fdc:	adds	r2, r2, #1
   14fe0:	adc	r3, r3, #0
   14fe4:	strd	r2, [r4, #40]	; 0x28
   14fe8:	mov	r0, r6
   14fec:	bl	14430 <free_token_int_value@@Base>
   14ff0:	ldrd	r2, [r4, #48]	; 0x30
   14ff4:	adds	r2, r2, #1
   14ff8:	adc	r3, r3, #0
   14ffc:	strd	r2, [r4, #48]	; 0x30
   15000:	mov	r0, #12
   15004:	bl	118e0 <malloc@plt>
   15008:	mov	r6, r0
   1500c:	mov	r1, r7
   15010:	bl	14758 <init_node_return@@Base>
   15014:	ldrd	r2, [r4, #56]	; 0x38
   15018:	adds	r2, r2, #1
   1501c:	adc	r3, r3, #0
   15020:	strd	r2, [r4, #56]	; 0x38
   15024:	ldr	r0, [r5]
   15028:	bl	11b28 <next@@Base>
   1502c:	ldrd	r2, [r4, #64]	; 0x40
   15030:	adds	r2, r2, #1
   15034:	adc	r3, r3, #0
   15038:	strd	r2, [r4, #64]	; 0x40
   1503c:	ldr	r3, [r0]
   15040:	cmp	r3, #8
   15044:	movne	r6, #0
   15048:	bne	15070 <read_return_expression@@Base+0x104>
   1504c:	ldrd	r2, [r4, #72]	; 0x48
   15050:	adds	r2, r2, #1
   15054:	adc	r3, r3, #0
   15058:	strd	r2, [r4, #72]	; 0x48
   1505c:	bl	1452c <free_token_semicolon@@Base>
   15060:	ldrd	r2, [r4, #80]	; 0x50
   15064:	adds	r2, r2, #1
   15068:	adc	r3, r3, #0
   1506c:	strd	r2, [r4, #80]	; 0x50
   15070:	mov	r0, r6
   15074:	pop	{r4, r5, r6, r7, r8, pc}
   15078:	andeq	sl, r2, r0, lsr r4

0001507c <read_boolean_unary_expression@@Base>:
   1507c:	push	{r4, r5, r6, r7, r8, lr}
   15080:	mov	r7, r0
   15084:	ldr	r1, [pc, #364]	; 151f8 <read_boolean_unary_expression@@Base+0x17c>
   15088:	ldrd	r2, [r1, #88]	; 0x58
   1508c:	adds	r2, r2, #1
   15090:	adc	r3, r3, #0
   15094:	strd	r2, [r1, #88]	; 0x58
   15098:	mov	r0, #20
   1509c:	bl	118e0 <malloc@plt>
   150a0:	mov	r6, r0
   150a4:	ldr	r0, [r7]
   150a8:	bl	11b28 <next@@Base>
   150ac:	ldr	r3, [r0]
   150b0:	cmp	r3, #12
   150b4:	bne	15194 <read_boolean_unary_expression@@Base+0x118>
   150b8:	mov	r5, r0
   150bc:	ldr	r4, [pc, #308]	; 151f8 <read_boolean_unary_expression@@Base+0x17c>
   150c0:	ldrd	r2, [r4, #104]	; 0x68
   150c4:	adds	r2, r2, #1
   150c8:	adc	r3, r3, #0
   150cc:	strd	r2, [r4, #104]	; 0x68
   150d0:	bl	14ca0 <get_boolean_op_value@@Base>
   150d4:	mov	r8, r0
   150d8:	ldrd	r2, [r4, #120]	; 0x78
   150dc:	adds	r2, r2, #1
   150e0:	adc	r3, r3, #0
   150e4:	strd	r2, [r4, #120]	; 0x78
   150e8:	mov	r0, r5
   150ec:	bl	145bc <free_token_boolean_op@@Base>
   150f0:	ldrd	r2, [r4, #128]	; 0x80
   150f4:	adds	r2, r2, #1
   150f8:	adc	r3, r3, #0
   150fc:	strd	r2, [r4, #128]	; 0x80
   15100:	ldr	r0, [r7]
   15104:	bl	11b28 <next@@Base>
   15108:	mov	r5, r0
   1510c:	ldr	r3, [r0]
   15110:	cmp	r3, #1
   15114:	bne	151c8 <read_boolean_unary_expression@@Base+0x14c>
   15118:	ldr	r4, [pc, #216]	; 151f8 <read_boolean_unary_expression@@Base+0x17c>
   1511c:	ldrd	r2, [r4, #144]	; 0x90
   15120:	adds	r2, r2, #1
   15124:	adc	r3, r3, #0
   15128:	strd	r2, [r4, #144]	; 0x90
   1512c:	mov	r0, #12
   15130:	bl	118e0 <malloc@plt>
   15134:	mov	r7, r0
   15138:	ldr	r1, [r5, #4]
   1513c:	bl	146c8 <init_node_int@@Base>
   15140:	ldrd	r2, [r4, #160]	; 0xa0
   15144:	adds	r2, r2, #1
   15148:	adc	r3, r3, #0
   1514c:	strd	r2, [r4, #160]	; 0xa0
   15150:	mov	r0, r5
   15154:	bl	14430 <free_token_int_value@@Base>
   15158:	ldrd	r2, [r4, #168]	; 0xa8
   1515c:	adds	r2, r2, #1
   15160:	adc	r3, r3, #0
   15164:	strd	r2, [r4, #168]	; 0xa8
   15168:	mov	r3, #0
   1516c:	mov	r2, r7
   15170:	mov	r1, r8
   15174:	mov	r0, r6
   15178:	bl	147f0 <init_node_boolean_operator@@Base>
   1517c:	ldrd	r2, [r4, #176]	; 0xb0
   15180:	adds	r2, r2, #1
   15184:	adc	r3, r3, #0
   15188:	strd	r2, [r4, #176]	; 0xb0
   1518c:	mov	r0, r6
   15190:	pop	{r4, r5, r6, r7, r8, pc}
   15194:	ldr	r4, [pc, #92]	; 151f8 <read_boolean_unary_expression@@Base+0x17c>
   15198:	ldrd	r2, [r4, #96]	; 0x60
   1519c:	adds	r2, r2, #1
   151a0:	adc	r3, r3, #0
   151a4:	strd	r2, [r4, #96]	; 0x60
   151a8:	mov	r0, r6
   151ac:	bl	1484c <free_node_boolean_operator@@Base>
   151b0:	ldrd	r2, [r4, #112]	; 0x70
   151b4:	adds	r2, r2, #1
   151b8:	adc	r3, r3, #0
   151bc:	strd	r2, [r4, #112]	; 0x70
   151c0:	mov	r6, #0
   151c4:	b	1518c <read_boolean_unary_expression@@Base+0x110>
   151c8:	ldrd	r2, [r4, #136]	; 0x88
   151cc:	adds	r2, r2, #1
   151d0:	adc	r3, r3, #0
   151d4:	strd	r2, [r4, #136]	; 0x88
   151d8:	mov	r0, r6
   151dc:	bl	1484c <free_node_boolean_operator@@Base>
   151e0:	ldrd	r2, [r4, #152]	; 0x98
   151e4:	adds	r2, r2, #1
   151e8:	adc	r3, r3, #0
   151ec:	strd	r2, [r4, #152]	; 0x98
   151f0:	mov	r6, #0
   151f4:	b	1518c <read_boolean_unary_expression@@Base+0x110>
   151f8:	andeq	sl, r2, r0, lsr r4

000151fc <read_boolean_binary_expression@@Base>:
   151fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15200:	mov	r5, r0
   15204:	ldr	r1, [pc, #612]	; 15470 <read_boolean_binary_expression@@Base+0x274>
   15208:	ldrd	r2, [r1, #184]	; 0xb8
   1520c:	adds	r2, r2, #1
   15210:	adc	r3, r3, #0
   15214:	strd	r2, [r1, #184]	; 0xb8
   15218:	ldr	r0, [r0]
   1521c:	bl	11b28 <next@@Base>
   15220:	mov	r6, r0
   15224:	ldr	r1, [r0]
   15228:	cmp	r1, #1
   1522c:	beq	152a4 <read_boolean_binary_expression@@Base+0xa8>
   15230:	ldr	r0, [pc, #568]	; 15470 <read_boolean_binary_expression@@Base+0x274>
   15234:	ldrd	r2, [r0, #192]	; 0xc0
   15238:	adds	r2, r2, #1
   1523c:	adc	r3, r3, #0
   15240:	strd	r2, [r0, #192]	; 0xc0
   15244:	cmp	r1, #12
   15248:	movne	r5, #0
   1524c:	bne	1529c <read_boolean_binary_expression@@Base+0xa0>
   15250:	mov	r4, r0
   15254:	ldrd	r2, [r0, #208]	; 0xd0
   15258:	adds	r2, r2, #1
   1525c:	adc	r3, r3, #0
   15260:	strd	r2, [r0, #208]	; 0xd0
   15264:	mov	r1, r6
   15268:	ldr	r0, [r5]
   1526c:	bl	11c9c <push_back@@Base>
   15270:	ldrd	r2, [r4, #216]	; 0xd8
   15274:	adds	r2, r2, #1
   15278:	adc	r3, r3, #0
   1527c:	strd	r2, [r4, #216]	; 0xd8
   15280:	mov	r0, r5
   15284:	bl	1507c <read_boolean_unary_expression@@Base>
   15288:	mov	r5, r0
   1528c:	ldrd	r2, [r4, #224]	; 0xe0
   15290:	adds	r2, r2, #1
   15294:	adc	r3, r3, #0
   15298:	strd	r2, [r4, #224]	; 0xe0
   1529c:	mov	r0, r5
   152a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152a4:	ldr	r4, [pc, #452]	; 15470 <read_boolean_binary_expression@@Base+0x274>
   152a8:	ldrd	r2, [r4, #200]	; 0xc8
   152ac:	adds	r2, r2, #1
   152b0:	adc	r3, r3, #0
   152b4:	strd	r2, [r4, #200]	; 0xc8
   152b8:	mov	r0, #12
   152bc:	bl	118e0 <malloc@plt>
   152c0:	mov	r7, r0
   152c4:	ldr	r1, [r6, #4]
   152c8:	bl	146c8 <init_node_int@@Base>
   152cc:	ldrd	r2, [r4, #232]	; 0xe8
   152d0:	adds	r2, r2, #1
   152d4:	adc	r3, r3, #0
   152d8:	strd	r2, [r4, #232]	; 0xe8
   152dc:	mov	r0, r6
   152e0:	bl	14430 <free_token_int_value@@Base>
   152e4:	ldrd	r2, [r4, #240]	; 0xf0
   152e8:	adds	r2, r2, #1
   152ec:	adc	r3, r3, #0
   152f0:	strd	r2, [r4, #240]	; 0xf0
   152f4:	ldr	r0, [r5]
   152f8:	bl	11b28 <next@@Base>
   152fc:	mov	r8, r0
   15300:	ldr	r3, [r0]
   15304:	cmp	r3, #12
   15308:	bne	15400 <read_boolean_binary_expression@@Base+0x204>
   1530c:	ldr	r4, [pc, #348]	; 15470 <read_boolean_binary_expression@@Base+0x274>
   15310:	add	r1, r4, #256	; 0x100
   15314:	ldrd	r2, [r1]
   15318:	adds	r2, r2, #1
   1531c:	adc	r3, r3, #0
   15320:	strd	r2, [r1]
   15324:	bl	14ca0 <get_boolean_op_value@@Base>
   15328:	mov	r6, r0
   1532c:	add	r1, r4, #272	; 0x110
   15330:	ldrd	r2, [r1]
   15334:	adds	r2, r2, #1
   15338:	adc	r3, r3, #0
   1533c:	strd	r2, [r1]
   15340:	mov	r0, r8
   15344:	bl	145bc <free_token_boolean_op@@Base>
   15348:	add	r4, r4, #288	; 0x120
   1534c:	ldrd	r2, [r4, #-8]
   15350:	adds	r2, r2, #1
   15354:	adc	r3, r3, #0
   15358:	strd	r2, [r4, #-8]
   1535c:	ldr	r0, [r5]
   15360:	bl	11b28 <next@@Base>
   15364:	mov	r8, r0
   15368:	ldr	r3, [r0]
   1536c:	cmp	r3, #1
   15370:	bne	15434 <read_boolean_binary_expression@@Base+0x238>
   15374:	ldr	r4, [pc, #244]	; 15470 <read_boolean_binary_expression@@Base+0x274>
   15378:	add	r1, r4, #304	; 0x130
   1537c:	ldrd	r2, [r1, #-8]
   15380:	adds	r2, r2, #1
   15384:	adc	r3, r3, #0
   15388:	strd	r2, [r1, #-8]
   1538c:	mov	r0, #12
   15390:	bl	118e0 <malloc@plt>
   15394:	mov	r9, r0
   15398:	ldr	r1, [r8, #4]
   1539c:	bl	146c8 <init_node_int@@Base>
   153a0:	add	r5, r4, #320	; 0x140
   153a4:	ldrd	r2, [r5, #-8]
   153a8:	adds	r2, r2, #1
   153ac:	adc	r3, r3, #0
   153b0:	strd	r2, [r5, #-8]
   153b4:	mov	r0, r8
   153b8:	bl	14430 <free_token_int_value@@Base>
   153bc:	ldrd	r2, [r5]
   153c0:	adds	r2, r2, #1
   153c4:	adc	r3, r3, #0
   153c8:	strd	r2, [r5]
   153cc:	mov	r0, #20
   153d0:	bl	118e0 <malloc@plt>
   153d4:	mov	r5, r0
   153d8:	mov	r3, r9
   153dc:	mov	r2, r7
   153e0:	mov	r1, r6
   153e4:	bl	147f0 <init_node_boolean_operator@@Base>
   153e8:	add	r4, r4, #336	; 0x150
   153ec:	ldrd	r2, [r4, #-8]
   153f0:	adds	r2, r2, #1
   153f4:	adc	r3, r3, #0
   153f8:	strd	r2, [r4, #-8]
   153fc:	b	1529c <read_boolean_binary_expression@@Base+0xa0>
   15400:	ldrd	r2, [r4, #248]	; 0xf8
   15404:	adds	r2, r2, #1
   15408:	adc	r3, r3, #0
   1540c:	strd	r2, [r4, #248]	; 0xf8
   15410:	mov	r0, r7
   15414:	bl	148e0 <free_node@@Base>
   15418:	add	r4, r4, #272	; 0x110
   1541c:	ldrd	r2, [r4, #-8]
   15420:	adds	r2, r2, #1
   15424:	adc	r3, r3, #0
   15428:	strd	r2, [r4, #-8]
   1542c:	mov	r5, #0
   15430:	b	1529c <read_boolean_binary_expression@@Base+0xa0>
   15434:	sub	r4, r4, #288	; 0x120
   15438:	add	r1, r4, #288	; 0x120
   1543c:	ldrd	r2, [r1]
   15440:	adds	r2, r2, #1
   15444:	adc	r3, r3, #0
   15448:	strd	r2, [r1]
   1544c:	mov	r0, r7
   15450:	bl	148e0 <free_node@@Base>
   15454:	add	r4, r4, #304	; 0x130
   15458:	ldrd	r2, [r4]
   1545c:	adds	r2, r2, #1
   15460:	adc	r3, r3, #0
   15464:	strd	r2, [r4]
   15468:	mov	r5, #0
   1546c:	b	1529c <read_boolean_binary_expression@@Base+0xa0>
   15470:	andeq	sl, r2, r0, lsr r4

00015474 <read_single_boolean_expression@@Base>:
   15474:	push	{r4, r5, r6, r7, r8, lr}
   15478:	cmp	r1, #0
   1547c:	beq	154fc <read_single_boolean_expression@@Base+0x88>
   15480:	mov	r5, r2
   15484:	mov	r7, r3
   15488:	ldr	r3, [r2]
   1548c:	cmp	r3, #0
   15490:	beq	1552c <read_single_boolean_expression@@Base+0xb8>
   15494:	ldr	r4, [pc, #212]	; 15570 <read_single_boolean_expression@@Base+0xfc>
   15498:	ldrd	r2, [r4, #16]
   1549c:	adds	r2, r2, #1
   154a0:	adc	r3, r3, #0
   154a4:	strd	r2, [r4, #16]
   154a8:	bl	151fc <read_boolean_binary_expression@@Base>
   154ac:	mov	r8, r0
   154b0:	ldrd	r2, [r4, #32]
   154b4:	adds	r2, r2, #1
   154b8:	adc	r3, r3, #0
   154bc:	strd	r2, [r4, #32]
   154c0:	mov	r0, #20
   154c4:	bl	118e0 <malloc@plt>
   154c8:	mov	r6, r0
   154cc:	mov	r3, r8
   154d0:	mov	r2, #0
   154d4:	mov	r1, r7
   154d8:	bl	147f0 <init_node_boolean_operator@@Base>
   154dc:	mov	r3, #0
   154e0:	str	r3, [r5]
   154e4:	ldrd	r2, [r4, #40]	; 0x28
   154e8:	adds	r2, r2, #1
   154ec:	adc	r3, r3, #0
   154f0:	strd	r2, [r4, #40]	; 0x28
   154f4:	mov	r0, r6
   154f8:	pop	{r4, r5, r6, r7, r8, pc}
   154fc:	ldr	r4, [pc, #108]	; 15570 <read_single_boolean_expression@@Base+0xfc>
   15500:	ldrd	r2, [r4]
   15504:	adds	r2, r2, #1
   15508:	adc	r3, r3, #0
   1550c:	strd	r2, [r4]
   15510:	bl	151fc <read_boolean_binary_expression@@Base>
   15514:	mov	r6, r0
   15518:	ldrd	r2, [r4, #8]
   1551c:	adds	r2, r2, #1
   15520:	adc	r3, r3, #0
   15524:	strd	r2, [r4, #8]
   15528:	b	154f4 <read_single_boolean_expression@@Base+0x80>
   1552c:	ldr	r4, [pc, #60]	; 15570 <read_single_boolean_expression@@Base+0xfc>
   15530:	ldrd	r2, [r4, #24]
   15534:	adds	r2, r2, #1
   15538:	adc	r3, r3, #0
   1553c:	strd	r2, [r4, #24]
   15540:	mov	r3, #0
   15544:	ldr	r2, [r3, #4]
   15548:	ldr	r1, [pc, #36]	; 15574 <read_single_boolean_expression@@Base+0x100>
   1554c:	ldr	r3, [pc, #36]	; 15578 <read_single_boolean_expression@@Base+0x104>
   15550:	ldr	r0, [r3]
   15554:	bl	11940 <fprintf@plt>
   15558:	ldrd	r2, [r4, #48]	; 0x30
   1555c:	adds	r2, r2, #1
   15560:	adc	r3, r3, #0
   15564:	strd	r2, [r4, #48]	; 0x30
   15568:	mov	r0, #1
   1556c:	bl	11928 <exit@plt>
   15570:	andeq	sl, r2, r0, lsl #11
   15574:	strdeq	r8, [r1], -r4
   15578:	andeq	r9, r2, r8, lsl #19

0001557c <read_boolean_expression@@Base>:
   1557c:	push	{r4, r5, r6, r7, r8, lr}
   15580:	sub	sp, sp, #8
   15584:	mov	r5, r0
   15588:	ldr	r4, [pc, #428]	; 1573c <read_boolean_expression@@Base+0x1c0>
   1558c:	ldrd	r2, [r4, #-8]
   15590:	adds	r2, r2, #1
   15594:	adc	r3, r3, #0
   15598:	strd	r2, [r4, #-8]
   1559c:	mov	r3, #0
   155a0:	str	r3, [sp, #4]
   155a4:	ldr	r0, [r0]
   155a8:	bl	11b28 <next@@Base>
   155ac:	ldrd	r2, [r4]
   155b0:	adds	r2, r2, #1
   155b4:	adc	r3, r3, #0
   155b8:	strd	r2, [r4]
   155bc:	ldr	r1, [r0]
   155c0:	cmp	r1, #4
   155c4:	beq	15704 <read_boolean_expression@@Base+0x188>
   155c8:	mov	r6, #0
   155cc:	mov	r8, #1
   155d0:	b	1563c <read_boolean_expression@@Base+0xc0>
   155d4:	ldrd	r2, [r4, #8]
   155d8:	adds	r2, r2, #1
   155dc:	adc	r3, r3, #0
   155e0:	strd	r2, [r4, #8]
   155e4:	mov	r1, r0
   155e8:	ldr	r0, [r5]
   155ec:	bl	11c9c <push_back@@Base>
   155f0:	ldrd	r2, [r4, #32]
   155f4:	adds	r2, r2, #1
   155f8:	adc	r3, r3, #0
   155fc:	strd	r2, [r4, #32]
   15600:	mov	r3, r7
   15604:	add	r2, sp, #4
   15608:	mov	r1, r6
   1560c:	mov	r0, r5
   15610:	bl	15474 <read_single_boolean_expression@@Base>
   15614:	mov	r6, r0
   15618:	ldrd	r2, [r4, #64]	; 0x40
   1561c:	adds	r2, r2, #1
   15620:	adc	r3, r3, #0
   15624:	strd	r2, [r4, #64]	; 0x40
   15628:	ldr	r0, [r5]
   1562c:	bl	11b28 <next@@Base>
   15630:	ldr	r1, [r0]
   15634:	cmp	r1, #4
   15638:	beq	15708 <read_boolean_expression@@Base+0x18c>
   1563c:	ldrd	r2, [r4, #72]	; 0x48
   15640:	adds	r2, r2, #1
   15644:	adc	r3, r3, #0
   15648:	strd	r2, [r4, #72]	; 0x48
   1564c:	cmp	r1, #3
   15650:	beq	156c8 <read_boolean_expression@@Base+0x14c>
   15654:	cmp	r1, #12
   15658:	beq	15698 <read_boolean_expression@@Base+0x11c>
   1565c:	cmp	r1, #1
   15660:	beq	155d4 <read_boolean_expression@@Base+0x58>
   15664:	ldr	r3, [pc, #212]	; 15740 <read_boolean_expression@@Base+0x1c4>
   15668:	ldr	r3, [r3]
   1566c:	mov	r2, #33	; 0x21
   15670:	mov	r1, #1
   15674:	ldr	r0, [pc, #200]	; 15744 <read_boolean_expression@@Base+0x1c8>
   15678:	bl	118a4 <fwrite@plt>
   1567c:	ldr	r1, [pc, #184]	; 1573c <read_boolean_expression@@Base+0x1c0>
   15680:	ldrd	r2, [r1, #56]	; 0x38
   15684:	adds	r2, r2, #1
   15688:	adc	r3, r3, #0
   1568c:	strd	r2, [r1, #56]	; 0x38
   15690:	mov	r0, #1
   15694:	bl	11928 <exit@plt>
   15698:	ldrd	r2, [r4, #24]
   1569c:	adds	r2, r2, #1
   156a0:	adc	r3, r3, #0
   156a4:	strd	r2, [r4, #24]
   156a8:	bl	14ca0 <get_boolean_op_value@@Base>
   156ac:	mov	r7, r0
   156b0:	str	r8, [sp, #4]
   156b4:	ldrd	r2, [r4, #40]	; 0x28
   156b8:	adds	r2, r2, #1
   156bc:	adc	r3, r3, #0
   156c0:	strd	r2, [r4, #40]	; 0x28
   156c4:	b	15628 <read_boolean_expression@@Base+0xac>
   156c8:	ldrd	r2, [r4, #16]
   156cc:	adds	r2, r2, #1
   156d0:	adc	r3, r3, #0
   156d4:	strd	r2, [r4, #16]
   156d8:	mov	r3, r7
   156dc:	add	r2, sp, #4
   156e0:	mov	r1, r6
   156e4:	mov	r0, r5
   156e8:	bl	15474 <read_single_boolean_expression@@Base>
   156ec:	mov	r6, r0
   156f0:	ldrd	r2, [r4, #48]	; 0x30
   156f4:	adds	r2, r2, #1
   156f8:	adc	r3, r3, #0
   156fc:	strd	r2, [r4, #48]	; 0x30
   15700:	b	15628 <read_boolean_expression@@Base+0xac>
   15704:	mov	r6, #0
   15708:	ldr	r4, [pc, #44]	; 1573c <read_boolean_expression@@Base+0x1c0>
   1570c:	ldrd	r2, [r4, #80]	; 0x50
   15710:	adds	r2, r2, #1
   15714:	adc	r3, r3, #0
   15718:	strd	r2, [r4, #80]	; 0x50
   1571c:	bl	1449c <free_token_cpar@@Base>
   15720:	ldrd	r2, [r4, #88]	; 0x58
   15724:	adds	r2, r2, #1
   15728:	adc	r3, r3, #0
   1572c:	strd	r2, [r4, #88]	; 0x58
   15730:	mov	r0, r6
   15734:	add	sp, sp, #8
   15738:	pop	{r4, r5, r6, r7, r8, pc}
   1573c:	andeq	sl, r2, r0, asr #11
   15740:	andeq	r9, r2, r8, lsl #19
   15744:	andeq	r8, r1, ip, lsr #14

00015748 <read_if_statement@@Base>:
   15748:	push	{r4, r5, r6, r7, r8, lr}
   1574c:	mov	r5, r0
   15750:	ldr	r4, [pc, #340]	; 158ac <read_if_statement@@Base+0x164>
   15754:	ldrd	r2, [r4]
   15758:	adds	r2, r2, #1
   1575c:	adc	r3, r3, #0
   15760:	strd	r2, [r4]
   15764:	ldr	r0, [r0]
   15768:	bl	11b28 <next@@Base>
   1576c:	ldrd	r2, [r4, #8]
   15770:	adds	r2, r2, #1
   15774:	adc	r3, r3, #0
   15778:	strd	r2, [r4, #8]
   1577c:	ldr	r3, [r0]
   15780:	cmp	r3, #3
   15784:	movne	r4, #0
   15788:	bne	15860 <read_if_statement@@Base+0x118>
   1578c:	ldrd	r2, [r4, #16]
   15790:	adds	r2, r2, #1
   15794:	adc	r3, r3, #0
   15798:	strd	r2, [r4, #16]
   1579c:	bl	14478 <free_token_opar@@Base>
   157a0:	ldrd	r2, [r4, #24]
   157a4:	adds	r2, r2, #1
   157a8:	adc	r3, r3, #0
   157ac:	strd	r2, [r4, #24]
   157b0:	mov	r0, r5
   157b4:	bl	1557c <read_boolean_expression@@Base>
   157b8:	mov	r6, r0
   157bc:	ldrd	r2, [r4, #32]
   157c0:	adds	r2, r2, #1
   157c4:	adc	r3, r3, #0
   157c8:	strd	r2, [r4, #32]
   157cc:	mov	r0, r5
   157d0:	bl	158b0 <read_body@@Base>
   157d4:	mov	r7, r0
   157d8:	ldrd	r2, [r4, #40]	; 0x28
   157dc:	adds	r2, r2, #1
   157e0:	adc	r3, r3, #0
   157e4:	strd	r2, [r4, #40]	; 0x28
   157e8:	ldr	r0, [r5]
   157ec:	bl	11b28 <next@@Base>
   157f0:	ldr	r3, [r0]
   157f4:	cmp	r3, #11
   157f8:	beq	15868 <read_if_statement@@Base+0x120>
   157fc:	ldr	r4, [pc, #168]	; 158ac <read_if_statement@@Base+0x164>
   15800:	ldrd	r2, [r4, #56]	; 0x38
   15804:	adds	r2, r2, #1
   15808:	adc	r3, r3, #0
   1580c:	strd	r2, [r4, #56]	; 0x38
   15810:	mov	r1, r0
   15814:	ldr	r0, [r5]
   15818:	bl	11c9c <push_back@@Base>
   1581c:	ldrd	r2, [r4, #80]	; 0x50
   15820:	adds	r2, r2, #1
   15824:	adc	r3, r3, #0
   15828:	strd	r2, [r4, #80]	; 0x50
   1582c:	mov	r5, #0
   15830:	mov	r0, #20
   15834:	bl	118e0 <malloc@plt>
   15838:	mov	r4, r0
   1583c:	mov	r3, r5
   15840:	mov	r2, r7
   15844:	mov	r1, r6
   15848:	bl	1479c <init_node_if@@Base>
   1584c:	ldr	r1, [pc, #88]	; 158ac <read_if_statement@@Base+0x164>
   15850:	ldrd	r2, [r1, #88]	; 0x58
   15854:	adds	r2, r2, #1
   15858:	adc	r3, r3, #0
   1585c:	strd	r2, [r1, #88]	; 0x58
   15860:	mov	r0, r4
   15864:	pop	{r4, r5, r6, r7, r8, pc}
   15868:	ldrd	r2, [r4, #48]	; 0x30
   1586c:	adds	r2, r2, #1
   15870:	adc	r3, r3, #0
   15874:	strd	r2, [r4, #48]	; 0x30
   15878:	bl	14598 <free_token_else@@Base>
   1587c:	ldrd	r2, [r4, #64]	; 0x40
   15880:	adds	r2, r2, #1
   15884:	adc	r3, r3, #0
   15888:	strd	r2, [r4, #64]	; 0x40
   1588c:	mov	r0, r5
   15890:	bl	158b0 <read_body@@Base>
   15894:	mov	r5, r0
   15898:	ldrd	r2, [r4, #72]	; 0x48
   1589c:	adds	r2, r2, #1
   158a0:	adc	r3, r3, #0
   158a4:	strd	r2, [r4, #72]	; 0x48
   158a8:	b	15830 <read_if_statement@@Base+0xe8>
   158ac:	andeq	sl, r2, r0, lsr #12

000158b0 <read_body@@Base>:
   158b0:	push	{r4, r5, r6, r7, r8, lr}
   158b4:	mov	r5, r0
   158b8:	ldr	r4, [pc, #444]	; 15a7c <read_body@@Base+0x1cc>
   158bc:	ldrd	r2, [r4]
   158c0:	adds	r2, r2, #1
   158c4:	adc	r3, r3, #0
   158c8:	strd	r2, [r4]
   158cc:	ldr	r0, [r0]
   158d0:	bl	11b28 <next@@Base>
   158d4:	ldrd	r2, [r4, #8]
   158d8:	adds	r2, r2, #1
   158dc:	adc	r3, r3, #0
   158e0:	strd	r2, [r4, #8]
   158e4:	ldr	r3, [r0]
   158e8:	cmp	r3, #5
   158ec:	movne	r6, #0
   158f0:	bne	15a00 <read_body@@Base+0x150>
   158f4:	ldrd	r2, [r4, #16]
   158f8:	adds	r2, r2, #1
   158fc:	adc	r3, r3, #0
   15900:	strd	r2, [r4, #16]
   15904:	bl	144c0 <free_token_obra@@Base>
   15908:	ldrd	r2, [r4, #24]
   1590c:	adds	r2, r2, #1
   15910:	adc	r3, r3, #0
   15914:	strd	r2, [r4, #24]
   15918:	ldr	r0, [r5]
   1591c:	bl	11b28 <next@@Base>
   15920:	ldrd	r2, [r4, #32]
   15924:	adds	r2, r2, #1
   15928:	adc	r3, r3, #0
   1592c:	strd	r2, [r4, #32]
   15930:	ldr	ip, [r0]
   15934:	cmp	ip, #6
   15938:	beq	15a4c <read_body@@Base+0x19c>
   1593c:	mov	r7, #0
   15940:	mov	r6, r7
   15944:	b	159c0 <read_body@@Base+0x110>
   15948:	ldrd	r2, [r4, #40]	; 0x28
   1594c:	adds	r2, r2, #1
   15950:	adc	r3, r3, #0
   15954:	strd	r2, [r4, #40]	; 0x28
   15958:	bl	14508 <free_token_return@@Base>
   1595c:	ldrd	r2, [r4, #56]	; 0x38
   15960:	adds	r2, r2, #1
   15964:	adc	r3, r3, #0
   15968:	strd	r2, [r4, #56]	; 0x38
   1596c:	mov	r0, r5
   15970:	bl	14f6c <read_return_expression@@Base>
   15974:	mov	r8, r0
   15978:	ldrd	r2, [r4, #88]	; 0x58
   1597c:	adds	r2, r2, #1
   15980:	adc	r3, r3, #0
   15984:	strd	r2, [r4, #88]	; 0x58
   15988:	cmp	r6, #0
   1598c:	moveq	r6, r8
   15990:	beq	159a8 <read_body@@Base+0xf8>
   15994:	str	r8, [r7, #4]
   15998:	ldrd	r2, [r4, #96]	; 0x60
   1599c:	adds	r2, r2, #1
   159a0:	adc	r3, r3, #0
   159a4:	strd	r2, [r4, #96]	; 0x60
   159a8:	ldr	r0, [r5]
   159ac:	bl	11b28 <next@@Base>
   159b0:	ldr	ip, [r0]
   159b4:	mov	r7, r8
   159b8:	cmp	ip, #6
   159bc:	beq	15a50 <read_body@@Base+0x1a0>
   159c0:	ldrd	r2, [r4, #104]	; 0x68
   159c4:	adds	r2, r2, #1
   159c8:	adc	r3, r3, #0
   159cc:	strd	r2, [r4, #104]	; 0x68
   159d0:	cmp	ip, #7
   159d4:	beq	15948 <read_body@@Base+0x98>
   159d8:	cmp	ip, #10
   159dc:	beq	15a08 <read_body@@Base+0x158>
   159e0:	mov	r1, r0
   159e4:	ldr	r0, [r5]
   159e8:	bl	11c9c <push_back@@Base>
   159ec:	ldr	r1, [pc, #136]	; 15a7c <read_body@@Base+0x1cc>
   159f0:	ldrd	r2, [r1, #80]	; 0x50
   159f4:	adds	r2, r2, #1
   159f8:	adc	r3, r3, #0
   159fc:	strd	r2, [r1, #80]	; 0x50
   15a00:	mov	r0, r6
   15a04:	pop	{r4, r5, r6, r7, r8, pc}
   15a08:	ldrd	r2, [r4, #48]	; 0x30
   15a0c:	adds	r2, r2, #1
   15a10:	adc	r3, r3, #0
   15a14:	strd	r2, [r4, #48]	; 0x30
   15a18:	bl	14574 <free_token_if@@Base>
   15a1c:	ldrd	r2, [r4, #64]	; 0x40
   15a20:	adds	r2, r2, #1
   15a24:	adc	r3, r3, #0
   15a28:	strd	r2, [r4, #64]	; 0x40
   15a2c:	mov	r0, r5
   15a30:	bl	15748 <read_if_statement@@Base>
   15a34:	mov	r8, r0
   15a38:	ldrd	r2, [r4, #72]	; 0x48
   15a3c:	adds	r2, r2, #1
   15a40:	adc	r3, r3, #0
   15a44:	strd	r2, [r4, #72]	; 0x48
   15a48:	b	15988 <read_body@@Base+0xd8>
   15a4c:	mov	r6, #0
   15a50:	ldr	r4, [pc, #36]	; 15a7c <read_body@@Base+0x1cc>
   15a54:	ldrd	r2, [r4, #112]	; 0x70
   15a58:	adds	r2, r2, #1
   15a5c:	adc	r3, r3, #0
   15a60:	strd	r2, [r4, #112]	; 0x70
   15a64:	bl	144e4 <free_token_cbra@@Base>
   15a68:	ldrd	r2, [r4, #120]	; 0x78
   15a6c:	adds	r2, r2, #1
   15a70:	adc	r3, r3, #0
   15a74:	strd	r2, [r4, #120]	; 0x78
   15a78:	b	15a00 <read_body@@Base+0x150>
   15a7c:	andeq	sl, r2, r0, lsl #13

00015a80 <read_function_ast_node@@Base>:
   15a80:	push	{r4, r5, r6, r7, r8, lr}
   15a84:	mov	r5, r0
   15a88:	ldr	r4, [pc, #404]	; 15c24 <read_function_ast_node@@Base+0x1a4>
   15a8c:	ldrd	r2, [r4]
   15a90:	adds	r2, r2, #1
   15a94:	adc	r3, r3, #0
   15a98:	strd	r2, [r4]
   15a9c:	ldr	r0, [r0]
   15aa0:	bl	11b28 <next@@Base>
   15aa4:	ldrd	r2, [r4, #8]
   15aa8:	adds	r2, r2, #1
   15aac:	adc	r3, r3, #0
   15ab0:	strd	r2, [r4, #8]
   15ab4:	ldr	r3, [r0]
   15ab8:	cmp	r3, #0
   15abc:	movne	r4, #0
   15ac0:	bne	15c1c <read_function_ast_node@@Base+0x19c>
   15ac4:	ldrd	r2, [r4, #16]
   15ac8:	adds	r2, r2, #1
   15acc:	adc	r3, r3, #0
   15ad0:	strd	r2, [r4, #16]
   15ad4:	bl	1440c <free_token_int_type@@Base>
   15ad8:	ldrd	r2, [r4, #24]
   15adc:	adds	r2, r2, #1
   15ae0:	adc	r3, r3, #0
   15ae4:	strd	r2, [r4, #24]
   15ae8:	ldr	r0, [r5]
   15aec:	bl	11b28 <next@@Base>
   15af0:	mov	r6, r0
   15af4:	ldrd	r2, [r4, #32]
   15af8:	adds	r2, r2, #1
   15afc:	adc	r3, r3, #0
   15b00:	strd	r2, [r4, #32]
   15b04:	ldr	r3, [r0]
   15b08:	cmp	r3, #2
   15b0c:	movne	r4, #0
   15b10:	bne	15c1c <read_function_ast_node@@Base+0x19c>
   15b14:	ldrd	r2, [r4, #40]	; 0x28
   15b18:	adds	r2, r2, #1
   15b1c:	adc	r3, r3, #0
   15b20:	strd	r2, [r4, #40]	; 0x28
   15b24:	ldr	r0, [r5]
   15b28:	bl	11b28 <next@@Base>
   15b2c:	ldrd	r2, [r4, #48]	; 0x30
   15b30:	adds	r2, r2, #1
   15b34:	adc	r3, r3, #0
   15b38:	strd	r2, [r4, #48]	; 0x30
   15b3c:	ldr	r3, [r0]
   15b40:	cmp	r3, #3
   15b44:	movne	r4, #0
   15b48:	bne	15c1c <read_function_ast_node@@Base+0x19c>
   15b4c:	ldrd	r2, [r4, #56]	; 0x38
   15b50:	adds	r2, r2, #1
   15b54:	adc	r3, r3, #0
   15b58:	strd	r2, [r4, #56]	; 0x38
   15b5c:	bl	14478 <free_token_opar@@Base>
   15b60:	ldrd	r2, [r4, #64]	; 0x40
   15b64:	adds	r2, r2, #1
   15b68:	adc	r3, r3, #0
   15b6c:	strd	r2, [r4, #64]	; 0x40
   15b70:	ldr	r0, [r5]
   15b74:	bl	11b28 <next@@Base>
   15b78:	ldrd	r2, [r4, #72]	; 0x48
   15b7c:	adds	r2, r2, #1
   15b80:	adc	r3, r3, #0
   15b84:	strd	r2, [r4, #72]	; 0x48
   15b88:	ldr	r3, [r0]
   15b8c:	cmp	r3, #4
   15b90:	movne	r4, #0
   15b94:	bne	15c1c <read_function_ast_node@@Base+0x19c>
   15b98:	mov	r7, r4
   15b9c:	ldrd	r2, [r4, #80]	; 0x50
   15ba0:	adds	r2, r2, #1
   15ba4:	adc	r3, r3, #0
   15ba8:	strd	r2, [r4, #80]	; 0x50
   15bac:	bl	1449c <free_token_cpar@@Base>
   15bb0:	ldrd	r2, [r4, #88]	; 0x58
   15bb4:	adds	r2, r2, #1
   15bb8:	adc	r3, r3, #0
   15bbc:	strd	r2, [r4, #88]	; 0x58
   15bc0:	mov	r0, r5
   15bc4:	bl	158b0 <read_body@@Base>
   15bc8:	mov	r5, r0
   15bcc:	ldrd	r2, [r4, #96]	; 0x60
   15bd0:	adds	r2, r2, #1
   15bd4:	adc	r3, r3, #0
   15bd8:	strd	r2, [r4, #96]	; 0x60
   15bdc:	mov	r0, #16
   15be0:	bl	118e0 <malloc@plt>
   15be4:	mov	r4, r0
   15be8:	mov	r2, r5
   15bec:	ldr	r1, [r6, #4]
   15bf0:	bl	1470c <init_node_function@@Base>
   15bf4:	ldrd	r2, [r7, #104]	; 0x68
   15bf8:	adds	r2, r2, #1
   15bfc:	adc	r3, r3, #0
   15c00:	strd	r2, [r7, #104]	; 0x68
   15c04:	mov	r0, r6
   15c08:	bl	14454 <free_token_function@@Base>
   15c0c:	ldrd	r2, [r7, #112]	; 0x70
   15c10:	adds	r2, r2, #1
   15c14:	adc	r3, r3, #0
   15c18:	strd	r2, [r7, #112]	; 0x70
   15c1c:	mov	r0, r4
   15c20:	pop	{r4, r5, r6, r7, r8, pc}
   15c24:	andeq	sl, r2, r0, lsl #14

00015c28 <build_ast@@Base>:
   15c28:	push	{r4, lr}
   15c2c:	ldr	r4, [pc, #36]	; 15c58 <build_ast@@Base+0x30>
   15c30:	ldrd	r2, [r4, #-8]
   15c34:	adds	r2, r2, #1
   15c38:	adc	r3, r3, #0
   15c3c:	strd	r2, [r4, #-8]
   15c40:	bl	15a80 <read_function_ast_node@@Base>
   15c44:	ldrd	r2, [r4]
   15c48:	adds	r2, r2, #1
   15c4c:	adc	r3, r3, #0
   15c50:	strd	r2, [r4]
   15c54:	pop	{r4, pc}
   15c58:	andeq	sl, r2, r0, lsl #15
   15c5c:	push	{r4, lr}
   15c60:	ldr	r0, [pc, #4]	; 15c6c <build_ast@@Base+0x44>
   15c64:	bl	17ba4 <__gcov_sort_n_vals@@Base+0x458>
   15c68:	pop	{r4, pc}
   15c6c:	andeq	r9, r2, r8, lsl #16
   15c70:	b	16e9c <build_ast@@Base+0x1274>
   15c74:	push	{r4, r5, r6, lr}
   15c78:	subs	r5, r1, #0
   15c7c:	popeq	{r4, r5, r6, pc}
   15c80:	mov	r4, r0
   15c84:	bl	15c70 <build_ast@@Base+0x48>
   15c88:	ldrd	r2, [r4]
   15c8c:	adds	r0, r0, r2
   15c90:	adc	r1, r1, r3
   15c94:	subs	r5, r5, #1
   15c98:	strd	r0, [r4], #8
   15c9c:	bne	15c84 <build_ast@@Base+0x5c>
   15ca0:	pop	{r4, r5, r6, pc}
   15ca4:	ldr	r3, [pc, #20]	; 15cc0 <build_ast@@Base+0x98>
   15ca8:	ldr	r2, [pc, #20]	; 15cc4 <build_ast@@Base+0x9c>
   15cac:	add	r3, pc, r3
   15cb0:	ldr	r3, [r3, r2]
   15cb4:	ldmib	r3, {r0, r3}
   15cb8:	add	r0, r0, r3
   15cbc:	bx	lr
   15cc0:	andeq	r3, r1, ip, asr #6
   15cc4:	andeq	r0, r0, ip, lsr #1
   15cc8:	ldr	r3, [pc, #28]	; 15cec <build_ast@@Base+0xc4>
   15ccc:	ldr	r2, [pc, #28]	; 15cf0 <build_ast@@Base+0xc8>
   15cd0:	add	r3, pc, r3
   15cd4:	ldr	r3, [r3, r2]
   15cd8:	ldr	r2, [r3]
   15cdc:	cmp	r2, #0
   15ce0:	ldrne	r0, [r3, #20]
   15ce4:	moveq	r0, #1
   15ce8:	bx	lr
   15cec:	andeq	r3, r1, r8, lsr #6
   15cf0:	andeq	r0, r0, ip, lsr #1
   15cf4:	bx	lr
   15cf8:	ldr	ip, [pc, #32]	; 15d20 <build_ast@@Base+0xf8>
   15cfc:	mov	r3, #32
   15d00:	teq	r0, r1
   15d04:	movmi	r2, ip
   15d08:	movpl	r2, #0
   15d0c:	subs	r3, r3, #1
   15d10:	lsl	r1, r1, #1
   15d14:	eor	r0, r2, r0, lsl #1
   15d18:	bne	15d00 <build_ast@@Base+0xd8>
   15d1c:	bx	lr
   15d20:	strbeq	r1, [r1], #3511	; 0xdb7
   15d24:	ldr	r3, [pc, #76]	; 15d78 <build_ast@@Base+0x150>
   15d28:	ldr	r1, [pc, #76]	; 15d7c <build_ast@@Base+0x154>
   15d2c:	add	r3, pc, r3
   15d30:	push	{r4, r5, r6, lr}
   15d34:	mov	r5, r0
   15d38:	ldr	r4, [r3, r1]
   15d3c:	lsl	r1, r0, #2
   15d40:	mov	r0, r4
   15d44:	mov	r2, #1
   15d48:	ldr	r3, [r0], #28
   15d4c:	bl	118a4 <fwrite@plt>
   15d50:	cmp	r0, #1
   15d54:	movne	r3, #1
   15d58:	ldr	r0, [r4, #8]
   15d5c:	strne	r3, [r4, #20]
   15d60:	ldr	r3, [r4, #4]
   15d64:	sub	r0, r0, r5
   15d68:	add	r3, r3, r5
   15d6c:	str	r3, [r4, #4]
   15d70:	str	r0, [r4, #8]
   15d74:	pop	{r4, r5, r6, pc}
   15d78:	andeq	r3, r1, ip, asr #5
   15d7c:	andeq	r0, r0, ip, lsr #1
   15d80:	ldr	r3, [pc, #76]	; 15dd4 <build_ast@@Base+0x1ac>
   15d84:	ldr	r2, [pc, #76]	; 15dd8 <build_ast@@Base+0x1b0>
   15d88:	add	r3, pc, r3
   15d8c:	push	{r4, r5, r6, lr}
   15d90:	mov	r5, r0
   15d94:	ldr	r4, [r3, r2]
   15d98:	ldr	r3, [r4, #8]
   15d9c:	cmp	r3, #1024	; 0x400
   15da0:	bcc	15dc0 <build_ast@@Base+0x198>
   15da4:	mov	r0, #1024	; 0x400
   15da8:	bl	15d24 <build_ast@@Base+0xfc>
   15dac:	ldr	r3, [r4, #8]
   15db0:	cmp	r3, #0
   15db4:	addne	r2, r4, #4096	; 0x1000
   15db8:	ldrne	r2, [r2, #28]
   15dbc:	strne	r2, [r4, #28]
   15dc0:	add	r0, r3, #7
   15dc4:	add	r3, r5, r3
   15dc8:	str	r3, [r4, #8]
   15dcc:	add	r0, r4, r0, lsl #2
   15dd0:	pop	{r4, r5, r6, pc}
   15dd4:	andeq	r3, r1, r0, ror r2
   15dd8:	andeq	r0, r0, ip, lsr #1
   15ddc:	ldr	r3, [pc, #172]	; 15e90 <build_ast@@Base+0x268>
   15de0:	ldr	r2, [pc, #172]	; 15e94 <build_ast@@Base+0x26c>
   15de4:	add	r3, pc, r3
   15de8:	push	{r4, r5, r6, lr}
   15dec:	mov	r5, r0
   15df0:	ldr	r4, [r3, r2]
   15df4:	ldr	r3, [r4, #8]
   15df8:	ldr	ip, [r4, #12]
   15dfc:	sub	ip, ip, r3
   15e00:	cmp	ip, r0
   15e04:	bcs	15e60 <build_ast@@Base+0x238>
   15e08:	ldr	r2, [r4, #4]
   15e0c:	cmp	ip, #0
   15e10:	add	r2, r2, r3
   15e14:	str	r2, [r4, #4]
   15e18:	addne	r2, r4, #28
   15e1c:	mov	r0, r4
   15e20:	ldrne	r3, [r2, r3, lsl #2]
   15e24:	mov	r6, #0
   15e28:	strne	r3, [r4, #28]
   15e2c:	ldr	r3, [r0], #28
   15e30:	mov	r2, #4096	; 0x1000
   15e34:	add	r0, r0, ip, lsl #2
   15e38:	mov	r1, #1
   15e3c:	str	ip, [r4, #12]
   15e40:	str	r6, [r4, #8]
   15e44:	bl	118bc <fread@plt>
   15e48:	ldr	r3, [r4, #12]
   15e4c:	add	r0, r3, r0, lsr #2
   15e50:	cmp	r5, r0
   15e54:	str	r0, [r4, #12]
   15e58:	bhi	15e74 <build_ast@@Base+0x24c>
   15e5c:	ldr	r3, [r4, #8]
   15e60:	add	r0, r3, #7
   15e64:	add	r5, r5, r3
   15e68:	add	r0, r4, r0, lsl #2
   15e6c:	str	r5, [r4, #8]
   15e70:	pop	{r4, r5, r6, pc}
   15e74:	ldr	r3, [r4, #16]
   15e78:	str	r6, [r4, #12]
   15e7c:	add	r5, r5, r3
   15e80:	sub	r5, r5, r0
   15e84:	str	r5, [r4, #16]
   15e88:	mov	r0, r6
   15e8c:	pop	{r4, r5, r6, pc}
   15e90:	andeq	r3, r1, r4, lsl r2
   15e94:	andeq	r0, r0, ip, lsr #1
   15e98:	push	{r0, r1, r2, r3}
   15e9c:	ldr	r3, [pc, #52]	; 15ed8 <build_ast@@Base+0x2b0>
   15ea0:	ldr	r1, [pc, #52]	; 15edc <build_ast@@Base+0x2b4>
   15ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   15ea8:	add	r3, pc, r3
   15eac:	sub	sp, sp, #12
   15eb0:	add	r2, sp, #20
   15eb4:	str	r2, [sp, #4]
   15eb8:	ldr	r0, [r3, r1]
   15ebc:	ldr	r1, [sp, #16]
   15ec0:	ldr	r0, [r0]
   15ec4:	bl	119ac <vfprintf@plt>
   15ec8:	add	sp, sp, #12
   15ecc:	pop	{lr}		; (ldr lr, [sp], #4)
   15ed0:	add	sp, sp, #16
   15ed4:	bx	lr
   15ed8:	andeq	r3, r1, r0, asr r1
   15edc:	andeq	r0, r0, r0, lsr #1
   15ee0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ee4:	subs	r6, r1, #0
   15ee8:	beq	15f44 <build_ast@@Base+0x31c>
   15eec:	cmp	r2, #0
   15ef0:	movne	r3, #0
   15ef4:	mov	r7, r2
   15ef8:	ldr	r8, [r6]
   15efc:	addne	r5, r0, #12
   15f00:	movne	r4, r3
   15f04:	beq	15f34 <build_ast@@Base+0x30c>
   15f08:	ldr	r0, [r5, #4]!
   15f0c:	add	r2, r6, r3, lsl #3
   15f10:	cmp	r0, #0
   15f14:	add	r9, r3, #1
   15f18:	add	r4, r4, #1
   15f1c:	beq	15f2c <build_ast@@Base+0x304>
   15f20:	ldr	r0, [r2, #28]
   15f24:	bl	11880 <free@plt>
   15f28:	mov	r3, r9
   15f2c:	cmp	r7, r4
   15f30:	bne	15f08 <build_ast@@Base+0x2e0>
   15f34:	mov	r0, r6
   15f38:	bl	11880 <free@plt>
   15f3c:	mov	r0, r8
   15f40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f44:	mov	r8, r6
   15f48:	b	15f3c <build_ast@@Base+0x314>
   15f4c:	push	{r4, r5}
   15f50:	mov	r4, r0
   15f54:	mov	r5, r1
   15f58:	orrs	r3, r4, r5
   15f5c:	beq	15fa0 <build_ast@@Base+0x378>
   15f60:	cmp	r1, #0
   15f64:	clzeq	r1, r0
   15f68:	addeq	r1, r1, #32
   15f6c:	clzne	r1, r1
   15f70:	rsb	r3, r1, #63	; 0x3f
   15f74:	cmp	r3, #1
   15f78:	bls	15fa0 <build_ast@@Base+0x378>
   15f7c:	rsb	r2, r1, #61	; 0x3d
   15f80:	rsb	r0, r2, #32
   15f84:	lsr	r3, r4, r2
   15f88:	sub	r2, r2, #32
   15f8c:	orr	r3, r3, r5, lsl r0
   15f90:	orr	r3, r3, r5, lsr r2
   15f94:	rsb	r1, r1, #1073741886	; 0x4000003e
   15f98:	and	r0, r3, #3
   15f9c:	add	r0, r0, r1, lsl #2
   15fa0:	pop	{r4, r5}
   15fa4:	bx	lr
   15fa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15fac:	mov	r1, r3
   15fb0:	mov	sl, r0
   15fb4:	mov	r0, r2
   15fb8:	mov	r8, r2
   15fbc:	mov	r9, r3
   15fc0:	bl	15f4c <build_ast@@Base+0x324>
   15fc4:	add	r0, r0, r0, lsl #1
   15fc8:	lsl	r0, r0, #3
   15fcc:	add	r3, sl, r0
   15fd0:	ldr	r2, [sl, r0]
   15fd4:	ldrd	r4, [r3, #16]
   15fd8:	ldrd	r6, [r3, #8]
   15fdc:	add	r2, r2, #1
   15fe0:	adds	r4, r4, r8
   15fe4:	adc	r5, r5, r9
   15fe8:	cmp	r8, r6
   15fec:	sbcs	r1, r9, r7
   15ff0:	str	r2, [sl, r0]
   15ff4:	strd	r4, [r3, #16]
   15ff8:	strdlt	r8, [r3, #8]
   15ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16000:	ldr	r3, [r1, #8]
   16004:	cmp	r3, #0
   16008:	bxeq	lr
   1600c:	push	{r4, r5, r6, r7, r8, lr}
   16010:	add	r2, r1, #6016	; 0x1780
   16014:	mov	r8, r1
   16018:	mov	r7, r0
   1601c:	ldrd	r0, [r1, #24]
   16020:	add	r2, r2, #32
   16024:	mov	r3, r8
   16028:	mov	ip, #0
   1602c:	mov	r4, #0
   16030:	mov	r5, #0
   16034:	str	ip, [r3, #40]	; 0x28
   16038:	strd	r0, [r3, #48]	; 0x30
   1603c:	strd	r4, [r3, #56]	; 0x38
   16040:	add	r3, r3, #24
   16044:	cmp	r2, r3
   16048:	bne	16034 <build_ast@@Base+0x40c>
   1604c:	cmp	r7, #0
   16050:	popeq	{r4, r5, r6, r7, r8, pc}
   16054:	add	r8, r8, #40	; 0x28
   16058:	ldr	r3, [r7, #16]
   1605c:	cmp	r3, #0
   16060:	beq	160e8 <build_ast@@Base+0x4c0>
   16064:	ldr	r2, [r7, #56]	; 0x38
   16068:	cmp	r2, #0
   1606c:	beq	160e8 <build_ast@@Base+0x4c0>
   16070:	mov	r6, #0
   16074:	b	16084 <build_ast@@Base+0x45c>
   16078:	add	r6, r6, #1
   1607c:	cmp	r2, r6
   16080:	beq	160e8 <build_ast@@Base+0x4c0>
   16084:	ldr	r3, [r7, #60]	; 0x3c
   16088:	ldr	r4, [r3, r6, lsl #2]
   1608c:	cmp	r4, #0
   16090:	beq	16078 <build_ast@@Base+0x450>
   16094:	ldr	r3, [r4]
   16098:	cmp	r3, r7
   1609c:	bne	16078 <build_ast@@Base+0x450>
   160a0:	ldr	r3, [r4, #16]
   160a4:	cmp	r3, #0
   160a8:	beq	16078 <build_ast@@Base+0x450>
   160ac:	mov	r5, #0
   160b0:	ldr	r2, [r4, #20]
   160b4:	lsl	r3, r5, #3
   160b8:	add	r2, r2, r3
   160bc:	mov	r0, r8
   160c0:	ldrd	r2, [r2]
   160c4:	bl	15fa8 <build_ast@@Base+0x380>
   160c8:	ldr	r3, [r4, #16]
   160cc:	add	r5, r5, #1
   160d0:	cmp	r3, r5
   160d4:	bhi	160b0 <build_ast@@Base+0x488>
   160d8:	ldr	r2, [r7, #56]	; 0x38
   160dc:	add	r6, r6, #1
   160e0:	cmp	r2, r6
   160e4:	bne	16084 <build_ast@@Base+0x45c>
   160e8:	ldr	r7, [r7, #4]
   160ec:	cmp	r7, #0
   160f0:	bne	16058 <build_ast@@Base+0x430>
   160f4:	pop	{r4, r5, r6, r7, r8, pc}
   160f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160fc:	sub	sp, sp, #12
   16100:	mov	r5, r0
   16104:	str	r0, [sp, #4]
   16108:	mov	r6, r2
   1610c:	str	r2, [sp]
   16110:	mov	r0, r1
   16114:	mov	r4, r1
   16118:	ldr	r2, [pc, #344]	; 16278 <build_ast@@Base+0x650>
   1611c:	mov	r1, #0
   16120:	bl	1197c <memset@plt>
   16124:	subs	r3, r5, #0
   16128:	mov	r5, #0
   1612c:	str	r5, [r6]
   16130:	beq	1625c <build_ast@@Base+0x634>
   16134:	mov	r7, r5
   16138:	mov	r9, r5
   1613c:	mov	r8, r3
   16140:	ldr	r0, [r8, #12]
   16144:	bl	11934 <strlen@plt>
   16148:	cmp	r5, r0
   1614c:	ldrcc	r3, [sp]
   16150:	strcc	r0, [r3]
   16154:	mov	r0, r7
   16158:	ldr	r1, [r8, #8]
   1615c:	bl	15cf8 <build_ast@@Base+0xd0>
   16160:	ldr	r6, [r8, #56]	; 0x38
   16164:	mov	r1, r6
   16168:	bl	15cf8 <build_ast@@Base+0xd0>
   1616c:	cmp	r6, #0
   16170:	mov	r7, r0
   16174:	beq	16244 <build_ast@@Base+0x61c>
   16178:	ldr	r5, [r8, #60]	; 0x3c
   1617c:	add	r6, r5, r6, lsl #2
   16180:	b	161a4 <build_ast@@Base+0x57c>
   16184:	mov	r0, r7
   16188:	mov	r1, r9
   1618c:	bl	15cf8 <build_ast@@Base+0xd0>
   16190:	mov	r1, r9
   16194:	bl	15cf8 <build_ast@@Base+0xd0>
   16198:	mov	r7, r0
   1619c:	cmp	r6, r5
   161a0:	beq	16244 <build_ast@@Base+0x61c>
   161a4:	ldr	fp, [r5], #4
   161a8:	cmp	fp, #0
   161ac:	beq	16184 <build_ast@@Base+0x55c>
   161b0:	ldr	r3, [fp]
   161b4:	cmp	r3, r8
   161b8:	bne	16184 <build_ast@@Base+0x55c>
   161bc:	mov	r0, r7
   161c0:	ldr	r1, [fp, #12]
   161c4:	bl	15cf8 <build_ast@@Base+0xd0>
   161c8:	ldr	r1, [fp, #8]
   161cc:	bl	15cf8 <build_ast@@Base+0xd0>
   161d0:	ldr	r3, [r8, #16]
   161d4:	cmp	r3, #0
   161d8:	mov	r7, r0
   161dc:	beq	1619c <build_ast@@Base+0x574>
   161e0:	ldr	sl, [fp, #16]
   161e4:	ldr	r3, [r4, #8]
   161e8:	mov	r1, sl
   161ec:	add	r3, r3, sl
   161f0:	str	r3, [r4, #8]
   161f4:	bl	15cf8 <build_ast@@Base+0xd0>
   161f8:	cmp	sl, #0
   161fc:	mov	r7, r0
   16200:	beq	1619c <build_ast@@Base+0x574>
   16204:	ldr	ip, [fp, #20]
   16208:	ldrd	r2, [r4, #16]
   1620c:	add	lr, ip, sl, lsl #3
   16210:	ldrd	r0, [ip]
   16214:	ldrd	sl, [r4, #24]
   16218:	adds	r2, r2, r0
   1621c:	adc	r3, r3, r1
   16220:	strd	r2, [r4, #16]
   16224:	ldrd	r0, [ip], #8
   16228:	cmp	sl, r0
   1622c:	sbcs	sl, fp, r1
   16230:	strdlt	r0, [r4, #24]
   16234:	cmp	lr, ip
   16238:	bne	16210 <build_ast@@Base+0x5e8>
   1623c:	cmp	r6, r5
   16240:	bne	161a4 <build_ast@@Base+0x57c>
   16244:	ldr	r8, [r8, #4]
   16248:	cmp	r8, #0
   1624c:	beq	16260 <build_ast@@Base+0x638>
   16250:	ldr	r3, [sp]
   16254:	ldr	r5, [r3]
   16258:	b	16140 <build_ast@@Base+0x518>
   1625c:	ldr	r7, [sp, #4]
   16260:	ldr	r0, [sp, #4]
   16264:	mov	r1, r4
   16268:	bl	16000 <build_ast@@Base+0x3d8>
   1626c:	mov	r0, r7
   16270:	add	sp, sp, #12
   16274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16278:	andeq	r1, r0, r8, asr #15
   1627c:	push	{r4, r5, r6, lr}
   16280:	mov	r4, r0
   16284:	ldr	r0, [pc, #172]	; 16338 <build_ast@@Base+0x710>
   16288:	add	r0, pc, r0
   1628c:	bl	118c8 <getenv@plt>
   16290:	subs	r3, r0, #0
   16294:	beq	162a0 <build_ast@@Base+0x678>
   16298:	bl	119b8 <atoi@plt>
   1629c:	bic	r3, r0, r0, asr #31
   162a0:	ldr	r0, [pc, #148]	; 1633c <build_ast@@Base+0x714>
   162a4:	str	r3, [r4, #8]
   162a8:	add	r0, pc, r0
   162ac:	bl	118c8 <getenv@plt>
   162b0:	subs	r6, r0, #0
   162b4:	beq	16308 <build_ast@@Base+0x6e0>
   162b8:	bl	11934 <strlen@plt>
   162bc:	subs	r5, r0, #0
   162c0:	beq	16308 <build_ast@@Base+0x6e0>
   162c4:	sub	r3, r5, #1
   162c8:	ldrb	r2, [r6, r3]
   162cc:	cmp	r2, #47	; 0x2f
   162d0:	beq	162fc <build_ast@@Base+0x6d4>
   162d4:	ldr	r0, [r4, #4]
   162d8:	str	r5, [r4, #12]
   162dc:	add	r0, r0, #2
   162e0:	add	r0, r0, r5
   162e4:	bl	118e0 <malloc@plt>
   162e8:	mov	r2, r5
   162ec:	mov	r1, r6
   162f0:	str	r0, [r4]
   162f4:	pop	{r4, r5, r6, lr}
   162f8:	b	1188c <memcpy@plt>
   162fc:	cmp	r3, #0
   16300:	movne	r5, r3
   16304:	bne	162d4 <build_ast@@Base+0x6ac>
   16308:	ldr	r3, [r4, #8]
   1630c:	cmp	r3, #0
   16310:	ldrne	r6, [pc, #40]	; 16340 <build_ast@@Base+0x718>
   16314:	movne	r5, #1
   16318:	addne	r6, pc, r6
   1631c:	bne	162d4 <build_ast@@Base+0x6ac>
   16320:	ldr	r0, [r4, #4]
   16324:	str	r3, [r4, #12]
   16328:	add	r0, r0, #2
   1632c:	bl	118e0 <malloc@plt>
   16330:	str	r0, [r4]
   16334:	pop	{r4, r5, r6, pc}
   16338:	andeq	r2, r0, r0, lsr #10
   1633c:	andeq	r2, r0, r4, lsl r5
   16340:	andeq	r2, r0, ip, lsl #9
   16344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16348:	sub	sp, sp, #6080	; 0x17c0
   1634c:	sub	sp, sp, #44	; 0x2c
   16350:	add	r3, sp, #72	; 0x48
   16354:	mov	r4, r0
   16358:	str	r0, [sp, #64]	; 0x40
   1635c:	str	r1, [sp, #60]	; 0x3c
   16360:	mov	r0, r3
   16364:	ldr	r2, [pc, #1068]	; 16798 <build_ast@@Base+0xb70>
   16368:	mov	r1, #0
   1636c:	str	r3, [sp, #68]	; 0x44
   16370:	bl	1197c <memset@plt>
   16374:	add	r3, r4, #6016	; 0x1780
   16378:	add	r3, r3, #8
   1637c:	add	r2, sp, #2016	; 0x7e0
   16380:	mov	sl, #251	; 0xfb
   16384:	add	r2, r2, #8
   16388:	mov	fp, #0
   1638c:	str	r3, [sp, #56]	; 0x38
   16390:	add	r3, sp, #72	; 0x48
   16394:	str	r2, [sp, #44]	; 0x2c
   16398:	str	r3, [sp, #48]	; 0x30
   1639c:	mov	r2, #0
   163a0:	mov	r3, #0
   163a4:	mov	r5, sl
   163a8:	mov	r0, fp
   163ac:	strd	r2, [sp, #24]
   163b0:	str	sl, [sp, #52]	; 0x34
   163b4:	ldr	r9, [sp, #56]	; 0x38
   163b8:	str	r5, [sp, #40]	; 0x28
   163bc:	ldr	sl, [sp, #60]	; 0x3c
   163c0:	ldrd	r2, [r9, #16]
   163c4:	ldr	r4, [r9]
   163c8:	str	r4, [sp, #4]
   163cc:	strd	r2, [sp, #8]
   163d0:	ldr	r3, [sp, #4]
   163d4:	cmp	r3, #0
   163d8:	beq	16684 <build_ast@@Base+0xa5c>
   163dc:	cmp	fp, #0
   163e0:	bne	16568 <build_ast@@Base+0x940>
   163e4:	ldr	r5, [sp, #40]	; 0x28
   163e8:	cmp	r5, #0
   163ec:	blt	16774 <build_ast@@Base+0xb4c>
   163f0:	add	ip, r5, r5, lsl #1
   163f4:	ldr	fp, [sl, ip, lsl #3]
   163f8:	add	ip, sl, ip, lsl #3
   163fc:	cmp	fp, #0
   16400:	bne	16768 <build_ast@@Base+0xb40>
   16404:	mov	r3, ip
   16408:	ldr	r4, [sp, #4]
   1640c:	b	16420 <build_ast@@Base+0x7f8>
   16410:	ldr	fp, [r3]
   16414:	mov	ip, r3
   16418:	cmp	fp, #0
   1641c:	bne	16760 <build_ast@@Base+0xb38>
   16420:	subs	r5, r5, #1
   16424:	sub	r3, r3, #24
   16428:	bcs	16410 <build_ast@@Base+0x7e8>
   1642c:	ldr	sl, [sp, #52]	; 0x34
   16430:	mov	r8, r0
   16434:	mov	r5, r4
   16438:	lsl	r4, sl, #1
   1643c:	ldr	r3, [sp, #44]	; 0x2c
   16440:	add	lr, r4, sl
   16444:	sub	ip, r3, #1952	; 0x7a0
   16448:	lsl	lr, lr, #3
   1644c:	add	ip, ip, lr
   16450:	ldrd	r0, [sp, #8]
   16454:	add	lr, r3, lr
   16458:	ldrd	r2, [ip, #16]
   1645c:	ldr	r6, [lr, #-1952]	; 0xfffff860
   16460:	adds	r0, r0, r2
   16464:	adc	r1, r1, r3
   16468:	mov	r2, r0
   1646c:	mov	r3, r1
   16470:	ldrd	r0, [ip, #8]
   16474:	strd	r2, [ip, #16]
   16478:	ldr	r3, [sp, #56]	; 0x38
   1647c:	add	r5, r6, r5
   16480:	str	r5, [lr, #-1952]	; 0xfffff860
   16484:	orrs	lr, r0, r1
   16488:	ldrd	r2, [r3, #8]
   1648c:	beq	1649c <build_ast@@Base+0x874>
   16490:	cmp	r2, r0
   16494:	sbcs	r1, r3, r1
   16498:	bge	164b0 <build_ast@@Base+0x888>
   1649c:	ldr	r1, [sp, #44]	; 0x2c
   164a0:	add	r0, r4, sl
   164a4:	sub	r1, r1, #1952	; 0x7a0
   164a8:	add	r1, r1, r0, lsl #3
   164ac:	strd	r2, [r1, #8]
   164b0:	add	lr, r4, sl
   164b4:	ldr	r3, [sp, #68]	; 0x44
   164b8:	lsl	lr, lr, #3
   164bc:	add	ip, r3, lr
   164c0:	ldr	r3, [sp, #64]	; 0x40
   164c4:	add	lr, r3, lr
   164c8:	b	16518 <build_ast@@Base+0x8f0>
   164cc:	ldrd	r0, [ip, #-8]
   164d0:	ldrd	r2, [lr, #-8]
   164d4:	ldrd	r4, [ip, #-16]
   164d8:	adds	r6, r0, r2
   164dc:	adc	r7, r1, r3
   164e0:	ldr	r2, [lr, #-24]	; 0xffffffe8
   164e4:	ldr	r3, [ip, #-24]	; 0xffffffe8
   164e8:	orrs	r1, r4, r5
   164ec:	add	r3, r3, r2
   164f0:	str	r3, [ip, #-24]	; 0xffffffe8
   164f4:	strd	r6, [ip, #-8]
   164f8:	ldrd	r2, [lr, #-16]
   164fc:	beq	1650c <build_ast@@Base+0x8e4>
   16500:	cmp	r2, r4
   16504:	sbcs	r1, r3, r5
   16508:	bge	16510 <build_ast@@Base+0x8e8>
   1650c:	strd	r2, [ip, #-16]
   16510:	sub	ip, ip, #24
   16514:	sub	lr, lr, #24
   16518:	subs	sl, sl, #1
   1651c:	bpl	164cc <build_ast@@Base+0x8a4>
   16520:	ldr	r3, [sp, #44]	; 0x2c
   16524:	add	r0, r8, r8, lsl #1
   16528:	sub	r3, r3, #1952	; 0x7a0
   1652c:	add	r3, r3, r0, lsl #3
   16530:	ldrd	r6, [sp, #24]
   16534:	ldrd	r4, [r3, #16]
   16538:	ldr	r1, [sp, #68]	; 0x44
   1653c:	ldr	r0, [sp, #64]	; 0x40
   16540:	adds	r6, r6, r4
   16544:	adc	r7, r7, r5
   16548:	mov	r4, r6
   1654c:	mov	r5, r7
   16550:	ldr	r2, [pc, #576]	; 16798 <build_ast@@Base+0xb70>
   16554:	strd	r4, [r3, #16]
   16558:	bl	1188c <memcpy@plt>
   1655c:	add	sp, sp, #6080	; 0x17c0
   16560:	add	sp, sp, #44	; 0x2c
   16564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16568:	ldr	r3, [sp, #40]	; 0x28
   1656c:	add	ip, r3, r3, lsl #1
   16570:	add	ip, sl, ip, lsl #3
   16574:	ldr	lr, [sp, #4]
   16578:	cmp	fp, lr
   1657c:	bcc	166f4 <build_ast@@Base+0xacc>
   16580:	ldrd	r2, [r9, #8]
   16584:	ldrd	r0, [ip, #8]
   16588:	adds	r4, r2, r0
   1658c:	adc	r5, r3, r1
   16590:	cmp	fp, lr
   16594:	strd	r4, [sp, #16]
   16598:	bls	16784 <build_ast@@Base+0xb5c>
   1659c:	ldrd	r6, [sp, #24]
   165a0:	mov	r2, fp
   165a4:	mov	r3, #0
   165a8:	umull	r0, r1, lr, r6
   165ac:	mla	r1, lr, r7, r1
   165b0:	bl	17c80 <__gcov_sort_n_vals@@Base+0x534>
   165b4:	mov	r2, r0
   165b8:	subs	r0, r6, r2
   165bc:	mov	r3, r1
   165c0:	sbc	r1, r7, r3
   165c4:	strd	r0, [sp, #24]
   165c8:	ldr	r1, [sp, #4]
   165cc:	mov	r0, #0
   165d0:	sub	fp, fp, r1
   165d4:	mov	r8, r1
   165d8:	mov	r1, #0
   165dc:	str	r1, [sp, #4]
   165e0:	mov	r1, #0
   165e4:	ldrd	r6, [sp, #8]
   165e8:	strd	r0, [sp, #8]
   165ec:	adds	r4, r2, r6
   165f0:	adc	r5, r3, r7
   165f4:	ldrd	r0, [sp, #16]
   165f8:	strd	r4, [sp, #32]
   165fc:	bl	15f4c <build_ast@@Base+0x324>
   16600:	ldr	r3, [sp, #48]	; 0x30
   16604:	ldrd	r4, [sp, #32]
   16608:	add	r1, r0, r0, lsl #1
   1660c:	lsl	r1, r1, #3
   16610:	add	ip, r3, r1
   16614:	ldr	r3, [sp, #44]	; 0x2c
   16618:	ldrd	r6, [ip, #8]
   1661c:	add	r1, r3, r1
   16620:	ldrd	r2, [ip, #16]
   16624:	adds	r2, r2, r4
   16628:	adc	r3, r3, r5
   1662c:	strd	r2, [sp, #32]
   16630:	ldrd	r2, [sp, #16]
   16634:	cmp	r2, r6
   16638:	sbcs	lr, r3, r7
   1663c:	movlt	lr, #1
   16640:	movge	lr, #0
   16644:	orrs	r4, r6, r7
   16648:	ldr	r4, [r1, #-1952]	; 0xfffff860
   1664c:	orreq	lr, lr, #1
   16650:	add	r8, r4, r8
   16654:	ldrd	r4, [sp, #32]
   16658:	cmp	lr, #0
   1665c:	str	r8, [r1, #-1952]	; 0xfffff860
   16660:	strd	r4, [ip, #16]
   16664:	strdne	r2, [ip, #8]
   16668:	cmp	fp, #0
   1666c:	ldreq	r3, [sp, #40]	; 0x28
   16670:	subeq	r3, r3, #1
   16674:	streq	r3, [sp, #40]	; 0x28
   16678:	ldr	r3, [sp, #4]
   1667c:	cmp	r3, #0
   16680:	bne	163dc <build_ast@@Base+0x7b4>
   16684:	ldr	r3, [sp, #52]	; 0x34
   16688:	ldr	r5, [sp, #40]	; 0x28
   1668c:	sub	r3, r3, #1
   16690:	str	r3, [sp, #52]	; 0x34
   16694:	cmn	r3, #1
   16698:	ldr	r3, [sp, #56]	; 0x38
   1669c:	sub	r3, r3, #24
   166a0:	str	r3, [sp, #56]	; 0x38
   166a4:	bne	163b4 <build_ast@@Base+0x78c>
   166a8:	cmp	fp, #0
   166ac:	mov	r9, r5
   166b0:	subne	r9, r5, #1
   166b4:	cmp	r9, #0
   166b8:	mov	r8, r0
   166bc:	blt	16520 <build_ast@@Base+0x8f8>
   166c0:	ldr	r2, [sp, #60]	; 0x3c
   166c4:	add	r3, r9, r9, lsl #1
   166c8:	sub	r0, r2, #24
   166cc:	add	r1, r2, r3, lsl #3
   166d0:	ldrd	r2, [sp, #24]
   166d4:	ldrd	r4, [r1, #16]
   166d8:	sub	r1, r1, #24
   166dc:	adds	r2, r2, r4
   166e0:	adc	r3, r3, r5
   166e4:	cmp	r0, r1
   166e8:	bne	166d4 <build_ast@@Base+0xaac>
   166ec:	strd	r2, [sp, #24]
   166f0:	b	16520 <build_ast@@Base+0x8f8>
   166f4:	ldrd	r2, [sp, #8]
   166f8:	ldrd	r6, [ip, #8]
   166fc:	ldrd	r4, [r9, #8]
   16700:	umull	r0, r1, fp, r2
   16704:	ldr	r8, [sp, #4]
   16708:	adds	r4, r4, r6
   1670c:	adc	r5, r5, r7
   16710:	mla	r1, fp, r3, r1
   16714:	mov	r2, r8
   16718:	mov	r3, #0
   1671c:	strd	r4, [sp, #16]
   16720:	bl	17c80 <__gcov_sort_n_vals@@Base+0x534>
   16724:	sub	r3, r8, fp
   16728:	str	r3, [sp, #4]
   1672c:	ldrd	r2, [sp, #8]
   16730:	mov	r8, fp
   16734:	mov	fp, #0
   16738:	subs	r2, r2, r0
   1673c:	sbc	r3, r3, r1
   16740:	mov	r6, r0
   16744:	mov	r7, r1
   16748:	mov	r0, #0
   1674c:	mov	r1, #0
   16750:	strd	r2, [sp, #8]
   16754:	ldrd	r2, [sp, #24]
   16758:	strd	r0, [sp, #24]
   1675c:	b	165ec <build_ast@@Base+0x9c4>
   16760:	str	r5, [sp, #40]	; 0x28
   16764:	str	r4, [sp, #4]
   16768:	ldrd	r2, [ip, #16]
   1676c:	strd	r2, [sp, #24]
   16770:	b	16574 <build_ast@@Base+0x94c>
   16774:	ldr	sl, [sp, #52]	; 0x34
   16778:	mov	r8, r0
   1677c:	ldr	r5, [sp, #4]
   16780:	b	16438 <build_ast@@Base+0x810>
   16784:	mov	r0, #0
   16788:	mov	r1, #0
   1678c:	ldrd	r2, [sp, #24]
   16790:	strd	r0, [sp, #24]
   16794:	b	165c8 <build_ast@@Base+0x9a0>
   16798:	andeq	r1, r0, r0, lsr #15
   1679c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167a0:	ldrb	r4, [r0]
   167a4:	cmp	r4, #47	; 0x2f
   167a8:	addeq	r5, r0, #1
   167ac:	ldrbeq	r4, [r0, #1]
   167b0:	movne	r5, r0
   167b4:	cmp	r4, #0
   167b8:	beq	1680c <build_ast@@Base+0xbe4>
   167bc:	mov	r6, r0
   167c0:	ldr	sl, [pc, #144]	; 16858 <build_ast@@Base+0xc30>
   167c4:	mov	r8, #0
   167c8:	mov	r7, #47	; 0x2f
   167cc:	b	167dc <build_ast@@Base+0xbb4>
   167d0:	ldrb	r4, [r5, #1]!
   167d4:	cmp	r4, #0
   167d8:	beq	1680c <build_ast@@Base+0xbe4>
   167dc:	cmp	r4, #47	; 0x2f
   167e0:	bne	167d0 <build_ast@@Base+0xba8>
   167e4:	strb	r8, [r5]
   167e8:	mov	r1, #0
   167ec:	mov	r0, r6
   167f0:	bl	11988 <access@plt>
   167f4:	cmn	r0, #1
   167f8:	beq	16818 <build_ast@@Base+0xbf0>
   167fc:	strb	r7, [r5]
   16800:	ldrb	r4, [r5, #1]!
   16804:	cmp	r4, #0
   16808:	bne	167dc <build_ast@@Base+0xbb4>
   1680c:	mov	r9, #0
   16810:	mov	r0, r9
   16814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16818:	mov	r1, sl
   1681c:	mov	r0, r6
   16820:	bl	11964 <mkdir@plt>
   16824:	cmn	r0, #1
   16828:	mov	r9, r0
   1682c:	bne	167fc <build_ast@@Base+0xbd4>
   16830:	bl	1194c <__errno_location@plt>
   16834:	ldr	r3, [r0]
   16838:	cmp	r3, #17
   1683c:	beq	167fc <build_ast@@Base+0xbd4>
   16840:	ldr	r0, [pc, #20]	; 1685c <build_ast@@Base+0xc34>
   16844:	mov	r1, r6
   16848:	add	r0, pc, r0
   1684c:	bl	15e98 <build_ast@@Base+0x270>
   16850:	strb	r4, [r5]
   16854:	b	16810 <build_ast@@Base+0xbe8>
   16858:	andeq	r0, r0, sp, ror #3
   1685c:	andeq	r1, r0, r0, lsl #31
   16860:	ldr	r3, [pc, #124]	; 168e4 <build_ast@@Base+0xcbc>
   16864:	cmp	r1, r3
   16868:	beq	168dc <build_ast@@Base+0xcb4>
   1686c:	cmp	r2, #0
   16870:	push	{r4, r5, lr}
   16874:	sub	sp, sp, #12
   16878:	ldreq	r2, [r0]
   1687c:	lsr	r3, r1, #24
   16880:	ldr	r0, [pc, #96]	; 168e8 <build_ast@@Base+0xcc0>
   16884:	lsr	r5, r1, #16
   16888:	lsr	r4, r1, #8
   1688c:	strb	r1, [sp, #3]
   16890:	strb	r3, [sp]
   16894:	mov	r1, #53	; 0x35
   16898:	mov	r3, #42	; 0x2a
   1689c:	mov	lr, #54	; 0x36
   168a0:	mov	ip, #48	; 0x30
   168a4:	strb	r1, [sp, #6]
   168a8:	strb	r3, [sp, #7]
   168ac:	mov	r1, r2
   168b0:	mov	r3, sp
   168b4:	add	r2, sp, #4
   168b8:	add	r0, pc, r0
   168bc:	strb	r5, [sp, #1]
   168c0:	strb	r4, [sp, #2]
   168c4:	strb	lr, [sp, #4]
   168c8:	strb	ip, [sp, #5]
   168cc:	bl	15e98 <build_ast@@Base+0x270>
   168d0:	mov	r0, #0
   168d4:	add	sp, sp, #12
   168d8:	pop	{r4, r5, pc}
   168dc:	mov	r0, #1
   168e0:	bx	lr
   168e4:	ldrtcc	r3, [r0], -sl, lsr #10
   168e8:	andeq	r1, r0, r8, lsr pc
   168ec:	ldr	r2, [r2, #16]
   168f0:	push	{r4, r5, r6, lr}
   168f4:	cmp	r2, #0
   168f8:	mov	r6, r3
   168fc:	ldr	ip, [sp, #16]
   16900:	beq	169cc <build_ast@@Base+0xda4>
   16904:	ldr	r3, [r3, #12]
   16908:	cmp	r1, #0
   1690c:	addeq	r2, r3, #1
   16910:	streq	r2, [r6, #12]
   16914:	cmp	r3, #0
   16918:	beq	16970 <build_ast@@Base+0xd48>
   1691c:	ldrd	r0, [ip, #16]
   16920:	ldrd	r2, [r6, #16]
   16924:	ldrd	r4, [r6, #24]
   16928:	adds	r2, r2, r0
   1692c:	adc	r3, r3, r1
   16930:	strd	r2, [r6, #16]
   16934:	ldrd	r0, [ip, #24]
   16938:	cmp	r4, r0
   1693c:	sbcs	r3, r5, r1
   16940:	blt	169f0 <build_ast@@Base+0xdc8>
   16944:	ldrd	r2, [r6, #32]
   16948:	adds	r2, r2, r0
   1694c:	adc	r3, r3, r1
   16950:	strd	r2, [r6, #32]
   16954:	add	r1, ip, #40	; 0x28
   16958:	add	r0, r6, #40	; 0x28
   1695c:	bl	16344 <build_ast@@Base+0x71c>
   16960:	ldr	r3, [sp, #20]
   16964:	mov	r0, #0
   16968:	str	r3, [r6]
   1696c:	pop	{r4, r5, r6, pc}
   16970:	ldr	r1, [ip, #8]
   16974:	ldrd	r2, [r6, #16]
   16978:	str	r1, [r6, #8]
   1697c:	ldrd	r0, [ip, #16]
   16980:	ldrd	r4, [r6, #24]
   16984:	adds	r2, r2, r0
   16988:	adc	r3, r3, r1
   1698c:	strd	r2, [r6, #16]
   16990:	ldrd	r0, [ip, #24]
   16994:	cmp	r4, r0
   16998:	sbcs	r3, r5, r1
   1699c:	bge	16a0c <build_ast@@Base+0xde4>
   169a0:	ldrd	r2, [r6, #32]
   169a4:	strd	r0, [r6, #24]
   169a8:	ldrd	r0, [ip, #24]
   169ac:	adds	r2, r2, r0
   169b0:	adc	r3, r3, r1
   169b4:	strd	r2, [r6, #32]
   169b8:	add	r1, ip, #40	; 0x28
   169bc:	ldr	r2, [pc, #92]	; 16a20 <build_ast@@Base+0xdf8>
   169c0:	add	r0, r6, #40	; 0x28
   169c4:	bl	1188c <memcpy@plt>
   169c8:	b	16960 <build_ast@@Base+0xd38>
   169cc:	ldr	r3, [r3, #12]
   169d0:	cmp	r3, #0
   169d4:	beq	16960 <build_ast@@Base+0xd38>
   169d8:	mov	r1, r0
   169dc:	ldr	r0, [pc, #64]	; 16a24 <build_ast@@Base+0xdfc>
   169e0:	add	r0, pc, r0
   169e4:	bl	15e98 <build_ast@@Base+0x270>
   169e8:	mvn	r0, #0
   169ec:	pop	{r4, r5, r6, pc}
   169f0:	ldrd	r2, [r6, #32]
   169f4:	strd	r0, [r6, #24]
   169f8:	ldrd	r0, [ip, #24]
   169fc:	adds	r2, r2, r0
   16a00:	adc	r3, r3, r1
   16a04:	strd	r2, [r6, #32]
   16a08:	b	16954 <build_ast@@Base+0xd2c>
   16a0c:	ldrd	r2, [r6, #32]
   16a10:	adds	r2, r2, r0
   16a14:	adc	r3, r3, r1
   16a18:	strd	r2, [r6, #32]
   16a1c:	b	169b8 <build_ast@@Base+0xd90>
   16a20:	andeq	r1, r0, r0, lsr #15
   16a24:	andeq	r1, r0, r8, asr #28
   16a28:	ldr	ip, [pc, #52]	; 16a64 <build_ast@@Base+0xe3c>
   16a2c:	ldr	r3, [pc, #52]	; 16a68 <build_ast@@Base+0xe40>
   16a30:	add	ip, pc, ip
   16a34:	push	{r4, lr}
   16a38:	mov	lr, #0
   16a3c:	ldr	r3, [ip, r3]
   16a40:	mvn	r4, #0
   16a44:	mov	r2, lr
   16a48:	mov	r1, lr
   16a4c:	str	r4, [r3, #24]
   16a50:	str	lr, [r3, #4]
   16a54:	str	lr, [r3, #8]
   16a58:	ldr	r0, [r3]
   16a5c:	pop	{r4, lr}
   16a60:	b	119c4 <fseek@plt>
   16a64:	andeq	r2, r1, r8, asr #11
   16a68:	andeq	r0, r0, ip, lsr #1
   16a6c:	push	{r4, r5, r6, r7, lr}
   16a70:	sub	sp, sp, #108	; 0x6c
   16a74:	mov	r4, #0
   16a78:	mov	r7, r0
   16a7c:	strh	r4, [sp, #2]
   16a80:	str	r4, [sp, #4]
   16a84:	str	r4, [sp, #8]
   16a88:	bl	1191c <getpid@plt>
   16a8c:	ldr	r3, [pc, #240]	; 16b84 <build_ast@@Base+0xf5c>
   16a90:	ldr	ip, [pc, #240]	; 16b88 <build_ast@@Base+0xf60>
   16a94:	add	r3, pc, r3
   16a98:	mvn	lr, #0
   16a9c:	mov	r6, #1
   16aa0:	ldr	r2, [pc, #228]	; 16b8c <build_ast@@Base+0xf64>
   16aa4:	mov	r1, #66	; 0x42
   16aa8:	str	r0, [sp, #12]
   16aac:	ldr	r5, [r3, ip]
   16ab0:	mov	r0, r7
   16ab4:	strh	r6, [sp]
   16ab8:	str	r4, [r5, #4]
   16abc:	str	r4, [r5, #12]
   16ac0:	str	r4, [r5, #8]
   16ac4:	str	r4, [r5, #20]
   16ac8:	str	lr, [r5, #16]
   16acc:	bl	11910 <open@plt>
   16ad0:	subs	r6, r0, #0
   16ad4:	movlt	r0, r4
   16ad8:	blt	16b58 <build_ast@@Base+0xf30>
   16adc:	mov	r7, sp
   16ae0:	mov	r4, #7
   16ae4:	mov	r2, r7
   16ae8:	mov	r1, r4
   16aec:	mov	r0, r6
   16af0:	bl	11970 <fcntl@plt>
   16af4:	cmp	r0, #0
   16af8:	beq	16b0c <build_ast@@Base+0xee4>
   16afc:	bl	1194c <__errno_location@plt>
   16b00:	ldr	r3, [r0]
   16b04:	cmp	r3, #4
   16b08:	beq	16ae4 <build_ast@@Base+0xebc>
   16b0c:	ldr	r1, [pc, #124]	; 16b90 <build_ast@@Base+0xf68>
   16b10:	mov	r0, r6
   16b14:	add	r1, pc, r1
   16b18:	bl	11844 <fdopen@plt>
   16b1c:	mov	r4, r0
   16b20:	cmp	r4, #0
   16b24:	mov	r0, r6
   16b28:	str	r4, [r5]
   16b2c:	beq	16b60 <build_ast@@Base+0xf38>
   16b30:	add	r1, sp, #16
   16b34:	bl	17f4c <__libc_csu_fini@@Base+0x1c>
   16b38:	cmp	r0, #0
   16b3c:	blt	16b6c <build_ast@@Base+0xf44>
   16b40:	mov	r4, #1
   16b44:	ldr	r0, [r5]
   16b48:	mov	r1, #0
   16b4c:	str	r4, [r5, #24]
   16b50:	bl	1185c <setbuf@plt>
   16b54:	mov	r0, r4
   16b58:	add	sp, sp, #108	; 0x6c
   16b5c:	pop	{r4, r5, r6, r7, pc}
   16b60:	bl	119e8 <close@plt>
   16b64:	mov	r0, r4
   16b68:	b	16b58 <build_ast@@Base+0xf30>
   16b6c:	mov	r4, #0
   16b70:	ldr	r0, [r5]
   16b74:	bl	11994 <fclose@plt>
   16b78:	str	r4, [r5]
   16b7c:	mov	r0, r4
   16b80:	b	16b58 <build_ast@@Base+0xf30>
   16b84:	andeq	r2, r1, r4, ror #10
   16b88:	andeq	r0, r0, ip, lsr #1
   16b8c:			; <UNDEFINED> instruction: 0x000001b6
   16b90:	andeq	r1, r0, r0, asr #26
   16b94:	push	{r4, r5, r6, lr}
   16b98:	mov	r4, r1
   16b9c:	ldr	r5, [pc, #244]	; 16c98 <build_ast@@Base+0x1070>
   16ba0:	ldr	ip, [r4, #8]
   16ba4:	ldr	lr, [r4, #12]
   16ba8:	ldr	r6, [r4]
   16bac:	cmp	ip, #0
   16bb0:	mov	r1, r0
   16bb4:	add	r5, pc, r5
   16bb8:	add	r0, r6, lr
   16bbc:	ble	16bf8 <build_ast@@Base+0xfd0>
   16bc0:	ldrb	r3, [r1]
   16bc4:	cmp	r3, #47	; 0x2f
   16bc8:	addeq	r2, r1, #1
   16bcc:	ldrbeq	r3, [r1, #1]
   16bd0:	movne	r2, r1
   16bd4:	cmp	r3, #0
   16bd8:	beq	16bf8 <build_ast@@Base+0xfd0>
   16bdc:	cmp	r3, #47	; 0x2f
   16be0:	moveq	r1, r2
   16be4:	ldrb	r3, [r2, #1]!
   16be8:	subeq	ip, ip, #1
   16bec:	cmp	r3, #0
   16bf0:	cmpne	ip, #0
   16bf4:	bne	16bdc <build_ast@@Base+0xfb4>
   16bf8:	cmp	lr, #0
   16bfc:	beq	16c14 <build_ast@@Base+0xfec>
   16c00:	ldrb	r3, [r1]
   16c04:	cmp	r3, #47	; 0x2f
   16c08:	addne	r0, r0, #1
   16c0c:	movne	r3, #47	; 0x2f
   16c10:	strbne	r3, [r6, lr]
   16c14:	bl	118b0 <strcpy@plt>
   16c18:	ldr	r0, [r4]
   16c1c:	bl	16a6c <build_ast@@Base+0xe44>
   16c20:	cmp	r0, #0
   16c24:	beq	16c30 <build_ast@@Base+0x1008>
   16c28:	mov	r0, #0
   16c2c:	pop	{r4, r5, r6, pc}
   16c30:	ldr	r0, [r4]
   16c34:	bl	1679c <build_ast@@Base+0xb74>
   16c38:	cmp	r0, #0
   16c3c:	bne	16c74 <build_ast@@Base+0x104c>
   16c40:	ldr	r0, [r4]
   16c44:	bl	16a6c <build_ast@@Base+0xe44>
   16c48:	cmp	r0, #0
   16c4c:	bne	16c28 <build_ast@@Base+0x1000>
   16c50:	ldr	r3, [pc, #68]	; 16c9c <build_ast@@Base+0x1074>
   16c54:	ldr	r1, [pc, #68]	; 16ca0 <build_ast@@Base+0x1078>
   16c58:	ldr	r2, [r4]
   16c5c:	ldr	r3, [r5, r3]
   16c60:	add	r1, pc, r1
   16c64:	ldr	r0, [r3]
   16c68:	bl	11940 <fprintf@plt>
   16c6c:	mvn	r0, #0
   16c70:	pop	{r4, r5, r6, pc}
   16c74:	ldr	r3, [pc, #32]	; 16c9c <build_ast@@Base+0x1074>
   16c78:	ldr	r1, [pc, #36]	; 16ca4 <build_ast@@Base+0x107c>
   16c7c:	ldr	r2, [r4]
   16c80:	ldr	r3, [r5, r3]
   16c84:	add	r1, pc, r1
   16c88:	ldr	r0, [r3]
   16c8c:	bl	11940 <fprintf@plt>
   16c90:	mvn	r0, #0
   16c94:	pop	{r4, r5, r6, pc}
   16c98:	andeq	r2, r1, r4, asr #8
   16c9c:	andeq	r0, r0, r0, lsr #1
   16ca0:	andeq	r1, r0, ip, lsl #24
   16ca4:	ldrdeq	r1, [r0], -r4
   16ca8:	ldr	r3, [pc, #96]	; 16d10 <build_ast@@Base+0x10e8>
   16cac:	ldr	r2, [pc, #96]	; 16d14 <build_ast@@Base+0x10ec>
   16cb0:	add	r3, pc, r3
   16cb4:	push	{r4, lr}
   16cb8:	ldr	r4, [r3, r2]
   16cbc:	ldr	r0, [r4]
   16cc0:	cmp	r0, #0
   16cc4:	beq	16ce4 <build_ast@@Base+0x10bc>
   16cc8:	ldr	r3, [r4, #8]
   16ccc:	cmp	r3, #0
   16cd0:	bne	16cf4 <build_ast@@Base+0x10cc>
   16cd4:	bl	11994 <fclose@plt>
   16cd8:	mov	r3, #0
   16cdc:	str	r3, [r4]
   16ce0:	str	r3, [r4, #12]
   16ce4:	mov	r3, #0
   16ce8:	str	r3, [r4, #24]
   16cec:	ldr	r0, [r4, #20]
   16cf0:	pop	{r4, pc}
   16cf4:	ldr	r2, [r4, #24]
   16cf8:	cmp	r2, #0
   16cfc:	bge	16cd4 <build_ast@@Base+0x10ac>
   16d00:	mov	r0, r3
   16d04:	bl	15d24 <build_ast@@Base+0xfc>
   16d08:	ldr	r0, [r4]
   16d0c:	b	16cd4 <build_ast@@Base+0x10ac>
   16d10:	andeq	r2, r1, r8, asr #6
   16d14:	andeq	r0, r0, ip, lsr #1
   16d18:	push	{r4, lr}
   16d1c:	mov	r4, r0
   16d20:	mov	r0, #1
   16d24:	bl	15d80 <build_ast@@Base+0x158>
   16d28:	str	r4, [r0]
   16d2c:	pop	{r4, pc}
   16d30:	push	{r4, r5, r6, lr}
   16d34:	mov	r5, r0
   16d38:	mov	r0, #2
   16d3c:	mov	r4, r1
   16d40:	bl	15d80 <build_ast@@Base+0x158>
   16d44:	str	r5, [r0]
   16d48:	str	r4, [r0, #4]
   16d4c:	pop	{r4, r5, r6, pc}
   16d50:	push	{r4, r5, r6, lr}
   16d54:	mov	r5, r0
   16d58:	mov	r0, #2
   16d5c:	mov	r4, r1
   16d60:	bl	15d80 <build_ast@@Base+0x158>
   16d64:	str	r5, [r0]
   16d68:	str	r4, [r0, #4]
   16d6c:	pop	{r4, r5, r6, pc}
   16d70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d74:	sub	sp, sp, #32
   16d78:	mov	r7, sp
   16d7c:	mov	r5, r1
   16d80:	mov	r6, sp
   16d84:	add	r2, sp, #32
   16d88:	mov	r3, #0
   16d8c:	str	r3, [r6], #4
   16d90:	cmp	r2, r6
   16d94:	bne	16d8c <build_ast@@Base+0x1164>
   16d98:	mov	r8, #0
   16d9c:	mov	r3, r8
   16da0:	mov	r4, r5
   16da4:	mov	r1, r5
   16da8:	mov	r9, #1
   16dac:	lsr	r2, r3, #5
   16db0:	ldr	lr, [r1, #40]	; 0x28
   16db4:	add	ip, sp, #32
   16db8:	cmp	lr, #0
   16dbc:	add	r2, ip, r2, lsl #2
   16dc0:	and	sl, r3, #31
   16dc4:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   16dc8:	add	r3, r3, #1
   16dcc:	orrne	ip, ip, r9, lsl sl
   16dd0:	addne	r8, r8, #1
   16dd4:	strne	ip, [r2, #-32]	; 0xffffffe0
   16dd8:	cmp	r3, #252	; 0xfc
   16ddc:	add	r1, r1, #24
   16de0:	bne	16dac <build_ast@@Base+0x1184>
   16de4:	add	r8, r8, r8, lsl #2
   16de8:	add	r1, r8, #17
   16dec:	bl	16d50 <build_ast@@Base+0x1128>
   16df0:	ldr	r0, [r5]
   16df4:	bl	16d18 <build_ast@@Base+0x10f0>
   16df8:	ldr	r0, [r5, #8]
   16dfc:	bl	16d18 <build_ast@@Base+0x10f0>
   16e00:	ldr	r0, [r5, #12]
   16e04:	bl	16d18 <build_ast@@Base+0x10f0>
   16e08:	ldrd	r0, [r5, #16]
   16e0c:	bl	16d30 <build_ast@@Base+0x1108>
   16e10:	ldrd	r0, [r5, #24]
   16e14:	bl	16d30 <build_ast@@Base+0x1108>
   16e18:	ldrd	r0, [r5, #32]
   16e1c:	bl	16d30 <build_ast@@Base+0x1108>
   16e20:	ldr	r0, [r7], #4
   16e24:	bl	16d18 <build_ast@@Base+0x10f0>
   16e28:	cmp	r7, r6
   16e2c:	bne	16e20 <build_ast@@Base+0x11f8>
   16e30:	add	r5, r5, #6016	; 0x1780
   16e34:	add	r5, r5, #32
   16e38:	b	16e48 <build_ast@@Base+0x1220>
   16e3c:	add	r4, r4, #24
   16e40:	cmp	r4, r5
   16e44:	beq	16e74 <build_ast@@Base+0x124c>
   16e48:	ldr	r0, [r4, #40]	; 0x28
   16e4c:	cmp	r0, #0
   16e50:	beq	16e3c <build_ast@@Base+0x1214>
   16e54:	bl	16d18 <build_ast@@Base+0x10f0>
   16e58:	ldrd	r0, [r4, #48]	; 0x30
   16e5c:	bl	16d30 <build_ast@@Base+0x1108>
   16e60:	add	r4, r4, #24
   16e64:	ldrd	r0, [r4, #32]
   16e68:	bl	16d30 <build_ast@@Base+0x1108>
   16e6c:	cmp	r4, r5
   16e70:	bne	16e48 <build_ast@@Base+0x1220>
   16e74:	add	sp, sp, #32
   16e78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e7c:	push	{r4, lr}
   16e80:	mov	r0, #1
   16e84:	bl	15ddc <build_ast@@Base+0x1b4>
   16e88:	subs	r3, r0, #0
   16e8c:	popeq	{r4, pc}
   16e90:	ldr	r0, [r3]
   16e94:	pop	{r4, lr}
   16e98:	b	15cf4 <build_ast@@Base+0xcc>
   16e9c:	push	{r4, r5, r6, lr}
   16ea0:	mov	r0, #2
   16ea4:	bl	15ddc <build_ast@@Base+0x1b4>
   16ea8:	subs	r3, r0, #0
   16eac:	beq	16edc <build_ast@@Base+0x12b4>
   16eb0:	ldr	r0, [r3]
   16eb4:	bl	15cf4 <build_ast@@Base+0xcc>
   16eb8:	mov	r5, #0
   16ebc:	mov	r4, r0
   16ec0:	ldr	r0, [r3, #4]
   16ec4:	bl	15cf4 <build_ast@@Base+0xcc>
   16ec8:	mov	r2, #0
   16ecc:	mov	r3, r0
   16ed0:	orr	r1, r3, r5
   16ed4:	orr	r0, r2, r4
   16ed8:	pop	{r4, r5, r6, pc}
   16edc:	mov	r0, #0
   16ee0:	mov	r1, #0
   16ee4:	pop	{r4, r5, r6, pc}
   16ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eec:	sub	sp, sp, #28
   16ef0:	mov	r4, #0
   16ef4:	str	r1, [sp, #8]
   16ef8:	str	r3, [sp, #12]
   16efc:	add	r3, r1, #56	; 0x38
   16f00:	add	r1, r1, #16
   16f04:	str	r0, [sp, #16]
   16f08:	str	r2, [sp, #20]
   16f0c:	ldr	r2, [r3, #-4]!
   16f10:	cmp	r2, #0
   16f14:	addne	r4, r4, #1
   16f18:	cmp	r3, r1
   16f1c:	bne	16f0c <build_ast@@Base+0x12e4>
   16f20:	add	r4, r4, #4
   16f24:	lsl	r4, r4, #3
   16f28:	mov	r0, r4
   16f2c:	bl	118e0 <malloc@plt>
   16f30:	subs	r8, r0, #0
   16f34:	beq	16ff8 <build_ast@@Base+0x13d0>
   16f38:	ldr	r3, [sp, #12]
   16f3c:	mov	r4, #0
   16f40:	str	r3, [r8, #4]
   16f44:	str	r4, [r8]
   16f48:	bl	16e7c <build_ast@@Base+0x1254>
   16f4c:	ldr	r3, [sp, #8]
   16f50:	ldr	r5, [pc, #272]	; 17068 <build_ast@@Base+0x1440>
   16f54:	add	r6, r3, #12
   16f58:	mov	r7, r4
   16f5c:	str	r0, [r8, #12]
   16f60:	bl	16e7c <build_ast@@Base+0x1254>
   16f64:	str	r0, [r8, #16]
   16f68:	bl	16e7c <build_ast@@Base+0x1254>
   16f6c:	str	r0, [r8, #20]
   16f70:	ldr	r3, [r6, #4]!
   16f74:	cmp	r3, #0
   16f78:	beq	16fd4 <build_ast@@Base+0x13ac>
   16f7c:	bl	16e7c <build_ast@@Base+0x1254>
   16f80:	cmp	r5, r0
   16f84:	bne	1704c <build_ast@@Base+0x1424>
   16f88:	bl	16e7c <build_ast@@Base+0x1254>
   16f8c:	lsr	r9, r0, #1
   16f90:	lsl	fp, r9, #3
   16f94:	mov	r0, fp
   16f98:	bl	118e0 <malloc@plt>
   16f9c:	subs	sl, r0, #0
   16fa0:	beq	1705c <build_ast@@Base+0x1434>
   16fa4:	add	r3, r8, r7, lsl #3
   16fa8:	cmp	r9, #0
   16fac:	str	r9, [r3, #24]
   16fb0:	str	sl, [r3, #28]
   16fb4:	sub	r9, r9, #1
   16fb8:	beq	16fd0 <build_ast@@Base+0x13a8>
   16fbc:	bl	16e9c <build_ast@@Base+0x1274>
   16fc0:	sub	r9, r9, #1
   16fc4:	cmn	r9, #1
   16fc8:	strd	r0, [sl], #8
   16fcc:	bne	16fbc <build_ast@@Base+0x1394>
   16fd0:	add	r7, r7, #1
   16fd4:	add	r4, r4, #1
   16fd8:	cmp	r4, #10
   16fdc:	add	r5, r5, #131072	; 0x20000
   16fe0:	bne	16f70 <build_ast@@Base+0x1348>
   16fe4:	ldr	r3, [sp, #20]
   16fe8:	mov	r0, r8
   16fec:	str	r8, [r3]
   16ff0:	add	sp, sp, #28
   16ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ff8:	mvn	r5, #0
   16ffc:	cmp	r4, #0
   17000:	beq	1703c <build_ast@@Base+0x1414>
   17004:	ldr	r3, [pc, #96]	; 1706c <build_ast@@Base+0x1444>
   17008:	add	r3, pc, r3
   1700c:	ldr	r0, [pc, #92]	; 17070 <build_ast@@Base+0x1448>
   17010:	ldr	r2, [sp, #12]
   17014:	ldr	r1, [sp, #16]
   17018:	str	r4, [sp]
   1701c:	add	r0, pc, r0
   17020:	bl	15e98 <build_ast@@Base+0x270>
   17024:	mov	r2, r5
   17028:	mov	r1, r8
   1702c:	ldr	r0, [sp, #8]
   17030:	add	sp, sp, #28
   17034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17038:	b	15ee0 <build_ast@@Base+0x2b8>
   1703c:	ldr	r3, [pc, #48]	; 17074 <build_ast@@Base+0x144c>
   17040:	mov	r4, r5
   17044:	add	r3, pc, r3
   17048:	b	1700c <build_ast@@Base+0x13e4>
   1704c:	ldr	r3, [pc, #36]	; 17078 <build_ast@@Base+0x1450>
   17050:	mov	r5, r4
   17054:	add	r3, pc, r3
   17058:	b	1700c <build_ast@@Base+0x13e4>
   1705c:	mov	r5, r4
   17060:	mov	r4, fp
   17064:	b	16ffc <build_ast@@Base+0x13d4>
   17068:			; <UNDEFINED> instruction: 0x01a10000
   1706c:	andeq	r1, r0, r0, lsl #17
   17070:	muleq	r0, r0, r8
   17074:	andeq	r1, r0, r4, asr r8
   17078:	andeq	r1, r0, r4, asr #16
   1707c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17080:	sub	sp, sp, #44	; 0x2c
   17084:	mov	r9, r0
   17088:	bl	16e7c <build_ast@@Base+0x1254>
   1708c:	mov	r7, #0
   17090:	add	sl, sp, #8
   17094:	mov	r4, sl
   17098:	add	r5, sp, #40	; 0x28
   1709c:	str	r0, [r9]
   170a0:	bl	16e7c <build_ast@@Base+0x1254>
   170a4:	str	r0, [r9, #8]
   170a8:	bl	16e7c <build_ast@@Base+0x1254>
   170ac:	str	r0, [r9, #12]
   170b0:	bl	16e9c <build_ast@@Base+0x1274>
   170b4:	strd	r0, [r9, #16]
   170b8:	bl	16e9c <build_ast@@Base+0x1274>
   170bc:	strd	r0, [r9, #24]
   170c0:	bl	16e9c <build_ast@@Base+0x1274>
   170c4:	ldr	r2, [pc, #244]	; 171c0 <build_ast@@Base+0x1598>
   170c8:	strd	r0, [r9, #32]
   170cc:	add	r0, r9, #40	; 0x28
   170d0:	mov	r1, r7
   170d4:	bl	1197c <memset@plt>
   170d8:	bl	16e7c <build_ast@@Base+0x1254>
   170dc:	str	r0, [r4], #4
   170e0:	bl	17d64 <__gcov_sort_n_vals@@Base+0x618>
   170e4:	cmp	r5, r4
   170e8:	add	r7, r7, r0
   170ec:	bne	170d8 <build_ast@@Base+0x14b0>
   170f0:	cmp	r7, #0
   170f4:	sub	r7, r7, #1
   170f8:	beq	171ac <build_ast@@Base+0x1584>
   170fc:	ldr	r8, [pc, #192]	; 171c4 <build_ast@@Base+0x159c>
   17100:	mov	r4, #0
   17104:	ldr	r3, [pc, #188]	; 171c8 <build_ast@@Base+0x15a0>
   17108:	add	r8, pc, r8
   1710c:	mov	r5, r4
   17110:	mov	r6, r4
   17114:	add	r3, pc, r3
   17118:	str	r3, [sp, #4]
   1711c:	cmp	r4, #0
   17120:	addeq	r6, sl, r5, lsl #2
   17124:	beq	17130 <build_ast@@Base+0x1508>
   17128:	b	17158 <build_ast@@Base+0x1530>
   1712c:	mov	r5, r3
   17130:	cmp	r5, #7
   17134:	bls	17140 <build_ast@@Base+0x1518>
   17138:	mov	r0, r8
   1713c:	bl	15e98 <build_ast@@Base+0x270>
   17140:	ldr	r4, [r6], #4
   17144:	add	r3, r5, #1
   17148:	cmp	r4, #0
   1714c:	beq	1712c <build_ast@@Base+0x1504>
   17150:	lsl	r6, r5, #5
   17154:	mov	r5, r3
   17158:	tst	r4, #1
   1715c:	bne	17170 <build_ast@@Base+0x1548>
   17160:	lsr	r4, r4, #1
   17164:	tst	r4, #1
   17168:	add	r6, r6, #1
   1716c:	beq	17160 <build_ast@@Base+0x1538>
   17170:	cmp	r6, #251	; 0xfb
   17174:	bhi	171b4 <build_ast@@Base+0x158c>
   17178:	bl	16e7c <build_ast@@Base+0x1254>
   1717c:	add	r3, r6, r6, lsl #1
   17180:	sub	r7, r7, #1
   17184:	add	fp, r9, r3, lsl #3
   17188:	lsr	r4, r4, #1
   1718c:	add	r6, r6, #1
   17190:	str	r0, [fp, #40]	; 0x28
   17194:	bl	16e9c <build_ast@@Base+0x1274>
   17198:	strd	r0, [fp, #48]	; 0x30
   1719c:	bl	16e9c <build_ast@@Base+0x1274>
   171a0:	cmn	r7, #1
   171a4:	strd	r0, [fp, #56]	; 0x38
   171a8:	bne	1711c <build_ast@@Base+0x14f4>
   171ac:	add	sp, sp, #44	; 0x2c
   171b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b4:	ldr	r0, [sp, #4]
   171b8:	bl	15e98 <build_ast@@Base+0x270>
   171bc:	b	17178 <build_ast@@Base+0x1550>
   171c0:	andeq	r1, r0, r0, lsr #15
   171c4:	andeq	r1, r0, r4, lsl #16
   171c8:			; <UNDEFINED> instruction: 0x000017bc
   171cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171d0:	sub	sp, sp, #6080	; 0x17c0
   171d4:	sub	sp, sp, #28
   171d8:	mov	r4, r1
   171dc:	stmib	sp, {r2, r3}
   171e0:	add	r3, sp, #6144	; 0x1800
   171e4:	mov	sl, r0
   171e8:	ldr	r7, [r3]
   171ec:	add	r3, sp, #6144	; 0x1800
   171f0:	add	r3, r3, #4
   171f4:	ldr	r6, [r3]
   171f8:	bl	16e7c <build_ast@@Base+0x1254>
   171fc:	add	r3, r4, #12
   17200:	mov	r2, sl
   17204:	str	r3, [sp, #12]
   17208:	mov	r1, r0
   1720c:	mov	r0, r3
   17210:	bl	16860 <build_ast@@Base+0xc38>
   17214:	cmp	r0, #0
   17218:	beq	17498 <build_ast@@Base+0x1870>
   1721c:	bl	16e7c <build_ast@@Base+0x1254>
   17220:	ldr	r3, [r4, #8]
   17224:	cmp	r0, r3
   17228:	beq	1723c <build_ast@@Base+0x1614>
   1722c:	mov	r0, #0
   17230:	add	sp, sp, #6080	; 0x17c0
   17234:	add	sp, sp, #28
   17238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1723c:	ldr	fp, [pc, #628]	; 174b8 <build_ast@@Base+0x1890>
   17240:	add	r9, sp, #2000	; 0x7d0
   17244:	add	r5, sp, #16
   17248:	add	fp, pc, fp
   1724c:	add	r9, r9, #8
   17250:	bl	15ca4 <build_ast@@Base+0x7c>
   17254:	str	r0, [r6]
   17258:	bl	16e7c <build_ast@@Base+0x1254>
   1725c:	cmp	r0, #-1560281088	; 0xa3000000
   17260:	bne	17304 <build_ast@@Base+0x16dc>
   17264:	bl	16e7c <build_ast@@Base+0x1254>
   17268:	mov	r0, r5
   1726c:	bl	1707c <build_ast@@Base+0x1454>
   17270:	bl	15cc8 <build_ast@@Base+0xa0>
   17274:	subs	r8, r0, #0
   17278:	bne	17438 <build_ast@@Base+0x1810>
   1727c:	ldr	r3, [r7]
   17280:	cmp	r3, #0
   17284:	bne	172d0 <build_ast@@Base+0x16a8>
   17288:	add	r2, sp, #6144	; 0x1800
   1728c:	add	r2, r2, #8
   17290:	ldr	r3, [r9, #-1992]	; 0xfffff838
   17294:	ldr	r2, [r2]
   17298:	cmp	r3, r2
   1729c:	bne	17250 <build_ast@@Base+0x1628>
   172a0:	ldr	r3, [sp, #8]
   172a4:	ldr	ip, [r9, #-1984]	; 0xfffff840
   172a8:	ldr	r2, [pc, #524]	; 174bc <build_ast@@Base+0x1894>
   172ac:	ldr	r3, [r3, #8]
   172b0:	mov	r1, r5
   172b4:	cmp	ip, r3
   172b8:	ldr	r0, [sp, #4]
   172bc:	bne	17250 <build_ast@@Base+0x1628>
   172c0:	bl	1188c <memcpy@plt>
   172c4:	ldr	r3, [r6]
   172c8:	str	r3, [r7]
   172cc:	b	17250 <build_ast@@Base+0x1628>
   172d0:	ldr	r0, [pc, #488]	; 174c0 <build_ast@@Base+0x1898>
   172d4:	bl	118e0 <malloc@plt>
   172d8:	ldr	r2, [pc, #476]	; 174bc <build_ast@@Base+0x1894>
   172dc:	mov	r1, r5
   172e0:	mov	r3, r0
   172e4:	str	r0, [fp]
   172e8:	add	r0, r0, #8
   172ec:	str	r3, [sp]
   172f0:	bl	1188c <memcpy@plt>
   172f4:	ldr	r3, [sp]
   172f8:	str	r8, [r3]
   172fc:	ldr	fp, [fp]
   17300:	b	17250 <build_ast@@Base+0x1628>
   17304:	ldr	r5, [r4, #56]	; 0x38
   17308:	cmp	r5, #0
   1730c:	beq	174a0 <build_ast@@Base+0x1878>
   17310:	ldr	r3, [r4, #60]	; 0x3c
   17314:	cmp	r0, #16777216	; 0x1000000
   17318:	ldr	r8, [r3]
   1731c:	bne	17468 <build_ast@@Base+0x1840>
   17320:	ldr	r6, [pc, #412]	; 174c4 <build_ast@@Base+0x189c>
   17324:	mov	r5, #0
   17328:	add	r6, pc, r6
   1732c:	add	r6, r6, #4
   17330:	b	17374 <build_ast@@Base+0x174c>
   17334:	mov	r2, r6
   17338:	mov	r3, r5
   1733c:	mov	r1, r4
   17340:	mov	r0, sl
   17344:	bl	16ee8 <build_ast@@Base+0x12c0>
   17348:	subs	r6, r0, #0
   1734c:	beq	1746c <build_ast@@Base+0x1844>
   17350:	bl	16e7c <build_ast@@Base+0x1254>
   17354:	ldr	r3, [r4, #56]	; 0x38
   17358:	add	r5, r5, #1
   1735c:	cmp	r3, r5
   17360:	beq	174a0 <build_ast@@Base+0x1878>
   17364:	ldr	r3, [r4, #60]	; 0x3c
   17368:	cmp	r0, #16777216	; 0x1000000
   1736c:	ldr	r8, [r3, r5, lsl #2]
   17370:	bne	1746c <build_ast@@Base+0x1844>
   17374:	bl	16e7c <build_ast@@Base+0x1254>
   17378:	cmp	r0, #0
   1737c:	beq	17350 <build_ast@@Base+0x1728>
   17380:	cmp	r0, #3
   17384:	bne	1746c <build_ast@@Base+0x1844>
   17388:	cmp	r8, #0
   1738c:	beq	17334 <build_ast@@Base+0x170c>
   17390:	ldr	r3, [r8]
   17394:	cmp	r4, r3
   17398:	bne	17334 <build_ast@@Base+0x170c>
   1739c:	bl	16e7c <build_ast@@Base+0x1254>
   173a0:	ldr	r3, [r8, #4]
   173a4:	cmp	r0, r3
   173a8:	bne	1746c <build_ast@@Base+0x1844>
   173ac:	bl	16e7c <build_ast@@Base+0x1254>
   173b0:	ldr	r3, [r8, #8]
   173b4:	cmp	r0, r3
   173b8:	bne	1746c <build_ast@@Base+0x1844>
   173bc:	bl	16e7c <build_ast@@Base+0x1254>
   173c0:	ldr	r3, [r8, #12]
   173c4:	cmp	r0, r3
   173c8:	bne	1746c <build_ast@@Base+0x1844>
   173cc:	ldr	r7, [pc, #244]	; 174c8 <build_ast@@Base+0x18a0>
   173d0:	ldr	fp, [sp, #12]
   173d4:	add	r8, r8, #16
   173d8:	ldr	r9, [fp, #4]!
   173dc:	cmp	r9, #0
   173e0:	beq	17418 <build_ast@@Base+0x17f0>
   173e4:	bl	16e7c <build_ast@@Base+0x1254>
   173e8:	str	r0, [sp]
   173ec:	bl	16e7c <build_ast@@Base+0x1254>
   173f0:	ldr	r3, [sp]
   173f4:	cmp	r3, r7
   173f8:	bne	1746c <build_ast@@Base+0x1844>
   173fc:	ldr	r3, [r8]
   17400:	mov	r1, r3
   17404:	cmp	r0, r3, lsl #1
   17408:	bne	1746c <build_ast@@Base+0x1844>
   1740c:	ldr	r0, [r8, #4]
   17410:	blx	r9
   17414:	add	r8, r8, #8
   17418:	ldr	r3, [pc, #172]	; 174cc <build_ast@@Base+0x18a4>
   1741c:	add	r7, r7, #131072	; 0x20000
   17420:	cmp	r7, r3
   17424:	bne	173d8 <build_ast@@Base+0x17b0>
   17428:	bl	15cc8 <build_ast@@Base+0xa0>
   1742c:	cmp	r0, #0
   17430:	beq	17350 <build_ast@@Base+0x1728>
   17434:	mov	r8, r0
   17438:	cmp	r8, #0
   1743c:	blt	174ac <build_ast@@Base+0x1884>
   17440:	ldr	r2, [pc, #136]	; 174d0 <build_ast@@Base+0x18a8>
   17444:	add	r2, pc, r2
   17448:	ldr	r0, [pc, #132]	; 174d4 <build_ast@@Base+0x18ac>
   1744c:	mov	r1, sl
   17450:	add	r0, pc, r0
   17454:	bl	15e98 <build_ast@@Base+0x270>
   17458:	mvn	r0, #0
   1745c:	add	sp, sp, #6080	; 0x17c0
   17460:	add	sp, sp, #28
   17464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17468:	mov	r5, #0
   1746c:	ldr	r2, [pc, #100]	; 174d8 <build_ast@@Base+0x18b0>
   17470:	ldr	r0, [pc, #100]	; 174dc <build_ast@@Base+0x18b4>
   17474:	mov	r3, r5
   17478:	mov	r1, sl
   1747c:	add	r2, pc, r2
   17480:	add	r0, pc, r0
   17484:	bl	15e98 <build_ast@@Base+0x270>
   17488:	mvn	r0, #0
   1748c:	add	sp, sp, #6080	; 0x17c0
   17490:	add	sp, sp, #28
   17494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17498:	mvn	r0, #0
   1749c:	b	17230 <build_ast@@Base+0x1608>
   174a0:	cmp	r0, #0
   174a4:	beq	1722c <build_ast@@Base+0x1604>
   174a8:	b	1746c <build_ast@@Base+0x1844>
   174ac:	ldr	r2, [pc, #44]	; 174e0 <build_ast@@Base+0x18b8>
   174b0:	add	r2, pc, r2
   174b4:	b	17448 <build_ast@@Base+0x1820>
   174b8:	andeq	r3, r1, r8, lsr r5
   174bc:	andeq	r1, r0, r8, asr #15
   174c0:	ldrdeq	r1, [r0], -r0
   174c4:	andeq	r3, r1, r8, asr r4
   174c8:			; <UNDEFINED> instruction: 0x01a10000
   174cc:			; <UNDEFINED> instruction: 0x01b50000
   174d0:	andeq	r1, r0, r4, lsl r5
   174d4:	andeq	r1, r0, r8, lsr r5
   174d8:	andeq	r0, r0, r8, lsl #31
   174dc:	andeq	r1, r0, r0, ror #9
   174e0:	muleq	r0, ip, r4
   174e4:	ldr	r3, [pc, #68]	; 17530 <build_ast@@Base+0x1908>
   174e8:	ldr	r2, [pc, #68]	; 17534 <build_ast@@Base+0x190c>
   174ec:	add	r3, pc, r3
   174f0:	push	{r4, r5, r6, lr}
   174f4:	mov	r5, r0
   174f8:	ldr	r4, [r3, r2]
   174fc:	ldr	r0, [r4, #8]
   17500:	cmp	r0, #0
   17504:	beq	1750c <build_ast@@Base+0x18e4>
   17508:	bl	15d24 <build_ast@@Base+0xfc>
   1750c:	lsl	r1, r5, #2
   17510:	mov	r2, #0
   17514:	ldr	r0, [r4]
   17518:	bl	119c4 <fseek@plt>
   1751c:	ldr	r0, [r4]
   17520:	bl	11898 <ftell@plt>
   17524:	asr	r0, r0, #2
   17528:	str	r0, [r4, #4]
   1752c:	pop	{r4, r5, r6, pc}
   17530:	andeq	r1, r1, ip, lsl #22
   17534:	andeq	r0, r0, ip, lsr #1
   17538:	cmp	r2, #0
   1753c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17540:	mov	r9, r0
   17544:	sub	sp, sp, #20
   17548:	mov	r5, r1
   1754c:	mov	r4, r3
   17550:	beq	17708 <build_ast@@Base+0x1ae0>
   17554:	cmp	r4, #0
   17558:	bne	17724 <build_ast@@Base+0x1afc>
   1755c:	mov	r1, r5
   17560:	ldr	r5, [pc, #456]	; 17730 <build_ast@@Base+0x1b08>
   17564:	mov	r0, #-1560281088	; 0xa3000000
   17568:	add	r5, pc, r5
   1756c:	bl	16d70 <build_ast@@Base+0x1148>
   17570:	ldr	r4, [r5]
   17574:	cmp	r4, #0
   17578:	movne	r6, #-1560281088	; 0xa3000000
   1757c:	beq	175a8 <build_ast@@Base+0x1980>
   17580:	add	r1, r4, #8
   17584:	mov	r0, r6
   17588:	bl	16d70 <build_ast@@Base+0x1148>
   1758c:	ldr	r3, [r5]
   17590:	mov	r0, r3
   17594:	ldr	r4, [r3]
   17598:	bl	11880 <free@plt>
   1759c:	cmp	r4, #0
   175a0:	str	r4, [r5]
   175a4:	bne	17580 <build_ast@@Base+0x1958>
   175a8:	ldr	r3, [r9, #56]	; 0x38
   175ac:	cmp	r3, #0
   175b0:	beq	176ec <build_ast@@Base+0x1ac4>
   175b4:	ldr	r3, [pc, #376]	; 17734 <build_ast@@Base+0x1b0c>
   175b8:	ldr	r8, [pc, #376]	; 17738 <build_ast@@Base+0x1b10>
   175bc:	add	r3, pc, r3
   175c0:	str	r3, [sp, #4]
   175c4:	ldr	r3, [pc, #368]	; 1773c <build_ast@@Base+0x1b14>
   175c8:	mov	r7, #0
   175cc:	add	r3, pc, r3
   175d0:	str	r3, [sp, #12]
   175d4:	b	17610 <build_ast@@Base+0x19e8>
   175d8:	ldr	r3, [r9, #60]	; 0x3c
   175dc:	ldr	r4, [r3, r7, lsl #2]
   175e0:	cmp	r4, #0
   175e4:	beq	175f4 <build_ast@@Base+0x19cc>
   175e8:	ldr	r3, [r4]
   175ec:	cmp	r9, r3
   175f0:	beq	176fc <build_ast@@Base+0x1ad4>
   175f4:	mov	r1, #0
   175f8:	mov	r0, #16777216	; 0x1000000
   175fc:	bl	16d50 <build_ast@@Base+0x1128>
   17600:	ldr	r3, [r9, #56]	; 0x38
   17604:	add	r7, r7, #1
   17608:	cmp	r3, r7
   1760c:	beq	176ec <build_ast@@Base+0x1ac4>
   17610:	ldr	r3, [sp, #4]
   17614:	ldr	r4, [r3, #4]
   17618:	cmp	r4, #0
   1761c:	beq	175d8 <build_ast@@Base+0x19b0>
   17620:	ldr	r3, [r4, #4]
   17624:	cmp	r3, r7
   17628:	moveq	r3, #1
   1762c:	addeq	r4, r4, #8
   17630:	streq	r3, [sp, #8]
   17634:	bne	175d8 <build_ast@@Base+0x19b0>
   17638:	mov	r1, #3
   1763c:	mov	r0, #16777216	; 0x1000000
   17640:	bl	16d50 <build_ast@@Base+0x1128>
   17644:	ldr	r0, [r4, #4]
   17648:	bl	16d18 <build_ast@@Base+0x10f0>
   1764c:	ldr	r0, [r4, #8]
   17650:	bl	16d18 <build_ast@@Base+0x10f0>
   17654:	ldr	r0, [r4, #12]
   17658:	bl	16d18 <build_ast@@Base+0x10f0>
   1765c:	ldr	r5, [pc, #220]	; 17740 <build_ast@@Base+0x1b18>
   17660:	add	r4, r4, #16
   17664:	add	r6, r9, #12
   17668:	ldr	r3, [r6, #4]!
   1766c:	cmp	r3, #0
   17670:	beq	176ac <build_ast@@Base+0x1a84>
   17674:	ldr	fp, [r4]
   17678:	mov	r0, r5
   1767c:	sub	sl, fp, #1
   17680:	lsl	r1, fp, #1
   17684:	bl	16d50 <build_ast@@Base+0x1128>
   17688:	cmp	fp, #0
   1768c:	ldr	fp, [r4, #4]
   17690:	beq	176a8 <build_ast@@Base+0x1a80>
   17694:	sub	sl, sl, #1
   17698:	ldrd	r0, [fp], #8
   1769c:	bl	16d30 <build_ast@@Base+0x1108>
   176a0:	cmn	sl, #1
   176a4:	bne	17694 <build_ast@@Base+0x1a6c>
   176a8:	add	r4, r4, #8
   176ac:	add	r5, r5, #131072	; 0x20000
   176b0:	cmp	r5, r8
   176b4:	bne	17668 <build_ast@@Base+0x1a40>
   176b8:	ldr	r3, [sp, #8]
   176bc:	cmp	r3, #0
   176c0:	beq	17600 <build_ast@@Base+0x19d8>
   176c4:	ldr	r4, [sp, #12]
   176c8:	mov	r2, #10
   176cc:	mov	r0, r9
   176d0:	ldr	r1, [r4, #4]
   176d4:	bl	15ee0 <build_ast@@Base+0x2b8>
   176d8:	ldr	r3, [r9, #56]	; 0x38
   176dc:	add	r7, r7, #1
   176e0:	cmp	r3, r7
   176e4:	str	r0, [r4, #4]
   176e8:	bne	17610 <build_ast@@Base+0x19e8>
   176ec:	mov	r0, #0
   176f0:	add	sp, sp, #20
   176f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176f8:	b	16d18 <build_ast@@Base+0x10f0>
   176fc:	mov	r3, #0
   17700:	str	r3, [sp, #8]
   17704:	b	17638 <build_ast@@Base+0x1a10>
   17708:	ldr	r1, [pc, #52]	; 17744 <build_ast@@Base+0x1b1c>
   1770c:	ldr	r0, [pc, #52]	; 17748 <build_ast@@Base+0x1b20>
   17710:	bl	16d50 <build_ast@@Base+0x1128>
   17714:	ldr	r0, [r9, #8]
   17718:	bl	16d18 <build_ast@@Base+0x10f0>
   1771c:	cmp	r4, #0
   17720:	beq	1755c <build_ast@@Base+0x1934>
   17724:	mov	r0, r4
   17728:	bl	174e4 <build_ast@@Base+0x18bc>
   1772c:	b	1755c <build_ast@@Base+0x1934>
   17730:	andeq	r3, r1, r8, lsl r2
   17734:	andeq	r3, r1, r4, asr #3
   17738:			; <UNDEFINED> instruction: 0x01b50000
   1773c:			; <UNDEFINED> instruction: 0x000131b4
   17740:			; <UNDEFINED> instruction: 0x01a10000
   17744:	ldrtcc	r3, [r0], -sl, lsr #10
   17748:	strbvs	r6, [r3, -r1, ror #8]!

0001774c <__gcov_sort_n_vals@@Base>:
   1774c:	cmp	r1, #2
   17750:	bxle	lr
   17754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17758:	sub	lr, r1, #3
   1775c:	mov	ip, #0
   17760:	lsr	lr, lr, #1
   17764:	add	r1, r0, #8
   17768:	add	lr, r0, lr, lsl #4
   1776c:	add	lr, lr, #24
   17770:	ldrd	r4, [r1, #16]
   17774:	ldrd	r6, [r1]
   17778:	ldrd	r8, [r1, #8]
   1777c:	mov	r2, ip
   17780:	cmp	r6, r4
   17784:	sbcs	r3, r7, r5
   17788:	mov	fp, ip
   1778c:	bge	177d4 <__gcov_sort_n_vals@@Base+0x88>
   17790:	add	r3, r1, #8
   17794:	mov	sl, #0
   17798:	b	177b0 <__gcov_sort_n_vals@@Base+0x64>
   1779c:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   177a0:	sub	r3, r3, #16
   177a4:	cmp	r6, r4
   177a8:	sbcs	r6, r7, r5
   177ac:	bge	177d4 <__gcov_sort_n_vals@@Base+0x88>
   177b0:	ldrd	r6, [r3, #-16]
   177b4:	subs	r2, r2, #2
   177b8:	mov	fp, r2
   177bc:	strd	r6, [r3]
   177c0:	ldrd	r6, [r1, sl]
   177c4:	sub	sl, sl, #16
   177c8:	strd	r6, [r3, #8]
   177cc:	mov	r6, r3
   177d0:	bpl	1779c <__gcov_sort_n_vals@@Base+0x50>
   177d4:	add	fp, fp, #2
   177d8:	mov	r3, r0
   177dc:	add	r1, r1, #16
   177e0:	lsl	fp, fp, #3
   177e4:	cmp	lr, r1
   177e8:	strd	r8, [r3, fp]!
   177ec:	add	ip, ip, #2
   177f0:	strd	r4, [r3, #8]
   177f4:	bne	17770 <__gcov_sort_n_vals@@Base+0x24>
   177f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177fc:	push	{r4, r5, r6, r7, r8, lr}
   17800:	ldr	r6, [r0]
   17804:	ldr	r4, [pc, #76]	; 17858 <__gcov_sort_n_vals@@Base+0x10c>
   17808:	smull	r2, r3, r4, r6
   1780c:	asr	r4, r6, #31
   17810:	rsb	r4, r4, r3, asr #1
   17814:	add	r4, r4, r4, lsl #3
   17818:	subs	r4, r6, r4
   1781c:	bne	17854 <__gcov_sort_n_vals@@Base+0x108>
   17820:	cmp	r6, #0
   17824:	ldr	r5, [r0, #4]
   17828:	pople	{r4, r5, r6, r7, r8, pc}
   1782c:	add	r5, r5, #8
   17830:	mov	r7, #8
   17834:	mov	r0, r5
   17838:	add	r4, r4, #9
   1783c:	mov	r1, r7
   17840:	bl	1774c <__gcov_sort_n_vals@@Base>
   17844:	cmp	r6, r4
   17848:	add	r5, r5, #72	; 0x48
   1784c:	bgt	17834 <__gcov_sort_n_vals@@Base+0xe8>
   17850:	pop	{r4, r5, r6, r7, r8, pc}
   17854:	bl	119dc <abort@plt>
   17858:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1785c:	ldr	r3, [r0, #52]	; 0x34
   17860:	cmp	r3, #0
   17864:	bxeq	lr
   17868:	ldr	ip, [r0, #56]	; 0x38
   1786c:	cmp	ip, #0
   17870:	bxeq	lr
   17874:	push	{r4, r5, r6, lr}
   17878:	mov	r5, r0
   1787c:	mov	r4, #0
   17880:	add	r6, r0, #12
   17884:	ldr	r1, [r5, #60]	; 0x3c
   17888:	mov	r2, r6
   1788c:	mov	r3, #0
   17890:	ldr	r0, [r1, r4, lsl #2]
   17894:	add	r0, r0, #16
   17898:	ldr	r1, [r2, #4]!
   1789c:	cmp	r1, #0
   178a0:	beq	178b0 <__gcov_sort_n_vals@@Base+0x164>
   178a4:	cmp	r3, #9
   178a8:	beq	178cc <__gcov_sort_n_vals@@Base+0x180>
   178ac:	add	r0, r0, #8
   178b0:	add	r3, r3, #1
   178b4:	cmp	r3, #10
   178b8:	bne	17898 <__gcov_sort_n_vals@@Base+0x14c>
   178bc:	add	r4, r4, #1
   178c0:	cmp	ip, r4
   178c4:	bne	17884 <__gcov_sort_n_vals@@Base+0x138>
   178c8:	pop	{r4, r5, r6, pc}
   178cc:	bl	177fc <__gcov_sort_n_vals@@Base+0xb0>
   178d0:	ldr	ip, [r5, #56]	; 0x38
   178d4:	add	r4, r4, #1
   178d8:	cmp	ip, r4
   178dc:	bne	17884 <__gcov_sort_n_vals@@Base+0x138>
   178e0:	b	178c8 <__gcov_sort_n_vals@@Base+0x17c>
   178e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   178e8:	sub	sp, sp, #6080	; 0x17c0
   178ec:	ldr	ip, [pc, #388]	; 17a78 <__gcov_sort_n_vals@@Base+0x32c>
   178f0:	sub	sp, sp, #36	; 0x24
   178f4:	add	ip, pc, ip
   178f8:	add	r5, sp, #2016	; 0x7e0
   178fc:	mov	r4, r0
   17900:	mov	r7, r1
   17904:	mov	r1, #0
   17908:	str	r1, [ip, #4]
   1790c:	str	r1, [ip]
   17910:	mov	r8, r2
   17914:	mov	r6, r3
   17918:	str	r1, [r5, #-2000]	; 0xfffff830
   1791c:	str	r1, [r5, #-1996]	; 0xfffff834
   17920:	bl	1785c <__gcov_sort_n_vals@@Base+0x110>
   17924:	mov	r1, r7
   17928:	ldr	r0, [r4, #12]
   1792c:	bl	16b94 <build_ast@@Base+0xf6c>
   17930:	cmn	r0, #1
   17934:	beq	179b4 <__gcov_sort_n_vals@@Base+0x268>
   17938:	bl	16e7c <build_ast@@Base+0x1254>
   1793c:	cmp	r0, #0
   17940:	beq	179c0 <__gcov_sort_n_vals@@Base+0x274>
   17944:	ldr	r3, [pc, #304]	; 17a7c <__gcov_sort_n_vals@@Base+0x330>
   17948:	cmp	r0, r3
   1794c:	beq	17a18 <__gcov_sort_n_vals@@Base+0x2cc>
   17950:	ldr	r0, [pc, #296]	; 17a80 <__gcov_sort_n_vals@@Base+0x334>
   17954:	ldr	r1, [r7]
   17958:	add	r0, pc, r0
   1795c:	bl	15e98 <build_ast@@Base+0x270>
   17960:	ldr	r5, [pc, #284]	; 17a84 <__gcov_sort_n_vals@@Base+0x338>
   17964:	add	r5, pc, r5
   17968:	ldr	r1, [r5, #4]
   1796c:	cmp	r1, #0
   17970:	movne	r6, #10
   17974:	beq	17994 <__gcov_sort_n_vals@@Base+0x248>
   17978:	mov	r2, r6
   1797c:	mov	r0, r4
   17980:	bl	15ee0 <build_ast@@Base+0x2b8>
   17984:	cmp	r0, #0
   17988:	mov	r1, r0
   1798c:	str	r0, [r5, #4]
   17990:	bne	17978 <__gcov_sort_n_vals@@Base+0x22c>
   17994:	bl	16ca8 <build_ast@@Base+0x1080>
   17998:	cmp	r0, #0
   1799c:	beq	179b4 <__gcov_sort_n_vals@@Base+0x268>
   179a0:	blt	17a54 <__gcov_sort_n_vals@@Base+0x308>
   179a4:	ldr	r0, [pc, #220]	; 17a88 <__gcov_sort_n_vals@@Base+0x33c>
   179a8:	add	r0, pc, r0
   179ac:	ldr	r1, [r7]
   179b0:	bl	15e98 <build_ast@@Base+0x270>
   179b4:	add	sp, sp, #6080	; 0x17c0
   179b8:	add	sp, sp, #36	; 0x24
   179bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   179c0:	add	r9, sp, #24
   179c4:	bl	16a28 <build_ast@@Base+0xe00>
   179c8:	ldr	r1, [r5, #-2000]	; 0xfffff830
   179cc:	cmp	r1, #0
   179d0:	beq	17a60 <__gcov_sort_n_vals@@Base+0x314>
   179d4:	add	r3, sp, #6144	; 0x1800
   179d8:	ldr	r0, [r7]
   179dc:	str	r6, [sp, #4]
   179e0:	ldr	r3, [r3]
   179e4:	mov	r1, r8
   179e8:	str	r3, [sp]
   179ec:	mov	r2, r4
   179f0:	mov	r3, r9
   179f4:	bl	168ec <build_ast@@Base+0xcc4>
   179f8:	cmn	r0, #1
   179fc:	beq	17960 <__gcov_sort_n_vals@@Base+0x214>
   17a00:	mov	r1, r9
   17a04:	ldr	r3, [r5, #-2000]	; 0xfffff830
   17a08:	ldr	r2, [r5, #-1996]	; 0xfffff834
   17a0c:	mov	r0, r4
   17a10:	bl	17538 <build_ast@@Base+0x1910>
   17a14:	b	17960 <__gcov_sort_n_vals@@Base+0x214>
   17a18:	add	r3, sp, #16
   17a1c:	ldr	r0, [r7]
   17a20:	str	r3, [sp]
   17a24:	add	r3, sp, #6144	; 0x1800
   17a28:	add	r1, sp, #20
   17a2c:	add	r9, sp, #24
   17a30:	str	r1, [sp, #4]
   17a34:	str	r6, [sp, #8]
   17a38:	mov	r2, r9
   17a3c:	ldr	r3, [r3]
   17a40:	mov	r1, r4
   17a44:	bl	171cc <build_ast@@Base+0x15a4>
   17a48:	cmn	r0, #1
   17a4c:	bne	179c4 <__gcov_sort_n_vals@@Base+0x278>
   17a50:	b	17960 <__gcov_sort_n_vals@@Base+0x214>
   17a54:	ldr	r0, [pc, #48]	; 17a8c <__gcov_sort_n_vals@@Base+0x340>
   17a58:	add	r0, pc, r0
   17a5c:	b	179ac <__gcov_sort_n_vals@@Base+0x260>
   17a60:	ldr	r2, [pc, #40]	; 17a90 <__gcov_sort_n_vals@@Base+0x344>
   17a64:	mov	r0, r9
   17a68:	bl	1197c <memset@plt>
   17a6c:	ldr	r3, [r5, #-1996]	; 0xfffff834
   17a70:	str	r3, [r5, #-2000]	; 0xfffff830
   17a74:	b	179d4 <__gcov_sort_n_vals@@Base+0x288>
   17a78:	andeq	r2, r1, ip, lsl #29
   17a7c:	strbvs	r6, [r3, -r1, ror #8]!
   17a80:	andeq	r1, r0, r8, lsl #1
   17a84:	andeq	r2, r1, ip, lsl lr
   17a88:	andeq	r1, r0, ip, lsl r0
   17a8c:	andeq	r0, r0, ip, asr #30
   17a90:	andeq	r1, r0, r8, asr #15
   17a94:	push	{r4, r5, r6, r7, r8, lr}
   17a98:	sub	sp, sp, #6080	; 0x17c0
   17a9c:	sub	sp, sp, #32
   17aa0:	add	r6, sp, #24
   17aa4:	add	r2, sp, #12
   17aa8:	mov	r8, r1
   17aac:	mov	r1, r6
   17ab0:	mov	r4, r0
   17ab4:	bl	160f8 <build_ast@@Base+0x4d0>
   17ab8:	add	r5, sp, #8
   17abc:	mov	r7, r0
   17ac0:	mov	r0, r5
   17ac4:	bl	1627c <build_ast@@Base+0x654>
   17ac8:	cmp	r4, #0
   17acc:	beq	17af4 <__gcov_sort_n_vals@@Base+0x3a8>
   17ad0:	mov	r0, r4
   17ad4:	str	r6, [sp]
   17ad8:	mov	r3, r7
   17adc:	mov	r2, r8
   17ae0:	mov	r1, r5
   17ae4:	bl	178e4 <__gcov_sort_n_vals@@Base+0x198>
   17ae8:	ldr	r4, [r4, #4]
   17aec:	cmp	r4, #0
   17af0:	bne	17ad0 <__gcov_sort_n_vals@@Base+0x384>
   17af4:	ldr	r0, [sp, #8]
   17af8:	bl	11880 <free@plt>
   17afc:	add	sp, sp, #6080	; 0x17c0
   17b00:	add	sp, sp, #32
   17b04:	pop	{r4, r5, r6, r7, r8, pc}
   17b08:	ldrb	r1, [r0, #4]
   17b0c:	tst	r1, #1
   17b10:	bxne	lr
   17b14:	push	{r4, lr}
   17b18:	lsr	r1, r1, #1
   17b1c:	mov	r4, r0
   17b20:	and	r1, r1, #1
   17b24:	ldr	r0, [r0]
   17b28:	bl	17a94 <__gcov_sort_n_vals@@Base+0x348>
   17b2c:	ldrb	r3, [r4, #4]
   17b30:	orr	r3, r3, #3
   17b34:	strb	r3, [r4, #4]
   17b38:	pop	{r4, pc}
   17b3c:	push	{r4, r5, r6, lr}
   17b40:	ldr	r4, [pc, #76]	; 17b94 <__gcov_sort_n_vals@@Base+0x448>
   17b44:	ldr	r5, [pc, #76]	; 17b98 <__gcov_sort_n_vals@@Base+0x44c>
   17b48:	add	r4, pc, r4
   17b4c:	mov	r0, r4
   17b50:	bl	17b08 <__gcov_sort_n_vals@@Base+0x3bc>
   17b54:	ldr	r3, [r4, #8]
   17b58:	add	r5, pc, r5
   17b5c:	cmp	r3, #0
   17b60:	ldrne	r2, [r4, #12]
   17b64:	strne	r2, [r3, #12]
   17b68:	ldr	r2, [pc, #44]	; 17b9c <__gcov_sort_n_vals@@Base+0x450>
   17b6c:	add	r2, pc, r2
   17b70:	ldr	r2, [r2, #12]
   17b74:	cmp	r2, #0
   17b78:	beq	17b84 <__gcov_sort_n_vals@@Base+0x438>
   17b7c:	str	r3, [r2, #8]
   17b80:	pop	{r4, r5, r6, pc}
   17b84:	ldr	r2, [pc, #20]	; 17ba0 <__gcov_sort_n_vals@@Base+0x454>
   17b88:	ldr	r2, [r5, r2]
   17b8c:	str	r3, [r2, #4]
   17b90:	pop	{r4, r5, r6, pc}
   17b94:	andeq	r2, r1, r0, lsr #31
   17b98:	andeq	r1, r1, r0, lsr #9
   17b9c:	andeq	r2, r1, ip, ror pc
   17ba0:	andeq	r0, r0, r8, lsr #1
   17ba4:	ldr	r1, [r0]
   17ba8:	push	{r4, r5, r6, lr}
   17bac:	cmp	r1, #0
   17bb0:	ldr	r5, [pc, #168]	; 17c60 <__gcov_sort_n_vals@@Base+0x514>
   17bb4:	add	r5, pc, r5
   17bb8:	popeq	{r4, r5, r6, pc}
   17bbc:	ldr	r3, [r0, #56]	; 0x38
   17bc0:	cmp	r3, #0
   17bc4:	popeq	{r4, r5, r6, pc}
   17bc8:	mov	r4, r0
   17bcc:	mov	r2, #0
   17bd0:	add	r0, r0, #12
   17bd4:	bl	16860 <build_ast@@Base+0xc38>
   17bd8:	cmp	r0, #0
   17bdc:	popeq	{r4, r5, r6, pc}
   17be0:	ldr	r6, [pc, #124]	; 17c64 <__gcov_sort_n_vals@@Base+0x518>
   17be4:	add	r6, pc, r6
   17be8:	ldr	r2, [r6]
   17bec:	cmp	r2, #0
   17bf0:	beq	17c08 <__gcov_sort_n_vals@@Base+0x4bc>
   17bf4:	ldr	r3, [pc, #108]	; 17c68 <__gcov_sort_n_vals@@Base+0x51c>
   17bf8:	str	r2, [r4, #4]
   17bfc:	add	r3, pc, r3
   17c00:	str	r4, [r3]
   17c04:	pop	{r4, r5, r6, pc}
   17c08:	ldr	r3, [pc, #92]	; 17c6c <__gcov_sort_n_vals@@Base+0x520>
   17c0c:	ldr	r2, [pc, #92]	; 17c70 <__gcov_sort_n_vals@@Base+0x524>
   17c10:	mov	r0, #12
   17c14:	ldr	r5, [r5, r3]
   17c18:	add	r2, pc, r2
   17c1c:	ldr	r1, [r5]
   17c20:	bl	16860 <build_ast@@Base+0xc38>
   17c24:	cmp	r0, #0
   17c28:	beq	17c48 <__gcov_sort_n_vals@@Base+0x4fc>
   17c2c:	ldr	r3, [r5, #4]
   17c30:	cmp	r3, #0
   17c34:	str	r3, [r6, #8]
   17c38:	strne	r6, [r3, #12]
   17c3c:	ldr	r3, [pc, #48]	; 17c74 <__gcov_sort_n_vals@@Base+0x528>
   17c40:	add	r3, pc, r3
   17c44:	str	r3, [r5, #4]
   17c48:	ldr	r0, [pc, #40]	; 17c78 <__gcov_sort_n_vals@@Base+0x52c>
   17c4c:	add	r0, pc, r0
   17c50:	bl	17f34 <__libc_csu_fini@@Base+0x4>
   17c54:	ldr	r3, [pc, #32]	; 17c7c <__gcov_sort_n_vals@@Base+0x530>
   17c58:	ldr	r2, [pc, r3]
   17c5c:	b	17bf4 <__gcov_sort_n_vals@@Base+0x4a8>
   17c60:	andeq	r1, r1, r4, asr #8
   17c64:	andeq	r2, r1, r4, lsl #30
   17c68:	andeq	r2, r1, ip, ror #29
   17c6c:	andeq	r0, r0, r8, lsr #1
   17c70:	andeq	r0, r0, ip, ror #27
   17c74:	andeq	r2, r1, r8, lsr #29
   17c78:			; <UNDEFINED> instruction: 0xfffffee8
   17c7c:	muleq	r1, r0, lr
   17c80:	cmp	r3, #0
   17c84:	cmpeq	r2, #0
   17c88:	bne	17cac <__gcov_sort_n_vals@@Base+0x560>
   17c8c:	cmp	r1, #0
   17c90:	movlt	r1, #-2147483648	; 0x80000000
   17c94:	movlt	r0, #0
   17c98:	blt	17ca8 <__gcov_sort_n_vals@@Base+0x55c>
   17c9c:	cmpeq	r0, #0
   17ca0:	mvnne	r1, #-2147483648	; 0x80000000
   17ca4:	mvnne	r0, #0
   17ca8:	b	17d54 <__gcov_sort_n_vals@@Base+0x608>
   17cac:	sub	sp, sp, #8
   17cb0:	push	{sp, lr}
   17cb4:	cmp	r1, #0
   17cb8:	blt	17cd8 <__gcov_sort_n_vals@@Base+0x58c>
   17cbc:	cmp	r3, #0
   17cc0:	blt	17d0c <__gcov_sort_n_vals@@Base+0x5c0>
   17cc4:	bl	17da8 <__gcov_sort_n_vals@@Base+0x65c>
   17cc8:	ldr	lr, [sp, #4]
   17ccc:	add	sp, sp, #8
   17cd0:	pop	{r2, r3}
   17cd4:	bx	lr
   17cd8:	rsbs	r0, r0, #0
   17cdc:	sbc	r1, r1, r1, lsl #1
   17ce0:	cmp	r3, #0
   17ce4:	blt	17d30 <__gcov_sort_n_vals@@Base+0x5e4>
   17ce8:	bl	17da8 <__gcov_sort_n_vals@@Base+0x65c>
   17cec:	ldr	lr, [sp, #4]
   17cf0:	add	sp, sp, #8
   17cf4:	pop	{r2, r3}
   17cf8:	rsbs	r0, r0, #0
   17cfc:	sbc	r1, r1, r1, lsl #1
   17d00:	rsbs	r2, r2, #0
   17d04:	sbc	r3, r3, r3, lsl #1
   17d08:	bx	lr
   17d0c:	rsbs	r2, r2, #0
   17d10:	sbc	r3, r3, r3, lsl #1
   17d14:	bl	17da8 <__gcov_sort_n_vals@@Base+0x65c>
   17d18:	ldr	lr, [sp, #4]
   17d1c:	add	sp, sp, #8
   17d20:	pop	{r2, r3}
   17d24:	rsbs	r0, r0, #0
   17d28:	sbc	r1, r1, r1, lsl #1
   17d2c:	bx	lr
   17d30:	rsbs	r2, r2, #0
   17d34:	sbc	r3, r3, r3, lsl #1
   17d38:	bl	17da8 <__gcov_sort_n_vals@@Base+0x65c>
   17d3c:	ldr	lr, [sp, #4]
   17d40:	add	sp, sp, #8
   17d44:	pop	{r2, r3}
   17d48:	rsbs	r2, r2, #0
   17d4c:	sbc	r3, r3, r3, lsl #1
   17d50:	bx	lr
   17d54:	push	{r1, lr}
   17d58:	mov	r0, #8
   17d5c:	bl	11850 <raise@plt>
   17d60:	pop	{r1, pc}
   17d64:	ldr	r3, [pc, #48]	; 17d9c <__gcov_sort_n_vals@@Base+0x650>
   17d68:	ldr	r2, [pc, #48]	; 17da0 <__gcov_sort_n_vals@@Base+0x654>
   17d6c:	and	r3, r3, r0, lsr #1
   17d70:	sub	r0, r0, r3
   17d74:	and	r3, r0, r2
   17d78:	and	r0, r2, r0, lsr #2
   17d7c:	add	r3, r3, r0
   17d80:	ldr	r0, [pc, #28]	; 17da4 <__gcov_sort_n_vals@@Base+0x658>
   17d84:	add	r3, r3, r3, lsr #4
   17d88:	and	r0, r0, r3
   17d8c:	add	r0, r0, r0, lsl #8
   17d90:	add	r0, r0, r0, lsl #16
   17d94:	lsr	r0, r0, #24
   17d98:	bx	lr
   17d9c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   17da0:	teqcc	r3, #-872415232	; 0xcc000000
   17da4:	svceq	0x000f0f0f
   17da8:	cmp	r1, r3
   17dac:	push	{r4, r5, r6, r7, r8, r9, lr}
   17db0:	cmpeq	r0, r2
   17db4:	mov	r4, r0
   17db8:	mov	r5, r1
   17dbc:	ldr	r9, [sp, #28]
   17dc0:	movcc	r0, #0
   17dc4:	movcc	r1, #0
   17dc8:	bcc	17ec0 <__gcov_sort_n_vals@@Base+0x774>
   17dcc:	cmp	r3, #0
   17dd0:	clzeq	ip, r2
   17dd4:	clzne	ip, r3
   17dd8:	addeq	ip, ip, #32
   17ddc:	cmp	r5, #0
   17de0:	clzeq	r1, r4
   17de4:	addeq	r1, r1, #32
   17de8:	clzne	r1, r5
   17dec:	sub	ip, ip, r1
   17df0:	sub	lr, ip, #32
   17df4:	lsl	r7, r3, ip
   17df8:	rsb	r8, ip, #32
   17dfc:	orr	r7, r7, r2, lsl lr
   17e00:	orr	r7, r7, r2, lsr r8
   17e04:	lsl	r6, r2, ip
   17e08:	cmp	r5, r7
   17e0c:	cmpeq	r4, r6
   17e10:	movcc	r0, #0
   17e14:	movcc	r1, #0
   17e18:	bcc	17e34 <__gcov_sort_n_vals@@Base+0x6e8>
   17e1c:	mov	r3, #1
   17e20:	subs	r4, r4, r6
   17e24:	lsl	r1, r3, lr
   17e28:	lsl	r0, r3, ip
   17e2c:	orr	r1, r1, r3, lsr r8
   17e30:	sbc	r5, r5, r7
   17e34:	cmp	ip, #0
   17e38:	beq	17ec0 <__gcov_sort_n_vals@@Base+0x774>
   17e3c:	lsrs	r3, r7, #1
   17e40:	rrx	r2, r6
   17e44:	mov	r6, ip
   17e48:	b	17e6c <__gcov_sort_n_vals@@Base+0x720>
   17e4c:	subs	r4, r4, r2
   17e50:	sbc	r5, r5, r3
   17e54:	adds	r4, r4, r4
   17e58:	adc	r5, r5, r5
   17e5c:	adds	r4, r4, #1
   17e60:	adc	r5, r5, #0
   17e64:	subs	r6, r6, #1
   17e68:	beq	17e88 <__gcov_sort_n_vals@@Base+0x73c>
   17e6c:	cmp	r5, r3
   17e70:	cmpeq	r4, r2
   17e74:	bcs	17e4c <__gcov_sort_n_vals@@Base+0x700>
   17e78:	adds	r4, r4, r4
   17e7c:	adc	r5, r5, r5
   17e80:	subs	r6, r6, #1
   17e84:	bne	17e6c <__gcov_sort_n_vals@@Base+0x720>
   17e88:	lsr	r6, r4, ip
   17e8c:	lsr	r7, r5, ip
   17e90:	orr	r6, r6, r5, lsl r8
   17e94:	adds	r2, r0, r4
   17e98:	orr	r6, r6, r5, lsr lr
   17e9c:	adc	r3, r1, r5
   17ea0:	lsl	r1, r7, ip
   17ea4:	orr	r1, r1, r6, lsl lr
   17ea8:	lsl	r0, r6, ip
   17eac:	orr	r1, r1, r6, lsr r8
   17eb0:	subs	r0, r2, r0
   17eb4:	mov	r4, r6
   17eb8:	mov	r5, r7
   17ebc:	sbc	r1, r3, r1
   17ec0:	cmp	r9, #0
   17ec4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17ec8:	strd	r4, [r9]
   17ecc:	pop	{r4, r5, r6, r7, r8, r9, pc}

00017ed0 <__libc_csu_init@@Base>:
   17ed0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ed4:	mov	r7, r0
   17ed8:	ldr	r6, [pc, #72]	; 17f28 <__libc_csu_init@@Base+0x58>
   17edc:	ldr	r5, [pc, #72]	; 17f2c <__libc_csu_init@@Base+0x5c>
   17ee0:	add	r6, pc, r6
   17ee4:	add	r5, pc, r5
   17ee8:	sub	r6, r6, r5
   17eec:	mov	r8, r1
   17ef0:	mov	r9, r2
   17ef4:	bl	11824 <fdopen@plt-0x20>
   17ef8:	asrs	r6, r6, #2
   17efc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f00:	mov	r4, #0
   17f04:	add	r4, r4, #1
   17f08:	ldr	r3, [r5], #4
   17f0c:	mov	r2, r9
   17f10:	mov	r1, r8
   17f14:	mov	r0, r7
   17f18:	blx	r3
   17f1c:	cmp	r6, r4
   17f20:	bne	17f04 <__libc_csu_init@@Base+0x34>
   17f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f28:	andeq	r1, r1, r8, lsr #32
   17f2c:	andeq	r1, r1, r0, lsl r0

00017f30 <__libc_csu_fini@@Base>:
   17f30:	bx	lr
   17f34:	ldr	r3, [pc, #12]	; 17f48 <__libc_csu_fini@@Base+0x18>
   17f38:	mov	r1, #0
   17f3c:	add	r3, pc, r3
   17f40:	ldr	r2, [r3]
   17f44:	b	11958 <__cxa_atexit@plt>
   17f48:	andeq	r1, r1, r0, ror r1
   17f4c:	mov	r2, r1
   17f50:	mov	r1, r0
   17f54:	mov	r0, #3
   17f58:	b	118f8 <__fxstat@plt>

Disassembly of section .fini:

00017f5c <.fini>:
   17f5c:	push	{r3, lr}
   17f60:	pop	{r3, pc}
