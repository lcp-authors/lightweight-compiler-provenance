
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010eb4 <.init>:
   10eb4:	push	{r3, lr}
   10eb8:	bl	1188c <__assert_fail@plt+0x6b8>
   10ebc:	pop	{r3, pc}

Disassembly of section .plt:

00010ec0 <calloc@plt-0x14>:
   10ec0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ec4:	ldr	lr, [pc, #4]	; 10ed0 <calloc@plt-0x4>
   10ec8:	add	lr, pc, lr
   10ecc:	ldr	pc, [lr, #8]!
   10ed0:	andeq	r5, r1, r0, lsr r1

00010ed4 <calloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #304]!	; 0x130

00010ee0 <endgrent@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #296]!	; 0x128

00010eec <fputs_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #288]!	; 0x120

00010ef8 <raise@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #280]!	; 0x118

00010f04 <getpwnam@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #272]!	; 0x110

00010f10 <strcmp@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #264]!	; 0x108

00010f1c <getpwuid@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #256]!	; 0x100

00010f28 <fflush@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #248]!	; 0xf8

00010f34 <free@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #240]!	; 0xf0

00010f40 <_exit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #232]!	; 0xe8

00010f4c <memcpy@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #224]!	; 0xe0

00010f58 <execvp@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #216]!	; 0xd8

00010f64 <mbsinit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #208]!	; 0xd0

00010f70 <memcmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #200]!	; 0xc8

00010f7c <fputc_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #192]!	; 0xc0

00010f88 <dcgettext@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #184]!	; 0xb8

00010f94 <realloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #176]!	; 0xb0

00010fa0 <textdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #168]!	; 0xa8

00010fac <chdir@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #160]!	; 0xa0

00010fb8 <iswprint@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #152]!	; 0x98

00010fc4 <setgroups@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #144]!	; 0x90

00010fd0 <lseek64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #136]!	; 0x88

00010fdc <__ctype_get_mb_cur_max@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #128]!	; 0x80

00010fe8 <chroot@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #120]!	; 0x78

00010ff4 <__fpending@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #112]!	; 0x70

00011000 <ferror_unlocked@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #104]!	; 0x68

0001100c <mbrtowc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #96]!	; 0x60

00011018 <error@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #88]!	; 0x58

00011024 <getenv@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #80]!	; 0x50

00011030 <setgid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #72]!	; 0x48

0001103c <malloc@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #64]!	; 0x40

00011048 <__libc_start_main@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #56]!	; 0x38

00011054 <__freading@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #48]!	; 0x30

00011060 <__gmon_start__@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #40]!	; 0x28

0001106c <getopt_long@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #32]!

00011078 <__ctype_b_loc@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #24]!

00011084 <exit@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #16]!

00011090 <strtoul@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #8]!

0001109c <strlen@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #0]!

000110a8 <strchr@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #4088]!	; 0xff8

000110b4 <__errno_location@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #4080]!	; 0xff0

000110c0 <__cxa_atexit@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110cc <getgrouplist@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d8 <memset@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110e4 <__printf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4048]!	; 0xfd0

000110f0 <fileno@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110fc <strtoumax@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4032]!	; 0xfc0

00011108 <__fprintf_chk@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #4024]!	; 0xfb8

00011114 <fclose@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011120 <fseeko64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #4008]!	; 0xfa8

0001112c <strtok@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #4000]!	; 0xfa0

00011138 <setlocale@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #3992]!	; 0xf98

00011144 <endpwent@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3984]!	; 0xf90

00011150 <strrchr@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3976]!	; 0xf88

0001115c <nl_langinfo@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3968]!	; 0xf80

00011168 <setuid@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3960]!	; 0xf78

00011174 <getgroups@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3952]!	; 0xf70

00011180 <canonicalize_file_name@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #20, 20	; 0x14000
   11188:	ldr	pc, [ip, #3944]!	; 0xf68

0001118c <bindtextdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #20, 20	; 0x14000
   11194:	ldr	pc, [ip, #3936]!	; 0xf60

00011198 <fputs@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #20, 20	; 0x14000
   111a0:	ldr	pc, [ip, #3928]!	; 0xf58

000111a4 <strncmp@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #20, 20	; 0x14000
   111ac:	ldr	pc, [ip, #3920]!	; 0xf50

000111b0 <abort@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #20, 20	; 0x14000
   111b8:	ldr	pc, [ip, #3912]!	; 0xf48

000111bc <getgrgid@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #20, 20	; 0x14000
   111c4:	ldr	pc, [ip, #3904]!	; 0xf40

000111c8 <getgrnam@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #20, 20	; 0x14000
   111d0:	ldr	pc, [ip, #3896]!	; 0xf38

000111d4 <__assert_fail@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #20, 20	; 0x14000
   111dc:	ldr	pc, [ip, #3888]!	; 0xf30

Disassembly of section .text:

000111e0 <.text>:
   111e0:	push	{r4, lr}
   111e4:	bl	110b4 <__errno_location@plt>
   111e8:	mov	r3, #12
   111ec:	str	r3, [r0]
   111f0:	mov	r0, #0
   111f4:	pop	{r4, pc}
   111f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111fc:	mvn	r3, #0
   11200:	sub	sp, sp, #44	; 0x2c
   11204:	mov	r6, #0
   11208:	mov	r9, r0
   1120c:	mov	r4, r1
   11210:	mov	r5, r6
   11214:	ldr	r0, [r1]
   11218:	mov	r7, r6
   1121c:	str	r3, [sp, #20]
   11220:	str	r3, [sp, #24]
   11224:	str	r6, [sp, #28]
   11228:	str	r6, [sp, #32]
   1122c:	bl	11f24 <__assert_fail@plt+0xd50>
   11230:	ldr	r1, [pc, #1444]	; 117dc <__assert_fail@plt+0x608>
   11234:	mov	r0, #6
   11238:	bl	11138 <setlocale@plt>
   1123c:	ldr	r1, [pc, #1436]	; 117e0 <__assert_fail@plt+0x60c>
   11240:	ldr	r0, [pc, #1436]	; 117e4 <__assert_fail@plt+0x610>
   11244:	bl	1118c <bindtextdomain@plt>
   11248:	ldr	r0, [pc, #1428]	; 117e4 <__assert_fail@plt+0x610>
   1124c:	bl	10fa0 <textdomain@plt>
   11250:	ldr	r3, [pc, #1424]	; 117e8 <__assert_fail@plt+0x614>
   11254:	mov	r2, #125	; 0x7d
   11258:	ldr	r0, [pc, #1420]	; 117ec <__assert_fail@plt+0x618>
   1125c:	ldr	fp, [pc, #1420]	; 117f0 <__assert_fail@plt+0x61c>
   11260:	str	r2, [r3]
   11264:	ldr	sl, [pc, #1416]	; 117f4 <__assert_fail@plt+0x620>
   11268:	bl	15100 <__assert_fail@plt+0x3f2c>
   1126c:	mov	r8, #0
   11270:	mov	r3, fp
   11274:	ldr	r2, [pc, #1404]	; 117f8 <__assert_fail@plt+0x624>
   11278:	mov	r1, r4
   1127c:	mov	r0, r9
   11280:	str	r8, [sp]
   11284:	bl	1106c <getopt_long@plt>
   11288:	cmn	r0, #1
   1128c:	bne	112c4 <__assert_fail@plt+0xf0>
   11290:	ldr	sl, [pc, #1380]	; 117fc <__assert_fail@plt+0x628>
   11294:	ldr	r3, [sl]
   11298:	cmp	r3, r9
   1129c:	blt	11368 <__assert_fail@plt+0x194>
   112a0:	mov	r2, #5
   112a4:	ldr	r1, [pc, #1364]	; 11800 <__assert_fail@plt+0x62c>
   112a8:	mov	r0, r8
   112ac:	bl	10f88 <dcgettext@plt>
   112b0:	mov	r2, r0
   112b4:	mov	r1, r8
   112b8:	mov	r0, r8
   112bc:	bl	11018 <error@plt>
   112c0:	b	112e4 <__assert_fail@plt+0x110>
   112c4:	cmp	r0, #256	; 0x100
   112c8:	beq	11334 <__assert_fail@plt+0x160>
   112cc:	bgt	112ec <__assert_fail@plt+0x118>
   112d0:	cmn	r0, #3
   112d4:	beq	1133c <__assert_fail@plt+0x168>
   112d8:	cmn	r0, #2
   112dc:	moveq	r0, r8
   112e0:	beq	112e8 <__assert_fail@plt+0x114>
   112e4:	mov	r0, #125	; 0x7d
   112e8:	bl	11b30 <__assert_fail@plt+0x95c>
   112ec:	movw	r3, #257	; 0x101
   112f0:	cmp	r0, r3
   112f4:	beq	1130c <__assert_fail@plt+0x138>
   112f8:	movw	r3, #258	; 0x102
   112fc:	cmp	r0, r3
   11300:	bne	112e4 <__assert_fail@plt+0x110>
   11304:	mov	r6, #1
   11308:	b	1126c <__assert_fail@plt+0x98>
   1130c:	ldr	r7, [sl]
   11310:	mov	r0, r7
   11314:	bl	1109c <strlen@plt>
   11318:	cmp	r0, #0
   1131c:	beq	1126c <__assert_fail@plt+0x98>
   11320:	sub	r0, r0, #1
   11324:	ldrb	r3, [r7, r0]
   11328:	cmp	r3, #58	; 0x3a
   1132c:	strbeq	r8, [r7, r0]
   11330:	b	1126c <__assert_fail@plt+0x98>
   11334:	ldr	r5, [sl]
   11338:	b	1126c <__assert_fail@plt+0x98>
   1133c:	ldr	r3, [pc, #1216]	; 11804 <__assert_fail@plt+0x630>
   11340:	ldr	r0, [pc, #1216]	; 11808 <__assert_fail@plt+0x634>
   11344:	ldr	r2, [pc, #1216]	; 1180c <__assert_fail@plt+0x638>
   11348:	stm	sp, {r3, r8}
   1134c:	ldr	r3, [pc, #1212]	; 11810 <__assert_fail@plt+0x63c>
   11350:	ldr	r1, [pc, #1212]	; 11814 <__assert_fail@plt+0x640>
   11354:	ldr	r0, [r0]
   11358:	ldr	r3, [r3]
   1135c:	bl	13cac <__assert_fail@plt+0x2ad8>
   11360:	mov	r0, r8
   11364:	bl	11084 <exit@plt>
   11368:	ldr	fp, [r4, r3, lsl #2]
   1136c:	mov	r0, fp
   11370:	bl	11180 <canonicalize_file_name@plt>
   11374:	subs	r3, r0, #0
   11378:	moveq	r8, r3
   1137c:	beq	1139c <__assert_fail@plt+0x1c8>
   11380:	mov	r1, r3
   11384:	ldr	r0, [pc, #1164]	; 11818 <__assert_fail@plt+0x644>
   11388:	str	r3, [sp, #12]
   1138c:	bl	10f10 <strcmp@plt>
   11390:	ldr	r3, [sp, #12]
   11394:	clz	r8, r0
   11398:	lsr	r8, r8, #5
   1139c:	mov	r0, r3
   113a0:	bl	11ed4 <__assert_fail@plt+0xd00>
   113a4:	eor	r3, r8, #1
   113a8:	tst	r6, r3
   113ac:	beq	113e8 <__assert_fail@plt+0x214>
   113b0:	mov	r2, #5
   113b4:	ldr	r1, [pc, #1120]	; 1181c <__assert_fail@plt+0x648>
   113b8:	mov	r0, #0
   113bc:	bl	10f88 <dcgettext@plt>
   113c0:	mov	r4, r0
   113c4:	ldr	r1, [pc, #1100]	; 11818 <__assert_fail@plt+0x644>
   113c8:	mov	r0, #4
   113cc:	bl	13340 <__assert_fail@plt+0x216c>
   113d0:	mov	r1, #0
   113d4:	mov	r3, r0
   113d8:	mov	r2, r4
   113dc:	mov	r0, r1
   113e0:	bl	11018 <error@plt>
   113e4:	b	112e4 <__assert_fail@plt+0x110>
   113e8:	cmp	r8, #0
   113ec:	beq	1143c <__assert_fail@plt+0x268>
   113f0:	mov	r8, #0
   113f4:	mov	r0, fp
   113f8:	bl	10fe8 <chroot@plt>
   113fc:	cmp	r0, #0
   11400:	beq	11500 <__assert_fail@plt+0x32c>
   11404:	bl	110b4 <__errno_location@plt>
   11408:	mov	r2, #5
   1140c:	ldr	r1, [pc, #1036]	; 11820 <__assert_fail@plt+0x64c>
   11410:	ldr	r4, [r0]
   11414:	mov	r0, #0
   11418:	bl	10f88 <dcgettext@plt>
   1141c:	mov	r5, r0
   11420:	mov	r1, fp
   11424:	mov	r0, #4
   11428:	bl	13340 <__assert_fail@plt+0x216c>
   1142c:	mov	r3, r0
   11430:	mov	r2, r5
   11434:	mov	r1, r4
   11438:	b	115c0 <__assert_fail@plt+0x3ec>
   1143c:	cmp	r7, #0
   11440:	beq	1145c <__assert_fail@plt+0x288>
   11444:	mov	r3, r8
   11448:	add	r2, sp, #24
   1144c:	str	r8, [sp]
   11450:	add	r1, sp, #20
   11454:	mov	r0, r7
   11458:	bl	137c4 <__assert_fail@plt+0x25f0>
   1145c:	ldr	r0, [sp, #20]
   11460:	cmn	r0, #1
   11464:	bne	114a0 <__assert_fail@plt+0x2cc>
   11468:	mov	r8, #0
   1146c:	cmp	r5, #0
   11470:	bne	114dc <__assert_fail@plt+0x308>
   11474:	ldr	r1, [sp, #24]
   11478:	cmn	r1, #1
   1147c:	beq	113f4 <__assert_fail@plt+0x220>
   11480:	cmp	r8, #0
   11484:	beq	113f0 <__assert_fail@plt+0x21c>
   11488:	add	r2, sp, #28
   1148c:	mov	r0, r8
   11490:	bl	1406c <__assert_fail@plt+0x2e98>
   11494:	cmp	r0, #0
   11498:	strgt	r0, [sp, #32]
   1149c:	b	113f4 <__assert_fail@plt+0x220>
   114a0:	cmp	r5, #0
   114a4:	beq	114b8 <__assert_fail@plt+0x2e4>
   114a8:	ldr	r3, [sp, #24]
   114ac:	cmn	r3, #1
   114b0:	movne	r8, #0
   114b4:	bne	114dc <__assert_fail@plt+0x308>
   114b8:	bl	10f1c <getpwuid@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	11468 <__assert_fail@plt+0x294>
   114c4:	ldr	r3, [sp, #24]
   114c8:	ldr	r8, [r0]
   114cc:	cmn	r3, #1
   114d0:	ldreq	r3, [r0, #12]
   114d4:	streq	r3, [sp, #24]
   114d8:	b	1146c <__assert_fail@plt+0x298>
   114dc:	ldrb	r3, [r5]
   114e0:	cmp	r3, #0
   114e4:	beq	113f4 <__assert_fail@plt+0x220>
   114e8:	mov	r3, #0
   114ec:	add	r2, sp, #32
   114f0:	add	r1, sp, #28
   114f4:	mov	r0, r5
   114f8:	bl	11940 <__assert_fail@plt+0x76c>
   114fc:	b	113f4 <__assert_fail@plt+0x220>
   11500:	cmp	r6, #0
   11504:	bne	11540 <__assert_fail@plt+0x36c>
   11508:	ldr	r0, [pc, #776]	; 11818 <__assert_fail@plt+0x644>
   1150c:	bl	10fac <chdir@plt>
   11510:	cmp	r0, #0
   11514:	beq	11540 <__assert_fail@plt+0x36c>
   11518:	bl	110b4 <__errno_location@plt>
   1151c:	ldr	r1, [pc, #768]	; 11824 <__assert_fail@plt+0x650>
   11520:	mov	r2, #5
   11524:	ldr	r4, [r0]
   11528:	mov	r0, #0
   1152c:	bl	10f88 <dcgettext@plt>
   11530:	mov	r2, r0
   11534:	mov	r1, r4
   11538:	mov	r0, #125	; 0x7d
   1153c:	bl	11018 <error@plt>
   11540:	ldr	r3, [sl]
   11544:	add	r3, r3, #1
   11548:	cmp	r3, r9
   1154c:	addne	r4, r4, r3, lsl #2
   11550:	bne	11578 <__assert_fail@plt+0x3a4>
   11554:	ldr	r0, [pc, #716]	; 11828 <__assert_fail@plt+0x654>
   11558:	bl	11024 <getenv@plt>
   1155c:	ldr	r3, [pc, #712]	; 1182c <__assert_fail@plt+0x658>
   11560:	cmp	r0, #0
   11564:	moveq	r0, r3
   11568:	ldr	r3, [pc, #704]	; 11830 <__assert_fail@plt+0x65c>
   1156c:	stm	r4, {r0, r3}
   11570:	mov	r3, #0
   11574:	str	r3, [r4, #8]
   11578:	cmp	r7, #0
   1157c:	beq	115c8 <__assert_fail@plt+0x3f4>
   11580:	mov	r3, #0
   11584:	add	r2, sp, #24
   11588:	add	r1, sp, #20
   1158c:	mov	r0, r7
   11590:	str	r3, [sp]
   11594:	bl	137c4 <__assert_fail@plt+0x25f0>
   11598:	subs	r6, r0, #0
   1159c:	beq	115c8 <__assert_fail@plt+0x3f4>
   115a0:	ldrd	r2, [sp, #20]
   115a4:	and	r2, r2, r3
   115a8:	cmn	r2, #1
   115ac:	bne	115c8 <__assert_fail@plt+0x3f4>
   115b0:	bl	110b4 <__errno_location@plt>
   115b4:	ldr	r2, [pc, #632]	; 11834 <__assert_fail@plt+0x660>
   115b8:	mov	r3, r6
   115bc:	ldr	r1, [r0]
   115c0:	mov	r0, #125	; 0x7d
   115c4:	bl	11018 <error@plt>
   115c8:	ldr	r0, [sp, #20]
   115cc:	cmn	r0, #1
   115d0:	beq	11608 <__assert_fail@plt+0x434>
   115d4:	cmp	r5, #0
   115d8:	beq	115e8 <__assert_fail@plt+0x414>
   115dc:	ldr	r3, [sp, #24]
   115e0:	cmn	r3, #1
   115e4:	bne	11608 <__assert_fail@plt+0x434>
   115e8:	bl	10f1c <getpwuid@plt>
   115ec:	subs	r6, r0, #0
   115f0:	ldr	r3, [sp, #24]
   115f4:	beq	11660 <__assert_fail@plt+0x48c>
   115f8:	cmn	r3, #1
   115fc:	ldr	r8, [r6]
   11600:	ldreq	r3, [r6, #12]
   11604:	streq	r3, [sp, #24]
   11608:	mov	r3, #0
   1160c:	ldr	r7, [sp, #28]
   11610:	cmp	r5, r3
   11614:	str	r3, [sp, #36]	; 0x24
   11618:	beq	1168c <__assert_fail@plt+0x4b8>
   1161c:	ldrb	r3, [r5]
   11620:	cmp	r3, #0
   11624:	beq	116d8 <__assert_fail@plt+0x504>
   11628:	ldr	r3, [sp, #32]
   1162c:	add	r2, sp, #32
   11630:	add	r1, sp, #36	; 0x24
   11634:	mov	r0, r5
   11638:	clz	r3, r3
   1163c:	lsr	r3, r3, #5
   11640:	bl	11940 <__assert_fail@plt+0x76c>
   11644:	cmp	r0, #0
   11648:	beq	116d4 <__assert_fail@plt+0x500>
   1164c:	ldr	r3, [sp, #32]
   11650:	cmp	r3, #0
   11654:	bne	116d8 <__assert_fail@plt+0x504>
   11658:	mov	r5, #125	; 0x7d
   1165c:	b	117d0 <__assert_fail@plt+0x5fc>
   11660:	cmn	r3, #1
   11664:	bne	11608 <__assert_fail@plt+0x434>
   11668:	bl	110b4 <__errno_location@plt>
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #448]	; 11838 <__assert_fail@plt+0x664>
   11674:	ldr	r4, [r0]
   11678:	mov	r0, r6
   1167c:	bl	10f88 <dcgettext@plt>
   11680:	mov	r2, r0
   11684:	ldr	r3, [sp, #20]
   11688:	b	11434 <__assert_fail@plt+0x260>
   1168c:	ldr	r1, [sp, #24]
   11690:	cmp	r8, #0
   11694:	cmnne	r1, #1
   11698:	beq	116d8 <__assert_fail@plt+0x504>
   1169c:	add	r2, sp, #36	; 0x24
   116a0:	mov	r0, r8
   116a4:	bl	1406c <__assert_fail@plt+0x2e98>
   116a8:	cmp	r0, #0
   116ac:	strgt	r0, [sp, #32]
   116b0:	bgt	116d4 <__assert_fail@plt+0x500>
   116b4:	ldr	r3, [sp, #32]
   116b8:	cmp	r3, #0
   116bc:	bne	116d8 <__assert_fail@plt+0x504>
   116c0:	bl	110b4 <__errno_location@plt>
   116c4:	mov	r2, #5
   116c8:	ldr	r1, [pc, #364]	; 1183c <__assert_fail@plt+0x668>
   116cc:	ldr	r4, [r0]
   116d0:	b	11528 <__assert_fail@plt+0x354>
   116d4:	ldr	r7, [sp, #36]	; 0x24
   116d8:	ldr	r3, [sp, #20]
   116dc:	adds	r3, r3, #1
   116e0:	movne	r3, #1
   116e4:	cmp	r5, #0
   116e8:	moveq	r5, r3
   116ec:	movne	r5, #1
   116f0:	bl	110b4 <__errno_location@plt>
   116f4:	cmp	r5, #0
   116f8:	mov	r6, r0
   116fc:	beq	11724 <__assert_fail@plt+0x550>
   11700:	mov	r1, r7
   11704:	ldr	r0, [sp, #32]
   11708:	bl	10fc4 <setgroups@plt>
   1170c:	cmp	r0, #0
   11710:	beq	11724 <__assert_fail@plt+0x550>
   11714:	mov	r2, #5
   11718:	ldr	r1, [pc, #288]	; 11840 <__assert_fail@plt+0x66c>
   1171c:	ldr	r4, [r6]
   11720:	b	11528 <__assert_fail@plt+0x354>
   11724:	ldr	r0, [sp, #36]	; 0x24
   11728:	bl	11ed4 <__assert_fail@plt+0xd00>
   1172c:	ldr	r0, [sp, #28]
   11730:	bl	11ed4 <__assert_fail@plt+0xd00>
   11734:	ldr	r0, [sp, #24]
   11738:	cmn	r0, #1
   1173c:	beq	1175c <__assert_fail@plt+0x588>
   11740:	bl	11030 <setgid@plt>
   11744:	cmp	r0, #0
   11748:	beq	1175c <__assert_fail@plt+0x588>
   1174c:	mov	r2, #5
   11750:	ldr	r1, [pc, #236]	; 11844 <__assert_fail@plt+0x670>
   11754:	ldr	r4, [r6]
   11758:	b	11528 <__assert_fail@plt+0x354>
   1175c:	ldr	r0, [sp, #20]
   11760:	cmn	r0, #1
   11764:	beq	11784 <__assert_fail@plt+0x5b0>
   11768:	bl	11168 <setuid@plt>
   1176c:	cmp	r0, #0
   11770:	beq	11784 <__assert_fail@plt+0x5b0>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #200]	; 11848 <__assert_fail@plt+0x674>
   1177c:	ldr	r4, [r6]
   11780:	b	11528 <__assert_fail@plt+0x354>
   11784:	mov	r1, r4
   11788:	ldr	r0, [r4]
   1178c:	bl	10f58 <execvp@plt>
   11790:	ldr	r6, [r6]
   11794:	mov	r2, #5
   11798:	mov	r0, #0
   1179c:	ldr	r1, [pc, #168]	; 1184c <__assert_fail@plt+0x678>
   117a0:	cmp	r6, #2
   117a4:	moveq	r5, #127	; 0x7f
   117a8:	movne	r5, #126	; 0x7e
   117ac:	bl	10f88 <dcgettext@plt>
   117b0:	mov	r7, r0
   117b4:	ldr	r0, [r4]
   117b8:	bl	13524 <__assert_fail@plt+0x2350>
   117bc:	mov	r3, r0
   117c0:	mov	r2, r7
   117c4:	mov	r1, r6
   117c8:	mov	r0, #0
   117cc:	bl	11018 <error@plt>
   117d0:	mov	r0, r5
   117d4:	add	sp, sp, #44	; 0x2c
   117d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117dc:	andeq	r5, r1, r4, lsl #5
   117e0:	strdeq	r5, [r1], -r2
   117e4:	andeq	r5, r1, r7, asr #8
   117e8:	andeq	r6, r2, r0, lsr #2
   117ec:	andeq	r1, r1, r0, lsl #28
   117f0:	andeq	r5, r1, ip, asr r1
   117f4:	andeq	r6, r2, r0, lsl #3
   117f8:	andeq	r5, r1, r9, lsl r5
   117fc:	andeq	r6, r2, r0, ror r1
   11800:	andeq	r5, r1, fp, lsl r5
   11804:	andeq	r5, r1, sl, lsl #10
   11808:	andeq	r6, r2, ip, ror r1
   1180c:	andeq	r5, r1, r3, asr #8
   11810:	andeq	r6, r2, ip, lsl r1
   11814:	andeq	r5, r1, r5, ror #3
   11818:	andeq	r5, r1, r4, lsl #22
   1181c:	andeq	r5, r1, fp, lsr #10
   11820:	andeq	r5, r1, r3, ror #10
   11824:	andeq	r5, r1, r6, lsl #11
   11828:	andeq	r5, r1, r5, lsr #11
   1182c:	andeq	r5, r1, sl, ror #9
   11830:	andeq	r5, r1, fp, lsr #11
   11834:	strdeq	r5, [r1], -lr
   11838:	andeq	r5, r1, lr, lsr #11
   1183c:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   11840:	strdeq	r5, [r1], -r7
   11844:	andeq	r5, r1, r9, lsl r6
   11848:	andeq	r5, r1, r0, lsr r6
   1184c:	andeq	r5, r1, r6, asr #12
   11850:	mov	fp, #0
   11854:	mov	lr, #0
   11858:	pop	{r1}		; (ldr r1, [sp], #4)
   1185c:	mov	r2, sp
   11860:	push	{r2}		; (str r2, [sp, #-4]!)
   11864:	push	{r0}		; (str r0, [sp, #-4]!)
   11868:	ldr	ip, [pc, #16]	; 11880 <__assert_fail@plt+0x6ac>
   1186c:	push	{ip}		; (str ip, [sp, #-4]!)
   11870:	ldr	r0, [pc, #12]	; 11884 <__assert_fail@plt+0x6b0>
   11874:	ldr	r3, [pc, #12]	; 11888 <__assert_fail@plt+0x6b4>
   11878:	bl	11048 <__libc_start_main@plt>
   1187c:	bl	111b0 <abort@plt>
   11880:	strdeq	r5, [r1], -ip
   11884:	strdeq	r1, [r1], -r8
   11888:	muleq	r1, ip, r0
   1188c:	ldr	r3, [pc, #20]	; 118a8 <__assert_fail@plt+0x6d4>
   11890:	ldr	r2, [pc, #20]	; 118ac <__assert_fail@plt+0x6d8>
   11894:	add	r3, pc, r3
   11898:	ldr	r2, [r3, r2]
   1189c:	cmp	r2, #0
   118a0:	bxeq	lr
   118a4:	b	11060 <__gmon_start__@plt>
   118a8:	andeq	r4, r1, r4, ror #14
   118ac:	andeq	r0, r0, r0, lsl r1
   118b0:	ldr	r0, [pc, #24]	; 118d0 <__assert_fail@plt+0x6fc>
   118b4:	ldr	r3, [pc, #24]	; 118d4 <__assert_fail@plt+0x700>
   118b8:	cmp	r3, r0
   118bc:	bxeq	lr
   118c0:	ldr	r3, [pc, #16]	; 118d8 <__assert_fail@plt+0x704>
   118c4:	cmp	r3, #0
   118c8:	bxeq	lr
   118cc:	bx	r3
   118d0:	andeq	r6, r2, r4, ror #2
   118d4:	andeq	r6, r2, r4, ror #2
   118d8:	andeq	r0, r0, r0
   118dc:	ldr	r0, [pc, #36]	; 11908 <__assert_fail@plt+0x734>
   118e0:	ldr	r1, [pc, #36]	; 1190c <__assert_fail@plt+0x738>
   118e4:	sub	r1, r1, r0
   118e8:	asr	r1, r1, #2
   118ec:	add	r1, r1, r1, lsr #31
   118f0:	asrs	r1, r1, #1
   118f4:	bxeq	lr
   118f8:	ldr	r3, [pc, #16]	; 11910 <__assert_fail@plt+0x73c>
   118fc:	cmp	r3, #0
   11900:	bxeq	lr
   11904:	bx	r3
   11908:	andeq	r6, r2, r4, ror #2
   1190c:	andeq	r6, r2, r4, ror #2
   11910:	andeq	r0, r0, r0
   11914:	push	{r4, lr}
   11918:	ldr	r4, [pc, #24]	; 11938 <__assert_fail@plt+0x764>
   1191c:	ldrb	r3, [r4]
   11920:	cmp	r3, #0
   11924:	popne	{r4, pc}
   11928:	bl	118b0 <__assert_fail@plt+0x6dc>
   1192c:	mov	r3, #1
   11930:	strb	r3, [r4]
   11934:	pop	{r4, pc}
   11938:	andeq	r6, r2, r4, lsl #3
   1193c:	b	118dc <__assert_fail@plt+0x708>
   11940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11944:	mov	r4, #0
   11948:	sub	sp, sp, #44	; 0x2c
   1194c:	mov	r9, r1
   11950:	mov	sl, r3
   11954:	mov	fp, r0
   11958:	mov	r7, r4
   1195c:	str	r2, [sp, #16]
   11960:	mov	r6, r4
   11964:	str	r4, [sp, #28]
   11968:	bl	14010 <__assert_fail@plt+0x2e3c>
   1196c:	ldr	r1, [pc, #428]	; 11b20 <__assert_fail@plt+0x94c>
   11970:	str	r0, [sp, #12]
   11974:	bl	1112c <strtok@plt>
   11978:	mov	r5, r0
   1197c:	cmp	r5, #0
   11980:	bne	119d0 <__assert_fail@plt+0x7fc>
   11984:	orrs	r3, r7, r4
   11988:	bne	11a9c <__assert_fail@plt+0x8c8>
   1198c:	cmp	sl, #0
   11990:	beq	119c4 <__assert_fail@plt+0x7f0>
   11994:	mov	r2, #5
   11998:	ldr	r1, [pc, #388]	; 11b24 <__assert_fail@plt+0x950>
   1199c:	mov	r0, r5
   119a0:	bl	10f88 <dcgettext@plt>
   119a4:	mov	r4, r0
   119a8:	mov	r0, fp
   119ac:	bl	13524 <__assert_fail@plt+0x2350>
   119b0:	mov	r3, r0
   119b4:	mov	r2, r4
   119b8:	mov	r1, r5
   119bc:	mov	r0, r5
   119c0:	bl	11018 <error@plt>
   119c4:	str	r6, [r9]
   119c8:	mvn	r4, #0
   119cc:	b	11ab0 <__assert_fail@plt+0x8dc>
   119d0:	ldr	r3, [pc, #336]	; 11b28 <__assert_fail@plt+0x954>
   119d4:	mov	r2, #10
   119d8:	mov	r1, #0
   119dc:	mov	r0, r5
   119e0:	str	r3, [sp]
   119e4:	add	r3, sp, #32
   119e8:	bl	144e0 <__assert_fail@plt+0x330c>
   119ec:	cmp	r0, #0
   119f0:	bne	11a78 <__assert_fail@plt+0x8a4>
   119f4:	ldrd	r2, [sp, #32]
   119f8:	mov	r1, #0
   119fc:	mvn	r0, #0
   11a00:	cmp	r3, r1
   11a04:	cmpeq	r2, r0
   11a08:	bhi	11a78 <__assert_fail@plt+0x8a4>
   11a0c:	bl	11078 <__ctype_b_loc@plt>
   11a10:	ldr	r1, [r0]
   11a14:	mov	r0, r5
   11a18:	ldrb	r3, [r5], #1
   11a1c:	lsl	r2, r3, #1
   11a20:	ldrh	r2, [r1, r2]
   11a24:	ands	r8, r2, #8192	; 0x2000
   11a28:	bne	11a14 <__assert_fail@plt+0x840>
   11a2c:	cmp	r3, #43	; 0x2b
   11a30:	beq	11a48 <__assert_fail@plt+0x874>
   11a34:	bl	111c8 <getgrnam@plt>
   11a38:	cmp	r0, #0
   11a3c:	ldrne	r3, [r0, #8]
   11a40:	strne	r8, [sp, #36]	; 0x24
   11a44:	strne	r3, [sp, #32]
   11a48:	ldr	r3, [sp, #28]
   11a4c:	cmp	r3, r7
   11a50:	bne	11a68 <__assert_fail@plt+0x894>
   11a54:	mov	r0, r6
   11a58:	mov	r2, #4
   11a5c:	add	r1, sp, #28
   11a60:	bl	13e54 <__assert_fail@plt+0x2c80>
   11a64:	mov	r6, r0
   11a68:	ldr	r3, [sp, #32]
   11a6c:	str	r3, [r6, r7, lsl #2]
   11a70:	add	r7, r7, #1
   11a74:	b	11b0c <__assert_fail@plt+0x938>
   11a78:	mov	r0, r5
   11a7c:	bl	111c8 <getgrnam@plt>
   11a80:	subs	r8, r0, #0
   11a84:	beq	11ac4 <__assert_fail@plt+0x8f0>
   11a88:	ldr	r3, [r8, #8]
   11a8c:	str	r3, [sp, #32]
   11a90:	mov	r3, #0
   11a94:	str	r3, [sp, #36]	; 0x24
   11a98:	b	11a48 <__assert_fail@plt+0x874>
   11a9c:	cmp	r4, #0
   11aa0:	str	r6, [r9]
   11aa4:	ldreq	r3, [sp, #16]
   11aa8:	streq	r7, [r3]
   11aac:	bne	119c8 <__assert_fail@plt+0x7f4>
   11ab0:	ldr	r0, [sp, #12]
   11ab4:	bl	11ed4 <__assert_fail@plt+0xd00>
   11ab8:	mov	r0, r4
   11abc:	add	sp, sp, #44	; 0x2c
   11ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac4:	cmp	sl, #0
   11ac8:	beq	119c4 <__assert_fail@plt+0x7f0>
   11acc:	bl	110b4 <__errno_location@plt>
   11ad0:	ldr	r1, [pc, #84]	; 11b2c <__assert_fail@plt+0x958>
   11ad4:	mov	r2, #5
   11ad8:	ldr	r4, [r0]
   11adc:	mov	r0, r8
   11ae0:	bl	10f88 <dcgettext@plt>
   11ae4:	mov	r2, r0
   11ae8:	mov	r0, r5
   11aec:	str	r2, [sp, #20]
   11af0:	bl	13524 <__assert_fail@plt+0x2350>
   11af4:	mov	r3, r0
   11af8:	mov	r1, r4
   11afc:	ldr	r2, [sp, #20]
   11b00:	mov	r0, r8
   11b04:	mvn	r4, #0
   11b08:	bl	11018 <error@plt>
   11b0c:	ldr	r1, [pc, #12]	; 11b20 <__assert_fail@plt+0x94c>
   11b10:	mov	r0, #0
   11b14:	bl	1112c <strtok@plt>
   11b18:	mov	r5, r0
   11b1c:	b	1197c <__assert_fail@plt+0x7a8>
   11b20:			; <UNDEFINED> instruction: 0x000151bc
   11b24:	andeq	r5, r1, pc, asr #3
   11b28:	andeq	r5, r1, r4, lsl #5
   11b2c:			; <UNDEFINED> instruction: 0x000151be
   11b30:	subs	r5, r0, #0
   11b34:	push	{r7, lr}
   11b38:	sub	sp, sp, #56	; 0x38
   11b3c:	ldr	r4, [pc, #572]	; 11d80 <__assert_fail@plt+0xbac>
   11b40:	beq	11b78 <__assert_fail@plt+0x9a4>
   11b44:	mov	r2, #5
   11b48:	mov	r0, #0
   11b4c:	ldr	r3, [pc, #560]	; 11d84 <__assert_fail@plt+0xbb0>
   11b50:	ldr	r1, [pc, #560]	; 11d88 <__assert_fail@plt+0xbb4>
   11b54:	ldr	r6, [r3]
   11b58:	bl	10f88 <dcgettext@plt>
   11b5c:	mov	r2, r0
   11b60:	mov	r1, #1
   11b64:	ldr	r3, [r4]
   11b68:	mov	r0, r6
   11b6c:	bl	11108 <__fprintf_chk@plt>
   11b70:	mov	r0, r5
   11b74:	bl	11084 <exit@plt>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #520]	; 11d8c <__assert_fail@plt+0xbb8>
   11b80:	bl	10f88 <dcgettext@plt>
   11b84:	ldr	r3, [r4]
   11b88:	mov	r1, r0
   11b8c:	mov	r0, #1
   11b90:	ldr	r4, [pc, #504]	; 11d90 <__assert_fail@plt+0xbbc>
   11b94:	ldr	r7, [pc, #504]	; 11d94 <__assert_fail@plt+0xbc0>
   11b98:	mov	r2, r3
   11b9c:	bl	110e4 <__printf_chk@plt>
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #492]	; 11d98 <__assert_fail@plt+0xbc4>
   11ba8:	mov	r0, r5
   11bac:	bl	10f88 <dcgettext@plt>
   11bb0:	ldr	r1, [r4]
   11bb4:	bl	10eec <fputs_unlocked@plt>
   11bb8:	mov	r2, #5
   11bbc:	ldr	r1, [pc, #472]	; 11d9c <__assert_fail@plt+0xbc8>
   11bc0:	mov	r0, r5
   11bc4:	bl	10f88 <dcgettext@plt>
   11bc8:	ldr	r1, [r4]
   11bcc:	bl	10eec <fputs_unlocked@plt>
   11bd0:	mov	r2, #5
   11bd4:	ldr	r1, [pc, #452]	; 11da0 <__assert_fail@plt+0xbcc>
   11bd8:	mov	r0, r5
   11bdc:	bl	10f88 <dcgettext@plt>
   11be0:	ldr	r1, [r4]
   11be4:	bl	10eec <fputs_unlocked@plt>
   11be8:	mov	r2, #5
   11bec:	ldr	r1, [pc, #432]	; 11da4 <__assert_fail@plt+0xbd0>
   11bf0:	mov	r0, r5
   11bf4:	bl	10f88 <dcgettext@plt>
   11bf8:	mov	r6, r0
   11bfc:	ldr	r1, [pc, #420]	; 11da8 <__assert_fail@plt+0xbd4>
   11c00:	mov	r0, #4
   11c04:	bl	13340 <__assert_fail@plt+0x216c>
   11c08:	mov	r2, r0
   11c0c:	mov	r1, r6
   11c10:	mov	r0, #1
   11c14:	mov	r6, sp
   11c18:	bl	110e4 <__printf_chk@plt>
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #388]	; 11dac <__assert_fail@plt+0xbd8>
   11c24:	mov	r0, r5
   11c28:	bl	10f88 <dcgettext@plt>
   11c2c:	ldr	r1, [r4]
   11c30:	bl	10eec <fputs_unlocked@plt>
   11c34:	mov	r2, #5
   11c38:	ldr	r1, [pc, #368]	; 11db0 <__assert_fail@plt+0xbdc>
   11c3c:	mov	r0, r5
   11c40:	bl	10f88 <dcgettext@plt>
   11c44:	ldr	r1, [r4]
   11c48:	bl	10eec <fputs_unlocked@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #348]	; 11db4 <__assert_fail@plt+0xbe0>
   11c54:	mov	r0, r5
   11c58:	bl	10f88 <dcgettext@plt>
   11c5c:	ldr	r1, [r4]
   11c60:	bl	10eec <fputs_unlocked@plt>
   11c64:	ldr	lr, [pc, #332]	; 11db8 <__assert_fail@plt+0xbe4>
   11c68:	mov	ip, sp
   11c6c:	ldm	lr!, {r0, r1, r2, r3}
   11c70:	stmia	ip!, {r0, r1, r2, r3}
   11c74:	ldm	lr!, {r0, r1, r2, r3}
   11c78:	stmia	ip!, {r0, r1, r2, r3}
   11c7c:	ldm	lr!, {r0, r1, r2, r3}
   11c80:	stmia	ip!, {r0, r1, r2, r3}
   11c84:	ldm	lr, {r0, r1}
   11c88:	stm	ip, {r0, r1}
   11c8c:	ldr	r1, [r6]
   11c90:	cmp	r1, #0
   11c94:	bne	11d38 <__assert_fail@plt+0xb64>
   11c98:	ldr	r6, [r6, #4]
   11c9c:	mov	r2, #5
   11ca0:	mov	r0, #0
   11ca4:	ldr	r7, [pc, #232]	; 11d94 <__assert_fail@plt+0xbc0>
   11ca8:	ldr	r1, [pc, #268]	; 11dbc <__assert_fail@plt+0xbe8>
   11cac:	cmp	r6, #0
   11cb0:	moveq	r6, r7
   11cb4:	bl	10f88 <dcgettext@plt>
   11cb8:	mov	r1, r0
   11cbc:	ldr	r3, [pc, #252]	; 11dc0 <__assert_fail@plt+0xbec>
   11cc0:	mov	r0, #1
   11cc4:	ldr	r2, [pc, #248]	; 11dc4 <__assert_fail@plt+0xbf0>
   11cc8:	bl	110e4 <__printf_chk@plt>
   11ccc:	mov	r1, #0
   11cd0:	mov	r0, #5
   11cd4:	bl	11138 <setlocale@plt>
   11cd8:	cmp	r0, #0
   11cdc:	bne	11d50 <__assert_fail@plt+0xb7c>
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #220]	; 11dc8 <__assert_fail@plt+0xbf4>
   11ce8:	mov	r0, #0
   11cec:	bl	10f88 <dcgettext@plt>
   11cf0:	mov	r1, r0
   11cf4:	ldr	r3, [pc, #152]	; 11d94 <__assert_fail@plt+0xbc0>
   11cf8:	mov	r0, #1
   11cfc:	ldr	r2, [pc, #188]	; 11dc0 <__assert_fail@plt+0xbec>
   11d00:	bl	110e4 <__printf_chk@plt>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #188]	; 11dcc <__assert_fail@plt+0xbf8>
   11d0c:	mov	r0, #0
   11d10:	bl	10f88 <dcgettext@plt>
   11d14:	ldr	r2, [pc, #180]	; 11dd0 <__assert_fail@plt+0xbfc>
   11d18:	cmp	r6, r7
   11d1c:	mov	r1, r0
   11d20:	mov	r0, #1
   11d24:	ldr	r3, [pc, #168]	; 11dd4 <__assert_fail@plt+0xc00>
   11d28:	moveq	r3, r2
   11d2c:	mov	r2, r6
   11d30:	bl	110e4 <__printf_chk@plt>
   11d34:	b	11b70 <__assert_fail@plt+0x99c>
   11d38:	mov	r0, r7
   11d3c:	bl	10f10 <strcmp@plt>
   11d40:	cmp	r0, #0
   11d44:	beq	11c98 <__assert_fail@plt+0xac4>
   11d48:	add	r6, r6, #8
   11d4c:	b	11c8c <__assert_fail@plt+0xab8>
   11d50:	mov	r2, #3
   11d54:	ldr	r1, [pc, #124]	; 11dd8 <__assert_fail@plt+0xc04>
   11d58:	bl	111a4 <strncmp@plt>
   11d5c:	cmp	r0, #0
   11d60:	beq	11ce0 <__assert_fail@plt+0xb0c>
   11d64:	mov	r2, #5
   11d68:	ldr	r1, [pc, #108]	; 11ddc <__assert_fail@plt+0xc08>
   11d6c:	mov	r0, #0
   11d70:	bl	10f88 <dcgettext@plt>
   11d74:	ldr	r1, [r4]
   11d78:	bl	10eec <fputs_unlocked@plt>
   11d7c:	b	11ce0 <__assert_fail@plt+0xb0c>
   11d80:	muleq	r2, r0, r1
   11d84:	andeq	r6, r2, r8, ror r1
   11d88:	andeq	r5, r1, ip, ror #3
   11d8c:	andeq	r5, r1, r3, lsl r2
   11d90:	andeq	r6, r2, ip, ror r1
   11d94:	andeq	r5, r1, r5, ror #3
   11d98:	andeq	r5, r1, r3, asr r2
   11d9c:	andeq	r5, r1, r5, lsl #5
   11da0:	andeq	r5, r1, pc, asr #5
   11da4:	andeq	r5, r1, r8, lsl r3
   11da8:	andeq	r5, r1, r4, lsl #22
   11dac:	andeq	r5, r1, ip, asr r3
   11db0:	andeq	r5, r1, r9, lsl #7
   11db4:			; <UNDEFINED> instruction: 0x000153bf
   11db8:	andeq	r5, r1, r4, lsr #2
   11dbc:	andeq	r5, r1, r4, lsl #8
   11dc0:	andeq	r5, r1, fp, lsl r4
   11dc4:	andeq	r5, r1, r3, asr #8
   11dc8:	muleq	r1, ip, r4
   11dcc:			; <UNDEFINED> instruction: 0x000154b7
   11dd0:	andeq	r5, r1, fp, ror r6
   11dd4:	andeq	r5, r1, r4, lsl #5
   11dd8:	andeq	r5, r1, r1, asr r4
   11ddc:	andeq	r5, r1, r5, asr r4
   11de0:	ldr	r3, [pc, #4]	; 11dec <__assert_fail@plt+0xc18>
   11de4:	str	r0, [r3]
   11de8:	bx	lr
   11dec:	andeq	r6, r2, r8, lsl #3
   11df0:	ldr	r3, [pc, #4]	; 11dfc <__assert_fail@plt+0xc28>
   11df4:	strb	r0, [r3, #4]
   11df8:	bx	lr
   11dfc:	andeq	r6, r2, r8, lsl #3
   11e00:	ldr	r3, [pc, #176]	; 11eb8 <__assert_fail@plt+0xce4>
   11e04:	push	{r0, r1, r4, r5, r6, lr}
   11e08:	ldr	r0, [r3]
   11e0c:	bl	14938 <__assert_fail@plt+0x3764>
   11e10:	cmp	r0, #0
   11e14:	beq	11e9c <__assert_fail@plt+0xcc8>
   11e18:	ldr	r4, [pc, #156]	; 11ebc <__assert_fail@plt+0xce8>
   11e1c:	bl	110b4 <__errno_location@plt>
   11e20:	mov	r5, r0
   11e24:	ldrb	r6, [r4, #4]
   11e28:	cmp	r6, #0
   11e2c:	beq	11e3c <__assert_fail@plt+0xc68>
   11e30:	ldr	r3, [r0]
   11e34:	cmp	r3, #32
   11e38:	beq	11e9c <__assert_fail@plt+0xcc8>
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #120]	; 11ec0 <__assert_fail@plt+0xcec>
   11e44:	mov	r0, #0
   11e48:	bl	10f88 <dcgettext@plt>
   11e4c:	mov	r6, r0
   11e50:	ldr	r0, [r4]
   11e54:	cmp	r0, #0
   11e58:	beq	11e88 <__assert_fail@plt+0xcb4>
   11e5c:	ldr	r4, [r5]
   11e60:	bl	133d4 <__assert_fail@plt+0x2200>
   11e64:	mov	r3, r0
   11e68:	ldr	r2, [pc, #84]	; 11ec4 <__assert_fail@plt+0xcf0>
   11e6c:	mov	r0, #0
   11e70:	str	r6, [sp]
   11e74:	mov	r1, r4
   11e78:	bl	11018 <error@plt>
   11e7c:	ldr	r3, [pc, #68]	; 11ec8 <__assert_fail@plt+0xcf4>
   11e80:	ldr	r0, [r3]
   11e84:	bl	10f40 <_exit@plt>
   11e88:	mov	r3, r6
   11e8c:	ldr	r2, [pc, #56]	; 11ecc <__assert_fail@plt+0xcf8>
   11e90:	ldr	r1, [r5]
   11e94:	bl	11018 <error@plt>
   11e98:	b	11e7c <__assert_fail@plt+0xca8>
   11e9c:	ldr	r3, [pc, #44]	; 11ed0 <__assert_fail@plt+0xcfc>
   11ea0:	ldr	r0, [r3]
   11ea4:	bl	14938 <__assert_fail@plt+0x3764>
   11ea8:	cmp	r0, #0
   11eac:	bne	11e7c <__assert_fail@plt+0xca8>
   11eb0:	add	sp, sp, #8
   11eb4:	pop	{r4, r5, r6, pc}
   11eb8:	andeq	r6, r2, ip, ror r1
   11ebc:	andeq	r6, r2, r8, lsl #3
   11ec0:	andeq	r5, r1, lr, ror #13
   11ec4:	strdeq	r5, [r1], -sl
   11ec8:	andeq	r6, r2, r0, lsr #2
   11ecc:	strdeq	r5, [r1], -lr
   11ed0:	andeq	r6, r2, r8, ror r1
   11ed4:	push	{r0, r1, r2, r4, r5, lr}
   11ed8:	mov	r5, r0
   11edc:	bl	110b4 <__errno_location@plt>
   11ee0:	mov	r4, r0
   11ee4:	mov	r0, r5
   11ee8:	ldr	r3, [r4]
   11eec:	str	r3, [sp]
   11ef0:	str	r3, [sp, #4]
   11ef4:	mov	r3, #0
   11ef8:	str	r3, [r4]
   11efc:	bl	10f34 <free@plt>
   11f00:	ldr	r3, [r4]
   11f04:	add	r2, sp, #8
   11f08:	clz	r3, r3
   11f0c:	lsr	r3, r3, #5
   11f10:	add	r3, r2, r3, lsl #2
   11f14:	ldr	r3, [r3, #-8]
   11f18:	str	r3, [r4]
   11f1c:	add	sp, sp, #12
   11f20:	pop	{r4, r5, pc}
   11f24:	push	{r4, r5, r6, lr}
   11f28:	subs	r4, r0, #0
   11f2c:	bne	11f44 <__assert_fail@plt+0xd70>
   11f30:	ldr	r3, [pc, #124]	; 11fb4 <__assert_fail@plt+0xde0>
   11f34:	ldr	r0, [pc, #124]	; 11fb8 <__assert_fail@plt+0xde4>
   11f38:	ldr	r1, [r3]
   11f3c:	bl	11198 <fputs@plt>
   11f40:	bl	111b0 <abort@plt>
   11f44:	mov	r1, #47	; 0x2f
   11f48:	bl	11150 <strrchr@plt>
   11f4c:	subs	r6, r0, #0
   11f50:	beq	11fa0 <__assert_fail@plt+0xdcc>
   11f54:	add	r5, r6, #1
   11f58:	sub	r3, r5, r4
   11f5c:	cmp	r3, #6
   11f60:	ble	11fa0 <__assert_fail@plt+0xdcc>
   11f64:	mov	r2, #7
   11f68:	ldr	r1, [pc, #76]	; 11fbc <__assert_fail@plt+0xde8>
   11f6c:	sub	r0, r6, #6
   11f70:	bl	111a4 <strncmp@plt>
   11f74:	cmp	r0, #0
   11f78:	bne	11fa0 <__assert_fail@plt+0xdcc>
   11f7c:	mov	r2, #3
   11f80:	ldr	r1, [pc, #56]	; 11fc0 <__assert_fail@plt+0xdec>
   11f84:	mov	r0, r5
   11f88:	bl	111a4 <strncmp@plt>
   11f8c:	cmp	r0, #0
   11f90:	ldreq	r3, [pc, #44]	; 11fc4 <__assert_fail@plt+0xdf0>
   11f94:	addeq	r4, r6, #4
   11f98:	movne	r4, r5
   11f9c:	streq	r4, [r3]
   11fa0:	ldr	r3, [pc, #32]	; 11fc8 <__assert_fail@plt+0xdf4>
   11fa4:	str	r4, [r3]
   11fa8:	ldr	r3, [pc, #28]	; 11fcc <__assert_fail@plt+0xdf8>
   11fac:	str	r4, [r3]
   11fb0:	pop	{r4, r5, r6, pc}
   11fb4:	andeq	r6, r2, r8, ror r1
   11fb8:	andeq	r5, r1, r1, lsl #14
   11fbc:	andeq	r5, r1, r9, lsr r7
   11fc0:	andeq	r5, r1, r1, asr #14
   11fc4:	andeq	r6, r2, r8, ror #2
   11fc8:	muleq	r2, r0, r1
   11fcc:	andeq	r6, r2, ip, ror #2
   11fd0:	push	{r4, lr}
   11fd4:	mov	r2, #48	; 0x30
   11fd8:	mov	r4, r1
   11fdc:	mov	r1, #0
   11fe0:	bl	110d8 <memset@plt>
   11fe4:	cmp	r4, #10
   11fe8:	bne	11ff0 <__assert_fail@plt+0xe1c>
   11fec:	bl	111b0 <abort@plt>
   11ff0:	str	r4, [r0]
   11ff4:	pop	{r4, pc}
   11ff8:	push	{r4, r5, r6, lr}
   11ffc:	mov	r2, #5
   12000:	mov	r6, r0
   12004:	mov	r5, r1
   12008:	mov	r1, r0
   1200c:	mov	r0, #0
   12010:	bl	10f88 <dcgettext@plt>
   12014:	cmp	r6, r0
   12018:	mov	r4, r0
   1201c:	bne	1208c <__assert_fail@plt+0xeb8>
   12020:	bl	14bc8 <__assert_fail@plt+0x39f4>
   12024:	ldrb	r3, [r0]
   12028:	bic	r3, r3, #32
   1202c:	cmp	r3, #85	; 0x55
   12030:	bne	12094 <__assert_fail@plt+0xec0>
   12034:	ldrb	r3, [r0, #1]
   12038:	bic	r3, r3, #32
   1203c:	cmp	r3, #84	; 0x54
   12040:	bne	12104 <__assert_fail@plt+0xf30>
   12044:	ldrb	r3, [r0, #2]
   12048:	bic	r3, r3, #32
   1204c:	cmp	r3, #70	; 0x46
   12050:	bne	12104 <__assert_fail@plt+0xf30>
   12054:	ldrb	r3, [r0, #3]
   12058:	cmp	r3, #45	; 0x2d
   1205c:	bne	12104 <__assert_fail@plt+0xf30>
   12060:	ldrb	r3, [r0, #4]
   12064:	cmp	r3, #56	; 0x38
   12068:	bne	12104 <__assert_fail@plt+0xf30>
   1206c:	ldrb	r3, [r0, #5]
   12070:	cmp	r3, #0
   12074:	bne	12104 <__assert_fail@plt+0xf30>
   12078:	ldrb	r2, [r4]
   1207c:	ldr	r3, [pc, #144]	; 12114 <__assert_fail@plt+0xf40>
   12080:	ldr	r4, [pc, #144]	; 12118 <__assert_fail@plt+0xf44>
   12084:	cmp	r2, #96	; 0x60
   12088:	movne	r4, r3
   1208c:	mov	r0, r4
   12090:	pop	{r4, r5, r6, pc}
   12094:	cmp	r3, #71	; 0x47
   12098:	bne	12104 <__assert_fail@plt+0xf30>
   1209c:	ldrb	r3, [r0, #1]
   120a0:	bic	r3, r3, #32
   120a4:	cmp	r3, #66	; 0x42
   120a8:	bne	12104 <__assert_fail@plt+0xf30>
   120ac:	ldrb	r3, [r0, #2]
   120b0:	cmp	r3, #49	; 0x31
   120b4:	bne	12104 <__assert_fail@plt+0xf30>
   120b8:	ldrb	r3, [r0, #3]
   120bc:	cmp	r3, #56	; 0x38
   120c0:	bne	12104 <__assert_fail@plt+0xf30>
   120c4:	ldrb	r3, [r0, #4]
   120c8:	cmp	r3, #48	; 0x30
   120cc:	bne	12104 <__assert_fail@plt+0xf30>
   120d0:	ldrb	r3, [r0, #5]
   120d4:	cmp	r3, #51	; 0x33
   120d8:	bne	12104 <__assert_fail@plt+0xf30>
   120dc:	ldrb	r3, [r0, #6]
   120e0:	cmp	r3, #48	; 0x30
   120e4:	bne	12104 <__assert_fail@plt+0xf30>
   120e8:	ldrb	r3, [r0, #7]
   120ec:	cmp	r3, #0
   120f0:	bne	12104 <__assert_fail@plt+0xf30>
   120f4:	ldrb	r2, [r4]
   120f8:	ldr	r3, [pc, #28]	; 1211c <__assert_fail@plt+0xf48>
   120fc:	ldr	r4, [pc, #28]	; 12120 <__assert_fail@plt+0xf4c>
   12100:	b	12084 <__assert_fail@plt+0xeb0>
   12104:	ldr	r4, [pc, #24]	; 12124 <__assert_fail@plt+0xf50>
   12108:	cmp	r5, #9
   1210c:	ldr	r3, [pc, #20]	; 12128 <__assert_fail@plt+0xf54>
   12110:	b	12088 <__assert_fail@plt+0xeb4>
   12114:	muleq	r1, lr, r7
   12118:	andeq	r5, r1, r9, lsr #15
   1211c:	andeq	r5, r1, r2, lsr #15
   12120:	andeq	r5, r1, r5, lsr #15
   12124:	muleq	r1, ip, r7
   12128:	andeq	r5, r1, sp, lsr #15
   1212c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12130:	sub	sp, sp, #108	; 0x6c
   12134:	mov	r8, r0
   12138:	mov	r5, r1
   1213c:	mov	r6, #0
   12140:	str	r3, [sp, #40]	; 0x28
   12144:	str	r2, [sp, #48]	; 0x30
   12148:	ldr	sl, [sp, #144]	; 0x90
   1214c:	bl	10fdc <__ctype_get_mb_cur_max@plt>
   12150:	ldr	r3, [sp, #148]	; 0x94
   12154:	str	r6, [sp, #24]
   12158:	str	r6, [sp, #32]
   1215c:	str	r6, [sp, #44]	; 0x2c
   12160:	str	r6, [sp, #52]	; 0x34
   12164:	ubfx	r7, r3, #1, #1
   12168:	mov	r3, #1
   1216c:	str	r6, [sp, #60]	; 0x3c
   12170:	str	r3, [sp, #72]	; 0x48
   12174:	str	r0, [sp, #76]	; 0x4c
   12178:	cmp	sl, #10
   1217c:	ldrls	pc, [pc, sl, lsl #2]
   12180:	b	123c4 <__assert_fail@plt+0x11f0>
   12184:			; <UNDEFINED> instruction: 0x000121b0
   12188:	ldrdeq	r2, [r1], -ip
   1218c:	andeq	r2, r1, r0, ror #6
   12190:	andeq	r2, r1, r8, ror r3
   12194:	andeq	r2, r1, r8, asr #6
   12198:	andeq	r2, r1, r0, lsr #5
   1219c:	andeq	r2, r1, r0, lsl #5
   121a0:	andeq	r2, r1, r8, asr #7
   121a4:	ldrdeq	r2, [r1], -r0
   121a8:	ldrdeq	r2, [r1], -r0
   121ac:	ldrdeq	r2, [r1], -r0
   121b0:	mov	r4, sl
   121b4:	mov	r7, #0
   121b8:	mov	r9, r5
   121bc:	mov	r3, #0
   121c0:	str	r6, [sp, #68]	; 0x44
   121c4:	str	r3, [sp, #28]
   121c8:	ldr	r3, [sp, #40]	; 0x28
   121cc:	cmn	r3, #1
   121d0:	bne	12d70 <__assert_fail@plt+0x1b9c>
   121d4:	ldr	r2, [sp, #28]
   121d8:	ldr	r3, [sp, #48]	; 0x30
   121dc:	ldrb	r3, [r3, r2]
   121e0:	adds	r3, r3, #0
   121e4:	movne	r3, #1
   121e8:	str	r3, [sp, #36]	; 0x24
   121ec:	ldr	r3, [sp, #36]	; 0x24
   121f0:	cmp	r3, #0
   121f4:	bne	12400 <__assert_fail@plt+0x122c>
   121f8:	sub	r3, sl, #2
   121fc:	cmp	r4, #0
   12200:	clz	r3, r3
   12204:	movne	r2, #0
   12208:	lsr	r3, r3, #5
   1220c:	andeq	r2, r3, r7
   12210:	cmp	r2, #0
   12214:	bne	125c4 <__assert_fail@plt+0x13f0>
   12218:	eor	r7, r7, #1
   1221c:	ands	r3, r3, r7
   12220:	beq	12de8 <__assert_fail@plt+0x1c14>
   12224:	ldr	r2, [sp, #68]	; 0x44
   12228:	cmp	r2, #0
   1222c:	beq	12db0 <__assert_fail@plt+0x1bdc>
   12230:	ldr	r3, [sp, #72]	; 0x48
   12234:	cmp	r3, #0
   12238:	beq	12d84 <__assert_fail@plt+0x1bb0>
   1223c:	ldr	r2, [sp, #48]	; 0x30
   12240:	ldr	r3, [sp, #160]	; 0xa0
   12244:	ldr	r1, [sp, #60]	; 0x3c
   12248:	str	r3, [sp, #16]
   1224c:	ldr	r3, [sp, #156]	; 0x9c
   12250:	str	r3, [sp, #12]
   12254:	ldr	r3, [sp, #152]	; 0x98
   12258:	str	r3, [sp, #8]
   1225c:	ldr	r3, [sp, #148]	; 0x94
   12260:	str	r3, [sp, #4]
   12264:	mov	r3, #5
   12268:	str	r3, [sp]
   1226c:	ldr	r3, [sp, #40]	; 0x28
   12270:	mov	r0, r8
   12274:	bl	1212c <__assert_fail@plt+0xf58>
   12278:	mov	r4, r0
   1227c:	b	12ddc <__assert_fail@plt+0x1c08>
   12280:	ldr	r3, [pc, #2948]	; 12e0c <__assert_fail@plt+0x1c38>
   12284:	mov	r7, #1
   12288:	mov	r4, #0
   1228c:	mov	sl, #5
   12290:	str	r7, [sp, #24]
   12294:	str	r7, [sp, #32]
   12298:	str	r3, [sp, #44]	; 0x2c
   1229c:	b	121b8 <__assert_fail@plt+0xfe4>
   122a0:	cmp	r7, #0
   122a4:	bne	123e8 <__assert_fail@plt+0x1214>
   122a8:	cmp	r5, #0
   122ac:	mov	r4, #1
   122b0:	movne	r3, #34	; 0x22
   122b4:	strbne	r3, [r8]
   122b8:	mov	r3, #1
   122bc:	str	r3, [sp, #24]
   122c0:	str	r3, [sp, #32]
   122c4:	ldr	r3, [pc, #2880]	; 12e0c <__assert_fail@plt+0x1c38>
   122c8:	str	r3, [sp, #44]	; 0x2c
   122cc:	b	121b8 <__assert_fail@plt+0xfe4>
   122d0:	cmp	sl, #10
   122d4:	beq	122f8 <__assert_fail@plt+0x1124>
   122d8:	mov	r1, sl
   122dc:	ldr	r0, [pc, #2860]	; 12e10 <__assert_fail@plt+0x1c3c>
   122e0:	bl	11ff8 <__assert_fail@plt+0xe24>
   122e4:	mov	r1, sl
   122e8:	str	r0, [sp, #156]	; 0x9c
   122ec:	ldr	r0, [pc, #2848]	; 12e14 <__assert_fail@plt+0x1c40>
   122f0:	bl	11ff8 <__assert_fail@plt+0xe24>
   122f4:	str	r0, [sp, #160]	; 0xa0
   122f8:	cmp	r7, #0
   122fc:	moveq	r4, r7
   12300:	beq	12318 <__assert_fail@plt+0x1144>
   12304:	mov	r4, #0
   12308:	b	12328 <__assert_fail@plt+0x1154>
   1230c:	cmp	r5, r4
   12310:	strbhi	r3, [r8, r4]
   12314:	add	r4, r4, #1
   12318:	ldr	r3, [sp, #156]	; 0x9c
   1231c:	ldrb	r3, [r3, r4]
   12320:	cmp	r3, #0
   12324:	bne	1230c <__assert_fail@plt+0x1138>
   12328:	ldr	r0, [sp, #160]	; 0xa0
   1232c:	bl	1109c <strlen@plt>
   12330:	ldr	r3, [sp, #160]	; 0xa0
   12334:	str	r0, [sp, #32]
   12338:	str	r3, [sp, #44]	; 0x2c
   1233c:	mov	r3, #1
   12340:	str	r3, [sp, #24]
   12344:	b	121b8 <__assert_fail@plt+0xfe4>
   12348:	mov	r3, #1
   1234c:	cmp	r7, #0
   12350:	streq	r3, [sp, #24]
   12354:	beq	12398 <__assert_fail@plt+0x11c4>
   12358:	str	r3, [sp, #32]
   1235c:	b	12384 <__assert_fail@plt+0x11b0>
   12360:	cmp	r7, #0
   12364:	beq	12398 <__assert_fail@plt+0x11c4>
   12368:	mov	r3, #1
   1236c:	str	r3, [sp, #32]
   12370:	ldr	r3, [pc, #2716]	; 12e14 <__assert_fail@plt+0x1c40>
   12374:	b	123f8 <__assert_fail@plt+0x1224>
   12378:	mov	r7, #1
   1237c:	str	r7, [sp, #24]
   12380:	str	r7, [sp, #32]
   12384:	ldr	r3, [pc, #2696]	; 12e14 <__assert_fail@plt+0x1c40>
   12388:	mov	r4, #0
   1238c:	str	r3, [sp, #44]	; 0x2c
   12390:	mov	sl, #2
   12394:	b	121b8 <__assert_fail@plt+0xfe4>
   12398:	cmp	r5, #0
   1239c:	movne	r3, #39	; 0x27
   123a0:	movne	r7, #0
   123a4:	strbne	r3, [r8]
   123a8:	moveq	r7, r5
   123ac:	mov	r3, #1
   123b0:	mov	r4, #1
   123b4:	str	r3, [sp, #32]
   123b8:	ldr	r3, [pc, #2644]	; 12e14 <__assert_fail@plt+0x1c40>
   123bc:	str	r3, [sp, #44]	; 0x2c
   123c0:	b	12390 <__assert_fail@plt+0x11bc>
   123c4:	bl	111b0 <abort@plt>
   123c8:	mov	r3, #1
   123cc:	mov	r7, #0
   123d0:	str	r3, [sp, #24]
   123d4:	mov	r4, #0
   123d8:	b	121b8 <__assert_fail@plt+0xfe4>
   123dc:	mov	r7, #1
   123e0:	str	sl, [sp, #32]
   123e4:	b	12384 <__assert_fail@plt+0x11b0>
   123e8:	mov	r3, #1
   123ec:	str	r7, [sp, #24]
   123f0:	str	r3, [sp, #32]
   123f4:	ldr	r3, [pc, #2576]	; 12e0c <__assert_fail@plt+0x1c38>
   123f8:	str	r3, [sp, #44]	; 0x2c
   123fc:	b	123d4 <__assert_fail@plt+0x1200>
   12400:	ldr	fp, [sp, #24]
   12404:	ldr	r3, [sp, #32]
   12408:	cmp	sl, #2
   1240c:	moveq	fp, #0
   12410:	andne	fp, fp, #1
   12414:	adds	r5, r3, #0
   12418:	movne	r5, #1
   1241c:	ands	r3, fp, r5
   12420:	str	r3, [sp, #64]	; 0x40
   12424:	beq	124f4 <__assert_fail@plt+0x1320>
   12428:	ldr	r3, [sp, #28]
   1242c:	ldr	r2, [sp, #32]
   12430:	cmp	r2, #1
   12434:	add	r6, r3, r2
   12438:	mov	r3, r2
   1243c:	ldr	r2, [sp, #40]	; 0x28
   12440:	movls	r3, #0
   12444:	movhi	r3, #1
   12448:	cmn	r2, #1
   1244c:	movne	r3, #0
   12450:	cmp	r3, #0
   12454:	beq	12464 <__assert_fail@plt+0x1290>
   12458:	ldr	r0, [sp, #48]	; 0x30
   1245c:	bl	1109c <strlen@plt>
   12460:	str	r0, [sp, #40]	; 0x28
   12464:	ldr	r3, [sp, #40]	; 0x28
   12468:	cmp	r6, r3
   1246c:	bhi	124ec <__assert_fail@plt+0x1318>
   12470:	ldr	r0, [sp, #28]
   12474:	ldr	r2, [sp, #32]
   12478:	ldr	r3, [sp, #48]	; 0x30
   1247c:	ldr	r1, [sp, #44]	; 0x2c
   12480:	add	r0, r3, r0
   12484:	bl	10f70 <memcmp@plt>
   12488:	cmp	r0, #0
   1248c:	bne	124ec <__assert_fail@plt+0x1318>
   12490:	cmp	r7, #0
   12494:	beq	124f4 <__assert_fail@plt+0x1320>
   12498:	str	r7, [sp, #24]
   1249c:	ldr	r3, [sp, #24]
   124a0:	mov	r1, r9
   124a4:	ldr	r2, [sp, #48]	; 0x30
   124a8:	cmp	sl, #2
   124ac:	movne	r3, #0
   124b0:	andeq	r3, r3, #1
   124b4:	cmp	r3, #0
   124b8:	ldr	r3, [sp, #160]	; 0xa0
   124bc:	movne	sl, #4
   124c0:	str	sl, [sp]
   124c4:	str	r3, [sp, #16]
   124c8:	ldr	r3, [sp, #156]	; 0x9c
   124cc:	str	r3, [sp, #12]
   124d0:	mov	r3, #0
   124d4:	str	r3, [sp, #8]
   124d8:	ldr	r3, [sp, #148]	; 0x94
   124dc:	bic	r3, r3, #2
   124e0:	str	r3, [sp, #4]
   124e4:	ldr	r3, [sp, #40]	; 0x28
   124e8:	b	12270 <__assert_fail@plt+0x109c>
   124ec:	mov	r3, #0
   124f0:	str	r3, [sp, #64]	; 0x40
   124f4:	ldr	r2, [sp, #28]
   124f8:	ldr	r3, [sp, #48]	; 0x30
   124fc:	add	r3, r3, r2
   12500:	str	r3, [sp, #80]	; 0x50
   12504:	ldr	r3, [sp, #48]	; 0x30
   12508:	ldrb	r6, [r3, r2]
   1250c:	cmp	r6, #58	; 0x3a
   12510:	bhi	12674 <__assert_fail@plt+0x14a0>
   12514:	cmp	r6, #43	; 0x2b
   12518:	bcs	12834 <__assert_fail@plt+0x1660>
   1251c:	cmp	r6, #32
   12520:	beq	12888 <__assert_fail@plt+0x16b4>
   12524:	bhi	125cc <__assert_fail@plt+0x13f8>
   12528:	cmp	r6, #9
   1252c:	beq	12a30 <__assert_fail@plt+0x185c>
   12530:	bhi	12590 <__assert_fail@plt+0x13bc>
   12534:	cmp	r6, #7
   12538:	beq	12a40 <__assert_fail@plt+0x186c>
   1253c:	bhi	12a5c <__assert_fail@plt+0x1888>
   12540:	cmp	r6, #0
   12544:	beq	128a4 <__assert_fail@plt+0x16d0>
   12548:	ldr	r3, [sp, #76]	; 0x4c
   1254c:	cmp	r3, #1
   12550:	bne	12aa8 <__assert_fail@plt+0x18d4>
   12554:	bl	11078 <__ctype_b_loc@plt>
   12558:	ldr	r2, [r0]
   1255c:	sxth	r3, r6
   12560:	lsl	r3, r3, #1
   12564:	ldrh	r5, [r2, r3]
   12568:	ldr	r3, [sp, #76]	; 0x4c
   1256c:	ubfx	r5, r5, #14, #1
   12570:	str	r3, [sp, #56]	; 0x38
   12574:	ldr	r3, [sp, #24]
   12578:	eor	fp, r5, #1
   1257c:	and	fp, fp, r3
   12580:	ands	fp, fp, #255	; 0xff
   12584:	beq	12764 <__assert_fail@plt+0x1590>
   12588:	mov	r5, #0
   1258c:	b	12b54 <__assert_fail@plt+0x1980>
   12590:	cmp	r6, #11
   12594:	beq	12a64 <__assert_fail@plt+0x1890>
   12598:	bcc	12a38 <__assert_fail@plt+0x1864>
   1259c:	cmp	r6, #12
   125a0:	beq	12a6c <__assert_fail@plt+0x1898>
   125a4:	cmp	r6, #13
   125a8:	moveq	r3, #114	; 0x72
   125ac:	bne	12548 <__assert_fail@plt+0x1374>
   125b0:	cmp	sl, #2
   125b4:	movne	r2, #0
   125b8:	andeq	r2, r7, #1
   125bc:	cmp	r2, #0
   125c0:	beq	12a44 <__assert_fail@plt+0x1870>
   125c4:	mov	sl, #2
   125c8:	b	1249c <__assert_fail@plt+0x12c8>
   125cc:	cmp	r6, #37	; 0x25
   125d0:	beq	12834 <__assert_fail@plt+0x1660>
   125d4:	bhi	125e8 <__assert_fail@plt+0x1414>
   125d8:	cmp	r6, #35	; 0x23
   125dc:	beq	1287c <__assert_fail@plt+0x16a8>
   125e0:	mov	r5, #0
   125e4:	b	1288c <__assert_fail@plt+0x16b8>
   125e8:	cmp	r6, #39	; 0x27
   125ec:	bne	125e0 <__assert_fail@plt+0x140c>
   125f0:	cmp	sl, #2
   125f4:	ldrne	r5, [sp, #36]	; 0x24
   125f8:	movne	r3, r5
   125fc:	strne	r3, [sp, #68]	; 0x44
   12600:	bne	12980 <__assert_fail@plt+0x17ac>
   12604:	cmp	r7, #0
   12608:	bne	1249c <__assert_fail@plt+0x12c8>
   1260c:	ldr	r3, [sp, #60]	; 0x3c
   12610:	cmp	r9, #0
   12614:	clz	r3, r3
   12618:	lsr	r3, r3, #5
   1261c:	moveq	r3, #0
   12620:	cmp	r3, #0
   12624:	strne	r9, [sp, #60]	; 0x3c
   12628:	movne	r9, #0
   1262c:	bne	1263c <__assert_fail@plt+0x1468>
   12630:	cmp	r9, r4
   12634:	movhi	r3, #39	; 0x27
   12638:	strbhi	r3, [r8, r4]
   1263c:	add	r3, r4, #1
   12640:	ldr	r5, [sp, #36]	; 0x24
   12644:	mov	fp, #0
   12648:	cmp	r3, r9
   1264c:	movcc	r2, #92	; 0x5c
   12650:	str	fp, [sp, #52]	; 0x34
   12654:	strbcc	r2, [r8, r3]
   12658:	add	r3, r4, #2
   1265c:	add	r4, r4, #3
   12660:	cmp	r3, r9
   12664:	str	r5, [sp, #68]	; 0x44
   12668:	movcc	r2, #39	; 0x27
   1266c:	strbcc	r2, [r8, r3]
   12670:	b	12764 <__assert_fail@plt+0x1590>
   12674:	cmp	r6, #94	; 0x5e
   12678:	beq	125e0 <__assert_fail@plt+0x140c>
   1267c:	bhi	1283c <__assert_fail@plt+0x1668>
   12680:	cmp	r6, #90	; 0x5a
   12684:	bhi	12828 <__assert_fail@plt+0x1654>
   12688:	cmp	r6, #65	; 0x41
   1268c:	bcs	12834 <__assert_fail@plt+0x1660>
   12690:	cmp	r6, #62	; 0x3e
   12694:	bls	125e0 <__assert_fail@plt+0x140c>
   12698:	cmp	r6, #63	; 0x3f
   1269c:	bne	12548 <__assert_fail@plt+0x1374>
   126a0:	cmp	sl, #2
   126a4:	beq	12988 <__assert_fail@plt+0x17b4>
   126a8:	cmp	sl, #5
   126ac:	movne	fp, #0
   126b0:	bne	12d58 <__assert_fail@plt+0x1b84>
   126b4:	ldr	r3, [sp, #148]	; 0x94
   126b8:	tst	r3, #4
   126bc:	beq	12990 <__assert_fail@plt+0x17bc>
   126c0:	ldr	r3, [sp, #28]
   126c4:	add	r2, r3, #2
   126c8:	ldr	r3, [sp, #40]	; 0x28
   126cc:	cmp	r2, r3
   126d0:	bcs	12990 <__assert_fail@plt+0x17bc>
   126d4:	ldr	r1, [sp, #28]
   126d8:	ldr	r3, [sp, #48]	; 0x30
   126dc:	add	r3, r3, r1
   126e0:	ldrb	r1, [r3, #1]
   126e4:	cmp	r1, #63	; 0x3f
   126e8:	bne	12990 <__assert_fail@plt+0x17bc>
   126ec:	ldr	r3, [sp, #48]	; 0x30
   126f0:	ldrb	r6, [r3, r2]
   126f4:	sub	r3, r6, #33	; 0x21
   126f8:	uxtb	r3, r3
   126fc:	cmp	r3, #29
   12700:	bhi	12d60 <__assert_fail@plt+0x1b8c>
   12704:	ldr	r0, [pc, #1804]	; 12e18 <__assert_fail@plt+0x1c44>
   12708:	mov	r5, #1
   1270c:	ands	r5, r0, r5, lsl r3
   12710:	beq	12d68 <__assert_fail@plt+0x1b94>
   12714:	cmp	r7, #0
   12718:	bne	1249c <__assert_fail@plt+0x12c8>
   1271c:	cmp	r9, r4
   12720:	add	r3, r4, #1
   12724:	str	r2, [sp, #28]
   12728:	mov	r5, #0
   1272c:	strbhi	r1, [r8, r4]
   12730:	cmp	r9, r3
   12734:	mov	fp, r5
   12738:	movhi	r1, #34	; 0x22
   1273c:	strbhi	r1, [r8, r3]
   12740:	add	r3, r4, #2
   12744:	cmp	r9, r3
   12748:	movhi	r1, #34	; 0x22
   1274c:	strbhi	r1, [r8, r3]
   12750:	add	r3, r4, #3
   12754:	add	r4, r4, #4
   12758:	cmp	r9, r3
   1275c:	movhi	r1, #63	; 0x3f
   12760:	strbhi	r1, [r8, r3]
   12764:	ldr	r3, [sp, #24]
   12768:	eor	r3, r3, #1
   1276c:	cmp	sl, #2
   12770:	orreq	r3, r3, #1
   12774:	eor	r3, r3, #1
   12778:	orr	r3, r7, r3
   1277c:	tst	r3, #255	; 0xff
   12780:	beq	127ac <__assert_fail@plt+0x15d8>
   12784:	ldr	r3, [sp, #152]	; 0x98
   12788:	cmp	r3, #0
   1278c:	beq	127ac <__assert_fail@plt+0x15d8>
   12790:	ldr	r1, [sp, #152]	; 0x98
   12794:	ubfx	r2, r6, #5, #8
   12798:	and	r3, r6, #31
   1279c:	ldr	r2, [r1, r2, lsl #2]
   127a0:	lsr	r3, r2, r3
   127a4:	tst	r3, #1
   127a8:	bne	127b8 <__assert_fail@plt+0x15e4>
   127ac:	ldr	r3, [sp, #64]	; 0x40
   127b0:	cmp	r3, #0
   127b4:	beq	129b0 <__assert_fail@plt+0x17dc>
   127b8:	sub	r3, sl, #2
   127bc:	cmp	r7, #0
   127c0:	clz	r3, r3
   127c4:	lsr	r3, r3, #5
   127c8:	bne	1249c <__assert_fail@plt+0x12c8>
   127cc:	ldr	r2, [sp, #52]	; 0x34
   127d0:	eor	r2, r2, #1
   127d4:	ands	r3, r3, r2
   127d8:	beq	12810 <__assert_fail@plt+0x163c>
   127dc:	cmp	r9, r4
   127e0:	str	r3, [sp, #52]	; 0x34
   127e4:	movhi	r2, #39	; 0x27
   127e8:	strbhi	r2, [r8, r4]
   127ec:	add	r2, r4, #1
   127f0:	cmp	r9, r2
   127f4:	movhi	r1, #36	; 0x24
   127f8:	strbhi	r1, [r8, r2]
   127fc:	add	r2, r4, #2
   12800:	add	r4, r4, #3
   12804:	cmp	r9, r2
   12808:	movhi	r1, #39	; 0x27
   1280c:	strbhi	r1, [r8, r2]
   12810:	cmp	r9, r4
   12814:	ldr	fp, [sp, #36]	; 0x24
   12818:	movhi	r3, #92	; 0x5c
   1281c:	strbhi	r3, [r8, r4]
   12820:	add	r4, r4, #1
   12824:	b	129b0 <__assert_fail@plt+0x17dc>
   12828:	cmp	r6, #92	; 0x5c
   1282c:	beq	12998 <__assert_fail@plt+0x17c4>
   12830:	bls	125e0 <__assert_fail@plt+0x140c>
   12834:	ldr	r5, [sp, #36]	; 0x24
   12838:	b	12980 <__assert_fail@plt+0x17ac>
   1283c:	cmp	r6, #122	; 0x7a
   12840:	bhi	12860 <__assert_fail@plt+0x168c>
   12844:	cmp	r6, #97	; 0x61
   12848:	bcs	12834 <__assert_fail@plt+0x1660>
   1284c:	cmp	r6, #95	; 0x5f
   12850:	beq	12834 <__assert_fail@plt+0x1660>
   12854:	cmp	r6, #96	; 0x60
   12858:	bne	12548 <__assert_fail@plt+0x1374>
   1285c:	b	125e0 <__assert_fail@plt+0x140c>
   12860:	cmp	r6, #124	; 0x7c
   12864:	beq	125e0 <__assert_fail@plt+0x140c>
   12868:	bcc	12a74 <__assert_fail@plt+0x18a0>
   1286c:	cmp	r6, #125	; 0x7d
   12870:	beq	12a74 <__assert_fail@plt+0x18a0>
   12874:	cmp	r6, #126	; 0x7e
   12878:	bne	12548 <__assert_fail@plt+0x1374>
   1287c:	ldr	r3, [sp, #28]
   12880:	cmp	r3, #0
   12884:	bne	12990 <__assert_fail@plt+0x17bc>
   12888:	ldr	r5, [sp, #36]	; 0x24
   1288c:	cmp	sl, #2
   12890:	movne	fp, #0
   12894:	andeq	fp, r7, #1
   12898:	cmp	fp, #0
   1289c:	beq	12764 <__assert_fail@plt+0x1590>
   128a0:	b	125c4 <__assert_fail@plt+0x13f0>
   128a4:	ldr	r3, [sp, #24]
   128a8:	cmp	r3, #0
   128ac:	beq	12974 <__assert_fail@plt+0x17a0>
   128b0:	sub	r2, sl, #2
   128b4:	cmp	r7, #0
   128b8:	clz	r2, r2
   128bc:	lsr	r2, r2, #5
   128c0:	bne	12498 <__assert_fail@plt+0x12c4>
   128c4:	ldr	r3, [sp, #52]	; 0x34
   128c8:	eor	r3, r3, #1
   128cc:	ands	r2, r2, r3
   128d0:	moveq	r3, r4
   128d4:	beq	1290c <__assert_fail@plt+0x1738>
   128d8:	cmp	r9, r4
   128dc:	str	r2, [sp, #52]	; 0x34
   128e0:	movhi	r3, #39	; 0x27
   128e4:	strbhi	r3, [r8, r4]
   128e8:	add	r3, r4, #1
   128ec:	cmp	r9, r3
   128f0:	movhi	r1, #36	; 0x24
   128f4:	strbhi	r1, [r8, r3]
   128f8:	add	r3, r4, #2
   128fc:	cmp	r9, r3
   12900:	movhi	r1, #39	; 0x27
   12904:	strbhi	r1, [r8, r3]
   12908:	add	r3, r4, #3
   1290c:	cmp	r9, r3
   12910:	add	r4, r3, #1
   12914:	movhi	r2, #92	; 0x5c
   12918:	strbhi	r2, [r8, r3]
   1291c:	cmp	fp, #0
   12920:	beq	12d48 <__assert_fail@plt+0x1b74>
   12924:	ldr	r2, [sp, #28]
   12928:	ldr	r1, [sp, #40]	; 0x28
   1292c:	add	r2, r2, #1
   12930:	cmp	r2, r1
   12934:	bcs	1296c <__assert_fail@plt+0x1798>
   12938:	ldr	r1, [sp, #48]	; 0x30
   1293c:	mov	r6, #48	; 0x30
   12940:	ldrb	r2, [r1, r2]
   12944:	sub	r2, r2, #48	; 0x30
   12948:	cmp	r2, #9
   1294c:	bhi	12d58 <__assert_fail@plt+0x1b84>
   12950:	cmp	r9, r4
   12954:	add	r2, r3, #2
   12958:	strbhi	r6, [r8, r4]
   1295c:	cmp	r9, r2
   12960:	add	r4, r3, #3
   12964:	movhi	r1, #48	; 0x30
   12968:	strbhi	r1, [r8, r2]
   1296c:	mov	r5, #0
   12970:	b	12d50 <__assert_fail@plt+0x1b7c>
   12974:	ldr	r3, [sp, #148]	; 0x94
   12978:	ands	r5, r3, #1
   1297c:	bne	12a04 <__assert_fail@plt+0x1830>
   12980:	mov	fp, #0
   12984:	b	12764 <__assert_fail@plt+0x1590>
   12988:	cmp	r7, #0
   1298c:	bne	1249c <__assert_fail@plt+0x12c8>
   12990:	mov	r5, #0
   12994:	b	12980 <__assert_fail@plt+0x17ac>
   12998:	cmp	sl, #2
   1299c:	bne	12a10 <__assert_fail@plt+0x183c>
   129a0:	cmp	r7, #0
   129a4:	bne	1249c <__assert_fail@plt+0x12c8>
   129a8:	mov	r5, r7
   129ac:	mov	fp, r7
   129b0:	ldr	r3, [sp, #52]	; 0x34
   129b4:	eor	fp, fp, #1
   129b8:	tst	r3, fp
   129bc:	beq	129e8 <__assert_fail@plt+0x1814>
   129c0:	cmp	r9, r4
   129c4:	movhi	r3, #39	; 0x27
   129c8:	strbhi	r3, [r8, r4]
   129cc:	add	r3, r4, #1
   129d0:	add	r4, r4, #2
   129d4:	cmp	r9, r3
   129d8:	movhi	r2, #39	; 0x27
   129dc:	strbhi	r2, [r8, r3]
   129e0:	mov	r3, #0
   129e4:	str	r3, [sp, #52]	; 0x34
   129e8:	cmp	r9, r4
   129ec:	ldr	r3, [sp, #72]	; 0x48
   129f0:	strbhi	r6, [r8, r4]
   129f4:	cmp	r5, #0
   129f8:	add	r4, r4, #1
   129fc:	moveq	r3, #0
   12a00:	str	r3, [sp, #72]	; 0x48
   12a04:	ldr	r3, [sp, #28]
   12a08:	add	r3, r3, #1
   12a0c:	b	121c4 <__assert_fail@plt+0xff0>
   12a10:	ldr	r3, [sp, #24]
   12a14:	and	r3, r3, r7
   12a18:	tst	r5, r3
   12a1c:	moveq	r3, r6
   12a20:	beq	125b0 <__assert_fail@plt+0x13dc>
   12a24:	mov	fp, #0
   12a28:	mov	r5, fp
   12a2c:	b	129b0 <__assert_fail@plt+0x17dc>
   12a30:	mov	r3, #116	; 0x74
   12a34:	b	125b0 <__assert_fail@plt+0x13dc>
   12a38:	mov	r3, #110	; 0x6e
   12a3c:	b	125b0 <__assert_fail@plt+0x13dc>
   12a40:	mov	r3, #97	; 0x61
   12a44:	ldr	r2, [sp, #24]
   12a48:	cmp	r2, #0
   12a4c:	beq	12990 <__assert_fail@plt+0x17bc>
   12a50:	mov	r6, r3
   12a54:	mov	r5, #0
   12a58:	b	127b8 <__assert_fail@plt+0x15e4>
   12a5c:	mov	r3, #98	; 0x62
   12a60:	b	12a44 <__assert_fail@plt+0x1870>
   12a64:	mov	r3, #118	; 0x76
   12a68:	b	12a44 <__assert_fail@plt+0x1870>
   12a6c:	mov	r3, #102	; 0x66
   12a70:	b	12a44 <__assert_fail@plt+0x1870>
   12a74:	ldr	r3, [sp, #40]	; 0x28
   12a78:	cmn	r3, #1
   12a7c:	bne	12a9c <__assert_fail@plt+0x18c8>
   12a80:	ldr	r3, [sp, #48]	; 0x30
   12a84:	ldrb	r3, [r3, #1]
   12a88:	adds	r3, r3, #0
   12a8c:	movne	r3, #1
   12a90:	cmp	r3, #0
   12a94:	bne	12990 <__assert_fail@plt+0x17bc>
   12a98:	b	1287c <__assert_fail@plt+0x16a8>
   12a9c:	ldr	r3, [sp, #40]	; 0x28
   12aa0:	subs	r3, r3, #1
   12aa4:	b	12a8c <__assert_fail@plt+0x18b8>
   12aa8:	mov	r3, #0
   12aac:	mov	r2, #0
   12ab0:	strd	r2, [sp, #96]	; 0x60
   12ab4:	ldr	r3, [sp, #40]	; 0x28
   12ab8:	cmn	r3, #1
   12abc:	bne	12acc <__assert_fail@plt+0x18f8>
   12ac0:	ldr	r0, [sp, #48]	; 0x30
   12ac4:	bl	1109c <strlen@plt>
   12ac8:	str	r0, [sp, #40]	; 0x28
   12acc:	ldr	r5, [sp, #36]	; 0x24
   12ad0:	mov	r3, #0
   12ad4:	str	r3, [sp, #56]	; 0x38
   12ad8:	ldr	r3, [sp, #28]
   12adc:	add	r0, sp, #92	; 0x5c
   12ae0:	ldr	r1, [sp, #40]	; 0x28
   12ae4:	ldr	r2, [sp, #56]	; 0x38
   12ae8:	add	r2, r3, r2
   12aec:	ldr	r3, [sp, #48]	; 0x30
   12af0:	add	fp, r3, r2
   12af4:	sub	r2, r1, r2
   12af8:	add	r3, sp, #96	; 0x60
   12afc:	mov	r1, fp
   12b00:	bl	14bfc <__assert_fail@plt+0x3a28>
   12b04:	subs	r2, r0, #0
   12b08:	beq	12b48 <__assert_fail@plt+0x1974>
   12b0c:	cmn	r2, #1
   12b10:	beq	12d1c <__assert_fail@plt+0x1b48>
   12b14:	cmn	r2, #2
   12b18:	bne	12c8c <__assert_fail@plt+0x1ab8>
   12b1c:	ldr	r3, [sp, #28]
   12b20:	ldr	r2, [sp, #56]	; 0x38
   12b24:	add	r3, r3, r2
   12b28:	ldr	r2, [sp, #40]	; 0x28
   12b2c:	cmp	r2, r3
   12b30:	bls	12d1c <__assert_fail@plt+0x1b48>
   12b34:	ldr	r2, [sp, #56]	; 0x38
   12b38:	ldr	r3, [sp, #80]	; 0x50
   12b3c:	ldrb	r5, [r3, r2]
   12b40:	cmp	r5, #0
   12b44:	bne	12c7c <__assert_fail@plt+0x1aa8>
   12b48:	ldr	r3, [sp, #56]	; 0x38
   12b4c:	cmp	r3, #1
   12b50:	bls	12574 <__assert_fail@plt+0x13a0>
   12b54:	ldr	r3, [sp, #28]
   12b58:	mov	fp, #0
   12b5c:	mov	ip, #92	; 0x5c
   12b60:	ldr	r2, [sp, #56]	; 0x38
   12b64:	add	r3, r3, r2
   12b68:	ldr	r2, [sp, #24]
   12b6c:	str	r3, [sp, #36]	; 0x24
   12b70:	eor	r3, r5, #1
   12b74:	and	r3, r3, r2
   12b78:	mov	r2, #39	; 0x27
   12b7c:	uxtb	r3, r3
   12b80:	cmp	r3, #0
   12b84:	beq	12d24 <__assert_fail@plt+0x1b50>
   12b88:	sub	r0, sl, #2
   12b8c:	cmp	r7, #0
   12b90:	clz	r0, r0
   12b94:	lsr	r0, r0, #5
   12b98:	bne	12498 <__assert_fail@plt+0x12c4>
   12b9c:	ldr	r1, [sp, #52]	; 0x34
   12ba0:	eor	r1, r1, #1
   12ba4:	ands	r1, r0, r1
   12ba8:	beq	12bd8 <__assert_fail@plt+0x1a04>
   12bac:	cmp	r9, r4
   12bb0:	add	r0, r4, #1
   12bb4:	str	r1, [sp, #52]	; 0x34
   12bb8:	strbhi	r2, [r8, r4]
   12bbc:	cmp	r9, r0
   12bc0:	movhi	lr, #36	; 0x24
   12bc4:	strbhi	lr, [r8, r0]
   12bc8:	add	r0, r4, #2
   12bcc:	add	r4, r4, #3
   12bd0:	cmp	r9, r0
   12bd4:	strbhi	r2, [r8, r0]
   12bd8:	cmp	r9, r4
   12bdc:	add	r0, r4, #1
   12be0:	mov	fp, r3
   12be4:	strbhi	ip, [r8, r4]
   12be8:	cmp	r9, r0
   12bec:	lsrhi	r1, r6, #6
   12bf0:	addhi	r1, r1, #48	; 0x30
   12bf4:	strbhi	r1, [r8, r0]
   12bf8:	add	r0, r4, #2
   12bfc:	add	r4, r4, #3
   12c00:	cmp	r9, r0
   12c04:	ubfxhi	r1, r6, #3, #3
   12c08:	and	r6, r6, #7
   12c0c:	add	r6, r6, #48	; 0x30
   12c10:	addhi	r1, r1, #48	; 0x30
   12c14:	strbhi	r1, [r8, r0]
   12c18:	eor	r0, fp, #1
   12c1c:	ldr	r1, [sp, #28]
   12c20:	ldr	lr, [sp, #52]	; 0x34
   12c24:	add	r1, r1, #1
   12c28:	and	r0, r0, lr
   12c2c:	ldr	lr, [sp, #36]	; 0x24
   12c30:	cmp	r1, lr
   12c34:	bcs	129b0 <__assert_fail@plt+0x17dc>
   12c38:	cmp	r0, #0
   12c3c:	beq	12c60 <__assert_fail@plt+0x1a8c>
   12c40:	cmp	r9, r4
   12c44:	add	r0, r4, #1
   12c48:	strbhi	r2, [r8, r4]
   12c4c:	cmp	r9, r0
   12c50:	add	r4, r4, #2
   12c54:	strbhi	r2, [r8, r0]
   12c58:	mov	r0, #0
   12c5c:	str	r0, [sp, #52]	; 0x34
   12c60:	ldr	r0, [sp, #48]	; 0x30
   12c64:	cmp	r9, r4
   12c68:	str	r1, [sp, #28]
   12c6c:	strbhi	r6, [r8, r4]
   12c70:	add	r4, r4, #1
   12c74:	ldrb	r6, [r0, r1]
   12c78:	b	12b80 <__assert_fail@plt+0x19ac>
   12c7c:	ldr	r3, [sp, #56]	; 0x38
   12c80:	add	r3, r3, #1
   12c84:	str	r3, [sp, #56]	; 0x38
   12c88:	b	12b1c <__assert_fail@plt+0x1948>
   12c8c:	cmp	sl, #2
   12c90:	movne	r3, #0
   12c94:	andeq	r3, r7, #1
   12c98:	cmp	r3, #0
   12c9c:	movne	r1, #1
   12ca0:	bne	12cfc <__assert_fail@plt+0x1b28>
   12ca4:	ldr	r0, [sp, #92]	; 0x5c
   12ca8:	str	r2, [sp, #84]	; 0x54
   12cac:	bl	10fb8 <iswprint@plt>
   12cb0:	ldr	r3, [sp, #56]	; 0x38
   12cb4:	cmp	r0, #0
   12cb8:	add	r0, sp, #96	; 0x60
   12cbc:	moveq	r5, #0
   12cc0:	ldr	r2, [sp, #84]	; 0x54
   12cc4:	add	r3, r3, r2
   12cc8:	str	r3, [sp, #56]	; 0x38
   12ccc:	bl	10f64 <mbsinit@plt>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12ad8 <__assert_fail@plt+0x1904>
   12cd8:	b	12b48 <__assert_fail@plt+0x1974>
   12cdc:	ldrb	r3, [fp, #1]!
   12ce0:	cmp	r3, #94	; 0x5e
   12ce4:	beq	125c4 <__assert_fail@plt+0x13f0>
   12ce8:	bhi	12d08 <__assert_fail@plt+0x1b34>
   12cec:	sub	r3, r3, #91	; 0x5b
   12cf0:	cmp	r3, #1
   12cf4:	bls	125c4 <__assert_fail@plt+0x13f0>
   12cf8:	add	r1, r1, #1
   12cfc:	cmp	r1, r2
   12d00:	bne	12cdc <__assert_fail@plt+0x1b08>
   12d04:	b	12ca4 <__assert_fail@plt+0x1ad0>
   12d08:	cmp	r3, #96	; 0x60
   12d0c:	beq	125c4 <__assert_fail@plt+0x13f0>
   12d10:	cmp	r3, #124	; 0x7c
   12d14:	bne	12cf8 <__assert_fail@plt+0x1b24>
   12d18:	b	125c4 <__assert_fail@plt+0x13f0>
   12d1c:	mov	r5, #0
   12d20:	b	12b48 <__assert_fail@plt+0x1974>
   12d24:	ldr	r1, [sp, #64]	; 0x40
   12d28:	cmp	r1, #0
   12d2c:	beq	12c18 <__assert_fail@plt+0x1a44>
   12d30:	cmp	r9, r4
   12d34:	mov	r1, #0
   12d38:	strbhi	ip, [r8, r4]
   12d3c:	add	r4, r4, #1
   12d40:	str	r1, [sp, #64]	; 0x40
   12d44:	b	12c18 <__assert_fail@plt+0x1a44>
   12d48:	mov	r5, fp
   12d4c:	ldr	fp, [sp, #24]
   12d50:	mov	r6, #48	; 0x30
   12d54:	b	12764 <__assert_fail@plt+0x1590>
   12d58:	mov	r5, #0
   12d5c:	b	12764 <__assert_fail@plt+0x1590>
   12d60:	mov	r6, r1
   12d64:	b	12990 <__assert_fail@plt+0x17bc>
   12d68:	mov	r6, r1
   12d6c:	b	12980 <__assert_fail@plt+0x17ac>
   12d70:	ldr	r2, [sp, #28]
   12d74:	ldr	r3, [sp, #40]	; 0x28
   12d78:	subs	r3, r3, r2
   12d7c:	movne	r3, #1
   12d80:	b	121e8 <__assert_fail@plt+0x1014>
   12d84:	ldr	r3, [sp, #60]	; 0x3c
   12d88:	mov	sl, #2
   12d8c:	ldr	r7, [sp, #72]	; 0x48
   12d90:	adds	r6, r3, #0
   12d94:	mov	r5, r3
   12d98:	movne	r6, #1
   12d9c:	cmp	r9, #0
   12da0:	movne	r6, #0
   12da4:	cmp	r6, #0
   12da8:	bne	12178 <__assert_fail@plt+0xfa4>
   12dac:	ldr	r3, [sp, #68]	; 0x44
   12db0:	ldr	r2, [sp, #44]	; 0x2c
   12db4:	cmp	r2, #0
   12db8:	moveq	r3, #0
   12dbc:	andne	r3, r3, #1
   12dc0:	cmp	r3, #0
   12dc4:	movne	r3, r2
   12dc8:	subne	r3, r3, #1
   12dcc:	bne	12dfc <__assert_fail@plt+0x1c28>
   12dd0:	cmp	r9, r4
   12dd4:	movhi	r3, #0
   12dd8:	strbhi	r3, [r8, r4]
   12ddc:	mov	r0, r4
   12de0:	add	sp, sp, #108	; 0x6c
   12de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de8:	mov	r3, r7
   12dec:	b	12db0 <__assert_fail@plt+0x1bdc>
   12df0:	cmp	r9, r4
   12df4:	strbhi	r2, [r8, r4]
   12df8:	add	r4, r4, #1
   12dfc:	ldrb	r2, [r3, #1]!
   12e00:	cmp	r2, #0
   12e04:	bne	12df0 <__assert_fail@plt+0x1c1c>
   12e08:	b	12dd0 <__assert_fail@plt+0x1bfc>
   12e0c:	muleq	r1, ip, r7
   12e10:	andeq	r5, r1, pc, lsr #15
   12e14:	andeq	r5, r1, sp, lsr #15
   12e18:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e20:	sub	sp, sp, #52	; 0x34
   12e24:	mov	r6, r0
   12e28:	mov	r5, r3
   12e2c:	mov	r8, r1
   12e30:	mov	r9, r2
   12e34:	bl	110b4 <__errno_location@plt>
   12e38:	ldr	r3, [r0]
   12e3c:	cmn	r6, #-2147483647	; 0x80000001
   12e40:	str	r0, [sp, #24]
   12e44:	ldr	r7, [pc, #368]	; 12fbc <__assert_fail@plt+0x1de8>
   12e48:	str	r3, [sp, #32]
   12e4c:	movne	r3, #0
   12e50:	moveq	r3, #1
   12e54:	orrs	r3, r3, r6, lsr #31
   12e58:	ldr	r4, [r7]
   12e5c:	beq	12e64 <__assert_fail@plt+0x1c90>
   12e60:	bl	111b0 <abort@plt>
   12e64:	ldr	r2, [r7, #4]
   12e68:	cmp	r2, r6
   12e6c:	bgt	12edc <__assert_fail@plt+0x1d08>
   12e70:	add	sl, r7, #8
   12e74:	mov	r3, #8
   12e78:	cmp	r4, sl
   12e7c:	add	r1, sp, #44	; 0x2c
   12e80:	str	r2, [sp, #44]	; 0x2c
   12e84:	sub	r2, r6, r2
   12e88:	movne	r0, r4
   12e8c:	moveq	r0, #0
   12e90:	add	r2, r2, #1
   12e94:	str	r3, [sp]
   12e98:	mvn	r3, #-2147483648	; 0x80000000
   12e9c:	bl	13eac <__assert_fail@plt+0x2cd8>
   12ea0:	cmp	r4, sl
   12ea4:	mov	fp, r0
   12ea8:	str	r0, [r7]
   12eac:	ldmeq	r4, {r0, r1}
   12eb0:	mov	r4, fp
   12eb4:	ldr	r2, [sp, #44]	; 0x2c
   12eb8:	stmeq	fp, {r0, r1}
   12ebc:	mov	r1, #0
   12ec0:	ldr	r0, [r7, #4]
   12ec4:	sub	r2, r2, r0
   12ec8:	add	r0, fp, r0, lsl #3
   12ecc:	lsl	r2, r2, #3
   12ed0:	bl	110d8 <memset@plt>
   12ed4:	ldr	r3, [sp, #44]	; 0x2c
   12ed8:	str	r3, [r7, #4]
   12edc:	ldr	r3, [r5, #4]
   12ee0:	add	sl, r4, r6, lsl #3
   12ee4:	mov	r2, r8
   12ee8:	ldr	fp, [r4, r6, lsl #3]
   12eec:	ldr	r7, [sl, #4]
   12ef0:	orr	r3, r3, #1
   12ef4:	str	r3, [sp, #28]
   12ef8:	add	r3, r5, #8
   12efc:	mov	r1, fp
   12f00:	str	r3, [sp, #36]	; 0x24
   12f04:	mov	r0, r7
   12f08:	ldr	r3, [r5, #44]	; 0x2c
   12f0c:	str	r3, [sp, #16]
   12f10:	ldr	r3, [r5, #40]	; 0x28
   12f14:	str	r3, [sp, #12]
   12f18:	add	r3, r5, #8
   12f1c:	str	r3, [sp, #8]
   12f20:	ldr	r3, [sp, #28]
   12f24:	str	r3, [sp, #4]
   12f28:	ldr	r3, [r5]
   12f2c:	str	r3, [sp]
   12f30:	mov	r3, r9
   12f34:	bl	1212c <__assert_fail@plt+0xf58>
   12f38:	cmp	fp, r0
   12f3c:	bhi	12fa4 <__assert_fail@plt+0x1dd0>
   12f40:	ldr	r3, [pc, #120]	; 12fc0 <__assert_fail@plt+0x1dec>
   12f44:	add	fp, r0, #1
   12f48:	str	fp, [r4, r6, lsl #3]
   12f4c:	cmp	r7, r3
   12f50:	beq	12f5c <__assert_fail@plt+0x1d88>
   12f54:	mov	r0, r7
   12f58:	bl	11ed4 <__assert_fail@plt+0xd00>
   12f5c:	mov	r0, fp
   12f60:	bl	13d9c <__assert_fail@plt+0x2bc8>
   12f64:	ldr	r3, [r5, #44]	; 0x2c
   12f68:	mov	r2, r8
   12f6c:	mov	r1, fp
   12f70:	str	r0, [sl, #4]
   12f74:	mov	r7, r0
   12f78:	str	r3, [sp, #16]
   12f7c:	ldr	r3, [r5, #40]	; 0x28
   12f80:	str	r3, [sp, #12]
   12f84:	add	r3, r5, #8
   12f88:	str	r3, [sp, #8]
   12f8c:	ldr	r3, [sp, #28]
   12f90:	str	r3, [sp, #4]
   12f94:	ldr	r3, [r5]
   12f98:	str	r3, [sp]
   12f9c:	mov	r3, r9
   12fa0:	bl	1212c <__assert_fail@plt+0xf58>
   12fa4:	ldr	r3, [sp, #24]
   12fa8:	mov	r0, r7
   12fac:	ldr	r2, [sp, #32]
   12fb0:	str	r2, [r3]
   12fb4:	add	sp, sp, #52	; 0x34
   12fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fbc:	andeq	r6, r2, r4, lsr #2
   12fc0:	muleq	r2, r4, r1
   12fc4:	push	{r4, r5, r6, lr}
   12fc8:	mov	r5, r0
   12fcc:	bl	110b4 <__errno_location@plt>
   12fd0:	mov	r4, r0
   12fd4:	cmp	r5, #0
   12fd8:	ldr	r0, [pc, #20]	; 12ff4 <__assert_fail@plt+0x1e20>
   12fdc:	mov	r1, #48	; 0x30
   12fe0:	movne	r0, r5
   12fe4:	ldr	r6, [r4]
   12fe8:	bl	13f9c <__assert_fail@plt+0x2dc8>
   12fec:	str	r6, [r4]
   12ff0:	pop	{r4, r5, r6, pc}
   12ff4:	muleq	r2, r4, r2
   12ff8:	ldr	r3, [pc, #12]	; 1300c <__assert_fail@plt+0x1e38>
   12ffc:	cmp	r0, #0
   13000:	moveq	r0, r3
   13004:	ldr	r0, [r0]
   13008:	bx	lr
   1300c:	muleq	r2, r4, r2
   13010:	ldr	r3, [pc, #12]	; 13024 <__assert_fail@plt+0x1e50>
   13014:	cmp	r0, #0
   13018:	moveq	r0, r3
   1301c:	str	r1, [r0]
   13020:	bx	lr
   13024:	muleq	r2, r4, r2
   13028:	ldr	r3, [pc, #52]	; 13064 <__assert_fail@plt+0x1e90>
   1302c:	cmp	r0, #0
   13030:	push	{lr}		; (str lr, [sp, #-4]!)
   13034:	lsr	lr, r1, #5
   13038:	and	r1, r1, #31
   1303c:	moveq	r0, r3
   13040:	add	r3, r0, #8
   13044:	ldr	ip, [r3, lr, lsl #2]
   13048:	lsr	r0, ip, r1
   1304c:	eor	r2, r2, r0
   13050:	and	r0, r0, #1
   13054:	and	r2, r2, #1
   13058:	eor	r1, ip, r2, lsl r1
   1305c:	str	r1, [r3, lr, lsl #2]
   13060:	pop	{pc}		; (ldr pc, [sp], #4)
   13064:	muleq	r2, r4, r2
   13068:	ldr	r3, [pc, #16]	; 13080 <__assert_fail@plt+0x1eac>
   1306c:	cmp	r0, #0
   13070:	movne	r3, r0
   13074:	ldr	r0, [r3, #4]
   13078:	str	r1, [r3, #4]
   1307c:	bx	lr
   13080:	muleq	r2, r4, r2
   13084:	ldr	r3, [pc, #44]	; 130b8 <__assert_fail@plt+0x1ee4>
   13088:	cmp	r0, #0
   1308c:	moveq	r0, r3
   13090:	mov	r3, #10
   13094:	cmp	r2, #0
   13098:	cmpne	r1, #0
   1309c:	str	r3, [r0]
   130a0:	bne	130ac <__assert_fail@plt+0x1ed8>
   130a4:	push	{r4, lr}
   130a8:	bl	111b0 <abort@plt>
   130ac:	str	r1, [r0, #40]	; 0x28
   130b0:	str	r2, [r0, #44]	; 0x2c
   130b4:	bx	lr
   130b8:	muleq	r2, r4, r2
   130bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130c0:	sub	sp, sp, #24
   130c4:	mov	sl, r3
   130c8:	mov	r7, r0
   130cc:	mov	r8, r1
   130d0:	mov	r9, r2
   130d4:	ldr	r4, [sp, #56]	; 0x38
   130d8:	ldr	r3, [pc, #88]	; 13138 <__assert_fail@plt+0x1f64>
   130dc:	cmp	r4, #0
   130e0:	moveq	r4, r3
   130e4:	bl	110b4 <__errno_location@plt>
   130e8:	ldr	r3, [r4, #44]	; 0x2c
   130ec:	mov	r5, r0
   130f0:	mov	r2, r9
   130f4:	mov	r1, r8
   130f8:	mov	r0, r7
   130fc:	ldr	r6, [r5]
   13100:	str	r3, [sp, #16]
   13104:	ldr	r3, [r4, #40]	; 0x28
   13108:	str	r3, [sp, #12]
   1310c:	add	r3, r4, #8
   13110:	str	r3, [sp, #8]
   13114:	ldr	r3, [r4, #4]
   13118:	str	r3, [sp, #4]
   1311c:	ldr	r3, [r4]
   13120:	str	r3, [sp]
   13124:	mov	r3, sl
   13128:	bl	1212c <__assert_fail@plt+0xf58>
   1312c:	str	r6, [r5]
   13130:	add	sp, sp, #24
   13134:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13138:	muleq	r2, r4, r2
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	cmp	r3, #0
   13144:	sub	sp, sp, #44	; 0x2c
   13148:	mov	r6, r2
   1314c:	mov	sl, r1
   13150:	mov	r9, r0
   13154:	ldr	r4, [pc, #176]	; 1320c <__assert_fail@plt+0x2038>
   13158:	movne	r4, r3
   1315c:	bl	110b4 <__errno_location@plt>
   13160:	ldr	r3, [r0]
   13164:	mov	r1, #0
   13168:	mov	r2, r9
   1316c:	mov	r8, r0
   13170:	mov	r0, r1
   13174:	ldr	r5, [r4, #4]
   13178:	add	fp, r4, #8
   1317c:	str	r3, [sp, #28]
   13180:	ldr	r3, [r4, #44]	; 0x2c
   13184:	cmp	r6, #0
   13188:	orreq	r5, r5, #1
   1318c:	str	r3, [sp, #16]
   13190:	ldr	r3, [r4, #40]	; 0x28
   13194:	stmib	sp, {r5, fp}
   13198:	str	r3, [sp, #12]
   1319c:	ldr	r3, [r4]
   131a0:	str	r3, [sp]
   131a4:	mov	r3, sl
   131a8:	bl	1212c <__assert_fail@plt+0xf58>
   131ac:	add	r1, r0, #1
   131b0:	mov	r7, r0
   131b4:	mov	r0, r1
   131b8:	str	r1, [sp, #36]	; 0x24
   131bc:	bl	13d9c <__assert_fail@plt+0x2bc8>
   131c0:	ldr	r3, [r4, #44]	; 0x2c
   131c4:	mov	r2, r9
   131c8:	ldr	r1, [sp, #36]	; 0x24
   131cc:	str	r3, [sp, #16]
   131d0:	ldr	r3, [r4, #40]	; 0x28
   131d4:	stmib	sp, {r5, fp}
   131d8:	str	r0, [sp, #32]
   131dc:	str	r3, [sp, #12]
   131e0:	ldr	r3, [r4]
   131e4:	str	r3, [sp]
   131e8:	mov	r3, sl
   131ec:	bl	1212c <__assert_fail@plt+0xf58>
   131f0:	ldr	r3, [sp, #28]
   131f4:	cmp	r6, #0
   131f8:	ldr	r0, [sp, #32]
   131fc:	str	r3, [r8]
   13200:	strne	r7, [r6]
   13204:	add	sp, sp, #44	; 0x2c
   13208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1320c:	muleq	r2, r4, r2
   13210:	mov	r3, r2
   13214:	mov	r2, #0
   13218:	b	1313c <__assert_fail@plt+0x1f68>
   1321c:	push	{r4, r5, r6, r7, r8, lr}
   13220:	mov	r6, #1
   13224:	ldr	r4, [pc, #100]	; 13290 <__assert_fail@plt+0x20bc>
   13228:	ldr	r5, [r4]
   1322c:	add	r7, r5, #4
   13230:	ldr	r3, [r4, #4]
   13234:	cmp	r3, r6
   13238:	bgt	13280 <__assert_fail@plt+0x20ac>
   1323c:	ldr	r6, [pc, #80]	; 13294 <__assert_fail@plt+0x20c0>
   13240:	ldr	r0, [r5, #4]
   13244:	cmp	r0, r6
   13248:	beq	1325c <__assert_fail@plt+0x2088>
   1324c:	bl	11ed4 <__assert_fail@plt+0xd00>
   13250:	mov	r3, #256	; 0x100
   13254:	str	r3, [r4, #8]
   13258:	str	r6, [r4, #12]
   1325c:	ldr	r6, [pc, #52]	; 13298 <__assert_fail@plt+0x20c4>
   13260:	cmp	r5, r6
   13264:	beq	13274 <__assert_fail@plt+0x20a0>
   13268:	mov	r0, r5
   1326c:	bl	11ed4 <__assert_fail@plt+0xd00>
   13270:	str	r6, [r4]
   13274:	mov	r3, #1
   13278:	str	r3, [r4, #4]
   1327c:	pop	{r4, r5, r6, r7, r8, pc}
   13280:	ldr	r0, [r7, r6, lsl #3]
   13284:	add	r6, r6, #1
   13288:	bl	11ed4 <__assert_fail@plt+0xd00>
   1328c:	b	13230 <__assert_fail@plt+0x205c>
   13290:	andeq	r6, r2, r4, lsr #2
   13294:	muleq	r2, r4, r1
   13298:	andeq	r6, r2, ip, lsr #2
   1329c:	ldr	r3, [pc, #4]	; 132a8 <__assert_fail@plt+0x20d4>
   132a0:	mvn	r2, #0
   132a4:	b	12e1c <__assert_fail@plt+0x1c48>
   132a8:	muleq	r2, r4, r2
   132ac:	ldr	r3, [pc]	; 132b4 <__assert_fail@plt+0x20e0>
   132b0:	b	12e1c <__assert_fail@plt+0x1c48>
   132b4:	muleq	r2, r4, r2
   132b8:	mov	r1, r0
   132bc:	mov	r0, #0
   132c0:	b	1329c <__assert_fail@plt+0x20c8>
   132c4:	mov	r2, r1
   132c8:	mov	r1, r0
   132cc:	mov	r0, #0
   132d0:	b	132ac <__assert_fail@plt+0x20d8>
   132d4:	push	{r4, r5, lr}
   132d8:	sub	sp, sp, #52	; 0x34
   132dc:	mov	r5, r2
   132e0:	mov	r4, r0
   132e4:	mov	r0, sp
   132e8:	bl	11fd0 <__assert_fail@plt+0xdfc>
   132ec:	mov	r3, sp
   132f0:	mvn	r2, #0
   132f4:	mov	r1, r5
   132f8:	mov	r0, r4
   132fc:	bl	12e1c <__assert_fail@plt+0x1c48>
   13300:	add	sp, sp, #52	; 0x34
   13304:	pop	{r4, r5, pc}
   13308:	push	{r4, r5, r6, lr}
   1330c:	sub	sp, sp, #48	; 0x30
   13310:	mov	r5, r2
   13314:	mov	r6, r3
   13318:	mov	r4, r0
   1331c:	mov	r0, sp
   13320:	bl	11fd0 <__assert_fail@plt+0xdfc>
   13324:	mov	r3, sp
   13328:	mov	r2, r6
   1332c:	mov	r1, r5
   13330:	mov	r0, r4
   13334:	bl	12e1c <__assert_fail@plt+0x1c48>
   13338:	add	sp, sp, #48	; 0x30
   1333c:	pop	{r4, r5, r6, pc}
   13340:	mov	r2, r1
   13344:	mov	r1, r0
   13348:	mov	r0, #0
   1334c:	b	132d4 <__assert_fail@plt+0x2100>
   13350:	mov	r3, r2
   13354:	mov	r2, r1
   13358:	mov	r1, r0
   1335c:	mov	r0, #0
   13360:	b	13308 <__assert_fail@plt+0x2134>
   13364:	push	{r4, r5, r6, lr}
   13368:	mov	r4, r0
   1336c:	mov	r5, r1
   13370:	mov	r6, r2
   13374:	sub	sp, sp, #48	; 0x30
   13378:	mov	ip, sp
   1337c:	ldr	lr, [pc, #64]	; 133c4 <__assert_fail@plt+0x21f0>
   13380:	ldm	lr!, {r0, r1, r2, r3}
   13384:	stmia	ip!, {r0, r1, r2, r3}
   13388:	ldm	lr!, {r0, r1, r2, r3}
   1338c:	stmia	ip!, {r0, r1, r2, r3}
   13390:	ldm	lr, {r0, r1, r2, r3}
   13394:	stm	ip, {r0, r1, r2, r3}
   13398:	mov	r1, r6
   1339c:	mov	r2, #1
   133a0:	mov	r0, sp
   133a4:	bl	13028 <__assert_fail@plt+0x1e54>
   133a8:	mov	r3, sp
   133ac:	mov	r2, r5
   133b0:	mov	r1, r4
   133b4:	mov	r0, #0
   133b8:	bl	12e1c <__assert_fail@plt+0x1c48>
   133bc:	add	sp, sp, #48	; 0x30
   133c0:	pop	{r4, r5, r6, pc}
   133c4:	muleq	r2, r4, r2
   133c8:	mov	r2, r1
   133cc:	mvn	r1, #0
   133d0:	b	13364 <__assert_fail@plt+0x2190>
   133d4:	mov	r1, #58	; 0x3a
   133d8:	b	133c8 <__assert_fail@plt+0x21f4>
   133dc:	mov	r2, #58	; 0x3a
   133e0:	b	13364 <__assert_fail@plt+0x2190>
   133e4:	push	{r4, r5, lr}
   133e8:	sub	sp, sp, #100	; 0x64
   133ec:	mov	r4, r0
   133f0:	mov	r0, sp
   133f4:	mov	r5, r2
   133f8:	bl	11fd0 <__assert_fail@plt+0xdfc>
   133fc:	mov	ip, sp
   13400:	add	lr, sp, #48	; 0x30
   13404:	ldm	ip!, {r0, r1, r2, r3}
   13408:	stmia	lr!, {r0, r1, r2, r3}
   1340c:	ldm	ip!, {r0, r1, r2, r3}
   13410:	stmia	lr!, {r0, r1, r2, r3}
   13414:	ldm	ip, {r0, r1, r2, r3}
   13418:	stm	lr, {r0, r1, r2, r3}
   1341c:	mov	r2, #1
   13420:	mov	r1, #58	; 0x3a
   13424:	add	r0, sp, #48	; 0x30
   13428:	bl	13028 <__assert_fail@plt+0x1e54>
   1342c:	add	r3, sp, #48	; 0x30
   13430:	mvn	r2, #0
   13434:	mov	r1, r5
   13438:	mov	r0, r4
   1343c:	bl	12e1c <__assert_fail@plt+0x1c48>
   13440:	add	sp, sp, #100	; 0x64
   13444:	pop	{r4, r5, pc}
   13448:	push	{r4, r5, r6, r7, lr}
   1344c:	mov	r4, r0
   13450:	mov	r6, r1
   13454:	mov	r7, r2
   13458:	mov	r5, r3
   1345c:	sub	sp, sp, #52	; 0x34
   13460:	ldr	lr, [pc, #68]	; 134ac <__assert_fail@plt+0x22d8>
   13464:	mov	ip, sp
   13468:	ldm	lr!, {r0, r1, r2, r3}
   1346c:	stmia	ip!, {r0, r1, r2, r3}
   13470:	ldm	lr!, {r0, r1, r2, r3}
   13474:	stmia	ip!, {r0, r1, r2, r3}
   13478:	ldm	lr, {r0, r1, r2, r3}
   1347c:	stm	ip, {r0, r1, r2, r3}
   13480:	mov	r2, r7
   13484:	mov	r1, r6
   13488:	mov	r0, sp
   1348c:	bl	13084 <__assert_fail@plt+0x1eb0>
   13490:	ldr	r2, [sp, #72]	; 0x48
   13494:	mov	r3, sp
   13498:	mov	r1, r5
   1349c:	mov	r0, r4
   134a0:	bl	12e1c <__assert_fail@plt+0x1c48>
   134a4:	add	sp, sp, #52	; 0x34
   134a8:	pop	{r4, r5, r6, r7, pc}
   134ac:	muleq	r2, r4, r2
   134b0:	mvn	ip, #0
   134b4:	push	{r0, r1, r2, lr}
   134b8:	str	ip, [sp]
   134bc:	bl	13448 <__assert_fail@plt+0x2274>
   134c0:	add	sp, sp, #12
   134c4:	pop	{pc}		; (ldr pc, [sp], #4)
   134c8:	mov	r3, r2
   134cc:	mov	r2, r1
   134d0:	mov	r1, r0
   134d4:	mov	r0, #0
   134d8:	b	134b0 <__assert_fail@plt+0x22dc>
   134dc:	push	{r0, r1, r2, lr}
   134e0:	str	r3, [sp]
   134e4:	mov	r3, r2
   134e8:	mov	r2, r1
   134ec:	mov	r1, r0
   134f0:	mov	r0, #0
   134f4:	bl	13448 <__assert_fail@plt+0x2274>
   134f8:	add	sp, sp, #12
   134fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13500:	ldr	r3, [pc]	; 13508 <__assert_fail@plt+0x2334>
   13504:	b	12e1c <__assert_fail@plt+0x1c48>
   13508:	andeq	r6, r2, r4, lsr r1
   1350c:	mov	r2, r1
   13510:	mov	r1, r0
   13514:	mov	r0, #0
   13518:	b	13500 <__assert_fail@plt+0x232c>
   1351c:	mvn	r2, #0
   13520:	b	13500 <__assert_fail@plt+0x232c>
   13524:	mov	r1, r0
   13528:	mov	r0, #0
   1352c:	b	1351c <__assert_fail@plt+0x2348>
   13530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13534:	sub	sp, sp, #44	; 0x2c
   13538:	subs	sl, r3, #0
   1353c:	mvneq	r7, #0
   13540:	mov	fp, r2
   13544:	mov	r4, r1
   13548:	ldr	r3, [sp, #80]	; 0x50
   1354c:	ldrne	r7, [sl]
   13550:	ldr	r9, [r2]
   13554:	cmp	r3, #0
   13558:	ldrne	r2, [sp, #80]	; 0x50
   1355c:	movne	r3, #0
   13560:	strne	r3, [r2]
   13564:	ldr	r3, [sp, #84]	; 0x54
   13568:	cmp	r3, #0
   1356c:	ldrne	r2, [sp, #84]	; 0x54
   13570:	movne	r3, #0
   13574:	strne	r3, [r2]
   13578:	cmp	r1, #0
   1357c:	bne	13688 <__assert_fail@plt+0x24b4>
   13580:	ldrb	r3, [r0]
   13584:	cmp	r3, #0
   13588:	moveq	r8, r1
   1358c:	moveq	r6, r1
   13590:	moveq	r5, r1
   13594:	beq	13624 <__assert_fail@plt+0x2450>
   13598:	bl	14010 <__assert_fail@plt+0x2e3c>
   1359c:	mov	r5, r0
   135a0:	mov	r6, r4
   135a4:	ldrb	r3, [r5]
   135a8:	adds	r4, r4, #0
   135ac:	movne	r4, #1
   135b0:	cmp	r6, #0
   135b4:	movne	r4, #0
   135b8:	cmp	r3, #43	; 0x2b
   135bc:	bne	136c8 <__assert_fail@plt+0x24f4>
   135c0:	cmp	r4, #0
   135c4:	movne	r4, #0
   135c8:	ldrne	r3, [pc, #484]	; 137b4 <__assert_fail@plt+0x25e0>
   135cc:	bne	13610 <__assert_fail@plt+0x243c>
   135d0:	mov	r2, #10
   135d4:	mov	r1, r4
   135d8:	ldr	r3, [pc, #472]	; 137b8 <__assert_fail@plt+0x25e4>
   135dc:	mov	r0, r5
   135e0:	str	r3, [sp]
   135e4:	add	r3, sp, #16
   135e8:	bl	140e8 <__assert_fail@plt+0x2f14>
   135ec:	cmp	r0, #0
   135f0:	ldrne	r3, [pc, #452]	; 137bc <__assert_fail@plt+0x25e8>
   135f4:	bne	1360c <__assert_fail@plt+0x2438>
   135f8:	ldr	r3, [sp, #16]
   135fc:	cmn	r3, #1
   13600:	movne	r9, r3
   13604:	ldr	r3, [pc, #432]	; 137bc <__assert_fail@plt+0x25e8>
   13608:	movne	r3, #0
   1360c:	mov	r4, #0
   13610:	str	r3, [sp, #12]
   13614:	mov	r8, r5
   13618:	bl	11144 <endpwent@plt>
   1361c:	ldr	r3, [sp, #12]
   13620:	mov	r5, r3
   13624:	clz	r3, r5
   13628:	cmp	r6, #0
   1362c:	lsr	r3, r3, #5
   13630:	moveq	r3, #0
   13634:	cmp	r3, #0
   13638:	beq	13748 <__assert_fail@plt+0x2574>
   1363c:	ldrb	r3, [r6]
   13640:	cmp	r3, #43	; 0x2b
   13644:	bne	13720 <__assert_fail@plt+0x254c>
   13648:	ldr	r3, [pc, #360]	; 137b8 <__assert_fail@plt+0x25e4>
   1364c:	mov	r2, #10
   13650:	mov	r1, #0
   13654:	mov	r0, r6
   13658:	str	r3, [sp]
   1365c:	add	r3, sp, #16
   13660:	bl	140e8 <__assert_fail@plt+0x2f14>
   13664:	cmp	r0, #0
   13668:	ldrne	r5, [pc, #336]	; 137c0 <__assert_fail@plt+0x25ec>
   1366c:	bne	13738 <__assert_fail@plt+0x2564>
   13670:	ldr	r3, [sp, #16]
   13674:	ldr	r5, [pc, #324]	; 137c0 <__assert_fail@plt+0x25ec>
   13678:	cmn	r3, #1
   1367c:	movne	r7, r3
   13680:	movne	r5, #0
   13684:	b	13738 <__assert_fail@plt+0x2564>
   13688:	subs	r6, r1, r0
   1368c:	moveq	r5, r6
   13690:	beq	136a8 <__assert_fail@plt+0x24d4>
   13694:	add	r1, r6, #1
   13698:	bl	13fc0 <__assert_fail@plt+0x2dec>
   1369c:	mov	r5, r0
   136a0:	mov	r3, #0
   136a4:	strb	r3, [r0, r6]
   136a8:	ldrb	r6, [r4, #1]
   136ac:	cmp	r6, #0
   136b0:	addne	r6, r4, #1
   136b4:	cmp	r5, #0
   136b8:	moveq	r8, r5
   136bc:	moveq	r4, r5
   136c0:	bne	135a4 <__assert_fail@plt+0x23d0>
   136c4:	b	13624 <__assert_fail@plt+0x2450>
   136c8:	mov	r0, r5
   136cc:	bl	10f04 <getpwnam@plt>
   136d0:	cmp	r0, #0
   136d4:	beq	135c0 <__assert_fail@plt+0x23ec>
   136d8:	cmp	r4, #0
   136dc:	ldr	r9, [r0, #8]
   136e0:	moveq	r3, r4
   136e4:	beq	13610 <__assert_fail@plt+0x243c>
   136e8:	ldr	r7, [r0, #12]
   136ec:	mov	r0, r7
   136f0:	bl	111bc <getgrgid@plt>
   136f4:	subs	r1, r0, #0
   136f8:	ldrne	r0, [r1]
   136fc:	bne	1370c <__assert_fail@plt+0x2538>
   13700:	add	r2, sp, #16
   13704:	mov	r0, r7
   13708:	bl	14b60 <__assert_fail@plt+0x398c>
   1370c:	bl	14010 <__assert_fail@plt+0x2e3c>
   13710:	mov	r4, r0
   13714:	bl	10ee0 <endgrent@plt>
   13718:	mov	r3, #0
   1371c:	b	13610 <__assert_fail@plt+0x243c>
   13720:	mov	r0, r6
   13724:	bl	111c8 <getgrnam@plt>
   13728:	cmp	r0, #0
   1372c:	movne	r5, #0
   13730:	ldrne	r7, [r0, #8]
   13734:	beq	13648 <__assert_fail@plt+0x2474>
   13738:	bl	10ee0 <endgrent@plt>
   1373c:	mov	r0, r6
   13740:	bl	14010 <__assert_fail@plt+0x2e3c>
   13744:	mov	r4, r0
   13748:	cmp	r5, #0
   1374c:	bne	1377c <__assert_fail@plt+0x25a8>
   13750:	ldr	r3, [sp, #80]	; 0x50
   13754:	cmp	sl, #0
   13758:	str	r9, [fp]
   1375c:	strne	r7, [sl]
   13760:	cmp	r3, #0
   13764:	strne	r8, [r3]
   13768:	movne	r8, #0
   1376c:	ldr	r3, [sp, #84]	; 0x54
   13770:	cmp	r3, #0
   13774:	strne	r4, [r3]
   13778:	movne	r4, #0
   1377c:	mov	r0, r8
   13780:	bl	11ed4 <__assert_fail@plt+0xd00>
   13784:	mov	r0, r4
   13788:	bl	11ed4 <__assert_fail@plt+0xd00>
   1378c:	cmp	r5, #0
   13790:	beq	137a8 <__assert_fail@plt+0x25d4>
   13794:	mov	r1, r5
   13798:	mov	r2, #5
   1379c:	mov	r0, #0
   137a0:	bl	10f88 <dcgettext@plt>
   137a4:	mov	r5, r0
   137a8:	mov	r0, r5
   137ac:	add	sp, sp, #44	; 0x2c
   137b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b4:	andeq	r5, r1, sl, lsl #16
   137b8:	andeq	r5, r1, r4, lsl #5
   137bc:	strdeq	r5, [r1], -sp
   137c0:	andeq	r5, r1, r7, lsl r8
   137c4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   137c8:	subs	r5, r2, #0
   137cc:	mov	r7, r0
   137d0:	mov	r8, r1
   137d4:	mov	r9, r3
   137d8:	moveq	r4, r5
   137dc:	ldr	sl, [sp, #40]	; 0x28
   137e0:	beq	137f0 <__assert_fail@plt+0x261c>
   137e4:	mov	r1, #58	; 0x3a
   137e8:	bl	110a8 <strchr@plt>
   137ec:	mov	r4, r0
   137f0:	mov	r1, r4
   137f4:	mov	r3, r5
   137f8:	stm	sp, {r9, sl}
   137fc:	mov	r2, r8
   13800:	mov	r0, r7
   13804:	clz	r4, r4
   13808:	lsr	r4, r4, #5
   1380c:	bl	13530 <__assert_fail@plt+0x235c>
   13810:	cmp	r5, #0
   13814:	mov	r6, r0
   13818:	moveq	r4, #0
   1381c:	cmp	r4, #0
   13820:	beq	13860 <__assert_fail@plt+0x268c>
   13824:	cmp	r0, #0
   13828:	beq	1385c <__assert_fail@plt+0x2688>
   1382c:	mov	r1, #46	; 0x2e
   13830:	mov	r0, r7
   13834:	bl	110a8 <strchr@plt>
   13838:	subs	r1, r0, #0
   1383c:	beq	13860 <__assert_fail@plt+0x268c>
   13840:	mov	r3, r5
   13844:	mov	r2, r8
   13848:	stm	sp, {r9, sl}
   1384c:	mov	r0, r7
   13850:	bl	13530 <__assert_fail@plt+0x235c>
   13854:	cmp	r0, #0
   13858:	bne	13860 <__assert_fail@plt+0x268c>
   1385c:	mov	r6, #0
   13860:	mov	r0, r6
   13864:	add	sp, sp, #8
   13868:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1386c:	push	{r4, r5, r6, lr}
   13870:	cmp	r1, #0
   13874:	sub	sp, sp, #32
   13878:	mov	r5, r0
   1387c:	ldr	r4, [sp, #48]	; 0x30
   13880:	ldr	r6, [sp, #52]	; 0x34
   13884:	beq	13938 <__assert_fail@plt+0x2764>
   13888:	strd	r2, [sp]
   1388c:	mov	r3, r1
   13890:	mov	r1, #1
   13894:	ldr	r2, [pc, #856]	; 13bf4 <__assert_fail@plt+0x2a20>
   13898:	bl	11108 <__fprintf_chk@plt>
   1389c:	mov	r2, #5
   138a0:	ldr	r1, [pc, #848]	; 13bf8 <__assert_fail@plt+0x2a24>
   138a4:	mov	r0, #0
   138a8:	bl	10f88 <dcgettext@plt>
   138ac:	movw	r3, #2022	; 0x7e6
   138b0:	ldr	r2, [pc, #836]	; 13bfc <__assert_fail@plt+0x2a28>
   138b4:	mov	r1, #1
   138b8:	str	r3, [sp]
   138bc:	mov	r3, r0
   138c0:	mov	r0, r5
   138c4:	bl	11108 <__fprintf_chk@plt>
   138c8:	mov	r1, r5
   138cc:	mov	r0, #10
   138d0:	bl	10f7c <fputc_unlocked@plt>
   138d4:	mov	r2, #5
   138d8:	ldr	r1, [pc, #800]	; 13c00 <__assert_fail@plt+0x2a2c>
   138dc:	mov	r0, #0
   138e0:	bl	10f88 <dcgettext@plt>
   138e4:	mov	r2, r0
   138e8:	mov	r1, #1
   138ec:	ldr	r3, [pc, #784]	; 13c04 <__assert_fail@plt+0x2a30>
   138f0:	mov	r0, r5
   138f4:	bl	11108 <__fprintf_chk@plt>
   138f8:	mov	r1, r5
   138fc:	mov	r0, #10
   13900:	bl	10f7c <fputc_unlocked@plt>
   13904:	cmp	r6, #9
   13908:	ldrls	pc, [pc, r6, lsl #2]
   1390c:	b	13be8 <__assert_fail@plt+0x2a14>
   13910:	andeq	r3, r1, r8, lsr #20
   13914:	andeq	r3, r1, r0, asr r9
   13918:	andeq	r3, r1, ip, ror r9
   1391c:			; <UNDEFINED> instruction: 0x000139b0
   13920:	andeq	r3, r1, ip, ror #19
   13924:	andeq	r3, r1, r0, lsr sl
   13928:	andeq	r3, r1, r8, ror sl
   1392c:	andeq	r3, r1, r8, asr #21
   13930:	andeq	r3, r1, r0, lsr #22
   13934:	andeq	r3, r1, r0, lsl #23
   13938:	mov	r1, #1
   1393c:	str	r3, [sp]
   13940:	mov	r3, r2
   13944:	ldr	r2, [pc, #700]	; 13c08 <__assert_fail@plt+0x2a34>
   13948:	bl	11108 <__fprintf_chk@plt>
   1394c:	b	1389c <__assert_fail@plt+0x26c8>
   13950:	mov	r2, #5
   13954:	ldr	r1, [pc, #688]	; 13c0c <__assert_fail@plt+0x2a38>
   13958:	mov	r0, #0
   1395c:	bl	10f88 <dcgettext@plt>
   13960:	ldr	r3, [r4]
   13964:	mov	r2, r0
   13968:	mov	r1, #1
   1396c:	mov	r0, r5
   13970:	add	sp, sp, #32
   13974:	pop	{r4, r5, r6, lr}
   13978:	b	11108 <__fprintf_chk@plt>
   1397c:	mov	r2, #5
   13980:	ldr	r1, [pc, #648]	; 13c10 <__assert_fail@plt+0x2a3c>
   13984:	mov	r0, #0
   13988:	bl	10f88 <dcgettext@plt>
   1398c:	ldr	r3, [r4, #4]
   13990:	mov	r2, r0
   13994:	mov	r1, #1
   13998:	mov	r0, r5
   1399c:	str	r3, [sp, #48]	; 0x30
   139a0:	ldr	r3, [r4]
   139a4:	add	sp, sp, #32
   139a8:	pop	{r4, r5, r6, lr}
   139ac:	b	11108 <__fprintf_chk@plt>
   139b0:	mov	r2, #5
   139b4:	ldr	r1, [pc, #600]	; 13c14 <__assert_fail@plt+0x2a40>
   139b8:	mov	r0, #0
   139bc:	bl	10f88 <dcgettext@plt>
   139c0:	ldr	r3, [r4, #8]
   139c4:	mov	r2, r0
   139c8:	mov	r1, #1
   139cc:	mov	r0, r5
   139d0:	str	r3, [sp, #52]	; 0x34
   139d4:	ldr	r3, [r4, #4]
   139d8:	str	r3, [sp, #48]	; 0x30
   139dc:	ldr	r3, [r4]
   139e0:	add	sp, sp, #32
   139e4:	pop	{r4, r5, r6, lr}
   139e8:	b	11108 <__fprintf_chk@plt>
   139ec:	mov	r2, #5
   139f0:	ldr	r1, [pc, #544]	; 13c18 <__assert_fail@plt+0x2a44>
   139f4:	mov	r0, #0
   139f8:	bl	10f88 <dcgettext@plt>
   139fc:	ldr	r3, [r4, #12]
   13a00:	mov	r2, r0
   13a04:	mov	r1, #1
   13a08:	mov	r0, r5
   13a0c:	str	r3, [sp, #8]
   13a10:	ldr	r3, [r4, #8]
   13a14:	str	r3, [sp, #4]
   13a18:	ldr	r3, [r4, #4]
   13a1c:	str	r3, [sp]
   13a20:	ldr	r3, [r4]
   13a24:	bl	11108 <__fprintf_chk@plt>
   13a28:	add	sp, sp, #32
   13a2c:	pop	{r4, r5, r6, pc}
   13a30:	mov	r2, #5
   13a34:	ldr	r1, [pc, #480]	; 13c1c <__assert_fail@plt+0x2a48>
   13a38:	mov	r0, #0
   13a3c:	bl	10f88 <dcgettext@plt>
   13a40:	ldr	r3, [r4, #16]
   13a44:	mov	r2, r0
   13a48:	mov	r1, #1
   13a4c:	mov	r0, r5
   13a50:	str	r3, [sp, #12]
   13a54:	ldr	r3, [r4, #12]
   13a58:	str	r3, [sp, #8]
   13a5c:	ldr	r3, [r4, #8]
   13a60:	str	r3, [sp, #4]
   13a64:	ldr	r3, [r4, #4]
   13a68:	str	r3, [sp]
   13a6c:	ldr	r3, [r4]
   13a70:	bl	11108 <__fprintf_chk@plt>
   13a74:	b	13a28 <__assert_fail@plt+0x2854>
   13a78:	mov	r2, #5
   13a7c:	ldr	r1, [pc, #412]	; 13c20 <__assert_fail@plt+0x2a4c>
   13a80:	mov	r0, #0
   13a84:	bl	10f88 <dcgettext@plt>
   13a88:	ldr	r3, [r4, #20]
   13a8c:	mov	r2, r0
   13a90:	mov	r1, #1
   13a94:	mov	r0, r5
   13a98:	str	r3, [sp, #16]
   13a9c:	ldr	r3, [r4, #16]
   13aa0:	str	r3, [sp, #12]
   13aa4:	ldr	r3, [r4, #12]
   13aa8:	str	r3, [sp, #8]
   13aac:	ldr	r3, [r4, #8]
   13ab0:	str	r3, [sp, #4]
   13ab4:	ldr	r3, [r4, #4]
   13ab8:	str	r3, [sp]
   13abc:	ldr	r3, [r4]
   13ac0:	bl	11108 <__fprintf_chk@plt>
   13ac4:	b	13a28 <__assert_fail@plt+0x2854>
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #336]	; 13c24 <__assert_fail@plt+0x2a50>
   13ad0:	mov	r0, #0
   13ad4:	bl	10f88 <dcgettext@plt>
   13ad8:	ldr	r3, [r4, #24]
   13adc:	mov	r2, r0
   13ae0:	mov	r1, #1
   13ae4:	mov	r0, r5
   13ae8:	str	r3, [sp, #20]
   13aec:	ldr	r3, [r4, #20]
   13af0:	str	r3, [sp, #16]
   13af4:	ldr	r3, [r4, #16]
   13af8:	str	r3, [sp, #12]
   13afc:	ldr	r3, [r4, #12]
   13b00:	str	r3, [sp, #8]
   13b04:	ldr	r3, [r4, #8]
   13b08:	str	r3, [sp, #4]
   13b0c:	ldr	r3, [r4, #4]
   13b10:	str	r3, [sp]
   13b14:	ldr	r3, [r4]
   13b18:	bl	11108 <__fprintf_chk@plt>
   13b1c:	b	13a28 <__assert_fail@plt+0x2854>
   13b20:	mov	r2, #5
   13b24:	ldr	r1, [pc, #252]	; 13c28 <__assert_fail@plt+0x2a54>
   13b28:	mov	r0, #0
   13b2c:	bl	10f88 <dcgettext@plt>
   13b30:	ldr	r3, [r4, #28]
   13b34:	mov	r2, r0
   13b38:	mov	r1, #1
   13b3c:	mov	r0, r5
   13b40:	str	r3, [sp, #24]
   13b44:	ldr	r3, [r4, #24]
   13b48:	str	r3, [sp, #20]
   13b4c:	ldr	r3, [r4, #20]
   13b50:	str	r3, [sp, #16]
   13b54:	ldr	r3, [r4, #16]
   13b58:	str	r3, [sp, #12]
   13b5c:	ldr	r3, [r4, #12]
   13b60:	str	r3, [sp, #8]
   13b64:	ldr	r3, [r4, #8]
   13b68:	str	r3, [sp, #4]
   13b6c:	ldr	r3, [r4, #4]
   13b70:	str	r3, [sp]
   13b74:	ldr	r3, [r4]
   13b78:	bl	11108 <__fprintf_chk@plt>
   13b7c:	b	13a28 <__assert_fail@plt+0x2854>
   13b80:	ldr	r1, [pc, #164]	; 13c2c <__assert_fail@plt+0x2a58>
   13b84:	mov	r2, #5
   13b88:	mov	r0, #0
   13b8c:	bl	10f88 <dcgettext@plt>
   13b90:	ldr	r3, [r4, #32]
   13b94:	mov	r2, r0
   13b98:	mov	r1, #1
   13b9c:	mov	r0, r5
   13ba0:	str	r3, [sp, #28]
   13ba4:	ldr	r3, [r4, #28]
   13ba8:	str	r3, [sp, #24]
   13bac:	ldr	r3, [r4, #24]
   13bb0:	str	r3, [sp, #20]
   13bb4:	ldr	r3, [r4, #20]
   13bb8:	str	r3, [sp, #16]
   13bbc:	ldr	r3, [r4, #16]
   13bc0:	str	r3, [sp, #12]
   13bc4:	ldr	r3, [r4, #12]
   13bc8:	str	r3, [sp, #8]
   13bcc:	ldr	r3, [r4, #8]
   13bd0:	str	r3, [sp, #4]
   13bd4:	ldr	r3, [r4, #4]
   13bd8:	str	r3, [sp]
   13bdc:	ldr	r3, [r4]
   13be0:	bl	11108 <__fprintf_chk@plt>
   13be4:	b	13a28 <__assert_fail@plt+0x2854>
   13be8:	mov	r2, #5
   13bec:	ldr	r1, [pc, #60]	; 13c30 <__assert_fail@plt+0x2a5c>
   13bf0:	b	13b88 <__assert_fail@plt+0x29b4>
   13bf4:	andeq	r5, r1, r5, lsr #16
   13bf8:	andeq	r5, r1, r8, lsr r8
   13bfc:	andeq	r5, r1, r6, lsl #22
   13c00:	andeq	r5, r1, ip, lsr r8
   13c04:	andeq	r5, r1, r7, ror #17
   13c08:	andeq	r5, r1, r1, lsr r8
   13c0c:	andeq	r5, r1, r9, lsl #18
   13c10:	andeq	r5, r1, r9, lsl r9
   13c14:	andeq	r5, r1, r0, lsr r9
   13c18:	andeq	r5, r1, ip, asr #18
   13c1c:	andeq	r5, r1, ip, ror #18
   13c20:	muleq	r1, r0, r9
   13c24:			; <UNDEFINED> instruction: 0x000159b8
   13c28:	andeq	r5, r1, r4, ror #19
   13c2c:	andeq	r5, r1, r4, lsl sl
   13c30:	andeq	r5, r1, r8, asr #20
   13c34:	push	{r0, r1, r4, lr}
   13c38:	mov	ip, #0
   13c3c:	ldr	lr, [sp, #16]
   13c40:	ldr	r4, [lr, ip, lsl #2]
   13c44:	cmp	r4, #0
   13c48:	bne	13c60 <__assert_fail@plt+0x2a8c>
   13c4c:	str	lr, [sp]
   13c50:	str	ip, [sp, #4]
   13c54:	bl	1386c <__assert_fail@plt+0x2698>
   13c58:	add	sp, sp, #8
   13c5c:	pop	{r4, pc}
   13c60:	add	ip, ip, #1
   13c64:	b	13c40 <__assert_fail@plt+0x2a6c>
   13c68:	push	{r4, r5, r6, lr}
   13c6c:	sub	sp, sp, #48	; 0x30
   13c70:	mov	ip, #0
   13c74:	add	lr, sp, #8
   13c78:	mov	r5, lr
   13c7c:	ldr	r6, [sp, #64]	; 0x40
   13c80:	ldr	r4, [r6, ip, lsl #2]
   13c84:	cmp	r4, #0
   13c88:	str	r4, [lr], #4
   13c8c:	beq	13c9c <__assert_fail@plt+0x2ac8>
   13c90:	add	ip, ip, #1
   13c94:	cmp	ip, #10
   13c98:	bne	13c80 <__assert_fail@plt+0x2aac>
   13c9c:	stm	sp, {r5, ip}
   13ca0:	bl	1386c <__assert_fail@plt+0x2698>
   13ca4:	add	sp, sp, #48	; 0x30
   13ca8:	pop	{r4, r5, r6, pc}
   13cac:	push	{r3}		; (str r3, [sp, #-4]!)
   13cb0:	push	{r0, r1, r2, r3, lr}
   13cb4:	add	r3, sp, #24
   13cb8:	str	r3, [sp]
   13cbc:	str	r3, [sp, #12]
   13cc0:	ldr	r3, [sp, #20]
   13cc4:	bl	13c68 <__assert_fail@plt+0x2a94>
   13cc8:	add	sp, sp, #16
   13ccc:	pop	{lr}		; (ldr lr, [sp], #4)
   13cd0:	add	sp, sp, #4
   13cd4:	bx	lr
   13cd8:	ldr	r3, [pc, #116]	; 13d54 <__assert_fail@plt+0x2b80>
   13cdc:	mov	r0, #10
   13ce0:	push	{r4, lr}
   13ce4:	ldr	r1, [r3]
   13ce8:	bl	10f7c <fputc_unlocked@plt>
   13cec:	mov	r2, #5
   13cf0:	ldr	r1, [pc, #96]	; 13d58 <__assert_fail@plt+0x2b84>
   13cf4:	mov	r0, #0
   13cf8:	bl	10f88 <dcgettext@plt>
   13cfc:	mov	r1, r0
   13d00:	ldr	r2, [pc, #84]	; 13d5c <__assert_fail@plt+0x2b88>
   13d04:	mov	r0, #1
   13d08:	bl	110e4 <__printf_chk@plt>
   13d0c:	mov	r2, #5
   13d10:	ldr	r1, [pc, #72]	; 13d60 <__assert_fail@plt+0x2b8c>
   13d14:	mov	r0, #0
   13d18:	bl	10f88 <dcgettext@plt>
   13d1c:	mov	r1, r0
   13d20:	ldr	r3, [pc, #60]	; 13d64 <__assert_fail@plt+0x2b90>
   13d24:	mov	r0, #1
   13d28:	ldr	r2, [pc, #56]	; 13d68 <__assert_fail@plt+0x2b94>
   13d2c:	bl	110e4 <__printf_chk@plt>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #48]	; 13d6c <__assert_fail@plt+0x2b98>
   13d38:	mov	r0, #0
   13d3c:	bl	10f88 <dcgettext@plt>
   13d40:	mov	r1, r0
   13d44:	ldr	r2, [pc, #36]	; 13d70 <__assert_fail@plt+0x2b9c>
   13d48:	mov	r0, #1
   13d4c:	pop	{r4, lr}
   13d50:	b	110e4 <__printf_chk@plt>
   13d54:	andeq	r6, r2, ip, ror r1
   13d58:	andeq	r5, r1, r4, lsl #21
   13d5c:	muleq	r1, r8, sl
   13d60:	andeq	r5, r1, lr, lsr #21
   13d64:	andeq	r5, r1, fp, lsl r4
   13d68:	andeq	r5, r1, r3, asr #8
   13d6c:	andeq	r5, r1, r2, asr #21
   13d70:	andeq	r5, r1, r9, ror #21
   13d74:	push	{r4, lr}
   13d78:	bl	148c8 <__assert_fail@plt+0x36f4>
   13d7c:	cmp	r0, #0
   13d80:	popne	{r4, pc}
   13d84:	bl	1402c <__assert_fail@plt+0x2e58>
   13d88:	push	{r4, lr}
   13d8c:	bl	148c8 <__assert_fail@plt+0x36f4>
   13d90:	cmp	r0, #0
   13d94:	popne	{r4, pc}
   13d98:	bl	1402c <__assert_fail@plt+0x2e58>
   13d9c:	b	13d74 <__assert_fail@plt+0x2ba0>
   13da0:	push	{r4, r5, r6, lr}
   13da4:	mov	r5, r0
   13da8:	mov	r4, r1
   13dac:	bl	148f4 <__assert_fail@plt+0x3720>
   13db0:	cmp	r0, #0
   13db4:	popne	{r4, r5, r6, pc}
   13db8:	adds	r4, r4, #0
   13dbc:	movne	r4, #1
   13dc0:	cmp	r5, #0
   13dc4:	moveq	r4, #1
   13dc8:	cmp	r4, #0
   13dcc:	popeq	{r4, r5, r6, pc}
   13dd0:	bl	1402c <__assert_fail@plt+0x2e58>
   13dd4:	push	{r4, lr}
   13dd8:	bl	14b3c <__assert_fail@plt+0x3968>
   13ddc:	cmp	r0, #0
   13de0:	popne	{r4, pc}
   13de4:	bl	1402c <__assert_fail@plt+0x2e58>
   13de8:	push	{r4, r5, r6, lr}
   13dec:	mov	r6, r0
   13df0:	mov	r5, r1
   13df4:	mov	r4, r2
   13df8:	bl	14e1c <__assert_fail@plt+0x3c48>
   13dfc:	cmp	r0, #0
   13e00:	popne	{r4, r5, r6, pc}
   13e04:	cmp	r6, #0
   13e08:	beq	13e18 <__assert_fail@plt+0x2c44>
   13e0c:	cmp	r5, #0
   13e10:	cmpne	r4, #0
   13e14:	popeq	{r4, r5, r6, pc}
   13e18:	bl	1402c <__assert_fail@plt+0x2e58>
   13e1c:	b	13de8 <__assert_fail@plt+0x2c14>
   13e20:	push	{r4, lr}
   13e24:	bl	14b4c <__assert_fail@plt+0x3978>
   13e28:	cmp	r0, #0
   13e2c:	popne	{r4, pc}
   13e30:	bl	1402c <__assert_fail@plt+0x2e58>
   13e34:	mov	r2, r1
   13e38:	mov	r1, r0
   13e3c:	mov	r0, #0
   13e40:	b	13de8 <__assert_fail@plt+0x2c14>
   13e44:	mov	r2, r1
   13e48:	mov	r1, r0
   13e4c:	mov	r0, #0
   13e50:	b	13e20 <__assert_fail@plt+0x2c4c>
   13e54:	cmp	r0, #0
   13e58:	push	{r4, r5, r6, lr}
   13e5c:	mov	r5, r1
   13e60:	ldr	r4, [r1]
   13e64:	bne	13e90 <__assert_fail@plt+0x2cbc>
   13e68:	cmp	r4, #0
   13e6c:	bne	13e80 <__assert_fail@plt+0x2cac>
   13e70:	mov	r4, #64	; 0x40
   13e74:	udiv	r4, r4, r2
   13e78:	cmp	r2, #64	; 0x40
   13e7c:	addhi	r4, r4, #1
   13e80:	mov	r1, r4
   13e84:	bl	13de8 <__assert_fail@plt+0x2c14>
   13e88:	str	r4, [r5]
   13e8c:	pop	{r4, r5, r6, pc}
   13e90:	lsr	r3, r4, #1
   13e94:	add	r3, r3, #1
   13e98:	adds	r4, r4, r3
   13e9c:	bcc	13e80 <__assert_fail@plt+0x2cac>
   13ea0:	bl	1402c <__assert_fail@plt+0x2e58>
   13ea4:	mov	r2, #1
   13ea8:	b	13e54 <__assert_fail@plt+0x2c80>
   13eac:	ldr	ip, [r1]
   13eb0:	push	{r4, r5, r6, r7, r8, lr}
   13eb4:	mov	r5, r1
   13eb8:	mvn	r8, r3
   13ebc:	lsr	r8, r8, #31
   13ec0:	ldr	lr, [sp, #24]
   13ec4:	asr	r1, ip, #1
   13ec8:	adds	r4, ip, r1
   13ecc:	mvnvs	r4, #-2147483648	; 0x80000000
   13ed0:	cmp	r3, r4
   13ed4:	movge	r1, #0
   13ed8:	andlt	r1, r8, #1
   13edc:	cmp	r1, #0
   13ee0:	movne	r4, r3
   13ee4:	smull	r6, r7, r4, lr
   13ee8:	cmp	r7, r6, asr #31
   13eec:	bne	13f04 <__assert_fail@plt+0x2d30>
   13ef0:	cmp	r6, #63	; 0x3f
   13ef4:	mov	r1, r6
   13ef8:	bgt	13f14 <__assert_fail@plt+0x2d40>
   13efc:	mov	r1, #64	; 0x40
   13f00:	b	13f08 <__assert_fail@plt+0x2d34>
   13f04:	mvn	r1, #-2147483648	; 0x80000000
   13f08:	sdiv	r4, r1, lr
   13f0c:	mls	r6, lr, r4, r1
   13f10:	sub	r1, r1, r6
   13f14:	cmp	r0, #0
   13f18:	sub	r6, r4, ip
   13f1c:	streq	r0, [r5]
   13f20:	cmp	r6, r2
   13f24:	bge	13f58 <__assert_fail@plt+0x2d84>
   13f28:	adds	r4, ip, r2
   13f2c:	bvs	13f54 <__assert_fail@plt+0x2d80>
   13f30:	cmp	r4, r3
   13f34:	movle	r3, #0
   13f38:	andgt	r3, r8, #1
   13f3c:	cmp	r3, #0
   13f40:	bne	13f54 <__assert_fail@plt+0x2d80>
   13f44:	smull	r2, r3, r4, lr
   13f48:	cmp	r3, r2, asr #31
   13f4c:	mov	r1, r2
   13f50:	beq	13f58 <__assert_fail@plt+0x2d84>
   13f54:	bl	1402c <__assert_fail@plt+0x2e58>
   13f58:	bl	13da0 <__assert_fail@plt+0x2bcc>
   13f5c:	str	r4, [r5]
   13f60:	pop	{r4, r5, r6, r7, r8, pc}
   13f64:	push	{r4, lr}
   13f68:	bl	14874 <__assert_fail@plt+0x36a0>
   13f6c:	cmp	r0, #0
   13f70:	popne	{r4, pc}
   13f74:	bl	1402c <__assert_fail@plt+0x2e58>
   13f78:	mov	r1, #1
   13f7c:	b	13f64 <__assert_fail@plt+0x2d90>
   13f80:	push	{r4, lr}
   13f84:	bl	14874 <__assert_fail@plt+0x36a0>
   13f88:	cmp	r0, #0
   13f8c:	popne	{r4, pc}
   13f90:	bl	1402c <__assert_fail@plt+0x2e58>
   13f94:	mov	r1, #1
   13f98:	b	13f80 <__assert_fail@plt+0x2dac>
   13f9c:	push	{r4, r5, r6, lr}
   13fa0:	mov	r4, r1
   13fa4:	mov	r5, r0
   13fa8:	mov	r0, r1
   13fac:	bl	13d74 <__assert_fail@plt+0x2ba0>
   13fb0:	mov	r2, r4
   13fb4:	mov	r1, r5
   13fb8:	pop	{r4, r5, r6, lr}
   13fbc:	b	10f4c <memcpy@plt>
   13fc0:	push	{r4, r5, r6, lr}
   13fc4:	mov	r4, r1
   13fc8:	mov	r5, r0
   13fcc:	mov	r0, r1
   13fd0:	bl	13d88 <__assert_fail@plt+0x2bb4>
   13fd4:	mov	r2, r4
   13fd8:	mov	r1, r5
   13fdc:	pop	{r4, r5, r6, lr}
   13fe0:	b	10f4c <memcpy@plt>
   13fe4:	push	{r4, r5, r6, lr}
   13fe8:	mov	r5, r0
   13fec:	add	r0, r1, #1
   13ff0:	mov	r4, r1
   13ff4:	bl	13d88 <__assert_fail@plt+0x2bb4>
   13ff8:	mov	r2, #0
   13ffc:	mov	r1, r5
   14000:	strb	r2, [r0, r4]
   14004:	mov	r2, r4
   14008:	pop	{r4, r5, r6, lr}
   1400c:	b	10f4c <memcpy@plt>
   14010:	push	{r4, lr}
   14014:	mov	r4, r0
   14018:	bl	1109c <strlen@plt>
   1401c:	add	r1, r0, #1
   14020:	mov	r0, r4
   14024:	pop	{r4, lr}
   14028:	b	13f9c <__assert_fail@plt+0x2dc8>
   1402c:	ldr	r3, [pc, #44]	; 14060 <__assert_fail@plt+0x2e8c>
   14030:	mov	r2, #5
   14034:	mov	r0, #0
   14038:	push	{r4, lr}
   1403c:	ldr	r1, [pc, #32]	; 14064 <__assert_fail@plt+0x2e90>
   14040:	ldr	r4, [r3]
   14044:	bl	10f88 <dcgettext@plt>
   14048:	mov	r3, r0
   1404c:	ldr	r2, [pc, #20]	; 14068 <__assert_fail@plt+0x2e94>
   14050:	mov	r1, #0
   14054:	mov	r0, r4
   14058:	bl	11018 <error@plt>
   1405c:	bl	111b0 <abort@plt>
   14060:	andeq	r6, r2, r0, lsr #2
   14064:	andeq	r5, r1, r5, lsr fp
   14068:	strdeq	r5, [r1], -lr
   1406c:	push	{r4, lr}
   14070:	bl	14c84 <__assert_fail@plt+0x3ab0>
   14074:	cmn	r0, #1
   14078:	mov	r4, r0
   1407c:	bne	14094 <__assert_fail@plt+0x2ec0>
   14080:	bl	110b4 <__errno_location@plt>
   14084:	ldr	r3, [r0]
   14088:	cmp	r3, #12
   1408c:	bne	14094 <__assert_fail@plt+0x2ec0>
   14090:	bl	1402c <__assert_fail@plt+0x2e58>
   14094:	mov	r0, r4
   14098:	pop	{r4, pc}
   1409c:	subs	r2, r2, #1
   140a0:	mov	r3, #0
   140a4:	bcs	140b0 <__assert_fail@plt+0x2edc>
   140a8:	mov	r0, r3
   140ac:	bx	lr
   140b0:	push	{r4, r5, lr}
   140b4:	sub	r2, r2, #1
   140b8:	ldr	r4, [r0]
   140bc:	umull	r4, r5, r1, r4
   140c0:	adds	ip, r5, #0
   140c4:	movne	ip, #1
   140c8:	cmp	ip, #0
   140cc:	orr	r3, r3, ip
   140d0:	mvnne	r4, #0
   140d4:	cmn	r2, #1
   140d8:	str	r4, [r0]
   140dc:	bne	140b4 <__assert_fail@plt+0x2ee0>
   140e0:	mov	r0, r3
   140e4:	pop	{r4, r5, pc}
   140e8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ec:	cmp	r2, #36	; 0x24
   140f0:	ldr	r6, [sp, #48]	; 0x30
   140f4:	bls	1410c <__assert_fail@plt+0x2f38>
   140f8:	ldr	r3, [pc, #832]	; 14440 <__assert_fail@plt+0x326c>
   140fc:	mov	r2, #85	; 0x55
   14100:	ldr	r1, [pc, #828]	; 14444 <__assert_fail@plt+0x3270>
   14104:	ldr	r0, [pc, #828]	; 14448 <__assert_fail@plt+0x3274>
   14108:	bl	111d4 <__assert_fail@plt>
   1410c:	cmp	r1, #0
   14110:	mov	r7, r1
   14114:	mov	r4, r0
   14118:	mov	fp, r2
   1411c:	mov	r8, r3
   14120:	moveq	r7, sp
   14124:	bl	110b4 <__errno_location@plt>
   14128:	mov	r3, #0
   1412c:	mov	sl, r0
   14130:	str	r3, [r0]
   14134:	bl	11078 <__ctype_b_loc@plt>
   14138:	ldrb	r9, [r4]
   1413c:	mov	r3, r4
   14140:	ldr	r1, [r0]
   14144:	lsl	r2, r9, #1
   14148:	ldrh	r5, [r1, r2]
   1414c:	ands	r5, r5, #8192	; 0x2000
   14150:	bne	1416c <__assert_fail@plt+0x2f98>
   14154:	cmp	r9, #45	; 0x2d
   14158:	bne	14174 <__assert_fail@plt+0x2fa0>
   1415c:	mov	r5, #4
   14160:	mov	r0, r5
   14164:	add	sp, sp, #12
   14168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1416c:	ldrb	r9, [r3, #1]!
   14170:	b	14144 <__assert_fail@plt+0x2f70>
   14174:	mov	r2, fp
   14178:	mov	r1, r7
   1417c:	mov	r0, r4
   14180:	bl	11090 <strtoul@plt>
   14184:	ldr	r9, [r7]
   14188:	str	r0, [sp, #4]
   1418c:	cmp	r9, r4
   14190:	bne	141f0 <__assert_fail@plt+0x301c>
   14194:	cmp	r6, #0
   14198:	beq	1415c <__assert_fail@plt+0x2f88>
   1419c:	ldrb	r1, [r4]
   141a0:	cmp	r1, #0
   141a4:	beq	1415c <__assert_fail@plt+0x2f88>
   141a8:	mov	r0, r6
   141ac:	bl	110a8 <strchr@plt>
   141b0:	cmp	r0, #0
   141b4:	movne	r3, #1
   141b8:	strne	r3, [sp, #4]
   141bc:	beq	1415c <__assert_fail@plt+0x2f88>
   141c0:	ldrb	r4, [r9]
   141c4:	cmp	r4, #0
   141c8:	beq	143f8 <__assert_fail@plt+0x3224>
   141cc:	mov	r1, r4
   141d0:	mov	r0, r6
   141d4:	bl	110a8 <strchr@plt>
   141d8:	cmp	r0, #0
   141dc:	bne	14218 <__assert_fail@plt+0x3044>
   141e0:	ldr	r3, [sp, #4]
   141e4:	orr	r5, r5, #2
   141e8:	str	r3, [r8]
   141ec:	b	14160 <__assert_fail@plt+0x2f8c>
   141f0:	ldr	r5, [sl]
   141f4:	cmp	r5, #0
   141f8:	beq	14208 <__assert_fail@plt+0x3034>
   141fc:	cmp	r5, #34	; 0x22
   14200:	bne	1415c <__assert_fail@plt+0x2f88>
   14204:	mov	r5, #1
   14208:	cmp	r6, #0
   1420c:	streq	r0, [r8]
   14210:	bne	141c0 <__assert_fail@plt+0x2fec>
   14214:	b	14160 <__assert_fail@plt+0x2f8c>
   14218:	cmp	r4, #84	; 0x54
   1421c:	beq	14270 <__assert_fail@plt+0x309c>
   14220:	bhi	14258 <__assert_fail@plt+0x3084>
   14224:	cmp	r4, #75	; 0x4b
   14228:	beq	14270 <__assert_fail@plt+0x309c>
   1422c:	bhi	14248 <__assert_fail@plt+0x3074>
   14230:	cmp	r4, #69	; 0x45
   14234:	beq	14270 <__assert_fail@plt+0x309c>
   14238:	cmp	r4, #71	; 0x47
   1423c:	beq	14270 <__assert_fail@plt+0x309c>
   14240:	mov	r6, #1
   14244:	b	1431c <__assert_fail@plt+0x3148>
   14248:	cmp	r4, #77	; 0x4d
   1424c:	beq	14270 <__assert_fail@plt+0x309c>
   14250:	cmp	r4, #80	; 0x50
   14254:	b	1423c <__assert_fail@plt+0x3068>
   14258:	cmp	r4, #103	; 0x67
   1425c:	beq	14270 <__assert_fail@plt+0x309c>
   14260:	bhi	142f4 <__assert_fail@plt+0x3120>
   14264:	sub	r3, r4, #89	; 0x59
   14268:	cmp	r3, #1
   1426c:	bhi	14240 <__assert_fail@plt+0x306c>
   14270:	mov	r1, #48	; 0x30
   14274:	mov	r0, r6
   14278:	bl	110a8 <strchr@plt>
   1427c:	cmp	r0, #0
   14280:	beq	14240 <__assert_fail@plt+0x306c>
   14284:	ldrb	r3, [r9, #1]
   14288:	cmp	r3, #68	; 0x44
   1428c:	moveq	r6, #2
   14290:	moveq	r1, #1000	; 0x3e8
   14294:	beq	142b4 <__assert_fail@plt+0x30e0>
   14298:	cmp	r3, #105	; 0x69
   1429c:	beq	1430c <__assert_fail@plt+0x3138>
   142a0:	cmp	r3, #66	; 0x42
   142a4:	moveq	r6, #2
   142a8:	movne	r6, #1
   142ac:	moveq	r1, #1000	; 0x3e8
   142b0:	movne	r1, #1024	; 0x400
   142b4:	cmp	r4, #89	; 0x59
   142b8:	beq	14430 <__assert_fail@plt+0x325c>
   142bc:	bhi	14344 <__assert_fail@plt+0x3170>
   142c0:	cmp	r4, #75	; 0x4b
   142c4:	beq	14384 <__assert_fail@plt+0x31b0>
   142c8:	bhi	14324 <__assert_fail@plt+0x3150>
   142cc:	cmp	r4, #69	; 0x45
   142d0:	beq	14404 <__assert_fail@plt+0x3230>
   142d4:	cmp	r4, #71	; 0x47
   142d8:	beq	14410 <__assert_fail@plt+0x323c>
   142dc:	cmp	r4, #66	; 0x42
   142e0:	bne	141e0 <__assert_fail@plt+0x300c>
   142e4:	ldr	r3, [sp, #4]
   142e8:	lsl	r2, r3, #10
   142ec:	lsrs	r3, r3, #22
   142f0:	b	143c0 <__assert_fail@plt+0x31ec>
   142f4:	cmp	r4, #109	; 0x6d
   142f8:	beq	14270 <__assert_fail@plt+0x309c>
   142fc:	cmp	r4, #116	; 0x74
   14300:	beq	14270 <__assert_fail@plt+0x309c>
   14304:	cmp	r4, #107	; 0x6b
   14308:	b	1423c <__assert_fail@plt+0x3068>
   1430c:	ldrb	r3, [r9, #2]
   14310:	cmp	r3, #66	; 0x42
   14314:	movne	r6, #1
   14318:	moveq	r6, #3
   1431c:	mov	r1, #1024	; 0x400
   14320:	b	142b4 <__assert_fail@plt+0x30e0>
   14324:	cmp	r4, #80	; 0x50
   14328:	beq	14418 <__assert_fail@plt+0x3244>
   1432c:	cmp	r4, #84	; 0x54
   14330:	beq	14420 <__assert_fail@plt+0x324c>
   14334:	cmp	r4, #77	; 0x4d
   14338:	bne	141e0 <__assert_fail@plt+0x300c>
   1433c:	mov	r2, #2
   14340:	b	14408 <__assert_fail@plt+0x3234>
   14344:	cmp	r4, #103	; 0x67
   14348:	beq	14410 <__assert_fail@plt+0x323c>
   1434c:	bhi	14370 <__assert_fail@plt+0x319c>
   14350:	cmp	r4, #98	; 0x62
   14354:	beq	143b4 <__assert_fail@plt+0x31e0>
   14358:	cmp	r4, #99	; 0x63
   1435c:	beq	14438 <__assert_fail@plt+0x3264>
   14360:	cmp	r4, #90	; 0x5a
   14364:	bne	141e0 <__assert_fail@plt+0x300c>
   14368:	mov	r2, #7
   1436c:	b	14408 <__assert_fail@plt+0x3234>
   14370:	cmp	r4, #109	; 0x6d
   14374:	beq	1433c <__assert_fail@plt+0x3168>
   14378:	bhi	1438c <__assert_fail@plt+0x31b8>
   1437c:	cmp	r4, #107	; 0x6b
   14380:	bne	141e0 <__assert_fail@plt+0x300c>
   14384:	mov	r2, #1
   14388:	b	14408 <__assert_fail@plt+0x3234>
   1438c:	cmp	r4, #116	; 0x74
   14390:	beq	14420 <__assert_fail@plt+0x324c>
   14394:	cmp	r4, #119	; 0x77
   14398:	bne	141e0 <__assert_fail@plt+0x300c>
   1439c:	ldr	r0, [sp, #4]
   143a0:	lsl	r3, r0, #1
   143a4:	lsrs	r0, r0, #31
   143a8:	streq	r3, [sp, #4]
   143ac:	beq	143dc <__assert_fail@plt+0x3208>
   143b0:	b	143d0 <__assert_fail@plt+0x31fc>
   143b4:	ldr	r3, [sp, #4]
   143b8:	lsl	r2, r3, #9
   143bc:	lsrs	r3, r3, #23
   143c0:	movne	r0, #1
   143c4:	moveq	r0, #0
   143c8:	streq	r2, [sp, #4]
   143cc:	beq	143dc <__assert_fail@plt+0x3208>
   143d0:	mvn	r3, #0
   143d4:	mov	r0, #1
   143d8:	str	r3, [sp, #4]
   143dc:	ldr	r3, [r7]
   143e0:	orr	r5, r5, r0
   143e4:	add	r2, r3, r6
   143e8:	str	r2, [r7]
   143ec:	ldrb	r3, [r3, r6]
   143f0:	cmp	r3, #0
   143f4:	orrne	r5, r5, #2
   143f8:	ldr	r3, [sp, #4]
   143fc:	str	r3, [r8]
   14400:	b	14160 <__assert_fail@plt+0x2f8c>
   14404:	mov	r2, #6
   14408:	add	r0, sp, #4
   1440c:	b	14428 <__assert_fail@plt+0x3254>
   14410:	mov	r2, #3
   14414:	b	14408 <__assert_fail@plt+0x3234>
   14418:	mov	r2, #5
   1441c:	b	14408 <__assert_fail@plt+0x3234>
   14420:	mov	r2, #4
   14424:	add	r0, sp, r2
   14428:	bl	1409c <__assert_fail@plt+0x2ec8>
   1442c:	b	143dc <__assert_fail@plt+0x3208>
   14430:	mov	r2, #8
   14434:	b	14408 <__assert_fail@plt+0x3234>
   14438:	mov	r0, #0
   1443c:	b	143dc <__assert_fail@plt+0x3208>
   14440:	andeq	r5, r1, r6, asr #22
   14444:	andeq	r5, r1, pc, asr #22
   14448:	andeq	r5, r1, sp, asr fp
   1444c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14450:	mov	ip, r0
   14454:	asr	fp, r1, #31
   14458:	mov	r0, #0
   1445c:	mov	lr, r0
   14460:	subs	r2, r2, #1
   14464:	bcs	14470 <__assert_fail@plt+0x329c>
   14468:	add	sp, sp, #12
   1446c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14470:	ldrd	r8, [ip]
   14474:	mov	r3, #0
   14478:	cmp	r9, r3
   1447c:	umulleq	r8, r9, r8, r1
   14480:	moveq	r6, r8
   14484:	moveq	r4, r9
   14488:	beq	144c0 <__assert_fail@plt+0x32ec>
   1448c:	umull	r4, r5, r8, r1
   14490:	strd	r4, [sp]
   14494:	mov	r5, lr
   14498:	ldr	r4, [sp, #4]
   1449c:	umlal	r4, r5, r9, r1
   144a0:	cmp	r5, #0
   144a4:	ldrne	r3, [sp, #4]
   144a8:	mulne	r4, r1, r9
   144ac:	ldreq	r6, [sp]
   144b0:	mlane	r4, r8, fp, r4
   144b4:	ldrne	r6, [sp]
   144b8:	addne	r4, r4, r3
   144bc:	movne	r3, #1
   144c0:	cmp	r3, #0
   144c4:	mvnne	r6, #0
   144c8:	movne	r3, #1
   144cc:	movne	r4, r6
   144d0:	orr	r0, r0, r3
   144d4:	str	r6, [ip]
   144d8:	str	r4, [ip, #4]
   144dc:	b	14460 <__assert_fail@plt+0x328c>
   144e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e4:	cmp	r2, #36	; 0x24
   144e8:	sub	sp, sp, #20
   144ec:	ldr	r5, [sp, #56]	; 0x38
   144f0:	bls	14508 <__assert_fail@plt+0x3334>
   144f4:	ldr	r3, [pc, #876]	; 14868 <__assert_fail@plt+0x3694>
   144f8:	mov	r2, #85	; 0x55
   144fc:	ldr	r1, [pc, #872]	; 1486c <__assert_fail@plt+0x3698>
   14500:	ldr	r0, [pc, #872]	; 14870 <__assert_fail@plt+0x369c>
   14504:	bl	111d4 <__assert_fail@plt>
   14508:	cmp	r1, #0
   1450c:	mov	r6, r1
   14510:	mov	r8, r0
   14514:	mov	fp, r2
   14518:	mov	r7, r3
   1451c:	addeq	r6, sp, #4
   14520:	bl	110b4 <__errno_location@plt>
   14524:	mov	r3, #0
   14528:	mov	sl, r0
   1452c:	str	r3, [r0]
   14530:	bl	11078 <__ctype_b_loc@plt>
   14534:	ldrb	r9, [r8]
   14538:	mov	r3, r8
   1453c:	ldr	r1, [r0]
   14540:	lsl	r2, r9, #1
   14544:	ldrh	r4, [r1, r2]
   14548:	ands	r4, r4, #8192	; 0x2000
   1454c:	bne	14568 <__assert_fail@plt+0x3394>
   14550:	cmp	r9, #45	; 0x2d
   14554:	bne	14570 <__assert_fail@plt+0x339c>
   14558:	mov	r4, #4
   1455c:	mov	r0, r4
   14560:	add	sp, sp, #20
   14564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14568:	ldrb	r9, [r3, #1]!
   1456c:	b	14540 <__assert_fail@plt+0x336c>
   14570:	mov	r2, fp
   14574:	mov	r1, r6
   14578:	mov	r0, r8
   1457c:	bl	110fc <strtoumax@plt>
   14580:	ldr	r9, [r6]
   14584:	strd	r0, [sp, #8]
   14588:	cmp	r9, r8
   1458c:	bne	145f0 <__assert_fail@plt+0x341c>
   14590:	cmp	r5, #0
   14594:	beq	14558 <__assert_fail@plt+0x3384>
   14598:	ldrb	r1, [r8]
   1459c:	cmp	r1, #0
   145a0:	beq	14558 <__assert_fail@plt+0x3384>
   145a4:	mov	r0, r5
   145a8:	bl	110a8 <strchr@plt>
   145ac:	cmp	r0, #0
   145b0:	movne	r2, #1
   145b4:	movne	r3, #0
   145b8:	strdne	r2, [sp, #8]
   145bc:	beq	14558 <__assert_fail@plt+0x3384>
   145c0:	ldrb	r8, [r9]
   145c4:	cmp	r8, #0
   145c8:	beq	14820 <__assert_fail@plt+0x364c>
   145cc:	mov	r1, r8
   145d0:	mov	r0, r5
   145d4:	bl	110a8 <strchr@plt>
   145d8:	cmp	r0, #0
   145dc:	bne	14618 <__assert_fail@plt+0x3444>
   145e0:	ldrd	r2, [sp, #8]
   145e4:	orr	r4, r4, #2
   145e8:	strd	r2, [r7]
   145ec:	b	1455c <__assert_fail@plt+0x3388>
   145f0:	ldr	r4, [sl]
   145f4:	cmp	r4, #0
   145f8:	beq	14608 <__assert_fail@plt+0x3434>
   145fc:	cmp	r4, #34	; 0x22
   14600:	bne	14558 <__assert_fail@plt+0x3384>
   14604:	mov	r4, #1
   14608:	cmp	r5, #0
   1460c:	strdeq	r0, [r7]
   14610:	bne	145c0 <__assert_fail@plt+0x33ec>
   14614:	b	1455c <__assert_fail@plt+0x3388>
   14618:	cmp	r8, #84	; 0x54
   1461c:	beq	14670 <__assert_fail@plt+0x349c>
   14620:	bhi	14658 <__assert_fail@plt+0x3484>
   14624:	cmp	r8, #75	; 0x4b
   14628:	beq	14670 <__assert_fail@plt+0x349c>
   1462c:	bhi	14648 <__assert_fail@plt+0x3474>
   14630:	cmp	r8, #69	; 0x45
   14634:	beq	14670 <__assert_fail@plt+0x349c>
   14638:	cmp	r8, #71	; 0x47
   1463c:	beq	14670 <__assert_fail@plt+0x349c>
   14640:	mov	r5, #1
   14644:	b	14728 <__assert_fail@plt+0x3554>
   14648:	cmp	r8, #77	; 0x4d
   1464c:	beq	14670 <__assert_fail@plt+0x349c>
   14650:	cmp	r8, #80	; 0x50
   14654:	b	1463c <__assert_fail@plt+0x3468>
   14658:	cmp	r8, #103	; 0x67
   1465c:	beq	14670 <__assert_fail@plt+0x349c>
   14660:	bhi	14700 <__assert_fail@plt+0x352c>
   14664:	sub	r3, r8, #89	; 0x59
   14668:	cmp	r3, #1
   1466c:	bhi	14640 <__assert_fail@plt+0x346c>
   14670:	mov	r1, #48	; 0x30
   14674:	mov	r0, r5
   14678:	bl	110a8 <strchr@plt>
   1467c:	cmp	r0, #0
   14680:	beq	14640 <__assert_fail@plt+0x346c>
   14684:	ldrb	r3, [r9, #1]
   14688:	cmp	r3, #68	; 0x44
   1468c:	moveq	r5, #2
   14690:	moveq	r1, #1000	; 0x3e8
   14694:	beq	146b4 <__assert_fail@plt+0x34e0>
   14698:	cmp	r3, #105	; 0x69
   1469c:	beq	14718 <__assert_fail@plt+0x3544>
   146a0:	cmp	r3, #66	; 0x42
   146a4:	moveq	r5, #2
   146a8:	movne	r5, #1
   146ac:	moveq	r1, #1000	; 0x3e8
   146b0:	movne	r1, #1024	; 0x400
   146b4:	cmp	r8, #89	; 0x59
   146b8:	beq	14850 <__assert_fail@plt+0x367c>
   146bc:	bhi	14750 <__assert_fail@plt+0x357c>
   146c0:	cmp	r8, #75	; 0x4b
   146c4:	beq	14790 <__assert_fail@plt+0x35bc>
   146c8:	bhi	14730 <__assert_fail@plt+0x355c>
   146cc:	cmp	r8, #69	; 0x45
   146d0:	beq	1482c <__assert_fail@plt+0x3658>
   146d4:	cmp	r8, #71	; 0x47
   146d8:	beq	14838 <__assert_fail@plt+0x3664>
   146dc:	cmp	r8, #66	; 0x42
   146e0:	bne	145e0 <__assert_fail@plt+0x340c>
   146e4:	ldr	r3, [sp, #8]
   146e8:	ldr	r1, [sp, #12]
   146ec:	lsl	r2, r1, #10
   146f0:	lsr	r0, r1, #22
   146f4:	orr	r2, r2, r3, lsr #22
   146f8:	lsl	r3, r3, #10
   146fc:	b	147dc <__assert_fail@plt+0x3608>
   14700:	cmp	r8, #109	; 0x6d
   14704:	beq	14670 <__assert_fail@plt+0x349c>
   14708:	cmp	r8, #116	; 0x74
   1470c:	beq	14670 <__assert_fail@plt+0x349c>
   14710:	cmp	r8, #107	; 0x6b
   14714:	b	1463c <__assert_fail@plt+0x3468>
   14718:	ldrb	r3, [r9, #2]
   1471c:	cmp	r3, #66	; 0x42
   14720:	movne	r5, #1
   14724:	moveq	r5, #3
   14728:	mov	r1, #1024	; 0x400
   1472c:	b	146b4 <__assert_fail@plt+0x34e0>
   14730:	cmp	r8, #80	; 0x50
   14734:	beq	14840 <__assert_fail@plt+0x366c>
   14738:	cmp	r8, #84	; 0x54
   1473c:	beq	14848 <__assert_fail@plt+0x3674>
   14740:	cmp	r8, #77	; 0x4d
   14744:	bne	145e0 <__assert_fail@plt+0x340c>
   14748:	mov	r2, #2
   1474c:	b	14830 <__assert_fail@plt+0x365c>
   14750:	cmp	r8, #103	; 0x67
   14754:	beq	14838 <__assert_fail@plt+0x3664>
   14758:	bhi	1477c <__assert_fail@plt+0x35a8>
   1475c:	cmp	r8, #98	; 0x62
   14760:	beq	147c4 <__assert_fail@plt+0x35f0>
   14764:	cmp	r8, #99	; 0x63
   14768:	beq	14860 <__assert_fail@plt+0x368c>
   1476c:	cmp	r8, #90	; 0x5a
   14770:	bne	145e0 <__assert_fail@plt+0x340c>
   14774:	mov	r2, #7
   14778:	b	14830 <__assert_fail@plt+0x365c>
   1477c:	cmp	r8, #109	; 0x6d
   14780:	beq	14748 <__assert_fail@plt+0x3574>
   14784:	bhi	14798 <__assert_fail@plt+0x35c4>
   14788:	cmp	r8, #107	; 0x6b
   1478c:	bne	145e0 <__assert_fail@plt+0x340c>
   14790:	mov	r2, #1
   14794:	b	14830 <__assert_fail@plt+0x365c>
   14798:	cmp	r8, #116	; 0x74
   1479c:	beq	14848 <__assert_fail@plt+0x3674>
   147a0:	cmp	r8, #119	; 0x77
   147a4:	bne	145e0 <__assert_fail@plt+0x340c>
   147a8:	ldr	r3, [sp, #8]
   147ac:	ldr	r2, [sp, #12]
   147b0:	ldr	r0, [sp, #12]
   147b4:	adds	r3, r3, r3
   147b8:	adc	r2, r2, r2
   147bc:	lsr	r0, r0, #31
   147c0:	b	147dc <__assert_fail@plt+0x3608>
   147c4:	ldr	r3, [sp, #8]
   147c8:	ldr	r1, [sp, #12]
   147cc:	lsl	r2, r1, #9
   147d0:	lsr	r0, r1, #23
   147d4:	orr	r2, r2, r3, lsr #23
   147d8:	lsl	r3, r3, #9
   147dc:	adds	r0, r0, #0
   147e0:	movne	r0, #1
   147e4:	cmp	r0, #0
   147e8:	streq	r3, [sp, #8]
   147ec:	streq	r2, [sp, #12]
   147f0:	beq	14804 <__assert_fail@plt+0x3630>
   147f4:	mvn	r2, #0
   147f8:	mvn	r3, #0
   147fc:	mov	r0, #1
   14800:	strd	r2, [sp, #8]
   14804:	ldr	r3, [r6]
   14808:	orr	r4, r4, r0
   1480c:	add	r2, r3, r5
   14810:	str	r2, [r6]
   14814:	ldrb	r3, [r3, r5]
   14818:	cmp	r3, #0
   1481c:	orrne	r4, r4, #2
   14820:	ldrd	r2, [sp, #8]
   14824:	strd	r2, [r7]
   14828:	b	1455c <__assert_fail@plt+0x3388>
   1482c:	mov	r2, #6
   14830:	add	r0, sp, #8
   14834:	b	14858 <__assert_fail@plt+0x3684>
   14838:	mov	r2, #3
   1483c:	b	14830 <__assert_fail@plt+0x365c>
   14840:	mov	r2, #5
   14844:	b	14830 <__assert_fail@plt+0x365c>
   14848:	mov	r2, #4
   1484c:	b	14830 <__assert_fail@plt+0x365c>
   14850:	mov	r2, #8
   14854:	add	r0, sp, r2
   14858:	bl	1444c <__assert_fail@plt+0x3278>
   1485c:	b	14804 <__assert_fail@plt+0x3630>
   14860:	mov	r0, #0
   14864:	b	14804 <__assert_fail@plt+0x3630>
   14868:	andeq	r5, r1, r3, lsl #23
   1486c:	andeq	r5, r1, pc, asr #22
   14870:	andeq	r5, r1, sp, asr fp
   14874:	cmp	r1, #0
   14878:	cmpne	r0, #0
   1487c:	beq	148b4 <__assert_fail@plt+0x36e0>
   14880:	push	{r4, r5, r6, lr}
   14884:	umull	r4, r5, r0, r1
   14888:	adds	r3, r5, #0
   1488c:	movne	r3, #1
   14890:	cmp	r4, #0
   14894:	blt	148a0 <__assert_fail@plt+0x36cc>
   14898:	cmp	r3, #0
   1489c:	beq	148c0 <__assert_fail@plt+0x36ec>
   148a0:	bl	110b4 <__errno_location@plt>
   148a4:	mov	r3, #12
   148a8:	str	r3, [r0]
   148ac:	mov	r0, #0
   148b0:	pop	{r4, r5, r6, pc}
   148b4:	mov	r1, #1
   148b8:	mov	r0, r1
   148bc:	b	10ed4 <calloc@plt>
   148c0:	pop	{r4, r5, r6, lr}
   148c4:	b	148bc <__assert_fail@plt+0x36e8>
   148c8:	cmp	r0, #0
   148cc:	beq	148ec <__assert_fail@plt+0x3718>
   148d0:	bge	148f0 <__assert_fail@plt+0x371c>
   148d4:	push	{r4, lr}
   148d8:	bl	110b4 <__errno_location@plt>
   148dc:	mov	r3, #12
   148e0:	str	r3, [r0]
   148e4:	mov	r0, #0
   148e8:	pop	{r4, pc}
   148ec:	mov	r0, #1
   148f0:	b	1103c <malloc@plt>
   148f4:	cmp	r0, #0
   148f8:	bne	14904 <__assert_fail@plt+0x3730>
   148fc:	mov	r0, r1
   14900:	b	148c8 <__assert_fail@plt+0x36f4>
   14904:	cmp	r1, #0
   14908:	push	{r4, lr}
   1490c:	bne	1491c <__assert_fail@plt+0x3748>
   14910:	bl	11ed4 <__assert_fail@plt+0xd00>
   14914:	mov	r0, #0
   14918:	pop	{r4, pc}
   1491c:	blt	14928 <__assert_fail@plt+0x3754>
   14920:	pop	{r4, lr}
   14924:	b	10f94 <realloc@plt>
   14928:	bl	110b4 <__errno_location@plt>
   1492c:	mov	r3, #12
   14930:	str	r3, [r0]
   14934:	b	14914 <__assert_fail@plt+0x3740>
   14938:	push	{r4, r5, r6, lr}
   1493c:	mov	r4, r0
   14940:	bl	10ff4 <__fpending@plt>
   14944:	mov	r5, r0
   14948:	mov	r0, r4
   1494c:	bl	11000 <ferror_unlocked@plt>
   14950:	mov	r6, r0
   14954:	mov	r0, r4
   14958:	bl	149a8 <__assert_fail@plt+0x37d4>
   1495c:	cmp	r6, #0
   14960:	mov	r4, r0
   14964:	bne	14990 <__assert_fail@plt+0x37bc>
   14968:	cmp	r0, #0
   1496c:	beq	14988 <__assert_fail@plt+0x37b4>
   14970:	cmp	r5, #0
   14974:	bne	149a0 <__assert_fail@plt+0x37cc>
   14978:	bl	110b4 <__errno_location@plt>
   1497c:	ldr	r4, [r0]
   14980:	subs	r4, r4, #9
   14984:	mvnne	r4, #0
   14988:	mov	r0, r4
   1498c:	pop	{r4, r5, r6, pc}
   14990:	cmp	r0, #0
   14994:	bne	149a0 <__assert_fail@plt+0x37cc>
   14998:	bl	110b4 <__errno_location@plt>
   1499c:	str	r4, [r0]
   149a0:	mvn	r4, #0
   149a4:	b	14988 <__assert_fail@plt+0x37b4>
   149a8:	push	{r0, r1, r2, r4, r5, lr}
   149ac:	mov	r4, r0
   149b0:	bl	110f0 <fileno@plt>
   149b4:	cmp	r0, #0
   149b8:	mov	r0, r4
   149bc:	bge	149cc <__assert_fail@plt+0x37f8>
   149c0:	add	sp, sp, #12
   149c4:	pop	{r4, r5, lr}
   149c8:	b	11114 <fclose@plt>
   149cc:	bl	11054 <__freading@plt>
   149d0:	cmp	r0, #0
   149d4:	bne	14a10 <__assert_fail@plt+0x383c>
   149d8:	mov	r0, r4
   149dc:	bl	14a50 <__assert_fail@plt+0x387c>
   149e0:	cmp	r0, #0
   149e4:	bne	14a44 <__assert_fail@plt+0x3870>
   149e8:	mov	r5, #0
   149ec:	mov	r0, r4
   149f0:	bl	11114 <fclose@plt>
   149f4:	cmp	r5, #0
   149f8:	beq	14a08 <__assert_fail@plt+0x3834>
   149fc:	bl	110b4 <__errno_location@plt>
   14a00:	str	r5, [r0]
   14a04:	mvn	r0, #0
   14a08:	add	sp, sp, #12
   14a0c:	pop	{r4, r5, pc}
   14a10:	mov	r0, r4
   14a14:	bl	110f0 <fileno@plt>
   14a18:	mov	r3, #1
   14a1c:	mov	r2, #0
   14a20:	str	r3, [sp]
   14a24:	mov	r3, #0
   14a28:	bl	10fd0 <lseek64@plt>
   14a2c:	mvn	r3, #0
   14a30:	mvn	r2, #0
   14a34:	cmp	r1, r3
   14a38:	cmpeq	r0, r2
   14a3c:	bne	149d8 <__assert_fail@plt+0x3804>
   14a40:	b	149e8 <__assert_fail@plt+0x3814>
   14a44:	bl	110b4 <__errno_location@plt>
   14a48:	ldr	r5, [r0]
   14a4c:	b	149ec <__assert_fail@plt+0x3818>
   14a50:	push	{r0, r1, r4, lr}
   14a54:	subs	r4, r0, #0
   14a58:	bne	14a6c <__assert_fail@plt+0x3898>
   14a5c:	mov	r0, r4
   14a60:	add	sp, sp, #8
   14a64:	pop	{r4, lr}
   14a68:	b	10f28 <fflush@plt>
   14a6c:	bl	11054 <__freading@plt>
   14a70:	cmp	r0, #0
   14a74:	beq	14a5c <__assert_fail@plt+0x3888>
   14a78:	ldr	r3, [r4]
   14a7c:	tst	r3, #256	; 0x100
   14a80:	beq	14a5c <__assert_fail@plt+0x3888>
   14a84:	mov	r3, #1
   14a88:	mov	r2, #0
   14a8c:	mov	r0, r4
   14a90:	str	r3, [sp]
   14a94:	mov	r3, #0
   14a98:	bl	14aa0 <__assert_fail@plt+0x38cc>
   14a9c:	b	14a5c <__assert_fail@plt+0x3888>
   14aa0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14aa4:	mov	r4, r0
   14aa8:	ldmib	r0, {ip, lr}
   14aac:	ldr	r8, [sp, #32]
   14ab0:	cmp	lr, ip
   14ab4:	bne	14b24 <__assert_fail@plt+0x3950>
   14ab8:	ldr	ip, [r0, #16]
   14abc:	ldr	lr, [r0, #20]
   14ac0:	cmp	lr, ip
   14ac4:	bne	14b24 <__assert_fail@plt+0x3950>
   14ac8:	ldr	r5, [r0, #36]	; 0x24
   14acc:	cmp	r5, #0
   14ad0:	bne	14b24 <__assert_fail@plt+0x3950>
   14ad4:	mov	r6, r2
   14ad8:	mov	r7, r3
   14adc:	bl	110f0 <fileno@plt>
   14ae0:	mov	r2, r6
   14ae4:	mov	r3, r7
   14ae8:	str	r8, [sp]
   14aec:	bl	10fd0 <lseek64@plt>
   14af0:	mvn	r3, #0
   14af4:	mvn	r2, #0
   14af8:	cmp	r1, r3
   14afc:	cmpeq	r0, r2
   14b00:	mvneq	r0, #0
   14b04:	beq	14b1c <__assert_fail@plt+0x3948>
   14b08:	ldr	r3, [r4]
   14b0c:	strd	r0, [r4, #80]	; 0x50
   14b10:	mov	r0, r5
   14b14:	bic	r3, r3, #16
   14b18:	str	r3, [r4]
   14b1c:	add	sp, sp, #8
   14b20:	pop	{r4, r5, r6, r7, r8, pc}
   14b24:	mov	r0, r4
   14b28:	str	r8, [sp, #32]
   14b2c:	add	sp, sp, #8
   14b30:	pop	{r4, r5, r6, r7, r8, lr}
   14b34:	b	11120 <fseeko64@plt>
   14b38:	b	148c8 <__assert_fail@plt+0x36f4>
   14b3c:	cmp	r1, #0
   14b40:	orreq	r1, r1, #1
   14b44:	b	148f4 <__assert_fail@plt+0x3720>
   14b48:	b	14874 <__assert_fail@plt+0x36a0>
   14b4c:	cmp	r2, #0
   14b50:	cmpne	r1, #0
   14b54:	moveq	r2, #1
   14b58:	moveq	r1, r2
   14b5c:	b	14e1c <__assert_fail@plt+0x3c48>
   14b60:	push	{r4, r5, r6, lr}
   14b64:	mov	r3, #0
   14b68:	mov	r4, r0
   14b6c:	mov	r5, r1
   14b70:	add	r6, r2, #20
   14b74:	strb	r3, [r2, #20]
   14b78:	mov	r2, #10
   14b7c:	mov	r3, #0
   14b80:	mov	r0, r4
   14b84:	mov	r1, r5
   14b88:	bl	14f28 <__assert_fail@plt+0x3d54>
   14b8c:	add	r2, r2, #48	; 0x30
   14b90:	mov	r3, #0
   14b94:	mov	r0, r4
   14b98:	mov	r1, r5
   14b9c:	strb	r2, [r6, #-1]!
   14ba0:	mov	r2, #10
   14ba4:	bl	14f28 <__assert_fail@plt+0x3d54>
   14ba8:	cmp	r5, #0
   14bac:	cmpeq	r4, #9
   14bb0:	bhi	14bbc <__assert_fail@plt+0x39e8>
   14bb4:	mov	r0, r6
   14bb8:	pop	{r4, r5, r6, pc}
   14bbc:	mov	r4, r0
   14bc0:	mov	r5, r1
   14bc4:	b	14b78 <__assert_fail@plt+0x39a4>
   14bc8:	push	{r4, lr}
   14bcc:	mov	r0, #14
   14bd0:	bl	1115c <nl_langinfo@plt>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14bf0 <__assert_fail@plt+0x3a1c>
   14bdc:	ldrb	r2, [r0]
   14be0:	ldr	r3, [pc, #16]	; 14bf8 <__assert_fail@plt+0x3a24>
   14be4:	cmp	r2, #0
   14be8:	moveq	r0, r3
   14bec:	pop	{r4, pc}
   14bf0:	ldr	r0, [pc]	; 14bf8 <__assert_fail@plt+0x3a24>
   14bf4:	pop	{r4, pc}
   14bf8:	andeq	r5, r1, lr, lsl #23
   14bfc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c00:	subs	r5, r0, #0
   14c04:	mov	r7, r2
   14c08:	addeq	r5, sp, #4
   14c0c:	mov	r6, r1
   14c10:	mov	r0, r5
   14c14:	bl	1100c <mbrtowc@plt>
   14c18:	cmp	r7, #0
   14c1c:	cmnne	r0, #3
   14c20:	mov	r4, r0
   14c24:	bls	14c40 <__assert_fail@plt+0x3a6c>
   14c28:	mov	r0, #0
   14c2c:	bl	14e48 <__assert_fail@plt+0x3c74>
   14c30:	cmp	r0, #0
   14c34:	ldrbeq	r3, [r6]
   14c38:	moveq	r4, #1
   14c3c:	streq	r3, [r5]
   14c40:	mov	r0, r4
   14c44:	add	sp, sp, #12
   14c48:	pop	{r4, r5, r6, r7, pc}
   14c4c:	lsrs	r3, r1, #30
   14c50:	movne	r3, #1
   14c54:	moveq	r3, #0
   14c58:	lsls	r1, r1, #2
   14c5c:	bmi	14c6c <__assert_fail@plt+0x3a98>
   14c60:	cmp	r3, #0
   14c64:	bne	14c6c <__assert_fail@plt+0x3a98>
   14c68:	b	148f4 <__assert_fail@plt+0x3720>
   14c6c:	push	{r4, lr}
   14c70:	bl	110b4 <__errno_location@plt>
   14c74:	mov	r3, #12
   14c78:	str	r3, [r0]
   14c7c:	mov	r0, #0
   14c80:	pop	{r4, pc}
   14c84:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14c88:	subs	r7, r0, #0
   14c8c:	mov	r5, r1
   14c90:	mov	r6, r2
   14c94:	beq	14d24 <__assert_fail@plt+0x3b50>
   14c98:	mov	r1, #10
   14c9c:	mov	r0, #0
   14ca0:	str	r1, [sp, #4]
   14ca4:	bl	14c4c <__assert_fail@plt+0x3a78>
   14ca8:	subs	r4, r0, #0
   14cac:	bne	14cbc <__assert_fail@plt+0x3ae8>
   14cb0:	mvn	r0, #0
   14cb4:	add	sp, sp, #12
   14cb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14cbc:	add	r3, sp, #4
   14cc0:	mov	r2, r4
   14cc4:	ldr	r9, [sp, #4]
   14cc8:	mov	r1, r5
   14ccc:	mov	r0, r7
   14cd0:	bl	110cc <getgrouplist@plt>
   14cd4:	subs	r8, r0, #0
   14cd8:	bge	14cec <__assert_fail@plt+0x3b18>
   14cdc:	ldr	r3, [sp, #4]
   14ce0:	cmp	r3, r9
   14ce4:	lsleq	r3, r3, #1
   14ce8:	streq	r3, [sp, #4]
   14cec:	mov	r0, r4
   14cf0:	ldr	r1, [sp, #4]
   14cf4:	bl	14c4c <__assert_fail@plt+0x3a78>
   14cf8:	cmp	r0, #0
   14cfc:	bne	14d0c <__assert_fail@plt+0x3b38>
   14d00:	mov	r0, r4
   14d04:	bl	11ed4 <__assert_fail@plt+0xd00>
   14d08:	b	14cb0 <__assert_fail@plt+0x3adc>
   14d0c:	cmp	r8, #0
   14d10:	mov	r4, r0
   14d14:	blt	14cbc <__assert_fail@plt+0x3ae8>
   14d18:	str	r4, [r6]
   14d1c:	ldr	r0, [sp, #4]
   14d20:	b	14cb4 <__assert_fail@plt+0x3ae0>
   14d24:	mov	r1, r7
   14d28:	bl	11174 <getgroups@plt>
   14d2c:	cmp	r0, #0
   14d30:	str	r0, [sp, #4]
   14d34:	bge	14d70 <__assert_fail@plt+0x3b9c>
   14d38:	bl	110b4 <__errno_location@plt>
   14d3c:	ldr	r3, [r0]
   14d40:	cmp	r3, #38	; 0x26
   14d44:	bne	14cb0 <__assert_fail@plt+0x3adc>
   14d48:	mov	r1, #1
   14d4c:	mov	r0, r7
   14d50:	bl	14c4c <__assert_fail@plt+0x3a78>
   14d54:	cmp	r0, #0
   14d58:	beq	14cb0 <__assert_fail@plt+0x3adc>
   14d5c:	str	r0, [r6]
   14d60:	str	r5, [r0]
   14d64:	adds	r0, r5, #1
   14d68:	movne	r0, #1
   14d6c:	b	14cb4 <__assert_fail@plt+0x3ae0>
   14d70:	adds	r7, r5, #1
   14d74:	movne	r7, #1
   14d78:	cmp	r0, #0
   14d7c:	movne	r3, r7
   14d80:	moveq	r3, #1
   14d84:	cmp	r3, #0
   14d88:	addne	r0, r0, #1
   14d8c:	strne	r0, [sp, #4]
   14d90:	mov	r0, #0
   14d94:	ldr	r1, [sp, #4]
   14d98:	bl	14c4c <__assert_fail@plt+0x3a78>
   14d9c:	subs	r4, r0, #0
   14da0:	beq	14cb0 <__assert_fail@plt+0x3adc>
   14da4:	ldr	r0, [sp, #4]
   14da8:	cmn	r5, #1
   14dac:	movne	r1, #4
   14db0:	moveq	r1, #0
   14db4:	add	r1, r4, r1
   14db8:	sub	r0, r0, r7
   14dbc:	bl	11174 <getgroups@plt>
   14dc0:	cmp	r0, #0
   14dc4:	blt	14d00 <__assert_fail@plt+0x3b2c>
   14dc8:	cmn	r5, #1
   14dcc:	addne	r0, r0, #1
   14dd0:	strne	r5, [r4]
   14dd4:	cmp	r0, #1
   14dd8:	addgt	r1, r4, r0, lsl #2
   14ddc:	addgt	r3, r4, #4
   14de0:	ldrgt	ip, [r4]
   14de4:	str	r4, [r6]
   14de8:	ble	14cb4 <__assert_fail@plt+0x3ae0>
   14dec:	cmp	r1, r3
   14df0:	bls	14cb4 <__assert_fail@plt+0x3ae0>
   14df4:	ldr	r2, [r3], #4
   14df8:	cmp	r2, ip
   14dfc:	beq	14e14 <__assert_fail@plt+0x3c40>
   14e00:	ldr	lr, [r4]
   14e04:	cmp	r2, lr
   14e08:	strne	r2, [r4, #4]
   14e0c:	addne	r4, r4, #4
   14e10:	bne	14dec <__assert_fail@plt+0x3c18>
   14e14:	sub	r0, r0, #1
   14e18:	b	14dec <__assert_fail@plt+0x3c18>
   14e1c:	umull	r2, r3, r1, r2
   14e20:	cmp	r3, #0
   14e24:	bne	14e30 <__assert_fail@plt+0x3c5c>
   14e28:	mov	r1, r2
   14e2c:	b	148f4 <__assert_fail@plt+0x3720>
   14e30:	push	{r4, lr}
   14e34:	bl	110b4 <__errno_location@plt>
   14e38:	mov	r3, #12
   14e3c:	str	r3, [r0]
   14e40:	mov	r0, #0
   14e44:	pop	{r4, pc}
   14e48:	push	{lr}		; (str lr, [sp, #-4]!)
   14e4c:	sub	sp, sp, #268	; 0x10c
   14e50:	movw	r2, #257	; 0x101
   14e54:	add	r1, sp, #4
   14e58:	bl	14ea4 <__assert_fail@plt+0x3cd0>
   14e5c:	cmp	r0, #0
   14e60:	movne	r0, #0
   14e64:	bne	14e94 <__assert_fail@plt+0x3cc0>
   14e68:	ldr	r1, [pc, #44]	; 14e9c <__assert_fail@plt+0x3cc8>
   14e6c:	add	r0, sp, #4
   14e70:	bl	10f10 <strcmp@plt>
   14e74:	cmp	r0, #0
   14e78:	beq	14e90 <__assert_fail@plt+0x3cbc>
   14e7c:	ldr	r1, [pc, #28]	; 14ea0 <__assert_fail@plt+0x3ccc>
   14e80:	add	r0, sp, #4
   14e84:	bl	10f10 <strcmp@plt>
   14e88:	adds	r0, r0, #0
   14e8c:	movne	r0, #1
   14e90:	and	r0, r0, #1
   14e94:	add	sp, sp, #268	; 0x10c
   14e98:	pop	{pc}		; (ldr pc, [sp], #4)
   14e9c:	muleq	r1, r4, fp
   14ea0:	muleq	r1, r6, fp
   14ea4:	push	{r4, r5, r6, lr}
   14ea8:	mov	r5, r1
   14eac:	mov	r1, #0
   14eb0:	mov	r4, r2
   14eb4:	bl	11138 <setlocale@plt>
   14eb8:	subs	r6, r0, #0
   14ebc:	bne	14ed0 <__assert_fail@plt+0x3cfc>
   14ec0:	cmp	r4, #0
   14ec4:	mov	r0, #22
   14ec8:	strbne	r6, [r5]
   14ecc:	pop	{r4, r5, r6, pc}
   14ed0:	bl	1109c <strlen@plt>
   14ed4:	cmp	r4, r0
   14ed8:	bls	14ef4 <__assert_fail@plt+0x3d20>
   14edc:	add	r2, r0, #1
   14ee0:	mov	r1, r6
   14ee4:	mov	r0, r5
   14ee8:	bl	10f4c <memcpy@plt>
   14eec:	mov	r0, #0
   14ef0:	pop	{r4, r5, r6, pc}
   14ef4:	cmp	r4, #0
   14ef8:	beq	14f18 <__assert_fail@plt+0x3d44>
   14efc:	sub	r4, r4, #1
   14f00:	mov	r1, r6
   14f04:	mov	r2, r4
   14f08:	mov	r0, r5
   14f0c:	bl	10f4c <memcpy@plt>
   14f10:	mov	r3, #0
   14f14:	strb	r3, [r5, r4]
   14f18:	mov	r0, #34	; 0x22
   14f1c:	pop	{r4, r5, r6, pc}
   14f20:	mov	r1, #0
   14f24:	b	11138 <setlocale@plt>
   14f28:	cmp	r3, #0
   14f2c:	cmpeq	r2, #0
   14f30:	bne	14f48 <__assert_fail@plt+0x3d74>
   14f34:	cmp	r1, #0
   14f38:	cmpeq	r0, #0
   14f3c:	mvnne	r1, #0
   14f40:	mvnne	r0, #0
   14f44:	b	14f64 <__assert_fail@plt+0x3d90>
   14f48:	sub	sp, sp, #8
   14f4c:	push	{sp, lr}
   14f50:	bl	14f74 <__assert_fail@plt+0x3da0>
   14f54:	ldr	lr, [sp, #4]
   14f58:	add	sp, sp, #8
   14f5c:	pop	{r2, r3}
   14f60:	bx	lr
   14f64:	push	{r1, lr}
   14f68:	mov	r0, #8
   14f6c:	bl	10ef8 <raise@plt>
   14f70:	pop	{r1, pc}
   14f74:	cmp	r1, r3
   14f78:	cmpeq	r0, r2
   14f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f80:	mov	r4, r0
   14f84:	movcc	r0, #0
   14f88:	mov	r5, r1
   14f8c:	ldr	lr, [sp, #36]	; 0x24
   14f90:	movcc	r1, r0
   14f94:	bcc	15090 <__assert_fail@plt+0x3ebc>
   14f98:	cmp	r3, #0
   14f9c:	clzeq	ip, r2
   14fa0:	clzne	ip, r3
   14fa4:	addeq	ip, ip, #32
   14fa8:	cmp	r5, #0
   14fac:	clzeq	r1, r4
   14fb0:	addeq	r1, r1, #32
   14fb4:	clzne	r1, r5
   14fb8:	sub	ip, ip, r1
   14fbc:	sub	sl, ip, #32
   14fc0:	lsl	r9, r3, ip
   14fc4:	rsb	fp, ip, #32
   14fc8:	orr	r9, r9, r2, lsl sl
   14fcc:	orr	r9, r9, r2, lsr fp
   14fd0:	lsl	r8, r2, ip
   14fd4:	cmp	r5, r9
   14fd8:	cmpeq	r4, r8
   14fdc:	movcc	r0, #0
   14fe0:	movcc	r1, r0
   14fe4:	bcc	15000 <__assert_fail@plt+0x3e2c>
   14fe8:	mov	r0, #1
   14fec:	subs	r4, r4, r8
   14ff0:	lsl	r1, r0, sl
   14ff4:	orr	r1, r1, r0, lsr fp
   14ff8:	lsl	r0, r0, ip
   14ffc:	sbc	r5, r5, r9
   15000:	cmp	ip, #0
   15004:	beq	15090 <__assert_fail@plt+0x3ebc>
   15008:	lsr	r6, r8, #1
   1500c:	orr	r6, r6, r9, lsl #31
   15010:	lsr	r7, r9, #1
   15014:	mov	r2, ip
   15018:	b	1503c <__assert_fail@plt+0x3e68>
   1501c:	subs	r3, r4, r6
   15020:	sbc	r8, r5, r7
   15024:	adds	r3, r3, r3
   15028:	adc	r8, r8, r8
   1502c:	adds	r4, r3, #1
   15030:	adc	r5, r8, #0
   15034:	subs	r2, r2, #1
   15038:	beq	15058 <__assert_fail@plt+0x3e84>
   1503c:	cmp	r5, r7
   15040:	cmpeq	r4, r6
   15044:	bcs	1501c <__assert_fail@plt+0x3e48>
   15048:	adds	r4, r4, r4
   1504c:	adc	r5, r5, r5
   15050:	subs	r2, r2, #1
   15054:	bne	1503c <__assert_fail@plt+0x3e68>
   15058:	lsr	r3, r4, ip
   1505c:	orr	r3, r3, r5, lsl fp
   15060:	lsr	r2, r5, ip
   15064:	orr	r3, r3, r5, lsr sl
   15068:	adds	r0, r0, r4
   1506c:	mov	r4, r3
   15070:	lsl	r3, r2, ip
   15074:	orr	r3, r3, r4, lsl sl
   15078:	lsl	ip, r4, ip
   1507c:	orr	r3, r3, r4, lsr fp
   15080:	adc	r1, r1, r5
   15084:	subs	r0, r0, ip
   15088:	mov	r5, r2
   1508c:	sbc	r1, r1, r3
   15090:	cmp	lr, #0
   15094:	strdne	r4, [lr]
   15098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1509c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150a0:	mov	r7, r0
   150a4:	ldr	r6, [pc, #72]	; 150f4 <__assert_fail@plt+0x3f20>
   150a8:	ldr	r5, [pc, #72]	; 150f8 <__assert_fail@plt+0x3f24>
   150ac:	add	r6, pc, r6
   150b0:	add	r5, pc, r5
   150b4:	sub	r6, r6, r5
   150b8:	mov	r8, r1
   150bc:	mov	r9, r2
   150c0:	bl	10eb4 <calloc@plt-0x20>
   150c4:	asrs	r6, r6, #2
   150c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   150cc:	mov	r4, #0
   150d0:	add	r4, r4, #1
   150d4:	ldr	r3, [r5], #4
   150d8:	mov	r2, r9
   150dc:	mov	r1, r8
   150e0:	mov	r0, r7
   150e4:	blx	r3
   150e8:	cmp	r6, r4
   150ec:	bne	150d0 <__assert_fail@plt+0x3efc>
   150f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150f4:	andeq	r0, r1, r0, ror #28
   150f8:	andeq	r0, r1, r8, asr lr
   150fc:	bx	lr
   15100:	ldr	r3, [pc, #12]	; 15114 <__assert_fail@plt+0x3f40>
   15104:	mov	r1, #0
   15108:	add	r3, pc, r3
   1510c:	ldr	r2, [r3]
   15110:	b	110c0 <__cxa_atexit@plt>
   15114:	andeq	r1, r1, r8

Disassembly of section .fini:

00015118 <.fini>:
   15118:	push	{r3, lr}
   1511c:	pop	{r3, pc}
