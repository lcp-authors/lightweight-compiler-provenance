
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010db8 <.init>:
   10db8:	push	{r3, lr}
   10dbc:	bl	1106c <__assert_fail@plt+0x48>
   10dc0:	pop	{r3, pc}

Disassembly of section .plt:

00010dc4 <calloc@plt-0x14>:
   10dc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc8:	ldr	lr, [pc, #4]	; 10dd4 <calloc@plt-0x4>
   10dcc:	add	lr, pc, lr
   10dd0:	ldr	pc, [lr, #8]!
   10dd4:	andeq	r5, r1, ip, lsr #4

00010dd8 <calloc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #556]!	; 0x22c

00010de4 <fputs_unlocked@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #548]!	; 0x224

00010df0 <raise@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #540]!	; 0x21c

00010dfc <strcmp@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #532]!	; 0x214

00010e08 <posix_fadvise64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #524]!	; 0x20c

00010e14 <fflush@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #516]!	; 0x204

00010e20 <free@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #508]!	; 0x1fc

00010e2c <_exit@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #500]!	; 0x1f4

00010e38 <memcpy@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #492]!	; 0x1ec

00010e44 <mbsinit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e50 <memcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #476]!	; 0x1dc

00010e5c <getc_unlocked@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #468]!	; 0x1d4

00010e68 <dcgettext@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #460]!	; 0x1cc

00010e74 <realloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e80 <textdomain@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #444]!	; 0x1bc

00010e8c <iswprint@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #436]!	; 0x1b4

00010e98 <fwrite@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ea4 <lseek64@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #420]!	; 0x1a4

00010eb0 <__ctype_get_mb_cur_max@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #412]!	; 0x19c

00010ebc <__fpending@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #404]!	; 0x194

00010ec8 <ferror_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #396]!	; 0x18c

00010ed4 <mbrtowc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #388]!	; 0x184

00010ee0 <error@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #380]!	; 0x17c

00010eec <malloc@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #372]!	; 0x174

00010ef8 <__libc_start_main@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #364]!	; 0x16c

00010f04 <__freading@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #356]!	; 0x164

00010f10 <__gmon_start__@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #348]!	; 0x15c

00010f1c <getopt_long@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #340]!	; 0x154

00010f28 <__ctype_b_loc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #332]!	; 0x14c

00010f34 <exit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #324]!	; 0x144

00010f40 <strlen@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #316]!	; 0x13c

00010f4c <__errno_location@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #308]!	; 0x134

00010f58 <__cxa_atexit@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #300]!	; 0x12c

00010f64 <memset@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #292]!	; 0x124

00010f70 <__printf_chk@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #284]!	; 0x11c

00010f7c <fileno@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #276]!	; 0x114

00010f88 <__fprintf_chk@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #268]!	; 0x10c

00010f94 <fclose@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #260]!	; 0x104

00010fa0 <fseeko64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #252]!	; 0xfc

00010fac <setlocale@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #244]!	; 0xf4

00010fb8 <strrchr@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #236]!	; 0xec

00010fc4 <nl_langinfo@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #228]!	; 0xe4

00010fd0 <clearerr_unlocked@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #220]!	; 0xdc

00010fdc <fopen64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #212]!	; 0xd4

00010fe8 <bindtextdomain@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #204]!	; 0xcc

00010ff4 <strncmp@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #196]!	; 0xc4

00011000 <abort@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #188]!	; 0xbc

0001100c <putchar_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #180]!	; 0xb4

00011018 <strspn@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #172]!	; 0xac

00011024 <__assert_fail@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #164]!	; 0xa4

Disassembly of section .text:

00011030 <.text>:
   11030:	mov	fp, #0
   11034:	mov	lr, #0
   11038:	pop	{r1}		; (ldr r1, [sp], #4)
   1103c:	mov	r2, sp
   11040:	push	{r2}		; (str r2, [sp, #-4]!)
   11044:	push	{r0}		; (str r0, [sp, #-4]!)
   11048:	ldr	ip, [pc, #16]	; 11060 <__assert_fail@plt+0x3c>
   1104c:	push	{ip}		; (str ip, [sp, #-4]!)
   11050:	ldr	r0, [pc, #12]	; 11064 <__assert_fail@plt+0x40>
   11054:	ldr	r3, [pc, #12]	; 11068 <__assert_fail@plt+0x44>
   11058:	bl	10ef8 <__libc_start_main@plt>
   1105c:	bl	11000 <abort@plt>
   11060:	andeq	r5, r1, ip, lsr #5
   11064:	andeq	r1, r1, r8, lsl r4
   11068:	andeq	r5, r1, ip, asr #4
   1106c:	ldr	r3, [pc, #20]	; 11088 <__assert_fail@plt+0x64>
   11070:	ldr	r2, [pc, #20]	; 1108c <__assert_fail@plt+0x68>
   11074:	add	r3, pc, r3
   11078:	ldr	r2, [r3, r2]
   1107c:	cmp	r2, #0
   11080:	bxeq	lr
   11084:	b	10f10 <__gmon_start__@plt>
   11088:	andeq	r4, r1, r4, lsl #31
   1108c:	ldrdeq	r0, [r0], -r4
   11090:	ldr	r0, [pc, #24]	; 110b0 <__assert_fail@plt+0x8c>
   11094:	ldr	r3, [pc, #24]	; 110b4 <__assert_fail@plt+0x90>
   11098:	cmp	r3, r0
   1109c:	bxeq	lr
   110a0:	ldr	r3, [pc, #16]	; 110b8 <__assert_fail@plt+0x94>
   110a4:	cmp	r3, #0
   110a8:	bxeq	lr
   110ac:	bx	r3
   110b0:	andeq	r6, r2, r0, lsr r1
   110b4:	andeq	r6, r2, r0, lsr r1
   110b8:	andeq	r0, r0, r0
   110bc:	ldr	r0, [pc, #36]	; 110e8 <__assert_fail@plt+0xc4>
   110c0:	ldr	r1, [pc, #36]	; 110ec <__assert_fail@plt+0xc8>
   110c4:	sub	r1, r1, r0
   110c8:	asr	r1, r1, #2
   110cc:	add	r1, r1, r1, lsr #31
   110d0:	asrs	r1, r1, #1
   110d4:	bxeq	lr
   110d8:	ldr	r3, [pc, #16]	; 110f0 <__assert_fail@plt+0xcc>
   110dc:	cmp	r3, #0
   110e0:	bxeq	lr
   110e4:	bx	r3
   110e8:	andeq	r6, r2, r0, lsr r1
   110ec:	andeq	r6, r2, r0, lsr r1
   110f0:	andeq	r0, r0, r0
   110f4:	push	{r4, lr}
   110f8:	ldr	r4, [pc, #24]	; 11118 <__assert_fail@plt+0xf4>
   110fc:	ldrb	r3, [r4]
   11100:	cmp	r3, #0
   11104:	popne	{r4, pc}
   11108:	bl	11090 <__assert_fail@plt+0x6c>
   1110c:	mov	r3, #1
   11110:	strb	r3, [r4]
   11114:	pop	{r4, pc}
   11118:	andeq	r6, r2, r4, asr r1
   1111c:	b	110bc <__assert_fail@plt+0x98>
   11120:	push	{fp, lr}
   11124:	mov	fp, sp
   11128:	mov	r4, r0
   1112c:	cmp	r0, #0
   11130:	bne	111f0 <__assert_fail@plt+0x1cc>
   11134:	movw	r1, #21243	; 0x52fb
   11138:	movt	r1, #1
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	bl	10e68 <dcgettext@plt>
   11148:	mov	r1, r0
   1114c:	movw	r0, #24988	; 0x619c
   11150:	movt	r0, #2
   11154:	ldr	r2, [r0]
   11158:	mov	r0, #1
   1115c:	bl	10f70 <__printf_chk@plt>
   11160:	movw	r1, #21276	; 0x531c
   11164:	movt	r1, #1
   11168:	mov	r0, #0
   1116c:	mov	r2, #5
   11170:	bl	10e68 <dcgettext@plt>
   11174:	movw	r5, #24908	; 0x614c
   11178:	movt	r5, #2
   1117c:	ldr	r1, [r5]
   11180:	bl	10de4 <fputs_unlocked@plt>
   11184:	bl	11234 <__assert_fail@plt+0x210>
   11188:	bl	11264 <__assert_fail@plt+0x240>
   1118c:	movw	r1, #21342	; 0x535e
   11190:	movt	r1, #1
   11194:	mov	r0, #0
   11198:	mov	r2, #5
   1119c:	bl	10e68 <dcgettext@plt>
   111a0:	ldr	r1, [r5]
   111a4:	bl	10de4 <fputs_unlocked@plt>
   111a8:	bl	121b8 <__assert_fail@plt+0x1194>
   111ac:	movw	r1, #21454	; 0x53ce
   111b0:	movt	r1, #1
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	bl	10e68 <dcgettext@plt>
   111c0:	ldr	r1, [r5]
   111c4:	bl	10de4 <fputs_unlocked@plt>
   111c8:	movw	r1, #21499	; 0x53fb
   111cc:	movt	r1, #1
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	bl	10e68 <dcgettext@plt>
   111dc:	ldr	r1, [r5]
   111e0:	bl	10de4 <fputs_unlocked@plt>
   111e4:	bl	11294 <__assert_fail@plt+0x270>
   111e8:	mov	r0, r4
   111ec:	bl	10f34 <exit@plt>
   111f0:	movw	r0, #24896	; 0x6140
   111f4:	movt	r0, #2
   111f8:	ldr	r5, [r0]
   111fc:	movw	r1, #21204	; 0x52d4
   11200:	movt	r1, #1
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	bl	10e68 <dcgettext@plt>
   11210:	mov	r2, r0
   11214:	movw	r0, #24988	; 0x619c
   11218:	movt	r0, #2
   1121c:	ldr	r3, [r0]
   11220:	mov	r0, r5
   11224:	mov	r1, #1
   11228:	bl	10f88 <__fprintf_chk@plt>
   1122c:	mov	r0, r4
   11230:	bl	10f34 <exit@plt>
   11234:	push	{fp, lr}
   11238:	mov	fp, sp
   1123c:	movw	r1, #21614	; 0x546e
   11240:	movt	r1, #1
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	bl	10e68 <dcgettext@plt>
   11250:	movw	r1, #24908	; 0x614c
   11254:	movt	r1, #2
   11258:	ldr	r1, [r1]
   1125c:	pop	{fp, lr}
   11260:	b	10de4 <fputs_unlocked@plt>
   11264:	push	{fp, lr}
   11268:	mov	fp, sp
   1126c:	movw	r1, #21670	; 0x54a6
   11270:	movt	r1, #1
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	bl	10e68 <dcgettext@plt>
   11280:	movw	r1, #24908	; 0x614c
   11284:	movt	r1, #2
   11288:	ldr	r1, [r1]
   1128c:	pop	{fp, lr}
   11290:	b	10de4 <fputs_unlocked@plt>
   11294:	push	{r4, r5, fp, lr}
   11298:	add	fp, sp, #8
   1129c:	sub	sp, sp, #56	; 0x38
   112a0:	movw	r0, #22240	; 0x56e0
   112a4:	movt	r0, #1
   112a8:	add	r1, r0, #32
   112ac:	mov	r5, sp
   112b0:	mov	r2, #48	; 0x30
   112b4:	vld1.64	{d16-d17}, [r1]
   112b8:	add	r1, r5, #32
   112bc:	add	r3, r0, #16
   112c0:	vld1.64	{d18-d19}, [r0], r2
   112c4:	vld1.64	{d20-d21}, [r3]
   112c8:	vldr	d22, [r0]
   112cc:	vst1.64	{d16-d17}, [r1]
   112d0:	add	r0, r5, #16
   112d4:	vst1.64	{d20-d21}, [r0]
   112d8:	mov	r0, r5
   112dc:	vst1.64	{d18-d19}, [r0], r2
   112e0:	vstr	d22, [r0]
   112e4:	ldr	r1, [sp]
   112e8:	cmp	r1, #0
   112ec:	beq	11314 <__assert_fail@plt+0x2f0>
   112f0:	mov	r5, sp
   112f4:	movw	r4, #21553	; 0x5431
   112f8:	movt	r4, #1
   112fc:	mov	r0, r4
   11300:	bl	10dfc <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r5, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x2d8>
   11314:	ldr	r4, [r5, #4]
   11318:	movw	r1, #21840	; 0x5550
   1131c:	movt	r1, #1
   11320:	mov	r0, #0
   11324:	mov	r2, #5
   11328:	bl	10e68 <dcgettext@plt>
   1132c:	mov	r1, r0
   11330:	movw	r2, #21584	; 0x5450
   11334:	movt	r2, #1
   11338:	movw	r3, #21863	; 0x5567
   1133c:	movt	r3, #1
   11340:	mov	r0, #1
   11344:	bl	10f70 <__printf_chk@plt>
   11348:	movw	r5, #21553	; 0x5431
   1134c:	movt	r5, #1
   11350:	cmp	r4, #0
   11354:	moveq	r4, r5
   11358:	mov	r0, #5
   1135c:	mov	r1, #0
   11360:	bl	10fac <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a8 <__assert_fail@plt+0x384>
   1136c:	movw	r1, #21903	; 0x558f
   11370:	movt	r1, #1
   11374:	mov	r2, #3
   11378:	bl	10ff4 <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a8 <__assert_fail@plt+0x384>
   11384:	movw	r1, #21907	; 0x5593
   11388:	movt	r1, #1
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	bl	10e68 <dcgettext@plt>
   11398:	movw	r1, #24908	; 0x614c
   1139c:	movt	r1, #2
   113a0:	ldr	r1, [r1]
   113a4:	bl	10de4 <fputs_unlocked@plt>
   113a8:	movw	r1, #21978	; 0x55da
   113ac:	movt	r1, #1
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	bl	10e68 <dcgettext@plt>
   113bc:	mov	r1, r0
   113c0:	movw	r2, #21863	; 0x5567
   113c4:	movt	r2, #1
   113c8:	mov	r0, #1
   113cc:	mov	r3, r5
   113d0:	bl	10f70 <__printf_chk@plt>
   113d4:	movw	r1, #22005	; 0x55f5
   113d8:	movt	r1, #1
   113dc:	mov	r0, #0
   113e0:	mov	r2, #5
   113e4:	bl	10e68 <dcgettext@plt>
   113e8:	mov	r1, r0
   113ec:	movw	r0, #21773	; 0x550d
   113f0:	movt	r0, #1
   113f4:	movw	r3, #22055	; 0x5627
   113f8:	movt	r3, #1
   113fc:	cmp	r4, r5
   11400:	moveq	r3, r0
   11404:	mov	r0, #1
   11408:	mov	r2, r4
   1140c:	bl	10f70 <__printf_chk@plt>
   11410:	sub	sp, fp, #8
   11414:	pop	{r4, r5, fp, pc}
   11418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1141c:	add	fp, sp, #28
   11420:	sub	sp, sp, #12
   11424:	mov	r4, r1
   11428:	mov	r5, r0
   1142c:	ldr	r0, [r1]
   11430:	bl	12520 <__assert_fail@plt+0x14fc>
   11434:	movw	r1, #22055	; 0x5627
   11438:	movt	r1, #1
   1143c:	mov	r0, #6
   11440:	bl	10fac <setlocale@plt>
   11444:	movw	r6, #21588	; 0x5454
   11448:	movt	r6, #1
   1144c:	movw	r1, #21560	; 0x5438
   11450:	movt	r1, #1
   11454:	mov	r0, r6
   11458:	bl	10fe8 <bindtextdomain@plt>
   1145c:	mov	r0, r6
   11460:	bl	10e80 <textdomain@plt>
   11464:	movw	r0, #8740	; 0x2224
   11468:	movt	r0, #1
   1146c:	bl	152b0 <__assert_fail@plt+0x428c>
   11470:	movw	r1, #24920	; 0x6158
   11474:	movt	r1, #2
   11478:	mov	r0, #1
   1147c:	strb	r0, [r1]
   11480:	mov	r6, #0
   11484:	movw	sl, #22120	; 0x5668
   11488:	movt	sl, #1
   1148c:	movw	r7, #22156	; 0x568c
   11490:	movt	r7, #1
   11494:	movw	r9, #24912	; 0x6150
   11498:	movt	r9, #2
   1149c:	add	r8, sp, #10
   114a0:	b	114ac <__assert_fail@plt+0x488>
   114a4:	sub	r0, r1, #1
   114a8:	bl	118b4 <__assert_fail@plt+0x890>
   114ac:	str	r6, [sp]
   114b0:	mov	r0, r5
   114b4:	mov	r1, r4
   114b8:	mov	r2, sl
   114bc:	mov	r3, r7
   114c0:	bl	10f1c <getopt_long@plt>
   114c4:	sub	r1, r0, #48	; 0x30
   114c8:	cmp	r1, #10
   114cc:	bcs	114f0 <__assert_fail@plt+0x4cc>
   114d0:	ldr	r1, [r9]
   114d4:	cmp	r1, #0
   114d8:	bne	114a4 <__assert_fail@plt+0x480>
   114dc:	strb	r6, [sp, #11]
   114e0:	strb	r0, [sp, #10]
   114e4:	mov	r0, r8
   114e8:	bl	118b4 <__assert_fail@plt+0x890>
   114ec:	b	114ac <__assert_fail@plt+0x488>
   114f0:	cmp	r0, #104	; 0x68
   114f4:	ble	11524 <__assert_fail@plt+0x500>
   114f8:	cmp	r0, #116	; 0x74
   114fc:	beq	11518 <__assert_fail@plt+0x4f4>
   11500:	cmp	r0, #105	; 0x69
   11504:	bne	115c8 <__assert_fail@plt+0x5a4>
   11508:	movw	r0, #24920	; 0x6158
   1150c:	movt	r0, #2
   11510:	strb	r6, [r0]
   11514:	b	114ac <__assert_fail@plt+0x488>
   11518:	ldr	r0, [r9]
   1151c:	bl	118b4 <__assert_fail@plt+0x890>
   11520:	b	114ac <__assert_fail@plt+0x488>
   11524:	cmn	r0, #1
   11528:	bne	11568 <__assert_fail@plt+0x544>
   1152c:	bl	11cdc <__assert_fail@plt+0xcb8>
   11530:	movw	r0, #24888	; 0x6138
   11534:	movt	r0, #2
   11538:	ldr	r1, [r0]
   1153c:	mov	r0, #0
   11540:	cmp	r1, r5
   11544:	addlt	r0, r4, r1, lsl #2
   11548:	bl	11f4c <__assert_fail@plt+0xf28>
   1154c:	bl	115d0 <__assert_fail@plt+0x5ac>
   11550:	bl	12168 <__assert_fail@plt+0x1144>
   11554:	movw	r0, #24924	; 0x615c
   11558:	movt	r0, #2
   1155c:	ldr	r0, [r0]
   11560:	sub	sp, fp, #28
   11564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11568:	cmn	r0, #3
   1156c:	beq	11580 <__assert_fail@plt+0x55c>
   11570:	cmn	r0, #2
   11574:	bne	115c8 <__assert_fail@plt+0x5a4>
   11578:	mov	r0, #0
   1157c:	bl	11120 <__assert_fail@plt+0xfc>
   11580:	movw	r0, #24808	; 0x60e8
   11584:	movt	r0, #2
   11588:	ldr	r3, [r0]
   1158c:	movw	r0, #24908	; 0x614c
   11590:	movt	r0, #2
   11594:	ldr	r0, [r0]
   11598:	mov	r1, #0
   1159c:	movw	r2, #21598	; 0x545e
   115a0:	movt	r2, #1
   115a4:	str	r2, [sp]
   115a8:	str	r1, [sp, #4]
   115ac:	movw	r1, #21553	; 0x5431
   115b0:	movt	r1, #1
   115b4:	movw	r2, #21584	; 0x5450
   115b8:	movt	r2, #1
   115bc:	bl	14528 <__assert_fail@plt+0x3504>
   115c0:	mov	r0, #0
   115c4:	bl	10f34 <exit@plt>
   115c8:	mov	r0, #1
   115cc:	bl	11120 <__assert_fail@plt+0xfc>
   115d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115d4:	add	fp, sp, #28
   115d8:	sub	sp, sp, #12
   115dc:	mov	r0, #0
   115e0:	bl	11f7c <__assert_fail@plt+0xf58>
   115e4:	cmp	r0, #0
   115e8:	beq	1174c <__assert_fail@plt+0x728>
   115ec:	mov	r4, r0
   115f0:	movw	sl, #24920	; 0x6158
   115f4:	movt	sl, #2
   115f8:	add	r9, sp, #7
   115fc:	mov	r7, #0
   11600:	str	r7, [sp, #8]
   11604:	mov	r8, #1
   11608:	mov	r5, #0
   1160c:	mov	r0, r4
   11610:	bl	10e5c <getc_unlocked@plt>
   11614:	mov	r6, r0
   11618:	cmn	r0, #1
   1161c:	bgt	11638 <__assert_fail@plt+0x614>
   11620:	mov	r0, r4
   11624:	bl	11f7c <__assert_fail@plt+0xf58>
   11628:	mov	r4, r0
   1162c:	cmp	r0, #0
   11630:	bne	1160c <__assert_fail@plt+0x5e8>
   11634:	mov	r4, #0
   11638:	tst	r8, #1
   1163c:	beq	116b0 <__assert_fail@plt+0x68c>
   11640:	cmp	r6, #8
   11644:	beq	116c0 <__assert_fail@plt+0x69c>
   11648:	cmp	r6, #9
   1164c:	bne	116f0 <__assert_fail@plt+0x6cc>
   11650:	mov	r0, r7
   11654:	mov	r1, r5
   11658:	add	r2, sp, #8
   1165c:	mov	r3, r9
   11660:	bl	11e44 <__assert_fail@plt+0xe20>
   11664:	adds	r8, r7, #1
   11668:	adc	r6, r5, #0
   1166c:	ldrb	r2, [sp, #7]
   11670:	cmp	r2, #0
   11674:	moveq	r6, r1
   11678:	moveq	r8, r0
   1167c:	subs	r0, r8, r7
   11680:	sbcs	r0, r6, r5
   11684:	bcc	11780 <__assert_fail@plt+0x75c>
   11688:	adds	r7, r7, #1
   1168c:	adc	r5, r5, #0
   11690:	subs	r0, r7, r8
   11694:	sbcs	r0, r5, r6
   11698:	bcs	11704 <__assert_fail@plt+0x6e0>
   1169c:	mov	r0, #32
   116a0:	bl	1100c <putchar_unlocked@plt>
   116a4:	cmn	r0, #1
   116a8:	bgt	11688 <__assert_fail@plt+0x664>
   116ac:	b	11754 <__assert_fail@plt+0x730>
   116b0:	mov	r8, #0
   116b4:	cmp	r6, #0
   116b8:	bge	11730 <__assert_fail@plt+0x70c>
   116bc:	b	1174c <__assert_fail@plt+0x728>
   116c0:	ldr	r0, [sp, #8]
   116c4:	cmp	r0, #0
   116c8:	subne	r0, r0, #1
   116cc:	str	r0, [sp, #8]
   116d0:	orr	r0, r7, r5
   116d4:	subs	r1, r7, #1
   116d8:	sbc	r2, r5, #0
   116dc:	cmp	r0, #0
   116e0:	movne	r5, r2
   116e4:	movne	r7, r1
   116e8:	mov	r6, #8
   116ec:	b	11708 <__assert_fail@plt+0x6e4>
   116f0:	adds	r7, r7, #1
   116f4:	adc	r5, r5, #0
   116f8:	orrs	r0, r7, r5
   116fc:	bne	11708 <__assert_fail@plt+0x6e4>
   11700:	b	11780 <__assert_fail@plt+0x75c>
   11704:	mov	r6, #32
   11708:	ldrb	r0, [sl]
   1170c:	mov	r8, #1
   11710:	cmp	r0, #0
   11714:	bne	11728 <__assert_fail@plt+0x704>
   11718:	bl	10f28 <__ctype_b_loc@plt>
   1171c:	ldr	r0, [r0]
   11720:	ldrb	r0, [r0, r6, lsl #1]
   11724:	and	r8, r0, #1
   11728:	cmp	r6, #0
   1172c:	blt	1174c <__assert_fail@plt+0x728>
   11730:	mov	r0, r6
   11734:	bl	1100c <putchar_unlocked@plt>
   11738:	cmn	r0, #1
   1173c:	ble	11754 <__assert_fail@plt+0x730>
   11740:	cmp	r6, #10
   11744:	bne	1160c <__assert_fail@plt+0x5e8>
   11748:	b	115fc <__assert_fail@plt+0x5d8>
   1174c:	sub	sp, fp, #28
   11750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11754:	bl	10f4c <__errno_location@plt>
   11758:	ldr	r4, [r0]
   1175c:	movw	r1, #22105	; 0x5659
   11760:	movt	r1, #1
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	bl	10e68 <dcgettext@plt>
   11770:	mov	r2, r0
   11774:	mov	r0, #1
   11778:	mov	r1, r4
   1177c:	bl	10ee0 <error@plt>
   11780:	movw	r1, #22082	; 0x5642
   11784:	movt	r1, #1
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	bl	10e68 <dcgettext@plt>
   11794:	mov	r2, r0
   11798:	mov	r0, #1
   1179c:	mov	r1, #0
   117a0:	bl	10ee0 <error@plt>
   117a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   117a8:	add	fp, sp, #24
   117ac:	mov	r4, r1
   117b0:	mov	r6, r0
   117b4:	movw	r8, #24928	; 0x6160
   117b8:	movt	r8, #2
   117bc:	ldr	r0, [r8]
   117c0:	mov	r1, #0
   117c4:	cmp	r0, #0
   117c8:	beq	117e4 <__assert_fail@plt+0x7c0>
   117cc:	movw	r2, #24932	; 0x6164
   117d0:	movt	r2, #2
   117d4:	ldr	r2, [r2]
   117d8:	add	r2, r2, r0, lsl #3
   117dc:	ldrd	r2, [r2, #-8]
   117e0:	b	117ec <__assert_fail@plt+0x7c8>
   117e4:	mov	r2, #0
   117e8:	mov	r3, #0
   117ec:	subs	r7, r6, r2
   117f0:	sbcs	r7, r4, r3
   117f4:	movwcc	r1, #1
   117f8:	cmp	r1, #0
   117fc:	mov	r1, r4
   11800:	movne	r1, r3
   11804:	mov	r5, r6
   11808:	movne	r5, r2
   1180c:	subs	r7, r5, r2
   11810:	sbc	r5, r1, r3
   11814:	movw	r1, #24936	; 0x6168
   11818:	movt	r1, #2
   1181c:	ldr	r1, [r1]
   11820:	cmp	r0, r1
   11824:	bne	11848 <__assert_fail@plt+0x824>
   11828:	movw	r9, #24932	; 0x6164
   1182c:	movt	r9, #2
   11830:	ldr	r0, [r9]
   11834:	movw	r1, #24936	; 0x6168
   11838:	movt	r1, #2
   1183c:	mov	r2, #8
   11840:	bl	14700 <__assert_fail@plt+0x36dc>
   11844:	str	r0, [r9]
   11848:	ldr	r0, [r8]
   1184c:	add	r1, r0, #1
   11850:	str	r1, [r8]
   11854:	movw	r1, #24932	; 0x6164
   11858:	movt	r1, #2
   1185c:	ldr	r1, [r1]
   11860:	str	r6, [r1, r0, lsl #3]!
   11864:	str	r4, [r1, #4]
   11868:	movw	r0, #25296	; 0x62d0
   1186c:	movt	r0, #2
   11870:	ldr	r1, [r0]
   11874:	subs	r1, r1, r7
   11878:	rscs	r1, r5, #0
   1187c:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   11880:	cmp	r5, #0
   11884:	bne	11890 <__assert_fail@plt+0x86c>
   11888:	str	r7, [r0]
   1188c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11890:	movw	r1, #22296	; 0x5718
   11894:	movt	r1, #1
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	bl	10e68 <dcgettext@plt>
   118a4:	mov	r2, r0
   118a8:	mov	r0, #1
   118ac:	mov	r1, #0
   118b0:	bl	10ee0 <error@plt>
   118b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b8:	add	fp, sp, #28
   118bc:	sub	sp, sp, #12
   118c0:	mov	r8, r0
   118c4:	mov	sl, #0
   118c8:	mov	r7, #1
   118cc:	mov	r0, #0
   118d0:	str	r0, [sp, #4]
   118d4:	mov	r5, #0
   118d8:	mov	r0, #0
   118dc:	str	r0, [sp, #8]
   118e0:	mov	r0, #0
   118e4:	str	r0, [sp]
   118e8:	mov	r4, #0
   118ec:	b	118f4 <__assert_fail@plt+0x8d0>
   118f0:	add	r8, r8, #1
   118f4:	ldrb	r9, [r8]
   118f8:	cmp	r9, #44	; 0x2c
   118fc:	beq	11980 <__assert_fail@plt+0x95c>
   11900:	cmp	r9, #0
   11904:	beq	11b6c <__assert_fail@plt+0xb48>
   11908:	bl	10f28 <__ctype_b_loc@plt>
   1190c:	ldr	r6, [r0]
   11910:	mov	r0, r9
   11914:	bl	11c10 <__assert_fail@plt+0xbec>
   11918:	ldrb	r0, [r6, r9, lsl #1]
   1191c:	tst	r0, #1
   11920:	bne	11980 <__assert_fail@plt+0x95c>
   11924:	cmp	r9, #43	; 0x2b
   11928:	beq	119f0 <__assert_fail@plt+0x9cc>
   1192c:	cmp	r9, #47	; 0x2f
   11930:	bne	11a50 <__assert_fail@plt+0xa2c>
   11934:	mov	r0, #0
   11938:	tst	r4, #1
   1193c:	beq	11b48 <__assert_fail@plt+0xb24>
   11940:	str	r0, [sp, #8]
   11944:	mov	r0, #0
   11948:	movw	r1, #22319	; 0x572f
   1194c:	movt	r1, #1
   11950:	mov	r2, #5
   11954:	bl	10e68 <dcgettext@plt>
   11958:	mov	r7, r0
   1195c:	mov	r0, r8
   11960:	bl	13d58 <__assert_fail@plt+0x2d34>
   11964:	mov	r3, r0
   11968:	mov	r0, #0
   1196c:	mov	r1, #0
   11970:	mov	r2, r7
   11974:	bl	10ee0 <error@plt>
   11978:	mov	r5, #1
   1197c:	b	11a38 <__assert_fail@plt+0xa14>
   11980:	tst	r4, #1
   11984:	beq	11b50 <__assert_fail@plt+0xb2c>
   11988:	tst	r5, #1
   1198c:	beq	119b0 <__assert_fail@plt+0x98c>
   11990:	mov	r0, sl
   11994:	ldr	r1, [sp, #4]
   11998:	bl	11c14 <__assert_fail@plt+0xbf0>
   1199c:	mov	r5, #1
   119a0:	cmp	r0, #0
   119a4:	mov	r4, #0
   119a8:	bne	118f0 <__assert_fail@plt+0x8cc>
   119ac:	b	11bb0 <__assert_fail@plt+0xb8c>
   119b0:	ldr	r0, [sp, #8]
   119b4:	tst	r0, #1
   119b8:	beq	119d4 <__assert_fail@plt+0x9b0>
   119bc:	mov	r0, sl
   119c0:	ldr	r1, [sp, #4]
   119c4:	bl	11c78 <__assert_fail@plt+0xc54>
   119c8:	cmp	r0, #0
   119cc:	bne	11a40 <__assert_fail@plt+0xa1c>
   119d0:	b	11bb0 <__assert_fail@plt+0xb8c>
   119d4:	mov	r0, sl
   119d8:	ldr	r1, [sp, #4]
   119dc:	bl	117a4 <__assert_fail@plt+0x780>
   119e0:	mov	r5, #0
   119e4:	mov	r0, #0
   119e8:	str	r0, [sp, #8]
   119ec:	b	11b50 <__assert_fail@plt+0xb2c>
   119f0:	tst	r4, #1
   119f4:	beq	11a40 <__assert_fail@plt+0xa1c>
   119f8:	mov	r5, #0
   119fc:	mov	r0, #0
   11a00:	movw	r1, #22360	; 0x5758
   11a04:	movt	r1, #1
   11a08:	mov	r2, #5
   11a0c:	bl	10e68 <dcgettext@plt>
   11a10:	mov	r7, r0
   11a14:	mov	r0, r8
   11a18:	bl	13d58 <__assert_fail@plt+0x2d34>
   11a1c:	mov	r3, r0
   11a20:	mov	r0, #0
   11a24:	mov	r1, #0
   11a28:	mov	r2, r7
   11a2c:	bl	10ee0 <error@plt>
   11a30:	mov	r0, #1
   11a34:	str	r0, [sp, #8]
   11a38:	mov	r7, #0
   11a3c:	b	11b3c <__assert_fail@plt+0xb18>
   11a40:	mov	r0, #1
   11a44:	str	r0, [sp, #8]
   11a48:	mov	r5, #0
   11a4c:	b	11b50 <__assert_fail@plt+0xb2c>
   11a50:	sub	r0, r9, #48	; 0x30
   11a54:	cmp	r0, #9
   11a58:	bhi	11bd4 <__assert_fail@plt+0xbb0>
   11a5c:	ands	r1, r4, #1
   11a60:	ldr	r2, [sp]
   11a64:	moveq	r2, r8
   11a68:	str	r2, [sp]
   11a6c:	mov	r2, r1
   11a70:	ldr	r3, [sp, #4]
   11a74:	movne	r2, r3
   11a78:	movne	r1, sl
   11a7c:	movw	r3, #39321	; 0x9999
   11a80:	movt	r3, #39321	; 0x9999
   11a84:	subs	r3, r3, r1
   11a88:	movw	r3, #39321	; 0x9999
   11a8c:	movt	r3, #6553	; 0x1999
   11a90:	sbcs	r3, r3, r2
   11a94:	bcc	11acc <__assert_fail@plt+0xaa8>
   11a98:	mov	r3, #10
   11a9c:	mov	ip, r7
   11aa0:	umull	r3, r7, r1, r3
   11aa4:	add	r6, r2, r2, lsl #2
   11aa8:	add	r7, r7, r6, lsl #1
   11aac:	adds	r3, r3, r0
   11ab0:	adc	r0, r7, r0, asr #31
   11ab4:	mov	r4, #1
   11ab8:	subs	r7, r3, r1
   11abc:	sbcs	r7, r0, r2
   11ac0:	mov	sl, r1
   11ac4:	str	r2, [sp, #4]
   11ac8:	bcs	11b58 <__assert_fail@plt+0xb34>
   11acc:	ldr	r7, [sp]
   11ad0:	mov	r0, r7
   11ad4:	movw	r1, #22401	; 0x5781
   11ad8:	movt	r1, #1
   11adc:	bl	11018 <strspn@plt>
   11ae0:	mov	r9, r0
   11ae4:	mov	r0, r7
   11ae8:	mov	r1, r9
   11aec:	bl	14984 <__assert_fail@plt+0x3960>
   11af0:	mov	r6, r0
   11af4:	mov	r0, #0
   11af8:	movw	r1, #22412	; 0x578c
   11afc:	movt	r1, #1
   11b00:	mov	r2, #5
   11b04:	bl	10e68 <dcgettext@plt>
   11b08:	mov	r4, r0
   11b0c:	mov	r0, r6
   11b10:	bl	13d58 <__assert_fail@plt+0x2d34>
   11b14:	mov	r3, r0
   11b18:	mov	r0, #0
   11b1c:	mov	r1, #0
   11b20:	mov	r2, r4
   11b24:	bl	10ee0 <error@plt>
   11b28:	mov	r0, r6
   11b2c:	bl	12454 <__assert_fail@plt+0x1430>
   11b30:	add	r0, r7, r9
   11b34:	mov	r7, #0
   11b38:	sub	r8, r0, #1
   11b3c:	mov	r4, #1
   11b40:	add	r8, r8, #1
   11b44:	b	118f4 <__assert_fail@plt+0x8d0>
   11b48:	str	r0, [sp, #8]
   11b4c:	mov	r5, #1
   11b50:	mov	r4, #0
   11b54:	b	118f0 <__assert_fail@plt+0x8cc>
   11b58:	mov	r7, ip
   11b5c:	mov	sl, r3
   11b60:	str	r0, [sp, #4]
   11b64:	add	r8, r8, #1
   11b68:	b	118f4 <__assert_fail@plt+0x8d0>
   11b6c:	and	r0, r7, r4
   11b70:	tst	r0, #1
   11b74:	beq	11bc4 <__assert_fail@plt+0xba0>
   11b78:	tst	r5, #1
   11b7c:	beq	11b90 <__assert_fail@plt+0xb6c>
   11b80:	mov	r0, sl
   11b84:	ldr	r1, [sp, #4]
   11b88:	bl	11c14 <__assert_fail@plt+0xbf0>
   11b8c:	b	11ba8 <__assert_fail@plt+0xb84>
   11b90:	ldr	r0, [sp, #8]
   11b94:	tst	r0, #1
   11b98:	beq	11bb8 <__assert_fail@plt+0xb94>
   11b9c:	mov	r0, sl
   11ba0:	ldr	r1, [sp, #4]
   11ba4:	bl	11c78 <__assert_fail@plt+0xc54>
   11ba8:	cmp	r0, #0
   11bac:	bne	11bcc <__assert_fail@plt+0xba8>
   11bb0:	mov	r0, #1
   11bb4:	bl	10f34 <exit@plt>
   11bb8:	mov	r0, sl
   11bbc:	ldr	r1, [sp, #4]
   11bc0:	bl	117a4 <__assert_fail@plt+0x780>
   11bc4:	tst	r7, #1
   11bc8:	beq	11bb0 <__assert_fail@plt+0xb8c>
   11bcc:	sub	sp, fp, #28
   11bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd4:	movw	r1, #22437	; 0x57a5
   11bd8:	movt	r1, #1
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	bl	10e68 <dcgettext@plt>
   11be8:	mov	r4, r0
   11bec:	mov	r0, r8
   11bf0:	bl	13d58 <__assert_fail@plt+0x2d34>
   11bf4:	mov	r3, r0
   11bf8:	mov	r0, #0
   11bfc:	mov	r1, #0
   11c00:	mov	r2, r4
   11c04:	bl	10ee0 <error@plt>
   11c08:	mov	r0, #1
   11c0c:	bl	10f34 <exit@plt>
   11c10:	bx	lr
   11c14:	push	{r4, r5, r6, r7, fp, lr}
   11c18:	add	fp, sp, #16
   11c1c:	mov	r5, r1
   11c20:	mov	r6, r0
   11c24:	movw	r7, #24944	; 0x6170
   11c28:	movt	r7, #2
   11c2c:	ldrd	r0, [r7]
   11c30:	orrs	r0, r0, r1
   11c34:	beq	11c64 <__assert_fail@plt+0xc40>
   11c38:	mov	r4, #0
   11c3c:	movw	r1, #22962	; 0x59b2
   11c40:	movt	r1, #1
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	bl	10e68 <dcgettext@plt>
   11c50:	mov	r2, r0
   11c54:	mov	r0, #0
   11c58:	mov	r1, #0
   11c5c:	bl	10ee0 <error@plt>
   11c60:	b	11c68 <__assert_fail@plt+0xc44>
   11c64:	mov	r4, #1
   11c68:	str	r6, [r7]
   11c6c:	str	r5, [r7, #4]
   11c70:	mov	r0, r4
   11c74:	pop	{r4, r5, r6, r7, fp, pc}
   11c78:	push	{r4, r5, r6, r7, fp, lr}
   11c7c:	add	fp, sp, #16
   11c80:	mov	r5, r1
   11c84:	mov	r6, r0
   11c88:	movw	r7, #24952	; 0x6178
   11c8c:	movt	r7, #2
   11c90:	ldrd	r0, [r7]
   11c94:	orrs	r0, r0, r1
   11c98:	beq	11cc8 <__assert_fail@plt+0xca4>
   11c9c:	mov	r4, #0
   11ca0:	movw	r1, #23009	; 0x59e1
   11ca4:	movt	r1, #1
   11ca8:	mov	r0, #0
   11cac:	mov	r2, #5
   11cb0:	bl	10e68 <dcgettext@plt>
   11cb4:	mov	r2, r0
   11cb8:	mov	r0, #0
   11cbc:	mov	r1, #0
   11cc0:	bl	10ee0 <error@plt>
   11cc4:	b	11ccc <__assert_fail@plt+0xca8>
   11cc8:	mov	r4, #1
   11ccc:	str	r6, [r7]
   11cd0:	str	r5, [r7, #4]
   11cd4:	mov	r0, r4
   11cd8:	pop	{r4, r5, r6, r7, fp, pc}
   11cdc:	push	{r4, r5, r6, r7, fp, lr}
   11ce0:	add	fp, sp, #16
   11ce4:	movw	r5, #24928	; 0x6160
   11ce8:	movt	r5, #2
   11cec:	ldr	r1, [r5]
   11cf0:	movw	r4, #24932	; 0x6164
   11cf4:	movt	r4, #2
   11cf8:	ldr	r0, [r4]
   11cfc:	bl	11d94 <__assert_fail@plt+0xd70>
   11d00:	ldr	r1, [r5]
   11d04:	cmp	r1, #0
   11d08:	beq	11d4c <__assert_fail@plt+0xd28>
   11d0c:	mov	r0, #0
   11d10:	cmp	r1, #1
   11d14:	bne	11d80 <__assert_fail@plt+0xd5c>
   11d18:	movw	r1, #24944	; 0x6170
   11d1c:	movt	r1, #2
   11d20:	ldrd	r2, [r1]
   11d24:	movw	r1, #24952	; 0x6178
   11d28:	movt	r1, #2
   11d2c:	ldrd	r6, [r1]
   11d30:	orr	r1, r7, r3
   11d34:	orr	r2, r6, r2
   11d38:	orrs	r1, r2, r1
   11d3c:	mov	r1, #0
   11d40:	ldreq	r0, [r4]
   11d44:	ldrdeq	r0, [r0]
   11d48:	b	11d84 <__assert_fail@plt+0xd60>
   11d4c:	movw	r0, #24944	; 0x6170
   11d50:	movt	r0, #2
   11d54:	ldrd	r0, [r0]
   11d58:	orrs	r1, r0, r1
   11d5c:	bne	11d74 <__assert_fail@plt+0xd50>
   11d60:	movw	r0, #24952	; 0x6178
   11d64:	movt	r0, #2
   11d68:	ldrd	r0, [r0]
   11d6c:	orrs	r1, r0, r1
   11d70:	movweq	r0, #8
   11d74:	movw	r1, #25296	; 0x62d0
   11d78:	movt	r1, #2
   11d7c:	str	r0, [r1]
   11d80:	mov	r1, #0
   11d84:	movw	r2, #24960	; 0x6180
   11d88:	movt	r2, #2
   11d8c:	strd	r0, [r2]
   11d90:	pop	{r4, r5, r6, r7, fp, pc}
   11d94:	push	{r4, r5, fp, lr}
   11d98:	add	fp, sp, #8
   11d9c:	cmp	r1, #0
   11da0:	beq	11de0 <__assert_fail@plt+0xdbc>
   11da4:	mov	r2, #0
   11da8:	mov	ip, #0
   11dac:	mov	lr, #0
   11db0:	ldrd	r4, [r0]
   11db4:	orrs	r3, r4, r5
   11db8:	beq	11e08 <__assert_fail@plt+0xde4>
   11dbc:	subs	r3, ip, r4
   11dc0:	sbcs	r3, lr, r5
   11dc4:	bcs	11e14 <__assert_fail@plt+0xdf0>
   11dc8:	add	r2, r2, #1
   11dcc:	add	r0, r0, #8
   11dd0:	cmp	r2, r1
   11dd4:	mov	ip, r4
   11dd8:	mov	lr, r5
   11ddc:	bcc	11db0 <__assert_fail@plt+0xd8c>
   11de0:	movw	r0, #24952	; 0x6178
   11de4:	movt	r0, #2
   11de8:	ldrd	r0, [r0]
   11dec:	orrs	r0, r0, r1
   11df0:	movwne	r0, #24944	; 0x6170
   11df4:	movtne	r0, #2
   11df8:	ldrdne	r0, [r0]
   11dfc:	orrsne	r0, r0, r1
   11e00:	bne	11e38 <__assert_fail@plt+0xe14>
   11e04:	pop	{r4, r5, fp, pc}
   11e08:	movw	r1, #23056	; 0x5a10
   11e0c:	movt	r1, #1
   11e10:	b	11e1c <__assert_fail@plt+0xdf8>
   11e14:	movw	r1, #23077	; 0x5a25
   11e18:	movt	r1, #1
   11e1c:	mov	r0, #0
   11e20:	mov	r2, #5
   11e24:	bl	10e68 <dcgettext@plt>
   11e28:	mov	r2, r0
   11e2c:	mov	r0, #1
   11e30:	mov	r1, #0
   11e34:	bl	10ee0 <error@plt>
   11e38:	movw	r1, #23105	; 0x5a41
   11e3c:	movt	r1, #1
   11e40:	b	11e1c <__assert_fail@plt+0xdf8>
   11e44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11e48:	add	fp, sp, #24
   11e4c:	mov	r8, r1
   11e50:	mov	r9, r0
   11e54:	mov	r0, #0
   11e58:	strb	r0, [r3]
   11e5c:	movw	r0, #24960	; 0x6180
   11e60:	movt	r0, #2
   11e64:	ldrd	r6, [r0]
   11e68:	orrs	r0, r6, r7
   11e6c:	bne	11ed4 <__assert_fail@plt+0xeb0>
   11e70:	movw	r7, #24928	; 0x6160
   11e74:	movt	r7, #2
   11e78:	ldr	r0, [r7]
   11e7c:	ldr	r1, [r2]
   11e80:	cmp	r1, r0
   11e84:	bcs	11ec0 <__assert_fail@plt+0xe9c>
   11e88:	movw	r0, #24932	; 0x6164
   11e8c:	movt	r0, #2
   11e90:	ldr	r0, [r0]
   11e94:	add	r4, r0, r1, lsl #3
   11e98:	ldr	r0, [r7]
   11e9c:	ldrd	r6, [r4]
   11ea0:	subs	r5, r9, r6
   11ea4:	sbcs	r5, r8, r7
   11ea8:	bcc	11ef8 <__assert_fail@plt+0xed4>
   11eac:	add	r1, r1, #1
   11eb0:	str	r1, [r2]
   11eb4:	add	r4, r4, #8
   11eb8:	cmp	r1, r0
   11ebc:	bcc	11e9c <__assert_fail@plt+0xe78>
   11ec0:	movw	r1, #24944	; 0x6170
   11ec4:	movt	r1, #2
   11ec8:	ldrd	r6, [r1]
   11ecc:	orrs	r1, r6, r7
   11ed0:	beq	11f04 <__assert_fail@plt+0xee0>
   11ed4:	mov	r0, r9
   11ed8:	mov	r1, r8
   11edc:	mov	r2, r6
   11ee0:	mov	r3, r7
   11ee4:	bl	150d8 <__assert_fail@plt+0x40b4>
   11ee8:	adds	r0, r6, r9
   11eec:	adc	r1, r7, r8
   11ef0:	subs	r6, r0, r2
   11ef4:	sbc	r7, r1, r3
   11ef8:	mov	r0, r6
   11efc:	mov	r1, r7
   11f00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f04:	movw	r1, #24952	; 0x6178
   11f08:	movt	r1, #2
   11f0c:	ldrd	r6, [r1]
   11f10:	orrs	r1, r6, r7
   11f14:	beq	11f38 <__assert_fail@plt+0xf14>
   11f18:	movw	r1, #24932	; 0x6164
   11f1c:	movt	r1, #2
   11f20:	ldr	r1, [r1]
   11f24:	add	r0, r1, r0, lsl #3
   11f28:	ldrd	r0, [r0, #-8]
   11f2c:	subs	r0, r9, r0
   11f30:	sbc	r1, r8, r1
   11f34:	b	11edc <__assert_fail@plt+0xeb8>
   11f38:	mov	r0, #1
   11f3c:	strb	r0, [r3]
   11f40:	mov	r6, #0
   11f44:	mov	r7, #0
   11f48:	b	11ef8 <__assert_fail@plt+0xed4>
   11f4c:	movw	r1, #24968	; 0x6188
   11f50:	movt	r1, #2
   11f54:	mov	r2, #0
   11f58:	strb	r2, [r1]
   11f5c:	movw	r1, #24800	; 0x60e0
   11f60:	movt	r1, #2
   11f64:	cmp	r0, #0
   11f68:	movne	r1, r0
   11f6c:	movw	r0, #24972	; 0x618c
   11f70:	movt	r0, #2
   11f74:	str	r1, [r0]
   11f78:	bx	lr
   11f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f80:	add	fp, sp, #28
   11f84:	sub	sp, sp, #4
   11f88:	cmp	r0, #0
   11f8c:	beq	1202c <__assert_fail@plt+0x1008>
   11f90:	mov	r5, r0
   11f94:	movw	r7, #24976	; 0x6190
   11f98:	movt	r7, #2
   11f9c:	ldr	r0, [r7]
   11fa0:	cmp	r0, #0
   11fa4:	beq	12148 <__assert_fail@plt+0x1124>
   11fa8:	bl	10f4c <__errno_location@plt>
   11fac:	mov	r6, r0
   11fb0:	ldr	r4, [r0]
   11fb4:	mov	r0, r5
   11fb8:	bl	10ec8 <ferror_unlocked@plt>
   11fbc:	cmp	r0, #0
   11fc0:	moveq	r4, r0
   11fc4:	ldr	r0, [r7]
   11fc8:	movw	r1, #23238	; 0x5ac6
   11fcc:	movt	r1, #1
   11fd0:	bl	10dfc <strcmp@plt>
   11fd4:	cmp	r0, #0
   11fd8:	beq	12134 <__assert_fail@plt+0x1110>
   11fdc:	mov	r0, r5
   11fe0:	bl	1234c <__assert_fail@plt+0x1328>
   11fe4:	cmp	r0, #0
   11fe8:	ldrne	r4, [r6]
   11fec:	cmp	r4, #0
   11ff0:	beq	1202c <__assert_fail@plt+0x1008>
   11ff4:	ldr	r2, [r7]
   11ff8:	mov	r0, #0
   11ffc:	mov	r1, #3
   12000:	bl	13c18 <__assert_fail@plt+0x2bf4>
   12004:	mov	r3, r0
   12008:	movw	r2, #22477	; 0x57cd
   1200c:	movt	r2, #1
   12010:	mov	r0, #0
   12014:	mov	r1, r4
   12018:	bl	10ee0 <error@plt>
   1201c:	movw	r0, #24924	; 0x615c
   12020:	movt	r0, #2
   12024:	mov	r1, #1
   12028:	str	r1, [r0]
   1202c:	movw	r5, #24972	; 0x618c
   12030:	movt	r5, #2
   12034:	ldr	r0, [r5]
   12038:	add	r1, r0, #4
   1203c:	str	r1, [r5]
   12040:	ldr	r7, [r0]
   12044:	cmp	r7, #0
   12048:	beq	12108 <__assert_fail@plt+0x10e4>
   1204c:	mov	r8, #1
   12050:	movw	sl, #22477	; 0x57cd
   12054:	movt	sl, #1
   12058:	movw	r9, #24924	; 0x615c
   1205c:	movt	r9, #2
   12060:	mov	r0, r7
   12064:	movw	r1, #23238	; 0x5ac6
   12068:	movt	r1, #1
   1206c:	bl	10dfc <strcmp@plt>
   12070:	cmp	r0, #0
   12074:	beq	12098 <__assert_fail@plt+0x1074>
   12078:	mov	r0, r7
   1207c:	movw	r1, #22115	; 0x5663
   12080:	movt	r1, #1
   12084:	bl	10fdc <fopen64@plt>
   12088:	mov	r6, r0
   1208c:	cmp	r6, #0
   12090:	beq	120b8 <__assert_fail@plt+0x1094>
   12094:	b	12110 <__assert_fail@plt+0x10ec>
   12098:	movw	r0, #24968	; 0x6188
   1209c:	movt	r0, #2
   120a0:	strb	r8, [r0]
   120a4:	movw	r0, #24904	; 0x6148
   120a8:	movt	r0, #2
   120ac:	ldr	r6, [r0]
   120b0:	cmp	r6, #0
   120b4:	bne	12110 <__assert_fail@plt+0x10ec>
   120b8:	bl	10f4c <__errno_location@plt>
   120bc:	ldr	r4, [r0]
   120c0:	mov	r6, #0
   120c4:	mov	r0, #0
   120c8:	mov	r1, #3
   120cc:	mov	r2, r7
   120d0:	bl	13c18 <__assert_fail@plt+0x2bf4>
   120d4:	mov	r3, r0
   120d8:	mov	r0, #0
   120dc:	mov	r1, r4
   120e0:	mov	r2, sl
   120e4:	bl	10ee0 <error@plt>
   120e8:	str	r8, [r9]
   120ec:	ldr	r0, [r5]
   120f0:	add	r1, r0, #4
   120f4:	str	r1, [r5]
   120f8:	ldr	r7, [r0]
   120fc:	cmp	r7, #0
   12100:	bne	12060 <__assert_fail@plt+0x103c>
   12104:	b	12128 <__assert_fail@plt+0x1104>
   12108:	mov	r6, #0
   1210c:	b	12128 <__assert_fail@plt+0x1104>
   12110:	movw	r0, #24976	; 0x6190
   12114:	movt	r0, #2
   12118:	str	r7, [r0]
   1211c:	mov	r0, r6
   12120:	mov	r1, #2
   12124:	bl	12310 <__assert_fail@plt+0x12ec>
   12128:	mov	r0, r6
   1212c:	sub	sp, fp, #28
   12130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12134:	mov	r0, r5
   12138:	bl	10fd0 <clearerr_unlocked@plt>
   1213c:	cmp	r4, #0
   12140:	bne	11ff4 <__assert_fail@plt+0xfd0>
   12144:	b	1202c <__assert_fail@plt+0x1008>
   12148:	movw	r0, #22480	; 0x57d0
   1214c:	movt	r0, #1
   12150:	movw	r1, #22490	; 0x57da
   12154:	movt	r1, #1
   12158:	movw	r3, #22510	; 0x57ee
   1215c:	movt	r3, #1
   12160:	mov	r2, #340	; 0x154
   12164:	bl	11024 <__assert_fail@plt>
   12168:	push	{fp, lr}
   1216c:	mov	fp, sp
   12170:	movw	r0, #24968	; 0x6188
   12174:	movt	r0, #2
   12178:	ldrb	r0, [r0]
   1217c:	cmp	r0, #1
   12180:	popne	{fp, pc}
   12184:	movw	r0, #24904	; 0x6148
   12188:	movt	r0, #2
   1218c:	ldr	r0, [r0]
   12190:	bl	1234c <__assert_fail@plt+0x1328>
   12194:	cmp	r0, #0
   12198:	bne	121a0 <__assert_fail@plt+0x117c>
   1219c:	pop	{fp, pc}
   121a0:	bl	10f4c <__errno_location@plt>
   121a4:	ldr	r1, [r0]
   121a8:	movw	r2, #23238	; 0x5ac6
   121ac:	movt	r2, #1
   121b0:	mov	r0, #1
   121b4:	bl	10ee0 <error@plt>
   121b8:	push	{r4, sl, fp, lr}
   121bc:	add	fp, sp, #8
   121c0:	movw	r1, #22534	; 0x5806
   121c4:	movt	r1, #1
   121c8:	mov	r0, #0
   121cc:	mov	r2, #5
   121d0:	bl	10e68 <dcgettext@plt>
   121d4:	movw	r4, #24908	; 0x614c
   121d8:	movt	r4, #2
   121dc:	ldr	r1, [r4]
   121e0:	bl	10de4 <fputs_unlocked@plt>
   121e4:	movw	r1, #22597	; 0x5845
   121e8:	movt	r1, #1
   121ec:	mov	r0, #0
   121f0:	mov	r2, #5
   121f4:	bl	10e68 <dcgettext@plt>
   121f8:	ldr	r1, [r4]
   121fc:	pop	{r4, sl, fp, lr}
   12200:	b	10de4 <fputs_unlocked@plt>
   12204:	movw	r1, #24980	; 0x6194
   12208:	movt	r1, #2
   1220c:	str	r0, [r1]
   12210:	bx	lr
   12214:	movw	r1, #24984	; 0x6198
   12218:	movt	r1, #2
   1221c:	strb	r0, [r1]
   12220:	bx	lr
   12224:	push	{r4, r5, r6, sl, fp, lr}
   12228:	add	fp, sp, #16
   1222c:	sub	sp, sp, #8
   12230:	movw	r0, #24908	; 0x614c
   12234:	movt	r0, #2
   12238:	ldr	r0, [r0]
   1223c:	bl	14e20 <__assert_fail@plt+0x3dfc>
   12240:	cmp	r0, #0
   12244:	beq	1226c <__assert_fail@plt+0x1248>
   12248:	movw	r0, #24984	; 0x6198
   1224c:	movt	r0, #2
   12250:	ldrb	r0, [r0]
   12254:	cmp	r0, #0
   12258:	beq	1228c <__assert_fail@plt+0x1268>
   1225c:	bl	10f4c <__errno_location@plt>
   12260:	ldr	r0, [r0]
   12264:	cmp	r0, #32
   12268:	bne	1228c <__assert_fail@plt+0x1268>
   1226c:	movw	r0, #24896	; 0x6140
   12270:	movt	r0, #2
   12274:	ldr	r0, [r0]
   12278:	bl	14e20 <__assert_fail@plt+0x3dfc>
   1227c:	cmp	r0, #0
   12280:	subeq	sp, fp, #16
   12284:	popeq	{r4, r5, r6, sl, fp, pc}
   12288:	b	122fc <__assert_fail@plt+0x12d8>
   1228c:	movw	r1, #22105	; 0x5659
   12290:	movt	r1, #1
   12294:	mov	r0, #0
   12298:	mov	r2, #5
   1229c:	bl	10e68 <dcgettext@plt>
   122a0:	mov	r4, r0
   122a4:	movw	r0, #24980	; 0x6194
   122a8:	movt	r0, #2
   122ac:	ldr	r6, [r0]
   122b0:	bl	10f4c <__errno_location@plt>
   122b4:	ldr	r5, [r0]
   122b8:	cmp	r6, #0
   122bc:	bne	122d8 <__assert_fail@plt+0x12b4>
   122c0:	movw	r2, #22477	; 0x57cd
   122c4:	movt	r2, #1
   122c8:	mov	r0, #0
   122cc:	mov	r1, r5
   122d0:	mov	r3, r4
   122d4:	b	122f8 <__assert_fail@plt+0x12d4>
   122d8:	mov	r0, r6
   122dc:	bl	13c08 <__assert_fail@plt+0x2be4>
   122e0:	mov	r3, r0
   122e4:	str	r4, [sp]
   122e8:	movw	r2, #23165	; 0x5a7d
   122ec:	movt	r2, #1
   122f0:	mov	r0, #0
   122f4:	mov	r1, r5
   122f8:	bl	10ee0 <error@plt>
   122fc:	movw	r0, #24812	; 0x60ec
   12300:	movt	r0, #2
   12304:	ldr	r0, [r0]
   12308:	bl	10e2c <_exit@plt>
   1230c:	b	10e08 <posix_fadvise64@plt>
   12310:	cmp	r0, #0
   12314:	bxeq	lr
   12318:	push	{r4, sl, fp, lr}
   1231c:	add	fp, sp, #8
   12320:	sub	sp, sp, #16
   12324:	mov	r4, r1
   12328:	bl	10f7c <fileno@plt>
   1232c:	mov	r1, #0
   12330:	str	r1, [sp]
   12334:	stmib	sp, {r1, r4}
   12338:	mov	r2, #0
   1233c:	mov	r3, #0
   12340:	bl	1230c <__assert_fail@plt+0x12e8>
   12344:	sub	sp, fp, #8
   12348:	pop	{r4, sl, fp, pc}
   1234c:	push	{r4, r5, fp, lr}
   12350:	add	fp, sp, #8
   12354:	sub	sp, sp, #8
   12358:	mov	r4, r0
   1235c:	bl	10f7c <fileno@plt>
   12360:	cmn	r0, #1
   12364:	ble	123dc <__assert_fail@plt+0x13b8>
   12368:	mov	r0, r4
   1236c:	bl	10f04 <__freading@plt>
   12370:	cmp	r0, #0
   12374:	beq	123a0 <__assert_fail@plt+0x137c>
   12378:	mov	r0, r4
   1237c:	bl	10f7c <fileno@plt>
   12380:	mov	r1, #1
   12384:	str	r1, [sp]
   12388:	mov	r2, #0
   1238c:	mov	r3, #0
   12390:	bl	10ea4 <lseek64@plt>
   12394:	and	r0, r0, r1
   12398:	cmn	r0, #1
   1239c:	beq	123dc <__assert_fail@plt+0x13b8>
   123a0:	mov	r0, r4
   123a4:	bl	123ec <__assert_fail@plt+0x13c8>
   123a8:	cmp	r0, #0
   123ac:	beq	123dc <__assert_fail@plt+0x13b8>
   123b0:	bl	10f4c <__errno_location@plt>
   123b4:	ldr	r5, [r0]
   123b8:	mov	r0, r4
   123bc:	bl	10f94 <fclose@plt>
   123c0:	cmp	r5, #0
   123c4:	beq	123d4 <__assert_fail@plt+0x13b0>
   123c8:	bl	10f4c <__errno_location@plt>
   123cc:	str	r5, [r0]
   123d0:	mvn	r0, #0
   123d4:	sub	sp, fp, #8
   123d8:	pop	{r4, r5, fp, pc}
   123dc:	mov	r0, r4
   123e0:	sub	sp, fp, #8
   123e4:	pop	{r4, r5, fp, lr}
   123e8:	b	10f94 <fclose@plt>
   123ec:	push	{r4, sl, fp, lr}
   123f0:	add	fp, sp, #8
   123f4:	mov	r4, r0
   123f8:	cmp	r0, #0
   123fc:	beq	12414 <__assert_fail@plt+0x13f0>
   12400:	mov	r0, r4
   12404:	bl	10f04 <__freading@plt>
   12408:	cmp	r0, #0
   1240c:	movne	r0, r4
   12410:	blne	12420 <__assert_fail@plt+0x13fc>
   12414:	mov	r0, r4
   12418:	pop	{r4, sl, fp, lr}
   1241c:	b	10e14 <fflush@plt>
   12420:	ldrb	r1, [r0, #1]
   12424:	tst	r1, #1
   12428:	bxeq	lr
   1242c:	push	{fp, lr}
   12430:	mov	fp, sp
   12434:	sub	sp, sp, #8
   12438:	mov	r1, #1
   1243c:	str	r1, [sp]
   12440:	mov	r2, #0
   12444:	mov	r3, #0
   12448:	bl	1247c <__assert_fail@plt+0x1458>
   1244c:	mov	sp, fp
   12450:	pop	{fp, pc}
   12454:	push	{r4, r5, r6, sl, fp, lr}
   12458:	add	fp, sp, #16
   1245c:	mov	r4, r0
   12460:	bl	10f4c <__errno_location@plt>
   12464:	mov	r5, r0
   12468:	ldr	r6, [r0]
   1246c:	mov	r0, r4
   12470:	bl	10e20 <free@plt>
   12474:	str	r6, [r5]
   12478:	pop	{r4, r5, r6, sl, fp, pc}
   1247c:	push	{r4, r5, r6, r7, fp, lr}
   12480:	add	fp, sp, #16
   12484:	sub	sp, sp, #8
   12488:	mov	r5, r3
   1248c:	mov	r6, r2
   12490:	mov	r4, r0
   12494:	ldr	r0, [r0, #4]
   12498:	ldr	r1, [r4, #8]
   1249c:	cmp	r1, r0
   124a0:	bne	124bc <__assert_fail@plt+0x1498>
   124a4:	ldrd	r0, [r4, #16]
   124a8:	cmp	r1, r0
   124ac:	bne	124bc <__assert_fail@plt+0x1498>
   124b0:	ldr	r0, [r4, #36]	; 0x24
   124b4:	cmp	r0, #0
   124b8:	beq	124d4 <__assert_fail@plt+0x14b0>
   124bc:	mov	r0, r4
   124c0:	mov	r2, r6
   124c4:	mov	r3, r5
   124c8:	sub	sp, fp, #16
   124cc:	pop	{r4, r5, r6, r7, fp, lr}
   124d0:	b	10fa0 <fseeko64@plt>
   124d4:	ldr	r7, [fp, #8]
   124d8:	mov	r0, r4
   124dc:	bl	10f7c <fileno@plt>
   124e0:	str	r7, [sp]
   124e4:	mov	r2, r6
   124e8:	mov	r3, r5
   124ec:	bl	10ea4 <lseek64@plt>
   124f0:	and	r2, r0, r1
   124f4:	cmn	r2, #1
   124f8:	mvneq	r0, #0
   124fc:	subeq	sp, fp, #16
   12500:	popeq	{r4, r5, r6, r7, fp, pc}
   12504:	strd	r0, [r4, #80]	; 0x50
   12508:	ldr	r0, [r4]
   1250c:	bic	r0, r0, #16
   12510:	str	r0, [r4]
   12514:	mov	r0, #0
   12518:	sub	sp, fp, #16
   1251c:	pop	{r4, r5, r6, r7, fp, pc}
   12520:	push	{r4, r5, fp, lr}
   12524:	add	fp, sp, #8
   12528:	cmp	r0, #0
   1252c:	beq	125c0 <__assert_fail@plt+0x159c>
   12530:	mov	r4, r0
   12534:	mov	r1, #47	; 0x2f
   12538:	bl	10fb8 <strrchr@plt>
   1253c:	cmp	r0, #0
   12540:	mov	r5, r4
   12544:	addne	r5, r0, #1
   12548:	sub	r0, r5, r4
   1254c:	cmp	r0, #7
   12550:	blt	125a4 <__assert_fail@plt+0x1580>
   12554:	sub	r0, r5, #7
   12558:	movw	r1, #23228	; 0x5abc
   1255c:	movt	r1, #1
   12560:	mov	r2, #7
   12564:	bl	10ff4 <strncmp@plt>
   12568:	cmp	r0, #0
   1256c:	bne	125a4 <__assert_fail@plt+0x1580>
   12570:	movw	r1, #23236	; 0x5ac4
   12574:	movt	r1, #1
   12578:	mov	r0, r5
   1257c:	mov	r2, #3
   12580:	bl	10ff4 <strncmp@plt>
   12584:	cmp	r0, #0
   12588:	beq	12594 <__assert_fail@plt+0x1570>
   1258c:	mov	r4, r5
   12590:	b	125a4 <__assert_fail@plt+0x1580>
   12594:	add	r4, r5, #3
   12598:	movw	r0, #24880	; 0x6130
   1259c:	movt	r0, #2
   125a0:	str	r4, [r0]
   125a4:	movw	r0, #24884	; 0x6134
   125a8:	movt	r0, #2
   125ac:	str	r4, [r0]
   125b0:	movw	r0, #24988	; 0x619c
   125b4:	movt	r0, #2
   125b8:	str	r4, [r0]
   125bc:	pop	{r4, r5, fp, pc}
   125c0:	movw	r0, #24896	; 0x6140
   125c4:	movt	r0, #2
   125c8:	ldr	r3, [r0]
   125cc:	movw	r0, #23172	; 0x5a84
   125d0:	movt	r0, #1
   125d4:	mov	r1, #55	; 0x37
   125d8:	mov	r2, #1
   125dc:	bl	10e98 <fwrite@plt>
   125e0:	bl	11000 <abort@plt>
   125e4:	push	{r4, r5, r6, sl, fp, lr}
   125e8:	add	fp, sp, #16
   125ec:	mov	r4, r0
   125f0:	movw	r0, #24992	; 0x61a0
   125f4:	movt	r0, #2
   125f8:	cmp	r4, #0
   125fc:	moveq	r4, r0
   12600:	bl	10f4c <__errno_location@plt>
   12604:	mov	r5, r0
   12608:	ldr	r6, [r0]
   1260c:	mov	r0, r4
   12610:	mov	r1, #48	; 0x30
   12614:	bl	14924 <__assert_fail@plt+0x3900>
   12618:	str	r6, [r5]
   1261c:	pop	{r4, r5, r6, sl, fp, pc}
   12620:	movw	r1, #24992	; 0x61a0
   12624:	movt	r1, #2
   12628:	cmp	r0, #0
   1262c:	movne	r1, r0
   12630:	ldr	r0, [r1]
   12634:	bx	lr
   12638:	movw	r2, #24992	; 0x61a0
   1263c:	movt	r2, #2
   12640:	cmp	r0, #0
   12644:	movne	r2, r0
   12648:	str	r1, [r2]
   1264c:	bx	lr
   12650:	movw	r3, #24992	; 0x61a0
   12654:	movt	r3, #2
   12658:	cmp	r0, #0
   1265c:	movne	r3, r0
   12660:	ubfx	r0, r1, #5, #3
   12664:	add	r0, r3, r0, lsl #2
   12668:	ldr	r3, [r0, #8]
   1266c:	and	r1, r1, #31
   12670:	eor	r2, r2, r3, lsr r1
   12674:	and	r2, r2, #1
   12678:	eor	r2, r3, r2, lsl r1
   1267c:	str	r2, [r0, #8]
   12680:	mov	r0, #1
   12684:	and	r0, r0, r3, lsr r1
   12688:	bx	lr
   1268c:	movw	r2, #24992	; 0x61a0
   12690:	movt	r2, #2
   12694:	cmp	r0, #0
   12698:	movne	r2, r0
   1269c:	ldr	r0, [r2, #4]
   126a0:	str	r1, [r2, #4]
   126a4:	bx	lr
   126a8:	movw	r3, #24992	; 0x61a0
   126ac:	movt	r3, #2
   126b0:	cmp	r0, #0
   126b4:	movne	r3, r0
   126b8:	mov	r0, #10
   126bc:	str	r0, [r3]
   126c0:	cmp	r1, #0
   126c4:	cmpne	r2, #0
   126c8:	bne	126d8 <__assert_fail@plt+0x16b4>
   126cc:	push	{fp, lr}
   126d0:	mov	fp, sp
   126d4:	bl	11000 <abort@plt>
   126d8:	str	r1, [r3, #40]	; 0x28
   126dc:	str	r2, [r3, #44]	; 0x2c
   126e0:	bx	lr
   126e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126e8:	add	fp, sp, #28
   126ec:	sub	sp, sp, #20
   126f0:	mov	r8, r3
   126f4:	mov	r9, r2
   126f8:	mov	sl, r1
   126fc:	mov	r7, r0
   12700:	ldr	r0, [fp, #8]
   12704:	movw	r5, #24992	; 0x61a0
   12708:	movt	r5, #2
   1270c:	cmp	r0, #0
   12710:	movne	r5, r0
   12714:	bl	10f4c <__errno_location@plt>
   12718:	mov	r4, r0
   1271c:	ldm	r5, {r0, r1}
   12720:	ldr	r2, [r5, #40]	; 0x28
   12724:	ldr	r3, [r5, #44]	; 0x2c
   12728:	ldr	r6, [r4]
   1272c:	add	r5, r5, #8
   12730:	stm	sp, {r0, r1, r5}
   12734:	str	r2, [sp, #12]
   12738:	str	r3, [sp, #16]
   1273c:	mov	r0, r7
   12740:	mov	r1, sl
   12744:	mov	r2, r9
   12748:	mov	r3, r8
   1274c:	bl	1275c <__assert_fail@plt+0x1738>
   12750:	str	r6, [r4]
   12754:	sub	sp, fp, #28
   12758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1275c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12760:	add	fp, sp, #28
   12764:	sub	sp, sp, #156	; 0x9c
   12768:	mov	r9, r3
   1276c:	str	r2, [fp, #-84]	; 0xffffffac
   12770:	mov	r6, r1
   12774:	mov	r7, r0
   12778:	ldr	r0, [fp, #12]
   1277c:	and	r1, r0, #4
   12780:	str	r1, [sp, #32]
   12784:	and	r1, r0, #1
   12788:	str	r1, [sp, #36]	; 0x24
   1278c:	ubfx	sl, r0, #1, #1
   12790:	bl	10eb0 <__ctype_get_mb_cur_max@plt>
   12794:	str	r0, [sp, #40]	; 0x28
   12798:	ldr	r0, [fp, #24]
   1279c:	str	r0, [sp, #76]	; 0x4c
   127a0:	ldr	r0, [fp, #20]
   127a4:	str	r0, [sp, #68]	; 0x44
   127a8:	ldr	r0, [fp, #8]
   127ac:	str	r0, [fp, #-60]	; 0xffffffc4
   127b0:	mov	r0, #0
   127b4:	str	r0, [sp, #72]	; 0x48
   127b8:	mov	r0, #0
   127bc:	str	r0, [sp, #92]	; 0x5c
   127c0:	mov	r0, #0
   127c4:	str	r0, [fp, #-72]	; 0xffffffb8
   127c8:	mov	r0, #0
   127cc:	mov	r1, #0
   127d0:	str	r1, [fp, #-56]	; 0xffffffc8
   127d4:	mov	r1, #0
   127d8:	str	r1, [sp, #56]	; 0x38
   127dc:	mov	r5, #1
   127e0:	str	r7, [sp, #80]	; 0x50
   127e4:	mov	r4, r6
   127e8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   127ec:	cmp	r6, #10
   127f0:	bhi	13758 <__assert_fail@plt+0x2734>
   127f4:	add	r1, pc, #20
   127f8:	mov	r8, #0
   127fc:	mov	r2, #1
   12800:	mov	r3, #0
   12804:	ldr	ip, [fp, #-84]	; 0xffffffac
   12808:	mov	lr, r9
   1280c:	ldr	pc, [r1, r6, lsl #2]
   12810:	andeq	r2, r1, r8, ror #17
   12814:	andeq	r2, r1, r8, lsl r9
   12818:	ldrdeq	r2, [r1], -r8
   1281c:	ldrdeq	r2, [r1], -r0
   12820:	andeq	r2, r1, ip, lsl #18
   12824:	andeq	r2, r1, ip, ror #18
   12828:	strdeq	r2, [r1], -r8
   1282c:	andeq	r2, r1, r8, asr #19
   12830:	andeq	r2, r1, ip, lsr r8
   12834:	andeq	r2, r1, ip, lsr r8
   12838:	andeq	r2, r1, r4, ror #16
   1283c:	movw	r0, #23318	; 0x5b16
   12840:	movt	r0, #1
   12844:	mov	r1, r6
   12848:	bl	13d64 <__assert_fail@plt+0x2d40>
   1284c:	str	r0, [sp, #68]	; 0x44
   12850:	movw	r0, #23148	; 0x5a6c
   12854:	movt	r0, #1
   12858:	mov	r1, r6
   1285c:	bl	13d64 <__assert_fail@plt+0x2d40>
   12860:	str	r0, [sp, #76]	; 0x4c
   12864:	mov	r8, #0
   12868:	tst	sl, #1
   1286c:	bne	128a4 <__assert_fail@plt+0x1880>
   12870:	ldr	r0, [sp, #68]	; 0x44
   12874:	ldrb	r0, [r0]
   12878:	cmp	r0, #0
   1287c:	beq	128a4 <__assert_fail@plt+0x1880>
   12880:	ldr	r1, [sp, #68]	; 0x44
   12884:	add	r1, r1, #1
   12888:	mov	r8, #0
   1288c:	cmp	r8, r4
   12890:	strbcc	r0, [r7, r8]
   12894:	ldrb	r0, [r1, r8]
   12898:	add	r8, r8, #1
   1289c:	cmp	r0, #0
   128a0:	bne	1288c <__assert_fail@plt+0x1868>
   128a4:	ldr	r6, [sp, #76]	; 0x4c
   128a8:	mov	r0, r6
   128ac:	bl	10f40 <strlen@plt>
   128b0:	str	r0, [fp, #-72]	; 0xffffffb8
   128b4:	str	r6, [sp, #92]	; 0x5c
   128b8:	mov	r2, #1
   128bc:	mov	r3, sl
   128c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   128c4:	mov	lr, r9
   128c8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   128cc:	b	129c8 <__assert_fail@plt+0x19a4>
   128d0:	mov	r0, #1
   128d4:	b	12918 <__assert_fail@plt+0x18f4>
   128d8:	tst	sl, #1
   128dc:	bne	12918 <__assert_fail@plt+0x18f4>
   128e0:	mov	r2, r0
   128e4:	b	12940 <__assert_fail@plt+0x191c>
   128e8:	mov	r6, #0
   128ec:	mov	r8, #0
   128f0:	mov	r2, r0
   128f4:	b	129c4 <__assert_fail@plt+0x19a0>
   128f8:	mov	r0, #1
   128fc:	str	r0, [fp, #-72]	; 0xffffffb8
   12900:	mov	r8, #0
   12904:	mov	r6, #5
   12908:	b	12984 <__assert_fail@plt+0x1960>
   1290c:	mov	r2, #1
   12910:	tst	sl, #1
   12914:	beq	12940 <__assert_fail@plt+0x191c>
   12918:	mov	r1, #1
   1291c:	str	r1, [fp, #-72]	; 0xffffffb8
   12920:	mov	r8, #0
   12924:	mov	r6, #2
   12928:	movw	r1, #23148	; 0x5a6c
   1292c:	movt	r1, #1
   12930:	str	r1, [sp, #92]	; 0x5c
   12934:	mov	r2, r0
   12938:	mov	r3, #1
   1293c:	b	129c8 <__assert_fail@plt+0x19a4>
   12940:	mov	r8, #1
   12944:	mov	r6, #2
   12948:	cmp	r4, #0
   1294c:	movne	r0, #39	; 0x27
   12950:	strbne	r0, [r7]
   12954:	movw	r0, #23148	; 0x5a6c
   12958:	movt	r0, #1
   1295c:	str	r0, [sp, #92]	; 0x5c
   12960:	mov	r0, #1
   12964:	str	r0, [fp, #-72]	; 0xffffffb8
   12968:	b	129c4 <__assert_fail@plt+0x19a0>
   1296c:	mov	r6, #5
   12970:	tst	sl, #1
   12974:	beq	1299c <__assert_fail@plt+0x1978>
   12978:	mov	r0, #1
   1297c:	str	r0, [fp, #-72]	; 0xffffffb8
   12980:	mov	r8, #0
   12984:	movw	r0, #23316	; 0x5b14
   12988:	movt	r0, #1
   1298c:	str	r0, [sp, #92]	; 0x5c
   12990:	mov	r2, #1
   12994:	mov	r3, #1
   12998:	b	129c8 <__assert_fail@plt+0x19a4>
   1299c:	cmp	r4, #0
   129a0:	movne	r0, #34	; 0x22
   129a4:	strbne	r0, [r7]
   129a8:	mov	r8, #1
   129ac:	movw	r0, #23316	; 0x5b14
   129b0:	movt	r0, #1
   129b4:	str	r0, [sp, #92]	; 0x5c
   129b8:	mov	r0, #1
   129bc:	str	r0, [fp, #-72]	; 0xffffffb8
   129c0:	mov	r2, #1
   129c4:	mov	r3, #0
   129c8:	ldr	r0, [fp, #16]
   129cc:	cmp	r0, #0
   129d0:	movwne	r0, #1
   129d4:	and	r0, r0, r3
   129d8:	str	r0, [fp, #-88]	; 0xffffffa8
   129dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129e0:	cmp	r0, #0
   129e4:	movwne	r0, #1
   129e8:	and	r1, r0, r3
   129ec:	and	r1, r2, r1
   129f0:	str	r1, [sp, #48]	; 0x30
   129f4:	str	r6, [fp, #-60]	; 0xffffffc4
   129f8:	subs	r6, r6, #2
   129fc:	clz	r1, r6
   12a00:	lsr	r1, r1, #5
   12a04:	and	r1, r1, r3
   12a08:	str	r1, [sp, #60]	; 0x3c
   12a0c:	str	r6, [fp, #-80]	; 0xffffffb0
   12a10:	mov	r1, r6
   12a14:	movwne	r1, #1
   12a18:	str	r3, [fp, #-76]	; 0xffffffb4
   12a1c:	eor	r3, r3, #1
   12a20:	str	r3, [sp, #88]	; 0x58
   12a24:	orr	r3, r1, r3
   12a28:	str	r3, [sp, #64]	; 0x40
   12a2c:	and	r1, r1, r2
   12a30:	str	r1, [fp, #-68]	; 0xffffffbc
   12a34:	and	r0, r0, r1
   12a38:	str	r0, [fp, #-64]	; 0xffffffc0
   12a3c:	str	r2, [sp, #84]	; 0x54
   12a40:	eor	r0, r2, #1
   12a44:	str	r0, [sp, #52]	; 0x34
   12a48:	mov	r6, #0
   12a4c:	cmn	lr, #1
   12a50:	beq	12a60 <__assert_fail@plt+0x1a3c>
   12a54:	cmp	r6, lr
   12a58:	bne	12a6c <__assert_fail@plt+0x1a48>
   12a5c:	b	135d8 <__assert_fail@plt+0x25b4>
   12a60:	ldrb	r0, [ip, r6]
   12a64:	cmp	r0, #0
   12a68:	beq	135d8 <__assert_fail@plt+0x25b4>
   12a6c:	str	r5, [fp, #-48]	; 0xffffffd0
   12a70:	mov	sl, #0
   12a74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a78:	cmp	r0, #0
   12a7c:	beq	12ab0 <__assert_fail@plt+0x1a8c>
   12a80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a84:	add	r5, r6, r0
   12a88:	cmp	r0, #2
   12a8c:	bcc	12aa8 <__assert_fail@plt+0x1a84>
   12a90:	cmn	lr, #1
   12a94:	bne	12aa8 <__assert_fail@plt+0x1a84>
   12a98:	mov	r0, ip
   12a9c:	bl	10f40 <strlen@plt>
   12aa0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12aa4:	mov	lr, r0
   12aa8:	cmp	r5, lr
   12aac:	bls	12abc <__assert_fail@plt+0x1a98>
   12ab0:	mov	r0, #0
   12ab4:	str	r0, [fp, #-52]	; 0xffffffcc
   12ab8:	b	12b08 <__assert_fail@plt+0x1ae4>
   12abc:	mov	r5, r4
   12ac0:	mov	r4, lr
   12ac4:	add	r0, ip, r6
   12ac8:	ldr	r1, [sp, #92]	; 0x5c
   12acc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ad0:	bl	10e50 <memcmp@plt>
   12ad4:	cmp	r0, #0
   12ad8:	mov	r1, r0
   12adc:	movwne	r1, #1
   12ae0:	ldr	r2, [sp, #88]	; 0x58
   12ae4:	orr	r1, r1, r2
   12ae8:	tst	r1, #1
   12aec:	beq	1369c <__assert_fail@plt+0x2678>
   12af0:	clz	r0, r0
   12af4:	lsr	r0, r0, #5
   12af8:	str	r0, [fp, #-52]	; 0xffffffcc
   12afc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b00:	mov	lr, r4
   12b04:	mov	r4, r5
   12b08:	ldrb	r5, [ip, r6]
   12b0c:	cmp	r5, #126	; 0x7e
   12b10:	bhi	12ecc <__assert_fail@plt+0x1ea8>
   12b14:	mov	r9, #1
   12b18:	mov	r2, #110	; 0x6e
   12b1c:	mov	r0, #97	; 0x61
   12b20:	add	r3, pc, #4
   12b24:	mov	r1, #0
   12b28:	ldr	pc, [r3, r5, lsl #2]
   12b2c:	andeq	r2, r1, r4, asr #27
   12b30:	andeq	r2, r1, ip, asr #29
   12b34:	andeq	r2, r1, ip, asr #29
   12b38:	andeq	r2, r1, ip, asr #29
   12b3c:	andeq	r2, r1, ip, asr #29
   12b40:	andeq	r2, r1, ip, asr #29
   12b44:	andeq	r2, r1, ip, asr #29
   12b48:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12b4c:	andeq	r2, r1, r4, lsr #27
   12b50:	muleq	r1, ip, sp
   12b54:			; <UNDEFINED> instruction: 0x00012db0
   12b58:	andeq	r2, r1, r4, lsr lr
   12b5c:	muleq	r1, r4, sp
   12b60:	andeq	r2, r1, ip, lsr #27
   12b64:	andeq	r2, r1, ip, asr #29
   12b68:	andeq	r2, r1, ip, asr #29
   12b6c:	andeq	r2, r1, ip, asr #29
   12b70:	andeq	r2, r1, ip, asr #29
   12b74:	andeq	r2, r1, ip, asr #29
   12b78:	andeq	r2, r1, ip, asr #29
   12b7c:	andeq	r2, r1, ip, asr #29
   12b80:	andeq	r2, r1, ip, asr #29
   12b84:	andeq	r2, r1, ip, asr #29
   12b88:	andeq	r2, r1, ip, asr #29
   12b8c:	andeq	r2, r1, ip, asr #29
   12b90:	andeq	r2, r1, ip, asr #29
   12b94:	andeq	r2, r1, ip, asr #29
   12b98:	andeq	r2, r1, ip, asr #29
   12b9c:	andeq	r2, r1, ip, asr #29
   12ba0:	andeq	r2, r1, ip, asr #29
   12ba4:	andeq	r2, r1, ip, asr #29
   12ba8:	andeq	r2, r1, ip, asr #29
   12bac:	andeq	r2, r1, r0, asr #30
   12bb0:	andeq	r2, r1, r4, asr #30
   12bb4:	andeq	r2, r1, r4, asr #30
   12bb8:	andeq	r2, r1, ip, lsr sp
   12bbc:	andeq	r2, r1, r4, asr #30
   12bc0:	andeq	r2, r1, r8, lsr #26
   12bc4:	andeq	r2, r1, r4, asr #30
   12bc8:	andeq	r2, r1, ip, lsr lr
   12bcc:	andeq	r2, r1, r4, asr #30
   12bd0:	andeq	r2, r1, r4, asr #30
   12bd4:	andeq	r2, r1, r4, asr #30
   12bd8:	andeq	r2, r1, r8, lsr #26
   12bdc:	andeq	r2, r1, r8, lsr #26
   12be0:	andeq	r2, r1, r8, lsr #26
   12be4:	andeq	r2, r1, r8, lsr #26
   12be8:	andeq	r2, r1, r8, lsr #26
   12bec:	andeq	r2, r1, r8, lsr #26
   12bf0:	andeq	r2, r1, r8, lsr #26
   12bf4:	andeq	r2, r1, r8, lsr #26
   12bf8:	andeq	r2, r1, r8, lsr #26
   12bfc:	andeq	r2, r1, r8, lsr #26
   12c00:	andeq	r2, r1, r8, lsr #26
   12c04:	andeq	r2, r1, r8, lsr #26
   12c08:	andeq	r2, r1, r8, lsr #26
   12c0c:	andeq	r2, r1, r8, lsr #26
   12c10:	andeq	r2, r1, r8, lsr #26
   12c14:	andeq	r2, r1, r8, lsr #26
   12c18:	andeq	r2, r1, r4, asr #30
   12c1c:	andeq	r2, r1, r4, asr #30
   12c20:	andeq	r2, r1, r4, asr #30
   12c24:	andeq	r2, r1, r4, asr #30
   12c28:	andeq	r2, r1, r4, lsl #28
   12c2c:	andeq	r2, r1, ip, asr #29
   12c30:	andeq	r2, r1, r8, lsr #26
   12c34:	andeq	r2, r1, r8, lsr #26
   12c38:	andeq	r2, r1, r8, lsr #26
   12c3c:	andeq	r2, r1, r8, lsr #26
   12c40:	andeq	r2, r1, r8, lsr #26
   12c44:	andeq	r2, r1, r8, lsr #26
   12c48:	andeq	r2, r1, r8, lsr #26
   12c4c:	andeq	r2, r1, r8, lsr #26
   12c50:	andeq	r2, r1, r8, lsr #26
   12c54:	andeq	r2, r1, r8, lsr #26
   12c58:	andeq	r2, r1, r8, lsr #26
   12c5c:	andeq	r2, r1, r8, lsr #26
   12c60:	andeq	r2, r1, r8, lsr #26
   12c64:	andeq	r2, r1, r8, lsr #26
   12c68:	andeq	r2, r1, r8, lsr #26
   12c6c:	andeq	r2, r1, r8, lsr #26
   12c70:	andeq	r2, r1, r8, lsr #26
   12c74:	andeq	r2, r1, r8, lsr #26
   12c78:	andeq	r2, r1, r8, lsr #26
   12c7c:	andeq	r2, r1, r8, lsr #26
   12c80:	andeq	r2, r1, r8, lsr #26
   12c84:	andeq	r2, r1, r8, lsr #26
   12c88:	andeq	r2, r1, r8, lsr #26
   12c8c:	andeq	r2, r1, r8, lsr #26
   12c90:	andeq	r2, r1, r8, lsr #26
   12c94:	andeq	r2, r1, r8, lsr #26
   12c98:	andeq	r2, r1, r4, asr #30
   12c9c:	andeq	r2, r1, r0, ror sp
   12ca0:	andeq	r2, r1, r8, lsr #26
   12ca4:	andeq	r2, r1, r4, asr #30
   12ca8:	andeq	r2, r1, r8, lsr #26
   12cac:	andeq	r2, r1, r4, asr #30
   12cb0:	andeq	r2, r1, r8, lsr #26
   12cb4:	andeq	r2, r1, r8, lsr #26
   12cb8:	andeq	r2, r1, r8, lsr #26
   12cbc:	andeq	r2, r1, r8, lsr #26
   12cc0:	andeq	r2, r1, r8, lsr #26
   12cc4:	andeq	r2, r1, r8, lsr #26
   12cc8:	andeq	r2, r1, r8, lsr #26
   12ccc:	andeq	r2, r1, r8, lsr #26
   12cd0:	andeq	r2, r1, r8, lsr #26
   12cd4:	andeq	r2, r1, r8, lsr #26
   12cd8:	andeq	r2, r1, r8, lsr #26
   12cdc:	andeq	r2, r1, r8, lsr #26
   12ce0:	andeq	r2, r1, r8, lsr #26
   12ce4:	andeq	r2, r1, r8, lsr #26
   12ce8:	andeq	r2, r1, r8, lsr #26
   12cec:	andeq	r2, r1, r8, lsr #26
   12cf0:	andeq	r2, r1, r8, lsr #26
   12cf4:	andeq	r2, r1, r8, lsr #26
   12cf8:	andeq	r2, r1, r8, lsr #26
   12cfc:	andeq	r2, r1, r8, lsr #26
   12d00:	andeq	r2, r1, r8, lsr #26
   12d04:	andeq	r2, r1, r8, lsr #26
   12d08:	andeq	r2, r1, r8, lsr #26
   12d0c:	andeq	r2, r1, r8, lsr #26
   12d10:	andeq	r2, r1, r8, lsr #26
   12d14:	andeq	r2, r1, r8, lsr #26
   12d18:	andeq	r2, r1, r0, asr sp
   12d1c:	andeq	r2, r1, r4, asr #30
   12d20:	andeq	r2, r1, r0, asr sp
   12d24:	andeq	r2, r1, ip, lsr sp
   12d28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d2c:	cmp	r0, #0
   12d30:	beq	12fa4 <__assert_fail@plt+0x1f80>
   12d34:	ldr	r0, [fp, #16]
   12d38:	b	12fa8 <__assert_fail@plt+0x1f84>
   12d3c:	mov	r9, #0
   12d40:	cmp	r6, #0
   12d44:	beq	12f40 <__assert_fail@plt+0x1f1c>
   12d48:	mov	sl, #0
   12d4c:	b	12d28 <__assert_fail@plt+0x1d04>
   12d50:	mov	r9, #0
   12d54:	cmn	lr, #1
   12d58:	beq	12f24 <__assert_fail@plt+0x1f00>
   12d5c:	cmp	r6, #0
   12d60:	bne	12d48 <__assert_fail@plt+0x1d24>
   12d64:	cmp	lr, #1
   12d68:	beq	12f40 <__assert_fail@plt+0x1f1c>
   12d6c:	b	12d48 <__assert_fail@plt+0x1d24>
   12d70:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12d74:	cmp	r0, #2
   12d78:	bne	12f6c <__assert_fail@plt+0x1f48>
   12d7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d80:	tst	r0, #1
   12d84:	bne	136b4 <__assert_fail@plt+0x2690>
   12d88:	mov	sl, #0
   12d8c:	mov	r0, #92	; 0x5c
   12d90:	b	12f80 <__assert_fail@plt+0x1f5c>
   12d94:	mov	r0, #102	; 0x66
   12d98:	b	12f90 <__assert_fail@plt+0x1f6c>
   12d9c:	mov	r2, #116	; 0x74
   12da0:	b	12db0 <__assert_fail@plt+0x1d8c>
   12da4:	mov	r0, #98	; 0x62
   12da8:	b	12f90 <__assert_fail@plt+0x1f6c>
   12dac:	mov	r2, #114	; 0x72
   12db0:	ldr	r0, [sp, #64]	; 0x40
   12db4:	tst	r0, #1
   12db8:	mov	r0, r2
   12dbc:	bne	12f90 <__assert_fail@plt+0x1f6c>
   12dc0:	b	136b4 <__assert_fail@plt+0x2690>
   12dc4:	ldr	r0, [sp, #84]	; 0x54
   12dc8:	tst	r0, #1
   12dcc:	beq	13080 <__assert_fail@plt+0x205c>
   12dd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12dd4:	tst	r0, #1
   12dd8:	bne	136b4 <__assert_fail@plt+0x2690>
   12ddc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12de0:	cmp	r0, #2
   12de4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12de8:	movwne	r0, #1
   12dec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12df0:	orr	r0, r0, r2
   12df4:	tst	r0, #1
   12df8:	beq	13474 <__assert_fail@plt+0x2450>
   12dfc:	mov	r0, r8
   12e00:	b	134a8 <__assert_fail@plt+0x2484>
   12e04:	mov	sl, #0
   12e08:	mov	r5, #63	; 0x3f
   12e0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e10:	cmp	r0, #5
   12e14:	beq	13234 <__assert_fail@plt+0x2210>
   12e18:	cmp	r0, #2
   12e1c:	bne	132d4 <__assert_fail@plt+0x22b0>
   12e20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e24:	tst	r0, #1
   12e28:	mov	r9, #0
   12e2c:	beq	12d28 <__assert_fail@plt+0x1d04>
   12e30:	b	136b4 <__assert_fail@plt+0x2690>
   12e34:	mov	r0, #118	; 0x76
   12e38:	b	12f90 <__assert_fail@plt+0x1f6c>
   12e3c:	mov	r5, #39	; 0x27
   12e40:	mov	r0, #1
   12e44:	str	r0, [sp, #56]	; 0x38
   12e48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e4c:	cmp	r0, #2
   12e50:	bne	130a0 <__assert_fail@plt+0x207c>
   12e54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e58:	tst	r0, #1
   12e5c:	bne	136b4 <__assert_fail@plt+0x2690>
   12e60:	ldr	r2, [sp, #72]	; 0x48
   12e64:	cmp	r2, #0
   12e68:	mov	r0, r2
   12e6c:	movwne	r0, #1
   12e70:	clz	r1, r4
   12e74:	lsr	r1, r1, #5
   12e78:	orrs	r0, r0, r1
   12e7c:	moveq	r2, r4
   12e80:	str	r2, [sp, #72]	; 0x48
   12e84:	moveq	r4, r0
   12e88:	cmp	r8, r4
   12e8c:	movcc	r0, #39	; 0x27
   12e90:	strbcc	r0, [r7, r8]
   12e94:	add	r0, r8, #1
   12e98:	cmp	r0, r4
   12e9c:	movcc	r1, #92	; 0x5c
   12ea0:	strbcc	r1, [r7, r0]
   12ea4:	add	r0, r8, #2
   12ea8:	cmp	r0, r4
   12eac:	movcc	r1, #39	; 0x27
   12eb0:	strbcc	r1, [r7, r0]
   12eb4:	add	r8, r8, #3
   12eb8:	mov	r0, #0
   12ebc:	str	r0, [fp, #-56]	; 0xffffffc8
   12ec0:	mov	sl, #0
   12ec4:	mov	r9, #1
   12ec8:	b	12d28 <__assert_fail@plt+0x1d04>
   12ecc:	str	r4, [sp, #24]
   12ed0:	ldr	r0, [sp, #40]	; 0x28
   12ed4:	cmp	r0, #1
   12ed8:	bne	130a8 <__assert_fail@plt+0x2084>
   12edc:	str	lr, [sp, #28]
   12ee0:	bl	10f28 <__ctype_b_loc@plt>
   12ee4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ee8:	ldr	r0, [r0]
   12eec:	add	r0, r0, r5, lsl #1
   12ef0:	ldrb	r0, [r0, #1]
   12ef4:	ubfx	r9, r0, #6, #1
   12ef8:	mov	r1, #1
   12efc:	ldr	r4, [sp, #24]
   12f00:	ldr	r0, [sp, #52]	; 0x34
   12f04:	orr	r0, r9, r0
   12f08:	mov	r2, r1
   12f0c:	cmp	r1, #1
   12f10:	bhi	132dc <__assert_fail@plt+0x22b8>
   12f14:	tst	r0, #1
   12f18:	beq	132dc <__assert_fail@plt+0x22b8>
   12f1c:	ldr	lr, [sp, #28]
   12f20:	b	12d28 <__assert_fail@plt+0x1d04>
   12f24:	cmp	r6, #0
   12f28:	ldrbeq	r0, [ip, #1]
   12f2c:	cmpeq	r0, #0
   12f30:	beq	12f40 <__assert_fail@plt+0x1f1c>
   12f34:	mvn	lr, #0
   12f38:	mov	sl, #0
   12f3c:	b	12d28 <__assert_fail@plt+0x1d04>
   12f40:	mov	r1, #1
   12f44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12f48:	cmp	r0, #2
   12f4c:	bne	12f64 <__assert_fail@plt+0x1f40>
   12f50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f54:	tst	r0, #1
   12f58:	mov	r9, r1
   12f5c:	beq	12d28 <__assert_fail@plt+0x1d04>
   12f60:	b	136b4 <__assert_fail@plt+0x2690>
   12f64:	mov	r9, r1
   12f68:	b	12d28 <__assert_fail@plt+0x1d04>
   12f6c:	mov	sl, #0
   12f70:	mov	r0, #92	; 0x5c
   12f74:	ldr	r1, [sp, #48]	; 0x30
   12f78:	cmp	r1, #0
   12f7c:	beq	12f90 <__assert_fail@plt+0x1f6c>
   12f80:	mov	r9, #0
   12f84:	cmp	sl, #0
   12f88:	beq	13540 <__assert_fail@plt+0x251c>
   12f8c:	b	1357c <__assert_fail@plt+0x2558>
   12f90:	mov	r9, #0
   12f94:	ldr	r1, [sp, #84]	; 0x54
   12f98:	tst	r1, #1
   12f9c:	mov	sl, #0
   12fa0:	bne	12fe0 <__assert_fail@plt+0x1fbc>
   12fa4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12fa8:	cmp	r0, #0
   12fac:	mov	r0, r5
   12fb0:	beq	12fd4 <__assert_fail@plt+0x1fb0>
   12fb4:	ubfx	r0, r5, #5, #3
   12fb8:	ldr	r1, [fp, #16]
   12fbc:	ldr	r0, [r1, r0, lsl #2]
   12fc0:	and	r1, r5, #31
   12fc4:	mov	r2, #1
   12fc8:	tst	r0, r2, lsl r1
   12fcc:	mov	r0, r5
   12fd0:	bne	12fe0 <__assert_fail@plt+0x1fbc>
   12fd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12fd8:	cmp	r1, #0
   12fdc:	beq	13538 <__assert_fail@plt+0x2514>
   12fe0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fe4:	tst	r1, #1
   12fe8:	bne	136b4 <__assert_fail@plt+0x2690>
   12fec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12ff0:	cmp	r1, #2
   12ff4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12ff8:	movwne	r1, #1
   12ffc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13000:	orr	r1, r1, r2
   13004:	tst	r1, #1
   13008:	beq	13014 <__assert_fail@plt+0x1ff0>
   1300c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13010:	b	13050 <__assert_fail@plt+0x202c>
   13014:	cmp	r8, r4
   13018:	movcc	r1, #39	; 0x27
   1301c:	strbcc	r1, [r7, r8]
   13020:	add	r1, r8, #1
   13024:	cmp	r1, r4
   13028:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1302c:	movcc	r2, #36	; 0x24
   13030:	strbcc	r2, [r7, r1]
   13034:	add	r1, r8, #2
   13038:	cmp	r1, r4
   1303c:	movcc	r2, #39	; 0x27
   13040:	strbcc	r2, [r7, r1]
   13044:	add	r8, r8, #3
   13048:	mov	r1, #1
   1304c:	str	r1, [fp, #-56]	; 0xffffffc8
   13050:	cmp	r8, r4
   13054:	movcc	r1, #92	; 0x5c
   13058:	strbcc	r1, [r7, r8]
   1305c:	add	r8, r8, #1
   13060:	cmp	r8, r4
   13064:	strbcc	r0, [r7, r8]
   13068:	and	r5, r5, r9
   1306c:	add	r8, r8, #1
   13070:	add	r6, r6, #1
   13074:	cmn	lr, #1
   13078:	bne	12a54 <__assert_fail@plt+0x1a30>
   1307c:	b	12a60 <__assert_fail@plt+0x1a3c>
   13080:	mov	r9, #0
   13084:	ldr	r0, [sp, #36]	; 0x24
   13088:	cmp	r0, #0
   1308c:	mov	sl, #0
   13090:	mov	r5, #0
   13094:	beq	12fa4 <__assert_fail@plt+0x1f80>
   13098:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1309c:	b	13070 <__assert_fail@plt+0x204c>
   130a0:	mov	r9, #1
   130a4:	b	12d28 <__assert_fail@plt+0x1d04>
   130a8:	mov	r0, #0
   130ac:	str	r0, [fp, #-36]	; 0xffffffdc
   130b0:	str	r0, [fp, #-40]	; 0xffffffd8
   130b4:	cmn	lr, #1
   130b8:	bne	130cc <__assert_fail@plt+0x20a8>
   130bc:	mov	r0, ip
   130c0:	bl	10f40 <strlen@plt>
   130c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   130c8:	mov	lr, r0
   130cc:	add	r0, ip, r6
   130d0:	str	r0, [sp, #20]
   130d4:	mov	r9, #1
   130d8:	mov	r7, #0
   130dc:	sub	r4, fp, #40	; 0x28
   130e0:	str	lr, [sp, #28]
   130e4:	str	r7, [sp, #44]	; 0x2c
   130e8:	add	r7, r7, r6
   130ec:	add	r1, ip, r7
   130f0:	sub	r2, lr, r7
   130f4:	sub	r0, fp, #44	; 0x2c
   130f8:	mov	r3, r4
   130fc:	bl	14f30 <__assert_fail@plt+0x3f0c>
   13100:	cmp	r0, #0
   13104:	beq	135c4 <__assert_fail@plt+0x25a0>
   13108:	cmn	r0, #1
   1310c:	beq	13584 <__assert_fail@plt+0x2560>
   13110:	cmn	r0, #2
   13114:	ldr	lr, [sp, #28]
   13118:	beq	1358c <__assert_fail@plt+0x2568>
   1311c:	cmp	r0, #2
   13120:	mov	r1, #0
   13124:	movwcc	r1, #1
   13128:	ldr	r2, [sp, #60]	; 0x3c
   1312c:	eor	r2, r2, #1
   13130:	orrs	r1, r2, r1
   13134:	ldr	r4, [sp, #24]
   13138:	bne	131f8 <__assert_fail@plt+0x21d4>
   1313c:	ldr	r1, [sp, #44]	; 0x2c
   13140:	ldr	r2, [sp, #20]
   13144:	add	r1, r2, r1
   13148:	mov	r2, #1
   1314c:	ldrb	r3, [r1, r2]
   13150:	sub	r3, r3, #91	; 0x5b
   13154:	cmp	r3, #33	; 0x21
   13158:	bhi	131ec <__assert_fail@plt+0x21c8>
   1315c:	add	r7, pc, #0
   13160:	ldr	pc, [r7, r3, lsl #2]
   13164:	andeq	r3, r1, ip, lsr #13
   13168:	andeq	r3, r1, ip, lsr #13
   1316c:	andeq	r3, r1, ip, ror #3
   13170:	andeq	r3, r1, ip, lsr #13
   13174:	andeq	r3, r1, ip, ror #3
   13178:	andeq	r3, r1, ip, lsr #13
   1317c:	andeq	r3, r1, ip, ror #3
   13180:	andeq	r3, r1, ip, ror #3
   13184:	andeq	r3, r1, ip, ror #3
   13188:	andeq	r3, r1, ip, ror #3
   1318c:	andeq	r3, r1, ip, ror #3
   13190:	andeq	r3, r1, ip, ror #3
   13194:	andeq	r3, r1, ip, ror #3
   13198:	andeq	r3, r1, ip, ror #3
   1319c:	andeq	r3, r1, ip, ror #3
   131a0:	andeq	r3, r1, ip, ror #3
   131a4:	andeq	r3, r1, ip, ror #3
   131a8:	andeq	r3, r1, ip, ror #3
   131ac:	andeq	r3, r1, ip, ror #3
   131b0:	andeq	r3, r1, ip, ror #3
   131b4:	andeq	r3, r1, ip, ror #3
   131b8:	andeq	r3, r1, ip, ror #3
   131bc:	andeq	r3, r1, ip, ror #3
   131c0:	andeq	r3, r1, ip, ror #3
   131c4:	andeq	r3, r1, ip, ror #3
   131c8:	andeq	r3, r1, ip, ror #3
   131cc:	andeq	r3, r1, ip, ror #3
   131d0:	andeq	r3, r1, ip, ror #3
   131d4:	andeq	r3, r1, ip, ror #3
   131d8:	andeq	r3, r1, ip, ror #3
   131dc:	andeq	r3, r1, ip, ror #3
   131e0:	andeq	r3, r1, ip, ror #3
   131e4:	andeq	r3, r1, ip, ror #3
   131e8:	andeq	r3, r1, ip, lsr #13
   131ec:	add	r2, r2, #1
   131f0:	cmp	r2, r0
   131f4:	bcc	1314c <__assert_fail@plt+0x2128>
   131f8:	ldr	r7, [sp, #44]	; 0x2c
   131fc:	add	r7, r0, r7
   13200:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13204:	bl	10e8c <iswprint@plt>
   13208:	cmp	r0, #0
   1320c:	movwne	r0, #1
   13210:	and	r9, r9, r0
   13214:	sub	r4, fp, #40	; 0x28
   13218:	mov	r0, r4
   1321c:	bl	10e44 <mbsinit@plt>
   13220:	ldr	lr, [sp, #28]
   13224:	cmp	r0, #0
   13228:	ldr	ip, [fp, #-84]	; 0xffffffac
   1322c:	beq	130e4 <__assert_fail@plt+0x20c0>
   13230:	b	135cc <__assert_fail@plt+0x25a8>
   13234:	ldr	r0, [sp, #32]
   13238:	cmp	r0, #0
   1323c:	beq	132d4 <__assert_fail@plt+0x22b0>
   13240:	add	r0, r6, #2
   13244:	cmp	r0, lr
   13248:	bcs	132d4 <__assert_fail@plt+0x22b0>
   1324c:	add	r1, ip, r6
   13250:	ldrb	r1, [r1, #1]
   13254:	cmp	r1, #63	; 0x3f
   13258:	bne	132d4 <__assert_fail@plt+0x22b0>
   1325c:	ldrb	r9, [ip, r0]
   13260:	sub	r2, r9, #33	; 0x21
   13264:	cmp	r2, #29
   13268:	bhi	132d4 <__assert_fail@plt+0x22b0>
   1326c:	mov	r3, #1
   13270:	movw	r1, #20929	; 0x51c1
   13274:	movt	r1, #14336	; 0x3800
   13278:	tst	r1, r3, lsl r2
   1327c:	beq	132d4 <__assert_fail@plt+0x22b0>
   13280:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13284:	tst	r1, #1
   13288:	bne	136b4 <__assert_fail@plt+0x2690>
   1328c:	cmp	r8, r4
   13290:	movcc	r1, #63	; 0x3f
   13294:	strbcc	r1, [r7, r8]
   13298:	add	r2, r8, #1
   1329c:	cmp	r2, r4
   132a0:	movcc	r1, #34	; 0x22
   132a4:	strbcc	r1, [r7, r2]
   132a8:	add	r2, r8, #2
   132ac:	cmp	r2, r4
   132b0:	movcc	r1, #34	; 0x22
   132b4:	strbcc	r1, [r7, r2]
   132b8:	add	r2, r8, #3
   132bc:	cmp	r2, r4
   132c0:	movcc	r1, #63	; 0x3f
   132c4:	strbcc	r1, [r7, r2]
   132c8:	add	r8, r8, #4
   132cc:	mov	r6, r0
   132d0:	mov	r5, r9
   132d4:	mov	r9, #0
   132d8:	b	12d28 <__assert_fail@plt+0x1d04>
   132dc:	add	r1, r2, r6
   132e0:	str	r1, [sp, #44]	; 0x2c
   132e4:	add	r1, r6, #1
   132e8:	mov	r3, #0
   132ec:	ldr	lr, [sp, #28]
   132f0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   132f4:	tst	r0, #1
   132f8:	bne	133ec <__assert_fail@plt+0x23c8>
   132fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13300:	tst	r2, #1
   13304:	bne	136b4 <__assert_fail@plt+0x2690>
   13308:	cmp	r6, #2
   1330c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13310:	movwne	r3, #1
   13314:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13318:	orr	r3, r3, r2
   1331c:	tst	r3, #1
   13320:	bne	1335c <__assert_fail@plt+0x2338>
   13324:	cmp	r8, r4
   13328:	movcc	r2, #39	; 0x27
   1332c:	strbcc	r2, [r7, r8]
   13330:	add	r3, r8, #1
   13334:	cmp	r3, r4
   13338:	movcc	r2, #36	; 0x24
   1333c:	strbcc	r2, [r7, r3]
   13340:	add	r3, r8, #2
   13344:	cmp	r3, r4
   13348:	movcc	r2, #39	; 0x27
   1334c:	strbcc	r2, [r7, r3]
   13350:	add	r8, r8, #3
   13354:	mov	r2, #1
   13358:	str	r2, [fp, #-56]	; 0xffffffc8
   1335c:	cmp	r8, r4
   13360:	movcc	r2, #92	; 0x5c
   13364:	strbcc	r2, [r7, r8]
   13368:	add	r3, r8, #1
   1336c:	cmp	r3, r4
   13370:	bcs	13390 <__assert_fail@plt+0x236c>
   13374:	and	r7, r5, #192	; 0xc0
   13378:	mov	r2, #48	; 0x30
   1337c:	orr	r7, r2, r7, lsr #6
   13380:	ldr	r6, [sp, #80]	; 0x50
   13384:	strb	r7, [r6, r3]
   13388:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1338c:	ldr	r7, [sp, #80]	; 0x50
   13390:	add	r3, r8, #2
   13394:	cmp	r3, r4
   13398:	bcs	133b8 <__assert_fail@plt+0x2394>
   1339c:	lsr	r7, r5, #3
   133a0:	mov	r2, #6
   133a4:	bfi	r7, r2, #3, #29
   133a8:	ldr	r6, [sp, #80]	; 0x50
   133ac:	strb	r7, [r6, r3]
   133b0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   133b4:	ldr	r7, [sp, #80]	; 0x50
   133b8:	mov	r2, #6
   133bc:	bfi	r5, r2, #3, #29
   133c0:	add	r8, r8, #3
   133c4:	mov	r3, #1
   133c8:	b	13410 <__assert_fail@plt+0x23ec>
   133cc:	ldr	r7, [sp, #80]	; 0x50
   133d0:	cmp	r8, r4
   133d4:	strbcc	r5, [r7, r8]
   133d8:	ldrb	r5, [ip, r1]
   133dc:	add	r1, r1, #1
   133e0:	add	r8, r8, #1
   133e4:	tst	r0, #1
   133e8:	beq	132fc <__assert_fail@plt+0x22d8>
   133ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133f0:	tst	r2, #1
   133f4:	beq	13408 <__assert_fail@plt+0x23e4>
   133f8:	cmp	r8, r4
   133fc:	movcc	r2, #92	; 0x5c
   13400:	strbcc	r2, [r7, r8]
   13404:	add	r8, r8, #1
   13408:	mov	r2, #0
   1340c:	str	r2, [fp, #-52]	; 0xffffffcc
   13410:	and	sl, r3, #1
   13414:	ldr	r2, [sp, #44]	; 0x2c
   13418:	cmp	r2, r1
   1341c:	bls	13528 <__assert_fail@plt+0x2504>
   13420:	cmp	sl, #0
   13424:	movwne	sl, #1
   13428:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1342c:	mvn	r7, r2
   13430:	orr	r7, r7, sl
   13434:	tst	r7, #1
   13438:	bne	133cc <__assert_fail@plt+0x23a8>
   1343c:	cmp	r8, r4
   13440:	ldrcc	r7, [sp, #80]	; 0x50
   13444:	movcc	r2, #39	; 0x27
   13448:	strbcc	r2, [r7, r8]
   1344c:	add	r7, r8, #1
   13450:	cmp	r7, r4
   13454:	ldrcc	r6, [sp, #80]	; 0x50
   13458:	movcc	r2, #39	; 0x27
   1345c:	strbcc	r2, [r6, r7]
   13460:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13464:	add	r8, r8, #2
   13468:	mov	r2, #0
   1346c:	str	r2, [fp, #-56]	; 0xffffffc8
   13470:	b	133cc <__assert_fail@plt+0x23a8>
   13474:	cmp	r8, r4
   13478:	movcc	r0, #39	; 0x27
   1347c:	strbcc	r0, [r7, r8]
   13480:	add	r0, r8, #1
   13484:	cmp	r0, r4
   13488:	movcc	r1, #36	; 0x24
   1348c:	strbcc	r1, [r7, r0]
   13490:	add	r0, r8, #2
   13494:	cmp	r0, r4
   13498:	movcc	r1, #39	; 0x27
   1349c:	strbcc	r1, [r7, r0]
   134a0:	add	r0, r8, #3
   134a4:	mov	r2, #1
   134a8:	cmp	r0, r4
   134ac:	movcc	r1, #92	; 0x5c
   134b0:	strbcc	r1, [r7, r0]
   134b4:	str	r2, [fp, #-56]	; 0xffffffc8
   134b8:	add	r8, r0, #1
   134bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   134c0:	cmp	r1, #2
   134c4:	beq	13518 <__assert_fail@plt+0x24f4>
   134c8:	add	r1, r6, #1
   134cc:	mov	r9, #0
   134d0:	mov	sl, #1
   134d4:	mov	r5, #48	; 0x30
   134d8:	cmp	r1, lr
   134dc:	bcs	12d28 <__assert_fail@plt+0x1d04>
   134e0:	ldrb	r1, [ip, r1]
   134e4:	sub	r1, r1, #48	; 0x30
   134e8:	uxtb	r1, r1
   134ec:	cmp	r1, #9
   134f0:	bhi	12d28 <__assert_fail@plt+0x1d04>
   134f4:	cmp	r8, r4
   134f8:	movcc	r1, #48	; 0x30
   134fc:	strbcc	r1, [r7, r8]
   13500:	add	r1, r0, #2
   13504:	cmp	r1, r4
   13508:	movcc	r2, #48	; 0x30
   1350c:	strbcc	r2, [r7, r1]
   13510:	add	r8, r0, #3
   13514:	b	12d28 <__assert_fail@plt+0x1d04>
   13518:	mov	r0, #48	; 0x30
   1351c:	mov	sl, #1
   13520:	mov	r9, #0
   13524:	b	12fd4 <__assert_fail@plt+0x1fb0>
   13528:	sub	r6, r1, #1
   1352c:	cmp	sl, #0
   13530:	movwne	sl, #1
   13534:	mov	r0, r5
   13538:	cmp	sl, #0
   1353c:	bne	1357c <__assert_fail@plt+0x2558>
   13540:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13544:	tst	r1, #1
   13548:	beq	1357c <__assert_fail@plt+0x2558>
   1354c:	cmp	r8, r4
   13550:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13554:	movcc	r1, #39	; 0x27
   13558:	strbcc	r1, [r7, r8]
   1355c:	add	r1, r8, #1
   13560:	cmp	r1, r4
   13564:	movcc	r2, #39	; 0x27
   13568:	strbcc	r2, [r7, r1]
   1356c:	add	r8, r8, #2
   13570:	mov	r1, #0
   13574:	str	r1, [fp, #-56]	; 0xffffffc8
   13578:	b	13060 <__assert_fail@plt+0x203c>
   1357c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13580:	b	13060 <__assert_fail@plt+0x203c>
   13584:	mov	r9, #0
   13588:	b	135c4 <__assert_fail@plt+0x25a0>
   1358c:	mov	r9, #0
   13590:	cmp	r7, lr
   13594:	bcs	135c4 <__assert_fail@plt+0x25a0>
   13598:	ldr	ip, [fp, #-84]	; 0xffffffac
   1359c:	ldr	r7, [sp, #44]	; 0x2c
   135a0:	ldr	r0, [sp, #20]
   135a4:	ldrb	r0, [r0, r7]
   135a8:	cmp	r0, #0
   135ac:	beq	135cc <__assert_fail@plt+0x25a8>
   135b0:	add	r7, r7, #1
   135b4:	add	r0, r6, r7
   135b8:	cmp	r0, lr
   135bc:	bcc	135a0 <__assert_fail@plt+0x257c>
   135c0:	b	135cc <__assert_fail@plt+0x25a8>
   135c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   135c8:	ldr	r7, [sp, #44]	; 0x2c
   135cc:	mov	r1, r7
   135d0:	ldr	r7, [sp, #80]	; 0x50
   135d4:	b	12efc <__assert_fail@plt+0x1ed8>
   135d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   135dc:	eor	r0, r1, #2
   135e0:	orr	r0, r0, r8
   135e4:	clz	r0, r0
   135e8:	lsr	r0, r0, #5
   135ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135f0:	tst	r2, r0
   135f4:	bne	136b4 <__assert_fail@plt+0x2690>
   135f8:	cmp	r1, #2
   135fc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13600:	movwne	r0, #1
   13604:	orr	r0, r2, r0
   13608:	tst	r0, #1
   1360c:	ldreq	r0, [sp, #56]	; 0x38
   13610:	eoreq	r0, r0, #1
   13614:	tsteq	r0, #1
   13618:	bne	1364c <__assert_fail@plt+0x2628>
   1361c:	mov	r9, lr
   13620:	tst	r5, #1
   13624:	bne	1371c <__assert_fail@plt+0x26f8>
   13628:	ldr	r0, [sp, #72]	; 0x48
   1362c:	cmp	r0, #0
   13630:	beq	1364c <__assert_fail@plt+0x2628>
   13634:	mov	r5, #0
   13638:	cmp	r4, #0
   1363c:	ldr	r0, [sp, #84]	; 0x54
   13640:	mov	sl, r2
   13644:	ldr	r6, [sp, #72]	; 0x48
   13648:	beq	127e4 <__assert_fail@plt+0x17c0>
   1364c:	ldr	r1, [sp, #92]	; 0x5c
   13650:	clz	r0, r1
   13654:	lsr	r0, r0, #5
   13658:	orr	r0, r0, r2
   1365c:	tst	r0, #1
   13660:	bne	1368c <__assert_fail@plt+0x2668>
   13664:	ldrb	r0, [r1]
   13668:	cmp	r0, #0
   1366c:	beq	1368c <__assert_fail@plt+0x2668>
   13670:	add	r1, r1, #1
   13674:	cmp	r8, r4
   13678:	strbcc	r0, [r7, r8]
   1367c:	add	r8, r8, #1
   13680:	ldrb	r0, [r1], #1
   13684:	cmp	r0, #0
   13688:	bne	13674 <__assert_fail@plt+0x2650>
   1368c:	cmp	r8, r4
   13690:	movcc	r0, #0
   13694:	strbcc	r0, [r7, r8]
   13698:	b	13710 <__assert_fail@plt+0x26ec>
   1369c:	ldr	ip, [fp, #-84]	; 0xffffffac
   136a0:	mov	lr, r4
   136a4:	mov	r4, r5
   136a8:	b	136b4 <__assert_fail@plt+0x2690>
   136ac:	ldr	r7, [sp, #80]	; 0x50
   136b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   136b4:	mov	r0, #0
   136b8:	ldr	r1, [fp, #12]
   136bc:	bic	r1, r1, #2
   136c0:	ldr	r2, [sp, #84]	; 0x54
   136c4:	tst	r2, #1
   136c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   136cc:	mov	r2, r3
   136d0:	movwne	r2, #4
   136d4:	cmp	r3, #2
   136d8:	movne	r2, r3
   136dc:	str	r2, [sp]
   136e0:	str	r1, [sp, #4]
   136e4:	str	r0, [sp, #8]
   136e8:	ldr	r0, [sp, #68]	; 0x44
   136ec:	str	r0, [sp, #12]
   136f0:	ldr	r0, [sp, #76]	; 0x4c
   136f4:	str	r0, [sp, #16]
   136f8:	mov	r0, r7
   136fc:	mov	r1, r4
   13700:	mov	r2, ip
   13704:	mov	r3, lr
   13708:	bl	1275c <__assert_fail@plt+0x1738>
   1370c:	mov	r8, r0
   13710:	mov	r0, r8
   13714:	sub	sp, fp, #28
   13718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1371c:	mov	r0, #5
   13720:	str	r0, [sp]
   13724:	ldr	r0, [fp, #12]
   13728:	str	r0, [sp, #4]
   1372c:	ldr	r0, [fp, #16]
   13730:	str	r0, [sp, #8]
   13734:	ldr	r0, [sp, #68]	; 0x44
   13738:	str	r0, [sp, #12]
   1373c:	ldr	r0, [sp, #76]	; 0x4c
   13740:	str	r0, [sp, #16]
   13744:	mov	r0, r7
   13748:	ldr	r1, [sp, #72]	; 0x48
   1374c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13750:	mov	r3, r9
   13754:	b	13708 <__assert_fail@plt+0x26e4>
   13758:	bl	11000 <abort@plt>
   1375c:	mov	r3, r2
   13760:	mov	r2, #0
   13764:	b	13768 <__assert_fail@plt+0x2744>
   13768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1376c:	add	fp, sp, #28
   13770:	sub	sp, sp, #36	; 0x24
   13774:	mov	r4, r2
   13778:	str	r2, [sp, #24]
   1377c:	mov	r5, r1
   13780:	mov	r6, r0
   13784:	str	r0, [sp, #20]
   13788:	movw	r8, #24992	; 0x61a0
   1378c:	movt	r8, #2
   13790:	cmp	r3, #0
   13794:	movne	r8, r3
   13798:	bl	10f4c <__errno_location@plt>
   1379c:	str	r0, [sp, #28]
   137a0:	ldm	r8, {r3, r9}
   137a4:	ldr	r1, [r8, #40]	; 0x28
   137a8:	ldr	r2, [r8, #44]	; 0x2c
   137ac:	ldr	r7, [r0]
   137b0:	str	r7, [sp, #32]
   137b4:	add	sl, r8, #8
   137b8:	cmp	r4, #0
   137bc:	orreq	r9, r9, #1
   137c0:	stm	sp, {r3, r9, sl}
   137c4:	str	r1, [sp, #12]
   137c8:	str	r2, [sp, #16]
   137cc:	mov	r0, #0
   137d0:	mov	r1, #0
   137d4:	mov	r2, r6
   137d8:	mov	r3, r5
   137dc:	mov	r7, r5
   137e0:	bl	1275c <__assert_fail@plt+0x1738>
   137e4:	mov	r5, r0
   137e8:	add	r4, r0, #1
   137ec:	mov	r0, r4
   137f0:	bl	1466c <__assert_fail@plt+0x3648>
   137f4:	mov	r6, r0
   137f8:	ldr	r0, [r8]
   137fc:	ldr	r1, [r8, #40]	; 0x28
   13800:	ldr	r2, [r8, #44]	; 0x2c
   13804:	stm	sp, {r0, r9, sl}
   13808:	str	r1, [sp, #12]
   1380c:	str	r2, [sp, #16]
   13810:	mov	r0, r6
   13814:	mov	r1, r4
   13818:	ldr	r2, [sp, #20]
   1381c:	mov	r3, r7
   13820:	bl	1275c <__assert_fail@plt+0x1738>
   13824:	ldr	r0, [sp, #24]
   13828:	ldr	r1, [sp, #32]
   1382c:	ldr	r2, [sp, #28]
   13830:	str	r1, [r2]
   13834:	cmp	r0, #0
   13838:	strne	r5, [r0]
   1383c:	mov	r0, r6
   13840:	sub	sp, fp, #28
   13844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13848:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1384c:	add	fp, sp, #24
   13850:	movw	r8, #24816	; 0x60f0
   13854:	movt	r8, #2
   13858:	ldr	r4, [r8]
   1385c:	movw	r5, #24820	; 0x60f4
   13860:	movt	r5, #2
   13864:	ldr	r0, [r5]
   13868:	cmp	r0, #2
   1386c:	blt	13898 <__assert_fail@plt+0x2874>
   13870:	add	r7, r4, #12
   13874:	mov	r6, #0
   13878:	ldr	r0, [r7, r6, lsl #3]
   1387c:	bl	12454 <__assert_fail@plt+0x1430>
   13880:	add	r0, r6, #1
   13884:	ldr	r1, [r5]
   13888:	add	r2, r6, #2
   1388c:	cmp	r2, r1
   13890:	mov	r6, r0
   13894:	blt	13878 <__assert_fail@plt+0x2854>
   13898:	ldr	r0, [r4, #4]
   1389c:	movw	r7, #25040	; 0x61d0
   138a0:	movt	r7, #2
   138a4:	cmp	r0, r7
   138a8:	beq	138c0 <__assert_fail@plt+0x289c>
   138ac:	bl	12454 <__assert_fail@plt+0x1430>
   138b0:	movw	r0, #24824	; 0x60f8
   138b4:	movt	r0, #2
   138b8:	mov	r6, #256	; 0x100
   138bc:	strd	r6, [r0]
   138c0:	movw	r6, #24824	; 0x60f8
   138c4:	movt	r6, #2
   138c8:	cmp	r4, r6
   138cc:	beq	138dc <__assert_fail@plt+0x28b8>
   138d0:	mov	r0, r4
   138d4:	bl	12454 <__assert_fail@plt+0x1430>
   138d8:	str	r6, [r8]
   138dc:	mov	r0, #1
   138e0:	str	r0, [r5]
   138e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138e8:	movw	r3, #24992	; 0x61a0
   138ec:	movt	r3, #2
   138f0:	mvn	r2, #0
   138f4:	b	138f8 <__assert_fail@plt+0x28d4>
   138f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138fc:	add	fp, sp, #28
   13900:	sub	sp, sp, #44	; 0x2c
   13904:	mov	r7, r3
   13908:	str	r2, [sp, #36]	; 0x24
   1390c:	str	r1, [sp, #32]
   13910:	mov	r5, r0
   13914:	bl	10f4c <__errno_location@plt>
   13918:	cmp	r5, #0
   1391c:	blt	13a88 <__assert_fail@plt+0x2a64>
   13920:	cmn	r5, #-2147483647	; 0x80000001
   13924:	beq	13a88 <__assert_fail@plt+0x2a64>
   13928:	movw	r4, #24816	; 0x60f0
   1392c:	movt	r4, #2
   13930:	ldr	r6, [r4]
   13934:	str	r0, [sp, #28]
   13938:	ldr	r0, [r0]
   1393c:	str	r0, [sp, #24]
   13940:	movw	r8, #24820	; 0x60f4
   13944:	movt	r8, #2
   13948:	ldr	r1, [r8]
   1394c:	cmp	r1, r5
   13950:	ble	1395c <__assert_fail@plt+0x2938>
   13954:	mov	sl, r6
   13958:	b	139c4 <__assert_fail@plt+0x29a0>
   1395c:	str	r1, [fp, #-32]	; 0xffffffe0
   13960:	mov	r0, #8
   13964:	str	r0, [sp]
   13968:	movw	r9, #24824	; 0x60f8
   1396c:	movt	r9, #2
   13970:	subs	r0, r6, r9
   13974:	movne	r0, r6
   13978:	add	r2, r5, #1
   1397c:	sub	r2, r2, r1
   13980:	sub	r1, fp, #32
   13984:	mvn	r3, #-2147483648	; 0x80000000
   13988:	bl	14754 <__assert_fail@plt+0x3730>
   1398c:	mov	sl, r0
   13990:	str	r0, [r4]
   13994:	cmp	r6, r9
   13998:	ldrdeq	r0, [r9]
   1399c:	stmeq	sl, {r0, r1}
   139a0:	ldr	r1, [r8]
   139a4:	add	r0, sl, r1, lsl #3
   139a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   139ac:	sub	r1, r2, r1
   139b0:	lsl	r2, r1, #3
   139b4:	mov	r1, #0
   139b8:	bl	10f64 <memset@plt>
   139bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   139c0:	str	r0, [r8]
   139c4:	mov	r9, sl
   139c8:	ldr	r6, [r9, r5, lsl #3]!
   139cc:	ldr	r4, [r9, #4]!
   139d0:	ldm	r7, {r0, r1}
   139d4:	ldr	r2, [r7, #40]	; 0x28
   139d8:	ldr	r3, [r7, #44]	; 0x2c
   139dc:	orr	r8, r1, #1
   139e0:	add	r1, r7, #8
   139e4:	stm	sp, {r0, r8}
   139e8:	str	r1, [sp, #20]
   139ec:	add	r0, sp, #8
   139f0:	stm	r0, {r1, r2, r3}
   139f4:	mov	r0, r4
   139f8:	mov	r1, r6
   139fc:	ldr	r2, [sp, #32]
   13a00:	ldr	r3, [sp, #36]	; 0x24
   13a04:	bl	1275c <__assert_fail@plt+0x1738>
   13a08:	cmp	r6, r0
   13a0c:	bhi	13a70 <__assert_fail@plt+0x2a4c>
   13a10:	add	r6, r0, #1
   13a14:	str	r6, [sl, r5, lsl #3]
   13a18:	movw	r0, #25040	; 0x61d0
   13a1c:	movt	r0, #2
   13a20:	cmp	r4, r0
   13a24:	beq	13a30 <__assert_fail@plt+0x2a0c>
   13a28:	mov	r0, r4
   13a2c:	bl	12454 <__assert_fail@plt+0x1430>
   13a30:	mov	r0, r6
   13a34:	bl	1466c <__assert_fail@plt+0x3648>
   13a38:	mov	r4, r0
   13a3c:	str	r0, [r9]
   13a40:	ldr	r0, [r7]
   13a44:	ldr	r1, [r7, #40]	; 0x28
   13a48:	ldr	r2, [r7, #44]	; 0x2c
   13a4c:	stm	sp, {r0, r8}
   13a50:	ldr	r0, [sp, #20]
   13a54:	add	r3, sp, #8
   13a58:	stm	r3, {r0, r1, r2}
   13a5c:	mov	r0, r4
   13a60:	mov	r1, r6
   13a64:	ldr	r2, [sp, #32]
   13a68:	ldr	r3, [sp, #36]	; 0x24
   13a6c:	bl	1275c <__assert_fail@plt+0x1738>
   13a70:	ldr	r0, [sp, #28]
   13a74:	ldr	r1, [sp, #24]
   13a78:	str	r1, [r0]
   13a7c:	mov	r0, r4
   13a80:	sub	sp, fp, #28
   13a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a88:	bl	11000 <abort@plt>
   13a8c:	movw	r3, #24992	; 0x61a0
   13a90:	movt	r3, #2
   13a94:	b	138f8 <__assert_fail@plt+0x28d4>
   13a98:	mov	r1, r0
   13a9c:	mov	r0, #0
   13aa0:	b	138e8 <__assert_fail@plt+0x28c4>
   13aa4:	mov	r2, r1
   13aa8:	mov	r1, r0
   13aac:	mov	r0, #0
   13ab0:	b	13a8c <__assert_fail@plt+0x2a68>
   13ab4:	push	{r4, r5, r6, sl, fp, lr}
   13ab8:	add	fp, sp, #16
   13abc:	sub	sp, sp, #48	; 0x30
   13ac0:	mov	r4, r2
   13ac4:	mov	r5, r0
   13ac8:	mov	r6, sp
   13acc:	mov	r0, r6
   13ad0:	bl	13af0 <__assert_fail@plt+0x2acc>
   13ad4:	mov	r0, r5
   13ad8:	mov	r1, r4
   13adc:	mvn	r2, #0
   13ae0:	mov	r3, r6
   13ae4:	bl	138f8 <__assert_fail@plt+0x28d4>
   13ae8:	sub	sp, fp, #16
   13aec:	pop	{r4, r5, r6, sl, fp, pc}
   13af0:	vmov.i32	q8, #0	; 0x00000000
   13af4:	mov	r2, #32
   13af8:	mov	r3, r0
   13afc:	vst1.32	{d16-d17}, [r3], r2
   13b00:	vst1.32	{d16-d17}, [r3]
   13b04:	add	r2, r0, #16
   13b08:	vst1.32	{d16-d17}, [r2]
   13b0c:	cmp	r1, #10
   13b10:	strne	r1, [r0]
   13b14:	bxne	lr
   13b18:	push	{fp, lr}
   13b1c:	mov	fp, sp
   13b20:	bl	11000 <abort@plt>
   13b24:	push	{r4, r5, r6, r7, fp, lr}
   13b28:	add	fp, sp, #16
   13b2c:	sub	sp, sp, #48	; 0x30
   13b30:	mov	r4, r3
   13b34:	mov	r5, r2
   13b38:	mov	r6, r0
   13b3c:	mov	r7, sp
   13b40:	mov	r0, r7
   13b44:	bl	13af0 <__assert_fail@plt+0x2acc>
   13b48:	mov	r0, r6
   13b4c:	mov	r1, r5
   13b50:	mov	r2, r4
   13b54:	mov	r3, r7
   13b58:	bl	138f8 <__assert_fail@plt+0x28d4>
   13b5c:	sub	sp, fp, #16
   13b60:	pop	{r4, r5, r6, r7, fp, pc}
   13b64:	mov	r2, r1
   13b68:	mov	r1, r0
   13b6c:	mov	r0, #0
   13b70:	b	13ab4 <__assert_fail@plt+0x2a90>
   13b74:	mov	r3, r2
   13b78:	mov	r2, r1
   13b7c:	mov	r1, r0
   13b80:	mov	r0, #0
   13b84:	b	13b24 <__assert_fail@plt+0x2b00>
   13b88:	push	{r4, r5, r6, sl, fp, lr}
   13b8c:	add	fp, sp, #16
   13b90:	sub	sp, sp, #48	; 0x30
   13b94:	mov	r4, r1
   13b98:	mov	r5, r0
   13b9c:	mov	r0, #32
   13ba0:	movw	r1, #24992	; 0x61a0
   13ba4:	movt	r1, #2
   13ba8:	add	r3, r1, #16
   13bac:	vld1.64	{d16-d17}, [r1], r0
   13bb0:	mov	r6, sp
   13bb4:	vld1.64	{d18-d19}, [r3]
   13bb8:	add	r3, r6, #16
   13bbc:	vld1.64	{d20-d21}, [r1]
   13bc0:	vst1.64	{d18-d19}, [r3]
   13bc4:	mov	r1, r6
   13bc8:	vst1.64	{d16-d17}, [r1], r0
   13bcc:	vst1.64	{d20-d21}, [r1]
   13bd0:	mov	r0, r6
   13bd4:	mov	r1, r2
   13bd8:	mov	r2, #1
   13bdc:	bl	12650 <__assert_fail@plt+0x162c>
   13be0:	mov	r0, #0
   13be4:	mov	r1, r5
   13be8:	mov	r2, r4
   13bec:	mov	r3, r6
   13bf0:	bl	138f8 <__assert_fail@plt+0x28d4>
   13bf4:	sub	sp, fp, #16
   13bf8:	pop	{r4, r5, r6, sl, fp, pc}
   13bfc:	mov	r2, r1
   13c00:	mvn	r1, #0
   13c04:	b	13b88 <__assert_fail@plt+0x2b64>
   13c08:	mov	r1, #58	; 0x3a
   13c0c:	b	13bfc <__assert_fail@plt+0x2bd8>
   13c10:	mov	r2, #58	; 0x3a
   13c14:	b	13b88 <__assert_fail@plt+0x2b64>
   13c18:	push	{r4, r5, r6, sl, fp, lr}
   13c1c:	add	fp, sp, #16
   13c20:	sub	sp, sp, #48	; 0x30
   13c24:	mov	r4, r2
   13c28:	mov	r5, r0
   13c2c:	mov	r6, sp
   13c30:	mov	r0, r6
   13c34:	bl	13af0 <__assert_fail@plt+0x2acc>
   13c38:	mov	r0, r6
   13c3c:	mov	r1, #58	; 0x3a
   13c40:	mov	r2, #1
   13c44:	bl	12650 <__assert_fail@plt+0x162c>
   13c48:	mov	r0, r5
   13c4c:	mov	r1, r4
   13c50:	mvn	r2, #0
   13c54:	mov	r3, r6
   13c58:	bl	138f8 <__assert_fail@plt+0x28d4>
   13c5c:	sub	sp, fp, #16
   13c60:	pop	{r4, r5, r6, sl, fp, pc}
   13c64:	push	{fp, lr}
   13c68:	mov	fp, sp
   13c6c:	sub	sp, sp, #8
   13c70:	mvn	ip, #0
   13c74:	str	ip, [sp]
   13c78:	bl	13c84 <__assert_fail@plt+0x2c60>
   13c7c:	mov	sp, fp
   13c80:	pop	{fp, pc}
   13c84:	push	{r4, r5, r6, r7, fp, lr}
   13c88:	add	fp, sp, #16
   13c8c:	sub	sp, sp, #48	; 0x30
   13c90:	mov	r7, r3
   13c94:	mov	r5, r0
   13c98:	mov	r0, #32
   13c9c:	movw	r3, #24992	; 0x61a0
   13ca0:	movt	r3, #2
   13ca4:	add	r4, r3, #16
   13ca8:	vld1.64	{d16-d17}, [r3], r0
   13cac:	mov	r6, sp
   13cb0:	vld1.64	{d18-d19}, [r4]
   13cb4:	add	r4, r6, #16
   13cb8:	vld1.64	{d20-d21}, [r3]
   13cbc:	vst1.64	{d18-d19}, [r4]
   13cc0:	mov	r3, r6
   13cc4:	vst1.64	{d16-d17}, [r3], r0
   13cc8:	vst1.64	{d20-d21}, [r3]
   13ccc:	mov	r0, r6
   13cd0:	bl	126a8 <__assert_fail@plt+0x1684>
   13cd4:	ldr	r2, [fp, #8]
   13cd8:	mov	r0, r5
   13cdc:	mov	r1, r7
   13ce0:	mov	r3, r6
   13ce4:	bl	138f8 <__assert_fail@plt+0x28d4>
   13ce8:	sub	sp, fp, #16
   13cec:	pop	{r4, r5, r6, r7, fp, pc}
   13cf0:	mov	r3, r2
   13cf4:	mov	r2, r1
   13cf8:	mov	r1, r0
   13cfc:	mov	r0, #0
   13d00:	b	13c64 <__assert_fail@plt+0x2c40>
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	sub	sp, sp, #8
   13d10:	mov	ip, r2
   13d14:	mov	r2, r1
   13d18:	mov	r1, r0
   13d1c:	str	r3, [sp]
   13d20:	mov	r0, #0
   13d24:	mov	r3, ip
   13d28:	bl	13c84 <__assert_fail@plt+0x2c60>
   13d2c:	mov	sp, fp
   13d30:	pop	{fp, pc}
   13d34:	movw	r3, #24832	; 0x6100
   13d38:	movt	r3, #2
   13d3c:	b	138f8 <__assert_fail@plt+0x28d4>
   13d40:	mov	r2, r1
   13d44:	mov	r1, r0
   13d48:	mov	r0, #0
   13d4c:	b	13d34 <__assert_fail@plt+0x2d10>
   13d50:	mvn	r2, #0
   13d54:	b	13d34 <__assert_fail@plt+0x2d10>
   13d58:	mov	r1, r0
   13d5c:	mov	r0, #0
   13d60:	b	13d50 <__assert_fail@plt+0x2d2c>
   13d64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d68:	add	fp, sp, #24
   13d6c:	sub	sp, sp, #16
   13d70:	mov	r4, r1
   13d74:	mov	r5, r0
   13d78:	mov	r7, #0
   13d7c:	mov	r0, #0
   13d80:	mov	r1, r5
   13d84:	mov	r2, #5
   13d88:	bl	10e68 <dcgettext@plt>
   13d8c:	cmp	r0, r5
   13d90:	beq	13d9c <__assert_fail@plt+0x2d78>
   13d94:	sub	sp, fp, #24
   13d98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d9c:	bl	14ef8 <__assert_fail@plt+0x3ed4>
   13da0:	mov	r6, r0
   13da4:	mov	r8, #56	; 0x38
   13da8:	mov	r0, #45	; 0x2d
   13dac:	stm	sp, {r0, r8}
   13db0:	str	r7, [sp, #8]
   13db4:	str	r7, [sp, #12]
   13db8:	mov	r0, r6
   13dbc:	mov	r1, #85	; 0x55
   13dc0:	mov	r2, #84	; 0x54
   13dc4:	mov	r3, #70	; 0x46
   13dc8:	bl	13e60 <__assert_fail@plt+0x2e3c>
   13dcc:	cmp	r0, #0
   13dd0:	beq	13dec <__assert_fail@plt+0x2dc8>
   13dd4:	ldrb	r1, [r5]
   13dd8:	movw	r2, #23320	; 0x5b18
   13ddc:	movt	r2, #1
   13de0:	movw	r0, #23324	; 0x5b1c
   13de4:	movt	r0, #1
   13de8:	b	13e30 <__assert_fail@plt+0x2e0c>
   13dec:	mov	r0, #48	; 0x30
   13df0:	mov	r1, #51	; 0x33
   13df4:	str	r8, [sp]
   13df8:	stmib	sp, {r0, r1}
   13dfc:	str	r0, [sp, #12]
   13e00:	mov	r0, r6
   13e04:	mov	r1, #71	; 0x47
   13e08:	mov	r2, #66	; 0x42
   13e0c:	mov	r3, #49	; 0x31
   13e10:	bl	13e60 <__assert_fail@plt+0x2e3c>
   13e14:	cmp	r0, #0
   13e18:	beq	13e40 <__assert_fail@plt+0x2e1c>
   13e1c:	ldrb	r1, [r5]
   13e20:	movw	r2, #23328	; 0x5b20
   13e24:	movt	r2, #1
   13e28:	movw	r0, #23332	; 0x5b24
   13e2c:	movt	r0, #1
   13e30:	cmp	r1, #96	; 0x60
   13e34:	moveq	r0, r2
   13e38:	sub	sp, fp, #24
   13e3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e40:	movw	r1, #23316	; 0x5b14
   13e44:	movt	r1, #1
   13e48:	movw	r0, #23148	; 0x5a6c
   13e4c:	movt	r0, #1
   13e50:	cmp	r4, #9
   13e54:	moveq	r0, r1
   13e58:	sub	sp, fp, #24
   13e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e60:	push	{r4, r5, r6, r7, fp, lr}
   13e64:	add	fp, sp, #16
   13e68:	sub	sp, sp, #16
   13e6c:	mov	r4, r3
   13e70:	mov	r5, r2
   13e74:	mov	r7, r1
   13e78:	mov	r6, r0
   13e7c:	mov	r0, r1
   13e80:	bl	14db0 <__assert_fail@plt+0x3d8c>
   13e84:	ldrb	r1, [r6]
   13e88:	cmp	r0, #0
   13e8c:	andne	r1, r1, #223	; 0xdf
   13e90:	mov	r0, #0
   13e94:	cmp	r1, r7
   13e98:	bne	13ed8 <__assert_fail@plt+0x2eb4>
   13e9c:	cmp	r7, #0
   13ea0:	moveq	r0, #1
   13ea4:	subeq	sp, fp, #16
   13ea8:	popeq	{r4, r5, r6, r7, fp, pc}
   13eac:	ldr	r0, [fp, #20]
   13eb0:	ldr	r1, [fp, #16]
   13eb4:	ldr	r2, [fp, #12]
   13eb8:	ldr	r3, [fp, #8]
   13ebc:	str	r2, [sp]
   13ec0:	str	r1, [sp, #4]
   13ec4:	str	r0, [sp, #8]
   13ec8:	mov	r0, r6
   13ecc:	mov	r1, r5
   13ed0:	mov	r2, r4
   13ed4:	bl	13ee0 <__assert_fail@plt+0x2ebc>
   13ed8:	sub	sp, fp, #16
   13edc:	pop	{r4, r5, r6, r7, fp, pc}
   13ee0:	push	{r4, r5, r6, r7, fp, lr}
   13ee4:	add	fp, sp, #16
   13ee8:	sub	sp, sp, #8
   13eec:	mov	r4, r3
   13ef0:	mov	r5, r2
   13ef4:	mov	r7, r1
   13ef8:	mov	r6, r0
   13efc:	mov	r0, r1
   13f00:	bl	14db0 <__assert_fail@plt+0x3d8c>
   13f04:	ldrb	r1, [r6, #1]
   13f08:	cmp	r0, #0
   13f0c:	andne	r1, r1, #223	; 0xdf
   13f10:	mov	r0, #0
   13f14:	cmp	r1, r7
   13f18:	bne	13f50 <__assert_fail@plt+0x2f2c>
   13f1c:	cmp	r7, #0
   13f20:	moveq	r0, #1
   13f24:	subeq	sp, fp, #16
   13f28:	popeq	{r4, r5, r6, r7, fp, pc}
   13f2c:	ldr	r0, [fp, #16]
   13f30:	ldr	r1, [fp, #12]
   13f34:	ldr	r3, [fp, #8]
   13f38:	str	r1, [sp]
   13f3c:	str	r0, [sp, #4]
   13f40:	mov	r0, r6
   13f44:	mov	r1, r5
   13f48:	mov	r2, r4
   13f4c:	bl	13f58 <__assert_fail@plt+0x2f34>
   13f50:	sub	sp, fp, #16
   13f54:	pop	{r4, r5, r6, r7, fp, pc}
   13f58:	push	{r4, r5, r6, r7, fp, lr}
   13f5c:	add	fp, sp, #16
   13f60:	sub	sp, sp, #8
   13f64:	mov	r4, r3
   13f68:	mov	r5, r2
   13f6c:	mov	r7, r1
   13f70:	mov	r6, r0
   13f74:	mov	r0, r1
   13f78:	bl	14db0 <__assert_fail@plt+0x3d8c>
   13f7c:	ldrb	r1, [r6, #2]
   13f80:	cmp	r0, #0
   13f84:	andne	r1, r1, #223	; 0xdf
   13f88:	mov	r0, #0
   13f8c:	cmp	r1, r7
   13f90:	bne	13fc0 <__assert_fail@plt+0x2f9c>
   13f94:	cmp	r7, #0
   13f98:	moveq	r0, #1
   13f9c:	subeq	sp, fp, #16
   13fa0:	popeq	{r4, r5, r6, r7, fp, pc}
   13fa4:	ldr	r0, [fp, #12]
   13fa8:	ldr	r3, [fp, #8]
   13fac:	str	r0, [sp]
   13fb0:	mov	r0, r6
   13fb4:	mov	r1, r5
   13fb8:	mov	r2, r4
   13fbc:	bl	13fc8 <__assert_fail@plt+0x2fa4>
   13fc0:	sub	sp, fp, #16
   13fc4:	pop	{r4, r5, r6, r7, fp, pc}
   13fc8:	push	{r4, r5, r6, r7, fp, lr}
   13fcc:	add	fp, sp, #16
   13fd0:	mov	r4, r3
   13fd4:	mov	r5, r2
   13fd8:	mov	r7, r1
   13fdc:	mov	r6, r0
   13fe0:	mov	r0, r1
   13fe4:	bl	14db0 <__assert_fail@plt+0x3d8c>
   13fe8:	ldrb	r1, [r6, #3]
   13fec:	ldr	r3, [fp, #8]
   13ff0:	cmp	r0, #0
   13ff4:	andne	r1, r1, #223	; 0xdf
   13ff8:	mov	r0, #0
   13ffc:	cmp	r1, r7
   14000:	popne	{r4, r5, r6, r7, fp, pc}
   14004:	cmp	r7, #0
   14008:	beq	14020 <__assert_fail@plt+0x2ffc>
   1400c:	mov	r0, r6
   14010:	mov	r1, r5
   14014:	mov	r2, r4
   14018:	pop	{r4, r5, r6, r7, fp, lr}
   1401c:	b	14028 <__assert_fail@plt+0x3004>
   14020:	mov	r0, #1
   14024:	pop	{r4, r5, r6, r7, fp, pc}
   14028:	push	{r4, r5, r6, r7, fp, lr}
   1402c:	add	fp, sp, #16
   14030:	mov	r4, r3
   14034:	mov	r5, r2
   14038:	mov	r7, r1
   1403c:	mov	r6, r0
   14040:	mov	r0, r1
   14044:	bl	14db0 <__assert_fail@plt+0x3d8c>
   14048:	ldrb	r1, [r6, #4]
   1404c:	cmp	r0, #0
   14050:	andne	r1, r1, #223	; 0xdf
   14054:	mov	r0, #0
   14058:	cmp	r1, r7
   1405c:	popne	{r4, r5, r6, r7, fp, pc}
   14060:	cmp	r7, #0
   14064:	beq	1407c <__assert_fail@plt+0x3058>
   14068:	mov	r0, r6
   1406c:	mov	r1, r5
   14070:	mov	r2, r4
   14074:	pop	{r4, r5, r6, r7, fp, lr}
   14078:	b	14084 <__assert_fail@plt+0x3060>
   1407c:	mov	r0, #1
   14080:	pop	{r4, r5, r6, r7, fp, pc}
   14084:	push	{r4, r5, r6, sl, fp, lr}
   14088:	add	fp, sp, #16
   1408c:	mov	r4, r2
   14090:	mov	r6, r1
   14094:	mov	r5, r0
   14098:	mov	r0, r1
   1409c:	bl	14db0 <__assert_fail@plt+0x3d8c>
   140a0:	ldrb	r1, [r5, #5]
   140a4:	cmp	r0, #0
   140a8:	andne	r1, r1, #223	; 0xdf
   140ac:	mov	r0, #0
   140b0:	cmp	r1, r6
   140b4:	popne	{r4, r5, r6, sl, fp, pc}
   140b8:	cmp	r6, #0
   140bc:	beq	140d0 <__assert_fail@plt+0x30ac>
   140c0:	mov	r0, r5
   140c4:	mov	r1, r4
   140c8:	pop	{r4, r5, r6, sl, fp, lr}
   140cc:	b	140d8 <__assert_fail@plt+0x30b4>
   140d0:	mov	r0, #1
   140d4:	pop	{r4, r5, r6, sl, fp, pc}
   140d8:	push	{r4, r5, fp, lr}
   140dc:	add	fp, sp, #8
   140e0:	mov	r5, r1
   140e4:	mov	r4, r0
   140e8:	mov	r0, r1
   140ec:	bl	14db0 <__assert_fail@plt+0x3d8c>
   140f0:	ldrb	r1, [r4, #6]
   140f4:	cmp	r0, #0
   140f8:	andne	r1, r1, #223	; 0xdf
   140fc:	mov	r0, #0
   14100:	cmp	r1, r5
   14104:	popne	{r4, r5, fp, pc}
   14108:	cmp	r5, #0
   1410c:	beq	1411c <__assert_fail@plt+0x30f8>
   14110:	mov	r0, r4
   14114:	pop	{r4, r5, fp, lr}
   14118:	b	14124 <__assert_fail@plt+0x3100>
   1411c:	mov	r0, #1
   14120:	pop	{r4, r5, fp, pc}
   14124:	push	{r4, sl, fp, lr}
   14128:	add	fp, sp, #8
   1412c:	mov	r4, r0
   14130:	mov	r0, #0
   14134:	bl	14db0 <__assert_fail@plt+0x3d8c>
   14138:	ldrb	r1, [r4, #7]
   1413c:	cmp	r0, #0
   14140:	beq	14158 <__assert_fail@plt+0x3134>
   14144:	tst	r1, #223	; 0xdf
   14148:	moveq	r0, #1
   1414c:	popeq	{r4, sl, fp, pc}
   14150:	mov	r0, #0
   14154:	pop	{r4, sl, fp, pc}
   14158:	cmp	r1, #0
   1415c:	moveq	r0, #1
   14160:	popeq	{r4, sl, fp, pc}
   14164:	mov	r0, #0
   14168:	pop	{r4, sl, fp, pc}
   1416c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14170:	add	fp, sp, #24
   14174:	sub	sp, sp, #32
   14178:	mov	r4, r2
   1417c:	mov	r8, r0
   14180:	ldr	r6, [fp, #12]
   14184:	ldr	r7, [fp, #8]
   14188:	cmp	r1, #0
   1418c:	beq	141b4 <__assert_fail@plt+0x3190>
   14190:	mov	r5, r1
   14194:	str	r4, [sp]
   14198:	str	r3, [sp, #4]
   1419c:	movw	r2, #23420	; 0x5b7c
   141a0:	movt	r2, #1
   141a4:	mov	r0, r8
   141a8:	mov	r1, #1
   141ac:	mov	r3, r5
   141b0:	b	141cc <__assert_fail@plt+0x31a8>
   141b4:	str	r3, [sp]
   141b8:	movw	r2, #23432	; 0x5b88
   141bc:	movt	r2, #1
   141c0:	mov	r0, r8
   141c4:	mov	r1, #1
   141c8:	mov	r3, r4
   141cc:	bl	10f88 <__fprintf_chk@plt>
   141d0:	movw	r1, #23439	; 0x5b8f
   141d4:	movt	r1, #1
   141d8:	mov	r0, #0
   141dc:	mov	r2, #5
   141e0:	bl	10e68 <dcgettext@plt>
   141e4:	mov	r3, r0
   141e8:	movw	r0, #2022	; 0x7e6
   141ec:	str	r0, [sp]
   141f0:	movw	r2, #24157	; 0x5e5d
   141f4:	movt	r2, #1
   141f8:	mov	r0, r8
   141fc:	mov	r1, #1
   14200:	bl	10f88 <__fprintf_chk@plt>
   14204:	movw	r4, #22054	; 0x5626
   14208:	movt	r4, #1
   1420c:	mov	r0, r4
   14210:	mov	r1, r8
   14214:	bl	10de4 <fputs_unlocked@plt>
   14218:	movw	r1, #23443	; 0x5b93
   1421c:	movt	r1, #1
   14220:	mov	r0, #0
   14224:	mov	r2, #5
   14228:	bl	10e68 <dcgettext@plt>
   1422c:	mov	r2, r0
   14230:	movw	r3, #23614	; 0x5c3e
   14234:	movt	r3, #1
   14238:	mov	r0, r8
   1423c:	mov	r1, #1
   14240:	bl	10f88 <__fprintf_chk@plt>
   14244:	mov	r0, r4
   14248:	mov	r1, r8
   1424c:	bl	10de4 <fputs_unlocked@plt>
   14250:	cmp	r6, #9
   14254:	bhi	14290 <__assert_fail@plt+0x326c>
   14258:	add	r0, pc, #0
   1425c:	ldr	pc, [r0, r6, lsl #2]
   14260:	andeq	r4, r1, r8, lsl #5
   14264:	muleq	r1, ip, r2
   14268:	andeq	r4, r1, ip, asr #5
   1426c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14270:	andeq	r4, r1, ip, lsl r3
   14274:	andeq	r4, r1, r4, asr #6
   14278:	andeq	r4, r1, ip, ror #6
   1427c:	andeq	r4, r1, r4, lsr #7
   14280:	andeq	r4, r1, r4, asr #8
   14284:	andeq	r4, r1, ip, ror #7
   14288:	sub	sp, fp, #24
   1428c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14290:	movw	r1, #23967	; 0x5d9f
   14294:	movt	r1, #1
   14298:	b	143f4 <__assert_fail@plt+0x33d0>
   1429c:	movw	r1, #23648	; 0x5c60
   142a0:	movt	r1, #1
   142a4:	mov	r0, #0
   142a8:	mov	r2, #5
   142ac:	bl	10e68 <dcgettext@plt>
   142b0:	mov	r2, r0
   142b4:	ldr	r3, [r7]
   142b8:	mov	r0, r8
   142bc:	mov	r1, #1
   142c0:	sub	sp, fp, #24
   142c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   142c8:	b	10f88 <__fprintf_chk@plt>
   142cc:	movw	r1, #23664	; 0x5c70
   142d0:	movt	r1, #1
   142d4:	mov	r0, #0
   142d8:	mov	r2, #5
   142dc:	bl	10e68 <dcgettext@plt>
   142e0:	mov	r2, r0
   142e4:	ldr	r3, [r7]
   142e8:	ldr	r0, [r7, #4]
   142ec:	str	r0, [sp]
   142f0:	b	143e0 <__assert_fail@plt+0x33bc>
   142f4:	movw	r1, #23687	; 0x5c87
   142f8:	movt	r1, #1
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	bl	10e68 <dcgettext@plt>
   14308:	mov	r2, r0
   1430c:	ldr	r3, [r7]
   14310:	ldmib	r7, {r0, r1}
   14314:	stm	sp, {r0, r1}
   14318:	b	143e0 <__assert_fail@plt+0x33bc>
   1431c:	movw	r1, #23715	; 0x5ca3
   14320:	movt	r1, #1
   14324:	mov	r0, #0
   14328:	mov	r2, #5
   1432c:	bl	10e68 <dcgettext@plt>
   14330:	mov	r2, r0
   14334:	ldr	r3, [r7]
   14338:	ldmib	r7, {r0, r1, r7}
   1433c:	stm	sp, {r0, r1, r7}
   14340:	b	143e0 <__assert_fail@plt+0x33bc>
   14344:	movw	r1, #23747	; 0x5cc3
   14348:	movt	r1, #1
   1434c:	mov	r0, #0
   14350:	mov	r2, #5
   14354:	bl	10e68 <dcgettext@plt>
   14358:	mov	r2, r0
   1435c:	ldr	r3, [r7]
   14360:	ldmib	r7, {r0, r1, r6, r7}
   14364:	stm	sp, {r0, r1, r6, r7}
   14368:	b	143e0 <__assert_fail@plt+0x33bc>
   1436c:	movw	r1, #23783	; 0x5ce7
   14370:	movt	r1, #1
   14374:	mov	r0, #0
   14378:	mov	r2, #5
   1437c:	bl	10e68 <dcgettext@plt>
   14380:	mov	r2, r0
   14384:	ldr	r3, [r7]
   14388:	ldmib	r7, {r0, r1, r6}
   1438c:	ldr	r5, [r7, #16]
   14390:	ldr	r7, [r7, #20]
   14394:	stm	sp, {r0, r1, r6}
   14398:	str	r5, [sp, #12]
   1439c:	str	r7, [sp, #16]
   143a0:	b	143e0 <__assert_fail@plt+0x33bc>
   143a4:	movw	r1, #23823	; 0x5d0f
   143a8:	movt	r1, #1
   143ac:	mov	r0, #0
   143b0:	mov	r2, #5
   143b4:	bl	10e68 <dcgettext@plt>
   143b8:	mov	r2, r0
   143bc:	ldr	r3, [r7]
   143c0:	ldmib	r7, {r0, r1, r6}
   143c4:	ldr	r5, [r7, #16]
   143c8:	ldr	r4, [r7, #20]
   143cc:	ldr	r7, [r7, #24]
   143d0:	stm	sp, {r0, r1, r6}
   143d4:	str	r5, [sp, #12]
   143d8:	str	r4, [sp, #16]
   143dc:	str	r7, [sp, #20]
   143e0:	mov	r0, r8
   143e4:	mov	r1, #1
   143e8:	b	14494 <__assert_fail@plt+0x3470>
   143ec:	movw	r1, #23915	; 0x5d6b
   143f0:	movt	r1, #1
   143f4:	mov	r0, #0
   143f8:	mov	r2, #5
   143fc:	bl	10e68 <dcgettext@plt>
   14400:	mov	ip, r0
   14404:	ldr	r3, [r7]
   14408:	ldr	r0, [r7, #4]
   1440c:	ldr	r1, [r7, #8]
   14410:	ldr	r6, [r7, #12]
   14414:	ldr	r5, [r7, #16]
   14418:	ldr	r4, [r7, #20]
   1441c:	ldr	r2, [r7, #24]
   14420:	ldr	lr, [r7, #28]
   14424:	ldr	r7, [r7, #32]
   14428:	stm	sp, {r0, r1, r6}
   1442c:	str	r5, [sp, #12]
   14430:	str	r4, [sp, #16]
   14434:	str	r2, [sp, #20]
   14438:	str	lr, [sp, #24]
   1443c:	str	r7, [sp, #28]
   14440:	b	14488 <__assert_fail@plt+0x3464>
   14444:	movw	r1, #23867	; 0x5d3b
   14448:	movt	r1, #1
   1444c:	mov	r0, #0
   14450:	mov	r2, #5
   14454:	bl	10e68 <dcgettext@plt>
   14458:	mov	ip, r0
   1445c:	ldr	r3, [r7]
   14460:	ldmib	r7, {r0, r1, r6}
   14464:	ldr	r5, [r7, #16]
   14468:	ldr	r4, [r7, #20]
   1446c:	ldr	r2, [r7, #24]
   14470:	ldr	r7, [r7, #28]
   14474:	stm	sp, {r0, r1, r6}
   14478:	str	r5, [sp, #12]
   1447c:	str	r4, [sp, #16]
   14480:	str	r2, [sp, #20]
   14484:	str	r7, [sp, #24]
   14488:	mov	r0, r8
   1448c:	mov	r1, #1
   14490:	mov	r2, ip
   14494:	bl	10f88 <__fprintf_chk@plt>
   14498:	sub	sp, fp, #24
   1449c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144a0:	push	{r4, sl, fp, lr}
   144a4:	add	fp, sp, #8
   144a8:	sub	sp, sp, #8
   144ac:	mov	lr, #0
   144b0:	ldr	ip, [fp, #8]
   144b4:	ldr	r4, [ip, lr, lsl #2]
   144b8:	add	lr, lr, #1
   144bc:	cmp	r4, #0
   144c0:	bne	144b4 <__assert_fail@plt+0x3490>
   144c4:	sub	r4, lr, #1
   144c8:	str	ip, [sp]
   144cc:	str	r4, [sp, #4]
   144d0:	bl	1416c <__assert_fail@plt+0x3148>
   144d4:	sub	sp, fp, #8
   144d8:	pop	{r4, sl, fp, pc}
   144dc:	push	{r4, r5, fp, lr}
   144e0:	add	fp, sp, #8
   144e4:	sub	sp, sp, #48	; 0x30
   144e8:	mov	ip, #0
   144ec:	ldr	r4, [fp, #8]
   144f0:	add	lr, sp, #8
   144f4:	ldr	r5, [r4]
   144f8:	str	r5, [lr, ip, lsl #2]
   144fc:	cmp	r5, #0
   14500:	beq	14514 <__assert_fail@plt+0x34f0>
   14504:	add	ip, ip, #1
   14508:	add	r4, r4, #4
   1450c:	cmp	ip, #10
   14510:	bcc	144f4 <__assert_fail@plt+0x34d0>
   14514:	str	lr, [sp]
   14518:	str	ip, [sp, #4]
   1451c:	bl	1416c <__assert_fail@plt+0x3148>
   14520:	sub	sp, fp, #8
   14524:	pop	{r4, r5, fp, pc}
   14528:	push	{fp, lr}
   1452c:	mov	fp, sp
   14530:	sub	sp, sp, #8
   14534:	add	ip, fp, #8
   14538:	str	ip, [sp, #4]
   1453c:	str	ip, [sp]
   14540:	bl	144dc <__assert_fail@plt+0x34b8>
   14544:	mov	sp, fp
   14548:	pop	{fp, pc}
   1454c:	push	{fp, lr}
   14550:	mov	fp, sp
   14554:	movw	r0, #24908	; 0x614c
   14558:	movt	r0, #2
   1455c:	ldr	r1, [r0]
   14560:	movw	r0, #22054	; 0x5626
   14564:	movt	r0, #1
   14568:	bl	10de4 <fputs_unlocked@plt>
   1456c:	movw	r1, #24027	; 0x5ddb
   14570:	movt	r1, #1
   14574:	mov	r0, #0
   14578:	mov	r2, #5
   1457c:	bl	10e68 <dcgettext@plt>
   14580:	mov	r1, r0
   14584:	movw	r2, #24047	; 0x5def
   14588:	movt	r2, #1
   1458c:	mov	r0, #1
   14590:	bl	10f70 <__printf_chk@plt>
   14594:	movw	r1, #24069	; 0x5e05
   14598:	movt	r1, #1
   1459c:	mov	r0, #0
   145a0:	mov	r2, #5
   145a4:	bl	10e68 <dcgettext@plt>
   145a8:	mov	r1, r0
   145ac:	movw	r2, #21584	; 0x5450
   145b0:	movt	r2, #1
   145b4:	movw	r3, #21863	; 0x5567
   145b8:	movt	r3, #1
   145bc:	mov	r0, #1
   145c0:	bl	10f70 <__printf_chk@plt>
   145c4:	movw	r1, #24089	; 0x5e19
   145c8:	movt	r1, #1
   145cc:	mov	r0, #0
   145d0:	mov	r2, #5
   145d4:	bl	10e68 <dcgettext@plt>
   145d8:	mov	r1, r0
   145dc:	movw	r2, #24128	; 0x5e40
   145e0:	movt	r2, #1
   145e4:	mov	r0, #1
   145e8:	pop	{fp, lr}
   145ec:	b	10f70 <__printf_chk@plt>
   145f0:	b	145f4 <__assert_fail@plt+0x35d0>
   145f4:	push	{r4, r5, r6, sl, fp, lr}
   145f8:	add	fp, sp, #16
   145fc:	mov	r4, r2
   14600:	mov	r5, r1
   14604:	mov	r6, r0
   14608:	bl	14f90 <__assert_fail@plt+0x3f6c>
   1460c:	cmp	r0, #0
   14610:	popne	{r4, r5, r6, sl, fp, pc}
   14614:	cmp	r6, #0
   14618:	beq	1462c <__assert_fail@plt+0x3608>
   1461c:	cmp	r5, #0
   14620:	cmpne	r4, #0
   14624:	bne	1462c <__assert_fail@plt+0x3608>
   14628:	pop	{r4, r5, r6, sl, fp, pc}
   1462c:	bl	149e0 <__assert_fail@plt+0x39bc>
   14630:	push	{fp, lr}
   14634:	mov	fp, sp
   14638:	bl	14a78 <__assert_fail@plt+0x3a54>
   1463c:	bl	14644 <__assert_fail@plt+0x3620>
   14640:	pop	{fp, pc}
   14644:	cmp	r0, #0
   14648:	bxne	lr
   1464c:	push	{fp, lr}
   14650:	mov	fp, sp
   14654:	bl	149e0 <__assert_fail@plt+0x39bc>
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	bl	14ec4 <__assert_fail@plt+0x3ea0>
   14664:	bl	14644 <__assert_fail@plt+0x3620>
   14668:	pop	{fp, pc}
   1466c:	b	14630 <__assert_fail@plt+0x360c>
   14670:	push	{r4, r5, fp, lr}
   14674:	add	fp, sp, #8
   14678:	mov	r4, r1
   1467c:	mov	r5, r0
   14680:	bl	14aa8 <__assert_fail@plt+0x3a84>
   14684:	cmp	r0, #0
   14688:	popne	{r4, r5, fp, pc}
   1468c:	cmp	r5, #0
   14690:	beq	146a0 <__assert_fail@plt+0x367c>
   14694:	cmp	r4, #0
   14698:	bne	146a0 <__assert_fail@plt+0x367c>
   1469c:	pop	{r4, r5, fp, pc}
   146a0:	bl	149e0 <__assert_fail@plt+0x39bc>
   146a4:	push	{fp, lr}
   146a8:	mov	fp, sp
   146ac:	bl	14ec8 <__assert_fail@plt+0x3ea4>
   146b0:	bl	14644 <__assert_fail@plt+0x3620>
   146b4:	pop	{fp, pc}
   146b8:	push	{fp, lr}
   146bc:	mov	fp, sp
   146c0:	bl	14ed8 <__assert_fail@plt+0x3eb4>
   146c4:	bl	14644 <__assert_fail@plt+0x3620>
   146c8:	pop	{fp, pc}
   146cc:	push	{fp, lr}
   146d0:	mov	fp, sp
   146d4:	mov	r2, r1
   146d8:	mov	r1, r0
   146dc:	mov	r0, #0
   146e0:	bl	145f4 <__assert_fail@plt+0x35d0>
   146e4:	pop	{fp, pc}
   146e8:	mov	r2, r1
   146ec:	mov	r1, r0
   146f0:	mov	r0, #0
   146f4:	b	146b8 <__assert_fail@plt+0x3694>
   146f8:	mov	r2, #1
   146fc:	b	14700 <__assert_fail@plt+0x36dc>
   14700:	push	{r4, r5, fp, lr}
   14704:	add	fp, sp, #8
   14708:	mov	r4, r1
   1470c:	ldr	r5, [r1]
   14710:	cmp	r0, #0
   14714:	beq	1472c <__assert_fail@plt+0x3708>
   14718:	mov	r1, #1
   1471c:	add	r1, r1, r5, lsr #1
   14720:	adds	r5, r5, r1
   14724:	bcc	14744 <__assert_fail@plt+0x3720>
   14728:	bl	149e0 <__assert_fail@plt+0x39bc>
   1472c:	cmp	r5, #0
   14730:	bne	14744 <__assert_fail@plt+0x3720>
   14734:	mov	r1, #64	; 0x40
   14738:	udiv	r5, r1, r2
   1473c:	cmp	r2, #64	; 0x40
   14740:	addhi	r5, r5, #1
   14744:	mov	r1, r5
   14748:	bl	145f4 <__assert_fail@plt+0x35d0>
   1474c:	str	r5, [r4]
   14750:	pop	{r4, r5, fp, pc}
   14754:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14758:	add	fp, sp, #24
   1475c:	mov	r8, r1
   14760:	ldr	r6, [r1]
   14764:	add	r1, r6, r6, asr #1
   14768:	cmp	r1, r6
   1476c:	mvnvs	r1, #-2147483648	; 0x80000000
   14770:	cmp	r1, r3
   14774:	mov	r5, r1
   14778:	movgt	r5, r3
   1477c:	cmn	r3, #1
   14780:	movle	r5, r1
   14784:	ldr	r4, [fp, #8]
   14788:	cmn	r4, #1
   1478c:	ble	147b4 <__assert_fail@plt+0x3790>
   14790:	cmp	r4, #0
   14794:	beq	14808 <__assert_fail@plt+0x37e4>
   14798:	cmn	r5, #1
   1479c:	ble	147dc <__assert_fail@plt+0x37b8>
   147a0:	mvn	r7, #-2147483648	; 0x80000000
   147a4:	udiv	r1, r7, r4
   147a8:	cmp	r1, r5
   147ac:	bge	14808 <__assert_fail@plt+0x37e4>
   147b0:	b	14818 <__assert_fail@plt+0x37f4>
   147b4:	cmn	r5, #1
   147b8:	ble	147f8 <__assert_fail@plt+0x37d4>
   147bc:	cmn	r4, #1
   147c0:	beq	14808 <__assert_fail@plt+0x37e4>
   147c4:	mov	r1, #-2147483648	; 0x80000000
   147c8:	sdiv	r1, r1, r4
   147cc:	mvn	r7, #-2147483648	; 0x80000000
   147d0:	cmp	r1, r5
   147d4:	bge	14808 <__assert_fail@plt+0x37e4>
   147d8:	b	14818 <__assert_fail@plt+0x37f4>
   147dc:	beq	14808 <__assert_fail@plt+0x37e4>
   147e0:	mov	r1, #-2147483648	; 0x80000000
   147e4:	sdiv	r1, r1, r5
   147e8:	mvn	r7, #-2147483648	; 0x80000000
   147ec:	cmp	r1, r4
   147f0:	bge	14808 <__assert_fail@plt+0x37e4>
   147f4:	b	14818 <__assert_fail@plt+0x37f4>
   147f8:	mvn	r7, #-2147483648	; 0x80000000
   147fc:	sdiv	r1, r7, r4
   14800:	cmp	r5, r1
   14804:	blt	14818 <__assert_fail@plt+0x37f4>
   14808:	mul	r1, r5, r4
   1480c:	mov	r7, #64	; 0x40
   14810:	cmp	r1, #63	; 0x3f
   14814:	bgt	14820 <__assert_fail@plt+0x37fc>
   14818:	sdiv	r5, r7, r4
   1481c:	mul	r1, r5, r4
   14820:	cmp	r0, #0
   14824:	moveq	r7, #0
   14828:	streq	r7, [r8]
   1482c:	sub	r7, r5, r6
   14830:	cmp	r7, r2
   14834:	bge	148e0 <__assert_fail@plt+0x38bc>
   14838:	add	r5, r6, r2
   1483c:	mov	r1, #0
   14840:	cmp	r5, r3
   14844:	mov	r2, #0
   14848:	movwgt	r2, #1
   1484c:	cmn	r3, #1
   14850:	movwgt	r1, #1
   14854:	cmp	r5, r6
   14858:	bvs	148c8 <__assert_fail@plt+0x38a4>
   1485c:	ands	r1, r1, r2
   14860:	bne	148c8 <__assert_fail@plt+0x38a4>
   14864:	cmn	r4, #1
   14868:	ble	14890 <__assert_fail@plt+0x386c>
   1486c:	cmp	r4, #0
   14870:	beq	148dc <__assert_fail@plt+0x38b8>
   14874:	cmn	r5, #1
   14878:	ble	148b4 <__assert_fail@plt+0x3890>
   1487c:	mvn	r1, #-2147483648	; 0x80000000
   14880:	udiv	r1, r1, r4
   14884:	cmp	r1, r5
   14888:	bge	148dc <__assert_fail@plt+0x38b8>
   1488c:	b	148c8 <__assert_fail@plt+0x38a4>
   14890:	cmn	r5, #1
   14894:	ble	148cc <__assert_fail@plt+0x38a8>
   14898:	cmn	r4, #1
   1489c:	beq	148dc <__assert_fail@plt+0x38b8>
   148a0:	mov	r1, #-2147483648	; 0x80000000
   148a4:	sdiv	r1, r1, r4
   148a8:	cmp	r1, r5
   148ac:	bge	148dc <__assert_fail@plt+0x38b8>
   148b0:	b	148c8 <__assert_fail@plt+0x38a4>
   148b4:	beq	148dc <__assert_fail@plt+0x38b8>
   148b8:	mov	r1, #-2147483648	; 0x80000000
   148bc:	sdiv	r1, r1, r5
   148c0:	cmp	r1, r4
   148c4:	bge	148dc <__assert_fail@plt+0x38b8>
   148c8:	bl	149e0 <__assert_fail@plt+0x39bc>
   148cc:	mvn	r1, #-2147483648	; 0x80000000
   148d0:	sdiv	r1, r1, r4
   148d4:	cmp	r5, r1
   148d8:	blt	148c8 <__assert_fail@plt+0x38a4>
   148dc:	mul	r1, r5, r4
   148e0:	bl	14670 <__assert_fail@plt+0x364c>
   148e4:	str	r5, [r8]
   148e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148ec:	mov	r1, #1
   148f0:	b	148f4 <__assert_fail@plt+0x38d0>
   148f4:	push	{fp, lr}
   148f8:	mov	fp, sp
   148fc:	bl	14a24 <__assert_fail@plt+0x3a00>
   14900:	bl	14644 <__assert_fail@plt+0x3620>
   14904:	pop	{fp, pc}
   14908:	mov	r1, #1
   1490c:	b	14910 <__assert_fail@plt+0x38ec>
   14910:	push	{fp, lr}
   14914:	mov	fp, sp
   14918:	bl	14ed4 <__assert_fail@plt+0x3eb0>
   1491c:	bl	14644 <__assert_fail@plt+0x3620>
   14920:	pop	{fp, pc}
   14924:	push	{r4, r5, r6, sl, fp, lr}
   14928:	add	fp, sp, #16
   1492c:	mov	r4, r1
   14930:	mov	r5, r0
   14934:	mov	r0, r1
   14938:	bl	14630 <__assert_fail@plt+0x360c>
   1493c:	mov	r6, r0
   14940:	mov	r1, r5
   14944:	mov	r2, r4
   14948:	bl	10e38 <memcpy@plt>
   1494c:	mov	r0, r6
   14950:	pop	{r4, r5, r6, sl, fp, pc}
   14954:	push	{r4, r5, r6, sl, fp, lr}
   14958:	add	fp, sp, #16
   1495c:	mov	r4, r1
   14960:	mov	r5, r0
   14964:	mov	r0, r1
   14968:	bl	14658 <__assert_fail@plt+0x3634>
   1496c:	mov	r6, r0
   14970:	mov	r1, r5
   14974:	mov	r2, r4
   14978:	bl	10e38 <memcpy@plt>
   1497c:	mov	r0, r6
   14980:	pop	{r4, r5, r6, sl, fp, pc}
   14984:	push	{r4, r5, r6, sl, fp, lr}
   14988:	add	fp, sp, #16
   1498c:	mov	r4, r1
   14990:	mov	r5, r0
   14994:	add	r0, r1, #1
   14998:	bl	14658 <__assert_fail@plt+0x3634>
   1499c:	mov	r6, r0
   149a0:	mov	r0, #0
   149a4:	strb	r0, [r6, r4]
   149a8:	mov	r0, r6
   149ac:	mov	r1, r5
   149b0:	mov	r2, r4
   149b4:	bl	10e38 <memcpy@plt>
   149b8:	mov	r0, r6
   149bc:	pop	{r4, r5, r6, sl, fp, pc}
   149c0:	push	{r4, sl, fp, lr}
   149c4:	add	fp, sp, #8
   149c8:	mov	r4, r0
   149cc:	bl	10f40 <strlen@plt>
   149d0:	add	r1, r0, #1
   149d4:	mov	r0, r4
   149d8:	pop	{r4, sl, fp, lr}
   149dc:	b	14924 <__assert_fail@plt+0x3900>
   149e0:	push	{fp, lr}
   149e4:	mov	fp, sp
   149e8:	movw	r0, #24812	; 0x60ec
   149ec:	movt	r0, #2
   149f0:	ldr	r4, [r0]
   149f4:	movw	r1, #24204	; 0x5e8c
   149f8:	movt	r1, #1
   149fc:	mov	r0, #0
   14a00:	mov	r2, #5
   14a04:	bl	10e68 <dcgettext@plt>
   14a08:	mov	r3, r0
   14a0c:	movw	r2, #22477	; 0x57cd
   14a10:	movt	r2, #1
   14a14:	mov	r0, r4
   14a18:	mov	r1, #0
   14a1c:	bl	10ee0 <error@plt>
   14a20:	bl	11000 <abort@plt>
   14a24:	clz	r2, r1
   14a28:	lsr	r2, r2, #5
   14a2c:	clz	r3, r0
   14a30:	lsr	r3, r3, #5
   14a34:	orrs	r2, r3, r2
   14a38:	movwne	r1, #1
   14a3c:	movwne	r0, #1
   14a40:	cmp	r1, #0
   14a44:	beq	14a74 <__assert_fail@plt+0x3a50>
   14a48:	mvn	r2, #-2147483648	; 0x80000000
   14a4c:	udiv	r2, r2, r1
   14a50:	cmp	r2, r0
   14a54:	bcs	14a74 <__assert_fail@plt+0x3a50>
   14a58:	push	{fp, lr}
   14a5c:	mov	fp, sp
   14a60:	bl	10f4c <__errno_location@plt>
   14a64:	mov	r1, #12
   14a68:	str	r1, [r0]
   14a6c:	mov	r0, #0
   14a70:	pop	{fp, pc}
   14a74:	b	10dd8 <calloc@plt>
   14a78:	cmp	r0, #0
   14a7c:	movweq	r0, #1
   14a80:	cmn	r0, #1
   14a84:	ble	14a8c <__assert_fail@plt+0x3a68>
   14a88:	b	10eec <malloc@plt>
   14a8c:	push	{fp, lr}
   14a90:	mov	fp, sp
   14a94:	bl	10f4c <__errno_location@plt>
   14a98:	mov	r1, #12
   14a9c:	str	r1, [r0]
   14aa0:	mov	r0, #0
   14aa4:	pop	{fp, pc}
   14aa8:	push	{fp, lr}
   14aac:	mov	fp, sp
   14ab0:	cmp	r0, #0
   14ab4:	beq	14ad0 <__assert_fail@plt+0x3aac>
   14ab8:	cmp	r1, #0
   14abc:	beq	14adc <__assert_fail@plt+0x3ab8>
   14ac0:	cmn	r1, #1
   14ac4:	ble	14ae8 <__assert_fail@plt+0x3ac4>
   14ac8:	pop	{fp, lr}
   14acc:	b	10e74 <realloc@plt>
   14ad0:	mov	r0, r1
   14ad4:	pop	{fp, lr}
   14ad8:	b	14a78 <__assert_fail@plt+0x3a54>
   14adc:	bl	12454 <__assert_fail@plt+0x1430>
   14ae0:	mov	r0, #0
   14ae4:	pop	{fp, pc}
   14ae8:	bl	10f4c <__errno_location@plt>
   14aec:	mov	r1, #12
   14af0:	str	r1, [r0]
   14af4:	mov	r0, #0
   14af8:	pop	{fp, pc}
   14afc:	mov	r1, r0
   14b00:	sub	r2, r0, #65	; 0x41
   14b04:	mov	r0, #1
   14b08:	cmp	r2, #26
   14b0c:	subcs	r2, r1, #97	; 0x61
   14b10:	cmpcs	r2, #26
   14b14:	bcs	14b1c <__assert_fail@plt+0x3af8>
   14b18:	bx	lr
   14b1c:	sub	r1, r1, #48	; 0x30
   14b20:	cmp	r1, #10
   14b24:	movcs	r0, #0
   14b28:	bx	lr
   14b2c:	mov	r1, r0
   14b30:	sub	r2, r0, #65	; 0x41
   14b34:	mov	r0, #1
   14b38:	cmp	r2, #26
   14b3c:	subcs	r1, r1, #97	; 0x61
   14b40:	cmpcs	r1, #26
   14b44:	movcs	r0, #0
   14b48:	bx	lr
   14b4c:	mov	r1, #0
   14b50:	cmp	r0, #128	; 0x80
   14b54:	movwcc	r1, #1
   14b58:	mov	r0, r1
   14b5c:	bx	lr
   14b60:	sub	r1, r0, #9
   14b64:	clz	r1, r1
   14b68:	lsr	r1, r1, #5
   14b6c:	sub	r0, r0, #32
   14b70:	clz	r0, r0
   14b74:	lsr	r0, r0, #5
   14b78:	orr	r0, r0, r1
   14b7c:	bx	lr
   14b80:	mov	r1, r0
   14b84:	mov	r0, #1
   14b88:	cmp	r1, #32
   14b8c:	bxcc	lr
   14b90:	cmp	r1, #127	; 0x7f
   14b94:	movne	r0, #0
   14b98:	bx	lr
   14b9c:	sub	r1, r0, #48	; 0x30
   14ba0:	mov	r0, #0
   14ba4:	cmp	r1, #10
   14ba8:	movwcc	r0, #1
   14bac:	bx	lr
   14bb0:	sub	r1, r0, #33	; 0x21
   14bb4:	mov	r0, #0
   14bb8:	cmp	r1, #94	; 0x5e
   14bbc:	movwcc	r0, #1
   14bc0:	bx	lr
   14bc4:	sub	r1, r0, #97	; 0x61
   14bc8:	mov	r0, #0
   14bcc:	cmp	r1, #26
   14bd0:	movwcc	r0, #1
   14bd4:	bx	lr
   14bd8:	sub	r1, r0, #32
   14bdc:	mov	r0, #0
   14be0:	cmp	r1, #95	; 0x5f
   14be4:	movwcc	r0, #1
   14be8:	bx	lr
   14bec:	sub	r1, r0, #33	; 0x21
   14bf0:	cmp	r1, #93	; 0x5d
   14bf4:	bhi	14d80 <__assert_fail@plt+0x3d5c>
   14bf8:	mov	r0, #1
   14bfc:	add	r2, pc, #0
   14c00:	ldr	pc, [r2, r1, lsl #2]
   14c04:	andeq	r4, r1, ip, ror sp
   14c08:	andeq	r4, r1, ip, ror sp
   14c0c:	andeq	r4, r1, ip, ror sp
   14c10:	andeq	r4, r1, ip, ror sp
   14c14:	andeq	r4, r1, ip, ror sp
   14c18:	andeq	r4, r1, ip, ror sp
   14c1c:	andeq	r4, r1, ip, ror sp
   14c20:	andeq	r4, r1, ip, ror sp
   14c24:	andeq	r4, r1, ip, ror sp
   14c28:	andeq	r4, r1, ip, ror sp
   14c2c:	andeq	r4, r1, ip, ror sp
   14c30:	andeq	r4, r1, ip, ror sp
   14c34:	andeq	r4, r1, ip, ror sp
   14c38:	andeq	r4, r1, ip, ror sp
   14c3c:	andeq	r4, r1, ip, ror sp
   14c40:	andeq	r4, r1, r0, lsl #27
   14c44:	andeq	r4, r1, r0, lsl #27
   14c48:	andeq	r4, r1, r0, lsl #27
   14c4c:	andeq	r4, r1, r0, lsl #27
   14c50:	andeq	r4, r1, r0, lsl #27
   14c54:	andeq	r4, r1, r0, lsl #27
   14c58:	andeq	r4, r1, r0, lsl #27
   14c5c:	andeq	r4, r1, r0, lsl #27
   14c60:	andeq	r4, r1, r0, lsl #27
   14c64:	andeq	r4, r1, r0, lsl #27
   14c68:	andeq	r4, r1, ip, ror sp
   14c6c:	andeq	r4, r1, ip, ror sp
   14c70:	andeq	r4, r1, ip, ror sp
   14c74:	andeq	r4, r1, ip, ror sp
   14c78:	andeq	r4, r1, ip, ror sp
   14c7c:	andeq	r4, r1, ip, ror sp
   14c80:	andeq	r4, r1, ip, ror sp
   14c84:	andeq	r4, r1, r0, lsl #27
   14c88:	andeq	r4, r1, r0, lsl #27
   14c8c:	andeq	r4, r1, r0, lsl #27
   14c90:	andeq	r4, r1, r0, lsl #27
   14c94:	andeq	r4, r1, r0, lsl #27
   14c98:	andeq	r4, r1, r0, lsl #27
   14c9c:	andeq	r4, r1, r0, lsl #27
   14ca0:	andeq	r4, r1, r0, lsl #27
   14ca4:	andeq	r4, r1, r0, lsl #27
   14ca8:	andeq	r4, r1, r0, lsl #27
   14cac:	andeq	r4, r1, r0, lsl #27
   14cb0:	andeq	r4, r1, r0, lsl #27
   14cb4:	andeq	r4, r1, r0, lsl #27
   14cb8:	andeq	r4, r1, r0, lsl #27
   14cbc:	andeq	r4, r1, r0, lsl #27
   14cc0:	andeq	r4, r1, r0, lsl #27
   14cc4:	andeq	r4, r1, r0, lsl #27
   14cc8:	andeq	r4, r1, r0, lsl #27
   14ccc:	andeq	r4, r1, r0, lsl #27
   14cd0:	andeq	r4, r1, r0, lsl #27
   14cd4:	andeq	r4, r1, r0, lsl #27
   14cd8:	andeq	r4, r1, r0, lsl #27
   14cdc:	andeq	r4, r1, r0, lsl #27
   14ce0:	andeq	r4, r1, r0, lsl #27
   14ce4:	andeq	r4, r1, r0, lsl #27
   14ce8:	andeq	r4, r1, r0, lsl #27
   14cec:	andeq	r4, r1, ip, ror sp
   14cf0:	andeq	r4, r1, ip, ror sp
   14cf4:	andeq	r4, r1, ip, ror sp
   14cf8:	andeq	r4, r1, ip, ror sp
   14cfc:	andeq	r4, r1, ip, ror sp
   14d00:	andeq	r4, r1, ip, ror sp
   14d04:	andeq	r4, r1, r0, lsl #27
   14d08:	andeq	r4, r1, r0, lsl #27
   14d0c:	andeq	r4, r1, r0, lsl #27
   14d10:	andeq	r4, r1, r0, lsl #27
   14d14:	andeq	r4, r1, r0, lsl #27
   14d18:	andeq	r4, r1, r0, lsl #27
   14d1c:	andeq	r4, r1, r0, lsl #27
   14d20:	andeq	r4, r1, r0, lsl #27
   14d24:	andeq	r4, r1, r0, lsl #27
   14d28:	andeq	r4, r1, r0, lsl #27
   14d2c:	andeq	r4, r1, r0, lsl #27
   14d30:	andeq	r4, r1, r0, lsl #27
   14d34:	andeq	r4, r1, r0, lsl #27
   14d38:	andeq	r4, r1, r0, lsl #27
   14d3c:	andeq	r4, r1, r0, lsl #27
   14d40:	andeq	r4, r1, r0, lsl #27
   14d44:	andeq	r4, r1, r0, lsl #27
   14d48:	andeq	r4, r1, r0, lsl #27
   14d4c:	andeq	r4, r1, r0, lsl #27
   14d50:	andeq	r4, r1, r0, lsl #27
   14d54:	andeq	r4, r1, r0, lsl #27
   14d58:	andeq	r4, r1, r0, lsl #27
   14d5c:	andeq	r4, r1, r0, lsl #27
   14d60:	andeq	r4, r1, r0, lsl #27
   14d64:	andeq	r4, r1, r0, lsl #27
   14d68:	andeq	r4, r1, r0, lsl #27
   14d6c:	andeq	r4, r1, ip, ror sp
   14d70:	andeq	r4, r1, ip, ror sp
   14d74:	andeq	r4, r1, ip, ror sp
   14d78:	andeq	r4, r1, ip, ror sp
   14d7c:	bx	lr
   14d80:	mov	r0, #0
   14d84:	bx	lr
   14d88:	sub	r0, r0, #9
   14d8c:	cmp	r0, #23
   14d90:	movhi	r0, #0
   14d94:	bxhi	lr
   14d98:	bic	r0, r0, #-16777216	; 0xff000000
   14d9c:	movw	r1, #31
   14da0:	movt	r1, #128	; 0x80
   14da4:	mov	r2, #1
   14da8:	and	r0, r2, r1, lsr r0
   14dac:	bx	lr
   14db0:	sub	r1, r0, #65	; 0x41
   14db4:	mov	r0, #0
   14db8:	cmp	r1, #26
   14dbc:	movwcc	r0, #1
   14dc0:	bx	lr
   14dc4:	mov	r1, r0
   14dc8:	sub	r2, r0, #48	; 0x30
   14dcc:	mov	r0, #1
   14dd0:	cmp	r2, #22
   14dd4:	bhi	14dec <__assert_fail@plt+0x3dc8>
   14dd8:	mov	ip, #1
   14ddc:	movw	r3, #1023	; 0x3ff
   14de0:	movt	r3, #126	; 0x7e
   14de4:	tst	r3, ip, lsl r2
   14de8:	bxne	lr
   14dec:	sub	r1, r1, #97	; 0x61
   14df0:	cmp	r1, #6
   14df4:	movcs	r0, #0
   14df8:	bxcs	lr
   14dfc:	bx	lr
   14e00:	sub	r1, r0, #65	; 0x41
   14e04:	cmp	r1, #26
   14e08:	addcc	r0, r0, #32
   14e0c:	bx	lr
   14e10:	sub	r1, r0, #97	; 0x61
   14e14:	cmp	r1, #26
   14e18:	subcc	r0, r0, #32
   14e1c:	bx	lr
   14e20:	push	{r4, r5, r6, sl, fp, lr}
   14e24:	add	fp, sp, #16
   14e28:	mov	r4, r0
   14e2c:	bl	10ebc <__fpending@plt>
   14e30:	mov	r5, r0
   14e34:	mov	r0, r4
   14e38:	bl	10ec8 <ferror_unlocked@plt>
   14e3c:	mov	r6, r0
   14e40:	mov	r0, r4
   14e44:	bl	1234c <__assert_fail@plt+0x1328>
   14e48:	cmp	r6, #0
   14e4c:	beq	14e6c <__assert_fail@plt+0x3e48>
   14e50:	mvn	r4, #0
   14e54:	cmp	r0, #0
   14e58:	bne	14ea0 <__assert_fail@plt+0x3e7c>
   14e5c:	bl	10f4c <__errno_location@plt>
   14e60:	mov	r1, #0
   14e64:	str	r1, [r0]
   14e68:	b	14ea0 <__assert_fail@plt+0x3e7c>
   14e6c:	cmp	r0, #0
   14e70:	mov	r4, r0
   14e74:	mvnne	r4, #0
   14e78:	cmp	r5, #0
   14e7c:	bne	14ea0 <__assert_fail@plt+0x3e7c>
   14e80:	cmp	r0, #0
   14e84:	beq	14ea0 <__assert_fail@plt+0x3e7c>
   14e88:	bl	10f4c <__errno_location@plt>
   14e8c:	ldr	r0, [r0]
   14e90:	subs	r4, r0, #9
   14e94:	mvnne	r4, #0
   14e98:	mov	r0, r4
   14e9c:	pop	{r4, r5, r6, sl, fp, pc}
   14ea0:	mov	r0, r4
   14ea4:	pop	{r4, r5, r6, sl, fp, pc}
   14ea8:	push	{fp, lr}
   14eac:	mov	fp, sp
   14eb0:	bl	10f4c <__errno_location@plt>
   14eb4:	mov	r1, #12
   14eb8:	str	r1, [r0]
   14ebc:	mov	r0, #0
   14ec0:	pop	{fp, pc}
   14ec4:	b	14a78 <__assert_fail@plt+0x3a54>
   14ec8:	cmp	r1, #0
   14ecc:	orreq	r1, r1, #1
   14ed0:	b	14aa8 <__assert_fail@plt+0x3a84>
   14ed4:	b	14a24 <__assert_fail@plt+0x3a00>
   14ed8:	clz	r3, r2
   14edc:	lsr	ip, r3, #5
   14ee0:	clz	r3, r1
   14ee4:	lsr	r3, r3, #5
   14ee8:	orrs	r3, r3, ip
   14eec:	movwne	r1, #1
   14ef0:	movwne	r2, #1
   14ef4:	b	14f90 <__assert_fail@plt+0x3f6c>
   14ef8:	push	{fp, lr}
   14efc:	mov	fp, sp
   14f00:	mov	r0, #14
   14f04:	bl	10fc4 <nl_langinfo@plt>
   14f08:	movw	r1, #22055	; 0x5627
   14f0c:	movt	r1, #1
   14f10:	cmp	r0, #0
   14f14:	movne	r1, r0
   14f18:	ldrb	r2, [r1]
   14f1c:	movw	r0, #24221	; 0x5e9d
   14f20:	movt	r0, #1
   14f24:	cmp	r2, #0
   14f28:	movne	r0, r1
   14f2c:	pop	{fp, pc}
   14f30:	push	{r4, r5, r6, r7, fp, lr}
   14f34:	add	fp, sp, #16
   14f38:	sub	sp, sp, #8
   14f3c:	mov	r7, r2
   14f40:	mov	r4, r1
   14f44:	add	r5, sp, #4
   14f48:	cmp	r0, #0
   14f4c:	movne	r5, r0
   14f50:	mov	r0, r5
   14f54:	bl	10ed4 <mbrtowc@plt>
   14f58:	mov	r6, r0
   14f5c:	cmp	r7, #0
   14f60:	beq	14f84 <__assert_fail@plt+0x3f60>
   14f64:	cmn	r6, #2
   14f68:	bcc	14f84 <__assert_fail@plt+0x3f60>
   14f6c:	mov	r0, #0
   14f70:	bl	14fcc <__assert_fail@plt+0x3fa8>
   14f74:	cmp	r0, #0
   14f78:	ldrbeq	r0, [r4]
   14f7c:	streq	r0, [r5]
   14f80:	moveq	r6, #1
   14f84:	mov	r0, r6
   14f88:	sub	sp, fp, #16
   14f8c:	pop	{r4, r5, r6, r7, fp, pc}
   14f90:	cmp	r2, #0
   14f94:	beq	14fc4 <__assert_fail@plt+0x3fa0>
   14f98:	mvn	r3, #0
   14f9c:	udiv	r3, r3, r2
   14fa0:	cmp	r3, r1
   14fa4:	bcs	14fc4 <__assert_fail@plt+0x3fa0>
   14fa8:	push	{fp, lr}
   14fac:	mov	fp, sp
   14fb0:	bl	10f4c <__errno_location@plt>
   14fb4:	mov	r1, #12
   14fb8:	str	r1, [r0]
   14fbc:	mov	r0, #0
   14fc0:	pop	{fp, pc}
   14fc4:	mul	r1, r2, r1
   14fc8:	b	14aa8 <__assert_fail@plt+0x3a84>
   14fcc:	push	{r4, sl, fp, lr}
   14fd0:	add	fp, sp, #8
   14fd4:	sub	sp, sp, #264	; 0x108
   14fd8:	add	r1, sp, #7
   14fdc:	movw	r2, #257	; 0x101
   14fe0:	bl	15030 <__assert_fail@plt+0x400c>
   14fe4:	mov	r4, #0
   14fe8:	cmp	r0, #0
   14fec:	bne	15024 <__assert_fail@plt+0x4000>
   14ff0:	add	r0, sp, #7
   14ff4:	movw	r1, #24227	; 0x5ea3
   14ff8:	movt	r1, #1
   14ffc:	bl	10dfc <strcmp@plt>
   15000:	cmp	r0, #0
   15004:	beq	15024 <__assert_fail@plt+0x4000>
   15008:	add	r0, sp, #7
   1500c:	movw	r1, #24229	; 0x5ea5
   15010:	movt	r1, #1
   15014:	bl	10dfc <strcmp@plt>
   15018:	mov	r4, r0
   1501c:	cmp	r0, #0
   15020:	movwne	r4, #1
   15024:	mov	r0, r4
   15028:	sub	sp, fp, #8
   1502c:	pop	{r4, sl, fp, pc}
   15030:	b	15034 <__assert_fail@plt+0x4010>
   15034:	push	{r4, r5, r6, r7, fp, lr}
   15038:	add	fp, sp, #16
   1503c:	mov	r6, r2
   15040:	mov	r4, r1
   15044:	bl	150d0 <__assert_fail@plt+0x40ac>
   15048:	cmp	r0, #0
   1504c:	beq	1507c <__assert_fail@plt+0x4058>
   15050:	mov	r7, r0
   15054:	bl	10f40 <strlen@plt>
   15058:	cmp	r0, r6
   1505c:	bcs	1509c <__assert_fail@plt+0x4078>
   15060:	add	r2, r0, #1
   15064:	mov	r0, r4
   15068:	mov	r1, r7
   1506c:	bl	10e38 <memcpy@plt>
   15070:	mov	r5, #0
   15074:	mov	r0, r5
   15078:	pop	{r4, r5, r6, r7, fp, pc}
   1507c:	mov	r5, #22
   15080:	cmp	r6, #0
   15084:	movne	r0, #0
   15088:	strbne	r0, [r4]
   1508c:	movne	r0, r5
   15090:	popne	{r4, r5, r6, r7, fp, pc}
   15094:	mov	r0, r5
   15098:	pop	{r4, r5, r6, r7, fp, pc}
   1509c:	mov	r5, #34	; 0x22
   150a0:	cmp	r6, #0
   150a4:	beq	150c4 <__assert_fail@plt+0x40a0>
   150a8:	sub	r6, r6, #1
   150ac:	mov	r0, r4
   150b0:	mov	r1, r7
   150b4:	mov	r2, r6
   150b8:	bl	10e38 <memcpy@plt>
   150bc:	mov	r0, #0
   150c0:	strb	r0, [r4, r6]
   150c4:	mov	r0, r5
   150c8:	pop	{r4, r5, r6, r7, fp, pc}
   150cc:	b	150d0 <__assert_fail@plt+0x40ac>
   150d0:	mov	r1, #0
   150d4:	b	10fac <setlocale@plt>
   150d8:	cmp	r3, #0
   150dc:	cmpeq	r2, #0
   150e0:	bne	150f8 <__assert_fail@plt+0x40d4>
   150e4:	cmp	r1, #0
   150e8:	cmpeq	r0, #0
   150ec:	mvnne	r1, #0
   150f0:	mvnne	r0, #0
   150f4:	b	15114 <__assert_fail@plt+0x40f0>
   150f8:	sub	sp, sp, #8
   150fc:	push	{sp, lr}
   15100:	bl	15124 <__assert_fail@plt+0x4100>
   15104:	ldr	lr, [sp, #4]
   15108:	add	sp, sp, #8
   1510c:	pop	{r2, r3}
   15110:	bx	lr
   15114:	push	{r1, lr}
   15118:	mov	r0, #8
   1511c:	bl	10df0 <raise@plt>
   15120:	pop	{r1, pc}
   15124:	cmp	r1, r3
   15128:	cmpeq	r0, r2
   1512c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15130:	mov	r4, r0
   15134:	movcc	r0, #0
   15138:	mov	r5, r1
   1513c:	ldr	lr, [sp, #36]	; 0x24
   15140:	movcc	r1, r0
   15144:	bcc	15240 <__assert_fail@plt+0x421c>
   15148:	cmp	r3, #0
   1514c:	clzeq	ip, r2
   15150:	clzne	ip, r3
   15154:	addeq	ip, ip, #32
   15158:	cmp	r5, #0
   1515c:	clzeq	r1, r4
   15160:	addeq	r1, r1, #32
   15164:	clzne	r1, r5
   15168:	sub	ip, ip, r1
   1516c:	sub	sl, ip, #32
   15170:	lsl	r9, r3, ip
   15174:	rsb	fp, ip, #32
   15178:	orr	r9, r9, r2, lsl sl
   1517c:	orr	r9, r9, r2, lsr fp
   15180:	lsl	r8, r2, ip
   15184:	cmp	r5, r9
   15188:	cmpeq	r4, r8
   1518c:	movcc	r0, #0
   15190:	movcc	r1, r0
   15194:	bcc	151b0 <__assert_fail@plt+0x418c>
   15198:	mov	r0, #1
   1519c:	subs	r4, r4, r8
   151a0:	lsl	r1, r0, sl
   151a4:	orr	r1, r1, r0, lsr fp
   151a8:	lsl	r0, r0, ip
   151ac:	sbc	r5, r5, r9
   151b0:	cmp	ip, #0
   151b4:	beq	15240 <__assert_fail@plt+0x421c>
   151b8:	lsr	r6, r8, #1
   151bc:	orr	r6, r6, r9, lsl #31
   151c0:	lsr	r7, r9, #1
   151c4:	mov	r2, ip
   151c8:	b	151ec <__assert_fail@plt+0x41c8>
   151cc:	subs	r3, r4, r6
   151d0:	sbc	r8, r5, r7
   151d4:	adds	r3, r3, r3
   151d8:	adc	r8, r8, r8
   151dc:	adds	r4, r3, #1
   151e0:	adc	r5, r8, #0
   151e4:	subs	r2, r2, #1
   151e8:	beq	15208 <__assert_fail@plt+0x41e4>
   151ec:	cmp	r5, r7
   151f0:	cmpeq	r4, r6
   151f4:	bcs	151cc <__assert_fail@plt+0x41a8>
   151f8:	adds	r4, r4, r4
   151fc:	adc	r5, r5, r5
   15200:	subs	r2, r2, #1
   15204:	bne	151ec <__assert_fail@plt+0x41c8>
   15208:	lsr	r3, r4, ip
   1520c:	orr	r3, r3, r5, lsl fp
   15210:	lsr	r2, r5, ip
   15214:	orr	r3, r3, r5, lsr sl
   15218:	adds	r0, r0, r4
   1521c:	mov	r4, r3
   15220:	lsl	r3, r2, ip
   15224:	orr	r3, r3, r4, lsl sl
   15228:	lsl	ip, r4, ip
   1522c:	orr	r3, r3, r4, lsr fp
   15230:	adc	r1, r1, r5
   15234:	subs	r0, r0, ip
   15238:	mov	r5, r2
   1523c:	sbc	r1, r1, r3
   15240:	cmp	lr, #0
   15244:	strdne	r4, [lr]
   15248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1524c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15250:	mov	r7, r0
   15254:	ldr	r6, [pc, #72]	; 152a4 <__assert_fail@plt+0x4280>
   15258:	ldr	r5, [pc, #72]	; 152a8 <__assert_fail@plt+0x4284>
   1525c:	add	r6, pc, r6
   15260:	add	r5, pc, r5
   15264:	sub	r6, r6, r5
   15268:	mov	r8, r1
   1526c:	mov	r9, r2
   15270:	bl	10db8 <calloc@plt-0x20>
   15274:	asrs	r6, r6, #2
   15278:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1527c:	mov	r4, #0
   15280:	add	r4, r4, #1
   15284:	ldr	r3, [r5], #4
   15288:	mov	r2, r9
   1528c:	mov	r1, r8
   15290:	mov	r0, r7
   15294:	blx	r3
   15298:	cmp	r6, r4
   1529c:	bne	15280 <__assert_fail@plt+0x425c>
   152a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152a4:	andeq	r0, r1, r8, lsr #25
   152a8:	andeq	r0, r1, r0, lsr #25
   152ac:	bx	lr
   152b0:	ldr	r3, [pc, #12]	; 152c4 <__assert_fail@plt+0x42a0>
   152b4:	mov	r1, #0
   152b8:	add	r3, pc, r3
   152bc:	ldr	r2, [r3]
   152c0:	b	10f58 <__cxa_atexit@plt>
   152c4:	andeq	r0, r1, ip, lsl lr

Disassembly of section .fini:

000152c8 <.fini>:
   152c8:	push	{r3, lr}
   152cc:	pop	{r3, pc}
