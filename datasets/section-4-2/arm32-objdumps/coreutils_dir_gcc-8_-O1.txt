
../repos/coreutils/src/dir:     file format elf32-littlearm


Disassembly of section .init:

00011838 <.init>:
   11838:	push	{r3, lr}
   1183c:	bl	11dbc <__assert_fail@plt+0x48>
   11840:	pop	{r3, pc}

Disassembly of section .plt:

00011844 <calloc@plt-0x14>:
   11844:	push	{lr}		; (str lr, [sp, #-4]!)
   11848:	ldr	lr, [pc, #4]	; 11854 <calloc@plt-0x4>
   1184c:	add	lr, pc, lr
   11850:	ldr	pc, [lr, #8]!
   11854:	andeq	r9, r2, ip, lsr #15

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #167936	; 0x29000
   11860:	ldr	pc, [ip, #1964]!	; 0x7ac

00011864 <fputs_unlocked@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #167936	; 0x29000
   1186c:	ldr	pc, [ip, #1956]!	; 0x7a4

00011870 <cap_to_text@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #167936	; 0x29000
   11878:	ldr	pc, [ip, #1948]!	; 0x79c

0001187c <raise@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #167936	; 0x29000
   11884:	ldr	pc, [ip, #1940]!	; 0x794

00011888 <gmtime_r@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #167936	; 0x29000
   11890:	ldr	pc, [ip, #1932]!	; 0x78c

00011894 <getpwnam@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #167936	; 0x29000
   1189c:	ldr	pc, [ip, #1924]!	; 0x784

000118a0 <strcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #167936	; 0x29000
   118a8:	ldr	pc, [ip, #1916]!	; 0x77c

000118ac <getpwuid@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #167936	; 0x29000
   118b4:	ldr	pc, [ip, #1908]!	; 0x774

000118b8 <mktime@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #167936	; 0x29000
   118c0:	ldr	pc, [ip, #1900]!	; 0x76c

000118c4 <fflush@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #167936	; 0x29000
   118cc:	ldr	pc, [ip, #1892]!	; 0x764

000118d0 <wcwidth@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #167936	; 0x29000
   118d8:	ldr	pc, [ip, #1884]!	; 0x75c

000118dc <sigprocmask@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #167936	; 0x29000
   118e4:	ldr	pc, [ip, #1876]!	; 0x754

000118e8 <_setjmp@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #167936	; 0x29000
   118f0:	ldr	pc, [ip, #1868]!	; 0x74c

000118f4 <memmove@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #167936	; 0x29000
   118fc:	ldr	pc, [ip, #1860]!	; 0x744

00011900 <free@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #167936	; 0x29000
   11908:	ldr	pc, [ip, #1852]!	; 0x73c

0001190c <faccessat@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #167936	; 0x29000
   11914:	ldr	pc, [ip, #1844]!	; 0x734

00011918 <clock_gettime@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #167936	; 0x29000
   11920:	ldr	pc, [ip, #1836]!	; 0x72c

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #167936	; 0x29000
   1192c:	ldr	pc, [ip, #1828]!	; 0x724

00011930 <memcpy@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #167936	; 0x29000
   11938:	ldr	pc, [ip, #1820]!	; 0x71c

0001193c <__strtoull_internal@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #167936	; 0x29000
   11944:	ldr	pc, [ip, #1812]!	; 0x714

00011948 <mbsinit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #167936	; 0x29000
   11950:	ldr	pc, [ip, #1804]!	; 0x70c

00011954 <signal@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #167936	; 0x29000
   1195c:	ldr	pc, [ip, #1796]!	; 0x704

00011960 <fwrite_unlocked@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #167936	; 0x29000
   11968:	ldr	pc, [ip, #1788]!	; 0x6fc

0001196c <memcmp@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #167936	; 0x29000
   11974:	ldr	pc, [ip, #1780]!	; 0x6f4

00011978 <fputc_unlocked@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #167936	; 0x29000
   11980:	ldr	pc, [ip, #1772]!	; 0x6ec

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #167936	; 0x29000
   1198c:	ldr	pc, [ip, #1764]!	; 0x6e4

00011990 <realloc@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #167936	; 0x29000
   11998:	ldr	pc, [ip, #1756]!	; 0x6dc

0001199c <sigismember@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #167936	; 0x29000
   119a4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119a8 <fgetfilecon@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #167936	; 0x29000
   119b0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119b4 <localtime_r@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #167936	; 0x29000
   119bc:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c0 <textdomain@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #167936	; 0x29000
   119c8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119cc <iswcntrl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #167936	; 0x29000
   119d4:	ldr	pc, [ip, #1716]!	; 0x6b4

000119d8 <rawmemchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #167936	; 0x29000
   119e0:	ldr	pc, [ip, #1708]!	; 0x6ac

000119e4 <fflush_unlocked@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #167936	; 0x29000
   119ec:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f0 <iswprint@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #167936	; 0x29000
   119f8:	ldr	pc, [ip, #1692]!	; 0x69c

000119fc <tzset@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #167936	; 0x29000
   11a04:	ldr	pc, [ip, #1684]!	; 0x694

00011a08 <readlink@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #167936	; 0x29000
   11a10:	ldr	pc, [ip, #1676]!	; 0x68c

00011a14 <sigaction@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #167936	; 0x29000
   11a1c:	ldr	pc, [ip, #1668]!	; 0x684

00011a20 <__memcpy_chk@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #167936	; 0x29000
   11a28:	ldr	pc, [ip, #1660]!	; 0x67c

00011a2c <fwrite@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #167936	; 0x29000
   11a34:	ldr	pc, [ip, #1652]!	; 0x674

00011a38 <ioctl@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #167936	; 0x29000
   11a40:	ldr	pc, [ip, #1644]!	; 0x66c

00011a44 <lseek64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #167936	; 0x29000
   11a4c:	ldr	pc, [ip, #1636]!	; 0x664

00011a50 <__ctype_get_mb_cur_max@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #167936	; 0x29000
   11a58:	ldr	pc, [ip, #1628]!	; 0x65c

00011a5c <strcpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #167936	; 0x29000
   11a64:	ldr	pc, [ip, #1620]!	; 0x654

00011a68 <__fpending@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #167936	; 0x29000
   11a70:	ldr	pc, [ip, #1612]!	; 0x64c

00011a74 <mbrtowc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #167936	; 0x29000
   11a7c:	ldr	pc, [ip, #1604]!	; 0x644

00011a80 <wcstombs@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #167936	; 0x29000
   11a88:	ldr	pc, [ip, #1596]!	; 0x63c

00011a8c <error@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #167936	; 0x29000
   11a94:	ldr	pc, [ip, #1588]!	; 0x634

00011a98 <gethostname@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #167936	; 0x29000
   11aa0:	ldr	pc, [ip, #1580]!	; 0x62c

00011aa4 <opendir@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #167936	; 0x29000
   11aac:	ldr	pc, [ip, #1572]!	; 0x624

00011ab0 <fnmatch@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #167936	; 0x29000
   11ab8:	ldr	pc, [ip, #1564]!	; 0x61c

00011abc <strcoll@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #167936	; 0x29000
   11ac4:	ldr	pc, [ip, #1556]!	; 0x614

00011ac8 <getenv@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #167936	; 0x29000
   11ad0:	ldr	pc, [ip, #1548]!	; 0x60c

00011ad4 <lgetfilecon@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #167936	; 0x29000
   11adc:	ldr	pc, [ip, #1540]!	; 0x604

00011ae0 <malloc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #167936	; 0x29000
   11ae8:	ldr	pc, [ip, #1532]!	; 0x5fc

00011aec <sigaddset@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #167936	; 0x29000
   11af4:	ldr	pc, [ip, #1524]!	; 0x5f4

00011af8 <__libc_start_main@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #167936	; 0x29000
   11b00:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b04 <strftime@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #167936	; 0x29000
   11b0c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b10 <__freading@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #167936	; 0x29000
   11b18:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b1c <__ctype_tolower_loc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #167936	; 0x29000
   11b24:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b28 <__ctype_toupper_loc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #167936	; 0x29000
   11b30:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b34 <__gmon_start__@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #167936	; 0x29000
   11b3c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b40 <mempcpy@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #167936	; 0x29000
   11b48:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b4c <getopt_long@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #167936	; 0x29000
   11b54:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b58 <__ctype_b_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #167936	; 0x29000
   11b60:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b64 <getcwd@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #167936	; 0x29000
   11b6c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b70 <exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #167936	; 0x29000
   11b78:	ldr	pc, [ip, #1436]!	; 0x59c

00011b7c <getfilecon@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #167936	; 0x29000
   11b84:	ldr	pc, [ip, #1428]!	; 0x594

00011b88 <tcgetpgrp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #167936	; 0x29000
   11b90:	ldr	pc, [ip, #1420]!	; 0x58c

00011b94 <strlen@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #167936	; 0x29000
   11b9c:	ldr	pc, [ip, #1412]!	; 0x584

00011ba0 <strchr@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #167936	; 0x29000
   11ba8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bac <setenv@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #167936	; 0x29000
   11bb4:	ldr	pc, [ip, #1396]!	; 0x574

00011bb8 <__errno_location@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #167936	; 0x29000
   11bc0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bc4 <__sprintf_chk@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #167936	; 0x29000
   11bcc:	ldr	pc, [ip, #1380]!	; 0x564

00011bd0 <snprintf@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #167936	; 0x29000
   11bd8:	ldr	pc, [ip, #1372]!	; 0x55c

00011bdc <__cxa_atexit@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #167936	; 0x29000
   11be4:	ldr	pc, [ip, #1364]!	; 0x554

00011be8 <memset@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #167936	; 0x29000
   11bf0:	ldr	pc, [ip, #1356]!	; 0x54c

00011bf4 <__printf_chk@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #167936	; 0x29000
   11bfc:	ldr	pc, [ip, #1348]!	; 0x544

00011c00 <stpncpy@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #167936	; 0x29000
   11c08:	ldr	pc, [ip, #1340]!	; 0x53c

00011c0c <fileno@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #167936	; 0x29000
   11c14:	ldr	pc, [ip, #1332]!	; 0x534

00011c18 <__fprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #167936	; 0x29000
   11c20:	ldr	pc, [ip, #1324]!	; 0x52c

00011c24 <fclose@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #167936	; 0x29000
   11c2c:	ldr	pc, [ip, #1316]!	; 0x524

00011c30 <fseeko64@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #167936	; 0x29000
   11c38:	ldr	pc, [ip, #1308]!	; 0x51c

00011c3c <statx@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #167936	; 0x29000
   11c44:	ldr	pc, [ip, #1300]!	; 0x514

00011c48 <__overflow@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #167936	; 0x29000
   11c50:	ldr	pc, [ip, #1292]!	; 0x50c

00011c54 <setlocale@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #167936	; 0x29000
   11c5c:	ldr	pc, [ip, #1284]!	; 0x504

00011c60 <sigemptyset@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #167936	; 0x29000
   11c68:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c6c <wcswidth@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #167936	; 0x29000
   11c74:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c78 <strrchr@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #167936	; 0x29000
   11c80:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c84 <cap_get_file@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #167936	; 0x29000
   11c8c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c90 <nl_langinfo@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #167936	; 0x29000
   11c98:	ldr	pc, [ip, #1244]!	; 0x4dc

00011c9c <localeconv@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #167936	; 0x29000
   11ca4:	ldr	pc, [ip, #1236]!	; 0x4d4

00011ca8 <mbstowcs@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #167936	; 0x29000
   11cb0:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cb4 <readdir64@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #167936	; 0x29000
   11cbc:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc0 <timegm@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #167936	; 0x29000
   11cc8:	ldr	pc, [ip, #1212]!	; 0x4bc

00011ccc <cap_free@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #167936	; 0x29000
   11cd4:	ldr	pc, [ip, #1204]!	; 0x4b4

00011cd8 <dirfd@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #167936	; 0x29000
   11ce0:	ldr	pc, [ip, #1196]!	; 0x4ac

00011ce4 <freecon@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #167936	; 0x29000
   11cec:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf0 <bindtextdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #167936	; 0x29000
   11cf8:	ldr	pc, [ip, #1180]!	; 0x49c

00011cfc <__xstat64@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #167936	; 0x29000
   11d04:	ldr	pc, [ip, #1172]!	; 0x494

00011d08 <isatty@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #167936	; 0x29000
   11d10:	ldr	pc, [ip, #1164]!	; 0x48c

00011d14 <unsetenv@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #167936	; 0x29000
   11d1c:	ldr	pc, [ip, #1156]!	; 0x484

00011d20 <strncmp@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #167936	; 0x29000
   11d28:	ldr	pc, [ip, #1148]!	; 0x47c

00011d2c <abort@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #167936	; 0x29000
   11d34:	ldr	pc, [ip, #1140]!	; 0x474

00011d38 <closedir@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #167936	; 0x29000
   11d40:	ldr	pc, [ip, #1132]!	; 0x46c

00011d44 <getgrgid@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #167936	; 0x29000
   11d4c:	ldr	pc, [ip, #1124]!	; 0x464

00011d50 <getgrnam@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #167936	; 0x29000
   11d58:	ldr	pc, [ip, #1116]!	; 0x45c

00011d5c <__snprintf_chk@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #167936	; 0x29000
   11d64:	ldr	pc, [ip, #1108]!	; 0x454

00011d68 <strspn@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #167936	; 0x29000
   11d70:	ldr	pc, [ip, #1100]!	; 0x44c

00011d74 <__assert_fail@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #167936	; 0x29000
   11d7c:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00011d80 <_obstack_begin@@Base-0xed4c>:
   11d80:	mov	fp, #0
   11d84:	mov	lr, #0
   11d88:	pop	{r1}		; (ldr r1, [sp], #4)
   11d8c:	mov	r2, sp
   11d90:	push	{r2}		; (str r2, [sp, #-4]!)
   11d94:	push	{r0}		; (str r0, [sp, #-4]!)
   11d98:	ldr	ip, [pc, #16]	; 11db0 <__assert_fail@plt+0x3c>
   11d9c:	push	{ip}		; (str ip, [sp, #-4]!)
   11da0:	ldr	r0, [pc, #12]	; 11db4 <__assert_fail@plt+0x40>
   11da4:	ldr	r3, [pc, #12]	; 11db8 <__assert_fail@plt+0x44>
   11da8:	bl	11af8 <__libc_start_main@plt>
   11dac:	bl	11d2c <abort@plt>
   11db0:	andeq	r5, r2, r8, lsr #16
   11db4:	andeq	r8, r1, ip, lsl #14
   11db8:	andeq	r5, r2, r8, asr #15
   11dbc:	ldr	r3, [pc, #20]	; 11dd8 <__assert_fail@plt+0x64>
   11dc0:	ldr	r2, [pc, #20]	; 11ddc <__assert_fail@plt+0x68>
   11dc4:	add	r3, pc, r3
   11dc8:	ldr	r2, [r3, r2]
   11dcc:	cmp	r2, #0
   11dd0:	bxeq	lr
   11dd4:	b	11b34 <__gmon_start__@plt>
   11dd8:	andeq	r9, r2, r4, lsr r2
   11ddc:	andeq	r0, r0, r4, asr #3
   11de0:	ldr	r0, [pc, #24]	; 11e00 <__assert_fail@plt+0x8c>
   11de4:	ldr	r3, [pc, #24]	; 11e04 <__assert_fail@plt+0x90>
   11de8:	cmp	r3, r0
   11dec:	bxeq	lr
   11df0:	ldr	r3, [pc, #16]	; 11e08 <__assert_fail@plt+0x94>
   11df4:	cmp	r3, #0
   11df8:	bxeq	lr
   11dfc:	bx	r3
   11e00:	andeq	fp, r3, ip, lsl #6
   11e04:	andeq	fp, r3, ip, lsl #6
   11e08:	andeq	r0, r0, r0
   11e0c:	ldr	r0, [pc, #36]	; 11e38 <__assert_fail@plt+0xc4>
   11e10:	ldr	r1, [pc, #36]	; 11e3c <__assert_fail@plt+0xc8>
   11e14:	sub	r1, r1, r0
   11e18:	asr	r1, r1, #2
   11e1c:	add	r1, r1, r1, lsr #31
   11e20:	asrs	r1, r1, #1
   11e24:	bxeq	lr
   11e28:	ldr	r3, [pc, #16]	; 11e40 <__assert_fail@plt+0xcc>
   11e2c:	cmp	r3, #0
   11e30:	bxeq	lr
   11e34:	bx	r3
   11e38:	andeq	fp, r3, ip, lsl #6
   11e3c:	andeq	fp, r3, ip, lsl #6
   11e40:	andeq	r0, r0, r0
   11e44:	push	{r4, lr}
   11e48:	ldr	r4, [pc, #24]	; 11e68 <__assert_fail@plt+0xf4>
   11e4c:	ldrb	r3, [r4]
   11e50:	cmp	r3, #0
   11e54:	popne	{r4, pc}
   11e58:	bl	11de0 <__assert_fail@plt+0x6c>
   11e5c:	mov	r3, #1
   11e60:	strb	r3, [r4]
   11e64:	pop	{r4, pc}
   11e68:	andeq	fp, r3, ip, lsr #6
   11e6c:	b	11e0c <__assert_fail@plt+0x98>
   11e70:	str	r4, [sp, #-8]!
   11e74:	str	lr, [sp, #4]
   11e78:	mov	r2, r1
   11e7c:	mov	r3, #0
   11e80:	ldrd	r0, [r0]
   11e84:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   11e88:	mov	r0, r2
   11e8c:	ldr	r4, [sp]
   11e90:	add	sp, sp, #4
   11e94:	pop	{pc}		; (ldr pc, [sp], #4)
   11e98:	strd	r4, [sp, #-8]!
   11e9c:	ldrd	r4, [r0]
   11ea0:	ldrd	r2, [r1]
   11ea4:	cmp	r5, r3
   11ea8:	cmpeq	r4, r2
   11eac:	movne	r0, #0
   11eb0:	beq	11ec0 <__assert_fail@plt+0x14c>
   11eb4:	ldrd	r4, [sp]
   11eb8:	add	sp, sp, #8
   11ebc:	bx	lr
   11ec0:	ldrd	r4, [r0, #8]
   11ec4:	ldrd	r2, [r1, #8]
   11ec8:	cmp	r5, r3
   11ecc:	cmpeq	r4, r2
   11ed0:	moveq	r0, #1
   11ed4:	movne	r0, #0
   11ed8:	b	11eb4 <__assert_fail@plt+0x140>
   11edc:	movw	r3, #45872	; 0xb330
   11ee0:	movt	r3, #3
   11ee4:	ldr	r3, [r3]
   11ee8:	cmp	r3, #0
   11eec:	bne	11efc <__assert_fail@plt+0x188>
   11ef0:	movw	r3, #45872	; 0xb330
   11ef4:	movt	r3, #3
   11ef8:	str	r0, [r3]
   11efc:	bx	lr
   11f00:	movw	r3, #45872	; 0xb330
   11f04:	movt	r3, #3
   11f08:	ldr	r3, [r3]
   11f0c:	cmp	r3, #0
   11f10:	bne	11f28 <__assert_fail@plt+0x1b4>
   11f14:	movw	r3, #45872	; 0xb330
   11f18:	movt	r3, #3
   11f1c:	ldr	r2, [r3, #4]
   11f20:	add	r2, r2, #1
   11f24:	str	r2, [r3, #4]
   11f28:	bx	lr
   11f2c:	sub	r3, r0, #22
   11f30:	bic	r3, r3, #16
   11f34:	cmp	r3, #0
   11f38:	cmpne	r0, #95	; 0x5f
   11f3c:	moveq	r0, #1
   11f40:	movne	r0, #0
   11f44:	bx	lr
   11f48:	strd	r4, [sp, #-16]!
   11f4c:	str	r6, [sp, #8]
   11f50:	str	lr, [sp, #12]
   11f54:	mov	lr, r0
   11f58:	ldr	r0, [r1, #104]	; 0x68
   11f5c:	ldr	r5, [r1, #108]	; 0x6c
   11f60:	ldr	r3, [lr, #104]	; 0x68
   11f64:	ldr	r4, [lr, #108]	; 0x6c
   11f68:	cmp	r0, r3
   11f6c:	movgt	ip, #1
   11f70:	movle	ip, #0
   11f74:	movlt	r0, #1
   11f78:	movge	r0, #0
   11f7c:	sub	ip, ip, r0
   11f80:	cmp	r5, r4
   11f84:	movgt	r3, #1
   11f88:	movle	r3, #0
   11f8c:	movlt	r0, #1
   11f90:	movge	r0, #0
   11f94:	sub	r3, r3, r0
   11f98:	adds	r0, r3, ip, lsl #1
   11f9c:	bne	11fac <__assert_fail@plt+0x238>
   11fa0:	ldr	r1, [r1]
   11fa4:	ldr	r0, [lr]
   11fa8:	blx	r2
   11fac:	ldrd	r4, [sp]
   11fb0:	ldr	r6, [sp, #8]
   11fb4:	add	sp, sp, #12
   11fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fbc:	strd	r4, [sp, #-16]!
   11fc0:	str	r6, [sp, #8]
   11fc4:	str	lr, [sp, #12]
   11fc8:	mov	lr, r0
   11fcc:	ldr	r0, [r1, #96]	; 0x60
   11fd0:	ldr	r5, [r1, #100]	; 0x64
   11fd4:	ldr	r3, [lr, #96]	; 0x60
   11fd8:	ldr	r4, [lr, #100]	; 0x64
   11fdc:	cmp	r0, r3
   11fe0:	movgt	ip, #1
   11fe4:	movle	ip, #0
   11fe8:	movlt	r0, #1
   11fec:	movge	r0, #0
   11ff0:	sub	ip, ip, r0
   11ff4:	cmp	r5, r4
   11ff8:	movgt	r3, #1
   11ffc:	movle	r3, #0
   12000:	movlt	r0, #1
   12004:	movge	r0, #0
   12008:	sub	r3, r3, r0
   1200c:	adds	r0, r3, ip, lsl #1
   12010:	bne	12020 <__assert_fail@plt+0x2ac>
   12014:	ldr	r1, [r1]
   12018:	ldr	r0, [lr]
   1201c:	blx	r2
   12020:	ldrd	r4, [sp]
   12024:	ldr	r6, [sp, #8]
   12028:	add	sp, sp, #12
   1202c:	pop	{pc}		; (ldr pc, [sp], #4)
   12030:	strd	r4, [sp, #-16]!
   12034:	str	r6, [sp, #8]
   12038:	str	lr, [sp, #12]
   1203c:	mov	lr, r0
   12040:	ldr	r0, [r1, #88]	; 0x58
   12044:	ldr	r5, [r1, #92]	; 0x5c
   12048:	ldr	r3, [lr, #88]	; 0x58
   1204c:	ldr	r4, [lr, #92]	; 0x5c
   12050:	cmp	r0, r3
   12054:	movgt	ip, #1
   12058:	movle	ip, #0
   1205c:	movlt	r0, #1
   12060:	movge	r0, #0
   12064:	sub	ip, ip, r0
   12068:	cmp	r5, r4
   1206c:	movgt	r3, #1
   12070:	movle	r3, #0
   12074:	movlt	r0, #1
   12078:	movge	r0, #0
   1207c:	sub	r3, r3, r0
   12080:	adds	r0, r3, ip, lsl #1
   12084:	bne	12094 <__assert_fail@plt+0x320>
   12088:	ldr	r1, [r1]
   1208c:	ldr	r0, [lr]
   12090:	blx	r2
   12094:	ldrd	r4, [sp]
   12098:	ldr	r6, [sp, #8]
   1209c:	add	sp, sp, #12
   120a0:	pop	{pc}		; (ldr pc, [sp], #4)
   120a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   120a8:	strd	r6, [sp, #8]
   120ac:	str	r8, [sp, #16]
   120b0:	str	lr, [sp, #20]
   120b4:	ldrd	r4, [r1, #64]	; 0x40
   120b8:	ldrd	r6, [r0, #64]	; 0x40
   120bc:	cmp	r4, r6
   120c0:	sbcs	r3, r5, r7
   120c4:	mvnlt	r0, #0
   120c8:	blt	120e4 <__assert_fail@plt+0x370>
   120cc:	cmp	r5, r7
   120d0:	cmpeq	r4, r6
   120d4:	bne	120f8 <__assert_fail@plt+0x384>
   120d8:	ldr	r1, [r1]
   120dc:	ldr	r0, [r0]
   120e0:	blx	r2
   120e4:	ldrd	r4, [sp]
   120e8:	ldrd	r6, [sp, #8]
   120ec:	ldr	r8, [sp, #16]
   120f0:	add	sp, sp, #20
   120f4:	pop	{pc}		; (ldr pc, [sp], #4)
   120f8:	cmp	r6, r4
   120fc:	sbcs	r3, r7, r5
   12100:	movlt	r0, #1
   12104:	movge	r0, #0
   12108:	b	120e4 <__assert_fail@plt+0x370>
   1210c:	str	r4, [sp, #-8]!
   12110:	str	lr, [sp, #4]
   12114:	movw	r2, #13232	; 0x33b0
   12118:	movt	r2, #1
   1211c:	bl	11f48 <__assert_fail@plt+0x1d4>
   12120:	ldr	r4, [sp]
   12124:	add	sp, sp, #4
   12128:	pop	{pc}		; (ldr pc, [sp], #4)
   1212c:	str	r4, [sp, #-8]!
   12130:	str	lr, [sp, #4]
   12134:	movw	r2, #6304	; 0x18a0
   12138:	movt	r2, #1
   1213c:	bl	11f48 <__assert_fail@plt+0x1d4>
   12140:	ldr	r4, [sp]
   12144:	add	sp, sp, #4
   12148:	pop	{pc}		; (ldr pc, [sp], #4)
   1214c:	str	r4, [sp, #-8]!
   12150:	str	lr, [sp, #4]
   12154:	mov	r3, r1
   12158:	movw	r2, #13232	; 0x33b0
   1215c:	movt	r2, #1
   12160:	mov	r1, r0
   12164:	mov	r0, r3
   12168:	bl	11f48 <__assert_fail@plt+0x1d4>
   1216c:	ldr	r4, [sp]
   12170:	add	sp, sp, #4
   12174:	pop	{pc}		; (ldr pc, [sp], #4)
   12178:	str	r4, [sp, #-8]!
   1217c:	str	lr, [sp, #4]
   12180:	mov	r3, r1
   12184:	movw	r2, #6304	; 0x18a0
   12188:	movt	r2, #1
   1218c:	mov	r1, r0
   12190:	mov	r0, r3
   12194:	bl	11f48 <__assert_fail@plt+0x1d4>
   12198:	ldr	r4, [sp]
   1219c:	add	sp, sp, #4
   121a0:	pop	{pc}		; (ldr pc, [sp], #4)
   121a4:	str	r4, [sp, #-8]!
   121a8:	str	lr, [sp, #4]
   121ac:	movw	r2, #13232	; 0x33b0
   121b0:	movt	r2, #1
   121b4:	bl	11fbc <__assert_fail@plt+0x248>
   121b8:	ldr	r4, [sp]
   121bc:	add	sp, sp, #4
   121c0:	pop	{pc}		; (ldr pc, [sp], #4)
   121c4:	str	r4, [sp, #-8]!
   121c8:	str	lr, [sp, #4]
   121cc:	movw	r2, #6304	; 0x18a0
   121d0:	movt	r2, #1
   121d4:	bl	11fbc <__assert_fail@plt+0x248>
   121d8:	ldr	r4, [sp]
   121dc:	add	sp, sp, #4
   121e0:	pop	{pc}		; (ldr pc, [sp], #4)
   121e4:	str	r4, [sp, #-8]!
   121e8:	str	lr, [sp, #4]
   121ec:	mov	r3, r1
   121f0:	movw	r2, #13232	; 0x33b0
   121f4:	movt	r2, #1
   121f8:	mov	r1, r0
   121fc:	mov	r0, r3
   12200:	bl	11fbc <__assert_fail@plt+0x248>
   12204:	ldr	r4, [sp]
   12208:	add	sp, sp, #4
   1220c:	pop	{pc}		; (ldr pc, [sp], #4)
   12210:	str	r4, [sp, #-8]!
   12214:	str	lr, [sp, #4]
   12218:	mov	r3, r1
   1221c:	movw	r2, #6304	; 0x18a0
   12220:	movt	r2, #1
   12224:	mov	r1, r0
   12228:	mov	r0, r3
   1222c:	bl	11fbc <__assert_fail@plt+0x248>
   12230:	ldr	r4, [sp]
   12234:	add	sp, sp, #4
   12238:	pop	{pc}		; (ldr pc, [sp], #4)
   1223c:	str	r4, [sp, #-8]!
   12240:	str	lr, [sp, #4]
   12244:	movw	r2, #13232	; 0x33b0
   12248:	movt	r2, #1
   1224c:	bl	12030 <__assert_fail@plt+0x2bc>
   12250:	ldr	r4, [sp]
   12254:	add	sp, sp, #4
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	str	r4, [sp, #-8]!
   12260:	str	lr, [sp, #4]
   12264:	movw	r2, #6304	; 0x18a0
   12268:	movt	r2, #1
   1226c:	bl	12030 <__assert_fail@plt+0x2bc>
   12270:	ldr	r4, [sp]
   12274:	add	sp, sp, #4
   12278:	pop	{pc}		; (ldr pc, [sp], #4)
   1227c:	str	r4, [sp, #-8]!
   12280:	str	lr, [sp, #4]
   12284:	mov	r3, r1
   12288:	movw	r2, #13232	; 0x33b0
   1228c:	movt	r2, #1
   12290:	mov	r1, r0
   12294:	mov	r0, r3
   12298:	bl	12030 <__assert_fail@plt+0x2bc>
   1229c:	ldr	r4, [sp]
   122a0:	add	sp, sp, #4
   122a4:	pop	{pc}		; (ldr pc, [sp], #4)
   122a8:	str	r4, [sp, #-8]!
   122ac:	str	lr, [sp, #4]
   122b0:	mov	r3, r1
   122b4:	movw	r2, #6304	; 0x18a0
   122b8:	movt	r2, #1
   122bc:	mov	r1, r0
   122c0:	mov	r0, r3
   122c4:	bl	12030 <__assert_fail@plt+0x2bc>
   122c8:	ldr	r4, [sp]
   122cc:	add	sp, sp, #4
   122d0:	pop	{pc}		; (ldr pc, [sp], #4)
   122d4:	str	r4, [sp, #-8]!
   122d8:	str	lr, [sp, #4]
   122dc:	movw	r2, #13232	; 0x33b0
   122e0:	movt	r2, #1
   122e4:	bl	120a4 <__assert_fail@plt+0x330>
   122e8:	ldr	r4, [sp]
   122ec:	add	sp, sp, #4
   122f0:	pop	{pc}		; (ldr pc, [sp], #4)
   122f4:	str	r4, [sp, #-8]!
   122f8:	str	lr, [sp, #4]
   122fc:	movw	r2, #6304	; 0x18a0
   12300:	movt	r2, #1
   12304:	bl	120a4 <__assert_fail@plt+0x330>
   12308:	ldr	r4, [sp]
   1230c:	add	sp, sp, #4
   12310:	pop	{pc}		; (ldr pc, [sp], #4)
   12314:	str	r4, [sp, #-8]!
   12318:	str	lr, [sp, #4]
   1231c:	mov	r3, r1
   12320:	movw	r2, #13232	; 0x33b0
   12324:	movt	r2, #1
   12328:	mov	r1, r0
   1232c:	mov	r0, r3
   12330:	bl	120a4 <__assert_fail@plt+0x330>
   12334:	ldr	r4, [sp]
   12338:	add	sp, sp, #4
   1233c:	pop	{pc}		; (ldr pc, [sp], #4)
   12340:	str	r4, [sp, #-8]!
   12344:	str	lr, [sp, #4]
   12348:	mov	r3, r1
   1234c:	movw	r2, #6304	; 0x18a0
   12350:	movt	r2, #1
   12354:	mov	r1, r0
   12358:	mov	r0, r3
   1235c:	bl	120a4 <__assert_fail@plt+0x330>
   12360:	ldr	r4, [sp]
   12364:	add	sp, sp, #4
   12368:	pop	{pc}		; (ldr pc, [sp], #4)
   1236c:	str	r4, [sp, #-8]!
   12370:	str	lr, [sp, #4]
   12374:	ldr	r1, [r1]
   12378:	ldr	r0, [r0]
   1237c:	bl	133b0 <__assert_fail@plt+0x163c>
   12380:	ldr	r4, [sp]
   12384:	add	sp, sp, #4
   12388:	pop	{pc}		; (ldr pc, [sp], #4)
   1238c:	movw	r3, #45872	; 0xb330
   12390:	movt	r3, #3
   12394:	ldr	r1, [r3, #8]
   12398:	cmp	r1, #0
   1239c:	beq	123c4 <__assert_fail@plt+0x650>
   123a0:	movw	r3, #45872	; 0xb330
   123a4:	movt	r3, #3
   123a8:	ldr	r2, [r3, #12]
   123ac:	ldr	r3, [r3, #16]
   123b0:	add	r1, r3, r1, lsl #2
   123b4:	str	r2, [r3], #4
   123b8:	add	r2, r2, #152	; 0x98
   123bc:	cmp	r3, r1
   123c0:	bne	123b4 <__assert_fail@plt+0x640>
   123c4:	bx	lr
   123c8:	cmp	r0, #0
   123cc:	beq	12440 <__assert_fail@plt+0x6cc>
   123d0:	and	r3, r1, #61440	; 0xf000
   123d4:	cmp	r3, #32768	; 0x8000
   123d8:	beq	1245c <__assert_fail@plt+0x6e8>
   123dc:	and	r3, r1, #61440	; 0xf000
   123e0:	cmp	r3, #16384	; 0x4000
   123e4:	movne	r3, #0
   123e8:	moveq	r3, #1
   123ec:	cmp	r3, #0
   123f0:	bne	124b4 <__assert_fail@plt+0x740>
   123f4:	movw	r3, #45872	; 0xb330
   123f8:	movt	r3, #3
   123fc:	ldr	r3, [r3, #20]
   12400:	cmp	r3, #1
   12404:	beq	124bc <__assert_fail@plt+0x748>
   12408:	cmp	r0, #0
   1240c:	beq	1248c <__assert_fail@plt+0x718>
   12410:	and	r1, r1, #61440	; 0xf000
   12414:	cmp	r1, #40960	; 0xa000
   12418:	beq	124c4 <__assert_fail@plt+0x750>
   1241c:	cmp	r1, #4096	; 0x1000
   12420:	beq	124d4 <__assert_fail@plt+0x760>
   12424:	cmp	r1, #49152	; 0xc000
   12428:	movne	r1, #0
   1242c:	moveq	r1, #1
   12430:	cmp	r1, #0
   12434:	movne	r0, #61	; 0x3d
   12438:	moveq	r0, #0
   1243c:	bx	lr
   12440:	cmp	r2, #5
   12444:	beq	124ac <__assert_fail@plt+0x738>
   12448:	cmp	r2, #9
   1244c:	cmpne	r2, #3
   12450:	moveq	r3, #1
   12454:	movne	r3, #0
   12458:	b	123ec <__assert_fail@plt+0x678>
   1245c:	movw	r3, #45872	; 0xb330
   12460:	movt	r3, #3
   12464:	ldr	r3, [r3, #20]
   12468:	cmp	r3, #3
   1246c:	beq	12478 <__assert_fail@plt+0x704>
   12470:	mov	r0, #0
   12474:	bx	lr
   12478:	and	r1, r1, #73	; 0x49
   1247c:	cmp	r1, #0
   12480:	moveq	r0, #0
   12484:	movne	r0, #42	; 0x2a
   12488:	bx	lr
   1248c:	cmp	r2, #6
   12490:	beq	124cc <__assert_fail@plt+0x758>
   12494:	cmp	r2, #1
   12498:	beq	124dc <__assert_fail@plt+0x768>
   1249c:	cmp	r2, #7
   124a0:	movne	r1, #0
   124a4:	moveq	r1, #1
   124a8:	b	12430 <__assert_fail@plt+0x6bc>
   124ac:	mov	r0, #0
   124b0:	bx	lr
   124b4:	mov	r0, #47	; 0x2f
   124b8:	bx	lr
   124bc:	mov	r0, #0
   124c0:	bx	lr
   124c4:	mov	r0, #64	; 0x40
   124c8:	bx	lr
   124cc:	mov	r0, #64	; 0x40
   124d0:	bx	lr
   124d4:	mov	r0, #124	; 0x7c
   124d8:	bx	lr
   124dc:	mov	r0, #124	; 0x7c
   124e0:	bx	lr
   124e4:	str	r4, [sp, #-8]!
   124e8:	str	lr, [sp, #4]
   124ec:	bl	1c200 <__assert_fail@plt+0xa48c>
   124f0:	ldr	r4, [sp]
   124f4:	add	sp, sp, #4
   124f8:	pop	{pc}		; (ldr pc, [sp], #4)
   124fc:	str	r4, [sp, #-8]!
   12500:	str	lr, [sp, #4]
   12504:	mov	r4, r0
   12508:	mov	r0, #8
   1250c:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   12510:	str	r4, [r0]
   12514:	movw	r3, #45872	; 0xb330
   12518:	movt	r3, #3
   1251c:	ldr	r2, [r3, #24]
   12520:	str	r2, [r0, #4]
   12524:	str	r0, [r3, #24]
   12528:	ldr	r4, [sp]
   1252c:	add	sp, sp, #4
   12530:	pop	{pc}		; (ldr pc, [sp], #4)
   12534:	push	{lr}		; (str lr, [sp, #-4]!)
   12538:	sub	sp, sp, #20
   1253c:	movw	r3, #39300	; 0x9984
   12540:	movt	r3, #2
   12544:	str	r3, [sp]
   12548:	add	r3, sp, #8
   1254c:	mov	r2, #0
   12550:	mov	r1, r2
   12554:	bl	247f8 <_obstack_memory_used@@Base+0x3ae8>
   12558:	cmp	r0, #0
   1255c:	beq	12574 <__assert_fail@plt+0x800>
   12560:	cmp	r0, #1
   12564:	moveq	r0, #0
   12568:	mvnne	r0, #0
   1256c:	add	sp, sp, #20
   12570:	pop	{pc}		; (ldr pc, [sp], #4)
   12574:	ldrd	r0, [sp, #8]
   12578:	mvn	r2, #-2147483648	; 0x80000000
   1257c:	mov	r3, #0
   12580:	cmp	r1, r3
   12584:	cmpeq	r0, r2
   12588:	movhi	r0, #0
   1258c:	b	1256c <__assert_fail@plt+0x7f8>
   12590:	movw	r3, #45520	; 0xb1d0
   12594:	movt	r3, #3
   12598:	ldr	r2, [r3, r0, lsl #3]
   1259c:	cmp	r2, #0
   125a0:	beq	12604 <__assert_fail@plt+0x890>
   125a4:	movw	r3, #45520	; 0xb1d0
   125a8:	movt	r3, #3
   125ac:	add	r3, r3, r0, lsl #3
   125b0:	ldr	r0, [r3, #4]
   125b4:	cmp	r2, #1
   125b8:	beq	125cc <__assert_fail@plt+0x858>
   125bc:	cmp	r2, #2
   125c0:	beq	125dc <__assert_fail@plt+0x868>
   125c4:	mov	r0, #1
   125c8:	bx	lr
   125cc:	ldrb	r0, [r0]
   125d0:	subs	r0, r0, #48	; 0x30
   125d4:	movne	r0, #1
   125d8:	bx	lr
   125dc:	str	r4, [sp, #-8]!
   125e0:	str	lr, [sp, #4]
   125e4:	movw	r1, #28556	; 0x6f8c
   125e8:	movt	r1, #2
   125ec:	bl	11d20 <strncmp@plt>
   125f0:	adds	r0, r0, #0
   125f4:	movne	r0, #1
   125f8:	ldr	r4, [sp]
   125fc:	add	sp, sp, #4
   12600:	pop	{pc}		; (ldr pc, [sp], #4)
   12604:	mov	r0, #0
   12608:	bx	lr
   1260c:	str	r4, [sp, #-8]!
   12610:	str	lr, [sp, #4]
   12614:	movw	r3, #45520	; 0xb1d0
   12618:	movt	r3, #3
   1261c:	ldrsb	r3, [r3, #192]	; 0xc0
   12620:	cmp	r3, #0
   12624:	blt	12648 <__assert_fail@plt+0x8d4>
   12628:	movw	r3, #45520	; 0xb1d0
   1262c:	movt	r3, #3
   12630:	ldrsb	r0, [r3, #192]	; 0xc0
   12634:	adds	r0, r0, #0
   12638:	movne	r0, #1
   1263c:	ldr	r4, [sp]
   12640:	add	sp, sp, #4
   12644:	pop	{pc}		; (ldr pc, [sp], #4)
   12648:	mov	r0, #1
   1264c:	bl	11d08 <isatty@plt>
   12650:	movw	r3, #45520	; 0xb1d0
   12654:	movt	r3, #3
   12658:	strb	r0, [r3, #192]	; 0xc0
   1265c:	b	12628 <__assert_fail@plt+0x8b4>
   12660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12664:	strd	r6, [sp, #8]
   12668:	strd	r8, [sp, #16]
   1266c:	strd	sl, [sp, #24]
   12670:	str	lr, [sp, #32]
   12674:	sub	sp, sp, #1584	; 0x630
   12678:	sub	sp, sp, #4
   1267c:	movw	r3, #45520	; 0xb1d0
   12680:	movt	r3, #3
   12684:	add	r8, r3, #196	; 0xc4
   12688:	add	sl, sp, #1568	; 0x620
   1268c:	add	sl, sl, #8
   12690:	add	r0, r3, #204	; 0xcc
   12694:	mov	lr, sl
   12698:	mov	ip, r8
   1269c:	b	126e0 <__assert_fail@plt+0x96c>
   126a0:	add	r3, r3, #1
   126a4:	add	r1, r3, #1
   126a8:	ldrb	r2, [r3, #1]
   126ac:	cmp	r2, #0
   126b0:	beq	126f8 <__assert_fail@plt+0x984>
   126b4:	mov	r3, r1
   126b8:	cmp	r2, #37	; 0x25
   126bc:	bne	126a4 <__assert_fail@plt+0x930>
   126c0:	ldrb	r2, [r3, #1]
   126c4:	cmp	r2, #37	; 0x25
   126c8:	beq	126a0 <__assert_fail@plt+0x92c>
   126cc:	cmp	r2, #98	; 0x62
   126d0:	bne	126a4 <__assert_fail@plt+0x930>
   126d4:	str	r3, [lr], #4
   126d8:	cmp	ip, r0
   126dc:	beq	12700 <__assert_fail@plt+0x98c>
   126e0:	ldr	r3, [ip], #4
   126e4:	ldrb	r2, [r3]
   126e8:	cmp	r2, #0
   126ec:	bne	126b8 <__assert_fail@plt+0x944>
   126f0:	mov	r3, #0
   126f4:	b	126d4 <__assert_fail@plt+0x960>
   126f8:	mov	r3, #0
   126fc:	b	126d4 <__assert_fail@plt+0x960>
   12700:	ldr	r3, [sp, #1576]	; 0x628
   12704:	cmp	r3, #0
   12708:	movne	r9, #12
   1270c:	beq	12724 <__assert_fail@plt+0x9b0>
   12710:	mov	fp, #26
   12714:	movt	fp, #2
   12718:	add	r3, sp, #36	; 0x24
   1271c:	str	r3, [sp, #24]
   12720:	b	1273c <__assert_fail@plt+0x9c8>
   12724:	ldr	r3, [sp, #1580]	; 0x62c
   12728:	cmp	r3, #0
   1272c:	movne	r9, #12
   12730:	bne	12710 <__assert_fail@plt+0x99c>
   12734:	b	128a8 <__assert_fail@plt+0xb34>
   12738:	mov	r9, r5
   1273c:	add	r6, sp, #40	; 0x28
   12740:	mov	r4, #14
   12744:	movt	r4, #2
   12748:	mov	r5, #0
   1274c:	str	r9, [sp, #36]	; 0x24
   12750:	mov	r0, r4
   12754:	bl	11c90 <nl_langinfo@plt>
   12758:	mov	r7, r0
   1275c:	mov	r1, #37	; 0x25
   12760:	bl	11ba0 <strchr@plt>
   12764:	cmp	r0, #0
   12768:	bne	128a8 <__assert_fail@plt+0xb34>
   1276c:	bl	11b58 <__ctype_b_loc@plt>
   12770:	mov	r3, #0
   12774:	str	r3, [sp, #4]
   12778:	ldrb	r3, [r7]
   1277c:	ldr	r2, [r0]
   12780:	lsl	r3, r3, #1
   12784:	ldrh	r3, [r2, r3]
   12788:	ubfx	r3, r3, #11, #1
   1278c:	str	r3, [sp]
   12790:	ldr	r3, [sp, #24]
   12794:	mov	r2, #128	; 0x80
   12798:	mov	r1, r6
   1279c:	mov	r0, r7
   127a0:	bl	1e5f4 <__assert_fail@plt+0xc880>
   127a4:	cmp	r0, #127	; 0x7f
   127a8:	bhi	128a8 <__assert_fail@plt+0xb34>
   127ac:	ldr	r3, [sp, #36]	; 0x24
   127b0:	cmp	r5, r3
   127b4:	movcc	r5, r3
   127b8:	add	r4, r4, #1
   127bc:	add	r6, r6, #128	; 0x80
   127c0:	cmp	r4, fp
   127c4:	bne	1274c <__assert_fail@plt+0x9d8>
   127c8:	cmp	r9, r5
   127cc:	bhi	12738 <__assert_fail@plt+0x9c4>
   127d0:	ldr	r3, [pc, #240]	; 128c8 <__assert_fail@plt+0xb54>
   127d4:	str	r3, [sp, #24]
   127d8:	mov	fp, #0
   127dc:	movw	r3, #37260	; 0x918c
   127e0:	movt	r3, #2
   127e4:	str	r3, [sp, #28]
   127e8:	movw	r9, #28560	; 0x6f90
   127ec:	movt	r9, #2
   127f0:	b	12880 <__assert_fail@plt+0xb0c>
   127f4:	mov	r3, r6
   127f8:	ldr	r2, [sp, #28]
   127fc:	mov	r1, #128	; 0x80
   12800:	bl	11bd0 <snprintf@plt>
   12804:	cmp	r0, #127	; 0x7f
   12808:	bhi	128a8 <__assert_fail@plt+0xb34>
   1280c:	add	r5, r5, #128	; 0x80
   12810:	add	r4, r4, #128	; 0x80
   12814:	cmp	r7, r4
   12818:	beq	12864 <__assert_fail@plt+0xaf0>
   1281c:	mov	r0, r5
   12820:	ldr	r3, [sl]
   12824:	cmp	r3, #0
   12828:	beq	127f4 <__assert_fail@plt+0xa80>
   1282c:	sub	r2, r3, r6
   12830:	cmp	r2, #128	; 0x80
   12834:	bgt	128a8 <__assert_fail@plt+0xb34>
   12838:	add	r3, r3, #2
   1283c:	str	r3, [sp, #16]
   12840:	str	r4, [sp, #12]
   12844:	str	r6, [sp, #8]
   12848:	str	r2, [sp, #4]
   1284c:	str	r9, [sp]
   12850:	mvn	r3, #0
   12854:	mov	r2, #1
   12858:	mov	r1, #128	; 0x80
   1285c:	bl	11d5c <__snprintf_chk@plt>
   12860:	b	12804 <__assert_fail@plt+0xa90>
   12864:	add	fp, fp, #1
   12868:	ldr	r3, [sp, #24]
   1286c:	add	r3, r3, #1536	; 0x600
   12870:	str	r3, [sp, #24]
   12874:	add	sl, sl, #4
   12878:	cmp	fp, #2
   1287c:	beq	12898 <__assert_fail@plt+0xb24>
   12880:	ldr	r6, [r8], #4
   12884:	add	r3, sp, #40	; 0x28
   12888:	add	r7, r3, #1536	; 0x600
   1288c:	mov	r4, r3
   12890:	ldr	r5, [sp, #24]
   12894:	b	1281c <__assert_fail@plt+0xaa8>
   12898:	movw	r3, #45872	; 0xb330
   1289c:	movt	r3, #3
   128a0:	mov	r2, #1
   128a4:	strb	r2, [r3, #3100]	; 0xc1c
   128a8:	add	sp, sp, #1584	; 0x630
   128ac:	add	sp, sp, #4
   128b0:	ldrd	r4, [sp]
   128b4:	ldrd	r6, [sp, #8]
   128b8:	ldrd	r8, [sp, #16]
   128bc:	ldrd	sl, [sp, #24]
   128c0:	add	sp, sp, #32
   128c4:	pop	{pc}		; (ldr pc, [sp], #4)
   128c8:	andeq	fp, r3, ip, asr #6
   128cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   128d0:	strd	r6, [sp, #8]
   128d4:	str	r8, [sp, #16]
   128d8:	str	lr, [sp, #20]
   128dc:	mov	r5, r0
   128e0:	mov	r6, r1
   128e4:	mov	r7, r2
   128e8:	mov	r0, #16
   128ec:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   128f0:	mov	r4, r0
   128f4:	cmp	r6, #0
   128f8:	beq	12908 <__assert_fail@plt+0xb94>
   128fc:	mov	r0, r6
   12900:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   12904:	mov	r6, r0
   12908:	str	r6, [r4, #4]
   1290c:	cmp	r5, #0
   12910:	beq	12920 <__assert_fail@plt+0xbac>
   12914:	mov	r0, r5
   12918:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   1291c:	mov	r5, r0
   12920:	str	r5, [r4]
   12924:	strb	r7, [r4, #8]
   12928:	movw	r3, #45872	; 0xb330
   1292c:	movt	r3, #3
   12930:	ldr	r2, [r3, #3104]	; 0xc20
   12934:	str	r2, [r4, #12]
   12938:	str	r4, [r3, #3104]	; 0xc20
   1293c:	ldrd	r4, [sp]
   12940:	ldrd	r6, [sp, #8]
   12944:	ldr	r8, [sp, #16]
   12948:	add	sp, sp, #20
   1294c:	pop	{pc}		; (ldr pc, [sp], #4)
   12950:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12954:	strd	r6, [sp, #8]
   12958:	strd	r8, [sp, #16]
   1295c:	strd	sl, [sp, #24]
   12960:	str	lr, [sp, #32]
   12964:	sub	sp, sp, #4
   12968:	ldr	r5, [r1]
   1296c:	ldr	r4, [r0]
   12970:	mov	lr, #0
   12974:	mov	r7, lr
   12978:	mov	ip, lr
   1297c:	mov	r9, #127	; 0x7f
   12980:	mov	r8, lr
   12984:	mov	sl, #3
   12988:	b	12c68 <__assert_fail@plt+0xef4>
   1298c:	ldrb	r6, [r5]
   12990:	cmp	r6, #61	; 0x3d
   12994:	beq	129e0 <__assert_fail@plt+0xc6c>
   12998:	bls	129c0 <__assert_fail@plt+0xc4c>
   1299c:	cmp	r6, #92	; 0x5c
   129a0:	addeq	r5, r5, #1
   129a4:	moveq	lr, #1
   129a8:	beq	12c68 <__assert_fail@plt+0xef4>
   129ac:	cmp	r6, #94	; 0x5e
   129b0:	addeq	r5, r5, #1
   129b4:	moveq	lr, #4
   129b8:	beq	12c68 <__assert_fail@plt+0xef4>
   129bc:	b	129d0 <__assert_fail@plt+0xc5c>
   129c0:	cmp	r6, #0
   129c4:	beq	12e84 <__assert_fail@plt+0x1110>
   129c8:	cmp	r6, #58	; 0x3a
   129cc:	beq	12e8c <__assert_fail@plt+0x1118>
   129d0:	add	r5, r5, #1
   129d4:	strb	r6, [r4], #1
   129d8:	add	r7, r7, #1
   129dc:	b	12c68 <__assert_fail@plt+0xef4>
   129e0:	cmp	r2, #0
   129e4:	beq	129d0 <__assert_fail@plt+0xc5c>
   129e8:	mov	lr, #5
   129ec:	b	12e40 <__assert_fail@plt+0x10cc>
   129f0:	ldrb	lr, [r5]
   129f4:	cmp	lr, #120	; 0x78
   129f8:	ldrls	pc, [pc, lr, lsl #2]
   129fc:	b	12c44 <__assert_fail@plt+0xed0>
   12a00:	andeq	r2, r1, ip, ror #23
   12a04:	andeq	r2, r1, r4, asr #24
   12a08:	andeq	r2, r1, r4, asr #24
   12a0c:	andeq	r2, r1, r4, asr #24
   12a10:	andeq	r2, r1, r4, asr #24
   12a14:	andeq	r2, r1, r4, asr #24
   12a18:	andeq	r2, r1, r4, asr #24
   12a1c:	andeq	r2, r1, r4, asr #24
   12a20:	andeq	r2, r1, r4, asr #24
   12a24:	andeq	r2, r1, r4, asr #24
   12a28:	andeq	r2, r1, r4, asr #24
   12a2c:	andeq	r2, r1, r4, asr #24
   12a30:	andeq	r2, r1, r4, asr #24
   12a34:	andeq	r2, r1, r4, asr #24
   12a38:	andeq	r2, r1, r4, asr #24
   12a3c:	andeq	r2, r1, r4, asr #24
   12a40:	andeq	r2, r1, r4, asr #24
   12a44:	andeq	r2, r1, r4, asr #24
   12a48:	andeq	r2, r1, r4, asr #24
   12a4c:	andeq	r2, r1, r4, asr #24
   12a50:	andeq	r2, r1, r4, asr #24
   12a54:	andeq	r2, r1, r4, asr #24
   12a58:	andeq	r2, r1, r4, asr #24
   12a5c:	andeq	r2, r1, r4, asr #24
   12a60:	andeq	r2, r1, r4, asr #24
   12a64:	andeq	r2, r1, r4, asr #24
   12a68:	andeq	r2, r1, r4, asr #24
   12a6c:	andeq	r2, r1, r4, asr #24
   12a70:	andeq	r2, r1, r4, asr #24
   12a74:	andeq	r2, r1, r4, asr #24
   12a78:	andeq	r2, r1, r4, asr #24
   12a7c:	andeq	r2, r1, r4, asr #24
   12a80:	andeq	r2, r1, r4, asr #24
   12a84:	andeq	r2, r1, r4, asr #24
   12a88:	andeq	r2, r1, r4, asr #24
   12a8c:	andeq	r2, r1, r4, asr #24
   12a90:	andeq	r2, r1, r4, asr #24
   12a94:	andeq	r2, r1, r4, asr #24
   12a98:	andeq	r2, r1, r4, asr #24
   12a9c:	andeq	r2, r1, r4, asr #24
   12aa0:	andeq	r2, r1, r4, asr #24
   12aa4:	andeq	r2, r1, r4, asr #24
   12aa8:	andeq	r2, r1, r4, asr #24
   12aac:	andeq	r2, r1, r4, asr #24
   12ab0:	andeq	r2, r1, r4, asr #24
   12ab4:	andeq	r2, r1, r4, asr #24
   12ab8:	andeq	r2, r1, r4, asr #24
   12abc:	andeq	r2, r1, r4, asr #24
   12ac0:	strdeq	r2, [r1], -r4
   12ac4:	strdeq	r2, [r1], -r4
   12ac8:	strdeq	r2, [r1], -r4
   12acc:	strdeq	r2, [r1], -r4
   12ad0:	strdeq	r2, [r1], -r4
   12ad4:	strdeq	r2, [r1], -r4
   12ad8:	strdeq	r2, [r1], -r4
   12adc:	strdeq	r2, [r1], -r4
   12ae0:	andeq	r2, r1, r4, asr #24
   12ae4:	andeq	r2, r1, r4, asr #24
   12ae8:	andeq	r2, r1, r4, asr #24
   12aec:	andeq	r2, r1, r4, asr #24
   12af0:	andeq	r2, r1, r4, asr #24
   12af4:	andeq	r2, r1, r4, asr #24
   12af8:	andeq	r2, r1, r4, asr #24
   12afc:	andeq	r2, r1, r4, lsr ip
   12b00:	andeq	r2, r1, r4, asr #24
   12b04:	andeq	r2, r1, r4, asr #24
   12b08:	andeq	r2, r1, r4, asr #24
   12b0c:	andeq	r2, r1, r4, asr #24
   12b10:	andeq	r2, r1, r4, asr #24
   12b14:	andeq	r2, r1, r4, asr #24
   12b18:	andeq	r2, r1, r4, asr #24
   12b1c:	andeq	r2, r1, r4, asr #24
   12b20:	andeq	r2, r1, r4, asr #24
   12b24:	andeq	r2, r1, r4, asr #24
   12b28:	andeq	r2, r1, r4, asr #24
   12b2c:	andeq	r2, r1, r4, asr #24
   12b30:	andeq	r2, r1, r4, asr #24
   12b34:	andeq	r2, r1, r4, asr #24
   12b38:	andeq	r2, r1, r4, asr #24
   12b3c:	andeq	r2, r1, r4, asr #24
   12b40:	andeq	r2, r1, r4, asr #24
   12b44:	andeq	r2, r1, r4, asr #24
   12b48:	andeq	r2, r1, r4, asr #24
   12b4c:	andeq	r2, r1, r4, asr #24
   12b50:	andeq	r2, r1, r4, asr #24
   12b54:	andeq	r2, r1, r4, asr #24
   12b58:	andeq	r2, r1, r4, asr #24
   12b5c:	andeq	r2, r1, r4, asr #24
   12b60:	andeq	r2, r1, r8, lsl #25
   12b64:	andeq	r2, r1, r4, asr #24
   12b68:	andeq	r2, r1, r4, asr #24
   12b6c:	andeq	r2, r1, r4, asr #24
   12b70:	andeq	r2, r1, r4, asr #24
   12b74:	andeq	r2, r1, r4, asr #24
   12b78:	andeq	r2, r1, r4, asr #24
   12b7c:	andeq	r2, r1, ip, lsr ip
   12b80:	andeq	r2, r1, r4, asr #24
   12b84:	andeq	r2, r1, ip, asr #24
   12b88:	andeq	r2, r1, r4, ror #23
   12b8c:	andeq	r2, r1, r4, asr #24
   12b90:	andeq	r2, r1, r4, asr #24
   12b94:	andeq	r2, r1, r4, lsl #24
   12b98:	andeq	r2, r1, ip, lsl #24
   12b9c:	andeq	r2, r1, r4, asr #24
   12ba0:	andeq	r2, r1, r4, asr #24
   12ba4:	andeq	r2, r1, r4, asr #24
   12ba8:	andeq	r2, r1, r4, asr #24
   12bac:	andeq	r2, r1, r4, asr #24
   12bb0:	andeq	r2, r1, r4, asr #24
   12bb4:	andeq	r2, r1, r4, asr #24
   12bb8:	andeq	r2, r1, r4, lsl ip
   12bbc:	andeq	r2, r1, r4, asr #24
   12bc0:	andeq	r2, r1, r4, asr #24
   12bc4:	andeq	r2, r1, r4, asr #24
   12bc8:	andeq	r2, r1, ip, lsl ip
   12bcc:	andeq	r2, r1, r4, asr #24
   12bd0:	andeq	r2, r1, r4, lsr #24
   12bd4:	andeq	r2, r1, r4, asr #24
   12bd8:	andeq	r2, r1, ip, lsr #24
   12bdc:	andeq	r2, r1, r4, asr #24
   12be0:	andeq	r2, r1, r8, lsl #25
   12be4:	mov	ip, #8
   12be8:	b	12c50 <__assert_fail@plt+0xedc>
   12bec:	mov	lr, #6
   12bf0:	b	12c5c <__assert_fail@plt+0xee8>
   12bf4:	sub	ip, lr, #48	; 0x30
   12bf8:	uxtb	ip, ip
   12bfc:	mov	lr, #2
   12c00:	b	12c5c <__assert_fail@plt+0xee8>
   12c04:	mov	ip, #27
   12c08:	b	12c50 <__assert_fail@plt+0xedc>
   12c0c:	mov	ip, #12
   12c10:	b	12c50 <__assert_fail@plt+0xedc>
   12c14:	mov	ip, #10
   12c18:	b	12c50 <__assert_fail@plt+0xedc>
   12c1c:	mov	ip, #13
   12c20:	b	12c50 <__assert_fail@plt+0xedc>
   12c24:	mov	ip, #9
   12c28:	b	12c50 <__assert_fail@plt+0xedc>
   12c2c:	mov	ip, #11
   12c30:	b	12c50 <__assert_fail@plt+0xedc>
   12c34:	mov	ip, r9
   12c38:	b	12c50 <__assert_fail@plt+0xedc>
   12c3c:	mov	ip, #32
   12c40:	b	12c50 <__assert_fail@plt+0xedc>
   12c44:	mov	ip, lr
   12c48:	b	12c50 <__assert_fail@plt+0xedc>
   12c4c:	mov	ip, #7
   12c50:	strb	ip, [r4], #1
   12c54:	add	r7, r7, #1
   12c58:	mov	lr, r8
   12c5c:	add	r5, r5, #1
   12c60:	cmp	lr, #4
   12c64:	bhi	12e40 <__assert_fail@plt+0x10cc>
   12c68:	cmp	lr, #4
   12c6c:	ldrls	pc, [pc, lr, lsl #2]
   12c70:	b	12e80 <__assert_fail@plt+0x110c>
   12c74:	andeq	r2, r1, ip, lsl #19
   12c78:	strdeq	r2, [r1], -r0
   12c7c:	muleq	r1, r4, ip
   12c80:	andeq	r2, r1, ip, asr #25
   12c84:	andeq	r2, r1, r8, lsl #28
   12c88:	mov	ip, r8
   12c8c:	mov	lr, sl
   12c90:	b	12c5c <__assert_fail@plt+0xee8>
   12c94:	ldrb	r6, [r5]
   12c98:	sub	fp, r6, #48	; 0x30
   12c9c:	uxtb	fp, fp
   12ca0:	cmp	fp, #7
   12ca4:	bls	12cb8 <__assert_fail@plt+0xf44>
   12ca8:	strb	ip, [r4], #1
   12cac:	add	r7, r7, #1
   12cb0:	mov	lr, r8
   12cb4:	b	12c68 <__assert_fail@plt+0xef4>
   12cb8:	add	r5, r5, #1
   12cbc:	add	ip, r6, ip, lsl #3
   12cc0:	sub	ip, ip, #48	; 0x30
   12cc4:	and	ip, ip, #255	; 0xff
   12cc8:	b	12c68 <__assert_fail@plt+0xef4>
   12ccc:	ldrb	r6, [r5]
   12cd0:	sub	fp, r6, #48	; 0x30
   12cd4:	cmp	fp, #54	; 0x36
   12cd8:	ldrls	pc, [pc, fp, lsl #2]
   12cdc:	b	12df8 <__assert_fail@plt+0x1084>
   12ce0:			; <UNDEFINED> instruction: 0x00012dbc
   12ce4:			; <UNDEFINED> instruction: 0x00012dbc
   12ce8:			; <UNDEFINED> instruction: 0x00012dbc
   12cec:			; <UNDEFINED> instruction: 0x00012dbc
   12cf0:			; <UNDEFINED> instruction: 0x00012dbc
   12cf4:			; <UNDEFINED> instruction: 0x00012dbc
   12cf8:			; <UNDEFINED> instruction: 0x00012dbc
   12cfc:			; <UNDEFINED> instruction: 0x00012dbc
   12d00:			; <UNDEFINED> instruction: 0x00012dbc
   12d04:			; <UNDEFINED> instruction: 0x00012dbc
   12d08:	strdeq	r2, [r1], -r8
   12d0c:	strdeq	r2, [r1], -r8
   12d10:	strdeq	r2, [r1], -r8
   12d14:	strdeq	r2, [r1], -r8
   12d18:	strdeq	r2, [r1], -r8
   12d1c:	strdeq	r2, [r1], -r8
   12d20:	strdeq	r2, [r1], -r8
   12d24:	andeq	r2, r1, r4, ror #27
   12d28:	andeq	r2, r1, r4, ror #27
   12d2c:	andeq	r2, r1, r4, ror #27
   12d30:	andeq	r2, r1, r4, ror #27
   12d34:	andeq	r2, r1, r4, ror #27
   12d38:	andeq	r2, r1, r4, ror #27
   12d3c:	strdeq	r2, [r1], -r8
   12d40:	strdeq	r2, [r1], -r8
   12d44:	strdeq	r2, [r1], -r8
   12d48:	strdeq	r2, [r1], -r8
   12d4c:	strdeq	r2, [r1], -r8
   12d50:	strdeq	r2, [r1], -r8
   12d54:	strdeq	r2, [r1], -r8
   12d58:	strdeq	r2, [r1], -r8
   12d5c:	strdeq	r2, [r1], -r8
   12d60:	strdeq	r2, [r1], -r8
   12d64:	strdeq	r2, [r1], -r8
   12d68:	strdeq	r2, [r1], -r8
   12d6c:	strdeq	r2, [r1], -r8
   12d70:	strdeq	r2, [r1], -r8
   12d74:	strdeq	r2, [r1], -r8
   12d78:	strdeq	r2, [r1], -r8
   12d7c:	strdeq	r2, [r1], -r8
   12d80:	strdeq	r2, [r1], -r8
   12d84:	strdeq	r2, [r1], -r8
   12d88:	strdeq	r2, [r1], -r8
   12d8c:	strdeq	r2, [r1], -r8
   12d90:	strdeq	r2, [r1], -r8
   12d94:	strdeq	r2, [r1], -r8
   12d98:	strdeq	r2, [r1], -r8
   12d9c:	strdeq	r2, [r1], -r8
   12da0:	strdeq	r2, [r1], -r8
   12da4:	ldrdeq	r2, [r1], -r0
   12da8:	ldrdeq	r2, [r1], -r0
   12dac:	ldrdeq	r2, [r1], -r0
   12db0:	ldrdeq	r2, [r1], -r0
   12db4:	ldrdeq	r2, [r1], -r0
   12db8:	ldrdeq	r2, [r1], -r0
   12dbc:	add	r5, r5, #1
   12dc0:	add	ip, r6, ip, lsl #4
   12dc4:	sub	ip, ip, #48	; 0x30
   12dc8:	and	ip, ip, #255	; 0xff
   12dcc:	b	12c68 <__assert_fail@plt+0xef4>
   12dd0:	add	r5, r5, #1
   12dd4:	add	ip, r6, ip, lsl #4
   12dd8:	sub	ip, ip, #87	; 0x57
   12ddc:	and	ip, ip, #255	; 0xff
   12de0:	b	12c68 <__assert_fail@plt+0xef4>
   12de4:	add	r5, r5, #1
   12de8:	add	ip, r6, ip, lsl #4
   12dec:	sub	ip, ip, #55	; 0x37
   12df0:	and	ip, ip, #255	; 0xff
   12df4:	b	12c68 <__assert_fail@plt+0xef4>
   12df8:	strb	ip, [r4], #1
   12dfc:	add	r7, r7, #1
   12e00:	mov	lr, r8
   12e04:	b	12c68 <__assert_fail@plt+0xef4>
   12e08:	ldrb	lr, [r5]
   12e0c:	sub	r6, lr, #64	; 0x40
   12e10:	uxtb	r6, r6
   12e14:	cmp	r6, #62	; 0x3e
   12e18:	bhi	12e34 <__assert_fail@plt+0x10c0>
   12e1c:	add	r5, r5, #1
   12e20:	and	lr, lr, #31
   12e24:	strb	lr, [r4], #1
   12e28:	add	r7, r7, #1
   12e2c:	mov	lr, r8
   12e30:	b	12c68 <__assert_fail@plt+0xef4>
   12e34:	cmp	lr, #63	; 0x3f
   12e38:	beq	12e70 <__assert_fail@plt+0x10fc>
   12e3c:	mov	lr, #6
   12e40:	str	r4, [r0]
   12e44:	str	r5, [r1]
   12e48:	str	r7, [r3]
   12e4c:	subs	r0, lr, #6
   12e50:	movne	r0, #1
   12e54:	add	sp, sp, #4
   12e58:	ldrd	r4, [sp]
   12e5c:	ldrd	r6, [sp, #8]
   12e60:	ldrd	r8, [sp, #16]
   12e64:	ldrd	sl, [sp, #24]
   12e68:	add	sp, sp, #32
   12e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e70:	strb	r9, [r4], #1
   12e74:	add	r7, r7, #1
   12e78:	mov	lr, r8
   12e7c:	b	12c68 <__assert_fail@plt+0xef4>
   12e80:	bl	11d2c <abort@plt>
   12e84:	mov	lr, #5
   12e88:	b	12c60 <__assert_fail@plt+0xeec>
   12e8c:	mov	lr, #5
   12e90:	b	12c60 <__assert_fail@plt+0xeec>
   12e94:	movw	r3, #45872	; 0xb330
   12e98:	movt	r3, #3
   12e9c:	ldr	r3, [r3, #3108]	; 0xc24
   12ea0:	cmp	r3, #3
   12ea4:	ldrls	pc, [pc, r3, lsl #2]
   12ea8:	b	12ecc <__assert_fail@plt+0x1158>
   12eac:			; <UNDEFINED> instruction: 0x00012ebc
   12eb0:	ldrdeq	r2, [r1], -r8
   12eb4:	andeq	r2, r1, r0, ror #29
   12eb8:	andeq	r2, r1, r4, asr #29
   12ebc:	mov	r0, #64	; 0x40
   12ec0:	bx	lr
   12ec4:	mov	r0, #2048	; 0x800
   12ec8:	bx	lr
   12ecc:	str	r4, [sp, #-8]!
   12ed0:	str	lr, [sp, #4]
   12ed4:	bl	11d2c <abort@plt>
   12ed8:	mov	r0, #128	; 0x80
   12edc:	bx	lr
   12ee0:	mov	r0, #32
   12ee4:	bx	lr
   12ee8:	str	r4, [sp, #-8]!
   12eec:	str	lr, [sp, #4]
   12ef0:	movw	r3, #45872	; 0xb330
   12ef4:	movt	r3, #3
   12ef8:	ldrb	r3, [r3, #3112]	; 0xc28
   12efc:	cmp	r3, #0
   12f00:	movw	r4, #258	; 0x102
   12f04:	moveq	r4, #2
   12f08:	movw	r3, #45872	; 0xb330
   12f0c:	movt	r3, #3
   12f10:	ldrb	r3, [r3, #3113]	; 0xc29
   12f14:	cmp	r3, #0
   12f18:	orrne	r4, r4, #1024	; 0x400
   12f1c:	movw	r3, #45872	; 0xb330
   12f20:	movt	r3, #3
   12f24:	ldr	r3, [r3, #3116]	; 0xc2c
   12f28:	cmp	r3, #0
   12f2c:	bne	12f7c <__assert_fail@plt+0x1208>
   12f30:	bl	12e94 <__assert_fail@plt+0x1120>
   12f34:	orr	r4, r0, r4
   12f38:	movw	r3, #45520	; 0xb1d0
   12f3c:	movt	r3, #3
   12f40:	ldrb	r3, [r3, #204]	; 0xcc
   12f44:	cmp	r3, #0
   12f48:	bne	12f64 <__assert_fail@plt+0x11f0>
   12f4c:	movw	r3, #45872	; 0xb330
   12f50:	movt	r3, #3
   12f54:	ldrb	r3, [r3, #3120]	; 0xc30
   12f58:	cmp	r3, #0
   12f5c:	orreq	r4, r4, #516	; 0x204
   12f60:	beq	12f68 <__assert_fail@plt+0x11f4>
   12f64:	orr	r4, r4, #524	; 0x20c
   12f68:	movw	r3, #45520	; 0xb1d0
   12f6c:	movt	r3, #3
   12f70:	ldrb	r3, [r3, #205]	; 0xcd
   12f74:	cmp	r3, #0
   12f78:	orrne	r4, r4, #16
   12f7c:	movw	r3, #45872	; 0xb330
   12f80:	movt	r3, #3
   12f84:	ldr	r3, [r3, #3124]	; 0xc34
   12f88:	cmp	r3, #6
   12f8c:	ldrls	pc, [pc, r3, lsl #2]
   12f90:	b	12fd0 <__assert_fail@plt+0x125c>
   12f94:			; <UNDEFINED> instruction: 0x00012fb8
   12f98:			; <UNDEFINED> instruction: 0x00012fb8
   12f9c:			; <UNDEFINED> instruction: 0x00012fb8
   12fa0:	andeq	r2, r1, r8, asr #31
   12fa4:			; <UNDEFINED> instruction: 0x00012fb8
   12fa8:			; <UNDEFINED> instruction: 0x00012fb0
   12fac:			; <UNDEFINED> instruction: 0x00012fb8
   12fb0:	bl	12e94 <__assert_fail@plt+0x1120>
   12fb4:	orr	r4, r4, r0
   12fb8:	mov	r0, r4
   12fbc:	ldr	r4, [sp]
   12fc0:	add	sp, sp, #4
   12fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc8:	orr	r4, r4, #512	; 0x200
   12fcc:	b	12fb8 <__assert_fail@plt+0x1244>
   12fd0:	bl	11d2c <abort@plt>
   12fd4:	str	r4, [sp, #-8]!
   12fd8:	str	lr, [sp, #4]
   12fdc:	mov	r4, r0
   12fe0:	ldr	r0, [r0]
   12fe4:	bl	1c200 <__assert_fail@plt+0xa48c>
   12fe8:	ldr	r0, [r4, #4]
   12fec:	bl	1c200 <__assert_fail@plt+0xa48c>
   12ff0:	ldr	r0, [r4, #8]
   12ff4:	bl	1c200 <__assert_fail@plt+0xa48c>
   12ff8:	ldr	r0, [r4, #128]	; 0x80
   12ffc:	ldr	r3, [pc, #20]	; 13018 <__assert_fail@plt+0x12a4>
   13000:	cmp	r0, r3
   13004:	beq	1300c <__assert_fail@plt+0x1298>
   13008:	bl	11ce4 <freecon@plt>
   1300c:	ldr	r4, [sp]
   13010:	add	sp, sp, #4
   13014:	pop	{pc}		; (ldr pc, [sp], #4)
   13018:	andeq	fp, r3, r0, lsr #5
   1301c:	strd	r4, [sp, #-16]!
   13020:	str	r6, [sp, #8]
   13024:	str	lr, [sp, #12]
   13028:	movw	r3, #45872	; 0xb330
   1302c:	movt	r3, #3
   13030:	ldr	r3, [r3, #8]
   13034:	cmp	r3, #0
   13038:	beq	13064 <__assert_fail@plt+0x12f0>
   1303c:	mov	r4, #0
   13040:	movw	r5, #45872	; 0xb330
   13044:	movt	r5, #3
   13048:	ldr	r3, [r5, #16]
   1304c:	ldr	r0, [r3, r4, lsl #2]
   13050:	bl	12fd4 <__assert_fail@plt+0x1260>
   13054:	add	r4, r4, #1
   13058:	ldr	r3, [r5, #8]
   1305c:	cmp	r3, r4
   13060:	bhi	13048 <__assert_fail@plt+0x12d4>
   13064:	movw	r3, #45872	; 0xb330
   13068:	movt	r3, #3
   1306c:	mov	r2, #0
   13070:	str	r2, [r3, #8]
   13074:	strb	r2, [r3, #3128]	; 0xc38
   13078:	strb	r2, [r3, #3129]	; 0xc39
   1307c:	str	r2, [r3, #3132]	; 0xc3c
   13080:	str	r2, [r3, #3136]	; 0xc40
   13084:	str	r2, [r3, #3140]	; 0xc44
   13088:	str	r2, [r3, #3144]	; 0xc48
   1308c:	str	r2, [r3, #3148]	; 0xc4c
   13090:	str	r2, [r3, #3152]	; 0xc50
   13094:	str	r2, [r3, #3156]	; 0xc54
   13098:	str	r2, [r3, #3160]	; 0xc58
   1309c:	str	r2, [r3, #3164]	; 0xc5c
   130a0:	str	r2, [r3, #3168]	; 0xc60
   130a4:	ldrd	r4, [sp]
   130a8:	ldr	r6, [sp, #8]
   130ac:	add	sp, sp, #12
   130b0:	pop	{pc}		; (ldr pc, [sp], #4)
   130b4:	push	{lr}		; (str lr, [sp, #-4]!)
   130b8:	sub	sp, sp, #20
   130bc:	cmp	r0, #0
   130c0:	beq	130d8 <__assert_fail@plt+0x1364>
   130c4:	mov	r1, #0
   130c8:	bl	1ec44 <__assert_fail@plt+0xced0>
   130cc:	bic	r0, r0, r0, asr #31
   130d0:	add	sp, sp, #20
   130d4:	pop	{pc}		; (ldr pc, [sp], #4)
   130d8:	strd	r2, [sp, #8]
   130dc:	movw	r3, #28572	; 0x6f9c
   130e0:	movt	r3, #2
   130e4:	str	r3, [sp]
   130e8:	mvn	r3, #0
   130ec:	mov	r2, #1
   130f0:	mov	r1, #0
   130f4:	mov	r0, r1
   130f8:	bl	11d5c <__snprintf_chk@plt>
   130fc:	b	130d0 <__assert_fail@plt+0x135c>
   13100:	strd	r4, [sp, #-20]!	; 0xffffffec
   13104:	strd	r6, [sp, #8]
   13108:	str	lr, [sp, #16]
   1310c:	sub	sp, sp, #268	; 0x10c
   13110:	mov	r4, r2
   13114:	mov	r2, r3
   13118:	add	r3, sp, #8
   1311c:	str	r3, [sp]
   13120:	ldr	r3, [sp, #288]	; 0x120
   13124:	bl	11c3c <statx@plt>
   13128:	cmp	r0, #0
   1312c:	bge	13144 <__assert_fail@plt+0x13d0>
   13130:	add	sp, sp, #268	; 0x10c
   13134:	ldrd	r4, [sp]
   13138:	ldrd	r6, [sp, #8]
   1313c:	add	sp, sp, #16
   13140:	pop	{pc}		; (ldr pc, [sp], #4)
   13144:	ldr	r5, [sp, #148]	; 0x94
   13148:	ldr	r1, [sp, #144]	; 0x90
   1314c:	mov	ip, #65280	; 0xff00
   13150:	movt	ip, #15
   13154:	and	r6, ip, r1, lsl #8
   13158:	mov	lr, #61440	; 0xf000
   1315c:	movt	lr, #65535	; 0xffff
   13160:	and	r1, r1, lr
   13164:	uxtb	r2, r5
   13168:	orr	r6, r2, r6
   1316c:	mov	r3, #0
   13170:	movt	r3, #65520	; 0xfff0
   13174:	and	r2, r3, r5, lsl #12
   13178:	orr	r2, r2, r6
   1317c:	orr	r1, r1, r5, lsr #20
   13180:	str	r2, [r4]
   13184:	str	r1, [r4, #4]
   13188:	ldrd	r6, [sp, #40]	; 0x28
   1318c:	strd	r6, [r4, #96]	; 0x60
   13190:	ldrh	r2, [sp, #36]	; 0x24
   13194:	str	r2, [r4, #16]
   13198:	ldr	r2, [sp, #24]
   1319c:	str	r2, [r4, #20]
   131a0:	ldr	r2, [sp, #28]
   131a4:	str	r2, [r4, #24]
   131a8:	ldr	r2, [sp, #32]
   131ac:	str	r2, [r4, #28]
   131b0:	ldr	r1, [sp, #140]	; 0x8c
   131b4:	ldr	r2, [sp, #136]	; 0x88
   131b8:	and	ip, ip, r2, lsl #8
   131bc:	and	r2, r2, lr
   131c0:	uxtb	lr, r1
   131c4:	orr	ip, lr, ip
   131c8:	and	r3, r3, r1, lsl #12
   131cc:	orr	r3, r3, ip
   131d0:	orr	r2, r2, r1, lsr #20
   131d4:	str	r3, [r4, #32]
   131d8:	str	r2, [r4, #36]	; 0x24
   131dc:	ldrd	r2, [sp, #48]	; 0x30
   131e0:	strd	r2, [r4, #48]	; 0x30
   131e4:	ldr	r3, [sp, #12]
   131e8:	str	r3, [r4, #56]	; 0x38
   131ec:	ldrd	r2, [sp, #56]	; 0x38
   131f0:	strd	r2, [r4, #64]	; 0x40
   131f4:	ldr	r3, [sp, #72]	; 0x48
   131f8:	str	r3, [r4, #72]	; 0x48
   131fc:	ldr	r3, [sp, #80]	; 0x50
   13200:	str	r3, [r4, #76]	; 0x4c
   13204:	ldr	r3, [sp, #120]	; 0x78
   13208:	str	r3, [r4, #80]	; 0x50
   1320c:	ldr	r3, [sp, #128]	; 0x80
   13210:	str	r3, [r4, #84]	; 0x54
   13214:	ldr	r3, [sp, #104]	; 0x68
   13218:	str	r3, [r4, #88]	; 0x58
   1321c:	ldr	r3, [sp, #112]	; 0x70
   13220:	str	r3, [r4, #92]	; 0x5c
   13224:	ldr	r3, [sp, #288]	; 0x120
   13228:	tst	r3, #2048	; 0x800
   1322c:	beq	13130 <__assert_fail@plt+0x13bc>
   13230:	ldr	r3, [sp, #8]
   13234:	tst	r3, #2048	; 0x800
   13238:	beq	13250 <__assert_fail@plt+0x14dc>
   1323c:	ldr	r3, [sp, #88]	; 0x58
   13240:	str	r3, [r4, #80]	; 0x50
   13244:	ldr	r3, [sp, #96]	; 0x60
   13248:	str	r3, [r4, #84]	; 0x54
   1324c:	b	13130 <__assert_fail@plt+0x13bc>
   13250:	mvn	r3, #0
   13254:	str	r3, [r4, #84]	; 0x54
   13258:	str	r3, [r4, #80]	; 0x50
   1325c:	b	13130 <__assert_fail@plt+0x13bc>
   13260:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13264:	strd	r6, [sp, #8]
   13268:	str	r8, [sp, #16]
   1326c:	str	lr, [sp, #20]
   13270:	mov	r4, r0
   13274:	mov	r6, r1
   13278:	mov	r7, r2
   1327c:	bl	11bb8 <__errno_location@plt>
   13280:	ldr	r5, [r0]
   13284:	mov	r1, r7
   13288:	mov	r0, #4
   1328c:	bl	22d50 <_obstack_memory_used@@Base+0x2040>
   13290:	mov	r3, r0
   13294:	mov	r2, r6
   13298:	mov	r1, r5
   1329c:	mov	r0, #0
   132a0:	bl	11a8c <error@plt>
   132a4:	cmp	r4, #0
   132a8:	beq	132d0 <__assert_fail@plt+0x155c>
   132ac:	movw	r3, #45872	; 0xb330
   132b0:	movt	r3, #3
   132b4:	mov	r2, #2
   132b8:	str	r2, [r3, #3172]	; 0xc64
   132bc:	ldrd	r4, [sp]
   132c0:	ldrd	r6, [sp, #8]
   132c4:	ldr	r8, [sp, #16]
   132c8:	add	sp, sp, #20
   132cc:	pop	{pc}		; (ldr pc, [sp], #4)
   132d0:	movw	r3, #45872	; 0xb330
   132d4:	movt	r3, #3
   132d8:	ldr	r3, [r3, #3172]	; 0xc64
   132dc:	cmp	r3, #0
   132e0:	bne	132bc <__assert_fail@plt+0x1548>
   132e4:	movw	r3, #45872	; 0xb330
   132e8:	movt	r3, #3
   132ec:	mov	r2, #1
   132f0:	str	r2, [r3, #3172]	; 0xc64
   132f4:	b	132bc <__assert_fail@plt+0x1548>
   132f8:	strd	r4, [sp, #-12]!
   132fc:	str	lr, [sp, #8]
   13300:	sub	sp, sp, #20
   13304:	mov	r5, r0
   13308:	movw	r3, #45872	; 0xb330
   1330c:	movt	r3, #3
   13310:	ldr	r3, [r3, #3176]	; 0xc68
   13314:	str	r3, [sp]
   13318:	mvn	r3, #0
   1331c:	mov	r2, r0
   13320:	mov	r1, #2
   13324:	add	r0, sp, #12
   13328:	bl	229ac <_obstack_memory_used@@Base+0x1c9c>
   1332c:	ldrb	r2, [r5]
   13330:	ldrb	r3, [sp, #12]
   13334:	cmp	r2, r3
   13338:	movne	r0, #1
   1333c:	beq	13350 <__assert_fail@plt+0x15dc>
   13340:	add	sp, sp, #20
   13344:	ldrd	r4, [sp]
   13348:	add	sp, sp, #8
   1334c:	pop	{pc}		; (ldr pc, [sp], #4)
   13350:	mov	r4, r0
   13354:	mov	r0, r5
   13358:	bl	11b94 <strlen@plt>
   1335c:	subs	r0, r0, r4
   13360:	movne	r0, #1
   13364:	b	13340 <__assert_fail@plt+0x15cc>
   13368:	str	r4, [sp, #-8]!
   1336c:	str	lr, [sp, #4]
   13370:	mov	r4, r0
   13374:	movw	r3, #45872	; 0xb330
   13378:	movt	r3, #3
   1337c:	ldrb	r3, [r3, #3180]	; 0xc6c
   13380:	cmp	r3, #0
   13384:	movne	r0, #0
   13388:	beq	133a4 <__assert_fail@plt+0x1630>
   1338c:	mov	r2, r4
   13390:	mov	r3, #0
   13394:	bl	130b4 <__assert_fail@plt+0x1340>
   13398:	ldr	r4, [sp]
   1339c:	add	sp, sp, #4
   133a0:	pop	{pc}		; (ldr pc, [sp], #4)
   133a4:	mov	r0, r4
   133a8:	bl	1e030 <__assert_fail@plt+0xc2bc>
   133ac:	b	1338c <__assert_fail@plt+0x1618>
   133b0:	strd	r4, [sp, #-16]!
   133b4:	str	r6, [sp, #8]
   133b8:	str	lr, [sp, #12]
   133bc:	mov	r4, r0
   133c0:	mov	r5, r1
   133c4:	bl	11bb8 <__errno_location@plt>
   133c8:	mov	r3, #0
   133cc:	str	r3, [r0]
   133d0:	mov	r1, r5
   133d4:	mov	r0, r4
   133d8:	bl	11abc <strcoll@plt>
   133dc:	ldrd	r4, [sp]
   133e0:	ldr	r6, [sp, #8]
   133e4:	add	sp, sp, #12
   133e8:	pop	{pc}		; (ldr pc, [sp], #4)
   133ec:	str	r4, [sp, #-8]!
   133f0:	str	lr, [sp, #4]
   133f4:	ldr	r3, [r1]
   133f8:	ldr	r1, [r0]
   133fc:	mov	r0, r3
   13400:	bl	1be40 <__assert_fail@plt+0xa0cc>
   13404:	ldr	r4, [sp]
   13408:	add	sp, sp, #4
   1340c:	pop	{pc}		; (ldr pc, [sp], #4)
   13410:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13414:	strd	r6, [sp, #8]
   13418:	strd	r8, [sp, #16]
   1341c:	strd	sl, [sp, #24]
   13420:	str	lr, [sp, #32]
   13424:	sub	sp, sp, #36	; 0x24
   13428:	mov	sl, r0
   1342c:	mov	r8, r1
   13430:	mov	r6, r2
   13434:	mov	r7, r3
   13438:	ldr	r9, [r0]
   1343c:	mov	r0, r3
   13440:	bl	228e4 <_obstack_memory_used@@Base+0x1bd4>
   13444:	movw	r3, #45872	; 0xb330
   13448:	movt	r3, #3
   1344c:	ldrb	r4, [r3, #3181]	; 0xc6d
   13450:	cmp	r0, #2
   13454:	movhi	r4, #0
   13458:	andls	r4, r4, #1
   1345c:	ldr	r3, [sp, #72]	; 0x48
   13460:	cmp	r3, #0
   13464:	bne	134c8 <__assert_fail@plt+0x1754>
   13468:	cmp	r4, #0
   1346c:	beq	135d0 <__assert_fail@plt+0x185c>
   13470:	mov	r0, r6
   13474:	bl	11b94 <strlen@plt>
   13478:	mov	r7, r0
   1347c:	cmp	r8, r0
   13480:	bls	135c0 <__assert_fail@plt+0x184c>
   13484:	add	r2, r7, #1
   13488:	mov	r1, r6
   1348c:	mov	r0, r9
   13490:	bl	11930 <memcpy@plt>
   13494:	mov	r3, #0
   13498:	str	r3, [sp, #12]
   1349c:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   134a0:	cmp	r0, #1
   134a4:	bls	13744 <__assert_fail@plt+0x19d0>
   134a8:	add	r8, r9, r7
   134ac:	cmp	r8, r9
   134b0:	bls	13700 <__assert_fail@plt+0x198c>
   134b4:	mov	r5, r9
   134b8:	mov	r4, r9
   134bc:	mov	r7, #0
   134c0:	mov	fp, #63	; 0x3f
   134c4:	b	13624 <__assert_fail@plt+0x18b0>
   134c8:	str	r7, [sp]
   134cc:	mvn	r3, #0
   134d0:	mov	r2, r6
   134d4:	mov	r1, r8
   134d8:	mov	r0, r9
   134dc:	bl	229ac <_obstack_memory_used@@Base+0x1c9c>
   134e0:	mov	r5, r0
   134e4:	cmp	r8, r0
   134e8:	bls	13584 <__assert_fail@plt+0x1810>
   134ec:	ldrb	r2, [r6]
   134f0:	ldrb	r3, [r9]
   134f4:	cmp	r2, r3
   134f8:	movne	r0, #1
   134fc:	beq	135ac <__assert_fail@plt+0x1838>
   13500:	str	r0, [sp, #12]
   13504:	cmp	r4, #0
   13508:	bne	135e8 <__assert_fail@plt+0x1874>
   1350c:	ldr	r3, [sp, #76]	; 0x4c
   13510:	cmp	r3, #0
   13514:	beq	137b0 <__assert_fail@plt+0x1a3c>
   13518:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1351c:	cmp	r0, #1
   13520:	bhi	13788 <__assert_fail@plt+0x1a14>
   13524:	add	r4, r9, r5
   13528:	cmp	r4, r9
   1352c:	bls	137a8 <__assert_fail@plt+0x1a34>
   13530:	bl	11b58 <__ctype_b_loc@plt>
   13534:	ldr	r0, [r0]
   13538:	sub	r2, r9, #1
   1353c:	sub	r1, r4, #1
   13540:	mov	r7, #0
   13544:	ldrb	r3, [r2, #1]!
   13548:	lsl	r3, r3, #1
   1354c:	ldrh	r3, [r0, r3]
   13550:	tst	r3, #16384	; 0x4000
   13554:	addne	r7, r7, #1
   13558:	cmp	r2, r1
   1355c:	bne	13544 <__assert_fail@plt+0x17d0>
   13560:	movw	r3, #45872	; 0xb330
   13564:	movt	r3, #3
   13568:	ldrb	r3, [r3, #3182]	; 0xc6e
   1356c:	cmp	r3, #0
   13570:	bne	137e4 <__assert_fail@plt+0x1a70>
   13574:	mov	r3, #0
   13578:	ldr	r2, [sp, #80]	; 0x50
   1357c:	strb	r3, [r2]
   13580:	b	13818 <__assert_fail@plt+0x1aa4>
   13584:	add	r8, r0, #1
   13588:	mov	r0, r8
   1358c:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   13590:	mov	r9, r0
   13594:	str	r7, [sp]
   13598:	mvn	r3, #0
   1359c:	mov	r2, r6
   135a0:	mov	r1, r8
   135a4:	bl	229ac <_obstack_memory_used@@Base+0x1c9c>
   135a8:	b	134ec <__assert_fail@plt+0x1778>
   135ac:	mov	r0, r6
   135b0:	bl	11b94 <strlen@plt>
   135b4:	subs	r0, r0, r5
   135b8:	movne	r0, #1
   135bc:	b	13500 <__assert_fail@plt+0x178c>
   135c0:	add	r0, r0, #1
   135c4:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   135c8:	mov	r9, r0
   135cc:	b	13484 <__assert_fail@plt+0x1710>
   135d0:	mov	r0, r6
   135d4:	bl	11b94 <strlen@plt>
   135d8:	mov	r5, r0
   135dc:	str	r4, [sp, #12]
   135e0:	mov	r9, r6
   135e4:	b	1350c <__assert_fail@plt+0x1798>
   135e8:	mov	r7, r5
   135ec:	b	1349c <__assert_fail@plt+0x1728>
   135f0:	cmp	r3, #65	; 0x41
   135f4:	bcc	13648 <__assert_fail@plt+0x18d4>
   135f8:	cmp	r3, #95	; 0x5f
   135fc:	bls	13610 <__assert_fail@plt+0x189c>
   13600:	sub	r2, r3, #97	; 0x61
   13604:	uxtb	r2, r2
   13608:	cmp	r2, #29
   1360c:	bhi	13648 <__assert_fail@plt+0x18d4>
   13610:	add	r4, r4, #1
   13614:	strb	r3, [r5], #1
   13618:	add	r7, r7, #1
   1361c:	cmp	r8, r4
   13620:	bls	13708 <__assert_fail@plt+0x1994>
   13624:	ldrb	r3, [r4]
   13628:	cmp	r3, #63	; 0x3f
   1362c:	bhi	135f0 <__assert_fail@plt+0x187c>
   13630:	cmp	r3, #37	; 0x25
   13634:	bcs	13610 <__assert_fail@plt+0x189c>
   13638:	sub	r2, r3, #32
   1363c:	uxtb	r2, r2
   13640:	cmp	r2, #3
   13644:	bls	13610 <__assert_fail@plt+0x189c>
   13648:	mov	r2, #0
   1364c:	mov	r3, #0
   13650:	strd	r2, [sp, #24]
   13654:	b	13694 <__assert_fail@plt+0x1920>
   13658:	add	r4, r4, #1
   1365c:	strb	fp, [r5], #1
   13660:	add	r7, r7, #1
   13664:	b	1361c <__assert_fail@plt+0x18a8>
   13668:	strb	fp, [r5], #1
   1366c:	add	r7, r7, #1
   13670:	mov	r4, r8
   13674:	b	1361c <__assert_fail@plt+0x18a8>
   13678:	add	r5, r5, r6
   1367c:	add	r7, r7, r0
   13680:	mov	r4, r1
   13684:	add	r0, sp, #24
   13688:	bl	11948 <mbsinit@plt>
   1368c:	cmp	r0, #0
   13690:	bne	1361c <__assert_fail@plt+0x18a8>
   13694:	add	r3, sp, #24
   13698:	sub	r2, r8, r4
   1369c:	mov	r1, r4
   136a0:	add	r0, sp, #20
   136a4:	bl	1e584 <__assert_fail@plt+0xc810>
   136a8:	mov	r6, r0
   136ac:	cmn	r0, #1
   136b0:	beq	13658 <__assert_fail@plt+0x18e4>
   136b4:	cmn	r0, #2
   136b8:	beq	13668 <__assert_fail@plt+0x18f4>
   136bc:	cmp	r0, #0
   136c0:	movne	r6, r0
   136c4:	moveq	r6, #1
   136c8:	ldr	r0, [sp, #20]
   136cc:	bl	118d0 <wcwidth@plt>
   136d0:	cmp	r0, #0
   136d4:	addlt	r4, r4, r6
   136d8:	strblt	fp, [r5], #1
   136dc:	addlt	r7, r7, #1
   136e0:	blt	13684 <__assert_fail@plt+0x1910>
   136e4:	sub	r3, r5, #1
   136e8:	add	r1, r4, r6
   136ec:	ldrb	r2, [r4], #1
   136f0:	strb	r2, [r3, #1]!
   136f4:	cmp	r4, r1
   136f8:	bne	136ec <__assert_fail@plt+0x1978>
   136fc:	b	13678 <__assert_fail@plt+0x1904>
   13700:	mov	r5, r9
   13704:	mov	r7, #0
   13708:	sub	r5, r5, r9
   1370c:	movw	r3, #45872	; 0xb330
   13710:	movt	r3, #3
   13714:	ldrb	r3, [r3, #3182]	; 0xc6e
   13718:	cmp	r3, #0
   1371c:	beq	13800 <__assert_fail@plt+0x1a8c>
   13720:	movw	r3, #45872	; 0xb330
   13724:	movt	r3, #3
   13728:	ldrb	r3, [r3, #3128]	; 0xc38
   1372c:	eor	r3, r3, #1
   13730:	ldr	r2, [sp, #12]
   13734:	orrs	r3, r2, r3
   13738:	bne	13800 <__assert_fail@plt+0x1a8c>
   1373c:	mov	r3, #1
   13740:	b	13804 <__assert_fail@plt+0x1a90>
   13744:	add	r4, r9, r7
   13748:	cmp	r4, r9
   1374c:	bls	137a0 <__assert_fail@plt+0x1a2c>
   13750:	bl	11b58 <__ctype_b_loc@plt>
   13754:	sub	r2, r9, #1
   13758:	sub	ip, r4, #1
   1375c:	mov	lr, #63	; 0x3f
   13760:	ldrb	r3, [r2, #1]!
   13764:	ldr	r1, [r0]
   13768:	lsl	r3, r3, #1
   1376c:	ldrh	r3, [r1, r3]
   13770:	tst	r3, #16384	; 0x4000
   13774:	strbeq	lr, [r2]
   13778:	cmp	ip, r2
   1377c:	bne	13760 <__assert_fail@plt+0x19ec>
   13780:	mov	r5, r7
   13784:	b	1370c <__assert_fail@plt+0x1998>
   13788:	mov	r2, #0
   1378c:	mov	r1, r5
   13790:	mov	r0, r9
   13794:	bl	1ea34 <__assert_fail@plt+0xccc0>
   13798:	mov	r7, r0
   1379c:	b	13560 <__assert_fail@plt+0x17ec>
   137a0:	mov	r5, r7
   137a4:	b	1370c <__assert_fail@plt+0x1998>
   137a8:	mov	r7, #0
   137ac:	b	13560 <__assert_fail@plt+0x17ec>
   137b0:	movw	r3, #45872	; 0xb330
   137b4:	movt	r3, #3
   137b8:	ldrb	r3, [r3, #3182]	; 0xc6e
   137bc:	cmp	r3, #0
   137c0:	bne	13844 <__assert_fail@plt+0x1ad0>
   137c4:	mov	r3, #0
   137c8:	ldr	r2, [sp, #80]	; 0x50
   137cc:	strb	r3, [r2]
   137d0:	b	13820 <__assert_fail@plt+0x1aac>
   137d4:	mov	r3, #1
   137d8:	ldr	r2, [sp, #80]	; 0x50
   137dc:	strb	r3, [r2]
   137e0:	b	13818 <__assert_fail@plt+0x1aa4>
   137e4:	movw	r3, #45872	; 0xb330
   137e8:	movt	r3, #3
   137ec:	ldrb	r3, [r3, #3128]	; 0xc38
   137f0:	eor	r3, r3, #1
   137f4:	ldr	r2, [sp, #12]
   137f8:	orrs	r3, r2, r3
   137fc:	beq	137d4 <__assert_fail@plt+0x1a60>
   13800:	mov	r3, #0
   13804:	ldr	r2, [sp, #80]	; 0x50
   13808:	strb	r3, [r2]
   1380c:	ldr	r3, [sp, #76]	; 0x4c
   13810:	cmp	r3, #0
   13814:	beq	13820 <__assert_fail@plt+0x1aac>
   13818:	ldr	r3, [sp, #76]	; 0x4c
   1381c:	str	r7, [r3]
   13820:	str	r9, [sl]
   13824:	mov	r0, r5
   13828:	add	sp, sp, #36	; 0x24
   1382c:	ldrd	r4, [sp]
   13830:	ldrd	r6, [sp, #8]
   13834:	ldrd	r8, [sp, #16]
   13838:	ldrd	sl, [sp, #24]
   1383c:	add	sp, sp, #32
   13840:	pop	{pc}		; (ldr pc, [sp], #4)
   13844:	movw	r3, #45872	; 0xb330
   13848:	movt	r3, #3
   1384c:	ldrb	r3, [r3, #3128]	; 0xc38
   13850:	eor	r3, r3, #1
   13854:	ldr	r2, [sp, #12]
   13858:	orrs	r3, r2, r3
   1385c:	movne	r7, #0
   13860:	bne	13800 <__assert_fail@plt+0x1a8c>
   13864:	mov	r3, #1
   13868:	ldr	r2, [sp, #80]	; 0x50
   1386c:	strb	r3, [r2]
   13870:	b	13820 <__assert_fail@plt+0x1aac>
   13874:	strd	r4, [sp, #-12]!
   13878:	str	lr, [sp, #8]
   1387c:	sub	sp, sp, #8192	; 0x2000
   13880:	sub	sp, sp, #36	; 0x24
   13884:	mov	r5, r0
   13888:	add	r4, sp, #32
   1388c:	str	r4, [r4, #-4]
   13890:	sub	r3, r4, #9
   13894:	str	r3, [sp, #8]
   13898:	sub	r3, r4, #8
   1389c:	str	r3, [sp, #4]
   138a0:	str	r2, [sp]
   138a4:	mov	r3, r1
   138a8:	mov	r2, r0
   138ac:	mov	r1, #8192	; 0x2000
   138b0:	sub	r0, r4, #4
   138b4:	bl	13410 <__assert_fail@plt+0x169c>
   138b8:	ldr	r0, [r4, #-4]
   138bc:	cmp	r0, r5
   138c0:	cmpne	r0, r4
   138c4:	bne	138e8 <__assert_fail@plt+0x1b74>
   138c8:	ldrb	r0, [sp, #23]
   138cc:	ldr	r3, [sp, #24]
   138d0:	add	r0, r0, r3
   138d4:	add	sp, sp, #8192	; 0x2000
   138d8:	add	sp, sp, #36	; 0x24
   138dc:	ldrd	r4, [sp]
   138e0:	add	sp, sp, #8
   138e4:	pop	{pc}		; (ldr pc, [sp], #4)
   138e8:	bl	1c200 <__assert_fail@plt+0xa48c>
   138ec:	b	138c8 <__assert_fail@plt+0x1b54>
   138f0:	mov	r3, r0
   138f4:	ldr	r0, [r0, #148]	; 0x94
   138f8:	cmp	r0, #0
   138fc:	bxne	lr
   13900:	str	r4, [sp, #-8]!
   13904:	str	lr, [sp, #4]
   13908:	movw	r1, #45872	; 0xb330
   1390c:	movt	r1, #3
   13910:	ldr	r2, [r3, #144]	; 0x90
   13914:	ldr	r1, [r1, #3176]	; 0xc68
   13918:	ldr	r0, [r3]
   1391c:	bl	13874 <__assert_fail@plt+0x1b00>
   13920:	ldr	r4, [sp]
   13924:	add	sp, sp, #4
   13928:	pop	{pc}		; (ldr pc, [sp], #4)
   1392c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13930:	strd	r6, [sp, #8]
   13934:	str	r8, [sp, #16]
   13938:	str	lr, [sp, #20]
   1393c:	mov	r7, r0
   13940:	mov	r5, r1
   13944:	mov	r6, r2
   13948:	bl	138f0 <__assert_fail@plt+0x1b7c>
   1394c:	mov	r4, r0
   13950:	mov	r0, r5
   13954:	bl	138f0 <__assert_fail@plt+0x1b7c>
   13958:	subs	r0, r4, r0
   1395c:	bne	1396c <__assert_fail@plt+0x1bf8>
   13960:	ldr	r1, [r5]
   13964:	ldr	r0, [r7]
   13968:	blx	r6
   1396c:	ldrd	r4, [sp]
   13970:	ldrd	r6, [sp, #8]
   13974:	ldr	r8, [sp, #16]
   13978:	add	sp, sp, #20
   1397c:	pop	{pc}		; (ldr pc, [sp], #4)
   13980:	str	r4, [sp, #-8]!
   13984:	str	lr, [sp, #4]
   13988:	mov	r3, r1
   1398c:	movw	r2, #6304	; 0x18a0
   13990:	movt	r2, #1
   13994:	mov	r1, r0
   13998:	mov	r0, r3
   1399c:	bl	1392c <__assert_fail@plt+0x1bb8>
   139a0:	ldr	r4, [sp]
   139a4:	add	sp, sp, #4
   139a8:	pop	{pc}		; (ldr pc, [sp], #4)
   139ac:	str	r4, [sp, #-8]!
   139b0:	str	lr, [sp, #4]
   139b4:	movw	r2, #6304	; 0x18a0
   139b8:	movt	r2, #1
   139bc:	bl	1392c <__assert_fail@plt+0x1bb8>
   139c0:	ldr	r4, [sp]
   139c4:	add	sp, sp, #4
   139c8:	pop	{pc}		; (ldr pc, [sp], #4)
   139cc:	str	r4, [sp, #-8]!
   139d0:	str	lr, [sp, #4]
   139d4:	mov	r3, r1
   139d8:	movw	r2, #13232	; 0x33b0
   139dc:	movt	r2, #1
   139e0:	mov	r1, r0
   139e4:	mov	r0, r3
   139e8:	bl	1392c <__assert_fail@plt+0x1bb8>
   139ec:	ldr	r4, [sp]
   139f0:	add	sp, sp, #4
   139f4:	pop	{pc}		; (ldr pc, [sp], #4)
   139f8:	str	r4, [sp, #-8]!
   139fc:	str	lr, [sp, #4]
   13a00:	movw	r2, #13232	; 0x33b0
   13a04:	movt	r2, #1
   13a08:	bl	1392c <__assert_fail@plt+0x1bb8>
   13a0c:	ldr	r4, [sp]
   13a10:	add	sp, sp, #4
   13a14:	pop	{pc}		; (ldr pc, [sp], #4)
   13a18:	strd	r4, [sp, #-16]!
   13a1c:	str	r6, [sp, #8]
   13a20:	str	lr, [sp, #12]
   13a24:	movw	r2, #45872	; 0xb330
   13a28:	movt	r2, #3
   13a2c:	ldr	r3, [r2, #8]
   13a30:	add	r3, r3, r3, lsr #1
   13a34:	ldr	r2, [r2, #3184]	; 0xc70
   13a38:	cmp	r3, r2
   13a3c:	bls	13a6c <__assert_fail@plt+0x1cf8>
   13a40:	movw	r4, #45872	; 0xb330
   13a44:	movt	r4, #3
   13a48:	ldr	r0, [r4, #16]
   13a4c:	bl	1c200 <__assert_fail@plt+0xa48c>
   13a50:	mov	r1, #12
   13a54:	ldr	r0, [r4, #8]
   13a58:	bl	24040 <_obstack_memory_used@@Base+0x3330>
   13a5c:	str	r0, [r4, #16]
   13a60:	ldr	r3, [r4, #8]
   13a64:	add	r3, r3, r3, lsl #1
   13a68:	str	r3, [r4, #3184]	; 0xc70
   13a6c:	bl	1238c <__assert_fail@plt+0x618>
   13a70:	movw	r3, #45872	; 0xb330
   13a74:	movt	r3, #3
   13a78:	ldr	r3, [r3, #3124]	; 0xc34
   13a7c:	cmp	r3, #2
   13a80:	beq	13b5c <__assert_fail@plt+0x1de8>
   13a84:	movw	r3, #45872	; 0xb330
   13a88:	movt	r3, #3
   13a8c:	ldr	r3, [r3, #3188]	; 0xc74
   13a90:	cmp	r3, #0
   13a94:	beq	13ba0 <__assert_fail@plt+0x1e2c>
   13a98:	movw	r3, #45872	; 0xb330
   13a9c:	movt	r3, #3
   13aa0:	ldr	r3, [r3, #3116]	; 0xc2c
   13aa4:	sub	r3, r3, #2
   13aa8:	cmp	r3, #1
   13aac:	bhi	13ba0 <__assert_fail@plt+0x1e2c>
   13ab0:	movw	r3, #45872	; 0xb330
   13ab4:	movt	r3, #3
   13ab8:	ldr	r3, [r3, #8]
   13abc:	cmp	r3, #0
   13ac0:	movne	r4, #0
   13ac4:	bne	13b74 <__assert_fail@plt+0x1e00>
   13ac8:	b	13ba0 <__assert_fail@plt+0x1e2c>
   13acc:	movw	r3, #22608	; 0x5850
   13ad0:	movt	r3, #2
   13ad4:	movw	r2, #4102	; 0x1006
   13ad8:	movw	r1, #28580	; 0x6fa4
   13adc:	movt	r1, #2
   13ae0:	movw	r0, #28592	; 0x6fb0
   13ae4:	movt	r0, #2
   13ae8:	bl	11d74 <__assert_fail@plt>
   13aec:	mov	ip, #0
   13af0:	movw	r2, #45872	; 0xb330
   13af4:	movt	r2, #3
   13af8:	ldr	r0, [r2, #16]
   13afc:	ldr	r1, [r2, #8]
   13b00:	ldr	r2, [r2, #3124]	; 0xc34
   13b04:	cmp	r2, #5
   13b08:	movweq	r3, #45872	; 0xb330
   13b0c:	movteq	r3, #3
   13b10:	ldreq	lr, [r3, #3108]	; 0xc24
   13b14:	movne	lr, #0
   13b18:	movw	r3, #22608	; 0x5850
   13b1c:	movt	r3, #2
   13b20:	add	r2, r2, lr
   13b24:	add	ip, ip, r2, lsl #1
   13b28:	movw	r2, #45872	; 0xb330
   13b2c:	movt	r2, #3
   13b30:	ldrb	lr, [r2, #3584]	; 0xe00
   13b34:	add	lr, lr, ip, lsl #1
   13b38:	ldrb	ip, [r2, #3585]	; 0xe01
   13b3c:	add	ip, ip, lr, lsl #1
   13b40:	add	r3, r3, ip, lsl #2
   13b44:	ldr	r2, [r3, #12]
   13b48:	bl	1ee98 <__assert_fail@plt+0xd124>
   13b4c:	ldrd	r4, [sp]
   13b50:	ldr	r6, [sp, #8]
   13b54:	add	sp, sp, #12
   13b58:	pop	{pc}		; (ldr pc, [sp], #4)
   13b5c:	movw	r3, #45872	; 0xb330
   13b60:	movt	r3, #3
   13b64:	ldr	r3, [r3, #8]
   13b68:	cmp	r3, #0
   13b6c:	movne	r4, #0
   13b70:	beq	13bb4 <__assert_fail@plt+0x1e40>
   13b74:	movw	r5, #45872	; 0xb330
   13b78:	movt	r5, #3
   13b7c:	ldr	r3, [r5, #16]
   13b80:	ldr	r6, [r3, r4, lsl #2]
   13b84:	mov	r0, r6
   13b88:	bl	138f0 <__assert_fail@plt+0x1b7c>
   13b8c:	str	r0, [r6, #148]	; 0x94
   13b90:	add	r4, r4, #1
   13b94:	ldr	r3, [r5, #8]
   13b98:	cmp	r4, r3
   13b9c:	bcc	13b7c <__assert_fail@plt+0x1e08>
   13ba0:	movw	r3, #45872	; 0xb330
   13ba4:	movt	r3, #3
   13ba8:	ldr	r3, [r3, #3124]	; 0xc34
   13bac:	cmp	r3, #6
   13bb0:	beq	13b4c <__assert_fail@plt+0x1dd8>
   13bb4:	ldr	r0, [pc, #40]	; 13be4 <__assert_fail@plt+0x1e70>
   13bb8:	bl	118e8 <_setjmp@plt>
   13bbc:	cmp	r0, #0
   13bc0:	beq	13aec <__assert_fail@plt+0x1d78>
   13bc4:	movw	r3, #45872	; 0xb330
   13bc8:	movt	r3, #3
   13bcc:	ldr	r3, [r3, #3124]	; 0xc34
   13bd0:	cmp	r3, #4
   13bd4:	beq	13acc <__assert_fail@plt+0x1d58>
   13bd8:	bl	1238c <__assert_fail@plt+0x618>
   13bdc:	mov	ip, #1
   13be0:	b	13af0 <__assert_fail@plt+0x1d7c>
   13be4:	andeq	fp, r3, r8, lsr #31
   13be8:	strd	r4, [sp, #-12]!
   13bec:	str	lr, [sp, #8]
   13bf0:	sub	sp, sp, #676	; 0x2a4
   13bf4:	mov	r5, r0
   13bf8:	movw	r3, #45872	; 0xb330
   13bfc:	movt	r3, #3
   13c00:	ldrb	r3, [r3, #3112]	; 0xc28
   13c04:	cmp	r3, #0
   13c08:	beq	13c6c <__assert_fail@plt+0x1ef8>
   13c0c:	movw	r3, #45872	; 0xb330
   13c10:	movt	r3, #3
   13c14:	ldr	r3, [r3, #3116]	; 0xc2c
   13c18:	cmp	r3, #4
   13c1c:	beq	13c54 <__assert_fail@plt+0x1ee0>
   13c20:	movw	r3, #45872	; 0xb330
   13c24:	movt	r3, #3
   13c28:	ldr	r4, [r3, #3132]	; 0xc3c
   13c2c:	add	r4, r4, #1
   13c30:	ldrb	r3, [r3, #3113]	; 0xc29
   13c34:	cmp	r3, #0
   13c38:	bne	13cec <__assert_fail@plt+0x1f78>
   13c3c:	movw	r3, #45872	; 0xb330
   13c40:	movt	r3, #3
   13c44:	ldrb	r3, [r3, #3600]	; 0xe10
   13c48:	cmp	r3, #0
   13c4c:	bne	13d28 <__assert_fail@plt+0x1fb4>
   13c50:	b	13d3c <__assert_fail@plt+0x1fc8>
   13c54:	add	r2, sp, #20
   13c58:	ldrd	r0, [r0, #112]	; 0x70
   13c5c:	bl	1e4f8 <__assert_fail@plt+0xc784>
   13c60:	bl	11b94 <strlen@plt>
   13c64:	add	r4, r0, #1
   13c68:	b	13c70 <__assert_fail@plt+0x1efc>
   13c6c:	mov	r4, #0
   13c70:	movw	r3, #45872	; 0xb330
   13c74:	movt	r3, #3
   13c78:	ldrb	r3, [r3, #3113]	; 0xc29
   13c7c:	cmp	r3, #0
   13c80:	beq	13d00 <__assert_fail@plt+0x1f8c>
   13c84:	movw	r3, #45872	; 0xb330
   13c88:	movt	r3, #3
   13c8c:	ldr	r3, [r3, #3116]	; 0xc2c
   13c90:	cmp	r3, #4
   13c94:	bne	13cec <__assert_fail@plt+0x1f78>
   13c98:	ldrb	r3, [r5, #132]	; 0x84
   13c9c:	cmp	r3, #0
   13ca0:	movweq	r0, #28620	; 0x6fcc
   13ca4:	movteq	r0, #2
   13ca8:	bne	13cb8 <__assert_fail@plt+0x1f44>
   13cac:	bl	11b94 <strlen@plt>
   13cb0:	add	r0, r0, #1
   13cb4:	b	13cfc <__assert_fail@plt+0x1f88>
   13cb8:	movw	r1, #45872	; 0xb330
   13cbc:	movt	r1, #3
   13cc0:	add	r3, r1, #3600	; 0xe10
   13cc4:	ldrd	r2, [r3, #-8]
   13cc8:	strd	r2, [sp, #8]
   13ccc:	mov	r2, #512	; 0x200
   13cd0:	mov	r3, #0
   13cd4:	strd	r2, [sp]
   13cd8:	ldr	r3, [r1, #3588]	; 0xe04
   13cdc:	add	r2, sp, #20
   13ce0:	ldrd	r0, [r5, #80]	; 0x50
   13ce4:	bl	1d588 <__assert_fail@plt+0xb814>
   13ce8:	b	13cac <__assert_fail@plt+0x1f38>
   13cec:	movw	r3, #45872	; 0xb330
   13cf0:	movt	r3, #3
   13cf4:	ldr	r0, [r3, #3136]	; 0xc40
   13cf8:	add	r0, r0, #1
   13cfc:	add	r4, r4, r0
   13d00:	movw	r3, #45872	; 0xb330
   13d04:	movt	r3, #3
   13d08:	ldrb	r3, [r3, #3600]	; 0xe10
   13d0c:	cmp	r3, #0
   13d10:	beq	13d3c <__assert_fail@plt+0x1fc8>
   13d14:	movw	r3, #45872	; 0xb330
   13d18:	movt	r3, #3
   13d1c:	ldr	r3, [r3, #3116]	; 0xc2c
   13d20:	cmp	r3, #4
   13d24:	beq	13d88 <__assert_fail@plt+0x2014>
   13d28:	movw	r3, #45872	; 0xb330
   13d2c:	movt	r3, #3
   13d30:	ldr	r0, [r3, #3156]	; 0xc54
   13d34:	add	r0, r0, #1
   13d38:	add	r4, r4, r0
   13d3c:	mov	r0, r5
   13d40:	bl	138f0 <__assert_fail@plt+0x1b7c>
   13d44:	add	r4, r4, r0
   13d48:	movw	r3, #45872	; 0xb330
   13d4c:	movt	r3, #3
   13d50:	ldr	r3, [r3, #20]
   13d54:	cmp	r3, #0
   13d58:	beq	13d74 <__assert_fail@plt+0x2000>
   13d5c:	ldr	r2, [r5, #120]	; 0x78
   13d60:	ldr	r1, [r5, #32]
   13d64:	ldrb	r0, [r5, #132]	; 0x84
   13d68:	bl	123c8 <__assert_fail@plt+0x654>
   13d6c:	cmp	r0, #0
   13d70:	addne	r4, r4, #1
   13d74:	mov	r0, r4
   13d78:	add	sp, sp, #676	; 0x2a4
   13d7c:	ldrd	r4, [sp]
   13d80:	add	sp, sp, #8
   13d84:	pop	{pc}		; (ldr pc, [sp], #4)
   13d88:	ldr	r0, [r5, #128]	; 0x80
   13d8c:	bl	11b94 <strlen@plt>
   13d90:	add	r0, r0, #1
   13d94:	b	13d38 <__assert_fail@plt+0x1fc4>
   13d98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d9c:	strd	r6, [sp, #8]
   13da0:	strd	r8, [sp, #16]
   13da4:	strd	sl, [sp, #24]
   13da8:	str	lr, [sp, #32]
   13dac:	sub	sp, sp, #12
   13db0:	mov	sl, r0
   13db4:	movw	r3, #45872	; 0xb330
   13db8:	movt	r3, #3
   13dbc:	ldr	r1, [r3, #3604]	; 0xe14
   13dc0:	cmp	r1, #0
   13dc4:	beq	140b8 <__assert_fail@plt+0x2344>
   13dc8:	movw	r3, #45872	; 0xb330
   13dcc:	movt	r3, #3
   13dd0:	ldr	r3, [r3, #8]
   13dd4:	cmp	r1, r3
   13dd8:	bcc	14098 <__assert_fail@plt+0x2324>
   13ddc:	movw	r3, #45872	; 0xb330
   13de0:	movt	r3, #3
   13de4:	ldr	r4, [r3, #8]
   13de8:	ldr	r3, [r3, #3612]	; 0xe1c
   13dec:	cmp	r4, r3
   13df0:	bls	13eb4 <__assert_fail@plt+0x2140>
   13df4:	cmp	r4, r1, lsr #1
   13df8:	bcs	13f34 <__assert_fail@plt+0x21c0>
   13dfc:	movw	r5, #45872	; 0xb330
   13e00:	movt	r5, #3
   13e04:	mov	r2, #24
   13e08:	mov	r1, r4
   13e0c:	ldr	r0, [r5, #3608]	; 0xe18
   13e10:	bl	23f98 <_obstack_memory_used@@Base+0x3288>
   13e14:	str	r0, [r5, #3608]	; 0xe18
   13e18:	lsl	r5, r4, #1
   13e1c:	movw	r3, #45872	; 0xb330
   13e20:	movt	r3, #3
   13e24:	ldr	r3, [r3, #3612]	; 0xe1c
   13e28:	sub	r2, r5, r3
   13e2c:	add	r3, r3, #1
   13e30:	add	r3, r3, r5
   13e34:	mul	r0, r3, r2
   13e38:	cmp	r5, r3
   13e3c:	bhi	13f54 <__assert_fail@plt+0x21e0>
   13e40:	udiv	r2, r0, r2
   13e44:	cmp	r3, r2
   13e48:	bne	13f54 <__assert_fail@plt+0x21e0>
   13e4c:	mov	r1, #4
   13e50:	lsr	r0, r0, #1
   13e54:	bl	24040 <_obstack_memory_used@@Base+0x3330>
   13e58:	movw	r3, #45872	; 0xb330
   13e5c:	movt	r3, #3
   13e60:	ldr	r3, [r3, #3612]	; 0xe1c
   13e64:	cmp	r5, r3
   13e68:	bls	13ea8 <__assert_fail@plt+0x2134>
   13e6c:	movw	r2, #45872	; 0xb330
   13e70:	movt	r2, #3
   13e74:	add	r1, r3, r3, lsl #1
   13e78:	ldr	r2, [r2, #3608]	; 0xe18
   13e7c:	add	r2, r2, r1, lsl #2
   13e80:	add	r3, r3, #1
   13e84:	lsl	r3, r3, #2
   13e88:	add	r1, r5, #1
   13e8c:	lsl	r1, r1, #2
   13e90:	str	r0, [r2, #8]
   13e94:	add	r0, r0, r3
   13e98:	add	r2, r2, #12
   13e9c:	add	r3, r3, #4
   13ea0:	cmp	r3, r1
   13ea4:	bne	13e90 <__assert_fail@plt+0x211c>
   13ea8:	movw	r3, #45872	; 0xb330
   13eac:	movt	r3, #3
   13eb0:	str	r5, [r3, #3612]	; 0xe1c
   13eb4:	cmp	r4, #0
   13eb8:	beq	13f10 <__assert_fail@plt+0x219c>
   13ebc:	movw	r3, #45872	; 0xb330
   13ec0:	movt	r3, #3
   13ec4:	ldr	lr, [r3, #3608]	; 0xe18
   13ec8:	mov	r5, #3
   13ecc:	mov	r1, #0
   13ed0:	mov	r6, #1
   13ed4:	mov	ip, r5
   13ed8:	mov	r0, lr
   13edc:	strb	r6, [lr]
   13ee0:	str	r5, [lr, #4]
   13ee4:	mov	r3, #0
   13ee8:	ldr	r2, [r0, #8]
   13eec:	str	ip, [r2, r3, lsl #2]
   13ef0:	add	r3, r3, #1
   13ef4:	cmp	r3, r1
   13ef8:	bls	13ee8 <__assert_fail@plt+0x2174>
   13efc:	add	r1, r1, #1
   13f00:	add	lr, lr, #12
   13f04:	add	r5, r5, #3
   13f08:	cmp	r4, r1
   13f0c:	bne	13ed8 <__assert_fail@plt+0x2164>
   13f10:	movw	r3, #45872	; 0xb330
   13f14:	movt	r3, #3
   13f18:	ldr	r3, [r3, #8]
   13f1c:	cmp	r3, #0
   13f20:	beq	1402c <__assert_fail@plt+0x22b8>
   13f24:	mov	r5, #0
   13f28:	movw	r6, #45872	; 0xb330
   13f2c:	movt	r6, #3
   13f30:	b	14000 <__assert_fail@plt+0x228c>
   13f34:	movw	r5, #45872	; 0xb330
   13f38:	movt	r5, #3
   13f3c:	mov	r2, #12
   13f40:	ldr	r0, [r5, #3608]	; 0xe18
   13f44:	bl	23f98 <_obstack_memory_used@@Base+0x3288>
   13f48:	str	r0, [r5, #3608]	; 0xe18
   13f4c:	ldr	r5, [r5, #3604]	; 0xe14
   13f50:	b	13e1c <__assert_fail@plt+0x20a8>
   13f54:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   13f58:	add	r1, r3, #1
   13f5c:	udiv	lr, r5, r1
   13f60:	mls	r1, r1, lr, r5
   13f64:	b	13fa0 <__assert_fail@plt+0x222c>
   13f68:	add	r3, r3, #1
   13f6c:	add	r2, r2, #12
   13f70:	cmp	r4, r3
   13f74:	beq	13ff0 <__assert_fail@plt+0x227c>
   13f78:	mov	ip, r2
   13f7c:	ldrb	r1, [r2]
   13f80:	cmp	r1, #0
   13f84:	beq	13f68 <__assert_fail@plt+0x21f4>
   13f88:	cmp	sl, #0
   13f8c:	beq	13f58 <__assert_fail@plt+0x21e4>
   13f90:	add	r1, fp, r3
   13f94:	add	lr, r3, #1
   13f98:	udiv	r1, r1, lr
   13f9c:	udiv	r1, r5, r1
   13fa0:	cmp	r1, r3
   13fa4:	movne	lr, #2
   13fa8:	moveq	lr, #0
   13fac:	add	lr, lr, r0
   13fb0:	ldr	r8, [ip, #8]
   13fb4:	ldr	r9, [r8, r1, lsl #2]
   13fb8:	cmp	r9, lr
   13fbc:	bcs	13f68 <__assert_fail@plt+0x21f4>
   13fc0:	ldr	r7, [ip, #4]
   13fc4:	sub	r7, r7, r9
   13fc8:	add	r7, r7, lr
   13fcc:	str	r7, [ip, #4]
   13fd0:	str	lr, [r8, r1, lsl #2]
   13fd4:	ldr	r1, [ip, #4]
   13fd8:	ldr	lr, [sp, #4]
   13fdc:	cmp	r1, lr
   13fe0:	movcs	r1, #0
   13fe4:	movcc	r1, #1
   13fe8:	strb	r1, [ip]
   13fec:	b	13f68 <__assert_fail@plt+0x21f4>
   13ff0:	add	r5, r5, #1
   13ff4:	ldr	r3, [r6, #8]
   13ff8:	cmp	r3, r5
   13ffc:	bls	1402c <__assert_fail@plt+0x22b8>
   14000:	ldr	r3, [r6, #16]
   14004:	ldr	r0, [r3, r5, lsl #2]
   14008:	bl	13be8 <__assert_fail@plt+0x1e74>
   1400c:	cmp	r4, #0
   14010:	beq	13ff0 <__assert_fail@plt+0x227c>
   14014:	ldr	fp, [r6, #8]
   14018:	ldr	r3, [r6, #3188]	; 0xc74
   1401c:	str	r3, [sp, #4]
   14020:	ldr	r2, [r6, #3608]	; 0xe18
   14024:	mov	r3, #0
   14028:	b	13f78 <__assert_fail@plt+0x2204>
   1402c:	cmp	r4, #1
   14030:	bls	14078 <__assert_fail@plt+0x2304>
   14034:	movw	r3, #45872	; 0xb330
   14038:	movt	r3, #3
   1403c:	ldr	r3, [r3, #3608]	; 0xe18
   14040:	add	r2, r4, r4, lsl #1
   14044:	lsl	r2, r2, #2
   14048:	add	r1, r3, r2
   1404c:	ldrb	r1, [r1, #-12]
   14050:	cmp	r1, #0
   14054:	bne	14078 <__assert_fail@plt+0x2304>
   14058:	add	r3, r3, r2
   1405c:	sub	r4, r4, #1
   14060:	cmp	r4, #1
   14064:	beq	14078 <__assert_fail@plt+0x2304>
   14068:	sub	r3, r3, #12
   1406c:	ldrb	r2, [r3, #-12]
   14070:	cmp	r2, #0
   14074:	beq	1405c <__assert_fail@plt+0x22e8>
   14078:	mov	r0, r4
   1407c:	add	sp, sp, #12
   14080:	ldrd	r4, [sp]
   14084:	ldrd	r6, [sp, #8]
   14088:	ldrd	r8, [sp, #16]
   1408c:	ldrd	sl, [sp, #24]
   14090:	add	sp, sp, #32
   14094:	pop	{pc}		; (ldr pc, [sp], #4)
   14098:	movw	r3, #45872	; 0xb330
   1409c:	movt	r3, #3
   140a0:	ldr	r3, [r3, #3612]	; 0xe1c
   140a4:	cmp	r1, r3
   140a8:	movls	r4, r1
   140ac:	bls	13ebc <__assert_fail@plt+0x2148>
   140b0:	mov	r4, r1
   140b4:	b	13df4 <__assert_fail@plt+0x2080>
   140b8:	movw	r3, #45872	; 0xb330
   140bc:	movt	r3, #3
   140c0:	ldr	r4, [r3, #8]
   140c4:	ldr	r3, [r3, #3612]	; 0xe1c
   140c8:	cmp	r4, r3
   140cc:	bls	13eb4 <__assert_fail@plt+0x2140>
   140d0:	b	13dfc <__assert_fail@plt+0x2088>
   140d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   140d8:	strd	r6, [sp, #8]
   140dc:	str	r8, [sp, #16]
   140e0:	str	lr, [sp, #20]
   140e4:	mov	r6, r0
   140e8:	mov	r7, r1
   140ec:	mov	r5, r2
   140f0:	mov	r1, #46	; 0x2e
   140f4:	ldr	r0, [r0]
   140f8:	bl	11c78 <strrchr@plt>
   140fc:	mov	r4, r0
   14100:	mov	r1, #46	; 0x2e
   14104:	ldr	r0, [r7]
   14108:	bl	11c78 <strrchr@plt>
   1410c:	movw	r3, #39300	; 0x9984
   14110:	movt	r3, #2
   14114:	mov	r1, r3
   14118:	cmp	r0, #0
   1411c:	movne	r1, r0
   14120:	cmp	r4, #0
   14124:	movne	r0, r4
   14128:	moveq	r0, r3
   1412c:	blx	r5
   14130:	cmp	r0, #0
   14134:	bne	14144 <__assert_fail@plt+0x23d0>
   14138:	ldr	r1, [r7]
   1413c:	ldr	r0, [r6]
   14140:	blx	r5
   14144:	ldrd	r4, [sp]
   14148:	ldrd	r6, [sp, #8]
   1414c:	ldr	r8, [sp, #16]
   14150:	add	sp, sp, #20
   14154:	pop	{pc}		; (ldr pc, [sp], #4)
   14158:	str	r4, [sp, #-8]!
   1415c:	str	lr, [sp, #4]
   14160:	mov	r3, r1
   14164:	movw	r2, #6304	; 0x18a0
   14168:	movt	r2, #1
   1416c:	mov	r1, r0
   14170:	mov	r0, r3
   14174:	bl	140d4 <__assert_fail@plt+0x2360>
   14178:	ldr	r4, [sp]
   1417c:	add	sp, sp, #4
   14180:	pop	{pc}		; (ldr pc, [sp], #4)
   14184:	str	r4, [sp, #-8]!
   14188:	str	lr, [sp, #4]
   1418c:	movw	r2, #6304	; 0x18a0
   14190:	movt	r2, #1
   14194:	bl	140d4 <__assert_fail@plt+0x2360>
   14198:	ldr	r4, [sp]
   1419c:	add	sp, sp, #4
   141a0:	pop	{pc}		; (ldr pc, [sp], #4)
   141a4:	str	r4, [sp, #-8]!
   141a8:	str	lr, [sp, #4]
   141ac:	mov	r3, r1
   141b0:	movw	r2, #13232	; 0x33b0
   141b4:	movt	r2, #1
   141b8:	mov	r1, r0
   141bc:	mov	r0, r3
   141c0:	bl	140d4 <__assert_fail@plt+0x2360>
   141c4:	ldr	r4, [sp]
   141c8:	add	sp, sp, #4
   141cc:	pop	{pc}		; (ldr pc, [sp], #4)
   141d0:	str	r4, [sp, #-8]!
   141d4:	str	lr, [sp, #4]
   141d8:	movw	r2, #13232	; 0x33b0
   141dc:	movt	r2, #1
   141e0:	bl	140d4 <__assert_fail@plt+0x2360>
   141e4:	ldr	r4, [sp]
   141e8:	add	sp, sp, #4
   141ec:	pop	{pc}		; (ldr pc, [sp], #4)
   141f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   141f4:	strd	r6, [sp, #8]
   141f8:	strd	r8, [sp, #16]
   141fc:	str	sl, [sp, #24]
   14200:	str	lr, [sp, #28]
   14204:	mov	r8, r1
   14208:	subs	r7, r0, #0
   1420c:	beq	14234 <__assert_fail@plt+0x24c0>
   14210:	movw	r3, #45872	; 0xb330
   14214:	movt	r3, #3
   14218:	ldr	r3, [r3, #3616]	; 0xe20
   1421c:	cmp	r3, #0
   14220:	beq	14234 <__assert_fail@plt+0x24c0>
   14224:	mov	r2, #0
   14228:	mov	r1, r7
   1422c:	mov	r0, r2
   14230:	bl	128cc <__assert_fail@plt+0xb58>
   14234:	movw	r3, #45872	; 0xb330
   14238:	movt	r3, #3
   1423c:	ldr	r4, [r3, #8]
   14240:	mov	r6, r3
   14244:	mov	r9, #0
   14248:	b	1428c <__assert_fail@plt+0x2518>
   1424c:	ldrb	r3, [r0, #1]
   14250:	cmp	r3, #46	; 0x2e
   14254:	moveq	r3, #2
   14258:	movne	r3, #1
   1425c:	ldrb	r3, [r0, r3]
   14260:	cmp	r3, #47	; 0x2f
   14264:	cmpne	r3, #0
   14268:	beq	1428c <__assert_fail@plt+0x2518>
   1426c:	b	142d0 <__assert_fail@plt+0x255c>
   14270:	mov	r2, r8
   14274:	ldr	r1, [r5, #4]
   14278:	ldr	r0, [r5]
   1427c:	bl	128cc <__assert_fail@plt+0xb58>
   14280:	ldr	r3, [r5, #120]	; 0x78
   14284:	cmp	r3, #9
   14288:	beq	14308 <__assert_fail@plt+0x2594>
   1428c:	sub	r4, r4, #1
   14290:	cmn	r4, #1
   14294:	beq	14314 <__assert_fail@plt+0x25a0>
   14298:	ldr	r3, [r6, #16]
   1429c:	ldr	r5, [r3, r4, lsl #2]
   142a0:	ldr	r3, [r5, #120]	; 0x78
   142a4:	cmp	r3, #9
   142a8:	cmpne	r3, #3
   142ac:	bne	1428c <__assert_fail@plt+0x2518>
   142b0:	cmp	r7, #0
   142b4:	beq	14270 <__assert_fail@plt+0x24fc>
   142b8:	ldr	sl, [r5]
   142bc:	mov	r0, sl
   142c0:	bl	1aeb4 <__assert_fail@plt+0x9140>
   142c4:	ldrb	r3, [r0]
   142c8:	cmp	r3, #46	; 0x2e
   142cc:	beq	1424c <__assert_fail@plt+0x24d8>
   142d0:	ldrb	r3, [sl]
   142d4:	cmp	r3, #47	; 0x2f
   142d8:	beq	14270 <__assert_fail@plt+0x24fc>
   142dc:	mov	r2, r9
   142e0:	mov	r1, sl
   142e4:	mov	r0, r7
   142e8:	bl	1bbe4 <__assert_fail@plt+0x9e70>
   142ec:	mov	sl, r0
   142f0:	mov	r2, r8
   142f4:	ldr	r1, [r5, #4]
   142f8:	bl	128cc <__assert_fail@plt+0xb58>
   142fc:	mov	r0, sl
   14300:	bl	1c200 <__assert_fail@plt+0xa48c>
   14304:	b	14280 <__assert_fail@plt+0x250c>
   14308:	mov	r0, r5
   1430c:	bl	12fd4 <__assert_fail@plt+0x1260>
   14310:	b	1428c <__assert_fail@plt+0x2518>
   14314:	movw	r3, #45872	; 0xb330
   14318:	movt	r3, #3
   1431c:	ldr	r3, [r3, #8]
   14320:	cmp	r3, #0
   14324:	beq	1435c <__assert_fail@plt+0x25e8>
   14328:	movw	r2, #45872	; 0xb330
   1432c:	movt	r2, #3
   14330:	ldr	r0, [r2, #16]
   14334:	mov	r2, r0
   14338:	add	ip, r0, r3, lsl #2
   1433c:	mov	r3, #0
   14340:	ldr	r1, [r2], #4
   14344:	str	r1, [r0, r3, lsl #2]
   14348:	ldr	r1, [r1, #120]	; 0x78
   1434c:	cmp	r1, #9
   14350:	addne	r3, r3, #1
   14354:	cmp	ip, r2
   14358:	bne	14340 <__assert_fail@plt+0x25cc>
   1435c:	movw	r2, #45872	; 0xb330
   14360:	movt	r2, #3
   14364:	str	r3, [r2, #8]
   14368:	ldrd	r4, [sp]
   1436c:	ldrd	r6, [sp, #8]
   14370:	ldrd	r8, [sp, #16]
   14374:	ldr	sl, [sp, #24]
   14378:	add	sp, sp, #28
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14384:	strd	r6, [sp, #8]
   14388:	strd	r8, [sp, #16]
   1438c:	str	sl, [sp, #24]
   14390:	str	lr, [sp, #28]
   14394:	sub	sp, sp, #8
   14398:	mov	r5, r0
   1439c:	mov	r7, r1
   143a0:	bl	11b94 <strlen@plt>
   143a4:	add	r1, r0, #1
   143a8:	mov	r0, #3
   143ac:	bl	24040 <_obstack_memory_used@@Base+0x3330>
   143b0:	mov	sl, r0
   143b4:	mov	r4, r0
   143b8:	movw	r6, #45872	; 0xb330
   143bc:	movt	r6, #3
   143c0:	movw	r8, #28624	; 0x6fd0
   143c4:	movt	r8, #2
   143c8:	mvn	r9, #0
   143cc:	b	143ec <__assert_fail@plt+0x2678>
   143d0:	str	r3, [sp]
   143d4:	mov	r3, r8
   143d8:	mov	r2, r9
   143dc:	mov	r1, #1
   143e0:	mov	r0, r4
   143e4:	bl	11bc4 <__sprintf_chk@plt>
   143e8:	add	r4, r4, #3
   143ec:	ldrb	r3, [r5], #1
   143f0:	cmp	r3, #0
   143f4:	beq	1442c <__assert_fail@plt+0x26b8>
   143f8:	cmp	r3, #47	; 0x2f
   143fc:	movne	r2, #0
   14400:	andeq	r2, r7, #1
   14404:	cmp	r2, #0
   14408:	movne	r3, #47	; 0x2f
   1440c:	strbne	r3, [r4], #1
   14410:	bne	143ec <__assert_fail@plt+0x2678>
   14414:	add	r2, r6, r3
   14418:	ldrb	r2, [r2, #3620]	; 0xe24
   1441c:	cmp	r2, #0
   14420:	strbne	r3, [r4], #1
   14424:	bne	143ec <__assert_fail@plt+0x2678>
   14428:	b	143d0 <__assert_fail@plt+0x265c>
   1442c:	strb	r3, [r4]
   14430:	mov	r0, sl
   14434:	add	sp, sp, #8
   14438:	ldrd	r4, [sp]
   1443c:	ldrd	r6, [sp, #8]
   14440:	ldrd	r8, [sp, #16]
   14444:	ldr	sl, [sp, #24]
   14448:	add	sp, sp, #28
   1444c:	pop	{pc}		; (ldr pc, [sp], #4)
   14450:	ldr	r2, [pc, #96]	; 144b8 <__assert_fail@plt+0x2744>
   14454:	ldr	r3, [r2, #-8]
   14458:	ldr	ip, [r2, #-4]
   1445c:	adds	r3, r3, #1
   14460:	adc	ip, ip, #0
   14464:	str	r3, [r2, #-8]
   14468:	str	ip, [r2, #-4]
   1446c:	movw	r3, #45860	; 0xb324
   14470:	movt	r3, #3
   14474:	ldr	r3, [r3]
   14478:	ldr	r2, [r3, #20]
   1447c:	ldr	r1, [r3, #24]
   14480:	cmp	r2, r1
   14484:	bcs	14498 <__assert_fail@plt+0x2724>
   14488:	add	r1, r2, #1
   1448c:	str	r1, [r3, #20]
   14490:	strb	r0, [r2]
   14494:	bx	lr
   14498:	str	r4, [sp, #-8]!
   1449c:	str	lr, [sp, #4]
   144a0:	mov	r1, r0
   144a4:	mov	r0, r3
   144a8:	bl	11c48 <__overflow@plt>
   144ac:	ldr	r4, [sp]
   144b0:	add	sp, sp, #4
   144b4:	pop	{pc}		; (ldr pc, [sp], #4)
   144b8:	andeq	ip, r3, r0, ror #4
   144bc:	str	r4, [sp, #-8]!
   144c0:	str	lr, [sp, #4]
   144c4:	bl	123c8 <__assert_fail@plt+0x654>
   144c8:	subs	r4, r0, #0
   144cc:	bne	144e4 <__assert_fail@plt+0x2770>
   144d0:	adds	r0, r4, #0
   144d4:	movne	r0, #1
   144d8:	ldr	r4, [sp]
   144dc:	add	sp, sp, #4
   144e0:	pop	{pc}		; (ldr pc, [sp], #4)
   144e4:	mov	r0, r4
   144e8:	bl	14450 <__assert_fail@plt+0x26dc>
   144ec:	b	144d0 <__assert_fail@plt+0x275c>
   144f0:	cmp	r0, r1
   144f4:	bxcs	lr
   144f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144fc:	strd	r6, [sp, #8]
   14500:	str	r8, [sp, #16]
   14504:	str	lr, [sp, #20]
   14508:	mov	r4, r0
   1450c:	mov	r5, r1
   14510:	movw	r6, #45872	; 0xb330
   14514:	movt	r6, #3
   14518:	movw	r7, #45860	; 0xb324
   1451c:	movt	r7, #3
   14520:	mov	r8, #32
   14524:	b	14560 <__assert_fail@plt+0x27ec>
   14528:	mov	r1, #9
   1452c:	bl	11c48 <__overflow@plt>
   14530:	b	145a4 <__assert_fail@plt+0x2830>
   14534:	ldr	r0, [r7]
   14538:	ldr	r3, [r0, #20]
   1453c:	ldr	r2, [r0, #24]
   14540:	cmp	r3, r2
   14544:	addcc	r2, r3, #1
   14548:	strcc	r2, [r0, #20]
   1454c:	strbcc	r8, [r3]
   14550:	bcs	145b4 <__assert_fail@plt+0x2840>
   14554:	add	r4, r4, #1
   14558:	cmp	r5, r4
   1455c:	bls	145c0 <__assert_fail@plt+0x284c>
   14560:	ldr	r3, [r6, #3888]	; 0xf30
   14564:	cmp	r3, #0
   14568:	beq	14534 <__assert_fail@plt+0x27c0>
   1456c:	udiv	r1, r5, r3
   14570:	add	r2, r4, #1
   14574:	udiv	r3, r2, r3
   14578:	cmp	r1, r3
   1457c:	bls	14534 <__assert_fail@plt+0x27c0>
   14580:	ldr	r0, [r7]
   14584:	ldr	r3, [r0, #20]
   14588:	ldr	r2, [r0, #24]
   1458c:	cmp	r3, r2
   14590:	addcc	r2, r3, #1
   14594:	strcc	r2, [r0, #20]
   14598:	movcc	r2, #9
   1459c:	strbcc	r2, [r3]
   145a0:	bcs	14528 <__assert_fail@plt+0x27b4>
   145a4:	ldr	r3, [r6, #3888]	; 0xf30
   145a8:	udiv	r4, r4, r3
   145ac:	mla	r4, r3, r4, r3
   145b0:	b	14558 <__assert_fail@plt+0x27e4>
   145b4:	mov	r1, r8
   145b8:	bl	11c48 <__overflow@plt>
   145bc:	b	14554 <__assert_fail@plt+0x27e0>
   145c0:	ldrd	r4, [sp]
   145c4:	ldrd	r6, [sp, #8]
   145c8:	ldr	r8, [sp, #16]
   145cc:	add	sp, sp, #20
   145d0:	pop	{pc}		; (ldr pc, [sp], #4)
   145d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145d8:	strd	r6, [sp, #8]
   145dc:	str	r8, [sp, #16]
   145e0:	str	lr, [sp, #20]
   145e4:	mov	r2, r1
   145e8:	ldr	r3, [pc, #52]	; 14624 <__assert_fail@plt+0x28b0>
   145ec:	ldrd	r4, [r3, #-8]
   145f0:	adds	r6, r4, r1
   145f4:	adc	r7, r5, #0
   145f8:	strd	r6, [r3, #-8]
   145fc:	movw	r3, #45860	; 0xb324
   14600:	movt	r3, #3
   14604:	ldr	r3, [r3]
   14608:	mov	r1, #1
   1460c:	bl	11960 <fwrite_unlocked@plt>
   14610:	ldrd	r4, [sp]
   14614:	ldrd	r6, [sp, #8]
   14618:	ldr	r8, [sp, #16]
   1461c:	add	sp, sp, #20
   14620:	pop	{pc}		; (ldr pc, [sp], #4)
   14624:	andeq	ip, r3, r0, ror #4
   14628:	str	r4, [sp, #-8]!
   1462c:	str	lr, [sp, #4]
   14630:	mov	r4, r0
   14634:	bl	11b94 <strlen@plt>
   14638:	mov	r1, r0
   1463c:	mov	r0, r4
   14640:	bl	145d4 <__assert_fail@plt+0x2860>
   14644:	ldr	r4, [sp]
   14648:	add	sp, sp, #4
   1464c:	pop	{pc}		; (ldr pc, [sp], #4)
   14650:	movw	r3, #45872	; 0xb330
   14654:	movt	r3, #3
   14658:	ldrb	r3, [r3, #3892]	; 0xf34
   1465c:	cmp	r3, #0
   14660:	bxeq	lr
   14664:	str	r4, [sp, #-8]!
   14668:	str	lr, [sp, #4]
   1466c:	movw	r0, #28632	; 0x6fd8
   14670:	movt	r0, #2
   14674:	bl	14628 <__assert_fail@plt+0x28b4>
   14678:	ldr	r4, [sp]
   1467c:	add	sp, sp, #4
   14680:	pop	{pc}		; (ldr pc, [sp], #4)
   14684:	movw	r3, #45872	; 0xb330
   14688:	movt	r3, #3
   1468c:	ldrb	r3, [r3, #3892]	; 0xf34
   14690:	cmp	r3, #0
   14694:	bxeq	lr
   14698:	str	r4, [sp, #-8]!
   1469c:	str	lr, [sp, #4]
   146a0:	mov	r4, r0
   146a4:	ldr	r3, [r0, #16]
   146a8:	ldr	r2, [r0, #12]
   146ac:	sub	r3, r3, r2
   146b0:	cmp	r3, #7
   146b4:	bls	146ec <__assert_fail@plt+0x2978>
   146b8:	ldr	r2, [r4, #12]
   146bc:	movw	r3, #45872	; 0xb330
   146c0:	movt	r3, #3
   146c4:	ldr	r1, [r3, #3880]	; 0xf28
   146c8:	ldr	r3, [r3, #3884]	; 0xf2c
   146cc:	str	r1, [r2]
   146d0:	str	r3, [r2, #4]
   146d4:	ldr	r3, [r4, #12]
   146d8:	add	r3, r3, #8
   146dc:	str	r3, [r4, #12]
   146e0:	ldr	r4, [sp]
   146e4:	add	sp, sp, #4
   146e8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ec:	mov	r1, #8
   146f0:	bl	20b34 <_obstack_newchunk@@Base>
   146f4:	b	146b8 <__assert_fail@plt+0x2944>
   146f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   146fc:	strd	r6, [sp, #8]
   14700:	strd	r8, [sp, #16]
   14704:	str	sl, [sp, #24]
   14708:	str	lr, [sp, #28]
   1470c:	sub	sp, sp, #144	; 0x90
   14710:	mov	r8, r0
   14714:	movw	r3, #45872	; 0xb330
   14718:	movt	r3, #3
   1471c:	ldrb	r3, [r3, #3893]	; 0xf35
   14720:	cmp	r3, #0
   14724:	beq	14760 <__assert_fail@plt+0x29ec>
   14728:	movw	r3, #45860	; 0xb324
   1472c:	movt	r3, #3
   14730:	ldr	r3, [r3]
   14734:	mov	r2, #1
   14738:	ldr	r1, [r8]
   1473c:	ldr	r0, [r8, #4]
   14740:	bl	11960 <fwrite_unlocked@plt>
   14744:	add	sp, sp, #144	; 0x90
   14748:	ldrd	r4, [sp]
   1474c:	ldrd	r6, [sp, #8]
   14750:	ldrd	r8, [sp, #16]
   14754:	ldr	sl, [sp, #24]
   14758:	add	sp, sp, #28
   1475c:	pop	{pc}		; (ldr pc, [sp], #4)
   14760:	movw	r3, #45872	; 0xb330
   14764:	movt	r3, #3
   14768:	mov	r0, #1
   1476c:	strb	r0, [r3, #3893]	; 0xf35
   14770:	bl	11b88 <tcgetpgrp@plt>
   14774:	cmp	r0, #0
   14778:	bge	14784 <__assert_fail@plt+0x2a10>
   1477c:	bl	14858 <__assert_fail@plt+0x2ae4>
   14780:	b	14728 <__assert_fail@plt+0x29b4>
   14784:	ldr	r0, [pc, #200]	; 14854 <__assert_fail@plt+0x2ae0>
   14788:	bl	11c60 <sigemptyset@plt>
   1478c:	movw	r7, #22608	; 0x5850
   14790:	movt	r7, #2
   14794:	add	r5, r7, #300	; 0x12c
   14798:	add	r7, r7, #348	; 0x15c
   1479c:	mov	r4, r5
   147a0:	ldr	r9, [pc, #172]	; 14854 <__assert_fail@plt+0x2ae0>
   147a4:	b	147bc <__assert_fail@plt+0x2a48>
   147a8:	mov	r1, r6
   147ac:	mov	r0, r9
   147b0:	bl	11aec <sigaddset@plt>
   147b4:	cmp	r4, r7
   147b8:	beq	147e0 <__assert_fail@plt+0x2a6c>
   147bc:	ldr	r6, [r4], #4
   147c0:	add	r2, sp, #4
   147c4:	mov	r1, #0
   147c8:	mov	r0, r6
   147cc:	bl	11a14 <sigaction@plt>
   147d0:	ldr	r3, [sp, #4]
   147d4:	cmp	r3, #1
   147d8:	bne	147a8 <__assert_fail@plt+0x2a34>
   147dc:	b	147b4 <__assert_fail@plt+0x2a40>
   147e0:	mov	r2, #128	; 0x80
   147e4:	ldr	r1, [pc, #104]	; 14854 <__assert_fail@plt+0x2ae0>
   147e8:	add	r0, sp, #8
   147ec:	bl	11930 <memcpy@plt>
   147f0:	mov	r3, #268435456	; 0x10000000
   147f4:	str	r3, [sp, #136]	; 0x88
   147f8:	ldr	r6, [pc, #84]	; 14854 <__assert_fail@plt+0x2ae0>
   147fc:	movw	sl, #7936	; 0x1f00
   14800:	movt	sl, #1
   14804:	movw	r9, #7900	; 0x1edc
   14808:	movt	r9, #1
   1480c:	b	14818 <__assert_fail@plt+0x2aa4>
   14810:	cmp	r5, r7
   14814:	beq	1477c <__assert_fail@plt+0x2a08>
   14818:	ldr	r4, [r5], #4
   1481c:	mov	r1, r4
   14820:	mov	r0, r6
   14824:	bl	1199c <sigismember@plt>
   14828:	cmp	r0, #0
   1482c:	beq	14810 <__assert_fail@plt+0x2a9c>
   14830:	cmp	r4, #20
   14834:	moveq	r3, sl
   14838:	movne	r3, r9
   1483c:	str	r3, [sp, #4]
   14840:	mov	r2, #0
   14844:	add	r1, sp, #4
   14848:	mov	r0, r4
   1484c:	bl	11a14 <sigaction@plt>
   14850:	b	14810 <__assert_fail@plt+0x2a9c>
   14854:	andeq	ip, r3, r8, ror #4
   14858:	str	r4, [sp, #-8]!
   1485c:	str	lr, [sp, #4]
   14860:	movw	r3, #45520	; 0xb1d0
   14864:	movt	r3, #3
   14868:	ldr	r3, [r3, #20]
   1486c:	cmp	r3, #0
   14870:	beq	14888 <__assert_fail@plt+0x2b14>
   14874:	ldr	r0, [pc, #48]	; 148ac <__assert_fail@plt+0x2b38>
   14878:	bl	146f8 <__assert_fail@plt+0x2984>
   1487c:	ldr	r4, [sp]
   14880:	add	sp, sp, #4
   14884:	pop	{pc}		; (ldr pc, [sp], #4)
   14888:	movw	r4, #45520	; 0xb1d0
   1488c:	movt	r4, #3
   14890:	mov	r0, r4
   14894:	bl	146f8 <__assert_fail@plt+0x2984>
   14898:	add	r0, r4, #24
   1489c:	bl	146f8 <__assert_fail@plt+0x2984>
   148a0:	add	r0, r4, #8
   148a4:	bl	146f8 <__assert_fail@plt+0x2984>
   148a8:	b	1487c <__assert_fail@plt+0x2b08>
   148ac:	andeq	fp, r3, r0, ror #3
   148b0:	movw	r3, #45872	; 0xb330
   148b4:	movt	r3, #3
   148b8:	ldrb	r3, [r3, #4024]	; 0xfb8
   148bc:	cmp	r3, #0
   148c0:	bxeq	lr
   148c4:	str	r4, [sp, #-8]!
   148c8:	str	lr, [sp, #4]
   148cc:	mov	r0, #4
   148d0:	bl	12590 <__assert_fail@plt+0x81c>
   148d4:	cmp	r0, #0
   148d8:	bne	148e8 <__assert_fail@plt+0x2b74>
   148dc:	ldr	r4, [sp]
   148e0:	add	sp, sp, #4
   148e4:	pop	{pc}		; (ldr pc, [sp], #4)
   148e8:	movw	r4, #45520	; 0xb1d0
   148ec:	movt	r4, #3
   148f0:	mov	r0, r4
   148f4:	bl	146f8 <__assert_fail@plt+0x2984>
   148f8:	add	r0, r4, #32
   148fc:	bl	146f8 <__assert_fail@plt+0x2984>
   14900:	add	r0, r4, #8
   14904:	bl	146f8 <__assert_fail@plt+0x2984>
   14908:	b	148dc <__assert_fail@plt+0x2b68>
   1490c:	str	r4, [sp, #-8]!
   14910:	str	lr, [sp, #4]
   14914:	movw	r4, #45520	; 0xb1d0
   14918:	movt	r4, #3
   1491c:	mov	r0, r4
   14920:	bl	146f8 <__assert_fail@plt+0x2984>
   14924:	add	r0, r4, #8
   14928:	bl	146f8 <__assert_fail@plt+0x2984>
   1492c:	ldr	r4, [sp]
   14930:	add	sp, sp, #4
   14934:	pop	{pc}		; (ldr pc, [sp], #4)
   14938:	strd	r4, [sp, #-16]!
   1493c:	str	r6, [sp, #8]
   14940:	str	lr, [sp, #12]
   14944:	sub	sp, sp, #128	; 0x80
   14948:	movw	r4, #45872	; 0xb330
   1494c:	movt	r4, #3
   14950:	add	r6, r4, #3888	; 0xf30
   14954:	add	r6, r6, #8
   14958:	b	149bc <__assert_fail@plt+0x2c48>
   1495c:	ldrb	r3, [r4, #3893]	; 0xf35
   14960:	cmp	r3, #0
   14964:	bne	149e8 <__assert_fail@plt+0x2c74>
   14968:	movw	r3, #45860	; 0xb324
   1496c:	movt	r3, #3
   14970:	ldr	r0, [r3]
   14974:	bl	119e4 <fflush_unlocked@plt>
   14978:	mov	r2, sp
   1497c:	mov	r1, r6
   14980:	mov	r0, #0
   14984:	bl	118dc <sigprocmask@plt>
   14988:	ldr	r5, [r4]
   1498c:	ldr	r3, [r4, #4]
   14990:	cmp	r3, #0
   14994:	beq	149f0 <__assert_fail@plt+0x2c7c>
   14998:	sub	r3, r3, #1
   1499c:	str	r3, [r4, #4]
   149a0:	mov	r5, #19
   149a4:	mov	r0, r5
   149a8:	bl	1187c <raise@plt>
   149ac:	mov	r2, #0
   149b0:	mov	r1, sp
   149b4:	mov	r0, #2
   149b8:	bl	118dc <sigprocmask@plt>
   149bc:	ldr	r3, [r4]
   149c0:	cmp	r3, #0
   149c4:	bne	1495c <__assert_fail@plt+0x2be8>
   149c8:	ldr	r3, [r4, #4]
   149cc:	cmp	r3, #0
   149d0:	bne	1495c <__assert_fail@plt+0x2be8>
   149d4:	add	sp, sp, #128	; 0x80
   149d8:	ldrd	r4, [sp]
   149dc:	ldr	r6, [sp, #8]
   149e0:	add	sp, sp, #12
   149e4:	pop	{pc}		; (ldr pc, [sp], #4)
   149e8:	bl	1490c <__assert_fail@plt+0x2b98>
   149ec:	b	14968 <__assert_fail@plt+0x2bf4>
   149f0:	mov	r1, #0
   149f4:	mov	r0, r5
   149f8:	bl	11954 <signal@plt>
   149fc:	b	149a4 <__assert_fail@plt+0x2c30>
   14a00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a04:	strd	r6, [sp, #8]
   14a08:	str	r8, [sp, #16]
   14a0c:	str	lr, [sp, #20]
   14a10:	ldr	r3, [r1, #12]
   14a14:	ldr	r5, [r1, #8]
   14a18:	sub	r6, r3, r5
   14a1c:	cmp	r6, #7
   14a20:	bls	14ac8 <__assert_fail@plt+0x2d54>
   14a24:	cmp	r3, r5
   14a28:	beq	14adc <__assert_fail@plt+0x2d68>
   14a2c:	ldr	r2, [r1, #24]
   14a30:	add	r3, r3, r2
   14a34:	bic	r3, r3, r2
   14a38:	ldr	r2, [r1, #4]
   14a3c:	ldr	ip, [r1, #16]
   14a40:	sub	lr, r3, r2
   14a44:	sub	r2, ip, r2
   14a48:	cmp	lr, r2
   14a4c:	movhi	r3, ip
   14a50:	str	r3, [r1, #12]
   14a54:	str	r3, [r1, #8]
   14a58:	movw	r3, #45860	; 0xb324
   14a5c:	movt	r3, #3
   14a60:	ldr	r1, [r3]
   14a64:	bl	11864 <fputs_unlocked@plt>
   14a68:	sub	r5, r5, #8
   14a6c:	lsr	r6, r6, #3
   14a70:	mov	r4, #0
   14a74:	movw	r7, #28636	; 0x6fdc
   14a78:	movt	r7, #2
   14a7c:	mov	r8, #1
   14a80:	ldrd	r2, [r5, #8]!
   14a84:	mov	r1, r7
   14a88:	mov	r0, r8
   14a8c:	bl	11bf4 <__printf_chk@plt>
   14a90:	add	r4, r4, #1
   14a94:	cmp	r6, r4
   14a98:	bhi	14a80 <__assert_fail@plt+0x2d0c>
   14a9c:	movw	r3, #45860	; 0xb324
   14aa0:	movt	r3, #3
   14aa4:	ldr	r0, [r3]
   14aa8:	ldr	r3, [r0, #20]
   14aac:	ldr	r2, [r0, #24]
   14ab0:	cmp	r3, r2
   14ab4:	addcc	r2, r3, #1
   14ab8:	strcc	r2, [r0, #20]
   14abc:	movcc	r2, #10
   14ac0:	strbcc	r2, [r3]
   14ac4:	bcs	14aec <__assert_fail@plt+0x2d78>
   14ac8:	ldrd	r4, [sp]
   14acc:	ldrd	r6, [sp, #8]
   14ad0:	ldr	r8, [sp, #16]
   14ad4:	add	sp, sp, #20
   14ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   14adc:	ldrb	r2, [r1, #40]	; 0x28
   14ae0:	orr	r2, r2, #2
   14ae4:	strb	r2, [r1, #40]	; 0x28
   14ae8:	b	14a2c <__assert_fail@plt+0x2cb8>
   14aec:	mov	r1, #10
   14af0:	bl	11c48 <__overflow@plt>
   14af4:	b	14ac8 <__assert_fail@plt+0x2d54>
   14af8:	strd	r4, [sp, #-12]!
   14afc:	str	lr, [sp, #8]
   14b00:	sub	sp, sp, #12
   14b04:	subs	r5, r0, #0
   14b08:	beq	14b54 <__assert_fail@plt+0x2de0>
   14b0c:	mov	r1, #0
   14b10:	mov	r0, r5
   14b14:	bl	1ec44 <__assert_fail@plt+0xced0>
   14b18:	ldr	r3, [sp, #24]
   14b1c:	sub	r4, r3, r0
   14b20:	bic	r4, r4, r4, asr #31
   14b24:	mov	r0, r5
   14b28:	bl	14628 <__assert_fail@plt+0x28b4>
   14b2c:	mov	r5, #32
   14b30:	mov	r0, r5
   14b34:	bl	14450 <__assert_fail@plt+0x26dc>
   14b38:	sub	r4, r4, #1
   14b3c:	cmn	r4, #1
   14b40:	bne	14b30 <__assert_fail@plt+0x2dbc>
   14b44:	add	sp, sp, #12
   14b48:	ldrd	r4, [sp]
   14b4c:	add	sp, sp, #8
   14b50:	pop	{pc}		; (ldr pc, [sp], #4)
   14b54:	strd	r2, [sp]
   14b58:	ldr	r2, [sp, #24]
   14b5c:	movw	r1, #28644	; 0x6fe4
   14b60:	movt	r1, #2
   14b64:	mov	r0, #1
   14b68:	bl	11bf4 <__printf_chk@plt>
   14b6c:	ldr	ip, [pc, #24]	; 14b8c <__assert_fail@plt+0x2e18>
   14b70:	ldrd	r2, [ip, #-8]
   14b74:	adds	r4, r2, r0
   14b78:	adc	r5, r3, r0, asr #31
   14b7c:	mov	r0, r4
   14b80:	mov	r1, r5
   14b84:	strd	r0, [ip, #-8]
   14b88:	b	14b44 <__assert_fail@plt+0x2dd0>
   14b8c:	andeq	ip, r3, r0, ror #4
   14b90:	strd	r4, [sp, #-12]!
   14b94:	str	lr, [sp, #8]
   14b98:	sub	sp, sp, #12
   14b9c:	mov	r4, r0
   14ba0:	mov	r5, r1
   14ba4:	cmp	r2, #0
   14ba8:	movweq	r0, #28620	; 0x6fcc
   14bac:	movteq	r0, #2
   14bb0:	beq	14bcc <__assert_fail@plt+0x2e58>
   14bb4:	movw	r3, #45872	; 0xb330
   14bb8:	movt	r3, #3
   14bbc:	ldrb	r3, [r3, #3180]	; 0xc6c
   14bc0:	cmp	r3, #0
   14bc4:	movne	r0, #0
   14bc8:	beq	14bec <__assert_fail@plt+0x2e78>
   14bcc:	str	r5, [sp]
   14bd0:	mov	r2, r4
   14bd4:	mov	r3, #0
   14bd8:	bl	14af8 <__assert_fail@plt+0x2d84>
   14bdc:	add	sp, sp, #12
   14be0:	ldrd	r4, [sp]
   14be4:	add	sp, sp, #8
   14be8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bec:	mov	r0, r4
   14bf0:	bl	1e030 <__assert_fail@plt+0xc2bc>
   14bf4:	b	14bcc <__assert_fail@plt+0x2e58>
   14bf8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bfc:	strd	r6, [sp, #8]
   14c00:	strd	r8, [sp, #16]
   14c04:	strd	sl, [sp, #24]
   14c08:	str	lr, [sp, #32]
   14c0c:	sub	sp, sp, #8192	; 0x2000
   14c10:	sub	sp, sp, #28
   14c14:	mov	r8, r0
   14c18:	mov	r9, r3
   14c1c:	add	r3, sp, #8256	; 0x2040
   14c20:	add	r3, r3, #4
   14c24:	ldr	r7, [r3]
   14c28:	add	r3, sp, #8256	; 0x2040
   14c2c:	add	r3, r3, #8
   14c30:	ldr	r6, [r3]
   14c34:	add	r4, sp, #24
   14c38:	str	r4, [r4, #-4]
   14c3c:	sub	r3, r4, #5
   14c40:	str	r3, [sp, #8]
   14c44:	mov	r3, #0
   14c48:	str	r3, [sp, #4]
   14c4c:	str	r2, [sp]
   14c50:	mov	r3, r1
   14c54:	mov	r2, r0
   14c58:	mov	r1, #8192	; 0x2000
   14c5c:	sub	r0, r4, #4
   14c60:	bl	13410 <__assert_fail@plt+0x169c>
   14c64:	mov	r5, r0
   14c68:	ldrb	r3, [r4, #-5]
   14c6c:	add	r2, sp, #8256	; 0x2040
   14c70:	ldrb	r2, [r2]
   14c74:	tst	r2, r3
   14c78:	bne	14e80 <__assert_fail@plt+0x310c>
   14c7c:	cmp	r9, #0
   14c80:	beq	14cb4 <__assert_fail@plt+0x2f40>
   14c84:	mov	r0, #4
   14c88:	bl	12590 <__assert_fail@plt+0x81c>
   14c8c:	cmp	r0, #0
   14c90:	bne	14e8c <__assert_fail@plt+0x3118>
   14c94:	movw	r4, #45520	; 0xb1d0
   14c98:	movt	r4, #3
   14c9c:	mov	r0, r4
   14ca0:	bl	146f8 <__assert_fail@plt+0x2984>
   14ca4:	mov	r0, r9
   14ca8:	bl	146f8 <__assert_fail@plt+0x2984>
   14cac:	add	r0, r4, #8
   14cb0:	bl	146f8 <__assert_fail@plt+0x2984>
   14cb4:	cmp	r6, #0
   14cb8:	moveq	r4, #0
   14cbc:	beq	14d94 <__assert_fail@plt+0x3020>
   14cc0:	movw	r3, #45872	; 0xb330
   14cc4:	movt	r3, #3
   14cc8:	ldrb	r4, [r3, #3182]	; 0xc6e
   14ccc:	cmp	r4, #0
   14cd0:	beq	14d28 <__assert_fail@plt+0x2fb4>
   14cd4:	movw	r3, #45872	; 0xb330
   14cd8:	movt	r3, #3
   14cdc:	ldrb	r4, [r3, #3128]	; 0xc38
   14ce0:	cmp	r4, #0
   14ce4:	beq	14d28 <__assert_fail@plt+0x2fb4>
   14ce8:	ldrb	r3, [sp, #19]
   14cec:	cmp	r3, #0
   14cf0:	movne	r4, #0
   14cf4:	bne	14d28 <__assert_fail@plt+0x2fb4>
   14cf8:	ldr	r3, [sp, #20]
   14cfc:	ldrb	r1, [r3]
   14d00:	movw	r3, #45860	; 0xb324
   14d04:	movt	r3, #3
   14d08:	ldr	r0, [r3]
   14d0c:	ldr	r3, [r0, #20]
   14d10:	ldr	r2, [r0, #24]
   14d14:	cmp	r3, r2
   14d18:	addcc	r2, r3, #1
   14d1c:	strcc	r2, [r0, #20]
   14d20:	strbcc	r1, [r3]
   14d24:	bcs	14e94 <__assert_fail@plt+0x3120>
   14d28:	movw	r3, #45872	; 0xb330
   14d2c:	movt	r3, #3
   14d30:	mov	r1, #0
   14d34:	ldr	r0, [r3, #4028]	; 0xfbc
   14d38:	bl	14380 <__assert_fail@plt+0x260c>
   14d3c:	mov	sl, r0
   14d40:	mov	r1, #1
   14d44:	mov	r0, r6
   14d48:	bl	14380 <__assert_fail@plt+0x260c>
   14d4c:	mov	r9, r0
   14d50:	ldrb	r1, [r0]
   14d54:	movw	r3, #39300	; 0x9984
   14d58:	movt	r3, #2
   14d5c:	movw	r2, #37888	; 0x9400
   14d60:	movt	r2, #2
   14d64:	str	r0, [sp]
   14d68:	cmp	r1, #47	; 0x2f
   14d6c:	movne	r3, r2
   14d70:	mov	r2, sl
   14d74:	movw	r1, #28652	; 0x6fec
   14d78:	movt	r1, #2
   14d7c:	mov	r0, #1
   14d80:	bl	11bf4 <__printf_chk@plt>
   14d84:	mov	r0, sl
   14d88:	bl	1c200 <__assert_fail@plt+0xa48c>
   14d8c:	mov	r0, r9
   14d90:	bl	1c200 <__assert_fail@plt+0xa48c>
   14d94:	cmp	r7, #0
   14d98:	beq	14eac <__assert_fail@plt+0x3138>
   14d9c:	mov	r0, r7
   14da0:	bl	14684 <__assert_fail@plt+0x2910>
   14da4:	movw	r3, #45860	; 0xb324
   14da8:	movt	r3, #3
   14dac:	ldr	r0, [sp, #20]
   14db0:	ldr	r3, [r3]
   14db4:	sub	r2, r5, r4, lsl #1
   14db8:	mov	r1, #1
   14dbc:	add	r0, r0, r4
   14dc0:	bl	11960 <fwrite_unlocked@plt>
   14dc4:	ldr	r1, [pc, #280]	; 14ee4 <__assert_fail@plt+0x3170>
   14dc8:	ldrd	r2, [r1, #-8]
   14dcc:	adds	sl, r2, r5
   14dd0:	adc	fp, r3, #0
   14dd4:	strd	sl, [r1, #-8]
   14dd8:	mov	r0, r7
   14ddc:	bl	14684 <__assert_fail@plt+0x2910>
   14de0:	cmp	r6, #0
   14de4:	beq	14e44 <__assert_fail@plt+0x30d0>
   14de8:	movw	r3, #45860	; 0xb324
   14dec:	movt	r3, #3
   14df0:	ldr	r3, [r3]
   14df4:	mov	r2, #6
   14df8:	mov	r1, #1
   14dfc:	movw	r0, #28672	; 0x7000
   14e00:	movt	r0, #2
   14e04:	bl	11960 <fwrite_unlocked@plt>
   14e08:	cmp	r4, #0
   14e0c:	beq	14e44 <__assert_fail@plt+0x30d0>
   14e10:	ldr	r3, [sp, #20]
   14e14:	add	r3, r3, r5
   14e18:	ldrb	r1, [r3, #-1]
   14e1c:	movw	r3, #45860	; 0xb324
   14e20:	movt	r3, #3
   14e24:	ldr	r0, [r3]
   14e28:	ldr	r3, [r0, #20]
   14e2c:	ldr	r2, [r0, #24]
   14e30:	cmp	r3, r2
   14e34:	addcc	r2, r3, #1
   14e38:	strcc	r2, [r0, #20]
   14e3c:	strbcc	r1, [r3]
   14e40:	bcs	14e9c <__assert_fail@plt+0x3128>
   14e44:	add	r3, sp, #24
   14e48:	ldr	r0, [sp, #20]
   14e4c:	cmp	r0, r8
   14e50:	cmpne	r0, r3
   14e54:	bne	14ea4 <__assert_fail@plt+0x3130>
   14e58:	ldrb	r0, [sp, #19]
   14e5c:	add	r0, r0, r5
   14e60:	add	sp, sp, #8192	; 0x2000
   14e64:	add	sp, sp, #28
   14e68:	ldrd	r4, [sp]
   14e6c:	ldrd	r6, [sp, #8]
   14e70:	ldrd	r8, [sp, #16]
   14e74:	ldrd	sl, [sp, #24]
   14e78:	add	sp, sp, #32
   14e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e80:	mov	r0, #32
   14e84:	bl	14450 <__assert_fail@plt+0x26dc>
   14e88:	b	14c7c <__assert_fail@plt+0x2f08>
   14e8c:	bl	1490c <__assert_fail@plt+0x2b98>
   14e90:	b	14c94 <__assert_fail@plt+0x2f20>
   14e94:	bl	11c48 <__overflow@plt>
   14e98:	b	14d28 <__assert_fail@plt+0x2fb4>
   14e9c:	bl	11c48 <__overflow@plt>
   14ea0:	b	14e44 <__assert_fail@plt+0x30d0>
   14ea4:	bl	1c200 <__assert_fail@plt+0xa48c>
   14ea8:	b	14e58 <__assert_fail@plt+0x30e4>
   14eac:	movw	r3, #45860	; 0xb324
   14eb0:	movt	r3, #3
   14eb4:	ldr	r0, [sp, #20]
   14eb8:	ldr	r3, [r3]
   14ebc:	sub	r2, r5, r4, lsl #1
   14ec0:	mov	r1, #1
   14ec4:	add	r0, r0, r4
   14ec8:	bl	11960 <fwrite_unlocked@plt>
   14ecc:	ldr	r1, [pc, #16]	; 14ee4 <__assert_fail@plt+0x3170>
   14ed0:	ldrd	r2, [r1, #-8]
   14ed4:	adds	sl, r2, r5
   14ed8:	adc	fp, r3, #0
   14edc:	strd	sl, [r1, #-8]
   14ee0:	b	14de0 <__assert_fail@plt+0x306c>
   14ee4:	andeq	ip, r3, r0, ror #4
   14ee8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14eec:	strd	r6, [sp, #8]
   14ef0:	strd	r8, [sp, #16]
   14ef4:	str	sl, [sp, #24]
   14ef8:	str	lr, [sp, #28]
   14efc:	sub	sp, sp, #16
   14f00:	mov	r5, r0
   14f04:	mov	r9, r2
   14f08:	mov	r8, r3
   14f0c:	subs	r6, r1, #0
   14f10:	beq	14f84 <__assert_fail@plt+0x3210>
   14f14:	ldr	r7, [r0, #4]
   14f18:	movw	r3, #45872	; 0xb330
   14f1c:	movt	r3, #3
   14f20:	ldrb	r3, [r3, #4024]	; 0xfb8
   14f24:	cmp	r3, #0
   14f28:	bne	14fc4 <__assert_fail@plt+0x3250>
   14f2c:	movw	r1, #45872	; 0xb330
   14f30:	movt	r1, #3
   14f34:	ldr	r3, [r5, #8]
   14f38:	str	r3, [sp, #8]
   14f3c:	str	r9, [sp, #4]
   14f40:	eor	r6, r6, #1
   14f44:	str	r6, [sp]
   14f48:	mov	r3, #0
   14f4c:	ldr	r2, [r5, #144]	; 0x90
   14f50:	ldr	r1, [r1, #3176]	; 0xc68
   14f54:	mov	r0, r7
   14f58:	bl	14bf8 <__assert_fail@plt+0x2e84>
   14f5c:	mov	r4, r0
   14f60:	bl	14938 <__assert_fail@plt+0x2bc4>
   14f64:	mov	r0, r4
   14f68:	add	sp, sp, #16
   14f6c:	ldrd	r4, [sp]
   14f70:	ldrd	r6, [sp, #8]
   14f74:	ldrd	r8, [sp, #16]
   14f78:	ldr	sl, [sp, #24]
   14f7c:	add	sp, sp, #28
   14f80:	pop	{pc}		; (ldr pc, [sp], #4)
   14f84:	ldr	r7, [r0]
   14f88:	movw	r3, #45872	; 0xb330
   14f8c:	movt	r3, #3
   14f90:	ldrb	r3, [r3, #4024]	; 0xfb8
   14f94:	cmp	r3, #0
   14f98:	beq	14f2c <__assert_fail@plt+0x31b8>
   14f9c:	movw	r3, #45872	; 0xb330
   14fa0:	movt	r3, #3
   14fa4:	ldrb	r3, [r3, #4032]	; 0xfc0
   14fa8:	cmp	r3, #0
   14fac:	beq	14ff4 <__assert_fail@plt+0x3280>
   14fb0:	ldrb	r3, [r0, #133]	; 0x85
   14fb4:	cmp	r3, #0
   14fb8:	beq	14ff4 <__assert_fail@plt+0x3280>
   14fbc:	ldr	r4, [r0, #124]	; 0x7c
   14fc0:	b	14ff8 <__assert_fail@plt+0x3284>
   14fc4:	ldr	r4, [r0, #124]	; 0x7c
   14fc8:	ldrb	r3, [r0, #133]	; 0x85
   14fcc:	eor	sl, r3, #1
   14fd0:	rsb	sl, sl, #0
   14fd4:	cmp	r3, #0
   14fd8:	bne	14ffc <__assert_fail@plt+0x3288>
   14fdc:	mov	r0, #12
   14fe0:	bl	12590 <__assert_fail@plt+0x81c>
   14fe4:	cmp	r0, #0
   14fe8:	beq	14ffc <__assert_fail@plt+0x3288>
   14fec:	mov	r4, #12
   14ff0:	b	1505c <__assert_fail@plt+0x32e8>
   14ff4:	ldr	r4, [r5, #32]
   14ff8:	ldrb	sl, [r5, #133]	; 0x85
   14ffc:	ldrb	r3, [r5, #132]	; 0x84
   15000:	cmp	r3, #0
   15004:	bne	1506c <__assert_fail@plt+0x32f8>
   15008:	movw	r3, #22608	; 0x5850
   1500c:	movt	r3, #2
   15010:	ldr	r2, [r5, #120]	; 0x78
   15014:	add	r3, r3, r2, lsl #2
   15018:	ldr	r4, [r3, #348]	; 0x15c
   1501c:	cmp	r4, #5
   15020:	beq	1513c <__assert_fail@plt+0x33c8>
   15024:	cmp	r4, #7
   15028:	cmpeq	sl, #0
   1502c:	bne	1505c <__assert_fail@plt+0x32e8>
   15030:	movw	r3, #45872	; 0xb330
   15034:	movt	r3, #3
   15038:	ldrb	r3, [r3, #4032]	; 0xfc0
   1503c:	cmp	r3, #0
   15040:	movne	r4, #13
   15044:	bne	1505c <__assert_fail@plt+0x32e8>
   15048:	mov	r0, #13
   1504c:	bl	12590 <__assert_fail@plt+0x81c>
   15050:	cmp	r0, #0
   15054:	moveq	r4, #7
   15058:	movne	r4, #13
   1505c:	movw	r3, #45520	; 0xb1d0
   15060:	movt	r3, #3
   15064:	add	r3, r3, r4, lsl #3
   15068:	b	151fc <__assert_fail@plt+0x3488>
   1506c:	and	r3, r4, #61440	; 0xf000
   15070:	cmp	r3, #32768	; 0x8000
   15074:	beq	150bc <__assert_fail@plt+0x3348>
   15078:	cmp	r3, #16384	; 0x4000
   1507c:	beq	15164 <__assert_fail@plt+0x33f0>
   15080:	cmp	r3, #40960	; 0xa000
   15084:	beq	152d0 <__assert_fail@plt+0x355c>
   15088:	cmp	r3, #4096	; 0x1000
   1508c:	moveq	r4, #8
   15090:	beq	1505c <__assert_fail@plt+0x32e8>
   15094:	cmp	r3, #49152	; 0xc000
   15098:	moveq	r4, #9
   1509c:	beq	1505c <__assert_fail@plt+0x32e8>
   150a0:	cmp	r3, #24576	; 0x6000
   150a4:	moveq	r4, #10
   150a8:	beq	1505c <__assert_fail@plt+0x32e8>
   150ac:	cmp	r3, #8192	; 0x2000
   150b0:	moveq	r4, #11
   150b4:	movne	r4, #13
   150b8:	b	1505c <__assert_fail@plt+0x32e8>
   150bc:	tst	r4, #2048	; 0x800
   150c0:	beq	150d4 <__assert_fail@plt+0x3360>
   150c4:	mov	r0, #16
   150c8:	bl	12590 <__assert_fail@plt+0x81c>
   150cc:	cmp	r0, #0
   150d0:	bne	152d8 <__assert_fail@plt+0x3564>
   150d4:	tst	r4, #1024	; 0x400
   150d8:	beq	150ec <__assert_fail@plt+0x3378>
   150dc:	mov	r0, #17
   150e0:	bl	12590 <__assert_fail@plt+0x81c>
   150e4:	cmp	r0, #0
   150e8:	bne	152e0 <__assert_fail@plt+0x356c>
   150ec:	mov	r0, #21
   150f0:	bl	12590 <__assert_fail@plt+0x81c>
   150f4:	cmp	r0, #0
   150f8:	beq	15108 <__assert_fail@plt+0x3394>
   150fc:	ldrb	r3, [r5, #140]	; 0x8c
   15100:	cmp	r3, #0
   15104:	bne	152e8 <__assert_fail@plt+0x3574>
   15108:	tst	r4, #73	; 0x49
   1510c:	beq	15120 <__assert_fail@plt+0x33ac>
   15110:	mov	r0, #14
   15114:	bl	12590 <__assert_fail@plt+0x81c>
   15118:	cmp	r0, #0
   1511c:	bne	152f0 <__assert_fail@plt+0x357c>
   15120:	ldr	r3, [r5, #36]	; 0x24
   15124:	cmp	r3, #1
   15128:	bls	1513c <__assert_fail@plt+0x33c8>
   1512c:	mov	r0, #22
   15130:	bl	12590 <__assert_fail@plt+0x81c>
   15134:	cmp	r0, #0
   15138:	bne	152f8 <__assert_fail@plt+0x3584>
   1513c:	mov	r0, r7
   15140:	bl	11b94 <strlen@plt>
   15144:	mov	sl, r0
   15148:	movw	r3, #45872	; 0xb330
   1514c:	movt	r3, #3
   15150:	ldr	r4, [r3, #4036]	; 0xfc4
   15154:	cmp	r4, #0
   15158:	bne	151d4 <__assert_fail@plt+0x3460>
   1515c:	mov	r4, #5
   15160:	b	1505c <__assert_fail@plt+0x32e8>
   15164:	movw	r3, #514	; 0x202
   15168:	bics	r3, r3, r4
   1516c:	beq	151b0 <__assert_fail@plt+0x343c>
   15170:	tst	r4, #2
   15174:	beq	1518c <__assert_fail@plt+0x3418>
   15178:	mov	r0, #19
   1517c:	bl	12590 <__assert_fail@plt+0x81c>
   15180:	cmp	r0, #0
   15184:	movne	r4, #19
   15188:	bne	1505c <__assert_fail@plt+0x32e8>
   1518c:	tst	r4, #512	; 0x200
   15190:	moveq	r4, #6
   15194:	beq	1505c <__assert_fail@plt+0x32e8>
   15198:	mov	r0, #18
   1519c:	bl	12590 <__assert_fail@plt+0x81c>
   151a0:	cmp	r0, #0
   151a4:	movne	r4, #18
   151a8:	moveq	r4, #6
   151ac:	b	1505c <__assert_fail@plt+0x32e8>
   151b0:	mov	r0, #20
   151b4:	bl	12590 <__assert_fail@plt+0x81c>
   151b8:	cmp	r0, #0
   151bc:	movne	r4, #20
   151c0:	bne	1505c <__assert_fail@plt+0x32e8>
   151c4:	b	15170 <__assert_fail@plt+0x33fc>
   151c8:	ldr	r4, [r4, #16]
   151cc:	cmp	r4, #0
   151d0:	beq	15278 <__assert_fail@plt+0x3504>
   151d4:	ldr	r2, [r4]
   151d8:	cmp	sl, r2
   151dc:	bcc	151c8 <__assert_fail@plt+0x3454>
   151e0:	sub	r0, sl, r2
   151e4:	ldr	r1, [r4, #4]
   151e8:	add	r0, r7, r0
   151ec:	bl	1af78 <__assert_fail@plt+0x9204>
   151f0:	cmp	r0, #0
   151f4:	bne	151c8 <__assert_fail@plt+0x3454>
   151f8:	add	r3, r4, #8
   151fc:	ldr	r2, [r3, #4]
   15200:	cmp	r2, #0
   15204:	beq	15280 <__assert_fail@plt+0x350c>
   15208:	movw	r1, #45872	; 0xb330
   1520c:	movt	r1, #3
   15210:	ldr	r2, [r5, #8]
   15214:	str	r2, [sp, #8]
   15218:	str	r9, [sp, #4]
   1521c:	eor	r6, r6, #1
   15220:	str	r6, [sp]
   15224:	ldr	r2, [r5, #144]	; 0x90
   15228:	ldr	r1, [r1, #3176]	; 0xc68
   1522c:	mov	r0, r7
   15230:	bl	14bf8 <__assert_fail@plt+0x2e84>
   15234:	mov	r4, r0
   15238:	bl	14938 <__assert_fail@plt+0x2bc4>
   1523c:	bl	14858 <__assert_fail@plt+0x2ae4>
   15240:	movw	r3, #45872	; 0xb330
   15244:	movt	r3, #3
   15248:	ldr	r3, [r3, #3188]	; 0xc74
   1524c:	cmp	r3, #0
   15250:	beq	14f64 <__assert_fail@plt+0x31f0>
   15254:	udiv	r2, r8, r3
   15258:	sub	r8, r8, #1
   1525c:	add	r8, r8, r4
   15260:	udiv	r8, r8, r3
   15264:	cmp	r2, r8
   15268:	beq	14f64 <__assert_fail@plt+0x31f0>
   1526c:	ldr	r0, [pc, #140]	; 15300 <__assert_fail@plt+0x358c>
   15270:	bl	146f8 <__assert_fail@plt+0x2984>
   15274:	b	14f64 <__assert_fail@plt+0x31f0>
   15278:	mov	r4, #5
   1527c:	b	1505c <__assert_fail@plt+0x32e8>
   15280:	mov	r0, #4
   15284:	bl	12590 <__assert_fail@plt+0x81c>
   15288:	mov	sl, r0
   1528c:	movw	r1, #45872	; 0xb330
   15290:	movt	r1, #3
   15294:	ldr	r3, [r5, #8]
   15298:	str	r3, [sp, #8]
   1529c:	str	r9, [sp, #4]
   152a0:	eor	r6, r6, #1
   152a4:	str	r6, [sp]
   152a8:	mov	r3, #0
   152ac:	ldr	r2, [r5, #144]	; 0x90
   152b0:	ldr	r1, [r1, #3176]	; 0xc68
   152b4:	mov	r0, r7
   152b8:	bl	14bf8 <__assert_fail@plt+0x2e84>
   152bc:	mov	r4, r0
   152c0:	bl	14938 <__assert_fail@plt+0x2bc4>
   152c4:	cmp	sl, #0
   152c8:	beq	14f64 <__assert_fail@plt+0x31f0>
   152cc:	b	1523c <__assert_fail@plt+0x34c8>
   152d0:	mov	r4, #7
   152d4:	b	15024 <__assert_fail@plt+0x32b0>
   152d8:	mov	r4, #16
   152dc:	b	1505c <__assert_fail@plt+0x32e8>
   152e0:	mov	r4, #17
   152e4:	b	1505c <__assert_fail@plt+0x32e8>
   152e8:	mov	r4, #21
   152ec:	b	1505c <__assert_fail@plt+0x32e8>
   152f0:	mov	r4, #14
   152f4:	b	1505c <__assert_fail@plt+0x32e8>
   152f8:	mov	r4, #22
   152fc:	b	1505c <__assert_fail@plt+0x32e8>
   15300:	andeq	fp, r3, r8, lsl #5
   15304:	strd	r4, [sp, #-16]!
   15308:	str	r6, [sp, #8]
   1530c:	str	lr, [sp, #12]
   15310:	sub	sp, sp, #672	; 0x2a0
   15314:	mov	r4, r0
   15318:	mov	r5, r1
   1531c:	bl	148b0 <__assert_fail@plt+0x2b3c>
   15320:	movw	r3, #45872	; 0xb330
   15324:	movt	r3, #3
   15328:	ldrb	r3, [r3, #3112]	; 0xc28
   1532c:	cmp	r3, #0
   15330:	beq	15390 <__assert_fail@plt+0x361c>
   15334:	movw	r3, #45872	; 0xb330
   15338:	movt	r3, #3
   1533c:	ldr	r3, [r3, #3116]	; 0xc2c
   15340:	cmp	r3, #4
   15344:	movwne	r3, #45872	; 0xb330
   15348:	movtne	r3, #3
   1534c:	ldrne	r6, [r3, #3132]	; 0xc3c
   15350:	moveq	r6, #0
   15354:	ldrb	r3, [r4, #132]	; 0x84
   15358:	cmp	r3, #0
   1535c:	movweq	r3, #28620	; 0x6fcc
   15360:	movteq	r3, #2
   15364:	beq	1537c <__assert_fail@plt+0x3608>
   15368:	ldrd	r0, [r4, #112]	; 0x70
   1536c:	orrs	r3, r0, r1
   15370:	movweq	r3, #28620	; 0x6fcc
   15374:	movteq	r3, #2
   15378:	bne	15478 <__assert_fail@plt+0x3704>
   1537c:	mov	r2, r6
   15380:	movw	r1, #28680	; 0x7008
   15384:	movt	r1, #2
   15388:	mov	r0, #1
   1538c:	bl	11bf4 <__printf_chk@plt>
   15390:	movw	r3, #45872	; 0xb330
   15394:	movt	r3, #3
   15398:	ldrb	r3, [r3, #3113]	; 0xc29
   1539c:	cmp	r3, #0
   153a0:	beq	153ec <__assert_fail@plt+0x3678>
   153a4:	movw	r3, #45872	; 0xb330
   153a8:	movt	r3, #3
   153ac:	ldr	r3, [r3, #3116]	; 0xc2c
   153b0:	cmp	r3, #4
   153b4:	movwne	r3, #45872	; 0xb330
   153b8:	movtne	r3, #3
   153bc:	ldrne	r6, [r3, #3136]	; 0xc40
   153c0:	moveq	r6, #0
   153c4:	ldrb	r3, [r4, #132]	; 0x84
   153c8:	cmp	r3, #0
   153cc:	movweq	r3, #28620	; 0x6fcc
   153d0:	movteq	r3, #2
   153d4:	bne	15488 <__assert_fail@plt+0x3714>
   153d8:	mov	r2, r6
   153dc:	movw	r1, #28680	; 0x7008
   153e0:	movt	r1, #2
   153e4:	mov	r0, #1
   153e8:	bl	11bf4 <__printf_chk@plt>
   153ec:	movw	r3, #45872	; 0xb330
   153f0:	movt	r3, #3
   153f4:	ldrb	r3, [r3, #3600]	; 0xe10
   153f8:	cmp	r3, #0
   153fc:	beq	15434 <__assert_fail@plt+0x36c0>
   15400:	movw	r3, #45872	; 0xb330
   15404:	movt	r3, #3
   15408:	ldr	r3, [r3, #3116]	; 0xc2c
   1540c:	cmp	r3, #4
   15410:	movwne	r3, #45872	; 0xb330
   15414:	movtne	r3, #3
   15418:	ldrne	r2, [r3, #3156]	; 0xc54
   1541c:	moveq	r2, #0
   15420:	ldr	r3, [r4, #128]	; 0x80
   15424:	movw	r1, #28680	; 0x7008
   15428:	movt	r1, #2
   1542c:	mov	r0, #1
   15430:	bl	11bf4 <__printf_chk@plt>
   15434:	mov	r3, r5
   15438:	mov	r2, #0
   1543c:	mov	r1, r2
   15440:	mov	r0, r4
   15444:	bl	14ee8 <__assert_fail@plt+0x3174>
   15448:	mov	r5, r0
   1544c:	movw	r3, #45872	; 0xb330
   15450:	movt	r3, #3
   15454:	ldr	r3, [r3, #20]
   15458:	cmp	r3, #0
   1545c:	bne	154c0 <__assert_fail@plt+0x374c>
   15460:	mov	r0, r5
   15464:	add	sp, sp, #672	; 0x2a0
   15468:	ldrd	r4, [sp]
   1546c:	ldr	r6, [sp, #8]
   15470:	add	sp, sp, #12
   15474:	pop	{pc}		; (ldr pc, [sp], #4)
   15478:	add	r2, sp, #20
   1547c:	bl	1e4f8 <__assert_fail@plt+0xc784>
   15480:	mov	r3, r0
   15484:	b	1537c <__assert_fail@plt+0x3608>
   15488:	movw	r1, #45872	; 0xb330
   1548c:	movt	r1, #3
   15490:	add	r3, r1, #3600	; 0xe10
   15494:	ldrd	r2, [r3, #-8]
   15498:	strd	r2, [sp, #8]
   1549c:	mov	r2, #512	; 0x200
   154a0:	mov	r3, #0
   154a4:	strd	r2, [sp]
   154a8:	ldr	r3, [r1, #3588]	; 0xe04
   154ac:	add	r2, sp, #20
   154b0:	ldrd	r0, [r4, #80]	; 0x50
   154b4:	bl	1d588 <__assert_fail@plt+0xb814>
   154b8:	mov	r3, r0
   154bc:	b	153d8 <__assert_fail@plt+0x3664>
   154c0:	ldr	r2, [r4, #120]	; 0x78
   154c4:	ldr	r1, [r4, #32]
   154c8:	ldrb	r0, [r4, #132]	; 0x84
   154cc:	bl	144bc <__assert_fail@plt+0x2748>
   154d0:	add	r5, r5, r0
   154d4:	b	15460 <__assert_fail@plt+0x36ec>
   154d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154dc:	strd	r6, [sp, #8]
   154e0:	strd	r8, [sp, #16]
   154e4:	strd	sl, [sp, #24]
   154e8:	str	lr, [sp, #32]
   154ec:	sub	sp, sp, #12
   154f0:	movw	r3, #45872	; 0xb330
   154f4:	movt	r3, #3
   154f8:	ldr	r3, [r3, #8]
   154fc:	cmp	r3, #0
   15500:	beq	15628 <__assert_fail@plt+0x38b4>
   15504:	mov	fp, r0
   15508:	mov	r5, #0
   1550c:	mov	r4, r5
   15510:	movw	r7, #45872	; 0xb330
   15514:	movt	r7, #3
   15518:	movw	r9, #45860	; 0xb324
   1551c:	movt	r9, #3
   15520:	movw	r3, #45520	; 0xb1d0
   15524:	movt	r3, #3
   15528:	str	r3, [sp, #4]
   1552c:	b	155dc <__assert_fail@plt+0x3868>
   15530:	mov	r0, r8
   15534:	bl	13be8 <__assert_fail@plt+0x1e74>
   15538:	mov	r6, r0
   1553c:	cmp	r4, #0
   15540:	beq	155bc <__assert_fail@plt+0x3848>
   15544:	ldr	r2, [r7, #3188]	; 0xc74
   15548:	cmp	r2, #0
   1554c:	beq	15574 <__assert_fail@plt+0x3800>
   15550:	add	r3, r5, #2
   15554:	add	r3, r3, r0
   15558:	cmp	r2, r3
   1555c:	bls	15600 <__assert_fail@plt+0x388c>
   15560:	movw	r3, #65533	; 0xfffd
   15564:	movt	r3, #65535	; 0xffff
   15568:	sub	r3, r3, r0
   1556c:	cmp	r3, r5
   15570:	bcc	15600 <__assert_fail@plt+0x388c>
   15574:	add	r5, r5, #2
   15578:	mov	sl, #32
   1557c:	ldr	r0, [r9]
   15580:	ldr	r3, [r0, #20]
   15584:	ldr	r2, [r0, #24]
   15588:	cmp	r3, r2
   1558c:	addcc	r2, r3, #1
   15590:	strcc	r2, [r0, #20]
   15594:	strbcc	fp, [r3]
   15598:	bcs	15610 <__assert_fail@plt+0x389c>
   1559c:	ldr	r0, [r9]
   155a0:	ldr	r3, [r0, #20]
   155a4:	ldr	r2, [r0, #24]
   155a8:	cmp	r3, r2
   155ac:	addcc	r2, r3, #1
   155b0:	strcc	r2, [r0, #20]
   155b4:	strbcc	sl, [r3]
   155b8:	bcs	1561c <__assert_fail@plt+0x38a8>
   155bc:	mov	r1, r5
   155c0:	mov	r0, r8
   155c4:	bl	15304 <__assert_fail@plt+0x3590>
   155c8:	add	r5, r5, r6
   155cc:	add	r4, r4, #1
   155d0:	ldr	r3, [r7, #8]
   155d4:	cmp	r3, r4
   155d8:	bls	15628 <__assert_fail@plt+0x38b4>
   155dc:	ldr	r3, [r7, #16]
   155e0:	ldr	r8, [r3, r4, lsl #2]
   155e4:	ldr	r6, [r7, #3188]	; 0xc74
   155e8:	cmp	r6, #0
   155ec:	bne	15530 <__assert_fail@plt+0x37bc>
   155f0:	cmp	r4, #0
   155f4:	moveq	r6, r4
   155f8:	beq	155bc <__assert_fail@plt+0x3848>
   155fc:	b	15574 <__assert_fail@plt+0x3800>
   15600:	ldr	r3, [sp, #4]
   15604:	ldrb	sl, [r3, #210]	; 0xd2
   15608:	mov	r5, #0
   1560c:	b	1557c <__assert_fail@plt+0x3808>
   15610:	mov	r1, fp
   15614:	bl	11c48 <__overflow@plt>
   15618:	b	1559c <__assert_fail@plt+0x3828>
   1561c:	mov	r1, sl
   15620:	bl	11c48 <__overflow@plt>
   15624:	b	155bc <__assert_fail@plt+0x3848>
   15628:	movw	r3, #45520	; 0xb1d0
   1562c:	movt	r3, #3
   15630:	ldrb	r1, [r3, #210]	; 0xd2
   15634:	movw	r3, #45860	; 0xb324
   15638:	movt	r3, #3
   1563c:	ldr	r0, [r3]
   15640:	ldr	r3, [r0, #20]
   15644:	ldr	r2, [r0, #24]
   15648:	cmp	r3, r2
   1564c:	addcc	r2, r3, #1
   15650:	strcc	r2, [r0, #20]
   15654:	strbcc	r1, [r3]
   15658:	bcs	15678 <__assert_fail@plt+0x3904>
   1565c:	add	sp, sp, #12
   15660:	ldrd	r4, [sp]
   15664:	ldrd	r6, [sp, #8]
   15668:	ldrd	r8, [sp, #16]
   1566c:	ldrd	sl, [sp, #24]
   15670:	add	sp, sp, #32
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	bl	11c48 <__overflow@plt>
   1567c:	b	1565c <__assert_fail@plt+0x38e8>
   15680:	str	r4, [sp, #-8]!
   15684:	str	lr, [sp, #4]
   15688:	ldr	r1, [r1]
   1568c:	ldr	r0, [r0]
   15690:	bl	1be40 <__assert_fail@plt+0xa0cc>
   15694:	ldr	r4, [sp]
   15698:	add	sp, sp, #4
   1569c:	pop	{pc}		; (ldr pc, [sp], #4)
   156a0:	str	r4, [sp, #-8]!
   156a4:	str	lr, [sp, #4]
   156a8:	ldr	r3, [r1]
   156ac:	ldr	r1, [r0]
   156b0:	mov	r0, r3
   156b4:	bl	118a0 <strcmp@plt>
   156b8:	ldr	r4, [sp]
   156bc:	add	sp, sp, #4
   156c0:	pop	{pc}		; (ldr pc, [sp], #4)
   156c4:	str	r4, [sp, #-8]!
   156c8:	str	lr, [sp, #4]
   156cc:	ldr	r3, [r1]
   156d0:	ldr	r1, [r0]
   156d4:	mov	r0, r3
   156d8:	bl	133b0 <__assert_fail@plt+0x163c>
   156dc:	ldr	r4, [sp]
   156e0:	add	sp, sp, #4
   156e4:	pop	{pc}		; (ldr pc, [sp], #4)
   156e8:	str	r4, [sp, #-8]!
   156ec:	str	lr, [sp, #4]
   156f0:	ldr	r1, [r1]
   156f4:	ldr	r0, [r0]
   156f8:	bl	118a0 <strcmp@plt>
   156fc:	ldr	r4, [sp]
   15700:	add	sp, sp, #4
   15704:	pop	{pc}		; (ldr pc, [sp], #4)
   15708:	str	r4, [sp, #-8]!
   1570c:	str	lr, [sp, #4]
   15710:	mov	lr, r0
   15714:	ldr	r3, [r1, #120]	; 0x78
   15718:	cmp	r3, #9
   1571c:	cmpne	r3, #3
   15720:	beq	15750 <__assert_fail@plt+0x39dc>
   15724:	ldr	r3, [r1, #124]	; 0x7c
   15728:	and	r3, r3, #61440	; 0xf000
   1572c:	cmp	r3, #16384	; 0x4000
   15730:	movne	r3, #0
   15734:	moveq	r3, #1
   15738:	ldr	r0, [r0, #120]	; 0x78
   1573c:	cmp	r0, #9
   15740:	cmpne	r0, #3
   15744:	moveq	ip, #1
   15748:	beq	15778 <__assert_fail@plt+0x3a04>
   1574c:	b	15764 <__assert_fail@plt+0x39f0>
   15750:	ldr	r3, [r0, #120]	; 0x78
   15754:	cmp	r3, #9
   15758:	cmpne	r3, #3
   1575c:	movne	r3, #1
   15760:	beq	15780 <__assert_fail@plt+0x3a0c>
   15764:	ldr	ip, [lr, #124]	; 0x7c
   15768:	and	ip, ip, #61440	; 0xf000
   1576c:	cmp	ip, #16384	; 0x4000
   15770:	movne	ip, #0
   15774:	moveq	ip, #1
   15778:	subs	r0, r3, ip
   1577c:	bne	15788 <__assert_fail@plt+0x3a14>
   15780:	mov	r0, lr
   15784:	blx	r2
   15788:	ldr	r4, [sp]
   1578c:	add	sp, sp, #4
   15790:	pop	{pc}		; (ldr pc, [sp], #4)
   15794:	str	r4, [sp, #-8]!
   15798:	str	lr, [sp, #4]
   1579c:	movw	r2, #8460	; 0x210c
   157a0:	movt	r2, #1
   157a4:	bl	15708 <__assert_fail@plt+0x3994>
   157a8:	ldr	r4, [sp]
   157ac:	add	sp, sp, #4
   157b0:	pop	{pc}		; (ldr pc, [sp], #4)
   157b4:	str	r4, [sp, #-8]!
   157b8:	str	lr, [sp, #4]
   157bc:	movw	r2, #8492	; 0x212c
   157c0:	movt	r2, #1
   157c4:	bl	15708 <__assert_fail@plt+0x3994>
   157c8:	ldr	r4, [sp]
   157cc:	add	sp, sp, #4
   157d0:	pop	{pc}		; (ldr pc, [sp], #4)
   157d4:	str	r4, [sp, #-8]!
   157d8:	str	lr, [sp, #4]
   157dc:	movw	r2, #8524	; 0x214c
   157e0:	movt	r2, #1
   157e4:	bl	15708 <__assert_fail@plt+0x3994>
   157e8:	ldr	r4, [sp]
   157ec:	add	sp, sp, #4
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	str	r4, [sp, #-8]!
   157f8:	str	lr, [sp, #4]
   157fc:	movw	r2, #8568	; 0x2178
   15800:	movt	r2, #1
   15804:	bl	15708 <__assert_fail@plt+0x3994>
   15808:	ldr	r4, [sp]
   1580c:	add	sp, sp, #4
   15810:	pop	{pc}		; (ldr pc, [sp], #4)
   15814:	str	r4, [sp, #-8]!
   15818:	str	lr, [sp, #4]
   1581c:	movw	r2, #8612	; 0x21a4
   15820:	movt	r2, #1
   15824:	bl	15708 <__assert_fail@plt+0x3994>
   15828:	ldr	r4, [sp]
   1582c:	add	sp, sp, #4
   15830:	pop	{pc}		; (ldr pc, [sp], #4)
   15834:	str	r4, [sp, #-8]!
   15838:	str	lr, [sp, #4]
   1583c:	movw	r2, #8644	; 0x21c4
   15840:	movt	r2, #1
   15844:	bl	15708 <__assert_fail@plt+0x3994>
   15848:	ldr	r4, [sp]
   1584c:	add	sp, sp, #4
   15850:	pop	{pc}		; (ldr pc, [sp], #4)
   15854:	str	r4, [sp, #-8]!
   15858:	str	lr, [sp, #4]
   1585c:	movw	r2, #8676	; 0x21e4
   15860:	movt	r2, #1
   15864:	bl	15708 <__assert_fail@plt+0x3994>
   15868:	ldr	r4, [sp]
   1586c:	add	sp, sp, #4
   15870:	pop	{pc}		; (ldr pc, [sp], #4)
   15874:	str	r4, [sp, #-8]!
   15878:	str	lr, [sp, #4]
   1587c:	movw	r2, #8720	; 0x2210
   15880:	movt	r2, #1
   15884:	bl	15708 <__assert_fail@plt+0x3994>
   15888:	ldr	r4, [sp]
   1588c:	add	sp, sp, #4
   15890:	pop	{pc}		; (ldr pc, [sp], #4)
   15894:	str	r4, [sp, #-8]!
   15898:	str	lr, [sp, #4]
   1589c:	movw	r2, #8764	; 0x223c
   158a0:	movt	r2, #1
   158a4:	bl	15708 <__assert_fail@plt+0x3994>
   158a8:	ldr	r4, [sp]
   158ac:	add	sp, sp, #4
   158b0:	pop	{pc}		; (ldr pc, [sp], #4)
   158b4:	str	r4, [sp, #-8]!
   158b8:	str	lr, [sp, #4]
   158bc:	movw	r2, #8796	; 0x225c
   158c0:	movt	r2, #1
   158c4:	bl	15708 <__assert_fail@plt+0x3994>
   158c8:	ldr	r4, [sp]
   158cc:	add	sp, sp, #4
   158d0:	pop	{pc}		; (ldr pc, [sp], #4)
   158d4:	str	r4, [sp, #-8]!
   158d8:	str	lr, [sp, #4]
   158dc:	movw	r2, #8828	; 0x227c
   158e0:	movt	r2, #1
   158e4:	bl	15708 <__assert_fail@plt+0x3994>
   158e8:	ldr	r4, [sp]
   158ec:	add	sp, sp, #4
   158f0:	pop	{pc}		; (ldr pc, [sp], #4)
   158f4:	str	r4, [sp, #-8]!
   158f8:	str	lr, [sp, #4]
   158fc:	movw	r2, #8872	; 0x22a8
   15900:	movt	r2, #1
   15904:	bl	15708 <__assert_fail@plt+0x3994>
   15908:	ldr	r4, [sp]
   1590c:	add	sp, sp, #4
   15910:	pop	{pc}		; (ldr pc, [sp], #4)
   15914:	str	r4, [sp, #-8]!
   15918:	str	lr, [sp, #4]
   1591c:	movw	r2, #32728	; 0x7fd8
   15920:	movt	r2, #1
   15924:	bl	15708 <__assert_fail@plt+0x3994>
   15928:	ldr	r4, [sp]
   1592c:	add	sp, sp, #4
   15930:	pop	{pc}		; (ldr pc, [sp], #4)
   15934:	str	r4, [sp, #-8]!
   15938:	str	lr, [sp, #4]
   1593c:	movw	r2, #32760	; 0x7ff8
   15940:	movt	r2, #1
   15944:	bl	15708 <__assert_fail@plt+0x3994>
   15948:	ldr	r4, [sp]
   1594c:	add	sp, sp, #4
   15950:	pop	{pc}		; (ldr pc, [sp], #4)
   15954:	str	r4, [sp, #-8]!
   15958:	str	lr, [sp, #4]
   1595c:	movw	r2, #32792	; 0x8018
   15960:	movt	r2, #1
   15964:	bl	15708 <__assert_fail@plt+0x3994>
   15968:	ldr	r4, [sp]
   1596c:	add	sp, sp, #4
   15970:	pop	{pc}		; (ldr pc, [sp], #4)
   15974:	str	r4, [sp, #-8]!
   15978:	str	lr, [sp, #4]
   1597c:	movw	r2, #32836	; 0x8044
   15980:	movt	r2, #1
   15984:	bl	15708 <__assert_fail@plt+0x3994>
   15988:	ldr	r4, [sp]
   1598c:	add	sp, sp, #4
   15990:	pop	{pc}		; (ldr pc, [sp], #4)
   15994:	str	r4, [sp, #-8]!
   15998:	str	lr, [sp, #4]
   1599c:	movw	r2, #8916	; 0x22d4
   159a0:	movt	r2, #1
   159a4:	bl	15708 <__assert_fail@plt+0x3994>
   159a8:	ldr	r4, [sp]
   159ac:	add	sp, sp, #4
   159b0:	pop	{pc}		; (ldr pc, [sp], #4)
   159b4:	str	r4, [sp, #-8]!
   159b8:	str	lr, [sp, #4]
   159bc:	movw	r2, #8948	; 0x22f4
   159c0:	movt	r2, #1
   159c4:	bl	15708 <__assert_fail@plt+0x3994>
   159c8:	ldr	r4, [sp]
   159cc:	add	sp, sp, #4
   159d0:	pop	{pc}		; (ldr pc, [sp], #4)
   159d4:	str	r4, [sp, #-8]!
   159d8:	str	lr, [sp, #4]
   159dc:	movw	r2, #8980	; 0x2314
   159e0:	movt	r2, #1
   159e4:	bl	15708 <__assert_fail@plt+0x3994>
   159e8:	ldr	r4, [sp]
   159ec:	add	sp, sp, #4
   159f0:	pop	{pc}		; (ldr pc, [sp], #4)
   159f4:	str	r4, [sp, #-8]!
   159f8:	str	lr, [sp, #4]
   159fc:	movw	r2, #9024	; 0x2340
   15a00:	movt	r2, #1
   15a04:	bl	15708 <__assert_fail@plt+0x3994>
   15a08:	ldr	r4, [sp]
   15a0c:	add	sp, sp, #4
   15a10:	pop	{pc}		; (ldr pc, [sp], #4)
   15a14:	str	r4, [sp, #-8]!
   15a18:	str	lr, [sp, #4]
   15a1c:	movw	r2, #9068	; 0x236c
   15a20:	movt	r2, #1
   15a24:	bl	15708 <__assert_fail@plt+0x3994>
   15a28:	ldr	r4, [sp]
   15a2c:	add	sp, sp, #4
   15a30:	pop	{pc}		; (ldr pc, [sp], #4)
   15a34:	str	r4, [sp, #-8]!
   15a38:	str	lr, [sp, #4]
   15a3c:	movw	r2, #22248	; 0x56e8
   15a40:	movt	r2, #1
   15a44:	bl	15708 <__assert_fail@plt+0x3994>
   15a48:	ldr	r4, [sp]
   15a4c:	add	sp, sp, #4
   15a50:	pop	{pc}		; (ldr pc, [sp], #4)
   15a54:	str	r4, [sp, #-8]!
   15a58:	str	lr, [sp, #4]
   15a5c:	movw	r2, #22212	; 0x56c4
   15a60:	movt	r2, #1
   15a64:	bl	15708 <__assert_fail@plt+0x3994>
   15a68:	ldr	r4, [sp]
   15a6c:	add	sp, sp, #4
   15a70:	pop	{pc}		; (ldr pc, [sp], #4)
   15a74:	str	r4, [sp, #-8]!
   15a78:	str	lr, [sp, #4]
   15a7c:	movw	r2, #22176	; 0x56a0
   15a80:	movt	r2, #1
   15a84:	bl	15708 <__assert_fail@plt+0x3994>
   15a88:	ldr	r4, [sp]
   15a8c:	add	sp, sp, #4
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	str	r4, [sp, #-8]!
   15a98:	str	lr, [sp, #4]
   15a9c:	movw	r2, #16848	; 0x41d0
   15aa0:	movt	r2, #1
   15aa4:	bl	15708 <__assert_fail@plt+0x3994>
   15aa8:	ldr	r4, [sp]
   15aac:	add	sp, sp, #4
   15ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab4:	str	r4, [sp, #-8]!
   15ab8:	str	lr, [sp, #4]
   15abc:	movw	r2, #16772	; 0x4184
   15ac0:	movt	r2, #1
   15ac4:	bl	15708 <__assert_fail@plt+0x3994>
   15ac8:	ldr	r4, [sp]
   15acc:	add	sp, sp, #4
   15ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ad4:	str	r4, [sp, #-8]!
   15ad8:	str	lr, [sp, #4]
   15adc:	movw	r2, #16804	; 0x41a4
   15ae0:	movt	r2, #1
   15ae4:	bl	15708 <__assert_fail@plt+0x3994>
   15ae8:	ldr	r4, [sp]
   15aec:	add	sp, sp, #4
   15af0:	pop	{pc}		; (ldr pc, [sp], #4)
   15af4:	str	r4, [sp, #-8]!
   15af8:	str	lr, [sp, #4]
   15afc:	movw	r2, #16728	; 0x4158
   15b00:	movt	r2, #1
   15b04:	bl	15708 <__assert_fail@plt+0x3994>
   15b08:	ldr	r4, [sp]
   15b0c:	add	sp, sp, #4
   15b10:	pop	{pc}		; (ldr pc, [sp], #4)
   15b14:	str	r4, [sp, #-8]!
   15b18:	str	lr, [sp, #4]
   15b1c:	movw	r2, #14840	; 0x39f8
   15b20:	movt	r2, #1
   15b24:	bl	15708 <__assert_fail@plt+0x3994>
   15b28:	ldr	r4, [sp]
   15b2c:	add	sp, sp, #4
   15b30:	pop	{pc}		; (ldr pc, [sp], #4)
   15b34:	str	r4, [sp, #-8]!
   15b38:	str	lr, [sp, #4]
   15b3c:	movw	r2, #14764	; 0x39ac
   15b40:	movt	r2, #1
   15b44:	bl	15708 <__assert_fail@plt+0x3994>
   15b48:	ldr	r4, [sp]
   15b4c:	add	sp, sp, #4
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	str	r4, [sp, #-8]!
   15b58:	str	lr, [sp, #4]
   15b5c:	movw	r2, #14796	; 0x39cc
   15b60:	movt	r2, #1
   15b64:	bl	15708 <__assert_fail@plt+0x3994>
   15b68:	ldr	r4, [sp]
   15b6c:	add	sp, sp, #4
   15b70:	pop	{pc}		; (ldr pc, [sp], #4)
   15b74:	str	r4, [sp, #-8]!
   15b78:	str	lr, [sp, #4]
   15b7c:	movw	r2, #14720	; 0x3980
   15b80:	movt	r2, #1
   15b84:	bl	15708 <__assert_fail@plt+0x3994>
   15b88:	ldr	r4, [sp]
   15b8c:	add	sp, sp, #4
   15b90:	pop	{pc}		; (ldr pc, [sp], #4)
   15b94:	str	r4, [sp, #-8]!
   15b98:	str	lr, [sp, #4]
   15b9c:	movw	r2, #22144	; 0x5680
   15ba0:	movt	r2, #1
   15ba4:	bl	15708 <__assert_fail@plt+0x3994>
   15ba8:	ldr	r4, [sp]
   15bac:	add	sp, sp, #4
   15bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb4:	str	r4, [sp, #-8]!
   15bb8:	str	lr, [sp, #4]
   15bbc:	movw	r2, #13292	; 0x33ec
   15bc0:	movt	r2, #1
   15bc4:	bl	15708 <__assert_fail@plt+0x3994>
   15bc8:	ldr	r4, [sp]
   15bcc:	add	sp, sp, #4
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15bd8:	strd	r6, [sp, #8]
   15bdc:	strd	r8, [sp, #16]
   15be0:	strd	sl, [sp, #24]
   15be4:	str	lr, [sp, #32]
   15be8:	add	fp, sp, #32
   15bec:	sub	sp, sp, #716	; 0x2cc
   15bf0:	str	r0, [fp, #-720]	; 0xfffffd30
   15bf4:	str	r1, [fp, #-724]	; 0xfffffd2c
   15bf8:	mov	r9, r2
   15bfc:	mov	r7, r3
   15c00:	ldrb	r6, [fp, #4]
   15c04:	orrs	r3, r2, r7
   15c08:	moveq	r3, #1
   15c0c:	movne	r3, #0
   15c10:	mov	r2, r3
   15c14:	str	r3, [fp, #-732]	; 0xfffffd24
   15c18:	eor	r3, r6, #1
   15c1c:	orrs	r3, r2, r3
   15c20:	str	r3, [fp, #-728]	; 0xfffffd28
   15c24:	beq	15d9c <__assert_fail@plt+0x4028>
   15c28:	movw	r3, #45872	; 0xb330
   15c2c:	movt	r3, #3
   15c30:	ldr	r1, [r3, #4040]	; 0xfc8
   15c34:	ldr	r3, [r3, #8]
   15c38:	cmp	r3, r1
   15c3c:	beq	15db8 <__assert_fail@plt+0x4044>
   15c40:	movw	r5, #45872	; 0xb330
   15c44:	movt	r5, #3
   15c48:	ldr	r3, [r5, #8]
   15c4c:	mov	r2, #152	; 0x98
   15c50:	mul	r8, r2, r3
   15c54:	ldr	sl, [r5, #12]
   15c58:	add	r4, sl, r8
   15c5c:	mov	r1, #0
   15c60:	mov	r0, r4
   15c64:	bl	11be8 <memset@plt>
   15c68:	str	r9, [r4, #112]	; 0x70
   15c6c:	str	r7, [r4, #116]	; 0x74
   15c70:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15c74:	str	r3, [r4, #120]	; 0x78
   15c78:	mvn	r3, #0
   15c7c:	str	r3, [r4, #144]	; 0x90
   15c80:	ldrb	r3, [r5, #3128]	; 0xc38
   15c84:	cmp	r3, #0
   15c88:	bne	15c98 <__assert_fail@plt+0x3f24>
   15c8c:	ldrb	r3, [r5, #3182]	; 0xc6e
   15c90:	cmp	r3, #0
   15c94:	bne	15de0 <__assert_fail@plt+0x406c>
   15c98:	cmp	r6, #0
   15c9c:	bne	15f0c <__assert_fail@plt+0x4198>
   15ca0:	movw	r3, #45872	; 0xb330
   15ca4:	movt	r3, #3
   15ca8:	ldrb	r3, [r3, #4044]	; 0xfcc
   15cac:	cmp	r3, #0
   15cb0:	bne	16a80 <__assert_fail@plt+0x4d0c>
   15cb4:	movw	r3, #45872	; 0xb330
   15cb8:	movt	r3, #3
   15cbc:	ldrb	r5, [r3, #4045]	; 0xfcd
   15cc0:	cmp	r5, #0
   15cc4:	bne	15e64 <__assert_fail@plt+0x40f0>
   15cc8:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15ccc:	cmp	r3, #3
   15cd0:	beq	15e00 <__assert_fail@plt+0x408c>
   15cd4:	movw	r3, #45872	; 0xb330
   15cd8:	movt	r3, #3
   15cdc:	ldrb	r3, [r3, #3112]	; 0xc28
   15ce0:	cmp	r3, #0
   15ce4:	bne	15e8c <__assert_fail@plt+0x4118>
   15ce8:	movw	r3, #45872	; 0xb330
   15cec:	movt	r3, #3
   15cf0:	ldrb	r3, [r3, #4046]	; 0xfce
   15cf4:	cmp	r3, #0
   15cf8:	moveq	r6, #0
   15cfc:	moveq	r7, #0
   15d00:	beq	162cc <__assert_fail@plt+0x4558>
   15d04:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15d08:	cmp	r3, #0
   15d0c:	cmpne	r3, #6
   15d10:	beq	15ea4 <__assert_fail@plt+0x4130>
   15d14:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15d18:	cmp	r3, #5
   15d1c:	movne	r6, #0
   15d20:	movne	r7, #0
   15d24:	bne	162cc <__assert_fail@plt+0x4558>
   15d28:	movw	r3, #45872	; 0xb330
   15d2c:	movt	r3, #3
   15d30:	ldr	r3, [r3, #20]
   15d34:	cmp	r3, #3
   15d38:	beq	15e64 <__assert_fail@plt+0x40f0>
   15d3c:	movw	r3, #45872	; 0xb330
   15d40:	movt	r3, #3
   15d44:	ldrb	r3, [r3, #4024]	; 0xfb8
   15d48:	cmp	r3, #0
   15d4c:	beq	16a14 <__assert_fail@plt+0x4ca0>
   15d50:	mov	r0, #14
   15d54:	bl	12590 <__assert_fail@plt+0x81c>
   15d58:	cmp	r0, #0
   15d5c:	bne	15e64 <__assert_fail@plt+0x40f0>
   15d60:	mov	r0, #16
   15d64:	bl	12590 <__assert_fail@plt+0x81c>
   15d68:	cmp	r0, #0
   15d6c:	bne	15e64 <__assert_fail@plt+0x40f0>
   15d70:	mov	r0, #17
   15d74:	bl	12590 <__assert_fail@plt+0x81c>
   15d78:	cmp	r0, #0
   15d7c:	bne	15e64 <__assert_fail@plt+0x40f0>
   15d80:	mov	r0, #21
   15d84:	bl	12590 <__assert_fail@plt+0x81c>
   15d88:	cmp	r0, #0
   15d8c:	moveq	r6, #0
   15d90:	moveq	r7, #0
   15d94:	beq	162cc <__assert_fail@plt+0x4558>
   15d98:	b	15e64 <__assert_fail@plt+0x40f0>
   15d9c:	ldr	r3, [pc, #3428]	; 16b08 <__assert_fail@plt+0x4d94>
   15da0:	movw	r2, #3335	; 0xd07
   15da4:	movw	r1, #28580	; 0x6fa4
   15da8:	movt	r1, #2
   15dac:	movw	r0, #28688	; 0x7010
   15db0:	movt	r0, #2
   15db4:	bl	11d74 <__assert_fail@plt>
   15db8:	movw	r4, #45872	; 0xb330
   15dbc:	movt	r4, #3
   15dc0:	mov	r2, #304	; 0x130
   15dc4:	ldr	r0, [r4, #12]
   15dc8:	bl	23f98 <_obstack_memory_used@@Base+0x3288>
   15dcc:	str	r0, [r4, #12]
   15dd0:	ldr	r3, [r4, #4040]	; 0xfc8
   15dd4:	lsl	r3, r3, #1
   15dd8:	str	r3, [r4, #4040]	; 0xfc8
   15ddc:	b	15c40 <__assert_fail@plt+0x3ecc>
   15de0:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15de4:	bl	132f8 <__assert_fail@plt+0x1584>
   15de8:	str	r0, [r4, #144]	; 0x90
   15dec:	cmp	r0, #0
   15df0:	beq	15c98 <__assert_fail@plt+0x3f24>
   15df4:	mov	r2, #1
   15df8:	strb	r2, [r5, #3128]	; 0xc38
   15dfc:	b	15c98 <__assert_fail@plt+0x3f24>
   15e00:	movw	r3, #45872	; 0xb330
   15e04:	movt	r3, #3
   15e08:	ldrb	r3, [r3, #4024]	; 0xfb8
   15e0c:	cmp	r3, #0
   15e10:	beq	15e44 <__assert_fail@plt+0x40d0>
   15e14:	mov	r0, #19
   15e18:	bl	12590 <__assert_fail@plt+0x81c>
   15e1c:	cmp	r0, #0
   15e20:	bne	15e64 <__assert_fail@plt+0x40f0>
   15e24:	mov	r0, #18
   15e28:	bl	12590 <__assert_fail@plt+0x81c>
   15e2c:	cmp	r0, #0
   15e30:	bne	15e64 <__assert_fail@plt+0x40f0>
   15e34:	mov	r0, #20
   15e38:	bl	12590 <__assert_fail@plt+0x81c>
   15e3c:	cmp	r0, #0
   15e40:	bne	15e64 <__assert_fail@plt+0x40f0>
   15e44:	movw	r3, #45872	; 0xb330
   15e48:	movt	r3, #3
   15e4c:	ldrb	r3, [r3, #3112]	; 0xc28
   15e50:	cmp	r3, #0
   15e54:	beq	15ce8 <__assert_fail@plt+0x3f74>
   15e58:	ldr	r2, [fp, #-732]	; 0xfffffd24
   15e5c:	tst	r2, r3
   15e60:	beq	15ee8 <__assert_fail@plt+0x4174>
   15e64:	ldr	r3, [fp, #-720]	; 0xfffffd30
   15e68:	ldrb	r5, [r3]
   15e6c:	cmp	r5, #47	; 0x2f
   15e70:	beq	16aec <__assert_fail@plt+0x4d78>
   15e74:	ldr	r3, [fp, #8]
   15e78:	ldrb	r7, [r3]
   15e7c:	cmp	r7, #0
   15e80:	bne	15f88 <__assert_fail@plt+0x4214>
   15e84:	ldr	r9, [fp, #-720]	; 0xfffffd30
   15e88:	b	15f44 <__assert_fail@plt+0x41d0>
   15e8c:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   15e90:	cmp	r2, #0
   15e94:	cmpne	r2, #6
   15e98:	moveq	r5, #1
   15e9c:	movne	r5, #0
   15ea0:	bne	15e58 <__assert_fail@plt+0x40e4>
   15ea4:	movw	r3, #45872	; 0xb330
   15ea8:	movt	r3, #3
   15eac:	ldr	r3, [r3, #4048]	; 0xfd0
   15eb0:	cmp	r3, #4
   15eb4:	beq	15e64 <__assert_fail@plt+0x40f0>
   15eb8:	movw	r3, #45872	; 0xb330
   15ebc:	movt	r3, #3
   15ec0:	ldrb	r3, [r3, #4032]	; 0xfc0
   15ec4:	cmp	r3, #0
   15ec8:	bne	15e64 <__assert_fail@plt+0x40f0>
   15ecc:	movw	r3, #45872	; 0xb330
   15ed0:	movt	r3, #3
   15ed4:	ldrb	r3, [r3, #4052]	; 0xfd4
   15ed8:	cmp	r3, #0
   15edc:	bne	15e64 <__assert_fail@plt+0x40f0>
   15ee0:	mov	r3, r5
   15ee4:	b	15e58 <__assert_fail@plt+0x40e4>
   15ee8:	movw	r3, #45872	; 0xb330
   15eec:	movt	r3, #3
   15ef0:	ldrb	r3, [r3, #4046]	; 0xfce
   15ef4:	cmp	r3, #0
   15ef8:	beq	16a08 <__assert_fail@plt+0x4c94>
   15efc:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15f00:	cmp	r3, #0
   15f04:	beq	15e64 <__assert_fail@plt+0x40f0>
   15f08:	b	15d14 <__assert_fail@plt+0x3fa0>
   15f0c:	ldr	r3, [fp, #-720]	; 0xfffffd30
   15f10:	ldrb	r5, [r3]
   15f14:	cmp	r5, #47	; 0x2f
   15f18:	beq	16048 <__assert_fail@plt+0x42d4>
   15f1c:	ldr	r3, [fp, #8]
   15f20:	ldrb	r7, [r3]
   15f24:	cmp	r7, #0
   15f28:	bne	15f88 <__assert_fail@plt+0x4214>
   15f2c:	ldr	r9, [fp, #-720]	; 0xfffffd30
   15f30:	movw	r3, #45872	; 0xb330
   15f34:	movt	r3, #3
   15f38:	ldrb	r3, [r3, #4044]	; 0xfcc
   15f3c:	cmp	r3, #0
   15f40:	bne	16aa4 <__assert_fail@plt+0x4d30>
   15f44:	movw	r3, #45872	; 0xb330
   15f48:	movt	r3, #3
   15f4c:	ldr	r5, [r3, #4048]	; 0xfd0
   15f50:	cmp	r5, #2
   15f54:	bcc	16068 <__assert_fail@plt+0x42f4>
   15f58:	cmp	r5, #3
   15f5c:	bls	16060 <__assert_fail@plt+0x42ec>
   15f60:	cmp	r5, #4
   15f64:	bne	16068 <__assert_fail@plt+0x42f4>
   15f68:	bl	12ee8 <__assert_fail@plt+0x1174>
   15f6c:	str	r0, [sp]
   15f70:	mov	r3, #0
   15f74:	add	r2, r4, #16
   15f78:	mov	r1, r9
   15f7c:	mvn	r0, #99	; 0x63
   15f80:	bl	13100 <__assert_fail@plt+0x138c>
   15f84:	b	1608c <__assert_fail@plt+0x4318>
   15f88:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15f8c:	bl	11b94 <strlen@plt>
   15f90:	mov	r9, r0
   15f94:	ldr	r0, [fp, #8]
   15f98:	bl	11b94 <strlen@plt>
   15f9c:	add	r0, r9, r0
   15fa0:	add	r0, r0, #9
   15fa4:	bic	r0, r0, #7
   15fa8:	sub	sp, sp, r0
   15fac:	add	r9, sp, #16
   15fb0:	cmp	r7, #46	; 0x2e
   15fb4:	beq	15fc8 <__assert_fail@plt+0x4254>
   15fb8:	ldr	r3, [fp, #8]
   15fbc:	add	r2, r3, #1
   15fc0:	mov	r1, r9
   15fc4:	b	15fe4 <__assert_fail@plt+0x4270>
   15fc8:	ldr	r3, [fp, #8]
   15fcc:	ldrb	r3, [r3, #1]
   15fd0:	cmp	r3, #0
   15fd4:	moveq	r3, r9
   15fd8:	beq	16020 <__assert_fail@plt+0x42ac>
   15fdc:	b	15fb8 <__assert_fail@plt+0x4244>
   15fe0:	mov	r1, r3
   15fe4:	mov	r0, r2
   15fe8:	mov	r3, r1
   15fec:	strb	r7, [r3], #1
   15ff0:	ldrb	r7, [r2], #1
   15ff4:	cmp	r7, #0
   15ff8:	bne	15fe0 <__assert_fail@plt+0x426c>
   15ffc:	ldr	r2, [fp, #8]
   16000:	cmp	r2, r0
   16004:	bcs	16020 <__assert_fail@plt+0x42ac>
   16008:	ldrb	r2, [r0, #-1]
   1600c:	cmp	r2, #47	; 0x2f
   16010:	beq	16020 <__assert_fail@plt+0x42ac>
   16014:	mov	r2, #47	; 0x2f
   16018:	strb	r2, [r3]
   1601c:	add	r3, r1, #2
   16020:	cmp	r5, #0
   16024:	beq	1603c <__assert_fail@plt+0x42c8>
   16028:	ldr	r2, [fp, #-720]	; 0xfffffd30
   1602c:	strb	r5, [r3], #1
   16030:	ldrb	r5, [r2, #1]!
   16034:	cmp	r5, #0
   16038:	bne	1602c <__assert_fail@plt+0x42b8>
   1603c:	mov	r2, #0
   16040:	strb	r2, [r3]
   16044:	b	15f30 <__assert_fail@plt+0x41bc>
   16048:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1604c:	b	15f30 <__assert_fail@plt+0x41bc>
   16050:	ldr	r9, [fp, #-720]	; 0xfffffd30
   16054:	b	16aa4 <__assert_fail@plt+0x4d30>
   16058:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1605c:	b	15f68 <__assert_fail@plt+0x41f4>
   16060:	cmp	r6, #0
   16064:	bne	16324 <__assert_fail@plt+0x45b0>
   16068:	bl	12ee8 <__assert_fail@plt+0x1174>
   1606c:	str	r0, [sp]
   16070:	mov	r3, #256	; 0x100
   16074:	add	r2, r4, #16
   16078:	mov	r1, r9
   1607c:	mvn	r0, #99	; 0x63
   16080:	bl	13100 <__assert_fail@plt+0x138c>
   16084:	mov	r3, #0
   16088:	str	r3, [fp, #-728]	; 0xfffffd28
   1608c:	cmp	r0, #0
   16090:	bne	163b8 <__assert_fail@plt+0x4644>
   16094:	mov	r3, #1
   16098:	strb	r3, [r4, #132]	; 0x84
   1609c:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   160a0:	cmp	r3, #5
   160a4:	beq	16420 <__assert_fail@plt+0x46ac>
   160a8:	ldr	r3, [r4, #32]
   160ac:	and	r3, r3, #61440	; 0xf000
   160b0:	cmp	r3, #32768	; 0x8000
   160b4:	beq	16420 <__assert_fail@plt+0x46ac>
   160b8:	movw	r3, #45872	; 0xb330
   160bc:	movt	r3, #3
   160c0:	ldr	r3, [r3, #3116]	; 0xc2c
   160c4:	cmp	r3, #0
   160c8:	beq	160e0 <__assert_fail@plt+0x436c>
   160cc:	movw	r3, #45872	; 0xb330
   160d0:	movt	r3, #3
   160d4:	ldrb	r3, [r3, #3600]	; 0xe10
   160d8:	cmp	r3, #0
   160dc:	beq	16a6c <__assert_fail@plt+0x4cf8>
   160e0:	ldrd	r2, [r4, #16]
   160e4:	ldr	r1, [pc, #2592]	; 16b0c <__assert_fail@plt+0x4d98>
   160e8:	ldrd	r0, [r1]
   160ec:	cmp	r3, r1
   160f0:	cmpeq	r2, r0
   160f4:	beq	164e0 <__assert_fail@plt+0x476c>
   160f8:	ldr	r3, [fp, #-728]	; 0xfffffd28
   160fc:	cmp	r3, #0
   16100:	beq	164f4 <__assert_fail@plt+0x4780>
   16104:	add	r1, r4, #128	; 0x80
   16108:	mov	r0, r9
   1610c:	bl	2327c <_obstack_memory_used@@Base+0x256c>
   16110:	mov	r5, r0
   16114:	cmp	r5, #0
   16118:	blt	16508 <__assert_fail@plt+0x4794>
   1611c:	ldr	r1, [r4, #128]	; 0x80
   16120:	movw	r0, #28816	; 0x7090
   16124:	movt	r0, #2
   16128:	bl	118a0 <strcmp@plt>
   1612c:	adds	r7, r0, #0
   16130:	movne	r7, #1
   16134:	movw	r3, #45872	; 0xb330
   16138:	movt	r3, #3
   1613c:	ldr	r3, [r3, #3116]	; 0xc2c
   16140:	cmp	r3, #0
   16144:	beq	1656c <__assert_fail@plt+0x47f8>
   16148:	cmp	r0, #0
   1614c:	movne	r5, #0
   16150:	movne	r0, r5
   16154:	beq	16ae0 <__assert_fail@plt+0x4d6c>
   16158:	eor	r5, r5, #1
   1615c:	and	r7, r7, r5
   16160:	cmp	r7, #0
   16164:	movne	r1, #1
   16168:	moveq	r1, #2
   1616c:	str	r1, [r4, #136]	; 0x88
   16170:	movw	r3, #45872	; 0xb330
   16174:	movt	r3, #3
   16178:	ldrb	r2, [r3, #3129]	; 0xc39
   1617c:	cmp	r1, #0
   16180:	orrne	r2, r2, #1
   16184:	strb	r2, [r3, #3129]	; 0xc39
   16188:	cmp	r0, #0
   1618c:	bne	16600 <__assert_fail@plt+0x488c>
   16190:	ldr	r3, [r4, #32]
   16194:	and	r3, r3, #61440	; 0xf000
   16198:	cmp	r3, #40960	; 0xa000
   1619c:	beq	16634 <__assert_fail@plt+0x48c0>
   161a0:	ldr	r3, [r4, #32]
   161a4:	and	r3, r3, #61440	; 0xf000
   161a8:	cmp	r3, #16384	; 0x4000
   161ac:	movne	r3, #5
   161b0:	strne	r3, [r4, #120]	; 0x78
   161b4:	beq	167d0 <__assert_fail@plt+0x4a5c>
   161b8:	ldrd	r6, [r4, #80]	; 0x50
   161bc:	movw	r3, #45872	; 0xb330
   161c0:	movt	r3, #3
   161c4:	ldr	r3, [r3, #3116]	; 0xc2c
   161c8:	cmp	r3, #0
   161cc:	beq	161e4 <__assert_fail@plt+0x4470>
   161d0:	movw	r3, #45872	; 0xb330
   161d4:	movt	r3, #3
   161d8:	ldrb	r3, [r3, #3113]	; 0xc29
   161dc:	cmp	r3, #0
   161e0:	beq	16a54 <__assert_fail@plt+0x4ce0>
   161e4:	movw	r5, #45872	; 0xb330
   161e8:	movt	r5, #3
   161ec:	add	r3, r5, #3600	; 0xe10
   161f0:	ldrd	r2, [r3, #-8]
   161f4:	strd	r2, [sp, #8]
   161f8:	mov	r2, #512	; 0x200
   161fc:	mov	r3, #0
   16200:	strd	r2, [sp]
   16204:	ldr	r3, [r5, #3588]	; 0xe04
   16208:	sub	r2, fp, #692	; 0x2b4
   1620c:	mov	r0, r6
   16210:	mov	r1, r7
   16214:	bl	1d588 <__assert_fail@plt+0xb814>
   16218:	mov	r1, #0
   1621c:	bl	1ec44 <__assert_fail@plt+0xced0>
   16220:	ldr	r3, [r5, #3136]	; 0xc40
   16224:	cmp	r3, r0
   16228:	strlt	r0, [r5, #3136]	; 0xc40
   1622c:	movw	r3, #45872	; 0xb330
   16230:	movt	r3, #3
   16234:	ldr	r3, [r3, #3116]	; 0xc2c
   16238:	cmp	r3, #0
   1623c:	bne	16a54 <__assert_fail@plt+0x4ce0>
   16240:	movw	r3, #45520	; 0xb1d0
   16244:	movt	r3, #3
   16248:	ldrb	r3, [r3, #204]	; 0xcc
   1624c:	cmp	r3, #0
   16250:	bne	16800 <__assert_fail@plt+0x4a8c>
   16254:	movw	r3, #45520	; 0xb1d0
   16258:	movt	r3, #3
   1625c:	ldrb	r3, [r3, #205]	; 0xcd
   16260:	cmp	r3, #0
   16264:	bne	1682c <__assert_fail@plt+0x4ab8>
   16268:	movw	r3, #45872	; 0xb330
   1626c:	movt	r3, #3
   16270:	ldrb	r3, [r3, #3120]	; 0xc30
   16274:	cmp	r3, #0
   16278:	bne	16884 <__assert_fail@plt+0x4b10>
   1627c:	movw	r3, #45872	; 0xb330
   16280:	movt	r3, #3
   16284:	ldrb	r3, [r3, #3600]	; 0xe10
   16288:	cmp	r3, #0
   1628c:	beq	162b8 <__assert_fail@plt+0x4544>
   16290:	ldr	r0, [r4, #128]	; 0x80
   16294:	bl	11b94 <strlen@plt>
   16298:	movw	r3, #45872	; 0xb330
   1629c:	movt	r3, #3
   162a0:	ldr	r3, [r3, #3156]	; 0xc54
   162a4:	cmp	r3, r0
   162a8:	bge	162b8 <__assert_fail@plt+0x4544>
   162ac:	movw	r3, #45872	; 0xb330
   162b0:	movt	r3, #3
   162b4:	str	r0, [r3, #3156]	; 0xc54
   162b8:	movw	r3, #45872	; 0xb330
   162bc:	movt	r3, #3
   162c0:	ldr	r3, [r3, #3116]	; 0xc2c
   162c4:	cmp	r3, #0
   162c8:	beq	168b0 <__assert_fail@plt+0x4b3c>
   162cc:	movw	r3, #45872	; 0xb330
   162d0:	movt	r3, #3
   162d4:	ldrb	r3, [r3, #3112]	; 0xc28
   162d8:	cmp	r3, #0
   162dc:	bne	16a20 <__assert_fail@plt+0x4cac>
   162e0:	ldr	r0, [fp, #-720]	; 0xfffffd30
   162e4:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   162e8:	str	r0, [sl, r8]
   162ec:	movw	r3, #45872	; 0xb330
   162f0:	movt	r3, #3
   162f4:	ldr	r2, [r3, #8]
   162f8:	add	r2, r2, #1
   162fc:	str	r2, [r3, #8]
   16300:	mov	r0, r6
   16304:	mov	r1, r7
   16308:	sub	sp, fp, #32
   1630c:	ldrd	r4, [sp]
   16310:	ldrd	r6, [sp, #8]
   16314:	ldrd	r8, [sp, #16]
   16318:	ldrd	sl, [sp, #24]
   1631c:	add	sp, sp, #32
   16320:	pop	{pc}		; (ldr pc, [sp], #4)
   16324:	bl	12ee8 <__assert_fail@plt+0x1174>
   16328:	str	r0, [sp]
   1632c:	mov	r3, #0
   16330:	add	r2, r4, #16
   16334:	mov	r1, r9
   16338:	mvn	r0, #99	; 0x63
   1633c:	bl	13100 <__assert_fail@plt+0x138c>
   16340:	cmp	r5, #2
   16344:	beq	16360 <__assert_fail@plt+0x45ec>
   16348:	cmp	r0, #0
   1634c:	blt	16370 <__assert_fail@plt+0x45fc>
   16350:	ldr	r3, [r4, #32]
   16354:	and	r3, r3, #61440	; 0xf000
   16358:	cmp	r3, #16384	; 0x4000
   1635c:	bne	16068 <__assert_fail@plt+0x42f4>
   16360:	cmp	r0, #0
   16364:	streq	r6, [fp, #-728]	; 0xfffffd28
   16368:	beq	16094 <__assert_fail@plt+0x4320>
   1636c:	b	16380 <__assert_fail@plt+0x460c>
   16370:	bl	11bb8 <__errno_location@plt>
   16374:	ldr	r3, [r0]
   16378:	cmp	r3, #2
   1637c:	beq	16068 <__assert_fail@plt+0x42f4>
   16380:	mov	r2, #5
   16384:	movw	r1, #28764	; 0x705c
   16388:	movt	r1, #2
   1638c:	mov	r0, #0
   16390:	bl	11984 <dcgettext@plt>
   16394:	mov	r2, r9
   16398:	mov	r1, r0
   1639c:	mov	r0, #1
   163a0:	bl	13260 <__assert_fail@plt+0x14ec>
   163a4:	ldr	r3, [pc, #1892]	; 16b10 <__assert_fail@plt+0x4d9c>
   163a8:	str	r3, [r4, #128]	; 0x80
   163ac:	mov	r6, #0
   163b0:	mov	r7, #0
   163b4:	b	16300 <__assert_fail@plt+0x458c>
   163b8:	mov	r2, #5
   163bc:	movw	r1, #28764	; 0x705c
   163c0:	movt	r1, #2
   163c4:	mov	r0, #0
   163c8:	bl	11984 <dcgettext@plt>
   163cc:	mov	r2, r9
   163d0:	mov	r1, r0
   163d4:	mov	r0, r6
   163d8:	bl	13260 <__assert_fail@plt+0x14ec>
   163dc:	ldr	r3, [pc, #1836]	; 16b10 <__assert_fail@plt+0x4d9c>
   163e0:	str	r3, [r4, #128]	; 0x80
   163e4:	cmp	r6, #0
   163e8:	movne	r6, #0
   163ec:	movne	r7, #0
   163f0:	bne	16300 <__assert_fail@plt+0x458c>
   163f4:	ldr	r0, [fp, #-720]	; 0xfffffd30
   163f8:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   163fc:	str	r0, [sl, r8]
   16400:	movw	r3, #45872	; 0xb330
   16404:	movt	r3, #3
   16408:	ldr	r2, [r3, #8]
   1640c:	add	r2, r2, #1
   16410:	str	r2, [r3, #8]
   16414:	mov	r6, #0
   16418:	mov	r7, #0
   1641c:	b	16300 <__assert_fail@plt+0x458c>
   16420:	movw	r3, #45872	; 0xb330
   16424:	movt	r3, #3
   16428:	ldrb	r3, [r3, #4024]	; 0xfb8
   1642c:	cmp	r3, #0
   16430:	beq	160b8 <__assert_fail@plt+0x4344>
   16434:	mov	r0, #21
   16438:	bl	12590 <__assert_fail@plt+0x81c>
   1643c:	subs	r5, r0, #0
   16440:	beq	160b8 <__assert_fail@plt+0x4344>
   16444:	ldrd	r2, [r4, #16]
   16448:	ldr	r1, [pc, #1724]	; 16b0c <__assert_fail@plt+0x4d98>
   1644c:	ldrd	r0, [r1, #-8]
   16450:	cmp	r3, r1
   16454:	cmpeq	r2, r0
   16458:	beq	164c8 <__assert_fail@plt+0x4754>
   1645c:	mov	r0, r9
   16460:	bl	11c84 <cap_get_file@plt>
   16464:	subs	r7, r0, #0
   16468:	beq	164a0 <__assert_fail@plt+0x472c>
   1646c:	mov	r1, #0
   16470:	mov	r0, r7
   16474:	bl	11870 <cap_to_text@plt>
   16478:	str	r0, [fp, #-724]	; 0xfffffd2c
   1647c:	mov	r0, r7
   16480:	bl	11ccc <cap_free@plt>
   16484:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   16488:	cmp	r0, #0
   1648c:	beq	164a0 <__assert_fail@plt+0x472c>
   16490:	ldrb	r7, [r0]
   16494:	bl	11ccc <cap_free@plt>
   16498:	cmp	r7, #0
   1649c:	bne	164d8 <__assert_fail@plt+0x4764>
   164a0:	bl	11bb8 <__errno_location@plt>
   164a4:	ldr	r0, [r0]
   164a8:	bl	11f2c <__assert_fail@plt+0x1b8>
   164ac:	subs	r5, r0, #0
   164b0:	beq	164d8 <__assert_fail@plt+0x4764>
   164b4:	ldrd	r2, [r4, #16]
   164b8:	ldr	r1, [pc, #1612]	; 16b0c <__assert_fail@plt+0x4d98>
   164bc:	strd	r2, [r1, #-8]
   164c0:	mov	r5, #0
   164c4:	b	164d8 <__assert_fail@plt+0x4764>
   164c8:	bl	11bb8 <__errno_location@plt>
   164cc:	mov	r3, #95	; 0x5f
   164d0:	str	r3, [r0]
   164d4:	mov	r5, #0
   164d8:	strb	r5, [r4, #140]	; 0x8c
   164dc:	b	160b8 <__assert_fail@plt+0x4344>
   164e0:	bl	11bb8 <__errno_location@plt>
   164e4:	mov	r3, #95	; 0x5f
   164e8:	str	r3, [r0]
   164ec:	mvn	r5, #0
   164f0:	b	16528 <__assert_fail@plt+0x47b4>
   164f4:	add	r1, r4, #128	; 0x80
   164f8:	mov	r0, r9
   164fc:	bl	232a0 <_obstack_memory_used@@Base+0x2590>
   16500:	mov	r5, r0
   16504:	b	16114 <__assert_fail@plt+0x43a0>
   16508:	bl	11bb8 <__errno_location@plt>
   1650c:	ldr	r0, [r0]
   16510:	bl	11f2c <__assert_fail@plt+0x1b8>
   16514:	cmp	r0, #0
   16518:	beq	16528 <__assert_fail@plt+0x47b4>
   1651c:	ldrd	r2, [r4, #16]
   16520:	ldr	r1, [pc, #1508]	; 16b0c <__assert_fail@plt+0x4d98>
   16524:	strd	r2, [r1]
   16528:	ldr	r3, [pc, #1504]	; 16b10 <__assert_fail@plt+0x4d9c>
   1652c:	str	r3, [r4, #128]	; 0x80
   16530:	bl	11bb8 <__errno_location@plt>
   16534:	ldr	r3, [r0]
   16538:	cmp	r3, #61	; 0x3d
   1653c:	cmpne	r3, #95	; 0x5f
   16540:	lsrne	r0, r5, #31
   16544:	movne	r1, #0
   16548:	bne	1616c <__assert_fail@plt+0x43f8>
   1654c:	movw	r3, #45872	; 0xb330
   16550:	movt	r3, #3
   16554:	ldr	r3, [r3, #3116]	; 0xc2c
   16558:	cmp	r3, #0
   1655c:	movne	r3, #0
   16560:	strne	r3, [r4, #136]	; 0x88
   16564:	bne	16190 <__assert_fail@plt+0x441c>
   16568:	mov	r7, #0
   1656c:	ldrd	r2, [r4, #16]
   16570:	ldr	r1, [pc, #1436]	; 16b14 <__assert_fail@plt+0x4da0>
   16574:	ldrd	r0, [r1, #-8]
   16578:	cmp	r3, r1
   1657c:	cmpeq	r2, r0
   16580:	beq	165c8 <__assert_fail@plt+0x4854>
   16584:	bl	11bb8 <__errno_location@plt>
   16588:	mov	r3, #0
   1658c:	str	r0, [fp, #-724]	; 0xfffffd2c
   16590:	str	r3, [r0]
   16594:	add	r1, r4, #16
   16598:	mov	r0, r9
   1659c:	bl	1b974 <__assert_fail@plt+0x9c00>
   165a0:	subs	r5, r0, #0
   165a4:	ble	165dc <__assert_fail@plt+0x4868>
   165a8:	lsr	r0, r5, #31
   165ac:	cmp	r5, #0
   165b0:	movle	r5, #0
   165b4:	movgt	r5, #1
   165b8:	orrs	r3, r5, r7
   165bc:	bne	16158 <__assert_fail@plt+0x43e4>
   165c0:	mov	r1, #0
   165c4:	b	1616c <__assert_fail@plt+0x43f8>
   165c8:	bl	11bb8 <__errno_location@plt>
   165cc:	mov	r3, #95	; 0x5f
   165d0:	str	r3, [r0]
   165d4:	mov	r5, #0
   165d8:	b	165a8 <__assert_fail@plt+0x4834>
   165dc:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   165e0:	ldr	r0, [r2]
   165e4:	bl	11f2c <__assert_fail@plt+0x1b8>
   165e8:	cmp	r0, #0
   165ec:	beq	165a8 <__assert_fail@plt+0x4834>
   165f0:	ldrd	r2, [r4, #16]
   165f4:	ldr	r1, [pc, #1304]	; 16b14 <__assert_fail@plt+0x4da0>
   165f8:	strd	r2, [r1, #-8]
   165fc:	b	165a8 <__assert_fail@plt+0x4834>
   16600:	bl	11bb8 <__errno_location@plt>
   16604:	ldr	r5, [r0]
   16608:	mov	r2, r9
   1660c:	mov	r1, #3
   16610:	mov	r0, #0
   16614:	bl	22e74 <_obstack_memory_used@@Base+0x2164>
   16618:	mov	r3, r0
   1661c:	movw	r2, #37260	; 0x918c
   16620:	movt	r2, #2
   16624:	mov	r1, r5
   16628:	mov	r0, #0
   1662c:	bl	11a8c <error@plt>
   16630:	b	16190 <__assert_fail@plt+0x441c>
   16634:	movw	r3, #45872	; 0xb330
   16638:	movt	r3, #3
   1663c:	ldr	r3, [r3, #3116]	; 0xc2c
   16640:	cmp	r3, #0
   16644:	beq	1665c <__assert_fail@plt+0x48e8>
   16648:	movw	r3, #45872	; 0xb330
   1664c:	movt	r3, #3
   16650:	ldrb	r3, [r3, #4052]	; 0xfd4
   16654:	cmp	r3, #0
   16658:	beq	16754 <__assert_fail@plt+0x49e0>
   1665c:	ldr	r1, [r4, #64]	; 0x40
   16660:	mov	r0, r9
   16664:	bl	1a908 <__assert_fail@plt+0x8b94>
   16668:	mov	r5, r0
   1666c:	str	r0, [r4, #4]
   16670:	cmp	r0, #0
   16674:	beq	16760 <__assert_fail@plt+0x49ec>
   16678:	ldrb	r3, [r5]
   1667c:	cmp	r3, #47	; 0x2f
   16680:	beq	16798 <__assert_fail@plt+0x4a24>
   16684:	mov	r0, r9
   16688:	bl	1b884 <__assert_fail@plt+0x9b10>
   1668c:	subs	r7, r0, #0
   16690:	beq	167a8 <__assert_fail@plt+0x4a34>
   16694:	mov	r0, r5
   16698:	bl	11b94 <strlen@plt>
   1669c:	add	r3, r7, #2
   166a0:	add	r0, r3, r0
   166a4:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   166a8:	str	r0, [fp, #-724]	; 0xfffffd2c
   166ac:	add	r3, r9, r7
   166b0:	ldrb	r3, [r3, #-1]
   166b4:	cmp	r3, #47	; 0x2f
   166b8:	addne	r7, r7, #1
   166bc:	mov	r2, r7
   166c0:	mov	r1, r9
   166c4:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   166c8:	bl	11c00 <stpncpy@plt>
   166cc:	mov	r1, r5
   166d0:	bl	11a5c <strcpy@plt>
   166d4:	ldr	r3, [r4, #144]	; 0x90
   166d8:	cmp	r3, #0
   166dc:	beq	167b8 <__assert_fail@plt+0x4a44>
   166e0:	movw	r3, #45872	; 0xb330
   166e4:	movt	r3, #3
   166e8:	ldr	r3, [r3, #20]
   166ec:	cmp	r3, #1
   166f0:	bhi	16708 <__assert_fail@plt+0x4994>
   166f4:	movw	r3, #45872	; 0xb330
   166f8:	movt	r3, #3
   166fc:	ldrb	r3, [r3, #4052]	; 0xfd4
   16700:	cmp	r3, #0
   16704:	beq	1673c <__assert_fail@plt+0x49c8>
   16708:	mov	r3, #2
   1670c:	str	r3, [sp]
   16710:	mov	r3, #0
   16714:	sub	r2, fp, #692	; 0x2b4
   16718:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1671c:	mvn	r0, #99	; 0x63
   16720:	bl	13100 <__assert_fail@plt+0x138c>
   16724:	cmp	r0, #0
   16728:	bne	1673c <__assert_fail@plt+0x49c8>
   1672c:	mov	r3, #1
   16730:	strb	r3, [r4, #133]	; 0x85
   16734:	ldr	r3, [fp, #-676]	; 0xfffffd5c
   16738:	str	r3, [r4, #124]	; 0x7c
   1673c:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   16740:	bl	1c200 <__assert_fail@plt+0xa48c>
   16744:	ldr	r3, [r4, #32]
   16748:	and	r3, r3, #61440	; 0xf000
   1674c:	cmp	r3, #40960	; 0xa000
   16750:	bne	161a8 <__assert_fail@plt+0x4434>
   16754:	mov	r3, #6
   16758:	str	r3, [r4, #120]	; 0x78
   1675c:	b	161b8 <__assert_fail@plt+0x4444>
   16760:	mov	r2, #5
   16764:	movw	r1, #28784	; 0x7070
   16768:	movt	r1, #2
   1676c:	mov	r0, #0
   16770:	bl	11984 <dcgettext@plt>
   16774:	mov	r2, r9
   16778:	mov	r1, r0
   1677c:	mov	r0, r6
   16780:	bl	13260 <__assert_fail@plt+0x14ec>
   16784:	ldr	r5, [r4, #4]
   16788:	cmp	r5, #0
   1678c:	streq	r5, [fp, #-724]	; 0xfffffd2c
   16790:	bne	16678 <__assert_fail@plt+0x4904>
   16794:	b	1673c <__assert_fail@plt+0x49c8>
   16798:	mov	r0, r5
   1679c:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   167a0:	str	r0, [fp, #-724]	; 0xfffffd2c
   167a4:	b	166d4 <__assert_fail@plt+0x4960>
   167a8:	mov	r0, r5
   167ac:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   167b0:	str	r0, [fp, #-724]	; 0xfffffd2c
   167b4:	b	166d4 <__assert_fail@plt+0x4960>
   167b8:	ldr	r0, [r4, #4]
   167bc:	bl	132f8 <__assert_fail@plt+0x1584>
   167c0:	cmp	r0, #0
   167c4:	mvnne	r3, #0
   167c8:	strne	r3, [r4, #144]	; 0x90
   167cc:	b	166e0 <__assert_fail@plt+0x496c>
   167d0:	cmp	r6, #0
   167d4:	beq	167f4 <__assert_fail@plt+0x4a80>
   167d8:	movw	r3, #45872	; 0xb330
   167dc:	movt	r3, #3
   167e0:	ldrb	r3, [r3, #4080]	; 0xff0
   167e4:	cmp	r3, #0
   167e8:	moveq	r3, #9
   167ec:	streq	r3, [r4, #120]	; 0x78
   167f0:	beq	161b8 <__assert_fail@plt+0x4444>
   167f4:	mov	r3, #3
   167f8:	str	r3, [r4, #120]	; 0x78
   167fc:	b	161b8 <__assert_fail@plt+0x4444>
   16800:	ldr	r0, [r4, #40]	; 0x28
   16804:	bl	13368 <__assert_fail@plt+0x15f4>
   16808:	movw	r3, #45872	; 0xb330
   1680c:	movt	r3, #3
   16810:	ldr	r3, [r3, #3144]	; 0xc48
   16814:	cmp	r3, r0
   16818:	bge	16254 <__assert_fail@plt+0x44e0>
   1681c:	movw	r3, #45872	; 0xb330
   16820:	movt	r3, #3
   16824:	str	r0, [r3, #3144]	; 0xc48
   16828:	b	16254 <__assert_fail@plt+0x44e0>
   1682c:	ldr	r5, [r4, #44]	; 0x2c
   16830:	movw	r3, #45872	; 0xb330
   16834:	movt	r3, #3
   16838:	ldrb	r3, [r3, #3180]	; 0xc6c
   1683c:	cmp	r3, #0
   16840:	movne	r0, #0
   16844:	beq	16878 <__assert_fail@plt+0x4b04>
   16848:	mov	r2, r5
   1684c:	mov	r3, #0
   16850:	bl	130b4 <__assert_fail@plt+0x1340>
   16854:	movw	r3, #45872	; 0xb330
   16858:	movt	r3, #3
   1685c:	ldr	r3, [r3, #3148]	; 0xc4c
   16860:	cmp	r3, r0
   16864:	bge	16268 <__assert_fail@plt+0x44f4>
   16868:	movw	r3, #45872	; 0xb330
   1686c:	movt	r3, #3
   16870:	str	r0, [r3, #3148]	; 0xc4c
   16874:	b	16268 <__assert_fail@plt+0x44f4>
   16878:	mov	r0, r5
   1687c:	bl	1e218 <__assert_fail@plt+0xc4a4>
   16880:	b	16848 <__assert_fail@plt+0x4ad4>
   16884:	ldr	r0, [r4, #40]	; 0x28
   16888:	bl	13368 <__assert_fail@plt+0x15f4>
   1688c:	movw	r3, #45872	; 0xb330
   16890:	movt	r3, #3
   16894:	ldr	r3, [r3, #3152]	; 0xc50
   16898:	cmp	r3, r0
   1689c:	bge	1627c <__assert_fail@plt+0x4508>
   168a0:	movw	r3, #45872	; 0xb330
   168a4:	movt	r3, #3
   168a8:	str	r0, [r3, #3152]	; 0xc50
   168ac:	b	1627c <__assert_fail@plt+0x4508>
   168b0:	sub	r2, fp, #716	; 0x2cc
   168b4:	ldr	r0, [r4, #36]	; 0x24
   168b8:	mov	r1, #0
   168bc:	bl	1e4f8 <__assert_fail@plt+0xc784>
   168c0:	bl	11b94 <strlen@plt>
   168c4:	movw	r3, #45872	; 0xb330
   168c8:	movt	r3, #3
   168cc:	ldr	r3, [r3, #3140]	; 0xc44
   168d0:	cmp	r3, r0
   168d4:	bge	168e4 <__assert_fail@plt+0x4b70>
   168d8:	movw	r3, #45872	; 0xb330
   168dc:	movt	r3, #3
   168e0:	str	r0, [r3, #3140]	; 0xc44
   168e4:	ldr	r3, [r4, #32]
   168e8:	and	r3, r3, #45056	; 0xb000
   168ec:	cmp	r3, #8192	; 0x2000
   168f0:	bne	169bc <__assert_fail@plt+0x4c48>
   168f4:	ldr	r0, [r4, #48]	; 0x30
   168f8:	ldr	r3, [r4, #52]	; 0x34
   168fc:	ubfx	r0, r0, #8, #12
   16900:	bic	r3, r3, #4080	; 0xff0
   16904:	bic	r3, r3, #15
   16908:	sub	r2, fp, #692	; 0x2b4
   1690c:	orr	r0, r3, r0
   16910:	mov	r1, #0
   16914:	bl	1e4f8 <__assert_fail@plt+0xc784>
   16918:	bl	11b94 <strlen@plt>
   1691c:	movw	r3, #45872	; 0xb330
   16920:	movt	r3, #3
   16924:	ldr	r3, [r3, #3160]	; 0xc58
   16928:	cmp	r3, r0
   1692c:	bge	1693c <__assert_fail@plt+0x4bc8>
   16930:	movw	r3, #45872	; 0xb330
   16934:	movt	r3, #3
   16938:	str	r0, [r3, #3160]	; 0xc58
   1693c:	ldr	r3, [r4, #48]	; 0x30
   16940:	ldr	r2, [r4, #52]	; 0x34
   16944:	uxtb	r0, r3
   16948:	lsr	r3, r3, #12
   1694c:	orr	r3, r3, r2, lsl #20
   16950:	bic	r3, r3, #255	; 0xff
   16954:	sub	r2, fp, #692	; 0x2b4
   16958:	orr	r0, r3, r0
   1695c:	mov	r1, #0
   16960:	bl	1e4f8 <__assert_fail@plt+0xc784>
   16964:	bl	11b94 <strlen@plt>
   16968:	movw	r3, #45872	; 0xb330
   1696c:	movt	r3, #3
   16970:	ldr	r3, [r3, #3164]	; 0xc5c
   16974:	cmp	r3, r0
   16978:	bge	16988 <__assert_fail@plt+0x4c14>
   1697c:	movw	r3, #45872	; 0xb330
   16980:	movt	r3, #3
   16984:	str	r0, [r3, #3164]	; 0xc5c
   16988:	movw	r2, #45872	; 0xb330
   1698c:	movt	r2, #3
   16990:	ldr	r3, [r2, #3160]	; 0xc58
   16994:	add	r3, r3, #2
   16998:	ldr	r1, [r2, #3164]	; 0xc5c
   1699c:	add	r3, r3, r1
   169a0:	ldr	r2, [r2, #3168]	; 0xc60
   169a4:	cmp	r2, r3
   169a8:	bge	162cc <__assert_fail@plt+0x4558>
   169ac:	movw	r2, #45872	; 0xb330
   169b0:	movt	r2, #3
   169b4:	str	r3, [r2, #3168]	; 0xc60
   169b8:	b	162cc <__assert_fail@plt+0x4558>
   169bc:	movw	r5, #45872	; 0xb330
   169c0:	movt	r5, #3
   169c4:	ldrd	r0, [r4, #64]	; 0x40
   169c8:	movw	r3, #45520	; 0xb1d0
   169cc:	movt	r3, #3
   169d0:	ldrd	r2, [r3, #216]	; 0xd8
   169d4:	strd	r2, [sp, #8]
   169d8:	mov	r2, #1
   169dc:	mov	r3, #0
   169e0:	strd	r2, [sp]
   169e4:	ldr	r3, [r5, #4084]	; 0xff4
   169e8:	sub	r2, fp, #692	; 0x2b4
   169ec:	bl	1d588 <__assert_fail@plt+0xb814>
   169f0:	mov	r1, #0
   169f4:	bl	1ec44 <__assert_fail@plt+0xced0>
   169f8:	ldr	r3, [r5, #3168]	; 0xc60
   169fc:	cmp	r3, r0
   16a00:	strlt	r0, [r5, #3168]	; 0xc60
   16a04:	b	162cc <__assert_fail@plt+0x4558>
   16a08:	mov	r6, #0
   16a0c:	mov	r7, #0
   16a10:	b	162cc <__assert_fail@plt+0x4558>
   16a14:	mov	r6, #0
   16a18:	mov	r7, #0
   16a1c:	b	162cc <__assert_fail@plt+0x4558>
   16a20:	sub	r2, fp, #692	; 0x2b4
   16a24:	ldrd	r0, [r4, #112]	; 0x70
   16a28:	bl	1e4f8 <__assert_fail@plt+0xc784>
   16a2c:	bl	11b94 <strlen@plt>
   16a30:	movw	r3, #45872	; 0xb330
   16a34:	movt	r3, #3
   16a38:	ldr	r3, [r3, #3132]	; 0xc3c
   16a3c:	cmp	r3, r0
   16a40:	bge	162e0 <__assert_fail@plt+0x456c>
   16a44:	movw	r3, #45872	; 0xb330
   16a48:	movt	r3, #3
   16a4c:	str	r0, [r3, #3132]	; 0xc3c
   16a50:	b	162e0 <__assert_fail@plt+0x456c>
   16a54:	movw	r3, #45872	; 0xb330
   16a58:	movt	r3, #3
   16a5c:	ldrb	r3, [r3, #3600]	; 0xe10
   16a60:	cmp	r3, #0
   16a64:	bne	16290 <__assert_fail@plt+0x451c>
   16a68:	b	162cc <__assert_fail@plt+0x4558>
   16a6c:	ldr	r3, [r4, #32]
   16a70:	and	r3, r3, #61440	; 0xf000
   16a74:	cmp	r3, #40960	; 0xa000
   16a78:	bne	161a0 <__assert_fail@plt+0x442c>
   16a7c:	b	16648 <__assert_fail@plt+0x48d4>
   16a80:	ldr	r3, [fp, #-720]	; 0xfffffd30
   16a84:	ldrb	r5, [r3]
   16a88:	cmp	r5, #47	; 0x2f
   16a8c:	beq	16050 <__assert_fail@plt+0x42dc>
   16a90:	ldr	r3, [fp, #8]
   16a94:	ldrb	r7, [r3]
   16a98:	cmp	r7, #0
   16a9c:	bne	15f88 <__assert_fail@plt+0x4214>
   16aa0:	ldr	r9, [fp, #-720]	; 0xfffffd30
   16aa4:	mov	r1, #2
   16aa8:	mov	r0, r9
   16aac:	bl	1b014 <__assert_fail@plt+0x92a0>
   16ab0:	str	r0, [r4, #8]
   16ab4:	cmp	r0, #0
   16ab8:	bne	15f44 <__assert_fail@plt+0x41d0>
   16abc:	mov	r2, #5
   16ac0:	movw	r1, #28740	; 0x7044
   16ac4:	movt	r1, #2
   16ac8:	bl	11984 <dcgettext@plt>
   16acc:	mov	r2, r9
   16ad0:	mov	r1, r0
   16ad4:	mov	r0, r6
   16ad8:	bl	13260 <__assert_fail@plt+0x14ec>
   16adc:	b	15f44 <__assert_fail@plt+0x41d0>
   16ae0:	mov	r3, #0
   16ae4:	str	r3, [r4, #136]	; 0x88
   16ae8:	b	16190 <__assert_fail@plt+0x441c>
   16aec:	movw	r3, #45872	; 0xb330
   16af0:	movt	r3, #3
   16af4:	ldr	r3, [r3, #4048]	; 0xfd0
   16af8:	cmp	r3, #4
   16afc:	beq	16058 <__assert_fail@plt+0x42e4>
   16b00:	ldr	r9, [fp, #-720]	; 0xfffffd30
   16b04:	b	16068 <__assert_fail@plt+0x42f4>
   16b08:	ldrdeq	r5, [r2], -r4
   16b0c:	andeq	ip, r3, r0, lsl r3
   16b10:	andeq	fp, r3, r0, lsr #5
   16b14:	andeq	ip, r3, r0, lsr #6
   16b18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16b1c:	strd	r6, [sp, #8]
   16b20:	strd	r8, [sp, #16]
   16b24:	str	sl, [sp, #24]
   16b28:	str	lr, [sp, #28]
   16b2c:	sub	sp, sp, #4736	; 0x1280
   16b30:	sub	sp, sp, #40	; 0x28
   16b34:	mov	r6, r0
   16b38:	ldrb	r3, [r0, #132]	; 0x84
   16b3c:	cmp	r3, #0
   16b40:	beq	16b9c <__assert_fail@plt+0x4e28>
   16b44:	add	r1, sp, #4736	; 0x1280
   16b48:	add	r1, r1, #28
   16b4c:	add	r0, r0, #16
   16b50:	bl	1bbc8 <__assert_fail@plt+0x9e54>
   16b54:	movw	r3, #45872	; 0xb330
   16b58:	movt	r3, #3
   16b5c:	ldrb	r3, [r3, #3129]	; 0xc39
   16b60:	cmp	r3, #0
   16b64:	bne	16bec <__assert_fail@plt+0x4e78>
   16b68:	add	r2, sp, #4736	; 0x1280
   16b6c:	add	r2, r2, #38	; 0x26
   16b70:	strb	r3, [r2]
   16b74:	movw	r3, #45872	; 0xb330
   16b78:	movt	r3, #3
   16b7c:	ldr	r3, [r3, #3108]	; 0xc24
   16b80:	cmp	r3, #3
   16b84:	ldrls	pc, [pc, r3, lsl #2]
   16b88:	b	16e80 <__assert_fail@plt+0x510c>
   16b8c:	andeq	r6, r1, r0, lsr lr
   16b90:	andeq	r6, r1, r8, lsr #24
   16b94:	andeq	r6, r1, r8, asr #28
   16b98:	andeq	r6, r1, r0, ror #28
   16b9c:	movw	r3, #22608	; 0x5850
   16ba0:	movt	r3, #2
   16ba4:	ldr	r2, [r0, #120]	; 0x78
   16ba8:	add	r3, r3, r2
   16bac:	ldrb	r3, [r3, #400]	; 0x190
   16bb0:	add	r2, sp, #4736	; 0x1280
   16bb4:	add	r2, r2, #28
   16bb8:	strb	r3, [r2]
   16bbc:	add	r2, sp, #4736	; 0x1280
   16bc0:	add	r2, r2, #29
   16bc4:	movw	r3, #16191	; 0x3f3f
   16bc8:	bfi	r3, r3, #16, #16
   16bcc:	str	r3, [r2]
   16bd0:	str	r3, [r2, #4]
   16bd4:	strh	r3, [r2, #8]
   16bd8:	mov	r3, #0
   16bdc:	add	r2, sp, #4736	; 0x1280
   16be0:	add	r2, r2, #39	; 0x27
   16be4:	strb	r3, [r2]
   16be8:	b	16b54 <__assert_fail@plt+0x4de0>
   16bec:	ldr	r3, [r6, #136]	; 0x88
   16bf0:	cmp	r3, #1
   16bf4:	beq	16c14 <__assert_fail@plt+0x4ea0>
   16bf8:	cmp	r3, #2
   16bfc:	bne	16b74 <__assert_fail@plt+0x4e00>
   16c00:	mov	r3, #43	; 0x2b
   16c04:	add	r2, sp, #4736	; 0x1280
   16c08:	add	r2, r2, #38	; 0x26
   16c0c:	strb	r3, [r2]
   16c10:	b	16b74 <__assert_fail@plt+0x4e00>
   16c14:	mov	r3, #46	; 0x2e
   16c18:	add	r2, sp, #4736	; 0x1280
   16c1c:	add	r2, r2, #38	; 0x26
   16c20:	strb	r3, [r2]
   16c24:	b	16b74 <__assert_fail@plt+0x4e00>
   16c28:	ldr	r3, [r6, #108]	; 0x6c
   16c2c:	ldr	r2, [r6, #104]	; 0x68
   16c30:	str	r2, [sp, #1112]	; 0x458
   16c34:	str	r3, [sp, #1116]	; 0x45c
   16c38:	mov	r7, #1
   16c3c:	movw	r3, #45872	; 0xb330
   16c40:	movt	r3, #3
   16c44:	ldrb	r3, [r3, #3112]	; 0xc28
   16c48:	cmp	r3, #0
   16c4c:	addeq	r4, sp, #1120	; 0x460
   16c50:	bne	16e84 <__assert_fail@plt+0x5110>
   16c54:	movw	r3, #45872	; 0xb330
   16c58:	movt	r3, #3
   16c5c:	ldrb	r3, [r3, #3113]	; 0xc29
   16c60:	cmp	r3, #0
   16c64:	beq	16cd4 <__assert_fail@plt+0x4f60>
   16c68:	ldrb	r3, [r6, #132]	; 0x84
   16c6c:	cmp	r3, #0
   16c70:	movweq	r8, #28620	; 0x6fcc
   16c74:	movteq	r8, #2
   16c78:	bne	16ef0 <__assert_fail@plt+0x517c>
   16c7c:	movw	r3, #45872	; 0xb330
   16c80:	movt	r3, #3
   16c84:	ldr	r5, [r3, #3136]	; 0xc40
   16c88:	mov	r1, #0
   16c8c:	mov	r0, r8
   16c90:	bl	1ec44 <__assert_fail@plt+0xced0>
   16c94:	sub	r0, r5, r0
   16c98:	cmp	r0, #0
   16c9c:	ble	16f28 <__assert_fail@plt+0x51b4>
   16ca0:	add	r0, r4, r0
   16ca4:	mov	r3, #32
   16ca8:	strb	r3, [r4], #1
   16cac:	cmp	r4, r0
   16cb0:	bne	16ca8 <__assert_fail@plt+0x4f34>
   16cb4:	sub	r8, r8, #1
   16cb8:	mov	r4, r0
   16cbc:	ldrb	r3, [r8, #1]!
   16cc0:	strb	r3, [r4], #1
   16cc4:	cmp	r3, #0
   16cc8:	bne	16f30 <__assert_fail@plt+0x51bc>
   16ccc:	mov	r3, #32
   16cd0:	strb	r3, [r4, #-1]
   16cd4:	movw	r3, #45872	; 0xb330
   16cd8:	movt	r3, #3
   16cdc:	ldr	r5, [r3, #3140]	; 0xc44
   16ce0:	ldrb	r3, [r6, #132]	; 0x84
   16ce4:	cmp	r3, #0
   16ce8:	movweq	r0, #28620	; 0x6fcc
   16cec:	movteq	r0, #2
   16cf0:	bne	16f38 <__assert_fail@plt+0x51c4>
   16cf4:	str	r0, [sp, #8]
   16cf8:	str	r5, [sp, #4]
   16cfc:	add	r3, sp, #4736	; 0x1280
   16d00:	add	r3, r3, #28
   16d04:	str	r3, [sp]
   16d08:	movw	r3, #28828	; 0x709c
   16d0c:	movt	r3, #2
   16d10:	mvn	r2, #0
   16d14:	mov	r1, #1
   16d18:	mov	r0, r4
   16d1c:	bl	11bc4 <__sprintf_chk@plt>
   16d20:	add	r4, r4, r0
   16d24:	bl	14650 <__assert_fail@plt+0x28dc>
   16d28:	movw	r3, #45520	; 0xb1d0
   16d2c:	movt	r3, #3
   16d30:	ldrb	r3, [r3, #204]	; 0xcc
   16d34:	cmp	r3, #0
   16d38:	bne	16d78 <__assert_fail@plt+0x5004>
   16d3c:	movw	r3, #45520	; 0xb1d0
   16d40:	movt	r3, #3
   16d44:	ldrb	r3, [r3, #205]	; 0xcd
   16d48:	cmp	r3, #0
   16d4c:	bne	16d78 <__assert_fail@plt+0x5004>
   16d50:	movw	r3, #45872	; 0xb330
   16d54:	movt	r3, #3
   16d58:	ldrb	r3, [r3, #3120]	; 0xc30
   16d5c:	cmp	r3, #0
   16d60:	bne	16d78 <__assert_fail@plt+0x5004>
   16d64:	movw	r3, #45872	; 0xb330
   16d68:	movt	r3, #3
   16d6c:	ldrb	r3, [r3, #3600]	; 0xe10
   16d70:	cmp	r3, #0
   16d74:	beq	16dd8 <__assert_fail@plt+0x5064>
   16d78:	add	r0, sp, #1120	; 0x460
   16d7c:	sub	r1, r4, r0
   16d80:	bl	145d4 <__assert_fail@plt+0x2860>
   16d84:	movw	r3, #45520	; 0xb1d0
   16d88:	movt	r3, #3
   16d8c:	ldrb	r3, [r3, #204]	; 0xcc
   16d90:	cmp	r3, #0
   16d94:	bne	16f4c <__assert_fail@plt+0x51d8>
   16d98:	movw	r3, #45520	; 0xb1d0
   16d9c:	movt	r3, #3
   16da0:	ldrb	r3, [r3, #205]	; 0xcd
   16da4:	cmp	r3, #0
   16da8:	bne	16f68 <__assert_fail@plt+0x51f4>
   16dac:	movw	r3, #45872	; 0xb330
   16db0:	movt	r3, #3
   16db4:	ldrb	r3, [r3, #3120]	; 0xc30
   16db8:	cmp	r3, #0
   16dbc:	bne	16fc4 <__assert_fail@plt+0x5250>
   16dc0:	movw	r3, #45872	; 0xb330
   16dc4:	movt	r3, #3
   16dc8:	ldrb	r3, [r3, #3600]	; 0xe10
   16dcc:	cmp	r3, #0
   16dd0:	addeq	r4, sp, #1120	; 0x460
   16dd4:	bne	16fe0 <__assert_fail@plt+0x526c>
   16dd8:	ldrb	r3, [r6, #132]	; 0x84
   16ddc:	cmp	r3, #0
   16de0:	beq	170bc <__assert_fail@plt+0x5348>
   16de4:	ldr	r3, [r6, #32]
   16de8:	and	r3, r3, #45056	; 0xb000
   16dec:	cmp	r3, #8192	; 0x2000
   16df0:	beq	17008 <__assert_fail@plt+0x5294>
   16df4:	movw	r1, #45872	; 0xb330
   16df8:	movt	r1, #3
   16dfc:	movw	r3, #45520	; 0xb1d0
   16e00:	movt	r3, #3
   16e04:	ldrd	r2, [r3, #216]	; 0xd8
   16e08:	strd	r2, [sp, #8]
   16e0c:	mov	r2, #1
   16e10:	mov	r3, #0
   16e14:	strd	r2, [sp]
   16e18:	ldr	r3, [r1, #4084]	; 0xff4
   16e1c:	add	r2, sp, #64	; 0x40
   16e20:	ldrd	r0, [r6, #64]	; 0x40
   16e24:	bl	1d588 <__assert_fail@plt+0xb814>
   16e28:	mov	r8, r0
   16e2c:	b	170c4 <__assert_fail@plt+0x5350>
   16e30:	ldr	r3, [r6, #100]	; 0x64
   16e34:	ldr	r2, [r6, #96]	; 0x60
   16e38:	str	r2, [sp, #1112]	; 0x458
   16e3c:	str	r3, [sp, #1116]	; 0x45c
   16e40:	mov	r7, #1
   16e44:	b	16c3c <__assert_fail@plt+0x4ec8>
   16e48:	ldr	r3, [r6, #92]	; 0x5c
   16e4c:	ldr	r2, [r6, #88]	; 0x58
   16e50:	str	r2, [sp, #1112]	; 0x458
   16e54:	str	r3, [sp, #1116]	; 0x45c
   16e58:	mov	r7, #1
   16e5c:	b	16c3c <__assert_fail@plt+0x4ec8>
   16e60:	ldr	r7, [r6, #96]	; 0x60
   16e64:	ldr	r3, [r6, #100]	; 0x64
   16e68:	str	r7, [sp, #1112]	; 0x458
   16e6c:	str	r3, [sp, #1116]	; 0x45c
   16e70:	and	r7, r7, r3
   16e74:	adds	r7, r7, #1
   16e78:	movne	r7, #1
   16e7c:	b	16c3c <__assert_fail@plt+0x4ec8>
   16e80:	bl	11d2c <abort@plt>
   16e84:	movw	r3, #45872	; 0xb330
   16e88:	movt	r3, #3
   16e8c:	ldr	r4, [r3, #3132]	; 0xc3c
   16e90:	ldrb	r3, [r6, #132]	; 0x84
   16e94:	cmp	r3, #0
   16e98:	movweq	r0, #28620	; 0x6fcc
   16e9c:	movteq	r0, #2
   16ea0:	beq	16eb8 <__assert_fail@plt+0x5144>
   16ea4:	ldrd	r0, [r6, #112]	; 0x70
   16ea8:	orrs	r3, r0, r1
   16eac:	movweq	r0, #28620	; 0x6fcc
   16eb0:	movteq	r0, #2
   16eb4:	bne	16ee4 <__assert_fail@plt+0x5170>
   16eb8:	str	r0, [sp, #4]
   16ebc:	str	r4, [sp]
   16ec0:	movw	r3, #28680	; 0x7008
   16ec4:	movt	r3, #2
   16ec8:	movw	r2, #3643	; 0xe3b
   16ecc:	mov	r1, #1
   16ed0:	add	r0, sp, #1120	; 0x460
   16ed4:	bl	11bc4 <__sprintf_chk@plt>
   16ed8:	add	r3, sp, #1120	; 0x460
   16edc:	add	r4, r3, r0
   16ee0:	b	16c54 <__assert_fail@plt+0x4ee0>
   16ee4:	add	r2, sp, #64	; 0x40
   16ee8:	bl	1e4f8 <__assert_fail@plt+0xc784>
   16eec:	b	16eb8 <__assert_fail@plt+0x5144>
   16ef0:	movw	r1, #45872	; 0xb330
   16ef4:	movt	r1, #3
   16ef8:	add	r3, r1, #3600	; 0xe10
   16efc:	ldrd	r2, [r3, #-8]
   16f00:	strd	r2, [sp, #8]
   16f04:	mov	r2, #512	; 0x200
   16f08:	mov	r3, #0
   16f0c:	strd	r2, [sp]
   16f10:	ldr	r3, [r1, #3588]	; 0xe04
   16f14:	add	r2, sp, #64	; 0x40
   16f18:	ldrd	r0, [r6, #80]	; 0x50
   16f1c:	bl	1d588 <__assert_fail@plt+0xb814>
   16f20:	mov	r8, r0
   16f24:	b	16c7c <__assert_fail@plt+0x4f08>
   16f28:	mov	r0, r4
   16f2c:	b	16cb4 <__assert_fail@plt+0x4f40>
   16f30:	mov	r0, r4
   16f34:	b	16cb8 <__assert_fail@plt+0x4f44>
   16f38:	add	r2, sp, #64	; 0x40
   16f3c:	ldr	r0, [r6, #36]	; 0x24
   16f40:	mov	r1, #0
   16f44:	bl	1e4f8 <__assert_fail@plt+0xc784>
   16f48:	b	16cf4 <__assert_fail@plt+0x4f80>
   16f4c:	movw	r3, #45872	; 0xb330
   16f50:	movt	r3, #3
   16f54:	ldrb	r2, [r6, #132]	; 0x84
   16f58:	ldr	r1, [r3, #3144]	; 0xc48
   16f5c:	ldr	r0, [r6, #40]	; 0x28
   16f60:	bl	14b90 <__assert_fail@plt+0x2e1c>
   16f64:	b	16d98 <__assert_fail@plt+0x5024>
   16f68:	ldr	r4, [r6, #44]	; 0x2c
   16f6c:	movw	r3, #45872	; 0xb330
   16f70:	movt	r3, #3
   16f74:	ldr	r5, [r3, #3148]	; 0xc4c
   16f78:	ldrb	r3, [r6, #132]	; 0x84
   16f7c:	cmp	r3, #0
   16f80:	movweq	r0, #28620	; 0x6fcc
   16f84:	movteq	r0, #2
   16f88:	beq	16fa4 <__assert_fail@plt+0x5230>
   16f8c:	movw	r3, #45872	; 0xb330
   16f90:	movt	r3, #3
   16f94:	ldrb	r3, [r3, #3180]	; 0xc6c
   16f98:	cmp	r3, #0
   16f9c:	movne	r0, #0
   16fa0:	beq	16fb8 <__assert_fail@plt+0x5244>
   16fa4:	str	r5, [sp]
   16fa8:	mov	r2, r4
   16fac:	mov	r3, #0
   16fb0:	bl	14af8 <__assert_fail@plt+0x2d84>
   16fb4:	b	16dac <__assert_fail@plt+0x5038>
   16fb8:	mov	r0, r4
   16fbc:	bl	1e218 <__assert_fail@plt+0xc4a4>
   16fc0:	b	16fa4 <__assert_fail@plt+0x5230>
   16fc4:	movw	r3, #45872	; 0xb330
   16fc8:	movt	r3, #3
   16fcc:	ldrb	r2, [r6, #132]	; 0x84
   16fd0:	ldr	r1, [r3, #3152]	; 0xc50
   16fd4:	ldr	r0, [r6, #40]	; 0x28
   16fd8:	bl	14b90 <__assert_fail@plt+0x2e1c>
   16fdc:	b	16dc0 <__assert_fail@plt+0x504c>
   16fe0:	movw	r3, #45872	; 0xb330
   16fe4:	movt	r3, #3
   16fe8:	ldr	r3, [r3, #3156]	; 0xc54
   16fec:	str	r3, [sp]
   16ff0:	mov	r2, #0
   16ff4:	mov	r3, #0
   16ff8:	ldr	r0, [r6, #128]	; 0x80
   16ffc:	bl	14af8 <__assert_fail@plt+0x2d84>
   17000:	add	r4, sp, #1120	; 0x460
   17004:	b	16dd8 <__assert_fail@plt+0x5064>
   17008:	movw	sl, #45872	; 0xb330
   1700c:	movt	sl, #3
   17010:	ldr	r2, [sl, #3160]	; 0xc58
   17014:	add	r3, r2, #2
   17018:	ldr	r5, [sl, #3164]	; 0xc5c
   1701c:	add	r5, r3, r5
   17020:	ldr	r3, [sl, #3168]	; 0xc60
   17024:	sub	r3, r3, r5
   17028:	cmp	r3, #0
   1702c:	addge	r5, r2, r3
   17030:	addlt	r5, r2, #0
   17034:	ldr	r0, [r6, #48]	; 0x30
   17038:	ldr	r3, [r6, #52]	; 0x34
   1703c:	ubfx	r0, r0, #8, #12
   17040:	bic	r3, r3, #4080	; 0xff0
   17044:	bic	r3, r3, #15
   17048:	mov	r8, #0
   1704c:	add	r2, sp, #20
   17050:	orr	r0, r3, r0
   17054:	mov	r1, r8
   17058:	bl	1e4f8 <__assert_fail@plt+0xc784>
   1705c:	mov	r9, r0
   17060:	ldr	sl, [sl, #3164]	; 0xc5c
   17064:	ldr	r3, [r6, #48]	; 0x30
   17068:	ldr	r2, [r6, #52]	; 0x34
   1706c:	uxtb	r0, r3
   17070:	lsr	r3, r3, #12
   17074:	orr	r3, r3, r2, lsl #20
   17078:	bic	r3, r3, #255	; 0xff
   1707c:	add	r2, sp, #64	; 0x40
   17080:	orr	r0, r3, r0
   17084:	mov	r1, r8
   17088:	bl	1e4f8 <__assert_fail@plt+0xc784>
   1708c:	str	r0, [sp, #12]
   17090:	str	sl, [sp, #8]
   17094:	str	r9, [sp, #4]
   17098:	str	r5, [sp]
   1709c:	movw	r3, #28836	; 0x70a4
   170a0:	movt	r3, #2
   170a4:	mvn	r2, #0
   170a8:	mov	r1, #1
   170ac:	mov	r0, r4
   170b0:	bl	11bc4 <__sprintf_chk@plt>
   170b4:	add	r5, r4, r0
   170b8:	b	17118 <__assert_fail@plt+0x53a4>
   170bc:	movw	r8, #28620	; 0x6fcc
   170c0:	movt	r8, #2
   170c4:	movw	r3, #45872	; 0xb330
   170c8:	movt	r3, #3
   170cc:	ldr	r5, [r3, #3168]	; 0xc60
   170d0:	mov	r1, #0
   170d4:	mov	r0, r8
   170d8:	bl	1ec44 <__assert_fail@plt+0xced0>
   170dc:	sub	r5, r5, r0
   170e0:	cmp	r5, #0
   170e4:	ble	1717c <__assert_fail@plt+0x5408>
   170e8:	add	r5, r4, r5
   170ec:	mov	r3, #32
   170f0:	strb	r3, [r4], #1
   170f4:	cmp	r4, r5
   170f8:	bne	170f0 <__assert_fail@plt+0x537c>
   170fc:	sub	r8, r8, #1
   17100:	ldrb	r3, [r8, #1]!
   17104:	strb	r3, [r5], #1
   17108:	cmp	r3, #0
   1710c:	bne	17100 <__assert_fail@plt+0x538c>
   17110:	mov	r3, #32
   17114:	strb	r3, [r5, #-1]
   17118:	mov	r3, #1
   1711c:	strb	r3, [r5]
   17120:	ldrb	r3, [r6, #132]	; 0x84
   17124:	tst	r7, r3
   17128:	bne	17184 <__assert_fail@plt+0x5410>
   1712c:	movw	r3, #45520	; 0xb1d0
   17130:	movt	r3, #3
   17134:	ldr	r3, [r3, #224]	; 0xe0
   17138:	cmp	r3, #0
   1713c:	blt	1739c <__assert_fail@plt+0x5628>
   17140:	movw	r3, #45520	; 0xb1d0
   17144:	movt	r3, #3
   17148:	ldr	r4, [r3, #224]	; 0xe0
   1714c:	movw	r0, #28620	; 0x6fcc
   17150:	movt	r0, #2
   17154:	str	r0, [sp, #4]
   17158:	str	r4, [sp]
   1715c:	movw	r3, #28680	; 0x7008
   17160:	movt	r3, #2
   17164:	mvn	r2, #0
   17168:	mov	r1, #1
   1716c:	mov	r0, r5
   17170:	bl	11bc4 <__sprintf_chk@plt>
   17174:	add	r4, r5, r0
   17178:	b	172d8 <__assert_fail@plt+0x5564>
   1717c:	mov	r5, r4
   17180:	b	170fc <__assert_fail@plt+0x5388>
   17184:	movw	r3, #45872	; 0xb330
   17188:	movt	r3, #3
   1718c:	add	r2, sp, #1056	; 0x420
   17190:	add	r2, r2, #12
   17194:	add	r1, sp, #1104	; 0x450
   17198:	add	r1, r1, #8
   1719c:	ldr	r0, [r3, #4088]	; 0xff8
   171a0:	bl	23748 <_obstack_memory_used@@Base+0x2a38>
   171a4:	cmp	r0, #0
   171a8:	beq	172b8 <__assert_fail@plt+0x5544>
   171ac:	movw	r3, #45872	; 0xb330
   171b0:	movt	r3, #3
   171b4:	ldr	r2, [r3, #4092]	; 0xffc
   171b8:	add	r3, r3, #4096	; 0x1000
   171bc:	ldr	r1, [r3]
   171c0:	ldr	r3, [sp, #1112]	; 0x458
   171c4:	cmp	r2, r3
   171c8:	movgt	r2, #1
   171cc:	movle	r2, #0
   171d0:	movlt	r3, #1
   171d4:	movge	r3, #0
   171d8:	sub	r2, r2, r3
   171dc:	ldr	r3, [sp, #1116]	; 0x45c
   171e0:	cmp	r1, r3
   171e4:	movgt	r3, #1
   171e8:	movle	r3, #0
   171ec:	movlt	r1, #1
   171f0:	movge	r1, #0
   171f4:	sub	r3, r3, r1
   171f8:	adds	r3, r3, r2, lsl #1
   171fc:	bmi	17340 <__assert_fail@plt+0x55cc>
   17200:	movw	r3, #45872	; 0xb330
   17204:	movt	r3, #3
   17208:	ldr	lr, [r3, #4092]	; 0xffc
   1720c:	movw	r2, #15700	; 0x3d54
   17210:	movt	r2, #65295	; 0xff0f
   17214:	add	r2, lr, r2
   17218:	add	r3, r3, #4096	; 0x1000
   1721c:	ldr	r3, [r3]
   17220:	ldr	ip, [sp, #1112]	; 0x458
   17224:	ldr	r1, [sp, #1116]	; 0x45c
   17228:	cmp	r3, r1
   1722c:	movgt	r0, #1
   17230:	movle	r0, #0
   17234:	movlt	r3, #1
   17238:	movge	r3, #0
   1723c:	cmp	r2, ip
   17240:	movgt	r2, #1
   17244:	movle	r2, #0
   17248:	movlt	r4, #1
   1724c:	movge	r4, #0
   17250:	sub	r2, r2, r4
   17254:	sub	r4, r0, r3
   17258:	adds	r2, r4, r2, lsl #1
   1725c:	movpl	r3, #0
   17260:	bmi	1734c <__assert_fail@plt+0x55d8>
   17264:	movw	r2, #45872	; 0xb330
   17268:	movt	r2, #3
   1726c:	ldr	r0, [r2, #4088]	; 0xff8
   17270:	ldrb	r2, [r2, #3100]	; 0xc1c
   17274:	cmp	r2, #0
   17278:	beq	17374 <__assert_fail@plt+0x5600>
   1727c:	lsl	r2, r3, #1
   17280:	add	r2, r2, r3
   17284:	ldr	r3, [sp, #1084]	; 0x43c
   17288:	add	r3, r3, r2, lsl #2
   1728c:	ldr	r2, [pc, #620]	; 17500 <__assert_fail@plt+0x578c>
   17290:	add	r2, r2, r3, lsl #7
   17294:	str	r1, [sp, #4]
   17298:	str	r0, [sp]
   1729c:	add	r3, sp, #1056	; 0x420
   172a0:	add	r3, r3, #12
   172a4:	movw	r1, #1001	; 0x3e9
   172a8:	mov	r0, r5
   172ac:	bl	2091c <__assert_fail@plt+0xeba8>
   172b0:	cmp	r0, #0
   172b4:	bne	172c8 <__assert_fail@plt+0x5554>
   172b8:	ldrb	r3, [r5]
   172bc:	cmp	r3, #0
   172c0:	bne	17388 <__assert_fail@plt+0x5614>
   172c4:	mov	r0, #0
   172c8:	add	r4, r5, r0
   172cc:	add	r4, r4, #1
   172d0:	mov	r3, #32
   172d4:	strb	r3, [r5, r0]
   172d8:	add	r0, sp, #1120	; 0x460
   172dc:	sub	r4, r4, r0
   172e0:	mov	r1, r4
   172e4:	bl	145d4 <__assert_fail@plt+0x2860>
   172e8:	mov	r3, r4
   172ec:	ldr	r2, [pc, #528]	; 17504 <__assert_fail@plt+0x5790>
   172f0:	mov	r1, #0
   172f4:	mov	r0, r6
   172f8:	bl	14ee8 <__assert_fail@plt+0x3174>
   172fc:	mov	r5, r0
   17300:	ldr	r2, [r6, #120]	; 0x78
   17304:	cmp	r2, #6
   17308:	beq	17498 <__assert_fail@plt+0x5724>
   1730c:	movw	r3, #45872	; 0xb330
   17310:	movt	r3, #3
   17314:	ldr	r3, [r3, #20]
   17318:	cmp	r3, #0
   1731c:	bne	174f0 <__assert_fail@plt+0x577c>
   17320:	add	sp, sp, #4736	; 0x1280
   17324:	add	sp, sp, #40	; 0x28
   17328:	ldrd	r4, [sp]
   1732c:	ldrd	r6, [sp, #8]
   17330:	ldrd	r8, [sp, #16]
   17334:	ldr	sl, [sp, #24]
   17338:	add	sp, sp, #28
   1733c:	pop	{pc}		; (ldr pc, [sp], #4)
   17340:	ldr	r0, [pc, #448]	; 17508 <__assert_fail@plt+0x5794>
   17344:	bl	1c260 <__assert_fail@plt+0xa4ec>
   17348:	b	17200 <__assert_fail@plt+0x548c>
   1734c:	cmp	lr, ip
   17350:	movlt	r2, #1
   17354:	movge	r2, #0
   17358:	movgt	ip, #1
   1735c:	movle	ip, #0
   17360:	sub	r2, r2, ip
   17364:	sub	r3, r3, r0
   17368:	add	r3, r3, r2, lsl #1
   1736c:	lsr	r3, r3, #31
   17370:	b	17264 <__assert_fail@plt+0x54f0>
   17374:	movw	r2, #45520	; 0xb1d0
   17378:	movt	r2, #3
   1737c:	add	r3, r2, r3, lsl #2
   17380:	ldr	r2, [r3, #196]	; 0xc4
   17384:	b	17294 <__assert_fail@plt+0x5520>
   17388:	movw	r3, #45520	; 0xb1d0
   1738c:	movt	r3, #3
   17390:	ldr	r3, [r3, #224]	; 0xe0
   17394:	cmp	r3, #0
   17398:	bge	17420 <__assert_fail@plt+0x56ac>
   1739c:	mov	r3, #0
   173a0:	str	r3, [sp, #16]
   173a4:	movw	r3, #45872	; 0xb330
   173a8:	movt	r3, #3
   173ac:	add	r2, sp, #20
   173b0:	add	r1, sp, #16
   173b4:	ldr	r0, [r3, #4088]	; 0xff8
   173b8:	bl	23748 <_obstack_memory_used@@Base+0x2a38>
   173bc:	cmp	r0, #0
   173c0:	beq	1740c <__assert_fail@plt+0x5698>
   173c4:	movw	r3, #45872	; 0xb330
   173c8:	movt	r3, #3
   173cc:	ldr	r1, [r3, #4088]	; 0xff8
   173d0:	ldrb	r3, [r3, #3100]	; 0xc1c
   173d4:	cmp	r3, #0
   173d8:	beq	1744c <__assert_fail@plt+0x56d8>
   173dc:	ldr	r3, [sp, #36]	; 0x24
   173e0:	ldr	r2, [pc, #280]	; 17500 <__assert_fail@plt+0x578c>
   173e4:	add	r2, r2, r3, lsl #7
   173e8:	mov	r3, #0
   173ec:	str	r3, [sp, #4]
   173f0:	str	r1, [sp]
   173f4:	add	r3, sp, #20
   173f8:	movw	r1, #1001	; 0x3e9
   173fc:	add	r0, sp, #64	; 0x40
   17400:	bl	2091c <__assert_fail@plt+0xeba8>
   17404:	subs	r1, r0, #0
   17408:	bne	1745c <__assert_fail@plt+0x56e8>
   1740c:	movw	r3, #45520	; 0xb1d0
   17410:	movt	r3, #3
   17414:	ldr	r3, [r3, #224]	; 0xe0
   17418:	cmp	r3, #0
   1741c:	blt	17478 <__assert_fail@plt+0x5704>
   17420:	movw	r3, #45520	; 0xb1d0
   17424:	movt	r3, #3
   17428:	ldr	r4, [r3, #224]	; 0xe0
   1742c:	ldrb	r3, [r6, #132]	; 0x84
   17430:	tst	r7, r3
   17434:	beq	1748c <__assert_fail@plt+0x5718>
   17438:	add	r2, sp, #64	; 0x40
   1743c:	ldr	r0, [sp, #1112]	; 0x458
   17440:	asr	r1, r0, #31
   17444:	bl	1e400 <__assert_fail@plt+0xc68c>
   17448:	b	17154 <__assert_fail@plt+0x53e0>
   1744c:	movw	r3, #45520	; 0xb1d0
   17450:	movt	r3, #3
   17454:	ldr	r2, [r3, #196]	; 0xc4
   17458:	b	173e8 <__assert_fail@plt+0x5674>
   1745c:	mov	r2, #0
   17460:	add	r0, sp, #64	; 0x40
   17464:	bl	1ea34 <__assert_fail@plt+0xccc0>
   17468:	movw	r3, #45520	; 0xb1d0
   1746c:	movt	r3, #3
   17470:	str	r0, [r3, #224]	; 0xe0
   17474:	b	1740c <__assert_fail@plt+0x5698>
   17478:	movw	r3, #45520	; 0xb1d0
   1747c:	movt	r3, #3
   17480:	mov	r2, #0
   17484:	str	r2, [r3, #224]	; 0xe0
   17488:	b	17420 <__assert_fail@plt+0x56ac>
   1748c:	movw	r0, #28620	; 0x6fcc
   17490:	movt	r0, #2
   17494:	b	17154 <__assert_fail@plt+0x53e0>
   17498:	ldr	r3, [r6, #4]
   1749c:	cmp	r3, #0
   174a0:	beq	17320 <__assert_fail@plt+0x55ac>
   174a4:	movw	r0, #28848	; 0x70b0
   174a8:	movt	r0, #2
   174ac:	bl	14628 <__assert_fail@plt+0x28b4>
   174b0:	add	r3, r5, #4
   174b4:	add	r3, r3, r4
   174b8:	mov	r2, #0
   174bc:	mov	r1, #1
   174c0:	mov	r0, r6
   174c4:	bl	14ee8 <__assert_fail@plt+0x3174>
   174c8:	movw	r3, #45872	; 0xb330
   174cc:	movt	r3, #3
   174d0:	ldr	r3, [r3, #20]
   174d4:	cmp	r3, #0
   174d8:	beq	17320 <__assert_fail@plt+0x55ac>
   174dc:	mov	r2, #0
   174e0:	ldr	r1, [r6, #124]	; 0x7c
   174e4:	mov	r0, #1
   174e8:	bl	144bc <__assert_fail@plt+0x2748>
   174ec:	b	17320 <__assert_fail@plt+0x55ac>
   174f0:	ldr	r1, [r6, #32]
   174f4:	ldrb	r0, [r6, #132]	; 0x84
   174f8:	bl	144bc <__assert_fail@plt+0x2748>
   174fc:	b	17320 <__assert_fail@plt+0x55ac>
   17500:	andeq	fp, r3, ip, asr #6
   17504:	andeq	ip, r3, r4, lsr r3
   17508:	andeq	ip, r3, ip, lsr #6
   1750c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17510:	strd	r6, [sp, #8]
   17514:	strd	r8, [sp, #16]
   17518:	strd	sl, [sp, #24]
   1751c:	str	lr, [sp, #32]
   17520:	sub	sp, sp, #20
   17524:	movw	r3, #45872	; 0xb330
   17528:	movt	r3, #3
   1752c:	ldr	r4, [r3, #3116]	; 0xc2c
   17530:	cmp	r4, #4
   17534:	ldrls	pc, [pc, r4, lsl #2]
   17538:	b	178d8 <__assert_fail@plt+0x5b64>
   1753c:	andeq	r7, r1, r8, asr #11
   17540:	andeq	r7, r1, r0, asr r5
   17544:	andeq	r7, r1, r0, lsr #12
   17548:	andeq	r7, r1, r0, ror #14
   1754c:	ldrdeq	r7, [r1], -r0
   17550:	movw	r3, #45872	; 0xb330
   17554:	movt	r3, #3
   17558:	ldr	r3, [r3, #8]
   1755c:	cmp	r3, #0
   17560:	beq	178d8 <__assert_fail@plt+0x5b64>
   17564:	mov	r4, #0
   17568:	movw	r5, #45872	; 0xb330
   1756c:	movt	r5, #3
   17570:	movw	r7, #45520	; 0xb1d0
   17574:	movt	r7, #3
   17578:	movw	r6, #45860	; 0xb324
   1757c:	movt	r6, #3
   17580:	ldr	r3, [r5, #16]
   17584:	mov	r1, #0
   17588:	ldr	r0, [r3, r4, lsl #2]
   1758c:	bl	15304 <__assert_fail@plt+0x3590>
   17590:	ldrb	r1, [r7, #210]	; 0xd2
   17594:	ldr	r0, [r6]
   17598:	ldr	r3, [r0, #20]
   1759c:	ldr	r2, [r0, #24]
   175a0:	cmp	r3, r2
   175a4:	addcc	r2, r3, #1
   175a8:	strcc	r2, [r0, #20]
   175ac:	strbcc	r1, [r3]
   175b0:	bcs	17618 <__assert_fail@plt+0x58a4>
   175b4:	add	r4, r4, #1
   175b8:	ldr	r3, [r5, #8]
   175bc:	cmp	r3, r4
   175c0:	bhi	17580 <__assert_fail@plt+0x580c>
   175c4:	b	178d8 <__assert_fail@plt+0x5b64>
   175c8:	movw	r3, #45872	; 0xb330
   175cc:	movt	r3, #3
   175d0:	ldr	r3, [r3, #8]
   175d4:	cmp	r3, #0
   175d8:	beq	178d8 <__assert_fail@plt+0x5b64>
   175dc:	movw	r5, #45872	; 0xb330
   175e0:	movt	r5, #3
   175e4:	movw	r6, #45520	; 0xb1d0
   175e8:	movt	r6, #3
   175ec:	bl	148b0 <__assert_fail@plt+0x2b3c>
   175f0:	ldr	r3, [r5, #16]
   175f4:	ldr	r0, [r3, r4, lsl #2]
   175f8:	bl	16b18 <__assert_fail@plt+0x4da4>
   175fc:	ldrb	r0, [r6, #210]	; 0xd2
   17600:	bl	14450 <__assert_fail@plt+0x26dc>
   17604:	add	r4, r4, #1
   17608:	ldr	r3, [r5, #8]
   1760c:	cmp	r3, r4
   17610:	bhi	175ec <__assert_fail@plt+0x5878>
   17614:	b	178d8 <__assert_fail@plt+0x5b64>
   17618:	bl	11c48 <__overflow@plt>
   1761c:	b	175b4 <__assert_fail@plt+0x5840>
   17620:	movw	r3, #45872	; 0xb330
   17624:	movt	r3, #3
   17628:	ldr	r3, [r3, #3188]	; 0xc74
   1762c:	cmp	r3, #0
   17630:	bne	17640 <__assert_fail@plt+0x58cc>
   17634:	mov	r0, #32
   17638:	bl	154d8 <__assert_fail@plt+0x3764>
   1763c:	b	178d8 <__assert_fail@plt+0x5b64>
   17640:	mov	r0, #1
   17644:	bl	13d98 <__assert_fail@plt+0x2024>
   17648:	movw	r2, #45872	; 0xb330
   1764c:	movt	r2, #3
   17650:	add	fp, r0, r0, lsl #1
   17654:	lsl	fp, fp, #2
   17658:	sub	r3, fp, #12
   1765c:	ldr	fp, [r2, #3608]	; 0xe18
   17660:	add	fp, fp, r3
   17664:	ldr	r2, [r2, #8]
   17668:	udiv	r3, r2, r0
   1766c:	mls	r0, r0, r3, r2
   17670:	cmp	r0, #0
   17674:	moveq	r8, r3
   17678:	addne	r8, r3, #1
   1767c:	cmp	r8, #0
   17680:	beq	178d8 <__assert_fail@plt+0x5b64>
   17684:	mov	r6, #0
   17688:	movw	r9, #45872	; 0xb330
   1768c:	movt	r9, #3
   17690:	movw	r3, #45520	; 0xb1d0
   17694:	movt	r3, #3
   17698:	str	r3, [sp, #8]
   1769c:	movw	r3, #45860	; 0xb324
   176a0:	movt	r3, #3
   176a4:	str	r3, [sp, #12]
   176a8:	mov	r3, r6
   176ac:	mov	r6, r8
   176b0:	mov	r8, r3
   176b4:	b	176f4 <__assert_fail@plt+0x5980>
   176b8:	ldr	r8, [sp, #4]
   176bc:	ldr	r3, [sp, #8]
   176c0:	ldrb	r1, [r3, #210]	; 0xd2
   176c4:	ldr	r3, [sp, #12]
   176c8:	ldr	r0, [r3]
   176cc:	ldr	r3, [r0, #20]
   176d0:	ldr	r2, [r0, #24]
   176d4:	cmp	r3, r2
   176d8:	addcc	r2, r3, #1
   176dc:	strcc	r2, [r0, #20]
   176e0:	strbcc	r1, [r3]
   176e4:	bcs	17758 <__assert_fail@plt+0x59e4>
   176e8:	add	r8, r8, #1
   176ec:	cmp	r6, r8
   176f0:	beq	178d8 <__assert_fail@plt+0x5b64>
   176f4:	mov	r5, r8
   176f8:	mov	r7, #0
   176fc:	mov	r4, r7
   17700:	str	r8, [sp, #4]
   17704:	ldr	r3, [r9, #16]
   17708:	ldr	r8, [r3, r5, lsl #2]
   1770c:	mov	r0, r8
   17710:	bl	13be8 <__assert_fail@plt+0x1e74>
   17714:	str	r0, [sp]
   17718:	ldr	r3, [fp, #8]
   1771c:	ldr	sl, [r3, r7]
   17720:	mov	r1, r4
   17724:	mov	r0, r8
   17728:	bl	15304 <__assert_fail@plt+0x3590>
   1772c:	add	r5, r5, r6
   17730:	add	r7, r7, #4
   17734:	ldr	r3, [r9, #8]
   17738:	cmp	r5, r3
   1773c:	bcs	176b8 <__assert_fail@plt+0x5944>
   17740:	ldr	r3, [sp]
   17744:	add	r0, r3, r4
   17748:	add	r4, r4, sl
   1774c:	mov	r1, r4
   17750:	bl	144f0 <__assert_fail@plt+0x277c>
   17754:	b	17704 <__assert_fail@plt+0x5990>
   17758:	bl	11c48 <__overflow@plt>
   1775c:	b	176e8 <__assert_fail@plt+0x5974>
   17760:	movw	r3, #45872	; 0xb330
   17764:	movt	r3, #3
   17768:	ldr	r3, [r3, #3188]	; 0xc74
   1776c:	cmp	r3, #0
   17770:	bne	17780 <__assert_fail@plt+0x5a0c>
   17774:	mov	r0, #32
   17778:	bl	154d8 <__assert_fail@plt+0x3764>
   1777c:	b	178d8 <__assert_fail@plt+0x5b64>
   17780:	mov	r0, #0
   17784:	bl	13d98 <__assert_fail@plt+0x2024>
   17788:	mov	r8, r0
   1778c:	movw	r4, #45872	; 0xb330
   17790:	movt	r4, #3
   17794:	add	sl, r0, r0, lsl #1
   17798:	lsl	sl, sl, #2
   1779c:	sub	r3, sl, #12
   177a0:	ldr	sl, [r4, #3608]	; 0xe18
   177a4:	add	sl, sl, r3
   177a8:	ldr	r3, [r4, #16]
   177ac:	ldr	r5, [r3]
   177b0:	mov	r0, r5
   177b4:	bl	13be8 <__assert_fail@plt+0x1e74>
   177b8:	str	r0, [sp, #4]
   177bc:	ldr	r3, [sl, #8]
   177c0:	ldr	r7, [r3]
   177c4:	mov	r1, #0
   177c8:	mov	r0, r5
   177cc:	bl	15304 <__assert_fail@plt+0x3590>
   177d0:	ldr	r3, [r4, #8]
   177d4:	cmp	r3, #1
   177d8:	bls	17894 <__assert_fail@plt+0x5b20>
   177dc:	mov	r6, #0
   177e0:	mov	r4, #1
   177e4:	movw	fp, #45520	; 0xb1d0
   177e8:	movt	fp, #3
   177ec:	movw	r3, #45860	; 0xb324
   177f0:	movt	r3, #3
   177f4:	str	r3, [sp]
   177f8:	movw	r9, #45872	; 0xb330
   177fc:	movt	r9, #3
   17800:	ldr	r0, [sp, #4]
   17804:	b	1784c <__assert_fail@plt+0x5ad8>
   17808:	add	r0, r6, r0
   1780c:	add	r6, r6, r7
   17810:	mov	r1, r6
   17814:	bl	144f0 <__assert_fail@plt+0x277c>
   17818:	ldr	r3, [r9, #16]
   1781c:	ldr	r7, [r3, r4, lsl #2]
   17820:	mov	r1, r6
   17824:	mov	r0, r7
   17828:	bl	15304 <__assert_fail@plt+0x3590>
   1782c:	mov	r0, r7
   17830:	bl	13be8 <__assert_fail@plt+0x1e74>
   17834:	ldr	r3, [sl, #8]
   17838:	ldr	r7, [r3, r5, lsl #2]
   1783c:	add	r4, r4, #1
   17840:	ldr	r3, [r9, #8]
   17844:	cmp	r4, r3
   17848:	bcs	17894 <__assert_fail@plt+0x5b20>
   1784c:	udiv	r5, r4, r8
   17850:	mls	r5, r8, r5, r4
   17854:	cmp	r5, #0
   17858:	bne	17808 <__assert_fail@plt+0x5a94>
   1785c:	ldrb	r1, [fp, #210]	; 0xd2
   17860:	ldr	r3, [sp]
   17864:	ldr	r0, [r3]
   17868:	ldr	r3, [r0, #20]
   1786c:	ldr	r2, [r0, #24]
   17870:	cmp	r3, r2
   17874:	addcc	r2, r3, #1
   17878:	strcc	r2, [r0, #20]
   1787c:	strbcc	r1, [r3]
   17880:	movcc	r6, r5
   17884:	bcc	17818 <__assert_fail@plt+0x5aa4>
   17888:	bl	11c48 <__overflow@plt>
   1788c:	mov	r6, r5
   17890:	b	17818 <__assert_fail@plt+0x5aa4>
   17894:	movw	r3, #45520	; 0xb1d0
   17898:	movt	r3, #3
   1789c:	ldrb	r1, [r3, #210]	; 0xd2
   178a0:	movw	r3, #45860	; 0xb324
   178a4:	movt	r3, #3
   178a8:	ldr	r0, [r3]
   178ac:	ldr	r3, [r0, #20]
   178b0:	ldr	r2, [r0, #24]
   178b4:	cmp	r3, r2
   178b8:	addcc	r2, r3, #1
   178bc:	strcc	r2, [r0, #20]
   178c0:	strbcc	r1, [r3]
   178c4:	bcc	178d8 <__assert_fail@plt+0x5b64>
   178c8:	bl	11c48 <__overflow@plt>
   178cc:	b	178d8 <__assert_fail@plt+0x5b64>
   178d0:	mov	r0, #44	; 0x2c
   178d4:	bl	154d8 <__assert_fail@plt+0x3764>
   178d8:	add	sp, sp, #20
   178dc:	ldrd	r4, [sp]
   178e0:	ldrd	r6, [sp, #8]
   178e4:	ldrd	r8, [sp, #16]
   178e8:	ldrd	sl, [sp, #24]
   178ec:	add	sp, sp, #32
   178f0:	pop	{pc}		; (ldr pc, [sp], #4)
   178f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178f8:	strd	r6, [sp, #8]
   178fc:	strd	r8, [sp, #16]
   17900:	strd	sl, [sp, #24]
   17904:	str	lr, [sp, #32]
   17908:	sub	sp, sp, #692	; 0x2b4
   1790c:	mov	r6, r0
   17910:	str	r0, [sp, #20]
   17914:	mov	r5, r1
   17918:	str	r2, [sp, #24]
   1791c:	bl	11bb8 <__errno_location@plt>
   17920:	mov	r4, r0
   17924:	mov	r3, #0
   17928:	str	r3, [r0]
   1792c:	mov	r0, r6
   17930:	bl	11aa4 <opendir@plt>
   17934:	subs	r3, r0, #0
   17938:	str	r3, [sp, #16]
   1793c:	beq	17a2c <__assert_fail@plt+0x5cb8>
   17940:	movw	r3, #45872	; 0xb330
   17944:	movt	r3, #3
   17948:	ldr	r3, [r3, #3616]	; 0xe20
   1794c:	cmp	r3, #0
   17950:	beq	17e10 <__assert_fail@plt+0x609c>
   17954:	ldr	r0, [sp, #16]
   17958:	bl	11cd8 <dirfd@plt>
   1795c:	cmp	r0, #0
   17960:	blt	17a50 <__assert_fail@plt+0x5cdc>
   17964:	mov	r3, #256	; 0x100
   17968:	str	r3, [sp]
   1796c:	mov	r3, #4096	; 0x1000
   17970:	add	r2, sp, #32
   17974:	movw	r1, #39300	; 0x9984
   17978:	movt	r1, #2
   1797c:	bl	13100 <__assert_fail@plt+0x138c>
   17980:	lsr	r0, r0, #31
   17984:	cmp	r0, #0
   17988:	bne	17a74 <__assert_fail@plt+0x5d00>
   1798c:	ldrd	r6, [sp, #32]
   17990:	ldrd	r8, [sp, #128]	; 0x80
   17994:	mov	r0, #16
   17998:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1799c:	mov	sl, r0
   179a0:	strd	r8, [r0]
   179a4:	strd	r6, [r0, #8]
   179a8:	movw	r3, #45872	; 0xb330
   179ac:	movt	r3, #3
   179b0:	mov	r1, r0
   179b4:	ldr	r0, [r3, #3616]	; 0xe20
   179b8:	bl	1d2a0 <__assert_fail@plt+0xb52c>
   179bc:	cmp	r0, #0
   179c0:	beq	17aa4 <__assert_fail@plt+0x5d30>
   179c4:	cmp	sl, r0
   179c8:	beq	17dd0 <__assert_fail@plt+0x605c>
   179cc:	mov	r0, sl
   179d0:	bl	1c200 <__assert_fail@plt+0xa48c>
   179d4:	mov	r2, #5
   179d8:	movw	r1, #28924	; 0x70fc
   179dc:	movt	r1, #2
   179e0:	mov	r0, #0
   179e4:	bl	11984 <dcgettext@plt>
   179e8:	mov	r4, r0
   179ec:	ldr	r2, [sp, #20]
   179f0:	mov	r1, #3
   179f4:	mov	r0, #0
   179f8:	bl	22e74 <_obstack_memory_used@@Base+0x2164>
   179fc:	mov	r3, r0
   17a00:	mov	r2, r4
   17a04:	mov	r1, #0
   17a08:	mov	r0, r1
   17a0c:	bl	11a8c <error@plt>
   17a10:	ldr	r0, [sp, #16]
   17a14:	bl	11d38 <closedir@plt>
   17a18:	movw	r3, #45872	; 0xb330
   17a1c:	movt	r3, #3
   17a20:	mov	r2, #2
   17a24:	str	r2, [r3, #3172]	; 0xc64
   17a28:	b	17d74 <__assert_fail@plt+0x6000>
   17a2c:	mov	r2, #5
   17a30:	movw	r1, #28856	; 0x70b8
   17a34:	movt	r1, #2
   17a38:	bl	11984 <dcgettext@plt>
   17a3c:	ldr	r2, [sp, #20]
   17a40:	mov	r1, r0
   17a44:	ldr	r0, [sp, #24]
   17a48:	bl	13260 <__assert_fail@plt+0x14ec>
   17a4c:	b	17d74 <__assert_fail@plt+0x6000>
   17a50:	mov	r3, #256	; 0x100
   17a54:	str	r3, [sp]
   17a58:	mov	r3, #0
   17a5c:	add	r2, sp, #32
   17a60:	ldr	r1, [sp, #20]
   17a64:	mvn	r0, #99	; 0x63
   17a68:	bl	13100 <__assert_fail@plt+0x138c>
   17a6c:	lsr	r0, r0, #31
   17a70:	b	17984 <__assert_fail@plt+0x5c10>
   17a74:	mov	r2, #5
   17a78:	movw	r1, #28884	; 0x70d4
   17a7c:	movt	r1, #2
   17a80:	mov	r0, #0
   17a84:	bl	11984 <dcgettext@plt>
   17a88:	ldr	r2, [sp, #20]
   17a8c:	mov	r1, r0
   17a90:	ldr	r0, [sp, #24]
   17a94:	bl	13260 <__assert_fail@plt+0x14ec>
   17a98:	ldr	r0, [sp, #16]
   17a9c:	bl	11d38 <closedir@plt>
   17aa0:	b	17d74 <__assert_fail@plt+0x6000>
   17aa4:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   17aa8:	mov	r1, #16
   17aac:	ldr	r0, [pc, #1196]	; 17f60 <__assert_fail@plt+0x61ec>
   17ab0:	bl	20b34 <_obstack_newchunk@@Base>
   17ab4:	b	17df4 <__assert_fail@plt+0x6080>
   17ab8:	mov	r0, #10
   17abc:	bl	14450 <__assert_fail@plt+0x26dc>
   17ac0:	b	17e50 <__assert_fail@plt+0x60dc>
   17ac4:	mov	r1, #2
   17ac8:	ldr	r0, [sp, #20]
   17acc:	bl	1b014 <__assert_fail@plt+0x92a0>
   17ad0:	subs	r6, r0, #0
   17ad4:	bne	17e7c <__assert_fail@plt+0x6108>
   17ad8:	mov	r2, #5
   17adc:	movw	r1, #28740	; 0x7044
   17ae0:	movt	r1, #2
   17ae4:	bl	11984 <dcgettext@plt>
   17ae8:	ldr	r2, [sp, #20]
   17aec:	mov	r1, r0
   17af0:	ldr	r0, [sp, #24]
   17af4:	bl	13260 <__assert_fail@plt+0x14ec>
   17af8:	b	17e7c <__assert_fail@plt+0x6108>
   17afc:	cmp	r3, #0
   17b00:	beq	17b9c <__assert_fail@plt+0x5e28>
   17b04:	ldrb	r3, [r7, #20]
   17b08:	cmp	r3, #46	; 0x2e
   17b0c:	moveq	r3, #2
   17b10:	movne	r3, #1
   17b14:	ldrb	r3, [r6, r3]
   17b18:	cmp	r3, #0
   17b1c:	beq	17b9c <__assert_fail@plt+0x5e28>
   17b20:	b	17c0c <__assert_fail@plt+0x5e98>
   17b24:	mov	r1, #2
   17b28:	b	17ef8 <__assert_fail@plt+0x6184>
   17b2c:	mov	r1, #3
   17b30:	b	17ef8 <__assert_fail@plt+0x6184>
   17b34:	mov	r1, #1
   17b38:	b	17ef8 <__assert_fail@plt+0x6184>
   17b3c:	mov	r1, #6
   17b40:	b	17ef8 <__assert_fail@plt+0x6184>
   17b44:	mov	r1, #5
   17b48:	b	17ef8 <__assert_fail@plt+0x6184>
   17b4c:	mov	r1, #7
   17b50:	b	17ef8 <__assert_fail@plt+0x6184>
   17b54:	mov	r1, #8
   17b58:	b	17ef8 <__assert_fail@plt+0x6184>
   17b5c:	mov	r1, #0
   17b60:	b	17ef8 <__assert_fail@plt+0x6184>
   17b64:	ldr	r3, [r4]
   17b68:	cmp	r3, #0
   17b6c:	beq	17c88 <__assert_fail@plt+0x5f14>
   17b70:	mov	r2, #5
   17b74:	ldr	r1, [sp, #28]
   17b78:	mov	r0, #0
   17b7c:	bl	11984 <dcgettext@plt>
   17b80:	ldr	r2, [sp, #20]
   17b84:	mov	r1, r0
   17b88:	ldr	r0, [sp, #24]
   17b8c:	bl	13260 <__assert_fail@plt+0x14ec>
   17b90:	ldr	r3, [r4]
   17b94:	cmp	r3, #75	; 0x4b
   17b98:	bne	17c88 <__assert_fail@plt+0x5f14>
   17b9c:	bl	14938 <__assert_fail@plt+0x2bc4>
   17ba0:	mov	r3, #0
   17ba4:	str	r3, [r4]
   17ba8:	ldr	r0, [sp, #16]
   17bac:	bl	11cb4 <readdir64@plt>
   17bb0:	subs	r7, r0, #0
   17bb4:	beq	17b64 <__assert_fail@plt+0x5df0>
   17bb8:	add	r6, r7, #19
   17bbc:	ldr	r3, [r9, #-3944]	; 0xfffff098
   17bc0:	cmp	r3, #2
   17bc4:	beq	17c0c <__assert_fail@plt+0x5e98>
   17bc8:	ldrb	r2, [r7, #19]
   17bcc:	cmp	r2, #46	; 0x2e
   17bd0:	beq	17afc <__assert_fail@plt+0x5d88>
   17bd4:	cmp	r3, #0
   17bd8:	bne	17c0c <__assert_fail@plt+0x5e98>
   17bdc:	ldr	r5, [r9, #-3940]	; 0xfffff09c
   17be0:	cmp	r5, #0
   17be4:	beq	17c0c <__assert_fail@plt+0x5e98>
   17be8:	mov	r2, #4
   17bec:	mov	r1, r6
   17bf0:	ldr	r0, [r5]
   17bf4:	bl	11ab0 <fnmatch@plt>
   17bf8:	cmp	r0, #0
   17bfc:	beq	17b9c <__assert_fail@plt+0x5e28>
   17c00:	ldr	r5, [r5, #4]
   17c04:	cmp	r5, #0
   17c08:	bne	17be8 <__assert_fail@plt+0x5e74>
   17c0c:	ldr	r5, [sl, #24]
   17c10:	cmp	r5, #0
   17c14:	beq	17c3c <__assert_fail@plt+0x5ec8>
   17c18:	mov	r2, #4
   17c1c:	mov	r1, r6
   17c20:	ldr	r0, [r5]
   17c24:	bl	11ab0 <fnmatch@plt>
   17c28:	cmp	r0, #0
   17c2c:	beq	17b9c <__assert_fail@plt+0x5e28>
   17c30:	ldr	r5, [r5, #4]
   17c34:	cmp	r5, #0
   17c38:	bne	17c18 <__assert_fail@plt+0x5ea4>
   17c3c:	ldrb	r3, [r7, #18]
   17c40:	sub	r3, r3, #1
   17c44:	cmp	r3, #13
   17c48:	ldrls	pc, [pc, r3, lsl #2]
   17c4c:	b	17b5c <__assert_fail@plt+0x5de8>
   17c50:	andeq	r7, r1, r4, lsr fp
   17c54:	andeq	r7, r1, r4, lsr #22
   17c58:	andeq	r7, r1, ip, asr fp
   17c5c:	andeq	r7, r1, ip, lsr #22
   17c60:	andeq	r7, r1, ip, asr fp
   17c64:	strdeq	r7, [r1], -r4
   17c68:	andeq	r7, r1, ip, asr fp
   17c6c:	andeq	r7, r1, r4, asr #22
   17c70:	andeq	r7, r1, ip, asr fp
   17c74:	andeq	r7, r1, ip, lsr fp
   17c78:	andeq	r7, r1, ip, asr fp
   17c7c:	andeq	r7, r1, ip, asr #22
   17c80:	andeq	r7, r1, ip, asr fp
   17c84:	andeq	r7, r1, r4, asr fp
   17c88:	ldr	r0, [sp, #16]
   17c8c:	bl	11d38 <closedir@plt>
   17c90:	cmp	r0, #0
   17c94:	bne	17d90 <__assert_fail@plt+0x601c>
   17c98:	bl	13a18 <__assert_fail@plt+0x1ca4>
   17c9c:	movw	r3, #54056	; 0xd328
   17ca0:	movt	r3, #3
   17ca4:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   17ca8:	cmp	r3, #0
   17cac:	bne	17db8 <__assert_fail@plt+0x6044>
   17cb0:	movw	r3, #45872	; 0xb330
   17cb4:	movt	r3, #3
   17cb8:	ldr	r3, [r3, #3116]	; 0xc2c
   17cbc:	cmp	r3, #0
   17cc0:	beq	17cd8 <__assert_fail@plt+0x5f64>
   17cc4:	movw	r3, #45872	; 0xb330
   17cc8:	movt	r3, #3
   17ccc:	ldrb	r3, [r3, #3113]	; 0xc29
   17cd0:	cmp	r3, #0
   17cd4:	beq	17d60 <__assert_fail@plt+0x5fec>
   17cd8:	movw	r1, #45872	; 0xb330
   17cdc:	movt	r1, #3
   17ce0:	add	r3, r1, #3600	; 0xe10
   17ce4:	ldrd	r2, [r3, #-8]
   17ce8:	strd	r2, [sp, #8]
   17cec:	mov	r2, #512	; 0x200
   17cf0:	mov	r3, #0
   17cf4:	strd	r2, [sp]
   17cf8:	ldr	r3, [r1, #3588]	; 0xe04
   17cfc:	add	r2, sp, #33	; 0x21
   17d00:	mov	r0, r8
   17d04:	mov	r1, fp
   17d08:	bl	1d588 <__assert_fail@plt+0xb814>
   17d0c:	mov	r4, r0
   17d10:	bl	11b94 <strlen@plt>
   17d14:	add	r5, r4, r0
   17d18:	sub	r6, r4, #1
   17d1c:	mov	r3, #32
   17d20:	strb	r3, [r4, #-1]
   17d24:	movw	r3, #45520	; 0xb1d0
   17d28:	movt	r3, #3
   17d2c:	ldrb	r3, [r3, #210]	; 0xd2
   17d30:	strb	r3, [r4, r0]
   17d34:	bl	14650 <__assert_fail@plt+0x28dc>
   17d38:	mov	r2, #5
   17d3c:	movw	r1, #29020	; 0x715c
   17d40:	movt	r1, #2
   17d44:	mov	r0, #0
   17d48:	bl	11984 <dcgettext@plt>
   17d4c:	bl	14628 <__assert_fail@plt+0x28b4>
   17d50:	add	r1, r5, #1
   17d54:	sub	r1, r1, r6
   17d58:	mov	r0, r6
   17d5c:	bl	145d4 <__assert_fail@plt+0x2860>
   17d60:	movw	r3, #45872	; 0xb330
   17d64:	movt	r3, #3
   17d68:	ldr	r3, [r3, #8]
   17d6c:	cmp	r3, #0
   17d70:	bne	17dc8 <__assert_fail@plt+0x6054>
   17d74:	add	sp, sp, #692	; 0x2b4
   17d78:	ldrd	r4, [sp]
   17d7c:	ldrd	r6, [sp, #8]
   17d80:	ldrd	r8, [sp, #16]
   17d84:	ldrd	sl, [sp, #24]
   17d88:	add	sp, sp, #32
   17d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d90:	mov	r2, #5
   17d94:	movw	r1, #28996	; 0x7144
   17d98:	movt	r1, #2
   17d9c:	mov	r0, #0
   17da0:	bl	11984 <dcgettext@plt>
   17da4:	ldr	r2, [sp, #20]
   17da8:	mov	r1, r0
   17dac:	ldr	r0, [sp, #24]
   17db0:	bl	13260 <__assert_fail@plt+0x14ec>
   17db4:	b	17c98 <__assert_fail@plt+0x5f24>
   17db8:	mov	r1, #0
   17dbc:	ldr	r0, [sp, #20]
   17dc0:	bl	141f0 <__assert_fail@plt+0x247c>
   17dc4:	b	17cb0 <__assert_fail@plt+0x5f3c>
   17dc8:	bl	1750c <__assert_fail@plt+0x5798>
   17dcc:	b	17d74 <__assert_fail@plt+0x6000>
   17dd0:	ldrd	r8, [sp, #32]
   17dd4:	ldrd	r6, [sp, #128]	; 0x80
   17dd8:	movw	r3, #54056	; 0xd328
   17ddc:	movt	r3, #3
   17de0:	ldr	r2, [r3, #-4024]	; 0xfffff048
   17de4:	ldr	r3, [r3, #-4028]	; 0xfffff044
   17de8:	sub	r3, r2, r3
   17dec:	cmp	r3, #15
   17df0:	bls	17aa8 <__assert_fail@plt+0x5d34>
   17df4:	movw	r3, #54056	; 0xd328
   17df8:	movt	r3, #3
   17dfc:	ldr	r2, [r3, #-4028]	; 0xfffff044
   17e00:	add	r1, r2, #16
   17e04:	str	r1, [r3, #-4028]	; 0xfffff044
   17e08:	strd	r8, [r2, #8]
   17e0c:	strd	r6, [r2]
   17e10:	bl	1301c <__assert_fail@plt+0x12a8>
   17e14:	movw	r3, #54056	; 0xd328
   17e18:	movt	r3, #3
   17e1c:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   17e20:	cmp	r3, #0
   17e24:	bne	17e3c <__assert_fail@plt+0x60c8>
   17e28:	movw	r3, #54056	; 0xd328
   17e2c:	movt	r3, #3
   17e30:	ldrb	r3, [r3, #-3995]	; 0xfffff065
   17e34:	cmp	r3, #0
   17e38:	beq	17ecc <__assert_fail@plt+0x6158>
   17e3c:	movw	r3, #45520	; 0xb1d0
   17e40:	movt	r3, #3
   17e44:	ldrb	r3, [r3, #228]	; 0xe4
   17e48:	cmp	r3, #0
   17e4c:	beq	17ab8 <__assert_fail@plt+0x5d44>
   17e50:	movw	r3, #45520	; 0xb1d0
   17e54:	movt	r3, #3
   17e58:	mov	r2, #0
   17e5c:	strb	r2, [r3, #228]	; 0xe4
   17e60:	bl	14650 <__assert_fail@plt+0x28dc>
   17e64:	movw	r3, #45872	; 0xb330
   17e68:	movt	r3, #3
   17e6c:	ldrb	r3, [r3, #4044]	; 0xfcc
   17e70:	cmp	r3, #0
   17e74:	moveq	r6, #0
   17e78:	bne	17ac4 <__assert_fail@plt+0x5d50>
   17e7c:	movw	r1, #54056	; 0xd328
   17e80:	movt	r1, #3
   17e84:	str	r6, [sp, #8]
   17e88:	sub	r3, r1, #3984	; 0xf90
   17e8c:	sub	r3, r3, #4
   17e90:	str	r3, [sp, #4]
   17e94:	mov	r3, #1
   17e98:	str	r3, [sp]
   17e9c:	mov	r3, #0
   17ea0:	mvn	r2, #0
   17ea4:	ldr	r1, [r1, #-3992]	; 0xfffff068
   17ea8:	ldr	r0, [sp, #20]
   17eac:	cmp	r5, r3
   17eb0:	movne	r0, r5
   17eb4:	bl	14bf8 <__assert_fail@plt+0x2e84>
   17eb8:	mov	r0, r6
   17ebc:	bl	1c200 <__assert_fail@plt+0xa48c>
   17ec0:	movw	r0, #28968	; 0x7128
   17ec4:	movt	r0, #2
   17ec8:	bl	14628 <__assert_fail@plt+0x28b4>
   17ecc:	mov	r8, #0
   17ed0:	mov	fp, r8
   17ed4:	movw	r3, #28972	; 0x712c
   17ed8:	movt	r3, #2
   17edc:	str	r3, [sp, #28]
   17ee0:	movw	r9, #54056	; 0xd328
   17ee4:	movt	r9, #3
   17ee8:	movw	sl, #45872	; 0xb330
   17eec:	movt	sl, #3
   17ef0:	b	17ba0 <__assert_fail@plt+0x5e2c>
   17ef4:	mov	r1, #4
   17ef8:	ldr	r3, [sp, #20]
   17efc:	str	r3, [sp, #4]
   17f00:	mov	r3, #0
   17f04:	str	r3, [sp]
   17f08:	mov	r2, #0
   17f0c:	mov	r3, #0
   17f10:	mov	r0, r6
   17f14:	bl	15bd4 <__assert_fail@plt+0x3e60>
   17f18:	adds	r8, r8, r0
   17f1c:	adc	fp, fp, r1
   17f20:	ldr	r3, [sl, #3116]	; 0xc2c
   17f24:	cmp	r3, #1
   17f28:	bne	17b9c <__assert_fail@plt+0x5e28>
   17f2c:	ldr	r3, [sl, #3124]	; 0xc34
   17f30:	cmp	r3, #6
   17f34:	bne	17b9c <__assert_fail@plt+0x5e28>
   17f38:	ldrb	r3, [sl, #3113]	; 0xc29
   17f3c:	cmp	r3, #0
   17f40:	bne	17b9c <__assert_fail@plt+0x5e28>
   17f44:	ldrb	r3, [r9, #-3996]	; 0xfffff064
   17f48:	cmp	r3, #0
   17f4c:	bne	17b9c <__assert_fail@plt+0x5e28>
   17f50:	bl	13a18 <__assert_fail@plt+0x1ca4>
   17f54:	bl	1750c <__assert_fail@plt+0x5798>
   17f58:	bl	1301c <__assert_fail@plt+0x12a8>
   17f5c:	b	17b9c <__assert_fail@plt+0x5e28>
   17f60:	andeq	ip, r3, r0, ror #6
   17f64:	strd	r4, [sp, #-16]!
   17f68:	str	r6, [sp, #8]
   17f6c:	str	lr, [sp, #12]
   17f70:	mov	lr, r0
   17f74:	ldr	r3, [r1, #96]	; 0x60
   17f78:	ldr	r4, [r1, #100]	; 0x64
   17f7c:	ldr	r0, [r0, #96]	; 0x60
   17f80:	ldr	r5, [lr, #100]	; 0x64
   17f84:	cmp	r0, r3
   17f88:	movlt	ip, #1
   17f8c:	movge	ip, #0
   17f90:	movgt	r0, #1
   17f94:	movle	r0, #0
   17f98:	sub	ip, ip, r0
   17f9c:	cmp	r5, r4
   17fa0:	movlt	r3, #1
   17fa4:	movge	r3, #0
   17fa8:	movgt	r0, #1
   17fac:	movle	r0, #0
   17fb0:	sub	r3, r3, r0
   17fb4:	adds	r0, r3, ip, lsl #1
   17fb8:	bne	17fc8 <__assert_fail@plt+0x6254>
   17fbc:	ldr	r1, [r1]
   17fc0:	ldr	r0, [lr]
   17fc4:	blx	r2
   17fc8:	ldrd	r4, [sp]
   17fcc:	ldr	r6, [sp, #8]
   17fd0:	add	sp, sp, #12
   17fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fd8:	str	r4, [sp, #-8]!
   17fdc:	str	lr, [sp, #4]
   17fe0:	movw	r2, #13232	; 0x33b0
   17fe4:	movt	r2, #1
   17fe8:	bl	17f64 <__assert_fail@plt+0x61f0>
   17fec:	ldr	r4, [sp]
   17ff0:	add	sp, sp, #4
   17ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff8:	str	r4, [sp, #-8]!
   17ffc:	str	lr, [sp, #4]
   18000:	movw	r2, #6304	; 0x18a0
   18004:	movt	r2, #1
   18008:	bl	17f64 <__assert_fail@plt+0x61f0>
   1800c:	ldr	r4, [sp]
   18010:	add	sp, sp, #4
   18014:	pop	{pc}		; (ldr pc, [sp], #4)
   18018:	str	r4, [sp, #-8]!
   1801c:	str	lr, [sp, #4]
   18020:	mov	r3, r1
   18024:	movw	r2, #13232	; 0x33b0
   18028:	movt	r2, #1
   1802c:	mov	r1, r0
   18030:	mov	r0, r3
   18034:	bl	17f64 <__assert_fail@plt+0x61f0>
   18038:	ldr	r4, [sp]
   1803c:	add	sp, sp, #4
   18040:	pop	{pc}		; (ldr pc, [sp], #4)
   18044:	str	r4, [sp, #-8]!
   18048:	str	lr, [sp, #4]
   1804c:	mov	r3, r1
   18050:	movw	r2, #6304	; 0x18a0
   18054:	movt	r2, #1
   18058:	mov	r1, r0
   1805c:	mov	r0, r3
   18060:	bl	17f64 <__assert_fail@plt+0x61f0>
   18064:	ldr	r4, [sp]
   18068:	add	sp, sp, #4
   1806c:	pop	{pc}		; (ldr pc, [sp], #4)
   18070:	push	{lr}		; (str lr, [sp, #-4]!)
   18074:	sub	sp, sp, #60	; 0x3c
   18078:	subs	r5, r0, #0
   1807c:	beq	180c4 <__assert_fail@plt+0x6350>
   18080:	movw	r3, #45856	; 0xb320
   18084:	movt	r3, #3
   18088:	ldr	r4, [r3]
   1808c:	mov	r2, #5
   18090:	movw	r1, #29040	; 0x7170
   18094:	movt	r1, #2
   18098:	mov	r0, #0
   1809c:	bl	11984 <dcgettext@plt>
   180a0:	movw	r3, #50148	; 0xc3e4
   180a4:	movt	r3, #3
   180a8:	ldr	r3, [r3]
   180ac:	mov	r2, r0
   180b0:	mov	r1, #1
   180b4:	mov	r0, r4
   180b8:	bl	11c18 <__fprintf_chk@plt>
   180bc:	mov	r0, r5
   180c0:	bl	11b70 <exit@plt>
   180c4:	mov	r2, #5
   180c8:	movw	r1, #29080	; 0x7198
   180cc:	movt	r1, #2
   180d0:	mov	r0, #0
   180d4:	bl	11984 <dcgettext@plt>
   180d8:	movw	r3, #50148	; 0xc3e4
   180dc:	movt	r3, #3
   180e0:	ldr	r2, [r3]
   180e4:	mov	r1, r0
   180e8:	mov	r0, #1
   180ec:	bl	11bf4 <__printf_chk@plt>
   180f0:	mov	r2, #5
   180f4:	movw	r1, #29116	; 0x71bc
   180f8:	movt	r1, #2
   180fc:	mov	r0, #0
   18100:	bl	11984 <dcgettext@plt>
   18104:	movw	r4, #45860	; 0xb324
   18108:	movt	r4, #3
   1810c:	ldr	r1, [r4]
   18110:	bl	11864 <fputs_unlocked@plt>
   18114:	mov	r2, #5
   18118:	movw	r1, #29260	; 0x724c
   1811c:	movt	r1, #2
   18120:	mov	r0, #0
   18124:	bl	11984 <dcgettext@plt>
   18128:	ldr	r1, [r4]
   1812c:	bl	11864 <fputs_unlocked@plt>
   18130:	mov	r2, #5
   18134:	movw	r1, #29336	; 0x7298
   18138:	movt	r1, #2
   1813c:	mov	r0, #0
   18140:	bl	11984 <dcgettext@plt>
   18144:	ldr	r1, [r4]
   18148:	bl	11864 <fputs_unlocked@plt>
   1814c:	mov	r2, #5
   18150:	movw	r1, #29608	; 0x73a8
   18154:	movt	r1, #2
   18158:	mov	r0, #0
   1815c:	bl	11984 <dcgettext@plt>
   18160:	ldr	r1, [r4]
   18164:	bl	11864 <fputs_unlocked@plt>
   18168:	mov	r2, #5
   1816c:	movw	r1, #29764	; 0x7444
   18170:	movt	r1, #2
   18174:	mov	r0, #0
   18178:	bl	11984 <dcgettext@plt>
   1817c:	ldr	r1, [r4]
   18180:	bl	11864 <fputs_unlocked@plt>
   18184:	mov	r2, #5
   18188:	movw	r1, #30128	; 0x75b0
   1818c:	movt	r1, #2
   18190:	mov	r0, #0
   18194:	bl	11984 <dcgettext@plt>
   18198:	ldr	r1, [r4]
   1819c:	bl	11864 <fputs_unlocked@plt>
   181a0:	mov	r2, #5
   181a4:	movw	r1, #30404	; 0x76c4
   181a8:	movt	r1, #2
   181ac:	mov	r0, #0
   181b0:	bl	11984 <dcgettext@plt>
   181b4:	ldr	r1, [r4]
   181b8:	bl	11864 <fputs_unlocked@plt>
   181bc:	mov	r2, #5
   181c0:	movw	r1, #30820	; 0x7864
   181c4:	movt	r1, #2
   181c8:	mov	r0, #0
   181cc:	bl	11984 <dcgettext@plt>
   181d0:	ldr	r1, [r4]
   181d4:	bl	11864 <fputs_unlocked@plt>
   181d8:	mov	r2, #5
   181dc:	movw	r1, #30884	; 0x78a4
   181e0:	movt	r1, #2
   181e4:	mov	r0, #0
   181e8:	bl	11984 <dcgettext@plt>
   181ec:	ldr	r1, [r4]
   181f0:	bl	11864 <fputs_unlocked@plt>
   181f4:	mov	r2, #5
   181f8:	movw	r1, #31132	; 0x799c
   181fc:	movt	r1, #2
   18200:	mov	r0, #0
   18204:	bl	11984 <dcgettext@plt>
   18208:	ldr	r1, [r4]
   1820c:	bl	11864 <fputs_unlocked@plt>
   18210:	mov	r2, #5
   18214:	movw	r1, #31208	; 0x79e8
   18218:	movt	r1, #2
   1821c:	mov	r0, #0
   18220:	bl	11984 <dcgettext@plt>
   18224:	ldr	r1, [r4]
   18228:	bl	11864 <fputs_unlocked@plt>
   1822c:	mov	r2, #5
   18230:	movw	r1, #31360	; 0x7a80
   18234:	movt	r1, #2
   18238:	mov	r0, #0
   1823c:	bl	11984 <dcgettext@plt>
   18240:	ldr	r1, [r4]
   18244:	bl	11864 <fputs_unlocked@plt>
   18248:	mov	r2, #5
   1824c:	movw	r1, #31784	; 0x7c28
   18250:	movt	r1, #2
   18254:	mov	r0, #0
   18258:	bl	11984 <dcgettext@plt>
   1825c:	ldr	r1, [r4]
   18260:	bl	11864 <fputs_unlocked@plt>
   18264:	mov	r2, #5
   18268:	movw	r1, #31840	; 0x7c60
   1826c:	movt	r1, #2
   18270:	mov	r0, #0
   18274:	bl	11984 <dcgettext@plt>
   18278:	ldr	r1, [r4]
   1827c:	bl	11864 <fputs_unlocked@plt>
   18280:	mov	r2, #5
   18284:	movw	r1, #32196	; 0x7dc4
   18288:	movt	r1, #2
   1828c:	mov	r0, #0
   18290:	bl	11984 <dcgettext@plt>
   18294:	ldr	r1, [r4]
   18298:	bl	11864 <fputs_unlocked@plt>
   1829c:	mov	r2, #5
   182a0:	movw	r1, #32352	; 0x7e60
   182a4:	movt	r1, #2
   182a8:	mov	r0, #0
   182ac:	bl	11984 <dcgettext@plt>
   182b0:	ldr	r1, [r4]
   182b4:	bl	11864 <fputs_unlocked@plt>
   182b8:	mov	r2, #5
   182bc:	movw	r1, #32712	; 0x7fc8
   182c0:	movt	r1, #2
   182c4:	mov	r0, #0
   182c8:	bl	11984 <dcgettext@plt>
   182cc:	ldr	r1, [r4]
   182d0:	bl	11864 <fputs_unlocked@plt>
   182d4:	mov	r2, #5
   182d8:	movw	r1, #33016	; 0x80f8
   182dc:	movt	r1, #2
   182e0:	mov	r0, #0
   182e4:	bl	11984 <dcgettext@plt>
   182e8:	ldr	r1, [r4]
   182ec:	bl	11864 <fputs_unlocked@plt>
   182f0:	mov	r2, #5
   182f4:	movw	r1, #33604	; 0x8344
   182f8:	movt	r1, #2
   182fc:	mov	r0, #0
   18300:	bl	11984 <dcgettext@plt>
   18304:	ldr	r1, [r4]
   18308:	bl	11864 <fputs_unlocked@plt>
   1830c:	mov	r2, #5
   18310:	movw	r1, #33804	; 0x840c
   18314:	movt	r1, #2
   18318:	mov	r0, #0
   1831c:	bl	11984 <dcgettext@plt>
   18320:	ldr	r1, [r4]
   18324:	bl	11864 <fputs_unlocked@plt>
   18328:	mov	r2, #5
   1832c:	movw	r1, #34448	; 0x8690
   18330:	movt	r1, #2
   18334:	mov	r0, #0
   18338:	bl	11984 <dcgettext@plt>
   1833c:	ldr	r1, [r4]
   18340:	bl	11864 <fputs_unlocked@plt>
   18344:	mov	r2, #5
   18348:	movw	r1, #34528	; 0x86e0
   1834c:	movt	r1, #2
   18350:	mov	r0, #0
   18354:	bl	11984 <dcgettext@plt>
   18358:	ldr	r1, [r4]
   1835c:	bl	11864 <fputs_unlocked@plt>
   18360:	mov	r2, #5
   18364:	movw	r1, #34672	; 0x8770
   18368:	movt	r1, #2
   1836c:	mov	r0, #0
   18370:	bl	11984 <dcgettext@plt>
   18374:	ldr	r1, [r4]
   18378:	bl	11864 <fputs_unlocked@plt>
   1837c:	mov	r2, #5
   18380:	movw	r1, #35044	; 0x88e4
   18384:	movt	r1, #2
   18388:	mov	r0, #0
   1838c:	bl	11984 <dcgettext@plt>
   18390:	ldr	r1, [r4]
   18394:	bl	11864 <fputs_unlocked@plt>
   18398:	mov	r2, #5
   1839c:	movw	r1, #35452	; 0x8a7c
   183a0:	movt	r1, #2
   183a4:	mov	r0, #0
   183a8:	bl	11984 <dcgettext@plt>
   183ac:	ldr	r1, [r4]
   183b0:	bl	11864 <fputs_unlocked@plt>
   183b4:	mov	r2, #5
   183b8:	movw	r1, #35500	; 0x8aac
   183bc:	movt	r1, #2
   183c0:	mov	r0, #0
   183c4:	bl	11984 <dcgettext@plt>
   183c8:	ldr	r1, [r4]
   183cc:	bl	11864 <fputs_unlocked@plt>
   183d0:	mov	r2, #5
   183d4:	movw	r1, #35556	; 0x8ae4
   183d8:	movt	r1, #2
   183dc:	mov	r0, #0
   183e0:	bl	11984 <dcgettext@plt>
   183e4:	ldr	r1, [r4]
   183e8:	bl	11864 <fputs_unlocked@plt>
   183ec:	mov	r2, #5
   183f0:	movw	r1, #35768	; 0x8bb8
   183f4:	movt	r1, #2
   183f8:	mov	r0, #0
   183fc:	bl	11984 <dcgettext@plt>
   18400:	ldr	r1, [r4]
   18404:	bl	11864 <fputs_unlocked@plt>
   18408:	mov	r2, #5
   1840c:	movw	r1, #36144	; 0x8d30
   18410:	movt	r1, #2
   18414:	mov	r0, #0
   18418:	bl	11984 <dcgettext@plt>
   1841c:	ldr	r1, [r4]
   18420:	bl	11864 <fputs_unlocked@plt>
   18424:	mov	r2, #5
   18428:	movw	r1, #36220	; 0x8d7c
   1842c:	movt	r1, #2
   18430:	mov	r0, #0
   18434:	bl	11984 <dcgettext@plt>
   18438:	ldr	r1, [r4]
   1843c:	bl	11864 <fputs_unlocked@plt>
   18440:	mov	r2, #5
   18444:	movw	r1, #36508	; 0x8e9c
   18448:	movt	r1, #2
   1844c:	mov	r0, #0
   18450:	bl	11984 <dcgettext@plt>
   18454:	ldr	r1, [r4]
   18458:	bl	11864 <fputs_unlocked@plt>
   1845c:	movw	r3, #45752	; 0xb2b8
   18460:	movt	r3, #3
   18464:	ldr	r2, [r3]
   18468:	cmp	r2, #1
   1846c:	beq	185cc <__assert_fail@plt+0x6858>
   18470:	movw	r4, #38616	; 0x96d8
   18474:	movt	r4, #2
   18478:	movw	r3, #29032	; 0x7168
   1847c:	movt	r3, #2
   18480:	cmp	r2, #2
   18484:	movne	r4, r3
   18488:	ldr	r0, [pc, #632]	; 18708 <__assert_fail@plt+0x6994>
   1848c:	ldr	r1, [r0]
   18490:	ldr	r3, [r0, #4]
   18494:	str	r1, [sp]
   18498:	str	r3, [sp, #4]
   1849c:	ldrd	r2, [r0, #8]
   184a0:	strd	r2, [sp, #8]
   184a4:	ldrd	r2, [r0, #16]
   184a8:	strd	r2, [sp, #16]
   184ac:	ldrd	r2, [r0, #24]
   184b0:	strd	r2, [sp, #24]
   184b4:	ldrd	r2, [r0, #32]
   184b8:	strd	r2, [sp, #32]
   184bc:	ldrd	r2, [r0, #40]	; 0x28
   184c0:	strd	r2, [sp, #40]	; 0x28
   184c4:	ldrd	r2, [r0, #48]	; 0x30
   184c8:	strd	r2, [sp, #48]	; 0x30
   184cc:	cmp	r1, #0
   184d0:	moveq	r6, sp
   184d4:	beq	184f8 <__assert_fail@plt+0x6784>
   184d8:	mov	r6, sp
   184dc:	mov	r0, r4
   184e0:	bl	118a0 <strcmp@plt>
   184e4:	cmp	r0, #0
   184e8:	beq	184f8 <__assert_fail@plt+0x6784>
   184ec:	ldr	r1, [r6, #8]!
   184f0:	cmp	r1, #0
   184f4:	bne	184dc <__assert_fail@plt+0x6768>
   184f8:	ldr	r6, [r6, #4]
   184fc:	cmp	r6, #0
   18500:	beq	18658 <__assert_fail@plt+0x68e4>
   18504:	mov	r2, #5
   18508:	movw	r1, #36660	; 0x8f34
   1850c:	movt	r1, #2
   18510:	mov	r0, #0
   18514:	bl	11984 <dcgettext@plt>
   18518:	movw	r3, #36684	; 0x8f4c
   1851c:	movt	r3, #2
   18520:	movw	r2, #36724	; 0x8f74
   18524:	movt	r2, #2
   18528:	mov	r1, r0
   1852c:	mov	r0, #1
   18530:	bl	11bf4 <__printf_chk@plt>
   18534:	mov	r1, #0
   18538:	mov	r0, #5
   1853c:	bl	11c54 <setlocale@plt>
   18540:	cmp	r0, #0
   18544:	beq	18560 <__assert_fail@plt+0x67ec>
   18548:	mov	r2, #3
   1854c:	movw	r1, #36740	; 0x8f84
   18550:	movt	r1, #2
   18554:	bl	11d20 <strncmp@plt>
   18558:	cmp	r0, #0
   1855c:	bne	185dc <__assert_fail@plt+0x6868>
   18560:	mov	r2, #5
   18564:	movw	r1, #36816	; 0x8fd0
   18568:	movt	r1, #2
   1856c:	mov	r0, #0
   18570:	bl	11984 <dcgettext@plt>
   18574:	mov	r3, r4
   18578:	movw	r2, #36684	; 0x8f4c
   1857c:	movt	r2, #2
   18580:	mov	r1, r0
   18584:	mov	r0, #1
   18588:	bl	11bf4 <__printf_chk@plt>
   1858c:	mov	r2, #5
   18590:	movw	r1, #36844	; 0x8fec
   18594:	movt	r1, #2
   18598:	mov	r0, #0
   1859c:	bl	11984 <dcgettext@plt>
   185a0:	mov	r1, r0
   185a4:	movw	r3, #38012	; 0x947c
   185a8:	movt	r3, #2
   185ac:	movw	r2, #39300	; 0x9984
   185b0:	movt	r2, #2
   185b4:	cmp	r4, r6
   185b8:	movne	r3, r2
   185bc:	mov	r2, r6
   185c0:	mov	r0, #1
   185c4:	bl	11bf4 <__printf_chk@plt>
   185c8:	b	180bc <__assert_fail@plt+0x6348>
   185cc:	movw	r4, #29028	; 0x7164
   185d0:	movt	r4, #2
   185d4:	b	18488 <__assert_fail@plt+0x6714>
   185d8:	mov	r6, r4
   185dc:	mov	r2, #5
   185e0:	movw	r1, #36744	; 0x8f88
   185e4:	movt	r1, #2
   185e8:	mov	r0, #0
   185ec:	bl	11984 <dcgettext@plt>
   185f0:	movw	r3, #45860	; 0xb324
   185f4:	movt	r3, #3
   185f8:	ldr	r1, [r3]
   185fc:	bl	11864 <fputs_unlocked@plt>
   18600:	b	18560 <__assert_fail@plt+0x67ec>
   18604:	mov	r2, #5
   18608:	movw	r1, #36816	; 0x8fd0
   1860c:	movt	r1, #2
   18610:	mov	r0, #0
   18614:	bl	11984 <dcgettext@plt>
   18618:	mov	r3, r4
   1861c:	movw	r2, #36684	; 0x8f4c
   18620:	movt	r2, #2
   18624:	mov	r1, r0
   18628:	mov	r0, #1
   1862c:	bl	11bf4 <__printf_chk@plt>
   18630:	mov	r2, #5
   18634:	movw	r1, #36844	; 0x8fec
   18638:	movt	r1, #2
   1863c:	mov	r0, #0
   18640:	bl	11984 <dcgettext@plt>
   18644:	mov	r1, r0
   18648:	mov	r6, r4
   1864c:	movw	r3, #38012	; 0x947c
   18650:	movt	r3, #2
   18654:	b	185bc <__assert_fail@plt+0x6848>
   18658:	mov	r2, #5
   1865c:	movw	r1, #36660	; 0x8f34
   18660:	movt	r1, #2
   18664:	mov	r0, #0
   18668:	bl	11984 <dcgettext@plt>
   1866c:	movw	r3, #36684	; 0x8f4c
   18670:	movt	r3, #2
   18674:	movw	r2, #36724	; 0x8f74
   18678:	movt	r2, #2
   1867c:	mov	r1, r0
   18680:	mov	r0, #1
   18684:	bl	11bf4 <__printf_chk@plt>
   18688:	mov	r1, #0
   1868c:	mov	r0, #5
   18690:	bl	11c54 <setlocale@plt>
   18694:	cmp	r0, #0
   18698:	beq	18604 <__assert_fail@plt+0x6890>
   1869c:	mov	r2, #3
   186a0:	movw	r1, #36740	; 0x8f84
   186a4:	movt	r1, #2
   186a8:	bl	11d20 <strncmp@plt>
   186ac:	cmp	r0, #0
   186b0:	bne	185d8 <__assert_fail@plt+0x6864>
   186b4:	mov	r2, #5
   186b8:	movw	r1, #36816	; 0x8fd0
   186bc:	movt	r1, #2
   186c0:	mov	r0, #0
   186c4:	bl	11984 <dcgettext@plt>
   186c8:	mov	r3, r4
   186cc:	movw	r2, #36684	; 0x8f4c
   186d0:	movt	r2, #2
   186d4:	mov	r1, r0
   186d8:	mov	r0, #1
   186dc:	bl	11bf4 <__printf_chk@plt>
   186e0:	mov	r2, #5
   186e4:	movw	r1, #36844	; 0x8fec
   186e8:	movt	r1, #2
   186ec:	mov	r0, #0
   186f0:	bl	11984 <dcgettext@plt>
   186f4:	mov	r1, r0
   186f8:	mov	r6, r4
   186fc:	movw	r3, #38012	; 0x947c
   18700:	movt	r3, #2
   18704:	b	185bc <__assert_fail@plt+0x6848>
   18708:	andeq	r5, r2, ip, ror #19
   1870c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18710:	strd	r6, [sp, #8]
   18714:	strd	r8, [sp, #16]
   18718:	strd	sl, [sp, #24]
   1871c:	str	lr, [sp, #32]
   18720:	sub	sp, sp, #84	; 0x54
   18724:	mov	r4, r0
   18728:	str	r1, [sp, #24]
   1872c:	ldr	r0, [r1]
   18730:	bl	20d44 <_obstack_memory_used@@Base+0x34>
   18734:	movw	r1, #39300	; 0x9984
   18738:	movt	r1, #2
   1873c:	mov	r0, #6
   18740:	bl	11c54 <setlocale@plt>
   18744:	movw	r5, #36728	; 0x8f78
   18748:	movt	r5, #2
   1874c:	movw	r1, #36920	; 0x9038
   18750:	movt	r1, #2
   18754:	mov	r0, r5
   18758:	bl	11cf0 <bindtextdomain@plt>
   1875c:	mov	r0, r5
   18760:	bl	119c0 <textdomain@plt>
   18764:	movw	r3, #45764	; 0xb2c4
   18768:	movt	r3, #3
   1876c:	mov	r2, #2
   18770:	str	r2, [r3]
   18774:	movw	r0, #46964	; 0xb774
   18778:	movt	r0, #1
   1877c:	bl	2582c <_obstack_memory_used@@Base+0x4b1c>
   18780:	movw	r3, #45872	; 0xb330
   18784:	movt	r3, #3
   18788:	mov	r7, #0
   1878c:	str	r7, [r3, #3172]	; 0xc64
   18790:	movw	r2, #54056	; 0xd328
   18794:	movt	r2, #3
   18798:	mov	r1, #1
   1879c:	strb	r1, [r2, #-3995]	; 0xfffff065
   187a0:	str	r7, [r3, #3104]	; 0xc20
   187a4:	mov	r2, #-2147483648	; 0x80000000
   187a8:	str	r2, [r3, #4092]	; 0xffc
   187ac:	add	r3, r3, #4096	; 0x1000
   187b0:	mvn	r5, #0
   187b4:	str	r5, [r3]
   187b8:	str	r5, [sp, #36]	; 0x24
   187bc:	str	r5, [sp, #44]	; 0x2c
   187c0:	str	r5, [sp, #28]
   187c4:	mov	sl, r5
   187c8:	str	r5, [sp, #32]
   187cc:	str	r7, [sp, #48]	; 0x30
   187d0:	movw	r8, #22608	; 0x5850
   187d4:	movt	r8, #2
   187d8:	movw	fp, #36944	; 0x9050
   187dc:	movt	fp, #2
   187e0:	movw	r9, #45520	; 0xb1d0
   187e4:	movt	r9, #3
   187e8:	movw	r6, #45872	; 0xb330
   187ec:	movt	r6, #3
   187f0:	add	r3, r6, #3600	; 0xe10
   187f4:	str	r3, [sp, #40]	; 0x28
   187f8:	sub	r3, r3, #8
   187fc:	str	r3, [sp, #52]	; 0x34
   18800:	mvn	r3, #0
   18804:	str	r3, [sp, #64]	; 0x40
   18808:	add	r3, sp, #64	; 0x40
   1880c:	str	r3, [sp]
   18810:	ldr	r3, [pc, #3136]	; 19458 <__assert_fail@plt+0x76e4>
   18814:	mov	r2, fp
   18818:	ldr	r1, [sp, #24]
   1881c:	mov	r0, r4
   18820:	bl	11b4c <getopt_long@plt>
   18824:	cmn	r0, #1
   18828:	beq	1946c <__assert_fail@plt+0x76f8>
   1882c:	add	r0, r0, #3
   18830:	cmp	r0, #276	; 0x114
   18834:	ldrls	pc, [pc, r0, lsl #2]
   18838:	b	19440 <__assert_fail@plt+0x76cc>
   1883c:			; <UNDEFINED> instruction: 0x000193b8
   18840:			; <UNDEFINED> instruction: 0x000193b0
   18844:	andeq	r9, r1, r0, asr #8
   18848:	andeq	r9, r1, r0, asr #8
   1884c:	andeq	r9, r1, r0, asr #8
   18850:	andeq	r9, r1, r0, asr #8
   18854:	andeq	r9, r1, r0, asr #8
   18858:	andeq	r9, r1, r0, asr #8
   1885c:	andeq	r9, r1, r0, asr #8
   18860:	andeq	r9, r1, r0, asr #8
   18864:	andeq	r9, r1, r0, asr #8
   18868:	andeq	r9, r1, r0, asr #8
   1886c:	andeq	r9, r1, r0, asr #8
   18870:	andeq	r9, r1, r0, asr #8
   18874:	andeq	r9, r1, r0, asr #8
   18878:	andeq	r9, r1, r0, asr #8
   1887c:	andeq	r9, r1, r0, asr #8
   18880:	andeq	r9, r1, r0, asr #8
   18884:	andeq	r9, r1, r0, asr #8
   18888:	andeq	r9, r1, r0, asr #8
   1888c:	andeq	r9, r1, r0, asr #8
   18890:	andeq	r9, r1, r0, asr #8
   18894:	andeq	r9, r1, r0, asr #8
   18898:	andeq	r9, r1, r0, asr #8
   1889c:	andeq	r9, r1, r0, asr #8
   188a0:	andeq	r9, r1, r0, asr #8
   188a4:	andeq	r9, r1, r0, asr #8
   188a8:	andeq	r9, r1, r0, asr #8
   188ac:	andeq	r9, r1, r0, asr #8
   188b0:	andeq	r9, r1, r0, asr #8
   188b4:	andeq	r9, r1, r0, asr #8
   188b8:	andeq	r9, r1, r0, asr #8
   188bc:	andeq	r9, r1, r0, asr #8
   188c0:	andeq	r9, r1, r0, asr #8
   188c4:	andeq	r9, r1, r0, asr #8
   188c8:	andeq	r9, r1, r0, asr #8
   188cc:	andeq	r9, r1, r0, asr #8
   188d0:	andeq	r9, r1, r0, asr #8
   188d4:	andeq	r9, r1, r0, asr #8
   188d8:	andeq	r9, r1, r0, asr #8
   188dc:	andeq	r9, r1, r0, asr #8
   188e0:	andeq	r9, r1, r0, asr #8
   188e4:	andeq	r9, r1, r0, asr #8
   188e8:	andeq	r9, r1, r0, asr #8
   188ec:	andeq	r9, r1, r0, asr #8
   188f0:	andeq	r9, r1, r0, asr #8
   188f4:	andeq	r9, r1, r0, asr #8
   188f8:	andeq	r9, r1, r0, asr #8
   188fc:	andeq	r9, r1, r0, asr #8
   18900:	andeq	r9, r1, r0, asr #8
   18904:	andeq	r9, r1, r0, asr #8
   18908:	andeq	r9, r1, r0, asr #8
   1890c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18910:	andeq	r9, r1, r0, asr #8
   18914:	andeq	r9, r1, r0, asr #8
   18918:	andeq	r9, r1, r0, asr #8
   1891c:	andeq	r9, r1, r0, asr #8
   18920:	andeq	r9, r1, r0, asr #8
   18924:	andeq	r9, r1, r0, asr #8
   18928:	andeq	r9, r1, r0, asr #8
   1892c:	andeq	r9, r1, r0, asr #8
   18930:	andeq	r9, r1, r0, asr #8
   18934:	andeq	r9, r1, r0, asr #8
   18938:	andeq	r9, r1, r0, asr #8
   1893c:	andeq	r9, r1, r0, asr #8
   18940:	andeq	r9, r1, r0, asr #8
   18944:	andeq	r9, r1, r0, asr #8
   18948:	andeq	r9, r1, r0, asr #8
   1894c:	andeq	r8, r1, r4, lsr #28
   18950:	andeq	r8, r1, r8, lsr lr
   18954:	andeq	r8, r1, r4, asr lr
   18958:	andeq	r8, r1, ip, asr lr
   1895c:	andeq	r9, r1, r0, asr #8
   18960:	andeq	r8, r1, r8, ror #28
   18964:	andeq	r8, r1, r8, ror #29
   18968:	strdeq	r8, [r1], -r4
   1896c:	andeq	r8, r1, ip, lsl #30
   18970:	andeq	r9, r1, r0, asr #8
   18974:	andeq	r9, r1, r0, asr #8
   18978:	andeq	r8, r1, r0, lsr #30
   1897c:	andeq	r9, r1, r0, asr #8
   18980:	andeq	r8, r1, ip, lsr #30
   18984:	andeq	r9, r1, r0, asr #8
   18988:	andeq	r9, r1, r0, asr #8
   1898c:	andeq	r8, r1, r4, lsr pc
   18990:	andeq	r8, r1, ip, lsr pc
   18994:	andeq	r8, r1, r0, asr pc
   18998:	andeq	r8, r1, ip, asr pc
   1899c:	andeq	r8, r1, r0, asr #31
   189a0:	andeq	r9, r1, r0, asr #8
   189a4:	andeq	r9, r1, r0, asr #8
   189a8:	andeq	r8, r1, ip, asr #31
   189ac:	andeq	r9, r1, r0, asr #8
   189b0:	andeq	r9, r1, r4, lsl #7
   189b4:	andeq	r9, r1, r0, asr #8
   189b8:	andeq	r9, r1, r0, asr #8
   189bc:	andeq	r9, r1, r0, asr #8
   189c0:	andeq	r9, r1, r0, asr #8
   189c4:	andeq	r9, r1, r0, asr #8
   189c8:	andeq	r9, r1, r0, asr #8
   189cc:	muleq	r1, ip, ip
   189d0:	andeq	r9, r1, r8, asr #8
   189d4:			; <UNDEFINED> instruction: 0x00018cb0
   189d8:			; <UNDEFINED> instruction: 0x00018cbc
   189dc:	andeq	r9, r1, r0, asr #8
   189e0:	andeq	r8, r1, r8, asr #25
   189e4:	andeq	r8, r1, r8, lsl #26
   189e8:	andeq	r8, r1, r4, lsl sp
   189ec:	andeq	r8, r1, r8, lsr sp
   189f0:	andeq	r9, r1, r0, asr #8
   189f4:	muleq	r1, r0, ip
   189f8:	andeq	r9, r1, r0, asr r4
   189fc:	andeq	r8, r1, r4, asr #26
   18a00:	andeq	r8, r1, ip, asr #26
   18a04:	andeq	r8, r1, ip, asr sp
   18a08:	andeq	r8, r1, r8, ror #26
   18a0c:	andeq	r8, r1, r4, ror sp
   18a10:	andeq	r8, r1, r0, lsl #27
   18a14:	andeq	r8, r1, ip, lsl #27
   18a18:	muleq	r1, r8, sp
   18a1c:	andeq	r8, r1, r4, lsr #27
   18a20:			; <UNDEFINED> instruction: 0x00018db0
   18a24:			; <UNDEFINED> instruction: 0x00018dbc
   18a28:	andeq	r8, r1, ip, lsl lr
   18a2c:	andeq	r9, r1, r0, asr #8
   18a30:	andeq	r9, r1, r0, asr #8
   18a34:	andeq	r9, r1, r0, asr #8
   18a38:	andeq	r9, r1, r0, asr #8
   18a3c:	andeq	r9, r1, r0, asr #8
   18a40:	andeq	r9, r1, r0, asr #8
   18a44:	andeq	r9, r1, r0, asr #8
   18a48:	andeq	r9, r1, r0, asr #8
   18a4c:	andeq	r9, r1, r0, asr #8
   18a50:	andeq	r9, r1, r0, asr #8
   18a54:	andeq	r9, r1, r0, asr #8
   18a58:	andeq	r9, r1, r0, asr #8
   18a5c:	andeq	r9, r1, r0, asr #8
   18a60:	andeq	r9, r1, r0, asr #8
   18a64:	andeq	r9, r1, r0, asr #8
   18a68:	andeq	r9, r1, r0, asr #8
   18a6c:	andeq	r9, r1, r0, asr #8
   18a70:	andeq	r9, r1, r0, asr #8
   18a74:	andeq	r9, r1, r0, asr #8
   18a78:	andeq	r9, r1, r0, asr #8
   18a7c:	andeq	r9, r1, r0, asr #8
   18a80:	andeq	r9, r1, r0, asr #8
   18a84:	andeq	r9, r1, r0, asr #8
   18a88:	andeq	r9, r1, r0, asr #8
   18a8c:	andeq	r9, r1, r0, asr #8
   18a90:	andeq	r9, r1, r0, asr #8
   18a94:	andeq	r9, r1, r0, asr #8
   18a98:	andeq	r9, r1, r0, asr #8
   18a9c:	andeq	r9, r1, r0, asr #8
   18aa0:	andeq	r9, r1, r0, asr #8
   18aa4:	andeq	r9, r1, r0, asr #8
   18aa8:	andeq	r9, r1, r0, asr #8
   18aac:	andeq	r9, r1, r0, asr #8
   18ab0:	andeq	r9, r1, r0, asr #8
   18ab4:	andeq	r9, r1, r0, asr #8
   18ab8:	andeq	r9, r1, r0, asr #8
   18abc:	andeq	r9, r1, r0, asr #8
   18ac0:	andeq	r9, r1, r0, asr #8
   18ac4:	andeq	r9, r1, r0, asr #8
   18ac8:	andeq	r9, r1, r0, asr #8
   18acc:	andeq	r9, r1, r0, asr #8
   18ad0:	andeq	r9, r1, r0, asr #8
   18ad4:	andeq	r9, r1, r0, asr #8
   18ad8:	andeq	r9, r1, r0, asr #8
   18adc:	andeq	r9, r1, r0, asr #8
   18ae0:	andeq	r9, r1, r0, asr #8
   18ae4:	andeq	r9, r1, r0, asr #8
   18ae8:	andeq	r9, r1, r0, asr #8
   18aec:	andeq	r9, r1, r0, asr #8
   18af0:	andeq	r9, r1, r0, asr #8
   18af4:	andeq	r9, r1, r0, asr #8
   18af8:	andeq	r9, r1, r0, asr #8
   18afc:	andeq	r9, r1, r0, asr #8
   18b00:	andeq	r9, r1, r0, asr #8
   18b04:	andeq	r9, r1, r0, asr #8
   18b08:	andeq	r9, r1, r0, asr #8
   18b0c:	andeq	r9, r1, r0, asr #8
   18b10:	andeq	r9, r1, r0, asr #8
   18b14:	andeq	r9, r1, r0, asr #8
   18b18:	andeq	r9, r1, r0, asr #8
   18b1c:	andeq	r9, r1, r0, asr #8
   18b20:	andeq	r9, r1, r0, asr #8
   18b24:	andeq	r9, r1, r0, asr #8
   18b28:	andeq	r9, r1, r0, asr #8
   18b2c:	andeq	r9, r1, r0, asr #8
   18b30:	andeq	r9, r1, r0, asr #8
   18b34:	andeq	r9, r1, r0, asr #8
   18b38:	andeq	r9, r1, r0, asr #8
   18b3c:	andeq	r9, r1, r0, asr #8
   18b40:	andeq	r9, r1, r0, asr #8
   18b44:	andeq	r9, r1, r0, asr #8
   18b48:	andeq	r9, r1, r0, asr #8
   18b4c:	andeq	r9, r1, r0, asr #8
   18b50:	andeq	r9, r1, r0, asr #8
   18b54:	andeq	r9, r1, r0, asr #8
   18b58:	andeq	r9, r1, r0, asr #8
   18b5c:	andeq	r9, r1, r0, asr #8
   18b60:	andeq	r9, r1, r0, asr #8
   18b64:	andeq	r9, r1, r0, asr #8
   18b68:	andeq	r9, r1, r0, asr #8
   18b6c:	andeq	r9, r1, r0, asr #8
   18b70:	andeq	r9, r1, r0, asr #8
   18b74:	andeq	r9, r1, r0, asr #8
   18b78:	andeq	r9, r1, r0, asr #8
   18b7c:	andeq	r9, r1, r0, asr #8
   18b80:	andeq	r9, r1, r0, asr #8
   18b84:	andeq	r9, r1, r0, asr #8
   18b88:	andeq	r9, r1, r0, asr #8
   18b8c:	andeq	r9, r1, r0, asr #8
   18b90:	andeq	r9, r1, r0, asr #8
   18b94:	andeq	r9, r1, r0, asr #8
   18b98:	andeq	r9, r1, r0, asr #8
   18b9c:	andeq	r9, r1, r0, asr #8
   18ba0:	andeq	r9, r1, r0, asr #8
   18ba4:	andeq	r9, r1, r0, asr #8
   18ba8:	andeq	r9, r1, r0, asr #8
   18bac:	andeq	r9, r1, r0, asr #8
   18bb0:	andeq	r9, r1, r0, asr #8
   18bb4:	andeq	r9, r1, r0, asr #8
   18bb8:	andeq	r9, r1, r0, asr #8
   18bbc:	andeq	r9, r1, r0, asr #8
   18bc0:	andeq	r9, r1, r0, asr #8
   18bc4:	andeq	r9, r1, r0, asr #8
   18bc8:	andeq	r9, r1, r0, asr #8
   18bcc:	andeq	r9, r1, r0, asr #8
   18bd0:	andeq	r9, r1, r0, asr #8
   18bd4:	andeq	r9, r1, r0, asr #8
   18bd8:	andeq	r9, r1, r0, asr #8
   18bdc:	andeq	r9, r1, r0, asr #8
   18be0:	andeq	r9, r1, r0, asr #8
   18be4:	andeq	r9, r1, r0, asr #8
   18be8:	andeq	r9, r1, r0, asr #8
   18bec:	andeq	r9, r1, r0, asr #8
   18bf0:	andeq	r9, r1, r0, asr #8
   18bf4:	andeq	r9, r1, r0, asr #8
   18bf8:	andeq	r9, r1, r0, asr #8
   18bfc:	andeq	r9, r1, r0, asr #8
   18c00:	andeq	r9, r1, r0, asr #8
   18c04:	andeq	r9, r1, r0, asr #8
   18c08:	andeq	r9, r1, r0, asr #8
   18c0c:	andeq	r9, r1, r0, asr #8
   18c10:	andeq	r9, r1, r0, asr #8
   18c14:	andeq	r9, r1, r0, asr #8
   18c18:	andeq	r9, r1, r0, asr #8
   18c1c:	andeq	r9, r1, r0, asr #8
   18c20:	andeq	r9, r1, r0, asr #8
   18c24:	andeq	r9, r1, r0, asr #8
   18c28:	andeq	r9, r1, r0, asr #8
   18c2c:	andeq	r9, r1, r0, asr #8
   18c30:	andeq	r9, r1, r0, asr #8
   18c34:	andeq	r9, r1, r0, asr #8
   18c38:	andeq	r9, r1, r0, asr #8
   18c3c:	andeq	r9, r1, r0, asr #8
   18c40:	andeq	r9, r1, r0, asr #8
   18c44:	andeq	r9, r1, r0, asr #8
   18c48:	andeq	r8, r1, r4, ror #31
   18c4c:	andeq	r9, r1, r4, lsl #6
   18c50:	andeq	r9, r1, ip, lsr r1
   18c54:	andeq	r8, r1, r0, lsl #30
   18c58:	strdeq	r8, [r1], -ip
   18c5c:	ldrdeq	r9, [r1], -ip
   18c60:	andeq	r9, r1, ip, lsr #2
   18c64:	andeq	r9, r1, r8, ror r0
   18c68:	strdeq	r8, [r1], -r0
   18c6c:	andeq	r9, r1, r0, asr #3
   18c70:	andeq	r9, r1, r4, asr #4
   18c74:	muleq	r1, r4, r2
   18c78:	strdeq	r9, [r1], -r8
   18c7c:	andeq	r9, r1, r0, ror #6
   18c80:	andeq	r9, r1, r0, lsr #32
   18c84:	andeq	r9, r1, r4, lsl #1
   18c88:	andeq	r9, r1, r8, ror #5
   18c8c:	muleq	r1, r0, r3
   18c90:	mov	r3, #1
   18c94:	str	r3, [sp, #48]	; 0x30
   18c98:	b	18800 <__assert_fail@plt+0x6a8c>
   18c9c:	movw	r3, #54056	; 0xd328
   18ca0:	movt	r3, #3
   18ca4:	mov	r2, #2
   18ca8:	str	r2, [r3, #-3944]	; 0xfffff098
   18cac:	b	18800 <__assert_fail@plt+0x6a8c>
   18cb0:	mov	r3, #1
   18cb4:	str	r3, [r6, #3108]	; 0xc24
   18cb8:	b	18800 <__assert_fail@plt+0x6a8c>
   18cbc:	mov	r3, #1
   18cc0:	strb	r3, [r6, #4080]	; 0xff0
   18cc4:	b	18800 <__assert_fail@plt+0x6a8c>
   18cc8:	movw	r3, #54056	; 0xd328
   18ccc:	movt	r3, #3
   18cd0:	mov	r2, #2
   18cd4:	str	r2, [r3, #-3944]	; 0xfffff098
   18cd8:	cmp	r5, #0
   18cdc:	mvneq	r5, #0
   18ce0:	mov	r3, #0
   18ce4:	strb	r3, [r6, #4024]	; 0xfb8
   18ce8:	strb	r3, [r6, #4044]	; 0xfcc
   18cec:	strb	r3, [r6, #3113]	; 0xc29
   18cf0:	mov	r3, #6
   18cf4:	str	r3, [sp, #28]
   18cf8:	b	18800 <__assert_fail@plt+0x6a8c>
   18cfc:	mov	r3, #2
   18d00:	str	r3, [r6, #20]
   18d04:	b	18800 <__assert_fail@plt+0x6a8c>
   18d08:	mov	r5, #0
   18d0c:	strb	r5, [r9, #204]	; 0xcc
   18d10:	b	18800 <__assert_fail@plt+0x6a8c>
   18d14:	mov	r3, #176	; 0xb0
   18d18:	str	r3, [r6, #3588]	; 0xe04
   18d1c:	str	r3, [r6, #4084]	; 0xff4
   18d20:	mov	r2, #1
   18d24:	mov	r3, #0
   18d28:	ldr	r1, [sp, #40]	; 0x28
   18d2c:	strd	r2, [r1, #-8]
   18d30:	strd	r2, [r9, #216]	; 0xd8
   18d34:	b	18800 <__assert_fail@plt+0x6a8c>
   18d38:	mov	r3, #1
   18d3c:	strb	r3, [r6, #3112]	; 0xc28
   18d40:	b	18800 <__assert_fail@plt+0x6a8c>
   18d44:	mov	r5, #4
   18d48:	b	18800 <__assert_fail@plt+0x6a8c>
   18d4c:	mov	r3, #1
   18d50:	strb	r3, [r6, #3180]	; 0xc6c
   18d54:	mov	r5, #0
   18d58:	b	18800 <__assert_fail@plt+0x6a8c>
   18d5c:	mov	r5, #0
   18d60:	strb	r5, [r9, #205]	; 0xcd
   18d64:	b	18800 <__assert_fail@plt+0x6a8c>
   18d68:	mov	r3, #1
   18d6c:	str	r3, [r6, #20]
   18d70:	b	18800 <__assert_fail@plt+0x6a8c>
   18d74:	mov	r3, #1
   18d78:	str	r3, [sp, #32]
   18d7c:	b	18800 <__assert_fail@plt+0x6a8c>
   18d80:	mov	r3, #1
   18d84:	strb	r3, [r6, #3584]	; 0xe00
   18d88:	b	18800 <__assert_fail@plt+0x6a8c>
   18d8c:	mov	r3, #1
   18d90:	strb	r3, [r6, #3113]	; 0xc29
   18d94:	b	18800 <__assert_fail@plt+0x6a8c>
   18d98:	mov	r3, #5
   18d9c:	str	r3, [sp, #28]
   18da0:	b	18800 <__assert_fail@plt+0x6a8c>
   18da4:	mov	r3, #2
   18da8:	str	r3, [r6, #3108]	; 0xc24
   18dac:	b	18800 <__assert_fail@plt+0x6a8c>
   18db0:	mov	r3, #4
   18db4:	str	r3, [sp, #28]
   18db8:	b	18800 <__assert_fail@plt+0x6a8c>
   18dbc:	movw	r3, #45864	; 0xb328
   18dc0:	movt	r3, #3
   18dc4:	ldr	r0, [r3]
   18dc8:	bl	12534 <__assert_fail@plt+0x7c0>
   18dcc:	subs	r3, r0, #0
   18dd0:	str	r3, [sp, #36]	; 0x24
   18dd4:	bge	18800 <__assert_fail@plt+0x6a8c>
   18dd8:	mov	r2, #5
   18ddc:	movw	r1, #36988	; 0x907c
   18de0:	movt	r1, #2
   18de4:	mov	r0, #0
   18de8:	bl	11984 <dcgettext@plt>
   18dec:	mov	r4, r0
   18df0:	movw	r3, #45864	; 0xb328
   18df4:	movt	r3, #3
   18df8:	ldr	r0, [r3]
   18dfc:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   18e00:	str	r0, [sp]
   18e04:	mov	r3, r4
   18e08:	movw	r2, #37008	; 0x9090
   18e0c:	movt	r2, #2
   18e10:	mov	r1, #0
   18e14:	mov	r0, #2
   18e18:	bl	11a8c <error@plt>
   18e1c:	mov	r5, #3
   18e20:	b	18800 <__assert_fail@plt+0x6a8c>
   18e24:	movw	r3, #54056	; 0xd328
   18e28:	movt	r3, #3
   18e2c:	mov	r2, #1
   18e30:	str	r2, [r3, #-3944]	; 0xfffff098
   18e34:	b	18800 <__assert_fail@plt+0x6a8c>
   18e38:	movw	r0, #37016	; 0x9098
   18e3c:	movt	r0, #2
   18e40:	bl	124fc <__assert_fail@plt+0x788>
   18e44:	movw	r0, #37020	; 0x909c
   18e48:	movt	r0, #2
   18e4c:	bl	124fc <__assert_fail@plt+0x788>
   18e50:	b	18800 <__assert_fail@plt+0x6a8c>
   18e54:	mov	r5, #2
   18e58:	b	18800 <__assert_fail@plt+0x6a8c>
   18e5c:	mov	r3, #1
   18e60:	strb	r3, [r6, #3892]	; 0xf34
   18e64:	b	18800 <__assert_fail@plt+0x6a8c>
   18e68:	movw	r3, #45864	; 0xb328
   18e6c:	movt	r3, #3
   18e70:	ldr	r1, [r3]
   18e74:	cmp	r1, #0
   18e78:	beq	18edc <__assert_fail@plt+0x7168>
   18e7c:	mov	r3, #1
   18e80:	str	r3, [sp, #8]
   18e84:	movw	r3, #45760	; 0xb2c0
   18e88:	movt	r3, #3
   18e8c:	ldr	r3, [r3]
   18e90:	str	r3, [sp, #4]
   18e94:	mov	r3, #4
   18e98:	str	r3, [sp]
   18e9c:	add	r3, r8, #1200	; 0x4b0
   18ea0:	add	r3, r3, #8
   18ea4:	add	r2, r8, #1232	; 0x4d0
   18ea8:	add	r2, r2, #12
   18eac:	movw	r0, #37024	; 0x90a0
   18eb0:	movt	r0, #2
   18eb4:	bl	1adac <__assert_fail@plt+0x9038>
   18eb8:	add	r0, r8, r0, lsl #2
   18ebc:	ldr	r3, [r0, #1208]	; 0x4b8
   18ec0:	cmp	r3, #1
   18ec4:	beq	18edc <__assert_fail@plt+0x7168>
   18ec8:	cmp	r3, #2
   18ecc:	bne	18800 <__assert_fail@plt+0x6a8c>
   18ed0:	bl	1260c <__assert_fail@plt+0x898>
   18ed4:	cmp	r0, #0
   18ed8:	beq	18800 <__assert_fail@plt+0x6a8c>
   18edc:	mov	r3, #3
   18ee0:	str	r3, [r6, #20]
   18ee4:	b	18800 <__assert_fail@plt+0x6a8c>
   18ee8:	mov	r3, #0
   18eec:	strb	r3, [r9, #205]	; 0xcd
   18ef0:	b	18800 <__assert_fail@plt+0x6a8c>
   18ef4:	mov	r3, #2
   18ef8:	str	r3, [r6, #4048]	; 0xfd0
   18efc:	b	18800 <__assert_fail@plt+0x6a8c>
   18f00:	mov	r3, #3
   18f04:	str	r3, [r6, #4048]	; 0xfd0
   18f08:	b	18800 <__assert_fail@plt+0x6a8c>
   18f0c:	movw	r3, #45864	; 0xb328
   18f10:	movt	r3, #3
   18f14:	ldr	r0, [r3]
   18f18:	bl	124fc <__assert_fail@plt+0x788>
   18f1c:	b	18800 <__assert_fail@plt+0x6a8c>
   18f20:	mov	r3, #4
   18f24:	str	r3, [r6, #4048]	; 0xfd0
   18f28:	b	18800 <__assert_fail@plt+0x6a8c>
   18f2c:	mov	sl, #0
   18f30:	b	18800 <__assert_fail@plt+0x6a8c>
   18f34:	mov	sl, #5
   18f38:	b	18800 <__assert_fail@plt+0x6a8c>
   18f3c:	movw	r3, #54056	; 0xd328
   18f40:	movt	r3, #3
   18f44:	mov	r2, #1
   18f48:	strb	r2, [r3, #-3996]	; 0xfffff064
   18f4c:	b	18800 <__assert_fail@plt+0x6a8c>
   18f50:	mov	r3, #3
   18f54:	str	r3, [sp, #28]
   18f58:	b	18800 <__assert_fail@plt+0x6a8c>
   18f5c:	movw	r3, #45864	; 0xb328
   18f60:	movt	r3, #3
   18f64:	ldr	r3, [r3]
   18f68:	str	r3, [sp, #44]	; 0x2c
   18f6c:	mov	r2, #5
   18f70:	movw	r1, #37036	; 0x90ac
   18f74:	movt	r1, #2
   18f78:	mov	r0, #0
   18f7c:	bl	11984 <dcgettext@plt>
   18f80:	mov	r3, #2
   18f84:	str	r3, [sp, #16]
   18f88:	str	r0, [sp, #12]
   18f8c:	movw	r3, #39300	; 0x9984
   18f90:	movt	r3, #2
   18f94:	str	r3, [sp, #8]
   18f98:	mvn	r2, #-2147483648	; 0x80000000
   18f9c:	mov	r3, #0
   18fa0:	strd	r2, [sp]
   18fa4:	mov	r2, #0
   18fa8:	mov	r3, #0
   18fac:	mov	r1, #0
   18fb0:	ldr	r0, [sp, #44]	; 0x2c
   18fb4:	bl	24398 <_obstack_memory_used@@Base+0x3688>
   18fb8:	str	r0, [sp, #44]	; 0x2c
   18fbc:	b	18800 <__assert_fail@plt+0x6a8c>
   18fc0:	mov	r3, #6
   18fc4:	str	r3, [sp, #28]
   18fc8:	b	18800 <__assert_fail@plt+0x6a8c>
   18fcc:	mov	r3, #1
   18fd0:	str	r3, [sp, #28]
   18fd4:	b	18800 <__assert_fail@plt+0x6a8c>
   18fd8:	adds	r5, r5, #0
   18fdc:	movne	r5, #1
   18fe0:	b	18800 <__assert_fail@plt+0x6a8c>
   18fe4:	mov	r3, #1
   18fe8:	strb	r3, [r6, #3120]	; 0xc30
   18fec:	b	18800 <__assert_fail@plt+0x6a8c>
   18ff0:	mov	r0, #8
   18ff4:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   18ff8:	movw	r3, #45864	; 0xb328
   18ffc:	movt	r3, #3
   19000:	ldr	r3, [r3]
   19004:	str	r3, [r0]
   19008:	movw	r3, #54056	; 0xd328
   1900c:	movt	r3, #3
   19010:	ldr	r2, [r3, #-3940]	; 0xfffff09c
   19014:	str	r2, [r0, #4]
   19018:	str	r0, [r3, #-3940]	; 0xfffff09c
   1901c:	b	18800 <__assert_fail@plt+0x6a8c>
   19020:	movw	r1, #45864	; 0xb328
   19024:	movt	r1, #3
   19028:	mov	r3, #1
   1902c:	str	r3, [sp, #8]
   19030:	movw	r3, #45760	; 0xb2c0
   19034:	movt	r3, #3
   19038:	ldr	r3, [r3]
   1903c:	str	r3, [sp, #4]
   19040:	mov	r3, #4
   19044:	str	r3, [sp]
   19048:	add	r3, r8, #1280	; 0x500
   1904c:	add	r3, r3, #4
   19050:	add	r2, r8, #1296	; 0x510
   19054:	add	r2, r2, #12
   19058:	ldr	r1, [r1]
   1905c:	movw	r0, #37056	; 0x90c0
   19060:	movt	r0, #2
   19064:	bl	1adac <__assert_fail@plt+0x9038>
   19068:	add	r0, r8, r0, lsl #2
   1906c:	ldr	r3, [r0, #1284]	; 0x504
   19070:	str	r3, [sp, #28]
   19074:	b	18800 <__assert_fail@plt+0x6a8c>
   19078:	mov	r3, #1
   1907c:	strb	r3, [r6, #3585]	; 0xe01
   19080:	b	18800 <__assert_fail@plt+0x6a8c>
   19084:	movw	r1, #45864	; 0xb328
   19088:	movt	r1, #3
   1908c:	mov	r3, #1
   19090:	str	r3, [sp, #8]
   19094:	movw	r3, #45760	; 0xb2c0
   19098:	movt	r3, #3
   1909c:	ldr	r3, [r3]
   190a0:	str	r3, [sp, #4]
   190a4:	mov	r3, #4
   190a8:	str	r3, [sp]
   190ac:	add	r3, r8, #1328	; 0x530
   190b0:	add	r3, r3, #8
   190b4:	add	r2, r8, #1360	; 0x550
   190b8:	add	r2, r2, #4
   190bc:	ldr	r1, [r1]
   190c0:	movw	r0, #37064	; 0x90c8
   190c4:	movt	r0, #2
   190c8:	bl	1adac <__assert_fail@plt+0x9038>
   190cc:	add	r0, r8, r0, lsl #2
   190d0:	ldr	r3, [r0, #1336]	; 0x538
   190d4:	str	r3, [r6, #3108]	; 0xc24
   190d8:	b	18800 <__assert_fail@plt+0x6a8c>
   190dc:	movw	r1, #45864	; 0xb328
   190e0:	movt	r1, #3
   190e4:	mov	r3, #1
   190e8:	str	r3, [sp, #8]
   190ec:	movw	r3, #45760	; 0xb2c0
   190f0:	movt	r3, #3
   190f4:	ldr	r3, [r3]
   190f8:	str	r3, [sp, #4]
   190fc:	mov	r3, #4
   19100:	str	r3, [sp]
   19104:	add	r3, r8, #1392	; 0x570
   19108:	add	r3, r3, #4
   1910c:	add	r2, r8, #1424	; 0x590
   19110:	ldr	r1, [r1]
   19114:	movw	r0, #37072	; 0x90d0
   19118:	movt	r0, #2
   1911c:	bl	1adac <__assert_fail@plt+0x9038>
   19120:	add	r0, r8, r0, lsl #2
   19124:	ldr	r5, [r0, #1396]	; 0x574
   19128:	b	18800 <__assert_fail@plt+0x6a8c>
   1912c:	mov	r5, #0
   19130:	movw	r7, #36896	; 0x9020
   19134:	movt	r7, #2
   19138:	b	18800 <__assert_fail@plt+0x6a8c>
   1913c:	movw	r3, #45864	; 0xb328
   19140:	movt	r3, #3
   19144:	ldr	r1, [r3]
   19148:	cmp	r1, #0
   1914c:	moveq	r0, #1
   19150:	beq	191ac <__assert_fail@plt+0x7438>
   19154:	mov	r3, #1
   19158:	str	r3, [sp, #8]
   1915c:	movw	r3, #45760	; 0xb2c0
   19160:	movt	r3, #3
   19164:	ldr	r3, [r3]
   19168:	str	r3, [sp, #4]
   1916c:	mov	r3, #4
   19170:	str	r3, [sp]
   19174:	add	r3, r8, #1200	; 0x4b0
   19178:	add	r3, r3, #8
   1917c:	add	r2, r8, #1232	; 0x4d0
   19180:	add	r2, r2, #12
   19184:	movw	r0, #37084	; 0x90dc
   19188:	movt	r0, #2
   1918c:	bl	1adac <__assert_fail@plt+0x9038>
   19190:	add	r0, r8, r0, lsl #2
   19194:	ldr	r0, [r0, #1208]	; 0x4b8
   19198:	cmp	r0, #1
   1919c:	beq	191ac <__assert_fail@plt+0x7438>
   191a0:	cmp	r0, #2
   191a4:	movne	r0, #0
   191a8:	beq	191b8 <__assert_fail@plt+0x7444>
   191ac:	and	r0, r0, #1
   191b0:	strb	r0, [r6, #4024]	; 0xfb8
   191b4:	b	18800 <__assert_fail@plt+0x6a8c>
   191b8:	bl	1260c <__assert_fail@plt+0x898>
   191bc:	b	191ac <__assert_fail@plt+0x7438>
   191c0:	movw	r3, #45864	; 0xb328
   191c4:	movt	r3, #3
   191c8:	ldr	r1, [r3]
   191cc:	cmp	r1, #0
   191d0:	moveq	r0, #1
   191d4:	beq	19230 <__assert_fail@plt+0x74bc>
   191d8:	mov	r3, #1
   191dc:	str	r3, [sp, #8]
   191e0:	movw	r3, #45760	; 0xb2c0
   191e4:	movt	r3, #3
   191e8:	ldr	r3, [r3]
   191ec:	str	r3, [sp, #4]
   191f0:	mov	r3, #4
   191f4:	str	r3, [sp]
   191f8:	add	r3, r8, #1200	; 0x4b0
   191fc:	add	r3, r3, #8
   19200:	add	r2, r8, #1232	; 0x4d0
   19204:	add	r2, r2, #12
   19208:	movw	r0, #37092	; 0x90e4
   1920c:	movt	r0, #2
   19210:	bl	1adac <__assert_fail@plt+0x9038>
   19214:	add	r0, r8, r0, lsl #2
   19218:	ldr	r0, [r0, #1208]	; 0x4b8
   1921c:	cmp	r0, #1
   19220:	beq	19230 <__assert_fail@plt+0x74bc>
   19224:	cmp	r0, #2
   19228:	movne	r0, #0
   1922c:	beq	1923c <__assert_fail@plt+0x74c8>
   19230:	and	r0, r0, #1
   19234:	strb	r0, [r6, #4044]	; 0xfcc
   19238:	b	18800 <__assert_fail@plt+0x6a8c>
   1923c:	bl	1260c <__assert_fail@plt+0x898>
   19240:	b	19230 <__assert_fail@plt+0x74bc>
   19244:	movw	r1, #45864	; 0xb328
   19248:	movt	r1, #3
   1924c:	mov	r3, #1
   19250:	str	r3, [sp, #8]
   19254:	movw	r3, #45760	; 0xb2c0
   19258:	movt	r3, #3
   1925c:	ldr	r3, [r3]
   19260:	str	r3, [sp, #4]
   19264:	mov	r3, #4
   19268:	str	r3, [sp]
   1926c:	add	r3, r8, #1456	; 0x5b0
   19270:	add	r2, r8, #1472	; 0x5c0
   19274:	ldr	r1, [r1]
   19278:	movw	r0, #37104	; 0x90f0
   1927c:	movt	r0, #2
   19280:	bl	1adac <__assert_fail@plt+0x9038>
   19284:	add	r0, r8, r0, lsl #2
   19288:	ldr	r3, [r0, #1456]	; 0x5b0
   1928c:	str	r3, [r6, #20]
   19290:	b	18800 <__assert_fail@plt+0x6a8c>
   19294:	movw	sl, #39556	; 0x9a84
   19298:	movt	sl, #2
   1929c:	movw	r1, #45864	; 0xb328
   192a0:	movt	r1, #3
   192a4:	mov	r3, #1
   192a8:	str	r3, [sp, #8]
   192ac:	movw	r3, #45760	; 0xb2c0
   192b0:	movt	r3, #3
   192b4:	ldr	r3, [r3]
   192b8:	str	r3, [sp, #4]
   192bc:	mov	r3, #4
   192c0:	str	r3, [sp]
   192c4:	mov	r3, sl
   192c8:	movw	r2, #39596	; 0x9aac
   192cc:	movt	r2, #2
   192d0:	ldr	r1, [r1]
   192d4:	movw	r0, #37124	; 0x9104
   192d8:	movt	r0, #2
   192dc:	bl	1adac <__assert_fail@plt+0x9038>
   192e0:	ldr	sl, [sl, r0, lsl #2]
   192e4:	b	18800 <__assert_fail@plt+0x6a8c>
   192e8:	movw	r3, #45864	; 0xb328
   192ec:	movt	r3, #3
   192f0:	ldr	r7, [r3]
   192f4:	b	18800 <__assert_fail@plt+0x6a8c>
   192f8:	mov	r3, #0
   192fc:	str	r3, [sp, #32]
   19300:	b	18800 <__assert_fail@plt+0x6a8c>
   19304:	movw	r3, #45864	; 0xb328
   19308:	movt	r3, #3
   1930c:	ldr	r2, [sp, #52]	; 0x34
   19310:	add	r1, r6, #3584	; 0xe00
   19314:	add	r1, r1, #4
   19318:	ldr	r0, [r3]
   1931c:	bl	1de7c <__assert_fail@plt+0xc108>
   19320:	cmp	r0, #0
   19324:	bne	19340 <__assert_fail@plt+0x75cc>
   19328:	ldr	r3, [r6, #3588]	; 0xe04
   1932c:	str	r3, [r6, #4084]	; 0xff4
   19330:	ldr	r3, [sp, #40]	; 0x28
   19334:	ldrd	r2, [r3, #-8]
   19338:	strd	r2, [r9, #216]	; 0xd8
   1933c:	b	18800 <__assert_fail@plt+0x6a8c>
   19340:	movw	r3, #45864	; 0xb328
   19344:	movt	r3, #3
   19348:	ldr	r3, [r3]
   1934c:	str	r3, [sp]
   19350:	ldr	r3, [pc, #256]	; 19458 <__assert_fail@plt+0x76e4>
   19354:	mov	r2, #0
   19358:	ldr	r1, [sp, #64]	; 0x40
   1935c:	bl	24614 <_obstack_memory_used@@Base+0x3904>
   19360:	mov	r3, #144	; 0x90
   19364:	str	r3, [r6, #3588]	; 0xe04
   19368:	str	r3, [r6, #4084]	; 0xff4
   1936c:	mov	r2, #1
   19370:	mov	r3, #0
   19374:	ldr	r1, [sp, #40]	; 0x28
   19378:	strd	r2, [r1, #-8]
   1937c:	strd	r2, [r9, #216]	; 0xd8
   19380:	b	18800 <__assert_fail@plt+0x6a8c>
   19384:	mov	r3, #1
   19388:	strb	r3, [r6, #3600]	; 0xe10
   1938c:	b	18800 <__assert_fail@plt+0x6a8c>
   19390:	mov	r3, #0
   19394:	strb	r3, [r9, #210]	; 0xd2
   19398:	subs	r5, r5, r3
   1939c:	movne	r5, #1
   193a0:	strb	r3, [r6, #4024]	; 0xfb8
   193a4:	mov	sl, r3
   193a8:	str	r3, [sp, #32]
   193ac:	b	18800 <__assert_fail@plt+0x6a8c>
   193b0:	mov	r0, #0
   193b4:	bl	18070 <__assert_fail@plt+0x62fc>
   193b8:	movw	r3, #45860	; 0xb324
   193bc:	movt	r3, #3
   193c0:	ldr	r0, [r3]
   193c4:	movw	r3, #45752	; 0xb2b8
   193c8:	movt	r3, #3
   193cc:	ldr	r1, [r3]
   193d0:	cmp	r1, #1
   193d4:	beq	19434 <__assert_fail@plt+0x76c0>
   193d8:	movw	r3, #38616	; 0x96d8
   193dc:	movt	r3, #2
   193e0:	movw	r2, #29032	; 0x7168
   193e4:	movt	r2, #2
   193e8:	cmp	r1, #2
   193ec:	moveq	r1, r3
   193f0:	movne	r1, r2
   193f4:	movw	r3, #45756	; 0xb2bc
   193f8:	movt	r3, #3
   193fc:	mov	r4, #0
   19400:	str	r4, [sp, #8]
   19404:	movw	r2, #37140	; 0x9114
   19408:	movt	r2, #2
   1940c:	str	r2, [sp, #4]
   19410:	movw	r2, #37156	; 0x9124
   19414:	movt	r2, #2
   19418:	str	r2, [sp]
   1941c:	ldr	r3, [r3]
   19420:	movw	r2, #36724	; 0x8f74
   19424:	movt	r2, #2
   19428:	bl	23de8 <_obstack_memory_used@@Base+0x30d8>
   1942c:	mov	r0, r4
   19430:	bl	11b70 <exit@plt>
   19434:	movw	r1, #29028	; 0x7164
   19438:	movt	r1, #2
   1943c:	b	193f4 <__assert_fail@plt+0x7680>
   19440:	mov	r0, #2
   19444:	bl	18070 <__assert_fail@plt+0x62fc>
   19448:	mov	sl, #7
   1944c:	b	18800 <__assert_fail@plt+0x6a8c>
   19450:	mov	r5, #0
   19454:	b	18800 <__assert_fail@plt+0x6a8c>
   19458:	andeq	r5, r2, r8, lsr sl
   1945c:	andeq	ip, r3, r0, asr #2
   19460:	andeq	ip, r3, r0, ror #6
   19464:	andeq	r5, r2, r4, lsr #20
   19468:	andeq	ip, r3, r3, asr r1
   1946c:	ldr	r3, [pc, #-24]	; 1945c <__assert_fail@plt+0x76e8>
   19470:	ldrd	r2, [r3, #-8]
   19474:	orrs	r3, r2, r3
   19478:	beq	19868 <__assert_fail@plt+0x7af4>
   1947c:	cmp	r5, #0
   19480:	blt	19908 <__assert_fail@plt+0x7b94>
   19484:	movw	r3, #45872	; 0xb330
   19488:	movt	r3, #3
   1948c:	str	r5, [r3, #3116]	; 0xc2c
   19490:	sub	r5, r5, #2
   19494:	cmp	r5, #2
   19498:	bhi	19934 <__assert_fail@plt+0x7bc0>
   1949c:	ldr	r3, [sp, #36]	; 0x24
   194a0:	cmp	r3, #0
   194a4:	blt	19980 <__assert_fail@plt+0x7c0c>
   194a8:	movw	r2, #45872	; 0xb330
   194ac:	movt	r2, #3
   194b0:	ldr	r0, [sp, #36]	; 0x24
   194b4:	str	r0, [r2, #3188]	; 0xc74
   194b8:	mov	r3, #3
   194bc:	udiv	r3, r0, r3
   194c0:	add	r1, r3, r3, lsl #1
   194c4:	cmp	r0, r1
   194c8:	addne	r3, r3, #1
   194cc:	str	r3, [r2, #3604]	; 0xe14
   194d0:	ldr	r3, [r2, #3116]	; 0xc2c
   194d4:	sub	r3, r3, #2
   194d8:	cmp	r3, #2
   194dc:	bhi	194f8 <__assert_fail@plt+0x7784>
   194e0:	ldr	r2, [sp, #44]	; 0x2c
   194e4:	cmp	r2, #0
   194e8:	blt	19a30 <__assert_fail@plt+0x7cbc>
   194ec:	movw	r3, #45872	; 0xb330
   194f0:	movt	r3, #3
   194f4:	str	r2, [r3, #3888]	; 0xf30
   194f8:	ldr	r3, [sp, #32]
   194fc:	cmp	r3, #0
   19500:	blt	19adc <__assert_fail@plt+0x7d68>
   19504:	ldr	r3, [sp, #32]
   19508:	adds	r2, r3, #0
   1950c:	movne	r2, #1
   19510:	movw	r3, #45872	; 0xb330
   19514:	movt	r3, #3
   19518:	strb	r2, [r3, #3181]	; 0xc6d
   1951c:	cmp	sl, #0
   19520:	blt	19b04 <__assert_fail@plt+0x7d90>
   19524:	mov	r1, sl
   19528:	mov	r0, #0
   1952c:	bl	228fc <_obstack_memory_used@@Base+0x1bec>
   19530:	mov	r0, #0
   19534:	bl	228e4 <_obstack_memory_used@@Base+0x1bd4>
   19538:	mov	r6, r0
   1953c:	movw	r3, #45872	; 0xb330
   19540:	movt	r3, #3
   19544:	ldr	r3, [r3, #3116]	; 0xc2c
   19548:	cmp	r3, #0
   1954c:	beq	19578 <__assert_fail@plt+0x7804>
   19550:	sub	r3, r3, #2
   19554:	cmp	r3, #1
   19558:	movhi	r3, #0
   1955c:	bhi	1958c <__assert_fail@plt+0x7818>
   19560:	movw	r3, #45872	; 0xb330
   19564:	movt	r3, #3
   19568:	ldr	r3, [r3, #3188]	; 0xc74
   1956c:	cmp	r3, #0
   19570:	moveq	r3, #0
   19574:	beq	1958c <__assert_fail@plt+0x7818>
   19578:	bic	r3, r6, #2
   1957c:	cmp	r6, #6
   19580:	cmpne	r3, #1
   19584:	moveq	r3, #1
   19588:	movne	r3, #0
   1958c:	movw	r5, #45872	; 0xb330
   19590:	movt	r5, #3
   19594:	strb	r3, [r5, #3182]	; 0xc6e
   19598:	mov	r0, #0
   1959c:	bl	22898 <_obstack_memory_used@@Base+0x1b88>
   195a0:	str	r0, [r5, #3176]	; 0xc68
   195a4:	cmp	r6, #7
   195a8:	beq	19bb4 <__assert_fail@plt+0x7e40>
   195ac:	movw	r3, #45872	; 0xb330
   195b0:	movt	r3, #3
   195b4:	ldr	r3, [r3, #20]
   195b8:	cmp	r3, #1
   195bc:	bls	19600 <__assert_fail@plt+0x788c>
   195c0:	sub	r3, r3, #2
   195c4:	movw	r2, #37420	; 0x922c
   195c8:	movt	r2, #2
   195cc:	add	r5, r3, r2
   195d0:	ldrb	r1, [r2, r3]
   195d4:	cmp	r1, #0
   195d8:	beq	19600 <__assert_fail@plt+0x788c>
   195dc:	movw	r6, #45872	; 0xb330
   195e0:	movt	r6, #3
   195e4:	mov	r8, #1
   195e8:	mov	r2, r8
   195ec:	ldr	r0, [r6, #3176]	; 0xc68
   195f0:	bl	22914 <_obstack_memory_used@@Base+0x1c04>
   195f4:	ldrb	r1, [r5, #1]!
   195f8:	cmp	r1, #0
   195fc:	bne	195e8 <__assert_fail@plt+0x7874>
   19600:	mov	r0, #0
   19604:	bl	22898 <_obstack_memory_used@@Base+0x1b88>
   19608:	movw	r3, #54056	; 0xd328
   1960c:	movt	r3, #3
   19610:	str	r0, [r3, #-3992]	; 0xfffff068
   19614:	mov	r2, #1
   19618:	mov	r1, #58	; 0x3a
   1961c:	bl	22914 <_obstack_memory_used@@Base+0x1c04>
   19620:	movw	r2, #45872	; 0xb330
   19624:	movt	r2, #3
   19628:	ldr	r1, [r2, #3116]	; 0xc2c
   1962c:	ldrb	r3, [r2, #4044]	; 0xfcc
   19630:	eor	r3, r3, #1
   19634:	cmp	r1, #0
   19638:	movne	r3, #0
   1963c:	andeq	r3, r3, #1
   19640:	ldrb	r0, [r2, #3892]	; 0xf34
   19644:	and	r3, r3, r0
   19648:	strb	r3, [r2, #3892]	; 0xf34
   1964c:	movw	r2, #45520	; 0xb1d0
   19650:	movt	r2, #3
   19654:	ldrb	r2, [r2, #210]	; 0xd2
   19658:	cmp	r2, r3
   1965c:	bcc	19bc4 <__assert_fail@plt+0x7e50>
   19660:	ldr	r3, [sp, #28]
   19664:	cmp	r3, #0
   19668:	ldrge	r2, [sp, #28]
   1966c:	blt	19be8 <__assert_fail@plt+0x7e74>
   19670:	movw	r3, #45872	; 0xb330
   19674:	movt	r3, #3
   19678:	str	r2, [r3, #3124]	; 0xc34
   1967c:	cmp	r1, #0
   19680:	beq	1a8b4 <__assert_fail@plt+0x8b40>
   19684:	movw	r3, #45848	; 0xb318
   19688:	movt	r3, #3
   1968c:	ldr	r5, [r3]
   19690:	movw	r3, #45872	; 0xb330
   19694:	movt	r3, #3
   19698:	ldrb	r3, [r3, #4024]	; 0xfb8
   1969c:	cmp	r3, #0
   196a0:	bne	19e58 <__assert_fail@plt+0x80e4>
   196a4:	movw	r3, #45872	; 0xb330
   196a8:	movt	r3, #3
   196ac:	ldrb	r3, [r3, #3585]	; 0xe01
   196b0:	cmp	r3, #0
   196b4:	beq	196c8 <__assert_fail@plt+0x7954>
   196b8:	movw	r3, #45872	; 0xb330
   196bc:	movt	r3, #3
   196c0:	mov	r2, #1
   196c4:	strb	r2, [r3, #4052]	; 0xfd4
   196c8:	movw	r3, #45872	; 0xb330
   196cc:	movt	r3, #3
   196d0:	ldr	r3, [r3, #4048]	; 0xfd0
   196d4:	cmp	r3, #0
   196d8:	bne	19730 <__assert_fail@plt+0x79bc>
   196dc:	movw	r3, #45872	; 0xb330
   196e0:	movt	r3, #3
   196e4:	ldrb	r3, [r3, #4080]	; 0xff0
   196e8:	cmp	r3, #0
   196ec:	movne	r2, #1
   196f0:	bne	19724 <__assert_fail@plt+0x79b0>
   196f4:	movw	r3, #45872	; 0xb330
   196f8:	movt	r3, #3
   196fc:	ldr	r3, [r3, #20]
   19700:	cmp	r3, #3
   19704:	moveq	r2, #1
   19708:	beq	19724 <__assert_fail@plt+0x79b0>
   1970c:	movw	r3, #45872	; 0xb330
   19710:	movt	r3, #3
   19714:	ldr	r3, [r3, #3116]	; 0xc2c
   19718:	cmp	r3, #0
   1971c:	moveq	r2, #1
   19720:	movne	r2, #3
   19724:	movw	r3, #45872	; 0xb330
   19728:	movt	r3, #3
   1972c:	str	r2, [r3, #4048]	; 0xfd0
   19730:	movw	r3, #54056	; 0xd328
   19734:	movt	r3, #3
   19738:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   1973c:	cmp	r3, #0
   19740:	beq	197a4 <__assert_fail@plt+0x7a30>
   19744:	movw	r3, #9444	; 0x24e4
   19748:	movt	r3, #1
   1974c:	str	r3, [sp]
   19750:	movw	r3, #7832	; 0x1e98
   19754:	movt	r3, #1
   19758:	movw	r2, #7792	; 0x1e70
   1975c:	movt	r2, #1
   19760:	mov	r1, #0
   19764:	mov	r0, #30
   19768:	bl	1ccec <__assert_fail@plt+0xaf78>
   1976c:	movw	r3, #45872	; 0xb330
   19770:	movt	r3, #3
   19774:	str	r0, [r3, #3616]	; 0xe20
   19778:	cmp	r0, #0
   1977c:	beq	1a2a0 <__assert_fail@plt+0x852c>
   19780:	movw	r3, #49664	; 0xc200
   19784:	movt	r3, #1
   19788:	str	r3, [sp]
   1978c:	movw	r3, #19900	; 0x4dbc
   19790:	movt	r3, #2
   19794:	mov	r2, #0
   19798:	mov	r1, r2
   1979c:	ldr	r0, [pc, #-836]	; 19460 <__assert_fail@plt+0x76ec>
   197a0:	bl	20acc <_obstack_begin@@Base>
   197a4:	movw	r0, #37804	; 0x93ac
   197a8:	movt	r0, #2
   197ac:	bl	11ac8 <getenv@plt>
   197b0:	bl	233e4 <_obstack_memory_used@@Base+0x26d4>
   197b4:	movw	r3, #45872	; 0xb330
   197b8:	movt	r3, #3
   197bc:	str	r0, [r3, #4088]	; 0xff8
   197c0:	ldr	r3, [r3, #3124]	; 0xc34
   197c4:	sub	r3, r3, #3
   197c8:	bics	r3, r3, #2
   197cc:	beq	1a7a0 <__assert_fail@plt+0x8a2c>
   197d0:	movw	r3, #45872	; 0xb330
   197d4:	movt	r3, #3
   197d8:	ldr	r3, [r3, #3116]	; 0xc2c
   197dc:	cmp	r3, #0
   197e0:	beq	1a7a0 <__assert_fail@plt+0x8a2c>
   197e4:	movw	r3, #45872	; 0xb330
   197e8:	movt	r3, #3
   197ec:	ldrb	r3, [r3, #3600]	; 0xe10
   197f0:	cmp	r3, #0
   197f4:	bne	1a7a0 <__assert_fail@plt+0x8a2c>
   197f8:	movw	r3, #45872	; 0xb330
   197fc:	movt	r3, #3
   19800:	ldrb	r2, [r3, #3113]	; 0xc29
   19804:	strb	r2, [r3, #4045]	; 0xfcd
   19808:	cmp	r2, #0
   1980c:	bne	1a2a4 <__assert_fail@plt+0x8530>
   19810:	movw	r3, #54056	; 0xd328
   19814:	movt	r3, #3
   19818:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   1981c:	cmp	r3, #0
   19820:	movne	r2, #1
   19824:	bne	1a7b4 <__assert_fail@plt+0x8a40>
   19828:	movw	r3, #45872	; 0xb330
   1982c:	movt	r3, #3
   19830:	ldrb	r3, [r3, #4024]	; 0xfb8
   19834:	cmp	r3, #0
   19838:	movne	r2, #1
   1983c:	bne	1a7b4 <__assert_fail@plt+0x8a40>
   19840:	movw	r3, #45872	; 0xb330
   19844:	movt	r3, #3
   19848:	ldr	r3, [r3, #20]
   1984c:	cmp	r3, #0
   19850:	movne	r2, #1
   19854:	bne	1a7b4 <__assert_fail@plt+0x8a40>
   19858:	movw	r3, #45872	; 0xb330
   1985c:	movt	r3, #3
   19860:	ldrb	r2, [r3, #3585]	; 0xe01
   19864:	b	1a7b4 <__assert_fail@plt+0x8a40>
   19868:	movw	r0, #37176	; 0x9138
   1986c:	movt	r0, #2
   19870:	bl	11ac8 <getenv@plt>
   19874:	mov	r6, r0
   19878:	movw	r1, #45872	; 0xb330
   1987c:	movt	r1, #3
   19880:	add	r2, r1, #3584	; 0xe00
   19884:	add	r2, r2, #8
   19888:	add	r1, r1, #3584	; 0xe00
   1988c:	add	r1, r1, #4
   19890:	bl	1de7c <__assert_fail@plt+0xc108>
   19894:	cmp	r6, #0
   19898:	beq	198f0 <__assert_fail@plt+0x7b7c>
   1989c:	movw	r3, #45872	; 0xb330
   198a0:	movt	r3, #3
   198a4:	ldr	r2, [r3, #3588]	; 0xe04
   198a8:	str	r2, [r3, #4084]	; 0xff4
   198ac:	movw	r1, #45520	; 0xb1d0
   198b0:	movt	r1, #3
   198b4:	add	r3, r3, #3600	; 0xe10
   198b8:	ldrd	r2, [r3, #-8]
   198bc:	strd	r2, [r1, #216]	; 0xd8
   198c0:	ldr	r3, [sp, #48]	; 0x30
   198c4:	cmp	r3, #0
   198c8:	beq	1947c <__assert_fail@plt+0x7708>
   198cc:	movw	r3, #45872	; 0xb330
   198d0:	movt	r3, #3
   198d4:	mov	r2, #0
   198d8:	str	r2, [r3, #3588]	; 0xe04
   198dc:	add	r3, r3, #3600	; 0xe10
   198e0:	mov	r0, #1024	; 0x400
   198e4:	mov	r1, #0
   198e8:	strd	r0, [r3, #-8]
   198ec:	b	1947c <__assert_fail@plt+0x7708>
   198f0:	movw	r0, #37192	; 0x9148
   198f4:	movt	r0, #2
   198f8:	bl	11ac8 <getenv@plt>
   198fc:	cmp	r0, #0
   19900:	bne	1989c <__assert_fail@plt+0x7b28>
   19904:	b	198c0 <__assert_fail@plt+0x7b4c>
   19908:	movw	r3, #45752	; 0xb2b8
   1990c:	movt	r3, #3
   19910:	ldr	r3, [r3]
   19914:	cmp	r3, #1
   19918:	beq	1995c <__assert_fail@plt+0x7be8>
   1991c:	cmp	r3, #2
   19920:	movne	r2, #0
   19924:	beq	1996c <__assert_fail@plt+0x7bf8>
   19928:	movw	r3, #45872	; 0xb330
   1992c:	movt	r3, #3
   19930:	str	r2, [r3, #3116]	; 0xc2c
   19934:	movw	r3, #45872	; 0xb330
   19938:	movt	r3, #3
   1993c:	ldrb	r3, [r3, #4024]	; 0xfb8
   19940:	cmp	r3, #0
   19944:	bne	1949c <__assert_fail@plt+0x7728>
   19948:	ldr	r3, [sp, #36]	; 0x24
   1994c:	cmp	r3, #0
   19950:	movlt	r3, #80	; 0x50
   19954:	str	r3, [sp, #36]	; 0x24
   19958:	b	194a8 <__assert_fail@plt+0x7734>
   1995c:	bl	1260c <__assert_fail@plt+0x898>
   19960:	cmp	r0, #0
   19964:	moveq	r2, #1
   19968:	beq	19928 <__assert_fail@plt+0x7bb4>
   1996c:	movw	r3, #45872	; 0xb330
   19970:	movt	r3, #3
   19974:	mov	r2, #2
   19978:	str	r2, [r3, #3116]	; 0xc2c
   1997c:	b	1949c <__assert_fail@plt+0x7728>
   19980:	bl	1260c <__assert_fail@plt+0x898>
   19984:	cmp	r0, #0
   19988:	bne	199b8 <__assert_fail@plt+0x7c44>
   1998c:	movw	r0, #37992	; 0x9468
   19990:	movt	r0, #2
   19994:	bl	11ac8 <getenv@plt>
   19998:	subs	r5, r0, #0
   1999c:	beq	199ac <__assert_fail@plt+0x7c38>
   199a0:	ldrb	r3, [r5]
   199a4:	cmp	r3, #0
   199a8:	bne	199e4 <__assert_fail@plt+0x7c70>
   199ac:	mov	r3, #80	; 0x50
   199b0:	str	r3, [sp, #36]	; 0x24
   199b4:	b	194a8 <__assert_fail@plt+0x7734>
   199b8:	add	r2, sp, #64	; 0x40
   199bc:	movw	r1, #21523	; 0x5413
   199c0:	mov	r0, #1
   199c4:	bl	11a38 <ioctl@plt>
   199c8:	cmp	r0, #0
   199cc:	blt	1998c <__assert_fail@plt+0x7c18>
   199d0:	ldrh	r3, [sp, #66]	; 0x42
   199d4:	cmp	r3, #0
   199d8:	strne	r3, [sp, #36]	; 0x24
   199dc:	bne	194a8 <__assert_fail@plt+0x7734>
   199e0:	b	1998c <__assert_fail@plt+0x7c18>
   199e4:	mov	r0, r5
   199e8:	bl	12534 <__assert_fail@plt+0x7c0>
   199ec:	subs	r3, r0, #0
   199f0:	str	r3, [sp, #36]	; 0x24
   199f4:	bge	194a8 <__assert_fail@plt+0x7734>
   199f8:	mov	r2, #5
   199fc:	movw	r1, #37204	; 0x9154
   19a00:	movt	r1, #2
   19a04:	mov	r0, #0
   19a08:	bl	11984 <dcgettext@plt>
   19a0c:	mov	r6, r0
   19a10:	mov	r0, r5
   19a14:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   19a18:	mov	r3, r0
   19a1c:	mov	r2, r6
   19a20:	mov	r1, #0
   19a24:	mov	r0, r1
   19a28:	bl	11a8c <error@plt>
   19a2c:	b	199ac <__assert_fail@plt+0x7c38>
   19a30:	movw	r3, #45872	; 0xb330
   19a34:	movt	r3, #3
   19a38:	mov	r2, #8
   19a3c:	str	r2, [r3, #3888]	; 0xf30
   19a40:	movw	r0, #37264	; 0x9190
   19a44:	movt	r0, #2
   19a48:	bl	11ac8 <getenv@plt>
   19a4c:	subs	r5, r0, #0
   19a50:	beq	194f8 <__assert_fail@plt+0x7784>
   19a54:	movw	r3, #39300	; 0x9984
   19a58:	movt	r3, #2
   19a5c:	str	r3, [sp]
   19a60:	add	r3, sp, #64	; 0x40
   19a64:	mov	r2, #0
   19a68:	mov	r1, r2
   19a6c:	mov	r0, r5
   19a70:	bl	247f8 <_obstack_memory_used@@Base+0x3ae8>
   19a74:	cmp	r0, #0
   19a78:	bne	19aa4 <__assert_fail@plt+0x7d30>
   19a7c:	ldrd	r8, [sp, #64]	; 0x40
   19a80:	mvn	r0, #0
   19a84:	mov	r1, #0
   19a88:	cmp	r9, r1
   19a8c:	cmpeq	r8, r0
   19a90:	bhi	19aa4 <__assert_fail@plt+0x7d30>
   19a94:	movw	r3, #45872	; 0xb330
   19a98:	movt	r3, #3
   19a9c:	str	r8, [r3, #3888]	; 0xf30
   19aa0:	b	194f8 <__assert_fail@plt+0x7784>
   19aa4:	mov	r2, #5
   19aa8:	movw	r1, #37272	; 0x9198
   19aac:	movt	r1, #2
   19ab0:	mov	r0, #0
   19ab4:	bl	11984 <dcgettext@plt>
   19ab8:	mov	r6, r0
   19abc:	mov	r0, r5
   19ac0:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   19ac4:	mov	r3, r0
   19ac8:	mov	r2, r6
   19acc:	mov	r1, #0
   19ad0:	mov	r0, r1
   19ad4:	bl	11a8c <error@plt>
   19ad8:	b	194f8 <__assert_fail@plt+0x7784>
   19adc:	movw	r3, #45752	; 0xb2b8
   19ae0:	movt	r3, #3
   19ae4:	ldr	r3, [r3]
   19ae8:	cmp	r3, #1
   19aec:	movne	r0, #0
   19af0:	beq	19afc <__assert_fail@plt+0x7d88>
   19af4:	and	r2, r0, #1
   19af8:	b	19510 <__assert_fail@plt+0x779c>
   19afc:	bl	1260c <__assert_fail@plt+0x898>
   19b00:	b	19af4 <__assert_fail@plt+0x7d80>
   19b04:	movw	r0, #37336	; 0x91d8
   19b08:	movt	r0, #2
   19b0c:	bl	11ac8 <getenv@plt>
   19b10:	subs	r5, r0, #0
   19b14:	beq	19b50 <__assert_fail@plt+0x7ddc>
   19b18:	mov	r3, #4
   19b1c:	movw	r2, #39556	; 0x9a84
   19b20:	movt	r2, #2
   19b24:	movw	r1, #39596	; 0x9aac
   19b28:	movt	r1, #2
   19b2c:	mov	r0, r5
   19b30:	bl	1aa70 <__assert_fail@plt+0x8cfc>
   19b34:	cmp	r0, #0
   19b38:	blt	19b7c <__assert_fail@plt+0x7e08>
   19b3c:	movw	r3, #39556	; 0x9a84
   19b40:	movt	r3, #2
   19b44:	ldr	sl, [r3, r0, lsl #2]
   19b48:	cmp	sl, #0
   19b4c:	bge	19524 <__assert_fail@plt+0x77b0>
   19b50:	movw	r3, #45752	; 0xb2b8
   19b54:	movt	r3, #3
   19b58:	ldr	r3, [r3]
   19b5c:	cmp	r3, #1
   19b60:	movne	sl, #7
   19b64:	bne	19524 <__assert_fail@plt+0x77b0>
   19b68:	bl	1260c <__assert_fail@plt+0x898>
   19b6c:	cmp	r0, #0
   19b70:	movne	sl, #3
   19b74:	bne	19524 <__assert_fail@plt+0x77b0>
   19b78:	b	19530 <__assert_fail@plt+0x77bc>
   19b7c:	mov	r2, #5
   19b80:	movw	r1, #37352	; 0x91e8
   19b84:	movt	r1, #2
   19b88:	mov	r0, #0
   19b8c:	bl	11984 <dcgettext@plt>
   19b90:	mov	r6, r0
   19b94:	mov	r0, r5
   19b98:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   19b9c:	mov	r3, r0
   19ba0:	mov	r2, r6
   19ba4:	mov	r1, #0
   19ba8:	mov	r0, r1
   19bac:	bl	11a8c <error@plt>
   19bb0:	b	19b50 <__assert_fail@plt+0x7ddc>
   19bb4:	mov	r2, #1
   19bb8:	mov	r1, #32
   19bbc:	bl	22914 <_obstack_memory_used@@Base+0x1c04>
   19bc0:	b	195ac <__assert_fail@plt+0x7838>
   19bc4:	mov	r2, #5
   19bc8:	movw	r1, #37428	; 0x9234
   19bcc:	movt	r1, #2
   19bd0:	mov	r0, #0
   19bd4:	bl	11984 <dcgettext@plt>
   19bd8:	mov	r2, r0
   19bdc:	mov	r1, #0
   19be0:	mov	r0, #2
   19be4:	bl	11a8c <error@plt>
   19be8:	cmp	r1, #0
   19bec:	beq	1a8a4 <__assert_fail@plt+0x8b30>
   19bf0:	movw	r3, #45872	; 0xb330
   19bf4:	movt	r3, #3
   19bf8:	ldr	r3, [r3, #3108]	; 0xc24
   19bfc:	sub	r3, r3, #1
   19c00:	cmp	r3, #2
   19c04:	movhi	r2, #0
   19c08:	movls	r2, #5
   19c0c:	b	19670 <__assert_fail@plt+0x78fc>
   19c10:	movw	r0, #37464	; 0x9258
   19c14:	movt	r0, #2
   19c18:	bl	11ac8 <getenv@plt>
   19c1c:	subs	r7, r0, #0
   19c20:	bne	1a8bc <__assert_fail@plt+0x8b48>
   19c24:	movw	r7, #36908	; 0x902c
   19c28:	movt	r7, #2
   19c2c:	b	19c4c <__assert_fail@plt+0x7ed8>
   19c30:	movw	r3, #45848	; 0xb318
   19c34:	movt	r3, #3
   19c38:	ldr	r5, [r3]
   19c3c:	b	19690 <__assert_fail@plt+0x791c>
   19c40:	ldrb	r3, [r7]
   19c44:	cmp	r3, #43	; 0x2b
   19c48:	beq	19c90 <__assert_fail@plt+0x7f1c>
   19c4c:	movw	r1, #22608	; 0x5850
   19c50:	movt	r1, #2
   19c54:	mov	r3, #4
   19c58:	add	r2, r1, #1488	; 0x5d0
   19c5c:	add	r2, r2, #12
   19c60:	add	r1, r1, #468	; 0x1d4
   19c64:	mov	r0, r7
   19c68:	bl	1aa70 <__assert_fail@plt+0x8cfc>
   19c6c:	subs	r2, r0, #0
   19c70:	blt	19d1c <__assert_fail@plt+0x7fa8>
   19c74:	cmp	r2, #3
   19c78:	ldrls	pc, [pc, r2, lsl #2]
   19c7c:	b	19cd8 <__assert_fail@plt+0x7f64>
   19c80:			; <UNDEFINED> instruction: 0x00019db8
   19c84:	ldrdeq	r9, [r1], -r4
   19c88:	strdeq	r9, [r1], -r0
   19c8c:	andeq	r9, r1, r4, lsl lr
   19c90:	add	r7, r7, #1
   19c94:	mov	r1, #10
   19c98:	mov	r0, r7
   19c9c:	bl	11ba0 <strchr@plt>
   19ca0:	subs	r6, r0, #0
   19ca4:	beq	19d14 <__assert_fail@plt+0x7fa0>
   19ca8:	add	r5, r6, #1
   19cac:	mov	r1, #10
   19cb0:	mov	r0, r5
   19cb4:	bl	11ba0 <strchr@plt>
   19cb8:	cmp	r0, #0
   19cbc:	moveq	r3, #0
   19cc0:	strbeq	r3, [r6]
   19cc4:	bne	19ce0 <__assert_fail@plt+0x7f6c>
   19cc8:	movw	r3, #45520	; 0xb1d0
   19ccc:	movt	r3, #3
   19cd0:	str	r7, [r3, #196]	; 0xc4
   19cd4:	str	r5, [r3, #200]	; 0xc8
   19cd8:	bl	12660 <__assert_fail@plt+0x8ec>
   19cdc:	b	19684 <__assert_fail@plt+0x7910>
   19ce0:	mov	r2, #5
   19ce4:	movw	r1, #37476	; 0x9264
   19ce8:	movt	r1, #2
   19cec:	mov	r0, #0
   19cf0:	bl	11984 <dcgettext@plt>
   19cf4:	mov	r4, r0
   19cf8:	mov	r0, r7
   19cfc:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   19d00:	mov	r3, r0
   19d04:	mov	r2, r4
   19d08:	mov	r1, #0
   19d0c:	mov	r0, #2
   19d10:	bl	11a8c <error@plt>
   19d14:	mov	r5, r7
   19d18:	b	19cc8 <__assert_fail@plt+0x7f54>
   19d1c:	mov	r1, r7
   19d20:	movw	r0, #37508	; 0x9284
   19d24:	movt	r0, #2
   19d28:	bl	1abd4 <__assert_fail@plt+0x8e60>
   19d2c:	mov	r2, #5
   19d30:	movw	r1, #37520	; 0x9290
   19d34:	movt	r1, #2
   19d38:	mov	r0, #0
   19d3c:	bl	11984 <dcgettext@plt>
   19d40:	movw	r3, #45856	; 0xb320
   19d44:	movt	r3, #3
   19d48:	ldr	r1, [r3]
   19d4c:	bl	11864 <fputs_unlocked@plt>
   19d50:	movw	r3, #36896	; 0x9020
   19d54:	movt	r3, #2
   19d58:	ldr	r6, [pc, #-2300]	; 19464 <__assert_fail@plt+0x76f0>
   19d5c:	movw	r5, #37544	; 0x92a8
   19d60:	movt	r5, #2
   19d64:	movw	r4, #45856	; 0xb320
   19d68:	movt	r4, #3
   19d6c:	mov	r7, #1
   19d70:	mov	r2, r5
   19d74:	mov	r1, r7
   19d78:	ldr	r0, [r4]
   19d7c:	bl	11c18 <__fprintf_chk@plt>
   19d80:	ldr	r3, [r6, #4]!
   19d84:	cmp	r3, #0
   19d88:	bne	19d70 <__assert_fail@plt+0x7ffc>
   19d8c:	mov	r2, #5
   19d90:	movw	r1, #37560	; 0x92b8
   19d94:	movt	r1, #2
   19d98:	mov	r0, #0
   19d9c:	bl	11984 <dcgettext@plt>
   19da0:	movw	r3, #45856	; 0xb320
   19da4:	movt	r3, #3
   19da8:	ldr	r1, [r3]
   19dac:	bl	11864 <fputs_unlocked@plt>
   19db0:	mov	r0, #2
   19db4:	bl	18070 <__assert_fail@plt+0x62fc>
   19db8:	movw	r3, #45520	; 0xb1d0
   19dbc:	movt	r3, #3
   19dc0:	movw	r2, #37616	; 0x92f0
   19dc4:	movt	r2, #2
   19dc8:	str	r2, [r3, #200]	; 0xc8
   19dcc:	str	r2, [r3, #196]	; 0xc4
   19dd0:	b	19cd8 <__assert_fail@plt+0x7f64>
   19dd4:	movw	r3, #45520	; 0xb1d0
   19dd8:	movt	r3, #3
   19ddc:	movw	r2, #37640	; 0x9308
   19de0:	movt	r2, #2
   19de4:	str	r2, [r3, #200]	; 0xc8
   19de8:	str	r2, [r3, #196]	; 0xc4
   19dec:	b	19cd8 <__assert_fail@plt+0x7f64>
   19df0:	movw	r3, #45520	; 0xb1d0
   19df4:	movt	r3, #3
   19df8:	movw	r2, #37656	; 0x9318
   19dfc:	movt	r2, #2
   19e00:	str	r2, [r3, #196]	; 0xc4
   19e04:	movw	r2, #37668	; 0x9324
   19e08:	movt	r2, #2
   19e0c:	str	r2, [r3, #200]	; 0xc8
   19e10:	b	19cd8 <__assert_fail@plt+0x7f64>
   19e14:	mov	r0, #2
   19e18:	bl	1c2b4 <__assert_fail@plt+0xa540>
   19e1c:	cmp	r0, #0
   19e20:	beq	19cd8 <__assert_fail@plt+0x7f64>
   19e24:	movw	r5, #45520	; 0xb1d0
   19e28:	movt	r5, #3
   19e2c:	mov	r2, #2
   19e30:	ldr	r1, [r5, #196]	; 0xc4
   19e34:	mov	r0, #0
   19e38:	bl	11984 <dcgettext@plt>
   19e3c:	str	r0, [r5, #196]	; 0xc4
   19e40:	mov	r2, #2
   19e44:	ldr	r1, [r5, #200]	; 0xc8
   19e48:	mov	r0, #0
   19e4c:	bl	11984 <dcgettext@plt>
   19e50:	str	r0, [r5, #200]	; 0xc8
   19e54:	b	19cd8 <__assert_fail@plt+0x7f64>
   19e58:	movw	r0, #37680	; 0x9330
   19e5c:	movt	r0, #2
   19e60:	bl	11ac8 <getenv@plt>
   19e64:	str	r0, [sp, #60]	; 0x3c
   19e68:	cmp	r0, #0
   19e6c:	beq	19e7c <__assert_fail@plt+0x8108>
   19e70:	ldrb	r3, [r0]
   19e74:	cmp	r3, #0
   19e78:	bne	19f2c <__assert_fail@plt+0x81b8>
   19e7c:	movw	r0, #37692	; 0x933c
   19e80:	movt	r0, #2
   19e84:	bl	11ac8 <getenv@plt>
   19e88:	cmp	r0, #0
   19e8c:	beq	19e9c <__assert_fail@plt+0x8128>
   19e90:	ldrb	r3, [r0]
   19e94:	cmp	r3, #0
   19e98:	bne	1a1cc <__assert_fail@plt+0x8458>
   19e9c:	movw	r0, #37704	; 0x9348
   19ea0:	movt	r0, #2
   19ea4:	bl	11ac8 <getenv@plt>
   19ea8:	subs	sl, r0, #0
   19eac:	beq	1a890 <__assert_fail@plt+0x8b1c>
   19eb0:	ldrb	r3, [sl]
   19eb4:	cmp	r3, #0
   19eb8:	beq	1a890 <__assert_fail@plt+0x8b1c>
   19ebc:	movw	r6, #24244	; 0x5eb4
   19ec0:	movt	r6, #2
   19ec4:	movw	r8, #37712	; 0x9350
   19ec8:	movt	r8, #2
   19ecc:	mov	r9, #5
   19ed0:	mov	r7, r6
   19ed4:	b	19ef8 <__assert_fail@plt+0x8184>
   19ed8:	mov	r0, r6
   19edc:	bl	11b94 <strlen@plt>
   19ee0:	add	r0, r0, #1
   19ee4:	add	r6, r6, r0
   19ee8:	sub	r2, r6, r7
   19eec:	movw	r3, #4309	; 0x10d5
   19ef0:	cmp	r2, r3
   19ef4:	bhi	1a890 <__assert_fail@plt+0x8b1c>
   19ef8:	mov	r2, r9
   19efc:	mov	r1, r8
   19f00:	mov	r0, r6
   19f04:	bl	11d20 <strncmp@plt>
   19f08:	cmp	r0, #0
   19f0c:	bne	19ed8 <__assert_fail@plt+0x8164>
   19f10:	mov	r2, #0
   19f14:	mov	r1, sl
   19f18:	add	r0, r6, #5
   19f1c:	bl	11ab0 <fnmatch@plt>
   19f20:	cmp	r0, #0
   19f24:	bne	19ed8 <__assert_fail@plt+0x8164>
   19f28:	b	1a1cc <__assert_fail@plt+0x8458>
   19f2c:	movw	r3, #38000	; 0x9470
   19f30:	movt	r3, #2
   19f34:	ldrh	r2, [r3]
   19f38:	strh	r2, [sp, #56]	; 0x38
   19f3c:	ldrb	r3, [r3, #2]
   19f40:	strb	r3, [sp, #58]	; 0x3a
   19f44:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   19f48:	movw	r3, #54056	; 0xd328
   19f4c:	movt	r3, #3
   19f50:	str	r0, [r3, #-3936]	; 0xfffff0a0
   19f54:	str	r0, [sp, #64]	; 0x40
   19f58:	mov	r2, #1
   19f5c:	mov	fp, #0
   19f60:	movw	r9, #22608	; 0x5850
   19f64:	movt	r9, #2
   19f68:	movw	r8, #36916	; 0x9034
   19f6c:	movt	r8, #2
   19f70:	movw	sl, #37720	; 0x9358
   19f74:	movt	sl, #2
   19f78:	b	1a048 <__assert_fail@plt+0x82d4>
   19f7c:	ldr	r1, [sp, #60]	; 0x3c
   19f80:	ldrb	r3, [r1]
   19f84:	cmp	r3, #42	; 0x2a
   19f88:	beq	1a07c <__assert_fail@plt+0x8308>
   19f8c:	cmp	r3, #58	; 0x3a
   19f90:	beq	1a070 <__assert_fail@plt+0x82fc>
   19f94:	cmp	r3, #0
   19f98:	beq	1a1b8 <__assert_fail@plt+0x8444>
   19f9c:	add	r3, r1, #1
   19fa0:	str	r3, [sp, #60]	; 0x3c
   19fa4:	ldrb	r3, [r1]
   19fa8:	strb	r3, [sp, #56]	; 0x38
   19fac:	ldr	r3, [sp, #60]	; 0x3c
   19fb0:	ldrb	r2, [r3]
   19fb4:	cmp	r2, #0
   19fb8:	beq	1a14c <__assert_fail@plt+0x83d8>
   19fbc:	add	r2, r3, #1
   19fc0:	str	r2, [sp, #60]	; 0x3c
   19fc4:	ldrb	r3, [r3]
   19fc8:	strb	r3, [sp, #57]	; 0x39
   19fcc:	ldr	r3, [sp, #60]	; 0x3c
   19fd0:	add	r2, r3, #1
   19fd4:	str	r2, [sp, #60]	; 0x3c
   19fd8:	ldrb	r3, [r3]
   19fdc:	cmp	r3, #61	; 0x3d
   19fe0:	bne	1a14c <__assert_fail@plt+0x83d8>
   19fe4:	add	r6, r9, #1504	; 0x5e0
   19fe8:	add	r6, r6, #12
   19fec:	mov	r7, #0
   19ff0:	mov	r1, r8
   19ff4:	add	r0, sp, #56	; 0x38
   19ff8:	bl	118a0 <strcmp@plt>
   19ffc:	cmp	r0, #0
   1a000:	beq	1a0d4 <__assert_fail@plt+0x8360>
   1a004:	add	r7, r7, #1
   1a008:	ldr	r1, [r6, #4]!
   1a00c:	cmp	r1, #0
   1a010:	bne	19ff4 <__assert_fail@plt+0x8280>
   1a014:	mov	r2, #5
   1a018:	mov	r1, sl
   1a01c:	mov	r0, #0
   1a020:	bl	11984 <dcgettext@plt>
   1a024:	mov	r6, r0
   1a028:	add	r0, sp, #56	; 0x38
   1a02c:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   1a030:	mov	r3, r0
   1a034:	mov	r2, r6
   1a038:	mov	r1, #0
   1a03c:	mov	r0, r1
   1a040:	bl	11a8c <error@plt>
   1a044:	mov	r2, #6
   1a048:	sub	r3, r2, #1
   1a04c:	cmp	r3, #5
   1a050:	ldrls	pc, [pc, r3, lsl #2]
   1a054:	b	1a190 <__assert_fail@plt+0x841c>
   1a058:	andeq	r9, r1, ip, ror pc
   1a05c:	andeq	r9, r1, ip, lsr #31
   1a060:	andeq	r9, r1, ip, asr #31
   1a064:	andeq	sl, r1, r8, lsl #2
   1a068:	muleq	r1, r0, r1
   1a06c:	andeq	sl, r1, ip, asr #2
   1a070:	add	r1, r1, #1
   1a074:	str	r1, [sp, #60]	; 0x3c
   1a078:	b	1a048 <__assert_fail@plt+0x82d4>
   1a07c:	mov	r0, #20
   1a080:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1a084:	mov	fp, r0
   1a088:	movw	r3, #45872	; 0xb330
   1a08c:	movt	r3, #3
   1a090:	ldr	r2, [r3, #4036]	; 0xfc4
   1a094:	str	r2, [r0, #16]
   1a098:	str	r0, [r3, #4036]	; 0xfc4
   1a09c:	ldr	r3, [sp, #60]	; 0x3c
   1a0a0:	add	r3, r3, #1
   1a0a4:	str	r3, [sp, #60]	; 0x3c
   1a0a8:	ldr	r3, [sp, #64]	; 0x40
   1a0ac:	str	r3, [r0, #4]
   1a0b0:	mov	r3, r0
   1a0b4:	mov	r2, #1
   1a0b8:	add	r1, sp, #60	; 0x3c
   1a0bc:	add	r0, sp, #64	; 0x40
   1a0c0:	bl	12950 <__assert_fail@plt+0xbdc>
   1a0c4:	cmp	r0, #0
   1a0c8:	movne	r2, #4
   1a0cc:	moveq	r2, #6
   1a0d0:	b	1a048 <__assert_fail@plt+0x82d4>
   1a0d4:	movw	r3, #45520	; 0xb1d0
   1a0d8:	movt	r3, #3
   1a0dc:	add	r3, r3, r7, lsl #3
   1a0e0:	ldr	r2, [sp, #64]	; 0x40
   1a0e4:	str	r2, [r3, #4]
   1a0e8:	mov	r2, #0
   1a0ec:	add	r1, sp, #60	; 0x3c
   1a0f0:	add	r0, sp, #64	; 0x40
   1a0f4:	bl	12950 <__assert_fail@plt+0xbdc>
   1a0f8:	cmp	r0, #0
   1a0fc:	movne	r2, #1
   1a100:	bne	1a048 <__assert_fail@plt+0x82d4>
   1a104:	b	1a014 <__assert_fail@plt+0x82a0>
   1a108:	ldr	r3, [sp, #60]	; 0x3c
   1a10c:	add	r2, r3, #1
   1a110:	str	r2, [sp, #60]	; 0x3c
   1a114:	ldrb	r3, [r3]
   1a118:	cmp	r3, #61	; 0x3d
   1a11c:	bne	1a14c <__assert_fail@plt+0x83d8>
   1a120:	ldr	r3, [sp, #64]	; 0x40
   1a124:	str	r3, [fp, #12]
   1a128:	add	r3, fp, #8
   1a12c:	mov	r2, #0
   1a130:	add	r1, sp, #60	; 0x3c
   1a134:	add	r0, sp, #64	; 0x40
   1a138:	bl	12950 <__assert_fail@plt+0xbdc>
   1a13c:	cmp	r0, #0
   1a140:	movne	r2, #1
   1a144:	moveq	r2, #6
   1a148:	b	1a048 <__assert_fail@plt+0x82d4>
   1a14c:	mov	r2, #5
   1a150:	movw	r1, #37744	; 0x9370
   1a154:	movt	r1, #2
   1a158:	mov	r0, #0
   1a15c:	bl	11984 <dcgettext@plt>
   1a160:	mov	r2, r0
   1a164:	mov	r1, #0
   1a168:	mov	r0, r1
   1a16c:	bl	11a8c <error@plt>
   1a170:	movw	r3, #54056	; 0xd328
   1a174:	movt	r3, #3
   1a178:	ldr	r0, [r3, #-3936]	; 0xfffff0a0
   1a17c:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a180:	movw	r3, #45872	; 0xb330
   1a184:	movt	r3, #3
   1a188:	ldr	r0, [r3, #4036]	; 0xfc4
   1a18c:	b	1a1a0 <__assert_fail@plt+0x842c>
   1a190:	bl	11d2c <abort@plt>
   1a194:	ldr	r6, [r0, #16]
   1a198:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a19c:	mov	r0, r6
   1a1a0:	cmp	r0, #0
   1a1a4:	bne	1a194 <__assert_fail@plt+0x8420>
   1a1a8:	movw	r3, #45872	; 0xb330
   1a1ac:	movt	r3, #3
   1a1b0:	mov	r2, #0
   1a1b4:	strb	r2, [r3, #4024]	; 0xfb8
   1a1b8:	movw	r3, #45520	; 0xb1d0
   1a1bc:	movt	r3, #3
   1a1c0:	ldr	r3, [r3, #56]	; 0x38
   1a1c4:	cmp	r3, #6
   1a1c8:	beq	1a268 <__assert_fail@plt+0x84f4>
   1a1cc:	movw	r3, #45872	; 0xb330
   1a1d0:	movt	r3, #3
   1a1d4:	ldrb	r3, [r3, #4024]	; 0xfb8
   1a1d8:	cmp	r3, #0
   1a1dc:	beq	196a4 <__assert_fail@plt+0x7930>
   1a1e0:	movw	r3, #45872	; 0xb330
   1a1e4:	movt	r3, #3
   1a1e8:	mov	r2, #0
   1a1ec:	str	r2, [r3, #3888]	; 0xf30
   1a1f0:	ldrb	r3, [r3, #3585]	; 0xe01
   1a1f4:	cmp	r3, r2
   1a1f8:	bne	196b8 <__assert_fail@plt+0x7944>
   1a1fc:	mov	r0, #13
   1a200:	bl	12590 <__assert_fail@plt+0x81c>
   1a204:	cmp	r0, #0
   1a208:	bne	1a254 <__assert_fail@plt+0x84e0>
   1a20c:	mov	r0, #14
   1a210:	bl	12590 <__assert_fail@plt+0x81c>
   1a214:	cmp	r0, #0
   1a218:	beq	1a230 <__assert_fail@plt+0x84bc>
   1a21c:	movw	r3, #45872	; 0xb330
   1a220:	movt	r3, #3
   1a224:	ldrb	r3, [r3, #4032]	; 0xfc0
   1a228:	cmp	r3, #0
   1a22c:	bne	1a254 <__assert_fail@plt+0x84e0>
   1a230:	mov	r0, #12
   1a234:	bl	12590 <__assert_fail@plt+0x81c>
   1a238:	cmp	r0, #0
   1a23c:	beq	196c8 <__assert_fail@plt+0x7954>
   1a240:	movw	r3, #45872	; 0xb330
   1a244:	movt	r3, #3
   1a248:	ldr	r3, [r3, #3116]	; 0xc2c
   1a24c:	cmp	r3, #0
   1a250:	bne	196c8 <__assert_fail@plt+0x7954>
   1a254:	movw	r3, #45872	; 0xb330
   1a258:	movt	r3, #3
   1a25c:	mov	r2, #1
   1a260:	strb	r2, [r3, #4052]	; 0xfd4
   1a264:	b	196c8 <__assert_fail@plt+0x7954>
   1a268:	movw	r3, #45520	; 0xb1d0
   1a26c:	movt	r3, #3
   1a270:	mov	r2, #6
   1a274:	movw	r1, #37796	; 0x93a4
   1a278:	movt	r1, #2
   1a27c:	ldr	r0, [r3, #60]	; 0x3c
   1a280:	bl	11d20 <strncmp@plt>
   1a284:	cmp	r0, #0
   1a288:	bne	1a1cc <__assert_fail@plt+0x8458>
   1a28c:	movw	r3, #45872	; 0xb330
   1a290:	movt	r3, #3
   1a294:	mov	r2, #1
   1a298:	strb	r2, [r3, #4032]	; 0xfc0
   1a29c:	b	1a1cc <__assert_fail@plt+0x8458>
   1a2a0:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1a2a4:	mov	r2, #0
   1a2a8:	b	1a7b4 <__assert_fail@plt+0x8a40>
   1a2ac:	movw	r7, #19900	; 0x4dbc
   1a2b0:	movt	r7, #2
   1a2b4:	movw	r6, #54056	; 0xd328
   1a2b8:	movt	r6, #3
   1a2bc:	movw	r8, #49664	; 0xc200
   1a2c0:	movt	r8, #1
   1a2c4:	str	r8, [sp]
   1a2c8:	mov	r3, r7
   1a2cc:	mov	r2, #0
   1a2d0:	mov	r1, r2
   1a2d4:	sub	r0, r6, #4080	; 0xff0
   1a2d8:	sub	r0, r0, #4
   1a2dc:	bl	20acc <_obstack_begin@@Base>
   1a2e0:	str	r8, [sp]
   1a2e4:	mov	r3, r7
   1a2e8:	mov	r2, #0
   1a2ec:	mov	r1, r2
   1a2f0:	sub	r0, r6, #3984	; 0xf90
   1a2f4:	sub	r0, r0, #4
   1a2f8:	bl	20acc <_obstack_begin@@Base>
   1a2fc:	b	1a7d0 <__assert_fail@plt+0x8a5c>
   1a300:	ldr	r1, [pc, #-3744]	; 19468 <__assert_fail@plt+0x76f4>
   1a304:	mov	r3, #0
   1a308:	mov	ip, #1
   1a30c:	b	1a338 <__assert_fail@plt+0x85c4>
   1a310:	sub	r2, r3, #97	; 0x61
   1a314:	cmp	r2, #25
   1a318:	movls	r0, ip
   1a31c:	bhi	1a35c <__assert_fail@plt+0x85e8>
   1a320:	ldrb	r2, [r1, #1]!
   1a324:	orr	r2, r2, r0
   1a328:	strb	r2, [r1]
   1a32c:	add	r3, r3, #1
   1a330:	cmp	r3, #256	; 0x100
   1a334:	beq	1a380 <__assert_fail@plt+0x860c>
   1a338:	cmp	r3, #90	; 0x5a
   1a33c:	bgt	1a310 <__assert_fail@plt+0x859c>
   1a340:	cmp	r3, #65	; 0x41
   1a344:	movge	r0, ip
   1a348:	bge	1a320 <__assert_fail@plt+0x85ac>
   1a34c:	sub	r2, r3, #48	; 0x30
   1a350:	cmp	r2, #9
   1a354:	movls	r0, ip
   1a358:	bls	1a320 <__assert_fail@plt+0x85ac>
   1a35c:	sub	r2, r3, #45	; 0x2d
   1a360:	cmp	r3, #126	; 0x7e
   1a364:	cmpne	r2, #1
   1a368:	movls	r0, ip
   1a36c:	bls	1a320 <__assert_fail@plt+0x85ac>
   1a370:	cmp	r3, #95	; 0x5f
   1a374:	movne	r0, #0
   1a378:	moveq	r0, #1
   1a37c:	b	1a320 <__assert_fail@plt+0x85ac>
   1a380:	bl	24500 <_obstack_memory_used@@Base+0x37f0>
   1a384:	cmp	r0, #0
   1a388:	movw	r3, #45872	; 0xb330
   1a38c:	movt	r3, #3
   1a390:	strne	r0, [r3, #4028]	; 0xfbc
   1a394:	movweq	r2, #39300	; 0x9984
   1a398:	movteq	r2, #2
   1a39c:	streq	r2, [r3, #4028]	; 0xfbc
   1a3a0:	b	1a7e4 <__assert_fail@plt+0x8a70>
   1a3a4:	ldrb	r3, [r6, #4080]	; 0xff0
   1a3a8:	cmp	r3, #0
   1a3ac:	beq	1a424 <__assert_fail@plt+0x86b0>
   1a3b0:	movw	r3, #39300	; 0x9984
   1a3b4:	movt	r3, #2
   1a3b8:	str	r3, [sp, #4]
   1a3bc:	mov	r3, #1
   1a3c0:	str	r3, [sp]
   1a3c4:	mov	r2, #0
   1a3c8:	mov	r3, #0
   1a3cc:	mov	r1, #3
   1a3d0:	movw	r0, #37808	; 0x93b0
   1a3d4:	movt	r0, #2
   1a3d8:	bl	15bd4 <__assert_fail@plt+0x3e60>
   1a3dc:	movw	r3, #45872	; 0xb330
   1a3e0:	movt	r3, #3
   1a3e4:	ldr	r3, [r3, #8]
   1a3e8:	cmp	r3, #0
   1a3ec:	bne	1a43c <__assert_fail@plt+0x86c8>
   1a3f0:	movw	r3, #45872	; 0xb330
   1a3f4:	movt	r3, #3
   1a3f8:	ldr	r3, [r3, #3104]	; 0xc20
   1a3fc:	cmp	r3, #0
   1a400:	beq	1a588 <__assert_fail@plt+0x8814>
   1a404:	ldr	r3, [r3, #12]
   1a408:	cmp	r3, #0
   1a40c:	bne	1a878 <__assert_fail@plt+0x8b04>
   1a410:	movw	r3, #54056	; 0xd328
   1a414:	movt	r3, #3
   1a418:	mov	r2, #0
   1a41c:	strb	r2, [r3, #-3995]	; 0xfffff065
   1a420:	b	1a878 <__assert_fail@plt+0x8b04>
   1a424:	mov	r2, #1
   1a428:	mov	r1, #0
   1a42c:	movw	r0, #37808	; 0x93b0
   1a430:	movt	r0, #2
   1a434:	bl	128cc <__assert_fail@plt+0xb58>
   1a438:	b	1a3dc <__assert_fail@plt+0x8668>
   1a43c:	bl	13a18 <__assert_fail@plt+0x1ca4>
   1a440:	movw	r3, #45872	; 0xb330
   1a444:	movt	r3, #3
   1a448:	ldrb	r3, [r3, #4080]	; 0xff0
   1a44c:	cmp	r3, #0
   1a450:	beq	1a48c <__assert_fail@plt+0x8718>
   1a454:	movw	r3, #45872	; 0xb330
   1a458:	movt	r3, #3
   1a45c:	ldr	r3, [r3, #8]
   1a460:	cmp	r3, #0
   1a464:	beq	1a870 <__assert_fail@plt+0x8afc>
   1a468:	bl	1750c <__assert_fail@plt+0x5798>
   1a46c:	movw	r3, #45872	; 0xb330
   1a470:	movt	r3, #3
   1a474:	ldr	r3, [r3, #3104]	; 0xc20
   1a478:	cmp	r3, #0
   1a47c:	beq	1a588 <__assert_fail@plt+0x8814>
   1a480:	mov	r0, #10
   1a484:	bl	14450 <__assert_fail@plt+0x26dc>
   1a488:	b	1a878 <__assert_fail@plt+0x8b04>
   1a48c:	mov	r1, #1
   1a490:	mov	r0, #0
   1a494:	bl	141f0 <__assert_fail@plt+0x247c>
   1a498:	b	1a454 <__assert_fail@plt+0x86e0>
   1a49c:	ldr	r3, [pc, #1108]	; 1a8f8 <__assert_fail@plt+0x8b84>
   1a4a0:	movw	r2, #1053	; 0x41d
   1a4a4:	movw	r1, #28580	; 0x6fa4
   1a4a8:	movt	r1, #2
   1a4ac:	movw	r0, #37812	; 0x93b4
   1a4b0:	movt	r0, #2
   1a4b4:	bl	11d74 <__assert_fail@plt>
   1a4b8:	ldr	r3, [pc, #1084]	; 1a8fc <__assert_fail@plt+0x8b88>
   1a4bc:	movw	r2, #1805	; 0x70d
   1a4c0:	movw	r1, #28580	; 0x6fa4
   1a4c4:	movt	r1, #2
   1a4c8:	movw	r0, #37868	; 0x93ec
   1a4cc:	movt	r0, #2
   1a4d0:	bl	11d74 <__assert_fail@plt>
   1a4d4:	ldrb	r2, [r4, #8]
   1a4d8:	ldr	r1, [r4, #4]
   1a4dc:	ldr	r0, [r4]
   1a4e0:	bl	178f4 <__assert_fail@plt+0x5b80>
   1a4e4:	ldr	r0, [r4]
   1a4e8:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a4ec:	ldr	r0, [r4, #4]
   1a4f0:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a4f4:	mov	r0, r4
   1a4f8:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a4fc:	strb	r7, [r6, #-3995]	; 0xfffff065
   1a500:	ldr	r4, [r5, #3104]	; 0xc20
   1a504:	cmp	r4, #0
   1a508:	beq	1a588 <__assert_fail@plt+0x8814>
   1a50c:	ldr	r3, [r4, #12]
   1a510:	str	r3, [r5, #3104]	; 0xc20
   1a514:	ldr	r0, [r5, #3616]	; 0xe20
   1a518:	cmp	r0, #0
   1a51c:	beq	1a4d4 <__assert_fail@plt+0x8760>
   1a520:	ldr	r3, [r4]
   1a524:	cmp	r3, #0
   1a528:	bne	1a4d4 <__assert_fail@plt+0x8760>
   1a52c:	ldr	r3, [r6, #-4028]	; 0xfffff044
   1a530:	ldr	r2, [r6, #-4032]	; 0xfffff040
   1a534:	sub	r2, r3, r2
   1a538:	cmp	r2, #15
   1a53c:	bls	1a49c <__assert_fail@plt+0x8728>
   1a540:	sub	r1, r3, #16
   1a544:	str	r1, [r6, #-4028]	; 0xfffff044
   1a548:	ldrd	r2, [r3, #-16]
   1a54c:	strd	r2, [sp, #64]	; 0x40
   1a550:	ldrd	r2, [r1, #8]
   1a554:	strd	r2, [sp, #72]	; 0x48
   1a558:	add	r1, sp, #64	; 0x40
   1a55c:	bl	1d2e0 <__assert_fail@plt+0xb56c>
   1a560:	cmp	r0, #0
   1a564:	beq	1a4b8 <__assert_fail@plt+0x8744>
   1a568:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a56c:	ldr	r0, [r4]
   1a570:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a574:	ldr	r0, [r4, #4]
   1a578:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a57c:	mov	r0, r4
   1a580:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a584:	b	1a500 <__assert_fail@plt+0x878c>
   1a588:	movw	r3, #45872	; 0xb330
   1a58c:	movt	r3, #3
   1a590:	ldrb	r3, [r3, #4024]	; 0xfb8
   1a594:	cmp	r3, #0
   1a598:	beq	1a6b4 <__assert_fail@plt+0x8940>
   1a59c:	movw	r3, #45872	; 0xb330
   1a5a0:	movt	r3, #3
   1a5a4:	ldrb	r3, [r3, #3893]	; 0xf35
   1a5a8:	cmp	r3, #0
   1a5ac:	beq	1a6b4 <__assert_fail@plt+0x8940>
   1a5b0:	movw	r3, #45520	; 0xb1d0
   1a5b4:	movt	r3, #3
   1a5b8:	ldr	r3, [r3]
   1a5bc:	cmp	r3, #2
   1a5c0:	bne	1a5fc <__assert_fail@plt+0x8888>
   1a5c4:	movw	r3, #45520	; 0xb1d0
   1a5c8:	movt	r3, #3
   1a5cc:	mov	r2, #2
   1a5d0:	movw	r1, #37876	; 0x93f4
   1a5d4:	movt	r1, #2
   1a5d8:	ldr	r0, [r3, #4]
   1a5dc:	bl	1196c <memcmp@plt>
   1a5e0:	cmp	r0, #0
   1a5e4:	bne	1a5fc <__assert_fail@plt+0x8888>
   1a5e8:	movw	r3, #45520	; 0xb1d0
   1a5ec:	movt	r3, #3
   1a5f0:	ldr	r3, [r3, #8]
   1a5f4:	cmp	r3, #1
   1a5f8:	beq	1a62c <__assert_fail@plt+0x88b8>
   1a5fc:	bl	1490c <__assert_fail@plt+0x2b98>
   1a600:	movw	r3, #45860	; 0xb324
   1a604:	movt	r3, #3
   1a608:	ldr	r0, [r3]
   1a60c:	bl	119e4 <fflush_unlocked@plt>
   1a610:	movw	r6, #22608	; 0x5850
   1a614:	movt	r6, #2
   1a618:	add	r4, r6, #300	; 0x12c
   1a61c:	add	r6, r6, #348	; 0x15c
   1a620:	ldr	r7, [pc, #728]	; 1a900 <__assert_fail@plt+0x8b8c>
   1a624:	mov	r8, #0
   1a628:	b	1a650 <__assert_fail@plt+0x88dc>
   1a62c:	movw	r3, #45520	; 0xb1d0
   1a630:	movt	r3, #3
   1a634:	ldr	r3, [r3, #12]
   1a638:	ldrb	r3, [r3]
   1a63c:	cmp	r3, #109	; 0x6d
   1a640:	bne	1a5fc <__assert_fail@plt+0x8888>
   1a644:	b	1a600 <__assert_fail@plt+0x888c>
   1a648:	cmp	r6, r4
   1a64c:	beq	1a678 <__assert_fail@plt+0x8904>
   1a650:	ldr	r5, [r4], #4
   1a654:	mov	r1, r5
   1a658:	mov	r0, r7
   1a65c:	bl	1199c <sigismember@plt>
   1a660:	cmp	r0, #0
   1a664:	beq	1a648 <__assert_fail@plt+0x88d4>
   1a668:	mov	r1, r8
   1a66c:	mov	r0, r5
   1a670:	bl	11954 <signal@plt>
   1a674:	b	1a648 <__assert_fail@plt+0x88d4>
   1a678:	movw	r3, #45872	; 0xb330
   1a67c:	movt	r3, #3
   1a680:	ldr	r4, [r3, #4]
   1a684:	cmp	r4, #0
   1a688:	beq	1a6a0 <__assert_fail@plt+0x892c>
   1a68c:	mov	r5, #19
   1a690:	mov	r0, r5
   1a694:	bl	1187c <raise@plt>
   1a698:	subs	r4, r4, #1
   1a69c:	bne	1a690 <__assert_fail@plt+0x891c>
   1a6a0:	movw	r3, #45872	; 0xb330
   1a6a4:	movt	r3, #3
   1a6a8:	ldr	r0, [r3]
   1a6ac:	cmp	r0, #0
   1a6b0:	bne	1a71c <__assert_fail@plt+0x89a8>
   1a6b4:	movw	r3, #45872	; 0xb330
   1a6b8:	movt	r3, #3
   1a6bc:	ldrb	r3, [r3, #3892]	; 0xf34
   1a6c0:	cmp	r3, #0
   1a6c4:	bne	1a724 <__assert_fail@plt+0x89b0>
   1a6c8:	movw	r3, #45872	; 0xb330
   1a6cc:	movt	r3, #3
   1a6d0:	ldr	r4, [r3, #3616]	; 0xe20
   1a6d4:	cmp	r4, #0
   1a6d8:	beq	1a6f4 <__assert_fail@plt+0x8980>
   1a6dc:	mov	r0, r4
   1a6e0:	bl	1c7f4 <__assert_fail@plt+0xaa80>
   1a6e4:	cmp	r0, #0
   1a6e8:	bne	1a784 <__assert_fail@plt+0x8a10>
   1a6ec:	mov	r0, r4
   1a6f0:	bl	1ceb8 <__assert_fail@plt+0xb144>
   1a6f4:	movw	r3, #45872	; 0xb330
   1a6f8:	movt	r3, #3
   1a6fc:	ldr	r0, [r3, #3172]	; 0xc64
   1a700:	add	sp, sp, #84	; 0x54
   1a704:	ldrd	r4, [sp]
   1a708:	ldrd	r6, [sp, #8]
   1a70c:	ldrd	r8, [sp, #16]
   1a710:	ldrd	sl, [sp, #24]
   1a714:	add	sp, sp, #32
   1a718:	pop	{pc}		; (ldr pc, [sp], #4)
   1a71c:	bl	1187c <raise@plt>
   1a720:	b	1a6b4 <__assert_fail@plt+0x8940>
   1a724:	movw	r4, #54056	; 0xd328
   1a728:	movt	r4, #3
   1a72c:	sub	r1, r4, #4080	; 0xff0
   1a730:	sub	r1, r1, #4
   1a734:	movw	r0, #37880	; 0x93f8
   1a738:	movt	r0, #2
   1a73c:	bl	14a00 <__assert_fail@plt+0x2c8c>
   1a740:	sub	r1, r4, #3984	; 0xf90
   1a744:	sub	r1, r1, #4
   1a748:	movw	r0, #37892	; 0x9404
   1a74c:	movt	r0, #2
   1a750:	bl	14a00 <__assert_fail@plt+0x2c8c>
   1a754:	movw	r3, #45872	; 0xb330
   1a758:	movt	r3, #3
   1a75c:	ldr	r0, [r3, #3176]	; 0xc68
   1a760:	bl	228e4 <_obstack_memory_used@@Base+0x1bd4>
   1a764:	movw	r3, #39596	; 0x9aac
   1a768:	movt	r3, #2
   1a76c:	ldr	r2, [r3, r0, lsl #2]
   1a770:	movw	r1, #37908	; 0x9414
   1a774:	movt	r1, #2
   1a778:	mov	r0, #1
   1a77c:	bl	11bf4 <__printf_chk@plt>
   1a780:	b	1a6c8 <__assert_fail@plt+0x8954>
   1a784:	ldr	r3, [pc, #368]	; 1a8fc <__assert_fail@plt+0x8b88>
   1a788:	movw	r2, #1857	; 0x741
   1a78c:	movw	r1, #28580	; 0x6fa4
   1a790:	movt	r1, #2
   1a794:	movw	r0, #37948	; 0x943c
   1a798:	movt	r0, #2
   1a79c:	bl	11d74 <__assert_fail@plt>
   1a7a0:	movw	r3, #45872	; 0xb330
   1a7a4:	movt	r3, #3
   1a7a8:	mov	r2, #1
   1a7ac:	strb	r2, [r3, #4045]	; 0xfcd
   1a7b0:	mov	r2, #0
   1a7b4:	movw	r3, #45872	; 0xb330
   1a7b8:	movt	r3, #3
   1a7bc:	and	r2, r2, #1
   1a7c0:	strb	r2, [r3, #4046]	; 0xfce
   1a7c4:	ldrb	r3, [r3, #3892]	; 0xf34
   1a7c8:	cmp	r3, #0
   1a7cc:	bne	1a2ac <__assert_fail@plt+0x8538>
   1a7d0:	movw	r3, #45872	; 0xb330
   1a7d4:	movt	r3, #3
   1a7d8:	ldrb	r3, [r3, #4044]	; 0xfcc
   1a7dc:	cmp	r3, #0
   1a7e0:	bne	1a300 <__assert_fail@plt+0x858c>
   1a7e4:	movw	r6, #45872	; 0xb330
   1a7e8:	movt	r6, #3
   1a7ec:	mov	r0, #100	; 0x64
   1a7f0:	str	r0, [r6, #4040]	; 0xfc8
   1a7f4:	mov	r1, #152	; 0x98
   1a7f8:	bl	24040 <_obstack_memory_used@@Base+0x3330>
   1a7fc:	str	r0, [r6, #12]
   1a800:	mov	r3, #0
   1a804:	str	r3, [r6, #8]
   1a808:	bl	1301c <__assert_fail@plt+0x12a8>
   1a80c:	sub	sl, r4, r5
   1a810:	cmp	sl, #0
   1a814:	ble	1a3a4 <__assert_fail@plt+0x8630>
   1a818:	ldr	r3, [sp, #24]
   1a81c:	add	r8, r3, r5, lsl #2
   1a820:	movw	r9, #39300	; 0x9984
   1a824:	movt	r9, #2
   1a828:	mov	fp, #1
   1a82c:	mov	r6, #0
   1a830:	mov	r7, #0
   1a834:	add	r5, r5, #1
   1a838:	str	r9, [sp, #4]
   1a83c:	str	fp, [sp]
   1a840:	mov	r2, r6
   1a844:	mov	r3, r7
   1a848:	mov	r1, #0
   1a84c:	ldr	r0, [r8], #4
   1a850:	bl	15bd4 <__assert_fail@plt+0x3e60>
   1a854:	cmp	r4, r5
   1a858:	bgt	1a834 <__assert_fail@plt+0x8ac0>
   1a85c:	movw	r3, #45872	; 0xb330
   1a860:	movt	r3, #3
   1a864:	ldr	r3, [r3, #8]
   1a868:	cmp	r3, #0
   1a86c:	bne	1a43c <__assert_fail@plt+0x86c8>
   1a870:	cmp	sl, #1
   1a874:	ble	1a3f0 <__assert_fail@plt+0x867c>
   1a878:	movw	r5, #45872	; 0xb330
   1a87c:	movt	r5, #3
   1a880:	movw	r6, #54056	; 0xd328
   1a884:	movt	r6, #3
   1a888:	mov	r7, #1
   1a88c:	b	1a500 <__assert_fail@plt+0x878c>
   1a890:	movw	r3, #45872	; 0xb330
   1a894:	movt	r3, #3
   1a898:	mov	r2, #0
   1a89c:	strb	r2, [r3, #4024]	; 0xfb8
   1a8a0:	b	1a1cc <__assert_fail@plt+0x8458>
   1a8a4:	movw	r3, #45872	; 0xb330
   1a8a8:	movt	r3, #3
   1a8ac:	mov	r2, #0
   1a8b0:	str	r2, [r3, #3124]	; 0xc34
   1a8b4:	cmp	r7, #0
   1a8b8:	beq	19c10 <__assert_fail@plt+0x7e9c>
   1a8bc:	ldr	r6, [pc, #64]	; 1a904 <__assert_fail@plt+0x8b90>
   1a8c0:	mov	r5, #6
   1a8c4:	mov	r8, #2
   1a8c8:	mov	r2, r5
   1a8cc:	mov	r1, r6
   1a8d0:	mov	r0, r7
   1a8d4:	bl	11d20 <strncmp@plt>
   1a8d8:	cmp	r0, #0
   1a8dc:	bne	19c40 <__assert_fail@plt+0x7ecc>
   1a8e0:	mov	r0, r8
   1a8e4:	bl	1c2b4 <__assert_fail@plt+0xa540>
   1a8e8:	cmp	r0, #0
   1a8ec:	beq	19c30 <__assert_fail@plt+0x7ebc>
   1a8f0:	add	r7, r7, #6
   1a8f4:	b	1a8c8 <__assert_fail@plt+0x8b54>
   1a8f8:	andeq	r5, r2, r0, lsr #29
   1a8fc:	andeq	r5, r2, ip, lsr #29
   1a900:	andeq	ip, r3, r8, ror #4
   1a904:	andeq	r5, r2, r4, lsr #28
   1a908:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a90c:	strd	r6, [sp, #8]
   1a910:	str	r8, [sp, #16]
   1a914:	str	lr, [sp, #20]
   1a918:	sub	sp, sp, #128	; 0x80
   1a91c:	mov	r8, r0
   1a920:	subs	r7, r1, #0
   1a924:	moveq	r4, #128	; 0x80
   1a928:	beq	1a938 <__assert_fail@plt+0x8bc4>
   1a92c:	cmp	r7, #1024	; 0x400
   1a930:	addls	r4, r7, #1
   1a934:	movwhi	r4, #1025	; 0x401
   1a938:	cmp	r4, #128	; 0x80
   1a93c:	cmpeq	r7, #0
   1a940:	moveq	r6, #0
   1a944:	moveq	r5, sp
   1a948:	bne	1a990 <__assert_fail@plt+0x8c1c>
   1a94c:	mov	r2, r4
   1a950:	mov	r1, r5
   1a954:	mov	r0, r8
   1a958:	bl	11a08 <readlink@plt>
   1a95c:	cmp	r0, #0
   1a960:	blt	1a9bc <__assert_fail@plt+0x8c48>
   1a964:	cmp	r4, r0
   1a968:	bhi	1a9e4 <__assert_fail@plt+0x8c70>
   1a96c:	mov	r0, r6
   1a970:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a974:	cmn	r4, #-1073741823	; 0xc0000001
   1a978:	lslls	r4, r4, #1
   1a97c:	bls	1a938 <__assert_fail@plt+0x8bc4>
   1a980:	cmn	r4, #-2147483646	; 0x80000002
   1a984:	bhi	1aa40 <__assert_fail@plt+0x8ccc>
   1a988:	mvn	r4, #-2147483648	; 0x80000000
   1a98c:	b	1a938 <__assert_fail@plt+0x8bc4>
   1a990:	mov	r0, r4
   1a994:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1a998:	subs	r5, r0, #0
   1a99c:	beq	1a9a8 <__assert_fail@plt+0x8c34>
   1a9a0:	mov	r6, r5
   1a9a4:	b	1a94c <__assert_fail@plt+0x8bd8>
   1a9a8:	bl	11bb8 <__errno_location@plt>
   1a9ac:	mov	r3, #12
   1a9b0:	str	r3, [r0]
   1a9b4:	mov	r6, r5
   1a9b8:	b	1a9c8 <__assert_fail@plt+0x8c54>
   1a9bc:	mov	r0, r6
   1a9c0:	bl	1c200 <__assert_fail@plt+0xa48c>
   1a9c4:	mov	r6, #0
   1a9c8:	mov	r0, r6
   1a9cc:	add	sp, sp, #128	; 0x80
   1a9d0:	ldrd	r4, [sp]
   1a9d4:	ldrd	r6, [sp, #8]
   1a9d8:	ldr	r8, [sp, #16]
   1a9dc:	add	sp, sp, #20
   1a9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9e4:	mov	r3, #0
   1a9e8:	strb	r3, [r5, r0]
   1a9ec:	cmp	r6, r3
   1a9f0:	beq	1aa14 <__assert_fail@plt+0x8ca0>
   1a9f4:	add	r1, r0, #1
   1a9f8:	cmp	r1, r4
   1a9fc:	bcs	1a9c8 <__assert_fail@plt+0x8c54>
   1aa00:	mov	r0, r6
   1aa04:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   1aa08:	cmp	r0, #0
   1aa0c:	movne	r6, r0
   1aa10:	b	1a9c8 <__assert_fail@plt+0x8c54>
   1aa14:	add	r4, r0, #1
   1aa18:	mov	r0, r4
   1aa1c:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1aa20:	subs	r6, r0, #0
   1aa24:	beq	1a9c8 <__assert_fail@plt+0x8c54>
   1aa28:	mov	r2, r4
   1aa2c:	mov	r1, r5
   1aa30:	mov	r0, r6
   1aa34:	bl	11930 <memcpy@plt>
   1aa38:	mov	r6, r0
   1aa3c:	b	1a9c8 <__assert_fail@plt+0x8c54>
   1aa40:	bl	11bb8 <__errno_location@plt>
   1aa44:	mov	r3, #12
   1aa48:	str	r3, [r0]
   1aa4c:	mov	r6, #0
   1aa50:	b	1a9c8 <__assert_fail@plt+0x8c54>
   1aa54:	str	r4, [sp, #-8]!
   1aa58:	str	lr, [sp, #4]
   1aa5c:	mov	r0, #1
   1aa60:	bl	18070 <__assert_fail@plt+0x62fc>
   1aa64:	ldr	r4, [sp]
   1aa68:	add	sp, sp, #4
   1aa6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa74:	strd	r6, [sp, #8]
   1aa78:	strd	r8, [sp, #16]
   1aa7c:	strd	sl, [sp, #24]
   1aa80:	str	lr, [sp, #32]
   1aa84:	sub	sp, sp, #12
   1aa88:	str	r0, [sp]
   1aa8c:	mov	r5, r1
   1aa90:	mov	r6, r2
   1aa94:	str	r2, [sp, #4]
   1aa98:	mov	r9, r3
   1aa9c:	bl	11b94 <strlen@plt>
   1aaa0:	ldr	r4, [r5]
   1aaa4:	cmp	r4, #0
   1aaa8:	beq	1ab64 <__assert_fail@plt+0x8df0>
   1aaac:	mov	r8, r0
   1aab0:	mov	fp, #0
   1aab4:	mvn	sl, #0
   1aab8:	mov	r7, fp
   1aabc:	b	1aadc <__assert_fail@plt+0x8d68>
   1aac0:	mov	sl, r7
   1aac4:	b	1ab44 <__assert_fail@plt+0x8dd0>
   1aac8:	add	r7, r7, #1
   1aacc:	ldr	r4, [r5, #4]!
   1aad0:	add	r6, r6, r9
   1aad4:	cmp	r4, #0
   1aad8:	beq	1ab3c <__assert_fail@plt+0x8dc8>
   1aadc:	mov	r2, r8
   1aae0:	ldr	r1, [sp]
   1aae4:	mov	r0, r4
   1aae8:	bl	11d20 <strncmp@plt>
   1aaec:	cmp	r0, #0
   1aaf0:	bne	1aac8 <__assert_fail@plt+0x8d54>
   1aaf4:	mov	r0, r4
   1aaf8:	bl	11b94 <strlen@plt>
   1aafc:	cmp	r0, r8
   1ab00:	beq	1aac0 <__assert_fail@plt+0x8d4c>
   1ab04:	cmn	sl, #1
   1ab08:	moveq	sl, r7
   1ab0c:	beq	1aac8 <__assert_fail@plt+0x8d54>
   1ab10:	ldr	r3, [sp, #4]
   1ab14:	cmp	r3, #0
   1ab18:	moveq	fp, #1
   1ab1c:	beq	1aac8 <__assert_fail@plt+0x8d54>
   1ab20:	mov	r2, r9
   1ab24:	mov	r1, r6
   1ab28:	mla	r0, r9, sl, r3
   1ab2c:	bl	1196c <memcmp@plt>
   1ab30:	cmp	r0, #0
   1ab34:	movne	fp, #1
   1ab38:	b	1aac8 <__assert_fail@plt+0x8d54>
   1ab3c:	cmp	fp, #0
   1ab40:	mvnne	sl, #1
   1ab44:	mov	r0, sl
   1ab48:	add	sp, sp, #12
   1ab4c:	ldrd	r4, [sp]
   1ab50:	ldrd	r6, [sp, #8]
   1ab54:	ldrd	r8, [sp, #16]
   1ab58:	ldrd	sl, [sp, #24]
   1ab5c:	add	sp, sp, #32
   1ab60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab64:	mvn	sl, #0
   1ab68:	b	1ab44 <__assert_fail@plt+0x8dd0>
   1ab6c:	strd	r4, [sp, #-16]!
   1ab70:	str	r6, [sp, #8]
   1ab74:	str	lr, [sp, #12]
   1ab78:	mov	r6, r0
   1ab7c:	ldr	r0, [r1]
   1ab80:	cmp	r0, #0
   1ab84:	beq	1abcc <__assert_fail@plt+0x8e58>
   1ab88:	mov	r4, r1
   1ab8c:	mov	r5, #0
   1ab90:	mov	r1, r6
   1ab94:	bl	118a0 <strcmp@plt>
   1ab98:	cmp	r0, #0
   1ab9c:	beq	1abb8 <__assert_fail@plt+0x8e44>
   1aba0:	add	r5, r5, #1
   1aba4:	ldr	r0, [r4, #4]!
   1aba8:	cmp	r0, #0
   1abac:	bne	1ab90 <__assert_fail@plt+0x8e1c>
   1abb0:	mvn	r0, #0
   1abb4:	b	1abbc <__assert_fail@plt+0x8e48>
   1abb8:	mov	r0, r5
   1abbc:	ldrd	r4, [sp]
   1abc0:	ldr	r6, [sp, #8]
   1abc4:	add	sp, sp, #12
   1abc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abcc:	mvn	r0, #0
   1abd0:	b	1abbc <__assert_fail@plt+0x8e48>
   1abd4:	strd	r4, [sp, #-16]!
   1abd8:	str	r6, [sp, #8]
   1abdc:	str	lr, [sp, #12]
   1abe0:	sub	sp, sp, #8
   1abe4:	mov	r6, r0
   1abe8:	mov	r5, r1
   1abec:	cmn	r2, #1
   1abf0:	mov	r2, #5
   1abf4:	movweq	r1, #39072	; 0x98a0
   1abf8:	movteq	r1, #2
   1abfc:	movwne	r1, #39100	; 0x98bc
   1ac00:	movtne	r1, #2
   1ac04:	mov	r0, #0
   1ac08:	bl	11984 <dcgettext@plt>
   1ac0c:	mov	r4, r0
   1ac10:	mov	r2, r5
   1ac14:	mov	r1, #8
   1ac18:	mov	r0, #0
   1ac1c:	bl	22cc4 <_obstack_memory_used@@Base+0x1fb4>
   1ac20:	mov	r5, r0
   1ac24:	mov	r1, r6
   1ac28:	mov	r0, #1
   1ac2c:	bl	23024 <_obstack_memory_used@@Base+0x2314>
   1ac30:	str	r0, [sp]
   1ac34:	mov	r3, r5
   1ac38:	mov	r2, r4
   1ac3c:	mov	r1, #0
   1ac40:	mov	r0, r1
   1ac44:	bl	11a8c <error@plt>
   1ac48:	add	sp, sp, #8
   1ac4c:	ldrd	r4, [sp]
   1ac50:	ldr	r6, [sp, #8]
   1ac54:	add	sp, sp, #12
   1ac58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ac60:	strd	r6, [sp, #8]
   1ac64:	strd	r8, [sp, #16]
   1ac68:	strd	sl, [sp, #24]
   1ac6c:	str	lr, [sp, #32]
   1ac70:	sub	sp, sp, #12
   1ac74:	mov	r7, r0
   1ac78:	mov	r4, r1
   1ac7c:	mov	r8, r2
   1ac80:	mov	r2, #5
   1ac84:	movw	r1, #39132	; 0x98dc
   1ac88:	movt	r1, #2
   1ac8c:	mov	r0, #0
   1ac90:	bl	11984 <dcgettext@plt>
   1ac94:	movw	r3, #45856	; 0xb320
   1ac98:	movt	r3, #3
   1ac9c:	ldr	r1, [r3]
   1aca0:	bl	11864 <fputs_unlocked@plt>
   1aca4:	ldr	r5, [r7]
   1aca8:	cmp	r5, #0
   1acac:	beq	1ad58 <__assert_fail@plt+0x8fe4>
   1acb0:	mov	r3, #0
   1acb4:	str	r3, [sp]
   1acb8:	mov	r6, r3
   1acbc:	movw	sl, #45856	; 0xb320
   1acc0:	movt	sl, #3
   1acc4:	movw	fp, #39156	; 0x98f4
   1acc8:	movt	fp, #2
   1accc:	movw	r3, #39164	; 0x98fc
   1acd0:	movt	r3, #2
   1acd4:	str	r3, [sp, #4]
   1acd8:	b	1ad14 <__assert_fail@plt+0x8fa0>
   1acdc:	ldr	r9, [sl]
   1ace0:	mov	r0, r5
   1ace4:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   1ace8:	mov	r3, r0
   1acec:	mov	r2, fp
   1acf0:	mov	r1, #1
   1acf4:	mov	r0, r9
   1acf8:	bl	11c18 <__fprintf_chk@plt>
   1acfc:	str	r4, [sp]
   1ad00:	add	r6, r6, #1
   1ad04:	ldr	r5, [r7, #4]!
   1ad08:	add	r4, r4, r8
   1ad0c:	cmp	r5, #0
   1ad10:	beq	1ad58 <__assert_fail@plt+0x8fe4>
   1ad14:	cmp	r6, #0
   1ad18:	beq	1acdc <__assert_fail@plt+0x8f68>
   1ad1c:	mov	r2, r8
   1ad20:	mov	r1, r4
   1ad24:	ldr	r0, [sp]
   1ad28:	bl	1196c <memcmp@plt>
   1ad2c:	cmp	r0, #0
   1ad30:	bne	1acdc <__assert_fail@plt+0x8f68>
   1ad34:	ldr	r9, [sl]
   1ad38:	mov	r0, r5
   1ad3c:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   1ad40:	mov	r3, r0
   1ad44:	ldr	r2, [sp, #4]
   1ad48:	mov	r1, #1
   1ad4c:	mov	r0, r9
   1ad50:	bl	11c18 <__fprintf_chk@plt>
   1ad54:	b	1ad00 <__assert_fail@plt+0x8f8c>
   1ad58:	movw	r3, #45856	; 0xb320
   1ad5c:	movt	r3, #3
   1ad60:	ldr	r0, [r3]
   1ad64:	ldr	r3, [r0, #20]
   1ad68:	ldr	r2, [r0, #24]
   1ad6c:	cmp	r3, r2
   1ad70:	addcc	r2, r3, #1
   1ad74:	strcc	r2, [r0, #20]
   1ad78:	movcc	r2, #10
   1ad7c:	strbcc	r2, [r3]
   1ad80:	bcs	1ada0 <__assert_fail@plt+0x902c>
   1ad84:	add	sp, sp, #12
   1ad88:	ldrd	r4, [sp]
   1ad8c:	ldrd	r6, [sp, #8]
   1ad90:	ldrd	r8, [sp, #16]
   1ad94:	ldrd	sl, [sp, #24]
   1ad98:	add	sp, sp, #32
   1ad9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ada0:	mov	r1, #10
   1ada4:	bl	11c48 <__overflow@plt>
   1ada8:	b	1ad84 <__assert_fail@plt+0x9010>
   1adac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1adb0:	strd	r6, [sp, #8]
   1adb4:	str	r8, [sp, #16]
   1adb8:	str	lr, [sp, #20]
   1adbc:	mov	r7, r0
   1adc0:	mov	r5, r1
   1adc4:	mov	r4, r2
   1adc8:	mov	r6, r3
   1adcc:	ldrb	r3, [sp, #32]
   1add0:	cmp	r3, #0
   1add4:	beq	1ae08 <__assert_fail@plt+0x9094>
   1add8:	ldr	r3, [sp, #24]
   1addc:	mov	r2, r6
   1ade0:	mov	r1, r4
   1ade4:	mov	r0, r5
   1ade8:	bl	1aa70 <__assert_fail@plt+0x8cfc>
   1adec:	cmp	r0, #0
   1adf0:	blt	1ae18 <__assert_fail@plt+0x90a4>
   1adf4:	ldrd	r4, [sp]
   1adf8:	ldrd	r6, [sp, #8]
   1adfc:	ldr	r8, [sp, #16]
   1ae00:	add	sp, sp, #20
   1ae04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae08:	mov	r1, r2
   1ae0c:	mov	r0, r5
   1ae10:	bl	1ab6c <__assert_fail@plt+0x8df8>
   1ae14:	b	1adec <__assert_fail@plt+0x9078>
   1ae18:	mov	r2, r0
   1ae1c:	mov	r1, r5
   1ae20:	mov	r0, r7
   1ae24:	bl	1abd4 <__assert_fail@plt+0x8e60>
   1ae28:	ldr	r2, [sp, #24]
   1ae2c:	mov	r1, r6
   1ae30:	mov	r0, r4
   1ae34:	bl	1ac5c <__assert_fail@plt+0x8ee8>
   1ae38:	ldr	r3, [sp, #28]
   1ae3c:	blx	r3
   1ae40:	mvn	r0, #0
   1ae44:	b	1adf4 <__assert_fail@plt+0x9080>
   1ae48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ae4c:	strd	r6, [sp, #8]
   1ae50:	str	r8, [sp, #16]
   1ae54:	str	lr, [sp, #20]
   1ae58:	ldr	r7, [r1]
   1ae5c:	cmp	r7, #0
   1ae60:	beq	1ae9c <__assert_fail@plt+0x9128>
   1ae64:	mov	r6, r3
   1ae68:	mov	r8, r0
   1ae6c:	mov	r4, r2
   1ae70:	mov	r5, r1
   1ae74:	mov	r2, r6
   1ae78:	mov	r1, r4
   1ae7c:	mov	r0, r8
   1ae80:	bl	1196c <memcmp@plt>
   1ae84:	cmp	r0, #0
   1ae88:	beq	1ae9c <__assert_fail@plt+0x9128>
   1ae8c:	ldr	r7, [r5, #4]!
   1ae90:	add	r4, r4, r6
   1ae94:	cmp	r7, #0
   1ae98:	bne	1ae74 <__assert_fail@plt+0x9100>
   1ae9c:	mov	r0, r7
   1aea0:	ldrd	r4, [sp]
   1aea4:	ldrd	r6, [sp, #8]
   1aea8:	ldr	r8, [sp, #16]
   1aeac:	add	sp, sp, #20
   1aeb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb4:	ldrb	r3, [r0]
   1aeb8:	cmp	r3, #47	; 0x2f
   1aebc:	bne	1aecc <__assert_fail@plt+0x9158>
   1aec0:	ldrb	r3, [r0, #1]!
   1aec4:	cmp	r3, #47	; 0x2f
   1aec8:	beq	1aec0 <__assert_fail@plt+0x914c>
   1aecc:	ldrb	r2, [r0]
   1aed0:	cmp	r2, #0
   1aed4:	bxeq	lr
   1aed8:	push	{lr}		; (str lr, [sp, #-4]!)
   1aedc:	mov	r1, r0
   1aee0:	mov	r3, #0
   1aee4:	mov	lr, #1
   1aee8:	mov	ip, r3
   1aeec:	b	1af08 <__assert_fail@plt+0x9194>
   1aef0:	cmp	r3, #0
   1aef4:	movne	r0, r1
   1aef8:	movne	r3, ip
   1aefc:	ldrb	r2, [r1, #1]!
   1af00:	cmp	r2, #0
   1af04:	beq	1af18 <__assert_fail@plt+0x91a4>
   1af08:	cmp	r2, #47	; 0x2f
   1af0c:	moveq	r3, lr
   1af10:	bne	1aef0 <__assert_fail@plt+0x917c>
   1af14:	b	1aefc <__assert_fail@plt+0x9188>
   1af18:	pop	{pc}		; (ldr pc, [sp], #4)
   1af1c:	str	r4, [sp, #-8]!
   1af20:	str	lr, [sp, #4]
   1af24:	mov	r4, r0
   1af28:	bl	11b94 <strlen@plt>
   1af2c:	cmp	r0, #1
   1af30:	bls	1af50 <__assert_fail@plt+0x91dc>
   1af34:	add	r3, r4, r0
   1af38:	ldrb	r3, [r3, #-1]
   1af3c:	cmp	r3, #47	; 0x2f
   1af40:	subeq	r0, r0, #2
   1af44:	addeq	r3, r4, r0
   1af48:	rsbeq	r1, r4, #1
   1af4c:	beq	1af5c <__assert_fail@plt+0x91e8>
   1af50:	ldr	r4, [sp]
   1af54:	add	sp, sp, #4
   1af58:	pop	{pc}		; (ldr pc, [sp], #4)
   1af5c:	add	r0, r1, r3
   1af60:	cmp	r3, r4
   1af64:	beq	1af50 <__assert_fail@plt+0x91dc>
   1af68:	ldrb	r2, [r3], #-1
   1af6c:	cmp	r2, #47	; 0x2f
   1af70:	bne	1af50 <__assert_fail@plt+0x91dc>
   1af74:	b	1af5c <__assert_fail@plt+0x91e8>
   1af78:	cmp	r2, #0
   1af7c:	cmpne	r0, r1
   1af80:	beq	1b00c <__assert_fail@plt+0x9298>
   1af84:	strd	r4, [sp, #-16]!
   1af88:	str	r6, [sp, #8]
   1af8c:	str	lr, [sp, #12]
   1af90:	mov	r5, r2
   1af94:	sub	lr, r0, #1
   1af98:	sub	r1, r1, #1
   1af9c:	ldrb	r3, [lr, #1]!
   1afa0:	sub	r2, r3, #65	; 0x41
   1afa4:	cmp	r2, #25
   1afa8:	addls	r3, r3, #32
   1afac:	uxtb	r4, r3
   1afb0:	ldrb	r2, [r1, #1]!
   1afb4:	sub	ip, r2, #65	; 0x41
   1afb8:	cmp	ip, #25
   1afbc:	addls	r2, r2, #32
   1afc0:	uxtb	r6, r2
   1afc4:	mvn	ip, lr
   1afc8:	add	ip, ip, r5
   1afcc:	cmn	r0, ip
   1afd0:	moveq	ip, #1
   1afd4:	movne	ip, #0
   1afd8:	cmp	r4, #0
   1afdc:	moveq	ip, #1
   1afe0:	cmp	ip, #0
   1afe4:	bne	1aff0 <__assert_fail@plt+0x927c>
   1afe8:	cmp	r4, r6
   1afec:	beq	1af9c <__assert_fail@plt+0x9228>
   1aff0:	uxtb	r3, r3
   1aff4:	uxtb	r0, r2
   1aff8:	sub	r0, r3, r0
   1affc:	ldrd	r4, [sp]
   1b000:	ldr	r6, [sp, #8]
   1b004:	add	sp, sp, #12
   1b008:	pop	{pc}		; (ldr pc, [sp], #4)
   1b00c:	mov	r0, #0
   1b010:	bx	lr
   1b014:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b018:	strd	r6, [sp, #8]
   1b01c:	strd	r8, [sp, #16]
   1b020:	strd	sl, [sp, #24]
   1b024:	str	lr, [sp, #32]
   1b028:	sub	sp, sp, #3232	; 0xca0
   1b02c:	sub	sp, sp, #12
   1b030:	and	sl, r1, #3
   1b034:	sub	r3, sl, #1
   1b038:	tst	r3, sl
   1b03c:	bne	1b0dc <__assert_fail@plt+0x9368>
   1b040:	mov	r8, r0
   1b044:	mov	r5, r1
   1b048:	cmp	r0, #0
   1b04c:	beq	1b0f0 <__assert_fail@plt+0x937c>
   1b050:	ldrb	r2, [r0]
   1b054:	cmp	r2, #0
   1b058:	beq	1b104 <__assert_fail@plt+0x9390>
   1b05c:	add	r3, sp, #152	; 0x98
   1b060:	str	r3, [sp, #144]	; 0x90
   1b064:	mov	r3, #1024	; 0x400
   1b068:	str	r3, [sp, #148]	; 0x94
   1b06c:	add	r1, sp, #1184	; 0x4a0
   1b070:	str	r1, [sp, #1176]	; 0x498
   1b074:	str	r3, [sp, #1180]	; 0x49c
   1b078:	add	r1, sp, #2208	; 0x8a0
   1b07c:	add	r1, r1, #8
   1b080:	str	r1, [sp, #2208]	; 0x8a0
   1b084:	str	r3, [sp, #2212]	; 0x8a4
   1b088:	cmp	r2, #47	; 0x2f
   1b08c:	addne	r4, sp, #2208	; 0x8a0
   1b090:	addne	r4, r4, #8
   1b094:	beq	1b134 <__assert_fail@plt+0x93c0>
   1b098:	ldr	r1, [sp, #2212]	; 0x8a4
   1b09c:	mov	r0, r4
   1b0a0:	bl	11b64 <getcwd@plt>
   1b0a4:	cmp	r0, #0
   1b0a8:	bne	1b11c <__assert_fail@plt+0x93a8>
   1b0ac:	bl	11bb8 <__errno_location@plt>
   1b0b0:	ldr	r3, [r0]
   1b0b4:	cmp	r3, #12
   1b0b8:	beq	1b118 <__assert_fail@plt+0x93a4>
   1b0bc:	cmp	r3, #34	; 0x22
   1b0c0:	bne	1b690 <__assert_fail@plt+0x991c>
   1b0c4:	add	r0, sp, #2208	; 0x8a0
   1b0c8:	bl	230bc <_obstack_memory_used@@Base+0x23ac>
   1b0cc:	cmp	r0, #0
   1b0d0:	beq	1b118 <__assert_fail@plt+0x93a4>
   1b0d4:	ldr	r4, [sp, #2208]	; 0x8a0
   1b0d8:	b	1b098 <__assert_fail@plt+0x9324>
   1b0dc:	bl	11bb8 <__errno_location@plt>
   1b0e0:	mov	r3, #22
   1b0e4:	str	r3, [r0]
   1b0e8:	mov	r0, #0
   1b0ec:	b	1b6e4 <__assert_fail@plt+0x9970>
   1b0f0:	bl	11bb8 <__errno_location@plt>
   1b0f4:	mov	r3, #22
   1b0f8:	str	r3, [r0]
   1b0fc:	mov	r0, r8
   1b100:	b	1b6e4 <__assert_fail@plt+0x9970>
   1b104:	bl	11bb8 <__errno_location@plt>
   1b108:	mov	r3, #2
   1b10c:	str	r3, [r0]
   1b110:	mov	r0, #0
   1b114:	b	1b6e4 <__assert_fail@plt+0x9970>
   1b118:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1b11c:	mov	r1, #0
   1b120:	mov	r0, r4
   1b124:	bl	119d8 <rawmemchr@plt>
   1b128:	mov	fp, r4
   1b12c:	mov	r4, r0
   1b130:	b	1b148 <__assert_fail@plt+0x93d4>
   1b134:	mov	r3, #47	; 0x2f
   1b138:	strb	r3, [sp, #2216]	; 0x8a8
   1b13c:	add	fp, sp, #2208	; 0x8a0
   1b140:	add	fp, fp, #8
   1b144:	add	r4, fp, #1
   1b148:	and	r3, r5, #4
   1b14c:	str	r3, [sp, #12]
   1b150:	mov	r3, #0
   1b154:	str	r3, [sp, #16]
   1b158:	str	r3, [sp, #20]
   1b15c:	str	r3, [sp, #24]
   1b160:	movw	r3, #37808	; 0x93b0
   1b164:	movt	r3, #2
   1b168:	str	r3, [sp, #28]
   1b16c:	b	1b508 <__assert_fail@plt+0x9794>
   1b170:	ldrb	r3, [r8, #1]
   1b174:	cmp	r3, #46	; 0x2e
   1b178:	bne	1b57c <__assert_fail@plt+0x9808>
   1b17c:	add	r3, fp, #1
   1b180:	cmp	r4, r3
   1b184:	bls	1b504 <__assert_fail@plt+0x9790>
   1b188:	sub	r3, r4, #1
   1b18c:	cmp	fp, r3
   1b190:	bcs	1b648 <__assert_fail@plt+0x98d4>
   1b194:	ldrb	r2, [r4, #-2]
   1b198:	cmp	r2, #47	; 0x2f
   1b19c:	moveq	r4, r3
   1b1a0:	beq	1b504 <__assert_fail@plt+0x9790>
   1b1a4:	sub	r3, r4, #2
   1b1a8:	mov	r1, fp
   1b1ac:	mov	r4, r3
   1b1b0:	cmp	r3, r1
   1b1b4:	beq	1b504 <__assert_fail@plt+0x9790>
   1b1b8:	ldrb	r2, [r3, #-1]!
   1b1bc:	cmp	r2, #47	; 0x2f
   1b1c0:	beq	1b504 <__assert_fail@plt+0x9790>
   1b1c4:	b	1b1ac <__assert_fail@plt+0x9438>
   1b1c8:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1b1cc:	ldr	r9, [sp, #1176]	; 0x498
   1b1d0:	ldr	r6, [sp, #1180]	; 0x49c
   1b1d4:	sub	r6, r6, #1
   1b1d8:	mov	r2, r6
   1b1dc:	mov	r1, r9
   1b1e0:	mov	r0, fp
   1b1e4:	bl	11a08 <readlink@plt>
   1b1e8:	cmp	r6, r0
   1b1ec:	bgt	1b208 <__assert_fail@plt+0x9494>
   1b1f0:	add	r0, sp, #1168	; 0x490
   1b1f4:	add	r0, r0, #8
   1b1f8:	bl	230bc <_obstack_memory_used@@Base+0x23ac>
   1b1fc:	cmp	r0, #0
   1b200:	bne	1b1cc <__assert_fail@plt+0x9458>
   1b204:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1b208:	mov	r7, r0
   1b20c:	cmp	r0, #0
   1b210:	blt	1b5fc <__assert_fail@plt+0x9888>
   1b214:	ldr	r3, [sp, #24]
   1b218:	cmp	r3, #19
   1b21c:	addle	r3, r3, #1
   1b220:	strle	r3, [sp, #24]
   1b224:	ble	1b30c <__assert_fail@plt+0x9598>
   1b228:	ldrb	r3, [r8]
   1b22c:	cmp	r3, #0
   1b230:	beq	1b30c <__assert_fail@plt+0x9598>
   1b234:	sub	r6, r8, r5
   1b238:	mov	r3, #0
   1b23c:	strb	r3, [r4, r6]
   1b240:	ldrb	r1, [fp]
   1b244:	add	r2, sp, #40	; 0x28
   1b248:	ldr	r3, [sp, #28]
   1b24c:	cmp	r1, #0
   1b250:	movne	r3, fp
   1b254:	mov	r1, r3
   1b258:	mov	r0, #3
   1b25c:	bl	11cfc <__xstat64@plt>
   1b260:	cmp	r0, #0
   1b264:	bne	1b2ac <__assert_fail@plt+0x9538>
   1b268:	ldrb	r3, [r8]
   1b26c:	strb	r3, [r4, r6]
   1b270:	ldr	r3, [sp, #16]
   1b274:	cmp	r3, #0
   1b278:	beq	1b2c4 <__assert_fail@plt+0x9550>
   1b27c:	add	r2, sp, #40	; 0x28
   1b280:	mov	r1, r8
   1b284:	ldr	r6, [sp, #16]
   1b288:	mov	r0, r6
   1b28c:	bl	1ba00 <__assert_fail@plt+0x9c8c>
   1b290:	cmp	r0, #0
   1b294:	beq	1b2fc <__assert_fail@plt+0x9588>
   1b298:	cmp	sl, #2
   1b29c:	beq	1b504 <__assert_fail@plt+0x9790>
   1b2a0:	bl	11bb8 <__errno_location@plt>
   1b2a4:	mov	r3, #40	; 0x28
   1b2a8:	str	r3, [r0]
   1b2ac:	mov	r6, #1
   1b2b0:	ldr	r0, [sp, #16]
   1b2b4:	cmp	r0, #0
   1b2b8:	beq	1b698 <__assert_fail@plt+0x9924>
   1b2bc:	bl	1ceb8 <__assert_fail@plt+0xb144>
   1b2c0:	b	1b698 <__assert_fail@plt+0x9924>
   1b2c4:	movw	r3, #54464	; 0xd4c0
   1b2c8:	movt	r3, #1
   1b2cc:	str	r3, [sp]
   1b2d0:	movw	r3, #54364	; 0xd45c
   1b2d4:	movt	r3, #1
   1b2d8:	movw	r2, #54292	; 0xd414
   1b2dc:	movt	r2, #1
   1b2e0:	mov	r1, #0
   1b2e4:	mov	r0, #7
   1b2e8:	bl	1ccec <__assert_fail@plt+0xaf78>
   1b2ec:	subs	r3, r0, #0
   1b2f0:	str	r3, [sp, #16]
   1b2f4:	bne	1b27c <__assert_fail@plt+0x9508>
   1b2f8:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1b2fc:	add	r2, sp, #40	; 0x28
   1b300:	mov	r1, r8
   1b304:	mov	r0, r6
   1b308:	bl	1b97c <__assert_fail@plt+0x9c08>
   1b30c:	mov	r3, #0
   1b310:	strb	r3, [r9, r7]
   1b314:	ldr	r8, [sp, #144]	; 0x90
   1b318:	ldr	r3, [sp, #20]
   1b31c:	cmp	r3, #0
   1b320:	beq	1b72c <__assert_fail@plt+0x99b8>
   1b324:	sub	r3, r5, r8
   1b328:	str	r3, [sp, #36]	; 0x24
   1b32c:	mov	r0, r5
   1b330:	bl	11b94 <strlen@plt>
   1b334:	str	r0, [sp, #32]
   1b338:	add	r6, r7, r0
   1b33c:	ldr	r3, [sp, #148]	; 0x94
   1b340:	cmp	r3, r6
   1b344:	bhi	1b374 <__assert_fail@plt+0x9600>
   1b348:	add	r0, sp, #144	; 0x90
   1b34c:	bl	23140 <_obstack_memory_used@@Base+0x2430>
   1b350:	cmp	r0, #0
   1b354:	beq	1b3ec <__assert_fail@plt+0x9678>
   1b358:	ldr	r3, [sp, #148]	; 0x94
   1b35c:	cmp	r3, r6
   1b360:	bls	1b348 <__assert_fail@plt+0x95d4>
   1b364:	ldr	r8, [sp, #144]	; 0x90
   1b368:	ldr	r3, [sp, #20]
   1b36c:	cmp	r3, #0
   1b370:	beq	1b37c <__assert_fail@plt+0x9608>
   1b374:	ldr	r3, [sp, #36]	; 0x24
   1b378:	add	r5, r8, r3
   1b37c:	ldr	r3, [sp, #32]
   1b380:	add	r2, r3, #1
   1b384:	mov	r1, r5
   1b388:	add	r0, r8, r7
   1b38c:	bl	118f4 <memmove@plt>
   1b390:	mov	r2, r7
   1b394:	mov	r1, r9
   1b398:	mov	r0, r8
   1b39c:	bl	11930 <memcpy@plt>
   1b3a0:	mov	r5, r0
   1b3a4:	ldrb	r3, [r9]
   1b3a8:	cmp	r3, #47	; 0x2f
   1b3ac:	beq	1b3f0 <__assert_fail@plt+0x967c>
   1b3b0:	add	r3, fp, #1
   1b3b4:	cmp	r4, r3
   1b3b8:	movls	r3, #1
   1b3bc:	strls	r3, [sp, #20]
   1b3c0:	bls	1b504 <__assert_fail@plt+0x9790>
   1b3c4:	sub	r3, r4, #1
   1b3c8:	cmp	r3, fp
   1b3cc:	bls	1b650 <__assert_fail@plt+0x98dc>
   1b3d0:	ldrb	r2, [r4, #-2]
   1b3d4:	cmp	r2, #47	; 0x2f
   1b3d8:	bne	1b404 <__assert_fail@plt+0x9690>
   1b3dc:	mov	r4, r3
   1b3e0:	mov	r3, #1
   1b3e4:	str	r3, [sp, #20]
   1b3e8:	b	1b504 <__assert_fail@plt+0x9790>
   1b3ec:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1b3f0:	mov	r4, fp
   1b3f4:	strb	r3, [r4], #1
   1b3f8:	mov	r3, #1
   1b3fc:	str	r3, [sp, #20]
   1b400:	b	1b504 <__assert_fail@plt+0x9790>
   1b404:	sub	r3, r4, #2
   1b408:	mov	r1, fp
   1b40c:	mov	r4, r3
   1b410:	cmp	r3, r1
   1b414:	beq	1b660 <__assert_fail@plt+0x98ec>
   1b418:	ldrb	r2, [r3, #-1]!
   1b41c:	cmp	r2, #47	; 0x2f
   1b420:	bne	1b40c <__assert_fail@plt+0x9698>
   1b424:	mov	r3, #1
   1b428:	str	r3, [sp, #20]
   1b42c:	b	1b504 <__assert_fail@plt+0x9790>
   1b430:	mov	r3, r1
   1b434:	add	r1, r3, #1
   1b438:	ldrb	r2, [r3, #1]
   1b43c:	cmp	r2, #47	; 0x2f
   1b440:	beq	1b430 <__assert_fail@plt+0x96bc>
   1b444:	add	r3, r3, #2
   1b448:	cmp	r2, #0
   1b44c:	beq	1b47c <__assert_fail@plt+0x9708>
   1b450:	cmp	r2, #46	; 0x2e
   1b454:	bne	1b4ac <__assert_fail@plt+0x9738>
   1b458:	ldrb	r2, [r1, #1]
   1b45c:	cmp	r2, #0
   1b460:	beq	1b47c <__assert_fail@plt+0x9708>
   1b464:	cmp	r2, #46	; 0x2e
   1b468:	bne	1b608 <__assert_fail@plt+0x9894>
   1b46c:	ldrb	r2, [r1, #2]
   1b470:	cmp	r2, #47	; 0x2f
   1b474:	cmpne	r2, #0
   1b478:	bne	1b608 <__assert_fail@plt+0x9894>
   1b47c:	movw	r3, #37888	; 0x9400
   1b480:	movt	r3, #2
   1b484:	ldrh	r3, [r3]
   1b488:	strh	r3, [r4]
   1b48c:	mov	r3, #512	; 0x200
   1b490:	mov	r2, #0
   1b494:	mov	r1, fp
   1b498:	mvn	r0, #99	; 0x63
   1b49c:	bl	1190c <faccessat@plt>
   1b4a0:	adds	r6, r0, #0
   1b4a4:	movne	r6, #1
   1b4a8:	b	1b4c8 <__assert_fail@plt+0x9754>
   1b4ac:	ldr	r3, [sp, #12]
   1b4b0:	cmp	r3, #0
   1b4b4:	bne	1b618 <__assert_fail@plt+0x98a4>
   1b4b8:	bl	11bb8 <__errno_location@plt>
   1b4bc:	ldr	r6, [r0]
   1b4c0:	subs	r6, r6, #22
   1b4c4:	movne	r6, #1
   1b4c8:	cmp	r6, #0
   1b4cc:	beq	1b504 <__assert_fail@plt+0x9790>
   1b4d0:	cmp	sl, #1
   1b4d4:	bne	1b2b0 <__assert_fail@plt+0x953c>
   1b4d8:	bl	11bb8 <__errno_location@plt>
   1b4dc:	ldr	r3, [r0]
   1b4e0:	cmp	r3, #2
   1b4e4:	bne	1b2b0 <__assert_fail@plt+0x953c>
   1b4e8:	movw	r1, #37888	; 0x9400
   1b4ec:	movt	r1, #2
   1b4f0:	mov	r0, r5
   1b4f4:	bl	11d68 <strspn@plt>
   1b4f8:	ldrb	r3, [r5, r0]
   1b4fc:	cmp	r3, #0
   1b500:	bne	1b2b0 <__assert_fail@plt+0x953c>
   1b504:	mov	r8, r5
   1b508:	ldrb	r3, [r8]
   1b50c:	cmp	r3, #0
   1b510:	beq	1b66c <__assert_fail@plt+0x98f8>
   1b514:	cmp	r3, #47	; 0x2f
   1b518:	bne	1b534 <__assert_fail@plt+0x97c0>
   1b51c:	ldrb	r3, [r8, #1]!
   1b520:	cmp	r3, #47	; 0x2f
   1b524:	beq	1b51c <__assert_fail@plt+0x97a8>
   1b528:	cmp	r3, #47	; 0x2f
   1b52c:	cmpne	r3, #0
   1b530:	beq	1b66c <__assert_fail@plt+0x98f8>
   1b534:	mov	r5, r8
   1b538:	ldrb	r2, [r5, #1]!
   1b53c:	cmp	r2, #0
   1b540:	cmpne	r2, #47	; 0x2f
   1b544:	bne	1b538 <__assert_fail@plt+0x97c4>
   1b548:	subs	r6, r5, r8
   1b54c:	beq	1b66c <__assert_fail@plt+0x98f8>
   1b550:	cmp	r3, #46	; 0x2e
   1b554:	movne	r2, #0
   1b558:	moveq	r2, #1
   1b55c:	cmp	r6, #1
   1b560:	cmpeq	r3, #46	; 0x2e
   1b564:	beq	1b504 <__assert_fail@plt+0x9790>
   1b568:	cmp	r6, #2
   1b56c:	movne	r3, #0
   1b570:	andeq	r3, r2, #1
   1b574:	cmp	r3, #0
   1b578:	bne	1b170 <__assert_fail@plt+0x93fc>
   1b57c:	ldrb	r3, [r4, #-1]
   1b580:	cmp	r3, #47	; 0x2f
   1b584:	beq	1b590 <__assert_fail@plt+0x981c>
   1b588:	mov	r3, #47	; 0x2f
   1b58c:	strb	r3, [r4], #1
   1b590:	add	r7, r6, #2
   1b594:	ldr	r3, [sp, #2212]	; 0x8a4
   1b598:	add	r3, fp, r3
   1b59c:	sub	r3, r3, r4
   1b5a0:	cmp	r3, r7
   1b5a4:	bcs	1b5d4 <__assert_fail@plt+0x9860>
   1b5a8:	sub	r9, r4, fp
   1b5ac:	add	r0, sp, #2208	; 0x8a0
   1b5b0:	bl	23140 <_obstack_memory_used@@Base+0x2430>
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1b1c8 <__assert_fail@plt+0x9454>
   1b5bc:	ldr	fp, [sp, #2208]	; 0x8a0
   1b5c0:	add	r4, fp, r9
   1b5c4:	ldr	r3, [sp, #2212]	; 0x8a4
   1b5c8:	sub	r3, r3, r9
   1b5cc:	cmp	r3, r7
   1b5d0:	bcc	1b5a8 <__assert_fail@plt+0x9834>
   1b5d4:	mov	r2, r6
   1b5d8:	mov	r1, r8
   1b5dc:	mov	r0, r4
   1b5e0:	bl	11b40 <mempcpy@plt>
   1b5e4:	mov	r4, r0
   1b5e8:	mov	r3, #0
   1b5ec:	strb	r3, [r0]
   1b5f0:	ldr	r3, [sp, #12]
   1b5f4:	cmp	r3, #0
   1b5f8:	beq	1b1cc <__assert_fail@plt+0x9458>
   1b5fc:	cmp	sl, #2
   1b600:	movne	r3, r5
   1b604:	beq	1b504 <__assert_fail@plt+0x9790>
   1b608:	ldrb	r2, [r3]
   1b60c:	cmp	r2, #47	; 0x2f
   1b610:	beq	1b434 <__assert_fail@plt+0x96c0>
   1b614:	b	1b4ac <__assert_fail@plt+0x9738>
   1b618:	ldrb	r3, [r5]
   1b61c:	cmp	r3, #0
   1b620:	movne	r6, #0
   1b624:	bne	1b4c8 <__assert_fail@plt+0x9754>
   1b628:	mov	r3, #512	; 0x200
   1b62c:	mov	r2, #0
   1b630:	mov	r1, fp
   1b634:	mvn	r0, #99	; 0x63
   1b638:	bl	1190c <faccessat@plt>
   1b63c:	adds	r6, r0, #0
   1b640:	movne	r6, #1
   1b644:	b	1b4c8 <__assert_fail@plt+0x9754>
   1b648:	mov	r4, r3
   1b64c:	b	1b504 <__assert_fail@plt+0x9790>
   1b650:	mov	r4, r3
   1b654:	mov	r3, #1
   1b658:	str	r3, [sp, #20]
   1b65c:	b	1b504 <__assert_fail@plt+0x9790>
   1b660:	mov	r3, #1
   1b664:	str	r3, [sp, #20]
   1b668:	b	1b504 <__assert_fail@plt+0x9790>
   1b66c:	add	r3, fp, #1
   1b670:	cmp	r4, r3
   1b674:	movls	r6, #0
   1b678:	bls	1b2b0 <__assert_fail@plt+0x953c>
   1b67c:	ldrb	r3, [r4, #-1]
   1b680:	cmp	r3, #47	; 0x2f
   1b684:	subeq	r4, r4, #1
   1b688:	mov	r6, #0
   1b68c:	b	1b2b0 <__assert_fail@plt+0x953c>
   1b690:	mov	fp, r4
   1b694:	mov	r6, #1
   1b698:	ldr	r0, [sp, #144]	; 0x90
   1b69c:	add	r3, sp, #152	; 0x98
   1b6a0:	cmp	r0, r3
   1b6a4:	beq	1b6ac <__assert_fail@plt+0x9938>
   1b6a8:	bl	1c200 <__assert_fail@plt+0xa48c>
   1b6ac:	ldr	r0, [sp, #1176]	; 0x498
   1b6b0:	add	r3, sp, #1184	; 0x4a0
   1b6b4:	cmp	r0, r3
   1b6b8:	beq	1b6c0 <__assert_fail@plt+0x994c>
   1b6bc:	bl	1c200 <__assert_fail@plt+0xa48c>
   1b6c0:	cmp	r6, #0
   1b6c4:	bne	1b704 <__assert_fail@plt+0x9990>
   1b6c8:	mov	r3, #0
   1b6cc:	strb	r3, [r4], #1
   1b6d0:	sub	r1, r4, fp
   1b6d4:	add	r0, sp, #2208	; 0x8a0
   1b6d8:	bl	23060 <_obstack_memory_used@@Base+0x2350>
   1b6dc:	cmp	r0, #0
   1b6e0:	beq	1b728 <__assert_fail@plt+0x99b4>
   1b6e4:	add	sp, sp, #3232	; 0xca0
   1b6e8:	add	sp, sp, #12
   1b6ec:	ldrd	r4, [sp]
   1b6f0:	ldrd	r6, [sp, #8]
   1b6f4:	ldrd	r8, [sp, #16]
   1b6f8:	ldrd	sl, [sp, #24]
   1b6fc:	add	sp, sp, #32
   1b700:	pop	{pc}		; (ldr pc, [sp], #4)
   1b704:	ldr	r0, [sp, #2208]	; 0x8a0
   1b708:	add	r3, sp, #2208	; 0x8a0
   1b70c:	add	r3, r3, #8
   1b710:	cmp	r0, r3
   1b714:	moveq	r0, #0
   1b718:	beq	1b6e4 <__assert_fail@plt+0x9970>
   1b71c:	bl	1c200 <__assert_fail@plt+0xa48c>
   1b720:	mov	r0, #0
   1b724:	b	1b6e4 <__assert_fail@plt+0x9970>
   1b728:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1b72c:	mov	r0, r5
   1b730:	bl	11b94 <strlen@plt>
   1b734:	str	r0, [sp, #32]
   1b738:	add	r6, r7, r0
   1b73c:	ldr	r3, [sp, #148]	; 0x94
   1b740:	cmp	r3, r6
   1b744:	movls	r3, #0
   1b748:	strls	r3, [sp, #36]	; 0x24
   1b74c:	bls	1b348 <__assert_fail@plt+0x95d4>
   1b750:	b	1b37c <__assert_fail@plt+0x9608>
   1b754:	movw	r3, #50124	; 0xc3cc
   1b758:	movt	r3, #3
   1b75c:	str	r0, [r3]
   1b760:	bx	lr
   1b764:	movw	r3, #50124	; 0xc3cc
   1b768:	movt	r3, #3
   1b76c:	strb	r0, [r3, #4]
   1b770:	bx	lr
   1b774:	strd	r4, [sp, #-16]!
   1b778:	str	r6, [sp, #8]
   1b77c:	str	lr, [sp, #12]
   1b780:	sub	sp, sp, #8
   1b784:	movw	r3, #45860	; 0xb324
   1b788:	movt	r3, #3
   1b78c:	ldr	r0, [r3]
   1b790:	bl	24e54 <_obstack_memory_used@@Base+0x4144>
   1b794:	cmp	r0, #0
   1b798:	beq	1b7c0 <__assert_fail@plt+0x9a4c>
   1b79c:	movw	r3, #50124	; 0xc3cc
   1b7a0:	movt	r3, #3
   1b7a4:	ldrb	r3, [r3, #4]
   1b7a8:	cmp	r3, #0
   1b7ac:	beq	1b7ec <__assert_fail@plt+0x9a78>
   1b7b0:	bl	11bb8 <__errno_location@plt>
   1b7b4:	ldr	r3, [r0]
   1b7b8:	cmp	r3, #32
   1b7bc:	bne	1b7ec <__assert_fail@plt+0x9a78>
   1b7c0:	movw	r3, #45856	; 0xb320
   1b7c4:	movt	r3, #3
   1b7c8:	ldr	r0, [r3]
   1b7cc:	bl	24e54 <_obstack_memory_used@@Base+0x4144>
   1b7d0:	cmp	r0, #0
   1b7d4:	bne	1b874 <__assert_fail@plt+0x9b00>
   1b7d8:	add	sp, sp, #8
   1b7dc:	ldrd	r4, [sp]
   1b7e0:	ldr	r6, [sp, #8]
   1b7e4:	add	sp, sp, #12
   1b7e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7ec:	mov	r2, #5
   1b7f0:	movw	r1, #39172	; 0x9904
   1b7f4:	movt	r1, #2
   1b7f8:	mov	r0, #0
   1b7fc:	bl	11984 <dcgettext@plt>
   1b800:	mov	r4, r0
   1b804:	movw	r3, #50124	; 0xc3cc
   1b808:	movt	r3, #3
   1b80c:	ldr	r5, [r3]
   1b810:	cmp	r5, #0
   1b814:	beq	1b854 <__assert_fail@plt+0x9ae0>
   1b818:	bl	11bb8 <__errno_location@plt>
   1b81c:	ldr	r6, [r0]
   1b820:	mov	r0, r5
   1b824:	bl	22e3c <_obstack_memory_used@@Base+0x212c>
   1b828:	str	r4, [sp]
   1b82c:	mov	r3, r0
   1b830:	movw	r2, #37008	; 0x9090
   1b834:	movt	r2, #2
   1b838:	mov	r1, r6
   1b83c:	mov	r0, #0
   1b840:	bl	11a8c <error@plt>
   1b844:	movw	r3, #45764	; 0xb2c4
   1b848:	movt	r3, #3
   1b84c:	ldr	r0, [r3]
   1b850:	bl	11924 <_exit@plt>
   1b854:	bl	11bb8 <__errno_location@plt>
   1b858:	mov	r3, r4
   1b85c:	movw	r2, #37260	; 0x918c
   1b860:	movt	r2, #2
   1b864:	ldr	r1, [r0]
   1b868:	mov	r0, #0
   1b86c:	bl	11a8c <error@plt>
   1b870:	b	1b844 <__assert_fail@plt+0x9ad0>
   1b874:	movw	r3, #45764	; 0xb2c4
   1b878:	movt	r3, #3
   1b87c:	ldr	r0, [r3]
   1b880:	bl	11924 <_exit@plt>
   1b884:	strd	r4, [sp, #-16]!
   1b888:	str	r6, [sp, #8]
   1b88c:	str	lr, [sp, #12]
   1b890:	mov	r4, r0
   1b894:	ldrb	ip, [r0]
   1b898:	cmp	ip, #47	; 0x2f
   1b89c:	movne	r5, #0
   1b8a0:	moveq	r5, #1
   1b8a4:	bl	1aeb4 <__assert_fail@plt+0x9140>
   1b8a8:	sub	r0, r0, r4
   1b8ac:	cmp	r0, r5
   1b8b0:	bls	1b8f0 <__assert_fail@plt+0x9b7c>
   1b8b4:	add	r3, r4, r0
   1b8b8:	ldrb	r3, [r3, #-1]
   1b8bc:	cmp	r3, #47	; 0x2f
   1b8c0:	bne	1b8f0 <__assert_fail@plt+0x9b7c>
   1b8c4:	sub	r0, r0, #2
   1b8c8:	add	r3, r4, r0
   1b8cc:	sub	ip, r4, #1
   1b8d0:	add	ip, ip, r5
   1b8d4:	rsb	r2, r4, #1
   1b8d8:	add	r0, r2, r3
   1b8dc:	cmp	r3, ip
   1b8e0:	beq	1b8f0 <__assert_fail@plt+0x9b7c>
   1b8e4:	ldrb	r1, [r3], #-1
   1b8e8:	cmp	r1, #47	; 0x2f
   1b8ec:	beq	1b8d8 <__assert_fail@plt+0x9b64>
   1b8f0:	ldrd	r4, [sp]
   1b8f4:	ldr	r6, [sp, #8]
   1b8f8:	add	sp, sp, #12
   1b8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b900:	strd	r4, [sp, #-16]!
   1b904:	str	r6, [sp, #8]
   1b908:	str	lr, [sp, #12]
   1b90c:	mov	r6, r0
   1b910:	bl	1b884 <__assert_fail@plt+0x9b10>
   1b914:	mov	r4, r0
   1b918:	add	r3, r0, #1
   1b91c:	cmp	r0, #0
   1b920:	movne	r0, r3
   1b924:	addeq	r0, r3, #1
   1b928:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1b92c:	subs	r5, r0, #0
   1b930:	beq	1b960 <__assert_fail@plt+0x9bec>
   1b934:	mov	r2, r4
   1b938:	mov	r1, r6
   1b93c:	mov	r0, r5
   1b940:	bl	11930 <memcpy@plt>
   1b944:	cmp	r4, #0
   1b948:	bne	1b958 <__assert_fail@plt+0x9be4>
   1b94c:	mov	r3, #46	; 0x2e
   1b950:	strb	r3, [r5]
   1b954:	mov	r4, #1
   1b958:	mov	r3, #0
   1b95c:	strb	r3, [r5, r4]
   1b960:	mov	r0, r5
   1b964:	ldrd	r4, [sp]
   1b968:	ldr	r6, [sp, #8]
   1b96c:	add	sp, sp, #12
   1b970:	pop	{pc}		; (ldr pc, [sp], #4)
   1b974:	mov	r0, #0
   1b978:	bx	lr
   1b97c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b980:	strd	r6, [sp, #8]
   1b984:	str	r8, [sp, #16]
   1b988:	str	lr, [sp, #20]
   1b98c:	subs	r7, r0, #0
   1b990:	beq	1b9e8 <__assert_fail@plt+0x9c74>
   1b994:	mov	r5, r2
   1b998:	mov	r6, r1
   1b99c:	mov	r0, #24
   1b9a0:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1b9a4:	mov	r4, r0
   1b9a8:	mov	r0, r6
   1b9ac:	bl	2432c <_obstack_memory_used@@Base+0x361c>
   1b9b0:	str	r0, [r4]
   1b9b4:	ldrd	r2, [r5, #96]	; 0x60
   1b9b8:	strd	r2, [r4, #8]
   1b9bc:	ldrd	r2, [r5]
   1b9c0:	strd	r2, [r4, #16]
   1b9c4:	mov	r1, r4
   1b9c8:	mov	r0, r7
   1b9cc:	bl	1d2a0 <__assert_fail@plt+0xb52c>
   1b9d0:	cmp	r0, #0
   1b9d4:	beq	1b9fc <__assert_fail@plt+0x9c88>
   1b9d8:	cmp	r4, r0
   1b9dc:	beq	1b9e8 <__assert_fail@plt+0x9c74>
   1b9e0:	mov	r0, r4
   1b9e4:	bl	1d4c0 <__assert_fail@plt+0xb74c>
   1b9e8:	ldrd	r4, [sp]
   1b9ec:	ldrd	r6, [sp, #8]
   1b9f0:	ldr	r8, [sp, #16]
   1b9f4:	add	sp, sp, #20
   1b9f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9fc:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1ba00:	cmp	r0, #0
   1ba04:	beq	1ba48 <__assert_fail@plt+0x9cd4>
   1ba08:	strd	r4, [sp, #-12]!
   1ba0c:	str	lr, [sp, #8]
   1ba10:	sub	sp, sp, #28
   1ba14:	str	r1, [sp]
   1ba18:	ldrd	r4, [r2, #96]	; 0x60
   1ba1c:	strd	r4, [sp, #8]
   1ba20:	ldrd	r2, [r2]
   1ba24:	strd	r2, [sp, #16]
   1ba28:	mov	r1, sp
   1ba2c:	bl	1c9f8 <__assert_fail@plt+0xac84>
   1ba30:	adds	r0, r0, #0
   1ba34:	movne	r0, #1
   1ba38:	add	sp, sp, #28
   1ba3c:	ldrd	r4, [sp]
   1ba40:	add	sp, sp, #8
   1ba44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba48:	mov	r0, #0
   1ba4c:	bx	lr
   1ba50:	and	r3, r0, #61440	; 0xf000
   1ba54:	cmp	r3, #32768	; 0x8000
   1ba58:	moveq	r3, #45	; 0x2d
   1ba5c:	beq	1baa8 <__assert_fail@plt+0x9d34>
   1ba60:	cmp	r3, #16384	; 0x4000
   1ba64:	moveq	r3, #100	; 0x64
   1ba68:	beq	1baa8 <__assert_fail@plt+0x9d34>
   1ba6c:	cmp	r3, #24576	; 0x6000
   1ba70:	moveq	r3, #98	; 0x62
   1ba74:	beq	1baa8 <__assert_fail@plt+0x9d34>
   1ba78:	cmp	r3, #8192	; 0x2000
   1ba7c:	moveq	r3, #99	; 0x63
   1ba80:	beq	1baa8 <__assert_fail@plt+0x9d34>
   1ba84:	cmp	r3, #40960	; 0xa000
   1ba88:	moveq	r3, #108	; 0x6c
   1ba8c:	beq	1baa8 <__assert_fail@plt+0x9d34>
   1ba90:	cmp	r3, #4096	; 0x1000
   1ba94:	moveq	r3, #112	; 0x70
   1ba98:	beq	1baa8 <__assert_fail@plt+0x9d34>
   1ba9c:	cmp	r3, #49152	; 0xc000
   1baa0:	movne	r3, #63	; 0x3f
   1baa4:	moveq	r3, #115	; 0x73
   1baa8:	strb	r3, [r1]
   1baac:	and	r3, r0, #256	; 0x100
   1bab0:	cmp	r3, #0
   1bab4:	movne	r3, #114	; 0x72
   1bab8:	moveq	r3, #45	; 0x2d
   1babc:	strb	r3, [r1, #1]
   1bac0:	and	r3, r0, #128	; 0x80
   1bac4:	cmp	r3, #0
   1bac8:	movne	r3, #119	; 0x77
   1bacc:	moveq	r3, #45	; 0x2d
   1bad0:	strb	r3, [r1, #2]
   1bad4:	tst	r0, #2048	; 0x800
   1bad8:	beq	1bb8c <__assert_fail@plt+0x9e18>
   1badc:	and	r3, r0, #64	; 0x40
   1bae0:	cmp	r3, #0
   1bae4:	movne	r3, #115	; 0x73
   1bae8:	moveq	r3, #83	; 0x53
   1baec:	strb	r3, [r1, #3]
   1baf0:	and	r3, r0, #32
   1baf4:	cmp	r3, #0
   1baf8:	movne	r3, #114	; 0x72
   1bafc:	moveq	r3, #45	; 0x2d
   1bb00:	strb	r3, [r1, #4]
   1bb04:	and	r3, r0, #16
   1bb08:	cmp	r3, #0
   1bb0c:	movne	r3, #119	; 0x77
   1bb10:	moveq	r3, #45	; 0x2d
   1bb14:	strb	r3, [r1, #5]
   1bb18:	tst	r0, #1024	; 0x400
   1bb1c:	beq	1bba0 <__assert_fail@plt+0x9e2c>
   1bb20:	and	r3, r0, #8
   1bb24:	cmp	r3, #0
   1bb28:	movne	r3, #115	; 0x73
   1bb2c:	moveq	r3, #83	; 0x53
   1bb30:	strb	r3, [r1, #6]
   1bb34:	and	r3, r0, #4
   1bb38:	cmp	r3, #0
   1bb3c:	movne	r3, #114	; 0x72
   1bb40:	moveq	r3, #45	; 0x2d
   1bb44:	strb	r3, [r1, #7]
   1bb48:	and	r3, r0, #2
   1bb4c:	cmp	r3, #0
   1bb50:	movne	r3, #119	; 0x77
   1bb54:	moveq	r3, #45	; 0x2d
   1bb58:	strb	r3, [r1, #8]
   1bb5c:	tst	r0, #512	; 0x200
   1bb60:	beq	1bbb4 <__assert_fail@plt+0x9e40>
   1bb64:	and	r0, r0, #1
   1bb68:	cmp	r0, #0
   1bb6c:	movne	r3, #116	; 0x74
   1bb70:	moveq	r3, #84	; 0x54
   1bb74:	strb	r3, [r1, #9]
   1bb78:	mov	r3, #32
   1bb7c:	strb	r3, [r1, #10]
   1bb80:	mov	r3, #0
   1bb84:	strb	r3, [r1, #11]
   1bb88:	bx	lr
   1bb8c:	and	r3, r0, #64	; 0x40
   1bb90:	cmp	r3, #0
   1bb94:	movne	r3, #120	; 0x78
   1bb98:	moveq	r3, #45	; 0x2d
   1bb9c:	b	1baec <__assert_fail@plt+0x9d78>
   1bba0:	and	r3, r0, #8
   1bba4:	cmp	r3, #0
   1bba8:	movne	r3, #120	; 0x78
   1bbac:	moveq	r3, #45	; 0x2d
   1bbb0:	b	1bb30 <__assert_fail@plt+0x9dbc>
   1bbb4:	and	r0, r0, #1
   1bbb8:	cmp	r0, #0
   1bbbc:	movne	r3, #120	; 0x78
   1bbc0:	moveq	r3, #45	; 0x2d
   1bbc4:	b	1bb74 <__assert_fail@plt+0x9e00>
   1bbc8:	str	r4, [sp, #-8]!
   1bbcc:	str	lr, [sp, #4]
   1bbd0:	ldr	r0, [r0, #16]
   1bbd4:	bl	1ba50 <__assert_fail@plt+0x9cdc>
   1bbd8:	ldr	r4, [sp]
   1bbdc:	add	sp, sp, #4
   1bbe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbe4:	str	r4, [sp, #-8]!
   1bbe8:	str	lr, [sp, #4]
   1bbec:	bl	1bc08 <__assert_fail@plt+0x9e94>
   1bbf0:	cmp	r0, #0
   1bbf4:	beq	1bc04 <__assert_fail@plt+0x9e90>
   1bbf8:	ldr	r4, [sp]
   1bbfc:	add	sp, sp, #4
   1bc00:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc04:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   1bc08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc0c:	strd	r6, [sp, #8]
   1bc10:	strd	r8, [sp, #16]
   1bc14:	strd	sl, [sp, #24]
   1bc18:	str	lr, [sp, #32]
   1bc1c:	sub	sp, sp, #4
   1bc20:	mov	r6, r0
   1bc24:	mov	r5, r1
   1bc28:	mov	r9, r2
   1bc2c:	bl	1aeb4 <__assert_fail@plt+0x9140>
   1bc30:	mov	r4, r0
   1bc34:	bl	1af1c <__assert_fail@plt+0x91a8>
   1bc38:	mov	r8, r0
   1bc3c:	sub	r4, r4, r6
   1bc40:	add	r4, r4, r0
   1bc44:	mov	r0, r5
   1bc48:	bl	11b94 <strlen@plt>
   1bc4c:	mov	r7, r0
   1bc50:	cmp	r8, #0
   1bc54:	beq	1bc80 <__assert_fail@plt+0x9f0c>
   1bc58:	add	r3, r6, r4
   1bc5c:	ldrb	r3, [r3, #-1]
   1bc60:	cmp	r3, #47	; 0x2f
   1bc64:	moveq	r8, #0
   1bc68:	beq	1bc90 <__assert_fail@plt+0x9f1c>
   1bc6c:	ldrb	r3, [r5]
   1bc70:	cmp	r3, #47	; 0x2f
   1bc74:	moveq	r8, #0
   1bc78:	movne	r8, #47	; 0x2f
   1bc7c:	b	1bc90 <__assert_fail@plt+0x9f1c>
   1bc80:	ldrb	r3, [r5]
   1bc84:	cmp	r3, #47	; 0x2f
   1bc88:	movne	r8, #0
   1bc8c:	moveq	r8, #46	; 0x2e
   1bc90:	adds	sl, r8, #0
   1bc94:	movne	sl, #1
   1bc98:	add	r0, r7, #1
   1bc9c:	add	r0, r0, r4
   1bca0:	add	r0, r0, sl
   1bca4:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1bca8:	subs	fp, r0, #0
   1bcac:	beq	1bce0 <__assert_fail@plt+0x9f6c>
   1bcb0:	mov	r2, r4
   1bcb4:	mov	r1, r6
   1bcb8:	mov	r0, fp
   1bcbc:	bl	11b40 <mempcpy@plt>
   1bcc0:	strb	r8, [r0], sl
   1bcc4:	cmp	r9, #0
   1bcc8:	strne	r0, [r9]
   1bccc:	mov	r2, r7
   1bcd0:	mov	r1, r5
   1bcd4:	bl	11b40 <mempcpy@plt>
   1bcd8:	mov	r3, #0
   1bcdc:	strb	r3, [r0]
   1bce0:	mov	r0, fp
   1bce4:	add	sp, sp, #4
   1bce8:	ldrd	r4, [sp]
   1bcec:	ldrd	r6, [sp, #8]
   1bcf0:	ldrd	r8, [sp, #16]
   1bcf4:	ldrd	sl, [sp, #24]
   1bcf8:	add	sp, sp, #32
   1bcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd00:	ldr	r2, [r0]
   1bd04:	ldrb	r3, [r2]
   1bd08:	cmp	r3, #0
   1bd0c:	beq	1bddc <__assert_fail@plt+0xa068>
   1bd10:	strd	r4, [sp, #-12]!
   1bd14:	str	lr, [sp, #8]
   1bd18:	mov	lr, r0
   1bd1c:	mov	r1, #0
   1bd20:	mov	r0, r1
   1bd24:	mov	r5, #1
   1bd28:	mov	r4, r1
   1bd2c:	b	1bd74 <__assert_fail@plt+0xa000>
   1bd30:	cmp	r3, #46	; 0x2e
   1bd34:	beq	1bdb4 <__assert_fail@plt+0xa040>
   1bd38:	cmp	r3, #90	; 0x5a
   1bd3c:	bhi	1bdc8 <__assert_fail@plt+0xa054>
   1bd40:	cmp	r3, #65	; 0x41
   1bd44:	bcs	1bd60 <__assert_fail@plt+0x9fec>
   1bd48:	sub	ip, r3, #48	; 0x30
   1bd4c:	uxtb	ip, ip
   1bd50:	cmp	ip, #9
   1bd54:	bls	1bd60 <__assert_fail@plt+0x9fec>
   1bd58:	cmp	r3, #126	; 0x7e
   1bd5c:	movne	r0, #0
   1bd60:	add	r2, r2, #1
   1bd64:	str	r2, [lr]
   1bd68:	ldrb	r3, [r2]
   1bd6c:	cmp	r3, #0
   1bd70:	beq	1bde4 <__assert_fail@plt+0xa070>
   1bd74:	cmp	r1, #0
   1bd78:	beq	1bd30 <__assert_fail@plt+0x9fbc>
   1bd7c:	cmp	r3, #65	; 0x41
   1bd80:	bcc	1bda4 <__assert_fail@plt+0xa030>
   1bd84:	cmp	r3, #90	; 0x5a
   1bd88:	movls	r1, r4
   1bd8c:	bls	1bd60 <__assert_fail@plt+0x9fec>
   1bd90:	sub	r1, r3, #97	; 0x61
   1bd94:	uxtb	r1, r1
   1bd98:	cmp	r1, #25
   1bd9c:	movls	r1, r4
   1bda0:	bls	1bd60 <__assert_fail@plt+0x9fec>
   1bda4:	cmp	r3, #126	; 0x7e
   1bda8:	mov	r1, r4
   1bdac:	movne	r0, r4
   1bdb0:	b	1bd60 <__assert_fail@plt+0x9fec>
   1bdb4:	cmp	r0, #0
   1bdb8:	moveq	r0, r2
   1bdbc:	moveq	r1, r5
   1bdc0:	movne	r1, r5
   1bdc4:	b	1bd60 <__assert_fail@plt+0x9fec>
   1bdc8:	sub	ip, r3, #97	; 0x61
   1bdcc:	uxtb	ip, ip
   1bdd0:	cmp	ip, #25
   1bdd4:	bhi	1bd58 <__assert_fail@plt+0x9fe4>
   1bdd8:	b	1bd60 <__assert_fail@plt+0x9fec>
   1bddc:	mov	r0, #0
   1bde0:	bx	lr
   1bde4:	ldrd	r4, [sp]
   1bde8:	add	sp, sp, #8
   1bdec:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf0:	mov	r3, r0
   1bdf4:	sub	r2, r0, #48	; 0x30
   1bdf8:	cmp	r2, #9
   1bdfc:	bls	1be30 <__assert_fail@plt+0xa0bc>
   1be00:	cmp	r0, #65	; 0x41
   1be04:	bcc	1be20 <__assert_fail@plt+0xa0ac>
   1be08:	cmp	r0, #90	; 0x5a
   1be0c:	bls	1be3c <__assert_fail@plt+0xa0c8>
   1be10:	sub	r2, r0, #97	; 0x61
   1be14:	uxtb	r2, r2
   1be18:	cmp	r2, #25
   1be1c:	bls	1be3c <__assert_fail@plt+0xa0c8>
   1be20:	cmp	r3, #126	; 0x7e
   1be24:	beq	1be38 <__assert_fail@plt+0xa0c4>
   1be28:	add	r0, r3, #256	; 0x100
   1be2c:	bx	lr
   1be30:	mov	r0, #0
   1be34:	bx	lr
   1be38:	mvn	r0, #0
   1be3c:	bx	lr
   1be40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be44:	strd	r6, [sp, #8]
   1be48:	strd	r8, [sp, #16]
   1be4c:	strd	sl, [sp, #24]
   1be50:	str	lr, [sp, #32]
   1be54:	sub	sp, sp, #28
   1be58:	mov	r4, r0
   1be5c:	mov	r5, r1
   1be60:	bl	118a0 <strcmp@plt>
   1be64:	subs	r7, r0, #0
   1be68:	beq	1c1e0 <__assert_fail@plt+0xa46c>
   1be6c:	ldrb	r8, [r4]
   1be70:	cmp	r8, #0
   1be74:	beq	1c180 <__assert_fail@plt+0xa40c>
   1be78:	ldrb	r6, [r5]
   1be7c:	cmp	r6, #0
   1be80:	moveq	r7, #1
   1be84:	beq	1c1e0 <__assert_fail@plt+0xa46c>
   1be88:	mov	r1, r4
   1be8c:	movw	r0, #37808	; 0x93b0
   1be90:	movt	r0, #2
   1be94:	bl	118a0 <strcmp@plt>
   1be98:	cmp	r0, #0
   1be9c:	beq	1c188 <__assert_fail@plt+0xa414>
   1bea0:	mov	r1, r5
   1bea4:	movw	r0, #37808	; 0x93b0
   1bea8:	movt	r0, #2
   1beac:	bl	118a0 <strcmp@plt>
   1beb0:	cmp	r0, #0
   1beb4:	moveq	r7, #1
   1beb8:	beq	1c1e0 <__assert_fail@plt+0xa46c>
   1bebc:	mov	r1, r4
   1bec0:	movw	r0, #39184	; 0x9910
   1bec4:	movt	r0, #2
   1bec8:	bl	118a0 <strcmp@plt>
   1becc:	cmp	r0, #0
   1bed0:	beq	1c190 <__assert_fail@plt+0xa41c>
   1bed4:	mov	r1, r5
   1bed8:	movw	r0, #39184	; 0x9910
   1bedc:	movt	r0, #2
   1bee0:	bl	118a0 <strcmp@plt>
   1bee4:	cmp	r0, #0
   1bee8:	moveq	r7, #1
   1beec:	beq	1c1e0 <__assert_fail@plt+0xa46c>
   1bef0:	cmp	r8, #46	; 0x2e
   1bef4:	movne	r3, #0
   1bef8:	moveq	r3, #1
   1befc:	cmp	r6, #46	; 0x2e
   1bf00:	moveq	r2, #0
   1bf04:	andne	r2, r3, #1
   1bf08:	cmp	r2, #0
   1bf0c:	bne	1c198 <__assert_fail@plt+0xa424>
   1bf10:	cmp	r6, #46	; 0x2e
   1bf14:	movne	r6, #0
   1bf18:	moveq	r6, #1
   1bf1c:	cmp	r8, #46	; 0x2e
   1bf20:	moveq	r8, #0
   1bf24:	andne	r8, r6, #1
   1bf28:	cmp	r8, #0
   1bf2c:	movne	r7, #1
   1bf30:	bne	1c1e0 <__assert_fail@plt+0xa46c>
   1bf34:	tst	r3, r6
   1bf38:	addne	r4, r4, #1
   1bf3c:	addne	r5, r5, #1
   1bf40:	str	r4, [sp, #20]
   1bf44:	str	r5, [sp, #16]
   1bf48:	add	r0, sp, #20
   1bf4c:	bl	1bd00 <__assert_fail@plt+0x9f8c>
   1bf50:	mov	r6, r0
   1bf54:	add	r0, sp, #16
   1bf58:	bl	1bd00 <__assert_fail@plt+0x9f8c>
   1bf5c:	cmp	r6, #0
   1bf60:	ldreq	r3, [sp, #20]
   1bf64:	movne	r3, r6
   1bf68:	sub	fp, r3, r4
   1bf6c:	cmp	r0, #0
   1bf70:	ldreq	r3, [sp, #16]
   1bf74:	movne	r3, r0
   1bf78:	sub	r3, r3, r5
   1bf7c:	str	r3, [sp]
   1bf80:	orr	r6, r6, r0
   1bf84:	cmp	fp, r3
   1bf88:	movne	r3, #0
   1bf8c:	moveq	r3, #1
   1bf90:	cmp	r6, #0
   1bf94:	moveq	r3, #0
   1bf98:	cmp	r3, #0
   1bf9c:	bne	1bfdc <__assert_fail@plt+0xa268>
   1bfa0:	mov	r6, #0
   1bfa4:	mov	r2, r6
   1bfa8:	str	r6, [sp, #4]
   1bfac:	rsb	r9, r4, #1
   1bfb0:	rsb	sl, r5, #1
   1bfb4:	str	r7, [sp, #12]
   1bfb8:	ldr	r3, [sp]
   1bfbc:	cmp	r3, r6
   1bfc0:	cmpls	fp, r2
   1bfc4:	bls	1c178 <__assert_fail@plt+0xa404>
   1bfc8:	mov	r8, r6
   1bfcc:	mov	r7, r2
   1bfd0:	sub	r3, r6, r2
   1bfd4:	str	r3, [sp, #8]
   1bfd8:	b	1c03c <__assert_fail@plt+0xa2c8>
   1bfdc:	mov	r2, fp
   1bfe0:	mov	r1, r5
   1bfe4:	mov	r0, r4
   1bfe8:	bl	11d20 <strncmp@plt>
   1bfec:	cmp	r0, #0
   1bff0:	bne	1bfa0 <__assert_fail@plt+0xa22c>
   1bff4:	ldr	r3, [sp, #20]
   1bff8:	sub	fp, r3, r4
   1bffc:	ldr	r3, [sp, #16]
   1c000:	sub	r3, r3, r5
   1c004:	str	r3, [sp]
   1c008:	b	1bfa0 <__assert_fail@plt+0xa22c>
   1c00c:	ldrb	r0, [r4, r7]
   1c010:	bl	1bdf0 <__assert_fail@plt+0xa07c>
   1c014:	mov	r6, r0
   1c018:	ldr	r3, [sp]
   1c01c:	cmp	r3, r8
   1c020:	beq	1c088 <__assert_fail@plt+0xa314>
   1c024:	ldrb	r0, [r5, r8]
   1c028:	bl	1bdf0 <__assert_fail@plt+0xa07c>
   1c02c:	cmp	r0, r6
   1c030:	bne	1c090 <__assert_fail@plt+0xa31c>
   1c034:	add	r7, r7, #1
   1c038:	add	r8, r8, #1
   1c03c:	cmp	fp, r7
   1c040:	bls	1c054 <__assert_fail@plt+0xa2e0>
   1c044:	ldrb	r3, [r4, r7]
   1c048:	sub	r3, r3, #48	; 0x30
   1c04c:	cmp	r3, #9
   1c050:	bhi	1c00c <__assert_fail@plt+0xa298>
   1c054:	ldr	r3, [sp]
   1c058:	cmp	r3, r8
   1c05c:	bls	1c098 <__assert_fail@plt+0xa324>
   1c060:	ldrb	r3, [r5, r8]
   1c064:	sub	r3, r3, #48	; 0x30
   1c068:	cmp	r3, #9
   1c06c:	bls	1c098 <__assert_fail@plt+0xa324>
   1c070:	cmp	fp, r7
   1c074:	beq	1c1b0 <__assert_fail@plt+0xa43c>
   1c078:	ldrb	r0, [r4, r7]
   1c07c:	bl	1bdf0 <__assert_fail@plt+0xa07c>
   1c080:	mov	r6, r0
   1c084:	b	1c024 <__assert_fail@plt+0xa2b0>
   1c088:	ldr	r0, [sp, #4]
   1c08c:	b	1c02c <__assert_fail@plt+0xa2b8>
   1c090:	sub	r7, r6, r0
   1c094:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c098:	add	r3, r4, r7
   1c09c:	ldrb	r2, [r4, r7]
   1c0a0:	cmp	r2, #48	; 0x30
   1c0a4:	movne	r2, r7
   1c0a8:	bne	1c0bc <__assert_fail@plt+0xa348>
   1c0ac:	add	r2, r9, r3
   1c0b0:	ldrb	r1, [r3, #1]!
   1c0b4:	cmp	r1, #48	; 0x30
   1c0b8:	beq	1c0ac <__assert_fail@plt+0xa338>
   1c0bc:	add	r3, r5, r8
   1c0c0:	ldrb	r1, [r5, r8]
   1c0c4:	cmp	r1, #48	; 0x30
   1c0c8:	bne	1c150 <__assert_fail@plt+0xa3dc>
   1c0cc:	add	r6, sl, r3
   1c0d0:	ldrb	r1, [r3, #1]!
   1c0d4:	cmp	r1, #48	; 0x30
   1c0d8:	beq	1c0cc <__assert_fail@plt+0xa358>
   1c0dc:	add	r0, r4, r2
   1c0e0:	ldrb	r1, [r4, r2]
   1c0e4:	sub	r3, r1, #48	; 0x30
   1c0e8:	cmp	r3, #9
   1c0ec:	bhi	1c1cc <__assert_fail@plt+0xa458>
   1c0f0:	add	ip, r5, r6
   1c0f4:	ldrb	r3, [r5, r6]
   1c0f8:	sub	lr, r3, #48	; 0x30
   1c0fc:	cmp	lr, #9
   1c100:	bhi	1c1a0 <__assert_fail@plt+0xa42c>
   1c104:	mov	r8, #0
   1c108:	add	r2, sl, r2
   1c10c:	sub	r6, r2, r6
   1c110:	cmp	r8, #0
   1c114:	subeq	r8, r1, r3
   1c118:	add	r2, r6, ip
   1c11c:	add	r3, sl, ip
   1c120:	ldrb	r1, [r0, #1]!
   1c124:	sub	lr, r1, #48	; 0x30
   1c128:	cmp	lr, #9
   1c12c:	bls	1c158 <__assert_fail@plt+0xa3e4>
   1c130:	ldrb	r1, [r5, r3]
   1c134:	sub	r1, r1, #48	; 0x30
   1c138:	cmp	r1, #9
   1c13c:	bls	1c1a8 <__assert_fail@plt+0xa434>
   1c140:	cmp	r8, #0
   1c144:	beq	1c170 <__assert_fail@plt+0xa3fc>
   1c148:	mov	r7, r8
   1c14c:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c150:	mov	r6, r8
   1c154:	b	1c0dc <__assert_fail@plt+0xa368>
   1c158:	ldrb	r3, [ip, #1]!
   1c15c:	sub	r2, r3, #48	; 0x30
   1c160:	cmp	r2, #9
   1c164:	bls	1c110 <__assert_fail@plt+0xa39c>
   1c168:	mov	r7, #1
   1c16c:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c170:	mov	r6, r3
   1c174:	b	1bfb8 <__assert_fail@plt+0xa244>
   1c178:	ldr	r7, [sp, #12]
   1c17c:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c180:	mvn	r7, #0
   1c184:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c188:	mvn	r7, #0
   1c18c:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c190:	mvn	r7, #0
   1c194:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c198:	mvn	r7, #0
   1c19c:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c1a0:	mov	r7, #1
   1c1a4:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c1a8:	mvn	r7, #0
   1c1ac:	b	1c1e0 <__assert_fail@plt+0xa46c>
   1c1b0:	ldr	r3, [sp, #8]
   1c1b4:	add	r3, r7, r3
   1c1b8:	ldr	r2, [sp]
   1c1bc:	cmp	r2, r3
   1c1c0:	beq	1c034 <__assert_fail@plt+0xa2c0>
   1c1c4:	ldr	r6, [sp, #4]
   1c1c8:	b	1c024 <__assert_fail@plt+0xa2b0>
   1c1cc:	ldrb	r3, [r5, r6]
   1c1d0:	sub	r3, r3, #48	; 0x30
   1c1d4:	cmp	r3, #9
   1c1d8:	bhi	1bfb8 <__assert_fail@plt+0xa244>
   1c1dc:	mvn	r7, #0
   1c1e0:	mov	r0, r7
   1c1e4:	add	sp, sp, #28
   1c1e8:	ldrd	r4, [sp]
   1c1ec:	ldrd	r6, [sp, #8]
   1c1f0:	ldrd	r8, [sp, #16]
   1c1f4:	ldrd	sl, [sp, #24]
   1c1f8:	add	sp, sp, #32
   1c1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c200:	strd	r4, [sp, #-12]!
   1c204:	str	lr, [sp, #8]
   1c208:	sub	sp, sp, #12
   1c20c:	mov	r5, r0
   1c210:	bl	11bb8 <__errno_location@plt>
   1c214:	mov	r4, r0
   1c218:	ldr	r3, [r0]
   1c21c:	str	r3, [sp]
   1c220:	str	r3, [sp, #4]
   1c224:	mov	r3, #0
   1c228:	str	r3, [r0]
   1c22c:	mov	r0, r5
   1c230:	bl	11900 <free@plt>
   1c234:	ldr	r3, [r4]
   1c238:	clz	r3, r3
   1c23c:	lsr	r3, r3, #5
   1c240:	add	r2, sp, #8
   1c244:	add	r3, r2, r3, lsl #2
   1c248:	ldr	r3, [r3, #-8]
   1c24c:	str	r3, [r4]
   1c250:	add	sp, sp, #12
   1c254:	ldrd	r4, [sp]
   1c258:	add	sp, sp, #8
   1c25c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c260:	str	r4, [sp, #-8]!
   1c264:	str	lr, [sp, #4]
   1c268:	mov	r1, r0
   1c26c:	mov	r0, #0
   1c270:	bl	11918 <clock_gettime@plt>
   1c274:	ldr	r4, [sp]
   1c278:	add	sp, sp, #4
   1c27c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c280:	str	r4, [sp, #-8]!
   1c284:	str	lr, [sp, #4]
   1c288:	sub	sp, sp, #8
   1c28c:	mov	r4, r0
   1c290:	mov	r0, sp
   1c294:	bl	1c260 <__assert_fail@plt+0xa4ec>
   1c298:	ldrd	r2, [sp]
   1c29c:	strd	r2, [r4]
   1c2a0:	mov	r0, r4
   1c2a4:	add	sp, sp, #8
   1c2a8:	ldr	r4, [sp]
   1c2ac:	add	sp, sp, #4
   1c2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c2b8:	sub	sp, sp, #268	; 0x10c
   1c2bc:	movw	r2, #257	; 0x101
   1c2c0:	add	r1, sp, #4
   1c2c4:	bl	232e8 <_obstack_memory_used@@Base+0x25d8>
   1c2c8:	cmp	r0, #0
   1c2cc:	movne	r0, #0
   1c2d0:	bne	1c308 <__assert_fail@plt+0xa594>
   1c2d4:	movw	r1, #39188	; 0x9914
   1c2d8:	movt	r1, #2
   1c2dc:	add	r0, sp, #4
   1c2e0:	bl	118a0 <strcmp@plt>
   1c2e4:	cmp	r0, #0
   1c2e8:	beq	1c304 <__assert_fail@plt+0xa590>
   1c2ec:	movw	r1, #39192	; 0x9918
   1c2f0:	movt	r1, #2
   1c2f4:	add	r0, sp, #4
   1c2f8:	bl	118a0 <strcmp@plt>
   1c2fc:	adds	r0, r0, #0
   1c300:	movne	r0, #1
   1c304:	and	r0, r0, #1
   1c308:	add	sp, sp, #268	; 0x10c
   1c30c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c310:	ror	r0, r0, #3
   1c314:	udiv	r3, r0, r1
   1c318:	mls	r0, r3, r1, r0
   1c31c:	bx	lr
   1c320:	cmp	r1, r0
   1c324:	movne	r0, #0
   1c328:	moveq	r0, #1
   1c32c:	bx	lr
   1c330:	ldr	r2, [r0, #20]
   1c334:	movw	r3, #39200	; 0x9920
   1c338:	movt	r3, #2
   1c33c:	cmp	r2, r3
   1c340:	beq	1c3dc <__assert_fail@plt+0xa668>
   1c344:	vldr	s15, [r2, #8]
   1c348:	vldr	s14, [pc, #148]	; 1c3e4 <__assert_fail@plt+0xa670>
   1c34c:	vcmpe.f32	s15, s14
   1c350:	vmrs	APSR_nzcv, fpscr
   1c354:	ble	1c3b4 <__assert_fail@plt+0xa640>
   1c358:	vldr	s14, [pc, #136]	; 1c3e8 <__assert_fail@plt+0xa674>
   1c35c:	vcmpe.f32	s15, s14
   1c360:	vmrs	APSR_nzcv, fpscr
   1c364:	bpl	1c3b4 <__assert_fail@plt+0xa640>
   1c368:	vldr	s13, [r2, #12]
   1c36c:	vldr	s14, [pc, #120]	; 1c3ec <__assert_fail@plt+0xa678>
   1c370:	vcmpe.f32	s13, s14
   1c374:	vmrs	APSR_nzcv, fpscr
   1c378:	ble	1c3b4 <__assert_fail@plt+0xa640>
   1c37c:	vldr	s14, [r2]
   1c380:	vcmpe.f32	s14, #0.0
   1c384:	vmrs	APSR_nzcv, fpscr
   1c388:	blt	1c3b4 <__assert_fail@plt+0xa640>
   1c38c:	vldr	s13, [pc, #80]	; 1c3e4 <__assert_fail@plt+0xa670>
   1c390:	vadd.f32	s14, s14, s13
   1c394:	vldr	s13, [r2, #4]
   1c398:	vcmpe.f32	s14, s13
   1c39c:	vmrs	APSR_nzcv, fpscr
   1c3a0:	bpl	1c3b4 <__assert_fail@plt+0xa640>
   1c3a4:	vldr	s12, [pc, #68]	; 1c3f0 <__assert_fail@plt+0xa67c>
   1c3a8:	vcmpe.f32	s13, s12
   1c3ac:	vmrs	APSR_nzcv, fpscr
   1c3b0:	bls	1c3c8 <__assert_fail@plt+0xa654>
   1c3b4:	movw	r3, #39200	; 0x9920
   1c3b8:	movt	r3, #2
   1c3bc:	str	r3, [r0, #20]
   1c3c0:	mov	r0, #0
   1c3c4:	bx	lr
   1c3c8:	vcmpe.f32	s15, s14
   1c3cc:	vmrs	APSR_nzcv, fpscr
   1c3d0:	ble	1c3b4 <__assert_fail@plt+0xa640>
   1c3d4:	mov	r0, #1
   1c3d8:	bx	lr
   1c3dc:	mov	r0, #1
   1c3e0:	bx	lr
   1c3e4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c3e8:	svccc	0x00666666
   1c3ec:	svccc	0x008ccccd
   1c3f0:	svccc	0x00800000
   1c3f4:	ldrb	r3, [r1, #16]
   1c3f8:	cmp	r3, #0
   1c3fc:	bne	1c428 <__assert_fail@plt+0xa6b4>
   1c400:	vmov	s15, r0
   1c404:	vcvt.f32.u32	s15, s15
   1c408:	vldr	s13, [r1, #8]
   1c40c:	vdiv.f32	s14, s15, s13
   1c410:	vldr	s15, [pc, #224]	; 1c4f8 <__assert_fail@plt+0xa784>
   1c414:	vcmpe.f32	s14, s15
   1c418:	vmrs	APSR_nzcv, fpscr
   1c41c:	bge	1c4e8 <__assert_fail@plt+0xa774>
   1c420:	vcvt.u32.f32	s15, s14
   1c424:	vmov	r0, s15
   1c428:	cmp	r0, #10
   1c42c:	movcc	r0, #10
   1c430:	orr	r0, r0, #1
   1c434:	cmn	r0, #1
   1c438:	beq	1c44c <__assert_fail@plt+0xa6d8>
   1c43c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c440:	movw	lr, #43691	; 0xaaab
   1c444:	movt	lr, #43690	; 0xaaaa
   1c448:	b	1c474 <__assert_fail@plt+0xa700>
   1c44c:	mov	r0, #0
   1c450:	bx	lr
   1c454:	mov	r3, #3
   1c458:	udiv	r2, r0, r3
   1c45c:	mls	r3, r3, r2, r0
   1c460:	cmp	r3, #0
   1c464:	bne	1c4c4 <__assert_fail@plt+0xa750>
   1c468:	add	r0, r0, #2
   1c46c:	cmn	r0, #1
   1c470:	beq	1c4f0 <__assert_fail@plt+0xa77c>
   1c474:	cmp	r0, #9
   1c478:	bls	1c454 <__assert_fail@plt+0xa6e0>
   1c47c:	umull	r2, r3, lr, r0
   1c480:	lsr	r3, r3, #1
   1c484:	add	r3, r3, r3, lsl #1
   1c488:	cmp	r0, r3
   1c48c:	beq	1c468 <__assert_fail@plt+0xa6f4>
   1c490:	mov	r1, #16
   1c494:	mov	r2, #9
   1c498:	mov	r3, #3
   1c49c:	add	r2, r2, r1
   1c4a0:	add	r3, r3, #2
   1c4a4:	cmp	r2, r0
   1c4a8:	bcs	1c458 <__assert_fail@plt+0xa6e4>
   1c4ac:	add	r1, r1, #8
   1c4b0:	udiv	ip, r0, r3
   1c4b4:	mls	ip, r3, ip, r0
   1c4b8:	cmp	ip, #0
   1c4bc:	bne	1c49c <__assert_fail@plt+0xa728>
   1c4c0:	b	1c468 <__assert_fail@plt+0xa6f4>
   1c4c4:	lsl	r2, r0, #2
   1c4c8:	lsr	r3, r0, #30
   1c4cc:	adds	r3, r3, #0
   1c4d0:	movne	r3, #1
   1c4d4:	cmp	r2, #0
   1c4d8:	movlt	r3, #1
   1c4dc:	cmp	r3, #0
   1c4e0:	movne	r0, #0
   1c4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4e8:	mov	r0, #0
   1c4ec:	bx	lr
   1c4f0:	mov	r0, #0
   1c4f4:	b	1c4e4 <__assert_fail@plt+0xa770>
   1c4f8:	svcmi	0x00800000
   1c4fc:	str	r4, [sp, #-8]!
   1c500:	str	lr, [sp, #4]
   1c504:	mov	r4, r0
   1c508:	mov	r0, r1
   1c50c:	ldr	r3, [r4, #24]
   1c510:	ldr	r1, [r4, #8]
   1c514:	blx	r3
   1c518:	ldr	r3, [r4, #8]
   1c51c:	cmp	r3, r0
   1c520:	bls	1c538 <__assert_fail@plt+0xa7c4>
   1c524:	ldr	r3, [r4]
   1c528:	add	r0, r3, r0, lsl #3
   1c52c:	ldr	r4, [sp]
   1c530:	add	sp, sp, #4
   1c534:	pop	{pc}		; (ldr pc, [sp], #4)
   1c538:	bl	11d2c <abort@plt>
   1c53c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c540:	strd	r6, [sp, #8]
   1c544:	strd	r8, [sp, #16]
   1c548:	strd	sl, [sp, #24]
   1c54c:	str	lr, [sp, #32]
   1c550:	sub	sp, sp, #4
   1c554:	ldr	r7, [r1]
   1c558:	ldr	r3, [r1, #4]
   1c55c:	cmp	r7, r3
   1c560:	bcs	1c6b8 <__assert_fail@plt+0xa944>
   1c564:	mov	fp, r2
   1c568:	mov	r9, r1
   1c56c:	mov	r6, r0
   1c570:	add	r7, r7, #8
   1c574:	mov	sl, #0
   1c578:	b	1c64c <__assert_fail@plt+0xa8d8>
   1c57c:	str	r5, [r0]
   1c580:	ldr	r2, [r6, #12]
   1c584:	add	r2, r2, #1
   1c588:	str	r2, [r6, #12]
   1c58c:	str	sl, [r4]
   1c590:	ldr	r2, [r6, #36]	; 0x24
   1c594:	str	r2, [r4, #4]
   1c598:	str	r4, [r6, #36]	; 0x24
   1c59c:	mov	r4, r3
   1c5a0:	cmp	r3, #0
   1c5a4:	beq	1c5d8 <__assert_fail@plt+0xa864>
   1c5a8:	ldr	r5, [r4]
   1c5ac:	mov	r1, r5
   1c5b0:	mov	r0, r6
   1c5b4:	bl	1c4fc <__assert_fail@plt+0xa788>
   1c5b8:	ldr	r3, [r4, #4]
   1c5bc:	ldr	r2, [r0]
   1c5c0:	cmp	r2, #0
   1c5c4:	beq	1c57c <__assert_fail@plt+0xa808>
   1c5c8:	ldr	r2, [r0, #4]
   1c5cc:	str	r2, [r4, #4]
   1c5d0:	str	r4, [r0, #4]
   1c5d4:	b	1c59c <__assert_fail@plt+0xa828>
   1c5d8:	ldr	r4, [r8, #-8]
   1c5dc:	str	sl, [r8, #-4]
   1c5e0:	cmp	fp, #0
   1c5e4:	bne	1c638 <__assert_fail@plt+0xa8c4>
   1c5e8:	mov	r1, r4
   1c5ec:	mov	r0, r6
   1c5f0:	bl	1c4fc <__assert_fail@plt+0xa788>
   1c5f4:	mov	r5, r0
   1c5f8:	ldr	r3, [r0]
   1c5fc:	cmp	r3, #0
   1c600:	beq	1c684 <__assert_fail@plt+0xa910>
   1c604:	ldr	r0, [r6, #36]	; 0x24
   1c608:	cmp	r0, #0
   1c60c:	beq	1c66c <__assert_fail@plt+0xa8f8>
   1c610:	ldr	r3, [r0, #4]
   1c614:	str	r3, [r6, #36]	; 0x24
   1c618:	str	r4, [r0]
   1c61c:	ldr	r3, [r5, #4]
   1c620:	str	r3, [r0, #4]
   1c624:	str	r0, [r5, #4]
   1c628:	str	sl, [r8, #-8]
   1c62c:	ldr	r3, [r9, #12]
   1c630:	sub	r3, r3, #1
   1c634:	str	r3, [r9, #12]
   1c638:	add	r2, r7, #8
   1c63c:	ldr	r3, [r9, #4]
   1c640:	cmp	r3, r7
   1c644:	bls	1c698 <__assert_fail@plt+0xa924>
   1c648:	mov	r7, r2
   1c64c:	mov	r8, r7
   1c650:	ldr	r3, [r7, #-8]
   1c654:	cmp	r3, #0
   1c658:	beq	1c638 <__assert_fail@plt+0xa8c4>
   1c65c:	ldr	r4, [r7, #-4]
   1c660:	cmp	r4, #0
   1c664:	bne	1c5a8 <__assert_fail@plt+0xa834>
   1c668:	b	1c5d8 <__assert_fail@plt+0xa864>
   1c66c:	mov	r0, #8
   1c670:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1c674:	cmp	r0, #0
   1c678:	bne	1c618 <__assert_fail@plt+0xa8a4>
   1c67c:	mov	r0, fp
   1c680:	b	1c69c <__assert_fail@plt+0xa928>
   1c684:	str	r4, [r0]
   1c688:	ldr	r3, [r6, #12]
   1c68c:	add	r3, r3, #1
   1c690:	str	r3, [r6, #12]
   1c694:	b	1c628 <__assert_fail@plt+0xa8b4>
   1c698:	mov	r0, #1
   1c69c:	add	sp, sp, #4
   1c6a0:	ldrd	r4, [sp]
   1c6a4:	ldrd	r6, [sp, #8]
   1c6a8:	ldrd	r8, [sp, #16]
   1c6ac:	ldrd	sl, [sp, #24]
   1c6b0:	add	sp, sp, #32
   1c6b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6b8:	mov	r0, #1
   1c6bc:	b	1c69c <__assert_fail@plt+0xa928>
   1c6c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c6c4:	strd	r6, [sp, #8]
   1c6c8:	str	r8, [sp, #16]
   1c6cc:	str	lr, [sp, #20]
   1c6d0:	mov	r6, r0
   1c6d4:	mov	r5, r1
   1c6d8:	mov	r7, r2
   1c6dc:	mov	r8, r3
   1c6e0:	bl	1c4fc <__assert_fail@plt+0xa788>
   1c6e4:	mov	r4, r0
   1c6e8:	str	r0, [r7]
   1c6ec:	ldr	r0, [r0]
   1c6f0:	cmp	r0, #0
   1c6f4:	beq	1c770 <__assert_fail@plt+0xa9fc>
   1c6f8:	cmp	r0, r5
   1c6fc:	beq	1c784 <__assert_fail@plt+0xaa10>
   1c700:	ldr	r3, [r6, #28]
   1c704:	mov	r1, r0
   1c708:	mov	r0, r5
   1c70c:	blx	r3
   1c710:	cmp	r0, #0
   1c714:	bne	1c784 <__assert_fail@plt+0xaa10>
   1c718:	ldr	r0, [r4, #4]
   1c71c:	cmp	r0, #0
   1c720:	beq	1c770 <__assert_fail@plt+0xa9fc>
   1c724:	ldr	r1, [r0]
   1c728:	cmp	r5, r1
   1c72c:	beq	1c760 <__assert_fail@plt+0xa9ec>
   1c730:	ldr	r3, [r6, #28]
   1c734:	mov	r0, r5
   1c738:	blx	r3
   1c73c:	cmp	r0, #0
   1c740:	bne	1c760 <__assert_fail@plt+0xa9ec>
   1c744:	ldr	r4, [r4, #4]
   1c748:	ldr	r0, [r4, #4]
   1c74c:	cmp	r0, #0
   1c750:	beq	1c770 <__assert_fail@plt+0xa9fc>
   1c754:	ldr	r1, [r0]
   1c758:	cmp	r1, r5
   1c75c:	bne	1c730 <__assert_fail@plt+0xa9bc>
   1c760:	ldr	r3, [r4, #4]
   1c764:	ldr	r0, [r3]
   1c768:	cmp	r8, #0
   1c76c:	bne	1c7c4 <__assert_fail@plt+0xaa50>
   1c770:	ldrd	r4, [sp]
   1c774:	ldrd	r6, [sp, #8]
   1c778:	ldr	r8, [sp, #16]
   1c77c:	add	sp, sp, #20
   1c780:	pop	{pc}		; (ldr pc, [sp], #4)
   1c784:	ldr	r0, [r4]
   1c788:	cmp	r8, #0
   1c78c:	beq	1c770 <__assert_fail@plt+0xa9fc>
   1c790:	ldr	r1, [r4, #4]
   1c794:	cmp	r1, #0
   1c798:	moveq	r3, #0
   1c79c:	streq	r3, [r4]
   1c7a0:	beq	1c770 <__assert_fail@plt+0xa9fc>
   1c7a4:	ldrd	r2, [r1]
   1c7a8:	strd	r2, [r4]
   1c7ac:	mov	r3, #0
   1c7b0:	str	r3, [r1]
   1c7b4:	ldr	r3, [r6, #36]	; 0x24
   1c7b8:	str	r3, [r1, #4]
   1c7bc:	str	r1, [r6, #36]	; 0x24
   1c7c0:	b	1c770 <__assert_fail@plt+0xa9fc>
   1c7c4:	ldr	r2, [r3, #4]
   1c7c8:	str	r2, [r4, #4]
   1c7cc:	mov	r2, #0
   1c7d0:	str	r2, [r3]
   1c7d4:	ldr	r2, [r6, #36]	; 0x24
   1c7d8:	str	r2, [r3, #4]
   1c7dc:	str	r3, [r6, #36]	; 0x24
   1c7e0:	b	1c770 <__assert_fail@plt+0xa9fc>
   1c7e4:	ldr	r0, [r0, #8]
   1c7e8:	bx	lr
   1c7ec:	ldr	r0, [r0, #12]
   1c7f0:	bx	lr
   1c7f4:	ldr	r0, [r0, #16]
   1c7f8:	bx	lr
   1c7fc:	ldr	r2, [r0]
   1c800:	ldr	r3, [r0, #4]
   1c804:	cmp	r2, r3
   1c808:	bcs	1c878 <__assert_fail@plt+0xab04>
   1c80c:	add	r1, r2, #8
   1c810:	sub	ip, r3, #1
   1c814:	sub	ip, ip, r2
   1c818:	bic	ip, ip, #7
   1c81c:	add	r2, r2, #16
   1c820:	add	ip, ip, r2
   1c824:	mov	r0, #0
   1c828:	b	1c844 <__assert_fail@plt+0xaad0>
   1c82c:	mov	r2, #1
   1c830:	cmp	r0, r2
   1c834:	movcc	r0, r2
   1c838:	add	r1, r1, #8
   1c83c:	cmp	r1, ip
   1c840:	beq	1c874 <__assert_fail@plt+0xab00>
   1c844:	ldr	r3, [r1, #-8]
   1c848:	cmp	r3, #0
   1c84c:	beq	1c838 <__assert_fail@plt+0xaac4>
   1c850:	ldr	r3, [r1, #-4]
   1c854:	cmp	r3, #0
   1c858:	beq	1c82c <__assert_fail@plt+0xaab8>
   1c85c:	mov	r2, #1
   1c860:	add	r2, r2, #1
   1c864:	ldr	r3, [r3, #4]
   1c868:	cmp	r3, #0
   1c86c:	bne	1c860 <__assert_fail@plt+0xaaec>
   1c870:	b	1c830 <__assert_fail@plt+0xaabc>
   1c874:	bx	lr
   1c878:	mov	r0, #0
   1c87c:	bx	lr
   1c880:	push	{lr}		; (str lr, [sp, #-4]!)
   1c884:	ldr	r2, [r0]
   1c888:	ldr	r3, [r0, #4]
   1c88c:	cmp	r2, r3
   1c890:	bcs	1c8f8 <__assert_fail@plt+0xab84>
   1c894:	add	r1, r2, #8
   1c898:	sub	ip, r3, #1
   1c89c:	sub	ip, ip, r2
   1c8a0:	bic	ip, ip, #7
   1c8a4:	add	r2, r2, #16
   1c8a8:	add	ip, ip, r2
   1c8ac:	mov	r2, #0
   1c8b0:	mov	lr, r2
   1c8b4:	b	1c8c4 <__assert_fail@plt+0xab50>
   1c8b8:	add	r1, r1, #8
   1c8bc:	cmp	r1, ip
   1c8c0:	beq	1c900 <__assert_fail@plt+0xab8c>
   1c8c4:	ldr	r3, [r1, #-8]
   1c8c8:	cmp	r3, #0
   1c8cc:	beq	1c8b8 <__assert_fail@plt+0xab44>
   1c8d0:	add	lr, lr, #1
   1c8d4:	add	r2, r2, #1
   1c8d8:	ldr	r3, [r1, #-4]
   1c8dc:	cmp	r3, #0
   1c8e0:	beq	1c8b8 <__assert_fail@plt+0xab44>
   1c8e4:	add	r2, r2, #1
   1c8e8:	ldr	r3, [r3, #4]
   1c8ec:	cmp	r3, #0
   1c8f0:	bne	1c8e4 <__assert_fail@plt+0xab70>
   1c8f4:	b	1c8b8 <__assert_fail@plt+0xab44>
   1c8f8:	mov	r2, #0
   1c8fc:	mov	lr, r2
   1c900:	ldr	r3, [r0, #12]
   1c904:	cmp	r3, lr
   1c908:	movne	r0, #0
   1c90c:	beq	1c914 <__assert_fail@plt+0xaba0>
   1c910:	pop	{pc}		; (ldr pc, [sp], #4)
   1c914:	ldr	r0, [r0, #16]
   1c918:	cmp	r0, r2
   1c91c:	movne	r0, #0
   1c920:	moveq	r0, #1
   1c924:	b	1c910 <__assert_fail@plt+0xab9c>
   1c928:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c92c:	strd	r6, [sp, #8]
   1c930:	str	r8, [sp, #16]
   1c934:	str	lr, [sp, #20]
   1c938:	sub	sp, sp, #8
   1c93c:	mov	r6, r0
   1c940:	mov	r4, r1
   1c944:	ldr	r5, [r0, #8]
   1c948:	ldr	r7, [r0, #12]
   1c94c:	bl	1c7fc <__assert_fail@plt+0xaa88>
   1c950:	mov	r8, r0
   1c954:	ldr	r3, [r6, #16]
   1c958:	movw	r2, #39220	; 0x9934
   1c95c:	movt	r2, #2
   1c960:	mov	r1, #1
   1c964:	mov	r0, r4
   1c968:	bl	11c18 <__fprintf_chk@plt>
   1c96c:	mov	r3, r5
   1c970:	movw	r2, #39244	; 0x994c
   1c974:	movt	r2, #2
   1c978:	mov	r1, #1
   1c97c:	mov	r0, r4
   1c980:	bl	11c18 <__fprintf_chk@plt>
   1c984:	vmov	s15, r7
   1c988:	vcvt.f64.u32	d6, s15
   1c98c:	vldr	d7, [pc, #92]	; 1c9f0 <__assert_fail@plt+0xac7c>
   1c990:	vmul.f64	d6, d6, d7
   1c994:	vmov	s15, r5
   1c998:	vcvt.f64.u32	d7, s15
   1c99c:	vdiv.f64	d5, d6, d7
   1c9a0:	vstr	d5, [sp]
   1c9a4:	mov	r3, r7
   1c9a8:	movw	r2, #39268	; 0x9964
   1c9ac:	movt	r2, #2
   1c9b0:	mov	r1, #1
   1c9b4:	mov	r0, r4
   1c9b8:	bl	11c18 <__fprintf_chk@plt>
   1c9bc:	mov	r3, r8
   1c9c0:	movw	r2, #39304	; 0x9988
   1c9c4:	movt	r2, #2
   1c9c8:	mov	r1, #1
   1c9cc:	mov	r0, r4
   1c9d0:	bl	11c18 <__fprintf_chk@plt>
   1c9d4:	add	sp, sp, #8
   1c9d8:	ldrd	r4, [sp]
   1c9dc:	ldrd	r6, [sp, #8]
   1c9e0:	ldr	r8, [sp, #16]
   1c9e4:	add	sp, sp, #20
   1c9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9ec:	nop	{0}
   1c9f0:	andeq	r0, r0, r0
   1c9f4:	subsmi	r0, r9, r0
   1c9f8:	strd	r4, [sp, #-16]!
   1c9fc:	str	r6, [sp, #8]
   1ca00:	str	lr, [sp, #12]
   1ca04:	mov	r6, r0
   1ca08:	mov	r5, r1
   1ca0c:	bl	1c4fc <__assert_fail@plt+0xa788>
   1ca10:	ldr	r1, [r0]
   1ca14:	cmp	r1, #0
   1ca18:	beq	1ca6c <__assert_fail@plt+0xacf8>
   1ca1c:	mov	r4, r0
   1ca20:	cmp	r1, r5
   1ca24:	beq	1ca54 <__assert_fail@plt+0xace0>
   1ca28:	ldr	r3, [r6, #28]
   1ca2c:	mov	r0, r5
   1ca30:	blx	r3
   1ca34:	cmp	r0, #0
   1ca38:	bne	1ca54 <__assert_fail@plt+0xace0>
   1ca3c:	ldr	r4, [r4, #4]
   1ca40:	cmp	r4, #0
   1ca44:	beq	1ca58 <__assert_fail@plt+0xace4>
   1ca48:	ldr	r1, [r4]
   1ca4c:	cmp	r1, r5
   1ca50:	bne	1ca28 <__assert_fail@plt+0xacb4>
   1ca54:	ldr	r4, [r4]
   1ca58:	mov	r0, r4
   1ca5c:	ldrd	r4, [sp]
   1ca60:	ldr	r6, [sp, #8]
   1ca64:	add	sp, sp, #12
   1ca68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca6c:	mov	r4, r1
   1ca70:	b	1ca58 <__assert_fail@plt+0xace4>
   1ca74:	ldr	r3, [r0, #16]
   1ca78:	cmp	r3, #0
   1ca7c:	beq	1cad4 <__assert_fail@plt+0xad60>
   1ca80:	ldr	r2, [r0]
   1ca84:	ldr	r1, [r0, #4]
   1ca88:	cmp	r2, r1
   1ca8c:	bcs	1cac8 <__assert_fail@plt+0xad54>
   1ca90:	ldr	r0, [r2]
   1ca94:	cmp	r0, #0
   1ca98:	bxne	lr
   1ca9c:	mov	r3, r2
   1caa0:	sub	r1, r1, #1
   1caa4:	sub	r1, r1, r2
   1caa8:	bic	r1, r1, #7
   1caac:	add	r2, r2, r1
   1cab0:	cmp	r3, r2
   1cab4:	beq	1cac8 <__assert_fail@plt+0xad54>
   1cab8:	ldr	r0, [r3, #8]!
   1cabc:	cmp	r0, #0
   1cac0:	beq	1cab0 <__assert_fail@plt+0xad3c>
   1cac4:	bx	lr
   1cac8:	str	r4, [sp, #-8]!
   1cacc:	str	lr, [sp, #4]
   1cad0:	bl	11d2c <abort@plt>
   1cad4:	mov	r0, #0
   1cad8:	bx	lr
   1cadc:	strd	r4, [sp, #-16]!
   1cae0:	str	r6, [sp, #8]
   1cae4:	str	lr, [sp, #12]
   1cae8:	mov	r5, r0
   1caec:	mov	r4, r1
   1caf0:	bl	1c4fc <__assert_fail@plt+0xa788>
   1caf4:	mov	r2, r0
   1caf8:	mov	r3, r0
   1cafc:	b	1cb0c <__assert_fail@plt+0xad98>
   1cb00:	ldr	r3, [r3, #4]
   1cb04:	cmp	r3, #0
   1cb08:	beq	1cb28 <__assert_fail@plt+0xadb4>
   1cb0c:	ldr	r1, [r3]
   1cb10:	cmp	r1, r4
   1cb14:	bne	1cb00 <__assert_fail@plt+0xad8c>
   1cb18:	ldr	r3, [r3, #4]
   1cb1c:	cmp	r3, #0
   1cb20:	ldrne	r0, [r3]
   1cb24:	bne	1cb4c <__assert_fail@plt+0xadd8>
   1cb28:	ldr	r3, [r5, #4]
   1cb2c:	add	r2, r2, #8
   1cb30:	cmp	r3, r2
   1cb34:	bls	1cb48 <__assert_fail@plt+0xadd4>
   1cb38:	ldr	r0, [r2]
   1cb3c:	cmp	r0, #0
   1cb40:	beq	1cb2c <__assert_fail@plt+0xadb8>
   1cb44:	b	1cb4c <__assert_fail@plt+0xadd8>
   1cb48:	mov	r0, #0
   1cb4c:	ldrd	r4, [sp]
   1cb50:	ldr	r6, [sp, #8]
   1cb54:	add	sp, sp, #12
   1cb58:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb5c:	strd	r4, [sp, #-12]!
   1cb60:	str	lr, [sp, #8]
   1cb64:	ldr	r4, [r0]
   1cb68:	ldr	r3, [r0, #4]
   1cb6c:	cmp	r4, r3
   1cb70:	bcs	1cbd8 <__assert_fail@plt+0xae64>
   1cb74:	mov	r5, r0
   1cb78:	mov	r0, #0
   1cb7c:	b	1cb90 <__assert_fail@plt+0xae1c>
   1cb80:	add	r4, r4, #8
   1cb84:	ldr	r3, [r5, #4]
   1cb88:	cmp	r3, r4
   1cb8c:	bls	1cbcc <__assert_fail@plt+0xae58>
   1cb90:	ldr	r3, [r4]
   1cb94:	cmp	r3, #0
   1cb98:	beq	1cb80 <__assert_fail@plt+0xae0c>
   1cb9c:	cmp	r2, r0
   1cba0:	bls	1cbcc <__assert_fail@plt+0xae58>
   1cba4:	add	ip, r1, r0, lsl #2
   1cba8:	mov	r3, r4
   1cbac:	add	r0, r0, #1
   1cbb0:	ldr	lr, [r3]
   1cbb4:	str	lr, [ip], #4
   1cbb8:	ldr	r3, [r3, #4]
   1cbbc:	cmp	r3, #0
   1cbc0:	beq	1cb80 <__assert_fail@plt+0xae0c>
   1cbc4:	cmp	r2, r0
   1cbc8:	bne	1cbac <__assert_fail@plt+0xae38>
   1cbcc:	ldrd	r4, [sp]
   1cbd0:	add	sp, sp, #8
   1cbd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbd8:	mov	r0, #0
   1cbdc:	b	1cbcc <__assert_fail@plt+0xae58>
   1cbe0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1cbe4:	strd	r6, [sp, #8]
   1cbe8:	strd	r8, [sp, #16]
   1cbec:	str	sl, [sp, #24]
   1cbf0:	str	lr, [sp, #28]
   1cbf4:	ldr	r8, [r0]
   1cbf8:	ldr	r3, [r0, #4]
   1cbfc:	cmp	r8, r3
   1cc00:	bcs	1cc60 <__assert_fail@plt+0xaeec>
   1cc04:	mov	r7, r2
   1cc08:	mov	r6, r1
   1cc0c:	mov	r9, r0
   1cc10:	mov	r5, #0
   1cc14:	b	1cc28 <__assert_fail@plt+0xaeb4>
   1cc18:	add	r8, r8, #8
   1cc1c:	ldr	r3, [r9, #4]
   1cc20:	cmp	r3, r8
   1cc24:	bls	1cc64 <__assert_fail@plt+0xaef0>
   1cc28:	ldr	r3, [r8]
   1cc2c:	cmp	r3, #0
   1cc30:	beq	1cc18 <__assert_fail@plt+0xaea4>
   1cc34:	mov	r4, r8
   1cc38:	mov	r1, r7
   1cc3c:	ldr	r0, [r4]
   1cc40:	blx	r6
   1cc44:	cmp	r0, #0
   1cc48:	beq	1cc64 <__assert_fail@plt+0xaef0>
   1cc4c:	add	r5, r5, #1
   1cc50:	ldr	r4, [r4, #4]
   1cc54:	cmp	r4, #0
   1cc58:	bne	1cc38 <__assert_fail@plt+0xaec4>
   1cc5c:	b	1cc18 <__assert_fail@plt+0xaea4>
   1cc60:	mov	r5, #0
   1cc64:	mov	r0, r5
   1cc68:	ldrd	r4, [sp]
   1cc6c:	ldrd	r6, [sp, #8]
   1cc70:	ldrd	r8, [sp, #16]
   1cc74:	ldr	sl, [sp, #24]
   1cc78:	add	sp, sp, #28
   1cc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc80:	ldrb	r2, [r0]
   1cc84:	cmp	r2, #0
   1cc88:	beq	1ccb4 <__assert_fail@plt+0xaf40>
   1cc8c:	mov	r3, #0
   1cc90:	rsb	r3, r3, r3, lsl #5
   1cc94:	add	r3, r3, r2
   1cc98:	udiv	r2, r3, r1
   1cc9c:	mls	r3, r1, r2, r3
   1cca0:	ldrb	r2, [r0, #1]!
   1cca4:	cmp	r2, #0
   1cca8:	bne	1cc90 <__assert_fail@plt+0xaf1c>
   1ccac:	mov	r0, r3
   1ccb0:	bx	lr
   1ccb4:	mov	r3, #0
   1ccb8:	b	1ccac <__assert_fail@plt+0xaf38>
   1ccbc:	strd	r4, [sp, #-8]!
   1ccc0:	movw	r3, #39200	; 0x9920
   1ccc4:	movt	r3, #2
   1ccc8:	ldrd	r4, [r3]
   1cccc:	strd	r4, [r0]
   1ccd0:	ldrd	r4, [r3, #8]
   1ccd4:	strd	r4, [r0, #8]
   1ccd8:	ldr	r3, [r3, #16]
   1ccdc:	str	r3, [r0, #16]
   1cce0:	ldrd	r4, [sp]
   1cce4:	add	sp, sp, #8
   1cce8:	bx	lr
   1ccec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ccf0:	strd	r6, [sp, #8]
   1ccf4:	str	r8, [sp, #16]
   1ccf8:	str	lr, [sp, #20]
   1ccfc:	mov	r8, r0
   1cd00:	mov	r5, r1
   1cd04:	subs	r7, r2, #0
   1cd08:	movw	r2, #49936	; 0xc310
   1cd0c:	movt	r2, #1
   1cd10:	cmp	r7, #0
   1cd14:	moveq	r7, r2
   1cd18:	subs	r6, r3, #0
   1cd1c:	movw	r3, #49952	; 0xc320
   1cd20:	movt	r3, #1
   1cd24:	cmp	r6, #0
   1cd28:	moveq	r6, r3
   1cd2c:	mov	r0, #40	; 0x28
   1cd30:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1cd34:	subs	r4, r0, #0
   1cd38:	beq	1cdb8 <__assert_fail@plt+0xb044>
   1cd3c:	movw	r3, #39200	; 0x9920
   1cd40:	movt	r3, #2
   1cd44:	cmp	r5, #0
   1cd48:	moveq	r5, r3
   1cd4c:	str	r5, [r4, #20]
   1cd50:	mov	r0, r4
   1cd54:	bl	1c330 <__assert_fail@plt+0xa5bc>
   1cd58:	cmp	r0, #0
   1cd5c:	beq	1cdd0 <__assert_fail@plt+0xb05c>
   1cd60:	mov	r1, r5
   1cd64:	mov	r0, r8
   1cd68:	bl	1c3f4 <__assert_fail@plt+0xa680>
   1cd6c:	str	r0, [r4, #8]
   1cd70:	cmp	r0, #0
   1cd74:	beq	1cdd0 <__assert_fail@plt+0xb05c>
   1cd78:	mov	r1, #8
   1cd7c:	bl	24d48 <_obstack_memory_used@@Base+0x4038>
   1cd80:	str	r0, [r4]
   1cd84:	cmp	r0, #0
   1cd88:	beq	1cdd0 <__assert_fail@plt+0xb05c>
   1cd8c:	ldr	r3, [r4, #8]
   1cd90:	add	r0, r0, r3, lsl #3
   1cd94:	str	r0, [r4, #4]
   1cd98:	mov	r3, #0
   1cd9c:	str	r3, [r4, #12]
   1cda0:	str	r3, [r4, #16]
   1cda4:	str	r7, [r4, #24]
   1cda8:	str	r6, [r4, #28]
   1cdac:	ldr	r2, [sp, #24]
   1cdb0:	str	r2, [r4, #32]
   1cdb4:	str	r3, [r4, #36]	; 0x24
   1cdb8:	mov	r0, r4
   1cdbc:	ldrd	r4, [sp]
   1cdc0:	ldrd	r6, [sp, #8]
   1cdc4:	ldr	r8, [sp, #16]
   1cdc8:	add	sp, sp, #20
   1cdcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdd0:	mov	r0, r4
   1cdd4:	bl	1c200 <__assert_fail@plt+0xa48c>
   1cdd8:	mov	r4, #0
   1cddc:	b	1cdb8 <__assert_fail@plt+0xb044>
   1cde0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cde4:	strd	r6, [sp, #8]
   1cde8:	str	r8, [sp, #16]
   1cdec:	str	lr, [sp, #20]
   1cdf0:	mov	r5, r0
   1cdf4:	ldr	r6, [r0]
   1cdf8:	ldr	r3, [r0, #4]
   1cdfc:	cmp	r6, r3
   1ce00:	bcs	1ce98 <__assert_fail@plt+0xb124>
   1ce04:	add	r6, r6, #8
   1ce08:	mov	r7, #0
   1ce0c:	b	1ce78 <__assert_fail@plt+0xb104>
   1ce10:	str	r7, [r4]
   1ce14:	ldr	r3, [r4, #4]
   1ce18:	ldr	r2, [r5, #36]	; 0x24
   1ce1c:	str	r2, [r4, #4]
   1ce20:	str	r4, [r5, #36]	; 0x24
   1ce24:	mov	r4, r3
   1ce28:	cmp	r3, #0
   1ce2c:	beq	1ce48 <__assert_fail@plt+0xb0d4>
   1ce30:	ldr	r3, [r5, #32]
   1ce34:	cmp	r3, #0
   1ce38:	beq	1ce10 <__assert_fail@plt+0xb09c>
   1ce3c:	ldr	r0, [r4]
   1ce40:	blx	r3
   1ce44:	b	1ce10 <__assert_fail@plt+0xb09c>
   1ce48:	ldr	r3, [r5, #32]
   1ce4c:	cmp	r3, #0
   1ce50:	beq	1ce5c <__assert_fail@plt+0xb0e8>
   1ce54:	ldr	r0, [r8, #-8]
   1ce58:	blx	r3
   1ce5c:	str	r7, [r8, #-8]
   1ce60:	str	r7, [r8, #-4]
   1ce64:	add	r2, r6, #8
   1ce68:	ldr	r3, [r5, #4]
   1ce6c:	cmp	r3, r6
   1ce70:	bls	1ce98 <__assert_fail@plt+0xb124>
   1ce74:	mov	r6, r2
   1ce78:	mov	r8, r6
   1ce7c:	ldr	r3, [r6, #-8]
   1ce80:	cmp	r3, #0
   1ce84:	beq	1ce64 <__assert_fail@plt+0xb0f0>
   1ce88:	ldr	r4, [r6, #-4]
   1ce8c:	cmp	r4, #0
   1ce90:	bne	1ce30 <__assert_fail@plt+0xb0bc>
   1ce94:	b	1ce48 <__assert_fail@plt+0xb0d4>
   1ce98:	mov	r3, #0
   1ce9c:	str	r3, [r5, #12]
   1cea0:	str	r3, [r5, #16]
   1cea4:	ldrd	r4, [sp]
   1cea8:	ldrd	r6, [sp, #8]
   1ceac:	ldr	r8, [sp, #16]
   1ceb0:	add	sp, sp, #20
   1ceb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ceb8:	strd	r4, [sp, #-16]!
   1cebc:	str	r6, [sp, #8]
   1cec0:	str	lr, [sp, #12]
   1cec4:	mov	r6, r0
   1cec8:	ldr	r3, [r0, #32]
   1cecc:	cmp	r3, #0
   1ced0:	beq	1cf30 <__assert_fail@plt+0xb1bc>
   1ced4:	ldr	r3, [r0, #16]
   1ced8:	cmp	r3, #0
   1cedc:	beq	1cf30 <__assert_fail@plt+0xb1bc>
   1cee0:	ldr	r5, [r0]
   1cee4:	ldr	r3, [r0, #4]
   1cee8:	cmp	r5, r3
   1ceec:	bcc	1cf04 <__assert_fail@plt+0xb190>
   1cef0:	b	1cf40 <__assert_fail@plt+0xb1cc>
   1cef4:	add	r5, r5, #8
   1cef8:	ldr	r3, [r6, #4]
   1cefc:	cmp	r3, r5
   1cf00:	bls	1cf30 <__assert_fail@plt+0xb1bc>
   1cf04:	ldr	r3, [r5]
   1cf08:	cmp	r3, #0
   1cf0c:	beq	1cef4 <__assert_fail@plt+0xb180>
   1cf10:	mov	r4, r5
   1cf14:	ldr	r3, [r6, #32]
   1cf18:	ldr	r0, [r4]
   1cf1c:	blx	r3
   1cf20:	ldr	r4, [r4, #4]
   1cf24:	cmp	r4, #0
   1cf28:	bne	1cf14 <__assert_fail@plt+0xb1a0>
   1cf2c:	b	1cef4 <__assert_fail@plt+0xb180>
   1cf30:	ldr	r5, [r6]
   1cf34:	ldr	r3, [r6, #4]
   1cf38:	cmp	r5, r3
   1cf3c:	bcc	1cf90 <__assert_fail@plt+0xb21c>
   1cf40:	ldr	r0, [r6, #36]	; 0x24
   1cf44:	cmp	r0, #0
   1cf48:	beq	1cf60 <__assert_fail@plt+0xb1ec>
   1cf4c:	ldr	r4, [r0, #4]
   1cf50:	bl	1c200 <__assert_fail@plt+0xa48c>
   1cf54:	mov	r0, r4
   1cf58:	cmp	r4, #0
   1cf5c:	bne	1cf4c <__assert_fail@plt+0xb1d8>
   1cf60:	ldr	r0, [r6]
   1cf64:	bl	1c200 <__assert_fail@plt+0xa48c>
   1cf68:	mov	r0, r6
   1cf6c:	bl	1c200 <__assert_fail@plt+0xa48c>
   1cf70:	ldrd	r4, [sp]
   1cf74:	ldr	r6, [sp, #8]
   1cf78:	add	sp, sp, #12
   1cf7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf80:	add	r5, r5, #8
   1cf84:	ldr	r3, [r6, #4]
   1cf88:	cmp	r3, r5
   1cf8c:	bls	1cf40 <__assert_fail@plt+0xb1cc>
   1cf90:	ldr	r0, [r5, #4]
   1cf94:	cmp	r0, #0
   1cf98:	beq	1cf80 <__assert_fail@plt+0xb20c>
   1cf9c:	ldr	r4, [r0, #4]
   1cfa0:	bl	1c200 <__assert_fail@plt+0xa48c>
   1cfa4:	mov	r0, r4
   1cfa8:	cmp	r4, #0
   1cfac:	bne	1cf9c <__assert_fail@plt+0xb228>
   1cfb0:	b	1cf80 <__assert_fail@plt+0xb20c>
   1cfb4:	strd	r4, [sp, #-12]!
   1cfb8:	str	lr, [sp, #8]
   1cfbc:	sub	sp, sp, #44	; 0x2c
   1cfc0:	mov	r4, r0
   1cfc4:	mov	r0, r1
   1cfc8:	ldr	r1, [r4, #20]
   1cfcc:	bl	1c3f4 <__assert_fail@plt+0xa680>
   1cfd0:	subs	r5, r0, #0
   1cfd4:	beq	1d0cc <__assert_fail@plt+0xb358>
   1cfd8:	ldr	r3, [r4, #8]
   1cfdc:	cmp	r3, r5
   1cfe0:	beq	1d0e4 <__assert_fail@plt+0xb370>
   1cfe4:	mov	r1, #8
   1cfe8:	mov	r0, r5
   1cfec:	bl	24d48 <_obstack_memory_used@@Base+0x4038>
   1cff0:	str	r0, [sp]
   1cff4:	cmp	r0, #0
   1cff8:	beq	1d0ec <__assert_fail@plt+0xb378>
   1cffc:	str	r5, [sp, #8]
   1d000:	add	r0, r0, r5, lsl #3
   1d004:	str	r0, [sp, #4]
   1d008:	mov	r2, #0
   1d00c:	str	r2, [sp, #12]
   1d010:	str	r2, [sp, #16]
   1d014:	ldr	r3, [r4, #20]
   1d018:	str	r3, [sp, #20]
   1d01c:	ldr	r3, [r4, #24]
   1d020:	str	r3, [sp, #24]
   1d024:	ldr	r3, [r4, #28]
   1d028:	str	r3, [sp, #28]
   1d02c:	ldr	r3, [r4, #32]
   1d030:	str	r3, [sp, #32]
   1d034:	ldr	r3, [r4, #36]	; 0x24
   1d038:	str	r3, [sp, #36]	; 0x24
   1d03c:	mov	r1, r4
   1d040:	mov	r0, sp
   1d044:	bl	1c53c <__assert_fail@plt+0xa7c8>
   1d048:	subs	r5, r0, #0
   1d04c:	bne	1d094 <__assert_fail@plt+0xb320>
   1d050:	ldr	r3, [sp, #36]	; 0x24
   1d054:	str	r3, [r4, #36]	; 0x24
   1d058:	mov	r2, #1
   1d05c:	mov	r1, sp
   1d060:	mov	r0, r4
   1d064:	bl	1c53c <__assert_fail@plt+0xa7c8>
   1d068:	cmp	r0, #0
   1d06c:	beq	1d0c8 <__assert_fail@plt+0xb354>
   1d070:	mov	r2, #0
   1d074:	mov	r1, sp
   1d078:	mov	r0, r4
   1d07c:	bl	1c53c <__assert_fail@plt+0xa7c8>
   1d080:	cmp	r0, #0
   1d084:	beq	1d0c8 <__assert_fail@plt+0xb354>
   1d088:	ldr	r0, [sp]
   1d08c:	bl	1c200 <__assert_fail@plt+0xa48c>
   1d090:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d094:	ldr	r0, [r4]
   1d098:	bl	1c200 <__assert_fail@plt+0xa48c>
   1d09c:	ldr	r3, [sp]
   1d0a0:	str	r3, [r4]
   1d0a4:	ldr	r3, [sp, #4]
   1d0a8:	str	r3, [r4, #4]
   1d0ac:	ldr	r3, [sp, #8]
   1d0b0:	str	r3, [r4, #8]
   1d0b4:	ldr	r3, [sp, #12]
   1d0b8:	str	r3, [r4, #12]
   1d0bc:	ldr	r3, [sp, #36]	; 0x24
   1d0c0:	str	r3, [r4, #36]	; 0x24
   1d0c4:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d0c8:	bl	11d2c <abort@plt>
   1d0cc:	mov	r5, #0
   1d0d0:	mov	r0, r5
   1d0d4:	add	sp, sp, #44	; 0x2c
   1d0d8:	ldrd	r4, [sp]
   1d0dc:	add	sp, sp, #8
   1d0e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0e4:	mov	r5, #1
   1d0e8:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d0ec:	mov	r5, #0
   1d0f0:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d0f4:	strd	r4, [sp, #-16]!
   1d0f8:	str	r6, [sp, #8]
   1d0fc:	str	lr, [sp, #12]
   1d100:	sub	sp, sp, #8
   1d104:	subs	r5, r1, #0
   1d108:	beq	1d154 <__assert_fail@plt+0xb3e0>
   1d10c:	mov	r4, r0
   1d110:	mov	r6, r2
   1d114:	mov	r3, #0
   1d118:	add	r2, sp, #4
   1d11c:	mov	r1, r5
   1d120:	bl	1c6c0 <__assert_fail@plt+0xa94c>
   1d124:	cmp	r0, #0
   1d128:	beq	1d158 <__assert_fail@plt+0xb3e4>
   1d12c:	cmp	r6, #0
   1d130:	moveq	r0, #0
   1d134:	beq	1d140 <__assert_fail@plt+0xb3cc>
   1d138:	str	r0, [r6]
   1d13c:	mov	r0, #0
   1d140:	add	sp, sp, #8
   1d144:	ldrd	r4, [sp]
   1d148:	ldr	r6, [sp, #8]
   1d14c:	add	sp, sp, #12
   1d150:	pop	{pc}		; (ldr pc, [sp], #4)
   1d154:	bl	11d2c <abort@plt>
   1d158:	vldr	s15, [r4, #12]
   1d15c:	vcvt.f32.u32	s14, s15
   1d160:	ldr	r3, [r4, #20]
   1d164:	vldr	s15, [r4, #8]
   1d168:	vcvt.f32.u32	s15, s15
   1d16c:	vldr	s13, [r3, #8]
   1d170:	vmul.f32	s15, s15, s13
   1d174:	vcmpe.f32	s14, s15
   1d178:	vmrs	APSR_nzcv, fpscr
   1d17c:	bgt	1d1cc <__assert_fail@plt+0xb458>
   1d180:	ldr	r3, [sp, #4]
   1d184:	ldr	r2, [r3]
   1d188:	cmp	r2, #0
   1d18c:	beq	1d278 <__assert_fail@plt+0xb504>
   1d190:	ldr	r0, [r4, #36]	; 0x24
   1d194:	cmp	r0, #0
   1d198:	beq	1d260 <__assert_fail@plt+0xb4ec>
   1d19c:	ldr	r3, [r0, #4]
   1d1a0:	str	r3, [r4, #36]	; 0x24
   1d1a4:	str	r5, [r0]
   1d1a8:	ldr	r3, [sp, #4]
   1d1ac:	ldr	r2, [r3, #4]
   1d1b0:	str	r2, [r0, #4]
   1d1b4:	str	r0, [r3, #4]
   1d1b8:	ldr	r3, [r4, #16]
   1d1bc:	add	r3, r3, #1
   1d1c0:	str	r3, [r4, #16]
   1d1c4:	mov	r0, #1
   1d1c8:	b	1d140 <__assert_fail@plt+0xb3cc>
   1d1cc:	mov	r0, r4
   1d1d0:	bl	1c330 <__assert_fail@plt+0xa5bc>
   1d1d4:	ldr	r3, [r4, #20]
   1d1d8:	vldr	s13, [r3, #8]
   1d1dc:	vldr	s15, [r4, #8]
   1d1e0:	vcvt.f32.u32	s15, s15
   1d1e4:	vldr	s14, [r4, #12]
   1d1e8:	vcvt.f32.u32	s14, s14
   1d1ec:	vmul.f32	s12, s13, s15
   1d1f0:	vcmpe.f32	s14, s12
   1d1f4:	vmrs	APSR_nzcv, fpscr
   1d1f8:	ble	1d180 <__assert_fail@plt+0xb40c>
   1d1fc:	ldrb	r2, [r3, #16]
   1d200:	cmp	r2, #0
   1d204:	vldr	s14, [r3, #12]
   1d208:	vmul.f32	s15, s15, s14
   1d20c:	vmuleq.f32	s15, s15, s13
   1d210:	vldr	s14, [pc, #132]	; 1d29c <__assert_fail@plt+0xb528>
   1d214:	vcmpe.f32	s15, s14
   1d218:	vmrs	APSR_nzcv, fpscr
   1d21c:	mvnge	r0, #0
   1d220:	bge	1d140 <__assert_fail@plt+0xb3cc>
   1d224:	vcvt.u32.f32	s15, s15
   1d228:	vmov	r1, s15
   1d22c:	mov	r0, r4
   1d230:	bl	1cfb4 <__assert_fail@plt+0xb240>
   1d234:	cmp	r0, #0
   1d238:	mvneq	r0, #0
   1d23c:	beq	1d140 <__assert_fail@plt+0xb3cc>
   1d240:	mov	r3, #0
   1d244:	add	r2, sp, #4
   1d248:	mov	r1, r5
   1d24c:	mov	r0, r4
   1d250:	bl	1c6c0 <__assert_fail@plt+0xa94c>
   1d254:	cmp	r0, #0
   1d258:	beq	1d180 <__assert_fail@plt+0xb40c>
   1d25c:	bl	11d2c <abort@plt>
   1d260:	mov	r0, #8
   1d264:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1d268:	cmp	r0, #0
   1d26c:	mvneq	r0, #0
   1d270:	beq	1d140 <__assert_fail@plt+0xb3cc>
   1d274:	b	1d1a4 <__assert_fail@plt+0xb430>
   1d278:	str	r5, [r3]
   1d27c:	ldr	r3, [r4, #16]
   1d280:	add	r3, r3, #1
   1d284:	str	r3, [r4, #16]
   1d288:	ldr	r3, [r4, #12]
   1d28c:	add	r3, r3, #1
   1d290:	str	r3, [r4, #12]
   1d294:	mov	r0, #1
   1d298:	b	1d140 <__assert_fail@plt+0xb3cc>
   1d29c:	svcmi	0x00800000
   1d2a0:	str	r4, [sp, #-8]!
   1d2a4:	str	lr, [sp, #4]
   1d2a8:	sub	sp, sp, #8
   1d2ac:	mov	r4, r1
   1d2b0:	add	r2, sp, #4
   1d2b4:	bl	1d0f4 <__assert_fail@plt+0xb380>
   1d2b8:	cmn	r0, #1
   1d2bc:	moveq	r0, #0
   1d2c0:	beq	1d2d0 <__assert_fail@plt+0xb55c>
   1d2c4:	cmp	r0, #0
   1d2c8:	ldreq	r0, [sp, #4]
   1d2cc:	movne	r0, r4
   1d2d0:	add	sp, sp, #8
   1d2d4:	ldr	r4, [sp]
   1d2d8:	add	sp, sp, #4
   1d2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2e0:	strd	r4, [sp, #-16]!
   1d2e4:	str	r6, [sp, #8]
   1d2e8:	str	lr, [sp, #12]
   1d2ec:	sub	sp, sp, #8
   1d2f0:	mov	r4, r0
   1d2f4:	mov	r3, #1
   1d2f8:	add	r2, sp, #4
   1d2fc:	bl	1c6c0 <__assert_fail@plt+0xa94c>
   1d300:	subs	r5, r0, #0
   1d304:	beq	1d324 <__assert_fail@plt+0xb5b0>
   1d308:	ldr	r3, [r4, #16]
   1d30c:	sub	r3, r3, #1
   1d310:	str	r3, [r4, #16]
   1d314:	ldr	r3, [sp, #4]
   1d318:	ldr	r3, [r3]
   1d31c:	cmp	r3, #0
   1d320:	beq	1d33c <__assert_fail@plt+0xb5c8>
   1d324:	mov	r0, r5
   1d328:	add	sp, sp, #8
   1d32c:	ldrd	r4, [sp]
   1d330:	ldr	r6, [sp, #8]
   1d334:	add	sp, sp, #12
   1d338:	pop	{pc}		; (ldr pc, [sp], #4)
   1d33c:	ldr	r3, [r4, #12]
   1d340:	sub	r3, r3, #1
   1d344:	str	r3, [r4, #12]
   1d348:	vmov	s15, r3
   1d34c:	vcvt.f32.u32	s15, s15
   1d350:	ldr	r3, [r4, #20]
   1d354:	vldr	s14, [r4, #8]
   1d358:	vcvt.f32.u32	s14, s14
   1d35c:	vldr	s13, [r3]
   1d360:	vmul.f32	s14, s14, s13
   1d364:	vcmpe.f32	s15, s14
   1d368:	vmrs	APSR_nzcv, fpscr
   1d36c:	bpl	1d324 <__assert_fail@plt+0xb5b0>
   1d370:	mov	r0, r4
   1d374:	bl	1c330 <__assert_fail@plt+0xa5bc>
   1d378:	ldr	r3, [r4, #20]
   1d37c:	vldr	s15, [r4, #8]
   1d380:	vcvt.f32.u32	s15, s15
   1d384:	vldr	s14, [r4, #12]
   1d388:	vcvt.f32.u32	s13, s14
   1d38c:	vldr	s14, [r3]
   1d390:	vmul.f32	s14, s15, s14
   1d394:	vcmpe.f32	s13, s14
   1d398:	vmrs	APSR_nzcv, fpscr
   1d39c:	bpl	1d324 <__assert_fail@plt+0xb5b0>
   1d3a0:	ldrb	r2, [r3, #16]
   1d3a4:	cmp	r2, #0
   1d3a8:	vldr	s14, [r3, #4]
   1d3ac:	vmuleq.f32	s15, s15, s14
   1d3b0:	vldreq	s14, [r3, #8]
   1d3b4:	vmul.f32	s15, s15, s14
   1d3b8:	vcvt.u32.f32	s15, s15
   1d3bc:	vmov	r1, s15
   1d3c0:	mov	r0, r4
   1d3c4:	bl	1cfb4 <__assert_fail@plt+0xb240>
   1d3c8:	cmp	r0, #0
   1d3cc:	bne	1d324 <__assert_fail@plt+0xb5b0>
   1d3d0:	ldr	r0, [r4, #36]	; 0x24
   1d3d4:	cmp	r0, #0
   1d3d8:	beq	1d3f0 <__assert_fail@plt+0xb67c>
   1d3dc:	ldr	r6, [r0, #4]
   1d3e0:	bl	1c200 <__assert_fail@plt+0xa48c>
   1d3e4:	mov	r0, r6
   1d3e8:	cmp	r6, #0
   1d3ec:	bne	1d3dc <__assert_fail@plt+0xb668>
   1d3f0:	mov	r3, #0
   1d3f4:	str	r3, [r4, #36]	; 0x24
   1d3f8:	b	1d324 <__assert_fail@plt+0xb5b0>
   1d3fc:	str	r4, [sp, #-8]!
   1d400:	str	lr, [sp, #4]
   1d404:	bl	1d2e0 <__assert_fail@plt+0xb56c>
   1d408:	ldr	r4, [sp]
   1d40c:	add	sp, sp, #4
   1d410:	pop	{pc}		; (ldr pc, [sp], #4)
   1d414:	strd	r4, [sp, #-16]!
   1d418:	str	r6, [sp, #8]
   1d41c:	str	lr, [sp, #12]
   1d420:	mov	r4, r0
   1d424:	mov	r5, r1
   1d428:	ldr	r0, [r0]
   1d42c:	bl	250cc <_obstack_memory_used@@Base+0x43bc>
   1d430:	ldr	r1, [r4, #8]
   1d434:	mov	r2, r5
   1d438:	mov	r3, #0
   1d43c:	eor	r0, r0, r1
   1d440:	ldr	r1, [r4, #12]
   1d444:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d448:	mov	r0, r2
   1d44c:	ldrd	r4, [sp]
   1d450:	ldr	r6, [sp, #8]
   1d454:	add	sp, sp, #12
   1d458:	pop	{pc}		; (ldr pc, [sp], #4)
   1d45c:	strd	r4, [sp, #-16]!
   1d460:	str	r6, [sp, #8]
   1d464:	str	lr, [sp, #12]
   1d468:	ldrd	r4, [r0, #8]
   1d46c:	ldrd	r2, [r1, #8]
   1d470:	cmp	r5, r3
   1d474:	cmpeq	r4, r2
   1d478:	movne	r0, #0
   1d47c:	beq	1d490 <__assert_fail@plt+0xb71c>
   1d480:	ldrd	r4, [sp]
   1d484:	ldr	r6, [sp, #8]
   1d488:	add	sp, sp, #12
   1d48c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d490:	ldrd	r4, [r0, #16]
   1d494:	ldrd	r2, [r1, #16]
   1d498:	cmp	r5, r3
   1d49c:	cmpeq	r4, r2
   1d4a0:	movne	r0, #0
   1d4a4:	bne	1d480 <__assert_fail@plt+0xb70c>
   1d4a8:	ldr	r1, [r1]
   1d4ac:	ldr	r0, [r0]
   1d4b0:	bl	118a0 <strcmp@plt>
   1d4b4:	clz	r0, r0
   1d4b8:	lsr	r0, r0, #5
   1d4bc:	b	1d480 <__assert_fail@plt+0xb70c>
   1d4c0:	str	r4, [sp, #-8]!
   1d4c4:	str	lr, [sp, #4]
   1d4c8:	mov	r4, r0
   1d4cc:	ldr	r0, [r0]
   1d4d0:	bl	1c200 <__assert_fail@plt+0xa48c>
   1d4d4:	mov	r0, r4
   1d4d8:	bl	1c200 <__assert_fail@plt+0xa48c>
   1d4dc:	ldr	r4, [sp]
   1d4e0:	add	sp, sp, #4
   1d4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4e8:	str	r4, [sp, #-16]!
   1d4ec:	strd	r6, [sp, #4]
   1d4f0:	str	lr, [sp, #12]
   1d4f4:	vpush	{d8}
   1d4f8:	vmov.f64	d8, d0
   1d4fc:	cmp	r0, #1
   1d500:	beq	1d568 <__assert_fail@plt+0xb7f4>
   1d504:	mov	r4, r0
   1d508:	vldr	d7, [pc, #112]	; 1d580 <__assert_fail@plt+0xb80c>
   1d50c:	vcmpe.f64	d0, d7
   1d510:	vmrs	APSR_nzcv, fpscr
   1d514:	bpl	1d568 <__assert_fail@plt+0xb7f4>
   1d518:	vmov	r0, r1, d0
   1d51c:	bl	25660 <_obstack_memory_used@@Base+0x4950>
   1d520:	mov	r6, r0
   1d524:	mov	r7, r1
   1d528:	cmp	r4, #0
   1d52c:	movne	r0, #0
   1d530:	bne	1d550 <__assert_fail@plt+0xb7dc>
   1d534:	mov	r0, r6
   1d538:	bl	254cc <_obstack_memory_used@@Base+0x47bc>
   1d53c:	vmov	d7, r0, r1
   1d540:	vcmp.f64	d7, d8
   1d544:	vmrs	APSR_nzcv, fpscr
   1d548:	movne	r0, #1
   1d54c:	moveq	r0, #0
   1d550:	adds	r2, r6, r0
   1d554:	adc	r3, r7, r0, asr #31
   1d558:	mov	r0, r2
   1d55c:	mov	r1, r3
   1d560:	bl	254cc <_obstack_memory_used@@Base+0x47bc>
   1d564:	vmov	d8, r0, r1
   1d568:	vmov.f64	d0, d8
   1d56c:	vpop	{d8}
   1d570:	ldr	r4, [sp]
   1d574:	ldrd	r6, [sp, #4]
   1d578:	add	sp, sp, #12
   1d57c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d580:	andeq	r0, r0, r0
   1d584:	mvnsmi	r0, #0
   1d588:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d58c:	strd	r6, [sp, #8]
   1d590:	strd	r8, [sp, #16]
   1d594:	strd	sl, [sp, #24]
   1d598:	str	lr, [sp, #32]
   1d59c:	vpush	{d8-d9}
   1d5a0:	sub	sp, sp, #124	; 0x7c
   1d5a4:	mov	r6, r0
   1d5a8:	mov	r7, r1
   1d5ac:	mov	r8, r2
   1d5b0:	str	r2, [sp, #36]	; 0x24
   1d5b4:	mov	r9, r3
   1d5b8:	and	r3, r3, #3
   1d5bc:	str	r3, [sp, #8]
   1d5c0:	ands	r3, r9, #32
   1d5c4:	str	r3, [sp, #44]	; 0x2c
   1d5c8:	movne	r3, #1024	; 0x400
   1d5cc:	moveq	r3, #1000	; 0x3e8
   1d5d0:	str	r3, [sp, #40]	; 0x28
   1d5d4:	bl	11c9c <localeconv@plt>
   1d5d8:	mov	r4, r0
   1d5dc:	ldr	r5, [r0]
   1d5e0:	mov	r0, r5
   1d5e4:	bl	11b94 <strlen@plt>
   1d5e8:	mov	fp, r0
   1d5ec:	sub	r2, r0, #1
   1d5f0:	cmp	r2, #16
   1d5f4:	movcc	fp, r0
   1d5f8:	movcs	fp, #1
   1d5fc:	movw	r3, #37808	; 0x93b0
   1d600:	movt	r3, #2
   1d604:	cmp	r2, #15
   1d608:	movhi	r5, r3
   1d60c:	ldr	sl, [r4, #8]
   1d610:	ldr	r3, [r4, #4]
   1d614:	mov	r4, r3
   1d618:	mov	r0, r3
   1d61c:	bl	11b94 <strlen@plt>
   1d620:	movw	r3, #39300	; 0x9984
   1d624:	movt	r3, #2
   1d628:	mov	r1, r4
   1d62c:	cmp	r0, #16
   1d630:	movhi	r1, r3
   1d634:	str	r1, [sp, #20]
   1d638:	add	r3, r8, #644	; 0x284
   1d63c:	add	r3, r3, #3
   1d640:	str	r3, [sp, #32]
   1d644:	ldrd	r2, [sp, #184]	; 0xb8
   1d648:	ldrd	r0, [sp, #176]	; 0xb0
   1d64c:	cmp	r3, r1
   1d650:	cmpeq	r2, r0
   1d654:	bhi	1d7d8 <__assert_fail@plt+0xba64>
   1d658:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d65c:	orrs	r3, r2, r3
   1d660:	bne	1d6a4 <__assert_fail@plt+0xb930>
   1d664:	ldrd	r2, [sp, #184]	; 0xb8
   1d668:	ldrd	r0, [sp, #176]	; 0xb0
   1d66c:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d670:	mov	r2, r0
   1d674:	mov	r3, r1
   1d678:	mul	r0, r0, r7
   1d67c:	mla	ip, r6, r1, r0
   1d680:	umull	r0, r1, r2, r6
   1d684:	strd	r0, [sp, #24]
   1d688:	add	r1, ip, r1
   1d68c:	str	r1, [sp, #28]
   1d690:	ldrd	r0, [sp, #24]
   1d694:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d698:	cmp	r1, r7
   1d69c:	cmpeq	r0, r6
   1d6a0:	beq	1d974 <__assert_fail@plt+0xbc00>
   1d6a4:	ldrd	r0, [sp, #176]	; 0xb0
   1d6a8:	bl	254cc <_obstack_memory_used@@Base+0x47bc>
   1d6ac:	vmov	d9, r0, r1
   1d6b0:	ldrd	r0, [sp, #184]	; 0xb8
   1d6b4:	bl	254cc <_obstack_memory_used@@Base+0x47bc>
   1d6b8:	vmov	d7, r0, r1
   1d6bc:	vdiv.f64	d8, d9, d7
   1d6c0:	mov	r0, r6
   1d6c4:	mov	r1, r7
   1d6c8:	bl	254cc <_obstack_memory_used@@Base+0x47bc>
   1d6cc:	vmov	d7, r0, r1
   1d6d0:	vmul.f64	d0, d8, d7
   1d6d4:	tst	r9, #16
   1d6d8:	beq	1d8c4 <__assert_fail@plt+0xbb50>
   1d6dc:	vldr	d7, [pc, #1004]	; 1dad0 <__assert_fail@plt+0xbd5c>
   1d6e0:	mov	r7, #0
   1d6e4:	vldr	s13, [sp, #40]	; 0x28
   1d6e8:	vcvt.f64.u32	d6, s13
   1d6ec:	vmul.f64	d7, d7, d6
   1d6f0:	add	r7, r7, #1
   1d6f4:	vmul.f64	d5, d6, d7
   1d6f8:	vcmpe.f64	d5, d0
   1d6fc:	vmrs	APSR_nzcv, fpscr
   1d700:	movls	r3, #1
   1d704:	movhi	r3, #0
   1d708:	cmp	r7, #7
   1d70c:	movgt	r3, #0
   1d710:	andle	r3, r3, #1
   1d714:	cmp	r3, #0
   1d718:	bne	1d6ec <__assert_fail@plt+0xb978>
   1d71c:	vdiv.f64	d8, d0, d7
   1d720:	vmov.f64	d0, d8
   1d724:	ldr	r0, [sp, #8]
   1d728:	bl	1d4e8 <__assert_fail@plt+0xb774>
   1d72c:	vstr	d0, [sp]
   1d730:	movw	r3, #39368	; 0x99c8
   1d734:	movt	r3, #2
   1d738:	mvn	r2, #0
   1d73c:	mov	r1, #1
   1d740:	ldr	r4, [sp, #36]	; 0x24
   1d744:	mov	r0, r4
   1d748:	bl	11bc4 <__sprintf_chk@plt>
   1d74c:	mov	r0, r4
   1d750:	bl	11b94 <strlen@plt>
   1d754:	mov	r8, r0
   1d758:	add	fp, fp, #1
   1d75c:	ldr	r3, [sp, #44]	; 0x2c
   1d760:	clz	r3, r3
   1d764:	lsr	r3, r3, #5
   1d768:	add	r3, r3, #1
   1d76c:	add	r3, r3, fp
   1d770:	cmp	r3, r0
   1d774:	bcc	1d790 <__assert_fail@plt+0xba1c>
   1d778:	tst	r9, #8
   1d77c:	beq	1d900 <__assert_fail@plt+0xbb8c>
   1d780:	add	r3, r4, r0
   1d784:	ldrb	r3, [r3, #-1]
   1d788:	cmp	r3, #48	; 0x30
   1d78c:	bne	1d900 <__assert_fail@plt+0xbb8c>
   1d790:	vldr	d9, [pc, #832]	; 1dad8 <__assert_fail@plt+0xbd64>
   1d794:	vmul.f64	d0, d8, d9
   1d798:	ldr	r0, [sp, #8]
   1d79c:	bl	1d4e8 <__assert_fail@plt+0xb774>
   1d7a0:	vdiv.f64	d0, d0, d9
   1d7a4:	vstr	d0, [sp]
   1d7a8:	movw	r3, #39360	; 0x99c0
   1d7ac:	movt	r3, #2
   1d7b0:	mvn	r2, #0
   1d7b4:	mov	r1, #1
   1d7b8:	ldr	r4, [sp, #36]	; 0x24
   1d7bc:	mov	r0, r4
   1d7c0:	bl	11bc4 <__sprintf_chk@plt>
   1d7c4:	mov	r0, r4
   1d7c8:	bl	11b94 <strlen@plt>
   1d7cc:	mov	r8, r0
   1d7d0:	mov	fp, #0
   1d7d4:	b	1d900 <__assert_fail@plt+0xbb8c>
   1d7d8:	ldrd	r2, [sp, #176]	; 0xb0
   1d7dc:	orrs	r3, r2, r3
   1d7e0:	beq	1d6a4 <__assert_fail@plt+0xb930>
   1d7e4:	ldrd	r2, [sp, #176]	; 0xb0
   1d7e8:	ldrd	r0, [sp, #184]	; 0xb8
   1d7ec:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d7f0:	orrs	r3, r2, r3
   1d7f4:	bne	1d6a4 <__assert_fail@plt+0xb930>
   1d7f8:	ldrd	r2, [sp, #176]	; 0xb0
   1d7fc:	ldrd	r0, [sp, #184]	; 0xb8
   1d800:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d804:	strd	r0, [sp, #48]	; 0x30
   1d808:	mov	r2, r0
   1d80c:	mov	r3, r1
   1d810:	mov	r0, r6
   1d814:	mov	r1, r7
   1d818:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d81c:	lsl	r1, r3, #2
   1d820:	lsl	r4, r2, #2
   1d824:	orr	r0, r1, r2, lsr #30
   1d828:	adds	r4, r4, r2
   1d82c:	adc	r3, r0, r3
   1d830:	adds	r4, r4, r4
   1d834:	adc	r8, r3, r3
   1d838:	ldrd	r2, [sp, #48]	; 0x30
   1d83c:	mov	r0, r4
   1d840:	mov	r1, r8
   1d844:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d848:	adds	r1, r2, r2
   1d84c:	str	r1, [sp, #56]	; 0x38
   1d850:	adc	r3, r3, r3
   1d854:	str	r3, [sp, #60]	; 0x3c
   1d858:	ldrd	r2, [sp, #48]	; 0x30
   1d85c:	mov	r0, r6
   1d860:	mov	r1, r7
   1d864:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d868:	strd	r0, [sp, #24]
   1d86c:	ldrd	r2, [sp, #48]	; 0x30
   1d870:	mov	r0, r4
   1d874:	mov	r1, r8
   1d878:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1d87c:	mov	r6, r0
   1d880:	ldrd	r2, [sp, #48]	; 0x30
   1d884:	ldrd	r0, [sp, #56]	; 0x38
   1d888:	cmp	r3, r1
   1d88c:	cmpeq	r2, r0
   1d890:	bls	1d8a8 <__assert_fail@plt+0xbb34>
   1d894:	mov	r3, r0
   1d898:	orrs	r3, r3, r1
   1d89c:	movne	r4, #1
   1d8a0:	moveq	r4, #0
   1d8a4:	b	1d97c <__assert_fail@plt+0xbc08>
   1d8a8:	ldrd	r2, [sp, #48]	; 0x30
   1d8ac:	ldrd	r0, [sp, #56]	; 0x38
   1d8b0:	cmp	r3, r1
   1d8b4:	cmpeq	r2, r0
   1d8b8:	movcc	r4, #3
   1d8bc:	movcs	r4, #2
   1d8c0:	b	1d97c <__assert_fail@plt+0xbc08>
   1d8c4:	ldr	r0, [sp, #8]
   1d8c8:	bl	1d4e8 <__assert_fail@plt+0xb774>
   1d8cc:	vstr	d0, [sp]
   1d8d0:	movw	r3, #39360	; 0x99c0
   1d8d4:	movt	r3, #2
   1d8d8:	mvn	r2, #0
   1d8dc:	mov	r1, #1
   1d8e0:	ldr	r4, [sp, #36]	; 0x24
   1d8e4:	mov	r0, r4
   1d8e8:	bl	11bc4 <__sprintf_chk@plt>
   1d8ec:	mov	r0, r4
   1d8f0:	bl	11b94 <strlen@plt>
   1d8f4:	mov	r8, r0
   1d8f8:	mov	fp, #0
   1d8fc:	mvn	r7, #0
   1d900:	ldr	r3, [sp, #32]
   1d904:	sub	r6, r3, r8
   1d908:	mov	r2, r8
   1d90c:	ldr	r1, [sp, #36]	; 0x24
   1d910:	mov	r0, r6
   1d914:	bl	118f4 <memmove@plt>
   1d918:	sub	r8, r8, fp
   1d91c:	add	r8, r6, r8
   1d920:	tst	r9, #4
   1d924:	bne	1dcc4 <__assert_fail@plt+0xbf50>
   1d928:	tst	r9, #128	; 0x80
   1d92c:	beq	1d944 <__assert_fail@plt+0xbbd0>
   1d930:	cmp	r7, #0
   1d934:	blt	1dd54 <__assert_fail@plt+0xbfe0>
   1d938:	and	r3, r9, #256	; 0x100
   1d93c:	orrs	r2, r3, r7
   1d940:	bne	1ddb4 <__assert_fail@plt+0xc040>
   1d944:	mov	r3, #0
   1d948:	ldr	r2, [sp, #32]
   1d94c:	strb	r3, [r2]
   1d950:	mov	r0, r6
   1d954:	add	sp, sp, #124	; 0x7c
   1d958:	vpop	{d8-d9}
   1d95c:	ldrd	r4, [sp]
   1d960:	ldrd	r6, [sp, #8]
   1d964:	ldrd	r8, [sp, #16]
   1d968:	ldrd	sl, [sp, #24]
   1d96c:	add	sp, sp, #32
   1d970:	pop	{pc}		; (ldr pc, [sp], #4)
   1d974:	mov	r4, #0
   1d978:	mov	r6, r4
   1d97c:	ands	r3, r9, #16
   1d980:	str	r3, [sp, #48]	; 0x30
   1d984:	beq	1db3c <__assert_fail@plt+0xbdc8>
   1d988:	ldr	r8, [sp, #40]	; 0x28
   1d98c:	mov	r3, #0
   1d990:	ldrd	r0, [sp, #24]
   1d994:	cmp	r3, r1
   1d998:	cmpeq	r8, r0
   1d99c:	bhi	1db74 <__assert_fail@plt+0xbe00>
   1d9a0:	mov	r7, #0
   1d9a4:	str	r5, [sp, #56]	; 0x38
   1d9a8:	str	fp, [sp, #64]	; 0x40
   1d9ac:	str	sl, [sp, #68]	; 0x44
   1d9b0:	mov	sl, r8
   1d9b4:	mov	fp, r3
   1d9b8:	b	1d9f8 <__assert_fail@plt+0xbc84>
   1d9bc:	add	r4, r4, r5
   1d9c0:	cmp	r4, r8
   1d9c4:	movhi	r4, #3
   1d9c8:	movls	r4, #2
   1d9cc:	add	r7, r7, #1
   1d9d0:	ldrd	r2, [sp, #24]
   1d9d4:	cmp	fp, r3
   1d9d8:	cmpeq	sl, r2
   1d9dc:	movls	r3, #1
   1d9e0:	movhi	r3, #0
   1d9e4:	cmp	r7, #7
   1d9e8:	movgt	r3, #0
   1d9ec:	andle	r3, r3, #1
   1d9f0:	cmp	r3, #0
   1d9f4:	beq	1da4c <__assert_fail@plt+0xbcd8>
   1d9f8:	mov	r2, sl
   1d9fc:	mov	r3, fp
   1da00:	ldrd	r0, [sp, #24]
   1da04:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1da08:	add	r2, r2, r2, lsl #2
   1da0c:	add	r2, r6, r2, lsl #1
   1da10:	udiv	r6, r2, r8
   1da14:	mls	r2, r8, r6, r2
   1da18:	asr	r5, r4, #1
   1da1c:	add	r5, r5, r2, lsl #1
   1da20:	mov	r2, sl
   1da24:	mov	r3, fp
   1da28:	ldrd	r0, [sp, #24]
   1da2c:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1da30:	strd	r0, [sp, #24]
   1da34:	cmp	r8, r5
   1da38:	bls	1d9bc <__assert_fail@plt+0xbc48>
   1da3c:	cmn	r4, r5
   1da40:	movne	r4, #1
   1da44:	moveq	r4, #0
   1da48:	b	1d9cc <__assert_fail@plt+0xbc58>
   1da4c:	ldr	r5, [sp, #56]	; 0x38
   1da50:	ldr	fp, [sp, #64]	; 0x40
   1da54:	ldr	sl, [sp, #68]	; 0x44
   1da58:	ldrd	r2, [sp, #24]
   1da5c:	cmp	r3, #0
   1da60:	cmpeq	r2, #9
   1da64:	bhi	1db80 <__assert_fail@plt+0xbe0c>
   1da68:	ldr	r3, [sp, #8]
   1da6c:	cmp	r3, #1
   1da70:	beq	1dae0 <__assert_fail@plt+0xbd6c>
   1da74:	adds	r3, r4, #0
   1da78:	movne	r3, #1
   1da7c:	ldr	r2, [sp, #8]
   1da80:	cmp	r2, #0
   1da84:	movne	r3, #0
   1da88:	cmp	r3, #0
   1da8c:	beq	1de40 <__assert_fail@plt+0xc0cc>
   1da90:	add	r6, r6, #1
   1da94:	cmp	r6, #10
   1da98:	beq	1daf8 <__assert_fail@plt+0xbd84>
   1da9c:	ldr	r3, [sp, #36]	; 0x24
   1daa0:	add	r8, r3, #644	; 0x284
   1daa4:	add	r8, r8, #2
   1daa8:	add	r6, r6, #48	; 0x30
   1daac:	strb	r6, [r3, #646]	; 0x286
   1dab0:	sub	r8, r8, fp
   1dab4:	mov	r2, fp
   1dab8:	mov	r1, r5
   1dabc:	mov	r0, r8
   1dac0:	bl	11930 <memcpy@plt>
   1dac4:	mov	r6, #0
   1dac8:	mov	r4, r6
   1dacc:	b	1db44 <__assert_fail@plt+0xbdd0>
   1dad0:	andeq	r0, r0, r0
   1dad4:	svccc	0x00f00000	; IMB
   1dad8:	andeq	r0, r0, r0
   1dadc:	eormi	r0, r4, r0
   1dae0:	and	r3, r6, #1
   1dae4:	add	r3, r3, r4
   1dae8:	cmp	r3, #2
   1daec:	movle	r3, #0
   1daf0:	movgt	r3, #1
   1daf4:	b	1da88 <__assert_fail@plt+0xbd14>
   1daf8:	ldr	r3, [sp, #24]
   1dafc:	adds	r3, r3, #1
   1db00:	str	r3, [sp, #24]
   1db04:	ldr	r3, [sp, #28]
   1db08:	adc	r3, r3, #0
   1db0c:	str	r3, [sp, #28]
   1db10:	ldrd	r2, [sp, #24]
   1db14:	cmp	r3, #0
   1db18:	cmpeq	r2, #9
   1db1c:	bls	1db30 <__assert_fail@plt+0xbdbc>
   1db20:	ldr	r8, [sp, #32]
   1db24:	mov	r4, #0
   1db28:	mov	r6, r4
   1db2c:	b	1db44 <__assert_fail@plt+0xbdd0>
   1db30:	mov	r4, #0
   1db34:	mov	r6, r4
   1db38:	b	1de48 <__assert_fail@plt+0xc0d4>
   1db3c:	ldr	r8, [sp, #32]
   1db40:	mvn	r7, #0
   1db44:	ldr	r3, [sp, #8]
   1db48:	cmp	r3, #1
   1db4c:	beq	1db88 <__assert_fail@plt+0xbe14>
   1db50:	ldr	r3, [sp, #8]
   1db54:	cmp	r3, #0
   1db58:	movne	r6, #0
   1db5c:	bne	1dbb4 <__assert_fail@plt+0xbe40>
   1db60:	add	r6, r6, r4
   1db64:	cmp	r6, #0
   1db68:	movle	r6, #0
   1db6c:	movgt	r6, #1
   1db70:	b	1dbb4 <__assert_fail@plt+0xbe40>
   1db74:	ldr	r8, [sp, #32]
   1db78:	mov	r7, #0
   1db7c:	b	1db44 <__assert_fail@plt+0xbdd0>
   1db80:	ldr	r8, [sp, #32]
   1db84:	b	1db44 <__assert_fail@plt+0xbdd0>
   1db88:	ldr	r3, [sp, #24]
   1db8c:	and	r0, r3, #1
   1db90:	mov	r1, #0
   1db94:	adds	r2, r0, r4
   1db98:	adc	r3, r1, r4, asr #31
   1db9c:	orr	r2, r2, r3
   1dba0:	cmp	r2, r1
   1dba4:	addne	r6, r6, #1
   1dba8:	cmp	r6, #5
   1dbac:	movle	r6, #0
   1dbb0:	movgt	r6, #1
   1dbb4:	cmp	r6, #0
   1dbb8:	beq	1dc10 <__assert_fail@plt+0xbe9c>
   1dbbc:	ldr	r3, [sp, #24]
   1dbc0:	adds	r3, r3, #1
   1dbc4:	str	r3, [sp, #24]
   1dbc8:	ldr	r3, [sp, #28]
   1dbcc:	adc	r3, r3, #0
   1dbd0:	str	r3, [sp, #28]
   1dbd4:	ldr	r3, [sp, #48]	; 0x30
   1dbd8:	cmp	r3, #0
   1dbdc:	beq	1dc10 <__assert_fail@plt+0xbe9c>
   1dbe0:	ldr	r2, [sp, #40]	; 0x28
   1dbe4:	mov	r3, #0
   1dbe8:	ldrd	r0, [sp, #24]
   1dbec:	cmp	r3, r1
   1dbf0:	cmpeq	r2, r0
   1dbf4:	moveq	r3, #1
   1dbf8:	movne	r3, #0
   1dbfc:	cmp	r7, #7
   1dc00:	movgt	r3, #0
   1dc04:	andle	r3, r3, #1
   1dc08:	cmp	r3, #0
   1dc0c:	bne	1dc34 <__assert_fail@plt+0xbec0>
   1dc10:	mov	r4, #10
   1dc14:	mov	r5, #0
   1dc18:	mov	fp, r8
   1dc1c:	strd	r4, [sp, #8]
   1dc20:	mov	r5, r9
   1dc24:	mov	r9, r8
   1dc28:	mov	r8, r7
   1dc2c:	ldrd	r6, [sp, #24]
   1dc30:	b	1dc7c <__assert_fail@plt+0xbf08>
   1dc34:	add	r7, r7, #1
   1dc38:	tst	r9, #8
   1dc3c:	beq	1dc50 <__assert_fail@plt+0xbedc>
   1dc40:	sub	r6, r8, #1
   1dc44:	mov	r3, #49	; 0x31
   1dc48:	strb	r3, [r8, #-1]
   1dc4c:	b	1d920 <__assert_fail@plt+0xbbac>
   1dc50:	mov	r3, #48	; 0x30
   1dc54:	strb	r3, [r8, #-1]
   1dc58:	mvn	r3, fp
   1dc5c:	add	r8, r8, r3
   1dc60:	mov	r2, fp
   1dc64:	mov	r1, r5
   1dc68:	mov	r0, r8
   1dc6c:	bl	11930 <memcpy@plt>
   1dc70:	b	1dc40 <__assert_fail@plt+0xbecc>
   1dc74:	mov	r6, r0
   1dc78:	mov	r7, r1
   1dc7c:	ldrd	r2, [sp, #8]
   1dc80:	mov	r0, r6
   1dc84:	mov	r1, r7
   1dc88:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1dc8c:	add	r2, r2, #48	; 0x30
   1dc90:	strb	r2, [fp, #-1]!
   1dc94:	ldrd	r2, [sp, #8]
   1dc98:	mov	r0, r6
   1dc9c:	mov	r1, r7
   1dca0:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1dca4:	cmp	r7, #0
   1dca8:	cmpeq	r6, #9
   1dcac:	bhi	1dc74 <__assert_fail@plt+0xbf00>
   1dcb0:	mov	r7, r8
   1dcb4:	mov	r8, r9
   1dcb8:	mov	r6, fp
   1dcbc:	mov	r9, r5
   1dcc0:	b	1d920 <__assert_fail@plt+0xbbac>
   1dcc4:	sub	r4, r8, r6
   1dcc8:	ldr	r0, [sp, #20]
   1dccc:	bl	11b94 <strlen@plt>
   1dcd0:	mov	fp, r0
   1dcd4:	mov	r3, #41	; 0x29
   1dcd8:	mov	r2, r4
   1dcdc:	mov	r1, r6
   1dce0:	add	r0, sp, #76	; 0x4c
   1dce4:	bl	11a20 <__memcpy_chk@plt>
   1dce8:	mvn	r5, #0
   1dcec:	mov	r6, r8
   1dcf0:	b	1dd34 <__assert_fail@plt+0xbfc0>
   1dcf4:	cmp	r5, r4
   1dcf8:	movcs	r5, r4
   1dcfc:	sub	r6, r6, r5
   1dd00:	sub	r4, r4, r5
   1dd04:	mov	r2, r5
   1dd08:	add	r3, sp, #76	; 0x4c
   1dd0c:	add	r1, r3, r4
   1dd10:	mov	r0, r6
   1dd14:	bl	11930 <memcpy@plt>
   1dd18:	cmp	r4, #0
   1dd1c:	beq	1d928 <__assert_fail@plt+0xbbb4>
   1dd20:	sub	r6, r6, fp
   1dd24:	mov	r2, fp
   1dd28:	ldr	r1, [sp, #20]
   1dd2c:	mov	r0, r6
   1dd30:	bl	11930 <memcpy@plt>
   1dd34:	ldrb	r3, [sl]
   1dd38:	cmp	r3, #0
   1dd3c:	beq	1dcf4 <__assert_fail@plt+0xbf80>
   1dd40:	cmp	r3, #255	; 0xff
   1dd44:	movne	r5, r3
   1dd48:	moveq	r5, r4
   1dd4c:	add	sl, sl, #1
   1dd50:	b	1dcf4 <__assert_fail@plt+0xbf80>
   1dd54:	ldrd	r2, [sp, #184]	; 0xb8
   1dd58:	cmp	r3, #0
   1dd5c:	cmpeq	r2, #1
   1dd60:	movls	r7, #0
   1dd64:	bls	1d938 <__assert_fail@plt+0xbbc4>
   1dd68:	mov	r7, #1
   1dd6c:	mov	r2, #1
   1dd70:	mov	r3, #0
   1dd74:	ldr	r1, [sp, #40]	; 0x28
   1dd78:	ldrd	r4, [sp, #184]	; 0xb8
   1dd7c:	mul	r0, r1, r3
   1dd80:	umull	r2, r3, r2, r1
   1dd84:	add	r3, r0, r3
   1dd88:	cmp	r5, r3
   1dd8c:	cmpeq	r4, r2
   1dd90:	bls	1d938 <__assert_fail@plt+0xbbc4>
   1dd94:	add	r7, r7, #1
   1dd98:	cmp	r7, #8
   1dd9c:	bne	1dd7c <__assert_fail@plt+0xc008>
   1dda0:	and	r3, r9, #256	; 0x100
   1dda4:	tst	r9, #64	; 0x40
   1dda8:	bne	1ddbc <__assert_fail@plt+0xc048>
   1ddac:	ldr	r2, [sp, #32]
   1ddb0:	b	1ddd4 <__assert_fail@plt+0xc060>
   1ddb4:	tst	r9, #64	; 0x40
   1ddb8:	beq	1de1c <__assert_fail@plt+0xc0a8>
   1ddbc:	ldr	r0, [sp, #36]	; 0x24
   1ddc0:	add	r2, r0, #648	; 0x288
   1ddc4:	mov	r1, #32
   1ddc8:	strb	r1, [r0, #647]	; 0x287
   1ddcc:	cmp	r7, #0
   1ddd0:	beq	1de24 <__assert_fail@plt+0xc0b0>
   1ddd4:	ldr	ip, [sp, #44]	; 0x2c
   1ddd8:	cmp	ip, #0
   1dddc:	cmpeq	r7, #1
   1dde0:	beq	1de5c <__assert_fail@plt+0xc0e8>
   1dde4:	mov	r0, r2
   1dde8:	movw	r1, #39328	; 0x99a0
   1ddec:	movt	r1, #2
   1ddf0:	ldrb	r1, [r1, r7]
   1ddf4:	strb	r1, [r0], #1
   1ddf8:	str	r0, [sp, #32]
   1ddfc:	cmp	r3, #0
   1de00:	beq	1d944 <__assert_fail@plt+0xbbd0>
   1de04:	cmp	ip, #0
   1de08:	movne	r3, #105	; 0x69
   1de0c:	strbne	r3, [r2, #1]
   1de10:	addne	r2, r2, #2
   1de14:	ldreq	r2, [sp, #32]
   1de18:	b	1de30 <__assert_fail@plt+0xc0bc>
   1de1c:	ldr	r2, [sp, #32]
   1de20:	b	1ddcc <__assert_fail@plt+0xc058>
   1de24:	cmp	r3, #0
   1de28:	streq	r2, [sp, #32]
   1de2c:	beq	1d944 <__assert_fail@plt+0xbbd0>
   1de30:	mov	r3, #66	; 0x42
   1de34:	strb	r3, [r2], #1
   1de38:	str	r2, [sp, #32]
   1de3c:	b	1d944 <__assert_fail@plt+0xbbd0>
   1de40:	cmp	r6, #0
   1de44:	bne	1da9c <__assert_fail@plt+0xbd28>
   1de48:	tst	r9, #8
   1de4c:	beq	1da9c <__assert_fail@plt+0xbd28>
   1de50:	ldr	r8, [sp, #32]
   1de54:	mov	r6, #0
   1de58:	b	1db44 <__assert_fail@plt+0xbdd0>
   1de5c:	mov	r1, r2
   1de60:	mov	r2, #107	; 0x6b
   1de64:	strb	r2, [r1], #1
   1de68:	str	r1, [sp, #32]
   1de6c:	cmp	r3, #0
   1de70:	beq	1d944 <__assert_fail@plt+0xbbd0>
   1de74:	ldr	r2, [sp, #32]
   1de78:	b	1de30 <__assert_fail@plt+0xc0bc>
   1de7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1de80:	strd	r6, [sp, #8]
   1de84:	str	lr, [sp, #16]
   1de88:	sub	sp, sp, #20
   1de8c:	mov	r7, r1
   1de90:	mov	r6, r2
   1de94:	subs	r4, r0, #0
   1de98:	beq	1df1c <__assert_fail@plt+0xc1a8>
   1de9c:	ldrb	r3, [r4]
   1dea0:	cmp	r3, #39	; 0x27
   1dea4:	addeq	r4, r4, #1
   1dea8:	moveq	r5, #4
   1deac:	movne	r5, #0
   1deb0:	movw	r1, #39328	; 0x99a0
   1deb4:	movt	r1, #2
   1deb8:	mov	r3, #4
   1debc:	add	r2, r1, #12
   1dec0:	add	r1, r1, #20
   1dec4:	mov	r0, r4
   1dec8:	bl	1aa70 <__assert_fail@plt+0x8cfc>
   1decc:	cmp	r0, #0
   1ded0:	blt	1df6c <__assert_fail@plt+0xc1f8>
   1ded4:	movw	r3, #39328	; 0x99a0
   1ded8:	movt	r3, #2
   1dedc:	add	r3, r3, r0, lsl #2
   1dee0:	ldr	r3, [r3, #12]
   1dee4:	orr	r5, r5, r3
   1dee8:	mov	r2, #1
   1deec:	mov	r3, #0
   1def0:	strd	r2, [r6]
   1def4:	str	r5, [r7]
   1def8:	mov	r0, #0
   1defc:	ldrd	r2, [r6]
   1df00:	orrs	r3, r2, r3
   1df04:	beq	1e008 <__assert_fail@plt+0xc294>
   1df08:	add	sp, sp, #20
   1df0c:	ldrd	r4, [sp]
   1df10:	ldrd	r6, [sp, #8]
   1df14:	add	sp, sp, #16
   1df18:	pop	{pc}		; (ldr pc, [sp], #4)
   1df1c:	movw	r0, #37192	; 0x9148
   1df20:	movt	r0, #2
   1df24:	bl	11ac8 <getenv@plt>
   1df28:	subs	r4, r0, #0
   1df2c:	bne	1de9c <__assert_fail@plt+0xc128>
   1df30:	movw	r0, #39376	; 0x99d0
   1df34:	movt	r0, #2
   1df38:	bl	11ac8 <getenv@plt>
   1df3c:	subs	r4, r0, #0
   1df40:	bne	1de9c <__assert_fail@plt+0xc128>
   1df44:	movw	r0, #39388	; 0x99dc
   1df48:	movt	r0, #2
   1df4c:	bl	11ac8 <getenv@plt>
   1df50:	cmp	r0, #0
   1df54:	moveq	r2, #1024	; 0x400
   1df58:	movne	r2, #512	; 0x200
   1df5c:	mov	r3, #0
   1df60:	strd	r2, [r6]
   1df64:	mov	r5, #0
   1df68:	b	1def4 <__assert_fail@plt+0xc180>
   1df6c:	movw	r3, #39404	; 0x99ec
   1df70:	movt	r3, #2
   1df74:	str	r3, [sp]
   1df78:	mov	r3, r6
   1df7c:	mov	r2, #0
   1df80:	add	r1, sp, #12
   1df84:	mov	r0, r4
   1df88:	bl	247f8 <_obstack_memory_used@@Base+0x3ae8>
   1df8c:	cmp	r0, #0
   1df90:	bne	1dfe8 <__assert_fail@plt+0xc274>
   1df94:	ldrb	r3, [r4]
   1df98:	sub	r3, r3, #48	; 0x30
   1df9c:	uxtb	r3, r3
   1dfa0:	cmp	r3, #9
   1dfa4:	bls	1def4 <__assert_fail@plt+0xc180>
   1dfa8:	ldr	r2, [sp, #12]
   1dfac:	cmp	r2, r4
   1dfb0:	beq	1dfd0 <__assert_fail@plt+0xc25c>
   1dfb4:	ldrb	r3, [r4, #1]!
   1dfb8:	sub	r3, r3, #48	; 0x30
   1dfbc:	uxtb	r3, r3
   1dfc0:	cmp	r3, #9
   1dfc4:	bls	1def4 <__assert_fail@plt+0xc180>
   1dfc8:	cmp	r2, r4
   1dfcc:	bne	1dfb4 <__assert_fail@plt+0xc240>
   1dfd0:	ldrb	r3, [r4, #-1]
   1dfd4:	cmp	r3, #66	; 0x42
   1dfd8:	orrne	r5, r5, #128	; 0x80
   1dfdc:	beq	1dff4 <__assert_fail@plt+0xc280>
   1dfe0:	orr	r5, r5, #32
   1dfe4:	b	1def4 <__assert_fail@plt+0xc180>
   1dfe8:	mov	r3, #0
   1dfec:	str	r3, [r7]
   1dff0:	b	1defc <__assert_fail@plt+0xc188>
   1dff4:	orr	r5, r5, #384	; 0x180
   1dff8:	ldrb	r3, [r4, #-2]
   1dffc:	cmp	r3, #105	; 0x69
   1e000:	bne	1def4 <__assert_fail@plt+0xc180>
   1e004:	b	1dfe0 <__assert_fail@plt+0xc26c>
   1e008:	movw	r0, #39388	; 0x99dc
   1e00c:	movt	r0, #2
   1e010:	bl	11ac8 <getenv@plt>
   1e014:	cmp	r0, #0
   1e018:	moveq	r2, #1024	; 0x400
   1e01c:	movne	r2, #512	; 0x200
   1e020:	mov	r3, #0
   1e024:	strd	r2, [r6]
   1e028:	mov	r0, #4
   1e02c:	b	1df08 <__assert_fail@plt+0xc194>
   1e030:	strd	r4, [sp, #-16]!
   1e034:	str	r6, [sp, #8]
   1e038:	str	lr, [sp, #12]
   1e03c:	movw	r3, #50132	; 0xc3d4
   1e040:	movt	r3, #3
   1e044:	ldr	r4, [r3]
   1e048:	cmp	r4, #0
   1e04c:	beq	1e094 <__assert_fail@plt+0xc320>
   1e050:	ldr	r3, [r4]
   1e054:	cmp	r0, r3
   1e058:	beq	1e074 <__assert_fail@plt+0xc300>
   1e05c:	ldr	r4, [r4, #4]
   1e060:	cmp	r4, #0
   1e064:	beq	1e094 <__assert_fail@plt+0xc320>
   1e068:	ldr	r3, [r4]
   1e06c:	cmp	r3, r0
   1e070:	bne	1e05c <__assert_fail@plt+0xc2e8>
   1e074:	ldrb	r3, [r4, #8]
   1e078:	cmp	r3, #0
   1e07c:	addne	r0, r4, #8
   1e080:	moveq	r0, #0
   1e084:	ldrd	r4, [sp]
   1e088:	ldr	r6, [sp, #8]
   1e08c:	add	sp, sp, #12
   1e090:	pop	{pc}		; (ldr pc, [sp], #4)
   1e094:	mov	r5, r0
   1e098:	bl	118ac <getpwuid@plt>
   1e09c:	cmp	r0, #0
   1e0a0:	movweq	r6, #39300	; 0x9984
   1e0a4:	movteq	r6, #2
   1e0a8:	ldrne	r6, [r0]
   1e0ac:	mov	r0, r6
   1e0b0:	bl	11b94 <strlen@plt>
   1e0b4:	add	r0, r0, #12
   1e0b8:	bic	r0, r0, #3
   1e0bc:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1e0c0:	mov	r4, r0
   1e0c4:	str	r5, [r0], #8
   1e0c8:	mov	r1, r6
   1e0cc:	bl	11a5c <strcpy@plt>
   1e0d0:	movw	r3, #50132	; 0xc3d4
   1e0d4:	movt	r3, #3
   1e0d8:	ldr	r2, [r3]
   1e0dc:	str	r2, [r4, #4]
   1e0e0:	str	r4, [r3]
   1e0e4:	b	1e074 <__assert_fail@plt+0xc300>
   1e0e8:	strd	r4, [sp, #-16]!
   1e0ec:	str	r6, [sp, #8]
   1e0f0:	str	lr, [sp, #12]
   1e0f4:	mov	r6, r0
   1e0f8:	movw	r3, #50132	; 0xc3d4
   1e0fc:	movt	r3, #3
   1e100:	ldr	r4, [r3]
   1e104:	cmp	r4, #0
   1e108:	beq	1e144 <__assert_fail@plt+0xc3d0>
   1e10c:	ldrb	r5, [r0]
   1e110:	b	1e120 <__assert_fail@plt+0xc3ac>
   1e114:	ldr	r4, [r4, #4]
   1e118:	cmp	r4, #0
   1e11c:	beq	1e144 <__assert_fail@plt+0xc3d0>
   1e120:	ldrb	r3, [r4, #8]
   1e124:	cmp	r3, r5
   1e128:	bne	1e114 <__assert_fail@plt+0xc3a0>
   1e12c:	mov	r1, r6
   1e130:	add	r0, r4, #8
   1e134:	bl	118a0 <strcmp@plt>
   1e138:	cmp	r0, #0
   1e13c:	bne	1e114 <__assert_fail@plt+0xc3a0>
   1e140:	b	1e1ec <__assert_fail@plt+0xc478>
   1e144:	movw	r3, #50132	; 0xc3d4
   1e148:	movt	r3, #3
   1e14c:	ldr	r4, [r3, #4]
   1e150:	cmp	r4, #0
   1e154:	beq	1e194 <__assert_fail@plt+0xc420>
   1e158:	ldrb	r5, [r6]
   1e15c:	b	1e16c <__assert_fail@plt+0xc3f8>
   1e160:	ldr	r4, [r4, #4]
   1e164:	cmp	r4, #0
   1e168:	beq	1e194 <__assert_fail@plt+0xc420>
   1e16c:	ldrb	r3, [r4, #8]
   1e170:	cmp	r3, r5
   1e174:	bne	1e160 <__assert_fail@plt+0xc3ec>
   1e178:	mov	r1, r6
   1e17c:	add	r0, r4, #8
   1e180:	bl	118a0 <strcmp@plt>
   1e184:	cmp	r0, #0
   1e188:	bne	1e160 <__assert_fail@plt+0xc3ec>
   1e18c:	mov	r4, #0
   1e190:	b	1e1ec <__assert_fail@plt+0xc478>
   1e194:	mov	r0, r6
   1e198:	bl	11894 <getpwnam@plt>
   1e19c:	mov	r4, r0
   1e1a0:	mov	r0, r6
   1e1a4:	bl	11b94 <strlen@plt>
   1e1a8:	add	r0, r0, #12
   1e1ac:	bic	r0, r0, #3
   1e1b0:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1e1b4:	mov	r5, r0
   1e1b8:	mov	r1, r6
   1e1bc:	add	r0, r0, #8
   1e1c0:	bl	11a5c <strcpy@plt>
   1e1c4:	cmp	r4, #0
   1e1c8:	beq	1e200 <__assert_fail@plt+0xc48c>
   1e1cc:	ldr	r3, [r4, #8]
   1e1d0:	str	r3, [r5]
   1e1d4:	movw	r3, #50132	; 0xc3d4
   1e1d8:	movt	r3, #3
   1e1dc:	ldr	r2, [r3]
   1e1e0:	str	r2, [r5, #4]
   1e1e4:	str	r5, [r3]
   1e1e8:	mov	r4, r5
   1e1ec:	mov	r0, r4
   1e1f0:	ldrd	r4, [sp]
   1e1f4:	ldr	r6, [sp, #8]
   1e1f8:	add	sp, sp, #12
   1e1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e200:	movw	r3, #50132	; 0xc3d4
   1e204:	movt	r3, #3
   1e208:	ldr	r2, [r3, #4]
   1e20c:	str	r2, [r5, #4]
   1e210:	str	r5, [r3, #4]
   1e214:	b	1e1ec <__assert_fail@plt+0xc478>
   1e218:	strd	r4, [sp, #-16]!
   1e21c:	str	r6, [sp, #8]
   1e220:	str	lr, [sp, #12]
   1e224:	movw	r3, #50132	; 0xc3d4
   1e228:	movt	r3, #3
   1e22c:	ldr	r4, [r3, #8]
   1e230:	cmp	r4, #0
   1e234:	beq	1e27c <__assert_fail@plt+0xc508>
   1e238:	ldr	r3, [r4]
   1e23c:	cmp	r0, r3
   1e240:	beq	1e25c <__assert_fail@plt+0xc4e8>
   1e244:	ldr	r4, [r4, #4]
   1e248:	cmp	r4, #0
   1e24c:	beq	1e27c <__assert_fail@plt+0xc508>
   1e250:	ldr	r3, [r4]
   1e254:	cmp	r3, r0
   1e258:	bne	1e244 <__assert_fail@plt+0xc4d0>
   1e25c:	ldrb	r3, [r4, #8]
   1e260:	cmp	r3, #0
   1e264:	addne	r0, r4, #8
   1e268:	moveq	r0, #0
   1e26c:	ldrd	r4, [sp]
   1e270:	ldr	r6, [sp, #8]
   1e274:	add	sp, sp, #12
   1e278:	pop	{pc}		; (ldr pc, [sp], #4)
   1e27c:	mov	r5, r0
   1e280:	bl	11d44 <getgrgid@plt>
   1e284:	cmp	r0, #0
   1e288:	movweq	r6, #39300	; 0x9984
   1e28c:	movteq	r6, #2
   1e290:	ldrne	r6, [r0]
   1e294:	mov	r0, r6
   1e298:	bl	11b94 <strlen@plt>
   1e29c:	add	r0, r0, #12
   1e2a0:	bic	r0, r0, #3
   1e2a4:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1e2a8:	mov	r4, r0
   1e2ac:	str	r5, [r0], #8
   1e2b0:	mov	r1, r6
   1e2b4:	bl	11a5c <strcpy@plt>
   1e2b8:	movw	r3, #50132	; 0xc3d4
   1e2bc:	movt	r3, #3
   1e2c0:	ldr	r2, [r3, #8]
   1e2c4:	str	r2, [r4, #4]
   1e2c8:	str	r4, [r3, #8]
   1e2cc:	b	1e25c <__assert_fail@plt+0xc4e8>
   1e2d0:	strd	r4, [sp, #-16]!
   1e2d4:	str	r6, [sp, #8]
   1e2d8:	str	lr, [sp, #12]
   1e2dc:	mov	r6, r0
   1e2e0:	movw	r3, #50132	; 0xc3d4
   1e2e4:	movt	r3, #3
   1e2e8:	ldr	r4, [r3, #8]
   1e2ec:	cmp	r4, #0
   1e2f0:	beq	1e32c <__assert_fail@plt+0xc5b8>
   1e2f4:	ldrb	r5, [r0]
   1e2f8:	b	1e308 <__assert_fail@plt+0xc594>
   1e2fc:	ldr	r4, [r4, #4]
   1e300:	cmp	r4, #0
   1e304:	beq	1e32c <__assert_fail@plt+0xc5b8>
   1e308:	ldrb	r3, [r4, #8]
   1e30c:	cmp	r3, r5
   1e310:	bne	1e2fc <__assert_fail@plt+0xc588>
   1e314:	mov	r1, r6
   1e318:	add	r0, r4, #8
   1e31c:	bl	118a0 <strcmp@plt>
   1e320:	cmp	r0, #0
   1e324:	bne	1e2fc <__assert_fail@plt+0xc588>
   1e328:	b	1e3d4 <__assert_fail@plt+0xc660>
   1e32c:	movw	r3, #50132	; 0xc3d4
   1e330:	movt	r3, #3
   1e334:	ldr	r4, [r3, #12]
   1e338:	cmp	r4, #0
   1e33c:	beq	1e37c <__assert_fail@plt+0xc608>
   1e340:	ldrb	r5, [r6]
   1e344:	b	1e354 <__assert_fail@plt+0xc5e0>
   1e348:	ldr	r4, [r4, #4]
   1e34c:	cmp	r4, #0
   1e350:	beq	1e37c <__assert_fail@plt+0xc608>
   1e354:	ldrb	r3, [r4, #8]
   1e358:	cmp	r3, r5
   1e35c:	bne	1e348 <__assert_fail@plt+0xc5d4>
   1e360:	mov	r1, r6
   1e364:	add	r0, r4, #8
   1e368:	bl	118a0 <strcmp@plt>
   1e36c:	cmp	r0, #0
   1e370:	bne	1e348 <__assert_fail@plt+0xc5d4>
   1e374:	mov	r4, #0
   1e378:	b	1e3d4 <__assert_fail@plt+0xc660>
   1e37c:	mov	r0, r6
   1e380:	bl	11d50 <getgrnam@plt>
   1e384:	mov	r4, r0
   1e388:	mov	r0, r6
   1e38c:	bl	11b94 <strlen@plt>
   1e390:	add	r0, r0, #12
   1e394:	bic	r0, r0, #3
   1e398:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   1e39c:	mov	r5, r0
   1e3a0:	mov	r1, r6
   1e3a4:	add	r0, r0, #8
   1e3a8:	bl	11a5c <strcpy@plt>
   1e3ac:	cmp	r4, #0
   1e3b0:	beq	1e3e8 <__assert_fail@plt+0xc674>
   1e3b4:	ldr	r3, [r4, #8]
   1e3b8:	str	r3, [r5]
   1e3bc:	movw	r3, #50132	; 0xc3d4
   1e3c0:	movt	r3, #3
   1e3c4:	ldr	r2, [r3, #8]
   1e3c8:	str	r2, [r5, #4]
   1e3cc:	str	r5, [r3, #8]
   1e3d0:	mov	r4, r5
   1e3d4:	mov	r0, r4
   1e3d8:	ldrd	r4, [sp]
   1e3dc:	ldr	r6, [sp, #8]
   1e3e0:	add	sp, sp, #12
   1e3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3e8:	movw	r3, #50132	; 0xc3d4
   1e3ec:	movt	r3, #3
   1e3f0:	ldr	r2, [r3, #12]
   1e3f4:	str	r2, [r5, #4]
   1e3f8:	str	r5, [r3, #12]
   1e3fc:	b	1e3d4 <__assert_fail@plt+0xc660>
   1e400:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1e404:	strd	r6, [sp, #8]
   1e408:	strd	r8, [sp, #16]
   1e40c:	str	sl, [sp, #24]
   1e410:	str	lr, [sp, #28]
   1e414:	mov	r4, r0
   1e418:	mov	r5, r1
   1e41c:	add	r6, r2, #20
   1e420:	mov	r3, #0
   1e424:	strb	r3, [r2, #20]
   1e428:	cmp	r0, #0
   1e42c:	sbcs	r3, r1, #0
   1e430:	movge	r8, #10
   1e434:	movge	r9, #0
   1e438:	movlt	r8, #10
   1e43c:	movlt	r9, #0
   1e440:	blt	1e4a4 <__assert_fail@plt+0xc730>
   1e444:	mov	r2, r8
   1e448:	mov	r3, r9
   1e44c:	mov	r0, r4
   1e450:	mov	r1, r5
   1e454:	bl	25540 <_obstack_memory_used@@Base+0x4830>
   1e458:	add	r2, r2, #48	; 0x30
   1e45c:	strb	r2, [r6, #-1]!
   1e460:	mov	r2, r8
   1e464:	mov	r3, r9
   1e468:	mov	r0, r4
   1e46c:	mov	r1, r5
   1e470:	bl	25540 <_obstack_memory_used@@Base+0x4830>
   1e474:	mov	r4, r0
   1e478:	mov	r5, r1
   1e47c:	orrs	r3, r4, r5
   1e480:	bne	1e444 <__assert_fail@plt+0xc6d0>
   1e484:	mov	r0, r6
   1e488:	ldrd	r4, [sp]
   1e48c:	ldrd	r6, [sp, #8]
   1e490:	ldrd	r8, [sp, #16]
   1e494:	ldr	sl, [sp, #24]
   1e498:	add	sp, sp, #28
   1e49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4a0:	mov	r6, r7
   1e4a4:	sub	r7, r6, #1
   1e4a8:	mov	r2, r8
   1e4ac:	mov	r3, r9
   1e4b0:	mov	r0, r4
   1e4b4:	mov	r1, r5
   1e4b8:	bl	25540 <_obstack_memory_used@@Base+0x4830>
   1e4bc:	rsb	r2, r2, #48	; 0x30
   1e4c0:	strb	r2, [r6, #-1]
   1e4c4:	mov	r2, r8
   1e4c8:	mov	r3, r9
   1e4cc:	mov	r0, r4
   1e4d0:	mov	r1, r5
   1e4d4:	bl	25540 <_obstack_memory_used@@Base+0x4830>
   1e4d8:	mov	r4, r0
   1e4dc:	mov	r5, r1
   1e4e0:	orrs	r3, r4, r5
   1e4e4:	bne	1e4a0 <__assert_fail@plt+0xc72c>
   1e4e8:	sub	r6, r6, #2
   1e4ec:	mov	r3, #45	; 0x2d
   1e4f0:	strb	r3, [r7, #-1]
   1e4f4:	b	1e484 <__assert_fail@plt+0xc710>
   1e4f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e4fc:	str	r6, [sp, #8]
   1e500:	strd	r8, [sp, #12]
   1e504:	str	lr, [sp, #20]
   1e508:	mov	r4, r0
   1e50c:	mov	r5, r1
   1e510:	add	r6, r2, #20
   1e514:	mov	r3, #0
   1e518:	strb	r3, [r2, #20]
   1e51c:	mov	r8, #10
   1e520:	mov	r9, #0
   1e524:	b	1e530 <__assert_fail@plt+0xc7bc>
   1e528:	mov	r4, r0
   1e52c:	mov	r5, r1
   1e530:	mov	r2, r8
   1e534:	mov	r3, r9
   1e538:	mov	r0, r4
   1e53c:	mov	r1, r5
   1e540:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1e544:	add	r2, r2, #48	; 0x30
   1e548:	strb	r2, [r6, #-1]!
   1e54c:	mov	r2, r8
   1e550:	mov	r3, r9
   1e554:	mov	r0, r4
   1e558:	mov	r1, r5
   1e55c:	bl	25614 <_obstack_memory_used@@Base+0x4904>
   1e560:	cmp	r5, #0
   1e564:	cmpeq	r4, #9
   1e568:	bhi	1e528 <__assert_fail@plt+0xc7b4>
   1e56c:	mov	r0, r6
   1e570:	ldrd	r4, [sp]
   1e574:	ldr	r6, [sp, #8]
   1e578:	ldrd	r8, [sp, #12]
   1e57c:	add	sp, sp, #20
   1e580:	pop	{pc}		; (ldr pc, [sp], #4)
   1e584:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e588:	strd	r6, [sp, #8]
   1e58c:	str	lr, [sp, #16]
   1e590:	sub	sp, sp, #12
   1e594:	mov	r7, r1
   1e598:	mov	r5, r2
   1e59c:	subs	r6, r0, #0
   1e5a0:	addeq	r6, sp, #4
   1e5a4:	mov	r0, r6
   1e5a8:	bl	11a74 <mbrtowc@plt>
   1e5ac:	mov	r4, r0
   1e5b0:	cmp	r5, #0
   1e5b4:	cmnne	r0, #3
   1e5b8:	bhi	1e5d4 <__assert_fail@plt+0xc860>
   1e5bc:	mov	r0, r4
   1e5c0:	add	sp, sp, #12
   1e5c4:	ldrd	r4, [sp]
   1e5c8:	ldrd	r6, [sp, #8]
   1e5cc:	add	sp, sp, #16
   1e5d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5d4:	mov	r0, #0
   1e5d8:	bl	1c2b4 <__assert_fail@plt+0xa540>
   1e5dc:	cmp	r0, #0
   1e5e0:	bne	1e5bc <__assert_fail@plt+0xc848>
   1e5e4:	ldrb	r3, [r7]
   1e5e8:	str	r3, [r6]
   1e5ec:	mov	r4, #1
   1e5f0:	b	1e5bc <__assert_fail@plt+0xc848>
   1e5f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e5f8:	strd	r6, [sp, #8]
   1e5fc:	strd	r8, [sp, #16]
   1e600:	strd	sl, [sp, #24]
   1e604:	str	lr, [sp, #32]
   1e608:	sub	sp, sp, #20
   1e60c:	str	r0, [sp, #8]
   1e610:	mov	sl, r1
   1e614:	mov	r5, r2
   1e618:	mov	r9, r3
   1e61c:	ldr	r6, [sp, #60]	; 0x3c
   1e620:	bl	11b94 <strlen@plt>
   1e624:	mov	r8, r0
   1e628:	tst	r6, #2
   1e62c:	movne	r3, #0
   1e630:	strne	r3, [sp, #4]
   1e634:	beq	1e694 <__assert_fail@plt+0xc920>
   1e638:	mov	r7, r8
   1e63c:	mov	fp, #0
   1e640:	ldr	r3, [r9]
   1e644:	cmp	r3, r7
   1e648:	movcc	r8, r3
   1e64c:	movcc	r4, #0
   1e650:	bcc	1e668 <__assert_fail@plt+0xc8f4>
   1e654:	cmp	r7, r3
   1e658:	subcc	r4, r3, r7
   1e65c:	movcc	r3, r7
   1e660:	movcs	r3, r7
   1e664:	movcs	r4, #0
   1e668:	str	r3, [r9]
   1e66c:	ldr	r3, [sp, #56]	; 0x38
   1e670:	cmp	r3, #0
   1e674:	beq	1e858 <__assert_fail@plt+0xcae4>
   1e678:	cmp	r3, #1
   1e67c:	moveq	r7, #0
   1e680:	beq	1e860 <__assert_fail@plt+0xcaec>
   1e684:	lsr	r7, r4, #1
   1e688:	and	r4, r4, #1
   1e68c:	add	r4, r4, r7
   1e690:	b	1e860 <__assert_fail@plt+0xcaec>
   1e694:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1e698:	cmp	r0, #1
   1e69c:	movls	r3, #0
   1e6a0:	strls	r3, [sp, #4]
   1e6a4:	bls	1e638 <__assert_fail@plt+0xc8c4>
   1e6a8:	mov	r2, #0
   1e6ac:	ldr	r1, [sp, #8]
   1e6b0:	mov	r0, r2
   1e6b4:	bl	11ca8 <mbstowcs@plt>
   1e6b8:	mov	r4, r0
   1e6bc:	cmn	r0, #1
   1e6c0:	bne	1e6ec <__assert_fail@plt+0xc978>
   1e6c4:	tst	r6, #1
   1e6c8:	moveq	r3, #0
   1e6cc:	streq	r3, [sp, #4]
   1e6d0:	moveq	fp, r3
   1e6d4:	beq	1e888 <__assert_fail@plt+0xcb14>
   1e6d8:	mov	r7, r8
   1e6dc:	mov	r3, #0
   1e6e0:	str	r3, [sp, #4]
   1e6e4:	mov	fp, r3
   1e6e8:	b	1e640 <__assert_fail@plt+0xc8cc>
   1e6ec:	add	fp, r0, #1
   1e6f0:	lsl	r4, fp, #2
   1e6f4:	mov	r0, r4
   1e6f8:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1e6fc:	subs	r3, r0, #0
   1e700:	str	r3, [sp, #4]
   1e704:	beq	1e744 <__assert_fail@plt+0xc9d0>
   1e708:	mov	r2, fp
   1e70c:	ldr	r1, [sp, #8]
   1e710:	ldr	r0, [sp, #4]
   1e714:	bl	11ca8 <mbstowcs@plt>
   1e718:	cmp	r0, #0
   1e71c:	beq	1e638 <__assert_fail@plt+0xc8c4>
   1e720:	ldr	r7, [sp, #4]
   1e724:	add	r4, r7, r4
   1e728:	mov	r3, #0
   1e72c:	str	r3, [r4, #-4]
   1e730:	ldr	r0, [r7]
   1e734:	cmp	r0, r3
   1e738:	beq	1e94c <__assert_fail@plt+0xcbd8>
   1e73c:	mov	r4, r3
   1e740:	b	1e76c <__assert_fail@plt+0xc9f8>
   1e744:	tst	r6, #1
   1e748:	moveq	fp, r3
   1e74c:	mvneq	r4, #0
   1e750:	beq	1e888 <__assert_fail@plt+0xcb14>
   1e754:	mov	r7, r8
   1e758:	ldr	fp, [sp, #4]
   1e75c:	b	1e640 <__assert_fail@plt+0xc8cc>
   1e760:	ldr	r0, [r7, #4]!
   1e764:	cmp	r0, #0
   1e768:	beq	1e788 <__assert_fail@plt+0xca14>
   1e76c:	bl	119f0 <iswprint@plt>
   1e770:	cmp	r0, #0
   1e774:	bne	1e760 <__assert_fail@plt+0xc9ec>
   1e778:	movw	r3, #65533	; 0xfffd
   1e77c:	str	r3, [r7]
   1e780:	mov	r4, #1
   1e784:	b	1e760 <__assert_fail@plt+0xc9ec>
   1e788:	mov	r1, fp
   1e78c:	ldr	r0, [sp, #4]
   1e790:	bl	11c6c <wcswidth@plt>
   1e794:	mov	r7, r0
   1e798:	cmp	r4, #0
   1e79c:	beq	1e95c <__assert_fail@plt+0xcbe8>
   1e7a0:	mov	r2, #0
   1e7a4:	ldr	r1, [sp, #4]
   1e7a8:	mov	r0, r2
   1e7ac:	bl	11a80 <wcstombs@plt>
   1e7b0:	add	r3, r0, #1
   1e7b4:	str	r3, [sp, #12]
   1e7b8:	ldr	r0, [sp, #12]
   1e7bc:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   1e7c0:	subs	fp, r0, #0
   1e7c4:	beq	1e7e4 <__assert_fail@plt+0xca70>
   1e7c8:	ldr	r8, [r9]
   1e7cc:	ldr	r4, [sp, #4]
   1e7d0:	ldr	r0, [r4]
   1e7d4:	cmp	r0, #0
   1e7d8:	beq	1e82c <__assert_fail@plt+0xcab8>
   1e7dc:	mov	r7, #0
   1e7e0:	b	1e810 <__assert_fail@plt+0xca9c>
   1e7e4:	tst	r6, #1
   1e7e8:	mvneq	r4, #0
   1e7ec:	bne	1e640 <__assert_fail@plt+0xc8cc>
   1e7f0:	b	1e888 <__assert_fail@plt+0xcb14>
   1e7f4:	add	r3, r0, r7
   1e7f8:	cmp	r8, r3
   1e7fc:	bcc	1e834 <__assert_fail@plt+0xcac0>
   1e800:	ldr	r0, [r4, #4]!
   1e804:	mov	r7, r3
   1e808:	cmp	r0, #0
   1e80c:	beq	1e834 <__assert_fail@plt+0xcac0>
   1e810:	bl	118d0 <wcwidth@plt>
   1e814:	cmn	r0, #1
   1e818:	bne	1e7f4 <__assert_fail@plt+0xca80>
   1e81c:	movw	r3, #65533	; 0xfffd
   1e820:	str	r3, [r4]
   1e824:	mov	r0, #1
   1e828:	b	1e7f4 <__assert_fail@plt+0xca80>
   1e82c:	mov	r7, r0
   1e830:	ldr	r4, [sp, #4]
   1e834:	mov	r3, #0
   1e838:	str	r3, [r4]
   1e83c:	ldr	r2, [sp, #12]
   1e840:	ldr	r1, [sp, #4]
   1e844:	mov	r0, fp
   1e848:	bl	11a80 <wcstombs@plt>
   1e84c:	mov	r8, r0
   1e850:	str	fp, [sp, #8]
   1e854:	b	1e640 <__assert_fail@plt+0xc8cc>
   1e858:	mov	r7, r4
   1e85c:	ldr	r4, [sp, #56]	; 0x38
   1e860:	and	r3, r6, #4
   1e864:	cmp	r3, #0
   1e868:	movne	r4, #0
   1e86c:	and	r6, r6, #8
   1e870:	cmp	r6, #0
   1e874:	movne	r7, #0
   1e878:	cmp	r5, #0
   1e87c:	bne	1e8b8 <__assert_fail@plt+0xcb44>
   1e880:	add	r4, r4, r8
   1e884:	add	r4, r4, r7
   1e888:	ldr	r0, [sp, #4]
   1e88c:	bl	1c200 <__assert_fail@plt+0xa48c>
   1e890:	mov	r0, fp
   1e894:	bl	1c200 <__assert_fail@plt+0xa48c>
   1e898:	mov	r0, r4
   1e89c:	add	sp, sp, #20
   1e8a0:	ldrd	r4, [sp]
   1e8a4:	ldrd	r6, [sp, #8]
   1e8a8:	ldrd	r8, [sp, #16]
   1e8ac:	ldrd	sl, [sp, #24]
   1e8b0:	add	sp, sp, #32
   1e8b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8b8:	sub	r5, r5, #1
   1e8bc:	add	r5, sl, r5
   1e8c0:	cmp	r4, #0
   1e8c4:	cmpne	sl, r5
   1e8c8:	bcs	1e93c <__assert_fail@plt+0xcbc8>
   1e8cc:	mov	r0, sl
   1e8d0:	mov	r1, #32
   1e8d4:	strb	r1, [r0], #1
   1e8d8:	sub	r3, sl, r0
   1e8dc:	rsb	r2, r4, #0
   1e8e0:	cmp	r2, r3
   1e8e4:	cmpne	r5, r0
   1e8e8:	bhi	1e8d4 <__assert_fail@plt+0xcb60>
   1e8ec:	mov	r3, #0
   1e8f0:	strb	r3, [r0]
   1e8f4:	sub	r2, r5, r0
   1e8f8:	cmp	r2, r8
   1e8fc:	movcs	r2, r8
   1e900:	ldr	r1, [sp, #8]
   1e904:	bl	11b40 <mempcpy@plt>
   1e908:	cmp	r7, #0
   1e90c:	cmpne	r5, r0
   1e910:	bls	1e944 <__assert_fail@plt+0xcbd0>
   1e914:	mov	r3, r0
   1e918:	mov	r1, #32
   1e91c:	strb	r1, [r3], #1
   1e920:	sub	r2, r3, r7
   1e924:	cmp	r2, r0
   1e928:	cmpne	r5, r3
   1e92c:	bhi	1e91c <__assert_fail@plt+0xcba8>
   1e930:	mov	r2, #0
   1e934:	strb	r2, [r3]
   1e938:	b	1e880 <__assert_fail@plt+0xcb0c>
   1e93c:	mov	r0, sl
   1e940:	b	1e8ec <__assert_fail@plt+0xcb78>
   1e944:	mov	r3, r0
   1e948:	b	1e930 <__assert_fail@plt+0xcbbc>
   1e94c:	mov	r1, fp
   1e950:	ldr	r0, [sp, #4]
   1e954:	bl	11c6c <wcswidth@plt>
   1e958:	mov	r7, r0
   1e95c:	ldr	r3, [r9]
   1e960:	cmp	r3, r7
   1e964:	addcc	r3, r8, #1
   1e968:	strcc	r3, [sp, #12]
   1e96c:	bcc	1e7b8 <__assert_fail@plt+0xca44>
   1e970:	mov	fp, #0
   1e974:	b	1e654 <__assert_fail@plt+0xc8e0>
   1e978:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e97c:	strd	r6, [sp, #8]
   1e980:	strd	r8, [sp, #16]
   1e984:	strd	sl, [sp, #24]
   1e988:	str	lr, [sp, #32]
   1e98c:	sub	sp, sp, #12
   1e990:	mov	fp, r0
   1e994:	mov	r6, r1
   1e998:	mov	sl, r2
   1e99c:	mov	r9, r3
   1e9a0:	ldr	r8, [r1]
   1e9a4:	mov	r0, r8
   1e9a8:	mov	r7, #0
   1e9ac:	add	r4, r0, #1
   1e9b0:	mov	r1, r4
   1e9b4:	mov	r0, r7
   1e9b8:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   1e9bc:	subs	r5, r0, #0
   1e9c0:	beq	1e9fc <__assert_fail@plt+0xcc88>
   1e9c4:	str	r8, [r6]
   1e9c8:	str	r9, [sp, #4]
   1e9cc:	str	sl, [sp]
   1e9d0:	mov	r3, r6
   1e9d4:	mov	r2, r4
   1e9d8:	mov	r1, r5
   1e9dc:	mov	r0, fp
   1e9e0:	bl	1e5f4 <__assert_fail@plt+0xc880>
   1e9e4:	cmn	r0, #1
   1e9e8:	beq	1ea24 <__assert_fail@plt+0xccb0>
   1e9ec:	mov	r7, r5
   1e9f0:	cmp	r4, r0
   1e9f4:	bls	1e9ac <__assert_fail@plt+0xcc38>
   1e9f8:	b	1ea04 <__assert_fail@plt+0xcc90>
   1e9fc:	mov	r0, r7
   1ea00:	bl	1c200 <__assert_fail@plt+0xa48c>
   1ea04:	mov	r0, r5
   1ea08:	add	sp, sp, #12
   1ea0c:	ldrd	r4, [sp]
   1ea10:	ldrd	r6, [sp, #8]
   1ea14:	ldrd	r8, [sp, #16]
   1ea18:	ldrd	sl, [sp, #24]
   1ea1c:	add	sp, sp, #32
   1ea20:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea24:	mov	r0, r5
   1ea28:	bl	1c200 <__assert_fail@plt+0xa48c>
   1ea2c:	mov	r5, #0
   1ea30:	b	1ea04 <__assert_fail@plt+0xcc90>
   1ea34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ea38:	strd	r6, [sp, #8]
   1ea3c:	strd	r8, [sp, #16]
   1ea40:	strd	sl, [sp, #24]
   1ea44:	str	lr, [sp, #32]
   1ea48:	sub	sp, sp, #20
   1ea4c:	mov	r4, r0
   1ea50:	mov	sl, r2
   1ea54:	add	r8, r0, r1
   1ea58:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1ea5c:	cmp	r0, #1
   1ea60:	bls	1ea80 <__assert_fail@plt+0xcd0c>
   1ea64:	cmp	r4, r8
   1ea68:	bcs	1ec34 <__assert_fail@plt+0xcec0>
   1ea6c:	mov	r5, #0
   1ea70:	mov	r6, #0
   1ea74:	mov	r7, #0
   1ea78:	and	r9, sl, #2
   1ea7c:	b	1ead0 <__assert_fail@plt+0xcd5c>
   1ea80:	cmp	r4, r8
   1ea84:	movcs	r5, #0
   1ea88:	bcs	1eb98 <__assert_fail@plt+0xce24>
   1ea8c:	bl	11b58 <__ctype_b_loc@plt>
   1ea90:	ldr	r2, [r0]
   1ea94:	mov	r5, #0
   1ea98:	and	sl, sl, #2
   1ea9c:	b	1ebf4 <__assert_fail@plt+0xce80>
   1eaa0:	cmp	r3, #65	; 0x41
   1eaa4:	bcc	1eaf4 <__assert_fail@plt+0xcd80>
   1eaa8:	cmp	r3, #95	; 0x5f
   1eaac:	bls	1eac0 <__assert_fail@plt+0xcd4c>
   1eab0:	sub	r3, r3, #97	; 0x61
   1eab4:	uxtb	r3, r3
   1eab8:	cmp	r3, #29
   1eabc:	bhi	1eaf4 <__assert_fail@plt+0xcd80>
   1eac0:	add	r4, r4, #1
   1eac4:	add	r5, r5, #1
   1eac8:	cmp	r4, r8
   1eacc:	bcs	1eb98 <__assert_fail@plt+0xce24>
   1ead0:	ldrb	r3, [r4]
   1ead4:	cmp	r3, #63	; 0x3f
   1ead8:	bhi	1eaa0 <__assert_fail@plt+0xcd2c>
   1eadc:	cmp	r3, #37	; 0x25
   1eae0:	bcs	1eac0 <__assert_fail@plt+0xcd4c>
   1eae4:	sub	r3, r3, #32
   1eae8:	uxtb	r3, r3
   1eaec:	cmp	r3, #3
   1eaf0:	bls	1eac0 <__assert_fail@plt+0xcd4c>
   1eaf4:	strd	r6, [sp, #8]
   1eaf8:	b	1eb3c <__assert_fail@plt+0xcdc8>
   1eafc:	tst	sl, #1
   1eb00:	bne	1ebe0 <__assert_fail@plt+0xce6c>
   1eb04:	add	r4, r4, #1
   1eb08:	add	r5, r5, #1
   1eb0c:	b	1eac8 <__assert_fail@plt+0xcd54>
   1eb10:	tst	sl, #1
   1eb14:	bne	1ebe0 <__assert_fail@plt+0xce6c>
   1eb18:	add	r5, r5, #1
   1eb1c:	mov	r4, r8
   1eb20:	b	1eac8 <__assert_fail@plt+0xcd54>
   1eb24:	add	r5, r5, r0
   1eb28:	add	r4, r4, fp
   1eb2c:	add	r0, sp, #8
   1eb30:	bl	11948 <mbsinit@plt>
   1eb34:	cmp	r0, #0
   1eb38:	bne	1eac8 <__assert_fail@plt+0xcd54>
   1eb3c:	add	r3, sp, #8
   1eb40:	sub	r2, r8, r4
   1eb44:	mov	r1, r4
   1eb48:	add	r0, sp, #4
   1eb4c:	bl	1e584 <__assert_fail@plt+0xc810>
   1eb50:	mov	fp, r0
   1eb54:	cmn	r0, #1
   1eb58:	beq	1eafc <__assert_fail@plt+0xcd88>
   1eb5c:	cmn	r0, #2
   1eb60:	beq	1eb10 <__assert_fail@plt+0xcd9c>
   1eb64:	cmp	r0, #0
   1eb68:	movne	fp, r0
   1eb6c:	moveq	fp, #1
   1eb70:	ldr	r0, [sp, #4]
   1eb74:	bl	118d0 <wcwidth@plt>
   1eb78:	cmp	r0, #0
   1eb7c:	blt	1ebb8 <__assert_fail@plt+0xce44>
   1eb80:	movw	r3, #65535	; 0xffff
   1eb84:	movt	r3, #32767	; 0x7fff
   1eb88:	sub	r3, r3, r5
   1eb8c:	cmp	r3, r0
   1eb90:	bge	1eb24 <__assert_fail@plt+0xcdb0>
   1eb94:	mvn	r5, #-2147483648	; 0x80000000
   1eb98:	mov	r0, r5
   1eb9c:	add	sp, sp, #20
   1eba0:	ldrd	r4, [sp]
   1eba4:	ldrd	r6, [sp, #8]
   1eba8:	ldrd	r8, [sp, #16]
   1ebac:	ldrd	sl, [sp, #24]
   1ebb0:	add	sp, sp, #32
   1ebb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebb8:	cmp	r9, #0
   1ebbc:	bne	1ebe0 <__assert_fail@plt+0xce6c>
   1ebc0:	ldr	r0, [sp, #4]
   1ebc4:	bl	119cc <iswcntrl@plt>
   1ebc8:	cmp	r0, #0
   1ebcc:	bne	1eb28 <__assert_fail@plt+0xcdb4>
   1ebd0:	cmn	r5, #-2147483647	; 0x80000001
   1ebd4:	beq	1eb94 <__assert_fail@plt+0xce20>
   1ebd8:	add	r5, r5, #1
   1ebdc:	b	1eb28 <__assert_fail@plt+0xcdb4>
   1ebe0:	mvn	r5, #0
   1ebe4:	b	1eb98 <__assert_fail@plt+0xce24>
   1ebe8:	add	r5, r5, #1
   1ebec:	cmp	r8, r4
   1ebf0:	beq	1eb98 <__assert_fail@plt+0xce24>
   1ebf4:	ldrb	r3, [r4], #1
   1ebf8:	lsl	r3, r3, #1
   1ebfc:	ldrh	r3, [r2, r3]
   1ec00:	tst	r3, #16384	; 0x4000
   1ec04:	beq	1ec14 <__assert_fail@plt+0xcea0>
   1ec08:	cmn	r5, #-2147483647	; 0x80000001
   1ec0c:	bne	1ebe8 <__assert_fail@plt+0xce74>
   1ec10:	b	1eb98 <__assert_fail@plt+0xce24>
   1ec14:	cmp	sl, #0
   1ec18:	bne	1ec3c <__assert_fail@plt+0xcec8>
   1ec1c:	tst	r3, #2
   1ec20:	bne	1ebec <__assert_fail@plt+0xce78>
   1ec24:	cmn	r5, #-2147483647	; 0x80000001
   1ec28:	beq	1eb98 <__assert_fail@plt+0xce24>
   1ec2c:	add	r5, r5, #1
   1ec30:	b	1ebec <__assert_fail@plt+0xce78>
   1ec34:	mov	r5, #0
   1ec38:	b	1eb98 <__assert_fail@plt+0xce24>
   1ec3c:	mvn	r5, #0
   1ec40:	b	1eb98 <__assert_fail@plt+0xce24>
   1ec44:	strd	r4, [sp, #-16]!
   1ec48:	str	r6, [sp, #8]
   1ec4c:	str	lr, [sp, #12]
   1ec50:	mov	r4, r0
   1ec54:	mov	r5, r1
   1ec58:	bl	11b94 <strlen@plt>
   1ec5c:	mov	r2, r5
   1ec60:	mov	r1, r0
   1ec64:	mov	r0, r4
   1ec68:	bl	1ea34 <__assert_fail@plt+0xccc0>
   1ec6c:	ldrd	r4, [sp]
   1ec70:	ldr	r6, [sp, #8]
   1ec74:	add	sp, sp, #12
   1ec78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ec80:	strd	r6, [sp, #8]
   1ec84:	strd	r8, [sp, #16]
   1ec88:	strd	sl, [sp, #24]
   1ec8c:	str	lr, [sp, #32]
   1ec90:	sub	sp, sp, #20
   1ec94:	mov	r5, r0
   1ec98:	str	r2, [sp]
   1ec9c:	mov	sl, r3
   1eca0:	cmp	r1, #2
   1eca4:	bhi	1ecec <__assert_fail@plt+0xcf78>
   1eca8:	beq	1ecc8 <__assert_fail@plt+0xcf54>
   1ecac:	add	sp, sp, #20
   1ecb0:	ldrd	r4, [sp]
   1ecb4:	ldrd	r6, [sp, #8]
   1ecb8:	ldrd	r8, [sp, #16]
   1ecbc:	ldrd	sl, [sp, #24]
   1ecc0:	add	sp, sp, #32
   1ecc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ecc8:	ldr	r4, [r0]
   1eccc:	ldr	r6, [r0, #4]
   1ecd0:	mov	r1, r6
   1ecd4:	mov	r0, r4
   1ecd8:	blx	r3
   1ecdc:	cmp	r0, #0
   1ece0:	strgt	r6, [r5]
   1ece4:	strgt	r4, [r5, #4]
   1ece8:	b	1ecac <__assert_fail@plt+0xcf38>
   1ecec:	mov	fp, r1
   1ecf0:	lsr	r3, r1, #1
   1ecf4:	mov	r0, r3
   1ecf8:	str	r3, [sp, #4]
   1ecfc:	mov	r3, sl
   1ed00:	ldr	r4, [sp]
   1ed04:	mov	r2, r4
   1ed08:	sub	r1, fp, r0
   1ed0c:	add	r0, r5, r0, lsl #2
   1ed10:	bl	1ec7c <__assert_fail@plt+0xcf08>
   1ed14:	cmp	fp, #3
   1ed18:	bhi	1ed4c <__assert_fail@plt+0xcfd8>
   1ed1c:	ldr	r3, [r5]
   1ed20:	str	r3, [r4]
   1ed24:	ldr	r3, [sp]
   1ed28:	ldr	r8, [r3]
   1ed2c:	ldr	r6, [sp, #4]
   1ed30:	ldr	r7, [r5, r6, lsl #2]
   1ed34:	mov	r4, #0
   1ed38:	mov	r9, r4
   1ed3c:	mov	r3, r8
   1ed40:	mov	r8, r7
   1ed44:	mov	r7, r3
   1ed48:	b	1ee48 <__assert_fail@plt+0xd0d4>
   1ed4c:	lsr	r6, fp, #2
   1ed50:	str	r6, [sp, #8]
   1ed54:	bic	r4, fp, #3
   1ed58:	mov	r3, sl
   1ed5c:	ldr	r7, [sp]
   1ed60:	mov	r2, r7
   1ed64:	ldr	r1, [sp, #4]
   1ed68:	sub	r1, r1, r6
   1ed6c:	add	r0, r5, r4
   1ed70:	bl	1ec7c <__assert_fail@plt+0xcf08>
   1ed74:	mov	r3, sl
   1ed78:	mov	r2, r7
   1ed7c:	mov	r1, r6
   1ed80:	mov	r0, r5
   1ed84:	bl	1ec7c <__assert_fail@plt+0xcf08>
   1ed88:	ldr	r9, [r5]
   1ed8c:	ldr	r8, [r5, r4]
   1ed90:	add	r4, r7, #4
   1ed94:	mov	r7, #0
   1ed98:	str	fp, [sp, #12]
   1ed9c:	mov	fp, r9
   1eda0:	ldr	r9, [sp, #4]
   1eda4:	b	1edc8 <__assert_fail@plt+0xd054>
   1eda8:	mov	r0, r4
   1edac:	str	fp, [r4, #-4]
   1edb0:	add	r7, r7, #1
   1edb4:	ldr	r3, [sp, #8]
   1edb8:	cmp	r3, r7
   1edbc:	beq	1edf8 <__assert_fail@plt+0xd084>
   1edc0:	ldr	fp, [r5, r7, lsl #2]
   1edc4:	add	r4, r4, #4
   1edc8:	mov	r1, r8
   1edcc:	mov	r0, fp
   1edd0:	blx	sl
   1edd4:	cmp	r0, #0
   1edd8:	ble	1eda8 <__assert_fail@plt+0xd034>
   1eddc:	mov	r0, r4
   1ede0:	str	r8, [r4, #-4]
   1ede4:	add	r6, r6, #1
   1ede8:	cmp	r9, r6
   1edec:	beq	1ee0c <__assert_fail@plt+0xd098>
   1edf0:	ldr	r8, [r5, r6, lsl #2]
   1edf4:	b	1edc4 <__assert_fail@plt+0xd050>
   1edf8:	ldr	fp, [sp, #12]
   1edfc:	ldr	r3, [sp, #4]
   1ee00:	str	r3, [sp, #8]
   1ee04:	mov	r7, r6
   1ee08:	b	1ee10 <__assert_fail@plt+0xd09c>
   1ee0c:	ldr	fp, [sp, #12]
   1ee10:	ldr	r3, [sp, #8]
   1ee14:	sub	r2, r3, r7
   1ee18:	lsl	r2, r2, #2
   1ee1c:	add	r1, r5, r7, lsl #2
   1ee20:	bl	11930 <memcpy@plt>
   1ee24:	b	1ed24 <__assert_fail@plt+0xcfb0>
   1ee28:	str	r7, [r5, r4, lsl #2]
   1ee2c:	add	r9, r9, #1
   1ee30:	ldr	r3, [sp, #4]
   1ee34:	cmp	r3, r9
   1ee38:	beq	1ecac <__assert_fail@plt+0xcf38>
   1ee3c:	ldr	r3, [sp]
   1ee40:	ldr	r7, [r3, r9, lsl #2]
   1ee44:	add	r4, r4, #1
   1ee48:	mov	r1, r8
   1ee4c:	mov	r0, r7
   1ee50:	blx	sl
   1ee54:	cmp	r0, #0
   1ee58:	ble	1ee28 <__assert_fail@plt+0xd0b4>
   1ee5c:	add	r0, r4, #1
   1ee60:	str	r8, [r5, r4, lsl #2]
   1ee64:	add	r6, r6, #1
   1ee68:	cmp	fp, r6
   1ee6c:	beq	1ee78 <__assert_fail@plt+0xd104>
   1ee70:	ldr	r8, [r5, r6, lsl #2]
   1ee74:	b	1ee44 <__assert_fail@plt+0xd0d0>
   1ee78:	ldr	r3, [sp, #4]
   1ee7c:	sub	r2, r3, r9
   1ee80:	lsl	r2, r2, #2
   1ee84:	ldr	r3, [sp]
   1ee88:	add	r1, r3, r9, lsl #2
   1ee8c:	add	r0, r5, r0, lsl #2
   1ee90:	bl	11930 <memcpy@plt>
   1ee94:	b	1ecac <__assert_fail@plt+0xcf38>
   1ee98:	str	r4, [sp, #-8]!
   1ee9c:	str	lr, [sp, #4]
   1eea0:	mov	r3, r2
   1eea4:	add	r2, r0, r1, lsl #2
   1eea8:	bl	1ec7c <__assert_fail@plt+0xcf08>
   1eeac:	ldr	r4, [sp]
   1eeb0:	add	sp, sp, #4
   1eeb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eeb8:	strd	r4, [sp, #-16]!
   1eebc:	str	r6, [sp, #8]
   1eec0:	str	lr, [sp, #12]
   1eec4:	mov	r5, r0
   1eec8:	subs	r4, r2, #0
   1eecc:	beq	1eefc <__assert_fail@plt+0xd188>
   1eed0:	mov	r6, r1
   1eed4:	bl	11b1c <__ctype_tolower_loc@plt>
   1eed8:	add	r3, r6, r4
   1eedc:	add	r2, r5, r4
   1eee0:	mov	r1, r6
   1eee4:	ldrb	lr, [r3, #-1]!
   1eee8:	ldr	ip, [r0]
   1eeec:	ldr	ip, [ip, lr, lsl #2]
   1eef0:	strb	ip, [r2, #-1]!
   1eef4:	cmp	r3, r1
   1eef8:	bne	1eee4 <__assert_fail@plt+0xd170>
   1eefc:	mov	r0, r5
   1ef00:	ldrd	r4, [sp]
   1ef04:	ldr	r6, [sp, #8]
   1ef08:	add	sp, sp, #12
   1ef0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef10:	strd	r4, [sp, #-16]!
   1ef14:	str	r6, [sp, #8]
   1ef18:	str	lr, [sp, #12]
   1ef1c:	mov	r5, r0
   1ef20:	subs	r4, r2, #0
   1ef24:	beq	1ef54 <__assert_fail@plt+0xd1e0>
   1ef28:	mov	r6, r1
   1ef2c:	bl	11b28 <__ctype_toupper_loc@plt>
   1ef30:	add	r3, r6, r4
   1ef34:	add	r2, r5, r4
   1ef38:	mov	r1, r6
   1ef3c:	ldrb	lr, [r3, #-1]!
   1ef40:	ldr	ip, [r0]
   1ef44:	ldr	ip, [ip, lr, lsl #2]
   1ef48:	strb	ip, [r2, #-1]!
   1ef4c:	cmp	r3, r1
   1ef50:	bne	1ef3c <__assert_fail@plt+0xd1c8>
   1ef54:	mov	r0, r5
   1ef58:	ldrd	r4, [sp]
   1ef5c:	ldr	r6, [sp, #8]
   1ef60:	add	sp, sp, #12
   1ef64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ef6c:	strd	r6, [sp, #8]
   1ef70:	strd	r8, [sp, #16]
   1ef74:	strd	sl, [sp, #24]
   1ef78:	str	lr, [sp, #32]
   1ef7c:	sub	sp, sp, #1120	; 0x460
   1ef80:	sub	sp, sp, #12
   1ef84:	str	r0, [sp, #28]
   1ef88:	str	r1, [sp, #24]
   1ef8c:	mov	r7, r2
   1ef90:	mov	r4, r3
   1ef94:	str	r3, [sp, #40]	; 0x28
   1ef98:	ldrb	r3, [sp, #1168]	; 0x490
   1ef9c:	str	r3, [sp, #36]	; 0x24
   1efa0:	ldr	r9, [sp, #1176]	; 0x498
   1efa4:	bl	11bb8 <__errno_location@plt>
   1efa8:	str	r0, [sp, #32]
   1efac:	ldr	r3, [r0]
   1efb0:	str	r3, [sp, #44]	; 0x2c
   1efb4:	ldr	r5, [r4, #8]
   1efb8:	ldr	r2, [r4, #40]	; 0x28
   1efbc:	movw	r3, #39300	; 0x9984
   1efc0:	movt	r3, #2
   1efc4:	cmp	r2, #0
   1efc8:	moveq	r2, r3
   1efcc:	str	r2, [sp, #48]	; 0x30
   1efd0:	cmp	r5, #12
   1efd4:	subgt	r5, r5, #12
   1efd8:	bgt	1efe4 <__assert_fail@plt+0xd270>
   1efdc:	cmp	r5, #0
   1efe0:	moveq	r5, #12
   1efe4:	ldrb	r3, [r7]
   1efe8:	cmp	r3, #0
   1efec:	beq	20730 <__assert_fail@plt+0xe9bc>
   1eff0:	mov	fp, #0
   1eff4:	movw	r2, #46021	; 0xb3c5
   1eff8:	movt	r2, #37282	; 0x91a2
   1effc:	str	r2, [sp, #68]	; 0x44
   1f000:	movw	r2, #34953	; 0x8889
   1f004:	movt	r2, #34952	; 0x8888
   1f008:	str	r2, [sp, #72]	; 0x48
   1f00c:	movw	sl, #34079	; 0x851f
   1f010:	movt	sl, #20971	; 0x51eb
   1f014:	movw	r8, #9363	; 0x2493
   1f018:	movt	r8, #37449	; 0x9249
   1f01c:	movw	r6, #26215	; 0x6667
   1f020:	movt	r6, #26214	; 0x6666
   1f024:	str	r5, [sp, #64]	; 0x40
   1f028:	str	sl, [sp, #56]	; 0x38
   1f02c:	str	r8, [sp, #52]	; 0x34
   1f030:	str	r6, [sp, #60]	; 0x3c
   1f034:	ldr	r6, [sp, #28]
   1f038:	b	1f070 <__assert_fail@plt+0xd2fc>
   1f03c:	cmp	r6, #0
   1f040:	beq	1f054 <__assert_fail@plt+0xd2e0>
   1f044:	cmp	r9, #1
   1f048:	bhi	1f0cc <__assert_fail@plt+0xd358>
   1f04c:	ldrb	r3, [r7]
   1f050:	strb	r3, [r6], #1
   1f054:	add	fp, fp, r4
   1f058:	mov	r4, r7
   1f05c:	add	r7, r4, #1
   1f060:	ldrb	r3, [r4, #1]
   1f064:	mvn	r9, #0
   1f068:	cmp	r3, #0
   1f06c:	beq	20704 <__assert_fail@plt+0xe990>
   1f070:	cmp	r3, #37	; 0x25
   1f074:	beq	1f1fc <__assert_fail@plt+0xd488>
   1f078:	bic	r9, r9, r9, asr #31
   1f07c:	cmp	r9, #1
   1f080:	movcs	r4, r9
   1f084:	movcc	r4, #1
   1f088:	ldr	r3, [sp, #24]
   1f08c:	sub	r3, r3, fp
   1f090:	cmp	r3, r4
   1f094:	bhi	1f03c <__assert_fail@plt+0xd2c8>
   1f098:	mov	r3, #34	; 0x22
   1f09c:	ldr	r2, [sp, #32]
   1f0a0:	str	r3, [r2]
   1f0a4:	mov	fp, #0
   1f0a8:	mov	r0, fp
   1f0ac:	add	sp, sp, #1120	; 0x460
   1f0b0:	add	sp, sp, #12
   1f0b4:	ldrd	r4, [sp]
   1f0b8:	ldrd	r6, [sp, #8]
   1f0bc:	ldrd	r8, [sp, #16]
   1f0c0:	ldrd	sl, [sp, #24]
   1f0c4:	add	sp, sp, #32
   1f0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0cc:	sub	r9, r9, #1
   1f0d0:	mov	r2, r9
   1f0d4:	mov	r1, #32
   1f0d8:	mov	r0, r6
   1f0dc:	bl	11be8 <memset@plt>
   1f0e0:	add	r6, r6, r9
   1f0e4:	b	1f04c <__assert_fail@plt+0xd2d8>
   1f0e8:	str	r2, [sp, #28]
   1f0ec:	b	1f0f4 <__assert_fail@plt+0xd380>
   1f0f0:	mov	r5, r1
   1f0f4:	ldrb	r2, [r4, #1]!
   1f0f8:	sub	r3, r2, #35	; 0x23
   1f0fc:	cmp	r3, #60	; 0x3c
   1f100:	ldrls	pc, [pc, r3, lsl #2]
   1f104:	b	1f224 <__assert_fail@plt+0xd4b0>
   1f108:	strdeq	pc, [r1], -r0
   1f10c:	andeq	pc, r1, r4, lsr #4
   1f110:	andeq	pc, r1, r4, lsr #4
   1f114:	andeq	pc, r1, r4, lsr #4
   1f118:	andeq	pc, r1, r4, lsr #4
   1f11c:	andeq	pc, r1, r4, lsr #4
   1f120:	andeq	pc, r1, r4, lsr #4
   1f124:	andeq	pc, r1, r4, lsr #4
   1f128:	andeq	pc, r1, r8, ror #1
   1f12c:	andeq	pc, r1, r4, lsr #4
   1f130:	andeq	pc, r1, r8, ror #1
   1f134:	andeq	pc, r1, r4, lsr #4
   1f138:	andeq	pc, r1, r4, lsr #4
   1f13c:	andeq	pc, r1, r8, ror #1
   1f140:	andeq	pc, r1, r4, lsr #4
   1f144:	andeq	pc, r1, r4, lsr #4
   1f148:	andeq	pc, r1, r4, lsr #4
   1f14c:	andeq	pc, r1, r4, lsr #4
   1f150:	andeq	pc, r1, r4, lsr #4
   1f154:	andeq	pc, r1, r4, lsr #4
   1f158:	andeq	pc, r1, r4, lsr #4
   1f15c:	andeq	pc, r1, r4, lsr #4
   1f160:	andeq	pc, r1, r4, lsr #4
   1f164:	andeq	pc, r1, r4, lsr #4
   1f168:	andeq	pc, r1, r4, lsr #4
   1f16c:	andeq	pc, r1, r4, lsr #4
   1f170:	andeq	pc, r1, r4, lsr #4
   1f174:	andeq	pc, r1, r4, lsr #4
   1f178:	andeq	pc, r1, r4, lsr #4
   1f17c:	andeq	pc, r1, r4, lsr #4
   1f180:	andeq	pc, r1, r4, lsr #4
   1f184:	andeq	pc, r1, r4, lsr #4
   1f188:	andeq	pc, r1, r4, lsr #4
   1f18c:	andeq	pc, r1, r4, lsr #4
   1f190:	andeq	pc, r1, r4, lsr #4
   1f194:	andeq	pc, r1, r4, lsr #4
   1f198:	andeq	pc, r1, r4, lsr #4
   1f19c:	andeq	pc, r1, r4, lsr #4
   1f1a0:	andeq	pc, r1, r4, lsr #4
   1f1a4:	andeq	pc, r1, r4, lsr #4
   1f1a8:	andeq	pc, r1, r4, lsr #4
   1f1ac:	andeq	pc, r1, r4, lsr #4
   1f1b0:	andeq	pc, r1, r4, lsr #4
   1f1b4:	andeq	pc, r1, r4, lsr #4
   1f1b8:	andeq	pc, r1, r4, lsr #4
   1f1bc:	andeq	pc, r1, r4, lsr #4
   1f1c0:	andeq	pc, r1, r4, lsr #4
   1f1c4:	andeq	pc, r1, r4, lsr #4
   1f1c8:	andeq	pc, r1, r4, lsr #4
   1f1cc:	andeq	pc, r1, r4, lsr #4
   1f1d0:	andeq	pc, r1, r4, lsr #4
   1f1d4:	andeq	pc, r1, r4, lsr #4
   1f1d8:	andeq	pc, r1, r4, lsr #4
   1f1dc:	andeq	pc, r1, r4, lsr #4
   1f1e0:	andeq	pc, r1, r4, lsr #4
   1f1e4:	andeq	pc, r1, r4, lsr #4
   1f1e8:	andeq	pc, r1, r4, lsr #4
   1f1ec:	andeq	pc, r1, r4, lsr #4
   1f1f0:	andeq	pc, r1, r4, lsr #4
   1f1f4:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   1f1f8:	andeq	pc, r1, r8, ror #1
   1f1fc:	ldr	r3, [sp, #36]	; 0x24
   1f200:	str	r3, [sp, #76]	; 0x4c
   1f204:	mov	r4, r7
   1f208:	mov	r5, #0
   1f20c:	str	r5, [sp, #28]
   1f210:	mov	r1, #1
   1f214:	b	1f0f4 <__assert_fail@plt+0xd380>
   1f218:	mov	r3, #1
   1f21c:	str	r3, [sp, #76]	; 0x4c
   1f220:	b	1f0f4 <__assert_fail@plt+0xd380>
   1f224:	sub	r2, r2, #48	; 0x30
   1f228:	cmp	r2, #9
   1f22c:	bls	1f448 <__assert_fail@plt+0xd6d4>
   1f230:	ldrb	sl, [r4]
   1f234:	cmp	sl, #69	; 0x45
   1f238:	beq	1f4a0 <__assert_fail@plt+0xd72c>
   1f23c:	cmp	sl, #79	; 0x4f
   1f240:	movne	sl, #0
   1f244:	beq	1f4a0 <__assert_fail@plt+0xd72c>
   1f248:	ldrb	r3, [r4]
   1f24c:	mov	r1, r3
   1f250:	cmp	r3, #122	; 0x7a
   1f254:	ldrls	pc, [pc, r3, lsl #2]
   1f258:	b	1f4ec <__assert_fail@plt+0xd778>
   1f25c:	andeq	pc, r1, r8, ror #9
   1f260:	andeq	pc, r1, ip, ror #9
   1f264:	andeq	pc, r1, ip, ror #9
   1f268:	andeq	pc, r1, ip, ror #9
   1f26c:	andeq	pc, r1, ip, ror #9
   1f270:	andeq	pc, r1, ip, ror #9
   1f274:	andeq	pc, r1, ip, ror #9
   1f278:	andeq	pc, r1, ip, ror #9
   1f27c:	andeq	pc, r1, ip, ror #9
   1f280:	andeq	pc, r1, ip, ror #9
   1f284:	andeq	pc, r1, ip, ror #9
   1f288:	andeq	pc, r1, ip, ror #9
   1f28c:	andeq	pc, r1, ip, ror #9
   1f290:	andeq	pc, r1, ip, ror #9
   1f294:	andeq	pc, r1, ip, ror #9
   1f298:	andeq	pc, r1, ip, ror #9
   1f29c:	andeq	pc, r1, ip, ror #9
   1f2a0:	andeq	pc, r1, ip, ror #9
   1f2a4:	andeq	pc, r1, ip, ror #9
   1f2a8:	andeq	pc, r1, ip, ror #9
   1f2ac:	andeq	pc, r1, ip, ror #9
   1f2b0:	andeq	pc, r1, ip, ror #9
   1f2b4:	andeq	pc, r1, ip, ror #9
   1f2b8:	andeq	pc, r1, ip, ror #9
   1f2bc:	andeq	pc, r1, ip, ror #9
   1f2c0:	andeq	pc, r1, ip, ror #9
   1f2c4:	andeq	pc, r1, ip, ror #9
   1f2c8:	andeq	pc, r1, ip, ror #9
   1f2cc:	andeq	pc, r1, ip, ror #9
   1f2d0:	andeq	pc, r1, ip, ror #9
   1f2d4:	andeq	pc, r1, ip, ror #9
   1f2d8:	andeq	pc, r1, ip, ror #9
   1f2dc:	andeq	pc, r1, ip, ror #9
   1f2e0:	andeq	pc, r1, ip, ror #9
   1f2e4:	andeq	pc, r1, ip, ror #9
   1f2e8:	andeq	pc, r1, ip, ror #9
   1f2ec:	andeq	pc, r1, ip, ror #9
   1f2f0:	ldrdeq	pc, [r1], -ip
   1f2f4:	andeq	pc, r1, ip, ror #9
   1f2f8:	andeq	pc, r1, ip, ror #9
   1f2fc:	andeq	pc, r1, ip, ror #9
   1f300:	andeq	pc, r1, ip, ror #9
   1f304:	andeq	pc, r1, ip, ror #9
   1f308:	andeq	pc, r1, ip, ror #9
   1f30c:	andeq	pc, r1, ip, ror #9
   1f310:	andeq	pc, r1, ip, ror #9
   1f314:	andeq	pc, r1, ip, ror #9
   1f318:	andeq	pc, r1, ip, ror #9
   1f31c:	andeq	pc, r1, ip, ror #9
   1f320:	andeq	pc, r1, ip, ror #9
   1f324:	andeq	pc, r1, ip, ror #9
   1f328:	andeq	pc, r1, ip, ror #9
   1f32c:	andeq	pc, r1, ip, ror #9
   1f330:	andeq	pc, r1, ip, ror #9
   1f334:	andeq	pc, r1, ip, ror #9
   1f338:	andeq	pc, r1, ip, ror #9
   1f33c:	andeq	pc, r1, ip, ror #9
   1f340:	andeq	pc, r1, ip, ror #9
   1f344:			; <UNDEFINED> instruction: 0x0001f4b8
   1f348:	andeq	pc, r1, ip, ror #9
   1f34c:	andeq	pc, r1, ip, ror #9
   1f350:	andeq	pc, r1, ip, ror #9
   1f354:	andeq	pc, r1, ip, ror #9
   1f358:	andeq	pc, r1, ip, ror #9
   1f35c:	andeq	pc, r1, ip, ror #9
   1f360:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f364:	muleq	r1, r4, r6
   1f368:	andeq	pc, r1, r0, lsr r8	; <UNPREDICTABLE>
   1f36c:	ldrdeq	pc, [r1], -r0
   1f370:	andeq	pc, r1, ip, ror #9
   1f374:	andeq	pc, r1, ip, lsl #23
   1f378:	andeq	r0, r2, r0, lsr r1
   1f37c:	andeq	pc, r1, r0, asr #23
   1f380:	ldrdeq	pc, [r1], -ip
   1f384:	andeq	pc, r1, ip, ror #9
   1f388:	andeq	pc, r1, ip, ror #9
   1f38c:	andeq	pc, r1, ip, ror #9
   1f390:	andeq	pc, r1, ip, asr #24
   1f394:	muleq	r1, ip, ip
   1f398:	andeq	pc, r1, ip, ror #9
   1f39c:			; <UNDEFINED> instruction: 0x0001feb8
   1f3a0:	andeq	pc, r1, ip, ror #9
   1f3a4:	andeq	pc, r1, ip, asr #13
   1f3a8:	andeq	pc, r1, ip, lsr pc	; <UNPREDICTABLE>
   1f3ac:	andeq	pc, r1, r8, lsr #9
   1f3b0:	strdeq	r0, [r2], -r4
   1f3b4:	andeq	r0, r2, r0, lsr r1
   1f3b8:	andeq	r0, r2, r4, lsl #7
   1f3bc:	andeq	r0, r2, r8, lsl r0
   1f3c0:	strdeq	r0, [r2], -r8
   1f3c4:	muleq	r2, r0, r4
   1f3c8:	andeq	pc, r1, ip, ror #9
   1f3cc:	andeq	pc, r1, ip, ror #9
   1f3d0:	andeq	pc, r1, ip, ror #9
   1f3d4:	andeq	pc, r1, ip, ror #9
   1f3d8:	andeq	pc, r1, ip, ror #9
   1f3dc:	andeq	pc, r1, ip, ror #9
   1f3e0:	andeq	pc, r1, ip, lsl r6	; <UNPREDICTABLE>
   1f3e4:	andeq	pc, r1, r4, ror r6	; <UNPREDICTABLE>
   1f3e8:			; <UNDEFINED> instruction: 0x0001f6b8
   1f3ec:	andeq	pc, r1, r8, ror #17
   1f3f0:	andeq	pc, r1, r4, lsl #18
   1f3f4:	andeq	pc, r1, ip, ror #9
   1f3f8:	andeq	r0, r2, r0, lsr r1
   1f3fc:	andeq	pc, r1, r4, ror r6	; <UNPREDICTABLE>
   1f400:	andeq	pc, r1, ip, ror #9
   1f404:	andeq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
   1f408:	strdeq	pc, [r1], -r4
   1f40c:	andeq	pc, r1, r8, lsl #24
   1f410:	andeq	pc, r1, r8, ror #24
   1f414:	andeq	pc, r1, r8, lsr #28
   1f418:	andeq	pc, r1, ip, ror #9
   1f41c:	andeq	pc, r1, r0, asr #29
   1f420:	andeq	pc, r1, r0, lsl #30
   1f424:	strdeq	pc, [r1], -r0
   1f428:	andeq	pc, r1, r8, asr pc	; <UNPREDICTABLE>
   1f42c:	andeq	r0, r2, ip, lsr #32
   1f430:	strheq	r0, [r2], -ip
   1f434:	andeq	pc, r1, ip, ror #9
   1f438:	ldrdeq	r0, [r2], -ip
   1f43c:			; <UNDEFINED> instruction: 0x0001f8bc
   1f440:	andeq	r0, r2, r8, lsr r4
   1f444:	andeq	r0, r2, r4, lsr #11
   1f448:	mov	r9, #0
   1f44c:	mov	r1, #10
   1f450:	b	1f464 <__assert_fail@plt+0xd6f0>
   1f454:	ldrb	r3, [r4, #1]!
   1f458:	sub	r3, r3, #48	; 0x30
   1f45c:	cmp	r3, #9
   1f460:	bhi	1f230 <__assert_fail@plt+0xd4bc>
   1f464:	smull	r8, r9, r9, r1
   1f468:	asr	r0, r8, #31
   1f46c:	mov	r2, r8
   1f470:	cmp	r0, r9
   1f474:	mvnne	r9, #-2147483648	; 0x80000000
   1f478:	bne	1f454 <__assert_fail@plt+0xd6e0>
   1f47c:	ldrb	r9, [r4]
   1f480:	sub	r9, r9, #48	; 0x30
   1f484:	adds	r2, r2, r9
   1f488:	movvs	r3, #1
   1f48c:	movvc	r3, #0
   1f490:	cmp	r3, #0
   1f494:	moveq	r9, r2
   1f498:	mvnne	r9, #-2147483648	; 0x80000000
   1f49c:	b	1f454 <__assert_fail@plt+0xd6e0>
   1f4a0:	add	r4, r4, #1
   1f4a4:	b	1f248 <__assert_fail@plt+0xd4d4>
   1f4a8:	mvn	r7, #0
   1f4ac:	movw	sl, #39424	; 0x9a00
   1f4b0:	movt	sl, #2
   1f4b4:	b	1f6d8 <__assert_fail@plt+0xd964>
   1f4b8:	add	r2, r4, #1
   1f4bc:	ldrb	r3, [r4, #1]
   1f4c0:	cmp	r3, #58	; 0x3a
   1f4c4:	movne	lr, #1
   1f4c8:	beq	20584 <__assert_fail@plt+0xe810>
   1f4cc:	cmp	r3, #122	; 0x7a
   1f4d0:	moveq	r4, r2
   1f4d4:	bne	1f4ec <__assert_fail@plt+0xd778>
   1f4d8:	b	205a8 <__assert_fail@plt+0xe834>
   1f4dc:	sub	r3, r4, #1
   1f4e0:	cmp	r7, r3
   1f4e4:	beq	1f58c <__assert_fail@plt+0xd818>
   1f4e8:	sub	r4, r4, #1
   1f4ec:	sub	r5, r4, r7
   1f4f0:	add	r5, r5, #1
   1f4f4:	ldr	r3, [sp, #28]
   1f4f8:	subs	r3, r3, #45	; 0x2d
   1f4fc:	movne	r3, #1
   1f500:	cmp	r9, #0
   1f504:	movlt	r3, #0
   1f508:	cmp	r3, #0
   1f50c:	moveq	r9, #0
   1f510:	mov	r8, r9
   1f514:	cmp	r9, r5
   1f518:	movcc	r9, r5
   1f51c:	ldr	r3, [sp, #24]
   1f520:	sub	r3, r3, fp
   1f524:	cmp	r3, r9
   1f528:	bls	206e0 <__assert_fail@plt+0xe96c>
   1f52c:	cmp	r6, #0
   1f530:	beq	1f584 <__assert_fail@plt+0xd810>
   1f534:	cmp	r8, r5
   1f538:	bls	1f564 <__assert_fail@plt+0xd7f0>
   1f53c:	sub	r8, r8, r5
   1f540:	ldr	r3, [sp, #28]
   1f544:	cmp	r3, #43	; 0x2b
   1f548:	cmpne	r3, #48	; 0x30
   1f54c:	mov	r2, r8
   1f550:	moveq	r1, #48	; 0x30
   1f554:	movne	r1, #32
   1f558:	mov	r0, r6
   1f55c:	bl	11be8 <memset@plt>
   1f560:	add	r6, r6, r8
   1f564:	ldr	r3, [sp, #76]	; 0x4c
   1f568:	cmp	r3, #0
   1f56c:	beq	206f0 <__assert_fail@plt+0xe97c>
   1f570:	mov	r2, r5
   1f574:	mov	r1, r7
   1f578:	mov	r0, r6
   1f57c:	bl	1ef10 <__assert_fail@plt+0xd19c>
   1f580:	add	r6, r6, r5
   1f584:	add	fp, fp, r9
   1f588:	b	1f05c <__assert_fail@plt+0xd2e8>
   1f58c:	ldr	r2, [sp, #28]
   1f590:	mvn	r3, r9
   1f594:	lsr	r3, r3, #31
   1f598:	cmp	r2, #45	; 0x2d
   1f59c:	moveq	r3, #0
   1f5a0:	cmp	r3, #0
   1f5a4:	moveq	r9, #0
   1f5a8:	mov	r5, r9
   1f5ac:	cmp	r9, #1
   1f5b0:	movcc	r9, #1
   1f5b4:	ldr	r3, [sp, #24]
   1f5b8:	sub	r3, r3, fp
   1f5bc:	cmp	r3, r9
   1f5c0:	bls	1f60c <__assert_fail@plt+0xd898>
   1f5c4:	cmp	r6, #0
   1f5c8:	beq	1f604 <__assert_fail@plt+0xd890>
   1f5cc:	cmp	r5, #1
   1f5d0:	bls	1f5fc <__assert_fail@plt+0xd888>
   1f5d4:	sub	r5, r5, #1
   1f5d8:	ldr	r3, [sp, #28]
   1f5dc:	cmp	r3, #43	; 0x2b
   1f5e0:	cmpne	r3, #48	; 0x30
   1f5e4:	mov	r2, r5
   1f5e8:	moveq	r1, #48	; 0x30
   1f5ec:	movne	r1, #32
   1f5f0:	mov	r0, r6
   1f5f4:	bl	11be8 <memset@plt>
   1f5f8:	add	r6, r6, r5
   1f5fc:	ldrb	r3, [r4]
   1f600:	strb	r3, [r6], #1
   1f604:	add	fp, fp, r9
   1f608:	b	1f05c <__assert_fail@plt+0xd2e8>
   1f60c:	mov	r3, #34	; 0x22
   1f610:	ldr	r2, [sp, #32]
   1f614:	str	r3, [r2]
   1f618:	b	1f0a4 <__assert_fail@plt+0xd330>
   1f61c:	cmp	sl, #0
   1f620:	bne	1f4ec <__assert_fail@plt+0xd778>
   1f624:	ldr	r3, [sp, #76]	; 0x4c
   1f628:	cmp	r5, #0
   1f62c:	movne	r3, r5
   1f630:	str	r3, [sp, #76]	; 0x4c
   1f634:	mov	r1, #97	; 0x61
   1f638:	mov	r3, #32
   1f63c:	strb	r3, [sp, #88]	; 0x58
   1f640:	mov	r3, #37	; 0x25
   1f644:	strb	r3, [sp, #89]	; 0x59
   1f648:	mov	r8, #0
   1f64c:	add	r3, sp, #90	; 0x5a
   1f650:	b	1f96c <__assert_fail@plt+0xdbf8>
   1f654:	cmp	sl, #0
   1f658:	bne	1f4ec <__assert_fail@plt+0xd778>
   1f65c:	ldr	r3, [sp, #76]	; 0x4c
   1f660:	cmp	r5, #0
   1f664:	movne	r3, r5
   1f668:	str	r3, [sp, #76]	; 0x4c
   1f66c:	mov	r1, #65	; 0x41
   1f670:	b	1f638 <__assert_fail@plt+0xd8c4>
   1f674:	ldr	r3, [sp, #76]	; 0x4c
   1f678:	cmp	r5, #0
   1f67c:	movne	r3, r5
   1f680:	str	r3, [sp, #76]	; 0x4c
   1f684:	cmp	sl, #69	; 0x45
   1f688:	movne	r8, #0
   1f68c:	bne	1fee0 <__assert_fail@plt+0xe16c>
   1f690:	b	1f4ec <__assert_fail@plt+0xd778>
   1f694:	cmp	sl, #69	; 0x45
   1f698:	beq	1f4ec <__assert_fail@plt+0xd778>
   1f69c:	ldr	r3, [sp, #76]	; 0x4c
   1f6a0:	cmp	r5, #0
   1f6a4:	movne	r3, r5
   1f6a8:	str	r3, [sp, #76]	; 0x4c
   1f6ac:	mov	r1, #66	; 0x42
   1f6b0:	mov	r8, #0
   1f6b4:	b	1fee0 <__assert_fail@plt+0xe16c>
   1f6b8:	cmp	sl, #79	; 0x4f
   1f6bc:	beq	1f4ec <__assert_fail@plt+0xd778>
   1f6c0:	mov	r1, #99	; 0x63
   1f6c4:	mov	r8, #0
   1f6c8:	b	1fee0 <__assert_fail@plt+0xe16c>
   1f6cc:	mvn	r7, #0
   1f6d0:	movw	sl, #39448	; 0x9a18
   1f6d4:	movt	sl, #2
   1f6d8:	ldr	r3, [sp, #1188]	; 0x4a4
   1f6dc:	str	r3, [sp, #20]
   1f6e0:	ldr	r3, [sp, #1184]	; 0x4a0
   1f6e4:	str	r3, [sp, #16]
   1f6e8:	ldr	r3, [sp, #1180]	; 0x49c
   1f6ec:	str	r3, [sp, #12]
   1f6f0:	str	r7, [sp, #8]
   1f6f4:	ldr	r8, [sp, #28]
   1f6f8:	str	r8, [sp, #4]
   1f6fc:	ldr	r3, [sp, #76]	; 0x4c
   1f700:	str	r3, [sp]
   1f704:	ldr	r3, [sp, #40]	; 0x28
   1f708:	mov	r2, sl
   1f70c:	mvn	r1, #0
   1f710:	mov	r0, #0
   1f714:	bl	1ef68 <__assert_fail@plt+0xd1f4>
   1f718:	mov	r5, r0
   1f71c:	mvn	r3, r9
   1f720:	lsr	r3, r3, #31
   1f724:	cmp	r8, #45	; 0x2d
   1f728:	moveq	r3, #0
   1f72c:	cmp	r3, #0
   1f730:	moveq	r9, #0
   1f734:	mov	r3, r9
   1f738:	cmp	r9, r5
   1f73c:	movcc	r9, r5
   1f740:	ldr	r2, [sp, #24]
   1f744:	sub	r8, r2, fp
   1f748:	cmp	r8, r9
   1f74c:	bls	1f7e0 <__assert_fail@plt+0xda6c>
   1f750:	cmp	r6, #0
   1f754:	beq	1f7d8 <__assert_fail@plt+0xda64>
   1f758:	cmp	r3, r5
   1f75c:	bls	1f794 <__assert_fail@plt+0xda20>
   1f760:	sub	r3, r3, r5
   1f764:	str	r3, [sp, #80]	; 0x50
   1f768:	ldr	r2, [sp, #28]
   1f76c:	cmp	r2, #43	; 0x2b
   1f770:	cmpne	r2, #48	; 0x30
   1f774:	moveq	r2, r3
   1f778:	moveq	r1, #48	; 0x30
   1f77c:	ldrne	r2, [sp, #80]	; 0x50
   1f780:	movne	r1, #32
   1f784:	mov	r0, r6
   1f788:	bl	11be8 <memset@plt>
   1f78c:	ldr	r3, [sp, #80]	; 0x50
   1f790:	add	r6, r6, r3
   1f794:	ldr	r3, [sp, #1188]	; 0x4a4
   1f798:	str	r3, [sp, #20]
   1f79c:	ldr	r3, [sp, #1184]	; 0x4a0
   1f7a0:	str	r3, [sp, #16]
   1f7a4:	ldr	r3, [sp, #1180]	; 0x49c
   1f7a8:	str	r3, [sp, #12]
   1f7ac:	str	r7, [sp, #8]
   1f7b0:	ldr	r3, [sp, #28]
   1f7b4:	str	r3, [sp, #4]
   1f7b8:	ldr	r3, [sp, #76]	; 0x4c
   1f7bc:	str	r3, [sp]
   1f7c0:	ldr	r3, [sp, #40]	; 0x28
   1f7c4:	mov	r2, sl
   1f7c8:	mov	r1, r8
   1f7cc:	mov	r0, r6
   1f7d0:	bl	1ef68 <__assert_fail@plt+0xd1f4>
   1f7d4:	add	r6, r6, r5
   1f7d8:	add	fp, fp, r9
   1f7dc:	b	1f05c <__assert_fail@plt+0xd2e8>
   1f7e0:	mov	r3, #34	; 0x22
   1f7e4:	ldr	r2, [sp, #32]
   1f7e8:	str	r3, [r2]
   1f7ec:	b	1f0a4 <__assert_fail@plt+0xd330>
   1f7f0:	mov	r8, #0
   1f7f4:	b	1fee0 <__assert_fail@plt+0xe16c>
   1f7f8:	mov	r3, #34	; 0x22
   1f7fc:	ldr	r2, [sp, #32]
   1f800:	str	r3, [r2]
   1f804:	b	1f0a4 <__assert_fail@plt+0xd330>
   1f808:	mov	r2, r5
   1f80c:	add	r1, sp, #105	; 0x69
   1f810:	mov	r0, r6
   1f814:	bl	1eeb8 <__assert_fail@plt+0xd144>
   1f818:	b	1fa2c <__assert_fail@plt+0xdcb8>
   1f81c:	mov	r2, r5
   1f820:	add	r1, sp, #105	; 0x69
   1f824:	mov	r0, r6
   1f828:	bl	11930 <memcpy@plt>
   1f82c:	b	1fa2c <__assert_fail@plt+0xdcb8>
   1f830:	cmp	sl, #69	; 0x45
   1f834:	beq	20738 <__assert_fail@plt+0xe9c4>
   1f838:	ldr	r3, [sp, #40]	; 0x28
   1f83c:	ldr	r2, [r3, #20]
   1f840:	movw	r8, #63636	; 0xf894
   1f844:	movt	r8, #65535	; 0xffff
   1f848:	cmp	r2, r8
   1f84c:	movge	r8, #0
   1f850:	movlt	r8, #1
   1f854:	add	r3, r2, #1888	; 0x760
   1f858:	add	r3, r3, #12
   1f85c:	movw	r0, #1899	; 0x76b
   1f860:	cmp	r3, r0
   1f864:	mvnls	r3, #98	; 0x62
   1f868:	movhi	r3, #0
   1f86c:	add	r3, r3, r2
   1f870:	ldr	r2, [sp, #56]	; 0x38
   1f874:	smull	r0, r2, r2, r3
   1f878:	asr	r3, r3, #31
   1f87c:	rsb	r3, r3, r2, asr #5
   1f880:	add	r3, r3, #19
   1f884:	mov	r2, #2
   1f888:	str	r2, [sp, #80]	; 0x50
   1f88c:	ldr	r0, [sp, #28]
   1f890:	mov	r2, r0
   1f894:	ldr	ip, [sp, #1172]	; 0x494
   1f898:	cmp	r0, #0
   1f89c:	moveq	r2, ip
   1f8a0:	str	r2, [sp, #28]
   1f8a4:	cmp	r2, #43	; 0x2b
   1f8a8:	movne	r2, #0
   1f8ac:	beq	1fa38 <__assert_fail@plt+0xdcc4>
   1f8b0:	str	r2, [sp, #84]	; 0x54
   1f8b4:	mov	r0, #0
   1f8b8:	b	1f938 <__assert_fail@plt+0xdbc4>
   1f8bc:	cmp	sl, #79	; 0x4f
   1f8c0:	beq	1f4ec <__assert_fail@plt+0xd778>
   1f8c4:	mov	r1, #120	; 0x78
   1f8c8:	mov	r8, #0
   1f8cc:	b	1fee0 <__assert_fail@plt+0xe16c>
   1f8d0:	cmp	sl, #0
   1f8d4:	bne	1f4ec <__assert_fail@plt+0xd778>
   1f8d8:	mvn	r7, #0
   1f8dc:	movw	sl, #39456	; 0x9a20
   1f8e0:	movt	sl, #2
   1f8e4:	b	1f6d8 <__assert_fail@plt+0xd964>
   1f8e8:	cmp	sl, #69	; 0x45
   1f8ec:	beq	1f4ec <__assert_fail@plt+0xd778>
   1f8f0:	ldr	r3, [sp, #40]	; 0x28
   1f8f4:	ldr	r3, [r3, #12]
   1f8f8:	mov	r2, #2
   1f8fc:	str	r2, [sp, #80]	; 0x50
   1f900:	b	1f92c <__assert_fail@plt+0xdbb8>
   1f904:	cmp	sl, #69	; 0x45
   1f908:	beq	1f4ec <__assert_fail@plt+0xd778>
   1f90c:	ldr	r3, [sp, #40]	; 0x28
   1f910:	ldr	r3, [r3, #12]
   1f914:	ldr	r2, [sp, #28]
   1f918:	cmp	r2, #0
   1f91c:	mov	r2, #2
   1f920:	str	r2, [sp, #80]	; 0x50
   1f924:	moveq	r2, #95	; 0x5f
   1f928:	streq	r2, [sp, #28]
   1f92c:	lsr	r8, r3, #31
   1f930:	mov	r0, #0
   1f934:	str	r0, [sp, #84]	; 0x54
   1f938:	eor	r2, r8, #1
   1f93c:	cmp	sl, #79	; 0x4f
   1f940:	movne	r2, #0
   1f944:	andeq	r2, r2, #1
   1f948:	cmp	r2, #0
   1f94c:	beq	1fa64 <__assert_fail@plt+0xdcf0>
   1f950:	mov	r3, #32
   1f954:	strb	r3, [sp, #88]	; 0x58
   1f958:	mov	r3, #37	; 0x25
   1f95c:	strb	r3, [sp, #89]	; 0x59
   1f960:	mov	r8, #0
   1f964:	strb	sl, [sp, #90]	; 0x5a
   1f968:	add	r3, sp, #91	; 0x5b
   1f96c:	strb	r1, [r3]
   1f970:	mov	r2, #0
   1f974:	strb	r2, [r3, #1]
   1f978:	ldr	r3, [sp, #40]	; 0x28
   1f97c:	add	r2, sp, #88	; 0x58
   1f980:	mov	r1, #1024	; 0x400
   1f984:	add	r0, sp, #104	; 0x68
   1f988:	bl	11b04 <strftime@plt>
   1f98c:	cmp	r0, #0
   1f990:	beq	1f05c <__assert_fail@plt+0xd2e8>
   1f994:	sub	r5, r0, #1
   1f998:	ldr	r3, [sp, #28]
   1f99c:	subs	r3, r3, #45	; 0x2d
   1f9a0:	movne	r3, #1
   1f9a4:	cmp	r9, #0
   1f9a8:	movlt	r3, #0
   1f9ac:	cmp	r3, #0
   1f9b0:	moveq	r9, #0
   1f9b4:	mov	r7, r9
   1f9b8:	cmp	r9, r5
   1f9bc:	movcc	r9, r5
   1f9c0:	ldr	r3, [sp, #24]
   1f9c4:	sub	r3, r3, fp
   1f9c8:	cmp	r3, r9
   1f9cc:	bls	1f7f8 <__assert_fail@plt+0xda84>
   1f9d0:	cmp	r6, #0
   1f9d4:	beq	1fa30 <__assert_fail@plt+0xdcbc>
   1f9d8:	cmp	r7, r5
   1f9dc:	bls	1fa08 <__assert_fail@plt+0xdc94>
   1f9e0:	sub	r7, r7, r5
   1f9e4:	ldr	r3, [sp, #28]
   1f9e8:	cmp	r3, #43	; 0x2b
   1f9ec:	cmpne	r3, #48	; 0x30
   1f9f0:	mov	r2, r7
   1f9f4:	moveq	r1, #48	; 0x30
   1f9f8:	movne	r1, #32
   1f9fc:	mov	r0, r6
   1fa00:	bl	11be8 <memset@plt>
   1fa04:	add	r6, r6, r7
   1fa08:	cmp	r8, #0
   1fa0c:	bne	1f808 <__assert_fail@plt+0xda94>
   1fa10:	ldr	r3, [sp, #76]	; 0x4c
   1fa14:	cmp	r3, #0
   1fa18:	beq	1f81c <__assert_fail@plt+0xdaa8>
   1fa1c:	mov	r2, r5
   1fa20:	add	r1, sp, #105	; 0x69
   1fa24:	mov	r0, r6
   1fa28:	bl	1ef10 <__assert_fail@plt+0xd19c>
   1fa2c:	add	r6, r6, r5
   1fa30:	add	fp, fp, r9
   1fa34:	b	1f05c <__assert_fail@plt+0xd2e8>
   1fa38:	ldr	ip, [sp, #80]	; 0x50
   1fa3c:	cmp	ip, #2
   1fa40:	movw	r2, #9999	; 0x270f
   1fa44:	moveq	r0, #99	; 0x63
   1fa48:	movne	r0, r2
   1fa4c:	cmp	ip, r9
   1fa50:	movge	r2, #0
   1fa54:	movlt	r2, #1
   1fa58:	cmp	r3, r0
   1fa5c:	orrhi	r2, r2, #1
   1fa60:	b	1f8b0 <__assert_fail@plt+0xdb3c>
   1fa64:	cmp	r8, #0
   1fa68:	rsbne	r3, r3, #0
   1fa6c:	add	r5, sp, #102	; 0x66
   1fa70:	mov	r7, #58	; 0x3a
   1fa74:	movw	lr, #52429	; 0xcccd
   1fa78:	movt	lr, #52428	; 0xcccc
   1fa7c:	b	1fa84 <__assert_fail@plt+0xdd10>
   1fa80:	mov	r3, r1
   1fa84:	tst	r0, #1
   1fa88:	subne	ip, r5, #1
   1fa8c:	strbne	r7, [r5, #-1]
   1fa90:	moveq	ip, r5
   1fa94:	sub	r5, ip, #1
   1fa98:	umull	r2, r1, lr, r3
   1fa9c:	lsr	r1, r1, #3
   1faa0:	add	r2, r1, r1, lsl #2
   1faa4:	sub	r2, r3, r2, lsl #1
   1faa8:	add	r2, r2, #48	; 0x30
   1faac:	strb	r2, [ip, #-1]
   1fab0:	asrs	r0, r0, #1
   1fab4:	movne	r2, #1
   1fab8:	moveq	r2, #0
   1fabc:	cmp	r3, #9
   1fac0:	movls	r3, r2
   1fac4:	orrhi	r3, r2, #1
   1fac8:	cmp	r3, #0
   1facc:	bne	1fa80 <__assert_fail@plt+0xdd0c>
   1fad0:	ldr	r3, [sp, #28]
   1fad4:	cmp	r3, #0
   1fad8:	moveq	r3, #48	; 0x30
   1fadc:	str	r3, [sp, #28]
   1fae0:	ldr	r3, [sp, #80]	; 0x50
   1fae4:	cmp	r9, #0
   1fae8:	movlt	r9, r3
   1faec:	cmp	r8, #0
   1faf0:	bne	20750 <__assert_fail@plt+0xe9dc>
   1faf4:	ldr	r3, [sp, #84]	; 0x54
   1faf8:	cmp	r3, #0
   1fafc:	bne	2084c <__assert_fail@plt+0xead8>
   1fb00:	add	r7, sp, #102	; 0x66
   1fb04:	sub	r7, r7, r5
   1fb08:	ldr	r3, [sp, #28]
   1fb0c:	subs	r3, r3, #45	; 0x2d
   1fb10:	movne	r3, #1
   1fb14:	sub	r8, r9, r7
   1fb18:	cmp	r8, #0
   1fb1c:	movle	r8, #0
   1fb20:	andgt	r8, r3, #1
   1fb24:	cmp	r8, #0
   1fb28:	moveq	r8, r3
   1fb2c:	b	207bc <__assert_fail@plt+0xea48>
   1fb30:	cmp	r6, #0
   1fb34:	beq	1fb4c <__assert_fail@plt+0xddd8>
   1fb38:	mov	r2, sl
   1fb3c:	mov	r1, #32
   1fb40:	mov	r0, r6
   1fb44:	bl	11be8 <memset@plt>
   1fb48:	add	r6, r6, sl
   1fb4c:	add	fp, fp, sl
   1fb50:	sub	r9, r9, sl
   1fb54:	b	20798 <__assert_fail@plt+0xea24>
   1fb58:	mov	r3, #34	; 0x22
   1fb5c:	ldr	r2, [sp, #32]
   1fb60:	str	r3, [r2]
   1fb64:	b	1f0a4 <__assert_fail@plt+0xd330>
   1fb68:	mov	r3, #34	; 0x22
   1fb6c:	ldr	r2, [sp, #32]
   1fb70:	str	r3, [r2]
   1fb74:	b	1f0a4 <__assert_fail@plt+0xd330>
   1fb78:	mov	r2, r7
   1fb7c:	mov	r1, r5
   1fb80:	mov	r0, r6
   1fb84:	bl	11930 <memcpy@plt>
   1fb88:	b	20840 <__assert_fail@plt+0xeacc>
   1fb8c:	cmp	sl, #0
   1fb90:	bne	1f4ec <__assert_fail@plt+0xd778>
   1fb94:	ldr	r3, [sp, #28]
   1fb98:	cmp	r3, #0
   1fb9c:	lsreq	r3, r9, #31
   1fba0:	movne	r3, #0
   1fba4:	cmp	r3, #0
   1fba8:	bne	20894 <__assert_fail@plt+0xeb20>
   1fbac:	sub	r7, r9, #6
   1fbb0:	bic	r7, r7, r7, asr #31
   1fbb4:	movw	sl, #39436	; 0x9a0c
   1fbb8:	movt	sl, #2
   1fbbc:	b	1f6d8 <__assert_fail@plt+0xd964>
   1fbc0:	cmp	sl, #69	; 0x45
   1fbc4:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fbc8:	ldr	r3, [sp, #40]	; 0x28
   1fbcc:	ldr	r3, [r3, #8]
   1fbd0:	mov	r2, #2
   1fbd4:	str	r2, [sp, #80]	; 0x50
   1fbd8:	b	1f92c <__assert_fail@plt+0xdbb8>
   1fbdc:	cmp	sl, #69	; 0x45
   1fbe0:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fbe4:	ldr	r3, [sp, #64]	; 0x40
   1fbe8:	mov	r2, #2
   1fbec:	str	r2, [sp, #80]	; 0x50
   1fbf0:	b	1f92c <__assert_fail@plt+0xdbb8>
   1fbf4:	cmp	sl, #69	; 0x45
   1fbf8:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fbfc:	ldr	r3, [sp, #40]	; 0x28
   1fc00:	ldr	r3, [r3, #8]
   1fc04:	b	1f914 <__assert_fail@plt+0xdba0>
   1fc08:	cmp	sl, #69	; 0x45
   1fc0c:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fc10:	ldr	r3, [sp, #64]	; 0x40
   1fc14:	b	1f914 <__assert_fail@plt+0xdba0>
   1fc18:	cmp	sl, #69	; 0x45
   1fc1c:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fc20:	ldr	r3, [sp, #40]	; 0x28
   1fc24:	ldr	r3, [r3, #28]
   1fc28:	cmn	r3, #1
   1fc2c:	movge	r8, #0
   1fc30:	movlt	r8, #1
   1fc34:	add	r3, r3, #1
   1fc38:	mov	r0, #0
   1fc3c:	str	r0, [sp, #84]	; 0x54
   1fc40:	mov	r2, #3
   1fc44:	str	r2, [sp, #80]	; 0x50
   1fc48:	b	1f938 <__assert_fail@plt+0xdbc4>
   1fc4c:	cmp	sl, #69	; 0x45
   1fc50:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fc54:	ldr	r3, [sp, #40]	; 0x28
   1fc58:	ldr	r3, [r3, #4]
   1fc5c:	mov	r2, #2
   1fc60:	str	r2, [sp, #80]	; 0x50
   1fc64:	b	1f92c <__assert_fail@plt+0xdbb8>
   1fc68:	cmp	sl, #69	; 0x45
   1fc6c:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fc70:	ldr	r3, [sp, #40]	; 0x28
   1fc74:	ldr	r3, [r3, #16]
   1fc78:	cmn	r3, #1
   1fc7c:	movge	r8, #0
   1fc80:	movlt	r8, #1
   1fc84:	add	r3, r3, #1
   1fc88:	mov	r0, #0
   1fc8c:	str	r0, [sp, #84]	; 0x54
   1fc90:	mov	r2, #2
   1fc94:	str	r2, [sp, #80]	; 0x50
   1fc98:	b	1f938 <__assert_fail@plt+0xdbc4>
   1fc9c:	cmp	sl, #69	; 0x45
   1fca0:	beq	1f4ec <__assert_fail@plt+0xd778>
   1fca4:	cmp	r9, #0
   1fca8:	movle	r9, #9
   1fcac:	ldr	r3, [sp, #1188]	; 0x4a4
   1fcb0:	mov	r5, #9
   1fcb4:	ldr	r0, [sp, #60]	; 0x3c
   1fcb8:	b	1fccc <__assert_fail@plt+0xdf58>
   1fcbc:	sub	r5, r5, #1
   1fcc0:	smull	r1, r2, r0, r3
   1fcc4:	asr	r3, r3, #31
   1fcc8:	rsb	r3, r3, r2, asr #2
   1fccc:	cmp	r5, r9
   1fcd0:	bgt	1fcbc <__assert_fail@plt+0xdf48>
   1fcd4:	cmp	r5, #1
   1fcd8:	ble	1fcf8 <__assert_fail@plt+0xdf84>
   1fcdc:	smull	r1, r2, r0, r3
   1fce0:	asr	r1, r3, #31
   1fce4:	rsb	r2, r1, r2, asr #2
   1fce8:	add	r2, r2, r2, lsl #2
   1fcec:	cmp	r3, r2, lsl #1
   1fcf0:	beq	1fcbc <__assert_fail@plt+0xdf48>
   1fcf4:	b	1fd00 <__assert_fail@plt+0xdf8c>
   1fcf8:	cmp	r5, #1
   1fcfc:	bne	1fd4c <__assert_fail@plt+0xdfd8>
   1fd00:	add	r2, sp, #1120	; 0x460
   1fd04:	add	r2, r2, #8
   1fd08:	add	r1, r2, r5
   1fd0c:	sub	r1, r1, #1040	; 0x410
   1fd10:	sub	r1, r1, #1
   1fd14:	rsb	r0, r2, #1040	; 0x410
   1fd18:	add	r0, r0, #1
   1fd1c:	ldr	ip, [sp, #60]	; 0x3c
   1fd20:	smull	r2, lr, ip, r3
   1fd24:	asr	r2, r3, #31
   1fd28:	rsb	r2, r2, lr, asr #2
   1fd2c:	add	lr, r2, r2, lsl #2
   1fd30:	sub	r3, r3, lr, lsl #1
   1fd34:	add	r3, r3, #48	; 0x30
   1fd38:	strb	r3, [r1], #-1
   1fd3c:	mov	r3, r2
   1fd40:	add	r2, r0, r1
   1fd44:	cmp	r2, #0
   1fd48:	bgt	1fd20 <__assert_fail@plt+0xdfac>
   1fd4c:	ldr	r3, [sp, #28]
   1fd50:	cmp	r3, #0
   1fd54:	moveq	r3, #48	; 0x30
   1fd58:	str	r3, [sp, #28]
   1fd5c:	mov	r7, r5
   1fd60:	ldr	r3, [sp, #24]
   1fd64:	sub	r3, r3, fp
   1fd68:	cmp	r3, r5
   1fd6c:	bls	1fdf4 <__assert_fail@plt+0xe080>
   1fd70:	cmp	r6, #0
   1fd74:	beq	1fd98 <__assert_fail@plt+0xe024>
   1fd78:	ldr	r3, [sp, #76]	; 0x4c
   1fd7c:	cmp	r3, #0
   1fd80:	beq	1fe04 <__assert_fail@plt+0xe090>
   1fd84:	mov	r2, r5
   1fd88:	add	r1, sp, #88	; 0x58
   1fd8c:	mov	r0, r6
   1fd90:	bl	1ef10 <__assert_fail@plt+0xd19c>
   1fd94:	add	r6, r6, r7
   1fd98:	add	fp, r7, fp
   1fd9c:	ldr	r3, [sp, #28]
   1fda0:	cmp	r3, #45	; 0x2d
   1fda4:	beq	208f8 <__assert_fail@plt+0xeb84>
   1fda8:	sub	r5, r9, r5
   1fdac:	ldr	r3, [sp, #24]
   1fdb0:	sub	r3, r3, fp
   1fdb4:	cmp	r3, r5
   1fdb8:	bls	1fe18 <__assert_fail@plt+0xe0a4>
   1fdbc:	cmp	r6, #0
   1fdc0:	cmpne	r5, #0
   1fdc4:	beq	1fdec <__assert_fail@plt+0xe078>
   1fdc8:	ldr	r3, [sp, #28]
   1fdcc:	cmp	r3, #43	; 0x2b
   1fdd0:	cmpne	r3, #48	; 0x30
   1fdd4:	mov	r2, r5
   1fdd8:	moveq	r1, #48	; 0x30
   1fddc:	movne	r1, #32
   1fde0:	mov	r0, r6
   1fde4:	bl	11be8 <memset@plt>
   1fde8:	add	r6, r6, r5
   1fdec:	add	fp, fp, r5
   1fdf0:	b	1f05c <__assert_fail@plt+0xd2e8>
   1fdf4:	mov	r3, #34	; 0x22
   1fdf8:	ldr	r2, [sp, #32]
   1fdfc:	str	r3, [r2]
   1fe00:	b	1f0a4 <__assert_fail@plt+0xd330>
   1fe04:	mov	r2, r5
   1fe08:	add	r1, sp, #88	; 0x58
   1fe0c:	mov	r0, r6
   1fe10:	bl	11930 <memcpy@plt>
   1fe14:	b	1fd94 <__assert_fail@plt+0xe020>
   1fe18:	mov	r3, #34	; 0x22
   1fe1c:	ldr	r2, [sp, #32]
   1fe20:	str	r3, [r2]
   1fe24:	b	1f0a4 <__assert_fail@plt+0xd330>
   1fe28:	ldr	r2, [sp, #28]
   1fe2c:	mvn	r3, r9
   1fe30:	lsr	r3, r3, #31
   1fe34:	cmp	r2, #45	; 0x2d
   1fe38:	moveq	r3, #0
   1fe3c:	cmp	r3, #0
   1fe40:	moveq	r9, #0
   1fe44:	mov	r5, r9
   1fe48:	cmp	r9, #1
   1fe4c:	movcc	r9, #1
   1fe50:	ldr	r3, [sp, #24]
   1fe54:	sub	r3, r3, fp
   1fe58:	cmp	r3, r9
   1fe5c:	bls	1fea8 <__assert_fail@plt+0xe134>
   1fe60:	cmp	r6, #0
   1fe64:	beq	1fea0 <__assert_fail@plt+0xe12c>
   1fe68:	cmp	r5, #1
   1fe6c:	bls	1fe98 <__assert_fail@plt+0xe124>
   1fe70:	sub	r5, r5, #1
   1fe74:	ldr	r3, [sp, #28]
   1fe78:	cmp	r3, #43	; 0x2b
   1fe7c:	cmpne	r3, #48	; 0x30
   1fe80:	mov	r2, r5
   1fe84:	moveq	r1, #48	; 0x30
   1fe88:	movne	r1, #32
   1fe8c:	mov	r0, r6
   1fe90:	bl	11be8 <memset@plt>
   1fe94:	add	r6, r6, r5
   1fe98:	mov	r3, #10
   1fe9c:	strb	r3, [r6], #1
   1fea0:	add	fp, fp, r9
   1fea4:	b	1f05c <__assert_fail@plt+0xd2e8>
   1fea8:	mov	r3, #34	; 0x22
   1feac:	ldr	r2, [sp, #32]
   1feb0:	str	r3, [r2]
   1feb4:	b	1f0a4 <__assert_fail@plt+0xd330>
   1feb8:	mov	r8, #1
   1febc:	b	1fec4 <__assert_fail@plt+0xe150>
   1fec0:	mov	r8, #0
   1fec4:	cmp	r5, #0
   1fec8:	movne	r8, r5
   1fecc:	mov	r1, #112	; 0x70
   1fed0:	cmp	r5, #0
   1fed4:	ldr	r3, [sp, #76]	; 0x4c
   1fed8:	movne	r3, #0
   1fedc:	str	r3, [sp, #76]	; 0x4c
   1fee0:	mov	r3, #32
   1fee4:	strb	r3, [sp, #88]	; 0x58
   1fee8:	mov	r3, #37	; 0x25
   1feec:	strb	r3, [sp, #89]	; 0x59
   1fef0:	cmp	sl, #0
   1fef4:	addeq	r3, sp, #90	; 0x5a
   1fef8:	beq	1f96c <__assert_fail@plt+0xdbf8>
   1fefc:	b	1f964 <__assert_fail@plt+0xdbf0>
   1ff00:	ldr	r3, [sp, #40]	; 0x28
   1ff04:	ldr	r2, [r3, #16]
   1ff08:	cmp	sl, #79	; 0x4f
   1ff0c:	moveq	r1, #113	; 0x71
   1ff10:	beq	1f950 <__assert_fail@plt+0xdbdc>
   1ff14:	mov	r3, #11
   1ff18:	mul	r3, r3, r2
   1ff1c:	asr	r3, r3, #5
   1ff20:	add	r3, r3, #1
   1ff24:	mov	r0, #0
   1ff28:	str	r0, [sp, #84]	; 0x54
   1ff2c:	mov	r8, r0
   1ff30:	mov	r2, #1
   1ff34:	str	r2, [sp, #80]	; 0x50
   1ff38:	b	1fa6c <__assert_fail@plt+0xdcf8>
   1ff3c:	cmp	sl, #69	; 0x45
   1ff40:	beq	1f4ec <__assert_fail@plt+0xd778>
   1ff44:	ldr	r3, [sp, #40]	; 0x28
   1ff48:	ldr	r3, [r3]
   1ff4c:	mov	r2, #2
   1ff50:	str	r2, [sp, #80]	; 0x50
   1ff54:	b	1f92c <__assert_fail@plt+0xdbb8>
   1ff58:	ldr	r1, [sp, #40]	; 0x28
   1ff5c:	ldrd	r2, [r1]
   1ff60:	strd	r2, [sp, #104]	; 0x68
   1ff64:	ldrd	r2, [r1, #8]
   1ff68:	strd	r2, [sp, #112]	; 0x70
   1ff6c:	ldrd	r2, [r1, #16]
   1ff70:	strd	r2, [sp, #120]	; 0x78
   1ff74:	ldrd	r2, [r1, #24]
   1ff78:	strd	r2, [sp, #128]	; 0x80
   1ff7c:	ldrd	r2, [r1, #32]
   1ff80:	strd	r2, [sp, #136]	; 0x88
   1ff84:	ldr	r3, [r1, #40]	; 0x28
   1ff88:	str	r3, [sp, #144]	; 0x90
   1ff8c:	mvn	r3, #0
   1ff90:	str	r3, [sp, #132]	; 0x84
   1ff94:	add	r1, sp, #104	; 0x68
   1ff98:	ldr	r0, [sp, #1184]	; 0x4a0
   1ff9c:	bl	237f4 <_obstack_memory_used@@Base+0x2ae4>
   1ffa0:	ldr	r3, [sp, #132]	; 0x84
   1ffa4:	cmp	r3, #0
   1ffa8:	blt	20008 <__assert_fail@plt+0xe294>
   1ffac:	lsr	r8, r0, #31
   1ffb0:	mov	r2, r0
   1ffb4:	add	r5, sp, #102	; 0x66
   1ffb8:	ldr	r1, [sp, #60]	; 0x3c
   1ffbc:	smull	r3, ip, r1, r2
   1ffc0:	asr	ip, ip, #2
   1ffc4:	asr	lr, r2, #31
   1ffc8:	sub	r3, ip, lr
   1ffcc:	add	r3, r3, r3, lsl #2
   1ffd0:	sub	r3, r2, r3, lsl #1
   1ffd4:	sub	r2, ip, lr
   1ffd8:	cmp	r0, #0
   1ffdc:	rsblt	r3, r3, #48	; 0x30
   1ffe0:	addge	r3, r3, #48	; 0x30
   1ffe4:	uxtb	r3, r3
   1ffe8:	strb	r3, [r5, #-1]!
   1ffec:	cmp	r2, #0
   1fff0:	bne	1ffbc <__assert_fail@plt+0xe248>
   1fff4:	mov	r3, #0
   1fff8:	str	r3, [sp, #84]	; 0x54
   1fffc:	mov	r3, #1
   20000:	str	r3, [sp, #80]	; 0x50
   20004:	b	1fad0 <__assert_fail@plt+0xdd5c>
   20008:	mov	r3, #75	; 0x4b
   2000c:	ldr	r2, [sp, #32]
   20010:	str	r3, [r2]
   20014:	b	1f0a4 <__assert_fail@plt+0xd330>
   20018:	cmp	sl, #79	; 0x4f
   2001c:	beq	1f4ec <__assert_fail@plt+0xd778>
   20020:	mov	r1, #88	; 0x58
   20024:	mov	r8, #0
   20028:	b	1fee0 <__assert_fail@plt+0xe16c>
   2002c:	ldr	r3, [sp, #28]
   20030:	subs	r3, r3, #45	; 0x2d
   20034:	movne	r3, #1
   20038:	cmp	r9, #0
   2003c:	movlt	r3, #0
   20040:	cmp	r3, #0
   20044:	moveq	r9, #0
   20048:	mov	r5, r9
   2004c:	cmp	r9, #1
   20050:	movcc	r9, #1
   20054:	ldr	r3, [sp, #24]
   20058:	sub	r3, r3, fp
   2005c:	cmp	r3, r9
   20060:	bls	200ac <__assert_fail@plt+0xe338>
   20064:	cmp	r6, #0
   20068:	beq	200a4 <__assert_fail@plt+0xe330>
   2006c:	cmp	r5, #1
   20070:	bls	2009c <__assert_fail@plt+0xe328>
   20074:	sub	r5, r5, #1
   20078:	ldr	r3, [sp, #28]
   2007c:	cmp	r3, #43	; 0x2b
   20080:	cmpne	r3, #48	; 0x30
   20084:	mov	r2, r5
   20088:	moveq	r1, #48	; 0x30
   2008c:	movne	r1, #32
   20090:	mov	r0, r6
   20094:	bl	11be8 <memset@plt>
   20098:	add	r6, r6, r5
   2009c:	mov	r3, #9
   200a0:	strb	r3, [r6], #1
   200a4:	add	fp, fp, r9
   200a8:	b	1f05c <__assert_fail@plt+0xd2e8>
   200ac:	mov	r3, #34	; 0x22
   200b0:	ldr	r2, [sp, #32]
   200b4:	str	r3, [r2]
   200b8:	b	1f0a4 <__assert_fail@plt+0xd330>
   200bc:	ldr	r3, [sp, #40]	; 0x28
   200c0:	ldr	r3, [r3, #24]
   200c4:	add	r3, r3, #6
   200c8:	ldr	r2, [sp, #52]	; 0x34
   200cc:	smull	r0, r2, r2, r3
   200d0:	add	r0, r2, r3
   200d4:	asr	r2, r3, #31
   200d8:	rsb	r2, r2, r0, asr #2
   200dc:	rsb	r2, r2, r2, lsl #3
   200e0:	sub	r3, r3, r2
   200e4:	add	r3, r3, #1
   200e8:	mov	r2, #1
   200ec:	str	r2, [sp, #80]	; 0x50
   200f0:	b	1f92c <__assert_fail@plt+0xdbb8>
   200f4:	cmp	sl, #69	; 0x45
   200f8:	beq	1f4ec <__assert_fail@plt+0xd778>
   200fc:	ldr	r2, [sp, #40]	; 0x28
   20100:	ldr	r3, [r2, #28]
   20104:	ldr	r2, [r2, #24]
   20108:	sub	r3, r3, r2
   2010c:	add	r3, r3, #7
   20110:	ldr	r2, [sp, #52]	; 0x34
   20114:	smull	r0, r2, r2, r3
   20118:	add	r2, r2, r3
   2011c:	asr	r3, r3, #31
   20120:	rsb	r3, r3, r2, asr #2
   20124:	mov	r2, #2
   20128:	str	r2, [sp, #80]	; 0x50
   2012c:	b	1f92c <__assert_fail@plt+0xdbb8>
   20130:	cmp	sl, #69	; 0x45
   20134:	beq	1f4ec <__assert_fail@plt+0xd778>
   20138:	ldr	r2, [sp, #40]	; 0x28
   2013c:	ldr	r5, [r2, #20]
   20140:	cmp	r5, #0
   20144:	movlt	r0, #300	; 0x12c
   20148:	mvnge	r0, #99	; 0x63
   2014c:	add	r0, r5, r0
   20150:	ldr	r7, [r2, #28]
   20154:	ldr	r2, [r2, #24]
   20158:	str	r2, [sp, #80]	; 0x50
   2015c:	sub	r2, r7, r2
   20160:	add	r2, r2, #380	; 0x17c
   20164:	add	r2, r2, #2
   20168:	ldr	ip, [sp, #52]	; 0x34
   2016c:	smull	ip, lr, ip, r2
   20170:	add	lr, lr, r2
   20174:	asr	ip, r2, #31
   20178:	rsb	ip, ip, lr, asr #2
   2017c:	rsb	ip, ip, ip, lsl #3
   20180:	sub	ip, r2, ip
   20184:	sub	r8, r7, ip
   20188:	adds	r8, r8, #3
   2018c:	bmi	20278 <__assert_fail@plt+0xe504>
   20190:	tst	r0, #3
   20194:	movne	r2, #0
   20198:	bne	201d4 <__assert_fail@plt+0xe460>
   2019c:	ldr	r2, [sp, #56]	; 0x38
   201a0:	smull	ip, r2, r2, r0
   201a4:	asr	ip, r0, #31
   201a8:	rsb	r2, ip, r2, asr #5
   201ac:	mov	ip, #100	; 0x64
   201b0:	mls	r2, ip, r2, r0
   201b4:	cmp	r2, #0
   201b8:	movne	r2, #1
   201bc:	bne	201d4 <__assert_fail@plt+0xe460>
   201c0:	mov	ip, #400	; 0x190
   201c4:	sdiv	r2, r0, ip
   201c8:	mls	r2, ip, r2, r0
   201cc:	clz	r2, r2
   201d0:	lsr	r2, r2, #5
   201d4:	add	r2, r2, #364	; 0x16c
   201d8:	add	r2, r2, #1
   201dc:	sub	r2, r7, r2
   201e0:	ldr	r0, [sp, #80]	; 0x50
   201e4:	sub	r0, r2, r0
   201e8:	add	r0, r0, #380	; 0x17c
   201ec:	add	r0, r0, #2
   201f0:	ldr	ip, [sp, #52]	; 0x34
   201f4:	smull	ip, lr, ip, r0
   201f8:	add	lr, lr, r0
   201fc:	asr	ip, r0, #31
   20200:	rsb	ip, ip, lr, asr #2
   20204:	rsb	ip, ip, ip, lsl #3
   20208:	sub	ip, r0, ip
   2020c:	sub	lr, r2, ip
   20210:	add	lr, lr, #3
   20214:	cmp	lr, #0
   20218:	movge	r8, lr
   2021c:	mvn	lr, lr
   20220:	lsr	lr, lr, #31
   20224:	cmp	r3, #71	; 0x47
   20228:	beq	20330 <__assert_fail@plt+0xe5bc>
   2022c:	cmp	r3, #103	; 0x67
   20230:	bne	20360 <__assert_fail@plt+0xe5ec>
   20234:	ldr	ip, [sp, #56]	; 0x38
   20238:	smull	r2, r3, ip, r5
   2023c:	asr	r2, r5, #31
   20240:	rsb	r2, r2, r3, asr #5
   20244:	mov	r0, #100	; 0x64
   20248:	mls	r2, r0, r2, r5
   2024c:	add	r2, r2, lr
   20250:	smull	r3, ip, ip, r2
   20254:	asr	r3, r2, #31
   20258:	rsb	r3, r3, ip, asr #5
   2025c:	mls	r3, r0, r3, r2
   20260:	cmp	r3, #0
   20264:	blt	20308 <__assert_fail@plt+0xe594>
   20268:	mov	r8, #0
   2026c:	mov	r2, #2
   20270:	str	r2, [sp, #80]	; 0x50
   20274:	b	1f88c <__assert_fail@plt+0xdb18>
   20278:	sub	r0, r0, #1
   2027c:	tst	r0, #3
   20280:	movne	r2, #0
   20284:	bne	202c0 <__assert_fail@plt+0xe54c>
   20288:	ldr	r2, [sp, #56]	; 0x38
   2028c:	smull	ip, r2, r2, r0
   20290:	asr	ip, r0, #31
   20294:	rsb	r2, ip, r2, asr #5
   20298:	mov	ip, #100	; 0x64
   2029c:	mls	r2, ip, r2, r0
   202a0:	cmp	r2, #0
   202a4:	movne	r2, #1
   202a8:	bne	202c0 <__assert_fail@plt+0xe54c>
   202ac:	mov	ip, #400	; 0x190
   202b0:	sdiv	r2, r0, ip
   202b4:	mls	r2, ip, r2, r0
   202b8:	clz	r2, r2
   202bc:	lsr	r2, r2, #5
   202c0:	add	r2, r2, #364	; 0x16c
   202c4:	add	r2, r2, #1
   202c8:	add	r2, r2, r7
   202cc:	ldr	r0, [sp, #80]	; 0x50
   202d0:	sub	r0, r2, r0
   202d4:	add	r0, r0, #380	; 0x17c
   202d8:	add	r0, r0, #2
   202dc:	ldr	ip, [sp, #52]	; 0x34
   202e0:	smull	ip, lr, ip, r0
   202e4:	add	lr, lr, r0
   202e8:	asr	ip, r0, #31
   202ec:	rsb	ip, ip, lr, asr #2
   202f0:	rsb	ip, ip, ip, lsl #3
   202f4:	sub	r0, r0, ip
   202f8:	sub	r0, r2, r0
   202fc:	add	r8, r0, #3
   20300:	mvn	lr, #0
   20304:	b	20224 <__assert_fail@plt+0xe4b0>
   20308:	movw	r2, #63636	; 0xf894
   2030c:	movt	r2, #65535	; 0xffff
   20310:	sub	r2, r2, lr
   20314:	cmp	r2, r5
   20318:	rsbgt	r3, r3, #0
   2031c:	addle	r3, r3, #100	; 0x64
   20320:	mov	r8, #0
   20324:	mov	r2, #2
   20328:	str	r2, [sp, #80]	; 0x50
   2032c:	b	1f88c <__assert_fail@plt+0xdb18>
   20330:	movw	r3, #63636	; 0xf894
   20334:	movt	r3, #65535	; 0xffff
   20338:	sub	r3, r3, lr
   2033c:	cmp	r5, r3
   20340:	movge	r8, #0
   20344:	movlt	r8, #1
   20348:	add	r3, r5, #1888	; 0x760
   2034c:	add	r3, r3, #12
   20350:	add	r3, r3, lr
   20354:	mov	r2, #4
   20358:	str	r2, [sp, #80]	; 0x50
   2035c:	b	1f88c <__assert_fail@plt+0xdb18>
   20360:	ldr	r3, [sp, #52]	; 0x34
   20364:	smull	r2, r3, r3, r8
   20368:	add	r2, r3, r8
   2036c:	asr	r3, r8, #31
   20370:	rsb	r3, r3, r2, asr #2
   20374:	add	r3, r3, #1
   20378:	mov	r2, #2
   2037c:	str	r2, [sp, #80]	; 0x50
   20380:	b	1f92c <__assert_fail@plt+0xdbb8>
   20384:	cmp	sl, #69	; 0x45
   20388:	beq	1f4ec <__assert_fail@plt+0xd778>
   2038c:	ldr	ip, [sp, #40]	; 0x28
   20390:	ldr	r3, [ip, #24]
   20394:	add	r3, r3, #6
   20398:	ldr	lr, [sp, #52]	; 0x34
   2039c:	smull	r0, r2, lr, r3
   203a0:	add	r0, r2, r3
   203a4:	asr	r2, r3, #31
   203a8:	rsb	r2, r2, r0, asr #2
   203ac:	rsb	r2, r2, r2, lsl #3
   203b0:	sub	r2, r3, r2
   203b4:	ldr	r3, [ip, #28]
   203b8:	sub	r3, r3, r2
   203bc:	add	r3, r3, #7
   203c0:	smull	r0, r2, lr, r3
   203c4:	add	r2, r2, r3
   203c8:	asr	r3, r3, #31
   203cc:	rsb	r3, r3, r2, asr #2
   203d0:	mov	r2, #2
   203d4:	str	r2, [sp, #80]	; 0x50
   203d8:	b	1f92c <__assert_fail@plt+0xdbb8>
   203dc:	cmp	sl, #69	; 0x45
   203e0:	beq	1f4ec <__assert_fail@plt+0xd778>
   203e4:	ldr	r3, [sp, #40]	; 0x28
   203e8:	ldr	r3, [r3, #24]
   203ec:	mov	r2, #1
   203f0:	str	r2, [sp, #80]	; 0x50
   203f4:	b	1f92c <__assert_fail@plt+0xdbb8>
   203f8:	cmp	sl, #69	; 0x45
   203fc:	beq	20740 <__assert_fail@plt+0xe9cc>
   20400:	cmp	sl, #79	; 0x4f
   20404:	beq	1f4ec <__assert_fail@plt+0xd778>
   20408:	ldr	r3, [sp, #40]	; 0x28
   2040c:	ldr	r3, [r3, #20]
   20410:	movw	r8, #63636	; 0xf894
   20414:	movt	r8, #65535	; 0xffff
   20418:	cmp	r3, r8
   2041c:	movge	r8, #0
   20420:	movlt	r8, #1
   20424:	add	r3, r3, #1888	; 0x760
   20428:	add	r3, r3, #12
   2042c:	mov	r2, #4
   20430:	str	r2, [sp, #80]	; 0x50
   20434:	b	1f88c <__assert_fail@plt+0xdb18>
   20438:	cmp	sl, #69	; 0x45
   2043c:	beq	20748 <__assert_fail@plt+0xe9d4>
   20440:	ldr	r3, [sp, #40]	; 0x28
   20444:	ldr	r2, [r3, #20]
   20448:	ldr	r3, [sp, #56]	; 0x38
   2044c:	smull	r3, r0, r3, r2
   20450:	asr	r3, r2, #31
   20454:	rsb	r3, r3, r0, asr #5
   20458:	mov	r0, #100	; 0x64
   2045c:	mls	r3, r0, r3, r2
   20460:	cmp	r3, #0
   20464:	blt	20478 <__assert_fail@plt+0xe704>
   20468:	mov	r8, #0
   2046c:	mov	r2, #2
   20470:	str	r2, [sp, #80]	; 0x50
   20474:	b	1f88c <__assert_fail@plt+0xdb18>
   20478:	movw	r0, #63636	; 0xf894
   2047c:	movt	r0, #65535	; 0xffff
   20480:	cmp	r2, r0
   20484:	rsblt	r3, r3, #0
   20488:	addge	r3, r3, #100	; 0x64
   2048c:	b	20468 <__assert_fail@plt+0xe6f4>
   20490:	cmp	r5, #0
   20494:	ldr	r3, [sp, #76]	; 0x4c
   20498:	movne	r3, #0
   2049c:	str	r3, [sp, #76]	; 0x4c
   204a0:	ldr	r0, [sp, #48]	; 0x30
   204a4:	bl	11b94 <strlen@plt>
   204a8:	mov	r8, r0
   204ac:	ldr	r3, [sp, #28]
   204b0:	subs	r3, r3, #45	; 0x2d
   204b4:	movne	r3, #1
   204b8:	cmp	r9, #0
   204bc:	movlt	r3, #0
   204c0:	cmp	r3, #0
   204c4:	moveq	r9, #0
   204c8:	mov	r7, r9
   204cc:	cmp	r9, r0
   204d0:	movcc	r9, r0
   204d4:	ldr	r3, [sp, #24]
   204d8:	sub	r3, r3, fp
   204dc:	cmp	r3, r9
   204e0:	bls	2054c <__assert_fail@plt+0xe7d8>
   204e4:	cmp	r6, #0
   204e8:	beq	20544 <__assert_fail@plt+0xe7d0>
   204ec:	cmp	r7, r0
   204f0:	bls	2051c <__assert_fail@plt+0xe7a8>
   204f4:	sub	r7, r7, r0
   204f8:	ldr	r3, [sp, #28]
   204fc:	cmp	r3, #43	; 0x2b
   20500:	cmpne	r3, #48	; 0x30
   20504:	mov	r2, r7
   20508:	moveq	r1, #48	; 0x30
   2050c:	movne	r1, #32
   20510:	mov	r0, r6
   20514:	bl	11be8 <memset@plt>
   20518:	add	r6, r6, r7
   2051c:	cmp	r5, #0
   20520:	bne	2055c <__assert_fail@plt+0xe7e8>
   20524:	ldr	r3, [sp, #76]	; 0x4c
   20528:	cmp	r3, #0
   2052c:	beq	20570 <__assert_fail@plt+0xe7fc>
   20530:	mov	r2, r8
   20534:	ldr	r1, [sp, #48]	; 0x30
   20538:	mov	r0, r6
   2053c:	bl	1ef10 <__assert_fail@plt+0xd19c>
   20540:	add	r6, r6, r8
   20544:	add	fp, fp, r9
   20548:	b	1f05c <__assert_fail@plt+0xd2e8>
   2054c:	mov	r3, #34	; 0x22
   20550:	ldr	r2, [sp, #32]
   20554:	str	r3, [r2]
   20558:	b	1f0a4 <__assert_fail@plt+0xd330>
   2055c:	mov	r2, r8
   20560:	ldr	r1, [sp, #48]	; 0x30
   20564:	mov	r0, r6
   20568:	bl	1eeb8 <__assert_fail@plt+0xd144>
   2056c:	b	20540 <__assert_fail@plt+0xe7cc>
   20570:	mov	r2, r8
   20574:	ldr	r1, [sp, #48]	; 0x30
   20578:	mov	r0, r6
   2057c:	bl	11930 <memcpy@plt>
   20580:	b	20540 <__assert_fail@plt+0xe7cc>
   20584:	add	r0, r4, #2
   20588:	mov	lr, #1
   2058c:	add	lr, lr, #1
   20590:	mov	r2, r0
   20594:	ldrb	r3, [r0], #1
   20598:	cmp	r3, #58	; 0x3a
   2059c:	bne	1f4cc <__assert_fail@plt+0xd758>
   205a0:	b	2058c <__assert_fail@plt+0xe818>
   205a4:	mov	lr, #0
   205a8:	ldr	r2, [sp, #40]	; 0x28
   205ac:	ldr	r3, [r2, #32]
   205b0:	cmp	r3, #0
   205b4:	blt	1f05c <__assert_fail@plt+0xd2e8>
   205b8:	ldr	r2, [r2, #36]	; 0x24
   205bc:	cmp	r2, #0
   205c0:	movlt	r8, #1
   205c4:	blt	205e4 <__assert_fail@plt+0xe870>
   205c8:	movne	r8, #0
   205cc:	bne	205e4 <__assert_fail@plt+0xe870>
   205d0:	ldr	r3, [sp, #48]	; 0x30
   205d4:	ldrb	r8, [r3]
   205d8:	cmp	r8, #45	; 0x2d
   205dc:	movne	r8, #0
   205e0:	moveq	r8, #1
   205e4:	ldr	r3, [sp, #68]	; 0x44
   205e8:	smull	r0, r3, r3, r2
   205ec:	add	r3, r3, r2
   205f0:	asr	r0, r2, #31
   205f4:	str	r0, [sp, #80]	; 0x50
   205f8:	rsb	r5, r0, r3, asr #11
   205fc:	ldr	ip, [sp, #72]	; 0x48
   20600:	smull	r0, r3, ip, r2
   20604:	add	r3, r3, r2
   20608:	ldr	r0, [sp, #80]	; 0x50
   2060c:	rsb	r3, r0, r3, asr #5
   20610:	smull	ip, r0, ip, r3
   20614:	add	r0, r0, r3
   20618:	asr	ip, r3, #31
   2061c:	rsb	r0, ip, r0, asr #5
   20620:	rsb	r0, r0, r0, lsl #4
   20624:	sub	r0, r3, r0, lsl #2
   20628:	rsb	r3, r3, r3, lsl #4
   2062c:	sub	r3, r2, r3, lsl #2
   20630:	cmp	lr, #3
   20634:	ldrls	pc, [pc, lr, lsl #2]
   20638:	b	1f4ec <__assert_fail@plt+0xd778>
   2063c:	andeq	r0, r2, ip, asr #12
   20640:	andeq	r0, r2, ip, ror #12
   20644:	andeq	r0, r2, ip, lsl #13
   20648:			; <UNDEFINED> instruction: 0x000206b8
   2064c:	mov	r3, #100	; 0x64
   20650:	mla	r3, r3, r5, r0
   20654:	mov	r0, #0
   20658:	mov	r2, #1
   2065c:	str	r2, [sp, #84]	; 0x54
   20660:	mov	r2, #5
   20664:	str	r2, [sp, #80]	; 0x50
   20668:	b	1f938 <__assert_fail@plt+0xdbc4>
   2066c:	mov	r3, #100	; 0x64
   20670:	mla	r3, r3, r5, r0
   20674:	mov	r0, #4
   20678:	mov	r2, #1
   2067c:	str	r2, [sp, #84]	; 0x54
   20680:	mov	r2, #6
   20684:	str	r2, [sp, #80]	; 0x50
   20688:	b	1f938 <__assert_fail@plt+0xdbc4>
   2068c:	mov	r2, #100	; 0x64
   20690:	mul	r0, r2, r0
   20694:	movw	r2, #10000	; 0x2710
   20698:	mla	r5, r2, r5, r0
   2069c:	add	r3, r5, r3
   206a0:	mov	r0, #20
   206a4:	mov	r2, #1
   206a8:	str	r2, [sp, #84]	; 0x54
   206ac:	mov	r2, #9
   206b0:	str	r2, [sp, #80]	; 0x50
   206b4:	b	1f938 <__assert_fail@plt+0xdbc4>
   206b8:	cmp	r3, #0
   206bc:	bne	2068c <__assert_fail@plt+0xe918>
   206c0:	cmp	r0, #0
   206c4:	bne	2066c <__assert_fail@plt+0xe8f8>
   206c8:	mov	r3, r5
   206cc:	mov	r2, #1
   206d0:	str	r2, [sp, #84]	; 0x54
   206d4:	mov	r2, #3
   206d8:	str	r2, [sp, #80]	; 0x50
   206dc:	b	1f938 <__assert_fail@plt+0xdbc4>
   206e0:	mov	r3, #34	; 0x22
   206e4:	ldr	r2, [sp, #32]
   206e8:	str	r3, [r2]
   206ec:	b	1f0a4 <__assert_fail@plt+0xd330>
   206f0:	mov	r2, r5
   206f4:	mov	r1, r7
   206f8:	mov	r0, r6
   206fc:	bl	11930 <memcpy@plt>
   20700:	b	1f580 <__assert_fail@plt+0xd80c>
   20704:	str	r6, [sp, #28]
   20708:	ldr	r2, [sp, #28]
   2070c:	ldr	r3, [sp, #24]
   20710:	cmp	r2, #0
   20714:	cmpne	r3, #0
   20718:	movne	r3, #0
   2071c:	strbne	r3, [r2]
   20720:	ldr	r3, [sp, #32]
   20724:	ldr	r2, [sp, #44]	; 0x2c
   20728:	str	r2, [r3]
   2072c:	b	1f0a8 <__assert_fail@plt+0xd334>
   20730:	mov	fp, #0
   20734:	b	20708 <__assert_fail@plt+0xe994>
   20738:	mov	r1, #67	; 0x43
   2073c:	b	1f950 <__assert_fail@plt+0xdbdc>
   20740:	mov	r1, #89	; 0x59
   20744:	b	1f950 <__assert_fail@plt+0xdbdc>
   20748:	mov	r1, #121	; 0x79
   2074c:	b	1f950 <__assert_fail@plt+0xdbdc>
   20750:	add	r7, sp, #102	; 0x66
   20754:	sub	r7, r7, r5
   20758:	sub	sl, r9, #1
   2075c:	sub	sl, sl, r7
   20760:	ldr	r3, [sp, #28]
   20764:	subs	r8, r3, #45	; 0x2d
   20768:	movne	r8, #1
   2076c:	cmp	sl, #0
   20770:	movle	r3, #0
   20774:	andgt	r3, r8, #1
   20778:	cmp	r3, #0
   2077c:	bne	2090c <__assert_fail@plt+0xeb98>
   20780:	mov	sl, #0
   20784:	mov	r3, #45	; 0x2d
   20788:	str	r3, [sp, #80]	; 0x50
   2078c:	ldr	r3, [sp, #28]
   20790:	cmp	r3, #95	; 0x5f
   20794:	beq	1fb30 <__assert_fail@plt+0xddbc>
   20798:	ldr	r3, [sp, #24]
   2079c:	sub	r3, r3, fp
   207a0:	cmp	r3, #1
   207a4:	bls	1fb58 <__assert_fail@plt+0xdde4>
   207a8:	cmp	r6, #0
   207ac:	ldrne	r3, [sp, #80]	; 0x50
   207b0:	strbne	r3, [r6], #1
   207b4:	add	fp, fp, #1
   207b8:	sub	r9, r9, #1
   207bc:	cmp	r9, #0
   207c0:	movlt	r8, #0
   207c4:	andge	r8, r8, #1
   207c8:	cmp	r8, #0
   207cc:	moveq	r9, #0
   207d0:	mov	r8, r9
   207d4:	cmp	r9, r7
   207d8:	movcc	r9, r7
   207dc:	ldr	r3, [sp, #24]
   207e0:	sub	r3, r3, fp
   207e4:	cmp	r3, r9
   207e8:	bls	1fb68 <__assert_fail@plt+0xddf4>
   207ec:	cmp	r6, #0
   207f0:	beq	20844 <__assert_fail@plt+0xead0>
   207f4:	cmp	r8, r7
   207f8:	bls	20824 <__assert_fail@plt+0xeab0>
   207fc:	sub	r8, r8, r7
   20800:	ldr	r3, [sp, #28]
   20804:	cmp	r3, #43	; 0x2b
   20808:	cmpne	r3, #48	; 0x30
   2080c:	mov	r2, r8
   20810:	moveq	r1, #48	; 0x30
   20814:	movne	r1, #32
   20818:	mov	r0, r6
   2081c:	bl	11be8 <memset@plt>
   20820:	add	r6, r6, r8
   20824:	ldr	r3, [sp, #76]	; 0x4c
   20828:	cmp	r3, #0
   2082c:	beq	1fb78 <__assert_fail@plt+0xde04>
   20830:	mov	r2, r7
   20834:	mov	r1, r5
   20838:	mov	r0, r6
   2083c:	bl	1ef10 <__assert_fail@plt+0xd19c>
   20840:	add	r6, r6, r7
   20844:	add	fp, fp, r9
   20848:	b	1f05c <__assert_fail@plt+0xd2e8>
   2084c:	add	r7, sp, #102	; 0x66
   20850:	sub	r7, r7, r5
   20854:	sub	sl, r9, #1
   20858:	sub	sl, sl, r7
   2085c:	ldr	r3, [sp, #28]
   20860:	subs	r3, r3, #45	; 0x2d
   20864:	movne	r3, #1
   20868:	cmp	sl, #0
   2086c:	movle	r8, #0
   20870:	andgt	r8, r3, #1
   20874:	cmp	r8, #0
   20878:	movne	r3, #43	; 0x2b
   2087c:	strne	r3, [sp, #80]	; 0x50
   20880:	bne	2078c <__assert_fail@plt+0xea18>
   20884:	mov	r2, #43	; 0x2b
   20888:	str	r2, [sp, #80]	; 0x50
   2088c:	mov	sl, #0
   20890:	b	20914 <__assert_fail@plt+0xeba0>
   20894:	movw	r8, #39436	; 0x9a0c
   20898:	movt	r8, #2
   2089c:	ldr	r3, [sp, #1188]	; 0x4a4
   208a0:	str	r3, [sp, #20]
   208a4:	ldr	r3, [sp, #1184]	; 0x4a0
   208a8:	str	r3, [sp, #16]
   208ac:	ldr	r3, [sp, #1180]	; 0x49c
   208b0:	str	r3, [sp, #12]
   208b4:	mov	r7, #4
   208b8:	str	r7, [sp, #8]
   208bc:	mov	r3, #43	; 0x2b
   208c0:	str	r3, [sp, #4]
   208c4:	ldr	r3, [sp, #76]	; 0x4c
   208c8:	str	r3, [sp]
   208cc:	ldr	r3, [sp, #40]	; 0x28
   208d0:	mov	r2, r8
   208d4:	mvn	r1, #0
   208d8:	mov	r0, #0
   208dc:	bl	1ef68 <__assert_fail@plt+0xd1f4>
   208e0:	mov	r5, r0
   208e4:	mov	r9, sl
   208e8:	mov	sl, r8
   208ec:	mov	r3, #43	; 0x2b
   208f0:	str	r3, [sp, #28]
   208f4:	b	1f734 <__assert_fail@plt+0xd9c0>
   208f8:	ldr	r3, [sp, #24]
   208fc:	cmp	r3, fp
   20900:	beq	1fe18 <__assert_fail@plt+0xe0a4>
   20904:	mov	r5, #0
   20908:	b	1fdec <__assert_fail@plt+0xe078>
   2090c:	mov	r2, #45	; 0x2d
   20910:	str	r2, [sp, #80]	; 0x50
   20914:	mov	r8, r3
   20918:	b	2078c <__assert_fail@plt+0xea18>
   2091c:	push	{lr}		; (str lr, [sp, #-4]!)
   20920:	sub	sp, sp, #36	; 0x24
   20924:	mov	ip, #0
   20928:	strb	ip, [sp, #31]
   2092c:	ldr	lr, [sp, #44]	; 0x2c
   20930:	str	lr, [sp, #20]
   20934:	ldr	lr, [sp, #40]	; 0x28
   20938:	str	lr, [sp, #16]
   2093c:	add	lr, sp, #31
   20940:	str	lr, [sp, #12]
   20944:	mvn	lr, #0
   20948:	str	lr, [sp, #8]
   2094c:	str	ip, [sp, #4]
   20950:	str	ip, [sp]
   20954:	bl	1ef68 <__assert_fail@plt+0xd1f4>
   20958:	add	sp, sp, #36	; 0x24
   2095c:	pop	{pc}		; (ldr pc, [sp], #4)
   20960:	str	r4, [sp, #-8]!
   20964:	str	lr, [sp, #4]
   20968:	ldrb	r3, [r0, #40]	; 0x28
   2096c:	tst	r3, #1
   20970:	beq	2098c <__assert_fail@plt+0xec18>
   20974:	ldr	r3, [r0, #28]
   20978:	ldr	r0, [r0, #36]	; 0x24
   2097c:	blx	r3
   20980:	ldr	r4, [sp]
   20984:	add	sp, sp, #4
   20988:	pop	{pc}		; (ldr pc, [sp], #4)
   2098c:	ldr	r3, [r0, #28]
   20990:	mov	r0, r1
   20994:	blx	r3
   20998:	b	20980 <__assert_fail@plt+0xec0c>
   2099c:	str	r4, [sp, #-8]!
   209a0:	str	lr, [sp, #4]
   209a4:	ldrb	r3, [r0, #40]	; 0x28
   209a8:	tst	r3, #1
   209ac:	beq	209c8 <__assert_fail@plt+0xec54>
   209b0:	ldr	r3, [r0, #32]
   209b4:	ldr	r0, [r0, #36]	; 0x24
   209b8:	blx	r3
   209bc:	ldr	r4, [sp]
   209c0:	add	sp, sp, #4
   209c4:	pop	{pc}		; (ldr pc, [sp], #4)
   209c8:	ldr	r3, [r0, #32]
   209cc:	mov	r0, r1
   209d0:	blx	r3
   209d4:	b	209bc <__assert_fail@plt+0xec48>
   209d8:	strd	r4, [sp, #-16]!
   209dc:	str	r6, [sp, #8]
   209e0:	str	lr, [sp, #12]
   209e4:	mov	r4, r0
   209e8:	subs	r5, r2, #0
   209ec:	moveq	r5, #8
   209f0:	movw	r3, #4072	; 0xfe8
   209f4:	cmp	r1, #0
   209f8:	moveq	r1, r3
   209fc:	str	r1, [r0]
   20a00:	sub	r6, r5, #1
   20a04:	str	r6, [r0, #24]
   20a08:	bl	20960 <__assert_fail@plt+0xebec>
   20a0c:	str	r0, [r4, #4]
   20a10:	cmp	r0, #0
   20a14:	beq	20a6c <__assert_fail@plt+0xecf8>
   20a18:	add	r3, r0, #8
   20a1c:	add	r3, r3, r6
   20a20:	rsb	r5, r5, #0
   20a24:	and	r5, r5, r3
   20a28:	str	r5, [r4, #8]
   20a2c:	str	r5, [r4, #12]
   20a30:	ldr	r3, [r4]
   20a34:	add	r3, r0, r3
   20a38:	str	r3, [r0]
   20a3c:	str	r3, [r4, #16]
   20a40:	mov	r2, #0
   20a44:	str	r2, [r0, #4]
   20a48:	ldrb	r3, [r4, #40]	; 0x28
   20a4c:	and	r3, r3, #253	; 0xfd
   20a50:	bfi	r3, r2, #2, #1
   20a54:	strb	r3, [r4, #40]	; 0x28
   20a58:	mov	r0, #1
   20a5c:	ldrd	r4, [sp]
   20a60:	ldr	r6, [sp, #8]
   20a64:	add	sp, sp, #12
   20a68:	pop	{pc}		; (ldr pc, [sp], #4)
   20a6c:	movw	r3, #45768	; 0xb2c8
   20a70:	movt	r3, #3
   20a74:	ldr	r3, [r3]
   20a78:	blx	r3
   20a7c:	str	r4, [sp, #-8]!
   20a80:	str	lr, [sp, #4]
   20a84:	movw	r3, #45856	; 0xb320
   20a88:	movt	r3, #3
   20a8c:	ldr	r4, [r3]
   20a90:	mov	r2, #5
   20a94:	movw	r1, #39468	; 0x9a2c
   20a98:	movt	r1, #2
   20a9c:	mov	r0, #0
   20aa0:	bl	11984 <dcgettext@plt>
   20aa4:	mov	r3, r0
   20aa8:	movw	r2, #39752	; 0x9b48
   20aac:	movt	r2, #2
   20ab0:	mov	r1, #1
   20ab4:	mov	r0, r4
   20ab8:	bl	11c18 <__fprintf_chk@plt>
   20abc:	movw	r3, #45764	; 0xb2c4
   20ac0:	movt	r3, #3
   20ac4:	ldr	r0, [r3]
   20ac8:	bl	11b70 <exit@plt>

00020acc <_obstack_begin@@Base>:
   20acc:	str	r4, [sp, #-8]!
   20ad0:	str	lr, [sp, #4]
   20ad4:	str	r3, [r0, #28]
   20ad8:	ldr	r3, [sp, #8]
   20adc:	str	r3, [r0, #32]
   20ae0:	ldrb	r3, [r0, #40]	; 0x28
   20ae4:	bfc	r3, #0, #1
   20ae8:	strb	r3, [r0, #40]	; 0x28
   20aec:	bl	209d8 <__assert_fail@plt+0xec64>
   20af0:	ldr	r4, [sp]
   20af4:	add	sp, sp, #4
   20af8:	pop	{pc}		; (ldr pc, [sp], #4)

00020afc <_obstack_begin_1@@Base>:
   20afc:	str	r4, [sp, #-8]!
   20b00:	str	lr, [sp, #4]
   20b04:	str	r3, [r0, #28]
   20b08:	ldr	r3, [sp, #8]
   20b0c:	str	r3, [r0, #32]
   20b10:	ldr	r3, [sp, #12]
   20b14:	str	r3, [r0, #36]	; 0x24
   20b18:	ldrb	r3, [r0, #40]	; 0x28
   20b1c:	orr	r3, r3, #1
   20b20:	strb	r3, [r0, #40]	; 0x28
   20b24:	bl	209d8 <__assert_fail@plt+0xec64>
   20b28:	ldr	r4, [sp]
   20b2c:	add	sp, sp, #4
   20b30:	pop	{pc}		; (ldr pc, [sp], #4)

00020b34 <_obstack_newchunk@@Base>:
   20b34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20b38:	strd	r6, [sp, #8]
   20b3c:	str	r8, [sp, #16]
   20b40:	str	lr, [sp, #20]
   20b44:	ldr	r7, [r0, #4]
   20b48:	ldr	r6, [r0, #12]
   20b4c:	ldr	r3, [r0, #8]
   20b50:	sub	r6, r6, r3
   20b54:	add	r1, r6, r1
   20b58:	ldr	r2, [r0, #24]
   20b5c:	add	r2, r1, r2
   20b60:	add	r5, r2, r6, lsr #3
   20b64:	add	r5, r5, #100	; 0x64
   20b68:	ldr	r3, [r0]
   20b6c:	cmp	r2, r3
   20b70:	movcs	r3, r2
   20b74:	cmp	r3, r5
   20b78:	movcs	r5, r3
   20b7c:	cmp	r6, r1
   20b80:	cmpls	r1, r2
   20b84:	bhi	20c24 <_obstack_newchunk@@Base+0xf0>
   20b88:	mov	r4, r0
   20b8c:	mov	r1, r5
   20b90:	bl	20960 <__assert_fail@plt+0xebec>
   20b94:	subs	r8, r0, #0
   20b98:	beq	20c24 <_obstack_newchunk@@Base+0xf0>
   20b9c:	str	r8, [r4, #4]
   20ba0:	str	r7, [r8, #4]
   20ba4:	add	r3, r8, r5
   20ba8:	str	r3, [r4, #16]
   20bac:	mov	r5, r8
   20bb0:	str	r3, [r5], #8
   20bb4:	ldr	r3, [r4, #24]
   20bb8:	add	r5, r5, r3
   20bbc:	bic	r5, r5, r3
   20bc0:	mov	r2, r6
   20bc4:	ldr	r1, [r4, #8]
   20bc8:	mov	r0, r5
   20bcc:	bl	11930 <memcpy@plt>
   20bd0:	ldrb	r3, [r4, #40]	; 0x28
   20bd4:	tst	r3, #2
   20bd8:	bne	20bf8 <_obstack_newchunk@@Base+0xc4>
   20bdc:	ldr	r2, [r4, #24]
   20be0:	add	r3, r7, #8
   20be4:	add	r3, r3, r2
   20be8:	bic	r3, r3, r2
   20bec:	ldr	r2, [r4, #8]
   20bf0:	cmp	r2, r3
   20bf4:	beq	20c34 <_obstack_newchunk@@Base+0x100>
   20bf8:	str	r5, [r4, #8]
   20bfc:	add	r5, r5, r6
   20c00:	str	r5, [r4, #12]
   20c04:	ldrb	r3, [r4, #40]	; 0x28
   20c08:	bfc	r3, #1, #1
   20c0c:	strb	r3, [r4, #40]	; 0x28
   20c10:	ldrd	r4, [sp]
   20c14:	ldrd	r6, [sp, #8]
   20c18:	ldr	r8, [sp, #16]
   20c1c:	add	sp, sp, #20
   20c20:	pop	{pc}		; (ldr pc, [sp], #4)
   20c24:	movw	r3, #45768	; 0xb2c8
   20c28:	movt	r3, #3
   20c2c:	ldr	r3, [r3]
   20c30:	blx	r3
   20c34:	ldr	r3, [r7, #4]
   20c38:	str	r3, [r8, #4]
   20c3c:	mov	r1, r7
   20c40:	mov	r0, r4
   20c44:	bl	2099c <__assert_fail@plt+0xec28>
   20c48:	b	20bf8 <_obstack_newchunk@@Base+0xc4>

00020c4c <_obstack_allocated_p@@Base>:
   20c4c:	ldr	r0, [r0, #4]
   20c50:	cmp	r0, #0
   20c54:	bne	20c68 <_obstack_allocated_p@@Base+0x1c>
   20c58:	b	20c7c <_obstack_allocated_p@@Base+0x30>
   20c5c:	ldr	r0, [r0, #4]
   20c60:	cmp	r0, #0
   20c64:	beq	20c7c <_obstack_allocated_p@@Base+0x30>
   20c68:	cmp	r1, r0
   20c6c:	bls	20c5c <_obstack_allocated_p@@Base+0x10>
   20c70:	ldr	r3, [r0]
   20c74:	cmp	r3, r1
   20c78:	bcc	20c5c <_obstack_allocated_p@@Base+0x10>
   20c7c:	adds	r0, r0, #0
   20c80:	movne	r0, #1
   20c84:	bx	lr

00020c88 <_obstack_free@@Base>:
   20c88:	strd	r4, [sp, #-16]!
   20c8c:	str	r6, [sp, #8]
   20c90:	str	lr, [sp, #12]
   20c94:	mov	r4, r0
   20c98:	mov	r6, r1
   20c9c:	ldr	r1, [r0, #4]
   20ca0:	cmp	r1, #0
   20ca4:	bne	20cd8 <_obstack_free@@Base+0x50>
   20ca8:	cmp	r6, #0
   20cac:	beq	20d00 <_obstack_free@@Base+0x78>
   20cb0:	bl	11d2c <abort@plt>
   20cb4:	ldr	r5, [r1, #4]
   20cb8:	mov	r0, r4
   20cbc:	bl	2099c <__assert_fail@plt+0xec28>
   20cc0:	ldrb	r3, [r4, #40]	; 0x28
   20cc4:	orr	r3, r3, #2
   20cc8:	strb	r3, [r4, #40]	; 0x28
   20ccc:	mov	r1, r5
   20cd0:	cmp	r5, #0
   20cd4:	beq	20ca8 <_obstack_free@@Base+0x20>
   20cd8:	cmp	r6, r1
   20cdc:	bls	20cb4 <_obstack_free@@Base+0x2c>
   20ce0:	ldr	r3, [r1]
   20ce4:	cmp	r3, r6
   20ce8:	bcc	20cb4 <_obstack_free@@Base+0x2c>
   20cec:	str	r6, [r4, #12]
   20cf0:	str	r6, [r4, #8]
   20cf4:	ldr	r3, [r1]
   20cf8:	str	r3, [r4, #16]
   20cfc:	str	r1, [r4, #4]
   20d00:	ldrd	r4, [sp]
   20d04:	ldr	r6, [sp, #8]
   20d08:	add	sp, sp, #12
   20d0c:	pop	{pc}		; (ldr pc, [sp], #4)

00020d10 <_obstack_memory_used@@Base>:
   20d10:	ldr	r3, [r0, #4]
   20d14:	cmp	r3, #0
   20d18:	beq	20d3c <_obstack_memory_used@@Base+0x2c>
   20d1c:	mov	r0, #0
   20d20:	ldr	r2, [r3]
   20d24:	sub	r2, r2, r3
   20d28:	add	r0, r0, r2
   20d2c:	ldr	r3, [r3, #4]
   20d30:	cmp	r3, #0
   20d34:	bne	20d20 <_obstack_memory_used@@Base+0x10>
   20d38:	bx	lr
   20d3c:	mov	r0, #0
   20d40:	bx	lr
   20d44:	strd	r4, [sp, #-16]!
   20d48:	str	r6, [sp, #8]
   20d4c:	str	lr, [sp, #12]
   20d50:	subs	r4, r0, #0
   20d54:	beq	20df0 <_obstack_memory_used@@Base+0xe0>
   20d58:	mov	r1, #47	; 0x2f
   20d5c:	mov	r0, r4
   20d60:	bl	11c78 <strrchr@plt>
   20d64:	subs	r5, r0, #0
   20d68:	beq	20dc8 <_obstack_memory_used@@Base+0xb8>
   20d6c:	add	r6, r5, #1
   20d70:	sub	r3, r6, r4
   20d74:	cmp	r3, #6
   20d78:	ble	20dc8 <_obstack_memory_used@@Base+0xb8>
   20d7c:	mov	r2, #7
   20d80:	movw	r1, #39544	; 0x9a78
   20d84:	movt	r1, #2
   20d88:	sub	r0, r5, #6
   20d8c:	bl	11d20 <strncmp@plt>
   20d90:	cmp	r0, #0
   20d94:	bne	20dc8 <_obstack_memory_used@@Base+0xb8>
   20d98:	mov	r2, #3
   20d9c:	movw	r1, #39552	; 0x9a80
   20da0:	movt	r1, #2
   20da4:	mov	r0, r6
   20da8:	bl	11d20 <strncmp@plt>
   20dac:	cmp	r0, #0
   20db0:	movne	r4, r6
   20db4:	bne	20dc8 <_obstack_memory_used@@Base+0xb8>
   20db8:	add	r4, r5, #4
   20dbc:	movw	r3, #45840	; 0xb310
   20dc0:	movt	r3, #3
   20dc4:	str	r4, [r3]
   20dc8:	movw	r3, #50148	; 0xc3e4
   20dcc:	movt	r3, #3
   20dd0:	str	r4, [r3]
   20dd4:	movw	r3, #45844	; 0xb314
   20dd8:	movt	r3, #3
   20ddc:	str	r4, [r3]
   20de0:	ldrd	r4, [sp]
   20de4:	ldr	r6, [sp, #8]
   20de8:	add	sp, sp, #12
   20dec:	pop	{pc}		; (ldr pc, [sp], #4)
   20df0:	movw	r3, #45856	; 0xb320
   20df4:	movt	r3, #3
   20df8:	ldr	r3, [r3]
   20dfc:	mov	r2, #55	; 0x37
   20e00:	mov	r1, #1
   20e04:	movw	r0, #39488	; 0x9a40
   20e08:	movt	r0, #2
   20e0c:	bl	11a2c <fwrite@plt>
   20e10:	bl	11d2c <abort@plt>
   20e14:	mov	r2, #0
   20e18:	mov	r3, #0
   20e1c:	strd	r2, [r0]
   20e20:	strd	r2, [r0, #8]
   20e24:	strd	r2, [r0, #16]
   20e28:	strd	r2, [r0, #24]
   20e2c:	strd	r2, [r0, #32]
   20e30:	strd	r2, [r0, #40]	; 0x28
   20e34:	cmp	r1, #10
   20e38:	beq	20e44 <_obstack_memory_used@@Base+0x134>
   20e3c:	str	r1, [r0]
   20e40:	bx	lr
   20e44:	str	r4, [sp, #-8]!
   20e48:	str	lr, [sp, #4]
   20e4c:	bl	11d2c <abort@plt>
   20e50:	strd	r4, [sp, #-16]!
   20e54:	str	r6, [sp, #8]
   20e58:	str	lr, [sp, #12]
   20e5c:	mov	r5, r0
   20e60:	mov	r6, r1
   20e64:	mov	r2, #5
   20e68:	mov	r1, r0
   20e6c:	mov	r0, #0
   20e70:	bl	11984 <dcgettext@plt>
   20e74:	mov	r4, r0
   20e78:	cmp	r5, r0
   20e7c:	beq	20e94 <_obstack_memory_used@@Base+0x184>
   20e80:	mov	r0, r4
   20e84:	ldrd	r4, [sp]
   20e88:	ldr	r6, [sp, #8]
   20e8c:	add	sp, sp, #12
   20e90:	pop	{pc}		; (ldr pc, [sp], #4)
   20e94:	bl	25100 <_obstack_memory_used@@Base+0x43f0>
   20e98:	ldrb	r3, [r0]
   20e9c:	bic	r3, r3, #32
   20ea0:	cmp	r3, #85	; 0x55
   20ea4:	bne	20f28 <_obstack_memory_used@@Base+0x218>
   20ea8:	ldrb	r3, [r0, #1]
   20eac:	bic	r3, r3, #32
   20eb0:	cmp	r3, #84	; 0x54
   20eb4:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20eb8:	ldrb	r3, [r0, #2]
   20ebc:	bic	r3, r3, #32
   20ec0:	cmp	r3, #70	; 0x46
   20ec4:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20ec8:	ldrb	r3, [r0, #3]
   20ecc:	cmp	r3, #45	; 0x2d
   20ed0:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20ed4:	ldrb	r3, [r0, #4]
   20ed8:	cmp	r3, #56	; 0x38
   20edc:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20ee0:	ldrb	r3, [r0, #5]
   20ee4:	cmp	r3, #0
   20ee8:	beq	20f08 <_obstack_memory_used@@Base+0x1f8>
   20eec:	movw	r4, #39640	; 0x9ad8
   20ef0:	movt	r4, #2
   20ef4:	movw	r3, #39660	; 0x9aec
   20ef8:	movt	r3, #2
   20efc:	cmp	r6, #9
   20f00:	movne	r4, r3
   20f04:	b	20e80 <_obstack_memory_used@@Base+0x170>
   20f08:	ldrb	r2, [r4]
   20f0c:	movw	r4, #39656	; 0x9ae8
   20f10:	movt	r4, #2
   20f14:	movw	r3, #39644	; 0x9adc
   20f18:	movt	r3, #2
   20f1c:	cmp	r2, #96	; 0x60
   20f20:	movne	r4, r3
   20f24:	b	20e80 <_obstack_memory_used@@Base+0x170>
   20f28:	cmp	r3, #71	; 0x47
   20f2c:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f30:	ldrb	r3, [r0, #1]
   20f34:	bic	r3, r3, #32
   20f38:	cmp	r3, #66	; 0x42
   20f3c:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f40:	ldrb	r3, [r0, #2]
   20f44:	cmp	r3, #49	; 0x31
   20f48:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f4c:	ldrb	r3, [r0, #3]
   20f50:	cmp	r3, #56	; 0x38
   20f54:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f58:	ldrb	r3, [r0, #4]
   20f5c:	cmp	r3, #48	; 0x30
   20f60:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f64:	ldrb	r3, [r0, #5]
   20f68:	cmp	r3, #51	; 0x33
   20f6c:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f70:	ldrb	r3, [r0, #6]
   20f74:	cmp	r3, #48	; 0x30
   20f78:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f7c:	ldrb	r3, [r0, #7]
   20f80:	cmp	r3, #0
   20f84:	bne	20eec <_obstack_memory_used@@Base+0x1dc>
   20f88:	ldrb	r2, [r4]
   20f8c:	movw	r4, #39652	; 0x9ae4
   20f90:	movt	r4, #2
   20f94:	movw	r3, #39648	; 0x9ae0
   20f98:	movt	r3, #2
   20f9c:	cmp	r2, #96	; 0x60
   20fa0:	movne	r4, r3
   20fa4:	b	20e80 <_obstack_memory_used@@Base+0x170>
   20fa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20fac:	strd	r6, [sp, #8]
   20fb0:	strd	r8, [sp, #16]
   20fb4:	strd	sl, [sp, #24]
   20fb8:	str	lr, [sp, #32]
   20fbc:	sub	sp, sp, #116	; 0x74
   20fc0:	str	r0, [sp, #64]	; 0x40
   20fc4:	mov	r8, r1
   20fc8:	str	r2, [sp, #48]	; 0x30
   20fcc:	str	r3, [sp, #24]
   20fd0:	ldr	r7, [sp, #152]	; 0x98
   20fd4:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   20fd8:	str	r0, [sp, #76]	; 0x4c
   20fdc:	ldr	r3, [sp, #156]	; 0x9c
   20fe0:	ubfx	r3, r3, #1, #1
   20fe4:	str	r3, [sp, #32]
   20fe8:	mov	r3, #1
   20fec:	str	r3, [sp, #40]	; 0x28
   20ff0:	mov	r3, #0
   20ff4:	str	r3, [sp, #68]	; 0x44
   20ff8:	str	r3, [sp, #36]	; 0x24
   20ffc:	str	r3, [sp, #28]
   21000:	str	r3, [sp, #52]	; 0x34
   21004:	str	r3, [sp, #60]	; 0x3c
   21008:	str	r3, [sp, #72]	; 0x48
   2100c:	movw	r3, #39664	; 0x9af0
   21010:	movt	r3, #2
   21014:	str	r3, [sp, #80]	; 0x50
   21018:	mov	r9, r8
   2101c:	mov	sl, r7
   21020:	cmp	sl, #10
   21024:	ldrls	pc, [pc, sl, lsl #2]
   21028:	b	211ec <_obstack_memory_used@@Base+0x4dc>
   2102c:	andeq	r1, r2, ip, lsl #1
   21030:	andeq	r1, r2, r0, rrx
   21034:	andeq	r1, r2, r4, asr #3
   21038:	andeq	r1, r2, r8, asr r0
   2103c:	andeq	r1, r2, r8, ror r1
   21040:	muleq	r2, ip, r0
   21044:	andeq	r2, r2, r8, ror #8
   21048:	strdeq	r1, [r2], -r0
   2104c:	ldrdeq	r1, [r2], -r8
   21050:	ldrdeq	r1, [r2], -r8
   21054:	ldrdeq	r1, [r2], -r8
   21058:	mov	r3, #1
   2105c:	str	r3, [sp, #28]
   21060:	mov	r3, #1
   21064:	str	r3, [sp, #32]
   21068:	str	r3, [sp, #52]	; 0x34
   2106c:	movw	r3, #39660	; 0x9aec
   21070:	movt	r3, #2
   21074:	str	r3, [sp, #60]	; 0x3c
   21078:	mov	fp, #0
   2107c:	mov	sl, #2
   21080:	mov	r6, #0
   21084:	ldr	r8, [sp, #64]	; 0x40
   21088:	b	21900 <_obstack_memory_used@@Base+0xbf0>
   2108c:	mov	fp, sl
   21090:	mov	r3, #0
   21094:	str	r3, [sp, #32]
   21098:	b	21080 <_obstack_memory_used@@Base+0x370>
   2109c:	ldr	r3, [sp, #32]
   210a0:	cmp	r3, #0
   210a4:	bne	21204 <_obstack_memory_used@@Base+0x4f4>
   210a8:	cmp	r9, #0
   210ac:	beq	21228 <_obstack_memory_used@@Base+0x518>
   210b0:	mov	r3, #34	; 0x22
   210b4:	ldr	r2, [sp, #64]	; 0x40
   210b8:	strb	r3, [r2]
   210bc:	mov	fp, #1
   210c0:	str	fp, [sp, #28]
   210c4:	str	fp, [sp, #52]	; 0x34
   210c8:	movw	r3, #39640	; 0x9ad8
   210cc:	movt	r3, #2
   210d0:	str	r3, [sp, #60]	; 0x3c
   210d4:	b	21080 <_obstack_memory_used@@Base+0x370>
   210d8:	cmp	sl, #10
   210dc:	bne	21110 <_obstack_memory_used@@Base+0x400>
   210e0:	ldr	r3, [sp, #32]
   210e4:	cmp	r3, #0
   210e8:	movne	fp, #0
   210ec:	beq	21138 <_obstack_memory_used@@Base+0x428>
   210f0:	ldr	r0, [sp, #168]	; 0xa8
   210f4:	bl	11b94 <strlen@plt>
   210f8:	str	r0, [sp, #52]	; 0x34
   210fc:	ldr	r3, [sp, #168]	; 0xa8
   21100:	str	r3, [sp, #60]	; 0x3c
   21104:	mov	r3, #1
   21108:	str	r3, [sp, #28]
   2110c:	b	21080 <_obstack_memory_used@@Base+0x370>
   21110:	mov	r1, sl
   21114:	ldr	r0, [sp, #80]	; 0x50
   21118:	bl	20e50 <_obstack_memory_used@@Base+0x140>
   2111c:	str	r0, [sp, #164]	; 0xa4
   21120:	mov	r1, sl
   21124:	movw	r0, #39660	; 0x9aec
   21128:	movt	r0, #2
   2112c:	bl	20e50 <_obstack_memory_used@@Base+0x140>
   21130:	str	r0, [sp, #168]	; 0xa8
   21134:	b	210e0 <_obstack_memory_used@@Base+0x3d0>
   21138:	ldr	r3, [sp, #164]	; 0xa4
   2113c:	ldrb	r3, [r3]
   21140:	cmp	r3, #0
   21144:	beq	21170 <_obstack_memory_used@@Base+0x460>
   21148:	ldr	r2, [sp, #164]	; 0xa4
   2114c:	mov	fp, #0
   21150:	ldr	r1, [sp, #64]	; 0x40
   21154:	cmp	r9, fp
   21158:	strbhi	r3, [r1, fp]
   2115c:	add	fp, fp, #1
   21160:	ldrb	r3, [r2, #1]!
   21164:	cmp	r3, #0
   21168:	bne	21154 <_obstack_memory_used@@Base+0x444>
   2116c:	b	210f0 <_obstack_memory_used@@Base+0x3e0>
   21170:	mov	fp, #0
   21174:	b	210f0 <_obstack_memory_used@@Base+0x3e0>
   21178:	ldr	r3, [sp, #32]
   2117c:	cmp	r3, #0
   21180:	bne	21060 <_obstack_memory_used@@Base+0x350>
   21184:	mov	r3, #1
   21188:	str	r3, [sp, #28]
   2118c:	cmp	r9, #0
   21190:	beq	21244 <_obstack_memory_used@@Base+0x534>
   21194:	mov	r3, #39	; 0x27
   21198:	ldr	r2, [sp, #64]	; 0x40
   2119c:	strb	r3, [r2]
   211a0:	mov	r3, #0
   211a4:	str	r3, [sp, #32]
   211a8:	mov	fp, #1
   211ac:	str	fp, [sp, #52]	; 0x34
   211b0:	movw	r3, #39660	; 0x9aec
   211b4:	movt	r3, #2
   211b8:	str	r3, [sp, #60]	; 0x3c
   211bc:	mov	sl, #2
   211c0:	b	21080 <_obstack_memory_used@@Base+0x370>
   211c4:	ldr	r3, [sp, #32]
   211c8:	cmp	r3, #0
   211cc:	beq	2118c <_obstack_memory_used@@Base+0x47c>
   211d0:	mov	r3, #1
   211d4:	str	r3, [sp, #52]	; 0x34
   211d8:	movw	r3, #39660	; 0x9aec
   211dc:	movt	r3, #2
   211e0:	str	r3, [sp, #60]	; 0x3c
   211e4:	mov	fp, #0
   211e8:	b	21080 <_obstack_memory_used@@Base+0x370>
   211ec:	bl	11d2c <abort@plt>
   211f0:	mov	fp, #0
   211f4:	str	fp, [sp, #32]
   211f8:	mov	r3, #1
   211fc:	str	r3, [sp, #28]
   21200:	b	21080 <_obstack_memory_used@@Base+0x370>
   21204:	ldr	r3, [sp, #32]
   21208:	str	r3, [sp, #28]
   2120c:	mov	r3, #1
   21210:	str	r3, [sp, #52]	; 0x34
   21214:	movw	r3, #39640	; 0x9ad8
   21218:	movt	r3, #2
   2121c:	str	r3, [sp, #60]	; 0x3c
   21220:	mov	fp, #0
   21224:	b	21080 <_obstack_memory_used@@Base+0x370>
   21228:	mov	fp, #1
   2122c:	str	fp, [sp, #28]
   21230:	str	fp, [sp, #52]	; 0x34
   21234:	movw	r3, #39640	; 0x9ad8
   21238:	movt	r3, #2
   2123c:	str	r3, [sp, #60]	; 0x3c
   21240:	b	21080 <_obstack_memory_used@@Base+0x370>
   21244:	mov	r3, #0
   21248:	str	r3, [sp, #32]
   2124c:	mov	fp, #1
   21250:	str	fp, [sp, #52]	; 0x34
   21254:	movw	r3, #39660	; 0x9aec
   21258:	movt	r3, #2
   2125c:	str	r3, [sp, #60]	; 0x3c
   21260:	mov	sl, #2
   21264:	b	21080 <_obstack_memory_used@@Base+0x370>
   21268:	mov	r3, r2
   2126c:	add	r4, r6, r2
   21270:	ldr	r2, [sp, #24]
   21274:	cmp	r3, #1
   21278:	movls	r3, #0
   2127c:	movhi	r3, #1
   21280:	cmn	r2, #1
   21284:	movne	r3, #0
   21288:	cmp	r3, #0
   2128c:	beq	2129c <_obstack_memory_used@@Base+0x58c>
   21290:	ldr	r0, [sp, #48]	; 0x30
   21294:	bl	11b94 <strlen@plt>
   21298:	str	r0, [sp, #24]
   2129c:	ldr	r3, [sp, #24]
   212a0:	cmp	r4, r3
   212a4:	bhi	22490 <_obstack_memory_used@@Base+0x1780>
   212a8:	ldr	r3, [sp, #48]	; 0x30
   212ac:	add	r4, r3, r6
   212b0:	ldr	r2, [sp, #52]	; 0x34
   212b4:	ldr	r1, [sp, #60]	; 0x3c
   212b8:	mov	r0, r4
   212bc:	bl	1196c <memcmp@plt>
   212c0:	cmp	r0, #0
   212c4:	bne	22490 <_obstack_memory_used@@Base+0x1780>
   212c8:	ldr	r3, [sp, #32]
   212cc:	cmp	r3, #0
   212d0:	bne	214e0 <_obstack_memory_used@@Base+0x7d0>
   212d4:	ldrb	r4, [r4]
   212d8:	cmp	r4, #126	; 0x7e
   212dc:	ldrls	pc, [pc, r4, lsl #2]
   212e0:	b	21d94 <_obstack_memory_used@@Base+0x1084>
   212e4:	andeq	r1, r2, r4, lsr #10
   212e8:	muleq	r2, r4, sp
   212ec:	muleq	r2, r4, sp
   212f0:	muleq	r2, r4, sp
   212f4:	muleq	r2, r4, sp
   212f8:	muleq	r2, r4, sp
   212fc:	muleq	r2, r4, sp
   21300:	andeq	r1, r2, ip, lsr ip
   21304:	andeq	r1, r2, r0, asr #15
   21308:	andeq	r1, r2, r4, ror #22
   2130c:	andeq	r1, r2, r0, lsl ip
   21310:	andeq	r1, r2, r8, ror fp
   21314:	ldrdeq	r1, [r2], -r4
   21318:	andeq	r1, r2, r8, ror #15
   2131c:	muleq	r2, r4, sp
   21320:	muleq	r2, r4, sp
   21324:	muleq	r2, r4, sp
   21328:	muleq	r2, r4, sp
   2132c:	muleq	r2, r4, sp
   21330:	muleq	r2, r4, sp
   21334:	muleq	r2, r4, sp
   21338:	muleq	r2, r4, sp
   2133c:	muleq	r2, r4, sp
   21340:	muleq	r2, r4, sp
   21344:	muleq	r2, r4, sp
   21348:	muleq	r2, r4, sp
   2134c:	muleq	r2, r4, sp
   21350:	muleq	r2, r4, sp
   21354:	muleq	r2, r4, sp
   21358:	muleq	r2, r4, sp
   2135c:	muleq	r2, r4, sp
   21360:	muleq	r2, r4, sp
   21364:			; <UNDEFINED> instruction: 0x00021cb0
   21368:	ldrdeq	r1, [r2], -r4
   2136c:	ldrdeq	r1, [r2], -r4
   21370:	andeq	r1, r2, ip, ror #24
   21374:	ldrdeq	r1, [r2], -r4
   21378:	strdeq	r2, [r2], -r4
   2137c:	ldrdeq	r1, [r2], -r4
   21380:	strdeq	r1, [r2], -r4
   21384:	ldrdeq	r1, [r2], -r4
   21388:	ldrdeq	r1, [r2], -r4
   2138c:	ldrdeq	r1, [r2], -r4
   21390:	strdeq	r2, [r2], -r4
   21394:	strdeq	r2, [r2], -r4
   21398:	strdeq	r2, [r2], -r4
   2139c:	strdeq	r2, [r2], -r4
   213a0:	strdeq	r2, [r2], -r4
   213a4:	strdeq	r2, [r2], -r4
   213a8:	strdeq	r2, [r2], -r4
   213ac:	strdeq	r2, [r2], -r4
   213b0:	strdeq	r2, [r2], -r4
   213b4:	strdeq	r2, [r2], -r4
   213b8:	strdeq	r2, [r2], -r4
   213bc:	strdeq	r2, [r2], -r4
   213c0:	strdeq	r2, [r2], -r4
   213c4:	strdeq	r2, [r2], -r4
   213c8:	strdeq	r2, [r2], -r4
   213cc:	strdeq	r2, [r2], -r4
   213d0:	ldrdeq	r1, [r2], -r4
   213d4:	ldrdeq	r1, [r2], -r4
   213d8:	ldrdeq	r1, [r2], -r4
   213dc:	ldrdeq	r1, [r2], -r4
   213e0:	andeq	r1, r2, r4, asr r6
   213e4:	muleq	r2, r4, sp
   213e8:	strdeq	r2, [r2], -r4
   213ec:	strdeq	r2, [r2], -r4
   213f0:	strdeq	r2, [r2], -r4
   213f4:	strdeq	r2, [r2], -r4
   213f8:	strdeq	r2, [r2], -r4
   213fc:	strdeq	r2, [r2], -r4
   21400:	strdeq	r2, [r2], -r4
   21404:	strdeq	r2, [r2], -r4
   21408:	strdeq	r2, [r2], -r4
   2140c:	strdeq	r2, [r2], -r4
   21410:	strdeq	r2, [r2], -r4
   21414:	strdeq	r2, [r2], -r4
   21418:	strdeq	r2, [r2], -r4
   2141c:	strdeq	r2, [r2], -r4
   21420:	strdeq	r2, [r2], -r4
   21424:	strdeq	r2, [r2], -r4
   21428:	strdeq	r2, [r2], -r4
   2142c:	strdeq	r2, [r2], -r4
   21430:	strdeq	r2, [r2], -r4
   21434:	strdeq	r2, [r2], -r4
   21438:	strdeq	r2, [r2], -r4
   2143c:	strdeq	r2, [r2], -r4
   21440:	strdeq	r2, [r2], -r4
   21444:	strdeq	r2, [r2], -r4
   21448:	strdeq	r2, [r2], -r4
   2144c:	strdeq	r2, [r2], -r4
   21450:	ldrdeq	r1, [r2], -r4
   21454:	andeq	r1, r2, ip, lsl #23
   21458:	strdeq	r2, [r2], -r4
   2145c:	ldrdeq	r1, [r2], -r4
   21460:	strdeq	r2, [r2], -r4
   21464:	ldrdeq	r1, [r2], -r4
   21468:	strdeq	r2, [r2], -r4
   2146c:	strdeq	r2, [r2], -r4
   21470:	strdeq	r2, [r2], -r4
   21474:	strdeq	r2, [r2], -r4
   21478:	strdeq	r2, [r2], -r4
   2147c:	strdeq	r2, [r2], -r4
   21480:	strdeq	r2, [r2], -r4
   21484:	strdeq	r2, [r2], -r4
   21488:	strdeq	r2, [r2], -r4
   2148c:	strdeq	r2, [r2], -r4
   21490:	strdeq	r2, [r2], -r4
   21494:	strdeq	r2, [r2], -r4
   21498:	strdeq	r2, [r2], -r4
   2149c:	strdeq	r2, [r2], -r4
   214a0:	strdeq	r2, [r2], -r4
   214a4:	strdeq	r2, [r2], -r4
   214a8:	strdeq	r2, [r2], -r4
   214ac:	strdeq	r2, [r2], -r4
   214b0:	strdeq	r2, [r2], -r4
   214b4:	strdeq	r2, [r2], -r4
   214b8:	strdeq	r2, [r2], -r4
   214bc:	strdeq	r2, [r2], -r4
   214c0:	strdeq	r2, [r2], -r4
   214c4:	strdeq	r2, [r2], -r4
   214c8:	strdeq	r2, [r2], -r4
   214cc:	strdeq	r2, [r2], -r4
   214d0:	andeq	r1, r2, ip, asr #24
   214d4:	ldrdeq	r1, [r2], -r4
   214d8:	andeq	r1, r2, ip, asr #24
   214dc:	andeq	r1, r2, ip, ror #24
   214e0:	mov	r8, r9
   214e4:	mov	r7, sl
   214e8:	b	223e8 <_obstack_memory_used@@Base+0x16d8>
   214ec:	ldr	r3, [sp, #28]
   214f0:	cmp	r3, #0
   214f4:	bne	21514 <_obstack_memory_used@@Base+0x804>
   214f8:	ldr	r3, [sp, #156]	; 0x9c
   214fc:	tst	r3, #1
   21500:	bne	218fc <_obstack_memory_used@@Base+0xbec>
   21504:	ldr	r3, [sp, #28]
   21508:	str	r3, [sp, #44]	; 0x2c
   2150c:	mov	r5, r3
   21510:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   21514:	ldr	r3, [sp, #32]
   21518:	cmp	r3, #0
   2151c:	bne	22398 <_obstack_memory_used@@Base+0x1688>
   21520:	str	r3, [sp, #44]	; 0x2c
   21524:	ldr	r3, [sp, #36]	; 0x24
   21528:	eor	r3, r3, #1
   2152c:	cmp	sl, #2
   21530:	movne	r3, #0
   21534:	andeq	r3, r3, #1
   21538:	cmp	r3, #0
   2153c:	beq	21594 <_obstack_memory_used@@Base+0x884>
   21540:	cmp	r9, fp
   21544:	movhi	r2, #39	; 0x27
   21548:	strbhi	r2, [r8, fp]
   2154c:	add	r2, fp, #1
   21550:	cmp	r9, r2
   21554:	movhi	r1, #36	; 0x24
   21558:	strbhi	r1, [r8, r2]
   2155c:	add	r2, fp, #2
   21560:	cmp	r9, r2
   21564:	movhi	r1, #39	; 0x27
   21568:	strbhi	r1, [r8, r2]
   2156c:	add	r2, fp, #3
   21570:	cmp	r9, r2
   21574:	bls	22454 <_obstack_memory_used@@Base+0x1744>
   21578:	mov	r1, #92	; 0x5c
   2157c:	strb	r1, [r8, r2]
   21580:	add	fp, fp, #4
   21584:	str	r3, [sp, #36]	; 0x24
   21588:	mov	r5, #0
   2158c:	mov	r4, #48	; 0x30
   21590:	b	21868 <_obstack_memory_used@@Base+0xb58>
   21594:	cmp	r9, fp
   21598:	bhi	215c0 <_obstack_memory_used@@Base+0x8b0>
   2159c:	add	r1, fp, #1
   215a0:	ldr	r2, [sp, #56]	; 0x38
   215a4:	cmp	r2, #0
   215a8:	bne	215e8 <_obstack_memory_used@@Base+0x8d8>
   215ac:	mov	r3, r5
   215b0:	ldr	r5, [sp, #56]	; 0x38
   215b4:	mov	fp, r1
   215b8:	mov	r4, #48	; 0x30
   215bc:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   215c0:	mov	r2, #92	; 0x5c
   215c4:	strb	r2, [r8, fp]
   215c8:	add	r1, fp, #1
   215cc:	ldr	r2, [sp, #56]	; 0x38
   215d0:	cmp	r2, #0
   215d4:	moveq	r3, r5
   215d8:	moveq	r5, r2
   215dc:	moveq	fp, r1
   215e0:	moveq	r4, #48	; 0x30
   215e4:	beq	21868 <_obstack_memory_used@@Base+0xb58>
   215e8:	add	r2, r6, #1
   215ec:	ldr	r0, [sp, #24]
   215f0:	cmp	r2, r0
   215f4:	bcs	21610 <_obstack_memory_used@@Base+0x900>
   215f8:	ldr	r0, [sp, #48]	; 0x30
   215fc:	ldrb	r2, [r0, r2]
   21600:	sub	r2, r2, #48	; 0x30
   21604:	uxtb	r2, r2
   21608:	cmp	r2, #9
   2160c:	bls	21628 <_obstack_memory_used@@Base+0x918>
   21610:	mov	r2, r3
   21614:	mov	r3, r5
   21618:	mov	r5, r2
   2161c:	mov	fp, r1
   21620:	mov	r4, #48	; 0x30
   21624:	b	21840 <_obstack_memory_used@@Base+0xb30>
   21628:	cmp	r9, r1
   2162c:	movhi	r2, #48	; 0x30
   21630:	strbhi	r2, [r8, r1]
   21634:	add	r2, fp, #2
   21638:	cmp	r9, r2
   2163c:	movhi	r1, #48	; 0x30
   21640:	strbhi	r1, [r8, r2]
   21644:	add	r1, fp, #3
   21648:	b	21610 <_obstack_memory_used@@Base+0x900>
   2164c:	mov	r3, #0
   21650:	str	r3, [sp, #44]	; 0x2c
   21654:	cmp	sl, #2
   21658:	beq	21674 <_obstack_memory_used@@Base+0x964>
   2165c:	cmp	sl, #5
   21660:	beq	2168c <_obstack_memory_used@@Base+0x97c>
   21664:	mov	r5, #0
   21668:	mov	r3, r5
   2166c:	mov	r4, #63	; 0x3f
   21670:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   21674:	ldr	r3, [sp, #32]
   21678:	cmp	r3, #0
   2167c:	bne	223a4 <_obstack_memory_used@@Base+0x1694>
   21680:	mov	r5, r3
   21684:	mov	r4, #63	; 0x3f
   21688:	b	21d84 <_obstack_memory_used@@Base+0x1074>
   2168c:	ldr	r3, [sp, #156]	; 0x9c
   21690:	tst	r3, #4
   21694:	beq	221bc <_obstack_memory_used@@Base+0x14ac>
   21698:	add	r2, r6, #2
   2169c:	ldr	r3, [sp, #24]
   216a0:	cmp	r2, r3
   216a4:	bcs	221cc <_obstack_memory_used@@Base+0x14bc>
   216a8:	ldr	r3, [sp, #48]	; 0x30
   216ac:	add	r3, r3, r6
   216b0:	ldrb	r4, [r3, #1]
   216b4:	cmp	r4, #63	; 0x3f
   216b8:	movne	r5, #0
   216bc:	movne	r3, r5
   216c0:	movne	r4, #63	; 0x3f
   216c4:	bne	2181c <_obstack_memory_used@@Base+0xb0c>
   216c8:	ldr	r3, [sp, #48]	; 0x30
   216cc:	ldrb	r1, [r3, r2]
   216d0:	sub	r3, r1, #33	; 0x21
   216d4:	cmp	r3, #29
   216d8:	ldrls	pc, [pc, r3, lsl #2]
   216dc:	b	221dc <_obstack_memory_used@@Base+0x14cc>
   216e0:	andeq	r1, r2, r8, asr r7
   216e4:	ldrdeq	r2, [r2], -ip
   216e8:	ldrdeq	r2, [r2], -ip
   216ec:	ldrdeq	r2, [r2], -ip
   216f0:	ldrdeq	r2, [r2], -ip
   216f4:	ldrdeq	r2, [r2], -ip
   216f8:	andeq	r1, r2, r8, asr r7
   216fc:	andeq	r1, r2, r8, asr r7
   21700:	andeq	r1, r2, r8, asr r7
   21704:	ldrdeq	r2, [r2], -ip
   21708:	ldrdeq	r2, [r2], -ip
   2170c:	ldrdeq	r2, [r2], -ip
   21710:	andeq	r1, r2, r8, asr r7
   21714:	ldrdeq	r2, [r2], -ip
   21718:	andeq	r1, r2, r8, asr r7
   2171c:	ldrdeq	r2, [r2], -ip
   21720:	ldrdeq	r2, [r2], -ip
   21724:	ldrdeq	r2, [r2], -ip
   21728:	ldrdeq	r2, [r2], -ip
   2172c:	ldrdeq	r2, [r2], -ip
   21730:	ldrdeq	r2, [r2], -ip
   21734:	ldrdeq	r2, [r2], -ip
   21738:	ldrdeq	r2, [r2], -ip
   2173c:	ldrdeq	r2, [r2], -ip
   21740:	ldrdeq	r2, [r2], -ip
   21744:	ldrdeq	r2, [r2], -ip
   21748:	ldrdeq	r2, [r2], -ip
   2174c:	andeq	r1, r2, r8, asr r7
   21750:	andeq	r1, r2, r8, asr r7
   21754:	andeq	r1, r2, r8, asr r7
   21758:	ldr	r3, [sp, #32]
   2175c:	cmp	r3, #0
   21760:	bne	22448 <_obstack_memory_used@@Base+0x1738>
   21764:	cmp	r9, fp
   21768:	movhi	r3, #63	; 0x3f
   2176c:	strbhi	r3, [r8, fp]
   21770:	add	r3, fp, #1
   21774:	cmp	r9, r3
   21778:	movhi	r0, #34	; 0x22
   2177c:	strbhi	r0, [r8, r3]
   21780:	add	r3, fp, #2
   21784:	cmp	r9, r3
   21788:	movhi	r0, #34	; 0x22
   2178c:	strbhi	r0, [r8, r3]
   21790:	add	r3, fp, #3
   21794:	cmp	r9, r3
   21798:	movhi	r0, #63	; 0x3f
   2179c:	strbhi	r0, [r8, r3]
   217a0:	add	fp, fp, #4
   217a4:	ldr	r3, [sp, #32]
   217a8:	mov	r5, r3
   217ac:	mov	r4, r1
   217b0:	mov	r6, r2
   217b4:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   217b8:	mov	r3, #0
   217bc:	str	r3, [sp, #44]	; 0x2c
   217c0:	mov	r4, #8
   217c4:	mov	r3, #98	; 0x62
   217c8:	b	21808 <_obstack_memory_used@@Base+0xaf8>
   217cc:	mov	r3, #0
   217d0:	str	r3, [sp, #44]	; 0x2c
   217d4:	mov	r4, #12
   217d8:	mov	r3, #102	; 0x66
   217dc:	b	21808 <_obstack_memory_used@@Base+0xaf8>
   217e0:	mov	r3, #0
   217e4:	str	r3, [sp, #44]	; 0x2c
   217e8:	mov	r4, #13
   217ec:	mov	r3, #114	; 0x72
   217f0:	ldr	r2, [sp, #32]
   217f4:	cmp	sl, #2
   217f8:	movne	r2, #0
   217fc:	andeq	r2, r2, #1
   21800:	cmp	r2, #0
   21804:	bne	21c28 <_obstack_memory_used@@Base+0xf18>
   21808:	ldr	r2, [sp, #28]
   2180c:	cmp	r2, #0
   21810:	bne	22210 <_obstack_memory_used@@Base+0x1500>
   21814:	mov	r5, r2
   21818:	mov	r3, r2
   2181c:	ldr	r2, [sp, #28]
   21820:	eor	r2, r2, #1
   21824:	cmp	sl, #2
   21828:	orreq	r2, r2, #1
   2182c:	eor	r2, r2, #1
   21830:	ldr	r1, [sp, #32]
   21834:	orr	r2, r1, r2
   21838:	tst	r2, #255	; 0xff
   2183c:	beq	21868 <_obstack_memory_used@@Base+0xb58>
   21840:	ldr	r2, [sp, #160]	; 0xa0
   21844:	cmp	r2, #0
   21848:	beq	21868 <_obstack_memory_used@@Base+0xb58>
   2184c:	ubfx	r1, r4, #5, #8
   21850:	and	r2, r4, #31
   21854:	ldr	r0, [sp, #160]	; 0xa0
   21858:	ldr	r1, [r0, r1, lsl #2]
   2185c:	lsr	r2, r1, r2
   21860:	tst	r2, #1
   21864:	bne	21874 <_obstack_memory_used@@Base+0xb64>
   21868:	ldr	r2, [sp, #44]	; 0x2c
   2186c:	cmp	r2, #0
   21870:	beq	21bc8 <_obstack_memory_used@@Base+0xeb8>
   21874:	ldr	r3, [sp, #32]
   21878:	cmp	r3, #0
   2187c:	bne	223c8 <_obstack_memory_used@@Base+0x16b8>
   21880:	ldr	r3, [sp, #36]	; 0x24
   21884:	eor	r3, r3, #1
   21888:	cmp	sl, #2
   2188c:	movne	r3, #0
   21890:	andeq	r3, r3, #1
   21894:	cmp	r3, #0
   21898:	beq	218d0 <_obstack_memory_used@@Base+0xbc0>
   2189c:	cmp	r9, fp
   218a0:	movhi	r2, #39	; 0x27
   218a4:	strbhi	r2, [r8, fp]
   218a8:	add	r2, fp, #1
   218ac:	cmp	r9, r2
   218b0:	movhi	r1, #36	; 0x24
   218b4:	strbhi	r1, [r8, r2]
   218b8:	add	r2, fp, #2
   218bc:	cmp	r9, r2
   218c0:	movhi	r1, #39	; 0x27
   218c4:	strbhi	r1, [r8, r2]
   218c8:	add	fp, fp, #3
   218cc:	str	r3, [sp, #36]	; 0x24
   218d0:	cmp	r9, fp
   218d4:	movhi	r3, #92	; 0x5c
   218d8:	strbhi	r3, [r8, fp]
   218dc:	add	fp, fp, #1
   218e0:	cmp	fp, r9
   218e4:	strbcc	r4, [r8, fp]
   218e8:	add	fp, fp, #1
   218ec:	cmp	r5, #0
   218f0:	ldr	r3, [sp, #40]	; 0x28
   218f4:	moveq	r3, r5
   218f8:	str	r3, [sp, #40]	; 0x28
   218fc:	add	r6, r6, #1
   21900:	ldr	r3, [sp, #24]
   21904:	cmn	r3, #1
   21908:	beq	22238 <_obstack_memory_used@@Base+0x1528>
   2190c:	ldr	r3, [sp, #24]
   21910:	subs	r5, r3, r6
   21914:	movne	r5, #1
   21918:	cmp	r5, #0
   2191c:	beq	2224c <_obstack_memory_used@@Base+0x153c>
   21920:	ldr	r3, [sp, #28]
   21924:	cmp	sl, #2
   21928:	moveq	r3, #0
   2192c:	andne	r3, r3, #1
   21930:	str	r3, [sp, #56]	; 0x38
   21934:	ldr	r2, [sp, #52]	; 0x34
   21938:	adds	r7, r2, #0
   2193c:	movne	r7, #1
   21940:	ands	r3, r3, r7
   21944:	str	r3, [sp, #44]	; 0x2c
   21948:	bne	21268 <_obstack_memory_used@@Base+0x558>
   2194c:	ldr	r3, [sp, #48]	; 0x30
   21950:	ldrb	r4, [r3, r6]
   21954:	cmp	r4, #126	; 0x7e
   21958:	ldrls	pc, [pc, r4, lsl #2]
   2195c:	b	21d94 <_obstack_memory_used@@Base+0x1084>
   21960:	andeq	r1, r2, ip, ror #9
   21964:	muleq	r2, r4, sp
   21968:	muleq	r2, r4, sp
   2196c:	muleq	r2, r4, sp
   21970:	muleq	r2, r4, sp
   21974:	muleq	r2, r4, sp
   21978:	muleq	r2, r4, sp
   2197c:	andeq	r1, r2, r4, lsr ip
   21980:	andeq	r1, r2, r0, asr #15
   21984:	andeq	r1, r2, r4, ror #22
   21988:	andeq	r1, r2, r8, lsl #24
   2198c:	andeq	r1, r2, r8, ror fp
   21990:	ldrdeq	r1, [r2], -r4
   21994:	andeq	r1, r2, r8, ror #15
   21998:	muleq	r2, r4, sp
   2199c:	muleq	r2, r4, sp
   219a0:	muleq	r2, r4, sp
   219a4:	muleq	r2, r4, sp
   219a8:	muleq	r2, r4, sp
   219ac:	muleq	r2, r4, sp
   219b0:	muleq	r2, r4, sp
   219b4:	muleq	r2, r4, sp
   219b8:	muleq	r2, r4, sp
   219bc:	muleq	r2, r4, sp
   219c0:	muleq	r2, r4, sp
   219c4:	muleq	r2, r4, sp
   219c8:	muleq	r2, r4, sp
   219cc:	muleq	r2, r4, sp
   219d0:	muleq	r2, r4, sp
   219d4:	muleq	r2, r4, sp
   219d8:	muleq	r2, r4, sp
   219dc:	muleq	r2, r4, sp
   219e0:			; <UNDEFINED> instruction: 0x00021cb0
   219e4:	andeq	r1, r2, ip, lsr #25
   219e8:	andeq	r1, r2, ip, lsr #25
   219ec:	andeq	r1, r2, ip, ror #24
   219f0:	andeq	r1, r2, ip, lsr #25
   219f4:			; <UNDEFINED> instruction: 0x000221b4
   219f8:	andeq	r1, r2, ip, lsr #25
   219fc:	strdeq	r1, [r2], -r4
   21a00:	andeq	r1, r2, ip, lsr #25
   21a04:	andeq	r1, r2, ip, lsr #25
   21a08:	andeq	r1, r2, ip, lsr #25
   21a0c:			; <UNDEFINED> instruction: 0x000221b4
   21a10:			; <UNDEFINED> instruction: 0x000221b4
   21a14:			; <UNDEFINED> instruction: 0x000221b4
   21a18:			; <UNDEFINED> instruction: 0x000221b4
   21a1c:			; <UNDEFINED> instruction: 0x000221b4
   21a20:			; <UNDEFINED> instruction: 0x000221b4
   21a24:			; <UNDEFINED> instruction: 0x000221b4
   21a28:			; <UNDEFINED> instruction: 0x000221b4
   21a2c:			; <UNDEFINED> instruction: 0x000221b4
   21a30:			; <UNDEFINED> instruction: 0x000221b4
   21a34:			; <UNDEFINED> instruction: 0x000221b4
   21a38:			; <UNDEFINED> instruction: 0x000221b4
   21a3c:			; <UNDEFINED> instruction: 0x000221b4
   21a40:			; <UNDEFINED> instruction: 0x000221b4
   21a44:			; <UNDEFINED> instruction: 0x000221b4
   21a48:			; <UNDEFINED> instruction: 0x000221b4
   21a4c:	andeq	r1, r2, ip, lsr #25
   21a50:	andeq	r1, r2, ip, lsr #25
   21a54:	andeq	r1, r2, ip, lsr #25
   21a58:	andeq	r1, r2, ip, lsr #25
   21a5c:	andeq	r1, r2, r4, asr r6
   21a60:	muleq	r2, r4, sp
   21a64:			; <UNDEFINED> instruction: 0x000221b4
   21a68:			; <UNDEFINED> instruction: 0x000221b4
   21a6c:			; <UNDEFINED> instruction: 0x000221b4
   21a70:			; <UNDEFINED> instruction: 0x000221b4
   21a74:			; <UNDEFINED> instruction: 0x000221b4
   21a78:			; <UNDEFINED> instruction: 0x000221b4
   21a7c:			; <UNDEFINED> instruction: 0x000221b4
   21a80:			; <UNDEFINED> instruction: 0x000221b4
   21a84:			; <UNDEFINED> instruction: 0x000221b4
   21a88:			; <UNDEFINED> instruction: 0x000221b4
   21a8c:			; <UNDEFINED> instruction: 0x000221b4
   21a90:			; <UNDEFINED> instruction: 0x000221b4
   21a94:			; <UNDEFINED> instruction: 0x000221b4
   21a98:			; <UNDEFINED> instruction: 0x000221b4
   21a9c:			; <UNDEFINED> instruction: 0x000221b4
   21aa0:			; <UNDEFINED> instruction: 0x000221b4
   21aa4:			; <UNDEFINED> instruction: 0x000221b4
   21aa8:			; <UNDEFINED> instruction: 0x000221b4
   21aac:			; <UNDEFINED> instruction: 0x000221b4
   21ab0:			; <UNDEFINED> instruction: 0x000221b4
   21ab4:			; <UNDEFINED> instruction: 0x000221b4
   21ab8:			; <UNDEFINED> instruction: 0x000221b4
   21abc:			; <UNDEFINED> instruction: 0x000221b4
   21ac0:			; <UNDEFINED> instruction: 0x000221b4
   21ac4:			; <UNDEFINED> instruction: 0x000221b4
   21ac8:			; <UNDEFINED> instruction: 0x000221b4
   21acc:	andeq	r1, r2, ip, lsr #25
   21ad0:	andeq	r1, r2, ip, lsl #23
   21ad4:			; <UNDEFINED> instruction: 0x000221b4
   21ad8:	andeq	r1, r2, ip, lsr #25
   21adc:			; <UNDEFINED> instruction: 0x000221b4
   21ae0:	andeq	r1, r2, ip, lsr #25
   21ae4:			; <UNDEFINED> instruction: 0x000221b4
   21ae8:			; <UNDEFINED> instruction: 0x000221b4
   21aec:			; <UNDEFINED> instruction: 0x000221b4
   21af0:			; <UNDEFINED> instruction: 0x000221b4
   21af4:			; <UNDEFINED> instruction: 0x000221b4
   21af8:			; <UNDEFINED> instruction: 0x000221b4
   21afc:			; <UNDEFINED> instruction: 0x000221b4
   21b00:			; <UNDEFINED> instruction: 0x000221b4
   21b04:			; <UNDEFINED> instruction: 0x000221b4
   21b08:			; <UNDEFINED> instruction: 0x000221b4
   21b0c:			; <UNDEFINED> instruction: 0x000221b4
   21b10:			; <UNDEFINED> instruction: 0x000221b4
   21b14:			; <UNDEFINED> instruction: 0x000221b4
   21b18:			; <UNDEFINED> instruction: 0x000221b4
   21b1c:			; <UNDEFINED> instruction: 0x000221b4
   21b20:			; <UNDEFINED> instruction: 0x000221b4
   21b24:			; <UNDEFINED> instruction: 0x000221b4
   21b28:			; <UNDEFINED> instruction: 0x000221b4
   21b2c:			; <UNDEFINED> instruction: 0x000221b4
   21b30:			; <UNDEFINED> instruction: 0x000221b4
   21b34:			; <UNDEFINED> instruction: 0x000221b4
   21b38:			; <UNDEFINED> instruction: 0x000221b4
   21b3c:			; <UNDEFINED> instruction: 0x000221b4
   21b40:			; <UNDEFINED> instruction: 0x000221b4
   21b44:			; <UNDEFINED> instruction: 0x000221b4
   21b48:			; <UNDEFINED> instruction: 0x000221b4
   21b4c:	andeq	r1, r2, ip, asr #24
   21b50:	andeq	r1, r2, ip, lsr #25
   21b54:	andeq	r1, r2, ip, asr #24
   21b58:	andeq	r1, r2, ip, ror #24
   21b5c:	mov	r3, #0
   21b60:	str	r3, [sp, #44]	; 0x2c
   21b64:	mov	r4, #9
   21b68:	mov	r3, #116	; 0x74
   21b6c:	b	217f0 <_obstack_memory_used@@Base+0xae0>
   21b70:	mov	r3, #0
   21b74:	str	r3, [sp, #44]	; 0x2c
   21b78:	mov	r4, #11
   21b7c:	mov	r3, #118	; 0x76
   21b80:	b	21808 <_obstack_memory_used@@Base+0xaf8>
   21b84:	mov	r3, #0
   21b88:	str	r3, [sp, #44]	; 0x2c
   21b8c:	cmp	sl, #2
   21b90:	beq	21bb4 <_obstack_memory_used@@Base+0xea4>
   21b94:	ldr	r3, [sp, #28]
   21b98:	ldr	r2, [sp, #32]
   21b9c:	and	r3, r3, r2
   21ba0:	tst	r7, r3
   21ba4:	bne	22228 <_obstack_memory_used@@Base+0x1518>
   21ba8:	mov	r4, #92	; 0x5c
   21bac:	mov	r3, r4
   21bb0:	b	21808 <_obstack_memory_used@@Base+0xaf8>
   21bb4:	ldr	r3, [sp, #32]
   21bb8:	cmp	r3, #0
   21bbc:	bne	223b0 <_obstack_memory_used@@Base+0x16a0>
   21bc0:	mov	r5, r3
   21bc4:	mov	r4, #92	; 0x5c
   21bc8:	eor	r3, r3, #1
   21bcc:	ldr	r2, [sp, #36]	; 0x24
   21bd0:	and	r3, r3, r2
   21bd4:	tst	r3, #255	; 0xff
   21bd8:	beq	218e0 <_obstack_memory_used@@Base+0xbd0>
   21bdc:	cmp	r9, fp
   21be0:	movhi	r3, #39	; 0x27
   21be4:	strbhi	r3, [r8, fp]
   21be8:	add	r3, fp, #1
   21bec:	cmp	r9, r3
   21bf0:	movhi	r2, #39	; 0x27
   21bf4:	strbhi	r2, [r8, r3]
   21bf8:	add	fp, fp, #2
   21bfc:	mov	r3, #0
   21c00:	str	r3, [sp, #36]	; 0x24
   21c04:	b	218e0 <_obstack_memory_used@@Base+0xbd0>
   21c08:	mov	r3, #110	; 0x6e
   21c0c:	b	217f0 <_obstack_memory_used@@Base+0xae0>
   21c10:	mov	r3, #110	; 0x6e
   21c14:	b	217f0 <_obstack_memory_used@@Base+0xae0>
   21c18:	mov	r3, #0
   21c1c:	str	r3, [sp, #44]	; 0x2c
   21c20:	mov	r3, #110	; 0x6e
   21c24:	b	217f0 <_obstack_memory_used@@Base+0xae0>
   21c28:	mov	r8, r9
   21c2c:	mov	r7, #2
   21c30:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   21c34:	mov	r3, #97	; 0x61
   21c38:	b	21808 <_obstack_memory_used@@Base+0xaf8>
   21c3c:	mov	r3, #97	; 0x61
   21c40:	b	21808 <_obstack_memory_used@@Base+0xaf8>
   21c44:	mov	r3, #0
   21c48:	str	r3, [sp, #44]	; 0x2c
   21c4c:	ldr	r3, [sp, #24]
   21c50:	cmn	r3, #1
   21c54:	beq	21c80 <_obstack_memory_used@@Base+0xf70>
   21c58:	ldr	r3, [sp, #24]
   21c5c:	subs	r3, r3, #1
   21c60:	movne	r3, #1
   21c64:	cmp	r3, #0
   21c68:	bne	221e8 <_obstack_memory_used@@Base+0x14d8>
   21c6c:	cmp	r6, #0
   21c70:	beq	21cb0 <_obstack_memory_used@@Base+0xfa0>
   21c74:	mov	r5, #0
   21c78:	mov	r3, r5
   21c7c:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   21c80:	ldr	r3, [sp, #48]	; 0x30
   21c84:	ldrb	r3, [r3, #1]
   21c88:	adds	r3, r3, #0
   21c8c:	movne	r3, #1
   21c90:	b	21c64 <_obstack_memory_used@@Base+0xf54>
   21c94:	mov	r3, #0
   21c98:	str	r3, [sp, #44]	; 0x2c
   21c9c:	b	21c6c <_obstack_memory_used@@Base+0xf5c>
   21ca0:	mov	r3, #0
   21ca4:	str	r3, [sp, #44]	; 0x2c
   21ca8:	b	21cb0 <_obstack_memory_used@@Base+0xfa0>
   21cac:	ldr	r5, [sp, #44]	; 0x2c
   21cb0:	ldr	r3, [sp, #32]
   21cb4:	cmp	sl, #2
   21cb8:	movne	r3, #0
   21cbc:	andeq	r3, r3, #1
   21cc0:	cmp	r3, #0
   21cc4:	beq	2181c <_obstack_memory_used@@Base+0xb0c>
   21cc8:	mov	r8, r9
   21ccc:	mov	r7, #2
   21cd0:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   21cd4:	ldr	r5, [sp, #32]
   21cd8:	b	21cb0 <_obstack_memory_used@@Base+0xfa0>
   21cdc:	mov	r3, #0
   21ce0:	str	r3, [sp, #44]	; 0x2c
   21ce4:	mov	r5, r3
   21ce8:	b	21cb0 <_obstack_memory_used@@Base+0xfa0>
   21cec:	mov	r3, #0
   21cf0:	str	r3, [sp, #44]	; 0x2c
   21cf4:	cmp	sl, #2
   21cf8:	strne	r5, [sp, #68]	; 0x44
   21cfc:	movne	r3, #0
   21d00:	movne	r4, #39	; 0x27
   21d04:	bne	2181c <_obstack_memory_used@@Base+0xb0c>
   21d08:	ldr	r3, [sp, #32]
   21d0c:	cmp	r3, #0
   21d10:	bne	223bc <_obstack_memory_used@@Base+0x16ac>
   21d14:	ldr	r3, [sp, #72]	; 0x48
   21d18:	clz	r3, r3
   21d1c:	lsr	r3, r3, #5
   21d20:	cmp	r9, #0
   21d24:	moveq	r3, #0
   21d28:	cmp	r3, #0
   21d2c:	movne	r3, #0
   21d30:	bne	21d58 <_obstack_memory_used@@Base+0x1048>
   21d34:	cmp	r9, fp
   21d38:	movhi	r3, #39	; 0x27
   21d3c:	strbhi	r3, [r8, fp]
   21d40:	add	r3, fp, #1
   21d44:	cmp	r9, r3
   21d48:	movhi	r2, #92	; 0x5c
   21d4c:	strbhi	r2, [r8, r3]
   21d50:	mov	r3, r9
   21d54:	ldr	r9, [sp, #72]	; 0x48
   21d58:	add	r2, fp, #2
   21d5c:	cmp	r2, r3
   21d60:	movcc	r1, #39	; 0x27
   21d64:	strbcc	r1, [r8, r2]
   21d68:	add	fp, fp, #3
   21d6c:	str	r5, [sp, #68]	; 0x44
   21d70:	ldr	r2, [sp, #32]
   21d74:	str	r2, [sp, #36]	; 0x24
   21d78:	str	r9, [sp, #72]	; 0x48
   21d7c:	mov	r9, r3
   21d80:	mov	r4, #39	; 0x27
   21d84:	mov	r3, #0
   21d88:	b	21868 <_obstack_memory_used@@Base+0xb58>
   21d8c:	mov	r3, #0
   21d90:	str	r3, [sp, #44]	; 0x2c
   21d94:	ldr	r7, [sp, #76]	; 0x4c
   21d98:	cmp	r7, #1
   21d9c:	bne	21dd4 <_obstack_memory_used@@Base+0x10c4>
   21da0:	bl	11b58 <__ctype_b_loc@plt>
   21da4:	ldr	r2, [r0]
   21da8:	lsl	r3, r4, #1
   21dac:	ldrh	r5, [r2, r3]
   21db0:	ubfx	r5, r5, #14, #1
   21db4:	mov	ip, r7
   21db8:	eor	r3, r5, #1
   21dbc:	ldr	r2, [sp, #28]
   21dc0:	and	r3, r3, r2
   21dc4:	ands	r3, r3, #255	; 0xff
   21dc8:	beq	2181c <_obstack_memory_used@@Base+0xb0c>
   21dcc:	mov	r5, #0
   21dd0:	b	22030 <_obstack_memory_used@@Base+0x1320>
   21dd4:	mov	r2, #0
   21dd8:	mov	r3, #0
   21ddc:	strd	r2, [sp, #104]	; 0x68
   21de0:	ldr	r3, [sp, #24]
   21de4:	cmn	r3, #1
   21de8:	beq	21e0c <_obstack_memory_used@@Base+0x10fc>
   21dec:	mov	r3, #0
   21df0:	str	r4, [sp, #88]	; 0x58
   21df4:	str	fp, [sp, #92]	; 0x5c
   21df8:	str	r8, [sp, #56]	; 0x38
   21dfc:	mov	r8, r3
   21e00:	str	r9, [sp, #84]	; 0x54
   21e04:	ldr	r9, [sp, #48]	; 0x30
   21e08:	b	21f58 <_obstack_memory_used@@Base+0x1248>
   21e0c:	ldr	r0, [sp, #48]	; 0x30
   21e10:	bl	11b94 <strlen@plt>
   21e14:	str	r0, [sp, #24]
   21e18:	b	21dec <_obstack_memory_used@@Base+0x10dc>
   21e1c:	mov	r1, fp
   21e20:	ldr	r4, [sp, #88]	; 0x58
   21e24:	mov	r2, r8
   21e28:	mov	ip, r8
   21e2c:	ldr	fp, [sp, #92]	; 0x5c
   21e30:	ldr	r8, [sp, #56]	; 0x38
   21e34:	ldr	r9, [sp, #84]	; 0x54
   21e38:	ldr	r0, [sp, #24]
   21e3c:	cmp	r7, r0
   21e40:	bcs	21ff8 <_obstack_memory_used@@Base+0x12e8>
   21e44:	ldrb	r3, [r1]
   21e48:	cmp	r3, #0
   21e4c:	beq	22000 <_obstack_memory_used@@Base+0x12f0>
   21e50:	mov	r3, r1
   21e54:	add	r2, r2, #1
   21e58:	add	r1, r6, r2
   21e5c:	cmp	r0, r1
   21e60:	bls	22008 <_obstack_memory_used@@Base+0x12f8>
   21e64:	ldrb	r1, [r3, #1]!
   21e68:	cmp	r1, #0
   21e6c:	bne	21e54 <_obstack_memory_used@@Base+0x1144>
   21e70:	mov	ip, r2
   21e74:	mov	r5, #0
   21e78:	b	22028 <_obstack_memory_used@@Base+0x1318>
   21e7c:	ldr	r3, [sp, #56]	; 0x38
   21e80:	str	r3, [sp, #64]	; 0x40
   21e84:	ldr	r8, [sp, #84]	; 0x54
   21e88:	mov	r7, #2
   21e8c:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   21e90:	cmp	r2, r7
   21e94:	beq	21f34 <_obstack_memory_used@@Base+0x1224>
   21e98:	ldrb	r3, [r2], #1
   21e9c:	sub	r3, r3, #91	; 0x5b
   21ea0:	cmp	r3, #33	; 0x21
   21ea4:	ldrls	pc, [pc, r3, lsl #2]
   21ea8:	b	21e90 <_obstack_memory_used@@Base+0x1180>
   21eac:	andeq	r1, r2, ip, ror lr
   21eb0:	andeq	r1, r2, ip, ror lr
   21eb4:	muleq	r2, r0, lr
   21eb8:	andeq	r1, r2, ip, ror lr
   21ebc:	muleq	r2, r0, lr
   21ec0:	andeq	r1, r2, ip, ror lr
   21ec4:	muleq	r2, r0, lr
   21ec8:	muleq	r2, r0, lr
   21ecc:	muleq	r2, r0, lr
   21ed0:	muleq	r2, r0, lr
   21ed4:	muleq	r2, r0, lr
   21ed8:	muleq	r2, r0, lr
   21edc:	muleq	r2, r0, lr
   21ee0:	muleq	r2, r0, lr
   21ee4:	muleq	r2, r0, lr
   21ee8:	muleq	r2, r0, lr
   21eec:	muleq	r2, r0, lr
   21ef0:	muleq	r2, r0, lr
   21ef4:	muleq	r2, r0, lr
   21ef8:	muleq	r2, r0, lr
   21efc:	muleq	r2, r0, lr
   21f00:	muleq	r2, r0, lr
   21f04:	muleq	r2, r0, lr
   21f08:	muleq	r2, r0, lr
   21f0c:	muleq	r2, r0, lr
   21f10:	muleq	r2, r0, lr
   21f14:	muleq	r2, r0, lr
   21f18:	muleq	r2, r0, lr
   21f1c:	muleq	r2, r0, lr
   21f20:	muleq	r2, r0, lr
   21f24:	muleq	r2, r0, lr
   21f28:	muleq	r2, r0, lr
   21f2c:	muleq	r2, r0, lr
   21f30:	andeq	r1, r2, ip, ror lr
   21f34:	ldr	r0, [sp, #100]	; 0x64
   21f38:	bl	119f0 <iswprint@plt>
   21f3c:	cmp	r0, #0
   21f40:	moveq	r5, #0
   21f44:	add	r8, r8, r4
   21f48:	add	r0, sp, #104	; 0x68
   21f4c:	bl	11948 <mbsinit@plt>
   21f50:	cmp	r0, #0
   21f54:	bne	21fc4 <_obstack_memory_used@@Base+0x12b4>
   21f58:	add	r7, r6, r8
   21f5c:	add	fp, r9, r7
   21f60:	add	r3, sp, #104	; 0x68
   21f64:	ldr	r2, [sp, #24]
   21f68:	sub	r2, r2, r7
   21f6c:	mov	r1, fp
   21f70:	add	r0, sp, #100	; 0x64
   21f74:	bl	1e584 <__assert_fail@plt+0xc810>
   21f78:	subs	r4, r0, #0
   21f7c:	beq	22014 <_obstack_memory_used@@Base+0x1304>
   21f80:	cmn	r4, #1
   21f84:	beq	21fdc <_obstack_memory_used@@Base+0x12cc>
   21f88:	cmn	r4, #2
   21f8c:	beq	21e1c <_obstack_memory_used@@Base+0x110c>
   21f90:	ldr	r3, [sp, #32]
   21f94:	cmp	sl, #2
   21f98:	movne	r3, #0
   21f9c:	andeq	r3, r3, #1
   21fa0:	cmp	r3, #0
   21fa4:	beq	21f34 <_obstack_memory_used@@Base+0x1224>
   21fa8:	cmp	r4, #1
   21fac:	bls	21f34 <_obstack_memory_used@@Base+0x1224>
   21fb0:	add	r2, r7, #1
   21fb4:	add	r2, r9, r2
   21fb8:	add	r3, r9, r4
   21fbc:	add	r7, r3, r7
   21fc0:	b	21e98 <_obstack_memory_used@@Base+0x1188>
   21fc4:	ldr	r4, [sp, #88]	; 0x58
   21fc8:	mov	ip, r8
   21fcc:	ldr	fp, [sp, #92]	; 0x5c
   21fd0:	ldr	r8, [sp, #56]	; 0x38
   21fd4:	ldr	r9, [sp, #84]	; 0x54
   21fd8:	b	22028 <_obstack_memory_used@@Base+0x1318>
   21fdc:	ldr	r4, [sp, #88]	; 0x58
   21fe0:	mov	ip, r8
   21fe4:	ldr	fp, [sp, #92]	; 0x5c
   21fe8:	ldr	r8, [sp, #56]	; 0x38
   21fec:	ldr	r9, [sp, #84]	; 0x54
   21ff0:	mov	r5, #0
   21ff4:	b	22028 <_obstack_memory_used@@Base+0x1318>
   21ff8:	mov	r5, #0
   21ffc:	b	22028 <_obstack_memory_used@@Base+0x1318>
   22000:	mov	r5, #0
   22004:	b	22028 <_obstack_memory_used@@Base+0x1318>
   22008:	mov	ip, r2
   2200c:	mov	r5, #0
   22010:	b	22028 <_obstack_memory_used@@Base+0x1318>
   22014:	ldr	r4, [sp, #88]	; 0x58
   22018:	mov	ip, r8
   2201c:	ldr	fp, [sp, #92]	; 0x5c
   22020:	ldr	r8, [sp, #56]	; 0x38
   22024:	ldr	r9, [sp, #84]	; 0x54
   22028:	cmp	ip, #1
   2202c:	bls	21db8 <_obstack_memory_used@@Base+0x10a8>
   22030:	add	lr, r6, ip
   22034:	ldr	r3, [sp, #48]	; 0x30
   22038:	add	r1, r3, r6
   2203c:	mov	r3, #0
   22040:	eor	r0, r5, #1
   22044:	ldr	r2, [sp, #28]
   22048:	and	r0, r0, r2
   2204c:	uxtb	r0, r0
   22050:	str	r0, [sp, #56]	; 0x38
   22054:	mov	r7, #92	; 0x5c
   22058:	ldr	ip, [sp, #36]	; 0x24
   2205c:	str	r5, [sp, #84]	; 0x54
   22060:	ldr	r2, [sp, #44]	; 0x2c
   22064:	b	220d4 <_obstack_memory_used@@Base+0x13c4>
   22068:	cmp	r2, #0
   2206c:	beq	2207c <_obstack_memory_used@@Base+0x136c>
   22070:	cmp	r9, fp
   22074:	strbhi	r7, [r8, fp]
   22078:	add	fp, fp, #1
   2207c:	add	r5, r6, #1
   22080:	cmp	r5, lr
   22084:	bcs	22190 <_obstack_memory_used@@Base+0x1480>
   22088:	eor	r2, r3, #1
   2208c:	and	r2, r2, ip
   22090:	ands	r2, r2, #255	; 0xff
   22094:	beq	221ac <_obstack_memory_used@@Base+0x149c>
   22098:	cmp	r9, fp
   2209c:	movhi	r2, #39	; 0x27
   220a0:	strbhi	r2, [r8, fp]
   220a4:	add	r2, fp, #1
   220a8:	cmp	r9, r2
   220ac:	movhi	ip, #39	; 0x27
   220b0:	strbhi	ip, [r8, r2]
   220b4:	add	fp, fp, #2
   220b8:	ldr	ip, [sp, #56]	; 0x38
   220bc:	mov	r2, ip
   220c0:	mov	r6, r5
   220c4:	cmp	r9, fp
   220c8:	strbhi	r4, [r8, fp]
   220cc:	add	fp, fp, #1
   220d0:	ldrb	r4, [r1, #1]!
   220d4:	cmp	r0, #0
   220d8:	beq	22068 <_obstack_memory_used@@Base+0x1358>
   220dc:	ldr	r3, [sp, #32]
   220e0:	cmp	r3, #0
   220e4:	bne	22378 <_obstack_memory_used@@Base+0x1668>
   220e8:	eor	r3, ip, #1
   220ec:	cmp	sl, #2
   220f0:	movne	r3, #0
   220f4:	andeq	r3, r3, #1
   220f8:	cmp	r3, #0
   220fc:	beq	22134 <_obstack_memory_used@@Base+0x1424>
   22100:	cmp	r9, fp
   22104:	movhi	ip, #39	; 0x27
   22108:	strbhi	ip, [r8, fp]
   2210c:	add	ip, fp, #1
   22110:	cmp	r9, ip
   22114:	movhi	r5, #36	; 0x24
   22118:	strbhi	r5, [r8, ip]
   2211c:	add	ip, fp, #2
   22120:	cmp	r9, ip
   22124:	movhi	r5, #39	; 0x27
   22128:	strbhi	r5, [r8, ip]
   2212c:	add	fp, fp, #3
   22130:	mov	ip, r3
   22134:	cmp	r9, fp
   22138:	strbhi	r7, [r8, fp]
   2213c:	add	r3, fp, #1
   22140:	cmp	r9, r3
   22144:	bls	22154 <_obstack_memory_used@@Base+0x1444>
   22148:	lsr	r5, r4, #6
   2214c:	add	r5, r5, #48	; 0x30
   22150:	strb	r5, [r8, r3]
   22154:	add	r3, fp, #2
   22158:	cmp	r9, r3
   2215c:	bls	2216c <_obstack_memory_used@@Base+0x145c>
   22160:	ubfx	r5, r4, #3, #3
   22164:	add	r5, r5, #48	; 0x30
   22168:	strb	r5, [r8, r3]
   2216c:	add	fp, fp, #3
   22170:	and	r4, r4, #7
   22174:	add	r4, r4, #48	; 0x30
   22178:	add	r5, r6, #1
   2217c:	cmp	r5, lr
   22180:	bcs	2219c <_obstack_memory_used@@Base+0x148c>
   22184:	ldr	r3, [sp, #56]	; 0x38
   22188:	mov	r6, r5
   2218c:	b	220c4 <_obstack_memory_used@@Base+0x13b4>
   22190:	str	ip, [sp, #36]	; 0x24
   22194:	ldr	r5, [sp, #84]	; 0x54
   22198:	b	21bc8 <_obstack_memory_used@@Base+0xeb8>
   2219c:	str	ip, [sp, #36]	; 0x24
   221a0:	ldr	r5, [sp, #84]	; 0x54
   221a4:	mov	r3, r0
   221a8:	b	21bc8 <_obstack_memory_used@@Base+0xeb8>
   221ac:	mov	r6, r5
   221b0:	b	220c4 <_obstack_memory_used@@Base+0x13b4>
   221b4:	ldr	r3, [sp, #44]	; 0x2c
   221b8:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   221bc:	mov	r5, #0
   221c0:	mov	r3, r5
   221c4:	mov	r4, #63	; 0x3f
   221c8:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   221cc:	mov	r5, #0
   221d0:	mov	r3, r5
   221d4:	mov	r4, #63	; 0x3f
   221d8:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   221dc:	mov	r5, #0
   221e0:	mov	r3, r5
   221e4:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   221e8:	mov	r5, #0
   221ec:	mov	r3, r5
   221f0:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   221f4:	ldr	r5, [sp, #44]	; 0x2c
   221f8:	ldr	r3, [sp, #32]
   221fc:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   22200:	ldr	r5, [sp, #44]	; 0x2c
   22204:	mov	r3, #0
   22208:	str	r3, [sp, #44]	; 0x2c
   2220c:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   22210:	mov	r4, r3
   22214:	mov	r5, #0
   22218:	b	21874 <_obstack_memory_used@@Base+0xb64>
   2221c:	mov	r5, #0
   22220:	mov	r4, #97	; 0x61
   22224:	b	21874 <_obstack_memory_used@@Base+0xb64>
   22228:	mov	r5, #0
   2222c:	mov	r3, r5
   22230:	mov	r4, #92	; 0x5c
   22234:	b	21bc8 <_obstack_memory_used@@Base+0xeb8>
   22238:	ldr	r3, [sp, #48]	; 0x30
   2223c:	ldrb	r5, [r3, r6]
   22240:	adds	r5, r5, #0
   22244:	movne	r5, #1
   22248:	b	21918 <_obstack_memory_used@@Base+0xc08>
   2224c:	cmp	sl, #2
   22250:	movne	r3, #0
   22254:	moveq	r3, #1
   22258:	ldr	r1, [sp, #32]
   2225c:	cmp	fp, #0
   22260:	andeq	r2, r3, r1
   22264:	movne	r2, #0
   22268:	cmp	r2, #0
   2226c:	bne	2238c <_obstack_memory_used@@Base+0x167c>
   22270:	eor	r2, r1, #1
   22274:	uxtb	r2, r2
   22278:	and	r3, r3, r2
   2227c:	ldr	r1, [sp, #68]	; 0x44
   22280:	ands	r3, r1, r3
   22284:	beq	22318 <_obstack_memory_used@@Base+0x1608>
   22288:	ldr	r2, [sp, #40]	; 0x28
   2228c:	cmp	r2, #0
   22290:	bne	222c8 <_obstack_memory_used@@Base+0x15b8>
   22294:	ldr	r2, [sp, #72]	; 0x48
   22298:	adds	r2, r2, #0
   2229c:	movne	r2, #1
   222a0:	cmp	r9, #0
   222a4:	movne	r2, #0
   222a8:	str	r2, [sp, #68]	; 0x44
   222ac:	mov	sl, #2
   222b0:	ldr	r1, [sp, #40]	; 0x28
   222b4:	str	r1, [sp, #32]
   222b8:	cmp	r2, #0
   222bc:	beq	2230c <_obstack_memory_used@@Base+0x15fc>
   222c0:	ldr	r9, [sp, #72]	; 0x48
   222c4:	b	21020 <_obstack_memory_used@@Base+0x310>
   222c8:	ldr	r3, [sp, #168]	; 0xa8
   222cc:	str	r3, [sp, #16]
   222d0:	ldr	r3, [sp, #164]	; 0xa4
   222d4:	str	r3, [sp, #12]
   222d8:	ldr	r3, [sp, #160]	; 0xa0
   222dc:	str	r3, [sp, #8]
   222e0:	ldr	r3, [sp, #156]	; 0x9c
   222e4:	str	r3, [sp, #4]
   222e8:	mov	r3, #5
   222ec:	str	r3, [sp]
   222f0:	ldr	r3, [sp, #24]
   222f4:	ldr	r2, [sp, #48]	; 0x30
   222f8:	ldr	r1, [sp, #72]	; 0x48
   222fc:	ldr	r0, [sp, #64]	; 0x40
   22300:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   22304:	mov	fp, r0
   22308:	b	22428 <_obstack_memory_used@@Base+0x1718>
   2230c:	mov	r8, r9
   22310:	mov	r2, r3
   22314:	b	2231c <_obstack_memory_used@@Base+0x160c>
   22318:	mov	r8, r9
   2231c:	ldr	r3, [sp, #60]	; 0x3c
   22320:	cmp	r3, #0
   22324:	moveq	r2, #0
   22328:	andne	r2, r2, #1
   2232c:	cmp	r2, #0
   22330:	beq	22360 <_obstack_memory_used@@Base+0x1650>
   22334:	mov	r2, r3
   22338:	ldrb	r3, [r3]
   2233c:	cmp	r3, #0
   22340:	beq	22360 <_obstack_memory_used@@Base+0x1650>
   22344:	ldr	r1, [sp, #64]	; 0x40
   22348:	cmp	r8, fp
   2234c:	strbhi	r3, [r1, fp]
   22350:	add	fp, fp, #1
   22354:	ldrb	r3, [r2, #1]!
   22358:	cmp	r3, #0
   2235c:	bne	22348 <_obstack_memory_used@@Base+0x1638>
   22360:	cmp	r8, fp
   22364:	bls	22428 <_obstack_memory_used@@Base+0x1718>
   22368:	mov	r3, #0
   2236c:	ldr	r2, [sp, #64]	; 0x40
   22370:	strb	r3, [r2, fp]
   22374:	b	22428 <_obstack_memory_used@@Base+0x1718>
   22378:	mov	r8, r9
   2237c:	mov	r7, sl
   22380:	ldr	r3, [sp, #32]
   22384:	str	r3, [sp, #28]
   22388:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   2238c:	mov	r8, r9
   22390:	mov	r7, #2
   22394:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   22398:	mov	r8, r9
   2239c:	mov	r7, sl
   223a0:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   223a4:	mov	r8, r9
   223a8:	mov	r7, sl
   223ac:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   223b0:	mov	r8, r9
   223b4:	mov	r7, sl
   223b8:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   223bc:	mov	r8, r9
   223c0:	mov	r7, sl
   223c4:	b	223d0 <_obstack_memory_used@@Base+0x16c0>
   223c8:	mov	r8, r9
   223cc:	mov	r7, sl
   223d0:	ldr	r3, [sp, #28]
   223d4:	cmp	r7, #2
   223d8:	movne	r3, #0
   223dc:	andeq	r3, r3, #1
   223e0:	cmp	r3, #0
   223e4:	movne	r7, #4
   223e8:	ldr	r3, [sp, #168]	; 0xa8
   223ec:	str	r3, [sp, #16]
   223f0:	ldr	r3, [sp, #164]	; 0xa4
   223f4:	str	r3, [sp, #12]
   223f8:	mov	r3, #0
   223fc:	str	r3, [sp, #8]
   22400:	ldr	r3, [sp, #156]	; 0x9c
   22404:	bic	r3, r3, #2
   22408:	str	r3, [sp, #4]
   2240c:	str	r7, [sp]
   22410:	ldr	r3, [sp, #24]
   22414:	ldr	r2, [sp, #48]	; 0x30
   22418:	mov	r1, r8
   2241c:	ldr	r0, [sp, #64]	; 0x40
   22420:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   22424:	mov	fp, r0
   22428:	mov	r0, fp
   2242c:	add	sp, sp, #116	; 0x74
   22430:	ldrd	r4, [sp]
   22434:	ldrd	r6, [sp, #8]
   22438:	ldrd	r8, [sp, #16]
   2243c:	ldrd	sl, [sp, #24]
   22440:	add	sp, sp, #32
   22444:	pop	{pc}		; (ldr pc, [sp], #4)
   22448:	mov	r8, r9
   2244c:	mov	r7, sl
   22450:	b	223e8 <_obstack_memory_used@@Base+0x16d8>
   22454:	add	fp, fp, #4
   22458:	str	r3, [sp, #36]	; 0x24
   2245c:	mov	r5, #0
   22460:	mov	r4, #48	; 0x30
   22464:	b	2181c <_obstack_memory_used@@Base+0xb0c>
   22468:	mov	r3, #1
   2246c:	str	r3, [sp, #32]
   22470:	str	r3, [sp, #28]
   22474:	str	r3, [sp, #52]	; 0x34
   22478:	movw	r3, #39640	; 0x9ad8
   2247c:	movt	r3, #2
   22480:	str	r3, [sp, #60]	; 0x3c
   22484:	mov	fp, #0
   22488:	mov	sl, #5
   2248c:	b	21080 <_obstack_memory_used@@Base+0x370>
   22490:	ldr	r3, [sp, #48]	; 0x30
   22494:	ldrb	r4, [r3, r6]
   22498:	cmp	r4, #126	; 0x7e
   2249c:	ldrls	pc, [pc, r4, lsl #2]
   224a0:	b	21d8c <_obstack_memory_used@@Base+0x107c>
   224a4:	andeq	r1, r2, r4, lsl r5
   224a8:	andeq	r1, r2, ip, lsl #27
   224ac:	andeq	r1, r2, ip, lsl #27
   224b0:	andeq	r1, r2, ip, lsl #27
   224b4:	andeq	r1, r2, ip, lsl #27
   224b8:	andeq	r1, r2, ip, lsl #27
   224bc:	andeq	r1, r2, ip, lsl #27
   224c0:	andeq	r2, r2, ip, lsl r2
   224c4:			; <UNDEFINED> instruction: 0x000217b8
   224c8:	andeq	r1, r2, ip, asr fp
   224cc:	andeq	r1, r2, r8, lsl ip
   224d0:	andeq	r1, r2, r0, ror fp
   224d4:	andeq	r1, r2, ip, asr #15
   224d8:	andeq	r1, r2, r0, ror #15
   224dc:	andeq	r1, r2, ip, lsl #27
   224e0:	andeq	r1, r2, ip, lsl #27
   224e4:	andeq	r1, r2, ip, lsl #27
   224e8:	andeq	r1, r2, ip, lsl #27
   224ec:	andeq	r1, r2, ip, lsl #27
   224f0:	andeq	r1, r2, ip, lsl #27
   224f4:	andeq	r1, r2, ip, lsl #27
   224f8:	andeq	r1, r2, ip, lsl #27
   224fc:	andeq	r1, r2, ip, lsl #27
   22500:	andeq	r1, r2, ip, lsl #27
   22504:	andeq	r1, r2, ip, lsl #27
   22508:	andeq	r1, r2, ip, lsl #27
   2250c:	andeq	r1, r2, ip, lsl #27
   22510:	andeq	r1, r2, ip, lsl #27
   22514:	andeq	r1, r2, ip, lsl #27
   22518:	andeq	r1, r2, ip, lsl #27
   2251c:	andeq	r1, r2, ip, lsl #27
   22520:	andeq	r1, r2, ip, lsl #27
   22524:	andeq	r1, r2, r0, lsr #25
   22528:	ldrdeq	r1, [r2], -ip
   2252c:	ldrdeq	r1, [r2], -ip
   22530:	muleq	r2, r4, ip
   22534:	ldrdeq	r1, [r2], -ip
   22538:	andeq	r2, r2, r0, lsl #4
   2253c:	ldrdeq	r1, [r2], -ip
   22540:	andeq	r1, r2, ip, ror #25
   22544:	ldrdeq	r1, [r2], -ip
   22548:	ldrdeq	r1, [r2], -ip
   2254c:	ldrdeq	r1, [r2], -ip
   22550:	andeq	r2, r2, r0, lsl #4
   22554:	andeq	r2, r2, r0, lsl #4
   22558:	andeq	r2, r2, r0, lsl #4
   2255c:	andeq	r2, r2, r0, lsl #4
   22560:	andeq	r2, r2, r0, lsl #4
   22564:	andeq	r2, r2, r0, lsl #4
   22568:	andeq	r2, r2, r0, lsl #4
   2256c:	andeq	r2, r2, r0, lsl #4
   22570:	andeq	r2, r2, r0, lsl #4
   22574:	andeq	r2, r2, r0, lsl #4
   22578:	andeq	r2, r2, r0, lsl #4
   2257c:	andeq	r2, r2, r0, lsl #4
   22580:	andeq	r2, r2, r0, lsl #4
   22584:	andeq	r2, r2, r0, lsl #4
   22588:	andeq	r2, r2, r0, lsl #4
   2258c:	andeq	r2, r2, r0, lsl #4
   22590:	ldrdeq	r1, [r2], -ip
   22594:	ldrdeq	r1, [r2], -ip
   22598:	ldrdeq	r1, [r2], -ip
   2259c:	ldrdeq	r1, [r2], -ip
   225a0:	andeq	r1, r2, ip, asr #12
   225a4:	andeq	r1, r2, ip, lsl #27
   225a8:	andeq	r2, r2, r0, lsl #4
   225ac:	andeq	r2, r2, r0, lsl #4
   225b0:	andeq	r2, r2, r0, lsl #4
   225b4:	andeq	r2, r2, r0, lsl #4
   225b8:	andeq	r2, r2, r0, lsl #4
   225bc:	andeq	r2, r2, r0, lsl #4
   225c0:	andeq	r2, r2, r0, lsl #4
   225c4:	andeq	r2, r2, r0, lsl #4
   225c8:	andeq	r2, r2, r0, lsl #4
   225cc:	andeq	r2, r2, r0, lsl #4
   225d0:	andeq	r2, r2, r0, lsl #4
   225d4:	andeq	r2, r2, r0, lsl #4
   225d8:	andeq	r2, r2, r0, lsl #4
   225dc:	andeq	r2, r2, r0, lsl #4
   225e0:	andeq	r2, r2, r0, lsl #4
   225e4:	andeq	r2, r2, r0, lsl #4
   225e8:	andeq	r2, r2, r0, lsl #4
   225ec:	andeq	r2, r2, r0, lsl #4
   225f0:	andeq	r2, r2, r0, lsl #4
   225f4:	andeq	r2, r2, r0, lsl #4
   225f8:	andeq	r2, r2, r0, lsl #4
   225fc:	andeq	r2, r2, r0, lsl #4
   22600:	andeq	r2, r2, r0, lsl #4
   22604:	andeq	r2, r2, r0, lsl #4
   22608:	andeq	r2, r2, r0, lsl #4
   2260c:	andeq	r2, r2, r0, lsl #4
   22610:	ldrdeq	r1, [r2], -ip
   22614:	andeq	r1, r2, r4, lsl #23
   22618:	andeq	r2, r2, r0, lsl #4
   2261c:	ldrdeq	r1, [r2], -ip
   22620:	andeq	r2, r2, r0, lsl #4
   22624:	ldrdeq	r1, [r2], -ip
   22628:	andeq	r2, r2, r0, lsl #4
   2262c:	andeq	r2, r2, r0, lsl #4
   22630:	andeq	r2, r2, r0, lsl #4
   22634:	andeq	r2, r2, r0, lsl #4
   22638:	andeq	r2, r2, r0, lsl #4
   2263c:	andeq	r2, r2, r0, lsl #4
   22640:	andeq	r2, r2, r0, lsl #4
   22644:	andeq	r2, r2, r0, lsl #4
   22648:	andeq	r2, r2, r0, lsl #4
   2264c:	andeq	r2, r2, r0, lsl #4
   22650:	andeq	r2, r2, r0, lsl #4
   22654:	andeq	r2, r2, r0, lsl #4
   22658:	andeq	r2, r2, r0, lsl #4
   2265c:	andeq	r2, r2, r0, lsl #4
   22660:	andeq	r2, r2, r0, lsl #4
   22664:	andeq	r2, r2, r0, lsl #4
   22668:	andeq	r2, r2, r0, lsl #4
   2266c:	andeq	r2, r2, r0, lsl #4
   22670:	andeq	r2, r2, r0, lsl #4
   22674:	andeq	r2, r2, r0, lsl #4
   22678:	andeq	r2, r2, r0, lsl #4
   2267c:	andeq	r2, r2, r0, lsl #4
   22680:	andeq	r2, r2, r0, lsl #4
   22684:	andeq	r2, r2, r0, lsl #4
   22688:	andeq	r2, r2, r0, lsl #4
   2268c:	andeq	r2, r2, r0, lsl #4
   22690:	andeq	r1, r2, r4, asr #24
   22694:	ldrdeq	r1, [r2], -ip
   22698:	andeq	r1, r2, r4, asr #24
   2269c:	muleq	r2, r4, ip
   226a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   226a4:	strd	r6, [sp, #8]
   226a8:	strd	r8, [sp, #16]
   226ac:	strd	sl, [sp, #24]
   226b0:	str	lr, [sp, #32]
   226b4:	sub	sp, sp, #52	; 0x34
   226b8:	mov	r5, r0
   226bc:	str	r1, [sp, #24]
   226c0:	str	r2, [sp, #28]
   226c4:	mov	r4, r3
   226c8:	bl	11bb8 <__errno_location@plt>
   226cc:	str	r0, [sp, #32]
   226d0:	ldr	r3, [r0]
   226d4:	str	r3, [sp, #36]	; 0x24
   226d8:	movw	r3, #45772	; 0xb2cc
   226dc:	movt	r3, #3
   226e0:	ldr	r6, [r3]
   226e4:	cmn	r5, #-2147483647	; 0x80000001
   226e8:	movne	r3, #0
   226ec:	moveq	r3, #1
   226f0:	orrs	r3, r3, r5, lsr #31
   226f4:	bne	22858 <_obstack_memory_used@@Base+0x1b48>
   226f8:	movw	r3, #45772	; 0xb2cc
   226fc:	movt	r3, #3
   22700:	ldr	r2, [r3, #4]
   22704:	cmp	r2, r5
   22708:	bgt	22778 <_obstack_memory_used@@Base+0x1a68>
   2270c:	str	r2, [sp, #44]	; 0x2c
   22710:	add	r3, r3, #8
   22714:	cmp	r6, r3
   22718:	beq	2285c <_obstack_memory_used@@Base+0x1b4c>
   2271c:	sub	r2, r5, r2
   22720:	mov	r3, #8
   22724:	str	r3, [sp]
   22728:	mvn	r3, #-2147483648	; 0x80000000
   2272c:	add	r2, r2, #1
   22730:	add	r1, sp, #44	; 0x2c
   22734:	mov	r0, r6
   22738:	bl	2410c <_obstack_memory_used@@Base+0x33fc>
   2273c:	mov	r6, r0
   22740:	movw	r3, #45772	; 0xb2cc
   22744:	movt	r3, #3
   22748:	str	r0, [r3]
   2274c:	movw	r7, #45772	; 0xb2cc
   22750:	movt	r7, #3
   22754:	ldr	r0, [r7, #4]
   22758:	ldr	r2, [sp, #44]	; 0x2c
   2275c:	sub	r2, r2, r0
   22760:	lsl	r2, r2, #3
   22764:	mov	r1, #0
   22768:	add	r0, r6, r0, lsl #3
   2276c:	bl	11be8 <memset@plt>
   22770:	ldr	r3, [sp, #44]	; 0x2c
   22774:	str	r3, [r7, #4]
   22778:	add	fp, r6, r5, lsl #3
   2277c:	ldr	r8, [r6, r5, lsl #3]
   22780:	ldr	r7, [fp, #4]
   22784:	ldr	r3, [r4, #4]
   22788:	orr	r9, r3, #1
   2278c:	add	sl, r4, #8
   22790:	ldr	r3, [r4, #44]	; 0x2c
   22794:	str	r3, [sp, #16]
   22798:	ldr	r3, [r4, #40]	; 0x28
   2279c:	str	r3, [sp, #12]
   227a0:	str	sl, [sp, #8]
   227a4:	str	r9, [sp, #4]
   227a8:	ldr	r3, [r4]
   227ac:	str	r3, [sp]
   227b0:	ldr	r3, [sp, #28]
   227b4:	ldr	r2, [sp, #24]
   227b8:	mov	r1, r8
   227bc:	mov	r0, r7
   227c0:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   227c4:	cmp	r8, r0
   227c8:	bhi	2282c <_obstack_memory_used@@Base+0x1b1c>
   227cc:	add	r8, r0, #1
   227d0:	str	r8, [r6, r5, lsl #3]
   227d4:	movw	r3, #50152	; 0xc3e8
   227d8:	movt	r3, #3
   227dc:	cmp	r7, r3
   227e0:	beq	227ec <_obstack_memory_used@@Base+0x1adc>
   227e4:	mov	r0, r7
   227e8:	bl	1c200 <__assert_fail@plt+0xa48c>
   227ec:	mov	r0, r8
   227f0:	bl	23f08 <_obstack_memory_used@@Base+0x31f8>
   227f4:	mov	r7, r0
   227f8:	str	r0, [fp, #4]
   227fc:	ldr	r3, [r4, #44]	; 0x2c
   22800:	str	r3, [sp, #16]
   22804:	ldr	r3, [r4, #40]	; 0x28
   22808:	str	r3, [sp, #12]
   2280c:	str	sl, [sp, #8]
   22810:	str	r9, [sp, #4]
   22814:	ldr	r3, [r4]
   22818:	str	r3, [sp]
   2281c:	ldr	r3, [sp, #28]
   22820:	ldr	r2, [sp, #24]
   22824:	mov	r1, r8
   22828:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   2282c:	ldr	r3, [sp, #32]
   22830:	ldr	r2, [sp, #36]	; 0x24
   22834:	str	r2, [r3]
   22838:	mov	r0, r7
   2283c:	add	sp, sp, #52	; 0x34
   22840:	ldrd	r4, [sp]
   22844:	ldrd	r6, [sp, #8]
   22848:	ldrd	r8, [sp, #16]
   2284c:	ldrd	sl, [sp, #24]
   22850:	add	sp, sp, #32
   22854:	pop	{pc}		; (ldr pc, [sp], #4)
   22858:	bl	11d2c <abort@plt>
   2285c:	sub	r2, r5, r2
   22860:	mov	r3, #8
   22864:	str	r3, [sp]
   22868:	mvn	r3, #-2147483648	; 0x80000000
   2286c:	add	r2, r2, #1
   22870:	add	r1, sp, #44	; 0x2c
   22874:	mov	r0, #0
   22878:	bl	2410c <_obstack_memory_used@@Base+0x33fc>
   2287c:	mov	r6, r0
   22880:	movw	r3, #45772	; 0xb2cc
   22884:	movt	r3, #3
   22888:	str	r0, [r3]
   2288c:	ldrd	r2, [r3, #8]
   22890:	strd	r2, [r0]
   22894:	b	2274c <_obstack_memory_used@@Base+0x1a3c>
   22898:	strd	r4, [sp, #-16]!
   2289c:	str	r6, [sp, #8]
   228a0:	str	lr, [sp, #12]
   228a4:	mov	r4, r0
   228a8:	bl	11bb8 <__errno_location@plt>
   228ac:	mov	r5, r0
   228b0:	ldr	r6, [r0]
   228b4:	cmp	r4, #0
   228b8:	ldr	r3, [pc, #32]	; 228e0 <_obstack_memory_used@@Base+0x1bd0>
   228bc:	moveq	r4, r3
   228c0:	mov	r1, #48	; 0x30
   228c4:	mov	r0, r4
   228c8:	bl	2427c <_obstack_memory_used@@Base+0x356c>
   228cc:	str	r6, [r5]
   228d0:	ldrd	r4, [sp]
   228d4:	ldr	r6, [sp, #8]
   228d8:	add	sp, sp, #12
   228dc:	pop	{pc}		; (ldr pc, [sp], #4)
   228e0:	andeq	ip, r3, r8, ror #9
   228e4:	subs	r3, r0, #0
   228e8:	ldr	r2, [pc, #8]	; 228f8 <_obstack_memory_used@@Base+0x1be8>
   228ec:	moveq	r3, r2
   228f0:	ldr	r0, [r3]
   228f4:	bx	lr
   228f8:	andeq	ip, r3, r8, ror #9
   228fc:	subs	r3, r0, #0
   22900:	ldr	r2, [pc, #8]	; 22910 <_obstack_memory_used@@Base+0x1c00>
   22904:	moveq	r3, r2
   22908:	str	r1, [r3]
   2290c:	bx	lr
   22910:	andeq	ip, r3, r8, ror #9
   22914:	push	{lr}		; (str lr, [sp, #-4]!)
   22918:	subs	r3, r0, #0
   2291c:	ldr	r0, [pc, #44]	; 22950 <_obstack_memory_used@@Base+0x1c40>
   22920:	moveq	r3, r0
   22924:	add	r3, r3, #8
   22928:	lsr	lr, r1, #5
   2292c:	and	r1, r1, #31
   22930:	ldr	ip, [r3, lr, lsl #2]
   22934:	lsr	r0, ip, r1
   22938:	eor	r2, r2, r0
   2293c:	and	r2, r2, #1
   22940:	eor	r1, ip, r2, lsl r1
   22944:	str	r1, [r3, lr, lsl #2]
   22948:	and	r0, r0, #1
   2294c:	pop	{pc}		; (ldr pc, [sp], #4)
   22950:	andeq	ip, r3, r8, ror #9
   22954:	subs	r3, r0, #0
   22958:	ldr	r2, [pc, #12]	; 2296c <_obstack_memory_used@@Base+0x1c5c>
   2295c:	moveq	r3, r2
   22960:	ldr	r0, [r3, #4]
   22964:	str	r1, [r3, #4]
   22968:	bx	lr
   2296c:	andeq	ip, r3, r8, ror #9
   22970:	subs	r3, r0, #0
   22974:	ldr	r0, [pc, #44]	; 229a8 <_obstack_memory_used@@Base+0x1c98>
   22978:	moveq	r3, r0
   2297c:	mov	r0, #10
   22980:	str	r0, [r3]
   22984:	cmp	r2, #0
   22988:	cmpne	r1, #0
   2298c:	beq	2299c <_obstack_memory_used@@Base+0x1c8c>
   22990:	str	r1, [r3, #40]	; 0x28
   22994:	str	r2, [r3, #44]	; 0x2c
   22998:	bx	lr
   2299c:	str	r4, [sp, #-8]!
   229a0:	str	lr, [sp, #4]
   229a4:	bl	11d2c <abort@plt>
   229a8:	andeq	ip, r3, r8, ror #9
   229ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   229b0:	strd	r6, [sp, #8]
   229b4:	strd	r8, [sp, #16]
   229b8:	str	sl, [sp, #24]
   229bc:	str	lr, [sp, #28]
   229c0:	sub	sp, sp, #24
   229c4:	mov	r7, r0
   229c8:	mov	r8, r1
   229cc:	mov	r9, r2
   229d0:	mov	sl, r3
   229d4:	ldr	r4, [sp, #56]	; 0x38
   229d8:	cmp	r4, #0
   229dc:	ldr	r3, [pc, #104]	; 22a4c <_obstack_memory_used@@Base+0x1d3c>
   229e0:	moveq	r4, r3
   229e4:	bl	11bb8 <__errno_location@plt>
   229e8:	mov	r5, r0
   229ec:	ldr	r6, [r0]
   229f0:	ldr	r3, [r4, #44]	; 0x2c
   229f4:	str	r3, [sp, #16]
   229f8:	ldr	r3, [r4, #40]	; 0x28
   229fc:	str	r3, [sp, #12]
   22a00:	add	r3, r4, #8
   22a04:	str	r3, [sp, #8]
   22a08:	ldr	r3, [r4, #4]
   22a0c:	str	r3, [sp, #4]
   22a10:	ldr	r3, [r4]
   22a14:	str	r3, [sp]
   22a18:	mov	r3, sl
   22a1c:	mov	r2, r9
   22a20:	mov	r1, r8
   22a24:	mov	r0, r7
   22a28:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   22a2c:	str	r6, [r5]
   22a30:	add	sp, sp, #24
   22a34:	ldrd	r4, [sp]
   22a38:	ldrd	r6, [sp, #8]
   22a3c:	ldrd	r8, [sp, #16]
   22a40:	ldr	sl, [sp, #24]
   22a44:	add	sp, sp, #28
   22a48:	pop	{pc}		; (ldr pc, [sp], #4)
   22a4c:	andeq	ip, r3, r8, ror #9
   22a50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22a54:	strd	r6, [sp, #8]
   22a58:	strd	r8, [sp, #16]
   22a5c:	strd	sl, [sp, #24]
   22a60:	str	lr, [sp, #32]
   22a64:	sub	sp, sp, #44	; 0x2c
   22a68:	mov	r8, r0
   22a6c:	mov	sl, r1
   22a70:	mov	r6, r2
   22a74:	subs	r4, r3, #0
   22a78:	ldr	r3, [pc, #200]	; 22b48 <_obstack_memory_used@@Base+0x1e38>
   22a7c:	moveq	r4, r3
   22a80:	bl	11bb8 <__errno_location@plt>
   22a84:	mov	r7, r0
   22a88:	ldr	fp, [r0]
   22a8c:	ldr	r5, [r4, #4]
   22a90:	cmp	r6, #0
   22a94:	orreq	r5, r5, #1
   22a98:	add	r9, r4, #8
   22a9c:	ldr	r3, [r4, #44]	; 0x2c
   22aa0:	str	r3, [sp, #16]
   22aa4:	ldr	r3, [r4, #40]	; 0x28
   22aa8:	str	r3, [sp, #12]
   22aac:	str	r9, [sp, #8]
   22ab0:	str	r5, [sp, #4]
   22ab4:	ldr	r3, [r4]
   22ab8:	str	r3, [sp]
   22abc:	str	sl, [sp, #36]	; 0x24
   22ac0:	mov	r3, sl
   22ac4:	str	r8, [sp, #32]
   22ac8:	mov	r2, r8
   22acc:	mov	r1, #0
   22ad0:	mov	r0, r1
   22ad4:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   22ad8:	mov	sl, r0
   22adc:	add	r8, r0, #1
   22ae0:	mov	r0, r8
   22ae4:	bl	23f08 <_obstack_memory_used@@Base+0x31f8>
   22ae8:	str	r0, [sp, #28]
   22aec:	ldr	r3, [r4, #44]	; 0x2c
   22af0:	str	r3, [sp, #16]
   22af4:	ldr	r3, [r4, #40]	; 0x28
   22af8:	str	r3, [sp, #12]
   22afc:	str	r9, [sp, #8]
   22b00:	str	r5, [sp, #4]
   22b04:	ldr	r3, [r4]
   22b08:	str	r3, [sp]
   22b0c:	ldr	r3, [sp, #36]	; 0x24
   22b10:	ldr	r2, [sp, #32]
   22b14:	mov	r1, r8
   22b18:	bl	20fa8 <_obstack_memory_used@@Base+0x298>
   22b1c:	str	fp, [r7]
   22b20:	cmp	r6, #0
   22b24:	strne	sl, [r6]
   22b28:	ldr	r0, [sp, #28]
   22b2c:	add	sp, sp, #44	; 0x2c
   22b30:	ldrd	r4, [sp]
   22b34:	ldrd	r6, [sp, #8]
   22b38:	ldrd	r8, [sp, #16]
   22b3c:	ldrd	sl, [sp, #24]
   22b40:	add	sp, sp, #32
   22b44:	pop	{pc}		; (ldr pc, [sp], #4)
   22b48:	andeq	ip, r3, r8, ror #9
   22b4c:	str	r4, [sp, #-8]!
   22b50:	str	lr, [sp, #4]
   22b54:	mov	r3, r2
   22b58:	mov	r2, #0
   22b5c:	bl	22a50 <_obstack_memory_used@@Base+0x1d40>
   22b60:	ldr	r4, [sp]
   22b64:	add	sp, sp, #4
   22b68:	pop	{pc}		; (ldr pc, [sp], #4)
   22b6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22b70:	strd	r6, [sp, #8]
   22b74:	str	r8, [sp, #16]
   22b78:	str	lr, [sp, #20]
   22b7c:	movw	r3, #45772	; 0xb2cc
   22b80:	movt	r3, #3
   22b84:	ldr	r7, [r3]
   22b88:	ldr	r3, [r3, #4]
   22b8c:	cmp	r3, #1
   22b90:	ble	22bbc <_obstack_memory_used@@Base+0x1eac>
   22b94:	mov	r4, #1
   22b98:	add	r6, r7, #4
   22b9c:	movw	r5, #45772	; 0xb2cc
   22ba0:	movt	r5, #3
   22ba4:	ldr	r0, [r6, r4, lsl #3]
   22ba8:	bl	1c200 <__assert_fail@plt+0xa48c>
   22bac:	add	r4, r4, #1
   22bb0:	ldr	r3, [r5, #4]
   22bb4:	cmp	r3, r4
   22bb8:	bgt	22ba4 <_obstack_memory_used@@Base+0x1e94>
   22bbc:	ldr	r0, [r7, #4]
   22bc0:	movw	r3, #50152	; 0xc3e8
   22bc4:	movt	r3, #3
   22bc8:	cmp	r0, r3
   22bcc:	beq	22bf0 <_obstack_memory_used@@Base+0x1ee0>
   22bd0:	bl	1c200 <__assert_fail@plt+0xa48c>
   22bd4:	movw	r3, #45772	; 0xb2cc
   22bd8:	movt	r3, #3
   22bdc:	mov	r2, #256	; 0x100
   22be0:	str	r2, [r3, #8]
   22be4:	movw	r2, #50152	; 0xc3e8
   22be8:	movt	r2, #3
   22bec:	str	r2, [r3, #12]
   22bf0:	ldr	r3, [pc, #64]	; 22c38 <_obstack_memory_used@@Base+0x1f28>
   22bf4:	cmp	r7, r3
   22bf8:	beq	22c14 <_obstack_memory_used@@Base+0x1f04>
   22bfc:	mov	r0, r7
   22c00:	bl	1c200 <__assert_fail@plt+0xa48c>
   22c04:	movw	r3, #45772	; 0xb2cc
   22c08:	movt	r3, #3
   22c0c:	add	r2, r3, #8
   22c10:	str	r2, [r3]
   22c14:	movw	r3, #45772	; 0xb2cc
   22c18:	movt	r3, #3
   22c1c:	mov	r2, #1
   22c20:	str	r2, [r3, #4]
   22c24:	ldrd	r4, [sp]
   22c28:	ldrd	r6, [sp, #8]
   22c2c:	ldr	r8, [sp, #16]
   22c30:	add	sp, sp, #20
   22c34:	pop	{pc}		; (ldr pc, [sp], #4)
   22c38:	ldrdeq	fp, [r3], -r4
   22c3c:	str	r4, [sp, #-8]!
   22c40:	str	lr, [sp, #4]
   22c44:	ldr	r3, [pc, #16]	; 22c5c <_obstack_memory_used@@Base+0x1f4c>
   22c48:	mvn	r2, #0
   22c4c:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22c50:	ldr	r4, [sp]
   22c54:	add	sp, sp, #4
   22c58:	pop	{pc}		; (ldr pc, [sp], #4)
   22c5c:	andeq	ip, r3, r8, ror #9
   22c60:	str	r4, [sp, #-8]!
   22c64:	str	lr, [sp, #4]
   22c68:	ldr	r3, [pc, #12]	; 22c7c <_obstack_memory_used@@Base+0x1f6c>
   22c6c:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22c70:	ldr	r4, [sp]
   22c74:	add	sp, sp, #4
   22c78:	pop	{pc}		; (ldr pc, [sp], #4)
   22c7c:	andeq	ip, r3, r8, ror #9
   22c80:	str	r4, [sp, #-8]!
   22c84:	str	lr, [sp, #4]
   22c88:	mov	r1, r0
   22c8c:	mov	r0, #0
   22c90:	bl	22c3c <_obstack_memory_used@@Base+0x1f2c>
   22c94:	ldr	r4, [sp]
   22c98:	add	sp, sp, #4
   22c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   22ca0:	str	r4, [sp, #-8]!
   22ca4:	str	lr, [sp, #4]
   22ca8:	mov	r2, r1
   22cac:	mov	r1, r0
   22cb0:	mov	r0, #0
   22cb4:	bl	22c60 <_obstack_memory_used@@Base+0x1f50>
   22cb8:	ldr	r4, [sp]
   22cbc:	add	sp, sp, #4
   22cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   22cc4:	strd	r4, [sp, #-12]!
   22cc8:	str	lr, [sp, #8]
   22ccc:	sub	sp, sp, #52	; 0x34
   22cd0:	mov	r4, r0
   22cd4:	mov	r5, r2
   22cd8:	mov	r0, sp
   22cdc:	bl	20e14 <_obstack_memory_used@@Base+0x104>
   22ce0:	mov	r3, sp
   22ce4:	mvn	r2, #0
   22ce8:	mov	r1, r5
   22cec:	mov	r0, r4
   22cf0:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22cf4:	add	sp, sp, #52	; 0x34
   22cf8:	ldrd	r4, [sp]
   22cfc:	add	sp, sp, #8
   22d00:	pop	{pc}		; (ldr pc, [sp], #4)
   22d04:	strd	r4, [sp, #-16]!
   22d08:	str	r6, [sp, #8]
   22d0c:	str	lr, [sp, #12]
   22d10:	sub	sp, sp, #48	; 0x30
   22d14:	mov	r4, r0
   22d18:	mov	r5, r2
   22d1c:	mov	r6, r3
   22d20:	mov	r0, sp
   22d24:	bl	20e14 <_obstack_memory_used@@Base+0x104>
   22d28:	mov	r3, sp
   22d2c:	mov	r2, r6
   22d30:	mov	r1, r5
   22d34:	mov	r0, r4
   22d38:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22d3c:	add	sp, sp, #48	; 0x30
   22d40:	ldrd	r4, [sp]
   22d44:	ldr	r6, [sp, #8]
   22d48:	add	sp, sp, #12
   22d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   22d50:	str	r4, [sp, #-8]!
   22d54:	str	lr, [sp, #4]
   22d58:	mov	r2, r1
   22d5c:	mov	r1, r0
   22d60:	mov	r0, #0
   22d64:	bl	22cc4 <_obstack_memory_used@@Base+0x1fb4>
   22d68:	ldr	r4, [sp]
   22d6c:	add	sp, sp, #4
   22d70:	pop	{pc}		; (ldr pc, [sp], #4)
   22d74:	str	r4, [sp, #-8]!
   22d78:	str	lr, [sp, #4]
   22d7c:	mov	r3, r2
   22d80:	mov	r2, r1
   22d84:	mov	r1, r0
   22d88:	mov	r0, #0
   22d8c:	bl	22d04 <_obstack_memory_used@@Base+0x1ff4>
   22d90:	ldr	r4, [sp]
   22d94:	add	sp, sp, #4
   22d98:	pop	{pc}		; (ldr pc, [sp], #4)
   22d9c:	strd	r4, [sp, #-12]!
   22da0:	str	lr, [sp, #8]
   22da4:	sub	sp, sp, #52	; 0x34
   22da8:	mov	r4, r0
   22dac:	mov	r5, r1
   22db0:	mov	r1, r2
   22db4:	ldr	r0, [pc, #92]	; 22e18 <_obstack_memory_used@@Base+0x2108>
   22db8:	ldrd	r2, [r0]
   22dbc:	strd	r2, [sp]
   22dc0:	ldrd	r2, [r0, #8]
   22dc4:	strd	r2, [sp, #8]
   22dc8:	ldrd	r2, [r0, #16]
   22dcc:	strd	r2, [sp, #16]
   22dd0:	ldrd	r2, [r0, #24]
   22dd4:	strd	r2, [sp, #24]
   22dd8:	ldrd	r2, [r0, #32]
   22ddc:	strd	r2, [sp, #32]
   22de0:	ldrd	r2, [r0, #40]	; 0x28
   22de4:	strd	r2, [sp, #40]	; 0x28
   22de8:	mov	r2, #1
   22dec:	mov	r0, sp
   22df0:	bl	22914 <_obstack_memory_used@@Base+0x1c04>
   22df4:	mov	r3, sp
   22df8:	mov	r2, r5
   22dfc:	mov	r1, r4
   22e00:	mov	r0, #0
   22e04:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22e08:	add	sp, sp, #52	; 0x34
   22e0c:	ldrd	r4, [sp]
   22e10:	add	sp, sp, #8
   22e14:	pop	{pc}		; (ldr pc, [sp], #4)
   22e18:	andeq	ip, r3, r8, ror #9
   22e1c:	str	r4, [sp, #-8]!
   22e20:	str	lr, [sp, #4]
   22e24:	mov	r2, r1
   22e28:	mvn	r1, #0
   22e2c:	bl	22d9c <_obstack_memory_used@@Base+0x208c>
   22e30:	ldr	r4, [sp]
   22e34:	add	sp, sp, #4
   22e38:	pop	{pc}		; (ldr pc, [sp], #4)
   22e3c:	str	r4, [sp, #-8]!
   22e40:	str	lr, [sp, #4]
   22e44:	mov	r1, #58	; 0x3a
   22e48:	bl	22e1c <_obstack_memory_used@@Base+0x210c>
   22e4c:	ldr	r4, [sp]
   22e50:	add	sp, sp, #4
   22e54:	pop	{pc}		; (ldr pc, [sp], #4)
   22e58:	str	r4, [sp, #-8]!
   22e5c:	str	lr, [sp, #4]
   22e60:	mov	r2, #58	; 0x3a
   22e64:	bl	22d9c <_obstack_memory_used@@Base+0x208c>
   22e68:	ldr	r4, [sp]
   22e6c:	add	sp, sp, #4
   22e70:	pop	{pc}		; (ldr pc, [sp], #4)
   22e74:	strd	r4, [sp, #-12]!
   22e78:	str	lr, [sp, #8]
   22e7c:	sub	sp, sp, #100	; 0x64
   22e80:	mov	r4, r0
   22e84:	mov	r5, r2
   22e88:	mov	r0, sp
   22e8c:	bl	20e14 <_obstack_memory_used@@Base+0x104>
   22e90:	ldrd	r2, [sp]
   22e94:	strd	r2, [sp, #48]	; 0x30
   22e98:	ldrd	r2, [sp, #8]
   22e9c:	strd	r2, [sp, #56]	; 0x38
   22ea0:	ldrd	r2, [sp, #16]
   22ea4:	strd	r2, [sp, #64]	; 0x40
   22ea8:	ldrd	r2, [sp, #24]
   22eac:	strd	r2, [sp, #72]	; 0x48
   22eb0:	ldrd	r2, [sp, #32]
   22eb4:	strd	r2, [sp, #80]	; 0x50
   22eb8:	ldrd	r2, [sp, #40]	; 0x28
   22ebc:	strd	r2, [sp, #88]	; 0x58
   22ec0:	mov	r2, #1
   22ec4:	mov	r1, #58	; 0x3a
   22ec8:	add	r0, sp, #48	; 0x30
   22ecc:	bl	22914 <_obstack_memory_used@@Base+0x1c04>
   22ed0:	add	r3, sp, #48	; 0x30
   22ed4:	mvn	r2, #0
   22ed8:	mov	r1, r5
   22edc:	mov	r0, r4
   22ee0:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22ee4:	add	sp, sp, #100	; 0x64
   22ee8:	ldrd	r4, [sp]
   22eec:	add	sp, sp, #8
   22ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   22ef4:	strd	r4, [sp, #-20]!	; 0xffffffec
   22ef8:	strd	r6, [sp, #8]
   22efc:	str	lr, [sp, #16]
   22f00:	sub	sp, sp, #52	; 0x34
   22f04:	mov	r4, r0
   22f08:	mov	r5, r3
   22f0c:	ldr	r3, [pc, #92]	; 22f70 <_obstack_memory_used@@Base+0x2260>
   22f10:	ldrd	r6, [r3]
   22f14:	strd	r6, [sp]
   22f18:	ldrd	r6, [r3, #8]
   22f1c:	strd	r6, [sp, #8]
   22f20:	ldrd	r6, [r3, #16]
   22f24:	strd	r6, [sp, #16]
   22f28:	ldrd	r6, [r3, #24]
   22f2c:	strd	r6, [sp, #24]
   22f30:	ldrd	r6, [r3, #32]
   22f34:	strd	r6, [sp, #32]
   22f38:	ldrd	r6, [r3, #40]	; 0x28
   22f3c:	strd	r6, [sp, #40]	; 0x28
   22f40:	mov	r0, sp
   22f44:	bl	22970 <_obstack_memory_used@@Base+0x1c60>
   22f48:	mov	r3, sp
   22f4c:	ldr	r2, [sp, #72]	; 0x48
   22f50:	mov	r1, r5
   22f54:	mov	r0, r4
   22f58:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22f5c:	add	sp, sp, #52	; 0x34
   22f60:	ldrd	r4, [sp]
   22f64:	ldrd	r6, [sp, #8]
   22f68:	add	sp, sp, #16
   22f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   22f70:	andeq	ip, r3, r8, ror #9
   22f74:	push	{lr}		; (str lr, [sp, #-4]!)
   22f78:	sub	sp, sp, #12
   22f7c:	mvn	ip, #0
   22f80:	str	ip, [sp]
   22f84:	bl	22ef4 <_obstack_memory_used@@Base+0x21e4>
   22f88:	add	sp, sp, #12
   22f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   22f90:	str	r4, [sp, #-8]!
   22f94:	str	lr, [sp, #4]
   22f98:	mov	r3, r2
   22f9c:	mov	r2, r1
   22fa0:	mov	r1, r0
   22fa4:	mov	r0, #0
   22fa8:	bl	22f74 <_obstack_memory_used@@Base+0x2264>
   22fac:	ldr	r4, [sp]
   22fb0:	add	sp, sp, #4
   22fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   22fb8:	push	{lr}		; (str lr, [sp, #-4]!)
   22fbc:	sub	sp, sp, #12
   22fc0:	str	r3, [sp]
   22fc4:	mov	r3, r2
   22fc8:	mov	r2, r1
   22fcc:	mov	r1, r0
   22fd0:	mov	r0, #0
   22fd4:	bl	22ef4 <_obstack_memory_used@@Base+0x21e4>
   22fd8:	add	sp, sp, #12
   22fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   22fe0:	str	r4, [sp, #-8]!
   22fe4:	str	lr, [sp, #4]
   22fe8:	ldr	r3, [pc, #12]	; 22ffc <_obstack_memory_used@@Base+0x22ec>
   22fec:	bl	226a0 <_obstack_memory_used@@Base+0x1990>
   22ff0:	ldr	r4, [sp]
   22ff4:	add	sp, sp, #4
   22ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   22ffc:	ldrdeq	fp, [r3], -ip
   23000:	str	r4, [sp, #-8]!
   23004:	str	lr, [sp, #4]
   23008:	mov	r2, r1
   2300c:	mov	r1, r0
   23010:	mov	r0, #0
   23014:	bl	22fe0 <_obstack_memory_used@@Base+0x22d0>
   23018:	ldr	r4, [sp]
   2301c:	add	sp, sp, #4
   23020:	pop	{pc}		; (ldr pc, [sp], #4)
   23024:	str	r4, [sp, #-8]!
   23028:	str	lr, [sp, #4]
   2302c:	mvn	r2, #0
   23030:	bl	22fe0 <_obstack_memory_used@@Base+0x22d0>
   23034:	ldr	r4, [sp]
   23038:	add	sp, sp, #4
   2303c:	pop	{pc}		; (ldr pc, [sp], #4)
   23040:	str	r4, [sp, #-8]!
   23044:	str	lr, [sp, #4]
   23048:	mov	r1, r0
   2304c:	mov	r0, #0
   23050:	bl	23024 <_obstack_memory_used@@Base+0x2314>
   23054:	ldr	r4, [sp]
   23058:	add	sp, sp, #4
   2305c:	pop	{pc}		; (ldr pc, [sp], #4)
   23060:	strd	r4, [sp, #-16]!
   23064:	str	r6, [sp, #8]
   23068:	str	lr, [sp, #12]
   2306c:	mov	r5, r1
   23070:	ldr	r4, [r0], #8
   23074:	cmp	r4, r0
   23078:	beq	2309c <_obstack_memory_used@@Base+0x238c>
   2307c:	mov	r0, r4
   23080:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   23084:	cmp	r0, #0
   23088:	moveq	r0, r4
   2308c:	ldrd	r4, [sp]
   23090:	ldr	r6, [sp, #8]
   23094:	add	sp, sp, #12
   23098:	pop	{pc}		; (ldr pc, [sp], #4)
   2309c:	mov	r0, r1
   230a0:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   230a4:	cmp	r0, #0
   230a8:	beq	2308c <_obstack_memory_used@@Base+0x237c>
   230ac:	mov	r2, r5
   230b0:	mov	r1, r4
   230b4:	bl	11930 <memcpy@plt>
   230b8:	b	2308c <_obstack_memory_used@@Base+0x237c>
   230bc:	strd	r4, [sp, #-16]!
   230c0:	str	r6, [sp, #8]
   230c4:	str	lr, [sp, #12]
   230c8:	mov	r4, r0
   230cc:	ldr	r5, [r0, #4]
   230d0:	lsl	r5, r5, #1
   230d4:	mov	r6, r0
   230d8:	ldr	r0, [r6], #8
   230dc:	cmp	r0, r6
   230e0:	beq	230e8 <_obstack_memory_used@@Base+0x23d8>
   230e4:	bl	1c200 <__assert_fail@plt+0xa48c>
   230e8:	ldr	r3, [r4, #4]
   230ec:	cmp	r3, r5
   230f0:	bhi	23120 <_obstack_memory_used@@Base+0x2410>
   230f4:	mov	r0, r5
   230f8:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   230fc:	cmp	r0, #0
   23100:	strne	r0, [r4]
   23104:	strne	r5, [r4, #4]
   23108:	movne	r0, #1
   2310c:	beq	2312c <_obstack_memory_used@@Base+0x241c>
   23110:	ldrd	r4, [sp]
   23114:	ldr	r6, [sp, #8]
   23118:	add	sp, sp, #12
   2311c:	pop	{pc}		; (ldr pc, [sp], #4)
   23120:	bl	11bb8 <__errno_location@plt>
   23124:	mov	r3, #12
   23128:	str	r3, [r0]
   2312c:	str	r6, [r4]
   23130:	mov	r3, #1024	; 0x400
   23134:	str	r3, [r4, #4]
   23138:	mov	r0, #0
   2313c:	b	23110 <_obstack_memory_used@@Base+0x2400>
   23140:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23144:	strd	r6, [sp, #8]
   23148:	str	r8, [sp, #16]
   2314c:	str	lr, [sp, #20]
   23150:	mov	r4, r0
   23154:	ldr	r3, [r0, #4]
   23158:	lsl	r6, r3, #1
   2315c:	mov	r5, r0
   23160:	ldr	r0, [r5], #8
   23164:	cmp	r0, r5
   23168:	beq	231a4 <_obstack_memory_used@@Base+0x2494>
   2316c:	cmp	r3, r6
   23170:	bhi	231cc <_obstack_memory_used@@Base+0x24bc>
   23174:	mov	r1, r6
   23178:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   2317c:	subs	r7, r0, #0
   23180:	beq	231d8 <_obstack_memory_used@@Base+0x24c8>
   23184:	str	r7, [r4]
   23188:	str	r6, [r4, #4]
   2318c:	mov	r0, #1
   23190:	ldrd	r4, [sp]
   23194:	ldrd	r6, [sp, #8]
   23198:	ldr	r8, [sp, #16]
   2319c:	add	sp, sp, #20
   231a0:	pop	{pc}		; (ldr pc, [sp], #4)
   231a4:	mov	r0, r6
   231a8:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   231ac:	subs	r7, r0, #0
   231b0:	moveq	r0, #0
   231b4:	beq	23190 <_obstack_memory_used@@Base+0x2480>
   231b8:	ldr	r2, [r4, #4]
   231bc:	mov	r1, r5
   231c0:	mov	r0, r7
   231c4:	bl	11930 <memcpy@plt>
   231c8:	b	23184 <_obstack_memory_used@@Base+0x2474>
   231cc:	bl	11bb8 <__errno_location@plt>
   231d0:	mov	r3, #12
   231d4:	str	r3, [r0]
   231d8:	ldr	r0, [r4]
   231dc:	bl	1c200 <__assert_fail@plt+0xa48c>
   231e0:	str	r5, [r4]
   231e4:	mov	r3, #1024	; 0x400
   231e8:	str	r3, [r4, #4]
   231ec:	mov	r0, #0
   231f0:	b	23190 <_obstack_memory_used@@Base+0x2480>
   231f4:	strd	r4, [sp, #-16]!
   231f8:	str	r6, [sp, #8]
   231fc:	str	lr, [sp, #12]
   23200:	subs	r4, r0, #0
   23204:	beq	23228 <_obstack_memory_used@@Base+0x2518>
   23208:	mov	r5, r1
   2320c:	cmp	r4, #10
   23210:	beq	2323c <_obstack_memory_used@@Base+0x252c>
   23214:	mov	r0, r4
   23218:	ldrd	r4, [sp]
   2321c:	ldr	r6, [sp, #8]
   23220:	add	sp, sp, #12
   23224:	pop	{pc}		; (ldr pc, [sp], #4)
   23228:	bl	11bb8 <__errno_location@plt>
   2322c:	mov	r3, #95	; 0x5f
   23230:	str	r3, [r0]
   23234:	mvn	r4, #0
   23238:	b	23214 <_obstack_memory_used@@Base+0x2504>
   2323c:	ldr	r6, [r1]
   23240:	movw	r1, #28816	; 0x7090
   23244:	movt	r1, #2
   23248:	mov	r0, r6
   2324c:	bl	118a0 <strcmp@plt>
   23250:	cmp	r0, #0
   23254:	bne	23214 <_obstack_memory_used@@Base+0x2504>
   23258:	mov	r0, r6
   2325c:	bl	11ce4 <freecon@plt>
   23260:	mov	r3, #0
   23264:	str	r3, [r5]
   23268:	bl	11bb8 <__errno_location@plt>
   2326c:	mov	r3, #61	; 0x3d
   23270:	str	r3, [r0]
   23274:	mvn	r4, #0
   23278:	b	23214 <_obstack_memory_used@@Base+0x2504>
   2327c:	str	r4, [sp, #-8]!
   23280:	str	lr, [sp, #4]
   23284:	mov	r4, r1
   23288:	bl	11b7c <getfilecon@plt>
   2328c:	mov	r1, r4
   23290:	bl	231f4 <_obstack_memory_used@@Base+0x24e4>
   23294:	ldr	r4, [sp]
   23298:	add	sp, sp, #4
   2329c:	pop	{pc}		; (ldr pc, [sp], #4)
   232a0:	str	r4, [sp, #-8]!
   232a4:	str	lr, [sp, #4]
   232a8:	mov	r4, r1
   232ac:	bl	11ad4 <lgetfilecon@plt>
   232b0:	mov	r1, r4
   232b4:	bl	231f4 <_obstack_memory_used@@Base+0x24e4>
   232b8:	ldr	r4, [sp]
   232bc:	add	sp, sp, #4
   232c0:	pop	{pc}		; (ldr pc, [sp], #4)
   232c4:	str	r4, [sp, #-8]!
   232c8:	str	lr, [sp, #4]
   232cc:	mov	r4, r1
   232d0:	bl	119a8 <fgetfilecon@plt>
   232d4:	mov	r1, r4
   232d8:	bl	231f4 <_obstack_memory_used@@Base+0x24e4>
   232dc:	ldr	r4, [sp]
   232e0:	add	sp, sp, #4
   232e4:	pop	{pc}		; (ldr pc, [sp], #4)
   232e8:	strd	r4, [sp, #-16]!
   232ec:	str	r6, [sp, #8]
   232f0:	str	lr, [sp, #12]
   232f4:	mov	r6, r1
   232f8:	mov	r4, r2
   232fc:	mov	r1, #0
   23300:	bl	11c54 <setlocale@plt>
   23304:	subs	r5, r0, #0
   23308:	beq	2334c <_obstack_memory_used@@Base+0x263c>
   2330c:	mov	r0, r5
   23310:	bl	11b94 <strlen@plt>
   23314:	cmp	r4, r0
   23318:	bhi	23368 <_obstack_memory_used@@Base+0x2658>
   2331c:	cmp	r4, #0
   23320:	moveq	r0, #34	; 0x22
   23324:	beq	2337c <_obstack_memory_used@@Base+0x266c>
   23328:	sub	r4, r4, #1
   2332c:	mov	r2, r4
   23330:	mov	r1, r5
   23334:	mov	r0, r6
   23338:	bl	11930 <memcpy@plt>
   2333c:	mov	r3, #0
   23340:	strb	r3, [r6, r4]
   23344:	mov	r0, #34	; 0x22
   23348:	b	2337c <_obstack_memory_used@@Base+0x266c>
   2334c:	cmp	r4, #0
   23350:	moveq	r0, #22
   23354:	beq	2337c <_obstack_memory_used@@Base+0x266c>
   23358:	mov	r3, #0
   2335c:	strb	r3, [r6]
   23360:	mov	r0, #22
   23364:	b	2337c <_obstack_memory_used@@Base+0x266c>
   23368:	add	r2, r0, #1
   2336c:	mov	r1, r5
   23370:	mov	r0, r6
   23374:	bl	11930 <memcpy@plt>
   23378:	mov	r0, #0
   2337c:	ldrd	r4, [sp]
   23380:	ldr	r6, [sp, #8]
   23384:	add	sp, sp, #12
   23388:	pop	{pc}		; (ldr pc, [sp], #4)
   2338c:	str	r4, [sp, #-8]!
   23390:	str	lr, [sp, #4]
   23394:	mov	r1, #0
   23398:	bl	11c54 <setlocale@plt>
   2339c:	ldr	r4, [sp]
   233a0:	add	sp, sp, #4
   233a4:	pop	{pc}		; (ldr pc, [sp], #4)
   233a8:	str	r4, [sp, #-8]!
   233ac:	str	lr, [sp, #4]
   233b0:	subs	r1, r0, #0
   233b4:	beq	233d4 <_obstack_memory_used@@Base+0x26c4>
   233b8:	mov	r2, #1
   233bc:	movw	r0, #37804	; 0x93ac
   233c0:	movt	r0, #2
   233c4:	bl	11bac <setenv@plt>
   233c8:	ldr	r4, [sp]
   233cc:	add	sp, sp, #4
   233d0:	pop	{pc}		; (ldr pc, [sp], #4)
   233d4:	movw	r0, #37804	; 0x93ac
   233d8:	movt	r0, #2
   233dc:	bl	11d14 <unsetenv@plt>
   233e0:	b	233c8 <_obstack_memory_used@@Base+0x26b8>
   233e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   233e8:	strd	r6, [sp, #8]
   233ec:	str	r8, [sp, #16]
   233f0:	str	lr, [sp, #20]
   233f4:	subs	r6, r0, #0
   233f8:	beq	2346c <_obstack_memory_used@@Base+0x275c>
   233fc:	mov	r0, r6
   23400:	bl	11b94 <strlen@plt>
   23404:	add	r5, r0, #1
   23408:	cmp	r5, #58	; 0x3a
   2340c:	movcs	r0, r5
   23410:	movcc	r0, #58	; 0x3a
   23414:	add	r0, r0, #9
   23418:	bic	r0, r0, #3
   2341c:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   23420:	subs	r4, r0, #0
   23424:	beq	23454 <_obstack_memory_used@@Base+0x2744>
   23428:	mov	r8, #0
   2342c:	str	r8, [r4]
   23430:	mov	r3, #1
   23434:	strb	r3, [r4, #4]
   23438:	mov	r7, r4
   2343c:	strb	r8, [r7, #5]!
   23440:	mov	r2, r5
   23444:	mov	r1, r6
   23448:	mov	r0, r7
   2344c:	bl	11930 <memcpy@plt>
   23450:	strb	r8, [r7, r5]
   23454:	mov	r0, r4
   23458:	ldrd	r4, [sp]
   2345c:	ldrd	r6, [sp, #8]
   23460:	ldr	r8, [sp, #16]
   23464:	add	sp, sp, #20
   23468:	pop	{pc}		; (ldr pc, [sp], #4)
   2346c:	mov	r0, #64	; 0x40
   23470:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   23474:	subs	r4, r0, #0
   23478:	beq	23454 <_obstack_memory_used@@Base+0x2744>
   2347c:	mov	r3, #0
   23480:	str	r3, [r4]
   23484:	strb	r3, [r4, #4]
   23488:	strb	r3, [r4, #5]
   2348c:	b	23454 <_obstack_memory_used@@Base+0x2744>
   23490:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23494:	strd	r6, [sp, #8]
   23498:	str	r8, [sp, #16]
   2349c:	str	lr, [sp, #20]
   234a0:	ldr	r6, [r1, #40]	; 0x28
   234a4:	cmp	r6, #0
   234a8:	moveq	r0, #1
   234ac:	beq	234f0 <_obstack_memory_used@@Base+0x27e0>
   234b0:	mov	r5, r0
   234b4:	mov	r7, r1
   234b8:	cmp	r1, r6
   234bc:	bhi	234d0 <_obstack_memory_used@@Base+0x27c0>
   234c0:	add	r3, r1, #44	; 0x2c
   234c4:	cmp	r6, r3
   234c8:	movcc	r0, #1
   234cc:	bcc	234f0 <_obstack_memory_used@@Base+0x27e0>
   234d0:	ldrb	r3, [r6]
   234d4:	cmp	r3, #0
   234d8:	addne	r4, r5, #5
   234dc:	bne	23554 <_obstack_memory_used@@Base+0x2844>
   234e0:	movw	r4, #39300	; 0x9984
   234e4:	movt	r4, #2
   234e8:	str	r4, [r7, #40]	; 0x28
   234ec:	mov	r0, #1
   234f0:	ldrd	r4, [sp]
   234f4:	ldrd	r6, [sp, #8]
   234f8:	ldr	r8, [sp, #16]
   234fc:	add	sp, sp, #20
   23500:	pop	{pc}		; (ldr pc, [sp], #4)
   23504:	mov	r0, r6
   23508:	bl	233e4 <_obstack_memory_used@@Base+0x26d4>
   2350c:	str	r0, [r5]
   23510:	cmp	r0, #0
   23514:	moveq	r0, #0
   23518:	beq	234f0 <_obstack_memory_used@@Base+0x27e0>
   2351c:	mov	r3, #0
   23520:	strb	r3, [r0, #4]
   23524:	add	r4, r0, #5
   23528:	b	234e8 <_obstack_memory_used@@Base+0x27d8>
   2352c:	mov	r0, r4
   23530:	bl	11b94 <strlen@plt>
   23534:	add	r0, r0, #1
   23538:	ldrb	r3, [r4, r0]!
   2353c:	cmp	r3, #0
   23540:	bne	23554 <_obstack_memory_used@@Base+0x2844>
   23544:	ldr	r3, [r5]
   23548:	cmp	r3, #0
   2354c:	addne	r4, r3, #5
   23550:	movne	r5, r3
   23554:	mov	r1, r6
   23558:	mov	r0, r4
   2355c:	bl	118a0 <strcmp@plt>
   23560:	cmp	r0, #0
   23564:	beq	234e8 <_obstack_memory_used@@Base+0x27d8>
   23568:	ldrb	r3, [r4]
   2356c:	cmp	r3, #0
   23570:	bne	2352c <_obstack_memory_used@@Base+0x281c>
   23574:	add	r3, r5, #5
   23578:	cmp	r4, r3
   2357c:	bne	2358c <_obstack_memory_used@@Base+0x287c>
   23580:	ldrb	r3, [r5, #4]
   23584:	cmp	r3, #0
   23588:	bne	2352c <_obstack_memory_used@@Base+0x281c>
   2358c:	mov	r0, r6
   23590:	bl	11b94 <strlen@plt>
   23594:	add	r8, r0, #1
   23598:	add	r3, r5, #64	; 0x40
   2359c:	sub	r3, r3, r4
   235a0:	cmp	r3, r8
   235a4:	ble	23504 <_obstack_memory_used@@Base+0x27f4>
   235a8:	mov	r2, r8
   235ac:	mov	r1, r6
   235b0:	mov	r0, r4
   235b4:	bl	11930 <memcpy@plt>
   235b8:	mov	r3, #0
   235bc:	strb	r3, [r4, r8]
   235c0:	b	234e8 <_obstack_memory_used@@Base+0x27d8>
   235c4:	cmp	r0, #1
   235c8:	bxeq	lr
   235cc:	cmp	r0, #0
   235d0:	bxeq	lr
   235d4:	str	r4, [sp, #-8]!
   235d8:	str	lr, [sp, #4]
   235dc:	ldr	r4, [r0]
   235e0:	bl	1c200 <__assert_fail@plt+0xa48c>
   235e4:	mov	r0, r4
   235e8:	cmp	r4, #0
   235ec:	bne	235dc <_obstack_memory_used@@Base+0x28cc>
   235f0:	ldr	r4, [sp]
   235f4:	add	sp, sp, #4
   235f8:	pop	{pc}		; (ldr pc, [sp], #4)
   235fc:	strd	r4, [sp, #-16]!
   23600:	str	r6, [sp, #8]
   23604:	str	lr, [sp, #12]
   23608:	mov	r4, r0
   2360c:	movw	r0, #37804	; 0x93ac
   23610:	movt	r0, #2
   23614:	bl	11ac8 <getenv@plt>
   23618:	subs	r5, r0, #0
   2361c:	beq	23664 <_obstack_memory_used@@Base+0x2954>
   23620:	ldrb	r3, [r4, #4]
   23624:	cmp	r3, #0
   23628:	moveq	r0, #0
   2362c:	beq	23644 <_obstack_memory_used@@Base+0x2934>
   23630:	mov	r1, r5
   23634:	add	r0, r4, #5
   23638:	bl	118a0 <strcmp@plt>
   2363c:	clz	r0, r0
   23640:	lsr	r0, r0, #5
   23644:	cmp	r0, #0
   23648:	movne	r5, #1
   2364c:	beq	23674 <_obstack_memory_used@@Base+0x2964>
   23650:	mov	r0, r5
   23654:	ldrd	r4, [sp]
   23658:	ldr	r6, [sp, #8]
   2365c:	add	sp, sp, #12
   23660:	pop	{pc}		; (ldr pc, [sp], #4)
   23664:	ldrb	r0, [r4, #4]
   23668:	clz	r0, r0
   2366c:	lsr	r0, r0, #5
   23670:	b	23644 <_obstack_memory_used@@Base+0x2934>
   23674:	mov	r0, r5
   23678:	bl	233e4 <_obstack_memory_used@@Base+0x26d4>
   2367c:	subs	r5, r0, #0
   23680:	beq	23650 <_obstack_memory_used@@Base+0x2940>
   23684:	ldrb	r3, [r4, #4]
   23688:	cmp	r3, #0
   2368c:	addne	r0, r4, #5
   23690:	moveq	r0, #0
   23694:	bl	233a8 <_obstack_memory_used@@Base+0x2698>
   23698:	cmp	r0, #0
   2369c:	beq	236c0 <_obstack_memory_used@@Base+0x29b0>
   236a0:	bl	11bb8 <__errno_location@plt>
   236a4:	mov	r4, r0
   236a8:	ldr	r6, [r0]
   236ac:	mov	r0, r5
   236b0:	bl	235c4 <_obstack_memory_used@@Base+0x28b4>
   236b4:	str	r6, [r4]
   236b8:	mov	r5, #0
   236bc:	b	23650 <_obstack_memory_used@@Base+0x2940>
   236c0:	bl	119fc <tzset@plt>
   236c4:	b	23650 <_obstack_memory_used@@Base+0x2940>
   236c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   236cc:	strd	r6, [sp, #8]
   236d0:	str	r8, [sp, #16]
   236d4:	str	lr, [sp, #20]
   236d8:	cmp	r0, #1
   236dc:	moveq	r5, #1
   236e0:	beq	23724 <_obstack_memory_used@@Base+0x2a14>
   236e4:	mov	r4, r0
   236e8:	bl	11bb8 <__errno_location@plt>
   236ec:	mov	r6, r0
   236f0:	ldr	r7, [r0]
   236f4:	ldrb	r3, [r4, #4]
   236f8:	cmp	r3, #0
   236fc:	addne	r0, r4, #5
   23700:	moveq	r0, #0
   23704:	bl	233a8 <_obstack_memory_used@@Base+0x2698>
   23708:	cmp	r0, #0
   2370c:	beq	2373c <_obstack_memory_used@@Base+0x2a2c>
   23710:	ldr	r7, [r6]
   23714:	mov	r5, #0
   23718:	mov	r0, r4
   2371c:	bl	235c4 <_obstack_memory_used@@Base+0x28b4>
   23720:	str	r7, [r6]
   23724:	mov	r0, r5
   23728:	ldrd	r4, [sp]
   2372c:	ldrd	r6, [sp, #8]
   23730:	ldr	r8, [sp, #16]
   23734:	add	sp, sp, #20
   23738:	pop	{pc}		; (ldr pc, [sp], #4)
   2373c:	bl	119fc <tzset@plt>
   23740:	mov	r5, #1
   23744:	b	23718 <_obstack_memory_used@@Base+0x2a08>
   23748:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2374c:	strd	r6, [sp, #8]
   23750:	str	r8, [sp, #16]
   23754:	str	lr, [sp, #20]
   23758:	mov	r6, r1
   2375c:	mov	r4, r2
   23760:	subs	r5, r0, #0
   23764:	beq	237d0 <_obstack_memory_used@@Base+0x2ac0>
   23768:	mov	r0, r5
   2376c:	bl	235fc <_obstack_memory_used@@Base+0x28ec>
   23770:	subs	r7, r0, #0
   23774:	moveq	r4, r7
   23778:	beq	237b8 <_obstack_memory_used@@Base+0x2aa8>
   2377c:	mov	r1, r4
   23780:	mov	r0, r6
   23784:	bl	119b4 <localtime_r@plt>
   23788:	subs	r6, r0, #0
   2378c:	beq	237e4 <_obstack_memory_used@@Base+0x2ad4>
   23790:	mov	r1, r4
   23794:	mov	r0, r5
   23798:	bl	23490 <_obstack_memory_used@@Base+0x2780>
   2379c:	mov	r5, r0
   237a0:	mov	r0, r7
   237a4:	bl	236c8 <_obstack_memory_used@@Base+0x29b8>
   237a8:	and	r0, r0, r5
   237ac:	uxtb	r0, r0
   237b0:	cmp	r0, #0
   237b4:	moveq	r4, #0
   237b8:	mov	r0, r4
   237bc:	ldrd	r4, [sp]
   237c0:	ldrd	r6, [sp, #8]
   237c4:	ldr	r8, [sp, #16]
   237c8:	add	sp, sp, #20
   237cc:	pop	{pc}		; (ldr pc, [sp], #4)
   237d0:	mov	r1, r2
   237d4:	mov	r0, r6
   237d8:	bl	11888 <gmtime_r@plt>
   237dc:	mov	r4, r0
   237e0:	b	237b8 <_obstack_memory_used@@Base+0x2aa8>
   237e4:	mov	r0, r7
   237e8:	bl	236c8 <_obstack_memory_used@@Base+0x29b8>
   237ec:	mov	r4, r6
   237f0:	b	237b8 <_obstack_memory_used@@Base+0x2aa8>
   237f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   237f8:	strd	r6, [sp, #8]
   237fc:	str	lr, [sp, #16]
   23800:	sub	sp, sp, #52	; 0x34
   23804:	mov	r4, r1
   23808:	subs	r5, r0, #0
   2380c:	beq	23888 <_obstack_memory_used@@Base+0x2b78>
   23810:	mov	r0, r5
   23814:	bl	235fc <_obstack_memory_used@@Base+0x28ec>
   23818:	subs	r7, r0, #0
   2381c:	beq	23904 <_obstack_memory_used@@Base+0x2bf4>
   23820:	ldr	r3, [r4]
   23824:	str	r3, [sp, #4]
   23828:	ldr	r3, [r4, #4]
   2382c:	str	r3, [sp, #8]
   23830:	ldr	r3, [r4, #8]
   23834:	str	r3, [sp, #12]
   23838:	ldr	r3, [r4, #12]
   2383c:	str	r3, [sp, #16]
   23840:	ldr	r3, [r4, #16]
   23844:	str	r3, [sp, #20]
   23848:	ldr	r3, [r4, #20]
   2384c:	str	r3, [sp, #24]
   23850:	mvn	r3, #0
   23854:	str	r3, [sp, #32]
   23858:	ldr	r3, [r4, #32]
   2385c:	str	r3, [sp, #36]	; 0x24
   23860:	add	r0, sp, #4
   23864:	bl	118b8 <mktime@plt>
   23868:	mov	r6, r0
   2386c:	ldr	r3, [sp, #32]
   23870:	cmp	r3, #0
   23874:	bge	23898 <_obstack_memory_used@@Base+0x2b88>
   23878:	mov	r0, r7
   2387c:	bl	236c8 <_obstack_memory_used@@Base+0x29b8>
   23880:	mvn	r6, #0
   23884:	b	238ec <_obstack_memory_used@@Base+0x2bdc>
   23888:	mov	r0, r1
   2388c:	bl	11cc0 <timegm@plt>
   23890:	mov	r6, r0
   23894:	b	238ec <_obstack_memory_used@@Base+0x2bdc>
   23898:	add	r1, sp, #4
   2389c:	mov	r0, r5
   238a0:	bl	23490 <_obstack_memory_used@@Base+0x2780>
   238a4:	mov	r5, r0
   238a8:	mov	r0, r7
   238ac:	bl	236c8 <_obstack_memory_used@@Base+0x29b8>
   238b0:	and	r0, r0, r5
   238b4:	tst	r0, #255	; 0xff
   238b8:	beq	23880 <_obstack_memory_used@@Base+0x2b70>
   238bc:	ldrd	r2, [sp, #4]
   238c0:	strd	r2, [r4]
   238c4:	ldrd	r2, [sp, #12]
   238c8:	strd	r2, [r4, #8]
   238cc:	ldrd	r2, [sp, #20]
   238d0:	strd	r2, [r4, #16]
   238d4:	ldrd	r2, [sp, #28]
   238d8:	strd	r2, [r4, #24]
   238dc:	ldrd	r2, [sp, #36]	; 0x24
   238e0:	strd	r2, [r4, #32]
   238e4:	ldr	r3, [sp, #44]	; 0x2c
   238e8:	str	r3, [r4, #40]	; 0x28
   238ec:	mov	r0, r6
   238f0:	add	sp, sp, #52	; 0x34
   238f4:	ldrd	r4, [sp]
   238f8:	ldrd	r6, [sp, #8]
   238fc:	add	sp, sp, #16
   23900:	pop	{pc}		; (ldr pc, [sp], #4)
   23904:	mvn	r6, #0
   23908:	b	238ec <_obstack_memory_used@@Base+0x2bdc>
   2390c:	strd	r4, [sp, #-16]!
   23910:	str	r6, [sp, #8]
   23914:	str	lr, [sp, #12]
   23918:	sub	sp, sp, #32
   2391c:	mov	r4, r0
   23920:	ldr	r5, [sp, #48]	; 0x30
   23924:	ldr	r6, [sp, #52]	; 0x34
   23928:	cmp	r1, #0
   2392c:	beq	239f8 <_obstack_memory_used@@Base+0x2ce8>
   23930:	str	r3, [sp, #4]
   23934:	str	r2, [sp]
   23938:	mov	r3, r1
   2393c:	movw	r2, #39744	; 0x9b40
   23940:	movt	r2, #2
   23944:	mov	r1, #1
   23948:	bl	11c18 <__fprintf_chk@plt>
   2394c:	mov	r2, #5
   23950:	movw	r1, #39764	; 0x9b54
   23954:	movt	r1, #2
   23958:	mov	r0, #0
   2395c:	bl	11984 <dcgettext@plt>
   23960:	movw	r3, #2022	; 0x7e6
   23964:	str	r3, [sp]
   23968:	mov	r3, r0
   2396c:	movw	r2, #40492	; 0x9e2c
   23970:	movt	r2, #2
   23974:	mov	r1, #1
   23978:	mov	r0, r4
   2397c:	bl	11c18 <__fprintf_chk@plt>
   23980:	mov	r1, r4
   23984:	mov	r0, #10
   23988:	bl	11978 <fputc_unlocked@plt>
   2398c:	mov	r2, #5
   23990:	movw	r1, #39768	; 0x9b58
   23994:	movt	r1, #2
   23998:	mov	r0, #0
   2399c:	bl	11984 <dcgettext@plt>
   239a0:	movw	r3, #39940	; 0x9c04
   239a4:	movt	r3, #2
   239a8:	mov	r2, r0
   239ac:	mov	r1, #1
   239b0:	mov	r0, r4
   239b4:	bl	11c18 <__fprintf_chk@plt>
   239b8:	mov	r1, r4
   239bc:	mov	r0, #10
   239c0:	bl	11978 <fputc_unlocked@plt>
   239c4:	cmp	r6, #9
   239c8:	ldrls	pc, [pc, r6, lsl #2]
   239cc:	b	23cd0 <_obstack_memory_used@@Base+0x2fc0>
   239d0:	andeq	r3, r2, ip, lsr sl
   239d4:	andeq	r3, r2, r4, lsl sl
   239d8:	andeq	r3, r2, r0, asr sl
   239dc:	andeq	r3, r2, r4, lsl #21
   239e0:	andeq	r3, r2, r0, asr #21
   239e4:	andeq	r3, r2, r4, lsl #22
   239e8:	andeq	r3, r2, r0, asr fp
   239ec:	andeq	r3, r2, r4, lsr #23
   239f0:	andeq	r3, r2, r0, lsl #24
   239f4:	andeq	r3, r2, r4, ror #24
   239f8:	str	r3, [sp]
   239fc:	mov	r3, r2
   23a00:	movw	r2, #39756	; 0x9b4c
   23a04:	movt	r2, #2
   23a08:	mov	r1, #1
   23a0c:	bl	11c18 <__fprintf_chk@plt>
   23a10:	b	2394c <_obstack_memory_used@@Base+0x2c3c>
   23a14:	mov	r2, #5
   23a18:	movw	r1, #39976	; 0x9c28
   23a1c:	movt	r1, #2
   23a20:	mov	r0, #0
   23a24:	bl	11984 <dcgettext@plt>
   23a28:	ldr	r3, [r5]
   23a2c:	mov	r2, r0
   23a30:	mov	r1, #1
   23a34:	mov	r0, r4
   23a38:	bl	11c18 <__fprintf_chk@plt>
   23a3c:	add	sp, sp, #32
   23a40:	ldrd	r4, [sp]
   23a44:	ldr	r6, [sp, #8]
   23a48:	add	sp, sp, #12
   23a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   23a50:	mov	r2, #5
   23a54:	movw	r1, #39992	; 0x9c38
   23a58:	movt	r1, #2
   23a5c:	mov	r0, #0
   23a60:	bl	11984 <dcgettext@plt>
   23a64:	ldr	r3, [r5, #4]
   23a68:	str	r3, [sp]
   23a6c:	ldr	r3, [r5]
   23a70:	mov	r2, r0
   23a74:	mov	r1, #1
   23a78:	mov	r0, r4
   23a7c:	bl	11c18 <__fprintf_chk@plt>
   23a80:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23a84:	mov	r2, #5
   23a88:	movw	r1, #40016	; 0x9c50
   23a8c:	movt	r1, #2
   23a90:	mov	r0, #0
   23a94:	bl	11984 <dcgettext@plt>
   23a98:	ldr	r3, [r5, #8]
   23a9c:	str	r3, [sp, #4]
   23aa0:	ldr	r3, [r5, #4]
   23aa4:	str	r3, [sp]
   23aa8:	ldr	r3, [r5]
   23aac:	mov	r2, r0
   23ab0:	mov	r1, #1
   23ab4:	mov	r0, r4
   23ab8:	bl	11c18 <__fprintf_chk@plt>
   23abc:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23ac0:	mov	r2, #5
   23ac4:	movw	r1, #40044	; 0x9c6c
   23ac8:	movt	r1, #2
   23acc:	mov	r0, #0
   23ad0:	bl	11984 <dcgettext@plt>
   23ad4:	ldr	r3, [r5, #12]
   23ad8:	str	r3, [sp, #8]
   23adc:	ldr	r3, [r5, #8]
   23ae0:	str	r3, [sp, #4]
   23ae4:	ldr	r3, [r5, #4]
   23ae8:	str	r3, [sp]
   23aec:	ldr	r3, [r5]
   23af0:	mov	r2, r0
   23af4:	mov	r1, #1
   23af8:	mov	r0, r4
   23afc:	bl	11c18 <__fprintf_chk@plt>
   23b00:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23b04:	mov	r2, #5
   23b08:	movw	r1, #40076	; 0x9c8c
   23b0c:	movt	r1, #2
   23b10:	mov	r0, #0
   23b14:	bl	11984 <dcgettext@plt>
   23b18:	ldr	r3, [r5, #16]
   23b1c:	str	r3, [sp, #12]
   23b20:	ldr	r3, [r5, #12]
   23b24:	str	r3, [sp, #8]
   23b28:	ldr	r3, [r5, #8]
   23b2c:	str	r3, [sp, #4]
   23b30:	ldr	r3, [r5, #4]
   23b34:	str	r3, [sp]
   23b38:	ldr	r3, [r5]
   23b3c:	mov	r2, r0
   23b40:	mov	r1, #1
   23b44:	mov	r0, r4
   23b48:	bl	11c18 <__fprintf_chk@plt>
   23b4c:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23b50:	mov	r2, #5
   23b54:	movw	r1, #40112	; 0x9cb0
   23b58:	movt	r1, #2
   23b5c:	mov	r0, #0
   23b60:	bl	11984 <dcgettext@plt>
   23b64:	ldr	r3, [r5, #20]
   23b68:	str	r3, [sp, #16]
   23b6c:	ldr	r3, [r5, #16]
   23b70:	str	r3, [sp, #12]
   23b74:	ldr	r3, [r5, #12]
   23b78:	str	r3, [sp, #8]
   23b7c:	ldr	r3, [r5, #8]
   23b80:	str	r3, [sp, #4]
   23b84:	ldr	r3, [r5, #4]
   23b88:	str	r3, [sp]
   23b8c:	ldr	r3, [r5]
   23b90:	mov	r2, r0
   23b94:	mov	r1, #1
   23b98:	mov	r0, r4
   23b9c:	bl	11c18 <__fprintf_chk@plt>
   23ba0:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23ba4:	mov	r2, #5
   23ba8:	movw	r1, #40152	; 0x9cd8
   23bac:	movt	r1, #2
   23bb0:	mov	r0, #0
   23bb4:	bl	11984 <dcgettext@plt>
   23bb8:	ldr	r3, [r5, #24]
   23bbc:	str	r3, [sp, #20]
   23bc0:	ldr	r3, [r5, #20]
   23bc4:	str	r3, [sp, #16]
   23bc8:	ldr	r3, [r5, #16]
   23bcc:	str	r3, [sp, #12]
   23bd0:	ldr	r3, [r5, #12]
   23bd4:	str	r3, [sp, #8]
   23bd8:	ldr	r3, [r5, #8]
   23bdc:	str	r3, [sp, #4]
   23be0:	ldr	r3, [r5, #4]
   23be4:	str	r3, [sp]
   23be8:	ldr	r3, [r5]
   23bec:	mov	r2, r0
   23bf0:	mov	r1, #1
   23bf4:	mov	r0, r4
   23bf8:	bl	11c18 <__fprintf_chk@plt>
   23bfc:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23c00:	mov	r2, #5
   23c04:	movw	r1, #40196	; 0x9d04
   23c08:	movt	r1, #2
   23c0c:	mov	r0, #0
   23c10:	bl	11984 <dcgettext@plt>
   23c14:	ldr	r3, [r5, #28]
   23c18:	str	r3, [sp, #24]
   23c1c:	ldr	r3, [r5, #24]
   23c20:	str	r3, [sp, #20]
   23c24:	ldr	r3, [r5, #20]
   23c28:	str	r3, [sp, #16]
   23c2c:	ldr	r3, [r5, #16]
   23c30:	str	r3, [sp, #12]
   23c34:	ldr	r3, [r5, #12]
   23c38:	str	r3, [sp, #8]
   23c3c:	ldr	r3, [r5, #8]
   23c40:	str	r3, [sp, #4]
   23c44:	ldr	r3, [r5, #4]
   23c48:	str	r3, [sp]
   23c4c:	ldr	r3, [r5]
   23c50:	mov	r2, r0
   23c54:	mov	r1, #1
   23c58:	mov	r0, r4
   23c5c:	bl	11c18 <__fprintf_chk@plt>
   23c60:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23c64:	mov	r2, #5
   23c68:	movw	r1, #40244	; 0x9d34
   23c6c:	movt	r1, #2
   23c70:	mov	r0, #0
   23c74:	bl	11984 <dcgettext@plt>
   23c78:	ldr	r3, [r5, #32]
   23c7c:	str	r3, [sp, #28]
   23c80:	ldr	r3, [r5, #28]
   23c84:	str	r3, [sp, #24]
   23c88:	ldr	r3, [r5, #24]
   23c8c:	str	r3, [sp, #20]
   23c90:	ldr	r3, [r5, #20]
   23c94:	str	r3, [sp, #16]
   23c98:	ldr	r3, [r5, #16]
   23c9c:	str	r3, [sp, #12]
   23ca0:	ldr	r3, [r5, #12]
   23ca4:	str	r3, [sp, #8]
   23ca8:	ldr	r3, [r5, #8]
   23cac:	str	r3, [sp, #4]
   23cb0:	ldr	r3, [r5, #4]
   23cb4:	str	r3, [sp]
   23cb8:	ldr	r3, [r5]
   23cbc:	mov	r2, r0
   23cc0:	mov	r1, #1
   23cc4:	mov	r0, r4
   23cc8:	bl	11c18 <__fprintf_chk@plt>
   23ccc:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23cd0:	mov	r2, #5
   23cd4:	movw	r1, #40296	; 0x9d68
   23cd8:	movt	r1, #2
   23cdc:	mov	r0, #0
   23ce0:	bl	11984 <dcgettext@plt>
   23ce4:	ldr	r3, [r5, #32]
   23ce8:	str	r3, [sp, #28]
   23cec:	ldr	r3, [r5, #28]
   23cf0:	str	r3, [sp, #24]
   23cf4:	ldr	r3, [r5, #24]
   23cf8:	str	r3, [sp, #20]
   23cfc:	ldr	r3, [r5, #20]
   23d00:	str	r3, [sp, #16]
   23d04:	ldr	r3, [r5, #16]
   23d08:	str	r3, [sp, #12]
   23d0c:	ldr	r3, [r5, #12]
   23d10:	str	r3, [sp, #8]
   23d14:	ldr	r3, [r5, #8]
   23d18:	str	r3, [sp, #4]
   23d1c:	ldr	r3, [r5, #4]
   23d20:	str	r3, [sp]
   23d24:	ldr	r3, [r5]
   23d28:	mov	r2, r0
   23d2c:	mov	r1, #1
   23d30:	mov	r0, r4
   23d34:	bl	11c18 <__fprintf_chk@plt>
   23d38:	b	23a3c <_obstack_memory_used@@Base+0x2d2c>
   23d3c:	strd	r4, [sp, #-12]!
   23d40:	str	lr, [sp, #8]
   23d44:	sub	sp, sp, #12
   23d48:	ldr	r5, [sp, #24]
   23d4c:	ldr	ip, [r5]
   23d50:	cmp	ip, #0
   23d54:	beq	23d8c <_obstack_memory_used@@Base+0x307c>
   23d58:	mov	lr, r5
   23d5c:	mov	ip, #0
   23d60:	add	ip, ip, #1
   23d64:	ldr	r4, [lr, #4]!
   23d68:	cmp	r4, #0
   23d6c:	bne	23d60 <_obstack_memory_used@@Base+0x3050>
   23d70:	str	ip, [sp, #4]
   23d74:	str	r5, [sp]
   23d78:	bl	2390c <_obstack_memory_used@@Base+0x2bfc>
   23d7c:	add	sp, sp, #12
   23d80:	ldrd	r4, [sp]
   23d84:	add	sp, sp, #8
   23d88:	pop	{pc}		; (ldr pc, [sp], #4)
   23d8c:	mov	ip, #0
   23d90:	b	23d70 <_obstack_memory_used@@Base+0x3060>
   23d94:	strd	r4, [sp, #-12]!
   23d98:	str	lr, [sp, #8]
   23d9c:	sub	sp, sp, #52	; 0x34
   23da0:	ldr	r5, [sp, #64]	; 0x40
   23da4:	add	r4, sp, #8
   23da8:	mov	ip, #0
   23dac:	ldr	lr, [r5], #4
   23db0:	str	lr, [r4], #4
   23db4:	cmp	lr, #0
   23db8:	beq	23dc8 <_obstack_memory_used@@Base+0x30b8>
   23dbc:	add	ip, ip, #1
   23dc0:	cmp	ip, #10
   23dc4:	bne	23dac <_obstack_memory_used@@Base+0x309c>
   23dc8:	str	ip, [sp, #4]
   23dcc:	add	ip, sp, #8
   23dd0:	str	ip, [sp]
   23dd4:	bl	2390c <_obstack_memory_used@@Base+0x2bfc>
   23dd8:	add	sp, sp, #52	; 0x34
   23ddc:	ldrd	r4, [sp]
   23de0:	add	sp, sp, #8
   23de4:	pop	{pc}		; (ldr pc, [sp], #4)
   23de8:	push	{r3}		; (str r3, [sp, #-4]!)
   23dec:	push	{lr}		; (str lr, [sp, #-4]!)
   23df0:	sub	sp, sp, #16
   23df4:	add	r3, sp, #24
   23df8:	str	r3, [sp, #12]
   23dfc:	str	r3, [sp]
   23e00:	ldr	r3, [sp, #20]
   23e04:	bl	23d94 <_obstack_memory_used@@Base+0x3084>
   23e08:	add	sp, sp, #16
   23e0c:	pop	{lr}		; (ldr lr, [sp], #4)
   23e10:	add	sp, sp, #4
   23e14:	bx	lr
   23e18:	str	r4, [sp, #-8]!
   23e1c:	str	lr, [sp, #4]
   23e20:	movw	r3, #45860	; 0xb324
   23e24:	movt	r3, #3
   23e28:	ldr	r1, [r3]
   23e2c:	mov	r0, #10
   23e30:	bl	11978 <fputc_unlocked@plt>
   23e34:	mov	r2, #5
   23e38:	movw	r1, #40356	; 0x9da4
   23e3c:	movt	r1, #2
   23e40:	mov	r0, #0
   23e44:	bl	11984 <dcgettext@plt>
   23e48:	movw	r2, #40376	; 0x9db8
   23e4c:	movt	r2, #2
   23e50:	mov	r1, r0
   23e54:	mov	r0, #1
   23e58:	bl	11bf4 <__printf_chk@plt>
   23e5c:	mov	r2, #5
   23e60:	movw	r1, #40400	; 0x9dd0
   23e64:	movt	r1, #2
   23e68:	mov	r0, #0
   23e6c:	bl	11984 <dcgettext@plt>
   23e70:	movw	r3, #36684	; 0x8f4c
   23e74:	movt	r3, #2
   23e78:	movw	r2, #36724	; 0x8f74
   23e7c:	movt	r2, #2
   23e80:	mov	r1, r0
   23e84:	mov	r0, #1
   23e88:	bl	11bf4 <__printf_chk@plt>
   23e8c:	mov	r2, #5
   23e90:	movw	r1, #40420	; 0x9de4
   23e94:	movt	r1, #2
   23e98:	mov	r0, #0
   23e9c:	bl	11984 <dcgettext@plt>
   23ea0:	movw	r2, #40460	; 0x9e0c
   23ea4:	movt	r2, #2
   23ea8:	mov	r1, r0
   23eac:	mov	r0, #1
   23eb0:	bl	11bf4 <__printf_chk@plt>
   23eb4:	ldr	r4, [sp]
   23eb8:	add	sp, sp, #4
   23ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   23ec0:	str	r4, [sp, #-8]!
   23ec4:	str	lr, [sp, #4]
   23ec8:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   23ecc:	cmp	r0, #0
   23ed0:	beq	23ee0 <_obstack_memory_used@@Base+0x31d0>
   23ed4:	ldr	r4, [sp]
   23ed8:	add	sp, sp, #4
   23edc:	pop	{pc}		; (ldr pc, [sp], #4)
   23ee0:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   23ee4:	str	r4, [sp, #-8]!
   23ee8:	str	lr, [sp, #4]
   23eec:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   23ef0:	cmp	r0, #0
   23ef4:	beq	23f04 <_obstack_memory_used@@Base+0x31f4>
   23ef8:	ldr	r4, [sp]
   23efc:	add	sp, sp, #4
   23f00:	pop	{pc}		; (ldr pc, [sp], #4)
   23f04:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   23f08:	str	r4, [sp, #-8]!
   23f0c:	str	lr, [sp, #4]
   23f10:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   23f14:	ldr	r4, [sp]
   23f18:	add	sp, sp, #4
   23f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   23f20:	strd	r4, [sp, #-16]!
   23f24:	str	r6, [sp, #8]
   23f28:	str	lr, [sp, #12]
   23f2c:	mov	r5, r0
   23f30:	mov	r4, r1
   23f34:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   23f38:	cmp	r0, #0
   23f3c:	beq	23f50 <_obstack_memory_used@@Base+0x3240>
   23f40:	ldrd	r4, [sp]
   23f44:	ldr	r6, [sp, #8]
   23f48:	add	sp, sp, #12
   23f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   23f50:	adds	r4, r4, #0
   23f54:	movne	r4, #1
   23f58:	cmp	r5, #0
   23f5c:	moveq	r4, #1
   23f60:	cmp	r4, #0
   23f64:	beq	23f40 <_obstack_memory_used@@Base+0x3230>
   23f68:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   23f6c:	str	r4, [sp, #-8]!
   23f70:	str	lr, [sp, #4]
   23f74:	cmp	r1, #0
   23f78:	orreq	r1, r1, #1
   23f7c:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   23f80:	cmp	r0, #0
   23f84:	beq	23f94 <_obstack_memory_used@@Base+0x3284>
   23f88:	ldr	r4, [sp]
   23f8c:	add	sp, sp, #4
   23f90:	pop	{pc}		; (ldr pc, [sp], #4)
   23f94:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   23f98:	strd	r4, [sp, #-16]!
   23f9c:	str	r6, [sp, #8]
   23fa0:	str	lr, [sp, #12]
   23fa4:	mov	r4, r0
   23fa8:	mov	r6, r1
   23fac:	mov	r5, r2
   23fb0:	bl	25144 <_obstack_memory_used@@Base+0x4434>
   23fb4:	cmp	r0, #0
   23fb8:	beq	23fcc <_obstack_memory_used@@Base+0x32bc>
   23fbc:	ldrd	r4, [sp]
   23fc0:	ldr	r6, [sp, #8]
   23fc4:	add	sp, sp, #12
   23fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   23fcc:	cmp	r4, #0
   23fd0:	beq	23fe0 <_obstack_memory_used@@Base+0x32d0>
   23fd4:	cmp	r6, #0
   23fd8:	cmpne	r5, #0
   23fdc:	beq	23fbc <_obstack_memory_used@@Base+0x32ac>
   23fe0:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   23fe4:	str	r4, [sp, #-8]!
   23fe8:	str	lr, [sp, #4]
   23fec:	bl	23f98 <_obstack_memory_used@@Base+0x3288>
   23ff0:	ldr	r4, [sp]
   23ff4:	add	sp, sp, #4
   23ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   23ffc:	str	r4, [sp, #-8]!
   24000:	str	lr, [sp, #4]
   24004:	mov	ip, r1
   24008:	mov	r3, r2
   2400c:	cmp	r2, #0
   24010:	cmpne	r1, #0
   24014:	moveq	r3, #1
   24018:	moveq	ip, r3
   2401c:	mov	r2, r3
   24020:	mov	r1, ip
   24024:	bl	25144 <_obstack_memory_used@@Base+0x4434>
   24028:	cmp	r0, #0
   2402c:	beq	2403c <_obstack_memory_used@@Base+0x332c>
   24030:	ldr	r4, [sp]
   24034:	add	sp, sp, #4
   24038:	pop	{pc}		; (ldr pc, [sp], #4)
   2403c:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   24040:	str	r4, [sp, #-8]!
   24044:	str	lr, [sp, #4]
   24048:	mov	r2, r1
   2404c:	mov	r1, r0
   24050:	mov	r0, #0
   24054:	bl	23f98 <_obstack_memory_used@@Base+0x3288>
   24058:	ldr	r4, [sp]
   2405c:	add	sp, sp, #4
   24060:	pop	{pc}		; (ldr pc, [sp], #4)
   24064:	str	r4, [sp, #-8]!
   24068:	str	lr, [sp, #4]
   2406c:	mov	r2, r1
   24070:	mov	r1, r0
   24074:	mov	r0, #0
   24078:	bl	23ffc <_obstack_memory_used@@Base+0x32ec>
   2407c:	ldr	r4, [sp]
   24080:	add	sp, sp, #4
   24084:	pop	{pc}		; (ldr pc, [sp], #4)
   24088:	strd	r4, [sp, #-16]!
   2408c:	str	r6, [sp, #8]
   24090:	str	lr, [sp, #12]
   24094:	mov	r5, r1
   24098:	ldr	r4, [r1]
   2409c:	cmp	r0, #0
   240a0:	beq	240d0 <_obstack_memory_used@@Base+0x33c0>
   240a4:	lsr	r3, r4, #1
   240a8:	add	r3, r3, #1
   240ac:	adds	r4, r4, r3
   240b0:	bcs	240ec <_obstack_memory_used@@Base+0x33dc>
   240b4:	mov	r1, r4
   240b8:	bl	23f98 <_obstack_memory_used@@Base+0x3288>
   240bc:	str	r4, [r5]
   240c0:	ldrd	r4, [sp]
   240c4:	ldr	r6, [sp, #8]
   240c8:	add	sp, sp, #12
   240cc:	pop	{pc}		; (ldr pc, [sp], #4)
   240d0:	cmp	r4, #0
   240d4:	bne	240b4 <_obstack_memory_used@@Base+0x33a4>
   240d8:	mov	r4, #64	; 0x40
   240dc:	udiv	r4, r4, r2
   240e0:	cmp	r2, #64	; 0x40
   240e4:	addhi	r4, r4, #1
   240e8:	b	240b4 <_obstack_memory_used@@Base+0x33a4>
   240ec:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   240f0:	str	r4, [sp, #-8]!
   240f4:	str	lr, [sp, #4]
   240f8:	mov	r2, #1
   240fc:	bl	24088 <_obstack_memory_used@@Base+0x3378>
   24100:	ldr	r4, [sp]
   24104:	add	sp, sp, #4
   24108:	pop	{pc}		; (ldr pc, [sp], #4)
   2410c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24110:	strd	r6, [sp, #8]
   24114:	str	r8, [sp, #16]
   24118:	str	lr, [sp, #20]
   2411c:	mov	r5, r1
   24120:	ldr	lr, [sp, #24]
   24124:	ldr	ip, [r1]
   24128:	asr	r4, ip, #1
   2412c:	adds	r4, ip, r4
   24130:	movvs	r1, #1
   24134:	movvc	r1, #0
   24138:	cmp	r1, #0
   2413c:	mvnne	r4, #-2147483648	; 0x80000000
   24140:	mvn	r8, r3
   24144:	lsr	r8, r8, #31
   24148:	cmp	r3, r4
   2414c:	movge	r1, #0
   24150:	andlt	r1, r8, #1
   24154:	cmp	r1, #0
   24158:	movne	r4, r3
   2415c:	smull	r6, r7, r4, lr
   24160:	asr	r1, r6, #31
   24164:	cmp	r1, r7
   24168:	bne	24180 <_obstack_memory_used@@Base+0x3470>
   2416c:	mov	r1, r6
   24170:	cmp	r6, #63	; 0x3f
   24174:	movle	r1, #64	; 0x40
   24178:	ble	24184 <_obstack_memory_used@@Base+0x3474>
   2417c:	b	24190 <_obstack_memory_used@@Base+0x3480>
   24180:	mvn	r1, #-2147483648	; 0x80000000
   24184:	sdiv	r4, r1, lr
   24188:	mls	r6, lr, r4, r1
   2418c:	sub	r1, r1, r6
   24190:	cmp	r0, #0
   24194:	moveq	r6, #0
   24198:	streq	r6, [r5]
   2419c:	sub	r6, r4, ip
   241a0:	cmp	r6, r2
   241a4:	bge	241dc <_obstack_memory_used@@Base+0x34cc>
   241a8:	adds	r2, ip, r2
   241ac:	mov	r4, r2
   241b0:	bvs	241f8 <_obstack_memory_used@@Base+0x34e8>
   241b4:	cmp	r2, r3
   241b8:	movle	r3, #0
   241bc:	andgt	r3, r8, #1
   241c0:	cmp	r3, #0
   241c4:	bne	241f8 <_obstack_memory_used@@Base+0x34e8>
   241c8:	smull	r2, r3, r2, lr
   241cc:	asr	ip, r2, #31
   241d0:	mov	r1, r2
   241d4:	cmp	ip, r3
   241d8:	bne	241f8 <_obstack_memory_used@@Base+0x34e8>
   241dc:	bl	23f20 <_obstack_memory_used@@Base+0x3210>
   241e0:	str	r4, [r5]
   241e4:	ldrd	r4, [sp]
   241e8:	ldrd	r6, [sp, #8]
   241ec:	ldr	r8, [sp, #16]
   241f0:	add	sp, sp, #20
   241f4:	pop	{pc}		; (ldr pc, [sp], #4)
   241f8:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   241fc:	str	r4, [sp, #-8]!
   24200:	str	lr, [sp, #4]
   24204:	bl	24d48 <_obstack_memory_used@@Base+0x4038>
   24208:	cmp	r0, #0
   2420c:	beq	2421c <_obstack_memory_used@@Base+0x350c>
   24210:	ldr	r4, [sp]
   24214:	add	sp, sp, #4
   24218:	pop	{pc}		; (ldr pc, [sp], #4)
   2421c:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   24220:	str	r4, [sp, #-8]!
   24224:	str	lr, [sp, #4]
   24228:	mov	r1, #1
   2422c:	bl	241fc <_obstack_memory_used@@Base+0x34ec>
   24230:	ldr	r4, [sp]
   24234:	add	sp, sp, #4
   24238:	pop	{pc}		; (ldr pc, [sp], #4)
   2423c:	str	r4, [sp, #-8]!
   24240:	str	lr, [sp, #4]
   24244:	bl	24d48 <_obstack_memory_used@@Base+0x4038>
   24248:	cmp	r0, #0
   2424c:	beq	2425c <_obstack_memory_used@@Base+0x354c>
   24250:	ldr	r4, [sp]
   24254:	add	sp, sp, #4
   24258:	pop	{pc}		; (ldr pc, [sp], #4)
   2425c:	bl	24354 <_obstack_memory_used@@Base+0x3644>
   24260:	str	r4, [sp, #-8]!
   24264:	str	lr, [sp, #4]
   24268:	mov	r1, #1
   2426c:	bl	2423c <_obstack_memory_used@@Base+0x352c>
   24270:	ldr	r4, [sp]
   24274:	add	sp, sp, #4
   24278:	pop	{pc}		; (ldr pc, [sp], #4)
   2427c:	strd	r4, [sp, #-16]!
   24280:	str	r6, [sp, #8]
   24284:	str	lr, [sp, #12]
   24288:	mov	r5, r0
   2428c:	mov	r4, r1
   24290:	mov	r0, r1
   24294:	bl	23ec0 <_obstack_memory_used@@Base+0x31b0>
   24298:	mov	r2, r4
   2429c:	mov	r1, r5
   242a0:	bl	11930 <memcpy@plt>
   242a4:	ldrd	r4, [sp]
   242a8:	ldr	r6, [sp, #8]
   242ac:	add	sp, sp, #12
   242b0:	pop	{pc}		; (ldr pc, [sp], #4)
   242b4:	strd	r4, [sp, #-16]!
   242b8:	str	r6, [sp, #8]
   242bc:	str	lr, [sp, #12]
   242c0:	mov	r5, r0
   242c4:	mov	r4, r1
   242c8:	mov	r0, r1
   242cc:	bl	23ee4 <_obstack_memory_used@@Base+0x31d4>
   242d0:	mov	r2, r4
   242d4:	mov	r1, r5
   242d8:	bl	11930 <memcpy@plt>
   242dc:	ldrd	r4, [sp]
   242e0:	ldr	r6, [sp, #8]
   242e4:	add	sp, sp, #12
   242e8:	pop	{pc}		; (ldr pc, [sp], #4)
   242ec:	strd	r4, [sp, #-16]!
   242f0:	str	r6, [sp, #8]
   242f4:	str	lr, [sp, #12]
   242f8:	mov	r5, r0
   242fc:	mov	r4, r1
   24300:	add	r0, r1, #1
   24304:	bl	23ee4 <_obstack_memory_used@@Base+0x31d4>
   24308:	mov	r2, #0
   2430c:	strb	r2, [r0, r4]
   24310:	mov	r2, r4
   24314:	mov	r1, r5
   24318:	bl	11930 <memcpy@plt>
   2431c:	ldrd	r4, [sp]
   24320:	ldr	r6, [sp, #8]
   24324:	add	sp, sp, #12
   24328:	pop	{pc}		; (ldr pc, [sp], #4)
   2432c:	str	r4, [sp, #-8]!
   24330:	str	lr, [sp, #4]
   24334:	mov	r4, r0
   24338:	bl	11b94 <strlen@plt>
   2433c:	add	r1, r0, #1
   24340:	mov	r0, r4
   24344:	bl	2427c <_obstack_memory_used@@Base+0x356c>
   24348:	ldr	r4, [sp]
   2434c:	add	sp, sp, #4
   24350:	pop	{pc}		; (ldr pc, [sp], #4)
   24354:	str	r4, [sp, #-8]!
   24358:	str	lr, [sp, #4]
   2435c:	movw	r3, #45764	; 0xb2c4
   24360:	movt	r3, #3
   24364:	ldr	r4, [r3]
   24368:	mov	r2, #5
   2436c:	movw	r1, #39468	; 0x9a2c
   24370:	movt	r1, #2
   24374:	mov	r0, #0
   24378:	bl	11984 <dcgettext@plt>
   2437c:	mov	r3, r0
   24380:	movw	r2, #37260	; 0x918c
   24384:	movt	r2, #2
   24388:	mov	r1, #0
   2438c:	mov	r0, r4
   24390:	bl	11a8c <error@plt>
   24394:	bl	11d2c <abort@plt>
   24398:	strd	r4, [sp, #-16]!
   2439c:	str	r6, [sp, #8]
   243a0:	str	lr, [sp, #12]
   243a4:	sub	sp, sp, #16
   243a8:	mov	r6, r0
   243ac:	mov	r4, r2
   243b0:	mov	r5, r3
   243b4:	ldr	r3, [sp, #40]	; 0x28
   243b8:	str	r3, [sp]
   243bc:	add	r3, sp, #8
   243c0:	mov	r2, r1
   243c4:	mov	r1, #0
   243c8:	bl	247f8 <_obstack_memory_used@@Base+0x3ae8>
   243cc:	cmp	r0, #0
   243d0:	bne	24448 <_obstack_memory_used@@Base+0x3738>
   243d4:	ldrd	r0, [sp, #8]
   243d8:	ldrd	r2, [sp, #32]
   243dc:	cmp	r1, r3
   243e0:	cmpeq	r0, r2
   243e4:	movhi	r3, #1
   243e8:	movls	r3, #0
   243ec:	cmp	r1, r5
   243f0:	cmpeq	r0, r4
   243f4:	orrcc	r3, r3, #1
   243f8:	cmp	r3, #0
   243fc:	bne	24414 <_obstack_memory_used@@Base+0x3704>
   24400:	add	sp, sp, #16
   24404:	ldrd	r4, [sp]
   24408:	ldr	r6, [sp, #8]
   2440c:	add	sp, sp, #12
   24410:	pop	{pc}		; (ldr pc, [sp], #4)
   24414:	mvn	r2, #-1073741824	; 0xc0000000
   24418:	mov	r3, #0
   2441c:	cmp	r1, r3
   24420:	cmpeq	r0, r2
   24424:	bls	24438 <_obstack_memory_used@@Base+0x3728>
   24428:	bl	11bb8 <__errno_location@plt>
   2442c:	mov	r3, #75	; 0x4b
   24430:	str	r3, [r0]
   24434:	b	24458 <_obstack_memory_used@@Base+0x3748>
   24438:	bl	11bb8 <__errno_location@plt>
   2443c:	mov	r3, #34	; 0x22
   24440:	str	r3, [r0]
   24444:	b	24458 <_obstack_memory_used@@Base+0x3748>
   24448:	cmp	r0, #1
   2444c:	beq	2449c <_obstack_memory_used@@Base+0x378c>
   24450:	cmp	r0, #3
   24454:	beq	244ac <_obstack_memory_used@@Base+0x379c>
   24458:	ldr	r3, [sp, #48]	; 0x30
   2445c:	cmp	r3, #0
   24460:	moveq	r3, #1
   24464:	str	r3, [sp, #48]	; 0x30
   24468:	bl	11bb8 <__errno_location@plt>
   2446c:	ldr	r4, [r0]
   24470:	cmp	r4, #22
   24474:	moveq	r4, #0
   24478:	mov	r0, r6
   2447c:	bl	23040 <_obstack_memory_used@@Base+0x2330>
   24480:	str	r0, [sp]
   24484:	ldr	r3, [sp, #44]	; 0x2c
   24488:	movw	r2, #37008	; 0x9090
   2448c:	movt	r2, #2
   24490:	mov	r1, r4
   24494:	ldr	r0, [sp, #48]	; 0x30
   24498:	bl	11a8c <error@plt>
   2449c:	bl	11bb8 <__errno_location@plt>
   244a0:	mov	r3, #75	; 0x4b
   244a4:	str	r3, [r0]
   244a8:	b	24458 <_obstack_memory_used@@Base+0x3748>
   244ac:	bl	11bb8 <__errno_location@plt>
   244b0:	mov	r3, #0
   244b4:	str	r3, [r0]
   244b8:	b	24458 <_obstack_memory_used@@Base+0x3748>
   244bc:	strd	r4, [sp, #-12]!
   244c0:	str	lr, [sp, #8]
   244c4:	sub	sp, sp, #28
   244c8:	ldr	r1, [sp, #56]	; 0x38
   244cc:	str	r1, [sp, #16]
   244d0:	ldr	r1, [sp, #52]	; 0x34
   244d4:	str	r1, [sp, #12]
   244d8:	ldr	r1, [sp, #48]	; 0x30
   244dc:	str	r1, [sp, #8]
   244e0:	ldrd	r4, [sp, #40]	; 0x28
   244e4:	strd	r4, [sp]
   244e8:	mov	r1, #10
   244ec:	bl	24398 <_obstack_memory_used@@Base+0x3688>
   244f0:	add	sp, sp, #28
   244f4:	ldrd	r4, [sp]
   244f8:	add	sp, sp, #8
   244fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24500:	strd	r4, [sp, #-28]!	; 0xffffffe4
   24504:	strd	r6, [sp, #8]
   24508:	strd	r8, [sp, #16]
   2450c:	str	lr, [sp, #24]
   24510:	sub	sp, sp, #116	; 0x74
   24514:	mov	r3, #100	; 0x64
   24518:	str	r3, [sp, #8]
   2451c:	bl	11bb8 <__errno_location@plt>
   24520:	mov	r6, r0
   24524:	mov	r9, #0
   24528:	add	r8, sp, #12
   2452c:	mov	r5, r9
   24530:	mov	r7, #1
   24534:	b	245cc <_obstack_memory_used@@Base+0x38bc>
   24538:	cmp	r9, #0
   2453c:	beq	2455c <_obstack_memory_used@@Base+0x384c>
   24540:	mov	r0, r9
   24544:	add	sp, sp, #116	; 0x74
   24548:	ldrd	r4, [sp]
   2454c:	ldrd	r6, [sp, #8]
   24550:	ldrd	r8, [sp, #16]
   24554:	add	sp, sp, #24
   24558:	pop	{pc}		; (ldr pc, [sp], #4)
   2455c:	mov	r1, r0
   24560:	mov	r0, r8
   24564:	bl	242b4 <_obstack_memory_used@@Base+0x35a4>
   24568:	mov	r9, r0
   2456c:	b	24540 <_obstack_memory_used@@Base+0x3830>
   24570:	mov	r0, r9
   24574:	bl	1c200 <__assert_fail@plt+0xa48c>
   24578:	ldr	r2, [r6]
   2457c:	subs	r3, r2, #36	; 0x24
   24580:	movne	r3, #1
   24584:	cmp	r2, #0
   24588:	moveq	r3, #0
   2458c:	cmp	r2, #22
   24590:	moveq	r3, #0
   24594:	andne	r3, r3, #1
   24598:	cmp	r2, #12
   2459c:	moveq	r3, #0
   245a0:	andne	r3, r3, #1
   245a4:	cmp	r3, #0
   245a8:	bne	2460c <_obstack_memory_used@@Base+0x38fc>
   245ac:	str	r7, [sp]
   245b0:	mvn	r3, #0
   245b4:	mov	r2, r7
   245b8:	add	r1, sp, #8
   245bc:	mov	r0, r5
   245c0:	bl	2410c <_obstack_memory_used@@Base+0x33fc>
   245c4:	mov	r9, r0
   245c8:	mov	r8, r0
   245cc:	ldr	r4, [sp, #8]
   245d0:	sub	r4, r4, #1
   245d4:	strb	r5, [r8, r4]
   245d8:	str	r5, [r6]
   245dc:	mov	r1, r4
   245e0:	mov	r0, r8
   245e4:	bl	11a98 <gethostname@plt>
   245e8:	cmp	r0, #0
   245ec:	bne	24570 <_obstack_memory_used@@Base+0x3860>
   245f0:	mov	r0, r8
   245f4:	bl	11b94 <strlen@plt>
   245f8:	add	r0, r0, #1
   245fc:	cmp	r4, r0
   24600:	bgt	24538 <_obstack_memory_used@@Base+0x3828>
   24604:	str	r5, [r6]
   24608:	b	24570 <_obstack_memory_used@@Base+0x3860>
   2460c:	mov	r9, #0
   24610:	b	24540 <_obstack_memory_used@@Base+0x3830>
   24614:	push	{lr}		; (str lr, [sp, #-4]!)
   24618:	sub	sp, sp, #20
   2461c:	movw	ip, #45764	; 0xb2c4
   24620:	movt	ip, #3
   24624:	ldr	r5, [ip]
   24628:	sub	r0, r0, #1
   2462c:	cmp	r0, #3
   24630:	ldrls	pc, [pc, r0, lsl #2]
   24634:	b	24654 <_obstack_memory_used@@Base+0x3944>
   24638:	andeq	r4, r2, r8, asr r6
   2463c:	andeq	r4, r2, r8, asr #12
   24640:	andeq	r4, r2, r8, asr #12
   24644:	andeq	r4, r2, r4, ror #12
   24648:	movw	r0, #40600	; 0x9e98
   2464c:	movt	r0, #2
   24650:	b	2466c <_obstack_memory_used@@Base+0x395c>
   24654:	bl	11d2c <abort@plt>
   24658:	movw	r0, #40540	; 0x9e5c
   2465c:	movt	r0, #2
   24660:	b	2466c <_obstack_memory_used@@Base+0x395c>
   24664:	movw	r0, #40572	; 0x9e7c
   24668:	movt	r0, #2
   2466c:	cmp	r1, #0
   24670:	blt	246b4 <_obstack_memory_used@@Base+0x39a4>
   24674:	ldr	r6, [r3, r1, lsl #4]
   24678:	movw	r4, #40640	; 0x9ec0
   2467c:	movt	r4, #2
   24680:	mov	r2, #5
   24684:	mov	r1, r0
   24688:	mov	r0, #0
   2468c:	bl	11984 <dcgettext@plt>
   24690:	ldr	r3, [sp, #24]
   24694:	str	r3, [sp, #4]
   24698:	str	r6, [sp]
   2469c:	mov	r3, r4
   246a0:	mov	r2, r0
   246a4:	mov	r1, #0
   246a8:	mov	r0, r5
   246ac:	bl	11a8c <error@plt>
   246b0:	bl	11d2c <abort@plt>
   246b4:	movw	r4, #40640	; 0x9ec0
   246b8:	movt	r4, #2
   246bc:	sub	r4, r4, r1
   246c0:	strb	r2, [sp, #12]
   246c4:	mov	r3, #0
   246c8:	strb	r3, [sp, #13]
   246cc:	add	r6, sp, #12
   246d0:	b	24680 <_obstack_memory_used@@Base+0x3970>
   246d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   246d8:	strd	r6, [sp, #8]
   246dc:	strd	r8, [sp, #16]
   246e0:	strd	sl, [sp, #24]
   246e4:	str	lr, [sp, #32]
   246e8:	sub	sp, sp, #12
   246ec:	str	r0, [sp, #4]
   246f0:	cmp	r2, #0
   246f4:	beq	247f0 <_obstack_memory_used@@Base+0x3ae0>
   246f8:	sub	ip, r2, #1
   246fc:	ldrd	r2, [r0]
   24700:	mov	r0, #0
   24704:	mov	r8, r1
   24708:	asr	r9, r1, #31
   2470c:	str	r1, [sp]
   24710:	b	24760 <_obstack_memory_used@@Base+0x3a50>
   24714:	orrs	r4, r2, r3
   24718:	movne	lr, #1
   2471c:	b	24770 <_obstack_memory_used@@Base+0x3a60>
   24720:	mov	sl, r3
   24724:	ldr	fp, [sp]
   24728:	umull	r6, r7, r1, r2
   2472c:	mov	r4, r7
   24730:	mov	r5, #0
   24734:	umlal	r4, r5, sl, fp
   24738:	cmp	r5, #0
   2473c:	bne	247a4 <_obstack_memory_used@@Base+0x3a94>
   24740:	cmp	lr, #0
   24744:	bne	247bc <_obstack_memory_used@@Base+0x3aac>
   24748:	mov	r2, r6
   2474c:	mov	r3, r4
   24750:	orr	r0, r0, lr
   24754:	sub	ip, ip, #1
   24758:	cmn	ip, #1
   2475c:	beq	247cc <_obstack_memory_used@@Base+0x3abc>
   24760:	mov	lr, #0
   24764:	cmp	r8, #0
   24768:	sbcs	r4, r9, #0
   2476c:	blt	24714 <_obstack_memory_used@@Base+0x3a04>
   24770:	cmp	r9, #0
   24774:	bne	24790 <_obstack_memory_used@@Base+0x3a80>
   24778:	cmp	r3, #0
   2477c:	bne	24720 <_obstack_memory_used@@Base+0x3a10>
   24780:	umull	r2, r3, r1, r2
   24784:	mov	r6, r2
   24788:	mov	r4, r3
   2478c:	b	24740 <_obstack_memory_used@@Base+0x3a30>
   24790:	cmp	r3, #0
   24794:	bne	247a4 <_obstack_memory_used@@Base+0x3a94>
   24798:	mov	sl, r9
   2479c:	mov	fp, r2
   247a0:	b	24728 <_obstack_memory_used@@Base+0x3a18>
   247a4:	mul	r4, r1, r3
   247a8:	mla	r4, r2, r9, r4
   247ac:	umull	r6, r7, r1, r2
   247b0:	add	r4, r4, r7
   247b4:	mov	lr, #1
   247b8:	b	24740 <_obstack_memory_used@@Base+0x3a30>
   247bc:	mvn	r2, #0
   247c0:	mvn	r3, #0
   247c4:	mov	lr, #1
   247c8:	b	24750 <_obstack_memory_used@@Base+0x3a40>
   247cc:	ldr	r1, [sp, #4]
   247d0:	strd	r2, [r1]
   247d4:	add	sp, sp, #12
   247d8:	ldrd	r4, [sp]
   247dc:	ldrd	r6, [sp, #8]
   247e0:	ldrd	r8, [sp, #16]
   247e4:	ldrd	sl, [sp, #24]
   247e8:	add	sp, sp, #32
   247ec:	pop	{pc}		; (ldr pc, [sp], #4)
   247f0:	mov	r0, #0
   247f4:	b	247d4 <_obstack_memory_used@@Base+0x3ac4>
   247f8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   247fc:	strd	r6, [sp, #8]
   24800:	strd	r8, [sp, #16]
   24804:	str	lr, [sp, #24]
   24808:	sub	sp, sp, #20
   2480c:	cmp	r2, #36	; 0x24
   24810:	bhi	24864 <_obstack_memory_used@@Base+0x3b54>
   24814:	mov	r5, r0
   24818:	mov	r6, r1
   2481c:	mov	r7, r2
   24820:	mov	r9, r3
   24824:	cmp	r1, #0
   24828:	addeq	r6, sp, #12
   2482c:	bl	11bb8 <__errno_location@plt>
   24830:	mov	r8, r0
   24834:	mov	r3, #0
   24838:	str	r3, [r0]
   2483c:	ldrb	r4, [r5]
   24840:	bl	11b58 <__ctype_b_loc@plt>
   24844:	ldr	r1, [r0]
   24848:	mov	r2, r5
   2484c:	lsl	r3, r4, #1
   24850:	ldrh	r3, [r1, r3]
   24854:	tst	r3, #8192	; 0x2000
   24858:	beq	24884 <_obstack_memory_used@@Base+0x3b74>
   2485c:	ldrb	r4, [r2, #1]!
   24860:	b	2484c <_obstack_memory_used@@Base+0x3b3c>
   24864:	movw	r3, #40644	; 0x9ec4
   24868:	movt	r3, #2
   2486c:	mov	r2, #85	; 0x55
   24870:	movw	r1, #40656	; 0x9ed0
   24874:	movt	r1, #2
   24878:	movw	r0, #40672	; 0x9ee0
   2487c:	movt	r0, #2
   24880:	bl	11d74 <__assert_fail@plt>
   24884:	cmp	r4, #45	; 0x2d
   24888:	moveq	r4, #4
   2488c:	beq	24a20 <_obstack_memory_used@@Base+0x3d10>
   24890:	mov	r3, #0
   24894:	mov	r2, r7
   24898:	mov	r1, r6
   2489c:	mov	r0, r5
   248a0:	bl	1193c <__strtoull_internal@plt>
   248a4:	strd	r0, [sp]
   248a8:	ldr	r7, [r6]
   248ac:	cmp	r7, r5
   248b0:	beq	248d4 <_obstack_memory_used@@Base+0x3bc4>
   248b4:	ldr	r3, [r8]
   248b8:	cmp	r3, #0
   248bc:	beq	249f8 <_obstack_memory_used@@Base+0x3ce8>
   248c0:	cmp	r3, #34	; 0x22
   248c4:	moveq	r4, #1
   248c8:	beq	249fc <_obstack_memory_used@@Base+0x3cec>
   248cc:	mov	r4, #4
   248d0:	b	24a20 <_obstack_memory_used@@Base+0x3d10>
   248d4:	ldr	r3, [sp, #48]	; 0x30
   248d8:	cmp	r3, #0
   248dc:	beq	24d38 <_obstack_memory_used@@Base+0x4028>
   248e0:	ldrb	r1, [r5]
   248e4:	cmp	r1, #0
   248e8:	moveq	r4, #4
   248ec:	beq	24a20 <_obstack_memory_used@@Base+0x3d10>
   248f0:	mov	r0, r3
   248f4:	bl	11ba0 <strchr@plt>
   248f8:	cmp	r0, #0
   248fc:	beq	24d40 <_obstack_memory_used@@Base+0x4030>
   24900:	mov	r2, #1
   24904:	mov	r3, #0
   24908:	strd	r2, [sp]
   2490c:	ldrb	r5, [r7]
   24910:	mov	r4, #0
   24914:	mov	r1, r5
   24918:	ldr	r0, [sp, #48]	; 0x30
   2491c:	bl	11ba0 <strchr@plt>
   24920:	cmp	r0, #0
   24924:	beq	24a3c <_obstack_memory_used@@Base+0x3d2c>
   24928:	sub	r3, r5, #69	; 0x45
   2492c:	cmp	r3, #47	; 0x2f
   24930:	ldrls	pc, [pc, r3, lsl #2]
   24934:	b	24b88 <_obstack_memory_used@@Base+0x3e78>
   24938:	andeq	r4, r2, ip, asr #20
   2493c:	andeq	r4, r2, r8, lsl #23
   24940:	andeq	r4, r2, ip, asr #20
   24944:	andeq	r4, r2, r8, lsl #23
   24948:	andeq	r4, r2, r8, lsl #23
   2494c:	andeq	r4, r2, r8, lsl #23
   24950:	andeq	r4, r2, ip, asr #20
   24954:	andeq	r4, r2, r8, lsl #23
   24958:	andeq	r4, r2, ip, asr #20
   2495c:	andeq	r4, r2, r8, lsl #23
   24960:	andeq	r4, r2, r8, lsl #23
   24964:	andeq	r4, r2, ip, asr #20
   24968:	andeq	r4, r2, r8, lsl #23
   2496c:	andeq	r4, r2, r8, lsl #23
   24970:	andeq	r4, r2, r8, lsl #23
   24974:	andeq	r4, r2, ip, asr #20
   24978:	andeq	r4, r2, r8, lsl #23
   2497c:	andeq	r4, r2, r8, lsl #23
   24980:	andeq	r4, r2, r8, lsl #23
   24984:	andeq	r4, r2, r8, lsl #23
   24988:	andeq	r4, r2, ip, asr #20
   2498c:	andeq	r4, r2, ip, asr #20
   24990:	andeq	r4, r2, r8, lsl #23
   24994:	andeq	r4, r2, r8, lsl #23
   24998:	andeq	r4, r2, r8, lsl #23
   2499c:	andeq	r4, r2, r8, lsl #23
   249a0:	andeq	r4, r2, r8, lsl #23
   249a4:	andeq	r4, r2, r8, lsl #23
   249a8:	andeq	r4, r2, r8, lsl #23
   249ac:	andeq	r4, r2, r8, lsl #23
   249b0:	andeq	r4, r2, r8, lsl #23
   249b4:	andeq	r4, r2, r8, lsl #23
   249b8:	andeq	r4, r2, r8, lsl #23
   249bc:	andeq	r4, r2, r8, lsl #23
   249c0:	andeq	r4, r2, ip, asr #20
   249c4:	andeq	r4, r2, r8, lsl #23
   249c8:	andeq	r4, r2, r8, lsl #23
   249cc:	andeq	r4, r2, r8, lsl #23
   249d0:	andeq	r4, r2, ip, asr #20
   249d4:	andeq	r4, r2, r8, lsl #23
   249d8:	andeq	r4, r2, ip, asr #20
   249dc:	andeq	r4, r2, r8, lsl #23
   249e0:	andeq	r4, r2, r8, lsl #23
   249e4:	andeq	r4, r2, r8, lsl #23
   249e8:	andeq	r4, r2, r8, lsl #23
   249ec:	andeq	r4, r2, r8, lsl #23
   249f0:	andeq	r4, r2, r8, lsl #23
   249f4:	andeq	r4, r2, ip, asr #20
   249f8:	mov	r4, #0
   249fc:	ldr	r3, [sp, #48]	; 0x30
   24a00:	cmp	r3, #0
   24a04:	strdeq	r0, [r9]
   24a08:	beq	24a20 <_obstack_memory_used@@Base+0x3d10>
   24a0c:	ldrb	r5, [r7]
   24a10:	cmp	r5, #0
   24a14:	bne	24914 <_obstack_memory_used@@Base+0x3c04>
   24a18:	ldrd	r2, [sp]
   24a1c:	strd	r2, [r9]
   24a20:	mov	r0, r4
   24a24:	add	sp, sp, #20
   24a28:	ldrd	r4, [sp]
   24a2c:	ldrd	r6, [sp, #8]
   24a30:	ldrd	r8, [sp, #16]
   24a34:	add	sp, sp, #24
   24a38:	pop	{pc}		; (ldr pc, [sp], #4)
   24a3c:	ldrd	r2, [sp]
   24a40:	strd	r2, [r9]
   24a44:	orr	r4, r4, #2
   24a48:	b	24a20 <_obstack_memory_used@@Base+0x3d10>
   24a4c:	mov	r1, #48	; 0x30
   24a50:	ldr	r0, [sp, #48]	; 0x30
   24a54:	bl	11ba0 <strchr@plt>
   24a58:	cmp	r0, #0
   24a5c:	beq	24b94 <_obstack_memory_used@@Base+0x3e84>
   24a60:	ldrb	r3, [r7, #1]
   24a64:	cmp	r3, #68	; 0x44
   24a68:	beq	24ba0 <_obstack_memory_used@@Base+0x3e90>
   24a6c:	cmp	r3, #105	; 0x69
   24a70:	beq	24b70 <_obstack_memory_used@@Base+0x3e60>
   24a74:	cmp	r3, #66	; 0x42
   24a78:	moveq	r7, #2
   24a7c:	movne	r7, #1
   24a80:	moveq	r1, #1000	; 0x3e8
   24a84:	movne	r1, #1024	; 0x400
   24a88:	sub	r5, r5, #66	; 0x42
   24a8c:	cmp	r5, #53	; 0x35
   24a90:	ldrls	pc, [pc, r5, lsl #2]
   24a94:	b	24d04 <_obstack_memory_used@@Base+0x3ff4>
   24a98:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24a9c:	andeq	r4, r2, r4, lsl #26
   24aa0:	andeq	r4, r2, r4, lsl #26
   24aa4:	andeq	r4, r2, ip, lsr ip
   24aa8:	andeq	r4, r2, r4, lsl #26
   24aac:	andeq	r4, r2, ip, asr #24
   24ab0:	andeq	r4, r2, r4, lsl #26
   24ab4:	andeq	r4, r2, r4, lsl #26
   24ab8:	andeq	r4, r2, r4, lsl #26
   24abc:	andeq	r4, r2, ip, asr ip
   24ac0:	andeq	r4, r2, r4, lsl #26
   24ac4:	andeq	r4, r2, ip, ror #24
   24ac8:	andeq	r4, r2, r4, lsl #26
   24acc:	andeq	r4, r2, r4, lsl #26
   24ad0:	andeq	r4, r2, ip, ror ip
   24ad4:	andeq	r4, r2, r4, lsl #26
   24ad8:	andeq	r4, r2, r4, lsl #26
   24adc:	andeq	r4, r2, r4, lsl #26
   24ae0:	andeq	r4, r2, ip, lsl #25
   24ae4:	andeq	r4, r2, r4, lsl #26
   24ae8:	andeq	r4, r2, r4, lsl #26
   24aec:	andeq	r4, r2, r4, lsl #26
   24af0:	andeq	r4, r2, r4, lsl #26
   24af4:	andeq	r4, r2, r4, ror #25
   24af8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24afc:	andeq	r4, r2, r4, lsl #26
   24b00:	andeq	r4, r2, r4, lsl #26
   24b04:	andeq	r4, r2, r4, lsl #26
   24b08:	andeq	r4, r2, r4, lsl #26
   24b0c:	andeq	r4, r2, r4, lsl #26
   24b10:	andeq	r4, r2, r4, lsl #26
   24b14:	andeq	r4, r2, r4, lsl #26
   24b18:	andeq	r4, r2, ip, lsr #23
   24b1c:	andeq	r4, r2, r4, lsl sp
   24b20:	andeq	r4, r2, r4, lsl #26
   24b24:	andeq	r4, r2, r4, lsl #26
   24b28:	andeq	r4, r2, r4, lsl #26
   24b2c:	andeq	r4, r2, ip, asr #24
   24b30:	andeq	r4, r2, r4, lsl #26
   24b34:	andeq	r4, r2, r4, lsl #26
   24b38:	andeq	r4, r2, r4, lsl #26
   24b3c:	andeq	r4, r2, ip, asr ip
   24b40:	andeq	r4, r2, r4, lsl #26
   24b44:	andeq	r4, r2, ip, ror #24
   24b48:	andeq	r4, r2, r4, lsl #26
   24b4c:	andeq	r4, r2, r4, lsl #26
   24b50:	andeq	r4, r2, r4, lsl #26
   24b54:	andeq	r4, r2, r4, lsl #26
   24b58:	andeq	r4, r2, r4, lsl #26
   24b5c:	andeq	r4, r2, r4, lsl #26
   24b60:	andeq	r4, r2, ip, lsl #25
   24b64:	andeq	r4, r2, r4, lsl #26
   24b68:	andeq	r4, r2, r4, lsl #26
   24b6c:	muleq	r2, ip, ip
   24b70:	ldrb	r3, [r7, #2]
   24b74:	cmp	r3, #66	; 0x42
   24b78:	movne	r7, #1
   24b7c:	moveq	r7, #3
   24b80:	mov	r1, #1024	; 0x400
   24b84:	b	24a88 <_obstack_memory_used@@Base+0x3d78>
   24b88:	mov	r7, #1
   24b8c:	mov	r1, #1024	; 0x400
   24b90:	b	24a88 <_obstack_memory_used@@Base+0x3d78>
   24b94:	mov	r7, #1
   24b98:	mov	r1, #1024	; 0x400
   24b9c:	b	24a88 <_obstack_memory_used@@Base+0x3d78>
   24ba0:	mov	r7, #2
   24ba4:	mov	r1, #1000	; 0x3e8
   24ba8:	b	24a88 <_obstack_memory_used@@Base+0x3d78>
   24bac:	ldr	r3, [sp]
   24bb0:	ldr	ip, [sp, #4]
   24bb4:	lsl	r2, ip, #9
   24bb8:	orr	r2, r2, r3, lsr #23
   24bbc:	lsl	r3, r3, #9
   24bc0:	mov	r0, #0
   24bc4:	mov	r1, r0
   24bc8:	lsr	r0, ip, #23
   24bcc:	orrs	r1, r0, r1
   24bd0:	streq	r3, [sp]
   24bd4:	streq	r2, [sp, #4]
   24bd8:	moveq	r0, #0
   24bdc:	beq	24d18 <_obstack_memory_used@@Base+0x4008>
   24be0:	mvn	r2, #0
   24be4:	mvn	r3, #0
   24be8:	strd	r2, [sp]
   24bec:	mov	r0, #1
   24bf0:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24bf4:	ldr	r3, [sp]
   24bf8:	ldr	ip, [sp, #4]
   24bfc:	lsl	r2, ip, #10
   24c00:	orr	r2, r2, r3, lsr #22
   24c04:	lsl	r3, r3, #10
   24c08:	mov	r0, #0
   24c0c:	mov	r1, r0
   24c10:	lsr	r0, ip, #22
   24c14:	orrs	r1, r0, r1
   24c18:	streq	r3, [sp]
   24c1c:	streq	r2, [sp, #4]
   24c20:	moveq	r0, #0
   24c24:	beq	24d18 <_obstack_memory_used@@Base+0x4008>
   24c28:	mvn	r2, #0
   24c2c:	mvn	r3, #0
   24c30:	strd	r2, [sp]
   24c34:	mov	r0, #1
   24c38:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c3c:	mov	r2, #6
   24c40:	mov	r0, sp
   24c44:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24c48:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c4c:	mov	r2, #3
   24c50:	mov	r0, sp
   24c54:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24c58:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c5c:	mov	r2, #1
   24c60:	mov	r0, sp
   24c64:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24c68:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c6c:	mov	r2, #2
   24c70:	mov	r0, sp
   24c74:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24c78:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c7c:	mov	r2, #5
   24c80:	mov	r0, sp
   24c84:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24c88:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c8c:	mov	r2, #4
   24c90:	mov	r0, sp
   24c94:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24c98:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24c9c:	ldr	r3, [sp]
   24ca0:	ldr	r2, [sp, #4]
   24ca4:	adds	r3, r3, r3
   24ca8:	adc	r2, r2, r2
   24cac:	mov	r1, #0
   24cb0:	mov	r0, r1
   24cb4:	ldr	r1, [sp, #4]
   24cb8:	lsr	r1, r1, #31
   24cbc:	orrs	r1, r1, r0
   24cc0:	streq	r3, [sp]
   24cc4:	streq	r2, [sp, #4]
   24cc8:	moveq	r0, #0
   24ccc:	beq	24d18 <_obstack_memory_used@@Base+0x4008>
   24cd0:	mvn	r2, #0
   24cd4:	mvn	r3, #0
   24cd8:	strd	r2, [sp]
   24cdc:	mov	r0, #1
   24ce0:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24ce4:	mov	r2, #8
   24ce8:	mov	r0, sp
   24cec:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24cf0:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24cf4:	mov	r2, #7
   24cf8:	mov	r0, sp
   24cfc:	bl	246d4 <_obstack_memory_used@@Base+0x39c4>
   24d00:	b	24d18 <_obstack_memory_used@@Base+0x4008>
   24d04:	ldrd	r2, [sp]
   24d08:	strd	r2, [r9]
   24d0c:	orr	r4, r4, #2
   24d10:	b	24a20 <_obstack_memory_used@@Base+0x3d10>
   24d14:	mov	r0, #0
   24d18:	orr	r4, r4, r0
   24d1c:	ldr	r3, [r6]
   24d20:	add	r2, r3, r7
   24d24:	str	r2, [r6]
   24d28:	ldrb	r3, [r3, r7]
   24d2c:	cmp	r3, #0
   24d30:	orrne	r4, r4, #2
   24d34:	b	24a18 <_obstack_memory_used@@Base+0x3d08>
   24d38:	mov	r4, #4
   24d3c:	b	24a20 <_obstack_memory_used@@Base+0x3d10>
   24d40:	mov	r4, #4
   24d44:	b	24a20 <_obstack_memory_used@@Base+0x3d10>
   24d48:	strd	r4, [sp, #-16]!
   24d4c:	str	r6, [sp, #8]
   24d50:	str	lr, [sp, #12]
   24d54:	cmp	r1, #0
   24d58:	cmpne	r0, #0
   24d5c:	beq	24d98 <_obstack_memory_used@@Base+0x4088>
   24d60:	mov	r2, r0
   24d64:	mov	r3, r1
   24d68:	umull	r4, r5, r0, r1
   24d6c:	adds	r1, r5, #0
   24d70:	movne	r1, #1
   24d74:	cmp	r4, #0
   24d78:	movlt	r1, #1
   24d7c:	cmp	r1, #0
   24d80:	beq	24da0 <_obstack_memory_used@@Base+0x4090>
   24d84:	bl	11bb8 <__errno_location@plt>
   24d88:	mov	r3, #12
   24d8c:	str	r3, [r0]
   24d90:	mov	r0, #0
   24d94:	b	24dac <_obstack_memory_used@@Base+0x409c>
   24d98:	mov	r3, #1
   24d9c:	mov	r2, r3
   24da0:	mov	r1, r3
   24da4:	mov	r0, r2
   24da8:	bl	11858 <calloc@plt>
   24dac:	ldrd	r4, [sp]
   24db0:	ldr	r6, [sp, #8]
   24db4:	add	sp, sp, #12
   24db8:	pop	{pc}		; (ldr pc, [sp], #4)
   24dbc:	str	r4, [sp, #-8]!
   24dc0:	str	lr, [sp, #4]
   24dc4:	cmp	r0, #0
   24dc8:	beq	24de4 <_obstack_memory_used@@Base+0x40d4>
   24dcc:	bge	24de8 <_obstack_memory_used@@Base+0x40d8>
   24dd0:	bl	11bb8 <__errno_location@plt>
   24dd4:	mov	r3, #12
   24dd8:	str	r3, [r0]
   24ddc:	mov	r0, #0
   24de0:	b	24dec <_obstack_memory_used@@Base+0x40dc>
   24de4:	mov	r0, #1
   24de8:	bl	11ae0 <malloc@plt>
   24dec:	ldr	r4, [sp]
   24df0:	add	sp, sp, #4
   24df4:	pop	{pc}		; (ldr pc, [sp], #4)
   24df8:	str	r4, [sp, #-8]!
   24dfc:	str	lr, [sp, #4]
   24e00:	cmp	r0, #0
   24e04:	beq	24e28 <_obstack_memory_used@@Base+0x4118>
   24e08:	cmp	r1, #0
   24e0c:	beq	24e34 <_obstack_memory_used@@Base+0x4124>
   24e10:	cmp	r1, #0
   24e14:	blt	24e40 <_obstack_memory_used@@Base+0x4130>
   24e18:	bl	11990 <realloc@plt>
   24e1c:	ldr	r4, [sp]
   24e20:	add	sp, sp, #4
   24e24:	pop	{pc}		; (ldr pc, [sp], #4)
   24e28:	mov	r0, r1
   24e2c:	bl	24dbc <_obstack_memory_used@@Base+0x40ac>
   24e30:	b	24e1c <_obstack_memory_used@@Base+0x410c>
   24e34:	bl	1c200 <__assert_fail@plt+0xa48c>
   24e38:	mov	r0, #0
   24e3c:	b	24e1c <_obstack_memory_used@@Base+0x410c>
   24e40:	bl	11bb8 <__errno_location@plt>
   24e44:	mov	r3, #12
   24e48:	str	r3, [r0]
   24e4c:	mov	r0, #0
   24e50:	b	24e1c <_obstack_memory_used@@Base+0x410c>
   24e54:	strd	r4, [sp, #-16]!
   24e58:	str	r6, [sp, #8]
   24e5c:	str	lr, [sp, #12]
   24e60:	mov	r5, r0
   24e64:	bl	11a68 <__fpending@plt>
   24e68:	mov	r6, r0
   24e6c:	ldr	r4, [r5]
   24e70:	and	r4, r4, #32
   24e74:	mov	r0, r5
   24e78:	bl	24ee0 <_obstack_memory_used@@Base+0x41d0>
   24e7c:	cmp	r4, #0
   24e80:	bne	24eb4 <_obstack_memory_used@@Base+0x41a4>
   24e84:	cmp	r0, #0
   24e88:	beq	24ea4 <_obstack_memory_used@@Base+0x4194>
   24e8c:	cmp	r6, #0
   24e90:	bne	24ed0 <_obstack_memory_used@@Base+0x41c0>
   24e94:	bl	11bb8 <__errno_location@plt>
   24e98:	ldr	r0, [r0]
   24e9c:	subs	r0, r0, #9
   24ea0:	mvnne	r0, #0
   24ea4:	ldrd	r4, [sp]
   24ea8:	ldr	r6, [sp, #8]
   24eac:	add	sp, sp, #12
   24eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   24eb4:	cmp	r0, #0
   24eb8:	bne	24ed8 <_obstack_memory_used@@Base+0x41c8>
   24ebc:	bl	11bb8 <__errno_location@plt>
   24ec0:	mov	r3, #0
   24ec4:	str	r3, [r0]
   24ec8:	mvn	r0, #0
   24ecc:	b	24ea4 <_obstack_memory_used@@Base+0x4194>
   24ed0:	mvn	r0, #0
   24ed4:	b	24ea4 <_obstack_memory_used@@Base+0x4194>
   24ed8:	mvn	r0, #0
   24edc:	b	24ea4 <_obstack_memory_used@@Base+0x4194>
   24ee0:	strd	r4, [sp, #-16]!
   24ee4:	str	r6, [sp, #8]
   24ee8:	str	lr, [sp, #12]
   24eec:	sub	sp, sp, #8
   24ef0:	mov	r4, r0
   24ef4:	bl	11c0c <fileno@plt>
   24ef8:	cmp	r0, #0
   24efc:	blt	24f74 <_obstack_memory_used@@Base+0x4264>
   24f00:	mov	r0, r4
   24f04:	bl	11b10 <__freading@plt>
   24f08:	cmp	r0, #0
   24f0c:	beq	24f40 <_obstack_memory_used@@Base+0x4230>
   24f10:	mov	r0, r4
   24f14:	bl	11c0c <fileno@plt>
   24f18:	mov	r3, #1
   24f1c:	str	r3, [sp]
   24f20:	mov	r2, #0
   24f24:	mov	r3, #0
   24f28:	bl	11a44 <lseek64@plt>
   24f2c:	mvn	r2, #0
   24f30:	mvn	r3, #0
   24f34:	cmp	r1, r3
   24f38:	cmpeq	r0, r2
   24f3c:	beq	24f80 <_obstack_memory_used@@Base+0x4270>
   24f40:	mov	r0, r4
   24f44:	bl	24f9c <_obstack_memory_used@@Base+0x428c>
   24f48:	cmp	r0, #0
   24f4c:	beq	24f80 <_obstack_memory_used@@Base+0x4270>
   24f50:	bl	11bb8 <__errno_location@plt>
   24f54:	mov	r5, r0
   24f58:	ldr	r6, [r0]
   24f5c:	mov	r0, r4
   24f60:	bl	11c24 <fclose@plt>
   24f64:	cmp	r6, #0
   24f68:	strne	r6, [r5]
   24f6c:	mvnne	r0, #0
   24f70:	b	24f88 <_obstack_memory_used@@Base+0x4278>
   24f74:	mov	r0, r4
   24f78:	bl	11c24 <fclose@plt>
   24f7c:	b	24f88 <_obstack_memory_used@@Base+0x4278>
   24f80:	mov	r0, r4
   24f84:	bl	11c24 <fclose@plt>
   24f88:	add	sp, sp, #8
   24f8c:	ldrd	r4, [sp]
   24f90:	ldr	r6, [sp, #8]
   24f94:	add	sp, sp, #12
   24f98:	pop	{pc}		; (ldr pc, [sp], #4)
   24f9c:	str	r4, [sp, #-8]!
   24fa0:	str	lr, [sp, #4]
   24fa4:	sub	sp, sp, #8
   24fa8:	subs	r4, r0, #0
   24fac:	beq	24fc0 <_obstack_memory_used@@Base+0x42b0>
   24fb0:	mov	r0, r4
   24fb4:	bl	11b10 <__freading@plt>
   24fb8:	cmp	r0, #0
   24fbc:	bne	24fd8 <_obstack_memory_used@@Base+0x42c8>
   24fc0:	mov	r0, r4
   24fc4:	bl	118c4 <fflush@plt>
   24fc8:	add	sp, sp, #8
   24fcc:	ldr	r4, [sp]
   24fd0:	add	sp, sp, #4
   24fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   24fd8:	ldr	r3, [r4]
   24fdc:	tst	r3, #256	; 0x100
   24fe0:	bne	24ff0 <_obstack_memory_used@@Base+0x42e0>
   24fe4:	mov	r0, r4
   24fe8:	bl	118c4 <fflush@plt>
   24fec:	b	24fc8 <_obstack_memory_used@@Base+0x42b8>
   24ff0:	mov	r3, #1
   24ff4:	str	r3, [sp]
   24ff8:	mov	r2, #0
   24ffc:	mov	r3, #0
   25000:	mov	r0, r4
   25004:	bl	2500c <_obstack_memory_used@@Base+0x42fc>
   25008:	b	24fe4 <_obstack_memory_used@@Base+0x42d4>
   2500c:	str	r4, [sp, #-16]!
   25010:	strd	r6, [sp, #4]
   25014:	str	lr, [sp, #12]
   25018:	sub	sp, sp, #8
   2501c:	mov	r4, r0
   25020:	mov	r6, r2
   25024:	mov	r7, r3
   25028:	ldr	r2, [r0, #8]
   2502c:	ldr	r3, [r0, #4]
   25030:	cmp	r2, r3
   25034:	beq	25064 <_obstack_memory_used@@Base+0x4354>
   25038:	ldr	r3, [sp, #24]
   2503c:	str	r3, [sp]
   25040:	mov	r2, r6
   25044:	mov	r3, r7
   25048:	mov	r0, r4
   2504c:	bl	11c30 <fseeko64@plt>
   25050:	add	sp, sp, #8
   25054:	ldr	r4, [sp]
   25058:	ldrd	r6, [sp, #4]
   2505c:	add	sp, sp, #12
   25060:	pop	{pc}		; (ldr pc, [sp], #4)
   25064:	ldr	r2, [r0, #20]
   25068:	ldr	r3, [r0, #16]
   2506c:	cmp	r2, r3
   25070:	bne	25038 <_obstack_memory_used@@Base+0x4328>
   25074:	ldr	r3, [r0, #36]	; 0x24
   25078:	cmp	r3, #0
   2507c:	bne	25038 <_obstack_memory_used@@Base+0x4328>
   25080:	bl	11c0c <fileno@plt>
   25084:	ldr	r3, [sp, #24]
   25088:	str	r3, [sp]
   2508c:	mov	r2, r6
   25090:	mov	r3, r7
   25094:	bl	11a44 <lseek64@plt>
   25098:	mvn	r2, #0
   2509c:	mvn	r3, #0
   250a0:	cmp	r1, r3
   250a4:	cmpeq	r0, r2
   250a8:	beq	250c4 <_obstack_memory_used@@Base+0x43b4>
   250ac:	ldr	r3, [r4]
   250b0:	bic	r3, r3, #16
   250b4:	str	r3, [r4]
   250b8:	strd	r0, [r4, #80]	; 0x50
   250bc:	mov	r0, #0
   250c0:	b	25050 <_obstack_memory_used@@Base+0x4340>
   250c4:	mvn	r0, #0
   250c8:	b	25050 <_obstack_memory_used@@Base+0x4340>
   250cc:	ldrb	r3, [r0]
   250d0:	cmp	r3, #0
   250d4:	beq	250f8 <_obstack_memory_used@@Base+0x43e8>
   250d8:	mov	r2, #0
   250dc:	add	r2, r3, r2, ror #23
   250e0:	ldrb	r3, [r0, #1]!
   250e4:	cmp	r3, #0
   250e8:	bne	250dc <_obstack_memory_used@@Base+0x43cc>
   250ec:	udiv	r0, r2, r1
   250f0:	mls	r0, r1, r0, r2
   250f4:	bx	lr
   250f8:	mov	r2, #0
   250fc:	b	250ec <_obstack_memory_used@@Base+0x43dc>
   25100:	str	r4, [sp, #-8]!
   25104:	str	lr, [sp, #4]
   25108:	mov	r0, #14
   2510c:	bl	11c90 <nl_langinfo@plt>
   25110:	cmp	r0, #0
   25114:	beq	25138 <_obstack_memory_used@@Base+0x4428>
   25118:	ldrb	r2, [r0]
   2511c:	movw	r3, #40712	; 0x9f08
   25120:	movt	r3, #2
   25124:	cmp	r2, #0
   25128:	moveq	r0, r3
   2512c:	ldr	r4, [sp]
   25130:	add	sp, sp, #4
   25134:	pop	{pc}		; (ldr pc, [sp], #4)
   25138:	movw	r0, #40712	; 0x9f08
   2513c:	movt	r0, #2
   25140:	b	2512c <_obstack_memory_used@@Base+0x441c>
   25144:	str	r4, [sp, #-8]!
   25148:	str	lr, [sp, #4]
   2514c:	umull	r2, r3, r1, r2
   25150:	cmp	r3, #0
   25154:	bne	2516c <_obstack_memory_used@@Base+0x445c>
   25158:	mov	r1, r2
   2515c:	bl	24df8 <_obstack_memory_used@@Base+0x40e8>
   25160:	ldr	r4, [sp]
   25164:	add	sp, sp, #4
   25168:	pop	{pc}		; (ldr pc, [sp], #4)
   2516c:	bl	11bb8 <__errno_location@plt>
   25170:	mov	r3, #12
   25174:	str	r3, [r0]
   25178:	mov	r0, #0
   2517c:	b	25160 <_obstack_memory_used@@Base+0x4450>
   25180:	eor	r1, r1, #-2147483648	; 0x80000000
   25184:	b	2518c <_obstack_memory_used@@Base+0x447c>
   25188:	eor	r3, r3, #-2147483648	; 0x80000000
   2518c:	push	{r4, r5, lr}
   25190:	lsl	r4, r1, #1
   25194:	lsl	r5, r3, #1
   25198:	teq	r4, r5
   2519c:	teqeq	r0, r2
   251a0:	orrsne	ip, r4, r0
   251a4:	orrsne	ip, r5, r2
   251a8:	mvnsne	ip, r4, asr #21
   251ac:	mvnsne	ip, r5, asr #21
   251b0:	beq	2539c <_obstack_memory_used@@Base+0x468c>
   251b4:	lsr	r4, r4, #21
   251b8:	rsbs	r5, r4, r5, lsr #21
   251bc:	rsblt	r5, r5, #0
   251c0:	ble	251e0 <_obstack_memory_used@@Base+0x44d0>
   251c4:	add	r4, r4, r5
   251c8:	eor	r2, r0, r2
   251cc:	eor	r3, r1, r3
   251d0:	eor	r0, r2, r0
   251d4:	eor	r1, r3, r1
   251d8:	eor	r2, r0, r2
   251dc:	eor	r3, r1, r3
   251e0:	cmp	r5, #54	; 0x36
   251e4:	pophi	{r4, r5, pc}
   251e8:	tst	r1, #-2147483648	; 0x80000000
   251ec:	lsl	r1, r1, #12
   251f0:	mov	ip, #1048576	; 0x100000
   251f4:	orr	r1, ip, r1, lsr #12
   251f8:	beq	25204 <_obstack_memory_used@@Base+0x44f4>
   251fc:	rsbs	r0, r0, #0
   25200:	rsc	r1, r1, #0
   25204:	tst	r3, #-2147483648	; 0x80000000
   25208:	lsl	r3, r3, #12
   2520c:	orr	r3, ip, r3, lsr #12
   25210:	beq	2521c <_obstack_memory_used@@Base+0x450c>
   25214:	rsbs	r2, r2, #0
   25218:	rsc	r3, r3, #0
   2521c:	teq	r4, r5
   25220:	beq	25384 <_obstack_memory_used@@Base+0x4674>
   25224:	sub	r4, r4, #1
   25228:	rsbs	lr, r5, #32
   2522c:	blt	25248 <_obstack_memory_used@@Base+0x4538>
   25230:	lsl	ip, r2, lr
   25234:	adds	r0, r0, r2, lsr r5
   25238:	adc	r1, r1, #0
   2523c:	adds	r0, r0, r3, lsl lr
   25240:	adcs	r1, r1, r3, asr r5
   25244:	b	25264 <_obstack_memory_used@@Base+0x4554>
   25248:	sub	r5, r5, #32
   2524c:	add	lr, lr, #32
   25250:	cmp	r2, #1
   25254:	lsl	ip, r3, lr
   25258:	orrcs	ip, ip, #2
   2525c:	adds	r0, r0, r3, asr r5
   25260:	adcs	r1, r1, r3, asr #31
   25264:	and	r5, r1, #-2147483648	; 0x80000000
   25268:	bpl	25278 <_obstack_memory_used@@Base+0x4568>
   2526c:	rsbs	ip, ip, #0
   25270:	rscs	r0, r0, #0
   25274:	rsc	r1, r1, #0
   25278:	cmp	r1, #1048576	; 0x100000
   2527c:	bcc	252bc <_obstack_memory_used@@Base+0x45ac>
   25280:	cmp	r1, #2097152	; 0x200000
   25284:	bcc	252a4 <_obstack_memory_used@@Base+0x4594>
   25288:	lsrs	r1, r1, #1
   2528c:	rrxs	r0, r0
   25290:	rrx	ip, ip
   25294:	add	r4, r4, #1
   25298:	lsl	r2, r4, #21
   2529c:	cmn	r2, #4194304	; 0x400000
   252a0:	bcs	253fc <_obstack_memory_used@@Base+0x46ec>
   252a4:	cmp	ip, #-2147483648	; 0x80000000
   252a8:	lsrseq	ip, r0, #1
   252ac:	adcs	r0, r0, #0
   252b0:	adc	r1, r1, r4, lsl #20
   252b4:	orr	r1, r1, r5
   252b8:	pop	{r4, r5, pc}
   252bc:	lsls	ip, ip, #1
   252c0:	adcs	r0, r0, r0
   252c4:	adc	r1, r1, r1
   252c8:	tst	r1, #1048576	; 0x100000
   252cc:	sub	r4, r4, #1
   252d0:	bne	252a4 <_obstack_memory_used@@Base+0x4594>
   252d4:	teq	r1, #0
   252d8:	moveq	r1, r0
   252dc:	moveq	r0, #0
   252e0:	clz	r3, r1
   252e4:	addeq	r3, r3, #32
   252e8:	sub	r3, r3, #11
   252ec:	subs	r2, r3, #32
   252f0:	bge	25314 <_obstack_memory_used@@Base+0x4604>
   252f4:	adds	r2, r2, #12
   252f8:	ble	25310 <_obstack_memory_used@@Base+0x4600>
   252fc:	add	ip, r2, #20
   25300:	rsb	r2, r2, #12
   25304:	lsl	r0, r1, ip
   25308:	lsr	r1, r1, r2
   2530c:	b	25324 <_obstack_memory_used@@Base+0x4614>
   25310:	add	r2, r2, #20
   25314:	rsble	ip, r2, #32
   25318:	lsl	r1, r1, r2
   2531c:	orrle	r1, r1, r0, lsr ip
   25320:	lslle	r0, r0, r2
   25324:	subs	r4, r4, r3
   25328:	addge	r1, r1, r4, lsl #20
   2532c:	orrge	r1, r1, r5
   25330:	popge	{r4, r5, pc}
   25334:	mvn	r4, r4
   25338:	subs	r4, r4, #31
   2533c:	bge	25378 <_obstack_memory_used@@Base+0x4668>
   25340:	adds	r4, r4, #12
   25344:	bgt	25360 <_obstack_memory_used@@Base+0x4650>
   25348:	add	r4, r4, #20
   2534c:	rsb	r2, r4, #32
   25350:	lsr	r0, r0, r4
   25354:	orr	r0, r0, r1, lsl r2
   25358:	orr	r1, r5, r1, lsr r4
   2535c:	pop	{r4, r5, pc}
   25360:	rsb	r4, r4, #12
   25364:	rsb	r2, r4, #32
   25368:	lsr	r0, r0, r2
   2536c:	orr	r0, r0, r1, lsl r4
   25370:	mov	r1, r5
   25374:	pop	{r4, r5, pc}
   25378:	lsr	r0, r1, r4
   2537c:	mov	r1, r5
   25380:	pop	{r4, r5, pc}
   25384:	teq	r4, #0
   25388:	eor	r3, r3, #1048576	; 0x100000
   2538c:	eoreq	r1, r1, #1048576	; 0x100000
   25390:	addeq	r4, r4, #1
   25394:	subne	r5, r5, #1
   25398:	b	25224 <_obstack_memory_used@@Base+0x4514>
   2539c:	mvns	ip, r4, asr #21
   253a0:	mvnsne	ip, r5, asr #21
   253a4:	beq	2540c <_obstack_memory_used@@Base+0x46fc>
   253a8:	teq	r4, r5
   253ac:	teqeq	r0, r2
   253b0:	beq	253c4 <_obstack_memory_used@@Base+0x46b4>
   253b4:	orrs	ip, r4, r0
   253b8:	moveq	r1, r3
   253bc:	moveq	r0, r2
   253c0:	pop	{r4, r5, pc}
   253c4:	teq	r1, r3
   253c8:	movne	r1, #0
   253cc:	movne	r0, #0
   253d0:	popne	{r4, r5, pc}
   253d4:	lsrs	ip, r4, #21
   253d8:	bne	253ec <_obstack_memory_used@@Base+0x46dc>
   253dc:	lsls	r0, r0, #1
   253e0:	adcs	r1, r1, r1
   253e4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   253e8:	pop	{r4, r5, pc}
   253ec:	adds	r4, r4, #4194304	; 0x400000
   253f0:	addcc	r1, r1, #1048576	; 0x100000
   253f4:	popcc	{r4, r5, pc}
   253f8:	and	r5, r1, #-2147483648	; 0x80000000
   253fc:	orr	r1, r5, #2130706432	; 0x7f000000
   25400:	orr	r1, r1, #15728640	; 0xf00000
   25404:	mov	r0, #0
   25408:	pop	{r4, r5, pc}
   2540c:	mvns	ip, r4, asr #21
   25410:	movne	r1, r3
   25414:	movne	r0, r2
   25418:	mvnseq	ip, r5, asr #21
   2541c:	movne	r3, r1
   25420:	movne	r2, r0
   25424:	orrs	r4, r0, r1, lsl #12
   25428:	orrseq	r5, r2, r3, lsl #12
   2542c:	teqeq	r1, r3
   25430:	orrne	r1, r1, #524288	; 0x80000
   25434:	pop	{r4, r5, pc}
   25438:	teq	r0, #0
   2543c:	moveq	r1, #0
   25440:	bxeq	lr
   25444:	push	{r4, r5, lr}
   25448:	mov	r4, #1024	; 0x400
   2544c:	add	r4, r4, #50	; 0x32
   25450:	mov	r5, #0
   25454:	mov	r1, #0
   25458:	b	252d4 <_obstack_memory_used@@Base+0x45c4>
   2545c:	teq	r0, #0
   25460:	moveq	r1, #0
   25464:	bxeq	lr
   25468:	push	{r4, r5, lr}
   2546c:	mov	r4, #1024	; 0x400
   25470:	add	r4, r4, #50	; 0x32
   25474:	ands	r5, r0, #-2147483648	; 0x80000000
   25478:	rsbmi	r0, r0, #0
   2547c:	mov	r1, #0
   25480:	b	252d4 <_obstack_memory_used@@Base+0x45c4>
   25484:	lsls	r2, r0, #1
   25488:	asr	r1, r2, #3
   2548c:	rrx	r1, r1
   25490:	lsl	r0, r2, #28
   25494:	andsne	r3, r2, #-16777216	; 0xff000000
   25498:	teqne	r3, #-16777216	; 0xff000000
   2549c:	eorne	r1, r1, #939524096	; 0x38000000
   254a0:	bxne	lr
   254a4:	bics	r2, r2, #-16777216	; 0xff000000
   254a8:	bxeq	lr
   254ac:	teq	r3, #-16777216	; 0xff000000
   254b0:	orreq	r1, r1, #524288	; 0x80000
   254b4:	bxeq	lr
   254b8:	push	{r4, r5, lr}
   254bc:	mov	r4, #896	; 0x380
   254c0:	and	r5, r1, #-2147483648	; 0x80000000
   254c4:	bic	r1, r1, #-2147483648	; 0x80000000
   254c8:	b	252d4 <_obstack_memory_used@@Base+0x45c4>
   254cc:	orrs	r2, r0, r1
   254d0:	bxeq	lr
   254d4:	push	{r4, r5, lr}
   254d8:	mov	r5, #0
   254dc:	b	254fc <_obstack_memory_used@@Base+0x47ec>
   254e0:	orrs	r2, r0, r1
   254e4:	bxeq	lr
   254e8:	push	{r4, r5, lr}
   254ec:	ands	r5, r1, #-2147483648	; 0x80000000
   254f0:	bpl	254fc <_obstack_memory_used@@Base+0x47ec>
   254f4:	rsbs	r0, r0, #0
   254f8:	rsc	r1, r1, #0
   254fc:	mov	r4, #1024	; 0x400
   25500:	add	r4, r4, #50	; 0x32
   25504:	lsrs	ip, r1, #22
   25508:	beq	25278 <_obstack_memory_used@@Base+0x4568>
   2550c:	mov	r2, #3
   25510:	lsrs	ip, ip, #3
   25514:	addne	r2, r2, #3
   25518:	lsrs	ip, ip, #3
   2551c:	addne	r2, r2, #3
   25520:	add	r2, r2, ip, lsr #3
   25524:	rsb	r3, r2, #32
   25528:	lsl	ip, r0, r3
   2552c:	lsr	r0, r0, r2
   25530:	orr	r0, r0, r1, lsl r3
   25534:	lsr	r1, r1, r2
   25538:	add	r4, r4, r2
   2553c:	b	25278 <_obstack_memory_used@@Base+0x4568>
   25540:	cmp	r3, #0
   25544:	cmpeq	r2, #0
   25548:	bne	2556c <_obstack_memory_used@@Base+0x485c>
   2554c:	cmp	r1, #0
   25550:	movlt	r1, #-2147483648	; 0x80000000
   25554:	movlt	r0, #0
   25558:	blt	25568 <_obstack_memory_used@@Base+0x4858>
   2555c:	cmpeq	r0, #0
   25560:	mvnne	r1, #-2147483648	; 0x80000000
   25564:	mvnne	r0, #0
   25568:	b	25650 <_obstack_memory_used@@Base+0x4940>
   2556c:	sub	sp, sp, #8
   25570:	push	{sp, lr}
   25574:	cmp	r1, #0
   25578:	blt	25598 <_obstack_memory_used@@Base+0x4888>
   2557c:	cmp	r3, #0
   25580:	blt	255cc <_obstack_memory_used@@Base+0x48bc>
   25584:	bl	256a0 <_obstack_memory_used@@Base+0x4990>
   25588:	ldr	lr, [sp, #4]
   2558c:	add	sp, sp, #8
   25590:	pop	{r2, r3}
   25594:	bx	lr
   25598:	rsbs	r0, r0, #0
   2559c:	sbc	r1, r1, r1, lsl #1
   255a0:	cmp	r3, #0
   255a4:	blt	255f0 <_obstack_memory_used@@Base+0x48e0>
   255a8:	bl	256a0 <_obstack_memory_used@@Base+0x4990>
   255ac:	ldr	lr, [sp, #4]
   255b0:	add	sp, sp, #8
   255b4:	pop	{r2, r3}
   255b8:	rsbs	r0, r0, #0
   255bc:	sbc	r1, r1, r1, lsl #1
   255c0:	rsbs	r2, r2, #0
   255c4:	sbc	r3, r3, r3, lsl #1
   255c8:	bx	lr
   255cc:	rsbs	r2, r2, #0
   255d0:	sbc	r3, r3, r3, lsl #1
   255d4:	bl	256a0 <_obstack_memory_used@@Base+0x4990>
   255d8:	ldr	lr, [sp, #4]
   255dc:	add	sp, sp, #8
   255e0:	pop	{r2, r3}
   255e4:	rsbs	r0, r0, #0
   255e8:	sbc	r1, r1, r1, lsl #1
   255ec:	bx	lr
   255f0:	rsbs	r2, r2, #0
   255f4:	sbc	r3, r3, r3, lsl #1
   255f8:	bl	256a0 <_obstack_memory_used@@Base+0x4990>
   255fc:	ldr	lr, [sp, #4]
   25600:	add	sp, sp, #8
   25604:	pop	{r2, r3}
   25608:	rsbs	r2, r2, #0
   2560c:	sbc	r3, r3, r3, lsl #1
   25610:	bx	lr
   25614:	cmp	r3, #0
   25618:	cmpeq	r2, #0
   2561c:	bne	25634 <_obstack_memory_used@@Base+0x4924>
   25620:	cmp	r1, #0
   25624:	cmpeq	r0, #0
   25628:	mvnne	r1, #0
   2562c:	mvnne	r0, #0
   25630:	b	25650 <_obstack_memory_used@@Base+0x4940>
   25634:	sub	sp, sp, #8
   25638:	push	{sp, lr}
   2563c:	bl	256a0 <_obstack_memory_used@@Base+0x4990>
   25640:	ldr	lr, [sp, #4]
   25644:	add	sp, sp, #8
   25648:	pop	{r2, r3}
   2564c:	bx	lr
   25650:	push	{r1, lr}
   25654:	mov	r0, #8
   25658:	bl	1187c <raise@plt>
   2565c:	pop	{r1, pc}
   25660:	vmov	d6, r0, r1
   25664:	vldr	d7, [pc, #36]	; 25690 <_obstack_memory_used@@Base+0x4980>
   25668:	vldr	d5, [pc, #40]	; 25698 <_obstack_memory_used@@Base+0x4988>
   2566c:	vmul.f64	d7, d6, d7
   25670:	vcvt.u32.f64	s14, d7
   25674:	vcvt.f64.u32	d4, s14
   25678:	vmov	r1, s14
   2567c:	vmls.f64	d6, d4, d5
   25680:	vcvt.u32.f64	s15, d6
   25684:	vmov	r0, s15
   25688:	bx	lr
   2568c:	nop			; (mov r0, r0)
   25690:	andeq	r0, r0, r0
   25694:	ldclcc	0, cr0, [r0]
   25698:	andeq	r0, r0, r0
   2569c:	mvnsmi	r0, r0
   256a0:	cmp	r1, r3
   256a4:	cmpeq	r0, r2
   256a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256ac:	mov	r4, r0
   256b0:	movcc	r0, #0
   256b4:	mov	r5, r1
   256b8:	ldr	lr, [sp, #36]	; 0x24
   256bc:	movcc	r1, r0
   256c0:	bcc	257bc <_obstack_memory_used@@Base+0x4aac>
   256c4:	cmp	r3, #0
   256c8:	clzeq	ip, r2
   256cc:	clzne	ip, r3
   256d0:	addeq	ip, ip, #32
   256d4:	cmp	r5, #0
   256d8:	clzeq	r1, r4
   256dc:	addeq	r1, r1, #32
   256e0:	clzne	r1, r5
   256e4:	sub	ip, ip, r1
   256e8:	sub	sl, ip, #32
   256ec:	lsl	r9, r3, ip
   256f0:	rsb	fp, ip, #32
   256f4:	orr	r9, r9, r2, lsl sl
   256f8:	orr	r9, r9, r2, lsr fp
   256fc:	lsl	r8, r2, ip
   25700:	cmp	r5, r9
   25704:	cmpeq	r4, r8
   25708:	movcc	r0, #0
   2570c:	movcc	r1, r0
   25710:	bcc	2572c <_obstack_memory_used@@Base+0x4a1c>
   25714:	mov	r0, #1
   25718:	subs	r4, r4, r8
   2571c:	lsl	r1, r0, sl
   25720:	orr	r1, r1, r0, lsr fp
   25724:	lsl	r0, r0, ip
   25728:	sbc	r5, r5, r9
   2572c:	cmp	ip, #0
   25730:	beq	257bc <_obstack_memory_used@@Base+0x4aac>
   25734:	lsr	r6, r8, #1
   25738:	orr	r6, r6, r9, lsl #31
   2573c:	lsr	r7, r9, #1
   25740:	mov	r2, ip
   25744:	b	25768 <_obstack_memory_used@@Base+0x4a58>
   25748:	subs	r3, r4, r6
   2574c:	sbc	r8, r5, r7
   25750:	adds	r3, r3, r3
   25754:	adc	r8, r8, r8
   25758:	adds	r4, r3, #1
   2575c:	adc	r5, r8, #0
   25760:	subs	r2, r2, #1
   25764:	beq	25784 <_obstack_memory_used@@Base+0x4a74>
   25768:	cmp	r5, r7
   2576c:	cmpeq	r4, r6
   25770:	bcs	25748 <_obstack_memory_used@@Base+0x4a38>
   25774:	adds	r4, r4, r4
   25778:	adc	r5, r5, r5
   2577c:	subs	r2, r2, #1
   25780:	bne	25768 <_obstack_memory_used@@Base+0x4a58>
   25784:	lsr	r3, r4, ip
   25788:	orr	r3, r3, r5, lsl fp
   2578c:	lsr	r2, r5, ip
   25790:	orr	r3, r3, r5, lsr sl
   25794:	adds	r0, r0, r4
   25798:	mov	r4, r3
   2579c:	lsl	r3, r2, ip
   257a0:	orr	r3, r3, r4, lsl sl
   257a4:	lsl	ip, r4, ip
   257a8:	orr	r3, r3, r4, lsr fp
   257ac:	adc	r1, r1, r5
   257b0:	subs	r0, r0, ip
   257b4:	mov	r5, r2
   257b8:	sbc	r1, r1, r3
   257bc:	cmp	lr, #0
   257c0:	strdne	r4, [lr]
   257c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   257cc:	mov	r7, r0
   257d0:	ldr	r6, [pc, #72]	; 25820 <_obstack_memory_used@@Base+0x4b10>
   257d4:	ldr	r5, [pc, #72]	; 25824 <_obstack_memory_used@@Base+0x4b14>
   257d8:	add	r6, pc, r6
   257dc:	add	r5, pc, r5
   257e0:	sub	r6, r6, r5
   257e4:	mov	r8, r1
   257e8:	mov	r9, r2
   257ec:	bl	11838 <calloc@plt-0x20>
   257f0:	asrs	r6, r6, #2
   257f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   257f8:	mov	r4, #0
   257fc:	add	r4, r4, #1
   25800:	ldr	r3, [r5], #4
   25804:	mov	r2, r9
   25808:	mov	r1, r8
   2580c:	mov	r0, r7
   25810:	blx	r3
   25814:	cmp	r6, r4
   25818:	bne	257fc <_obstack_memory_used@@Base+0x4aec>
   2581c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25820:	andeq	r5, r1, r4, lsr #14
   25824:	andeq	r5, r1, ip, lsl r7
   25828:	bx	lr
   2582c:	ldr	r3, [pc, #12]	; 25840 <_obstack_memory_used@@Base+0x4b30>
   25830:	mov	r1, #0
   25834:	add	r3, pc, r3
   25838:	ldr	r2, [r3]
   2583c:	b	11bdc <__cxa_atexit@plt>
   25840:	muleq	r1, r0, r9

Disassembly of section .fini:

00025844 <.fini>:
   25844:	push	{r3, lr}
   25848:	pop	{r3, pc}
