
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

000113ec <.init>:
   113ec:	push	{r3, lr}
   113f0:	bl	11cc4 <__assert_fail@plt+0x498>
   113f4:	pop	{r3, pc}

Disassembly of section .plt:

000113f8 <fstatfs64@plt-0x14>:
   113f8:	push	{lr}		; (str lr, [sp, #-4]!)
   113fc:	ldr	lr, [pc, #4]	; 11408 <fstatfs64@plt-0x4>
   11400:	add	lr, pc, lr
   11404:	ldr	pc, [lr, #8]!
   11408:	strdeq	sl, [r1], -r8

0001140c <fstatfs64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3064]!	; 0xbf8

00011418 <selabel_lookup@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3056]!	; 0xbf0

00011424 <calloc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011430 <fputs_unlocked@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3040]!	; 0xbe0

0001143c <raise@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3032]!	; 0xbd8

00011448 <is_selinux_enabled@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3024]!	; 0xbd0

00011454 <strcmp@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011460 <context_type_get@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3008]!	; 0xbc0

0001146c <fflush@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3000]!	; 0xbb8

00011478 <lsetfilecon@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #2992]!	; 0xbb0

00011484 <memmove@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #2984]!	; 0xba8

00011490 <free@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #2976]!	; 0xba0

0001149c <faccessat@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #2968]!	; 0xb98

000114a8 <_exit@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #2960]!	; 0xb90

000114b4 <memcpy@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #2952]!	; 0xb88

000114c0 <mbsinit@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #2944]!	; 0xb80

000114cc <context_new@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #2936]!	; 0xb78

000114d8 <memcmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #2928]!	; 0xb70

000114e4 <fputc_unlocked@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #2920]!	; 0xb68

000114f0 <dcgettext@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #2912]!	; 0xb60

000114fc <context_type_set@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #2904]!	; 0xb58

00011508 <realloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #2896]!	; 0xb50

00011514 <fgetfilecon@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #2888]!	; 0xb48

00011520 <textdomain@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #2880]!	; 0xb40

0001152c <rawmemchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #2872]!	; 0xb38

00011538 <__fxstatat64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #2864]!	; 0xb30

00011544 <iswprint@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #2856]!	; 0xb28

00011550 <__fxstat64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #2848]!	; 0xb20

0001155c <readlink@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #2840]!	; 0xb18

00011568 <fwrite@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2832]!	; 0xb10

00011574 <lseek64@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2824]!	; 0xb08

00011580 <__ctype_get_mb_cur_max@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2816]!	; 0xb00

0001158c <getcon@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2808]!	; 0xaf8

00011598 <__fpending@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2800]!	; 0xaf0

000115a4 <mbrtowc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2792]!	; 0xae8

000115b0 <error@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2784]!	; 0xae0

000115bc <open64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2776]!	; 0xad8

000115c8 <lgetfilecon@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2768]!	; 0xad0

000115d4 <malloc@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2760]!	; 0xac8

000115e0 <__libc_start_main@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2752]!	; 0xac0

000115ec <__freading@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2744]!	; 0xab8

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2736]!	; 0xab0

00011604 <context_free@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011610 <mempcpy@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #106496	; 0x1a000
   11618:	ldr	pc, [ip, #2720]!	; 0xaa0

0001161c <getopt_long@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #106496	; 0x1a000
   11624:	ldr	pc, [ip, #2712]!	; 0xa98

00011628 <__ctype_b_loc@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #106496	; 0x1a000
   11630:	ldr	pc, [ip, #2704]!	; 0xa90

00011634 <getcwd@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #106496	; 0x1a000
   1163c:	ldr	pc, [ip, #2696]!	; 0xa88

00011640 <exit@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #106496	; 0x1a000
   11648:	ldr	pc, [ip, #2688]!	; 0xa80

0001164c <getfilecon@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #106496	; 0x1a000
   11654:	ldr	pc, [ip, #2680]!	; 0xa78

00011658 <strlen@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #106496	; 0x1a000
   11660:	ldr	pc, [ip, #2672]!	; 0xa70

00011664 <selabel_open@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #106496	; 0x1a000
   1166c:	ldr	pc, [ip, #2664]!	; 0xa68

00011670 <openat64@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #106496	; 0x1a000
   11678:	ldr	pc, [ip, #2656]!	; 0xa60

0001167c <setfscreatecon@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #106496	; 0x1a000
   11684:	ldr	pc, [ip, #2648]!	; 0xa58

00011688 <__errno_location@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2640]!	; 0xa50

00011694 <__sprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2632]!	; 0xa48

000116a0 <__cxa_atexit@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2624]!	; 0xa40

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2616]!	; 0xa38

000116b8 <__printf_chk@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2608]!	; 0xa30

000116c4 <fileno@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2600]!	; 0xa28

000116d0 <__fprintf_chk@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2592]!	; 0xa20

000116dc <fclose@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2584]!	; 0xa18

000116e8 <fseeko64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2576]!	; 0xa10

000116f4 <fcntl64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2568]!	; 0xa08

00011700 <setlocale@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2560]!	; 0xa00

0001170c <fsetfilecon@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2552]!	; 0x9f8

00011718 <strrchr@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2544]!	; 0x9f0

00011724 <nl_langinfo@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011730 <readdir64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2528]!	; 0x9e0

0001173c <fdopendir@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2520]!	; 0x9d8

00011748 <security_compute_create@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2512]!	; 0x9d0

00011754 <dirfd@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011760 <fchdir@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2496]!	; 0x9c0

0001176c <qsort@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2488]!	; 0x9b8

00011778 <freecon@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2480]!	; 0x9b0

00011784 <bindtextdomain@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011790 <getfscreatecon@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2464]!	; 0x9a0

0001179c <umask@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2456]!	; 0x998

000117a8 <context_str@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2448]!	; 0x990

000117b4 <chmod@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2440]!	; 0x988

000117c0 <__xstat64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2432]!	; 0x980

000117cc <strncmp@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2424]!	; 0x978

000117d8 <abort@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2416]!	; 0x970

000117e4 <close@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2408]!	; 0x968

000117f0 <__lxstat64@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2400]!	; 0x960

000117fc <mkfifo@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2392]!	; 0x958

00011808 <mode_to_security_class@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2384]!	; 0x950

00011814 <closedir@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2376]!	; 0x948

00011820 <strspn@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2368]!	; 0x940

0001182c <__assert_fail@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

00011838 <lchmod@@Base-0x4f24>:
   11838:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1183c:	mov	r5, r1
   11840:	strd	r6, [sp, #8]
   11844:	movw	r6, #44952	; 0xaf98
   11848:	movt	r6, #1
   1184c:	strd	r8, [sp, #16]
   11850:	mov	r9, #0
   11854:	mov	r8, r0
   11858:	strd	sl, [sp, #24]
   1185c:	movw	r7, #49632	; 0xc1e0
   11860:	movt	r7, #2
   11864:	str	lr, [sp, #32]
   11868:	sub	sp, sp, #28
   1186c:	mov	fp, r9
   11870:	ldr	r0, [r1]
   11874:	str	r9, [sp, #8]
   11878:	bl	16e9c <lchmod@@Base+0x740>
   1187c:	movw	r1, #45460	; 0xb194
   11880:	movt	r1, #1
   11884:	ldr	sl, [pc, #1016]	; 11c84 <__assert_fail@plt+0x458>
   11888:	mov	r0, #6
   1188c:	bl	11700 <setlocale@plt>
   11890:	movw	r1, #44808	; 0xaf08
   11894:	movt	r1, #1
   11898:	movw	r0, #44640	; 0xae60
   1189c:	movt	r0, #1
   118a0:	bl	11784 <bindtextdomain@plt>
   118a4:	movw	r0, #44640	; 0xae60
   118a8:	movt	r0, #1
   118ac:	bl	11520 <textdomain@plt>
   118b0:	movw	r0, #11768	; 0x2df8
   118b4:	movt	r0, #1
   118b8:	bl	1ab1c <lchmod@@Base+0x43c0>
   118bc:	mov	r4, #0
   118c0:	mov	r3, sl
   118c4:	mov	r2, r6
   118c8:	mov	r1, r5
   118cc:	mov	r0, r8
   118d0:	str	r4, [sp]
   118d4:	bl	1161c <getopt_long@plt>
   118d8:	cmn	r0, #1
   118dc:	beq	119e0 <__assert_fail@plt+0x1b4>
   118e0:	cmn	r0, #2
   118e4:	beq	11c38 <__assert_fail@plt+0x40c>
   118e8:	ble	11954 <__assert_fail@plt+0x128>
   118ec:	cmp	r0, #90	; 0x5a
   118f0:	bne	1199c <__assert_fail@plt+0x170>
   118f4:	bl	11448 <is_selinux_enabled@plt>
   118f8:	cmp	r0, #0
   118fc:	ble	119ac <__assert_fail@plt+0x180>
   11900:	ldr	r2, [r7]
   11904:	cmp	r2, #0
   11908:	strne	r2, [sp, #8]
   1190c:	bne	118bc <__assert_fail@plt+0x90>
   11910:	mov	r1, r2
   11914:	mov	r0, r2
   11918:	bl	11664 <selabel_open@plt>
   1191c:	subs	r9, r0, #0
   11920:	bne	118bc <__assert_fail@plt+0x90>
   11924:	bl	11688 <__errno_location@plt>
   11928:	ldr	r4, [r0]
   1192c:	mov	r2, #5
   11930:	mov	r0, r9
   11934:	movw	r1, #44832	; 0xaf20
   11938:	movt	r1, #1
   1193c:	bl	114f0 <dcgettext@plt>
   11940:	mov	r2, r0
   11944:	mov	r0, r9
   11948:	mov	r1, r4
   1194c:	bl	115b0 <error@plt>
   11950:	b	118bc <__assert_fail@plt+0x90>
   11954:	cmn	r0, #3
   11958:	bne	11c30 <__assert_fail@plt+0x404>
   1195c:	movw	r2, #44936	; 0xaf88
   11960:	movt	r2, #1
   11964:	movw	r3, #49532	; 0xc17c
   11968:	movt	r3, #2
   1196c:	movw	r0, #49628	; 0xc1dc
   11970:	movt	r0, #2
   11974:	stm	sp, {r2, r4}
   11978:	movw	r1, #43976	; 0xabc8
   1197c:	movt	r1, #1
   11980:	ldr	r0, [r0]
   11984:	movw	r2, #44636	; 0xae5c
   11988:	movt	r2, #1
   1198c:	ldr	r3, [r3]
   11990:	bl	19924 <lchmod@@Base+0x31c8>
   11994:	mov	r0, r4
   11998:	bl	11640 <exit@plt>
   1199c:	cmp	r0, #109	; 0x6d
   119a0:	bne	11c30 <__assert_fail@plt+0x404>
   119a4:	ldr	fp, [r7]
   119a8:	b	118bc <__assert_fail@plt+0x90>
   119ac:	ldr	r3, [r7]
   119b0:	cmp	r3, #0
   119b4:	beq	118bc <__assert_fail@plt+0x90>
   119b8:	mov	r2, #5
   119bc:	mov	r0, r4
   119c0:	movw	r1, #44860	; 0xaf3c
   119c4:	movt	r1, #1
   119c8:	bl	114f0 <dcgettext@plt>
   119cc:	mov	r2, r0
   119d0:	mov	r1, r4
   119d4:	mov	r0, r4
   119d8:	bl	115b0 <error@plt>
   119dc:	b	118bc <__assert_fail@plt+0x90>
   119e0:	movw	r6, #49616	; 0xc1d0
   119e4:	movt	r6, #2
   119e8:	ldr	r3, [r6]
   119ec:	cmp	r3, r8
   119f0:	beq	11c0c <__assert_fail@plt+0x3e0>
   119f4:	ldr	r3, [sp, #8]
   119f8:	cmp	r3, #0
   119fc:	beq	11a4c <__assert_fail@plt+0x220>
   11a00:	mov	r0, r3
   11a04:	bl	1167c <setfscreatecon@plt>
   11a08:	cmp	r0, #0
   11a0c:	bge	11a4c <__assert_fail@plt+0x220>
   11a10:	bl	11688 <__errno_location@plt>
   11a14:	ldr	r5, [r0]
   11a18:	mov	r2, #5
   11a1c:	mov	r0, r4
   11a20:	movw	r1, #44972	; 0xafac
   11a24:	movt	r1, #1
   11a28:	bl	114f0 <dcgettext@plt>
   11a2c:	mov	r4, r0
   11a30:	ldr	r0, [sp, #8]
   11a34:	bl	1918c <lchmod@@Base+0x2a30>
   11a38:	mov	r3, r0
   11a3c:	mov	r2, r4
   11a40:	mov	r1, r5
   11a44:	mov	r0, #1
   11a48:	bl	115b0 <error@plt>
   11a4c:	cmp	fp, #0
   11a50:	beq	11b8c <__assert_fail@plt+0x360>
   11a54:	mov	r0, fp
   11a58:	bl	16880 <lchmod@@Base+0x124>
   11a5c:	subs	sl, r0, #0
   11a60:	beq	11c64 <__assert_fail@plt+0x438>
   11a64:	mov	r0, #0
   11a68:	mov	r7, r0
   11a6c:	bl	1179c <umask@plt>
   11a70:	mov	r4, r0
   11a74:	bl	1179c <umask@plt>
   11a78:	mov	r2, r4
   11a7c:	mov	r3, sl
   11a80:	str	r7, [sp]
   11a84:	mov	r1, r7
   11a88:	movw	r0, #438	; 0x1b6
   11a8c:	bl	16c80 <lchmod@@Base+0x524>
   11a90:	mov	r4, r0
   11a94:	mov	r0, sl
   11a98:	bl	130e8 <__assert_fail@plt+0x18bc>
   11a9c:	bic	r3, r4, #508	; 0x1fc
   11aa0:	bic	r3, r3, #3
   11aa4:	cmp	r3, r7
   11aa8:	bne	11c40 <__assert_fail@plt+0x414>
   11aac:	ldr	r3, [r6]
   11ab0:	cmp	r3, r8
   11ab4:	bge	11b94 <__assert_fail@plt+0x368>
   11ab8:	movw	r2, #45108	; 0xb034
   11abc:	movt	r2, #1
   11ac0:	str	r2, [sp, #20]
   11ac4:	movw	r2, #45084	; 0xb01c
   11ac8:	movt	r2, #1
   11acc:	str	r2, [sp, #12]
   11ad0:	mov	r2, #0
   11ad4:	str	r2, [sp, #8]
   11ad8:	b	11b10 <__assert_fail@plt+0x2e4>
   11adc:	cmp	fp, #0
   11ae0:	beq	11afc <__assert_fail@plt+0x2d0>
   11ae4:	ldr	r3, [r6]
   11ae8:	mov	r1, r4
   11aec:	ldr	r0, [r5, r3, lsl #2]
   11af0:	bl	1675c <lchmod@@Base>
   11af4:	cmp	r0, #0
   11af8:	bne	11bbc <__assert_fail@plt+0x390>
   11afc:	ldr	r3, [r6]
   11b00:	add	r3, r3, #1
   11b04:	cmp	r3, r8
   11b08:	str	r3, [r6]
   11b0c:	bge	11b9c <__assert_fail@plt+0x370>
   11b10:	cmp	r9, #0
   11b14:	beq	11b28 <__assert_fail@plt+0x2fc>
   11b18:	mov	r2, #4096	; 0x1000
   11b1c:	mov	r0, r9
   11b20:	ldr	r1, [r5, r3, lsl #2]
   11b24:	bl	12378 <__assert_fail@plt+0xb4c>
   11b28:	ldr	r3, [r6]
   11b2c:	mov	r1, r4
   11b30:	ldr	r0, [r5, r3, lsl #2]
   11b34:	bl	117fc <mkfifo@plt>
   11b38:	subs	r7, r0, #0
   11b3c:	beq	11adc <__assert_fail@plt+0x2b0>
   11b40:	bl	11688 <__errno_location@plt>
   11b44:	mov	r3, #1
   11b48:	mov	r2, #5
   11b4c:	ldr	r7, [r0]
   11b50:	mov	r0, #0
   11b54:	ldr	r1, [sp, #12]
   11b58:	str	r3, [sp, #8]
   11b5c:	bl	114f0 <dcgettext@plt>
   11b60:	ldr	r3, [r6]
   11b64:	mov	sl, r0
   11b68:	mov	r0, #4
   11b6c:	ldr	r1, [r5, r3, lsl #2]
   11b70:	bl	18ed8 <lchmod@@Base+0x277c>
   11b74:	mov	r3, r0
   11b78:	mov	r2, sl
   11b7c:	mov	r1, r7
   11b80:	mov	r0, #0
   11b84:	bl	115b0 <error@plt>
   11b88:	b	11afc <__assert_fail@plt+0x2d0>
   11b8c:	movw	r4, #438	; 0x1b6
   11b90:	b	11aac <__assert_fail@plt+0x280>
   11b94:	mov	r3, #0
   11b98:	str	r3, [sp, #8]
   11b9c:	ldr	r0, [sp, #8]
   11ba0:	add	sp, sp, #28
   11ba4:	ldrd	r4, [sp]
   11ba8:	ldrd	r6, [sp, #8]
   11bac:	ldrd	r8, [sp, #16]
   11bb0:	ldrd	sl, [sp, #24]
   11bb4:	add	sp, sp, #32
   11bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bbc:	bl	11688 <__errno_location@plt>
   11bc0:	mov	r3, #1
   11bc4:	mov	r2, #5
   11bc8:	ldr	sl, [r0]
   11bcc:	mov	r0, r7
   11bd0:	ldr	r1, [sp, #20]
   11bd4:	str	r3, [sp, #8]
   11bd8:	bl	114f0 <dcgettext@plt>
   11bdc:	ldr	r3, [r6]
   11be0:	mov	r2, r0
   11be4:	mov	r0, #4
   11be8:	str	r2, [sp, #16]
   11bec:	ldr	r1, [r5, r3, lsl #2]
   11bf0:	bl	18ed8 <lchmod@@Base+0x277c>
   11bf4:	mov	r3, r0
   11bf8:	mov	r1, sl
   11bfc:	ldr	r2, [sp, #16]
   11c00:	mov	r0, r7
   11c04:	bl	115b0 <error@plt>
   11c08:	b	11afc <__assert_fail@plt+0x2d0>
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #44956	; 0xaf9c
   11c14:	movt	r1, #1
   11c18:	mov	r0, r4
   11c1c:	bl	114f0 <dcgettext@plt>
   11c20:	mov	r2, r0
   11c24:	mov	r1, r4
   11c28:	mov	r0, r4
   11c2c:	bl	115b0 <error@plt>
   11c30:	mov	r0, #1
   11c34:	bl	11d78 <__assert_fail@plt+0x54c>
   11c38:	mov	r0, r4
   11c3c:	bl	11d78 <__assert_fail@plt+0x54c>
   11c40:	mov	r2, #5
   11c44:	movw	r1, #45040	; 0xaff0
   11c48:	movt	r1, #1
   11c4c:	mov	r0, r7
   11c50:	bl	114f0 <dcgettext@plt>
   11c54:	mov	r2, r0
   11c58:	mov	r1, r7
   11c5c:	mov	r0, #1
   11c60:	bl	115b0 <error@plt>
   11c64:	mov	r2, #5
   11c68:	movw	r1, #45024	; 0xafe0
   11c6c:	movt	r1, #1
   11c70:	bl	114f0 <dcgettext@plt>
   11c74:	mov	r2, r0
   11c78:	mov	r1, sl
   11c7c:	mov	r0, #1
   11c80:	bl	115b0 <error@plt>
   11c84:	andeq	sl, r1, r8, ror fp
   11c88:	mov	fp, #0
   11c8c:	mov	lr, #0
   11c90:	pop	{r1}		; (ldr r1, [sp], #4)
   11c94:	mov	r2, sp
   11c98:	push	{r2}		; (str r2, [sp, #-4]!)
   11c9c:	push	{r0}		; (str r0, [sp, #-4]!)
   11ca0:	ldr	ip, [pc, #16]	; 11cb8 <__assert_fail@plt+0x48c>
   11ca4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ca8:	ldr	r0, [pc, #12]	; 11cbc <__assert_fail@plt+0x490>
   11cac:	ldr	r3, [pc, #12]	; 11cc0 <__assert_fail@plt+0x494>
   11cb0:	bl	115e0 <__libc_start_main@plt>
   11cb4:	bl	117d8 <abort@plt>
   11cb8:	andeq	sl, r1, r8, lsl fp
   11cbc:	andeq	r1, r1, r8, lsr r8
   11cc0:			; <UNDEFINED> instruction: 0x0001aab8
   11cc4:	ldr	r3, [pc, #20]	; 11ce0 <__assert_fail@plt+0x4b4>
   11cc8:	ldr	r2, [pc, #20]	; 11ce4 <__assert_fail@plt+0x4b8>
   11ccc:	add	r3, pc, r3
   11cd0:	ldr	r2, [r3, r2]
   11cd4:	cmp	r2, #0
   11cd8:	bxeq	lr
   11cdc:	b	115f8 <__gmon_start__@plt>
   11ce0:	andeq	sl, r1, ip, lsr #6
   11ce4:	andeq	r0, r0, r0, ror r1
   11ce8:	ldr	r0, [pc, #24]	; 11d08 <__assert_fail@plt+0x4dc>
   11cec:	ldr	r3, [pc, #24]	; 11d0c <__assert_fail@plt+0x4e0>
   11cf0:	cmp	r3, r0
   11cf4:	bxeq	lr
   11cf8:	ldr	r3, [pc, #16]	; 11d10 <__assert_fail@plt+0x4e4>
   11cfc:	cmp	r3, #0
   11d00:	bxeq	lr
   11d04:	bx	r3
   11d08:	andeq	ip, r2, r4, asr #3
   11d0c:	andeq	ip, r2, r4, asr #3
   11d10:	andeq	r0, r0, r0
   11d14:	ldr	r0, [pc, #36]	; 11d40 <__assert_fail@plt+0x514>
   11d18:	ldr	r1, [pc, #36]	; 11d44 <__assert_fail@plt+0x518>
   11d1c:	sub	r1, r1, r0
   11d20:	asr	r1, r1, #2
   11d24:	add	r1, r1, r1, lsr #31
   11d28:	asrs	r1, r1, #1
   11d2c:	bxeq	lr
   11d30:	ldr	r3, [pc, #16]	; 11d48 <__assert_fail@plt+0x51c>
   11d34:	cmp	r3, #0
   11d38:	bxeq	lr
   11d3c:	bx	r3
   11d40:	andeq	ip, r2, r4, asr #3
   11d44:	andeq	ip, r2, r4, asr #3
   11d48:	andeq	r0, r0, r0
   11d4c:	push	{r4, lr}
   11d50:	ldr	r4, [pc, #24]	; 11d70 <__assert_fail@plt+0x544>
   11d54:	ldrb	r3, [r4]
   11d58:	cmp	r3, #0
   11d5c:	popne	{r4, pc}
   11d60:	bl	11ce8 <__assert_fail@plt+0x4bc>
   11d64:	mov	r3, #1
   11d68:	strb	r3, [r4]
   11d6c:	pop	{r4, pc}
   11d70:	andeq	ip, r2, r4, ror #3
   11d74:	b	11d14 <__assert_fail@plt+0x4e8>
   11d78:	subs	r6, r0, #0
   11d7c:	str	r7, [sp, #-8]!
   11d80:	str	lr, [sp, #4]
   11d84:	sub	sp, sp, #56	; 0x38
   11d88:	beq	11dd0 <__assert_fail@plt+0x5a4>
   11d8c:	movw	r3, #49624	; 0xc1d8
   11d90:	movt	r3, #2
   11d94:	ldr	r4, [r3]
   11d98:	mov	r2, #5
   11d9c:	movw	r1, #43984	; 0xabd0
   11da0:	movt	r1, #1
   11da4:	mov	r0, #0
   11da8:	bl	114f0 <dcgettext@plt>
   11dac:	movw	r3, #49648	; 0xc1f0
   11db0:	movt	r3, #2
   11db4:	mov	r2, r0
   11db8:	mov	r1, #1
   11dbc:	ldr	r3, [r3]
   11dc0:	mov	r0, r4
   11dc4:	bl	116d0 <__fprintf_chk@plt>
   11dc8:	mov	r0, r6
   11dcc:	bl	11640 <exit@plt>
   11dd0:	mov	r2, #5
   11dd4:	movw	r1, #44024	; 0xabf8
   11dd8:	movt	r1, #1
   11ddc:	movw	r7, #49628	; 0xc1dc
   11de0:	movt	r7, #2
   11de4:	bl	114f0 <dcgettext@plt>
   11de8:	movw	r3, #49648	; 0xc1f0
   11dec:	movt	r3, #2
   11df0:	mov	r1, r0
   11df4:	mov	r0, #1
   11df8:	ldr	r2, [r3]
   11dfc:	bl	116b8 <__printf_chk@plt>
   11e00:	mov	r2, #5
   11e04:	movw	r1, #44056	; 0xac18
   11e08:	movt	r1, #1
   11e0c:	mov	r0, r6
   11e10:	bl	114f0 <dcgettext@plt>
   11e14:	ldr	r1, [r7]
   11e18:	bl	11430 <fputs_unlocked@plt>
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #44108	; 0xac4c
   11e24:	movt	r1, #1
   11e28:	mov	r0, r6
   11e2c:	bl	114f0 <dcgettext@plt>
   11e30:	ldr	r1, [r7]
   11e34:	bl	11430 <fputs_unlocked@plt>
   11e38:	mov	r2, #5
   11e3c:	movw	r1, #44184	; 0xac98
   11e40:	movt	r1, #1
   11e44:	mov	r0, r6
   11e48:	bl	114f0 <dcgettext@plt>
   11e4c:	ldr	r1, [r7]
   11e50:	bl	11430 <fputs_unlocked@plt>
   11e54:	mov	r2, #5
   11e58:	movw	r1, #44260	; 0xace4
   11e5c:	movt	r1, #1
   11e60:	mov	r0, r6
   11e64:	bl	114f0 <dcgettext@plt>
   11e68:	ldr	r1, [r7]
   11e6c:	bl	11430 <fputs_unlocked@plt>
   11e70:	mov	r2, #5
   11e74:	movw	r1, #44468	; 0xadb4
   11e78:	movt	r1, #1
   11e7c:	mov	r0, r6
   11e80:	bl	114f0 <dcgettext@plt>
   11e84:	ldr	r1, [r7]
   11e88:	bl	11430 <fputs_unlocked@plt>
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #44516	; 0xade4
   11e94:	movt	r1, #1
   11e98:	mov	r0, r6
   11e9c:	bl	114f0 <dcgettext@plt>
   11ea0:	ldr	r1, [r7]
   11ea4:	bl	11430 <fputs_unlocked@plt>
   11ea8:	movw	lr, #43840	; 0xab40
   11eac:	movt	lr, #1
   11eb0:	ldr	ip, [lr]
   11eb4:	ldr	r4, [lr, #4]
   11eb8:	ldrd	r8, [lr, #8]
   11ebc:	subs	r1, ip, #0
   11ec0:	str	ip, [sp]
   11ec4:	ldrd	r2, [lr, #16]
   11ec8:	str	r4, [sp, #4]
   11ecc:	ldrd	r4, [lr, #24]
   11ed0:	strd	r8, [sp, #8]
   11ed4:	ldrd	r8, [lr, #32]
   11ed8:	strd	r2, [sp, #16]
   11edc:	ldrd	r2, [lr, #40]	; 0x28
   11ee0:	strd	r4, [sp, #24]
   11ee4:	ldrd	r4, [lr, #48]	; 0x30
   11ee8:	strd	r8, [sp, #32]
   11eec:	strd	r2, [sp, #40]	; 0x28
   11ef0:	strd	r4, [sp, #48]	; 0x30
   11ef4:	movwne	r5, #43976	; 0xabc8
   11ef8:	mov	r4, sp
   11efc:	movtne	r5, #1
   11f00:	bne	11ff8 <__assert_fail@plt+0x7cc>
   11f04:	ldr	r4, [r4, #4]
   11f08:	movw	r1, #44572	; 0xae1c
   11f0c:	movt	r1, #1
   11f10:	mov	r2, #5
   11f14:	cmp	r4, #0
   11f18:	beq	1200c <__assert_fail@plt+0x7e0>
   11f1c:	mov	r0, #0
   11f20:	bl	114f0 <dcgettext@plt>
   11f24:	mov	r1, r0
   11f28:	movw	r3, #44596	; 0xae34
   11f2c:	movt	r3, #1
   11f30:	movw	r2, #44636	; 0xae5c
   11f34:	movt	r2, #1
   11f38:	mov	r0, #1
   11f3c:	bl	116b8 <__printf_chk@plt>
   11f40:	mov	r1, #0
   11f44:	mov	r0, #5
   11f48:	bl	11700 <setlocale@plt>
   11f4c:	cmp	r0, #0
   11f50:	movweq	r5, #43976	; 0xabc8
   11f54:	movteq	r5, #1
   11f58:	beq	11f7c <__assert_fail@plt+0x750>
   11f5c:	movw	r1, #44652	; 0xae6c
   11f60:	movt	r1, #1
   11f64:	mov	r2, #3
   11f68:	movw	r5, #43976	; 0xabc8
   11f6c:	movt	r5, #1
   11f70:	bl	117cc <strncmp@plt>
   11f74:	cmp	r0, #0
   11f78:	bne	120c4 <__assert_fail@plt+0x898>
   11f7c:	mov	r2, #5
   11f80:	movw	r1, #44728	; 0xaeb8
   11f84:	movt	r1, #1
   11f88:	mov	r0, #0
   11f8c:	bl	114f0 <dcgettext@plt>
   11f90:	mov	r1, r0
   11f94:	movw	r3, #43976	; 0xabc8
   11f98:	movt	r3, #1
   11f9c:	movw	r2, #44596	; 0xae34
   11fa0:	movt	r2, #1
   11fa4:	mov	r0, #1
   11fa8:	bl	116b8 <__printf_chk@plt>
   11fac:	mov	r2, #5
   11fb0:	movw	r1, #44756	; 0xaed4
   11fb4:	movt	r1, #1
   11fb8:	mov	r0, #0
   11fbc:	bl	114f0 <dcgettext@plt>
   11fc0:	movw	r2, #45148	; 0xb05c
   11fc4:	movt	r2, #1
   11fc8:	cmp	r4, r5
   11fcc:	movw	r3, #45460	; 0xb194
   11fd0:	movt	r3, #1
   11fd4:	mov	r1, r0
   11fd8:	moveq	r3, r2
   11fdc:	mov	r2, r4
   11fe0:	mov	r0, #1
   11fe4:	bl	116b8 <__printf_chk@plt>
   11fe8:	b	11dc8 <__assert_fail@plt+0x59c>
   11fec:	ldr	r1, [r4, #8]!
   11ff0:	cmp	r1, #0
   11ff4:	beq	11f04 <__assert_fail@plt+0x6d8>
   11ff8:	mov	r0, r5
   11ffc:	bl	11454 <strcmp@plt>
   12000:	cmp	r0, #0
   12004:	bne	11fec <__assert_fail@plt+0x7c0>
   12008:	b	11f04 <__assert_fail@plt+0x6d8>
   1200c:	mov	r0, r4
   12010:	bl	114f0 <dcgettext@plt>
   12014:	mov	r1, r0
   12018:	movw	r3, #44596	; 0xae34
   1201c:	movt	r3, #1
   12020:	movw	r2, #44636	; 0xae5c
   12024:	movt	r2, #1
   12028:	mov	r0, #1
   1202c:	bl	116b8 <__printf_chk@plt>
   12030:	mov	r1, r4
   12034:	mov	r0, #5
   12038:	bl	11700 <setlocale@plt>
   1203c:	cmp	r0, #0
   12040:	beq	1205c <__assert_fail@plt+0x830>
   12044:	movw	r1, #44652	; 0xae6c
   12048:	movt	r1, #1
   1204c:	mov	r2, #3
   12050:	bl	117cc <strncmp@plt>
   12054:	cmp	r0, #0
   12058:	bne	120b8 <__assert_fail@plt+0x88c>
   1205c:	mov	r2, #5
   12060:	movw	r1, #44728	; 0xaeb8
   12064:	movt	r1, #1
   12068:	mov	r0, #0
   1206c:	bl	114f0 <dcgettext@plt>
   12070:	mov	r1, r0
   12074:	movw	r3, #43976	; 0xabc8
   12078:	movt	r3, #1
   1207c:	movw	r2, #44596	; 0xae34
   12080:	movt	r2, #1
   12084:	mov	r0, #1
   12088:	bl	116b8 <__printf_chk@plt>
   1208c:	movw	r1, #44756	; 0xaed4
   12090:	movt	r1, #1
   12094:	mov	r2, #5
   12098:	mov	r0, #0
   1209c:	bl	114f0 <dcgettext@plt>
   120a0:	movw	r4, #43976	; 0xabc8
   120a4:	movt	r4, #1
   120a8:	movw	r3, #45148	; 0xb05c
   120ac:	movt	r3, #1
   120b0:	mov	r1, r0
   120b4:	b	11fdc <__assert_fail@plt+0x7b0>
   120b8:	movw	r5, #43976	; 0xabc8
   120bc:	movt	r5, #1
   120c0:	mov	r4, r5
   120c4:	mov	r2, #5
   120c8:	movw	r1, #44656	; 0xae70
   120cc:	movt	r1, #1
   120d0:	mov	r0, #0
   120d4:	bl	114f0 <dcgettext@plt>
   120d8:	ldr	r1, [r7]
   120dc:	bl	11430 <fputs_unlocked@plt>
   120e0:	b	11f7c <__assert_fail@plt+0x750>
   120e4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   120e8:	mov	r4, #0
   120ec:	strd	r6, [sp, #8]
   120f0:	mov	r6, r1
   120f4:	strd	r8, [sp, #16]
   120f8:	subs	r9, r0, #0
   120fc:	str	lr, [sp, #24]
   12100:	sub	sp, sp, #116	; 0x74
   12104:	str	r4, [sp]
   12108:	str	r4, [sp, #4]
   1210c:	beq	12234 <__assert_fail@plt+0xa08>
   12110:	mov	r1, #32768	; 0x8000
   12114:	mov	r0, r6
   12118:	bl	115bc <open64@plt>
   1211c:	mov	r5, r0
   12120:	bl	11688 <__errno_location@plt>
   12124:	cmn	r5, #1
   12128:	mov	r7, r0
   1212c:	beq	121dc <__assert_fail@plt+0x9b0>
   12130:	add	r2, sp, #8
   12134:	mov	r1, r5
   12138:	mov	r0, #3
   1213c:	bl	11550 <__fxstat64@plt>
   12140:	cmp	r0, #0
   12144:	blt	12300 <__assert_fail@plt+0xad4>
   12148:	mov	r0, r9
   1214c:	mov	r2, r6
   12150:	ldr	r3, [sp, #24]
   12154:	mov	r1, sp
   12158:	bl	11418 <selabel_lookup@plt>
   1215c:	cmp	r0, #0
   12160:	blt	122d4 <__assert_fail@plt+0xaa8>
   12164:	ldr	r0, [sp]
   12168:	bl	114cc <context_new@plt>
   1216c:	subs	r9, r0, #0
   12170:	beq	12344 <__assert_fail@plt+0xb18>
   12174:	cmn	r5, #1
   12178:	add	r1, sp, #4
   1217c:	beq	122a8 <__assert_fail@plt+0xa7c>
   12180:	mov	r0, r5
   12184:	bl	19420 <lchmod@@Base+0x2cc4>
   12188:	cmp	r0, #0
   1218c:	blt	12310 <__assert_fail@plt+0xae4>
   12190:	ldr	r0, [sp, #4]
   12194:	bl	114cc <context_new@plt>
   12198:	subs	r4, r0, #0
   1219c:	beq	12314 <__assert_fail@plt+0xae8>
   121a0:	mov	r0, r9
   121a4:	bl	11460 <context_type_get@plt>
   121a8:	subs	r1, r0, #0
   121ac:	beq	121c0 <__assert_fail@plt+0x994>
   121b0:	mov	r0, r4
   121b4:	bl	114fc <context_type_set@plt>
   121b8:	cmp	r0, #0
   121bc:	beq	1231c <__assert_fail@plt+0xaf0>
   121c0:	ldr	r8, [r7]
   121c4:	cmn	r5, #1
   121c8:	beq	12208 <__assert_fail@plt+0x9dc>
   121cc:	mvn	r6, #0
   121d0:	mov	r0, r5
   121d4:	bl	117e4 <close@plt>
   121d8:	b	1220c <__assert_fail@plt+0x9e0>
   121dc:	ldr	r8, [r0]
   121e0:	cmp	r8, #40	; 0x28
   121e4:	bne	122a0 <__assert_fail@plt+0xa74>
   121e8:	add	r2, sp, #8
   121ec:	mov	r1, r6
   121f0:	mov	r0, #3
   121f4:	bl	117f0 <__lxstat64@plt>
   121f8:	cmp	r0, #0
   121fc:	bge	12148 <__assert_fail@plt+0x91c>
   12200:	ldr	r8, [r7]
   12204:	mov	r9, r4
   12208:	mov	r6, r5
   1220c:	mov	r0, r9
   12210:	bl	11604 <context_free@plt>
   12214:	mov	r0, r4
   12218:	bl	11604 <context_free@plt>
   1221c:	ldr	r0, [sp]
   12220:	bl	11778 <freecon@plt>
   12224:	ldr	r0, [sp, #4]
   12228:	bl	11778 <freecon@plt>
   1222c:	str	r8, [r7]
   12230:	b	12284 <__assert_fail@plt+0xa58>
   12234:	add	r0, sp, #4
   12238:	bl	11790 <getfscreatecon@plt>
   1223c:	cmp	r0, r4
   12240:	blt	12370 <__assert_fail@plt+0xb44>
   12244:	bl	11688 <__errno_location@plt>
   12248:	ldr	r5, [sp, #4]
   1224c:	mov	r4, r0
   12250:	cmp	r5, #0
   12254:	moveq	r3, #61	; 0x3d
   12258:	mvneq	r6, #0
   1225c:	streq	r3, [r0]
   12260:	beq	12284 <__assert_fail@plt+0xa58>
   12264:	mov	r1, r5
   12268:	mov	r0, r6
   1226c:	bl	11478 <lsetfilecon@plt>
   12270:	ldr	r5, [r4]
   12274:	mov	r6, r0
   12278:	ldr	r0, [sp, #4]
   1227c:	bl	11778 <freecon@plt>
   12280:	str	r5, [r4]
   12284:	mov	r0, r6
   12288:	add	sp, sp, #116	; 0x74
   1228c:	ldrd	r4, [sp]
   12290:	ldrd	r6, [sp, #8]
   12294:	ldrd	r8, [sp, #16]
   12298:	add	sp, sp, #24
   1229c:	pop	{pc}		; (ldr pc, [sp], #4)
   122a0:	mov	r9, r4
   122a4:	b	12208 <__assert_fail@plt+0x9dc>
   122a8:	mov	r0, r6
   122ac:	bl	193fc <lchmod@@Base+0x2ca0>
   122b0:	cmp	r0, #0
   122b4:	blt	12350 <__assert_fail@plt+0xb24>
   122b8:	ldr	r0, [sp, #4]
   122bc:	bl	114cc <context_new@plt>
   122c0:	subs	r4, r0, #0
   122c4:	bne	121a0 <__assert_fail@plt+0x974>
   122c8:	mov	r6, r5
   122cc:	ldr	r8, [r7]
   122d0:	b	1220c <__assert_fail@plt+0x9e0>
   122d4:	ldr	r8, [r7]
   122d8:	cmp	r8, #2
   122dc:	movne	r4, #0
   122e0:	movne	r9, r4
   122e4:	bne	121c4 <__assert_fail@plt+0x998>
   122e8:	mov	r3, #61	; 0x3d
   122ec:	mov	r4, #0
   122f0:	mov	r8, r3
   122f4:	mov	r9, r4
   122f8:	str	r3, [r7]
   122fc:	b	121c4 <__assert_fail@plt+0x998>
   12300:	mvn	r6, #0
   12304:	mov	r9, r4
   12308:	ldr	r8, [r7]
   1230c:	b	121d0 <__assert_fail@plt+0x9a4>
   12310:	mov	r4, #0
   12314:	mvn	r6, #0
   12318:	b	12308 <__assert_fail@plt+0xadc>
   1231c:	mov	r0, r4
   12320:	bl	117a8 <context_str@plt>
   12324:	subs	r1, r0, #0
   12328:	beq	121c0 <__assert_fail@plt+0x994>
   1232c:	cmn	r5, #1
   12330:	beq	1235c <__assert_fail@plt+0xb30>
   12334:	mov	r0, r5
   12338:	bl	1170c <fsetfilecon@plt>
   1233c:	mov	r6, r0
   12340:	b	12308 <__assert_fail@plt+0xadc>
   12344:	mov	r4, r9
   12348:	ldr	r8, [r7]
   1234c:	b	121c4 <__assert_fail@plt+0x998>
   12350:	mov	r4, #0
   12354:	ldr	r8, [r7]
   12358:	b	12208 <__assert_fail@plt+0x9dc>
   1235c:	mov	r0, r6
   12360:	bl	11478 <lsetfilecon@plt>
   12364:	mov	r5, r0
   12368:	ldr	r8, [r7]
   1236c:	b	12208 <__assert_fail@plt+0x9dc>
   12370:	mvn	r6, #0
   12374:	b	12284 <__assert_fail@plt+0xa58>
   12378:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1237c:	mov	r4, r1
   12380:	strd	r6, [sp, #8]
   12384:	mov	r7, #0
   12388:	mov	r6, r2
   1238c:	strd	r8, [sp, #16]
   12390:	mov	r9, r0
   12394:	str	lr, [sp, #24]
   12398:	sub	sp, sp, #20
   1239c:	str	r7, [sp]
   123a0:	str	r7, [sp, #4]
   123a4:	bl	11688 <__errno_location@plt>
   123a8:	ldrb	r3, [r4]
   123ac:	mov	r8, r0
   123b0:	cmp	r3, #47	; 0x2f
   123b4:	beq	123d0 <__assert_fail@plt+0xba4>
   123b8:	mov	r0, r4
   123bc:	mov	r1, #2
   123c0:	bl	126c8 <__assert_fail@plt+0xe9c>
   123c4:	subs	r4, r0, #0
   123c8:	mov	r7, r4
   123cc:	beq	12598 <__assert_fail@plt+0xd6c>
   123d0:	mov	r0, r9
   123d4:	mov	r3, r6
   123d8:	mov	r2, r4
   123dc:	mov	r1, sp
   123e0:	bl	11418 <selabel_lookup@plt>
   123e4:	cmp	r0, #0
   123e8:	blt	12550 <__assert_fail@plt+0xd24>
   123ec:	mov	r9, #0
   123f0:	mov	r0, r4
   123f4:	str	r9, [sp, #8]
   123f8:	str	r9, [sp, #12]
   123fc:	bl	12ee4 <__assert_fail@plt+0x16b8>
   12400:	mov	r4, r0
   12404:	add	r0, sp, #8
   12408:	bl	1158c <getcon@plt>
   1240c:	cmp	r0, r9
   12410:	blt	12514 <__assert_fail@plt+0xce8>
   12414:	add	r1, sp, #12
   12418:	mov	r0, r4
   1241c:	bl	193d8 <lchmod@@Base+0x2c7c>
   12420:	cmp	r0, r9
   12424:	blt	12514 <__assert_fail@plt+0xce8>
   12428:	mov	r0, r6
   1242c:	bl	11808 <mode_to_security_class@plt>
   12430:	subs	r2, r0, #0
   12434:	beq	12514 <__assert_fail@plt+0xce8>
   12438:	add	r3, sp, #4
   1243c:	ldrd	r0, [sp, #8]
   12440:	bl	11748 <security_compute_create@plt>
   12444:	ldr	r5, [r8]
   12448:	mov	r6, r0
   1244c:	mov	r0, r4
   12450:	bl	130e8 <__assert_fail@plt+0x18bc>
   12454:	ldr	r0, [sp, #8]
   12458:	bl	11778 <freecon@plt>
   1245c:	ldr	r0, [sp, #12]
   12460:	bl	11778 <freecon@plt>
   12464:	cmp	r6, r9
   12468:	str	r5, [r8]
   1246c:	blt	1255c <__assert_fail@plt+0xd30>
   12470:	ldr	r0, [sp]
   12474:	bl	114cc <context_new@plt>
   12478:	subs	r4, r0, #0
   1247c:	beq	1256c <__assert_fail@plt+0xd40>
   12480:	ldr	r0, [sp, #4]
   12484:	bl	114cc <context_new@plt>
   12488:	subs	r6, r0, #0
   1248c:	beq	12544 <__assert_fail@plt+0xd18>
   12490:	mov	r0, r4
   12494:	bl	11460 <context_type_get@plt>
   12498:	subs	r1, r0, #0
   1249c:	beq	12544 <__assert_fail@plt+0xd18>
   124a0:	mov	r0, r6
   124a4:	bl	114fc <context_type_set@plt>
   124a8:	cmp	r0, #0
   124ac:	bne	12544 <__assert_fail@plt+0xd18>
   124b0:	mov	r0, r6
   124b4:	bl	117a8 <context_str@plt>
   124b8:	cmp	r0, #0
   124bc:	beq	12544 <__assert_fail@plt+0xd18>
   124c0:	bl	1167c <setfscreatecon@plt>
   124c4:	ldr	r5, [r8]
   124c8:	mov	r9, r0
   124cc:	mov	r0, r4
   124d0:	bl	11604 <context_free@plt>
   124d4:	mov	r0, r6
   124d8:	bl	11604 <context_free@plt>
   124dc:	ldr	r0, [sp]
   124e0:	bl	11778 <freecon@plt>
   124e4:	ldr	r0, [sp, #4]
   124e8:	bl	11778 <freecon@plt>
   124ec:	mov	r0, r7
   124f0:	bl	130e8 <__assert_fail@plt+0x18bc>
   124f4:	mov	r0, r9
   124f8:	str	r5, [r8]
   124fc:	add	sp, sp, #20
   12500:	ldrd	r4, [sp]
   12504:	ldrd	r6, [sp, #8]
   12508:	ldrd	r8, [sp, #16]
   1250c:	add	sp, sp, #24
   12510:	pop	{pc}		; (ldr pc, [sp], #4)
   12514:	ldr	r5, [r8]
   12518:	mov	r0, r4
   1251c:	mov	r6, #0
   12520:	bl	130e8 <__assert_fail@plt+0x18bc>
   12524:	ldr	r0, [sp, #8]
   12528:	mov	r4, r6
   1252c:	mvn	r9, #0
   12530:	bl	11778 <freecon@plt>
   12534:	ldr	r0, [sp, #12]
   12538:	bl	11778 <freecon@plt>
   1253c:	str	r5, [r8]
   12540:	b	124cc <__assert_fail@plt+0xca0>
   12544:	mvn	r9, #0
   12548:	ldr	r5, [r8]
   1254c:	b	124cc <__assert_fail@plt+0xca0>
   12550:	ldr	r5, [r8]
   12554:	cmp	r5, #2
   12558:	beq	1257c <__assert_fail@plt+0xd50>
   1255c:	mov	r4, #0
   12560:	mvn	r9, #0
   12564:	mov	r6, r4
   12568:	b	124cc <__assert_fail@plt+0xca0>
   1256c:	mov	r6, r4
   12570:	mvn	r9, #0
   12574:	ldr	r5, [r8]
   12578:	b	124cc <__assert_fail@plt+0xca0>
   1257c:	mov	r3, #61	; 0x3d
   12580:	mov	r4, #0
   12584:	mov	r5, r3
   12588:	mov	r6, r4
   1258c:	mvn	r9, #0
   12590:	str	r3, [r8]
   12594:	b	124cc <__assert_fail@plt+0xca0>
   12598:	mov	r6, r4
   1259c:	mvn	r9, #0
   125a0:	ldr	r5, [r8]
   125a4:	b	124cc <__assert_fail@plt+0xca0>
   125a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   125ac:	mov	r4, r1
   125b0:	mov	r5, r2
   125b4:	strd	r6, [sp, #8]
   125b8:	mov	r6, r0
   125bc:	str	r8, [sp, #16]
   125c0:	str	lr, [sp, #20]
   125c4:	sub	sp, sp, #8
   125c8:	ldrb	r3, [r1]
   125cc:	cmp	r3, #47	; 0x2f
   125d0:	moveq	r8, #0
   125d4:	bne	12678 <__assert_fail@plt+0xe4c>
   125d8:	bl	11688 <__errno_location@plt>
   125dc:	cmp	r5, #0
   125e0:	mov	r7, r0
   125e4:	beq	126a0 <__assert_fail@plt+0xe74>
   125e8:	mov	r2, #0
   125ec:	mov	r1, #16
   125f0:	str	r4, [sp]
   125f4:	mov	r0, sp
   125f8:	mov	r4, r2
   125fc:	str	r2, [sp, #4]
   12600:	bl	19ef0 <lchmod@@Base+0x3794>
   12604:	mov	r5, r0
   12608:	b	1261c <__assert_fail@plt+0xdf0>
   1260c:	ldr	r1, [r5, #24]
   12610:	bl	120e4 <__assert_fail@plt+0x8b8>
   12614:	cmp	r0, #0
   12618:	ldrlt	r4, [r7]
   1261c:	mov	r0, r5
   12620:	bl	14bb0 <__assert_fail@plt+0x3384>
   12624:	cmp	r0, #0
   12628:	mov	r0, r6
   1262c:	bne	1260c <__assert_fail@plt+0xde0>
   12630:	ldr	r3, [r7]
   12634:	mov	r0, r5
   12638:	cmp	r3, #0
   1263c:	movne	r4, r3
   12640:	bl	14a24 <__assert_fail@plt+0x31f8>
   12644:	cmp	r0, #0
   12648:	mov	r0, r8
   1264c:	ldrne	r4, [r7]
   12650:	bl	130e8 <__assert_fail@plt+0x18bc>
   12654:	clz	r4, r4
   12658:	lsr	r4, r4, #5
   1265c:	mov	r0, r4
   12660:	add	sp, sp, #8
   12664:	ldrd	r4, [sp]
   12668:	ldrd	r6, [sp, #8]
   1266c:	ldr	r8, [sp, #16]
   12670:	add	sp, sp, #20
   12674:	pop	{pc}		; (ldr pc, [sp], #4)
   12678:	mov	r0, r1
   1267c:	mov	r1, #2
   12680:	bl	126c8 <__assert_fail@plt+0xe9c>
   12684:	subs	r4, r0, #0
   12688:	movne	r8, r4
   1268c:	beq	1265c <__assert_fail@plt+0xe30>
   12690:	bl	11688 <__errno_location@plt>
   12694:	cmp	r5, #0
   12698:	mov	r7, r0
   1269c:	bne	125e8 <__assert_fail@plt+0xdbc>
   126a0:	mov	r1, r4
   126a4:	mov	r0, r6
   126a8:	bl	120e4 <__assert_fail@plt+0x8b8>
   126ac:	ldr	r5, [r7]
   126b0:	adds	r4, r0, #1
   126b4:	mov	r0, r8
   126b8:	movne	r4, #1
   126bc:	bl	130e8 <__assert_fail@plt+0x18bc>
   126c0:	str	r5, [r7]
   126c4:	b	1265c <__assert_fail@plt+0xe30>
   126c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126cc:	strd	r6, [sp, #8]
   126d0:	strd	sl, [sp, #24]
   126d4:	and	fp, r1, #3
   126d8:	sub	r3, fp, #1
   126dc:	strd	r8, [sp, #16]
   126e0:	tst	r3, fp
   126e4:	str	lr, [sp, #32]
   126e8:	sub	sp, sp, #3248	; 0xcb0
   126ec:	sub	sp, sp, #4
   126f0:	bne	1280c <__assert_fail@plt+0xfe0>
   126f4:	cmp	r0, #0
   126f8:	mov	r5, r0
   126fc:	beq	1280c <__assert_fail@plt+0xfe0>
   12700:	ldrb	r9, [r0]
   12704:	cmp	r9, #0
   12708:	beq	12bdc <__assert_fail@plt+0x13b0>
   1270c:	add	r3, sp, #1184	; 0x4a0
   12710:	cmp	r9, #47	; 0x2f
   12714:	add	r3, r3, #8
   12718:	mov	r7, r1
   1271c:	addne	r4, sp, #160	; 0xa0
   12720:	mov	r1, #1024	; 0x400
   12724:	str	r3, [sp, #1184]	; 0x4a0
   12728:	add	r3, sp, #160	; 0xa0
   1272c:	str	r3, [sp, #152]	; 0x98
   12730:	add	r3, sp, #2224	; 0x8b0
   12734:	str	r1, [sp, #156]	; 0x9c
   12738:	str	r1, [sp, #1188]	; 0x4a4
   1273c:	str	r3, [sp, #2216]	; 0x8a8
   12740:	movne	r3, r4
   12744:	subne	r6, r3, #8
   12748:	str	r1, [sp, #2220]	; 0x8ac
   1274c:	beq	12820 <__assert_fail@plt+0xff4>
   12750:	mov	r0, r4
   12754:	bl	11634 <getcwd@plt>
   12758:	cmp	r0, #0
   1275c:	bne	12d58 <__assert_fail@plt+0x152c>
   12760:	bl	11688 <__errno_location@plt>
   12764:	ldr	r3, [r0]
   12768:	cmp	r3, #12
   1276c:	beq	12d34 <__assert_fail@plt+0x1508>
   12770:	cmp	r3, #34	; 0x22
   12774:	beq	127f0 <__assert_fail@plt+0xfc4>
   12778:	mov	r6, r4
   1277c:	mov	r5, #1
   12780:	ldr	r0, [sp, #1184]	; 0x4a0
   12784:	add	r3, sp, #1184	; 0x4a0
   12788:	add	r3, r3, #8
   1278c:	cmp	r0, r3
   12790:	beq	12798 <__assert_fail@plt+0xf6c>
   12794:	bl	130e8 <__assert_fail@plt+0x18bc>
   12798:	ldr	r0, [sp, #2216]	; 0x8a8
   1279c:	add	r3, sp, #2224	; 0x8b0
   127a0:	cmp	r0, r3
   127a4:	beq	127ac <__assert_fail@plt+0xf80>
   127a8:	bl	130e8 <__assert_fail@plt+0x18bc>
   127ac:	cmp	r5, #0
   127b0:	bne	12bbc <__assert_fail@plt+0x1390>
   127b4:	add	r0, sp, #152	; 0x98
   127b8:	strb	r5, [r4], #1
   127bc:	sub	r1, r4, r6
   127c0:	bl	191a4 <lchmod@@Base+0x2a48>
   127c4:	subs	r9, r0, #0
   127c8:	beq	12d34 <__assert_fail@plt+0x1508>
   127cc:	mov	r0, r9
   127d0:	add	sp, sp, #3248	; 0xcb0
   127d4:	add	sp, sp, #4
   127d8:	ldrd	r4, [sp]
   127dc:	ldrd	r6, [sp, #8]
   127e0:	ldrd	r8, [sp, #16]
   127e4:	ldrd	sl, [sp, #24]
   127e8:	add	sp, sp, #32
   127ec:	pop	{pc}		; (ldr pc, [sp], #4)
   127f0:	mov	r0, r6
   127f4:	bl	19214 <lchmod@@Base+0x2ab8>
   127f8:	cmp	r0, #0
   127fc:	beq	12d34 <__assert_fail@plt+0x1508>
   12800:	ldr	r4, [sp, #152]	; 0x98
   12804:	ldr	r1, [sp, #156]	; 0x9c
   12808:	b	12750 <__assert_fail@plt+0xf24>
   1280c:	bl	11688 <__errno_location@plt>
   12810:	mov	r3, #22
   12814:	mov	r9, #0
   12818:	str	r3, [r0]
   1281c:	b	127cc <__assert_fail@plt+0xfa0>
   12820:	add	r6, sp, #160	; 0xa0
   12824:	strb	r9, [sp, #160]	; 0xa0
   12828:	add	r4, r6, #1
   1282c:	mov	r3, #0
   12830:	and	r2, r7, #4
   12834:	str	r2, [sp, #12]
   12838:	str	r3, [sp, #20]
   1283c:	str	r3, [sp, #28]
   12840:	str	r3, [sp, #32]
   12844:	movw	r3, #45284	; 0xb0e4
   12848:	movt	r3, #1
   1284c:	str	fp, [sp, #16]
   12850:	str	r3, [sp, #24]
   12854:	movw	r3, #45280	; 0xb0e0
   12858:	movt	r3, #1
   1285c:	str	r3, [sp, #36]	; 0x24
   12860:	movw	r3, #26216	; 0x6668
   12864:	movt	r3, #1
   12868:	str	r3, [sp, #40]	; 0x28
   1286c:	cmp	r9, #0
   12870:	beq	12cb8 <__assert_fail@plt+0x148c>
   12874:	cmp	r9, #47	; 0x2f
   12878:	movne	r3, r9
   1287c:	bne	12894 <__assert_fail@plt+0x1068>
   12880:	ldrb	r3, [r5, #1]!
   12884:	cmp	r3, #47	; 0x2f
   12888:	beq	12880 <__assert_fail@plt+0x1054>
   1288c:	cmp	r3, #0
   12890:	beq	12cb8 <__assert_fail@plt+0x148c>
   12894:	mov	r8, r5
   12898:	b	128a0 <__assert_fail@plt+0x1074>
   1289c:	mov	r8, r7
   128a0:	ldrb	r9, [r8, #1]
   128a4:	add	r7, r8, #1
   128a8:	cmp	r9, #0
   128ac:	cmpne	r9, #47	; 0x2f
   128b0:	bne	1289c <__assert_fail@plt+0x1070>
   128b4:	subs	sl, r7, r5
   128b8:	beq	12cb8 <__assert_fail@plt+0x148c>
   128bc:	cmp	sl, #1
   128c0:	beq	12b24 <__assert_fail@plt+0x12f8>
   128c4:	cmp	r3, #46	; 0x2e
   128c8:	cmpeq	sl, #2
   128cc:	beq	12b30 <__assert_fail@plt+0x1304>
   128d0:	ldrb	r3, [r4, #-1]
   128d4:	cmp	r3, #47	; 0x2f
   128d8:	beq	128e4 <__assert_fail@plt+0x10b8>
   128dc:	mov	r3, #47	; 0x2f
   128e0:	strb	r3, [r4], #1
   128e4:	ldr	r3, [sp, #156]	; 0x9c
   128e8:	add	r9, sl, #2
   128ec:	add	r3, r6, r3
   128f0:	sub	r3, r3, r4
   128f4:	cmp	r3, r9
   128f8:	bcs	12928 <__assert_fail@plt+0x10fc>
   128fc:	add	r0, sp, #152	; 0x98
   12900:	sub	r4, r4, r6
   12904:	bl	19294 <lchmod@@Base+0x2b38>
   12908:	cmp	r0, #0
   1290c:	beq	12d34 <__assert_fail@plt+0x1508>
   12910:	ldr	r6, [sp, #152]	; 0x98
   12914:	ldr	r3, [sp, #156]	; 0x9c
   12918:	sub	r3, r3, r4
   1291c:	add	r4, r6, r4
   12920:	cmp	r3, r9
   12924:	bcc	128fc <__assert_fail@plt+0x10d0>
   12928:	mov	r2, sl
   1292c:	mov	r0, r4
   12930:	mov	r1, r5
   12934:	bl	11610 <mempcpy@plt>
   12938:	ldr	r2, [sp, #12]
   1293c:	mov	r3, #0
   12940:	mov	r4, r0
   12944:	strb	r3, [r0]
   12948:	cmp	r2, r3
   1294c:	beq	12a24 <__assert_fail@plt+0x11f8>
   12950:	ldr	r3, [sp, #16]
   12954:	ldrb	r9, [r8, #1]
   12958:	cmp	r3, #2
   1295c:	movne	r3, r7
   12960:	movne	r1, r9
   12964:	beq	12a1c <__assert_fail@plt+0x11f0>
   12968:	cmp	r1, #47	; 0x2f
   1296c:	beq	12978 <__assert_fail@plt+0x114c>
   12970:	b	129c0 <__assert_fail@plt+0x1194>
   12974:	mov	r3, r0
   12978:	ldrb	r2, [r3, #1]
   1297c:	add	r0, r3, #1
   12980:	cmp	r2, #47	; 0x2f
   12984:	beq	12974 <__assert_fail@plt+0x1148>
   12988:	cmp	r2, #0
   1298c:	add	r3, r3, #2
   12990:	beq	12b90 <__assert_fail@plt+0x1364>
   12994:	cmp	r2, #46	; 0x2e
   12998:	bne	129c0 <__assert_fail@plt+0x1194>
   1299c:	ldrb	r1, [r0, #1]
   129a0:	cmp	r1, #0
   129a4:	beq	12b90 <__assert_fail@plt+0x1364>
   129a8:	cmp	r1, #46	; 0x2e
   129ac:	bne	12968 <__assert_fail@plt+0x113c>
   129b0:	ldrb	r3, [r0, #2]
   129b4:	cmp	r3, #47	; 0x2f
   129b8:	cmpne	r3, #0
   129bc:	beq	12b90 <__assert_fail@plt+0x1364>
   129c0:	ldr	r3, [sp, #12]
   129c4:	cmp	r3, #0
   129c8:	bne	12b68 <__assert_fail@plt+0x133c>
   129cc:	bl	11688 <__errno_location@plt>
   129d0:	ldr	r5, [r0]
   129d4:	subs	r5, r5, #22
   129d8:	movne	r5, #1
   129dc:	cmp	r5, #0
   129e0:	beq	12a18 <__assert_fail@plt+0x11ec>
   129e4:	ldr	r3, [sp, #16]
   129e8:	cmp	r3, #1
   129ec:	bne	12b0c <__assert_fail@plt+0x12e0>
   129f0:	bl	11688 <__errno_location@plt>
   129f4:	ldr	r3, [r0]
   129f8:	cmp	r3, #2
   129fc:	bne	12b0c <__assert_fail@plt+0x12e0>
   12a00:	mov	r0, r7
   12a04:	ldr	r1, [sp, #24]
   12a08:	bl	11820 <strspn@plt>
   12a0c:	ldrb	r3, [r7, r0]
   12a10:	cmp	r3, #0
   12a14:	bne	12b0c <__assert_fail@plt+0x12e0>
   12a18:	ldrb	r9, [r8, #1]
   12a1c:	mov	r5, r7
   12a20:	b	1286c <__assert_fail@plt+0x1040>
   12a24:	add	r3, sp, #2224	; 0x8b0
   12a28:	sub	r9, r3, #8
   12a2c:	b	12a40 <__assert_fail@plt+0x1214>
   12a30:	mov	r0, r9
   12a34:	bl	19214 <lchmod@@Base+0x2ab8>
   12a38:	cmp	r0, #0
   12a3c:	beq	12d34 <__assert_fail@plt+0x1508>
   12a40:	ldr	sl, [sp, #2216]	; 0x8a8
   12a44:	mov	r0, r6
   12a48:	ldr	fp, [sp, #2220]	; 0x8ac
   12a4c:	mov	r1, sl
   12a50:	sub	fp, fp, #1
   12a54:	mov	r2, fp
   12a58:	bl	1155c <readlink@plt>
   12a5c:	cmp	fp, r0
   12a60:	ble	12a30 <__assert_fail@plt+0x1204>
   12a64:	cmp	r0, #0
   12a68:	mov	r9, r0
   12a6c:	blt	12950 <__assert_fail@plt+0x1124>
   12a70:	ldr	r3, [sp, #32]
   12a74:	cmp	r3, #19
   12a78:	addle	r3, r3, #1
   12a7c:	strle	r3, [sp, #32]
   12a80:	ble	12bfc <__assert_fail@plt+0x13d0>
   12a84:	ldrb	r3, [r5]
   12a88:	cmp	r3, #0
   12a8c:	beq	12bfc <__assert_fail@plt+0x13d0>
   12a90:	mov	r3, #0
   12a94:	sub	fp, r5, r7
   12a98:	mov	r0, #3
   12a9c:	add	r2, sp, #48	; 0x30
   12aa0:	strb	r3, [r4, fp]
   12aa4:	ldrb	r1, [r6]
   12aa8:	ldr	r3, [sp, #36]	; 0x24
   12aac:	cmp	r1, #0
   12ab0:	movne	r3, r6
   12ab4:	mov	r1, r3
   12ab8:	bl	117c0 <__xstat64@plt>
   12abc:	cmp	r0, #0
   12ac0:	bne	12b08 <__assert_fail@plt+0x12dc>
   12ac4:	ldr	r2, [sp, #20]
   12ac8:	ldrb	r3, [r5]
   12acc:	cmp	r2, #0
   12ad0:	strb	r3, [r4, fp]
   12ad4:	beq	12d04 <__assert_fail@plt+0x14d8>
   12ad8:	add	r2, sp, #48	; 0x30
   12adc:	mov	r1, r5
   12ae0:	ldr	r0, [sp, #20]
   12ae4:	bl	13094 <__assert_fail@plt+0x1868>
   12ae8:	cmp	r0, #0
   12aec:	beq	12bec <__assert_fail@plt+0x13c0>
   12af0:	ldr	r3, [sp, #16]
   12af4:	cmp	r3, #2
   12af8:	beq	12a18 <__assert_fail@plt+0x11ec>
   12afc:	bl	11688 <__errno_location@plt>
   12b00:	mov	r3, #40	; 0x28
   12b04:	str	r3, [r0]
   12b08:	mov	r5, #1
   12b0c:	ldr	r3, [sp, #20]
   12b10:	cmp	r3, #0
   12b14:	beq	12780 <__assert_fail@plt+0xf54>
   12b18:	mov	r0, r3
   12b1c:	bl	16034 <__assert_fail@plt+0x4808>
   12b20:	b	12780 <__assert_fail@plt+0xf54>
   12b24:	cmp	r3, #46	; 0x2e
   12b28:	bne	128d0 <__assert_fail@plt+0x10a4>
   12b2c:	b	12a1c <__assert_fail@plt+0x11f0>
   12b30:	ldrb	r3, [r5, #1]
   12b34:	cmp	r3, #46	; 0x2e
   12b38:	bne	128d0 <__assert_fail@plt+0x10a4>
   12b3c:	add	r3, r6, #1
   12b40:	cmp	r4, r3
   12b44:	bls	12a1c <__assert_fail@plt+0x11f0>
   12b48:	sub	r3, r4, #1
   12b4c:	cmp	r6, r3
   12b50:	bcs	12b60 <__assert_fail@plt+0x1334>
   12b54:	ldrb	r2, [r4, #-2]
   12b58:	cmp	r2, #47	; 0x2f
   12b5c:	bne	12d38 <__assert_fail@plt+0x150c>
   12b60:	mov	r4, r3
   12b64:	b	12a1c <__assert_fail@plt+0x11f0>
   12b68:	cmp	r9, #0
   12b6c:	bne	12a1c <__assert_fail@plt+0x11f0>
   12b70:	mov	r2, r9
   12b74:	mov	r3, #512	; 0x200
   12b78:	mov	r1, r6
   12b7c:	mvn	r0, #99	; 0x63
   12b80:	bl	1149c <faccessat@plt>
   12b84:	adds	r5, r0, #0
   12b88:	movne	r5, #1
   12b8c:	b	129dc <__assert_fail@plt+0x11b0>
   12b90:	ldr	r3, [sp, #24]
   12b94:	mov	r2, #0
   12b98:	mov	r1, r6
   12b9c:	mvn	r0, #99	; 0x63
   12ba0:	ldrh	ip, [r3]
   12ba4:	mov	r3, #512	; 0x200
   12ba8:	strh	ip, [r4]
   12bac:	bl	1149c <faccessat@plt>
   12bb0:	adds	r5, r0, #0
   12bb4:	movne	r5, #1
   12bb8:	b	129dc <__assert_fail@plt+0x11b0>
   12bbc:	ldr	r0, [sp, #152]	; 0x98
   12bc0:	add	r3, sp, #160	; 0xa0
   12bc4:	cmp	r0, r3
   12bc8:	moveq	r9, #0
   12bcc:	beq	127cc <__assert_fail@plt+0xfa0>
   12bd0:	bl	130e8 <__assert_fail@plt+0x18bc>
   12bd4:	mov	r9, #0
   12bd8:	b	127cc <__assert_fail@plt+0xfa0>
   12bdc:	bl	11688 <__errno_location@plt>
   12be0:	mov	r3, #2
   12be4:	str	r3, [r0]
   12be8:	b	127cc <__assert_fail@plt+0xfa0>
   12bec:	add	r2, sp, #48	; 0x30
   12bf0:	mov	r1, r5
   12bf4:	ldr	r0, [sp, #20]
   12bf8:	bl	12ffc <__assert_fail@plt+0x17d0>
   12bfc:	ldr	r2, [sp, #28]
   12c00:	mov	r3, #0
   12c04:	mov	r0, r7
   12c08:	strb	r3, [sl, r9]
   12c0c:	ldr	fp, [sp, #1184]	; 0x4a0
   12c10:	cmp	r2, r3
   12c14:	beq	12ce0 <__assert_fail@plt+0x14b4>
   12c18:	sub	r3, r7, fp
   12c1c:	str	r3, [sp, #44]	; 0x2c
   12c20:	bl	11658 <strlen@plt>
   12c24:	ldr	r2, [sp, #1188]	; 0x4a4
   12c28:	add	r5, r0, r9
   12c2c:	mov	r8, r0
   12c30:	cmp	r5, r2
   12c34:	bcc	12c64 <__assert_fail@plt+0x1438>
   12c38:	add	r0, sp, #1184	; 0x4a0
   12c3c:	bl	19294 <lchmod@@Base+0x2b38>
   12c40:	cmp	r0, #0
   12c44:	beq	12d34 <__assert_fail@plt+0x1508>
   12c48:	ldr	r3, [sp, #1188]	; 0x4a4
   12c4c:	cmp	r3, r5
   12c50:	bls	12c38 <__assert_fail@plt+0x140c>
   12c54:	ldr	r3, [sp, #28]
   12c58:	ldr	fp, [sp, #1184]	; 0x4a0
   12c5c:	cmp	r3, #0
   12c60:	beq	12c6c <__assert_fail@plt+0x1440>
   12c64:	ldr	r3, [sp, #44]	; 0x2c
   12c68:	add	r7, fp, r3
   12c6c:	mov	r1, r7
   12c70:	add	r2, r8, #1
   12c74:	add	r0, fp, r9
   12c78:	bl	11484 <memmove@plt>
   12c7c:	mov	r2, r9
   12c80:	mov	r1, sl
   12c84:	mov	r0, fp
   12c88:	bl	114b4 <memcpy@plt>
   12c8c:	ldrb	r3, [sl]
   12c90:	mov	r7, r0
   12c94:	add	r2, r6, #1
   12c98:	cmp	r3, #47	; 0x2f
   12c9c:	beq	12db0 <__assert_fail@plt+0x1584>
   12ca0:	cmp	r4, r2
   12ca4:	ldrb	r9, [r0]
   12ca8:	bhi	12d74 <__assert_fail@plt+0x1548>
   12cac:	mov	r3, #1
   12cb0:	str	r3, [sp, #28]
   12cb4:	b	12a1c <__assert_fail@plt+0x11f0>
   12cb8:	add	r3, r6, #1
   12cbc:	cmp	r4, r3
   12cc0:	bls	12cd8 <__assert_fail@plt+0x14ac>
   12cc4:	ldrb	r3, [r4, #-1]
   12cc8:	cmp	r3, #47	; 0x2f
   12ccc:	subeq	r4, r4, #1
   12cd0:	moveq	r5, #0
   12cd4:	beq	12b0c <__assert_fail@plt+0x12e0>
   12cd8:	mov	r5, #0
   12cdc:	b	12b0c <__assert_fail@plt+0x12e0>
   12ce0:	bl	11658 <strlen@plt>
   12ce4:	ldr	r2, [sp, #1188]	; 0x4a4
   12ce8:	add	r5, r9, r0
   12cec:	mov	r8, r0
   12cf0:	cmp	r5, r2
   12cf4:	bcc	12c6c <__assert_fail@plt+0x1440>
   12cf8:	ldr	r3, [sp, #28]
   12cfc:	str	r3, [sp, #44]	; 0x2c
   12d00:	b	12c38 <__assert_fail@plt+0x140c>
   12d04:	ldr	ip, [sp, #40]	; 0x28
   12d08:	mov	r1, r2
   12d0c:	movw	r3, #26108	; 0x65fc
   12d10:	movt	r3, #1
   12d14:	movw	r2, #26036	; 0x65b4
   12d18:	movt	r2, #1
   12d1c:	mov	r0, #7
   12d20:	str	ip, [sp]
   12d24:	bl	15e00 <__assert_fail@plt+0x45d4>
   12d28:	subs	r3, r0, #0
   12d2c:	str	r3, [sp, #20]
   12d30:	bne	12ad8 <__assert_fail@plt+0x12ac>
   12d34:	bl	19eac <lchmod@@Base+0x3750>
   12d38:	sub	r3, r4, #2
   12d3c:	cmp	r6, r3
   12d40:	mov	r4, r3
   12d44:	beq	12a1c <__assert_fail@plt+0x11f0>
   12d48:	ldrb	r2, [r3, #-1]!
   12d4c:	cmp	r2, #47	; 0x2f
   12d50:	beq	12a1c <__assert_fail@plt+0x11f0>
   12d54:	b	12d3c <__assert_fail@plt+0x1510>
   12d58:	mov	r0, r4
   12d5c:	mov	r1, #0
   12d60:	bl	1152c <rawmemchr@plt>
   12d64:	mov	r6, r4
   12d68:	ldrb	r9, [r5]
   12d6c:	mov	r4, r0
   12d70:	b	1282c <__assert_fail@plt+0x1000>
   12d74:	sub	r3, r4, #1
   12d78:	cmp	r3, r6
   12d7c:	bls	12dc8 <__assert_fail@plt+0x159c>
   12d80:	ldrb	r2, [r4, #-2]
   12d84:	cmp	r2, #47	; 0x2f
   12d88:	beq	12dc8 <__assert_fail@plt+0x159c>
   12d8c:	sub	r3, r4, #2
   12d90:	cmp	r6, r3
   12d94:	mov	r4, r3
   12d98:	beq	12cac <__assert_fail@plt+0x1480>
   12d9c:	ldrb	r2, [r3, #-1]
   12da0:	sub	r3, r3, #1
   12da4:	cmp	r2, #47	; 0x2f
   12da8:	beq	12cac <__assert_fail@plt+0x1480>
   12dac:	b	12d90 <__assert_fail@plt+0x1564>
   12db0:	mov	r4, r2
   12db4:	mov	r2, #1
   12db8:	strb	r3, [r6]
   12dbc:	ldrb	r9, [r0]
   12dc0:	str	r2, [sp, #28]
   12dc4:	b	12a1c <__assert_fail@plt+0x11f0>
   12dc8:	mov	r4, r3
   12dcc:	mov	r3, #1
   12dd0:	str	r3, [sp, #28]
   12dd4:	b	12a1c <__assert_fail@plt+0x11f0>
   12dd8:	movw	r3, #49640	; 0xc1e8
   12ddc:	movt	r3, #2
   12de0:	str	r0, [r3]
   12de4:	bx	lr
   12de8:	movw	r3, #49640	; 0xc1e8
   12dec:	movt	r3, #2
   12df0:	strb	r0, [r3, #4]
   12df4:	bx	lr
   12df8:	movw	r3, #49628	; 0xc1dc
   12dfc:	movt	r3, #2
   12e00:	strd	r4, [sp, #-16]!
   12e04:	ldr	r0, [r3]
   12e08:	str	r6, [sp, #8]
   12e0c:	str	lr, [sp, #12]
   12e10:	sub	sp, sp, #8
   12e14:	bl	1a140 <lchmod@@Base+0x39e4>
   12e18:	cmp	r0, #0
   12e1c:	beq	12e48 <__assert_fail@plt+0x161c>
   12e20:	movw	r4, #49640	; 0xc1e8
   12e24:	movt	r4, #2
   12e28:	ldrb	r6, [r4, #4]
   12e2c:	bl	11688 <__errno_location@plt>
   12e30:	mov	r5, r0
   12e34:	cmp	r6, #0
   12e38:	beq	12e74 <__assert_fail@plt+0x1648>
   12e3c:	ldr	r3, [r0]
   12e40:	cmp	r3, #32
   12e44:	bne	12e74 <__assert_fail@plt+0x1648>
   12e48:	movw	r3, #49624	; 0xc1d8
   12e4c:	movt	r3, #2
   12e50:	ldr	r0, [r3]
   12e54:	bl	1a140 <lchmod@@Base+0x39e4>
   12e58:	cmp	r0, #0
   12e5c:	bne	12ebc <__assert_fail@plt+0x1690>
   12e60:	add	sp, sp, #8
   12e64:	ldrd	r4, [sp]
   12e68:	ldr	r6, [sp, #8]
   12e6c:	add	sp, sp, #12
   12e70:	pop	{pc}		; (ldr pc, [sp], #4)
   12e74:	movw	r1, #45288	; 0xb0e8
   12e78:	movt	r1, #1
   12e7c:	mov	r2, #5
   12e80:	mov	r0, #0
   12e84:	bl	114f0 <dcgettext@plt>
   12e88:	mov	r6, r0
   12e8c:	ldr	r0, [r4]
   12e90:	cmp	r0, #0
   12e94:	beq	12ecc <__assert_fail@plt+0x16a0>
   12e98:	ldr	r4, [r5]
   12e9c:	bl	18fa0 <lchmod@@Base+0x2844>
   12ea0:	mov	r3, r0
   12ea4:	movw	r2, #45300	; 0xb0f4
   12ea8:	movt	r2, #1
   12eac:	mov	r0, #0
   12eb0:	str	r6, [sp]
   12eb4:	mov	r1, r4
   12eb8:	bl	115b0 <error@plt>
   12ebc:	movw	r3, #49536	; 0xc180
   12ec0:	movt	r3, #2
   12ec4:	ldr	r0, [r3]
   12ec8:	bl	114a8 <_exit@plt>
   12ecc:	mov	r3, r6
   12ed0:	movw	r2, #45304	; 0xb0f8
   12ed4:	movt	r2, #1
   12ed8:	ldr	r1, [r5]
   12edc:	bl	115b0 <error@plt>
   12ee0:	b	12ebc <__assert_fail@plt+0x1690>
   12ee4:	str	r4, [sp, #-8]!
   12ee8:	str	lr, [sp, #4]
   12eec:	bl	12f88 <__assert_fail@plt+0x175c>
   12ef0:	cmp	r0, #0
   12ef4:	beq	12f04 <__assert_fail@plt+0x16d8>
   12ef8:	ldr	r4, [sp]
   12efc:	add	sp, sp, #4
   12f00:	pop	{pc}		; (ldr pc, [sp], #4)
   12f04:	bl	19eac <lchmod@@Base+0x3750>
   12f08:	strd	r4, [sp, #-16]!
   12f0c:	mov	r4, r0
   12f10:	str	r6, [sp, #8]
   12f14:	str	lr, [sp, #12]
   12f18:	ldrb	ip, [r0]
   12f1c:	sub	r5, ip, #47	; 0x2f
   12f20:	clz	r5, r5
   12f24:	bl	1a088 <lchmod@@Base+0x392c>
   12f28:	lsr	r5, r5, #5
   12f2c:	sub	r0, r0, r4
   12f30:	cmp	r0, r5
   12f34:	bls	12f78 <__assert_fail@plt+0x174c>
   12f38:	add	r3, r4, r0
   12f3c:	ldrb	r3, [r3, #-1]
   12f40:	cmp	r3, #47	; 0x2f
   12f44:	bne	12f78 <__assert_fail@plt+0x174c>
   12f48:	sub	r0, r0, #2
   12f4c:	sub	ip, r4, #1
   12f50:	add	r3, r4, r0
   12f54:	add	ip, ip, r5
   12f58:	rsb	r2, r4, #1
   12f5c:	b	12f6c <__assert_fail@plt+0x1740>
   12f60:	ldrb	r1, [r3], #-1
   12f64:	cmp	r1, #47	; 0x2f
   12f68:	bne	12f78 <__assert_fail@plt+0x174c>
   12f6c:	cmp	r3, ip
   12f70:	add	r0, r2, r3
   12f74:	bne	12f60 <__assert_fail@plt+0x1734>
   12f78:	ldrd	r4, [sp]
   12f7c:	ldr	r6, [sp, #8]
   12f80:	add	sp, sp, #12
   12f84:	pop	{pc}		; (ldr pc, [sp], #4)
   12f88:	strd	r4, [sp, #-16]!
   12f8c:	str	r6, [sp, #8]
   12f90:	mov	r6, r0
   12f94:	str	lr, [sp, #12]
   12f98:	bl	12f08 <__assert_fail@plt+0x16dc>
   12f9c:	add	r3, r0, #1
   12fa0:	mov	r4, r0
   12fa4:	cmp	r0, #0
   12fa8:	movne	r0, r3
   12fac:	addeq	r0, r3, #1
   12fb0:	bl	19ff4 <lchmod@@Base+0x3898>
   12fb4:	subs	r5, r0, #0
   12fb8:	beq	12fd8 <__assert_fail@plt+0x17ac>
   12fbc:	mov	r1, r6
   12fc0:	mov	r2, r4
   12fc4:	bl	114b4 <memcpy@plt>
   12fc8:	cmp	r4, #0
   12fcc:	beq	12fec <__assert_fail@plt+0x17c0>
   12fd0:	mov	r3, #0
   12fd4:	strb	r3, [r5, r4]
   12fd8:	mov	r0, r5
   12fdc:	ldrd	r4, [sp]
   12fe0:	ldr	r6, [sp, #8]
   12fe4:	add	sp, sp, #12
   12fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fec:	mov	r3, #46	; 0x2e
   12ff0:	mov	r4, #1
   12ff4:	strb	r3, [r5]
   12ff8:	b	12fd0 <__assert_fail@plt+0x17a4>
   12ffc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13000:	strd	r6, [sp, #8]
   13004:	str	r8, [sp, #16]
   13008:	subs	r8, r0, #0
   1300c:	str	lr, [sp, #20]
   13010:	beq	1307c <__assert_fail@plt+0x1850>
   13014:	mov	r0, #24
   13018:	mov	r4, r1
   1301c:	mov	r7, r2
   13020:	bl	19a34 <lchmod@@Base+0x32d8>
   13024:	mov	r6, r0
   13028:	mov	r0, r4
   1302c:	bl	19e84 <lchmod@@Base+0x3728>
   13030:	ldrd	r4, [r7]
   13034:	mov	r1, r6
   13038:	str	r0, [r6]
   1303c:	mov	r0, r8
   13040:	ldrd	r2, [r7, #96]	; 0x60
   13044:	strd	r2, [r6, #8]
   13048:	strd	r4, [r6, #16]
   1304c:	bl	16458 <__assert_fail@plt+0x4c2c>
   13050:	cmp	r0, #0
   13054:	beq	13090 <__assert_fail@plt+0x1864>
   13058:	cmp	r6, r0
   1305c:	beq	1307c <__assert_fail@plt+0x1850>
   13060:	mov	r0, r6
   13064:	ldrd	r4, [sp]
   13068:	ldrd	r6, [sp, #8]
   1306c:	ldr	r8, [sp, #16]
   13070:	ldr	lr, [sp, #20]
   13074:	add	sp, sp, #24
   13078:	b	16668 <__assert_fail@plt+0x4e3c>
   1307c:	ldrd	r4, [sp]
   13080:	ldrd	r6, [sp, #8]
   13084:	ldr	r8, [sp, #16]
   13088:	add	sp, sp, #20
   1308c:	pop	{pc}		; (ldr pc, [sp], #4)
   13090:	bl	19eac <lchmod@@Base+0x3750>
   13094:	subs	r3, r0, #0
   13098:	beq	130e0 <__assert_fail@plt+0x18b4>
   1309c:	mov	r3, r1
   130a0:	strd	r4, [sp, #-12]!
   130a4:	ldrd	r4, [r2, #96]	; 0x60
   130a8:	str	lr, [sp, #8]
   130ac:	sub	sp, sp, #28
   130b0:	mov	r1, sp
   130b4:	str	r3, [sp]
   130b8:	ldrd	r2, [r2]
   130bc:	strd	r4, [sp, #8]
   130c0:	strd	r2, [sp, #16]
   130c4:	bl	15ae0 <__assert_fail@plt+0x42b4>
   130c8:	adds	r0, r0, #0
   130cc:	movne	r0, #1
   130d0:	add	sp, sp, #28
   130d4:	ldrd	r4, [sp]
   130d8:	add	sp, sp, #8
   130dc:	pop	{pc}		; (ldr pc, [sp], #4)
   130e0:	mov	r0, r3
   130e4:	bx	lr
   130e8:	strd	r4, [sp, #-12]!
   130ec:	mov	r5, r0
   130f0:	str	lr, [sp, #8]
   130f4:	sub	sp, sp, #12
   130f8:	bl	11688 <__errno_location@plt>
   130fc:	mov	r4, r0
   13100:	mov	r2, #0
   13104:	ldr	r3, [r4]
   13108:	mov	r0, r5
   1310c:	str	r2, [r4]
   13110:	str	r3, [sp]
   13114:	str	r3, [sp, #4]
   13118:	bl	11490 <free@plt>
   1311c:	ldr	r3, [r4]
   13120:	add	r2, sp, #8
   13124:	clz	r3, r3
   13128:	lsr	r3, r3, #5
   1312c:	add	r3, r2, r3, lsl #2
   13130:	ldr	r3, [r3, #-8]
   13134:	str	r3, [r4]
   13138:	add	sp, sp, #12
   1313c:	ldrd	r4, [sp]
   13140:	add	sp, sp, #8
   13144:	pop	{pc}		; (ldr pc, [sp], #4)
   13148:	strd	r4, [sp, #-8]!
   1314c:	ldrd	r2, [r1, #8]
   13150:	ldrd	r4, [r0, #8]
   13154:	cmp	r5, r3
   13158:	cmpeq	r4, r2
   1315c:	movne	r0, #0
   13160:	bne	1317c <__assert_fail@plt+0x1950>
   13164:	ldrd	r4, [r0]
   13168:	ldrd	r2, [r1]
   1316c:	cmp	r5, r3
   13170:	cmpeq	r4, r2
   13174:	moveq	r0, #1
   13178:	movne	r0, #0
   1317c:	ldrd	r4, [sp]
   13180:	add	sp, sp, #8
   13184:	bx	lr
   13188:	mov	r2, r1
   1318c:	mov	r3, #0
   13190:	str	r4, [sp, #-8]!
   13194:	ldrd	r0, [r0, #8]
   13198:	str	lr, [sp, #4]
   1319c:	bl	1a944 <lchmod@@Base+0x41e8>
   131a0:	ldr	r4, [sp]
   131a4:	add	sp, sp, #4
   131a8:	mov	r0, r2
   131ac:	pop	{pc}		; (ldr pc, [sp], #4)
   131b0:	mov	r2, r1
   131b4:	mov	r3, #0
   131b8:	str	r4, [sp, #-8]!
   131bc:	ldrd	r0, [r0]
   131c0:	str	lr, [sp, #4]
   131c4:	bl	1a944 <lchmod@@Base+0x41e8>
   131c8:	ldr	r4, [sp]
   131cc:	add	sp, sp, #4
   131d0:	mov	r0, r2
   131d4:	pop	{pc}		; (ldr pc, [sp], #4)
   131d8:	strd	r4, [sp, #-8]!
   131dc:	ldrd	r2, [r1]
   131e0:	ldrd	r4, [r0]
   131e4:	cmp	r5, r3
   131e8:	cmpeq	r4, r2
   131ec:	ldrd	r4, [sp]
   131f0:	add	sp, sp, #8
   131f4:	moveq	r0, #1
   131f8:	movne	r0, #0
   131fc:	bx	lr
   13200:	ldr	r2, [r0]
   13204:	ldr	r3, [r1]
   13208:	ldrd	r0, [r2, #160]	; 0xa0
   1320c:	ldrd	r2, [r3, #160]	; 0xa0
   13210:	cmp	r1, r3
   13214:	cmpeq	r0, r2
   13218:	movhi	r0, #1
   1321c:	movls	r0, #0
   13220:	movcc	r3, #1
   13224:	movcs	r3, #0
   13228:	sub	r0, r0, r3
   1322c:	bx	lr
   13230:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13234:	mov	r5, r2
   13238:	mov	r4, r1
   1323c:	ldr	r2, [r0, #40]	; 0x28
   13240:	strd	r6, [sp, #8]
   13244:	mov	r6, r0
   13248:	str	r8, [sp, #16]
   1324c:	str	lr, [sp, #20]
   13250:	ldr	r0, [r0, #8]
   13254:	cmp	r2, r5
   13258:	ldr	r7, [r6, #44]	; 0x2c
   1325c:	bcs	13284 <__assert_fail@plt+0x1a58>
   13260:	add	r1, r5, #40	; 0x28
   13264:	cmn	r1, #-1073741823	; 0xc0000001
   13268:	str	r1, [r6, #40]	; 0x28
   1326c:	bhi	1330c <__assert_fail@plt+0x1ae0>
   13270:	lsl	r1, r1, #2
   13274:	bl	1a030 <lchmod@@Base+0x38d4>
   13278:	cmp	r0, #0
   1327c:	strne	r0, [r6, #8]
   13280:	beq	13308 <__assert_fail@plt+0x1adc>
   13284:	cmp	r4, #0
   13288:	movne	r2, r0
   1328c:	beq	132a0 <__assert_fail@plt+0x1a74>
   13290:	str	r4, [r2], #4
   13294:	ldr	r4, [r4, #8]
   13298:	cmp	r4, #0
   1329c:	bne	13290 <__assert_fail@plt+0x1a64>
   132a0:	mov	r3, r7
   132a4:	mov	r2, #4
   132a8:	mov	r1, r5
   132ac:	bl	1176c <qsort@plt>
   132b0:	ldr	lr, [r6, #8]
   132b4:	subs	r3, r5, #1
   132b8:	ldr	r0, [lr]
   132bc:	moveq	r2, r0
   132c0:	beq	132ec <__assert_fail@plt+0x1ac0>
   132c4:	mov	ip, r0
   132c8:	mov	r2, lr
   132cc:	b	132d4 <__assert_fail@plt+0x1aa8>
   132d0:	ldr	ip, [r2]
   132d4:	subs	r3, r3, #1
   132d8:	ldr	r1, [r2, #4]!
   132dc:	str	r1, [ip, #8]
   132e0:	bne	132d0 <__assert_fail@plt+0x1aa4>
   132e4:	add	r5, lr, r5, lsl #2
   132e8:	ldr	r2, [r5, #-4]
   132ec:	mov	r3, #0
   132f0:	str	r3, [r2, #8]
   132f4:	ldrd	r4, [sp]
   132f8:	ldrd	r6, [sp, #8]
   132fc:	ldr	r8, [sp, #16]
   13300:	add	sp, sp, #20
   13304:	pop	{pc}		; (ldr pc, [sp], #4)
   13308:	ldr	r0, [r6, #8]
   1330c:	bl	130e8 <__assert_fail@plt+0x18bc>
   13310:	mov	r3, #0
   13314:	mov	r0, r4
   13318:	str	r3, [r6, #8]
   1331c:	str	r3, [r6, #40]	; 0x28
   13320:	b	132f4 <__assert_fail@plt+0x1ac8>
   13324:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13328:	mov	r5, r2
   1332c:	strd	r6, [sp, #8]
   13330:	mov	r6, r0
   13334:	add	r0, r2, #176	; 0xb0
   13338:	bic	r0, r0, #7
   1333c:	mov	r7, r1
   13340:	str	r8, [sp, #16]
   13344:	str	lr, [sp, #20]
   13348:	bl	19ff4 <lchmod@@Base+0x3898>
   1334c:	subs	r4, r0, #0
   13350:	beq	1339c <__assert_fail@plt+0x1b70>
   13354:	mov	r1, r7
   13358:	mov	r2, r5
   1335c:	add	r0, r4, #168	; 0xa8
   13360:	bl	114b4 <memcpy@plt>
   13364:	ldr	r1, [r6, #24]
   13368:	mov	r3, #0
   1336c:	add	r0, r4, r5
   13370:	mov	r2, #3
   13374:	strb	r3, [r0, #168]	; 0xa8
   13378:	str	r3, [r4, #12]
   1337c:	str	r3, [r4, #16]
   13380:	str	r3, [r4, #20]
   13384:	str	r1, [r4, #28]
   13388:	str	r3, [r4, #32]
   1338c:	str	r6, [r4, #44]	; 0x2c
   13390:	str	r5, [r4, #52]	; 0x34
   13394:	strh	r3, [r4, #58]	; 0x3a
   13398:	strh	r2, [r4, #60]	; 0x3c
   1339c:	mov	r0, r4
   133a0:	ldrd	r4, [sp]
   133a4:	ldrd	r6, [sp, #8]
   133a8:	ldr	r8, [sp, #16]
   133ac:	add	sp, sp, #20
   133b0:	pop	{pc}		; (ldr pc, [sp], #4)
   133b4:	strd	r4, [sp, #-16]!
   133b8:	subs	r4, r0, #0
   133bc:	str	r6, [sp, #8]
   133c0:	str	lr, [sp, #12]
   133c4:	beq	133ec <__assert_fail@plt+0x1bc0>
   133c8:	ldr	r5, [r4, #8]
   133cc:	ldr	r3, [r4, #12]
   133d0:	subs	r0, r3, #0
   133d4:	beq	133dc <__assert_fail@plt+0x1bb0>
   133d8:	bl	11814 <closedir@plt>
   133dc:	mov	r0, r4
   133e0:	bl	130e8 <__assert_fail@plt+0x18bc>
   133e4:	subs	r4, r5, #0
   133e8:	bne	133c8 <__assert_fail@plt+0x1b9c>
   133ec:	ldrd	r4, [sp]
   133f0:	ldr	r6, [sp, #8]
   133f4:	add	sp, sp, #12
   133f8:	pop	{pc}		; (ldr pc, [sp], #4)
   133fc:	str	r4, [sp, #-8]!
   13400:	mov	r4, r0
   13404:	str	lr, [sp, #4]
   13408:	b	13418 <__assert_fail@plt+0x1bec>
   1340c:	bl	1670c <__assert_fail@plt+0x4ee0>
   13410:	cmp	r0, #0
   13414:	bge	13438 <__assert_fail@plt+0x1c0c>
   13418:	mov	r0, r4
   1341c:	bl	166bc <__assert_fail@plt+0x4e90>
   13420:	cmp	r0, #0
   13424:	mov	r0, r4
   13428:	beq	1340c <__assert_fail@plt+0x1be0>
   1342c:	ldr	r4, [sp]
   13430:	add	sp, sp, #4
   13434:	pop	{pc}		; (ldr pc, [sp], #4)
   13438:	bl	117e4 <close@plt>
   1343c:	b	13418 <__assert_fail@plt+0x1bec>
   13440:	strd	r4, [sp, #-20]!	; 0xffffffec
   13444:	ldr	r5, [r0, #44]	; 0x2c
   13448:	ldr	r3, [r5, #48]	; 0x30
   1344c:	strd	r6, [sp, #8]
   13450:	str	lr, [sp, #16]
   13454:	sub	sp, sp, #100	; 0x64
   13458:	tst	r3, #512	; 0x200
   1345c:	beq	134ec <__assert_fail@plt+0x1cc0>
   13460:	ldr	r4, [r5, #52]	; 0x34
   13464:	mov	r7, r1
   13468:	mov	r6, r0
   1346c:	cmp	r4, #0
   13470:	beq	13498 <__assert_fail@plt+0x1c6c>
   13474:	ldrd	r2, [r6, #64]	; 0x40
   13478:	add	r1, sp, #8
   1347c:	mov	r0, r4
   13480:	strd	r2, [sp, #8]
   13484:	bl	15ae0 <__assert_fail@plt+0x42b4>
   13488:	cmp	r0, #0
   1348c:	beq	134d0 <__assert_fail@plt+0x1ca4>
   13490:	ldr	r0, [r0, #8]
   13494:	b	134f0 <__assert_fail@plt+0x1cc4>
   13498:	movw	r0, #12520	; 0x30e8
   1349c:	movt	r0, #1
   134a0:	mov	r1, r4
   134a4:	movw	r3, #12760	; 0x31d8
   134a8:	movt	r3, #1
   134ac:	movw	r2, #12720	; 0x31b0
   134b0:	movt	r2, #1
   134b4:	str	r0, [sp]
   134b8:	mov	r0, #13
   134bc:	bl	15e00 <__assert_fail@plt+0x45d4>
   134c0:	cmp	r0, #0
   134c4:	mov	r4, r0
   134c8:	str	r0, [r5, #52]	; 0x34
   134cc:	bne	13474 <__assert_fail@plt+0x1c48>
   134d0:	cmp	r7, #0
   134d4:	blt	134ec <__assert_fail@plt+0x1cc0>
   134d8:	mov	r0, r7
   134dc:	add	r1, sp, #8
   134e0:	bl	1140c <fstatfs64@plt>
   134e4:	cmp	r0, #0
   134e8:	beq	13504 <__assert_fail@plt+0x1cd8>
   134ec:	mov	r0, #0
   134f0:	add	sp, sp, #100	; 0x64
   134f4:	ldrd	r4, [sp]
   134f8:	ldrd	r6, [sp, #8]
   134fc:	add	sp, sp, #16
   13500:	pop	{pc}		; (ldr pc, [sp], #4)
   13504:	cmp	r4, #0
   13508:	beq	13548 <__assert_fail@plt+0x1d1c>
   1350c:	mov	r0, #16
   13510:	bl	19ff4 <lchmod@@Base+0x3898>
   13514:	subs	r5, r0, #0
   13518:	beq	13548 <__assert_fail@plt+0x1d1c>
   1351c:	ldr	ip, [sp, #8]
   13520:	mov	r0, r4
   13524:	mov	r1, r5
   13528:	ldrd	r2, [r6, #64]	; 0x40
   1352c:	strd	r2, [r5]
   13530:	str	ip, [r5, #8]
   13534:	bl	16458 <__assert_fail@plt+0x4c2c>
   13538:	cmp	r0, #0
   1353c:	beq	13550 <__assert_fail@plt+0x1d24>
   13540:	cmp	r5, r0
   13544:	bne	1355c <__assert_fail@plt+0x1d30>
   13548:	ldr	r0, [sp, #8]
   1354c:	b	134f0 <__assert_fail@plt+0x1cc4>
   13550:	mov	r0, r5
   13554:	bl	130e8 <__assert_fail@plt+0x18bc>
   13558:	b	13548 <__assert_fail@plt+0x1d1c>
   1355c:	bl	117d8 <abort@plt>
   13560:	strd	r4, [sp, #-16]!
   13564:	mov	r5, r1
   13568:	ldr	r1, [r0, #32]
   1356c:	str	r6, [sp, #8]
   13570:	str	lr, [sp, #12]
   13574:	sub	r3, r1, r5
   13578:	cmn	r1, #100	; 0x64
   1357c:	clz	r3, r3
   13580:	lsr	r3, r3, #5
   13584:	moveq	r3, #0
   13588:	cmp	r3, #0
   1358c:	bne	135ec <__assert_fail@plt+0x1dc0>
   13590:	cmp	r2, #0
   13594:	mov	r4, r0
   13598:	bne	135c8 <__assert_fail@plt+0x1d9c>
   1359c:	ldr	r3, [r0, #48]	; 0x30
   135a0:	mvn	r2, r1
   135a4:	lsr	r2, r2, #31
   135a8:	eor	r3, r3, #4
   135ac:	ands	r3, r2, r3, lsr #2
   135b0:	bne	135e0 <__assert_fail@plt+0x1db4>
   135b4:	ldr	r6, [sp, #8]
   135b8:	str	r5, [r4, #32]
   135bc:	ldrd	r4, [sp]
   135c0:	add	sp, sp, #12
   135c4:	pop	{pc}		; (ldr pc, [sp], #4)
   135c8:	add	r0, r0, #60	; 0x3c
   135cc:	bl	166c4 <__assert_fail@plt+0x4e98>
   135d0:	cmp	r0, #0
   135d4:	blt	135b4 <__assert_fail@plt+0x1d88>
   135d8:	bl	117e4 <close@plt>
   135dc:	b	135b4 <__assert_fail@plt+0x1d88>
   135e0:	mov	r0, r1
   135e4:	bl	117e4 <close@plt>
   135e8:	b	135b4 <__assert_fail@plt+0x1d88>
   135ec:	bl	117d8 <abort@plt>
   135f0:	ldr	r3, [r0, #48]	; 0x30
   135f4:	strd	r4, [sp, #-16]!
   135f8:	mov	r4, r0
   135fc:	str	r6, [sp, #8]
   13600:	str	lr, [sp, #12]
   13604:	ands	r5, r3, #4
   13608:	movne	r5, #0
   1360c:	bne	13624 <__assert_fail@plt+0x1df8>
   13610:	tst	r3, #512	; 0x200
   13614:	beq	13640 <__assert_fail@plt+0x1e14>
   13618:	mov	r2, #1
   1361c:	mvn	r1, #99	; 0x63
   13620:	bl	13560 <__assert_fail@plt+0x1d34>
   13624:	add	r0, r4, #60	; 0x3c
   13628:	bl	133fc <__assert_fail@plt+0x1bd0>
   1362c:	mov	r0, r5
   13630:	ldrd	r4, [sp]
   13634:	ldr	r6, [sp, #8]
   13638:	add	sp, sp, #12
   1363c:	pop	{pc}		; (ldr pc, [sp], #4)
   13640:	ldr	r0, [r0, #28]
   13644:	bl	11760 <fchdir@plt>
   13648:	adds	r5, r0, #0
   1364c:	movne	r5, #1
   13650:	b	13624 <__assert_fail@plt+0x1df8>
   13654:	ldr	ip, [r2, #48]	; 0x30
   13658:	strd	r4, [sp, #-16]!
   1365c:	mov	r4, r2
   13660:	add	r5, r2, #64	; 0x40
   13664:	ldr	r2, [r2, #24]
   13668:	str	r6, [sp, #8]
   1366c:	str	lr, [sp, #12]
   13670:	sub	sp, sp, #8
   13674:	cmp	ip, #0
   13678:	bne	136f0 <__assert_fail@plt+0x1ec4>
   1367c:	tst	r1, #1
   13680:	beq	136f0 <__assert_fail@plt+0x1ec4>
   13684:	mov	r1, r2
   13688:	mov	r0, #3
   1368c:	mov	r2, r5
   13690:	bl	117c0 <__xstat64@plt>
   13694:	cmp	r0, #0
   13698:	beq	1371c <__assert_fail@plt+0x1ef0>
   1369c:	bl	11688 <__errno_location@plt>
   136a0:	ldr	r3, [r0]
   136a4:	mov	r6, r0
   136a8:	cmp	r3, #2
   136ac:	bne	136d4 <__assert_fail@plt+0x1ea8>
   136b0:	mov	r2, r5
   136b4:	mov	r0, #3
   136b8:	ldr	r1, [r4, #24]
   136bc:	bl	117f0 <__lxstat64@plt>
   136c0:	subs	r3, r0, #0
   136c4:	moveq	r0, #13
   136c8:	streq	r3, [r6]
   136cc:	beq	13740 <__assert_fail@plt+0x1f14>
   136d0:	ldr	r3, [r6]
   136d4:	mov	r0, r5
   136d8:	mov	r2, #104	; 0x68
   136dc:	str	r3, [r4, #32]
   136e0:	mov	r1, #0
   136e4:	bl	116ac <memset@plt>
   136e8:	mov	r0, #10
   136ec:	b	13740 <__assert_fail@plt+0x1f14>
   136f0:	ubfx	ip, r1, #1, #1
   136f4:	orrs	r3, r3, ip
   136f8:	bne	13684 <__assert_fail@plt+0x1e58>
   136fc:	mov	ip, #256	; 0x100
   13700:	mov	r1, r0
   13704:	mov	r3, r5
   13708:	mov	r0, #3
   1370c:	str	ip, [sp]
   13710:	bl	11538 <__fxstatat64@plt>
   13714:	cmp	r0, #0
   13718:	bne	1379c <__assert_fail@plt+0x1f70>
   1371c:	ldr	r3, [r4, #80]	; 0x50
   13720:	and	r3, r3, #61440	; 0xf000
   13724:	cmp	r3, #16384	; 0x4000
   13728:	beq	13754 <__assert_fail@plt+0x1f28>
   1372c:	cmp	r3, #40960	; 0xa000
   13730:	beq	137a8 <__assert_fail@plt+0x1f7c>
   13734:	cmp	r3, #32768	; 0x8000
   13738:	movne	r0, #3
   1373c:	moveq	r0, #8
   13740:	add	sp, sp, #8
   13744:	ldrd	r4, [sp]
   13748:	ldr	r6, [sp, #8]
   1374c:	add	sp, sp, #12
   13750:	pop	{pc}		; (ldr pc, [sp], #4)
   13754:	ldrb	r3, [r4, #168]	; 0xa8
   13758:	cmp	r3, #46	; 0x2e
   1375c:	bne	13780 <__assert_fail@plt+0x1f54>
   13760:	ldrb	r3, [r4, #169]	; 0xa9
   13764:	cmp	r3, #0
   13768:	beq	13788 <__assert_fail@plt+0x1f5c>
   1376c:	ldr	r3, [r4, #168]	; 0xa8
   13770:	bic	r3, r3, #-16777216	; 0xff000000
   13774:	bic	r3, r3, #255	; 0xff
   13778:	cmp	r3, #11776	; 0x2e00
   1377c:	beq	13788 <__assert_fail@plt+0x1f5c>
   13780:	mov	r0, #1
   13784:	b	13740 <__assert_fail@plt+0x1f14>
   13788:	ldr	r3, [r4, #48]	; 0x30
   1378c:	cmp	r3, #0
   13790:	moveq	r0, #1
   13794:	movne	r0, #5
   13798:	b	13740 <__assert_fail@plt+0x1f14>
   1379c:	bl	11688 <__errno_location@plt>
   137a0:	ldr	r3, [r0]
   137a4:	b	136d4 <__assert_fail@plt+0x1ea8>
   137a8:	mov	r0, #12
   137ac:	b	13740 <__assert_fail@plt+0x1f14>
   137b0:	mov	ip, r1
   137b4:	ldr	r1, [r1]
   137b8:	strd	r4, [sp, #-16]!
   137bc:	mov	r4, r0
   137c0:	ldr	r0, [r0]
   137c4:	str	r6, [sp, #8]
   137c8:	str	lr, [sp, #12]
   137cc:	add	r3, r1, #256	; 0x100
   137d0:	add	r2, r3, r2
   137d4:	cmp	r1, r2
   137d8:	bhi	1380c <__assert_fail@plt+0x1fe0>
   137dc:	mov	r1, r2
   137e0:	str	r2, [ip]
   137e4:	bl	1a030 <lchmod@@Base+0x38d4>
   137e8:	subs	r5, r0, #0
   137ec:	movne	r3, #1
   137f0:	strne	r5, [r4]
   137f4:	beq	1382c <__assert_fail@plt+0x2000>
   137f8:	ldrd	r4, [sp]
   137fc:	mov	r0, r3
   13800:	ldr	r6, [sp, #8]
   13804:	add	sp, sp, #12
   13808:	pop	{pc}		; (ldr pc, [sp], #4)
   1380c:	mov	r5, #0
   13810:	bl	130e8 <__assert_fail@plt+0x18bc>
   13814:	str	r5, [r4]
   13818:	bl	11688 <__errno_location@plt>
   1381c:	mov	r2, #36	; 0x24
   13820:	mov	r3, r5
   13824:	str	r2, [r0]
   13828:	b	137f8 <__assert_fail@plt+0x1fcc>
   1382c:	ldr	r0, [r4]
   13830:	bl	130e8 <__assert_fail@plt+0x18bc>
   13834:	mov	r3, r5
   13838:	str	r5, [r4]
   1383c:	b	137f8 <__assert_fail@plt+0x1fcc>
   13840:	movw	r3, #258	; 0x102
   13844:	str	r4, [sp, #-8]!
   13848:	mov	r4, r1
   1384c:	tst	r0, r3
   13850:	str	lr, [sp, #4]
   13854:	sub	sp, sp, #8
   13858:	beq	138a4 <__assert_fail@plt+0x2078>
   1385c:	movw	r1, #12520	; 0x30e8
   13860:	movt	r1, #1
   13864:	movw	r3, #12616	; 0x3148
   13868:	movt	r3, #1
   1386c:	movw	r2, #12680	; 0x3188
   13870:	movt	r2, #1
   13874:	str	r1, [sp]
   13878:	mov	r0, #31
   1387c:	mov	r1, #0
   13880:	bl	15e00 <__assert_fail@plt+0x45d4>
   13884:	mov	r3, r0
   13888:	adds	r0, r0, #0
   1388c:	movne	r0, #1
   13890:	str	r3, [r4]
   13894:	add	sp, sp, #8
   13898:	ldr	r4, [sp]
   1389c:	add	sp, sp, #4
   138a0:	pop	{pc}		; (ldr pc, [sp], #4)
   138a4:	mov	r0, #32
   138a8:	bl	19ff4 <lchmod@@Base+0x3898>
   138ac:	cmp	r0, #0
   138b0:	str	r0, [r4]
   138b4:	beq	13894 <__assert_fail@plt+0x2068>
   138b8:	bl	1a1c8 <lchmod@@Base+0x3a6c>
   138bc:	mov	r0, #1
   138c0:	add	sp, sp, #8
   138c4:	ldr	r4, [sp]
   138c8:	add	sp, sp, #4
   138cc:	pop	{pc}		; (ldr pc, [sp], #4)
   138d0:	mov	r3, r2
   138d4:	lsl	r2, r1, #11
   138d8:	tst	r1, #512	; 0x200
   138dc:	and	r2, r2, #32768	; 0x8000
   138e0:	orr	r2, r2, #540672	; 0x84000
   138e4:	orr	r2, r2, #2304	; 0x900
   138e8:	beq	138f4 <__assert_fail@plt+0x20c8>
   138ec:	mov	r1, r3
   138f0:	b	16df8 <lchmod@@Base+0x69c>
   138f4:	mov	r1, r2
   138f8:	mov	r0, r3
   138fc:	b	1a584 <lchmod@@Base+0x3e28>
   13900:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13904:	mov	r5, r0
   13908:	mov	r4, r2
   1390c:	strd	r6, [sp, #8]
   13910:	mov	r7, r1
   13914:	strd	r8, [sp, #16]
   13918:	ldr	r9, [r0, #48]	; 0x30
   1391c:	str	sl, [sp, #24]
   13920:	subs	sl, r3, #0
   13924:	str	lr, [sp, #28]
   13928:	sub	sp, sp, #104	; 0x68
   1392c:	and	r8, r9, #4
   13930:	beq	13a08 <__assert_fail@plt+0x21dc>
   13934:	movw	r1, #45356	; 0xb12c
   13938:	movt	r1, #1
   1393c:	mov	r0, sl
   13940:	bl	11454 <strcmp@plt>
   13944:	cmp	r0, #0
   13948:	bne	13a08 <__assert_fail@plt+0x21dc>
   1394c:	cmp	r8, #0
   13950:	bne	13a48 <__assert_fail@plt+0x221c>
   13954:	cmp	r4, #0
   13958:	bge	13b08 <__assert_fail@plt+0x22dc>
   1395c:	tst	r9, #512	; 0x200
   13960:	bne	13a8c <__assert_fail@plt+0x2260>
   13964:	mov	r8, #1
   13968:	mov	r1, r9
   1396c:	mov	r2, sl
   13970:	ldr	r0, [r5, #32]
   13974:	bl	138d0 <__assert_fail@plt+0x20a4>
   13978:	subs	r6, r0, #0
   1397c:	blt	13b00 <__assert_fail@plt+0x22d4>
   13980:	ldr	r9, [r5, #48]	; 0x30
   13984:	tst	r9, #2
   13988:	beq	13a24 <__assert_fail@plt+0x21f8>
   1398c:	mov	r2, sp
   13990:	mov	r1, r6
   13994:	mov	r0, #3
   13998:	bl	11550 <__fxstat64@plt>
   1399c:	cmp	r0, #0
   139a0:	bne	13a84 <__assert_fail@plt+0x2258>
   139a4:	ldrd	r2, [sp]
   139a8:	ldrd	r0, [r7, #64]	; 0x40
   139ac:	cmp	r1, r3
   139b0:	cmpeq	r0, r2
   139b4:	bne	13a78 <__assert_fail@plt+0x224c>
   139b8:	ldrd	r2, [sp, #96]	; 0x60
   139bc:	ldrd	r0, [r7, #160]	; 0xa0
   139c0:	cmp	r1, r3
   139c4:	cmpeq	r0, r2
   139c8:	bne	13a78 <__assert_fail@plt+0x224c>
   139cc:	ldr	r9, [r5, #48]	; 0x30
   139d0:	tst	r9, #512	; 0x200
   139d4:	bne	13ac8 <__assert_fail@plt+0x229c>
   139d8:	mov	r0, r6
   139dc:	bl	11760 <fchdir@plt>
   139e0:	mov	r9, r0
   139e4:	cmp	r4, #0
   139e8:	bge	13a58 <__assert_fail@plt+0x222c>
   139ec:	bl	11688 <__errno_location@plt>
   139f0:	mov	r4, r0
   139f4:	mov	r0, r6
   139f8:	ldr	r5, [r4]
   139fc:	bl	117e4 <close@plt>
   13a00:	str	r5, [r4]
   13a04:	b	13a58 <__assert_fail@plt+0x222c>
   13a08:	cmp	r8, #0
   13a0c:	bne	13a48 <__assert_fail@plt+0x221c>
   13a10:	cmp	r4, #0
   13a14:	movge	r6, r4
   13a18:	blt	13968 <__assert_fail@plt+0x213c>
   13a1c:	tst	r9, #2
   13a20:	bne	1398c <__assert_fail@plt+0x2160>
   13a24:	cmp	sl, #0
   13a28:	beq	139d0 <__assert_fail@plt+0x21a4>
   13a2c:	mov	r0, sl
   13a30:	movw	r1, #45356	; 0xb12c
   13a34:	movt	r1, #1
   13a38:	bl	11454 <strcmp@plt>
   13a3c:	cmp	r0, #0
   13a40:	bne	139d0 <__assert_fail@plt+0x21a4>
   13a44:	b	1398c <__assert_fail@plt+0x2160>
   13a48:	mvn	r3, r4
   13a4c:	lsr	r3, r3, #31
   13a50:	ands	r9, r3, r9, lsr #9
   13a54:	bne	13ae4 <__assert_fail@plt+0x22b8>
   13a58:	mov	r0, r9
   13a5c:	add	sp, sp, #104	; 0x68
   13a60:	ldrd	r4, [sp]
   13a64:	ldrd	r6, [sp, #8]
   13a68:	ldrd	r8, [sp, #16]
   13a6c:	ldr	sl, [sp, #24]
   13a70:	add	sp, sp, #28
   13a74:	pop	{pc}		; (ldr pc, [sp], #4)
   13a78:	bl	11688 <__errno_location@plt>
   13a7c:	mov	r3, #2
   13a80:	str	r3, [r0]
   13a84:	mvn	r9, #0
   13a88:	b	139e4 <__assert_fail@plt+0x21b8>
   13a8c:	add	r6, r5, #60	; 0x3c
   13a90:	mov	r0, r6
   13a94:	bl	166bc <__assert_fail@plt+0x4e90>
   13a98:	subs	r8, r0, #0
   13a9c:	bne	13968 <__assert_fail@plt+0x213c>
   13aa0:	mov	r0, r6
   13aa4:	bl	1670c <__assert_fail@plt+0x4ee0>
   13aa8:	subs	r6, r0, #0
   13aac:	blt	13af4 <__assert_fail@plt+0x22c8>
   13ab0:	ldr	r9, [r5, #48]	; 0x30
   13ab4:	mov	r4, r6
   13ab8:	mov	r8, #1
   13abc:	tst	r9, #2
   13ac0:	beq	139d0 <__assert_fail@plt+0x21a4>
   13ac4:	b	1398c <__assert_fail@plt+0x2160>
   13ac8:	eor	r2, r8, #1
   13acc:	mov	r1, r6
   13ad0:	uxtb	r2, r2
   13ad4:	mov	r0, r5
   13ad8:	bl	13560 <__assert_fail@plt+0x1d34>
   13adc:	mov	r9, #0
   13ae0:	b	13a58 <__assert_fail@plt+0x222c>
   13ae4:	mov	r0, r4
   13ae8:	mov	r9, #0
   13aec:	bl	117e4 <close@plt>
   13af0:	b	13a58 <__assert_fail@plt+0x222c>
   13af4:	mov	r8, #1
   13af8:	ldr	r9, [r5, #48]	; 0x30
   13afc:	b	13968 <__assert_fail@plt+0x213c>
   13b00:	mvn	r9, #0
   13b04:	b	13a58 <__assert_fail@plt+0x222c>
   13b08:	tst	r9, #2
   13b0c:	mov	r6, r4
   13b10:	mov	r8, #1
   13b14:	beq	13a2c <__assert_fail@plt+0x2200>
   13b18:	b	1398c <__assert_fail@plt+0x2160>
   13b1c:	movw	r3, #258	; 0x102
   13b20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13b24:	tst	r0, r3
   13b28:	strd	r6, [sp, #8]
   13b2c:	strd	r8, [sp, #16]
   13b30:	mov	r8, r2
   13b34:	str	sl, [sp, #24]
   13b38:	mov	sl, r1
   13b3c:	str	lr, [sp, #28]
   13b40:	beq	13bc4 <__assert_fail@plt+0x2398>
   13b44:	mov	r0, #24
   13b48:	bl	19ff4 <lchmod@@Base+0x3898>
   13b4c:	subs	r9, r0, #0
   13b50:	beq	13be8 <__assert_fail@plt+0x23bc>
   13b54:	ldrd	r6, [r8, #64]	; 0x40
   13b58:	mov	r1, r9
   13b5c:	ldrd	r4, [r8, #160]	; 0xa0
   13b60:	ldr	r0, [sl]
   13b64:	strd	r6, [r9]
   13b68:	str	r8, [r9, #16]
   13b6c:	strd	r4, [r9, #8]
   13b70:	bl	16458 <__assert_fail@plt+0x4c2c>
   13b74:	cmp	r9, r0
   13b78:	mov	r4, r0
   13b7c:	beq	13ba8 <__assert_fail@plt+0x237c>
   13b80:	mov	r0, r9
   13b84:	bl	130e8 <__assert_fail@plt+0x18bc>
   13b88:	cmp	r4, #0
   13b8c:	beq	13be8 <__assert_fail@plt+0x23bc>
   13b90:	ldr	r3, [r4, #16]
   13b94:	mov	r2, #2
   13b98:	mov	r0, #1
   13b9c:	str	r3, [r8]
   13ba0:	strh	r2, [r8, #56]	; 0x38
   13ba4:	b	13bac <__assert_fail@plt+0x2380>
   13ba8:	mov	r0, #1
   13bac:	ldrd	r4, [sp]
   13bb0:	ldrd	r6, [sp, #8]
   13bb4:	ldrd	r8, [sp, #16]
   13bb8:	ldr	sl, [sp, #24]
   13bbc:	add	sp, sp, #28
   13bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc4:	add	r1, r2, #64	; 0x40
   13bc8:	ldr	r0, [sl]
   13bcc:	bl	1a1f0 <lchmod@@Base+0x3a94>
   13bd0:	cmp	r0, #0
   13bd4:	beq	13ba8 <__assert_fail@plt+0x237c>
   13bd8:	mov	r3, #2
   13bdc:	str	r8, [r8]
   13be0:	strh	r3, [r8, #56]	; 0x38
   13be4:	b	13bac <__assert_fail@plt+0x2380>
   13be8:	mov	r0, #0
   13bec:	b	13bac <__assert_fail@plt+0x2380>
   13bf0:	movw	r3, #258	; 0x102
   13bf4:	mov	ip, r1
   13bf8:	strd	r4, [sp, #-12]!
   13bfc:	tst	r0, r3
   13c00:	str	lr, [sp, #8]
   13c04:	sub	sp, sp, #28
   13c08:	bne	13c58 <__assert_fail@plt+0x242c>
   13c0c:	ldr	r3, [r2, #4]
   13c10:	cmp	r3, #0
   13c14:	beq	13c48 <__assert_fail@plt+0x241c>
   13c18:	ldr	r1, [r3, #48]	; 0x30
   13c1c:	cmp	r1, #0
   13c20:	blt	13c48 <__assert_fail@plt+0x241c>
   13c24:	ldr	ip, [ip]
   13c28:	ldrd	r0, [ip, #16]
   13c2c:	orrs	r1, r0, r1
   13c30:	beq	13cb8 <__assert_fail@plt+0x248c>
   13c34:	ldrd	r4, [ip]
   13c38:	ldrd	r0, [r2, #160]	; 0xa0
   13c3c:	cmp	r5, r1
   13c40:	cmpeq	r4, r0
   13c44:	beq	13c90 <__assert_fail@plt+0x2464>
   13c48:	add	sp, sp, #28
   13c4c:	ldrd	r4, [sp]
   13c50:	add	sp, sp, #8
   13c54:	pop	{pc}		; (ldr pc, [sp], #4)
   13c58:	ldrd	r4, [r2, #64]	; 0x40
   13c5c:	mov	r1, sp
   13c60:	ldrd	r2, [r2, #160]	; 0xa0
   13c64:	ldr	r0, [ip]
   13c68:	strd	r4, [sp]
   13c6c:	strd	r2, [sp, #8]
   13c70:	bl	16498 <__assert_fail@plt+0x4c6c>
   13c74:	cmp	r0, #0
   13c78:	beq	13cb8 <__assert_fail@plt+0x248c>
   13c7c:	bl	130e8 <__assert_fail@plt+0x18bc>
   13c80:	add	sp, sp, #28
   13c84:	ldrd	r4, [sp]
   13c88:	add	sp, sp, #8
   13c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c90:	ldrd	r0, [ip, #8]
   13c94:	ldrd	r4, [r2, #64]	; 0x40
   13c98:	cmp	r1, r5
   13c9c:	cmpeq	r0, r4
   13ca0:	bne	13c48 <__assert_fail@plt+0x241c>
   13ca4:	ldrd	r0, [r3, #64]	; 0x40
   13ca8:	ldrd	r2, [r3, #160]	; 0xa0
   13cac:	strd	r2, [ip]
   13cb0:	strd	r0, [ip, #8]
   13cb4:	b	13c48 <__assert_fail@plt+0x241c>
   13cb8:	bl	117d8 <abort@plt>
   13cbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13cc0:	mov	r5, r0
   13cc4:	strd	r6, [sp, #8]
   13cc8:	strd	r8, [sp, #16]
   13ccc:	ldr	r9, [r0]
   13cd0:	strd	sl, [sp, #24]
   13cd4:	str	lr, [sp, #32]
   13cd8:	sub	sp, sp, #68	; 0x44
   13cdc:	str	r1, [sp, #32]
   13ce0:	ldr	r0, [r9, #12]
   13ce4:	cmp	r0, #0
   13ce8:	str	r0, [sp, #40]	; 0x28
   13cec:	beq	1402c <__assert_fail@plt+0x2800>
   13cf0:	bl	11754 <dirfd@plt>
   13cf4:	cmp	r0, #0
   13cf8:	str	r0, [sp, #60]	; 0x3c
   13cfc:	blt	14570 <__assert_fail@plt+0x2d44>
   13d00:	ldr	r3, [r5, #44]	; 0x2c
   13d04:	cmp	r3, #0
   13d08:	beq	14454 <__assert_fail@plt+0x2c28>
   13d0c:	ldr	r3, [r5, #48]	; 0x30
   13d10:	mvn	r2, #0
   13d14:	str	r2, [sp, #16]
   13d18:	mov	r2, #1
   13d1c:	str	r2, [sp, #52]	; 0x34
   13d20:	ldr	r2, [r9, #28]
   13d24:	ldr	r1, [r9, #40]	; 0x28
   13d28:	sub	r0, r1, #1
   13d2c:	str	r1, [sp]
   13d30:	ldrb	r2, [r2, r0]
   13d34:	str	r0, [sp, #28]
   13d38:	cmp	r2, #47	; 0x2f
   13d3c:	beq	13d4c <__assert_fail@plt+0x2520>
   13d40:	add	r2, r1, #1
   13d44:	str	r2, [sp]
   13d48:	str	r1, [sp, #28]
   13d4c:	ands	r3, r3, #4
   13d50:	streq	r3, [sp, #20]
   13d54:	beq	13d74 <__assert_fail@plt+0x2548>
   13d58:	ldr	r3, [r5, #24]
   13d5c:	mov	r1, #47	; 0x2f
   13d60:	ldr	r0, [sp, #28]
   13d64:	add	r2, r3, r0
   13d68:	strb	r1, [r3, r0]
   13d6c:	add	r3, r2, #1
   13d70:	str	r3, [sp, #20]
   13d74:	mov	sl, #0
   13d78:	movw	r3, #6548	; 0x1994
   13d7c:	movt	r3, #258	; 0x102
   13d80:	mov	r2, sl
   13d84:	ldr	fp, [r5, #36]	; 0x24
   13d88:	mov	r7, sl
   13d8c:	stmib	sp, {r2, r9}
   13d90:	movw	r2, #19778	; 0x4d42
   13d94:	movt	r2, #65363	; 0xff53
   13d98:	str	sl, [sp, #24]
   13d9c:	str	r3, [sp, #44]	; 0x2c
   13da0:	ldr	r3, [r9, #48]	; 0x30
   13da4:	str	sl, [sp, #36]	; 0x24
   13da8:	str	r2, [sp, #48]	; 0x30
   13dac:	ldr	r2, [sp]
   13db0:	add	r3, r3, #1
   13db4:	str	r3, [sp, #12]
   13db8:	sub	fp, fp, r2
   13dbc:	b	13dd4 <__assert_fail@plt+0x25a8>
   13dc0:	ldr	r3, [sp, #16]
   13dc4:	add	r7, r7, #1
   13dc8:	cmp	r7, r3
   13dcc:	bcs	1418c <__assert_fail@plt+0x2960>
   13dd0:	mov	sl, r4
   13dd4:	ldr	r3, [sp, #8]
   13dd8:	ldr	r4, [r3, #12]
   13ddc:	cmp	r4, #0
   13de0:	beq	14314 <__assert_fail@plt+0x2ae8>
   13de4:	bl	11688 <__errno_location@plt>
   13de8:	mov	r8, r0
   13dec:	mov	r3, #0
   13df0:	mov	r0, r4
   13df4:	str	r3, [r8]
   13df8:	bl	11730 <readdir64@plt>
   13dfc:	subs	r9, r0, #0
   13e00:	beq	143e4 <__assert_fail@plt+0x2bb8>
   13e04:	ldr	r3, [r5, #48]	; 0x30
   13e08:	tst	r3, #32
   13e0c:	bne	13e1c <__assert_fail@plt+0x25f0>
   13e10:	ldrb	r3, [r9, #19]
   13e14:	cmp	r3, #46	; 0x2e
   13e18:	beq	13fb0 <__assert_fail@plt+0x2784>
   13e1c:	add	r4, r9, #19
   13e20:	mov	r0, r4
   13e24:	bl	11658 <strlen@plt>
   13e28:	mov	r2, r0
   13e2c:	mov	r1, r4
   13e30:	mov	r6, r0
   13e34:	mov	r0, r5
   13e38:	bl	13324 <__assert_fail@plt+0x1af8>
   13e3c:	subs	r4, r0, #0
   13e40:	beq	14244 <__assert_fail@plt+0x2a18>
   13e44:	cmp	fp, r6
   13e48:	bls	13f10 <__assert_fail@plt+0x26e4>
   13e4c:	ldr	r3, [sp]
   13e50:	adds	r6, r6, r3
   13e54:	bcs	14644 <__assert_fail@plt+0x2e18>
   13e58:	ldr	r3, [sp, #12]
   13e5c:	add	r1, r4, #168	; 0xa8
   13e60:	ldr	ip, [r5]
   13e64:	ldr	r0, [r5, #48]	; 0x30
   13e68:	str	r6, [r4, #40]	; 0x28
   13e6c:	str	r3, [r4, #48]	; 0x30
   13e70:	ldrd	r2, [r9]
   13e74:	str	ip, [r4, #4]
   13e78:	tst	r0, #4
   13e7c:	streq	r1, [r4, #24]
   13e80:	strd	r2, [r4, #160]	; 0xa0
   13e84:	bne	13f90 <__assert_fail@plt+0x2764>
   13e88:	ldr	r3, [r5, #44]	; 0x2c
   13e8c:	cmp	r3, #0
   13e90:	beq	13e9c <__assert_fail@plt+0x2670>
   13e94:	ands	r3, r0, #1024	; 0x400
   13e98:	beq	13fd0 <__assert_fail@plt+0x27a4>
   13e9c:	ldrb	r3, [r9, #18]
   13ea0:	tst	r0, #8
   13ea4:	sub	r2, r3, #1
   13ea8:	beq	13eb4 <__assert_fail@plt+0x2688>
   13eac:	tst	r3, #251	; 0xfb
   13eb0:	bne	13fe8 <__assert_fail@plt+0x27bc>
   13eb4:	mov	r3, #11
   13eb8:	cmp	r2, r3
   13ebc:	strh	r3, [r4, #56]	; 0x38
   13ec0:	bls	13f74 <__assert_fail@plt+0x2748>
   13ec4:	mov	r1, #0
   13ec8:	mov	r2, #2
   13ecc:	mov	r3, #0
   13ed0:	str	r1, [r4, #80]	; 0x50
   13ed4:	strd	r2, [r4, #112]	; 0x70
   13ed8:	ldr	r2, [sp, #4]
   13edc:	mov	r3, #0
   13ee0:	str	r3, [r4, #8]
   13ee4:	cmp	r2, r3
   13ee8:	movw	r3, #10000	; 0x2710
   13eec:	strne	r4, [sl, #8]
   13ef0:	streq	r4, [sp, #4]
   13ef4:	cmp	r7, r3
   13ef8:	bne	13dc0 <__assert_fail@plt+0x2594>
   13efc:	ldr	r6, [r5, #44]	; 0x2c
   13f00:	cmp	r6, #0
   13f04:	beq	14140 <__assert_fail@plt+0x2914>
   13f08:	movw	r7, #10001	; 0x2711
   13f0c:	b	13dd0 <__assert_fail@plt+0x25a4>
   13f10:	ldr	r3, [sp, #28]
   13f14:	add	r1, r5, #36	; 0x24
   13f18:	add	r0, r5, #24
   13f1c:	ldr	fp, [r5, #24]
   13f20:	add	r2, r3, #2
   13f24:	add	r2, r2, r6
   13f28:	bl	137b0 <__assert_fail@plt+0x1f84>
   13f2c:	cmp	r0, #0
   13f30:	beq	14244 <__assert_fail@plt+0x2a18>
   13f34:	ldr	r3, [r5, #24]
   13f38:	cmp	r3, fp
   13f3c:	beq	14024 <__assert_fail@plt+0x27f8>
   13f40:	ldr	r2, [r5, #48]	; 0x30
   13f44:	tst	r2, #4
   13f48:	beq	13f58 <__assert_fail@plt+0x272c>
   13f4c:	ldr	r2, [sp]
   13f50:	add	r3, r3, r2
   13f54:	str	r3, [sp, #20]
   13f58:	ldr	r3, [sp]
   13f5c:	str	r0, [sp, #24]
   13f60:	ldr	fp, [r5, #36]	; 0x24
   13f64:	sub	fp, fp, r3
   13f68:	b	13e4c <__assert_fail@plt+0x2620>
   13f6c:	mov	r3, #11
   13f70:	strh	r3, [r4, #56]	; 0x38
   13f74:	movw	r3, #45308	; 0xb0fc
   13f78:	movt	r3, #1
   13f7c:	ldr	r1, [r3, r2, lsl #2]
   13f80:	mov	r2, #2
   13f84:	mov	r3, #0
   13f88:	str	r1, [r4, #80]	; 0x50
   13f8c:	b	13ed4 <__assert_fail@plt+0x26a8>
   13f90:	ldr	r3, [r4, #28]
   13f94:	ldr	r2, [r4, #52]	; 0x34
   13f98:	ldr	r0, [sp, #20]
   13f9c:	str	r3, [r4, #24]
   13fa0:	add	r2, r2, #1
   13fa4:	bl	11484 <memmove@plt>
   13fa8:	ldr	r0, [r5, #48]	; 0x30
   13fac:	b	13e88 <__assert_fail@plt+0x265c>
   13fb0:	ldrb	r3, [r9, #20]
   13fb4:	cmp	r3, #0
   13fb8:	beq	13fc8 <__assert_fail@plt+0x279c>
   13fbc:	ldrh	r3, [r9, #20]
   13fc0:	cmp	r3, #46	; 0x2e
   13fc4:	bne	13e1c <__assert_fail@plt+0x25f0>
   13fc8:	mov	r4, sl
   13fcc:	b	13dd0 <__assert_fail@plt+0x25a4>
   13fd0:	mov	r1, r0
   13fd4:	mov	r2, r4
   13fd8:	ldr	r0, [r5, #32]
   13fdc:	bl	13654 <__assert_fail@plt+0x1e28>
   13fe0:	strh	r0, [r4, #56]	; 0x38
   13fe4:	b	13ed8 <__assert_fail@plt+0x26ac>
   13fe8:	ubfx	r0, r0, #4, #1
   13fec:	cmp	r3, #10
   13ff0:	moveq	r3, r0
   13ff4:	orrne	r3, r0, #1
   13ff8:	cmp	r3, #0
   13ffc:	beq	13f6c <__assert_fail@plt+0x2740>
   14000:	mov	r3, #11
   14004:	cmp	r2, r3
   14008:	strh	r3, [r4, #56]	; 0x38
   1400c:	bls	14228 <__assert_fail@plt+0x29fc>
   14010:	mov	r1, #0
   14014:	mov	r2, #1
   14018:	mov	r3, #0
   1401c:	str	r1, [r4, #80]	; 0x50
   14020:	b	13ed4 <__assert_fail@plt+0x26a8>
   14024:	ldr	r0, [sp, #24]
   14028:	b	13f58 <__assert_fail@plt+0x272c>
   1402c:	ldr	r3, [r5, #48]	; 0x30
   14030:	ldr	r1, [r9, #24]
   14034:	and	r2, r3, #516	; 0x204
   14038:	cmp	r2, #512	; 0x200
   1403c:	ldreq	r0, [r5, #32]
   14040:	mvnne	r0, #99	; 0x63
   14044:	ands	r2, r3, #16
   14048:	beq	14058 <__assert_fail@plt+0x282c>
   1404c:	tst	r3, #1
   14050:	moveq	r2, #32768	; 0x8000
   14054:	bne	142a8 <__assert_fail@plt+0x2a7c>
   14058:	add	r3, sp, #60	; 0x3c
   1405c:	bl	16e38 <lchmod@@Base+0x6dc>
   14060:	cmp	r0, #0
   14064:	str	r0, [sp, #4]
   14068:	str	r0, [r9, #12]
   1406c:	beq	145b8 <__assert_fail@plt+0x2d8c>
   14070:	ldrh	r3, [r9, #56]	; 0x38
   14074:	ldr	r0, [r5, #48]	; 0x30
   14078:	cmp	r3, #11
   1407c:	beq	14504 <__assert_fail@plt+0x2cd8>
   14080:	tst	r0, #256	; 0x100
   14084:	bne	14480 <__assert_fail@plt+0x2c54>
   14088:	ldr	r2, [r5, #44]	; 0x2c
   1408c:	movw	r3, #34464	; 0x86a0
   14090:	movt	r3, #1
   14094:	cmp	r2, #0
   14098:	mvnne	r3, #0
   1409c:	str	r3, [sp, #16]
   140a0:	ldr	r3, [sp, #32]
   140a4:	cmp	r3, #2
   140a8:	beq	14470 <__assert_fail@plt+0x2c44>
   140ac:	ldr	r3, [r5, #48]	; 0x30
   140b0:	ldr	r0, [sp, #60]	; 0x3c
   140b4:	and	r3, r3, #56	; 0x38
   140b8:	cmp	r3, #24
   140bc:	beq	142b8 <__assert_fail@plt+0x2a8c>
   140c0:	ldr	r3, [sp, #32]
   140c4:	mov	r4, #1
   140c8:	sub	r6, r3, #3
   140cc:	clz	r6, r6
   140d0:	lsr	r6, r6, #5
   140d4:	ldr	r3, [r5, #48]	; 0x30
   140d8:	tst	r3, #512	; 0x200
   140dc:	bne	145a4 <__assert_fail@plt+0x2d78>
   140e0:	cmp	r0, #0
   140e4:	bge	14544 <__assert_fail@plt+0x2d18>
   140e8:	tst	r6, r4
   140ec:	beq	140fc <__assert_fail@plt+0x28d0>
   140f0:	bl	11688 <__errno_location@plt>
   140f4:	ldr	r3, [r0]
   140f8:	str	r3, [r9, #32]
   140fc:	ldrh	r3, [r9, #58]	; 0x3a
   14100:	ldr	r0, [r9, #12]
   14104:	orr	r3, r3, #1
   14108:	strh	r3, [r9, #58]	; 0x3a
   1410c:	bl	11814 <closedir@plt>
   14110:	ldr	r3, [r5, #48]	; 0x30
   14114:	mov	r2, #0
   14118:	str	r2, [r9, #12]
   1411c:	tst	r3, #512	; 0x200
   14120:	beq	14130 <__assert_fail@plt+0x2904>
   14124:	ldr	r0, [sp, #60]	; 0x3c
   14128:	cmp	r0, r2
   1412c:	bge	14598 <__assert_fail@plt+0x2d6c>
   14130:	mov	r2, #0
   14134:	str	r2, [r9, #12]
   14138:	str	r2, [sp, #52]	; 0x34
   1413c:	b	13d20 <__assert_fail@plt+0x24f4>
   14140:	ldr	r0, [sp, #8]
   14144:	ldr	r1, [sp, #60]	; 0x3c
   14148:	bl	13440 <__assert_fail@plt+0x1c14>
   1414c:	movw	r3, #26985	; 0x6969
   14150:	cmp	r0, r3
   14154:	beq	14178 <__assert_fail@plt+0x294c>
   14158:	ldr	r3, [sp, #44]	; 0x2c
   1415c:	cmp	r0, r3
   14160:	beq	14178 <__assert_fail@plt+0x294c>
   14164:	ldr	r3, [sp, #48]	; 0x30
   14168:	cmp	r0, r3
   1416c:	movne	r3, #1
   14170:	strne	r3, [sp, #36]	; 0x24
   14174:	bne	13f08 <__assert_fail@plt+0x26dc>
   14178:	ldr	r3, [sp, #16]
   1417c:	add	r7, r7, #1
   14180:	str	r6, [sp, #36]	; 0x24
   14184:	cmp	r7, r3
   14188:	bcc	13dd0 <__assert_fail@plt+0x25a4>
   1418c:	ldr	r9, [sp, #8]
   14190:	ldr	r3, [sp, #24]
   14194:	cmp	r3, #0
   14198:	beq	14324 <__assert_fail@plt+0x2af8>
   1419c:	ldr	r3, [r5, #4]
   141a0:	ldr	r1, [r5, #24]
   141a4:	cmp	r3, #0
   141a8:	beq	141dc <__assert_fail@plt+0x29b0>
   141ac:	ldr	r2, [r3, #24]
   141b0:	add	r0, r3, #168	; 0xa8
   141b4:	cmp	r2, r0
   141b8:	beq	141cc <__assert_fail@plt+0x29a0>
   141bc:	ldr	r0, [r3, #28]
   141c0:	sub	r2, r2, r0
   141c4:	add	r2, r1, r2
   141c8:	str	r2, [r3, #24]
   141cc:	str	r1, [r3, #28]
   141d0:	ldr	r3, [r3, #8]
   141d4:	cmp	r3, #0
   141d8:	bne	141ac <__assert_fail@plt+0x2980>
   141dc:	ldr	r3, [sp, #4]
   141e0:	b	14214 <__assert_fail@plt+0x29e8>
   141e4:	ldr	r2, [r3, #24]
   141e8:	cmp	r2, r0
   141ec:	beq	14200 <__assert_fail@plt+0x29d4>
   141f0:	ldr	r0, [r3, #28]
   141f4:	sub	r2, r2, r0
   141f8:	add	r2, r1, r2
   141fc:	str	r2, [r3, #24]
   14200:	ldr	r2, [r3, #8]
   14204:	str	r1, [r3, #28]
   14208:	cmp	r2, #0
   1420c:	ldreq	r2, [r3, #4]
   14210:	mov	r3, r2
   14214:	ldr	r2, [r3, #48]	; 0x30
   14218:	add	r0, r3, #168	; 0xa8
   1421c:	cmp	r2, #0
   14220:	bge	141e4 <__assert_fail@plt+0x29b8>
   14224:	b	14324 <__assert_fail@plt+0x2af8>
   14228:	movw	r3, #45308	; 0xb0fc
   1422c:	movt	r3, #1
   14230:	ldr	r1, [r3, r2, lsl #2]
   14234:	mov	r2, #1
   14238:	mov	r3, #0
   1423c:	str	r1, [r4, #80]	; 0x50
   14240:	b	13ed4 <__assert_fail@plt+0x26a8>
   14244:	ldr	r9, [sp, #8]
   14248:	mov	r0, r4
   1424c:	ldr	r4, [r8]
   14250:	bl	130e8 <__assert_fail@plt+0x18bc>
   14254:	ldr	r0, [sp, #4]
   14258:	bl	133b4 <__assert_fail@plt+0x1b88>
   1425c:	ldr	r0, [r9, #12]
   14260:	bl	11814 <closedir@plt>
   14264:	ldr	r3, [r5, #48]	; 0x30
   14268:	mov	r2, #0
   1426c:	mov	r1, #7
   14270:	str	r2, [sp, #4]
   14274:	str	r2, [r9, #12]
   14278:	strh	r1, [r9, #56]	; 0x38
   1427c:	orr	r3, r3, #8192	; 0x2000
   14280:	str	r3, [r5, #48]	; 0x30
   14284:	str	r4, [r8]
   14288:	ldr	r0, [sp, #4]
   1428c:	add	sp, sp, #68	; 0x44
   14290:	ldrd	r4, [sp]
   14294:	ldrd	r6, [sp, #8]
   14298:	ldrd	r8, [sp, #16]
   1429c:	ldrd	sl, [sp, #24]
   142a0:	add	sp, sp, #32
   142a4:	pop	{pc}		; (ldr pc, [sp], #4)
   142a8:	ldr	r2, [r9, #48]	; 0x30
   142ac:	cmp	r2, #0
   142b0:	movne	r2, #32768	; 0x8000
   142b4:	b	14058 <__assert_fail@plt+0x282c>
   142b8:	ldr	r3, [r9, #84]	; 0x54
   142bc:	cmp	r3, #2
   142c0:	bne	140c0 <__assert_fail@plt+0x2894>
   142c4:	mov	r1, r0
   142c8:	mov	r0, r9
   142cc:	bl	13440 <__assert_fail@plt+0x1c14>
   142d0:	movw	r3, #26985	; 0x6969
   142d4:	cmp	r0, r3
   142d8:	beq	1463c <__assert_fail@plt+0x2e10>
   142dc:	bgt	14620 <__assert_fail@plt+0x2df4>
   142e0:	movw	r3, #19778	; 0x4d42
   142e4:	movt	r3, #65363	; 0xff53
   142e8:	cmp	r0, r3
   142ec:	beq	1463c <__assert_fail@plt+0x2e10>
   142f0:	cmp	r0, #0
   142f4:	beq	1463c <__assert_fail@plt+0x2e10>
   142f8:	ldr	r3, [sp, #32]
   142fc:	cmp	r3, #3
   14300:	bne	14470 <__assert_fail@plt+0x2c44>
   14304:	mov	r4, #0
   14308:	mov	r6, #1
   1430c:	ldr	r0, [sp, #60]	; 0x3c
   14310:	b	140d4 <__assert_fail@plt+0x28a8>
   14314:	mov	r9, r3
   14318:	ldr	r3, [sp, #24]
   1431c:	cmp	r3, #0
   14320:	bne	1419c <__assert_fail@plt+0x2970>
   14324:	ldr	r3, [r5, #48]	; 0x30
   14328:	tst	r3, #4
   1432c:	beq	1435c <__assert_fail@plt+0x2b30>
   14330:	ldr	r2, [sp]
   14334:	ldr	r3, [r5, #36]	; 0x24
   14338:	cmp	r7, #0
   1433c:	cmpne	r3, r2
   14340:	bne	14350 <__assert_fail@plt+0x2b24>
   14344:	ldr	r3, [sp, #20]
   14348:	sub	r3, r3, #1
   1434c:	str	r3, [sp, #20]
   14350:	ldr	r2, [sp, #20]
   14354:	mov	r3, #0
   14358:	strb	r3, [r2]
   1435c:	ldr	r2, [sp, #40]	; 0x28
   14360:	ldr	r3, [sp, #52]	; 0x34
   14364:	cmp	r2, #0
   14368:	movne	r3, #0
   1436c:	cmp	r3, #0
   14370:	beq	143a8 <__assert_fail@plt+0x2b7c>
   14374:	ldr	r3, [sp, #32]
   14378:	cmp	r7, #0
   1437c:	cmpne	r3, #1
   14380:	bne	143b0 <__assert_fail@plt+0x2b84>
   14384:	ldr	r3, [r9, #48]	; 0x30
   14388:	cmp	r3, #0
   1438c:	bne	14520 <__assert_fail@plt+0x2cf4>
   14390:	mov	r0, r5
   14394:	bl	135f0 <__assert_fail@plt+0x1dc4>
   14398:	adds	r0, r0, #0
   1439c:	movne	r0, #1
   143a0:	cmp	r0, #0
   143a4:	bne	145f8 <__assert_fail@plt+0x2dcc>
   143a8:	cmp	r7, #0
   143ac:	beq	144d0 <__assert_fail@plt+0x2ca4>
   143b0:	ldr	r3, [sp, #36]	; 0x24
   143b4:	cmp	r3, #0
   143b8:	bne	14428 <__assert_fail@plt+0x2bfc>
   143bc:	ldr	r3, [r5, #44]	; 0x2c
   143c0:	cmp	r3, #0
   143c4:	cmpne	r7, #1
   143c8:	beq	14288 <__assert_fail@plt+0x2a5c>
   143cc:	mov	r2, r7
   143d0:	mov	r0, r5
   143d4:	ldr	r1, [sp, #4]
   143d8:	bl	13230 <__assert_fail@plt+0x1a04>
   143dc:	str	r0, [sp, #4]
   143e0:	b	14288 <__assert_fail@plt+0x2a5c>
   143e4:	ldr	r3, [r8]
   143e8:	ldr	r9, [sp, #8]
   143ec:	cmp	r3, #0
   143f0:	beq	1440c <__assert_fail@plt+0x2be0>
   143f4:	ldr	r2, [sp, #40]	; 0x28
   143f8:	str	r3, [r9, #32]
   143fc:	orrs	r2, r2, r7
   14400:	moveq	r3, #4
   14404:	movne	r3, #7
   14408:	strh	r3, [r9, #56]	; 0x38
   1440c:	ldr	r0, [r9, #12]
   14410:	cmp	r0, #0
   14414:	beq	14318 <__assert_fail@plt+0x2aec>
   14418:	bl	11814 <closedir@plt>
   1441c:	mov	r3, #0
   14420:	str	r3, [r9, #12]
   14424:	b	14318 <__assert_fail@plt+0x2aec>
   14428:	movw	r3, #12800	; 0x3200
   1442c:	movt	r3, #1
   14430:	ldr	r1, [sp, #4]
   14434:	mov	r2, r7
   14438:	mov	r0, r5
   1443c:	str	r3, [r5, #44]	; 0x2c
   14440:	bl	13230 <__assert_fail@plt+0x1a04>
   14444:	mov	r3, #0
   14448:	str	r0, [sp, #4]
   1444c:	str	r3, [r5, #44]	; 0x2c
   14450:	b	14288 <__assert_fail@plt+0x2a5c>
   14454:	movw	r3, #34464	; 0x86a0
   14458:	movt	r3, #1
   1445c:	mov	r2, #1
   14460:	str	r3, [sp, #16]
   14464:	str	r2, [sp, #52]	; 0x34
   14468:	ldr	r3, [r5, #48]	; 0x30
   1446c:	b	13d20 <__assert_fail@plt+0x24f4>
   14470:	mov	r3, #0
   14474:	str	r3, [sp, #52]	; 0x34
   14478:	ldr	r3, [r5, #48]	; 0x30
   1447c:	b	13d20 <__assert_fail@plt+0x24f4>
   14480:	add	r4, r5, #56	; 0x38
   14484:	mov	r2, r9
   14488:	mov	r1, r4
   1448c:	bl	13bf0 <__assert_fail@plt+0x23c4>
   14490:	mov	r3, #0
   14494:	mov	r2, r9
   14498:	ldr	r0, [r5, #32]
   1449c:	ldr	r1, [r5, #48]	; 0x30
   144a0:	bl	13654 <__assert_fail@plt+0x1e28>
   144a4:	mov	r1, r4
   144a8:	mov	r2, r9
   144ac:	ldr	r0, [r5, #48]	; 0x30
   144b0:	bl	13b1c <__assert_fail@plt+0x22f0>
   144b4:	subs	r4, r0, #0
   144b8:	bne	14088 <__assert_fail@plt+0x285c>
   144bc:	bl	11688 <__errno_location@plt>
   144c0:	mov	r3, #12
   144c4:	str	r4, [sp, #4]
   144c8:	str	r3, [r0]
   144cc:	b	14288 <__assert_fail@plt+0x2a5c>
   144d0:	ldr	r3, [sp, #32]
   144d4:	cmp	r3, #3
   144d8:	bne	144f0 <__assert_fail@plt+0x2cc4>
   144dc:	ldrh	r3, [r9, #56]	; 0x38
   144e0:	cmp	r3, #7
   144e4:	cmpne	r3, #4
   144e8:	movne	r3, #6
   144ec:	strhne	r3, [r9, #56]	; 0x38
   144f0:	mov	r3, #0
   144f4:	ldr	r0, [sp, #4]
   144f8:	str	r3, [sp, #4]
   144fc:	bl	133b4 <__assert_fail@plt+0x1b88>
   14500:	b	14288 <__assert_fail@plt+0x2a5c>
   14504:	mov	r1, r0
   14508:	mov	r3, #0
   1450c:	ldr	r0, [r5, #32]
   14510:	mov	r2, r9
   14514:	bl	13654 <__assert_fail@plt+0x1e28>
   14518:	strh	r0, [r9, #56]	; 0x38
   1451c:	b	14088 <__assert_fail@plt+0x285c>
   14520:	movw	r3, #45356	; 0xb12c
   14524:	movt	r3, #1
   14528:	ldr	r1, [r9, #4]
   1452c:	mvn	r2, #0
   14530:	mov	r0, r5
   14534:	bl	13900 <__assert_fail@plt+0x20d4>
   14538:	adds	r0, r0, #0
   1453c:	movne	r0, #1
   14540:	b	143a0 <__assert_fail@plt+0x2b74>
   14544:	mov	r2, r0
   14548:	mov	r3, #0
   1454c:	mov	r1, r9
   14550:	mov	r0, r5
   14554:	bl	13900 <__assert_fail@plt+0x20d4>
   14558:	cmp	r0, #0
   1455c:	bne	140e8 <__assert_fail@plt+0x28bc>
   14560:	mov	r3, #1
   14564:	str	r3, [sp, #52]	; 0x34
   14568:	ldr	r3, [r5, #48]	; 0x30
   1456c:	b	13d20 <__assert_fail@plt+0x24f4>
   14570:	ldr	r0, [r9, #12]
   14574:	mov	r4, #0
   14578:	bl	11814 <closedir@plt>
   1457c:	ldr	r3, [sp, #32]
   14580:	str	r4, [r9, #12]
   14584:	cmp	r3, #3
   14588:	beq	145dc <__assert_fail@plt+0x2db0>
   1458c:	mov	r3, #0
   14590:	str	r3, [sp, #4]
   14594:	b	14288 <__assert_fail@plt+0x2a5c>
   14598:	bl	117e4 <close@plt>
   1459c:	ldr	r3, [r5, #48]	; 0x30
   145a0:	b	14130 <__assert_fail@plt+0x2904>
   145a4:	mov	r2, #3
   145a8:	movw	r1, #1030	; 0x406
   145ac:	bl	1a39c <lchmod@@Base+0x3c40>
   145b0:	str	r0, [sp, #60]	; 0x3c
   145b4:	b	140e0 <__assert_fail@plt+0x28b4>
   145b8:	ldr	r3, [sp, #32]
   145bc:	cmp	r3, #3
   145c0:	bne	1458c <__assert_fail@plt+0x2d60>
   145c4:	mov	r3, #4
   145c8:	strh	r3, [r9, #56]	; 0x38
   145cc:	bl	11688 <__errno_location@plt>
   145d0:	ldr	r3, [r0]
   145d4:	str	r3, [r9, #32]
   145d8:	b	14288 <__assert_fail@plt+0x2a5c>
   145dc:	mov	r3, #4
   145e0:	str	r4, [sp, #4]
   145e4:	strh	r3, [r9, #56]	; 0x38
   145e8:	bl	11688 <__errno_location@plt>
   145ec:	ldr	r3, [r0]
   145f0:	str	r3, [r9, #32]
   145f4:	b	14288 <__assert_fail@plt+0x2a5c>
   145f8:	ldr	r3, [r5, #48]	; 0x30
   145fc:	mov	r2, #7
   14600:	mov	r1, #0
   14604:	strh	r2, [r9, #56]	; 0x38
   14608:	ldr	r0, [sp, #4]
   1460c:	str	r1, [sp, #4]
   14610:	orr	r3, r3, #8192	; 0x2000
   14614:	str	r3, [r5, #48]	; 0x30
   14618:	bl	133b4 <__assert_fail@plt+0x1b88>
   1461c:	b	14288 <__assert_fail@plt+0x2a5c>
   14620:	movw	r3, #40864	; 0x9fa0
   14624:	cmp	r0, r3
   14628:	beq	1463c <__assert_fail@plt+0x2e10>
   1462c:	movw	r3, #16719	; 0x414f
   14630:	movt	r3, #21318	; 0x5346
   14634:	cmp	r0, r3
   14638:	bne	142f8 <__assert_fail@plt+0x2acc>
   1463c:	ldr	r0, [sp, #60]	; 0x3c
   14640:	b	140c0 <__assert_fail@plt+0x2894>
   14644:	ldr	r9, [sp, #8]
   14648:	mov	r0, r4
   1464c:	bl	130e8 <__assert_fail@plt+0x18bc>
   14650:	ldr	r0, [sp, #4]
   14654:	bl	133b4 <__assert_fail@plt+0x1b88>
   14658:	ldr	r0, [r9, #12]
   1465c:	bl	11814 <closedir@plt>
   14660:	ldr	r3, [r5, #48]	; 0x30
   14664:	mov	r2, #0
   14668:	mov	r0, #7
   1466c:	mov	r1, #36	; 0x24
   14670:	str	r2, [sp, #4]
   14674:	str	r2, [r9, #12]
   14678:	strh	r0, [r9, #56]	; 0x38
   1467c:	orr	r3, r3, #8192	; 0x2000
   14680:	str	r3, [r5, #48]	; 0x30
   14684:	str	r1, [r8]
   14688:	b	14288 <__assert_fail@plt+0x2a5c>
   1468c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14690:	bic	r5, r1, #4080	; 0xff0
   14694:	bic	r5, r5, #15
   14698:	strd	r6, [sp, #8]
   1469c:	cmp	r5, #0
   146a0:	strd	r8, [sp, #16]
   146a4:	strd	sl, [sp, #24]
   146a8:	str	lr, [sp, #32]
   146ac:	sub	sp, sp, #12
   146b0:	bne	149cc <__assert_fail@plt+0x31a0>
   146b4:	and	r3, r1, #516	; 0x204
   146b8:	mov	r7, r1
   146bc:	cmp	r3, #516	; 0x204
   146c0:	beq	14968 <__assert_fail@plt+0x313c>
   146c4:	ands	r5, r1, #18
   146c8:	beq	14968 <__assert_fail@plt+0x313c>
   146cc:	mov	r6, r0
   146d0:	mov	r1, #96	; 0x60
   146d4:	mov	r0, #1
   146d8:	mov	r9, r2
   146dc:	bl	19f80 <lchmod@@Base+0x3824>
   146e0:	subs	r5, r0, #0
   146e4:	beq	14920 <__assert_fail@plt+0x30f4>
   146e8:	tst	r7, #2
   146ec:	mvn	r2, #99	; 0x63
   146f0:	bicne	r3, r7, #512	; 0x200
   146f4:	orrne	r3, r3, #4
   146f8:	streq	r7, [r5, #48]	; 0x30
   146fc:	str	r2, [r5, #32]
   14700:	strne	r3, [r5, #48]	; 0x30
   14704:	ldr	r3, [r6]
   14708:	str	r9, [r5, #44]	; 0x2c
   1470c:	cmp	r3, #0
   14710:	beq	149e0 <__assert_fail@plt+0x31b4>
   14714:	mov	r8, r6
   14718:	mov	r4, #0
   1471c:	mov	r0, r3
   14720:	bl	11658 <strlen@plt>
   14724:	ldr	r3, [r8, #4]!
   14728:	cmp	r4, r0
   1472c:	movcc	r4, r0
   14730:	cmp	r3, #0
   14734:	bne	1471c <__assert_fail@plt+0x2ef0>
   14738:	add	r2, r4, #1
   1473c:	cmp	r2, #4096	; 0x1000
   14740:	movcc	r2, #4096	; 0x1000
   14744:	add	r1, r5, #36	; 0x24
   14748:	add	r0, r5, #24
   1474c:	bl	137b0 <__assert_fail@plt+0x1f84>
   14750:	subs	fp, r0, #0
   14754:	beq	14958 <__assert_fail@plt+0x312c>
   14758:	ldr	sl, [r6]
   1475c:	cmp	sl, #0
   14760:	beq	149bc <__assert_fail@plt+0x3190>
   14764:	movw	r1, #45460	; 0xb194
   14768:	movt	r1, #1
   1476c:	mov	r2, #0
   14770:	mov	r0, r5
   14774:	bl	13324 <__assert_fail@plt+0x1af8>
   14778:	subs	sl, r0, #0
   1477c:	beq	14950 <__assert_fail@plt+0x3124>
   14780:	mvn	r3, #0
   14784:	cmp	r9, #0
   14788:	ldr	r4, [r6]
   1478c:	str	r3, [sl, #48]	; 0x30
   14790:	beq	1479c <__assert_fail@plt+0x2f70>
   14794:	ldr	fp, [r5, #48]	; 0x30
   14798:	ubfx	fp, fp, #10, #1
   1479c:	cmp	r4, #0
   147a0:	beq	14a1c <__assert_fail@plt+0x31f0>
   147a4:	eor	r7, r7, #2048	; 0x800
   147a8:	mov	r3, #0
   147ac:	ubfx	r2, r7, #11, #1
   147b0:	mov	r8, r3
   147b4:	mov	r7, r3
   147b8:	strd	r2, [sp]
   147bc:	b	147f4 <__assert_fail@plt+0x2fc8>
   147c0:	mov	r3, #11
   147c4:	mov	r2, #2
   147c8:	cmp	r9, r1
   147cc:	strh	r3, [r4, #56]	; 0x38
   147d0:	mov	r3, #0
   147d4:	strd	r2, [r4, #112]	; 0x70
   147d8:	beq	149a8 <__assert_fail@plt+0x317c>
   147dc:	str	r7, [r4, #8]
   147e0:	mov	r7, r4
   147e4:	ldr	r4, [r6, #4]!
   147e8:	add	r8, r8, #1
   147ec:	cmp	r4, #0
   147f0:	beq	148a0 <__assert_fail@plt+0x3074>
   147f4:	mov	r0, r4
   147f8:	bl	11658 <strlen@plt>
   147fc:	ldr	r3, [sp]
   14800:	mov	r2, r0
   14804:	cmp	r0, #2
   14808:	movls	r3, #0
   1480c:	andhi	r3, r3, #1
   14810:	cmp	r3, #0
   14814:	bne	14978 <__assert_fail@plt+0x314c>
   14818:	mov	r1, r4
   1481c:	mov	r0, r5
   14820:	bl	13324 <__assert_fail@plt+0x1af8>
   14824:	subs	r4, r0, #0
   14828:	beq	14940 <__assert_fail@plt+0x3114>
   1482c:	add	r2, r4, #168	; 0xa8
   14830:	cmp	r7, #0
   14834:	moveq	r3, #0
   14838:	andne	r3, fp, #1
   1483c:	str	sl, [r4, #4]
   14840:	mov	r1, #0
   14844:	cmp	r3, #0
   14848:	str	r2, [r4, #24]
   1484c:	str	r1, [r4, #48]	; 0x30
   14850:	bne	147c0 <__assert_fail@plt+0x2f94>
   14854:	mov	r2, r4
   14858:	ldr	r0, [r5, #32]
   1485c:	ldr	r1, [r5, #48]	; 0x30
   14860:	bl	13654 <__assert_fail@plt+0x1e28>
   14864:	cmp	r9, #0
   14868:	strh	r0, [r4, #56]	; 0x38
   1486c:	bne	147dc <__assert_fail@plt+0x2fb0>
   14870:	cmp	r7, #0
   14874:	str	r9, [r4, #8]
   14878:	moveq	r7, r4
   1487c:	streq	r4, [sp, #4]
   14880:	beq	147e4 <__assert_fail@plt+0x2fb8>
   14884:	ldr	r3, [sp, #4]
   14888:	str	r4, [sp, #4]
   1488c:	str	r4, [r3, #8]
   14890:	ldr	r4, [r6, #4]!
   14894:	add	r8, r8, #1
   14898:	cmp	r4, #0
   1489c:	bne	147f4 <__assert_fail@plt+0x2fc8>
   148a0:	cmp	r9, #0
   148a4:	cmpne	r8, #1
   148a8:	bls	148c0 <__assert_fail@plt+0x3094>
   148ac:	mov	r1, r7
   148b0:	mov	r2, r8
   148b4:	mov	r0, r5
   148b8:	bl	13230 <__assert_fail@plt+0x1a04>
   148bc:	mov	r7, r0
   148c0:	movw	r1, #45460	; 0xb194
   148c4:	movt	r1, #1
   148c8:	mov	r2, #0
   148cc:	mov	r0, r5
   148d0:	bl	13324 <__assert_fail@plt+0x1af8>
   148d4:	cmp	r0, #0
   148d8:	str	r0, [r5]
   148dc:	beq	14940 <__assert_fail@plt+0x3114>
   148e0:	mov	r2, #1
   148e4:	mov	r3, #9
   148e8:	str	r7, [r0, #8]
   148ec:	add	r1, r5, #56	; 0x38
   148f0:	str	r2, [r0, #48]	; 0x30
   148f4:	strh	r3, [r0, #56]	; 0x38
   148f8:	ldr	r0, [r5, #48]	; 0x30
   148fc:	bl	13840 <__assert_fail@plt+0x2014>
   14900:	cmp	r0, #0
   14904:	beq	14940 <__assert_fail@plt+0x3114>
   14908:	ldr	r1, [r5, #48]	; 0x30
   1490c:	tst	r1, #516	; 0x204
   14910:	beq	149e8 <__assert_fail@plt+0x31bc>
   14914:	mvn	r1, #0
   14918:	add	r0, r5, #60	; 0x3c
   1491c:	bl	16690 <__assert_fail@plt+0x4e64>
   14920:	mov	r0, r5
   14924:	add	sp, sp, #12
   14928:	ldrd	r4, [sp]
   1492c:	ldrd	r6, [sp, #8]
   14930:	ldrd	r8, [sp, #16]
   14934:	ldrd	sl, [sp, #24]
   14938:	add	sp, sp, #32
   1493c:	pop	{pc}		; (ldr pc, [sp], #4)
   14940:	mov	r0, r7
   14944:	bl	133b4 <__assert_fail@plt+0x1b88>
   14948:	mov	r0, sl
   1494c:	bl	130e8 <__assert_fail@plt+0x18bc>
   14950:	ldr	r0, [r5, #24]
   14954:	bl	130e8 <__assert_fail@plt+0x18bc>
   14958:	mov	r0, r5
   1495c:	mov	r5, #0
   14960:	bl	130e8 <__assert_fail@plt+0x18bc>
   14964:	b	14920 <__assert_fail@plt+0x30f4>
   14968:	bl	11688 <__errno_location@plt>
   1496c:	mov	r3, #22
   14970:	str	r3, [r0]
   14974:	b	14920 <__assert_fail@plt+0x30f4>
   14978:	sub	r3, r0, #1
   1497c:	ldrb	r1, [r4, r3]
   14980:	add	r3, r4, r3
   14984:	cmp	r1, #47	; 0x2f
   14988:	bne	14818 <__assert_fail@plt+0x2fec>
   1498c:	ldrb	r1, [r3, #-1]!
   14990:	cmp	r1, #47	; 0x2f
   14994:	bne	14818 <__assert_fail@plt+0x2fec>
   14998:	sub	r2, r2, #1
   1499c:	cmp	r2, #1
   149a0:	bne	1498c <__assert_fail@plt+0x3160>
   149a4:	b	14818 <__assert_fail@plt+0x2fec>
   149a8:	ldr	r3, [sp, #4]
   149ac:	str	r4, [sp, #4]
   149b0:	str	r9, [r4, #8]
   149b4:	str	r4, [r3, #8]
   149b8:	b	14890 <__assert_fail@plt+0x3064>
   149bc:	cmp	r9, #0
   149c0:	beq	14a14 <__assert_fail@plt+0x31e8>
   149c4:	mov	r4, sl
   149c8:	b	14794 <__assert_fail@plt+0x2f68>
   149cc:	bl	11688 <__errno_location@plt>
   149d0:	mov	r3, #22
   149d4:	mov	r5, #0
   149d8:	str	r3, [r0]
   149dc:	b	14920 <__assert_fail@plt+0x30f4>
   149e0:	mov	r2, #4096	; 0x1000
   149e4:	b	14744 <__assert_fail@plt+0x2f18>
   149e8:	movw	r2, #45280	; 0xb0e0
   149ec:	movt	r2, #1
   149f0:	ldr	r0, [r5, #32]
   149f4:	bl	138d0 <__assert_fail@plt+0x20a4>
   149f8:	cmp	r0, #0
   149fc:	str	r0, [r5, #28]
   14a00:	bge	14914 <__assert_fail@plt+0x30e8>
   14a04:	ldr	r3, [r5, #48]	; 0x30
   14a08:	orr	r3, r3, #4
   14a0c:	str	r3, [r5, #48]	; 0x30
   14a10:	b	14914 <__assert_fail@plt+0x30e8>
   14a14:	mov	r7, sl
   14a18:	b	148c0 <__assert_fail@plt+0x3094>
   14a1c:	mov	r7, r4
   14a20:	b	148c0 <__assert_fail@plt+0x3094>
   14a24:	ldr	r3, [r0]
   14a28:	strd	r4, [sp, #-16]!
   14a2c:	mov	r5, r0
   14a30:	str	r6, [sp, #8]
   14a34:	str	lr, [sp, #12]
   14a38:	cmp	r3, #0
   14a3c:	beq	14a78 <__assert_fail@plt+0x324c>
   14a40:	ldr	r2, [r3, #48]	; 0x30
   14a44:	cmp	r2, #0
   14a48:	blt	14b98 <__assert_fail@plt+0x336c>
   14a4c:	ldr	r4, [r3, #8]
   14a50:	mov	r0, r3
   14a54:	cmp	r4, #0
   14a58:	ldreq	r4, [r3, #4]
   14a5c:	bl	130e8 <__assert_fail@plt+0x18bc>
   14a60:	ldr	r2, [r4, #48]	; 0x30
   14a64:	mov	r3, r4
   14a68:	cmp	r2, #0
   14a6c:	bge	14a4c <__assert_fail@plt+0x3220>
   14a70:	mov	r0, r4
   14a74:	bl	130e8 <__assert_fail@plt+0x18bc>
   14a78:	ldr	r0, [r5, #4]
   14a7c:	cmp	r0, #0
   14a80:	beq	14a88 <__assert_fail@plt+0x325c>
   14a84:	bl	133b4 <__assert_fail@plt+0x1b88>
   14a88:	ldr	r0, [r5, #8]
   14a8c:	bl	130e8 <__assert_fail@plt+0x18bc>
   14a90:	ldr	r0, [r5, #24]
   14a94:	bl	130e8 <__assert_fail@plt+0x18bc>
   14a98:	ldr	r3, [r5, #48]	; 0x30
   14a9c:	tst	r3, #512	; 0x200
   14aa0:	bne	14b0c <__assert_fail@plt+0x32e0>
   14aa4:	tst	r3, #4
   14aa8:	beq	14b38 <__assert_fail@plt+0x330c>
   14aac:	mov	r4, #0
   14ab0:	add	r0, r5, #60	; 0x3c
   14ab4:	bl	133fc <__assert_fail@plt+0x1bd0>
   14ab8:	ldr	r0, [r5, #52]	; 0x34
   14abc:	cmp	r0, #0
   14ac0:	beq	14ac8 <__assert_fail@plt+0x329c>
   14ac4:	bl	16034 <__assert_fail@plt+0x4808>
   14ac8:	ldr	r3, [r5, #48]	; 0x30
   14acc:	movw	r2, #258	; 0x102
   14ad0:	ldr	r0, [r5, #56]	; 0x38
   14ad4:	tst	r2, r3
   14ad8:	beq	14b30 <__assert_fail@plt+0x3304>
   14adc:	cmp	r0, #0
   14ae0:	beq	14ae8 <__assert_fail@plt+0x32bc>
   14ae4:	bl	16034 <__assert_fail@plt+0x4808>
   14ae8:	mov	r0, r5
   14aec:	bl	130e8 <__assert_fail@plt+0x18bc>
   14af0:	cmp	r4, #0
   14af4:	bne	14ba0 <__assert_fail@plt+0x3374>
   14af8:	mov	r0, r4
   14afc:	ldrd	r4, [sp]
   14b00:	ldr	r6, [sp, #8]
   14b04:	add	sp, sp, #12
   14b08:	pop	{pc}		; (ldr pc, [sp], #4)
   14b0c:	ldr	r0, [r5, #32]
   14b10:	cmp	r0, #0
   14b14:	blt	14aac <__assert_fail@plt+0x3280>
   14b18:	bl	117e4 <close@plt>
   14b1c:	cmp	r0, #0
   14b20:	beq	14aac <__assert_fail@plt+0x3280>
   14b24:	bl	11688 <__errno_location@plt>
   14b28:	ldr	r4, [r0]
   14b2c:	b	14ab0 <__assert_fail@plt+0x3284>
   14b30:	bl	130e8 <__assert_fail@plt+0x18bc>
   14b34:	b	14ae8 <__assert_fail@plt+0x32bc>
   14b38:	ldr	r0, [r5, #28]
   14b3c:	bl	11760 <fchdir@plt>
   14b40:	cmp	r0, #0
   14b44:	bne	14b68 <__assert_fail@plt+0x333c>
   14b48:	ldr	r0, [r5, #28]
   14b4c:	bl	117e4 <close@plt>
   14b50:	cmp	r0, #0
   14b54:	beq	14aac <__assert_fail@plt+0x3280>
   14b58:	bl	11688 <__errno_location@plt>
   14b5c:	mov	r6, r0
   14b60:	ldr	r4, [r6]
   14b64:	b	14ab0 <__assert_fail@plt+0x3284>
   14b68:	bl	11688 <__errno_location@plt>
   14b6c:	mov	r6, r0
   14b70:	ldr	r0, [r5, #28]
   14b74:	ldr	r4, [r6]
   14b78:	bl	117e4 <close@plt>
   14b7c:	adds	r3, r0, #0
   14b80:	movne	r3, #1
   14b84:	cmp	r4, #0
   14b88:	movne	r3, #0
   14b8c:	cmp	r3, #0
   14b90:	beq	14ab0 <__assert_fail@plt+0x3284>
   14b94:	b	14b60 <__assert_fail@plt+0x3334>
   14b98:	mov	r4, r3
   14b9c:	b	14a70 <__assert_fail@plt+0x3244>
   14ba0:	bl	11688 <__errno_location@plt>
   14ba4:	str	r4, [r0]
   14ba8:	mvn	r4, #0
   14bac:	b	14af8 <__assert_fail@plt+0x32cc>
   14bb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14bb4:	ldr	r4, [r0]
   14bb8:	strd	r6, [sp, #8]
   14bbc:	str	r8, [sp, #16]
   14bc0:	str	lr, [sp, #20]
   14bc4:	cmp	r4, #0
   14bc8:	beq	14ce8 <__assert_fail@plt+0x34bc>
   14bcc:	ldr	r1, [r0, #48]	; 0x30
   14bd0:	ands	r3, r1, #8192	; 0x2000
   14bd4:	bne	14ce8 <__assert_fail@plt+0x34bc>
   14bd8:	ldrh	r2, [r4, #60]	; 0x3c
   14bdc:	mov	r8, r0
   14be0:	mov	r0, #3
   14be4:	strh	r0, [r4, #60]	; 0x3c
   14be8:	cmp	r2, #1
   14bec:	beq	14f94 <__assert_fail@plt+0x3768>
   14bf0:	cmp	r2, #2
   14bf4:	ldrh	r3, [r4, #56]	; 0x38
   14bf8:	beq	14d04 <__assert_fail@plt+0x34d8>
   14bfc:	cmp	r3, #1
   14c00:	bne	14c30 <__assert_fail@plt+0x3404>
   14c04:	b	14db0 <__assert_fail@plt+0x3584>
   14c08:	mov	r0, r4
   14c0c:	str	r5, [r8]
   14c10:	bl	130e8 <__assert_fail@plt+0x18bc>
   14c14:	ldr	r4, [r5, #48]	; 0x30
   14c18:	cmp	r4, #0
   14c1c:	beq	14df8 <__assert_fail@plt+0x35cc>
   14c20:	ldrh	r3, [r5, #60]	; 0x3c
   14c24:	mov	r4, r5
   14c28:	cmp	r3, #4
   14c2c:	bne	14eb0 <__assert_fail@plt+0x3684>
   14c30:	ldr	r5, [r4, #8]
   14c34:	cmp	r5, #0
   14c38:	bne	14c08 <__assert_fail@plt+0x33dc>
   14c3c:	ldr	r6, [r4, #4]
   14c40:	ldr	r3, [r6, #12]
   14c44:	cmp	r3, #0
   14c48:	bne	150b8 <__assert_fail@plt+0x388c>
   14c4c:	mov	r0, r4
   14c50:	str	r6, [r8]
   14c54:	bl	130e8 <__assert_fail@plt+0x18bc>
   14c58:	ldr	r3, [r6, #48]	; 0x30
   14c5c:	cmn	r3, #1
   14c60:	beq	1505c <__assert_fail@plt+0x3830>
   14c64:	ldrh	r3, [r6, #56]	; 0x38
   14c68:	cmp	r3, #11
   14c6c:	beq	14f90 <__assert_fail@plt+0x3764>
   14c70:	ldr	r2, [r8, #24]
   14c74:	mov	r1, #0
   14c78:	ldr	r3, [r6, #40]	; 0x28
   14c7c:	strb	r1, [r2, r3]
   14c80:	ldr	r3, [r6, #48]	; 0x30
   14c84:	cmp	r3, r1
   14c88:	beq	1507c <__assert_fail@plt+0x3850>
   14c8c:	ldrh	r3, [r6, #58]	; 0x3a
   14c90:	tst	r3, #2
   14c94:	bne	15010 <__assert_fail@plt+0x37e4>
   14c98:	tst	r3, #1
   14c9c:	beq	15150 <__assert_fail@plt+0x3924>
   14ca0:	ldrh	r3, [r6, #56]	; 0x38
   14ca4:	ldr	r0, [r8, #48]	; 0x30
   14ca8:	cmp	r3, #2
   14cac:	beq	14cdc <__assert_fail@plt+0x34b0>
   14cb0:	ldr	r3, [r6, #32]
   14cb4:	cmp	r3, #0
   14cb8:	movne	r3, #7
   14cbc:	strhne	r3, [r6, #56]	; 0x38
   14cc0:	bne	14cdc <__assert_fail@plt+0x34b0>
   14cc4:	mov	r3, #6
   14cc8:	mov	r2, r6
   14ccc:	add	r1, r8, #56	; 0x38
   14cd0:	strh	r3, [r6, #56]	; 0x38
   14cd4:	bl	13bf0 <__assert_fail@plt+0x23c4>
   14cd8:	ldr	r0, [r8, #48]	; 0x30
   14cdc:	tst	r0, #8192	; 0x2000
   14ce0:	moveq	r4, r6
   14ce4:	beq	14cec <__assert_fail@plt+0x34c0>
   14ce8:	mov	r4, #0
   14cec:	mov	r0, r4
   14cf0:	ldrd	r4, [sp]
   14cf4:	ldrd	r6, [sp, #8]
   14cf8:	ldr	r8, [sp, #16]
   14cfc:	add	sp, sp, #20
   14d00:	pop	{pc}		; (ldr pc, [sp], #4)
   14d04:	sub	r2, r3, #12
   14d08:	cmp	r2, #1
   14d0c:	bls	14f4c <__assert_fail@plt+0x3720>
   14d10:	cmp	r3, #1
   14d14:	bne	14c30 <__assert_fail@plt+0x3404>
   14d18:	tst	r1, #64	; 0x40
   14d1c:	beq	14d34 <__assert_fail@plt+0x3508>
   14d20:	ldrd	r2, [r8, #16]
   14d24:	ldrd	r6, [r4, #64]	; 0x40
   14d28:	cmp	r7, r3
   14d2c:	cmpeq	r6, r2
   14d30:	bne	14db8 <__assert_fail@plt+0x358c>
   14d34:	ldr	r0, [r8, #4]
   14d38:	cmp	r0, #0
   14d3c:	beq	14fbc <__assert_fail@plt+0x3790>
   14d40:	tst	r1, #4096	; 0x1000
   14d44:	bne	14fa8 <__assert_fail@plt+0x377c>
   14d48:	mvn	r2, #0
   14d4c:	mov	r1, r4
   14d50:	ldr	r3, [r4, #24]
   14d54:	mov	r0, r8
   14d58:	bl	13900 <__assert_fail@plt+0x20d4>
   14d5c:	cmp	r0, #0
   14d60:	beq	15044 <__assert_fail@plt+0x3818>
   14d64:	bl	11688 <__errno_location@plt>
   14d68:	ldrh	r3, [r4, #58]	; 0x3a
   14d6c:	ldr	r2, [r0]
   14d70:	orr	r3, r3, #1
   14d74:	str	r2, [r4, #32]
   14d78:	strh	r3, [r4, #58]	; 0x3a
   14d7c:	ldr	r4, [r8, #4]
   14d80:	cmp	r4, #0
   14d84:	beq	14da4 <__assert_fail@plt+0x3578>
   14d88:	mov	r3, r4
   14d8c:	ldr	r2, [r3, #4]
   14d90:	ldr	r2, [r2, #24]
   14d94:	str	r2, [r3, #24]
   14d98:	ldr	r3, [r3, #8]
   14d9c:	cmp	r3, #0
   14da0:	bne	14d8c <__assert_fail@plt+0x3560>
   14da4:	mov	r3, #0
   14da8:	str	r3, [r8, #4]
   14dac:	b	14eb8 <__assert_fail@plt+0x368c>
   14db0:	cmp	r2, #4
   14db4:	bne	14d18 <__assert_fail@plt+0x34ec>
   14db8:	ldrh	r3, [r4, #58]	; 0x3a
   14dbc:	tst	r3, #2
   14dc0:	bne	150f8 <__assert_fail@plt+0x38cc>
   14dc4:	ldr	r0, [r8, #4]
   14dc8:	cmp	r0, #0
   14dcc:	beq	14ddc <__assert_fail@plt+0x35b0>
   14dd0:	bl	133b4 <__assert_fail@plt+0x1b88>
   14dd4:	mov	r3, #0
   14dd8:	str	r3, [r8, #4]
   14ddc:	mov	r3, #6
   14de0:	mov	r2, r4
   14de4:	ldr	r0, [r8, #48]	; 0x30
   14de8:	add	r1, r8, #56	; 0x38
   14dec:	strh	r3, [r4, #56]	; 0x38
   14df0:	bl	13bf0 <__assert_fail@plt+0x23c4>
   14df4:	b	14cec <__assert_fail@plt+0x34c0>
   14df8:	mov	r0, r8
   14dfc:	bl	135f0 <__assert_fail@plt+0x1dc4>
   14e00:	ldr	r3, [r8, #48]	; 0x30
   14e04:	cmp	r0, #0
   14e08:	orrne	r3, r3, #8192	; 0x2000
   14e0c:	strne	r3, [r8, #48]	; 0x30
   14e10:	bne	14cec <__assert_fail@plt+0x34c0>
   14e14:	movw	r2, #258	; 0x102
   14e18:	ldr	r0, [r8, #56]	; 0x38
   14e1c:	tst	r2, r3
   14e20:	beq	150f0 <__assert_fail@plt+0x38c4>
   14e24:	cmp	r0, #0
   14e28:	beq	14e30 <__assert_fail@plt+0x3604>
   14e2c:	bl	16034 <__assert_fail@plt+0x4808>
   14e30:	ldr	r2, [r5, #52]	; 0x34
   14e34:	add	r4, r5, #168	; 0xa8
   14e38:	mov	r1, r4
   14e3c:	ldr	r0, [r8, #24]
   14e40:	str	r2, [r5, #40]	; 0x28
   14e44:	add	r2, r2, #1
   14e48:	bl	11484 <memmove@plt>
   14e4c:	mov	r0, r4
   14e50:	mov	r1, #47	; 0x2f
   14e54:	bl	11718 <strrchr@plt>
   14e58:	cmp	r0, #0
   14e5c:	beq	14e8c <__assert_fail@plt+0x3660>
   14e60:	cmp	r4, r0
   14e64:	beq	1504c <__assert_fail@plt+0x3820>
   14e68:	add	r6, r0, #1
   14e6c:	mov	r0, r6
   14e70:	bl	11658 <strlen@plt>
   14e74:	mov	r7, r0
   14e78:	mov	r1, r6
   14e7c:	mov	r0, r4
   14e80:	add	r2, r7, #1
   14e84:	bl	11484 <memmove@plt>
   14e88:	str	r7, [r5, #52]	; 0x34
   14e8c:	ldr	r3, [r8, #24]
   14e90:	add	r1, r8, #56	; 0x38
   14e94:	mov	r4, r5
   14e98:	ldr	r0, [r8, #48]	; 0x30
   14e9c:	str	r3, [r5, #24]
   14ea0:	str	r3, [r5, #28]
   14ea4:	bl	13840 <__assert_fail@plt+0x2014>
   14ea8:	ldrh	r0, [r5, #56]	; 0x38
   14eac:	b	14efc <__assert_fail@plt+0x36d0>
   14eb0:	cmp	r3, #2
   14eb4:	beq	15120 <__assert_fail@plt+0x38f4>
   14eb8:	ldr	r0, [r4, #4]
   14ebc:	mov	ip, #47	; 0x2f
   14ec0:	add	r1, r4, #168	; 0xa8
   14ec4:	ldr	r3, [r8, #24]
   14ec8:	ldr	lr, [r0, #28]
   14ecc:	ldr	r2, [r0, #40]	; 0x28
   14ed0:	sub	r0, r2, #1
   14ed4:	ldrb	lr, [lr, r0]
   14ed8:	cmp	lr, ip
   14edc:	movne	r0, r2
   14ee0:	strb	ip, [r3, r0]
   14ee4:	add	r0, r3, r0
   14ee8:	ldr	r2, [r4, #52]	; 0x34
   14eec:	add	r0, r0, #1
   14ef0:	add	r2, r2, #1
   14ef4:	bl	11484 <memmove@plt>
   14ef8:	ldrh	r0, [r4, #56]	; 0x38
   14efc:	cmp	r0, #11
   14f00:	str	r4, [r8]
   14f04:	beq	14f74 <__assert_fail@plt+0x3748>
   14f08:	cmp	r0, #1
   14f0c:	bne	14cec <__assert_fail@plt+0x34c0>
   14f10:	ldr	r3, [r4, #48]	; 0x30
   14f14:	add	r1, r8, #56	; 0x38
   14f18:	ldr	r0, [r8, #48]	; 0x30
   14f1c:	cmp	r3, #0
   14f20:	ldrdeq	r2, [r4, #64]	; 0x40
   14f24:	strdeq	r2, [r8, #16]
   14f28:	mov	r2, r4
   14f2c:	bl	13b1c <__assert_fail@plt+0x22f0>
   14f30:	subs	r5, r0, #0
   14f34:	bne	14cec <__assert_fail@plt+0x34c0>
   14f38:	bl	11688 <__errno_location@plt>
   14f3c:	mov	r3, #12
   14f40:	mov	r4, r5
   14f44:	str	r3, [r0]
   14f48:	b	14cec <__assert_fail@plt+0x34c0>
   14f4c:	mov	r3, #1
   14f50:	mov	r2, r4
   14f54:	ldr	r0, [r8, #32]
   14f58:	bl	13654 <__assert_fail@plt+0x1e28>
   14f5c:	cmp	r0, #1
   14f60:	strh	r0, [r4, #56]	; 0x38
   14f64:	beq	15198 <__assert_fail@plt+0x396c>
   14f68:	cmp	r0, #11
   14f6c:	str	r4, [r8]
   14f70:	bne	14cec <__assert_fail@plt+0x34c0>
   14f74:	ldrd	r2, [r4, #112]	; 0x70
   14f78:	cmp	r3, #0
   14f7c:	cmpeq	r2, #2
   14f80:	beq	15104 <__assert_fail@plt+0x38d8>
   14f84:	cmp	r3, #0
   14f88:	cmpeq	r2, #1
   14f8c:	beq	14cec <__assert_fail@plt+0x34c0>
   14f90:	bl	117d8 <abort@plt>
   14f94:	mov	r2, r4
   14f98:	ldr	r0, [r8, #32]
   14f9c:	bl	13654 <__assert_fail@plt+0x1e28>
   14fa0:	strh	r0, [r4, #56]	; 0x38
   14fa4:	b	14cec <__assert_fail@plt+0x34c0>
   14fa8:	bic	r1, r1, #4096	; 0x1000
   14fac:	str	r1, [r8, #48]	; 0x30
   14fb0:	bl	133b4 <__assert_fail@plt+0x1b88>
   14fb4:	mov	r3, #0
   14fb8:	str	r3, [r8, #4]
   14fbc:	mov	r1, #3
   14fc0:	mov	r0, r8
   14fc4:	bl	13cbc <__assert_fail@plt+0x2490>
   14fc8:	cmp	r0, #0
   14fcc:	str	r0, [r8, #4]
   14fd0:	movne	r4, r0
   14fd4:	bne	14da4 <__assert_fail@plt+0x3578>
   14fd8:	ldr	r0, [r8, #48]	; 0x30
   14fdc:	tst	r0, #8192	; 0x2000
   14fe0:	bne	14ce8 <__assert_fail@plt+0x34bc>
   14fe4:	ldr	r3, [r4, #32]
   14fe8:	cmp	r3, #0
   14fec:	beq	15000 <__assert_fail@plt+0x37d4>
   14ff0:	ldrh	r3, [r4, #56]	; 0x38
   14ff4:	cmp	r3, #4
   14ff8:	movne	r3, #7
   14ffc:	strhne	r3, [r4, #56]	; 0x38
   15000:	add	r1, r8, #56	; 0x38
   15004:	mov	r2, r4
   15008:	bl	13bf0 <__assert_fail@plt+0x23c4>
   1500c:	b	14cec <__assert_fail@plt+0x34c0>
   15010:	ldr	r3, [r8, #48]	; 0x30
   15014:	ldr	r0, [r6, #36]	; 0x24
   15018:	tst	r3, #4
   1501c:	bne	1503c <__assert_fail@plt+0x3810>
   15020:	tst	r3, #512	; 0x200
   15024:	beq	15184 <__assert_fail@plt+0x3958>
   15028:	mov	r1, r0
   1502c:	mov	r2, #1
   15030:	mov	r0, r8
   15034:	bl	13560 <__assert_fail@plt+0x1d34>
   15038:	ldr	r0, [r6, #36]	; 0x24
   1503c:	bl	117e4 <close@plt>
   15040:	b	14ca0 <__assert_fail@plt+0x3474>
   15044:	ldr	r4, [r8, #4]
   15048:	b	14da4 <__assert_fail@plt+0x3578>
   1504c:	ldrb	r3, [r4, #1]
   15050:	cmp	r3, #0
   15054:	beq	14e8c <__assert_fail@plt+0x3660>
   15058:	b	14e68 <__assert_fail@plt+0x363c>
   1505c:	mov	r0, r6
   15060:	bl	130e8 <__assert_fail@plt+0x18bc>
   15064:	bl	11688 <__errno_location@plt>
   15068:	mov	r3, #0
   1506c:	mov	r4, r3
   15070:	str	r3, [r0]
   15074:	str	r3, [r8]
   15078:	b	14cec <__assert_fail@plt+0x34c0>
   1507c:	mov	r0, r8
   15080:	bl	135f0 <__assert_fail@plt+0x1dc4>
   15084:	cmp	r0, #0
   15088:	beq	14ca0 <__assert_fail@plt+0x3474>
   1508c:	bl	11688 <__errno_location@plt>
   15090:	ldr	r3, [r8, #48]	; 0x30
   15094:	ldr	r2, [r0]
   15098:	orr	r3, r3, #8192	; 0x2000
   1509c:	str	r2, [r6, #32]
   150a0:	str	r3, [r8, #48]	; 0x30
   150a4:	ldrh	r3, [r6, #56]	; 0x38
   150a8:	cmp	r3, #2
   150ac:	beq	14ce8 <__assert_fail@plt+0x34bc>
   150b0:	ldr	r0, [r8, #48]	; 0x30
   150b4:	b	14cb0 <__assert_fail@plt+0x3484>
   150b8:	ldr	r2, [r8, #24]
   150bc:	mov	r1, #3
   150c0:	mov	r0, r8
   150c4:	ldr	r3, [r6, #40]	; 0x28
   150c8:	str	r6, [r8]
   150cc:	strb	r5, [r2, r3]
   150d0:	bl	13cbc <__assert_fail@plt+0x2490>
   150d4:	subs	r3, r0, #0
   150d8:	bne	15174 <__assert_fail@plt+0x3948>
   150dc:	ldr	r3, [r8, #48]	; 0x30
   150e0:	tst	r3, #8192	; 0x2000
   150e4:	bne	14ce8 <__assert_fail@plt+0x34bc>
   150e8:	ldr	r6, [r4, #4]
   150ec:	b	14c4c <__assert_fail@plt+0x3420>
   150f0:	bl	130e8 <__assert_fail@plt+0x18bc>
   150f4:	b	14e30 <__assert_fail@plt+0x3604>
   150f8:	ldr	r0, [r4, #36]	; 0x24
   150fc:	bl	117e4 <close@plt>
   15100:	b	14dc4 <__assert_fail@plt+0x3598>
   15104:	mov	r3, #0
   15108:	mov	r2, r4
   1510c:	ldr	r0, [r8, #32]
   15110:	ldr	r1, [r8, #48]	; 0x30
   15114:	bl	13654 <__assert_fail@plt+0x1e28>
   15118:	strh	r0, [r4, #56]	; 0x38
   1511c:	b	14f08 <__assert_fail@plt+0x36dc>
   15120:	mov	r3, #1
   15124:	mov	r2, r5
   15128:	ldr	r0, [r8, #32]
   1512c:	ldr	r1, [r8, #48]	; 0x30
   15130:	bl	13654 <__assert_fail@plt+0x1e28>
   15134:	cmp	r0, #1
   15138:	strh	r0, [r5, #56]	; 0x38
   1513c:	beq	151d8 <__assert_fail@plt+0x39ac>
   15140:	mov	r3, #3
   15144:	mov	r4, r5
   15148:	strh	r3, [r5, #60]	; 0x3c
   1514c:	b	14eb8 <__assert_fail@plt+0x368c>
   15150:	movw	r3, #45356	; 0xb12c
   15154:	movt	r3, #1
   15158:	ldr	r1, [r6, #4]
   1515c:	mvn	r2, #0
   15160:	mov	r0, r8
   15164:	bl	13900 <__assert_fail@plt+0x20d4>
   15168:	cmp	r0, #0
   1516c:	beq	14ca0 <__assert_fail@plt+0x3474>
   15170:	b	1508c <__assert_fail@plt+0x3860>
   15174:	mov	r0, r4
   15178:	mov	r4, r3
   1517c:	bl	130e8 <__assert_fail@plt+0x18bc>
   15180:	b	14eb8 <__assert_fail@plt+0x368c>
   15184:	bl	11760 <fchdir@plt>
   15188:	cmp	r0, #0
   1518c:	bne	15210 <__assert_fail@plt+0x39e4>
   15190:	ldr	r0, [r6, #36]	; 0x24
   15194:	b	1503c <__assert_fail@plt+0x3810>
   15198:	ldr	r1, [r8, #48]	; 0x30
   1519c:	tst	r1, #4
   151a0:	strne	r4, [r8]
   151a4:	bne	14f10 <__assert_fail@plt+0x36e4>
   151a8:	movw	r2, #45280	; 0xb0e0
   151ac:	movt	r2, #1
   151b0:	ldr	r0, [r8, #32]
   151b4:	bl	138d0 <__assert_fail@plt+0x20a4>
   151b8:	cmp	r0, #0
   151bc:	str	r0, [r4, #36]	; 0x24
   151c0:	blt	15230 <__assert_fail@plt+0x3a04>
   151c4:	ldrh	r3, [r4, #58]	; 0x3a
   151c8:	ldrh	r0, [r4, #56]	; 0x38
   151cc:	orr	r3, r3, #2
   151d0:	strh	r3, [r4, #58]	; 0x3a
   151d4:	b	14efc <__assert_fail@plt+0x36d0>
   151d8:	ldr	r1, [r8, #48]	; 0x30
   151dc:	tst	r1, #4
   151e0:	bne	15140 <__assert_fail@plt+0x3914>
   151e4:	movw	r2, #45280	; 0xb0e0
   151e8:	movt	r2, #1
   151ec:	ldr	r0, [r8, #32]
   151f0:	bl	138d0 <__assert_fail@plt+0x20a4>
   151f4:	cmp	r0, #0
   151f8:	str	r0, [r5, #36]	; 0x24
   151fc:	blt	1524c <__assert_fail@plt+0x3a20>
   15200:	ldrh	r3, [r5, #58]	; 0x3a
   15204:	orr	r3, r3, #2
   15208:	strh	r3, [r5, #58]	; 0x3a
   1520c:	b	15140 <__assert_fail@plt+0x3914>
   15210:	bl	11688 <__errno_location@plt>
   15214:	ldr	r3, [r8, #48]	; 0x30
   15218:	ldr	r2, [r0]
   1521c:	ldr	r0, [r6, #36]	; 0x24
   15220:	orr	r3, r3, #8192	; 0x2000
   15224:	str	r2, [r6, #32]
   15228:	str	r3, [r8, #48]	; 0x30
   1522c:	b	1503c <__assert_fail@plt+0x3810>
   15230:	bl	11688 <__errno_location@plt>
   15234:	ldr	r3, [r0]
   15238:	mov	r2, #7
   1523c:	str	r3, [r4, #32]
   15240:	strh	r2, [r4, #56]	; 0x38
   15244:	str	r4, [r8]
   15248:	b	14cec <__assert_fail@plt+0x34c0>
   1524c:	bl	11688 <__errno_location@plt>
   15250:	ldr	r3, [r0]
   15254:	mov	r2, #7
   15258:	str	r3, [r5, #32]
   1525c:	strh	r2, [r5, #56]	; 0x38
   15260:	b	15140 <__assert_fail@plt+0x3914>
   15264:	cmp	r2, #4
   15268:	bhi	1527c <__assert_fail@plt+0x3a50>
   1526c:	mov	r3, #0
   15270:	strh	r2, [r1, #60]	; 0x3c
   15274:	mov	r0, r3
   15278:	bx	lr
   1527c:	str	r4, [sp, #-8]!
   15280:	str	lr, [sp, #4]
   15284:	bl	11688 <__errno_location@plt>
   15288:	mov	r2, #22
   1528c:	mov	r3, #1
   15290:	ldr	r4, [sp]
   15294:	add	sp, sp, #4
   15298:	str	r2, [r0]
   1529c:	mov	r0, r3
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   152a8:	mov	r4, r1
   152ac:	mov	r5, r0
   152b0:	strd	r6, [sp, #8]
   152b4:	str	r8, [sp, #16]
   152b8:	str	lr, [sp, #20]
   152bc:	bl	11688 <__errno_location@plt>
   152c0:	bics	r2, r4, #4096	; 0x1000
   152c4:	mov	r7, r0
   152c8:	movne	r3, #22
   152cc:	movne	r0, #0
   152d0:	strne	r3, [r7]
   152d4:	bne	15368 <__assert_fail@plt+0x3b3c>
   152d8:	ldr	r6, [r5]
   152dc:	str	r2, [r7]
   152e0:	ldr	r3, [r5, #48]	; 0x30
   152e4:	ands	r0, r3, #8192	; 0x2000
   152e8:	movne	r0, r2
   152ec:	bne	15368 <__assert_fail@plt+0x3b3c>
   152f0:	ldrh	r3, [r6, #56]	; 0x38
   152f4:	cmp	r3, #9
   152f8:	beq	153d8 <__assert_fail@plt+0x3bac>
   152fc:	cmp	r3, #1
   15300:	bne	15368 <__assert_fail@plt+0x3b3c>
   15304:	ldr	r0, [r5, #4]
   15308:	cmp	r0, #0
   1530c:	beq	15314 <__assert_fail@plt+0x3ae8>
   15310:	bl	133b4 <__assert_fail@plt+0x1b88>
   15314:	cmp	r4, #4096	; 0x1000
   15318:	movne	r4, #1
   1531c:	bne	15330 <__assert_fail@plt+0x3b04>
   15320:	ldr	r3, [r5, #48]	; 0x30
   15324:	mov	r4, #2
   15328:	orr	r3, r3, #4096	; 0x1000
   1532c:	str	r3, [r5, #48]	; 0x30
   15330:	ldr	r3, [r6, #48]	; 0x30
   15334:	cmp	r3, #0
   15338:	bne	15358 <__assert_fail@plt+0x3b2c>
   1533c:	ldr	r3, [r6, #24]
   15340:	ldrb	r3, [r3]
   15344:	cmp	r3, #47	; 0x2f
   15348:	beq	15358 <__assert_fail@plt+0x3b2c>
   1534c:	ldr	r1, [r5, #48]	; 0x30
   15350:	ands	r6, r1, #4
   15354:	beq	1537c <__assert_fail@plt+0x3b50>
   15358:	mov	r1, r4
   1535c:	mov	r0, r5
   15360:	bl	13cbc <__assert_fail@plt+0x2490>
   15364:	str	r0, [r5, #4]
   15368:	ldrd	r4, [sp]
   1536c:	ldrd	r6, [sp, #8]
   15370:	ldr	r8, [sp, #16]
   15374:	add	sp, sp, #20
   15378:	pop	{pc}		; (ldr pc, [sp], #4)
   1537c:	movw	r2, #45280	; 0xb0e0
   15380:	movt	r2, #1
   15384:	ldr	r0, [r5, #32]
   15388:	bl	138d0 <__assert_fail@plt+0x20a4>
   1538c:	subs	r8, r0, #0
   15390:	movlt	r0, r6
   15394:	strlt	r6, [r5, #4]
   15398:	blt	15368 <__assert_fail@plt+0x3b3c>
   1539c:	mov	r1, r4
   153a0:	mov	r0, r5
   153a4:	bl	13cbc <__assert_fail@plt+0x2490>
   153a8:	ldr	r3, [r5, #48]	; 0x30
   153ac:	str	r0, [r5, #4]
   153b0:	ands	r4, r3, #512	; 0x200
   153b4:	bne	153e0 <__assert_fail@plt+0x3bb4>
   153b8:	mov	r0, r8
   153bc:	bl	11760 <fchdir@plt>
   153c0:	cmp	r0, #0
   153c4:	bne	153f4 <__assert_fail@plt+0x3bc8>
   153c8:	mov	r0, r8
   153cc:	bl	117e4 <close@plt>
   153d0:	ldr	r0, [r5, #4]
   153d4:	b	15368 <__assert_fail@plt+0x3b3c>
   153d8:	ldr	r0, [r6, #8]
   153dc:	b	15368 <__assert_fail@plt+0x3b3c>
   153e0:	mov	r1, r8
   153e4:	mov	r2, #1
   153e8:	mov	r0, r5
   153ec:	bl	13560 <__assert_fail@plt+0x1d34>
   153f0:	b	153d0 <__assert_fail@plt+0x3ba4>
   153f4:	ldr	r5, [r7]
   153f8:	mov	r0, r8
   153fc:	bl	117e4 <close@plt>
   15400:	mov	r0, r4
   15404:	str	r5, [r7]
   15408:	b	15368 <__assert_fail@plt+0x3b3c>
   1540c:	andeq	r0, r0, r0
   15410:	cmp	r0, #10
   15414:	movcc	r0, #10
   15418:	orr	r0, r0, #1
   1541c:	cmn	r0, #1
   15420:	bxeq	lr
   15424:	push	{lr}		; (str lr, [sp, #-4]!)
   15428:	movw	lr, #43691	; 0xaaab
   1542c:	movt	lr, #43690	; 0xaaaa
   15430:	umull	r2, r3, lr, r0
   15434:	cmp	r0, #9
   15438:	lsr	r3, r3, #1
   1543c:	add	r3, r3, r3, lsl #1
   15440:	sub	r3, r0, r3
   15444:	bls	15484 <__assert_fail@plt+0x3c58>
   15448:	cmp	r3, #0
   1544c:	beq	1548c <__assert_fail@plt+0x3c60>
   15450:	mov	ip, #16
   15454:	mov	r1, #9
   15458:	mov	r2, #3
   1545c:	b	15468 <__assert_fail@plt+0x3c3c>
   15460:	cmp	r3, #0
   15464:	beq	1548c <__assert_fail@plt+0x3c60>
   15468:	add	r2, r2, #2
   1546c:	add	r1, r1, ip
   15470:	cmp	r1, r0
   15474:	add	ip, ip, #8
   15478:	udiv	r3, r0, r2
   1547c:	mls	r3, r2, r3, r0
   15480:	bcc	15460 <__assert_fail@plt+0x3c34>
   15484:	cmp	r3, #0
   15488:	bne	15498 <__assert_fail@plt+0x3c6c>
   1548c:	add	r0, r0, #2
   15490:	cmn	r0, #1
   15494:	bne	15430 <__assert_fail@plt+0x3c04>
   15498:	pop	{pc}		; (ldr pc, [sp], #4)
   1549c:	ror	r0, r0, #3
   154a0:	udiv	r3, r0, r1
   154a4:	mls	r0, r3, r1, r0
   154a8:	bx	lr
   154ac:	sub	r0, r1, r0
   154b0:	clz	r0, r0
   154b4:	lsr	r0, r0, #5
   154b8:	bx	lr
   154bc:	str	r4, [sp, #-8]!
   154c0:	mov	r4, r0
   154c4:	mov	r0, r1
   154c8:	ldr	r1, [r4, #8]
   154cc:	ldr	r3, [r4, #24]
   154d0:	str	lr, [sp, #4]
   154d4:	blx	r3
   154d8:	ldr	r3, [r4, #8]
   154dc:	cmp	r3, r0
   154e0:	bls	154f8 <__assert_fail@plt+0x3ccc>
   154e4:	ldr	r3, [r4]
   154e8:	ldr	r4, [sp]
   154ec:	add	sp, sp, #4
   154f0:	add	r0, r3, r0, lsl #3
   154f4:	pop	{pc}		; (ldr pc, [sp], #4)
   154f8:	bl	117d8 <abort@plt>
   154fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15500:	mov	r5, r1
   15504:	strd	r6, [sp, #8]
   15508:	mov	r7, r3
   1550c:	mov	r6, r0
   15510:	str	r8, [sp, #16]
   15514:	mov	r8, r2
   15518:	str	lr, [sp, #20]
   1551c:	bl	154bc <__assert_fail@plt+0x3c90>
   15520:	str	r0, [r8]
   15524:	ldr	r1, [r0]
   15528:	cmp	r1, #0
   1552c:	beq	1561c <__assert_fail@plt+0x3df0>
   15530:	cmp	r1, r5
   15534:	mov	r4, r0
   15538:	beq	155e4 <__assert_fail@plt+0x3db8>
   1553c:	mov	r0, r5
   15540:	ldr	r3, [r6, #28]
   15544:	blx	r3
   15548:	cmp	r0, #0
   1554c:	bne	155e0 <__assert_fail@plt+0x3db4>
   15550:	ldr	r3, [r4, #4]
   15554:	cmp	r3, #0
   15558:	beq	1561c <__assert_fail@plt+0x3df0>
   1555c:	ldr	r1, [r3]
   15560:	cmp	r5, r1
   15564:	bne	15588 <__assert_fail@plt+0x3d5c>
   15568:	b	155a4 <__assert_fail@plt+0x3d78>
   1556c:	ldr	r4, [r4, #4]
   15570:	ldr	r3, [r4, #4]
   15574:	cmp	r3, #0
   15578:	beq	1561c <__assert_fail@plt+0x3df0>
   1557c:	ldr	r1, [r3]
   15580:	cmp	r1, r5
   15584:	beq	155a4 <__assert_fail@plt+0x3d78>
   15588:	mov	r0, r5
   1558c:	ldr	r3, [r6, #28]
   15590:	blx	r3
   15594:	cmp	r0, #0
   15598:	beq	1556c <__assert_fail@plt+0x3d40>
   1559c:	ldr	r3, [r4, #4]
   155a0:	ldr	r1, [r3]
   155a4:	cmp	r7, #0
   155a8:	beq	155c8 <__assert_fail@plt+0x3d9c>
   155ac:	ldr	r0, [r3, #4]
   155b0:	mov	r2, #0
   155b4:	str	r0, [r4, #4]
   155b8:	str	r2, [r3]
   155bc:	ldr	r2, [r6, #36]	; 0x24
   155c0:	str	r2, [r3, #4]
   155c4:	str	r3, [r6, #36]	; 0x24
   155c8:	ldrd	r4, [sp]
   155cc:	mov	r0, r1
   155d0:	ldrd	r6, [sp, #8]
   155d4:	ldr	r8, [sp, #16]
   155d8:	add	sp, sp, #20
   155dc:	pop	{pc}		; (ldr pc, [sp], #4)
   155e0:	ldr	r1, [r4]
   155e4:	cmp	r7, #0
   155e8:	beq	155c8 <__assert_fail@plt+0x3d9c>
   155ec:	ldr	r0, [r4, #4]
   155f0:	cmp	r0, #0
   155f4:	streq	r0, [r4]
   155f8:	beq	155c8 <__assert_fail@plt+0x3d9c>
   155fc:	ldrd	r2, [r0]
   15600:	mov	ip, #0
   15604:	strd	r2, [r4]
   15608:	str	ip, [r0]
   1560c:	ldr	r3, [r6, #36]	; 0x24
   15610:	str	r3, [r0, #4]
   15614:	str	r0, [r6, #36]	; 0x24
   15618:	b	155c8 <__assert_fail@plt+0x3d9c>
   1561c:	mov	r1, #0
   15620:	b	155c8 <__assert_fail@plt+0x3d9c>
   15624:	ldr	r2, [r0]
   15628:	movw	r3, #45360	; 0xb130
   1562c:	movt	r3, #1
   15630:	mov	r1, r0
   15634:	cmp	r2, r3
   15638:	beq	156c0 <__assert_fail@plt+0x3e94>
   1563c:	vldr	s14, [pc, #132]	; 156c8 <__assert_fail@plt+0x3e9c>
   15640:	vldr	s15, [r2, #8]
   15644:	vcmpe.f32	s15, s14
   15648:	vmrs	APSR_nzcv, fpscr
   1564c:	ble	156b4 <__assert_fail@plt+0x3e88>
   15650:	vldr	s13, [pc, #116]	; 156cc <__assert_fail@plt+0x3ea0>
   15654:	vcmpe.f32	s15, s13
   15658:	vmrs	APSR_nzcv, fpscr
   1565c:	bpl	156b4 <__assert_fail@plt+0x3e88>
   15660:	vldr	s13, [pc, #104]	; 156d0 <__assert_fail@plt+0x3ea4>
   15664:	vldr	s12, [r2, #12]
   15668:	vcmpe.f32	s12, s13
   1566c:	vmrs	APSR_nzcv, fpscr
   15670:	ble	156b4 <__assert_fail@plt+0x3e88>
   15674:	vldr	s13, [r2]
   15678:	vcmpe.f32	s13, #0.0
   1567c:	vmrs	APSR_nzcv, fpscr
   15680:	blt	156b4 <__assert_fail@plt+0x3e88>
   15684:	vadd.f32	s14, s13, s14
   15688:	vldr	s13, [r2, #4]
   1568c:	vcmpe.f32	s14, s13
   15690:	vmrs	APSR_nzcv, fpscr
   15694:	bpl	156b4 <__assert_fail@plt+0x3e88>
   15698:	vldr	s12, [pc, #52]	; 156d4 <__assert_fail@plt+0x3ea8>
   1569c:	vcmpe.f32	s13, s12
   156a0:	vmrs	APSR_nzcv, fpscr
   156a4:	bhi	156b4 <__assert_fail@plt+0x3e88>
   156a8:	vcmpe.f32	s15, s14
   156ac:	vmrs	APSR_nzcv, fpscr
   156b0:	bgt	156c0 <__assert_fail@plt+0x3e94>
   156b4:	mov	r0, #0
   156b8:	str	r3, [r1]
   156bc:	bx	lr
   156c0:	mov	r0, #1
   156c4:	bx	lr
   156c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   156cc:	svccc	0x00666666
   156d0:	svccc	0x008ccccd
   156d4:	svccc	0x00800000
   156d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   156dc:	ldr	r3, [r1, #4]
   156e0:	strd	r6, [sp, #8]
   156e4:	ldr	r6, [r1]
   156e8:	strd	r8, [sp, #16]
   156ec:	str	sl, [sp, #24]
   156f0:	str	lr, [sp, #28]
   156f4:	cmp	r6, r3
   156f8:	bcs	157c0 <__assert_fail@plt+0x3f94>
   156fc:	mov	r8, r2
   15700:	mov	r5, r0
   15704:	mov	r7, r1
   15708:	add	r6, r6, #8
   1570c:	mov	r9, #0
   15710:	b	15720 <__assert_fail@plt+0x3ef4>
   15714:	cmp	r3, r6
   15718:	add	r6, r6, #8
   1571c:	bls	157c0 <__assert_fail@plt+0x3f94>
   15720:	ldr	sl, [r6, #-8]
   15724:	cmp	sl, #0
   15728:	beq	15714 <__assert_fail@plt+0x3ee8>
   1572c:	ldr	r4, [r6, #-4]
   15730:	cmp	r4, #0
   15734:	bne	15754 <__assert_fail@plt+0x3f28>
   15738:	b	157a4 <__assert_fail@plt+0x3f78>
   1573c:	ldr	r2, [r0, #4]
   15740:	cmp	r3, #0
   15744:	str	r2, [r4, #4]
   15748:	str	r4, [r0, #4]
   1574c:	mov	r4, r3
   15750:	beq	157a0 <__assert_fail@plt+0x3f74>
   15754:	ldr	sl, [r4]
   15758:	mov	r0, r5
   1575c:	mov	r1, sl
   15760:	bl	154bc <__assert_fail@plt+0x3c90>
   15764:	ldr	r2, [r0]
   15768:	ldr	r3, [r4, #4]
   1576c:	cmp	r2, #0
   15770:	bne	1573c <__assert_fail@plt+0x3f10>
   15774:	ldr	r1, [r5, #12]
   15778:	cmp	r3, #0
   1577c:	str	sl, [r0]
   15780:	add	r1, r1, #1
   15784:	str	r1, [r5, #12]
   15788:	str	r2, [r4]
   1578c:	ldr	r2, [r5, #36]	; 0x24
   15790:	str	r2, [r4, #4]
   15794:	str	r4, [r5, #36]	; 0x24
   15798:	mov	r4, r3
   1579c:	bne	15754 <__assert_fail@plt+0x3f28>
   157a0:	ldr	sl, [r6, #-8]
   157a4:	cmp	r8, #0
   157a8:	str	r9, [r6, #-4]
   157ac:	beq	157dc <__assert_fail@plt+0x3fb0>
   157b0:	ldr	r3, [r7, #4]
   157b4:	cmp	r3, r6
   157b8:	add	r6, r6, #8
   157bc:	bhi	15720 <__assert_fail@plt+0x3ef4>
   157c0:	mov	r0, #1
   157c4:	ldrd	r4, [sp]
   157c8:	ldrd	r6, [sp, #8]
   157cc:	ldrd	r8, [sp, #16]
   157d0:	ldr	sl, [sp, #24]
   157d4:	add	sp, sp, #28
   157d8:	pop	{pc}		; (ldr pc, [sp], #4)
   157dc:	mov	r1, sl
   157e0:	mov	r0, r5
   157e4:	bl	154bc <__assert_fail@plt+0x3c90>
   157e8:	ldr	r3, [r0]
   157ec:	mov	r4, r0
   157f0:	cmp	r3, #0
   157f4:	beq	15834 <__assert_fail@plt+0x4008>
   157f8:	ldr	r0, [r5, #36]	; 0x24
   157fc:	cmp	r0, #0
   15800:	beq	15848 <__assert_fail@plt+0x401c>
   15804:	ldr	r3, [r0, #4]
   15808:	str	r3, [r5, #36]	; 0x24
   1580c:	ldr	r3, [r4, #4]
   15810:	str	sl, [r0]
   15814:	str	r3, [r0, #4]
   15818:	str	r0, [r4, #4]
   1581c:	ldr	r2, [r7, #12]
   15820:	str	r9, [r6, #-8]
   15824:	ldr	r3, [r7, #4]
   15828:	sub	r2, r2, #1
   1582c:	str	r2, [r7, #12]
   15830:	b	15714 <__assert_fail@plt+0x3ee8>
   15834:	ldr	r3, [r5, #12]
   15838:	str	sl, [r0]
   1583c:	add	r3, r3, #1
   15840:	str	r3, [r5, #12]
   15844:	b	1581c <__assert_fail@plt+0x3ff0>
   15848:	mov	r0, #8
   1584c:	bl	19ff4 <lchmod@@Base+0x3898>
   15850:	cmp	r0, #0
   15854:	bne	1580c <__assert_fail@plt+0x3fe0>
   15858:	mov	r0, r8
   1585c:	b	157c4 <__assert_fail@plt+0x3f98>
   15860:	ldr	r0, [r0, #8]
   15864:	bx	lr
   15868:	ldr	r0, [r0, #12]
   1586c:	bx	lr
   15870:	ldr	r0, [r0, #16]
   15874:	bx	lr
   15878:	ldm	r0, {r1, r3}
   1587c:	cmp	r1, r3
   15880:	bcs	158f4 <__assert_fail@plt+0x40c8>
   15884:	sub	ip, r3, #1
   15888:	add	r3, r1, #16
   1588c:	sub	ip, ip, r1
   15890:	mov	r0, #0
   15894:	bic	ip, ip, #7
   15898:	add	r1, r1, #8
   1589c:	add	ip, ip, r3
   158a0:	b	158b0 <__assert_fail@plt+0x4084>
   158a4:	add	r1, r1, #8
   158a8:	cmp	r1, ip
   158ac:	beq	158f0 <__assert_fail@plt+0x40c4>
   158b0:	ldr	r3, [r1, #-8]
   158b4:	cmp	r3, #0
   158b8:	beq	158a4 <__assert_fail@plt+0x4078>
   158bc:	ldr	r3, [r1, #-4]
   158c0:	mov	r2, #1
   158c4:	cmp	r3, #0
   158c8:	beq	158dc <__assert_fail@plt+0x40b0>
   158cc:	ldr	r3, [r3, #4]
   158d0:	add	r2, r2, #1
   158d4:	cmp	r3, #0
   158d8:	bne	158cc <__assert_fail@plt+0x40a0>
   158dc:	cmp	r0, r2
   158e0:	add	r1, r1, #8
   158e4:	movcc	r0, r2
   158e8:	cmp	r1, ip
   158ec:	bne	158b0 <__assert_fail@plt+0x4084>
   158f0:	bx	lr
   158f4:	mov	r0, #0
   158f8:	bx	lr
   158fc:	ldm	r0, {r1, r3}
   15900:	push	{lr}		; (str lr, [sp, #-4]!)
   15904:	cmp	r1, r3
   15908:	bcs	1599c <__assert_fail@plt+0x4170>
   1590c:	sub	ip, r3, #1
   15910:	mov	r2, #0
   15914:	sub	ip, ip, r1
   15918:	add	r3, r1, #16
   1591c:	bic	ip, ip, #7
   15920:	add	r1, r1, #8
   15924:	add	ip, ip, r3
   15928:	mov	lr, r2
   1592c:	b	1593c <__assert_fail@plt+0x4110>
   15930:	add	r1, r1, #8
   15934:	cmp	r1, ip
   15938:	beq	15978 <__assert_fail@plt+0x414c>
   1593c:	ldr	r3, [r1, #-8]
   15940:	cmp	r3, #0
   15944:	beq	15930 <__assert_fail@plt+0x4104>
   15948:	ldr	r3, [r1, #-4]
   1594c:	add	lr, lr, #1
   15950:	add	r2, r2, #1
   15954:	cmp	r3, #0
   15958:	beq	15930 <__assert_fail@plt+0x4104>
   1595c:	ldr	r3, [r3, #4]
   15960:	add	r2, r2, #1
   15964:	cmp	r3, #0
   15968:	bne	1595c <__assert_fail@plt+0x4130>
   1596c:	add	r1, r1, #8
   15970:	cmp	r1, ip
   15974:	bne	1593c <__assert_fail@plt+0x4110>
   15978:	ldr	r3, [r0, #12]
   1597c:	cmp	r3, lr
   15980:	movne	r0, #0
   15984:	bne	15998 <__assert_fail@plt+0x416c>
   15988:	ldr	r0, [r0, #16]
   1598c:	sub	r0, r0, r2
   15990:	clz	r0, r0
   15994:	lsr	r0, r0, #5
   15998:	pop	{pc}		; (ldr pc, [sp], #4)
   1599c:	mov	r2, #0
   159a0:	mov	lr, r2
   159a4:	b	15978 <__assert_fail@plt+0x414c>
   159a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   159ac:	mov	r4, r1
   159b0:	ldr	r2, [r0]
   159b4:	ldr	r1, [r0, #4]
   159b8:	ldr	r3, [r0, #16]
   159bc:	strd	r6, [sp, #8]
   159c0:	str	lr, [sp, #16]
   159c4:	sub	sp, sp, #12
   159c8:	cmp	r2, r1
   159cc:	ldrd	r6, [r0, #8]
   159d0:	bcs	15ad0 <__assert_fail@plt+0x42a4>
   159d4:	sub	ip, r1, #1
   159d8:	add	r1, r2, #16
   159dc:	sub	ip, ip, r2
   159e0:	add	r0, r2, #8
   159e4:	bic	ip, ip, #7
   159e8:	mov	r5, #0
   159ec:	add	ip, ip, r1
   159f0:	b	15a00 <__assert_fail@plt+0x41d4>
   159f4:	add	r0, r0, #8
   159f8:	cmp	r0, ip
   159fc:	beq	15a40 <__assert_fail@plt+0x4214>
   15a00:	ldr	r2, [r0, #-8]
   15a04:	cmp	r2, #0
   15a08:	beq	159f4 <__assert_fail@plt+0x41c8>
   15a0c:	ldr	r2, [r0, #-4]
   15a10:	mov	r1, #1
   15a14:	cmp	r2, #0
   15a18:	beq	15a2c <__assert_fail@plt+0x4200>
   15a1c:	ldr	r2, [r2, #4]
   15a20:	add	r1, r1, #1
   15a24:	cmp	r2, #0
   15a28:	bne	15a1c <__assert_fail@plt+0x41f0>
   15a2c:	cmp	r5, r1
   15a30:	add	r0, r0, #8
   15a34:	movcc	r5, r1
   15a38:	cmp	r0, ip
   15a3c:	bne	15a00 <__assert_fail@plt+0x41d4>
   15a40:	mov	r1, #1
   15a44:	mov	r0, r4
   15a48:	movw	r2, #45380	; 0xb144
   15a4c:	movt	r2, #1
   15a50:	bl	116d0 <__fprintf_chk@plt>
   15a54:	mov	r3, r6
   15a58:	mov	r1, #1
   15a5c:	mov	r0, r4
   15a60:	movw	r2, #45404	; 0xb15c
   15a64:	movt	r2, #1
   15a68:	bl	116d0 <__fprintf_chk@plt>
   15a6c:	vmov	s15, r7
   15a70:	mov	r3, r7
   15a74:	mov	r1, #1
   15a78:	vldr	d5, [pc, #88]	; 15ad8 <__assert_fail@plt+0x42ac>
   15a7c:	mov	r0, r4
   15a80:	movw	r2, #45428	; 0xb174
   15a84:	movt	r2, #1
   15a88:	vcvt.f64.u32	d6, s15
   15a8c:	vmov	s15, r6
   15a90:	vmul.f64	d6, d6, d5
   15a94:	vcvt.f64.u32	d7, s15
   15a98:	vdiv.f64	d5, d6, d7
   15a9c:	vstr	d5, [sp]
   15aa0:	bl	116d0 <__fprintf_chk@plt>
   15aa4:	mov	r3, r5
   15aa8:	mov	r0, r4
   15aac:	movw	r2, #45464	; 0xb198
   15ab0:	movt	r2, #1
   15ab4:	mov	r1, #1
   15ab8:	add	sp, sp, #12
   15abc:	ldrd	r4, [sp]
   15ac0:	ldrd	r6, [sp, #8]
   15ac4:	ldr	lr, [sp, #16]
   15ac8:	add	sp, sp, #20
   15acc:	b	116d0 <__fprintf_chk@plt>
   15ad0:	mov	r5, #0
   15ad4:	b	15a40 <__assert_fail@plt+0x4214>
   15ad8:	andeq	r0, r0, r0
   15adc:	subsmi	r0, r9, r0
   15ae0:	strd	r4, [sp, #-16]!
   15ae4:	mov	r5, r1
   15ae8:	str	r6, [sp, #8]
   15aec:	mov	r6, r0
   15af0:	str	lr, [sp, #12]
   15af4:	bl	154bc <__assert_fail@plt+0x3c90>
   15af8:	ldr	r3, [r0]
   15afc:	cmp	r3, #0
   15b00:	beq	15b3c <__assert_fail@plt+0x4310>
   15b04:	mov	r4, r0
   15b08:	b	15b10 <__assert_fail@plt+0x42e4>
   15b0c:	ldr	r3, [r4]
   15b10:	cmp	r3, r5
   15b14:	mov	r1, r3
   15b18:	mov	r0, r5
   15b1c:	beq	15b54 <__assert_fail@plt+0x4328>
   15b20:	ldr	r3, [r6, #28]
   15b24:	blx	r3
   15b28:	cmp	r0, #0
   15b2c:	bne	15b50 <__assert_fail@plt+0x4324>
   15b30:	ldr	r4, [r4, #4]
   15b34:	cmp	r4, #0
   15b38:	bne	15b0c <__assert_fail@plt+0x42e0>
   15b3c:	ldrd	r4, [sp]
   15b40:	mov	r0, #0
   15b44:	ldr	r6, [sp, #8]
   15b48:	add	sp, sp, #12
   15b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b50:	ldr	r5, [r4]
   15b54:	mov	r0, r5
   15b58:	ldrd	r4, [sp]
   15b5c:	ldr	r6, [sp, #8]
   15b60:	add	sp, sp, #12
   15b64:	pop	{pc}		; (ldr pc, [sp], #4)
   15b68:	ldr	r3, [r0, #16]
   15b6c:	cmp	r3, #0
   15b70:	beq	15bc4 <__assert_fail@plt+0x4398>
   15b74:	ldr	r3, [r0]
   15b78:	ldr	r2, [r0, #4]
   15b7c:	cmp	r3, r2
   15b80:	bcs	15bb8 <__assert_fail@plt+0x438c>
   15b84:	ldr	r0, [r3]
   15b88:	cmp	r0, #0
   15b8c:	bxne	lr
   15b90:	sub	r2, r2, #1
   15b94:	sub	r2, r2, r3
   15b98:	bic	r2, r2, #7
   15b9c:	add	r2, r3, r2
   15ba0:	b	15bb0 <__assert_fail@plt+0x4384>
   15ba4:	ldr	r0, [r3, #8]!
   15ba8:	cmp	r0, #0
   15bac:	bxne	lr
   15bb0:	cmp	r3, r2
   15bb4:	bne	15ba4 <__assert_fail@plt+0x4378>
   15bb8:	str	r4, [sp, #-8]!
   15bbc:	str	lr, [sp, #4]
   15bc0:	bl	117d8 <abort@plt>
   15bc4:	mov	r0, r3
   15bc8:	bx	lr
   15bcc:	strd	r4, [sp, #-16]!
   15bd0:	mov	r5, r0
   15bd4:	mov	r4, r1
   15bd8:	str	r6, [sp, #8]
   15bdc:	str	lr, [sp, #12]
   15be0:	bl	154bc <__assert_fail@plt+0x3c90>
   15be4:	mov	r2, r0
   15be8:	mov	r3, r0
   15bec:	b	15bf8 <__assert_fail@plt+0x43cc>
   15bf0:	cmp	r3, #0
   15bf4:	beq	15c10 <__assert_fail@plt+0x43e4>
   15bf8:	ldm	r3, {r1, r3}
   15bfc:	cmp	r1, r4
   15c00:	bne	15bf0 <__assert_fail@plt+0x43c4>
   15c04:	cmp	r3, #0
   15c08:	ldrne	r0, [r3]
   15c0c:	bne	15c34 <__assert_fail@plt+0x4408>
   15c10:	ldr	r3, [r5, #4]
   15c14:	b	15c24 <__assert_fail@plt+0x43f8>
   15c18:	ldr	r0, [r2]
   15c1c:	cmp	r0, #0
   15c20:	bne	15c34 <__assert_fail@plt+0x4408>
   15c24:	add	r2, r2, #8
   15c28:	cmp	r3, r2
   15c2c:	bhi	15c18 <__assert_fail@plt+0x43ec>
   15c30:	mov	r0, #0
   15c34:	ldrd	r4, [sp]
   15c38:	ldr	r6, [sp, #8]
   15c3c:	add	sp, sp, #12
   15c40:	pop	{pc}		; (ldr pc, [sp], #4)
   15c44:	strd	r4, [sp, #-12]!
   15c48:	ldr	r5, [r0]
   15c4c:	str	lr, [sp, #8]
   15c50:	ldr	lr, [r0, #4]
   15c54:	cmp	lr, r5
   15c58:	bls	15ce4 <__assert_fail@plt+0x44b8>
   15c5c:	mov	ip, #0
   15c60:	ldr	r3, [r5]
   15c64:	cmp	r3, #0
   15c68:	bne	15c8c <__assert_fail@plt+0x4460>
   15c6c:	add	r5, r5, #8
   15c70:	cmp	lr, r5
   15c74:	bhi	15c60 <__assert_fail@plt+0x4434>
   15c78:	mov	r2, ip
   15c7c:	ldrd	r4, [sp]
   15c80:	add	sp, sp, #8
   15c84:	mov	r0, r2
   15c88:	pop	{pc}		; (ldr pc, [sp], #4)
   15c8c:	cmp	r2, ip
   15c90:	bls	15c78 <__assert_fail@plt+0x444c>
   15c94:	str	r3, [r1, ip, lsl #2]
   15c98:	add	r4, ip, #1
   15c9c:	add	lr, r1, ip, lsl #2
   15ca0:	ldr	r3, [r5, #4]
   15ca4:	cmp	r3, #0
   15ca8:	beq	15cd8 <__assert_fail@plt+0x44ac>
   15cac:	mov	ip, r4
   15cb0:	cmp	r2, ip
   15cb4:	add	ip, ip, #1
   15cb8:	beq	15c7c <__assert_fail@plt+0x4450>
   15cbc:	ldr	r4, [r3]
   15cc0:	str	r4, [lr, #4]!
   15cc4:	ldr	r3, [r3, #4]
   15cc8:	cmp	r3, #0
   15ccc:	bne	15cb0 <__assert_fail@plt+0x4484>
   15cd0:	ldr	lr, [r0, #4]
   15cd4:	b	15c6c <__assert_fail@plt+0x4440>
   15cd8:	mov	ip, r4
   15cdc:	ldr	lr, [r0, #4]
   15ce0:	b	15c6c <__assert_fail@plt+0x4440>
   15ce4:	mov	r2, #0
   15ce8:	b	15c7c <__assert_fail@plt+0x4450>
   15cec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15cf0:	ldr	r3, [r0, #4]
   15cf4:	strd	r6, [sp, #8]
   15cf8:	strd	r8, [sp, #16]
   15cfc:	ldr	r8, [r0]
   15d00:	str	sl, [sp, #24]
   15d04:	str	lr, [sp, #28]
   15d08:	cmp	r3, r8
   15d0c:	bls	15d88 <__assert_fail@plt+0x455c>
   15d10:	mov	r7, r2
   15d14:	mov	r6, r1
   15d18:	mov	r9, r0
   15d1c:	mov	r5, #0
   15d20:	ldr	r0, [r8]
   15d24:	cmp	r0, #0
   15d28:	bne	15d54 <__assert_fail@plt+0x4528>
   15d2c:	add	r8, r8, #8
   15d30:	cmp	r3, r8
   15d34:	bhi	15d20 <__assert_fail@plt+0x44f4>
   15d38:	mov	r0, r5
   15d3c:	ldrd	r4, [sp]
   15d40:	ldrd	r6, [sp, #8]
   15d44:	ldrd	r8, [sp, #16]
   15d48:	ldr	sl, [sp, #24]
   15d4c:	add	sp, sp, #28
   15d50:	pop	{pc}		; (ldr pc, [sp], #4)
   15d54:	mov	r4, r8
   15d58:	b	15d60 <__assert_fail@plt+0x4534>
   15d5c:	ldr	r0, [r4]
   15d60:	mov	r1, r7
   15d64:	blx	r6
   15d68:	cmp	r0, #0
   15d6c:	beq	15d38 <__assert_fail@plt+0x450c>
   15d70:	ldr	r4, [r4, #4]
   15d74:	add	r5, r5, #1
   15d78:	cmp	r4, #0
   15d7c:	bne	15d5c <__assert_fail@plt+0x4530>
   15d80:	ldr	r3, [r9, #4]
   15d84:	b	15d2c <__assert_fail@plt+0x4500>
   15d88:	mov	r5, #0
   15d8c:	b	15d38 <__assert_fail@plt+0x450c>
   15d90:	ldrb	r2, [r0]
   15d94:	cmp	r2, #0
   15d98:	beq	15dc4 <__assert_fail@plt+0x4598>
   15d9c:	mov	r3, #0
   15da0:	rsb	r3, r3, r3, lsl #5
   15da4:	add	r3, r3, r2
   15da8:	ldrb	r2, [r0, #1]!
   15dac:	udiv	ip, r3, r1
   15db0:	cmp	r2, #0
   15db4:	mls	r3, r1, ip, r3
   15db8:	bne	15da0 <__assert_fail@plt+0x4574>
   15dbc:	mov	r0, r3
   15dc0:	bx	lr
   15dc4:	mov	r3, r2
   15dc8:	mov	r0, r3
   15dcc:	bx	lr
   15dd0:	movw	r3, #45360	; 0xb130
   15dd4:	movt	r3, #1
   15dd8:	strd	r4, [sp, #-8]!
   15ddc:	ldrd	r4, [r3]
   15de0:	ldr	r1, [r3, #16]
   15de4:	ldrd	r2, [r3, #8]
   15de8:	strd	r4, [r0]
   15dec:	ldrd	r4, [sp]
   15df0:	add	sp, sp, #8
   15df4:	strd	r2, [r0, #8]
   15df8:	str	r1, [r0, #16]
   15dfc:	bx	lr
   15e00:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e04:	cmp	r2, #0
   15e08:	movw	ip, #21676	; 0x54ac
   15e0c:	movt	ip, #1
   15e10:	strd	r6, [sp, #8]
   15e14:	movne	r6, r2
   15e18:	str	lr, [sp, #16]
   15e1c:	sub	sp, sp, #12
   15e20:	movw	lr, #21660	; 0x549c
   15e24:	movt	lr, #1
   15e28:	mov	r7, r1
   15e2c:	moveq	r6, lr
   15e30:	cmp	r3, #0
   15e34:	str	r0, [sp, #4]
   15e38:	mov	r0, #40	; 0x28
   15e3c:	movne	r5, r3
   15e40:	moveq	r5, ip
   15e44:	bl	19ff4 <lchmod@@Base+0x3898>
   15e48:	subs	r4, r0, #0
   15e4c:	beq	15ee4 <__assert_fail@plt+0x46b8>
   15e50:	cmp	r7, #0
   15e54:	add	r0, r4, #20
   15e58:	beq	15efc <__assert_fail@plt+0x46d0>
   15e5c:	str	r7, [r4, #20]
   15e60:	bl	15624 <__assert_fail@plt+0x3df8>
   15e64:	cmp	r0, #0
   15e68:	beq	15f44 <__assert_fail@plt+0x4718>
   15e6c:	ldrb	r3, [r7, #16]
   15e70:	cmp	r3, #0
   15e74:	beq	15f54 <__assert_fail@plt+0x4728>
   15e78:	ldr	r0, [sp, #4]
   15e7c:	bl	15410 <__assert_fail@plt+0x3be4>
   15e80:	lsrs	r2, r0, #30
   15e84:	movne	r7, #1
   15e88:	moveq	r7, #0
   15e8c:	tst	r0, #536870912	; 0x20000000
   15e90:	bne	15f3c <__assert_fail@plt+0x4710>
   15e94:	cmp	r7, #0
   15e98:	bne	15f3c <__assert_fail@plt+0x4710>
   15e9c:	cmp	r0, #0
   15ea0:	str	r0, [r4, #8]
   15ea4:	beq	15f44 <__assert_fail@plt+0x4718>
   15ea8:	mov	r1, #8
   15eac:	bl	19f80 <lchmod@@Base+0x3824>
   15eb0:	cmp	r0, #0
   15eb4:	str	r0, [r4]
   15eb8:	beq	15f44 <__assert_fail@plt+0x4718>
   15ebc:	ldr	r3, [r4, #8]
   15ec0:	str	r7, [r4, #12]
   15ec4:	str	r7, [r4, #16]
   15ec8:	str	r6, [r4, #24]
   15ecc:	str	r5, [r4, #28]
   15ed0:	add	r0, r0, r3, lsl #3
   15ed4:	ldr	r3, [sp, #32]
   15ed8:	str	r0, [r4, #4]
   15edc:	str	r3, [r4, #32]
   15ee0:	str	r7, [r4, #36]	; 0x24
   15ee4:	mov	r0, r4
   15ee8:	add	sp, sp, #12
   15eec:	ldrd	r4, [sp]
   15ef0:	ldrd	r6, [sp, #8]
   15ef4:	add	sp, sp, #16
   15ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   15efc:	movw	r3, #45360	; 0xb130
   15f00:	movt	r3, #1
   15f04:	str	r3, [r4, #20]
   15f08:	bl	15624 <__assert_fail@plt+0x3df8>
   15f0c:	cmp	r0, #0
   15f10:	beq	15f44 <__assert_fail@plt+0x4718>
   15f14:	vldr	s13, [pc, #64]	; 15f5c <__assert_fail@plt+0x4730>
   15f18:	vldr	s15, [sp, #4]
   15f1c:	vldr	s14, [pc, #60]	; 15f60 <__assert_fail@plt+0x4734>
   15f20:	vcvt.f32.u32	s12, s15
   15f24:	vdiv.f32	s15, s12, s13
   15f28:	vcmpe.f32	s15, s14
   15f2c:	vmrs	APSR_nzcv, fpscr
   15f30:	vcvtlt.u32.f32	s15, s15
   15f34:	vstrlt	s15, [sp, #4]
   15f38:	blt	15e78 <__assert_fail@plt+0x464c>
   15f3c:	mov	r3, #0
   15f40:	str	r3, [r4, #8]
   15f44:	mov	r0, r4
   15f48:	mov	r4, #0
   15f4c:	bl	130e8 <__assert_fail@plt+0x18bc>
   15f50:	b	15ee4 <__assert_fail@plt+0x46b8>
   15f54:	vldr	s13, [r7, #8]
   15f58:	b	15f18 <__assert_fail@plt+0x46ec>
   15f5c:	svccc	0x004ccccd
   15f60:	svcmi	0x00800000
   15f64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f68:	mov	r5, r0
   15f6c:	ldr	r2, [r0, #4]
   15f70:	strd	r6, [sp, #8]
   15f74:	ldr	r6, [r0]
   15f78:	str	r8, [sp, #16]
   15f7c:	str	lr, [sp, #20]
   15f80:	cmp	r6, r2
   15f84:	addcc	r6, r6, #8
   15f88:	movcc	r7, #0
   15f8c:	bcc	15fa0 <__assert_fail@plt+0x4774>
   15f90:	b	16014 <__assert_fail@plt+0x47e8>
   15f94:	cmp	r2, r6
   15f98:	add	r6, r6, #8
   15f9c:	bls	16014 <__assert_fail@plt+0x47e8>
   15fa0:	ldr	r3, [r6, #-8]
   15fa4:	cmp	r3, #0
   15fa8:	beq	15f94 <__assert_fail@plt+0x4768>
   15fac:	ldr	r4, [r6, #-4]
   15fb0:	ldr	r2, [r5, #32]
   15fb4:	cmp	r4, #0
   15fb8:	beq	15fec <__assert_fail@plt+0x47c0>
   15fbc:	cmp	r2, #0
   15fc0:	beq	15fd0 <__assert_fail@plt+0x47a4>
   15fc4:	ldr	r0, [r4]
   15fc8:	blx	r2
   15fcc:	ldr	r2, [r5, #32]
   15fd0:	ldr	r3, [r4, #4]
   15fd4:	ldr	r1, [r5, #36]	; 0x24
   15fd8:	str	r7, [r4]
   15fdc:	str	r1, [r4, #4]
   15fe0:	str	r4, [r5, #36]	; 0x24
   15fe4:	subs	r4, r3, #0
   15fe8:	bne	15fbc <__assert_fail@plt+0x4790>
   15fec:	cmp	r2, #0
   15ff0:	beq	15ffc <__assert_fail@plt+0x47d0>
   15ff4:	ldr	r0, [r6, #-8]
   15ff8:	blx	r2
   15ffc:	str	r7, [r6, #-8]
   16000:	str	r7, [r6, #-4]
   16004:	ldr	r2, [r5, #4]
   16008:	cmp	r2, r6
   1600c:	add	r6, r6, #8
   16010:	bhi	15fa0 <__assert_fail@plt+0x4774>
   16014:	mov	r3, #0
   16018:	ldrd	r6, [sp, #8]
   1601c:	ldr	r8, [sp, #16]
   16020:	str	r3, [r5, #12]
   16024:	str	r3, [r5, #16]
   16028:	ldrd	r4, [sp]
   1602c:	add	sp, sp, #20
   16030:	pop	{pc}		; (ldr pc, [sp], #4)
   16034:	strd	r4, [sp, #-16]!
   16038:	ldr	r2, [r0, #32]
   1603c:	ldr	r5, [r0]
   16040:	ldr	r3, [r0, #4]
   16044:	cmp	r2, #0
   16048:	str	r6, [sp, #8]
   1604c:	mov	r6, r0
   16050:	str	lr, [sp, #12]
   16054:	beq	160bc <__assert_fail@plt+0x4890>
   16058:	ldr	r2, [r0, #16]
   1605c:	cmp	r2, #0
   16060:	beq	160bc <__assert_fail@plt+0x4890>
   16064:	cmp	r5, r3
   16068:	bcc	1607c <__assert_fail@plt+0x4850>
   1606c:	b	160f0 <__assert_fail@plt+0x48c4>
   16070:	add	r5, r5, #8
   16074:	cmp	r3, r5
   16078:	bls	160b8 <__assert_fail@plt+0x488c>
   1607c:	ldr	r0, [r5]
   16080:	cmp	r0, #0
   16084:	beq	16070 <__assert_fail@plt+0x4844>
   16088:	mov	r4, r5
   1608c:	b	16094 <__assert_fail@plt+0x4868>
   16090:	ldr	r0, [r4]
   16094:	ldr	r3, [r6, #32]
   16098:	blx	r3
   1609c:	ldr	r4, [r4, #4]
   160a0:	cmp	r4, #0
   160a4:	bne	16090 <__assert_fail@plt+0x4864>
   160a8:	ldr	r3, [r6, #4]
   160ac:	add	r5, r5, #8
   160b0:	cmp	r3, r5
   160b4:	bhi	1607c <__assert_fail@plt+0x4850>
   160b8:	ldr	r5, [r6]
   160bc:	cmp	r5, r3
   160c0:	bcs	160f0 <__assert_fail@plt+0x48c4>
   160c4:	ldr	r0, [r5, #4]
   160c8:	cmp	r0, #0
   160cc:	beq	160e4 <__assert_fail@plt+0x48b8>
   160d0:	ldr	r4, [r0, #4]
   160d4:	bl	130e8 <__assert_fail@plt+0x18bc>
   160d8:	subs	r0, r4, #0
   160dc:	bne	160d0 <__assert_fail@plt+0x48a4>
   160e0:	ldr	r3, [r6, #4]
   160e4:	add	r5, r5, #8
   160e8:	cmp	r3, r5
   160ec:	bhi	160c4 <__assert_fail@plt+0x4898>
   160f0:	ldr	r0, [r6, #36]	; 0x24
   160f4:	cmp	r0, #0
   160f8:	beq	1610c <__assert_fail@plt+0x48e0>
   160fc:	ldr	r4, [r0, #4]
   16100:	bl	130e8 <__assert_fail@plt+0x18bc>
   16104:	subs	r0, r4, #0
   16108:	bne	160fc <__assert_fail@plt+0x48d0>
   1610c:	ldr	r0, [r6]
   16110:	bl	130e8 <__assert_fail@plt+0x18bc>
   16114:	mov	r0, r6
   16118:	ldrd	r4, [sp]
   1611c:	ldr	r6, [sp, #8]
   16120:	ldr	lr, [sp, #12]
   16124:	add	sp, sp, #16
   16128:	b	130e8 <__assert_fail@plt+0x18bc>
   1612c:	ldr	r3, [r0, #20]
   16130:	strd	r4, [sp, #-20]!	; 0xffffffec
   16134:	ldrb	r2, [r3, #16]
   16138:	strd	r6, [sp, #8]
   1613c:	mov	r6, r0
   16140:	str	lr, [sp, #16]
   16144:	sub	sp, sp, #52	; 0x34
   16148:	str	r1, [sp, #4]
   1614c:	cmp	r2, #0
   16150:	bne	1617c <__assert_fail@plt+0x4950>
   16154:	vmov	s15, r1
   16158:	vldr	s13, [r3, #8]
   1615c:	vldr	s14, [pc, #340]	; 162b8 <__assert_fail@plt+0x4a8c>
   16160:	vcvt.f32.u32	s12, s15
   16164:	vdiv.f32	s15, s12, s13
   16168:	vcmpe.f32	s15, s14
   1616c:	vmrs	APSR_nzcv, fpscr
   16170:	vcvtlt.u32.f32	s15, s15
   16174:	vstrlt	s15, [sp, #4]
   16178:	bge	161ac <__assert_fail@plt+0x4980>
   1617c:	ldr	r0, [sp, #4]
   16180:	bl	15410 <__assert_fail@plt+0x3be4>
   16184:	lsrs	r3, r0, #30
   16188:	mov	r5, r0
   1618c:	movne	r4, #1
   16190:	moveq	r4, #0
   16194:	tst	r0, #536870912	; 0x20000000
   16198:	movne	r4, #1
   1619c:	cmp	r0, #0
   161a0:	moveq	r4, #1
   161a4:	cmp	r4, #0
   161a8:	beq	161c8 <__assert_fail@plt+0x499c>
   161ac:	mov	r4, #0
   161b0:	mov	r0, r4
   161b4:	add	sp, sp, #52	; 0x34
   161b8:	ldrd	r4, [sp]
   161bc:	ldrd	r6, [sp, #8]
   161c0:	add	sp, sp, #16
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	ldr	r3, [r6, #8]
   161cc:	cmp	r3, r0
   161d0:	beq	16280 <__assert_fail@plt+0x4a54>
   161d4:	mov	r1, #8
   161d8:	bl	19f80 <lchmod@@Base+0x3824>
   161dc:	cmp	r0, #0
   161e0:	str	r0, [sp, #8]
   161e4:	beq	161ac <__assert_fail@plt+0x4980>
   161e8:	add	r3, r0, r5, lsl #3
   161ec:	ldr	r7, [r6, #20]
   161f0:	mov	r2, r4
   161f4:	add	r0, sp, #8
   161f8:	mov	r1, r6
   161fc:	ldr	lr, [r6, #28]
   16200:	str	r3, [sp, #12]
   16204:	str	r5, [sp, #16]
   16208:	ldr	r5, [r6, #24]
   1620c:	str	r4, [sp, #20]
   16210:	ldr	ip, [r6, #32]
   16214:	str	r4, [sp, #24]
   16218:	ldr	r3, [r6, #36]	; 0x24
   1621c:	str	r7, [sp, #28]
   16220:	str	r5, [sp, #32]
   16224:	str	lr, [sp, #36]	; 0x24
   16228:	str	ip, [sp, #40]	; 0x28
   1622c:	str	r3, [sp, #44]	; 0x2c
   16230:	bl	156d8 <__assert_fail@plt+0x3eac>
   16234:	subs	r4, r0, #0
   16238:	bne	16288 <__assert_fail@plt+0x4a5c>
   1623c:	ldr	r3, [sp, #44]	; 0x2c
   16240:	mov	r2, #1
   16244:	add	r1, sp, #8
   16248:	mov	r0, r6
   1624c:	str	r3, [r6, #36]	; 0x24
   16250:	bl	156d8 <__assert_fail@plt+0x3eac>
   16254:	cmp	r0, #0
   16258:	beq	162b4 <__assert_fail@plt+0x4a88>
   1625c:	add	r1, sp, #8
   16260:	mov	r0, r6
   16264:	mov	r2, r4
   16268:	bl	156d8 <__assert_fail@plt+0x3eac>
   1626c:	cmp	r0, #0
   16270:	beq	162b4 <__assert_fail@plt+0x4a88>
   16274:	ldr	r0, [sp, #8]
   16278:	bl	130e8 <__assert_fail@plt+0x18bc>
   1627c:	b	161b0 <__assert_fail@plt+0x4984>
   16280:	mov	r4, #1
   16284:	b	161b0 <__assert_fail@plt+0x4984>
   16288:	ldr	r0, [r6]
   1628c:	bl	130e8 <__assert_fail@plt+0x18bc>
   16290:	ldrd	r2, [sp, #8]
   16294:	ldr	r1, [sp, #16]
   16298:	strd	r2, [r6]
   1629c:	ldr	r2, [sp, #20]
   162a0:	str	r1, [r6, #8]
   162a4:	ldr	r3, [sp, #44]	; 0x2c
   162a8:	str	r2, [r6, #12]
   162ac:	str	r3, [r6, #36]	; 0x24
   162b0:	b	161b0 <__assert_fail@plt+0x4984>
   162b4:	bl	117d8 <abort@plt>
   162b8:	svcmi	0x00800000
   162bc:	strd	r4, [sp, #-16]!
   162c0:	str	r6, [sp, #8]
   162c4:	subs	r6, r1, #0
   162c8:	str	lr, [sp, #12]
   162cc:	sub	sp, sp, #8
   162d0:	beq	16450 <__assert_fail@plt+0x4c24>
   162d4:	mov	r3, #0
   162d8:	mov	r5, r2
   162dc:	add	r2, sp, #4
   162e0:	mov	r4, r0
   162e4:	bl	154fc <__assert_fail@plt+0x3cd0>
   162e8:	subs	r3, r0, #0
   162ec:	beq	16318 <__assert_fail@plt+0x4aec>
   162f0:	cmp	r5, #0
   162f4:	moveq	r0, r5
   162f8:	beq	16304 <__assert_fail@plt+0x4ad8>
   162fc:	mov	r0, #0
   16300:	str	r3, [r5]
   16304:	add	sp, sp, #8
   16308:	ldrd	r4, [sp]
   1630c:	ldr	r6, [sp, #8]
   16310:	add	sp, sp, #12
   16314:	pop	{pc}		; (ldr pc, [sp], #4)
   16318:	vldr	s15, [r4, #8]
   1631c:	vldr	s14, [r4, #12]
   16320:	ldr	r3, [r4, #20]
   16324:	vcvt.f32.u32	s15, s15
   16328:	vcvt.f32.u32	s14, s14
   1632c:	vldr	s13, [r3, #8]
   16330:	vmul.f32	s15, s15, s13
   16334:	vcmpe.f32	s14, s15
   16338:	vmrs	APSR_nzcv, fpscr
   1633c:	bgt	16384 <__assert_fail@plt+0x4b58>
   16340:	ldr	r2, [sp, #4]
   16344:	ldr	r3, [r2]
   16348:	cmp	r3, #0
   1634c:	beq	163e0 <__assert_fail@plt+0x4bb4>
   16350:	ldr	r3, [r4, #36]	; 0x24
   16354:	cmp	r3, #0
   16358:	beq	16404 <__assert_fail@plt+0x4bd8>
   1635c:	ldr	r1, [r3, #4]
   16360:	str	r1, [r4, #36]	; 0x24
   16364:	ldr	r1, [r4, #16]
   16368:	mov	r0, #1
   1636c:	ldr	ip, [r2, #4]
   16370:	add	r1, r1, r0
   16374:	stm	r3, {r6, ip}
   16378:	str	r3, [r2, #4]
   1637c:	str	r1, [r4, #16]
   16380:	b	16304 <__assert_fail@plt+0x4ad8>
   16384:	add	r0, r4, #20
   16388:	bl	15624 <__assert_fail@plt+0x3df8>
   1638c:	vldr	s15, [r4, #8]
   16390:	vldr	s14, [r4, #12]
   16394:	ldr	r3, [r4, #20]
   16398:	vcvt.f32.u32	s15, s15
   1639c:	vcvt.f32.u32	s14, s14
   163a0:	vldr	s13, [r3, #8]
   163a4:	vmul.f32	s12, s13, s15
   163a8:	vcmpe.f32	s14, s12
   163ac:	vmrs	APSR_nzcv, fpscr
   163b0:	ble	16340 <__assert_fail@plt+0x4b14>
   163b4:	vldr	s14, [r3, #12]
   163b8:	ldrb	r2, [r3, #16]
   163bc:	vmul.f32	s15, s15, s14
   163c0:	vldr	s14, [pc, #140]	; 16454 <__assert_fail@plt+0x4c28>
   163c4:	cmp	r2, #0
   163c8:	vmuleq.f32	s15, s15, s13
   163cc:	vcmpe.f32	s15, s14
   163d0:	vmrs	APSR_nzcv, fpscr
   163d4:	blt	1641c <__assert_fail@plt+0x4bf0>
   163d8:	mvn	r0, #0
   163dc:	b	16304 <__assert_fail@plt+0x4ad8>
   163e0:	ldr	r1, [r4, #12]
   163e4:	mov	r0, #1
   163e8:	ldr	r3, [r4, #16]
   163ec:	str	r6, [r2]
   163f0:	add	r2, r1, r0
   163f4:	add	r3, r3, r0
   163f8:	str	r2, [r4, #12]
   163fc:	str	r3, [r4, #16]
   16400:	b	16304 <__assert_fail@plt+0x4ad8>
   16404:	mov	r0, #8
   16408:	bl	19ff4 <lchmod@@Base+0x3898>
   1640c:	subs	r3, r0, #0
   16410:	beq	163d8 <__assert_fail@plt+0x4bac>
   16414:	ldr	r2, [sp, #4]
   16418:	b	16364 <__assert_fail@plt+0x4b38>
   1641c:	vcvt.u32.f32	s15, s15
   16420:	mov	r0, r4
   16424:	vmov	r1, s15
   16428:	bl	1612c <__assert_fail@plt+0x4900>
   1642c:	cmp	r0, #0
   16430:	beq	163d8 <__assert_fail@plt+0x4bac>
   16434:	add	r2, sp, #4
   16438:	mov	r3, #0
   1643c:	mov	r1, r6
   16440:	mov	r0, r4
   16444:	bl	154fc <__assert_fail@plt+0x3cd0>
   16448:	cmp	r0, #0
   1644c:	beq	16340 <__assert_fail@plt+0x4b14>
   16450:	bl	117d8 <abort@plt>
   16454:	svcmi	0x00800000
   16458:	str	r4, [sp, #-8]!
   1645c:	mov	r4, r1
   16460:	str	lr, [sp, #4]
   16464:	sub	sp, sp, #8
   16468:	add	r2, sp, #4
   1646c:	bl	162bc <__assert_fail@plt+0x4a90>
   16470:	cmn	r0, #1
   16474:	moveq	r0, #0
   16478:	beq	16488 <__assert_fail@plt+0x4c5c>
   1647c:	cmp	r0, #0
   16480:	ldreq	r0, [sp, #4]
   16484:	movne	r0, r4
   16488:	add	sp, sp, #8
   1648c:	ldr	r4, [sp]
   16490:	add	sp, sp, #4
   16494:	pop	{pc}		; (ldr pc, [sp], #4)
   16498:	strd	r4, [sp, #-16]!
   1649c:	mov	r3, #1
   164a0:	mov	r4, r0
   164a4:	str	r6, [sp, #8]
   164a8:	str	lr, [sp, #12]
   164ac:	sub	sp, sp, #8
   164b0:	add	r2, sp, #4
   164b4:	bl	154fc <__assert_fail@plt+0x3cd0>
   164b8:	subs	r5, r0, #0
   164bc:	beq	164dc <__assert_fail@plt+0x4cb0>
   164c0:	ldr	r2, [sp, #4]
   164c4:	ldr	r3, [r4, #16]
   164c8:	ldr	r2, [r2]
   164cc:	sub	r3, r3, #1
   164d0:	str	r3, [r4, #16]
   164d4:	cmp	r2, #0
   164d8:	beq	164f4 <__assert_fail@plt+0x4cc8>
   164dc:	mov	r0, r5
   164e0:	add	sp, sp, #8
   164e4:	ldrd	r4, [sp]
   164e8:	ldr	r6, [sp, #8]
   164ec:	add	sp, sp, #12
   164f0:	pop	{pc}		; (ldr pc, [sp], #4)
   164f4:	vldr	s15, [r4, #8]
   164f8:	ldr	r3, [r4, #12]
   164fc:	ldr	r2, [r4, #20]
   16500:	vcvt.f32.u32	s15, s15
   16504:	sub	r3, r3, #1
   16508:	vmov	s14, r3
   1650c:	vldr	s13, [r2]
   16510:	str	r3, [r4, #12]
   16514:	vmul.f32	s15, s15, s13
   16518:	vcvt.f32.u32	s14, s14
   1651c:	vcmpe.f32	s14, s15
   16520:	vmrs	APSR_nzcv, fpscr
   16524:	bpl	164dc <__assert_fail@plt+0x4cb0>
   16528:	add	r0, r4, #20
   1652c:	bl	15624 <__assert_fail@plt+0x3df8>
   16530:	vldr	s15, [r4, #8]
   16534:	vldr	s13, [r4, #12]
   16538:	ldr	r3, [r4, #20]
   1653c:	vcvt.f32.u32	s15, s15
   16540:	vcvt.f32.u32	s13, s13
   16544:	vldr	s14, [r3]
   16548:	vmul.f32	s14, s15, s14
   1654c:	vcmpe.f32	s13, s14
   16550:	vmrs	APSR_nzcv, fpscr
   16554:	bpl	164dc <__assert_fail@plt+0x4cb0>
   16558:	ldrb	r2, [r3, #16]
   1655c:	mov	r0, r4
   16560:	vldr	s14, [r3, #4]
   16564:	cmp	r2, #0
   16568:	vmul.f32	s15, s15, s14
   1656c:	vldreq	s14, [r3, #8]
   16570:	vmuleq.f32	s15, s15, s14
   16574:	vcvt.u32.f32	s15, s15
   16578:	vmov	r1, s15
   1657c:	bl	1612c <__assert_fail@plt+0x4900>
   16580:	cmp	r0, #0
   16584:	bne	164dc <__assert_fail@plt+0x4cb0>
   16588:	ldr	r0, [r4, #36]	; 0x24
   1658c:	cmp	r0, #0
   16590:	beq	165a4 <__assert_fail@plt+0x4d78>
   16594:	ldr	r6, [r0, #4]
   16598:	bl	130e8 <__assert_fail@plt+0x18bc>
   1659c:	subs	r0, r6, #0
   165a0:	bne	16594 <__assert_fail@plt+0x4d68>
   165a4:	mov	r3, #0
   165a8:	str	r3, [r4, #36]	; 0x24
   165ac:	b	164dc <__assert_fail@plt+0x4cb0>
   165b0:	b	16498 <__assert_fail@plt+0x4c6c>
   165b4:	strd	r4, [sp, #-16]!
   165b8:	mov	r4, r0
   165bc:	mov	r5, r1
   165c0:	ldr	r0, [r0]
   165c4:	str	r6, [sp, #8]
   165c8:	str	lr, [sp, #12]
   165cc:	bl	1a6f4 <lchmod@@Base+0x3f98>
   165d0:	ldr	ip, [r4, #8]
   165d4:	mov	r2, r5
   165d8:	mov	r3, #0
   165dc:	ldr	r1, [r4, #12]
   165e0:	eor	r0, r0, ip
   165e4:	bl	1a944 <lchmod@@Base+0x41e8>
   165e8:	ldrd	r4, [sp]
   165ec:	mov	r0, r2
   165f0:	ldr	r6, [sp, #8]
   165f4:	add	sp, sp, #12
   165f8:	pop	{pc}		; (ldr pc, [sp], #4)
   165fc:	strd	r4, [sp, #-16]!
   16600:	ldrd	r2, [r1, #8]
   16604:	ldrd	r4, [r0, #8]
   16608:	str	r6, [sp, #8]
   1660c:	str	lr, [sp, #12]
   16610:	cmp	r5, r3
   16614:	cmpeq	r4, r2
   16618:	beq	16630 <__assert_fail@plt+0x4e04>
   1661c:	ldrd	r4, [sp]
   16620:	mov	r0, #0
   16624:	ldr	r6, [sp, #8]
   16628:	add	sp, sp, #12
   1662c:	pop	{pc}		; (ldr pc, [sp], #4)
   16630:	ldrd	r4, [r0, #16]
   16634:	ldrd	r2, [r1, #16]
   16638:	cmp	r5, r3
   1663c:	cmpeq	r4, r2
   16640:	bne	1661c <__assert_fail@plt+0x4df0>
   16644:	ldr	r0, [r0]
   16648:	ldr	r1, [r1]
   1664c:	bl	11454 <strcmp@plt>
   16650:	clz	r0, r0
   16654:	ldrd	r4, [sp]
   16658:	lsr	r0, r0, #5
   1665c:	ldr	r6, [sp, #8]
   16660:	add	sp, sp, #12
   16664:	pop	{pc}		; (ldr pc, [sp], #4)
   16668:	str	r4, [sp, #-8]!
   1666c:	mov	r4, r0
   16670:	ldr	r0, [r0]
   16674:	str	lr, [sp, #4]
   16678:	bl	130e8 <__assert_fail@plt+0x18bc>
   1667c:	mov	r0, r4
   16680:	ldr	r4, [sp]
   16684:	ldr	lr, [sp, #4]
   16688:	add	sp, sp, #8
   1668c:	b	130e8 <__assert_fail@plt+0x18bc>
   16690:	mov	r3, #0
   16694:	mov	r2, #1
   16698:	str	r1, [r0]
   1669c:	str	r1, [r0, #4]
   166a0:	str	r1, [r0, #8]
   166a4:	str	r1, [r0, #12]
   166a8:	str	r1, [r0, #16]
   166ac:	str	r3, [r0, #20]
   166b0:	str	r3, [r0, #24]
   166b4:	strb	r2, [r0, #28]
   166b8:	bx	lr
   166bc:	ldrb	r0, [r0, #28]
   166c0:	bx	lr
   166c4:	ldrb	ip, [r0, #28]
   166c8:	mov	r2, r0
   166cc:	ldr	r3, [r0, #20]
   166d0:	eor	ip, ip, #1
   166d4:	add	r3, ip, r3
   166d8:	and	r3, r3, #3
   166dc:	ldr	r0, [r0, r3, lsl #2]
   166e0:	str	r1, [r2, r3, lsl #2]
   166e4:	ldr	r1, [r2, #24]
   166e8:	str	r3, [r2, #20]
   166ec:	cmp	r1, r3
   166f0:	bne	16700 <__assert_fail@plt+0x4ed4>
   166f4:	add	ip, ip, r1
   166f8:	and	ip, ip, #3
   166fc:	str	ip, [r2, #24]
   16700:	mov	r3, #0
   16704:	strb	r3, [r2, #28]
   16708:	bx	lr
   1670c:	ldrb	r3, [r0, #28]
   16710:	cmp	r3, #0
   16714:	bne	16750 <__assert_fail@plt+0x4f24>
   16718:	ldr	r1, [r0, #16]
   1671c:	ldr	r3, [r0, #20]
   16720:	ldr	r2, [r0, r3, lsl #2]
   16724:	str	r1, [r0, r3, lsl #2]
   16728:	ldr	r1, [r0, #24]
   1672c:	cmp	r3, r1
   16730:	moveq	r3, #1
   16734:	strbeq	r3, [r0, #28]
   16738:	beq	16748 <__assert_fail@plt+0x4f1c>
   1673c:	add	r3, r3, #3
   16740:	and	r3, r3, #3
   16744:	str	r3, [r0, #20]
   16748:	mov	r0, r2
   1674c:	bx	lr
   16750:	str	r4, [sp, #-8]!
   16754:	str	lr, [sp, #4]
   16758:	bl	117d8 <abort@plt>

0001675c <lchmod@@Base>:
   1675c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16760:	mov	r5, r1
   16764:	mov	r1, #2654208	; 0x288000
   16768:	strd	r6, [sp, #8]
   1676c:	strd	r8, [sp, #16]
   16770:	mov	r9, r0
   16774:	str	lr, [sp, #24]
   16778:	sub	sp, sp, #148	; 0x94
   1677c:	bl	115bc <open64@plt>
   16780:	subs	r4, r0, #0
   16784:	blt	16820 <lchmod@@Base+0xc4>
   16788:	mov	r0, #4096	; 0x1000
   1678c:	add	r3, sp, #40	; 0x28
   16790:	mov	r1, r4
   16794:	movw	r2, #45460	; 0xb194
   16798:	movt	r2, #1
   1679c:	str	r0, [sp]
   167a0:	mov	r0, #3
   167a4:	bl	11538 <__fxstatat64@plt>
   167a8:	mov	r6, r0
   167ac:	bl	11688 <__errno_location@plt>
   167b0:	cmp	r6, #0
   167b4:	mov	r7, r0
   167b8:	bne	16868 <lchmod@@Base+0x10c>
   167bc:	ldr	r3, [sp, #56]	; 0x38
   167c0:	and	r3, r3, #61440	; 0xf000
   167c4:	cmp	r3, #40960	; 0xa000
   167c8:	beq	16850 <lchmod@@Base+0xf4>
   167cc:	mov	r2, #26
   167d0:	mov	r1, #1
   167d4:	str	r4, [sp]
   167d8:	movw	r3, #45488	; 0xb1b0
   167dc:	movt	r3, #1
   167e0:	add	r0, sp, #12
   167e4:	bl	11694 <__sprintf_chk@plt>
   167e8:	mov	r1, r5
   167ec:	add	r0, sp, #12
   167f0:	bl	117b4 <chmod@plt>
   167f4:	mov	r6, r0
   167f8:	mov	r0, r4
   167fc:	ldr	r8, [r7]
   16800:	bl	117e4 <close@plt>
   16804:	cmp	r6, #0
   16808:	moveq	r4, r6
   1680c:	beq	16820 <lchmod@@Base+0xc4>
   16810:	cmp	r8, #2
   16814:	beq	1683c <lchmod@@Base+0xe0>
   16818:	mov	r4, r6
   1681c:	str	r8, [r7]
   16820:	mov	r0, r4
   16824:	add	sp, sp, #148	; 0x94
   16828:	ldrd	r4, [sp]
   1682c:	ldrd	r6, [sp, #8]
   16830:	ldrd	r8, [sp, #16]
   16834:	add	sp, sp, #24
   16838:	pop	{pc}		; (ldr pc, [sp], #4)
   1683c:	mov	r1, r5
   16840:	mov	r0, r9
   16844:	bl	117b4 <chmod@plt>
   16848:	mov	r4, r0
   1684c:	b	16820 <lchmod@@Base+0xc4>
   16850:	mov	r0, r4
   16854:	mvn	r4, #0
   16858:	bl	117e4 <close@plt>
   1685c:	mov	r3, #95	; 0x5f
   16860:	str	r3, [r7]
   16864:	b	16820 <lchmod@@Base+0xc4>
   16868:	ldr	r5, [r7]
   1686c:	mov	r0, r4
   16870:	mvn	r4, #0
   16874:	bl	117e4 <close@plt>
   16878:	str	r5, [r7]
   1687c:	b	16820 <lchmod@@Base+0xc4>
   16880:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16884:	mov	r4, r0
   16888:	strd	r6, [sp, #8]
   1688c:	strd	r8, [sp, #16]
   16890:	strd	sl, [sp, #24]
   16894:	str	lr, [sp, #32]
   16898:	sub	sp, sp, #4
   1689c:	ldrb	r3, [r0]
   168a0:	sub	r2, r3, #48	; 0x30
   168a4:	cmp	r2, #7
   168a8:	bls	169f4 <lchmod@@Base+0x298>
   168ac:	cmp	r3, #0
   168b0:	moveq	r0, #1
   168b4:	beq	168e4 <lchmod@@Base+0x188>
   168b8:	mov	r2, r4
   168bc:	mov	r0, #1
   168c0:	and	r1, r3, #239	; 0xef
   168c4:	cmp	r3, #43	; 0x2b
   168c8:	cmpne	r1, #45	; 0x2d
   168cc:	ldrb	r3, [r2, #1]!
   168d0:	moveq	r1, #1
   168d4:	movne	r1, #0
   168d8:	add	r0, r0, r1
   168dc:	cmp	r3, #0
   168e0:	bne	168c0 <lchmod@@Base+0x164>
   168e4:	mov	r1, #16
   168e8:	movw	sl, #519	; 0x207
   168ec:	bl	19b9c <lchmod@@Base+0x3440>
   168f0:	mov	r7, #3
   168f4:	mov	lr, #0
   168f8:	mov	r5, #0
   168fc:	ldrb	r1, [r4]
   16900:	mov	r2, r4
   16904:	add	r4, r4, #1
   16908:	cmp	r1, #97	; 0x61
   1690c:	beq	16b98 <lchmod@@Base+0x43c>
   16910:	bls	16950 <lchmod@@Base+0x1f4>
   16914:	cmp	r1, #111	; 0x6f
   16918:	beq	16b90 <lchmod@@Base+0x434>
   1691c:	cmp	r1, #117	; 0x75
   16920:	beq	16ba0 <lchmod@@Base+0x444>
   16924:	cmp	r1, #103	; 0x67
   16928:	beq	16ba8 <lchmod@@Base+0x44c>
   1692c:	bl	130e8 <__assert_fail@plt+0x18bc>
   16930:	mov	r0, #0
   16934:	add	sp, sp, #4
   16938:	ldrd	r4, [sp]
   1693c:	ldrd	r6, [sp, #8]
   16940:	ldrd	r8, [sp, #16]
   16944:	ldrd	sl, [sp, #24]
   16948:	add	sp, sp, #32
   1694c:	pop	{pc}		; (ldr pc, [sp], #4)
   16950:	cmp	r1, #45	; 0x2d
   16954:	beq	16968 <lchmod@@Base+0x20c>
   16958:	cmp	r1, #61	; 0x3d
   1695c:	beq	16968 <lchmod@@Base+0x20c>
   16960:	cmp	r1, #43	; 0x2b
   16964:	bne	1692c <lchmod@@Base+0x1d0>
   16968:	add	r6, lr, #1
   1696c:	mov	r9, #1
   16970:	add	lr, r0, lr, lsl #4
   16974:	movw	r8, #4095	; 0xfff
   16978:	b	169cc <lchmod@@Base+0x270>
   1697c:	cmp	r3, #117	; 0x75
   16980:	addeq	r3, r2, #2
   16984:	moveq	r4, #448	; 0x1c0
   16988:	bne	16a98 <lchmod@@Base+0x33c>
   1698c:	strb	r1, [lr]
   16990:	ldrb	r1, [r2, #2]
   16994:	mov	r2, r3
   16998:	strb	r7, [lr, #1]
   1699c:	str	r5, [lr, #4]
   169a0:	str	r4, [lr, #8]
   169a4:	cmp	r5, #0
   169a8:	andne	r4, r4, r5
   169ac:	and	r3, r1, #239	; 0xef
   169b0:	add	lr, lr, #16
   169b4:	str	r4, [lr, #-4]
   169b8:	cmp	r1, #43	; 0x2b
   169bc:	cmpne	r3, #45	; 0x2d
   169c0:	add	r3, r6, #1
   169c4:	bne	16bfc <lchmod@@Base+0x4a0>
   169c8:	mov	r6, r3
   169cc:	ldrb	r3, [r2, #1]
   169d0:	add	ip, r2, #1
   169d4:	cmp	r3, #103	; 0x67
   169d8:	beq	16b84 <lchmod@@Base+0x428>
   169dc:	bls	16a2c <lchmod@@Base+0x2d0>
   169e0:	cmp	r3, #111	; 0x6f
   169e4:	bne	1697c <lchmod@@Base+0x220>
   169e8:	add	r3, r2, #2
   169ec:	mov	r4, #7
   169f0:	b	1698c <lchmod@@Base+0x230>
   169f4:	add	r1, r0, #1
   169f8:	mov	r5, #0
   169fc:	b	16a10 <lchmod@@Base+0x2b4>
   16a00:	ldrb	r3, [r1], #1
   16a04:	sub	r0, r3, #48	; 0x30
   16a08:	cmp	r0, #7
   16a0c:	bhi	16bb4 <lchmod@@Base+0x458>
   16a10:	add	r5, r3, r5, lsl #3
   16a14:	mov	r2, r1
   16a18:	sub	r5, r5, #48	; 0x30
   16a1c:	cmp	r5, #4096	; 0x1000
   16a20:	bcc	16a00 <lchmod@@Base+0x2a4>
   16a24:	mov	r0, #0
   16a28:	b	16934 <lchmod@@Base+0x1d8>
   16a2c:	sub	r4, r3, #48	; 0x30
   16a30:	cmp	r4, #7
   16a34:	addls	r4, r2, #2
   16a38:	movls	ip, #0
   16a3c:	bhi	16a98 <lchmod@@Base+0x33c>
   16a40:	add	ip, r3, ip, lsl #3
   16a44:	mov	r2, r4
   16a48:	sub	ip, ip, #48	; 0x30
   16a4c:	cmp	ip, #4096	; 0x1000
   16a50:	bcs	1692c <lchmod@@Base+0x1d0>
   16a54:	ldrb	r3, [r4]
   16a58:	add	r4, r4, #1
   16a5c:	sub	fp, r3, #48	; 0x30
   16a60:	cmp	fp, #7
   16a64:	bls	16a40 <lchmod@@Base+0x2e4>
   16a68:	cmp	r5, #0
   16a6c:	bne	1692c <lchmod@@Base+0x1d0>
   16a70:	cmp	r3, #0
   16a74:	cmpne	r3, #44	; 0x2c
   16a78:	bne	1692c <lchmod@@Base+0x1d0>
   16a7c:	movw	r5, #4095	; 0xfff
   16a80:	strb	r1, [lr]
   16a84:	mov	r1, r3
   16a88:	mov	r4, r5
   16a8c:	strb	r9, [lr, #1]
   16a90:	stmib	lr, {r8, ip}
   16a94:	b	169ac <lchmod@@Base+0x250>
   16a98:	mov	fp, #1
   16a9c:	mov	r4, #0
   16aa0:	sub	r2, r3, #88	; 0x58
   16aa4:	cmp	r2, #32
   16aa8:	ldrls	pc, [pc, r2, lsl #2]
   16aac:	b	16b68 <lchmod@@Base+0x40c>
   16ab0:	andeq	r6, r1, r4, lsr fp
   16ab4:	andeq	r6, r1, r8, ror #22
   16ab8:	andeq	r6, r1, r8, ror #22
   16abc:	andeq	r6, r1, r8, ror #22
   16ac0:	andeq	r6, r1, r8, ror #22
   16ac4:	andeq	r6, r1, r8, ror #22
   16ac8:	andeq	r6, r1, r8, ror #22
   16acc:	andeq	r6, r1, r8, ror #22
   16ad0:	andeq	r6, r1, r8, ror #22
   16ad4:	andeq	r6, r1, r8, ror #22
   16ad8:	andeq	r6, r1, r8, ror #22
   16adc:	andeq	r6, r1, r8, ror #22
   16ae0:	andeq	r6, r1, r8, ror #22
   16ae4:	andeq	r6, r1, r8, ror #22
   16ae8:	andeq	r6, r1, r8, ror #22
   16aec:	andeq	r6, r1, r8, ror #22
   16af0:	andeq	r6, r1, r8, ror #22
   16af4:	andeq	r6, r1, r8, ror #22
   16af8:	andeq	r6, r1, r8, ror #22
   16afc:	andeq	r6, r1, r8, ror #22
   16b00:	andeq	r6, r1, r8, ror #22
   16b04:	andeq	r6, r1, r8, ror #22
   16b08:	andeq	r6, r1, r8, ror #22
   16b0c:	andeq	r6, r1, r8, ror #22
   16b10:	andeq	r6, r1, r8, ror #22
   16b14:	andeq	r6, r1, r8, ror #22
   16b18:	andeq	r6, r1, r0, ror #22
   16b1c:	andeq	r6, r1, r8, asr fp
   16b20:	andeq	r6, r1, r0, asr fp
   16b24:	andeq	r6, r1, r8, ror #22
   16b28:	andeq	r6, r1, r8, ror #22
   16b2c:	andeq	r6, r1, r8, asr #22
   16b30:	andeq	r6, r1, r0, asr #22
   16b34:	mov	fp, #2
   16b38:	ldrb	r3, [ip, #1]!
   16b3c:	b	16aa0 <lchmod@@Base+0x344>
   16b40:	orr	r4, r4, #73	; 0x49
   16b44:	b	16b38 <lchmod@@Base+0x3dc>
   16b48:	orr	r4, r4, #146	; 0x92
   16b4c:	b	16b38 <lchmod@@Base+0x3dc>
   16b50:	orr	r4, r4, #512	; 0x200
   16b54:	b	16b38 <lchmod@@Base+0x3dc>
   16b58:	orr	r4, r4, #3072	; 0xc00
   16b5c:	b	16b38 <lchmod@@Base+0x3dc>
   16b60:	orr	r4, r4, #292	; 0x124
   16b64:	b	16b38 <lchmod@@Base+0x3dc>
   16b68:	mov	r2, ip
   16b6c:	strb	r1, [lr]
   16b70:	mov	r1, r3
   16b74:	strb	fp, [lr, #1]
   16b78:	str	r5, [lr, #4]
   16b7c:	str	r4, [lr, #8]
   16b80:	b	169a4 <lchmod@@Base+0x248>
   16b84:	add	r3, r2, #2
   16b88:	mov	r4, #56	; 0x38
   16b8c:	b	1698c <lchmod@@Base+0x230>
   16b90:	orr	r5, r5, sl
   16b94:	b	168fc <lchmod@@Base+0x1a0>
   16b98:	movw	r5, #4095	; 0xfff
   16b9c:	b	168fc <lchmod@@Base+0x1a0>
   16ba0:	orr	r5, r5, #2496	; 0x9c0
   16ba4:	b	168fc <lchmod@@Base+0x1a0>
   16ba8:	orr	r5, r5, #1072	; 0x430
   16bac:	orr	r5, r5, #8
   16bb0:	b	168fc <lchmod@@Base+0x1a0>
   16bb4:	cmp	r3, #0
   16bb8:	bne	16a24 <lchmod@@Base+0x2c8>
   16bbc:	sub	r2, r2, r4
   16bc0:	mov	r0, #32
   16bc4:	cmp	r2, #4
   16bc8:	andle	r4, r5, #3072	; 0xc00
   16bcc:	movwgt	r4, #4095	; 0xfff
   16bd0:	mvnle	r4, r4, lsr #10
   16bd4:	mvnle	r4, r4, lsl #10
   16bd8:	bl	19a34 <lchmod@@Base+0x32d8>
   16bdc:	movw	r1, #317	; 0x13d
   16be0:	movw	r2, #4095	; 0xfff
   16be4:	mov	r3, #0
   16be8:	strh	r1, [r0]
   16bec:	stmib	r0, {r2, r5}
   16bf0:	str	r4, [r0, #12]
   16bf4:	strb	r3, [r0, #17]
   16bf8:	b	16934 <lchmod@@Base+0x1d8>
   16bfc:	cmp	r1, #44	; 0x2c
   16c00:	bne	16c10 <lchmod@@Base+0x4b4>
   16c04:	add	r4, r2, #1
   16c08:	mov	lr, r6
   16c0c:	b	168f8 <lchmod@@Base+0x19c>
   16c10:	cmp	r1, #0
   16c14:	addeq	r6, r0, r6, lsl #4
   16c18:	strbeq	r1, [r6, #1]
   16c1c:	beq	16934 <lchmod@@Base+0x1d8>
   16c20:	b	1692c <lchmod@@Base+0x1d0>
   16c24:	strd	r4, [sp, #-12]!
   16c28:	mov	r1, r0
   16c2c:	mov	r0, #3
   16c30:	str	lr, [sp, #8]
   16c34:	sub	sp, sp, #108	; 0x6c
   16c38:	mov	r2, sp
   16c3c:	bl	117c0 <__xstat64@plt>
   16c40:	subs	r4, r0, #0
   16c44:	movne	r0, #0
   16c48:	bne	16c70 <lchmod@@Base+0x514>
   16c4c:	ldr	r5, [sp, #16]
   16c50:	mov	r0, #32
   16c54:	bl	19a34 <lchmod@@Base+0x32d8>
   16c58:	movw	r3, #4095	; 0xfff
   16c5c:	movw	r2, #317	; 0x13d
   16c60:	strh	r2, [r0]
   16c64:	stmib	r0, {r3, r5}
   16c68:	str	r3, [r0, #12]
   16c6c:	strb	r4, [r0, #17]
   16c70:	add	sp, sp, #108	; 0x6c
   16c74:	ldrd	r4, [sp]
   16c78:	add	sp, sp, #8
   16c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c80:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16c84:	ubfx	r0, r0, #0, #12
   16c88:	strd	r6, [sp, #8]
   16c8c:	strd	r8, [sp, #16]
   16c90:	str	lr, [sp, #24]
   16c94:	ldrb	r4, [r3, #1]
   16c98:	ldr	r9, [sp, #28]
   16c9c:	cmp	r4, #0
   16ca0:	beq	16df0 <lchmod@@Base+0x694>
   16ca4:	add	r3, r3, #16
   16ca8:	mvn	r2, r2
   16cac:	mov	r7, #0
   16cb0:	mvn	r8, #3072	; 0xc00
   16cb4:	b	16d30 <lchmod@@Base+0x5d4>
   16cb8:	cmp	r4, #2
   16cbc:	mvn	lr, #0
   16cc0:	beq	16de0 <lchmod@@Base+0x684>
   16cc4:	mov	r5, r1
   16cc8:	cmp	r4, #3
   16ccc:	bne	16cf4 <lchmod@@Base+0x598>
   16cd0:	and	ip, ip, r0
   16cd4:	tst	ip, #292	; 0x124
   16cd8:	movne	r4, #292	; 0x124
   16cdc:	moveq	r4, #0
   16ce0:	tst	ip, #146	; 0x92
   16ce4:	orrne	r4, r4, #146	; 0x92
   16ce8:	tst	ip, #73	; 0x49
   16cec:	orrne	r4, r4, #73	; 0x49
   16cf0:	orr	ip, r4, ip
   16cf4:	cmp	r6, #0
   16cf8:	and	ip, ip, lr
   16cfc:	ldrb	r4, [r3, #-16]
   16d00:	bne	16d6c <lchmod@@Base+0x610>
   16d04:	cmp	r4, #45	; 0x2d
   16d08:	and	ip, ip, r2
   16d0c:	beq	16dc8 <lchmod@@Base+0x66c>
   16d10:	cmp	r4, #61	; 0x3d
   16d14:	beq	16d8c <lchmod@@Base+0x630>
   16d18:	cmp	r4, #43	; 0x2b
   16d1c:	beq	16dd4 <lchmod@@Base+0x678>
   16d20:	add	r3, r3, #16
   16d24:	ldrb	r4, [r3, #-15]
   16d28:	cmp	r4, #0
   16d2c:	beq	16dac <lchmod@@Base+0x650>
   16d30:	cmp	r1, #0
   16d34:	ldr	r6, [r3, #-12]
   16d38:	ldr	ip, [r3, #-8]
   16d3c:	beq	16cb8 <lchmod@@Base+0x55c>
   16d40:	cmp	r4, #2
   16d44:	ldr	lr, [r3, #-4]
   16d48:	mvn	r5, lr
   16d4c:	orr	lr, lr, r8
   16d50:	and	r5, r5, #3072	; 0xc00
   16d54:	bne	16cc8 <lchmod@@Base+0x56c>
   16d58:	orr	ip, ip, #73	; 0x49
   16d5c:	cmp	r6, #0
   16d60:	ldrb	r4, [r3, #-16]
   16d64:	and	ip, ip, lr
   16d68:	beq	16d04 <lchmod@@Base+0x5a8>
   16d6c:	cmp	r4, #45	; 0x2d
   16d70:	and	ip, ip, r6
   16d74:	beq	16dc8 <lchmod@@Base+0x66c>
   16d78:	cmp	r4, #61	; 0x3d
   16d7c:	bne	16d18 <lchmod@@Base+0x5bc>
   16d80:	mvn	r6, r6
   16d84:	orr	r5, r5, r6
   16d88:	mvn	lr, r5
   16d8c:	add	r3, r3, #16
   16d90:	ldrb	r4, [r3, #-15]
   16d94:	ubfx	lr, lr, #0, #12
   16d98:	and	r0, r0, r5
   16d9c:	orr	r0, r0, ip
   16da0:	orr	r7, r7, lr
   16da4:	cmp	r4, #0
   16da8:	bne	16d30 <lchmod@@Base+0x5d4>
   16dac:	cmp	r9, #0
   16db0:	ldrd	r4, [sp]
   16db4:	strne	r7, [r9]
   16db8:	ldrd	r6, [sp, #8]
   16dbc:	ldrd	r8, [sp, #16]
   16dc0:	add	sp, sp, #24
   16dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc8:	orr	r7, r7, ip
   16dcc:	bic	r0, r0, ip
   16dd0:	b	16d20 <lchmod@@Base+0x5c4>
   16dd4:	orr	r7, r7, ip
   16dd8:	orr	r0, r0, ip
   16ddc:	b	16d20 <lchmod@@Base+0x5c4>
   16de0:	ands	r5, r0, #73	; 0x49
   16de4:	beq	16cf4 <lchmod@@Base+0x598>
   16de8:	mov	r5, r1
   16dec:	b	16d58 <lchmod@@Base+0x5fc>
   16df0:	mov	r7, r4
   16df4:	b	16dac <lchmod@@Base+0x650>
   16df8:	push	{r2, r3}
   16dfc:	push	{lr}		; (str lr, [sp, #-4]!)
   16e00:	sub	sp, sp, #12
   16e04:	ldr	r2, [sp, #16]
   16e08:	ands	r3, r2, #64	; 0x40
   16e0c:	bne	16e28 <lchmod@@Base+0x6cc>
   16e10:	bl	11670 <openat64@plt>
   16e14:	bl	19444 <lchmod@@Base+0x2ce8>
   16e18:	add	sp, sp, #12
   16e1c:	pop	{lr}		; (ldr lr, [sp], #4)
   16e20:	add	sp, sp, #8
   16e24:	bx	lr
   16e28:	add	ip, sp, #20
   16e2c:	ldr	r3, [sp, #20]
   16e30:	str	ip, [sp, #4]
   16e34:	b	16e10 <lchmod@@Base+0x6b4>
   16e38:	orr	r2, r2, #540672	; 0x84000
   16e3c:	strd	r4, [sp, #-16]!
   16e40:	orr	r2, r2, #2304	; 0x900
   16e44:	str	r6, [sp, #8]
   16e48:	mov	r6, r3
   16e4c:	str	lr, [sp, #12]
   16e50:	bl	16df8 <lchmod@@Base+0x69c>
   16e54:	subs	r5, r0, #0
   16e58:	movlt	r4, #0
   16e5c:	blt	16e70 <lchmod@@Base+0x714>
   16e60:	bl	1173c <fdopendir@plt>
   16e64:	subs	r4, r0, #0
   16e68:	beq	16e84 <lchmod@@Base+0x728>
   16e6c:	str	r5, [r6]
   16e70:	mov	r0, r4
   16e74:	ldrd	r4, [sp]
   16e78:	ldr	r6, [sp, #8]
   16e7c:	add	sp, sp, #12
   16e80:	pop	{pc}		; (ldr pc, [sp], #4)
   16e84:	bl	11688 <__errno_location@plt>
   16e88:	mov	r6, r0
   16e8c:	mov	r0, r5
   16e90:	ldr	r5, [r6]
   16e94:	bl	117e4 <close@plt>
   16e98:	b	16e6c <lchmod@@Base+0x710>
   16e9c:	strd	r4, [sp, #-16]!
   16ea0:	subs	r4, r0, #0
   16ea4:	str	r6, [sp, #8]
   16ea8:	str	lr, [sp, #12]
   16eac:	beq	16f44 <lchmod@@Base+0x7e8>
   16eb0:	mov	r1, #47	; 0x2f
   16eb4:	bl	11718 <strrchr@plt>
   16eb8:	subs	r5, r0, #0
   16ebc:	beq	16f1c <lchmod@@Base+0x7c0>
   16ec0:	add	r6, r5, #1
   16ec4:	sub	r3, r6, r4
   16ec8:	cmp	r3, #6
   16ecc:	ble	16f1c <lchmod@@Base+0x7c0>
   16ed0:	movw	r1, #45564	; 0xb1fc
   16ed4:	movt	r1, #1
   16ed8:	mov	r2, #7
   16edc:	sub	r0, r5, #6
   16ee0:	bl	117cc <strncmp@plt>
   16ee4:	cmp	r0, #0
   16ee8:	bne	16f1c <lchmod@@Base+0x7c0>
   16eec:	movw	r1, #45572	; 0xb204
   16ef0:	movt	r1, #1
   16ef4:	mov	r2, #3
   16ef8:	mov	r0, r6
   16efc:	bl	117cc <strncmp@plt>
   16f00:	cmp	r0, #0
   16f04:	movne	r4, r6
   16f08:	bne	16f1c <lchmod@@Base+0x7c0>
   16f0c:	add	r4, r5, #4
   16f10:	movw	r3, #49608	; 0xc1c8
   16f14:	movt	r3, #2
   16f18:	str	r4, [r3]
   16f1c:	movw	r2, #49648	; 0xc1f0
   16f20:	movt	r2, #2
   16f24:	ldr	r6, [sp, #8]
   16f28:	movw	r3, #49612	; 0xc1cc
   16f2c:	movt	r3, #2
   16f30:	str	r4, [r2]
   16f34:	str	r4, [r3]
   16f38:	ldrd	r4, [sp]
   16f3c:	add	sp, sp, #12
   16f40:	pop	{pc}		; (ldr pc, [sp], #4)
   16f44:	movw	r3, #49624	; 0xc1d8
   16f48:	movt	r3, #2
   16f4c:	movw	r0, #45508	; 0xb1c4
   16f50:	movt	r0, #1
   16f54:	ldr	r3, [r3]
   16f58:	mov	r2, #55	; 0x37
   16f5c:	mov	r1, #1
   16f60:	bl	11568 <fwrite@plt>
   16f64:	bl	117d8 <abort@plt>
   16f68:	strd	r4, [sp, #-16]!
   16f6c:	mov	r4, #0
   16f70:	mov	r5, #0
   16f74:	cmp	r1, #10
   16f78:	str	r6, [sp, #8]
   16f7c:	strd	r4, [r0]
   16f80:	strd	r4, [r0, #8]
   16f84:	str	lr, [sp, #12]
   16f88:	strd	r4, [r0, #16]
   16f8c:	strd	r4, [r0, #24]
   16f90:	strd	r4, [r0, #32]
   16f94:	strd	r4, [r0, #40]	; 0x28
   16f98:	beq	16fb0 <lchmod@@Base+0x854>
   16f9c:	ldrd	r4, [sp]
   16fa0:	str	r1, [r0]
   16fa4:	ldr	r6, [sp, #8]
   16fa8:	add	sp, sp, #12
   16fac:	pop	{pc}		; (ldr pc, [sp], #4)
   16fb0:	bl	117d8 <abort@plt>
   16fb4:	mov	r2, #5
   16fb8:	strd	r4, [sp, #-16]!
   16fbc:	mov	r5, r0
   16fc0:	str	r6, [sp, #8]
   16fc4:	mov	r6, r1
   16fc8:	mov	r1, r0
   16fcc:	mov	r0, #0
   16fd0:	str	lr, [sp, #12]
   16fd4:	bl	114f0 <dcgettext@plt>
   16fd8:	cmp	r5, r0
   16fdc:	mov	r4, r0
   16fe0:	beq	16ff8 <lchmod@@Base+0x89c>
   16fe4:	mov	r0, r4
   16fe8:	ldrd	r4, [sp]
   16fec:	ldr	r6, [sp, #8]
   16ff0:	add	sp, sp, #12
   16ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ff8:	bl	1a728 <lchmod@@Base+0x3fcc>
   16ffc:	ldrb	r3, [r0]
   17000:	bic	r3, r3, #32
   17004:	cmp	r3, #85	; 0x55
   17008:	bne	17070 <lchmod@@Base+0x914>
   1700c:	ldrb	r3, [r0, #1]
   17010:	bic	r3, r3, #32
   17014:	cmp	r3, #84	; 0x54
   17018:	bne	170f0 <lchmod@@Base+0x994>
   1701c:	ldrb	r3, [r0, #2]
   17020:	bic	r3, r3, #32
   17024:	cmp	r3, #70	; 0x46
   17028:	bne	170f0 <lchmod@@Base+0x994>
   1702c:	ldrb	r3, [r0, #3]
   17030:	cmp	r3, #45	; 0x2d
   17034:	bne	170f0 <lchmod@@Base+0x994>
   17038:	ldrb	r3, [r0, #4]
   1703c:	cmp	r3, #56	; 0x38
   17040:	bne	170f0 <lchmod@@Base+0x994>
   17044:	ldrb	r3, [r0, #5]
   17048:	cmp	r3, #0
   1704c:	bne	170f0 <lchmod@@Base+0x994>
   17050:	ldrb	r2, [r4]
   17054:	movw	r3, #45664	; 0xb260
   17058:	movt	r3, #1
   1705c:	movw	r4, #45676	; 0xb26c
   17060:	movt	r4, #1
   17064:	cmp	r2, #96	; 0x60
   17068:	movne	r4, r3
   1706c:	b	16fe4 <lchmod@@Base+0x888>
   17070:	cmp	r3, #71	; 0x47
   17074:	bne	170f0 <lchmod@@Base+0x994>
   17078:	ldrb	r3, [r0, #1]
   1707c:	bic	r3, r3, #32
   17080:	cmp	r3, #66	; 0x42
   17084:	bne	170f0 <lchmod@@Base+0x994>
   17088:	ldrb	r3, [r0, #2]
   1708c:	cmp	r3, #49	; 0x31
   17090:	bne	170f0 <lchmod@@Base+0x994>
   17094:	ldrb	r3, [r0, #3]
   17098:	cmp	r3, #56	; 0x38
   1709c:	bne	170f0 <lchmod@@Base+0x994>
   170a0:	ldrb	r3, [r0, #4]
   170a4:	cmp	r3, #48	; 0x30
   170a8:	bne	170f0 <lchmod@@Base+0x994>
   170ac:	ldrb	r3, [r0, #5]
   170b0:	cmp	r3, #51	; 0x33
   170b4:	bne	170f0 <lchmod@@Base+0x994>
   170b8:	ldrb	r3, [r0, #6]
   170bc:	cmp	r3, #48	; 0x30
   170c0:	bne	170f0 <lchmod@@Base+0x994>
   170c4:	ldrb	r3, [r0, #7]
   170c8:	cmp	r3, #0
   170cc:	bne	170f0 <lchmod@@Base+0x994>
   170d0:	ldrb	r2, [r4]
   170d4:	movw	r3, #45668	; 0xb264
   170d8:	movt	r3, #1
   170dc:	movw	r4, #45672	; 0xb268
   170e0:	movt	r4, #1
   170e4:	cmp	r2, #96	; 0x60
   170e8:	movne	r4, r3
   170ec:	b	16fe4 <lchmod@@Base+0x888>
   170f0:	movw	r3, #45680	; 0xb270
   170f4:	movt	r3, #1
   170f8:	cmp	r6, #9
   170fc:	movw	r4, #45660	; 0xb25c
   17100:	movt	r4, #1
   17104:	movne	r4, r3
   17108:	b	16fe4 <lchmod@@Base+0x888>
   1710c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17110:	strd	r6, [sp, #8]
   17114:	strd	r8, [sp, #16]
   17118:	strd	sl, [sp, #24]
   1711c:	mov	fp, r0
   17120:	mov	sl, r1
   17124:	str	lr, [sp, #32]
   17128:	sub	sp, sp, #116	; 0x74
   1712c:	ldr	r8, [sp, #152]	; 0x98
   17130:	str	r3, [sp, #28]
   17134:	ldr	r3, [sp, #156]	; 0x9c
   17138:	str	r2, [sp, #32]
   1713c:	and	r4, r3, #2
   17140:	ubfx	r3, r3, #1, #1
   17144:	str	r3, [sp, #44]	; 0x2c
   17148:	bl	11580 <__ctype_get_mb_cur_max@plt>
   1714c:	str	r0, [sp, #64]	; 0x40
   17150:	cmp	r8, #10
   17154:	ldrls	pc, [pc, r8, lsl #2]
   17158:	b	188c8 <lchmod@@Base+0x216c>
   1715c:	andeq	r7, r1, r0, ror #10
   17160:	strdeq	r7, [r1], -ip
   17164:	ldrdeq	r7, [r1], -r8
   17168:	andeq	r7, r1, ip, lsl r6
   1716c:	andeq	r7, r1, r4, asr #9
   17170:	andeq	r7, r1, r0, lsl r5
   17174:	muleq	r1, r0, r5
   17178:	andeq	r7, r1, ip, asr #11
   1717c:	andeq	r7, r1, r8, lsl #3
   17180:	andeq	r7, r1, r8, lsl #3
   17184:	andeq	r7, r1, r8, lsl #3
   17188:	cmp	r8, #10
   1718c:	beq	171b8 <lchmod@@Base+0xa5c>
   17190:	mov	r1, r8
   17194:	movw	r0, #45684	; 0xb274
   17198:	movt	r0, #1
   1719c:	bl	16fb4 <lchmod@@Base+0x858>
   171a0:	mov	r1, r8
   171a4:	str	r0, [sp, #164]	; 0xa4
   171a8:	movw	r0, #45680	; 0xb270
   171ac:	movt	r0, #1
   171b0:	bl	16fb4 <lchmod@@Base+0x858>
   171b4:	str	r0, [sp, #168]	; 0xa8
   171b8:	cmp	r4, #0
   171bc:	movne	r4, #0
   171c0:	beq	185a4 <lchmod@@Base+0x1e48>
   171c4:	mov	r3, #1
   171c8:	mov	r5, #0
   171cc:	ldr	r0, [sp, #168]	; 0xa8
   171d0:	str	r3, [sp, #36]	; 0x24
   171d4:	str	r3, [sp, #40]	; 0x28
   171d8:	str	r5, [sp, #68]	; 0x44
   171dc:	bl	11658 <strlen@plt>
   171e0:	ldr	r3, [sp, #168]	; 0xa8
   171e4:	str	r5, [sp, #48]	; 0x30
   171e8:	str	r0, [sp, #56]	; 0x38
   171ec:	str	r3, [sp, #60]	; 0x3c
   171f0:	str	r5, [sp, #72]	; 0x48
   171f4:	str	r8, [sp, #152]	; 0x98
   171f8:	mov	r8, fp
   171fc:	mov	r9, #0
   17200:	ldr	fp, [sp, #152]	; 0x98
   17204:	ldr	r3, [sp, #28]
   17208:	cmn	r3, #1
   1720c:	beq	1776c <lchmod@@Base+0x1010>
   17210:	ldr	r3, [sp, #28]
   17214:	subs	r6, r3, r9
   17218:	movne	r6, #1
   1721c:	cmp	r6, #0
   17220:	beq	17784 <lchmod@@Base+0x1028>
   17224:	ldr	r0, [sp, #32]
   17228:	ldr	r7, [sp, #40]	; 0x28
   1722c:	add	r3, r0, r9
   17230:	cmp	fp, #2
   17234:	moveq	r7, #0
   17238:	andne	r7, r7, #1
   1723c:	str	r3, [sp, #52]	; 0x34
   17240:	cmp	r7, #0
   17244:	beq	17c20 <lchmod@@Base+0x14c4>
   17248:	ldr	r2, [sp, #56]	; 0x38
   1724c:	cmp	r2, #0
   17250:	beq	17ebc <lchmod@@Base+0x1760>
   17254:	ldr	r1, [sp, #28]
   17258:	cmp	r2, #1
   1725c:	mov	r3, r2
   17260:	movls	r3, #0
   17264:	movhi	r3, #1
   17268:	add	r5, r9, r2
   1726c:	cmn	r1, #1
   17270:	movne	r3, #0
   17274:	cmp	r3, #0
   17278:	beq	17284 <lchmod@@Base+0xb28>
   1727c:	bl	11658 <strlen@plt>
   17280:	str	r0, [sp, #28]
   17284:	ldr	r3, [sp, #28]
   17288:	cmp	r5, r3
   1728c:	bhi	17ebc <lchmod@@Base+0x1760>
   17290:	ldr	r0, [sp, #52]	; 0x34
   17294:	ldr	r2, [sp, #56]	; 0x38
   17298:	ldr	r1, [sp, #60]	; 0x3c
   1729c:	bl	114d8 <memcmp@plt>
   172a0:	cmp	r0, #0
   172a4:	bne	17ebc <lchmod@@Base+0x1760>
   172a8:	ldr	r3, [sp, #44]	; 0x2c
   172ac:	cmp	r3, #0
   172b0:	bne	187ec <lchmod@@Base+0x2090>
   172b4:	ldr	r3, [sp, #52]	; 0x34
   172b8:	ldrb	r5, [r3]
   172bc:	cmp	r5, #126	; 0x7e
   172c0:	ldrls	pc, [pc, r5, lsl #2]
   172c4:	b	17b7c <lchmod@@Base+0x1420>
   172c8:	andeq	r7, r1, r0, lsl #21
   172cc:	andeq	r7, r1, ip, ror fp
   172d0:	andeq	r7, r1, ip, ror fp
   172d4:	andeq	r7, r1, ip, ror fp
   172d8:	andeq	r7, r1, ip, ror fp
   172dc:	andeq	r7, r1, ip, ror fp
   172e0:	andeq	r7, r1, ip, ror fp
   172e4:	andeq	r7, r1, r4, asr sl
   172e8:	andeq	r7, r1, ip, asr #20
   172ec:	muleq	r1, r4, r9
   172f0:	andeq	r7, r1, r0, asr #20
   172f4:	andeq	r7, r1, ip, lsl #19
   172f8:	andeq	r7, r1, ip, lsl sl
   172fc:	andeq	r7, r1, r8, ror #20
   17300:	andeq	r7, r1, ip, ror fp
   17304:	andeq	r7, r1, ip, ror fp
   17308:	andeq	r7, r1, ip, ror fp
   1730c:	andeq	r7, r1, ip, ror fp
   17310:	andeq	r7, r1, ip, ror fp
   17314:	andeq	r7, r1, ip, ror fp
   17318:	andeq	r7, r1, ip, ror fp
   1731c:	andeq	r7, r1, ip, ror fp
   17320:	andeq	r7, r1, ip, ror fp
   17324:	andeq	r7, r1, ip, ror fp
   17328:	andeq	r7, r1, ip, ror fp
   1732c:	andeq	r7, r1, ip, ror fp
   17330:	andeq	r7, r1, ip, ror fp
   17334:	andeq	r7, r1, ip, ror fp
   17338:	andeq	r7, r1, ip, ror fp
   1733c:	andeq	r7, r1, ip, ror fp
   17340:	andeq	r7, r1, ip, ror fp
   17344:	andeq	r7, r1, ip, ror fp
   17348:	andeq	r7, r1, r8, asr fp
   1734c:	andeq	r7, r1, r0, ror #20
   17350:	andeq	r7, r1, r0, ror #20
   17354:	andeq	r7, r1, ip, lsr fp
   17358:	andeq	r7, r1, r0, ror #20
   1735c:	andeq	r7, r1, r0, ror fp
   17360:	andeq	r7, r1, r0, ror #20
   17364:			; <UNDEFINED> instruction: 0x000178bc
   17368:	andeq	r7, r1, r0, ror #20
   1736c:	andeq	r7, r1, r0, ror #20
   17370:	andeq	r7, r1, r0, ror #20
   17374:	andeq	r7, r1, r0, ror fp
   17378:	andeq	r7, r1, r0, ror fp
   1737c:	andeq	r7, r1, r0, ror fp
   17380:	andeq	r7, r1, r0, ror fp
   17384:	andeq	r7, r1, r0, ror fp
   17388:	andeq	r7, r1, r0, ror fp
   1738c:	andeq	r7, r1, r0, ror fp
   17390:	andeq	r7, r1, r0, ror fp
   17394:	andeq	r7, r1, r0, ror fp
   17398:	andeq	r7, r1, r0, ror fp
   1739c:	andeq	r7, r1, r0, ror fp
   173a0:	andeq	r7, r1, r0, ror fp
   173a4:	andeq	r7, r1, r0, ror fp
   173a8:	andeq	r7, r1, r0, ror fp
   173ac:	andeq	r7, r1, r0, ror fp
   173b0:	andeq	r7, r1, r0, ror fp
   173b4:	andeq	r7, r1, r0, ror #20
   173b8:	andeq	r7, r1, r0, ror #20
   173bc:	andeq	r7, r1, r0, ror #20
   173c0:	andeq	r7, r1, r0, ror #20
   173c4:	muleq	r1, r0, r8
   173c8:	andeq	r7, r1, ip, ror fp
   173cc:	andeq	r7, r1, r0, ror fp
   173d0:	andeq	r7, r1, r0, ror fp
   173d4:	andeq	r7, r1, r0, ror fp
   173d8:	andeq	r7, r1, r0, ror fp
   173dc:	andeq	r7, r1, r0, ror fp
   173e0:	andeq	r7, r1, r0, ror fp
   173e4:	andeq	r7, r1, r0, ror fp
   173e8:	andeq	r7, r1, r0, ror fp
   173ec:	andeq	r7, r1, r0, ror fp
   173f0:	andeq	r7, r1, r0, ror fp
   173f4:	andeq	r7, r1, r0, ror fp
   173f8:	andeq	r7, r1, r0, ror fp
   173fc:	andeq	r7, r1, r0, ror fp
   17400:	andeq	r7, r1, r0, ror fp
   17404:	andeq	r7, r1, r0, ror fp
   17408:	andeq	r7, r1, r0, ror fp
   1740c:	andeq	r7, r1, r0, ror fp
   17410:	andeq	r7, r1, r0, ror fp
   17414:	andeq	r7, r1, r0, ror fp
   17418:	andeq	r7, r1, r0, ror fp
   1741c:	andeq	r7, r1, r0, ror fp
   17420:	andeq	r7, r1, r0, ror fp
   17424:	andeq	r7, r1, r0, ror fp
   17428:	andeq	r7, r1, r0, ror fp
   1742c:	andeq	r7, r1, r0, ror fp
   17430:	andeq	r7, r1, r0, ror fp
   17434:	andeq	r7, r1, r0, ror #20
   17438:	andeq	r7, r1, r8, lsr r8
   1743c:	andeq	r7, r1, r0, ror fp
   17440:	andeq	r7, r1, r0, ror #20
   17444:	andeq	r7, r1, r0, ror fp
   17448:	andeq	r7, r1, r0, ror #20
   1744c:	andeq	r7, r1, r0, ror fp
   17450:	andeq	r7, r1, r0, ror fp
   17454:	andeq	r7, r1, r0, ror fp
   17458:	andeq	r7, r1, r0, ror fp
   1745c:	andeq	r7, r1, r0, ror fp
   17460:	andeq	r7, r1, r0, ror fp
   17464:	andeq	r7, r1, r0, ror fp
   17468:	andeq	r7, r1, r0, ror fp
   1746c:	andeq	r7, r1, r0, ror fp
   17470:	andeq	r7, r1, r0, ror fp
   17474:	andeq	r7, r1, r0, ror fp
   17478:	andeq	r7, r1, r0, ror fp
   1747c:	andeq	r7, r1, r0, ror fp
   17480:	andeq	r7, r1, r0, ror fp
   17484:	andeq	r7, r1, r0, ror fp
   17488:	andeq	r7, r1, r0, ror fp
   1748c:	andeq	r7, r1, r0, ror fp
   17490:	andeq	r7, r1, r0, ror fp
   17494:	andeq	r7, r1, r0, ror fp
   17498:	andeq	r7, r1, r0, ror fp
   1749c:	andeq	r7, r1, r0, ror fp
   174a0:	andeq	r7, r1, r0, ror fp
   174a4:	andeq	r7, r1, r0, ror fp
   174a8:	andeq	r7, r1, r0, ror fp
   174ac:	andeq	r7, r1, r0, ror fp
   174b0:	andeq	r7, r1, r0, ror fp
   174b4:	andeq	r7, r1, ip, asr r6
   174b8:	andeq	r7, r1, r0, ror #20
   174bc:	andeq	r7, r1, ip, asr r6
   174c0:	andeq	r7, r1, ip, lsr fp
   174c4:	cmp	r4, #0
   174c8:	moveq	r3, #1
   174cc:	streq	r3, [sp, #40]	; 0x28
   174d0:	beq	17be4 <lchmod@@Base+0x1488>
   174d4:	mov	r3, #0
   174d8:	mov	r2, #1
   174dc:	mov	r4, r3
   174e0:	str	r2, [sp, #36]	; 0x24
   174e4:	str	r2, [sp, #44]	; 0x2c
   174e8:	str	r2, [sp, #56]	; 0x38
   174ec:	str	r3, [sp, #68]	; 0x44
   174f0:	movw	r3, #45680	; 0xb270
   174f4:	movt	r3, #1
   174f8:	str	r4, [sp, #40]	; 0x28
   174fc:	mov	r8, #2
   17500:	str	r4, [sp, #48]	; 0x30
   17504:	str	r3, [sp, #60]	; 0x3c
   17508:	str	r4, [sp, #72]	; 0x48
   1750c:	b	171f4 <lchmod@@Base+0xa98>
   17510:	cmp	r4, #0
   17514:	bne	18760 <lchmod@@Base+0x2004>
   17518:	cmp	sl, #0
   1751c:	beq	18520 <lchmod@@Base+0x1dc4>
   17520:	mov	r3, #34	; 0x22
   17524:	mov	r1, r4
   17528:	mov	r2, #1
   1752c:	strb	r3, [fp]
   17530:	movw	r3, #45660	; 0xb25c
   17534:	movt	r3, #1
   17538:	mov	r4, r2
   1753c:	str	r2, [sp, #36]	; 0x24
   17540:	str	r2, [sp, #40]	; 0x28
   17544:	str	r1, [sp, #44]	; 0x2c
   17548:	str	r1, [sp, #48]	; 0x30
   1754c:	str	r2, [sp, #56]	; 0x38
   17550:	str	r3, [sp, #60]	; 0x3c
   17554:	str	r1, [sp, #68]	; 0x44
   17558:	str	r1, [sp, #72]	; 0x48
   1755c:	b	171f4 <lchmod@@Base+0xa98>
   17560:	mov	r3, #0
   17564:	mov	r4, r8
   17568:	str	r3, [sp, #40]	; 0x28
   1756c:	str	r3, [sp, #44]	; 0x2c
   17570:	str	r3, [sp, #48]	; 0x30
   17574:	str	r8, [sp, #56]	; 0x38
   17578:	str	r3, [sp, #60]	; 0x3c
   1757c:	str	r3, [sp, #68]	; 0x44
   17580:	mov	r3, #1
   17584:	str	r3, [sp, #36]	; 0x24
   17588:	str	r8, [sp, #72]	; 0x48
   1758c:	b	171f4 <lchmod@@Base+0xa98>
   17590:	mov	r3, #1
   17594:	mov	r2, #0
   17598:	mov	r4, r2
   1759c:	mov	r8, #5
   175a0:	str	r3, [sp, #36]	; 0x24
   175a4:	str	r3, [sp, #40]	; 0x28
   175a8:	str	r3, [sp, #44]	; 0x2c
   175ac:	str	r2, [sp, #48]	; 0x30
   175b0:	str	r3, [sp, #56]	; 0x38
   175b4:	movw	r3, #45660	; 0xb25c
   175b8:	movt	r3, #1
   175bc:	str	r3, [sp, #60]	; 0x3c
   175c0:	str	r2, [sp, #68]	; 0x44
   175c4:	str	r2, [sp, #72]	; 0x48
   175c8:	b	171f4 <lchmod@@Base+0xa98>
   175cc:	mov	r3, #0
   175d0:	mov	r2, #1
   175d4:	mov	r4, r3
   175d8:	str	r2, [sp, #36]	; 0x24
   175dc:	str	r2, [sp, #40]	; 0x28
   175e0:	str	r3, [sp, #44]	; 0x2c
   175e4:	str	r3, [sp, #48]	; 0x30
   175e8:	str	r3, [sp, #56]	; 0x38
   175ec:	str	r3, [sp, #60]	; 0x3c
   175f0:	str	r3, [sp, #68]	; 0x44
   175f4:	str	r3, [sp, #72]	; 0x48
   175f8:	b	171f4 <lchmod@@Base+0xa98>
   175fc:	mov	r2, #1
   17600:	mov	r3, #0
   17604:	mov	r4, r3
   17608:	str	r2, [sp, #36]	; 0x24
   1760c:	str	r2, [sp, #44]	; 0x2c
   17610:	str	r8, [sp, #56]	; 0x38
   17614:	str	r3, [sp, #68]	; 0x44
   17618:	b	174f0 <lchmod@@Base+0xd94>
   1761c:	mov	r3, #1
   17620:	mov	r2, #0
   17624:	mov	r4, r2
   17628:	mov	r8, #2
   1762c:	str	r3, [sp, #36]	; 0x24
   17630:	str	r3, [sp, #40]	; 0x28
   17634:	str	r3, [sp, #44]	; 0x2c
   17638:	str	r2, [sp, #48]	; 0x30
   1763c:	str	r3, [sp, #56]	; 0x38
   17640:	movw	r3, #45680	; 0xb270
   17644:	movt	r3, #1
   17648:	str	r3, [sp, #60]	; 0x3c
   1764c:	str	r2, [sp, #68]	; 0x44
   17650:	str	r2, [sp, #72]	; 0x48
   17654:	b	171f4 <lchmod@@Base+0xa98>
   17658:	mov	r7, #0
   1765c:	ldr	r3, [sp, #28]
   17660:	cmn	r3, #1
   17664:	beq	1813c <lchmod@@Base+0x19e0>
   17668:	ldr	r3, [sp, #28]
   1766c:	subs	r2, r3, #1
   17670:	movne	r2, #1
   17674:	sub	r3, fp, #2
   17678:	cmp	r2, #0
   1767c:	clz	r3, r3
   17680:	lsr	r3, r3, #5
   17684:	bne	17690 <lchmod@@Base+0xf34>
   17688:	cmp	r9, #0
   1768c:	beq	17e9c <lchmod@@Base+0x1740>
   17690:	mov	r6, #0
   17694:	ldr	r2, [sp, #40]	; 0x28
   17698:	eor	r2, r2, #1
   1769c:	orrs	r3, r3, r2
   176a0:	bne	17878 <lchmod@@Base+0x111c>
   176a4:	ldr	r2, [sp, #160]	; 0xa0
   176a8:	cmp	r2, #0
   176ac:	beq	176cc <lchmod@@Base+0xf70>
   176b0:	ldr	r0, [sp, #160]	; 0xa0
   176b4:	ubfx	r1, r5, #5, #8
   176b8:	and	r2, r5, #31
   176bc:	ldr	r1, [r0, r1, lsl #2]
   176c0:	lsr	r2, r1, r2
   176c4:	tst	r2, #1
   176c8:	bne	176d4 <lchmod@@Base+0xf78>
   176cc:	cmp	r7, #0
   176d0:	beq	17944 <lchmod@@Base+0x11e8>
   176d4:	ldr	r2, [sp, #44]	; 0x2c
   176d8:	sub	r3, fp, #2
   176dc:	clz	r3, r3
   176e0:	lsr	r3, r3, #5
   176e4:	cmp	r2, #0
   176e8:	bne	18490 <lchmod@@Base+0x1d34>
   176ec:	ldr	r2, [sp, #48]	; 0x30
   176f0:	eor	r2, r2, #1
   176f4:	ands	r3, r3, r2
   176f8:	beq	17730 <lchmod@@Base+0xfd4>
   176fc:	cmp	sl, r4
   17700:	str	r3, [sp, #48]	; 0x30
   17704:	movhi	r2, #39	; 0x27
   17708:	strbhi	r2, [r8, r4]
   1770c:	add	r2, r4, #1
   17710:	cmp	sl, r2
   17714:	movhi	r1, #36	; 0x24
   17718:	strbhi	r1, [r8, r2]
   1771c:	add	r2, r4, #2
   17720:	add	r4, r4, #3
   17724:	cmp	sl, r2
   17728:	movhi	r1, #39	; 0x27
   1772c:	strbhi	r1, [r8, r2]
   17730:	cmp	r4, sl
   17734:	add	r9, r9, #1
   17738:	movcc	r3, #92	; 0x5c
   1773c:	strbcc	r3, [r8, r4]
   17740:	add	r4, r4, #1
   17744:	cmp	r4, sl
   17748:	ldr	r3, [sp, #36]	; 0x24
   1774c:	strbcc	r5, [r8, r4]
   17750:	cmp	r6, #0
   17754:	add	r4, r4, #1
   17758:	moveq	r3, #0
   1775c:	str	r3, [sp, #36]	; 0x24
   17760:	ldr	r3, [sp, #28]
   17764:	cmn	r3, #1
   17768:	bne	17210 <lchmod@@Base+0xab4>
   1776c:	ldr	r3, [sp, #32]
   17770:	ldrb	r6, [r3, r9]
   17774:	adds	r6, r6, #0
   17778:	movne	r6, #1
   1777c:	cmp	r6, #0
   17780:	bne	17224 <lchmod@@Base+0xac8>
   17784:	str	fp, [sp, #152]	; 0x98
   17788:	mov	fp, r8
   1778c:	cmp	r4, #0
   17790:	ldr	r1, [sp, #44]	; 0x2c
   17794:	movne	r3, #0
   17798:	ldr	r8, [sp, #152]	; 0x98
   1779c:	sub	r2, r8, #2
   177a0:	clz	r2, r2
   177a4:	lsr	r2, r2, #5
   177a8:	andeq	r3, r2, r1
   177ac:	cmp	r3, #0
   177b0:	bne	1886c <lchmod@@Base+0x2110>
   177b4:	eor	r3, r1, #1
   177b8:	ands	r2, r2, r3
   177bc:	beq	18798 <lchmod@@Base+0x203c>
   177c0:	ldr	r3, [sp, #68]	; 0x44
   177c4:	cmp	r3, #0
   177c8:	beq	1879c <lchmod@@Base+0x2040>
   177cc:	ldr	r3, [sp, #36]	; 0x24
   177d0:	cmp	r3, #0
   177d4:	bne	18828 <lchmod@@Base+0x20cc>
   177d8:	ldr	r3, [sp, #72]	; 0x48
   177dc:	adds	r3, r3, #0
   177e0:	movne	r3, #1
   177e4:	cmp	sl, #0
   177e8:	movne	r3, #0
   177ec:	cmp	r3, #0
   177f0:	ldreq	r2, [sp, #68]	; 0x44
   177f4:	beq	1879c <lchmod@@Base+0x2040>
   177f8:	ldr	r2, [sp, #72]	; 0x48
   177fc:	str	r3, [sp, #68]	; 0x44
   17800:	movw	r3, #45680	; 0xb270
   17804:	movt	r3, #1
   17808:	mov	r1, #39	; 0x27
   1780c:	mov	r4, #1
   17810:	ldr	sl, [sp, #72]	; 0x48
   17814:	mov	r8, #2
   17818:	str	r3, [sp, #60]	; 0x3c
   1781c:	mov	r3, #0
   17820:	strb	r1, [fp]
   17824:	str	r3, [sp, #44]	; 0x2c
   17828:	str	r4, [sp, #56]	; 0x38
   1782c:	str	r2, [sp, #72]	; 0x48
   17830:	b	171f4 <lchmod@@Base+0xa98>
   17834:	mov	r7, #0
   17838:	cmp	fp, #2
   1783c:	beq	1811c <lchmod@@Base+0x19c0>
   17840:	ldr	r2, [sp, #40]	; 0x28
   17844:	ldr	r3, [sp, #56]	; 0x38
   17848:	ldr	r1, [sp, #44]	; 0x2c
   1784c:	cmp	r3, #0
   17850:	moveq	r3, #0
   17854:	andne	r3, r2, r1
   17858:	cmp	r3, #0
   1785c:	moveq	r5, #92	; 0x5c
   17860:	moveq	r3, r5
   17864:	bne	18128 <lchmod@@Base+0x19cc>
   17868:	ldr	r2, [sp, #40]	; 0x28
   1786c:	cmp	r2, #0
   17870:	bne	18564 <lchmod@@Base+0x1e08>
   17874:	mov	r6, #0
   17878:	ldr	r3, [sp, #44]	; 0x2c
   1787c:	cmp	r3, #0
   17880:	beq	18114 <lchmod@@Base+0x19b8>
   17884:	mov	r3, #0
   17888:	b	176a4 <lchmod@@Base+0xf48>
   1788c:	mov	r7, #0
   17890:	cmp	fp, #2
   17894:	beq	1818c <lchmod@@Base+0x1a30>
   17898:	cmp	fp, #5
   1789c:	beq	18150 <lchmod@@Base+0x19f4>
   178a0:	sub	r3, fp, #2
   178a4:	mov	r6, #0
   178a8:	clz	r3, r3
   178ac:	mov	r5, #63	; 0x3f
   178b0:	lsr	r3, r3, #5
   178b4:	b	17694 <lchmod@@Base+0xf38>
   178b8:	mov	r7, #0
   178bc:	cmp	fp, #2
   178c0:	movne	r3, #0
   178c4:	movne	r5, #39	; 0x27
   178c8:	strne	r6, [sp, #68]	; 0x44
   178cc:	bne	17694 <lchmod@@Base+0xf38>
   178d0:	ldr	r3, [sp, #44]	; 0x2c
   178d4:	cmp	r3, #0
   178d8:	bne	18594 <lchmod@@Base+0x1e38>
   178dc:	ldr	r3, [sp, #72]	; 0x48
   178e0:	cmp	sl, #0
   178e4:	clz	r3, r3
   178e8:	lsr	r3, r3, #5
   178ec:	moveq	r3, #0
   178f0:	cmp	r3, #0
   178f4:	bne	184c0 <lchmod@@Base+0x1d64>
   178f8:	cmp	sl, r4
   178fc:	movhi	r3, #39	; 0x27
   17900:	strbhi	r3, [r8, r4]
   17904:	add	r3, r4, #1
   17908:	cmp	sl, r3
   1790c:	movhi	r2, #92	; 0x5c
   17910:	strbhi	r2, [r8, r3]
   17914:	add	r3, r4, #2
   17918:	cmp	sl, r3
   1791c:	bls	17928 <lchmod@@Base+0x11cc>
   17920:	mov	r2, #39	; 0x27
   17924:	strb	r2, [r8, r3]
   17928:	mov	r3, #0
   1792c:	cmp	r7, #0
   17930:	add	r4, r4, #3
   17934:	mov	r5, #39	; 0x27
   17938:	str	r3, [sp, #48]	; 0x30
   1793c:	str	r6, [sp, #68]	; 0x44
   17940:	bne	176d4 <lchmod@@Base+0xf78>
   17944:	ldr	r2, [sp, #48]	; 0x30
   17948:	eor	r3, r3, #1
   1794c:	add	r9, r9, #1
   17950:	and	r3, r3, r2
   17954:	uxtb	r3, r3
   17958:	cmp	r3, #0
   1795c:	beq	17744 <lchmod@@Base+0xfe8>
   17960:	cmp	sl, r4
   17964:	movhi	r3, #39	; 0x27
   17968:	strbhi	r3, [r8, r4]
   1796c:	add	r3, r4, #1
   17970:	add	r4, r4, #2
   17974:	cmp	sl, r3
   17978:	movhi	r2, #39	; 0x27
   1797c:	strbhi	r2, [r8, r3]
   17980:	mov	r3, #0
   17984:	str	r3, [sp, #48]	; 0x30
   17988:	b	17744 <lchmod@@Base+0xfe8>
   1798c:	mov	r3, #118	; 0x76
   17990:	b	17868 <lchmod@@Base+0x110c>
   17994:	mov	r3, #116	; 0x74
   17998:	ldr	r2, [sp, #44]	; 0x2c
   1799c:	cmp	fp, #2
   179a0:	movne	r2, #0
   179a4:	andeq	r2, r2, #1
   179a8:	cmp	r2, #0
   179ac:	beq	17868 <lchmod@@Base+0x110c>
   179b0:	mov	fp, r8
   179b4:	mov	r8, #2
   179b8:	ldr	r3, [sp, #40]	; 0x28
   179bc:	cmp	r3, #0
   179c0:	movne	r8, #4
   179c4:	mov	lr, #0
   179c8:	mov	r0, fp
   179cc:	ldr	r2, [sp, #32]
   179d0:	ldr	r3, [sp, #156]	; 0x9c
   179d4:	ldr	r1, [sp, #164]	; 0xa4
   179d8:	bic	ip, r3, #2
   179dc:	ldr	r3, [sp, #28]
   179e0:	stm	sp, {r8, ip, lr}
   179e4:	ldr	ip, [sp, #168]	; 0xa8
   179e8:	str	r1, [sp, #12]
   179ec:	mov	r1, sl
   179f0:	str	ip, [sp, #16]
   179f4:	bl	1710c <lchmod@@Base+0x9b0>
   179f8:	mov	r4, r0
   179fc:	mov	r0, r4
   17a00:	add	sp, sp, #116	; 0x74
   17a04:	ldrd	r4, [sp]
   17a08:	ldrd	r6, [sp, #8]
   17a0c:	ldrd	r8, [sp, #16]
   17a10:	ldrd	sl, [sp, #24]
   17a14:	add	sp, sp, #32
   17a18:	pop	{pc}		; (ldr pc, [sp], #4)
   17a1c:	mov	r5, #102	; 0x66
   17a20:	ldr	r2, [sp, #44]	; 0x2c
   17a24:	sub	r3, fp, #2
   17a28:	clz	r3, r3
   17a2c:	lsr	r3, r3, #5
   17a30:	cmp	r2, #0
   17a34:	bne	18490 <lchmod@@Base+0x1d34>
   17a38:	mov	r6, r2
   17a3c:	b	17730 <lchmod@@Base+0xfd4>
   17a40:	mov	r5, #110	; 0x6e
   17a44:	mov	r6, #0
   17a48:	b	176d4 <lchmod@@Base+0xf78>
   17a4c:	mov	r5, #98	; 0x62
   17a50:	b	17a20 <lchmod@@Base+0x12c4>
   17a54:	mov	r5, #97	; 0x61
   17a58:	b	17a20 <lchmod@@Base+0x12c4>
   17a5c:	mov	r7, #0
   17a60:	mov	r6, #0
   17a64:	b	17884 <lchmod@@Base+0x1128>
   17a68:	mov	r5, #114	; 0x72
   17a6c:	b	17a44 <lchmod@@Base+0x12e8>
   17a70:	ldr	r3, [sp, #44]	; 0x2c
   17a74:	cmp	r3, #0
   17a78:	bne	18808 <lchmod@@Base+0x20ac>
   17a7c:	mov	r7, r3
   17a80:	ldr	r3, [sp, #48]	; 0x30
   17a84:	sub	r2, fp, #2
   17a88:	clz	r2, r2
   17a8c:	lsr	r2, r2, #5
   17a90:	eor	r3, r3, #1
   17a94:	ands	r3, r2, r3
   17a98:	beq	184ac <lchmod@@Base+0x1d50>
   17a9c:	cmp	sl, r4
   17aa0:	movhi	r1, #39	; 0x27
   17aa4:	strbhi	r1, [r8, r4]
   17aa8:	add	r1, r4, #1
   17aac:	cmp	sl, r1
   17ab0:	movhi	r0, #36	; 0x24
   17ab4:	strbhi	r0, [r8, r1]
   17ab8:	add	r1, r4, #2
   17abc:	cmp	sl, r1
   17ac0:	movhi	r0, #39	; 0x27
   17ac4:	strbhi	r0, [r8, r1]
   17ac8:	add	r1, r4, #3
   17acc:	cmp	sl, r1
   17ad0:	bls	18504 <lchmod@@Base+0x1da8>
   17ad4:	mov	r4, r1
   17ad8:	mov	r1, #92	; 0x5c
   17adc:	mov	r0, r4
   17ae0:	str	r3, [sp, #48]	; 0x30
   17ae4:	strb	r1, [r8, r4]
   17ae8:	cmp	fp, #2
   17aec:	add	r4, r4, #1
   17af0:	beq	18554 <lchmod@@Base+0x1df8>
   17af4:	ldr	r1, [sp, #28]
   17af8:	add	r3, r9, #1
   17afc:	cmp	r3, r1
   17b00:	bcs	17b18 <lchmod@@Base+0x13bc>
   17b04:	ldr	r1, [sp, #32]
   17b08:	ldrb	r3, [r1, r3]
   17b0c:	sub	r3, r3, #48	; 0x30
   17b10:	cmp	r3, #9
   17b14:	bls	1856c <lchmod@@Base+0x1e10>
   17b18:	mov	r5, #48	; 0x30
   17b1c:	ldr	r3, [sp, #40]	; 0x28
   17b20:	eor	r3, r3, #1
   17b24:	orrs	r2, r2, r3
   17b28:	mov	r3, r6
   17b2c:	moveq	r6, r2
   17b30:	beq	176a4 <lchmod@@Base+0xf48>
   17b34:	mov	r6, #0
   17b38:	b	176cc <lchmod@@Base+0xf70>
   17b3c:	cmp	r9, #0
   17b40:	mov	r2, r7
   17b44:	bne	180e4 <lchmod@@Base+0x1988>
   17b48:	mov	r6, r7
   17b4c:	mov	r3, r9
   17b50:	mov	r7, r2
   17b54:	b	17694 <lchmod@@Base+0xf38>
   17b58:	mov	r2, r7
   17b5c:	mov	r6, r7
   17b60:	mov	r3, #0
   17b64:	mov	r7, r2
   17b68:	mov	r5, #32
   17b6c:	b	17694 <lchmod@@Base+0xf38>
   17b70:	mov	r6, r7
   17b74:	b	17884 <lchmod@@Base+0x1128>
   17b78:	mov	r7, #0
   17b7c:	ldr	r3, [sp, #64]	; 0x40
   17b80:	cmp	r3, #1
   17b84:	bne	181a4 <lchmod@@Base+0x1a48>
   17b88:	bl	11628 <__ctype_b_loc@plt>
   17b8c:	ldr	r2, [r0]
   17b90:	sxth	r3, r5
   17b94:	lsl	r3, r3, #1
   17b98:	ldr	r1, [sp, #64]	; 0x40
   17b9c:	ldrh	r3, [r2, r3]
   17ba0:	mov	ip, r1
   17ba4:	and	r3, r3, #16384	; 0x4000
   17ba8:	cmp	r3, #0
   17bac:	ldr	r3, [sp, #40]	; 0x28
   17bb0:	movne	r6, #1
   17bb4:	moveq	r6, #0
   17bb8:	movne	r2, #0
   17bbc:	andeq	r2, r3, #1
   17bc0:	cmp	r2, #0
   17bc4:	bne	184ec <lchmod@@Base+0x1d90>
   17bc8:	sub	r3, fp, #2
   17bcc:	clz	r3, r3
   17bd0:	lsr	r3, r3, #5
   17bd4:	b	17694 <lchmod@@Base+0xf38>
   17bd8:	cmp	r4, #0
   17bdc:	bne	1887c <lchmod@@Base+0x2120>
   17be0:	str	r4, [sp, #40]	; 0x28
   17be4:	cmp	sl, #0
   17be8:	bne	188ac <lchmod@@Base+0x2150>
   17bec:	mov	r3, #1
   17bf0:	movw	r2, #45680	; 0xb270
   17bf4:	movt	r2, #1
   17bf8:	mov	r4, r3
   17bfc:	mov	r8, #2
   17c00:	str	r3, [sp, #36]	; 0x24
   17c04:	str	sl, [sp, #44]	; 0x2c
   17c08:	str	sl, [sp, #48]	; 0x30
   17c0c:	str	r3, [sp, #56]	; 0x38
   17c10:	str	r2, [sp, #60]	; 0x3c
   17c14:	str	sl, [sp, #68]	; 0x44
   17c18:	str	sl, [sp, #72]	; 0x48
   17c1c:	b	171f4 <lchmod@@Base+0xa98>
   17c20:	ldr	r3, [sp, #32]
   17c24:	ldrb	r5, [r3, r9]
   17c28:	cmp	r5, #126	; 0x7e
   17c2c:	ldrls	pc, [pc, r5, lsl #2]
   17c30:	b	17b7c <lchmod@@Base+0x1420>
   17c34:	andeq	r7, r1, r8, asr lr
   17c38:	andeq	r7, r1, ip, ror fp
   17c3c:	andeq	r7, r1, ip, ror fp
   17c40:	andeq	r7, r1, ip, ror fp
   17c44:	andeq	r7, r1, ip, ror fp
   17c48:	andeq	r7, r1, ip, ror fp
   17c4c:	andeq	r7, r1, ip, ror fp
   17c50:	andeq	r7, r1, r0, asr lr
   17c54:	andeq	r7, r1, r8, asr #28
   17c58:	muleq	r1, r4, r9
   17c5c:	andeq	r7, r1, r0, asr #28
   17c60:	andeq	r7, r1, ip, lsl #19
   17c64:	andeq	r7, r1, r8, lsr lr
   17c68:	andeq	r7, r1, r0, lsr lr
   17c6c:	andeq	r7, r1, ip, ror fp
   17c70:	andeq	r7, r1, ip, ror fp
   17c74:	andeq	r7, r1, ip, ror fp
   17c78:	andeq	r7, r1, ip, ror fp
   17c7c:	andeq	r7, r1, ip, ror fp
   17c80:	andeq	r7, r1, ip, ror fp
   17c84:	andeq	r7, r1, ip, ror fp
   17c88:	andeq	r7, r1, ip, ror fp
   17c8c:	andeq	r7, r1, ip, ror fp
   17c90:	andeq	r7, r1, ip, ror fp
   17c94:	andeq	r7, r1, ip, ror fp
   17c98:	andeq	r7, r1, ip, ror fp
   17c9c:	andeq	r7, r1, ip, ror fp
   17ca0:	andeq	r7, r1, ip, ror fp
   17ca4:	andeq	r7, r1, ip, ror fp
   17ca8:	andeq	r7, r1, ip, ror fp
   17cac:	andeq	r7, r1, ip, ror fp
   17cb0:	andeq	r7, r1, ip, ror fp
   17cb4:	andeq	r7, r1, ip, lsr #29
   17cb8:	andeq	r7, r1, ip, lsl #29
   17cbc:	andeq	r7, r1, ip, lsl #29
   17cc0:	andeq	r7, r1, ip, ror lr
   17cc4:	andeq	r7, r1, ip, lsl #29
   17cc8:	andeq	r7, r1, r8, asr #23
   17ccc:	andeq	r7, r1, ip, lsl #29
   17cd0:			; <UNDEFINED> instruction: 0x000178bc
   17cd4:	andeq	r7, r1, ip, lsl #29
   17cd8:	andeq	r7, r1, ip, lsl #29
   17cdc:	andeq	r7, r1, ip, lsl #29
   17ce0:	andeq	r7, r1, r8, asr #23
   17ce4:	andeq	r7, r1, r8, asr #23
   17ce8:	andeq	r7, r1, r8, asr #23
   17cec:	andeq	r7, r1, r8, asr #23
   17cf0:	andeq	r7, r1, r8, asr #23
   17cf4:	andeq	r7, r1, r8, asr #23
   17cf8:	andeq	r7, r1, r8, asr #23
   17cfc:	andeq	r7, r1, r8, asr #23
   17d00:	andeq	r7, r1, r8, asr #23
   17d04:	andeq	r7, r1, r8, asr #23
   17d08:	andeq	r7, r1, r8, asr #23
   17d0c:	andeq	r7, r1, r8, asr #23
   17d10:	andeq	r7, r1, r8, asr #23
   17d14:	andeq	r7, r1, r8, asr #23
   17d18:	andeq	r7, r1, r8, asr #23
   17d1c:	andeq	r7, r1, r8, asr #23
   17d20:	andeq	r7, r1, ip, lsl #29
   17d24:	andeq	r7, r1, ip, lsl #29
   17d28:	andeq	r7, r1, ip, lsl #29
   17d2c:	andeq	r7, r1, ip, lsl #29
   17d30:	muleq	r1, r0, r8
   17d34:	andeq	r7, r1, ip, ror fp
   17d38:	andeq	r7, r1, r8, asr #23
   17d3c:	andeq	r7, r1, r8, asr #23
   17d40:	andeq	r7, r1, r8, asr #23
   17d44:	andeq	r7, r1, r8, asr #23
   17d48:	andeq	r7, r1, r8, asr #23
   17d4c:	andeq	r7, r1, r8, asr #23
   17d50:	andeq	r7, r1, r8, asr #23
   17d54:	andeq	r7, r1, r8, asr #23
   17d58:	andeq	r7, r1, r8, asr #23
   17d5c:	andeq	r7, r1, r8, asr #23
   17d60:	andeq	r7, r1, r8, asr #23
   17d64:	andeq	r7, r1, r8, asr #23
   17d68:	andeq	r7, r1, r8, asr #23
   17d6c:	andeq	r7, r1, r8, asr #23
   17d70:	andeq	r7, r1, r8, asr #23
   17d74:	andeq	r7, r1, r8, asr #23
   17d78:	andeq	r7, r1, r8, asr #23
   17d7c:	andeq	r7, r1, r8, asr #23
   17d80:	andeq	r7, r1, r8, asr #23
   17d84:	andeq	r7, r1, r8, asr #23
   17d88:	andeq	r7, r1, r8, asr #23
   17d8c:	andeq	r7, r1, r8, asr #23
   17d90:	andeq	r7, r1, r8, asr #23
   17d94:	andeq	r7, r1, r8, asr #23
   17d98:	andeq	r7, r1, r8, asr #23
   17d9c:	andeq	r7, r1, r8, asr #23
   17da0:	andeq	r7, r1, ip, lsl #29
   17da4:	andeq	r7, r1, r8, lsr r8
   17da8:	andeq	r7, r1, r8, asr #23
   17dac:	andeq	r7, r1, ip, lsl #29
   17db0:	andeq	r7, r1, r8, asr #23
   17db4:	andeq	r7, r1, ip, lsl #29
   17db8:	andeq	r7, r1, r8, asr #23
   17dbc:	andeq	r7, r1, r8, asr #23
   17dc0:	andeq	r7, r1, r8, asr #23
   17dc4:	andeq	r7, r1, r8, asr #23
   17dc8:	andeq	r7, r1, r8, asr #23
   17dcc:	andeq	r7, r1, r8, asr #23
   17dd0:	andeq	r7, r1, r8, asr #23
   17dd4:	andeq	r7, r1, r8, asr #23
   17dd8:	andeq	r7, r1, r8, asr #23
   17ddc:	andeq	r7, r1, r8, asr #23
   17de0:	andeq	r7, r1, r8, asr #23
   17de4:	andeq	r7, r1, r8, asr #23
   17de8:	andeq	r7, r1, r8, asr #23
   17dec:	andeq	r7, r1, r8, asr #23
   17df0:	andeq	r7, r1, r8, asr #23
   17df4:	andeq	r7, r1, r8, asr #23
   17df8:	andeq	r7, r1, r8, asr #23
   17dfc:	andeq	r7, r1, r8, asr #23
   17e00:	andeq	r7, r1, r8, asr #23
   17e04:	andeq	r7, r1, r8, asr #23
   17e08:	andeq	r7, r1, r8, asr #23
   17e0c:	andeq	r7, r1, r8, asr #23
   17e10:	andeq	r7, r1, r8, asr #23
   17e14:	andeq	r7, r1, r8, asr #23
   17e18:	andeq	r7, r1, r8, asr #23
   17e1c:	andeq	r7, r1, r8, asr #23
   17e20:	andeq	r7, r1, ip, asr r6
   17e24:	andeq	r7, r1, ip, lsl #29
   17e28:	andeq	r7, r1, ip, asr r6
   17e2c:	andeq	r7, r1, ip, ror lr
   17e30:	mov	r3, #114	; 0x72
   17e34:	b	17998 <lchmod@@Base+0x123c>
   17e38:	mov	r3, #102	; 0x66
   17e3c:	b	17868 <lchmod@@Base+0x110c>
   17e40:	mov	r3, #110	; 0x6e
   17e44:	b	17998 <lchmod@@Base+0x123c>
   17e48:	mov	r3, #98	; 0x62
   17e4c:	b	17868 <lchmod@@Base+0x110c>
   17e50:	mov	r3, #97	; 0x61
   17e54:	b	17868 <lchmod@@Base+0x110c>
   17e58:	ldr	r3, [sp, #40]	; 0x28
   17e5c:	cmp	r3, #0
   17e60:	bne	17a70 <lchmod@@Base+0x1314>
   17e64:	ldr	r3, [sp, #156]	; 0x9c
   17e68:	tst	r3, #1
   17e6c:	addne	r9, r9, #1
   17e70:	bne	17204 <lchmod@@Base+0xaa8>
   17e74:	ldr	r7, [sp, #40]	; 0x28
   17e78:	b	17874 <lchmod@@Base+0x1118>
   17e7c:	sub	r3, fp, #2
   17e80:	clz	r3, r3
   17e84:	lsr	r3, r3, #5
   17e88:	b	17688 <lchmod@@Base+0xf2c>
   17e8c:	sub	r3, fp, #2
   17e90:	mov	r6, #0
   17e94:	clz	r3, r3
   17e98:	lsr	r3, r3, #5
   17e9c:	ldr	r2, [sp, #44]	; 0x2c
   17ea0:	tst	r2, r3
   17ea4:	beq	17694 <lchmod@@Base+0xf38>
   17ea8:	b	179b0 <lchmod@@Base+0x1254>
   17eac:	sub	r3, fp, #2
   17eb0:	clz	r3, r3
   17eb4:	lsr	r3, r3, #5
   17eb8:	b	17e9c <lchmod@@Base+0x1740>
   17ebc:	ldr	r3, [sp, #52]	; 0x34
   17ec0:	ldrb	r5, [r3]
   17ec4:	cmp	r5, #126	; 0x7e
   17ec8:	ldrls	pc, [pc, r5, lsl #2]
   17ecc:	b	17b78 <lchmod@@Base+0x141c>
   17ed0:	andeq	r7, r1, r0, ror sl
   17ed4:	andeq	r7, r1, r8, ror fp
   17ed8:	andeq	r7, r1, r8, ror fp
   17edc:	andeq	r7, r1, r8, ror fp
   17ee0:	andeq	r7, r1, r8, ror fp
   17ee4:	andeq	r7, r1, r8, ror fp
   17ee8:	andeq	r7, r1, r8, ror fp
   17eec:	andeq	r7, r1, r4, asr sl
   17ef0:	andeq	r7, r1, ip, asr #20
   17ef4:	andeq	r8, r1, r8, lsl #2
   17ef8:	andeq	r7, r1, r0, asr #20
   17efc:	strdeq	r8, [r1], -ip
   17f00:	andeq	r7, r1, ip, lsl sl
   17f04:	andeq	r7, r1, r8, ror #20
   17f08:	andeq	r7, r1, r8, ror fp
   17f0c:	andeq	r7, r1, r8, ror fp
   17f10:	andeq	r7, r1, r8, ror fp
   17f14:	andeq	r7, r1, r8, ror fp
   17f18:	andeq	r7, r1, r8, ror fp
   17f1c:	andeq	r7, r1, r8, ror fp
   17f20:	andeq	r7, r1, r8, ror fp
   17f24:	andeq	r7, r1, r8, ror fp
   17f28:	andeq	r7, r1, r8, ror fp
   17f2c:	andeq	r7, r1, r8, ror fp
   17f30:	andeq	r7, r1, r8, ror fp
   17f34:	andeq	r7, r1, r8, ror fp
   17f38:	andeq	r7, r1, r8, ror fp
   17f3c:	andeq	r7, r1, r8, ror fp
   17f40:	andeq	r7, r1, r8, ror fp
   17f44:	andeq	r7, r1, r8, ror fp
   17f48:	andeq	r7, r1, r8, ror fp
   17f4c:	andeq	r7, r1, r8, ror fp
   17f50:	strdeq	r8, [r1], -r4
   17f54:	andeq	r7, r1, ip, asr sl
   17f58:	andeq	r7, r1, ip, asr sl
   17f5c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f60:	andeq	r7, r1, ip, asr sl
   17f64:	andeq	r8, r1, ip, asr #1
   17f68:	andeq	r7, r1, ip, asr sl
   17f6c:			; <UNDEFINED> instruction: 0x000178b8
   17f70:	andeq	r7, r1, ip, asr sl
   17f74:	andeq	r7, r1, ip, asr sl
   17f78:	andeq	r7, r1, ip, asr sl
   17f7c:	andeq	r8, r1, ip, asr #1
   17f80:	andeq	r8, r1, ip, asr #1
   17f84:	andeq	r8, r1, ip, asr #1
   17f88:	andeq	r8, r1, ip, asr #1
   17f8c:	andeq	r8, r1, ip, asr #1
   17f90:	andeq	r8, r1, ip, asr #1
   17f94:	andeq	r8, r1, ip, asr #1
   17f98:	andeq	r8, r1, ip, asr #1
   17f9c:	andeq	r8, r1, ip, asr #1
   17fa0:	andeq	r8, r1, ip, asr #1
   17fa4:	andeq	r8, r1, ip, asr #1
   17fa8:	andeq	r8, r1, ip, asr #1
   17fac:	andeq	r8, r1, ip, asr #1
   17fb0:	andeq	r8, r1, ip, asr #1
   17fb4:	andeq	r8, r1, ip, asr #1
   17fb8:	andeq	r8, r1, ip, asr #1
   17fbc:	andeq	r7, r1, ip, asr sl
   17fc0:	andeq	r7, r1, ip, asr sl
   17fc4:	andeq	r7, r1, ip, asr sl
   17fc8:	andeq	r7, r1, ip, asr sl
   17fcc:	andeq	r7, r1, ip, lsl #17
   17fd0:	andeq	r7, r1, r8, ror fp
   17fd4:	andeq	r8, r1, ip, asr #1
   17fd8:	andeq	r8, r1, ip, asr #1
   17fdc:	andeq	r8, r1, ip, asr #1
   17fe0:	andeq	r8, r1, ip, asr #1
   17fe4:	andeq	r8, r1, ip, asr #1
   17fe8:	andeq	r8, r1, ip, asr #1
   17fec:	andeq	r8, r1, ip, asr #1
   17ff0:	andeq	r8, r1, ip, asr #1
   17ff4:	andeq	r8, r1, ip, asr #1
   17ff8:	andeq	r8, r1, ip, asr #1
   17ffc:	andeq	r8, r1, ip, asr #1
   18000:	andeq	r8, r1, ip, asr #1
   18004:	andeq	r8, r1, ip, asr #1
   18008:	andeq	r8, r1, ip, asr #1
   1800c:	andeq	r8, r1, ip, asr #1
   18010:	andeq	r8, r1, ip, asr #1
   18014:	andeq	r8, r1, ip, asr #1
   18018:	andeq	r8, r1, ip, asr #1
   1801c:	andeq	r8, r1, ip, asr #1
   18020:	andeq	r8, r1, ip, asr #1
   18024:	andeq	r8, r1, ip, asr #1
   18028:	andeq	r8, r1, ip, asr #1
   1802c:	andeq	r8, r1, ip, asr #1
   18030:	andeq	r8, r1, ip, asr #1
   18034:	andeq	r8, r1, ip, asr #1
   18038:	andeq	r8, r1, ip, asr #1
   1803c:	andeq	r7, r1, ip, asr sl
   18040:	andeq	r7, r1, r4, lsr r8
   18044:	andeq	r8, r1, ip, asr #1
   18048:	andeq	r7, r1, ip, asr sl
   1804c:	andeq	r8, r1, ip, asr #1
   18050:	andeq	r7, r1, ip, asr sl
   18054:	andeq	r8, r1, ip, asr #1
   18058:	andeq	r8, r1, ip, asr #1
   1805c:	andeq	r8, r1, ip, asr #1
   18060:	andeq	r8, r1, ip, asr #1
   18064:	andeq	r8, r1, ip, asr #1
   18068:	andeq	r8, r1, ip, asr #1
   1806c:	andeq	r8, r1, ip, asr #1
   18070:	andeq	r8, r1, ip, asr #1
   18074:	andeq	r8, r1, ip, asr #1
   18078:	andeq	r8, r1, ip, asr #1
   1807c:	andeq	r8, r1, ip, asr #1
   18080:	andeq	r8, r1, ip, asr #1
   18084:	andeq	r8, r1, ip, asr #1
   18088:	andeq	r8, r1, ip, asr #1
   1808c:	andeq	r8, r1, ip, asr #1
   18090:	andeq	r8, r1, ip, asr #1
   18094:	andeq	r8, r1, ip, asr #1
   18098:	andeq	r8, r1, ip, asr #1
   1809c:	andeq	r8, r1, ip, asr #1
   180a0:	andeq	r8, r1, ip, asr #1
   180a4:	andeq	r8, r1, ip, asr #1
   180a8:	andeq	r8, r1, ip, asr #1
   180ac:	andeq	r8, r1, ip, asr #1
   180b0:	andeq	r8, r1, ip, asr #1
   180b4:	andeq	r8, r1, ip, asr #1
   180b8:	andeq	r8, r1, ip, asr #1
   180bc:	andeq	r7, r1, r8, asr r6
   180c0:	andeq	r7, r1, ip, asr sl
   180c4:	andeq	r7, r1, r8, asr r6
   180c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   180cc:	mov	r6, r7
   180d0:	mov	r7, #0
   180d4:	b	17884 <lchmod@@Base+0x1128>
   180d8:	cmp	r9, #0
   180dc:	mov	r2, #0
   180e0:	beq	17b48 <lchmod@@Base+0x13ec>
   180e4:	mov	r6, #0
   180e8:	mov	r7, r2
   180ec:	mov	r3, r6
   180f0:	b	176a4 <lchmod@@Base+0xf48>
   180f4:	mov	r2, #0
   180f8:	b	17b5c <lchmod@@Base+0x1400>
   180fc:	mov	r7, #0
   18100:	mov	r3, #118	; 0x76
   18104:	b	17868 <lchmod@@Base+0x110c>
   18108:	mov	r7, #0
   1810c:	mov	r3, #116	; 0x74
   18110:	b	17998 <lchmod@@Base+0x123c>
   18114:	ldr	r3, [sp, #44]	; 0x2c
   18118:	b	176cc <lchmod@@Base+0xf70>
   1811c:	ldr	r3, [sp, #44]	; 0x2c
   18120:	cmp	r3, #0
   18124:	bne	18594 <lchmod@@Base+0x1e38>
   18128:	add	r9, r9, #1
   1812c:	mov	r6, #0
   18130:	ldr	r3, [sp, #48]	; 0x30
   18134:	mov	r5, #92	; 0x5c
   18138:	b	17958 <lchmod@@Base+0x11fc>
   1813c:	ldr	r3, [sp, #32]
   18140:	ldrb	r2, [r3, #1]
   18144:	adds	r2, r2, #0
   18148:	movne	r2, #1
   1814c:	b	17674 <lchmod@@Base+0xf18>
   18150:	ldr	r3, [sp, #156]	; 0x9c
   18154:	ands	r3, r3, #4
   18158:	beq	18180 <lchmod@@Base+0x1a24>
   1815c:	ldr	r2, [sp, #28]
   18160:	add	r3, r9, #2
   18164:	cmp	r3, r2
   18168:	bcs	1817c <lchmod@@Base+0x1a20>
   1816c:	ldr	r2, [sp, #52]	; 0x34
   18170:	ldrb	r5, [r2, #1]
   18174:	cmp	r5, #63	; 0x3f
   18178:	beq	185f8 <lchmod@@Base+0x1e9c>
   1817c:	mov	r3, #0
   18180:	mov	r5, #63	; 0x3f
   18184:	mov	r6, r3
   18188:	b	17694 <lchmod@@Base+0xf38>
   1818c:	ldr	r3, [sp, #44]	; 0x2c
   18190:	cmp	r3, #0
   18194:	bne	18594 <lchmod@@Base+0x1e38>
   18198:	mov	r6, r3
   1819c:	mov	r5, #63	; 0x3f
   181a0:	b	176cc <lchmod@@Base+0xf70>
   181a4:	ldr	r1, [sp, #28]
   181a8:	mov	r2, #0
   181ac:	mov	r3, #0
   181b0:	strd	r2, [sp, #104]	; 0x68
   181b4:	cmn	r1, #1
   181b8:	bne	181c8 <lchmod@@Base+0x1a6c>
   181bc:	ldr	r0, [sp, #32]
   181c0:	bl	11658 <strlen@plt>
   181c4:	str	r0, [sp, #28]
   181c8:	str	r8, [sp, #76]	; 0x4c
   181cc:	mov	r3, #0
   181d0:	str	sl, [sp, #80]	; 0x50
   181d4:	ldr	sl, [sp, #32]
   181d8:	str	r5, [sp, #84]	; 0x54
   181dc:	mov	r5, r3
   181e0:	ldr	r8, [sp, #44]	; 0x2c
   181e4:	str	r7, [sp, #88]	; 0x58
   181e8:	str	r4, [sp, #92]	; 0x5c
   181ec:	ldr	r2, [sp, #28]
   181f0:	add	r4, r9, r5
   181f4:	add	r3, sp, #104	; 0x68
   181f8:	add	r7, sl, r4
   181fc:	add	r0, sp, #100	; 0x64
   18200:	mov	r1, r7
   18204:	sub	r2, r2, r4
   18208:	bl	1a774 <lchmod@@Base+0x4018>
   1820c:	subs	r1, r0, #0
   18210:	beq	1825c <lchmod@@Base+0x1b00>
   18214:	cmn	r1, #1
   18218:	beq	185d4 <lchmod@@Base+0x1e78>
   1821c:	cmn	r1, #2
   18220:	beq	186f4 <lchmod@@Base+0x1f98>
   18224:	cmp	fp, #2
   18228:	movne	r3, #0
   1822c:	andeq	r3, r8, #1
   18230:	cmp	r3, #0
   18234:	bne	183c0 <lchmod@@Base+0x1c64>
   18238:	ldr	r0, [sp, #100]	; 0x64
   1823c:	add	r5, r5, r1
   18240:	bl	11544 <iswprint@plt>
   18244:	cmp	r0, #0
   18248:	add	r0, sp, #104	; 0x68
   1824c:	moveq	r6, #0
   18250:	bl	114c0 <mbsinit@plt>
   18254:	cmp	r0, #0
   18258:	beq	181ec <lchmod@@Base+0x1a90>
   1825c:	ldr	r3, [sp, #40]	; 0x28
   18260:	mov	ip, r5
   18264:	eor	r2, r6, #1
   18268:	ldr	r8, [sp, #76]	; 0x4c
   1826c:	ldr	sl, [sp, #80]	; 0x50
   18270:	and	r2, r2, r3
   18274:	ldr	r5, [sp, #84]	; 0x54
   18278:	ldr	r7, [sp, #88]	; 0x58
   1827c:	ldr	r4, [sp, #92]	; 0x5c
   18280:	cmp	ip, #1
   18284:	bls	17bc0 <lchmod@@Base+0x1464>
   18288:	add	r1, ip, r9
   1828c:	mov	r0, #39	; 0x27
   18290:	ldr	lr, [sp, #52]	; 0x34
   18294:	mov	ip, #0
   18298:	str	r6, [sp, #52]	; 0x34
   1829c:	ldr	r6, [sp, #48]	; 0x30
   182a0:	b	1835c <lchmod@@Base+0x1c00>
   182a4:	ldr	ip, [sp, #44]	; 0x2c
   182a8:	sub	r3, fp, #2
   182ac:	clz	r3, r3
   182b0:	lsr	r3, r3, #5
   182b4:	cmp	ip, #0
   182b8:	bne	184cc <lchmod@@Base+0x1d70>
   182bc:	eor	ip, r6, #1
   182c0:	ands	r3, r3, ip
   182c4:	beq	182f4 <lchmod@@Base+0x1b98>
   182c8:	cmp	sl, r4
   182cc:	add	ip, r4, #1
   182d0:	strbhi	r0, [r8, r4]
   182d4:	cmp	sl, ip
   182d8:	movhi	r6, #36	; 0x24
   182dc:	strbhi	r6, [r8, ip]
   182e0:	add	ip, r4, #2
   182e4:	mov	r6, r3
   182e8:	cmp	sl, ip
   182ec:	add	r4, r4, #3
   182f0:	strbhi	r0, [r8, ip]
   182f4:	cmp	sl, r4
   182f8:	movhi	r3, #92	; 0x5c
   182fc:	strbhi	r3, [r8, r4]
   18300:	add	r3, r4, #1
   18304:	cmp	sl, r3
   18308:	bls	18318 <lchmod@@Base+0x1bbc>
   1830c:	lsr	ip, r5, #6
   18310:	add	ip, ip, #48	; 0x30
   18314:	strb	ip, [r8, r3]
   18318:	add	r3, r4, #2
   1831c:	cmp	sl, r3
   18320:	bls	18330 <lchmod@@Base+0x1bd4>
   18324:	ubfx	ip, r5, #3, #3
   18328:	add	ip, ip, #48	; 0x30
   1832c:	strb	ip, [r8, r3]
   18330:	add	r9, r9, #1
   18334:	and	r5, r5, #7
   18338:	cmp	r9, r1
   1833c:	add	r5, r5, #48	; 0x30
   18340:	add	r4, r4, #3
   18344:	bcs	184f8 <lchmod@@Base+0x1d9c>
   18348:	mov	ip, r2
   1834c:	cmp	sl, r4
   18350:	strbhi	r5, [r8, r4]
   18354:	add	r4, r4, #1
   18358:	ldrb	r5, [lr, #1]!
   1835c:	cmp	r2, #0
   18360:	bne	182a4 <lchmod@@Base+0x1b48>
   18364:	eor	r3, ip, #1
   18368:	cmp	r7, #0
   1836c:	and	r3, r3, r6
   18370:	uxtb	r3, r3
   18374:	beq	18388 <lchmod@@Base+0x1c2c>
   18378:	cmp	sl, r4
   1837c:	movhi	r7, #92	; 0x5c
   18380:	strbhi	r7, [r8, r4]
   18384:	add	r4, r4, #1
   18388:	add	r9, r9, #1
   1838c:	cmp	r9, r1
   18390:	bcs	184e0 <lchmod@@Base+0x1d84>
   18394:	cmp	r3, #0
   18398:	beq	18518 <lchmod@@Base+0x1dbc>
   1839c:	cmp	sl, r4
   183a0:	add	r3, r4, #1
   183a4:	mov	r7, #0
   183a8:	strbhi	r0, [r8, r4]
   183ac:	cmp	sl, r3
   183b0:	add	r4, r4, #2
   183b4:	mov	r6, r7
   183b8:	strbhi	r0, [r8, r3]
   183bc:	b	1834c <lchmod@@Base+0x1bf0>
   183c0:	cmp	r1, #1
   183c4:	beq	18238 <lchmod@@Base+0x1adc>
   183c8:	add	r2, r4, #1
   183cc:	add	r3, sl, r1
   183d0:	add	r2, sl, r2
   183d4:	add	r4, r3, r4
   183d8:	ldrb	r3, [r2], #1
   183dc:	sub	r3, r3, #91	; 0x5b
   183e0:	cmp	r3, #33	; 0x21
   183e4:	ldrls	pc, [pc, r3, lsl #2]
   183e8:	b	18474 <lchmod@@Base+0x1d18>
   183ec:	andeq	r8, r1, r0, lsl #9
   183f0:	andeq	r8, r1, r0, lsl #9
   183f4:	andeq	r8, r1, r4, ror r4
   183f8:	andeq	r8, r1, r0, lsl #9
   183fc:	andeq	r8, r1, r4, ror r4
   18400:	andeq	r8, r1, r0, lsl #9
   18404:	andeq	r8, r1, r4, ror r4
   18408:	andeq	r8, r1, r4, ror r4
   1840c:	andeq	r8, r1, r4, ror r4
   18410:	andeq	r8, r1, r4, ror r4
   18414:	andeq	r8, r1, r4, ror r4
   18418:	andeq	r8, r1, r4, ror r4
   1841c:	andeq	r8, r1, r4, ror r4
   18420:	andeq	r8, r1, r4, ror r4
   18424:	andeq	r8, r1, r4, ror r4
   18428:	andeq	r8, r1, r4, ror r4
   1842c:	andeq	r8, r1, r4, ror r4
   18430:	andeq	r8, r1, r4, ror r4
   18434:	andeq	r8, r1, r4, ror r4
   18438:	andeq	r8, r1, r4, ror r4
   1843c:	andeq	r8, r1, r4, ror r4
   18440:	andeq	r8, r1, r4, ror r4
   18444:	andeq	r8, r1, r4, ror r4
   18448:	andeq	r8, r1, r4, ror r4
   1844c:	andeq	r8, r1, r4, ror r4
   18450:	andeq	r8, r1, r4, ror r4
   18454:	andeq	r8, r1, r4, ror r4
   18458:	andeq	r8, r1, r4, ror r4
   1845c:	andeq	r8, r1, r4, ror r4
   18460:	andeq	r8, r1, r4, ror r4
   18464:	andeq	r8, r1, r4, ror r4
   18468:	andeq	r8, r1, r4, ror r4
   1846c:	andeq	r8, r1, r4, ror r4
   18470:	andeq	r8, r1, r0, lsl #9
   18474:	cmp	r4, r2
   18478:	bne	183d8 <lchmod@@Base+0x1c7c>
   1847c:	b	18238 <lchmod@@Base+0x1adc>
   18480:	mov	r8, #2
   18484:	ldr	fp, [sp, #76]	; 0x4c
   18488:	ldr	sl, [sp, #80]	; 0x50
   1848c:	b	179b8 <lchmod@@Base+0x125c>
   18490:	ldr	r2, [sp, #40]	; 0x28
   18494:	str	fp, [sp, #152]	; 0x98
   18498:	mov	fp, r8
   1849c:	ldr	r8, [sp, #152]	; 0x98
   184a0:	and	r2, r2, r3
   184a4:	str	r2, [sp, #40]	; 0x28
   184a8:	b	179b8 <lchmod@@Base+0x125c>
   184ac:	cmp	sl, r4
   184b0:	movls	r0, r4
   184b4:	bls	17ae8 <lchmod@@Base+0x138c>
   184b8:	ldr	r3, [sp, #48]	; 0x30
   184bc:	b	17ad8 <lchmod@@Base+0x137c>
   184c0:	str	sl, [sp, #72]	; 0x48
   184c4:	ldr	sl, [sp, #44]	; 0x2c
   184c8:	b	17928 <lchmod@@Base+0x11cc>
   184cc:	str	r3, [sp, #40]	; 0x28
   184d0:	str	fp, [sp, #152]	; 0x98
   184d4:	mov	fp, r8
   184d8:	ldr	r8, [sp, #152]	; 0x98
   184dc:	b	179b8 <lchmod@@Base+0x125c>
   184e0:	str	r6, [sp, #48]	; 0x30
   184e4:	ldr	r6, [sp, #52]	; 0x34
   184e8:	b	17958 <lchmod@@Base+0x11fc>
   184ec:	mov	r6, #0
   184f0:	ldr	r2, [sp, #40]	; 0x28
   184f4:	b	18288 <lchmod@@Base+0x1b2c>
   184f8:	str	r6, [sp, #48]	; 0x30
   184fc:	ldr	r6, [sp, #52]	; 0x34
   18500:	b	17744 <lchmod@@Base+0xfe8>
   18504:	add	r4, r4, #4
   18508:	mov	r6, #0
   1850c:	str	r3, [sp, #48]	; 0x30
   18510:	mov	r5, #48	; 0x30
   18514:	b	176cc <lchmod@@Base+0xf70>
   18518:	mov	r7, r3
   1851c:	b	1834c <lchmod@@Base+0x1bf0>
   18520:	mov	r3, #1
   18524:	movw	r2, #45660	; 0xb25c
   18528:	movt	r2, #1
   1852c:	mov	r4, r3
   18530:	str	r3, [sp, #36]	; 0x24
   18534:	str	r3, [sp, #40]	; 0x28
   18538:	str	sl, [sp, #44]	; 0x2c
   1853c:	str	sl, [sp, #48]	; 0x30
   18540:	str	r3, [sp, #56]	; 0x38
   18544:	str	r2, [sp, #60]	; 0x3c
   18548:	str	sl, [sp, #68]	; 0x44
   1854c:	str	sl, [sp, #72]	; 0x48
   18550:	b	171f4 <lchmod@@Base+0xa98>
   18554:	mov	r3, r6
   18558:	mov	r5, #48	; 0x30
   1855c:	mov	r6, #0
   18560:	b	176cc <lchmod@@Base+0xf70>
   18564:	mov	r5, r3
   18568:	b	17a44 <lchmod@@Base+0x12e8>
   1856c:	cmp	sl, r4
   18570:	mov	r5, #48	; 0x30
   18574:	movhi	r3, #48	; 0x30
   18578:	strbhi	r3, [r8, r4]
   1857c:	add	r3, r0, #2
   18580:	add	r4, r0, #3
   18584:	cmp	sl, r3
   18588:	movhi	r1, #48	; 0x30
   1858c:	strbhi	r1, [r8, r3]
   18590:	b	17b1c <lchmod@@Base+0x13c0>
   18594:	str	fp, [sp, #152]	; 0x98
   18598:	mov	fp, r8
   1859c:	ldr	r8, [sp, #152]	; 0x98
   185a0:	b	179b8 <lchmod@@Base+0x125c>
   185a4:	ldr	r3, [sp, #164]	; 0xa4
   185a8:	ldrb	r3, [r3]
   185ac:	cmp	r3, #0
   185b0:	beq	171c4 <lchmod@@Base+0xa68>
   185b4:	ldr	r2, [sp, #164]	; 0xa4
   185b8:	cmp	sl, r4
   185bc:	strbhi	r3, [fp, r4]
   185c0:	add	r4, r4, #1
   185c4:	ldrb	r3, [r2, #1]!
   185c8:	cmp	r3, #0
   185cc:	bne	185b8 <lchmod@@Base+0x1e5c>
   185d0:	b	171c4 <lchmod@@Base+0xa68>
   185d4:	mov	ip, r5
   185d8:	mov	r6, #0
   185dc:	ldr	r2, [sp, #40]	; 0x28
   185e0:	ldr	r8, [sp, #76]	; 0x4c
   185e4:	ldr	sl, [sp, #80]	; 0x50
   185e8:	ldr	r5, [sp, #84]	; 0x54
   185ec:	ldr	r7, [sp, #88]	; 0x58
   185f0:	ldr	r4, [sp, #92]	; 0x5c
   185f4:	b	18280 <lchmod@@Base+0x1b24>
   185f8:	ldr	r2, [sp, #32]
   185fc:	ldrb	r1, [r2, r3]
   18600:	sub	r2, r1, #33	; 0x21
   18604:	cmp	r2, #29
   18608:	ldrls	pc, [pc, r2, lsl #2]
   1860c:	b	186e8 <lchmod@@Base+0x1f8c>
   18610:	andeq	r8, r1, r8, lsl #13
   18614:	andeq	r8, r1, r8, ror #13
   18618:	andeq	r8, r1, r8, ror #13
   1861c:	andeq	r8, r1, r8, ror #13
   18620:	andeq	r8, r1, r8, ror #13
   18624:	andeq	r8, r1, r8, ror #13
   18628:	andeq	r8, r1, r8, lsl #13
   1862c:	andeq	r8, r1, r8, lsl #13
   18630:	andeq	r8, r1, r8, lsl #13
   18634:	andeq	r8, r1, r8, ror #13
   18638:	andeq	r8, r1, r8, ror #13
   1863c:	andeq	r8, r1, r8, ror #13
   18640:	andeq	r8, r1, r8, lsl #13
   18644:	andeq	r8, r1, r8, ror #13
   18648:	andeq	r8, r1, r8, lsl #13
   1864c:	andeq	r8, r1, r8, ror #13
   18650:	andeq	r8, r1, r8, ror #13
   18654:	andeq	r8, r1, r8, ror #13
   18658:	andeq	r8, r1, r8, ror #13
   1865c:	andeq	r8, r1, r8, ror #13
   18660:	andeq	r8, r1, r8, ror #13
   18664:	andeq	r8, r1, r8, ror #13
   18668:	andeq	r8, r1, r8, ror #13
   1866c:	andeq	r8, r1, r8, ror #13
   18670:	andeq	r8, r1, r8, ror #13
   18674:	andeq	r8, r1, r8, ror #13
   18678:	andeq	r8, r1, r8, ror #13
   1867c:	andeq	r8, r1, r8, lsl #13
   18680:	andeq	r8, r1, r8, lsl #13
   18684:	andeq	r8, r1, r8, lsl #13
   18688:	ldr	r2, [sp, #44]	; 0x2c
   1868c:	cmp	r2, #0
   18690:	bne	187ec <lchmod@@Base+0x2090>
   18694:	cmp	sl, r4
   18698:	mov	r5, r1
   1869c:	movhi	r2, #63	; 0x3f
   186a0:	mov	r9, r3
   186a4:	strbhi	r2, [r8, r4]
   186a8:	add	r2, r4, #1
   186ac:	cmp	sl, r2
   186b0:	movhi	r0, #34	; 0x22
   186b4:	strbhi	r0, [r8, r2]
   186b8:	add	r2, r4, #2
   186bc:	cmp	sl, r2
   186c0:	movhi	r0, #34	; 0x22
   186c4:	strbhi	r0, [r8, r2]
   186c8:	add	r2, r4, #3
   186cc:	add	r4, r4, #4
   186d0:	cmp	sl, r2
   186d4:	movhi	r0, #63	; 0x3f
   186d8:	strbhi	r0, [r8, r2]
   186dc:	mov	r2, #0
   186e0:	mov	r6, r2
   186e4:	b	17b1c <lchmod@@Base+0x13c0>
   186e8:	mov	r3, #0
   186ec:	mov	r6, r3
   186f0:	b	17694 <lchmod@@Base+0xf38>
   186f4:	ldr	r0, [sp, #28]
   186f8:	mov	r1, r4
   186fc:	mov	r2, r7
   18700:	mov	r3, r5
   18704:	mov	ip, r5
   18708:	ldr	r8, [sp, #76]	; 0x4c
   1870c:	ldr	sl, [sp, #80]	; 0x50
   18710:	cmp	r1, r0
   18714:	ldr	r5, [sp, #84]	; 0x54
   18718:	ldr	r7, [sp, #88]	; 0x58
   1871c:	ldr	r4, [sp, #92]	; 0x5c
   18720:	bcs	18754 <lchmod@@Base+0x1ff8>
   18724:	ldrb	r6, [r2]
   18728:	cmp	r6, #0
   1872c:	bne	18740 <lchmod@@Base+0x1fe4>
   18730:	b	18874 <lchmod@@Base+0x2118>
   18734:	ldrb	r6, [r2, #1]!
   18738:	cmp	r6, #0
   1873c:	beq	187fc <lchmod@@Base+0x20a0>
   18740:	add	r3, r3, #1
   18744:	add	r1, r9, r3
   18748:	cmp	r1, r0
   1874c:	bcc	18734 <lchmod@@Base+0x1fd8>
   18750:	mov	ip, r3
   18754:	mov	r6, #0
   18758:	ldr	r2, [sp, #40]	; 0x28
   1875c:	b	18280 <lchmod@@Base+0x1b24>
   18760:	mov	r3, #1
   18764:	mov	r2, #0
   18768:	mov	r4, r2
   1876c:	str	r3, [sp, #36]	; 0x24
   18770:	str	r3, [sp, #40]	; 0x28
   18774:	str	r3, [sp, #44]	; 0x2c
   18778:	str	r2, [sp, #48]	; 0x30
   1877c:	str	r3, [sp, #56]	; 0x38
   18780:	movw	r3, #45660	; 0xb25c
   18784:	movt	r3, #1
   18788:	str	r3, [sp, #60]	; 0x3c
   1878c:	str	r2, [sp, #68]	; 0x44
   18790:	str	r2, [sp, #72]	; 0x48
   18794:	b	171f4 <lchmod@@Base+0xa98>
   18798:	mov	r2, r3
   1879c:	ldr	r3, [sp, #60]	; 0x3c
   187a0:	cmp	r3, #0
   187a4:	moveq	r2, #0
   187a8:	andne	r2, r2, #1
   187ac:	cmp	r2, #0
   187b0:	beq	187dc <lchmod@@Base+0x2080>
   187b4:	mov	r2, r3
   187b8:	ldrb	r3, [r3]
   187bc:	cmp	r3, #0
   187c0:	beq	187dc <lchmod@@Base+0x2080>
   187c4:	cmp	sl, r4
   187c8:	strbhi	r3, [fp, r4]
   187cc:	add	r4, r4, #1
   187d0:	ldrb	r3, [r2, #1]!
   187d4:	cmp	r3, #0
   187d8:	bne	187c4 <lchmod@@Base+0x2068>
   187dc:	cmp	sl, r4
   187e0:	movhi	r3, #0
   187e4:	strbhi	r3, [fp, r4]
   187e8:	b	179fc <lchmod@@Base+0x12a0>
   187ec:	str	fp, [sp, #152]	; 0x98
   187f0:	mov	fp, r8
   187f4:	ldr	r8, [sp, #152]	; 0x98
   187f8:	b	179c4 <lchmod@@Base+0x1268>
   187fc:	mov	ip, r3
   18800:	ldr	r2, [sp, #40]	; 0x28
   18804:	b	18280 <lchmod@@Base+0x1b24>
   18808:	str	fp, [sp, #152]	; 0x98
   1880c:	mov	fp, r8
   18810:	ldr	r8, [sp, #152]	; 0x98
   18814:	sub	r3, r8, #2
   18818:	clz	r3, r3
   1881c:	lsr	r3, r3, #5
   18820:	str	r3, [sp, #40]	; 0x28
   18824:	b	179b8 <lchmod@@Base+0x125c>
   18828:	mov	ip, #5
   1882c:	ldr	r3, [sp, #28]
   18830:	str	ip, [sp]
   18834:	ldr	r2, [sp, #156]	; 0x9c
   18838:	ldr	ip, [sp, #164]	; 0xa4
   1883c:	ldr	r0, [sp, #160]	; 0xa0
   18840:	str	r2, [sp, #4]
   18844:	ldr	r2, [sp, #32]
   18848:	ldr	r1, [sp, #72]	; 0x48
   1884c:	str	ip, [sp, #12]
   18850:	ldr	ip, [sp, #168]	; 0xa8
   18854:	str	r0, [sp, #8]
   18858:	mov	r0, fp
   1885c:	str	ip, [sp, #16]
   18860:	bl	1710c <lchmod@@Base+0x9b0>
   18864:	mov	r4, r0
   18868:	b	179fc <lchmod@@Base+0x12a0>
   1886c:	mov	r8, #2
   18870:	b	179b8 <lchmod@@Base+0x125c>
   18874:	ldr	r2, [sp, #40]	; 0x28
   18878:	b	18280 <lchmod@@Base+0x1b24>
   1887c:	mov	r3, #0
   18880:	mov	r2, #1
   18884:	mov	r4, r3
   18888:	strd	r2, [sp, #36]	; 0x24
   1888c:	strd	r2, [sp, #44]	; 0x2c
   18890:	str	r2, [sp, #56]	; 0x38
   18894:	str	r3, [sp, #68]	; 0x44
   18898:	str	r3, [sp, #72]	; 0x48
   1889c:	movw	r3, #45680	; 0xb270
   188a0:	movt	r3, #1
   188a4:	str	r3, [sp, #60]	; 0x3c
   188a8:	b	171f4 <lchmod@@Base+0xa98>
   188ac:	mov	r3, #0
   188b0:	mov	r1, #1
   188b4:	mov	r2, r3
   188b8:	str	r1, [sp, #36]	; 0x24
   188bc:	str	r3, [sp, #48]	; 0x30
   188c0:	str	sl, [sp, #72]	; 0x48
   188c4:	b	177fc <lchmod@@Base+0x10a0>
   188c8:	bl	117d8 <abort@plt>
   188cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   188d0:	mov	r4, r0
   188d4:	mov	r5, r3
   188d8:	strd	r6, [sp, #8]
   188dc:	movw	r7, #49540	; 0xc184
   188e0:	movt	r7, #2
   188e4:	strd	r8, [sp, #16]
   188e8:	strd	sl, [sp, #24]
   188ec:	mov	sl, r1
   188f0:	mov	fp, r2
   188f4:	str	lr, [sp, #32]
   188f8:	sub	sp, sp, #60	; 0x3c
   188fc:	bl	11688 <__errno_location@plt>
   18900:	mov	r8, r0
   18904:	cmn	r4, #-2147483647	; 0x80000001
   18908:	ldr	r6, [r7]
   1890c:	movne	r0, #0
   18910:	moveq	r0, #1
   18914:	ldr	r3, [r8]
   18918:	orrs	r0, r0, r4, lsr #31
   1891c:	str	r3, [sp, #28]
   18920:	bne	18ab0 <lchmod@@Base+0x2354>
   18924:	ldr	r3, [r7, #4]
   18928:	cmp	r3, r4
   1892c:	bgt	1898c <lchmod@@Base+0x2230>
   18930:	add	r1, r7, #8
   18934:	sub	r2, r4, r3
   18938:	str	r3, [sp, #52]	; 0x34
   1893c:	cmp	r6, r1
   18940:	add	r2, r2, #1
   18944:	beq	18a88 <lchmod@@Base+0x232c>
   18948:	mov	r1, #8
   1894c:	mov	r0, r6
   18950:	mvn	r3, #-2147483648	; 0x80000000
   18954:	str	r1, [sp]
   18958:	add	r1, sp, #52	; 0x34
   1895c:	bl	19c2c <lchmod@@Base+0x34d0>
   18960:	mov	r6, r0
   18964:	str	r0, [r7]
   18968:	ldr	r0, [r7, #4]
   1896c:	mov	r1, #0
   18970:	ldr	r2, [sp, #52]	; 0x34
   18974:	sub	r2, r2, r0
   18978:	add	r0, r6, r0, lsl #3
   1897c:	lsl	r2, r2, #3
   18980:	bl	116ac <memset@plt>
   18984:	ldr	r3, [sp, #52]	; 0x34
   18988:	str	r3, [r7, #4]
   1898c:	ldr	r1, [r5, #4]
   18990:	add	r0, r6, r4, lsl #3
   18994:	add	ip, r5, #8
   18998:	mov	r3, fp
   1899c:	mov	r2, sl
   189a0:	ldr	r7, [r0, #4]
   189a4:	str	r0, [sp, #36]	; 0x24
   189a8:	str	ip, [sp, #40]	; 0x28
   189ac:	orr	r0, r1, #1
   189b0:	ldr	r9, [r6, r4, lsl #3]
   189b4:	str	ip, [sp, #8]
   189b8:	ldr	lr, [r5, #44]	; 0x2c
   189bc:	str	r0, [sp, #4]
   189c0:	ldr	ip, [r5]
   189c4:	mov	r1, r9
   189c8:	str	ip, [sp, #32]
   189cc:	ldr	ip, [r5, #40]	; 0x28
   189d0:	str	ip, [sp, #12]
   189d4:	ldr	ip, [sp, #32]
   189d8:	str	lr, [sp, #16]
   189dc:	str	r0, [sp, #44]	; 0x2c
   189e0:	mov	r0, r7
   189e4:	str	ip, [sp]
   189e8:	bl	1710c <lchmod@@Base+0x9b0>
   189ec:	cmp	r9, r0
   189f0:	bhi	18a60 <lchmod@@Base+0x2304>
   189f4:	add	r9, r0, #1
   189f8:	movw	r3, #49652	; 0xc1f4
   189fc:	movt	r3, #2
   18a00:	cmp	r7, r3
   18a04:	str	r9, [r6, r4, lsl #3]
   18a08:	beq	18a14 <lchmod@@Base+0x22b8>
   18a0c:	mov	r0, r7
   18a10:	bl	130e8 <__assert_fail@plt+0x18bc>
   18a14:	mov	r0, r9
   18a18:	bl	19a7c <lchmod@@Base+0x3320>
   18a1c:	ldr	ip, [r5]
   18a20:	mov	r3, fp
   18a24:	mov	r2, sl
   18a28:	mov	r1, r9
   18a2c:	mov	r7, r0
   18a30:	ldr	lr, [sp, #36]	; 0x24
   18a34:	ldr	r4, [r5, #40]	; 0x28
   18a38:	str	r0, [lr, #4]
   18a3c:	ldr	lr, [r5, #44]	; 0x2c
   18a40:	str	ip, [sp]
   18a44:	ldr	ip, [sp, #44]	; 0x2c
   18a48:	str	ip, [sp, #4]
   18a4c:	ldr	ip, [sp, #40]	; 0x28
   18a50:	str	r4, [sp, #12]
   18a54:	str	lr, [sp, #16]
   18a58:	str	ip, [sp, #8]
   18a5c:	bl	1710c <lchmod@@Base+0x9b0>
   18a60:	ldr	r3, [sp, #28]
   18a64:	mov	r0, r7
   18a68:	str	r3, [r8]
   18a6c:	add	sp, sp, #60	; 0x3c
   18a70:	ldrd	r4, [sp]
   18a74:	ldrd	r6, [sp, #8]
   18a78:	ldrd	r8, [sp, #16]
   18a7c:	ldrd	sl, [sp, #24]
   18a80:	add	sp, sp, #32
   18a84:	pop	{pc}		; (ldr pc, [sp], #4)
   18a88:	mov	r1, #8
   18a8c:	mvn	r3, #-2147483648	; 0x80000000
   18a90:	str	r1, [sp]
   18a94:	add	r1, sp, #52	; 0x34
   18a98:	bl	19c2c <lchmod@@Base+0x34d0>
   18a9c:	ldrd	r2, [r7, #8]
   18aa0:	mov	r6, r0
   18aa4:	str	r0, [r7]
   18aa8:	strd	r2, [r0]
   18aac:	b	18968 <lchmod@@Base+0x220c>
   18ab0:	bl	117d8 <abort@plt>
   18ab4:	strd	r4, [sp, #-16]!
   18ab8:	mov	r5, r0
   18abc:	str	r6, [sp, #8]
   18ac0:	str	lr, [sp, #12]
   18ac4:	bl	11688 <__errno_location@plt>
   18ac8:	mov	r4, r0
   18acc:	cmp	r5, #0
   18ad0:	ldr	r0, [pc, #32]	; 18af8 <lchmod@@Base+0x239c>
   18ad4:	mov	r1, #48	; 0x30
   18ad8:	movne	r0, r5
   18adc:	ldr	r6, [r4]
   18ae0:	bl	19da4 <lchmod@@Base+0x3648>
   18ae4:	str	r6, [r4]
   18ae8:	ldrd	r4, [sp]
   18aec:	ldr	r6, [sp, #8]
   18af0:	add	sp, sp, #12
   18af4:	pop	{pc}		; (ldr pc, [sp], #4)
   18af8:	strdeq	ip, [r2], -r4
   18afc:	ldr	r3, [pc, #12]	; 18b10 <lchmod@@Base+0x23b4>
   18b00:	cmp	r0, #0
   18b04:	moveq	r0, r3
   18b08:	ldr	r0, [r0]
   18b0c:	bx	lr
   18b10:	strdeq	ip, [r2], -r4
   18b14:	ldr	r3, [pc, #12]	; 18b28 <lchmod@@Base+0x23cc>
   18b18:	cmp	r0, #0
   18b1c:	moveq	r0, r3
   18b20:	str	r1, [r0]
   18b24:	bx	lr
   18b28:	strdeq	ip, [r2], -r4
   18b2c:	ldr	r3, [pc, #52]	; 18b68 <lchmod@@Base+0x240c>
   18b30:	cmp	r0, #0
   18b34:	push	{lr}		; (str lr, [sp, #-4]!)
   18b38:	lsr	lr, r1, #5
   18b3c:	and	r1, r1, #31
   18b40:	moveq	r0, r3
   18b44:	add	r3, r0, #8
   18b48:	ldr	ip, [r3, lr, lsl #2]
   18b4c:	lsr	r0, ip, r1
   18b50:	eor	r2, r2, r0
   18b54:	and	r0, r0, #1
   18b58:	and	r2, r2, #1
   18b5c:	eor	r1, ip, r2, lsl r1
   18b60:	str	r1, [r3, lr, lsl #2]
   18b64:	pop	{pc}		; (ldr pc, [sp], #4)
   18b68:	strdeq	ip, [r2], -r4
   18b6c:	ldr	r3, [pc, #16]	; 18b84 <lchmod@@Base+0x2428>
   18b70:	cmp	r0, #0
   18b74:	movne	r3, r0
   18b78:	ldr	r0, [r3, #4]
   18b7c:	str	r1, [r3, #4]
   18b80:	bx	lr
   18b84:	strdeq	ip, [r2], -r4
   18b88:	ldr	r3, [pc, #48]	; 18bc0 <lchmod@@Base+0x2464>
   18b8c:	cmp	r0, #0
   18b90:	mov	ip, #10
   18b94:	moveq	r0, r3
   18b98:	cmp	r2, #0
   18b9c:	cmpne	r1, #0
   18ba0:	str	ip, [r0]
   18ba4:	beq	18bb4 <lchmod@@Base+0x2458>
   18ba8:	str	r1, [r0, #40]	; 0x28
   18bac:	str	r2, [r0, #44]	; 0x2c
   18bb0:	bx	lr
   18bb4:	str	r4, [sp, #-8]!
   18bb8:	str	lr, [sp, #4]
   18bbc:	bl	117d8 <abort@plt>
   18bc0:	strdeq	ip, [r2], -r4
   18bc4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18bc8:	strd	r6, [sp, #8]
   18bcc:	mov	r7, r0
   18bd0:	mov	r6, r1
   18bd4:	strd	r8, [sp, #16]
   18bd8:	mov	r8, r2
   18bdc:	mov	r9, r3
   18be0:	str	lr, [sp, #24]
   18be4:	sub	sp, sp, #28
   18be8:	ldr	r4, [sp, #56]	; 0x38
   18bec:	ldr	ip, [pc, #104]	; 18c5c <lchmod@@Base+0x2500>
   18bf0:	cmp	r4, #0
   18bf4:	moveq	r4, ip
   18bf8:	bl	11688 <__errno_location@plt>
   18bfc:	ldr	ip, [r4, #44]	; 0x2c
   18c00:	mov	r5, r0
   18c04:	mov	r1, r6
   18c08:	add	lr, r4, #8
   18c0c:	mov	r3, r9
   18c10:	ldr	r6, [r5]
   18c14:	mov	r2, r8
   18c18:	mov	r0, r7
   18c1c:	str	ip, [sp, #16]
   18c20:	ldr	ip, [r4, #40]	; 0x28
   18c24:	str	lr, [sp, #8]
   18c28:	str	ip, [sp, #12]
   18c2c:	ldr	ip, [r4, #4]
   18c30:	str	ip, [sp, #4]
   18c34:	ldr	ip, [r4]
   18c38:	str	ip, [sp]
   18c3c:	bl	1710c <lchmod@@Base+0x9b0>
   18c40:	str	r6, [r5]
   18c44:	add	sp, sp, #28
   18c48:	ldrd	r4, [sp]
   18c4c:	ldrd	r6, [sp, #8]
   18c50:	ldrd	r8, [sp, #16]
   18c54:	add	sp, sp, #24
   18c58:	pop	{pc}		; (ldr pc, [sp], #4)
   18c5c:	strdeq	ip, [r2], -r4
   18c60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c64:	cmp	r3, #0
   18c68:	ldr	r4, [pc, #220]	; 18d4c <lchmod@@Base+0x25f0>
   18c6c:	movne	r4, r3
   18c70:	strd	r6, [sp, #8]
   18c74:	mov	r6, r2
   18c78:	strd	r8, [sp, #16]
   18c7c:	mov	r9, r0
   18c80:	strd	sl, [sp, #24]
   18c84:	mov	sl, r1
   18c88:	str	lr, [sp, #32]
   18c8c:	sub	sp, sp, #44	; 0x2c
   18c90:	bl	11688 <__errno_location@plt>
   18c94:	ldr	r5, [r4, #4]
   18c98:	mov	r7, r0
   18c9c:	mov	r1, #0
   18ca0:	add	r8, r4, #8
   18ca4:	mov	r3, sl
   18ca8:	ldr	ip, [r4, #44]	; 0x2c
   18cac:	mov	r2, r9
   18cb0:	mov	r0, r1
   18cb4:	ldr	lr, [r7]
   18cb8:	cmp	r6, r1
   18cbc:	orreq	r5, r5, #1
   18cc0:	str	ip, [sp, #16]
   18cc4:	ldr	ip, [r4, #40]	; 0x28
   18cc8:	stmib	sp, {r5, r8, ip}
   18ccc:	ldr	ip, [r4]
   18cd0:	str	lr, [sp, #28]
   18cd4:	str	ip, [sp]
   18cd8:	bl	1710c <lchmod@@Base+0x9b0>
   18cdc:	add	r1, r0, #1
   18ce0:	mov	fp, r0
   18ce4:	mov	r0, r1
   18ce8:	str	r1, [sp, #36]	; 0x24
   18cec:	bl	19a7c <lchmod@@Base+0x3320>
   18cf0:	ldr	ip, [r4, #44]	; 0x2c
   18cf4:	mov	r3, sl
   18cf8:	mov	r2, r9
   18cfc:	ldr	r1, [sp, #36]	; 0x24
   18d00:	str	ip, [sp, #16]
   18d04:	ldr	ip, [r4, #40]	; 0x28
   18d08:	str	r0, [sp, #32]
   18d0c:	stmib	sp, {r5, r8, ip}
   18d10:	ldr	ip, [r4]
   18d14:	str	ip, [sp]
   18d18:	bl	1710c <lchmod@@Base+0x9b0>
   18d1c:	ldr	lr, [sp, #28]
   18d20:	cmp	r6, #0
   18d24:	ldr	r0, [sp, #32]
   18d28:	str	lr, [r7]
   18d2c:	strne	fp, [r6]
   18d30:	add	sp, sp, #44	; 0x2c
   18d34:	ldrd	r4, [sp]
   18d38:	ldrd	r6, [sp, #8]
   18d3c:	ldrd	r8, [sp, #16]
   18d40:	ldrd	sl, [sp, #24]
   18d44:	add	sp, sp, #32
   18d48:	pop	{pc}		; (ldr pc, [sp], #4)
   18d4c:	strdeq	ip, [r2], -r4
   18d50:	mov	r3, r2
   18d54:	mov	r2, #0
   18d58:	b	18c60 <lchmod@@Base+0x2504>
   18d5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18d60:	movw	r5, #49540	; 0xc184
   18d64:	movt	r5, #2
   18d68:	ldr	r3, [r5, #4]
   18d6c:	strd	r6, [sp, #8]
   18d70:	str	r8, [sp, #16]
   18d74:	str	lr, [sp, #20]
   18d78:	ldr	r7, [r5]
   18d7c:	cmp	r3, #1
   18d80:	ble	18da4 <lchmod@@Base+0x2648>
   18d84:	mov	r4, #1
   18d88:	add	r6, r7, #4
   18d8c:	ldr	r0, [r6, r4, lsl #3]
   18d90:	add	r4, r4, #1
   18d94:	bl	130e8 <__assert_fail@plt+0x18bc>
   18d98:	ldr	r3, [r5, #4]
   18d9c:	cmp	r3, r4
   18da0:	bgt	18d8c <lchmod@@Base+0x2630>
   18da4:	ldr	r0, [r7, #4]
   18da8:	movw	r4, #49652	; 0xc1f4
   18dac:	movt	r4, #2
   18db0:	cmp	r0, r4
   18db4:	beq	18dc8 <lchmod@@Base+0x266c>
   18db8:	bl	130e8 <__assert_fail@plt+0x18bc>
   18dbc:	mov	r3, #256	; 0x100
   18dc0:	str	r3, [r5, #8]
   18dc4:	str	r4, [r5, #12]
   18dc8:	ldr	r4, [pc, #44]	; 18dfc <lchmod@@Base+0x26a0>
   18dcc:	cmp	r7, r4
   18dd0:	beq	18de0 <lchmod@@Base+0x2684>
   18dd4:	mov	r0, r7
   18dd8:	bl	130e8 <__assert_fail@plt+0x18bc>
   18ddc:	str	r4, [r5]
   18de0:	mov	r3, #1
   18de4:	ldrd	r6, [sp, #8]
   18de8:	str	r3, [r5, #4]
   18dec:	ldrd	r4, [sp]
   18df0:	ldr	r8, [sp, #16]
   18df4:	add	sp, sp, #20
   18df8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dfc:	andeq	ip, r2, ip, lsl #3
   18e00:	ldr	r3, [pc, #4]	; 18e0c <lchmod@@Base+0x26b0>
   18e04:	mvn	r2, #0
   18e08:	b	188cc <lchmod@@Base+0x2170>
   18e0c:	strdeq	ip, [r2], -r4
   18e10:	ldr	r3, [pc]	; 18e18 <lchmod@@Base+0x26bc>
   18e14:	b	188cc <lchmod@@Base+0x2170>
   18e18:	strdeq	ip, [r2], -r4
   18e1c:	mov	r1, r0
   18e20:	ldr	r3, [pc, #8]	; 18e30 <lchmod@@Base+0x26d4>
   18e24:	mvn	r2, #0
   18e28:	mov	r0, #0
   18e2c:	b	188cc <lchmod@@Base+0x2170>
   18e30:	strdeq	ip, [r2], -r4
   18e34:	mov	r2, r1
   18e38:	ldr	r3, [pc, #8]	; 18e48 <lchmod@@Base+0x26ec>
   18e3c:	mov	r1, r0
   18e40:	mov	r0, #0
   18e44:	b	188cc <lchmod@@Base+0x2170>
   18e48:	strdeq	ip, [r2], -r4
   18e4c:	strd	r4, [sp, #-12]!
   18e50:	mov	r5, r2
   18e54:	mov	r4, r0
   18e58:	str	lr, [sp, #8]
   18e5c:	sub	sp, sp, #52	; 0x34
   18e60:	mov	r0, sp
   18e64:	bl	16f68 <lchmod@@Base+0x80c>
   18e68:	mov	r3, sp
   18e6c:	mov	r1, r5
   18e70:	mov	r0, r4
   18e74:	mvn	r2, #0
   18e78:	bl	188cc <lchmod@@Base+0x2170>
   18e7c:	add	sp, sp, #52	; 0x34
   18e80:	ldrd	r4, [sp]
   18e84:	add	sp, sp, #8
   18e88:	pop	{pc}		; (ldr pc, [sp], #4)
   18e8c:	strd	r4, [sp, #-16]!
   18e90:	mov	r5, r2
   18e94:	mov	r4, r0
   18e98:	str	r6, [sp, #8]
   18e9c:	mov	r6, r3
   18ea0:	str	lr, [sp, #12]
   18ea4:	sub	sp, sp, #48	; 0x30
   18ea8:	mov	r0, sp
   18eac:	bl	16f68 <lchmod@@Base+0x80c>
   18eb0:	mov	r3, sp
   18eb4:	mov	r2, r6
   18eb8:	mov	r1, r5
   18ebc:	mov	r0, r4
   18ec0:	bl	188cc <lchmod@@Base+0x2170>
   18ec4:	add	sp, sp, #48	; 0x30
   18ec8:	ldrd	r4, [sp]
   18ecc:	ldr	r6, [sp, #8]
   18ed0:	add	sp, sp, #12
   18ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ed8:	mov	r2, r1
   18edc:	mov	r1, r0
   18ee0:	mov	r0, #0
   18ee4:	b	18e4c <lchmod@@Base+0x26f0>
   18ee8:	mov	r3, r2
   18eec:	mov	r2, r1
   18ef0:	mov	r1, r0
   18ef4:	mov	r0, #0
   18ef8:	b	18e8c <lchmod@@Base+0x2730>
   18efc:	ldr	ip, [pc, #140]	; 18f90 <lchmod@@Base+0x2834>
   18f00:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18f04:	ldrd	r4, [ip]
   18f08:	strd	r6, [sp, #8]
   18f0c:	ldrd	r6, [ip, #8]
   18f10:	strd	r8, [sp, #16]
   18f14:	lsr	r9, r2, #5
   18f18:	str	lr, [sp, #24]
   18f1c:	sub	sp, sp, #52	; 0x34
   18f20:	and	lr, r2, #31
   18f24:	add	r8, sp, #8
   18f28:	mov	r2, r1
   18f2c:	strd	r4, [sp]
   18f30:	mov	r1, r0
   18f34:	mov	r3, sp
   18f38:	strd	r6, [sp, #8]
   18f3c:	mov	r0, #0
   18f40:	ldrd	r4, [ip, #16]
   18f44:	ldrd	r6, [ip, #24]
   18f48:	strd	r4, [sp, #16]
   18f4c:	ldrd	r4, [ip, #32]
   18f50:	strd	r6, [sp, #24]
   18f54:	ldrd	r6, [ip, #40]	; 0x28
   18f58:	strd	r4, [sp, #32]
   18f5c:	strd	r6, [sp, #40]	; 0x28
   18f60:	ldr	ip, [r8, r9, lsl #2]
   18f64:	mvn	r4, ip, lsr lr
   18f68:	and	r4, r4, #1
   18f6c:	eor	lr, ip, r4, lsl lr
   18f70:	str	lr, [r8, r9, lsl #2]
   18f74:	bl	188cc <lchmod@@Base+0x2170>
   18f78:	add	sp, sp, #52	; 0x34
   18f7c:	ldrd	r4, [sp]
   18f80:	ldrd	r6, [sp, #8]
   18f84:	ldrd	r8, [sp, #16]
   18f88:	add	sp, sp, #24
   18f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f90:	strdeq	ip, [r2], -r4
   18f94:	mov	r2, r1
   18f98:	mvn	r1, #0
   18f9c:	b	18efc <lchmod@@Base+0x27a0>
   18fa0:	mov	r2, #58	; 0x3a
   18fa4:	mvn	r1, #0
   18fa8:	b	18efc <lchmod@@Base+0x27a0>
   18fac:	mov	r2, #58	; 0x3a
   18fb0:	b	18efc <lchmod@@Base+0x27a0>
   18fb4:	strd	r4, [sp, #-20]!	; 0xffffffec
   18fb8:	strd	r6, [sp, #8]
   18fbc:	mov	r6, r0
   18fc0:	mov	r7, r2
   18fc4:	str	lr, [sp, #16]
   18fc8:	sub	sp, sp, #100	; 0x64
   18fcc:	mov	r0, sp
   18fd0:	bl	16f68 <lchmod@@Base+0x80c>
   18fd4:	ldrd	r4, [sp, #8]
   18fd8:	mov	r1, r7
   18fdc:	mov	r0, r6
   18fe0:	add	r3, sp, #48	; 0x30
   18fe4:	mvn	r2, #0
   18fe8:	ldrd	r6, [sp]
   18fec:	strd	r4, [sp, #56]	; 0x38
   18ff0:	ldrd	r4, [sp, #16]
   18ff4:	strd	r6, [sp, #48]	; 0x30
   18ff8:	ldrd	r6, [sp, #32]
   18ffc:	ldr	lr, [sp, #60]	; 0x3c
   19000:	strd	r4, [sp, #64]	; 0x40
   19004:	ldrd	r4, [sp, #24]
   19008:	mvn	ip, lr
   1900c:	and	ip, ip, #67108864	; 0x4000000
   19010:	strd	r4, [sp, #72]	; 0x48
   19014:	eor	ip, ip, lr
   19018:	ldrd	r4, [sp, #40]	; 0x28
   1901c:	str	ip, [sp, #60]	; 0x3c
   19020:	strd	r6, [sp, #80]	; 0x50
   19024:	strd	r4, [sp, #88]	; 0x58
   19028:	bl	188cc <lchmod@@Base+0x2170>
   1902c:	add	sp, sp, #100	; 0x64
   19030:	ldrd	r4, [sp]
   19034:	ldrd	r6, [sp, #8]
   19038:	add	sp, sp, #16
   1903c:	pop	{pc}		; (ldr pc, [sp], #4)
   19040:	ldr	ip, [pc, #156]	; 190e4 <lchmod@@Base+0x2988>
   19044:	cmp	r2, #0
   19048:	cmpne	r1, #0
   1904c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19050:	strd	r6, [sp, #8]
   19054:	mov	r6, r2
   19058:	str	r8, [sp, #16]
   1905c:	mov	r8, r3
   19060:	strd	sl, [sp, #20]
   19064:	ldrd	r4, [ip]
   19068:	str	lr, [sp, #28]
   1906c:	sub	sp, sp, #48	; 0x30
   19070:	mov	lr, #10
   19074:	ldrd	r2, [ip, #8]
   19078:	ldrd	sl, [ip, #16]
   1907c:	strd	r4, [sp]
   19080:	ldrd	r4, [ip, #32]
   19084:	str	lr, [sp]
   19088:	strd	r2, [sp, #8]
   1908c:	strd	sl, [sp, #16]
   19090:	ldrd	r2, [ip, #24]
   19094:	ldrd	sl, [ip, #40]	; 0x28
   19098:	strd	r2, [sp, #24]
   1909c:	strd	r4, [sp, #32]
   190a0:	strd	sl, [sp, #40]	; 0x28
   190a4:	beq	190e0 <lchmod@@Base+0x2984>
   190a8:	ldr	r2, [sp, #80]	; 0x50
   190ac:	mov	r7, r1
   190b0:	mov	r3, sp
   190b4:	mov	r1, r8
   190b8:	str	r7, [sp, #40]	; 0x28
   190bc:	str	r6, [sp, #44]	; 0x2c
   190c0:	bl	188cc <lchmod@@Base+0x2170>
   190c4:	add	sp, sp, #48	; 0x30
   190c8:	ldrd	r4, [sp]
   190cc:	ldrd	r6, [sp, #8]
   190d0:	ldr	r8, [sp, #16]
   190d4:	ldrd	sl, [sp, #20]
   190d8:	add	sp, sp, #28
   190dc:	pop	{pc}		; (ldr pc, [sp], #4)
   190e0:	bl	117d8 <abort@plt>
   190e4:	strdeq	ip, [r2], -r4
   190e8:	mvn	ip, #0
   190ec:	push	{lr}		; (str lr, [sp, #-4]!)
   190f0:	sub	sp, sp, #12
   190f4:	str	ip, [sp]
   190f8:	bl	19040 <lchmod@@Base+0x28e4>
   190fc:	add	sp, sp, #12
   19100:	pop	{pc}		; (ldr pc, [sp], #4)
   19104:	mvn	ip, #0
   19108:	push	{lr}		; (str lr, [sp, #-4]!)
   1910c:	sub	sp, sp, #12
   19110:	mov	r3, r2
   19114:	mov	r2, r1
   19118:	mov	r1, r0
   1911c:	mov	r0, #0
   19120:	str	ip, [sp]
   19124:	bl	19040 <lchmod@@Base+0x28e4>
   19128:	add	sp, sp, #12
   1912c:	pop	{pc}		; (ldr pc, [sp], #4)
   19130:	push	{lr}		; (str lr, [sp, #-4]!)
   19134:	sub	sp, sp, #12
   19138:	str	r3, [sp]
   1913c:	mov	r3, r2
   19140:	mov	r2, r1
   19144:	mov	r1, r0
   19148:	mov	r0, #0
   1914c:	bl	19040 <lchmod@@Base+0x28e4>
   19150:	add	sp, sp, #12
   19154:	pop	{pc}		; (ldr pc, [sp], #4)
   19158:	ldr	r3, [pc]	; 19160 <lchmod@@Base+0x2a04>
   1915c:	b	188cc <lchmod@@Base+0x2170>
   19160:	muleq	r2, r4, r1
   19164:	mov	r2, r1
   19168:	ldr	r3, [pc, #8]	; 19178 <lchmod@@Base+0x2a1c>
   1916c:	mov	r1, r0
   19170:	mov	r0, #0
   19174:	b	188cc <lchmod@@Base+0x2170>
   19178:	muleq	r2, r4, r1
   1917c:	ldr	r3, [pc, #4]	; 19188 <lchmod@@Base+0x2a2c>
   19180:	mvn	r2, #0
   19184:	b	188cc <lchmod@@Base+0x2170>
   19188:	muleq	r2, r4, r1
   1918c:	mov	r1, r0
   19190:	ldr	r3, [pc, #8]	; 191a0 <lchmod@@Base+0x2a44>
   19194:	mvn	r2, #0
   19198:	mov	r0, #0
   1919c:	b	188cc <lchmod@@Base+0x2170>
   191a0:	muleq	r2, r4, r1
   191a4:	strd	r4, [sp, #-16]!
   191a8:	ldr	r4, [r0], #8
   191ac:	str	r6, [sp, #8]
   191b0:	str	lr, [sp, #12]
   191b4:	cmp	r4, r0
   191b8:	beq	191e4 <lchmod@@Base+0x2a88>
   191bc:	mov	r0, r4
   191c0:	bl	1a030 <lchmod@@Base+0x38d4>
   191c4:	cmp	r0, #0
   191c8:	movne	r3, r0
   191cc:	moveq	r3, r4
   191d0:	ldrd	r4, [sp]
   191d4:	mov	r0, r3
   191d8:	ldr	r6, [sp, #8]
   191dc:	add	sp, sp, #12
   191e0:	pop	{pc}		; (ldr pc, [sp], #4)
   191e4:	mov	r0, r1
   191e8:	mov	r5, r1
   191ec:	bl	19ff4 <lchmod@@Base+0x3898>
   191f0:	subs	r3, r0, #0
   191f4:	beq	191d0 <lchmod@@Base+0x2a74>
   191f8:	mov	r2, r5
   191fc:	mov	r1, r4
   19200:	ldrd	r4, [sp]
   19204:	ldr	r6, [sp, #8]
   19208:	ldr	lr, [sp, #12]
   1920c:	add	sp, sp, #16
   19210:	b	114b4 <memcpy@plt>
   19214:	strd	r4, [sp, #-16]!
   19218:	mov	r5, r0
   1921c:	mov	r4, r0
   19220:	ldr	r3, [r0, #4]
   19224:	ldr	r0, [r5], #8
   19228:	str	r6, [sp, #8]
   1922c:	str	lr, [sp, #12]
   19230:	lsl	r6, r3, #1
   19234:	cmp	r0, r5
   19238:	beq	19244 <lchmod@@Base+0x2ae8>
   1923c:	bl	130e8 <__assert_fail@plt+0x18bc>
   19240:	ldr	r3, [r4, #4]
   19244:	cmp	r3, r6
   19248:	bhi	19274 <lchmod@@Base+0x2b18>
   1924c:	mov	r0, r6
   19250:	bl	19ff4 <lchmod@@Base+0x3898>
   19254:	subs	r3, r0, #0
   19258:	beq	19280 <lchmod@@Base+0x2b24>
   1925c:	mov	r0, #1
   19260:	stm	r4, {r3, r6}
   19264:	ldrd	r4, [sp]
   19268:	ldr	r6, [sp, #8]
   1926c:	add	sp, sp, #12
   19270:	pop	{pc}		; (ldr pc, [sp], #4)
   19274:	bl	11688 <__errno_location@plt>
   19278:	mov	r3, #12
   1927c:	str	r3, [r0]
   19280:	mov	r3, #1024	; 0x400
   19284:	mov	r0, #0
   19288:	str	r5, [r4]
   1928c:	str	r3, [r4, #4]
   19290:	b	19264 <lchmod@@Base+0x2b08>
   19294:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19298:	mov	r5, r0
   1929c:	mov	r4, r0
   192a0:	ldr	r3, [r0, #4]
   192a4:	strd	r6, [sp, #8]
   192a8:	ldr	r7, [r5], #8
   192ac:	str	r8, [sp, #16]
   192b0:	str	lr, [sp, #20]
   192b4:	lsl	r6, r3, #1
   192b8:	cmp	r7, r5
   192bc:	beq	19300 <lchmod@@Base+0x2ba4>
   192c0:	cmp	r3, r6
   192c4:	bhi	19324 <lchmod@@Base+0x2bc8>
   192c8:	mov	r0, r7
   192cc:	mov	r1, r6
   192d0:	bl	1a030 <lchmod@@Base+0x38d4>
   192d4:	subs	r8, r0, #0
   192d8:	ldreq	r7, [r4]
   192dc:	beq	19330 <lchmod@@Base+0x2bd4>
   192e0:	mov	r0, #1
   192e4:	str	r8, [r4]
   192e8:	str	r6, [r4, #4]
   192ec:	ldrd	r4, [sp]
   192f0:	ldrd	r6, [sp, #8]
   192f4:	ldr	r8, [sp, #16]
   192f8:	add	sp, sp, #20
   192fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19300:	mov	r0, r6
   19304:	bl	19ff4 <lchmod@@Base+0x3898>
   19308:	subs	r8, r0, #0
   1930c:	moveq	r0, r8
   19310:	beq	192ec <lchmod@@Base+0x2b90>
   19314:	mov	r1, r7
   19318:	ldr	r2, [r4, #4]
   1931c:	bl	114b4 <memcpy@plt>
   19320:	b	192e0 <lchmod@@Base+0x2b84>
   19324:	bl	11688 <__errno_location@plt>
   19328:	mov	r3, #12
   1932c:	str	r3, [r0]
   19330:	mov	r0, r7
   19334:	bl	130e8 <__assert_fail@plt+0x18bc>
   19338:	mov	r3, #1024	; 0x400
   1933c:	mov	r0, #0
   19340:	str	r5, [r4]
   19344:	str	r3, [r4, #4]
   19348:	b	192ec <lchmod@@Base+0x2b90>
   1934c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19350:	subs	r4, r0, #0
   19354:	strd	r6, [sp, #8]
   19358:	str	r8, [sp, #16]
   1935c:	str	lr, [sp, #20]
   19360:	beq	193c4 <lchmod@@Base+0x2c68>
   19364:	cmp	r4, #10
   19368:	beq	19384 <lchmod@@Base+0x2c28>
   1936c:	mov	r0, r4
   19370:	ldrd	r4, [sp]
   19374:	ldrd	r6, [sp, #8]
   19378:	ldr	r8, [sp, #16]
   1937c:	add	sp, sp, #20
   19380:	pop	{pc}		; (ldr pc, [sp], #4)
   19384:	mov	r5, r1
   19388:	movw	r1, #45788	; 0xb2dc
   1938c:	movt	r1, #1
   19390:	ldr	r6, [r5]
   19394:	mov	r0, r6
   19398:	bl	11454 <strcmp@plt>
   1939c:	subs	r7, r0, #0
   193a0:	bne	1936c <lchmod@@Base+0x2c10>
   193a4:	mov	r0, r6
   193a8:	mvn	r4, #0
   193ac:	bl	11778 <freecon@plt>
   193b0:	str	r7, [r5]
   193b4:	bl	11688 <__errno_location@plt>
   193b8:	mov	r3, #61	; 0x3d
   193bc:	str	r3, [r0]
   193c0:	b	1936c <lchmod@@Base+0x2c10>
   193c4:	bl	11688 <__errno_location@plt>
   193c8:	mov	r3, #95	; 0x5f
   193cc:	mvn	r4, #0
   193d0:	str	r3, [r0]
   193d4:	b	1936c <lchmod@@Base+0x2c10>
   193d8:	str	r4, [sp, #-8]!
   193dc:	mov	r4, r1
   193e0:	str	lr, [sp, #4]
   193e4:	bl	1164c <getfilecon@plt>
   193e8:	mov	r1, r4
   193ec:	ldr	r4, [sp]
   193f0:	ldr	lr, [sp, #4]
   193f4:	add	sp, sp, #8
   193f8:	b	1934c <lchmod@@Base+0x2bf0>
   193fc:	str	r4, [sp, #-8]!
   19400:	mov	r4, r1
   19404:	str	lr, [sp, #4]
   19408:	bl	115c8 <lgetfilecon@plt>
   1940c:	mov	r1, r4
   19410:	ldr	r4, [sp]
   19414:	ldr	lr, [sp, #4]
   19418:	add	sp, sp, #8
   1941c:	b	1934c <lchmod@@Base+0x2bf0>
   19420:	str	r4, [sp, #-8]!
   19424:	mov	r4, r1
   19428:	str	lr, [sp, #4]
   1942c:	bl	11514 <fgetfilecon@plt>
   19430:	mov	r1, r4
   19434:	ldr	r4, [sp]
   19438:	ldr	lr, [sp, #4]
   1943c:	add	sp, sp, #8
   19440:	b	1934c <lchmod@@Base+0x2bf0>
   19444:	cmp	r0, #2
   19448:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1944c:	mov	r4, r0
   19450:	strd	r6, [sp, #8]
   19454:	str	r8, [sp, #16]
   19458:	str	lr, [sp, #20]
   1945c:	bls	19478 <lchmod@@Base+0x2d1c>
   19460:	mov	r0, r4
   19464:	ldrd	r4, [sp]
   19468:	ldrd	r6, [sp, #8]
   1946c:	ldr	r8, [sp, #16]
   19470:	add	sp, sp, #20
   19474:	pop	{pc}		; (ldr pc, [sp], #4)
   19478:	bl	1a81c <lchmod@@Base+0x40c0>
   1947c:	mov	r7, r0
   19480:	bl	11688 <__errno_location@plt>
   19484:	mov	r5, r0
   19488:	mov	r0, r4
   1948c:	ldr	r6, [r5]
   19490:	mov	r4, r7
   19494:	bl	117e4 <close@plt>
   19498:	str	r6, [r5]
   1949c:	b	19460 <lchmod@@Base+0x2d04>
   194a0:	cmp	r1, #0
   194a4:	strd	r4, [sp, #-16]!
   194a8:	mov	ip, r3
   194ac:	str	r6, [sp, #8]
   194b0:	mov	r4, r0
   194b4:	str	lr, [sp, #12]
   194b8:	sub	sp, sp, #32
   194bc:	ldr	r5, [sp, #48]	; 0x30
   194c0:	ldr	r6, [sp, #52]	; 0x34
   194c4:	beq	19608 <lchmod@@Base+0x2eac>
   194c8:	mov	r3, r1
   194cc:	mov	r1, #1
   194d0:	stm	sp, {r2, ip}
   194d4:	movw	r2, #45800	; 0xb2e8
   194d8:	movt	r2, #1
   194dc:	bl	116d0 <__fprintf_chk@plt>
   194e0:	mov	r2, #5
   194e4:	movw	r1, #45820	; 0xb2fc
   194e8:	movt	r1, #1
   194ec:	mov	r0, #0
   194f0:	bl	114f0 <dcgettext@plt>
   194f4:	movw	ip, #2022	; 0x7e6
   194f8:	mov	r3, r0
   194fc:	mov	r1, #1
   19500:	movw	r2, #46548	; 0xb5d4
   19504:	movt	r2, #1
   19508:	mov	r0, r4
   1950c:	str	ip, [sp]
   19510:	bl	116d0 <__fprintf_chk@plt>
   19514:	mov	r1, r4
   19518:	mov	r0, #10
   1951c:	bl	114e4 <fputc_unlocked@plt>
   19520:	mov	r2, #5
   19524:	movw	r1, #45824	; 0xb300
   19528:	movt	r1, #1
   1952c:	mov	r0, #0
   19530:	bl	114f0 <dcgettext@plt>
   19534:	mov	r2, r0
   19538:	mov	r1, #1
   1953c:	movw	r3, #45996	; 0xb3ac
   19540:	movt	r3, #1
   19544:	mov	r0, r4
   19548:	bl	116d0 <__fprintf_chk@plt>
   1954c:	mov	r1, r4
   19550:	mov	r0, #10
   19554:	bl	114e4 <fputc_unlocked@plt>
   19558:	cmp	r6, #9
   1955c:	ldrls	pc, [pc, r6, lsl #2]
   19560:	b	19874 <lchmod@@Base+0x3118>
   19564:	strdeq	r9, [r1], -r4
   19568:	andeq	r9, r1, r4, lsr #12
   1956c:	andeq	r9, r1, r0, ror #12
   19570:	andeq	r9, r1, r0, lsr #13
   19574:	andeq	r9, r1, r8, ror #13
   19578:	andeq	r9, r1, r0, lsr #14
   1957c:	andeq	r9, r1, r8, ror #14
   19580:			; <UNDEFINED> instruction: 0x000197bc
   19584:	andeq	r9, r1, r4, lsl r8
   19588:	andeq	r9, r1, ip, lsl #11
   1958c:	movw	r1, #46300	; 0xb4dc
   19590:	movt	r1, #1
   19594:	mov	r2, #5
   19598:	mov	r0, #0
   1959c:	bl	114f0 <dcgettext@plt>
   195a0:	ldr	lr, [r5, #4]
   195a4:	mov	r2, r0
   195a8:	mov	r1, #1
   195ac:	mov	r0, r4
   195b0:	ldr	r3, [r5, #8]
   195b4:	ldr	ip, [r5, #32]
   195b8:	str	lr, [sp]
   195bc:	ldr	lr, [r5, #12]
   195c0:	str	ip, [sp, #28]
   195c4:	ldr	ip, [r5, #28]
   195c8:	str	r3, [sp, #4]
   195cc:	ldr	r3, [r5, #16]
   195d0:	str	lr, [sp, #8]
   195d4:	ldr	lr, [r5, #20]
   195d8:	str	ip, [sp, #24]
   195dc:	ldr	ip, [r5, #24]
   195e0:	str	r3, [sp, #12]
   195e4:	ldr	r3, [r5]
   195e8:	str	lr, [sp, #16]
   195ec:	str	ip, [sp, #20]
   195f0:	bl	116d0 <__fprintf_chk@plt>
   195f4:	add	sp, sp, #32
   195f8:	ldrd	r4, [sp]
   195fc:	ldr	r6, [sp, #8]
   19600:	add	sp, sp, #12
   19604:	pop	{pc}		; (ldr pc, [sp], #4)
   19608:	mov	r3, r2
   1960c:	mov	r1, #1
   19610:	str	ip, [sp]
   19614:	movw	r2, #45812	; 0xb2f4
   19618:	movt	r2, #1
   1961c:	bl	116d0 <__fprintf_chk@plt>
   19620:	b	194e0 <lchmod@@Base+0x2d84>
   19624:	mov	r2, #5
   19628:	movw	r1, #46032	; 0xb3d0
   1962c:	movt	r1, #1
   19630:	mov	r0, #0
   19634:	bl	114f0 <dcgettext@plt>
   19638:	ldr	r3, [r5]
   1963c:	mov	r2, r0
   19640:	mov	r1, #1
   19644:	mov	r0, r4
   19648:	add	sp, sp, #32
   1964c:	ldrd	r4, [sp]
   19650:	ldr	r6, [sp, #8]
   19654:	ldr	lr, [sp, #12]
   19658:	add	sp, sp, #16
   1965c:	b	116d0 <__fprintf_chk@plt>
   19660:	mov	r2, #5
   19664:	movw	r1, #46048	; 0xb3e0
   19668:	movt	r1, #1
   1966c:	mov	r0, #0
   19670:	bl	114f0 <dcgettext@plt>
   19674:	ldm	r5, {r3, ip}
   19678:	mov	r2, r0
   1967c:	mov	r1, #1
   19680:	mov	r0, r4
   19684:	str	ip, [sp, #48]	; 0x30
   19688:	add	sp, sp, #32
   1968c:	ldrd	r4, [sp]
   19690:	ldr	r6, [sp, #8]
   19694:	ldr	lr, [sp, #12]
   19698:	add	sp, sp, #16
   1969c:	b	116d0 <__fprintf_chk@plt>
   196a0:	mov	r2, #5
   196a4:	movw	r1, #46072	; 0xb3f8
   196a8:	movt	r1, #1
   196ac:	mov	r0, #0
   196b0:	bl	114f0 <dcgettext@plt>
   196b4:	ldm	r5, {r3, lr}
   196b8:	mov	r2, r0
   196bc:	mov	r1, #1
   196c0:	mov	r0, r4
   196c4:	ldr	ip, [r5, #8]
   196c8:	str	lr, [sp, #48]	; 0x30
   196cc:	str	ip, [sp, #52]	; 0x34
   196d0:	add	sp, sp, #32
   196d4:	ldrd	r4, [sp]
   196d8:	ldr	r6, [sp, #8]
   196dc:	ldr	lr, [sp, #12]
   196e0:	add	sp, sp, #16
   196e4:	b	116d0 <__fprintf_chk@plt>
   196e8:	mov	r2, #5
   196ec:	movw	r1, #46100	; 0xb414
   196f0:	movt	r1, #1
   196f4:	mov	r0, #0
   196f8:	bl	114f0 <dcgettext@plt>
   196fc:	ldmib	r5, {r3, ip, lr}
   19700:	mov	r2, r0
   19704:	mov	r1, #1
   19708:	mov	r0, r4
   1970c:	str	r3, [sp]
   19710:	ldr	r3, [r5]
   19714:	stmib	sp, {ip, lr}
   19718:	bl	116d0 <__fprintf_chk@plt>
   1971c:	b	195f4 <lchmod@@Base+0x2e98>
   19720:	mov	r2, #5
   19724:	movw	r1, #46132	; 0xb434
   19728:	movt	r1, #1
   1972c:	mov	r0, #0
   19730:	bl	114f0 <dcgettext@plt>
   19734:	ldmib	r5, {ip, lr}
   19738:	mov	r2, r0
   1973c:	mov	r1, #1
   19740:	mov	r0, r4
   19744:	ldr	r3, [r5, #16]
   19748:	str	ip, [sp]
   1974c:	ldr	ip, [r5, #12]
   19750:	str	r3, [sp, #12]
   19754:	ldr	r3, [r5]
   19758:	str	lr, [sp, #4]
   1975c:	str	ip, [sp, #8]
   19760:	bl	116d0 <__fprintf_chk@plt>
   19764:	b	195f4 <lchmod@@Base+0x2e98>
   19768:	mov	r2, #5
   1976c:	movw	r1, #46168	; 0xb458
   19770:	movt	r1, #1
   19774:	mov	r0, #0
   19778:	bl	114f0 <dcgettext@plt>
   1977c:	ldr	lr, [r5, #4]
   19780:	mov	r2, r0
   19784:	mov	r1, #1
   19788:	mov	r0, r4
   1978c:	ldr	r3, [r5, #8]
   19790:	ldr	ip, [r5, #20]
   19794:	str	lr, [sp]
   19798:	ldr	lr, [r5, #12]
   1979c:	str	ip, [sp, #16]
   197a0:	ldr	ip, [r5, #16]
   197a4:	str	r3, [sp, #4]
   197a8:	ldr	r3, [r5]
   197ac:	str	lr, [sp, #8]
   197b0:	str	ip, [sp, #12]
   197b4:	bl	116d0 <__fprintf_chk@plt>
   197b8:	b	195f4 <lchmod@@Base+0x2e98>
   197bc:	mov	r2, #5
   197c0:	movw	r1, #46208	; 0xb480
   197c4:	movt	r1, #1
   197c8:	mov	r0, #0
   197cc:	bl	114f0 <dcgettext@plt>
   197d0:	ldmib	r5, {r3, ip}
   197d4:	mov	r2, r0
   197d8:	mov	r1, #1
   197dc:	mov	r0, r4
   197e0:	ldr	lr, [r5, #24]
   197e4:	str	r3, [sp]
   197e8:	ldr	r3, [r5, #12]
   197ec:	str	lr, [sp, #20]
   197f0:	ldr	lr, [r5, #20]
   197f4:	str	ip, [sp, #4]
   197f8:	ldr	ip, [r5, #16]
   197fc:	str	r3, [sp, #8]
   19800:	ldr	r3, [r5]
   19804:	str	ip, [sp, #12]
   19808:	str	lr, [sp, #16]
   1980c:	bl	116d0 <__fprintf_chk@plt>
   19810:	b	195f4 <lchmod@@Base+0x2e98>
   19814:	mov	r2, #5
   19818:	movw	r1, #46252	; 0xb4ac
   1981c:	movt	r1, #1
   19820:	mov	r0, #0
   19824:	bl	114f0 <dcgettext@plt>
   19828:	ldmib	r5, {ip, lr}
   1982c:	mov	r2, r0
   19830:	mov	r1, #1
   19834:	mov	r0, r4
   19838:	ldr	r3, [r5, #28]
   1983c:	str	ip, [sp]
   19840:	ldr	ip, [r5, #12]
   19844:	str	r3, [sp, #24]
   19848:	ldr	r3, [r5, #24]
   1984c:	str	lr, [sp, #4]
   19850:	ldr	lr, [r5, #16]
   19854:	str	ip, [sp, #8]
   19858:	ldr	ip, [r5, #20]
   1985c:	str	r3, [sp, #20]
   19860:	ldr	r3, [r5]
   19864:	str	lr, [sp, #12]
   19868:	str	ip, [sp, #16]
   1986c:	bl	116d0 <__fprintf_chk@plt>
   19870:	b	195f4 <lchmod@@Base+0x2e98>
   19874:	movw	r1, #46352	; 0xb510
   19878:	movt	r1, #1
   1987c:	b	19594 <lchmod@@Base+0x2e38>
   19880:	strd	r4, [sp, #-12]!
   19884:	str	lr, [sp, #8]
   19888:	sub	sp, sp, #12
   1988c:	ldr	r5, [sp, #24]
   19890:	ldr	ip, [r5]
   19894:	cmp	ip, #0
   19898:	beq	198b4 <lchmod@@Base+0x3158>
   1989c:	mov	lr, r5
   198a0:	mov	ip, #0
   198a4:	ldr	r4, [lr, #4]!
   198a8:	add	ip, ip, #1
   198ac:	cmp	r4, #0
   198b0:	bne	198a4 <lchmod@@Base+0x3148>
   198b4:	stm	sp, {r5, ip}
   198b8:	bl	194a0 <lchmod@@Base+0x2d44>
   198bc:	add	sp, sp, #12
   198c0:	ldrd	r4, [sp]
   198c4:	add	sp, sp, #8
   198c8:	pop	{pc}		; (ldr pc, [sp], #4)
   198cc:	strd	r4, [sp, #-16]!
   198d0:	mov	ip, #0
   198d4:	str	r6, [sp, #8]
   198d8:	str	lr, [sp, #12]
   198dc:	sub	sp, sp, #48	; 0x30
   198e0:	ldr	r5, [sp, #64]	; 0x40
   198e4:	add	r6, sp, #8
   198e8:	mov	r4, r6
   198ec:	ldr	lr, [r5], #4
   198f0:	cmp	lr, #0
   198f4:	str	lr, [r4], #4
   198f8:	beq	19908 <lchmod@@Base+0x31ac>
   198fc:	add	ip, ip, #1
   19900:	cmp	ip, #10
   19904:	bne	198ec <lchmod@@Base+0x3190>
   19908:	stm	sp, {r6, ip}
   1990c:	bl	194a0 <lchmod@@Base+0x2d44>
   19910:	add	sp, sp, #48	; 0x30
   19914:	ldrd	r4, [sp]
   19918:	ldr	r6, [sp, #8]
   1991c:	add	sp, sp, #12
   19920:	pop	{pc}		; (ldr pc, [sp], #4)
   19924:	push	{r3}		; (str r3, [sp, #-4]!)
   19928:	mov	ip, #0
   1992c:	strd	r4, [sp, #-12]!
   19930:	str	lr, [sp, #8]
   19934:	sub	sp, sp, #56	; 0x38
   19938:	add	r3, sp, #72	; 0x48
   1993c:	add	r5, sp, #16
   19940:	mov	r4, r3
   19944:	mov	lr, r5
   19948:	str	r3, [sp, #12]
   1994c:	ldr	r3, [r4], #4
   19950:	cmp	r3, #0
   19954:	str	r3, [lr], #4
   19958:	beq	19968 <lchmod@@Base+0x320c>
   1995c:	add	ip, ip, #1
   19960:	cmp	ip, #10
   19964:	bne	1994c <lchmod@@Base+0x31f0>
   19968:	ldr	r3, [sp, #68]	; 0x44
   1996c:	stm	sp, {r5, ip}
   19970:	bl	194a0 <lchmod@@Base+0x2d44>
   19974:	add	sp, sp, #56	; 0x38
   19978:	ldrd	r4, [sp]
   1997c:	ldr	lr, [sp, #8]
   19980:	add	sp, sp, #12
   19984:	add	sp, sp, #4
   19988:	bx	lr
   1998c:	movw	r3, #49628	; 0xc1dc
   19990:	movt	r3, #2
   19994:	str	r4, [sp, #-8]!
   19998:	mov	r0, #10
   1999c:	ldr	r1, [r3]
   199a0:	str	lr, [sp, #4]
   199a4:	bl	114e4 <fputc_unlocked@plt>
   199a8:	mov	r2, #5
   199ac:	movw	r1, #46412	; 0xb54c
   199b0:	movt	r1, #1
   199b4:	mov	r0, #0
   199b8:	bl	114f0 <dcgettext@plt>
   199bc:	mov	r1, r0
   199c0:	movw	r2, #46432	; 0xb560
   199c4:	movt	r2, #1
   199c8:	mov	r0, #1
   199cc:	bl	116b8 <__printf_chk@plt>
   199d0:	mov	r2, #5
   199d4:	movw	r1, #46456	; 0xb578
   199d8:	movt	r1, #1
   199dc:	mov	r0, #0
   199e0:	bl	114f0 <dcgettext@plt>
   199e4:	mov	r1, r0
   199e8:	movw	r3, #44596	; 0xae34
   199ec:	movt	r3, #1
   199f0:	movw	r2, #44636	; 0xae5c
   199f4:	movt	r2, #1
   199f8:	mov	r0, #1
   199fc:	bl	116b8 <__printf_chk@plt>
   19a00:	mov	r2, #5
   19a04:	movw	r1, #46476	; 0xb58c
   19a08:	movt	r1, #1
   19a0c:	mov	r0, #0
   19a10:	bl	114f0 <dcgettext@plt>
   19a14:	mov	r1, r0
   19a18:	movw	r2, #46516	; 0xb5b4
   19a1c:	movt	r2, #1
   19a20:	mov	r0, #1
   19a24:	ldr	r4, [sp]
   19a28:	ldr	lr, [sp, #4]
   19a2c:	add	sp, sp, #8
   19a30:	b	116b8 <__printf_chk@plt>
   19a34:	str	r4, [sp, #-8]!
   19a38:	str	lr, [sp, #4]
   19a3c:	bl	19ff4 <lchmod@@Base+0x3898>
   19a40:	cmp	r0, #0
   19a44:	beq	19a54 <lchmod@@Base+0x32f8>
   19a48:	ldr	r4, [sp]
   19a4c:	add	sp, sp, #4
   19a50:	pop	{pc}		; (ldr pc, [sp], #4)
   19a54:	bl	19eac <lchmod@@Base+0x3750>
   19a58:	str	r4, [sp, #-8]!
   19a5c:	str	lr, [sp, #4]
   19a60:	bl	19ff4 <lchmod@@Base+0x3898>
   19a64:	cmp	r0, #0
   19a68:	beq	19a78 <lchmod@@Base+0x331c>
   19a6c:	ldr	r4, [sp]
   19a70:	add	sp, sp, #4
   19a74:	pop	{pc}		; (ldr pc, [sp], #4)
   19a78:	bl	19eac <lchmod@@Base+0x3750>
   19a7c:	str	r4, [sp, #-8]!
   19a80:	str	lr, [sp, #4]
   19a84:	bl	19ff4 <lchmod@@Base+0x3898>
   19a88:	cmp	r0, #0
   19a8c:	beq	19a9c <lchmod@@Base+0x3340>
   19a90:	ldr	r4, [sp]
   19a94:	add	sp, sp, #4
   19a98:	pop	{pc}		; (ldr pc, [sp], #4)
   19a9c:	bl	19eac <lchmod@@Base+0x3750>
   19aa0:	strd	r4, [sp, #-16]!
   19aa4:	mov	r5, r0
   19aa8:	mov	r4, r1
   19aac:	str	r6, [sp, #8]
   19ab0:	str	lr, [sp, #12]
   19ab4:	bl	1a030 <lchmod@@Base+0x38d4>
   19ab8:	cmp	r0, #0
   19abc:	beq	19ad0 <lchmod@@Base+0x3374>
   19ac0:	ldrd	r4, [sp]
   19ac4:	ldr	r6, [sp, #8]
   19ac8:	add	sp, sp, #12
   19acc:	pop	{pc}		; (ldr pc, [sp], #4)
   19ad0:	adds	r4, r4, #0
   19ad4:	movne	r4, #1
   19ad8:	cmp	r5, #0
   19adc:	moveq	r4, #1
   19ae0:	cmp	r4, #0
   19ae4:	beq	19ac0 <lchmod@@Base+0x3364>
   19ae8:	bl	19eac <lchmod@@Base+0x3750>
   19aec:	cmp	r1, #0
   19af0:	orreq	r1, r1, #1
   19af4:	str	r4, [sp, #-8]!
   19af8:	str	lr, [sp, #4]
   19afc:	bl	1a030 <lchmod@@Base+0x38d4>
   19b00:	cmp	r0, #0
   19b04:	beq	19b14 <lchmod@@Base+0x33b8>
   19b08:	ldr	r4, [sp]
   19b0c:	add	sp, sp, #4
   19b10:	pop	{pc}		; (ldr pc, [sp], #4)
   19b14:	bl	19eac <lchmod@@Base+0x3750>
   19b18:	strd	r4, [sp, #-16]!
   19b1c:	mov	r4, r0
   19b20:	mov	r5, r2
   19b24:	str	r6, [sp, #8]
   19b28:	mov	r6, r1
   19b2c:	str	lr, [sp, #12]
   19b30:	bl	1a7e4 <lchmod@@Base+0x4088>
   19b34:	cmp	r0, #0
   19b38:	beq	19b4c <lchmod@@Base+0x33f0>
   19b3c:	ldrd	r4, [sp]
   19b40:	ldr	r6, [sp, #8]
   19b44:	add	sp, sp, #12
   19b48:	pop	{pc}		; (ldr pc, [sp], #4)
   19b4c:	cmp	r4, #0
   19b50:	beq	19b60 <lchmod@@Base+0x3404>
   19b54:	cmp	r6, #0
   19b58:	cmpne	r5, #0
   19b5c:	beq	19b3c <lchmod@@Base+0x33e0>
   19b60:	bl	19eac <lchmod@@Base+0x3750>
   19b64:	b	19b18 <lchmod@@Base+0x33bc>
   19b68:	cmp	r2, #0
   19b6c:	cmpne	r1, #0
   19b70:	str	r4, [sp, #-8]!
   19b74:	moveq	r2, #1
   19b78:	str	lr, [sp, #4]
   19b7c:	moveq	r1, r2
   19b80:	bl	1a7e4 <lchmod@@Base+0x4088>
   19b84:	cmp	r0, #0
   19b88:	beq	19b98 <lchmod@@Base+0x343c>
   19b8c:	ldr	r4, [sp]
   19b90:	add	sp, sp, #4
   19b94:	pop	{pc}		; (ldr pc, [sp], #4)
   19b98:	bl	19eac <lchmod@@Base+0x3750>
   19b9c:	mov	r2, r1
   19ba0:	mov	r1, r0
   19ba4:	mov	r0, #0
   19ba8:	b	19b18 <lchmod@@Base+0x33bc>
   19bac:	mov	r2, r1
   19bb0:	mov	r1, r0
   19bb4:	mov	r0, #0
   19bb8:	b	19b68 <lchmod@@Base+0x340c>
   19bbc:	cmp	r0, #0
   19bc0:	strd	r4, [sp, #-16]!
   19bc4:	mov	r5, r1
   19bc8:	ldr	r4, [r1]
   19bcc:	str	r6, [sp, #8]
   19bd0:	str	lr, [sp, #12]
   19bd4:	beq	19c04 <lchmod@@Base+0x34a8>
   19bd8:	lsr	r3, r4, #1
   19bdc:	add	r3, r3, #1
   19be0:	adds	r4, r4, r3
   19be4:	bcs	19c20 <lchmod@@Base+0x34c4>
   19be8:	mov	r1, r4
   19bec:	bl	19b18 <lchmod@@Base+0x33bc>
   19bf0:	ldr	r6, [sp, #8]
   19bf4:	str	r4, [r5]
   19bf8:	ldrd	r4, [sp]
   19bfc:	add	sp, sp, #12
   19c00:	pop	{pc}		; (ldr pc, [sp], #4)
   19c04:	cmp	r4, #0
   19c08:	bne	19be8 <lchmod@@Base+0x348c>
   19c0c:	mov	r4, #64	; 0x40
   19c10:	udiv	r4, r4, r2
   19c14:	cmp	r2, #64	; 0x40
   19c18:	addhi	r4, r4, #1
   19c1c:	b	19be8 <lchmod@@Base+0x348c>
   19c20:	bl	19eac <lchmod@@Base+0x3750>
   19c24:	mov	r2, #1
   19c28:	b	19bbc <lchmod@@Base+0x3460>
   19c2c:	ldr	ip, [r1]
   19c30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19c34:	mov	r5, r1
   19c38:	strd	r6, [sp, #8]
   19c3c:	str	lr, [sp, #28]
   19c40:	strd	r8, [sp, #16]
   19c44:	asr	lr, ip, #1
   19c48:	ldr	r8, [sp, #32]
   19c4c:	str	sl, [sp, #24]
   19c50:	adds	r4, ip, lr
   19c54:	mvn	lr, r3
   19c58:	lsr	lr, lr, #31
   19c5c:	mvnvs	r4, #-2147483648	; 0x80000000
   19c60:	cmp	r3, r4
   19c64:	movge	r1, #0
   19c68:	andlt	r1, lr, #1
   19c6c:	cmp	r1, #0
   19c70:	movne	r4, r3
   19c74:	smull	r6, r7, r4, r8
   19c78:	cmp	r7, r6, asr #31
   19c7c:	bne	19d04 <lchmod@@Base+0x35a8>
   19c80:	cmp	r6, #63	; 0x3f
   19c84:	mov	r1, r6
   19c88:	ble	19cec <lchmod@@Base+0x3590>
   19c8c:	cmp	r0, #0
   19c90:	sub	r6, r4, ip
   19c94:	streq	r0, [r5]
   19c98:	cmp	r6, r2
   19c9c:	bge	19ccc <lchmod@@Base+0x3570>
   19ca0:	adds	r4, ip, r2
   19ca4:	bvs	19d00 <lchmod@@Base+0x35a4>
   19ca8:	cmp	r4, r3
   19cac:	movle	r3, #0
   19cb0:	andgt	r3, lr, #1
   19cb4:	cmp	r3, #0
   19cb8:	bne	19d00 <lchmod@@Base+0x35a4>
   19cbc:	smull	r8, r9, r4, r8
   19cc0:	cmp	r9, r8, asr #31
   19cc4:	mov	r1, r8
   19cc8:	bne	19d00 <lchmod@@Base+0x35a4>
   19ccc:	bl	19aa0 <lchmod@@Base+0x3344>
   19cd0:	ldrd	r6, [sp, #8]
   19cd4:	ldrd	r8, [sp, #16]
   19cd8:	ldr	sl, [sp, #24]
   19cdc:	str	r4, [r5]
   19ce0:	ldrd	r4, [sp]
   19ce4:	add	sp, sp, #28
   19ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cec:	mov	r6, #64	; 0x40
   19cf0:	sdiv	r4, r6, r8
   19cf4:	mls	r1, r8, r4, r6
   19cf8:	sub	r1, r6, r1
   19cfc:	b	19c8c <lchmod@@Base+0x3530>
   19d00:	bl	19eac <lchmod@@Base+0x3750>
   19d04:	mvn	r6, #-2147483648	; 0x80000000
   19d08:	b	19cf0 <lchmod@@Base+0x3594>
   19d0c:	mov	r1, #1
   19d10:	str	r4, [sp, #-8]!
   19d14:	str	lr, [sp, #4]
   19d18:	bl	19f80 <lchmod@@Base+0x3824>
   19d1c:	cmp	r0, #0
   19d20:	beq	19d30 <lchmod@@Base+0x35d4>
   19d24:	ldr	r4, [sp]
   19d28:	add	sp, sp, #4
   19d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d30:	bl	19eac <lchmod@@Base+0x3750>
   19d34:	mov	r1, #1
   19d38:	str	r4, [sp, #-8]!
   19d3c:	str	lr, [sp, #4]
   19d40:	bl	19f80 <lchmod@@Base+0x3824>
   19d44:	cmp	r0, #0
   19d48:	beq	19d58 <lchmod@@Base+0x35fc>
   19d4c:	ldr	r4, [sp]
   19d50:	add	sp, sp, #4
   19d54:	pop	{pc}		; (ldr pc, [sp], #4)
   19d58:	bl	19eac <lchmod@@Base+0x3750>
   19d5c:	str	r4, [sp, #-8]!
   19d60:	str	lr, [sp, #4]
   19d64:	bl	19f80 <lchmod@@Base+0x3824>
   19d68:	cmp	r0, #0
   19d6c:	beq	19d7c <lchmod@@Base+0x3620>
   19d70:	ldr	r4, [sp]
   19d74:	add	sp, sp, #4
   19d78:	pop	{pc}		; (ldr pc, [sp], #4)
   19d7c:	bl	19eac <lchmod@@Base+0x3750>
   19d80:	str	r4, [sp, #-8]!
   19d84:	str	lr, [sp, #4]
   19d88:	bl	19f80 <lchmod@@Base+0x3824>
   19d8c:	cmp	r0, #0
   19d90:	beq	19da0 <lchmod@@Base+0x3644>
   19d94:	ldr	r4, [sp]
   19d98:	add	sp, sp, #4
   19d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   19da0:	bl	19eac <lchmod@@Base+0x3750>
   19da4:	strd	r4, [sp, #-16]!
   19da8:	mov	r4, r1
   19dac:	str	r6, [sp, #8]
   19db0:	mov	r6, r0
   19db4:	mov	r0, r1
   19db8:	str	lr, [sp, #12]
   19dbc:	bl	19ff4 <lchmod@@Base+0x3898>
   19dc0:	subs	r5, r0, #0
   19dc4:	beq	19de8 <lchmod@@Base+0x368c>
   19dc8:	mov	r2, r4
   19dcc:	mov	r1, r6
   19dd0:	bl	114b4 <memcpy@plt>
   19dd4:	mov	r0, r5
   19dd8:	ldrd	r4, [sp]
   19ddc:	ldr	r6, [sp, #8]
   19de0:	add	sp, sp, #12
   19de4:	pop	{pc}		; (ldr pc, [sp], #4)
   19de8:	bl	19eac <lchmod@@Base+0x3750>
   19dec:	strd	r4, [sp, #-16]!
   19df0:	mov	r4, r1
   19df4:	str	r6, [sp, #8]
   19df8:	mov	r6, r0
   19dfc:	mov	r0, r1
   19e00:	str	lr, [sp, #12]
   19e04:	bl	19ff4 <lchmod@@Base+0x3898>
   19e08:	subs	r5, r0, #0
   19e0c:	beq	19e30 <lchmod@@Base+0x36d4>
   19e10:	mov	r2, r4
   19e14:	mov	r1, r6
   19e18:	bl	114b4 <memcpy@plt>
   19e1c:	mov	r0, r5
   19e20:	ldrd	r4, [sp]
   19e24:	ldr	r6, [sp, #8]
   19e28:	add	sp, sp, #12
   19e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e30:	bl	19eac <lchmod@@Base+0x3750>
   19e34:	strd	r4, [sp, #-16]!
   19e38:	mov	r4, r1
   19e3c:	str	r6, [sp, #8]
   19e40:	mov	r6, r0
   19e44:	add	r0, r1, #1
   19e48:	str	lr, [sp, #12]
   19e4c:	bl	19ff4 <lchmod@@Base+0x3898>
   19e50:	subs	r5, r0, #0
   19e54:	beq	19e80 <lchmod@@Base+0x3724>
   19e58:	mov	r3, #0
   19e5c:	mov	r1, r6
   19e60:	mov	r2, r4
   19e64:	strb	r3, [r5, r4]
   19e68:	bl	114b4 <memcpy@plt>
   19e6c:	mov	r0, r5
   19e70:	ldrd	r4, [sp]
   19e74:	ldr	r6, [sp, #8]
   19e78:	add	sp, sp, #12
   19e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e80:	bl	19eac <lchmod@@Base+0x3750>
   19e84:	str	r4, [sp, #-8]!
   19e88:	mov	r4, r0
   19e8c:	str	lr, [sp, #4]
   19e90:	bl	11658 <strlen@plt>
   19e94:	add	r1, r0, #1
   19e98:	mov	r0, r4
   19e9c:	ldr	r4, [sp]
   19ea0:	ldr	lr, [sp, #4]
   19ea4:	add	sp, sp, #8
   19ea8:	b	19da4 <lchmod@@Base+0x3648>
   19eac:	movw	r3, #49536	; 0xc180
   19eb0:	movt	r3, #2
   19eb4:	str	r4, [sp, #-8]!
   19eb8:	ldr	r4, [r3]
   19ebc:	mov	r2, #5
   19ec0:	movw	r1, #46596	; 0xb604
   19ec4:	movt	r1, #1
   19ec8:	mov	r0, #0
   19ecc:	str	lr, [sp, #4]
   19ed0:	bl	114f0 <dcgettext@plt>
   19ed4:	mov	r3, r0
   19ed8:	movw	r2, #45304	; 0xb0f8
   19edc:	movt	r2, #1
   19ee0:	mov	r1, #0
   19ee4:	mov	r0, r4
   19ee8:	bl	115b0 <error@plt>
   19eec:	bl	117d8 <abort@plt>
   19ef0:	orr	r1, r1, #512	; 0x200
   19ef4:	str	r4, [sp, #-8]!
   19ef8:	str	lr, [sp, #4]
   19efc:	bl	1468c <__assert_fail@plt+0x2e60>
   19f00:	cmp	r0, #0
   19f04:	beq	19f14 <lchmod@@Base+0x37b8>
   19f08:	ldr	r4, [sp]
   19f0c:	add	sp, sp, #4
   19f10:	pop	{pc}		; (ldr pc, [sp], #4)
   19f14:	bl	11688 <__errno_location@plt>
   19f18:	ldr	r3, [r0]
   19f1c:	cmp	r3, #22
   19f20:	beq	19f28 <lchmod@@Base+0x37cc>
   19f24:	bl	19eac <lchmod@@Base+0x3750>
   19f28:	movw	r3, #46616	; 0xb618
   19f2c:	movt	r3, #1
   19f30:	movw	r1, #46628	; 0xb624
   19f34:	movt	r1, #1
   19f38:	movw	r0, #46640	; 0xb630
   19f3c:	movt	r0, #1
   19f40:	mov	r2, #41	; 0x29
   19f44:	bl	1182c <__assert_fail@plt>
   19f48:	ldr	r3, [r0, #48]	; 0x30
   19f4c:	and	r3, r3, #17
   19f50:	cmp	r3, #16
   19f54:	beq	19f78 <lchmod@@Base+0x381c>
   19f58:	cmp	r3, #17
   19f5c:	beq	19f68 <lchmod@@Base+0x380c>
   19f60:	mov	r0, #0
   19f64:	bx	lr
   19f68:	ldr	r0, [r1, #48]	; 0x30
   19f6c:	adds	r0, r0, #0
   19f70:	movne	r0, #1
   19f74:	bx	lr
   19f78:	mov	r0, #1
   19f7c:	bx	lr
   19f80:	cmp	r1, #0
   19f84:	cmpne	r0, #0
   19f88:	beq	19fd4 <lchmod@@Base+0x3878>
   19f8c:	strd	r4, [sp, #-16]!
   19f90:	umull	r4, r5, r0, r1
   19f94:	str	r6, [sp, #8]
   19f98:	str	lr, [sp, #12]
   19f9c:	adds	r3, r5, #0
   19fa0:	movne	r3, #1
   19fa4:	cmp	r4, #0
   19fa8:	blt	19fb4 <lchmod@@Base+0x3858>
   19fac:	cmp	r3, #0
   19fb0:	beq	19fe0 <lchmod@@Base+0x3884>
   19fb4:	bl	11688 <__errno_location@plt>
   19fb8:	mov	r3, #12
   19fbc:	ldrd	r4, [sp]
   19fc0:	ldr	r6, [sp, #8]
   19fc4:	add	sp, sp, #12
   19fc8:	str	r3, [r0]
   19fcc:	mov	r0, #0
   19fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd4:	mov	r1, #1
   19fd8:	mov	r0, r1
   19fdc:	b	11424 <calloc@plt>
   19fe0:	ldrd	r4, [sp]
   19fe4:	ldr	r6, [sp, #8]
   19fe8:	ldr	lr, [sp, #12]
   19fec:	add	sp, sp, #16
   19ff0:	b	11424 <calloc@plt>
   19ff4:	cmp	r0, #0
   19ff8:	beq	1a004 <lchmod@@Base+0x38a8>
   19ffc:	blt	1a00c <lchmod@@Base+0x38b0>
   1a000:	b	115d4 <malloc@plt>
   1a004:	mov	r0, #1
   1a008:	b	115d4 <malloc@plt>
   1a00c:	str	r4, [sp, #-8]!
   1a010:	str	lr, [sp, #4]
   1a014:	bl	11688 <__errno_location@plt>
   1a018:	mov	r3, #12
   1a01c:	ldr	r4, [sp]
   1a020:	add	sp, sp, #4
   1a024:	str	r3, [r0]
   1a028:	mov	r0, #0
   1a02c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a030:	cmp	r0, #0
   1a034:	beq	1a05c <lchmod@@Base+0x3900>
   1a038:	cmp	r1, #0
   1a03c:	str	r4, [sp, #-8]!
   1a040:	str	lr, [sp, #4]
   1a044:	beq	1a064 <lchmod@@Base+0x3908>
   1a048:	blt	1a078 <lchmod@@Base+0x391c>
   1a04c:	ldr	r4, [sp]
   1a050:	ldr	lr, [sp, #4]
   1a054:	add	sp, sp, #8
   1a058:	b	11508 <realloc@plt>
   1a05c:	mov	r0, r1
   1a060:	b	19ff4 <lchmod@@Base+0x3898>
   1a064:	bl	130e8 <__assert_fail@plt+0x18bc>
   1a068:	ldr	r4, [sp]
   1a06c:	add	sp, sp, #4
   1a070:	mov	r0, #0
   1a074:	pop	{pc}		; (ldr pc, [sp], #4)
   1a078:	bl	11688 <__errno_location@plt>
   1a07c:	mov	r3, #12
   1a080:	str	r3, [r0]
   1a084:	b	1a068 <lchmod@@Base+0x390c>
   1a088:	ldrb	r3, [r0]
   1a08c:	cmp	r3, #47	; 0x2f
   1a090:	bne	1a0a0 <lchmod@@Base+0x3944>
   1a094:	ldrb	r3, [r0, #1]!
   1a098:	cmp	r3, #47	; 0x2f
   1a09c:	beq	1a094 <lchmod@@Base+0x3938>
   1a0a0:	cmp	r3, #0
   1a0a4:	beq	1a0d4 <lchmod@@Base+0x3978>
   1a0a8:	mov	r2, r0
   1a0ac:	mov	r1, #0
   1a0b0:	cmp	r3, #47	; 0x2f
   1a0b4:	moveq	r1, #1
   1a0b8:	beq	1a0c8 <lchmod@@Base+0x396c>
   1a0bc:	cmp	r1, #0
   1a0c0:	movne	r0, r2
   1a0c4:	movne	r1, #0
   1a0c8:	ldrb	r3, [r2, #1]!
   1a0cc:	cmp	r3, #0
   1a0d0:	bne	1a0b0 <lchmod@@Base+0x3954>
   1a0d4:	bx	lr
   1a0d8:	str	r4, [sp, #-8]!
   1a0dc:	mov	r4, r0
   1a0e0:	str	lr, [sp, #4]
   1a0e4:	bl	11658 <strlen@plt>
   1a0e8:	cmp	r0, #1
   1a0ec:	bls	1a110 <lchmod@@Base+0x39b4>
   1a0f0:	add	r2, r4, r0
   1a0f4:	mov	r3, r0
   1a0f8:	ldrb	r2, [r2, #-1]
   1a0fc:	cmp	r2, #47	; 0x2f
   1a100:	subeq	r3, r0, #2
   1a104:	rsbeq	r1, r4, #1
   1a108:	addeq	r3, r4, r3
   1a10c:	beq	1a11c <lchmod@@Base+0x39c0>
   1a110:	ldr	r4, [sp]
   1a114:	add	sp, sp, #4
   1a118:	pop	{pc}		; (ldr pc, [sp], #4)
   1a11c:	cmp	r3, r4
   1a120:	add	r0, r1, r3
   1a124:	beq	1a110 <lchmod@@Base+0x39b4>
   1a128:	ldrb	r2, [r3], #-1
   1a12c:	cmp	r2, #47	; 0x2f
   1a130:	beq	1a11c <lchmod@@Base+0x39c0>
   1a134:	ldr	r4, [sp]
   1a138:	add	sp, sp, #4
   1a13c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a140:	strd	r4, [sp, #-16]!
   1a144:	mov	r4, r0
   1a148:	str	r6, [sp, #8]
   1a14c:	str	lr, [sp, #12]
   1a150:	bl	11598 <__fpending@plt>
   1a154:	ldr	r5, [r4]
   1a158:	mov	r6, r0
   1a15c:	mov	r0, r4
   1a160:	bl	1a2e8 <lchmod@@Base+0x3b8c>
   1a164:	mov	r4, r0
   1a168:	and	r5, r5, #32
   1a16c:	cmp	r5, #0
   1a170:	bne	1a1a8 <lchmod@@Base+0x3a4c>
   1a174:	cmp	r0, #0
   1a178:	beq	1a194 <lchmod@@Base+0x3a38>
   1a17c:	cmp	r6, #0
   1a180:	bne	1a1c0 <lchmod@@Base+0x3a64>
   1a184:	bl	11688 <__errno_location@plt>
   1a188:	ldr	r4, [r0]
   1a18c:	subs	r4, r4, #9
   1a190:	mvnne	r4, #0
   1a194:	mov	r0, r4
   1a198:	ldrd	r4, [sp]
   1a19c:	ldr	r6, [sp, #8]
   1a1a0:	add	sp, sp, #12
   1a1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1a8:	cmp	r0, #0
   1a1ac:	bne	1a1c0 <lchmod@@Base+0x3a64>
   1a1b0:	bl	11688 <__errno_location@plt>
   1a1b4:	str	r4, [r0]
   1a1b8:	mvn	r4, #0
   1a1bc:	b	1a194 <lchmod@@Base+0x3a38>
   1a1c0:	mvn	r4, #0
   1a1c4:	b	1a194 <lchmod@@Base+0x3a38>
   1a1c8:	movw	r3, #62998	; 0xf616
   1a1cc:	movt	r3, #149	; 0x95
   1a1d0:	strd	r4, [sp, #-8]!
   1a1d4:	mov	r4, #0
   1a1d8:	mov	r5, #0
   1a1dc:	strd	r4, [r0, #16]
   1a1e0:	str	r3, [r0, #24]
   1a1e4:	ldrd	r4, [sp]
   1a1e8:	add	sp, sp, #8
   1a1ec:	bx	lr
   1a1f0:	ldr	r2, [r0, #24]
   1a1f4:	movw	r3, #62998	; 0xf616
   1a1f8:	movt	r3, #149	; 0x95
   1a1fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a200:	strd	r6, [sp, #8]
   1a204:	strd	r8, [sp, #16]
   1a208:	strd	sl, [sp, #24]
   1a20c:	cmp	r2, r3
   1a210:	str	lr, [sp, #32]
   1a214:	sub	sp, sp, #4
   1a218:	bne	1a2c8 <lchmod@@Base+0x3b6c>
   1a21c:	ldrd	r6, [r0, #16]
   1a220:	ldrd	sl, [r1, #96]	; 0x60
   1a224:	orrs	r3, r6, r7
   1a228:	beq	1a27c <lchmod@@Base+0x3b20>
   1a22c:	ldrd	r2, [r0]
   1a230:	cmp	r3, fp
   1a234:	cmpeq	r2, sl
   1a238:	beq	1a29c <lchmod@@Base+0x3b40>
   1a23c:	adds	r8, r6, #1
   1a240:	adc	r9, r7, #0
   1a244:	and	r2, r6, r8
   1a248:	and	r3, r7, r9
   1a24c:	orrs	r3, r2, r3
   1a250:	strd	r8, [r0, #16]
   1a254:	movne	r1, #0
   1a258:	beq	1a2b8 <lchmod@@Base+0x3b5c>
   1a25c:	mov	r0, r1
   1a260:	add	sp, sp, #4
   1a264:	ldrd	r4, [sp]
   1a268:	ldrd	r6, [sp, #8]
   1a26c:	ldrd	r8, [sp, #16]
   1a270:	ldrd	sl, [sp, #24]
   1a274:	add	sp, sp, #32
   1a278:	pop	{pc}		; (ldr pc, [sp], #4)
   1a27c:	mov	r2, #1
   1a280:	mov	r3, #0
   1a284:	strd	r2, [r0, #16]
   1a288:	ldrd	r2, [r1]
   1a28c:	mov	r1, #0
   1a290:	strd	sl, [r0]
   1a294:	strd	r2, [r0, #8]
   1a298:	b	1a25c <lchmod@@Base+0x3b00>
   1a29c:	ldrd	r4, [r1]
   1a2a0:	ldrd	r2, [r0, #8]
   1a2a4:	cmp	r5, r3
   1a2a8:	cmpeq	r4, r2
   1a2ac:	bne	1a23c <lchmod@@Base+0x3ae0>
   1a2b0:	mov	r1, #1
   1a2b4:	b	1a25c <lchmod@@Base+0x3b00>
   1a2b8:	orrs	r3, r8, r9
   1a2bc:	bne	1a288 <lchmod@@Base+0x3b2c>
   1a2c0:	mov	r1, #1
   1a2c4:	b	1a25c <lchmod@@Base+0x3b00>
   1a2c8:	movw	r3, #46656	; 0xb640
   1a2cc:	movt	r3, #1
   1a2d0:	movw	r1, #46668	; 0xb64c
   1a2d4:	movt	r1, #1
   1a2d8:	movw	r0, #46688	; 0xb660
   1a2dc:	movt	r0, #1
   1a2e0:	mov	r2, #60	; 0x3c
   1a2e4:	bl	1182c <__assert_fail@plt>
   1a2e8:	strd	r4, [sp, #-12]!
   1a2ec:	mov	r4, r0
   1a2f0:	str	lr, [sp, #8]
   1a2f4:	sub	sp, sp, #12
   1a2f8:	bl	116c4 <fileno@plt>
   1a2fc:	cmp	r0, #0
   1a300:	mov	r0, r4
   1a304:	blt	1a388 <lchmod@@Base+0x3c2c>
   1a308:	bl	115ec <__freading@plt>
   1a30c:	cmp	r0, #0
   1a310:	bne	1a354 <lchmod@@Base+0x3bf8>
   1a314:	mov	r0, r4
   1a318:	bl	1a5c4 <lchmod@@Base+0x3e68>
   1a31c:	cmp	r0, #0
   1a320:	beq	1a384 <lchmod@@Base+0x3c28>
   1a324:	bl	11688 <__errno_location@plt>
   1a328:	mov	r5, r0
   1a32c:	mov	r0, r4
   1a330:	ldr	r4, [r5]
   1a334:	bl	116dc <fclose@plt>
   1a338:	cmp	r4, #0
   1a33c:	mvnne	r0, #0
   1a340:	strne	r4, [r5]
   1a344:	add	sp, sp, #12
   1a348:	ldrd	r4, [sp]
   1a34c:	add	sp, sp, #8
   1a350:	pop	{pc}		; (ldr pc, [sp], #4)
   1a354:	mov	r0, r4
   1a358:	bl	116c4 <fileno@plt>
   1a35c:	mov	r1, #1
   1a360:	mov	r2, #0
   1a364:	mov	r3, #0
   1a368:	str	r1, [sp]
   1a36c:	bl	11574 <lseek64@plt>
   1a370:	mvn	r3, #0
   1a374:	mvn	r2, #0
   1a378:	cmp	r1, r3
   1a37c:	cmpeq	r0, r2
   1a380:	bne	1a314 <lchmod@@Base+0x3bb8>
   1a384:	mov	r0, r4
   1a388:	add	sp, sp, #12
   1a38c:	ldrd	r4, [sp]
   1a390:	ldr	lr, [sp, #8]
   1a394:	add	sp, sp, #12
   1a398:	b	116dc <fclose@plt>
   1a39c:	push	{r1, r2, r3}
   1a3a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a3a4:	strd	r6, [sp, #8]
   1a3a8:	str	lr, [sp, #16]
   1a3ac:	sub	sp, sp, #8
   1a3b0:	ldr	r1, [sp, #28]
   1a3b4:	add	r2, sp, #32
   1a3b8:	str	r2, [sp, #4]
   1a3bc:	cmp	r1, #0
   1a3c0:	beq	1a49c <lchmod@@Base+0x3d40>
   1a3c4:	movw	r3, #1030	; 0x406
   1a3c8:	mov	r6, r0
   1a3cc:	cmp	r1, r3
   1a3d0:	beq	1a4ac <lchmod@@Base+0x3d50>
   1a3d4:	cmp	r1, #11
   1a3d8:	beq	1a454 <lchmod@@Base+0x3cf8>
   1a3dc:	ble	1a434 <lchmod@@Base+0x3cd8>
   1a3e0:	movw	r2, #1031	; 0x407
   1a3e4:	cmp	r1, r2
   1a3e8:	bgt	1a470 <lchmod@@Base+0x3d14>
   1a3ec:	cmp	r1, r3
   1a3f0:	bge	1a400 <lchmod@@Base+0x3ca4>
   1a3f4:	movw	r3, #1025	; 0x401
   1a3f8:	cmp	r1, r3
   1a3fc:	beq	1a454 <lchmod@@Base+0x3cf8>
   1a400:	ldr	r3, [sp, #4]
   1a404:	mov	r0, r6
   1a408:	ldr	r2, [r3]
   1a40c:	bl	116f4 <fcntl64@plt>
   1a410:	mov	r4, r0
   1a414:	mov	r0, r4
   1a418:	add	sp, sp, #8
   1a41c:	ldrd	r4, [sp]
   1a420:	ldrd	r6, [sp, #8]
   1a424:	ldr	lr, [sp, #16]
   1a428:	add	sp, sp, #20
   1a42c:	add	sp, sp, #12
   1a430:	bx	lr
   1a434:	cmp	r1, #4
   1a438:	beq	1a400 <lchmod@@Base+0x3ca4>
   1a43c:	bgt	1a464 <lchmod@@Base+0x3d08>
   1a440:	cmp	r1, #2
   1a444:	beq	1a400 <lchmod@@Base+0x3ca4>
   1a448:	bgt	1a454 <lchmod@@Base+0x3cf8>
   1a44c:	cmp	r1, #1
   1a450:	bne	1a400 <lchmod@@Base+0x3ca4>
   1a454:	mov	r0, r6
   1a458:	bl	116f4 <fcntl64@plt>
   1a45c:	mov	r4, r0
   1a460:	b	1a414 <lchmod@@Base+0x3cb8>
   1a464:	cmp	r1, #9
   1a468:	bne	1a400 <lchmod@@Base+0x3ca4>
   1a46c:	b	1a454 <lchmod@@Base+0x3cf8>
   1a470:	movw	r3, #1033	; 0x409
   1a474:	cmp	r1, r3
   1a478:	beq	1a400 <lchmod@@Base+0x3ca4>
   1a47c:	blt	1a454 <lchmod@@Base+0x3cf8>
   1a480:	movw	r3, #1034	; 0x40a
   1a484:	cmp	r1, r3
   1a488:	bne	1a400 <lchmod@@Base+0x3ca4>
   1a48c:	mov	r0, r6
   1a490:	bl	116f4 <fcntl64@plt>
   1a494:	mov	r4, r0
   1a498:	b	1a414 <lchmod@@Base+0x3cb8>
   1a49c:	ldr	r2, [sp, #32]
   1a4a0:	bl	116f4 <fcntl64@plt>
   1a4a4:	mov	r4, r0
   1a4a8:	b	1a414 <lchmod@@Base+0x3cb8>
   1a4ac:	movw	r5, #49956	; 0xc324
   1a4b0:	movt	r5, #2
   1a4b4:	ldr	r7, [r2]
   1a4b8:	add	r2, sp, #36	; 0x24
   1a4bc:	ldr	r3, [r5]
   1a4c0:	str	r2, [sp, #4]
   1a4c4:	mov	r2, r7
   1a4c8:	cmp	r3, #0
   1a4cc:	blt	1a4e8 <lchmod@@Base+0x3d8c>
   1a4d0:	bl	116f4 <fcntl64@plt>
   1a4d4:	subs	r4, r0, #0
   1a4d8:	blt	1a550 <lchmod@@Base+0x3df4>
   1a4dc:	mov	r3, #1
   1a4e0:	str	r3, [r5]
   1a4e4:	b	1a414 <lchmod@@Base+0x3cb8>
   1a4e8:	mov	r1, #0
   1a4ec:	bl	116f4 <fcntl64@plt>
   1a4f0:	subs	r4, r0, #0
   1a4f4:	blt	1a414 <lchmod@@Base+0x3cb8>
   1a4f8:	ldr	r3, [r5]
   1a4fc:	cmn	r3, #1
   1a500:	bne	1a414 <lchmod@@Base+0x3cb8>
   1a504:	mov	r1, #1
   1a508:	mov	r0, r4
   1a50c:	bl	116f4 <fcntl64@plt>
   1a510:	subs	r2, r0, #0
   1a514:	blt	1a530 <lchmod@@Base+0x3dd4>
   1a518:	orr	r2, r2, #1
   1a51c:	mov	r1, #2
   1a520:	mov	r0, r4
   1a524:	bl	116f4 <fcntl64@plt>
   1a528:	cmn	r0, #1
   1a52c:	bne	1a414 <lchmod@@Base+0x3cb8>
   1a530:	bl	11688 <__errno_location@plt>
   1a534:	mov	r5, r0
   1a538:	mov	r0, r4
   1a53c:	ldr	r6, [r5]
   1a540:	mvn	r4, #0
   1a544:	bl	117e4 <close@plt>
   1a548:	str	r6, [r5]
   1a54c:	b	1a414 <lchmod@@Base+0x3cb8>
   1a550:	bl	11688 <__errno_location@plt>
   1a554:	ldr	r3, [r0]
   1a558:	cmp	r3, #22
   1a55c:	bne	1a4dc <lchmod@@Base+0x3d80>
   1a560:	mov	r2, r7
   1a564:	mov	r0, r6
   1a568:	mov	r1, #0
   1a56c:	bl	116f4 <fcntl64@plt>
   1a570:	subs	r4, r0, #0
   1a574:	mvnge	r3, #0
   1a578:	strge	r3, [r5]
   1a57c:	bge	1a504 <lchmod@@Base+0x3da8>
   1a580:	b	1a414 <lchmod@@Base+0x3cb8>
   1a584:	push	{r1, r2, r3}
   1a588:	push	{lr}		; (str lr, [sp, #-4]!)
   1a58c:	sub	sp, sp, #8
   1a590:	ldr	r1, [sp, #12]
   1a594:	ands	r2, r1, #64	; 0x40
   1a598:	bne	1a5b4 <lchmod@@Base+0x3e58>
   1a59c:	bl	115bc <open64@plt>
   1a5a0:	bl	19444 <lchmod@@Base+0x2ce8>
   1a5a4:	add	sp, sp, #8
   1a5a8:	pop	{lr}		; (ldr lr, [sp], #4)
   1a5ac:	add	sp, sp, #12
   1a5b0:	bx	lr
   1a5b4:	add	r3, sp, #16
   1a5b8:	ldr	r2, [sp, #16]
   1a5bc:	str	r3, [sp, #4]
   1a5c0:	b	1a59c <lchmod@@Base+0x3e40>
   1a5c4:	str	r4, [sp, #-8]!
   1a5c8:	subs	r4, r0, #0
   1a5cc:	str	lr, [sp, #4]
   1a5d0:	sub	sp, sp, #8
   1a5d4:	beq	1a5f0 <lchmod@@Base+0x3e94>
   1a5d8:	bl	115ec <__freading@plt>
   1a5dc:	cmp	r0, #0
   1a5e0:	beq	1a5f0 <lchmod@@Base+0x3e94>
   1a5e4:	ldr	r3, [r4]
   1a5e8:	tst	r3, #256	; 0x100
   1a5ec:	bne	1a608 <lchmod@@Base+0x3eac>
   1a5f0:	mov	r0, r4
   1a5f4:	add	sp, sp, #8
   1a5f8:	ldr	r4, [sp]
   1a5fc:	ldr	lr, [sp, #4]
   1a600:	add	sp, sp, #8
   1a604:	b	1146c <fflush@plt>
   1a608:	mov	r1, #1
   1a60c:	mov	r2, #0
   1a610:	mov	r3, #0
   1a614:	mov	r0, r4
   1a618:	str	r1, [sp]
   1a61c:	bl	1a624 <lchmod@@Base+0x3ec8>
   1a620:	b	1a5f0 <lchmod@@Base+0x3e94>
   1a624:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a628:	mov	r4, r0
   1a62c:	ldr	ip, [r0, #4]
   1a630:	strd	r6, [sp, #8]
   1a634:	str	lr, [sp, #20]
   1a638:	ldr	lr, [r0, #8]
   1a63c:	str	r8, [sp, #16]
   1a640:	sub	sp, sp, #8
   1a644:	ldr	r5, [sp, #32]
   1a648:	cmp	lr, ip
   1a64c:	beq	1a674 <lchmod@@Base+0x3f18>
   1a650:	mov	r0, r4
   1a654:	str	r5, [sp, #32]
   1a658:	add	sp, sp, #8
   1a65c:	ldrd	r4, [sp]
   1a660:	ldrd	r6, [sp, #8]
   1a664:	ldr	r8, [sp, #16]
   1a668:	ldr	lr, [sp, #20]
   1a66c:	add	sp, sp, #24
   1a670:	b	116e8 <fseeko64@plt>
   1a674:	ldr	ip, [r0, #16]
   1a678:	ldr	lr, [r0, #20]
   1a67c:	cmp	lr, ip
   1a680:	bne	1a650 <lchmod@@Base+0x3ef4>
   1a684:	ldr	r8, [r0, #36]	; 0x24
   1a688:	cmp	r8, #0
   1a68c:	bne	1a650 <lchmod@@Base+0x3ef4>
   1a690:	mov	r6, r2
   1a694:	mov	r7, r3
   1a698:	bl	116c4 <fileno@plt>
   1a69c:	mov	r2, r6
   1a6a0:	mov	r3, r7
   1a6a4:	str	r5, [sp]
   1a6a8:	bl	11574 <lseek64@plt>
   1a6ac:	mvn	r3, #0
   1a6b0:	mvn	r2, #0
   1a6b4:	cmp	r1, r3
   1a6b8:	cmpeq	r0, r2
   1a6bc:	beq	1a6ec <lchmod@@Base+0x3f90>
   1a6c0:	ldr	r3, [r4]
   1a6c4:	strd	r0, [r4, #80]	; 0x50
   1a6c8:	bic	r3, r3, #16
   1a6cc:	str	r3, [r4]
   1a6d0:	mov	r0, r8
   1a6d4:	add	sp, sp, #8
   1a6d8:	ldrd	r4, [sp]
   1a6dc:	ldrd	r6, [sp, #8]
   1a6e0:	ldr	r8, [sp, #16]
   1a6e4:	add	sp, sp, #20
   1a6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6ec:	mvn	r8, #0
   1a6f0:	b	1a6d0 <lchmod@@Base+0x3f74>
   1a6f4:	ldrb	r3, [r0]
   1a6f8:	cmp	r3, #0
   1a6fc:	beq	1a720 <lchmod@@Base+0x3fc4>
   1a700:	mov	r2, #0
   1a704:	add	r2, r3, r2, ror #23
   1a708:	ldrb	r3, [r0, #1]!
   1a70c:	cmp	r3, #0
   1a710:	bne	1a704 <lchmod@@Base+0x3fa8>
   1a714:	udiv	r3, r2, r1
   1a718:	mls	r0, r1, r3, r2
   1a71c:	bx	lr
   1a720:	mov	r0, r3
   1a724:	bx	lr
   1a728:	mov	r0, #14
   1a72c:	str	r4, [sp, #-8]!
   1a730:	str	lr, [sp, #4]
   1a734:	bl	11724 <nl_langinfo@plt>
   1a738:	cmp	r0, #0
   1a73c:	beq	1a760 <lchmod@@Base+0x4004>
   1a740:	ldrb	r2, [r0]
   1a744:	movw	r3, #46712	; 0xb678
   1a748:	movt	r3, #1
   1a74c:	ldr	r4, [sp]
   1a750:	add	sp, sp, #4
   1a754:	cmp	r2, #0
   1a758:	moveq	r0, r3
   1a75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a760:	ldr	r4, [sp]
   1a764:	add	sp, sp, #4
   1a768:	movw	r0, #46712	; 0xb678
   1a76c:	movt	r0, #1
   1a770:	pop	{pc}		; (ldr pc, [sp], #4)
   1a774:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a778:	mov	r5, r2
   1a77c:	strd	r6, [sp, #8]
   1a780:	subs	r6, r0, #0
   1a784:	mov	r7, r1
   1a788:	str	lr, [sp, #16]
   1a78c:	sub	sp, sp, #12
   1a790:	addeq	r6, sp, #4
   1a794:	mov	r0, r6
   1a798:	bl	115a4 <mbrtowc@plt>
   1a79c:	cmp	r5, #0
   1a7a0:	cmnne	r0, #3
   1a7a4:	mov	r4, r0
   1a7a8:	bhi	1a7c4 <lchmod@@Base+0x4068>
   1a7ac:	mov	r0, r4
   1a7b0:	add	sp, sp, #12
   1a7b4:	ldrd	r4, [sp]
   1a7b8:	ldrd	r6, [sp, #8]
   1a7bc:	add	sp, sp, #16
   1a7c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7c4:	mov	r0, #0
   1a7c8:	bl	1a828 <lchmod@@Base+0x40cc>
   1a7cc:	cmp	r0, #0
   1a7d0:	bne	1a7ac <lchmod@@Base+0x4050>
   1a7d4:	ldrb	r3, [r7]
   1a7d8:	mov	r4, #1
   1a7dc:	str	r3, [r6]
   1a7e0:	b	1a7ac <lchmod@@Base+0x4050>
   1a7e4:	umull	r2, r3, r1, r2
   1a7e8:	cmp	r3, #0
   1a7ec:	bne	1a7f8 <lchmod@@Base+0x409c>
   1a7f0:	mov	r1, r2
   1a7f4:	b	1a030 <lchmod@@Base+0x38d4>
   1a7f8:	str	r4, [sp, #-8]!
   1a7fc:	str	lr, [sp, #4]
   1a800:	bl	11688 <__errno_location@plt>
   1a804:	mov	r3, #12
   1a808:	ldr	r4, [sp]
   1a80c:	add	sp, sp, #4
   1a810:	str	r3, [r0]
   1a814:	mov	r0, #0
   1a818:	pop	{pc}		; (ldr pc, [sp], #4)
   1a81c:	mov	r2, #3
   1a820:	mov	r1, #0
   1a824:	b	1a39c <lchmod@@Base+0x3c40>
   1a828:	push	{lr}		; (str lr, [sp, #-4]!)
   1a82c:	sub	sp, sp, #268	; 0x10c
   1a830:	movw	r2, #257	; 0x101
   1a834:	add	r1, sp, #4
   1a838:	bl	1a880 <lchmod@@Base+0x4124>
   1a83c:	cmp	r0, #0
   1a840:	movne	r0, #0
   1a844:	bne	1a878 <lchmod@@Base+0x411c>
   1a848:	movw	r1, #46720	; 0xb680
   1a84c:	movt	r1, #1
   1a850:	add	r0, sp, #4
   1a854:	bl	11454 <strcmp@plt>
   1a858:	cmp	r0, #0
   1a85c:	beq	1a878 <lchmod@@Base+0x411c>
   1a860:	add	r0, sp, #4
   1a864:	movw	r1, #46724	; 0xb684
   1a868:	movt	r1, #1
   1a86c:	bl	11454 <strcmp@plt>
   1a870:	adds	r0, r0, #0
   1a874:	movne	r0, #1
   1a878:	add	sp, sp, #268	; 0x10c
   1a87c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a880:	strd	r4, [sp, #-16]!
   1a884:	mov	r5, r1
   1a888:	mov	r1, #0
   1a88c:	mov	r4, r2
   1a890:	str	r6, [sp, #8]
   1a894:	str	lr, [sp, #12]
   1a898:	bl	11700 <setlocale@plt>
   1a89c:	subs	r6, r0, #0
   1a8a0:	beq	1a920 <lchmod@@Base+0x41c4>
   1a8a4:	bl	11658 <strlen@plt>
   1a8a8:	cmp	r4, r0
   1a8ac:	bhi	1a8cc <lchmod@@Base+0x4170>
   1a8b0:	cmp	r4, #0
   1a8b4:	moveq	r0, #34	; 0x22
   1a8b8:	bne	1a8f0 <lchmod@@Base+0x4194>
   1a8bc:	ldrd	r4, [sp]
   1a8c0:	ldr	r6, [sp, #8]
   1a8c4:	add	sp, sp, #12
   1a8c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8cc:	add	r2, r0, #1
   1a8d0:	mov	r1, r6
   1a8d4:	mov	r0, r5
   1a8d8:	bl	114b4 <memcpy@plt>
   1a8dc:	ldrd	r4, [sp]
   1a8e0:	mov	r0, #0
   1a8e4:	ldr	r6, [sp, #8]
   1a8e8:	add	sp, sp, #12
   1a8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8f0:	sub	r4, r4, #1
   1a8f4:	mov	r1, r6
   1a8f8:	mov	r2, r4
   1a8fc:	mov	r0, r5
   1a900:	bl	114b4 <memcpy@plt>
   1a904:	mov	r3, #0
   1a908:	mov	r0, #34	; 0x22
   1a90c:	strb	r3, [r5, r4]
   1a910:	ldrd	r4, [sp]
   1a914:	ldr	r6, [sp, #8]
   1a918:	add	sp, sp, #12
   1a91c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a920:	cmp	r4, #0
   1a924:	mov	r0, #22
   1a928:	strbne	r6, [r5]
   1a92c:	ldrd	r4, [sp]
   1a930:	ldr	r6, [sp, #8]
   1a934:	add	sp, sp, #12
   1a938:	pop	{pc}		; (ldr pc, [sp], #4)
   1a93c:	mov	r1, #0
   1a940:	b	11700 <setlocale@plt>
   1a944:	cmp	r3, #0
   1a948:	cmpeq	r2, #0
   1a94c:	bne	1a964 <lchmod@@Base+0x4208>
   1a950:	cmp	r1, #0
   1a954:	cmpeq	r0, #0
   1a958:	mvnne	r1, #0
   1a95c:	mvnne	r0, #0
   1a960:	b	1a980 <lchmod@@Base+0x4224>
   1a964:	sub	sp, sp, #8
   1a968:	push	{sp, lr}
   1a96c:	bl	1a990 <lchmod@@Base+0x4234>
   1a970:	ldr	lr, [sp, #4]
   1a974:	add	sp, sp, #8
   1a978:	pop	{r2, r3}
   1a97c:	bx	lr
   1a980:	push	{r1, lr}
   1a984:	mov	r0, #8
   1a988:	bl	1143c <raise@plt>
   1a98c:	pop	{r1, pc}
   1a990:	cmp	r1, r3
   1a994:	cmpeq	r0, r2
   1a998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a99c:	mov	r4, r0
   1a9a0:	movcc	r0, #0
   1a9a4:	mov	r5, r1
   1a9a8:	ldr	lr, [sp, #36]	; 0x24
   1a9ac:	movcc	r1, r0
   1a9b0:	bcc	1aaac <lchmod@@Base+0x4350>
   1a9b4:	cmp	r3, #0
   1a9b8:	clzeq	ip, r2
   1a9bc:	clzne	ip, r3
   1a9c0:	addeq	ip, ip, #32
   1a9c4:	cmp	r5, #0
   1a9c8:	clzeq	r1, r4
   1a9cc:	addeq	r1, r1, #32
   1a9d0:	clzne	r1, r5
   1a9d4:	sub	ip, ip, r1
   1a9d8:	sub	sl, ip, #32
   1a9dc:	lsl	r9, r3, ip
   1a9e0:	rsb	fp, ip, #32
   1a9e4:	orr	r9, r9, r2, lsl sl
   1a9e8:	orr	r9, r9, r2, lsr fp
   1a9ec:	lsl	r8, r2, ip
   1a9f0:	cmp	r5, r9
   1a9f4:	cmpeq	r4, r8
   1a9f8:	movcc	r0, #0
   1a9fc:	movcc	r1, r0
   1aa00:	bcc	1aa1c <lchmod@@Base+0x42c0>
   1aa04:	mov	r0, #1
   1aa08:	subs	r4, r4, r8
   1aa0c:	lsl	r1, r0, sl
   1aa10:	orr	r1, r1, r0, lsr fp
   1aa14:	lsl	r0, r0, ip
   1aa18:	sbc	r5, r5, r9
   1aa1c:	cmp	ip, #0
   1aa20:	beq	1aaac <lchmod@@Base+0x4350>
   1aa24:	lsr	r6, r8, #1
   1aa28:	orr	r6, r6, r9, lsl #31
   1aa2c:	lsr	r7, r9, #1
   1aa30:	mov	r2, ip
   1aa34:	b	1aa58 <lchmod@@Base+0x42fc>
   1aa38:	subs	r3, r4, r6
   1aa3c:	sbc	r8, r5, r7
   1aa40:	adds	r3, r3, r3
   1aa44:	adc	r8, r8, r8
   1aa48:	adds	r4, r3, #1
   1aa4c:	adc	r5, r8, #0
   1aa50:	subs	r2, r2, #1
   1aa54:	beq	1aa74 <lchmod@@Base+0x4318>
   1aa58:	cmp	r5, r7
   1aa5c:	cmpeq	r4, r6
   1aa60:	bcs	1aa38 <lchmod@@Base+0x42dc>
   1aa64:	adds	r4, r4, r4
   1aa68:	adc	r5, r5, r5
   1aa6c:	subs	r2, r2, #1
   1aa70:	bne	1aa58 <lchmod@@Base+0x42fc>
   1aa74:	lsr	r3, r4, ip
   1aa78:	orr	r3, r3, r5, lsl fp
   1aa7c:	lsr	r2, r5, ip
   1aa80:	orr	r3, r3, r5, lsr sl
   1aa84:	adds	r0, r0, r4
   1aa88:	mov	r4, r3
   1aa8c:	lsl	r3, r2, ip
   1aa90:	orr	r3, r3, r4, lsl sl
   1aa94:	lsl	ip, r4, ip
   1aa98:	orr	r3, r3, r4, lsr fp
   1aa9c:	adc	r1, r1, r5
   1aaa0:	subs	r0, r0, ip
   1aaa4:	mov	r5, r2
   1aaa8:	sbc	r1, r1, r3
   1aaac:	cmp	lr, #0
   1aab0:	strdne	r4, [lr]
   1aab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aabc:	mov	r7, r0
   1aac0:	ldr	r6, [pc, #72]	; 1ab10 <lchmod@@Base+0x43b4>
   1aac4:	ldr	r5, [pc, #72]	; 1ab14 <lchmod@@Base+0x43b8>
   1aac8:	add	r6, pc, r6
   1aacc:	add	r5, pc, r5
   1aad0:	sub	r6, r6, r5
   1aad4:	mov	r8, r1
   1aad8:	mov	r9, r2
   1aadc:	bl	113ec <fstatfs64@plt-0x20>
   1aae0:	asrs	r6, r6, #2
   1aae4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aae8:	mov	r4, #0
   1aaec:	add	r4, r4, #1
   1aaf0:	ldr	r3, [r5], #4
   1aaf4:	mov	r2, r9
   1aaf8:	mov	r1, r8
   1aafc:	mov	r0, r7
   1ab00:	blx	r3
   1ab04:	cmp	r6, r4
   1ab08:	bne	1aaec <lchmod@@Base+0x4390>
   1ab0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab10:	andeq	r1, r1, ip, lsr r4
   1ab14:	andeq	r1, r1, r4, lsr r4
   1ab18:	bx	lr
   1ab1c:	ldr	r3, [pc, #12]	; 1ab30 <lchmod@@Base+0x43d4>
   1ab20:	mov	r1, #0
   1ab24:	add	r3, pc, r3
   1ab28:	ldr	r2, [r3]
   1ab2c:	b	116a0 <__cxa_atexit@plt>
   1ab30:	andeq	r1, r1, ip, asr #12

Disassembly of section .fini:

0001ab34 <.fini>:
   1ab34:	push	{r3, lr}
   1ab38:	pop	{r3, pc}
