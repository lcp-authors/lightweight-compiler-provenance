
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bc4 <.init>:
   10bc4:	push	{r3, lr}
   10bc8:	bl	11240 <__assert_fail@plt+0x41c>
   10bcc:	pop	{r3, pc}

Disassembly of section .plt:

00010bd0 <calloc@plt-0x14>:
   10bd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bd4:	ldr	lr, [pc, #4]	; 10be0 <calloc@plt-0x4>
   10bd8:	add	lr, pc, lr
   10bdc:	ldr	pc, [lr, #8]!
   10be0:	andeq	r8, r1, r0, lsr #8

00010be4 <calloc@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #24, 20	; 0x18000
   10bec:	ldr	pc, [ip, #1056]!	; 0x420

00010bf0 <fputs_unlocked@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #24, 20	; 0x18000
   10bf8:	ldr	pc, [ip, #1048]!	; 0x418

00010bfc <raise@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #24, 20	; 0x18000
   10c04:	ldr	pc, [ip, #1040]!	; 0x410

00010c08 <strcmp@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #24, 20	; 0x18000
   10c10:	ldr	pc, [ip, #1032]!	; 0x408

00010c14 <strtol@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #24, 20	; 0x18000
   10c1c:	ldr	pc, [ip, #1024]!	; 0x400

00010c20 <fflush@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #24, 20	; 0x18000
   10c28:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c2c <free@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #24, 20	; 0x18000
   10c34:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c38 <_exit@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #24, 20	; 0x18000
   10c40:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c44 <memcpy@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #24, 20	; 0x18000
   10c4c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c50 <execvp@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #24, 20	; 0x18000
   10c58:	ldr	pc, [ip, #984]!	; 0x3d8

00010c5c <mbsinit@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #24, 20	; 0x18000
   10c64:	ldr	pc, [ip, #976]!	; 0x3d0

00010c68 <memcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #24, 20	; 0x18000
   10c70:	ldr	pc, [ip, #968]!	; 0x3c8

00010c74 <fputc_unlocked@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #24, 20	; 0x18000
   10c7c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c80 <dcgettext@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #24, 20	; 0x18000
   10c88:	ldr	pc, [ip, #952]!	; 0x3b8

00010c8c <realloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #24, 20	; 0x18000
   10c94:	ldr	pc, [ip, #944]!	; 0x3b0

00010c98 <getpriority@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #24, 20	; 0x18000
   10ca0:	ldr	pc, [ip, #936]!	; 0x3a8

00010ca4 <textdomain@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb0 <iswprint@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #920]!	; 0x398

00010cbc <fwrite@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #912]!	; 0x390

00010cc8 <lseek64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #904]!	; 0x388

00010cd4 <__ctype_get_mb_cur_max@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #896]!	; 0x380

00010ce0 <__fpending@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #888]!	; 0x378

00010cec <mbrtowc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #880]!	; 0x370

00010cf8 <error@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #872]!	; 0x368

00010d04 <setpriority@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #864]!	; 0x360

00010d10 <malloc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #856]!	; 0x358

00010d1c <__libc_start_main@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #848]!	; 0x350

00010d28 <__freading@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #840]!	; 0x348

00010d34 <__gmon_start__@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #832]!	; 0x340

00010d40 <getopt_long@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #824]!	; 0x338

00010d4c <__ctype_b_loc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #816]!	; 0x330

00010d58 <exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #808]!	; 0x328

00010d64 <strlen@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #800]!	; 0x320

00010d70 <strchr@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #792]!	; 0x318

00010d7c <__errno_location@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #784]!	; 0x310

00010d88 <__cxa_atexit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #776]!	; 0x308

00010d94 <memset@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #768]!	; 0x300

00010da0 <__printf_chk@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #760]!	; 0x2f8

00010dac <fileno@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #752]!	; 0x2f0

00010db8 <__fprintf_chk@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #744]!	; 0x2e8

00010dc4 <fclose@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #736]!	; 0x2e0

00010dd0 <fseeko64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #728]!	; 0x2d8

00010ddc <setlocale@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #720]!	; 0x2d0

00010de8 <strrchr@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #712]!	; 0x2c8

00010df4 <nl_langinfo@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #704]!	; 0x2c0

00010e00 <bindtextdomain@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #696]!	; 0x2b8

00010e0c <strncmp@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #688]!	; 0x2b0

00010e18 <abort@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #680]!	; 0x2a8

00010e24 <__assert_fail@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #672]!	; 0x2a0

Disassembly of section .text:

00010e30 <.text>:
   10e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e34:	mov	r6, r0
   10e38:	sub	sp, sp, #20
   10e3c:	ldr	r0, [r1]
   10e40:	mov	r5, r1
   10e44:	bl	11760 <__assert_fail@plt+0x93c>
   10e48:	ldr	r1, [pc, #864]	; 111b0 <__assert_fail@plt+0x38c>
   10e4c:	mov	r0, #6
   10e50:	bl	10ddc <setlocale@plt>
   10e54:	ldr	r1, [pc, #856]	; 111b4 <__assert_fail@plt+0x390>
   10e58:	ldr	r0, [pc, #856]	; 111b8 <__assert_fail@plt+0x394>
   10e5c:	bl	10e00 <bindtextdomain@plt>
   10e60:	ldr	r0, [pc, #848]	; 111b8 <__assert_fail@plt+0x394>
   10e64:	bl	10ca4 <textdomain@plt>
   10e68:	ldr	r3, [pc, #844]	; 111bc <__assert_fail@plt+0x398>
   10e6c:	mov	r2, #125	; 0x7d
   10e70:	ldr	r0, [pc, #840]	; 111c0 <__assert_fail@plt+0x39c>
   10e74:	str	r2, [r3]
   10e78:	bl	17b1c <__assert_fail@plt+0x6cf8>
   10e7c:	cmp	r6, #1
   10e80:	ble	1109c <__assert_fail@plt+0x278>
   10e84:	mov	r9, #0
   10e88:	ldr	r8, [pc, #820]	; 111c4 <__assert_fail@plt+0x3a0>
   10e8c:	ldr	fp, [pc, #820]	; 111c8 <__assert_fail@plt+0x3a4>
   10e90:	ldr	sl, [pc, #820]	; 111cc <__assert_fail@plt+0x3a8>
   10e94:	mov	r7, r9
   10e98:	mov	r4, #1
   10e9c:	ldr	r2, [r5, r4, lsl #2]
   10ea0:	lsl	r1, r4, #2
   10ea4:	ldrb	r3, [r2]
   10ea8:	cmp	r3, #45	; 0x2d
   10eac:	bne	10fd4 <__assert_fail@plt+0x1b0>
   10eb0:	ldrb	r3, [r2, #1]
   10eb4:	sub	r3, r3, #43	; 0x2b
   10eb8:	and	r3, r3, #253	; 0xfd
   10ebc:	cmp	r3, #0
   10ec0:	movne	r3, r2
   10ec4:	addeq	r3, r2, #1
   10ec8:	ldrb	r3, [r3, #1]
   10ecc:	sub	r3, r3, #48	; 0x30
   10ed0:	cmp	r3, #9
   10ed4:	addls	r9, r2, #1
   10ed8:	addls	r4, r4, #1
   10edc:	bhi	10fd4 <__assert_fail@plt+0x1b0>
   10ee0:	cmp	r6, r4
   10ee4:	bgt	10e9c <__assert_fail@plt+0x78>
   10ee8:	cmp	r9, #0
   10eec:	beq	111a0 <__assert_fail@plt+0x37c>
   10ef0:	ldr	r2, [pc, #696]	; 111b0 <__assert_fail@plt+0x38c>
   10ef4:	add	r3, sp, #12
   10ef8:	str	r2, [sp]
   10efc:	mov	r1, #0
   10f00:	mov	r2, #10
   10f04:	mov	r0, r9
   10f08:	bl	16870 <__assert_fail@plt+0x5a4c>
   10f0c:	cmp	r0, #1
   10f10:	bhi	11170 <__assert_fail@plt+0x34c>
   10f14:	ldr	r7, [sp, #12]
   10f18:	mvn	r3, #38	; 0x26
   10f1c:	cmp	r7, #39	; 0x27
   10f20:	movge	r7, #39	; 0x27
   10f24:	cmp	r7, r3
   10f28:	movlt	r7, r3
   10f2c:	cmp	r4, r6
   10f30:	beq	11074 <__assert_fail@plt+0x250>
   10f34:	bl	10d7c <__errno_location@plt>
   10f38:	mov	r6, #0
   10f3c:	mov	r1, r6
   10f40:	str	r6, [r0]
   10f44:	mov	r8, r0
   10f48:	mov	r0, r6
   10f4c:	bl	10c98 <getpriority@plt>
   10f50:	cmn	r0, #1
   10f54:	bne	10f64 <__assert_fail@plt+0x140>
   10f58:	ldr	r9, [r8]
   10f5c:	cmp	r9, r6
   10f60:	bne	11130 <__assert_fail@plt+0x30c>
   10f64:	mov	r1, #0
   10f68:	add	r2, r0, r7
   10f6c:	mov	r0, r1
   10f70:	bl	10d04 <setpriority@plt>
   10f74:	cmp	r0, #0
   10f78:	beq	110f0 <__assert_fail@plt+0x2cc>
   10f7c:	ldr	r6, [r8]
   10f80:	mov	r2, #5
   10f84:	cmp	r6, #1
   10f88:	cmpne	r6, #13
   10f8c:	ldr	r1, [pc, #572]	; 111d0 <__assert_fail@plt+0x3ac>
   10f90:	mov	r0, #0
   10f94:	movne	r7, #125	; 0x7d
   10f98:	moveq	r7, #0
   10f9c:	bl	10c80 <dcgettext@plt>
   10fa0:	mov	r1, r6
   10fa4:	mov	r2, r0
   10fa8:	mov	r0, r7
   10fac:	bl	10cf8 <error@plt>
   10fb0:	ldr	r3, [pc, #540]	; 111d4 <__assert_fail@plt+0x3b0>
   10fb4:	ldr	r3, [r3]
   10fb8:	ldr	r3, [r3]
   10fbc:	tst	r3, #32
   10fc0:	movne	r4, #125	; 0x7d
   10fc4:	beq	110f0 <__assert_fail@plt+0x2cc>
   10fc8:	mov	r0, r4
   10fcc:	add	sp, sp, #20
   10fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fd4:	ldr	r3, [r5]
   10fd8:	sub	r1, r1, #4
   10fdc:	sub	r0, r4, #1
   10fe0:	str	r7, [sp]
   10fe4:	sub	r0, r6, r0
   10fe8:	str	r3, [r5, r1]
   10fec:	mov	r2, sl
   10ff0:	mov	r3, fp
   10ff4:	add	r1, r5, r1
   10ff8:	str	r7, [r8]
   10ffc:	bl	10d40 <getopt_long@plt>
   11000:	ldr	r3, [r8]
   11004:	sub	r3, r3, #1
   11008:	add	r4, r4, r3
   1100c:	cmn	r0, #2
   11010:	beq	1106c <__assert_fail@plt+0x248>
   11014:	ble	11034 <__assert_fail@plt+0x210>
   11018:	cmn	r0, #1
   1101c:	beq	10ee8 <__assert_fail@plt+0xc4>
   11020:	cmp	r0, #110	; 0x6e
   11024:	bne	11094 <__assert_fail@plt+0x270>
   11028:	ldr	r3, [pc, #424]	; 111d8 <__assert_fail@plt+0x3b4>
   1102c:	ldr	r9, [r3]
   11030:	b	10ee0 <__assert_fail@plt+0xbc>
   11034:	cmn	r0, #3
   11038:	bne	11094 <__assert_fail@plt+0x270>
   1103c:	ldr	r1, [pc, #408]	; 111dc <__assert_fail@plt+0x3b8>
   11040:	ldr	r3, [pc, #408]	; 111e0 <__assert_fail@plt+0x3bc>
   11044:	ldr	r2, [pc, #408]	; 111e4 <__assert_fail@plt+0x3c0>
   11048:	str	r7, [sp, #4]
   1104c:	ldr	r0, [r1]
   11050:	ldr	r3, [r3]
   11054:	ldr	r1, [pc, #396]	; 111e8 <__assert_fail@plt+0x3c4>
   11058:	str	r2, [sp]
   1105c:	ldr	r2, [pc, #392]	; 111ec <__assert_fail@plt+0x3c8>
   11060:	bl	16000 <__assert_fail@plt+0x51dc>
   11064:	mov	r0, #0
   11068:	bl	10d58 <exit@plt>
   1106c:	mov	r0, #0
   11070:	bl	1132c <__assert_fail@plt+0x508>
   11074:	mov	r2, #5
   11078:	ldr	r1, [pc, #368]	; 111f0 <__assert_fail@plt+0x3cc>
   1107c:	mov	r0, #0
   11080:	bl	10c80 <dcgettext@plt>
   11084:	mov	r1, #0
   11088:	mov	r2, r0
   1108c:	mov	r0, r1
   11090:	bl	10cf8 <error@plt>
   11094:	mov	r0, #125	; 0x7d
   11098:	bl	1132c <__assert_fail@plt+0x508>
   1109c:	movne	r4, #1
   110a0:	movne	r7, #10
   110a4:	bne	10f34 <__assert_fail@plt+0x110>
   110a8:	bl	10d7c <__errno_location@plt>
   110ac:	mov	r4, #0
   110b0:	mov	r1, r4
   110b4:	str	r4, [r0]
   110b8:	mov	r5, r0
   110bc:	mov	r0, r4
   110c0:	bl	10c98 <getpriority@plt>
   110c4:	cmn	r0, #1
   110c8:	mov	r2, r0
   110cc:	bne	110dc <__assert_fail@plt+0x2b8>
   110d0:	ldr	r5, [r5]
   110d4:	cmp	r5, r4
   110d8:	bne	11150 <__assert_fail@plt+0x32c>
   110dc:	ldr	r1, [pc, #272]	; 111f4 <__assert_fail@plt+0x3d0>
   110e0:	mov	r0, #1
   110e4:	bl	10da0 <__printf_chk@plt>
   110e8:	mov	r4, #0
   110ec:	b	10fc8 <__assert_fail@plt+0x1a4>
   110f0:	lsl	r6, r4, #2
   110f4:	add	r1, r5, r6
   110f8:	ldr	r0, [r5, r4, lsl #2]
   110fc:	bl	10c50 <execvp@plt>
   11100:	ldr	r0, [r5, r6]
   11104:	ldr	r4, [r8]
   11108:	bl	1562c <__assert_fail@plt+0x4808>
   1110c:	mov	r1, r4
   11110:	cmp	r4, #2
   11114:	ldr	r2, [pc, #220]	; 111f8 <__assert_fail@plt+0x3d4>
   11118:	moveq	r4, #127	; 0x7f
   1111c:	movne	r4, #126	; 0x7e
   11120:	mov	r3, r0
   11124:	mov	r0, #0
   11128:	bl	10cf8 <error@plt>
   1112c:	b	10fc8 <__assert_fail@plt+0x1a4>
   11130:	mov	r2, #5
   11134:	ldr	r1, [pc, #192]	; 111fc <__assert_fail@plt+0x3d8>
   11138:	mov	r0, r6
   1113c:	bl	10c80 <dcgettext@plt>
   11140:	mov	r1, r9
   11144:	mov	r2, r0
   11148:	mov	r0, #125	; 0x7d
   1114c:	bl	10cf8 <error@plt>
   11150:	mov	r2, #5
   11154:	ldr	r1, [pc, #160]	; 111fc <__assert_fail@plt+0x3d8>
   11158:	mov	r0, r4
   1115c:	bl	10c80 <dcgettext@plt>
   11160:	mov	r1, r5
   11164:	mov	r2, r0
   11168:	mov	r0, #125	; 0x7d
   1116c:	bl	10cf8 <error@plt>
   11170:	mov	r2, #5
   11174:	ldr	r1, [pc, #132]	; 11200 <__assert_fail@plt+0x3dc>
   11178:	mov	r0, #0
   1117c:	bl	10c80 <dcgettext@plt>
   11180:	mov	r4, r0
   11184:	mov	r0, r9
   11188:	bl	1562c <__assert_fail@plt+0x4808>
   1118c:	mov	r2, r4
   11190:	mov	r1, #0
   11194:	mov	r3, r0
   11198:	mov	r0, #125	; 0x7d
   1119c:	bl	10cf8 <error@plt>
   111a0:	cmp	r4, r6
   111a4:	movne	r7, #10
   111a8:	bne	10f34 <__assert_fail@plt+0x110>
   111ac:	b	110a8 <__assert_fail@plt+0x284>
   111b0:	andeq	r7, r1, ip, lsr #27
   111b4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   111b8:	andeq	r7, r1, ip, ror #29
   111bc:	andeq	r9, r2, r0, ror #1
   111c0:	andeq	r1, r1, ip, ror r6
   111c4:	andeq	r9, r2, r0, lsr r1
   111c8:	andeq	r7, r1, r8, ror fp
   111cc:	andeq	r7, r1, ip, lsr #31
   111d0:	andeq	r8, r1, ip, lsl r0
   111d4:	andeq	r9, r2, r8, lsr r1
   111d8:	andeq	r9, r2, r0, asr #2
   111dc:	andeq	r9, r2, ip, lsr r1
   111e0:	ldrdeq	r9, [r2], -ip
   111e4:			; <UNDEFINED> instruction: 0x00017fb0
   111e8:			; <UNDEFINED> instruction: 0x00017bb8
   111ec:	andeq	r7, r1, r8, ror #29
   111f0:	ldrdeq	r7, [r1], -r8
   111f4:	andeq	r8, r1, r8, lsl r0
   111f8:	andeq	r8, r1, ip, asr #1
   111fc:	andeq	r8, r1, r4
   11200:	andeq	r7, r1, r0, asr #31
   11204:	mov	fp, #0
   11208:	mov	lr, #0
   1120c:	pop	{r1}		; (ldr r1, [sp], #4)
   11210:	mov	r2, sp
   11214:	push	{r2}		; (str r2, [sp, #-4]!)
   11218:	push	{r0}		; (str r0, [sp, #-4]!)
   1121c:	ldr	ip, [pc, #16]	; 11234 <__assert_fail@plt+0x410>
   11220:	push	{ip}		; (str ip, [sp, #-4]!)
   11224:	ldr	r0, [pc, #12]	; 11238 <__assert_fail@plt+0x414>
   11228:	ldr	r3, [pc, #12]	; 1123c <__assert_fail@plt+0x418>
   1122c:	bl	10d1c <__libc_start_main@plt>
   11230:	bl	10e18 <abort@plt>
   11234:	andeq	r7, r1, r8, lsl fp
   11238:	andeq	r0, r1, r0, lsr lr
   1123c:			; <UNDEFINED> instruction: 0x00017ab8
   11240:	ldr	r3, [pc, #20]	; 1125c <__assert_fail@plt+0x438>
   11244:	ldr	r2, [pc, #20]	; 11260 <__assert_fail@plt+0x43c>
   11248:	add	r3, pc, r3
   1124c:	ldr	r2, [r3, r2]
   11250:	cmp	r2, #0
   11254:	bxeq	lr
   11258:	b	10d34 <__gmon_start__@plt>
   1125c:			; <UNDEFINED> instruction: 0x00017db0
   11260:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11264:	ldr	r3, [pc, #28]	; 11288 <__assert_fail@plt+0x464>
   11268:	ldr	r0, [pc, #28]	; 1128c <__assert_fail@plt+0x468>
   1126c:	sub	r3, r3, r0
   11270:	cmp	r3, #6
   11274:	bxls	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__assert_fail@plt+0x46c>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r9, r2, r7, lsr #2
   1128c:	andeq	r9, r2, r4, lsr #2
   11290:	andeq	r0, r0, r0
   11294:	ldr	r1, [pc, #36]	; 112c0 <__assert_fail@plt+0x49c>
   11298:	ldr	r0, [pc, #36]	; 112c4 <__assert_fail@plt+0x4a0>
   1129c:	sub	r1, r1, r0
   112a0:	asr	r1, r1, #2
   112a4:	add	r1, r1, r1, lsr #31
   112a8:	asrs	r1, r1, #1
   112ac:	bxeq	lr
   112b0:	ldr	r3, [pc, #16]	; 112c8 <__assert_fail@plt+0x4a4>
   112b4:	cmp	r3, #0
   112b8:	bxeq	lr
   112bc:	bx	r3
   112c0:	andeq	r9, r2, r4, lsr #2
   112c4:	andeq	r9, r2, r4, lsr #2
   112c8:	andeq	r0, r0, r0
   112cc:	push	{r4, lr}
   112d0:	ldr	r4, [pc, #24]	; 112f0 <__assert_fail@plt+0x4cc>
   112d4:	ldrb	r3, [r4]
   112d8:	cmp	r3, #0
   112dc:	popne	{r4, pc}
   112e0:	bl	11264 <__assert_fail@plt+0x440>
   112e4:	mov	r3, #1
   112e8:	strb	r3, [r4]
   112ec:	pop	{r4, pc}
   112f0:	andeq	r9, r2, r4, asr #2
   112f4:	ldr	r0, [pc, #40]	; 11324 <__assert_fail@plt+0x500>
   112f8:	ldr	r3, [r0]
   112fc:	cmp	r3, #0
   11300:	bne	11308 <__assert_fail@plt+0x4e4>
   11304:	b	11294 <__assert_fail@plt+0x470>
   11308:	ldr	r3, [pc, #24]	; 11328 <__assert_fail@plt+0x504>
   1130c:	cmp	r3, #0
   11310:	beq	11304 <__assert_fail@plt+0x4e0>
   11314:	push	{r4, lr}
   11318:	blx	r3
   1131c:	pop	{r4, lr}
   11320:	b	11294 <__assert_fail@plt+0x470>
   11324:	andeq	r8, r2, r4, lsl pc
   11328:	andeq	r0, r0, r0
   1132c:	subs	r6, r0, #0
   11330:	push	{r7, lr}
   11334:	sub	sp, sp, #56	; 0x38
   11338:	beq	11374 <__assert_fail@plt+0x550>
   1133c:	ldr	r3, [pc, #704]	; 11604 <__assert_fail@plt+0x7e0>
   11340:	mov	r2, #5
   11344:	ldr	r1, [pc, #700]	; 11608 <__assert_fail@plt+0x7e4>
   11348:	mov	r0, #0
   1134c:	ldr	r4, [r3]
   11350:	bl	10c80 <dcgettext@plt>
   11354:	ldr	r3, [pc, #688]	; 1160c <__assert_fail@plt+0x7e8>
   11358:	mov	r1, #1
   1135c:	ldr	r3, [r3]
   11360:	mov	r2, r0
   11364:	mov	r0, r4
   11368:	bl	10db8 <__fprintf_chk@plt>
   1136c:	mov	r0, r6
   11370:	bl	10d58 <exit@plt>
   11374:	mov	r2, #5
   11378:	ldr	r1, [pc, #656]	; 11610 <__assert_fail@plt+0x7ec>
   1137c:	bl	10c80 <dcgettext@plt>
   11380:	ldr	r3, [pc, #644]	; 1160c <__assert_fail@plt+0x7e8>
   11384:	ldr	r7, [pc, #648]	; 11614 <__assert_fail@plt+0x7f0>
   11388:	ldr	r4, [pc, #648]	; 11618 <__assert_fail@plt+0x7f4>
   1138c:	ldr	r2, [r3]
   11390:	mov	r1, r0
   11394:	mov	r0, #1
   11398:	bl	10da0 <__printf_chk@plt>
   1139c:	mov	r2, #5
   113a0:	ldr	r1, [pc, #628]	; 1161c <__assert_fail@plt+0x7f8>
   113a4:	mov	r0, r6
   113a8:	bl	10c80 <dcgettext@plt>
   113ac:	mov	r3, #19
   113b0:	mvn	r2, #19
   113b4:	mov	r1, r0
   113b8:	mov	r0, #1
   113bc:	bl	10da0 <__printf_chk@plt>
   113c0:	mov	r2, #5
   113c4:	ldr	r1, [pc, #596]	; 11620 <__assert_fail@plt+0x7fc>
   113c8:	mov	r0, r6
   113cc:	bl	10c80 <dcgettext@plt>
   113d0:	ldr	r1, [r7]
   113d4:	bl	10bf0 <fputs_unlocked@plt>
   113d8:	mov	r2, #5
   113dc:	ldr	r1, [pc, #576]	; 11624 <__assert_fail@plt+0x800>
   113e0:	mov	r0, r6
   113e4:	bl	10c80 <dcgettext@plt>
   113e8:	ldr	r1, [r7]
   113ec:	bl	10bf0 <fputs_unlocked@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #556]	; 11628 <__assert_fail@plt+0x804>
   113f8:	mov	r0, r6
   113fc:	bl	10c80 <dcgettext@plt>
   11400:	ldr	r1, [r7]
   11404:	bl	10bf0 <fputs_unlocked@plt>
   11408:	mov	r2, #5
   1140c:	ldr	r1, [pc, #536]	; 1162c <__assert_fail@plt+0x808>
   11410:	mov	r0, r6
   11414:	bl	10c80 <dcgettext@plt>
   11418:	ldr	r1, [r7]
   1141c:	bl	10bf0 <fputs_unlocked@plt>
   11420:	mov	r2, #5
   11424:	ldr	r1, [pc, #516]	; 11630 <__assert_fail@plt+0x80c>
   11428:	mov	r0, r6
   1142c:	bl	10c80 <dcgettext@plt>
   11430:	ldr	r2, [pc, #508]	; 11634 <__assert_fail@plt+0x810>
   11434:	mov	r1, r0
   11438:	mov	r0, #1
   1143c:	bl	10da0 <__printf_chk@plt>
   11440:	ldm	r4!, {r0, r1, r2, r3}
   11444:	mov	lr, sp
   11448:	stmia	lr!, {r0, r1, r2, r3}
   1144c:	ldm	r4!, {r0, r1, r2, r3}
   11450:	ldr	ip, [sp]
   11454:	stmia	lr!, {r0, r1, r2, r3}
   11458:	cmp	ip, #0
   1145c:	ldm	r4!, {r0, r1, r2, r3}
   11460:	stmia	lr!, {r0, r1, r2, r3}
   11464:	ldm	r4, {r0, r1}
   11468:	moveq	r4, sp
   1146c:	stm	lr, {r0, r1}
   11470:	beq	114a0 <__assert_fail@plt+0x67c>
   11474:	ldr	r5, [pc, #440]	; 11634 <__assert_fail@plt+0x810>
   11478:	mov	r4, sp
   1147c:	b	1148c <__assert_fail@plt+0x668>
   11480:	ldr	ip, [r4, #8]!
   11484:	cmp	ip, #0
   11488:	beq	114a0 <__assert_fail@plt+0x67c>
   1148c:	mov	r1, ip
   11490:	mov	r0, r5
   11494:	bl	10c08 <strcmp@plt>
   11498:	cmp	r0, #0
   1149c:	bne	11480 <__assert_fail@plt+0x65c>
   114a0:	ldr	r4, [r4, #4]
   114a4:	mov	r2, #5
   114a8:	cmp	r4, #0
   114ac:	ldr	r1, [pc, #388]	; 11638 <__assert_fail@plt+0x814>
   114b0:	beq	11558 <__assert_fail@plt+0x734>
   114b4:	mov	r0, #0
   114b8:	bl	10c80 <dcgettext@plt>
   114bc:	ldr	r3, [pc, #376]	; 1163c <__assert_fail@plt+0x818>
   114c0:	ldr	r2, [pc, #376]	; 11640 <__assert_fail@plt+0x81c>
   114c4:	mov	r1, r0
   114c8:	mov	r0, #1
   114cc:	bl	10da0 <__printf_chk@plt>
   114d0:	mov	r1, #0
   114d4:	mov	r0, #5
   114d8:	bl	10ddc <setlocale@plt>
   114dc:	cmp	r0, #0
   114e0:	ldreq	r5, [pc, #332]	; 11634 <__assert_fail@plt+0x810>
   114e4:	beq	11500 <__assert_fail@plt+0x6dc>
   114e8:	mov	r2, #3
   114ec:	ldr	r1, [pc, #336]	; 11644 <__assert_fail@plt+0x820>
   114f0:	bl	10e0c <strncmp@plt>
   114f4:	ldr	r5, [pc, #312]	; 11634 <__assert_fail@plt+0x810>
   114f8:	cmp	r0, #0
   114fc:	bne	115e8 <__assert_fail@plt+0x7c4>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #316]	; 11648 <__assert_fail@plt+0x824>
   11508:	mov	r0, #0
   1150c:	bl	10c80 <dcgettext@plt>
   11510:	ldr	r3, [pc, #284]	; 11634 <__assert_fail@plt+0x810>
   11514:	ldr	r2, [pc, #288]	; 1163c <__assert_fail@plt+0x818>
   11518:	mov	r1, r0
   1151c:	mov	r0, #1
   11520:	bl	10da0 <__printf_chk@plt>
   11524:	mov	r2, #5
   11528:	ldr	r1, [pc, #284]	; 1164c <__assert_fail@plt+0x828>
   1152c:	mov	r0, #0
   11530:	bl	10c80 <dcgettext@plt>
   11534:	ldr	r2, [pc, #276]	; 11650 <__assert_fail@plt+0x82c>
   11538:	cmp	r4, r5
   1153c:	ldr	r3, [pc, #272]	; 11654 <__assert_fail@plt+0x830>
   11540:	movne	r3, r2
   11544:	mov	r1, r0
   11548:	mov	r2, r4
   1154c:	mov	r0, #1
   11550:	bl	10da0 <__printf_chk@plt>
   11554:	b	1136c <__assert_fail@plt+0x548>
   11558:	mov	r0, r4
   1155c:	bl	10c80 <dcgettext@plt>
   11560:	ldr	r3, [pc, #212]	; 1163c <__assert_fail@plt+0x818>
   11564:	ldr	r2, [pc, #212]	; 11640 <__assert_fail@plt+0x81c>
   11568:	mov	r1, r0
   1156c:	mov	r0, #1
   11570:	bl	10da0 <__printf_chk@plt>
   11574:	mov	r1, r4
   11578:	mov	r0, #5
   1157c:	bl	10ddc <setlocale@plt>
   11580:	cmp	r0, #0
   11584:	beq	1159c <__assert_fail@plt+0x778>
   11588:	mov	r2, #3
   1158c:	ldr	r1, [pc, #176]	; 11644 <__assert_fail@plt+0x820>
   11590:	bl	10e0c <strncmp@plt>
   11594:	cmp	r0, #0
   11598:	bne	115e0 <__assert_fail@plt+0x7bc>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #160]	; 11648 <__assert_fail@plt+0x824>
   115a4:	mov	r0, #0
   115a8:	bl	10c80 <dcgettext@plt>
   115ac:	ldr	r3, [pc, #128]	; 11634 <__assert_fail@plt+0x810>
   115b0:	ldr	r2, [pc, #132]	; 1163c <__assert_fail@plt+0x818>
   115b4:	mov	r4, r3
   115b8:	mov	r1, r0
   115bc:	mov	r0, #1
   115c0:	bl	10da0 <__printf_chk@plt>
   115c4:	ldr	r1, [pc, #128]	; 1164c <__assert_fail@plt+0x828>
   115c8:	mov	r2, #5
   115cc:	mov	r0, #0
   115d0:	bl	10c80 <dcgettext@plt>
   115d4:	ldr	r3, [pc, #120]	; 11654 <__assert_fail@plt+0x830>
   115d8:	mov	r1, r0
   115dc:	b	11548 <__assert_fail@plt+0x724>
   115e0:	ldr	r5, [pc, #76]	; 11634 <__assert_fail@plt+0x810>
   115e4:	mov	r4, r5
   115e8:	mov	r2, #5
   115ec:	ldr	r1, [pc, #100]	; 11658 <__assert_fail@plt+0x834>
   115f0:	mov	r0, #0
   115f4:	bl	10c80 <dcgettext@plt>
   115f8:	ldr	r1, [r7]
   115fc:	bl	10bf0 <fputs_unlocked@plt>
   11600:	b	11500 <__assert_fail@plt+0x6dc>
   11604:	andeq	r9, r2, r8, lsr r1
   11608:	andeq	r7, r1, r0, asr #23
   1160c:	andeq	r9, r2, r0, asr r1
   11610:	andeq	r7, r1, r8, ror #23
   11614:	andeq	r9, r2, ip, lsr r1
   11618:	andeq	r7, r1, r0, asr #22
   1161c:	andeq	r7, r1, r0, lsl ip
   11620:	strdeq	r7, [r1], -r0
   11624:	andeq	r7, r1, ip, lsr sp
   11628:	andeq	r7, r1, r0, lsl #27
   1162c:			; <UNDEFINED> instruction: 0x00017db0
   11630:	andeq	r7, r1, r8, ror #27
   11634:			; <UNDEFINED> instruction: 0x00017bb8
   11638:	andeq	r7, r1, r8, lsr #29
   1163c:	andeq	r7, r1, r0, asr #29
   11640:	andeq	r7, r1, r8, ror #29
   11644:	strdeq	r7, [r1], -r8
   11648:	andeq	r7, r1, r4, asr #30
   1164c:	andeq	r7, r1, r0, ror #30
   11650:	andeq	r7, r1, ip, lsr #27
   11654:	andeq	r8, r1, r8, lsr r0
   11658:	strdeq	r7, [r1], -ip
   1165c:	ldr	r3, [pc, #4]	; 11668 <__assert_fail@plt+0x844>
   11660:	str	r0, [r3]
   11664:	bx	lr
   11668:	andeq	r9, r2, r8, asr #2
   1166c:	ldr	r3, [pc, #4]	; 11678 <__assert_fail@plt+0x854>
   11670:	strb	r0, [r3, #4]
   11674:	bx	lr
   11678:	andeq	r9, r2, r8, asr #2
   1167c:	ldr	r3, [pc, #192]	; 11744 <__assert_fail@plt+0x920>
   11680:	push	{r4, r5, r6, lr}
   11684:	sub	sp, sp, #8
   11688:	ldr	r0, [r3]
   1168c:	bl	17220 <__assert_fail@plt+0x63fc>
   11690:	cmp	r0, #0
   11694:	beq	116b8 <__assert_fail@plt+0x894>
   11698:	ldr	r4, [pc, #168]	; 11748 <__assert_fail@plt+0x924>
   1169c:	ldrb	r3, [r4, #4]
   116a0:	cmp	r3, #0
   116a4:	beq	116d4 <__assert_fail@plt+0x8b0>
   116a8:	bl	10d7c <__errno_location@plt>
   116ac:	ldr	r3, [r0]
   116b0:	cmp	r3, #32
   116b4:	bne	116d4 <__assert_fail@plt+0x8b0>
   116b8:	ldr	r3, [pc, #140]	; 1174c <__assert_fail@plt+0x928>
   116bc:	ldr	r0, [r3]
   116c0:	bl	17220 <__assert_fail@plt+0x63fc>
   116c4:	cmp	r0, #0
   116c8:	bne	1171c <__assert_fail@plt+0x8f8>
   116cc:	add	sp, sp, #8
   116d0:	pop	{r4, r5, r6, pc}
   116d4:	mov	r2, #5
   116d8:	ldr	r1, [pc, #112]	; 11750 <__assert_fail@plt+0x92c>
   116dc:	mov	r0, #0
   116e0:	bl	10c80 <dcgettext@plt>
   116e4:	ldr	r4, [r4]
   116e8:	cmp	r4, #0
   116ec:	mov	r5, r0
   116f0:	beq	11728 <__assert_fail@plt+0x904>
   116f4:	bl	10d7c <__errno_location@plt>
   116f8:	ldr	r6, [r0]
   116fc:	mov	r0, r4
   11700:	bl	143cc <__assert_fail@plt+0x35a8>
   11704:	mov	r1, r6
   11708:	str	r5, [sp]
   1170c:	ldr	r2, [pc, #64]	; 11754 <__assert_fail@plt+0x930>
   11710:	mov	r3, r0
   11714:	mov	r0, #0
   11718:	bl	10cf8 <error@plt>
   1171c:	ldr	r3, [pc, #52]	; 11758 <__assert_fail@plt+0x934>
   11720:	ldr	r0, [r3]
   11724:	bl	10c38 <_exit@plt>
   11728:	bl	10d7c <__errno_location@plt>
   1172c:	mov	r3, r5
   11730:	ldr	r2, [pc, #36]	; 1175c <__assert_fail@plt+0x938>
   11734:	ldr	r1, [r0]
   11738:	mov	r0, r4
   1173c:	bl	10cf8 <error@plt>
   11740:	b	1171c <__assert_fail@plt+0x8f8>
   11744:	andeq	r9, r2, ip, lsr r1
   11748:	andeq	r9, r2, r8, asr #2
   1174c:	andeq	r9, r2, r8, lsr r1
   11750:	strheq	r8, [r1], -ip
   11754:	andeq	r8, r1, r8, asr #1
   11758:	andeq	r9, r2, r0, ror #1
   1175c:	andeq	r8, r1, ip, asr #1
   11760:	push	{r4, r5, r6, lr}
   11764:	subs	r4, r0, #0
   11768:	beq	117dc <__assert_fail@plt+0x9b8>
   1176c:	mov	r1, #47	; 0x2f
   11770:	bl	10de8 <strrchr@plt>
   11774:	subs	r5, r0, #0
   11778:	beq	117c8 <__assert_fail@plt+0x9a4>
   1177c:	add	r6, r5, #1
   11780:	sub	r3, r6, r4
   11784:	cmp	r3, #6
   11788:	ble	117c8 <__assert_fail@plt+0x9a4>
   1178c:	mov	r2, #7
   11790:	ldr	r1, [pc, #96]	; 117f8 <__assert_fail@plt+0x9d4>
   11794:	sub	r0, r5, #6
   11798:	bl	10e0c <strncmp@plt>
   1179c:	cmp	r0, #0
   117a0:	bne	117c8 <__assert_fail@plt+0x9a4>
   117a4:	mov	r2, #3
   117a8:	ldr	r1, [pc, #76]	; 117fc <__assert_fail@plt+0x9d8>
   117ac:	mov	r0, r6
   117b0:	bl	10e0c <strncmp@plt>
   117b4:	cmp	r0, #0
   117b8:	movne	r4, r6
   117bc:	ldreq	r3, [pc, #60]	; 11800 <__assert_fail@plt+0x9dc>
   117c0:	addeq	r4, r5, #4
   117c4:	streq	r4, [r3]
   117c8:	ldr	r2, [pc, #52]	; 11804 <__assert_fail@plt+0x9e0>
   117cc:	ldr	r3, [pc, #52]	; 11808 <__assert_fail@plt+0x9e4>
   117d0:	str	r4, [r2]
   117d4:	str	r4, [r3]
   117d8:	pop	{r4, r5, r6, pc}
   117dc:	ldr	r3, [pc, #40]	; 1180c <__assert_fail@plt+0x9e8>
   117e0:	mov	r2, #55	; 0x37
   117e4:	mov	r1, #1
   117e8:	ldr	r3, [r3]
   117ec:	ldr	r0, [pc, #28]	; 11810 <__assert_fail@plt+0x9ec>
   117f0:	bl	10cbc <fwrite@plt>
   117f4:	bl	10e18 <abort@plt>
   117f8:	andeq	r8, r1, r8, lsl #2
   117fc:	andeq	r8, r1, r0, lsl r1
   11800:	andeq	r9, r2, r8, lsr #2
   11804:	andeq	r9, r2, r0, asr r1
   11808:	andeq	r9, r2, ip, lsr #2
   1180c:	andeq	r9, r2, r8, lsr r1
   11810:	ldrdeq	r8, [r1], -r0
   11814:	push	{r4, r5, r6, lr}
   11818:	mov	r4, r0
   1181c:	mov	r5, r1
   11820:	bl	17494 <__assert_fail@plt+0x6670>
   11824:	ldrb	r3, [r0]
   11828:	bic	r3, r3, #32
   1182c:	cmp	r3, #85	; 0x55
   11830:	bne	11890 <__assert_fail@plt+0xa6c>
   11834:	ldrb	r3, [r0, #1]
   11838:	bic	r3, r3, #32
   1183c:	cmp	r3, #84	; 0x54
   11840:	bne	118cc <__assert_fail@plt+0xaa8>
   11844:	ldrb	r3, [r0, #2]
   11848:	bic	r3, r3, #32
   1184c:	cmp	r3, #70	; 0x46
   11850:	bne	118cc <__assert_fail@plt+0xaa8>
   11854:	ldrb	r3, [r0, #3]
   11858:	cmp	r3, #45	; 0x2d
   1185c:	bne	118cc <__assert_fail@plt+0xaa8>
   11860:	ldrb	r3, [r0, #4]
   11864:	cmp	r3, #56	; 0x38
   11868:	bne	118cc <__assert_fail@plt+0xaa8>
   1186c:	ldrb	r3, [r0, #5]
   11870:	cmp	r3, #0
   11874:	bne	118cc <__assert_fail@plt+0xaa8>
   11878:	ldrb	r2, [r4]
   1187c:	ldr	r3, [pc, #152]	; 1191c <__assert_fail@plt+0xaf8>
   11880:	ldr	r0, [pc, #152]	; 11920 <__assert_fail@plt+0xafc>
   11884:	cmp	r2, #96	; 0x60
   11888:	movne	r0, r3
   1188c:	pop	{r4, r5, r6, pc}
   11890:	cmp	r3, #71	; 0x47
   11894:	bne	118cc <__assert_fail@plt+0xaa8>
   11898:	ldrb	r3, [r0, #1]
   1189c:	bic	r3, r3, #32
   118a0:	cmp	r3, #66	; 0x42
   118a4:	bne	118cc <__assert_fail@plt+0xaa8>
   118a8:	ldrb	r3, [r0, #2]
   118ac:	cmp	r3, #49	; 0x31
   118b0:	bne	118cc <__assert_fail@plt+0xaa8>
   118b4:	ldrb	r3, [r0, #3]
   118b8:	cmp	r3, #56	; 0x38
   118bc:	bne	118cc <__assert_fail@plt+0xaa8>
   118c0:	ldrb	r3, [r0, #4]
   118c4:	cmp	r3, #48	; 0x30
   118c8:	beq	118e0 <__assert_fail@plt+0xabc>
   118cc:	ldr	r3, [pc, #80]	; 11924 <__assert_fail@plt+0xb00>
   118d0:	cmp	r5, #9
   118d4:	ldr	r0, [pc, #76]	; 11928 <__assert_fail@plt+0xb04>
   118d8:	movne	r0, r3
   118dc:	pop	{r4, r5, r6, pc}
   118e0:	ldrb	r3, [r0, #5]
   118e4:	cmp	r3, #51	; 0x33
   118e8:	bne	118cc <__assert_fail@plt+0xaa8>
   118ec:	ldrb	r3, [r0, #6]
   118f0:	cmp	r3, #48	; 0x30
   118f4:	bne	118cc <__assert_fail@plt+0xaa8>
   118f8:	ldrb	r3, [r0, #7]
   118fc:	cmp	r3, #0
   11900:	bne	118cc <__assert_fail@plt+0xaa8>
   11904:	ldrb	r2, [r4]
   11908:	ldr	r3, [pc, #28]	; 1192c <__assert_fail@plt+0xb08>
   1190c:	ldr	r0, [pc, #28]	; 11930 <__assert_fail@plt+0xb0c>
   11910:	cmp	r2, #96	; 0x60
   11914:	movne	r0, r3
   11918:	pop	{r4, r5, r6, pc}
   1191c:	andeq	r8, r1, ip, ror #2
   11920:	andeq	r8, r1, r8, ror #2
   11924:	andeq	r8, r1, ip, ror r1
   11928:	andeq	r8, r1, r8, ror r1
   1192c:	andeq	r8, r1, r4, ror r1
   11930:	andeq	r8, r1, r0, ror r1
   11934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11938:	sub	sp, sp, #140	; 0x8c
   1193c:	mov	r9, r1
   11940:	str	r3, [sp, #24]
   11944:	mov	r3, #1
   11948:	mov	sl, r0
   1194c:	str	r2, [sp, #44]	; 0x2c
   11950:	str	r3, [sp, #28]
   11954:	bl	10cd4 <__ctype_get_mb_cur_max@plt>
   11958:	ldr	r3, [sp, #180]	; 0xb4
   1195c:	mov	fp, r9
   11960:	mov	r9, sl
   11964:	lsr	r3, r3, #1
   11968:	and	r3, r3, #1
   1196c:	str	r3, [sp, #40]	; 0x28
   11970:	ldr	r3, [sp, #180]	; 0xb4
   11974:	mov	r2, #0
   11978:	and	r3, r3, #4
   1197c:	str	r3, [sp, #100]	; 0x64
   11980:	ldr	r3, [sp, #180]	; 0xb4
   11984:	str	r2, [sp, #76]	; 0x4c
   11988:	and	r3, r3, #1
   1198c:	str	r3, [sp, #96]	; 0x60
   11990:	str	r2, [sp, #36]	; 0x24
   11994:	str	r2, [sp, #56]	; 0x38
   11998:	str	r2, [sp, #68]	; 0x44
   1199c:	str	r2, [sp, #72]	; 0x48
   119a0:	str	r2, [sp, #84]	; 0x54
   119a4:	str	r0, [sp, #80]	; 0x50
   119a8:	ldr	r3, [sp, #176]	; 0xb0
   119ac:	cmp	r3, #10
   119b0:	ldrls	pc, [pc, r3, lsl #2]
   119b4:	b	12b8c <__assert_fail@plt+0x1d68>
   119b8:	andeq	r1, r1, r4, ror #19
   119bc:	andeq	r1, r1, r4, lsl #26
   119c0:	andeq	r1, r1, ip, asr lr
   119c4:	andeq	r1, r1, r8, lsr sp
   119c8:			; <UNDEFINED> instruction: 0x00011eb0
   119cc:	muleq	r1, r0, lr
   119d0:	andeq	r1, r1, r8, asr sp
   119d4:	andeq	r1, r1, ip, ror sp
   119d8:	andeq	r1, r1, r4, lsr #27
   119dc:	andeq	r1, r1, r4, lsr #27
   119e0:	andeq	r1, r1, r4, lsr #27
   119e4:	mov	r3, #0
   119e8:	ldr	r1, [sp, #56]	; 0x38
   119ec:	ldr	r2, [sp, #176]	; 0xb0
   119f0:	ldr	lr, [sp, #176]	; 0xb0
   119f4:	mov	r8, r3
   119f8:	mov	ip, r3
   119fc:	str	r3, [sp, #40]	; 0x28
   11a00:	mov	r3, r1
   11a04:	cmp	r2, #2
   11a08:	moveq	r3, #0
   11a0c:	andne	r3, r3, #1
   11a10:	mov	r0, r3
   11a14:	str	r3, [sp, #92]	; 0x5c
   11a18:	ldr	r3, [sp, #68]	; 0x44
   11a1c:	sub	lr, lr, #2
   11a20:	adds	r2, r3, #0
   11a24:	movne	r2, #1
   11a28:	and	r3, r1, ip
   11a2c:	and	r3, r2, r3
   11a30:	clz	lr, lr
   11a34:	str	r3, [sp, #88]	; 0x58
   11a38:	lsr	lr, lr, #5
   11a3c:	mov	r3, ip
   11a40:	and	r3, r3, lr
   11a44:	mov	sl, #0
   11a48:	and	r0, r2, r0
   11a4c:	str	r3, [sp, #64]	; 0x40
   11a50:	eor	r3, r1, #1
   11a54:	str	lr, [sp, #52]	; 0x34
   11a58:	str	r0, [sp, #48]	; 0x30
   11a5c:	str	r3, [sp, #60]	; 0x3c
   11a60:	ldr	r3, [sp, #24]
   11a64:	cmn	r3, #1
   11a68:	beq	11f98 <__assert_fail@plt+0x1174>
   11a6c:	subs	r7, r3, sl
   11a70:	movne	r7, #1
   11a74:	cmp	r7, #0
   11a78:	beq	11fb0 <__assert_fail@plt+0x118c>
   11a7c:	ldr	r3, [sp, #48]	; 0x30
   11a80:	cmp	r3, #0
   11a84:	beq	1231c <__assert_fail@plt+0x14f8>
   11a88:	ldr	r2, [sp, #68]	; 0x44
   11a8c:	ldr	r1, [sp, #24]
   11a90:	cmp	r2, #1
   11a94:	mov	r3, r2
   11a98:	movls	r3, #0
   11a9c:	movhi	r3, #1
   11aa0:	cmn	r1, #1
   11aa4:	movne	r3, #0
   11aa8:	cmp	r3, #0
   11aac:	add	r4, sl, r2
   11ab0:	beq	11ac0 <__assert_fail@plt+0xc9c>
   11ab4:	ldr	r0, [sp, #44]	; 0x2c
   11ab8:	bl	10d64 <strlen@plt>
   11abc:	str	r0, [sp, #24]
   11ac0:	ldr	r3, [sp, #24]
   11ac4:	cmp	r3, r4
   11ac8:	ldr	r3, [sp, #44]	; 0x2c
   11acc:	add	r5, r3, sl
   11ad0:	bcc	12324 <__assert_fail@plt+0x1500>
   11ad4:	mov	r0, r5
   11ad8:	ldr	r2, [sp, #68]	; 0x44
   11adc:	ldr	r1, [sp, #72]	; 0x48
   11ae0:	bl	10c68 <memcmp@plt>
   11ae4:	cmp	r0, #0
   11ae8:	bne	12324 <__assert_fail@plt+0x1500>
   11aec:	ldr	r3, [sp, #40]	; 0x28
   11af0:	cmp	r3, #0
   11af4:	bne	12ce0 <__assert_fail@plt+0x1ebc>
   11af8:	ldrb	r4, [r5]
   11afc:	cmp	r4, #126	; 0x7e
   11b00:	ldrls	pc, [pc, r4, lsl #2]
   11b04:	b	12c1c <__assert_fail@plt+0x1df8>
   11b08:	ldrdeq	r2, [r1], -ip
   11b0c:	andeq	r2, r1, ip, lsl ip
   11b10:	andeq	r2, r1, ip, lsl ip
   11b14:	andeq	r2, r1, ip, lsl ip
   11b18:	andeq	r2, r1, ip, lsl ip
   11b1c:	andeq	r2, r1, ip, lsl ip
   11b20:	andeq	r2, r1, ip, lsl ip
   11b24:	andeq	r2, r1, r8, asr #3
   11b28:			; <UNDEFINED> instruction: 0x000121b4
   11b2c:	muleq	r1, r0, r1
   11b30:	andeq	r2, r1, r0, ror r1
   11b34:	andeq	r2, r1, r0, lsr #3
   11b38:	ldrdeq	r2, [r1], -r8
   11b3c:	andeq	r2, r1, ip, lsl #6
   11b40:	andeq	r2, r1, ip, lsl ip
   11b44:	andeq	r2, r1, ip, lsl ip
   11b48:	andeq	r2, r1, ip, lsl ip
   11b4c:	andeq	r2, r1, ip, lsl ip
   11b50:	andeq	r2, r1, ip, lsl ip
   11b54:	andeq	r2, r1, ip, lsl ip
   11b58:	andeq	r2, r1, ip, lsl ip
   11b5c:	andeq	r2, r1, ip, lsl ip
   11b60:	andeq	r2, r1, ip, lsl ip
   11b64:	andeq	r2, r1, ip, lsl ip
   11b68:	andeq	r2, r1, ip, lsl ip
   11b6c:	andeq	r2, r1, ip, lsl ip
   11b70:	andeq	r2, r1, ip, lsl ip
   11b74:	andeq	r2, r1, ip, lsl ip
   11b78:	andeq	r2, r1, ip, lsl ip
   11b7c:	andeq	r2, r1, ip, lsl ip
   11b80:	andeq	r2, r1, ip, lsl ip
   11b84:	andeq	r2, r1, ip, lsl ip
   11b88:	strdeq	r2, [r1], -ip
   11b8c:	ldrdeq	r2, [r1], -ip
   11b90:	ldrdeq	r2, [r1], -ip
   11b94:			; <UNDEFINED> instruction: 0x000122bc
   11b98:	ldrdeq	r2, [r1], -ip
   11b9c:	andeq	r2, r1, r8, asr #1
   11ba0:	ldrdeq	r2, [r1], -ip
   11ba4:	andeq	r2, r1, r4, lsr #1
   11ba8:	ldrdeq	r2, [r1], -ip
   11bac:	ldrdeq	r2, [r1], -ip
   11bb0:	ldrdeq	r2, [r1], -ip
   11bb4:	andeq	r2, r1, r8, asr #1
   11bb8:	andeq	r2, r1, r8, asr #1
   11bbc:	andeq	r2, r1, r8, asr #1
   11bc0:	andeq	r2, r1, r8, asr #1
   11bc4:	andeq	r2, r1, r8, asr #1
   11bc8:	andeq	r2, r1, r8, asr #1
   11bcc:	andeq	r2, r1, r8, asr #1
   11bd0:	andeq	r2, r1, r8, asr #1
   11bd4:	andeq	r2, r1, r8, asr #1
   11bd8:	andeq	r2, r1, r8, asr #1
   11bdc:	andeq	r2, r1, r8, asr #1
   11be0:	andeq	r2, r1, r8, asr #1
   11be4:	andeq	r2, r1, r8, asr #1
   11be8:	andeq	r2, r1, r8, asr #1
   11bec:	andeq	r2, r1, r8, asr #1
   11bf0:	andeq	r2, r1, r8, asr #1
   11bf4:	ldrdeq	r2, [r1], -ip
   11bf8:	ldrdeq	r2, [r1], -ip
   11bfc:	ldrdeq	r2, [r1], -ip
   11c00:	ldrdeq	r2, [r1], -ip
   11c04:	andeq	r2, r1, r4, asr r0
   11c08:	andeq	r2, r1, ip, lsl ip
   11c0c:	andeq	r2, r1, r8, asr #1
   11c10:	andeq	r2, r1, r8, asr #1
   11c14:	andeq	r2, r1, r8, asr #1
   11c18:	andeq	r2, r1, r8, asr #1
   11c1c:	andeq	r2, r1, r8, asr #1
   11c20:	andeq	r2, r1, r8, asr #1
   11c24:	andeq	r2, r1, r8, asr #1
   11c28:	andeq	r2, r1, r8, asr #1
   11c2c:	andeq	r2, r1, r8, asr #1
   11c30:	andeq	r2, r1, r8, asr #1
   11c34:	andeq	r2, r1, r8, asr #1
   11c38:	andeq	r2, r1, r8, asr #1
   11c3c:	andeq	r2, r1, r8, asr #1
   11c40:	andeq	r2, r1, r8, asr #1
   11c44:	andeq	r2, r1, r8, asr #1
   11c48:	andeq	r2, r1, r8, asr #1
   11c4c:	andeq	r2, r1, r8, asr #1
   11c50:	andeq	r2, r1, r8, asr #1
   11c54:	andeq	r2, r1, r8, asr #1
   11c58:	andeq	r2, r1, r8, asr #1
   11c5c:	andeq	r2, r1, r8, asr #1
   11c60:	andeq	r2, r1, r8, asr #1
   11c64:	andeq	r2, r1, r8, asr #1
   11c68:	andeq	r2, r1, r8, asr #1
   11c6c:	andeq	r2, r1, r8, asr #1
   11c70:	andeq	r2, r1, r8, asr #1
   11c74:	ldrdeq	r2, [r1], -ip
   11c78:	andeq	r2, r1, r0, lsr #32
   11c7c:	andeq	r2, r1, r8, asr #1
   11c80:	ldrdeq	r2, [r1], -ip
   11c84:	andeq	r2, r1, r8, asr #1
   11c88:	ldrdeq	r2, [r1], -ip
   11c8c:	andeq	r2, r1, r8, asr #1
   11c90:	andeq	r2, r1, r8, asr #1
   11c94:	andeq	r2, r1, r8, asr #1
   11c98:	andeq	r2, r1, r8, asr #1
   11c9c:	andeq	r2, r1, r8, asr #1
   11ca0:	andeq	r2, r1, r8, asr #1
   11ca4:	andeq	r2, r1, r8, asr #1
   11ca8:	andeq	r2, r1, r8, asr #1
   11cac:	andeq	r2, r1, r8, asr #1
   11cb0:	andeq	r2, r1, r8, asr #1
   11cb4:	andeq	r2, r1, r8, asr #1
   11cb8:	andeq	r2, r1, r8, asr #1
   11cbc:	andeq	r2, r1, r8, asr #1
   11cc0:	andeq	r2, r1, r8, asr #1
   11cc4:	andeq	r2, r1, r8, asr #1
   11cc8:	andeq	r2, r1, r8, asr #1
   11ccc:	andeq	r2, r1, r8, asr #1
   11cd0:	andeq	r2, r1, r8, asr #1
   11cd4:	andeq	r2, r1, r8, asr #1
   11cd8:	andeq	r2, r1, r8, asr #1
   11cdc:	andeq	r2, r1, r8, asr #1
   11ce0:	andeq	r2, r1, r8, asr #1
   11ce4:	andeq	r2, r1, r8, asr #1
   11ce8:	andeq	r2, r1, r8, asr #1
   11cec:	andeq	r2, r1, r8, asr #1
   11cf0:	andeq	r2, r1, r8, asr #1
   11cf4:	ldrdeq	r1, [r1], -r8
   11cf8:	ldrdeq	r2, [r1], -ip
   11cfc:	ldrdeq	r1, [r1], -r8
   11d00:			; <UNDEFINED> instruction: 0x000122bc
   11d04:	mov	r3, #1
   11d08:	str	r3, [sp, #40]	; 0x28
   11d0c:	str	r3, [sp, #68]	; 0x44
   11d10:	mov	r8, #0
   11d14:	ldr	r3, [pc, #4056]	; 12cf4 <__assert_fail@plt+0x1ed0>
   11d18:	str	r3, [sp, #72]	; 0x48
   11d1c:	mov	r3, #2
   11d20:	str	r3, [sp, #176]	; 0xb0
   11d24:	ldr	r1, [sp, #56]	; 0x38
   11d28:	mov	r2, r3
   11d2c:	ldr	ip, [sp, #40]	; 0x28
   11d30:	mov	lr, r3
   11d34:	b	11a00 <__assert_fail@plt+0xbdc>
   11d38:	mov	r3, #1
   11d3c:	str	r3, [sp, #56]	; 0x38
   11d40:	str	r3, [sp, #68]	; 0x44
   11d44:	str	r3, [sp, #40]	; 0x28
   11d48:	ldr	r3, [pc, #4004]	; 12cf4 <__assert_fail@plt+0x1ed0>
   11d4c:	mov	r8, #0
   11d50:	str	r3, [sp, #72]	; 0x48
   11d54:	b	11d1c <__assert_fail@plt+0xef8>
   11d58:	mov	r3, #1
   11d5c:	str	r3, [sp, #56]	; 0x38
   11d60:	str	r3, [sp, #68]	; 0x44
   11d64:	str	r3, [sp, #40]	; 0x28
   11d68:	ldr	r3, [pc, #3976]	; 12cf8 <__assert_fail@plt+0x1ed4>
   11d6c:	mov	r8, #0
   11d70:	str	r3, [sp, #72]	; 0x48
   11d74:	mov	r3, #5
   11d78:	b	11d20 <__assert_fail@plt+0xefc>
   11d7c:	mov	r3, #0
   11d80:	str	r3, [sp, #40]	; 0x28
   11d84:	mov	r3, #1
   11d88:	str	r3, [sp, #56]	; 0x38
   11d8c:	mov	r8, #0
   11d90:	mov	r1, r3
   11d94:	ldr	r2, [sp, #176]	; 0xb0
   11d98:	ldr	ip, [sp, #40]	; 0x28
   11d9c:	ldr	lr, [sp, #176]	; 0xb0
   11da0:	b	11a00 <__assert_fail@plt+0xbdc>
   11da4:	ldr	r3, [sp, #176]	; 0xb0
   11da8:	cmp	r3, #10
   11dac:	beq	11df0 <__assert_fail@plt+0xfcc>
   11db0:	mov	r2, #5
   11db4:	ldr	r1, [pc, #3904]	; 12cfc <__assert_fail@plt+0x1ed8>
   11db8:	mov	r0, #0
   11dbc:	bl	10c80 <dcgettext@plt>
   11dc0:	ldr	r2, [pc, #3892]	; 12cfc <__assert_fail@plt+0x1ed8>
   11dc4:	cmp	r0, r2
   11dc8:	str	r0, [sp, #188]	; 0xbc
   11dcc:	beq	12e88 <__assert_fail@plt+0x2064>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #3864]	; 12cf4 <__assert_fail@plt+0x1ed0>
   11dd8:	mov	r0, #0
   11ddc:	bl	10c80 <dcgettext@plt>
   11de0:	ldr	r2, [pc, #3852]	; 12cf4 <__assert_fail@plt+0x1ed0>
   11de4:	cmp	r0, r2
   11de8:	str	r0, [sp, #192]	; 0xc0
   11dec:	beq	12e78 <__assert_fail@plt+0x2054>
   11df0:	ldr	r8, [sp, #40]	; 0x28
   11df4:	cmp	r8, #0
   11df8:	movne	r8, #0
   11dfc:	bne	11e2c <__assert_fail@plt+0x1008>
   11e00:	ldr	r3, [sp, #188]	; 0xbc
   11e04:	ldrb	r3, [r3]
   11e08:	cmp	r3, #0
   11e0c:	beq	11e2c <__assert_fail@plt+0x1008>
   11e10:	ldr	r2, [sp, #188]	; 0xbc
   11e14:	cmp	fp, r8
   11e18:	strbhi	r3, [r9, r8]
   11e1c:	ldrb	r3, [r2, #1]!
   11e20:	add	r8, r8, #1
   11e24:	cmp	r3, #0
   11e28:	bne	11e14 <__assert_fail@plt+0xff0>
   11e2c:	ldr	r0, [sp, #192]	; 0xc0
   11e30:	bl	10d64 <strlen@plt>
   11e34:	ldr	r3, [sp, #192]	; 0xc0
   11e38:	ldr	r2, [sp, #176]	; 0xb0
   11e3c:	str	r3, [sp, #72]	; 0x48
   11e40:	mov	r3, #1
   11e44:	str	r3, [sp, #56]	; 0x38
   11e48:	mov	r1, r3
   11e4c:	ldr	ip, [sp, #40]	; 0x28
   11e50:	ldr	lr, [sp, #176]	; 0xb0
   11e54:	str	r0, [sp, #68]	; 0x44
   11e58:	b	11a00 <__assert_fail@plt+0xbdc>
   11e5c:	ldr	r3, [sp, #40]	; 0x28
   11e60:	cmp	r3, #0
   11e64:	beq	12b0c <__assert_fail@plt+0x1ce8>
   11e68:	mov	r3, #1
   11e6c:	str	r3, [sp, #68]	; 0x44
   11e70:	ldr	r3, [pc, #3708]	; 12cf4 <__assert_fail@plt+0x1ed0>
   11e74:	str	r3, [sp, #72]	; 0x48
   11e78:	mov	r8, #0
   11e7c:	ldr	r1, [sp, #56]	; 0x38
   11e80:	ldr	r2, [sp, #176]	; 0xb0
   11e84:	ldr	ip, [sp, #40]	; 0x28
   11e88:	ldr	lr, [sp, #176]	; 0xb0
   11e8c:	b	11a00 <__assert_fail@plt+0xbdc>
   11e90:	ldr	r3, [sp, #40]	; 0x28
   11e94:	cmp	r3, #0
   11e98:	beq	12b90 <__assert_fail@plt+0x1d6c>
   11e9c:	str	r3, [sp, #56]	; 0x38
   11ea0:	mov	r3, #1
   11ea4:	str	r3, [sp, #68]	; 0x44
   11ea8:	ldr	r3, [pc, #3656]	; 12cf8 <__assert_fail@plt+0x1ed4>
   11eac:	b	11e74 <__assert_fail@plt+0x1050>
   11eb0:	ldr	r3, [sp, #40]	; 0x28
   11eb4:	cmp	r3, #0
   11eb8:	mov	r3, #1
   11ebc:	streq	r3, [sp, #56]	; 0x38
   11ec0:	beq	12b0c <__assert_fail@plt+0x1ce8>
   11ec4:	str	r3, [sp, #68]	; 0x44
   11ec8:	ldr	r3, [pc, #3620]	; 12cf4 <__assert_fail@plt+0x1ed0>
   11ecc:	mov	r8, #0
   11ed0:	str	r3, [sp, #72]	; 0x48
   11ed4:	b	11d1c <__assert_fail@plt+0xef8>
   11ed8:	ldr	r3, [sp, #24]
   11edc:	ldr	r6, [sp, #48]	; 0x30
   11ee0:	cmn	r3, #1
   11ee4:	beq	12540 <__assert_fail@plt+0x171c>
   11ee8:	subs	r3, r3, #1
   11eec:	movne	r3, #1
   11ef0:	cmp	r3, #0
   11ef4:	beq	122c0 <__assert_fail@plt+0x149c>
   11ef8:	ldr	r1, [sp, #52]	; 0x34
   11efc:	mov	r7, r3
   11f00:	mov	r3, #0
   11f04:	str	r3, [sp, #32]
   11f08:	ldr	r3, [sp, #60]	; 0x3c
   11f0c:	orr	r2, r1, r3
   11f10:	ldr	r3, [sp, #40]	; 0x28
   11f14:	eor	r2, r2, #1
   11f18:	orr	r2, r3, r2
   11f1c:	tst	r2, #255	; 0xff
   11f20:	bne	12844 <__assert_fail@plt+0x1a20>
   11f24:	cmp	r6, #0
   11f28:	bne	12104 <__assert_fail@plt+0x12e0>
   11f2c:	ldr	r3, [sp, #36]	; 0x24
   11f30:	add	sl, sl, #1
   11f34:	and	r3, r3, r7
   11f38:	uxtb	r6, r3
   11f3c:	cmp	r6, #0
   11f40:	beq	11f6c <__assert_fail@plt+0x1148>
   11f44:	cmp	fp, r8
   11f48:	movhi	r3, #39	; 0x27
   11f4c:	strbhi	r3, [r9, r8]
   11f50:	add	r3, r8, #1
   11f54:	cmp	fp, r3
   11f58:	movhi	r2, #39	; 0x27
   11f5c:	add	r8, r8, #2
   11f60:	strbhi	r2, [r9, r3]
   11f64:	mov	r3, #0
   11f68:	str	r3, [sp, #36]	; 0x24
   11f6c:	ldr	r2, [sp, #32]
   11f70:	cmp	r8, fp
   11f74:	ldr	r3, [sp, #28]
   11f78:	strbcc	r4, [r9, r8]
   11f7c:	cmp	r2, #0
   11f80:	moveq	r3, #0
   11f84:	str	r3, [sp, #28]
   11f88:	ldr	r3, [sp, #24]
   11f8c:	add	r8, r8, #1
   11f90:	cmn	r3, #1
   11f94:	bne	11a6c <__assert_fail@plt+0xc48>
   11f98:	ldr	r3, [sp, #44]	; 0x2c
   11f9c:	ldrb	r3, [r3, sl]
   11fa0:	adds	r7, r3, #0
   11fa4:	movne	r7, #1
   11fa8:	cmp	r7, #0
   11fac:	bne	11a7c <__assert_fail@plt+0xc58>
   11fb0:	ldr	r3, [sp, #64]	; 0x40
   11fb4:	cmp	r8, #0
   11fb8:	movne	r3, #0
   11fbc:	andeq	r3, r3, #1
   11fc0:	cmp	r3, #0
   11fc4:	str	r3, [sp, #64]	; 0x40
   11fc8:	bne	12a6c <__assert_fail@plt+0x1c48>
   11fcc:	ldr	r3, [sp, #40]	; 0x28
   11fd0:	ldr	r2, [sp, #52]	; 0x34
   11fd4:	eor	r3, r3, #1
   11fd8:	ands	r2, r2, r3
   11fdc:	beq	12e98 <__assert_fail@plt+0x2074>
   11fe0:	ldr	r3, [sp, #76]	; 0x4c
   11fe4:	cmp	r3, #0
   11fe8:	beq	12e68 <__assert_fail@plt+0x2044>
   11fec:	ldr	r3, [sp, #28]
   11ff0:	cmp	r3, #0
   11ff4:	bne	12e24 <__assert_fail@plt+0x2000>
   11ff8:	ldr	r2, [sp, #84]	; 0x54
   11ffc:	clz	r3, fp
   12000:	cmp	r2, #0
   12004:	lsr	r3, r3, #5
   12008:	moveq	r3, #0
   1200c:	cmp	r3, #0
   12010:	beq	12dc4 <__assert_fail@plt+0x1fa0>
   12014:	mov	fp, r2
   12018:	str	r3, [sp, #76]	; 0x4c
   1201c:	b	119a8 <__assert_fail@plt+0xb84>
   12020:	ldr	r3, [sp, #176]	; 0xb0
   12024:	ldr	r6, [sp, #48]	; 0x30
   12028:	cmp	r3, #2
   1202c:	beq	12564 <__assert_fail@plt+0x1740>
   12030:	ldr	r3, [sp, #88]	; 0x58
   12034:	cmp	r3, #0
   12038:	beq	12ae8 <__assert_fail@plt+0x1cc4>
   1203c:	mov	r3, #0
   12040:	add	sl, sl, #1
   12044:	ldr	r6, [sp, #36]	; 0x24
   12048:	str	r3, [sp, #32]
   1204c:	mov	r4, #92	; 0x5c
   12050:	b	11f3c <__assert_fail@plt+0x1118>
   12054:	ldr	r3, [sp, #176]	; 0xb0
   12058:	ldr	r6, [sp, #48]	; 0x30
   1205c:	cmp	r3, #2
   12060:	beq	12594 <__assert_fail@plt+0x1770>
   12064:	cmp	r3, #5
   12068:	bne	12af8 <__assert_fail@plt+0x1cd4>
   1206c:	ldr	r3, [sp, #100]	; 0x64
   12070:	cmp	r3, #0
   12074:	beq	12b5c <__assert_fail@plt+0x1d38>
   12078:	ldr	r2, [sp, #24]
   1207c:	add	r3, sl, #2
   12080:	cmp	r2, r3
   12084:	bls	12094 <__assert_fail@plt+0x1270>
   12088:	ldrb	r4, [r5, #1]
   1208c:	cmp	r4, #63	; 0x3f
   12090:	beq	12d04 <__assert_fail@plt+0x1ee0>
   12094:	mov	r1, #0
   12098:	str	r1, [sp, #32]
   1209c:	mov	r4, #63	; 0x3f
   120a0:	b	11f08 <__assert_fail@plt+0x10e4>
   120a4:	ldr	r3, [sp, #176]	; 0xb0
   120a8:	ldr	r6, [sp, #48]	; 0x30
   120ac:	cmp	r3, #2
   120b0:	beq	125c0 <__assert_fail@plt+0x179c>
   120b4:	str	r7, [sp, #32]
   120b8:	str	r7, [sp, #76]	; 0x4c
   120bc:	mov	r1, #0
   120c0:	mov	r4, #39	; 0x27
   120c4:	b	11f08 <__assert_fail@plt+0x10e4>
   120c8:	ldr	r6, [sp, #48]	; 0x30
   120cc:	ldr	r1, [sp, #52]	; 0x34
   120d0:	str	r7, [sp, #32]
   120d4:	b	11f08 <__assert_fail@plt+0x10e4>
   120d8:	ldr	r6, [sp, #48]	; 0x30
   120dc:	ldr	r1, [sp, #52]	; 0x34
   120e0:	mov	r4, #12
   120e4:	mov	r3, #102	; 0x66
   120e8:	ldr	r2, [sp, #56]	; 0x38
   120ec:	cmp	r2, #0
   120f0:	streq	r2, [sp, #32]
   120f4:	beq	11f08 <__assert_fail@plt+0x10e4>
   120f8:	mov	r4, r3
   120fc:	mov	r3, #0
   12100:	str	r3, [sp, #32]
   12104:	ldr	r3, [sp, #40]	; 0x28
   12108:	cmp	r3, #0
   1210c:	bne	1287c <__assert_fail@plt+0x1a58>
   12110:	ldr	r3, [sp, #36]	; 0x24
   12114:	eor	r3, r3, #1
   12118:	and	r3, r3, r1
   1211c:	ands	r3, r3, #255	; 0xff
   12120:	beq	12158 <__assert_fail@plt+0x1334>
   12124:	cmp	fp, r8
   12128:	movhi	r2, #39	; 0x27
   1212c:	strbhi	r2, [r9, r8]
   12130:	add	r2, r8, #1
   12134:	cmp	fp, r2
   12138:	movhi	r1, #36	; 0x24
   1213c:	strbhi	r1, [r9, r2]
   12140:	add	r2, r8, #2
   12144:	cmp	fp, r2
   12148:	add	r8, r8, #3
   1214c:	movhi	r1, #39	; 0x27
   12150:	strbhi	r1, [r9, r2]
   12154:	str	r3, [sp, #36]	; 0x24
   12158:	cmp	fp, r8
   1215c:	movhi	r3, #92	; 0x5c
   12160:	strbhi	r3, [r9, r8]
   12164:	add	sl, sl, #1
   12168:	add	r8, r8, #1
   1216c:	b	11f6c <__assert_fail@plt+0x1148>
   12170:	ldr	r6, [sp, #48]	; 0x30
   12174:	mov	r4, #10
   12178:	mov	r3, #110	; 0x6e
   1217c:	ldr	r2, [sp, #64]	; 0x40
   12180:	cmp	r2, #0
   12184:	bne	12c04 <__assert_fail@plt+0x1de0>
   12188:	ldr	r1, [sp, #52]	; 0x34
   1218c:	b	120e8 <__assert_fail@plt+0x12c4>
   12190:	ldr	r6, [sp, #48]	; 0x30
   12194:	ldr	r1, [sp, #52]	; 0x34
   12198:	mov	r3, #116	; 0x74
   1219c:	b	120e8 <__assert_fail@plt+0x12c4>
   121a0:	ldr	r6, [sp, #48]	; 0x30
   121a4:	ldr	r1, [sp, #52]	; 0x34
   121a8:	mov	r4, #11
   121ac:	mov	r3, #118	; 0x76
   121b0:	b	120e8 <__assert_fail@plt+0x12c4>
   121b4:	ldr	r6, [sp, #48]	; 0x30
   121b8:	ldr	r1, [sp, #52]	; 0x34
   121bc:	mov	r4, #8
   121c0:	mov	r3, #98	; 0x62
   121c4:	b	120e8 <__assert_fail@plt+0x12c4>
   121c8:	ldr	r6, [sp, #48]	; 0x30
   121cc:	ldr	r1, [sp, #52]	; 0x34
   121d0:	mov	r4, #7
   121d4:	mov	r3, #97	; 0x61
   121d8:	b	120e8 <__assert_fail@plt+0x12c4>
   121dc:	ldr	r3, [sp, #56]	; 0x38
   121e0:	ldr	r6, [sp, #48]	; 0x30
   121e4:	cmp	r3, #0
   121e8:	beq	126ac <__assert_fail@plt+0x1888>
   121ec:	ldr	r3, [sp, #40]	; 0x28
   121f0:	cmp	r3, #0
   121f4:	bne	12ce0 <__assert_fail@plt+0x1ebc>
   121f8:	ldr	r3, [sp, #36]	; 0x24
   121fc:	ldr	r2, [sp, #52]	; 0x34
   12200:	eor	r3, r3, #1
   12204:	ands	r3, r2, r3
   12208:	moveq	r2, r8
   1220c:	beq	12244 <__assert_fail@plt+0x1420>
   12210:	cmp	fp, r8
   12214:	movhi	r2, #39	; 0x27
   12218:	strbhi	r2, [r9, r8]
   1221c:	add	r2, r8, #1
   12220:	cmp	fp, r2
   12224:	movhi	r1, #36	; 0x24
   12228:	strbhi	r1, [r9, r2]
   1222c:	add	r2, r8, #2
   12230:	cmp	fp, r2
   12234:	movhi	r1, #39	; 0x27
   12238:	strbhi	r1, [r9, r2]
   1223c:	add	r2, r8, #3
   12240:	str	r3, [sp, #36]	; 0x24
   12244:	cmp	fp, r2
   12248:	movhi	r3, #92	; 0x5c
   1224c:	strbhi	r3, [r9, r2]
   12250:	ldr	r3, [sp, #92]	; 0x5c
   12254:	add	r8, r2, #1
   12258:	cmp	r3, #0
   1225c:	beq	12be0 <__assert_fail@plt+0x1dbc>
   12260:	ldr	r1, [sp, #24]
   12264:	add	r3, sl, #1
   12268:	cmp	r1, r3
   1226c:	bls	122a4 <__assert_fail@plt+0x1480>
   12270:	ldr	r1, [sp, #44]	; 0x2c
   12274:	ldrb	r3, [r1, r3]
   12278:	sub	r3, r3, #48	; 0x30
   1227c:	cmp	r3, #9
   12280:	bhi	122a4 <__assert_fail@plt+0x1480>
   12284:	cmp	fp, r8
   12288:	movhi	r3, #48	; 0x30
   1228c:	strbhi	r3, [r9, r8]
   12290:	add	r3, r2, #2
   12294:	cmp	fp, r3
   12298:	add	r8, r2, #3
   1229c:	movhi	r1, #48	; 0x30
   122a0:	strbhi	r1, [r9, r3]
   122a4:	ldr	r3, [sp, #40]	; 0x28
   122a8:	ldr	r1, [sp, #52]	; 0x34
   122ac:	mov	r7, r3
   122b0:	str	r3, [sp, #32]
   122b4:	mov	r4, #48	; 0x30
   122b8:	b	11f08 <__assert_fail@plt+0x10e4>
   122bc:	ldr	r6, [sp, #48]	; 0x30
   122c0:	cmp	sl, #0
   122c4:	streq	r7, [sp, #32]
   122c8:	beq	122e8 <__assert_fail@plt+0x14c4>
   122cc:	mov	r3, #0
   122d0:	ldr	r1, [sp, #52]	; 0x34
   122d4:	str	r3, [sp, #32]
   122d8:	b	11f08 <__assert_fail@plt+0x10e4>
   122dc:	ldr	r6, [sp, #48]	; 0x30
   122e0:	mov	r3, #0
   122e4:	str	r3, [sp, #32]
   122e8:	ldr	r3, [sp, #64]	; 0x40
   122ec:	cmp	r3, #0
   122f0:	bne	12a6c <__assert_fail@plt+0x1c48>
   122f4:	ldr	r1, [sp, #52]	; 0x34
   122f8:	b	11f08 <__assert_fail@plt+0x10e4>
   122fc:	ldr	r3, [sp, #48]	; 0x30
   12300:	mov	r6, r3
   12304:	str	r3, [sp, #32]
   12308:	b	122e8 <__assert_fail@plt+0x14c4>
   1230c:	ldr	r6, [sp, #48]	; 0x30
   12310:	mov	r4, #13
   12314:	mov	r3, #114	; 0x72
   12318:	b	1217c <__assert_fail@plt+0x1358>
   1231c:	ldr	r3, [sp, #44]	; 0x2c
   12320:	add	r5, r3, sl
   12324:	ldrb	r4, [r5]
   12328:	cmp	r4, #126	; 0x7e
   1232c:	ldrls	pc, [pc, r4, lsl #2]
   12330:	b	126cc <__assert_fail@plt+0x18a8>
   12334:	muleq	r1, ip, r6
   12338:	andeq	r2, r1, ip, asr #13
   1233c:	andeq	r2, r1, ip, asr #13
   12340:	andeq	r2, r1, ip, asr #13
   12344:	andeq	r2, r1, ip, asr #13
   12348:	andeq	r2, r1, ip, asr #13
   1234c:	andeq	r2, r1, ip, asr #13
   12350:	muleq	r1, r4, r6
   12354:	andeq	r2, r1, ip, lsl #13
   12358:	andeq	r2, r1, r0, lsl #13
   1235c:	andeq	r2, r1, r8, ror r6
   12360:	andeq	r2, r1, r0, ror r6
   12364:	andeq	r2, r1, r8, ror #12
   12368:	andeq	r2, r1, r0, ror #12
   1236c:	andeq	r2, r1, ip, asr #13
   12370:	andeq	r2, r1, ip, asr #13
   12374:	andeq	r2, r1, ip, asr #13
   12378:	andeq	r2, r1, ip, asr #13
   1237c:	andeq	r2, r1, ip, asr #13
   12380:	andeq	r2, r1, ip, asr #13
   12384:	andeq	r2, r1, ip, asr #13
   12388:	andeq	r2, r1, ip, asr #13
   1238c:	andeq	r2, r1, ip, asr #13
   12390:	andeq	r2, r1, ip, asr #13
   12394:	andeq	r2, r1, ip, asr #13
   12398:	andeq	r2, r1, ip, asr #13
   1239c:	andeq	r2, r1, ip, asr #13
   123a0:	andeq	r2, r1, ip, asr #13
   123a4:	andeq	r2, r1, ip, asr #13
   123a8:	andeq	r2, r1, ip, asr #13
   123ac:	andeq	r2, r1, ip, asr #13
   123b0:	andeq	r2, r1, ip, asr #13
   123b4:	andeq	r2, r1, r4, asr r6
   123b8:	andeq	r2, r1, ip, asr #12
   123bc:	andeq	r2, r1, ip, asr #12
   123c0:	andeq	r2, r1, r4, asr #12
   123c4:	andeq	r2, r1, ip, asr #12
   123c8:	andeq	r2, r1, ip, lsr r6
   123cc:	andeq	r2, r1, ip, asr #12
   123d0:			; <UNDEFINED> instruction: 0x000125b0
   123d4:	andeq	r2, r1, ip, asr #12
   123d8:	andeq	r2, r1, ip, asr #12
   123dc:	andeq	r2, r1, ip, asr #12
   123e0:	andeq	r2, r1, ip, lsr r6
   123e4:	andeq	r2, r1, ip, lsr r6
   123e8:	andeq	r2, r1, ip, lsr r6
   123ec:	andeq	r2, r1, ip, lsr r6
   123f0:	andeq	r2, r1, ip, lsr r6
   123f4:	andeq	r2, r1, ip, lsr r6
   123f8:	andeq	r2, r1, ip, lsr r6
   123fc:	andeq	r2, r1, ip, lsr r6
   12400:	andeq	r2, r1, ip, lsr r6
   12404:	andeq	r2, r1, ip, lsr r6
   12408:	andeq	r2, r1, ip, lsr r6
   1240c:	andeq	r2, r1, ip, lsr r6
   12410:	andeq	r2, r1, ip, lsr r6
   12414:	andeq	r2, r1, ip, lsr r6
   12418:	andeq	r2, r1, ip, lsr r6
   1241c:	andeq	r2, r1, ip, lsr r6
   12420:	andeq	r2, r1, ip, asr #12
   12424:	andeq	r2, r1, ip, asr #12
   12428:	andeq	r2, r1, ip, asr #12
   1242c:	andeq	r2, r1, ip, asr #12
   12430:	andeq	r2, r1, r4, lsl #11
   12434:	andeq	r2, r1, ip, asr #13
   12438:	andeq	r2, r1, ip, lsr r6
   1243c:	andeq	r2, r1, ip, lsr r6
   12440:	andeq	r2, r1, ip, lsr r6
   12444:	andeq	r2, r1, ip, lsr r6
   12448:	andeq	r2, r1, ip, lsr r6
   1244c:	andeq	r2, r1, ip, lsr r6
   12450:	andeq	r2, r1, ip, lsr r6
   12454:	andeq	r2, r1, ip, lsr r6
   12458:	andeq	r2, r1, ip, lsr r6
   1245c:	andeq	r2, r1, ip, lsr r6
   12460:	andeq	r2, r1, ip, lsr r6
   12464:	andeq	r2, r1, ip, lsr r6
   12468:	andeq	r2, r1, ip, lsr r6
   1246c:	andeq	r2, r1, ip, lsr r6
   12470:	andeq	r2, r1, ip, lsr r6
   12474:	andeq	r2, r1, ip, lsr r6
   12478:	andeq	r2, r1, ip, lsr r6
   1247c:	andeq	r2, r1, ip, lsr r6
   12480:	andeq	r2, r1, ip, lsr r6
   12484:	andeq	r2, r1, ip, lsr r6
   12488:	andeq	r2, r1, ip, lsr r6
   1248c:	andeq	r2, r1, ip, lsr r6
   12490:	andeq	r2, r1, ip, lsr r6
   12494:	andeq	r2, r1, ip, lsr r6
   12498:	andeq	r2, r1, ip, lsr r6
   1249c:	andeq	r2, r1, ip, lsr r6
   124a0:	andeq	r2, r1, ip, asr #12
   124a4:	andeq	r2, r1, r4, asr r5
   124a8:	andeq	r2, r1, ip, lsr r6
   124ac:	andeq	r2, r1, ip, asr #12
   124b0:	andeq	r2, r1, ip, lsr r6
   124b4:	andeq	r2, r1, ip, asr #12
   124b8:	andeq	r2, r1, ip, lsr r6
   124bc:	andeq	r2, r1, ip, lsr r6
   124c0:	andeq	r2, r1, ip, lsr r6
   124c4:	andeq	r2, r1, ip, lsr r6
   124c8:	andeq	r2, r1, ip, lsr r6
   124cc:	andeq	r2, r1, ip, lsr r6
   124d0:	andeq	r2, r1, ip, lsr r6
   124d4:	andeq	r2, r1, ip, lsr r6
   124d8:	andeq	r2, r1, ip, lsr r6
   124dc:	andeq	r2, r1, ip, lsr r6
   124e0:	andeq	r2, r1, ip, lsr r6
   124e4:	andeq	r2, r1, ip, lsr r6
   124e8:	andeq	r2, r1, ip, lsr r6
   124ec:	andeq	r2, r1, ip, lsr r6
   124f0:	andeq	r2, r1, ip, lsr r6
   124f4:	andeq	r2, r1, ip, lsr r6
   124f8:	andeq	r2, r1, ip, lsr r6
   124fc:	andeq	r2, r1, ip, lsr r6
   12500:	andeq	r2, r1, ip, lsr r6
   12504:	andeq	r2, r1, ip, lsr r6
   12508:	andeq	r2, r1, ip, lsr r6
   1250c:	andeq	r2, r1, ip, lsr r6
   12510:	andeq	r2, r1, ip, lsr r6
   12514:	andeq	r2, r1, ip, lsr r6
   12518:	andeq	r2, r1, ip, lsr r6
   1251c:	andeq	r2, r1, ip, lsr r6
   12520:	andeq	r2, r1, r0, lsr r5
   12524:	andeq	r2, r1, ip, asr #12
   12528:	andeq	r2, r1, r0, lsr r5
   1252c:	andeq	r2, r1, r4, asr #12
   12530:	ldr	r3, [sp, #24]
   12534:	mov	r6, #0
   12538:	cmn	r3, #1
   1253c:	bne	11ee8 <__assert_fail@plt+0x10c4>
   12540:	ldr	r3, [sp, #44]	; 0x2c
   12544:	ldrb	r3, [r3, #1]
   12548:	adds	r3, r3, #0
   1254c:	movne	r3, #1
   12550:	b	11ef0 <__assert_fail@plt+0x10cc>
   12554:	ldr	r3, [sp, #176]	; 0xb0
   12558:	mov	r6, #0
   1255c:	cmp	r3, #2
   12560:	bne	12030 <__assert_fail@plt+0x120c>
   12564:	ldr	r3, [sp, #64]	; 0x40
   12568:	cmp	r3, #0
   1256c:	bne	12da4 <__assert_fail@plt+0x1f80>
   12570:	add	sl, sl, #1
   12574:	ldr	r6, [sp, #36]	; 0x24
   12578:	str	r3, [sp, #32]
   1257c:	mov	r4, #92	; 0x5c
   12580:	b	11f3c <__assert_fail@plt+0x1118>
   12584:	ldr	r3, [sp, #176]	; 0xb0
   12588:	mov	r6, #0
   1258c:	cmp	r3, #2
   12590:	bne	12064 <__assert_fail@plt+0x1240>
   12594:	ldr	r3, [sp, #40]	; 0x28
   12598:	cmp	r3, #0
   1259c:	bne	12880 <__assert_fail@plt+0x1a5c>
   125a0:	mov	r1, r7
   125a4:	str	r3, [sp, #32]
   125a8:	mov	r4, #63	; 0x3f
   125ac:	b	11f08 <__assert_fail@plt+0x10e4>
   125b0:	ldr	r3, [sp, #176]	; 0xb0
   125b4:	mov	r6, #0
   125b8:	cmp	r3, #2
   125bc:	bne	120b4 <__assert_fail@plt+0x1290>
   125c0:	ldr	r3, [sp, #64]	; 0x40
   125c4:	cmp	r3, #0
   125c8:	bne	12da4 <__assert_fail@plt+0x1f80>
   125cc:	ldr	r2, [sp, #84]	; 0x54
   125d0:	adds	r3, fp, #0
   125d4:	movne	r3, #1
   125d8:	cmp	r2, #0
   125dc:	movne	r3, #0
   125e0:	cmp	r3, #0
   125e4:	strne	fp, [sp, #84]	; 0x54
   125e8:	movne	fp, #0
   125ec:	bne	1261c <__assert_fail@plt+0x17f8>
   125f0:	cmp	fp, r8
   125f4:	movhi	r3, #39	; 0x27
   125f8:	strbhi	r3, [r9, r8]
   125fc:	add	r3, r8, #1
   12600:	cmp	fp, r3
   12604:	movhi	r2, #92	; 0x5c
   12608:	strbhi	r2, [r9, r3]
   1260c:	add	r3, r8, #2
   12610:	cmp	fp, r3
   12614:	movhi	r2, #39	; 0x27
   12618:	strbhi	r2, [r9, r3]
   1261c:	ldr	r3, [sp, #64]	; 0x40
   12620:	add	r8, r8, #3
   12624:	mov	r1, r7
   12628:	str	r7, [sp, #32]
   1262c:	str	r7, [sp, #76]	; 0x4c
   12630:	str	r3, [sp, #36]	; 0x24
   12634:	mov	r4, #39	; 0x27
   12638:	b	11f08 <__assert_fail@plt+0x10e4>
   1263c:	mov	r6, #0
   12640:	b	120cc <__assert_fail@plt+0x12a8>
   12644:	mov	r6, #0
   12648:	b	122c0 <__assert_fail@plt+0x149c>
   1264c:	mov	r6, #0
   12650:	b	122e0 <__assert_fail@plt+0x14bc>
   12654:	str	r7, [sp, #32]
   12658:	mov	r6, #0
   1265c:	b	122e8 <__assert_fail@plt+0x14c4>
   12660:	mov	r6, #0
   12664:	b	12310 <__assert_fail@plt+0x14ec>
   12668:	mov	r6, #0
   1266c:	b	120dc <__assert_fail@plt+0x12b8>
   12670:	mov	r6, #0
   12674:	b	121a4 <__assert_fail@plt+0x1380>
   12678:	mov	r6, #0
   1267c:	b	12174 <__assert_fail@plt+0x1350>
   12680:	mov	r6, #0
   12684:	mov	r3, #116	; 0x74
   12688:	b	1217c <__assert_fail@plt+0x1358>
   1268c:	mov	r6, #0
   12690:	b	121b8 <__assert_fail@plt+0x1394>
   12694:	mov	r6, #0
   12698:	b	121cc <__assert_fail@plt+0x13a8>
   1269c:	ldr	r3, [sp, #56]	; 0x38
   126a0:	mov	r6, #0
   126a4:	cmp	r3, #0
   126a8:	bne	121ec <__assert_fail@plt+0x13c8>
   126ac:	ldr	r3, [sp, #96]	; 0x60
   126b0:	cmp	r3, #0
   126b4:	addne	sl, sl, #1
   126b8:	bne	11a60 <__assert_fail@plt+0xc3c>
   126bc:	ldr	r1, [sp, #52]	; 0x34
   126c0:	str	r3, [sp, #32]
   126c4:	mov	r4, r3
   126c8:	b	11f08 <__assert_fail@plt+0x10e4>
   126cc:	mov	r6, #0
   126d0:	ldr	r3, [sp, #80]	; 0x50
   126d4:	cmp	r3, #1
   126d8:	bne	128c8 <__assert_fail@plt+0x1aa4>
   126dc:	bl	10d4c <__ctype_b_loc@plt>
   126e0:	ldr	r2, [sp, #80]	; 0x50
   126e4:	sxth	r3, r4
   126e8:	mov	r1, r2
   126ec:	lsl	r3, r3, #1
   126f0:	ldr	r2, [r0]
   126f4:	ldrh	r3, [r2, r3]
   126f8:	and	r3, r3, #16384	; 0x4000
   126fc:	cmp	r3, #0
   12700:	movne	r3, #1
   12704:	moveq	r3, #0
   12708:	str	r3, [sp, #32]
   1270c:	moveq	r3, #1
   12710:	movne	r3, #0
   12714:	ldr	r2, [sp, #56]	; 0x38
   12718:	and	r3, r3, r2
   1271c:	ands	r3, r3, #255	; 0xff
   12720:	beq	122f4 <__assert_fail@plt+0x14d0>
   12724:	add	r1, sl, r1
   12728:	mov	r0, #0
   1272c:	ldr	r7, [sp, #40]	; 0x28
   12730:	ldr	r2, [sp, #36]	; 0x24
   12734:	ldr	lr, [sp, #52]	; 0x34
   12738:	b	127e8 <__assert_fail@plt+0x19c4>
   1273c:	cmp	r7, #0
   12740:	bne	12b3c <__assert_fail@plt+0x1d18>
   12744:	eor	r0, r2, #1
   12748:	ands	r0, lr, r0
   1274c:	beq	12784 <__assert_fail@plt+0x1960>
   12750:	cmp	fp, r8
   12754:	movhi	r2, #39	; 0x27
   12758:	strbhi	r2, [r9, r8]
   1275c:	add	r2, r8, #1
   12760:	cmp	fp, r2
   12764:	movhi	ip, #36	; 0x24
   12768:	strbhi	ip, [r9, r2]
   1276c:	add	r2, r8, #2
   12770:	cmp	fp, r2
   12774:	movhi	ip, #39	; 0x27
   12778:	strbhi	ip, [r9, r2]
   1277c:	add	r8, r8, #3
   12780:	mov	r2, r0
   12784:	cmp	fp, r8
   12788:	movhi	r0, #92	; 0x5c
   1278c:	strbhi	r0, [r9, r8]
   12790:	add	r0, r8, #1
   12794:	cmp	fp, r0
   12798:	lsrhi	ip, r4, #6
   1279c:	addhi	ip, ip, #48	; 0x30
   127a0:	strbhi	ip, [r9, r0]
   127a4:	add	ip, r8, #2
   127a8:	cmp	fp, ip
   127ac:	lsrhi	r0, r4, #3
   127b0:	andhi	r0, r0, #7
   127b4:	addhi	r0, r0, #48	; 0x30
   127b8:	add	sl, sl, #1
   127bc:	strbhi	r0, [r9, ip]
   127c0:	and	r4, r4, #7
   127c4:	cmp	sl, r1
   127c8:	add	r4, r4, #48	; 0x30
   127cc:	add	r8, r8, #3
   127d0:	bcs	12b54 <__assert_fail@plt+0x1d30>
   127d4:	mov	r0, r3
   127d8:	cmp	fp, r8
   127dc:	strbhi	r4, [r9, r8]
   127e0:	ldrb	r4, [r5, #1]!
   127e4:	add	r8, r8, #1
   127e8:	cmp	r3, #0
   127ec:	bne	1273c <__assert_fail@plt+0x1918>
   127f0:	cmp	r6, #0
   127f4:	bne	12898 <__assert_fail@plt+0x1a74>
   127f8:	eor	r6, r0, #1
   127fc:	and	r6, r6, r2
   12800:	add	sl, sl, #1
   12804:	cmp	r1, sl
   12808:	uxtb	r6, r6
   1280c:	bls	128c0 <__assert_fail@plt+0x1a9c>
   12810:	cmp	r6, #0
   12814:	beq	127d8 <__assert_fail@plt+0x19b4>
   12818:	cmp	fp, r8
   1281c:	movhi	r2, #39	; 0x27
   12820:	strbhi	r2, [r9, r8]
   12824:	add	r2, r8, #1
   12828:	cmp	fp, r2
   1282c:	movhi	ip, #39	; 0x27
   12830:	strbhi	ip, [r9, r2]
   12834:	add	r8, r8, #2
   12838:	mov	r6, r3
   1283c:	mov	r2, r3
   12840:	b	127d8 <__assert_fail@plt+0x19b4>
   12844:	ldr	r3, [sp, #184]	; 0xb8
   12848:	cmp	r3, #0
   1284c:	beq	11f24 <__assert_fail@plt+0x1100>
   12850:	lsr	r2, r4, #5
   12854:	mov	r0, r3
   12858:	uxtb	r2, r2
   1285c:	and	r3, r4, #31
   12860:	ldr	r2, [r0, r2, lsl #2]
   12864:	lsr	r3, r2, r3
   12868:	tst	r3, #1
   1286c:	beq	11f24 <__assert_fail@plt+0x1100>
   12870:	ldr	r3, [sp, #40]	; 0x28
   12874:	cmp	r3, #0
   12878:	beq	12110 <__assert_fail@plt+0x12ec>
   1287c:	mov	r3, r1
   12880:	str	r3, [sp, #64]	; 0x40
   12884:	mov	sl, r9
   12888:	ldr	r3, [sp, #56]	; 0x38
   1288c:	mov	r9, fp
   12890:	ldr	r2, [sp, #64]	; 0x40
   12894:	b	12a84 <__assert_fail@plt+0x1c60>
   12898:	cmp	fp, r8
   1289c:	eor	r6, r0, #1
   128a0:	movhi	ip, #92	; 0x5c
   128a4:	and	r6, r6, r2
   128a8:	add	sl, sl, #1
   128ac:	strbhi	ip, [r9, r8]
   128b0:	cmp	r1, sl
   128b4:	add	r8, r8, #1
   128b8:	uxtb	r6, r6
   128bc:	bhi	12810 <__assert_fail@plt+0x19ec>
   128c0:	str	r2, [sp, #36]	; 0x24
   128c4:	b	11f3c <__assert_fail@plt+0x1118>
   128c8:	ldr	r3, [sp, #24]
   128cc:	cmn	r3, #1
   128d0:	mov	r3, #0
   128d4:	str	r3, [sp, #128]	; 0x80
   128d8:	str	r3, [sp, #132]	; 0x84
   128dc:	beq	12bd0 <__assert_fail@plt+0x1dac>
   128e0:	mov	r2, r7
   128e4:	mov	r3, #0
   128e8:	str	r7, [sp, #104]	; 0x68
   128ec:	str	r5, [sp, #116]	; 0x74
   128f0:	mov	r7, r3
   128f4:	mov	r5, r2
   128f8:	str	r4, [sp, #32]
   128fc:	str	r6, [sp, #108]	; 0x6c
   12900:	str	r8, [sp, #112]	; 0x70
   12904:	ldr	r3, [sp, #44]	; 0x2c
   12908:	add	r6, sl, r7
   1290c:	add	r4, r3, r6
   12910:	ldr	r3, [sp, #24]
   12914:	mov	r1, r4
   12918:	sub	r2, r3, r6
   1291c:	add	r0, sp, #124	; 0x7c
   12920:	add	r3, sp, #128	; 0x80
   12924:	bl	174c8 <__assert_fail@plt+0x66a4>
   12928:	subs	r8, r0, #0
   1292c:	beq	12cb4 <__assert_fail@plt+0x1e90>
   12930:	cmn	r8, #1
   12934:	beq	12c8c <__assert_fail@plt+0x1e68>
   12938:	cmn	r8, #2
   1293c:	beq	12c24 <__assert_fail@plt+0x1e00>
   12940:	ldr	r3, [sp, #64]	; 0x40
   12944:	cmp	r3, #0
   12948:	beq	12a08 <__assert_fail@plt+0x1be4>
   1294c:	cmp	r8, #1
   12950:	beq	12a08 <__assert_fail@plt+0x1be4>
   12954:	sub	r3, r8, #1
   12958:	add	r6, r3, r6
   1295c:	ldr	r3, [sp, #44]	; 0x2c
   12960:	add	r6, r3, r6
   12964:	ldrb	r3, [r4, #1]!
   12968:	sub	r3, r3, #91	; 0x5b
   1296c:	cmp	r3, #33	; 0x21
   12970:	ldrls	pc, [pc, r3, lsl #2]
   12974:	b	12a00 <__assert_fail@plt+0x1bdc>
   12978:	andeq	r2, r1, ip, ror #20
   1297c:	andeq	r2, r1, ip, ror #20
   12980:	andeq	r2, r1, r0, lsl #20
   12984:	andeq	r2, r1, ip, ror #20
   12988:	andeq	r2, r1, r0, lsl #20
   1298c:	andeq	r2, r1, ip, ror #20
   12990:	andeq	r2, r1, r0, lsl #20
   12994:	andeq	r2, r1, r0, lsl #20
   12998:	andeq	r2, r1, r0, lsl #20
   1299c:	andeq	r2, r1, r0, lsl #20
   129a0:	andeq	r2, r1, r0, lsl #20
   129a4:	andeq	r2, r1, r0, lsl #20
   129a8:	andeq	r2, r1, r0, lsl #20
   129ac:	andeq	r2, r1, r0, lsl #20
   129b0:	andeq	r2, r1, r0, lsl #20
   129b4:	andeq	r2, r1, r0, lsl #20
   129b8:	andeq	r2, r1, r0, lsl #20
   129bc:	andeq	r2, r1, r0, lsl #20
   129c0:	andeq	r2, r1, r0, lsl #20
   129c4:	andeq	r2, r1, r0, lsl #20
   129c8:	andeq	r2, r1, r0, lsl #20
   129cc:	andeq	r2, r1, r0, lsl #20
   129d0:	andeq	r2, r1, r0, lsl #20
   129d4:	andeq	r2, r1, r0, lsl #20
   129d8:	andeq	r2, r1, r0, lsl #20
   129dc:	andeq	r2, r1, r0, lsl #20
   129e0:	andeq	r2, r1, r0, lsl #20
   129e4:	andeq	r2, r1, r0, lsl #20
   129e8:	andeq	r2, r1, r0, lsl #20
   129ec:	andeq	r2, r1, r0, lsl #20
   129f0:	andeq	r2, r1, r0, lsl #20
   129f4:	andeq	r2, r1, r0, lsl #20
   129f8:	andeq	r2, r1, r0, lsl #20
   129fc:	andeq	r2, r1, ip, ror #20
   12a00:	cmp	r6, r4
   12a04:	bne	12964 <__assert_fail@plt+0x1b40>
   12a08:	ldr	r0, [sp, #124]	; 0x7c
   12a0c:	bl	10cb0 <iswprint@plt>
   12a10:	add	r7, r7, r8
   12a14:	cmp	r0, #0
   12a18:	add	r0, sp, #128	; 0x80
   12a1c:	moveq	r5, #0
   12a20:	bl	10c5c <mbsinit@plt>
   12a24:	cmp	r0, #0
   12a28:	beq	12904 <__assert_fail@plt+0x1ae0>
   12a2c:	ldr	r4, [sp, #32]
   12a30:	str	r5, [sp, #32]
   12a34:	ldr	r3, [sp, #32]
   12a38:	mov	r1, r7
   12a3c:	eor	r3, r3, #1
   12a40:	ldr	r7, [sp, #104]	; 0x68
   12a44:	ldr	r6, [sp, #108]	; 0x6c
   12a48:	ldr	r8, [sp, #112]	; 0x70
   12a4c:	ldr	r5, [sp, #116]	; 0x74
   12a50:	uxtb	r3, r3
   12a54:	cmp	r1, #1
   12a58:	bls	12714 <__assert_fail@plt+0x18f0>
   12a5c:	ldr	r2, [sp, #56]	; 0x38
   12a60:	and	r3, r3, r2
   12a64:	uxtb	r3, r3
   12a68:	b	12724 <__assert_fail@plt+0x1900>
   12a6c:	mov	r3, #2
   12a70:	str	r3, [sp, #176]	; 0xb0
   12a74:	ldr	r2, [sp, #64]	; 0x40
   12a78:	ldr	r3, [sp, #56]	; 0x38
   12a7c:	mov	sl, r9
   12a80:	mov	r9, fp
   12a84:	and	r3, r3, r2
   12a88:	tst	r3, #255	; 0xff
   12a8c:	ldr	r3, [sp, #176]	; 0xb0
   12a90:	movne	r3, #4
   12a94:	str	r3, [sp, #176]	; 0xb0
   12a98:	ldr	r3, [sp, #180]	; 0xb4
   12a9c:	mov	ip, #0
   12aa0:	bic	r3, r3, #2
   12aa4:	str	r3, [sp, #4]
   12aa8:	ldr	r3, [sp, #192]	; 0xc0
   12aac:	ldr	r2, [sp, #44]	; 0x2c
   12ab0:	str	r3, [sp, #16]
   12ab4:	ldr	r3, [sp, #188]	; 0xbc
   12ab8:	mov	r1, r9
   12abc:	str	r3, [sp, #12]
   12ac0:	ldr	r3, [sp, #176]	; 0xb0
   12ac4:	mov	r0, sl
   12ac8:	str	r3, [sp]
   12acc:	str	ip, [sp, #8]
   12ad0:	ldr	r3, [sp, #24]
   12ad4:	bl	11934 <__assert_fail@plt+0xb10>
   12ad8:	mov	fp, r0
   12adc:	mov	r0, fp
   12ae0:	add	sp, sp, #140	; 0x8c
   12ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae8:	mov	r4, #92	; 0x5c
   12aec:	mov	r1, #0
   12af0:	mov	r3, r4
   12af4:	b	120e8 <__assert_fail@plt+0x12c4>
   12af8:	mov	r3, #0
   12afc:	ldr	r1, [sp, #52]	; 0x34
   12b00:	str	r3, [sp, #32]
   12b04:	mov	r4, #63	; 0x3f
   12b08:	b	11f08 <__assert_fail@plt+0x10e4>
   12b0c:	cmp	fp, #0
   12b10:	beq	12b6c <__assert_fail@plt+0x1d48>
   12b14:	mov	r3, #39	; 0x27
   12b18:	strb	r3, [r9]
   12b1c:	mov	r3, #0
   12b20:	str	r3, [sp, #40]	; 0x28
   12b24:	mov	r3, #1
   12b28:	str	r3, [sp, #68]	; 0x44
   12b2c:	ldr	r3, [pc, #448]	; 12cf4 <__assert_fail@plt+0x1ed0>
   12b30:	mov	r8, #1
   12b34:	str	r3, [sp, #72]	; 0x48
   12b38:	b	11d1c <__assert_fail@plt+0xef8>
   12b3c:	ldr	r3, [sp, #40]	; 0x28
   12b40:	mov	sl, r9
   12b44:	str	r3, [sp, #56]	; 0x38
   12b48:	mov	r9, fp
   12b4c:	ldr	r2, [sp, #64]	; 0x40
   12b50:	b	12a84 <__assert_fail@plt+0x1c60>
   12b54:	str	r2, [sp, #36]	; 0x24
   12b58:	b	11f6c <__assert_fail@plt+0x1148>
   12b5c:	mov	r1, #0
   12b60:	str	r3, [sp, #32]
   12b64:	mov	r4, #63	; 0x3f
   12b68:	b	11f08 <__assert_fail@plt+0x10e4>
   12b6c:	ldr	r3, [pc, #384]	; 12cf4 <__assert_fail@plt+0x1ed0>
   12b70:	str	r3, [sp, #72]	; 0x48
   12b74:	mov	r3, #0
   12b78:	str	r3, [sp, #40]	; 0x28
   12b7c:	mov	r3, #1
   12b80:	str	r3, [sp, #68]	; 0x44
   12b84:	mov	r8, r3
   12b88:	b	11d1c <__assert_fail@plt+0xef8>
   12b8c:	bl	10e18 <abort@plt>
   12b90:	cmp	fp, #0
   12b94:	beq	12bf4 <__assert_fail@plt+0x1dd0>
   12b98:	mov	r2, #1
   12b9c:	mov	r3, #34	; 0x22
   12ba0:	strb	r3, [r9]
   12ba4:	mov	r8, r2
   12ba8:	mov	r3, r2
   12bac:	str	r2, [sp, #68]	; 0x44
   12bb0:	str	r3, [sp, #56]	; 0x38
   12bb4:	ldr	r3, [pc, #316]	; 12cf8 <__assert_fail@plt+0x1ed4>
   12bb8:	ldr	r1, [sp, #56]	; 0x38
   12bbc:	str	r3, [sp, #72]	; 0x48
   12bc0:	ldr	r2, [sp, #176]	; 0xb0
   12bc4:	ldr	ip, [sp, #40]	; 0x28
   12bc8:	ldr	lr, [sp, #176]	; 0xb0
   12bcc:	b	11a00 <__assert_fail@plt+0xbdc>
   12bd0:	ldr	r0, [sp, #44]	; 0x2c
   12bd4:	bl	10d64 <strlen@plt>
   12bd8:	str	r0, [sp, #24]
   12bdc:	b	128e0 <__assert_fail@plt+0x1abc>
   12be0:	mov	r7, #0
   12be4:	ldr	r1, [sp, #52]	; 0x34
   12be8:	str	r3, [sp, #32]
   12bec:	mov	r4, #48	; 0x30
   12bf0:	b	11f08 <__assert_fail@plt+0x10e4>
   12bf4:	mov	r3, #1
   12bf8:	str	r3, [sp, #68]	; 0x44
   12bfc:	mov	r8, r3
   12c00:	b	12bb0 <__assert_fail@plt+0x1d8c>
   12c04:	mov	r3, #2
   12c08:	mov	sl, r9
   12c0c:	str	r3, [sp, #176]	; 0xb0
   12c10:	mov	r9, fp
   12c14:	ldr	r3, [sp, #56]	; 0x38
   12c18:	b	12a84 <__assert_fail@plt+0x1c60>
   12c1c:	ldr	r6, [sp, #48]	; 0x30
   12c20:	b	126d0 <__assert_fail@plt+0x18ac>
   12c24:	ldr	r0, [sp, #24]
   12c28:	mov	ip, r6
   12c2c:	cmp	r0, ip
   12c30:	mov	r1, r7
   12c34:	mov	r2, r4
   12c38:	ldr	r7, [sp, #104]	; 0x68
   12c3c:	ldr	r4, [sp, #32]
   12c40:	ldr	r6, [sp, #108]	; 0x6c
   12c44:	ldr	r8, [sp, #112]	; 0x70
   12c48:	ldr	r5, [sp, #116]	; 0x74
   12c4c:	bls	12c7c <__assert_fail@plt+0x1e58>
   12c50:	ldrb	r3, [r2]
   12c54:	cmp	r3, #0
   12c58:	bne	12c6c <__assert_fail@plt+0x1e48>
   12c5c:	b	12d8c <__assert_fail@plt+0x1f68>
   12c60:	ldrb	r3, [r2, #1]!
   12c64:	cmp	r3, #0
   12c68:	beq	12d8c <__assert_fail@plt+0x1f68>
   12c6c:	add	r1, r1, #1
   12c70:	add	r3, sl, r1
   12c74:	cmp	r0, r3
   12c78:	bhi	12c60 <__assert_fail@plt+0x1e3c>
   12c7c:	mov	r2, #0
   12c80:	mov	r3, r7
   12c84:	str	r2, [sp, #32]
   12c88:	b	12a54 <__assert_fail@plt+0x1c30>
   12c8c:	mov	r1, r7
   12c90:	ldr	r7, [sp, #104]	; 0x68
   12c94:	mov	r2, #0
   12c98:	ldr	r4, [sp, #32]
   12c9c:	ldr	r6, [sp, #108]	; 0x6c
   12ca0:	ldr	r8, [sp, #112]	; 0x70
   12ca4:	ldr	r5, [sp, #116]	; 0x74
   12ca8:	mov	r3, r7
   12cac:	str	r2, [sp, #32]
   12cb0:	b	12a54 <__assert_fail@plt+0x1c30>
   12cb4:	mov	r3, r5
   12cb8:	eor	r3, r3, #1
   12cbc:	ldr	r4, [sp, #32]
   12cc0:	mov	r1, r7
   12cc4:	str	r5, [sp, #32]
   12cc8:	ldr	r7, [sp, #104]	; 0x68
   12ccc:	ldr	r6, [sp, #108]	; 0x6c
   12cd0:	ldr	r8, [sp, #112]	; 0x70
   12cd4:	ldr	r5, [sp, #116]	; 0x74
   12cd8:	uxtb	r3, r3
   12cdc:	b	12a54 <__assert_fail@plt+0x1c30>
   12ce0:	mov	sl, r9
   12ce4:	str	r3, [sp, #56]	; 0x38
   12ce8:	mov	r9, fp
   12cec:	ldr	r2, [sp, #64]	; 0x40
   12cf0:	b	12a84 <__assert_fail@plt+0x1c60>
   12cf4:	andeq	r8, r1, ip, ror r1
   12cf8:	andeq	r8, r1, r8, ror r1
   12cfc:	andeq	r8, r1, r0, lsl #3
   12d00:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12d04:	ldr	r2, [sp, #44]	; 0x2c
   12d08:	ldrb	r1, [r2, r3]
   12d0c:	sub	r2, r1, #33	; 0x21
   12d10:	uxtb	r2, r2
   12d14:	cmp	r2, #29
   12d18:	bhi	12d98 <__assert_fail@plt+0x1f74>
   12d1c:	ldr	r0, [pc, #-36]	; 12d00 <__assert_fail@plt+0x1edc>
   12d20:	mov	ip, #1
   12d24:	ands	r2, r0, ip, lsl r2
   12d28:	beq	12db8 <__assert_fail@plt+0x1f94>
   12d2c:	ldr	r2, [sp, #40]	; 0x28
   12d30:	cmp	r2, #0
   12d34:	bne	12eac <__assert_fail@plt+0x2088>
   12d38:	add	r2, r8, #1
   12d3c:	cmp	fp, r8
   12d40:	strbhi	r4, [r9, r8]
   12d44:	cmp	fp, r2
   12d48:	movhi	r0, #34	; 0x22
   12d4c:	strbhi	r0, [r9, r2]
   12d50:	add	r2, r8, #2
   12d54:	cmp	fp, r2
   12d58:	movhi	r0, #34	; 0x22
   12d5c:	strbhi	r0, [r9, r2]
   12d60:	add	r2, r8, #3
   12d64:	cmp	fp, r2
   12d68:	mov	sl, r3
   12d6c:	ldr	r3, [sp, #40]	; 0x28
   12d70:	movhi	r0, #63	; 0x3f
   12d74:	mov	r4, r1
   12d78:	strbhi	r0, [r9, r2]
   12d7c:	add	r8, r8, #4
   12d80:	mov	r1, r3
   12d84:	str	r3, [sp, #32]
   12d88:	b	11f08 <__assert_fail@plt+0x10e4>
   12d8c:	str	r3, [sp, #32]
   12d90:	mov	r3, r7
   12d94:	b	12a54 <__assert_fail@plt+0x1c30>
   12d98:	mov	r1, #0
   12d9c:	str	r1, [sp, #32]
   12da0:	b	11f08 <__assert_fail@plt+0x10e4>
   12da4:	mov	sl, r9
   12da8:	ldr	r3, [sp, #56]	; 0x38
   12dac:	mov	r9, fp
   12db0:	ldr	r2, [sp, #64]	; 0x40
   12db4:	b	12a84 <__assert_fail@plt+0x1c60>
   12db8:	str	r2, [sp, #32]
   12dbc:	mov	r1, #0
   12dc0:	b	11f08 <__assert_fail@plt+0x10e4>
   12dc4:	ldr	r2, [sp, #76]	; 0x4c
   12dc8:	mov	sl, r9
   12dcc:	mov	r9, fp
   12dd0:	mov	fp, r8
   12dd4:	ldr	r1, [sp, #72]	; 0x48
   12dd8:	cmp	r1, #0
   12ddc:	moveq	r3, #0
   12de0:	andne	r3, r2, #1
   12de4:	cmp	r3, #0
   12de8:	beq	12e14 <__assert_fail@plt+0x1ff0>
   12dec:	ldrb	r3, [r1]
   12df0:	cmp	r3, #0
   12df4:	beq	12e14 <__assert_fail@plt+0x1ff0>
   12df8:	mov	r2, r1
   12dfc:	cmp	r9, fp
   12e00:	strbhi	r3, [sl, fp]
   12e04:	ldrb	r3, [r2, #1]!
   12e08:	add	fp, fp, #1
   12e0c:	cmp	r3, #0
   12e10:	bne	12dfc <__assert_fail@plt+0x1fd8>
   12e14:	cmp	r9, fp
   12e18:	movhi	r3, #0
   12e1c:	strbhi	r3, [sl, fp]
   12e20:	b	12adc <__assert_fail@plt+0x1cb8>
   12e24:	ldr	r3, [sp, #192]	; 0xc0
   12e28:	mov	ip, #5
   12e2c:	str	r3, [sp, #16]
   12e30:	ldr	r3, [sp, #188]	; 0xbc
   12e34:	ldr	r2, [sp, #44]	; 0x2c
   12e38:	str	r3, [sp, #12]
   12e3c:	ldr	r3, [sp, #184]	; 0xb8
   12e40:	ldr	r1, [sp, #84]	; 0x54
   12e44:	str	r3, [sp, #8]
   12e48:	ldr	r3, [sp, #180]	; 0xb4
   12e4c:	mov	r0, r9
   12e50:	str	r3, [sp, #4]
   12e54:	str	ip, [sp]
   12e58:	ldr	r3, [sp, #24]
   12e5c:	bl	11934 <__assert_fail@plt+0xb10>
   12e60:	mov	fp, r0
   12e64:	b	12adc <__assert_fail@plt+0x1cb8>
   12e68:	mov	sl, r9
   12e6c:	mov	r9, fp
   12e70:	mov	fp, r8
   12e74:	b	12dd4 <__assert_fail@plt+0x1fb0>
   12e78:	ldr	r1, [sp, #176]	; 0xb0
   12e7c:	bl	11814 <__assert_fail@plt+0x9f0>
   12e80:	str	r0, [sp, #192]	; 0xc0
   12e84:	b	11df0 <__assert_fail@plt+0xfcc>
   12e88:	ldr	r1, [sp, #176]	; 0xb0
   12e8c:	bl	11814 <__assert_fail@plt+0x9f0>
   12e90:	str	r0, [sp, #188]	; 0xbc
   12e94:	b	11dd0 <__assert_fail@plt+0xfac>
   12e98:	mov	sl, r9
   12e9c:	mov	r2, r3
   12ea0:	mov	r9, fp
   12ea4:	mov	fp, r8
   12ea8:	b	12dd4 <__assert_fail@plt+0x1fb0>
   12eac:	mov	sl, r9
   12eb0:	mov	r9, fp
   12eb4:	b	12a98 <__assert_fail@plt+0x1c74>
   12eb8:	push	{r4, r5, r6, lr}
   12ebc:	mov	r5, r0
   12ec0:	bl	10d7c <__errno_location@plt>
   12ec4:	cmp	r5, #0
   12ec8:	mov	r1, #48	; 0x30
   12ecc:	mov	r4, r0
   12ed0:	ldr	r0, [pc, #16]	; 12ee8 <__assert_fail@plt+0x20c4>
   12ed4:	ldr	r6, [r4]
   12ed8:	movne	r0, r5
   12edc:	bl	16754 <__assert_fail@plt+0x5930>
   12ee0:	str	r6, [r4]
   12ee4:	pop	{r4, r5, r6, pc}
   12ee8:	andeq	r9, r2, r4, asr r1
   12eec:	ldr	r3, [pc, #12]	; 12f00 <__assert_fail@plt+0x20dc>
   12ef0:	cmp	r0, #0
   12ef4:	moveq	r0, r3
   12ef8:	ldr	r0, [r0]
   12efc:	bx	lr
   12f00:	andeq	r9, r2, r4, asr r1
   12f04:	ldr	r3, [pc, #12]	; 12f18 <__assert_fail@plt+0x20f4>
   12f08:	cmp	r0, #0
   12f0c:	moveq	r0, r3
   12f10:	str	r1, [r0]
   12f14:	bx	lr
   12f18:	andeq	r9, r2, r4, asr r1
   12f1c:	ldr	r3, [pc, #52]	; 12f58 <__assert_fail@plt+0x2134>
   12f20:	cmp	r0, #0
   12f24:	moveq	r0, r3
   12f28:	add	r3, r0, #8
   12f2c:	push	{lr}		; (str lr, [sp, #-4]!)
   12f30:	lsr	lr, r1, #5
   12f34:	and	r1, r1, #31
   12f38:	ldr	ip, [r3, lr, lsl #2]
   12f3c:	lsr	r0, ip, r1
   12f40:	eor	r2, r2, r0
   12f44:	and	r2, r2, #1
   12f48:	and	r0, r0, #1
   12f4c:	eor	r1, ip, r2, lsl r1
   12f50:	str	r1, [r3, lr, lsl #2]
   12f54:	pop	{pc}		; (ldr pc, [sp], #4)
   12f58:	andeq	r9, r2, r4, asr r1
   12f5c:	ldr	r3, [pc, #16]	; 12f74 <__assert_fail@plt+0x2150>
   12f60:	cmp	r0, #0
   12f64:	movne	r3, r0
   12f68:	ldr	r0, [r3, #4]
   12f6c:	str	r1, [r3, #4]
   12f70:	bx	lr
   12f74:	andeq	r9, r2, r4, asr r1
   12f78:	ldr	r3, [pc, #44]	; 12fac <__assert_fail@plt+0x2188>
   12f7c:	cmp	r0, #0
   12f80:	moveq	r0, r3
   12f84:	mov	ip, #10
   12f88:	cmp	r2, #0
   12f8c:	cmpne	r1, #0
   12f90:	str	ip, [r0]
   12f94:	beq	12fa4 <__assert_fail@plt+0x2180>
   12f98:	str	r1, [r0, #40]	; 0x28
   12f9c:	str	r2, [r0, #44]	; 0x2c
   12fa0:	bx	lr
   12fa4:	push	{r4, lr}
   12fa8:	bl	10e18 <abort@plt>
   12fac:	andeq	r9, r2, r4, asr r1
   12fb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fb4:	sub	sp, sp, #24
   12fb8:	ldr	ip, [pc, #108]	; 1302c <__assert_fail@plt+0x2208>
   12fbc:	ldr	r4, [sp, #56]	; 0x38
   12fc0:	mov	r9, r2
   12fc4:	cmp	r4, #0
   12fc8:	moveq	r4, ip
   12fcc:	mov	sl, r3
   12fd0:	mov	r7, r0
   12fd4:	mov	r8, r1
   12fd8:	bl	10d7c <__errno_location@plt>
   12fdc:	ldr	r3, [r4, #44]	; 0x2c
   12fe0:	mov	r1, r8
   12fe4:	ldr	r6, [r0]
   12fe8:	str	r3, [sp, #16]
   12fec:	ldr	r2, [r4, #40]	; 0x28
   12ff0:	add	r3, r4, #8
   12ff4:	str	r3, [sp, #8]
   12ff8:	str	r2, [sp, #12]
   12ffc:	ldr	r2, [r4, #4]
   13000:	mov	r5, r0
   13004:	str	r2, [sp, #4]
   13008:	ldr	ip, [r4]
   1300c:	mov	r3, sl
   13010:	mov	r2, r9
   13014:	mov	r0, r7
   13018:	str	ip, [sp]
   1301c:	bl	11934 <__assert_fail@plt+0xb10>
   13020:	str	r6, [r5]
   13024:	add	sp, sp, #24
   13028:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1302c:	andeq	r9, r2, r4, asr r1
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13034:	cmp	r2, #0
   13038:	sub	sp, sp, #36	; 0x24
   1303c:	ldr	r4, [pc, #164]	; 130e8 <__assert_fail@plt+0x22c4>
   13040:	mov	r8, r1
   13044:	movne	r4, r2
   13048:	mov	r7, r0
   1304c:	bl	10d7c <__errno_location@plt>
   13050:	ldr	r3, [r4, #44]	; 0x2c
   13054:	ldr	r5, [r4, #4]
   13058:	add	r9, r4, #8
   1305c:	orr	r5, r5, #1
   13060:	mov	r1, #0
   13064:	mov	r2, r7
   13068:	ldr	fp, [r0]
   1306c:	str	r3, [sp, #16]
   13070:	ldr	r3, [r4, #40]	; 0x28
   13074:	stmib	sp, {r5, r9}
   13078:	str	r3, [sp, #12]
   1307c:	ldr	r3, [r4]
   13080:	mov	r6, r0
   13084:	str	r3, [sp]
   13088:	mov	r0, r1
   1308c:	mov	r3, r8
   13090:	bl	11934 <__assert_fail@plt+0xb10>
   13094:	add	r1, r0, #1
   13098:	mov	r0, r1
   1309c:	str	r1, [sp, #28]
   130a0:	bl	16210 <__assert_fail@plt+0x53ec>
   130a4:	ldr	r3, [r4, #44]	; 0x2c
   130a8:	ldr	r1, [sp, #28]
   130ac:	str	r3, [sp, #16]
   130b0:	ldr	r3, [r4, #40]	; 0x28
   130b4:	str	r5, [sp, #4]
   130b8:	str	r3, [sp, #12]
   130bc:	str	r9, [sp, #8]
   130c0:	ldr	ip, [r4]
   130c4:	mov	r3, r8
   130c8:	mov	r2, r7
   130cc:	str	ip, [sp]
   130d0:	mov	sl, r0
   130d4:	bl	11934 <__assert_fail@plt+0xb10>
   130d8:	mov	r0, sl
   130dc:	str	fp, [r6]
   130e0:	add	sp, sp, #36	; 0x24
   130e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130e8:	andeq	r9, r2, r4, asr r1
   130ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f0:	cmp	r3, #0
   130f4:	sub	sp, sp, #44	; 0x2c
   130f8:	ldr	r4, [pc, #192]	; 131c0 <__assert_fail@plt+0x239c>
   130fc:	mov	r6, r2
   13100:	movne	r4, r3
   13104:	mov	r9, r1
   13108:	mov	r8, r0
   1310c:	bl	10d7c <__errno_location@plt>
   13110:	ldr	r3, [r4, #44]	; 0x2c
   13114:	ldr	r5, [r4, #4]
   13118:	add	sl, r4, #8
   1311c:	cmp	r6, #0
   13120:	orreq	r5, r5, #1
   13124:	mov	r1, #0
   13128:	ldr	r2, [r0]
   1312c:	str	r3, [sp, #16]
   13130:	ldr	r3, [r4, #40]	; 0x28
   13134:	stmib	sp, {r5, sl}
   13138:	str	r3, [sp, #12]
   1313c:	ldr	r3, [r4]
   13140:	mov	r7, r0
   13144:	str	r2, [sp, #28]
   13148:	str	r3, [sp]
   1314c:	mov	r2, r8
   13150:	mov	r3, r9
   13154:	mov	r0, r1
   13158:	bl	11934 <__assert_fail@plt+0xb10>
   1315c:	add	r1, r0, #1
   13160:	mov	fp, r0
   13164:	mov	r0, r1
   13168:	str	r1, [sp, #36]	; 0x24
   1316c:	bl	16210 <__assert_fail@plt+0x53ec>
   13170:	ldr	r3, [r4, #44]	; 0x2c
   13174:	mov	r2, r8
   13178:	str	r3, [sp, #16]
   1317c:	ldr	r3, [r4, #40]	; 0x28
   13180:	str	r5, [sp, #4]
   13184:	str	r3, [sp, #12]
   13188:	str	sl, [sp, #8]
   1318c:	ldr	ip, [r4]
   13190:	ldr	r1, [sp, #36]	; 0x24
   13194:	mov	r3, r9
   13198:	str	ip, [sp]
   1319c:	str	r0, [sp, #32]
   131a0:	bl	11934 <__assert_fail@plt+0xb10>
   131a4:	ldr	r2, [sp, #28]
   131a8:	cmp	r6, #0
   131ac:	str	r2, [r7]
   131b0:	ldr	r0, [sp, #32]
   131b4:	strne	fp, [r6]
   131b8:	add	sp, sp, #44	; 0x2c
   131bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c0:	andeq	r9, r2, r4, asr r1
   131c4:	push	{r4, r5, r6, r7, r8, lr}
   131c8:	ldr	r6, [pc, #116]	; 13244 <__assert_fail@plt+0x2420>
   131cc:	ldr	r3, [r6, #4]
   131d0:	ldr	r7, [r6]
   131d4:	cmp	r3, #1
   131d8:	movgt	r5, r7
   131dc:	movgt	r4, #1
   131e0:	ble	13200 <__assert_fail@plt+0x23dc>
   131e4:	ldr	r0, [r5, #12]
   131e8:	bl	1739c <__assert_fail@plt+0x6578>
   131ec:	ldr	r3, [r6, #4]
   131f0:	add	r4, r4, #1
   131f4:	cmp	r3, r4
   131f8:	add	r5, r5, #8
   131fc:	bgt	131e4 <__assert_fail@plt+0x23c0>
   13200:	ldr	r0, [r7, #4]
   13204:	ldr	r4, [pc, #60]	; 13248 <__assert_fail@plt+0x2424>
   13208:	cmp	r0, r4
   1320c:	beq	13220 <__assert_fail@plt+0x23fc>
   13210:	bl	1739c <__assert_fail@plt+0x6578>
   13214:	mov	r3, #256	; 0x100
   13218:	str	r4, [r6, #12]
   1321c:	str	r3, [r6, #8]
   13220:	ldr	r4, [pc, #36]	; 1324c <__assert_fail@plt+0x2428>
   13224:	cmp	r7, r4
   13228:	beq	13238 <__assert_fail@plt+0x2414>
   1322c:	mov	r0, r7
   13230:	bl	1739c <__assert_fail@plt+0x6578>
   13234:	str	r4, [r6]
   13238:	mov	r3, #1
   1323c:	str	r3, [r6, #4]
   13240:	pop	{r4, r5, r6, r7, r8, pc}
   13244:	andeq	r9, r2, r4, ror #1
   13248:	andeq	r9, r2, r4, lsl #3
   1324c:	andeq	r9, r2, ip, ror #1
   13250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13254:	sub	sp, sp, #44	; 0x2c
   13258:	mov	r5, r0
   1325c:	mov	sl, r1
   13260:	bl	10d7c <__errno_location@plt>
   13264:	ldr	r4, [pc, #400]	; 133fc <__assert_fail@plt+0x25d8>
   13268:	cmn	r5, #-2147483647	; 0x80000001
   1326c:	ldr	r6, [r4]
   13270:	mov	r8, r0
   13274:	movne	r0, #0
   13278:	moveq	r0, #1
   1327c:	ldr	r3, [r8]
   13280:	orrs	r0, r0, r5, lsr #31
   13284:	str	r3, [sp, #24]
   13288:	bne	133f8 <__assert_fail@plt+0x25d4>
   1328c:	ldr	r2, [r4, #4]
   13290:	cmp	r5, r2
   13294:	blt	132f4 <__assert_fail@plt+0x24d0>
   13298:	add	r7, r4, #8
   1329c:	cmp	r6, r7
   132a0:	str	r2, [sp, #36]	; 0x24
   132a4:	beq	133c8 <__assert_fail@plt+0x25a4>
   132a8:	mov	r3, #8
   132ac:	sub	r2, r5, r2
   132b0:	mov	r0, r6
   132b4:	str	r3, [sp]
   132b8:	add	r2, r2, #1
   132bc:	mvn	r3, #-2147483648	; 0x80000000
   132c0:	add	r1, sp, #36	; 0x24
   132c4:	bl	1642c <__assert_fail@plt+0x5608>
   132c8:	mov	r6, r0
   132cc:	str	r0, [r4]
   132d0:	ldr	r0, [r4, #4]
   132d4:	ldr	r2, [sp, #36]	; 0x24
   132d8:	mov	r1, #0
   132dc:	sub	r2, r2, r0
   132e0:	add	r0, r6, r0, lsl #3
   132e4:	lsl	r2, r2, #3
   132e8:	bl	10d94 <memset@plt>
   132ec:	ldr	r3, [sp, #36]	; 0x24
   132f0:	str	r3, [r4, #4]
   132f4:	ldr	r4, [pc, #260]	; 13400 <__assert_fail@plt+0x25dc>
   132f8:	add	fp, r6, r5, lsl #3
   132fc:	ldr	r9, [r6, r5, lsl #3]
   13300:	ldr	r0, [r4, #4]
   13304:	ldr	r3, [r4]
   13308:	ldr	r7, [fp, #4]
   1330c:	ldr	r1, [r4, #44]	; 0x2c
   13310:	ldr	r2, [r4, #40]	; 0x28
   13314:	orr	r0, r0, #1
   13318:	str	r3, [sp]
   1331c:	add	r3, r4, #8
   13320:	str	r0, [sp, #28]
   13324:	str	r0, [sp, #4]
   13328:	str	r1, [sp, #16]
   1332c:	str	r2, [sp, #12]
   13330:	str	r3, [sp, #8]
   13334:	mov	r0, r7
   13338:	mov	r1, r9
   1333c:	mvn	r3, #0
   13340:	mov	r2, sl
   13344:	bl	11934 <__assert_fail@plt+0xb10>
   13348:	cmp	r9, r0
   1334c:	bhi	133b4 <__assert_fail@plt+0x2590>
   13350:	add	r3, r4, #48	; 0x30
   13354:	add	r9, r0, #1
   13358:	cmp	r7, r3
   1335c:	str	r9, [r6, r5, lsl #3]
   13360:	beq	1336c <__assert_fail@plt+0x2548>
   13364:	mov	r0, r7
   13368:	bl	1739c <__assert_fail@plt+0x6578>
   1336c:	mov	r0, r9
   13370:	bl	16210 <__assert_fail@plt+0x53ec>
   13374:	ldr	ip, [r4, #44]	; 0x2c
   13378:	ldr	r3, [r4]
   1337c:	ldr	lr, [r4, #40]	; 0x28
   13380:	ldr	r4, [pc, #124]	; 13404 <__assert_fail@plt+0x25e0>
   13384:	mov	r2, sl
   13388:	mov	r1, r9
   1338c:	str	r0, [fp, #4]
   13390:	str	r4, [sp, #8]
   13394:	ldr	r4, [sp, #28]
   13398:	str	r3, [sp]
   1339c:	str	r4, [sp, #4]
   133a0:	str	ip, [sp, #16]
   133a4:	str	lr, [sp, #12]
   133a8:	mvn	r3, #0
   133ac:	mov	r7, r0
   133b0:	bl	11934 <__assert_fail@plt+0xb10>
   133b4:	ldr	r3, [sp, #24]
   133b8:	mov	r0, r7
   133bc:	str	r3, [r8]
   133c0:	add	sp, sp, #44	; 0x2c
   133c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133c8:	mov	r3, #8
   133cc:	sub	r2, r5, r2
   133d0:	str	r3, [sp]
   133d4:	add	r1, sp, #36	; 0x24
   133d8:	add	r2, r2, #1
   133dc:	mvn	r3, #-2147483648	; 0x80000000
   133e0:	bl	1642c <__assert_fail@plt+0x5608>
   133e4:	mov	r6, r0
   133e8:	ldm	r7, {r0, r1}
   133ec:	str	r6, [r4]
   133f0:	stm	r6, {r0, r1}
   133f4:	b	132d0 <__assert_fail@plt+0x24ac>
   133f8:	bl	10e18 <abort@plt>
   133fc:	andeq	r9, r2, r4, ror #1
   13400:	andeq	r9, r2, r4, asr r1
   13404:	andeq	r9, r2, ip, asr r1
   13408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1340c:	sub	sp, sp, #52	; 0x34
   13410:	mov	r5, r0
   13414:	mov	sl, r1
   13418:	mov	fp, r2
   1341c:	bl	10d7c <__errno_location@plt>
   13420:	ldr	r4, [pc, #408]	; 135c0 <__assert_fail@plt+0x279c>
   13424:	cmn	r5, #-2147483647	; 0x80000001
   13428:	ldr	r6, [r4]
   1342c:	mov	r8, r0
   13430:	movne	r0, #0
   13434:	moveq	r0, #1
   13438:	ldr	r3, [r8]
   1343c:	orrs	r0, r0, r5, lsr #31
   13440:	str	r3, [sp, #28]
   13444:	bne	135bc <__assert_fail@plt+0x2798>
   13448:	ldr	r2, [r4, #4]
   1344c:	cmp	r5, r2
   13450:	blt	134b0 <__assert_fail@plt+0x268c>
   13454:	add	r7, r4, #8
   13458:	cmp	r6, r7
   1345c:	str	r2, [sp, #44]	; 0x2c
   13460:	beq	1358c <__assert_fail@plt+0x2768>
   13464:	mov	r3, #8
   13468:	sub	r2, r5, r2
   1346c:	mov	r0, r6
   13470:	str	r3, [sp]
   13474:	add	r2, r2, #1
   13478:	mvn	r3, #-2147483648	; 0x80000000
   1347c:	add	r1, sp, #44	; 0x2c
   13480:	bl	1642c <__assert_fail@plt+0x5608>
   13484:	mov	r6, r0
   13488:	str	r0, [r4]
   1348c:	ldr	r0, [r4, #4]
   13490:	ldr	r2, [sp, #44]	; 0x2c
   13494:	mov	r1, #0
   13498:	sub	r2, r2, r0
   1349c:	add	r0, r6, r0, lsl #3
   134a0:	lsl	r2, r2, #3
   134a4:	bl	10d94 <memset@plt>
   134a8:	ldr	r3, [sp, #44]	; 0x2c
   134ac:	str	r3, [r4, #4]
   134b0:	ldr	r4, [pc, #268]	; 135c4 <__assert_fail@plt+0x27a0>
   134b4:	add	r3, r6, r5, lsl #3
   134b8:	str	r3, [sp, #32]
   134bc:	ldr	r7, [r3, #4]
   134c0:	ldr	r0, [r4, #4]
   134c4:	ldr	r3, [r4]
   134c8:	ldr	r9, [r6, r5, lsl #3]
   134cc:	ldr	r1, [r4, #44]	; 0x2c
   134d0:	ldr	r2, [r4, #40]	; 0x28
   134d4:	orr	r0, r0, #1
   134d8:	str	r3, [sp]
   134dc:	add	r3, r4, #8
   134e0:	str	r0, [sp, #36]	; 0x24
   134e4:	str	r0, [sp, #4]
   134e8:	str	r1, [sp, #16]
   134ec:	str	r2, [sp, #12]
   134f0:	str	r3, [sp, #8]
   134f4:	mov	r0, r7
   134f8:	mov	r1, r9
   134fc:	mov	r3, fp
   13500:	mov	r2, sl
   13504:	bl	11934 <__assert_fail@plt+0xb10>
   13508:	cmp	r9, r0
   1350c:	bhi	13578 <__assert_fail@plt+0x2754>
   13510:	add	r3, r4, #48	; 0x30
   13514:	add	r9, r0, #1
   13518:	cmp	r7, r3
   1351c:	str	r9, [r6, r5, lsl #3]
   13520:	beq	1352c <__assert_fail@plt+0x2708>
   13524:	mov	r0, r7
   13528:	bl	1739c <__assert_fail@plt+0x6578>
   1352c:	mov	r0, r9
   13530:	bl	16210 <__assert_fail@plt+0x53ec>
   13534:	ldr	ip, [sp, #32]
   13538:	ldr	lr, [r4, #44]	; 0x2c
   1353c:	ldr	r5, [r4, #40]	; 0x28
   13540:	mov	r3, fp
   13544:	mov	r2, sl
   13548:	mov	r1, r9
   1354c:	str	r0, [ip, #4]
   13550:	ldr	ip, [r4]
   13554:	ldr	r4, [pc, #108]	; 135c8 <__assert_fail@plt+0x27a4>
   13558:	str	lr, [sp, #16]
   1355c:	str	r4, [sp, #8]
   13560:	ldr	r4, [sp, #36]	; 0x24
   13564:	str	r5, [sp, #12]
   13568:	str	r4, [sp, #4]
   1356c:	str	ip, [sp]
   13570:	mov	r7, r0
   13574:	bl	11934 <__assert_fail@plt+0xb10>
   13578:	ldr	r3, [sp, #28]
   1357c:	mov	r0, r7
   13580:	str	r3, [r8]
   13584:	add	sp, sp, #52	; 0x34
   13588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1358c:	mov	r3, #8
   13590:	sub	r2, r5, r2
   13594:	str	r3, [sp]
   13598:	add	r1, sp, #44	; 0x2c
   1359c:	add	r2, r2, #1
   135a0:	mvn	r3, #-2147483648	; 0x80000000
   135a4:	bl	1642c <__assert_fail@plt+0x5608>
   135a8:	mov	r6, r0
   135ac:	ldm	r7, {r0, r1}
   135b0:	str	r6, [r4]
   135b4:	stm	r6, {r0, r1}
   135b8:	b	1348c <__assert_fail@plt+0x2668>
   135bc:	bl	10e18 <abort@plt>
   135c0:	andeq	r9, r2, r4, ror #1
   135c4:	andeq	r9, r2, r4, asr r1
   135c8:	andeq	r9, r2, ip, asr r1
   135cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d0:	sub	sp, sp, #44	; 0x2c
   135d4:	mov	sl, r0
   135d8:	bl	10d7c <__errno_location@plt>
   135dc:	ldr	r4, [pc, #352]	; 13744 <__assert_fail@plt+0x2920>
   135e0:	ldr	r2, [r4, #4]
   135e4:	ldr	r5, [r4]
   135e8:	cmp	r2, #0
   135ec:	ldr	r3, [r0]
   135f0:	mov	r8, r0
   135f4:	str	r3, [sp, #28]
   135f8:	bgt	13654 <__assert_fail@plt+0x2830>
   135fc:	add	r6, r4, #8
   13600:	cmp	r5, r6
   13604:	str	r2, [sp, #36]	; 0x24
   13608:	beq	13714 <__assert_fail@plt+0x28f0>
   1360c:	mov	r3, #8
   13610:	mov	r0, r5
   13614:	str	r3, [sp]
   13618:	rsb	r2, r2, #1
   1361c:	mvn	r3, #-2147483648	; 0x80000000
   13620:	add	r1, sp, #36	; 0x24
   13624:	bl	1642c <__assert_fail@plt+0x5608>
   13628:	mov	r5, r0
   1362c:	str	r0, [r4]
   13630:	ldr	r0, [r4, #4]
   13634:	ldr	r2, [sp, #36]	; 0x24
   13638:	mov	r1, #0
   1363c:	sub	r2, r2, r0
   13640:	add	r0, r5, r0, lsl #3
   13644:	lsl	r2, r2, #3
   13648:	bl	10d94 <memset@plt>
   1364c:	ldr	r3, [sp, #36]	; 0x24
   13650:	str	r3, [r4, #4]
   13654:	ldr	r4, [pc, #236]	; 13748 <__assert_fail@plt+0x2924>
   13658:	ldr	r9, [r5]
   1365c:	ldr	r6, [r5, #4]
   13660:	ldr	r7, [r4, #4]
   13664:	ldr	r1, [r4, #44]	; 0x2c
   13668:	ldr	r2, [r4, #40]	; 0x28
   1366c:	ldr	r3, [r4]
   13670:	orr	r7, r7, #1
   13674:	add	fp, r4, #8
   13678:	str	r1, [sp, #16]
   1367c:	str	r2, [sp, #12]
   13680:	str	r3, [sp]
   13684:	str	r7, [sp, #4]
   13688:	str	fp, [sp, #8]
   1368c:	mov	r1, r9
   13690:	mov	r0, r6
   13694:	mvn	r3, #0
   13698:	mov	r2, sl
   1369c:	bl	11934 <__assert_fail@plt+0xb10>
   136a0:	cmp	r9, r0
   136a4:	bhi	13700 <__assert_fail@plt+0x28dc>
   136a8:	add	r3, r4, #48	; 0x30
   136ac:	add	r9, r0, #1
   136b0:	cmp	r6, r3
   136b4:	str	r9, [r5]
   136b8:	beq	136c4 <__assert_fail@plt+0x28a0>
   136bc:	mov	r0, r6
   136c0:	bl	1739c <__assert_fail@plt+0x6578>
   136c4:	mov	r0, r9
   136c8:	bl	16210 <__assert_fail@plt+0x53ec>
   136cc:	ldr	ip, [r4, #44]	; 0x2c
   136d0:	ldr	r3, [r4]
   136d4:	ldr	lr, [r4, #40]	; 0x28
   136d8:	mov	r2, sl
   136dc:	mov	r1, r9
   136e0:	str	r0, [r5, #4]
   136e4:	str	r3, [sp]
   136e8:	stmib	sp, {r7, fp}
   136ec:	str	ip, [sp, #16]
   136f0:	str	lr, [sp, #12]
   136f4:	mvn	r3, #0
   136f8:	mov	r6, r0
   136fc:	bl	11934 <__assert_fail@plt+0xb10>
   13700:	ldr	r3, [sp, #28]
   13704:	mov	r0, r6
   13708:	str	r3, [r8]
   1370c:	add	sp, sp, #44	; 0x2c
   13710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13714:	mov	r3, #8
   13718:	str	r3, [sp]
   1371c:	add	r1, sp, #36	; 0x24
   13720:	rsb	r2, r2, #1
   13724:	mvn	r3, #-2147483648	; 0x80000000
   13728:	mov	r0, #0
   1372c:	bl	1642c <__assert_fail@plt+0x5608>
   13730:	mov	r5, r0
   13734:	ldm	r6, {r0, r1}
   13738:	str	r5, [r4]
   1373c:	stm	r5, {r0, r1}
   13740:	b	13630 <__assert_fail@plt+0x280c>
   13744:	andeq	r9, r2, r4, ror #1
   13748:	andeq	r9, r2, r4, asr r1
   1374c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13750:	sub	sp, sp, #44	; 0x2c
   13754:	mov	r9, r0
   13758:	mov	sl, r1
   1375c:	bl	10d7c <__errno_location@plt>
   13760:	ldr	r4, [pc, #364]	; 138d4 <__assert_fail@plt+0x2ab0>
   13764:	ldr	r2, [r4, #4]
   13768:	ldr	r5, [r4]
   1376c:	cmp	r2, #0
   13770:	ldr	r3, [r0]
   13774:	mov	r7, r0
   13778:	str	r3, [sp, #24]
   1377c:	bgt	137d8 <__assert_fail@plt+0x29b4>
   13780:	add	r6, r4, #8
   13784:	cmp	r5, r6
   13788:	str	r2, [sp, #36]	; 0x24
   1378c:	beq	138a4 <__assert_fail@plt+0x2a80>
   13790:	mov	r3, #8
   13794:	mov	r0, r5
   13798:	str	r3, [sp]
   1379c:	rsb	r2, r2, #1
   137a0:	mvn	r3, #-2147483648	; 0x80000000
   137a4:	add	r1, sp, #36	; 0x24
   137a8:	bl	1642c <__assert_fail@plt+0x5608>
   137ac:	mov	r5, r0
   137b0:	str	r0, [r4]
   137b4:	ldr	r0, [r4, #4]
   137b8:	ldr	r2, [sp, #36]	; 0x24
   137bc:	mov	r1, #0
   137c0:	sub	r2, r2, r0
   137c4:	add	r0, r5, r0, lsl #3
   137c8:	lsl	r2, r2, #3
   137cc:	bl	10d94 <memset@plt>
   137d0:	ldr	r3, [sp, #36]	; 0x24
   137d4:	str	r3, [r4, #4]
   137d8:	ldr	r4, [pc, #248]	; 138d8 <__assert_fail@plt+0x2ab4>
   137dc:	ldr	r8, [r5]
   137e0:	ldr	r6, [r5, #4]
   137e4:	ldr	r0, [r4, #4]
   137e8:	ldr	r1, [r4, #44]	; 0x2c
   137ec:	ldr	r2, [r4, #40]	; 0x28
   137f0:	ldr	r3, [r4]
   137f4:	orr	r0, r0, #1
   137f8:	add	fp, r4, #8
   137fc:	str	r0, [sp, #28]
   13800:	str	r0, [sp, #4]
   13804:	str	r1, [sp, #16]
   13808:	str	r2, [sp, #12]
   1380c:	str	r3, [sp]
   13810:	str	fp, [sp, #8]
   13814:	mov	r1, r8
   13818:	mov	r0, r6
   1381c:	mov	r3, sl
   13820:	mov	r2, r9
   13824:	bl	11934 <__assert_fail@plt+0xb10>
   13828:	cmp	r8, r0
   1382c:	bhi	13890 <__assert_fail@plt+0x2a6c>
   13830:	add	r3, r4, #48	; 0x30
   13834:	add	r8, r0, #1
   13838:	cmp	r6, r3
   1383c:	str	r8, [r5]
   13840:	beq	1384c <__assert_fail@plt+0x2a28>
   13844:	mov	r0, r6
   13848:	bl	1739c <__assert_fail@plt+0x6578>
   1384c:	mov	r0, r8
   13850:	bl	16210 <__assert_fail@plt+0x53ec>
   13854:	ldr	lr, [r4, #44]	; 0x2c
   13858:	ldr	ip, [r4]
   1385c:	mov	r3, sl
   13860:	mov	r2, r9
   13864:	mov	r1, r8
   13868:	str	r0, [r5, #4]
   1386c:	ldr	r5, [r4, #40]	; 0x28
   13870:	ldr	r4, [sp, #28]
   13874:	str	fp, [sp, #8]
   13878:	str	r4, [sp, #4]
   1387c:	str	lr, [sp, #16]
   13880:	str	r5, [sp, #12]
   13884:	str	ip, [sp]
   13888:	mov	r6, r0
   1388c:	bl	11934 <__assert_fail@plt+0xb10>
   13890:	ldr	r3, [sp, #24]
   13894:	mov	r0, r6
   13898:	str	r3, [r7]
   1389c:	add	sp, sp, #44	; 0x2c
   138a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a4:	mov	r3, #8
   138a8:	str	r3, [sp]
   138ac:	add	r1, sp, #36	; 0x24
   138b0:	rsb	r2, r2, #1
   138b4:	mvn	r3, #-2147483648	; 0x80000000
   138b8:	mov	r0, #0
   138bc:	bl	1642c <__assert_fail@plt+0x5608>
   138c0:	mov	r5, r0
   138c4:	ldm	r6, {r0, r1}
   138c8:	str	r5, [r4]
   138cc:	stm	r5, {r0, r1}
   138d0:	b	137b4 <__assert_fail@plt+0x2990>
   138d4:	andeq	r9, r2, r4, ror #1
   138d8:	andeq	r9, r2, r4, asr r1
   138dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138e0:	sub	sp, sp, #132	; 0x84
   138e4:	mov	r5, r1
   138e8:	mov	r4, r0
   138ec:	mov	r9, r2
   138f0:	add	r0, sp, #80	; 0x50
   138f4:	mov	r2, #48	; 0x30
   138f8:	mov	r1, #0
   138fc:	bl	10d94 <memset@plt>
   13900:	cmp	r5, #10
   13904:	beq	13abc <__assert_fail@plt+0x2c98>
   13908:	add	lr, sp, #80	; 0x50
   1390c:	str	r5, [sp, #80]	; 0x50
   13910:	ldm	lr!, {r0, r1, r2, r3}
   13914:	add	ip, sp, #32
   13918:	ldr	r6, [pc, #416]	; 13ac0 <__assert_fail@plt+0x2c9c>
   1391c:	stmia	ip!, {r0, r1, r2, r3}
   13920:	ldm	lr!, {r0, r1, r2, r3}
   13924:	stmia	ip!, {r0, r1, r2, r3}
   13928:	ldm	lr, {r0, r1, r2, r3}
   1392c:	stm	ip, {r0, r1, r2, r3}
   13930:	bl	10d7c <__errno_location@plt>
   13934:	cmn	r4, #-2147483647	; 0x80000001
   13938:	ldr	r5, [r6]
   1393c:	mov	r7, r0
   13940:	movne	r0, #0
   13944:	moveq	r0, #1
   13948:	ldr	r3, [r7]
   1394c:	orrs	r0, r0, r4, lsr #31
   13950:	str	r3, [sp, #24]
   13954:	bne	13abc <__assert_fail@plt+0x2c98>
   13958:	ldr	r2, [r6, #4]
   1395c:	cmp	r4, r2
   13960:	blt	139c0 <__assert_fail@plt+0x2b9c>
   13964:	add	r8, r6, #8
   13968:	cmp	r5, r8
   1396c:	str	r2, [sp, #80]	; 0x50
   13970:	beq	13a8c <__assert_fail@plt+0x2c68>
   13974:	mov	r3, #8
   13978:	sub	r2, r4, r2
   1397c:	mov	r0, r5
   13980:	str	r3, [sp]
   13984:	add	r2, r2, #1
   13988:	add	r1, sp, #80	; 0x50
   1398c:	mvn	r3, #-2147483648	; 0x80000000
   13990:	bl	1642c <__assert_fail@plt+0x5608>
   13994:	mov	r5, r0
   13998:	str	r0, [r6]
   1399c:	ldr	r0, [r6, #4]
   139a0:	ldr	r2, [sp, #80]	; 0x50
   139a4:	mov	r1, #0
   139a8:	sub	r2, r2, r0
   139ac:	add	r0, r5, r0, lsl #3
   139b0:	lsl	r2, r2, #3
   139b4:	bl	10d94 <memset@plt>
   139b8:	ldr	r3, [sp, #80]	; 0x50
   139bc:	str	r3, [r6, #4]
   139c0:	add	fp, r5, r4, lsl #3
   139c4:	ldr	r1, [sp, #36]	; 0x24
   139c8:	ldr	r8, [r5, r4, lsl #3]
   139cc:	ldr	r6, [fp, #4]
   139d0:	ldr	r2, [sp, #72]	; 0x48
   139d4:	ldr	r3, [sp, #32]
   139d8:	ldr	ip, [sp, #76]	; 0x4c
   139dc:	orr	r1, r1, #1
   139e0:	add	sl, sp, #40	; 0x28
   139e4:	str	r1, [sp, #28]
   139e8:	str	r1, [sp, #4]
   139ec:	str	r2, [sp, #12]
   139f0:	str	r3, [sp]
   139f4:	mov	r0, r6
   139f8:	mov	r1, r8
   139fc:	str	ip, [sp, #16]
   13a00:	str	sl, [sp, #8]
   13a04:	mvn	r3, #0
   13a08:	mov	r2, r9
   13a0c:	bl	11934 <__assert_fail@plt+0xb10>
   13a10:	cmp	r8, r0
   13a14:	bhi	13a78 <__assert_fail@plt+0x2c54>
   13a18:	ldr	r3, [pc, #164]	; 13ac4 <__assert_fail@plt+0x2ca0>
   13a1c:	add	r8, r0, #1
   13a20:	cmp	r6, r3
   13a24:	str	r8, [r5, r4, lsl #3]
   13a28:	beq	13a34 <__assert_fail@plt+0x2c10>
   13a2c:	mov	r0, r6
   13a30:	bl	1739c <__assert_fail@plt+0x6578>
   13a34:	mov	r0, r8
   13a38:	bl	16210 <__assert_fail@plt+0x53ec>
   13a3c:	ldr	lr, [sp, #76]	; 0x4c
   13a40:	ldr	r3, [sp, #32]
   13a44:	ldr	ip, [sp, #72]	; 0x48
   13a48:	ldr	r4, [sp, #28]
   13a4c:	mov	r2, r9
   13a50:	mov	r1, r8
   13a54:	str	r0, [fp, #4]
   13a58:	str	r3, [sp]
   13a5c:	str	sl, [sp, #8]
   13a60:	str	r4, [sp, #4]
   13a64:	str	lr, [sp, #16]
   13a68:	str	ip, [sp, #12]
   13a6c:	mvn	r3, #0
   13a70:	mov	r6, r0
   13a74:	bl	11934 <__assert_fail@plt+0xb10>
   13a78:	ldr	r3, [sp, #24]
   13a7c:	mov	r0, r6
   13a80:	str	r3, [r7]
   13a84:	add	sp, sp, #132	; 0x84
   13a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a8c:	mov	r3, #8
   13a90:	sub	r2, r4, r2
   13a94:	add	r1, sp, #80	; 0x50
   13a98:	str	r3, [sp]
   13a9c:	add	r2, r2, #1
   13aa0:	mvn	r3, #-2147483648	; 0x80000000
   13aa4:	bl	1642c <__assert_fail@plt+0x5608>
   13aa8:	mov	r5, r0
   13aac:	ldm	r8, {r0, r1}
   13ab0:	str	r5, [r6]
   13ab4:	stm	r5, {r0, r1}
   13ab8:	b	1399c <__assert_fail@plt+0x2b78>
   13abc:	bl	10e18 <abort@plt>
   13ac0:	andeq	r9, r2, r4, ror #1
   13ac4:	andeq	r9, r2, r4, lsl #3
   13ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13acc:	sub	sp, sp, #132	; 0x84
   13ad0:	mov	r5, r1
   13ad4:	mov	r4, r0
   13ad8:	mov	r9, r2
   13adc:	add	r0, sp, #80	; 0x50
   13ae0:	mov	r2, #48	; 0x30
   13ae4:	mov	r1, #0
   13ae8:	mov	sl, r3
   13aec:	bl	10d94 <memset@plt>
   13af0:	cmp	r5, #10
   13af4:	beq	13cb0 <__assert_fail@plt+0x2e8c>
   13af8:	add	lr, sp, #80	; 0x50
   13afc:	str	r5, [sp, #80]	; 0x50
   13b00:	ldm	lr!, {r0, r1, r2, r3}
   13b04:	add	ip, sp, #32
   13b08:	ldr	r6, [pc, #420]	; 13cb4 <__assert_fail@plt+0x2e90>
   13b0c:	stmia	ip!, {r0, r1, r2, r3}
   13b10:	ldm	lr!, {r0, r1, r2, r3}
   13b14:	stmia	ip!, {r0, r1, r2, r3}
   13b18:	ldm	lr, {r0, r1, r2, r3}
   13b1c:	stm	ip, {r0, r1, r2, r3}
   13b20:	bl	10d7c <__errno_location@plt>
   13b24:	cmn	r4, #-2147483647	; 0x80000001
   13b28:	ldr	r5, [r6]
   13b2c:	mov	r7, r0
   13b30:	movne	r0, #0
   13b34:	moveq	r0, #1
   13b38:	ldr	r3, [r7]
   13b3c:	orrs	r0, r0, r4, lsr #31
   13b40:	str	r3, [sp, #24]
   13b44:	bne	13cb0 <__assert_fail@plt+0x2e8c>
   13b48:	ldr	r2, [r6, #4]
   13b4c:	cmp	r4, r2
   13b50:	blt	13bb0 <__assert_fail@plt+0x2d8c>
   13b54:	add	r8, r6, #8
   13b58:	cmp	r5, r8
   13b5c:	str	r2, [sp, #80]	; 0x50
   13b60:	beq	13c80 <__assert_fail@plt+0x2e5c>
   13b64:	mov	r3, #8
   13b68:	sub	r2, r4, r2
   13b6c:	mov	r0, r5
   13b70:	str	r3, [sp]
   13b74:	add	r2, r2, #1
   13b78:	add	r1, sp, #80	; 0x50
   13b7c:	mvn	r3, #-2147483648	; 0x80000000
   13b80:	bl	1642c <__assert_fail@plt+0x5608>
   13b84:	mov	r5, r0
   13b88:	str	r0, [r6]
   13b8c:	ldr	r0, [r6, #4]
   13b90:	ldr	r2, [sp, #80]	; 0x50
   13b94:	mov	r1, #0
   13b98:	sub	r2, r2, r0
   13b9c:	add	r0, r5, r0, lsl #3
   13ba0:	lsl	r2, r2, #3
   13ba4:	bl	10d94 <memset@plt>
   13ba8:	ldr	r3, [sp, #80]	; 0x50
   13bac:	str	r3, [r6, #4]
   13bb0:	add	fp, r5, r4, lsl #3
   13bb4:	ldr	r3, [sp, #32]
   13bb8:	ldr	r1, [sp, #36]	; 0x24
   13bbc:	ldr	r8, [r5, r4, lsl #3]
   13bc0:	ldr	r6, [fp, #4]
   13bc4:	ldr	r2, [sp, #72]	; 0x48
   13bc8:	ldr	ip, [sp, #76]	; 0x4c
   13bcc:	orr	r1, r1, #1
   13bd0:	str	r3, [sp]
   13bd4:	add	r3, sp, #40	; 0x28
   13bd8:	str	r1, [sp, #28]
   13bdc:	str	r1, [sp, #4]
   13be0:	str	r2, [sp, #12]
   13be4:	str	r3, [sp, #8]
   13be8:	mov	r0, r6
   13bec:	mov	r1, r8
   13bf0:	str	ip, [sp, #16]
   13bf4:	mov	r3, sl
   13bf8:	mov	r2, r9
   13bfc:	bl	11934 <__assert_fail@plt+0xb10>
   13c00:	cmp	r8, r0
   13c04:	bhi	13c6c <__assert_fail@plt+0x2e48>
   13c08:	ldr	r3, [pc, #168]	; 13cb8 <__assert_fail@plt+0x2e94>
   13c0c:	add	r8, r0, #1
   13c10:	cmp	r6, r3
   13c14:	str	r8, [r5, r4, lsl #3]
   13c18:	beq	13c24 <__assert_fail@plt+0x2e00>
   13c1c:	mov	r0, r6
   13c20:	bl	1739c <__assert_fail@plt+0x6578>
   13c24:	mov	r0, r8
   13c28:	bl	16210 <__assert_fail@plt+0x53ec>
   13c2c:	add	lr, sp, #40	; 0x28
   13c30:	ldr	ip, [sp, #76]	; 0x4c
   13c34:	ldr	r4, [sp, #72]	; 0x48
   13c38:	ldr	r5, [sp, #28]
   13c3c:	mov	r3, sl
   13c40:	mov	r2, r9
   13c44:	mov	r1, r8
   13c48:	str	r0, [fp, #4]
   13c4c:	str	lr, [sp, #8]
   13c50:	ldr	lr, [sp, #32]
   13c54:	str	r5, [sp, #4]
   13c58:	str	ip, [sp, #16]
   13c5c:	str	r4, [sp, #12]
   13c60:	str	lr, [sp]
   13c64:	mov	r6, r0
   13c68:	bl	11934 <__assert_fail@plt+0xb10>
   13c6c:	ldr	r3, [sp, #24]
   13c70:	mov	r0, r6
   13c74:	str	r3, [r7]
   13c78:	add	sp, sp, #132	; 0x84
   13c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c80:	mov	r3, #8
   13c84:	sub	r2, r4, r2
   13c88:	add	r1, sp, #80	; 0x50
   13c8c:	str	r3, [sp]
   13c90:	add	r2, r2, #1
   13c94:	mvn	r3, #-2147483648	; 0x80000000
   13c98:	bl	1642c <__assert_fail@plt+0x5608>
   13c9c:	mov	r5, r0
   13ca0:	ldm	r8, {r0, r1}
   13ca4:	str	r5, [r6]
   13ca8:	stm	r5, {r0, r1}
   13cac:	b	13b8c <__assert_fail@plt+0x2d68>
   13cb0:	bl	10e18 <abort@plt>
   13cb4:	andeq	r9, r2, r4, ror #1
   13cb8:	andeq	r9, r2, r4, lsl #3
   13cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc0:	sub	sp, sp, #124	; 0x7c
   13cc4:	mov	r4, r0
   13cc8:	mov	r9, r1
   13ccc:	add	r0, sp, #72	; 0x48
   13cd0:	mov	r2, #48	; 0x30
   13cd4:	mov	r1, #0
   13cd8:	bl	10d94 <memset@plt>
   13cdc:	cmp	r4, #10
   13ce0:	beq	13e6c <__assert_fail@plt+0x3048>
   13ce4:	add	lr, sp, #72	; 0x48
   13ce8:	str	r4, [sp, #72]	; 0x48
   13cec:	ldm	lr!, {r0, r1, r2, r3}
   13cf0:	add	ip, sp, #24
   13cf4:	ldr	r5, [pc, #372]	; 13e70 <__assert_fail@plt+0x304c>
   13cf8:	stmia	ip!, {r0, r1, r2, r3}
   13cfc:	ldm	lr!, {r0, r1, r2, r3}
   13d00:	stmia	ip!, {r0, r1, r2, r3}
   13d04:	ldm	lr, {r0, r1, r2, r3}
   13d08:	stm	ip, {r0, r1, r2, r3}
   13d0c:	bl	10d7c <__errno_location@plt>
   13d10:	ldr	r2, [r5, #4]
   13d14:	ldr	r4, [r5]
   13d18:	cmp	r2, #0
   13d1c:	mov	r7, r0
   13d20:	ldr	fp, [r0]
   13d24:	bgt	13d80 <__assert_fail@plt+0x2f5c>
   13d28:	add	r6, r5, #8
   13d2c:	cmp	r4, r6
   13d30:	str	r2, [sp, #72]	; 0x48
   13d34:	beq	13e3c <__assert_fail@plt+0x3018>
   13d38:	mov	r3, #8
   13d3c:	mov	r0, r4
   13d40:	str	r3, [sp]
   13d44:	rsb	r2, r2, #1
   13d48:	add	r1, sp, #72	; 0x48
   13d4c:	mvn	r3, #-2147483648	; 0x80000000
   13d50:	bl	1642c <__assert_fail@plt+0x5608>
   13d54:	mov	r4, r0
   13d58:	str	r0, [r5]
   13d5c:	ldr	r0, [r5, #4]
   13d60:	ldr	r2, [sp, #72]	; 0x48
   13d64:	mov	r1, #0
   13d68:	sub	r2, r2, r0
   13d6c:	add	r0, r4, r0, lsl #3
   13d70:	lsl	r2, r2, #3
   13d74:	bl	10d94 <memset@plt>
   13d78:	ldr	r3, [sp, #72]	; 0x48
   13d7c:	str	r3, [r5, #4]
   13d80:	ldr	r6, [sp, #28]
   13d84:	ldr	r8, [r4]
   13d88:	ldr	r5, [r4, #4]
   13d8c:	ldr	r2, [sp, #64]	; 0x40
   13d90:	ldr	r3, [sp, #24]
   13d94:	ldr	ip, [sp, #68]	; 0x44
   13d98:	orr	r6, r6, #1
   13d9c:	add	sl, sp, #32
   13da0:	str	r2, [sp, #12]
   13da4:	str	r3, [sp]
   13da8:	str	r6, [sp, #4]
   13dac:	mov	r1, r8
   13db0:	mov	r0, r5
   13db4:	str	ip, [sp, #16]
   13db8:	str	sl, [sp, #8]
   13dbc:	mvn	r3, #0
   13dc0:	mov	r2, r9
   13dc4:	bl	11934 <__assert_fail@plt+0xb10>
   13dc8:	cmp	r8, r0
   13dcc:	bhi	13e2c <__assert_fail@plt+0x3008>
   13dd0:	ldr	r3, [pc, #156]	; 13e74 <__assert_fail@plt+0x3050>
   13dd4:	add	r8, r0, #1
   13dd8:	cmp	r5, r3
   13ddc:	str	r8, [r4]
   13de0:	beq	13dec <__assert_fail@plt+0x2fc8>
   13de4:	mov	r0, r5
   13de8:	bl	1739c <__assert_fail@plt+0x6578>
   13dec:	mov	r0, r8
   13df0:	bl	16210 <__assert_fail@plt+0x53ec>
   13df4:	ldr	lr, [sp, #68]	; 0x44
   13df8:	ldr	r3, [sp, #24]
   13dfc:	ldr	ip, [sp, #64]	; 0x40
   13e00:	mov	r2, r9
   13e04:	mov	r1, r8
   13e08:	str	r0, [r4, #4]
   13e0c:	str	r3, [sp]
   13e10:	str	sl, [sp, #8]
   13e14:	str	r6, [sp, #4]
   13e18:	str	lr, [sp, #16]
   13e1c:	str	ip, [sp, #12]
   13e20:	mvn	r3, #0
   13e24:	mov	r5, r0
   13e28:	bl	11934 <__assert_fail@plt+0xb10>
   13e2c:	mov	r0, r5
   13e30:	str	fp, [r7]
   13e34:	add	sp, sp, #124	; 0x7c
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e3c:	mov	r3, #8
   13e40:	add	r1, sp, #72	; 0x48
   13e44:	str	r3, [sp]
   13e48:	rsb	r2, r2, #1
   13e4c:	mvn	r3, #-2147483648	; 0x80000000
   13e50:	mov	r0, #0
   13e54:	bl	1642c <__assert_fail@plt+0x5608>
   13e58:	mov	r4, r0
   13e5c:	ldm	r6, {r0, r1}
   13e60:	str	r4, [r5]
   13e64:	stm	r4, {r0, r1}
   13e68:	b	13d5c <__assert_fail@plt+0x2f38>
   13e6c:	bl	10e18 <abort@plt>
   13e70:	andeq	r9, r2, r4, ror #1
   13e74:	andeq	r9, r2, r4, lsl #3
   13e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e7c:	sub	sp, sp, #132	; 0x84
   13e80:	mov	r4, r0
   13e84:	mov	r9, r1
   13e88:	mov	sl, r2
   13e8c:	add	r0, sp, #80	; 0x50
   13e90:	mov	r2, #48	; 0x30
   13e94:	mov	r1, #0
   13e98:	bl	10d94 <memset@plt>
   13e9c:	cmp	r4, #10
   13ea0:	beq	14034 <__assert_fail@plt+0x3210>
   13ea4:	add	lr, sp, #80	; 0x50
   13ea8:	str	r4, [sp, #80]	; 0x50
   13eac:	ldm	lr!, {r0, r1, r2, r3}
   13eb0:	add	ip, sp, #32
   13eb4:	ldr	r5, [pc, #380]	; 14038 <__assert_fail@plt+0x3214>
   13eb8:	stmia	ip!, {r0, r1, r2, r3}
   13ebc:	ldm	lr!, {r0, r1, r2, r3}
   13ec0:	stmia	ip!, {r0, r1, r2, r3}
   13ec4:	ldm	lr, {r0, r1, r2, r3}
   13ec8:	stm	ip, {r0, r1, r2, r3}
   13ecc:	bl	10d7c <__errno_location@plt>
   13ed0:	ldr	r2, [r5, #4]
   13ed4:	ldr	r4, [r5]
   13ed8:	cmp	r2, #0
   13edc:	ldr	r3, [r0]
   13ee0:	mov	r7, r0
   13ee4:	str	r3, [sp, #28]
   13ee8:	bgt	13f44 <__assert_fail@plt+0x3120>
   13eec:	add	r6, r5, #8
   13ef0:	cmp	r4, r6
   13ef4:	str	r2, [sp, #80]	; 0x50
   13ef8:	beq	14004 <__assert_fail@plt+0x31e0>
   13efc:	mov	r3, #8
   13f00:	mov	r0, r4
   13f04:	str	r3, [sp]
   13f08:	rsb	r2, r2, #1
   13f0c:	add	r1, sp, #80	; 0x50
   13f10:	mvn	r3, #-2147483648	; 0x80000000
   13f14:	bl	1642c <__assert_fail@plt+0x5608>
   13f18:	mov	r4, r0
   13f1c:	str	r0, [r5]
   13f20:	ldr	r0, [r5, #4]
   13f24:	ldr	r2, [sp, #80]	; 0x50
   13f28:	mov	r1, #0
   13f2c:	sub	r2, r2, r0
   13f30:	add	r0, r4, r0, lsl #3
   13f34:	lsl	r2, r2, #3
   13f38:	bl	10d94 <memset@plt>
   13f3c:	ldr	r3, [sp, #80]	; 0x50
   13f40:	str	r3, [r5, #4]
   13f44:	ldr	r6, [sp, #36]	; 0x24
   13f48:	ldr	r8, [r4]
   13f4c:	ldr	r5, [r4, #4]
   13f50:	ldr	r2, [sp, #72]	; 0x48
   13f54:	ldr	r3, [sp, #32]
   13f58:	ldr	ip, [sp, #76]	; 0x4c
   13f5c:	orr	r6, r6, #1
   13f60:	add	fp, sp, #40	; 0x28
   13f64:	str	r2, [sp, #12]
   13f68:	str	r3, [sp]
   13f6c:	str	r6, [sp, #4]
   13f70:	mov	r1, r8
   13f74:	mov	r0, r5
   13f78:	str	ip, [sp, #16]
   13f7c:	str	fp, [sp, #8]
   13f80:	mov	r3, sl
   13f84:	mov	r2, r9
   13f88:	bl	11934 <__assert_fail@plt+0xb10>
   13f8c:	cmp	r8, r0
   13f90:	bhi	13ff0 <__assert_fail@plt+0x31cc>
   13f94:	ldr	r3, [pc, #160]	; 1403c <__assert_fail@plt+0x3218>
   13f98:	add	r8, r0, #1
   13f9c:	cmp	r5, r3
   13fa0:	str	r8, [r4]
   13fa4:	beq	13fb0 <__assert_fail@plt+0x318c>
   13fa8:	mov	r0, r5
   13fac:	bl	1739c <__assert_fail@plt+0x6578>
   13fb0:	mov	r0, r8
   13fb4:	bl	16210 <__assert_fail@plt+0x53ec>
   13fb8:	ldr	ip, [sp, #76]	; 0x4c
   13fbc:	ldr	lr, [sp, #32]
   13fc0:	mov	r3, sl
   13fc4:	mov	r2, r9
   13fc8:	mov	r1, r8
   13fcc:	str	r0, [r4, #4]
   13fd0:	ldr	r4, [sp, #72]	; 0x48
   13fd4:	str	fp, [sp, #8]
   13fd8:	str	r6, [sp, #4]
   13fdc:	str	ip, [sp, #16]
   13fe0:	str	r4, [sp, #12]
   13fe4:	str	lr, [sp]
   13fe8:	mov	r5, r0
   13fec:	bl	11934 <__assert_fail@plt+0xb10>
   13ff0:	ldr	r3, [sp, #28]
   13ff4:	mov	r0, r5
   13ff8:	str	r3, [r7]
   13ffc:	add	sp, sp, #132	; 0x84
   14000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14004:	mov	r3, #8
   14008:	add	r1, sp, #80	; 0x50
   1400c:	str	r3, [sp]
   14010:	rsb	r2, r2, #1
   14014:	mvn	r3, #-2147483648	; 0x80000000
   14018:	mov	r0, #0
   1401c:	bl	1642c <__assert_fail@plt+0x5608>
   14020:	mov	r4, r0
   14024:	ldm	r6, {r0, r1}
   14028:	str	r4, [r5]
   1402c:	stm	r4, {r0, r1}
   14030:	b	13f20 <__assert_fail@plt+0x30fc>
   14034:	bl	10e18 <abort@plt>
   14038:	andeq	r9, r2, r4, ror #1
   1403c:	andeq	r9, r2, r4, lsl #3
   14040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14044:	mov	r4, r2
   14048:	ldr	lr, [pc, #432]	; 14200 <__assert_fail@plt+0x33dc>
   1404c:	mov	sl, r0
   14050:	mov	fp, r1
   14054:	ldm	lr!, {r0, r1, r2, r3}
   14058:	sub	sp, sp, #92	; 0x5c
   1405c:	add	ip, sp, #40	; 0x28
   14060:	lsr	r7, r4, #5
   14064:	stmia	ip!, {r0, r1, r2, r3}
   14068:	add	r6, sp, #48	; 0x30
   1406c:	ldm	lr!, {r0, r1, r2, r3}
   14070:	and	r4, r4, #31
   14074:	ldr	r5, [pc, #392]	; 14204 <__assert_fail@plt+0x33e0>
   14078:	stmia	ip!, {r0, r1, r2, r3}
   1407c:	ldm	lr, {r0, r1, r2, r3}
   14080:	stm	ip, {r0, r1, r2, r3}
   14084:	ldr	r2, [r6, r7, lsl #2]
   14088:	lsr	r3, r2, r4
   1408c:	eor	r3, r3, #1
   14090:	and	r3, r3, #1
   14094:	eor	r4, r2, r3, lsl r4
   14098:	str	r4, [r6, r7, lsl #2]
   1409c:	bl	10d7c <__errno_location@plt>
   140a0:	ldr	r2, [r5, #4]
   140a4:	ldr	r4, [r5]
   140a8:	cmp	r2, #0
   140ac:	ldr	r3, [r0]
   140b0:	mov	r8, r0
   140b4:	str	r3, [sp, #28]
   140b8:	bgt	14114 <__assert_fail@plt+0x32f0>
   140bc:	add	r7, r5, #8
   140c0:	cmp	r4, r7
   140c4:	str	r2, [sp, #36]	; 0x24
   140c8:	beq	141d0 <__assert_fail@plt+0x33ac>
   140cc:	mov	r3, #8
   140d0:	mov	r0, r4
   140d4:	str	r3, [sp]
   140d8:	rsb	r2, r2, #1
   140dc:	mvn	r3, #-2147483648	; 0x80000000
   140e0:	add	r1, sp, #36	; 0x24
   140e4:	bl	1642c <__assert_fail@plt+0x5608>
   140e8:	mov	r4, r0
   140ec:	str	r0, [r5]
   140f0:	ldr	r0, [r5, #4]
   140f4:	ldr	r2, [sp, #36]	; 0x24
   140f8:	mov	r1, #0
   140fc:	sub	r2, r2, r0
   14100:	add	r0, r4, r0, lsl #3
   14104:	lsl	r2, r2, #3
   14108:	bl	10d94 <memset@plt>
   1410c:	ldr	r3, [sp, #36]	; 0x24
   14110:	str	r3, [r5, #4]
   14114:	ldr	r7, [sp, #44]	; 0x2c
   14118:	ldr	r9, [r4]
   1411c:	ldr	r5, [r4, #4]
   14120:	ldr	r2, [sp, #80]	; 0x50
   14124:	ldr	r3, [sp, #40]	; 0x28
   14128:	ldr	ip, [sp, #84]	; 0x54
   1412c:	orr	r7, r7, #1
   14130:	str	r2, [sp, #12]
   14134:	str	r3, [sp]
   14138:	str	r7, [sp, #4]
   1413c:	str	r6, [sp, #8]
   14140:	mov	r1, r9
   14144:	mov	r0, r5
   14148:	str	ip, [sp, #16]
   1414c:	mov	r3, fp
   14150:	mov	r2, sl
   14154:	bl	11934 <__assert_fail@plt+0xb10>
   14158:	cmp	r9, r0
   1415c:	bhi	141bc <__assert_fail@plt+0x3398>
   14160:	ldr	r3, [pc, #160]	; 14208 <__assert_fail@plt+0x33e4>
   14164:	add	r9, r0, #1
   14168:	cmp	r5, r3
   1416c:	str	r9, [r4]
   14170:	beq	1417c <__assert_fail@plt+0x3358>
   14174:	mov	r0, r5
   14178:	bl	1739c <__assert_fail@plt+0x6578>
   1417c:	mov	r0, r9
   14180:	bl	16210 <__assert_fail@plt+0x53ec>
   14184:	ldr	ip, [sp, #84]	; 0x54
   14188:	ldr	lr, [sp, #40]	; 0x28
   1418c:	mov	r3, fp
   14190:	mov	r2, sl
   14194:	mov	r1, r9
   14198:	str	r0, [r4, #4]
   1419c:	ldr	r4, [sp, #80]	; 0x50
   141a0:	str	r6, [sp, #8]
   141a4:	str	r7, [sp, #4]
   141a8:	str	ip, [sp, #16]
   141ac:	str	r4, [sp, #12]
   141b0:	str	lr, [sp]
   141b4:	mov	r5, r0
   141b8:	bl	11934 <__assert_fail@plt+0xb10>
   141bc:	ldr	r3, [sp, #28]
   141c0:	mov	r0, r5
   141c4:	str	r3, [r8]
   141c8:	add	sp, sp, #92	; 0x5c
   141cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d0:	mov	r3, #8
   141d4:	str	r3, [sp]
   141d8:	add	r1, sp, #36	; 0x24
   141dc:	rsb	r2, r2, #1
   141e0:	mvn	r3, #-2147483648	; 0x80000000
   141e4:	mov	r0, #0
   141e8:	bl	1642c <__assert_fail@plt+0x5608>
   141ec:	mov	r4, r0
   141f0:	ldm	r7, {r0, r1}
   141f4:	str	r4, [r5]
   141f8:	stm	r4, {r0, r1}
   141fc:	b	140f0 <__assert_fail@plt+0x32cc>
   14200:	andeq	r9, r2, r4, asr r1
   14204:	andeq	r9, r2, r4, ror #1
   14208:	andeq	r9, r2, r4, lsl #3
   1420c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14210:	mov	r4, r1
   14214:	ldr	lr, [pc, #420]	; 143c0 <__assert_fail@plt+0x359c>
   14218:	mov	r6, r0
   1421c:	sub	sp, sp, #84	; 0x54
   14220:	ldm	lr!, {r0, r1, r2, r3}
   14224:	add	ip, sp, #32
   14228:	lsr	r8, r4, #5
   1422c:	add	r5, sp, #40	; 0x28
   14230:	stmia	ip!, {r0, r1, r2, r3}
   14234:	and	r4, r4, #31
   14238:	ldm	lr!, {r0, r1, r2, r3}
   1423c:	ldr	r7, [pc, #384]	; 143c4 <__assert_fail@plt+0x35a0>
   14240:	stmia	ip!, {r0, r1, r2, r3}
   14244:	ldm	lr, {r0, r1, r2, r3}
   14248:	stm	ip, {r0, r1, r2, r3}
   1424c:	ldr	r2, [r5, r8, lsl #2]
   14250:	lsr	r3, r2, r4
   14254:	eor	r3, r3, #1
   14258:	and	r3, r3, #1
   1425c:	eor	r4, r2, r3, lsl r4
   14260:	str	r4, [r5, r8, lsl #2]
   14264:	bl	10d7c <__errno_location@plt>
   14268:	ldr	r2, [r7, #4]
   1426c:	ldr	r4, [r7]
   14270:	cmp	r2, #0
   14274:	mov	r9, r0
   14278:	ldr	sl, [r0]
   1427c:	bgt	142d8 <__assert_fail@plt+0x34b4>
   14280:	add	r8, r7, #8
   14284:	cmp	r4, r8
   14288:	str	r2, [sp, #28]
   1428c:	beq	14390 <__assert_fail@plt+0x356c>
   14290:	mov	r3, #8
   14294:	mov	r0, r4
   14298:	str	r3, [sp]
   1429c:	rsb	r2, r2, #1
   142a0:	mvn	r3, #-2147483648	; 0x80000000
   142a4:	add	r1, sp, #28
   142a8:	bl	1642c <__assert_fail@plt+0x5608>
   142ac:	mov	r4, r0
   142b0:	str	r0, [r7]
   142b4:	ldr	r0, [r7, #4]
   142b8:	ldr	r2, [sp, #28]
   142bc:	mov	r1, #0
   142c0:	sub	r2, r2, r0
   142c4:	add	r0, r4, r0, lsl #3
   142c8:	lsl	r2, r2, #3
   142cc:	bl	10d94 <memset@plt>
   142d0:	ldr	r3, [sp, #28]
   142d4:	str	r3, [r7, #4]
   142d8:	ldr	r8, [sp, #36]	; 0x24
   142dc:	ldr	fp, [r4]
   142e0:	ldr	r7, [r4, #4]
   142e4:	ldr	r2, [sp, #72]	; 0x48
   142e8:	ldr	r3, [sp, #32]
   142ec:	ldr	ip, [sp, #76]	; 0x4c
   142f0:	orr	r8, r8, #1
   142f4:	str	r2, [sp, #12]
   142f8:	str	r3, [sp]
   142fc:	str	r8, [sp, #4]
   14300:	str	r5, [sp, #8]
   14304:	mov	r1, fp
   14308:	mov	r0, r7
   1430c:	str	ip, [sp, #16]
   14310:	mvn	r3, #0
   14314:	mov	r2, r6
   14318:	bl	11934 <__assert_fail@plt+0xb10>
   1431c:	cmp	fp, r0
   14320:	bhi	14380 <__assert_fail@plt+0x355c>
   14324:	ldr	r3, [pc, #156]	; 143c8 <__assert_fail@plt+0x35a4>
   14328:	add	fp, r0, #1
   1432c:	cmp	r7, r3
   14330:	str	fp, [r4]
   14334:	beq	14340 <__assert_fail@plt+0x351c>
   14338:	mov	r0, r7
   1433c:	bl	1739c <__assert_fail@plt+0x6578>
   14340:	mov	r0, fp
   14344:	bl	16210 <__assert_fail@plt+0x53ec>
   14348:	ldr	lr, [sp, #76]	; 0x4c
   1434c:	ldr	r3, [sp, #32]
   14350:	ldr	ip, [sp, #72]	; 0x48
   14354:	mov	r2, r6
   14358:	mov	r1, fp
   1435c:	str	r0, [r4, #4]
   14360:	str	r3, [sp]
   14364:	str	r5, [sp, #8]
   14368:	str	r8, [sp, #4]
   1436c:	str	lr, [sp, #16]
   14370:	str	ip, [sp, #12]
   14374:	mvn	r3, #0
   14378:	mov	r7, r0
   1437c:	bl	11934 <__assert_fail@plt+0xb10>
   14380:	mov	r0, r7
   14384:	str	sl, [r9]
   14388:	add	sp, sp, #84	; 0x54
   1438c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14390:	mov	r3, #8
   14394:	str	r3, [sp]
   14398:	add	r1, sp, #28
   1439c:	rsb	r2, r2, #1
   143a0:	mvn	r3, #-2147483648	; 0x80000000
   143a4:	mov	r0, #0
   143a8:	bl	1642c <__assert_fail@plt+0x5608>
   143ac:	mov	r4, r0
   143b0:	ldm	r8, {r0, r1}
   143b4:	str	r4, [r7]
   143b8:	stm	r4, {r0, r1}
   143bc:	b	142b4 <__assert_fail@plt+0x3490>
   143c0:	andeq	r9, r2, r4, asr r1
   143c4:	andeq	r9, r2, r4, ror #1
   143c8:	andeq	r9, r2, r4, lsl #3
   143cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d0:	mov	r6, r0
   143d4:	ldr	lr, [pc, #404]	; 14570 <__assert_fail@plt+0x374c>
   143d8:	sub	sp, sp, #84	; 0x54
   143dc:	add	ip, sp, #32
   143e0:	ldm	lr!, {r0, r1, r2, r3}
   143e4:	ldr	r5, [pc, #392]	; 14574 <__assert_fail@plt+0x3750>
   143e8:	stmia	ip!, {r0, r1, r2, r3}
   143ec:	ldm	lr!, {r0, r1, r2, r3}
   143f0:	ldr	r4, [sp, #44]	; 0x2c
   143f4:	stmia	ip!, {r0, r1, r2, r3}
   143f8:	ldm	lr, {r0, r1, r2, r3}
   143fc:	mvn	lr, r4
   14400:	and	lr, lr, #67108864	; 0x4000000
   14404:	eor	lr, lr, r4
   14408:	stm	ip, {r0, r1, r2, r3}
   1440c:	str	lr, [sp, #44]	; 0x2c
   14410:	bl	10d7c <__errno_location@plt>
   14414:	ldr	r2, [r5, #4]
   14418:	ldr	r4, [r5]
   1441c:	cmp	r2, #0
   14420:	mov	r8, r0
   14424:	ldr	sl, [r0]
   14428:	bgt	14484 <__assert_fail@plt+0x3660>
   1442c:	add	r7, r5, #8
   14430:	cmp	r4, r7
   14434:	str	r2, [sp, #28]
   14438:	beq	14540 <__assert_fail@plt+0x371c>
   1443c:	mov	r3, #8
   14440:	mov	r0, r4
   14444:	str	r3, [sp]
   14448:	rsb	r2, r2, #1
   1444c:	mvn	r3, #-2147483648	; 0x80000000
   14450:	add	r1, sp, #28
   14454:	bl	1642c <__assert_fail@plt+0x5608>
   14458:	mov	r4, r0
   1445c:	str	r0, [r5]
   14460:	ldr	r0, [r5, #4]
   14464:	ldr	r2, [sp, #28]
   14468:	mov	r1, #0
   1446c:	sub	r2, r2, r0
   14470:	add	r0, r4, r0, lsl #3
   14474:	lsl	r2, r2, #3
   14478:	bl	10d94 <memset@plt>
   1447c:	ldr	r3, [sp, #28]
   14480:	str	r3, [r5, #4]
   14484:	ldr	r7, [sp, #36]	; 0x24
   14488:	ldr	r9, [r4]
   1448c:	ldr	r5, [r4, #4]
   14490:	ldr	r2, [sp, #72]	; 0x48
   14494:	ldr	r3, [sp, #32]
   14498:	ldr	ip, [sp, #76]	; 0x4c
   1449c:	orr	r7, r7, #1
   144a0:	add	fp, sp, #40	; 0x28
   144a4:	str	r2, [sp, #12]
   144a8:	str	r3, [sp]
   144ac:	str	r7, [sp, #4]
   144b0:	mov	r1, r9
   144b4:	mov	r0, r5
   144b8:	str	ip, [sp, #16]
   144bc:	str	fp, [sp, #8]
   144c0:	mvn	r3, #0
   144c4:	mov	r2, r6
   144c8:	bl	11934 <__assert_fail@plt+0xb10>
   144cc:	cmp	r9, r0
   144d0:	bhi	14530 <__assert_fail@plt+0x370c>
   144d4:	ldr	r3, [pc, #156]	; 14578 <__assert_fail@plt+0x3754>
   144d8:	add	r9, r0, #1
   144dc:	cmp	r5, r3
   144e0:	str	r9, [r4]
   144e4:	beq	144f0 <__assert_fail@plt+0x36cc>
   144e8:	mov	r0, r5
   144ec:	bl	1739c <__assert_fail@plt+0x6578>
   144f0:	mov	r0, r9
   144f4:	bl	16210 <__assert_fail@plt+0x53ec>
   144f8:	ldr	lr, [sp, #76]	; 0x4c
   144fc:	ldr	r3, [sp, #32]
   14500:	ldr	ip, [sp, #72]	; 0x48
   14504:	mov	r2, r6
   14508:	mov	r1, r9
   1450c:	str	r0, [r4, #4]
   14510:	str	r3, [sp]
   14514:	str	fp, [sp, #8]
   14518:	str	r7, [sp, #4]
   1451c:	str	lr, [sp, #16]
   14520:	str	ip, [sp, #12]
   14524:	mvn	r3, #0
   14528:	mov	r5, r0
   1452c:	bl	11934 <__assert_fail@plt+0xb10>
   14530:	mov	r0, r5
   14534:	str	sl, [r8]
   14538:	add	sp, sp, #84	; 0x54
   1453c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14540:	mov	r3, #8
   14544:	str	r3, [sp]
   14548:	add	r1, sp, #28
   1454c:	rsb	r2, r2, #1
   14550:	mvn	r3, #-2147483648	; 0x80000000
   14554:	mov	r0, #0
   14558:	bl	1642c <__assert_fail@plt+0x5608>
   1455c:	mov	r4, r0
   14560:	ldm	r7, {r0, r1}
   14564:	str	r4, [r5]
   14568:	stm	r4, {r0, r1}
   1456c:	b	14460 <__assert_fail@plt+0x363c>
   14570:	andeq	r9, r2, r4, asr r1
   14574:	andeq	r9, r2, r4, ror #1
   14578:	andeq	r9, r2, r4, lsl #3
   1457c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14580:	mov	r9, r0
   14584:	ldr	lr, [pc, #416]	; 1472c <__assert_fail@plt+0x3908>
   14588:	mov	sl, r1
   1458c:	sub	sp, sp, #92	; 0x5c
   14590:	ldm	lr!, {r0, r1, r2, r3}
   14594:	add	ip, sp, #40	; 0x28
   14598:	ldr	r5, [pc, #400]	; 14730 <__assert_fail@plt+0x390c>
   1459c:	stmia	ip!, {r0, r1, r2, r3}
   145a0:	ldm	lr!, {r0, r1, r2, r3}
   145a4:	ldr	r4, [sp, #52]	; 0x34
   145a8:	stmia	ip!, {r0, r1, r2, r3}
   145ac:	ldm	lr, {r0, r1, r2, r3}
   145b0:	mvn	lr, r4
   145b4:	and	lr, lr, #67108864	; 0x4000000
   145b8:	eor	lr, lr, r4
   145bc:	stm	ip, {r0, r1, r2, r3}
   145c0:	str	lr, [sp, #52]	; 0x34
   145c4:	bl	10d7c <__errno_location@plt>
   145c8:	ldr	r2, [r5, #4]
   145cc:	ldr	r4, [r5]
   145d0:	cmp	r2, #0
   145d4:	ldr	r3, [r0]
   145d8:	mov	r7, r0
   145dc:	str	r3, [sp, #28]
   145e0:	bgt	1463c <__assert_fail@plt+0x3818>
   145e4:	add	r6, r5, #8
   145e8:	cmp	r4, r6
   145ec:	str	r2, [sp, #36]	; 0x24
   145f0:	beq	146fc <__assert_fail@plt+0x38d8>
   145f4:	mov	r3, #8
   145f8:	mov	r0, r4
   145fc:	str	r3, [sp]
   14600:	rsb	r2, r2, #1
   14604:	mvn	r3, #-2147483648	; 0x80000000
   14608:	add	r1, sp, #36	; 0x24
   1460c:	bl	1642c <__assert_fail@plt+0x5608>
   14610:	mov	r4, r0
   14614:	str	r0, [r5]
   14618:	ldr	r0, [r5, #4]
   1461c:	ldr	r2, [sp, #36]	; 0x24
   14620:	mov	r1, #0
   14624:	sub	r2, r2, r0
   14628:	add	r0, r4, r0, lsl #3
   1462c:	lsl	r2, r2, #3
   14630:	bl	10d94 <memset@plt>
   14634:	ldr	r3, [sp, #36]	; 0x24
   14638:	str	r3, [r5, #4]
   1463c:	ldr	r6, [sp, #44]	; 0x2c
   14640:	ldr	r8, [r4]
   14644:	ldr	r5, [r4, #4]
   14648:	ldr	r2, [sp, #80]	; 0x50
   1464c:	ldr	r3, [sp, #40]	; 0x28
   14650:	ldr	ip, [sp, #84]	; 0x54
   14654:	orr	r6, r6, #1
   14658:	add	fp, sp, #48	; 0x30
   1465c:	str	r2, [sp, #12]
   14660:	str	r3, [sp]
   14664:	str	r6, [sp, #4]
   14668:	mov	r1, r8
   1466c:	mov	r0, r5
   14670:	str	ip, [sp, #16]
   14674:	str	fp, [sp, #8]
   14678:	mov	r3, sl
   1467c:	mov	r2, r9
   14680:	bl	11934 <__assert_fail@plt+0xb10>
   14684:	cmp	r8, r0
   14688:	bhi	146e8 <__assert_fail@plt+0x38c4>
   1468c:	ldr	r3, [pc, #160]	; 14734 <__assert_fail@plt+0x3910>
   14690:	add	r8, r0, #1
   14694:	cmp	r5, r3
   14698:	str	r8, [r4]
   1469c:	beq	146a8 <__assert_fail@plt+0x3884>
   146a0:	mov	r0, r5
   146a4:	bl	1739c <__assert_fail@plt+0x6578>
   146a8:	mov	r0, r8
   146ac:	bl	16210 <__assert_fail@plt+0x53ec>
   146b0:	ldr	ip, [sp, #84]	; 0x54
   146b4:	ldr	lr, [sp, #40]	; 0x28
   146b8:	mov	r3, sl
   146bc:	mov	r2, r9
   146c0:	mov	r1, r8
   146c4:	str	r0, [r4, #4]
   146c8:	ldr	r4, [sp, #80]	; 0x50
   146cc:	str	fp, [sp, #8]
   146d0:	str	r6, [sp, #4]
   146d4:	str	ip, [sp, #16]
   146d8:	str	r4, [sp, #12]
   146dc:	str	lr, [sp]
   146e0:	mov	r5, r0
   146e4:	bl	11934 <__assert_fail@plt+0xb10>
   146e8:	ldr	r3, [sp, #28]
   146ec:	mov	r0, r5
   146f0:	str	r3, [r7]
   146f4:	add	sp, sp, #92	; 0x5c
   146f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146fc:	mov	r3, #8
   14700:	str	r3, [sp]
   14704:	add	r1, sp, #36	; 0x24
   14708:	rsb	r2, r2, #1
   1470c:	mvn	r3, #-2147483648	; 0x80000000
   14710:	mov	r0, #0
   14714:	bl	1642c <__assert_fail@plt+0x5608>
   14718:	mov	r4, r0
   1471c:	ldm	r6, {r0, r1}
   14720:	str	r4, [r5]
   14724:	stm	r4, {r0, r1}
   14728:	b	14618 <__assert_fail@plt+0x37f4>
   1472c:	andeq	r9, r2, r4, asr r1
   14730:	andeq	r9, r2, r4, ror #1
   14734:	andeq	r9, r2, r4, lsl #3
   14738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1473c:	sub	sp, sp, #180	; 0xb4
   14740:	mov	r6, r1
   14744:	mov	r4, r0
   14748:	mov	r9, r2
   1474c:	add	r0, sp, #80	; 0x50
   14750:	mov	r2, #48	; 0x30
   14754:	mov	r1, #0
   14758:	bl	10d94 <memset@plt>
   1475c:	cmp	r6, #10
   14760:	beq	14940 <__assert_fail@plt+0x3b1c>
   14764:	add	r5, sp, #80	; 0x50
   14768:	str	r6, [sp, #80]	; 0x50
   1476c:	ldm	r5!, {r0, r1, r2, r3}
   14770:	add	ip, sp, #128	; 0x80
   14774:	mov	r7, ip
   14778:	add	lr, sp, #32
   1477c:	stmia	ip!, {r0, r1, r2, r3}
   14780:	mov	r8, #67108864	; 0x4000000
   14784:	ldm	r5!, {r0, r1, r2, r3}
   14788:	ldr	r6, [pc, #436]	; 14944 <__assert_fail@plt+0x3b20>
   1478c:	stmia	ip!, {r0, r1, r2, r3}
   14790:	ldm	r5, {r0, r1, r2, r3}
   14794:	stm	ip, {r0, r1, r2, r3}
   14798:	ldm	r7!, {r0, r1, r2, r3}
   1479c:	stmia	lr!, {r0, r1, r2, r3}
   147a0:	ldm	r7!, {r0, r1, r2, r3}
   147a4:	str	r8, [sp, #44]	; 0x2c
   147a8:	stmia	lr!, {r0, r1, r2, r3}
   147ac:	ldm	ip, {r0, r1, r2, r3}
   147b0:	stm	lr, {r0, r1, r2, r3}
   147b4:	bl	10d7c <__errno_location@plt>
   147b8:	cmn	r4, #-2147483647	; 0x80000001
   147bc:	ldr	r5, [r6]
   147c0:	mov	r7, r0
   147c4:	movne	r0, #0
   147c8:	moveq	r0, #1
   147cc:	ldr	r3, [r7]
   147d0:	orrs	r0, r0, r4, lsr #31
   147d4:	str	r3, [sp, #24]
   147d8:	bne	14940 <__assert_fail@plt+0x3b1c>
   147dc:	ldr	r2, [r6, #4]
   147e0:	cmp	r4, r2
   147e4:	blt	14844 <__assert_fail@plt+0x3a20>
   147e8:	add	r8, r6, #8
   147ec:	cmp	r5, r8
   147f0:	str	r2, [sp, #80]	; 0x50
   147f4:	beq	14910 <__assert_fail@plt+0x3aec>
   147f8:	mov	r3, #8
   147fc:	sub	r2, r4, r2
   14800:	mov	r0, r5
   14804:	str	r3, [sp]
   14808:	add	r2, r2, #1
   1480c:	add	r1, sp, #80	; 0x50
   14810:	mvn	r3, #-2147483648	; 0x80000000
   14814:	bl	1642c <__assert_fail@plt+0x5608>
   14818:	mov	r5, r0
   1481c:	str	r0, [r6]
   14820:	ldr	r0, [r6, #4]
   14824:	ldr	r2, [sp, #80]	; 0x50
   14828:	mov	r1, #0
   1482c:	sub	r2, r2, r0
   14830:	add	r0, r5, r0, lsl #3
   14834:	lsl	r2, r2, #3
   14838:	bl	10d94 <memset@plt>
   1483c:	ldr	r3, [sp, #80]	; 0x50
   14840:	str	r3, [r6, #4]
   14844:	add	fp, r5, r4, lsl #3
   14848:	ldr	r1, [sp, #36]	; 0x24
   1484c:	ldr	r8, [r5, r4, lsl #3]
   14850:	ldr	r6, [fp, #4]
   14854:	ldr	r2, [sp, #72]	; 0x48
   14858:	ldr	r3, [sp, #32]
   1485c:	ldr	ip, [sp, #76]	; 0x4c
   14860:	orr	r1, r1, #1
   14864:	add	sl, sp, #40	; 0x28
   14868:	str	r1, [sp, #28]
   1486c:	str	r1, [sp, #4]
   14870:	str	r2, [sp, #12]
   14874:	str	r3, [sp]
   14878:	mov	r0, r6
   1487c:	mov	r1, r8
   14880:	str	ip, [sp, #16]
   14884:	str	sl, [sp, #8]
   14888:	mvn	r3, #0
   1488c:	mov	r2, r9
   14890:	bl	11934 <__assert_fail@plt+0xb10>
   14894:	cmp	r8, r0
   14898:	bhi	148fc <__assert_fail@plt+0x3ad8>
   1489c:	ldr	r3, [pc, #164]	; 14948 <__assert_fail@plt+0x3b24>
   148a0:	add	r8, r0, #1
   148a4:	cmp	r6, r3
   148a8:	str	r8, [r5, r4, lsl #3]
   148ac:	beq	148b8 <__assert_fail@plt+0x3a94>
   148b0:	mov	r0, r6
   148b4:	bl	1739c <__assert_fail@plt+0x6578>
   148b8:	mov	r0, r8
   148bc:	bl	16210 <__assert_fail@plt+0x53ec>
   148c0:	ldr	lr, [sp, #76]	; 0x4c
   148c4:	ldr	r3, [sp, #32]
   148c8:	ldr	ip, [sp, #72]	; 0x48
   148cc:	ldr	r4, [sp, #28]
   148d0:	mov	r2, r9
   148d4:	mov	r1, r8
   148d8:	str	r0, [fp, #4]
   148dc:	str	r3, [sp]
   148e0:	str	sl, [sp, #8]
   148e4:	str	r4, [sp, #4]
   148e8:	str	lr, [sp, #16]
   148ec:	str	ip, [sp, #12]
   148f0:	mvn	r3, #0
   148f4:	mov	r6, r0
   148f8:	bl	11934 <__assert_fail@plt+0xb10>
   148fc:	ldr	r3, [sp, #24]
   14900:	mov	r0, r6
   14904:	str	r3, [r7]
   14908:	add	sp, sp, #180	; 0xb4
   1490c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14910:	mov	r3, #8
   14914:	sub	r2, r4, r2
   14918:	add	r1, sp, #80	; 0x50
   1491c:	str	r3, [sp]
   14920:	add	r2, r2, #1
   14924:	mvn	r3, #-2147483648	; 0x80000000
   14928:	bl	1642c <__assert_fail@plt+0x5608>
   1492c:	mov	r5, r0
   14930:	ldm	r8, {r0, r1}
   14934:	str	r5, [r6]
   14938:	stm	r5, {r0, r1}
   1493c:	b	14820 <__assert_fail@plt+0x39fc>
   14940:	bl	10e18 <abort@plt>
   14944:	andeq	r9, r2, r4, ror #1
   14948:	andeq	r9, r2, r4, lsl #3
   1494c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14950:	mov	r7, r1
   14954:	ldr	lr, [pc, #492]	; 14b48 <__assert_fail@plt+0x3d24>
   14958:	mov	r8, r2
   1495c:	mov	r4, r0
   14960:	mov	fp, r3
   14964:	ldm	lr!, {r0, r1, r2, r3}
   14968:	sub	sp, sp, #100	; 0x64
   1496c:	add	ip, sp, #48	; 0x30
   14970:	mov	sl, #10
   14974:	stmia	ip!, {r0, r1, r2, r3}
   14978:	cmp	r8, #0
   1497c:	cmpne	r7, #0
   14980:	ldm	lr!, {r0, r1, r2, r3}
   14984:	str	sl, [sp, #48]	; 0x30
   14988:	stmia	ip!, {r0, r1, r2, r3}
   1498c:	ldm	lr, {r0, r1, r2, r3}
   14990:	stm	ip, {r0, r1, r2, r3}
   14994:	beq	14b44 <__assert_fail@plt+0x3d20>
   14998:	str	r7, [sp, #88]	; 0x58
   1499c:	str	r8, [sp, #92]	; 0x5c
   149a0:	bl	10d7c <__errno_location@plt>
   149a4:	ldr	r6, [pc, #416]	; 14b4c <__assert_fail@plt+0x3d28>
   149a8:	cmn	r4, #-2147483647	; 0x80000001
   149ac:	ldr	r5, [r6]
   149b0:	mov	r9, r0
   149b4:	movne	r0, #0
   149b8:	moveq	r0, #1
   149bc:	ldr	r3, [r9]
   149c0:	orrs	r0, r0, r4, lsr #31
   149c4:	str	r3, [sp, #28]
   149c8:	bne	14b44 <__assert_fail@plt+0x3d20>
   149cc:	ldr	r2, [r6, #4]
   149d0:	cmp	r4, r2
   149d4:	movlt	r3, sl
   149d8:	blt	14a44 <__assert_fail@plt+0x3c20>
   149dc:	add	r7, r6, #8
   149e0:	cmp	r5, r7
   149e4:	str	r2, [sp, #44]	; 0x2c
   149e8:	beq	14b14 <__assert_fail@plt+0x3cf0>
   149ec:	mov	r3, #8
   149f0:	sub	r2, r4, r2
   149f4:	mov	r0, r5
   149f8:	str	r3, [sp]
   149fc:	add	r2, r2, #1
   14a00:	mvn	r3, #-2147483648	; 0x80000000
   14a04:	add	r1, sp, #44	; 0x2c
   14a08:	bl	1642c <__assert_fail@plt+0x5608>
   14a0c:	mov	r5, r0
   14a10:	str	r0, [r6]
   14a14:	ldr	r0, [r6, #4]
   14a18:	ldr	r2, [sp, #44]	; 0x2c
   14a1c:	mov	r1, #0
   14a20:	sub	r2, r2, r0
   14a24:	add	r0, r5, r0, lsl #3
   14a28:	lsl	r2, r2, #3
   14a2c:	bl	10d94 <memset@plt>
   14a30:	ldr	r3, [sp, #48]	; 0x30
   14a34:	ldr	r7, [sp, #88]	; 0x58
   14a38:	ldr	r8, [sp, #92]	; 0x5c
   14a3c:	ldr	r2, [sp, #44]	; 0x2c
   14a40:	str	r2, [r6, #4]
   14a44:	add	r2, r5, r4, lsl #3
   14a48:	mov	r1, r2
   14a4c:	str	r2, [sp, #32]
   14a50:	ldr	r2, [sp, #52]	; 0x34
   14a54:	ldr	r6, [r1, #4]
   14a58:	ldr	sl, [r5, r4, lsl #3]
   14a5c:	orr	r2, r2, #1
   14a60:	str	r3, [sp]
   14a64:	add	r3, sp, #56	; 0x38
   14a68:	str	r2, [sp, #36]	; 0x24
   14a6c:	str	r2, [sp, #4]
   14a70:	str	r3, [sp, #8]
   14a74:	mov	r0, r6
   14a78:	str	r8, [sp, #16]
   14a7c:	str	r7, [sp, #12]
   14a80:	mov	r1, sl
   14a84:	mvn	r3, #0
   14a88:	mov	r2, fp
   14a8c:	bl	11934 <__assert_fail@plt+0xb10>
   14a90:	cmp	sl, r0
   14a94:	bhi	14b00 <__assert_fail@plt+0x3cdc>
   14a98:	ldr	r3, [pc, #176]	; 14b50 <__assert_fail@plt+0x3d2c>
   14a9c:	add	r7, r0, #1
   14aa0:	cmp	r6, r3
   14aa4:	str	r7, [r5, r4, lsl #3]
   14aa8:	beq	14ab4 <__assert_fail@plt+0x3c90>
   14aac:	mov	r0, r6
   14ab0:	bl	1739c <__assert_fail@plt+0x6578>
   14ab4:	mov	r0, r7
   14ab8:	bl	16210 <__assert_fail@plt+0x53ec>
   14abc:	ldr	r3, [sp, #32]
   14ac0:	ldr	lr, [sp, #92]	; 0x5c
   14ac4:	ldr	ip, [sp, #88]	; 0x58
   14ac8:	ldr	r4, [sp, #36]	; 0x24
   14acc:	mov	r2, fp
   14ad0:	mov	r1, r7
   14ad4:	str	r0, [r3, #4]
   14ad8:	add	r3, sp, #56	; 0x38
   14adc:	str	r3, [sp, #8]
   14ae0:	ldr	r3, [sp, #48]	; 0x30
   14ae4:	str	r4, [sp, #4]
   14ae8:	str	r3, [sp]
   14aec:	str	lr, [sp, #16]
   14af0:	str	ip, [sp, #12]
   14af4:	mvn	r3, #0
   14af8:	mov	r6, r0
   14afc:	bl	11934 <__assert_fail@plt+0xb10>
   14b00:	ldr	r3, [sp, #28]
   14b04:	mov	r0, r6
   14b08:	str	r3, [r9]
   14b0c:	add	sp, sp, #100	; 0x64
   14b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b14:	mov	r3, #8
   14b18:	sub	r2, r4, r2
   14b1c:	str	r3, [sp]
   14b20:	add	r1, sp, #44	; 0x2c
   14b24:	add	r2, r2, #1
   14b28:	mvn	r3, #-2147483648	; 0x80000000
   14b2c:	bl	1642c <__assert_fail@plt+0x5608>
   14b30:	mov	r5, r0
   14b34:	ldm	r7, {r0, r1}
   14b38:	str	r5, [r6]
   14b3c:	stm	r5, {r0, r1}
   14b40:	b	14a14 <__assert_fail@plt+0x3bf0>
   14b44:	bl	10e18 <abort@plt>
   14b48:	andeq	r9, r2, r4, asr r1
   14b4c:	andeq	r9, r2, r4, ror #1
   14b50:	andeq	r9, r2, r4, lsl #3
   14b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b58:	mov	r7, r1
   14b5c:	ldr	lr, [pc, #492]	; 14d50 <__assert_fail@plt+0x3f2c>
   14b60:	mov	r8, r2
   14b64:	mov	r4, r0
   14b68:	mov	fp, r3
   14b6c:	ldm	lr!, {r0, r1, r2, r3}
   14b70:	sub	sp, sp, #100	; 0x64
   14b74:	add	ip, sp, #48	; 0x30
   14b78:	mov	sl, #10
   14b7c:	stmia	ip!, {r0, r1, r2, r3}
   14b80:	cmp	r8, #0
   14b84:	cmpne	r7, #0
   14b88:	ldm	lr!, {r0, r1, r2, r3}
   14b8c:	str	sl, [sp, #48]	; 0x30
   14b90:	stmia	ip!, {r0, r1, r2, r3}
   14b94:	ldm	lr, {r0, r1, r2, r3}
   14b98:	stm	ip, {r0, r1, r2, r3}
   14b9c:	beq	14d4c <__assert_fail@plt+0x3f28>
   14ba0:	str	r7, [sp, #88]	; 0x58
   14ba4:	str	r8, [sp, #92]	; 0x5c
   14ba8:	bl	10d7c <__errno_location@plt>
   14bac:	ldr	r6, [pc, #416]	; 14d54 <__assert_fail@plt+0x3f30>
   14bb0:	cmn	r4, #-2147483647	; 0x80000001
   14bb4:	ldr	r5, [r6]
   14bb8:	mov	r9, r0
   14bbc:	movne	r0, #0
   14bc0:	moveq	r0, #1
   14bc4:	ldr	r3, [r9]
   14bc8:	orrs	r0, r0, r4, lsr #31
   14bcc:	str	r3, [sp, #28]
   14bd0:	bne	14d4c <__assert_fail@plt+0x3f28>
   14bd4:	ldr	r2, [r6, #4]
   14bd8:	cmp	r4, r2
   14bdc:	movlt	r3, sl
   14be0:	blt	14c4c <__assert_fail@plt+0x3e28>
   14be4:	add	r7, r6, #8
   14be8:	cmp	r5, r7
   14bec:	str	r2, [sp, #44]	; 0x2c
   14bf0:	beq	14d1c <__assert_fail@plt+0x3ef8>
   14bf4:	mov	r3, #8
   14bf8:	sub	r2, r4, r2
   14bfc:	mov	r0, r5
   14c00:	str	r3, [sp]
   14c04:	add	r2, r2, #1
   14c08:	mvn	r3, #-2147483648	; 0x80000000
   14c0c:	add	r1, sp, #44	; 0x2c
   14c10:	bl	1642c <__assert_fail@plt+0x5608>
   14c14:	mov	r5, r0
   14c18:	str	r0, [r6]
   14c1c:	ldr	r0, [r6, #4]
   14c20:	ldr	r2, [sp, #44]	; 0x2c
   14c24:	mov	r1, #0
   14c28:	sub	r2, r2, r0
   14c2c:	add	r0, r5, r0, lsl #3
   14c30:	lsl	r2, r2, #3
   14c34:	bl	10d94 <memset@plt>
   14c38:	ldr	r3, [sp, #48]	; 0x30
   14c3c:	ldr	r7, [sp, #88]	; 0x58
   14c40:	ldr	r8, [sp, #92]	; 0x5c
   14c44:	ldr	r2, [sp, #44]	; 0x2c
   14c48:	str	r2, [r6, #4]
   14c4c:	add	r2, r5, r4, lsl #3
   14c50:	mov	r1, r2
   14c54:	str	r2, [sp, #32]
   14c58:	ldr	r2, [sp, #52]	; 0x34
   14c5c:	ldr	r6, [r1, #4]
   14c60:	ldr	sl, [r5, r4, lsl #3]
   14c64:	orr	r2, r2, #1
   14c68:	str	r3, [sp]
   14c6c:	add	r3, sp, #56	; 0x38
   14c70:	str	r2, [sp, #36]	; 0x24
   14c74:	str	r2, [sp, #4]
   14c78:	str	r3, [sp, #8]
   14c7c:	mov	r0, r6
   14c80:	str	r8, [sp, #16]
   14c84:	str	r7, [sp, #12]
   14c88:	mov	r1, sl
   14c8c:	ldr	r3, [sp, #136]	; 0x88
   14c90:	mov	r2, fp
   14c94:	bl	11934 <__assert_fail@plt+0xb10>
   14c98:	cmp	sl, r0
   14c9c:	bhi	14d08 <__assert_fail@plt+0x3ee4>
   14ca0:	ldr	r3, [pc, #176]	; 14d58 <__assert_fail@plt+0x3f34>
   14ca4:	add	r7, r0, #1
   14ca8:	cmp	r6, r3
   14cac:	str	r7, [r5, r4, lsl #3]
   14cb0:	beq	14cbc <__assert_fail@plt+0x3e98>
   14cb4:	mov	r0, r6
   14cb8:	bl	1739c <__assert_fail@plt+0x6578>
   14cbc:	mov	r0, r7
   14cc0:	bl	16210 <__assert_fail@plt+0x53ec>
   14cc4:	ldr	r3, [sp, #32]
   14cc8:	ldr	lr, [sp, #92]	; 0x5c
   14ccc:	ldr	ip, [sp, #88]	; 0x58
   14cd0:	ldr	r4, [sp, #36]	; 0x24
   14cd4:	mov	r2, fp
   14cd8:	mov	r1, r7
   14cdc:	str	r0, [r3, #4]
   14ce0:	add	r3, sp, #56	; 0x38
   14ce4:	str	r3, [sp, #8]
   14ce8:	ldr	r3, [sp, #48]	; 0x30
   14cec:	str	r4, [sp, #4]
   14cf0:	str	r3, [sp]
   14cf4:	str	lr, [sp, #16]
   14cf8:	str	ip, [sp, #12]
   14cfc:	ldr	r3, [sp, #136]	; 0x88
   14d00:	mov	r6, r0
   14d04:	bl	11934 <__assert_fail@plt+0xb10>
   14d08:	ldr	r3, [sp, #28]
   14d0c:	mov	r0, r6
   14d10:	str	r3, [r9]
   14d14:	add	sp, sp, #100	; 0x64
   14d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d1c:	mov	r3, #8
   14d20:	sub	r2, r4, r2
   14d24:	str	r3, [sp]
   14d28:	add	r1, sp, #44	; 0x2c
   14d2c:	add	r2, r2, #1
   14d30:	mvn	r3, #-2147483648	; 0x80000000
   14d34:	bl	1642c <__assert_fail@plt+0x5608>
   14d38:	mov	r5, r0
   14d3c:	ldm	r7, {r0, r1}
   14d40:	str	r5, [r6]
   14d44:	stm	r5, {r0, r1}
   14d48:	b	14c1c <__assert_fail@plt+0x3df8>
   14d4c:	bl	10e18 <abort@plt>
   14d50:	andeq	r9, r2, r4, asr r1
   14d54:	andeq	r9, r2, r4, ror #1
   14d58:	andeq	r9, r2, r4, lsl #3
   14d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d60:	mov	r5, r0
   14d64:	ldr	lr, [pc, #452]	; 14f30 <__assert_fail@plt+0x410c>
   14d68:	mov	r6, r1
   14d6c:	mov	sl, r2
   14d70:	ldm	lr!, {r0, r1, r2, r3}
   14d74:	sub	sp, sp, #92	; 0x5c
   14d78:	add	ip, sp, #40	; 0x28
   14d7c:	cmp	r6, #0
   14d80:	cmpne	r5, #0
   14d84:	stmia	ip!, {r0, r1, r2, r3}
   14d88:	mov	r9, #10
   14d8c:	ldm	lr!, {r0, r1, r2, r3}
   14d90:	moveq	fp, #1
   14d94:	movne	fp, #0
   14d98:	str	r9, [sp, #40]	; 0x28
   14d9c:	stmia	ip!, {r0, r1, r2, r3}
   14da0:	ldm	lr, {r0, r1, r2, r3}
   14da4:	stm	ip, {r0, r1, r2, r3}
   14da8:	beq	14f2c <__assert_fail@plt+0x4108>
   14dac:	str	r5, [sp, #80]	; 0x50
   14db0:	str	r6, [sp, #84]	; 0x54
   14db4:	bl	10d7c <__errno_location@plt>
   14db8:	ldr	r7, [pc, #372]	; 14f34 <__assert_fail@plt+0x4110>
   14dbc:	ldr	r2, [r7, #4]
   14dc0:	ldr	r4, [r7]
   14dc4:	cmp	r2, #0
   14dc8:	ldr	r3, [r0]
   14dcc:	mov	r8, r0
   14dd0:	str	r3, [sp, #24]
   14dd4:	movgt	r3, r9
   14dd8:	bgt	14e40 <__assert_fail@plt+0x401c>
   14ddc:	add	r5, r7, #8
   14de0:	cmp	r4, r5
   14de4:	str	r2, [sp, #36]	; 0x24
   14de8:	beq	14efc <__assert_fail@plt+0x40d8>
   14dec:	mov	r3, #8
   14df0:	mov	r0, r4
   14df4:	str	r3, [sp]
   14df8:	rsb	r2, r2, #1
   14dfc:	mvn	r3, #-2147483648	; 0x80000000
   14e00:	add	r1, sp, #36	; 0x24
   14e04:	bl	1642c <__assert_fail@plt+0x5608>
   14e08:	mov	r4, r0
   14e0c:	str	r0, [r7]
   14e10:	ldr	r0, [r7, #4]
   14e14:	ldr	r2, [sp, #36]	; 0x24
   14e18:	mov	r1, #0
   14e1c:	sub	r2, r2, r0
   14e20:	add	r0, r4, r0, lsl #3
   14e24:	lsl	r2, r2, #3
   14e28:	bl	10d94 <memset@plt>
   14e2c:	ldr	r3, [sp, #40]	; 0x28
   14e30:	ldr	r5, [sp, #80]	; 0x50
   14e34:	ldr	r6, [sp, #84]	; 0x54
   14e38:	ldr	r2, [sp, #36]	; 0x24
   14e3c:	str	r2, [r7, #4]
   14e40:	ldr	r2, [sp, #44]	; 0x2c
   14e44:	ldr	r9, [r4]
   14e48:	ldr	r7, [r4, #4]
   14e4c:	orr	r2, r2, #1
   14e50:	add	fp, sp, #48	; 0x30
   14e54:	str	r2, [sp, #28]
   14e58:	str	r2, [sp, #4]
   14e5c:	str	r3, [sp]
   14e60:	str	r6, [sp, #16]
   14e64:	str	r5, [sp, #12]
   14e68:	mov	r1, r9
   14e6c:	mov	r0, r7
   14e70:	str	fp, [sp, #8]
   14e74:	mvn	r3, #0
   14e78:	mov	r2, sl
   14e7c:	bl	11934 <__assert_fail@plt+0xb10>
   14e80:	cmp	r9, r0
   14e84:	bhi	14ee8 <__assert_fail@plt+0x40c4>
   14e88:	ldr	r3, [pc, #168]	; 14f38 <__assert_fail@plt+0x4114>
   14e8c:	add	r5, r0, #1
   14e90:	cmp	r7, r3
   14e94:	str	r5, [r4]
   14e98:	beq	14ea4 <__assert_fail@plt+0x4080>
   14e9c:	mov	r0, r7
   14ea0:	bl	1739c <__assert_fail@plt+0x6578>
   14ea4:	mov	r0, r5
   14ea8:	bl	16210 <__assert_fail@plt+0x53ec>
   14eac:	ldr	lr, [sp, #84]	; 0x54
   14eb0:	ldr	r3, [sp, #40]	; 0x28
   14eb4:	ldr	ip, [sp, #80]	; 0x50
   14eb8:	mov	r2, sl
   14ebc:	mov	r1, r5
   14ec0:	str	r0, [r4, #4]
   14ec4:	ldr	r4, [sp, #28]
   14ec8:	str	r3, [sp]
   14ecc:	str	fp, [sp, #8]
   14ed0:	str	r4, [sp, #4]
   14ed4:	str	lr, [sp, #16]
   14ed8:	str	ip, [sp, #12]
   14edc:	mvn	r3, #0
   14ee0:	mov	r7, r0
   14ee4:	bl	11934 <__assert_fail@plt+0xb10>
   14ee8:	ldr	r3, [sp, #24]
   14eec:	mov	r0, r7
   14ef0:	str	r3, [r8]
   14ef4:	add	sp, sp, #92	; 0x5c
   14ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14efc:	mov	r3, #8
   14f00:	str	r3, [sp]
   14f04:	add	r1, sp, #36	; 0x24
   14f08:	rsb	r2, r2, #1
   14f0c:	mov	r0, fp
   14f10:	mvn	r3, #-2147483648	; 0x80000000
   14f14:	bl	1642c <__assert_fail@plt+0x5608>
   14f18:	mov	r4, r0
   14f1c:	ldm	r5, {r0, r1}
   14f20:	str	r4, [r7]
   14f24:	stm	r4, {r0, r1}
   14f28:	b	14e10 <__assert_fail@plt+0x3fec>
   14f2c:	bl	10e18 <abort@plt>
   14f30:	andeq	r9, r2, r4, asr r1
   14f34:	andeq	r9, r2, r4, ror #1
   14f38:	andeq	r9, r2, r4, lsl #3
   14f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f40:	mov	r5, r0
   14f44:	ldr	lr, [pc, #464]	; 1511c <__assert_fail@plt+0x42f8>
   14f48:	mov	r6, r1
   14f4c:	mov	sl, r2
   14f50:	mov	fp, r3
   14f54:	ldm	lr!, {r0, r1, r2, r3}
   14f58:	sub	sp, sp, #92	; 0x5c
   14f5c:	add	ip, sp, #40	; 0x28
   14f60:	cmp	r6, #0
   14f64:	cmpne	r5, #0
   14f68:	stmia	ip!, {r0, r1, r2, r3}
   14f6c:	moveq	r4, #1
   14f70:	ldm	lr!, {r0, r1, r2, r3}
   14f74:	movne	r4, #0
   14f78:	mov	r9, #10
   14f7c:	str	r4, [sp, #28]
   14f80:	stmia	ip!, {r0, r1, r2, r3}
   14f84:	ldm	lr, {r0, r1, r2, r3}
   14f88:	str	r9, [sp, #40]	; 0x28
   14f8c:	stm	ip, {r0, r1, r2, r3}
   14f90:	beq	15118 <__assert_fail@plt+0x42f4>
   14f94:	str	r5, [sp, #80]	; 0x50
   14f98:	str	r6, [sp, #84]	; 0x54
   14f9c:	bl	10d7c <__errno_location@plt>
   14fa0:	ldr	r7, [pc, #376]	; 15120 <__assert_fail@plt+0x42fc>
   14fa4:	ldr	r2, [r7, #4]
   14fa8:	ldr	r4, [r7]
   14fac:	cmp	r2, #0
   14fb0:	ldr	r3, [r0]
   14fb4:	mov	r8, r0
   14fb8:	str	r3, [sp, #24]
   14fbc:	movgt	r3, r9
   14fc0:	bgt	15028 <__assert_fail@plt+0x4204>
   14fc4:	add	r5, r7, #8
   14fc8:	cmp	r4, r5
   14fcc:	str	r2, [sp, #36]	; 0x24
   14fd0:	beq	150e8 <__assert_fail@plt+0x42c4>
   14fd4:	mov	r3, #8
   14fd8:	mov	r0, r4
   14fdc:	str	r3, [sp]
   14fe0:	rsb	r2, r2, #1
   14fe4:	mvn	r3, #-2147483648	; 0x80000000
   14fe8:	add	r1, sp, #36	; 0x24
   14fec:	bl	1642c <__assert_fail@plt+0x5608>
   14ff0:	mov	r4, r0
   14ff4:	str	r0, [r7]
   14ff8:	ldr	r0, [r7, #4]
   14ffc:	ldr	r2, [sp, #36]	; 0x24
   15000:	mov	r1, #0
   15004:	sub	r2, r2, r0
   15008:	add	r0, r4, r0, lsl #3
   1500c:	lsl	r2, r2, #3
   15010:	bl	10d94 <memset@plt>
   15014:	ldr	r3, [sp, #40]	; 0x28
   15018:	ldr	r5, [sp, #80]	; 0x50
   1501c:	ldr	r6, [sp, #84]	; 0x54
   15020:	ldr	r2, [sp, #36]	; 0x24
   15024:	str	r2, [r7, #4]
   15028:	ldr	r2, [sp, #44]	; 0x2c
   1502c:	ldr	r9, [r4]
   15030:	ldr	r7, [r4, #4]
   15034:	orr	r2, r2, #1
   15038:	str	r3, [sp]
   1503c:	add	r3, sp, #48	; 0x30
   15040:	str	r2, [sp, #28]
   15044:	str	r2, [sp, #4]
   15048:	str	r3, [sp, #8]
   1504c:	str	r6, [sp, #16]
   15050:	str	r5, [sp, #12]
   15054:	mov	r1, r9
   15058:	mov	r0, r7
   1505c:	mov	r3, fp
   15060:	mov	r2, sl
   15064:	bl	11934 <__assert_fail@plt+0xb10>
   15068:	cmp	r9, r0
   1506c:	bhi	150d4 <__assert_fail@plt+0x42b0>
   15070:	ldr	r3, [pc, #172]	; 15124 <__assert_fail@plt+0x4300>
   15074:	add	r5, r0, #1
   15078:	cmp	r7, r3
   1507c:	str	r5, [r4]
   15080:	beq	1508c <__assert_fail@plt+0x4268>
   15084:	mov	r0, r7
   15088:	bl	1739c <__assert_fail@plt+0x6578>
   1508c:	mov	r0, r5
   15090:	bl	16210 <__assert_fail@plt+0x53ec>
   15094:	add	lr, sp, #48	; 0x30
   15098:	ldr	ip, [sp, #84]	; 0x54
   1509c:	mov	r1, r5
   150a0:	ldr	r5, [sp, #28]
   150a4:	mov	r3, fp
   150a8:	mov	r2, sl
   150ac:	str	r0, [r4, #4]
   150b0:	ldr	r4, [sp, #80]	; 0x50
   150b4:	str	lr, [sp, #8]
   150b8:	ldr	lr, [sp, #40]	; 0x28
   150bc:	str	r5, [sp, #4]
   150c0:	str	ip, [sp, #16]
   150c4:	str	r4, [sp, #12]
   150c8:	str	lr, [sp]
   150cc:	mov	r7, r0
   150d0:	bl	11934 <__assert_fail@plt+0xb10>
   150d4:	ldr	r3, [sp, #24]
   150d8:	mov	r0, r7
   150dc:	str	r3, [r8]
   150e0:	add	sp, sp, #92	; 0x5c
   150e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	mov	r3, #8
   150ec:	str	r3, [sp]
   150f0:	add	r1, sp, #36	; 0x24
   150f4:	rsb	r2, r2, #1
   150f8:	ldr	r0, [sp, #28]
   150fc:	mvn	r3, #-2147483648	; 0x80000000
   15100:	bl	1642c <__assert_fail@plt+0x5608>
   15104:	mov	r4, r0
   15108:	ldm	r5, {r0, r1}
   1510c:	str	r4, [r7]
   15110:	stm	r4, {r0, r1}
   15114:	b	14ff8 <__assert_fail@plt+0x41d4>
   15118:	bl	10e18 <abort@plt>
   1511c:	andeq	r9, r2, r4, asr r1
   15120:	andeq	r9, r2, r4, ror #1
   15124:	andeq	r9, r2, r4, lsl #3
   15128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1512c:	sub	sp, sp, #52	; 0x34
   15130:	mov	r5, r0
   15134:	mov	sl, r1
   15138:	mov	fp, r2
   1513c:	bl	10d7c <__errno_location@plt>
   15140:	ldr	r4, [pc, #404]	; 152dc <__assert_fail@plt+0x44b8>
   15144:	cmn	r5, #-2147483647	; 0x80000001
   15148:	ldr	r6, [r4]
   1514c:	mov	r8, r0
   15150:	movne	r0, #0
   15154:	moveq	r0, #1
   15158:	ldr	r3, [r8]
   1515c:	orrs	r0, r0, r5, lsr #31
   15160:	str	r3, [sp, #28]
   15164:	bne	152d8 <__assert_fail@plt+0x44b4>
   15168:	ldr	r2, [r4, #4]
   1516c:	cmp	r5, r2
   15170:	blt	151d0 <__assert_fail@plt+0x43ac>
   15174:	add	r7, r4, #8
   15178:	cmp	r6, r7
   1517c:	str	r2, [sp, #44]	; 0x2c
   15180:	beq	152a8 <__assert_fail@plt+0x4484>
   15184:	mov	r3, #8
   15188:	sub	r2, r5, r2
   1518c:	mov	r0, r6
   15190:	str	r3, [sp]
   15194:	add	r2, r2, #1
   15198:	mvn	r3, #-2147483648	; 0x80000000
   1519c:	add	r1, sp, #44	; 0x2c
   151a0:	bl	1642c <__assert_fail@plt+0x5608>
   151a4:	mov	r6, r0
   151a8:	str	r0, [r4]
   151ac:	ldr	r0, [r4, #4]
   151b0:	ldr	r2, [sp, #44]	; 0x2c
   151b4:	mov	r1, #0
   151b8:	sub	r2, r2, r0
   151bc:	add	r0, r6, r0, lsl #3
   151c0:	lsl	r2, r2, #3
   151c4:	bl	10d94 <memset@plt>
   151c8:	ldr	r3, [sp, #44]	; 0x2c
   151cc:	str	r3, [r4, #4]
   151d0:	ldr	r2, [r4, #56]	; 0x38
   151d4:	add	r3, r6, r5, lsl #3
   151d8:	ldr	r1, [r4, #20]
   151dc:	ldr	r7, [r3, #4]
   151e0:	ldr	r9, [r6, r5, lsl #3]
   151e4:	ldr	ip, [r4, #60]	; 0x3c
   151e8:	str	r3, [sp, #32]
   151ec:	ldr	r3, [r4, #16]
   151f0:	str	r2, [sp, #12]
   151f4:	ldr	r2, [pc, #228]	; 152e0 <__assert_fail@plt+0x44bc>
   151f8:	orr	r1, r1, #1
   151fc:	str	r1, [sp, #36]	; 0x24
   15200:	str	r1, [sp, #4]
   15204:	str	r2, [sp, #8]
   15208:	str	r3, [sp]
   1520c:	mov	r0, r7
   15210:	mov	r1, r9
   15214:	str	ip, [sp, #16]
   15218:	mov	r3, fp
   1521c:	mov	r2, sl
   15220:	bl	11934 <__assert_fail@plt+0xb10>
   15224:	cmp	r9, r0
   15228:	bhi	15294 <__assert_fail@plt+0x4470>
   1522c:	ldr	r3, [pc, #176]	; 152e4 <__assert_fail@plt+0x44c0>
   15230:	add	r9, r0, #1
   15234:	cmp	r7, r3
   15238:	str	r9, [r6, r5, lsl #3]
   1523c:	beq	15248 <__assert_fail@plt+0x4424>
   15240:	mov	r0, r7
   15244:	bl	1739c <__assert_fail@plt+0x6578>
   15248:	mov	r0, r9
   1524c:	bl	16210 <__assert_fail@plt+0x53ec>
   15250:	ldr	ip, [sp, #32]
   15254:	ldr	lr, [r4, #60]	; 0x3c
   15258:	ldr	r5, [r4, #56]	; 0x38
   1525c:	mov	r3, fp
   15260:	mov	r2, sl
   15264:	mov	r1, r9
   15268:	str	r0, [ip, #4]
   1526c:	ldr	ip, [r4, #16]
   15270:	ldr	r4, [pc, #104]	; 152e0 <__assert_fail@plt+0x44bc>
   15274:	str	lr, [sp, #16]
   15278:	str	r4, [sp, #8]
   1527c:	ldr	r4, [sp, #36]	; 0x24
   15280:	str	r5, [sp, #12]
   15284:	str	r4, [sp, #4]
   15288:	str	ip, [sp]
   1528c:	mov	r7, r0
   15290:	bl	11934 <__assert_fail@plt+0xb10>
   15294:	ldr	r3, [sp, #28]
   15298:	mov	r0, r7
   1529c:	str	r3, [r8]
   152a0:	add	sp, sp, #52	; 0x34
   152a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152a8:	mov	r3, #8
   152ac:	sub	r2, r5, r2
   152b0:	str	r3, [sp]
   152b4:	add	r1, sp, #44	; 0x2c
   152b8:	add	r2, r2, #1
   152bc:	mvn	r3, #-2147483648	; 0x80000000
   152c0:	bl	1642c <__assert_fail@plt+0x5608>
   152c4:	mov	r6, r0
   152c8:	ldm	r7, {r0, r1}
   152cc:	str	r6, [r4]
   152d0:	stm	r6, {r0, r1}
   152d4:	b	151ac <__assert_fail@plt+0x4388>
   152d8:	bl	10e18 <abort@plt>
   152dc:	andeq	r9, r2, r4, ror #1
   152e0:	strdeq	r9, [r2], -ip
   152e4:	andeq	r9, r2, r4, lsl #3
   152e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152ec:	sub	sp, sp, #44	; 0x2c
   152f0:	mov	r9, r0
   152f4:	mov	sl, r1
   152f8:	bl	10d7c <__errno_location@plt>
   152fc:	ldr	r4, [pc, #360]	; 1546c <__assert_fail@plt+0x4648>
   15300:	ldr	r2, [r4, #4]
   15304:	ldr	r5, [r4]
   15308:	cmp	r2, #0
   1530c:	ldr	r3, [r0]
   15310:	mov	r7, r0
   15314:	str	r3, [sp, #24]
   15318:	bgt	15374 <__assert_fail@plt+0x4550>
   1531c:	add	r6, r4, #8
   15320:	cmp	r5, r6
   15324:	str	r2, [sp, #36]	; 0x24
   15328:	beq	1543c <__assert_fail@plt+0x4618>
   1532c:	mov	r3, #8
   15330:	mov	r0, r5
   15334:	str	r3, [sp]
   15338:	rsb	r2, r2, #1
   1533c:	mvn	r3, #-2147483648	; 0x80000000
   15340:	add	r1, sp, #36	; 0x24
   15344:	bl	1642c <__assert_fail@plt+0x5608>
   15348:	mov	r5, r0
   1534c:	str	r0, [r4]
   15350:	ldr	r0, [r4, #4]
   15354:	ldr	r2, [sp, #36]	; 0x24
   15358:	mov	r1, #0
   1535c:	sub	r2, r2, r0
   15360:	add	r0, r5, r0, lsl #3
   15364:	lsl	r2, r2, #3
   15368:	bl	10d94 <memset@plt>
   1536c:	ldr	r3, [sp, #36]	; 0x24
   15370:	str	r3, [r4, #4]
   15374:	ldr	r1, [r4, #20]
   15378:	ldr	r8, [r5]
   1537c:	ldr	r6, [r5, #4]
   15380:	ldr	r2, [r4, #56]	; 0x38
   15384:	ldr	r3, [r4, #16]
   15388:	ldr	ip, [r4, #60]	; 0x3c
   1538c:	ldr	fp, [pc, #220]	; 15470 <__assert_fail@plt+0x464c>
   15390:	orr	r1, r1, #1
   15394:	str	r1, [sp, #28]
   15398:	str	r1, [sp, #4]
   1539c:	str	r2, [sp, #12]
   153a0:	str	r3, [sp]
   153a4:	mov	r1, r8
   153a8:	mov	r0, r6
   153ac:	str	ip, [sp, #16]
   153b0:	str	fp, [sp, #8]
   153b4:	mov	r3, sl
   153b8:	mov	r2, r9
   153bc:	bl	11934 <__assert_fail@plt+0xb10>
   153c0:	cmp	r8, r0
   153c4:	bhi	15428 <__assert_fail@plt+0x4604>
   153c8:	ldr	r3, [pc, #164]	; 15474 <__assert_fail@plt+0x4650>
   153cc:	add	r8, r0, #1
   153d0:	cmp	r6, r3
   153d4:	str	r8, [r5]
   153d8:	beq	153e4 <__assert_fail@plt+0x45c0>
   153dc:	mov	r0, r6
   153e0:	bl	1739c <__assert_fail@plt+0x6578>
   153e4:	mov	r0, r8
   153e8:	bl	16210 <__assert_fail@plt+0x53ec>
   153ec:	ldr	lr, [r4, #60]	; 0x3c
   153f0:	ldr	ip, [r4, #16]
   153f4:	mov	r3, sl
   153f8:	mov	r2, r9
   153fc:	mov	r1, r8
   15400:	str	r0, [r5, #4]
   15404:	ldr	r5, [r4, #56]	; 0x38
   15408:	ldr	r4, [sp, #28]
   1540c:	str	fp, [sp, #8]
   15410:	str	r4, [sp, #4]
   15414:	str	lr, [sp, #16]
   15418:	str	r5, [sp, #12]
   1541c:	str	ip, [sp]
   15420:	mov	r6, r0
   15424:	bl	11934 <__assert_fail@plt+0xb10>
   15428:	ldr	r3, [sp, #24]
   1542c:	mov	r0, r6
   15430:	str	r3, [r7]
   15434:	add	sp, sp, #44	; 0x2c
   15438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1543c:	mov	r3, #8
   15440:	str	r3, [sp]
   15444:	add	r1, sp, #36	; 0x24
   15448:	rsb	r2, r2, #1
   1544c:	mvn	r3, #-2147483648	; 0x80000000
   15450:	mov	r0, #0
   15454:	bl	1642c <__assert_fail@plt+0x5608>
   15458:	mov	r5, r0
   1545c:	ldm	r6, {r0, r1}
   15460:	str	r5, [r4]
   15464:	stm	r5, {r0, r1}
   15468:	b	15350 <__assert_fail@plt+0x452c>
   1546c:	andeq	r9, r2, r4, ror #1
   15470:	strdeq	r9, [r2], -ip
   15474:	andeq	r9, r2, r4, lsl #3
   15478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1547c:	sub	sp, sp, #44	; 0x2c
   15480:	mov	r5, r0
   15484:	mov	sl, r1
   15488:	bl	10d7c <__errno_location@plt>
   1548c:	ldr	r4, [pc, #396]	; 15620 <__assert_fail@plt+0x47fc>
   15490:	cmn	r5, #-2147483647	; 0x80000001
   15494:	ldr	r6, [r4]
   15498:	mov	r8, r0
   1549c:	movne	r0, #0
   154a0:	moveq	r0, #1
   154a4:	ldr	r3, [r8]
   154a8:	orrs	r0, r0, r5, lsr #31
   154ac:	str	r3, [sp, #24]
   154b0:	bne	1561c <__assert_fail@plt+0x47f8>
   154b4:	ldr	r2, [r4, #4]
   154b8:	cmp	r5, r2
   154bc:	blt	1551c <__assert_fail@plt+0x46f8>
   154c0:	add	r7, r4, #8
   154c4:	cmp	r6, r7
   154c8:	str	r2, [sp, #36]	; 0x24
   154cc:	beq	155ec <__assert_fail@plt+0x47c8>
   154d0:	mov	r3, #8
   154d4:	sub	r2, r5, r2
   154d8:	mov	r0, r6
   154dc:	str	r3, [sp]
   154e0:	add	r2, r2, #1
   154e4:	mvn	r3, #-2147483648	; 0x80000000
   154e8:	add	r1, sp, #36	; 0x24
   154ec:	bl	1642c <__assert_fail@plt+0x5608>
   154f0:	mov	r6, r0
   154f4:	str	r0, [r4]
   154f8:	ldr	r0, [r4, #4]
   154fc:	ldr	r2, [sp, #36]	; 0x24
   15500:	mov	r1, #0
   15504:	sub	r2, r2, r0
   15508:	add	r0, r6, r0, lsl #3
   1550c:	lsl	r2, r2, #3
   15510:	bl	10d94 <memset@plt>
   15514:	ldr	r3, [sp, #36]	; 0x24
   15518:	str	r3, [r4, #4]
   1551c:	ldr	r2, [r4, #56]	; 0x38
   15520:	add	fp, r6, r5, lsl #3
   15524:	ldr	r1, [r4, #20]
   15528:	ldr	r9, [r6, r5, lsl #3]
   1552c:	ldr	r7, [fp, #4]
   15530:	ldr	r3, [r4, #16]
   15534:	ldr	ip, [r4, #60]	; 0x3c
   15538:	str	r2, [sp, #12]
   1553c:	ldr	r2, [pc, #224]	; 15624 <__assert_fail@plt+0x4800>
   15540:	orr	r1, r1, #1
   15544:	str	r1, [sp, #28]
   15548:	str	r1, [sp, #4]
   1554c:	str	r2, [sp, #8]
   15550:	str	r3, [sp]
   15554:	mov	r0, r7
   15558:	mov	r1, r9
   1555c:	str	ip, [sp, #16]
   15560:	mvn	r3, #0
   15564:	mov	r2, sl
   15568:	bl	11934 <__assert_fail@plt+0xb10>
   1556c:	cmp	r9, r0
   15570:	bhi	155d8 <__assert_fail@plt+0x47b4>
   15574:	ldr	r3, [pc, #172]	; 15628 <__assert_fail@plt+0x4804>
   15578:	add	r9, r0, #1
   1557c:	cmp	r7, r3
   15580:	str	r9, [r6, r5, lsl #3]
   15584:	beq	15590 <__assert_fail@plt+0x476c>
   15588:	mov	r0, r7
   1558c:	bl	1739c <__assert_fail@plt+0x6578>
   15590:	mov	r0, r9
   15594:	bl	16210 <__assert_fail@plt+0x53ec>
   15598:	ldr	ip, [r4, #60]	; 0x3c
   1559c:	ldr	r3, [r4, #16]
   155a0:	ldr	lr, [r4, #56]	; 0x38
   155a4:	ldr	r4, [pc, #120]	; 15624 <__assert_fail@plt+0x4800>
   155a8:	mov	r2, sl
   155ac:	mov	r1, r9
   155b0:	str	r0, [fp, #4]
   155b4:	str	r4, [sp, #8]
   155b8:	ldr	r4, [sp, #28]
   155bc:	str	r3, [sp]
   155c0:	str	r4, [sp, #4]
   155c4:	str	ip, [sp, #16]
   155c8:	str	lr, [sp, #12]
   155cc:	mvn	r3, #0
   155d0:	mov	r7, r0
   155d4:	bl	11934 <__assert_fail@plt+0xb10>
   155d8:	ldr	r3, [sp, #24]
   155dc:	mov	r0, r7
   155e0:	str	r3, [r8]
   155e4:	add	sp, sp, #44	; 0x2c
   155e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155ec:	mov	r3, #8
   155f0:	sub	r2, r5, r2
   155f4:	str	r3, [sp]
   155f8:	add	r1, sp, #36	; 0x24
   155fc:	add	r2, r2, #1
   15600:	mvn	r3, #-2147483648	; 0x80000000
   15604:	bl	1642c <__assert_fail@plt+0x5608>
   15608:	mov	r6, r0
   1560c:	ldm	r7, {r0, r1}
   15610:	str	r6, [r4]
   15614:	stm	r6, {r0, r1}
   15618:	b	154f8 <__assert_fail@plt+0x46d4>
   1561c:	bl	10e18 <abort@plt>
   15620:	andeq	r9, r2, r4, ror #1
   15624:	strdeq	r9, [r2], -ip
   15628:	andeq	r9, r2, r4, lsl #3
   1562c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15630:	sub	sp, sp, #44	; 0x2c
   15634:	mov	sl, r0
   15638:	bl	10d7c <__errno_location@plt>
   1563c:	ldr	r4, [pc, #348]	; 157a0 <__assert_fail@plt+0x497c>
   15640:	ldr	r2, [r4, #4]
   15644:	ldr	r5, [r4]
   15648:	cmp	r2, #0
   1564c:	ldr	r3, [r0]
   15650:	mov	r8, r0
   15654:	str	r3, [sp, #28]
   15658:	bgt	156b4 <__assert_fail@plt+0x4890>
   1565c:	add	r6, r4, #8
   15660:	cmp	r5, r6
   15664:	str	r2, [sp, #36]	; 0x24
   15668:	beq	15770 <__assert_fail@plt+0x494c>
   1566c:	mov	r3, #8
   15670:	mov	r0, r5
   15674:	str	r3, [sp]
   15678:	rsb	r2, r2, #1
   1567c:	mvn	r3, #-2147483648	; 0x80000000
   15680:	add	r1, sp, #36	; 0x24
   15684:	bl	1642c <__assert_fail@plt+0x5608>
   15688:	mov	r5, r0
   1568c:	str	r0, [r4]
   15690:	ldr	r0, [r4, #4]
   15694:	ldr	r2, [sp, #36]	; 0x24
   15698:	mov	r1, #0
   1569c:	sub	r2, r2, r0
   156a0:	add	r0, r5, r0, lsl #3
   156a4:	lsl	r2, r2, #3
   156a8:	bl	10d94 <memset@plt>
   156ac:	ldr	r3, [sp, #36]	; 0x24
   156b0:	str	r3, [r4, #4]
   156b4:	ldr	r7, [r4, #20]
   156b8:	ldr	r9, [r5]
   156bc:	ldr	r6, [r5, #4]
   156c0:	ldr	r2, [r4, #56]	; 0x38
   156c4:	ldr	r3, [r4, #16]
   156c8:	ldr	ip, [r4, #60]	; 0x3c
   156cc:	ldr	fp, [pc, #208]	; 157a4 <__assert_fail@plt+0x4980>
   156d0:	orr	r7, r7, #1
   156d4:	str	r2, [sp, #12]
   156d8:	str	r3, [sp]
   156dc:	str	r7, [sp, #4]
   156e0:	mov	r1, r9
   156e4:	mov	r0, r6
   156e8:	str	ip, [sp, #16]
   156ec:	str	fp, [sp, #8]
   156f0:	mvn	r3, #0
   156f4:	mov	r2, sl
   156f8:	bl	11934 <__assert_fail@plt+0xb10>
   156fc:	cmp	r9, r0
   15700:	bhi	1575c <__assert_fail@plt+0x4938>
   15704:	ldr	r3, [pc, #156]	; 157a8 <__assert_fail@plt+0x4984>
   15708:	add	r9, r0, #1
   1570c:	cmp	r6, r3
   15710:	str	r9, [r5]
   15714:	beq	15720 <__assert_fail@plt+0x48fc>
   15718:	mov	r0, r6
   1571c:	bl	1739c <__assert_fail@plt+0x6578>
   15720:	mov	r0, r9
   15724:	bl	16210 <__assert_fail@plt+0x53ec>
   15728:	ldr	ip, [r4, #60]	; 0x3c
   1572c:	ldr	r3, [r4, #16]
   15730:	ldr	lr, [r4, #56]	; 0x38
   15734:	mov	r2, sl
   15738:	mov	r1, r9
   1573c:	str	r0, [r5, #4]
   15740:	str	r3, [sp]
   15744:	stmib	sp, {r7, fp}
   15748:	str	ip, [sp, #16]
   1574c:	str	lr, [sp, #12]
   15750:	mvn	r3, #0
   15754:	mov	r6, r0
   15758:	bl	11934 <__assert_fail@plt+0xb10>
   1575c:	ldr	r3, [sp, #28]
   15760:	mov	r0, r6
   15764:	str	r3, [r8]
   15768:	add	sp, sp, #44	; 0x2c
   1576c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15770:	mov	r3, #8
   15774:	str	r3, [sp]
   15778:	add	r1, sp, #36	; 0x24
   1577c:	rsb	r2, r2, #1
   15780:	mvn	r3, #-2147483648	; 0x80000000
   15784:	mov	r0, #0
   15788:	bl	1642c <__assert_fail@plt+0x5608>
   1578c:	mov	r5, r0
   15790:	ldm	r6, {r0, r1}
   15794:	str	r5, [r4]
   15798:	stm	r5, {r0, r1}
   1579c:	b	15690 <__assert_fail@plt+0x486c>
   157a0:	andeq	r9, r2, r4, ror #1
   157a4:	strdeq	r9, [r2], -ip
   157a8:	andeq	r9, r2, r4, lsl #3
   157ac:	push	{r4, r5, r6, lr}
   157b0:	sub	sp, sp, #32
   157b4:	cmp	r1, #0
   157b8:	mov	r4, r0
   157bc:	ldr	r5, [sp, #48]	; 0x30
   157c0:	ldr	r6, [sp, #52]	; 0x34
   157c4:	beq	15adc <__assert_fail@plt+0x4cb8>
   157c8:	stm	sp, {r2, r3}
   157cc:	mov	r3, r1
   157d0:	ldr	r2, [pc, #808]	; 15b00 <__assert_fail@plt+0x4cdc>
   157d4:	mov	r1, #1
   157d8:	bl	10db8 <__fprintf_chk@plt>
   157dc:	mov	r2, #5
   157e0:	ldr	r1, [pc, #796]	; 15b04 <__assert_fail@plt+0x4ce0>
   157e4:	mov	r0, #0
   157e8:	bl	10c80 <dcgettext@plt>
   157ec:	ldr	r3, [pc, #788]	; 15b08 <__assert_fail@plt+0x4ce4>
   157f0:	ldr	r2, [pc, #788]	; 15b0c <__assert_fail@plt+0x4ce8>
   157f4:	str	r3, [sp]
   157f8:	mov	r1, #1
   157fc:	mov	r3, r0
   15800:	mov	r0, r4
   15804:	bl	10db8 <__fprintf_chk@plt>
   15808:	mov	r1, r4
   1580c:	mov	r0, #10
   15810:	bl	10c74 <fputc_unlocked@plt>
   15814:	mov	r2, #5
   15818:	ldr	r1, [pc, #752]	; 15b10 <__assert_fail@plt+0x4cec>
   1581c:	mov	r0, #0
   15820:	bl	10c80 <dcgettext@plt>
   15824:	mov	r1, #1
   15828:	ldr	r3, [pc, #740]	; 15b14 <__assert_fail@plt+0x4cf0>
   1582c:	mov	r2, r0
   15830:	mov	r0, r4
   15834:	bl	10db8 <__fprintf_chk@plt>
   15838:	mov	r1, r4
   1583c:	mov	r0, #10
   15840:	bl	10c74 <fputc_unlocked@plt>
   15844:	cmp	r6, #9
   15848:	ldrls	pc, [pc, r6, lsl #2]
   1584c:	b	15af4 <__assert_fail@plt+0x4cd0>
   15850:	ldrdeq	r5, [r1], -r4
   15854:	ldrdeq	r5, [r1], -ip
   15858:	andeq	r5, r1, r8, lsl #18
   1585c:	andeq	r5, r1, ip, lsr r9
   15860:	andeq	r5, r1, r8, ror r9
   15864:			; <UNDEFINED> instruction: 0x000159b4
   15868:	strdeq	r5, [r1], -r0
   1586c:	andeq	r5, r1, r4, lsr sl
   15870:	andeq	r5, r1, r4, lsl #21
   15874:	andeq	r5, r1, r8, ror r8
   15878:	ldr	r1, [pc, #664]	; 15b18 <__assert_fail@plt+0x4cf4>
   1587c:	mov	r2, #5
   15880:	mov	r0, #0
   15884:	bl	10c80 <dcgettext@plt>
   15888:	ldr	ip, [r5, #32]
   1588c:	ldr	r1, [r5, #28]
   15890:	ldr	r2, [r5, #24]
   15894:	ldr	r3, [r5]
   15898:	ldr	r6, [r5, #20]
   1589c:	str	ip, [sp, #28]
   158a0:	ldr	lr, [r5, #16]
   158a4:	str	r1, [sp, #24]
   158a8:	ldr	ip, [r5, #12]
   158ac:	str	r2, [sp, #20]
   158b0:	ldr	r1, [r5, #8]
   158b4:	ldr	r2, [r5, #4]
   158b8:	str	r6, [sp, #16]
   158bc:	stmib	sp, {r1, ip, lr}
   158c0:	mov	r1, #1
   158c4:	str	r2, [sp]
   158c8:	mov	r2, r0
   158cc:	mov	r0, r4
   158d0:	bl	10db8 <__fprintf_chk@plt>
   158d4:	add	sp, sp, #32
   158d8:	pop	{r4, r5, r6, pc}
   158dc:	mov	r2, #5
   158e0:	ldr	r1, [pc, #564]	; 15b1c <__assert_fail@plt+0x4cf8>
   158e4:	mov	r0, #0
   158e8:	bl	10c80 <dcgettext@plt>
   158ec:	ldr	r3, [r5]
   158f0:	mov	r1, #1
   158f4:	mov	r2, r0
   158f8:	mov	r0, r4
   158fc:	add	sp, sp, #32
   15900:	pop	{r4, r5, r6, lr}
   15904:	b	10db8 <__fprintf_chk@plt>
   15908:	mov	r2, #5
   1590c:	ldr	r1, [pc, #524]	; 15b20 <__assert_fail@plt+0x4cfc>
   15910:	mov	r0, #0
   15914:	bl	10c80 <dcgettext@plt>
   15918:	ldr	r2, [r5, #4]
   1591c:	ldr	r3, [r5]
   15920:	mov	r1, #1
   15924:	str	r2, [sp, #48]	; 0x30
   15928:	mov	r2, r0
   1592c:	mov	r0, r4
   15930:	add	sp, sp, #32
   15934:	pop	{r4, r5, r6, lr}
   15938:	b	10db8 <__fprintf_chk@plt>
   1593c:	mov	r2, #5
   15940:	ldr	r1, [pc, #476]	; 15b24 <__assert_fail@plt+0x4d00>
   15944:	mov	r0, #0
   15948:	bl	10c80 <dcgettext@plt>
   1594c:	ldr	r1, [r5, #8]
   15950:	ldr	r2, [r5, #4]
   15954:	ldr	r3, [r5]
   15958:	str	r1, [sp, #52]	; 0x34
   1595c:	str	r2, [sp, #48]	; 0x30
   15960:	mov	r1, #1
   15964:	mov	r2, r0
   15968:	mov	r0, r4
   1596c:	add	sp, sp, #32
   15970:	pop	{r4, r5, r6, lr}
   15974:	b	10db8 <__fprintf_chk@plt>
   15978:	mov	r2, #5
   1597c:	ldr	r1, [pc, #420]	; 15b28 <__assert_fail@plt+0x4d04>
   15980:	mov	r0, #0
   15984:	bl	10c80 <dcgettext@plt>
   15988:	ldr	r1, [r5, #8]
   1598c:	ldr	ip, [r5, #12]
   15990:	ldr	r2, [r5, #4]
   15994:	ldr	r3, [r5]
   15998:	stmib	sp, {r1, ip}
   1599c:	str	r2, [sp]
   159a0:	mov	r1, #1
   159a4:	mov	r2, r0
   159a8:	mov	r0, r4
   159ac:	bl	10db8 <__fprintf_chk@plt>
   159b0:	b	158d4 <__assert_fail@plt+0x4ab0>
   159b4:	mov	r2, #5
   159b8:	ldr	r1, [pc, #364]	; 15b2c <__assert_fail@plt+0x4d08>
   159bc:	mov	r0, #0
   159c0:	bl	10c80 <dcgettext@plt>
   159c4:	add	r1, r5, #8
   159c8:	ldr	r2, [r5, #4]
   159cc:	ldm	r1, {r1, ip, lr}
   159d0:	ldr	r3, [r5]
   159d4:	str	r2, [sp]
   159d8:	stmib	sp, {r1, ip, lr}
   159dc:	mov	r1, #1
   159e0:	mov	r2, r0
   159e4:	mov	r0, r4
   159e8:	bl	10db8 <__fprintf_chk@plt>
   159ec:	b	158d4 <__assert_fail@plt+0x4ab0>
   159f0:	mov	r2, #5
   159f4:	ldr	r1, [pc, #308]	; 15b30 <__assert_fail@plt+0x4d0c>
   159f8:	mov	r0, #0
   159fc:	bl	10c80 <dcgettext@plt>
   15a00:	add	r1, r5, #8
   15a04:	ldr	r2, [r5, #4]
   15a08:	ldm	r1, {r1, ip, lr}
   15a0c:	ldr	r6, [r5, #20]
   15a10:	ldr	r3, [r5]
   15a14:	stmib	sp, {r1, ip, lr}
   15a18:	mov	r1, #1
   15a1c:	str	r2, [sp]
   15a20:	str	r6, [sp, #16]
   15a24:	mov	r2, r0
   15a28:	mov	r0, r4
   15a2c:	bl	10db8 <__fprintf_chk@plt>
   15a30:	b	158d4 <__assert_fail@plt+0x4ab0>
   15a34:	mov	r2, #5
   15a38:	ldr	r1, [pc, #244]	; 15b34 <__assert_fail@plt+0x4d10>
   15a3c:	mov	r0, #0
   15a40:	bl	10c80 <dcgettext@plt>
   15a44:	ldr	r2, [r5, #24]
   15a48:	ldr	r3, [r5]
   15a4c:	ldr	r6, [r5, #20]
   15a50:	ldr	lr, [r5, #16]
   15a54:	ldr	ip, [r5, #12]
   15a58:	str	r2, [sp, #20]
   15a5c:	ldr	r1, [r5, #8]
   15a60:	ldr	r2, [r5, #4]
   15a64:	str	r6, [sp, #16]
   15a68:	stmib	sp, {r1, ip, lr}
   15a6c:	mov	r1, #1
   15a70:	str	r2, [sp]
   15a74:	mov	r2, r0
   15a78:	mov	r0, r4
   15a7c:	bl	10db8 <__fprintf_chk@plt>
   15a80:	b	158d4 <__assert_fail@plt+0x4ab0>
   15a84:	mov	r2, #5
   15a88:	ldr	r1, [pc, #168]	; 15b38 <__assert_fail@plt+0x4d14>
   15a8c:	mov	r0, #0
   15a90:	bl	10c80 <dcgettext@plt>
   15a94:	ldr	r1, [r5, #28]
   15a98:	ldr	r2, [r5, #24]
   15a9c:	ldr	r3, [r5]
   15aa0:	ldr	r6, [r5, #20]
   15aa4:	ldr	lr, [r5, #16]
   15aa8:	str	r1, [sp, #24]
   15aac:	ldr	ip, [r5, #12]
   15ab0:	str	r2, [sp, #20]
   15ab4:	ldr	r1, [r5, #8]
   15ab8:	ldr	r2, [r5, #4]
   15abc:	str	r6, [sp, #16]
   15ac0:	stmib	sp, {r1, ip, lr}
   15ac4:	mov	r1, #1
   15ac8:	str	r2, [sp]
   15acc:	mov	r2, r0
   15ad0:	mov	r0, r4
   15ad4:	bl	10db8 <__fprintf_chk@plt>
   15ad8:	b	158d4 <__assert_fail@plt+0x4ab0>
   15adc:	str	r3, [sp]
   15ae0:	mov	r1, #1
   15ae4:	mov	r3, r2
   15ae8:	ldr	r2, [pc, #76]	; 15b3c <__assert_fail@plt+0x4d18>
   15aec:	bl	10db8 <__fprintf_chk@plt>
   15af0:	b	157dc <__assert_fail@plt+0x49b8>
   15af4:	mov	r2, #5
   15af8:	ldr	r1, [pc, #64]	; 15b40 <__assert_fail@plt+0x4d1c>
   15afc:	b	15880 <__assert_fail@plt+0x4a5c>
   15b00:	andeq	r8, r1, r8, ror #3
   15b04:	strdeq	r8, [r1], -ip
   15b08:	andeq	r0, r0, r6, ror #15
   15b0c:	ldrdeq	r8, [r1], -r4
   15b10:	andeq	r8, r1, r0, lsl #4
   15b14:	andeq	r8, r1, ip, lsr #5
   15b18:	ldrdeq	r8, [r1], -ip
   15b1c:	ldrdeq	r8, [r1], -r0
   15b20:	andeq	r8, r1, r0, ror #5
   15b24:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15b28:	andeq	r8, r1, r4, lsl r3
   15b2c:	andeq	r8, r1, r4, lsr r3
   15b30:	andeq	r8, r1, r8, asr r3
   15b34:	andeq	r8, r1, r0, lsl #7
   15b38:	andeq	r8, r1, ip, lsr #7
   15b3c:	strdeq	r8, [r1], -r4
   15b40:	andeq	r8, r1, r0, lsl r4
   15b44:	push	{r4, r5, lr}
   15b48:	sub	sp, sp, #12
   15b4c:	ldr	r5, [sp, #24]
   15b50:	ldr	ip, [r5]
   15b54:	cmp	ip, #0
   15b58:	beq	15b74 <__assert_fail@plt+0x4d50>
   15b5c:	mov	lr, r5
   15b60:	mov	ip, #0
   15b64:	ldr	r4, [lr, #4]!
   15b68:	add	ip, ip, #1
   15b6c:	cmp	r4, #0
   15b70:	bne	15b64 <__assert_fail@plt+0x4d40>
   15b74:	stm	sp, {r5, ip}
   15b78:	bl	157ac <__assert_fail@plt+0x4988>
   15b7c:	add	sp, sp, #12
   15b80:	pop	{r4, r5, pc}
   15b84:	push	{r4, r5, lr}
   15b88:	sub	sp, sp, #76	; 0x4c
   15b8c:	mov	r5, r0
   15b90:	ldr	ip, [sp, #88]	; 0x58
   15b94:	ldr	r0, [ip]
   15b98:	cmp	r0, #0
   15b9c:	str	r0, [sp, #32]
   15ba0:	beq	15f74 <__assert_fail@plt+0x5150>
   15ba4:	ldr	r0, [ip, #4]
   15ba8:	cmp	r0, #0
   15bac:	str	r0, [sp, #36]	; 0x24
   15bb0:	beq	15f7c <__assert_fail@plt+0x5158>
   15bb4:	ldr	r0, [ip, #8]
   15bb8:	cmp	r0, #0
   15bbc:	str	r0, [sp, #40]	; 0x28
   15bc0:	beq	15f84 <__assert_fail@plt+0x5160>
   15bc4:	ldr	r0, [ip, #12]
   15bc8:	cmp	r0, #0
   15bcc:	str	r0, [sp, #44]	; 0x2c
   15bd0:	beq	15f8c <__assert_fail@plt+0x5168>
   15bd4:	ldr	r0, [ip, #16]
   15bd8:	cmp	r0, #0
   15bdc:	str	r0, [sp, #48]	; 0x30
   15be0:	beq	15f94 <__assert_fail@plt+0x5170>
   15be4:	ldr	r0, [ip, #20]
   15be8:	cmp	r0, #0
   15bec:	str	r0, [sp, #52]	; 0x34
   15bf0:	beq	15f9c <__assert_fail@plt+0x5178>
   15bf4:	ldr	r0, [ip, #24]
   15bf8:	cmp	r0, #0
   15bfc:	str	r0, [sp, #56]	; 0x38
   15c00:	beq	15fa4 <__assert_fail@plt+0x5180>
   15c04:	ldr	r0, [ip, #28]
   15c08:	cmp	r0, #0
   15c0c:	str	r0, [sp, #60]	; 0x3c
   15c10:	beq	15fac <__assert_fail@plt+0x5188>
   15c14:	ldr	r0, [ip, #32]
   15c18:	cmp	r0, #0
   15c1c:	str	r0, [sp, #64]	; 0x40
   15c20:	beq	15fb4 <__assert_fail@plt+0x5190>
   15c24:	ldr	r0, [ip, #36]	; 0x24
   15c28:	cmp	r0, #0
   15c2c:	movne	r4, #10
   15c30:	moveq	r4, #9
   15c34:	cmp	r1, #0
   15c38:	beq	15f4c <__assert_fail@plt+0x5128>
   15c3c:	stm	sp, {r2, r3}
   15c40:	mov	r0, r5
   15c44:	mov	r3, r1
   15c48:	ldr	r2, [pc, #876]	; 15fbc <__assert_fail@plt+0x5198>
   15c4c:	mov	r1, #1
   15c50:	bl	10db8 <__fprintf_chk@plt>
   15c54:	mov	r2, #5
   15c58:	ldr	r1, [pc, #864]	; 15fc0 <__assert_fail@plt+0x519c>
   15c5c:	mov	r0, #0
   15c60:	bl	10c80 <dcgettext@plt>
   15c64:	ldr	r3, [pc, #856]	; 15fc4 <__assert_fail@plt+0x51a0>
   15c68:	ldr	r2, [pc, #856]	; 15fc8 <__assert_fail@plt+0x51a4>
   15c6c:	str	r3, [sp]
   15c70:	mov	r1, #1
   15c74:	mov	r3, r0
   15c78:	mov	r0, r5
   15c7c:	bl	10db8 <__fprintf_chk@plt>
   15c80:	mov	r1, r5
   15c84:	mov	r0, #10
   15c88:	bl	10c74 <fputc_unlocked@plt>
   15c8c:	mov	r2, #5
   15c90:	ldr	r1, [pc, #820]	; 15fcc <__assert_fail@plt+0x51a8>
   15c94:	mov	r0, #0
   15c98:	bl	10c80 <dcgettext@plt>
   15c9c:	mov	r1, #1
   15ca0:	ldr	r3, [pc, #808]	; 15fd0 <__assert_fail@plt+0x51ac>
   15ca4:	mov	r2, r0
   15ca8:	mov	r0, r5
   15cac:	bl	10db8 <__fprintf_chk@plt>
   15cb0:	mov	r1, r5
   15cb4:	mov	r0, #10
   15cb8:	bl	10c74 <fputc_unlocked@plt>
   15cbc:	cmp	r4, #9
   15cc0:	ldrls	pc, [pc, r4, lsl #2]
   15cc4:	b	15f68 <__assert_fail@plt+0x5144>
   15cc8:	andeq	r5, r1, ip, asr #26
   15ccc:	andeq	r5, r1, r4, asr sp
   15cd0:	andeq	r5, r1, r0, lsl #27
   15cd4:			; <UNDEFINED> instruction: 0x00015db4
   15cd8:	andeq	r5, r1, ip, ror #27
   15cdc:	andeq	r5, r1, r8, lsr #28
   15ce0:	andeq	r5, r1, r4, ror #28
   15ce4:	andeq	r5, r1, r8, lsr #29
   15ce8:	strdeq	r5, [r1], -r4
   15cec:	strdeq	r5, [r1], -r0
   15cf0:	ldr	r1, [pc, #732]	; 15fd4 <__assert_fail@plt+0x51b0>
   15cf4:	mov	r2, #5
   15cf8:	mov	r0, #0
   15cfc:	bl	10c80 <dcgettext@plt>
   15d00:	ldr	ip, [sp, #64]	; 0x40
   15d04:	ldr	r1, [sp, #60]	; 0x3c
   15d08:	ldr	r2, [sp, #56]	; 0x38
   15d0c:	ldr	lr, [sp, #48]	; 0x30
   15d10:	str	ip, [sp, #28]
   15d14:	str	r1, [sp, #24]
   15d18:	ldr	ip, [sp, #44]	; 0x2c
   15d1c:	ldr	r1, [sp, #40]	; 0x28
   15d20:	ldr	r4, [sp, #52]	; 0x34
   15d24:	str	r2, [sp, #20]
   15d28:	ldr	r2, [sp, #36]	; 0x24
   15d2c:	stmib	sp, {r1, ip, lr}
   15d30:	mov	r1, #1
   15d34:	str	r2, [sp]
   15d38:	ldr	r3, [sp, #32]
   15d3c:	str	r4, [sp, #16]
   15d40:	mov	r2, r0
   15d44:	mov	r0, r5
   15d48:	bl	10db8 <__fprintf_chk@plt>
   15d4c:	add	sp, sp, #76	; 0x4c
   15d50:	pop	{r4, r5, pc}
   15d54:	mov	r2, #5
   15d58:	ldr	r1, [pc, #632]	; 15fd8 <__assert_fail@plt+0x51b4>
   15d5c:	mov	r0, #0
   15d60:	bl	10c80 <dcgettext@plt>
   15d64:	ldr	r3, [sp, #32]
   15d68:	mov	r1, #1
   15d6c:	mov	r2, r0
   15d70:	mov	r0, r5
   15d74:	add	sp, sp, #76	; 0x4c
   15d78:	pop	{r4, r5, lr}
   15d7c:	b	10db8 <__fprintf_chk@plt>
   15d80:	mov	r2, #5
   15d84:	ldr	r1, [pc, #592]	; 15fdc <__assert_fail@plt+0x51b8>
   15d88:	mov	r0, #0
   15d8c:	bl	10c80 <dcgettext@plt>
   15d90:	ldr	r2, [sp, #36]	; 0x24
   15d94:	ldr	r3, [sp, #32]
   15d98:	str	r2, [sp, #88]	; 0x58
   15d9c:	mov	r1, #1
   15da0:	mov	r2, r0
   15da4:	mov	r0, r5
   15da8:	add	sp, sp, #76	; 0x4c
   15dac:	pop	{r4, r5, lr}
   15db0:	b	10db8 <__fprintf_chk@plt>
   15db4:	mov	r2, #5
   15db8:	ldr	r1, [pc, #544]	; 15fe0 <__assert_fail@plt+0x51bc>
   15dbc:	mov	r0, #0
   15dc0:	bl	10c80 <dcgettext@plt>
   15dc4:	ldr	r1, [sp, #40]	; 0x28
   15dc8:	ldr	r2, [sp, #36]	; 0x24
   15dcc:	str	r1, [sp, #4]
   15dd0:	str	r2, [sp]
   15dd4:	ldr	r3, [sp, #32]
   15dd8:	mov	r1, #1
   15ddc:	mov	r2, r0
   15de0:	mov	r0, r5
   15de4:	bl	10db8 <__fprintf_chk@plt>
   15de8:	b	15d4c <__assert_fail@plt+0x4f28>
   15dec:	mov	r2, #5
   15df0:	ldr	r1, [pc, #492]	; 15fe4 <__assert_fail@plt+0x51c0>
   15df4:	mov	r0, #0
   15df8:	bl	10c80 <dcgettext@plt>
   15dfc:	ldr	r1, [sp, #40]	; 0x28
   15e00:	ldr	ip, [sp, #44]	; 0x2c
   15e04:	ldr	r2, [sp, #36]	; 0x24
   15e08:	ldr	r3, [sp, #32]
   15e0c:	stmib	sp, {r1, ip}
   15e10:	str	r2, [sp]
   15e14:	mov	r1, #1
   15e18:	mov	r2, r0
   15e1c:	mov	r0, r5
   15e20:	bl	10db8 <__fprintf_chk@plt>
   15e24:	b	15d4c <__assert_fail@plt+0x4f28>
   15e28:	mov	r2, #5
   15e2c:	ldr	r1, [pc, #436]	; 15fe8 <__assert_fail@plt+0x51c4>
   15e30:	mov	r0, #0
   15e34:	bl	10c80 <dcgettext@plt>
   15e38:	add	r1, sp, #40	; 0x28
   15e3c:	ldr	r2, [sp, #36]	; 0x24
   15e40:	ldm	r1, {r1, ip, lr}
   15e44:	ldr	r3, [sp, #32]
   15e48:	str	r2, [sp]
   15e4c:	stmib	sp, {r1, ip, lr}
   15e50:	mov	r1, #1
   15e54:	mov	r2, r0
   15e58:	mov	r0, r5
   15e5c:	bl	10db8 <__fprintf_chk@plt>
   15e60:	b	15d4c <__assert_fail@plt+0x4f28>
   15e64:	mov	r2, #5
   15e68:	ldr	r1, [pc, #380]	; 15fec <__assert_fail@plt+0x51c8>
   15e6c:	mov	r0, #0
   15e70:	bl	10c80 <dcgettext@plt>
   15e74:	add	r1, sp, #40	; 0x28
   15e78:	ldr	r2, [sp, #36]	; 0x24
   15e7c:	ldm	r1, {r1, ip, lr}
   15e80:	ldr	r4, [sp, #52]	; 0x34
   15e84:	str	r2, [sp]
   15e88:	stmib	sp, {r1, ip, lr}
   15e8c:	mov	r1, #1
   15e90:	ldr	r3, [sp, #32]
   15e94:	str	r4, [sp, #16]
   15e98:	mov	r2, r0
   15e9c:	mov	r0, r5
   15ea0:	bl	10db8 <__fprintf_chk@plt>
   15ea4:	b	15d4c <__assert_fail@plt+0x4f28>
   15ea8:	mov	r2, #5
   15eac:	ldr	r1, [pc, #316]	; 15ff0 <__assert_fail@plt+0x51cc>
   15eb0:	mov	r0, #0
   15eb4:	bl	10c80 <dcgettext@plt>
   15eb8:	add	r1, sp, #40	; 0x28
   15ebc:	ldr	r2, [sp, #56]	; 0x38
   15ec0:	ldm	r1, {r1, ip, lr}
   15ec4:	ldr	r4, [sp, #52]	; 0x34
   15ec8:	str	r2, [sp, #20]
   15ecc:	ldr	r2, [sp, #36]	; 0x24
   15ed0:	stmib	sp, {r1, ip, lr}
   15ed4:	mov	r1, #1
   15ed8:	str	r2, [sp]
   15edc:	ldr	r3, [sp, #32]
   15ee0:	str	r4, [sp, #16]
   15ee4:	mov	r2, r0
   15ee8:	mov	r0, r5
   15eec:	bl	10db8 <__fprintf_chk@plt>
   15ef0:	b	15d4c <__assert_fail@plt+0x4f28>
   15ef4:	mov	r2, #5
   15ef8:	ldr	r1, [pc, #244]	; 15ff4 <__assert_fail@plt+0x51d0>
   15efc:	mov	r0, #0
   15f00:	bl	10c80 <dcgettext@plt>
   15f04:	ldr	r1, [sp, #60]	; 0x3c
   15f08:	ldr	r2, [sp, #56]	; 0x38
   15f0c:	ldr	lr, [sp, #48]	; 0x30
   15f10:	ldr	ip, [sp, #44]	; 0x2c
   15f14:	str	r1, [sp, #24]
   15f18:	ldr	r1, [sp, #40]	; 0x28
   15f1c:	ldr	r4, [sp, #52]	; 0x34
   15f20:	str	r2, [sp, #20]
   15f24:	ldr	r2, [sp, #36]	; 0x24
   15f28:	stmib	sp, {r1, ip, lr}
   15f2c:	mov	r1, #1
   15f30:	str	r2, [sp]
   15f34:	ldr	r3, [sp, #32]
   15f38:	str	r4, [sp, #16]
   15f3c:	mov	r2, r0
   15f40:	mov	r0, r5
   15f44:	bl	10db8 <__fprintf_chk@plt>
   15f48:	b	15d4c <__assert_fail@plt+0x4f28>
   15f4c:	str	r3, [sp]
   15f50:	mov	r1, #1
   15f54:	mov	r3, r2
   15f58:	mov	r0, r5
   15f5c:	ldr	r2, [pc, #148]	; 15ff8 <__assert_fail@plt+0x51d4>
   15f60:	bl	10db8 <__fprintf_chk@plt>
   15f64:	b	15c54 <__assert_fail@plt+0x4e30>
   15f68:	mov	r2, #5
   15f6c:	ldr	r1, [pc, #136]	; 15ffc <__assert_fail@plt+0x51d8>
   15f70:	b	15cf8 <__assert_fail@plt+0x4ed4>
   15f74:	mov	r4, r0
   15f78:	b	15c34 <__assert_fail@plt+0x4e10>
   15f7c:	mov	r4, #1
   15f80:	b	15c34 <__assert_fail@plt+0x4e10>
   15f84:	mov	r4, #2
   15f88:	b	15c34 <__assert_fail@plt+0x4e10>
   15f8c:	mov	r4, #3
   15f90:	b	15c34 <__assert_fail@plt+0x4e10>
   15f94:	mov	r4, #4
   15f98:	b	15c34 <__assert_fail@plt+0x4e10>
   15f9c:	mov	r4, #5
   15fa0:	b	15c34 <__assert_fail@plt+0x4e10>
   15fa4:	mov	r4, #6
   15fa8:	b	15c34 <__assert_fail@plt+0x4e10>
   15fac:	mov	r4, #7
   15fb0:	b	15c34 <__assert_fail@plt+0x4e10>
   15fb4:	mov	r4, #8
   15fb8:	b	15c34 <__assert_fail@plt+0x4e10>
   15fbc:	andeq	r8, r1, r8, ror #3
   15fc0:	strdeq	r8, [r1], -ip
   15fc4:	andeq	r0, r0, r6, ror #15
   15fc8:	ldrdeq	r8, [r1], -r4
   15fcc:	andeq	r8, r1, r0, lsl #4
   15fd0:	andeq	r8, r1, ip, lsr #5
   15fd4:	ldrdeq	r8, [r1], -ip
   15fd8:	ldrdeq	r8, [r1], -r0
   15fdc:	andeq	r8, r1, r0, ror #5
   15fe0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15fe4:	andeq	r8, r1, r4, lsl r3
   15fe8:	andeq	r8, r1, r4, lsr r3
   15fec:	andeq	r8, r1, r8, asr r3
   15ff0:	andeq	r8, r1, r0, lsl #7
   15ff4:	andeq	r8, r1, ip, lsr #7
   15ff8:	strdeq	r8, [r1], -r4
   15ffc:	andeq	r8, r1, r0, lsl r4
   16000:	push	{r3}		; (str r3, [sp, #-4]!)
   16004:	push	{lr}		; (str lr, [sp, #-4]!)
   16008:	sub	sp, sp, #56	; 0x38
   1600c:	add	r3, sp, #64	; 0x40
   16010:	ldr	ip, [sp, #64]	; 0x40
   16014:	str	r3, [sp, #12]
   16018:	cmp	ip, #0
   1601c:	str	ip, [sp, #16]
   16020:	beq	160b8 <__assert_fail@plt+0x5294>
   16024:	ldr	ip, [sp, #68]	; 0x44
   16028:	cmp	ip, #0
   1602c:	str	ip, [sp, #20]
   16030:	beq	160d8 <__assert_fail@plt+0x52b4>
   16034:	ldr	ip, [sp, #72]	; 0x48
   16038:	cmp	ip, #0
   1603c:	str	ip, [sp, #24]
   16040:	beq	160e0 <__assert_fail@plt+0x52bc>
   16044:	ldr	ip, [sp, #76]	; 0x4c
   16048:	cmp	ip, #0
   1604c:	str	ip, [sp, #28]
   16050:	beq	160e8 <__assert_fail@plt+0x52c4>
   16054:	ldr	ip, [sp, #80]	; 0x50
   16058:	cmp	ip, #0
   1605c:	str	ip, [sp, #32]
   16060:	beq	160f0 <__assert_fail@plt+0x52cc>
   16064:	ldr	ip, [sp, #84]	; 0x54
   16068:	cmp	ip, #0
   1606c:	str	ip, [sp, #36]	; 0x24
   16070:	beq	160f8 <__assert_fail@plt+0x52d4>
   16074:	ldr	ip, [sp, #88]	; 0x58
   16078:	cmp	ip, #0
   1607c:	str	ip, [sp, #40]	; 0x28
   16080:	beq	16100 <__assert_fail@plt+0x52dc>
   16084:	ldr	ip, [sp, #92]	; 0x5c
   16088:	cmp	ip, #0
   1608c:	str	ip, [sp, #44]	; 0x2c
   16090:	beq	16108 <__assert_fail@plt+0x52e4>
   16094:	ldr	ip, [sp, #96]	; 0x60
   16098:	cmp	ip, #0
   1609c:	str	ip, [sp, #48]	; 0x30
   160a0:	beq	16110 <__assert_fail@plt+0x52ec>
   160a4:	ldr	ip, [sp, #100]	; 0x64
   160a8:	cmp	ip, #0
   160ac:	str	ip, [sp, #52]	; 0x34
   160b0:	movne	ip, #10
   160b4:	moveq	ip, #9
   160b8:	add	r3, sp, #16
   160bc:	stm	sp, {r3, ip}
   160c0:	ldr	r3, [sp, #60]	; 0x3c
   160c4:	bl	157ac <__assert_fail@plt+0x4988>
   160c8:	add	sp, sp, #56	; 0x38
   160cc:	pop	{lr}		; (ldr lr, [sp], #4)
   160d0:	add	sp, sp, #4
   160d4:	bx	lr
   160d8:	mov	ip, #1
   160dc:	b	160b8 <__assert_fail@plt+0x5294>
   160e0:	mov	ip, #2
   160e4:	b	160b8 <__assert_fail@plt+0x5294>
   160e8:	mov	ip, #3
   160ec:	b	160b8 <__assert_fail@plt+0x5294>
   160f0:	mov	ip, #4
   160f4:	b	160b8 <__assert_fail@plt+0x5294>
   160f8:	mov	ip, #5
   160fc:	b	160b8 <__assert_fail@plt+0x5294>
   16100:	mov	ip, #6
   16104:	b	160b8 <__assert_fail@plt+0x5294>
   16108:	mov	ip, #7
   1610c:	b	160b8 <__assert_fail@plt+0x5294>
   16110:	mov	ip, #8
   16114:	b	160b8 <__assert_fail@plt+0x5294>
   16118:	ldr	r3, [pc, #116]	; 16194 <__assert_fail@plt+0x5370>
   1611c:	push	{r4, lr}
   16120:	mov	r0, #10
   16124:	ldr	r1, [r3]
   16128:	bl	10c74 <fputc_unlocked@plt>
   1612c:	mov	r2, #5
   16130:	ldr	r1, [pc, #96]	; 16198 <__assert_fail@plt+0x5374>
   16134:	mov	r0, #0
   16138:	bl	10c80 <dcgettext@plt>
   1613c:	ldr	r2, [pc, #88]	; 1619c <__assert_fail@plt+0x5378>
   16140:	mov	r1, r0
   16144:	mov	r0, #1
   16148:	bl	10da0 <__printf_chk@plt>
   1614c:	mov	r2, #5
   16150:	ldr	r1, [pc, #72]	; 161a0 <__assert_fail@plt+0x537c>
   16154:	mov	r0, #0
   16158:	bl	10c80 <dcgettext@plt>
   1615c:	ldr	r3, [pc, #64]	; 161a4 <__assert_fail@plt+0x5380>
   16160:	ldr	r2, [pc, #64]	; 161a8 <__assert_fail@plt+0x5384>
   16164:	mov	r1, r0
   16168:	mov	r0, #1
   1616c:	bl	10da0 <__printf_chk@plt>
   16170:	mov	r2, #5
   16174:	ldr	r1, [pc, #48]	; 161ac <__assert_fail@plt+0x5388>
   16178:	mov	r0, #0
   1617c:	bl	10c80 <dcgettext@plt>
   16180:	ldr	r2, [pc, #40]	; 161b0 <__assert_fail@plt+0x538c>
   16184:	pop	{r4, lr}
   16188:	mov	r1, r0
   1618c:	mov	r0, #1
   16190:	b	10da0 <__printf_chk@plt>
   16194:	andeq	r9, r2, ip, lsr r1
   16198:	andeq	r8, r1, ip, asr #8
   1619c:	andeq	r8, r1, r0, ror #8
   161a0:	andeq	r8, r1, r8, ror r4
   161a4:	andeq	r7, r1, r0, asr #29
   161a8:	andeq	r7, r1, r8, ror #29
   161ac:	andeq	r8, r1, ip, lsl #9
   161b0:			; <UNDEFINED> instruction: 0x000184b4
   161b4:	push	{r4, r5, r6, lr}
   161b8:	mov	r6, r0
   161bc:	mov	r5, r1
   161c0:	mov	r4, r2
   161c4:	bl	1751c <__assert_fail@plt+0x66f8>
   161c8:	cmp	r0, #0
   161cc:	popne	{r4, r5, r6, pc}
   161d0:	cmp	r6, #0
   161d4:	beq	161e4 <__assert_fail@plt+0x53c0>
   161d8:	cmp	r5, #0
   161dc:	cmpne	r4, #0
   161e0:	popeq	{r4, r5, r6, pc}
   161e4:	bl	16830 <__assert_fail@plt+0x5a0c>
   161e8:	push	{r4, lr}
   161ec:	bl	17198 <__assert_fail@plt+0x6374>
   161f0:	cmp	r0, #0
   161f4:	popne	{r4, pc}
   161f8:	bl	16830 <__assert_fail@plt+0x5a0c>
   161fc:	push	{r4, lr}
   16200:	bl	17198 <__assert_fail@plt+0x6374>
   16204:	cmp	r0, #0
   16208:	popne	{r4, pc}
   1620c:	bl	16830 <__assert_fail@plt+0x5a0c>
   16210:	push	{r4, lr}
   16214:	bl	17198 <__assert_fail@plt+0x6374>
   16218:	cmp	r0, #0
   1621c:	popne	{r4, pc}
   16220:	bl	16830 <__assert_fail@plt+0x5a0c>
   16224:	push	{r4, r5, r6, lr}
   16228:	mov	r5, r0
   1622c:	mov	r4, r1
   16230:	bl	171c4 <__assert_fail@plt+0x63a0>
   16234:	cmp	r0, #0
   16238:	popne	{r4, r5, r6, pc}
   1623c:	adds	r4, r4, #0
   16240:	movne	r4, #1
   16244:	cmp	r5, #0
   16248:	orreq	r4, r4, #1
   1624c:	cmp	r4, #0
   16250:	popeq	{r4, r5, r6, pc}
   16254:	bl	16830 <__assert_fail@plt+0x5a0c>
   16258:	push	{r4, lr}
   1625c:	cmp	r1, #0
   16260:	orreq	r1, r1, #1
   16264:	bl	171c4 <__assert_fail@plt+0x63a0>
   16268:	cmp	r0, #0
   1626c:	popne	{r4, pc}
   16270:	bl	16830 <__assert_fail@plt+0x5a0c>
   16274:	push	{r4, r5, r6, lr}
   16278:	mov	r6, r0
   1627c:	mov	r5, r1
   16280:	mov	r4, r2
   16284:	bl	1751c <__assert_fail@plt+0x66f8>
   16288:	cmp	r0, #0
   1628c:	popne	{r4, r5, r6, pc}
   16290:	cmp	r6, #0
   16294:	beq	162a4 <__assert_fail@plt+0x5480>
   16298:	cmp	r5, #0
   1629c:	cmpne	r4, #0
   162a0:	popeq	{r4, r5, r6, pc}
   162a4:	bl	16830 <__assert_fail@plt+0x5a0c>
   162a8:	cmp	r2, #0
   162ac:	cmpne	r1, #0
   162b0:	moveq	r2, #1
   162b4:	moveq	r1, r2
   162b8:	push	{r4, lr}
   162bc:	bl	1751c <__assert_fail@plt+0x66f8>
   162c0:	cmp	r0, #0
   162c4:	popne	{r4, pc}
   162c8:	bl	16830 <__assert_fail@plt+0x5a0c>
   162cc:	push	{r4, lr}
   162d0:	mov	r2, r1
   162d4:	mov	r1, r0
   162d8:	mov	r0, #0
   162dc:	bl	1751c <__assert_fail@plt+0x66f8>
   162e0:	cmp	r0, #0
   162e4:	popne	{r4, pc}
   162e8:	bl	16830 <__assert_fail@plt+0x5a0c>
   162ec:	cmp	r1, #0
   162f0:	cmpne	r0, #0
   162f4:	moveq	r2, #1
   162f8:	movne	r2, r1
   162fc:	moveq	r1, r2
   16300:	movne	r1, r0
   16304:	push	{r4, lr}
   16308:	mov	r0, #0
   1630c:	bl	1751c <__assert_fail@plt+0x66f8>
   16310:	cmp	r0, #0
   16314:	popne	{r4, pc}
   16318:	bl	16830 <__assert_fail@plt+0x5a0c>
   1631c:	cmp	r0, #0
   16320:	push	{r4, r5, r6, lr}
   16324:	mov	r5, r1
   16328:	ldr	r4, [r1]
   1632c:	beq	16368 <__assert_fail@plt+0x5544>
   16330:	lsr	r2, r4, #1
   16334:	add	r3, r2, #1
   16338:	mvn	r3, r3
   1633c:	cmp	r4, r3
   16340:	bhi	16384 <__assert_fail@plt+0x5560>
   16344:	add	r4, r4, #1
   16348:	add	r4, r4, r2
   1634c:	mov	r1, r4
   16350:	mov	r2, #1
   16354:	bl	1751c <__assert_fail@plt+0x66f8>
   16358:	cmp	r0, #0
   1635c:	beq	16388 <__assert_fail@plt+0x5564>
   16360:	str	r4, [r5]
   16364:	pop	{r4, r5, r6, pc}
   16368:	cmp	r4, #0
   1636c:	moveq	r4, #64	; 0x40
   16370:	mov	r1, r4
   16374:	mov	r2, #1
   16378:	bl	1751c <__assert_fail@plt+0x66f8>
   1637c:	cmp	r0, #0
   16380:	bne	16360 <__assert_fail@plt+0x553c>
   16384:	bl	16830 <__assert_fail@plt+0x5a0c>
   16388:	cmp	r4, #0
   1638c:	bne	16384 <__assert_fail@plt+0x5560>
   16390:	str	r4, [r5]
   16394:	pop	{r4, r5, r6, pc}
   16398:	cmp	r0, #0
   1639c:	push	{r4, r5, r6, lr}
   163a0:	mov	r5, r1
   163a4:	ldr	r4, [r1]
   163a8:	mov	r6, r2
   163ac:	beq	163f0 <__assert_fail@plt+0x55cc>
   163b0:	lsr	r1, r4, #1
   163b4:	add	r3, r1, #1
   163b8:	mvn	r3, r3
   163bc:	cmp	r4, r3
   163c0:	bhi	16428 <__assert_fail@plt+0x5604>
   163c4:	add	r4, r4, #1
   163c8:	add	r4, r4, r1
   163cc:	mov	r1, r4
   163d0:	bl	1751c <__assert_fail@plt+0x66f8>
   163d4:	cmp	r0, #0
   163d8:	bne	163e8 <__assert_fail@plt+0x55c4>
   163dc:	cmp	r4, #0
   163e0:	cmpne	r6, #0
   163e4:	bne	16428 <__assert_fail@plt+0x5604>
   163e8:	str	r4, [r5]
   163ec:	pop	{r4, r5, r6, pc}
   163f0:	cmp	r4, #0
   163f4:	bne	16410 <__assert_fail@plt+0x55ec>
   163f8:	mov	r1, r2
   163fc:	mov	r0, #64	; 0x40
   16400:	bl	1765c <__assert_fail@plt+0x6838>
   16404:	cmp	r0, #0
   16408:	movne	r4, r0
   1640c:	addeq	r4, r0, #1
   16410:	mov	r2, r6
   16414:	mov	r1, r4
   16418:	mov	r0, #0
   1641c:	bl	1751c <__assert_fail@plt+0x66f8>
   16420:	cmp	r0, #0
   16424:	bne	163e8 <__assert_fail@plt+0x55c4>
   16428:	bl	16830 <__assert_fail@plt+0x5a0c>
   1642c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16430:	sub	sp, sp, #12
   16434:	ldr	r6, [r1]
   16438:	mov	r8, r1
   1643c:	mov	r9, r0
   16440:	asrs	r4, r6, #1
   16444:	mov	sl, r2
   16448:	mov	fp, r3
   1644c:	ldr	r7, [sp, #48]	; 0x30
   16450:	bmi	165cc <__assert_fail@plt+0x57a8>
   16454:	mvn	r1, #-2147483648	; 0x80000000
   16458:	sub	r1, r1, r4
   1645c:	cmp	r6, r1
   16460:	movle	r1, #0
   16464:	movgt	r1, #1
   16468:	mvn	r3, fp
   1646c:	cmp	r1, #0
   16470:	addeq	r4, r4, r6
   16474:	mvnne	r4, #-2147483648	; 0x80000000
   16478:	lsr	r3, r3, #31
   1647c:	cmp	fp, r4
   16480:	movge	r2, #0
   16484:	andlt	r2, r3, #1
   16488:	cmp	r2, #0
   1648c:	beq	1657c <__assert_fail@plt+0x5758>
   16490:	cmp	r7, #0
   16494:	blt	16664 <__assert_fail@plt+0x5840>
   16498:	bne	1665c <__assert_fail@plt+0x5838>
   1649c:	mov	r5, #64	; 0x40
   164a0:	mov	r1, r7
   164a4:	mov	r0, r5
   164a8:	str	r3, [sp, #4]
   164ac:	bl	17868 <__assert_fail@plt+0x6a44>
   164b0:	mov	r1, r7
   164b4:	mov	r4, r0
   164b8:	mov	r0, r5
   164bc:	bl	17a88 <__assert_fail@plt+0x6c64>
   164c0:	ldr	r3, [sp, #4]
   164c4:	sub	r5, r5, r1
   164c8:	cmp	r9, #0
   164cc:	sub	r2, r4, r6
   164d0:	streq	r9, [r8]
   164d4:	cmp	r2, sl
   164d8:	bge	1655c <__assert_fail@plt+0x5738>
   164dc:	cmp	sl, #0
   164e0:	blt	165fc <__assert_fail@plt+0x57d8>
   164e4:	cmp	r6, #0
   164e8:	blt	16508 <__assert_fail@plt+0x56e4>
   164ec:	mvn	r2, #-2147483648	; 0x80000000
   164f0:	sub	r2, r2, sl
   164f4:	cmp	r6, r2
   164f8:	movle	r2, #0
   164fc:	movgt	r2, #1
   16500:	cmp	r2, #0
   16504:	bne	165f8 <__assert_fail@plt+0x57d4>
   16508:	add	r6, r6, sl
   1650c:	cmp	fp, r6
   16510:	movge	r3, #0
   16514:	andlt	r3, r3, #1
   16518:	cmp	r3, #0
   1651c:	mov	r4, r6
   16520:	bne	165f8 <__assert_fail@plt+0x57d4>
   16524:	cmp	r7, #0
   16528:	blt	16610 <__assert_fail@plt+0x57ec>
   1652c:	beq	16558 <__assert_fail@plt+0x5734>
   16530:	cmp	r6, #0
   16534:	blt	166b4 <__assert_fail@plt+0x5890>
   16538:	mov	r1, r7
   1653c:	mvn	r0, #-2147483648	; 0x80000000
   16540:	bl	17868 <__assert_fail@plt+0x6a44>
   16544:	cmp	r6, r0
   16548:	movle	r0, #0
   1654c:	movgt	r0, #1
   16550:	cmp	r0, #0
   16554:	bne	165f8 <__assert_fail@plt+0x57d4>
   16558:	mul	r5, r6, r7
   1655c:	mov	r1, r5
   16560:	mov	r0, r9
   16564:	bl	171c4 <__assert_fail@plt+0x63a0>
   16568:	cmp	r0, #0
   1656c:	beq	165e0 <__assert_fail@plt+0x57bc>
   16570:	str	r4, [r8]
   16574:	add	sp, sp, #12
   16578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1657c:	cmp	r7, #0
   16580:	blt	1663c <__assert_fail@plt+0x5818>
   16584:	beq	1649c <__assert_fail@plt+0x5678>
   16588:	cmp	r4, #0
   1658c:	blt	1666c <__assert_fail@plt+0x5848>
   16590:	mov	r1, r7
   16594:	mvn	r0, #-2147483648	; 0x80000000
   16598:	str	r3, [sp, #4]
   1659c:	bl	17868 <__assert_fail@plt+0x6a44>
   165a0:	ldr	r3, [sp, #4]
   165a4:	cmp	r0, r4
   165a8:	movge	r0, #0
   165ac:	movlt	r0, #1
   165b0:	cmp	r0, #0
   165b4:	mvnne	r5, #-2147483648	; 0x80000000
   165b8:	bne	164a0 <__assert_fail@plt+0x567c>
   165bc:	mul	r5, r7, r4
   165c0:	cmp	r5, #63	; 0x3f
   165c4:	bgt	164c8 <__assert_fail@plt+0x56a4>
   165c8:	b	1649c <__assert_fail@plt+0x5678>
   165cc:	rsb	r1, r4, #-2147483648	; 0x80000000
   165d0:	cmp	r6, r1
   165d4:	movge	r1, #0
   165d8:	movlt	r1, #1
   165dc:	b	16468 <__assert_fail@plt+0x5644>
   165e0:	adds	r5, r5, #0
   165e4:	movne	r5, #1
   165e8:	cmp	r9, #0
   165ec:	orreq	r5, r5, #1
   165f0:	cmp	r5, #0
   165f4:	beq	16570 <__assert_fail@plt+0x574c>
   165f8:	bl	16830 <__assert_fail@plt+0x5a0c>
   165fc:	rsb	r2, sl, #-2147483648	; 0x80000000
   16600:	cmp	r6, r2
   16604:	movge	r2, #0
   16608:	movlt	r2, #1
   1660c:	b	16500 <__assert_fail@plt+0x56dc>
   16610:	cmp	r6, #0
   16614:	blt	16698 <__assert_fail@plt+0x5874>
   16618:	cmn	r7, #1
   1661c:	beq	16558 <__assert_fail@plt+0x5734>
   16620:	mov	r1, r7
   16624:	mov	r0, #-2147483648	; 0x80000000
   16628:	bl	17868 <__assert_fail@plt+0x6a44>
   1662c:	cmp	r6, r0
   16630:	movle	r0, #0
   16634:	movgt	r0, #1
   16638:	b	16550 <__assert_fail@plt+0x572c>
   1663c:	cmp	r4, #0
   16640:	blt	166d8 <__assert_fail@plt+0x58b4>
   16644:	cmn	r7, #1
   16648:	beq	165bc <__assert_fail@plt+0x5798>
   1664c:	str	r3, [sp, #4]
   16650:	mov	r1, r7
   16654:	mov	r0, #-2147483648	; 0x80000000
   16658:	b	1659c <__assert_fail@plt+0x5778>
   1665c:	mov	r4, fp
   16660:	b	16590 <__assert_fail@plt+0x576c>
   16664:	mov	r4, fp
   16668:	b	16644 <__assert_fail@plt+0x5820>
   1666c:	cmn	r4, #1
   16670:	beq	165bc <__assert_fail@plt+0x5798>
   16674:	mov	r1, r4
   16678:	mov	r0, #-2147483648	; 0x80000000
   1667c:	str	r3, [sp, #4]
   16680:	bl	17868 <__assert_fail@plt+0x6a44>
   16684:	ldr	r3, [sp, #4]
   16688:	cmp	r7, r0
   1668c:	movle	r0, #0
   16690:	movgt	r0, #1
   16694:	b	165b0 <__assert_fail@plt+0x578c>
   16698:	mov	r1, r7
   1669c:	mvn	r0, #-2147483648	; 0x80000000
   166a0:	bl	17868 <__assert_fail@plt+0x6a44>
   166a4:	cmp	r6, r0
   166a8:	movge	r0, #0
   166ac:	movlt	r0, #1
   166b0:	b	16550 <__assert_fail@plt+0x572c>
   166b4:	cmn	r6, #1
   166b8:	beq	16558 <__assert_fail@plt+0x5734>
   166bc:	mov	r1, r6
   166c0:	mov	r0, #-2147483648	; 0x80000000
   166c4:	bl	17868 <__assert_fail@plt+0x6a44>
   166c8:	cmp	r7, r0
   166cc:	movle	r0, #0
   166d0:	movgt	r0, #1
   166d4:	b	16550 <__assert_fail@plt+0x572c>
   166d8:	mov	r1, r7
   166dc:	mvn	r0, #-2147483648	; 0x80000000
   166e0:	str	r3, [sp, #4]
   166e4:	bl	17868 <__assert_fail@plt+0x6a44>
   166e8:	ldr	r3, [sp, #4]
   166ec:	cmp	r0, r4
   166f0:	movle	r0, #0
   166f4:	movgt	r0, #1
   166f8:	b	165b0 <__assert_fail@plt+0x578c>
   166fc:	push	{r4, lr}
   16700:	mov	r1, #1
   16704:	bl	17150 <__assert_fail@plt+0x632c>
   16708:	cmp	r0, #0
   1670c:	popne	{r4, pc}
   16710:	bl	16830 <__assert_fail@plt+0x5a0c>
   16714:	push	{r4, lr}
   16718:	mov	r1, #1
   1671c:	bl	17150 <__assert_fail@plt+0x632c>
   16720:	cmp	r0, #0
   16724:	popne	{r4, pc}
   16728:	bl	16830 <__assert_fail@plt+0x5a0c>
   1672c:	push	{r4, lr}
   16730:	bl	17150 <__assert_fail@plt+0x632c>
   16734:	cmp	r0, #0
   16738:	popne	{r4, pc}
   1673c:	bl	16830 <__assert_fail@plt+0x5a0c>
   16740:	push	{r4, lr}
   16744:	bl	17150 <__assert_fail@plt+0x632c>
   16748:	cmp	r0, #0
   1674c:	popne	{r4, pc}
   16750:	bl	16830 <__assert_fail@plt+0x5a0c>
   16754:	push	{r4, r5, r6, lr}
   16758:	mov	r6, r0
   1675c:	mov	r0, r1
   16760:	mov	r4, r1
   16764:	bl	17198 <__assert_fail@plt+0x6374>
   16768:	subs	r5, r0, #0
   1676c:	beq	16784 <__assert_fail@plt+0x5960>
   16770:	mov	r2, r4
   16774:	mov	r1, r6
   16778:	bl	10c44 <memcpy@plt>
   1677c:	mov	r0, r5
   16780:	pop	{r4, r5, r6, pc}
   16784:	bl	16830 <__assert_fail@plt+0x5a0c>
   16788:	push	{r4, r5, r6, lr}
   1678c:	mov	r6, r0
   16790:	mov	r0, r1
   16794:	mov	r4, r1
   16798:	bl	17198 <__assert_fail@plt+0x6374>
   1679c:	subs	r5, r0, #0
   167a0:	beq	167b8 <__assert_fail@plt+0x5994>
   167a4:	mov	r2, r4
   167a8:	mov	r1, r6
   167ac:	bl	10c44 <memcpy@plt>
   167b0:	mov	r0, r5
   167b4:	pop	{r4, r5, r6, pc}
   167b8:	bl	16830 <__assert_fail@plt+0x5a0c>
   167bc:	push	{r4, r5, r6, lr}
   167c0:	mov	r6, r0
   167c4:	add	r0, r1, #1
   167c8:	mov	r4, r1
   167cc:	bl	17198 <__assert_fail@plt+0x6374>
   167d0:	subs	r5, r0, #0
   167d4:	beq	167f4 <__assert_fail@plt+0x59d0>
   167d8:	mov	r3, #0
   167dc:	mov	r1, r6
   167e0:	strb	r3, [r5, r4]
   167e4:	mov	r2, r4
   167e8:	bl	10c44 <memcpy@plt>
   167ec:	mov	r0, r5
   167f0:	pop	{r4, r5, r6, pc}
   167f4:	bl	16830 <__assert_fail@plt+0x5a0c>
   167f8:	push	{r4, r5, r6, lr}
   167fc:	mov	r6, r0
   16800:	bl	10d64 <strlen@plt>
   16804:	add	r4, r0, #1
   16808:	mov	r0, r4
   1680c:	bl	17198 <__assert_fail@plt+0x6374>
   16810:	subs	r5, r0, #0
   16814:	beq	1682c <__assert_fail@plt+0x5a08>
   16818:	mov	r2, r4
   1681c:	mov	r1, r6
   16820:	bl	10c44 <memcpy@plt>
   16824:	mov	r0, r5
   16828:	pop	{r4, r5, r6, pc}
   1682c:	bl	16830 <__assert_fail@plt+0x5a0c>
   16830:	ldr	r3, [pc, #44]	; 16864 <__assert_fail@plt+0x5a40>
   16834:	push	{r4, lr}
   16838:	mov	r2, #5
   1683c:	ldr	r1, [pc, #36]	; 16868 <__assert_fail@plt+0x5a44>
   16840:	mov	r0, #0
   16844:	ldr	r4, [r3]
   16848:	bl	10c80 <dcgettext@plt>
   1684c:	ldr	r2, [pc, #24]	; 1686c <__assert_fail@plt+0x5a48>
   16850:	mov	r1, #0
   16854:	mov	r3, r0
   16858:	mov	r0, r4
   1685c:	bl	10cf8 <error@plt>
   16860:	bl	10e18 <abort@plt>
   16864:	andeq	r9, r2, r0, ror #1
   16868:	andeq	r8, r1, r4, lsl #10
   1686c:	andeq	r8, r1, ip, asr #1
   16870:	cmp	r2, #36	; 0x24
   16874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16878:	sub	sp, sp, #28
   1687c:	bhi	17128 <__assert_fail@plt+0x6304>
   16880:	cmp	r1, #0
   16884:	mov	r5, r1
   16888:	mov	r6, r2
   1688c:	addeq	r5, sp, #20
   16890:	mov	r9, r0
   16894:	mov	r8, r3
   16898:	bl	10d7c <__errno_location@plt>
   1689c:	mov	r4, #0
   168a0:	mov	r2, r6
   168a4:	mov	r1, r5
   168a8:	str	r4, [r0]
   168ac:	mov	sl, r0
   168b0:	mov	r0, r9
   168b4:	bl	10c14 <strtol@plt>
   168b8:	ldr	r6, [r5]
   168bc:	cmp	r9, r6
   168c0:	mov	r7, r0
   168c4:	beq	16914 <__assert_fail@plt+0x5af0>
   168c8:	ldr	r4, [sl]
   168cc:	cmp	r4, #0
   168d0:	bne	168fc <__assert_fail@plt+0x5ad8>
   168d4:	ldr	r3, [sp, #64]	; 0x40
   168d8:	cmp	r3, #0
   168dc:	beq	168ec <__assert_fail@plt+0x5ac8>
   168e0:	ldrb	r9, [r6]
   168e4:	cmp	r9, #0
   168e8:	bne	16944 <__assert_fail@plt+0x5b20>
   168ec:	str	r7, [r8]
   168f0:	mov	r0, r4
   168f4:	add	sp, sp, #28
   168f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168fc:	cmp	r4, #34	; 0x22
   16900:	beq	16b64 <__assert_fail@plt+0x5d40>
   16904:	mov	r4, #4
   16908:	mov	r0, r4
   1690c:	add	sp, sp, #28
   16910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16914:	ldr	r3, [sp, #64]	; 0x40
   16918:	cmp	r3, r4
   1691c:	beq	16904 <__assert_fail@plt+0x5ae0>
   16920:	ldrb	r9, [r9]
   16924:	cmp	r9, r4
   16928:	beq	16904 <__assert_fail@plt+0x5ae0>
   1692c:	mov	r1, r9
   16930:	mov	r0, r3
   16934:	bl	10d70 <strchr@plt>
   16938:	cmp	r0, r4
   1693c:	movne	r7, #1
   16940:	beq	16904 <__assert_fail@plt+0x5ae0>
   16944:	mov	r1, r9
   16948:	ldr	r0, [sp, #64]	; 0x40
   1694c:	bl	10d70 <strchr@plt>
   16950:	cmp	r0, #0
   16954:	beq	16e0c <__assert_fail@plt+0x5fe8>
   16958:	sub	r3, r9, #69	; 0x45
   1695c:	cmp	r3, #47	; 0x2f
   16960:	ldrls	pc, [pc, r3, lsl #2]
   16964:	b	16a28 <__assert_fail@plt+0x5c04>
   16968:	andeq	r6, r1, r0, lsr #22
   1696c:	andeq	r6, r1, r8, lsr #20
   16970:	andeq	r6, r1, r0, lsr #22
   16974:	andeq	r6, r1, r8, lsr #20
   16978:	andeq	r6, r1, r8, lsr #20
   1697c:	andeq	r6, r1, r8, lsr #20
   16980:	andeq	r6, r1, r0, lsr #22
   16984:	andeq	r6, r1, r8, lsr #20
   16988:	andeq	r6, r1, r0, lsr #22
   1698c:	andeq	r6, r1, r8, lsr #20
   16990:	andeq	r6, r1, r8, lsr #20
   16994:	andeq	r6, r1, r0, lsr #22
   16998:	andeq	r6, r1, r8, lsr #20
   1699c:	andeq	r6, r1, r8, lsr #20
   169a0:	andeq	r6, r1, r8, lsr #20
   169a4:	andeq	r6, r1, r0, lsr #22
   169a8:	andeq	r6, r1, r8, lsr #20
   169ac:	andeq	r6, r1, r8, lsr #20
   169b0:	andeq	r6, r1, r8, lsr #20
   169b4:	andeq	r6, r1, r8, lsr #20
   169b8:	andeq	r6, r1, r0, lsr #22
   169bc:	andeq	r6, r1, r0, lsr #22
   169c0:	andeq	r6, r1, r8, lsr #20
   169c4:	andeq	r6, r1, r8, lsr #20
   169c8:	andeq	r6, r1, r8, lsr #20
   169cc:	andeq	r6, r1, r8, lsr #20
   169d0:	andeq	r6, r1, r8, lsr #20
   169d4:	andeq	r6, r1, r8, lsr #20
   169d8:	andeq	r6, r1, r8, lsr #20
   169dc:	andeq	r6, r1, r8, lsr #20
   169e0:	andeq	r6, r1, r8, lsr #20
   169e4:	andeq	r6, r1, r8, lsr #20
   169e8:	andeq	r6, r1, r8, lsr #20
   169ec:	andeq	r6, r1, r8, lsr #20
   169f0:	andeq	r6, r1, r0, lsr #22
   169f4:	andeq	r6, r1, r8, lsr #20
   169f8:	andeq	r6, r1, r8, lsr #20
   169fc:	andeq	r6, r1, r8, lsr #20
   16a00:	andeq	r6, r1, r0, lsr #22
   16a04:	andeq	r6, r1, r8, lsr #20
   16a08:	andeq	r6, r1, r0, lsr #22
   16a0c:	andeq	r6, r1, r8, lsr #20
   16a10:	andeq	r6, r1, r8, lsr #20
   16a14:	andeq	r6, r1, r8, lsr #20
   16a18:	andeq	r6, r1, r8, lsr #20
   16a1c:	andeq	r6, r1, r8, lsr #20
   16a20:	andeq	r6, r1, r8, lsr #20
   16a24:	andeq	r6, r1, r0, lsr #22
   16a28:	ldr	r3, [pc, #1804]	; 1713c <__assert_fail@plt+0x6318>
   16a2c:	mov	sl, #1024	; 0x400
   16a30:	mov	fp, #1
   16a34:	stm	sp, {r3, sl}
   16a38:	sub	r9, r9, #66	; 0x42
   16a3c:	cmp	r9, #53	; 0x35
   16a40:	ldrls	pc, [pc, r9, lsl #2]
   16a44:	b	16e0c <__assert_fail@plt+0x5fe8>
   16a48:			; <UNDEFINED> instruction: 0x00016db8
   16a4c:	andeq	r6, r1, ip, lsl #28
   16a50:	andeq	r6, r1, ip, lsl #28
   16a54:	andeq	r6, r1, ip, lsl ip
   16a58:	andeq	r6, r1, ip, lsl #28
   16a5c:	andeq	r6, r1, r4, ror #23
   16a60:	andeq	r6, r1, ip, lsl #28
   16a64:	andeq	r6, r1, ip, lsl #28
   16a68:	andeq	r6, r1, ip, lsl #28
   16a6c:	andeq	r6, r1, r8, lsl lr
   16a70:	andeq	r6, r1, ip, lsl #28
   16a74:	andeq	r6, r1, ip, lsr #23
   16a78:	andeq	r6, r1, ip, lsl #28
   16a7c:	andeq	r6, r1, ip, lsl #28
   16a80:	andeq	r6, r1, r4, lsl #26
   16a84:	andeq	r6, r1, ip, lsl #28
   16a88:	andeq	r6, r1, ip, lsl #28
   16a8c:	andeq	r6, r1, ip, lsl #28
   16a90:	andeq	r6, r1, ip, asr #25
   16a94:	andeq	r6, r1, ip, lsl #28
   16a98:	andeq	r6, r1, ip, lsl #28
   16a9c:	andeq	r6, r1, ip, lsl #28
   16aa0:	andeq	r6, r1, ip, lsl #28
   16aa4:	andeq	r6, r1, ip, lsr sp
   16aa8:	andeq	r6, r1, r8, ror ip
   16aac:	andeq	r6, r1, ip, lsl #28
   16ab0:	andeq	r6, r1, ip, lsl #28
   16ab4:	andeq	r6, r1, ip, lsl #28
   16ab8:	andeq	r6, r1, ip, lsl #28
   16abc:	andeq	r6, r1, ip, lsl #28
   16ac0:	andeq	r6, r1, ip, lsl #28
   16ac4:	andeq	r6, r1, ip, lsl #28
   16ac8:	strdeq	r6, [r1], -r0
   16acc:	andeq	r6, r1, ip, lsl #23
   16ad0:	andeq	r6, r1, ip, lsl #28
   16ad4:	andeq	r6, r1, ip, lsl #28
   16ad8:	andeq	r6, r1, ip, lsl #28
   16adc:	andeq	r6, r1, r4, ror #23
   16ae0:	andeq	r6, r1, ip, lsl #28
   16ae4:	andeq	r6, r1, ip, lsl #28
   16ae8:	andeq	r6, r1, ip, lsl #28
   16aec:	andeq	r6, r1, r8, lsl lr
   16af0:	andeq	r6, r1, ip, lsl #28
   16af4:	andeq	r6, r1, ip, lsr #23
   16af8:	andeq	r6, r1, ip, lsl #28
   16afc:	andeq	r6, r1, ip, lsl #28
   16b00:	andeq	r6, r1, ip, lsl #28
   16b04:	andeq	r6, r1, ip, lsl #28
   16b08:	andeq	r6, r1, ip, lsl #28
   16b0c:	andeq	r6, r1, ip, lsl #28
   16b10:	andeq	r6, r1, ip, asr #25
   16b14:	andeq	r6, r1, ip, lsl #28
   16b18:	andeq	r6, r1, ip, lsl #28
   16b1c:	ldrdeq	r6, [r1], -r4
   16b20:	mov	r1, #48	; 0x30
   16b24:	ldr	r0, [sp, #64]	; 0x40
   16b28:	bl	10d70 <strchr@plt>
   16b2c:	cmp	r0, #0
   16b30:	beq	16a28 <__assert_fail@plt+0x5c04>
   16b34:	ldrb	r3, [r6, #1]
   16b38:	cmp	r3, #68	; 0x44
   16b3c:	beq	16b50 <__assert_fail@plt+0x5d2c>
   16b40:	cmp	r3, #105	; 0x69
   16b44:	beq	16b6c <__assert_fail@plt+0x5d48>
   16b48:	cmp	r3, #66	; 0x42
   16b4c:	bne	16a28 <__assert_fail@plt+0x5c04>
   16b50:	ldr	r3, [pc, #1512]	; 17140 <__assert_fail@plt+0x631c>
   16b54:	mov	sl, #1000	; 0x3e8
   16b58:	mov	fp, #2
   16b5c:	stm	sp, {r3, sl}
   16b60:	b	16a38 <__assert_fail@plt+0x5c14>
   16b64:	mov	r4, #1
   16b68:	b	168d4 <__assert_fail@plt+0x5ab0>
   16b6c:	ldrb	r3, [r6, #2]
   16b70:	mov	sl, #1024	; 0x400
   16b74:	cmp	r3, #66	; 0x42
   16b78:	beq	16eec <__assert_fail@plt+0x60c8>
   16b7c:	ldr	r3, [pc, #1464]	; 1713c <__assert_fail@plt+0x6318>
   16b80:	mov	fp, #1
   16b84:	stm	sp, {r3, sl}
   16b88:	b	16a38 <__assert_fail@plt+0x5c14>
   16b8c:	mov	r9, #0
   16b90:	add	r3, r6, fp
   16b94:	str	r3, [r5]
   16b98:	ldrb	r3, [r6, fp]
   16b9c:	orr	r4, r4, r9
   16ba0:	cmp	r3, #0
   16ba4:	orrne	r4, r4, #2
   16ba8:	b	168ec <__assert_fail@plt+0x5ac8>
   16bac:	mov	r3, #1
   16bb0:	mov	r2, r3
   16bb4:	mov	r9, #0
   16bb8:	cmp	r7, #0
   16bbc:	ldrge	r1, [sp]
   16bc0:	blt	170b0 <__assert_fail@plt+0x628c>
   16bc4:	cmp	r7, r1
   16bc8:	ble	170e0 <__assert_fail@plt+0x62bc>
   16bcc:	sub	r3, r3, #1
   16bd0:	cmn	r3, #1
   16bd4:	mvn	r7, #-2147483648	; 0x80000000
   16bd8:	mov	r9, r2
   16bdc:	bne	16bc4 <__assert_fail@plt+0x5da0>
   16be0:	b	16dc8 <__assert_fail@plt+0x5fa4>
   16be4:	mov	r3, #2
   16be8:	mov	r9, #0
   16bec:	mov	r2, #1
   16bf0:	cmp	r7, #0
   16bf4:	ldrge	r1, [sp]
   16bf8:	blt	17064 <__assert_fail@plt+0x6240>
   16bfc:	cmp	r7, r1
   16c00:	ble	1704c <__assert_fail@plt+0x6228>
   16c04:	sub	r3, r3, #1
   16c08:	cmn	r3, #1
   16c0c:	mvn	r7, #-2147483648	; 0x80000000
   16c10:	mov	r9, r2
   16c14:	bne	16bfc <__assert_fail@plt+0x5dd8>
   16c18:	b	16dc8 <__assert_fail@plt+0x5fa4>
   16c1c:	mov	r3, #5
   16c20:	mov	r1, r8
   16c24:	mov	r9, #0
   16c28:	mov	r8, r5
   16c2c:	mov	r2, #1
   16c30:	mov	r5, r4
   16c34:	mov	r4, sl
   16c38:	mov	sl, r3
   16c3c:	mov	r3, r1
   16c40:	cmp	r7, #0
   16c44:	ldrge	r1, [sp]
   16c48:	blt	16e38 <__assert_fail@plt+0x6014>
   16c4c:	cmp	r7, r1
   16c50:	ble	16e90 <__assert_fail@plt+0x606c>
   16c54:	sub	sl, sl, #1
   16c58:	cmn	sl, #1
   16c5c:	mvn	r7, #-2147483648	; 0x80000000
   16c60:	mov	r9, r2
   16c64:	bne	16c4c <__assert_fail@plt+0x5e28>
   16c68:	mov	r4, r5
   16c6c:	mov	r5, r8
   16c70:	mov	r8, r3
   16c74:	b	16dc8 <__assert_fail@plt+0x5fa4>
   16c78:	mov	r3, #6
   16c7c:	mov	r9, #0
   16c80:	mov	r1, r8
   16c84:	mov	r2, #1
   16c88:	mov	r8, r5
   16c8c:	mov	r5, r4
   16c90:	mov	r4, r9
   16c94:	mov	r9, sl
   16c98:	mov	sl, r3
   16c9c:	mov	r3, r1
   16ca0:	cmp	r7, #0
   16ca4:	ldrge	r1, [sp]
   16ca8:	blt	16ea4 <__assert_fail@plt+0x6080>
   16cac:	cmp	r7, r1
   16cb0:	ble	16f28 <__assert_fail@plt+0x6104>
   16cb4:	sub	sl, sl, #1
   16cb8:	cmn	sl, #1
   16cbc:	mvn	r7, #-2147483648	; 0x80000000
   16cc0:	mov	r4, r2
   16cc4:	bne	16cac <__assert_fail@plt+0x5e88>
   16cc8:	b	16c68 <__assert_fail@plt+0x5e44>
   16ccc:	mov	r3, #3
   16cd0:	mov	r9, #0
   16cd4:	mov	r2, #1
   16cd8:	cmp	r7, #0
   16cdc:	ldrge	r1, [sp]
   16ce0:	blt	16ffc <__assert_fail@plt+0x61d8>
   16ce4:	cmp	r7, r1
   16ce8:	ble	1702c <__assert_fail@plt+0x6208>
   16cec:	sub	r3, r3, #1
   16cf0:	cmn	r3, #1
   16cf4:	mvn	r7, #-2147483648	; 0x80000000
   16cf8:	mov	r9, r2
   16cfc:	bne	16ce4 <__assert_fail@plt+0x5ec0>
   16d00:	b	16dc8 <__assert_fail@plt+0x5fa4>
   16d04:	mov	r3, #4
   16d08:	mov	r9, #0
   16d0c:	mov	r2, #1
   16d10:	cmp	r7, #0
   16d14:	ldrge	r1, [sp]
   16d18:	blt	16f74 <__assert_fail@plt+0x6150>
   16d1c:	cmp	r1, r7
   16d20:	bge	16fa4 <__assert_fail@plt+0x6180>
   16d24:	sub	r3, r3, #1
   16d28:	cmn	r3, #1
   16d2c:	mov	r9, r2
   16d30:	mvn	r7, #-2147483648	; 0x80000000
   16d34:	bne	16d1c <__assert_fail@plt+0x5ef8>
   16d38:	b	16dc8 <__assert_fail@plt+0x5fa4>
   16d3c:	mov	r3, #7
   16d40:	mov	r9, #0
   16d44:	mov	r1, r8
   16d48:	mov	r2, #1
   16d4c:	mov	r8, r5
   16d50:	mov	r5, r4
   16d54:	mov	r4, r9
   16d58:	mov	r9, sl
   16d5c:	mov	sl, r3
   16d60:	mov	r3, r1
   16d64:	cmp	r7, #0
   16d68:	ldrge	r1, [sp]
   16d6c:	bge	16d88 <__assert_fail@plt+0x5f64>
   16d70:	b	16f40 <__assert_fail@plt+0x611c>
   16d74:	sub	sl, sl, #1
   16d78:	cmn	sl, #1
   16d7c:	mvn	r7, #-2147483648	; 0x80000000
   16d80:	mov	r4, r2
   16d84:	beq	16c68 <__assert_fail@plt+0x5e44>
   16d88:	cmp	r1, r7
   16d8c:	blt	16d74 <__assert_fail@plt+0x5f50>
   16d90:	cmp	sl, #0
   16d94:	mov	r1, sl
   16d98:	mul	r7, r9, r7
   16d9c:	sub	sl, sl, #1
   16da0:	bne	16d64 <__assert_fail@plt+0x5f40>
   16da4:	mov	r9, r4
   16da8:	mov	r4, r5
   16dac:	mov	r5, r8
   16db0:	mov	r8, r3
   16db4:	b	16b90 <__assert_fail@plt+0x5d6c>
   16db8:	cmp	r7, #0
   16dbc:	blt	16f00 <__assert_fail@plt+0x60dc>
   16dc0:	cmp	r7, #2097152	; 0x200000
   16dc4:	blt	16f1c <__assert_fail@plt+0x60f8>
   16dc8:	mvn	r7, #-2147483648	; 0x80000000
   16dcc:	mov	r9, #1
   16dd0:	b	16b90 <__assert_fail@plt+0x5d6c>
   16dd4:	cmp	r7, #0
   16dd8:	blt	16fbc <__assert_fail@plt+0x6198>
   16ddc:	cmn	r7, #-1073741823	; 0xc0000001
   16de0:	bgt	16dc8 <__assert_fail@plt+0x5fa4>
   16de4:	lsl	r7, r7, #1
   16de8:	mov	r9, #0
   16dec:	b	16b90 <__assert_fail@plt+0x5d6c>
   16df0:	cmp	r7, #0
   16df4:	blt	16fdc <__assert_fail@plt+0x61b8>
   16df8:	cmp	r7, #4194304	; 0x400000
   16dfc:	bge	16dc8 <__assert_fail@plt+0x5fa4>
   16e00:	lsl	r7, r7, #9
   16e04:	mov	r9, #0
   16e08:	b	16b90 <__assert_fail@plt+0x5d6c>
   16e0c:	str	r7, [r8]
   16e10:	orr	r4, r4, #2
   16e14:	b	168f0 <__assert_fail@plt+0x5acc>
   16e18:	cmp	r7, #0
   16e1c:	blt	170f8 <__assert_fail@plt+0x62d4>
   16e20:	ldr	r3, [sp]
   16e24:	cmp	r7, r3
   16e28:	bgt	16dc8 <__assert_fail@plt+0x5fa4>
   16e2c:	mul	r7, sl, r7
   16e30:	mov	r9, #0
   16e34:	b	16b90 <__assert_fail@plt+0x5d6c>
   16e38:	cmn	r7, #1
   16e3c:	beq	16e90 <__assert_fail@plt+0x606c>
   16e40:	str	r4, [sp, #12]
   16e44:	mov	r4, r9
   16e48:	mov	r9, r3
   16e4c:	b	16e64 <__assert_fail@plt+0x6040>
   16e50:	sub	sl, sl, #1
   16e54:	cmn	sl, #1
   16e58:	mov	r4, r2
   16e5c:	mov	r7, #-2147483648	; 0x80000000
   16e60:	beq	17118 <__assert_fail@plt+0x62f4>
   16e64:	mov	r1, r7
   16e68:	mov	r0, #-2147483648	; 0x80000000
   16e6c:	str	r2, [sp, #8]
   16e70:	bl	17868 <__assert_fail@plt+0x6a44>
   16e74:	ldr	r3, [sp, #4]
   16e78:	ldr	r2, [sp, #8]
   16e7c:	cmp	r0, r3
   16e80:	blt	16e50 <__assert_fail@plt+0x602c>
   16e84:	mov	r3, r9
   16e88:	mov	r9, r4
   16e8c:	ldr	r4, [sp, #12]
   16e90:	cmp	sl, #0
   16e94:	mul	r7, r4, r7
   16e98:	sub	sl, sl, #1
   16e9c:	bne	16c40 <__assert_fail@plt+0x5e1c>
   16ea0:	b	16da8 <__assert_fail@plt+0x5f84>
   16ea4:	cmn	r7, #1
   16ea8:	beq	16f28 <__assert_fail@plt+0x6104>
   16eac:	mov	r1, r7
   16eb0:	mov	r0, #-2147483648	; 0x80000000
   16eb4:	str	r3, [sp, #12]
   16eb8:	str	r2, [sp, #8]
   16ebc:	bl	17868 <__assert_fail@plt+0x6a44>
   16ec0:	ldr	r3, [sp, #4]
   16ec4:	ldr	r2, [sp, #8]
   16ec8:	cmp	r0, r3
   16ecc:	ldr	r3, [sp, #12]
   16ed0:	bge	16f28 <__assert_fail@plt+0x6104>
   16ed4:	mov	r4, r5
   16ed8:	mov	r5, r8
   16edc:	mov	r8, r3
   16ee0:	mov	r7, #-2147483648	; 0x80000000
   16ee4:	mov	r9, #1
   16ee8:	b	16b90 <__assert_fail@plt+0x5d6c>
   16eec:	ldr	r3, [pc, #584]	; 1713c <__assert_fail@plt+0x6318>
   16ef0:	str	sl, [sp, #4]
   16ef4:	str	r3, [sp]
   16ef8:	mov	fp, #3
   16efc:	b	16a38 <__assert_fail@plt+0x5c14>
   16f00:	cmn	r7, #1
   16f04:	beq	16f1c <__assert_fail@plt+0x60f8>
   16f08:	mov	r1, r7
   16f0c:	mov	r0, #-2147483648	; 0x80000000
   16f10:	bl	17868 <__assert_fail@plt+0x6a44>
   16f14:	cmp	r0, #1024	; 0x400
   16f18:	blt	16ee0 <__assert_fail@plt+0x60bc>
   16f1c:	lsl	r7, r7, #10
   16f20:	mov	r9, #0
   16f24:	b	16b90 <__assert_fail@plt+0x5d6c>
   16f28:	cmp	sl, #0
   16f2c:	mov	r1, sl
   16f30:	mul	r7, r9, r7
   16f34:	sub	sl, sl, #1
   16f38:	bne	16ca0 <__assert_fail@plt+0x5e7c>
   16f3c:	b	16da4 <__assert_fail@plt+0x5f80>
   16f40:	cmn	r7, #1
   16f44:	beq	16d90 <__assert_fail@plt+0x5f6c>
   16f48:	mov	r1, r7
   16f4c:	mov	r0, #-2147483648	; 0x80000000
   16f50:	str	r3, [sp, #12]
   16f54:	str	r2, [sp, #8]
   16f58:	bl	17868 <__assert_fail@plt+0x6a44>
   16f5c:	ldr	r3, [sp, #4]
   16f60:	ldr	r2, [sp, #8]
   16f64:	cmp	r0, r3
   16f68:	ldr	r3, [sp, #12]
   16f6c:	blt	16ed4 <__assert_fail@plt+0x60b0>
   16f70:	b	16d90 <__assert_fail@plt+0x5f6c>
   16f74:	cmn	r7, #1
   16f78:	beq	16fa4 <__assert_fail@plt+0x6180>
   16f7c:	mov	r1, r7
   16f80:	mov	r0, #-2147483648	; 0x80000000
   16f84:	str	r3, [sp, #12]
   16f88:	str	r2, [sp, #8]
   16f8c:	bl	17868 <__assert_fail@plt+0x6a44>
   16f90:	ldr	r3, [sp, #4]
   16f94:	ldr	r2, [sp, #8]
   16f98:	cmp	r0, r3
   16f9c:	ldr	r3, [sp, #12]
   16fa0:	blt	16ee0 <__assert_fail@plt+0x60bc>
   16fa4:	cmp	r3, #0
   16fa8:	mov	r1, r3
   16fac:	mul	r7, sl, r7
   16fb0:	sub	r3, r3, #1
   16fb4:	bne	16d10 <__assert_fail@plt+0x5eec>
   16fb8:	b	16b90 <__assert_fail@plt+0x5d6c>
   16fbc:	cmn	r7, #1
   16fc0:	beq	16de4 <__assert_fail@plt+0x5fc0>
   16fc4:	mov	r1, r7
   16fc8:	mov	r0, #-2147483648	; 0x80000000
   16fcc:	bl	17868 <__assert_fail@plt+0x6a44>
   16fd0:	cmp	r0, #1
   16fd4:	beq	16ee0 <__assert_fail@plt+0x60bc>
   16fd8:	b	16de4 <__assert_fail@plt+0x5fc0>
   16fdc:	cmn	r7, #1
   16fe0:	beq	16e00 <__assert_fail@plt+0x5fdc>
   16fe4:	mov	r1, r7
   16fe8:	mov	r0, #-2147483648	; 0x80000000
   16fec:	bl	17868 <__assert_fail@plt+0x6a44>
   16ff0:	cmp	r0, #512	; 0x200
   16ff4:	blt	16ee0 <__assert_fail@plt+0x60bc>
   16ff8:	b	16e00 <__assert_fail@plt+0x5fdc>
   16ffc:	cmn	r7, #1
   17000:	beq	1702c <__assert_fail@plt+0x6208>
   17004:	mov	r1, r7
   17008:	mov	r0, #-2147483648	; 0x80000000
   1700c:	str	r3, [sp, #12]
   17010:	str	r2, [sp, #8]
   17014:	bl	17868 <__assert_fail@plt+0x6a44>
   17018:	ldr	r3, [sp, #4]
   1701c:	ldr	r2, [sp, #8]
   17020:	cmp	r0, r3
   17024:	ldr	r3, [sp, #12]
   17028:	blt	16ee0 <__assert_fail@plt+0x60bc>
   1702c:	cmp	r3, #0
   17030:	mov	r1, r3
   17034:	mul	r7, sl, r7
   17038:	sub	r3, r3, #1
   1703c:	bne	16cd8 <__assert_fail@plt+0x5eb4>
   17040:	b	16b90 <__assert_fail@plt+0x5d6c>
   17044:	mov	r3, r6
   17048:	ldr	r6, [sp, #12]
   1704c:	cmp	r3, #0
   17050:	mov	r1, r3
   17054:	mul	r7, sl, r7
   17058:	sub	r3, r3, #1
   1705c:	bne	16bf0 <__assert_fail@plt+0x5dcc>
   17060:	b	16b90 <__assert_fail@plt+0x5d6c>
   17064:	cmn	r7, #1
   17068:	beq	1704c <__assert_fail@plt+0x6228>
   1706c:	str	r6, [sp, #12]
   17070:	mov	r6, r3
   17074:	mov	r1, r7
   17078:	mov	r0, #-2147483648	; 0x80000000
   1707c:	str	r2, [sp, #8]
   17080:	bl	17868 <__assert_fail@plt+0x6a44>
   17084:	ldr	r3, [sp, #4]
   17088:	ldr	r2, [sp, #8]
   1708c:	cmp	r0, r3
   17090:	bge	17044 <__assert_fail@plt+0x6220>
   17094:	sub	r6, r6, #1
   17098:	cmn	r6, #1
   1709c:	mov	r7, #-2147483648	; 0x80000000
   170a0:	mov	r9, r2
   170a4:	bne	17074 <__assert_fail@plt+0x6250>
   170a8:	ldr	r6, [sp, #12]
   170ac:	b	16ee0 <__assert_fail@plt+0x60bc>
   170b0:	cmn	r7, #1
   170b4:	beq	170e0 <__assert_fail@plt+0x62bc>
   170b8:	mov	r1, r7
   170bc:	mov	r0, #-2147483648	; 0x80000000
   170c0:	str	r3, [sp, #12]
   170c4:	str	r2, [sp, #8]
   170c8:	bl	17868 <__assert_fail@plt+0x6a44>
   170cc:	ldr	r3, [sp, #4]
   170d0:	ldr	r2, [sp, #8]
   170d4:	cmp	r0, r3
   170d8:	ldr	r3, [sp, #12]
   170dc:	blt	16ee0 <__assert_fail@plt+0x60bc>
   170e0:	cmp	r3, #0
   170e4:	mov	r1, r3
   170e8:	mul	r7, sl, r7
   170ec:	sub	r3, r3, #1
   170f0:	bne	16bb8 <__assert_fail@plt+0x5d94>
   170f4:	b	16b90 <__assert_fail@plt+0x5d6c>
   170f8:	cmn	r7, #1
   170fc:	beq	16e2c <__assert_fail@plt+0x6008>
   17100:	mov	r1, r7
   17104:	mov	r0, #-2147483648	; 0x80000000
   17108:	bl	17868 <__assert_fail@plt+0x6a44>
   1710c:	cmp	r0, sl
   17110:	blt	16ee0 <__assert_fail@plt+0x60bc>
   17114:	b	16e2c <__assert_fail@plt+0x6008>
   17118:	mov	r4, r5
   1711c:	mov	r5, r8
   17120:	mov	r8, r9
   17124:	b	16ee0 <__assert_fail@plt+0x60bc>
   17128:	ldr	r3, [pc, #20]	; 17144 <__assert_fail@plt+0x6320>
   1712c:	mov	r2, #85	; 0x55
   17130:	ldr	r1, [pc, #16]	; 17148 <__assert_fail@plt+0x6324>
   17134:	ldr	r0, [pc, #16]	; 1714c <__assert_fail@plt+0x6328>
   17138:	bl	10e24 <__assert_fail@plt>
   1713c:			; <UNDEFINED> instruction: 0x001fffff
   17140:	mlaeq	r0, fp, r4, ip
   17144:	andeq	r8, r1, r8, lsl r5
   17148:	andeq	r8, r1, r0, lsr #10
   1714c:	andeq	r8, r1, r0, lsr r5
   17150:	cmp	r1, #0
   17154:	cmpne	r0, #0
   17158:	moveq	r1, #1
   1715c:	moveq	r0, r1
   17160:	umull	r2, r3, r0, r1
   17164:	adds	r3, r3, #0
   17168:	movne	r3, #1
   1716c:	cmp	r2, #0
   17170:	blt	17180 <__assert_fail@plt+0x635c>
   17174:	cmp	r3, #0
   17178:	bne	17180 <__assert_fail@plt+0x635c>
   1717c:	b	10be4 <calloc@plt>
   17180:	push	{r4, lr}
   17184:	bl	10d7c <__errno_location@plt>
   17188:	mov	r3, #12
   1718c:	str	r3, [r0]
   17190:	mov	r0, #0
   17194:	pop	{r4, pc}
   17198:	cmp	r0, #0
   1719c:	moveq	r0, #1
   171a0:	cmp	r0, #0
   171a4:	blt	171ac <__assert_fail@plt+0x6388>
   171a8:	b	10d10 <malloc@plt>
   171ac:	push	{r4, lr}
   171b0:	bl	10d7c <__errno_location@plt>
   171b4:	mov	r3, #12
   171b8:	str	r3, [r0]
   171bc:	mov	r0, #0
   171c0:	pop	{r4, pc}
   171c4:	cmp	r0, #0
   171c8:	beq	171ec <__assert_fail@plt+0x63c8>
   171cc:	cmp	r1, #0
   171d0:	push	{lr}		; (str lr, [sp, #-4]!)
   171d4:	sub	sp, sp, #12
   171d8:	beq	171f4 <__assert_fail@plt+0x63d0>
   171dc:	blt	1720c <__assert_fail@plt+0x63e8>
   171e0:	add	sp, sp, #12
   171e4:	pop	{lr}		; (ldr lr, [sp], #4)
   171e8:	b	10c8c <realloc@plt>
   171ec:	mov	r0, r1
   171f0:	b	17198 <__assert_fail@plt+0x6374>
   171f4:	str	r1, [sp, #4]
   171f8:	bl	1739c <__assert_fail@plt+0x6578>
   171fc:	ldr	r3, [sp, #4]
   17200:	mov	r0, r3
   17204:	add	sp, sp, #12
   17208:	pop	{pc}		; (ldr pc, [sp], #4)
   1720c:	bl	10d7c <__errno_location@plt>
   17210:	mov	r2, #12
   17214:	mov	r3, #0
   17218:	str	r2, [r0]
   1721c:	b	17200 <__assert_fail@plt+0x63dc>
   17220:	push	{r4, r5, r6, lr}
   17224:	mov	r4, r0
   17228:	bl	10ce0 <__fpending@plt>
   1722c:	ldr	r5, [r4]
   17230:	and	r5, r5, #32
   17234:	mov	r6, r0
   17238:	mov	r0, r4
   1723c:	bl	1729c <__assert_fail@plt+0x6478>
   17240:	cmp	r5, #0
   17244:	mov	r4, r0
   17248:	bne	17268 <__assert_fail@plt+0x6444>
   1724c:	cmp	r0, #0
   17250:	beq	17260 <__assert_fail@plt+0x643c>
   17254:	cmp	r6, #0
   17258:	beq	17284 <__assert_fail@plt+0x6460>
   1725c:	mvn	r4, #0
   17260:	mov	r0, r4
   17264:	pop	{r4, r5, r6, pc}
   17268:	cmp	r0, #0
   1726c:	bne	1725c <__assert_fail@plt+0x6438>
   17270:	bl	10d7c <__errno_location@plt>
   17274:	str	r4, [r0]
   17278:	mvn	r4, #0
   1727c:	mov	r0, r4
   17280:	pop	{r4, r5, r6, pc}
   17284:	bl	10d7c <__errno_location@plt>
   17288:	ldr	r4, [r0]
   1728c:	subs	r4, r4, #9
   17290:	mvnne	r4, #0
   17294:	mov	r0, r4
   17298:	pop	{r4, r5, r6, pc}
   1729c:	push	{r4, r5, lr}
   172a0:	sub	sp, sp, #12
   172a4:	mov	r4, r0
   172a8:	bl	10dac <fileno@plt>
   172ac:	cmp	r0, #0
   172b0:	mov	r0, r4
   172b4:	blt	17330 <__assert_fail@plt+0x650c>
   172b8:	bl	10d28 <__freading@plt>
   172bc:	cmp	r0, #0
   172c0:	bne	172fc <__assert_fail@plt+0x64d8>
   172c4:	mov	r0, r4
   172c8:	bl	1733c <__assert_fail@plt+0x6518>
   172cc:	cmp	r0, #0
   172d0:	beq	1732c <__assert_fail@plt+0x6508>
   172d4:	bl	10d7c <__errno_location@plt>
   172d8:	mov	r5, r0
   172dc:	mov	r0, r4
   172e0:	ldr	r4, [r5]
   172e4:	bl	10dc4 <fclose@plt>
   172e8:	cmp	r4, #0
   172ec:	mvnne	r0, #0
   172f0:	strne	r4, [r5]
   172f4:	add	sp, sp, #12
   172f8:	pop	{r4, r5, pc}
   172fc:	mov	r0, r4
   17300:	bl	10dac <fileno@plt>
   17304:	mov	r3, #1
   17308:	str	r3, [sp]
   1730c:	mov	r2, #0
   17310:	mov	r3, #0
   17314:	bl	10cc8 <lseek64@plt>
   17318:	mvn	r3, #0
   1731c:	mvn	r2, #0
   17320:	cmp	r1, r3
   17324:	cmpeq	r0, r2
   17328:	bne	172c4 <__assert_fail@plt+0x64a0>
   1732c:	mov	r0, r4
   17330:	add	sp, sp, #12
   17334:	pop	{r4, r5, lr}
   17338:	b	10dc4 <fclose@plt>
   1733c:	push	{r4, lr}
   17340:	subs	r4, r0, #0
   17344:	sub	sp, sp, #8
   17348:	beq	17364 <__assert_fail@plt+0x6540>
   1734c:	bl	10d28 <__freading@plt>
   17350:	cmp	r0, #0
   17354:	beq	17364 <__assert_fail@plt+0x6540>
   17358:	ldr	r3, [r4]
   1735c:	tst	r3, #256	; 0x100
   17360:	bne	17374 <__assert_fail@plt+0x6550>
   17364:	mov	r0, r4
   17368:	add	sp, sp, #8
   1736c:	pop	{r4, lr}
   17370:	b	10c20 <fflush@plt>
   17374:	mov	r3, #1
   17378:	str	r3, [sp]
   1737c:	mov	r2, #0
   17380:	mov	r3, #0
   17384:	mov	r0, r4
   17388:	bl	173f4 <__assert_fail@plt+0x65d0>
   1738c:	mov	r0, r4
   17390:	add	sp, sp, #8
   17394:	pop	{r4, lr}
   17398:	b	10c20 <fflush@plt>
   1739c:	push	{r4, r5, lr}
   173a0:	sub	sp, sp, #12
   173a4:	mov	r5, r0
   173a8:	bl	10d7c <__errno_location@plt>
   173ac:	mov	r2, #0
   173b0:	mov	r4, r0
   173b4:	ldr	r3, [r0]
   173b8:	str	r2, [r4]
   173bc:	mov	r0, r5
   173c0:	str	r3, [sp]
   173c4:	str	r3, [sp, #4]
   173c8:	bl	10c2c <free@plt>
   173cc:	ldr	r3, [r4]
   173d0:	add	r2, sp, #8
   173d4:	cmp	r3, #0
   173d8:	moveq	r3, #4
   173dc:	movne	r3, #0
   173e0:	add	r3, r2, r3
   173e4:	ldr	r3, [r3, #-8]
   173e8:	str	r3, [r4]
   173ec:	add	sp, sp, #12
   173f0:	pop	{r4, r5, pc}
   173f4:	push	{r4, r5, r6, r7, r8, lr}
   173f8:	sub	sp, sp, #8
   173fc:	ldmib	r0, {ip, lr}
   17400:	mov	r4, r0
   17404:	ldr	r5, [sp, #32]
   17408:	cmp	lr, ip
   1740c:	beq	17424 <__assert_fail@plt+0x6600>
   17410:	str	r5, [sp, #32]
   17414:	mov	r0, r4
   17418:	add	sp, sp, #8
   1741c:	pop	{r4, r5, r6, r7, r8, lr}
   17420:	b	10dd0 <fseeko64@plt>
   17424:	ldr	lr, [r0, #20]
   17428:	ldr	ip, [r0, #16]
   1742c:	cmp	lr, ip
   17430:	bne	17410 <__assert_fail@plt+0x65ec>
   17434:	ldr	r8, [r0, #36]	; 0x24
   17438:	cmp	r8, #0
   1743c:	bne	17410 <__assert_fail@plt+0x65ec>
   17440:	mov	r6, r2
   17444:	mov	r7, r3
   17448:	bl	10dac <fileno@plt>
   1744c:	mov	r2, r6
   17450:	mov	r3, r7
   17454:	str	r5, [sp]
   17458:	bl	10cc8 <lseek64@plt>
   1745c:	mvn	r3, #0
   17460:	mvn	r2, #0
   17464:	cmp	r1, r3
   17468:	cmpeq	r0, r2
   1746c:	beq	1748c <__assert_fail@plt+0x6668>
   17470:	ldr	r3, [r4]
   17474:	strd	r0, [r4, #80]	; 0x50
   17478:	mov	r0, r8
   1747c:	bic	r3, r3, #16
   17480:	str	r3, [r4]
   17484:	add	sp, sp, #8
   17488:	pop	{r4, r5, r6, r7, r8, pc}
   1748c:	mvn	r0, #0
   17490:	b	17484 <__assert_fail@plt+0x6660>
   17494:	push	{r4, lr}
   17498:	mov	r0, #14
   1749c:	bl	10df4 <nl_langinfo@plt>
   174a0:	cmp	r0, #0
   174a4:	beq	174bc <__assert_fail@plt+0x6698>
   174a8:	ldrb	r2, [r0]
   174ac:	ldr	r3, [pc, #16]	; 174c4 <__assert_fail@plt+0x66a0>
   174b0:	cmp	r2, #0
   174b4:	moveq	r0, r3
   174b8:	pop	{r4, pc}
   174bc:	ldr	r0, [pc]	; 174c4 <__assert_fail@plt+0x66a0>
   174c0:	pop	{r4, pc}
   174c4:	andeq	r8, r1, r8, asr r5
   174c8:	push	{r4, r5, r6, r7, lr}
   174cc:	subs	r6, r0, #0
   174d0:	sub	sp, sp, #12
   174d4:	addeq	r6, sp, #4
   174d8:	mov	r0, r6
   174dc:	mov	r5, r2
   174e0:	mov	r7, r1
   174e4:	bl	10cec <mbrtowc@plt>
   174e8:	cmp	r5, #0
   174ec:	cmnne	r0, #3
   174f0:	mov	r4, r0
   174f4:	bls	17510 <__assert_fail@plt+0x66ec>
   174f8:	mov	r0, #0
   174fc:	bl	17568 <__assert_fail@plt+0x6744>
   17500:	cmp	r0, #0
   17504:	moveq	r4, #1
   17508:	ldrbeq	r3, [r7]
   1750c:	streq	r3, [r6]
   17510:	mov	r0, r4
   17514:	add	sp, sp, #12
   17518:	pop	{r4, r5, r6, r7, pc}
   1751c:	push	{r4, r5, r6, lr}
   17520:	subs	r4, r2, #0
   17524:	mov	r6, r0
   17528:	mov	r5, r1
   1752c:	beq	17558 <__assert_fail@plt+0x6734>
   17530:	mov	r1, r4
   17534:	mvn	r0, #0
   17538:	bl	1765c <__assert_fail@plt+0x6838>
   1753c:	cmp	r0, r5
   17540:	bcs	17558 <__assert_fail@plt+0x6734>
   17544:	bl	10d7c <__errno_location@plt>
   17548:	mov	r3, #12
   1754c:	str	r3, [r0]
   17550:	mov	r0, #0
   17554:	pop	{r4, r5, r6, pc}
   17558:	mul	r1, r5, r4
   1755c:	mov	r0, r6
   17560:	pop	{r4, r5, r6, lr}
   17564:	b	171c4 <__assert_fail@plt+0x63a0>
   17568:	push	{lr}		; (str lr, [sp, #-4]!)
   1756c:	sub	sp, sp, #268	; 0x10c
   17570:	add	r1, sp, #4
   17574:	ldr	r2, [pc, #60]	; 175b8 <__assert_fail@plt+0x6794>
   17578:	bl	175c4 <__assert_fail@plt+0x67a0>
   1757c:	cmp	r0, #0
   17580:	movne	r0, #0
   17584:	bne	175b0 <__assert_fail@plt+0x678c>
   17588:	ldr	r1, [pc, #44]	; 175bc <__assert_fail@plt+0x6798>
   1758c:	add	r0, sp, #4
   17590:	bl	10c08 <strcmp@plt>
   17594:	cmp	r0, #0
   17598:	beq	175b0 <__assert_fail@plt+0x678c>
   1759c:	add	r0, sp, #4
   175a0:	ldr	r1, [pc, #24]	; 175c0 <__assert_fail@plt+0x679c>
   175a4:	bl	10c08 <strcmp@plt>
   175a8:	adds	r0, r0, #0
   175ac:	movne	r0, #1
   175b0:	add	sp, sp, #268	; 0x10c
   175b4:	pop	{pc}		; (ldr pc, [sp], #4)
   175b8:	andeq	r0, r0, r1, lsl #2
   175bc:	andeq	r8, r1, r0, ror #10
   175c0:	andeq	r8, r1, r4, ror #10
   175c4:	push	{r4, r5, r6, lr}
   175c8:	mov	r5, r1
   175cc:	mov	r1, #0
   175d0:	mov	r4, r2
   175d4:	bl	10ddc <setlocale@plt>
   175d8:	subs	r6, r0, #0
   175dc:	beq	17638 <__assert_fail@plt+0x6814>
   175e0:	bl	10d64 <strlen@plt>
   175e4:	cmp	r4, r0
   175e8:	bhi	17620 <__assert_fail@plt+0x67fc>
   175ec:	cmp	r4, #0
   175f0:	bne	175fc <__assert_fail@plt+0x67d8>
   175f4:	mov	r0, #34	; 0x22
   175f8:	pop	{r4, r5, r6, pc}
   175fc:	sub	r4, r4, #1
   17600:	mov	r1, r6
   17604:	mov	r2, r4
   17608:	mov	r0, r5
   1760c:	bl	10c44 <memcpy@plt>
   17610:	mov	r3, #0
   17614:	strb	r3, [r5, r4]
   17618:	mov	r0, #34	; 0x22
   1761c:	pop	{r4, r5, r6, pc}
   17620:	add	r2, r0, #1
   17624:	mov	r1, r6
   17628:	mov	r0, r5
   1762c:	bl	10c44 <memcpy@plt>
   17630:	mov	r0, #0
   17634:	pop	{r4, r5, r6, pc}
   17638:	cmp	r4, #0
   1763c:	beq	1764c <__assert_fail@plt+0x6828>
   17640:	strb	r6, [r5]
   17644:	mov	r0, #22
   17648:	pop	{r4, r5, r6, pc}
   1764c:	mov	r0, #22
   17650:	pop	{r4, r5, r6, pc}
   17654:	mov	r1, #0
   17658:	b	10ddc <setlocale@plt>
   1765c:	subs	r2, r1, #1
   17660:	bxeq	lr
   17664:	bcc	1783c <__assert_fail@plt+0x6a18>
   17668:	cmp	r0, r1
   1766c:	bls	17820 <__assert_fail@plt+0x69fc>
   17670:	tst	r1, r2
   17674:	beq	1782c <__assert_fail@plt+0x6a08>
   17678:	clz	r3, r0
   1767c:	clz	r2, r1
   17680:	sub	r3, r2, r3
   17684:	rsbs	r3, r3, #31
   17688:	addne	r3, r3, r3, lsl #1
   1768c:	mov	r2, #0
   17690:	addne	pc, pc, r3, lsl #2
   17694:	nop			; (mov r0, r0)
   17698:	cmp	r0, r1, lsl #31
   1769c:	adc	r2, r2, r2
   176a0:	subcs	r0, r0, r1, lsl #31
   176a4:	cmp	r0, r1, lsl #30
   176a8:	adc	r2, r2, r2
   176ac:	subcs	r0, r0, r1, lsl #30
   176b0:	cmp	r0, r1, lsl #29
   176b4:	adc	r2, r2, r2
   176b8:	subcs	r0, r0, r1, lsl #29
   176bc:	cmp	r0, r1, lsl #28
   176c0:	adc	r2, r2, r2
   176c4:	subcs	r0, r0, r1, lsl #28
   176c8:	cmp	r0, r1, lsl #27
   176cc:	adc	r2, r2, r2
   176d0:	subcs	r0, r0, r1, lsl #27
   176d4:	cmp	r0, r1, lsl #26
   176d8:	adc	r2, r2, r2
   176dc:	subcs	r0, r0, r1, lsl #26
   176e0:	cmp	r0, r1, lsl #25
   176e4:	adc	r2, r2, r2
   176e8:	subcs	r0, r0, r1, lsl #25
   176ec:	cmp	r0, r1, lsl #24
   176f0:	adc	r2, r2, r2
   176f4:	subcs	r0, r0, r1, lsl #24
   176f8:	cmp	r0, r1, lsl #23
   176fc:	adc	r2, r2, r2
   17700:	subcs	r0, r0, r1, lsl #23
   17704:	cmp	r0, r1, lsl #22
   17708:	adc	r2, r2, r2
   1770c:	subcs	r0, r0, r1, lsl #22
   17710:	cmp	r0, r1, lsl #21
   17714:	adc	r2, r2, r2
   17718:	subcs	r0, r0, r1, lsl #21
   1771c:	cmp	r0, r1, lsl #20
   17720:	adc	r2, r2, r2
   17724:	subcs	r0, r0, r1, lsl #20
   17728:	cmp	r0, r1, lsl #19
   1772c:	adc	r2, r2, r2
   17730:	subcs	r0, r0, r1, lsl #19
   17734:	cmp	r0, r1, lsl #18
   17738:	adc	r2, r2, r2
   1773c:	subcs	r0, r0, r1, lsl #18
   17740:	cmp	r0, r1, lsl #17
   17744:	adc	r2, r2, r2
   17748:	subcs	r0, r0, r1, lsl #17
   1774c:	cmp	r0, r1, lsl #16
   17750:	adc	r2, r2, r2
   17754:	subcs	r0, r0, r1, lsl #16
   17758:	cmp	r0, r1, lsl #15
   1775c:	adc	r2, r2, r2
   17760:	subcs	r0, r0, r1, lsl #15
   17764:	cmp	r0, r1, lsl #14
   17768:	adc	r2, r2, r2
   1776c:	subcs	r0, r0, r1, lsl #14
   17770:	cmp	r0, r1, lsl #13
   17774:	adc	r2, r2, r2
   17778:	subcs	r0, r0, r1, lsl #13
   1777c:	cmp	r0, r1, lsl #12
   17780:	adc	r2, r2, r2
   17784:	subcs	r0, r0, r1, lsl #12
   17788:	cmp	r0, r1, lsl #11
   1778c:	adc	r2, r2, r2
   17790:	subcs	r0, r0, r1, lsl #11
   17794:	cmp	r0, r1, lsl #10
   17798:	adc	r2, r2, r2
   1779c:	subcs	r0, r0, r1, lsl #10
   177a0:	cmp	r0, r1, lsl #9
   177a4:	adc	r2, r2, r2
   177a8:	subcs	r0, r0, r1, lsl #9
   177ac:	cmp	r0, r1, lsl #8
   177b0:	adc	r2, r2, r2
   177b4:	subcs	r0, r0, r1, lsl #8
   177b8:	cmp	r0, r1, lsl #7
   177bc:	adc	r2, r2, r2
   177c0:	subcs	r0, r0, r1, lsl #7
   177c4:	cmp	r0, r1, lsl #6
   177c8:	adc	r2, r2, r2
   177cc:	subcs	r0, r0, r1, lsl #6
   177d0:	cmp	r0, r1, lsl #5
   177d4:	adc	r2, r2, r2
   177d8:	subcs	r0, r0, r1, lsl #5
   177dc:	cmp	r0, r1, lsl #4
   177e0:	adc	r2, r2, r2
   177e4:	subcs	r0, r0, r1, lsl #4
   177e8:	cmp	r0, r1, lsl #3
   177ec:	adc	r2, r2, r2
   177f0:	subcs	r0, r0, r1, lsl #3
   177f4:	cmp	r0, r1, lsl #2
   177f8:	adc	r2, r2, r2
   177fc:	subcs	r0, r0, r1, lsl #2
   17800:	cmp	r0, r1, lsl #1
   17804:	adc	r2, r2, r2
   17808:	subcs	r0, r0, r1, lsl #1
   1780c:	cmp	r0, r1
   17810:	adc	r2, r2, r2
   17814:	subcs	r0, r0, r1
   17818:	mov	r0, r2
   1781c:	bx	lr
   17820:	moveq	r0, #1
   17824:	movne	r0, #0
   17828:	bx	lr
   1782c:	clz	r2, r1
   17830:	rsb	r2, r2, #31
   17834:	lsr	r0, r0, r2
   17838:	bx	lr
   1783c:	cmp	r0, #0
   17840:	mvnne	r0, #0
   17844:	b	17aa8 <__assert_fail@plt+0x6c84>
   17848:	cmp	r1, #0
   1784c:	beq	1783c <__assert_fail@plt+0x6a18>
   17850:	push	{r0, r1, lr}
   17854:	bl	1765c <__assert_fail@plt+0x6838>
   17858:	pop	{r1, r2, lr}
   1785c:	mul	r3, r2, r0
   17860:	sub	r1, r1, r3
   17864:	bx	lr
   17868:	cmp	r1, #0
   1786c:	beq	17a78 <__assert_fail@plt+0x6c54>
   17870:	eor	ip, r0, r1
   17874:	rsbmi	r1, r1, #0
   17878:	subs	r2, r1, #1
   1787c:	beq	17a44 <__assert_fail@plt+0x6c20>
   17880:	movs	r3, r0
   17884:	rsbmi	r3, r0, #0
   17888:	cmp	r3, r1
   1788c:	bls	17a50 <__assert_fail@plt+0x6c2c>
   17890:	tst	r1, r2
   17894:	beq	17a60 <__assert_fail@plt+0x6c3c>
   17898:	clz	r2, r3
   1789c:	clz	r0, r1
   178a0:	sub	r2, r0, r2
   178a4:	rsbs	r2, r2, #31
   178a8:	addne	r2, r2, r2, lsl #1
   178ac:	mov	r0, #0
   178b0:	addne	pc, pc, r2, lsl #2
   178b4:	nop			; (mov r0, r0)
   178b8:	cmp	r3, r1, lsl #31
   178bc:	adc	r0, r0, r0
   178c0:	subcs	r3, r3, r1, lsl #31
   178c4:	cmp	r3, r1, lsl #30
   178c8:	adc	r0, r0, r0
   178cc:	subcs	r3, r3, r1, lsl #30
   178d0:	cmp	r3, r1, lsl #29
   178d4:	adc	r0, r0, r0
   178d8:	subcs	r3, r3, r1, lsl #29
   178dc:	cmp	r3, r1, lsl #28
   178e0:	adc	r0, r0, r0
   178e4:	subcs	r3, r3, r1, lsl #28
   178e8:	cmp	r3, r1, lsl #27
   178ec:	adc	r0, r0, r0
   178f0:	subcs	r3, r3, r1, lsl #27
   178f4:	cmp	r3, r1, lsl #26
   178f8:	adc	r0, r0, r0
   178fc:	subcs	r3, r3, r1, lsl #26
   17900:	cmp	r3, r1, lsl #25
   17904:	adc	r0, r0, r0
   17908:	subcs	r3, r3, r1, lsl #25
   1790c:	cmp	r3, r1, lsl #24
   17910:	adc	r0, r0, r0
   17914:	subcs	r3, r3, r1, lsl #24
   17918:	cmp	r3, r1, lsl #23
   1791c:	adc	r0, r0, r0
   17920:	subcs	r3, r3, r1, lsl #23
   17924:	cmp	r3, r1, lsl #22
   17928:	adc	r0, r0, r0
   1792c:	subcs	r3, r3, r1, lsl #22
   17930:	cmp	r3, r1, lsl #21
   17934:	adc	r0, r0, r0
   17938:	subcs	r3, r3, r1, lsl #21
   1793c:	cmp	r3, r1, lsl #20
   17940:	adc	r0, r0, r0
   17944:	subcs	r3, r3, r1, lsl #20
   17948:	cmp	r3, r1, lsl #19
   1794c:	adc	r0, r0, r0
   17950:	subcs	r3, r3, r1, lsl #19
   17954:	cmp	r3, r1, lsl #18
   17958:	adc	r0, r0, r0
   1795c:	subcs	r3, r3, r1, lsl #18
   17960:	cmp	r3, r1, lsl #17
   17964:	adc	r0, r0, r0
   17968:	subcs	r3, r3, r1, lsl #17
   1796c:	cmp	r3, r1, lsl #16
   17970:	adc	r0, r0, r0
   17974:	subcs	r3, r3, r1, lsl #16
   17978:	cmp	r3, r1, lsl #15
   1797c:	adc	r0, r0, r0
   17980:	subcs	r3, r3, r1, lsl #15
   17984:	cmp	r3, r1, lsl #14
   17988:	adc	r0, r0, r0
   1798c:	subcs	r3, r3, r1, lsl #14
   17990:	cmp	r3, r1, lsl #13
   17994:	adc	r0, r0, r0
   17998:	subcs	r3, r3, r1, lsl #13
   1799c:	cmp	r3, r1, lsl #12
   179a0:	adc	r0, r0, r0
   179a4:	subcs	r3, r3, r1, lsl #12
   179a8:	cmp	r3, r1, lsl #11
   179ac:	adc	r0, r0, r0
   179b0:	subcs	r3, r3, r1, lsl #11
   179b4:	cmp	r3, r1, lsl #10
   179b8:	adc	r0, r0, r0
   179bc:	subcs	r3, r3, r1, lsl #10
   179c0:	cmp	r3, r1, lsl #9
   179c4:	adc	r0, r0, r0
   179c8:	subcs	r3, r3, r1, lsl #9
   179cc:	cmp	r3, r1, lsl #8
   179d0:	adc	r0, r0, r0
   179d4:	subcs	r3, r3, r1, lsl #8
   179d8:	cmp	r3, r1, lsl #7
   179dc:	adc	r0, r0, r0
   179e0:	subcs	r3, r3, r1, lsl #7
   179e4:	cmp	r3, r1, lsl #6
   179e8:	adc	r0, r0, r0
   179ec:	subcs	r3, r3, r1, lsl #6
   179f0:	cmp	r3, r1, lsl #5
   179f4:	adc	r0, r0, r0
   179f8:	subcs	r3, r3, r1, lsl #5
   179fc:	cmp	r3, r1, lsl #4
   17a00:	adc	r0, r0, r0
   17a04:	subcs	r3, r3, r1, lsl #4
   17a08:	cmp	r3, r1, lsl #3
   17a0c:	adc	r0, r0, r0
   17a10:	subcs	r3, r3, r1, lsl #3
   17a14:	cmp	r3, r1, lsl #2
   17a18:	adc	r0, r0, r0
   17a1c:	subcs	r3, r3, r1, lsl #2
   17a20:	cmp	r3, r1, lsl #1
   17a24:	adc	r0, r0, r0
   17a28:	subcs	r3, r3, r1, lsl #1
   17a2c:	cmp	r3, r1
   17a30:	adc	r0, r0, r0
   17a34:	subcs	r3, r3, r1
   17a38:	cmp	ip, #0
   17a3c:	rsbmi	r0, r0, #0
   17a40:	bx	lr
   17a44:	teq	ip, r0
   17a48:	rsbmi	r0, r0, #0
   17a4c:	bx	lr
   17a50:	movcc	r0, #0
   17a54:	asreq	r0, ip, #31
   17a58:	orreq	r0, r0, #1
   17a5c:	bx	lr
   17a60:	clz	r2, r1
   17a64:	rsb	r2, r2, #31
   17a68:	cmp	ip, #0
   17a6c:	lsr	r0, r3, r2
   17a70:	rsbmi	r0, r0, #0
   17a74:	bx	lr
   17a78:	cmp	r0, #0
   17a7c:	mvngt	r0, #-2147483648	; 0x80000000
   17a80:	movlt	r0, #-2147483648	; 0x80000000
   17a84:	b	17aa8 <__assert_fail@plt+0x6c84>
   17a88:	cmp	r1, #0
   17a8c:	beq	17a78 <__assert_fail@plt+0x6c54>
   17a90:	push	{r0, r1, lr}
   17a94:	bl	17870 <__assert_fail@plt+0x6a4c>
   17a98:	pop	{r1, r2, lr}
   17a9c:	mul	r3, r2, r0
   17aa0:	sub	r1, r1, r3
   17aa4:	bx	lr
   17aa8:	push	{r1, lr}
   17aac:	mov	r0, #8
   17ab0:	bl	10bfc <raise@plt>
   17ab4:	pop	{r1, pc}
   17ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17abc:	mov	r7, r0
   17ac0:	ldr	r6, [pc, #72]	; 17b10 <__assert_fail@plt+0x6cec>
   17ac4:	ldr	r5, [pc, #72]	; 17b14 <__assert_fail@plt+0x6cf0>
   17ac8:	add	r6, pc, r6
   17acc:	add	r5, pc, r5
   17ad0:	sub	r6, r6, r5
   17ad4:	mov	r8, r1
   17ad8:	mov	r9, r2
   17adc:	bl	10bc4 <calloc@plt-0x20>
   17ae0:	asrs	r6, r6, #2
   17ae4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ae8:	mov	r4, #0
   17aec:	add	r4, r4, #1
   17af0:	ldr	r3, [r5], #4
   17af4:	mov	r2, r9
   17af8:	mov	r1, r8
   17afc:	mov	r0, r7
   17b00:	blx	r3
   17b04:	cmp	r6, r4
   17b08:	bne	17aec <__assert_fail@plt+0x6cc8>
   17b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b10:	andeq	r1, r1, r0, asr #8
   17b14:	andeq	r1, r1, r8, lsr r4
   17b18:	bx	lr
   17b1c:	ldr	r3, [pc, #12]	; 17b30 <__assert_fail@plt+0x6d0c>
   17b20:	mov	r1, #0
   17b24:	add	r3, pc, r3
   17b28:	ldr	r2, [r3]
   17b2c:	b	10d88 <__cxa_atexit@plt>
   17b30:	andeq	r1, r1, ip, lsr #11

Disassembly of section .fini:

00017b34 <.fini>:
   17b34:	push	{r3, lr}
   17b38:	pop	{r3, pc}
