
../repos/Snaipe-Mimick-1dc4659/sample/strdup/libstrdup.so:     file format elf32-littlearm


Disassembly of section .init:

00000374 <.init>:
 374:	push	{r3, lr}
 378:	bl	3d0 <strlen@plt+0xc>
 37c:	pop	{r3, pc}

Disassembly of section .plt:

00000380 <__cxa_finalize@plt-0x14>:
 380:	push	{lr}		; (str lr, [sp, #-4]!)
 384:	ldr	lr, [pc, #4]	; 390 <__cxa_finalize@plt-0x4>
 388:	add	lr, pc, lr
 38c:	ldr	pc, [lr, #8]!
 390:	andeq	r0, r1, r0, ror ip

00000394 <__cxa_finalize@plt>:
 394:	add	ip, pc, #0, 12
 398:	add	ip, ip, #16, 20	; 0x10000
 39c:	ldr	pc, [ip, #3184]!	; 0xc70

000003a0 <memcpy@plt>:
 3a0:	add	ip, pc, #0, 12
 3a4:	add	ip, ip, #16, 20	; 0x10000
 3a8:	ldr	pc, [ip, #3176]!	; 0xc68

000003ac <malloc@plt>:
 3ac:	add	ip, pc, #0, 12
 3b0:	add	ip, ip, #16, 20	; 0x10000
 3b4:	ldr	pc, [ip, #3168]!	; 0xc60

000003b8 <__gmon_start__@plt>:
 3b8:	add	ip, pc, #0, 12
 3bc:	add	ip, ip, #16, 20	; 0x10000
 3c0:	ldr	pc, [ip, #3160]!	; 0xc58

000003c4 <strlen@plt>:
 3c4:	add	ip, pc, #0, 12
 3c8:	add	ip, ip, #16, 20	; 0x10000
 3cc:	ldr	pc, [ip, #3152]!	; 0xc50

Disassembly of section .text:

000003d0 <my_strdup@@Base-0x124>:
 3d0:	ldr	r3, [pc, #20]	; 3ec <strlen@plt+0x28>
 3d4:	ldr	r2, [pc, #20]	; 3f0 <strlen@plt+0x2c>
 3d8:	add	r3, pc, r3
 3dc:	ldr	r2, [r3, r2]
 3e0:	cmp	r2, #0
 3e4:	bxeq	lr
 3e8:	b	3b8 <__gmon_start__@plt>
 3ec:	andeq	r0, r1, r0, lsr #24
 3f0:	andeq	r0, r0, r8, lsr #32
 3f4:	ldr	r0, [pc, #44]	; 428 <strlen@plt+0x64>
 3f8:	ldr	r3, [pc, #44]	; 42c <strlen@plt+0x68>
 3fc:	add	r0, pc, r0
 400:	add	r3, pc, r3
 404:	cmp	r3, r0
 408:	ldr	r3, [pc, #32]	; 430 <strlen@plt+0x6c>
 40c:	add	r3, pc, r3
 410:	bxeq	lr
 414:	ldr	r2, [pc, #24]	; 434 <strlen@plt+0x70>
 418:	ldr	r3, [r3, r2]
 41c:	cmp	r3, #0
 420:	bxeq	lr
 424:	bx	r3
 428:	andeq	r0, r1, r0, lsr ip
 42c:	andeq	r0, r1, ip, lsr #24
 430:	andeq	r0, r1, ip, ror #23
 434:	andeq	r0, r0, r4, lsr #32
 438:	ldr	r0, [pc, #56]	; 478 <strlen@plt+0xb4>
 43c:	ldr	r3, [pc, #56]	; 47c <strlen@plt+0xb8>
 440:	add	r0, pc, r0
 444:	add	r3, pc, r3
 448:	sub	r1, r3, r0
 44c:	ldr	r3, [pc, #44]	; 480 <strlen@plt+0xbc>
 450:	asr	r1, r1, #2
 454:	add	r3, pc, r3
 458:	add	r1, r1, r1, lsr #31
 45c:	asrs	r1, r1, #1
 460:	bxeq	lr
 464:	ldr	r2, [pc, #24]	; 484 <strlen@plt+0xc0>
 468:	ldr	r3, [r3, r2]
 46c:	cmp	r3, #0
 470:	bxeq	lr
 474:	bx	r3
 478:	andeq	r0, r1, ip, ror #23
 47c:	andeq	r0, r1, r8, ror #23
 480:	andeq	r0, r1, r4, lsr #23
 484:	andeq	r0, r0, ip, lsr #32
 488:	ldr	r3, [pc, #76]	; 4dc <strlen@plt+0x118>
 48c:	ldr	r2, [pc, #76]	; 4e0 <strlen@plt+0x11c>
 490:	add	r3, pc, r3
 494:	add	r2, pc, r2
 498:	ldrb	r3, [r3]
 49c:	cmp	r3, #0
 4a0:	bxne	lr
 4a4:	ldr	r3, [pc, #56]	; 4e4 <strlen@plt+0x120>
 4a8:	push	{r4, lr}
 4ac:	ldr	r3, [r2, r3]
 4b0:	cmp	r3, #0
 4b4:	beq	4c4 <strlen@plt+0x100>
 4b8:	ldr	r3, [pc, #40]	; 4e8 <strlen@plt+0x124>
 4bc:	ldr	r0, [pc, r3]
 4c0:	bl	394 <__cxa_finalize@plt>
 4c4:	bl	3f4 <strlen@plt+0x30>
 4c8:	ldr	r3, [pc, #28]	; 4ec <strlen@plt+0x128>
 4cc:	mov	r2, #1
 4d0:	add	r3, pc, r3
 4d4:	strb	r2, [r3]
 4d8:	pop	{r4, pc}
 4dc:	muleq	r1, ip, fp
 4e0:	andeq	r0, r1, r4, ror #22
 4e4:	andeq	r0, r0, r0, lsr #32
 4e8:	andeq	r0, r1, ip, ror #22
 4ec:	andeq	r0, r1, ip, asr fp
 4f0:	b	438 <strlen@plt+0x74>

000004f4 <my_strdup@@Base>:
 4f4:	push	{fp, lr}
 4f8:	mov	fp, sp
 4fc:	sub	sp, sp, #16
 500:	str	r0, [sp, #8]
 504:	ldr	r0, [sp, #8]
 508:	bl	3c4 <strlen@plt>
 50c:	str	r0, [sp, #4]
 510:	ldr	r0, [sp, #4]
 514:	add	r0, r0, #1
 518:	bl	3ac <malloc@plt>
 51c:	str	r0, [sp]
 520:	ldr	r0, [sp]
 524:	movw	r1, #0
 528:	cmp	r0, r1
 52c:	bne	53c <my_strdup@@Base+0x48>
 530:	movw	r0, #0
 534:	str	r0, [fp, #-4]
 538:	b	558 <my_strdup@@Base+0x64>
 53c:	ldr	r0, [sp]
 540:	ldr	r1, [sp, #8]
 544:	ldr	r2, [sp, #4]
 548:	add	r2, r2, #1
 54c:	bl	3a0 <memcpy@plt>
 550:	ldr	r0, [sp]
 554:	str	r0, [fp, #-4]
 558:	ldr	r0, [fp, #-4]
 55c:	mov	sp, fp
 560:	pop	{fp, pc}

Disassembly of section .fini:

00000564 <.fini>:
 564:	push	{r3, lr}
 568:	pop	{r3, pc}
