
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004318 <_init>:
    4318:	push	{r3, lr}
    431c:	bl	4cf8 <call_weak_fn>
    4320:	pop	{r3, pc}

Disassembly of section .plt:

00004324 <.plt>:
    4324:	push	{lr}		; (str lr, [sp, #-4]!)
    4328:	ldr	lr, [pc, #4]	; 4334 <.plt+0x10>
    432c:	add	lr, pc, lr
    4330:	ldr	pc, [lr, #8]!
    4334:	.word	0x00024ccc

00004338 <rb_helper_run@plt>:
    4338:	add	ip, pc, #0, 12
    433c:	add	ip, ip, #36, 20	; 0x24000
    4340:	ldr	pc, [ip, #3276]!	; 0xccc

00004344 <TLS_method@plt>:
    4344:	add	ip, pc, #0, 12
    4348:	add	ip, ip, #36, 20	; 0x24000
    434c:	ldr	pc, [ip, #3268]!	; 0xcc4

00004350 <open@plt>:
    4350:	add	ip, pc, #0, 12
    4354:	add	ip, ip, #36, 20	; 0x24000
    4358:	ldr	pc, [ip, #3260]!	; 0xcbc

0000435c <rb_init_netio@plt>:
    435c:	add	ip, pc, #0, 12
    4360:	add	ip, ip, #36, 20	; 0x24000
    4364:	ldr	pc, [ip, #3252]!	; 0xcb4

00004368 <sigemptyset@plt>:
    4368:	add	ip, pc, #0, 12
    436c:	add	ip, ip, #36, 20	; 0x24000
    4370:	ldr	pc, [ip, #3244]!	; 0xcac

00004374 <strerror@plt>:
    4374:	add	ip, pc, #0, 12
    4378:	add	ip, ip, #36, 20	; 0x24000
    437c:	ldr	pc, [ip, #3236]!	; 0xca4

00004380 <rb_radixtree_elem_delete@plt>:
    4380:	add	ip, pc, #0, 12
    4384:	add	ip, ip, #36, 20	; 0x24000
    4388:	ldr	pc, [ip, #3228]!	; 0xc9c

0000438c <getdtablesize@plt>:
    438c:	add	ip, pc, #0, 12
    4390:	add	ip, ip, #36, 20	; 0x24000
    4394:	ldr	pc, [ip, #3220]!	; 0xc94

00004398 <abort@plt>:
    4398:	add	ip, pc, #0, 12
    439c:	add	ip, ip, #36, 20	; 0x24000
    43a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000043a4 <connect@plt>:
    43a4:	add	ip, pc, #0, 12
    43a8:	add	ip, ip, #36, 20	; 0x24000
    43ac:	ldr	pc, [ip, #3204]!	; 0xc84

000043b0 <rb_ignore_errno@plt>:
    43b0:	add	ip, pc, #0, 12
    43b4:	add	ip, ip, #36, 20	; 0x24000
    43b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000043bc <rb_settimeout@plt>:
    43bc:	add	ip, pc, #0, 12
    43c0:	add	ip, ip, #36, 20	; 0x24000
    43c4:	ldr	pc, [ip, #3188]!	; 0xc74

000043c8 <SSL_CTX_set_cipher_list@plt>:
    43c8:	add	ip, pc, #0, 12
    43cc:	add	ip, ip, #36, 20	; 0x24000
    43d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000043d4 <ERR_get_error@plt>:
    43d4:	add	ip, pc, #0, 12
    43d8:	add	ip, ip, #36, 20	; 0x24000
    43dc:	ldr	pc, [ip, #3172]!	; 0xc64

000043e0 <rb_radixtree_foreach_start@plt>:
    43e0:	add	ip, pc, #0, 12
    43e4:	add	ip, ip, #36, 20	; 0x24000
    43e8:	ldr	pc, [ip, #3164]!	; 0xc5c

000043ec <strcasestr@plt>:
    43ec:	add	ip, pc, #0, 12
    43f0:	add	ip, ip, #36, 20	; 0x24000
    43f4:	ldr	pc, [ip, #3156]!	; 0xc54

000043f8 <rb_connect_tcp@plt>:
    43f8:	add	ip, pc, #0, 12
    43fc:	add	ip, ip, #36, 20	; 0x24000
    4400:	ldr	pc, [ip, #3148]!	; 0xc4c

00004404 <RAND_load_file@plt>:
    4404:	add	ip, pc, #0, 12
    4408:	add	ip, ip, #36, 20	; 0x24000
    440c:	ldr	pc, [ip, #3140]!	; 0xc44

00004410 <signalfd@plt>:
    4410:	add	ip, pc, #0, 12
    4414:	add	ip, ip, #36, 20	; 0x24000
    4418:	ldr	pc, [ip, #3132]!	; 0xc3c

0000441c <rb_radixtree_foreach_next@plt>:
    441c:	add	ip, pc, #0, 12
    4420:	add	ip, ip, #36, 20	; 0x24000
    4424:	ldr	pc, [ip, #3124]!	; 0xc34

00004428 <memcmp@plt>:
    4428:	add	ip, pc, #0, 12
    442c:	add	ip, ip, #36, 20	; 0x24000
    4430:	ldr	pc, [ip, #3116]!	; 0xc2c

00004434 <SSL_CTX_free@plt>:
    4434:	add	ip, pc, #0, 12
    4438:	add	ip, ip, #36, 20	; 0x24000
    443c:	ldr	pc, [ip, #3108]!	; 0xc24

00004440 <rb_getmaxconnect@plt>:
    4440:	add	ip, pc, #0, 12
    4444:	add	ip, ip, #36, 20	; 0x24000
    4448:	ldr	pc, [ip, #3100]!	; 0xc1c

0000444c <sigwaitinfo@plt>:
    444c:	add	ip, pc, #0, 12
    4450:	add	ip, ip, #36, 20	; 0x24000
    4454:	ldr	pc, [ip, #3092]!	; 0xc14

00004458 <__libc_current_sigrtmin@plt>:
    4458:	add	ip, pc, #0, 12
    445c:	add	ip, ip, #36, 20	; 0x24000
    4460:	ldr	pc, [ip, #3084]!	; 0xc0c

00004464 <__xstat@plt>:
    4464:	add	ip, pc, #0, 12
    4468:	add	ip, ip, #36, 20	; 0x24000
    446c:	ldr	pc, [ip, #3076]!	; 0xc04

00004470 <rb_event_delete@plt>:
    4470:	add	ip, pc, #0, 12
    4474:	add	ip, ip, #36, 20	; 0x24000
    4478:	ldr	pc, [ip, #3068]!	; 0xbfc

0000447c <rb_setselect@plt>:
    447c:	add	ip, pc, #0, 12
    4480:	add	ip, ip, #36, 20	; 0x24000
    4484:	ldr	pc, [ip, #3060]!	; 0xbf4

00004488 <rb_fd_ssl@plt>:
    4488:	add	ip, pc, #0, 12
    448c:	add	ip, ip, #36, 20	; 0x24000
    4490:	ldr	pc, [ip, #3052]!	; 0xbec

00004494 <sigtimedwait@plt>:
    4494:	add	ip, pc, #0, 12
    4498:	add	ip, ip, #36, 20	; 0x24000
    449c:	ldr	pc, [ip, #3044]!	; 0xbe4

000044a0 <rb_setenv@plt>:
    44a0:	add	ip, pc, #0, 12
    44a4:	add	ip, ip, #36, 20	; 0x24000
    44a8:	ldr	pc, [ip, #3036]!	; 0xbdc

000044ac <signal@plt>:
    44ac:	add	ip, pc, #0, 12
    44b0:	add	ip, ip, #36, 20	; 0x24000
    44b4:	ldr	pc, [ip, #3028]!	; 0xbd4

000044b8 <rb_get_fd@plt>:
    44b8:	add	ip, pc, #0, 12
    44bc:	add	ip, ip, #36, 20	; 0x24000
    44c0:	ldr	pc, [ip, #3020]!	; 0xbcc

000044c4 <epoll_create@plt>:
    44c4:	add	ip, pc, #0, 12
    44c8:	add	ip, ip, #36, 20	; 0x24000
    44cc:	ldr	pc, [ip, #3012]!	; 0xbc4

000044d0 <rb_clear_patricia@plt>:
    44d0:	add	ip, pc, #0, 12
    44d4:	add	ip, ip, #36, 20	; 0x24000
    44d8:	ldr	pc, [ip, #3004]!	; 0xbbc

000044dc <__gmon_start__@plt>:
    44dc:	add	ip, pc, #0, 12
    44e0:	add	ip, ip, #36, 20	; 0x24000
    44e4:	ldr	pc, [ip, #2996]!	; 0xbb4

000044e8 <SSL_CTX_clear_options@plt>:
    44e8:	add	ip, pc, #0, 12
    44ec:	add	ip, ip, #36, 20	; 0x24000
    44f0:	ldr	pc, [ip, #2988]!	; 0xbac

000044f4 <SSL_get_current_cipher@plt>:
    44f4:	add	ip, pc, #0, 12
    44f8:	add	ip, ip, #36, 20	; 0x24000
    44fc:	ldr	pc, [ip, #2980]!	; 0xba4

00004500 <timer_create@plt>:
    4500:	add	ip, pc, #0, 12
    4504:	add	ip, ip, #36, 20	; 0x24000
    4508:	ldr	pc, [ip, #2972]!	; 0xb9c

0000450c <X509_get_X509_PUBKEY@plt>:
    450c:	add	ip, pc, #0, 12
    4510:	add	ip, ip, #36, 20	; 0x24000
    4514:	ldr	pc, [ip, #2964]!	; 0xb94

00004518 <rb_select@plt>:
    4518:	add	ip, pc, #0, 12
    451c:	add	ip, ip, #36, 20	; 0x24000
    4520:	ldr	pc, [ip, #2956]!	; 0xb8c

00004524 <rb_patricia_search_best@plt>:
    4524:	add	ip, pc, #0, 12
    4528:	add	ip, ip, #36, 20	; 0x24000
    452c:	ldr	pc, [ip, #2948]!	; 0xb84

00004530 <vsnprintf@plt>:
    4530:	add	ip, pc, #0, 12
    4534:	add	ip, ip, #36, 20	; 0x24000
    4538:	ldr	pc, [ip, #2940]!	; 0xb7c

0000453c <socketpair@plt>:
    453c:	add	ip, pc, #0, 12
    4540:	add	ip, ip, #36, 20	; 0x24000
    4544:	ldr	pc, [ip, #2932]!	; 0xb74

00004548 <strncpy@plt>:
    4548:	add	ip, pc, #0, 12
    454c:	add	ip, ip, #36, 20	; 0x24000
    4550:	ldr	pc, [ip, #2924]!	; 0xb6c

00004554 <fclose@plt>:
    4554:	add	ip, pc, #0, 12
    4558:	add	ip, ip, #36, 20	; 0x24000
    455c:	ldr	pc, [ip, #2916]!	; 0xb64

00004560 <recv@plt>:
    4560:	add	ip, pc, #0, 12
    4564:	add	ip, ip, #36, 20	; 0x24000
    4568:	ldr	pc, [ip, #2908]!	; 0xb5c

0000456c <getenv@plt>:
    456c:	add	ip, pc, #0, 12
    4570:	add	ip, ip, #36, 20	; 0x24000
    4574:	ldr	pc, [ip, #2900]!	; 0xb54

00004578 <ERR_error_string_n@plt>:
    4578:	add	ip, pc, #0, 12
    457c:	add	ip, ip, #36, 20	; 0x24000
    4580:	ldr	pc, [ip, #2892]!	; 0xb4c

00004584 <strchr@plt>:
    4584:	add	ip, pc, #0, 12
    4588:	add	ip, ip, #36, 20	; 0x24000
    458c:	ldr	pc, [ip, #2884]!	; 0xb44

00004590 <rb_gettimeofday@plt>:
    4590:	add	ip, pc, #0, 12
    4594:	add	ip, ip, #36, 20	; 0x24000
    4598:	ldr	pc, [ip, #2876]!	; 0xb3c

0000459c <strcasecmp@plt>:
    459c:	add	ip, pc, #0, 12
    45a0:	add	ip, ip, #36, 20	; 0x24000
    45a4:	ldr	pc, [ip, #2868]!	; 0xb34

000045a8 <rb_helper_restart@plt>:
    45a8:	add	ip, pc, #0, 12
    45ac:	add	ip, ip, #36, 20	; 0x24000
    45b0:	ldr	pc, [ip, #2860]!	; 0xb2c

000045b4 <listen@plt>:
    45b4:	add	ip, pc, #0, 12
    45b8:	add	ip, ip, #36, 20	; 0x24000
    45bc:	ldr	pc, [ip, #2852]!	; 0xb24

000045c0 <calloc@plt>:
    45c0:	add	ip, pc, #0, 12
    45c4:	add	ip, ip, #36, 20	; 0x24000
    45c8:	ldr	pc, [ip, #2844]!	; 0xb1c

000045cc <SSL_write@plt>:
    45cc:	add	ip, pc, #0, 12
    45d0:	add	ip, ip, #36, 20	; 0x24000
    45d4:	ldr	pc, [ip, #2836]!	; 0xb14

000045d8 <rb_event_init@plt>:
    45d8:	add	ip, pc, #0, 12
    45dc:	add	ip, ip, #36, 20	; 0x24000
    45e0:	ldr	pc, [ip, #2828]!	; 0xb0c

000045e4 <stpcpy@plt>:
    45e4:	add	ip, pc, #0, 12
    45e8:	add	ip, ip, #36, 20	; 0x24000
    45ec:	ldr	pc, [ip, #2820]!	; 0xb04

000045f0 <fopen@plt>:
    45f0:	add	ip, pc, #0, 12
    45f4:	add	ip, ip, #36, 20	; 0x24000
    45f8:	ldr	pc, [ip, #2812]!	; 0xafc

000045fc <rb_set_nb@plt>:
    45fc:	add	ip, pc, #0, 12
    4600:	add	ip, ip, #36, 20	; 0x24000
    4604:	ldr	pc, [ip, #2804]!	; 0xaf4

00004608 <memset@plt>:
    4608:	add	ip, pc, #0, 12
    460c:	add	ip, ip, #36, 20	; 0x24000
    4610:	ldr	pc, [ip, #2796]!	; 0xaec

00004614 <rb_inet_pton@plt>:
    4614:	add	ip, pc, #0, 12
    4618:	add	ip, ip, #36, 20	; 0x24000
    461c:	ldr	pc, [ip, #2788]!	; 0xae4

00004620 <rb_radixtree_stats@plt>:
    4620:	add	ip, pc, #0, 12
    4624:	add	ip, ip, #36, 20	; 0x24000
    4628:	ldr	pc, [ip, #2780]!	; 0xadc

0000462c <strrchr@plt>:
    462c:	add	ip, pc, #0, 12
    4630:	add	ip, ip, #36, 20	; 0x24000
    4634:	ldr	pc, [ip, #2772]!	; 0xad4

00004638 <rb_write@plt>:
    4638:	add	ip, pc, #0, 12
    463c:	add	ip, ip, #36, 20	; 0x24000
    4640:	ldr	pc, [ip, #2764]!	; 0xacc

00004644 <SSL_set_fd@plt>:
    4644:	add	ip, pc, #0, 12
    4648:	add	ip, ip, #36, 20	; 0x24000
    464c:	ldr	pc, [ip, #2756]!	; 0xac4

00004650 <SSL_CTX_ctrl@plt>:
    4650:	add	ip, pc, #0, 12
    4654:	add	ip, ip, #36, 20	; 0x24000
    4658:	ldr	pc, [ip, #2748]!	; 0xabc

0000465c <rb_linebuf_parse@plt>:
    465c:	add	ip, pc, #0, 12
    4660:	add	ip, ip, #36, 20	; 0x24000
    4664:	ldr	pc, [ip, #2740]!	; 0xab4

00004668 <writev@plt>:
    4668:	add	ip, pc, #0, 12
    466c:	add	ip, ip, #36, 20	; 0x24000
    4670:	ldr	pc, [ip, #2732]!	; 0xaac

00004674 <rb_fsnprint@plt>:
    4674:	add	ip, pc, #0, 12
    4678:	add	ip, ip, #36, 20	; 0x24000
    467c:	ldr	pc, [ip, #2724]!	; 0xaa4

00004680 <rb_strlcpy@plt>:
    4680:	add	ip, pc, #0, 12
    4684:	add	ip, ip, #36, 20	; 0x24000
    4688:	ldr	pc, [ip, #2716]!	; 0xa9c

0000468c <rb_patricia_search_best2@plt>:
    468c:	add	ip, pc, #0, 12
    4690:	add	ip, ip, #36, 20	; 0x24000
    4694:	ldr	pc, [ip, #2708]!	; 0xa94

00004698 <SSL_CIPHER_get_name@plt>:
    4698:	add	ip, pc, #0, 12
    469c:	add	ip, ip, #36, 20	; 0x24000
    46a0:	ldr	pc, [ip, #2700]!	; 0xa8c

000046a4 <posix_spawnattr_init@plt>:
    46a4:	add	ip, pc, #0, 12
    46a8:	add	ip, ip, #36, 20	; 0x24000
    46ac:	ldr	pc, [ip, #2692]!	; 0xa84

000046b0 <OpenSSL_version_num@plt>:
    46b0:	add	ip, pc, #0, 12
    46b4:	add	ip, ip, #36, 20	; 0x24000
    46b8:	ldr	pc, [ip, #2684]!	; 0xa7c

000046bc <rb_dictionary_foreach_next@plt>:
    46bc:	add	ip, pc, #0, 12
    46c0:	add	ip, ip, #36, 20	; 0x24000
    46c4:	ldr	pc, [ip, #2676]!	; 0xa74

000046c8 <rb_kill@plt>:
    46c8:	add	ip, pc, #0, 12
    46cc:	add	ip, ip, #36, 20	; 0x24000
    46d0:	ldr	pc, [ip, #2668]!	; 0xa6c

000046d4 <free@plt>:
    46d4:	add	ip, pc, #0, 12
    46d8:	add	ip, ip, #36, 20	; 0x24000
    46dc:	ldr	pc, [ip, #2660]!	; 0xa64

000046e0 <sendmsg@plt>:
    46e0:	add	ip, pc, #0, 12
    46e4:	add	ip, ip, #36, 20	; 0x24000
    46e8:	ldr	pc, [ip, #2652]!	; 0xa5c

000046ec <read@plt>:
    46ec:	add	ip, pc, #0, 12
    46f0:	add	ip, ip, #36, 20	; 0x24000
    46f4:	ldr	pc, [ip, #2644]!	; 0xa54

000046f8 <rb_radixtree_elem_add@plt>:
    46f8:	add	ip, pc, #0, 12
    46fc:	add	ip, ip, #36, 20	; 0x24000
    4700:	ldr	pc, [ip, #2636]!	; 0xa4c

00004704 <write@plt>:
    4704:	add	ip, pc, #0, 12
    4708:	add	ip, ip, #36, 20	; 0x24000
    470c:	ldr	pc, [ip, #2628]!	; 0xa44

00004710 <SSL_new@plt>:
    4710:	add	ip, pc, #0, 12
    4714:	add	ip, ip, #36, 20	; 0x24000
    4718:	ldr	pc, [ip, #2620]!	; 0xa3c

0000471c <access@plt>:
    471c:	add	ip, pc, #0, 12
    4720:	add	ip, ip, #36, 20	; 0x24000
    4724:	ldr	pc, [ip, #2612]!	; 0xa34

00004728 <rb_lib_loop@plt>:
    4728:	add	ip, pc, #0, 12
    472c:	add	ip, ip, #36, 20	; 0x24000
    4730:	ldr	pc, [ip, #2604]!	; 0xa2c

00004734 <timer_settime@plt>:
    4734:	add	ip, pc, #0, 12
    4738:	add	ip, ip, #36, 20	; 0x24000
    473c:	ldr	pc, [ip, #2596]!	; 0xa24

00004740 <gettimeofday@plt>:
    4740:	add	ip, pc, #0, 12
    4744:	add	ip, ip, #36, 20	; 0x24000
    4748:	ldr	pc, [ip, #2588]!	; 0xa1c

0000474c <accept@plt>:
    474c:	add	ip, pc, #0, 12
    4750:	add	ip, ip, #36, 20	; 0x24000
    4754:	ldr	pc, [ip, #2580]!	; 0xa14

00004758 <SSL_read@plt>:
    4758:	add	ip, pc, #0, 12
    475c:	add	ip, ip, #36, 20	; 0x24000
    4760:	ldr	pc, [ip, #2572]!	; 0xa0c

00004764 <rb_read@plt>:
    4764:	add	ip, pc, #0, 12
    4768:	add	ip, ip, #36, 20	; 0x24000
    476c:	ldr	pc, [ip, #2564]!	; 0xa04

00004770 <socket@plt>:
    4770:	add	ip, pc, #0, 12
    4774:	add	ip, ip, #36, 20	; 0x24000
    4778:	ldr	pc, [ip, #2556]!	; 0x9fc

0000477c <rb_linebuf_get@plt>:
    477c:	add	ip, pc, #0, 12
    4780:	add	ip, ip, #36, 20	; 0x24000
    4784:	ldr	pc, [ip, #2548]!	; 0x9f4

00004788 <rb_radixtree_foreach_cur@plt>:
    4788:	add	ip, pc, #0, 12
    478c:	add	ip, ip, #36, 20	; 0x24000
    4790:	ldr	pc, [ip, #2540]!	; 0x9ec

00004794 <epoll_wait@plt>:
    4794:	add	ip, pc, #0, 12
    4798:	add	ip, ip, #36, 20	; 0x24000
    479c:	ldr	pc, [ip, #2532]!	; 0x9e4

000047a0 <SSL_do_handshake@plt>:
    47a0:	add	ip, pc, #0, 12
    47a4:	add	ip, ip, #36, 20	; 0x24000
    47a8:	ldr	pc, [ip, #2524]!	; 0x9dc

000047ac <rb_linebuf_flush@plt>:
    47ac:	add	ip, pc, #0, 12
    47b0:	add	ip, ip, #36, 20	; 0x24000
    47b4:	ldr	pc, [ip, #2516]!	; 0x9d4

000047b8 <posix_spawn@plt>:
    47b8:	add	ip, pc, #0, 12
    47bc:	add	ip, ip, #36, 20	; 0x24000
    47c0:	ldr	pc, [ip, #2508]!	; 0x9cc

000047c4 <strlen@plt>:
    47c4:	add	ip, pc, #0, 12
    47c8:	add	ip, ip, #36, 20	; 0x24000
    47cc:	ldr	pc, [ip, #2500]!	; 0x9c4

000047d0 <rb_current_time@plt>:
    47d0:	add	ip, pc, #0, 12
    47d4:	add	ip, ip, #36, 20	; 0x24000
    47d8:	ldr	pc, [ip, #2492]!	; 0x9bc

000047dc <strtoul@plt>:
    47dc:	add	ip, pc, #0, 12
    47e0:	add	ip, ip, #36, 20	; 0x24000
    47e4:	ldr	pc, [ip, #2484]!	; 0x9b4

000047e8 <memcpy@plt>:
    47e8:	add	ip, pc, #0, 12
    47ec:	add	ip, ip, #36, 20	; 0x24000
    47f0:	ldr	pc, [ip, #2476]!	; 0x9ac

000047f4 <PEM_read_X509@plt>:
    47f4:	add	ip, pc, #0, 12
    47f8:	add	ip, ip, #36, 20	; 0x24000
    47fc:	ldr	pc, [ip, #2468]!	; 0x9a4

00004800 <posix_spawnattr_setflags@plt>:
    4800:	add	ip, pc, #0, 12
    4804:	add	ip, ip, #36, 20	; 0x24000
    4808:	ldr	pc, [ip, #2460]!	; 0x99c

0000480c <__ctype_tolower_loc@plt>:
    480c:	add	ip, pc, #0, 12
    4810:	add	ip, ip, #36, 20	; 0x24000
    4814:	ldr	pc, [ip, #2452]!	; 0x994

00004818 <SSL_CTX_use_certificate_chain_file@plt>:
    4818:	add	ip, pc, #0, 12
    481c:	add	ip, ip, #36, 20	; 0x24000
    4820:	ldr	pc, [ip, #2444]!	; 0x98c

00004824 <rb_free_rb_dlink_node@plt>:
    4824:	add	ip, pc, #0, 12
    4828:	add	ip, ip, #36, 20	; 0x24000
    482c:	ldr	pc, [ip, #2436]!	; 0x984

00004830 <SSL_CTX_set_options@plt>:
    4830:	add	ip, pc, #0, 12
    4834:	add	ip, ip, #36, 20	; 0x24000
    4838:	ldr	pc, [ip, #2428]!	; 0x97c

0000483c <posix_spawnattr_destroy@plt>:
    483c:	add	ip, pc, #0, 12
    4840:	add	ip, ip, #36, 20	; 0x24000
    4844:	ldr	pc, [ip, #2420]!	; 0x974

00004848 <rb_close@plt>:
    4848:	add	ip, pc, #0, 12
    484c:	add	ip, ip, #36, 20	; 0x24000
    4850:	ldr	pc, [ip, #2412]!	; 0x96c

00004854 <strtol@plt>:
    4854:	add	ip, pc, #0, 12
    4858:	add	ip, ip, #36, 20	; 0x24000
    485c:	ldr	pc, [ip, #2404]!	; 0x964

00004860 <sigaddset@plt>:
    4860:	add	ip, pc, #0, 12
    4864:	add	ip, ip, #36, 20	; 0x24000
    4868:	ldr	pc, [ip, #2396]!	; 0x95c

0000486c <strcpy@plt>:
    486c:	add	ip, pc, #0, 12
    4870:	add	ip, ip, #36, 20	; 0x24000
    4874:	ldr	pc, [ip, #2388]!	; 0x954

00004878 <waitpid@plt>:
    4878:	add	ip, pc, #0, 12
    487c:	add	ip, ip, #36, 20	; 0x24000
    4880:	ldr	pc, [ip, #2380]!	; 0x94c

00004884 <rb_run_one_event@plt>:
    4884:	add	ip, pc, #0, 12
    4888:	add	ip, ip, #36, 20	; 0x24000
    488c:	ldr	pc, [ip, #2372]!	; 0x944

00004890 <rb_patricia_search_exact@plt>:
    4890:	add	ip, pc, #0, 12
    4894:	add	ip, ip, #36, 20	; 0x24000
    4898:	ldr	pc, [ip, #2364]!	; 0x93c

0000489c <strncat@plt>:
    489c:	add	ip, pc, #0, 12
    48a0:	add	ip, ip, #36, 20	; 0x24000
    48a4:	ldr	pc, [ip, #2356]!	; 0x934

000048a8 <rb_bh_free@plt>:
    48a8:	add	ip, pc, #0, 12
    48ac:	add	ip, ip, #36, 20	; 0x24000
    48b0:	ldr	pc, [ip, #2348]!	; 0x92c

000048b4 <rb_init_rb_dlink_nodes@plt>:
    48b4:	add	ip, pc, #0, 12
    48b8:	add	ip, ip, #36, 20	; 0x24000
    48bc:	ldr	pc, [ip, #2340]!	; 0x924

000048c0 <EVP_sha1@plt>:
    48c0:	add	ip, pc, #0, 12
    48c4:	add	ip, ip, #36, 20	; 0x24000
    48c8:	ldr	pc, [ip, #2332]!	; 0x91c

000048cc <rb_patricia_lookup@plt>:
    48cc:	add	ip, pc, #0, 12
    48d0:	add	ip, ip, #36, 20	; 0x24000
    48d4:	ldr	pc, [ip, #2324]!	; 0x914

000048d8 <shutdown@plt>:
    48d8:	add	ip, pc, #0, 12
    48dc:	add	ip, ip, #36, 20	; 0x24000
    48e0:	ldr	pc, [ip, #2316]!	; 0x90c

000048e4 <bind@plt>:
    48e4:	add	ip, pc, #0, 12
    48e8:	add	ip, ip, #36, 20	; 0x24000
    48ec:	ldr	pc, [ip, #2308]!	; 0x904

000048f0 <rb_lib_log@plt>:
    48f0:	add	ip, pc, #0, 12
    48f4:	add	ip, ip, #36, 20	; 0x24000
    48f8:	ldr	pc, [ip, #2300]!	; 0x8fc

000048fc <SSL_CTX_use_PrivateKey_file@plt>:
    48fc:	add	ip, pc, #0, 12
    4900:	add	ip, ip, #36, 20	; 0x24000
    4904:	ldr	pc, [ip, #2292]!	; 0x8f4

00004908 <select@plt>:
    4908:	add	ip, pc, #0, 12
    490c:	add	ip, ip, #36, 20	; 0x24000
    4910:	ldr	pc, [ip, #2284]!	; 0x8ec

00004914 <close@plt>:
    4914:	add	ip, pc, #0, 12
    4918:	add	ip, ip, #36, 20	; 0x24000
    491c:	ldr	pc, [ip, #2276]!	; 0x8e4

00004920 <rb_inet_ntop@plt>:
    4920:	add	ip, pc, #0, 12
    4924:	add	ip, ip, #36, 20	; 0x24000
    4928:	ldr	pc, [ip, #2268]!	; 0x8dc

0000492c <rb_bh_alloc@plt>:
    492c:	add	ip, pc, #0, 12
    4930:	add	ip, ip, #36, 20	; 0x24000
    4934:	ldr	pc, [ip, #2260]!	; 0x8d4

00004938 <SSL_free@plt>:
    4938:	add	ip, pc, #0, 12
    493c:	add	ip, ip, #36, 20	; 0x24000
    4940:	ldr	pc, [ip, #2252]!	; 0x8cc

00004944 <rb_pipe@plt>:
    4944:	add	ip, pc, #0, 12
    4948:	add	ip, ip, #36, 20	; 0x24000
    494c:	ldr	pc, [ip, #2244]!	; 0x8c4

00004950 <strncasecmp@plt>:
    4950:	add	ip, pc, #0, 12
    4954:	add	ip, ip, #36, 20	; 0x24000
    4958:	ldr	pc, [ip, #2236]!	; 0x8bc

0000495c <rb_outofmemory@plt>:
    495c:	add	ip, pc, #0, 12
    4960:	add	ip, ip, #36, 20	; 0x24000
    4964:	ldr	pc, [ip, #2228]!	; 0x8b4

00004968 <rb_set_time@plt>:
    4968:	add	ip, pc, #0, 12
    496c:	add	ip, ip, #36, 20	; 0x24000
    4970:	ldr	pc, [ip, #2220]!	; 0x8ac

00004974 <rb_dictionary_stats@plt>:
    4974:	add	ip, pc, #0, 12
    4978:	add	ip, ip, #36, 20	; 0x24000
    497c:	ldr	pc, [ip, #2212]!	; 0x8a4

00004980 <malloc@plt>:
    4980:	add	ip, pc, #0, 12
    4984:	add	ip, ip, #36, 20	; 0x24000
    4988:	ldr	pc, [ip, #2204]!	; 0x89c

0000498c <sigprocmask@plt>:
    498c:	add	ip, pc, #0, 12
    4990:	add	ip, ip, #36, 20	; 0x24000
    4994:	ldr	pc, [ip, #2196]!	; 0x894

00004998 <rb_event_run@plt>:
    4998:	add	ip, pc, #0, 12
    499c:	add	ip, ip, #36, 20	; 0x24000
    49a0:	ldr	pc, [ip, #2188]!	; 0x88c

000049a4 <SSL_set_accept_state@plt>:
    49a4:	add	ip, pc, #0, 12
    49a8:	add	ip, ip, #36, 20	; 0x24000
    49ac:	ldr	pc, [ip, #2180]!	; 0x884

000049b0 <rb_init_bh@plt>:
    49b0:	add	ip, pc, #0, 12
    49b4:	add	ip, ip, #36, 20	; 0x24000
    49b8:	ldr	pc, [ip, #2172]!	; 0x87c

000049bc <PEM_read_DHparams@plt>:
    49bc:	add	ip, pc, #0, 12
    49c0:	add	ip, ip, #36, 20	; 0x24000
    49c4:	ldr	pc, [ip, #2164]!	; 0x874

000049c8 <gmtime_r@plt>:
    49c8:	add	ip, pc, #0, 12
    49cc:	add	ip, ip, #36, 20	; 0x24000
    49d0:	ldr	pc, [ip, #2156]!	; 0x86c

000049d4 <poll@plt>:
    49d4:	add	ip, pc, #0, 12
    49d8:	add	ip, ip, #36, 20	; 0x24000
    49dc:	ldr	pc, [ip, #2148]!	; 0x864

000049e0 <ASN1_item_digest@plt>:
    49e0:	add	ip, pc, #0, 12
    49e4:	add	ip, ip, #36, 20	; 0x24000
    49e8:	ldr	pc, [ip, #2140]!	; 0x85c

000049ec <strnlen@plt>:
    49ec:	add	ip, pc, #0, 12
    49f0:	add	ip, ip, #36, 20	; 0x24000
    49f4:	ldr	pc, [ip, #2132]!	; 0x854

000049f8 <SSL_get_peer_certificate@plt>:
    49f8:	add	ip, pc, #0, 12
    49fc:	add	ip, ip, #36, 20	; 0x24000
    4a00:	ldr	pc, [ip, #2124]!	; 0x84c

00004a04 <rb_dictionary_find@plt>:
    4a04:	add	ip, pc, #0, 12
    4a08:	add	ip, ip, #36, 20	; 0x24000
    4a0c:	ldr	pc, [ip, #2116]!	; 0x844

00004a10 <rb_lib_init@plt>:
    4a10:	add	ip, pc, #0, 12
    4a14:	add	ip, ip, #36, 20	; 0x24000
    4a18:	ldr	pc, [ip, #2108]!	; 0x83c

00004a1c <SSL_get_verify_result@plt>:
    4a1c:	add	ip, pc, #0, 12
    4a20:	add	ip, ip, #36, 20	; 0x24000
    4a24:	ldr	pc, [ip, #2100]!	; 0x834

00004a28 <strtok_r@plt>:
    4a28:	add	ip, pc, #0, 12
    4a2c:	add	ip, ip, #36, 20	; 0x24000
    4a30:	ldr	pc, [ip, #2092]!	; 0x82c

00004a34 <rb_lib_restart@plt>:
    4a34:	add	ip, pc, #0, 12
    4a38:	add	ip, ip, #36, 20	; 0x24000
    4a3c:	ldr	pc, [ip, #2084]!	; 0x824

00004a40 <DH_free@plt>:
    4a40:	add	ip, pc, #0, 12
    4a44:	add	ip, ip, #36, 20	; 0x24000
    4a48:	ldr	pc, [ip, #2076]!	; 0x81c

00004a4c <timer_delete@plt>:
    4a4c:	add	ip, pc, #0, 12
    4a50:	add	ip, ip, #36, 20	; 0x24000
    4a54:	ldr	pc, [ip, #2068]!	; 0x814

00004a58 <rb_open@plt>:
    4a58:	add	ip, pc, #0, 12
    4a5c:	add	ip, ip, #36, 20	; 0x24000
    4a60:	ldr	pc, [ip, #2060]!	; 0x80c

00004a64 <rb_get_sockerr@plt>:
    4a64:	add	ip, pc, #0, 12
    4a68:	add	ip, ip, #36, 20	; 0x24000
    4a6c:	ldr	pc, [ip, #2052]!	; 0x804

00004a70 <send@plt>:
    4a70:	add	ip, pc, #0, 12
    4a74:	add	ip, ip, #36, 20	; 0x24000
    4a78:	ldr	pc, [ip, #2044]!	; 0x7fc

00004a7c <SSL_shutdown@plt>:
    4a7c:	add	ip, pc, #0, 12
    4a80:	add	ip, ip, #36, 20	; 0x24000
    4a84:	ldr	pc, [ip, #2036]!	; 0x7f4

00004a88 <rb_bh_create@plt>:
    4a88:	add	ip, pc, #0, 12
    4a8c:	add	ip, ip, #36, 20	; 0x24000
    4a90:	ldr	pc, [ip, #2028]!	; 0x7ec

00004a94 <dup2@plt>:
    4a94:	add	ip, pc, #0, 12
    4a98:	add	ip, ip, #36, 20	; 0x24000
    4a9c:	ldr	pc, [ip, #2020]!	; 0x7e4

00004aa0 <getpid@plt>:
    4aa0:	add	ip, pc, #0, 12
    4aa4:	add	ip, ip, #36, 20	; 0x24000
    4aa8:	ldr	pc, [ip, #2012]!	; 0x7dc

00004aac <rb_writev@plt>:
    4aac:	add	ip, pc, #0, 12
    4ab0:	add	ip, ip, #36, 20	; 0x24000
    4ab4:	ldr	pc, [ip, #2004]!	; 0x7d4

00004ab8 <RAND_bytes@plt>:
    4ab8:	add	ip, pc, #0, 12
    4abc:	add	ip, ip, #36, 20	; 0x24000
    4ac0:	ldr	pc, [ip, #1996]!	; 0x7cc

00004ac4 <rb_linebuf_newbuf@plt>:
    4ac4:	add	ip, pc, #0, 12
    4ac8:	add	ip, ip, #36, 20	; 0x24000
    4acc:	ldr	pc, [ip, #1988]!	; 0x7c4

00004ad0 <rb_fdlist_init@plt>:
    4ad0:	add	ip, pc, #0, 12
    4ad4:	add	ip, ip, #36, 20	; 0x24000
    4ad8:	ldr	pc, [ip, #1980]!	; 0x7bc

00004adc <rb_event_add@plt>:
    4adc:	add	ip, pc, #0, 12
    4ae0:	add	ip, ip, #36, 20	; 0x24000
    4ae4:	ldr	pc, [ip, #1972]!	; 0x7b4

00004ae8 <readlink@plt>:
    4ae8:	add	ip, pc, #0, 12
    4aec:	add	ip, ip, #36, 20	; 0x24000
    4af0:	ldr	pc, [ip, #1964]!	; 0x7ac

00004af4 <SSL_CTX_new@plt>:
    4af4:	add	ip, pc, #0, 12
    4af8:	add	ip, ip, #36, 20	; 0x24000
    4afc:	ldr	pc, [ip, #1956]!	; 0x7a4

00004b00 <rb_setup_fd@plt>:
    4b00:	add	ip, pc, #0, 12
    4b04:	add	ip, ip, #36, 20	; 0x24000
    4b08:	ldr	pc, [ip, #1948]!	; 0x79c

00004b0c <recvmsg@plt>:
    4b0c:	add	ip, pc, #0, 12
    4b10:	add	ip, ip, #36, 20	; 0x24000
    4b14:	ldr	pc, [ip, #1940]!	; 0x794

00004b18 <rand@plt>:
    4b18:	add	ip, pc, #0, 12
    4b1c:	add	ip, ip, #36, 20	; 0x24000
    4b20:	ldr	pc, [ip, #1932]!	; 0x78c

00004b24 <rb_linebuf_init@plt>:
    4b24:	add	ip, pc, #0, 12
    4b28:	add	ip, ip, #36, 20	; 0x24000
    4b2c:	ldr	pc, [ip, #1924]!	; 0x784

00004b30 <__fxstat@plt>:
    4b30:	add	ip, pc, #0, 12
    4b34:	add	ip, ip, #36, 20	; 0x24000
    4b38:	ldr	pc, [ip, #1916]!	; 0x77c

00004b3c <SSL_set_connect_state@plt>:
    4b3c:	add	ip, pc, #0, 12
    4b40:	add	ip, ip, #36, 20	; 0x24000
    4b44:	ldr	pc, [ip, #1908]!	; 0x774

00004b48 <rb_radixtree_elem_find@plt>:
    4b48:	add	ip, pc, #0, 12
    4b4c:	add	ip, ip, #36, 20	; 0x24000
    4b50:	ldr	pc, [ip, #1900]!	; 0x76c

00004b54 <rb_make_rb_dlink_node@plt>:
    4b54:	add	ip, pc, #0, 12
    4b58:	add	ip, ip, #36, 20	; 0x24000
    4b5c:	ldr	pc, [ip, #1892]!	; 0x764

00004b60 <rb_strlcat@plt>:
    4b60:	add	ip, pc, #0, 12
    4b64:	add	ip, ip, #36, 20	; 0x24000
    4b68:	ldr	pc, [ip, #1884]!	; 0x75c

00004b6c <rb_spawn_process@plt>:
    4b6c:	add	ip, pc, #0, 12
    4b70:	add	ip, ip, #36, 20	; 0x24000
    4b74:	ldr	pc, [ip, #1876]!	; 0x754

00004b78 <EVP_sha512@plt>:
    4b78:	add	ip, pc, #0, 12
    4b7c:	add	ip, ip, #36, 20	; 0x24000
    4b80:	ldr	pc, [ip, #1868]!	; 0x74c

00004b84 <snprintf@plt>:
    4b84:	add	ip, pc, #0, 12
    4b88:	add	ip, ip, #36, 20	; 0x24000
    4b8c:	ldr	pc, [ip, #1860]!	; 0x744

00004b90 <RAND_status@plt>:
    4b90:	add	ip, pc, #0, 12
    4b94:	add	ip, ip, #36, 20	; 0x24000
    4b98:	ldr	pc, [ip, #1852]!	; 0x73c

00004b9c <timerfd_create@plt>:
    4b9c:	add	ip, pc, #0, 12
    4ba0:	add	ip, ip, #36, 20	; 0x24000
    4ba4:	ldr	pc, [ip, #1844]!	; 0x734

00004ba8 <EVP_sha256@plt>:
    4ba8:	add	ip, pc, #0, 12
    4bac:	add	ip, ip, #36, 20	; 0x24000
    4bb0:	ldr	pc, [ip, #1836]!	; 0x72c

00004bb4 <strcspn@plt>:
    4bb4:	add	ip, pc, #0, 12
    4bb8:	add	ip, ip, #36, 20	; 0x24000
    4bbc:	ldr	pc, [ip, #1828]!	; 0x724

00004bc0 <rb_linebuf_put@plt>:
    4bc0:	add	ip, pc, #0, 12
    4bc4:	add	ip, ip, #36, 20	; 0x24000
    4bc8:	ldr	pc, [ip, #1820]!	; 0x71c

00004bcc <rb_listen@plt>:
    4bcc:	add	ip, pc, #0, 12
    4bd0:	add	ip, ip, #36, 20	; 0x24000
    4bd4:	ldr	pc, [ip, #1812]!	; 0x714

00004bd8 <fcntl@plt>:
    4bd8:	add	ip, pc, #0, 12
    4bdc:	add	ip, ip, #36, 20	; 0x24000
    4be0:	ldr	pc, [ip, #1804]!	; 0x70c

00004be4 <strncmp@plt>:
    4be4:	add	ip, pc, #0, 12
    4be8:	add	ip, ip, #36, 20	; 0x24000
    4bec:	ldr	pc, [ip, #1796]!	; 0x704

00004bf0 <kill@plt>:
    4bf0:	add	ip, pc, #0, 12
    4bf4:	add	ip, ip, #36, 20	; 0x24000
    4bf8:	ldr	pc, [ip, #1788]!	; 0x6fc

00004bfc <nanosleep@plt>:
    4bfc:	add	ip, pc, #0, 12
    4c00:	add	ip, ip, #36, 20	; 0x24000
    4c04:	ldr	pc, [ip, #1780]!	; 0x6f4

00004c08 <rb_event_next@plt>:
    4c08:	add	ip, pc, #0, 12
    4c0c:	add	ip, ip, #36, 20	; 0x24000
    4c10:	ldr	pc, [ip, #1772]!	; 0x6ec

00004c14 <realloc@plt>:
    4c14:	add	ip, pc, #0, 12
    4c18:	add	ip, ip, #36, 20	; 0x24000
    4c1c:	ldr	pc, [ip, #1764]!	; 0x6e4

00004c20 <timerfd_settime@plt>:
    4c20:	add	ip, pc, #0, 12
    4c24:	add	ip, ip, #36, 20	; 0x24000
    4c28:	ldr	pc, [ip, #1756]!	; 0x6dc

00004c2c <epoll_ctl@plt>:
    4c2c:	add	ip, pc, #0, 12
    4c30:	add	ip, ip, #36, 20	; 0x24000
    4c34:	ldr	pc, [ip, #1748]!	; 0x6d4

00004c38 <X509_free@plt>:
    4c38:	add	ip, pc, #0, 12
    4c3c:	add	ip, ip, #36, 20	; 0x24000
    4c40:	ldr	pc, [ip, #1740]!	; 0x6cc

00004c44 <readv@plt>:
    4c44:	add	ip, pc, #0, 12
    4c48:	add	ip, ip, #36, 20	; 0x24000
    4c4c:	ldr	pc, [ip, #1732]!	; 0x6c4

00004c50 <getsockopt@plt>:
    4c50:	add	ip, pc, #0, 12
    4c54:	add	ip, ip, #36, 20	; 0x24000
    4c58:	ldr	pc, [ip, #1724]!	; 0x6bc

00004c5c <pipe@plt>:
    4c5c:	add	ip, pc, #0, 12
    4c60:	add	ip, ip, #36, 20	; 0x24000
    4c64:	ldr	pc, [ip, #1716]!	; 0x6b4

00004c68 <OpenSSL_version@plt>:
    4c68:	add	ip, pc, #0, 12
    4c6c:	add	ip, ip, #36, 20	; 0x24000
    4c70:	ldr	pc, [ip, #1708]!	; 0x6ac

00004c74 <setsockopt@plt>:
    4c74:	add	ip, pc, #0, 12
    4c78:	add	ip, ip, #36, 20	; 0x24000
    4c7c:	ldr	pc, [ip, #1700]!	; 0x6a4

00004c80 <SSL_get_error@plt>:
    4c80:	add	ip, pc, #0, 12
    4c84:	add	ip, ip, #36, 20	; 0x24000
    4c88:	ldr	pc, [ip, #1692]!	; 0x69c

00004c8c <SSL_get_version@plt>:
    4c8c:	add	ip, pc, #0, 12
    4c90:	add	ip, ip, #36, 20	; 0x24000
    4c94:	ldr	pc, [ip, #1684]!	; 0x694

00004c98 <rb_radixtree_delete@plt>:
    4c98:	add	ip, pc, #0, 12
    4c9c:	add	ip, ip, #36, 20	; 0x24000
    4ca0:	ldr	pc, [ip, #1676]!	; 0x68c

00004ca4 <setenv@plt>:
    4ca4:	add	ip, pc, #0, 12
    4ca8:	add	ip, ip, #36, 20	; 0x24000
    4cac:	ldr	pc, [ip, #1668]!	; 0x684

00004cb0 <strcmp@plt>:
    4cb0:	add	ip, pc, #0, 12
    4cb4:	add	ip, ip, #36, 20	; 0x24000
    4cb8:	ldr	pc, [ip, #1660]!	; 0x67c

00004cbc <__errno_location@plt>:
    4cbc:	add	ip, pc, #0, 12
    4cc0:	add	ip, ip, #36, 20	; 0x24000
    4cc4:	ldr	pc, [ip, #1652]!	; 0x674

00004cc8 <__cxa_finalize@plt>:
    4cc8:	add	ip, pc, #0, 12
    4ccc:	add	ip, ip, #36, 20	; 0x24000
    4cd0:	ldr	pc, [ip, #1644]!	; 0x66c

00004cd4 <sprintf@plt>:
    4cd4:	add	ip, pc, #0, 12
    4cd8:	add	ip, ip, #36, 20	; 0x24000
    4cdc:	ldr	pc, [ip, #1636]!	; 0x664

00004ce0 <rb_bh_usage@plt>:
    4ce0:	add	ip, pc, #0, 12
    4ce4:	add	ip, ip, #36, 20	; 0x24000
    4ce8:	ldr	pc, [ip, #1628]!	; 0x65c

00004cec <SSL_CTX_set_verify@plt>:
    4cec:	add	ip, pc, #0, 12
    4cf0:	add	ip, ip, #36, 20	; 0x24000
    4cf4:	ldr	pc, [ip, #1620]!	; 0x654

Disassembly of section .text:

00004cf8 <call_weak_fn>:
    4cf8:	ldr	r3, [pc, #20]	; 4d14 <call_weak_fn+0x1c>
    4cfc:	ldr	r2, [pc, #20]	; 4d18 <call_weak_fn+0x20>
    4d00:	add	r3, pc, r3
    4d04:	ldr	r2, [r3, r2]
    4d08:	cmp	r2, #0
    4d0c:	bxeq	lr
    4d10:	b	44dc <__gmon_start__@plt>
    4d14:	.word	0x000242f8
    4d18:	.word	0x0000035c

00004d1c <deregister_tm_clones>:
    4d1c:	ldr	r0, [pc, #44]	; 4d50 <deregister_tm_clones+0x34>
    4d20:	ldr	r3, [pc, #44]	; 4d54 <deregister_tm_clones+0x38>
    4d24:	add	r0, pc, r0
    4d28:	add	r3, pc, r3
    4d2c:	cmp	r3, r0
    4d30:	ldr	r3, [pc, #32]	; 4d58 <deregister_tm_clones+0x3c>
    4d34:	add	r3, pc, r3
    4d38:	bxeq	lr
    4d3c:	ldr	r2, [pc, #24]	; 4d5c <deregister_tm_clones+0x40>
    4d40:	ldr	r3, [r3, r2]
    4d44:	cmp	r3, #0
    4d48:	bxeq	lr
    4d4c:	bx	r3
    4d50:	.word	0x000247a0
    4d54:	.word	0x0002479c
    4d58:	.word	0x000242c4
    4d5c:	.word	0x00000378

00004d60 <register_tm_clones>:
    4d60:	ldr	r0, [pc, #56]	; 4da0 <register_tm_clones+0x40>
    4d64:	ldr	r3, [pc, #56]	; 4da4 <register_tm_clones+0x44>
    4d68:	add	r0, pc, r0
    4d6c:	add	r3, pc, r3
    4d70:	sub	r1, r3, r0
    4d74:	ldr	r3, [pc, #44]	; 4da8 <register_tm_clones+0x48>
    4d78:	asr	r1, r1, #2
    4d7c:	add	r3, pc, r3
    4d80:	add	r1, r1, r1, lsr #31
    4d84:	asrs	r1, r1, #1
    4d88:	bxeq	lr
    4d8c:	ldr	r2, [pc, #24]	; 4dac <register_tm_clones+0x4c>
    4d90:	ldr	r3, [r3, r2]
    4d94:	cmp	r3, #0
    4d98:	bxeq	lr
    4d9c:	bx	r3
    4da0:	.word	0x0002475c
    4da4:	.word	0x00024758
    4da8:	.word	0x0002427c
    4dac:	.word	0x00000388

00004db0 <__do_global_dtors_aux>:
    4db0:	ldr	r3, [pc, #76]	; 4e04 <__do_global_dtors_aux+0x54>
    4db4:	ldr	r2, [pc, #76]	; 4e08 <__do_global_dtors_aux+0x58>
    4db8:	add	r3, pc, r3
    4dbc:	add	r2, pc, r2
    4dc0:	ldrb	r3, [r3]
    4dc4:	cmp	r3, #0
    4dc8:	bxne	lr
    4dcc:	ldr	r3, [pc, #56]	; 4e0c <__do_global_dtors_aux+0x5c>
    4dd0:	push	{r4, lr}
    4dd4:	ldr	r3, [r2, r3]
    4dd8:	cmp	r3, #0
    4ddc:	beq	4dec <__do_global_dtors_aux+0x3c>
    4de0:	ldr	r3, [pc, #40]	; 4e10 <__do_global_dtors_aux+0x60>
    4de4:	ldr	r0, [pc, r3]
    4de8:	bl	4cc8 <__cxa_finalize@plt>
    4dec:	bl	4d1c <deregister_tm_clones>
    4df0:	ldr	r3, [pc, #28]	; 4e14 <__do_global_dtors_aux+0x64>
    4df4:	mov	r2, #1
    4df8:	add	r3, pc, r3
    4dfc:	strb	r2, [r3]
    4e00:	pop	{r4, pc}
    4e04:	.word	0x00024710
    4e08:	.word	0x0002423c
    4e0c:	.word	0x00000418
    4e10:	.word	0x00024634
    4e14:	.word	0x000246d0

00004e18 <frame_dummy>:
    4e18:	b	4d60 <register_tm_clones>

00004e1c <rb_spawn_process>:
    4e1c:	strd	r4, [sp, #-20]!	; 0xffffffec
    4e20:	strd	r6, [sp, #8]
    4e24:	mov	r7, r0
    4e28:	mov	r6, r1
    4e2c:	str	lr, [sp, #16]
    4e30:	sub	sp, sp, #356	; 0x164
    4e34:	add	r4, sp, #16
    4e38:	ldr	r5, [pc, #124]	; 4ebc <rb_spawn_process+0xa0>
    4e3c:	mov	r0, r4
    4e40:	bl	46a4 <posix_spawnattr_init@plt>
    4e44:	mov	r1, #64	; 0x40
    4e48:	mov	r0, r4
    4e4c:	bl	4800 <posix_spawnattr_setflags@plt>
    4e50:	ldr	ip, [pc, #104]	; 4ec0 <rb_spawn_process+0xa4>
    4e54:	add	r5, pc, r5
    4e58:	mov	r1, r7
    4e5c:	mov	r3, r4
    4e60:	mov	r2, #0
    4e64:	add	r0, sp, #12
    4e68:	ldr	ip, [r5, ip]
    4e6c:	str	r6, [sp]
    4e70:	ldr	ip, [ip]
    4e74:	str	ip, [sp, #4]
    4e78:	bl	47b8 <posix_spawn@plt>
    4e7c:	mov	r5, r0
    4e80:	mov	r0, r4
    4e84:	bl	483c <posix_spawnattr_destroy@plt>
    4e88:	cmp	r5, #0
    4e8c:	bne	4eac <rb_spawn_process+0x90>
    4e90:	ldr	r3, [sp, #12]
    4e94:	mov	r0, r3
    4e98:	add	sp, sp, #356	; 0x164
    4e9c:	ldrd	r4, [sp]
    4ea0:	ldrd	r6, [sp, #8]
    4ea4:	add	sp, sp, #16
    4ea8:	pop	{pc}		; (ldr pc, [sp], #4)
    4eac:	bl	4cbc <__errno_location@plt>
    4eb0:	mvn	r3, #0
    4eb4:	str	r5, [r0]
    4eb8:	b	4e94 <rb_spawn_process+0x78>
    4ebc:	.word	0x000241a4
    4ec0:	.word	0x000003a0

00004ec4 <rb_gettimeofday>:
    4ec4:	b	4740 <gettimeofday@plt>

00004ec8 <rb_sleep>:
    4ec8:	mov	r3, #1000	; 0x3e8
    4ecc:	push	{lr}		; (str lr, [sp, #-4]!)
    4ed0:	sub	sp, sp, #12
    4ed4:	mul	r3, r3, r1
    4ed8:	mov	r1, #0
    4edc:	stm	sp, {r0, r3}
    4ee0:	mov	r0, sp
    4ee4:	bl	4bfc <nanosleep@plt>
    4ee8:	add	sp, sp, #12
    4eec:	pop	{pc}		; (ldr pc, [sp], #4)

00004ef0 <rb_strerror>:
    4ef0:	b	4374 <strerror@plt>

00004ef4 <rb_kill>:
    4ef4:	b	4bf0 <kill@plt>

00004ef8 <rb_setenv>:
    4ef8:	b	4ca4 <setenv@plt>

00004efc <rb_waitpid>:
    4efc:	b	4878 <waitpid@plt>

00004f00 <rb_getpid>:
    4f00:	b	4aa0 <getpid@plt>

00004f04 <rb_path_to_self>:
    4f04:	str	r4, [sp, #-8]!
    4f08:	mov	r2, #4096	; 0x1000
    4f0c:	ldr	r4, [pc, #44]	; 4f40 <rb_path_to_self+0x3c>
    4f10:	str	lr, [sp, #4]
    4f14:	ldr	r0, [pc, #40]	; 4f44 <rb_path_to_self+0x40>
    4f18:	add	r4, pc, r4
    4f1c:	mov	r1, r4
    4f20:	add	r0, pc, r0
    4f24:	bl	4ae8 <readlink@plt>
    4f28:	cmn	r0, #1
    4f2c:	movne	r0, r4
    4f30:	ldr	r4, [sp]
    4f34:	add	sp, sp, #4
    4f38:	moveq	r0, #0
    4f3c:	pop	{pc}		; (ldr pc, [sp], #4)
    4f40:	.word	0x000245b4
    4f44:	.word	0x00011178

00004f48 <rb_init_netio_win32>:
    4f48:	str	r4, [sp, #-8]!
    4f4c:	str	lr, [sp, #4]
    4f50:	bl	4cbc <__errno_location@plt>
    4f54:	mov	r3, #38	; 0x26
    4f58:	ldr	r4, [sp]
    4f5c:	add	sp, sp, #4
    4f60:	str	r3, [r0]
    4f64:	mvn	r0, #0
    4f68:	pop	{pc}		; (ldr pc, [sp], #4)

00004f6c <rb_setselect_win32>:
    4f6c:	str	r4, [sp, #-8]!
    4f70:	str	lr, [sp, #4]
    4f74:	bl	4cbc <__errno_location@plt>
    4f78:	mov	r3, #38	; 0x26
    4f7c:	ldr	r4, [sp]
    4f80:	add	sp, sp, #4
    4f84:	str	r3, [r0]
    4f88:	pop	{pc}		; (ldr pc, [sp], #4)

00004f8c <rb_select_win32>:
    4f8c:	str	r4, [sp, #-8]!
    4f90:	str	lr, [sp, #4]
    4f94:	bl	4cbc <__errno_location@plt>
    4f98:	mov	r3, #38	; 0x26
    4f9c:	ldr	r4, [sp]
    4fa0:	add	sp, sp, #4
    4fa4:	str	r3, [r0]
    4fa8:	mvn	r0, #0
    4fac:	pop	{pc}		; (ldr pc, [sp], #4)

00004fb0 <rb_setup_fd_win32>:
    4fb0:	str	r4, [sp, #-8]!
    4fb4:	str	lr, [sp, #4]
    4fb8:	bl	4cbc <__errno_location@plt>
    4fbc:	mov	r3, #38	; 0x26
    4fc0:	ldr	r4, [sp]
    4fc4:	add	sp, sp, #4
    4fc8:	str	r3, [r0]
    4fcc:	mvn	r0, #0
    4fd0:	pop	{pc}		; (ldr pc, [sp], #4)
    4fd4:	andeq	r0, r0, r0

00004fd8 <rb_sha256_process_block>:
    4fd8:	ldr	r3, [r2, #32]
    4fdc:	lsr	ip, r1, #2
    4fe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    4fe4:	adds	r3, r3, r1
    4fe8:	ldr	r1, [r2, #8]
    4fec:	strd	r6, [sp, #8]
    4ff0:	strd	r8, [sp, #16]
    4ff4:	strd	sl, [sp, #24]
    4ff8:	str	lr, [sp, #32]
    4ffc:	sub	sp, sp, #340	; 0x154
    5000:	str	r3, [r2, #32]
    5004:	ldr	r3, [r2, #12]
    5008:	str	ip, [sp, #56]	; 0x38
    500c:	ldr	ip, [r2]
    5010:	str	r3, [sp, #20]
    5014:	ldr	r3, [r2, #16]
    5018:	str	r1, [sp, #36]	; 0x24
    501c:	str	r2, [sp, #76]	; 0x4c
    5020:	str	r3, [sp, #24]
    5024:	ldr	r3, [r2, #20]
    5028:	str	ip, [sp, #28]
    502c:	ldr	ip, [r2, #4]
    5030:	str	r3, [sp, #40]	; 0x28
    5034:	ldr	r3, [r2, #24]
    5038:	str	ip, [sp, #32]
    503c:	str	r3, [sp, #44]	; 0x2c
    5040:	ldr	r3, [r2, #28]
    5044:	str	r3, [sp, #48]	; 0x30
    5048:	bcc	5058 <rb_sha256_process_block+0x80>
    504c:	ldr	r3, [r2, #36]	; 0x24
    5050:	add	r3, r3, #1
    5054:	str	r3, [r2, #36]	; 0x24
    5058:	ldr	r3, [sp, #56]	; 0x38
    505c:	cmp	r3, #0
    5060:	beq	5258 <rb_sha256_process_block+0x280>
    5064:	add	r3, r0, #60	; 0x3c
    5068:	str	r3, [sp, #52]	; 0x34
    506c:	movw	r3, #12184	; 0x2f98
    5070:	movt	r3, #17034	; 0x428a
    5074:	str	r3, [sp, #72]	; 0x48
    5078:	add	r3, sp, #76	; 0x4c
    507c:	str	r3, [sp, #60]	; 0x3c
    5080:	add	r3, sp, #80	; 0x50
    5084:	str	r3, [sp, #68]	; 0x44
    5088:	add	r3, sp, #272	; 0x110
    508c:	str	r3, [sp, #64]	; 0x40
    5090:	add	r3, sp, #332	; 0x14c
    5094:	str	r3, [sp, #16]
    5098:	ldr	r0, [sp, #52]	; 0x34
    509c:	ldr	r1, [sp, #60]	; 0x3c
    50a0:	sub	r2, r0, #64	; 0x40
    50a4:	mov	r9, r1
    50a8:	ldr	r3, [r2, #4]!
    50ac:	rev	r3, r3
    50b0:	cmp	r0, r2
    50b4:	str	r3, [r1, #4]!
    50b8:	bne	50a8 <rb_sha256_process_block+0xd0>
    50bc:	ldr	lr, [sp, #64]	; 0x40
    50c0:	ldr	r2, [sp, #68]	; 0x44
    50c4:	ldr	r5, [r2]
    50c8:	ldr	r4, [r2, #56]	; 0x38
    50cc:	ldr	r0, [r2, #36]	; 0x24
    50d0:	ldr	ip, [r2, #4]!
    50d4:	ror	r3, r4, #19
    50d8:	eor	r3, r3, r4, ror #17
    50dc:	add	r0, r0, r5
    50e0:	ror	r1, ip, #18
    50e4:	cmp	lr, r2
    50e8:	eor	r3, r3, r4, lsr #10
    50ec:	eor	r1, r1, ip, ror #7
    50f0:	add	r3, r3, r0
    50f4:	eor	r1, r1, ip, lsr #3
    50f8:	add	r3, r3, r1
    50fc:	str	r3, [r2, #60]	; 0x3c
    5100:	bne	50c4 <rb_sha256_process_block+0xec>
    5104:	ldr	r3, [pc, #428]	; 52b8 <rb_sha256_process_block+0x2e0>
    5108:	ldr	r0, [sp, #24]
    510c:	ldr	ip, [sp, #28]
    5110:	add	r3, pc, r3
    5114:	ldr	r6, [sp, #32]
    5118:	str	r3, [sp, #12]
    511c:	ldr	r3, [sp, #20]
    5120:	ldr	r5, [sp, #36]	; 0x24
    5124:	ldr	r8, [sp, #40]	; 0x28
    5128:	str	r3, [sp, #4]
    512c:	ldr	r7, [sp, #44]	; 0x2c
    5130:	ldr	r3, [sp, #72]	; 0x48
    5134:	ldr	sl, [sp, #48]	; 0x30
    5138:	mov	fp, r3
    513c:	mov	r3, r9
    5140:	b	5170 <rb_sha256_process_block+0x198>
    5144:	ldr	r2, [sp, #12]
    5148:	mov	sl, r7
    514c:	mov	r7, r8
    5150:	mov	r8, r0
    5154:	mov	r0, r4
    5158:	str	r5, [sp, #4]
    515c:	mov	r5, r6
    5160:	mov	r6, ip
    5164:	mov	ip, r9
    5168:	ldr	fp, [r2, #4]!
    516c:	str	r2, [sp, #12]
    5170:	ror	r2, r0, #11
    5174:	ldr	r9, [r3, #4]!
    5178:	and	r1, r0, r8
    517c:	bic	r4, r7, r0
    5180:	eor	lr, r6, r5
    5184:	eor	r2, r2, r0, ror #6
    5188:	eor	r4, r4, r1
    518c:	and	lr, lr, ip
    5190:	ror	r1, ip, #13
    5194:	eor	r2, r2, r0, ror #25
    5198:	eor	r1, r1, ip, ror #2
    519c:	str	r2, [sp, #8]
    51a0:	eor	r1, r1, ip, ror #22
    51a4:	ldr	r2, [sp, #16]
    51a8:	cmp	r2, r3
    51ac:	ldr	r2, [sp, #8]
    51b0:	add	r2, r2, r4
    51b4:	add	r9, r2, r9
    51b8:	and	r2, r6, r5
    51bc:	eor	r2, r2, lr
    51c0:	add	r9, r9, sl
    51c4:	add	r2, r1, r2
    51c8:	ldr	r1, [sp, #4]
    51cc:	add	r9, r9, fp
    51d0:	add	r4, r9, r1
    51d4:	add	r9, r9, r2
    51d8:	bne	5144 <rb_sha256_process_block+0x16c>
    51dc:	ldr	r3, [sp, #56]	; 0x38
    51e0:	subs	r3, r3, #16
    51e4:	str	r3, [sp, #56]	; 0x38
    51e8:	ldr	r3, [sp, #28]
    51ec:	add	r3, r3, r9
    51f0:	str	r3, [sp, #28]
    51f4:	ldr	r3, [sp, #32]
    51f8:	add	r3, r3, ip
    51fc:	str	r3, [sp, #32]
    5200:	ldr	r3, [sp, #36]	; 0x24
    5204:	add	r3, r3, r6
    5208:	str	r3, [sp, #36]	; 0x24
    520c:	ldr	r3, [sp, #20]
    5210:	add	r3, r3, r5
    5214:	str	r3, [sp, #20]
    5218:	ldr	r3, [sp, #24]
    521c:	add	r3, r3, r4
    5220:	str	r3, [sp, #24]
    5224:	ldr	r3, [sp, #40]	; 0x28
    5228:	add	r3, r3, r0
    522c:	str	r3, [sp, #40]	; 0x28
    5230:	ldr	r3, [sp, #44]	; 0x2c
    5234:	add	r3, r3, r8
    5238:	str	r3, [sp, #44]	; 0x2c
    523c:	ldr	r3, [sp, #48]	; 0x30
    5240:	add	r3, r3, r7
    5244:	str	r3, [sp, #48]	; 0x30
    5248:	ldr	r3, [sp, #52]	; 0x34
    524c:	add	r3, r3, #64	; 0x40
    5250:	str	r3, [sp, #52]	; 0x34
    5254:	bne	5098 <rb_sha256_process_block+0xc0>
    5258:	ldr	r2, [sp, #28]
    525c:	ldr	r3, [sp, #76]	; 0x4c
    5260:	str	r2, [r3]
    5264:	ldr	r2, [sp, #32]
    5268:	str	r2, [r3, #4]
    526c:	ldr	r2, [sp, #36]	; 0x24
    5270:	str	r2, [r3, #8]
    5274:	ldr	r2, [sp, #20]
    5278:	str	r2, [r3, #12]
    527c:	ldr	r2, [sp, #24]
    5280:	str	r2, [r3, #16]
    5284:	ldr	r2, [sp, #40]	; 0x28
    5288:	str	r2, [r3, #20]
    528c:	ldr	r2, [sp, #44]	; 0x2c
    5290:	str	r2, [r3, #24]
    5294:	ldr	r2, [sp, #48]	; 0x30
    5298:	str	r2, [r3, #28]
    529c:	add	sp, sp, #340	; 0x154
    52a0:	ldrd	r4, [sp]
    52a4:	ldrd	r6, [sp, #8]
    52a8:	ldrd	r8, [sp, #16]
    52ac:	ldrd	sl, [sp, #24]
    52b0:	add	sp, sp, #32
    52b4:	pop	{pc}		; (ldr pc, [sp], #4)
    52b8:	.word	0x00010f98

000052bc <rb_sha512_process_block>:
    52bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
    52c0:	mov	r3, #0
    52c4:	mov	ip, r0
    52c8:	ldr	r4, [r2]
    52cc:	strd	r6, [sp, #8]
    52d0:	strd	r8, [sp, #16]
    52d4:	strd	sl, [sp, #24]
    52d8:	str	lr, [sp, #32]
    52dc:	sub	sp, sp, #812	; 0x32c
    52e0:	mov	lr, r2
    52e4:	ldrd	r6, [r2, #64]	; 0x40
    52e8:	str	r4, [sp, #100]	; 0x64
    52ec:	ldr	r4, [lr, #4]
    52f0:	str	r2, [sp, #164]	; 0xa4
    52f4:	mov	r2, r1
    52f8:	lsr	r1, r1, #3
    52fc:	str	r4, [sp, #104]	; 0x68
    5300:	adds	r4, r6, r2
    5304:	ldr	r2, [lr, #8]
    5308:	adcs	r5, r7, r3
    530c:	movcs	r0, #1
    5310:	movcc	r0, #0
    5314:	str	r2, [sp, #108]	; 0x6c
    5318:	ldr	r2, [lr, #12]
    531c:	str	r1, [sp, #144]	; 0x90
    5320:	mov	r1, #0
    5324:	str	r2, [sp, #112]	; 0x70
    5328:	ldr	r2, [lr, #16]
    532c:	str	r2, [sp, #116]	; 0x74
    5330:	ldr	r2, [lr, #20]
    5334:	str	r2, [sp, #120]	; 0x78
    5338:	ldr	r2, [lr, #24]
    533c:	str	r2, [sp, #84]	; 0x54
    5340:	ldr	r2, [lr, #28]
    5344:	str	r2, [sp, #88]	; 0x58
    5348:	ldr	r2, [lr, #32]
    534c:	str	r2, [sp, #92]	; 0x5c
    5350:	ldr	r2, [lr, #36]	; 0x24
    5354:	str	r2, [sp, #96]	; 0x60
    5358:	ldr	r2, [lr, #40]	; 0x28
    535c:	str	r2, [sp, #76]	; 0x4c
    5360:	ldr	r2, [lr, #44]	; 0x2c
    5364:	str	r2, [sp, #80]	; 0x50
    5368:	ldr	r2, [lr, #48]	; 0x30
    536c:	ldr	r3, [lr, #60]	; 0x3c
    5370:	str	r2, [sp, #124]	; 0x7c
    5374:	ldr	r2, [lr, #52]	; 0x34
    5378:	str	r2, [sp, #128]	; 0x80
    537c:	str	r3, [sp, #136]	; 0x88
    5380:	orrs	r3, r0, r1
    5384:	ldr	r2, [lr, #56]	; 0x38
    5388:	ldr	r1, [sp, #164]	; 0xa4
    538c:	str	r2, [sp, #132]	; 0x84
    5390:	strd	r4, [r1, #64]	; 0x40
    5394:	beq	53b0 <rb_sha512_process_block+0xf4>
    5398:	ldr	r3, [r1, #72]	; 0x48
    539c:	ldr	r2, [r1, #76]	; 0x4c
    53a0:	adds	r3, r3, #1
    53a4:	adc	r2, r2, #0
    53a8:	str	r3, [r1, #72]	; 0x48
    53ac:	str	r2, [r1, #76]	; 0x4c
    53b0:	ldr	r3, [sp, #144]	; 0x90
    53b4:	cmp	r3, #0
    53b8:	beq	583c <rb_sha512_process_block+0x580>
    53bc:	ldr	r3, [pc, #1304]	; 58dc <rb_sha512_process_block+0x620>
    53c0:	add	r3, pc, r3
    53c4:	str	r3, [sp, #148]	; 0x94
    53c8:	add	r3, ip, #120	; 0x78
    53cc:	str	r3, [sp, #140]	; 0x8c
    53d0:	add	r3, sp, #160	; 0xa0
    53d4:	str	r3, [sp, #152]	; 0x98
    53d8:	add	r3, sp, #168	; 0xa8
    53dc:	str	r3, [sp, #160]	; 0xa0
    53e0:	add	r3, sp, #680	; 0x2a8
    53e4:	str	r3, [sp, #156]	; 0x9c
    53e8:	add	r3, sp, #800	; 0x320
    53ec:	str	r3, [sp, #72]	; 0x48
    53f0:	ldr	ip, [sp, #140]	; 0x8c
    53f4:	ldr	r0, [sp, #152]	; 0x98
    53f8:	sub	r3, ip, #128	; 0x80
    53fc:	str	r0, [sp, #40]	; 0x28
    5400:	ldr	r2, [r3, #8]!
    5404:	ldr	r1, [r3, #4]
    5408:	rev	r2, r2
    540c:	cmp	ip, r3
    5410:	rev	r1, r1
    5414:	str	r1, [r0, #8]!
    5418:	str	r2, [r0, #4]
    541c:	bne	5400 <rb_sha512_process_block+0x144>
    5420:	ldr	lr, [sp, #156]	; 0x9c
    5424:	ldr	r3, [sp, #160]	; 0xa0
    5428:	mov	sl, r3
    542c:	add	r3, r3, #8
    5430:	ldr	r0, [r3, #-8]
    5434:	ldr	r1, [r3, #104]	; 0x68
    5438:	ldr	r9, [r3, #108]	; 0x6c
    543c:	ldr	r5, [r3]
    5440:	lsr	r2, r1, #19
    5444:	lsl	ip, r1, #3
    5448:	ldr	r8, [r3, #64]	; 0x40
    544c:	lsr	r6, r1, #6
    5450:	orr	ip, ip, r9, lsr #29
    5454:	ldr	r4, [r3, #4]
    5458:	orr	r2, r2, r9, lsl #13
    545c:	orr	r6, r6, r9, lsl #26
    5460:	eor	r2, r2, ip
    5464:	lsr	r7, r9, #19
    5468:	adds	r8, r8, r0
    546c:	lsl	ip, r9, #3
    5470:	eor	r2, r2, r6
    5474:	ldr	r6, [sl, #4]
    5478:	orr	r7, r7, r1, lsl #13
    547c:	ldr	sl, [sl, #76]	; 0x4c
    5480:	orr	ip, ip, r1, lsr #29
    5484:	lsr	r0, r4, #1
    5488:	eor	r7, r7, ip
    548c:	lsr	r1, r5, #1
    5490:	eor	ip, r7, r9, lsr #6
    5494:	lsr	r9, r5, #8
    5498:	adc	r6, sl, r6
    549c:	lsr	r7, r4, #8
    54a0:	adds	r2, r2, r8
    54a4:	adc	ip, ip, r6
    54a8:	lsr	r6, r5, #7
    54ac:	orr	r0, r0, r5, lsl #31
    54b0:	orr	r1, r1, r4, lsl #31
    54b4:	orr	r9, r9, r4, lsl #24
    54b8:	orr	r5, r7, r5, lsl #24
    54bc:	orr	r6, r6, r4, lsl #25
    54c0:	eor	r1, r1, r9
    54c4:	eor	r0, r0, r5
    54c8:	eor	r1, r1, r6
    54cc:	eor	r0, r0, r4, lsr #7
    54d0:	adds	r2, r2, r1
    54d4:	adc	r0, ip, r0
    54d8:	cmp	lr, r3
    54dc:	str	r2, [r3, #120]	; 0x78
    54e0:	str	r0, [r3, #124]	; 0x7c
    54e4:	bne	5428 <rb_sha512_process_block+0x16c>
    54e8:	movw	r3, #44578	; 0xae22
    54ec:	movt	r3, #55080	; 0xd728
    54f0:	ldr	ip, [sp, #92]	; 0x5c
    54f4:	str	r3, [sp, #8]
    54f8:	ldr	fp, [sp, #108]	; 0x6c
    54fc:	ldr	r3, [sp, #148]	; 0x94
    5500:	ldr	lr, [sp, #96]	; 0x60
    5504:	str	fp, [sp, #16]
    5508:	ldrd	r4, [sp, #100]	; 0x64
    550c:	add	r3, r3, #256	; 0x100
    5510:	str	r3, [sp, #68]	; 0x44
    5514:	movw	r3, #12184	; 0x2f98
    5518:	movt	r3, #17034	; 0x428a
    551c:	str	r3, [sp, #12]
    5520:	ldr	r3, [sp, #132]	; 0x84
    5524:	str	r3, [sp, #44]	; 0x2c
    5528:	ldr	r3, [sp, #136]	; 0x88
    552c:	str	r3, [sp, #56]	; 0x38
    5530:	ldr	r3, [sp, #124]	; 0x7c
    5534:	str	r3, [sp, #24]
    5538:	ldr	r3, [sp, #128]	; 0x80
    553c:	str	r3, [sp, #28]
    5540:	ldr	r3, [sp, #76]	; 0x4c
    5544:	str	r3, [sp, #32]
    5548:	ldr	r3, [sp, #80]	; 0x50
    554c:	str	r3, [sp, #36]	; 0x24
    5550:	ldr	r3, [sp, #84]	; 0x54
    5554:	str	r3, [sp, #60]	; 0x3c
    5558:	ldr	r3, [sp, #88]	; 0x58
    555c:	str	r3, [sp, #64]	; 0x40
    5560:	ldr	r3, [sp, #116]	; 0x74
    5564:	str	r3, [sp, #4]
    5568:	ldr	r3, [sp, #120]	; 0x78
    556c:	str	r3, [sp, #20]
    5570:	ldr	r3, [sp, #112]	; 0x70
    5574:	str	r3, [sp]
    5578:	b	55d8 <rb_sha512_process_block+0x31c>
    557c:	str	r1, [sp, #64]	; 0x40
    5580:	ldr	r3, [sp, #4]
    5584:	ldr	r6, [sp]
    5588:	str	r5, [sp]
    558c:	mov	r5, r9
    5590:	ldr	r2, [sp, #32]
    5594:	str	r3, [sp, #60]	; 0x3c
    5598:	ldr	r3, [sp, #36]	; 0x24
    559c:	str	ip, [sp, #32]
    55a0:	mov	ip, r0
    55a4:	ldr	r1, [sp, #68]	; 0x44
    55a8:	str	r6, [sp, #20]
    55ac:	str	r2, [sp, #24]
    55b0:	str	r3, [sp, #28]
    55b4:	str	lr, [sp, #36]	; 0x24
    55b8:	mov	lr, r8
    55bc:	ldrd	r2, [r1, #8]!
    55c0:	strd	r2, [sp, #8]
    55c4:	ldr	r3, [sp, #16]
    55c8:	str	r4, [sp, #16]
    55cc:	mov	r4, r7
    55d0:	str	r3, [sp, #4]
    55d4:	str	r1, [sp, #68]	; 0x44
    55d8:	ldr	r3, [sp, #24]
    55dc:	lsr	r0, ip, #14
    55e0:	lsr	r1, ip, #18
    55e4:	ldr	r2, [sp, #32]
    55e8:	orr	r0, r0, lr, lsl #18
    55ec:	orr	r1, r1, lr, lsl #14
    55f0:	ldr	r9, [sp, #36]	; 0x24
    55f4:	bic	r8, r3, ip
    55f8:	and	r3, ip, r2
    55fc:	ldr	r2, [sp, #28]
    5600:	eor	r8, r8, r3
    5604:	ldr	r3, [sp, #40]	; 0x28
    5608:	bic	r7, r2, lr
    560c:	lsl	r2, ip, #23
    5610:	ldrd	sl, [r3, #8]!
    5614:	orr	r2, r2, lr, lsr #9
    5618:	strd	sl, [sp, #48]	; 0x30
    561c:	mov	fp, r3
    5620:	eor	r3, r0, r1
    5624:	lsr	r1, lr, #14
    5628:	eor	r3, r3, r2
    562c:	lsr	r0, lr, #18
    5630:	adds	r3, r3, r8
    5634:	str	fp, [sp, #40]	; 0x28
    5638:	orr	r6, r1, ip, lsl #18
    563c:	lsl	r2, lr, #23
    5640:	orr	r1, r0, ip, lsl #14
    5644:	orr	r0, r2, ip, lsr #9
    5648:	eor	r1, r1, r6
    564c:	and	r6, lr, r9
    5650:	lsr	r9, r5, #28
    5654:	eor	r7, r7, r6
    5658:	lsr	r6, r4, #28
    565c:	eor	r2, r1, r0
    5660:	adc	r2, r2, r7
    5664:	lsl	r0, r4, #30
    5668:	ldr	r1, [sp, #16]
    566c:	orr	r8, r6, r5, lsl #4
    5670:	ldrd	r6, [sp, #48]	; 0x30
    5674:	orr	r0, r0, r5, lsr #2
    5678:	orr	r9, r9, r4, lsl #4
    567c:	adds	r3, r3, r6
    5680:	ldr	r6, [sp, #44]	; 0x2c
    5684:	adc	r2, r2, r7
    5688:	ldr	r7, [sp, #4]
    568c:	adds	r3, r3, r6
    5690:	eor	r6, r8, r0
    5694:	ldr	r8, [sp, #8]
    5698:	ldr	r0, [sp, #56]	; 0x38
    569c:	eor	sl, r1, r7
    56a0:	lsl	r1, r4, #25
    56a4:	and	sl, sl, r4
    56a8:	orr	r1, r1, r5, lsr #7
    56ac:	eor	r1, r1, r6
    56b0:	ldr	r6, [sp, #20]
    56b4:	adc	r2, r2, r0
    56b8:	adds	r3, r3, r8
    56bc:	lsl	r0, r5, #30
    56c0:	ldr	r8, [sp, #24]
    56c4:	orr	r0, r0, r4, lsr #2
    56c8:	eor	r9, r9, r0
    56cc:	ldr	r0, [sp, #60]	; 0x3c
    56d0:	str	r8, [sp, #44]	; 0x2c
    56d4:	ldr	r8, [sp, #12]
    56d8:	adc	r2, r2, r8
    56dc:	ldr	r8, [sp, #16]
    56e0:	and	r7, r7, r8
    56e4:	lsl	r8, r5, #25
    56e8:	eor	r7, r7, sl
    56ec:	ldr	sl, [sp, #28]
    56f0:	adds	r7, r1, r7
    56f4:	orr	r8, r8, r4, lsr #7
    56f8:	ldr	r1, [sp, #20]
    56fc:	eor	r9, r9, r8
    5700:	ldr	r8, [sp, #64]	; 0x40
    5704:	str	sl, [sp, #56]	; 0x38
    5708:	ldr	sl, [sp]
    570c:	eor	r6, sl, r6
    5710:	and	sl, r6, r5
    5714:	ldr	r6, [sp]
    5718:	and	r6, r6, r1
    571c:	eor	r6, r6, sl
    5720:	ldr	sl, [sp, #72]	; 0x48
    5724:	adc	r9, r9, r6
    5728:	adds	r0, r3, r0
    572c:	adc	r8, r2, r8
    5730:	adds	r7, r3, r7
    5734:	adc	r9, r2, r9
    5738:	cmp	sl, fp
    573c:	bne	557c <rb_sha512_process_block+0x2c0>
    5740:	ldr	r2, [sp]
    5744:	ldr	r3, [sp, #100]	; 0x64
    5748:	ldr	fp, [sp, #16]
    574c:	adds	r3, r3, r7
    5750:	str	r3, [sp, #100]	; 0x64
    5754:	ldr	r3, [sp, #140]	; 0x8c
    5758:	add	r3, r3, #128	; 0x80
    575c:	str	r3, [sp, #140]	; 0x8c
    5760:	ldr	r3, [sp, #104]	; 0x68
    5764:	adc	r3, r3, r9
    5768:	str	r3, [sp, #104]	; 0x68
    576c:	ldr	r3, [sp, #108]	; 0x6c
    5770:	adds	r3, r3, r4
    5774:	str	r3, [sp, #108]	; 0x6c
    5778:	ldr	r3, [sp, #112]	; 0x70
    577c:	adc	r3, r3, r5
    5780:	str	r3, [sp, #112]	; 0x70
    5784:	ldr	r3, [sp, #116]	; 0x74
    5788:	adds	r3, r3, fp
    578c:	str	r3, [sp, #116]	; 0x74
    5790:	ldr	r3, [sp, #120]	; 0x78
    5794:	adc	r3, r3, r2
    5798:	ldr	r2, [sp, #4]
    579c:	str	r3, [sp, #120]	; 0x78
    57a0:	ldr	r3, [sp, #84]	; 0x54
    57a4:	adds	r3, r3, r2
    57a8:	ldr	r2, [sp, #20]
    57ac:	str	r3, [sp, #84]	; 0x54
    57b0:	ldr	r3, [sp, #88]	; 0x58
    57b4:	adc	r3, r3, r2
    57b8:	ldr	r2, [sp, #32]
    57bc:	str	r3, [sp, #88]	; 0x58
    57c0:	ldr	r3, [sp, #92]	; 0x5c
    57c4:	adds	r3, r3, r0
    57c8:	str	r3, [sp, #92]	; 0x5c
    57cc:	ldr	r3, [sp, #96]	; 0x60
    57d0:	adc	r3, r3, r8
    57d4:	str	r3, [sp, #96]	; 0x60
    57d8:	ldr	r3, [sp, #76]	; 0x4c
    57dc:	adds	r3, r3, ip
    57e0:	str	r3, [sp, #76]	; 0x4c
    57e4:	ldr	r3, [sp, #80]	; 0x50
    57e8:	adc	r3, r3, lr
    57ec:	str	r3, [sp, #80]	; 0x50
    57f0:	ldr	r3, [sp, #124]	; 0x7c
    57f4:	adds	r3, r3, r2
    57f8:	str	r3, [sp, #124]	; 0x7c
    57fc:	ldr	r2, [sp, #36]	; 0x24
    5800:	ldr	r3, [sp, #128]	; 0x80
    5804:	adc	r3, r3, r2
    5808:	ldr	r2, [sp, #24]
    580c:	str	r3, [sp, #128]	; 0x80
    5810:	ldr	r3, [sp, #132]	; 0x84
    5814:	adds	r3, r3, r2
    5818:	ldr	r2, [sp, #28]
    581c:	str	r3, [sp, #132]	; 0x84
    5820:	ldr	r3, [sp, #136]	; 0x88
    5824:	adc	r3, r3, r2
    5828:	str	r3, [sp, #136]	; 0x88
    582c:	ldr	r3, [sp, #144]	; 0x90
    5830:	subs	r3, r3, #16
    5834:	str	r3, [sp, #144]	; 0x90
    5838:	bne	53f0 <rb_sha512_process_block+0x134>
    583c:	ldr	r2, [sp, #100]	; 0x64
    5840:	ldr	r3, [sp, #164]	; 0xa4
    5844:	str	r2, [r3]
    5848:	ldr	r2, [sp, #104]	; 0x68
    584c:	str	r2, [r3, #4]
    5850:	ldr	r2, [sp, #108]	; 0x6c
    5854:	str	r2, [r3, #8]
    5858:	ldr	r2, [sp, #112]	; 0x70
    585c:	str	r2, [r3, #12]
    5860:	ldr	r2, [sp, #116]	; 0x74
    5864:	str	r2, [r3, #16]
    5868:	ldr	r2, [sp, #120]	; 0x78
    586c:	str	r2, [r3, #20]
    5870:	ldr	r2, [sp, #84]	; 0x54
    5874:	str	r2, [r3, #24]
    5878:	ldr	r2, [sp, #88]	; 0x58
    587c:	str	r2, [r3, #28]
    5880:	ldr	r2, [sp, #92]	; 0x5c
    5884:	str	r2, [r3, #32]
    5888:	ldr	r2, [sp, #96]	; 0x60
    588c:	str	r2, [r3, #36]	; 0x24
    5890:	ldr	r2, [sp, #76]	; 0x4c
    5894:	str	r2, [r3, #40]	; 0x28
    5898:	ldr	r2, [sp, #80]	; 0x50
    589c:	str	r2, [r3, #44]	; 0x2c
    58a0:	ldr	r2, [sp, #124]	; 0x7c
    58a4:	str	r2, [r3, #48]	; 0x30
    58a8:	ldr	r2, [sp, #128]	; 0x80
    58ac:	str	r2, [r3, #52]	; 0x34
    58b0:	ldr	r2, [sp, #132]	; 0x84
    58b4:	str	r2, [r3, #56]	; 0x38
    58b8:	ldr	r2, [sp, #136]	; 0x88
    58bc:	str	r2, [r3, #60]	; 0x3c
    58c0:	add	sp, sp, #812	; 0x32c
    58c4:	ldrd	r4, [sp]
    58c8:	ldrd	r6, [sp, #8]
    58cc:	ldrd	r8, [sp, #16]
    58d0:	ldrd	sl, [sp, #24]
    58d4:	add	sp, sp, #32
    58d8:	pop	{pc}		; (ldr pc, [sp], #4)
    58dc:	.word	0x00010ce8

000058e0 <MD5Transform>:
    58e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    58e4:	movw	r2, #42104	; 0xa478
    58e8:	movt	r2, #55146	; 0xd76a
    58ec:	ldm	r0, {r4, ip}
    58f0:	movw	r5, #38145	; 0x9501
    58f4:	movt	r5, #64838	; 0xfd46
    58f8:	ldr	r3, [r0, #8]
    58fc:	strd	r6, [sp, #8]
    5900:	movw	r7, #28891	; 0x70db
    5904:	movt	r7, #9248	; 0x2420
    5908:	strd	r8, [sp, #16]
    590c:	movw	r8, #46934	; 0xb756
    5910:	movt	r8, #59591	; 0xe8c7
    5914:	strd	sl, [sp, #24]
    5918:	movw	r6, #52974	; 0xceee
    591c:	movt	r6, #49597	; 0xc1bd
    5920:	str	lr, [sp, #32]
    5924:	sub	sp, sp, #148	; 0x94
    5928:	movw	sl, #50730	; 0xc62a
    592c:	movt	sl, #18311	; 0x4787
    5930:	ldr	fp, [r1]
    5934:	movw	r9, #17939	; 0x4613
    5938:	movt	r9, #43056	; 0xa830
    593c:	str	ip, [sp]
    5940:	ldr	lr, [r0, #12]
    5944:	str	r4, [sp, #64]	; 0x40
    5948:	ldr	r4, [r1, #8]
    594c:	str	r3, [sp, #24]
    5950:	str	fp, [sp, #60]	; 0x3c
    5954:	movw	fp, #4015	; 0xfaf
    5958:	movt	fp, #62844	; 0xf57c
    595c:	eor	r3, r3, lr
    5960:	and	r3, r3, ip
    5964:	str	r0, [sp, #68]	; 0x44
    5968:	movw	r0, #39128	; 0x98d8
    596c:	movt	r0, #27008	; 0x6980
    5970:	str	lr, [sp, #56]	; 0x38
    5974:	ldr	lr, [sp, #60]	; 0x3c
    5978:	str	r4, [sp, #8]
    597c:	movw	r4, #55230	; 0xd7be
    5980:	movt	r4, #35164	; 0x895c
    5984:	str	r0, [sp, #40]	; 0x28
    5988:	ldr	r0, [sp, #24]
    598c:	str	r4, [sp, #52]	; 0x34
    5990:	add	r2, lr, r2
    5994:	ldr	lr, [r1, #4]
    5998:	ldr	r4, [sp, #64]	; 0x40
    599c:	eor	r0, ip, r0
    59a0:	ldr	ip, [sp, #56]	; 0x38
    59a4:	str	lr, [sp, #4]
    59a8:	movw	lr, #63407	; 0xf7af
    59ac:	movt	lr, #35652	; 0x8b44
    59b0:	add	r2, r2, r4
    59b4:	ldr	r4, [sp, #4]
    59b8:	eor	r3, r3, ip
    59bc:	add	r3, r3, r2
    59c0:	ldr	r2, [r1, #12]
    59c4:	add	r8, r4, r8
    59c8:	add	r8, r8, ip
    59cc:	ldr	ip, [r1, #16]
    59d0:	str	r2, [sp, #12]
    59d4:	movw	r2, #4386	; 0x1122
    59d8:	movt	r2, #27536	; 0x6b90
    59dc:	str	r2, [sp, #72]	; 0x48
    59e0:	ldr	r2, [sp]
    59e4:	str	ip, [sp, #16]
    59e8:	movw	ip, #29075	; 0x7193
    59ec:	movt	ip, #64920	; 0xfd98
    59f0:	ldr	r4, [r1, #20]
    59f4:	add	r3, r2, r3, ror #25
    59f8:	str	ip, [sp, #76]	; 0x4c
    59fc:	and	r0, r0, r3
    5a00:	eor	r2, r2, r3
    5a04:	ldr	ip, [sp, #24]
    5a08:	str	r4, [sp, #20]
    5a0c:	ldr	r4, [sp, #12]
    5a10:	eor	r0, r0, ip
    5a14:	add	r0, r0, r8
    5a18:	ldr	r8, [sp, #8]
    5a1c:	add	r6, r4, r6
    5a20:	add	r0, r3, r0, ror #20
    5a24:	ldr	r4, [sp, #16]
    5a28:	and	r2, r2, r0
    5a2c:	add	r7, r8, r7
    5a30:	ldr	r8, [sp]
    5a34:	add	r7, r7, ip
    5a38:	add	fp, r4, fp
    5a3c:	ldr	r4, [sp, #20]
    5a40:	add	fp, fp, r3
    5a44:	ldr	ip, [r1, #24]
    5a48:	eor	r2, r2, r8
    5a4c:	add	r6, r6, r8
    5a50:	ldr	r8, [r1, #28]
    5a54:	add	r7, r2, r7
    5a58:	add	r7, r0, r7, ror #15
    5a5c:	add	sl, r4, sl
    5a60:	add	sl, sl, r0
    5a64:	eor	r2, r0, r7
    5a68:	add	r9, ip, r9
    5a6c:	str	ip, [sp, #28]
    5a70:	add	r9, r9, r7
    5a74:	mov	r4, r8
    5a78:	eor	r8, r3, r0
    5a7c:	and	r8, r8, r7
    5a80:	add	r5, r4, r5
    5a84:	eor	r8, r8, r3
    5a88:	ldr	r3, [r1, #32]
    5a8c:	add	r6, r8, r6
    5a90:	str	r4, [sp, #32]
    5a94:	add	r6, r7, r6, ror #10
    5a98:	ldr	r8, [r1, #36]	; 0x24
    5a9c:	and	r2, r2, r6
    5aa0:	add	r5, r5, r6
    5aa4:	eor	r0, r0, r2
    5aa8:	ldr	r2, [sp, #40]	; 0x28
    5aac:	add	fp, r0, fp
    5ab0:	str	r3, [sp, #36]	; 0x24
    5ab4:	add	fp, r6, fp, ror #25
    5ab8:	ldr	r0, [r1, #40]	; 0x28
    5abc:	add	lr, r8, lr
    5ac0:	str	r8, [sp, #40]	; 0x28
    5ac4:	ldr	r8, [r1, #48]	; 0x30
    5ac8:	add	ip, r3, r2
    5acc:	eor	r3, r7, r6
    5ad0:	and	r3, r3, fp
    5ad4:	eor	r2, r6, fp
    5ad8:	eor	r7, r7, r3
    5adc:	add	r4, ip, fp
    5ae0:	str	r0, [sp, #44]	; 0x2c
    5ae4:	add	sl, r7, sl
    5ae8:	sub	r0, r0, #41984	; 0xa400
    5aec:	add	sl, fp, sl, ror #20
    5af0:	sub	r0, r0, #79	; 0x4f
    5af4:	and	r2, r2, sl
    5af8:	eor	r3, fp, sl
    5afc:	eor	r6, r6, r2
    5b00:	add	lr, lr, sl
    5b04:	add	r9, r6, r9
    5b08:	ldr	r6, [r1, #44]	; 0x2c
    5b0c:	add	r9, sl, r9, ror #15
    5b10:	and	r3, r3, r9
    5b14:	eor	r2, sl, r9
    5b18:	eor	fp, fp, r3
    5b1c:	ldr	r3, [sp, #52]	; 0x34
    5b20:	add	r0, r0, r9
    5b24:	add	r5, fp, r5
    5b28:	str	r6, [sp, #48]	; 0x30
    5b2c:	movw	fp, #17294	; 0x438e
    5b30:	movt	fp, #42617	; 0xa679
    5b34:	add	r5, r9, r5, ror #10
    5b38:	and	r2, r2, r5
    5b3c:	eor	sl, sl, r2
    5b40:	add	r3, r6, r3
    5b44:	add	r4, sl, r4
    5b48:	add	ip, r3, r5
    5b4c:	ldr	sl, [sp, #72]	; 0x48
    5b50:	add	r4, r5, r4, ror #25
    5b54:	eor	r3, r9, r5
    5b58:	and	r3, r3, r4
    5b5c:	eor	r2, r5, r4
    5b60:	eor	r9, r9, r3
    5b64:	ldr	r3, [r1, #56]	; 0x38
    5b68:	add	lr, r9, lr
    5b6c:	add	sl, r8, sl
    5b70:	add	lr, r4, lr, ror #20
    5b74:	mov	r6, sl
    5b78:	ldr	sl, [r1, #52]	; 0x34
    5b7c:	add	r7, r6, r4
    5b80:	and	r2, r2, lr
    5b84:	ldr	r9, [sp, #76]	; 0x4c
    5b88:	eor	r5, r5, r2
    5b8c:	eor	r2, r4, lr
    5b90:	add	r0, r5, r0
    5b94:	ldr	r6, [r1, #60]	; 0x3c
    5b98:	add	fp, r3, fp
    5b9c:	add	r0, lr, r0, ror #15
    5ba0:	movw	r5, #45888	; 0xb340
    5ba4:	movt	r5, #49216	; 0xc040
    5ba8:	str	sl, [sp, #52]	; 0x34
    5bac:	and	r2, r2, r0
    5bb0:	add	r9, sl, r9
    5bb4:	eor	r4, r4, r2
    5bb8:	eor	r2, lr, r0
    5bbc:	add	ip, r4, ip
    5bc0:	add	r9, r9, lr
    5bc4:	ldr	r4, [sp, #4]
    5bc8:	add	ip, r0, ip, ror #10
    5bcc:	add	fp, fp, r0
    5bd0:	movw	sl, #2081	; 0x821
    5bd4:	movt	sl, #18868	; 0x49b4
    5bd8:	and	r2, r2, ip
    5bdc:	eor	r1, r0, ip
    5be0:	eor	lr, lr, r2
    5be4:	movw	r2, #9570	; 0x2562
    5be8:	movt	r2, #63006	; 0xf61e
    5bec:	add	r7, lr, r7
    5bf0:	ldr	lr, [sp, #28]
    5bf4:	add	r7, ip, r7, ror #25
    5bf8:	add	r2, r4, r2
    5bfc:	add	sl, r6, sl
    5c00:	add	sl, sl, ip
    5c04:	movw	r4, #23121	; 0x5a51
    5c08:	movt	r4, #9822	; 0x265e
    5c0c:	and	r1, r1, r7
    5c10:	eor	r0, r0, r1
    5c14:	eor	r1, ip, r7
    5c18:	add	r9, r0, r9
    5c1c:	add	r5, lr, r5
    5c20:	add	r9, r7, r9, ror #20
    5c24:	add	r2, r2, r7
    5c28:	and	r1, r1, r9
    5c2c:	eor	lr, r7, r9
    5c30:	eor	r1, r1, ip
    5c34:	add	r5, r5, r9
    5c38:	add	r1, r1, fp
    5c3c:	ldr	fp, [sp, #48]	; 0x30
    5c40:	add	r1, r9, r1, ror #15
    5c44:	and	lr, lr, r1
    5c48:	eor	r7, r7, lr
    5c4c:	movw	lr, #51114	; 0xc7aa
    5c50:	movt	lr, #59830	; 0xe9b6
    5c54:	add	sl, r7, sl
    5c58:	add	sl, r1, sl, ror #10
    5c5c:	add	r4, fp, r4
    5c60:	ldr	fp, [sp, #60]	; 0x3c
    5c64:	add	r4, r4, r1
    5c68:	movw	r7, #64456	; 0xfbc8
    5c6c:	movt	r7, #59347	; 0xe7d3
    5c70:	eor	r0, r1, sl
    5c74:	and	r9, r9, r0
    5c78:	eor	r9, r9, r1
    5c7c:	add	ip, r9, r2
    5c80:	ldr	r2, [sp, #20]
    5c84:	movw	r9, #4189	; 0x105d
    5c88:	movt	r9, #54831	; 0xd62f
    5c8c:	add	ip, sl, ip, ror #27
    5c90:	add	lr, fp, lr
    5c94:	add	lr, lr, sl
    5c98:	movw	fp, #5203	; 0x1453
    5c9c:	movt	fp, #580	; 0x244
    5ca0:	eor	r0, sl, ip
    5ca4:	and	r0, r0, r1
    5ca8:	ldr	r1, [sp, #44]	; 0x2c
    5cac:	eor	r0, r0, sl
    5cb0:	add	r9, r2, r9
    5cb4:	add	r5, r0, r5
    5cb8:	add	r9, r9, ip
    5cbc:	add	r5, ip, r5, ror #23
    5cc0:	eor	r2, ip, r5
    5cc4:	add	fp, r1, fp
    5cc8:	and	sl, sl, r2
    5ccc:	add	fp, fp, r5
    5cd0:	eor	sl, sl, ip
    5cd4:	add	r0, sl, r4
    5cd8:	movw	r4, #59009	; 0xe681
    5cdc:	movt	r4, #55457	; 0xd8a1
    5ce0:	add	r0, r5, r0, ror #18
    5ce4:	ldr	sl, [sp, #16]
    5ce8:	add	r4, r6, r4
    5cec:	eor	r2, r5, r0
    5cf0:	add	r4, r4, r0
    5cf4:	and	r2, r2, ip
    5cf8:	eor	r2, r2, r5
    5cfc:	add	lr, r2, lr
    5d00:	add	r7, sl, r7
    5d04:	ldr	sl, [sp, #12]
    5d08:	add	lr, r0, lr, ror #12
    5d0c:	eor	r2, r0, lr
    5d10:	add	r7, r7, lr
    5d14:	and	r2, r2, r5
    5d18:	movw	r5, #52710	; 0xcde6
    5d1c:	movt	r5, #8673	; 0x21e1
    5d20:	eor	r2, r2, r0
    5d24:	add	r2, r2, r9
    5d28:	ldr	r9, [sp, #40]	; 0x28
    5d2c:	add	r2, lr, r2, ror #27
    5d30:	eor	r1, lr, r2
    5d34:	and	r1, r1, r0
    5d38:	eor	r1, r1, lr
    5d3c:	add	r5, r9, r5
    5d40:	add	fp, r1, fp
    5d44:	add	r5, r5, r2
    5d48:	add	fp, r2, fp, ror #23
    5d4c:	movw	r9, #2006	; 0x7d6
    5d50:	movt	r9, #49975	; 0xc337
    5d54:	add	r9, r3, r9
    5d58:	eor	r1, r2, fp
    5d5c:	add	r9, r9, fp
    5d60:	and	r1, r1, lr
    5d64:	movw	lr, #3463	; 0xd87
    5d68:	movt	lr, #62677	; 0xf4d5
    5d6c:	eor	r1, r1, r2
    5d70:	add	r1, r1, r4
    5d74:	movw	r4, #5357	; 0x14ed
    5d78:	movt	r4, #17754	; 0x455a
    5d7c:	add	r1, fp, r1, ror #18
    5d80:	add	lr, sl, lr
    5d84:	ldr	sl, [sp, #52]	; 0x34
    5d88:	eor	ip, fp, r1
    5d8c:	add	lr, lr, r1
    5d90:	and	ip, ip, r2
    5d94:	ldr	r2, [sp, #36]	; 0x24
    5d98:	eor	ip, ip, fp
    5d9c:	add	r7, ip, r7
    5da0:	add	r7, r1, r7, ror #12
    5da4:	add	r4, r2, r4
    5da8:	eor	r2, r1, r7
    5dac:	and	fp, fp, r2
    5db0:	ldr	r2, [sp, #8]
    5db4:	add	r4, r4, r7
    5db8:	eor	fp, fp, r1
    5dbc:	add	ip, fp, r5
    5dc0:	movw	r5, #59653	; 0xe905
    5dc4:	movt	r5, #43491	; 0xa9e3
    5dc8:	add	ip, r7, ip, ror #27
    5dcc:	movw	fp, #53161	; 0xcfa9
    5dd0:	movt	fp, #19422	; 0x4bde
    5dd4:	add	r5, sl, r5
    5dd8:	eor	r0, r7, ip
    5ddc:	movw	sl, #41976	; 0xa3f8
    5de0:	movt	sl, #64751	; 0xfcef
    5de4:	and	r0, r0, r1
    5de8:	ldr	r1, [sp, #32]
    5dec:	eor	r0, r0, r7
    5df0:	add	sl, r2, sl
    5df4:	add	r9, r0, r9
    5df8:	add	r5, r5, ip
    5dfc:	add	r9, ip, r9, ror #23
    5e00:	eor	r2, ip, r9
    5e04:	add	sl, sl, r9
    5e08:	and	r7, r7, r2
    5e0c:	eor	r7, r7, ip
    5e10:	add	r0, r7, lr
    5e14:	movw	lr, #729	; 0x2d9
    5e18:	movt	lr, #26479	; 0x676f
    5e1c:	add	r0, r9, r0, ror #18
    5e20:	movw	r7, #19594	; 0x4c8a
    5e24:	movt	r7, #36138	; 0x8d2a
    5e28:	add	lr, r1, lr
    5e2c:	eor	r2, r9, r0
    5e30:	add	lr, lr, r0
    5e34:	and	r2, r2, ip
    5e38:	add	r7, r8, r7
    5e3c:	eor	r2, r2, r9
    5e40:	movw	ip, #14658	; 0x3942
    5e44:	movt	ip, #65530	; 0xfffa
    5e48:	add	r4, r2, r4
    5e4c:	add	r4, r0, r4, ror #12
    5e50:	eor	r2, r0, r4
    5e54:	add	r7, r7, r4
    5e58:	and	r2, r2, r9
    5e5c:	ldr	r9, [sp, #20]
    5e60:	eor	r2, r2, r0
    5e64:	add	r2, r2, r5
    5e68:	ldr	r5, [sp, #36]	; 0x24
    5e6c:	add	r2, r4, r2, ror #27
    5e70:	eor	r1, r4, r2
    5e74:	add	ip, r9, ip
    5e78:	and	r1, r1, r0
    5e7c:	add	ip, ip, r2
    5e80:	eor	r1, r1, r4
    5e84:	movw	r0, #63105	; 0xf681
    5e88:	movt	r0, #34673	; 0x8771
    5e8c:	add	sl, r1, sl
    5e90:	add	sl, r2, sl, ror #23
    5e94:	add	r0, r5, r0
    5e98:	movw	r5, #14348	; 0x380c
    5e9c:	movt	r5, #64997	; 0xfde5
    5ea0:	eor	r1, r2, sl
    5ea4:	add	r0, r0, sl
    5ea8:	and	r1, r1, r4
    5eac:	movw	r4, #24866	; 0x6122
    5eb0:	movt	r4, #28061	; 0x6d9d
    5eb4:	eor	r1, r1, r2
    5eb8:	add	r1, r1, lr
    5ebc:	ldr	lr, [sp, #48]	; 0x30
    5ec0:	add	r5, r3, r5
    5ec4:	add	r1, sl, r1, ror #18
    5ec8:	add	r4, lr, r4
    5ecc:	eor	lr, sl, r1
    5ed0:	and	r2, r2, lr
    5ed4:	add	r4, r4, r1
    5ed8:	eor	r2, r2, sl
    5edc:	ldr	sl, [sp, #44]	; 0x2c
    5ee0:	add	r7, r2, r7
    5ee4:	add	r7, r1, r7, ror #12
    5ee8:	eor	lr, lr, r7
    5eec:	eor	r1, r1, r7
    5ef0:	add	ip, lr, ip
    5ef4:	add	r9, r5, r7
    5ef8:	ldr	r5, [sp, #4]
    5efc:	add	ip, r7, ip, ror #28
    5f00:	movw	lr, #59972	; 0xea44
    5f04:	movt	lr, #42174	; 0xa4be
    5f08:	eor	r1, r1, ip
    5f0c:	eor	r7, r7, ip
    5f10:	add	r0, r1, r0
    5f14:	ldr	r1, [sp, #16]
    5f18:	add	r0, ip, r0, ror #21
    5f1c:	add	lr, r5, lr
    5f20:	movw	r5, #19296	; 0x4b60
    5f24:	movt	r5, #63163	; 0xf6bb
    5f28:	add	lr, lr, ip
    5f2c:	eor	r7, r7, r0
    5f30:	eor	ip, ip, r0
    5f34:	add	fp, r1, fp
    5f38:	add	r1, r7, r4
    5f3c:	ldr	r4, [sp, #12]
    5f40:	add	r1, r0, r1, ror #16
    5f44:	add	fp, fp, r0
    5f48:	ldr	r7, [sp, #32]
    5f4c:	eor	r2, ip, r1
    5f50:	eor	r0, r0, r1
    5f54:	add	r2, r2, r9
    5f58:	movw	r9, #48240	; 0xbc70
    5f5c:	movt	r9, #48831	; 0xbebf
    5f60:	add	r2, r1, r2, ror #9
    5f64:	add	r9, sl, r9
    5f68:	ldr	sl, [sp, #52]	; 0x34
    5f6c:	eor	r0, r0, r2
    5f70:	add	r5, r7, r5
    5f74:	add	ip, r0, lr
    5f78:	add	r5, r5, r1
    5f7c:	add	ip, r2, ip, ror #28
    5f80:	eor	r1, r1, r2
    5f84:	add	r9, r9, r2
    5f88:	movw	r0, #32454	; 0x7ec6
    5f8c:	movt	r0, #10395	; 0x289b
    5f90:	eor	r1, r1, ip
    5f94:	eor	r2, r2, ip
    5f98:	add	r1, r1, fp
    5f9c:	add	r0, sl, r0
    5fa0:	ldr	fp, [sp, #60]	; 0x3c
    5fa4:	add	r1, ip, r1, ror #21
    5fa8:	add	r0, r0, ip
    5fac:	movw	lr, #10234	; 0x27fa
    5fb0:	movt	lr, #60065	; 0xeaa1
    5fb4:	eor	r2, r2, r1
    5fb8:	eor	ip, ip, r1
    5fbc:	add	sl, r2, r5
    5fc0:	movw	r5, #12421	; 0x3085
    5fc4:	movt	r5, #54511	; 0xd4ef
    5fc8:	add	sl, r1, sl, ror #16
    5fcc:	add	lr, fp, lr
    5fd0:	add	lr, lr, r1
    5fd4:	add	r5, r4, r5
    5fd8:	eor	ip, ip, sl
    5fdc:	eor	r2, r1, sl
    5fe0:	ldr	r1, [sp, #40]	; 0x28
    5fe4:	add	ip, ip, r9
    5fe8:	add	r5, r5, sl
    5fec:	add	ip, sl, ip, ror #9
    5ff0:	ldr	r9, [sp, #28]
    5ff4:	movw	r4, #7429	; 0x1d05
    5ff8:	movt	r4, #1160	; 0x488
    5ffc:	eor	r2, r2, ip
    6000:	eor	sl, sl, ip
    6004:	add	r2, r2, r0
    6008:	movw	r0, #53305	; 0xd039
    600c:	movt	r0, #55764	; 0xd9d4
    6010:	add	r2, ip, r2, ror #28
    6014:	add	r0, r1, r0
    6018:	add	r4, r9, r4
    601c:	eor	r1, sl, r2
    6020:	add	r4, r4, ip
    6024:	add	sl, r1, lr
    6028:	eor	ip, ip, r2
    602c:	add	sl, r2, sl, ror #21
    6030:	movw	lr, #39397	; 0x99e5
    6034:	movt	lr, #59099	; 0xe6db
    6038:	add	lr, r8, lr
    603c:	add	r0, r0, r2
    6040:	eor	ip, ip, sl
    6044:	eor	r1, r2, sl
    6048:	ldr	r2, [sp, #8]
    604c:	add	r7, ip, r5
    6050:	add	lr, lr, sl
    6054:	add	r7, sl, r7, ror #16
    6058:	movw	ip, #31992	; 0x7cf8
    605c:	movt	ip, #8098	; 0x1fa2
    6060:	add	ip, r6, ip
    6064:	movw	r9, #9127	; 0x23a7
    6068:	movt	r9, #43924	; 0xab94
    606c:	eor	r1, r1, r7
    6070:	ldr	r5, [sp, #4]
    6074:	add	r1, r1, r4
    6078:	eor	sl, sl, r7
    607c:	add	r1, r7, r1, ror #9
    6080:	add	ip, ip, r7
    6084:	movw	r4, #22117	; 0x5665
    6088:	movt	r4, #50348	; 0xc4ac
    608c:	add	r9, r3, r9
    6090:	ldr	r3, [sp, #20]
    6094:	eor	sl, sl, r1
    6098:	eor	r7, r7, r1
    609c:	add	sl, sl, r0
    60a0:	add	r4, r2, r4
    60a4:	add	sl, r1, sl, ror #28
    60a8:	add	r4, r4, r1
    60ac:	movw	r0, #8772	; 0x2244
    60b0:	movt	r0, #62505	; 0xf429
    60b4:	eor	r7, r7, sl
    60b8:	eor	r1, r1, sl
    60bc:	add	r7, r7, lr
    60c0:	add	r0, fp, r0
    60c4:	ldr	lr, [sp, #32]
    60c8:	add	r7, sl, r7, ror #21
    60cc:	add	r0, r0, sl
    60d0:	movw	fp, #65431	; 0xff97
    60d4:	movt	fp, #17194	; 0x432a
    60d8:	eor	r2, r1, r7
    60dc:	eor	sl, sl, r7
    60e0:	add	r2, r2, ip
    60e4:	mvn	ip, r7
    60e8:	add	r2, r7, r2, ror #16
    60ec:	add	fp, lr, fp
    60f0:	movw	lr, #41017	; 0xa039
    60f4:	movt	lr, #64659	; 0xfc93
    60f8:	add	fp, fp, r7
    60fc:	ldr	r7, [sp, #12]
    6100:	eor	sl, sl, r2
    6104:	mvn	r1, r2
    6108:	add	sl, sl, r4
    610c:	add	r9, r9, r2
    6110:	add	sl, r2, sl, ror #9
    6114:	movw	r4, #52370	; 0xcc92
    6118:	movt	r4, #36620	; 0x8f0c
    611c:	add	lr, r3, lr
    6120:	movw	r3, #22979	; 0x59c3
    6124:	movt	r3, #25947	; 0x655b
    6128:	orr	ip, ip, sl
    612c:	eor	r2, r2, ip
    6130:	add	r4, r7, r4
    6134:	add	r2, r2, r0
    6138:	mvn	ip, sl
    613c:	add	r2, sl, r2, ror #26
    6140:	add	lr, lr, sl
    6144:	movw	r0, #62589	; 0xf47d
    6148:	movt	r0, #65519	; 0xffef
    614c:	add	r3, r8, r3
    6150:	orr	r7, r1, r2
    6154:	mvn	r1, r2
    6158:	eor	sl, sl, r7
    615c:	add	r3, r3, r2
    6160:	add	sl, sl, fp
    6164:	ldr	fp, [sp, #44]	; 0x2c
    6168:	movw	r8, #17172	; 0x4314
    616c:	movt	r8, #41729	; 0xa301
    6170:	add	r7, r2, sl, ror #22
    6174:	movw	sl, #32335	; 0x7e4f
    6178:	movt	sl, #28584	; 0x6fa8
    617c:	add	r4, r4, r7
    6180:	add	r0, fp, r0
    6184:	movw	fp, #24017	; 0x5dd1
    6188:	movt	fp, #34180	; 0x8584
    618c:	add	fp, r5, fp
    6190:	orr	r5, ip, r7
    6194:	eor	r5, r5, r2
    6198:	mvn	r2, r7
    619c:	add	r5, r5, r9
    61a0:	ldr	r9, [sp, #36]	; 0x24
    61a4:	add	r5, r7, r5, ror #17
    61a8:	orr	r1, r1, r5
    61ac:	add	r0, r0, r5
    61b0:	eor	r7, r7, r1
    61b4:	mvn	r1, r5
    61b8:	add	lr, r7, lr
    61bc:	add	sl, r9, sl
    61c0:	add	lr, r5, lr, ror #11
    61c4:	movw	r9, #59104	; 0xe6e0
    61c8:	movt	r9, #65068	; 0xfe2c
    61cc:	add	r9, r6, r9
    61d0:	ldr	r6, [sp, #28]
    61d4:	movw	r7, #4513	; 0x11a1
    61d8:	movt	r7, #19976	; 0x4e08
    61dc:	orr	ip, r2, lr
    61e0:	eor	r5, r5, ip
    61e4:	mvn	r2, lr
    61e8:	add	r3, r5, r3
    61ec:	add	fp, fp, lr
    61f0:	add	r3, lr, r3, ror #26
    61f4:	add	r8, r6, r8
    61f8:	ldr	r6, [sp, #52]	; 0x34
    61fc:	orr	ip, r1, r3
    6200:	add	sl, sl, r3
    6204:	eor	ip, ip, lr
    6208:	mvn	r1, r3
    620c:	ldr	r5, [sp, #16]
    6210:	add	ip, ip, r4
    6214:	movw	r4, #53947	; 0xd2bb
    6218:	movt	r4, #10967	; 0x2ad7
    621c:	add	ip, r3, ip, ror #22
    6220:	ldr	lr, [sp, #48]	; 0x30
    6224:	add	r7, r6, r7
    6228:	movw	r6, #32386	; 0x7e82
    622c:	movt	r6, #63315	; 0xf753
    6230:	orr	r2, r2, ip
    6234:	eor	r3, r3, r2
    6238:	mvn	r2, ip
    623c:	add	r0, r3, r0
    6240:	ldr	r3, [sp, #8]
    6244:	add	r6, r5, r6
    6248:	add	r0, ip, r0, ror #17
    624c:	movw	r5, #62005	; 0xf235
    6250:	movt	r5, #48442	; 0xbd3a
    6254:	add	r5, lr, r5
    6258:	movw	lr, #54161	; 0xd391
    625c:	movt	lr, #60294	; 0xeb86
    6260:	orr	r1, r1, r0
    6264:	eor	r1, r1, ip
    6268:	add	r9, r9, ip
    626c:	add	r1, r1, fp
    6270:	add	r4, r3, r4
    6274:	ldr	r3, [sp, #40]	; 0x28
    6278:	add	r1, r0, r1, ror #11
    627c:	add	r8, r8, r0
    6280:	orr	r2, r2, r1
    6284:	mvn	ip, r1
    6288:	eor	r2, r2, r0
    628c:	add	r7, r7, r1
    6290:	add	r2, r2, sl
    6294:	add	lr, r3, lr
    6298:	add	r2, r1, r2, ror #26
    629c:	mvn	r3, r0
    62a0:	orr	r3, r3, r2
    62a4:	mvn	r0, r2
    62a8:	eor	r3, r3, r1
    62ac:	add	r6, r6, r2
    62b0:	add	r3, r3, r9
    62b4:	ldr	r9, [sp, #64]	; 0x40
    62b8:	add	r3, r2, r3, ror #22
    62bc:	orr	ip, ip, r3
    62c0:	mvn	fp, r3
    62c4:	eor	ip, ip, r2
    62c8:	add	r5, r5, r3
    62cc:	add	ip, ip, r8
    62d0:	ldr	r8, [sp]
    62d4:	add	ip, r3, ip, ror #17
    62d8:	orr	r0, r0, ip
    62dc:	mvn	sl, ip
    62e0:	eor	r0, r0, r3
    62e4:	add	r4, r4, ip
    62e8:	add	r0, r0, r7
    62ec:	ldr	r7, [sp, #56]	; 0x38
    62f0:	add	r0, ip, r0, ror #11
    62f4:	orr	fp, fp, r0
    62f8:	mvn	r1, r0
    62fc:	eor	ip, ip, fp
    6300:	add	lr, lr, r0
    6304:	add	r6, ip, r6
    6308:	ldr	ip, [sp, #24]
    630c:	add	r6, r0, r6, ror #26
    6310:	orr	sl, sl, r6
    6314:	add	r3, r9, r6
    6318:	eor	r0, r0, sl
    631c:	mvn	r2, r6
    6320:	add	r5, r0, r5
    6324:	ldr	r0, [sp, #68]	; 0x44
    6328:	add	r5, r6, r5, ror #22
    632c:	orr	r1, r1, r5
    6330:	eor	r6, r6, r1
    6334:	add	r4, r6, r4
    6338:	str	r3, [r0]
    633c:	add	r3, r7, r5
    6340:	add	r4, r5, r4, ror #17
    6344:	str	r3, [r0, #12]
    6348:	orr	r2, r2, r4
    634c:	add	r3, r8, r4
    6350:	eor	r5, r5, r2
    6354:	add	r4, ip, r4
    6358:	add	lr, r5, lr
    635c:	add	r5, r3, lr, ror #11
    6360:	str	r5, [r0, #4]
    6364:	str	r4, [r0, #8]
    6368:	add	sp, sp, #148	; 0x94
    636c:	ldrd	r4, [sp]
    6370:	ldrd	r6, [sp, #8]
    6374:	ldrd	r8, [sp, #16]
    6378:	ldrd	sl, [sp, #24]
    637c:	add	sp, sp, #32
    6380:	pop	{pc}		; (ldr pc, [sp], #4)

00006384 <MD5Update>:
    6384:	lsl	r3, r2, #3
    6388:	strd	r4, [sp, #-32]!	; 0xffffffe0
    638c:	mov	r5, r0
    6390:	strd	r6, [sp, #8]
    6394:	mov	r6, r2
    6398:	mov	r7, r1
    639c:	ldr	r2, [r0, #16]
    63a0:	strd	r8, [sp, #16]
    63a4:	ldr	r1, [r0, #20]
    63a8:	str	sl, [sp, #24]
    63ac:	str	lr, [sp, #28]
    63b0:	adds	r3, r2, r3
    63b4:	ubfx	r8, r2, #3, #6
    63b8:	addcs	r1, r1, #1
    63bc:	rsb	r4, r8, #64	; 0x40
    63c0:	str	r3, [r0, #16]
    63c4:	add	r1, r1, r6, lsr #29
    63c8:	add	r9, r8, #24
    63cc:	cmp	r6, r4
    63d0:	add	r9, r0, r9
    63d4:	str	r1, [r0, #20]
    63d8:	bcs	6404 <MD5Update+0x80>
    63dc:	mov	r2, r6
    63e0:	mov	r1, r7
    63e4:	ldrd	r4, [sp]
    63e8:	mov	r0, r9
    63ec:	ldrd	r6, [sp, #8]
    63f0:	ldrd	r8, [sp, #16]
    63f4:	ldr	sl, [sp, #24]
    63f8:	ldr	lr, [sp, #28]
    63fc:	add	sp, sp, #32
    6400:	b	47e8 <memcpy@plt>
    6404:	mov	r2, r4
    6408:	mov	r1, r7
    640c:	mov	r0, r9
    6410:	add	r9, r5, #24
    6414:	bl	47e8 <memcpy@plt>
    6418:	mov	r1, r9
    641c:	mov	r0, r5
    6420:	bl	58e0 <MD5Transform>
    6424:	rsb	r3, r8, #127	; 0x7f
    6428:	cmp	r6, r3
    642c:	subls	r2, r8, #64	; 0x40
    6430:	addls	r7, r7, r4
    6434:	addls	r6, r6, r2
    6438:	bls	63dc <MD5Update+0x58>
    643c:	add	r1, r7, r4
    6440:	mov	r0, r5
    6444:	bl	58e0 <MD5Transform>
    6448:	add	r3, r4, #127	; 0x7f
    644c:	add	r4, r4, #64	; 0x40
    6450:	cmp	r6, r3
    6454:	bhi	643c <MD5Update+0xb8>
    6458:	add	r7, r7, r4
    645c:	sub	r6, r6, r4
    6460:	b	63dc <MD5Update+0x58>

00006464 <MD5Final>:
    6464:	strd	r4, [sp, #-20]!	; 0xffffffec
    6468:	mov	r4, r1
    646c:	mov	r5, r0
    6470:	ldr	r2, [r1, #16]
    6474:	strd	r6, [sp, #8]
    6478:	str	lr, [sp, #16]
    647c:	sub	sp, sp, #12
    6480:	ldrd	r0, [r1, #16]
    6484:	ubfx	r2, r2, #3, #6
    6488:	cmp	r2, #55	; 0x37
    648c:	strd	r0, [sp]
    6490:	rsbls	r2, r2, #56	; 0x38
    6494:	rsbhi	r2, r2, #120	; 0x78
    6498:	ldr	r1, [pc, #76]	; 64ec <MD5Final+0x88>
    649c:	mov	r0, r4
    64a0:	add	r1, pc, r1
    64a4:	bl	6384 <MD5Update>
    64a8:	mov	r1, sp
    64ac:	mov	r0, r4
    64b0:	mov	r2, #8
    64b4:	bl	6384 <MD5Update>
    64b8:	ldrd	r6, [r4]
    64bc:	mov	r0, r4
    64c0:	mov	r2, #88	; 0x58
    64c4:	mov	r1, #0
    64c8:	strd	r6, [r5]
    64cc:	ldrd	r6, [r4, #8]
    64d0:	strd	r6, [r5, #8]
    64d4:	add	sp, sp, #12
    64d8:	ldrd	r4, [sp]
    64dc:	ldrd	r6, [sp, #8]
    64e0:	ldr	lr, [sp, #16]
    64e4:	add	sp, sp, #20
    64e8:	b	4608 <memset@plt>
    64ec:	.word	0x00022f7c

000064f0 <rb_sha256_process_bytes>:
    64f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    64f4:	mov	r5, r2
    64f8:	mov	r4, r0
    64fc:	strd	r6, [sp, #8]
    6500:	mov	r6, r1
    6504:	ldr	r7, [r2, #40]	; 0x28
    6508:	strd	r8, [sp, #16]
    650c:	str	sl, [sp, #24]
    6510:	str	lr, [sp, #28]
    6514:	cmp	r7, #0
    6518:	bne	660c <rb_sha256_process_bytes+0x11c>
    651c:	cmp	r6, #63	; 0x3f
    6520:	bls	65ec <rb_sha256_process_bytes+0xfc>
    6524:	tst	r4, #3
    6528:	beq	65d4 <rb_sha256_process_bytes+0xe4>
    652c:	cmp	r6, #64	; 0x40
    6530:	beq	66b8 <rb_sha256_process_bytes+0x1c8>
    6534:	sub	r8, r6, #65	; 0x41
    6538:	add	r9, r5, #44	; 0x2c
    653c:	lsr	r8, r8, #6
    6540:	add	r7, r8, #1
    6544:	add	r7, r4, r7, lsl #6
    6548:	mov	r3, r4
    654c:	mov	r2, r9
    6550:	add	r4, r4, #64	; 0x40
    6554:	ldr	lr, [r3]
    6558:	add	r3, r3, #16
    655c:	add	r2, r2, #16
    6560:	ldr	ip, [r3, #-12]
    6564:	ldr	r0, [r3, #-8]
    6568:	ldr	r1, [r3, #-4]
    656c:	cmp	r3, r4
    6570:	str	lr, [r2, #-16]
    6574:	str	ip, [r2, #-12]
    6578:	str	r0, [r2, #-8]
    657c:	str	r1, [r2, #-4]
    6580:	bne	6554 <rb_sha256_process_bytes+0x64>
    6584:	mov	r4, r3
    6588:	mov	r2, r5
    658c:	mov	r1, #64	; 0x40
    6590:	mov	r0, r9
    6594:	bl	4fd8 <rb_sha256_process_block>
    6598:	cmp	r4, r7
    659c:	bne	6548 <rb_sha256_process_bytes+0x58>
    65a0:	sub	r6, r6, #64	; 0x40
    65a4:	sub	r6, r6, r8, lsl #6
    65a8:	ldr	r4, [r5, #40]	; 0x28
    65ac:	mov	r1, r7
    65b0:	mov	r2, r6
    65b4:	add	r0, r4, #44	; 0x2c
    65b8:	add	r4, r4, r6
    65bc:	add	r0, r5, r0
    65c0:	bl	47e8 <memcpy@plt>
    65c4:	cmp	r4, #63	; 0x3f
    65c8:	bhi	664c <rb_sha256_process_bytes+0x15c>
    65cc:	str	r4, [r5, #40]	; 0x28
    65d0:	b	65f4 <rb_sha256_process_bytes+0x104>
    65d4:	bic	r1, r6, #63	; 0x3f
    65d8:	mov	r0, r4
    65dc:	mov	r2, r5
    65e0:	and	r6, r6, #63	; 0x3f
    65e4:	add	r4, r4, r1
    65e8:	bl	4fd8 <rb_sha256_process_block>
    65ec:	cmp	r6, #0
    65f0:	bne	66b8 <rb_sha256_process_bytes+0x1c8>
    65f4:	ldrd	r4, [sp]
    65f8:	ldrd	r6, [sp, #8]
    65fc:	ldrd	r8, [sp, #16]
    6600:	ldr	sl, [sp, #24]
    6604:	add	sp, sp, #28
    6608:	pop	{pc}		; (ldr pc, [sp], #4)
    660c:	rsb	r8, r7, #128	; 0x80
    6610:	add	r0, r7, #44	; 0x2c
    6614:	cmp	r8, r1
    6618:	add	r0, r2, r0
    661c:	movcs	r8, r1
    6620:	mov	r1, r4
    6624:	mov	r2, r8
    6628:	bl	47e8 <memcpy@plt>
    662c:	ldr	r1, [r5, #40]	; 0x28
    6630:	add	r1, r8, r1
    6634:	cmp	r1, #64	; 0x40
    6638:	str	r1, [r5, #40]	; 0x28
    663c:	bhi	6678 <rb_sha256_process_bytes+0x188>
    6640:	add	r4, r4, r8
    6644:	sub	r6, r6, r8
    6648:	b	651c <rb_sha256_process_bytes+0x2c>
    664c:	add	r6, r5, #44	; 0x2c
    6650:	mov	r2, r5
    6654:	mov	r0, r6
    6658:	sub	r4, r4, #64	; 0x40
    665c:	mov	r1, #64	; 0x40
    6660:	bl	4fd8 <rb_sha256_process_block>
    6664:	mov	r0, r6
    6668:	mov	r2, r4
    666c:	add	r1, r5, #108	; 0x6c
    6670:	bl	47e8 <memcpy@plt>
    6674:	b	65cc <rb_sha256_process_bytes+0xdc>
    6678:	add	r9, r5, #44	; 0x2c
    667c:	mov	r2, r5
    6680:	mov	r0, r9
    6684:	bic	r1, r1, #63	; 0x3f
    6688:	bl	4fd8 <rb_sha256_process_block>
    668c:	ldr	r3, [r5, #40]	; 0x28
    6690:	add	r1, r7, r8
    6694:	mov	r0, r9
    6698:	bic	r1, r1, #63	; 0x3f
    669c:	add	r1, r1, #44	; 0x2c
    66a0:	add	r1, r5, r1
    66a4:	and	r3, r3, #63	; 0x3f
    66a8:	mov	r2, r3
    66ac:	str	r3, [r5, #40]	; 0x28
    66b0:	bl	47e8 <memcpy@plt>
    66b4:	b	6640 <rb_sha256_process_bytes+0x150>
    66b8:	mov	r7, r4
    66bc:	b	65a8 <rb_sha256_process_bytes+0xb8>

000066c0 <rb_sha256_finish_ctx>:
    66c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
    66c4:	mov	r4, r0
    66c8:	mov	r5, r1
    66cc:	ldr	r3, [r0, #32]
    66d0:	ldr	r0, [r0, #40]	; 0x28
    66d4:	strd	r6, [sp, #8]
    66d8:	str	r8, [sp, #16]
    66dc:	str	lr, [sp, #20]
    66e0:	adds	r3, r3, r0
    66e4:	str	r3, [r4, #32]
    66e8:	bcc	66f8 <rb_sha256_finish_ctx+0x38>
    66ec:	ldr	r3, [r4, #36]	; 0x24
    66f0:	add	r3, r3, #1
    66f4:	str	r3, [r4, #36]	; 0x24
    66f8:	cmp	r0, #55	; 0x37
    66fc:	bls	67ac <rb_sha256_finish_ctx+0xec>
    6700:	rsb	r2, r0, #120	; 0x78
    6704:	mov	r6, #164	; 0xa4
    6708:	mov	r7, #168	; 0xa8
    670c:	mov	r8, #128	; 0x80
    6710:	ldr	r1, [pc, #168]	; 67c0 <rb_sha256_finish_ctx+0x100>
    6714:	add	r0, r0, #44	; 0x2c
    6718:	add	r0, r4, r0
    671c:	add	r1, pc, r1
    6720:	add	r1, r1, #896	; 0x380
    6724:	bl	47e8 <memcpy@plt>
    6728:	ldr	r3, [r4, #32]
    672c:	mov	r2, r4
    6730:	mov	r1, r8
    6734:	add	r0, r4, #44	; 0x2c
    6738:	lsl	ip, r3, #11
    673c:	lsl	lr, r3, #3
    6740:	and	ip, ip, #16711680	; 0xff0000
    6744:	orr	ip, ip, lr, lsr #24
    6748:	lsr	lr, lr, #8
    674c:	orr	ip, ip, r3, lsl #27
    6750:	and	lr, lr, #65280	; 0xff00
    6754:	lsr	r3, r3, #29
    6758:	orr	ip, ip, lr
    675c:	str	ip, [r4, r7]
    6760:	ldr	ip, [r4, #36]	; 0x24
    6764:	orr	r3, r3, ip, lsl #3
    6768:	rev	r3, r3
    676c:	str	r3, [r4, r6]
    6770:	bl	4fd8 <rb_sha256_process_block>
    6774:	sub	r2, r4, #4
    6778:	sub	r1, r5, #4
    677c:	add	r4, r4, #28
    6780:	ldr	r3, [r2, #4]!
    6784:	rev	r3, r3
    6788:	cmp	r2, r4
    678c:	str	r3, [r1, #4]!
    6790:	bne	6780 <rb_sha256_finish_ctx+0xc0>
    6794:	mov	r0, r5
    6798:	ldrd	r4, [sp]
    679c:	ldrd	r6, [sp, #8]
    67a0:	ldr	r8, [sp, #16]
    67a4:	add	sp, sp, #20
    67a8:	pop	{pc}		; (ldr pc, [sp], #4)
    67ac:	rsb	r2, r0, #56	; 0x38
    67b0:	mov	r6, #100	; 0x64
    67b4:	mov	r7, #104	; 0x68
    67b8:	mov	r8, #64	; 0x40
    67bc:	b	6710 <rb_sha256_finish_ctx+0x50>
    67c0:	.word	0x0000f98c

000067c4 <rb_sha512_process_bytes>:
    67c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
    67c8:	mov	r5, r2
    67cc:	mov	r4, r0
    67d0:	strd	r6, [sp, #8]
    67d4:	mov	r6, r1
    67d8:	strd	sl, [sp, #24]
    67dc:	ldrd	sl, [r2, #80]	; 0x50
    67e0:	strd	r8, [sp, #16]
    67e4:	str	lr, [sp, #32]
    67e8:	sub	sp, sp, #4
    67ec:	orrs	r3, sl, fp
    67f0:	bne	68c0 <rb_sha512_process_bytes+0xfc>
    67f4:	cmp	r6, #127	; 0x7f
    67f8:	bls	689c <rb_sha512_process_bytes+0xd8>
    67fc:	tst	r4, #7
    6800:	beq	6884 <rb_sha512_process_bytes+0xc0>
    6804:	cmp	r6, #128	; 0x80
    6808:	beq	697c <rb_sha512_process_bytes+0x1b8>
    680c:	sub	r9, r6, #129	; 0x81
    6810:	add	r8, r5, #88	; 0x58
    6814:	lsr	r9, r9, #7
    6818:	add	r7, r9, #1
    681c:	add	r7, r4, r7, lsl #7
    6820:	mov	r2, #128	; 0x80
    6824:	mov	r1, r4
    6828:	mov	r0, r8
    682c:	add	r4, r4, r2
    6830:	bl	47e8 <memcpy@plt>
    6834:	mov	r2, r5
    6838:	mov	r1, #128	; 0x80
    683c:	bl	52bc <rb_sha512_process_block>
    6840:	cmp	r4, r7
    6844:	bne	6820 <rb_sha512_process_bytes+0x5c>
    6848:	sub	r6, r6, #128	; 0x80
    684c:	sub	r6, r6, r9, lsl #7
    6850:	ldr	r4, [r5, #80]	; 0x50
    6854:	mov	r1, r7
    6858:	mov	r2, r6
    685c:	add	r0, r4, #88	; 0x58
    6860:	add	r4, r4, r6
    6864:	add	r0, r5, r0
    6868:	bl	47e8 <memcpy@plt>
    686c:	cmp	r4, #127	; 0x7f
    6870:	bhi	6908 <rb_sha512_process_bytes+0x144>
    6874:	mov	r3, #0
    6878:	str	r4, [r5, #80]	; 0x50
    687c:	str	r3, [r5, #84]	; 0x54
    6880:	b	68a4 <rb_sha512_process_bytes+0xe0>
    6884:	bic	r1, r6, #127	; 0x7f
    6888:	mov	r0, r4
    688c:	mov	r2, r5
    6890:	and	r6, r6, #127	; 0x7f
    6894:	add	r4, r4, r1
    6898:	bl	52bc <rb_sha512_process_block>
    689c:	cmp	r6, #0
    68a0:	bne	697c <rb_sha512_process_bytes+0x1b8>
    68a4:	add	sp, sp, #4
    68a8:	ldrd	r4, [sp]
    68ac:	ldrd	r6, [sp, #8]
    68b0:	ldrd	r8, [sp, #16]
    68b4:	ldrd	sl, [sp, #24]
    68b8:	add	sp, sp, #32
    68bc:	pop	{pc}		; (ldr pc, [sp], #4)
    68c0:	rsb	r7, sl, #256	; 0x100
    68c4:	add	r0, sl, #88	; 0x58
    68c8:	cmp	r7, r1
    68cc:	add	r0, r2, r0
    68d0:	movcs	r7, r1
    68d4:	mov	r1, r4
    68d8:	mov	r2, r7
    68dc:	bl	47e8 <memcpy@plt>
    68e0:	ldrd	r2, [r5, #80]	; 0x50
    68e4:	adds	r0, r2, r7
    68e8:	adc	r1, r3, #0
    68ec:	cmp	r1, #0
    68f0:	cmpeq	r0, #128	; 0x80
    68f4:	strd	r0, [r5, #80]	; 0x50
    68f8:	bhi	6934 <rb_sha512_process_bytes+0x170>
    68fc:	add	r4, r4, r7
    6900:	sub	r6, r6, r7
    6904:	b	67f4 <rb_sha512_process_bytes+0x30>
    6908:	add	r6, r5, #88	; 0x58
    690c:	mov	r2, r5
    6910:	mov	r0, r6
    6914:	sub	r4, r4, #128	; 0x80
    6918:	mov	r1, #128	; 0x80
    691c:	bl	52bc <rb_sha512_process_block>
    6920:	mov	r0, r6
    6924:	mov	r2, r4
    6928:	add	r1, r5, #216	; 0xd8
    692c:	bl	47e8 <memcpy@plt>
    6930:	b	6874 <rb_sha512_process_bytes+0xb0>
    6934:	add	r9, r5, #88	; 0x58
    6938:	bic	r1, r0, #127	; 0x7f
    693c:	mov	r2, r5
    6940:	mov	r0, r9
    6944:	bl	52bc <rb_sha512_process_block>
    6948:	ldr	r3, [r5, #80]	; 0x50
    694c:	add	r1, r7, sl
    6950:	mov	r2, #0
    6954:	bic	r1, r1, #127	; 0x7f
    6958:	mov	r0, r9
    695c:	add	r1, r1, #88	; 0x58
    6960:	str	r2, [r5, #84]	; 0x54
    6964:	add	r1, r5, r1
    6968:	and	r3, r3, #127	; 0x7f
    696c:	mov	r2, r3
    6970:	str	r3, [r5, #80]	; 0x50
    6974:	bl	47e8 <memcpy@plt>
    6978:	b	68fc <rb_sha512_process_bytes+0x138>
    697c:	mov	r7, r4
    6980:	b	6850 <rb_sha512_process_bytes+0x8c>

00006984 <rb_sha512_finish_ctx>:
    6984:	strd	r4, [sp, #-36]!	; 0xffffffdc
    6988:	mov	r4, r0
    698c:	mov	r5, r1
    6990:	ldrd	r2, [r0, #64]	; 0x40
    6994:	strd	r6, [sp, #8]
    6998:	strd	sl, [sp, #24]
    699c:	ldrd	sl, [r0, #80]	; 0x50
    69a0:	strd	r8, [sp, #16]
    69a4:	mov	r9, #0
    69a8:	str	lr, [sp, #32]
    69ac:	sub	sp, sp, #4
    69b0:	adds	r0, r2, sl
    69b4:	adcs	r1, r3, fp
    69b8:	movcs	r8, #1
    69bc:	movcc	r8, #0
    69c0:	orrs	r3, r8, r9
    69c4:	strd	r0, [r4, #64]	; 0x40
    69c8:	beq	69e4 <rb_sha512_finish_ctx+0x60>
    69cc:	ldr	r3, [r4, #72]	; 0x48
    69d0:	ldr	r2, [r4, #76]	; 0x4c
    69d4:	adds	r3, r3, #1
    69d8:	adc	r2, r2, #0
    69dc:	str	r3, [r4, #72]	; 0x48
    69e0:	str	r2, [r4, #76]	; 0x4c
    69e4:	ldr	r1, [pc, #280]	; 6b04 <rb_sha512_finish_ctx+0x180>
    69e8:	cmp	fp, #0
    69ec:	add	r0, sl, #88	; 0x58
    69f0:	cmpeq	sl, #111	; 0x6f
    69f4:	add	r0, r4, r0
    69f8:	rsbhi	r9, sl, #240	; 0xf0
    69fc:	rsbls	r9, sl, #112	; 0x70
    6a00:	mov	r2, r9
    6a04:	movhi	r8, #256	; 0x100
    6a08:	movls	r8, #128	; 0x80
    6a0c:	add	r1, pc, r1
    6a10:	add	r1, r1, #960	; 0x3c0
    6a14:	bl	47e8 <memcpy@plt>
    6a18:	ldr	r3, [r4, #68]	; 0x44
    6a1c:	adds	r6, sl, r9
    6a20:	mov	r1, r8
    6a24:	adds	r8, r6, #8
    6a28:	add	r6, r4, r6
    6a2c:	ldr	sl, [r4, #64]	; 0x40
    6a30:	add	r8, r4, r8
    6a34:	add	r0, r4, #88	; 0x58
    6a38:	mov	r2, r4
    6a3c:	lsl	ip, r3, #3
    6a40:	lsr	r7, r3, #29
    6a44:	orr	ip, ip, sl, lsr #29
    6a48:	lsl	r3, sl, #11
    6a4c:	lsl	fp, ip, #24
    6a50:	lsl	r9, ip, #8
    6a54:	and	r3, r3, #16711680	; 0xff0000
    6a58:	orr	fp, fp, ip, lsr #24
    6a5c:	lsr	lr, ip, #8
    6a60:	and	ip, r9, #16711680	; 0xff0000
    6a64:	lsr	r9, sl, #5
    6a68:	orr	ip, fp, ip
    6a6c:	and	lr, lr, #65280	; 0xff00
    6a70:	and	r9, r9, #65280	; 0xff00
    6a74:	orr	lr, ip, lr
    6a78:	ubfx	ip, sl, #21, #8
    6a7c:	orr	r3, r3, r9
    6a80:	orr	r3, r3, sl, lsl #27
    6a84:	str	lr, [r8, #88]	; 0x58
    6a88:	orr	r3, r3, ip
    6a8c:	str	r3, [r8, #92]	; 0x5c
    6a90:	ldr	lr, [r4, #72]	; 0x48
    6a94:	ldr	r3, [r4, #76]	; 0x4c
    6a98:	orr	ip, r7, lr, lsl #3
    6a9c:	lsl	r3, r3, #3
    6aa0:	rev	ip, ip
    6aa4:	orr	r3, r3, lr, lsr #29
    6aa8:	str	ip, [r6, #92]	; 0x5c
    6aac:	rev	r3, r3
    6ab0:	str	r3, [r6, #88]	; 0x58
    6ab4:	bl	52bc <rb_sha512_process_block>
    6ab8:	sub	r3, r4, #8
    6abc:	sub	r0, r5, #8
    6ac0:	add	r4, r4, #56	; 0x38
    6ac4:	ldr	r2, [r3, #8]!
    6ac8:	ldr	r1, [r3, #4]
    6acc:	rev	r2, r2
    6ad0:	cmp	r3, r4
    6ad4:	rev	r1, r1
    6ad8:	str	r1, [r0, #8]!
    6adc:	str	r2, [r0, #4]
    6ae0:	bne	6ac4 <rb_sha512_finish_ctx+0x140>
    6ae4:	mov	r0, r5
    6ae8:	add	sp, sp, #4
    6aec:	ldrd	r4, [sp]
    6af0:	ldrd	r6, [sp, #8]
    6af4:	ldrd	r8, [sp, #16]
    6af8:	ldrd	sl, [sp, #24]
    6afc:	add	sp, sp, #32
    6b00:	pop	{pc}		; (ldr pc, [sp], #4)
    6b04:	.word	0x0000f69c

00006b08 <rb_sha256_crypt_r>:
    6b08:	ldr	ip, [pc, #3344]	; 7820 <rb_sha256_crypt_r+0xd18>
    6b0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    6b10:	mov	r4, r1
    6b14:	strd	r6, [sp, #8]
    6b18:	strd	r8, [sp, #16]
    6b1c:	strd	sl, [sp, #24]
    6b20:	add	fp, sp, #32
    6b24:	mov	sl, r0
    6b28:	str	lr, [sp, #32]
    6b2c:	sub	sp, sp, #492	; 0x1ec
    6b30:	add	ip, pc, ip
    6b34:	add	r0, ip, #1088	; 0x440
    6b38:	str	r3, [fp, #-496]	; 0xfffffe10
    6b3c:	str	r2, [fp, #-488]	; 0xfffffe18
    6b40:	mov	r2, #3
    6b44:	str	r1, [fp, #-456]	; 0xfffffe38
    6b48:	bl	4be4 <strncmp@plt>
    6b4c:	ldr	r1, [pc, #3280]	; 7824 <rb_sha256_crypt_r+0xd1c>
    6b50:	cmp	r0, #0
    6b54:	mov	r2, #7
    6b58:	addeq	r3, r4, #3
    6b5c:	streq	r3, [fp, #-456]	; 0xfffffe38
    6b60:	ldr	r0, [fp, #-456]	; 0xfffffe38
    6b64:	add	r1, pc, r1
    6b68:	add	r1, r1, #1088	; 0x440
    6b6c:	add	r1, r1, #4
    6b70:	bl	4be4 <strncmp@plt>
    6b74:	subs	r3, r0, #0
    6b78:	str	r3, [fp, #-500]	; 0xfffffe0c
    6b7c:	beq	768c <rb_sha256_crypt_r+0xb84>
    6b80:	mov	r3, #0
    6b84:	str	r3, [fp, #-500]	; 0xfffffe0c
    6b88:	movw	r3, #5000	; 0x1388
    6b8c:	str	r3, [fp, #-480]	; 0xfffffe20
    6b90:	sub	r3, fp, #208	; 0xd0
    6b94:	str	r3, [fp, #-452]	; 0xfffffe3c
    6b98:	ldr	r1, [pc, #3208]	; 7828 <rb_sha256_crypt_r+0xd20>
    6b9c:	ldr	r0, [fp, #-456]	; 0xfffffe38
    6ba0:	add	r1, pc, r1
    6ba4:	bl	4bb4 <strcspn@plt>
    6ba8:	cmp	r0, #16
    6bac:	movcc	r3, r0
    6bb0:	movcs	r3, #16
    6bb4:	mov	r0, sl
    6bb8:	str	r3, [fp, #-448]	; 0xfffffe40
    6bbc:	bl	47c4 <strlen@plt>
    6bc0:	ands	r3, sl, #3
    6bc4:	mov	r9, r0
    6bc8:	streq	r3, [fp, #-508]	; 0xfffffe04
    6bcc:	bne	7754 <rb_sha256_crypt_r+0xc4c>
    6bd0:	ldr	r3, [fp, #-456]	; 0xfffffe38
    6bd4:	ands	r3, r3, #3
    6bd8:	streq	r3, [fp, #-512]	; 0xfffffe00
    6bdc:	bne	772c <rb_sha256_crypt_r+0xc24>
    6be0:	movw	r3, #58983	; 0xe667
    6be4:	movt	r3, #27145	; 0x6a09
    6be8:	movw	r2, #44677	; 0xae85
    6bec:	movt	r2, #47975	; 0xbb67
    6bf0:	movw	r1, #62322	; 0xf372
    6bf4:	movt	r1, #15470	; 0x3c6e
    6bf8:	movw	r0, #62778	; 0xf53a
    6bfc:	movt	r0, #42319	; 0xa54f
    6c00:	sub	r8, fp, #380	; 0x17c
    6c04:	movw	ip, #21119	; 0x527f
    6c08:	movt	ip, #20750	; 0x510e
    6c0c:	movw	r6, #26764	; 0x688c
    6c10:	movt	r6, #39685	; 0x9b05
    6c14:	movw	r5, #55723	; 0xd9ab
    6c18:	movt	r5, #8067	; 0x1f83
    6c1c:	movw	r4, #52505	; 0xcd19
    6c20:	movt	r4, #23520	; 0x5be0
    6c24:	str	ip, [fp, #-476]	; 0xfffffe24
    6c28:	sub	r7, fp, #444	; 0x1bc
    6c2c:	str	r3, [fp, #-460]	; 0xfffffe34
    6c30:	str	r3, [fp, #-380]	; 0xfffffe84
    6c34:	mov	r3, #0
    6c38:	str	r0, [fp, #-472]	; 0xfffffe28
    6c3c:	str	r1, [fp, #-468]	; 0xfffffe2c
    6c40:	str	r2, [fp, #-464]	; 0xfffffe30
    6c44:	str	r2, [fp, #-376]	; 0xfffffe88
    6c48:	mov	r2, r8
    6c4c:	str	r1, [fp, #-372]	; 0xfffffe8c
    6c50:	mov	r1, r9
    6c54:	str	r0, [fp, #-368]	; 0xfffffe90
    6c58:	mov	r0, sl
    6c5c:	str	ip, [fp, #-364]	; 0xfffffe94
    6c60:	str	r6, [fp, #-360]	; 0xfffffe98
    6c64:	str	r5, [fp, #-356]	; 0xfffffe9c
    6c68:	str	r4, [fp, #-352]	; 0xfffffea0
    6c6c:	str	r3, [fp, #-348]	; 0xfffffea4
    6c70:	str	r3, [fp, #-344]	; 0xfffffea8
    6c74:	str	r3, [fp, #-340]	; 0xfffffeac
    6c78:	bl	64f0 <rb_sha256_process_bytes>
    6c7c:	mov	r2, r8
    6c80:	ldr	r0, [fp, #-456]	; 0xfffffe38
    6c84:	ldr	r1, [fp, #-448]	; 0xfffffe40
    6c88:	bl	64f0 <rb_sha256_process_bytes>
    6c8c:	ldr	ip, [fp, #-476]	; 0xfffffe24
    6c90:	mov	r1, r9
    6c94:	mov	r0, sl
    6c98:	ldr	r3, [fp, #-460]	; 0xfffffe34
    6c9c:	ldr	r2, [fp, #-452]	; 0xfffffe3c
    6ca0:	str	r6, [fp, #-188]	; 0xffffff44
    6ca4:	str	r5, [fp, #-184]	; 0xffffff48
    6ca8:	str	r3, [fp, #-208]	; 0xffffff30
    6cac:	ldr	r3, [fp, #-464]	; 0xfffffe30
    6cb0:	str	ip, [fp, #-192]	; 0xffffff40
    6cb4:	str	r4, [fp, #-180]	; 0xffffff4c
    6cb8:	str	r3, [fp, #-204]	; 0xffffff34
    6cbc:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    6cc0:	str	r3, [fp, #-200]	; 0xffffff38
    6cc4:	ldr	r3, [fp, #-472]	; 0xfffffe28
    6cc8:	str	r3, [fp, #-196]	; 0xffffff3c
    6ccc:	mov	r3, #0
    6cd0:	str	r3, [fp, #-176]	; 0xffffff50
    6cd4:	str	r3, [fp, #-172]	; 0xffffff54
    6cd8:	str	r3, [fp, #-168]	; 0xffffff58
    6cdc:	bl	64f0 <rb_sha256_process_bytes>
    6ce0:	ldr	r0, [fp, #-456]	; 0xfffffe38
    6ce4:	ldr	r2, [fp, #-452]	; 0xfffffe3c
    6ce8:	ldr	r1, [fp, #-448]	; 0xfffffe40
    6cec:	bl	64f0 <rb_sha256_process_bytes>
    6cf0:	mov	r1, r9
    6cf4:	mov	r0, sl
    6cf8:	ldr	r2, [fp, #-452]	; 0xfffffe3c
    6cfc:	bl	64f0 <rb_sha256_process_bytes>
    6d00:	mov	r1, r7
    6d04:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    6d08:	bl	66c0 <rb_sha256_finish_ctx>
    6d0c:	cmp	r9, #32
    6d10:	bls	7790 <rb_sha256_crypt_r+0xc88>
    6d14:	mov	r4, r9
    6d18:	sub	r4, r4, #32
    6d1c:	mov	r2, r8
    6d20:	mov	r1, #32
    6d24:	mov	r0, r7
    6d28:	bl	64f0 <rb_sha256_process_bytes>
    6d2c:	cmp	r4, #32
    6d30:	bhi	6d18 <rb_sha256_crypt_r+0x210>
    6d34:	sub	r3, r9, #33	; 0x21
    6d38:	sub	r1, r9, #32
    6d3c:	bic	r3, r3, #31
    6d40:	mov	r2, r8
    6d44:	sub	r1, r1, r3
    6d48:	mov	r0, r7
    6d4c:	bl	64f0 <rb_sha256_process_bytes>
    6d50:	mov	r4, r9
    6d54:	tst	r4, #1
    6d58:	mov	r1, r9
    6d5c:	mov	r0, sl
    6d60:	movne	r1, #32
    6d64:	movne	r0, r7
    6d68:	mov	r2, r8
    6d6c:	bl	64f0 <rb_sha256_process_bytes>
    6d70:	lsrs	r4, r4, #1
    6d74:	bne	6d54 <rb_sha256_crypt_r+0x24c>
    6d78:	mov	r1, r7
    6d7c:	mov	r0, r8
    6d80:	bl	66c0 <rb_sha256_finish_ctx>
    6d84:	movw	r2, #58983	; 0xe667
    6d88:	movt	r2, #27145	; 0x6a09
    6d8c:	ldr	r5, [fp, #-452]	; 0xfffffe3c
    6d90:	movw	r3, #44677	; 0xae85
    6d94:	movt	r3, #47975	; 0xbb67
    6d98:	movw	r1, #62322	; 0xf372
    6d9c:	movt	r1, #15470	; 0x3c6e
    6da0:	strd	r2, [fp, #-208]	; 0xffffff30
    6da4:	movw	r2, #62778	; 0xf53a
    6da8:	movt	r2, #42319	; 0xa54f
    6dac:	movw	r3, #21119	; 0x527f
    6db0:	movt	r3, #20750	; 0x510e
    6db4:	str	r1, [fp, #-200]	; 0xffffff38
    6db8:	movw	r1, #26764	; 0x688c
    6dbc:	movt	r1, #39685	; 0x9b05
    6dc0:	strd	r2, [fp, #-196]	; 0xffffff3c
    6dc4:	movw	r2, #55723	; 0xd9ab
    6dc8:	movt	r2, #8067	; 0x1f83
    6dcc:	movw	r3, #52505	; 0xcd19
    6dd0:	movt	r3, #23520	; 0x5be0
    6dd4:	str	r1, [fp, #-188]	; 0xffffff44
    6dd8:	str	r4, [fp, #-176]	; 0xffffff50
    6ddc:	strd	r2, [fp, #-184]	; 0xffffff48
    6de0:	str	r4, [fp, #-172]	; 0xffffff54
    6de4:	str	r4, [fp, #-168]	; 0xffffff58
    6de8:	add	r4, r4, #1
    6dec:	mov	r2, r5
    6df0:	mov	r1, r9
    6df4:	mov	r0, sl
    6df8:	bl	64f0 <rb_sha256_process_bytes>
    6dfc:	cmp	r9, r4
    6e00:	bhi	6de8 <rb_sha256_crypt_r+0x2e0>
    6e04:	sub	sl, fp, #412	; 0x19c
    6e08:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    6e0c:	mov	r1, sl
    6e10:	bl	66c0 <rb_sha256_finish_ctx>
    6e14:	add	r3, r9, #7
    6e18:	cmp	r9, #31
    6e1c:	bic	r3, r3, #7
    6e20:	sub	sp, sp, r3
    6e24:	add	r3, sp, #8
    6e28:	str	r3, [fp, #-492]	; 0xfffffe14
    6e2c:	bls	7814 <rb_sha256_crypt_r+0xd0c>
    6e30:	sub	lr, r9, #32
    6e34:	add	r1, sp, #40	; 0x28
    6e38:	lsr	lr, lr, #5
    6e3c:	add	ip, r3, lr, lsl #5
    6e40:	add	ip, ip, #64	; 0x40
    6e44:	ldrd	r4, [sl]
    6e48:	sub	r0, r1, #32
    6e4c:	add	r1, r1, #32
    6e50:	ldrd	r2, [sl, #8]
    6e54:	strd	r4, [r1, #-64]	; 0xffffffc0
    6e58:	cmp	ip, r1
    6e5c:	ldrd	r4, [sl, #16]
    6e60:	strd	r2, [r0, #8]
    6e64:	ldrd	r2, [sl, #24]
    6e68:	strd	r4, [r0, #16]
    6e6c:	strd	r2, [r0, #24]
    6e70:	bne	6e44 <rb_sha256_crypt_r+0x33c>
    6e74:	ldr	r3, [fp, #-492]	; 0xfffffe14
    6e78:	add	r0, lr, #1
    6e7c:	and	r2, r9, #31
    6e80:	add	r0, r3, r0, lsl #5
    6e84:	mov	r1, sl
    6e88:	bl	47e8 <memcpy@plt>
    6e8c:	movw	r1, #58983	; 0xe667
    6e90:	movt	r1, #27145	; 0x6a09
    6e94:	ldr	r6, [fp, #-456]	; 0xfffffe38
    6e98:	movw	r2, #44677	; 0xae85
    6e9c:	movt	r2, #47975	; 0xbb67
    6ea0:	str	r7, [fp, #-460]	; 0xfffffe34
    6ea4:	ldr	r4, [fp, #-452]	; 0xfffffe3c
    6ea8:	movw	r0, #62322	; 0xf372
    6eac:	movt	r0, #15470	; 0x3c6e
    6eb0:	str	r1, [fp, #-208]	; 0xffffff30
    6eb4:	movw	r1, #62778	; 0xf53a
    6eb8:	movt	r1, #42319	; 0xa54f
    6ebc:	ldr	r5, [fp, #-448]	; 0xfffffe40
    6ec0:	mov	r3, #0
    6ec4:	str	r2, [fp, #-204]	; 0xffffff34
    6ec8:	movw	r2, #21119	; 0x527f
    6ecc:	movt	r2, #20750	; 0x510e
    6ed0:	mov	r7, r3
    6ed4:	str	r0, [fp, #-200]	; 0xffffff38
    6ed8:	movw	r0, #26764	; 0x688c
    6edc:	movt	r0, #39685	; 0x9b05
    6ee0:	str	r1, [fp, #-196]	; 0xffffff3c
    6ee4:	movw	r1, #55723	; 0xd9ab
    6ee8:	movt	r1, #8067	; 0x1f83
    6eec:	str	r2, [fp, #-192]	; 0xffffff40
    6ef0:	movw	r2, #52505	; 0xcd19
    6ef4:	movt	r2, #23520	; 0x5be0
    6ef8:	str	r0, [fp, #-188]	; 0xffffff44
    6efc:	str	r1, [fp, #-184]	; 0xffffff48
    6f00:	str	r2, [fp, #-180]	; 0xffffff4c
    6f04:	str	r3, [fp, #-176]	; 0xffffff50
    6f08:	str	r3, [fp, #-172]	; 0xffffff54
    6f0c:	str	r3, [fp, #-168]	; 0xffffff58
    6f10:	mov	r2, r4
    6f14:	mov	r1, r5
    6f18:	mov	r0, r6
    6f1c:	add	r7, r7, #1
    6f20:	bl	64f0 <rb_sha256_process_bytes>
    6f24:	ldrb	r2, [fp, #-444]	; 0xfffffe44
    6f28:	add	r2, r2, #16
    6f2c:	cmp	r2, r7
    6f30:	bhi	6f10 <rb_sha256_crypt_r+0x408>
    6f34:	mov	r1, sl
    6f38:	ldr	r7, [fp, #-460]	; 0xfffffe34
    6f3c:	movw	r5, #55723	; 0xd9ab
    6f40:	movt	r5, #8067	; 0x1f83
    6f44:	mov	r6, #0
    6f48:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    6f4c:	bl	66c0 <rb_sha256_finish_ctx>
    6f50:	ldr	r2, [fp, #-448]	; 0xfffffe40
    6f54:	mov	r1, sl
    6f58:	add	r3, r2, #7
    6f5c:	bic	r3, r3, #7
    6f60:	sub	sp, sp, r3
    6f64:	movw	r3, #58983	; 0xe667
    6f68:	movt	r3, #27145	; 0x6a09
    6f6c:	str	r3, [fp, #-460]	; 0xfffffe34
    6f70:	add	r3, sp, #8
    6f74:	mov	r0, r3
    6f78:	str	r3, [fp, #-484]	; 0xfffffe1c
    6f7c:	movw	r3, #44677	; 0xae85
    6f80:	movt	r3, #47975	; 0xbb67
    6f84:	str	r3, [fp, #-464]	; 0xfffffe30
    6f88:	movw	r3, #62322	; 0xf372
    6f8c:	movt	r3, #15470	; 0x3c6e
    6f90:	str	r3, [fp, #-468]	; 0xfffffe2c
    6f94:	movw	r3, #21119	; 0x527f
    6f98:	movt	r3, #20750	; 0x510e
    6f9c:	str	r3, [fp, #-472]	; 0xfffffe28
    6fa0:	movw	r3, #26764	; 0x688c
    6fa4:	movt	r3, #39685	; 0x9b05
    6fa8:	str	r3, [fp, #-476]	; 0xfffffe24
    6fac:	bl	47e8 <memcpy@plt>
    6fb0:	mov	r3, r5
    6fb4:	mov	r5, r6
    6fb8:	str	sl, [fp, #-504]	; 0xfffffe08
    6fbc:	mov	r6, r3
    6fc0:	ldr	sl, [fp, #-492]	; 0xfffffe14
    6fc4:	b	7024 <rb_sha256_crypt_r+0x51c>
    6fc8:	movw	r2, #18725	; 0x4925
    6fcc:	movt	r2, #9362	; 0x2492
    6fd0:	umull	r3, r2, r2, r5
    6fd4:	sub	r1, r5, r2
    6fd8:	add	r2, r2, r1, lsr #1
    6fdc:	lsr	r2, r2, #2
    6fe0:	rsb	r2, r2, r2, lsl #3
    6fe4:	cmp	r5, r2
    6fe8:	bne	70c4 <rb_sha256_crypt_r+0x5bc>
    6fec:	cmp	r4, #0
    6ff0:	mov	r2, r8
    6ff4:	movne	r1, #32
    6ff8:	movne	r0, r7
    6ffc:	moveq	r1, r9
    7000:	moveq	r0, sl
    7004:	bl	64f0 <rb_sha256_process_bytes>
    7008:	mov	r1, r7
    700c:	mov	r0, r8
    7010:	bl	66c0 <rb_sha256_finish_ctx>
    7014:	ldr	r3, [fp, #-480]	; 0xfffffe20
    7018:	add	r5, r5, #1
    701c:	cmp	r3, r5
    7020:	beq	70d8 <rb_sha256_crypt_r+0x5d0>
    7024:	ldr	r3, [fp, #-460]	; 0xfffffe34
    7028:	mov	r2, #0
    702c:	movw	r0, #62778	; 0xf53a
    7030:	movt	r0, #42319	; 0xa54f
    7034:	movw	r1, #52505	; 0xcd19
    7038:	movt	r1, #23520	; 0x5be0
    703c:	ands	r4, r5, #1
    7040:	str	r2, [fp, #-348]	; 0xfffffea4
    7044:	str	r3, [fp, #-380]	; 0xfffffe84
    7048:	ldr	r3, [fp, #-464]	; 0xfffffe30
    704c:	str	r0, [fp, #-368]	; 0xfffffe90
    7050:	movne	r0, sl
    7054:	moveq	r0, r7
    7058:	str	r1, [fp, #-352]	; 0xfffffea0
    705c:	movne	r1, r9
    7060:	moveq	r1, #32
    7064:	str	r2, [fp, #-344]	; 0xfffffea8
    7068:	str	r2, [fp, #-340]	; 0xfffffeac
    706c:	mov	r2, r8
    7070:	str	r3, [fp, #-376]	; 0xfffffe88
    7074:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    7078:	str	r6, [fp, #-356]	; 0xfffffe9c
    707c:	str	r3, [fp, #-372]	; 0xfffffe8c
    7080:	ldr	r3, [fp, #-472]	; 0xfffffe28
    7084:	str	r3, [fp, #-364]	; 0xfffffe94
    7088:	ldr	r3, [fp, #-476]	; 0xfffffe24
    708c:	str	r3, [fp, #-360]	; 0xfffffe98
    7090:	bl	64f0 <rb_sha256_process_bytes>
    7094:	movw	r2, #43691	; 0xaaab
    7098:	movt	r2, #43690	; 0xaaaa
    709c:	umull	r3, r2, r2, r5
    70a0:	lsr	r2, r2, #1
    70a4:	add	r2, r2, r2, lsl #1
    70a8:	cmp	r5, r2
    70ac:	beq	6fc8 <rb_sha256_crypt_r+0x4c0>
    70b0:	mov	r2, r8
    70b4:	ldr	r0, [fp, #-484]	; 0xfffffe1c
    70b8:	ldr	r1, [fp, #-448]	; 0xfffffe40
    70bc:	bl	64f0 <rb_sha256_process_bytes>
    70c0:	b	6fc8 <rb_sha256_crypt_r+0x4c0>
    70c4:	mov	r2, r8
    70c8:	mov	r1, r9
    70cc:	mov	r0, sl
    70d0:	bl	64f0 <rb_sha256_process_bytes>
    70d4:	b	6fec <rb_sha256_crypt_r+0x4e4>
    70d8:	mov	r6, r5
    70dc:	mov	r1, #0
    70e0:	ldr	sl, [fp, #-504]	; 0xfffffe08
    70e4:	ldr	r3, [fp, #-496]	; 0xfffffe10
    70e8:	ldr	r5, [fp, #-488]	; 0xfffffe18
    70ec:	bic	r4, r3, r3, asr #31
    70f0:	mov	r0, r5
    70f4:	mov	r2, r4
    70f8:	bl	4608 <memset@plt>
    70fc:	ldr	r1, [pc, #1832]	; 782c <rb_sha256_crypt_r+0xd24>
    7100:	mov	r2, r4
    7104:	mov	r0, r5
    7108:	add	r1, pc, r1
    710c:	add	r1, r1, #1088	; 0x440
    7110:	bl	4548 <strncpy@plt>
    7114:	mov	r0, r5
    7118:	bl	47c4 <strlen@plt>
    711c:	adds	r5, r5, r0
    7120:	ldreq	r3, [fp, #-488]	; 0xfffffe18
    7124:	addeq	r5, r3, r4
    7128:	ldr	r3, [fp, #-496]	; 0xfffffe10
    712c:	sub	r4, r3, #3
    7130:	ldr	r3, [fp, #-500]	; 0xfffffe0c
    7134:	cmp	r3, #0
    7138:	bic	r3, r4, r4, asr #31
    713c:	bne	76f4 <rb_sha256_crypt_r+0xbec>
    7140:	ldr	r6, [fp, #-448]	; 0xfffffe40
    7144:	mov	r1, #0
    7148:	mov	r0, r5
    714c:	str	r3, [fp, #-460]	; 0xfffffe34
    7150:	mov	r2, r6
    7154:	bl	4608 <memset@plt>
    7158:	ldr	r3, [fp, #-460]	; 0xfffffe34
    715c:	mov	r0, r5
    7160:	str	r6, [fp, #-448]	; 0xfffffe40
    7164:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7168:	cmp	r6, r3
    716c:	movcs	r6, r3
    7170:	mov	r2, r6
    7174:	sub	r4, r4, r6
    7178:	bl	4548 <strncpy@plt>
    717c:	ldr	r5, [fp, #-488]	; 0xfffffe18
    7180:	mov	r0, r5
    7184:	bl	47c4 <strlen@plt>
    7188:	ldr	r2, [fp, #-448]	; 0xfffffe40
    718c:	adds	r0, r5, r0
    7190:	moveq	r0, r2
    7194:	cmp	r4, #0
    7198:	ble	777c <rb_sha256_crypt_r+0xc74>
    719c:	ldrb	r1, [fp, #-434]	; 0xfffffe4e
    71a0:	mov	r2, #36	; 0x24
    71a4:	mov	r3, r0
    71a8:	subs	r4, r4, #1
    71ac:	ldrb	lr, [fp, #-444]	; 0xfffffe44
    71b0:	strb	r2, [r3], #1
    71b4:	ldrb	ip, [fp, #-424]	; 0xfffffe58
    71b8:	lsl	r2, r1, #8
    71bc:	orr	r2, r2, lr, lsl #16
    71c0:	orr	r2, r2, ip
    71c4:	beq	777c <rb_sha256_crypt_r+0xc74>
    71c8:	ldr	lr, [pc, #1632]	; 7830 <rb_sha256_crypt_r+0xd28>
    71cc:	add	lr, pc, lr
    71d0:	and	r1, r2, #63	; 0x3f
    71d4:	sub	r4, r4, #1
    71d8:	lsr	r2, r2, #6
    71dc:	add	r1, lr, r1
    71e0:	ldrb	r1, [r1, #1100]	; 0x44c
    71e4:	strb	r1, [r3], #1
    71e8:	sub	r1, r3, #5
    71ec:	mov	ip, r3
    71f0:	cmp	r0, r1
    71f4:	cmpne	r4, #0
    71f8:	bgt	71d0 <rb_sha256_crypt_r+0x6c8>
    71fc:	ldrb	r2, [fp, #-443]	; 0xfffffe45
    7200:	cmp	r4, #0
    7204:	ldrb	r0, [fp, #-423]	; 0xfffffe59
    7208:	ldrb	r1, [fp, #-433]	; 0xfffffe4f
    720c:	lsl	r2, r2, #8
    7210:	orr	r2, r2, r0, lsl #16
    7214:	orr	r2, r2, r1
    7218:	ble	777c <rb_sha256_crypt_r+0xc74>
    721c:	ldr	lr, [pc, #1552]	; 7834 <rb_sha256_crypt_r+0xd2c>
    7220:	add	lr, pc, lr
    7224:	and	r1, r2, #63	; 0x3f
    7228:	sub	r4, r4, #1
    722c:	lsr	r2, r2, #6
    7230:	add	r1, lr, r1
    7234:	ldrb	r1, [r1, #1100]	; 0x44c
    7238:	strb	r1, [r3], #1
    723c:	sub	r0, r3, #4
    7240:	mov	r1, r3
    7244:	cmp	ip, r0
    7248:	cmpne	r4, #0
    724c:	bgt	7224 <rb_sha256_crypt_r+0x71c>
    7250:	ldrb	r2, [fp, #-422]	; 0xfffffe5a
    7254:	cmp	r4, #0
    7258:	ldrb	ip, [fp, #-432]	; 0xfffffe50
    725c:	ldrb	r0, [fp, #-442]	; 0xfffffe46
    7260:	lsl	r2, r2, #8
    7264:	orr	r2, r2, ip, lsl #16
    7268:	orr	r2, r2, r0
    726c:	ble	777c <rb_sha256_crypt_r+0xc74>
    7270:	ldr	lr, [pc, #1472]	; 7838 <rb_sha256_crypt_r+0xd30>
    7274:	add	lr, pc, lr
    7278:	and	r0, r2, #63	; 0x3f
    727c:	sub	r4, r4, #1
    7280:	lsr	r2, r2, #6
    7284:	add	r0, lr, r0
    7288:	ldrb	r0, [r0, #1100]	; 0x44c
    728c:	strb	r0, [r3], #1
    7290:	sub	ip, r3, #4
    7294:	mov	r0, r3
    7298:	cmp	r1, ip
    729c:	cmpne	r4, #0
    72a0:	bgt	7278 <rb_sha256_crypt_r+0x770>
    72a4:	ldrb	r2, [fp, #-431]	; 0xfffffe51
    72a8:	cmp	r4, #0
    72ac:	ldrb	ip, [fp, #-441]	; 0xfffffe47
    72b0:	ldrb	r1, [fp, #-421]	; 0xfffffe5b
    72b4:	lsl	r2, r2, #8
    72b8:	orr	r2, r2, ip, lsl #16
    72bc:	orr	r2, r2, r1
    72c0:	ble	777c <rb_sha256_crypt_r+0xc74>
    72c4:	ldr	lr, [pc, #1392]	; 783c <rb_sha256_crypt_r+0xd34>
    72c8:	add	lr, pc, lr
    72cc:	and	r1, r2, #63	; 0x3f
    72d0:	sub	r4, r4, #1
    72d4:	lsr	r2, r2, #6
    72d8:	add	r1, lr, r1
    72dc:	ldrb	r1, [r1, #1100]	; 0x44c
    72e0:	strb	r1, [r3], #1
    72e4:	sub	ip, r3, #4
    72e8:	mov	r1, r3
    72ec:	cmp	r0, ip
    72f0:	cmpne	r4, #0
    72f4:	bgt	72cc <rb_sha256_crypt_r+0x7c4>
    72f8:	ldrb	r2, [fp, #-440]	; 0xfffffe48
    72fc:	cmp	r4, #0
    7300:	ldrb	ip, [fp, #-420]	; 0xfffffe5c
    7304:	ldrb	r0, [fp, #-430]	; 0xfffffe52
    7308:	lsl	r2, r2, #8
    730c:	orr	r2, r2, ip, lsl #16
    7310:	orr	r2, r2, r0
    7314:	ble	777c <rb_sha256_crypt_r+0xc74>
    7318:	ldr	lr, [pc, #1312]	; 7840 <rb_sha256_crypt_r+0xd38>
    731c:	add	lr, pc, lr
    7320:	and	r0, r2, #63	; 0x3f
    7324:	sub	r4, r4, #1
    7328:	lsr	r2, r2, #6
    732c:	add	r0, lr, r0
    7330:	ldrb	r0, [r0, #1100]	; 0x44c
    7334:	strb	r0, [r3], #1
    7338:	sub	ip, r3, #4
    733c:	mov	r0, r3
    7340:	cmp	r1, ip
    7344:	cmpne	r4, #0
    7348:	bgt	7320 <rb_sha256_crypt_r+0x818>
    734c:	ldrb	r2, [fp, #-419]	; 0xfffffe5d
    7350:	cmp	r4, #0
    7354:	ldrb	ip, [fp, #-429]	; 0xfffffe53
    7358:	ldrb	r1, [fp, #-439]	; 0xfffffe49
    735c:	lsl	r2, r2, #8
    7360:	orr	r2, r2, ip, lsl #16
    7364:	orr	r2, r2, r1
    7368:	ble	777c <rb_sha256_crypt_r+0xc74>
    736c:	ldr	lr, [pc, #1232]	; 7844 <rb_sha256_crypt_r+0xd3c>
    7370:	add	lr, pc, lr
    7374:	and	r1, r2, #63	; 0x3f
    7378:	sub	r4, r4, #1
    737c:	lsr	r2, r2, #6
    7380:	add	r1, lr, r1
    7384:	ldrb	r1, [r1, #1100]	; 0x44c
    7388:	strb	r1, [r3], #1
    738c:	sub	ip, r3, #4
    7390:	mov	r1, r3
    7394:	cmp	r0, ip
    7398:	cmpne	r4, #0
    739c:	bgt	7374 <rb_sha256_crypt_r+0x86c>
    73a0:	ldrb	r2, [fp, #-428]	; 0xfffffe54
    73a4:	cmp	r4, #0
    73a8:	ldrb	ip, [fp, #-438]	; 0xfffffe4a
    73ac:	ldrb	r0, [fp, #-418]	; 0xfffffe5e
    73b0:	lsl	r2, r2, #8
    73b4:	orr	r2, r2, ip, lsl #16
    73b8:	orr	r2, r2, r0
    73bc:	ble	777c <rb_sha256_crypt_r+0xc74>
    73c0:	ldr	lr, [pc, #1152]	; 7848 <rb_sha256_crypt_r+0xd40>
    73c4:	add	lr, pc, lr
    73c8:	and	r0, r2, #63	; 0x3f
    73cc:	sub	r4, r4, #1
    73d0:	lsr	r2, r2, #6
    73d4:	add	r0, lr, r0
    73d8:	ldrb	r0, [r0, #1100]	; 0x44c
    73dc:	strb	r0, [r3], #1
    73e0:	sub	ip, r3, #4
    73e4:	mov	r0, r3
    73e8:	cmp	r1, ip
    73ec:	cmpne	r4, #0
    73f0:	bgt	73c8 <rb_sha256_crypt_r+0x8c0>
    73f4:	ldrb	r2, [fp, #-437]	; 0xfffffe4b
    73f8:	cmp	r4, #0
    73fc:	ldrb	ip, [fp, #-417]	; 0xfffffe5f
    7400:	ldrb	r1, [fp, #-427]	; 0xfffffe55
    7404:	lsl	r2, r2, #8
    7408:	orr	r2, r2, ip, lsl #16
    740c:	orr	r2, r2, r1
    7410:	ble	777c <rb_sha256_crypt_r+0xc74>
    7414:	ldr	lr, [pc, #1072]	; 784c <rb_sha256_crypt_r+0xd44>
    7418:	add	lr, pc, lr
    741c:	and	r1, r2, #63	; 0x3f
    7420:	sub	r4, r4, #1
    7424:	lsr	r2, r2, #6
    7428:	add	r1, lr, r1
    742c:	ldrb	r1, [r1, #1100]	; 0x44c
    7430:	strb	r1, [r3], #1
    7434:	sub	ip, r3, #4
    7438:	mov	r1, r3
    743c:	cmp	r0, ip
    7440:	cmpne	r4, #0
    7444:	bgt	741c <rb_sha256_crypt_r+0x914>
    7448:	ldrb	r0, [fp, #-416]	; 0xfffffe60
    744c:	cmp	r4, #0
    7450:	ldrb	ip, [fp, #-426]	; 0xfffffe56
    7454:	ldrb	r2, [fp, #-436]	; 0xfffffe4c
    7458:	lsl	r0, r0, #8
    745c:	orr	r0, r0, ip, lsl #16
    7460:	orr	r0, r0, r2
    7464:	ble	777c <rb_sha256_crypt_r+0xc74>
    7468:	ldr	ip, [pc, #992]	; 7850 <rb_sha256_crypt_r+0xd48>
    746c:	add	ip, pc, ip
    7470:	and	r2, r0, #63	; 0x3f
    7474:	sub	r4, r4, #1
    7478:	lsr	r0, r0, #6
    747c:	add	r2, ip, r2
    7480:	ldrb	r2, [r2, #1100]	; 0x44c
    7484:	strb	r2, [r3], #1
    7488:	sub	r2, r3, #4
    748c:	cmp	r1, r2
    7490:	cmpne	r4, #0
    7494:	bgt	7470 <rb_sha256_crypt_r+0x968>
    7498:	ldrb	r1, [fp, #-425]	; 0xfffffe57
    749c:	cmp	r4, #0
    74a0:	ldrb	r0, [fp, #-435]	; 0xfffffe4d
    74a4:	ldrb	r2, [fp, #-415]	; 0xfffffe61
    74a8:	lsl	r1, r1, #8
    74ac:	orr	r1, r1, r0, lsl #16
    74b0:	orr	r1, r1, r2
    74b4:	ble	777c <rb_sha256_crypt_r+0xc74>
    74b8:	ldr	r5, [pc, #916]	; 7854 <rb_sha256_crypt_r+0xd4c>
    74bc:	add	ip, r3, #4
    74c0:	add	r5, pc, r5
    74c4:	and	lr, r1, #63	; 0x3f
    74c8:	mov	r2, r3
    74cc:	lsr	r1, r1, #6
    74d0:	add	lr, r5, lr
    74d4:	sub	r0, r4, #1
    74d8:	ldrb	lr, [lr, #1100]	; 0x44c
    74dc:	strb	lr, [r2], #1
    74e0:	cmp	r2, ip
    74e4:	cmpne	r0, #0
    74e8:	movgt	lr, #1
    74ec:	movle	lr, #0
    74f0:	ble	7500 <rb_sha256_crypt_r+0x9f8>
    74f4:	mov	r3, r2
    74f8:	mov	r4, r0
    74fc:	b	74c4 <rb_sha256_crypt_r+0x9bc>
    7500:	cmp	r0, #0
    7504:	ldrh	r1, [r7, #30]
    7508:	ble	777c <rb_sha256_crypt_r+0xc74>
    750c:	and	r0, r1, #63	; 0x3f
    7510:	cmp	r4, #2
    7514:	lsr	ip, r1, #6
    7518:	add	r0, r5, r0
    751c:	ldrb	r0, [r0, #1100]	; 0x44c
    7520:	strb	r0, [r2]
    7524:	beq	777c <rb_sha256_crypt_r+0xc74>
    7528:	and	ip, ip, #63	; 0x3f
    752c:	cmp	r4, #3
    7530:	lsr	r1, r1, #12
    7534:	add	ip, r5, ip
    7538:	ldrb	r2, [ip, #1100]	; 0x44c
    753c:	strb	r2, [r3, #2]
    7540:	beq	777c <rb_sha256_crypt_r+0xc74>
    7544:	add	r1, r5, r1
    7548:	cmp	r4, #4
    754c:	ldrb	r2, [r1, #1100]	; 0x44c
    7550:	strb	r2, [r3, #3]
    7554:	beq	777c <rb_sha256_crypt_r+0xc74>
    7558:	ldr	r4, [fp, #-488]	; 0xfffffe18
    755c:	strb	lr, [r3, #4]
    7560:	movw	r2, #58983	; 0xe667
    7564:	movt	r2, #27145	; 0x6a09
    7568:	movw	r3, #44677	; 0xae85
    756c:	movt	r3, #47975	; 0xbb67
    7570:	movw	r1, #62322	; 0xf372
    7574:	movt	r1, #15470	; 0x3c6e
    7578:	str	r2, [fp, #-380]	; 0xfffffe84
    757c:	movw	r2, #62778	; 0xf53a
    7580:	movt	r2, #42319	; 0xa54f
    7584:	str	r3, [fp, #-376]	; 0xfffffe88
    7588:	movw	r3, #21119	; 0x527f
    758c:	movt	r3, #20750	; 0x510e
    7590:	str	r1, [fp, #-372]	; 0xfffffe8c
    7594:	movw	r1, #26764	; 0x688c
    7598:	movt	r1, #39685	; 0x9b05
    759c:	str	r2, [fp, #-368]	; 0xfffffe90
    75a0:	mov	r5, #0
    75a4:	mov	r6, #0
    75a8:	str	r3, [fp, #-364]	; 0xfffffe94
    75ac:	movw	r2, #55723	; 0xd9ab
    75b0:	movt	r2, #8067	; 0x1f83
    75b4:	str	r1, [fp, #-360]	; 0xfffffe98
    75b8:	movw	r3, #52505	; 0xcd19
    75bc:	movt	r3, #23520	; 0x5be0
    75c0:	mov	r1, r7
    75c4:	mov	r7, #0
    75c8:	str	r2, [fp, #-356]	; 0xfffffe9c
    75cc:	mov	r0, r8
    75d0:	str	r3, [fp, #-352]	; 0xfffffea0
    75d4:	str	r5, [fp, #-348]	; 0xfffffea4
    75d8:	str	r5, [fp, #-344]	; 0xfffffea8
    75dc:	str	r5, [fp, #-340]	; 0xfffffeac
    75e0:	bl	66c0 <rb_sha256_finish_ctx>
    75e4:	mov	r1, r5
    75e8:	mov	r2, r9
    75ec:	strd	r6, [sl]
    75f0:	strd	r6, [sl, #8]
    75f4:	strd	r6, [sl, #16]
    75f8:	strd	r6, [sl, #24]
    75fc:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7600:	bl	4608 <memset@plt>
    7604:	mov	r1, r5
    7608:	ldr	r0, [fp, #-484]	; 0xfffffe1c
    760c:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7610:	bl	4608 <memset@plt>
    7614:	mov	r1, r5
    7618:	mov	r2, #172	; 0xac
    761c:	mov	r0, r8
    7620:	bl	4608 <memset@plt>
    7624:	mov	r1, r5
    7628:	mov	r2, #172	; 0xac
    762c:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    7630:	bl	4608 <memset@plt>
    7634:	ldr	r3, [fp, #-508]	; 0xfffffe04
    7638:	cmp	r3, r5
    763c:	beq	7650 <rb_sha256_crypt_r+0xb48>
    7640:	mov	r2, r9
    7644:	mov	r1, r5
    7648:	mov	r0, r3
    764c:	bl	4608 <memset@plt>
    7650:	ldr	r3, [fp, #-512]	; 0xfffffe00
    7654:	cmp	r3, #0
    7658:	beq	766c <rb_sha256_crypt_r+0xb64>
    765c:	mov	r0, r3
    7660:	mov	r1, #0
    7664:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7668:	bl	4608 <memset@plt>
    766c:	mov	r0, r4
    7670:	sub	sp, fp, #32
    7674:	ldrd	r4, [sp]
    7678:	ldrd	r6, [sp, #8]
    767c:	ldrd	r8, [sp, #16]
    7680:	ldrd	sl, [sp, #24]
    7684:	add	sp, sp, #32
    7688:	pop	{pc}		; (ldr pc, [sp], #4)
    768c:	sub	r3, fp, #208	; 0xd0
    7690:	mov	r2, #10
    7694:	mov	r1, r3
    7698:	str	r3, [fp, #-452]	; 0xfffffe3c
    769c:	ldr	r3, [fp, #-456]	; 0xfffffe38
    76a0:	add	r0, r3, #7
    76a4:	bl	47dc <strtoul@plt>
    76a8:	ldr	r3, [fp, #-208]	; 0xffffff30
    76ac:	ldrb	r2, [r3]
    76b0:	cmp	r2, #36	; 0x24
    76b4:	movwne	r3, #5000	; 0x1388
    76b8:	strne	r3, [fp, #-480]	; 0xfffffe20
    76bc:	bne	6b98 <rb_sha256_crypt_r+0x90>
    76c0:	add	r3, r3, #1
    76c4:	movw	r2, #51711	; 0xc9ff
    76c8:	movt	r2, #15258	; 0x3b9a
    76cc:	cmp	r0, r2
    76d0:	str	r3, [fp, #-456]	; 0xfffffe38
    76d4:	movcc	r3, r0
    76d8:	movcs	r3, r2
    76dc:	cmp	r3, #1000	; 0x3e8
    76e0:	mov	r2, #1
    76e4:	movcc	r3, #1000	; 0x3e8
    76e8:	str	r2, [fp, #-500]	; 0xfffffe0c
    76ec:	str	r3, [fp, #-480]	; 0xfffffe20
    76f0:	b	6b98 <rb_sha256_crypt_r+0x90>
    76f4:	ldr	ip, [pc, #348]	; 7858 <rb_sha256_crypt_r+0xd50>
    76f8:	mov	r1, r3
    76fc:	mov	r0, r5
    7700:	str	r6, [sp]
    7704:	ldr	r2, [pc, #336]	; 785c <rb_sha256_crypt_r+0xd54>
    7708:	add	ip, pc, ip
    770c:	add	r3, ip, #1088	; 0x440
    7710:	add	r3, r3, #4
    7714:	add	r2, pc, r2
    7718:	bl	4b84 <snprintf@plt>
    771c:	sub	r4, r4, r0
    7720:	add	r5, r5, r0
    7724:	bic	r3, r4, r4, asr #31
    7728:	b	7140 <rb_sha256_crypt_r+0x638>
    772c:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7730:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7734:	add	r3, r2, #11
    7738:	bic	r3, r3, #7
    773c:	sub	sp, sp, r3
    7740:	add	r0, sp, #12
    7744:	bl	47e8 <memcpy@plt>
    7748:	str	r0, [fp, #-512]	; 0xfffffe00
    774c:	str	r0, [fp, #-456]	; 0xfffffe38
    7750:	b	6be0 <rb_sha256_crypt_r+0xd8>
    7754:	add	r3, r0, #11
    7758:	mov	r1, sl
    775c:	bic	r3, r3, #7
    7760:	mov	r2, r0
    7764:	sub	sp, sp, r3
    7768:	add	r0, sp, #12
    776c:	bl	47e8 <memcpy@plt>
    7770:	mov	sl, r0
    7774:	str	r0, [fp, #-508]	; 0xfffffe04
    7778:	b	6bd0 <rb_sha256_crypt_r+0xc8>
    777c:	bl	4cbc <__errno_location@plt>
    7780:	mov	r3, #34	; 0x22
    7784:	mov	r4, #0
    7788:	str	r3, [r0]
    778c:	b	7560 <rb_sha256_crypt_r+0xa58>
    7790:	mov	r2, r8
    7794:	mov	r1, r9
    7798:	mov	r0, r7
    779c:	bl	64f0 <rb_sha256_process_bytes>
    77a0:	cmp	r9, #0
    77a4:	bne	6d50 <rb_sha256_crypt_r+0x248>
    77a8:	mov	r1, r7
    77ac:	mov	r0, r8
    77b0:	bl	66c0 <rb_sha256_finish_ctx>
    77b4:	ldr	r3, [fp, #-460]	; 0xfffffe34
    77b8:	sub	sl, fp, #412	; 0x19c
    77bc:	mov	r1, sl
    77c0:	ldr	r0, [fp, #-452]	; 0xfffffe3c
    77c4:	str	r3, [fp, #-208]	; 0xffffff30
    77c8:	ldr	r3, [fp, #-464]	; 0xfffffe30
    77cc:	str	r3, [fp, #-204]	; 0xffffff34
    77d0:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    77d4:	str	r6, [fp, #-188]	; 0xffffff44
    77d8:	str	r5, [fp, #-184]	; 0xffffff48
    77dc:	str	r4, [fp, #-180]	; 0xffffff4c
    77e0:	str	r9, [fp, #-176]	; 0xffffff50
    77e4:	str	r3, [fp, #-200]	; 0xffffff38
    77e8:	ldr	r3, [fp, #-472]	; 0xfffffe28
    77ec:	str	r9, [fp, #-172]	; 0xffffff54
    77f0:	str	r9, [fp, #-168]	; 0xffffff58
    77f4:	str	r3, [fp, #-196]	; 0xffffff3c
    77f8:	ldr	r3, [fp, #-476]	; 0xfffffe24
    77fc:	str	r3, [fp, #-192]	; 0xffffff40
    7800:	bl	66c0 <rb_sha256_finish_ctx>
    7804:	add	r0, sp, #8
    7808:	mov	r2, r9
    780c:	str	r0, [fp, #-492]	; 0xfffffe14
    7810:	b	6e84 <rb_sha256_crypt_r+0x37c>
    7814:	mov	r2, r9
    7818:	ldr	r0, [fp, #-492]	; 0xfffffe14
    781c:	b	6e84 <rb_sha256_crypt_r+0x37c>
    7820:	.word	0x0000f578
    7824:	.word	0x0000f544
    7828:	.word	0x0000fd04
    782c:	.word	0x0000efa0
    7830:	.word	0x0000eedc
    7834:	.word	0x0000ee88
    7838:	.word	0x0000ee34
    783c:	.word	0x0000ede0
    7840:	.word	0x0000ed8c
    7844:	.word	0x0000ed38
    7848:	.word	0x0000ece4
    784c:	.word	0x0000ec90
    7850:	.word	0x0000ec3c
    7854:	.word	0x0000ebe8
    7858:	.word	0x0000e9a0
    785c:	.word	0x0000f194

00007860 <rb_sha512_crypt_r>:
    7860:	ldr	ip, [pc, #1232]	; 7d38 <rb_sha512_crypt_r+0x4d8>
    7864:	strd	r4, [sp, #-36]!	; 0xffffffdc
    7868:	mov	r5, r0
    786c:	mov	r4, r1
    7870:	strd	r6, [sp, #8]
    7874:	strd	r8, [sp, #16]
    7878:	strd	sl, [sp, #24]
    787c:	add	fp, sp, #32
    7880:	str	lr, [sp, #32]
    7884:	sub	sp, sp, #884	; 0x374
    7888:	add	ip, pc, ip
    788c:	add	r0, ip, #1168	; 0x490
    7890:	str	r3, [fp, #-888]	; 0xfffffc88
    7894:	str	r2, [fp, #-884]	; 0xfffffc8c
    7898:	mov	r2, #3
    789c:	str	r1, [fp, #-868]	; 0xfffffc9c
    78a0:	bl	4be4 <strncmp@plt>
    78a4:	ldr	r1, [pc, #1168]	; 7d3c <rb_sha512_crypt_r+0x4dc>
    78a8:	cmp	r0, #0
    78ac:	mov	r2, #7
    78b0:	addeq	r3, r4, #3
    78b4:	streq	r3, [fp, #-868]	; 0xfffffc9c
    78b8:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    78bc:	add	r1, pc, r1
    78c0:	add	r1, r1, #1168	; 0x490
    78c4:	add	r1, r1, #4
    78c8:	bl	4be4 <strncmp@plt>
    78cc:	subs	r3, r0, #0
    78d0:	str	r3, [fp, #-892]	; 0xfffffc84
    78d4:	beq	89b4 <rb_sha512_crypt_r+0x1154>
    78d8:	mov	r3, #0
    78dc:	str	r3, [fp, #-892]	; 0xfffffc84
    78e0:	movw	r3, #5000	; 0x1388
    78e4:	str	r3, [fp, #-872]	; 0xfffffc98
    78e8:	sub	r3, fp, #380	; 0x17c
    78ec:	str	r3, [fp, #-876]	; 0xfffffc94
    78f0:	ldr	r1, [pc, #1096]	; 7d40 <rb_sha512_crypt_r+0x4e0>
    78f4:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    78f8:	add	r1, pc, r1
    78fc:	bl	4bb4 <strcspn@plt>
    7900:	cmp	r0, #16
    7904:	movcc	r3, r0
    7908:	movcs	r3, #16
    790c:	mov	r0, r5
    7910:	str	r3, [fp, #-864]	; 0xfffffca0
    7914:	bl	47c4 <strlen@plt>
    7918:	ands	r3, r5, #7
    791c:	mov	sl, r0
    7920:	streq	r3, [fp, #-900]	; 0xfffffc7c
    7924:	bne	898c <rb_sha512_crypt_r+0x112c>
    7928:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    792c:	ands	r3, r3, #7
    7930:	streq	r3, [fp, #-904]	; 0xfffffc78
    7934:	bne	8964 <rb_sha512_crypt_r+0x1104>
    7938:	sub	r8, fp, #724	; 0x2d4
    793c:	mov	r6, #0
    7940:	mov	r7, #0
    7944:	sub	r4, fp, #372	; 0x174
    7948:	mov	r2, r8
    794c:	mov	r1, sl
    7950:	strd	r6, [r8, #64]	; 0x40
    7954:	sub	r7, fp, #852	; 0x354
    7958:	mov	r0, r5
    795c:	str	r7, [fp, #-856]	; 0xfffffca8
    7960:	add	r7, pc, #912	; 0x390
    7964:	ldrd	r6, [r7]
    7968:	strd	r6, [r8]
    796c:	add	r7, pc, #908	; 0x38c
    7970:	ldrd	r6, [r7]
    7974:	strd	r6, [r8, #8]
    7978:	add	r7, pc, #904	; 0x388
    797c:	ldrd	r6, [r7]
    7980:	strd	r6, [r8, #16]
    7984:	add	r7, pc, #900	; 0x384
    7988:	ldrd	r6, [r7]
    798c:	strd	r6, [r8, #24]
    7990:	add	r7, pc, #896	; 0x380
    7994:	ldrd	r6, [r7]
    7998:	strd	r6, [r8, #32]
    799c:	add	r7, pc, #892	; 0x37c
    79a0:	ldrd	r6, [r7]
    79a4:	strd	r6, [r8, #40]	; 0x28
    79a8:	mov	r6, #0
    79ac:	mov	r7, #0
    79b0:	strd	r6, [r8, #72]	; 0x48
    79b4:	add	r7, pc, #876	; 0x36c
    79b8:	ldrd	r6, [r7]
    79bc:	strd	r6, [r8, #48]	; 0x30
    79c0:	mov	r6, #0
    79c4:	mov	r7, #0
    79c8:	strd	r6, [r8, #80]	; 0x50
    79cc:	add	r7, pc, #860	; 0x35c
    79d0:	ldrd	r6, [r7]
    79d4:	strd	r6, [r8, #56]	; 0x38
    79d8:	add	r7, pc, #792	; 0x318
    79dc:	ldrd	r6, [r7]
    79e0:	bl	67c4 <rb_sha512_process_bytes>
    79e4:	mov	r2, r8
    79e8:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    79ec:	ldr	r1, [fp, #-864]	; 0xfffffca0
    79f0:	bl	67c4 <rb_sha512_process_bytes>
    79f4:	strd	r6, [r4, #-8]
    79f8:	mov	r1, sl
    79fc:	mov	r0, r5
    7a00:	add	r7, pc, #760	; 0x2f8
    7a04:	ldrd	r6, [r7]
    7a08:	ldr	r9, [fp, #-876]	; 0xfffffc94
    7a0c:	strd	r6, [r4]
    7a10:	add	r7, pc, #752	; 0x2f0
    7a14:	ldrd	r6, [r7]
    7a18:	mov	r2, r9
    7a1c:	strd	r6, [r4, #8]
    7a20:	add	r7, pc, #744	; 0x2e8
    7a24:	ldrd	r6, [r7]
    7a28:	strd	r6, [r4, #16]
    7a2c:	add	r7, pc, #740	; 0x2e4
    7a30:	ldrd	r6, [r7]
    7a34:	strd	r6, [r4, #24]
    7a38:	add	r7, pc, #736	; 0x2e0
    7a3c:	ldrd	r6, [r7]
    7a40:	strd	r6, [r4, #32]
    7a44:	add	r7, pc, #732	; 0x2dc
    7a48:	ldrd	r6, [r7]
    7a4c:	strd	r6, [r4, #40]	; 0x28
    7a50:	add	r7, pc, #728	; 0x2d8
    7a54:	ldrd	r6, [r7]
    7a58:	strd	r6, [r4, #48]	; 0x30
    7a5c:	mov	r7, #0
    7a60:	mov	r6, #0
    7a64:	strd	r6, [r4, #56]	; 0x38
    7a68:	strd	r6, [r4, #64]	; 0x40
    7a6c:	strd	r6, [r4, #72]	; 0x48
    7a70:	bl	67c4 <rb_sha512_process_bytes>
    7a74:	mov	r2, r9
    7a78:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    7a7c:	ldr	r1, [fp, #-864]	; 0xfffffca0
    7a80:	bl	67c4 <rb_sha512_process_bytes>
    7a84:	mov	r2, r9
    7a88:	mov	r1, sl
    7a8c:	mov	r0, r5
    7a90:	bl	67c4 <rb_sha512_process_bytes>
    7a94:	ldr	r7, [fp, #-856]	; 0xfffffca8
    7a98:	mov	r0, r9
    7a9c:	mov	r1, r7
    7aa0:	bl	6984 <rb_sha512_finish_ctx>
    7aa4:	cmp	sl, #64	; 0x40
    7aa8:	bls	8a1c <rb_sha512_crypt_r+0x11bc>
    7aac:	mov	r6, sl
    7ab0:	sub	r6, r6, #64	; 0x40
    7ab4:	mov	r2, r8
    7ab8:	mov	r1, #64	; 0x40
    7abc:	mov	r0, r7
    7ac0:	bl	67c4 <rb_sha512_process_bytes>
    7ac4:	cmp	r6, #64	; 0x40
    7ac8:	bhi	7ab0 <rb_sha512_crypt_r+0x250>
    7acc:	sub	r3, sl, #65	; 0x41
    7ad0:	sub	r1, sl, #64	; 0x40
    7ad4:	str	r7, [fp, #-856]	; 0xfffffca8
    7ad8:	bic	r3, r3, #63	; 0x3f
    7adc:	mov	r2, r8
    7ae0:	sub	r1, r1, r3
    7ae4:	mov	r0, r7
    7ae8:	bl	67c4 <rb_sha512_process_bytes>
    7aec:	ldr	r7, [fp, #-856]	; 0xfffffca8
    7af0:	mov	r6, sl
    7af4:	tst	r6, #1
    7af8:	mov	r1, sl
    7afc:	mov	r0, r5
    7b00:	movne	r1, #64	; 0x40
    7b04:	movne	r0, r7
    7b08:	mov	r2, r8
    7b0c:	bl	67c4 <rb_sha512_process_bytes>
    7b10:	lsrs	r6, r6, #1
    7b14:	bne	7af4 <rb_sha512_crypt_r+0x294>
    7b18:	mov	r1, r7
    7b1c:	mov	r0, r8
    7b20:	bl	6984 <rb_sha512_finish_ctx>
    7b24:	mov	r2, #0
    7b28:	mov	r3, #0
    7b2c:	add	r1, pc, #452	; 0x1c4
    7b30:	ldrd	r0, [r1]
    7b34:	ldr	r9, [fp, #-876]	; 0xfffffc94
    7b38:	strd	r2, [r4, #56]	; 0x38
    7b3c:	strd	r2, [r4, #64]	; 0x40
    7b40:	strd	r2, [r4, #72]	; 0x48
    7b44:	add	r3, pc, #436	; 0x1b4
    7b48:	ldrd	r2, [r3]
    7b4c:	strd	r0, [r4, #-8]
    7b50:	add	r1, pc, #432	; 0x1b0
    7b54:	ldrd	r0, [r1]
    7b58:	strd	r2, [r4]
    7b5c:	add	r3, pc, #428	; 0x1ac
    7b60:	ldrd	r2, [r3]
    7b64:	strd	r0, [r4, #8]
    7b68:	add	r1, pc, #440	; 0x1b8
    7b6c:	ldrd	r0, [r1]
    7b70:	strd	r2, [r4, #16]
    7b74:	add	r3, pc, #412	; 0x19c
    7b78:	ldrd	r2, [r3]
    7b7c:	strd	r2, [r4, #24]
    7b80:	add	r3, pc, #408	; 0x198
    7b84:	ldrd	r2, [r3]
    7b88:	strd	r0, [r4, #40]	; 0x28
    7b8c:	strd	r2, [r4, #32]
    7b90:	add	r3, pc, #408	; 0x198
    7b94:	ldrd	r2, [r3]
    7b98:	strd	r2, [r4, #48]	; 0x30
    7b9c:	add	r6, r6, #1
    7ba0:	mov	r2, r9
    7ba4:	mov	r1, sl
    7ba8:	mov	r0, r5
    7bac:	bl	67c4 <rb_sha512_process_bytes>
    7bb0:	cmp	sl, r6
    7bb4:	bhi	7b9c <rb_sha512_crypt_r+0x33c>
    7bb8:	sub	r9, fp, #788	; 0x314
    7bbc:	ldr	r0, [fp, #-876]	; 0xfffffc94
    7bc0:	mov	r1, r9
    7bc4:	str	r7, [fp, #-856]	; 0xfffffca8
    7bc8:	bl	6984 <rb_sha512_finish_ctx>
    7bcc:	add	r3, sl, #7
    7bd0:	cmp	sl, #63	; 0x3f
    7bd4:	bic	r3, r3, #7
    7bd8:	sub	sp, sp, r3
    7bdc:	add	r3, sp, #8
    7be0:	str	r3, [fp, #-860]	; 0xfffffca4
    7be4:	bls	8ad4 <rb_sha512_crypt_r+0x1274>
    7be8:	sub	lr, sl, #64	; 0x40
    7bec:	add	r0, sp, #72	; 0x48
    7bf0:	str	r4, [fp, #-880]	; 0xfffffc90
    7bf4:	lsr	lr, lr, #6
    7bf8:	add	ip, r3, lr, lsl #6
    7bfc:	add	ip, ip, #128	; 0x80
    7c00:	ldrd	r6, [r9]
    7c04:	sub	r1, r0, #64	; 0x40
    7c08:	add	r0, r0, #64	; 0x40
    7c0c:	ldrd	r2, [r9, #8]
    7c10:	ldrd	r4, [r9, #32]
    7c14:	strd	r6, [r0, #-128]	; 0xffffff80
    7c18:	cmp	ip, r0
    7c1c:	ldrd	r6, [r9, #16]
    7c20:	strd	r2, [r1, #8]
    7c24:	ldrd	r2, [r9, #24]
    7c28:	strd	r6, [r1, #16]
    7c2c:	ldrd	r6, [r9, #40]	; 0x28
    7c30:	strd	r2, [r1, #24]
    7c34:	ldrd	r2, [r9, #48]	; 0x30
    7c38:	strd	r4, [r1, #32]
    7c3c:	strd	r6, [r1, #40]	; 0x28
    7c40:	strd	r2, [r1, #48]	; 0x30
    7c44:	ldrd	r2, [r9, #56]	; 0x38
    7c48:	strd	r2, [r1, #56]	; 0x38
    7c4c:	bne	7c00 <rb_sha512_crypt_r+0x3a0>
    7c50:	ldr	r4, [fp, #-880]	; 0xfffffc90
    7c54:	add	r0, lr, #1
    7c58:	and	r2, sl, #63	; 0x3f
    7c5c:	ldr	r3, [fp, #-860]	; 0xfffffca4
    7c60:	add	r0, r3, r0, lsl #6
    7c64:	mov	r1, r9
    7c68:	add	r7, pc, #176	; 0xb0
    7c6c:	ldrd	r6, [r7]
    7c70:	mov	r5, #0
    7c74:	bl	47e8 <memcpy@plt>
    7c78:	mov	r2, #0
    7c7c:	mov	r3, #0
    7c80:	add	r1, pc, #112	; 0x70
    7c84:	ldrd	r0, [r1]
    7c88:	strd	r2, [r4, #56]	; 0x38
    7c8c:	strd	r2, [r4, #64]	; 0x40
    7c90:	strd	r2, [r4, #72]	; 0x48
    7c94:	add	r3, pc, #100	; 0x64
    7c98:	ldrd	r2, [r3]
    7c9c:	strd	r0, [r4, #-8]
    7ca0:	add	r1, pc, #96	; 0x60
    7ca4:	ldrd	r0, [r1]
    7ca8:	strd	r2, [r4]
    7cac:	add	r3, pc, #92	; 0x5c
    7cb0:	ldrd	r2, [r3]
    7cb4:	strd	r0, [r4, #8]
    7cb8:	add	r1, pc, #104	; 0x68
    7cbc:	ldrd	r0, [r1]
    7cc0:	strd	r2, [r4, #16]
    7cc4:	add	r3, pc, #76	; 0x4c
    7cc8:	ldrd	r2, [r3]
    7ccc:	strd	r2, [r4, #24]
    7cd0:	add	r3, pc, #88	; 0x58
    7cd4:	ldrd	r2, [r3]
    7cd8:	strd	r6, [r4, #32]
    7cdc:	mov	r7, r5
    7ce0:	strd	r0, [r4, #40]	; 0x28
    7ce4:	ldr	r5, [fp, #-876]	; 0xfffffc94
    7ce8:	strd	r2, [r4, #48]	; 0x30
    7cec:	ldr	r6, [fp, #-868]	; 0xfffffc9c
    7cf0:	ldr	r4, [fp, #-864]	; 0xfffffca0
    7cf4:	b	7d44 <rb_sha512_crypt_r+0x4e4>
    7cf8:	.word	0xf3bcc908
    7cfc:	.word	0x6a09e667
    7d00:	.word	0x84caa73b
    7d04:	.word	0xbb67ae85
    7d08:	.word	0xfe94f82b
    7d0c:	.word	0x3c6ef372
    7d10:	.word	0x5f1d36f1
    7d14:	.word	0xa54ff53a
    7d18:	.word	0xade682d1
    7d1c:	.word	0x510e527f
    7d20:	.word	0x2b3e6c1f
    7d24:	.word	0x9b05688c
    7d28:	.word	0xfb41bd6b
    7d2c:	.word	0x1f83d9ab
    7d30:	.word	0x137e2179
    7d34:	.word	0x5be0cd19
    7d38:	.word	0x0000e820
    7d3c:	.word	0x0000e7ec
    7d40:	.word	0x0000efac
    7d44:	mov	r2, r5
    7d48:	mov	r1, r4
    7d4c:	mov	r0, r6
    7d50:	add	r7, r7, #1
    7d54:	bl	67c4 <rb_sha512_process_bytes>
    7d58:	ldrb	r2, [fp, #-852]	; 0xfffffcac
    7d5c:	add	r2, r2, #16
    7d60:	cmp	r2, r7
    7d64:	bhi	7d44 <rb_sha512_crypt_r+0x4e4>
    7d68:	mov	r1, r9
    7d6c:	ldr	r0, [fp, #-876]	; 0xfffffc94
    7d70:	mov	r4, #0
    7d74:	bl	6984 <rb_sha512_finish_ctx>
    7d78:	ldr	r2, [fp, #-864]	; 0xfffffca0
    7d7c:	mov	r1, r9
    7d80:	add	r3, r2, #7
    7d84:	bic	r3, r3, #7
    7d88:	sub	sp, sp, r3
    7d8c:	add	r3, sp, #8
    7d90:	mov	r0, r3
    7d94:	str	r3, [fp, #-880]	; 0xfffffc90
    7d98:	bl	47e8 <memcpy@plt>
    7d9c:	str	r9, [fp, #-896]	; 0xfffffc80
    7da0:	ldr	r9, [fp, #-856]	; 0xfffffca8
    7da4:	b	7e04 <rb_sha512_crypt_r+0x5a4>
    7da8:	movw	r3, #18725	; 0x4925
    7dac:	movt	r3, #9362	; 0x2492
    7db0:	umull	r2, r3, r3, r4
    7db4:	sub	r2, r4, r3
    7db8:	add	r3, r3, r2, lsr #1
    7dbc:	lsr	r3, r3, #2
    7dc0:	rsb	r3, r3, r3, lsl #3
    7dc4:	cmp	r4, r3
    7dc8:	bne	7ec4 <rb_sha512_crypt_r+0x664>
    7dcc:	cmp	r5, #0
    7dd0:	mov	r2, r8
    7dd4:	movne	r1, #64	; 0x40
    7dd8:	movne	r0, r9
    7ddc:	ldreq	r0, [fp, #-860]	; 0xfffffca4
    7de0:	moveq	r1, sl
    7de4:	add	r4, r4, #1
    7de8:	bl	67c4 <rb_sha512_process_bytes>
    7dec:	mov	r1, r9
    7df0:	mov	r0, r8
    7df4:	bl	6984 <rb_sha512_finish_ctx>
    7df8:	ldr	r3, [fp, #-872]	; 0xfffffc98
    7dfc:	cmp	r3, r4
    7e00:	beq	7f70 <rb_sha512_crypt_r+0x710>
    7e04:	add	r1, pc, #204	; 0xcc
    7e08:	ldrd	r0, [r1]
    7e0c:	ands	r5, r4, #1
    7e10:	add	r3, pc, #200	; 0xc8
    7e14:	ldrd	r2, [r3]
    7e18:	add	r7, pc, #200	; 0xc8
    7e1c:	ldrd	r6, [r7]
    7e20:	strd	r0, [r8, #8]
    7e24:	add	r1, pc, #196	; 0xc4
    7e28:	ldrd	r0, [r1]
    7e2c:	strd	r2, [r8]
    7e30:	mov	r3, #0
    7e34:	mov	r2, #0
    7e38:	strd	r0, [r8, #16]
    7e3c:	add	r1, pc, #180	; 0xb4
    7e40:	ldrd	r0, [r1]
    7e44:	strd	r2, [r8, #64]	; 0x40
    7e48:	strd	r2, [r8, #72]	; 0x48
    7e4c:	strd	r2, [r8, #80]	; 0x50
    7e50:	mov	r2, r8
    7e54:	strd	r6, [r8, #24]
    7e58:	strd	r0, [r8, #32]
    7e5c:	add	r1, pc, #156	; 0x9c
    7e60:	ldrd	r0, [r1]
    7e64:	strd	r0, [r8, #40]	; 0x28
    7e68:	add	r1, pc, #152	; 0x98
    7e6c:	ldrd	r0, [r1]
    7e70:	strd	r0, [r8, #48]	; 0x30
    7e74:	add	r1, pc, #148	; 0x94
    7e78:	ldrd	r0, [r1]
    7e7c:	strd	r0, [r8, #56]	; 0x38
    7e80:	movne	r1, sl
    7e84:	moveq	r1, #64	; 0x40
    7e88:	ldrne	r0, [fp, #-860]	; 0xfffffca4
    7e8c:	moveq	r0, r9
    7e90:	bl	67c4 <rb_sha512_process_bytes>
    7e94:	movw	r3, #43691	; 0xaaab
    7e98:	movt	r3, #43690	; 0xaaaa
    7e9c:	umull	r2, r3, r3, r4
    7ea0:	lsr	r3, r3, #1
    7ea4:	add	r3, r3, r3, lsl #1
    7ea8:	cmp	r4, r3
    7eac:	beq	7da8 <rb_sha512_crypt_r+0x548>
    7eb0:	mov	r2, r8
    7eb4:	ldr	r0, [fp, #-880]	; 0xfffffc90
    7eb8:	ldr	r1, [fp, #-864]	; 0xfffffca0
    7ebc:	bl	67c4 <rb_sha512_process_bytes>
    7ec0:	b	7da8 <rb_sha512_crypt_r+0x548>
    7ec4:	mov	r2, r8
    7ec8:	mov	r1, sl
    7ecc:	ldr	r0, [fp, #-860]	; 0xfffffca4
    7ed0:	bl	67c4 <rb_sha512_process_bytes>
    7ed4:	b	7dcc <rb_sha512_crypt_r+0x56c>
    7ed8:	.word	0x84caa73b
    7edc:	.word	0xbb67ae85
    7ee0:	.word	0xf3bcc908
    7ee4:	.word	0x6a09e667
    7ee8:	.word	0x5f1d36f1
    7eec:	.word	0xa54ff53a
    7ef0:	.word	0xfe94f82b
    7ef4:	.word	0x3c6ef372
    7ef8:	.word	0xade682d1
    7efc:	.word	0x510e527f
    7f00:	.word	0x2b3e6c1f
    7f04:	.word	0x9b05688c
    7f08:	.word	0xfb41bd6b
    7f0c:	.word	0x1f83d9ab
    7f10:	.word	0x137e2179
    7f14:	.word	0x5be0cd19
    7f18:	.word	0x0000e108
    7f1c:	.word	0x0000e048
    7f20:	.word	0x0000dff0
    7f24:	.word	0x0000df98
    7f28:	.word	0x0000df40
    7f2c:	.word	0x0000dee8
    7f30:	.word	0x0000de90
    7f34:	.word	0x0000de38
    7f38:	.word	0x0000dde0
    7f3c:	.word	0x0000dd88
    7f40:	.word	0x0000dd30
    7f44:	.word	0x0000dcd8
    7f48:	.word	0x0000dc80
    7f4c:	.word	0x0000dc28
    7f50:	.word	0x0000dbd0
    7f54:	.word	0x0000db78
    7f58:	.word	0x0000db20
    7f5c:	.word	0x0000dac8
    7f60:	.word	0x0000da70
    7f64:	.word	0x0000da18
    7f68:	.word	0x0000d9c0
    7f6c:	.word	0x0000d940
    7f70:	ldr	r3, [fp, #-888]	; 0xfffffc88
    7f74:	mov	r1, #0
    7f78:	str	r9, [fp, #-856]	; 0xfffffca8
    7f7c:	ldr	r9, [fp, #-896]	; 0xfffffc80
    7f80:	ldr	r6, [fp, #-884]	; 0xfffffc8c
    7f84:	bic	r5, r3, r3, asr #31
    7f88:	mov	r2, r5
    7f8c:	mov	r0, r6
    7f90:	bl	4608 <memset@plt>
    7f94:	ldr	r1, [pc, #-132]	; 7f18 <rb_sha512_crypt_r+0x6b8>
    7f98:	mov	r2, r5
    7f9c:	mov	r0, r6
    7fa0:	add	r1, pc, r1
    7fa4:	add	r1, r1, #1168	; 0x490
    7fa8:	bl	4548 <strncpy@plt>
    7fac:	mov	r0, r6
    7fb0:	bl	47c4 <strlen@plt>
    7fb4:	adds	r6, r6, r0
    7fb8:	ldreq	r3, [fp, #-884]	; 0xfffffc8c
    7fbc:	addeq	r6, r3, r5
    7fc0:	ldr	r3, [fp, #-888]	; 0xfffffc88
    7fc4:	sub	r5, r3, #3
    7fc8:	ldr	r3, [fp, #-892]	; 0xfffffc84
    7fcc:	bic	r2, r5, r5, asr #31
    7fd0:	cmp	r3, #0
    7fd4:	bne	892c <rb_sha512_crypt_r+0x10cc>
    7fd8:	ldr	r3, [fp, #-864]	; 0xfffffca0
    7fdc:	mov	r1, #0
    7fe0:	mov	r0, r6
    7fe4:	cmp	r3, r2
    7fe8:	movcc	r4, r3
    7fec:	movcs	r4, r2
    7ff0:	mov	r2, r4
    7ff4:	sub	r5, r5, r4
    7ff8:	bl	4608 <memset@plt>
    7ffc:	mov	r2, r4
    8000:	mov	r0, r6
    8004:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    8008:	bl	4548 <strncpy@plt>
    800c:	ldr	r6, [fp, #-884]	; 0xfffffc8c
    8010:	mov	r0, r6
    8014:	bl	47c4 <strlen@plt>
    8018:	adds	r0, r6, r0
    801c:	ldreq	r2, [fp, #-864]	; 0xfffffca0
    8020:	addeq	r0, r6, r2
    8024:	cmp	r5, #0
    8028:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    802c:	ldrb	r1, [fp, #-831]	; 0xfffffcc1
    8030:	mov	r2, #36	; 0x24
    8034:	mov	r3, r0
    8038:	subs	r5, r5, #1
    803c:	ldrb	lr, [fp, #-852]	; 0xfffffcac
    8040:	strb	r2, [r3], #1
    8044:	ldrb	ip, [fp, #-810]	; 0xfffffcd6
    8048:	lsl	r2, r1, #8
    804c:	orr	r2, r2, lr, lsl #16
    8050:	orr	r2, r2, ip
    8054:	beq	8918 <rb_sha512_crypt_r+0x10b8>
    8058:	ldr	lr, [pc, #-324]	; 7f1c <rb_sha512_crypt_r+0x6bc>
    805c:	ldr	r7, [fp, #-856]	; 0xfffffca8
    8060:	add	lr, pc, lr
    8064:	and	r1, r2, #63	; 0x3f
    8068:	sub	r5, r5, #1
    806c:	lsr	r2, r2, #6
    8070:	add	r1, lr, r1
    8074:	ldrb	r1, [r1, #1100]	; 0x44c
    8078:	strb	r1, [r3], #1
    807c:	sub	r1, r3, #5
    8080:	mov	ip, r3
    8084:	cmp	r0, r1
    8088:	cmpne	r5, #0
    808c:	bgt	8064 <rb_sha512_crypt_r+0x804>
    8090:	ldrb	r2, [fp, #-809]	; 0xfffffcd7
    8094:	cmp	r5, #0
    8098:	str	r7, [fp, #-856]	; 0xfffffca8
    809c:	ldrb	r0, [fp, #-830]	; 0xfffffcc2
    80a0:	ldrb	r1, [fp, #-851]	; 0xfffffcad
    80a4:	lsl	r2, r2, #8
    80a8:	orr	r2, r2, r0, lsl #16
    80ac:	orr	r2, r2, r1
    80b0:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    80b4:	ldr	lr, [pc, #-412]	; 7f20 <rb_sha512_crypt_r+0x6c0>
    80b8:	add	lr, pc, lr
    80bc:	and	r1, r2, #63	; 0x3f
    80c0:	sub	r5, r5, #1
    80c4:	lsr	r2, r2, #6
    80c8:	add	r1, lr, r1
    80cc:	ldrb	r1, [r1, #1100]	; 0x44c
    80d0:	strb	r1, [r3], #1
    80d4:	sub	r0, r3, #4
    80d8:	mov	r1, r3
    80dc:	cmp	ip, r0
    80e0:	cmpne	r5, #0
    80e4:	bgt	80bc <rb_sha512_crypt_r+0x85c>
    80e8:	ldrb	r2, [fp, #-850]	; 0xfffffcae
    80ec:	cmp	r5, #0
    80f0:	str	r7, [fp, #-856]	; 0xfffffca8
    80f4:	ldrb	ip, [fp, #-808]	; 0xfffffcd8
    80f8:	ldrb	r0, [fp, #-829]	; 0xfffffcc3
    80fc:	lsl	r2, r2, #8
    8100:	orr	r2, r2, ip, lsl #16
    8104:	orr	r2, r2, r0
    8108:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    810c:	ldr	lr, [pc, #-496]	; 7f24 <rb_sha512_crypt_r+0x6c4>
    8110:	add	lr, pc, lr
    8114:	and	r0, r2, #63	; 0x3f
    8118:	sub	r5, r5, #1
    811c:	lsr	r2, r2, #6
    8120:	add	r0, lr, r0
    8124:	ldrb	r0, [r0, #1100]	; 0x44c
    8128:	strb	r0, [r3], #1
    812c:	sub	ip, r3, #4
    8130:	mov	r0, r3
    8134:	cmp	r1, ip
    8138:	cmpne	r5, #0
    813c:	bgt	8114 <rb_sha512_crypt_r+0x8b4>
    8140:	ldrb	r2, [fp, #-828]	; 0xfffffcc4
    8144:	cmp	r5, #0
    8148:	str	r7, [fp, #-856]	; 0xfffffca8
    814c:	ldrb	ip, [fp, #-849]	; 0xfffffcaf
    8150:	ldrb	r1, [fp, #-807]	; 0xfffffcd9
    8154:	lsl	r2, r2, #8
    8158:	orr	r2, r2, ip, lsl #16
    815c:	orr	r2, r2, r1
    8160:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8164:	ldr	lr, [pc, #-580]	; 7f28 <rb_sha512_crypt_r+0x6c8>
    8168:	add	lr, pc, lr
    816c:	and	r1, r2, #63	; 0x3f
    8170:	sub	r5, r5, #1
    8174:	lsr	r2, r2, #6
    8178:	add	r1, lr, r1
    817c:	ldrb	r1, [r1, #1100]	; 0x44c
    8180:	strb	r1, [r3], #1
    8184:	sub	ip, r3, #4
    8188:	mov	r1, r3
    818c:	cmp	r0, ip
    8190:	cmpne	r5, #0
    8194:	bgt	816c <rb_sha512_crypt_r+0x90c>
    8198:	ldrb	r2, [fp, #-806]	; 0xfffffcda
    819c:	cmp	r5, #0
    81a0:	str	r7, [fp, #-856]	; 0xfffffca8
    81a4:	ldrb	ip, [fp, #-827]	; 0xfffffcc5
    81a8:	ldrb	r0, [fp, #-848]	; 0xfffffcb0
    81ac:	lsl	r2, r2, #8
    81b0:	orr	r2, r2, ip, lsl #16
    81b4:	orr	r2, r2, r0
    81b8:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    81bc:	ldr	lr, [pc, #-664]	; 7f2c <rb_sha512_crypt_r+0x6cc>
    81c0:	add	lr, pc, lr
    81c4:	and	r0, r2, #63	; 0x3f
    81c8:	sub	r5, r5, #1
    81cc:	lsr	r2, r2, #6
    81d0:	add	r0, lr, r0
    81d4:	ldrb	r0, [r0, #1100]	; 0x44c
    81d8:	strb	r0, [r3], #1
    81dc:	sub	ip, r3, #4
    81e0:	mov	r0, r3
    81e4:	cmp	r1, ip
    81e8:	cmpne	r5, #0
    81ec:	bgt	81c4 <rb_sha512_crypt_r+0x964>
    81f0:	ldrb	r2, [fp, #-847]	; 0xfffffcb1
    81f4:	cmp	r5, #0
    81f8:	str	r7, [fp, #-856]	; 0xfffffca8
    81fc:	ldrb	ip, [fp, #-805]	; 0xfffffcdb
    8200:	ldrb	r1, [fp, #-826]	; 0xfffffcc6
    8204:	lsl	r2, r2, #8
    8208:	orr	r2, r2, ip, lsl #16
    820c:	orr	r2, r2, r1
    8210:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8214:	ldr	lr, [pc, #-748]	; 7f30 <rb_sha512_crypt_r+0x6d0>
    8218:	add	lr, pc, lr
    821c:	and	r1, r2, #63	; 0x3f
    8220:	sub	r5, r5, #1
    8224:	lsr	r2, r2, #6
    8228:	add	r1, lr, r1
    822c:	ldrb	r1, [r1, #1100]	; 0x44c
    8230:	strb	r1, [r3], #1
    8234:	sub	ip, r3, #4
    8238:	mov	r1, r3
    823c:	cmp	r0, ip
    8240:	cmpne	r5, #0
    8244:	bgt	821c <rb_sha512_crypt_r+0x9bc>
    8248:	ldrb	r2, [fp, #-825]	; 0xfffffcc7
    824c:	cmp	r5, #0
    8250:	str	r7, [fp, #-856]	; 0xfffffca8
    8254:	ldrb	ip, [fp, #-846]	; 0xfffffcb2
    8258:	ldrb	r0, [fp, #-804]	; 0xfffffcdc
    825c:	lsl	r2, r2, #8
    8260:	orr	r2, r2, ip, lsl #16
    8264:	orr	r2, r2, r0
    8268:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    826c:	ldr	lr, [pc, #-832]	; 7f34 <rb_sha512_crypt_r+0x6d4>
    8270:	add	lr, pc, lr
    8274:	and	r0, r2, #63	; 0x3f
    8278:	sub	r5, r5, #1
    827c:	lsr	r2, r2, #6
    8280:	add	r0, lr, r0
    8284:	ldrb	r0, [r0, #1100]	; 0x44c
    8288:	strb	r0, [r3], #1
    828c:	sub	ip, r3, #4
    8290:	mov	r0, r3
    8294:	cmp	r1, ip
    8298:	cmpne	r5, #0
    829c:	bgt	8274 <rb_sha512_crypt_r+0xa14>
    82a0:	ldrb	r2, [fp, #-803]	; 0xfffffcdd
    82a4:	cmp	r5, #0
    82a8:	str	r7, [fp, #-856]	; 0xfffffca8
    82ac:	ldrb	ip, [fp, #-824]	; 0xfffffcc8
    82b0:	ldrb	r1, [fp, #-845]	; 0xfffffcb3
    82b4:	lsl	r2, r2, #8
    82b8:	orr	r2, r2, ip, lsl #16
    82bc:	orr	r2, r2, r1
    82c0:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    82c4:	ldr	lr, [pc, #-916]	; 7f38 <rb_sha512_crypt_r+0x6d8>
    82c8:	add	lr, pc, lr
    82cc:	and	r1, r2, #63	; 0x3f
    82d0:	sub	r5, r5, #1
    82d4:	lsr	r2, r2, #6
    82d8:	add	r1, lr, r1
    82dc:	ldrb	r1, [r1, #1100]	; 0x44c
    82e0:	strb	r1, [r3], #1
    82e4:	sub	ip, r3, #4
    82e8:	mov	r1, r3
    82ec:	cmp	r0, ip
    82f0:	cmpne	r5, #0
    82f4:	bgt	82cc <rb_sha512_crypt_r+0xa6c>
    82f8:	ldrb	r2, [fp, #-844]	; 0xfffffcb4
    82fc:	cmp	r5, #0
    8300:	str	r7, [fp, #-856]	; 0xfffffca8
    8304:	ldrb	ip, [fp, #-802]	; 0xfffffcde
    8308:	ldrb	r0, [fp, #-823]	; 0xfffffcc9
    830c:	lsl	r2, r2, #8
    8310:	orr	r2, r2, ip, lsl #16
    8314:	orr	r2, r2, r0
    8318:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    831c:	ldr	lr, [pc, #-1000]	; 7f3c <rb_sha512_crypt_r+0x6dc>
    8320:	add	lr, pc, lr
    8324:	and	r0, r2, #63	; 0x3f
    8328:	sub	r5, r5, #1
    832c:	lsr	r2, r2, #6
    8330:	add	r0, lr, r0
    8334:	ldrb	r0, [r0, #1100]	; 0x44c
    8338:	strb	r0, [r3], #1
    833c:	sub	ip, r3, #4
    8340:	mov	r0, r3
    8344:	cmp	r1, ip
    8348:	cmpne	r5, #0
    834c:	bgt	8324 <rb_sha512_crypt_r+0xac4>
    8350:	ldrb	r2, [fp, #-822]	; 0xfffffcca
    8354:	cmp	r5, #0
    8358:	str	r7, [fp, #-856]	; 0xfffffca8
    835c:	ldrb	ip, [fp, #-843]	; 0xfffffcb5
    8360:	ldrb	r1, [fp, #-801]	; 0xfffffcdf
    8364:	lsl	r2, r2, #8
    8368:	orr	r2, r2, ip, lsl #16
    836c:	orr	r2, r2, r1
    8370:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8374:	ldr	lr, [pc, #-1084]	; 7f40 <rb_sha512_crypt_r+0x6e0>
    8378:	add	lr, pc, lr
    837c:	and	r1, r2, #63	; 0x3f
    8380:	sub	r5, r5, #1
    8384:	lsr	r2, r2, #6
    8388:	add	r1, lr, r1
    838c:	ldrb	r1, [r1, #1100]	; 0x44c
    8390:	strb	r1, [r3], #1
    8394:	sub	ip, r3, #4
    8398:	mov	r1, r3
    839c:	cmp	r0, ip
    83a0:	cmpne	r5, #0
    83a4:	bgt	837c <rb_sha512_crypt_r+0xb1c>
    83a8:	ldrb	r2, [fp, #-800]	; 0xfffffce0
    83ac:	cmp	r5, #0
    83b0:	str	r7, [fp, #-856]	; 0xfffffca8
    83b4:	ldrb	ip, [fp, #-821]	; 0xfffffccb
    83b8:	ldrb	r0, [fp, #-842]	; 0xfffffcb6
    83bc:	lsl	r2, r2, #8
    83c0:	orr	r2, r2, ip, lsl #16
    83c4:	orr	r2, r2, r0
    83c8:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    83cc:	ldr	lr, [pc, #-1168]	; 7f44 <rb_sha512_crypt_r+0x6e4>
    83d0:	add	lr, pc, lr
    83d4:	and	r0, r2, #63	; 0x3f
    83d8:	sub	r5, r5, #1
    83dc:	lsr	r2, r2, #6
    83e0:	add	r0, lr, r0
    83e4:	ldrb	r0, [r0, #1100]	; 0x44c
    83e8:	strb	r0, [r3], #1
    83ec:	sub	ip, r3, #4
    83f0:	mov	r0, r3
    83f4:	cmp	r1, ip
    83f8:	cmpne	r5, #0
    83fc:	bgt	83d4 <rb_sha512_crypt_r+0xb74>
    8400:	ldrb	r2, [fp, #-841]	; 0xfffffcb7
    8404:	cmp	r5, #0
    8408:	str	r7, [fp, #-856]	; 0xfffffca8
    840c:	ldrb	ip, [fp, #-799]	; 0xfffffce1
    8410:	ldrb	r1, [fp, #-820]	; 0xfffffccc
    8414:	lsl	r2, r2, #8
    8418:	orr	r2, r2, ip, lsl #16
    841c:	orr	r2, r2, r1
    8420:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8424:	ldr	lr, [pc, #-1252]	; 7f48 <rb_sha512_crypt_r+0x6e8>
    8428:	add	lr, pc, lr
    842c:	and	r1, r2, #63	; 0x3f
    8430:	sub	r5, r5, #1
    8434:	lsr	r2, r2, #6
    8438:	add	r1, lr, r1
    843c:	ldrb	r1, [r1, #1100]	; 0x44c
    8440:	strb	r1, [r3], #1
    8444:	sub	ip, r3, #4
    8448:	mov	r1, r3
    844c:	cmp	r0, ip
    8450:	cmpne	r5, #0
    8454:	bgt	842c <rb_sha512_crypt_r+0xbcc>
    8458:	ldrb	r2, [fp, #-819]	; 0xfffffccd
    845c:	cmp	r5, #0
    8460:	str	r7, [fp, #-856]	; 0xfffffca8
    8464:	ldrb	ip, [fp, #-840]	; 0xfffffcb8
    8468:	ldrb	r0, [fp, #-798]	; 0xfffffce2
    846c:	lsl	r2, r2, #8
    8470:	orr	r2, r2, ip, lsl #16
    8474:	orr	r2, r2, r0
    8478:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    847c:	ldr	lr, [pc, #-1336]	; 7f4c <rb_sha512_crypt_r+0x6ec>
    8480:	add	lr, pc, lr
    8484:	and	r0, r2, #63	; 0x3f
    8488:	sub	r5, r5, #1
    848c:	lsr	r2, r2, #6
    8490:	add	r0, lr, r0
    8494:	ldrb	r0, [r0, #1100]	; 0x44c
    8498:	strb	r0, [r3], #1
    849c:	sub	ip, r3, #4
    84a0:	mov	r0, r3
    84a4:	cmp	r1, ip
    84a8:	cmpne	r5, #0
    84ac:	bgt	8484 <rb_sha512_crypt_r+0xc24>
    84b0:	ldrb	r2, [fp, #-797]	; 0xfffffce3
    84b4:	cmp	r5, #0
    84b8:	str	r7, [fp, #-856]	; 0xfffffca8
    84bc:	ldrb	ip, [fp, #-818]	; 0xfffffcce
    84c0:	ldrb	r1, [fp, #-839]	; 0xfffffcb9
    84c4:	lsl	r2, r2, #8
    84c8:	orr	r2, r2, ip, lsl #16
    84cc:	orr	r2, r2, r1
    84d0:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    84d4:	ldr	lr, [pc, #-1420]	; 7f50 <rb_sha512_crypt_r+0x6f0>
    84d8:	add	lr, pc, lr
    84dc:	and	r1, r2, #63	; 0x3f
    84e0:	sub	r5, r5, #1
    84e4:	lsr	r2, r2, #6
    84e8:	add	r1, lr, r1
    84ec:	ldrb	r1, [r1, #1100]	; 0x44c
    84f0:	strb	r1, [r3], #1
    84f4:	sub	ip, r3, #4
    84f8:	mov	r1, r3
    84fc:	cmp	r0, ip
    8500:	cmpne	r5, #0
    8504:	bgt	84dc <rb_sha512_crypt_r+0xc7c>
    8508:	ldrb	r2, [fp, #-838]	; 0xfffffcba
    850c:	cmp	r5, #0
    8510:	str	r7, [fp, #-856]	; 0xfffffca8
    8514:	ldrb	ip, [fp, #-796]	; 0xfffffce4
    8518:	ldrb	r0, [fp, #-817]	; 0xfffffccf
    851c:	lsl	r2, r2, #8
    8520:	orr	r2, r2, ip, lsl #16
    8524:	orr	r2, r2, r0
    8528:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    852c:	ldr	lr, [pc, #-1504]	; 7f54 <rb_sha512_crypt_r+0x6f4>
    8530:	add	lr, pc, lr
    8534:	and	r0, r2, #63	; 0x3f
    8538:	sub	r5, r5, #1
    853c:	lsr	r2, r2, #6
    8540:	add	r0, lr, r0
    8544:	ldrb	r0, [r0, #1100]	; 0x44c
    8548:	strb	r0, [r3], #1
    854c:	sub	ip, r3, #4
    8550:	mov	r0, r3
    8554:	cmp	r1, ip
    8558:	cmpne	r5, #0
    855c:	bgt	8534 <rb_sha512_crypt_r+0xcd4>
    8560:	ldrb	r2, [fp, #-816]	; 0xfffffcd0
    8564:	cmp	r5, #0
    8568:	str	r7, [fp, #-856]	; 0xfffffca8
    856c:	ldrb	ip, [fp, #-837]	; 0xfffffcbb
    8570:	ldrb	r1, [fp, #-795]	; 0xfffffce5
    8574:	lsl	r2, r2, #8
    8578:	orr	r2, r2, ip, lsl #16
    857c:	orr	r2, r2, r1
    8580:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8584:	ldr	lr, [pc, #-1588]	; 7f58 <rb_sha512_crypt_r+0x6f8>
    8588:	add	lr, pc, lr
    858c:	and	r1, r2, #63	; 0x3f
    8590:	sub	r5, r5, #1
    8594:	lsr	r2, r2, #6
    8598:	add	r1, lr, r1
    859c:	ldrb	r1, [r1, #1100]	; 0x44c
    85a0:	strb	r1, [r3], #1
    85a4:	sub	ip, r3, #4
    85a8:	mov	r1, r3
    85ac:	cmp	r0, ip
    85b0:	cmpne	r5, #0
    85b4:	bgt	858c <rb_sha512_crypt_r+0xd2c>
    85b8:	ldrb	r2, [fp, #-794]	; 0xfffffce6
    85bc:	cmp	r5, #0
    85c0:	str	r7, [fp, #-856]	; 0xfffffca8
    85c4:	ldrb	ip, [fp, #-815]	; 0xfffffcd1
    85c8:	ldrb	r0, [fp, #-836]	; 0xfffffcbc
    85cc:	lsl	r2, r2, #8
    85d0:	orr	r2, r2, ip, lsl #16
    85d4:	orr	r2, r2, r0
    85d8:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    85dc:	ldr	lr, [pc, #-1672]	; 7f5c <rb_sha512_crypt_r+0x6fc>
    85e0:	add	lr, pc, lr
    85e4:	and	r0, r2, #63	; 0x3f
    85e8:	sub	r5, r5, #1
    85ec:	lsr	r2, r2, #6
    85f0:	add	r0, lr, r0
    85f4:	ldrb	r0, [r0, #1100]	; 0x44c
    85f8:	strb	r0, [r3], #1
    85fc:	sub	ip, r3, #4
    8600:	mov	r0, r3
    8604:	cmp	r1, ip
    8608:	cmpne	r5, #0
    860c:	bgt	85e4 <rb_sha512_crypt_r+0xd84>
    8610:	ldrb	r2, [fp, #-835]	; 0xfffffcbd
    8614:	cmp	r5, #0
    8618:	str	r7, [fp, #-856]	; 0xfffffca8
    861c:	ldrb	ip, [fp, #-793]	; 0xfffffce7
    8620:	ldrb	r1, [fp, #-814]	; 0xfffffcd2
    8624:	lsl	r2, r2, #8
    8628:	orr	r2, r2, ip, lsl #16
    862c:	orr	r2, r2, r1
    8630:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8634:	ldr	lr, [pc, #-1756]	; 7f60 <rb_sha512_crypt_r+0x700>
    8638:	add	lr, pc, lr
    863c:	and	r1, r2, #63	; 0x3f
    8640:	sub	r5, r5, #1
    8644:	lsr	r2, r2, #6
    8648:	add	r1, lr, r1
    864c:	ldrb	r1, [r1, #1100]	; 0x44c
    8650:	strb	r1, [r3], #1
    8654:	sub	ip, r3, #4
    8658:	mov	r1, r3
    865c:	cmp	r0, ip
    8660:	cmpne	r5, #0
    8664:	bgt	863c <rb_sha512_crypt_r+0xddc>
    8668:	ldrb	r0, [fp, #-813]	; 0xfffffcd3
    866c:	cmp	r5, #0
    8670:	str	r7, [fp, #-856]	; 0xfffffca8
    8674:	ldrb	ip, [fp, #-834]	; 0xfffffcbe
    8678:	ldrb	r2, [fp, #-792]	; 0xfffffce8
    867c:	lsl	r0, r0, #8
    8680:	orr	r0, r0, ip, lsl #16
    8684:	orr	r0, r0, r2
    8688:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    868c:	ldr	ip, [pc, #-1840]	; 7f64 <rb_sha512_crypt_r+0x704>
    8690:	add	ip, pc, ip
    8694:	and	r2, r0, #63	; 0x3f
    8698:	sub	r5, r5, #1
    869c:	lsr	r0, r0, #6
    86a0:	add	r2, ip, r2
    86a4:	ldrb	r2, [r2, #1100]	; 0x44c
    86a8:	strb	r2, [r3], #1
    86ac:	sub	r2, r3, #4
    86b0:	cmp	r1, r2
    86b4:	cmpne	r5, #0
    86b8:	bgt	8694 <rb_sha512_crypt_r+0xe34>
    86bc:	ldrb	r0, [fp, #-791]	; 0xfffffce9
    86c0:	cmp	r5, #0
    86c4:	str	r7, [fp, #-856]	; 0xfffffca8
    86c8:	ldrb	r1, [fp, #-812]	; 0xfffffcd4
    86cc:	ldrb	r2, [fp, #-833]	; 0xfffffcbf
    86d0:	lsl	r0, r0, #8
    86d4:	orr	r0, r0, r1, lsl #16
    86d8:	orr	r0, r0, r2
    86dc:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    86e0:	ldr	ip, [pc, #-1920]	; 7f68 <rb_sha512_crypt_r+0x708>
    86e4:	add	r4, r3, #4
    86e8:	add	ip, pc, ip
    86ec:	and	r2, r0, #63	; 0x3f
    86f0:	mov	r1, r3
    86f4:	lsr	r0, r0, #6
    86f8:	add	r2, ip, r2
    86fc:	sub	lr, r5, #1
    8700:	ldrb	r2, [r2, #1100]	; 0x44c
    8704:	strb	r2, [r1], #1
    8708:	cmp	r1, r4
    870c:	cmpne	lr, #0
    8710:	ble	8720 <rb_sha512_crypt_r+0xec0>
    8714:	mov	r3, r1
    8718:	mov	r5, lr
    871c:	b	86ec <rb_sha512_crypt_r+0xe8c>
    8720:	ldrb	r0, [fp, #-832]	; 0xfffffcc0
    8724:	cmp	lr, #0
    8728:	str	r7, [fp, #-856]	; 0xfffffca8
    872c:	ldrb	r4, [fp, #-790]	; 0xfffffcea
    8730:	ldrb	lr, [fp, #-811]	; 0xfffffcd5
    8734:	lsl	r0, r0, #8
    8738:	orr	r2, r0, r4, lsl #16
    873c:	orr	r2, r2, lr
    8740:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    8744:	and	r0, r2, #63	; 0x3f
    8748:	ldr	lr, [pc, #-2020]	; 7f6c <rb_sha512_crypt_r+0x70c>
    874c:	lsr	r2, r2, #6
    8750:	add	ip, ip, r0
    8754:	sub	r5, r5, #2
    8758:	ldrb	r4, [ip, #1100]	; 0x44c
    875c:	add	r0, r3, #2
    8760:	add	ip, r3, #5
    8764:	ldr	r7, [fp, #-856]	; 0xfffffca8
    8768:	add	lr, pc, lr
    876c:	strb	r4, [r1]
    8770:	and	r1, r2, #63	; 0x3f
    8774:	cmp	r5, #0
    8778:	lsr	r2, r2, #6
    877c:	add	r1, lr, r1
    8780:	beq	8914 <rb_sha512_crypt_r+0x10b4>
    8784:	ldrb	r4, [r1, #1100]	; 0x44c
    8788:	sub	r1, r5, #1
    878c:	strb	r4, [r0], #1
    8790:	cmp	r0, ip
    8794:	beq	87a0 <rb_sha512_crypt_r+0xf40>
    8798:	mov	r5, r1
    879c:	b	8770 <rb_sha512_crypt_r+0xf10>
    87a0:	cmp	r1, #0
    87a4:	ldrb	r1, [fp, #-789]	; 0xfffffceb
    87a8:	str	r7, [fp, #-856]	; 0xfffffca8
    87ac:	beq	8918 <rb_sha512_crypt_r+0x10b8>
    87b0:	and	r2, r1, #63	; 0x3f
    87b4:	cmp	r5, #2
    87b8:	lsr	r1, r1, #6
    87bc:	add	r2, lr, r2
    87c0:	ldrb	r2, [r2, #1100]	; 0x44c
    87c4:	strb	r2, [r3, #5]
    87c8:	beq	8918 <rb_sha512_crypt_r+0x10b8>
    87cc:	add	lr, lr, r1
    87d0:	cmp	r5, #3
    87d4:	ldrb	r2, [lr, #1100]	; 0x44c
    87d8:	strb	r2, [r3, #6]
    87dc:	ble	8918 <rb_sha512_crypt_r+0x10b8>
    87e0:	ldr	r6, [fp, #-884]	; 0xfffffc8c
    87e4:	mov	r2, #0
    87e8:	strb	r2, [r3, #7]
    87ec:	mov	r2, #0
    87f0:	mov	r3, #0
    87f4:	add	r5, pc, #740	; 0x2e4
    87f8:	ldrd	r4, [r5]
    87fc:	mov	r0, r8
    8800:	ldr	r1, [fp, #-856]	; 0xfffffca8
    8804:	strd	r2, [r8, #64]	; 0x40
    8808:	strd	r2, [r8, #72]	; 0x48
    880c:	strd	r2, [r8, #80]	; 0x50
    8810:	add	r3, pc, #720	; 0x2d0
    8814:	ldrd	r2, [r3]
    8818:	strd	r4, [r8]
    881c:	add	r5, pc, #716	; 0x2cc
    8820:	ldrd	r4, [r5]
    8824:	strd	r2, [r8, #8]
    8828:	add	r3, pc, #712	; 0x2c8
    882c:	ldrd	r2, [r3]
    8830:	strd	r4, [r8, #16]
    8834:	add	r5, pc, #708	; 0x2c4
    8838:	ldrd	r4, [r5]
    883c:	strd	r2, [r8, #24]
    8840:	add	r3, pc, #704	; 0x2c0
    8844:	ldrd	r2, [r3]
    8848:	strd	r2, [r8, #32]
    884c:	add	r3, pc, #700	; 0x2bc
    8850:	ldrd	r2, [r3]
    8854:	strd	r4, [r8, #48]	; 0x30
    8858:	strd	r2, [r8, #40]	; 0x28
    885c:	add	r3, pc, #692	; 0x2b4
    8860:	ldrd	r2, [r3]
    8864:	strd	r2, [r8, #56]	; 0x38
    8868:	bl	6984 <rb_sha512_finish_ctx>
    886c:	mov	r2, #64	; 0x40
    8870:	mov	r1, #0
    8874:	mov	r0, r9
    8878:	bl	4608 <memset@plt>
    887c:	mov	r2, sl
    8880:	mov	r1, #0
    8884:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8888:	bl	4608 <memset@plt>
    888c:	mov	r1, #0
    8890:	ldr	r0, [fp, #-880]	; 0xfffffc90
    8894:	ldr	r2, [fp, #-864]	; 0xfffffca0
    8898:	bl	4608 <memset@plt>
    889c:	mov	r2, #344	; 0x158
    88a0:	mov	r1, #0
    88a4:	mov	r0, r8
    88a8:	bl	4608 <memset@plt>
    88ac:	mov	r2, #344	; 0x158
    88b0:	mov	r1, #0
    88b4:	ldr	r0, [fp, #-876]	; 0xfffffc94
    88b8:	bl	4608 <memset@plt>
    88bc:	ldr	r3, [fp, #-900]	; 0xfffffc7c
    88c0:	cmp	r3, #0
    88c4:	beq	88d8 <rb_sha512_crypt_r+0x1078>
    88c8:	mov	r2, sl
    88cc:	mov	r0, r3
    88d0:	mov	r1, #0
    88d4:	bl	4608 <memset@plt>
    88d8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    88dc:	cmp	r3, #0
    88e0:	beq	88f4 <rb_sha512_crypt_r+0x1094>
    88e4:	mov	r0, r3
    88e8:	mov	r1, #0
    88ec:	ldr	r2, [fp, #-864]	; 0xfffffca0
    88f0:	bl	4608 <memset@plt>
    88f4:	mov	r0, r6
    88f8:	sub	sp, fp, #32
    88fc:	ldrd	r4, [sp]
    8900:	ldrd	r6, [sp, #8]
    8904:	ldrd	r8, [sp, #16]
    8908:	ldrd	sl, [sp, #24]
    890c:	add	sp, sp, #32
    8910:	pop	{pc}		; (ldr pc, [sp], #4)
    8914:	str	r7, [fp, #-856]	; 0xfffffca8
    8918:	bl	4cbc <__errno_location@plt>
    891c:	mov	r3, #34	; 0x22
    8920:	mov	r6, #0
    8924:	str	r3, [r0]
    8928:	b	87ec <rb_sha512_crypt_r+0xf8c>
    892c:	ldr	r3, [pc, #492]	; 8b20 <rb_sha512_crypt_r+0x12c0>
    8930:	mov	r1, r2
    8934:	mov	r0, r6
    8938:	str	r4, [sp]
    893c:	ldr	r2, [pc, #480]	; 8b24 <rb_sha512_crypt_r+0x12c4>
    8940:	add	r3, pc, r3
    8944:	add	r3, r3, #1168	; 0x490
    8948:	add	r2, pc, r2
    894c:	add	r3, r3, #4
    8950:	bl	4b84 <snprintf@plt>
    8954:	sub	r5, r5, r0
    8958:	add	r6, r6, r0
    895c:	bic	r2, r5, r5, asr #31
    8960:	b	7fd8 <rb_sha512_crypt_r+0x778>
    8964:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    8968:	ldr	r2, [fp, #-864]	; 0xfffffca0
    896c:	add	r3, r2, #15
    8970:	bic	r3, r3, #7
    8974:	sub	sp, sp, r3
    8978:	add	r0, sp, #16
    897c:	bl	47e8 <memcpy@plt>
    8980:	str	r0, [fp, #-904]	; 0xfffffc78
    8984:	str	r0, [fp, #-868]	; 0xfffffc9c
    8988:	b	7938 <rb_sha512_crypt_r+0xd8>
    898c:	add	r3, r0, #15
    8990:	mov	r1, r5
    8994:	bic	r3, r3, #7
    8998:	mov	r2, r0
    899c:	sub	sp, sp, r3
    89a0:	add	r0, sp, #16
    89a4:	bl	47e8 <memcpy@plt>
    89a8:	mov	r5, r0
    89ac:	str	r0, [fp, #-900]	; 0xfffffc7c
    89b0:	b	7928 <rb_sha512_crypt_r+0xc8>
    89b4:	sub	r3, fp, #380	; 0x17c
    89b8:	mov	r2, #10
    89bc:	mov	r1, r3
    89c0:	str	r3, [fp, #-876]	; 0xfffffc94
    89c4:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    89c8:	add	r0, r3, #7
    89cc:	bl	47dc <strtoul@plt>
    89d0:	ldr	r3, [fp, #-380]	; 0xfffffe84
    89d4:	ldrb	r2, [r3]
    89d8:	cmp	r2, #36	; 0x24
    89dc:	movwne	r3, #5000	; 0x1388
    89e0:	strne	r3, [fp, #-872]	; 0xfffffc98
    89e4:	bne	78f0 <rb_sha512_crypt_r+0x90>
    89e8:	add	r3, r3, #1
    89ec:	movw	r2, #51711	; 0xc9ff
    89f0:	movt	r2, #15258	; 0x3b9a
    89f4:	cmp	r0, r2
    89f8:	str	r3, [fp, #-868]	; 0xfffffc9c
    89fc:	movcc	r3, r0
    8a00:	movcs	r3, r2
    8a04:	cmp	r3, #1000	; 0x3e8
    8a08:	mov	r2, #1
    8a0c:	movcc	r3, #1000	; 0x3e8
    8a10:	str	r2, [fp, #-892]	; 0xfffffc84
    8a14:	str	r3, [fp, #-872]	; 0xfffffc98
    8a18:	b	78f0 <rb_sha512_crypt_r+0x90>
    8a1c:	mov	r2, r8
    8a20:	mov	r1, sl
    8a24:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8a28:	bl	67c4 <rb_sha512_process_bytes>
    8a2c:	cmp	sl, #0
    8a30:	bne	7aec <rb_sha512_crypt_r+0x28c>
    8a34:	mov	r0, r8
    8a38:	ldr	r1, [fp, #-856]	; 0xfffffca8
    8a3c:	sub	r9, fp, #788	; 0x314
    8a40:	bl	6984 <rb_sha512_finish_ctx>
    8a44:	add	r3, pc, #148	; 0x94
    8a48:	ldrd	r2, [r3]
    8a4c:	mov	r1, r9
    8a50:	ldr	r0, [fp, #-876]	; 0xfffffc94
    8a54:	strd	r2, [r4, #-8]
    8a58:	add	r3, pc, #136	; 0x88
    8a5c:	ldrd	r2, [r3]
    8a60:	strd	r2, [r4]
    8a64:	add	r3, pc, #132	; 0x84
    8a68:	ldrd	r2, [r3]
    8a6c:	strd	r2, [r4, #8]
    8a70:	add	r3, pc, #128	; 0x80
    8a74:	ldrd	r2, [r3]
    8a78:	strd	r2, [r4, #16]
    8a7c:	add	r3, pc, #132	; 0x84
    8a80:	ldrd	r2, [r3]
    8a84:	strd	r2, [r4, #24]
    8a88:	add	r3, pc, #128	; 0x80
    8a8c:	ldrd	r2, [r3]
    8a90:	strd	r2, [r4, #32]
    8a94:	add	r3, pc, #100	; 0x64
    8a98:	ldrd	r2, [r3]
    8a9c:	strd	r2, [r4, #40]	; 0x28
    8aa0:	add	r3, pc, #112	; 0x70
    8aa4:	ldrd	r2, [r3]
    8aa8:	strd	r2, [r4, #48]	; 0x30
    8aac:	mov	r2, #0
    8ab0:	mov	r3, #0
    8ab4:	strd	r2, [r4, #56]	; 0x38
    8ab8:	strd	r2, [r4, #64]	; 0x40
    8abc:	strd	r2, [r4, #72]	; 0x48
    8ac0:	bl	6984 <rb_sha512_finish_ctx>
    8ac4:	add	r0, sp, #8
    8ac8:	mov	r2, sl
    8acc:	str	r0, [fp, #-860]	; 0xfffffca4
    8ad0:	b	7c64 <rb_sha512_crypt_r+0x404>
    8ad4:	mov	r2, sl
    8ad8:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8adc:	b	7c64 <rb_sha512_crypt_r+0x404>
    8ae0:	.word	0xf3bcc908
    8ae4:	.word	0x6a09e667
    8ae8:	.word	0x84caa73b
    8aec:	.word	0xbb67ae85
    8af0:	.word	0xfe94f82b
    8af4:	.word	0x3c6ef372
    8af8:	.word	0x5f1d36f1
    8afc:	.word	0xa54ff53a
    8b00:	.word	0xfb41bd6b
    8b04:	.word	0x1f83d9ab
    8b08:	.word	0xade682d1
    8b0c:	.word	0x510e527f
    8b10:	.word	0x2b3e6c1f
    8b14:	.word	0x9b05688c
    8b18:	.word	0x137e2179
    8b1c:	.word	0x5be0cd19
    8b20:	.word	0x0000d768
    8b24:	.word	0x0000df60

00008b28 <rb_ascii_to_bin>:
    8b28:	cmp	r0, #122	; 0x7a
    8b2c:	bhi	8b64 <rb_ascii_to_bin+0x3c>
    8b30:	cmp	r0, #96	; 0x60
    8b34:	bhi	8b5c <rb_ascii_to_bin+0x34>
    8b38:	cmp	r0, #90	; 0x5a
    8b3c:	bhi	8b64 <rb_ascii_to_bin+0x3c>
    8b40:	cmp	r0, #64	; 0x40
    8b44:	bhi	8b6c <rb_ascii_to_bin+0x44>
    8b48:	sub	r0, r0, #46	; 0x2e
    8b4c:	uxtb	r3, r0
    8b50:	cmp	r3, #11
    8b54:	movhi	r0, #0
    8b58:	bx	lr
    8b5c:	sub	r0, r0, #59	; 0x3b
    8b60:	bx	lr
    8b64:	mov	r0, #0
    8b68:	bx	lr
    8b6c:	sub	r0, r0, #53	; 0x35
    8b70:	bx	lr

00008b74 <rb_des_init>:
    8b74:	ldr	r1, [pc, #1812]	; 9290 <rb_des_init+0x71c>
    8b78:	add	r1, pc, r1
    8b7c:	ldr	r3, [r1]
    8b80:	cmp	r3, #1
    8b84:	bxeq	lr
    8b88:	strd	r4, [sp, #-36]!	; 0xffffffdc
    8b8c:	mov	r0, #0
    8b90:	mov	r3, #14
    8b94:	ldr	r2, [pc, #1784]	; 9294 <rb_des_init+0x720>
    8b98:	mov	r5, r0
    8b9c:	movw	ip, #1308	; 0x51c
    8ba0:	strd	r6, [sp, #8]
    8ba4:	add	r6, r1, #27
    8ba8:	ldr	r4, [pc, #1768]	; 9298 <rb_des_init+0x724>
    8bac:	strd	r8, [sp, #16]
    8bb0:	ldr	r7, [pc, #1764]	; 929c <rb_des_init+0x728>
    8bb4:	add	r2, pc, r2
    8bb8:	strd	sl, [sp, #24]
    8bbc:	add	r2, r2, #1168	; 0x490
    8bc0:	str	lr, [sp, #32]
    8bc4:	sub	sp, sp, #84	; 0x54
    8bc8:	add	r4, pc, r4
    8bcc:	str	r0, [r1, #4]
    8bd0:	add	r4, r4, #1296	; 0x510
    8bd4:	str	r0, [r1, #8]
    8bd8:	add	r4, r4, #12
    8bdc:	add	r7, pc, r7
    8be0:	str	r0, [r1, #12]
    8be4:	str	r0, [r1, #16]
    8be8:	add	r0, r2, #28
    8bec:	add	r2, r2, #44	; 0x2c
    8bf0:	str	r0, [r1, #20]
    8bf4:	str	r2, [r1, #24]
    8bf8:	mov	r0, r6
    8bfc:	mov	r2, #0
    8c00:	add	lr, r7, r5, lsl #6
    8c04:	b	8c1c <rb_des_init+0xa8>
    8c08:	orr	r3, r3, r8
    8c0c:	and	r1, r1, #16
    8c10:	orr	r3, r3, r1
    8c14:	add	r3, lr, r3
    8c18:	ldrb	r3, [r3, ip]
    8c1c:	add	r2, r2, #1
    8c20:	strb	r3, [r0, #1]!
    8c24:	cmp	r2, #64	; 0x40
    8c28:	ubfx	r3, r2, #1, #4
    8c2c:	and	r8, r2, #32
    8c30:	lsl	r1, r2, #4
    8c34:	bne	8c08 <rb_des_init+0x94>
    8c38:	add	r5, r5, #1
    8c3c:	add	r6, r6, #64	; 0x40
    8c40:	cmp	r5, #8
    8c44:	beq	8c50 <rb_des_init+0xdc>
    8c48:	ldrb	r3, [r4, r5, lsl #6]
    8c4c:	b	8bf8 <rb_des_init+0x84>
    8c50:	ldr	lr, [pc, #1608]	; 92a0 <rb_des_init+0x72c>
    8c54:	mvn	r8, #63	; 0x3f
    8c58:	mov	r9, #0
    8c5c:	mvn	fp, #64	; 0x40
    8c60:	ldr	sl, [pc, #1596]	; 92a4 <rb_des_init+0x730>
    8c64:	add	lr, pc, lr
    8c68:	add	r3, lr, #28
    8c6c:	add	r7, lr, #91	; 0x5b
    8c70:	add	sl, pc, sl
    8c74:	sub	r8, r8, r3
    8c78:	add	lr, lr, #155	; 0x9b
    8c7c:	add	r5, sl, r9, lsl #12
    8c80:	sub	r6, fp, r8
    8c84:	mov	ip, #0
    8c88:	add	r4, r8, #1
    8c8c:	ldrb	r0, [r6, #1]!
    8c90:	mov	r3, r7
    8c94:	lsl	r0, r0, #4
    8c98:	sxtb	r0, r0
    8c9c:	add	r2, r4, r3
    8ca0:	ldrb	r1, [r3, #1]!
    8ca4:	orr	r2, ip, r2
    8ca8:	orr	r1, r0, r1
    8cac:	cmp	r3, lr
    8cb0:	strb	r1, [r5, r2]
    8cb4:	bne	8c9c <rb_des_init+0x128>
    8cb8:	add	ip, ip, #64	; 0x40
    8cbc:	cmp	ip, #4096	; 0x1000
    8cc0:	bne	8c8c <rb_des_init+0x118>
    8cc4:	add	r9, r9, #1
    8cc8:	add	r7, r7, #128	; 0x80
    8ccc:	cmp	r9, #4
    8cd0:	sub	r8, r8, #128	; 0x80
    8cd4:	add	lr, r3, #128	; 0x80
    8cd8:	bne	8c7c <rb_des_init+0x108>
    8cdc:	ldr	r2, [pc, #1476]	; 92a8 <rb_des_init+0x734>
    8ce0:	mvn	r5, #0
    8ce4:	mov	r3, #58	; 0x3a
    8ce8:	ldr	r0, [pc, #1468]	; 92ac <rb_des_init+0x738>
    8cec:	add	r2, pc, r2
    8cf0:	add	r1, r2, #540	; 0x21c
    8cf4:	add	lr, r2, #600	; 0x258
    8cf8:	add	r0, pc, r0
    8cfc:	add	r4, r1, r5
    8d00:	add	r0, r0, #1808	; 0x710
    8d04:	mov	sl, r1
    8d08:	add	r6, r1, #63	; 0x3f
    8d0c:	mov	ip, r4
    8d10:	add	lr, lr, #3
    8d14:	add	r0, r0, #12
    8d18:	b	8d20 <rb_des_init+0x1ac>
    8d1c:	ldrb	r3, [r0, #1]!
    8d20:	add	ip, ip, #1
    8d24:	sub	r3, r3, #1
    8d28:	strb	r5, [lr, #1]!
    8d2c:	uxtb	r3, r3
    8d30:	mov	r1, ip
    8d34:	add	r7, r2, r3
    8d38:	cmp	ip, r6
    8d3c:	strb	r3, [r1], #-1
    8d40:	sub	r1, r1, r4
    8d44:	strb	r1, [r7, #668]	; 0x29c
    8d48:	bne	8d1c <rb_des_init+0x1a8>
    8d4c:	ldr	r3, [pc, #1372]	; 92b0 <rb_des_init+0x73c>
    8d50:	add	r2, r2, #732	; 0x2dc
    8d54:	mov	r1, #57	; 0x39
    8d58:	sub	ip, r2, #1
    8d5c:	sub	r0, r2, #732	; 0x2dc
    8d60:	mvn	lr, #0
    8d64:	mov	r2, #0
    8d68:	add	r3, pc, r3
    8d6c:	add	r3, r3, #1872	; 0x750
    8d70:	add	r3, r3, #12
    8d74:	b	8d7c <rb_des_init+0x208>
    8d78:	ldrb	r1, [r3, #1]!
    8d7c:	add	r1, r0, r1
    8d80:	strb	lr, [ip, #1]!
    8d84:	strb	r2, [r1, #603]	; 0x25b
    8d88:	add	r2, r2, #1
    8d8c:	cmp	r2, #56	; 0x38
    8d90:	bne	8d78 <rb_des_init+0x204>
    8d94:	ldr	r3, [pc, #1304]	; 92b4 <rb_des_init+0x740>
    8d98:	mov	r1, #14
    8d9c:	mov	r2, #0
    8da0:	ldr	r0, [pc, #1296]	; 92b8 <rb_des_init+0x744>
    8da4:	add	r3, pc, r3
    8da8:	add	r3, r3, #1936	; 0x790
    8dac:	add	r0, pc, r0
    8db0:	add	r3, r3, #4
    8db4:	b	8dbc <rb_des_init+0x248>
    8db8:	ldrb	r1, [r3, #1]!
    8dbc:	add	r1, r0, r1
    8dc0:	strb	r2, [r1, #731]	; 0x2db
    8dc4:	add	r2, r2, #1
    8dc8:	cmp	r2, #48	; 0x30
    8dcc:	bne	8db8 <rb_des_init+0x244>
    8dd0:	add	r3, r0, #732	; 0x2dc
    8dd4:	ldr	r2, [pc, #1248]	; 92bc <rb_des_init+0x748>
    8dd8:	add	r9, r0, #668	; 0x29c
    8ddc:	str	r3, [sp, #16]
    8de0:	add	r3, r0, #604	; 0x25c
    8de4:	ldr	r1, [pc, #1236]	; 92c0 <rb_des_init+0x74c>
    8de8:	str	r3, [sp, #20]
    8dec:	mov	r3, #0
    8df0:	add	r2, pc, r2
    8df4:	ldr	fp, [pc, #1224]	; 92c4 <rb_des_init+0x750>
    8df8:	str	r3, [sp, #56]	; 0x38
    8dfc:	add	r2, r2, #1984	; 0x7c0
    8e00:	ldr	r3, [pc, #1216]	; 92c8 <rb_des_init+0x754>
    8e04:	mov	r0, r2
    8e08:	add	r1, pc, r1
    8e0c:	add	r0, r0, #4
    8e10:	ldr	r2, [pc, #1204]	; 92cc <rb_des_init+0x758>
    8e14:	sub	r1, r1, #4
    8e18:	add	r8, r0, #8
    8e1c:	add	fp, pc, fp
    8e20:	str	r0, [sp, #24]
    8e24:	str	r1, [sp, #44]	; 0x2c
    8e28:	add	r3, pc, r3
    8e2c:	ldr	r1, [pc, #1180]	; 92d0 <rb_des_init+0x75c>
    8e30:	sub	r3, r3, #4
    8e34:	add	r2, pc, r2
    8e38:	str	r3, [sp, #40]	; 0x28
    8e3c:	sub	r2, r2, #4
    8e40:	ldr	r3, [pc, #1164]	; 92d4 <rb_des_init+0x760>
    8e44:	str	r2, [sp, #48]	; 0x30
    8e48:	add	r1, pc, r1
    8e4c:	ldr	r2, [pc, #1156]	; 92d8 <rb_des_init+0x764>
    8e50:	str	r1, [sp, #32]
    8e54:	add	r3, pc, r3
    8e58:	sub	r3, r3, #4
    8e5c:	add	r2, pc, r2
    8e60:	str	r3, [sp, #52]	; 0x34
    8e64:	ldr	r3, [pc, #1136]	; 92dc <rb_des_init+0x768>
    8e68:	str	r2, [sp, #36]	; 0x24
    8e6c:	add	r3, pc, r3
    8e70:	str	r3, [sp, #4]
    8e74:	ldr	r3, [pc, #1124]	; 92e0 <rb_des_init+0x76c>
    8e78:	add	r3, pc, r3
    8e7c:	str	r3, [sp, #60]	; 0x3c
    8e80:	ldr	r3, [pc, #1116]	; 92e4 <rb_des_init+0x770>
    8e84:	add	r3, pc, r3
    8e88:	str	r3, [sp, #64]	; 0x40
    8e8c:	mov	r3, r9
    8e90:	mov	r9, sl
    8e94:	mov	sl, r3
    8e98:	str	r8, [sp, #8]
    8e9c:	mov	r0, #0
    8ea0:	ldr	ip, [sp, #40]	; 0x28
    8ea4:	ldr	lr, [sp, #44]	; 0x2c
    8ea8:	ldrd	r4, [sp, #48]	; 0x30
    8eac:	ldr	r7, [sp, #60]	; 0x3c
    8eb0:	ldr	r8, [sp, #64]	; 0x40
    8eb4:	mov	r6, #0
    8eb8:	mov	r2, #128	; 0x80
    8ebc:	mov	r3, r6
    8ec0:	ldr	r1, [sp, #24]
    8ec4:	str	r6, [ip, #4]!
    8ec8:	str	r6, [lr, #4]!
    8ecc:	str	r6, [r4, #4]!
    8ed0:	str	r6, [r5, #4]!
    8ed4:	b	8f20 <rb_des_init+0x3ac>
    8ed8:	ldr	r6, [ip]
    8edc:	ldr	r2, [r2, #1180]	; 0x49c
    8ee0:	orr	r2, r6, r2
    8ee4:	str	r2, [ip]
    8ee8:	ldrb	r2, [r9, r3]
    8eec:	ldr	r6, [sp, #4]
    8ef0:	cmp	r2, #31
    8ef4:	add	r6, r6, r2, lsl #2
    8ef8:	add	r2, fp, r2, lsl #2
    8efc:	bgt	8f50 <rb_des_init+0x3dc>
    8f00:	ldr	r2, [r6, #1180]	; 0x49c
    8f04:	ldr	r6, [r4]
    8f08:	orr	r2, r6, r2
    8f0c:	str	r2, [r4]
    8f10:	add	r3, r3, #1
    8f14:	cmp	r3, #8
    8f18:	beq	8f6c <rb_des_init+0x3f8>
    8f1c:	ldrb	r2, [r1, #1]!
    8f20:	tst	r2, r0
    8f24:	beq	8f10 <rb_des_init+0x39c>
    8f28:	ldrb	r2, [sl, r3]
    8f2c:	cmp	r2, #31
    8f30:	add	r6, r7, r2, lsl #2
    8f34:	add	r2, r8, r2, lsl #2
    8f38:	ble	8ed8 <rb_des_init+0x364>
    8f3c:	ldr	r2, [r6, #1052]	; 0x41c
    8f40:	ldr	r6, [lr]
    8f44:	orr	r2, r6, r2
    8f48:	str	r2, [lr]
    8f4c:	b	8ee8 <rb_des_init+0x374>
    8f50:	ldr	r6, [r5]
    8f54:	add	r3, r3, #1
    8f58:	cmp	r3, #8
    8f5c:	ldr	r2, [r2, #1052]	; 0x41c
    8f60:	orr	r2, r6, r2
    8f64:	str	r2, [r5]
    8f68:	bne	8f1c <rb_des_init+0x3a8>
    8f6c:	add	r0, r0, #1
    8f70:	cmp	r0, #256	; 0x100
    8f74:	bne	8eb4 <rb_des_init+0x340>
    8f78:	ldr	r3, [pc, #872]	; 92e8 <rb_des_init+0x774>
    8f7c:	mov	ip, #0
    8f80:	str	r9, [sp, #68]	; 0x44
    8f84:	ldr	r6, [pc, #864]	; 92ec <rb_des_init+0x778>
    8f88:	strd	sl, [sp, #72]	; 0x48
    8f8c:	ldr	r5, [pc, #860]	; 92f0 <rb_des_init+0x77c>
    8f90:	add	r3, pc, r3
    8f94:	add	r3, r3, #1984	; 0x7c0
    8f98:	ldr	r1, [pc, #852]	; 92f4 <rb_des_init+0x780>
    8f9c:	add	r3, r3, #4
    8fa0:	add	r6, pc, r6
    8fa4:	ldr	r2, [sp, #56]	; 0x38
    8fa8:	sub	r6, r6, #4
    8fac:	add	r5, pc, r5
    8fb0:	str	r3, [sp, #28]
    8fb4:	sub	r5, r5, #4
    8fb8:	ldr	r0, [pc, #824]	; 92f8 <rb_des_init+0x784>
    8fbc:	add	r1, pc, r1
    8fc0:	ldr	r3, [pc, #820]	; 92fc <rb_des_init+0x788>
    8fc4:	mov	sl, r1
    8fc8:	add	r6, r6, r2
    8fcc:	add	r5, r5, r2
    8fd0:	ldr	r2, [pc, #808]	; 9300 <rb_des_init+0x78c>
    8fd4:	add	r0, pc, r0
    8fd8:	mov	fp, r0
    8fdc:	ldr	r8, [sp, #8]
    8fe0:	add	r3, pc, r3
    8fe4:	ldr	lr, [sp, #32]
    8fe8:	mov	r9, r3
    8fec:	add	r2, pc, r2
    8ff0:	ldr	r4, [sp, #36]	; 0x24
    8ff4:	str	r2, [sp, #8]
    8ff8:	mov	r7, #0
    8ffc:	mov	r1, #64	; 0x40
    9000:	ldr	r0, [sp, #20]
    9004:	ldr	r3, [sp, #28]
    9008:	str	r7, [r6, #4]!
    900c:	str	r7, [r5, #4]!
    9010:	add	r2, r3, #2
    9014:	mov	r3, r2
    9018:	b	903c <rb_des_init+0x4c8>
    901c:	ldr	r1, [r6]
    9020:	ldr	r7, [r7, #1196]	; 0x4ac
    9024:	orr	r1, r1, r7
    9028:	str	r1, [r6]
    902c:	cmp	r8, r3
    9030:	add	r0, r0, #1
    9034:	beq	907c <rb_des_init+0x508>
    9038:	ldrb	r1, [r3], #1
    903c:	tst	r1, ip
    9040:	beq	902c <rb_des_init+0x4b8>
    9044:	ldrb	r1, [r0]
    9048:	cmp	r1, #255	; 0xff
    904c:	beq	902c <rb_des_init+0x4b8>
    9050:	cmp	r1, #27
    9054:	add	r7, fp, r1, lsl #2
    9058:	add	r1, sl, r1, lsl #2
    905c:	ble	901c <rb_des_init+0x4a8>
    9060:	ldr	r7, [r5]
    9064:	cmp	r8, r3
    9068:	add	r0, r0, #1
    906c:	ldr	r1, [r1, #1084]	; 0x43c
    9070:	orr	r1, r7, r1
    9074:	str	r1, [r5]
    9078:	bne	9038 <rb_des_init+0x4c4>
    907c:	mov	r7, #0
    9080:	mov	r1, #64	; 0x40
    9084:	str	r5, [sp, #12]
    9088:	ldr	r0, [sp, #16]
    908c:	str	r7, [r4]
    9090:	str	r7, [lr]
    9094:	b	90b8 <rb_des_init+0x544>
    9098:	ldr	r1, [lr]
    909c:	ldr	r7, [r7, #1212]	; 0x4bc
    90a0:	orr	r1, r1, r7
    90a4:	str	r1, [lr]
    90a8:	cmp	r3, r2
    90ac:	add	r0, r0, #1
    90b0:	beq	90fc <rb_des_init+0x588>
    90b4:	ldrb	r1, [r2], #1
    90b8:	tst	r1, ip
    90bc:	beq	90a8 <rb_des_init+0x534>
    90c0:	ldrb	r1, [r0]
    90c4:	cmp	r1, #255	; 0xff
    90c8:	beq	90a8 <rb_des_init+0x534>
    90cc:	ldr	r5, [sp, #8]
    90d0:	cmp	r1, #23
    90d4:	add	r7, r9, r1, lsl #2
    90d8:	add	r1, r5, r1, lsl #2
    90dc:	ble	9098 <rb_des_init+0x524>
    90e0:	ldr	r7, [r4]
    90e4:	cmp	r3, r2
    90e8:	add	r0, r0, #1
    90ec:	ldr	r1, [r1, #1116]	; 0x45c
    90f0:	orr	r7, r7, r1
    90f4:	str	r7, [r4]
    90f8:	bne	90b4 <rb_des_init+0x540>
    90fc:	add	ip, ip, #1
    9100:	add	lr, lr, #4
    9104:	ldr	r5, [sp, #12]
    9108:	cmp	ip, #128	; 0x80
    910c:	add	r4, r4, #4
    9110:	bne	8ff8 <rb_des_init+0x484>
    9114:	ldr	r2, [sp, #16]
    9118:	add	r9, sp, #68	; 0x44
    911c:	ldm	r9, {r9, sl, fp}
    9120:	ldr	r3, [sp, #56]	; 0x38
    9124:	add	r2, r2, #7
    9128:	add	r9, r9, #8
    912c:	add	sl, sl, #8
    9130:	str	r2, [sp, #16]
    9134:	add	r3, r3, #512	; 0x200
    9138:	cmp	r3, #4096	; 0x1000
    913c:	str	r3, [sp, #56]	; 0x38
    9140:	ldr	r3, [sp, #20]
    9144:	add	r3, r3, #8
    9148:	str	r3, [sp, #20]
    914c:	ldr	r3, [sp, #32]
    9150:	add	r3, r3, #512	; 0x200
    9154:	str	r3, [sp, #32]
    9158:	ldr	r3, [sp, #36]	; 0x24
    915c:	add	r3, r3, #512	; 0x200
    9160:	str	r3, [sp, #36]	; 0x24
    9164:	ldr	r3, [sp, #40]	; 0x28
    9168:	add	r3, r3, #1024	; 0x400
    916c:	str	r3, [sp, #40]	; 0x28
    9170:	ldr	r3, [sp, #44]	; 0x2c
    9174:	add	r3, r3, #1024	; 0x400
    9178:	str	r3, [sp, #44]	; 0x2c
    917c:	ldr	r3, [sp, #48]	; 0x30
    9180:	add	r3, r3, #1024	; 0x400
    9184:	str	r3, [sp, #48]	; 0x30
    9188:	ldr	r3, [sp, #52]	; 0x34
    918c:	add	r3, r3, #1024	; 0x400
    9190:	str	r3, [sp, #52]	; 0x34
    9194:	bne	8e98 <rb_des_init+0x324>
    9198:	ldr	r3, [pc, #356]	; 9304 <rb_des_init+0x790>
    919c:	mov	r1, #16
    91a0:	mov	r2, #0
    91a4:	ldr	r9, [pc, #348]	; 9308 <rb_des_init+0x794>
    91a8:	add	r3, pc, r3
    91ac:	add	r3, r3, #1984	; 0x7c0
    91b0:	add	r9, pc, r9
    91b4:	add	r3, r3, #12
    91b8:	b	91c0 <rb_des_init+0x64c>
    91bc:	ldrb	r1, [r3, #1]!
    91c0:	add	r1, r9, r1
    91c4:	strb	r2, [r1, #787]	; 0x313
    91c8:	add	r2, r2, #1
    91cc:	cmp	r2, #32
    91d0:	bne	91bc <rb_des_init+0x648>
    91d4:	ldr	r8, [pc, #304]	; 930c <rb_des_init+0x798>
    91d8:	add	r6, r9, #788	; 0x314
    91dc:	mov	r7, #0
    91e0:	add	r9, r9, #820	; 0x334
    91e4:	ldr	r5, [pc, #292]	; 9310 <rb_des_init+0x79c>
    91e8:	ldr	sl, [sp, #24]
    91ec:	add	r8, pc, r8
    91f0:	sub	r8, r8, #4
    91f4:	add	r5, pc, r5
    91f8:	add	r4, sl, #7
    91fc:	mov	lr, r8
    9200:	mov	ip, #0
    9204:	mov	r2, r6
    9208:	mov	r3, sl
    920c:	str	r7, [lr, #4]!
    9210:	mov	r1, #128	; 0x80
    9214:	b	921c <rb_des_init+0x6a8>
    9218:	ldrb	r1, [r3, #1]!
    921c:	tst	r1, ip
    9220:	beq	923c <rb_des_init+0x6c8>
    9224:	ldrb	r0, [r2]
    9228:	ldr	r1, [lr]
    922c:	add	r0, r5, r0, lsl #2
    9230:	ldr	r0, [r0, #1180]	; 0x49c
    9234:	orr	r1, r1, r0
    9238:	str	r1, [lr]
    923c:	cmp	r4, r3
    9240:	add	r2, r2, #1
    9244:	bne	9218 <rb_des_init+0x6a4>
    9248:	add	ip, ip, #1
    924c:	cmp	ip, #256	; 0x100
    9250:	bne	9204 <rb_des_init+0x690>
    9254:	add	r6, r6, #8
    9258:	add	r8, r8, #1024	; 0x400
    925c:	cmp	r9, r6
    9260:	bne	91fc <rb_des_init+0x688>
    9264:	ldr	r3, [pc, #168]	; 9314 <rb_des_init+0x7a0>
    9268:	mov	r2, #1
    926c:	add	r3, pc, r3
    9270:	str	r2, [r3]
    9274:	add	sp, sp, #84	; 0x54
    9278:	ldrd	r4, [sp]
    927c:	ldrd	r6, [sp, #8]
    9280:	ldrd	r8, [sp, #16]
    9284:	ldrd	sl, [sp, #24]
    9288:	add	sp, sp, #32
    928c:	pop	{pc}		; (ldr pc, [sp], #4)
    9290:	.word	0x00021954
    9294:	.word	0x0000d4f4
    9298:	.word	0x0000d4e0
    929c:	.word	0x0000d4cc
    92a0:	.word	0x00021868
    92a4:	.word	0x00022d30
    92a8:	.word	0x000217e0
    92ac:	.word	0x0000d3b0
    92b0:	.word	0x0000d340
    92b4:	.word	0x0000d304
    92b8:	.word	0x00021720
    92bc:	.word	0x0000d2b8
    92c0:	.word	0x0002eb98
    92c4:	.word	0x0000d28c
    92c8:	.word	0x00030b78
    92cc:	.word	0x0002cb6c
    92d0:	.word	0x00027b58
    92d4:	.word	0x0002ab4c
    92d8:	.word	0x00026b44
    92dc:	.word	0x0000d23c
    92e0:	.word	0x0000d230
    92e4:	.word	0x0000d224
    92e8:	.word	0x0000d118
    92ec:	.word	0x00029a00
    92f0:	.word	0x000289f4
    92f4:	.word	0x0000d0ec
    92f8:	.word	0x0000d0d4
    92fc:	.word	0x0000d0c8
    9300:	.word	0x0000d0bc
    9304:	.word	0x0000cf00
    9308:	.word	0x0002131c
    930c:	.word	0x000217b4
    9310:	.word	0x0000ceb4
    9314:	.word	0x00021260

00009318 <rb_crypt>:
    9318:	strd	r4, [sp, #-36]!	; 0xffffffdc
    931c:	mov	r5, r1
    9320:	mov	r4, r0
    9324:	strd	r6, [sp, #8]
    9328:	strd	r8, [sp, #16]
    932c:	strd	sl, [sp, #24]
    9330:	str	lr, [sp, #32]
    9334:	sub	sp, sp, #252	; 0xfc
    9338:	ldrb	r3, [r1]
    933c:	cmp	r3, #36	; 0x24
    9340:	bne	9398 <rb_crypt+0x80>
    9344:	ldrb	r3, [r1, #2]
    9348:	cmp	r3, #36	; 0x24
    934c:	beq	935c <rb_crypt+0x44>
    9350:	ldrb	r3, [r1, #3]
    9354:	cmp	r3, #36	; 0x24
    9358:	bne	9398 <rb_crypt+0x80>
    935c:	ldrb	r3, [r5, #1]
    9360:	cmp	r3, #53	; 0x35
    9364:	beq	9ec8 <rb_crypt+0xbb0>
    9368:	cmp	r3, #54	; 0x36
    936c:	beq	9e74 <rb_crypt+0xb5c>
    9370:	cmp	r3, #49	; 0x31
    9374:	beq	9b24 <rb_crypt+0x80c>
    9378:	mov	r0, #0
    937c:	add	sp, sp, #252	; 0xfc
    9380:	ldrd	r4, [sp]
    9384:	ldrd	r6, [sp, #8]
    9388:	ldrd	r8, [sp, #16]
    938c:	ldrd	sl, [sp, #24]
    9390:	add	sp, sp, #32
    9394:	pop	{pc}		; (ldr pc, [sp], #4)
    9398:	add	r6, sp, #160	; 0xa0
    939c:	bl	8b74 <rb_des_init>
    93a0:	mov	r2, r6
    93a4:	ldrb	r3, [r4]
    93a8:	lsl	r3, r3, #1
    93ac:	uxtb	r3, r3
    93b0:	cmp	r3, #0
    93b4:	strb	r3, [r2], #1
    93b8:	sub	r3, r2, r6
    93bc:	addne	r4, r4, #1
    93c0:	cmp	r3, #8
    93c4:	bne	93a4 <rb_crypt+0x8c>
    93c8:	bl	8b74 <rb_des_init>
    93cc:	ldr	ip, [sp, #160]	; 0xa0
    93d0:	ldr	lr, [sp, #164]	; 0xa4
    93d4:	rev	ip, ip
    93d8:	rev	lr, lr
    93dc:	orrs	r3, ip, lr
    93e0:	bne	9af8 <rb_crypt+0x7e0>
    93e4:	ldr	r1, [pc, #3360]	; a10c <rb_crypt+0xdf4>
    93e8:	ubfx	r6, ip, #1, #7
    93ec:	mov	r8, #1
    93f0:	lsr	r3, lr, #25
    93f4:	str	r5, [sp, #32]
    93f8:	lsr	r4, ip, #25
    93fc:	add	r9, r6, #384	; 0x180
    9400:	ldr	r2, [pc, #3336]	; a110 <rb_crypt+0xdf8>
    9404:	add	r3, r3, #512	; 0x200
    9408:	ubfx	sl, ip, #17, #7
    940c:	str	r9, [sp, #8]
    9410:	ubfx	fp, lr, #17, #7
    9414:	add	r1, pc, r1
    9418:	add	sl, sl, #128	; 0x80
    941c:	ubfx	r7, ip, #9, #7
    9420:	ldr	r0, [r1, r3, lsl #2]
    9424:	add	fp, fp, #640	; 0x280
    9428:	ubfx	r6, lr, #9, #7
    942c:	add	r2, pc, r2
    9430:	add	r7, r7, #256	; 0x100
    9434:	ldr	r9, [r1, r4, lsl #2]
    9438:	add	r6, r6, #768	; 0x300
    943c:	str	fp, [sp, #4]
    9440:	ldr	fp, [r2, r3, lsl #2]
    9444:	ldr	r3, [r2, r4, lsl #2]
    9448:	ubfx	r4, lr, #1, #7
    944c:	orr	r9, r9, r0
    9450:	ldr	r0, [r1, sl, lsl #2]
    9454:	add	r4, r4, #896	; 0x380
    9458:	ldr	sl, [r2, sl, lsl #2]
    945c:	orr	r3, r3, fp
    9460:	ldr	fp, [r1, r7, lsl #2]
    9464:	orr	r0, r9, r0
    9468:	ldr	r9, [sp, #8]
    946c:	orr	r3, r3, sl
    9470:	ldr	r7, [r2, r7, lsl #2]
    9474:	orr	r0, r0, fp
    9478:	ldr	fp, [sp, #4]
    947c:	ldr	sl, [r1, r9, lsl #2]
    9480:	orr	r3, r3, r7
    9484:	mov	r7, #0
    9488:	ldr	r9, [r2, r9, lsl #2]
    948c:	ldr	fp, [r1, fp, lsl #2]
    9490:	orr	r0, r0, sl
    9494:	ldr	sl, [sp, #4]
    9498:	orr	r3, r3, r9
    949c:	ldr	r9, [pc, #3184]	; a114 <rb_crypt+0xdfc>
    94a0:	orr	r0, r0, fp
    94a4:	ldr	fp, [r1, r6, lsl #2]
    94a8:	ldr	sl, [r2, sl, lsl #2]
    94ac:	add	r9, pc, r9
    94b0:	ldr	r6, [r2, r6, lsl #2]
    94b4:	orr	r0, r0, fp
    94b8:	str	lr, [r9, #4]
    94bc:	add	lr, r9, #1168	; 0x490
    94c0:	ldr	r1, [r1, r4, lsl #2]
    94c4:	add	lr, lr, #4
    94c8:	str	ip, [r9, #8]
    94cc:	orr	r3, r3, sl
    94d0:	add	sl, r9, #1232	; 0x4d0
    94d4:	ldr	ip, [pc, #3132]	; a118 <rb_crypt+0xe00>
    94d8:	orr	r3, r3, r6
    94dc:	str	lr, [sp, #16]
    94e0:	add	lr, sl, #4
    94e4:	ldr	r6, [r2, r4, lsl #2]
    94e8:	add	r2, r9, #944	; 0x3b0
    94ec:	add	sl, r9, #880	; 0x370
    94f0:	mov	r5, sl
    94f4:	str	r2, [sp, #28]
    94f8:	orr	r2, r0, r1
    94fc:	add	ip, pc, ip
    9500:	str	r2, [sp, #20]
    9504:	add	r2, ip, #2016	; 0x7e0
    9508:	add	r2, r2, #12
    950c:	ldr	ip, [pc, #3080]	; a11c <rb_crypt+0xe04>
    9510:	orr	r3, r3, r6
    9514:	stmib	sp, {r2, lr}
    9518:	add	lr, r9, #816	; 0x330
    951c:	str	lr, [sp, #12]
    9520:	ldr	lr, [pc, #3064]	; a120 <rb_crypt+0xe08>
    9524:	add	ip, pc, ip
    9528:	str	r3, [sp, #24]
    952c:	add	lr, pc, lr
    9530:	b	9540 <rb_crypt+0x228>
    9534:	ldr	r3, [sp, #4]
    9538:	ldrb	r8, [r3, #1]!
    953c:	str	r3, [sp, #4]
    9540:	ldr	r3, [sp, #20]
    9544:	add	r7, r7, r8
    9548:	rsb	r1, r7, #28
    954c:	ldr	r2, [sp, #24]
    9550:	lsr	r0, r3, r1
    9554:	lsr	r1, r2, r1
    9558:	orr	r0, r0, r3, lsl r7
    955c:	orr	r1, r1, r2, lsl r7
    9560:	and	r3, r0, #127	; 0x7f
    9564:	ubfx	sl, r0, #21, #7
    9568:	and	r4, r1, #127	; 0x7f
    956c:	add	r3, r3, #384	; 0x180
    9570:	ubfx	r8, r0, #14, #7
    9574:	add	r4, r4, #896	; 0x380
    9578:	ldr	r9, [lr, r3, lsl #2]
    957c:	ubfx	r0, r0, #7, #7
    9580:	add	r8, r8, #128	; 0x80
    9584:	ubfx	r6, r1, #21, #7
    9588:	ldr	r2, [lr, r4, lsl #2]
    958c:	add	r0, r0, #256	; 0x100
    9590:	add	r6, r6, #512	; 0x200
    9594:	ldr	fp, [ip, r4, lsl #2]
    9598:	ubfx	r4, r1, #14, #7
    959c:	ubfx	r1, r1, #7, #7
    95a0:	ldr	r3, [ip, r3, lsl #2]
    95a4:	add	r4, r4, #640	; 0x280
    95a8:	orr	r9, r9, r2
    95ac:	add	r1, r1, #768	; 0x300
    95b0:	ldr	r2, [lr, sl, lsl #2]
    95b4:	ldr	sl, [ip, sl, lsl #2]
    95b8:	orr	r3, r3, fp
    95bc:	ldr	fp, [lr, r8, lsl #2]
    95c0:	orr	r2, r9, r2
    95c4:	ldr	r8, [ip, r8, lsl #2]
    95c8:	orr	r3, r3, sl
    95cc:	ldr	r9, [lr, r0, lsl #2]
    95d0:	orr	r2, r2, fp
    95d4:	ldr	r0, [ip, r0, lsl #2]
    95d8:	orr	r3, r3, r8
    95dc:	ldr	sl, [lr, r6, lsl #2]
    95e0:	orr	r2, r2, r9
    95e4:	ldr	r6, [ip, r6, lsl #2]
    95e8:	orr	r3, r3, r0
    95ec:	ldr	r8, [lr, r4, lsl #2]
    95f0:	orr	r2, r2, sl
    95f4:	ldr	r4, [ip, r4, lsl #2]
    95f8:	orr	r3, r3, r6
    95fc:	ldr	fp, [lr, r1, lsl #2]
    9600:	orr	r2, r2, r8
    9604:	ldr	r1, [ip, r1, lsl #2]
    9608:	orr	r3, r3, r4
    960c:	orr	r2, r2, fp
    9610:	orr	r3, r3, r1
    9614:	ldr	r1, [sp, #28]
    9618:	str	r2, [r5, #4]!
    961c:	cmp	r1, r5
    9620:	ldr	r1, [sp, #16]
    9624:	str	r2, [r1, #-4]!
    9628:	ldr	r2, [sp, #12]
    962c:	str	r1, [sp, #16]
    9630:	str	r3, [r2, #4]!
    9634:	str	r2, [sp, #12]
    9638:	ldr	r2, [sp, #8]
    963c:	str	r3, [r2, #-4]!
    9640:	str	r2, [sp, #8]
    9644:	bne	9534 <rb_crypt+0x21c>
    9648:	ldr	r5, [sp, #32]
    964c:	ldrb	r1, [r5, #1]
    9650:	mov	r0, r1
    9654:	bl	8b28 <rb_ascii_to_bin>
    9658:	ldrb	r4, [r5]
    965c:	mov	r2, r0
    9660:	cmp	r1, #0
    9664:	mov	r0, r4
    9668:	moveq	r1, r4
    966c:	bl	8b28 <rb_ascii_to_bin>
    9670:	ldr	r3, [pc, #2732]	; a124 <rb_crypt+0xe0c>
    9674:	orr	r0, r0, r2, lsl #6
    9678:	add	r3, pc, r3
    967c:	ldr	r2, [r3, #16]
    9680:	strb	r4, [r3, #1068]	; 0x42c
    9684:	strb	r1, [r3, #1069]	; 0x42d
    9688:	cmp	r0, r2
    968c:	beq	9b1c <rb_crypt+0x804>
    9690:	mov	lr, #0
    9694:	mov	r1, #24
    9698:	mov	ip, lr
    969c:	mov	r2, #8388608	; 0x800000
    96a0:	mov	r7, lr
    96a4:	str	lr, [r3, #12]
    96a8:	str	r0, [r3, #16]
    96ac:	mov	r3, #1
    96b0:	tst	r0, r3
    96b4:	lsl	r3, r3, #1
    96b8:	orrne	r7, r7, r2
    96bc:	movne	ip, #1
    96c0:	lsr	r2, r2, #1
    96c4:	subs	r1, r1, #1
    96c8:	bne	96b0 <rb_crypt+0x398>
    96cc:	cmp	ip, #0
    96d0:	moveq	r7, ip
    96d4:	beq	96e4 <rb_crypt+0x3cc>
    96d8:	ldr	r3, [pc, #2632]	; a128 <rb_crypt+0xe10>
    96dc:	add	r3, pc, r3
    96e0:	str	r7, [r3, #12]
    96e4:	ldr	r4, [pc, #2624]	; a12c <rb_crypt+0xe14>
    96e8:	mov	r3, #25
    96ec:	ldr	r8, [pc, #2620]	; a130 <rb_crypt+0xe18>
    96f0:	str	r3, [sp, #4]
    96f4:	ldr	lr, [pc, #2616]	; a134 <rb_crypt+0xe1c>
    96f8:	add	r4, pc, r4
    96fc:	ldr	r5, [r4]
    9700:	add	r1, r4, #4096	; 0x1000
    9704:	add	r8, pc, r8
    9708:	ldr	r3, [r4, #1024]	; 0x400
    970c:	add	r0, r8, #948	; 0x3b4
    9710:	add	lr, pc, lr
    9714:	str	r0, [sp, #48]	; 0x30
    9718:	add	r2, lr, #4096	; 0x1000
    971c:	ldr	r9, [lr]
    9720:	str	r8, [sp, #52]	; 0x34
    9724:	ldr	r0, [lr, #1024]	; 0x400
    9728:	orr	r3, r5, r3
    972c:	ldr	r6, [r4, #2048]	; 0x800
    9730:	ldr	r5, [r4, #3072]	; 0xc00
    9734:	orr	r0, r9, r0
    9738:	ldr	r4, [lr, #2048]	; 0x800
    973c:	orr	r3, r3, r6
    9740:	ldr	r6, [r1]
    9744:	orr	r3, r3, r5
    9748:	ldr	r5, [lr, #3072]	; 0xc00
    974c:	orr	r0, r0, r4
    9750:	ldr	r4, [r1, #1024]	; 0x400
    9754:	orr	r3, r3, r6
    9758:	ldr	lr, [r2]
    975c:	orr	r0, r0, r5
    9760:	ldr	r5, [r1, #2048]	; 0x800
    9764:	orr	r3, r3, r4
    9768:	ldr	r4, [r2, #1024]	; 0x400
    976c:	orr	r0, r0, lr
    9770:	ldr	lr, [r1, #3072]	; 0xc00
    9774:	orr	r3, r3, r5
    9778:	ldr	r1, [r2, #2048]	; 0x800
    977c:	orr	r0, r0, r4
    9780:	ldr	r2, [r2, #3072]	; 0xc00
    9784:	orr	r3, r3, lr
    9788:	ldr	r5, [pc, #2472]	; a138 <rb_crypt+0xe20>
    978c:	lsl	lr, r3, #23
    9790:	orr	r0, r0, r1
    9794:	lsr	r1, r3, #9
    9798:	ldr	r4, [pc, #2460]	; a13c <rb_crypt+0xe24>
    979c:	orr	r0, r0, r2
    97a0:	lsr	r2, r3, #15
    97a4:	str	r1, [sp, #20]
    97a8:	lsr	r1, r3, #11
    97ac:	add	r5, pc, r5
    97b0:	str	r2, [sp, #32]
    97b4:	lsl	r2, r3, #7
    97b8:	add	r4, pc, r4
    97bc:	str	lr, [sp, #36]	; 0x24
    97c0:	str	r2, [sp, #16]
    97c4:	lsl	r2, r3, #5
    97c8:	str	r1, [sp, #24]
    97cc:	lsr	r1, r3, #13
    97d0:	str	r2, [sp, #12]
    97d4:	lsr	r2, r3, #31
    97d8:	str	r1, [sp, #28]
    97dc:	str	r2, [sp, #40]	; 0x28
    97e0:	lsl	r2, r3, #3
    97e4:	str	r2, [sp, #8]
    97e8:	lsl	r2, r3, #1
    97ec:	mov	ip, r2
    97f0:	add	r9, r8, #820	; 0x334
    97f4:	add	r6, r8, #884	; 0x374
    97f8:	b	984c <rb_crypt+0x534>
    97fc:	lsl	r2, lr, #23
    9800:	mov	r3, lr
    9804:	lsl	ip, lr, #1
    9808:	str	r2, [sp, #36]	; 0x24
    980c:	lsr	r2, lr, #9
    9810:	str	r2, [sp, #20]
    9814:	lsr	r2, lr, #11
    9818:	str	r2, [sp, #24]
    981c:	lsr	r2, lr, #13
    9820:	str	r2, [sp, #28]
    9824:	lsr	r2, lr, #15
    9828:	str	r2, [sp, #32]
    982c:	lsl	r2, lr, #7
    9830:	str	r2, [sp, #16]
    9834:	lsl	r2, lr, #5
    9838:	str	r2, [sp, #12]
    983c:	lsr	r2, lr, #31
    9840:	str	r2, [sp, #40]	; 0x28
    9844:	lsl	r2, lr, #3
    9848:	str	r2, [sp, #8]
    984c:	ldr	r1, [sp, #16]
    9850:	ldr	r2, [sp, #36]	; 0x24
    9854:	ldr	lr, [r6], #4
    9858:	and	fp, r1, #16515072	; 0xfc0000
    985c:	ldr	r1, [sp, #12]
    9860:	and	sl, r2, #8388608	; 0x800000
    9864:	ldr	r2, [sp, #20]
    9868:	and	r1, r1, #258048	; 0x3f000
    986c:	orr	r1, fp, r1
    9870:	and	r2, r2, #8126464	; 0x7c0000
    9874:	orr	sl, sl, r2
    9878:	ldr	r2, [sp, #24]
    987c:	and	r2, r2, #258048	; 0x3f000
    9880:	orr	fp, sl, r2
    9884:	ldr	r2, [sp, #28]
    9888:	ldr	sl, [r9], #4
    988c:	and	r2, r2, #4032	; 0xfc0
    9890:	str	r2, [sp, #44]	; 0x2c
    9894:	ldr	r2, [sp, #40]	; 0x28
    9898:	orr	r1, r1, r2
    989c:	ldr	r2, [sp, #44]	; 0x2c
    98a0:	orr	r2, fp, r2
    98a4:	ldr	fp, [sp, #32]
    98a8:	and	fp, fp, #63	; 0x3f
    98ac:	orr	r2, r2, fp
    98b0:	ldr	fp, [sp, #8]
    98b4:	eor	lr, lr, r2
    98b8:	and	fp, fp, #4032	; 0xfc0
    98bc:	orr	fp, r1, fp
    98c0:	and	r1, ip, #62	; 0x3e
    98c4:	orr	r1, fp, r1
    98c8:	eor	r2, r2, r1
    98cc:	eor	r1, r1, sl
    98d0:	ldr	sl, [sp, #48]	; 0x30
    98d4:	and	r2, r2, r7
    98d8:	cmp	r6, sl
    98dc:	eor	sl, lr, r2
    98e0:	ubfx	lr, sl, #0, #12
    98e4:	eor	r2, r2, r1
    98e8:	ldrb	r1, [r4, sl, lsr #12]
    98ec:	add	fp, r4, r2, lsr #12
    98f0:	add	lr, r4, lr
    98f4:	ubfx	r2, r2, #0, #12
    98f8:	add	lr, lr, #4096	; 0x1000
    98fc:	add	fp, fp, #8192	; 0x2000
    9900:	ldrb	lr, [lr]
    9904:	add	r2, r4, r2
    9908:	add	r2, r2, #12288	; 0x3000
    990c:	ldrb	sl, [fp]
    9910:	ldrb	r2, [r2]
    9914:	add	lr, lr, #256	; 0x100
    9918:	ldr	fp, [r5, lr, lsl #2]
    991c:	add	sl, sl, #512	; 0x200
    9920:	ldr	r1, [r5, r1, lsl #2]
    9924:	add	r2, r2, #768	; 0x300
    9928:	ldr	lr, [r5, sl, lsl #2]
    992c:	ldr	r2, [r5, r2, lsl #2]
    9930:	orr	fp, r1, fp
    9934:	orr	fp, fp, lr
    9938:	orr	fp, fp, r2
    993c:	eor	lr, r0, fp
    9940:	mov	r0, r3
    9944:	bne	97fc <rb_crypt+0x4e4>
    9948:	ldr	r2, [sp, #4]
    994c:	mov	r0, lr
    9950:	subs	r2, r2, #1
    9954:	str	r2, [sp, #4]
    9958:	bne	97f0 <rb_crypt+0x4d8>
    995c:	ldr	r4, [pc, #2012]	; a140 <rb_crypt+0xe28>
    9960:	lsr	sl, lr, #24
    9964:	uxtb	r9, lr
    9968:	ubfx	r6, r0, #16, #8
    996c:	add	r9, r9, #768	; 0x300
    9970:	uxtb	r7, r3
    9974:	ldr	lr, [pc, #1992]	; a144 <rb_crypt+0xe2c>
    9978:	ubfx	r0, r0, #8, #8
    997c:	add	r7, r7, #1792	; 0x700
    9980:	lsr	r8, r3, #24
    9984:	add	r6, r6, #256	; 0x100
    9988:	add	r1, r0, #512	; 0x200
    998c:	ubfx	r5, r3, #16, #8
    9990:	ldr	ip, [sp, #52]	; 0x34
    9994:	add	r4, pc, r4
    9998:	add	r8, r8, #1024	; 0x400
    999c:	ubfx	r3, r3, #8, #8
    99a0:	ldr	r2, [r4, r9, lsl #2]
    99a4:	add	r5, r5, #1280	; 0x500
    99a8:	add	lr, pc, lr
    99ac:	add	r3, r3, #1536	; 0x600
    99b0:	ldr	r0, [r4, sl, lsl #2]
    99b4:	ldr	r9, [lr, r9, lsl #2]
    99b8:	ldr	sl, [lr, sl, lsl #2]
    99bc:	orr	fp, r0, r2
    99c0:	add	r0, ip, #1056	; 0x420
    99c4:	ldr	r2, [r4, r8, lsl #2]
    99c8:	add	r0, r0, #12
    99cc:	ldr	r8, [lr, r8, lsl #2]
    99d0:	orr	r9, sl, r9
    99d4:	ldr	sl, [r4, r7, lsl #2]
    99d8:	orr	r2, fp, r2
    99dc:	ldr	r7, [lr, r7, lsl #2]
    99e0:	orr	r9, r9, r8
    99e4:	ldr	r8, [r4, r6, lsl #2]
    99e8:	orr	r2, r2, sl
    99ec:	ldr	fp, [r4, r1, lsl #2]
    99f0:	orr	r9, r9, r7
    99f4:	ldr	r7, [lr, r6, lsl #2]
    99f8:	orr	r2, r2, r8
    99fc:	ldr	r6, [r4, r5, lsl #2]
    9a00:	orr	fp, r2, fp
    9a04:	ldr	r4, [r4, r3, lsl #2]
    9a08:	orr	r9, r9, r7
    9a0c:	ldr	r7, [lr, r1, lsl #2]
    9a10:	orr	r1, fp, r6
    9a14:	ldr	r5, [lr, r5, lsl #2]
    9a18:	orr	r1, r1, r4
    9a1c:	ldr	r6, [lr, r3, lsl #2]
    9a20:	lsl	r3, r1, #2
    9a24:	orr	r2, r9, r7
    9a28:	lsr	lr, r1, #16
    9a2c:	ldr	r1, [pc, #1812]	; a148 <rb_crypt+0xe30>
    9a30:	and	r4, r3, #63	; 0x3f
    9a34:	orr	r2, r2, r5
    9a38:	ubfx	r5, r3, #12, #6
    9a3c:	ubfx	r3, r3, #6, #6
    9a40:	orr	r2, r2, r6
    9a44:	orr	lr, lr, r2, lsl #16
    9a48:	add	r1, pc, r1
    9a4c:	ubfx	r8, r2, #20, #6
    9a50:	and	r6, lr, #63	; 0x3f
    9a54:	ubfx	sl, lr, #18, #6
    9a58:	add	r3, r1, r3
    9a5c:	add	r6, r1, r6
    9a60:	ubfx	r9, lr, #12, #6
    9a64:	add	r5, r1, r5
    9a68:	ldrb	fp, [r6, #1100]	; 0x44c
    9a6c:	ubfx	r7, r2, #14, #6
    9a70:	add	r4, r1, r4
    9a74:	ubfx	r6, r2, #8, #6
    9a78:	add	r9, r1, r9
    9a7c:	add	r8, r1, r8
    9a80:	ubfx	lr, lr, #6, #6
    9a84:	add	sl, r1, sl
    9a88:	add	r7, r1, r7
    9a8c:	add	r2, r1, r2, lsr #26
    9a90:	ldrb	sl, [sl, #1100]	; 0x44c
    9a94:	add	lr, r1, lr
    9a98:	add	r1, r1, r6
    9a9c:	ldrb	r1, [r1, #1100]	; 0x44c
    9aa0:	ldrb	r6, [r9, #1100]	; 0x44c
    9aa4:	ldrb	r8, [r8, #1100]	; 0x44c
    9aa8:	strb	sl, [ip, #1074]	; 0x432
    9aac:	ldrb	r9, [lr, #1100]	; 0x44c
    9ab0:	strb	fp, [ip, #1077]	; 0x435
    9ab4:	ldrb	lr, [r7, #1100]	; 0x44c
    9ab8:	strb	r8, [ip, #1071]	; 0x42f
    9abc:	ldrb	r2, [r2, #1100]	; 0x44c
    9ac0:	strb	lr, [ip, #1072]	; 0x430
    9ac4:	strb	r1, [ip, #1073]	; 0x431
    9ac8:	strb	r6, [ip, #1075]	; 0x433
    9acc:	strb	r9, [ip, #1076]	; 0x434
    9ad0:	strb	r2, [ip, #1070]	; 0x42e
    9ad4:	ldr	r2, [sp, #4]
    9ad8:	ldrb	r1, [r5, #1100]	; 0x44c
    9adc:	strb	r2, [ip, #1081]	; 0x439
    9ae0:	ldrb	r2, [r3, #1100]	; 0x44c
    9ae4:	strb	r1, [ip, #1078]	; 0x436
    9ae8:	ldrb	r3, [r4, #1100]	; 0x44c
    9aec:	strb	r2, [ip, #1079]	; 0x437
    9af0:	strb	r3, [ip, #1080]	; 0x438
    9af4:	b	937c <rb_crypt+0x64>
    9af8:	ldr	r3, [pc, #1612]	; a14c <rb_crypt+0xe34>
    9afc:	add	r3, pc, r3
    9b00:	ldr	r2, [r3, #8]
    9b04:	cmp	ip, r2
    9b08:	bne	93e4 <rb_crypt+0xcc>
    9b0c:	ldr	r3, [r3, #4]
    9b10:	cmp	lr, r3
    9b14:	bne	93e4 <rb_crypt+0xcc>
    9b18:	b	964c <rb_crypt+0x334>
    9b1c:	ldr	r7, [r3, #12]
    9b20:	b	96e4 <rb_crypt+0x3cc>
    9b24:	ldr	r6, [pc, #1572]	; a150 <rb_crypt+0xe38>
    9b28:	mov	r2, #3
    9b2c:	mov	r0, r5
    9b30:	ldr	r1, [pc, #1564]	; a154 <rb_crypt+0xe3c>
    9b34:	add	r6, pc, r6
    9b38:	add	r1, pc, r1
    9b3c:	str	r5, [r6, #1092]	; 0x444
    9b40:	bl	4be4 <strncmp@plt>
    9b44:	cmp	r0, #0
    9b48:	beq	a08c <rb_crypt+0xd74>
    9b4c:	mov	r3, #0
    9b50:	mov	r8, r5
    9b54:	str	r5, [r6, #1096]	; 0x448
    9b58:	str	r3, [sp, #4]
    9b5c:	mov	r9, #0
    9b60:	movw	r7, #8961	; 0x2301
    9b64:	movt	r7, #26437	; 0x6745
    9b68:	movw	r3, #43913	; 0xab89
    9b6c:	movt	r3, #61389	; 0xefcd
    9b70:	movw	fp, #56574	; 0xdcfe
    9b74:	movt	fp, #39098	; 0x98ba
    9b78:	movw	sl, #21622	; 0x5476
    9b7c:	movt	sl, #4146	; 0x1032
    9b80:	mov	r0, r4
    9b84:	str	r3, [sp, #8]
    9b88:	add	r5, sp, #72	; 0x48
    9b8c:	str	r7, [sp, #72]	; 0x48
    9b90:	add	r6, sp, #160	; 0xa0
    9b94:	str	r3, [sp, #76]	; 0x4c
    9b98:	str	fp, [sp, #80]	; 0x50
    9b9c:	str	sl, [sp, #84]	; 0x54
    9ba0:	str	r9, [sp, #88]	; 0x58
    9ba4:	str	r9, [sp, #92]	; 0x5c
    9ba8:	bl	47c4 <strlen@plt>
    9bac:	mov	r2, r0
    9bb0:	mov	r1, r4
    9bb4:	mov	r0, r5
    9bb8:	bl	6384 <MD5Update>
    9bbc:	ldr	r1, [pc, #1428]	; a158 <rb_crypt+0xe40>
    9bc0:	mov	r0, r5
    9bc4:	mov	r2, #3
    9bc8:	add	r1, pc, r1
    9bcc:	bl	6384 <MD5Update>
    9bd0:	mov	r1, r8
    9bd4:	mov	r0, r5
    9bd8:	ldr	r2, [sp, #4]
    9bdc:	bl	6384 <MD5Update>
    9be0:	ldr	r3, [sp, #8]
    9be4:	mov	r0, r4
    9be8:	str	r7, [sp, #160]	; 0xa0
    9bec:	add	r7, sp, #56	; 0x38
    9bf0:	str	r3, [sp, #164]	; 0xa4
    9bf4:	str	fp, [sp, #168]	; 0xa8
    9bf8:	str	sl, [sp, #172]	; 0xac
    9bfc:	str	r9, [sp, #176]	; 0xb0
    9c00:	str	r9, [sp, #180]	; 0xb4
    9c04:	bl	47c4 <strlen@plt>
    9c08:	mov	r2, r0
    9c0c:	mov	r1, r4
    9c10:	mov	r0, r6
    9c14:	bl	6384 <MD5Update>
    9c18:	mov	r1, r8
    9c1c:	mov	r0, r6
    9c20:	ldr	r2, [sp, #4]
    9c24:	bl	6384 <MD5Update>
    9c28:	mov	r0, r4
    9c2c:	bl	47c4 <strlen@plt>
    9c30:	mov	r2, r0
    9c34:	mov	r1, r4
    9c38:	mov	r0, r6
    9c3c:	bl	6384 <MD5Update>
    9c40:	mov	r1, r6
    9c44:	mov	r0, r7
    9c48:	bl	6464 <MD5Final>
    9c4c:	mov	r0, r4
    9c50:	bl	47c4 <strlen@plt>
    9c54:	subs	r8, r0, #0
    9c58:	subne	r3, r8, #1
    9c5c:	subne	r9, r8, #16
    9c60:	bicne	r3, r3, #15
    9c64:	subne	r9, r9, r3
    9c68:	beq	9c90 <rb_crypt+0x978>
    9c6c:	cmp	r8, #16
    9c70:	mov	r1, r7
    9c74:	movlt	r2, r8
    9c78:	movge	r2, #16
    9c7c:	mov	r0, r5
    9c80:	sub	r8, r8, #16
    9c84:	bl	6384 <MD5Update>
    9c88:	cmp	r8, r9
    9c8c:	bne	9c6c <rb_crypt+0x954>
    9c90:	mov	r2, #0
    9c94:	mov	r3, #0
    9c98:	mov	r0, r4
    9c9c:	strd	r2, [sp, #56]	; 0x38
    9ca0:	strd	r2, [r7, #8]
    9ca4:	bl	47c4 <strlen@plt>
    9ca8:	subs	r8, r0, #0
    9cac:	beq	9cd0 <rb_crypt+0x9b8>
    9cb0:	tst	r8, #1
    9cb4:	mov	r1, r4
    9cb8:	mov	r2, #1
    9cbc:	movne	r1, r7
    9cc0:	mov	r0, r5
    9cc4:	bl	6384 <MD5Update>
    9cc8:	lsrs	r8, r8, #1
    9ccc:	bne	9cb0 <rb_crypt+0x998>
    9cd0:	ldr	r8, [pc, #1156]	; a15c <rb_crypt+0xe44>
    9cd4:	movw	r3, #8961	; 0x2301
    9cd8:	movt	r3, #26437	; 0x6745
    9cdc:	mov	r2, #120	; 0x78
    9ce0:	movw	fp, #21622	; 0x5476
    9ce4:	movt	fp, #4146	; 0x1032
    9ce8:	ldr	r1, [pc, #1136]	; a160 <rb_crypt+0xe48>
    9cec:	movw	sl, #43691	; 0xaaab
    9cf0:	movt	sl, #43690	; 0xaaaa
    9cf4:	str	r3, [sp, #8]
    9cf8:	movw	r3, #43913	; 0xab89
    9cfc:	movt	r3, #61389	; 0xefcd
    9d00:	add	r8, pc, r8
    9d04:	add	r9, r8, #948	; 0x3b4
    9d08:	str	r3, [sp, #12]
    9d0c:	movw	r3, #56574	; 0xdcfe
    9d10:	movt	r3, #39098	; 0x98ba
    9d14:	add	r1, pc, r1
    9d18:	mov	r0, r9
    9d1c:	str	r3, [sp, #16]
    9d20:	bl	4680 <rb_strlcpy@plt>
    9d24:	mov	r0, r9
    9d28:	ldr	r2, [sp, #4]
    9d2c:	ldr	r1, [r8, #1092]	; 0x444
    9d30:	bl	489c <strncat@plt>
    9d34:	ldr	r1, [pc, #1064]	; a164 <rb_crypt+0xe4c>
    9d38:	mov	r0, r9
    9d3c:	mov	r2, #120	; 0x78
    9d40:	movw	r9, #18725	; 0x4925
    9d44:	movt	r9, #9362	; 0x2492
    9d48:	add	r1, pc, r1
    9d4c:	bl	4b60 <rb_strlcat@plt>
    9d50:	mov	r1, r5
    9d54:	mov	r0, r7
    9d58:	bl	6464 <MD5Final>
    9d5c:	mov	r5, #0
    9d60:	b	9ddc <rb_crypt+0xac4>
    9d64:	mov	r0, r4
    9d68:	bl	47c4 <strlen@plt>
    9d6c:	mov	r2, r0
    9d70:	mov	r1, r4
    9d74:	mov	r0, r6
    9d78:	bl	6384 <MD5Update>
    9d7c:	umull	r2, r3, sl, r5
    9d80:	lsr	r3, r3, #1
    9d84:	add	r3, r3, r3, lsl #1
    9d88:	cmp	r5, r3
    9d8c:	bne	9e58 <rb_crypt+0xb40>
    9d90:	umull	r2, r3, r9, r5
    9d94:	sub	r2, r5, r3
    9d98:	add	r3, r3, r2, lsr #1
    9d9c:	lsr	r3, r3, #2
    9da0:	rsb	r3, r3, r3, lsl #3
    9da4:	cmp	r5, r3
    9da8:	bne	9e3c <rb_crypt+0xb24>
    9dac:	cmp	r8, #0
    9db0:	beq	9e20 <rb_crypt+0xb08>
    9db4:	mov	r2, #16
    9db8:	mov	r1, r7
    9dbc:	mov	r0, r6
    9dc0:	bl	6384 <MD5Update>
    9dc4:	add	r5, r5, #1
    9dc8:	mov	r1, r6
    9dcc:	mov	r0, r7
    9dd0:	bl	6464 <MD5Final>
    9dd4:	cmp	r5, #1000	; 0x3e8
    9dd8:	beq	9ef8 <rb_crypt+0xbe0>
    9ddc:	ldr	r2, [sp, #8]
    9de0:	mov	r3, #0
    9de4:	ands	r8, r5, #1
    9de8:	str	r2, [sp, #160]	; 0xa0
    9dec:	ldr	r2, [sp, #12]
    9df0:	str	fp, [sp, #172]	; 0xac
    9df4:	str	r3, [sp, #176]	; 0xb0
    9df8:	str	r3, [sp, #180]	; 0xb4
    9dfc:	str	r2, [sp, #164]	; 0xa4
    9e00:	ldr	r2, [sp, #16]
    9e04:	str	r2, [sp, #168]	; 0xa8
    9e08:	bne	9d64 <rb_crypt+0xa4c>
    9e0c:	mov	r2, #16
    9e10:	mov	r1, r7
    9e14:	mov	r0, r6
    9e18:	bl	6384 <MD5Update>
    9e1c:	b	9d7c <rb_crypt+0xa64>
    9e20:	mov	r0, r4
    9e24:	bl	47c4 <strlen@plt>
    9e28:	mov	r2, r0
    9e2c:	mov	r1, r4
    9e30:	mov	r0, r6
    9e34:	bl	6384 <MD5Update>
    9e38:	b	9dc4 <rb_crypt+0xaac>
    9e3c:	mov	r0, r4
    9e40:	bl	47c4 <strlen@plt>
    9e44:	mov	r2, r0
    9e48:	mov	r1, r4
    9e4c:	mov	r0, r6
    9e50:	bl	6384 <MD5Update>
    9e54:	b	9dac <rb_crypt+0xa94>
    9e58:	ldr	r3, [pc, #776]	; a168 <rb_crypt+0xe50>
    9e5c:	mov	r0, r6
    9e60:	ldr	r2, [sp, #4]
    9e64:	add	r3, pc, r3
    9e68:	ldr	r1, [r3, #1092]	; 0x444
    9e6c:	bl	6384 <MD5Update>
    9e70:	b	9d90 <rb_crypt+0xa78>
    9e74:	ldr	r6, [pc, #752]	; a16c <rb_crypt+0xe54>
    9e78:	mov	r0, r5
    9e7c:	bl	47c4 <strlen@plt>
    9e80:	add	r7, r0, #109	; 0x6d
    9e84:	add	r6, pc, r6
    9e88:	ldr	r3, [r6, #1100]	; 0x44c
    9e8c:	ldr	r2, [r6, #1104]	; 0x450
    9e90:	cmp	r7, r3
    9e94:	ble	9eb8 <rb_crypt+0xba0>
    9e98:	mov	r0, r2
    9e9c:	mov	r1, r7
    9ea0:	bl	4c14 <realloc@plt>
    9ea4:	subs	r2, r0, #0
    9ea8:	beq	9378 <rb_crypt+0x60>
    9eac:	mov	r3, r7
    9eb0:	str	r7, [r6, #1100]	; 0x44c
    9eb4:	str	r2, [r6, #1104]	; 0x450
    9eb8:	mov	r1, r5
    9ebc:	mov	r0, r4
    9ec0:	bl	7860 <rb_sha512_crypt_r>
    9ec4:	b	937c <rb_crypt+0x64>
    9ec8:	mov	r0, r5
    9ecc:	bl	47c4 <strlen@plt>
    9ed0:	add	r6, r0, #66	; 0x42
    9ed4:	mov	r0, r6
    9ed8:	bl	4980 <malloc@plt>
    9edc:	subs	r2, r0, #0
    9ee0:	beq	9378 <rb_crypt+0x60>
    9ee4:	mov	r3, r6
    9ee8:	mov	r1, r5
    9eec:	mov	r0, r4
    9ef0:	bl	6b08 <rb_sha256_crypt_r>
    9ef4:	b	937c <rb_crypt+0x64>
    9ef8:	ldr	r1, [pc, #624]	; a170 <rb_crypt+0xe58>
    9efc:	add	r1, pc, r1
    9f00:	add	r4, r1, #948	; 0x3b4
    9f04:	mov	r0, r4
    9f08:	bl	47c4 <strlen@plt>
    9f0c:	ldrb	r2, [sp, #62]	; 0x3e
    9f10:	add	r1, r4, r0
    9f14:	add	r3, r1, #4
    9f18:	mov	ip, r1
    9f1c:	ldrb	r5, [sp, #56]	; 0x38
    9f20:	ldrb	r4, [sp, #68]	; 0x44
    9f24:	lsl	r0, r2, #8
    9f28:	ldr	lr, [pc, #580]	; a174 <rb_crypt+0xe5c>
    9f2c:	orr	r0, r0, r5, lsl #16
    9f30:	orr	r0, r0, r4
    9f34:	add	lr, pc, lr
    9f38:	and	r2, r0, #63	; 0x3f
    9f3c:	lsr	r0, r0, #6
    9f40:	add	r2, lr, r2
    9f44:	ldrb	r2, [r2, #1100]	; 0x44c
    9f48:	strb	r2, [ip], #1
    9f4c:	cmp	ip, r3
    9f50:	bne	9f38 <rb_crypt+0xc20>
    9f54:	ldrb	r0, [sp, #63]	; 0x3f
    9f58:	add	lr, r1, #8
    9f5c:	ldrb	r4, [sp, #57]	; 0x39
    9f60:	ldrb	r2, [sp, #69]	; 0x45
    9f64:	lsl	r0, r0, #8
    9f68:	ldr	ip, [pc, #520]	; a178 <rb_crypt+0xe60>
    9f6c:	orr	r0, r0, r4, lsl #16
    9f70:	orr	r0, r0, r2
    9f74:	add	ip, pc, ip
    9f78:	and	r2, r0, #63	; 0x3f
    9f7c:	lsr	r0, r0, #6
    9f80:	add	r2, ip, r2
    9f84:	ldrb	r2, [r2, #1100]	; 0x44c
    9f88:	strb	r2, [r3], #1
    9f8c:	cmp	r3, lr
    9f90:	bne	9f78 <rb_crypt+0xc60>
    9f94:	ldrb	r0, [sp, #64]	; 0x40
    9f98:	add	lr, r1, #12
    9f9c:	ldrb	r4, [sp, #58]	; 0x3a
    9fa0:	ldrb	r2, [sp, #70]	; 0x46
    9fa4:	lsl	r0, r0, #8
    9fa8:	ldr	ip, [pc, #460]	; a17c <rb_crypt+0xe64>
    9fac:	orr	r0, r0, r4, lsl #16
    9fb0:	orr	r0, r0, r2
    9fb4:	add	ip, pc, ip
    9fb8:	and	r2, r0, #63	; 0x3f
    9fbc:	lsr	r0, r0, #6
    9fc0:	add	r2, ip, r2
    9fc4:	ldrb	r2, [r2, #1100]	; 0x44c
    9fc8:	strb	r2, [r3], #1
    9fcc:	cmp	r3, lr
    9fd0:	bne	9fb8 <rb_crypt+0xca0>
    9fd4:	ldrb	r0, [sp, #65]	; 0x41
    9fd8:	add	lr, r1, #16
    9fdc:	ldrb	r4, [sp, #59]	; 0x3b
    9fe0:	ldrb	r2, [sp, #71]	; 0x47
    9fe4:	lsl	r0, r0, #8
    9fe8:	ldr	ip, [pc, #400]	; a180 <rb_crypt+0xe68>
    9fec:	orr	r0, r0, r4, lsl #16
    9ff0:	orr	r0, r0, r2
    9ff4:	add	ip, pc, ip
    9ff8:	and	r2, r0, #63	; 0x3f
    9ffc:	lsr	r0, r0, #6
    a000:	add	r2, ip, r2
    a004:	ldrb	r2, [r2, #1100]	; 0x44c
    a008:	strb	r2, [r3], #1
    a00c:	cmp	r3, lr
    a010:	bne	9ff8 <rb_crypt+0xce0>
    a014:	ldrb	r0, [sp, #66]	; 0x42
    a018:	add	lr, r1, #20
    a01c:	ldrb	r4, [sp, #60]	; 0x3c
    a020:	ldrb	r2, [sp, #61]	; 0x3d
    a024:	lsl	r0, r0, #8
    a028:	ldr	ip, [pc, #340]	; a184 <rb_crypt+0xe6c>
    a02c:	orr	r0, r0, r4, lsl #16
    a030:	orr	r0, r0, r2
    a034:	add	ip, pc, ip
    a038:	and	r2, r0, #63	; 0x3f
    a03c:	lsr	r0, r0, #6
    a040:	add	r2, ip, r2
    a044:	ldrb	r2, [r2, #1100]	; 0x44c
    a048:	strb	r2, [r3], #1
    a04c:	cmp	r3, lr
    a050:	bne	a038 <rb_crypt+0xd20>
    a054:	ldrb	r3, [sp, #67]	; 0x43
    a058:	mov	r2, #0
    a05c:	strb	r2, [r1, #22]
    a060:	ldr	r0, [pc, #288]	; a188 <rb_crypt+0xe70>
    a064:	and	r2, r3, #63	; 0x3f
    a068:	add	r3, ip, r3, lsr #6
    a06c:	add	ip, ip, r2
    a070:	ldrb	r2, [ip, #1100]	; 0x44c
    a074:	add	r0, pc, r0
    a078:	ldrb	r3, [r3, #1100]	; 0x44c
    a07c:	add	r0, r0, #948	; 0x3b4
    a080:	strb	r2, [r1, #20]
    a084:	strb	r3, [r1, #21]
    a088:	b	937c <rb_crypt+0x64>
    a08c:	ldrb	r2, [r5, #3]
    a090:	add	r8, r5, #3
    a094:	str	r8, [r6, #1092]	; 0x444
    a098:	str	r8, [r6, #1096]	; 0x448
    a09c:	subs	r3, r2, #36	; 0x24
    a0a0:	movne	r3, #1
    a0a4:	cmp	r2, #0
    a0a8:	moveq	r3, #0
    a0ac:	cmp	r3, #0
    a0b0:	beq	a104 <rb_crypt+0xdec>
    a0b4:	add	r5, r5, #11
    a0b8:	mov	r3, r8
    a0bc:	ldrb	r2, [r3, #1]!
    a0c0:	cmp	r2, #0
    a0c4:	cmpne	r2, #36	; 0x24
    a0c8:	beq	a0ec <rb_crypt+0xdd4>
    a0cc:	cmp	r3, r5
    a0d0:	bne	a0bc <rb_crypt+0xda4>
    a0d4:	ldr	r2, [pc, #176]	; a18c <rb_crypt+0xe74>
    a0d8:	mov	r1, #8
    a0dc:	str	r1, [sp, #4]
    a0e0:	add	r2, pc, r2
    a0e4:	str	r3, [r2, #1096]	; 0x448
    a0e8:	b	9b5c <rb_crypt+0x844>
    a0ec:	ldr	r2, [pc, #156]	; a190 <rb_crypt+0xe78>
    a0f0:	sub	r1, r3, r8
    a0f4:	str	r1, [sp, #4]
    a0f8:	add	r2, pc, r2
    a0fc:	str	r3, [r2, #1096]	; 0x448
    a100:	b	9b5c <rb_crypt+0x844>
    a104:	str	r3, [sp, #4]
    a108:	b	9b5c <rb_crypt+0x844>
    a10c:	.word	0x0002958c
    a110:	.word	0x00028574
    a114:	.word	0x00021020
    a118:	.word	0x0000cbac
    a11c:	.word	0x0002647c
    a120:	.word	0x00027474
    a124:	.word	0x00020e54
    a128:	.word	0x00020df0
    a12c:	.word	0x0002e2a8
    a130:	.word	0x00020dc8
    a134:	.word	0x00030290
    a138:	.word	0x000211f4
    a13c:	.word	0x000221e8
    a140:	.word	0x0002a00c
    a144:	.word	0x0002bff8
    a148:	.word	0x0000c660
    a14c:	.word	0x000209d0
    a150:	.word	0x00020998
    a154:	.word	0x0000cd78
    a158:	.word	0x0000cce8
    a15c:	.word	0x000207cc
    a160:	.word	0x0000cb9c
    a164:	.word	0x0000cb5c
    a168:	.word	0x00020668
    a16c:	.word	0x00020648
    a170:	.word	0x000205d0
    a174:	.word	0x0000c174
    a178:	.word	0x0000c134
    a17c:	.word	0x0000c0f4
    a180:	.word	0x0000c0b4
    a184:	.word	0x0000c074
    a188:	.word	0x00020458
    a18c:	.word	0x000203ec
    a190:	.word	0x000203d4

0000a194 <rb_init_bh>:
    a194:	mov	r1, #12
    a198:	mov	r0, #1
    a19c:	str	r4, [sp, #-8]!
    a1a0:	str	lr, [sp, #4]
    a1a4:	bl	45c0 <calloc@plt>
    a1a8:	cmp	r0, #0
    a1ac:	beq	a1c8 <rb_init_bh+0x34>
    a1b0:	ldr	r3, [pc, #20]	; a1cc <rb_init_bh+0x38>
    a1b4:	ldr	r4, [sp]
    a1b8:	add	sp, sp, #4
    a1bc:	add	r3, pc, r3
    a1c0:	str	r0, [r3]
    a1c4:	pop	{pc}		; (ldr pc, [sp], #4)
    a1c8:	bl	495c <rb_outofmemory@plt>
    a1cc:	.word	0x000317e4

0000a1d0 <rb_bh_create>:
    a1d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
    a1d4:	strd	r6, [sp, #8]
    a1d8:	subs	r7, r1, #0
    a1dc:	movle	r3, #1
    a1e0:	movgt	r3, #0
    a1e4:	str	r8, [sp, #16]
    a1e8:	cmp	r0, #0
    a1ec:	str	lr, [sp, #20]
    a1f0:	moveq	r3, #1
    a1f4:	cmp	r3, #0
    a1f8:	bne	a2e8 <rb_bh_create+0x118>
    a1fc:	cmp	r0, #11
    a200:	mov	r5, r0
    a204:	bls	a2c4 <rb_bh_create+0xf4>
    a208:	mov	r1, #48	; 0x30
    a20c:	mov	r0, #1
    a210:	mov	r6, r2
    a214:	bl	45c0 <calloc@plt>
    a218:	subs	r4, r0, #0
    a21c:	beq	a2c0 <rb_bh_create+0xf0>
    a220:	cmp	r6, #0
    a224:	str	r5, [r4, #12]
    a228:	str	r7, [r4, #16]
    a22c:	beq	a25c <rb_bh_create+0x8c>
    a230:	mov	r0, r6
    a234:	bl	47c4 <strlen@plt>
    a238:	add	r5, r0, #1
    a23c:	mov	r0, r5
    a240:	bl	4980 <malloc@plt>
    a244:	subs	r7, r0, #0
    a248:	beq	a2c0 <rb_bh_create+0xf0>
    a24c:	mov	r2, r5
    a250:	mov	r1, r6
    a254:	bl	47e8 <memcpy@plt>
    a258:	str	r7, [r4, #44]	; 0x2c
    a25c:	ldr	r3, [pc, #168]	; a30c <rb_bh_create+0x13c>
    a260:	mov	r2, #0
    a264:	str	r4, [r4]
    a268:	str	r2, [r4, #4]
    a26c:	add	r3, pc, r3
    a270:	ldr	r3, [r3]
    a274:	ldr	r2, [r3]
    a278:	cmp	r2, #0
    a27c:	str	r2, [r4, #8]
    a280:	strne	r4, [r2, #4]
    a284:	beq	a2b0 <rb_bh_create+0xe0>
    a288:	ldr	r2, [r3, #8]
    a28c:	mov	r0, r4
    a290:	ldrd	r6, [sp, #8]
    a294:	ldr	r8, [sp, #16]
    a298:	add	r2, r2, #1
    a29c:	str	r4, [r3]
    a2a0:	ldrd	r4, [sp]
    a2a4:	add	sp, sp, #20
    a2a8:	str	r2, [r3, #8]
    a2ac:	pop	{pc}		; (ldr pc, [sp], #4)
    a2b0:	ldr	r2, [r3, #4]
    a2b4:	cmp	r2, #0
    a2b8:	streq	r4, [r3, #4]
    a2bc:	b	a288 <rb_bh_create+0xb8>
    a2c0:	bl	495c <rb_outofmemory@plt>
    a2c4:	ldr	r2, [pc, #68]	; a310 <rb_bh_create+0x140>
    a2c8:	mov	r3, #151	; 0x97
    a2cc:	ldr	r1, [pc, #64]	; a314 <rb_bh_create+0x144>
    a2d0:	ldr	r0, [pc, #64]	; a318 <rb_bh_create+0x148>
    a2d4:	add	r2, pc, r2
    a2d8:	add	r1, pc, r1
    a2dc:	add	r0, pc, r0
    a2e0:	bl	48f0 <rb_lib_log@plt>
    a2e4:	bl	4398 <abort@plt>
    a2e8:	ldr	r2, [pc, #44]	; a31c <rb_bh_create+0x14c>
    a2ec:	mov	r3, #147	; 0x93
    a2f0:	ldr	r1, [pc, #40]	; a320 <rb_bh_create+0x150>
    a2f4:	ldr	r0, [pc, #40]	; a324 <rb_bh_create+0x154>
    a2f8:	add	r2, pc, r2
    a2fc:	add	r1, pc, r1
    a300:	add	r0, pc, r0
    a304:	bl	48f0 <rb_lib_log@plt>
    a308:	bl	4398 <abort@plt>
    a30c:	.word	0x00031734
    a310:	.word	0x0000c5e0
    a314:	.word	0x0000c63c
    a318:	.word	0x0000c610
    a31c:	.word	0x0000c5bc
    a320:	.word	0x0000c5c4
    a324:	.word	0x0000c5ec

0000a328 <rb_bh_alloc>:
    a328:	subs	r3, r0, #0
    a32c:	str	r4, [sp, #-8]!
    a330:	str	lr, [sp, #4]
    a334:	beq	a358 <rb_bh_alloc+0x30>
    a338:	mov	r0, #1
    a33c:	ldr	r1, [r3, #12]
    a340:	bl	45c0 <calloc@plt>
    a344:	cmp	r0, #0
    a348:	beq	a37c <rb_bh_alloc+0x54>
    a34c:	ldr	r4, [sp]
    a350:	add	sp, sp, #4
    a354:	pop	{pc}		; (ldr pc, [sp], #4)
    a358:	ldr	r2, [pc, #32]	; a380 <rb_bh_alloc+0x58>
    a35c:	mov	r3, #186	; 0xba
    a360:	ldr	r1, [pc, #28]	; a384 <rb_bh_alloc+0x5c>
    a364:	ldr	r0, [pc, #28]	; a388 <rb_bh_alloc+0x60>
    a368:	add	r2, pc, r2
    a36c:	add	r1, pc, r1
    a370:	add	r0, pc, r0
    a374:	bl	48f0 <rb_lib_log@plt>
    a378:	bl	4398 <abort@plt>
    a37c:	bl	495c <rb_outofmemory@plt>
    a380:	.word	0x0000c54c
    a384:	.word	0x0000c5e4
    a388:	.word	0x0000c57c

0000a38c <rb_bh_free>:
    a38c:	cmp	r0, #0
    a390:	str	r4, [sp, #-8]!
    a394:	str	lr, [sp, #4]
    a398:	beq	a3bc <rb_bh_free+0x30>
    a39c:	cmp	r1, #0
    a3a0:	beq	a3d0 <rb_bh_free+0x44>
    a3a4:	mov	r0, r1
    a3a8:	bl	46d4 <free@plt>
    a3ac:	mov	r0, #0
    a3b0:	ldr	r4, [sp]
    a3b4:	add	sp, sp, #4
    a3b8:	pop	{pc}		; (ldr pc, [sp], #4)
    a3bc:	ldr	r0, [pc, #32]	; a3e4 <rb_bh_free+0x58>
    a3c0:	add	r0, pc, r0
    a3c4:	bl	48f0 <rb_lib_log@plt>
    a3c8:	mov	r0, #1
    a3cc:	b	a3b0 <rb_bh_free+0x24>
    a3d0:	ldr	r0, [pc, #16]	; a3e8 <rb_bh_free+0x5c>
    a3d4:	add	r0, pc, r0
    a3d8:	bl	48f0 <rb_lib_log@plt>
    a3dc:	mov	r0, #1
    a3e0:	b	a3b0 <rb_bh_free+0x24>
    a3e4:	.word	0x0000c5b0
    a3e8:	.word	0x0000c5bc

0000a3ec <rb_bh_destroy>:
    a3ec:	str	r4, [sp, #-8]!
    a3f0:	subs	r4, r0, #0
    a3f4:	moveq	r0, #1
    a3f8:	str	lr, [sp, #4]
    a3fc:	beq	a460 <rb_bh_destroy+0x74>
    a400:	ldr	r3, [pc, #100]	; a46c <rb_bh_destroy+0x80>
    a404:	ldr	ip, [r4, #4]
    a408:	ldr	r2, [r4, #8]
    a40c:	ldr	r1, [pc, r3]
    a410:	ldr	r0, [r4, #44]	; 0x2c
    a414:	cmp	r2, #0
    a418:	strne	ip, [r2, #4]
    a41c:	streq	ip, [r1, #4]
    a420:	ldr	r3, [r4, #4]
    a424:	cmp	r3, #0
    a428:	strne	r2, [r3, #8]
    a42c:	ldr	r3, [r1, #8]
    a430:	streq	r2, [r1]
    a434:	mov	r2, #0
    a438:	cmp	r0, r2
    a43c:	str	r2, [r4, #4]
    a440:	str	r2, [r4, #8]
    a444:	sub	r3, r3, #1
    a448:	str	r3, [r1, #8]
    a44c:	beq	a454 <rb_bh_destroy+0x68>
    a450:	bl	46d4 <free@plt>
    a454:	mov	r0, r4
    a458:	bl	46d4 <free@plt>
    a45c:	mov	r0, #0
    a460:	ldr	r4, [sp]
    a464:	add	sp, sp, #4
    a468:	pop	{pc}		; (ldr pc, [sp], #4)
    a46c:	.word	0x00031594

0000a470 <rb_bh_usage>:
    a470:	cmp	r1, #0
    a474:	ldr	r0, [sp]
    a478:	movne	ip, #0
    a47c:	strne	ip, [r1]
    a480:	cmp	r2, #0
    a484:	movne	r1, #0
    a488:	strne	r1, [r2]
    a48c:	cmp	r3, #0
    a490:	movne	r2, #0
    a494:	strne	r2, [r3]
    a498:	cmp	r0, #0
    a49c:	beq	a4ac <rb_bh_usage+0x3c>
    a4a0:	ldr	r3, [pc, #8]	; a4b0 <rb_bh_usage+0x40>
    a4a4:	add	r3, pc, r3
    a4a8:	str	r3, [r0]
    a4ac:	bx	lr
    a4b0:	.word	0x0000c50c

0000a4b4 <rb_bh_usage_all>:
    a4b4:	strd	r4, [sp, #-20]!	; 0xffffffec
    a4b8:	strd	r6, [sp, #8]
    a4bc:	subs	r6, r0, #0
    a4c0:	str	lr, [sp, #16]
    a4c4:	sub	sp, sp, #12
    a4c8:	beq	a53c <rb_bh_usage_all+0x88>
    a4cc:	ldr	r3, [pc, #124]	; a550 <rb_bh_usage_all+0x9c>
    a4d0:	add	r3, pc, r3
    a4d4:	ldr	r3, [r3]
    a4d8:	ldr	r4, [r3]
    a4dc:	cmp	r4, #0
    a4e0:	beq	a53c <rb_bh_usage_all+0x88>
    a4e4:	ldr	r5, [pc, #104]	; a554 <rb_bh_usage_all+0xa0>
    a4e8:	mov	r7, r1
    a4ec:	add	r5, pc, r5
    a4f0:	ldr	ip, [r4]
    a4f4:	ldr	r3, [ip, #16]
    a4f8:	ldr	r1, [ip, #28]
    a4fc:	ldr	r2, [ip, #40]	; 0x28
    a500:	ldr	r0, [ip, #44]	; 0x2c
    a504:	mul	r3, r3, r1
    a508:	ldr	ip, [ip, #12]
    a50c:	mov	r1, r2
    a510:	sub	r2, r3, r2
    a514:	cmp	r0, #0
    a518:	movne	r5, r0
    a51c:	mov	r0, r2
    a520:	mul	r3, ip, r3
    a524:	mul	r2, r2, ip
    a528:	stm	sp, {r5, r7}
    a52c:	blx	r6
    a530:	ldr	r4, [r4, #8]
    a534:	cmp	r4, #0
    a538:	bne	a4f0 <rb_bh_usage_all+0x3c>
    a53c:	add	sp, sp, #12
    a540:	ldrd	r4, [sp]
    a544:	ldrd	r6, [sp, #8]
    a548:	add	sp, sp, #16
    a54c:	pop	{pc}		; (ldr pc, [sp], #4)
    a550:	.word	0x000314d0
    a554:	.word	0x0000c4d4

0000a558 <rb_bh_total_usage>:
    a558:	ldr	r3, [pc, #128]	; a5e0 <rb_bh_total_usage+0x88>
    a55c:	strd	r4, [sp, #-20]!	; 0xffffffec
    a560:	add	r3, pc, r3
    a564:	ldr	r3, [r3]
    a568:	ldr	ip, [r3]
    a56c:	strd	r6, [sp, #8]
    a570:	str	lr, [sp, #16]
    a574:	cmp	ip, #0
    a578:	beq	a5d4 <rb_bh_total_usage+0x7c>
    a57c:	mov	r5, #0
    a580:	mov	r6, r5
    a584:	ldr	r2, [ip]
    a588:	ldr	ip, [ip, #8]
    a58c:	ldr	r4, [r2, #12]
    a590:	ldr	r3, [r2, #16]
    a594:	cmp	ip, #0
    a598:	ldr	r7, [r2, #28]
    a59c:	ldr	lr, [r2, #40]	; 0x28
    a5a0:	mul	r3, r3, r7
    a5a4:	sub	r2, r3, lr
    a5a8:	mla	r6, r4, r3, r6
    a5ac:	mla	r5, r4, r2, r5
    a5b0:	bne	a584 <rb_bh_total_usage+0x2c>
    a5b4:	cmp	r0, #0
    a5b8:	strne	r6, [r0]
    a5bc:	cmp	r1, #0
    a5c0:	ldrd	r6, [sp, #8]
    a5c4:	strne	r5, [r1]
    a5c8:	ldrd	r4, [sp]
    a5cc:	add	sp, sp, #16
    a5d0:	pop	{pc}		; (ldr pc, [sp], #4)
    a5d4:	mov	r5, ip
    a5d8:	mov	r6, ip
    a5dc:	b	a5b4 <rb_bh_total_usage+0x5c>
    a5e0:	.word	0x00031440

0000a5e4 <inetntoa>:
    a5e4:	ldr	r3, [pc, #232]	; a6d4 <inetntoa+0xf0>
    a5e8:	ldrb	r2, [r0]
    a5ec:	add	r3, pc, r3
    a5f0:	ldr	r1, [r3, r2, lsl #2]
    a5f4:	ldrb	r2, [r1]
    a5f8:	cmp	r2, #0
    a5fc:	beq	a6c8 <inetntoa+0xe4>
    a600:	ldr	r3, [pc, #208]	; a6d8 <inetntoa+0xf4>
    a604:	add	r3, pc, r3
    a608:	strb	r2, [r3], #1
    a60c:	ldrb	r2, [r1, #1]!
    a610:	cmp	r2, #0
    a614:	bne	a608 <inetntoa+0x24>
    a618:	mov	r1, #46	; 0x2e
    a61c:	ldr	r2, [pc, #184]	; a6dc <inetntoa+0xf8>
    a620:	strb	r1, [r3], #1
    a624:	ldrb	r1, [r0, #1]
    a628:	add	r2, pc, r2
    a62c:	ldr	r1, [r2, r1, lsl #2]
    a630:	ldrb	r2, [r1]
    a634:	cmp	r2, #0
    a638:	beq	a64c <inetntoa+0x68>
    a63c:	strb	r2, [r3], #1
    a640:	ldrb	r2, [r1, #1]!
    a644:	cmp	r2, #0
    a648:	bne	a63c <inetntoa+0x58>
    a64c:	mov	r1, #46	; 0x2e
    a650:	ldr	r2, [pc, #136]	; a6e0 <inetntoa+0xfc>
    a654:	strb	r1, [r3], #1
    a658:	ldrb	r1, [r0, #2]
    a65c:	add	r2, pc, r2
    a660:	ldr	r1, [r2, r1, lsl #2]
    a664:	ldrb	r2, [r1]
    a668:	cmp	r2, #0
    a66c:	beq	a680 <inetntoa+0x9c>
    a670:	strb	r2, [r3], #1
    a674:	ldrb	r2, [r1, #1]!
    a678:	cmp	r2, #0
    a67c:	bne	a670 <inetntoa+0x8c>
    a680:	mov	r1, #46	; 0x2e
    a684:	ldr	r2, [pc, #88]	; a6e4 <inetntoa+0x100>
    a688:	strb	r1, [r3], #1
    a68c:	ldrb	r1, [r0, #3]
    a690:	add	r2, pc, r2
    a694:	ldr	r1, [r2, r1, lsl #2]
    a698:	ldrb	r2, [r1]
    a69c:	cmp	r2, #0
    a6a0:	beq	a6b4 <inetntoa+0xd0>
    a6a4:	strb	r2, [r3], #1
    a6a8:	ldrb	r2, [r1, #1]!
    a6ac:	cmp	r2, #0
    a6b0:	bne	a6a4 <inetntoa+0xc0>
    a6b4:	ldr	r0, [pc, #44]	; a6e8 <inetntoa+0x104>
    a6b8:	mov	r2, #0
    a6bc:	strb	r2, [r3]
    a6c0:	add	r0, pc, r0
    a6c4:	bx	lr
    a6c8:	ldr	r3, [pc, #28]	; a6ec <inetntoa+0x108>
    a6cc:	add	r3, pc, r3
    a6d0:	b	a618 <inetntoa+0x34>
    a6d4:	.word	0x0001e450
    a6d8:	.word	0x000313a0
    a6dc:	.word	0x0001e414
    a6e0:	.word	0x0001e3e0
    a6e4:	.word	0x0001e3ac
    a6e8:	.word	0x000312e4
    a6ec:	.word	0x000312d8

0000a6f0 <inet_pton4>:
    a6f0:	mov	r2, #0
    a6f4:	strd	r4, [sp, #-12]!
    a6f8:	mov	r5, #10
    a6fc:	str	lr, [sp, #8]
    a700:	sub	sp, sp, #12
    a704:	mov	r4, r2
    a708:	mov	r3, r2
    a70c:	add	lr, sp, #4
    a710:	strb	r2, [sp, #4]
    a714:	ldrb	r2, [r0], #1
    a718:	cmp	r2, #0
    a71c:	sub	ip, r2, #48	; 0x30
    a720:	beq	a7a8 <inet_pton4+0xb8>
    a724:	cmp	ip, #9
    a728:	bhi	a76c <inet_pton4+0x7c>
    a72c:	ldrb	r2, [lr]
    a730:	smlabb	ip, r5, r2, ip
    a734:	cmp	ip, #255	; 0xff
    a738:	bhi	a758 <inet_pton4+0x68>
    a73c:	cmp	r3, #0
    a740:	strb	ip, [lr]
    a744:	bne	a714 <inet_pton4+0x24>
    a748:	add	r4, r4, #1
    a74c:	mov	r3, #1
    a750:	cmp	r4, #4
    a754:	ble	a714 <inet_pton4+0x24>
    a758:	mov	r0, #0
    a75c:	add	sp, sp, #12
    a760:	ldrd	r4, [sp]
    a764:	add	sp, sp, #8
    a768:	pop	{pc}		; (ldr pc, [sp], #4)
    a76c:	cmp	r2, #46	; 0x2e
    a770:	movne	r3, #0
    a774:	andeq	r3, r3, #1
    a778:	eor	r3, r3, #1
    a77c:	cmp	r4, #4
    a780:	movne	r2, r3
    a784:	orreq	r2, r3, #1
    a788:	subs	r3, r2, #0
    a78c:	bne	a758 <inet_pton4+0x68>
    a790:	strb	r2, [lr, #1]
    a794:	add	lr, lr, #1
    a798:	ldrb	r2, [r0], #1
    a79c:	cmp	r2, #0
    a7a0:	sub	ip, r2, #48	; 0x30
    a7a4:	bne	a724 <inet_pton4+0x34>
    a7a8:	cmp	r4, #3
    a7ac:	ble	a758 <inet_pton4+0x68>
    a7b0:	ldr	r3, [sp, #4]
    a7b4:	mov	r0, #1
    a7b8:	str	r3, [r1]
    a7bc:	add	sp, sp, #12
    a7c0:	ldrd	r4, [sp]
    a7c4:	add	sp, sp, #8
    a7c8:	pop	{pc}		; (ldr pc, [sp], #4)

0000a7cc <rb_unsupported_event>:
    a7cc:	mov	r0, #0
    a7d0:	bx	lr

0000a7d4 <rb_checktimeouts>:
    a7d4:	ldr	r3, [pc, #256]	; a8dc <rb_checktimeouts+0x108>
    a7d8:	add	r3, pc, r3
    a7dc:	ldr	r3, [r3, #16]
    a7e0:	cmp	r3, #0
    a7e4:	bxeq	lr
    a7e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
    a7ec:	ldr	r4, [r3]
    a7f0:	strd	r6, [sp, #8]
    a7f4:	ldr	r7, [pc, #228]	; a8e0 <rb_checktimeouts+0x10c>
    a7f8:	strd	r8, [sp, #16]
    a7fc:	ldr	r9, [pc, #224]	; a8e4 <rb_checktimeouts+0x110>
    a800:	strd	sl, [sp, #24]
    a804:	ldr	r5, [r4]
    a808:	add	r7, pc, r7
    a80c:	str	lr, [sp, #32]
    a810:	sub	sp, sp, #4
    a814:	ldr	r8, [pc, #204]	; a8e8 <rb_checktimeouts+0x114>
    a818:	add	r9, pc, r9
    a81c:	ldr	r6, [r3, #8]
    a820:	cmp	r5, #0
    a824:	add	r8, pc, r8
    a828:	beq	a898 <rb_checktimeouts+0xc4>
    a82c:	ldrb	r3, [r5, #16]
    a830:	tst	r3, #1
    a834:	beq	a898 <rb_checktimeouts+0xc4>
    a838:	ldr	sl, [r4, #16]
    a83c:	bl	47d0 <rb_current_time@plt>
    a840:	cmp	sl, r0
    a844:	bge	a898 <rb_checktimeouts+0xc4>
    a848:	ldr	r3, [r4, #8]
    a84c:	mov	r0, r4
    a850:	ldr	r2, [r4, #12]
    a854:	ldrd	sl, [r4, #20]
    a858:	cmp	r2, #0
    a85c:	strne	r3, [r2, #4]
    a860:	ldrne	r3, [r4, #8]
    a864:	streq	r3, [r8, #20]
    a868:	cmp	r3, #0
    a86c:	strne	r2, [r3, #8]
    a870:	ldr	r3, [r7, #24]
    a874:	streq	r2, [r9, #16]
    a878:	mov	r2, #0
    a87c:	str	r2, [r5, #44]	; 0x2c
    a880:	sub	r3, r3, #1
    a884:	str	r3, [r7, #24]
    a888:	bl	46d4 <free@plt>
    a88c:	mov	r1, fp
    a890:	mov	r0, r5
    a894:	blx	sl
    a898:	cmp	r6, #0
    a89c:	beq	a8c0 <rb_checktimeouts+0xec>
    a8a0:	mov	r3, r6
    a8a4:	ldr	r6, [r6, #8]
    a8a8:	ldr	r4, [r3]
    a8ac:	ldr	r5, [r4]
    a8b0:	cmp	r5, #0
    a8b4:	bne	a82c <rb_checktimeouts+0x58>
    a8b8:	cmp	r6, #0
    a8bc:	bne	a8a0 <rb_checktimeouts+0xcc>
    a8c0:	add	sp, sp, #4
    a8c4:	ldrd	r4, [sp]
    a8c8:	ldrd	r6, [sp, #8]
    a8cc:	ldrd	r8, [sp, #16]
    a8d0:	ldrd	sl, [sp, #24]
    a8d4:	add	sp, sp, #32
    a8d8:	pop	{pc}		; (ldr pc, [sp], #4)
    a8dc:	.word	0x000311cc
    a8e0:	.word	0x0003119c
    a8e4:	.word	0x0003118c
    a8e8:	.word	0x00031180

0000a8ec <inet_pton6>:
    a8ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
    a8f0:	mov	r3, #0
    a8f4:	mov	r2, #0
    a8f8:	strd	r6, [sp, #8]
    a8fc:	mov	r6, r0
    a900:	strd	r8, [sp, #16]
    a904:	strd	sl, [sp, #24]
    a908:	str	lr, [sp, #32]
    a90c:	sub	sp, sp, #36	; 0x24
    a910:	ldrb	r4, [r0]
    a914:	add	r7, sp, #16
    a918:	strd	r2, [sp, #16]
    a91c:	strd	r2, [r7, #8]
    a920:	add	r3, sp, #32
    a924:	str	r7, [sp]
    a928:	cmp	r4, #58	; 0x3a
    a92c:	str	r3, [sp, #4]
    a930:	str	r1, [sp, #8]
    a934:	beq	aabc <inet_pton6+0x1d0>
    a938:	bl	480c <__ctype_tolower_loc@plt>
    a93c:	ldr	r8, [r0]
    a940:	mov	r5, #0
    a944:	add	sl, r6, #1
    a948:	mov	r9, r5
    a94c:	ldr	fp, [pc, #488]	; ab3c <inet_pton6+0x250>
    a950:	str	r5, [sp, #12]
    a954:	ldr	r4, [r8, r4, lsl #2]
    a958:	add	fp, pc, fp
    a95c:	cmp	r4, #0
    a960:	beq	a9a4 <inet_pton6+0xb8>
    a964:	mov	r1, r4
    a968:	mov	r0, fp
    a96c:	bl	4584 <strchr@plt>
    a970:	cmp	r0, #0
    a974:	beq	a9fc <inet_pton6+0x110>
    a978:	sub	r0, r0, fp
    a97c:	orr	r5, r0, r5, lsl #4
    a980:	cmp	r5, #65536	; 0x10000
    a984:	bcs	a9dc <inet_pton6+0xf0>
    a988:	ldrb	r2, [sl]
    a98c:	mov	r9, #1
    a990:	mov	r4, r2
    a994:	add	sl, sl, #1
    a998:	ldr	r4, [r8, r4, lsl #2]
    a99c:	cmp	r4, #0
    a9a0:	bne	a964 <inet_pton6+0x78>
    a9a4:	cmp	r9, #0
    a9a8:	beq	ab34 <inet_pton6+0x248>
    a9ac:	ldr	r2, [sp]
    a9b0:	ldr	r1, [sp, #4]
    a9b4:	add	r3, r2, #2
    a9b8:	cmp	r1, r3
    a9bc:	bcc	a9dc <inet_pton6+0xf0>
    a9c0:	rev16	r5, r5
    a9c4:	mov	r4, r3
    a9c8:	strh	r5, [r2]
    a9cc:	b	aa4c <inet_pton6+0x160>
    a9d0:	ldr	r3, [sp, #4]
    a9d4:	cmp	r4, r3
    a9d8:	beq	aa94 <inet_pton6+0x1a8>
    a9dc:	mov	r0, #0
    a9e0:	add	sp, sp, #36	; 0x24
    a9e4:	ldrd	r4, [sp]
    a9e8:	ldrd	r6, [sp, #8]
    a9ec:	ldrd	r8, [sp, #16]
    a9f0:	ldrd	sl, [sp, #24]
    a9f4:	add	sp, sp, #32
    a9f8:	pop	{pc}		; (ldr pc, [sp], #4)
    a9fc:	cmp	r4, #58	; 0x3a
    aa00:	beq	aad0 <inet_pton6+0x1e4>
    aa04:	ldrb	r2, [sl]
    aa08:	sub	r3, r4, #46	; 0x2e
    aa0c:	clz	r3, r3
    aa10:	lsr	r3, r3, #5
    aa14:	cmp	r2, #0
    aa18:	moveq	r3, #0
    aa1c:	cmp	r3, #0
    aa20:	beq	a990 <inet_pton6+0xa4>
    aa24:	ldr	r3, [sp]
    aa28:	add	r4, r3, #4
    aa2c:	ldr	r3, [sp, #4]
    aa30:	cmp	r4, r3
    aa34:	bhi	a9dc <inet_pton6+0xf0>
    aa38:	mov	r0, r6
    aa3c:	ldr	r1, [sp]
    aa40:	bl	a6f0 <inet_pton4>
    aa44:	cmp	r0, #0
    aa48:	ble	a9dc <inet_pton6+0xf0>
    aa4c:	ldr	r3, [sp, #12]
    aa50:	cmp	r3, #0
    aa54:	beq	a9d0 <inet_pton6+0xe4>
    aa58:	ldr	r2, [sp, #4]
    aa5c:	sub	r3, r4, r3
    aa60:	cmp	r4, r2
    aa64:	beq	a9dc <inet_pton6+0xf0>
    aa68:	cmp	r3, #0
    aa6c:	ble	aa94 <inet_pton6+0x1a8>
    aa70:	ldr	r2, [sp, #4]
    aa74:	mov	r3, r4
    aa78:	mov	r0, #0
    aa7c:	ldr	ip, [sp, #12]
    aa80:	ldrb	r1, [r3, #-1]!
    aa84:	cmp	ip, r3
    aa88:	strb	r1, [r2, #-1]!
    aa8c:	strb	r0, [r3]
    aa90:	bne	aa80 <inet_pton6+0x194>
    aa94:	ldr	ip, [sp, #8]
    aa98:	mov	r0, #1
    aa9c:	ldr	r3, [sp, #16]
    aaa0:	ldmib	r7, {r1, r2}
    aaa4:	str	r3, [ip]
    aaa8:	ldr	r3, [r7, #12]
    aaac:	str	r1, [ip, #4]
    aab0:	str	r2, [ip, #8]
    aab4:	str	r3, [ip, #12]
    aab8:	b	a9e0 <inet_pton6+0xf4>
    aabc:	ldrb	r4, [r0, #1]
    aac0:	cmp	r4, #58	; 0x3a
    aac4:	addeq	r6, r0, #1
    aac8:	beq	a938 <inet_pton6+0x4c>
    aacc:	b	a9dc <inet_pton6+0xf0>
    aad0:	cmp	r9, #0
    aad4:	bne	aaf8 <inet_pton6+0x20c>
    aad8:	ldr	r3, [sp, #12]
    aadc:	cmp	r3, #0
    aae0:	bne	a9dc <inet_pton6+0xf0>
    aae4:	ldr	r3, [sp]
    aae8:	mov	r6, sl
    aaec:	ldrb	r2, [sl]
    aaf0:	str	r3, [sp, #12]
    aaf4:	b	a990 <inet_pton6+0xa4>
    aaf8:	ldrb	r2, [sl]
    aafc:	cmp	r2, #0
    ab00:	beq	a9dc <inet_pton6+0xf0>
    ab04:	ldr	ip, [sp]
    ab08:	ldr	r1, [sp, #4]
    ab0c:	add	r3, ip, #2
    ab10:	cmp	r1, r3
    ab14:	bcc	a9dc <inet_pton6+0xf0>
    ab18:	rev16	r1, r5
    ab1c:	mov	r9, r0
    ab20:	str	r3, [sp]
    ab24:	mov	r5, r0
    ab28:	mov	r6, sl
    ab2c:	strh	r1, [ip]
    ab30:	b	a990 <inet_pton6+0xa4>
    ab34:	ldr	r4, [sp]
    ab38:	b	aa4c <inet_pton6+0x160>
    ab3c:	.word	0x0000c078

0000ab40 <try_kqueue>:
    ab40:	strd	r4, [sp, #-16]!
    ab44:	str	r6, [sp, #8]
    ab48:	str	lr, [sp, #12]
    ab4c:	bl	132ac <rb_init_netio_kqueue>
    ab50:	ldr	ip, [pc, #148]	; abec <try_kqueue+0xac>
    ab54:	subs	r4, r0, #0
    ab58:	add	ip, pc, ip
    ab5c:	bne	abe4 <try_kqueue+0xa4>
    ab60:	ldr	r0, [pc, #136]	; abf0 <try_kqueue+0xb0>
    ab64:	mov	r2, #25
    ab68:	ldr	r3, [pc, #132]	; abf4 <try_kqueue+0xb4>
    ab6c:	ldr	r1, [pc, #132]	; abf8 <try_kqueue+0xb8>
    ab70:	ldr	r5, [ip, r0]
    ab74:	add	r3, pc, r3
    ab78:	ldr	lr, [pc, #124]	; abfc <try_kqueue+0xbc>
    ab7c:	add	r0, r3, #56	; 0x38
    ab80:	str	r5, [r3, #28]
    ab84:	ldr	r5, [ip, r1]
    ab88:	ldr	r1, [pc, #112]	; ac00 <try_kqueue+0xc0>
    ab8c:	str	r5, [r3, #32]
    ab90:	ldr	r5, [ip, lr]
    ab94:	ldr	lr, [pc, #104]	; ac04 <try_kqueue+0xc4>
    ab98:	str	r5, [r3, #36]	; 0x24
    ab9c:	ldr	r5, [ip, r1]
    aba0:	ldr	r1, [pc, #96]	; ac08 <try_kqueue+0xc8>
    aba4:	str	r5, [r3, #40]	; 0x28
    aba8:	ldr	r5, [ip, lr]
    abac:	ldr	lr, [pc, #88]	; ac0c <try_kqueue+0xcc>
    abb0:	str	r5, [r3, #44]	; 0x2c
    abb4:	ldr	r5, [ip, r1]
    abb8:	ldr	r1, [pc, #80]	; ac10 <try_kqueue+0xd0>
    abbc:	str	r5, [r3, #48]	; 0x30
    abc0:	ldr	ip, [ip, lr]
    abc4:	add	r1, pc, r1
    abc8:	str	ip, [r3, #52]	; 0x34
    abcc:	bl	4680 <rb_strlcpy@plt>
    abd0:	mov	r0, r4
    abd4:	ldrd	r4, [sp]
    abd8:	ldr	r6, [sp, #8]
    abdc:	add	sp, sp, #12
    abe0:	pop	{pc}		; (ldr pc, [sp], #4)
    abe4:	mvn	r4, #0
    abe8:	b	abd0 <try_kqueue+0x90>
    abec:	.word	0x0001e4a0
    abf0:	.word	0x000003b8
    abf4:	.word	0x00030e30
    abf8:	.word	0x00000374
    abfc:	.word	0x00000394
    ac00:	.word	0x0000038c
    ac04:	.word	0x000003d0
    ac08:	.word	0x00000390
    ac0c:	.word	0x000003e0
    ac10:	.word	0x0000be28

0000ac14 <try_epoll>:
    ac14:	strd	r4, [sp, #-16]!
    ac18:	str	r6, [sp, #8]
    ac1c:	str	lr, [sp, #12]
    ac20:	bl	11514 <rb_init_netio_epoll>
    ac24:	ldr	ip, [pc, #148]	; acc0 <try_epoll+0xac>
    ac28:	subs	r4, r0, #0
    ac2c:	add	ip, pc, ip
    ac30:	bne	acb8 <try_epoll+0xa4>
    ac34:	ldr	r0, [pc, #136]	; acc4 <try_epoll+0xb0>
    ac38:	mov	r2, #25
    ac3c:	ldr	r3, [pc, #132]	; acc8 <try_epoll+0xb4>
    ac40:	ldr	r1, [pc, #132]	; accc <try_epoll+0xb8>
    ac44:	ldr	r5, [ip, r0]
    ac48:	add	r3, pc, r3
    ac4c:	ldr	lr, [pc, #124]	; acd0 <try_epoll+0xbc>
    ac50:	add	r0, r3, #56	; 0x38
    ac54:	str	r5, [r3, #28]
    ac58:	ldr	r5, [ip, r1]
    ac5c:	ldr	r1, [pc, #112]	; acd4 <try_epoll+0xc0>
    ac60:	str	r5, [r3, #32]
    ac64:	ldr	r5, [ip, lr]
    ac68:	ldr	lr, [pc, #104]	; acd8 <try_epoll+0xc4>
    ac6c:	str	r5, [r3, #36]	; 0x24
    ac70:	ldr	r5, [ip, r1]
    ac74:	ldr	r1, [pc, #96]	; acdc <try_epoll+0xc8>
    ac78:	str	r5, [r3, #40]	; 0x28
    ac7c:	ldr	r5, [ip, lr]
    ac80:	ldr	lr, [pc, #88]	; ace0 <try_epoll+0xcc>
    ac84:	str	r5, [r3, #44]	; 0x2c
    ac88:	ldr	r5, [ip, r1]
    ac8c:	ldr	r1, [pc, #80]	; ace4 <try_epoll+0xd0>
    ac90:	str	r5, [r3, #52]	; 0x34
    ac94:	ldr	ip, [ip, lr]
    ac98:	add	r1, pc, r1
    ac9c:	str	ip, [r3, #48]	; 0x30
    aca0:	bl	4680 <rb_strlcpy@plt>
    aca4:	mov	r0, r4
    aca8:	ldrd	r4, [sp]
    acac:	ldr	r6, [sp, #8]
    acb0:	add	sp, sp, #12
    acb4:	pop	{pc}		; (ldr pc, [sp], #4)
    acb8:	mvn	r4, #0
    acbc:	b	aca4 <try_epoll+0x90>
    acc0:	.word	0x0001e3cc
    acc4:	.word	0x00000364
    acc8:	.word	0x00030d5c
    accc:	.word	0x000003c4
    acd0:	.word	0x00000400
    acd4:	.word	0x00000380
    acd8:	.word	0x000003c0
    acdc:	.word	0x00000354
    ace0:	.word	0x00000414
    ace4:	.word	0x0000bd5c

0000ace8 <try_ports>:
    ace8:	strd	r4, [sp, #-16]!
    acec:	str	r6, [sp, #8]
    acf0:	str	lr, [sp, #12]
    acf4:	bl	12338 <rb_init_netio_ports>
    acf8:	ldr	ip, [pc, #148]	; ad94 <try_ports+0xac>
    acfc:	subs	r4, r0, #0
    ad00:	add	ip, pc, ip
    ad04:	bne	ad8c <try_ports+0xa4>
    ad08:	ldr	r0, [pc, #136]	; ad98 <try_ports+0xb0>
    ad0c:	mov	r2, #25
    ad10:	ldr	r3, [pc, #132]	; ad9c <try_ports+0xb4>
    ad14:	ldr	r1, [pc, #132]	; ada0 <try_ports+0xb8>
    ad18:	ldr	r5, [ip, r0]
    ad1c:	add	r3, pc, r3
    ad20:	ldr	lr, [pc, #124]	; ada4 <try_ports+0xbc>
    ad24:	add	r0, r3, #56	; 0x38
    ad28:	str	r5, [r3, #28]
    ad2c:	ldr	r5, [ip, r1]
    ad30:	ldr	r1, [pc, #112]	; ada8 <try_ports+0xc0>
    ad34:	str	r5, [r3, #32]
    ad38:	ldr	r5, [ip, lr]
    ad3c:	ldr	lr, [pc, #104]	; adac <try_ports+0xc4>
    ad40:	str	r5, [r3, #36]	; 0x24
    ad44:	ldr	r5, [ip, r1]
    ad48:	ldr	r1, [pc, #96]	; adb0 <try_ports+0xc8>
    ad4c:	str	r5, [r3, #40]	; 0x28
    ad50:	ldr	r5, [ip, lr]
    ad54:	ldr	lr, [pc, #88]	; adb4 <try_ports+0xcc>
    ad58:	str	r5, [r3, #44]	; 0x2c
    ad5c:	ldr	r5, [ip, r1]
    ad60:	ldr	r1, [pc, #80]	; adb8 <try_ports+0xd0>
    ad64:	str	r5, [r3, #48]	; 0x30
    ad68:	ldr	ip, [ip, lr]
    ad6c:	add	r1, pc, r1
    ad70:	str	ip, [r3, #52]	; 0x34
    ad74:	bl	4680 <rb_strlcpy@plt>
    ad78:	mov	r0, r4
    ad7c:	ldrd	r4, [sp]
    ad80:	ldr	r6, [sp, #8]
    ad84:	add	sp, sp, #12
    ad88:	pop	{pc}		; (ldr pc, [sp], #4)
    ad8c:	mvn	r4, #0
    ad90:	b	ad78 <try_ports+0x90>
    ad94:	.word	0x0001e2f8
    ad98:	.word	0x000003e4
    ad9c:	.word	0x00030c88
    ada0:	.word	0x00000384
    ada4:	.word	0x0000040c
    ada8:	.word	0x00000350
    adac:	.word	0x00000408
    adb0:	.word	0x00000360
    adb4:	.word	0x000003dc
    adb8:	.word	0x0000bc90

0000adbc <try_devpoll>:
    adbc:	strd	r4, [sp, #-16]!
    adc0:	str	r6, [sp, #8]
    adc4:	str	lr, [sp, #12]
    adc8:	bl	113dc <rb_init_netio_devpoll>
    adcc:	ldr	r1, [pc, #124]	; ae50 <try_devpoll+0x94>
    add0:	subs	r4, r0, #0
    add4:	add	r1, pc, r1
    add8:	bne	ae48 <try_devpoll+0x8c>
    addc:	ldr	r0, [pc, #112]	; ae54 <try_devpoll+0x98>
    ade0:	mov	r2, #25
    ade4:	ldr	r3, [pc, #108]	; ae58 <try_devpoll+0x9c>
    ade8:	ldr	ip, [pc, #108]	; ae5c <try_devpoll+0xa0>
    adec:	ldr	r5, [r1, r0]
    adf0:	add	r3, pc, r3
    adf4:	ldr	lr, [pc, #100]	; ae60 <try_devpoll+0xa4>
    adf8:	add	r0, r3, #56	; 0x38
    adfc:	str	r5, [r3, #28]
    ae00:	ldr	r5, [r1, ip]
    ae04:	ldr	ip, [pc, #88]	; ae64 <try_devpoll+0xa8>
    ae08:	str	r5, [r3, #32]
    ae0c:	ldr	lr, [r1, lr]
    ae10:	add	ip, pc, ip
    ae14:	ldr	r1, [pc, #76]	; ae68 <try_devpoll+0xac>
    ae18:	str	lr, [r3, #36]	; 0x24
    ae1c:	str	r4, [r3, #40]	; 0x28
    ae20:	add	r1, pc, r1
    ae24:	str	r4, [r3, #44]	; 0x2c
    ae28:	str	r4, [r3, #48]	; 0x30
    ae2c:	str	ip, [r3, #52]	; 0x34
    ae30:	bl	4680 <rb_strlcpy@plt>
    ae34:	mov	r0, r4
    ae38:	ldrd	r4, [sp]
    ae3c:	ldr	r6, [sp, #8]
    ae40:	add	sp, sp, #12
    ae44:	pop	{pc}		; (ldr pc, [sp], #4)
    ae48:	mvn	r4, #0
    ae4c:	b	ae34 <try_devpoll+0x78>
    ae50:	.word	0x0001e224
    ae54:	.word	0x000003ac
    ae58:	.word	0x00030bb4
    ae5c:	.word	0x000003ec
    ae60:	.word	0x000003b0
    ae64:	.word	0xfffff9b4
    ae68:	.word	0x0000bbe4

0000ae6c <try_sigio>:
    ae6c:	strd	r4, [sp, #-16]!
    ae70:	str	r6, [sp, #8]
    ae74:	str	lr, [sp, #12]
    ae78:	bl	123a8 <rb_init_netio_sigio>
    ae7c:	ldr	ip, [pc, #148]	; af18 <try_sigio+0xac>
    ae80:	subs	r4, r0, #0
    ae84:	add	ip, pc, ip
    ae88:	bne	af10 <try_sigio+0xa4>
    ae8c:	ldr	r0, [pc, #136]	; af1c <try_sigio+0xb0>
    ae90:	mov	r2, #25
    ae94:	ldr	r3, [pc, #132]	; af20 <try_sigio+0xb4>
    ae98:	ldr	r1, [pc, #132]	; af24 <try_sigio+0xb8>
    ae9c:	ldr	r5, [ip, r0]
    aea0:	add	r3, pc, r3
    aea4:	ldr	lr, [pc, #124]	; af28 <try_sigio+0xbc>
    aea8:	add	r0, r3, #56	; 0x38
    aeac:	str	r5, [r3, #28]
    aeb0:	ldr	r5, [ip, r1]
    aeb4:	ldr	r1, [pc, #112]	; af2c <try_sigio+0xc0>
    aeb8:	str	r5, [r3, #32]
    aebc:	ldr	r5, [ip, lr]
    aec0:	ldr	lr, [pc, #104]	; af30 <try_sigio+0xc4>
    aec4:	str	r5, [r3, #36]	; 0x24
    aec8:	ldr	r5, [ip, r1]
    aecc:	ldr	r1, [pc, #96]	; af34 <try_sigio+0xc8>
    aed0:	str	r5, [r3, #40]	; 0x28
    aed4:	ldr	r5, [ip, lr]
    aed8:	ldr	lr, [pc, #88]	; af38 <try_sigio+0xcc>
    aedc:	str	r5, [r3, #44]	; 0x2c
    aee0:	ldr	r5, [ip, r1]
    aee4:	ldr	r1, [pc, #80]	; af3c <try_sigio+0xd0>
    aee8:	str	r5, [r3, #52]	; 0x34
    aeec:	ldr	ip, [ip, lr]
    aef0:	add	r1, pc, r1
    aef4:	str	ip, [r3, #48]	; 0x30
    aef8:	bl	4680 <rb_strlcpy@plt>
    aefc:	mov	r0, r4
    af00:	ldrd	r4, [sp]
    af04:	ldr	r6, [sp, #8]
    af08:	add	sp, sp, #12
    af0c:	pop	{pc}		; (ldr pc, [sp], #4)
    af10:	mvn	r4, #0
    af14:	b	aefc <try_sigio+0x90>
    af18:	.word	0x0001e174
    af1c:	.word	0x000003c8
    af20:	.word	0x00030b04
    af24:	.word	0x00000368
    af28:	.word	0x000003d8
    af2c:	.word	0x00000370
    af30:	.word	0x00000358
    af34:	.word	0x000003d4
    af38:	.word	0x000003f4
    af3c:	.word	0x0000bb1c

0000af40 <try_poll>:
    af40:	strd	r4, [sp, #-16]!
    af44:	str	r6, [sp, #8]
    af48:	str	lr, [sp, #12]
    af4c:	bl	11e90 <rb_init_netio_poll>
    af50:	ldr	r1, [pc, #124]	; afd4 <try_poll+0x94>
    af54:	subs	r4, r0, #0
    af58:	add	r1, pc, r1
    af5c:	bne	afcc <try_poll+0x8c>
    af60:	ldr	r0, [pc, #112]	; afd8 <try_poll+0x98>
    af64:	mov	r2, #25
    af68:	ldr	r3, [pc, #108]	; afdc <try_poll+0x9c>
    af6c:	ldr	ip, [pc, #108]	; afe0 <try_poll+0xa0>
    af70:	ldr	r5, [r1, r0]
    af74:	add	r3, pc, r3
    af78:	ldr	lr, [pc, #100]	; afe4 <try_poll+0xa4>
    af7c:	add	r0, r3, #56	; 0x38
    af80:	str	r5, [r3, #28]
    af84:	ldr	r5, [r1, ip]
    af88:	ldr	ip, [pc, #88]	; afe8 <try_poll+0xa8>
    af8c:	str	r5, [r3, #32]
    af90:	ldr	lr, [r1, lr]
    af94:	add	ip, pc, ip
    af98:	ldr	r1, [pc, #76]	; afec <try_poll+0xac>
    af9c:	str	lr, [r3, #36]	; 0x24
    afa0:	str	r4, [r3, #40]	; 0x28
    afa4:	add	r1, pc, r1
    afa8:	str	r4, [r3, #44]	; 0x2c
    afac:	str	r4, [r3, #48]	; 0x30
    afb0:	str	ip, [r3, #52]	; 0x34
    afb4:	bl	4680 <rb_strlcpy@plt>
    afb8:	mov	r0, r4
    afbc:	ldrd	r4, [sp]
    afc0:	ldr	r6, [sp, #8]
    afc4:	add	sp, sp, #12
    afc8:	pop	{pc}		; (ldr pc, [sp], #4)
    afcc:	mvn	r4, #0
    afd0:	b	afb8 <try_poll+0x78>
    afd4:	.word	0x0001e0a0
    afd8:	.word	0x000003e8
    afdc:	.word	0x00030a30
    afe0:	.word	0x000003f8
    afe4:	.word	0x0000037c
    afe8:	.word	0xfffff830
    afec:	.word	0x0000ba70

0000aff0 <try_win32>:
    aff0:	strd	r4, [sp, #-16]!
    aff4:	str	r6, [sp, #8]
    aff8:	str	lr, [sp, #12]
    affc:	bl	4f48 <rb_init_netio_win32>
    b000:	ldr	r1, [pc, #124]	; b084 <try_win32+0x94>
    b004:	subs	r4, r0, #0
    b008:	add	r1, pc, r1
    b00c:	bne	b07c <try_win32+0x8c>
    b010:	ldr	r0, [pc, #112]	; b088 <try_win32+0x98>
    b014:	mov	r2, #25
    b018:	ldr	r3, [pc, #108]	; b08c <try_win32+0x9c>
    b01c:	ldr	ip, [pc, #108]	; b090 <try_win32+0xa0>
    b020:	ldr	r5, [r1, r0]
    b024:	add	r3, pc, r3
    b028:	ldr	lr, [pc, #100]	; b094 <try_win32+0xa4>
    b02c:	add	r0, r3, #56	; 0x38
    b030:	str	r5, [r3, #28]
    b034:	ldr	r5, [r1, ip]
    b038:	ldr	ip, [pc, #88]	; b098 <try_win32+0xa8>
    b03c:	str	r5, [r3, #32]
    b040:	ldr	lr, [r1, lr]
    b044:	add	ip, pc, ip
    b048:	ldr	r1, [pc, #76]	; b09c <try_win32+0xac>
    b04c:	str	lr, [r3, #36]	; 0x24
    b050:	str	r4, [r3, #40]	; 0x28
    b054:	add	r1, pc, r1
    b058:	str	r4, [r3, #44]	; 0x2c
    b05c:	str	r4, [r3, #48]	; 0x30
    b060:	str	ip, [r3, #52]	; 0x34
    b064:	bl	4680 <rb_strlcpy@plt>
    b068:	mov	r0, r4
    b06c:	ldrd	r4, [sp]
    b070:	ldr	r6, [sp, #8]
    b074:	add	sp, sp, #12
    b078:	pop	{pc}		; (ldr pc, [sp], #4)
    b07c:	mvn	r4, #0
    b080:	b	b068 <try_win32+0x78>
    b084:	.word	0x0001dff0
    b088:	.word	0x00000398
    b08c:	.word	0x00030980
    b090:	.word	0x000003a4
    b094:	.word	0x0000036c
    b098:	.word	0xfffff780
    b09c:	.word	0x0000b9c8

0000b0a0 <try_select>:
    b0a0:	strd	r4, [sp, #-16]!
    b0a4:	str	r6, [sp, #8]
    b0a8:	str	lr, [sp, #12]
    b0ac:	bl	12f40 <rb_init_netio_select>
    b0b0:	ldr	r1, [pc, #124]	; b134 <try_select+0x94>
    b0b4:	subs	r4, r0, #0
    b0b8:	add	r1, pc, r1
    b0bc:	bne	b12c <try_select+0x8c>
    b0c0:	ldr	r0, [pc, #112]	; b138 <try_select+0x98>
    b0c4:	mov	r2, #25
    b0c8:	ldr	r3, [pc, #108]	; b13c <try_select+0x9c>
    b0cc:	ldr	ip, [pc, #108]	; b140 <try_select+0xa0>
    b0d0:	ldr	r5, [r1, r0]
    b0d4:	add	r3, pc, r3
    b0d8:	ldr	lr, [pc, #100]	; b144 <try_select+0xa4>
    b0dc:	add	r0, r3, #56	; 0x38
    b0e0:	str	r5, [r3, #28]
    b0e4:	ldr	r5, [r1, ip]
    b0e8:	ldr	ip, [pc, #88]	; b148 <try_select+0xa8>
    b0ec:	str	r5, [r3, #32]
    b0f0:	ldr	lr, [r1, lr]
    b0f4:	add	ip, pc, ip
    b0f8:	ldr	r1, [pc, #76]	; b14c <try_select+0xac>
    b0fc:	str	lr, [r3, #36]	; 0x24
    b100:	str	r4, [r3, #40]	; 0x28
    b104:	add	r1, pc, r1
    b108:	str	r4, [r3, #44]	; 0x2c
    b10c:	str	r4, [r3, #48]	; 0x30
    b110:	str	ip, [r3, #52]	; 0x34
    b114:	bl	4680 <rb_strlcpy@plt>
    b118:	mov	r0, r4
    b11c:	ldrd	r4, [sp]
    b120:	ldr	r6, [sp, #8]
    b124:	add	sp, sp, #12
    b128:	pop	{pc}		; (ldr pc, [sp], #4)
    b12c:	mvn	r4, #0
    b130:	b	b118 <try_select+0x78>
    b134:	.word	0x0001df40
    b138:	.word	0x0000041c
    b13c:	.word	0x000308d0
    b140:	.word	0x000003b4
    b144:	.word	0x000003fc
    b148:	.word	0xfffff6d0
    b14c:	.word	0x0000b920

0000b150 <rb_getmaxconnect>:
    b150:	ldr	r3, [pc, #16]	; b168 <rb_getmaxconnect+0x18>
    b154:	ldr	r2, [pc, #16]	; b16c <rb_getmaxconnect+0x1c>
    b158:	add	r3, pc, r3
    b15c:	ldr	r3, [r3, r2]
    b160:	ldr	r0, [r3]
    b164:	bx	lr
    b168:	.word	0x0001dea0
    b16c:	.word	0x0000039c

0000b170 <rb_set_buffers>:
    b170:	strd	r4, [sp, #-16]!
    b174:	subs	r4, r0, #0
    b178:	str	r6, [sp, #8]
    b17c:	str	lr, [sp, #12]
    b180:	sub	sp, sp, #16
    b184:	str	r1, [sp, #12]
    b188:	beq	b1b4 <rb_set_buffers+0x44>
    b18c:	mov	r5, #4
    b190:	add	r6, sp, #12
    b194:	mov	r3, r6
    b198:	mov	r2, #8
    b19c:	mov	r1, #1
    b1a0:	str	r5, [sp]
    b1a4:	ldr	r0, [r4, #12]
    b1a8:	bl	4c74 <setsockopt@plt>
    b1ac:	cmp	r0, #0
    b1b0:	beq	b1cc <rb_set_buffers+0x5c>
    b1b4:	mov	r0, #0
    b1b8:	add	sp, sp, #16
    b1bc:	ldrd	r4, [sp]
    b1c0:	ldr	r6, [sp, #8]
    b1c4:	add	sp, sp, #12
    b1c8:	pop	{pc}		; (ldr pc, [sp], #4)
    b1cc:	mov	r3, r6
    b1d0:	mov	r2, #7
    b1d4:	str	r5, [sp]
    b1d8:	mov	r1, #1
    b1dc:	ldr	r0, [r4, #12]
    b1e0:	bl	4c74 <setsockopt@plt>
    b1e4:	clz	r0, r0
    b1e8:	lsr	r0, r0, #5
    b1ec:	b	b1b8 <rb_set_buffers+0x48>

0000b1f0 <rb_settimeout>:
    b1f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    b1f4:	strd	r6, [sp, #8]
    b1f8:	subs	r6, r0, #0
    b1fc:	ldr	r7, [pc, #384]	; b384 <rb_settimeout+0x194>
    b200:	strd	r8, [sp, #16]
    b204:	str	sl, [sp, #24]
    b208:	str	lr, [sp, #28]
    b20c:	add	r7, pc, r7
    b210:	beq	b298 <rb_settimeout+0xa8>
    b214:	cmp	r2, #0
    b218:	mov	r9, r3
    b21c:	ldr	r4, [r6, #44]	; 0x2c
    b220:	mov	r8, r2
    b224:	mov	r5, r1
    b228:	beq	b2b0 <rb_settimeout+0xc0>
    b22c:	cmp	r4, #0
    b230:	beq	b328 <rb_settimeout+0x138>
    b234:	str	r6, [r4]
    b238:	bl	47d0 <rb_current_time@plt>
    b23c:	ldr	r3, [pc, #324]	; b388 <rb_settimeout+0x198>
    b240:	mov	r2, #0
    b244:	add	r5, r0, r5
    b248:	add	r0, r4, #4
    b24c:	str	r4, [r4, #4]
    b250:	str	r2, [r4, #8]
    b254:	str	r5, [r4, #16]
    b258:	strd	r8, [r4, #20]
    b25c:	add	r3, pc, r3
    b260:	ldr	r2, [r3, #16]
    b264:	cmp	r2, #0
    b268:	str	r2, [r4, #12]
    b26c:	strne	r0, [r2, #4]
    b270:	beq	b318 <rb_settimeout+0x128>
    b274:	ldr	r4, [pc, #272]	; b38c <rb_settimeout+0x19c>
    b278:	add	r4, pc, r4
    b27c:	ldr	r3, [r4, #24]
    b280:	str	r0, [r4, #16]
    b284:	ldr	r2, [r4, #84]	; 0x54
    b288:	add	r3, r3, #1
    b28c:	cmp	r2, #0
    b290:	str	r3, [r4, #24]
    b294:	beq	b344 <rb_settimeout+0x154>
    b298:	ldrd	r4, [sp]
    b29c:	ldrd	r6, [sp, #8]
    b2a0:	ldrd	r8, [sp, #16]
    b2a4:	ldr	sl, [sp, #24]
    b2a8:	add	sp, sp, #28
    b2ac:	pop	{pc}		; (ldr pc, [sp], #4)
    b2b0:	cmp	r4, #0
    b2b4:	beq	b298 <rb_settimeout+0xa8>
    b2b8:	ldr	r3, [r4, #8]
    b2bc:	ldr	r2, [r4, #12]
    b2c0:	cmp	r2, #0
    b2c4:	beq	b374 <rb_settimeout+0x184>
    b2c8:	str	r3, [r2, #4]
    b2cc:	ldr	r3, [r4, #8]
    b2d0:	cmp	r3, #0
    b2d4:	strne	r2, [r3, #8]
    b2d8:	beq	b364 <rb_settimeout+0x174>
    b2dc:	ldr	r5, [pc, #172]	; b390 <rb_settimeout+0x1a0>
    b2e0:	mov	r0, r4
    b2e4:	add	r5, pc, r5
    b2e8:	ldr	r4, [r5, #24]
    b2ec:	sub	r4, r4, #1
    b2f0:	str	r4, [r5, #24]
    b2f4:	bl	46d4 <free@plt>
    b2f8:	mov	r3, #0
    b2fc:	cmp	r4, r3
    b300:	str	r3, [r6, #44]	; 0x2c
    b304:	bne	b298 <rb_settimeout+0xa8>
    b308:	ldr	r0, [r5, #84]	; 0x54
    b30c:	bl	4470 <rb_event_delete@plt>
    b310:	str	r4, [r5, #84]	; 0x54
    b314:	b	b298 <rb_settimeout+0xa8>
    b318:	ldr	r2, [r3, #20]
    b31c:	cmp	r2, #0
    b320:	streq	r0, [r3, #20]
    b324:	b	b274 <rb_settimeout+0x84>
    b328:	mov	r1, #28
    b32c:	mov	r0, #1
    b330:	bl	45c0 <calloc@plt>
    b334:	subs	r4, r0, #0
    b338:	strne	r4, [r6, #44]	; 0x2c
    b33c:	bne	b234 <rb_settimeout+0x44>
    b340:	bl	495c <rb_outofmemory@plt>
    b344:	ldr	r1, [pc, #72]	; b394 <rb_settimeout+0x1a4>
    b348:	mov	r3, #5
    b34c:	ldr	r0, [pc, #68]	; b398 <rb_settimeout+0x1a8>
    b350:	ldr	r1, [r7, r1]
    b354:	add	r0, pc, r0
    b358:	bl	4adc <rb_event_add@plt>
    b35c:	str	r0, [r4, #84]	; 0x54
    b360:	b	b298 <rb_settimeout+0xa8>
    b364:	ldr	r3, [pc, #48]	; b39c <rb_settimeout+0x1ac>
    b368:	add	r3, pc, r3
    b36c:	str	r2, [r3, #16]
    b370:	b	b2dc <rb_settimeout+0xec>
    b374:	ldr	r1, [pc, #36]	; b3a0 <rb_settimeout+0x1b0>
    b378:	add	r1, pc, r1
    b37c:	str	r3, [r1, #20]
    b380:	b	b2d0 <rb_settimeout+0xe0>
    b384:	.word	0x0001ddec
    b388:	.word	0x00030748
    b38c:	.word	0x0003072c
    b390:	.word	0x000306c0
    b394:	.word	0x0000034c
    b398:	.word	0x0000b6d8
    b39c:	.word	0x0003063c
    b3a0:	.word	0x0003062c

0000b3a4 <rb_sctp_bindx>:
    b3a4:	mvn	r0, #0
    b3a8:	bx	lr

0000b3ac <rb_inet_get_proto>:
    b3ac:	mov	r0, #6
    b3b0:	bx	lr

0000b3b4 <rb_connect_callback>:
    b3b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    b3b8:	subs	r4, r0, #0
    b3bc:	strd	r6, [sp, #8]
    b3c0:	strd	r8, [sp, #16]
    b3c4:	str	sl, [sp, #24]
    b3c8:	str	lr, [sp, #28]
    b3cc:	beq	b448 <rb_connect_callback+0x94>
    b3d0:	ldr	r5, [r4, #48]	; 0x30
    b3d4:	cmp	r5, #0
    b3d8:	beq	b448 <rb_connect_callback+0x94>
    b3dc:	ldr	r7, [r5, #260]	; 0x104
    b3e0:	cmp	r7, #0
    b3e4:	beq	b448 <rb_connect_callback+0x94>
    b3e8:	mov	r6, r1
    b3ec:	bl	4cbc <__errno_location@plt>
    b3f0:	mov	r8, r0
    b3f4:	ldr	sl, [r5, #264]	; 0x108
    b3f8:	mov	r0, #0
    b3fc:	mov	r3, r0
    b400:	mov	r2, r0
    b404:	ldr	r9, [r8]
    b408:	mov	r1, r0
    b40c:	str	r0, [r5, #260]	; 0x104
    b410:	mov	r0, r4
    b414:	bl	43bc <rb_settimeout@plt>
    b418:	mov	r2, sl
    b41c:	mov	r1, r6
    b420:	ldr	sl, [sp, #24]
    b424:	mov	r0, r4
    b428:	mov	r3, r7
    b42c:	ldrd	r4, [sp]
    b430:	ldrd	r6, [sp, #8]
    b434:	ldr	lr, [sp, #28]
    b438:	str	r9, [r8]
    b43c:	ldrd	r8, [sp, #16]
    b440:	add	sp, sp, #32
    b444:	bx	r3
    b448:	ldrd	r4, [sp]
    b44c:	ldrd	r6, [sp, #8]
    b450:	ldrd	r8, [sp, #16]
    b454:	ldr	sl, [sp, #24]
    b458:	add	sp, sp, #28
    b45c:	pop	{pc}		; (ldr pc, [sp], #4)

0000b460 <rb_connect_outcome>:
    b460:	mov	r3, #0
    b464:	mov	r2, #4
    b468:	strd	r4, [sp, #-12]!
    b46c:	str	lr, [sp, #8]
    b470:	sub	sp, sp, #20
    b474:	subs	r4, r0, #0
    b478:	str	r3, [sp, #8]
    b47c:	str	r2, [sp, #12]
    b480:	beq	b4d4 <rb_connect_outcome+0x74>
    b484:	ldr	r3, [r4, #48]	; 0x30
    b488:	cmp	r3, #0
    b48c:	beq	b4d4 <rb_connect_outcome+0x74>
    b490:	ldr	r3, [r3, #260]	; 0x104
    b494:	cmp	r3, #0
    b498:	beq	b4d4 <rb_connect_outcome+0x74>
    b49c:	add	r0, sp, #12
    b4a0:	add	r3, sp, #8
    b4a4:	mov	r1, #1
    b4a8:	str	r0, [sp]
    b4ac:	ldr	r0, [r4, #12]
    b4b0:	bl	4c50 <getsockopt@plt>
    b4b4:	cmp	r0, #0
    b4b8:	blt	b4ec <rb_connect_outcome+0x8c>
    b4bc:	ldr	r5, [sp, #8]
    b4c0:	cmp	r5, #0
    b4c4:	bne	b4e4 <rb_connect_outcome+0x84>
    b4c8:	mov	r1, r5
    b4cc:	mov	r0, r4
    b4d0:	bl	b3b4 <rb_connect_callback>
    b4d4:	add	sp, sp, #20
    b4d8:	ldrd	r4, [sp]
    b4dc:	add	sp, sp, #8
    b4e0:	pop	{pc}		; (ldr pc, [sp], #4)
    b4e4:	bl	4cbc <__errno_location@plt>
    b4e8:	str	r5, [r0]
    b4ec:	mov	r0, r4
    b4f0:	mov	r1, #4
    b4f4:	bl	b3b4 <rb_connect_callback>
    b4f8:	add	sp, sp, #20
    b4fc:	ldrd	r4, [sp]
    b500:	add	sp, sp, #8
    b504:	pop	{pc}		; (ldr pc, [sp], #4)

0000b508 <rb_connect_timeout>:
    b508:	mov	r1, #3
    b50c:	b	b3b4 <rb_connect_callback>

0000b510 <rb_connect_sctp>:
    b510:	mov	r1, #4
    b514:	b	b3b4 <rb_connect_callback>

0000b518 <rb_connect_sockaddr>:
    b518:	subs	r3, r0, #0
    b51c:	beq	b548 <rb_connect_sockaddr+0x30>
    b520:	mov	r0, r1
    b524:	ldr	r1, [r3, #48]	; 0x30
    b528:	str	r4, [sp, #-8]!
    b52c:	str	lr, [sp, #4]
    b530:	add	r1, r1, #128	; 0x80
    b534:	bl	47e8 <memcpy@plt>
    b538:	ldr	r4, [sp]
    b53c:	add	sp, sp, #4
    b540:	mov	r0, #1
    b544:	pop	{pc}		; (ldr pc, [sp], #4)
    b548:	mov	r0, r3
    b54c:	bx	lr

0000b550 <rb_errstr>:
    b550:	cmp	r0, #6
    b554:	bhi	b56c <rb_errstr+0x1c>
    b558:	ldr	r3, [pc, #24]	; b578 <rb_errstr+0x28>
    b55c:	add	r3, pc, r3
    b560:	add	r0, r3, r0, lsl #2
    b564:	ldr	r0, [r0, #1024]	; 0x400
    b568:	bx	lr
    b56c:	ldr	r0, [pc, #8]	; b57c <rb_errstr+0x2c>
    b570:	add	r0, pc, r0
    b574:	bx	lr
    b578:	.word	0x0001d4e0
    b57c:	.word	0x0000b4d0

0000b580 <rb_listen>:
    b580:	strd	r4, [sp, #-16]!
    b584:	mov	r4, r0
    b588:	str	r6, [sp, #8]
    b58c:	mov	r6, r2
    b590:	str	lr, [sp, #12]
    b594:	sub	sp, sp, #16
    b598:	ldrb	ip, [r0, #17]
    b59c:	str	r1, [sp, #12]
    b5a0:	ldr	r0, [r0, #12]
    b5a4:	bic	ip, ip, #127	; 0x7f
    b5a8:	orr	ip, ip, #20
    b5ac:	strb	ip, [r4, #17]
    b5b0:	bl	45b4 <listen@plt>
    b5b4:	clz	r3, r0
    b5b8:	cmp	r6, #0
    b5bc:	lsr	r3, r3, #5
    b5c0:	moveq	r3, #0
    b5c4:	mov	r5, r0
    b5c8:	cmp	r3, #0
    b5cc:	bne	b5e8 <rb_listen+0x68>
    b5d0:	mov	r0, r5
    b5d4:	add	sp, sp, #16
    b5d8:	ldrd	r4, [sp]
    b5dc:	ldr	r6, [sp, #8]
    b5e0:	add	sp, sp, #12
    b5e4:	pop	{pc}		; (ldr pc, [sp], #4)
    b5e8:	mov	ip, #4
    b5ec:	add	r3, sp, #12
    b5f0:	ldr	r0, [r4, #12]
    b5f4:	mov	r2, #9
    b5f8:	mov	r1, #6
    b5fc:	str	ip, [sp]
    b600:	bl	4c74 <setsockopt@plt>
    b604:	b	b5d0 <rb_listen+0x50>

0000b608 <rb_fdlist_init>:
    b608:	ldr	r3, [pc, #156]	; b6ac <rb_fdlist_init+0xa4>
    b60c:	strd	r4, [sp, #-16]!
    b610:	add	r3, pc, r3
    b614:	ldr	r3, [r3, #88]	; 0x58
    b618:	str	r6, [sp, #8]
    b61c:	mov	r6, r2
    b620:	ldr	r2, [pc, #136]	; b6b0 <rb_fdlist_init+0xa8>
    b624:	str	lr, [sp, #12]
    b628:	cmp	r3, #0
    b62c:	add	r2, pc, r2
    b630:	bne	b67c <rb_fdlist_init+0x74>
    b634:	ldr	r3, [pc, #120]	; b6b4 <rb_fdlist_init+0xac>
    b638:	cmp	r0, #0
    b63c:	ldr	r5, [r2, r3]
    b640:	str	r1, [r5]
    b644:	beq	b66c <rb_fdlist_init+0x64>
    b648:	cmp	r1, #3
    b64c:	ble	b66c <rb_fdlist_init+0x64>
    b650:	mov	r4, #3
    b654:	mov	r0, r4
    b658:	add	r4, r4, #1
    b65c:	bl	4914 <close@plt>
    b660:	ldr	r3, [r5]
    b664:	cmp	r4, r3
    b668:	blt	b654 <rb_fdlist_init+0x4c>
    b66c:	ldr	r3, [pc, #68]	; b6b8 <rb_fdlist_init+0xb0>
    b670:	mov	r2, #1
    b674:	add	r3, pc, r3
    b678:	str	r2, [r3, #88]	; 0x58
    b67c:	ldr	r2, [pc, #56]	; b6bc <rb_fdlist_init+0xb4>
    b680:	mov	r1, r6
    b684:	mov	r0, #68	; 0x44
    b688:	add	r2, pc, r2
    b68c:	bl	4a88 <rb_bh_create@plt>
    b690:	ldr	r3, [pc, #40]	; b6c0 <rb_fdlist_init+0xb8>
    b694:	ldrd	r4, [sp]
    b698:	ldr	r6, [sp, #8]
    b69c:	add	sp, sp, #12
    b6a0:	add	r3, pc, r3
    b6a4:	str	r0, [r3, #92]	; 0x5c
    b6a8:	pop	{pc}		; (ldr pc, [sp], #4)
    b6ac:	.word	0x00030394
    b6b0:	.word	0x0001d9cc
    b6b4:	.word	0x0000039c
    b6b8:	.word	0x00030330
    b6bc:	.word	0x0000b3d0
    b6c0:	.word	0x00030304

0000b6c4 <rb_open>:
    b6c4:	asr	r3, r0, #12
    b6c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
    b6cc:	cmp	r0, #0
    b6d0:	strd	r6, [sp, #8]
    b6d4:	mov	r7, r1
    b6d8:	mov	r6, r0
    b6dc:	eor	r3, r3, r0, asr #24
    b6e0:	ldr	r1, [pc, #352]	; b848 <rb_open+0x184>
    b6e4:	strd	r8, [sp, #16]
    b6e8:	mov	r8, r2
    b6ec:	eor	r3, r3, r0
    b6f0:	str	sl, [sp, #24]
    b6f4:	ubfx	r3, r3, #0, #12
    b6f8:	str	lr, [sp, #28]
    b6fc:	add	r3, r3, r3, lsl #1
    b700:	add	r1, pc, r1
    b704:	lsl	r4, r3, #2
    b708:	ldr	r3, [pc, #316]	; b84c <rb_open+0x188>
    b70c:	ldr	r9, [r1, r3]
    b710:	blt	b740 <rb_open+0x7c>
    b714:	ldr	r3, [r9]
    b718:	ldr	r3, [r3, r4]
    b71c:	cmp	r3, #0
    b720:	beq	b740 <rb_open+0x7c>
    b724:	ldr	r5, [r3]
    b728:	ldr	r2, [r5, #12]
    b72c:	cmp	r6, r2
    b730:	beq	b790 <rb_open+0xcc>
    b734:	ldr	r3, [r3, #8]
    b738:	cmp	r3, #0
    b73c:	bne	b724 <rb_open+0x60>
    b740:	ldr	r3, [pc, #264]	; b850 <rb_open+0x18c>
    b744:	add	r3, pc, r3
    b748:	ldr	r0, [r3, #92]	; 0x5c
    b74c:	bl	492c <rb_bh_alloc@plt>
    b750:	ldr	r2, [r9]
    b754:	mov	r3, #0
    b758:	mov	r5, r0
    b75c:	str	r0, [r5]
    b760:	str	r3, [r0, #4]
    b764:	str	r6, [r0, #12]
    b768:	ldr	r3, [r2, r4]
    b76c:	add	r1, r2, r4
    b770:	cmp	r3, #0
    b774:	str	r3, [r0, #8]
    b778:	strne	r0, [r3, #4]
    b77c:	beq	b828 <rb_open+0x164>
    b780:	ldr	r3, [r1, #8]
    b784:	str	r5, [r2, r4]
    b788:	add	r3, r3, #1
    b78c:	str	r3, [r1, #8]
    b790:	ldrb	r3, [r5, #16]
    b794:	tst	r3, #1
    b798:	bne	b804 <rb_open+0x140>
    b79c:	orr	r3, r3, #1
    b7a0:	cmp	r8, #0
    b7a4:	str	r6, [r5, #12]
    b7a8:	strb	r3, [r5, #16]
    b7ac:	strb	r7, [r5, #17]
    b7b0:	beq	b7d4 <rb_open+0x110>
    b7b4:	mov	r0, #128	; 0x80
    b7b8:	bl	4980 <malloc@plt>
    b7bc:	subs	r4, r0, #0
    b7c0:	beq	b838 <rb_open+0x174>
    b7c4:	mov	r1, r8
    b7c8:	mov	r2, #128	; 0x80
    b7cc:	bl	4680 <rb_strlcpy@plt>
    b7d0:	str	r4, [r5, #24]
    b7d4:	ldr	r2, [pc, #120]	; b854 <rb_open+0x190>
    b7d8:	add	r2, pc, r2
    b7dc:	ldr	r3, [r2, #96]	; 0x60
    b7e0:	add	r3, r3, #1
    b7e4:	str	r3, [r2, #96]	; 0x60
    b7e8:	mov	r0, r5
    b7ec:	ldrd	r4, [sp]
    b7f0:	ldrd	r6, [sp, #8]
    b7f4:	ldrd	r8, [sp, #16]
    b7f8:	ldr	sl, [sp, #24]
    b7fc:	add	sp, sp, #28
    b800:	pop	{pc}		; (ldr pc, [sp], #4)
    b804:	ldr	r2, [r5, #24]
    b808:	cmp	r2, #0
    b80c:	beq	b83c <rb_open+0x178>
    b810:	ldr	r0, [pc, #64]	; b858 <rb_open+0x194>
    b814:	mov	r1, r6
    b818:	mov	r5, #0
    b81c:	add	r0, pc, r0
    b820:	bl	48f0 <rb_lib_log@plt>
    b824:	b	b7e8 <rb_open+0x124>
    b828:	ldr	r3, [r1, #4]
    b82c:	cmp	r3, #0
    b830:	streq	r0, [r1, #4]
    b834:	b	b780 <rb_open+0xbc>
    b838:	bl	495c <rb_outofmemory@plt>
    b83c:	ldr	r2, [pc, #24]	; b85c <rb_open+0x198>
    b840:	add	r2, pc, r2
    b844:	b	b810 <rb_open+0x14c>
    b848:	.word	0x0001d8f8
    b84c:	.word	0x000003bc
    b850:	.word	0x00030260
    b854:	.word	0x000301cc
    b858:	.word	0x0000b254
    b85c:	.word	0x0000b228

0000b860 <rb_dump_fd>:
    b860:	ldr	r3, [pc, #192]	; b928 <rb_dump_fd+0xc8>
    b864:	strd	r4, [sp, #-32]!	; 0xffffffe0
    b868:	mov	r5, r1
    b86c:	ldr	r2, [pc, #184]	; b92c <rb_dump_fd+0xcc>
    b870:	strd	r6, [sp, #8]
    b874:	mov	r7, r0
    b878:	ldr	r6, [pc, #176]	; b930 <rb_dump_fd+0xd0>
    b87c:	add	r3, pc, r3
    b880:	strd	r8, [sp, #16]
    b884:	mov	r9, #0
    b888:	str	sl, [sp, #24]
    b88c:	str	lr, [sp, #28]
    b890:	ldr	r8, [r3, r2]
    b894:	add	r6, pc, r6
    b898:	b	b8a8 <rb_dump_fd+0x48>
    b89c:	add	r9, r9, #12
    b8a0:	cmp	r9, #49152	; 0xc000
    b8a4:	beq	b910 <rb_dump_fd+0xb0>
    b8a8:	ldr	r3, [r8]
    b8ac:	add	r2, r3, r9
    b8b0:	ldr	r2, [r2, #8]
    b8b4:	cmp	r2, #0
    b8b8:	beq	b89c <rb_dump_fd+0x3c>
    b8bc:	ldr	r4, [r3, r9]
    b8c0:	cmp	r4, #0
    b8c4:	beq	b89c <rb_dump_fd+0x3c>
    b8c8:	ldr	r3, [r4]
    b8cc:	mov	r2, r5
    b8d0:	cmp	r3, #0
    b8d4:	beq	b8f8 <rb_dump_fd+0x98>
    b8d8:	ldrb	r1, [r3, #16]
    b8dc:	tst	r1, #1
    b8e0:	beq	b8f8 <rb_dump_fd+0x98>
    b8e4:	ldr	r0, [r3, #12]
    b8e8:	ldr	r1, [r3, #24]
    b8ec:	cmp	r1, #0
    b8f0:	moveq	r1, r6
    b8f4:	blx	r7
    b8f8:	ldr	r4, [r4, #8]
    b8fc:	cmp	r4, #0
    b900:	bne	b8c8 <rb_dump_fd+0x68>
    b904:	add	r9, r9, #12
    b908:	cmp	r9, #49152	; 0xc000
    b90c:	bne	b8a8 <rb_dump_fd+0x48>
    b910:	ldrd	r4, [sp]
    b914:	ldrd	r6, [sp, #8]
    b918:	ldrd	r8, [sp, #16]
    b91c:	ldr	sl, [sp, #24]
    b920:	add	sp, sp, #28
    b924:	pop	{pc}		; (ldr pc, [sp], #4)
    b928:	.word	0x0001d77c
    b92c:	.word	0x000003bc
    b930:	.word	0x0000c378

0000b934 <rb_note>:
    b934:	strd	r4, [sp, #-16]!
    b938:	subs	r4, r0, #0
    b93c:	str	r6, [sp, #8]
    b940:	str	lr, [sp, #12]
    b944:	beq	b97c <rb_note+0x48>
    b948:	ldr	r0, [r4, #24]
    b94c:	mov	r5, r1
    b950:	cmp	r0, #0
    b954:	beq	b95c <rb_note+0x28>
    b958:	bl	46d4 <free@plt>
    b95c:	mov	r0, #128	; 0x80
    b960:	bl	4980 <malloc@plt>
    b964:	subs	r6, r0, #0
    b968:	beq	b98c <rb_note+0x58>
    b96c:	mov	r1, r5
    b970:	mov	r2, #128	; 0x80
    b974:	bl	4680 <rb_strlcpy@plt>
    b978:	str	r6, [r4, #24]
    b97c:	ldrd	r4, [sp]
    b980:	ldr	r6, [sp, #8]
    b984:	add	sp, sp, #12
    b988:	pop	{pc}		; (ldr pc, [sp], #4)
    b98c:	bl	495c <rb_outofmemory@plt>

0000b990 <rb_set_type>:
    b990:	strb	r1, [r0, #17]
    b994:	bx	lr

0000b998 <rb_get_type>:
    b998:	ldrb	r0, [r0, #17]
    b99c:	bx	lr

0000b9a0 <rb_fd_ssl>:
    b9a0:	cmp	r0, #0
    b9a4:	ldrbne	r0, [r0, #17]
    b9a8:	ubfxne	r0, r0, #5, #1
    b9ac:	bx	lr

0000b9b0 <rb_get_fd>:
    b9b0:	cmp	r0, #0
    b9b4:	ldrne	r0, [r0, #12]
    b9b8:	mvneq	r0, #0
    b9bc:	bx	lr

0000b9c0 <rb_get_sockerr>:
    b9c0:	mov	r3, #0
    b9c4:	strd	r4, [sp, #-20]!	; 0xffffffec
    b9c8:	strd	r6, [sp, #8]
    b9cc:	mov	r6, #4
    b9d0:	mov	r7, r0
    b9d4:	str	lr, [sp, #16]
    b9d8:	sub	sp, sp, #20
    b9dc:	str	r3, [sp, #8]
    b9e0:	str	r6, [sp, #12]
    b9e4:	bl	4cbc <__errno_location@plt>
    b9e8:	ldrb	r3, [r7, #17]
    b9ec:	ldr	r4, [r0]
    b9f0:	tst	r3, #4
    b9f4:	bne	ba10 <rb_get_sockerr+0x50>
    b9f8:	mov	r0, r4
    b9fc:	add	sp, sp, #20
    ba00:	ldrd	r4, [sp]
    ba04:	ldrd	r6, [sp, #8]
    ba08:	add	sp, sp, #16
    ba0c:	pop	{pc}		; (ldr pc, [sp], #4)
    ba10:	mov	r5, r0
    ba14:	mov	r0, r7
    ba18:	bl	44b8 <rb_get_fd@plt>
    ba1c:	add	ip, sp, #12
    ba20:	mov	r2, r6
    ba24:	add	r3, sp, #8
    ba28:	mov	r1, #1
    ba2c:	str	ip, [sp]
    ba30:	bl	4c50 <getsockopt@plt>
    ba34:	cmp	r0, #0
    ba38:	bne	ba48 <rb_get_sockerr+0x88>
    ba3c:	ldr	r3, [sp, #8]
    ba40:	cmp	r3, #0
    ba44:	movne	r4, r3
    ba48:	str	r4, [r5]
    ba4c:	b	b9f8 <rb_get_sockerr+0x38>

0000ba50 <rb_bind>:
    ba50:	mov	r3, #4
    ba54:	strd	r4, [sp, #-16]!
    ba58:	mov	r4, r0
    ba5c:	ldr	r0, [r0, #12]
    ba60:	mov	ip, #1
    ba64:	mov	r2, #2
    ba68:	str	r6, [sp, #8]
    ba6c:	mov	r6, r1
    ba70:	mov	r1, ip
    ba74:	str	lr, [sp, #12]
    ba78:	sub	sp, sp, #16
    ba7c:	str	r3, [sp]
    ba80:	add	r3, sp, #12
    ba84:	str	ip, [sp, #12]
    ba88:	bl	4c74 <setsockopt@plt>
    ba8c:	subs	r5, r0, #0
    ba90:	bne	bacc <rb_bind+0x7c>
    ba94:	ldrh	r3, [r6]
    ba98:	mov	r1, r6
    ba9c:	ldr	r0, [r4, #12]
    baa0:	cmp	r3, #2
    baa4:	moveq	r2, #16
    baa8:	movne	r2, #28
    baac:	bl	48e4 <bind@plt>
    bab0:	mov	r5, r0
    bab4:	mov	r0, r5
    bab8:	add	sp, sp, #16
    babc:	ldrd	r4, [sp]
    bac0:	ldr	r6, [sp, #8]
    bac4:	add	sp, sp, #12
    bac8:	pop	{pc}		; (ldr pc, [sp], #4)
    bacc:	mov	r0, r4
    bad0:	ldr	r4, [r4, #12]
    bad4:	bl	4a64 <rb_get_sockerr@plt>
    bad8:	bl	4374 <strerror@plt>
    badc:	mov	r2, r0
    bae0:	ldr	r0, [pc, #12]	; baf4 <rb_bind+0xa4>
    bae4:	mov	r1, r4
    bae8:	add	r0, pc, r0
    baec:	bl	48f0 <rb_lib_log@plt>
    baf0:	b	bab4 <rb_bind+0x64>
    baf4:	.word	0x0000afbc

0000baf8 <rb_get_fde>:
    baf8:	subs	r2, r0, #0
    bafc:	ldr	r0, [pc, #96]	; bb64 <rb_get_fde+0x6c>
    bb00:	add	r0, pc, r0
    bb04:	blt	bb5c <rb_get_fde+0x64>
    bb08:	ldr	r1, [pc, #88]	; bb68 <rb_get_fde+0x70>
    bb0c:	asr	r3, r2, #24
    bb10:	eor	r3, r3, r2, asr #12
    bb14:	eor	r3, r3, r2
    bb18:	ldr	r1, [r0, r1]
    bb1c:	ubfx	r3, r3, #0, #12
    bb20:	add	r3, r3, r3, lsl #1
    bb24:	ldr	r1, [r1]
    bb28:	ldr	r0, [r1, r3, lsl #2]
    bb2c:	cmp	r0, #0
    bb30:	beq	bb58 <rb_get_fde+0x60>
    bb34:	ldr	r3, [r0]
    bb38:	ldr	r1, [r3, #12]
    bb3c:	cmp	r2, r1
    bb40:	beq	bb54 <rb_get_fde+0x5c>
    bb44:	ldr	r0, [r0, #8]
    bb48:	cmp	r0, #0
    bb4c:	bne	bb34 <rb_get_fde+0x3c>
    bb50:	bx	lr
    bb54:	mov	r0, r3
    bb58:	bx	lr
    bb5c:	mov	r0, #0
    bb60:	bx	lr
    bb64:	.word	0x0001d4f8
    bb68:	.word	0x000003bc

0000bb6c <rb_read>:
    bb6c:	push	{lr}		; (str lr, [sp, #-4]!)
    bb70:	subs	lr, r0, #0
    bb74:	beq	bba0 <rb_read+0x34>
    bb78:	ldrb	ip, [lr, #17]
    bb7c:	ands	r3, ip, #32
    bb80:	bne	bba4 <rb_read+0x38>
    bb84:	tst	ip, #4
    bb88:	ldr	r0, [lr, #12]
    bb8c:	bne	bb98 <rb_read+0x2c>
    bb90:	pop	{lr}		; (ldr lr, [sp], #4)
    bb94:	b	46ec <read@plt>
    bb98:	pop	{lr}		; (ldr lr, [sp], #4)
    bb9c:	b	4560 <recv@plt>
    bba0:	pop	{pc}		; (ldr pc, [sp], #4)
    bba4:	pop	{lr}		; (ldr lr, [sp], #4)
    bba8:	b	e5a4 <rb_ssl_read>

0000bbac <rb_write>:
    bbac:	subs	r3, r0, #0
    bbb0:	beq	bbd8 <rb_write+0x2c>
    bbb4:	ldrb	ip, [r3, #17]
    bbb8:	tst	ip, #32
    bbbc:	bne	bbdc <rb_write+0x30>
    bbc0:	tst	ip, #4
    bbc4:	ldr	r0, [r3, #12]
    bbc8:	bne	bbd0 <rb_write+0x24>
    bbcc:	b	4704 <write@plt>
    bbd0:	mov	r3, #16384	; 0x4000
    bbd4:	b	4a70 <send@plt>
    bbd8:	bx	lr
    bbdc:	b	e5d4 <rb_ssl_write>

0000bbe0 <rb_writev>:
    bbe0:	strd	r4, [sp, #-20]!	; 0xffffffec
    bbe4:	strd	r6, [sp, #8]
    bbe8:	subs	r6, r0, #0
    bbec:	str	lr, [sp, #16]
    bbf0:	sub	sp, sp, #36	; 0x24
    bbf4:	beq	bcb0 <rb_writev+0xd0>
    bbf8:	ldrb	r3, [r6, #17]
    bbfc:	mov	r5, r1
    bc00:	mov	r4, r2
    bc04:	ands	ip, r3, #32
    bc08:	bne	bc6c <rb_writev+0x8c>
    bc0c:	tst	r3, #4
    bc10:	ldr	r0, [r6, #12]
    bc14:	bne	bc38 <rb_writev+0x58>
    bc18:	bl	4668 <writev@plt>
    bc1c:	mov	r4, r0
    bc20:	mov	r0, r4
    bc24:	add	sp, sp, #36	; 0x24
    bc28:	ldrd	r4, [sp]
    bc2c:	ldrd	r6, [sp, #8]
    bc30:	add	sp, sp, #16
    bc34:	pop	{pc}		; (ldr pc, [sp], #4)
    bc38:	add	r3, sp, #4
    bc3c:	mov	r2, #16384	; 0x4000
    bc40:	str	ip, [sp, #4]
    bc44:	mov	r1, r3
    bc48:	str	ip, [sp, #8]
    bc4c:	str	r5, [sp, #12]
    bc50:	str	r4, [sp, #16]
    bc54:	str	ip, [sp, #20]
    bc58:	str	ip, [sp, #24]
    bc5c:	str	ip, [sp, #28]
    bc60:	bl	46e0 <sendmsg@plt>
    bc64:	mov	r4, r0
    bc68:	b	bc20 <rb_writev+0x40>
    bc6c:	subs	r7, r2, #0
    bc70:	beq	bc20 <rb_writev+0x40>
    bc74:	add	r5, r1, #8
    bc78:	mov	r4, #0
    bc7c:	b	bc8c <rb_writev+0xac>
    bc80:	subs	r7, r7, #1
    bc84:	add	r4, r4, r0
    bc88:	beq	bc20 <rb_writev+0x40>
    bc8c:	mov	r0, r6
    bc90:	ldmdb	r5, {r1, r2}
    bc94:	add	r5, r5, #8
    bc98:	bl	4638 <rb_write@plt>
    bc9c:	cmp	r0, #0
    bca0:	bgt	bc80 <rb_writev+0xa0>
    bca4:	cmp	r4, #0
    bca8:	moveq	r4, r0
    bcac:	b	bc20 <rb_writev+0x40>
    bcb0:	bl	4cbc <__errno_location@plt>
    bcb4:	mov	r3, #9
    bcb8:	mvn	r4, #0
    bcbc:	str	r3, [r0]
    bcc0:	b	bc20 <rb_writev+0x40>

0000bcc4 <rb_inet_ntop>:
    bcc4:	cmp	r0, #2
    bcc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
    bccc:	strd	r6, [sp, #8]
    bcd0:	strd	r8, [sp, #16]
    bcd4:	mov	r9, r1
    bcd8:	strd	sl, [sp, #24]
    bcdc:	mov	sl, r2
    bce0:	mov	fp, r3
    bce4:	str	lr, [sp, #32]
    bce8:	sub	sp, sp, #100	; 0x64
    bcec:	beq	bf48 <rb_inet_ntop+0x284>
    bcf0:	cmp	r0, #10
    bcf4:	bne	bd54 <rb_inet_ntop+0x90>
    bcf8:	ldr	r2, [r1]
    bcfc:	cmp	r2, #0
    bd00:	bne	bd74 <rb_inet_ntop+0xb0>
    bd04:	ldr	r2, [r1, #4]
    bd08:	cmp	r2, #0
    bd0c:	bne	bd74 <rb_inet_ntop+0xb0>
    bd10:	ldr	r2, [r1, #8]
    bd14:	cmn	r2, #65536	; 0x10000
    bd18:	beq	bd34 <rb_inet_ntop+0x70>
    bd1c:	cmp	r2, #0
    bd20:	bne	bd74 <rb_inet_ntop+0xb0>
    bd24:	ldr	r2, [r9, #12]
    bd28:	rev	r2, r2
    bd2c:	cmp	r2, #1
    bd30:	bls	bd74 <rb_inet_ntop+0xb0>
    bd34:	cmp	fp, #15
    bd38:	bls	bd54 <rb_inet_ntop+0x90>
    bd3c:	add	r0, r9, #12
    bd40:	bl	a5e4 <inetntoa>
    bd44:	mov	r1, r0
    bd48:	mov	r0, sl
    bd4c:	bl	486c <strcpy@plt>
    bd50:	b	bd58 <rb_inet_ntop+0x94>
    bd54:	mov	r0, #0
    bd58:	add	sp, sp, #100	; 0x64
    bd5c:	ldrd	r4, [sp]
    bd60:	ldrd	r6, [sp, #8]
    bd64:	ldrd	r8, [sp, #16]
    bd68:	ldrd	sl, [sp, #24]
    bd6c:	add	sp, sp, #32
    bd70:	pop	{pc}		; (ldr pc, [sp], #4)
    bd74:	mov	r0, #0
    bd78:	mov	r1, #0
    bd7c:	add	r7, sp, #16
    bd80:	mov	r2, #0
    bd84:	add	lr, r9, #1
    bd88:	strd	r0, [sp, #16]
    bd8c:	strd	r0, [r7, #8]
    bd90:	strd	r0, [r7, #16]
    bd94:	strd	r0, [r7, #24]
    bd98:	ldrb	r0, [r9, r2]
    bd9c:	asr	r3, r2, #1
    bda0:	add	ip, sp, #96	; 0x60
    bda4:	ldrb	r1, [lr, r2]
    bda8:	add	r3, ip, r3, lsl #2
    bdac:	add	r2, r2, #2
    bdb0:	cmp	r2, #16
    bdb4:	orr	r1, r1, r0, lsl #8
    bdb8:	str	r1, [r3, #-80]	; 0xffffffb0
    bdbc:	bne	bd98 <rb_inet_ntop+0xd4>
    bdc0:	mov	r8, #0
    bdc4:	mvn	r6, #0
    bdc8:	mov	lr, r7
    bdcc:	mov	r1, r8
    bdd0:	mov	r0, r8
    bdd4:	mov	r2, r6
    bdd8:	b	bdfc <rb_inet_ntop+0x138>
    bddc:	cmn	r2, #1
    bde0:	add	r1, r1, #1
    bde4:	bne	bdf0 <rb_inet_ntop+0x12c>
    bde8:	mov	r2, r0
    bdec:	mov	r1, #1
    bdf0:	add	r0, r0, #1
    bdf4:	cmp	r0, #8
    bdf8:	beq	be48 <rb_inet_ntop+0x184>
    bdfc:	ldr	r3, [lr], #4
    be00:	cmp	r3, #0
    be04:	beq	bddc <rb_inet_ntop+0x118>
    be08:	cmn	r2, #1
    be0c:	beq	bdf0 <rb_inet_ntop+0x12c>
    be10:	cmn	r6, #1
    be14:	movne	r3, #0
    be18:	moveq	r3, #1
    be1c:	cmp	r1, r8
    be20:	orrgt	r3, r3, #1
    be24:	cmp	r3, #0
    be28:	mvneq	r2, #0
    be2c:	beq	bdf0 <rb_inet_ntop+0x12c>
    be30:	add	r0, r0, #1
    be34:	mov	r6, r2
    be38:	cmp	r0, #8
    be3c:	mov	r8, r1
    be40:	mvn	r2, #0
    be44:	bne	bdfc <rb_inet_ntop+0x138>
    be48:	cmn	r2, #1
    be4c:	beq	bf68 <rb_inet_ntop+0x2a4>
    be50:	cmn	r6, #1
    be54:	movne	r0, #0
    be58:	moveq	r0, #1
    be5c:	cmp	r8, r1
    be60:	orrlt	r0, r0, #1
    be64:	cmp	r0, #0
    be68:	movne	r8, r1
    be6c:	moveq	r2, r6
    be70:	cmp	r8, #2
    be74:	movge	r3, #1
    be78:	movlt	r3, #0
    be7c:	movge	r6, r2
    be80:	mvnlt	r6, #0
    be84:	mov	r1, r3
    be88:	ldr	r2, [pc, #412]	; c02c <rb_inet_ntop+0x368>
    be8c:	add	r3, sp, #48	; 0x30
    be90:	mov	r5, #0
    be94:	mov	r4, r3
    be98:	stmib	sp, {r3, sl}
    be9c:	mov	sl, r1
    bea0:	str	r9, [sp, #12]
    bea4:	add	r2, pc, r2
    bea8:	mov	r9, r2
    beac:	b	bef0 <rb_inet_ntop+0x22c>
    beb0:	cmp	r5, #0
    beb4:	beq	becc <rb_inet_ntop+0x208>
    beb8:	mov	r3, #58	; 0x3a
    bebc:	cmp	r6, #0
    bec0:	cmpeq	r5, #6
    bec4:	strb	r3, [r4], #1
    bec8:	beq	bf80 <rb_inet_ntop+0x2bc>
    becc:	mov	r0, r4
    bed0:	mov	r1, r9
    bed4:	ldr	r2, [r7]
    bed8:	bl	4cd4 <sprintf@plt>
    bedc:	add	r4, r4, r0
    bee0:	add	r5, r5, #1
    bee4:	add	r7, r7, #4
    bee8:	cmp	r5, #8
    beec:	beq	bfd8 <rb_inet_ntop+0x314>
    bef0:	cmp	r6, r5
    bef4:	movgt	r2, #0
    bef8:	andle	r2, sl, #1
    befc:	cmp	r2, #0
    bf00:	beq	beb0 <rb_inet_ntop+0x1ec>
    bf04:	add	r2, r6, r8
    bf08:	cmp	r2, r5
    bf0c:	ble	beb0 <rb_inet_ntop+0x1ec>
    bf10:	cmp	r6, r5
    bf14:	bne	bee0 <rb_inet_ntop+0x21c>
    bf18:	cmp	r6, #0
    bf1c:	add	r2, r4, #1
    bf20:	bne	bf38 <rb_inet_ntop+0x274>
    bf24:	mov	r1, r4
    bf28:	mov	r0, #48	; 0x30
    bf2c:	mov	r4, r2
    bf30:	strb	r0, [r1], #2
    bf34:	mov	r2, r1
    bf38:	mov	r3, #58	; 0x3a
    bf3c:	strb	r3, [r4]
    bf40:	mov	r4, r2
    bf44:	b	bee0 <rb_inet_ntop+0x21c>
    bf48:	cmp	r3, #15
    bf4c:	bls	bd54 <rb_inet_ntop+0x90>
    bf50:	mov	r0, r1
    bf54:	bl	a5e4 <inetntoa>
    bf58:	mov	r1, r0
    bf5c:	mov	r0, sl
    bf60:	bl	486c <strcpy@plt>
    bf64:	b	bd58 <rb_inet_ntop+0x94>
    bf68:	cmn	r6, #1
    bf6c:	moveq	r3, #0
    bf70:	moveq	r1, r3
    bf74:	beq	be88 <rb_inet_ntop+0x1c4>
    bf78:	mov	r2, r6
    bf7c:	b	be70 <rb_inet_ntop+0x1ac>
    bf80:	cmp	r8, #6
    bf84:	beq	bfa0 <rb_inet_ntop+0x2dc>
    bf88:	cmp	r8, #5
    bf8c:	bne	becc <rb_inet_ntop+0x208>
    bf90:	ldr	r2, [sp, #36]	; 0x24
    bf94:	movw	r3, #65535	; 0xffff
    bf98:	cmp	r2, r3
    bf9c:	bne	becc <rb_inet_ntop+0x208>
    bfa0:	ldmib	sp, {r3, sl}
    bfa4:	ldr	r9, [sp, #12]
    bfa8:	sub	r2, r4, r3
    bfac:	rsb	r2, r2, #46	; 0x2e
    bfb0:	cmp	r2, #15
    bfb4:	bls	bd54 <rb_inet_ntop+0x90>
    bfb8:	add	r0, r9, #12
    bfbc:	bl	a5e4 <inetntoa>
    bfc0:	mov	r1, r0
    bfc4:	mov	r0, r4
    bfc8:	bl	45e4 <stpcpy@plt>
    bfcc:	mov	r4, r0
    bfd0:	add	r2, r0, #1
    bfd4:	b	bfe8 <rb_inet_ntop+0x324>
    bfd8:	cmn	r6, #1
    bfdc:	add	r2, r4, #1
    bfe0:	ldr	sl, [sp, #8]
    bfe4:	beq	c004 <rb_inet_ntop+0x340>
    bfe8:	add	r6, r6, r8
    bfec:	cmp	r6, #8
    bff0:	bne	c004 <rb_inet_ntop+0x340>
    bff4:	mov	r1, #58	; 0x3a
    bff8:	strb	r1, [r4]
    bffc:	mov	r4, r2
    c000:	add	r2, r2, #1
    c004:	ldr	r3, [sp, #4]
    c008:	mov	r1, #0
    c00c:	strb	r1, [r4]
    c010:	sub	r2, r2, r3
    c014:	cmp	fp, r2
    c018:	bcc	bd54 <rb_inet_ntop+0x90>
    c01c:	mov	r1, r3
    c020:	mov	r0, sl
    c024:	bl	47e8 <memcpy@plt>
    c028:	b	bd58 <rb_inet_ntop+0x94>
    c02c:	.word	0x0000ac40

0000c030 <rb_inet_ntop_sock>:
    c030:	ldrh	ip, [r0]
    c034:	cmp	ip, #2
    c038:	beq	c04c <rb_inet_ntop_sock+0x1c>
    c03c:	cmp	ip, #10
    c040:	beq	c060 <rb_inet_ntop_sock+0x30>
    c044:	mov	r0, #0
    c048:	bx	lr
    c04c:	mov	r3, r2
    c050:	mov	r2, r1
    c054:	add	r1, r0, #4
    c058:	mov	r0, ip
    c05c:	b	4920 <rb_inet_ntop@plt>
    c060:	mov	r3, r2
    c064:	mov	r2, r1
    c068:	add	r1, r0, #8
    c06c:	mov	r0, ip
    c070:	b	4920 <rb_inet_ntop@plt>

0000c074 <rb_inet_pton>:
    c074:	cmp	r0, #2
    c078:	strd	r4, [sp, #-12]!
    c07c:	mov	r4, r1
    c080:	mov	r5, r2
    c084:	str	lr, [sp, #8]
    c088:	sub	sp, sp, #60	; 0x3c
    c08c:	beq	c0e4 <rb_inet_pton+0x70>
    c090:	cmp	r0, #10
    c094:	mvnne	r0, #0
    c098:	bne	c0d4 <rb_inet_pton+0x60>
    c09c:	mov	r1, r2
    c0a0:	mov	r0, r4
    c0a4:	bl	a6f0 <inet_pton4>
    c0a8:	cmp	r0, #0
    c0ac:	beq	c100 <rb_inet_pton+0x8c>
    c0b0:	ldr	r1, [pc, #96]	; c118 <rb_inet_pton+0xa4>
    c0b4:	mov	r2, r4
    c0b8:	mov	r4, sp
    c0bc:	mov	r0, r4
    c0c0:	add	r1, pc, r1
    c0c4:	bl	4cd4 <sprintf@plt>
    c0c8:	mov	r1, r5
    c0cc:	mov	r0, r4
    c0d0:	bl	a8ec <inet_pton6>
    c0d4:	add	sp, sp, #60	; 0x3c
    c0d8:	ldrd	r4, [sp]
    c0dc:	add	sp, sp, #8
    c0e0:	pop	{pc}		; (ldr pc, [sp], #4)
    c0e4:	mov	r1, r2
    c0e8:	mov	r0, r4
    c0ec:	bl	a6f0 <inet_pton4>
    c0f0:	add	sp, sp, #60	; 0x3c
    c0f4:	ldrd	r4, [sp]
    c0f8:	add	sp, sp, #8
    c0fc:	pop	{pc}		; (ldr pc, [sp], #4)
    c100:	mov	r0, r4
    c104:	bl	a8ec <inet_pton6>
    c108:	add	sp, sp, #60	; 0x3c
    c10c:	ldrd	r4, [sp]
    c110:	add	sp, sp, #8
    c114:	pop	{pc}		; (ldr pc, [sp], #4)
    c118:	.word	0x0000aa28

0000c11c <rb_inet_pton_sock>:
    c11c:	mov	r2, #128	; 0x80
    c120:	strd	r4, [sp, #-16]!
    c124:	mov	r4, r1
    c128:	mov	r5, r0
    c12c:	mov	r0, r1
    c130:	str	r6, [sp, #8]
    c134:	mov	r1, #0
    c138:	str	lr, [sp, #12]
    c13c:	bl	4608 <memset@plt>
    c140:	add	r2, r4, #4
    c144:	mov	r1, r5
    c148:	mov	r0, #2
    c14c:	bl	4614 <rb_inet_pton@plt>
    c150:	cmp	r0, #0
    c154:	beq	c174 <rb_inet_pton_sock+0x58>
    c158:	mov	r3, #2
    c15c:	mov	r0, #1
    c160:	str	r3, [r4]
    c164:	ldrd	r4, [sp]
    c168:	ldr	r6, [sp, #8]
    c16c:	add	sp, sp, #12
    c170:	pop	{pc}		; (ldr pc, [sp], #4)
    c174:	mov	r1, r5
    c178:	add	r2, r4, #8
    c17c:	mov	r0, #10
    c180:	bl	4614 <rb_inet_pton@plt>
    c184:	cmp	r0, #0
    c188:	beq	c164 <rb_inet_pton_sock+0x48>
    c18c:	mov	r3, #10
    c190:	ldr	r6, [sp, #8]
    c194:	mov	r0, #1
    c198:	str	r3, [r4]
    c19c:	ldrd	r4, [sp]
    c1a0:	add	sp, sp, #12
    c1a4:	pop	{pc}		; (ldr pc, [sp], #4)

0000c1a8 <rb_get_iotype>:
    c1a8:	ldr	r0, [pc, #8]	; c1b8 <rb_get_iotype+0x10>
    c1ac:	add	r0, pc, r0
    c1b0:	add	r0, r0, #56	; 0x38
    c1b4:	bx	lr
    c1b8:	.word	0x0002f7f8

0000c1bc <rb_io_sched_event>:
    c1bc:	strd	r4, [sp, #-16]!
    c1c0:	subs	r5, r0, #0
    c1c4:	str	r6, [sp, #8]
    c1c8:	str	lr, [sp, #12]
    c1cc:	beq	c220 <rb_io_sched_event+0x64>
    c1d0:	ldr	r4, [pc, #92]	; c234 <rb_io_sched_event+0x78>
    c1d4:	add	r4, pc, r4
    c1d8:	ldr	r3, [r4, #52]	; 0x34
    c1dc:	cmp	r3, #0
    c1e0:	beq	c220 <rb_io_sched_event+0x64>
    c1e4:	ldr	r2, [r4, #40]	; 0x28
    c1e8:	cmp	r2, #0
    c1ec:	beq	c220 <rb_io_sched_event+0x64>
    c1f0:	mov	r6, r1
    c1f4:	blx	r3
    c1f8:	cmp	r0, #0
    c1fc:	beq	c220 <rb_io_sched_event+0x64>
    c200:	mov	r1, r6
    c204:	mov	r0, r5
    c208:	ldr	r6, [sp, #8]
    c20c:	ldr	lr, [sp, #12]
    c210:	ldr	r3, [r4, #40]	; 0x28
    c214:	ldrd	r4, [sp]
    c218:	add	sp, sp, #16
    c21c:	bx	r3
    c220:	ldrd	r4, [sp]
    c224:	mov	r0, #0
    c228:	ldr	r6, [sp, #8]
    c22c:	add	sp, sp, #12
    c230:	pop	{pc}		; (ldr pc, [sp], #4)
    c234:	.word	0x0002f7d0

0000c238 <rb_io_unsched_event>:
    c238:	strd	r4, [sp, #-16]!
    c23c:	subs	r5, r0, #0
    c240:	str	r6, [sp, #8]
    c244:	str	lr, [sp, #12]
    c248:	beq	c294 <rb_io_unsched_event+0x5c>
    c24c:	ldr	r4, [pc, #80]	; c2a4 <rb_io_unsched_event+0x6c>
    c250:	add	r4, pc, r4
    c254:	ldr	r3, [r4, #52]	; 0x34
    c258:	cmp	r3, #0
    c25c:	beq	c294 <rb_io_unsched_event+0x5c>
    c260:	ldr	r2, [r4, #44]	; 0x2c
    c264:	cmp	r2, #0
    c268:	beq	c294 <rb_io_unsched_event+0x5c>
    c26c:	blx	r3
    c270:	cmp	r0, #0
    c274:	beq	c294 <rb_io_unsched_event+0x5c>
    c278:	mov	r0, r5
    c27c:	ldr	r6, [sp, #8]
    c280:	ldr	lr, [sp, #12]
    c284:	ldr	r3, [r4, #44]	; 0x2c
    c288:	ldrd	r4, [sp]
    c28c:	add	sp, sp, #16
    c290:	bx	r3
    c294:	ldrd	r4, [sp]
    c298:	ldr	r6, [sp, #8]
    c29c:	add	sp, sp, #12
    c2a0:	pop	{pc}		; (ldr pc, [sp], #4)
    c2a4:	.word	0x0002f754

0000c2a8 <rb_io_supports_event>:
    c2a8:	ldr	r3, [pc, #20]	; c2c4 <rb_io_supports_event+0x1c>
    c2ac:	add	r3, pc, r3
    c2b0:	ldr	r0, [r3, #52]	; 0x34
    c2b4:	cmp	r0, #0
    c2b8:	beq	c2c0 <rb_io_supports_event+0x18>
    c2bc:	bx	r0
    c2c0:	bx	lr
    c2c4:	.word	0x0002f6f8

0000c2c8 <rb_io_init_event>:
    c2c8:	ldr	r3, [pc, #32]	; c2f0 <rb_io_init_event+0x28>
    c2cc:	str	r4, [sp, #-8]!
    c2d0:	add	r3, pc, r3
    c2d4:	ldr	r3, [r3, #48]	; 0x30
    c2d8:	str	lr, [sp, #4]
    c2dc:	blx	r3
    c2e0:	ldr	r4, [sp]
    c2e4:	ldr	lr, [sp, #4]
    c2e8:	add	sp, sp, #8
    c2ec:	b	ef54 <rb_event_io_register_all>
    c2f0:	.word	0x0002f6d4

0000c2f4 <rb_init_netio>:
    c2f4:	ldr	r0, [pc, #536]	; c514 <rb_init_netio+0x220>
    c2f8:	strd	r4, [sp, #-16]!
    c2fc:	ldr	r5, [pc, #532]	; c518 <rb_init_netio+0x224>
    c300:	str	r6, [sp, #8]
    c304:	str	lr, [sp, #12]
    c308:	add	r0, pc, r0
    c30c:	bl	456c <getenv@plt>
    c310:	mov	r4, r0
    c314:	mov	r1, #49152	; 0xc000
    c318:	mov	r0, #1
    c31c:	add	r5, pc, r5
    c320:	bl	45c0 <calloc@plt>
    c324:	cmp	r0, #0
    c328:	beq	c4e0 <rb_init_netio+0x1ec>
    c32c:	ldr	r3, [pc, #488]	; c51c <rb_init_netio+0x228>
    c330:	ldr	r3, [r5, r3]
    c334:	str	r0, [r3]
    c338:	bl	dc44 <rb_init_ssl>
    c33c:	cmp	r4, #0
    c340:	beq	c404 <rb_init_netio+0x110>
    c344:	ldr	r0, [pc, #468]	; c520 <rb_init_netio+0x22c>
    c348:	mov	r1, r4
    c34c:	add	r0, pc, r0
    c350:	bl	4cb0 <strcmp@plt>
    c354:	cmp	r0, #0
    c358:	beq	c484 <rb_init_netio+0x190>
    c35c:	ldr	r0, [pc, #448]	; c524 <rb_init_netio+0x230>
    c360:	mov	r1, r4
    c364:	add	r0, pc, r0
    c368:	bl	4cb0 <strcmp@plt>
    c36c:	cmp	r0, #0
    c370:	beq	c4c0 <rb_init_netio+0x1cc>
    c374:	ldr	r0, [pc, #428]	; c528 <rb_init_netio+0x234>
    c378:	mov	r1, r4
    c37c:	add	r0, pc, r0
    c380:	bl	4cb0 <strcmp@plt>
    c384:	cmp	r0, #0
    c388:	beq	c4d0 <rb_init_netio+0x1dc>
    c38c:	ldr	r0, [pc, #408]	; c52c <rb_init_netio+0x238>
    c390:	mov	r1, r4
    c394:	add	r0, pc, r0
    c398:	bl	4cb0 <strcmp@plt>
    c39c:	cmp	r0, #0
    c3a0:	beq	c4b0 <rb_init_netio+0x1bc>
    c3a4:	ldr	r0, [pc, #388]	; c530 <rb_init_netio+0x23c>
    c3a8:	mov	r1, r4
    c3ac:	add	r0, pc, r0
    c3b0:	bl	4cb0 <strcmp@plt>
    c3b4:	cmp	r0, #0
    c3b8:	beq	c4f4 <rb_init_netio+0x200>
    c3bc:	ldr	r0, [pc, #368]	; c534 <rb_init_netio+0x240>
    c3c0:	mov	r1, r4
    c3c4:	add	r0, pc, r0
    c3c8:	bl	4cb0 <strcmp@plt>
    c3cc:	cmp	r0, #0
    c3d0:	beq	c504 <rb_init_netio+0x210>
    c3d4:	ldr	r0, [pc, #348]	; c538 <rb_init_netio+0x244>
    c3d8:	mov	r1, r4
    c3dc:	add	r0, pc, r0
    c3e0:	bl	4cb0 <strcmp@plt>
    c3e4:	cmp	r0, #0
    c3e8:	beq	c4e4 <rb_init_netio+0x1f0>
    c3ec:	ldr	r0, [pc, #328]	; c53c <rb_init_netio+0x248>
    c3f0:	mov	r1, r4
    c3f4:	add	r0, pc, r0
    c3f8:	bl	4cb0 <strcmp@plt>
    c3fc:	cmp	r0, #0
    c400:	beq	c494 <rb_init_netio+0x1a0>
    c404:	bl	ab40 <try_kqueue>
    c408:	cmp	r0, #0
    c40c:	bne	c420 <rb_init_netio+0x12c>
    c410:	ldrd	r4, [sp]
    c414:	ldr	r6, [sp, #8]
    c418:	add	sp, sp, #12
    c41c:	pop	{pc}		; (ldr pc, [sp], #4)
    c420:	bl	ac14 <try_epoll>
    c424:	cmp	r0, #0
    c428:	beq	c410 <rb_init_netio+0x11c>
    c42c:	bl	ace8 <try_ports>
    c430:	cmp	r0, #0
    c434:	beq	c410 <rb_init_netio+0x11c>
    c438:	bl	adbc <try_devpoll>
    c43c:	cmp	r0, #0
    c440:	beq	c410 <rb_init_netio+0x11c>
    c444:	bl	ae6c <try_sigio>
    c448:	cmp	r0, #0
    c44c:	beq	c410 <rb_init_netio+0x11c>
    c450:	bl	af40 <try_poll>
    c454:	cmp	r0, #0
    c458:	beq	c410 <rb_init_netio+0x11c>
    c45c:	bl	aff0 <try_win32>
    c460:	cmp	r0, #0
    c464:	beq	c410 <rb_init_netio+0x11c>
    c468:	bl	b0a0 <try_select>
    c46c:	cmp	r0, #0
    c470:	beq	c410 <rb_init_netio+0x11c>
    c474:	ldr	r0, [pc, #196]	; c540 <rb_init_netio+0x24c>
    c478:	add	r0, pc, r0
    c47c:	bl	48f0 <rb_lib_log@plt>
    c480:	bl	4398 <abort@plt>
    c484:	bl	ac14 <try_epoll>
    c488:	cmp	r0, #0
    c48c:	bne	c3ec <rb_init_netio+0xf8>
    c490:	b	c410 <rb_init_netio+0x11c>
    c494:	bl	aff0 <try_win32>
    c498:	cmp	r0, #0
    c49c:	beq	c410 <rb_init_netio+0x11c>
    c4a0:	bl	ab40 <try_kqueue>
    c4a4:	cmp	r0, #0
    c4a8:	beq	c410 <rb_init_netio+0x11c>
    c4ac:	b	c420 <rb_init_netio+0x12c>
    c4b0:	bl	af40 <try_poll>
    c4b4:	cmp	r0, #0
    c4b8:	bne	c3ec <rb_init_netio+0xf8>
    c4bc:	b	c410 <rb_init_netio+0x11c>
    c4c0:	bl	ab40 <try_kqueue>
    c4c4:	cmp	r0, #0
    c4c8:	bne	c3ec <rb_init_netio+0xf8>
    c4cc:	b	c410 <rb_init_netio+0x11c>
    c4d0:	bl	ace8 <try_ports>
    c4d4:	cmp	r0, #0
    c4d8:	bne	c3ec <rb_init_netio+0xf8>
    c4dc:	b	c410 <rb_init_netio+0x11c>
    c4e0:	bl	495c <rb_outofmemory@plt>
    c4e4:	bl	b0a0 <try_select>
    c4e8:	cmp	r0, #0
    c4ec:	bne	c3ec <rb_init_netio+0xf8>
    c4f0:	b	c410 <rb_init_netio+0x11c>
    c4f4:	bl	adbc <try_devpoll>
    c4f8:	cmp	r0, #0
    c4fc:	bne	c3ec <rb_init_netio+0xf8>
    c500:	b	c410 <rb_init_netio+0x11c>
    c504:	bl	ae6c <try_sigio>
    c508:	cmp	r0, #0
    c50c:	bne	c3ec <rb_init_netio+0xf8>
    c510:	b	c410 <rb_init_netio+0x11c>
    c514:	.word	0x0000a7ec
    c518:	.word	0x0001ccdc
    c51c:	.word	0x000003bc
    c520:	.word	0x0000a6a8
    c524:	.word	0x0000a688
    c528:	.word	0x0000a680
    c52c:	.word	0x0000a680
    c530:	.word	0x0000a658
    c534:	.word	0x0000a648
    c538:	.word	0x0000a648
    c53c:	.word	0x0000a628
    c540:	.word	0x0000a690

0000c544 <rb_setselect>:
    c544:	ldr	ip, [pc, #20]	; c560 <rb_setselect+0x1c>
    c548:	push	{lr}		; (str lr, [sp, #-4]!)
    c54c:	add	ip, pc, ip
    c550:	ldr	lr, [ip, #28]
    c554:	mov	ip, lr
    c558:	pop	{lr}		; (ldr lr, [sp], #4)
    c55c:	bx	ip
    c560:	.word	0x0002f458

0000c564 <rb_close>:
    c564:	strd	r4, [sp, #-24]!	; 0xffffffe8
    c568:	subs	r4, r0, #0
    c56c:	strd	r6, [sp, #8]
    c570:	ldr	r6, [pc, #412]	; c714 <rb_close+0x1b0>
    c574:	str	r8, [sp, #16]
    c578:	str	lr, [sp, #20]
    c57c:	add	r6, pc, r6
    c580:	beq	c608 <rb_close+0xa4>
    c584:	ldrb	r5, [r4, #17]
    c588:	ldr	r8, [r4, #12]
    c58c:	ands	r7, r5, #16
    c590:	bne	c61c <rb_close+0xb8>
    c594:	mov	r3, #0
    c598:	mov	r1, #3
    c59c:	mov	r2, r3
    c5a0:	mov	r0, r4
    c5a4:	bl	447c <rb_setselect@plt>
    c5a8:	mov	r3, #0
    c5ac:	mov	r0, r4
    c5b0:	mov	r2, r3
    c5b4:	mov	r1, r3
    c5b8:	bl	43bc <rb_settimeout@plt>
    c5bc:	ldr	r0, [r4, #52]	; 0x34
    c5c0:	cmp	r0, #0
    c5c4:	beq	c5cc <rb_close+0x68>
    c5c8:	bl	46d4 <free@plt>
    c5cc:	ldr	r0, [r4, #48]	; 0x30
    c5d0:	cmp	r0, #0
    c5d4:	beq	c5dc <rb_close+0x78>
    c5d8:	bl	46d4 <free@plt>
    c5dc:	ldr	r0, [r4, #24]
    c5e0:	cmp	r0, #0
    c5e4:	beq	c5ec <rb_close+0x88>
    c5e8:	bl	46d4 <free@plt>
    c5ec:	tst	r5, #32
    c5f0:	bne	c64c <rb_close+0xe8>
    c5f4:	ldrb	r3, [r4, #16]
    c5f8:	tst	r3, #1
    c5fc:	bne	c660 <rb_close+0xfc>
    c600:	cmp	r7, #0
    c604:	bne	c62c <rb_close+0xc8>
    c608:	ldrd	r4, [sp]
    c60c:	ldrd	r6, [sp, #8]
    c610:	ldr	r8, [sp, #16]
    c614:	add	sp, sp, #20
    c618:	pop	{pc}		; (ldr pc, [sp], #4)
    c61c:	mov	r1, #0
    c620:	mov	r0, r8
    c624:	bl	45b4 <listen@plt>
    c628:	b	c594 <rb_close+0x30>
    c62c:	mov	r0, r8
    c630:	mov	r1, #2
    c634:	ldrd	r4, [sp]
    c638:	ldrd	r6, [sp, #8]
    c63c:	ldr	r8, [sp, #16]
    c640:	ldr	lr, [sp, #20]
    c644:	add	sp, sp, #24
    c648:	b	48d8 <shutdown@plt>
    c64c:	mov	r0, r4
    c650:	bl	dbc0 <rb_ssl_shutdown>
    c654:	ldrb	r3, [r4, #16]
    c658:	tst	r3, #1
    c65c:	beq	c600 <rb_close+0x9c>
    c660:	ldr	ip, [pc, #176]	; c718 <rb_close+0x1b4>
    c664:	ldrd	r0, [r4, #8]
    c668:	ldr	r2, [r4, #4]
    c66c:	ldr	ip, [r6, ip]
    c670:	asr	r3, r1, #24
    c674:	cmp	r0, #0
    c678:	eor	r3, r3, r1, asr #12
    c67c:	strne	r2, [r0, #4]
    c680:	ldrne	r2, [r4, #4]
    c684:	eor	r3, r3, r1
    c688:	ubfx	r3, r3, #0, #12
    c68c:	ldr	ip, [ip]
    c690:	add	r3, r3, r3, lsl #1
    c694:	lsl	r3, r3, #2
    c698:	add	r1, ip, r3
    c69c:	streq	r2, [r1, #4]
    c6a0:	cmp	r2, #0
    c6a4:	strne	r0, [r2, #8]
    c6a8:	ldr	r2, [pc, #108]	; c71c <rb_close+0x1b8>
    c6ac:	streq	r0, [ip, r3]
    c6b0:	mov	r3, #0
    c6b4:	str	r3, [r4, #4]
    c6b8:	add	r2, pc, r2
    c6bc:	ldr	r3, [r2, #100]	; 0x64
    c6c0:	cmp	r3, #0
    c6c4:	str	r3, [r4, #8]
    c6c8:	strne	r4, [r3, #4]
    c6cc:	beq	c704 <rb_close+0x1a0>
    c6d0:	ldr	r3, [r1, #8]
    c6d4:	ldr	r2, [pc, #68]	; c720 <rb_close+0x1bc>
    c6d8:	sub	r3, r3, #1
    c6dc:	add	r2, pc, r2
    c6e0:	str	r3, [r1, #8]
    c6e4:	ldrb	r3, [r4, #16]
    c6e8:	str	r4, [r2, #100]	; 0x64
    c6ec:	ldr	r1, [r2, #108]	; 0x6c
    c6f0:	bic	r3, r3, #1
    c6f4:	add	r1, r1, #1
    c6f8:	strb	r3, [r4, #16]
    c6fc:	str	r1, [r2, #108]	; 0x6c
    c700:	b	c600 <rb_close+0x9c>
    c704:	ldr	r3, [r2, #104]	; 0x68
    c708:	cmp	r3, #0
    c70c:	streq	r4, [r2, #104]	; 0x68
    c710:	b	c6d0 <rb_close+0x16c>
    c714:	.word	0x0001ca7c
    c718:	.word	0x000003bc
    c71c:	.word	0x0002f2ec
    c720:	.word	0x0002f2c8

0000c724 <rb_select>:
    c724:	strd	r4, [sp, #-32]!	; 0xffffffe0
    c728:	ldr	r5, [pc, #196]	; c7f4 <rb_select+0xd0>
    c72c:	add	r5, pc, r5
    c730:	ldr	r3, [r5, #32]
    c734:	strd	r6, [sp, #8]
    c738:	strd	r8, [sp, #16]
    c73c:	str	sl, [sp, #24]
    c740:	str	lr, [sp, #28]
    c744:	blx	r3
    c748:	ldr	r4, [r5, #100]	; 0x64
    c74c:	mov	r8, r0
    c750:	cmp	r4, #0
    c754:	beq	c7d8 <rb_select+0xb4>
    c758:	ldr	r9, [pc, #152]	; c7f8 <rb_select+0xd4>
    c75c:	mov	r7, r5
    c760:	ldr	r6, [r4, #8]
    c764:	add	r9, pc, r9
    c768:	ldr	r3, [r5, #96]	; 0x60
    c76c:	ldr	sl, [r4]
    c770:	sub	r3, r3, #1
    c774:	ldr	r0, [sl, #12]
    c778:	str	r3, [r5, #96]	; 0x60
    c77c:	bl	4914 <close@plt>
    c780:	ldrd	r2, [r4, #4]
    c784:	mov	r1, sl
    c788:	ldr	r0, [r7, #92]	; 0x5c
    c78c:	cmp	r3, #0
    c790:	strne	r2, [r3, #4]
    c794:	streq	r2, [r5, #104]	; 0x68
    c798:	ldr	r2, [r4, #4]
    c79c:	cmp	r2, #0
    c7a0:	strne	r3, [r2, #8]
    c7a4:	mov	r2, #0
    c7a8:	streq	r3, [r9, #100]	; 0x64
    c7ac:	ldr	r3, [r7, #108]	; 0x6c
    c7b0:	str	r2, [r4, #4]
    c7b4:	str	r2, [r4, #8]
    c7b8:	mov	r4, r6
    c7bc:	sub	r3, r3, #1
    c7c0:	str	r3, [r7, #108]	; 0x6c
    c7c4:	bl	48a8 <rb_bh_free@plt>
    c7c8:	cmp	r6, #0
    c7cc:	beq	c7d8 <rb_select+0xb4>
    c7d0:	ldr	r6, [r6, #8]
    c7d4:	b	c768 <rb_select+0x44>
    c7d8:	mov	r0, r8
    c7dc:	ldrd	r4, [sp]
    c7e0:	ldrd	r6, [sp, #8]
    c7e4:	ldrd	r8, [sp, #16]
    c7e8:	ldr	sl, [sp, #24]
    c7ec:	add	sp, sp, #28
    c7f0:	pop	{pc}		; (ldr pc, [sp], #4)
    c7f4:	.word	0x0002f278
    c7f8:	.word	0x0002f240

0000c7fc <rb_setup_fd>:
    c7fc:	ldr	r3, [pc, #8]	; c80c <rb_setup_fd+0x10>
    c800:	add	r3, pc, r3
    c804:	ldr	r3, [r3, #36]	; 0x24
    c808:	bx	r3
    c80c:	.word	0x0002f1a4

0000c810 <rb_set_nb>:
    c810:	subs	r3, r0, #0
    c814:	beq	c87c <rb_set_nb+0x6c>
    c818:	str	r4, [sp, #-8]!
    c81c:	ldr	r4, [r3, #12]
    c820:	str	lr, [sp, #4]
    c824:	bl	4b00 <rb_setup_fd@plt>
    c828:	cmp	r0, #0
    c82c:	beq	c83c <rb_set_nb+0x2c>
    c830:	ldr	r4, [sp]
    c834:	add	sp, sp, #4
    c838:	pop	{pc}		; (ldr pc, [sp], #4)
    c83c:	mov	r2, r0
    c840:	mov	r1, #3
    c844:	mov	r0, r4
    c848:	bl	4bd8 <fcntl@plt>
    c84c:	cmn	r0, #1
    c850:	moveq	r0, #0
    c854:	beq	c830 <rb_set_nb+0x20>
    c858:	orr	r2, r0, #2048	; 0x800
    c85c:	mov	r1, #4
    c860:	mov	r0, r4
    c864:	bl	4bd8 <fcntl@plt>
    c868:	adds	r0, r0, #1
    c86c:	ldr	r4, [sp]
    c870:	add	sp, sp, #4
    c874:	movne	r0, #1
    c878:	pop	{pc}		; (ldr pc, [sp], #4)
    c87c:	mov	r0, #0
    c880:	bx	lr

0000c884 <rb_accept_tryaccept>:
    c884:	strd	r4, [sp, #-32]!	; 0xffffffe0
    c888:	mov	r4, r0
    c88c:	strd	r6, [sp, #8]
    c890:	strd	r8, [sp, #16]
    c894:	ldr	r9, [pc, #424]	; ca44 <rb_accept_tryaccept+0x1c0>
    c898:	str	sl, [sp, #24]
    c89c:	ldr	sl, [pc, #420]	; ca48 <rb_accept_tryaccept+0x1c4>
    c8a0:	str	lr, [sp, #28]
    c8a4:	sub	sp, sp, #160	; 0xa0
    c8a8:	add	r5, sp, #32
    c8ac:	add	r8, sp, #12
    c8b0:	add	r9, pc, r9
    c8b4:	add	sl, pc, sl
    c8b8:	mov	r6, #128	; 0x80
    c8bc:	mov	r1, #0
    c8c0:	mov	r2, r6
    c8c4:	mov	r0, r5
    c8c8:	bl	4608 <memset@plt>
    c8cc:	mov	r2, r8
    c8d0:	mov	r1, r5
    c8d4:	ldr	r0, [r4, #12]
    c8d8:	str	r6, [sp, #12]
    c8dc:	bl	474c <accept@plt>
    c8e0:	subs	r6, r0, #0
    c8e4:	blt	c9f8 <rb_accept_tryaccept+0x174>
    c8e8:	ldrb	r1, [r4, #17]
    c8ec:	mov	r2, r9
    c8f0:	bic	r1, r1, #127	; 0x7f
    c8f4:	orr	r1, r1, #4
    c8f8:	bl	4a58 <rb_open@plt>
    c8fc:	subs	r7, r0, #0
    c900:	beq	c9dc <rb_accept_tryaccept+0x158>
    c904:	bl	45fc <rb_set_nb@plt>
    c908:	cmp	r0, #0
    c90c:	beq	ca2c <rb_accept_tryaccept+0x1a8>
    c910:	ldrh	r3, [sp, #32]
    c914:	cmp	r3, #10
    c918:	beq	c97c <rb_accept_tryaccept+0xf8>
    c91c:	ldr	r0, [r4, #52]	; 0x34
    c920:	ldr	r3, [sp, #12]
    c924:	ldr	r6, [r0, #136]	; 0x88
    c928:	cmp	r6, #0
    c92c:	beq	c950 <rb_accept_tryaccept+0xcc>
    c930:	mov	r2, r3
    c934:	mov	r1, r5
    c938:	ldr	r3, [r0, #140]	; 0x8c
    c93c:	mov	r0, r7
    c940:	blx	r6
    c944:	cmp	r0, #0
    c948:	beq	c8b8 <rb_accept_tryaccept+0x34>
    c94c:	ldr	r3, [sp, #12]
    c950:	ldrb	r1, [r4, #17]
    c954:	ands	r1, r1, #32
    c958:	bne	c9c8 <rb_accept_tryaccept+0x144>
    c95c:	ldr	ip, [r4, #52]	; 0x34
    c960:	mov	r0, r7
    c964:	mov	r2, r5
    c968:	ldr	lr, [ip, #140]	; 0x8c
    c96c:	str	lr, [sp]
    c970:	ldr	r6, [ip, #132]	; 0x84
    c974:	blx	r6
    c978:	b	c8b8 <rb_accept_tryaccept+0x34>
    c97c:	ldrd	r2, [sp, #40]	; 0x28
    c980:	orrs	r3, r2, r3
    c984:	bne	c91c <rb_accept_tryaccept+0x98>
    c988:	ldr	r3, [sp, #48]	; 0x30
    c98c:	cmn	r3, #65536	; 0x10000
    c990:	bne	c91c <rb_accept_tryaccept+0x98>
    c994:	ldrh	r2, [sp, #34]	; 0x22
    c998:	mov	ip, #2
    c99c:	mov	r0, #0
    c9a0:	mov	r1, #0
    c9a4:	ldr	r3, [sp, #52]	; 0x34
    c9a8:	strh	ip, [sp, #16]
    c9ac:	strd	r0, [r5, #8]
    c9b0:	strh	r2, [sp, #18]
    c9b4:	str	r3, [sp, #20]
    c9b8:	ldrd	r2, [sp, #16]
    c9bc:	strd	r0, [sp, #24]
    c9c0:	strd	r2, [r5]
    c9c4:	b	c91c <rb_accept_tryaccept+0x98>
    c9c8:	mov	r1, r7
    c9cc:	mov	r2, r5
    c9d0:	mov	r0, r4
    c9d4:	bl	e6c8 <rb_ssl_accept_setup>
    c9d8:	b	c8b8 <rb_accept_tryaccept+0x34>
    c9dc:	ldr	r0, [pc, #104]	; ca4c <rb_accept_tryaccept+0x1c8>
    c9e0:	mov	r1, r6
    c9e4:	add	r0, pc, r0
    c9e8:	bl	48f0 <rb_lib_log@plt>
    c9ec:	mov	r0, r6
    c9f0:	bl	4914 <close@plt>
    c9f4:	b	c8b8 <rb_accept_tryaccept+0x34>
    c9f8:	ldr	r2, [pc, #80]	; ca50 <rb_accept_tryaccept+0x1cc>
    c9fc:	mov	r0, r4
    ca00:	mov	r3, #0
    ca04:	mov	r1, #1
    ca08:	add	r2, pc, r2
    ca0c:	bl	447c <rb_setselect@plt>
    ca10:	add	sp, sp, #160	; 0xa0
    ca14:	ldrd	r4, [sp]
    ca18:	ldrd	r6, [sp, #8]
    ca1c:	ldrd	r8, [sp, #16]
    ca20:	ldr	sl, [sp, #24]
    ca24:	add	sp, sp, #28
    ca28:	pop	{pc}		; (ldr pc, [sp], #4)
    ca2c:	mov	r0, sl
    ca30:	ldr	r1, [r7, #12]
    ca34:	bl	48f0 <rb_lib_log@plt>
    ca38:	mov	r0, r7
    ca3c:	bl	4848 <rb_close@plt>
    ca40:	b	c910 <rb_accept_tryaccept+0x8c>
    ca44:	.word	0x0000a294
    ca48:	.word	0x0000a2ec
    ca4c:	.word	0x0000a174
    ca50:	.word	0xfffffe74

0000ca54 <rb_accept_tcp>:
    ca54:	strd	r4, [sp, #-24]!	; 0xffffffe8
    ca58:	subs	r4, r0, #0
    ca5c:	strd	r6, [sp, #8]
    ca60:	str	r8, [sp, #16]
    ca64:	str	lr, [sp, #20]
    ca68:	beq	cabc <rb_accept_tcp+0x68>
    ca6c:	mov	r6, r1
    ca70:	mov	r0, #1
    ca74:	mov	r1, #144	; 0x90
    ca78:	mov	r5, r3
    ca7c:	mov	r7, r2
    ca80:	bl	45c0 <calloc@plt>
    ca84:	subs	ip, r0, #0
    ca88:	beq	cad0 <rb_accept_tcp+0x7c>
    ca8c:	mov	r0, r4
    ca90:	mov	r1, #0
    ca94:	ldr	r8, [sp, #16]
    ca98:	ldr	lr, [sp, #20]
    ca9c:	str	ip, [r4, #52]	; 0x34
    caa0:	str	r7, [ip, #132]	; 0x84
    caa4:	str	r6, [ip, #136]	; 0x88
    caa8:	str	r5, [ip, #140]	; 0x8c
    caac:	ldrd	r4, [sp]
    cab0:	ldrd	r6, [sp, #8]
    cab4:	add	sp, sp, #24
    cab8:	b	c884 <rb_accept_tryaccept>
    cabc:	ldrd	r4, [sp]
    cac0:	ldrd	r6, [sp, #8]
    cac4:	ldr	r8, [sp, #16]
    cac8:	add	sp, sp, #20
    cacc:	pop	{pc}		; (ldr pc, [sp], #4)
    cad0:	bl	495c <rb_outofmemory@plt>

0000cad4 <rb_socketpair>:
    cad4:	ldr	ip, [pc, #348]	; cc38 <rb_socketpair+0x164>
    cad8:	strd	r4, [sp, #-20]!	; 0xffffffec
    cadc:	mov	r4, r3
    cae0:	add	ip, pc, ip
    cae4:	mov	r3, ip
    cae8:	ldr	ip, [pc, #332]	; cc3c <rb_socketpair+0x168>
    caec:	add	ip, pc, ip
    caf0:	ldr	ip, [ip, #96]	; 0x60
    caf4:	strd	r6, [sp, #8]
    caf8:	str	lr, [sp, #16]
    cafc:	sub	sp, sp, #12
    cb00:	ldr	lr, [pc, #312]	; cc40 <rb_socketpair+0x16c>
    cb04:	ldr	r5, [sp, #32]
    cb08:	ldr	lr, [r3, lr]
    cb0c:	ldr	r3, [lr]
    cb10:	cmp	ip, r3
    cb14:	bge	cc18 <rb_socketpair+0x144>
    cb18:	mov	r3, sp
    cb1c:	bl	453c <socketpair@plt>
    cb20:	subs	r6, r0, #0
    cb24:	bne	cc10 <rb_socketpair+0x13c>
    cb28:	mov	r1, #4
    cb2c:	ldr	r0, [sp]
    cb30:	ldr	r2, [sp, #36]	; 0x24
    cb34:	bl	4a58 <rb_open@plt>
    cb38:	mov	r1, #4
    cb3c:	str	r0, [r4]
    cb40:	ldr	r0, [sp, #4]
    cb44:	ldr	r2, [sp, #36]	; 0x24
    cb48:	bl	4a58 <rb_open@plt>
    cb4c:	str	r0, [r5]
    cb50:	mov	r3, r0
    cb54:	ldr	r2, [r4]
    cb58:	cmp	r2, #0
    cb5c:	beq	cc04 <rb_socketpair+0x130>
    cb60:	cmp	r3, #0
    cb64:	mov	r0, r2
    cb68:	beq	cc2c <rb_socketpair+0x158>
    cb6c:	bl	45fc <rb_set_nb@plt>
    cb70:	cmp	r0, #0
    cb74:	beq	cba0 <rb_socketpair+0xcc>
    cb78:	ldr	r0, [r5]
    cb7c:	bl	45fc <rb_set_nb@plt>
    cb80:	cmp	r0, #0
    cb84:	beq	cbdc <rb_socketpair+0x108>
    cb88:	mov	r0, r6
    cb8c:	add	sp, sp, #12
    cb90:	ldrd	r4, [sp]
    cb94:	ldrd	r6, [sp, #8]
    cb98:	add	sp, sp, #16
    cb9c:	pop	{pc}		; (ldr pc, [sp], #4)
    cba0:	bl	4cbc <__errno_location@plt>
    cba4:	ldr	r0, [r0]
    cba8:	mvn	r6, #0
    cbac:	ldr	r7, [sp]
    cbb0:	bl	4374 <strerror@plt>
    cbb4:	mov	r2, r0
    cbb8:	ldr	r0, [pc, #132]	; cc44 <rb_socketpair+0x170>
    cbbc:	mov	r1, r7
    cbc0:	add	r0, pc, r0
    cbc4:	bl	48f0 <rb_lib_log@plt>
    cbc8:	ldr	r0, [r4]
    cbcc:	bl	4848 <rb_close@plt>
    cbd0:	ldr	r0, [r5]
    cbd4:	bl	4848 <rb_close@plt>
    cbd8:	b	cb88 <rb_socketpair+0xb4>
    cbdc:	bl	4cbc <__errno_location@plt>
    cbe0:	ldr	r0, [r0]
    cbe4:	mvn	r6, #0
    cbe8:	ldr	r7, [sp, #4]
    cbec:	bl	4374 <strerror@plt>
    cbf0:	mov	r2, r0
    cbf4:	ldr	r0, [pc, #76]	; cc48 <rb_socketpair+0x174>
    cbf8:	mov	r1, r7
    cbfc:	add	r0, pc, r0
    cc00:	b	cbc4 <rb_socketpair+0xf0>
    cc04:	cmp	r0, #0
    cc08:	beq	cc10 <rb_socketpair+0x13c>
    cc0c:	bl	4848 <rb_close@plt>
    cc10:	mvn	r6, #0
    cc14:	b	cb88 <rb_socketpair+0xb4>
    cc18:	bl	4cbc <__errno_location@plt>
    cc1c:	mov	r3, #23
    cc20:	mvn	r6, #0
    cc24:	str	r3, [r0]
    cc28:	b	cb88 <rb_socketpair+0xb4>
    cc2c:	mvn	r6, #0
    cc30:	bl	4848 <rb_close@plt>
    cc34:	b	cb88 <rb_socketpair+0xb4>
    cc38:	.word	0x0001c518
    cc3c:	.word	0x0002eeb8
    cc40:	.word	0x0000039c
    cc44:	.word	0x0000a00c
    cc48:	.word	0x00009fd0

0000cc4c <rb_pipe>:
    cc4c:	ldr	r3, [pc, #296]	; cd7c <rb_pipe+0x130>
    cc50:	strd	r4, [sp, #-16]!
    cc54:	mov	r5, r1
    cc58:	ldr	r1, [pc, #288]	; cd80 <rb_pipe+0x134>
    cc5c:	str	r6, [sp, #8]
    cc60:	mov	r6, r2
    cc64:	ldr	r2, [pc, #280]	; cd84 <rb_pipe+0x138>
    cc68:	add	r3, pc, r3
    cc6c:	str	lr, [sp, #12]
    cc70:	sub	sp, sp, #8
    cc74:	ldr	r1, [r3, r1]
    cc78:	add	r2, pc, r2
    cc7c:	ldr	r2, [r2, #96]	; 0x60
    cc80:	ldr	r3, [r1]
    cc84:	cmp	r2, r3
    cc88:	bge	cd68 <rb_pipe+0x11c>
    cc8c:	mov	r4, r0
    cc90:	mov	r0, sp
    cc94:	bl	4c5c <pipe@plt>
    cc98:	cmn	r0, #1
    cc9c:	mov	r3, r0
    cca0:	beq	ccf0 <rb_pipe+0xa4>
    cca4:	mov	r2, r6
    cca8:	mov	r1, #8
    ccac:	ldr	r0, [sp]
    ccb0:	bl	4a58 <rb_open@plt>
    ccb4:	mov	r2, r6
    ccb8:	mov	r1, #8
    ccbc:	str	r0, [r4]
    ccc0:	ldr	r0, [sp, #4]
    ccc4:	bl	4a58 <rb_open@plt>
    ccc8:	str	r0, [r5]
    cccc:	ldr	r0, [r4]
    ccd0:	bl	45fc <rb_set_nb@plt>
    ccd4:	cmp	r0, #0
    ccd8:	beq	cd08 <rb_pipe+0xbc>
    ccdc:	ldr	r0, [r5]
    cce0:	bl	45fc <rb_set_nb@plt>
    cce4:	cmp	r0, #0
    cce8:	movne	r3, #0
    ccec:	beq	cd44 <rb_pipe+0xf8>
    ccf0:	mov	r0, r3
    ccf4:	add	sp, sp, #8
    ccf8:	ldrd	r4, [sp]
    ccfc:	ldr	r6, [sp, #8]
    cd00:	add	sp, sp, #12
    cd04:	pop	{pc}		; (ldr pc, [sp], #4)
    cd08:	bl	4cbc <__errno_location@plt>
    cd0c:	ldr	r0, [r0]
    cd10:	ldr	r6, [sp]
    cd14:	bl	4374 <strerror@plt>
    cd18:	mov	r2, r0
    cd1c:	ldr	r0, [pc, #100]	; cd88 <rb_pipe+0x13c>
    cd20:	mov	r1, r6
    cd24:	add	r0, pc, r0
    cd28:	bl	48f0 <rb_lib_log@plt>
    cd2c:	ldr	r0, [r4]
    cd30:	bl	4848 <rb_close@plt>
    cd34:	ldr	r0, [r5]
    cd38:	bl	4848 <rb_close@plt>
    cd3c:	mvn	r3, #0
    cd40:	b	ccf0 <rb_pipe+0xa4>
    cd44:	bl	4cbc <__errno_location@plt>
    cd48:	ldr	r0, [r0]
    cd4c:	ldr	r6, [sp, #4]
    cd50:	bl	4374 <strerror@plt>
    cd54:	mov	r2, r0
    cd58:	ldr	r0, [pc, #44]	; cd8c <rb_pipe+0x140>
    cd5c:	mov	r1, r6
    cd60:	add	r0, pc, r0
    cd64:	b	cd28 <rb_pipe+0xdc>
    cd68:	bl	4cbc <__errno_location@plt>
    cd6c:	mov	r2, #23
    cd70:	mvn	r3, #0
    cd74:	str	r2, [r0]
    cd78:	b	ccf0 <rb_pipe+0xa4>
    cd7c:	.word	0x0001c390
    cd80:	.word	0x0000039c
    cd84:	.word	0x0002ed2c
    cd88:	.word	0x00009ea8
    cd8c:	.word	0x00009e6c

0000cd90 <rb_socket>:
    cd90:	ldr	ip, [pc, #356]	; cefc <rb_socket+0x16c>
    cd94:	strd	r4, [sp, #-16]!
    cd98:	mov	r4, r3
    cd9c:	str	r6, [sp, #8]
    cda0:	str	lr, [sp, #12]
    cda4:	sub	sp, sp, #16
    cda8:	ldr	lr, [pc, #336]	; cf00 <rb_socket+0x170>
    cdac:	add	ip, pc, ip
    cdb0:	mov	r3, ip
    cdb4:	ldr	ip, [pc, #328]	; cf04 <rb_socket+0x174>
    cdb8:	ldr	lr, [r3, lr]
    cdbc:	add	ip, pc, ip
    cdc0:	ldr	ip, [ip, #96]	; 0x60
    cdc4:	ldr	r3, [lr]
    cdc8:	cmp	ip, r3
    cdcc:	bge	ce84 <rb_socket+0xf4>
    cdd0:	mov	r5, r0
    cdd4:	bl	4770 <socket@plt>
    cdd8:	subs	r6, r0, #0
    cddc:	blt	ce98 <rb_socket+0x108>
    cde0:	cmp	r5, #10
    cde4:	beq	ce24 <rb_socket+0x94>
    cde8:	mov	r2, r4
    cdec:	mov	r1, #4
    cdf0:	mov	r0, r6
    cdf4:	bl	4a58 <rb_open@plt>
    cdf8:	subs	r4, r0, #0
    cdfc:	beq	ced0 <rb_socket+0x140>
    ce00:	bl	45fc <rb_set_nb@plt>
    ce04:	subs	r5, r0, #0
    ce08:	beq	cea0 <rb_socket+0x110>
    ce0c:	mov	r0, r4
    ce10:	add	sp, sp, #16
    ce14:	ldrd	r4, [sp]
    ce18:	ldr	r6, [sp, #8]
    ce1c:	add	sp, sp, #12
    ce20:	pop	{pc}		; (ldr pc, [sp], #4)
    ce24:	mov	r1, #4
    ce28:	mov	ip, #1
    ce2c:	add	r3, sp, #12
    ce30:	mov	r2, #26
    ce34:	str	r1, [sp]
    ce38:	mov	r1, #41	; 0x29
    ce3c:	str	ip, [sp, #12]
    ce40:	bl	4c74 <setsockopt@plt>
    ce44:	cmn	r0, #1
    ce48:	bne	cde8 <rb_socket+0x58>
    ce4c:	bl	4cbc <__errno_location@plt>
    ce50:	ldr	r0, [r0]
    ce54:	mov	r4, #0
    ce58:	ldr	r5, [sp, #12]
    ce5c:	bl	4374 <strerror@plt>
    ce60:	mov	r3, r0
    ce64:	ldr	r0, [pc, #156]	; cf08 <rb_socket+0x178>
    ce68:	mov	r2, r6
    ce6c:	mov	r1, r5
    ce70:	add	r0, pc, r0
    ce74:	bl	48f0 <rb_lib_log@plt>
    ce78:	mov	r0, r6
    ce7c:	bl	4914 <close@plt>
    ce80:	b	ce0c <rb_socket+0x7c>
    ce84:	bl	4cbc <__errno_location@plt>
    ce88:	mov	r3, #23
    ce8c:	mov	r4, #0
    ce90:	str	r3, [r0]
    ce94:	b	ce0c <rb_socket+0x7c>
    ce98:	mov	r4, #0
    ce9c:	b	ce0c <rb_socket+0x7c>
    cea0:	bl	4cbc <__errno_location@plt>
    cea4:	ldr	r0, [r0]
    cea8:	bl	4374 <strerror@plt>
    ceac:	mov	r2, r0
    ceb0:	ldr	r0, [pc, #84]	; cf0c <rb_socket+0x17c>
    ceb4:	mov	r1, r6
    ceb8:	add	r0, pc, r0
    cebc:	bl	48f0 <rb_lib_log@plt>
    cec0:	mov	r0, r4
    cec4:	mov	r4, r5
    cec8:	bl	4848 <rb_close@plt>
    cecc:	b	ce0c <rb_socket+0x7c>
    ced0:	bl	4cbc <__errno_location@plt>
    ced4:	ldr	r0, [r0]
    ced8:	bl	4374 <strerror@plt>
    cedc:	mov	r2, r0
    cee0:	ldr	r0, [pc, #40]	; cf10 <rb_socket+0x180>
    cee4:	mov	r1, r6
    cee8:	add	r0, pc, r0
    ceec:	bl	48f0 <rb_lib_log@plt>
    cef0:	mov	r0, r6
    cef4:	bl	4914 <close@plt>
    cef8:	b	ce0c <rb_socket+0x7c>
    cefc:	.word	0x0001c24c
    cf00:	.word	0x0000039c
    cf04:	.word	0x0002ebe8
    cf08:	.word	0x00009d8c
    cf0c:	.word	0x00009d14
    cf10:	.word	0x00009d54

0000cf14 <rb_ignore_errno>:
    cf14:	cmp	r0, #85	; 0x55
    cf18:	beq	cf50 <rb_ignore_errno+0x3c>
    cf1c:	bgt	cf38 <rb_ignore_errno+0x24>
    cf20:	cmp	r0, #4
    cf24:	beq	cf50 <rb_ignore_errno+0x3c>
    cf28:	sub	r0, r0, #11
    cf2c:	clz	r0, r0
    cf30:	lsr	r0, r0, #5
    cf34:	bx	lr
    cf38:	cmp	r0, #105	; 0x69
    cf3c:	beq	cf50 <rb_ignore_errno+0x3c>
    cf40:	sub	r0, r0, #115	; 0x73
    cf44:	clz	r0, r0
    cf48:	lsr	r0, r0, #5
    cf4c:	bx	lr
    cf50:	mov	r0, #1
    cf54:	bx	lr

0000cf58 <rb_connect_tcp>:
    cf58:	strd	r4, [sp, #-32]!	; 0xffffffe0
    cf5c:	subs	r4, r0, #0
    cf60:	strd	r6, [sp, #8]
    cf64:	strd	r8, [sp, #16]
    cf68:	str	sl, [sp, #24]
    cf6c:	str	lr, [sp, #28]
    cf70:	ldrd	r8, [sp, #32]
    cf74:	beq	d098 <rb_connect_tcp+0x140>
    cf78:	mov	r7, r1
    cf7c:	mov	r0, #1
    cf80:	mov	r1, #268	; 0x10c
    cf84:	mov	r6, r3
    cf88:	mov	r5, r2
    cf8c:	bl	45c0 <calloc@plt>
    cf90:	subs	ip, r0, #0
    cf94:	beq	d0b8 <rb_connect_tcp+0x160>
    cf98:	mov	r1, r7
    cf9c:	add	r0, ip, #128	; 0x80
    cfa0:	str	ip, [r4, #48]	; 0x30
    cfa4:	mov	r2, #128	; 0x80
    cfa8:	str	r6, [ip, #260]	; 0x104
    cfac:	str	r8, [ip, #264]	; 0x108
    cfb0:	bl	47e8 <memcpy@plt>
    cfb4:	cmp	r5, #0
    cfb8:	beq	cfe8 <rb_connect_tcp+0x90>
    cfbc:	ldrh	r3, [r5]
    cfc0:	mov	r1, r5
    cfc4:	ldr	r0, [r4, #12]
    cfc8:	cmp	r3, #2
    cfcc:	moveq	r2, #16
    cfd0:	movne	r2, #28
    cfd4:	bl	48e4 <bind@plt>
    cfd8:	cmp	r0, #0
    cfdc:	movlt	r0, r4
    cfe0:	movlt	r1, #1
    cfe4:	blt	d030 <rb_connect_tcp+0xd8>
    cfe8:	ldr	r2, [pc, #204]	; d0bc <rb_connect_tcp+0x164>
    cfec:	mov	r1, r9
    cff0:	mov	r3, #0
    cff4:	mov	r0, r4
    cff8:	add	r2, pc, r2
    cffc:	bl	43bc <rb_settimeout@plt>
    d000:	ldr	r0, [r4, #12]
    d004:	ldr	r1, [r4, #48]	; 0x30
    d008:	ldrh	r3, [r1, #128]	; 0x80
    d00c:	add	r1, r1, #128	; 0x80
    d010:	cmp	r3, #2
    d014:	moveq	r2, #16
    d018:	movne	r2, #28
    d01c:	bl	43a4 <connect@plt>
    d020:	cmp	r0, #0
    d024:	blt	d04c <rb_connect_tcp+0xf4>
    d028:	mov	r0, r4
    d02c:	mov	r1, #0
    d030:	ldrd	r4, [sp]
    d034:	ldrd	r6, [sp, #8]
    d038:	ldrd	r8, [sp, #16]
    d03c:	ldr	sl, [sp, #24]
    d040:	ldr	lr, [sp, #28]
    d044:	add	sp, sp, #32
    d048:	b	b3b4 <rb_connect_callback>
    d04c:	bl	4cbc <__errno_location@plt>
    d050:	ldr	r0, [r0]
    d054:	cmp	r0, #106	; 0x6a
    d058:	beq	d028 <rb_connect_tcp+0xd0>
    d05c:	bl	43b0 <rb_ignore_errno@plt>
    d060:	cmp	r0, #0
    d064:	mov	r0, r4
    d068:	beq	d0b0 <rb_connect_tcp+0x158>
    d06c:	ldr	r2, [pc, #76]	; d0c0 <rb_connect_tcp+0x168>
    d070:	mov	r3, #0
    d074:	mov	r1, #2
    d078:	ldrd	r4, [sp]
    d07c:	ldrd	r6, [sp, #8]
    d080:	add	r2, pc, r2
    d084:	ldrd	r8, [sp, #16]
    d088:	ldr	sl, [sp, #24]
    d08c:	ldr	lr, [sp, #28]
    d090:	add	sp, sp, #32
    d094:	b	447c <rb_setselect@plt>
    d098:	ldrd	r4, [sp]
    d09c:	ldrd	r6, [sp, #8]
    d0a0:	ldrd	r8, [sp, #16]
    d0a4:	ldr	sl, [sp, #24]
    d0a8:	add	sp, sp, #28
    d0ac:	pop	{pc}		; (ldr pc, [sp], #4)
    d0b0:	mov	r1, #4
    d0b4:	b	d030 <rb_connect_tcp+0xd8>
    d0b8:	bl	495c <rb_outofmemory@plt>
    d0bc:	.word	0xffffe508
    d0c0:	.word	0xffffe3d8

0000d0c4 <rb_recv_fd_buf>:
    d0c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
    d0c8:	mov	r4, r3
    d0cc:	mov	r5, #0
    d0d0:	strd	r6, [sp, #8]
    d0d4:	strd	r8, [sp, #16]
    d0d8:	strd	sl, [sp, #24]
    d0dc:	add	fp, sp, #32
    d0e0:	str	lr, [sp, #32]
    d0e4:	sub	sp, sp, #140	; 0x8c
    d0e8:	sub	r3, fp, #160	; 0xa0
    d0ec:	ldr	r8, [fp, #4]
    d0f0:	str	r1, [fp, #-160]	; 0xffffff60
    d0f4:	str	r2, [fp, #-156]	; 0xffffff64
    d0f8:	str	r5, [fp, #-152]	; 0xffffff68
    d0fc:	str	r3, [fp, #-144]	; 0xffffff70
    d100:	mov	r3, #1
    d104:	lsl	r2, r8, #2
    d108:	str	r5, [fp, #-148]	; 0xffffff6c
    d10c:	str	r3, [fp, #-140]	; 0xffffff74
    d110:	add	r1, r2, #19
    d114:	add	r2, r2, #12
    d118:	bic	r1, r1, #7
    d11c:	sub	sp, sp, r1
    d120:	str	r5, [fp, #-128]	; 0xffffff80
    d124:	str	sp, [fp, #-136]	; 0xffffff78
    d128:	str	r2, [fp, #-132]	; 0xffffff7c
    d12c:	bl	44b8 <rb_get_fd@plt>
    d130:	mov	r2, r5
    d134:	sub	r1, fp, #152	; 0x98
    d138:	bl	4b0c <recvmsg@plt>
    d13c:	subs	r7, r0, #0
    d140:	ble	d158 <rb_recv_fd_buf+0x94>
    d144:	ldr	r3, [fp, #-132]	; 0xffffff7c
    d148:	cmp	r3, r5
    d14c:	bne	d178 <rb_recv_fd_buf+0xb4>
    d150:	mov	r3, #0
    d154:	str	r3, [r4]
    d158:	mov	r0, r7
    d15c:	sub	sp, fp, #32
    d160:	ldrd	r4, [sp]
    d164:	ldrd	r6, [sp, #8]
    d168:	ldrd	r8, [sp, #16]
    d16c:	ldrd	sl, [sp, #24]
    d170:	add	sp, sp, #32
    d174:	pop	{pc}		; (ldr pc, [sp], #4)
    d178:	ldr	r5, [fp, #-136]	; 0xffffff78
    d17c:	cmp	r5, #0
    d180:	cmpne	r3, #11
    d184:	bls	d150 <rb_recv_fd_buf+0x8c>
    d188:	ldr	r6, [r5]
    d18c:	sub	r6, r6, #12
    d190:	lsr	r6, r6, #2
    d194:	cmp	r6, r8
    d198:	movge	r6, r8
    d19c:	cmp	r6, #0
    d1a0:	ble	d158 <rb_recv_fd_buf+0x94>
    d1a4:	ldr	r3, [pc, #176]	; d25c <rb_recv_fd_buf+0x198>
    d1a8:	add	r5, r5, #8
    d1ac:	add	r6, r4, r6, lsl #2
    d1b0:	sub	r8, fp, #124	; 0x7c
    d1b4:	ldr	r9, [pc, #164]	; d260 <rb_recv_fd_buf+0x19c>
    d1b8:	add	r3, pc, r3
    d1bc:	str	r3, [fp, #-168]	; 0xffffff58
    d1c0:	add	r9, pc, r9
    d1c4:	ldr	r3, [pc, #152]	; d264 <rb_recv_fd_buf+0x1a0>
    d1c8:	add	r3, pc, r3
    d1cc:	str	r3, [fp, #-172]	; 0xffffff54
    d1d0:	b	d210 <rb_recv_fd_buf+0x14c>
    d1d4:	ldr	r2, [pc, #140]	; d268 <rb_recv_fd_buf+0x1a4>
    d1d8:	cmp	r0, #4096	; 0x1000
    d1dc:	mov	r1, #64	; 0x40
    d1e0:	add	r2, pc, r2
    d1e4:	beq	d250 <rb_recv_fd_buf+0x18c>
    d1e8:	cmp	r0, #32768	; 0x8000
    d1ec:	bne	d1fc <rb_recv_fd_buf+0x138>
    d1f0:	ldr	r2, [pc, #116]	; d26c <rb_recv_fd_buf+0x1a8>
    d1f4:	mov	r1, #2
    d1f8:	add	r2, pc, r2
    d1fc:	mov	r0, sl
    d200:	bl	4a58 <rb_open@plt>
    d204:	str	r0, [r4], #4
    d208:	cmp	r4, r6
    d20c:	beq	d158 <rb_recv_fd_buf+0x94>
    d210:	ldr	sl, [r5, #4]!
    d214:	mov	r2, r8
    d218:	mov	r0, #3
    d21c:	mov	r1, sl
    d220:	bl	4b30 <__fxstat@plt>
    d224:	cmp	r0, #0
    d228:	mov	r2, r9
    d22c:	movne	r1, #64	; 0x40
    d230:	bne	d1fc <rb_recv_fd_buf+0x138>
    d234:	ldr	r0, [fp, #-108]	; 0xffffff94
    d238:	and	r0, r0, #61440	; 0xf000
    d23c:	cmp	r0, #49152	; 0xc000
    d240:	bne	d1d4 <rb_recv_fd_buf+0x110>
    d244:	mov	r1, #4
    d248:	ldr	r2, [fp, #-168]	; 0xffffff58
    d24c:	b	d1fc <rb_recv_fd_buf+0x138>
    d250:	mov	r1, #8
    d254:	ldr	r2, [fp, #-172]	; 0xffffff54
    d258:	b	d1fc <rb_recv_fd_buf+0x138>
    d25c:	.word	0x00009adc
    d260:	.word	0x00009ac4
    d264:	.word	0x00009ab0
    d268:	.word	0x00009aa4
    d26c:	.word	0x00009aac

0000d270 <rb_send_fd_buf>:
    d270:	strd	r4, [sp, #-36]!	; 0xffffffdc
    d274:	mov	ip, #0
    d278:	mov	r4, #48	; 0x30
    d27c:	strd	r6, [sp, #8]
    d280:	mov	r7, r0
    d284:	strd	r8, [sp, #16]
    d288:	strd	sl, [sp, #24]
    d28c:	add	fp, sp, #32
    d290:	str	lr, [sp, #32]
    d294:	sub	sp, sp, #44	; 0x2c
    d298:	sub	r6, fp, #64	; 0x40
    d29c:	ldr	lr, [fp, #4]
    d2a0:	strb	r4, [fp, #-73]	; 0xffffffb7
    d2a4:	str	ip, [fp, #-64]	; 0xffffffc0
    d2a8:	str	ip, [r6, #4]
    d2ac:	str	ip, [r6, #16]
    d2b0:	cmp	lr, ip
    d2b4:	str	ip, [r6, #20]
    d2b8:	str	ip, [r6, #24]
    d2bc:	strne	r3, [fp, #-72]	; 0xffffffb8
    d2c0:	strne	lr, [fp, #-68]	; 0xffffffbc
    d2c4:	bne	d2d8 <rb_send_fd_buf+0x68>
    d2c8:	mov	r0, #1
    d2cc:	sub	r3, fp, #73	; 0x49
    d2d0:	str	r3, [fp, #-72]	; 0xffffffb8
    d2d4:	str	r0, [fp, #-68]	; 0xffffffbc
    d2d8:	mov	r0, #1
    d2dc:	sub	r3, fp, #72	; 0x48
    d2e0:	cmp	r2, #0
    d2e4:	str	r3, [fp, #-56]	; 0xffffffc8
    d2e8:	str	r0, [fp, #-52]	; 0xffffffcc
    d2ec:	ble	d38c <rb_send_fd_buf+0x11c>
    d2f0:	add	r2, r2, r0
    d2f4:	mov	r8, sp
    d2f8:	lsl	r2, r2, #2
    d2fc:	add	ip, r2, #15
    d300:	add	r3, r2, #8
    d304:	bic	ip, ip, #7
    d308:	cmp	r3, #11
    d30c:	sub	sp, sp, ip
    d310:	mov	r9, sp
    d314:	str	sp, [fp, #-48]	; 0xffffffd0
    d318:	str	r3, [fp, #-44]	; 0xffffffd4
    d31c:	bls	d3a4 <rb_send_fd_buf+0x134>
    d320:	sub	sl, r2, #4
    d324:	mov	r5, sp
    d328:	str	r0, [sp, #4]
    d32c:	mov	r4, r1
    d330:	add	sl, r1, sl
    d334:	str	r0, [sp, #8]
    d338:	str	r3, [r5], #8
    d33c:	ldr	r0, [r4], #4
    d340:	bl	44b8 <rb_get_fd@plt>
    d344:	str	r0, [r5, #4]!
    d348:	cmp	r4, sl
    d34c:	bne	d33c <rb_send_fd_buf+0xcc>
    d350:	ldr	r3, [r9]
    d354:	mov	r0, r7
    d358:	str	r3, [fp, #-44]	; 0xffffffd4
    d35c:	bl	44b8 <rb_get_fd@plt>
    d360:	mov	r1, r6
    d364:	mov	r2, #16384	; 0x4000
    d368:	bl	46e0 <sendmsg@plt>
    d36c:	mov	sp, r8
    d370:	sub	sp, fp, #32
    d374:	ldrd	r4, [sp]
    d378:	ldrd	r6, [sp, #8]
    d37c:	ldrd	r8, [sp, #16]
    d380:	ldrd	sl, [sp, #24]
    d384:	add	sp, sp, #32
    d388:	pop	{pc}		; (ldr pc, [sp], #4)
    d38c:	mov	r0, r7
    d390:	bl	44b8 <rb_get_fd@plt>
    d394:	mov	r1, r6
    d398:	mov	r2, #16384	; 0x4000
    d39c:	bl	46e0 <sendmsg@plt>
    d3a0:	b	d370 <rb_send_fd_buf+0x100>
    d3a4:	mov	r3, #0
    d3a8:	str	r3, [r3, #4]
    d3ac:	udf	#0

0000d3b0 <rb_ipv4_from_ipv6>:
    d3b0:	ldrb	r3, [r0, #8]
    d3b4:	add	r2, r0, #8
    d3b8:	cmp	r3, #32
    d3bc:	beq	d3e4 <rb_ipv4_from_ipv6+0x34>
    d3c0:	ldr	r3, [pc, #164]	; d46c <rb_ipv4_from_ipv6+0xbc>
    d3c4:	push	{lr}		; (str lr, [sp, #-4]!)
    d3c8:	ldrb	lr, [r0, #8]
    d3cc:	add	r3, pc, r3
    d3d0:	ldrb	ip, [r3, #20]
    d3d4:	cmp	lr, ip
    d3d8:	beq	d408 <rb_ipv4_from_ipv6+0x58>
    d3dc:	mov	r0, #0
    d3e0:	pop	{pc}		; (ldr pc, [sp], #4)
    d3e4:	ldrb	r3, [r2, #1]
    d3e8:	cmp	r3, #2
    d3ec:	bne	d3c0 <rb_ipv4_from_ipv6+0x10>
    d3f0:	ldr	r3, [r0, #10]
    d3f4:	mov	r0, #1
    d3f8:	str	r3, [r1, #4]
    d3fc:	mov	r3, #2
    d400:	str	r3, [r1]
    d404:	bx	lr
    d408:	ldrb	lr, [r2, #1]
    d40c:	add	r2, r2, #1
    d410:	ldrb	ip, [r3, #21]
    d414:	cmp	lr, ip
    d418:	bne	d3dc <rb_ipv4_from_ipv6+0x2c>
    d41c:	ldrb	lr, [r2, #1]!
    d420:	ldrb	ip, [r3, #22]
    d424:	cmp	lr, ip
    d428:	bne	d3dc <rb_ipv4_from_ipv6+0x2c>
    d42c:	ldrb	r2, [r2, #1]
    d430:	ldrb	r3, [r3, #23]
    d434:	cmp	r2, r3
    d438:	addeq	r2, r0, #20
    d43c:	addeq	ip, r1, #3
    d440:	addeq	r0, r0, #24
    d444:	bne	d3dc <rb_ipv4_from_ipv6+0x2c>
    d448:	ldrb	r3, [r2], #1
    d44c:	mvn	r3, r3
    d450:	cmp	r2, r0
    d454:	strb	r3, [ip, #1]!
    d458:	bne	d448 <rb_ipv4_from_ipv6+0x98>
    d45c:	mov	r3, #2
    d460:	mov	r0, #1
    d464:	str	r3, [r1]
    d468:	pop	{pc}		; (ldr pc, [sp], #4)
    d46c:	.word	0x00009604

0000d470 <verify_accept_all_cb>:
    d470:	mov	r0, #1
    d474:	bx	lr

0000d478 <rb_ssl_timeout_cb>:
    d478:	ldr	ip, [r0, #52]	; 0x34
    d47c:	mov	r3, #0
    d480:	mov	r1, #3
    d484:	str	r4, [sp, #-8]!
    d488:	mov	r2, r3
    d48c:	str	lr, [sp, #4]
    d490:	sub	sp, sp, #8
    d494:	ldr	lr, [ip, #140]	; 0x8c
    d498:	str	lr, [sp]
    d49c:	ldr	r4, [ip, #132]	; 0x84
    d4a0:	blx	r4
    d4a4:	add	sp, sp, #8
    d4a8:	ldr	r4, [sp]
    d4ac:	add	sp, sp, #4
    d4b0:	pop	{pc}		; (ldr pc, [sp], #4)

0000d4b4 <make_certfp>:
    d4b4:	strd	r4, [sp, #-20]!	; 0xffffffec
    d4b8:	cmp	r2, #2
    d4bc:	mov	r5, r0
    d4c0:	ldr	r4, [pc, #344]	; d620 <make_certfp+0x16c>
    d4c4:	strd	r6, [sp, #8]
    d4c8:	mov	r6, r1
    d4cc:	str	lr, [sp, #16]
    d4d0:	sub	sp, sp, #20
    d4d4:	add	r4, pc, r4
    d4d8:	beq	d604 <make_certfp+0x150>
    d4dc:	ble	d594 <make_certfp+0xe0>
    d4e0:	movw	r0, #4097	; 0x1001
    d4e4:	cmp	r2, r0
    d4e8:	beq	d5d8 <make_certfp+0x124>
    d4ec:	movw	r0, #4098	; 0x1002
    d4f0:	cmp	r2, r0
    d4f4:	bne	d5c0 <make_certfp+0x10c>
    d4f8:	mov	r3, #64	; 0x40
    d4fc:	str	r3, [sp, #12]
    d500:	bl	4b78 <EVP_sha512@plt>
    d504:	mov	r7, r0
    d508:	mov	r0, r5
    d50c:	bl	450c <X509_get_X509_PUBKEY@plt>
    d510:	ldr	r3, [pc, #268]	; d624 <make_certfp+0x170>
    d514:	mov	r5, r0
    d518:	ldr	r0, [r4, r3]
    d51c:	add	ip, sp, #12
    d520:	mov	r2, r5
    d524:	mov	r3, r6
    d528:	mov	r1, r7
    d52c:	str	ip, [sp]
    d530:	bl	49e0 <ASN1_item_digest@plt>
    d534:	cmp	r0, #1
    d538:	movne	r5, #0
    d53c:	bne	d54c <make_certfp+0x98>
    d540:	ldr	r0, [sp, #12]
    d544:	b	d5c4 <make_certfp+0x110>
    d548:	mov	r5, r4
    d54c:	bl	43d4 <ERR_get_error@plt>
    d550:	subs	r4, r0, #0
    d554:	bne	d548 <make_certfp+0x94>
    d558:	ldr	r3, [pc, #200]	; d628 <make_certfp+0x174>
    d55c:	mov	r0, r5
    d560:	mov	r2, #512	; 0x200
    d564:	add	r3, pc, r3
    d568:	mov	r1, r3
    d56c:	mov	r5, r3
    d570:	bl	4578 <ERR_error_string_n@plt>
    d574:	ldr	r1, [pc, #176]	; d62c <make_certfp+0x178>
    d578:	mov	r2, r5
    d57c:	ldr	r0, [pc, #172]	; d630 <make_certfp+0x17c>
    d580:	add	r1, pc, r1
    d584:	add	r0, pc, r0
    d588:	bl	48f0 <rb_lib_log@plt>
    d58c:	mov	r0, r4
    d590:	b	d5c4 <make_certfp+0x110>
    d594:	cmp	r2, #0
    d598:	beq	d5e8 <make_certfp+0x134>
    d59c:	cmp	r2, #1
    d5a0:	bne	d5c0 <make_certfp+0x10c>
    d5a4:	mov	r3, #32
    d5a8:	str	r3, [sp, #12]
    d5ac:	bl	4ba8 <EVP_sha256@plt>
    d5b0:	ldr	r3, [pc, #124]	; d634 <make_certfp+0x180>
    d5b4:	mov	r7, r0
    d5b8:	ldr	r0, [r4, r3]
    d5bc:	b	d51c <make_certfp+0x68>
    d5c0:	mov	r0, #0
    d5c4:	add	sp, sp, #20
    d5c8:	ldrd	r4, [sp]
    d5cc:	ldrd	r6, [sp, #8]
    d5d0:	add	sp, sp, #16
    d5d4:	pop	{pc}		; (ldr pc, [sp], #4)
    d5d8:	mov	r3, #32
    d5dc:	str	r3, [sp, #12]
    d5e0:	bl	4ba8 <EVP_sha256@plt>
    d5e4:	b	d504 <make_certfp+0x50>
    d5e8:	mov	r3, #20
    d5ec:	str	r3, [sp, #12]
    d5f0:	bl	48c0 <EVP_sha1@plt>
    d5f4:	ldr	r3, [pc, #56]	; d634 <make_certfp+0x180>
    d5f8:	mov	r7, r0
    d5fc:	ldr	r0, [r4, r3]
    d600:	b	d51c <make_certfp+0x68>
    d604:	mov	r3, #64	; 0x40
    d608:	str	r3, [sp, #12]
    d60c:	bl	4b78 <EVP_sha512@plt>
    d610:	ldr	r3, [pc, #28]	; d634 <make_certfp+0x180>
    d614:	mov	r7, r0
    d618:	ldr	r0, [r4, r3]
    d61c:	b	d51c <make_certfp+0x68>
    d620:	.word	0x0001bb24
    d624:	.word	0x00000410
    d628:	.word	0x0002e4b4
    d62c:	.word	0x00009ba8
    d630:	.word	0x00009d90
    d634:	.word	0x00000404

0000d638 <rb_ssl_accept_common>:
    d638:	strd	r4, [sp, #-20]!	; 0xffffffec
    d63c:	strd	r6, [sp, #8]
    d640:	mov	r6, r0
    d644:	str	lr, [sp, #16]
    d648:	sub	sp, sp, #12
    d64c:	bl	43d4 <ERR_get_error@plt>
    d650:	subs	r4, r0, #0
    d654:	bne	d64c <rb_ssl_accept_common+0x14>
    d658:	ldr	r0, [r6, #56]	; 0x38
    d65c:	bl	47a0 <SSL_do_handshake@plt>
    d660:	mov	r5, r0
    d664:	mov	r1, r0
    d668:	ldr	r0, [r6, #56]	; 0x38
    d66c:	bl	4c80 <SSL_get_error@plt>
    d670:	cmp	r5, #1
    d674:	mov	r7, r0
    d678:	beq	d738 <rb_ssl_accept_common+0x100>
    d67c:	cmn	r5, #1
    d680:	movne	r5, #0
    d684:	moveq	r5, #1
    d688:	cmp	r0, #2
    d68c:	movne	r3, #0
    d690:	andeq	r3, r5, #1
    d694:	cmp	r3, #0
    d698:	bne	d6f8 <rb_ssl_accept_common+0xc0>
    d69c:	cmp	r0, #3
    d6a0:	movne	r5, #0
    d6a4:	andeq	r5, r5, #1
    d6a8:	cmp	r5, #0
    d6ac:	bne	d724 <rb_ssl_accept_common+0xec>
    d6b0:	bl	4cbc <__errno_location@plt>
    d6b4:	ldr	ip, [r6, #52]	; 0x34
    d6b8:	mov	r1, #5
    d6bc:	mov	r3, r5
    d6c0:	mov	r2, r5
    d6c4:	ldr	lr, [ip, #140]	; 0x8c
    d6c8:	str	r1, [r0]
    d6cc:	mov	r1, #6
    d6d0:	mov	r0, r6
    d6d4:	str	r7, [r6, #64]	; 0x40
    d6d8:	str	lr, [sp]
    d6dc:	ldr	r4, [ip, #132]	; 0x84
    d6e0:	blx	r4
    d6e4:	add	sp, sp, #12
    d6e8:	ldrd	r4, [sp]
    d6ec:	ldrd	r6, [sp, #8]
    d6f0:	add	sp, sp, #16
    d6f4:	pop	{pc}		; (ldr pc, [sp], #4)
    d6f8:	ldr	r2, [pc, #176]	; d7b0 <rb_ssl_accept_common+0x178>
    d6fc:	mov	r3, r4
    d700:	mov	r0, r6
    d704:	mov	r1, #1
    d708:	add	r2, pc, r2
    d70c:	add	sp, sp, #12
    d710:	ldrd	r4, [sp]
    d714:	ldrd	r6, [sp, #8]
    d718:	ldr	lr, [sp, #16]
    d71c:	add	sp, sp, #20
    d720:	b	447c <rb_setselect@plt>
    d724:	ldr	r2, [pc, #136]	; d7b4 <rb_ssl_accept_common+0x17c>
    d728:	mov	r0, r6
    d72c:	mov	r1, #2
    d730:	add	r2, pc, r2
    d734:	b	d70c <rb_ssl_accept_common+0xd4>
    d738:	ldr	ip, [r6, #60]	; 0x3c
    d73c:	mov	r3, r4
    d740:	mov	r2, r4
    d744:	mov	r1, r4
    d748:	mov	r0, r6
    d74c:	add	ip, ip, #1
    d750:	str	ip, [r6, #60]	; 0x3c
    d754:	bl	43bc <rb_settimeout@plt>
    d758:	mov	r3, r4
    d75c:	mov	r2, r4
    d760:	mov	r0, r6
    d764:	mov	r1, #3
    d768:	bl	447c <rb_setselect@plt>
    d76c:	ldr	r5, [r6, #52]	; 0x34
    d770:	mov	r1, r4
    d774:	mov	r0, r6
    d778:	ldr	r3, [r5, #128]	; 0x80
    d77c:	mov	r2, r5
    d780:	ldr	ip, [r5, #140]	; 0x8c
    d784:	str	r4, [r6, #52]	; 0x34
    d788:	str	ip, [sp]
    d78c:	ldr	r4, [r5, #132]	; 0x84
    d790:	blx	r4
    d794:	mov	r0, r5
    d798:	add	sp, sp, #12
    d79c:	ldrd	r4, [sp]
    d7a0:	ldrd	r6, [sp, #8]
    d7a4:	ldr	lr, [sp, #16]
    d7a8:	add	sp, sp, #20
    d7ac:	b	46d4 <free@plt>
    d7b0:	.word	0xffffff28
    d7b4:	.word	0xffffff00

0000d7b8 <rb_ssl_connect_realcb>:
    d7b8:	str	r4, [sp, #-8]!
    d7bc:	mov	r4, r2
    d7c0:	ldr	ip, [r2]
    d7c4:	ldr	r2, [r2, #4]
    d7c8:	ldr	r3, [r0, #48]	; 0x30
    d7cc:	str	lr, [sp, #4]
    d7d0:	str	ip, [r3, #260]	; 0x104
    d7d4:	str	r2, [r3, #264]	; 0x108
    d7d8:	bl	b3b4 <rb_connect_callback>
    d7dc:	mov	r0, r4
    d7e0:	ldr	r4, [sp]
    d7e4:	ldr	lr, [sp, #4]
    d7e8:	add	sp, sp, #8
    d7ec:	b	46d4 <free@plt>

0000d7f0 <rb_ssl_tryconn_timeout_cb>:
    d7f0:	mov	r2, r1
    d7f4:	mov	r1, #3
    d7f8:	b	d7b8 <rb_ssl_connect_realcb>

0000d7fc <rb_ssl_connect_common>:
    d7fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    d800:	mov	r5, r0
    d804:	strd	r6, [sp, #8]
    d808:	str	r8, [sp, #16]
    d80c:	mov	r8, r1
    d810:	str	lr, [sp, #20]
    d814:	bl	43d4 <ERR_get_error@plt>
    d818:	subs	r4, r0, #0
    d81c:	bne	d814 <rb_ssl_connect_common+0x18>
    d820:	ldr	r0, [r5, #56]	; 0x38
    d824:	bl	47a0 <SSL_do_handshake@plt>
    d828:	mov	r6, r0
    d82c:	mov	r1, r0
    d830:	ldr	r0, [r5, #56]	; 0x38
    d834:	bl	4c80 <SSL_get_error@plt>
    d838:	cmp	r6, #1
    d83c:	mov	r7, r0
    d840:	beq	d8e8 <rb_ssl_connect_common+0xec>
    d844:	cmn	r6, #1
    d848:	movne	r3, #0
    d84c:	moveq	r3, #1
    d850:	cmp	r0, #2
    d854:	cmneq	r6, #1
    d858:	beq	d8d0 <rb_ssl_connect_common+0xd4>
    d85c:	cmp	r0, #3
    d860:	movne	r3, #0
    d864:	andeq	r3, r3, #1
    d868:	cmp	r3, #0
    d86c:	bne	d8a4 <rb_ssl_connect_common+0xa8>
    d870:	bl	4cbc <__errno_location@plt>
    d874:	mov	r3, #5
    d878:	mov	r2, r8
    d87c:	mov	r1, #6
    d880:	str	r3, [r0]
    d884:	mov	r0, r5
    d888:	str	r7, [r5, #64]	; 0x40
    d88c:	ldrd	r4, [sp]
    d890:	ldrd	r6, [sp, #8]
    d894:	ldr	r8, [sp, #16]
    d898:	ldr	lr, [sp, #20]
    d89c:	add	sp, sp, #24
    d8a0:	b	d7b8 <rb_ssl_connect_realcb>
    d8a4:	ldr	r2, [pc, #128]	; d92c <rb_ssl_connect_common+0x130>
    d8a8:	mov	r3, r8
    d8ac:	mov	r0, r5
    d8b0:	mov	r1, #2
    d8b4:	add	r2, pc, r2
    d8b8:	ldrd	r4, [sp]
    d8bc:	ldrd	r6, [sp, #8]
    d8c0:	ldr	r8, [sp, #16]
    d8c4:	ldr	lr, [sp, #20]
    d8c8:	add	sp, sp, #24
    d8cc:	b	447c <rb_setselect@plt>
    d8d0:	ldr	r2, [pc, #88]	; d930 <rb_ssl_connect_common+0x134>
    d8d4:	mov	r3, r8
    d8d8:	mov	r0, r5
    d8dc:	mov	r1, #1
    d8e0:	add	r2, pc, r2
    d8e4:	b	d8b8 <rb_ssl_connect_common+0xbc>
    d8e8:	ldr	ip, [r5, #60]	; 0x3c
    d8ec:	mov	r3, r4
    d8f0:	mov	r2, r4
    d8f4:	mov	r1, r4
    d8f8:	mov	r0, r5
    d8fc:	add	ip, ip, #1
    d900:	str	ip, [r5, #60]	; 0x3c
    d904:	bl	43bc <rb_settimeout@plt>
    d908:	mov	r2, r4
    d90c:	mov	r1, #3
    d910:	mov	r0, r5
    d914:	mov	r3, r4
    d918:	bl	447c <rb_setselect@plt>
    d91c:	mov	r2, r8
    d920:	mov	r1, r4
    d924:	mov	r0, r5
    d928:	b	d88c <rb_ssl_connect_common+0x90>
    d92c:	.word	0xffffff40
    d930:	.word	0xffffff14

0000d934 <rb_ssl_read_or_write.isra.0>:
    d934:	strd	r4, [sp, #-24]!	; 0xffffffe8
    d938:	mov	r5, r1
    d93c:	strd	r6, [sp, #8]
    d940:	mov	r6, r0
    d944:	mov	r7, r3
    d948:	str	r8, [sp, #16]
    d94c:	mov	r8, r2
    d950:	str	lr, [sp, #20]
    d954:	bl	43d4 <ERR_get_error@plt>
    d958:	subs	r4, r0, #0
    d95c:	bne	d954 <rb_ssl_read_or_write.isra.0+0x20>
    d960:	cmp	r6, #0
    d964:	ldr	r0, [r5]
    d968:	bne	d99c <rb_ssl_read_or_write.isra.0+0x68>
    d96c:	mov	r1, r7
    d970:	ldr	r2, [sp, #28]
    d974:	bl	4758 <SSL_read@plt>
    d978:	mov	r1, r0
    d97c:	cmp	r1, #0
    d980:	blt	d9b4 <rb_ssl_read_or_write.isra.0+0x80>
    d984:	ldrd	r4, [sp]
    d988:	mov	r0, r1
    d98c:	ldrd	r6, [sp, #8]
    d990:	ldr	r8, [sp, #16]
    d994:	add	sp, sp, #20
    d998:	pop	{pc}		; (ldr pc, [sp], #4)
    d99c:	ldr	r1, [sp, #24]
    d9a0:	ldr	r2, [sp, #28]
    d9a4:	bl	45cc <SSL_write@plt>
    d9a8:	mov	r1, r0
    d9ac:	cmp	r1, #0
    d9b0:	bge	d984 <rb_ssl_read_or_write.isra.0+0x50>
    d9b4:	ldr	r0, [r5]
    d9b8:	bl	4c80 <SSL_get_error@plt>
    d9bc:	sub	r0, r0, #2
    d9c0:	cmp	r0, #4
    d9c4:	addls	pc, pc, r0, lsl #2
    d9c8:	b	d9e4 <rb_ssl_read_or_write.isra.0+0xb0>
    d9cc:	b	da58 <rb_ssl_read_or_write.isra.0+0x124>
    d9d0:	b	da44 <rb_ssl_read_or_write.isra.0+0x110>
    d9d4:	b	d9e4 <rb_ssl_read_or_write.isra.0+0xb0>
    d9d8:	b	da08 <rb_ssl_read_or_write.isra.0+0xd4>
    d9dc:	b	da3c <rb_ssl_read_or_write.isra.0+0x108>
    d9e0:	mov	r4, r0
    d9e4:	bl	43d4 <ERR_get_error@plt>
    d9e8:	cmp	r0, #0
    d9ec:	bne	d9e0 <rb_ssl_read_or_write.isra.0+0xac>
    d9f0:	cmp	r4, #0
    d9f4:	str	r4, [r8]
    d9f8:	mvneq	r1, #0
    d9fc:	beq	d984 <rb_ssl_read_or_write.isra.0+0x50>
    da00:	b	da28 <rb_ssl_read_or_write.isra.0+0xf4>
    da04:	mov	r4, r0
    da08:	bl	43d4 <ERR_get_error@plt>
    da0c:	cmp	r0, #0
    da10:	bne	da04 <rb_ssl_read_or_write.isra.0+0xd0>
    da14:	cmp	r4, #0
    da18:	mvneq	r1, #0
    da1c:	streq	r4, [r8]
    da20:	beq	d984 <rb_ssl_read_or_write.isra.0+0x50>
    da24:	str	r4, [r8]
    da28:	bl	4cbc <__errno_location@plt>
    da2c:	mov	r3, #5
    da30:	mvn	r1, #1
    da34:	str	r3, [r0]
    da38:	b	d984 <rb_ssl_read_or_write.isra.0+0x50>
    da3c:	mov	r1, #0
    da40:	b	d984 <rb_ssl_read_or_write.isra.0+0x50>
    da44:	bl	4cbc <__errno_location@plt>
    da48:	mov	r3, #11
    da4c:	mvn	r1, #3
    da50:	str	r3, [r0]
    da54:	b	d984 <rb_ssl_read_or_write.isra.0+0x50>
    da58:	bl	4cbc <__errno_location@plt>
    da5c:	mov	r3, #11
    da60:	mvn	r1, #2
    da64:	str	r3, [r0]
    da68:	b	d984 <rb_ssl_read_or_write.isra.0+0x50>

0000da6c <rb_ssl_init_fd>:
    da6c:	strd	r4, [sp, #-16]!
    da70:	mov	r5, r0
    da74:	str	r6, [sp, #8]
    da78:	mov	r6, r1
    da7c:	str	lr, [sp, #12]
    da80:	bl	43d4 <ERR_get_error@plt>
    da84:	subs	r4, r0, #0
    da88:	bne	da80 <rb_ssl_init_fd+0x14>
    da8c:	ldr	r3, [pc, #176]	; db44 <rb_ssl_init_fd+0xd8>
    da90:	add	r3, pc, r3
    da94:	ldr	r0, [r3, #512]	; 0x200
    da98:	bl	4710 <SSL_new@plt>
    da9c:	cmp	r0, #0
    daa0:	str	r0, [r5, #56]	; 0x38
    daa4:	beq	dae0 <rb_ssl_init_fd+0x74>
    daa8:	cmp	r6, #1
    daac:	beq	db3c <rb_ssl_init_fd+0xd0>
    dab0:	bl	49a4 <SSL_set_accept_state@plt>
    dab4:	ldr	r4, [r5, #56]	; 0x38
    dab8:	mov	r0, r5
    dabc:	bl	44b8 <rb_get_fd@plt>
    dac0:	mov	r1, r0
    dac4:	ldr	r6, [sp, #8]
    dac8:	ldr	lr, [sp, #12]
    dacc:	mov	r0, r4
    dad0:	ldrd	r4, [sp]
    dad4:	add	sp, sp, #16
    dad8:	b	4644 <SSL_set_fd@plt>
    dadc:	mov	r4, r0
    dae0:	bl	43d4 <ERR_get_error@plt>
    dae4:	cmp	r0, #0
    dae8:	bne	dadc <rb_ssl_init_fd+0x70>
    daec:	ldr	r3, [pc, #84]	; db48 <rb_ssl_init_fd+0xdc>
    daf0:	mov	r0, r4
    daf4:	mov	r2, #512	; 0x200
    daf8:	add	r3, pc, r3
    dafc:	mov	r1, r3
    db00:	mov	r4, r3
    db04:	bl	4578 <ERR_error_string_n@plt>
    db08:	ldr	r1, [pc, #60]	; db4c <rb_ssl_init_fd+0xe0>
    db0c:	mov	r2, r4
    db10:	ldr	r0, [pc, #56]	; db50 <rb_ssl_init_fd+0xe4>
    db14:	add	r1, pc, r1
    db18:	add	r1, r1, #12
    db1c:	add	r0, pc, r0
    db20:	bl	48f0 <rb_lib_log@plt>
    db24:	mov	r0, r5
    db28:	ldrd	r4, [sp]
    db2c:	ldr	r6, [sp, #8]
    db30:	ldr	lr, [sp, #12]
    db34:	add	sp, sp, #16
    db38:	b	4848 <rb_close@plt>
    db3c:	bl	4b3c <SSL_set_connect_state@plt>
    db40:	b	dab4 <rb_ssl_init_fd+0x48>
    db44:	.word	0x0002df88
    db48:	.word	0x0002df20
    db4c:	.word	0x00009614
    db50:	.word	0x00009814

0000db54 <rb_ssl_tryconn>:
    db54:	cmp	r1, #0
    db58:	bne	dbb8 <rb_ssl_tryconn+0x64>
    db5c:	strd	r4, [sp, #-16]!
    db60:	mov	r3, r2
    db64:	mov	r5, r2
    db68:	str	r6, [sp, #8]
    db6c:	mov	r4, r0
    db70:	str	lr, [sp, #12]
    db74:	ldrb	r1, [r0, #17]
    db78:	ldr	r2, [pc, #60]	; dbbc <rb_ssl_tryconn+0x68>
    db7c:	orr	r1, r1, #32
    db80:	add	r2, pc, r2
    db84:	strb	r1, [r0, #17]
    db88:	ldr	r1, [r5, #8]
    db8c:	bl	43bc <rb_settimeout@plt>
    db90:	mov	r0, r4
    db94:	mov	r1, #1
    db98:	bl	da6c <rb_ssl_init_fd>
    db9c:	mov	r1, r5
    dba0:	mov	r0, r4
    dba4:	ldrd	r4, [sp]
    dba8:	ldr	r6, [sp, #8]
    dbac:	ldr	lr, [sp, #12]
    dbb0:	add	sp, sp, #16
    dbb4:	b	d7fc <rb_ssl_connect_common>
    dbb8:	b	d7b8 <rb_ssl_connect_realcb>
    dbbc:	.word	0xfffffc68

0000dbc0 <rb_ssl_shutdown>:
    dbc0:	strd	r4, [sp, #-16]!
    dbc4:	subs	r4, r0, #0
    dbc8:	str	r6, [sp, #8]
    dbcc:	str	lr, [sp, #12]
    dbd0:	beq	dc34 <rb_ssl_shutdown+0x74>
    dbd4:	ldr	r3, [r4, #56]	; 0x38
    dbd8:	cmp	r3, #0
    dbdc:	beq	dc34 <rb_ssl_shutdown+0x74>
    dbe0:	bl	43d4 <ERR_get_error@plt>
    dbe4:	cmp	r0, #0
    dbe8:	bne	dbe0 <rb_ssl_shutdown+0x20>
    dbec:	mov	r5, #4
    dbf0:	ldr	r0, [r4, #56]	; 0x38
    dbf4:	bl	4a7c <SSL_shutdown@plt>
    dbf8:	mov	r6, r0
    dbfc:	mov	r1, r0
    dc00:	ldr	r0, [r4, #56]	; 0x38
    dc04:	bl	4c80 <SSL_get_error@plt>
    dc08:	cmp	r6, #0
    dc0c:	sub	r0, r0, #2
    dc10:	bge	dc24 <rb_ssl_shutdown+0x64>
    dc14:	cmp	r0, #1
    dc18:	bhi	dc24 <rb_ssl_shutdown+0x64>
    dc1c:	subs	r5, r5, #1
    dc20:	bne	dbf0 <rb_ssl_shutdown+0x30>
    dc24:	ldr	r0, [r4, #56]	; 0x38
    dc28:	bl	4938 <SSL_free@plt>
    dc2c:	mov	r3, #0
    dc30:	str	r3, [r4, #56]	; 0x38
    dc34:	ldrd	r4, [sp]
    dc38:	ldr	r6, [sp, #8]
    dc3c:	add	sp, sp, #12
    dc40:	pop	{pc}		; (ldr pc, [sp], #4)

0000dc44 <rb_init_ssl>:
    dc44:	ldr	r1, [pc, #40]	; dc74 <rb_init_ssl+0x30>
    dc48:	str	r4, [sp, #-8]!
    dc4c:	ldr	r0, [pc, #36]	; dc78 <rb_init_ssl+0x34>
    dc50:	str	lr, [sp, #4]
    dc54:	add	r1, pc, r1
    dc58:	add	r1, r1, #28
    dc5c:	add	r0, pc, r0
    dc60:	bl	48f0 <rb_lib_log@plt>
    dc64:	ldr	r4, [sp]
    dc68:	add	sp, sp, #4
    dc6c:	mov	r0, #1
    dc70:	pop	{pc}		; (ldr pc, [sp], #4)
    dc74:	.word	0x000094d4
    dc78:	.word	0x000096e4

0000dc7c <rb_setup_ssl_server>:
    dc7c:	strd	r4, [sp, #-28]!	; 0xffffffe4
    dc80:	strd	r6, [sp, #8]
    dc84:	subs	r7, r0, #0
    dc88:	strd	r8, [sp, #16]
    dc8c:	str	lr, [sp, #24]
    dc90:	sub	sp, sp, #12
    dc94:	beq	df14 <rb_setup_ssl_server+0x298>
    dc98:	cmp	r1, #0
    dc9c:	mov	r6, r1
    dca0:	moveq	r6, r7
    dca4:	cmp	r3, #0
    dca8:	mov	r9, r2
    dcac:	mov	r4, r3
    dcb0:	beq	deac <rb_setup_ssl_server+0x230>
    dcb4:	bl	43d4 <ERR_get_error@plt>
    dcb8:	subs	r5, r0, #0
    dcbc:	bne	dcb4 <rb_setup_ssl_server+0x38>
    dcc0:	bl	4344 <TLS_method@plt>
    dcc4:	bl	4af4 <SSL_CTX_new@plt>
    dcc8:	subs	r8, r0, #0
    dccc:	beq	de0c <rb_setup_ssl_server+0x190>
    dcd0:	mov	r1, r7
    dcd4:	bl	4818 <SSL_CTX_use_certificate_chain_file@plt>
    dcd8:	cmp	r0, #1
    dcdc:	bne	dd9c <rb_setup_ssl_server+0x120>
    dce0:	mov	r2, r0
    dce4:	mov	r1, r6
    dce8:	mov	r0, r8
    dcec:	bl	48fc <SSL_CTX_use_PrivateKey_file@plt>
    dcf0:	cmp	r0, #1
    dcf4:	bne	de58 <rb_setup_ssl_server+0x1dc>
    dcf8:	cmp	r9, #0
    dcfc:	beq	dffc <rb_setup_ssl_server+0x380>
    dd00:	ldr	r1, [pc, #832]	; e048 <rb_setup_ssl_server+0x3cc>
    dd04:	mov	r0, r9
    dd08:	add	r1, pc, r1
    dd0c:	bl	45f0 <fopen@plt>
    dd10:	subs	r6, r0, #0
    dd14:	str	r5, [sp, #4]
    dd18:	beq	e018 <rb_setup_ssl_server+0x39c>
    dd1c:	mov	r3, r5
    dd20:	mov	r2, r5
    dd24:	add	r1, sp, #4
    dd28:	bl	49bc <PEM_read_DHparams@plt>
    dd2c:	cmp	r0, #0
    dd30:	beq	dec0 <rb_setup_ssl_server+0x244>
    dd34:	mov	r2, r5
    dd38:	mov	r1, #3
    dd3c:	ldr	r3, [sp, #4]
    dd40:	mov	r0, r8
    dd44:	bl	4650 <SSL_CTX_ctrl@plt>
    dd48:	ldr	r0, [sp, #4]
    dd4c:	bl	4a40 <DH_free@plt>
    dd50:	mov	r0, r6
    dd54:	bl	4554 <fclose@plt>
    dd58:	mov	r1, r4
    dd5c:	mov	r0, r8
    dd60:	bl	43c8 <SSL_CTX_set_cipher_list@plt>
    dd64:	cmp	r0, #1
    dd68:	mov	r4, r0
    dd6c:	beq	df34 <rb_setup_ssl_server+0x2b8>
    dd70:	ldr	r1, [pc, #724]	; e04c <rb_setup_ssl_server+0x3d0>
    dd74:	mov	r4, #0
    dd78:	ldr	r0, [pc, #720]	; e050 <rb_setup_ssl_server+0x3d4>
    dd7c:	add	r1, pc, r1
    dd80:	add	r1, r1, #440	; 0x1b8
    dd84:	add	r0, pc, r0
    dd88:	bl	48f0 <rb_lib_log@plt>
    dd8c:	mov	r0, r8
    dd90:	bl	4434 <SSL_CTX_free@plt>
    dd94:	b	ddec <rb_setup_ssl_server+0x170>
    dd98:	mov	r5, r4
    dd9c:	bl	43d4 <ERR_get_error@plt>
    dda0:	subs	r4, r0, #0
    dda4:	bne	dd98 <rb_setup_ssl_server+0x11c>
    dda8:	ldr	r3, [pc, #676]	; e054 <rb_setup_ssl_server+0x3d8>
    ddac:	mov	r0, r5
    ddb0:	mov	r2, #512	; 0x200
    ddb4:	add	r3, pc, r3
    ddb8:	mov	r1, r3
    ddbc:	mov	r5, r3
    ddc0:	bl	4578 <ERR_error_string_n@plt>
    ddc4:	ldr	r1, [pc, #652]	; e058 <rb_setup_ssl_server+0x3dc>
    ddc8:	mov	r3, r5
    ddcc:	mov	r2, r7
    ddd0:	ldr	r0, [pc, #644]	; e05c <rb_setup_ssl_server+0x3e0>
    ddd4:	add	r1, pc, r1
    ddd8:	add	r1, r1, #440	; 0x1b8
    dddc:	add	r0, pc, r0
    dde0:	bl	48f0 <rb_lib_log@plt>
    dde4:	mov	r0, r8
    dde8:	bl	4434 <SSL_CTX_free@plt>
    ddec:	mov	r0, r4
    ddf0:	add	sp, sp, #12
    ddf4:	ldrd	r4, [sp]
    ddf8:	ldrd	r6, [sp, #8]
    ddfc:	ldrd	r8, [sp, #16]
    de00:	add	sp, sp, #24
    de04:	pop	{pc}		; (ldr pc, [sp], #4)
    de08:	mov	r5, r4
    de0c:	bl	43d4 <ERR_get_error@plt>
    de10:	subs	r4, r0, #0
    de14:	bne	de08 <rb_setup_ssl_server+0x18c>
    de18:	ldr	r3, [pc, #576]	; e060 <rb_setup_ssl_server+0x3e4>
    de1c:	mov	r0, r5
    de20:	mov	r2, #512	; 0x200
    de24:	add	r3, pc, r3
    de28:	mov	r1, r3
    de2c:	mov	r5, r3
    de30:	bl	4578 <ERR_error_string_n@plt>
    de34:	ldr	r1, [pc, #552]	; e064 <rb_setup_ssl_server+0x3e8>
    de38:	mov	r2, r5
    de3c:	ldr	r0, [pc, #548]	; e068 <rb_setup_ssl_server+0x3ec>
    de40:	add	r1, pc, r1
    de44:	add	r1, r1, #440	; 0x1b8
    de48:	add	r0, pc, r0
    de4c:	bl	48f0 <rb_lib_log@plt>
    de50:	b	ddec <rb_setup_ssl_server+0x170>
    de54:	mov	r5, r4
    de58:	bl	43d4 <ERR_get_error@plt>
    de5c:	subs	r4, r0, #0
    de60:	bne	de54 <rb_setup_ssl_server+0x1d8>
    de64:	ldr	r3, [pc, #512]	; e06c <rb_setup_ssl_server+0x3f0>
    de68:	mov	r0, r5
    de6c:	mov	r2, #512	; 0x200
    de70:	add	r3, pc, r3
    de74:	mov	r1, r3
    de78:	mov	r5, r3
    de7c:	bl	4578 <ERR_error_string_n@plt>
    de80:	ldr	r1, [pc, #488]	; e070 <rb_setup_ssl_server+0x3f4>
    de84:	mov	r3, r5
    de88:	mov	r2, r6
    de8c:	ldr	r0, [pc, #480]	; e074 <rb_setup_ssl_server+0x3f8>
    de90:	add	r1, pc, r1
    de94:	add	r1, r1, #440	; 0x1b8
    de98:	add	r0, pc, r0
    de9c:	bl	48f0 <rb_lib_log@plt>
    dea0:	mov	r0, r8
    dea4:	bl	4434 <SSL_CTX_free@plt>
    dea8:	b	ddec <rb_setup_ssl_server+0x170>
    deac:	ldr	r4, [pc, #452]	; e078 <rb_setup_ssl_server+0x3fc>
    deb0:	add	r4, pc, r4
    deb4:	add	r4, r4, #40	; 0x28
    deb8:	b	dcb4 <rb_setup_ssl_server+0x38>
    debc:	mov	r5, r0
    dec0:	bl	43d4 <ERR_get_error@plt>
    dec4:	cmp	r0, #0
    dec8:	bne	debc <rb_setup_ssl_server+0x240>
    decc:	ldr	r3, [pc, #424]	; e07c <rb_setup_ssl_server+0x400>
    ded0:	mov	r0, r5
    ded4:	mov	r2, #512	; 0x200
    ded8:	add	r3, pc, r3
    dedc:	mov	r1, r3
    dee0:	mov	r5, r3
    dee4:	bl	4578 <ERR_error_string_n@plt>
    dee8:	ldr	r1, [pc, #400]	; e080 <rb_setup_ssl_server+0x404>
    deec:	mov	r3, r5
    def0:	mov	r2, r9
    def4:	ldr	r0, [pc, #392]	; e084 <rb_setup_ssl_server+0x408>
    def8:	add	r1, pc, r1
    defc:	add	r1, r1, #440	; 0x1b8
    df00:	add	r0, pc, r0
    df04:	bl	48f0 <rb_lib_log@plt>
    df08:	mov	r0, r6
    df0c:	bl	4554 <fclose@plt>
    df10:	b	dd58 <rb_setup_ssl_server+0xdc>
    df14:	ldr	r1, [pc, #364]	; e088 <rb_setup_ssl_server+0x40c>
    df18:	mov	r4, r7
    df1c:	ldr	r0, [pc, #360]	; e08c <rb_setup_ssl_server+0x410>
    df20:	add	r1, pc, r1
    df24:	add	r1, r1, #440	; 0x1b8
    df28:	add	r0, pc, r0
    df2c:	bl	48f0 <rb_lib_log@plt>
    df30:	b	ddec <rb_setup_ssl_server+0x170>
    df34:	mov	r3, #0
    df38:	mov	r1, #44	; 0x2c
    df3c:	mov	r2, r3
    df40:	mov	r0, r8
    df44:	bl	4650 <SSL_CTX_ctrl@plt>
    df48:	ldr	r2, [pc, #320]	; e090 <rb_setup_ssl_server+0x414>
    df4c:	mov	r1, #5
    df50:	mov	r0, r8
    df54:	add	r2, pc, r2
    df58:	bl	4cec <SSL_CTX_set_verify@plt>
    df5c:	mov	r1, #2048	; 0x800
    df60:	mov	r0, r8
    df64:	bl	44e8 <SSL_CTX_clear_options@plt>
    df68:	mov	r1, #67108864	; 0x4000000
    df6c:	mov	r0, r8
    df70:	bl	4830 <SSL_CTX_set_options@plt>
    df74:	mov	r1, #16384	; 0x4000
    df78:	mov	r0, r8
    df7c:	bl	4830 <SSL_CTX_set_options@plt>
    df80:	mov	r1, #4194304	; 0x400000
    df84:	mov	r0, r8
    df88:	bl	4830 <SSL_CTX_set_options@plt>
    df8c:	mov	r1, #0
    df90:	mov	r0, r8
    df94:	bl	4830 <SSL_CTX_set_options@plt>
    df98:	mov	r1, #0
    df9c:	mov	r0, r8
    dfa0:	bl	4830 <SSL_CTX_set_options@plt>
    dfa4:	ldr	r3, [pc, #232]	; e094 <rb_setup_ssl_server+0x418>
    dfa8:	mov	r2, #0
    dfac:	mov	r1, #92	; 0x5c
    dfb0:	mov	r0, r8
    dfb4:	add	r3, pc, r3
    dfb8:	bl	4650 <SSL_CTX_ctrl@plt>
    dfbc:	ldr	r3, [pc, #212]	; e098 <rb_setup_ssl_server+0x41c>
    dfc0:	add	r3, pc, r3
    dfc4:	ldr	r0, [r3, #512]	; 0x200
    dfc8:	cmp	r0, #0
    dfcc:	beq	dfd4 <rb_setup_ssl_server+0x358>
    dfd0:	bl	4434 <SSL_CTX_free@plt>
    dfd4:	ldr	r1, [pc, #192]	; e09c <rb_setup_ssl_server+0x420>
    dfd8:	ldr	r3, [pc, #192]	; e0a0 <rb_setup_ssl_server+0x424>
    dfdc:	ldr	r0, [pc, #192]	; e0a4 <rb_setup_ssl_server+0x428>
    dfe0:	add	r1, pc, r1
    dfe4:	add	r1, r1, #440	; 0x1b8
    dfe8:	add	r3, pc, r3
    dfec:	add	r0, pc, r0
    dff0:	str	r8, [r3, #512]	; 0x200
    dff4:	bl	48f0 <rb_lib_log@plt>
    dff8:	b	ddec <rb_setup_ssl_server+0x170>
    dffc:	ldr	r1, [pc, #164]	; e0a8 <rb_setup_ssl_server+0x42c>
    e000:	ldr	r0, [pc, #164]	; e0ac <rb_setup_ssl_server+0x430>
    e004:	add	r1, pc, r1
    e008:	add	r1, r1, #440	; 0x1b8
    e00c:	add	r0, pc, r0
    e010:	bl	48f0 <rb_lib_log@plt>
    e014:	b	dd58 <rb_setup_ssl_server+0xdc>
    e018:	bl	4cbc <__errno_location@plt>
    e01c:	ldr	r0, [r0]
    e020:	bl	4374 <strerror@plt>
    e024:	ldr	r1, [pc, #132]	; e0b0 <rb_setup_ssl_server+0x434>
    e028:	mov	r3, r0
    e02c:	mov	r2, r9
    e030:	ldr	r0, [pc, #124]	; e0b4 <rb_setup_ssl_server+0x438>
    e034:	add	r1, pc, r1
    e038:	add	r1, r1, #440	; 0x1b8
    e03c:	add	r0, pc, r0
    e040:	bl	48f0 <rb_lib_log@plt>
    e044:	b	dd58 <rb_setup_ssl_server+0xdc>
    e048:	.word	0x00009d18
    e04c:	.word	0x000093ac
    e050:	.word	0x000096d4
    e054:	.word	0x0002dc64
    e058:	.word	0x00009354
    e05c:	.word	0x000095bc
    e060:	.word	0x0002dbf4
    e064:	.word	0x000092e8
    e068:	.word	0x0000953c
    e06c:	.word	0x0002dba8
    e070:	.word	0x00009298
    e074:	.word	0x00009534
    e078:	.word	0x00009278
    e07c:	.word	0x0002db40
    e080:	.word	0x00009230
    e084:	.word	0x00009534
    e088:	.word	0x00009208
    e08c:	.word	0x00009438
    e090:	.word	0xfffff514
    e094:	.word	0x0001b4a8
    e098:	.word	0x0002da58
    e09c:	.word	0x00009148
    e0a0:	.word	0x0002da30
    e0a4:	.word	0x000094ac
    e0a8:	.word	0x00009124
    e0ac:	.word	0x000093ec
    e0b0:	.word	0x000090f4
    e0b4:	.word	0x000093e0

0000e0b8 <rb_init_prng>:
    e0b8:	strd	r4, [sp, #-16]!
    e0bc:	mov	r4, r1
    e0c0:	str	r6, [sp, #8]
    e0c4:	mov	r6, r0
    e0c8:	str	lr, [sp, #12]
    e0cc:	bl	43d4 <ERR_get_error@plt>
    e0d0:	subs	r5, r0, #0
    e0d4:	bne	e0cc <rb_init_prng+0x14>
    e0d8:	cmp	r4, #0
    e0dc:	beq	e14c <rb_init_prng+0x94>
    e0e0:	bl	4b90 <RAND_status@plt>
    e0e4:	cmp	r0, #1
    e0e8:	mov	r4, r0
    e0ec:	bne	e0f8 <rb_init_prng+0x40>
    e0f0:	b	e170 <rb_init_prng+0xb8>
    e0f4:	mov	r5, r4
    e0f8:	bl	43d4 <ERR_get_error@plt>
    e0fc:	subs	r4, r0, #0
    e100:	bne	e0f4 <rb_init_prng+0x3c>
    e104:	ldr	r1, [pc, #204]	; e1d8 <rb_init_prng+0x120>
    e108:	mov	r0, r5
    e10c:	mov	r2, #512	; 0x200
    e110:	add	r1, pc, r1
    e114:	mov	r5, r1
    e118:	bl	4578 <ERR_error_string_n@plt>
    e11c:	ldr	r1, [pc, #184]	; e1dc <rb_init_prng+0x124>
    e120:	mov	r2, r5
    e124:	ldr	r0, [pc, #180]	; e1e0 <rb_init_prng+0x128>
    e128:	add	r1, pc, r1
    e12c:	add	r1, r1, #460	; 0x1cc
    e130:	add	r0, pc, r0
    e134:	bl	48f0 <rb_lib_log@plt>
    e138:	mov	r0, r4
    e13c:	ldrd	r4, [sp]
    e140:	ldr	r6, [sp, #8]
    e144:	add	sp, sp, #12
    e148:	pop	{pc}		; (ldr pc, [sp], #4)
    e14c:	mov	r0, r6
    e150:	mvn	r1, #0
    e154:	bl	4404 <RAND_load_file@plt>
    e158:	cmp	r0, #0
    e15c:	blt	e190 <rb_init_prng+0xd8>
    e160:	bl	4b90 <RAND_status@plt>
    e164:	cmp	r0, #1
    e168:	mov	r4, r0
    e16c:	bne	e0f8 <rb_init_prng+0x40>
    e170:	ldr	r1, [pc, #108]	; e1e4 <rb_init_prng+0x12c>
    e174:	ldr	r0, [pc, #108]	; e1e8 <rb_init_prng+0x130>
    e178:	add	r1, pc, r1
    e17c:	add	r1, r1, #460	; 0x1cc
    e180:	add	r0, pc, r0
    e184:	bl	48f0 <rb_lib_log@plt>
    e188:	b	e138 <rb_init_prng+0x80>
    e18c:	mov	r4, r0
    e190:	bl	43d4 <ERR_get_error@plt>
    e194:	cmp	r0, #0
    e198:	bne	e18c <rb_init_prng+0xd4>
    e19c:	ldr	r3, [pc, #72]	; e1ec <rb_init_prng+0x134>
    e1a0:	mov	r0, r4
    e1a4:	mov	r2, #512	; 0x200
    e1a8:	add	r3, pc, r3
    e1ac:	mov	r1, r3
    e1b0:	mov	r4, r3
    e1b4:	bl	4578 <ERR_error_string_n@plt>
    e1b8:	ldr	r1, [pc, #48]	; e1f0 <rb_init_prng+0x138>
    e1bc:	mov	r2, r4
    e1c0:	ldr	r0, [pc, #44]	; e1f4 <rb_init_prng+0x13c>
    e1c4:	add	r1, pc, r1
    e1c8:	add	r1, r1, #460	; 0x1cc
    e1cc:	add	r0, pc, r0
    e1d0:	bl	48f0 <rb_lib_log@plt>
    e1d4:	b	e0e0 <rb_init_prng+0x28>
    e1d8:	.word	0x0002d908
    e1dc:	.word	0x00009000
    e1e0:	.word	0x000093a4
    e1e4:	.word	0x00008fb0
    e1e8:	.word	0x00009368
    e1ec:	.word	0x0002d870
    e1f0:	.word	0x00008f64
    e1f4:	.word	0x000092f0

0000e1f8 <rb_get_random>:
    e1f8:	strd	r4, [sp, #-16]!
    e1fc:	mov	r5, r0
    e200:	str	r6, [sp, #8]
    e204:	mov	r6, r1
    e208:	str	lr, [sp, #12]
    e20c:	bl	43d4 <ERR_get_error@plt>
    e210:	subs	r4, r0, #0
    e214:	bne	e20c <rb_get_random+0x14>
    e218:	mov	r1, r6
    e21c:	mov	r0, r5
    e220:	bl	4ab8 <RAND_bytes@plt>
    e224:	cmp	r0, #1
    e228:	bne	e240 <rb_get_random+0x48>
    e22c:	ldrd	r4, [sp]
    e230:	ldr	r6, [sp, #8]
    e234:	add	sp, sp, #12
    e238:	pop	{pc}		; (ldr pc, [sp], #4)
    e23c:	mov	r4, r5
    e240:	bl	43d4 <ERR_get_error@plt>
    e244:	subs	r5, r0, #0
    e248:	bne	e23c <rb_get_random+0x44>
    e24c:	ldr	r3, [pc, #68]	; e298 <rb_get_random+0xa0>
    e250:	mov	r0, r4
    e254:	mov	r2, #512	; 0x200
    e258:	add	r3, pc, r3
    e25c:	mov	r1, r3
    e260:	mov	r4, r3
    e264:	bl	4578 <ERR_error_string_n@plt>
    e268:	ldr	r1, [pc, #44]	; e29c <rb_get_random+0xa4>
    e26c:	mov	r2, r4
    e270:	ldr	r0, [pc, #40]	; e2a0 <rb_get_random+0xa8>
    e274:	add	r1, pc, r1
    e278:	add	r1, r1, #476	; 0x1dc
    e27c:	add	r0, pc, r0
    e280:	bl	48f0 <rb_lib_log@plt>
    e284:	mov	r0, r5
    e288:	ldrd	r4, [sp]
    e28c:	ldr	r6, [sp, #8]
    e290:	add	sp, sp, #12
    e294:	pop	{pc}		; (ldr pc, [sp], #4)
    e298:	.word	0x0002d7c0
    e29c:	.word	0x00008eb4
    e2a0:	.word	0x00009284

0000e2a4 <rb_get_ssl_strerror>:
    e2a4:	str	r4, [sp, #-8]!
    e2a8:	mov	r2, #512	; 0x200
    e2ac:	ldr	r4, [pc, #32]	; e2d4 <rb_get_ssl_strerror+0x30>
    e2b0:	ldr	r0, [r0, #64]	; 0x40
    e2b4:	str	lr, [sp, #4]
    e2b8:	add	r4, pc, r4
    e2bc:	mov	r1, r4
    e2c0:	bl	4578 <ERR_error_string_n@plt>
    e2c4:	mov	r0, r4
    e2c8:	ldr	r4, [sp]
    e2cc:	add	sp, sp, #4
    e2d0:	pop	{pc}		; (ldr pc, [sp], #4)
    e2d4:	.word	0x0002d760

0000e2d8 <rb_get_ssl_certfp>:
    e2d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e2dc:	subs	r4, r0, #0
    e2e0:	strd	r6, [sp, #8]
    e2e4:	str	r8, [sp, #16]
    e2e8:	str	lr, [sp, #20]
    e2ec:	beq	e394 <rb_get_ssl_certfp+0xbc>
    e2f0:	ldr	r0, [r4, #56]	; 0x38
    e2f4:	cmp	r0, #0
    e2f8:	beq	e394 <rb_get_ssl_certfp+0xbc>
    e2fc:	mov	r6, r2
    e300:	mov	r5, r1
    e304:	bl	49f8 <SSL_get_peer_certificate@plt>
    e308:	subs	r7, r0, #0
    e30c:	beq	e394 <rb_get_ssl_certfp+0xbc>
    e310:	ldr	r0, [r4, #56]	; 0x38
    e314:	bl	4a1c <SSL_get_verify_result@plt>
    e318:	cmp	r0, #27
    e31c:	addls	pc, pc, r0, lsl #2
    e320:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e324:	b	e3c0 <rb_get_ssl_certfp+0xe8>
    e328:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e32c:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e330:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e334:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e338:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e33c:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e340:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e344:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e348:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e34c:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e350:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e354:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e358:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e35c:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e360:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e364:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e368:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e36c:	b	e3c0 <rb_get_ssl_certfp+0xe8>
    e370:	b	e3c0 <rb_get_ssl_certfp+0xe8>
    e374:	b	e3c0 <rb_get_ssl_certfp+0xe8>
    e378:	b	e3c0 <rb_get_ssl_certfp+0xe8>
    e37c:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e380:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e384:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e388:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e38c:	b	e3b0 <rb_get_ssl_certfp+0xd8>
    e390:	b	e3c0 <rb_get_ssl_certfp+0xe8>
    e394:	mov	r4, #0
    e398:	mov	r0, r4
    e39c:	ldrd	r4, [sp]
    e3a0:	ldrd	r6, [sp, #8]
    e3a4:	ldr	r8, [sp, #16]
    e3a8:	add	sp, sp, #20
    e3ac:	pop	{pc}		; (ldr pc, [sp], #4)
    e3b0:	mov	r4, #0
    e3b4:	mov	r0, r7
    e3b8:	bl	4c38 <X509_free@plt>
    e3bc:	b	e398 <rb_get_ssl_certfp+0xc0>
    e3c0:	mov	r2, r6
    e3c4:	mov	r1, r5
    e3c8:	mov	r0, r7
    e3cc:	bl	d4b4 <make_certfp>
    e3d0:	mov	r4, r0
    e3d4:	b	e3b4 <rb_get_ssl_certfp+0xdc>

0000e3d8 <rb_get_ssl_certfp_file>:
    e3d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e3dc:	mov	r4, r1
    e3e0:	ldr	r1, [pc, #132]	; e46c <rb_get_ssl_certfp_file+0x94>
    e3e4:	strd	r6, [sp, #8]
    e3e8:	mov	r7, r2
    e3ec:	str	r8, [sp, #16]
    e3f0:	str	lr, [sp, #20]
    e3f4:	add	r1, pc, r1
    e3f8:	bl	45f0 <fopen@plt>
    e3fc:	subs	r5, r0, #0
    e400:	beq	e464 <rb_get_ssl_certfp_file+0x8c>
    e404:	mov	r3, #0
    e408:	mov	r2, r3
    e40c:	mov	r1, r3
    e410:	bl	47f4 <PEM_read_X509@plt>
    e414:	subs	r6, r0, #0
    e418:	beq	e454 <rb_get_ssl_certfp_file+0x7c>
    e41c:	mov	r1, r4
    e420:	mov	r2, r7
    e424:	bl	d4b4 <make_certfp>
    e428:	mov	r4, r0
    e42c:	mov	r0, r6
    e430:	bl	4c38 <X509_free@plt>
    e434:	mov	r0, r5
    e438:	bl	4554 <fclose@plt>
    e43c:	mov	r0, r4
    e440:	ldrd	r4, [sp]
    e444:	ldrd	r6, [sp, #8]
    e448:	ldr	r8, [sp, #16]
    e44c:	add	sp, sp, #20
    e450:	pop	{pc}		; (ldr pc, [sp], #4)
    e454:	mov	r0, r5
    e458:	mov	r4, r6
    e45c:	bl	4554 <fclose@plt>
    e460:	b	e43c <rb_get_ssl_certfp_file+0x64>
    e464:	mvn	r4, #0
    e468:	b	e43c <rb_get_ssl_certfp_file+0x64>
    e46c:	.word	0x0000962c

0000e470 <rb_get_ssl_info>:
    e470:	strd	r4, [sp, #-20]!	; 0xffffffec
    e474:	mov	r5, r0
    e478:	movw	r4, #4175	; 0x104f
    e47c:	movt	r4, #4112	; 0x1010
    e480:	strd	r6, [sp, #8]
    e484:	mov	r6, r1
    e488:	str	lr, [sp, #16]
    e48c:	sub	sp, sp, #20
    e490:	bl	46b0 <OpenSSL_version_num@plt>
    e494:	cmp	r0, r4
    e498:	beq	e4ec <rb_get_ssl_info+0x7c>
    e49c:	bl	46b0 <OpenSSL_version_num@plt>
    e4a0:	mov	r7, r0
    e4a4:	mov	r0, #0
    e4a8:	bl	4c68 <OpenSSL_version@plt>
    e4ac:	ldr	ip, [pc, #96]	; e514 <rb_get_ssl_info+0xa4>
    e4b0:	mov	r3, r4
    e4b4:	mov	r1, r6
    e4b8:	str	r7, [sp, #4]
    e4bc:	ldr	r2, [pc, #84]	; e518 <rb_get_ssl_info+0xa8>
    e4c0:	str	r0, [sp, #8]
    e4c4:	mov	r0, r5
    e4c8:	add	ip, pc, ip
    e4cc:	add	r2, pc, r2
    e4d0:	str	ip, [sp]
    e4d4:	bl	4b84 <snprintf@plt>
    e4d8:	add	sp, sp, #20
    e4dc:	ldrd	r4, [sp]
    e4e0:	ldrd	r6, [sp, #8]
    e4e4:	add	sp, sp, #16
    e4e8:	pop	{pc}		; (ldr pc, [sp], #4)
    e4ec:	ldr	ip, [pc, #40]	; e51c <rb_get_ssl_info+0xac>
    e4f0:	mov	r3, r0
    e4f4:	mov	r1, r6
    e4f8:	mov	r0, r5
    e4fc:	ldr	r2, [pc, #28]	; e520 <rb_get_ssl_info+0xb0>
    e500:	add	ip, pc, ip
    e504:	add	r2, pc, r2
    e508:	str	ip, [sp]
    e50c:	bl	4b84 <snprintf@plt>
    e510:	b	e4d8 <rb_get_ssl_info+0x68>
    e514:	.word	0x00009070
    e518:	.word	0x00009088
    e51c:	.word	0x00009038
    e520:	.word	0x00009010

0000e524 <rb_ssl_get_cipher>:
    e524:	strd	r4, [sp, #-12]!
    e528:	subs	r4, r0, #0
    e52c:	str	lr, [sp, #8]
    e530:	sub	sp, sp, #12
    e534:	beq	e594 <rb_ssl_get_cipher+0x70>
    e538:	ldr	r0, [r4, #56]	; 0x38
    e53c:	cmp	r0, #0
    e540:	beq	e584 <rb_ssl_get_cipher+0x60>
    e544:	bl	4c8c <SSL_get_version@plt>
    e548:	mov	r5, r0
    e54c:	ldr	r0, [r4, #56]	; 0x38
    e550:	bl	44f4 <SSL_get_current_cipher@plt>
    e554:	ldr	r4, [pc, #64]	; e59c <rb_ssl_get_cipher+0x78>
    e558:	bl	4698 <SSL_CIPHER_get_name@plt>
    e55c:	ldr	r2, [pc, #60]	; e5a0 <rb_ssl_get_cipher+0x7c>
    e560:	mov	r3, r5
    e564:	mov	r1, #512	; 0x200
    e568:	str	r0, [sp]
    e56c:	add	r4, pc, r4
    e570:	add	r4, r4, #516	; 0x204
    e574:	add	r2, pc, r2
    e578:	mov	r0, r4
    e57c:	bl	4b84 <snprintf@plt>
    e580:	mov	r0, r4
    e584:	add	sp, sp, #12
    e588:	ldrd	r4, [sp]
    e58c:	add	sp, sp, #8
    e590:	pop	{pc}		; (ldr pc, [sp], #4)
    e594:	mov	r0, r4
    e598:	b	e584 <rb_ssl_get_cipher+0x60>
    e59c:	.word	0x0002d4ac
    e5a0:	.word	0x00009014

0000e5a4 <rb_ssl_read>:
    e5a4:	mov	ip, #0
    e5a8:	push	{lr}		; (str lr, [sp, #-4]!)
    e5ac:	sub	sp, sp, #12
    e5b0:	mov	r3, r1
    e5b4:	add	r1, r0, #56	; 0x38
    e5b8:	str	ip, [sp]
    e5bc:	str	r2, [sp, #4]
    e5c0:	add	r2, r0, #64	; 0x40
    e5c4:	mov	r0, ip
    e5c8:	bl	d934 <rb_ssl_read_or_write.isra.0>
    e5cc:	add	sp, sp, #12
    e5d0:	pop	{pc}		; (ldr pc, [sp], #4)

0000e5d4 <rb_ssl_write>:
    e5d4:	push	{lr}		; (str lr, [sp, #-4]!)
    e5d8:	sub	sp, sp, #12
    e5dc:	mov	ip, r0
    e5e0:	mov	r3, #0
    e5e4:	mov	r0, #1
    e5e8:	stm	sp, {r1, r2}
    e5ec:	add	r1, ip, #56	; 0x38
    e5f0:	add	r2, ip, #64	; 0x40
    e5f4:	bl	d934 <rb_ssl_read_or_write.isra.0>
    e5f8:	add	sp, sp, #12
    e5fc:	pop	{pc}		; (ldr pc, [sp], #4)

0000e600 <rb_supports_ssl>:
    e600:	mov	r0, #1
    e604:	bx	lr

0000e608 <rb_ssl_handshake_count>:
    e608:	ldr	r0, [r0, #60]	; 0x3c
    e60c:	bx	lr

0000e610 <rb_ssl_clear_handshake_count>:
    e610:	mov	r3, #0
    e614:	str	r3, [r0, #60]	; 0x3c
    e618:	bx	lr

0000e61c <rb_ssl_start_accepted>:
    e61c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e620:	mov	r4, r0
    e624:	strd	r6, [sp, #8]
    e628:	mov	r6, r3
    e62c:	mov	r7, r2
    e630:	str	r8, [sp, #16]
    e634:	mov	r8, r1
    e638:	mov	r1, #144	; 0x90
    e63c:	str	lr, [sp, #20]
    e640:	ldrb	ip, [r0, #17]
    e644:	mov	r0, #1
    e648:	orr	ip, ip, #32
    e64c:	strb	ip, [r4, #17]
    e650:	bl	45c0 <calloc@plt>
    e654:	subs	r3, r0, #0
    e658:	beq	e6c0 <rb_ssl_start_accepted+0xa4>
    e65c:	mov	r5, #0
    e660:	mov	r2, #128	; 0x80
    e664:	str	r3, [r4, #52]	; 0x34
    e668:	mov	r1, r5
    e66c:	str	r5, [r3, #128]	; 0x80
    e670:	str	r8, [r3, #132]	; 0x84
    e674:	str	r7, [r3, #140]	; 0x8c
    e678:	bl	4608 <memset@plt>
    e67c:	ldr	r2, [pc, #64]	; e6c4 <rb_ssl_start_accepted+0xa8>
    e680:	mov	r3, r5
    e684:	mov	r1, r6
    e688:	mov	r0, r4
    e68c:	add	r2, pc, r2
    e690:	bl	43bc <rb_settimeout@plt>
    e694:	mov	r1, r5
    e698:	mov	r0, r4
    e69c:	bl	da6c <rb_ssl_init_fd>
    e6a0:	mov	r1, r5
    e6a4:	mov	r0, r4
    e6a8:	ldrd	r4, [sp]
    e6ac:	ldrd	r6, [sp, #8]
    e6b0:	ldr	r8, [sp, #16]
    e6b4:	ldr	lr, [sp, #20]
    e6b8:	add	sp, sp, #24
    e6bc:	b	d638 <rb_ssl_accept_common>
    e6c0:	bl	495c <rb_outofmemory@plt>
    e6c4:	.word	0xffffede4

0000e6c8 <rb_ssl_accept_setup>:
    e6c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e6cc:	mov	r4, r1
    e6d0:	strd	r6, [sp, #8]
    e6d4:	mov	r7, r2
    e6d8:	mov	r6, r3
    e6dc:	str	r8, [sp, #16]
    e6e0:	mov	r8, r0
    e6e4:	mov	r0, #1
    e6e8:	str	lr, [sp, #20]
    e6ec:	ldrb	ip, [r1, #17]
    e6f0:	mov	r1, #144	; 0x90
    e6f4:	orr	ip, ip, #32
    e6f8:	strb	ip, [r4, #17]
    e6fc:	bl	45c0 <calloc@plt>
    e700:	subs	r5, r0, #0
    e704:	beq	e784 <rb_ssl_accept_setup+0xbc>
    e708:	str	r5, [r4, #52]	; 0x34
    e70c:	mov	r2, #128	; 0x80
    e710:	mov	r1, #0
    e714:	ldr	r3, [r8, #52]	; 0x34
    e718:	ldr	ip, [r3, #132]	; 0x84
    e71c:	ldr	r3, [r3, #140]	; 0x8c
    e720:	str	r6, [r5, #128]	; 0x80
    e724:	str	ip, [r5, #132]	; 0x84
    e728:	str	r3, [r5, #140]	; 0x8c
    e72c:	bl	4608 <memset@plt>
    e730:	mov	r2, r6
    e734:	mov	r1, r7
    e738:	mov	r0, r5
    e73c:	bl	47e8 <memcpy@plt>
    e740:	ldr	r2, [pc, #64]	; e788 <rb_ssl_accept_setup+0xc0>
    e744:	mov	r0, r4
    e748:	mov	r3, #0
    e74c:	mov	r1, #10
    e750:	add	r2, pc, r2
    e754:	bl	43bc <rb_settimeout@plt>
    e758:	mov	r0, r4
    e75c:	mov	r1, #0
    e760:	bl	da6c <rb_ssl_init_fd>
    e764:	mov	r0, r4
    e768:	mov	r1, #0
    e76c:	ldrd	r4, [sp]
    e770:	ldrd	r6, [sp, #8]
    e774:	ldr	r8, [sp, #16]
    e778:	ldr	lr, [sp, #20]
    e77c:	add	sp, sp, #24
    e780:	b	d638 <rb_ssl_accept_common>
    e784:	bl	495c <rb_outofmemory@plt>
    e788:	.word	0xffffed20

0000e78c <rb_ssl_listen>:
    e78c:	str	r4, [sp, #-8]!
    e790:	mov	r4, r0
    e794:	str	lr, [sp, #4]
    e798:	bl	4bcc <rb_listen@plt>
    e79c:	mov	r3, #52	; 0x34
    e7a0:	strb	r3, [r4, #17]
    e7a4:	ldr	r4, [sp]
    e7a8:	add	sp, sp, #4
    e7ac:	pop	{pc}		; (ldr pc, [sp], #4)

0000e7b0 <rb_connect_tcp_ssl>:
    e7b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    e7b4:	subs	r4, r0, #0
    e7b8:	strd	r6, [sp, #8]
    e7bc:	strd	r8, [sp, #16]
    e7c0:	str	sl, [sp, #24]
    e7c4:	str	lr, [sp, #28]
    e7c8:	ldr	r8, [sp, #32]
    e7cc:	ldr	r7, [sp, #36]	; 0x24
    e7d0:	beq	e834 <rb_connect_tcp_ssl+0x84>
    e7d4:	mov	r6, r1
    e7d8:	mov	r0, #1
    e7dc:	mov	r1, #12
    e7e0:	mov	r5, r3
    e7e4:	mov	r9, r2
    e7e8:	bl	45c0 <calloc@plt>
    e7ec:	subs	ip, r0, #0
    e7f0:	beq	e84c <rb_connect_tcp_ssl+0x9c>
    e7f4:	ldr	r3, [pc, #84]	; e850 <rb_connect_tcp_ssl+0xa0>
    e7f8:	mov	r2, r9
    e7fc:	mov	r1, r6
    e800:	mov	r0, r4
    e804:	ldr	sl, [sp, #24]
    e808:	ldr	lr, [sp, #28]
    e80c:	add	r3, pc, r3
    e810:	stm	ip, {r5, r8}
    e814:	str	r7, [ip, #8]
    e818:	str	ip, [sp, #32]
    e81c:	str	r7, [sp, #36]	; 0x24
    e820:	ldrd	r4, [sp]
    e824:	ldrd	r6, [sp, #8]
    e828:	ldrd	r8, [sp, #16]
    e82c:	add	sp, sp, #32
    e830:	b	43f8 <rb_connect_tcp@plt>
    e834:	ldrd	r4, [sp]
    e838:	ldrd	r6, [sp, #8]
    e83c:	ldrd	r8, [sp, #16]
    e840:	ldr	sl, [sp, #24]
    e844:	add	sp, sp, #28
    e848:	pop	{pc}		; (ldr pc, [sp], #4)
    e84c:	bl	495c <rb_outofmemory@plt>
    e850:	.word	0xfffff340

0000e854 <rb_ssl_start_connected>:
    e854:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e858:	subs	r4, r0, #0
    e85c:	strd	r6, [sp, #8]
    e860:	str	r8, [sp, #16]
    e864:	str	lr, [sp, #20]
    e868:	beq	e904 <rb_ssl_start_connected+0xb0>
    e86c:	mov	r7, r1
    e870:	mov	r0, #1
    e874:	mov	r1, #12
    e878:	mov	r8, r3
    e87c:	mov	r6, r2
    e880:	bl	45c0 <calloc@plt>
    e884:	subs	r5, r0, #0
    e888:	beq	e918 <rb_ssl_start_connected+0xc4>
    e88c:	mov	r1, #268	; 0x10c
    e890:	mov	r0, #1
    e894:	str	r7, [r5]
    e898:	stmib	r5, {r6, r8}
    e89c:	bl	45c0 <calloc@plt>
    e8a0:	cmp	r0, #0
    e8a4:	beq	e918 <rb_ssl_start_connected+0xc4>
    e8a8:	ldrb	ip, [r4, #17]
    e8ac:	mov	r1, r8
    e8b0:	mov	r3, r5
    e8b4:	str	r0, [r4, #48]	; 0x30
    e8b8:	ldr	r2, [pc, #92]	; e91c <rb_ssl_start_connected+0xc8>
    e8bc:	str	r7, [r0, #260]	; 0x104
    e8c0:	str	r6, [r0, #264]	; 0x108
    e8c4:	mov	r0, r4
    e8c8:	orr	ip, ip, #32
    e8cc:	add	r2, pc, r2
    e8d0:	strb	ip, [r4, #17]
    e8d4:	bl	43bc <rb_settimeout@plt>
    e8d8:	mov	r0, r4
    e8dc:	mov	r1, #1
    e8e0:	bl	da6c <rb_ssl_init_fd>
    e8e4:	mov	r1, r5
    e8e8:	mov	r0, r4
    e8ec:	ldrd	r4, [sp]
    e8f0:	ldrd	r6, [sp, #8]
    e8f4:	ldr	r8, [sp, #16]
    e8f8:	ldr	lr, [sp, #20]
    e8fc:	add	sp, sp, #24
    e900:	b	d7fc <rb_ssl_connect_common>
    e904:	ldrd	r4, [sp]
    e908:	ldrd	r6, [sp, #8]
    e90c:	ldr	r8, [sp, #16]
    e910:	add	sp, sp, #20
    e914:	pop	{pc}		; (ldr pc, [sp], #4)
    e918:	bl	495c <rb_outofmemory@plt>
    e91c:	.word	0xffffef1c

0000e920 <rb_event_frequency.part.1>:
    e920:	str	r4, [sp, #-8]!
    e924:	eor	r4, r0, r0, asr #31
    e928:	str	lr, [sp, #4]
    e92c:	sub	r4, r4, r0, asr #31
    e930:	movw	r0, #43691	; 0xaaab
    e934:	movt	r0, #43690	; 0xaaaa
    e938:	lsl	r4, r4, #1
    e93c:	umull	r3, r4, r0, r4
    e940:	bl	4b18 <rand@plt>
    e944:	movw	r2, #19923	; 0x4dd3
    e948:	movt	r2, #4194	; 0x1062
    e94c:	asr	r3, r0, #31
    e950:	mov	r1, #1000	; 0x3e8
    e954:	lsr	r4, r4, #1
    e958:	smull	lr, ip, r2, r0
    e95c:	rsb	r3, r3, ip, asr #6
    e960:	mls	r0, r1, r3, r0
    e964:	mul	r0, r4, r0
    e968:	smull	r3, r2, r2, r0
    e96c:	asr	r0, r0, #31
    e970:	rsb	r0, r0, r2, asr #6
    e974:	add	r0, r0, r4
    e978:	ldr	r4, [sp]
    e97c:	add	sp, sp, #4
    e980:	pop	{pc}		; (ldr pc, [sp], #4)

0000e984 <rb_event_add_common>:
    e984:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e988:	mov	r5, r3
    e98c:	strd	r6, [sp, #8]
    e990:	mov	r6, r1
    e994:	mov	r1, #48	; 0x30
    e998:	str	r8, [sp, #16]
    e99c:	mov	r8, r0
    e9a0:	mov	r0, #1
    e9a4:	mov	r7, r2
    e9a8:	str	lr, [sp, #20]
    e9ac:	bl	45c0 <calloc@plt>
    e9b0:	subs	r4, r0, #0
    e9b4:	beq	ea9c <rb_event_add_common+0x118>
    e9b8:	mov	r0, #33	; 0x21
    e9bc:	str	r6, [r4, #12]
    e9c0:	bl	4980 <malloc@plt>
    e9c4:	subs	r6, r0, #0
    e9c8:	beq	ea9c <rb_event_add_common+0x118>
    e9cc:	mov	r1, r8
    e9d0:	mov	r2, #33	; 0x21
    e9d4:	bl	4680 <rb_strlcpy@plt>
    e9d8:	str	r7, [r4, #16]
    e9dc:	str	r6, [r4, #20]
    e9e0:	bl	47d0 <rb_current_time@plt>
    e9e4:	ldr	r1, [pc, #180]	; eaa0 <rb_event_add_common+0x11c>
    e9e8:	mov	r3, #0
    e9ec:	add	r0, r0, r5
    e9f0:	str	r4, [r4]
    e9f4:	ldr	r2, [sp, #24]
    e9f8:	str	r3, [r4, #44]	; 0x2c
    e9fc:	add	r1, pc, r1
    ea00:	str	r2, [r4, #24]
    ea04:	ldr	r2, [r1]
    ea08:	str	r0, [r4, #28]
    ea0c:	str	r5, [r4, #32]
    ea10:	cmn	r2, #1
    ea14:	movne	r3, #0
    ea18:	moveq	r3, #1
    ea1c:	cmp	r0, r2
    ea20:	orrlt	r3, r3, #1
    ea24:	ldr	r2, [pc, #120]	; eaa4 <rb_event_add_common+0x120>
    ea28:	cmp	r3, #0
    ea2c:	mov	r3, #0
    ea30:	str	r3, [r4, #4]
    ea34:	strne	r0, [r1]
    ea38:	add	r2, pc, r2
    ea3c:	ldr	r3, [r2]
    ea40:	cmp	r3, #0
    ea44:	str	r3, [r4, #8]
    ea48:	strne	r4, [r3, #4]
    ea4c:	beq	ea8c <rb_event_add_common+0x108>
    ea50:	ldr	r3, [pc, #80]	; eaa8 <rb_event_add_common+0x124>
    ea54:	mov	r1, r5
    ea58:	mov	r0, r4
    ea5c:	add	r3, pc, r3
    ea60:	ldr	r2, [r3, #8]
    ea64:	str	r4, [r3]
    ea68:	add	r2, r2, #1
    ea6c:	str	r2, [r3, #8]
    ea70:	bl	c1bc <rb_io_sched_event>
    ea74:	mov	r0, r4
    ea78:	ldrd	r4, [sp]
    ea7c:	ldrd	r6, [sp, #8]
    ea80:	ldr	r8, [sp, #16]
    ea84:	add	sp, sp, #20
    ea88:	pop	{pc}		; (ldr pc, [sp], #4)
    ea8c:	ldr	r3, [r2, #4]
    ea90:	cmp	r3, #0
    ea94:	streq	r4, [r2, #4]
    ea98:	b	ea50 <rb_event_add_common+0xcc>
    ea9c:	bl	495c <rb_outofmemory@plt>
    eaa0:	.word	0x0001aa7c
    eaa4:	.word	0x0002d3e4
    eaa8:	.word	0x0002d3c0

0000eaac <rb_event_add>:
    eaac:	subs	ip, r3, #0
    eab0:	strd	r4, [sp, #-16]!
    eab4:	mov	r4, r0
    eab8:	mov	r5, r1
    eabc:	str	r6, [sp, #8]
    eac0:	mov	r6, r2
    eac4:	str	lr, [sp, #12]
    eac8:	sub	sp, sp, #8
    eacc:	ble	eafc <rb_event_add+0x50>
    ead0:	mov	r3, ip
    ead4:	mov	r2, r6
    ead8:	str	ip, [sp]
    eadc:	mov	r1, r5
    eae0:	mov	r0, r4
    eae4:	bl	e984 <rb_event_add_common>
    eae8:	add	sp, sp, #8
    eaec:	ldrd	r4, [sp]
    eaf0:	ldr	r6, [sp, #8]
    eaf4:	add	sp, sp, #12
    eaf8:	pop	{pc}		; (ldr pc, [sp], #4)
    eafc:	mov	r1, r0
    eb00:	ldr	r0, [pc, #16]	; eb18 <rb_event_add+0x6c>
    eb04:	mov	r2, ip
    eb08:	add	r0, pc, r0
    eb0c:	bl	48f0 <rb_lib_log@plt>
    eb10:	mov	ip, #1
    eb14:	b	ead0 <rb_event_add+0x24>
    eb18:	.word	0x00008a88

0000eb1c <rb_event_addonce>:
    eb1c:	cmp	r3, #0
    eb20:	strd	r4, [sp, #-16]!
    eb24:	mov	r4, r0
    eb28:	mov	r5, r1
    eb2c:	str	r6, [sp, #8]
    eb30:	mov	r6, r2
    eb34:	str	lr, [sp, #12]
    eb38:	sub	sp, sp, #8
    eb3c:	ble	eb6c <rb_event_addonce+0x50>
    eb40:	mov	ip, #0
    eb44:	mov	r2, r6
    eb48:	mov	r1, r5
    eb4c:	mov	r0, r4
    eb50:	str	ip, [sp]
    eb54:	bl	e984 <rb_event_add_common>
    eb58:	add	sp, sp, #8
    eb5c:	ldrd	r4, [sp]
    eb60:	ldr	r6, [sp, #8]
    eb64:	add	sp, sp, #12
    eb68:	pop	{pc}		; (ldr pc, [sp], #4)
    eb6c:	mov	r1, r0
    eb70:	ldr	r0, [pc, #16]	; eb88 <rb_event_addonce+0x6c>
    eb74:	mov	r2, r3
    eb78:	add	r0, pc, r0
    eb7c:	bl	48f0 <rb_lib_log@plt>
    eb80:	mov	r3, #1
    eb84:	b	eb40 <rb_event_addonce+0x24>
    eb88:	.word	0x00008a5c

0000eb8c <rb_event_delete>:
    eb8c:	subs	r3, r0, #0
    eb90:	beq	eba0 <rb_event_delete+0x14>
    eb94:	mov	r2, #1
    eb98:	str	r2, [r3, #44]	; 0x2c
    eb9c:	b	c238 <rb_io_unsched_event>
    eba0:	bx	lr

0000eba4 <rb_event_find_delete>:
    eba4:	ldr	r3, [pc, #68]	; ebf0 <rb_event_find_delete+0x4c>
    eba8:	add	r3, pc, r3
    ebac:	ldr	r3, [r3]
    ebb0:	cmp	r3, #0
    ebb4:	bne	ebc8 <rb_event_find_delete+0x24>
    ebb8:	b	ebe8 <rb_event_find_delete+0x44>
    ebbc:	ldr	r3, [r3, #8]
    ebc0:	cmp	r3, #0
    ebc4:	beq	ebe8 <rb_event_find_delete+0x44>
    ebc8:	ldr	r2, [r3]
    ebcc:	ldr	ip, [r2, #12]
    ebd0:	cmp	r0, ip
    ebd4:	bne	ebbc <rb_event_find_delete+0x18>
    ebd8:	ldr	ip, [r2, #16]
    ebdc:	cmp	r1, ip
    ebe0:	bne	ebbc <rb_event_find_delete+0x18>
    ebe4:	mov	r3, r2
    ebe8:	mov	r0, r3
    ebec:	b	4470 <rb_event_delete@plt>
    ebf0:	.word	0x0002d274

0000ebf4 <rb_event_addish>:
    ebf4:	cmp	r3, #0
    ebf8:	strd	r4, [sp, #-20]!	; 0xffffffec
    ebfc:	mov	r5, r0
    ec00:	rsblt	r3, r3, #0
    ec04:	strd	r6, [sp, #8]
    ec08:	mov	r6, r1
    ec0c:	cmp	r3, #2
    ec10:	mov	r7, r2
    ec14:	str	lr, [sp, #16]
    ec18:	movle	r4, r3
    ec1c:	sub	sp, sp, #12
    ec20:	ble	ec34 <rb_event_addish+0x40>
    ec24:	rsb	r4, r3, #0
    ec28:	mov	r0, r4
    ec2c:	bl	e920 <rb_event_frequency.part.1>
    ec30:	mov	r3, r0
    ec34:	mov	r2, r7
    ec38:	mov	r1, r6
    ec3c:	str	r4, [sp]
    ec40:	mov	r0, r5
    ec44:	bl	e984 <rb_event_add_common>
    ec48:	add	sp, sp, #12
    ec4c:	ldrd	r4, [sp]
    ec50:	ldrd	r6, [sp, #8]
    ec54:	add	sp, sp, #16
    ec58:	pop	{pc}		; (ldr pc, [sp], #4)

0000ec5c <rb_run_one_event>:
    ec5c:	ldr	r3, [pc, #172]	; ed10 <rb_run_one_event+0xb4>
    ec60:	mov	r2, #33	; 0x21
    ec64:	strd	r4, [sp, #-16]!
    ec68:	mov	r4, r0
    ec6c:	ldr	r1, [r0, #20]
    ec70:	str	r6, [sp, #8]
    ec74:	str	lr, [sp, #12]
    ec78:	add	r3, pc, r3
    ec7c:	add	r0, r3, #12
    ec80:	bl	4680 <rb_strlcpy@plt>
    ec84:	ldr	r3, [r4, #12]
    ec88:	ldr	r0, [r4, #16]
    ec8c:	blx	r3
    ec90:	ldr	r3, [r4, #24]
    ec94:	cmp	r3, #0
    ec98:	beq	ecf0 <rb_run_one_event+0x94>
    ec9c:	bl	47d0 <rb_current_time@plt>
    eca0:	mov	r5, r0
    eca4:	ldr	r0, [r4, #24]
    eca8:	cmp	r0, #0
    ecac:	blt	ed08 <rb_run_one_event+0xac>
    ecb0:	ldr	r1, [pc, #92]	; ed14 <rb_run_one_event+0xb8>
    ecb4:	add	r0, r5, r0
    ecb8:	str	r0, [r4, #28]
    ecbc:	ldrd	r4, [sp]
    ecc0:	add	r1, pc, r1
    ecc4:	ldr	r6, [sp, #8]
    ecc8:	add	sp, sp, #12
    eccc:	ldr	r2, [r1]
    ecd0:	cmn	r2, #1
    ecd4:	movne	r3, #0
    ecd8:	moveq	r3, #1
    ecdc:	cmp	r0, r2
    ece0:	orrlt	r3, r3, #1
    ece4:	cmp	r3, #0
    ece8:	strne	r0, [r1]
    ecec:	pop	{pc}		; (ldr pc, [sp], #4)
    ecf0:	mov	r0, r4
    ecf4:	ldrd	r4, [sp]
    ecf8:	ldr	r6, [sp, #8]
    ecfc:	ldr	lr, [sp, #12]
    ed00:	add	sp, sp, #16
    ed04:	b	4470 <rb_event_delete@plt>
    ed08:	bl	e920 <rb_event_frequency.part.1>
    ed0c:	b	ecb0 <rb_run_one_event+0x54>
    ed10:	.word	0x0002d1a4
    ed14:	.word	0x0001a7b8

0000ed18 <rb_event_run>:
    ed18:	strd	r4, [sp, #-32]!	; 0xffffffe0
    ed1c:	strd	r6, [sp, #8]
    ed20:	strd	r8, [sp, #16]
    ed24:	str	sl, [sp, #24]
    ed28:	str	lr, [sp, #28]
    ed2c:	bl	c2a8 <rb_io_supports_event>
    ed30:	cmp	r0, #0
    ed34:	bne	ee3c <rb_event_run+0x124>
    ed38:	ldr	r3, [pc, #492]	; ef2c <rb_event_run+0x214>
    ed3c:	mvn	r1, #0
    ed40:	ldr	r2, [pc, #488]	; ef30 <rb_event_run+0x218>
    ed44:	add	r3, pc, r3
    ed48:	ldr	r3, [r3]
    ed4c:	add	r2, pc, r2
    ed50:	str	r1, [r2]
    ed54:	cmp	r3, #0
    ed58:	beq	ee3c <rb_event_run+0x124>
    ed5c:	ldr	r4, [r3]
    ed60:	ldr	r8, [pc, #460]	; ef34 <rb_event_run+0x21c>
    ed64:	ldr	r5, [r3, #8]
    ed68:	ldr	r3, [r4, #44]	; 0x2c
    ed6c:	add	r8, pc, r8
    ed70:	ldr	r6, [pc, #448]	; ef38 <rb_event_run+0x220>
    ed74:	add	r7, r8, #12
    ed78:	cmp	r3, #0
    ed7c:	add	r6, pc, r6
    ed80:	beq	ee00 <rb_event_run+0xe8>
    ed84:	ldr	r3, [r4, #4]
    ed88:	ldr	r2, [r4, #8]
    ed8c:	cmp	r2, #0
    ed90:	beq	eebc <rb_event_run+0x1a4>
    ed94:	str	r3, [r2, #4]
    ed98:	ldr	r3, [r4, #4]
    ed9c:	cmp	r3, #0
    eda0:	strne	r2, [r3, #8]
    eda4:	beq	eeac <rb_event_run+0x194>
    eda8:	ldr	r2, [pc, #396]	; ef3c <rb_event_run+0x224>
    edac:	add	r2, pc, r2
    edb0:	mov	r3, #0
    edb4:	ldr	r0, [r4, #20]
    edb8:	str	r3, [r4, #4]
    edbc:	str	r3, [r4, #8]
    edc0:	ldr	r3, [r2, #8]
    edc4:	cmp	r0, #0
    edc8:	sub	r3, r3, #1
    edcc:	str	r3, [r2, #8]
    edd0:	beq	edd8 <rb_event_run+0xc0>
    edd4:	bl	46d4 <free@plt>
    edd8:	mov	r0, r4
    eddc:	bl	46d4 <free@plt>
    ede0:	cmp	r5, #0
    ede4:	beq	ee3c <rb_event_run+0x124>
    ede8:	mov	r3, r5
    edec:	ldr	r5, [r5, #8]
    edf0:	ldr	r4, [r3]
    edf4:	ldr	r3, [r4, #44]	; 0x2c
    edf8:	cmp	r3, #0
    edfc:	bne	ed84 <rb_event_run+0x6c>
    ee00:	ldr	r9, [r4, #28]
    ee04:	bl	47d0 <rb_current_time@plt>
    ee08:	cmp	r9, r0
    ee0c:	ble	ee54 <rb_event_run+0x13c>
    ee10:	ldr	r2, [r6]
    ee14:	ldr	r1, [r4, #28]
    ee18:	cmn	r2, #1
    ee1c:	movne	r3, #0
    ee20:	moveq	r3, #1
    ee24:	cmp	r1, r2
    ee28:	orrlt	r3, r3, #1
    ee2c:	cmp	r3, #0
    ee30:	strne	r1, [r6]
    ee34:	cmp	r5, #0
    ee38:	bne	ede8 <rb_event_run+0xd0>
    ee3c:	ldrd	r4, [sp]
    ee40:	ldrd	r6, [sp, #8]
    ee44:	ldrd	r8, [sp, #16]
    ee48:	ldr	sl, [sp, #24]
    ee4c:	add	sp, sp, #28
    ee50:	pop	{pc}		; (ldr pc, [sp], #4)
    ee54:	mov	r2, #33	; 0x21
    ee58:	mov	r0, r7
    ee5c:	ldr	r1, [r4, #20]
    ee60:	bl	4680 <rb_strlcpy@plt>
    ee64:	ldr	r3, [r4, #12]
    ee68:	ldr	r0, [r4, #16]
    ee6c:	blx	r3
    ee70:	ldr	r3, [r4, #24]
    ee74:	cmp	r3, #0
    ee78:	bne	eecc <rb_event_run+0x1b4>
    ee7c:	ldr	r3, [r4, #4]
    ee80:	ldr	r2, [r4, #8]
    ee84:	cmp	r2, #0
    ee88:	strne	r3, [r2, #4]
    ee8c:	ldrne	r3, [r4, #4]
    ee90:	streq	r3, [r8, #4]
    ee94:	cmp	r3, #0
    ee98:	strne	r2, [r3, #8]
    ee9c:	beq	ef14 <rb_event_run+0x1fc>
    eea0:	ldr	r2, [pc, #152]	; ef40 <rb_event_run+0x228>
    eea4:	add	r2, pc, r2
    eea8:	b	edb0 <rb_event_run+0x98>
    eeac:	ldr	r3, [pc, #144]	; ef44 <rb_event_run+0x22c>
    eeb0:	add	r3, pc, r3
    eeb4:	str	r2, [r3]
    eeb8:	b	eda8 <rb_event_run+0x90>
    eebc:	ldr	r1, [pc, #132]	; ef48 <rb_event_run+0x230>
    eec0:	add	r1, pc, r1
    eec4:	str	r3, [r1, #4]
    eec8:	b	ed9c <rb_event_run+0x84>
    eecc:	bl	47d0 <rb_current_time@plt>
    eed0:	mov	r9, r0
    eed4:	ldr	r0, [r4, #24]
    eed8:	cmp	r0, #0
    eedc:	blt	ef24 <rb_event_run+0x20c>
    eee0:	ldr	r1, [pc, #100]	; ef4c <rb_event_run+0x234>
    eee4:	add	r0, r9, r0
    eee8:	str	r0, [r4, #28]
    eeec:	add	r1, pc, r1
    eef0:	ldr	r2, [r1]
    eef4:	cmn	r2, #1
    eef8:	movne	r3, #0
    eefc:	moveq	r3, #1
    ef00:	cmp	r0, r2
    ef04:	orrlt	r3, r3, #1
    ef08:	cmp	r3, #0
    ef0c:	strne	r0, [r1]
    ef10:	b	ede0 <rb_event_run+0xc8>
    ef14:	ldr	r3, [pc, #52]	; ef50 <rb_event_run+0x238>
    ef18:	add	r3, pc, r3
    ef1c:	str	r2, [r3]
    ef20:	b	eea0 <rb_event_run+0x188>
    ef24:	bl	e920 <rb_event_frequency.part.1>
    ef28:	b	eee0 <rb_event_run+0x1c8>
    ef2c:	.word	0x0002d0d8
    ef30:	.word	0x0001a72c
    ef34:	.word	0x0002d0b0
    ef38:	.word	0x0001a6fc
    ef3c:	.word	0x0002d070
    ef40:	.word	0x0002cf78
    ef44:	.word	0x0002cf6c
    ef48:	.word	0x0002cf5c
    ef4c:	.word	0x0001a58c
    ef50:	.word	0x0002cf04

0000ef54 <rb_event_io_register_all>:
    ef54:	str	r4, [sp, #-8]!
    ef58:	str	lr, [sp, #4]
    ef5c:	bl	c2a8 <rb_io_supports_event>
    ef60:	cmp	r0, #0
    ef64:	beq	ef94 <rb_event_io_register_all+0x40>
    ef68:	ldr	r3, [pc, #48]	; efa0 <rb_event_io_register_all+0x4c>
    ef6c:	ldr	r4, [pc, r3]
    ef70:	cmp	r4, #0
    ef74:	beq	ef94 <rb_event_io_register_all+0x40>
    ef78:	ldr	r3, [r4]
    ef7c:	mov	r0, r3
    ef80:	ldr	r1, [r3, #32]
    ef84:	bl	c1bc <rb_io_sched_event>
    ef88:	ldr	r4, [r4, #8]
    ef8c:	cmp	r4, #0
    ef90:	bne	ef78 <rb_event_io_register_all+0x24>
    ef94:	ldr	r4, [sp]
    ef98:	add	sp, sp, #4
    ef9c:	pop	{pc}		; (ldr pc, [sp], #4)
    efa0:	.word	0x0002ceb0

0000efa4 <rb_event_init>:
    efa4:	ldr	r0, [pc, #20]	; efc0 <rb_event_init+0x1c>
    efa8:	mov	r2, #33	; 0x21
    efac:	ldr	r1, [pc, #16]	; efc4 <rb_event_init+0x20>
    efb0:	add	r0, pc, r0
    efb4:	add	r0, r0, #12
    efb8:	add	r1, pc, r1
    efbc:	b	4680 <rb_strlcpy@plt>
    efc0:	.word	0x0002ce6c
    efc4:	.word	0x00008660

0000efc8 <rb_dump_events>:
    efc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
    efcc:	ldr	r4, [pc, #220]	; f0b0 <rb_dump_events+0xe8>
    efd0:	strd	r6, [sp, #8]
    efd4:	ldr	r2, [pc, #216]	; f0b4 <rb_dump_events+0xec>
    efd8:	strd	r8, [sp, #16]
    efdc:	mov	r8, r0
    efe0:	mov	r9, r1
    efe4:	strd	sl, [sp, #24]
    efe8:	mov	r1, #512	; 0x200
    efec:	str	lr, [sp, #32]
    eff0:	sub	sp, sp, #524	; 0x20c
    eff4:	add	r4, pc, r4
    eff8:	add	r7, sp, #8
    effc:	add	r3, r4, #12
    f000:	add	r2, pc, r2
    f004:	mov	r0, r7
    f008:	bl	4b84 <snprintf@plt>
    f00c:	mov	r1, r9
    f010:	mov	r0, r7
    f014:	blx	r8
    f018:	ldr	r1, [pc, #152]	; f0b8 <rb_dump_events+0xf0>
    f01c:	mov	r2, #512	; 0x200
    f020:	mov	r0, r7
    f024:	add	r1, pc, r1
    f028:	bl	4680 <rb_strlcpy@plt>
    f02c:	mov	r1, r9
    f030:	mov	r0, r7
    f034:	blx	r8
    f038:	ldr	r4, [r4]
    f03c:	cmp	r4, #0
    f040:	beq	f094 <rb_dump_events+0xcc>
    f044:	ldr	sl, [pc, #112]	; f0bc <rb_dump_events+0xf4>
    f048:	add	sl, pc, sl
    f04c:	ldr	r6, [r4]
    f050:	ldr	fp, [r6, #20]
    f054:	ldr	r5, [r6, #28]
    f058:	bl	47d0 <rb_current_time@plt>
    f05c:	ldr	ip, [r6, #24]
    f060:	mov	r2, sl
    f064:	mov	r1, #512	; 0x200
    f068:	mov	r3, fp
    f06c:	sub	r5, r5, r0
    f070:	mov	r0, r7
    f074:	stm	sp, {r5, ip}
    f078:	bl	4b84 <snprintf@plt>
    f07c:	mov	r1, r9
    f080:	mov	r0, r7
    f084:	blx	r8
    f088:	ldr	r4, [r4, #8]
    f08c:	cmp	r4, #0
    f090:	bne	f04c <rb_dump_events+0x84>
    f094:	add	sp, sp, #524	; 0x20c
    f098:	ldrd	r4, [sp]
    f09c:	ldrd	r6, [sp, #8]
    f0a0:	ldrd	r8, [sp, #16]
    f0a4:	ldrd	sl, [sp, #24]
    f0a8:	add	sp, sp, #32
    f0ac:	pop	{pc}		; (ldr pc, [sp], #4)
    f0b0:	.word	0x0002ce28
    f0b4:	.word	0x00008620
    f0b8:	.word	0x00008614
    f0bc:	.word	0x0000861c

0000f0c0 <rb_set_back_events>:
    f0c0:	ldr	r3, [pc, #52]	; f0fc <rb_set_back_events+0x3c>
    f0c4:	add	r3, pc, r3
    f0c8:	ldr	r3, [r3]
    f0cc:	cmp	r3, #0
    f0d0:	beq	f0f8 <rb_set_back_events+0x38>
    f0d4:	ldr	r2, [r3]
    f0d8:	mov	r1, #0
    f0dc:	ldr	r3, [r3, #8]
    f0e0:	ldr	ip, [r2, #28]
    f0e4:	cmp	ip, r0
    f0e8:	subgt	r1, ip, r0
    f0ec:	cmp	r3, #0
    f0f0:	str	r1, [r2, #28]
    f0f4:	bne	f0d4 <rb_set_back_events+0x14>
    f0f8:	bx	lr
    f0fc:	.word	0x0002cd58

0000f100 <rb_event_update>:
    f100:	strd	r4, [sp, #-16]!
    f104:	subs	r5, r0, #0
    f108:	str	r6, [sp, #8]
    f10c:	str	lr, [sp, #12]
    f110:	beq	f138 <rb_event_update+0x38>
    f114:	cmp	r1, #0
    f118:	mov	r4, r1
    f11c:	str	r1, [r5, #24]
    f120:	blt	f164 <rb_event_update+0x64>
    f124:	bl	47d0 <rb_current_time@plt>
    f128:	ldr	r3, [r5, #28]
    f12c:	add	r0, r0, r4
    f130:	cmp	r0, r3
    f134:	blt	f148 <rb_event_update+0x48>
    f138:	ldrd	r4, [sp]
    f13c:	ldr	r6, [sp, #8]
    f140:	add	sp, sp, #12
    f144:	pop	{pc}		; (ldr pc, [sp], #4)
    f148:	bl	47d0 <rb_current_time@plt>
    f14c:	add	r0, r0, r4
    f150:	ldr	r6, [sp, #8]
    f154:	str	r0, [r5, #28]
    f158:	ldrd	r4, [sp]
    f15c:	add	sp, sp, #12
    f160:	pop	{pc}		; (ldr pc, [sp], #4)
    f164:	mov	r0, r1
    f168:	bl	e920 <rb_event_frequency.part.1>
    f16c:	mov	r4, r0
    f170:	b	f124 <rb_event_update+0x24>

0000f174 <rb_event_next>:
    f174:	ldr	r3, [pc, #4]	; f180 <rb_event_next+0xc>
    f178:	ldr	r0, [pc, r3]
    f17c:	bx	lr
    f180:	.word	0x0001a300

0000f184 <rb_ctime>:
    f184:	strd	r4, [sp, #-12]!
    f188:	mov	r4, r1
    f18c:	mov	r5, r2
    f190:	str	lr, [sp, #8]
    f194:	sub	sp, sp, #84	; 0x54
    f198:	add	r1, sp, #36	; 0x24
    f19c:	str	r0, [sp, #28]
    f1a0:	add	r0, sp, #28
    f1a4:	bl	49c8 <gmtime_r@plt>
    f1a8:	cmp	r4, #0
    f1ac:	mov	ip, r0
    f1b0:	beq	f234 <rb_ctime+0xb0>
    f1b4:	cmp	ip, #0
    f1b8:	beq	f248 <rb_ctime+0xc4>
    f1bc:	ldr	r3, [ip, #20]
    f1c0:	mov	r1, r5
    f1c4:	mov	r0, r4
    f1c8:	ldr	lr, [pc, #144]	; f260 <rb_ctime+0xdc>
    f1cc:	ldr	r5, [ip, #24]
    f1d0:	add	r3, r3, #1888	; 0x760
    f1d4:	add	r3, r3, #12
    f1d8:	add	lr, pc, lr
    f1dc:	str	r3, [sp, #20]
    f1e0:	ldr	r2, [ip]
    f1e4:	ldr	r3, [lr, r5, lsl #2]
    f1e8:	str	r2, [sp, #16]
    f1ec:	ldr	r5, [ip, #4]
    f1f0:	ldr	r2, [pc, #108]	; f264 <rb_ctime+0xe0>
    f1f4:	str	r5, [sp, #12]
    f1f8:	ldr	r5, [ip, #8]
    f1fc:	add	r2, pc, r2
    f200:	str	r5, [sp, #8]
    f204:	ldr	r5, [ip, #12]
    f208:	str	r5, [sp, #4]
    f20c:	ldr	ip, [ip, #16]
    f210:	add	lr, lr, ip, lsl #2
    f214:	ldr	ip, [lr, #28]
    f218:	str	ip, [sp]
    f21c:	bl	4b84 <snprintf@plt>
    f220:	mov	r0, r4
    f224:	add	sp, sp, #84	; 0x54
    f228:	ldrd	r4, [sp]
    f22c:	add	sp, sp, #8
    f230:	pop	{pc}		; (ldr pc, [sp], #4)
    f234:	ldr	r4, [pc, #44]	; f268 <rb_ctime+0xe4>
    f238:	cmp	ip, #0
    f23c:	mov	r5, #128	; 0x80
    f240:	add	r4, pc, r4
    f244:	bne	f1bc <rb_ctime+0x38>
    f248:	ldr	r1, [pc, #28]	; f26c <rb_ctime+0xe8>
    f24c:	mov	r2, r5
    f250:	mov	r0, r4
    f254:	add	r1, pc, r1
    f258:	bl	4680 <rb_strlcpy@plt>
    f25c:	b	f220 <rb_ctime+0x9c>
    f260:	.word	0x00019c80
    f264:	.word	0x000086d0
    f268:	.word	0x0002cc0c
    f26c:	.word	0x000089b8

0000f270 <rb_date>:
    f270:	strd	r4, [sp, #-12]!
    f274:	mov	r5, r1
    f278:	mov	r4, r2
    f27c:	str	lr, [sp, #8]
    f280:	sub	sp, sp, #84	; 0x54
    f284:	add	r1, sp, #36	; 0x24
    f288:	str	r0, [sp, #28]
    f28c:	add	r0, sp, #28
    f290:	bl	49c8 <gmtime_r@plt>
    f294:	subs	ip, r0, #0
    f298:	beq	f318 <rb_date+0xa8>
    f29c:	ldr	r2, [ip]
    f2a0:	mov	r1, r4
    f2a4:	mov	r0, r5
    f2a8:	ldr	r3, [ip, #24]
    f2ac:	ldr	lr, [pc, #124]	; f330 <rb_date+0xc0>
    f2b0:	str	r2, [sp, #20]
    f2b4:	ldr	r2, [ip, #4]
    f2b8:	add	lr, pc, lr
    f2bc:	add	r3, lr, r3, lsl #2
    f2c0:	str	r2, [sp, #16]
    f2c4:	ldr	r2, [ip, #8]
    f2c8:	ldr	r3, [r3, #76]	; 0x4c
    f2cc:	str	r2, [sp, #12]
    f2d0:	ldr	r4, [ip, #20]
    f2d4:	ldr	r2, [pc, #88]	; f334 <rb_date+0xc4>
    f2d8:	add	r4, r4, #1888	; 0x760
    f2dc:	add	r4, r4, #12
    f2e0:	add	r2, pc, r2
    f2e4:	str	r4, [sp, #8]
    f2e8:	ldr	r4, [ip, #12]
    f2ec:	str	r4, [sp, #4]
    f2f0:	ldr	ip, [ip, #16]
    f2f4:	add	lr, lr, ip, lsl #2
    f2f8:	ldr	ip, [lr, #104]	; 0x68
    f2fc:	str	ip, [sp]
    f300:	bl	4b84 <snprintf@plt>
    f304:	mov	r0, r5
    f308:	add	sp, sp, #84	; 0x54
    f30c:	ldrd	r4, [sp]
    f310:	add	sp, sp, #8
    f314:	pop	{pc}		; (ldr pc, [sp], #4)
    f318:	ldr	r1, [pc, #24]	; f338 <rb_date+0xc8>
    f31c:	mov	r2, r4
    f320:	mov	r0, r5
    f324:	add	r1, pc, r1
    f328:	bl	4680 <rb_strlcpy@plt>
    f32c:	b	f304 <rb_date+0x94>
    f330:	.word	0x00019ba0
    f334:	.word	0x00008608
    f338:	.word	0x000088e8

0000f33c <rb_current_time>:
    f33c:	ldr	r3, [pc, #8]	; f34c <rb_current_time+0x10>
    f340:	add	r3, pc, r3
    f344:	ldr	r0, [r3, #128]	; 0x80
    f348:	bx	lr
    f34c:	.word	0x0002cb0c

0000f350 <rb_current_time_tv>:
    f350:	ldr	r0, [pc, #8]	; f360 <rb_current_time_tv+0x10>
    f354:	add	r0, pc, r0
    f358:	add	r0, r0, #128	; 0x80
    f35c:	bx	lr
    f360:	.word	0x0002caf8

0000f364 <rb_lib_log>:
    f364:	push	{r0, r1, r2, r3}
    f368:	strd	r4, [sp, #-12]!
    f36c:	ldr	r4, [pc, #88]	; f3cc <rb_lib_log+0x68>
    f370:	add	r4, pc, r4
    f374:	ldr	r3, [r4, #136]	; 0x88
    f378:	str	lr, [sp, #8]
    f37c:	sub	sp, sp, #12
    f380:	cmp	r3, #0
    f384:	beq	f3b4 <rb_lib_log+0x50>
    f388:	add	ip, sp, #28
    f38c:	add	r5, r4, #140	; 0x8c
    f390:	ldr	r2, [sp, #24]
    f394:	mov	r3, ip
    f398:	mov	r0, r5
    f39c:	mov	r1, #512	; 0x200
    f3a0:	str	ip, [sp, #4]
    f3a4:	bl	4530 <vsnprintf@plt>
    f3a8:	mov	r0, r5
    f3ac:	ldr	r3, [r4, #136]	; 0x88
    f3b0:	blx	r3
    f3b4:	add	sp, sp, #12
    f3b8:	ldrd	r4, [sp]
    f3bc:	ldr	lr, [sp, #8]
    f3c0:	add	sp, sp, #12
    f3c4:	add	sp, sp, #16
    f3c8:	bx	lr
    f3cc:	.word	0x0002cadc

0000f3d0 <rb_lib_die>:
    f3d0:	push	{r0, r1, r2, r3}
    f3d4:	strd	r4, [sp, #-12]!
    f3d8:	ldr	r4, [pc, #92]	; f43c <rb_lib_die+0x6c>
    f3dc:	add	r4, pc, r4
    f3e0:	ldr	r3, [r4, #652]	; 0x28c
    f3e4:	str	lr, [sp, #8]
    f3e8:	sub	sp, sp, #12
    f3ec:	cmp	r3, #0
    f3f0:	beq	f438 <rb_lib_die+0x68>
    f3f4:	add	ip, sp, #28
    f3f8:	add	r5, r4, #140	; 0x8c
    f3fc:	ldr	r2, [sp, #24]
    f400:	mov	r3, ip
    f404:	mov	r1, #512	; 0x200
    f408:	mov	r0, r5
    f40c:	str	ip, [sp, #4]
    f410:	bl	4530 <vsnprintf@plt>
    f414:	ldr	r3, [r4, #652]	; 0x28c
    f418:	mov	r0, r5
    f41c:	blx	r3
    f420:	add	sp, sp, #12
    f424:	ldrd	r4, [sp]
    f428:	ldr	lr, [sp, #8]
    f42c:	add	sp, sp, #12
    f430:	add	sp, sp, #16
    f434:	bx	lr
    f438:	bl	4398 <abort@plt>
    f43c:	.word	0x0002ca70

0000f440 <rb_lib_restart>:
    f440:	ldr	r4, [pc, #72]	; f490 <rb_lib_restart+0x50>
    f444:	push	{r0, r1, r2, r3}
    f448:	push	{lr}		; (str lr, [sp, #-4]!)
    f44c:	sub	sp, sp, #12
    f450:	add	r4, pc, r4
    f454:	ldr	r3, [r4, #656]	; 0x290
    f458:	cmp	r3, #0
    f45c:	beq	f48c <rb_lib_restart+0x4c>
    f460:	add	ip, sp, #20
    f464:	add	r5, r4, #140	; 0x8c
    f468:	ldr	r2, [sp, #16]
    f46c:	mov	r3, ip
    f470:	mov	r0, r5
    f474:	mov	r1, #512	; 0x200
    f478:	str	ip, [sp, #4]
    f47c:	bl	4530 <vsnprintf@plt>
    f480:	mov	r0, r5
    f484:	ldr	r3, [r4, #656]	; 0x290
    f488:	blx	r3
    f48c:	bl	4398 <abort@plt>
    f490:	.word	0x0002c9fc

0000f494 <rb_set_time>:
    f494:	push	{lr}		; (str lr, [sp, #-4]!)
    f498:	sub	sp, sp, #12
    f49c:	mov	r1, #0
    f4a0:	mov	r0, sp
    f4a4:	bl	4590 <rb_gettimeofday@plt>
    f4a8:	cmn	r0, #1
    f4ac:	beq	f4ec <rb_set_time+0x58>
    f4b0:	ldr	r3, [pc, #92]	; f514 <rb_set_time+0x80>
    f4b4:	ldr	r2, [sp]
    f4b8:	add	r3, pc, r3
    f4bc:	ldr	r0, [r3, #128]	; 0x80
    f4c0:	cmp	r2, r0
    f4c4:	blt	f4e0 <rb_set_time+0x4c>
    f4c8:	ldr	r3, [pc, #72]	; f518 <rb_set_time+0x84>
    f4cc:	ldrd	r0, [sp]
    f4d0:	add	r3, pc, r3
    f4d4:	strd	r0, [r3, #128]	; 0x80
    f4d8:	add	sp, sp, #12
    f4dc:	pop	{pc}		; (ldr pc, [sp], #4)
    f4e0:	sub	r0, r0, r2
    f4e4:	bl	f0c0 <rb_set_back_events>
    f4e8:	b	f4c8 <rb_set_time+0x34>
    f4ec:	bl	4cbc <__errno_location@plt>
    f4f0:	ldr	r0, [r0]
    f4f4:	bl	4374 <strerror@plt>
    f4f8:	mov	r1, r0
    f4fc:	ldr	r0, [pc, #24]	; f51c <rb_set_time+0x88>
    f500:	add	r0, pc, r0
    f504:	bl	48f0 <rb_lib_log@plt>
    f508:	ldr	r0, [pc, #16]	; f520 <rb_set_time+0x8c>
    f50c:	add	r0, pc, r0
    f510:	bl	4a34 <rb_lib_restart@plt>
    f514:	.word	0x0002c994
    f518:	.word	0x0002c97c
    f51c:	.word	0x00008410
    f520:	.word	0x00008418

0000f524 <rb_lib_version>:
    f524:	strd	r4, [sp, #-16]!
    f528:	mov	r1, #512	; 0x200
    f52c:	str	r6, [sp, #8]
    f530:	str	lr, [sp, #12]
    f534:	sub	sp, sp, #520	; 0x208
    f538:	add	r5, sp, #8
    f53c:	ldr	r6, [pc, #80]	; f594 <rb_lib_version+0x70>
    f540:	mov	r0, r5
    f544:	bl	e470 <rb_get_ssl_info>
    f548:	ldr	r3, [pc, #72]	; f598 <rb_lib_version+0x74>
    f54c:	mov	r1, #640	; 0x280
    f550:	add	r6, pc, r6
    f554:	ldr	r4, [pc, #64]	; f59c <rb_lib_version+0x78>
    f558:	ldr	r2, [pc, #64]	; f5a0 <rb_lib_version+0x7c>
    f55c:	ldr	r3, [r6, r3]
    f560:	add	r4, pc, r4
    f564:	str	r5, [sp]
    f568:	add	r4, r4, #660	; 0x294
    f56c:	add	r2, pc, r2
    f570:	mov	r0, r4
    f574:	ldr	r3, [r3]
    f578:	bl	4b84 <snprintf@plt>
    f57c:	mov	r0, r4
    f580:	add	sp, sp, #520	; 0x208
    f584:	ldrd	r4, [sp]
    f588:	ldr	r6, [sp, #8]
    f58c:	add	sp, sp, #12
    f590:	pop	{pc}		; (ldr pc, [sp], #4)
    f594:	.word	0x00019aa8
    f598:	.word	0x000003a8
    f59c:	.word	0x0002c8ec
    f5a0:	.word	0x000083c8

0000f5a4 <rb_lib_init>:
    f5a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    f5a8:	mov	r5, r3
    f5ac:	strd	r6, [sp, #8]
    f5b0:	strd	r8, [sp, #16]
    f5b4:	mov	r8, r1
    f5b8:	mov	r9, r2
    f5bc:	str	sl, [sp, #24]
    f5c0:	mov	sl, r0
    f5c4:	str	lr, [sp, #28]
    f5c8:	ldr	r6, [sp, #32]
    f5cc:	ldr	r4, [sp, #36]	; 0x24
    f5d0:	ldr	r7, [sp, #40]	; 0x28
    f5d4:	bl	4968 <rb_set_time@plt>
    f5d8:	ldr	ip, [pc, #112]	; f650 <rb_lib_init+0xac>
    f5dc:	add	ip, pc, ip
    f5e0:	str	sl, [ip, #136]	; 0x88
    f5e4:	str	r9, [ip, #652]	; 0x28c
    f5e8:	str	r8, [ip, #656]	; 0x290
    f5ec:	bl	45d8 <rb_event_init@plt>
    f5f0:	bl	49b0 <rb_init_bh@plt>
    f5f4:	mov	r2, r7
    f5f8:	mov	r1, r6
    f5fc:	mov	r0, r5
    f600:	bl	4ad0 <rb_fdlist_init@plt>
    f604:	bl	435c <rb_init_netio@plt>
    f608:	mov	r0, r4
    f60c:	bl	48b4 <rb_init_rb_dlink_nodes@plt>
    f610:	bl	c2a8 <rb_io_supports_event>
    f614:	cmp	r0, #0
    f618:	bne	f634 <rb_lib_init+0x90>
    f61c:	ldrd	r4, [sp]
    f620:	ldrd	r6, [sp, #8]
    f624:	ldrd	r8, [sp, #16]
    f628:	ldr	sl, [sp, #24]
    f62c:	add	sp, sp, #28
    f630:	pop	{pc}		; (ldr pc, [sp], #4)
    f634:	ldrd	r4, [sp]
    f638:	ldrd	r6, [sp, #8]
    f63c:	ldrd	r8, [sp, #16]
    f640:	ldr	sl, [sp, #24]
    f644:	ldr	lr, [sp, #28]
    f648:	add	sp, sp, #32
    f64c:	b	c2c8 <rb_io_init_event>
    f650:	.word	0x0002c870

0000f654 <rb_lib_loop>:
    f654:	str	r4, [sp, #-8]!
    f658:	mov	r5, r0
    f65c:	str	lr, [sp, #4]
    f660:	bl	4968 <rb_set_time@plt>
    f664:	bl	c2a8 <rb_io_supports_event>
    f668:	cmp	r0, #0
    f66c:	moveq	r6, #1000	; 0x3e8
    f670:	beq	f698 <rb_lib_loop+0x44>
    f674:	mvn	r0, #0
    f678:	bl	4518 <rb_select@plt>
    f67c:	b	f674 <rb_lib_loop+0x20>
    f680:	bl	4c08 <rb_event_next@plt>
    f684:	subs	r4, r0, #0
    f688:	mvn	r0, #0
    f68c:	bgt	f6a8 <rb_lib_loop+0x54>
    f690:	bl	4518 <rb_select@plt>
    f694:	bl	4998 <rb_event_run@plt>
    f698:	cmp	r5, #0
    f69c:	beq	f680 <rb_lib_loop+0x2c>
    f6a0:	mov	r0, r5
    f6a4:	b	f690 <rb_lib_loop+0x3c>
    f6a8:	bl	47d0 <rb_current_time@plt>
    f6ac:	sub	r4, r4, r0
    f6b0:	mov	r0, #1000	; 0x3e8
    f6b4:	cmp	r4, #0
    f6b8:	mulgt	r0, r6, r4
    f6bc:	b	f690 <rb_lib_loop+0x3c>

0000f6c0 <rb_strtok_r>:
    f6c0:	b	4a28 <strtok_r@plt>

0000f6c4 <rb_base64_encode>:
    f6c4:	cmn	r1, #2
    f6c8:	blt	f80c <rb_base64_encode+0x148>
    f6cc:	movw	r3, #43691	; 0xaaab
    f6d0:	movt	r3, #43690	; 0xaaaa
    f6d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    f6d8:	mov	r4, r1
    f6dc:	add	r1, r1, #2
    f6e0:	strd	r6, [sp, #8]
    f6e4:	mov	r5, r0
    f6e8:	mov	r0, #1
    f6ec:	strd	r8, [sp, #16]
    f6f0:	umull	r3, r1, r3, r1
    f6f4:	str	sl, [sp, #24]
    f6f8:	str	lr, [sp, #28]
    f6fc:	lsr	r1, r1, r0
    f700:	add	r1, r1, r1, lsl #2
    f704:	bl	45c0 <calloc@plt>
    f708:	cmp	r0, #0
    f70c:	beq	f830 <rb_base64_encode+0x16c>
    f710:	cmp	r4, #2
    f714:	movle	r8, r0
    f718:	ble	f790 <rb_base64_encode+0xcc>
    f71c:	ldr	lr, [pc, #272]	; f834 <rb_base64_encode+0x170>
    f720:	add	r2, r5, #3
    f724:	add	r3, r0, #4
    f728:	add	lr, pc, lr
    f72c:	ldrb	r1, [r2, #-3]
    f730:	sub	r4, r4, #3
    f734:	mov	r5, r2
    f738:	cmp	r4, #2
    f73c:	mov	r8, r3
    f740:	ldrb	r9, [r2, #-2]
    f744:	add	r3, r3, #4
    f748:	add	r2, r2, #3
    f74c:	ldrb	r6, [r2, #-4]
    f750:	lsl	ip, r1, #4
    f754:	ldrb	r7, [lr, r1, lsr #2]
    f758:	lsl	r1, r9, #2
    f75c:	and	ip, ip, #48	; 0x30
    f760:	add	ip, lr, ip
    f764:	and	r1, r1, #60	; 0x3c
    f768:	and	sl, r6, #63	; 0x3f
    f76c:	ldrb	ip, [ip, r9, lsr #4]
    f770:	add	r1, lr, r1
    f774:	ldrb	r6, [r1, r6, lsr #6]
    f778:	strb	r7, [r3, #-8]
    f77c:	ldrb	r1, [lr, sl]
    f780:	strb	ip, [r3, #-7]
    f784:	strb	r6, [r3, #-6]
    f788:	strb	r1, [r3, #-5]
    f78c:	bgt	f72c <rb_base64_encode+0x68>
    f790:	cmp	r4, #0
    f794:	beq	f7ec <rb_base64_encode+0x128>
    f798:	ldr	r1, [pc, #152]	; f838 <rb_base64_encode+0x174>
    f79c:	mov	r2, r8
    f7a0:	cmp	r4, #2
    f7a4:	ldrb	ip, [r5]
    f7a8:	add	r1, pc, r1
    f7ac:	lsl	r3, ip, #4
    f7b0:	ldrb	ip, [r1, ip, lsr #2]
    f7b4:	and	r3, r3, #48	; 0x30
    f7b8:	strb	ip, [r2], #4
    f7bc:	bne	f814 <rb_base64_encode+0x150>
    f7c0:	ldrb	lr, [r5, #1]
    f7c4:	mov	ip, #61	; 0x3d
    f7c8:	add	r3, r1, r3
    f7cc:	strb	ip, [r8, #3]
    f7d0:	lsl	ip, lr, #2
    f7d4:	ldrb	lr, [r3, lr, lsr #4]
    f7d8:	and	r3, ip, #60	; 0x3c
    f7dc:	ldrb	r3, [r1, r3]
    f7e0:	strb	lr, [r8, #1]
    f7e4:	strb	r3, [r8, #2]
    f7e8:	mov	r8, r2
    f7ec:	mov	r3, #0
    f7f0:	strb	r3, [r8]
    f7f4:	ldrd	r4, [sp]
    f7f8:	ldrd	r6, [sp, #8]
    f7fc:	ldrd	r8, [sp, #16]
    f800:	ldr	sl, [sp, #24]
    f804:	add	sp, sp, #28
    f808:	pop	{pc}		; (ldr pc, [sp], #4)
    f80c:	mov	r0, #0
    f810:	bx	lr
    f814:	ldrb	r1, [r1, r3]
    f818:	mov	r3, #61	; 0x3d
    f81c:	strb	r1, [r8, #1]
    f820:	strb	r3, [r8, #2]
    f824:	strb	r3, [r8, #3]
    f828:	mov	r8, r2
    f82c:	b	f7ec <rb_base64_encode+0x128>
    f830:	bl	495c <rb_outofmemory@plt>
    f834:	.word	0x00007f60
    f838:	.word	0x00007ee0

0000f83c <rb_base64_decode>:
    f83c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    f840:	mov	r4, r1
    f844:	mov	r5, r0
    f848:	add	r1, r1, #1
    f84c:	mov	r0, #1
    f850:	strd	r6, [sp, #8]
    f854:	mov	r6, r2
    f858:	strd	r8, [sp, #16]
    f85c:	str	sl, [sp, #24]
    f860:	str	lr, [sp, #28]
    f864:	bl	45c0 <calloc@plt>
    f868:	cmp	r0, #0
    f86c:	beq	f9a4 <rb_base64_decode+0x168>
    f870:	ldr	r7, [pc, #312]	; f9b0 <rb_base64_decode+0x174>
    f874:	mov	lr, #0
    f878:	mov	ip, r5
    f87c:	mov	r2, lr
    f880:	add	r7, pc, r7
    f884:	ldrb	r1, [ip], #1
    f888:	cmp	r1, #0
    f88c:	beq	f8f4 <rb_base64_decode+0xb8>
    f890:	rsb	r3, ip, #1
    f894:	add	r3, r3, r4
    f898:	add	r3, r5, r3
    f89c:	cmp	r3, #0
    f8a0:	ble	f964 <rb_base64_decode+0x128>
    f8a4:	cmp	r1, #61	; 0x3d
    f8a8:	beq	f96c <rb_base64_decode+0x130>
    f8ac:	add	r1, r7, r1, lsl #1
    f8b0:	ldrsh	r3, [r1, #68]	; 0x44
    f8b4:	cmp	r3, #0
    f8b8:	blt	f884 <rb_base64_decode+0x48>
    f8bc:	and	r1, r2, #3
    f8c0:	add	r8, r0, lr
    f8c4:	cmp	r1, #2
    f8c8:	beq	f948 <rb_base64_decode+0x10c>
    f8cc:	cmp	r1, #3
    f8d0:	beq	f934 <rb_base64_decode+0xf8>
    f8d4:	cmp	r1, #1
    f8d8:	beq	f918 <rb_base64_decode+0xdc>
    f8dc:	lsl	r3, r3, #2
    f8e0:	strb	r3, [r8]
    f8e4:	ldrb	r1, [ip], #1
    f8e8:	add	r2, r2, #1
    f8ec:	cmp	r1, #0
    f8f0:	bne	f890 <rb_base64_decode+0x54>
    f8f4:	mov	r3, #0
    f8f8:	str	lr, [r6]
    f8fc:	strb	r3, [r0, lr]
    f900:	ldrd	r4, [sp]
    f904:	ldrd	r6, [sp, #8]
    f908:	ldrd	r8, [sp, #16]
    f90c:	ldr	sl, [sp, #24]
    f910:	add	sp, sp, #28
    f914:	pop	{pc}		; (ldr pc, [sp], #4)
    f918:	ldrb	r1, [r8]
    f91c:	lsl	r9, r3, #4
    f920:	add	lr, lr, #1
    f924:	orr	r3, r1, r3, asr #4
    f928:	strb	r3, [r8]
    f92c:	strb	r9, [r0, lr]
    f930:	b	f8e4 <rb_base64_decode+0xa8>
    f934:	ldrb	r1, [r8]
    f938:	add	lr, lr, #1
    f93c:	orr	r3, r1, r3
    f940:	strb	r3, [r8]
    f944:	b	f8e4 <rb_base64_decode+0xa8>
    f948:	ldrb	r1, [r8]
    f94c:	lsl	r9, r3, #6
    f950:	add	lr, lr, #1
    f954:	orr	r3, r1, r3, asr #2
    f958:	strb	r3, [r8]
    f95c:	strb	r9, [r0, lr]
    f960:	b	f8e4 <rb_base64_decode+0xa8>
    f964:	cmp	r1, #61	; 0x3d
    f968:	bne	f8f4 <rb_base64_decode+0xb8>
    f96c:	and	r2, r2, #3
    f970:	cmp	r2, #2
    f974:	beq	f9a8 <rb_base64_decode+0x16c>
    f978:	cmp	r2, #3
    f97c:	beq	f994 <rb_base64_decode+0x158>
    f980:	cmp	r2, #1
    f984:	bne	f8f4 <rb_base64_decode+0xb8>
    f988:	bl	46d4 <free@plt>
    f98c:	mov	r0, #0
    f990:	b	f900 <rb_base64_decode+0xc4>
    f994:	mov	r3, lr
    f998:	mov	r2, #0
    f99c:	strb	r2, [r0, r3]
    f9a0:	b	f8f4 <rb_base64_decode+0xb8>
    f9a4:	bl	495c <rb_outofmemory@plt>
    f9a8:	add	r3, lr, #1
    f9ac:	b	f998 <rb_base64_decode+0x15c>
    f9b0:	.word	0x00007e08

0000f9b4 <rb_outofmemory>:
    f9b4:	ldr	r3, [pc, #56]	; f9f4 <rb_outofmemory+0x40>
    f9b8:	str	r4, [sp, #-8]!
    f9bc:	add	r3, pc, r3
    f9c0:	ldr	r2, [r3]
    f9c4:	str	lr, [sp, #4]
    f9c8:	cmp	r2, #0
    f9cc:	bne	f9f0 <rb_outofmemory+0x3c>
    f9d0:	ldr	r0, [pc, #32]	; f9f8 <rb_outofmemory+0x44>
    f9d4:	mov	r2, #1
    f9d8:	str	r2, [r3]
    f9dc:	add	r0, pc, r0
    f9e0:	bl	48f0 <rb_lib_log@plt>
    f9e4:	ldr	r0, [pc, #16]	; f9fc <rb_outofmemory+0x48>
    f9e8:	add	r0, pc, r0
    f9ec:	bl	4a34 <rb_lib_restart@plt>
    f9f0:	bl	4398 <abort@plt>
    f9f4:	.word	0x0002c9a4
    f9f8:	.word	0x00008068
    f9fc:	.word	0x00008080

0000fa00 <rb_linebuf_new_line>:
    fa00:	strd	r4, [sp, #-16]!
    fa04:	mov	r4, r0
    fa08:	str	r6, [sp, #8]
    fa0c:	ldr	r6, [pc, #156]	; fab0 <rb_linebuf_new_line+0xb0>
    fa10:	str	lr, [sp, #12]
    fa14:	add	r6, pc, r6
    fa18:	ldr	r0, [r6]
    fa1c:	bl	492c <rb_bh_alloc@plt>
    fa20:	subs	r5, r0, #0
    fa24:	beq	fa8c <rb_linebuf_new_line+0x8c>
    fa28:	ldr	r3, [r6, #4]
    fa2c:	add	r3, r3, #1
    fa30:	str	r3, [r6, #4]
    fa34:	bl	4b54 <rb_make_rb_dlink_node@plt>
    fa38:	ldr	r3, [r4, #4]
    fa3c:	mov	r2, #0
    fa40:	str	r5, [r0]
    fa44:	cmp	r3, r2
    fa48:	str	r3, [r0, #4]
    fa4c:	str	r2, [r0, #8]
    fa50:	strne	r0, [r3, #8]
    fa54:	beq	faa0 <rb_linebuf_new_line+0xa0>
    fa58:	ldr	r1, [r4, #8]
    fa5c:	str	r0, [r4, #4]
    fa60:	ldr	r2, [r4, #16]
    fa64:	ldr	r3, [r4, #24]
    fa68:	add	r0, r1, #1
    fa6c:	ldr	r1, [r5, #1032]	; 0x408
    fa70:	add	r2, r2, #1
    fa74:	str	r0, [r4, #8]
    fa78:	add	r3, r3, #1
    fa7c:	add	r1, r1, #1
    fa80:	str	r1, [r5, #1032]	; 0x408
    fa84:	str	r2, [r4, #16]
    fa88:	str	r3, [r4, #24]
    fa8c:	mov	r0, r5
    fa90:	ldrd	r4, [sp]
    fa94:	ldr	r6, [sp, #8]
    fa98:	add	sp, sp, #12
    fa9c:	pop	{pc}		; (ldr pc, [sp], #4)
    faa0:	ldr	r3, [r4]
    faa4:	cmp	r3, #0
    faa8:	streq	r0, [r4]
    faac:	b	fa58 <rb_linebuf_new_line+0x58>
    fab0:	.word	0x0002c950

0000fab4 <rb_linebuf_done_line>:
    fab4:	strd	r4, [sp, #-16]!
    fab8:	mov	r5, r1
    fabc:	mov	r4, r0
    fac0:	ldmib	r2, {r1, r3}
    fac4:	str	r6, [sp, #8]
    fac8:	str	lr, [sp, #12]
    facc:	cmp	r3, #0
    fad0:	strne	r1, [r3, #4]
    fad4:	streq	r1, [r0, #4]
    fad8:	ldr	r1, [r2, #4]
    fadc:	cmp	r1, #0
    fae0:	strne	r3, [r1, #8]
    fae4:	mov	r1, #0
    fae8:	streq	r3, [r0]
    faec:	mov	r0, r2
    faf0:	ldr	r3, [r4, #8]
    faf4:	str	r1, [r2, #4]
    faf8:	str	r1, [r2, #8]
    fafc:	sub	r3, r3, #1
    fb00:	str	r3, [r4, #8]
    fb04:	bl	4824 <rb_free_rb_dlink_node@plt>
    fb08:	ldr	r2, [r4, #12]
    fb0c:	ldr	r0, [r4, #16]
    fb10:	ldr	r1, [r4, #24]
    fb14:	ldr	ip, [r5, #1028]	; 0x404
    fb18:	sub	r0, r0, #1
    fb1c:	ldr	r3, [r5, #1032]	; 0x408
    fb20:	sub	r1, r1, #1
    fb24:	str	r0, [r4, #16]
    fb28:	sub	r2, r2, ip
    fb2c:	sub	r3, r3, #1
    fb30:	str	r2, [r4, #12]
    fb34:	cmp	r3, #0
    fb38:	str	r1, [r4, #24]
    fb3c:	str	r3, [r5, #1032]	; 0x408
    fb40:	beq	fb54 <rb_linebuf_done_line+0xa0>
    fb44:	ldrd	r4, [sp]
    fb48:	ldr	r6, [sp, #8]
    fb4c:	add	sp, sp, #12
    fb50:	pop	{pc}		; (ldr pc, [sp], #4)
    fb54:	ldr	r3, [pc, #36]	; fb80 <rb_linebuf_done_line+0xcc>
    fb58:	mov	r1, r5
    fb5c:	ldrd	r4, [sp]
    fb60:	ldr	r6, [sp, #8]
    fb64:	add	r3, pc, r3
    fb68:	ldm	r3, {r0, r2}
    fb6c:	ldr	lr, [sp, #12]
    fb70:	add	sp, sp, #16
    fb74:	sub	r2, r2, #1
    fb78:	str	r2, [r3, #4]
    fb7c:	b	48a8 <rb_bh_free@plt>
    fb80:	.word	0x0002c800

0000fb84 <rb_linebuf_copy_line.isra.2>:
    fb84:	strd	r4, [sp, #-32]!	; 0xffffffe0
    fb88:	mov	r5, #0
    fb8c:	strd	r6, [sp, #8]
    fb90:	strd	r8, [sp, #16]
    fb94:	str	sl, [sp, #24]
    fb98:	str	lr, [sp, #28]
    fb9c:	ldrb	ip, [r1, #1025]	; 0x401
    fba0:	strb	r5, [r1, #1026]	; 0x402
    fba4:	ldr	r7, [r1, #1028]	; 0x404
    fba8:	cmp	ip, #1
    fbac:	add	r6, r1, r7
    fbb0:	beq	fce8 <rb_linebuf_copy_line.isra.2+0x164>
    fbb4:	cmp	r3, r5
    fbb8:	beq	fdb4 <rb_linebuf_copy_line.isra.2+0x230>
    fbbc:	ldrb	r4, [r2]
    fbc0:	cmp	r4, #10
    fbc4:	cmpne	r4, #13
    fbc8:	beq	fda8 <rb_linebuf_copy_line.isra.2+0x224>
    fbcc:	add	lr, r2, #1
    fbd0:	add	r8, r2, r3
    fbd4:	cmp	lr, r8
    fbd8:	sub	r5, r8, lr
    fbdc:	mov	ip, lr
    fbe0:	beq	fd04 <rb_linebuf_copy_line.isra.2+0x180>
    fbe4:	ldrb	r4, [lr], #1
    fbe8:	cmp	r4, #13
    fbec:	cmpne	r4, #10
    fbf0:	bne	fbd4 <rb_linebuf_copy_line.isra.2+0x50>
    fbf4:	cmp	r4, #13
    fbf8:	cmpne	r4, #10
    fbfc:	addeq	lr, ip, r5
    fc00:	subeq	lr, lr, #1
    fc04:	bne	fc24 <rb_linebuf_copy_line.isra.2+0xa0>
    fc08:	cmp	ip, lr
    fc0c:	sub	r5, lr, ip
    fc10:	beq	fd04 <rb_linebuf_copy_line.isra.2+0x180>
    fc14:	ldrb	r4, [ip, #1]!
    fc18:	cmp	r4, #13
    fc1c:	cmpne	r4, #10
    fc20:	beq	fc08 <rb_linebuf_copy_line.isra.2+0x84>
    fc24:	sub	r5, r3, r5
    fc28:	cmn	r5, #1
    fc2c:	beq	fce8 <rb_linebuf_copy_line.isra.2+0x164>
    fc30:	movw	r9, #1022	; 0x3fe
    fc34:	mov	r8, r1
    fc38:	sub	r7, r9, r7
    fc3c:	mov	r4, r0
    fc40:	cmp	r7, r5
    fc44:	mov	r1, r2
    fc48:	blt	fd0c <rb_linebuf_copy_line.isra.2+0x188>
    fc4c:	mov	r2, r5
    fc50:	mov	r0, r6
    fc54:	bl	47e8 <memcpy@plt>
    fc58:	mov	r2, #0
    fc5c:	add	r1, r6, r5
    fc60:	strb	r2, [r6, r5]
    fc64:	ldrb	r3, [r1, #-1]
    fc68:	cmp	r3, #13
    fc6c:	cmpne	r3, #10
    fc70:	movne	r0, #1
    fc74:	moveq	r0, #0
    fc78:	bne	fd88 <rb_linebuf_copy_line.isra.2+0x204>
    fc7c:	cmp	r5, r2
    fc80:	beq	fcc4 <rb_linebuf_copy_line.isra.2+0x140>
    fc84:	cmp	r3, #10
    fc88:	cmpne	r3, #13
    fc8c:	movne	r3, r5
    fc90:	bne	fcc8 <rb_linebuf_copy_line.isra.2+0x144>
    fc94:	sub	r2, r1, #1
    fc98:	sub	ip, r1, r5
    fc9c:	sub	lr, r5, r1
    fca0:	b	fcb4 <rb_linebuf_copy_line.isra.2+0x130>
    fca4:	ldrb	r1, [r2, #-1]!
    fca8:	cmp	r1, #10
    fcac:	cmpne	r1, #13
    fcb0:	bne	fcc8 <rb_linebuf_copy_line.isra.2+0x144>
    fcb4:	mov	r3, r2
    fcb8:	cmp	r2, ip
    fcbc:	strb	r0, [r3], lr
    fcc0:	bne	fca4 <rb_linebuf_copy_line.isra.2+0x120>
    fcc4:	mov	r3, #0
    fcc8:	mov	r2, #1
    fccc:	strb	r2, [r8, #1025]	; 0x401
    fcd0:	ldr	r2, [r4]
    fcd4:	add	r2, r2, r3
    fcd8:	str	r2, [r4]
    fcdc:	ldr	r2, [r8, #1028]	; 0x404
    fce0:	add	r3, r2, r3
    fce4:	str	r3, [r8, #1028]	; 0x404
    fce8:	mov	r0, r5
    fcec:	ldrd	r4, [sp]
    fcf0:	ldrd	r6, [sp, #8]
    fcf4:	ldrd	r8, [sp, #16]
    fcf8:	ldr	sl, [sp, #24]
    fcfc:	add	sp, sp, #28
    fd00:	pop	{pc}		; (ldr pc, [sp], #4)
    fd04:	mov	r5, r3
    fd08:	b	fc28 <rb_linebuf_copy_line.isra.2+0xa4>
    fd0c:	mov	r0, r6
    fd10:	mov	r2, r7
    fd14:	bl	47e8 <memcpy@plt>
    fd18:	mov	r1, #0
    fd1c:	cmp	r7, r1
    fd20:	strb	r1, [r8, #1022]	; 0x3fe
    fd24:	beq	fd68 <rb_linebuf_copy_line.isra.2+0x1e4>
    fd28:	ldrb	r3, [r8, #1021]	; 0x3fd
    fd2c:	cmp	r3, #10
    fd30:	cmpne	r3, #13
    fd34:	bne	fd68 <rb_linebuf_copy_line.isra.2+0x1e4>
    fd38:	add	r9, r8, r9
    fd3c:	add	r3, r8, #1020	; 0x3fc
    fd40:	sub	r7, r9, r7
    fd44:	add	r3, r3, #1
    fd48:	b	fd5c <rb_linebuf_copy_line.isra.2+0x1d8>
    fd4c:	ldrb	r2, [r3, #-1]!
    fd50:	cmp	r2, #10
    fd54:	cmpne	r2, #13
    fd58:	bne	fd68 <rb_linebuf_copy_line.isra.2+0x1e4>
    fd5c:	cmp	r7, r3
    fd60:	strb	r1, [r3]
    fd64:	bne	fd4c <rb_linebuf_copy_line.isra.2+0x1c8>
    fd68:	mov	r3, #1
    fd6c:	movw	r2, #1022	; 0x3fe
    fd70:	strb	r3, [r8, #1025]	; 0x401
    fd74:	str	r2, [r8, #1028]	; 0x404
    fd78:	ldr	r3, [r4]
    fd7c:	add	r3, r3, r2
    fd80:	str	r3, [r4]
    fd84:	b	fce8 <rb_linebuf_copy_line.isra.2+0x164>
    fd88:	ldr	r3, [r4]
    fd8c:	add	r3, r3, r5
    fd90:	str	r3, [r4]
    fd94:	ldr	r3, [r8, #1028]	; 0x404
    fd98:	strb	r2, [r8, #1025]	; 0x401
    fd9c:	add	r3, r3, r5
    fda0:	str	r3, [r8, #1028]	; 0x404
    fda4:	b	fce8 <rb_linebuf_copy_line.isra.2+0x164>
    fda8:	mov	r5, r3
    fdac:	mov	ip, r2
    fdb0:	b	fbf4 <rb_linebuf_copy_line.isra.2+0x70>
    fdb4:	mov	r5, r3
    fdb8:	b	fc30 <rb_linebuf_copy_line.isra.2+0xac>

0000fdbc <rb_linebuf_copy_raw.isra.3>:
    fdbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
    fdc0:	mov	r5, r1
    fdc4:	mov	r1, #1
    fdc8:	strd	r6, [sp, #8]
    fdcc:	strd	r8, [sp, #16]
    fdd0:	str	sl, [sp, #24]
    fdd4:	str	lr, [sp, #28]
    fdd8:	ldrb	ip, [r5, #1025]	; 0x401
    fddc:	strb	r1, [r5, #1026]	; 0x402
    fde0:	ldr	r1, [r5, #1028]	; 0x404
    fde4:	cmp	ip, #1
    fde8:	moveq	r8, #0
    fdec:	add	r7, r5, r1
    fdf0:	beq	fedc <rb_linebuf_copy_raw.isra.3+0x120>
    fdf4:	cmp	r3, #0
    fdf8:	mov	r6, r0
    fdfc:	mov	r4, r3
    fe00:	beq	fe7c <rb_linebuf_copy_raw.isra.3+0xc0>
    fe04:	ldrb	ip, [r2]
    fe08:	cmp	ip, #10
    fe0c:	cmpne	ip, #13
    fe10:	beq	ff4c <rb_linebuf_copy_raw.isra.3+0x190>
    fe14:	add	lr, r2, #1
    fe18:	add	r0, r2, r3
    fe1c:	cmp	lr, r0
    fe20:	sub	r8, r0, lr
    fe24:	mov	r3, lr
    fe28:	beq	fe74 <rb_linebuf_copy_raw.isra.3+0xb8>
    fe2c:	ldrb	ip, [lr], #1
    fe30:	cmp	ip, #13
    fe34:	cmpne	ip, #10
    fe38:	bne	fe1c <rb_linebuf_copy_raw.isra.3+0x60>
    fe3c:	cmp	ip, #10
    fe40:	cmpne	ip, #13
    fe44:	subne	r4, r4, r8
    fe48:	bne	fe74 <rb_linebuf_copy_raw.isra.3+0xb8>
    fe4c:	add	ip, r3, r8
    fe50:	sub	ip, ip, #1
    fe54:	cmp	ip, r3
    fe58:	sub	lr, ip, r3
    fe5c:	beq	fe74 <rb_linebuf_copy_raw.isra.3+0xb8>
    fe60:	ldrb	r0, [r3, #1]!
    fe64:	cmp	r0, #13
    fe68:	cmpne	r0, #10
    fe6c:	beq	fe54 <rb_linebuf_copy_raw.isra.3+0x98>
    fe70:	sub	r4, r4, lr
    fe74:	cmn	r4, #1
    fe78:	beq	ff58 <rb_linebuf_copy_raw.isra.3+0x19c>
    fe7c:	movw	r9, #1022	; 0x3fe
    fe80:	sub	r8, r9, r1
    fe84:	mov	r1, r2
    fe88:	cmp	r8, r4
    fe8c:	blt	fef8 <rb_linebuf_copy_raw.isra.3+0x13c>
    fe90:	mov	r2, r4
    fe94:	mov	r0, r7
    fe98:	bl	47e8 <memcpy@plt>
    fe9c:	mov	r2, #0
    fea0:	add	r3, r7, r4
    fea4:	strb	r2, [r7, r4]
    fea8:	ldrb	r3, [r3, #-1]
    feac:	cmp	r3, #13
    feb0:	cmpne	r3, #10
    feb4:	bne	ff28 <rb_linebuf_copy_raw.isra.3+0x16c>
    feb8:	mov	r3, #1
    febc:	mov	r8, r4
    fec0:	strb	r3, [r5, #1025]	; 0x401
    fec4:	ldr	r3, [r6]
    fec8:	add	r3, r3, r4
    fecc:	str	r3, [r6]
    fed0:	ldr	r3, [r5, #1028]	; 0x404
    fed4:	add	r3, r3, r4
    fed8:	str	r3, [r5, #1028]	; 0x404
    fedc:	mov	r0, r8
    fee0:	ldrd	r4, [sp]
    fee4:	ldrd	r6, [sp, #8]
    fee8:	ldrd	r8, [sp, #16]
    feec:	ldr	sl, [sp, #24]
    fef0:	add	sp, sp, #28
    fef4:	pop	{pc}		; (ldr pc, [sp], #4)
    fef8:	mov	r2, r8
    fefc:	mov	r0, r7
    ff00:	bl	47e8 <memcpy@plt>
    ff04:	mov	r3, #1
    ff08:	mov	r2, #0
    ff0c:	strb	r2, [r5, #1022]	; 0x3fe
    ff10:	strb	r3, [r5, #1025]	; 0x401
    ff14:	str	r9, [r5, #1028]	; 0x404
    ff18:	ldr	r3, [r6]
    ff1c:	add	r9, r3, r9
    ff20:	str	r9, [r6]
    ff24:	b	fedc <rb_linebuf_copy_raw.isra.3+0x120>
    ff28:	ldr	r3, [r6]
    ff2c:	mov	r8, r4
    ff30:	add	r3, r3, r4
    ff34:	str	r3, [r6]
    ff38:	ldr	r3, [r5, #1028]	; 0x404
    ff3c:	strb	r2, [r5, #1025]	; 0x401
    ff40:	add	r3, r3, r4
    ff44:	str	r3, [r5, #1028]	; 0x404
    ff48:	b	fedc <rb_linebuf_copy_raw.isra.3+0x120>
    ff4c:	mov	r8, r3
    ff50:	mov	r3, r2
    ff54:	b	fe3c <rb_linebuf_copy_raw.isra.3+0x80>
    ff58:	mov	r8, r4
    ff5c:	b	fedc <rb_linebuf_copy_raw.isra.3+0x120>

0000ff60 <rb_linebuf_init>:
    ff60:	ldr	r2, [pc, #44]	; ff94 <rb_linebuf_init+0x34>
    ff64:	mov	r1, r0
    ff68:	movw	r0, #1036	; 0x40c
    ff6c:	str	r4, [sp, #-8]!
    ff70:	str	lr, [sp, #4]
    ff74:	add	r2, pc, r2
    ff78:	bl	4a88 <rb_bh_create@plt>
    ff7c:	ldr	r3, [pc, #20]	; ff98 <rb_linebuf_init+0x38>
    ff80:	ldr	r4, [sp]
    ff84:	add	sp, sp, #4
    ff88:	add	r3, pc, r3
    ff8c:	str	r0, [r3]
    ff90:	pop	{pc}		; (ldr pc, [sp], #4)
    ff94:	.word	0x00007b04
    ff98:	.word	0x0002c3dc

0000ff9c <rb_linebuf_newbuf>:
    ff9c:	mov	r3, #0
    ffa0:	str	r3, [r0]
    ffa4:	str	r3, [r0, #4]
    ffa8:	str	r3, [r0, #8]
    ffac:	str	r3, [r0, #12]
    ffb0:	str	r3, [r0, #16]
    ffb4:	str	r3, [r0, #20]
    ffb8:	str	r3, [r0, #24]
    ffbc:	bx	lr

0000ffc0 <rb_linebuf_donebuf>:
    ffc0:	ldr	r2, [r0]
    ffc4:	cmp	r2, #0
    ffc8:	bxeq	lr
    ffcc:	str	r4, [sp, #-8]!
    ffd0:	mov	r4, r0
    ffd4:	str	lr, [sp, #4]
    ffd8:	mov	r0, r4
    ffdc:	ldr	r1, [r2]
    ffe0:	bl	fab4 <rb_linebuf_done_line>
    ffe4:	ldr	r2, [r4]
    ffe8:	cmp	r2, #0
    ffec:	bne	ffd8 <rb_linebuf_donebuf+0x18>
    fff0:	ldr	r4, [sp]
    fff4:	add	sp, sp, #4
    fff8:	pop	{pc}		; (ldr pc, [sp], #4)

0000fffc <rb_linebuf_parse>:
    fffc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10000:	mov	r5, r1
   10004:	mov	r4, r2
   10008:	strd	r6, [sp, #8]
   1000c:	mov	r7, r0
   10010:	ldr	r6, [r0, #4]
   10014:	strd	r8, [sp, #16]
   10018:	mov	r8, r3
   1001c:	str	sl, [sp, #24]
   10020:	str	lr, [sp, #28]
   10024:	cmp	r6, #0
   10028:	beq	10068 <rb_linebuf_parse+0x6c>
   1002c:	cmp	r8, #0
   10030:	mov	r3, r2
   10034:	add	r0, r0, #12
   10038:	mov	r2, r1
   1003c:	ldr	r1, [r6]
   10040:	beq	100e8 <rb_linebuf_parse+0xec>
   10044:	bl	fdbc <rb_linebuf_copy_raw.isra.3>
   10048:	cmn	r0, #1
   1004c:	beq	100c8 <rb_linebuf_parse+0xcc>
   10050:	cmp	r0, r4
   10054:	moveq	r6, #1
   10058:	beq	100cc <rb_linebuf_parse+0xd0>
   1005c:	sub	r4, r4, r0
   10060:	add	r5, r5, r0
   10064:	mov	r6, #1
   10068:	cmp	r4, #0
   1006c:	ble	100cc <rb_linebuf_parse+0xd0>
   10070:	add	r9, r7, #12
   10074:	b	10098 <rb_linebuf_parse+0x9c>
   10078:	bl	fb84 <rb_linebuf_copy_line.isra.2>
   1007c:	cmn	r0, #1
   10080:	sub	r4, r4, r0
   10084:	beq	100c8 <rb_linebuf_parse+0xcc>
   10088:	cmp	r4, #0
   1008c:	add	r5, r5, r0
   10090:	add	r6, r6, #1
   10094:	ble	100cc <rb_linebuf_parse+0xd0>
   10098:	mov	r0, r7
   1009c:	bl	fa00 <rb_linebuf_new_line>
   100a0:	cmp	r8, #0
   100a4:	mov	r1, r0
   100a8:	mov	r3, r4
   100ac:	mov	r2, r5
   100b0:	mov	r0, r9
   100b4:	beq	10078 <rb_linebuf_parse+0x7c>
   100b8:	bl	fdbc <rb_linebuf_copy_raw.isra.3>
   100bc:	cmn	r0, #1
   100c0:	sub	r4, r4, r0
   100c4:	bne	10088 <rb_linebuf_parse+0x8c>
   100c8:	mvn	r6, #0
   100cc:	mov	r0, r6
   100d0:	ldrd	r4, [sp]
   100d4:	ldrd	r6, [sp, #8]
   100d8:	ldrd	r8, [sp, #16]
   100dc:	ldr	sl, [sp, #24]
   100e0:	add	sp, sp, #28
   100e4:	pop	{pc}		; (ldr pc, [sp], #4)
   100e8:	bl	fb84 <rb_linebuf_copy_line.isra.2>
   100ec:	b	10048 <rb_linebuf_parse+0x4c>

000100f0 <rb_linebuf_get>:
   100f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   100f4:	ldr	r4, [r0]
   100f8:	strd	r6, [sp, #8]
   100fc:	str	r8, [sp, #16]
   10100:	str	lr, [sp, #20]
   10104:	cmp	r4, #0
   10108:	beq	101c4 <rb_linebuf_get+0xd4>
   1010c:	cmp	r3, #0
   10110:	ldr	r5, [r4]
   10114:	bne	10124 <rb_linebuf_get+0x34>
   10118:	ldrb	r4, [r5, #1025]	; 0x401
   1011c:	cmp	r4, #0
   10120:	beq	101c4 <rb_linebuf_get+0xd4>
   10124:	ldr	r4, [r5, #1028]	; 0x404
   10128:	mov	r7, r1
   1012c:	mov	r6, r0
   10130:	mov	r1, r5
   10134:	ldrb	r3, [r5, #1026]	; 0x402
   10138:	cmp	r4, r2
   1013c:	subgt	r4, r2, #1
   10140:	cmp	r3, #0
   10144:	beq	101dc <rb_linebuf_get+0xec>
   10148:	ldr	r3, [sp, #24]
   1014c:	cmp	r3, #0
   10150:	bne	10214 <rb_linebuf_get+0x124>
   10154:	cmp	r4, #0
   10158:	beq	10274 <rb_linebuf_get+0x184>
   1015c:	ldrb	r3, [r5]
   10160:	cmp	r3, #10
   10164:	cmpne	r3, #13
   10168:	bne	10234 <rb_linebuf_get+0x144>
   1016c:	add	r0, r5, r4
   10170:	add	r3, r5, #1
   10174:	b	10188 <rb_linebuf_get+0x98>
   10178:	ldrb	r2, [r3], #1
   1017c:	cmp	r2, #10
   10180:	cmpne	r2, #13
   10184:	bne	10234 <rb_linebuf_get+0x144>
   10188:	cmp	r0, r3
   1018c:	mov	r1, r3
   10190:	sub	r4, r0, r3
   10194:	bne	10178 <rb_linebuf_get+0x88>
   10198:	mov	r4, #0
   1019c:	mov	r8, r7
   101a0:	mov	r2, r4
   101a4:	mov	r0, r7
   101a8:	bl	47e8 <memcpy@plt>
   101ac:	mov	r3, #0
   101b0:	strb	r3, [r8]
   101b4:	mov	r1, r5
   101b8:	mov	r0, r6
   101bc:	ldr	r2, [r6]
   101c0:	bl	fab4 <rb_linebuf_done_line>
   101c4:	mov	r0, r4
   101c8:	ldrd	r4, [sp]
   101cc:	ldrd	r6, [sp, #8]
   101d0:	ldr	r8, [sp, #16]
   101d4:	add	sp, sp, #20
   101d8:	pop	{pc}		; (ldr pc, [sp], #4)
   101dc:	mov	r2, r4
   101e0:	mov	r0, r7
   101e4:	bl	47e8 <memcpy@plt>
   101e8:	ldr	r3, [sp, #24]
   101ec:	cmp	r3, #0
   101f0:	bne	101b4 <rb_linebuf_get+0xc4>
   101f4:	add	r8, r7, r4
   101f8:	mov	r3, #0
   101fc:	mov	r1, r5
   10200:	mov	r0, r6
   10204:	strb	r3, [r8]
   10208:	ldr	r2, [r6]
   1020c:	bl	fab4 <rb_linebuf_done_line>
   10210:	b	101c4 <rb_linebuf_get+0xd4>
   10214:	mov	r2, r4
   10218:	mov	r0, r7
   1021c:	bl	47e8 <memcpy@plt>
   10220:	mov	r1, r5
   10224:	mov	r0, r6
   10228:	ldr	r2, [r6]
   1022c:	bl	fab4 <rb_linebuf_done_line>
   10230:	b	101c4 <rb_linebuf_get+0xd4>
   10234:	sub	r3, r4, #1
   10238:	mov	r2, r4
   1023c:	ldrb	ip, [r1, r3]
   10240:	add	r0, r1, r3
   10244:	cmp	ip, #13
   10248:	cmpne	ip, #10
   1024c:	addne	r8, r7, r4
   10250:	beq	10268 <rb_linebuf_get+0x178>
   10254:	b	101a4 <rb_linebuf_get+0xb4>
   10258:	ldrb	r2, [r0, #-1]!
   1025c:	cmp	r2, #10
   10260:	cmpne	r2, #13
   10264:	bne	10280 <rb_linebuf_get+0x190>
   10268:	subs	r4, r3, #0
   1026c:	sub	r3, r3, #1
   10270:	bne	10258 <rb_linebuf_get+0x168>
   10274:	mov	r8, r7
   10278:	mov	r2, r4
   1027c:	b	101a4 <rb_linebuf_get+0xb4>
   10280:	mov	r2, r4
   10284:	add	r8, r7, r4
   10288:	b	101a4 <rb_linebuf_get+0xb4>

0001028c <rb_linebuf_attach>:
   1028c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10290:	strd	r6, [sp, #8]
   10294:	ldr	r6, [r1]
   10298:	str	r8, [sp, #16]
   1029c:	str	lr, [sp, #20]
   102a0:	cmp	r6, #0
   102a4:	beq	10330 <rb_linebuf_attach+0xa4>
   102a8:	mov	r4, r0
   102ac:	mov	r7, #0
   102b0:	b	10300 <rb_linebuf_attach+0x74>
   102b4:	ldr	r3, [r4, #8]
   102b8:	ldr	r6, [r6, #8]
   102bc:	ldr	r2, [r4, #12]
   102c0:	add	r3, r3, #1
   102c4:	ldr	r1, [r4, #24]
   102c8:	cmp	r6, #0
   102cc:	ldr	ip, [r5, #1028]	; 0x404
   102d0:	stmib	r4, {r0, r3}
   102d4:	ldr	r0, [r4, #16]
   102d8:	add	r1, r1, #1
   102dc:	ldr	r3, [r5, #1032]	; 0x408
   102e0:	add	r2, r2, ip
   102e4:	add	r0, r0, #1
   102e8:	str	r2, [r4, #12]
   102ec:	str	r1, [r4, #24]
   102f0:	add	r3, r3, #1
   102f4:	str	r0, [r4, #16]
   102f8:	str	r3, [r5, #1032]	; 0x408
   102fc:	beq	10330 <rb_linebuf_attach+0xa4>
   10300:	ldr	r5, [r6]
   10304:	bl	4b54 <rb_make_rb_dlink_node@plt>
   10308:	ldr	r3, [r4, #4]
   1030c:	str	r5, [r0]
   10310:	cmp	r3, #0
   10314:	stmib	r0, {r3, r7}
   10318:	strne	r0, [r3, #8]
   1031c:	bne	102b4 <rb_linebuf_attach+0x28>
   10320:	ldr	r3, [r4]
   10324:	cmp	r3, #0
   10328:	streq	r0, [r4]
   1032c:	b	102b4 <rb_linebuf_attach+0x28>
   10330:	ldrd	r4, [sp]
   10334:	ldrd	r6, [sp, #8]
   10338:	ldr	r8, [sp, #16]
   1033c:	add	sp, sp, #20
   10340:	pop	{pc}		; (ldr pc, [sp], #4)

00010344 <rb_linebuf_put>:
   10344:	strd	r4, [sp, #-16]!
   10348:	mov	r5, r0
   1034c:	str	r6, [sp, #8]
   10350:	mov	r6, r1
   10354:	str	lr, [sp, #12]
   10358:	bl	fa00 <rb_linebuf_new_line>
   1035c:	mov	r2, r6
   10360:	movw	r1, #1023	; 0x3ff
   10364:	mov	r4, r0
   10368:	bl	4674 <rb_fsnprint@plt>
   1036c:	subs	r3, r0, #0
   10370:	ble	103e0 <rb_linebuf_put+0x9c>
   10374:	movw	r0, #1022	; 0x3fe
   10378:	cmp	r3, r0
   1037c:	bgt	103d0 <rb_linebuf_put+0x8c>
   10380:	add	r2, r3, #2
   10384:	mov	r0, r3
   10388:	add	lr, r3, #1
   1038c:	mov	r1, r2
   10390:	mov	r3, #13
   10394:	mov	r6, #10
   10398:	mov	ip, #0
   1039c:	strb	r3, [r4, r0]
   103a0:	mov	r3, #1
   103a4:	strb	r6, [r4, lr]
   103a8:	strb	ip, [r4, r2]
   103ac:	strb	r3, [r4, #1025]	; 0x401
   103b0:	ldr	r3, [r5, #12]
   103b4:	ldr	r6, [sp, #8]
   103b8:	str	r1, [r4, #1028]	; 0x404
   103bc:	add	r3, r3, r2
   103c0:	str	r3, [r5, #12]
   103c4:	ldrd	r4, [sp]
   103c8:	add	sp, sp, #12
   103cc:	pop	{pc}		; (ldr pc, [sp], #4)
   103d0:	mov	r2, #1024	; 0x400
   103d4:	movw	lr, #1023	; 0x3ff
   103d8:	mov	r1, r2
   103dc:	b	10390 <rb_linebuf_put+0x4c>
   103e0:	mov	r2, #2
   103e4:	mov	lr, #1
   103e8:	mov	r1, r2
   103ec:	mov	r0, #0
   103f0:	b	10390 <rb_linebuf_put+0x4c>

000103f4 <rb_linebuf_flush>:
   103f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   103f8:	mov	r5, r1
   103fc:	strd	r6, [sp, #8]
   10400:	mov	r6, r0
   10404:	strd	r8, [sp, #16]
   10408:	str	sl, [sp, #24]
   1040c:	str	lr, [sp, #28]
   10410:	bl	4488 <rb_fd_ssl@plt>
   10414:	subs	r1, r0, #0
   10418:	beq	1048c <rb_linebuf_flush+0x98>
   1041c:	ldr	r3, [r5]
   10420:	cmp	r3, #0
   10424:	beq	105e4 <rb_linebuf_flush+0x1f0>
   10428:	ldr	r4, [r3]
   1042c:	ldrb	r3, [r4, #1025]	; 0x401
   10430:	cmp	r3, #0
   10434:	beq	105e4 <rb_linebuf_flush+0x1f0>
   10438:	ldr	r3, [r5, #20]
   1043c:	mov	r0, r6
   10440:	ldr	r2, [r4, #1028]	; 0x404
   10444:	add	r1, r4, r3
   10448:	sub	r2, r2, r3
   1044c:	bl	4638 <rb_write@plt>
   10450:	subs	r8, r0, #0
   10454:	ble	10470 <rb_linebuf_flush+0x7c>
   10458:	ldr	r3, [r5, #20]
   1045c:	ldr	r2, [r4, #1028]	; 0x404
   10460:	add	r3, r8, r3
   10464:	cmp	r3, r2
   10468:	str	r3, [r5, #20]
   1046c:	beq	105b4 <rb_linebuf_flush+0x1c0>
   10470:	mov	r0, r8
   10474:	ldrd	r4, [sp]
   10478:	ldrd	r6, [sp, #8]
   1047c:	ldrd	r8, [sp, #16]
   10480:	ldr	sl, [sp, #24]
   10484:	add	sp, sp, #28
   10488:	pop	{pc}		; (ldr pc, [sp], #4)
   1048c:	ldr	r7, [pc, #356]	; 105f8 <rb_linebuf_flush+0x204>
   10490:	mov	r2, #8192	; 0x2000
   10494:	add	r7, pc, r7
   10498:	mov	r0, r7
   1049c:	bl	4608 <memset@plt>
   104a0:	ldr	r2, [r5]
   104a4:	cmp	r2, #0
   104a8:	beq	105e4 <rb_linebuf_flush+0x1f0>
   104ac:	ldr	r3, [r2]
   104b0:	ldrb	r1, [r3, #1025]	; 0x401
   104b4:	cmp	r1, #0
   104b8:	beq	105e4 <rb_linebuf_flush+0x1f0>
   104bc:	ldr	ip, [r5, #20]
   104c0:	ldr	r1, [r3, #1028]	; 0x404
   104c4:	ldr	r0, [r2, #8]
   104c8:	add	r3, r3, ip
   104cc:	sub	r2, r1, ip
   104d0:	str	r3, [r7]
   104d4:	cmp	r0, #0
   104d8:	str	r2, [r7, #4]
   104dc:	beq	105dc <rb_linebuf_flush+0x1e8>
   104e0:	ldr	r3, [r0]
   104e4:	ldrb	r2, [r3, #1025]	; 0x401
   104e8:	cmp	r2, #0
   104ec:	beq	105dc <rb_linebuf_flush+0x1e8>
   104f0:	ldr	r1, [r3, #1028]	; 0x404
   104f4:	mov	r2, r7
   104f8:	mov	r4, #2
   104fc:	str	r3, [r7, #8]
   10500:	ldr	r3, [r0, #8]
   10504:	str	r1, [r7, #12]
   10508:	b	1053c <rb_linebuf_flush+0x148>
   1050c:	ldr	r1, [r3]
   10510:	ldrb	r0, [r1, #1025]	; 0x401
   10514:	cmp	r0, #0
   10518:	beq	10544 <rb_linebuf_flush+0x150>
   1051c:	ldr	r0, [r1, #1028]	; 0x404
   10520:	add	r4, r4, #1
   10524:	add	r2, r2, #8
   10528:	cmp	r4, #1024	; 0x400
   1052c:	str	r1, [r2, #8]
   10530:	ldr	r3, [r3, #8]
   10534:	str	r0, [r2, #12]
   10538:	beq	10544 <rb_linebuf_flush+0x150>
   1053c:	cmp	r3, #0
   10540:	bne	1050c <rb_linebuf_flush+0x118>
   10544:	ldr	r1, [pc, #176]	; 105fc <rb_linebuf_flush+0x208>
   10548:	mov	r0, r6
   1054c:	mov	r2, r4
   10550:	add	r1, pc, r1
   10554:	bl	4aac <rb_writev@plt>
   10558:	subs	r8, r0, #0
   1055c:	ble	10470 <rb_linebuf_flush+0x7c>
   10560:	ldr	sl, [r5]
   10564:	mov	r6, #0
   10568:	mov	r7, r8
   1056c:	mov	r9, r6
   10570:	ldr	r2, [r5, #20]
   10574:	mov	r0, r5
   10578:	add	r6, r6, #1
   1057c:	ldr	r1, [sl]
   10580:	ldr	r3, [r1, #1028]	; 0x404
   10584:	sub	r3, r3, r2
   10588:	cmp	r3, r7
   1058c:	bgt	105d0 <rb_linebuf_flush+0x1dc>
   10590:	ldr	r2, [r5]
   10594:	sub	r7, r7, r3
   10598:	ldr	sl, [sl, #8]
   1059c:	bl	fab4 <rb_linebuf_done_line>
   105a0:	cmp	r4, r6
   105a4:	mov	r2, #0
   105a8:	str	r9, [r5, #20]
   105ac:	bne	10574 <rb_linebuf_flush+0x180>
   105b0:	b	10470 <rb_linebuf_flush+0x7c>
   105b4:	mov	r3, #0
   105b8:	mov	r1, r4
   105bc:	ldr	r2, [r5]
   105c0:	mov	r0, r5
   105c4:	str	r3, [r5, #20]
   105c8:	bl	fab4 <rb_linebuf_done_line>
   105cc:	b	10470 <rb_linebuf_flush+0x7c>
   105d0:	add	r7, r2, r7
   105d4:	str	r7, [r5, #20]
   105d8:	b	10470 <rb_linebuf_flush+0x7c>
   105dc:	mov	r4, #1
   105e0:	b	10544 <rb_linebuf_flush+0x150>
   105e4:	bl	4cbc <__errno_location@plt>
   105e8:	mov	r3, #11
   105ec:	mvn	r8, #0
   105f0:	str	r3, [r0]
   105f4:	b	10470 <rb_linebuf_flush+0x7c>
   105f8:	.word	0x0002bed8
   105fc:	.word	0x0002be1c

00010600 <rb_count_rb_linebuf_memory>:
   10600:	ldr	ip, [pc, #44]	; 10634 <rb_count_rb_linebuf_memory+0x34>
   10604:	mov	r3, r1
   10608:	mov	r1, r0
   1060c:	push	{lr}		; (str lr, [sp, #-4]!)
   10610:	mov	lr, #0
   10614:	sub	sp, sp, #12
   10618:	mov	r2, lr
   1061c:	str	lr, [sp]
   10620:	add	ip, pc, ip
   10624:	ldr	r0, [ip]
   10628:	bl	4ce0 <rb_bh_usage@plt>
   1062c:	add	sp, sp, #12
   10630:	pop	{pc}		; (ldr pc, [sp], #4)
   10634:	.word	0x0002bd44

00010638 <rb_init_rb_dlink_nodes>:
   10638:	ldr	r2, [pc, #56]	; 10678 <rb_init_rb_dlink_nodes+0x40>
   1063c:	mov	r1, r0
   10640:	mov	r0, #12
   10644:	str	r4, [sp, #-8]!
   10648:	str	lr, [sp, #4]
   1064c:	add	r2, pc, r2
   10650:	bl	4a88 <rb_bh_create@plt>
   10654:	ldr	r3, [pc, #32]	; 1067c <rb_init_rb_dlink_nodes+0x44>
   10658:	cmp	r0, #0
   1065c:	add	r3, pc, r3
   10660:	str	r0, [r3]
   10664:	beq	10674 <rb_init_rb_dlink_nodes+0x3c>
   10668:	ldr	r4, [sp]
   1066c:	add	sp, sp, #4
   10670:	pop	{pc}		; (ldr pc, [sp], #4)
   10674:	bl	495c <rb_outofmemory@plt>
   10678:	.word	0x00007440
   1067c:	.word	0x0002dd10

00010680 <rb_make_rb_dlink_node>:
   10680:	ldr	r3, [pc, #4]	; 1068c <rb_make_rb_dlink_node+0xc>
   10684:	ldr	r0, [pc, r3]
   10688:	b	492c <rb_bh_alloc@plt>
   1068c:	.word	0x0002dce8

00010690 <rb_free_rb_dlink_node>:
   10690:	ldr	r3, [pc, #12]	; 106a4 <rb_free_rb_dlink_node+0x14>
   10694:	mov	r1, r0
   10698:	add	r3, pc, r3
   1069c:	ldr	r0, [r3]
   106a0:	b	48a8 <rb_bh_free@plt>
   106a4:	.word	0x0002dcd4

000106a8 <rb_string_to_array>:
   106a8:	subs	r3, r0, #0
   106ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   106b0:	moveq	r4, r3
   106b4:	strd	r6, [sp, #8]
   106b8:	strd	r8, [sp, #16]
   106bc:	str	sl, [sp, #24]
   106c0:	str	lr, [sp, #28]
   106c4:	beq	1076c <rb_string_to_array+0xc4>
   106c8:	mov	r7, r1
   106cc:	ldrb	r1, [r3]
   106d0:	cmp	r1, #0
   106d4:	beq	10768 <rb_string_to_array+0xc0>
   106d8:	cmp	r1, #32
   106dc:	bne	106f4 <rb_string_to_array+0x4c>
   106e0:	ldrb	r1, [r3, #1]!
   106e4:	cmp	r1, #32
   106e8:	beq	106e0 <rb_string_to_array+0x38>
   106ec:	cmp	r1, #0
   106f0:	beq	10768 <rb_string_to_array+0xc0>
   106f4:	mov	r8, #0
   106f8:	sub	r5, r2, #1
   106fc:	mov	r6, r8
   10700:	mov	r9, r7
   10704:	cmp	r1, #58	; 0x3a
   10708:	add	r4, r8, #1
   1070c:	beq	10790 <rb_string_to_array+0xe8>
   10710:	mov	r0, r3
   10714:	mov	r1, #32
   10718:	str	r3, [r9], #4
   1071c:	bl	4584 <strchr@plt>
   10720:	cmp	r0, #0
   10724:	beq	1076c <rb_string_to_array+0xc4>
   10728:	mov	r1, r0
   1072c:	strb	r6, [r1], #1
   10730:	mov	r3, r1
   10734:	ldrb	ip, [r0, #1]
   10738:	cmp	ip, #32
   1073c:	bne	10788 <rb_string_to_array+0xe0>
   10740:	ldrb	r2, [r3, #1]!
   10744:	cmp	r2, #32
   10748:	beq	10740 <rb_string_to_array+0x98>
   1074c:	cmp	r2, #0
   10750:	beq	1076c <rb_string_to_array+0xc4>
   10754:	cmp	r5, r4
   10758:	ble	1079c <rb_string_to_array+0xf4>
   1075c:	mov	r8, r4
   10760:	ldrb	r1, [r3]
   10764:	b	10704 <rb_string_to_array+0x5c>
   10768:	mov	r4, r1
   1076c:	mov	r0, r4
   10770:	ldrd	r4, [sp]
   10774:	ldrd	r6, [sp, #8]
   10778:	ldrd	r8, [sp, #16]
   1077c:	ldr	sl, [sp, #24]
   10780:	add	sp, sp, #28
   10784:	pop	{pc}		; (ldr pc, [sp], #4)
   10788:	mov	r2, ip
   1078c:	b	1074c <rb_string_to_array+0xa4>
   10790:	add	r3, r3, #1
   10794:	str	r3, [r9]
   10798:	b	1076c <rb_string_to_array+0xc4>
   1079c:	cmp	ip, #58	; 0x3a
   107a0:	addeq	r1, r0, #2
   107a4:	str	r1, [r7, r4, lsl #2]
   107a8:	add	r4, r8, #2
   107ac:	b	1076c <rb_string_to_array+0xc4>

000107b0 <rb_strcasecmp>:
   107b0:	b	459c <strcasecmp@plt>

000107b4 <rb_strncasecmp>:
   107b4:	b	4950 <strncasecmp@plt>

000107b8 <rb_strcasestr>:
   107b8:	b	43ec <strcasestr@plt>

000107bc <rb_strlcat>:
   107bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   107c0:	strd	r6, [sp, #8]
   107c4:	mov	r7, r2
   107c8:	mov	r6, r0
   107cc:	str	r8, [sp, #16]
   107d0:	mov	r8, r1
   107d4:	str	lr, [sp, #20]
   107d8:	bl	47c4 <strlen@plt>
   107dc:	mov	r4, r0
   107e0:	mov	r0, r8
   107e4:	bl	47c4 <strlen@plt>
   107e8:	sub	r2, r7, r4
   107ec:	add	r6, r6, r4
   107f0:	cmp	r0, r2
   107f4:	add	r4, r4, r0
   107f8:	movcc	r5, r0
   107fc:	subcs	r5, r2, #1
   10800:	mov	r2, r5
   10804:	mov	r1, r8
   10808:	mov	r0, r6
   1080c:	bl	47e8 <memcpy@plt>
   10810:	mov	r2, #0
   10814:	mov	r0, r4
   10818:	strb	r2, [r6, r5]
   1081c:	ldrd	r4, [sp]
   10820:	ldrd	r6, [sp, #8]
   10824:	ldr	r8, [sp, #16]
   10828:	add	sp, sp, #20
   1082c:	pop	{pc}		; (ldr pc, [sp], #4)

00010830 <rb_strlcpy>:
   10830:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10834:	mov	r4, r2
   10838:	strd	r6, [sp, #8]
   1083c:	mov	r7, r0
   10840:	mov	r0, r1
   10844:	mov	r6, r1
   10848:	str	r8, [sp, #16]
   1084c:	str	lr, [sp, #20]
   10850:	bl	47c4 <strlen@plt>
   10854:	cmp	r4, #0
   10858:	mov	r5, r0
   1085c:	beq	10884 <rb_strlcpy+0x54>
   10860:	cmp	r0, r4
   10864:	mov	r1, r6
   10868:	movcc	r4, r0
   1086c:	subcs	r4, r4, #1
   10870:	mov	r2, r4
   10874:	mov	r0, r7
   10878:	bl	47e8 <memcpy@plt>
   1087c:	mov	r3, #0
   10880:	strb	r3, [r7, r4]
   10884:	mov	r0, r5
   10888:	ldrd	r4, [sp]
   1088c:	ldrd	r6, [sp, #8]
   10890:	ldr	r8, [sp, #16]
   10894:	add	sp, sp, #20
   10898:	pop	{pc}		; (ldr pc, [sp], #4)

0001089c <rb_strnlen>:
   1089c:	b	49ec <strnlen@plt>

000108a0 <rb_snprintf_append>:
   108a0:	push	{r2, r3}
   108a4:	strd	r4, [sp, #-16]!
   108a8:	subs	r4, r1, #0
   108ac:	str	r6, [sp, #8]
   108b0:	str	lr, [sp, #12]
   108b4:	sub	sp, sp, #8
   108b8:	beq	10924 <rb_snprintf_append+0x84>
   108bc:	mov	r5, r0
   108c0:	bl	47c4 <strlen@plt>
   108c4:	cmp	r4, r0
   108c8:	mov	r6, r0
   108cc:	bge	108fc <rb_snprintf_append+0x5c>
   108d0:	sub	r4, r4, #1
   108d4:	mov	r3, #0
   108d8:	mov	r0, r4
   108dc:	strb	r3, [r5, r4]
   108e0:	add	sp, sp, #8
   108e4:	ldrd	r4, [sp]
   108e8:	ldr	r6, [sp, #8]
   108ec:	ldr	lr, [sp, #12]
   108f0:	add	sp, sp, #16
   108f4:	add	sp, sp, #8
   108f8:	bx	lr
   108fc:	add	ip, sp, #28
   10900:	sub	r1, r4, r0
   10904:	ldr	r2, [sp, #24]
   10908:	add	r0, r5, r0
   1090c:	mov	r3, ip
   10910:	str	ip, [sp, #4]
   10914:	bl	4530 <vsnprintf@plt>
   10918:	cmp	r0, #0
   1091c:	addge	r0, r0, r6
   10920:	b	108e0 <rb_snprintf_append+0x40>
   10924:	mvn	r0, #0
   10928:	b	108e0 <rb_snprintf_append+0x40>

0001092c <rb_snprintf_try_append>:
   1092c:	push	{r2, r3}
   10930:	strd	r4, [sp, #-16]!
   10934:	subs	r4, r1, #0
   10938:	str	r6, [sp, #8]
   1093c:	str	lr, [sp, #12]
   10940:	sub	sp, sp, #8
   10944:	beq	109c4 <rb_snprintf_try_append+0x98>
   10948:	mov	r6, r0
   1094c:	bl	47c4 <strlen@plt>
   10950:	cmp	r4, r0
   10954:	mov	r5, r0
   10958:	addlt	r3, r6, r4
   1095c:	movlt	r2, #0
   10960:	mvnlt	r0, #0
   10964:	strblt	r2, [r3, #-1]
   10968:	blt	109a8 <rb_snprintf_try_append+0x7c>
   1096c:	add	ip, sp, #28
   10970:	sub	r1, r4, r5
   10974:	ldr	r2, [sp, #24]
   10978:	mov	r3, ip
   1097c:	add	r0, r6, r5
   10980:	str	ip, [sp, #4]
   10984:	bl	4530 <vsnprintf@plt>
   10988:	cmp	r0, #0
   1098c:	blt	109a8 <rb_snprintf_try_append+0x7c>
   10990:	add	r0, r0, r5
   10994:	sub	r4, r4, #1
   10998:	cmp	r0, r4
   1099c:	movgt	r3, #0
   109a0:	mvngt	r0, #0
   109a4:	strbgt	r3, [r6, r5]
   109a8:	add	sp, sp, #8
   109ac:	ldrd	r4, [sp]
   109b0:	ldr	r6, [sp, #8]
   109b4:	ldr	lr, [sp, #12]
   109b8:	add	sp, sp, #16
   109bc:	add	sp, sp, #8
   109c0:	bx	lr
   109c4:	mvn	r0, #0
   109c8:	b	109a8 <rb_snprintf_try_append+0x7c>

000109cc <rb_basename>:
   109cc:	mov	r1, #47	; 0x2f
   109d0:	strd	r4, [sp, #-16]!
   109d4:	mov	r4, r0
   109d8:	str	r6, [sp, #8]
   109dc:	str	lr, [sp, #12]
   109e0:	bl	462c <strrchr@plt>
   109e4:	cmp	r0, #0
   109e8:	addne	r4, r0, #1
   109ec:	mov	r0, r4
   109f0:	bl	47c4 <strlen@plt>
   109f4:	add	r5, r0, #1
   109f8:	mov	r0, r5
   109fc:	bl	4980 <malloc@plt>
   10a00:	subs	r6, r0, #0
   10a04:	beq	10a28 <rb_basename+0x5c>
   10a08:	mov	r2, r5
   10a0c:	mov	r1, r4
   10a10:	bl	47e8 <memcpy@plt>
   10a14:	mov	r0, r6
   10a18:	ldrd	r4, [sp]
   10a1c:	ldr	r6, [sp, #8]
   10a20:	add	sp, sp, #12
   10a24:	pop	{pc}		; (ldr pc, [sp], #4)
   10a28:	bl	495c <rb_outofmemory@plt>

00010a2c <rb_dirname>:
   10a2c:	mov	r1, #47	; 0x2f
   10a30:	strd	r4, [sp, #-16]!
   10a34:	mov	r5, r0
   10a38:	str	r6, [sp, #8]
   10a3c:	str	lr, [sp, #12]
   10a40:	bl	462c <strrchr@plt>
   10a44:	cmp	r0, #0
   10a48:	beq	10abc <rb_dirname+0x90>
   10a4c:	cmp	r5, r0
   10a50:	bcs	10a84 <rb_dirname+0x58>
   10a54:	ldrb	r3, [r0]
   10a58:	cmp	r3, #47	; 0x2f
   10a5c:	subeq	r3, r0, #1
   10a60:	beq	10a78 <rb_dirname+0x4c>
   10a64:	b	10a84 <rb_dirname+0x58>
   10a68:	ldrb	r2, [r3]
   10a6c:	sub	r3, r3, #1
   10a70:	cmp	r2, #47	; 0x2f
   10a74:	bne	10a84 <rb_dirname+0x58>
   10a78:	cmp	r3, r5
   10a7c:	mov	r0, r3
   10a80:	bne	10a68 <rb_dirname+0x3c>
   10a84:	rsb	r4, r5, #2
   10a88:	add	r4, r0, r4
   10a8c:	mov	r0, r4
   10a90:	bl	4980 <malloc@plt>
   10a94:	subs	r6, r0, #0
   10a98:	beq	10ad4 <rb_dirname+0xa8>
   10a9c:	mov	r2, r4
   10aa0:	mov	r1, r5
   10aa4:	bl	4680 <rb_strlcpy@plt>
   10aa8:	mov	r0, r6
   10aac:	ldrd	r4, [sp]
   10ab0:	ldr	r6, [sp, #8]
   10ab4:	add	sp, sp, #12
   10ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   10abc:	mov	r0, #2
   10ac0:	bl	4980 <malloc@plt>
   10ac4:	subs	r6, r0, #0
   10ac8:	movne	r3, #46	; 0x2e
   10acc:	strhne	r3, [r6]
   10ad0:	bne	10aa8 <rb_dirname+0x7c>
   10ad4:	bl	495c <rb_outofmemory@plt>

00010ad8 <rb_fsnprint>:
   10ad8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10adc:	subs	r5, r2, #0
   10ae0:	strd	r6, [sp, #8]
   10ae4:	strd	r8, [sp, #16]
   10ae8:	str	sl, [sp, #24]
   10aec:	str	lr, [sp, #28]
   10af0:	beq	10bec <rb_fsnprint+0x114>
   10af4:	mov	r8, r0
   10af8:	mov	r9, r1
   10afc:	mov	r4, r1
   10b00:	mov	r6, #0
   10b04:	sub	r7, r1, #1
   10b08:	b	10b78 <rb_fsnprint+0xa0>
   10b0c:	sub	r4, r9, r6
   10b10:	cmp	r3, r4
   10b14:	bhi	10b84 <rb_fsnprint+0xac>
   10b18:	mov	r4, r3
   10b1c:	ldr	r2, [r5, #4]
   10b20:	cmp	r2, #0
   10b24:	beq	10ba8 <rb_fsnprint+0xd0>
   10b28:	ldr	r3, [r5, #12]
   10b2c:	add	r0, r8, r6
   10b30:	cmp	r3, #0
   10b34:	beq	10bc8 <rb_fsnprint+0xf0>
   10b38:	mov	r1, r4
   10b3c:	ldr	r3, [r3]
   10b40:	bl	4530 <vsnprintf@plt>
   10b44:	cmp	r0, #0
   10b48:	blt	10b90 <rb_fsnprint+0xb8>
   10b4c:	sub	r3, r4, #1
   10b50:	cmp	r3, r0
   10b54:	subcc	r6, r6, #1
   10b58:	addcs	r6, r6, r0
   10b5c:	addcc	r6, r6, r4
   10b60:	cmp	r7, r6
   10b64:	bls	10be4 <rb_fsnprint+0x10c>
   10b68:	ldr	r5, [r5, #16]
   10b6c:	sub	r4, r4, r0
   10b70:	cmp	r5, #0
   10b74:	beq	10b8c <rb_fsnprint+0xb4>
   10b78:	ldr	r3, [r5]
   10b7c:	cmp	r3, #0
   10b80:	bne	10b0c <rb_fsnprint+0x34>
   10b84:	cmp	r4, #0
   10b88:	bne	10b1c <rb_fsnprint+0x44>
   10b8c:	mov	r0, r6
   10b90:	ldrd	r4, [sp]
   10b94:	ldrd	r6, [sp, #8]
   10b98:	ldrd	r8, [sp, #16]
   10b9c:	ldr	sl, [sp, #24]
   10ba0:	add	sp, sp, #28
   10ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   10ba8:	ldr	r3, [r5, #8]
   10bac:	cmp	r3, #0
   10bb0:	beq	10bd8 <rb_fsnprint+0x100>
   10bb4:	mov	r1, r4
   10bb8:	add	r0, r8, r6
   10bbc:	ldr	r2, [r5, #12]
   10bc0:	blx	r3
   10bc4:	b	10b44 <rb_fsnprint+0x6c>
   10bc8:	mov	r1, r2
   10bcc:	mov	r2, r4
   10bd0:	bl	4680 <rb_strlcpy@plt>
   10bd4:	b	10b44 <rb_fsnprint+0x6c>
   10bd8:	cmp	r7, r6
   10bdc:	mov	r0, r3
   10be0:	bhi	10b68 <rb_fsnprint+0x90>
   10be4:	mov	r0, r7
   10be8:	b	10b90 <rb_fsnprint+0xb8>
   10bec:	mov	r0, r5
   10bf0:	b	10b90 <rb_fsnprint+0xb8>

00010bf4 <rb_fsnprintf>:
   10bf4:	push	{r3}		; (str r3, [sp, #-4]!)
   10bf8:	str	r4, [sp, #-8]!
   10bfc:	str	lr, [sp, #4]
   10c00:	sub	sp, sp, #28
   10c04:	mov	lr, #0
   10c08:	ldr	r4, [sp, #36]	; 0x24
   10c0c:	add	r3, sp, #40	; 0x28
   10c10:	mov	ip, sp
   10c14:	stm	sp, {r3, lr}
   10c18:	add	r3, sp, #4
   10c1c:	str	r2, [sp, #20]
   10c20:	mov	r2, r3
   10c24:	str	r4, [sp, #8]
   10c28:	str	lr, [sp, #12]
   10c2c:	str	ip, [sp, #16]
   10c30:	bl	4674 <rb_fsnprint@plt>
   10c34:	add	sp, sp, #28
   10c38:	ldr	r4, [sp]
   10c3c:	ldr	lr, [sp, #4]
   10c40:	add	sp, sp, #8
   10c44:	add	sp, sp, #4
   10c48:	bx	lr

00010c4c <rb_helper_child>:
   10c4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10c50:	strd	r6, [sp, #8]
   10c54:	strd	sl, [sp, #24]
   10c58:	mov	sl, r0
   10c5c:	mov	fp, r2
   10c60:	ldr	r0, [pc, #552]	; 10e90 <rb_helper_child+0x244>
   10c64:	strd	r8, [sp, #16]
   10c68:	mov	r9, r1
   10c6c:	str	lr, [sp, #32]
   10c70:	sub	sp, sp, #28
   10c74:	str	r3, [sp, #20]
   10c78:	add	r0, pc, r0
   10c7c:	bl	456c <getenv@plt>
   10c80:	mov	r6, r0
   10c84:	ldr	r0, [pc, #520]	; 10e94 <rb_helper_child+0x248>
   10c88:	add	r0, pc, r0
   10c8c:	bl	456c <getenv@plt>
   10c90:	mov	r5, r0
   10c94:	ldr	r0, [pc, #508]	; 10e98 <rb_helper_child+0x24c>
   10c98:	clz	r4, r5
   10c9c:	lsr	r4, r4, #5
   10ca0:	add	r0, pc, r0
   10ca4:	bl	456c <getenv@plt>
   10ca8:	cmp	r6, #0
   10cac:	moveq	r4, #1
   10cb0:	cmp	r0, #0
   10cb4:	moveq	r4, #1
   10cb8:	cmp	r4, #0
   10cbc:	bne	10e84 <rb_helper_child+0x238>
   10cc0:	mov	r8, r0
   10cc4:	mov	r1, #84	; 0x54
   10cc8:	mov	r0, #1
   10ccc:	bl	45c0 <calloc@plt>
   10cd0:	subs	r7, r0, #0
   10cd4:	beq	10e8c <rb_helper_child+0x240>
   10cd8:	mov	r0, r6
   10cdc:	mov	r2, #10
   10ce0:	mov	r1, r4
   10ce4:	bl	4854 <strtol@plt>
   10ce8:	mov	r6, r0
   10cec:	mov	r2, #10
   10cf0:	mov	r0, r5
   10cf4:	mov	r1, r4
   10cf8:	bl	4854 <strtol@plt>
   10cfc:	mov	r5, r0
   10d00:	mov	r2, #10
   10d04:	mov	r0, r8
   10d08:	mov	r1, r4
   10d0c:	bl	4854 <strtol@plt>
   10d10:	subs	r8, r0, #0
   10d14:	bgt	10d28 <rb_helper_child+0xdc>
   10d18:	b	10d48 <rb_helper_child+0xfc>
   10d1c:	add	r4, r4, #1
   10d20:	cmp	r8, r4
   10d24:	beq	10d48 <rb_helper_child+0xfc>
   10d28:	cmp	r6, r4
   10d2c:	cmpne	r5, r4
   10d30:	beq	10d1c <rb_helper_child+0xd0>
   10d34:	mov	r0, r4
   10d38:	add	r4, r4, #1
   10d3c:	bl	4914 <close@plt>
   10d40:	cmp	r8, r4
   10d44:	bne	10d28 <rb_helper_child+0xdc>
   10d48:	ldr	r0, [pc, #332]	; 10e9c <rb_helper_child+0x250>
   10d4c:	mov	r1, #2
   10d50:	add	r0, pc, r0
   10d54:	bl	4350 <open@plt>
   10d58:	cmp	r6, #0
   10d5c:	cmpne	r5, #0
   10d60:	mov	r4, r0
   10d64:	bne	10e6c <rb_helper_child+0x220>
   10d68:	cmp	r6, #1
   10d6c:	cmpne	r5, #1
   10d70:	bne	10e50 <rb_helper_child+0x204>
   10d74:	cmp	r6, #2
   10d78:	cmpne	r5, #2
   10d7c:	bne	10e38 <rb_helper_child+0x1ec>
   10d80:	cmp	r4, #2
   10d84:	bgt	10e2c <rb_helper_child+0x1e0>
   10d88:	mov	r3, #0
   10d8c:	mov	r0, fp
   10d90:	ldr	r1, [sp, #20]
   10d94:	ldr	ip, [sp, #72]	; 0x48
   10d98:	ldr	r2, [sp, #64]	; 0x40
   10d9c:	stm	sp, {r8, ip}
   10da0:	ldr	ip, [sp, #76]	; 0x4c
   10da4:	str	ip, [sp, #8]
   10da8:	bl	4a10 <rb_lib_init@plt>
   10dac:	ldr	r0, [sp, #68]	; 0x44
   10db0:	bl	4b24 <rb_linebuf_init@plt>
   10db4:	add	r0, r7, #4
   10db8:	bl	4ac4 <rb_linebuf_newbuf@plt>
   10dbc:	add	r0, r7, #32
   10dc0:	bl	4ac4 <rb_linebuf_newbuf@plt>
   10dc4:	ldr	r2, [pc, #212]	; 10ea0 <rb_helper_child+0x254>
   10dc8:	mov	r1, #8
   10dcc:	mov	r0, r6
   10dd0:	add	r2, pc, r2
   10dd4:	bl	4a58 <rb_open@plt>
   10dd8:	ldr	r2, [pc, #196]	; 10ea4 <rb_helper_child+0x258>
   10ddc:	mov	r1, #8
   10de0:	str	r0, [r7, #60]	; 0x3c
   10de4:	mov	r0, r5
   10de8:	add	r2, pc, r2
   10dec:	bl	4a58 <rb_open@plt>
   10df0:	str	r0, [r7, #64]	; 0x40
   10df4:	ldr	r0, [r7, #60]	; 0x3c
   10df8:	bl	45fc <rb_set_nb@plt>
   10dfc:	ldr	r0, [r7, #64]	; 0x40
   10e00:	bl	45fc <rb_set_nb@plt>
   10e04:	str	sl, [r7, #76]	; 0x4c
   10e08:	str	r9, [r7, #80]	; 0x50
   10e0c:	mov	r0, r7
   10e10:	add	sp, sp, #28
   10e14:	ldrd	r4, [sp]
   10e18:	ldrd	r6, [sp, #8]
   10e1c:	ldrd	r8, [sp, #16]
   10e20:	ldrd	sl, [sp, #24]
   10e24:	add	sp, sp, #32
   10e28:	pop	{pc}		; (ldr pc, [sp], #4)
   10e2c:	mov	r0, r4
   10e30:	bl	4914 <close@plt>
   10e34:	b	10d88 <rb_helper_child+0x13c>
   10e38:	mov	r1, #2
   10e3c:	mov	r0, r4
   10e40:	bl	4a94 <dup2@plt>
   10e44:	cmp	r4, #2
   10e48:	ble	10d88 <rb_helper_child+0x13c>
   10e4c:	b	10e2c <rb_helper_child+0x1e0>
   10e50:	mov	r1, #1
   10e54:	mov	r0, r4
   10e58:	bl	4a94 <dup2@plt>
   10e5c:	cmp	r6, #2
   10e60:	cmpne	r5, #2
   10e64:	beq	10d80 <rb_helper_child+0x134>
   10e68:	b	10e38 <rb_helper_child+0x1ec>
   10e6c:	mov	r1, #0
   10e70:	bl	4a94 <dup2@plt>
   10e74:	cmp	r6, #1
   10e78:	cmpne	r5, #1
   10e7c:	beq	10d74 <rb_helper_child+0x128>
   10e80:	b	10e50 <rb_helper_child+0x204>
   10e84:	mov	r7, #0
   10e88:	b	10e0c <rb_helper_child+0x1c0>
   10e8c:	bl	495c <rb_outofmemory@plt>
   10e90:	.word	0x00006e28
   10e94:	.word	0x00006e1c
   10e98:	.word	0x00006e08
   10e9c:	.word	0x00006d60
   10ea0:	.word	0x00006cec
   10ea4:	.word	0x00006ce8

00010ea8 <rb_helper_start>:
   10ea8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10eac:	strd	r6, [sp, #8]
   10eb0:	mov	r7, r1
   10eb4:	mov	r6, r0
   10eb8:	mov	r1, #1
   10ebc:	mov	r0, r7
   10ec0:	strd	r8, [sp, #16]
   10ec4:	strd	sl, [sp, #24]
   10ec8:	mov	fp, r2
   10ecc:	mov	sl, r3
   10ed0:	str	lr, [sp, #32]
   10ed4:	sub	sp, sp, #188	; 0xbc
   10ed8:	bl	471c <access@plt>
   10edc:	cmn	r0, #1
   10ee0:	beq	110d0 <rb_helper_start+0x228>
   10ee4:	mov	r1, #84	; 0x54
   10ee8:	mov	r0, #1
   10eec:	bl	45c0 <calloc@plt>
   10ef0:	subs	r4, r0, #0
   10ef4:	beq	110d8 <rb_helper_start+0x230>
   10ef8:	ldr	r2, [pc, #476]	; 110dc <rb_helper_start+0x234>
   10efc:	add	r5, sp, #56	; 0x38
   10f00:	mov	r3, r6
   10f04:	mov	r1, #128	; 0x80
   10f08:	mov	r0, r5
   10f0c:	add	r2, pc, r2
   10f10:	bl	4b84 <snprintf@plt>
   10f14:	mov	r2, r5
   10f18:	add	r1, sp, #12
   10f1c:	add	r0, sp, #8
   10f20:	bl	4944 <rb_pipe@plt>
   10f24:	cmp	r0, #0
   10f28:	blt	110c0 <rb_helper_start+0x218>
   10f2c:	ldr	r2, [pc, #428]	; 110e0 <rb_helper_start+0x238>
   10f30:	mov	r3, r6
   10f34:	mov	r1, #128	; 0x80
   10f38:	mov	r0, r5
   10f3c:	add	r2, pc, r2
   10f40:	bl	4b84 <snprintf@plt>
   10f44:	mov	r2, r5
   10f48:	add	r1, sp, #20
   10f4c:	add	r0, sp, #16
   10f50:	bl	4944 <rb_pipe@plt>
   10f54:	cmp	r0, #0
   10f58:	blt	110c0 <rb_helper_start+0x218>
   10f5c:	ldr	r9, [pc, #384]	; 110e4 <rb_helper_start+0x23c>
   10f60:	add	r8, sp, #24
   10f64:	ldr	r0, [sp, #12]
   10f68:	bl	44b8 <rb_get_fd@plt>
   10f6c:	mov	r3, r0
   10f70:	mov	r1, #16
   10f74:	add	r9, pc, r9
   10f78:	mov	r0, r8
   10f7c:	mov	r2, r9
   10f80:	bl	4b84 <snprintf@plt>
   10f84:	ldr	r0, [sp, #16]
   10f88:	bl	44b8 <rb_get_fd@plt>
   10f8c:	mov	r2, r9
   10f90:	add	r9, sp, #40	; 0x28
   10f94:	mov	r3, r0
   10f98:	mov	r1, #16
   10f9c:	mov	r0, r9
   10fa0:	bl	4b84 <snprintf@plt>
   10fa4:	ldr	r0, [sp, #8]
   10fa8:	bl	45fc <rb_set_nb@plt>
   10fac:	ldr	r0, [sp, #12]
   10fb0:	bl	45fc <rb_set_nb@plt>
   10fb4:	ldr	r0, [sp, #16]
   10fb8:	bl	45fc <rb_set_nb@plt>
   10fbc:	ldr	r0, [sp, #20]
   10fc0:	bl	45fc <rb_set_nb@plt>
   10fc4:	ldr	r0, [pc, #284]	; 110e8 <rb_helper_start+0x240>
   10fc8:	mov	r1, r9
   10fcc:	mov	r2, #1
   10fd0:	add	r0, pc, r0
   10fd4:	bl	44a0 <rb_setenv@plt>
   10fd8:	ldr	r0, [pc, #268]	; 110ec <rb_helper_start+0x244>
   10fdc:	mov	r1, r8
   10fe0:	mov	r2, #1
   10fe4:	add	r0, pc, r0
   10fe8:	bl	44a0 <rb_setenv@plt>
   10fec:	ldr	r1, [pc, #252]	; 110f0 <rb_helper_start+0x248>
   10ff0:	mov	r2, #1
   10ff4:	ldr	r0, [pc, #248]	; 110f4 <rb_helper_start+0x24c>
   10ff8:	add	r1, pc, r1
   10ffc:	add	r0, pc, r0
   11000:	bl	44a0 <rb_setenv@plt>
   11004:	ldr	r2, [pc, #236]	; 110f8 <rb_helper_start+0x250>
   11008:	mov	r3, r6
   1100c:	mov	r1, #128	; 0x80
   11010:	mov	r0, r5
   11014:	add	r2, pc, r2
   11018:	bl	4b84 <snprintf@plt>
   1101c:	mov	r3, #0
   11020:	mov	r0, r7
   11024:	str	r5, [sp]
   11028:	mov	r1, sp
   1102c:	str	r3, [sp, #4]
   11030:	bl	4b6c <rb_spawn_process@plt>
   11034:	cmn	r0, #1
   11038:	mov	r5, r0
   1103c:	beq	110a0 <rb_helper_start+0x1f8>
   11040:	ldr	r0, [sp, #12]
   11044:	bl	4848 <rb_close@plt>
   11048:	ldr	r0, [sp, #16]
   1104c:	bl	4848 <rb_close@plt>
   11050:	add	r0, r4, #4
   11054:	bl	4ac4 <rb_linebuf_newbuf@plt>
   11058:	add	r0, r4, #32
   1105c:	bl	4ac4 <rb_linebuf_newbuf@plt>
   11060:	ldr	r2, [sp, #8]
   11064:	mov	r1, #0
   11068:	str	r5, [r4, #68]	; 0x44
   1106c:	ldr	r3, [sp, #20]
   11070:	strd	r2, [r4, #60]	; 0x3c
   11074:	str	r1, [r4, #72]	; 0x48
   11078:	str	fp, [r4, #76]	; 0x4c
   1107c:	str	sl, [r4, #80]	; 0x50
   11080:	mov	r0, r4
   11084:	add	sp, sp, #188	; 0xbc
   11088:	ldrd	r4, [sp]
   1108c:	ldrd	r6, [sp, #8]
   11090:	ldrd	r8, [sp, #16]
   11094:	ldrd	sl, [sp, #24]
   11098:	add	sp, sp, #32
   1109c:	pop	{pc}		; (ldr pc, [sp], #4)
   110a0:	ldr	r0, [sp, #8]
   110a4:	bl	4848 <rb_close@plt>
   110a8:	ldr	r0, [sp, #12]
   110ac:	bl	4848 <rb_close@plt>
   110b0:	ldr	r0, [sp, #16]
   110b4:	bl	4848 <rb_close@plt>
   110b8:	ldr	r0, [sp, #20]
   110bc:	bl	4848 <rb_close@plt>
   110c0:	mov	r0, r4
   110c4:	mov	r4, #0
   110c8:	bl	46d4 <free@plt>
   110cc:	b	11080 <rb_helper_start+0x1d8>
   110d0:	mov	r4, #0
   110d4:	b	11080 <rb_helper_start+0x1d8>
   110d8:	bl	495c <rb_outofmemory@plt>
   110dc:	.word	0x00006bd8
   110e0:	.word	0x00006bbc
   110e4:	.word	0x00006970
   110e8:	.word	0x00006ad0
   110ec:	.word	0x00006ac0
   110f0:	.word	0x00006b14
   110f4:	.word	0x00006aac
   110f8:	.word	0x00006afc

000110fc <rb_helper_restart>:
   110fc:	ldr	r3, [r0, #80]	; 0x50
   11100:	bx	r3

00011104 <rb_helper_write_sendq>:
   11104:	ldr	r3, [r1, #16]
   11108:	cmp	r3, #0
   1110c:	bxle	lr
   11110:	strd	r4, [sp, #-16]!
   11114:	mov	r4, r0
   11118:	add	r5, r1, #4
   1111c:	str	r6, [sp, #8]
   11120:	mov	r6, r1
   11124:	str	lr, [sp, #12]
   11128:	mov	r1, r5
   1112c:	mov	r0, r4
   11130:	bl	47ac <rb_linebuf_flush@plt>
   11134:	cmp	r0, #0
   11138:	bgt	11128 <rb_helper_write_sendq+0x24>
   1113c:	beq	11188 <rb_helper_write_sendq+0x84>
   11140:	bl	4cbc <__errno_location@plt>
   11144:	ldr	r0, [r0]
   11148:	bl	43b0 <rb_ignore_errno@plt>
   1114c:	cmp	r0, #0
   11150:	beq	11188 <rb_helper_write_sendq+0x84>
   11154:	ldr	r3, [r6, #16]
   11158:	cmp	r3, #0
   1115c:	ble	111a0 <rb_helper_write_sendq+0x9c>
   11160:	ldr	r2, [pc, #72]	; 111b0 <rb_helper_write_sendq+0xac>
   11164:	mov	r3, r6
   11168:	mov	r1, #2
   1116c:	ldrd	r4, [sp]
   11170:	ldr	lr, [sp, #12]
   11174:	add	r2, pc, r2
   11178:	ldr	r0, [r6, #64]	; 0x40
   1117c:	ldr	r6, [sp, #8]
   11180:	add	sp, sp, #16
   11184:	b	447c <rb_setselect@plt>
   11188:	mov	r0, r6
   1118c:	ldrd	r4, [sp]
   11190:	ldr	r6, [sp, #8]
   11194:	ldr	lr, [sp, #12]
   11198:	add	sp, sp, #16
   1119c:	b	45a8 <rb_helper_restart@plt>
   111a0:	ldrd	r4, [sp]
   111a4:	ldr	r6, [sp, #8]
   111a8:	add	sp, sp, #12
   111ac:	pop	{pc}		; (ldr pc, [sp], #4)
   111b0:	.word	0xffffff88

000111b4 <rb_helper_read_cb>:
   111b4:	strd	r4, [sp, #-16]!
   111b8:	subs	r4, r1, #0
   111bc:	str	r6, [sp, #8]
   111c0:	str	lr, [sp, #12]
   111c4:	beq	11264 <rb_helper_read_cb+0xb0>
   111c8:	ldr	r5, [pc, #164]	; 11274 <rb_helper_read_cb+0xc0>
   111cc:	add	r6, r4, #32
   111d0:	add	r5, pc, r5
   111d4:	b	111e8 <rb_helper_read_cb+0x34>
   111d8:	bl	465c <rb_linebuf_parse@plt>
   111dc:	mov	r0, r4
   111e0:	ldr	r3, [r4, #76]	; 0x4c
   111e4:	blx	r3
   111e8:	mov	r2, #32768	; 0x8000
   111ec:	mov	r1, r5
   111f0:	ldr	r0, [r4, #60]	; 0x3c
   111f4:	bl	4764 <rb_read@plt>
   111f8:	subs	r2, r0, #0
   111fc:	mov	r3, #0
   11200:	mov	r1, r5
   11204:	mov	r0, r6
   11208:	bgt	111d8 <rb_helper_read_cb+0x24>
   1120c:	beq	11224 <rb_helper_read_cb+0x70>
   11210:	bl	4cbc <__errno_location@plt>
   11214:	ldr	r0, [r0]
   11218:	bl	43b0 <rb_ignore_errno@plt>
   1121c:	cmp	r0, #0
   11220:	bne	1123c <rb_helper_read_cb+0x88>
   11224:	mov	r0, r4
   11228:	ldrd	r4, [sp]
   1122c:	ldr	r6, [sp, #8]
   11230:	ldr	lr, [sp, #12]
   11234:	add	sp, sp, #16
   11238:	b	45a8 <rb_helper_restart@plt>
   1123c:	ldr	r2, [pc, #52]	; 11278 <rb_helper_read_cb+0xc4>
   11240:	mov	r3, r4
   11244:	mov	r1, #1
   11248:	ldr	r6, [sp, #8]
   1124c:	ldr	lr, [sp, #12]
   11250:	add	r2, pc, r2
   11254:	ldr	r0, [r4, #60]	; 0x3c
   11258:	ldrd	r4, [sp]
   1125c:	add	sp, sp, #16
   11260:	b	447c <rb_setselect@plt>
   11264:	ldrd	r4, [sp]
   11268:	ldr	r6, [sp, #8]
   1126c:	add	sp, sp, #12
   11270:	pop	{pc}		; (ldr pc, [sp], #4)
   11274:	.word	0x0002d1a0
   11278:	.word	0xffffff5c

0001127c <rb_helper_write_queue>:
   1127c:	push	{r1, r2, r3}
   11280:	mov	r2, #0
   11284:	add	r0, r0, #4
   11288:	push	{lr}		; (str lr, [sp, #-4]!)
   1128c:	sub	sp, sp, #24
   11290:	ldr	lr, [sp, #28]
   11294:	add	ip, sp, #32
   11298:	add	r3, sp, #4
   1129c:	mov	r1, r3
   112a0:	str	ip, [sp]
   112a4:	mov	ip, sp
   112a8:	str	r2, [sp, #20]
   112ac:	stmib	sp, {r2, lr}
   112b0:	str	r2, [sp, #12]
   112b4:	str	ip, [sp, #16]
   112b8:	bl	4bc0 <rb_linebuf_put@plt>
   112bc:	add	sp, sp, #24
   112c0:	pop	{lr}		; (ldr lr, [sp], #4)
   112c4:	add	sp, sp, #12
   112c8:	bx	lr

000112cc <rb_helper_write_flush>:
   112cc:	mov	r1, r0
   112d0:	ldr	r0, [r0, #64]	; 0x40
   112d4:	b	11104 <rb_helper_write_sendq>

000112d8 <rb_helper_write>:
   112d8:	push	{r1, r2, r3}
   112dc:	mov	r2, #0
   112e0:	str	r4, [sp, #-8]!
   112e4:	mov	r4, r0
   112e8:	add	r0, r0, #4
   112ec:	str	lr, [sp, #4]
   112f0:	sub	sp, sp, #28
   112f4:	ldr	ip, [sp, #36]	; 0x24
   112f8:	add	r3, sp, #40	; 0x28
   112fc:	str	r3, [sp]
   11300:	add	r3, sp, #4
   11304:	mov	r1, r3
   11308:	stmib	sp, {r2, ip}
   1130c:	mov	ip, sp
   11310:	str	r2, [sp, #12]
   11314:	str	ip, [sp, #16]
   11318:	str	r2, [sp, #20]
   1131c:	bl	4bc0 <rb_linebuf_put@plt>
   11320:	mov	r0, r4
   11324:	bl	112cc <rb_helper_write_flush>
   11328:	add	sp, sp, #28
   1132c:	ldr	r4, [sp]
   11330:	ldr	lr, [sp, #4]
   11334:	add	sp, sp, #8
   11338:	add	sp, sp, #12
   1133c:	bx	lr

00011340 <rb_helper_run>:
   11340:	subs	r1, r0, #0
   11344:	beq	11350 <rb_helper_run+0x10>
   11348:	ldr	r0, [r1, #60]	; 0x3c
   1134c:	b	111b4 <rb_helper_read_cb>
   11350:	bx	lr

00011354 <rb_helper_close>:
   11354:	str	r4, [sp, #-8]!
   11358:	subs	r4, r0, #0
   1135c:	str	lr, [sp, #4]
   11360:	beq	11394 <rb_helper_close+0x40>
   11364:	mov	r1, #9
   11368:	ldr	r0, [r4, #68]	; 0x44
   1136c:	bl	46c8 <rb_kill@plt>
   11370:	ldr	r0, [r4, #60]	; 0x3c
   11374:	bl	4848 <rb_close@plt>
   11378:	ldr	r0, [r4, #64]	; 0x40
   1137c:	bl	4848 <rb_close@plt>
   11380:	mov	r0, r4
   11384:	ldr	r4, [sp]
   11388:	ldr	lr, [sp, #4]
   1138c:	add	sp, sp, #8
   11390:	b	46d4 <free@plt>
   11394:	ldr	r4, [sp]
   11398:	add	sp, sp, #4
   1139c:	pop	{pc}		; (ldr pc, [sp], #4)

000113a0 <rb_helper_read>:
   113a0:	mov	ip, #0
   113a4:	push	{lr}		; (str lr, [sp, #-4]!)
   113a8:	sub	sp, sp, #12
   113ac:	mov	r3, ip
   113b0:	add	r0, r0, #32
   113b4:	str	ip, [sp]
   113b8:	bl	477c <rb_linebuf_get@plt>
   113bc:	add	sp, sp, #12
   113c0:	pop	{pc}		; (ldr pc, [sp], #4)

000113c4 <rb_helper_loop>:
   113c4:	str	r4, [sp, #-8]!
   113c8:	mov	r4, r1
   113cc:	str	lr, [sp, #4]
   113d0:	bl	4338 <rb_helper_run@plt>
   113d4:	mov	r0, r4
   113d8:	bl	4728 <rb_lib_loop@plt>

000113dc <rb_init_netio_devpoll>:
   113dc:	mov	r0, #38	; 0x26
   113e0:	bx	lr

000113e4 <rb_setselect_devpoll>:
   113e4:	str	r4, [sp, #-8]!
   113e8:	str	lr, [sp, #4]
   113ec:	bl	4cbc <__errno_location@plt>
   113f0:	mov	r3, #38	; 0x26
   113f4:	ldr	r4, [sp]
   113f8:	add	sp, sp, #4
   113fc:	str	r3, [r0]
   11400:	pop	{pc}		; (ldr pc, [sp], #4)

00011404 <rb_select_devpoll>:
   11404:	str	r4, [sp, #-8]!
   11408:	str	lr, [sp, #4]
   1140c:	bl	4cbc <__errno_location@plt>
   11410:	mov	r3, #38	; 0x26
   11414:	ldr	r4, [sp]
   11418:	add	sp, sp, #4
   1141c:	str	r3, [r0]
   11420:	mvn	r0, #0
   11424:	pop	{pc}		; (ldr pc, [sp], #4)

00011428 <rb_setup_fd_devpoll>:
   11428:	str	r4, [sp, #-8]!
   1142c:	str	lr, [sp, #4]
   11430:	bl	4cbc <__errno_location@plt>
   11434:	mov	r3, #38	; 0x26
   11438:	ldr	r4, [sp]
   1143c:	add	sp, sp, #4
   11440:	str	r3, [r0]
   11444:	mvn	r0, #0
   11448:	pop	{pc}		; (ldr pc, [sp], #4)

0001144c <rb_read_timerfd>:
   1144c:	strd	r4, [sp, #-16]!
   11450:	subs	r4, r1, #0
   11454:	str	r6, [sp, #8]
   11458:	str	lr, [sp, #12]
   1145c:	sub	sp, sp, #8
   11460:	beq	114f8 <rb_read_timerfd+0xac>
   11464:	mov	r2, #8
   11468:	mov	r1, sp
   1146c:	mov	r5, r0
   11470:	bl	4764 <rb_read@plt>
   11474:	cmp	r0, #0
   11478:	beq	11500 <rb_read_timerfd+0xb4>
   1147c:	blt	114b4 <rb_read_timerfd+0x68>
   11480:	ldr	r2, [pc, #132]	; 1150c <rb_read_timerfd+0xc0>
   11484:	mov	r0, r5
   11488:	mov	r3, r4
   1148c:	mov	r1, #1
   11490:	add	r2, pc, r2
   11494:	bl	447c <rb_setselect@plt>
   11498:	mov	r0, r4
   1149c:	bl	4884 <rb_run_one_event@plt>
   114a0:	add	sp, sp, #8
   114a4:	ldrd	r4, [sp]
   114a8:	ldr	r6, [sp, #8]
   114ac:	add	sp, sp, #12
   114b0:	pop	{pc}		; (ldr pc, [sp], #4)
   114b4:	bl	4cbc <__errno_location@plt>
   114b8:	mov	r6, r0
   114bc:	ldr	r0, [r0]
   114c0:	bl	43b0 <rb_ignore_errno@plt>
   114c4:	cmp	r0, #0
   114c8:	bne	11480 <rb_read_timerfd+0x34>
   114cc:	mov	r0, r5
   114d0:	bl	4848 <rb_close@plt>
   114d4:	ldr	r0, [r6]
   114d8:	ldr	r4, [r4, #20]
   114dc:	bl	4374 <strerror@plt>
   114e0:	mov	r2, r0
   114e4:	ldr	r0, [pc, #36]	; 11510 <rb_read_timerfd+0xc4>
   114e8:	mov	r1, r4
   114ec:	add	r0, pc, r0
   114f0:	bl	48f0 <rb_lib_log@plt>
   114f4:	b	114a0 <rb_read_timerfd+0x54>
   114f8:	bl	4848 <rb_close@plt>
   114fc:	b	114a0 <rb_read_timerfd+0x54>
   11500:	bl	4cbc <__errno_location@plt>
   11504:	mov	r6, r0
   11508:	b	114cc <rb_read_timerfd+0x80>
   1150c:	.word	0xffffffb4
   11510:	.word	0x00006634

00011514 <rb_init_netio_epoll>:
   11514:	strd	r4, [sp, #-16]!
   11518:	mov	r4, #0
   1151c:	mov	r1, #12
   11520:	ldr	r5, [pc, #140]	; 115b4 <rb_init_netio_epoll+0xa0>
   11524:	mov	r0, #1
   11528:	str	r6, [sp, #8]
   1152c:	str	lr, [sp, #12]
   11530:	add	r5, pc, r5
   11534:	str	r4, [r5]
   11538:	str	r4, [r5, #4]
   1153c:	bl	45c0 <calloc@plt>
   11540:	subs	r6, r0, #0
   11544:	beq	115a8 <rb_init_netio_epoll+0x94>
   11548:	str	r6, [r5, #8]
   1154c:	bl	438c <getdtablesize@plt>
   11550:	str	r0, [r6, #8]
   11554:	bl	44c4 <epoll_create@plt>
   11558:	cmp	r0, #0
   1155c:	str	r0, [r6]
   11560:	blt	115ac <rb_init_netio_epoll+0x98>
   11564:	ldr	r2, [pc, #76]	; 115b8 <rb_init_netio_epoll+0xa4>
   11568:	mov	r1, #64	; 0x40
   1156c:	add	r2, pc, r2
   11570:	bl	4a58 <rb_open@plt>
   11574:	ldr	r5, [r5, #8]
   11578:	mov	r0, #1
   1157c:	ldr	r1, [r5, #8]
   11580:	lsl	r1, r1, #4
   11584:	bl	45c0 <calloc@plt>
   11588:	subs	r3, r0, #0
   1158c:	beq	115a8 <rb_init_netio_epoll+0x94>
   11590:	mov	r0, r4
   11594:	str	r3, [r5, #4]
   11598:	ldrd	r4, [sp]
   1159c:	ldr	r6, [sp, #8]
   115a0:	add	sp, sp, #12
   115a4:	pop	{pc}		; (ldr pc, [sp], #4)
   115a8:	bl	495c <rb_outofmemory@plt>
   115ac:	mvn	r0, #0
   115b0:	b	11598 <rb_init_netio_epoll+0x84>
   115b4:	.word	0x00034e40
   115b8:	.word	0x000065e8

000115bc <rb_setup_fd_epoll>:
   115bc:	mov	r0, #0
   115c0:	bx	lr

000115c4 <rb_setselect_epoll>:
   115c4:	push	{lr}		; (str lr, [sp, #-4]!)
   115c8:	tst	r1, #1
   115cc:	sub	sp, sp, #20
   115d0:	ldr	lr, [r0, #20]
   115d4:	moveq	ip, lr
   115d8:	beq	115f0 <rb_setselect_epoll+0x2c>
   115dc:	cmp	r2, #0
   115e0:	strd	r2, [r0, #28]
   115e4:	orrne	ip, lr, #1
   115e8:	biceq	ip, lr, #1
   115ec:	str	ip, [r0, #20]
   115f0:	tst	r1, #2
   115f4:	beq	1160c <rb_setselect_epoll+0x48>
   115f8:	cmp	r2, #0
   115fc:	strd	r2, [r0, #36]	; 0x24
   11600:	orrne	ip, ip, #4
   11604:	biceq	ip, ip, #4
   11608:	str	ip, [r0, #20]
   1160c:	cmp	lr, #0
   11610:	bne	1165c <rb_setselect_epoll+0x98>
   11614:	cmp	ip, #0
   11618:	beq	11654 <rb_setselect_epoll+0x90>
   1161c:	movgt	r1, #1
   11620:	ble	11664 <rb_setselect_epoll+0xa0>
   11624:	orr	ip, ip, #-2147483648	; 0x80000000
   11628:	str	ip, [sp]
   1162c:	str	r0, [sp, #8]
   11630:	ldr	ip, [pc, #108]	; 116a4 <rb_setselect_epoll+0xe0>
   11634:	mov	r3, sp
   11638:	ldr	r2, [r0, #12]
   1163c:	add	ip, pc, ip
   11640:	ldr	r0, [ip, #8]
   11644:	ldr	r0, [r0]
   11648:	bl	4c2c <epoll_ctl@plt>
   1164c:	cmp	r0, #0
   11650:	bne	11684 <rb_setselect_epoll+0xc0>
   11654:	add	sp, sp, #20
   11658:	pop	{pc}		; (ldr pc, [sp], #4)
   1165c:	cmp	ip, #0
   11660:	bgt	11674 <rb_setselect_epoll+0xb0>
   11664:	mov	r1, #2
   11668:	str	ip, [sp]
   1166c:	str	r0, [sp, #8]
   11670:	b	11630 <rb_setselect_epoll+0x6c>
   11674:	cmp	ip, lr
   11678:	movne	r1, #3
   1167c:	bne	11624 <rb_setselect_epoll+0x60>
   11680:	b	11654 <rb_setselect_epoll+0x90>
   11684:	bl	4cbc <__errno_location@plt>
   11688:	ldr	r0, [r0]
   1168c:	bl	4374 <strerror@plt>
   11690:	mov	r1, r0
   11694:	ldr	r0, [pc, #12]	; 116a8 <rb_setselect_epoll+0xe4>
   11698:	add	r0, pc, r0
   1169c:	bl	48f0 <rb_lib_log@plt>
   116a0:	bl	4398 <abort@plt>
   116a4:	.word	0x00034d34
   116a8:	.word	0x000064d4

000116ac <rb_select_epoll>:
   116ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   116b0:	mov	r3, r0
   116b4:	strd	r6, [sp, #8]
   116b8:	ldr	r6, [pc, #520]	; 118c8 <rb_select_epoll+0x21c>
   116bc:	strd	r8, [sp, #16]
   116c0:	strd	sl, [sp, #24]
   116c4:	str	lr, [sp, #32]
   116c8:	sub	sp, sp, #28
   116cc:	add	r6, pc, r6
   116d0:	ldr	r2, [r6, #8]
   116d4:	ldrd	r0, [r2]
   116d8:	ldr	r2, [r2, #8]
   116dc:	bl	4794 <epoll_wait@plt>
   116e0:	mov	r7, r0
   116e4:	bl	4cbc <__errno_location@plt>
   116e8:	ldr	r4, [r0]
   116ec:	mov	r5, r0
   116f0:	str	r0, [sp, #4]
   116f4:	bl	4968 <rb_set_time@plt>
   116f8:	cmp	r7, #0
   116fc:	str	r4, [r5]
   11700:	blt	118a8 <rb_select_epoll+0x1fc>
   11704:	beq	1183c <rb_select_epoll+0x190>
   11708:	ldr	r8, [pc, #444]	; 118cc <rb_select_epoll+0x220>
   1170c:	mov	r5, #0
   11710:	ldr	sl, [pc, #440]	; 118d0 <rb_select_epoll+0x224>
   11714:	add	r8, pc, r8
   11718:	add	sl, pc, sl
   1171c:	b	11758 <rb_select_epoll+0xac>
   11720:	mov	r0, #0
   11724:	ldr	r1, [r4, #40]	; 0x28
   11728:	cmp	r3, r0
   1172c:	str	r0, [r4, #36]	; 0x24
   11730:	str	r0, [r4, #40]	; 0x28
   11734:	beq	11888 <rb_select_epoll+0x1dc>
   11738:	mov	r0, r4
   1173c:	blx	r3
   11740:	ldrb	r3, [r4, #16]
   11744:	tst	r3, #1
   11748:	bne	118c0 <rb_select_epoll+0x214>
   1174c:	add	r5, r5, #1
   11750:	cmp	r7, r5
   11754:	ble	1183c <rb_select_epoll+0x190>
   11758:	ldr	r3, [r6, #8]
   1175c:	lsl	fp, r5, #4
   11760:	ldr	r3, [r3, #4]
   11764:	add	r2, r3, fp
   11768:	ldr	r3, [r3, r5, lsl #4]
   1176c:	ldr	r4, [r2, #8]
   11770:	tst	r3, #25
   11774:	ldr	r9, [r4, #20]
   11778:	beq	117a0 <rb_select_epoll+0xf4>
   1177c:	mov	r0, #0
   11780:	ldr	r3, [r4, #28]
   11784:	str	r0, [r4, #28]
   11788:	ldr	r1, [r4, #32]
   1178c:	str	r0, [r4, #32]
   11790:	cmp	r3, r0
   11794:	beq	117a0 <rb_select_epoll+0xf4>
   11798:	mov	r0, r4
   1179c:	blx	r3
   117a0:	ldrb	r3, [r4, #16]
   117a4:	tst	r3, #1
   117a8:	beq	1174c <rb_select_epoll+0xa0>
   117ac:	ldr	r1, [r8, #8]
   117b0:	ldr	r3, [r4, #36]	; 0x24
   117b4:	ldr	r1, [r1, #4]
   117b8:	ldr	r1, [r1, fp]
   117bc:	tst	r1, #28
   117c0:	bne	11720 <rb_select_epoll+0x74>
   117c4:	ldr	r1, [r4, #28]
   117c8:	cmp	r1, #0
   117cc:	beq	1185c <rb_select_epoll+0x1b0>
   117d0:	cmp	r3, #0
   117d4:	movne	r3, #5
   117d8:	beq	11894 <rb_select_epoll+0x1e8>
   117dc:	cmp	r9, r3
   117e0:	orrne	r2, r3, #-2147483648	; 0x80000000
   117e4:	beq	1174c <rb_select_epoll+0xa0>
   117e8:	mov	r1, #3
   117ec:	str	r2, [sp, #8]
   117f0:	str	r4, [sp, #16]
   117f4:	str	r3, [r4, #20]
   117f8:	ldr	r0, [sl, #8]
   117fc:	add	r3, sp, #8
   11800:	ldr	r2, [r4, #12]
   11804:	ldr	r0, [r0]
   11808:	bl	4c2c <epoll_ctl@plt>
   1180c:	cmp	r0, #0
   11810:	beq	1174c <rb_select_epoll+0xa0>
   11814:	ldr	r3, [sp, #4]
   11818:	add	r5, r5, #1
   1181c:	ldr	r0, [r3]
   11820:	bl	4374 <strerror@plt>
   11824:	mov	r1, r0
   11828:	ldr	r0, [pc, #164]	; 118d4 <rb_select_epoll+0x228>
   1182c:	add	r0, pc, r0
   11830:	bl	48f0 <rb_lib_log@plt>
   11834:	cmp	r7, r5
   11838:	bgt	11758 <rb_select_epoll+0xac>
   1183c:	mov	r0, #0
   11840:	add	sp, sp, #28
   11844:	ldrd	r4, [sp]
   11848:	ldrd	r6, [sp, #8]
   1184c:	ldrd	r8, [sp, #16]
   11850:	ldrd	sl, [sp, #24]
   11854:	add	sp, sp, #32
   11858:	pop	{pc}		; (ldr pc, [sp], #4)
   1185c:	cmp	r3, #0
   11860:	movne	r3, #4
   11864:	bne	117dc <rb_select_epoll+0x130>
   11868:	cmp	r9, #0
   1186c:	beq	1174c <rb_select_epoll+0xa0>
   11870:	mov	r3, #0
   11874:	mov	r1, #2
   11878:	str	r3, [sp, #8]
   1187c:	str	r4, [sp, #16]
   11880:	str	r3, [r4, #20]
   11884:	b	117f8 <rb_select_epoll+0x14c>
   11888:	ldr	r3, [r4, #28]
   1188c:	cmp	r3, #0
   11890:	beq	11868 <rb_select_epoll+0x1bc>
   11894:	cmp	r9, #1
   11898:	beq	1174c <rb_select_epoll+0xa0>
   1189c:	mov	r2, #-2147483647	; 0x80000001
   118a0:	mov	r3, #1
   118a4:	b	117e8 <rb_select_epoll+0x13c>
   118a8:	mov	r0, r4
   118ac:	bl	43b0 <rb_ignore_errno@plt>
   118b0:	cmp	r0, #0
   118b4:	moveq	r0, #5
   118b8:	bne	1183c <rb_select_epoll+0x190>
   118bc:	b	11840 <rb_select_epoll+0x194>
   118c0:	ldr	r3, [r4, #36]	; 0x24
   118c4:	b	117c4 <rb_select_epoll+0x118>
   118c8:	.word	0x00034ca4
   118cc:	.word	0x00034c5c
   118d0:	.word	0x00034c58
   118d4:	.word	0x0000636c

000118d8 <rb_epoll_supports_event>:
   118d8:	strd	r4, [sp, #-16]!
   118dc:	ldr	r4, [pc, #264]	; 119ec <rb_epoll_supports_event+0x114>
   118e0:	add	r4, pc, r4
   118e4:	ldr	r0, [r4]
   118e8:	str	r6, [sp, #8]
   118ec:	str	lr, [sp, #12]
   118f0:	sub	sp, sp, #288	; 0x120
   118f4:	cmp	r0, #1
   118f8:	beq	1192c <rb_epoll_supports_event+0x54>
   118fc:	cmn	r0, #1
   11900:	moveq	r0, #0
   11904:	beq	1192c <rb_epoll_supports_event+0x54>
   11908:	ldr	r1, [pc, #224]	; 119f0 <rb_epoll_supports_event+0x118>
   1190c:	add	r2, sp, #72	; 0x48
   11910:	mov	r0, #3
   11914:	add	r1, pc, r1
   11918:	bl	4464 <__xstat@plt>
   1191c:	cmp	r0, #0
   11920:	mvneq	r3, #0
   11924:	streq	r3, [r4]
   11928:	bne	11940 <rb_epoll_supports_event+0x68>
   1192c:	add	sp, sp, #288	; 0x120
   11930:	ldrd	r4, [sp]
   11934:	ldr	r6, [sp, #8]
   11938:	add	sp, sp, #12
   1193c:	pop	{pc}		; (ldr pc, [sp], #4)
   11940:	mov	r1, #0
   11944:	mov	r0, r1
   11948:	bl	4b9c <timerfd_create@plt>
   1194c:	cmp	r0, #0
   11950:	bge	119bc <rb_epoll_supports_event+0xe4>
   11954:	mov	r3, #0
   11958:	mov	ip, #26
   1195c:	mov	r0, r3
   11960:	add	r2, sp, #4
   11964:	add	r1, sp, #8
   11968:	str	ip, [sp, #12]
   1196c:	str	r3, [sp, #16]
   11970:	bl	4500 <timer_create@plt>
   11974:	subs	r6, r0, #0
   11978:	bne	119d4 <rb_epoll_supports_event+0xfc>
   1197c:	add	r5, sp, #160	; 0xa0
   11980:	ldr	r0, [sp, #4]
   11984:	bl	4a4c <timer_delete@plt>
   11988:	mov	r0, r5
   1198c:	bl	4368 <sigemptyset@plt>
   11990:	mov	r2, r6
   11994:	mov	r1, r5
   11998:	mvn	r0, #0
   1199c:	bl	4410 <signalfd@plt>
   119a0:	cmp	r0, #0
   119a4:	blt	119d4 <rb_epoll_supports_event+0xfc>
   119a8:	bl	4914 <close@plt>
   119ac:	mov	r3, #1
   119b0:	mov	r0, r3
   119b4:	str	r3, [r4]
   119b8:	b	1192c <rb_epoll_supports_event+0x54>
   119bc:	bl	4914 <close@plt>
   119c0:	mov	r3, #1
   119c4:	mov	r0, r3
   119c8:	str	r3, [r4]
   119cc:	str	r3, [r4, #4]
   119d0:	b	1192c <rb_epoll_supports_event+0x54>
   119d4:	ldr	r3, [pc, #24]	; 119f4 <rb_epoll_supports_event+0x11c>
   119d8:	mvn	r2, #0
   119dc:	mov	r0, #0
   119e0:	add	r3, pc, r3
   119e4:	str	r2, [r3]
   119e8:	b	1192c <rb_epoll_supports_event+0x54>
   119ec:	.word	0x00034a90
   119f0:	.word	0x000062ac
   119f4:	.word	0x00034990

000119f8 <rb_epoll_init_event>:
   119f8:	strd	r4, [sp, #-16]!
   119fc:	str	r6, [sp, #8]
   11a00:	ldr	r6, [pc, #180]	; 11abc <rb_epoll_init_event+0xc4>
   11a04:	str	lr, [sp, #12]
   11a08:	sub	sp, sp, #128	; 0x80
   11a0c:	bl	118d8 <rb_epoll_supports_event>
   11a10:	add	r6, pc, r6
   11a14:	ldr	r4, [r6, #4]
   11a18:	cmp	r4, #0
   11a1c:	beq	11a34 <rb_epoll_init_event+0x3c>
   11a20:	add	sp, sp, #128	; 0x80
   11a24:	ldrd	r4, [sp]
   11a28:	ldr	r6, [sp, #8]
   11a2c:	add	sp, sp, #12
   11a30:	pop	{pc}		; (ldr pc, [sp], #4)
   11a34:	mov	r5, sp
   11a38:	mov	r0, r5
   11a3c:	bl	4368 <sigemptyset@plt>
   11a40:	bl	4458 <__libc_current_sigrtmin@plt>
   11a44:	mov	r1, r0
   11a48:	mov	r0, r5
   11a4c:	bl	4860 <sigaddset@plt>
   11a50:	mov	r2, r4
   11a54:	mov	r1, r5
   11a58:	mov	r0, r4
   11a5c:	bl	498c <sigprocmask@plt>
   11a60:	mov	r0, r5
   11a64:	bl	4368 <sigemptyset@plt>
   11a68:	bl	4458 <__libc_current_sigrtmin@plt>
   11a6c:	mov	r1, r0
   11a70:	mov	r0, r5
   11a74:	bl	4860 <sigaddset@plt>
   11a78:	mov	r2, r4
   11a7c:	mov	r1, r5
   11a80:	mvn	r0, #0
   11a84:	bl	4410 <signalfd@plt>
   11a88:	cmn	r0, #1
   11a8c:	streq	r0, [r6]
   11a90:	beq	11a20 <rb_epoll_init_event+0x28>
   11a94:	ldr	r2, [pc, #36]	; 11ac0 <rb_epoll_init_event+0xc8>
   11a98:	mov	r1, #64	; 0x40
   11a9c:	add	r2, pc, r2
   11aa0:	bl	4a58 <rb_open@plt>
   11aa4:	mov	r5, r0
   11aa8:	bl	45fc <rb_set_nb@plt>
   11aac:	mov	r1, r4
   11ab0:	mov	r0, r5
   11ab4:	bl	11ac4 <signalfd_handler>
   11ab8:	b	11a20 <rb_epoll_init_event+0x28>
   11abc:	.word	0x00034960
   11ac0:	.word	0x0000613c

00011ac4 <signalfd_handler>:
   11ac4:	ldr	r1, [pc, #252]	; 11bc8 <signalfd_handler+0x104>
   11ac8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11acc:	strd	r6, [sp, #8]
   11ad0:	mov	r7, r0
   11ad4:	mov	r0, #128	; 0x80
   11ad8:	str	r8, [sp, #16]
   11adc:	str	lr, [sp, #20]
   11ae0:	add	r1, pc, r1
   11ae4:	add	r6, r1, #16
   11ae8:	add	r3, r1, #2064	; 0x810
   11aec:	mov	r2, r6
   11af0:	add	r1, r1, #2192	; 0x890
   11af4:	add	r3, r3, #8
   11af8:	str	r2, [r3, #-8]
   11afc:	add	r2, r2, #128	; 0x80
   11b00:	str	r0, [r3, #-4]
   11b04:	cmp	r3, r1
   11b08:	bne	11af4 <signalfd_handler+0x30>
   11b0c:	ldr	r8, [pc, #184]	; 11bcc <signalfd_handler+0x108>
   11b10:	add	r8, pc, r8
   11b14:	add	r8, r8, #2064	; 0x810
   11b18:	mov	r0, r7
   11b1c:	bl	44b8 <rb_get_fd@plt>
   11b20:	mov	r2, #16
   11b24:	mov	r1, r8
   11b28:	bl	4c44 <readv@plt>
   11b2c:	cmp	r0, #0
   11b30:	beq	11ba8 <signalfd_handler+0xe4>
   11b34:	blt	11b68 <signalfd_handler+0xa4>
   11b38:	asrs	r0, r0, #7
   11b3c:	addne	r5, r6, r0, lsl #7
   11b40:	movne	r4, r6
   11b44:	beq	11b18 <signalfd_handler+0x54>
   11b48:	ldr	r3, [r4, #48]	; 0x30
   11b4c:	add	r4, r4, #128	; 0x80
   11b50:	subs	r0, r3, #0
   11b54:	beq	11b5c <signalfd_handler+0x98>
   11b58:	bl	4884 <rb_run_one_event@plt>
   11b5c:	cmp	r4, r5
   11b60:	bne	11b48 <signalfd_handler+0x84>
   11b64:	b	11b18 <signalfd_handler+0x54>
   11b68:	bl	4cbc <__errno_location@plt>
   11b6c:	ldr	r0, [r0]
   11b70:	bl	43b0 <rb_ignore_errno@plt>
   11b74:	cmp	r0, #0
   11b78:	beq	11ba8 <signalfd_handler+0xe4>
   11b7c:	ldr	r2, [pc, #76]	; 11bd0 <signalfd_handler+0x10c>
   11b80:	mov	r0, r7
   11b84:	mov	r3, #0
   11b88:	mov	r1, #1
   11b8c:	ldrd	r4, [sp]
   11b90:	ldrd	r6, [sp, #8]
   11b94:	add	r2, pc, r2
   11b98:	ldr	r8, [sp, #16]
   11b9c:	ldr	lr, [sp, #20]
   11ba0:	add	sp, sp, #24
   11ba4:	b	447c <rb_setselect@plt>
   11ba8:	mov	r0, r7
   11bac:	bl	4848 <rb_close@plt>
   11bb0:	ldrd	r4, [sp]
   11bb4:	ldrd	r6, [sp, #8]
   11bb8:	ldr	r8, [sp, #16]
   11bbc:	ldr	lr, [sp, #20]
   11bc0:	add	sp, sp, #24
   11bc4:	b	119f8 <rb_epoll_init_event>
   11bc8:	.word	0x00034890
   11bcc:	.word	0x00034860
   11bd0:	.word	0xffffff28

00011bd4 <rb_epoll_sched_event>:
   11bd4:	ldr	r3, [pc, #544]	; 11dfc <rb_epoll_sched_event+0x228>
   11bd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11bdc:	mov	r5, r0
   11be0:	add	r3, pc, r3
   11be4:	ldr	r4, [r3, #4]
   11be8:	strd	r6, [sp, #8]
   11bec:	str	r8, [sp, #16]
   11bf0:	mov	r8, r1
   11bf4:	str	lr, [sp, #20]
   11bf8:	sub	sp, sp, #80	; 0x50
   11bfc:	cmp	r4, #0
   11c00:	bne	11cb4 <rb_epoll_sched_event+0xe0>
   11c04:	add	r7, sp, #16
   11c08:	mov	r2, #64	; 0x40
   11c0c:	mov	r1, r4
   11c10:	mov	r0, r7
   11c14:	bl	4608 <memset@plt>
   11c18:	mov	r1, #4
   11c1c:	mov	r0, #1
   11c20:	bl	45c0 <calloc@plt>
   11c24:	subs	r6, r0, #0
   11c28:	beq	11dd8 <rb_epoll_sched_event+0x204>
   11c2c:	str	r6, [r5, #40]	; 0x28
   11c30:	bl	4458 <__libc_current_sigrtmin@plt>
   11c34:	mov	r1, r7
   11c38:	mov	r2, r6
   11c3c:	str	r5, [sp, #16]
   11c40:	str	r0, [sp, #20]
   11c44:	mov	r0, r4
   11c48:	bl	4500 <timer_create@plt>
   11c4c:	cmp	r0, #0
   11c50:	blt	11d68 <rb_epoll_sched_event+0x194>
   11c54:	ldr	r3, [r5, #24]
   11c58:	mov	r0, #0
   11c5c:	mov	r1, #0
   11c60:	mov	r2, sp
   11c64:	strd	r0, [sp]
   11c68:	strd	r0, [r2, #8]
   11c6c:	str	r8, [sp, #8]
   11c70:	cmp	r3, #0
   11c74:	mov	r3, #0
   11c78:	ldrdne	r0, [sp, #8]
   11c7c:	strdne	r0, [sp]
   11c80:	mov	r1, r3
   11c84:	ldr	r0, [r6]
   11c88:	bl	4734 <timer_settime@plt>
   11c8c:	cmp	r0, #0
   11c90:	movge	r4, #1
   11c94:	blt	11ddc <rb_epoll_sched_event+0x208>
   11c98:	mov	r0, r4
   11c9c:	add	sp, sp, #80	; 0x50
   11ca0:	ldrd	r4, [sp]
   11ca4:	ldrd	r6, [sp, #8]
   11ca8:	ldr	r8, [sp, #16]
   11cac:	add	sp, sp, #20
   11cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cb4:	mov	r1, #0
   11cb8:	mov	r0, r1
   11cbc:	bl	4b9c <timerfd_create@plt>
   11cc0:	subs	r7, r0, #0
   11cc4:	blt	11db4 <rb_epoll_sched_event+0x1e0>
   11cc8:	ldr	r3, [r5, #24]
   11ccc:	mov	r0, #0
   11cd0:	mov	r1, #0
   11cd4:	add	r2, sp, #16
   11cd8:	strd	r0, [sp, #16]
   11cdc:	strd	r0, [r2, #8]
   11ce0:	str	r8, [sp, #24]
   11ce4:	cmp	r3, #0
   11ce8:	mov	r3, #0
   11cec:	ldrdne	r0, [sp, #24]
   11cf0:	strdne	r0, [sp, #16]
   11cf4:	mov	r1, r3
   11cf8:	mov	r0, r7
   11cfc:	bl	4c20 <timerfd_settime@plt>
   11d00:	cmp	r0, #0
   11d04:	blt	11d88 <rb_epoll_sched_event+0x1b4>
   11d08:	ldr	r6, [pc, #240]	; 11e00 <rb_epoll_sched_event+0x22c>
   11d0c:	mov	r1, #136	; 0x88
   11d10:	mov	r4, #1
   11d14:	ldr	r2, [pc, #232]	; 11e04 <rb_epoll_sched_event+0x230>
   11d18:	ldr	r3, [r5, #20]
   11d1c:	add	r6, pc, r6
   11d20:	add	r6, r6, #2192	; 0x890
   11d24:	add	r2, pc, r2
   11d28:	mov	r0, r6
   11d2c:	bl	4b84 <snprintf@plt>
   11d30:	mov	r2, r6
   11d34:	mov	r1, #64	; 0x40
   11d38:	mov	r0, r7
   11d3c:	bl	4a58 <rb_open@plt>
   11d40:	mov	r6, r0
   11d44:	bl	45fc <rb_set_nb@plt>
   11d48:	ldr	r2, [pc, #184]	; 11e08 <rb_epoll_sched_event+0x234>
   11d4c:	mov	r0, r6
   11d50:	mov	r3, r5
   11d54:	mov	r1, r4
   11d58:	str	r6, [r5, #40]	; 0x28
   11d5c:	add	r2, pc, r2
   11d60:	bl	447c <rb_setselect@plt>
   11d64:	b	11c98 <rb_epoll_sched_event+0xc4>
   11d68:	bl	4cbc <__errno_location@plt>
   11d6c:	ldr	r0, [r0]
   11d70:	bl	4374 <strerror@plt>
   11d74:	mov	r1, r0
   11d78:	ldr	r0, [pc, #140]	; 11e0c <rb_epoll_sched_event+0x238>
   11d7c:	add	r0, pc, r0
   11d80:	bl	48f0 <rb_lib_log@plt>
   11d84:	b	11c98 <rb_epoll_sched_event+0xc4>
   11d88:	bl	4cbc <__errno_location@plt>
   11d8c:	ldr	r0, [r0]
   11d90:	mov	r4, #0
   11d94:	bl	4374 <strerror@plt>
   11d98:	mov	r1, r0
   11d9c:	ldr	r0, [pc, #108]	; 11e10 <rb_epoll_sched_event+0x23c>
   11da0:	add	r0, pc, r0
   11da4:	bl	48f0 <rb_lib_log@plt>
   11da8:	mov	r0, r7
   11dac:	bl	4914 <close@plt>
   11db0:	b	11c98 <rb_epoll_sched_event+0xc4>
   11db4:	bl	4cbc <__errno_location@plt>
   11db8:	ldr	r0, [r0]
   11dbc:	mov	r4, #0
   11dc0:	bl	4374 <strerror@plt>
   11dc4:	mov	r1, r0
   11dc8:	ldr	r0, [pc, #68]	; 11e14 <rb_epoll_sched_event+0x240>
   11dcc:	add	r0, pc, r0
   11dd0:	bl	48f0 <rb_lib_log@plt>
   11dd4:	b	11c98 <rb_epoll_sched_event+0xc4>
   11dd8:	bl	495c <rb_outofmemory@plt>
   11ddc:	bl	4cbc <__errno_location@plt>
   11de0:	ldr	r0, [r0]
   11de4:	bl	4374 <strerror@plt>
   11de8:	mov	r1, r0
   11dec:	ldr	r0, [pc, #36]	; 11e18 <rb_epoll_sched_event+0x244>
   11df0:	add	r0, pc, r0
   11df4:	bl	48f0 <rb_lib_log@plt>
   11df8:	b	11c98 <rb_epoll_sched_event+0xc4>
   11dfc:	.word	0x00034790
   11e00:	.word	0x00034654
   11e04:	.word	0x00005eec
   11e08:	.word	0xfffff6e8
   11e0c:	.word	0x00005ea0
   11e10:	.word	0x00005e58
   11e14:	.word	0x00005e18
   11e18:	.word	0x00005e40

00011e1c <rb_epoll_unsched_event>:
   11e1c:	ldr	r3, [pc, #96]	; 11e84 <rb_epoll_unsched_event+0x68>
   11e20:	str	r4, [sp, #-8]!
   11e24:	mov	r4, r0
   11e28:	ldr	r0, [r0, #40]	; 0x28
   11e2c:	add	r3, pc, r3
   11e30:	ldr	r3, [r3, #4]
   11e34:	str	lr, [sp, #4]
   11e38:	cmp	r3, #0
   11e3c:	bne	11e6c <rb_epoll_unsched_event+0x50>
   11e40:	ldr	r0, [r0]
   11e44:	bl	4a4c <timer_delete@plt>
   11e48:	ldr	r0, [r4, #40]	; 0x28
   11e4c:	cmp	r0, #0
   11e50:	beq	11e58 <rb_epoll_unsched_event+0x3c>
   11e54:	bl	46d4 <free@plt>
   11e58:	mov	r3, #0
   11e5c:	str	r3, [r4, #40]	; 0x28
   11e60:	ldr	r4, [sp]
   11e64:	add	sp, sp, #4
   11e68:	pop	{pc}		; (ldr pc, [sp], #4)
   11e6c:	bl	4848 <rb_close@plt>
   11e70:	mov	r3, #0
   11e74:	str	r3, [r4, #40]	; 0x28
   11e78:	ldr	r4, [sp]
   11e7c:	add	sp, sp, #4
   11e80:	pop	{pc}		; (ldr pc, [sp], #4)
   11e84:	.word	0x00034544

00011e88 <rb_setup_fd_poll>:
   11e88:	mov	r0, #0
   11e8c:	bx	lr

00011e90 <rb_init_netio_poll>:
   11e90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e94:	strd	r6, [sp, #8]
   11e98:	str	r8, [sp, #16]
   11e9c:	str	lr, [sp, #20]
   11ea0:	bl	4440 <rb_getmaxconnect@plt>
   11ea4:	lsl	r1, r0, #3
   11ea8:	mov	r0, #1
   11eac:	bl	45c0 <calloc@plt>
   11eb0:	cmp	r0, #0
   11eb4:	beq	11f20 <rb_init_netio_poll+0x90>
   11eb8:	ldr	r7, [pc, #100]	; 11f24 <rb_init_netio_poll+0x94>
   11ebc:	mov	r4, #0
   11ec0:	mvn	r6, #0
   11ec4:	ldr	r5, [pc, #92]	; 11f28 <rb_init_netio_poll+0x98>
   11ec8:	add	r7, pc, r7
   11ecc:	str	r0, [r7]
   11ed0:	add	r5, pc, r5
   11ed4:	bl	4440 <rb_getmaxconnect@plt>
   11ed8:	str	r0, [r7, #8]
   11edc:	b	11eec <rb_init_netio_poll+0x5c>
   11ee0:	ldr	r3, [r5]
   11ee4:	str	r6, [r3, r4, lsl #3]
   11ee8:	add	r4, r4, #1
   11eec:	bl	4440 <rb_getmaxconnect@plt>
   11ef0:	cmp	r0, r4
   11ef4:	bgt	11ee0 <rb_init_netio_poll+0x50>
   11ef8:	ldr	r3, [pc, #44]	; 11f2c <rb_init_netio_poll+0x9c>
   11efc:	mov	r2, #0
   11f00:	mov	r0, r2
   11f04:	ldrd	r4, [sp]
   11f08:	ldrd	r6, [sp, #8]
   11f0c:	add	r3, pc, r3
   11f10:	ldr	r8, [sp, #16]
   11f14:	add	sp, sp, #20
   11f18:	str	r2, [r3, #4]
   11f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f20:	bl	495c <rb_outofmemory@plt>
   11f24:	.word	0x00034dc0
   11f28:	.word	0x00034db8
   11f2c:	.word	0x00034d7c

00011f30 <rb_setselect_poll>:
   11f30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f34:	subs	r4, r0, #0
   11f38:	strd	r6, [sp, #8]
   11f3c:	str	r8, [sp, #16]
   11f40:	str	lr, [sp, #20]
   11f44:	beq	11fbc <rb_setselect_poll+0x8c>
   11f48:	tst	r1, #1
   11f4c:	and	r1, r1, #2
   11f50:	beq	11fd0 <rb_setselect_poll+0xa0>
   11f54:	cmp	r2, #0
   11f58:	strd	r2, [r4, #28]
   11f5c:	ldr	ip, [r4, #20]
   11f60:	beq	1204c <rb_setselect_poll+0x11c>
   11f64:	orr	ip, ip, #64	; 0x40
   11f68:	cmp	r1, #0
   11f6c:	str	ip, [r4, #20]
   11f70:	bne	1203c <rb_setselect_poll+0x10c>
   11f74:	ldr	r6, [pc, #360]	; 120e4 <rb_setselect_poll+0x1b4>
   11f78:	ldr	r2, [r4, #12]
   11f7c:	add	r6, pc, r6
   11f80:	ldr	r5, [r6]
   11f84:	ldr	r3, [r6, #8]
   11f88:	cmp	r2, r3
   11f8c:	bge	1206c <rb_setselect_poll+0x13c>
   11f90:	ldr	r0, [pc, #336]	; 120e8 <rb_setselect_poll+0x1b8>
   11f94:	add	ip, r5, r2, lsl #3
   11f98:	ldr	r1, [r4, #20]
   11f9c:	add	r0, pc, r0
   11fa0:	ldr	r3, [r0, #4]
   11fa4:	cmp	r1, #0
   11fa8:	ble	11ff4 <rb_setselect_poll+0xc4>
   11fac:	cmp	r2, r3
   11fb0:	strh	r1, [ip, #4]
   11fb4:	str	r2, [r5, r2, lsl #3]
   11fb8:	strgt	r2, [r0, #4]
   11fbc:	ldrd	r4, [sp]
   11fc0:	ldrd	r6, [sp, #8]
   11fc4:	ldr	r8, [sp, #16]
   11fc8:	add	sp, sp, #20
   11fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   11fd0:	cmp	r1, #0
   11fd4:	beq	11f74 <rb_setselect_poll+0x44>
   11fd8:	cmp	r2, #0
   11fdc:	strd	r2, [r4, #36]	; 0x24
   11fe0:	ldr	ip, [r4, #20]
   11fe4:	beq	12060 <rb_setselect_poll+0x130>
   11fe8:	orr	ip, ip, #256	; 0x100
   11fec:	str	ip, [r4, #20]
   11ff0:	b	11f74 <rb_setselect_poll+0x44>
   11ff4:	mov	r0, #0
   11ff8:	mvn	r1, #0
   11ffc:	cmp	r2, r3
   12000:	strh	r0, [ip, #4]
   12004:	str	r1, [r5, r2, lsl #3]
   12008:	bne	11fbc <rb_setselect_poll+0x8c>
   1200c:	cmp	r3, r0
   12010:	bge	12024 <rb_setselect_poll+0xf4>
   12014:	b	11fbc <rb_setselect_poll+0x8c>
   12018:	ldr	r2, [r5, r3, lsl #3]
   1201c:	cmn	r2, #1
   12020:	bne	120d0 <rb_setselect_poll+0x1a0>
   12024:	subs	r3, r3, #1
   12028:	bcs	12018 <rb_setselect_poll+0xe8>
   1202c:	ldr	r2, [pc, #184]	; 120ec <rb_setselect_poll+0x1bc>
   12030:	add	r2, pc, r2
   12034:	str	r3, [r2, #4]
   12038:	b	11fbc <rb_setselect_poll+0x8c>
   1203c:	orr	ip, ip, #256	; 0x100
   12040:	str	ip, [r4, #20]
   12044:	strd	r2, [r4, #36]	; 0x24
   12048:	b	11f74 <rb_setselect_poll+0x44>
   1204c:	bic	ip, ip, #64	; 0x40
   12050:	cmp	r1, #0
   12054:	str	ip, [r4, #20]
   12058:	beq	11f74 <rb_setselect_poll+0x44>
   1205c:	strd	r2, [r4, #36]	; 0x24
   12060:	bic	ip, ip, #256	; 0x100
   12064:	str	ip, [r4, #20]
   12068:	b	11f74 <rb_setselect_poll+0x44>
   1206c:	add	r3, r3, #1024	; 0x400
   12070:	mov	r0, r5
   12074:	lsl	r7, r3, #3
   12078:	str	r3, [r6, #8]
   1207c:	mov	r1, r7
   12080:	bl	4c14 <realloc@plt>
   12084:	subs	r5, r0, #0
   12088:	beq	120e0 <rb_setselect_poll+0x1b0>
   1208c:	sub	r0, r7, #8128	; 0x1fc0
   12090:	mov	r2, #8192	; 0x2000
   12094:	str	r5, [r6]
   12098:	sub	r0, r0, #56	; 0x38
   1209c:	mov	r1, #0
   120a0:	add	r0, r5, r0
   120a4:	bl	4608 <memset@plt>
   120a8:	sub	r3, r7, #8192	; 0x2000
   120ac:	sub	r2, r7, #8
   120b0:	add	r3, r5, r3
   120b4:	add	r2, r5, r2
   120b8:	mvn	r1, #0
   120bc:	str	r1, [r3, #8]!
   120c0:	cmp	r2, r3
   120c4:	bne	120bc <rb_setselect_poll+0x18c>
   120c8:	ldr	r2, [r4, #12]
   120cc:	b	11f90 <rb_setselect_poll+0x60>
   120d0:	ldr	r2, [pc, #24]	; 120f0 <rb_setselect_poll+0x1c0>
   120d4:	add	r2, pc, r2
   120d8:	str	r3, [r2, #4]
   120dc:	b	11fbc <rb_setselect_poll+0x8c>
   120e0:	bl	495c <rb_outofmemory@plt>
   120e4:	.word	0x00034d0c
   120e8:	.word	0x00034cec
   120ec:	.word	0x00034c58
   120f0:	.word	0x00034bb4

000120f4 <rb_select_poll>:
   120f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   120f8:	mov	r2, r0
   120fc:	strd	r6, [sp, #8]
   12100:	ldr	r6, [pc, #468]	; 122dc <rb_select_poll+0x1e8>
   12104:	strd	r8, [sp, #16]
   12108:	ldr	r8, [pc, #464]	; 122e0 <rb_select_poll+0x1ec>
   1210c:	str	sl, [sp, #24]
   12110:	str	lr, [sp, #28]
   12114:	add	r6, pc, r6
   12118:	ldrd	r0, [r6]
   1211c:	add	r8, pc, r8
   12120:	add	r1, r1, #1
   12124:	bl	49d4 <poll@plt>
   12128:	mov	r4, r0
   1212c:	bl	4968 <rb_set_time@plt>
   12130:	cmp	r4, #0
   12134:	blt	122b0 <rb_select_poll+0x1bc>
   12138:	beq	12270 <rb_select_poll+0x17c>
   1213c:	ldr	r3, [r6, #4]
   12140:	cmp	r3, #0
   12144:	blt	12270 <rb_select_poll+0x17c>
   12148:	mov	r4, #0
   1214c:	mov	r7, r6
   12150:	mov	r9, r4
   12154:	b	12168 <rb_select_poll+0x74>
   12158:	ldr	r3, [r7, #4]
   1215c:	add	r4, r4, #1
   12160:	cmp	r3, r4
   12164:	blt	12270 <rb_select_poll+0x17c>
   12168:	ldr	r3, [r6]
   1216c:	add	r1, r3, r4, lsl #3
   12170:	ldr	r2, [r3, r4, lsl #3]
   12174:	ldrsh	sl, [r1, #6]
   12178:	cmp	sl, #0
   1217c:	lsrne	r3, r2, #31
   12180:	moveq	r3, #1
   12184:	cmp	r3, #0
   12188:	bne	12158 <rb_select_poll+0x64>
   1218c:	ldr	r1, [pc, #336]	; 122e4 <rb_select_poll+0x1f0>
   12190:	asr	r3, r2, #24
   12194:	eor	r3, r3, r2, asr #12
   12198:	eor	r3, r3, r2
   1219c:	ldr	r1, [r8, r1]
   121a0:	ubfx	r3, r3, #0, #12
   121a4:	add	r3, r3, r3, lsl #1
   121a8:	ldr	r1, [r1]
   121ac:	ldr	r3, [r1, r3, lsl #2]
   121b0:	cmp	r3, #0
   121b4:	bne	121c8 <rb_select_poll+0xd4>
   121b8:	b	12158 <rb_select_poll+0x64>
   121bc:	ldr	r3, [r3, #8]
   121c0:	cmp	r3, #0
   121c4:	beq	12158 <rb_select_poll+0x64>
   121c8:	ldr	r5, [r3]
   121cc:	ldr	r1, [r5, #12]
   121d0:	cmp	r2, r1
   121d4:	bne	121bc <rb_select_poll+0xc8>
   121d8:	tst	sl, #89	; 0x59
   121dc:	beq	12200 <rb_select_poll+0x10c>
   121e0:	ldr	r3, [r5, #28]
   121e4:	str	r9, [r5, #28]
   121e8:	ldr	r1, [r5, #32]
   121ec:	str	r9, [r5, #32]
   121f0:	cmp	r3, #0
   121f4:	beq	1228c <rb_select_poll+0x198>
   121f8:	mov	r0, r5
   121fc:	blx	r3
   12200:	ldrb	r3, [r5, #16]
   12204:	tst	r3, #1
   12208:	beq	12234 <rb_select_poll+0x140>
   1220c:	tst	sl, #284	; 0x11c
   12210:	beq	12234 <rb_select_poll+0x140>
   12214:	ldr	r3, [r5, #36]	; 0x24
   12218:	str	r9, [r5, #36]	; 0x24
   1221c:	ldr	r1, [r5, #40]	; 0x28
   12220:	str	r9, [r5, #40]	; 0x28
   12224:	cmp	r3, #0
   12228:	beq	122cc <rb_select_poll+0x1d8>
   1222c:	mov	r0, r5
   12230:	blx	r3
   12234:	ldr	r3, [r5, #28]
   12238:	cmp	r3, #0
   1223c:	beq	12298 <rb_select_poll+0x1a4>
   12240:	ldr	r3, [r5, #36]	; 0x24
   12244:	cmp	r3, #0
   12248:	bne	12158 <rb_select_poll+0x64>
   1224c:	mov	r3, #0
   12250:	mov	r0, r5
   12254:	mov	r2, r3
   12258:	mov	r1, #2
   1225c:	bl	11f30 <rb_setselect_poll>
   12260:	ldr	r3, [r7, #4]
   12264:	add	r4, r4, #1
   12268:	cmp	r3, r4
   1226c:	bge	12168 <rb_select_poll+0x74>
   12270:	mov	r0, #0
   12274:	ldrd	r4, [sp]
   12278:	ldrd	r6, [sp, #8]
   1227c:	ldrd	r8, [sp, #16]
   12280:	ldr	sl, [sp, #24]
   12284:	add	sp, sp, #28
   12288:	pop	{pc}		; (ldr pc, [sp], #4)
   1228c:	ldrb	r3, [r5, #16]
   12290:	tst	r3, #1
   12294:	bne	1220c <rb_select_poll+0x118>
   12298:	mov	r3, #0
   1229c:	mov	r1, #1
   122a0:	mov	r2, r3
   122a4:	mov	r0, r5
   122a8:	bl	11f30 <rb_setselect_poll>
   122ac:	b	12240 <rb_select_poll+0x14c>
   122b0:	bl	4cbc <__errno_location@plt>
   122b4:	ldr	r0, [r0]
   122b8:	bl	43b0 <rb_ignore_errno@plt>
   122bc:	cmp	r0, #0
   122c0:	movne	r0, #5
   122c4:	beq	12270 <rb_select_poll+0x17c>
   122c8:	b	12274 <rb_select_poll+0x180>
   122cc:	ldr	r3, [r5, #28]
   122d0:	cmp	r3, #0
   122d4:	bne	1224c <rb_select_poll+0x158>
   122d8:	b	12298 <rb_select_poll+0x1a4>
   122dc:	.word	0x00034b74
   122e0:	.word	0x00016edc
   122e4:	.word	0x000003bc

000122e8 <rb_ports_supports_event>:
   122e8:	str	r4, [sp, #-8]!
   122ec:	str	lr, [sp, #4]
   122f0:	bl	4cbc <__errno_location@plt>
   122f4:	mov	r3, #38	; 0x26
   122f8:	ldr	r4, [sp]
   122fc:	add	sp, sp, #4
   12300:	str	r3, [r0]
   12304:	mov	r0, #0
   12308:	pop	{pc}		; (ldr pc, [sp], #4)

0001230c <rb_ports_init_event>:
   1230c:	bx	lr

00012310 <rb_ports_sched_event>:
   12310:	str	r4, [sp, #-8]!
   12314:	str	lr, [sp, #4]
   12318:	bl	4cbc <__errno_location@plt>
   1231c:	mov	r3, #38	; 0x26
   12320:	ldr	r4, [sp]
   12324:	add	sp, sp, #4
   12328:	str	r3, [r0]
   1232c:	mvn	r0, #0
   12330:	pop	{pc}		; (ldr pc, [sp], #4)

00012334 <rb_ports_unsched_event>:
   12334:	bx	lr

00012338 <rb_init_netio_ports>:
   12338:	mov	r0, #38	; 0x26
   1233c:	bx	lr

00012340 <rb_setselect_ports>:
   12340:	str	r4, [sp, #-8]!
   12344:	str	lr, [sp, #4]
   12348:	bl	4cbc <__errno_location@plt>
   1234c:	mov	r3, #38	; 0x26
   12350:	ldr	r4, [sp]
   12354:	add	sp, sp, #4
   12358:	str	r3, [r0]
   1235c:	pop	{pc}		; (ldr pc, [sp], #4)

00012360 <rb_select_ports>:
   12360:	str	r4, [sp, #-8]!
   12364:	str	lr, [sp, #4]
   12368:	bl	4cbc <__errno_location@plt>
   1236c:	mov	r3, #38	; 0x26
   12370:	ldr	r4, [sp]
   12374:	add	sp, sp, #4
   12378:	str	r3, [r0]
   1237c:	mvn	r0, #0
   12380:	pop	{pc}		; (ldr pc, [sp], #4)

00012384 <rb_setup_fd_ports>:
   12384:	str	r4, [sp, #-8]!
   12388:	str	lr, [sp, #4]
   1238c:	bl	4cbc <__errno_location@plt>
   12390:	mov	r3, #38	; 0x26
   12394:	ldr	r4, [sp]
   12398:	add	sp, sp, #4
   1239c:	str	r3, [r0]
   123a0:	mvn	r0, #0
   123a4:	pop	{pc}		; (ldr pc, [sp], #4)

000123a8 <rb_init_netio_sigio>:
   123a8:	strd	r4, [sp, #-16]!
   123ac:	ldr	r5, [pc, #204]	; 12480 <rb_init_netio_sigio+0xd8>
   123b0:	str	r6, [sp, #8]
   123b4:	str	lr, [sp, #12]
   123b8:	bl	4440 <rb_getmaxconnect@plt>
   123bc:	lsl	r1, r0, #3
   123c0:	mov	r0, #1
   123c4:	bl	45c0 <calloc@plt>
   123c8:	cmp	r0, #0
   123cc:	add	r5, pc, r5
   123d0:	beq	1247c <rb_init_netio_sigio+0xd4>
   123d4:	ldr	r3, [pc, #168]	; 12484 <rb_init_netio_sigio+0xdc>
   123d8:	mov	r4, #0
   123dc:	mvn	r6, #0
   123e0:	ldr	r5, [r5, r3]
   123e4:	str	r0, [r5]
   123e8:	bl	4440 <rb_getmaxconnect@plt>
   123ec:	str	r0, [r5, #8]
   123f0:	b	12400 <rb_init_netio_sigio+0x58>
   123f4:	ldr	r3, [r5]
   123f8:	str	r6, [r3, r4, lsl #3]
   123fc:	add	r4, r4, #1
   12400:	bl	4440 <rb_getmaxconnect@plt>
   12404:	cmp	r0, r4
   12408:	bgt	123f4 <rb_init_netio_sigio+0x4c>
   1240c:	ldr	r4, [pc, #116]	; 12488 <rb_init_netio_sigio+0xe0>
   12410:	mov	r3, #1
   12414:	mov	r6, #0
   12418:	str	r6, [r5, #4]
   1241c:	add	r4, pc, r4
   12420:	str	r3, [r4], #4
   12424:	mov	r0, r4
   12428:	bl	4368 <sigemptyset@plt>
   1242c:	bl	4458 <__libc_current_sigrtmin@plt>
   12430:	mov	r1, r0
   12434:	mov	r0, r4
   12438:	bl	4860 <sigaddset@plt>
   1243c:	mov	r1, #29
   12440:	mov	r0, r4
   12444:	bl	4860 <sigaddset@plt>
   12448:	bl	4458 <__libc_current_sigrtmin@plt>
   1244c:	add	r1, r0, #1
   12450:	mov	r0, r4
   12454:	bl	4860 <sigaddset@plt>
   12458:	mov	r2, r6
   1245c:	mov	r1, r4
   12460:	mov	r0, r6
   12464:	bl	498c <sigprocmask@plt>
   12468:	mov	r0, r6
   1246c:	ldrd	r4, [sp]
   12470:	ldr	r6, [sp, #8]
   12474:	add	sp, sp, #12
   12478:	pop	{pc}		; (ldr pc, [sp], #4)
   1247c:	bl	495c <rb_outofmemory@plt>
   12480:	.word	0x00016c2c
   12484:	.word	0x000003cc
   12488:	.word	0x00034878

0001248c <rb_setup_fd_sigio>:
   1248c:	strd	r4, [sp, #-16]!
   12490:	mov	r2, #0
   12494:	mov	r1, #3
   12498:	ldr	r5, [r0, #12]
   1249c:	str	r6, [sp, #8]
   124a0:	str	lr, [sp, #12]
   124a4:	mov	r0, r5
   124a8:	bl	4bd8 <fcntl@plt>
   124ac:	cmn	r0, #1
   124b0:	beq	12520 <rb_setup_fd_sigio+0x94>
   124b4:	tst	r0, #8192	; 0x2000
   124b8:	mov	r4, r0
   124bc:	bne	12534 <rb_setup_fd_sigio+0xa8>
   124c0:	orr	r2, r4, #10240	; 0x2800
   124c4:	mov	r1, #4
   124c8:	mov	r0, r5
   124cc:	bl	4bd8 <fcntl@plt>
   124d0:	cmn	r0, #1
   124d4:	beq	12520 <rb_setup_fd_sigio+0x94>
   124d8:	bl	4458 <__libc_current_sigrtmin@plt>
   124dc:	mov	r2, r0
   124e0:	mov	r1, #10
   124e4:	mov	r0, r5
   124e8:	bl	4bd8 <fcntl@plt>
   124ec:	cmn	r0, #1
   124f0:	beq	12520 <rb_setup_fd_sigio+0x94>
   124f4:	bl	4aa0 <getpid@plt>
   124f8:	mov	r2, r0
   124fc:	mov	r1, #8
   12500:	mov	r0, r5
   12504:	bl	4bd8 <fcntl@plt>
   12508:	adds	r0, r0, #1
   1250c:	ldrd	r4, [sp]
   12510:	movne	r0, #1
   12514:	ldr	r6, [sp, #8]
   12518:	add	sp, sp, #12
   1251c:	pop	{pc}		; (ldr pc, [sp], #4)
   12520:	ldrd	r4, [sp]
   12524:	mov	r0, #0
   12528:	ldr	r6, [sp, #8]
   1252c:	add	sp, sp, #12
   12530:	pop	{pc}		; (ldr pc, [sp], #4)
   12534:	bic	r4, r0, #8192	; 0x2000
   12538:	mov	r1, #4
   1253c:	mov	r2, r4
   12540:	mov	r0, r5
   12544:	bl	4bd8 <fcntl@plt>
   12548:	b	124c0 <rb_setup_fd_sigio+0x34>

0001254c <rb_setselect_sigio>:
   1254c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12550:	subs	r4, r0, #0
   12554:	strd	r6, [sp, #8]
   12558:	str	lr, [sp, #20]
   1255c:	ldr	lr, [pc, #404]	; 126f8 <rb_setselect_sigio+0x1ac>
   12560:	str	r8, [sp, #16]
   12564:	add	lr, pc, lr
   12568:	beq	125d8 <rb_setselect_sigio+0x8c>
   1256c:	tst	r1, #1
   12570:	and	r1, r1, #2
   12574:	beq	125ec <rb_setselect_sigio+0xa0>
   12578:	cmp	r2, #0
   1257c:	strd	r2, [r4, #28]
   12580:	ldr	ip, [r4, #20]
   12584:	beq	12660 <rb_setselect_sigio+0x114>
   12588:	orr	ip, ip, #64	; 0x40
   1258c:	cmp	r1, #0
   12590:	str	ip, [r4, #20]
   12594:	bne	12650 <rb_setselect_sigio+0x104>
   12598:	ldr	r3, [pc, #348]	; 126fc <rb_setselect_sigio+0x1b0>
   1259c:	ldr	r2, [r4, #12]
   125a0:	ldr	r5, [lr, r3]
   125a4:	ldr	r0, [r5]
   125a8:	ldr	r7, [r5, #8]
   125ac:	cmp	r2, r7
   125b0:	bge	12680 <rb_setselect_sigio+0x134>
   125b4:	ldr	r1, [r4, #20]
   125b8:	add	ip, r0, r2, lsl #3
   125bc:	ldr	r3, [r5, #4]
   125c0:	cmp	r1, #0
   125c4:	ble	12610 <rb_setselect_sigio+0xc4>
   125c8:	cmp	r2, r3
   125cc:	strh	r1, [ip, #4]
   125d0:	str	r2, [r0, r2, lsl #3]
   125d4:	strgt	r2, [r5, #4]
   125d8:	ldrd	r4, [sp]
   125dc:	ldrd	r6, [sp, #8]
   125e0:	ldr	r8, [sp, #16]
   125e4:	add	sp, sp, #20
   125e8:	pop	{pc}		; (ldr pc, [sp], #4)
   125ec:	cmp	r1, #0
   125f0:	beq	12598 <rb_setselect_sigio+0x4c>
   125f4:	cmp	r2, #0
   125f8:	strd	r2, [r4, #36]	; 0x24
   125fc:	ldr	ip, [r4, #20]
   12600:	beq	12674 <rb_setselect_sigio+0x128>
   12604:	orr	ip, ip, #256	; 0x100
   12608:	str	ip, [r4, #20]
   1260c:	b	12598 <rb_setselect_sigio+0x4c>
   12610:	mov	lr, #0
   12614:	mvn	r1, #0
   12618:	cmp	r2, r3
   1261c:	strh	lr, [ip, #4]
   12620:	str	r1, [r0, r2, lsl #3]
   12624:	bne	125d8 <rb_setselect_sigio+0x8c>
   12628:	cmp	r3, lr
   1262c:	bge	12640 <rb_setselect_sigio+0xf4>
   12630:	b	125d8 <rb_setselect_sigio+0x8c>
   12634:	ldr	r2, [r0, r3, lsl #3]
   12638:	cmn	r2, #1
   1263c:	bne	12648 <rb_setselect_sigio+0xfc>
   12640:	subs	r3, r3, #1
   12644:	bcs	12634 <rb_setselect_sigio+0xe8>
   12648:	str	r3, [r5, #4]
   1264c:	b	125d8 <rb_setselect_sigio+0x8c>
   12650:	orr	ip, ip, #256	; 0x100
   12654:	str	ip, [r4, #20]
   12658:	strd	r2, [r4, #36]	; 0x24
   1265c:	b	12598 <rb_setselect_sigio+0x4c>
   12660:	bic	ip, ip, #64	; 0x40
   12664:	cmp	r1, #0
   12668:	str	ip, [r4, #20]
   1266c:	beq	12598 <rb_setselect_sigio+0x4c>
   12670:	strd	r2, [r4, #36]	; 0x24
   12674:	bic	ip, ip, #256	; 0x100
   12678:	str	ip, [r4, #20]
   1267c:	b	12598 <rb_setselect_sigio+0x4c>
   12680:	add	r3, r7, #1024	; 0x400
   12684:	lsl	r6, r3, #3
   12688:	str	r3, [r5, #8]
   1268c:	mov	r1, r6
   12690:	bl	4c14 <realloc@plt>
   12694:	cmp	r0, #0
   12698:	beq	126f4 <rb_setselect_sigio+0x1a8>
   1269c:	sub	r3, r6, #8128	; 0x1fc0
   126a0:	mov	r2, #8192	; 0x2000
   126a4:	str	r0, [r5]
   126a8:	sub	r3, r3, #56	; 0x38
   126ac:	mov	r1, #0
   126b0:	add	r0, r0, r3
   126b4:	add	r7, r7, #1
   126b8:	bl	4608 <memset@plt>
   126bc:	ldr	r0, [r5]
   126c0:	ldr	ip, [r5, #8]
   126c4:	cmp	r7, ip
   126c8:	bge	126ec <rb_setselect_sigio+0x1a0>
   126cc:	sub	r2, r0, #8
   126d0:	sub	r3, r6, #8192	; 0x2000
   126d4:	add	r2, r2, ip, lsl #3
   126d8:	mvn	r1, #0
   126dc:	add	r3, r0, r3
   126e0:	str	r1, [r3, #8]!
   126e4:	cmp	r3, r2
   126e8:	bne	126e0 <rb_setselect_sigio+0x194>
   126ec:	ldr	r2, [r4, #12]
   126f0:	b	125b4 <rb_setselect_sigio+0x68>
   126f4:	bl	495c <rb_outofmemory@plt>
   126f8:	.word	0x00016a94
   126fc:	.word	0x000003cc

00012700 <rb_sigio_supports_event>:
   12700:	strd	r4, [sp, #-12]!
   12704:	ldr	r5, [pc, #136]	; 12794 <rb_sigio_supports_event+0x94>
   12708:	add	r5, pc, r5
   1270c:	ldr	r0, [r5, #132]	; 0x84
   12710:	str	lr, [sp, #8]
   12714:	sub	sp, sp, #76	; 0x4c
   12718:	cmp	r0, #1
   1271c:	beq	12760 <rb_sigio_supports_event+0x60>
   12720:	cmn	r0, #1
   12724:	moveq	r0, #0
   12728:	beq	12760 <rb_sigio_supports_event+0x60>
   1272c:	mov	r4, #0
   12730:	mov	r3, #26
   12734:	mov	r0, r4
   12738:	add	r2, sp, #4
   1273c:	add	r1, sp, #8
   12740:	str	r3, [sp, #12]
   12744:	str	r4, [sp, #16]
   12748:	bl	4500 <timer_create@plt>
   1274c:	cmp	r0, r4
   12750:	beq	12770 <rb_sigio_supports_event+0x70>
   12754:	mvn	r3, #0
   12758:	mov	r0, r4
   1275c:	str	r3, [r5, #132]	; 0x84
   12760:	add	sp, sp, #76	; 0x4c
   12764:	ldrd	r4, [sp]
   12768:	add	sp, sp, #8
   1276c:	pop	{pc}		; (ldr pc, [sp], #4)
   12770:	ldr	r0, [sp, #4]
   12774:	bl	4a4c <timer_delete@plt>
   12778:	mov	r3, #1
   1277c:	mov	r0, r3
   12780:	str	r3, [r5, #132]	; 0x84
   12784:	add	sp, sp, #76	; 0x4c
   12788:	ldrd	r4, [sp]
   1278c:	add	sp, sp, #8
   12790:	pop	{pc}		; (ldr pc, [sp], #4)
   12794:	.word	0x0003458c

00012798 <rb_select_sigio>:
   12798:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1279c:	strd	r6, [sp, #8]
   127a0:	mov	r6, r0
   127a4:	strd	r8, [sp, #16]
   127a8:	str	sl, [sp, #24]
   127ac:	str	lr, [sp, #28]
   127b0:	sub	sp, sp, #136	; 0x88
   127b4:	bl	12700 <rb_sigio_supports_event>
   127b8:	ldr	r5, [pc, #1000]	; 12ba8 <rb_select_sigio+0x410>
   127bc:	mvn	r3, r6
   127c0:	cmp	r0, #0
   127c4:	lsr	r3, r3, #31
   127c8:	movne	r0, #1
   127cc:	moveq	r0, r3
   127d0:	cmp	r0, #0
   127d4:	add	r5, pc, r5
   127d8:	beq	1280c <rb_select_sigio+0x74>
   127dc:	movw	r1, #19923	; 0x4dd3
   127e0:	movt	r1, #4194	; 0x1062
   127e4:	asr	r3, r6, #31
   127e8:	mov	r0, #1000	; 0x3e8
   127ec:	movw	r2, #16960	; 0x4240
   127f0:	movt	r2, #15
   127f4:	smull	ip, r1, r1, r6
   127f8:	rsb	r3, r3, r1, asr #6
   127fc:	mls	r1, r0, r3, r6
   12800:	str	r3, [sp]
   12804:	mul	r2, r2, r1
   12808:	str	r2, [sp, #4]
   1280c:	ldr	r4, [pc, #920]	; 12bac <rb_select_sigio+0x414>
   12810:	ldr	r8, [pc, #920]	; 12bb0 <rb_select_sigio+0x418>
   12814:	add	r4, pc, r4
   12818:	add	r7, r4, #4
   1281c:	add	r8, pc, r8
   12820:	ldr	r3, [r4]
   12824:	cmp	r3, #0
   12828:	bne	1289c <rb_select_sigio+0x104>
   1282c:	ldr	r3, [r4, #132]	; 0x84
   12830:	cmp	r3, #0
   12834:	lsreq	r3, r6, #31
   12838:	movne	r3, #1
   1283c:	cmp	r3, #0
   12840:	beq	12a78 <rb_select_sigio+0x2e0>
   12844:	add	r1, sp, #8
   12848:	mov	r0, r7
   1284c:	bl	444c <sigwaitinfo@plt>
   12850:	mov	r9, r0
   12854:	cmp	r9, #0
   12858:	ble	12a94 <rb_select_sigio+0x2fc>
   1285c:	cmp	r9, #29
   12860:	beq	12b48 <rb_select_sigio+0x3b0>
   12864:	bl	4458 <__libc_current_sigrtmin@plt>
   12868:	add	r0, r0, #1
   1286c:	cmp	r0, r9
   12870:	bne	129a0 <rb_select_sigio+0x208>
   12874:	ldr	r3, [r8, #132]	; 0x84
   12878:	cmp	r3, #0
   1287c:	beq	129a0 <rb_select_sigio+0x208>
   12880:	ldr	r0, [sp, #28]
   12884:	cmp	r0, #0
   12888:	beq	12820 <rb_select_sigio+0x88>
   1288c:	bl	4884 <rb_run_one_event@plt>
   12890:	ldr	r3, [r4]
   12894:	cmp	r3, #0
   12898:	beq	1282c <rb_select_sigio+0x94>
   1289c:	bl	4458 <__libc_current_sigrtmin@plt>
   128a0:	mov	r4, #0
   128a4:	mov	r1, #1
   128a8:	bl	44ac <signal@plt>
   128ac:	bl	4458 <__libc_current_sigrtmin@plt>
   128b0:	mov	r1, r4
   128b4:	bl	44ac <signal@plt>
   128b8:	ldr	r1, [pc, #756]	; 12bb4 <rb_select_sigio+0x41c>
   128bc:	mov	r2, r6
   128c0:	ldr	r3, [pc, #752]	; 12bb8 <rb_select_sigio+0x420>
   128c4:	add	r1, pc, r1
   128c8:	str	r4, [r1]
   128cc:	ldr	r7, [r5, r3]
   128d0:	ldrd	r0, [r7]
   128d4:	add	r1, r1, #1
   128d8:	bl	49d4 <poll@plt>
   128dc:	mov	r6, r0
   128e0:	bl	4968 <rb_set_time@plt>
   128e4:	cmp	r6, r4
   128e8:	blt	12b58 <rb_select_sigio+0x3c0>
   128ec:	beq	1297c <rb_select_sigio+0x1e4>
   128f0:	ldr	r3, [r7, #4]
   128f4:	cmp	r3, #0
   128f8:	blt	1297c <rb_select_sigio+0x1e4>
   128fc:	mov	r6, r4
   12900:	mov	r8, r4
   12904:	ldr	r3, [r7]
   12908:	add	r2, r3, r6, lsl #3
   1290c:	ldrsh	r9, [r2, #6]
   12910:	cmp	r9, #0
   12914:	beq	1296c <rb_select_sigio+0x1d4>
   12918:	ldr	r1, [r3, r6, lsl #3]
   1291c:	cmp	r1, #0
   12920:	blt	1296c <rb_select_sigio+0x1d4>
   12924:	ldr	r2, [pc, #656]	; 12bbc <rb_select_sigio+0x424>
   12928:	asr	r3, r1, #24
   1292c:	eor	r3, r3, r1, asr #12
   12930:	eor	r3, r3, r1
   12934:	ldr	r2, [r5, r2]
   12938:	ubfx	r3, r3, #0, #12
   1293c:	add	r3, r3, r3, lsl #1
   12940:	ldr	r2, [r2]
   12944:	ldr	r3, [r2, r3, lsl #2]
   12948:	cmp	r3, #0
   1294c:	beq	1296c <rb_select_sigio+0x1d4>
   12950:	ldr	r4, [r3]
   12954:	ldr	r2, [r4, #12]
   12958:	cmp	r1, r2
   1295c:	beq	12aac <rb_select_sigio+0x314>
   12960:	ldr	r3, [r3, #8]
   12964:	cmp	r3, #0
   12968:	bne	12950 <rb_select_sigio+0x1b8>
   1296c:	ldr	r3, [r7, #4]
   12970:	add	r6, r6, #1
   12974:	cmp	r3, r6
   12978:	bge	12904 <rb_select_sigio+0x16c>
   1297c:	mov	r4, #0
   12980:	mov	r0, r4
   12984:	add	sp, sp, #136	; 0x88
   12988:	ldrd	r4, [sp]
   1298c:	ldrd	r6, [sp, #8]
   12990:	ldrd	r8, [sp, #16]
   12994:	ldr	sl, [sp, #24]
   12998:	add	sp, sp, #28
   1299c:	pop	{pc}		; (ldr pc, [sp], #4)
   129a0:	ldr	r3, [pc, #528]	; 12bb8 <rb_select_sigio+0x420>
   129a4:	ldr	r1, [sp, #20]
   129a8:	ldr	r2, [sp, #24]
   129ac:	ldr	r3, [r5, r3]
   129b0:	cmp	r2, #0
   129b4:	ldr	r3, [r3]
   129b8:	add	r3, r3, r2, lsl #3
   129bc:	ldrh	r9, [r3, #6]
   129c0:	orr	r9, r9, r1
   129c4:	sxth	r9, r9
   129c8:	strh	r9, [r3, #6]
   129cc:	blt	12820 <rb_select_sigio+0x88>
   129d0:	ldr	r1, [pc, #484]	; 12bbc <rb_select_sigio+0x424>
   129d4:	asr	r3, r2, #24
   129d8:	eor	r3, r3, r2, asr #12
   129dc:	eor	r3, r3, r2
   129e0:	ldr	r1, [r5, r1]
   129e4:	ubfx	r3, r3, #0, #12
   129e8:	add	r3, r3, r3, lsl #1
   129ec:	ldr	r1, [r1]
   129f0:	ldr	r3, [r1, r3, lsl #2]
   129f4:	cmp	r3, #0
   129f8:	bne	12a0c <rb_select_sigio+0x274>
   129fc:	b	12820 <rb_select_sigio+0x88>
   12a00:	ldr	r3, [r3, #8]
   12a04:	cmp	r3, #0
   12a08:	beq	12820 <rb_select_sigio+0x88>
   12a0c:	ldr	sl, [r3]
   12a10:	ldr	r1, [sl, #12]
   12a14:	cmp	r2, r1
   12a18:	bne	12a00 <rb_select_sigio+0x268>
   12a1c:	tst	r9, #89	; 0x59
   12a20:	beq	12a48 <rb_select_sigio+0x2b0>
   12a24:	ldr	r2, [sl, #28]
   12a28:	mov	r3, #0
   12a2c:	str	r3, [sl, #28]
   12a30:	ldr	r1, [sl, #32]
   12a34:	str	r3, [sl, #32]
   12a38:	cmp	r2, r3
   12a3c:	beq	12a48 <rb_select_sigio+0x2b0>
   12a40:	mov	r0, sl
   12a44:	blx	r2
   12a48:	tst	r9, #284	; 0x11c
   12a4c:	beq	12820 <rb_select_sigio+0x88>
   12a50:	ldr	r2, [sl, #36]	; 0x24
   12a54:	mov	r3, #0
   12a58:	str	r3, [sl, #36]	; 0x24
   12a5c:	ldr	r1, [sl, #40]	; 0x28
   12a60:	str	r3, [sl, #40]	; 0x28
   12a64:	cmp	r2, r3
   12a68:	beq	12820 <rb_select_sigio+0x88>
   12a6c:	mov	r0, sl
   12a70:	blx	r2
   12a74:	b	12820 <rb_select_sigio+0x88>
   12a78:	mov	r2, sp
   12a7c:	add	r1, sp, #8
   12a80:	mov	r0, r7
   12a84:	bl	4494 <sigtimedwait@plt>
   12a88:	mov	r9, r0
   12a8c:	cmp	r9, #0
   12a90:	bgt	1285c <rb_select_sigio+0xc4>
   12a94:	ldr	r3, [pc, #292]	; 12bc0 <rb_select_sigio+0x428>
   12a98:	ldr	r4, [pc, r3]
   12a9c:	cmp	r4, #0
   12aa0:	bne	1289c <rb_select_sigio+0x104>
   12aa4:	bl	4968 <rb_set_time@plt>
   12aa8:	b	12980 <rb_select_sigio+0x1e8>
   12aac:	tst	r9, #89	; 0x59
   12ab0:	beq	12ad4 <rb_select_sigio+0x33c>
   12ab4:	ldr	r3, [r4, #28]
   12ab8:	str	r8, [r4, #28]
   12abc:	ldr	r1, [r4, #32]
   12ac0:	str	r8, [r4, #32]
   12ac4:	cmp	r3, #0
   12ac8:	beq	12b98 <rb_select_sigio+0x400>
   12acc:	mov	r0, r4
   12ad0:	blx	r3
   12ad4:	ldrb	r3, [r4, #16]
   12ad8:	tst	r3, #1
   12adc:	beq	12b08 <rb_select_sigio+0x370>
   12ae0:	tst	r9, #284	; 0x11c
   12ae4:	beq	12b08 <rb_select_sigio+0x370>
   12ae8:	ldr	r3, [r4, #36]	; 0x24
   12aec:	str	r8, [r4, #36]	; 0x24
   12af0:	ldr	r1, [r4, #40]	; 0x28
   12af4:	str	r8, [r4, #40]	; 0x28
   12af8:	cmp	r3, #0
   12afc:	beq	12b74 <rb_select_sigio+0x3dc>
   12b00:	mov	r0, r4
   12b04:	blx	r3
   12b08:	ldr	r3, [r4, #28]
   12b0c:	cmp	r3, #0
   12b10:	beq	12b80 <rb_select_sigio+0x3e8>
   12b14:	ldr	r3, [r4, #36]	; 0x24
   12b18:	cmp	r3, #0
   12b1c:	bne	1296c <rb_select_sigio+0x1d4>
   12b20:	mov	r3, #0
   12b24:	mov	r0, r4
   12b28:	mov	r2, r3
   12b2c:	mov	r1, #2
   12b30:	bl	1254c <rb_setselect_sigio>
   12b34:	ldr	r3, [r7, #4]
   12b38:	add	r6, r6, #1
   12b3c:	cmp	r3, r6
   12b40:	bge	12904 <rb_select_sigio+0x16c>
   12b44:	b	1297c <rb_select_sigio+0x1e4>
   12b48:	ldr	r0, [pc, #116]	; 12bc4 <rb_select_sigio+0x42c>
   12b4c:	add	r0, pc, r0
   12b50:	bl	48f0 <rb_lib_log@plt>
   12b54:	b	1289c <rb_select_sigio+0x104>
   12b58:	bl	4cbc <__errno_location@plt>
   12b5c:	ldr	r0, [r0]
   12b60:	bl	43b0 <rb_ignore_errno@plt>
   12b64:	cmp	r0, #0
   12b68:	movne	r4, #5
   12b6c:	beq	1297c <rb_select_sigio+0x1e4>
   12b70:	b	12980 <rb_select_sigio+0x1e8>
   12b74:	ldr	r3, [r4, #28]
   12b78:	cmp	r3, #0
   12b7c:	bne	12b20 <rb_select_sigio+0x388>
   12b80:	mov	r3, #0
   12b84:	mov	r1, #1
   12b88:	mov	r2, r3
   12b8c:	mov	r0, r4
   12b90:	bl	1254c <rb_setselect_sigio>
   12b94:	b	12b14 <rb_select_sigio+0x37c>
   12b98:	ldrb	r3, [r4, #16]
   12b9c:	tst	r3, #1
   12ba0:	beq	12b80 <rb_select_sigio+0x3e8>
   12ba4:	b	12ae0 <rb_select_sigio+0x348>
   12ba8:	.word	0x00016824
   12bac:	.word	0x00034480
   12bb0:	.word	0x00034478
   12bb4:	.word	0x000343d0
   12bb8:	.word	0x000003cc
   12bbc:	.word	0x000003bc
   12bc0:	.word	0x000341fc
   12bc4:	.word	0x000050f8

00012bc8 <rb_sigio_init_event>:
   12bc8:	b	12700 <rb_sigio_supports_event>

00012bcc <rb_sigio_sched_event>:
   12bcc:	ldr	r3, [pc, #292]	; 12cf8 <rb_sigio_sched_event+0x12c>
   12bd0:	add	r3, pc, r3
   12bd4:	ldr	r3, [r3, #132]	; 0x84
   12bd8:	cmp	r3, #0
   12bdc:	ble	12ca4 <rb_sigio_sched_event+0xd8>
   12be0:	strd	r4, [sp, #-20]!	; 0xffffffec
   12be4:	mov	r2, #64	; 0x40
   12be8:	mov	r4, r0
   12bec:	strd	r6, [sp, #8]
   12bf0:	mov	r7, r1
   12bf4:	mov	r1, #0
   12bf8:	str	lr, [sp, #16]
   12bfc:	sub	sp, sp, #84	; 0x54
   12c00:	add	r6, sp, #16
   12c04:	mov	r0, r6
   12c08:	bl	4608 <memset@plt>
   12c0c:	mov	r1, #4
   12c10:	mov	r0, #1
   12c14:	bl	45c0 <calloc@plt>
   12c18:	subs	r5, r0, #0
   12c1c:	beq	12cd0 <rb_sigio_sched_event+0x104>
   12c20:	str	r5, [r4, #40]	; 0x28
   12c24:	bl	4458 <__libc_current_sigrtmin@plt>
   12c28:	add	r3, r0, #1
   12c2c:	mov	r1, r6
   12c30:	str	r4, [sp, #16]
   12c34:	mov	r2, r5
   12c38:	mov	r0, #0
   12c3c:	str	r3, [sp, #20]
   12c40:	bl	4500 <timer_create@plt>
   12c44:	cmp	r0, #0
   12c48:	blt	12cac <rb_sigio_sched_event+0xe0>
   12c4c:	ldr	r3, [r4, #24]
   12c50:	mov	r0, #0
   12c54:	mov	r1, #0
   12c58:	mov	r2, sp
   12c5c:	strd	r0, [sp]
   12c60:	strd	r0, [r2, #8]
   12c64:	str	r7, [sp, #8]
   12c68:	cmp	r3, #0
   12c6c:	mov	r3, #0
   12c70:	ldrdne	r0, [sp, #8]
   12c74:	strdne	r0, [sp]
   12c78:	mov	r1, r3
   12c7c:	ldr	r0, [r5]
   12c80:	bl	4734 <timer_settime@plt>
   12c84:	cmp	r0, #0
   12c88:	movge	r0, #1
   12c8c:	blt	12cd4 <rb_sigio_sched_event+0x108>
   12c90:	add	sp, sp, #84	; 0x54
   12c94:	ldrd	r4, [sp]
   12c98:	ldrd	r6, [sp, #8]
   12c9c:	add	sp, sp, #16
   12ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca4:	mov	r0, #0
   12ca8:	bx	lr
   12cac:	bl	4cbc <__errno_location@plt>
   12cb0:	ldr	r0, [r0]
   12cb4:	bl	4374 <strerror@plt>
   12cb8:	mov	r1, r0
   12cbc:	ldr	r0, [pc, #56]	; 12cfc <rb_sigio_sched_event+0x130>
   12cc0:	add	r0, pc, r0
   12cc4:	bl	48f0 <rb_lib_log@plt>
   12cc8:	mov	r0, #0
   12ccc:	b	12c90 <rb_sigio_sched_event+0xc4>
   12cd0:	bl	495c <rb_outofmemory@plt>
   12cd4:	bl	4cbc <__errno_location@plt>
   12cd8:	ldr	r0, [r0]
   12cdc:	bl	4374 <strerror@plt>
   12ce0:	mov	r1, r0
   12ce4:	ldr	r0, [pc, #20]	; 12d00 <rb_sigio_sched_event+0x134>
   12ce8:	add	r0, pc, r0
   12cec:	bl	48f0 <rb_lib_log@plt>
   12cf0:	mov	r0, #0
   12cf4:	b	12c90 <rb_sigio_sched_event+0xc4>
   12cf8:	.word	0x000340c4
   12cfc:	.word	0x00004f5c
   12d00:	.word	0x00004f48

00012d04 <rb_sigio_unsched_event>:
   12d04:	ldr	r3, [pc, #72]	; 12d54 <rb_sigio_unsched_event+0x50>
   12d08:	add	r3, pc, r3
   12d0c:	ldr	r3, [r3, #132]	; 0x84
   12d10:	cmp	r3, #0
   12d14:	bxle	lr
   12d18:	str	r4, [sp, #-8]!
   12d1c:	mov	r4, r0
   12d20:	ldr	r3, [r0, #40]	; 0x28
   12d24:	ldr	r0, [r3]
   12d28:	str	lr, [sp, #4]
   12d2c:	bl	4a4c <timer_delete@plt>
   12d30:	ldr	r0, [r4, #40]	; 0x28
   12d34:	cmp	r0, #0
   12d38:	beq	12d40 <rb_sigio_unsched_event+0x3c>
   12d3c:	bl	46d4 <free@plt>
   12d40:	mov	r3, #0
   12d44:	str	r3, [r4, #40]	; 0x28
   12d48:	ldr	r4, [sp]
   12d4c:	add	sp, sp, #4
   12d50:	pop	{pc}		; (ldr pc, [sp], #4)
   12d54:	.word	0x00033f8c

00012d58 <select_update_selectfds.isra.0>:
   12d58:	cmp	r2, #1
   12d5c:	strd	r4, [sp, #-16]!
   12d60:	str	r6, [sp, #8]
   12d64:	str	lr, [sp, #12]
   12d68:	ldr	lr, [r1]
   12d6c:	beq	12dc4 <select_update_selectfds.isra.0+0x6c>
   12d70:	cmp	r0, #0
   12d74:	add	r2, r0, #31
   12d78:	movge	r2, r0
   12d7c:	rsbs	r6, r0, #0
   12d80:	and	r6, r6, #31
   12d84:	and	r5, r0, #31
   12d88:	asr	ip, r2, #5
   12d8c:	rsbpl	r5, r6, #0
   12d90:	mov	r4, #1
   12d94:	cmp	r3, #0
   12d98:	lsl	r4, r4, r5
   12d9c:	beq	12ed0 <select_update_selectfds.isra.0+0x178>
   12da0:	ldr	r2, [pc, #364]	; 12f14 <select_update_selectfds.isra.0+0x1bc>
   12da4:	orr	r3, lr, #2
   12da8:	str	r3, [r1]
   12dac:	add	r2, pc, r2
   12db0:	add	r2, r2, ip, lsl #2
   12db4:	ldr	r1, [r2, #128]	; 0x80
   12db8:	orr	r1, r1, r4
   12dbc:	str	r1, [r2, #128]	; 0x80
   12dc0:	b	12e10 <select_update_selectfds.isra.0+0xb8>
   12dc4:	ldr	r4, [pc, #332]	; 12f18 <select_update_selectfds.isra.0+0x1c0>
   12dc8:	cmp	r0, #0
   12dcc:	add	ip, r0, #31
   12dd0:	movge	ip, r0
   12dd4:	rsbs	r6, r0, #0
   12dd8:	asr	ip, ip, #5
   12ddc:	and	r6, r6, #31
   12de0:	and	r5, r0, #31
   12de4:	rsbpl	r5, r6, #0
   12de8:	cmp	r3, #0
   12dec:	lsl	r2, r2, r5
   12df0:	add	r4, pc, r4
   12df4:	ldr	r3, [r4, ip, lsl #2]
   12df8:	orrne	r2, r3, r2
   12dfc:	biceq	r2, r3, r2
   12e00:	orrne	r3, lr, #1
   12e04:	biceq	r3, lr, #1
   12e08:	str	r2, [r4, ip, lsl #2]
   12e0c:	str	r3, [r1]
   12e10:	ldr	r2, [pc, #260]	; 12f1c <select_update_selectfds.isra.0+0x1c4>
   12e14:	tst	r3, #3
   12e18:	add	r2, pc, r2
   12e1c:	ldr	r3, [r2]
   12e20:	beq	12e3c <select_update_selectfds.isra.0+0xe4>
   12e24:	cmp	r0, r3
   12e28:	strgt	r0, [r2]
   12e2c:	ldrd	r4, [sp]
   12e30:	ldr	r6, [sp, #8]
   12e34:	add	sp, sp, #12
   12e38:	pop	{pc}		; (ldr pc, [sp], #4)
   12e3c:	cmp	r0, r3
   12e40:	bgt	12e2c <select_update_selectfds.isra.0+0xd4>
   12e44:	cmp	r3, #0
   12e48:	blt	12e2c <select_update_selectfds.isra.0+0xd4>
   12e4c:	ldr	r1, [pc, #204]	; 12f20 <select_update_selectfds.isra.0+0x1c8>
   12e50:	asr	r0, r3, #5
   12e54:	and	r2, r3, #31
   12e58:	mov	lr, #1
   12e5c:	lsl	r2, lr, r2
   12e60:	add	r1, pc, r1
   12e64:	ldr	ip, [r1, r0, lsl #2]
   12e68:	tst	r2, ip
   12e6c:	bne	12e2c <select_update_selectfds.isra.0+0xd4>
   12e70:	add	r1, r1, r0, lsl #2
   12e74:	ldr	r1, [r1, #128]	; 0x80
   12e78:	tst	r2, r1
   12e7c:	bne	12e2c <select_update_selectfds.isra.0+0xd4>
   12e80:	ldr	r0, [pc, #156]	; 12f24 <select_update_selectfds.isra.0+0x1cc>
   12e84:	add	r0, pc, r0
   12e88:	b	12ea8 <select_update_selectfds.isra.0+0x150>
   12e8c:	add	ip, r0, r1, lsl #2
   12e90:	ldr	r1, [r0, r1, lsl #2]
   12e94:	tst	r2, r1
   12e98:	bne	12ef4 <select_update_selectfds.isra.0+0x19c>
   12e9c:	ldr	r1, [ip, #128]	; 0x80
   12ea0:	tst	r2, r1
   12ea4:	bne	12f04 <select_update_selectfds.isra.0+0x1ac>
   12ea8:	sub	r3, r3, #1
   12eac:	and	r2, r3, #31
   12eb0:	cmn	r3, #1
   12eb4:	asr	r1, r3, #5
   12eb8:	lsl	r2, lr, r2
   12ebc:	bne	12e8c <select_update_selectfds.isra.0+0x134>
   12ec0:	ldr	r2, [pc, #96]	; 12f28 <select_update_selectfds.isra.0+0x1d0>
   12ec4:	add	r2, pc, r2
   12ec8:	str	r3, [r2]
   12ecc:	b	12e2c <select_update_selectfds.isra.0+0xd4>
   12ed0:	ldr	r2, [pc, #84]	; 12f2c <select_update_selectfds.isra.0+0x1d4>
   12ed4:	bic	r3, lr, #2
   12ed8:	str	r3, [r1]
   12edc:	add	r2, pc, r2
   12ee0:	add	r2, r2, ip, lsl #2
   12ee4:	ldr	r1, [r2, #128]	; 0x80
   12ee8:	bic	r1, r1, r4
   12eec:	str	r1, [r2, #128]	; 0x80
   12ef0:	b	12e10 <select_update_selectfds.isra.0+0xb8>
   12ef4:	ldr	r2, [pc, #52]	; 12f30 <select_update_selectfds.isra.0+0x1d8>
   12ef8:	add	r2, pc, r2
   12efc:	str	r3, [r2]
   12f00:	b	12e2c <select_update_selectfds.isra.0+0xd4>
   12f04:	ldr	r2, [pc, #40]	; 12f34 <select_update_selectfds.isra.0+0x1dc>
   12f08:	add	r2, pc, r2
   12f0c:	str	r3, [r2]
   12f10:	b	12e2c <select_update_selectfds.isra.0+0xd4>
   12f14:	.word	0x00033f70
   12f18:	.word	0x00033f2c
   12f1c:	.word	0x00016664
   12f20:	.word	0x00033ebc
   12f24:	.word	0x00033e98
   12f28:	.word	0x000165b8
   12f2c:	.word	0x00033e40
   12f30:	.word	0x00016584
   12f34:	.word	0x00016574

00012f38 <rb_setup_fd_select>:
   12f38:	mov	r0, #0
   12f3c:	bx	lr

00012f40 <rb_init_netio_select>:
   12f40:	ldr	r3, [pc, #96]	; 12fa8 <rb_init_netio_select+0x68>
   12f44:	mov	r1, #0
   12f48:	ldr	r2, [pc, #92]	; 12fac <rb_init_netio_select+0x6c>
   12f4c:	add	r3, pc, r3
   12f50:	ldr	r3, [r3, r2]
   12f54:	ldr	r2, [r3]
   12f58:	cmp	r2, #1024	; 0x400
   12f5c:	movgt	r2, #1024	; 0x400
   12f60:	strgt	r2, [r3]
   12f64:	ldr	r2, [pc, #68]	; 12fb0 <rb_init_netio_select+0x70>
   12f68:	add	r2, pc, r2
   12f6c:	sub	r3, r2, #4
   12f70:	add	r2, r2, #124	; 0x7c
   12f74:	str	r1, [r3, #4]!
   12f78:	cmp	r3, r2
   12f7c:	bne	12f74 <rb_init_netio_select+0x34>
   12f80:	ldr	r2, [pc, #44]	; 12fb4 <rb_init_netio_select+0x74>
   12f84:	mov	r1, #0
   12f88:	add	r2, pc, r2
   12f8c:	add	r3, r2, #124	; 0x7c
   12f90:	add	r2, r2, #252	; 0xfc
   12f94:	str	r1, [r3, #4]!
   12f98:	cmp	r3, r2
   12f9c:	bne	12f94 <rb_init_netio_select+0x54>
   12fa0:	mov	r0, #0
   12fa4:	bx	lr
   12fa8:	.word	0x000160ac
   12fac:	.word	0x0000039c
   12fb0:	.word	0x00033db4
   12fb4:	.word	0x00033d94

00012fb8 <rb_setselect_select>:
   12fb8:	tst	r1, #1
   12fbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12fc0:	mov	r5, r1
   12fc4:	mov	r4, r0
   12fc8:	strd	r6, [sp, #8]
   12fcc:	mov	r6, r2
   12fd0:	mov	r7, r3
   12fd4:	str	r8, [sp, #16]
   12fd8:	str	lr, [sp, #20]
   12fdc:	bne	12ffc <rb_setselect_select+0x44>
   12fe0:	tst	r5, #2
   12fe4:	bne	1301c <rb_setselect_select+0x64>
   12fe8:	ldrd	r4, [sp]
   12fec:	ldrd	r6, [sp, #8]
   12ff0:	ldr	r8, [sp, #16]
   12ff4:	add	sp, sp, #20
   12ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ffc:	mov	r3, r2
   13000:	add	r1, r0, #20
   13004:	ldr	r0, [r0, #12]
   13008:	mov	r2, #1
   1300c:	strd	r6, [r4, #28]
   13010:	bl	12d58 <select_update_selectfds.isra.0>
   13014:	tst	r5, #2
   13018:	beq	12fe8 <rb_setselect_select+0x30>
   1301c:	mov	r3, r6
   13020:	add	r1, r4, #20
   13024:	ldr	r0, [r4, #12]
   13028:	mov	r2, #2
   1302c:	ldr	r8, [sp, #16]
   13030:	ldr	lr, [sp, #20]
   13034:	strd	r6, [r4, #36]	; 0x24
   13038:	ldrd	r4, [sp]
   1303c:	ldrd	r6, [sp, #8]
   13040:	add	sp, sp, #24
   13044:	b	12d58 <select_update_selectfds.isra.0>

00013048 <rb_select_select>:
   13048:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1304c:	mov	r2, #128	; 0x80
   13050:	mov	r4, r0
   13054:	ldr	r5, [pc, #564]	; 13290 <rb_select_select+0x248>
   13058:	strd	r6, [sp, #8]
   1305c:	ldr	r7, [pc, #560]	; 13294 <rb_select_select+0x24c>
   13060:	strd	r8, [sp, #16]
   13064:	ldr	r9, [pc, #556]	; 13298 <rb_select_select+0x250>
   13068:	add	r5, pc, r5
   1306c:	strd	sl, [sp, #24]
   13070:	add	r6, r5, #384	; 0x180
   13074:	mov	r1, r5
   13078:	str	lr, [sp, #32]
   1307c:	add	r0, r5, #256	; 0x100
   13080:	sub	sp, sp, #20
   13084:	bl	47e8 <memcpy@plt>
   13088:	mov	r8, r6
   1308c:	mov	r0, r6
   13090:	mov	r6, #1000	; 0x3e8
   13094:	add	r1, r5, #128	; 0x80
   13098:	mov	r2, #128	; 0x80
   1309c:	add	r9, pc, r9
   130a0:	add	sl, sp, #8
   130a4:	add	r7, pc, r7
   130a8:	mul	r6, r6, r4
   130ac:	bl	47e8 <memcpy@plt>
   130b0:	b	130c8 <rb_select_select+0x80>
   130b4:	bl	4cbc <__errno_location@plt>
   130b8:	ldr	r0, [r0]
   130bc:	bl	43b0 <rb_ignore_errno@plt>
   130c0:	cmp	r0, r4
   130c4:	beq	13284 <rb_select_select+0x23c>
   130c8:	ldr	r0, [r7]
   130cc:	mov	r4, #0
   130d0:	mov	r2, r8
   130d4:	mov	r3, r4
   130d8:	add	r1, r5, #256	; 0x100
   130dc:	str	sl, [sp]
   130e0:	str	r4, [sp, #8]
   130e4:	str	r6, [sp, #12]
   130e8:	add	r0, r0, #1
   130ec:	bl	4908 <select@plt>
   130f0:	subs	fp, r0, #0
   130f4:	blt	130b4 <rb_select_select+0x6c>
   130f8:	bl	4968 <rb_set_time@plt>
   130fc:	cmp	fp, #0
   13100:	beq	13180 <rb_select_select+0x138>
   13104:	ldr	r3, [r7]
   13108:	cmp	r3, #0
   1310c:	blt	13180 <rb_select_select+0x138>
   13110:	ldr	r3, [pc, #388]	; 1329c <rb_select_select+0x254>
   13114:	ldr	r7, [pc, #388]	; 132a0 <rb_select_select+0x258>
   13118:	ldr	r8, [pc, #388]	; 132a4 <rb_select_select+0x25c>
   1311c:	ldr	r5, [pc, #388]	; 132a8 <rb_select_select+0x260>
   13120:	add	r7, pc, r7
   13124:	ldr	r6, [r9, r3]
   13128:	add	r8, pc, r8
   1312c:	add	r5, pc, r5
   13130:	asr	r3, r4, #24
   13134:	ldr	r2, [r6]
   13138:	eor	r3, r3, r4, asr #12
   1313c:	eor	r3, r3, r4
   13140:	ubfx	r3, r3, #0, #12
   13144:	add	r3, r3, r3, lsl #1
   13148:	ldr	r3, [r2, r3, lsl #2]
   1314c:	cmp	r3, #0
   13150:	beq	13170 <rb_select_select+0x128>
   13154:	ldr	r9, [r3]
   13158:	ldr	r2, [r9, #12]
   1315c:	cmp	r2, r4
   13160:	beq	131a0 <rb_select_select+0x158>
   13164:	ldr	r3, [r3, #8]
   13168:	cmp	r3, #0
   1316c:	bne	13154 <rb_select_select+0x10c>
   13170:	ldr	r3, [r5]
   13174:	add	r4, r4, #1
   13178:	cmp	r3, r4
   1317c:	bge	13130 <rb_select_select+0xe8>
   13180:	mov	r0, #0
   13184:	add	sp, sp, #20
   13188:	ldrd	r4, [sp]
   1318c:	ldrd	r6, [sp, #8]
   13190:	ldrd	r8, [sp, #16]
   13194:	ldrd	sl, [sp, #24]
   13198:	add	sp, sp, #32
   1319c:	pop	{pc}		; (ldr pc, [sp], #4)
   131a0:	asr	sl, r4, #5
   131a4:	and	r3, r4, #31
   131a8:	mov	fp, #1
   131ac:	lsl	fp, fp, r3
   131b0:	lsl	sl, sl, #2
   131b4:	add	r3, r7, sl
   131b8:	ldr	r3, [r3, #256]	; 0x100
   131bc:	tst	fp, r3
   131c0:	beq	131e4 <rb_select_select+0x19c>
   131c4:	ldr	r3, [r9, #28]
   131c8:	mov	r2, #0
   131cc:	str	r2, [r9, #28]
   131d0:	cmp	r3, r2
   131d4:	beq	131e4 <rb_select_select+0x19c>
   131d8:	mov	r0, r9
   131dc:	ldr	r1, [r9, #32]
   131e0:	blx	r3
   131e4:	ldrb	r3, [r9, #16]
   131e8:	tst	r3, #1
   131ec:	beq	13170 <rb_select_select+0x128>
   131f0:	add	sl, r8, sl
   131f4:	ldr	r3, [sl, #384]	; 0x180
   131f8:	tst	fp, r3
   131fc:	beq	13220 <rb_select_select+0x1d8>
   13200:	ldr	r3, [r9, #36]	; 0x24
   13204:	mov	r2, #0
   13208:	str	r2, [r9, #36]	; 0x24
   1320c:	cmp	r3, r2
   13210:	beq	13260 <rb_select_select+0x218>
   13214:	mov	r0, r9
   13218:	ldr	r1, [r9, #40]	; 0x28
   1321c:	blx	r3
   13220:	ldr	r3, [r9, #28]
   13224:	cmp	r3, #0
   13228:	beq	1326c <rb_select_select+0x224>
   1322c:	ldr	r3, [r9, #36]	; 0x24
   13230:	cmp	r3, #0
   13234:	bne	13170 <rb_select_select+0x128>
   13238:	mov	r3, #0
   1323c:	mov	r2, #2
   13240:	ldr	r0, [r9, #12]
   13244:	add	r1, r9, #20
   13248:	add	r4, r4, #1
   1324c:	bl	12d58 <select_update_selectfds.isra.0>
   13250:	ldr	r3, [r5]
   13254:	cmp	r3, r4
   13258:	bge	13130 <rb_select_select+0xe8>
   1325c:	b	13180 <rb_select_select+0x138>
   13260:	ldr	r3, [r9, #28]
   13264:	cmp	r3, #0
   13268:	bne	13238 <rb_select_select+0x1f0>
   1326c:	mov	r3, #0
   13270:	mov	r2, #1
   13274:	ldr	r0, [r9, #12]
   13278:	add	r1, r9, #20
   1327c:	bl	12d58 <select_update_selectfds.isra.0>
   13280:	b	1322c <rb_select_select+0x1e4>
   13284:	bl	4968 <rb_set_time@plt>
   13288:	mvn	r0, #0
   1328c:	b	13184 <rb_select_select+0x13c>
   13290:	.word	0x00033cb4
   13294:	.word	0x000163d8
   13298:	.word	0x00015f5c
   1329c:	.word	0x000003bc
   132a0:	.word	0x00033bfc
   132a4:	.word	0x00033bf4
   132a8:	.word	0x00016350

000132ac <rb_init_netio_kqueue>:
   132ac:	str	r4, [sp, #-8]!
   132b0:	str	lr, [sp, #4]
   132b4:	bl	4cbc <__errno_location@plt>
   132b8:	mov	r3, #38	; 0x26
   132bc:	ldr	r4, [sp]
   132c0:	add	sp, sp, #4
   132c4:	str	r3, [r0]
   132c8:	mvn	r0, #0
   132cc:	pop	{pc}		; (ldr pc, [sp], #4)

000132d0 <rb_setselect_kqueue>:
   132d0:	str	r4, [sp, #-8]!
   132d4:	str	lr, [sp, #4]
   132d8:	bl	4cbc <__errno_location@plt>
   132dc:	mov	r3, #38	; 0x26
   132e0:	ldr	r4, [sp]
   132e4:	add	sp, sp, #4
   132e8:	str	r3, [r0]
   132ec:	pop	{pc}		; (ldr pc, [sp], #4)

000132f0 <rb_select_kqueue>:
   132f0:	str	r4, [sp, #-8]!
   132f4:	str	lr, [sp, #4]
   132f8:	bl	4cbc <__errno_location@plt>
   132fc:	mov	r3, #38	; 0x26
   13300:	ldr	r4, [sp]
   13304:	add	sp, sp, #4
   13308:	str	r3, [r0]
   1330c:	mvn	r0, #0
   13310:	pop	{pc}		; (ldr pc, [sp], #4)

00013314 <rb_setup_fd_kqueue>:
   13314:	str	r4, [sp, #-8]!
   13318:	str	lr, [sp, #4]
   1331c:	bl	4cbc <__errno_location@plt>
   13320:	mov	r3, #38	; 0x26
   13324:	ldr	r4, [sp]
   13328:	add	sp, sp, #4
   1332c:	str	r3, [r0]
   13330:	mvn	r0, #0
   13334:	pop	{pc}		; (ldr pc, [sp], #4)

00013338 <rb_kqueue_init_event>:
   13338:	bx	lr

0001333c <rb_kqueue_sched_event>:
   1333c:	str	r4, [sp, #-8]!
   13340:	str	lr, [sp, #4]
   13344:	bl	4cbc <__errno_location@plt>
   13348:	mov	r3, #38	; 0x26
   1334c:	ldr	r4, [sp]
   13350:	add	sp, sp, #4
   13354:	str	r3, [r0]
   13358:	mvn	r0, #0
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)

00013360 <rb_kqueue_unsched_event>:
   13360:	bx	lr

00013364 <rb_kqueue_supports_event>:
   13364:	str	r4, [sp, #-8]!
   13368:	str	lr, [sp, #4]
   1336c:	bl	4cbc <__errno_location@plt>
   13370:	mov	r3, #38	; 0x26
   13374:	ldr	r4, [sp]
   13378:	add	sp, sp, #4
   1337c:	str	r3, [r0]
   13380:	mov	r0, #0
   13384:	pop	{pc}		; (ldr pc, [sp], #4)

00013388 <rb_rawbuf_done>:
   13388:	mov	r3, r1
   1338c:	ldmib	r1, {r1, r2}
   13390:	push	{lr}		; (str lr, [sp, #-4]!)
   13394:	mov	lr, #0
   13398:	ldr	ip, [r0, #8]
   1339c:	cmp	r2, #0
   133a0:	strne	r1, [r2, #4]
   133a4:	streq	r1, [r0, #4]
   133a8:	ldr	r1, [r3, #4]
   133ac:	cmp	r1, #0
   133b0:	strne	r2, [r1, #8]
   133b4:	mov	r1, r3
   133b8:	streq	r2, [r0]
   133bc:	ldr	r2, [pc, #28]	; 133e0 <rb_rawbuf_done+0x58>
   133c0:	str	lr, [r3, #4]
   133c4:	str	lr, [r3, #8]
   133c8:	sub	r3, ip, #1
   133cc:	pop	{lr}		; (ldr lr, [sp], #4)
   133d0:	str	r3, [r0, #8]
   133d4:	add	r2, pc, r2
   133d8:	ldr	r0, [r2]
   133dc:	b	48a8 <rb_bh_free@plt>
   133e0:	.word	0x00033b48

000133e4 <rb_rawbuf_flush_writev>:
   133e4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   133e8:	mov	r2, #8192	; 0x2000
   133ec:	mov	r5, r0
   133f0:	strd	r6, [sp, #8]
   133f4:	mov	r6, r1
   133f8:	mov	r1, #0
   133fc:	strd	r8, [sp, #16]
   13400:	str	lr, [sp, #24]
   13404:	sub	sp, sp, #8192	; 0x2000
   13408:	sub	sp, sp, #4
   1340c:	mov	r7, sp
   13410:	mov	r0, r7
   13414:	bl	4608 <memset@plt>
   13418:	ldr	r3, [r5]
   1341c:	cmp	r3, #0
   13420:	beq	13558 <rb_rawbuf_flush_writev+0x174>
   13424:	mov	r2, r7
   13428:	mov	r4, #0
   1342c:	b	13438 <rb_rawbuf_flush_writev+0x54>
   13430:	cmp	r4, #1024	; 0x400
   13434:	beq	13470 <rb_rawbuf_flush_writev+0x8c>
   13438:	ldr	r1, [r3]
   1343c:	add	r4, r4, #1
   13440:	add	r2, r2, #8
   13444:	ldrb	ip, [r1, #1040]	; 0x410
   13448:	add	r0, r1, #12
   1344c:	ldr	r1, [r1, #1036]	; 0x40c
   13450:	cmp	ip, #0
   13454:	ldrne	ip, [r5, #16]
   13458:	addne	r0, r0, ip
   1345c:	subne	r1, r1, ip
   13460:	strd	r0, [r2, #-8]
   13464:	ldr	r3, [r3, #8]
   13468:	cmp	r3, #0
   1346c:	bne	13430 <rb_rawbuf_flush_writev+0x4c>
   13470:	mov	r1, r7
   13474:	mov	r0, r6
   13478:	mov	r2, r4
   1347c:	bl	4aac <rb_writev@plt>
   13480:	subs	r9, r0, #0
   13484:	ble	1350c <rb_rawbuf_flush_writev+0x128>
   13488:	ldr	r3, [r5]
   1348c:	cmp	r3, #0
   13490:	beq	1350c <rb_rawbuf_flush_writev+0x128>
   13494:	add	r4, r4, #1
   13498:	mov	r7, r9
   1349c:	ldr	r2, [r3]
   134a0:	mov	r8, #1
   134a4:	ldr	r6, [r3, #8]
   134a8:	b	134bc <rb_rawbuf_flush_writev+0xd8>
   134ac:	cmp	r4, r8
   134b0:	ldr	r2, [r6]
   134b4:	ldr	r6, [r6, #8]
   134b8:	beq	1350c <rb_rawbuf_flush_writev+0x128>
   134bc:	mov	r1, r2
   134c0:	mov	r0, r5
   134c4:	ldrb	lr, [r2, #1040]	; 0x410
   134c8:	ldr	ip, [r5, #12]
   134cc:	ldr	r3, [r2, #1036]	; 0x40c
   134d0:	cmp	lr, #0
   134d4:	beq	134e8 <rb_rawbuf_flush_writev+0x104>
   134d8:	ldr	lr, [r5, #16]
   134dc:	sub	lr, r3, lr
   134e0:	cmp	lr, r7
   134e4:	ble	1352c <rb_rawbuf_flush_writev+0x148>
   134e8:	cmp	r3, r7
   134ec:	sub	lr, ip, r3
   134f0:	bgt	13540 <rb_rawbuf_flush_writev+0x15c>
   134f4:	str	lr, [r5, #12]
   134f8:	sub	r7, r7, r3
   134fc:	bl	13388 <rb_rawbuf_done>
   13500:	cmp	r6, #0
   13504:	add	r8, r8, #1
   13508:	bne	134ac <rb_rawbuf_flush_writev+0xc8>
   1350c:	mov	r0, r9
   13510:	add	sp, sp, #8192	; 0x2000
   13514:	add	sp, sp, #4
   13518:	ldrd	r4, [sp]
   1351c:	ldrd	r6, [sp, #8]
   13520:	ldrd	r8, [sp, #16]
   13524:	add	sp, sp, #24
   13528:	pop	{pc}		; (ldr pc, [sp], #4)
   1352c:	sub	ip, ip, lr
   13530:	sub	r7, r7, lr
   13534:	str	ip, [r5, #12]
   13538:	bl	13388 <rb_rawbuf_done>
   1353c:	b	13500 <rb_rawbuf_flush_writev+0x11c>
   13540:	sub	ip, ip, r7
   13544:	mov	r3, #1
   13548:	strb	r3, [r2, #1040]	; 0x410
   1354c:	str	ip, [r5, #12]
   13550:	str	r7, [r5, #16]
   13554:	b	1350c <rb_rawbuf_flush_writev+0x128>
   13558:	bl	4cbc <__errno_location@plt>
   1355c:	mov	r3, #11
   13560:	mvn	r9, #0
   13564:	str	r3, [r0]
   13568:	b	1350c <rb_rawbuf_flush_writev+0x128>

0001356c <rb_rawbuf_flush>:
   1356c:	ldr	r3, [r0]
   13570:	strd	r4, [sp, #-16]!
   13574:	str	r6, [sp, #8]
   13578:	str	lr, [sp, #12]
   1357c:	cmp	r3, #0
   13580:	beq	1369c <rb_rawbuf_flush+0x130>
   13584:	mov	r4, r0
   13588:	mov	r0, r1
   1358c:	mov	r6, r1
   13590:	bl	4488 <rb_fd_ssl@plt>
   13594:	cmp	r0, #0
   13598:	beq	13680 <rb_rawbuf_flush+0x114>
   1359c:	ldr	r3, [r4]
   135a0:	ldr	r5, [r3]
   135a4:	ldrb	r3, [r5, #1040]	; 0x410
   135a8:	cmp	r3, #0
   135ac:	beq	13668 <rb_rawbuf_flush+0xfc>
   135b0:	ldr	r2, [r4, #16]
   135b4:	mov	r1, r2
   135b8:	ldr	ip, [r5, #1036]	; 0x40c
   135bc:	add	r3, r5, #12
   135c0:	mov	r0, r6
   135c4:	add	r1, r3, r1
   135c8:	sub	r2, ip, r2
   135cc:	bl	4638 <rb_write@plt>
   135d0:	subs	r6, r0, #0
   135d4:	ble	13654 <rb_rawbuf_flush+0xe8>
   135d8:	ldr	r3, [r4, #16]
   135dc:	ldr	r2, [r5, #1036]	; 0x40c
   135e0:	add	r3, r6, r3
   135e4:	cmp	r3, r2
   135e8:	str	r3, [r4, #16]
   135ec:	bne	13648 <rb_rawbuf_flush+0xdc>
   135f0:	mov	r2, #0
   135f4:	ldr	r3, [r5, #8]
   135f8:	mov	r0, #0
   135fc:	mov	r1, r5
   13600:	str	r2, [r4, #16]
   13604:	ldr	r2, [r5, #4]
   13608:	cmp	r3, #0
   1360c:	strne	r2, [r3, #4]
   13610:	streq	r2, [r4, #4]
   13614:	ldr	r2, [r5, #4]
   13618:	cmp	r2, #0
   1361c:	strne	r3, [r2, #8]
   13620:	ldr	r2, [r4, #8]
   13624:	streq	r3, [r4]
   13628:	ldr	r3, [pc, #128]	; 136b0 <rb_rawbuf_flush+0x144>
   1362c:	str	r0, [r5, #4]
   13630:	str	r0, [r5, #8]
   13634:	sub	r2, r2, #1
   13638:	add	r3, pc, r3
   1363c:	str	r2, [r4, #8]
   13640:	ldr	r0, [r3]
   13644:	bl	48a8 <rb_bh_free@plt>
   13648:	ldr	r3, [r4, #12]
   1364c:	sub	r3, r3, r6
   13650:	str	r3, [r4, #12]
   13654:	mov	r0, r6
   13658:	ldrd	r4, [sp]
   1365c:	ldr	r6, [sp, #8]
   13660:	add	sp, sp, #12
   13664:	pop	{pc}		; (ldr pc, [sp], #4)
   13668:	mov	r0, #1
   1366c:	mov	r1, r3
   13670:	mov	r2, r3
   13674:	strb	r0, [r5, #1040]	; 0x410
   13678:	str	r3, [r4, #16]
   1367c:	b	135b8 <rb_rawbuf_flush+0x4c>
   13680:	mov	r1, r6
   13684:	mov	r0, r4
   13688:	ldrd	r4, [sp]
   1368c:	ldr	r6, [sp, #8]
   13690:	ldr	lr, [sp, #12]
   13694:	add	sp, sp, #16
   13698:	b	133e4 <rb_rawbuf_flush_writev>
   1369c:	bl	4cbc <__errno_location@plt>
   136a0:	mov	r3, #11
   136a4:	mvn	r6, #0
   136a8:	str	r3, [r0]
   136ac:	b	13654 <rb_rawbuf_flush+0xe8>
   136b0:	.word	0x000338e4

000136b4 <rb_rawbuf_append>:
   136b4:	ldr	r3, [r0, #4]
   136b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   136bc:	mov	r5, r0
   136c0:	strd	r6, [sp, #8]
   136c4:	mov	r7, r2
   136c8:	strd	r8, [sp, #16]
   136cc:	mov	r8, r1
   136d0:	str	sl, [sp, #24]
   136d4:	cmp	r3, #0
   136d8:	str	lr, [sp, #28]
   136dc:	beq	13704 <rb_rawbuf_append+0x50>
   136e0:	ldr	r4, [r3]
   136e4:	cmp	r4, #0
   136e8:	beq	13704 <rb_rawbuf_append+0x50>
   136ec:	ldr	r3, [r4, #1036]	; 0x40c
   136f0:	cmp	r3, #1024	; 0x400
   136f4:	bge	13704 <rb_rawbuf_append+0x50>
   136f8:	ldrb	r0, [r4, #1040]	; 0x410
   136fc:	cmp	r0, #0
   13700:	beq	137a4 <rb_rawbuf_append+0xf0>
   13704:	cmp	r7, #0
   13708:	ble	137d4 <rb_rawbuf_append+0x120>
   1370c:	ldr	sl, [pc, #264]	; 1381c <rb_rawbuf_append+0x168>
   13710:	mov	r9, #0
   13714:	add	sl, pc, sl
   13718:	b	13770 <rb_rawbuf_append+0xbc>
   1371c:	ldr	r3, [r5, #8]
   13720:	cmp	r7, #1024	; 0x400
   13724:	mov	r1, r8
   13728:	movlt	r6, r7
   1372c:	movge	r6, #1024	; 0x400
   13730:	str	r4, [r5, #4]
   13734:	mov	r2, r6
   13738:	add	r0, r4, #12
   1373c:	sub	r7, r7, r6
   13740:	add	r8, r8, r6
   13744:	add	r3, r3, #1
   13748:	str	r3, [r5, #8]
   1374c:	bl	47e8 <memcpy@plt>
   13750:	ldr	r3, [r5, #12]
   13754:	cmp	r7, #0
   13758:	ldr	r2, [r4, #1036]	; 0x40c
   1375c:	add	r3, r3, r6
   13760:	add	r6, r2, r6
   13764:	str	r6, [r4, #1036]	; 0x40c
   13768:	str	r3, [r5, #12]
   1376c:	ble	137d4 <rb_rawbuf_append+0x120>
   13770:	ldr	r0, [sl]
   13774:	bl	492c <rb_bh_alloc@plt>
   13778:	ldr	r3, [r5, #4]
   1377c:	mov	r4, r0
   13780:	str	r0, [r4]
   13784:	cmp	r3, #0
   13788:	stmib	r0, {r3, r9}
   1378c:	strne	r0, [r3, #8]
   13790:	bne	1371c <rb_rawbuf_append+0x68>
   13794:	ldr	r3, [r5]
   13798:	cmp	r3, #0
   1379c:	streq	r0, [r5]
   137a0:	b	1371c <rb_rawbuf_append+0x68>
   137a4:	rsb	r6, r3, #1024	; 0x400
   137a8:	add	r0, r4, #12
   137ac:	cmp	r2, r6
   137b0:	add	r0, r0, r3
   137b4:	bge	137ec <rb_rawbuf_append+0x138>
   137b8:	bl	47e8 <memcpy@plt>
   137bc:	ldr	r3, [r5, #12]
   137c0:	ldr	r2, [r4, #1036]	; 0x40c
   137c4:	add	r3, r3, r7
   137c8:	add	r7, r2, r7
   137cc:	str	r7, [r4, #1036]	; 0x40c
   137d0:	str	r3, [r5, #12]
   137d4:	ldrd	r4, [sp]
   137d8:	ldrd	r6, [sp, #8]
   137dc:	ldrd	r8, [sp, #16]
   137e0:	ldr	sl, [sp, #24]
   137e4:	add	sp, sp, #28
   137e8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ec:	mov	r2, r6
   137f0:	bl	47e8 <memcpy@plt>
   137f4:	ldr	r3, [r5, #12]
   137f8:	subs	r7, r7, r6
   137fc:	ldr	r2, [r4, #1036]	; 0x40c
   13800:	add	r3, r3, r6
   13804:	add	r2, r2, r6
   13808:	str	r2, [r4, #1036]	; 0x40c
   1380c:	str	r3, [r5, #12]
   13810:	beq	137d4 <rb_rawbuf_append+0x120>
   13814:	add	r8, r8, r6
   13818:	b	1370c <rb_rawbuf_append+0x58>
   1381c:	.word	0x00033808

00013820 <rb_rawbuf_get>:
   13820:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13824:	ldr	r4, [r0]
   13828:	strd	r6, [sp, #8]
   1382c:	str	r8, [sp, #16]
   13830:	str	lr, [sp, #20]
   13834:	cmp	r4, #0
   13838:	beq	138b0 <rb_rawbuf_get+0x90>
   1383c:	ldr	r7, [r4]
   13840:	mov	r5, r2
   13844:	mov	r6, r0
   13848:	ldrb	r3, [r7, #1040]	; 0x410
   1384c:	add	ip, r7, #12
   13850:	ldr	r4, [r7, #1036]	; 0x40c
   13854:	cmp	r3, #0
   13858:	ldrne	r3, [r0, #16]
   1385c:	addne	ip, ip, r3
   13860:	cmp	r2, r4
   13864:	mov	r3, r1
   13868:	movlt	r4, r2
   1386c:	mov	r0, r3
   13870:	mov	r1, ip
   13874:	mov	r2, r4
   13878:	bl	47e8 <memcpy@plt>
   1387c:	ldr	r3, [r7, #1036]	; 0x40c
   13880:	cmp	r3, r4
   13884:	beq	138c8 <rb_rawbuf_get+0xa8>
   13888:	mov	r2, #1
   1388c:	sub	r3, r3, r4
   13890:	strb	r2, [r7, #1040]	; 0x410
   13894:	ldr	r2, [r6, #12]
   13898:	str	r3, [r7, #1036]	; 0x40c
   1389c:	ldr	r3, [r6, #16]
   138a0:	sub	r2, r2, r4
   138a4:	add	r3, r3, r4
   138a8:	str	r2, [r6, #12]
   138ac:	str	r3, [r6, #16]
   138b0:	mov	r0, r4
   138b4:	ldrd	r4, [sp]
   138b8:	ldrd	r6, [sp, #8]
   138bc:	ldr	r8, [sp, #16]
   138c0:	add	sp, sp, #20
   138c4:	pop	{pc}		; (ldr pc, [sp], #4)
   138c8:	mov	r3, #0
   138cc:	mov	r1, r7
   138d0:	mov	r0, r6
   138d4:	str	r3, [r6, #16]
   138d8:	bl	13388 <rb_rawbuf_done>
   138dc:	ldr	r2, [r6, #12]
   138e0:	sub	r5, r2, r5
   138e4:	str	r5, [r6, #12]
   138e8:	b	138b0 <rb_rawbuf_get+0x90>

000138ec <rb_rawbuf_length>:
   138ec:	ldr	r0, [r0, #12]
   138f0:	bx	lr

000138f4 <rb_new_rawbuffer>:
   138f4:	mov	r1, #20
   138f8:	mov	r0, #1
   138fc:	str	r4, [sp, #-8]!
   13900:	str	lr, [sp, #4]
   13904:	bl	45c0 <calloc@plt>
   13908:	cmp	r0, #0
   1390c:	beq	1391c <rb_new_rawbuffer+0x28>
   13910:	ldr	r4, [sp]
   13914:	add	sp, sp, #4
   13918:	pop	{pc}		; (ldr pc, [sp], #4)
   1391c:	bl	495c <rb_outofmemory@plt>

00013920 <rb_free_rawbuffer>:
   13920:	ldr	r3, [r0]
   13924:	strd	r4, [sp, #-16]!
   13928:	mov	r5, r0
   1392c:	str	r6, [sp, #8]
   13930:	str	lr, [sp, #12]
   13934:	cmp	r3, #0
   13938:	beq	13960 <rb_free_rawbuffer+0x40>
   1393c:	ldr	r4, [r3, #8]
   13940:	mov	r0, r5
   13944:	ldr	r1, [r3]
   13948:	bl	13388 <rb_rawbuf_done>
   1394c:	cmp	r4, #0
   13950:	mov	r3, r4
   13954:	beq	13960 <rb_free_rawbuffer+0x40>
   13958:	ldr	r4, [r4, #8]
   1395c:	b	13940 <rb_free_rawbuffer+0x20>
   13960:	mov	r0, r5
   13964:	ldrd	r4, [sp]
   13968:	ldr	r6, [sp, #8]
   1396c:	ldr	lr, [sp, #12]
   13970:	add	sp, sp, #16
   13974:	b	46d4 <free@plt>

00013978 <rb_init_rawbuffers>:
   13978:	str	r4, [sp, #-8]!
   1397c:	ldr	r4, [pc, #64]	; 139c4 <rb_init_rawbuffers+0x4c>
   13980:	add	r4, pc, r4
   13984:	ldr	r3, [r4]
   13988:	str	lr, [sp, #4]
   1398c:	cmp	r3, #0
   13990:	beq	139a0 <rb_init_rawbuffers+0x28>
   13994:	ldr	r4, [sp]
   13998:	add	sp, sp, #4
   1399c:	pop	{pc}		; (ldr pc, [sp], #4)
   139a0:	ldr	r2, [pc, #32]	; 139c8 <rb_init_rawbuffers+0x50>
   139a4:	mov	r1, r0
   139a8:	movw	r0, #1044	; 0x414
   139ac:	add	r2, pc, r2
   139b0:	bl	4a88 <rb_bh_create@plt>
   139b4:	str	r0, [r4]
   139b8:	ldr	r4, [sp]
   139bc:	add	sp, sp, #4
   139c0:	pop	{pc}		; (ldr pc, [sp], #4)
   139c4:	.word	0x0003359c
   139c8:	.word	0x0000430c

000139cc <comp_with_mask>:
   139cc:	strd	r4, [sp, #-16]!
   139d0:	mov	r4, r2
   139d4:	lsr	r2, r2, #3
   139d8:	mov	r5, r1
   139dc:	str	r6, [sp, #8]
   139e0:	mov	r6, r0
   139e4:	str	lr, [sp, #12]
   139e8:	bl	4428 <memcmp@plt>
   139ec:	cmp	r0, #0
   139f0:	movne	r0, #0
   139f4:	bne	13a24 <comp_with_mask+0x58>
   139f8:	ands	r3, r4, #7
   139fc:	moveq	r0, #1
   13a00:	beq	13a24 <comp_with_mask+0x58>
   13a04:	ldrb	r0, [r5, r4, lsr #3]
   13a08:	rsb	r3, r3, #8
   13a0c:	mov	r1, #255	; 0xff
   13a10:	ldrb	r2, [r6, r4, lsr #3]
   13a14:	eor	r2, r2, r0
   13a18:	ands	r3, r2, r1, lsl r3
   13a1c:	moveq	r0, #1
   13a20:	movne	r0, #0
   13a24:	ldrd	r4, [sp]
   13a28:	ldr	r6, [sp, #8]
   13a2c:	add	sp, sp, #12
   13a30:	pop	{pc}		; (ldr pc, [sp], #4)

00013a34 <New_Prefix2.constprop.1>:
   13a34:	cmp	r0, #10
   13a38:	strd	r4, [sp, #-16]!
   13a3c:	mov	r5, r0
   13a40:	mov	r4, r2
   13a44:	str	r6, [sp, #8]
   13a48:	mov	r6, r1
   13a4c:	str	lr, [sp, #12]
   13a50:	beq	13aa0 <New_Prefix2.constprop.1+0x6c>
   13a54:	cmp	r0, #2
   13a58:	bne	13ad8 <New_Prefix2.constprop.1+0xa4>
   13a5c:	mov	r1, #24
   13a60:	mov	r0, #1
   13a64:	bl	45c0 <calloc@plt>
   13a68:	cmp	r0, #0
   13a6c:	beq	13aec <New_Prefix2.constprop.1+0xb8>
   13a70:	ldr	r3, [r6]
   13a74:	str	r3, [r0, #8]
   13a78:	cmp	r4, #0
   13a7c:	mov	r3, #1
   13a80:	strh	r5, [r0]
   13a84:	movlt	r4, #128	; 0x80
   13a88:	ldr	r6, [sp, #8]
   13a8c:	strh	r4, [r0, #2]
   13a90:	ldrd	r4, [sp]
   13a94:	add	sp, sp, #12
   13a98:	str	r3, [r0, #4]
   13a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13aa0:	mov	r1, #24
   13aa4:	mov	r0, #1
   13aa8:	bl	45c0 <calloc@plt>
   13aac:	cmp	r0, #0
   13ab0:	beq	13aec <New_Prefix2.constprop.1+0xb8>
   13ab4:	ldr	r2, [r6]
   13ab8:	ldr	ip, [r6, #4]
   13abc:	ldr	r1, [r6, #8]
   13ac0:	str	r2, [r0, #8]
   13ac4:	ldr	r2, [r6, #12]
   13ac8:	str	ip, [r0, #12]
   13acc:	str	r1, [r0, #16]
   13ad0:	str	r2, [r0, #20]
   13ad4:	b	13a78 <New_Prefix2.constprop.1+0x44>
   13ad8:	ldrd	r4, [sp]
   13adc:	mov	r0, #0
   13ae0:	ldr	r6, [sp, #8]
   13ae4:	add	sp, sp, #12
   13ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   13aec:	bl	495c <rb_outofmemory@plt>

00013af0 <ascii2prefix>:
   13af0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13af4:	strd	r6, [sp, #8]
   13af8:	subs	r6, r1, #0
   13afc:	str	r8, [sp, #16]
   13b00:	str	lr, [sp, #20]
   13b04:	sub	sp, sp, #1040	; 0x410
   13b08:	beq	13bc4 <ascii2prefix+0xd4>
   13b0c:	cmp	r0, #2
   13b10:	mov	r4, r0
   13b14:	moveq	r7, #32
   13b18:	beq	13b28 <ascii2prefix+0x38>
   13b1c:	cmp	r0, #10
   13b20:	movne	r7, #0
   13b24:	moveq	r7, #128	; 0x80
   13b28:	mov	r1, #47	; 0x2f
   13b2c:	mov	r0, r6
   13b30:	bl	4584 <strchr@plt>
   13b34:	subs	r5, r0, #0
   13b38:	beq	13b84 <ascii2prefix+0x94>
   13b3c:	mov	r2, #10
   13b40:	mov	r1, #0
   13b44:	add	r0, r5, #1
   13b48:	sub	r5, r5, r6
   13b4c:	bl	4854 <strtol@plt>
   13b50:	mov	r1, r6
   13b54:	add	r6, sp, #16
   13b58:	mov	r8, r0
   13b5c:	mov	r2, r5
   13b60:	mov	r0, r6
   13b64:	bl	47e8 <memcpy@plt>
   13b68:	cmp	r7, r8
   13b6c:	cmpge	r8, #0
   13b70:	add	r3, sp, #1040	; 0x410
   13b74:	add	r3, r3, r5
   13b78:	mov	r2, #0
   13b7c:	movgt	r7, r8
   13b80:	strb	r2, [r3, #-1024]	; 0xfffffc00
   13b84:	cmp	r4, #2
   13b88:	beq	13b94 <ascii2prefix+0xa4>
   13b8c:	cmp	r4, #10
   13b90:	bne	13bc4 <ascii2prefix+0xd4>
   13b94:	mov	r5, sp
   13b98:	mov	r1, r6
   13b9c:	mov	r2, r5
   13ba0:	mov	r0, r4
   13ba4:	bl	4614 <rb_inet_pton@plt>
   13ba8:	cmp	r0, #0
   13bac:	ble	13bc4 <ascii2prefix+0xd4>
   13bb0:	mov	r2, r7
   13bb4:	mov	r1, r5
   13bb8:	mov	r0, r4
   13bbc:	bl	13a34 <New_Prefix2.constprop.1>
   13bc0:	b	13bc8 <ascii2prefix+0xd8>
   13bc4:	mov	r0, #0
   13bc8:	add	sp, sp, #1040	; 0x410
   13bcc:	ldrd	r4, [sp]
   13bd0:	ldrd	r6, [sp, #8]
   13bd4:	ldr	r8, [sp, #16]
   13bd8:	add	sp, sp, #20
   13bdc:	pop	{pc}		; (ldr pc, [sp], #4)

00013be0 <Ref_Prefix.part.0>:
   13be0:	mov	r1, r0
   13be4:	ldrh	r2, [r0, #2]
   13be8:	ldrh	r0, [r1], #8
   13bec:	b	13a34 <New_Prefix2.constprop.1>

00013bf0 <rb_init_patricia>:
   13bf0:	bx	lr

00013bf4 <rb_new_patricia>:
   13bf4:	mov	r1, #12
   13bf8:	str	r4, [sp, #-8]!
   13bfc:	mov	r4, r0
   13c00:	mov	r0, #1
   13c04:	str	lr, [sp, #4]
   13c08:	bl	45c0 <calloc@plt>
   13c0c:	subs	r3, r0, #0
   13c10:	beq	13c40 <rb_new_patricia+0x4c>
   13c14:	ldr	r2, [pc, #40]	; 13c44 <rb_new_patricia+0x50>
   13c18:	mov	r1, #0
   13c1c:	stm	r3, {r1, r4}
   13c20:	str	r1, [r3, #8]
   13c24:	ldr	r4, [sp]
   13c28:	add	sp, sp, #4
   13c2c:	add	r2, pc, r2
   13c30:	ldr	r3, [r2]
   13c34:	add	r3, r3, #1
   13c38:	str	r3, [r2]
   13c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c40:	bl	495c <rb_outofmemory@plt>
   13c44:	.word	0x000332f4

00013c48 <rb_clear_patricia>:
   13c48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13c4c:	ldr	r4, [r0]
   13c50:	strd	r6, [sp, #8]
   13c54:	strd	r8, [sp, #16]
   13c58:	str	sl, [sp, #24]
   13c5c:	mov	sl, r0
   13c60:	str	lr, [sp, #28]
   13c64:	sub	sp, sp, #520	; 0x208
   13c68:	cmp	r4, #0
   13c6c:	beq	13d08 <rb_clear_patricia+0xc0>
   13c70:	add	r9, sp, #4
   13c74:	mov	r8, r1
   13c78:	mov	r5, r9
   13c7c:	ldmib	r4, {r0, r6, r7}
   13c80:	cmp	r0, #0
   13c84:	beq	13cb0 <rb_clear_patricia+0x68>
   13c88:	ldr	r3, [r0, #4]
   13c8c:	sub	r3, r3, #1
   13c90:	cmp	r3, #0
   13c94:	str	r3, [r0, #4]
   13c98:	ble	13d2c <rb_clear_patricia+0xe4>
   13c9c:	ldr	r0, [r4, #20]
   13ca0:	cmp	r8, #0
   13ca4:	cmpne	r0, #0
   13ca8:	beq	13cb0 <rb_clear_patricia+0x68>
   13cac:	blx	r8
   13cb0:	mov	r0, r4
   13cb4:	bl	46d4 <free@plt>
   13cb8:	ldr	r3, [sl, #8]
   13cbc:	cmp	r6, #0
   13cc0:	sub	r3, r3, #1
   13cc4:	str	r3, [sl, #8]
   13cc8:	beq	13ce8 <rb_clear_patricia+0xa0>
   13ccc:	cmp	r7, #0
   13cd0:	mov	r4, r6
   13cd4:	strne	r7, [r5], #4
   13cd8:	ldmib	r4, {r0, r6, r7}
   13cdc:	cmp	r0, #0
   13ce0:	bne	13c88 <rb_clear_patricia+0x40>
   13ce4:	b	13cb0 <rb_clear_patricia+0x68>
   13ce8:	cmp	r7, #0
   13cec:	movne	r4, r7
   13cf0:	bne	13c7c <rb_clear_patricia+0x34>
   13cf4:	cmp	r5, r9
   13cf8:	beq	13d08 <rb_clear_patricia+0xc0>
   13cfc:	ldr	r4, [r5, #-4]
   13d00:	cmp	r4, #0
   13d04:	bne	13d34 <rb_clear_patricia+0xec>
   13d08:	mov	r0, sl
   13d0c:	add	sp, sp, #520	; 0x208
   13d10:	ldrd	r4, [sp]
   13d14:	ldrd	r6, [sp, #8]
   13d18:	ldrd	r8, [sp, #16]
   13d1c:	ldr	sl, [sp, #24]
   13d20:	ldr	lr, [sp, #28]
   13d24:	add	sp, sp, #32
   13d28:	b	46d4 <free@plt>
   13d2c:	bl	46d4 <free@plt>
   13d30:	b	13c9c <rb_clear_patricia+0x54>
   13d34:	sub	r5, r5, #4
   13d38:	b	13c7c <rb_clear_patricia+0x34>

00013d3c <rb_destroy_patricia>:
   13d3c:	str	r4, [sp, #-8]!
   13d40:	str	lr, [sp, #4]
   13d44:	bl	44d0 <rb_clear_patricia@plt>
   13d48:	ldr	r2, [pc, #24]	; 13d68 <rb_destroy_patricia+0x2c>
   13d4c:	ldr	r4, [sp]
   13d50:	add	sp, sp, #4
   13d54:	add	r2, pc, r2
   13d58:	ldr	r3, [r2]
   13d5c:	sub	r3, r3, #1
   13d60:	str	r3, [r2]
   13d64:	pop	{pc}		; (ldr pc, [sp], #4)
   13d68:	.word	0x000331cc

00013d6c <rb_patricia_process>:
   13d6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13d70:	ldr	r4, [r0]
   13d74:	strd	r6, [sp, #8]
   13d78:	str	lr, [sp, #16]
   13d7c:	sub	sp, sp, #524	; 0x20c
   13d80:	cmp	r4, #0
   13d84:	beq	13e00 <rb_patricia_process+0x94>
   13d88:	add	r7, sp, #4
   13d8c:	mov	r6, r1
   13d90:	mov	r5, r7
   13d94:	ldr	r3, [r4, #4]
   13d98:	subs	r0, r3, #0
   13d9c:	beq	13da8 <rb_patricia_process+0x3c>
   13da0:	ldr	r1, [r4, #20]
   13da4:	blx	r6
   13da8:	ldr	r3, [r4, #8]
   13dac:	mov	r2, r5
   13db0:	ldr	r4, [r4, #12]
   13db4:	cmp	r3, #0
   13db8:	beq	13de4 <rb_patricia_process+0x78>
   13dbc:	cmp	r4, #0
   13dc0:	moveq	r4, r3
   13dc4:	beq	13d94 <rb_patricia_process+0x28>
   13dc8:	str	r4, [r2], #4
   13dcc:	mov	r4, r3
   13dd0:	mov	r5, r2
   13dd4:	ldr	r3, [r4, #4]
   13dd8:	subs	r0, r3, #0
   13ddc:	bne	13da0 <rb_patricia_process+0x34>
   13de0:	b	13da8 <rb_patricia_process+0x3c>
   13de4:	cmp	r4, #0
   13de8:	bne	13d94 <rb_patricia_process+0x28>
   13dec:	cmp	r5, r7
   13df0:	beq	13e00 <rb_patricia_process+0x94>
   13df4:	ldr	r4, [r5, #-4]
   13df8:	cmp	r4, #0
   13dfc:	bne	13e14 <rb_patricia_process+0xa8>
   13e00:	add	sp, sp, #524	; 0x20c
   13e04:	ldrd	r4, [sp]
   13e08:	ldrd	r6, [sp, #8]
   13e0c:	add	sp, sp, #16
   13e10:	pop	{pc}		; (ldr pc, [sp], #4)
   13e14:	sub	r5, r5, #4
   13e18:	b	13d94 <rb_patricia_process+0x28>

00013e1c <rb_patricia_search_exact>:
   13e1c:	str	r4, [sp, #-8]!
   13e20:	ldr	r4, [r0]
   13e24:	str	lr, [sp, #4]
   13e28:	cmp	r4, #0
   13e2c:	beq	13e94 <rb_patricia_search_exact+0x78>
   13e30:	add	lr, r1, #8
   13e34:	ldrh	r2, [r1, #2]
   13e38:	mov	r1, #128	; 0x80
   13e3c:	b	13e5c <rb_patricia_search_exact+0x40>
   13e40:	ldrb	ip, [lr, r3, lsr #3]
   13e44:	ldr	r3, [r4, #8]
   13e48:	ldr	r4, [r4, #12]
   13e4c:	ands	r0, ip, r1, asr r0
   13e50:	moveq	r4, r3
   13e54:	cmp	r4, #0
   13e58:	beq	13e94 <rb_patricia_search_exact+0x78>
   13e5c:	ldr	r3, [r4]
   13e60:	cmp	r3, r2
   13e64:	and	r0, r3, #7
   13e68:	bcc	13e40 <rb_patricia_search_exact+0x24>
   13e6c:	movhi	r4, #0
   13e70:	bhi	13e94 <rb_patricia_search_exact+0x78>
   13e74:	ldr	r0, [r4, #4]
   13e78:	cmp	r0, #0
   13e7c:	beq	13ea4 <rb_patricia_search_exact+0x88>
   13e80:	mov	r1, lr
   13e84:	add	r0, r0, #8
   13e88:	bl	139cc <comp_with_mask>
   13e8c:	cmp	r0, #0
   13e90:	moveq	r4, #0
   13e94:	mov	r0, r4
   13e98:	ldr	r4, [sp]
   13e9c:	add	sp, sp, #4
   13ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea4:	mov	r4, r0
   13ea8:	b	13e94 <rb_patricia_search_exact+0x78>

00013eac <rb_patricia_search_best2>:
   13eac:	ldr	r3, [r0]
   13eb0:	strd	r4, [sp, #-20]!	; 0xffffffec
   13eb4:	strd	r6, [sp, #8]
   13eb8:	str	lr, [sp, #16]
   13ebc:	sub	sp, sp, #524	; 0x20c
   13ec0:	cmp	r3, #0
   13ec4:	beq	13f78 <rb_patricia_search_best2+0xcc>
   13ec8:	add	r6, r1, #8
   13ecc:	ldrh	r5, [r1, #2]
   13ed0:	mov	r4, #0
   13ed4:	mov	r7, #128	; 0x80
   13ed8:	b	13f08 <rb_patricia_search_best2+0x5c>
   13edc:	ldr	ip, [r3, #4]
   13ee0:	cmp	ip, #0
   13ee4:	ldrb	ip, [r6, r1, lsr #3]
   13ee8:	addne	r4, r4, #1
   13eec:	ldr	r1, [r3, #8]
   13ef0:	strne	r3, [lr, #-516]	; 0xfffffdfc
   13ef4:	ldr	r3, [r3, #12]
   13ef8:	ands	r0, ip, r7, asr r0
   13efc:	moveq	r3, r1
   13f00:	cmp	r3, #0
   13f04:	beq	13f94 <rb_patricia_search_best2+0xe8>
   13f08:	ldr	r1, [r3]
   13f0c:	add	r0, sp, #520	; 0x208
   13f10:	add	lr, r0, r4, lsl #2
   13f14:	cmp	r1, r5
   13f18:	and	r0, r1, #7
   13f1c:	bcc	13edc <rb_patricia_search_best2+0x30>
   13f20:	cmp	r2, #0
   13f24:	beq	13f94 <rb_patricia_search_best2+0xe8>
   13f28:	ldr	r2, [r3, #4]
   13f2c:	cmp	r2, #0
   13f30:	beq	13f94 <rb_patricia_search_best2+0xe8>
   13f34:	add	r4, r4, #1
   13f38:	str	r3, [lr, #-516]	; 0xfffffdfc
   13f3c:	add	r5, sp, #4
   13f40:	add	r5, r5, r4, lsl #2
   13f44:	b	13f70 <rb_patricia_search_best2+0xc4>
   13f48:	ldr	r7, [r5, #-4]!
   13f4c:	mov	r1, r6
   13f50:	ldr	r3, [r7, #4]
   13f54:	cmp	r3, #0
   13f58:	add	r0, r3, #8
   13f5c:	ldrh	r2, [r3, #2]
   13f60:	moveq	r0, r3
   13f64:	bl	139cc <comp_with_mask>
   13f68:	cmp	r0, #0
   13f6c:	bne	13f7c <rb_patricia_search_best2+0xd0>
   13f70:	subs	r4, r4, #1
   13f74:	bcs	13f48 <rb_patricia_search_best2+0x9c>
   13f78:	mov	r7, #0
   13f7c:	mov	r0, r7
   13f80:	add	sp, sp, #524	; 0x20c
   13f84:	ldrd	r4, [sp]
   13f88:	ldrd	r6, [sp, #8]
   13f8c:	add	sp, sp, #16
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	cmp	r4, #0
   13f98:	bne	13f3c <rb_patricia_search_best2+0x90>
   13f9c:	b	13f78 <rb_patricia_search_best2+0xcc>

00013fa0 <rb_patricia_search_best>:
   13fa0:	mov	r2, #1
   13fa4:	b	468c <rb_patricia_search_best2@plt>

00013fa8 <rb_patricia_lookup>:
   13fa8:	ldr	r2, [r0]
   13fac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13fb0:	strd	r6, [sp, #8]
   13fb4:	mov	r6, r0
   13fb8:	strd	r8, [sp, #16]
   13fbc:	mov	r8, r1
   13fc0:	strd	sl, [sp, #24]
   13fc4:	cmp	r2, #0
   13fc8:	str	lr, [sp, #32]
   13fcc:	sub	sp, sp, #12
   13fd0:	beq	142fc <rb_patricia_lookup+0x354>
   13fd4:	add	r7, r1, #8
   13fd8:	ldrh	r5, [r1, #2]
   13fdc:	mov	ip, #128	; 0x80
   13fe0:	b	14004 <rb_patricia_lookup+0x5c>
   13fe4:	ldrb	r1, [r7, r3, lsr #3]
   13fe8:	and	r0, r3, #7
   13fec:	ands	r1, r1, ip, asr r0
   13ff0:	beq	14028 <rb_patricia_lookup+0x80>
   13ff4:	ldr	r1, [r2, #12]
   13ff8:	cmp	r1, #0
   13ffc:	beq	14034 <rb_patricia_lookup+0x8c>
   14000:	mov	r2, r1
   14004:	ldr	r3, [r2]
   14008:	cmp	r3, r5
   1400c:	bcc	1401c <rb_patricia_lookup+0x74>
   14010:	ldr	r1, [r2, #4]
   14014:	cmp	r1, #0
   14018:	bne	14038 <rb_patricia_lookup+0x90>
   1401c:	ldr	r1, [r6, #4]
   14020:	cmp	r1, r3
   14024:	bhi	13fe4 <rb_patricia_lookup+0x3c>
   14028:	ldr	r1, [r2, #8]
   1402c:	cmp	r1, #0
   14030:	bne	14000 <rb_patricia_lookup+0x58>
   14034:	ldr	r1, [r2, #4]
   14038:	cmp	r3, r5
   1403c:	add	r9, r1, #8
   14040:	movcc	r4, r3
   14044:	movcs	r4, r5
   14048:	ldr	sl, [r2, #16]
   1404c:	cmp	r4, #0
   14050:	beq	14358 <rb_patricia_lookup+0x3b0>
   14054:	ldrb	r3, [r1, #8]
   14058:	ldrb	r1, [r8, #8]
   1405c:	cmp	r1, r3
   14060:	beq	14218 <rb_patricia_lookup+0x270>
   14064:	eor	r1, r1, r3
   14068:	mov	ip, #0
   1406c:	mov	r3, #0
   14070:	mov	r0, #128	; 0x80
   14074:	ands	lr, r1, r0, asr r3
   14078:	bne	14088 <rb_patricia_lookup+0xe0>
   1407c:	add	r3, r3, #1
   14080:	cmp	r3, #8
   14084:	bne	14074 <rb_patricia_lookup+0xcc>
   14088:	add	ip, ip, r3
   1408c:	cmp	r4, ip
   14090:	movcs	r4, ip
   14094:	cmp	sl, #0
   14098:	beq	14360 <rb_patricia_lookup+0x3b8>
   1409c:	ldr	r3, [sl]
   140a0:	cmp	r3, r4
   140a4:	bcs	140bc <rb_patricia_lookup+0x114>
   140a8:	b	14360 <rb_patricia_lookup+0x3b8>
   140ac:	ldr	r2, [r3]
   140b0:	cmp	r2, r4
   140b4:	bcc	140c8 <rb_patricia_lookup+0x120>
   140b8:	mov	sl, r3
   140bc:	ldr	r3, [sl, #16]
   140c0:	cmp	r3, #0
   140c4:	bne	140ac <rb_patricia_lookup+0x104>
   140c8:	cmp	r4, r5
   140cc:	bne	140dc <rb_patricia_lookup+0x134>
   140d0:	ldr	r3, [sl]
   140d4:	cmp	r4, r3
   140d8:	beq	14248 <rb_patricia_lookup+0x2a0>
   140dc:	mov	r1, #24
   140e0:	mov	r0, #1
   140e4:	bl	45c0 <calloc@plt>
   140e8:	subs	fp, r0, #0
   140ec:	beq	142f8 <rb_patricia_lookup+0x350>
   140f0:	ldr	r3, [r8, #4]
   140f4:	str	r5, [fp]
   140f8:	cmp	r3, #0
   140fc:	addne	r3, r3, #1
   14100:	strne	r3, [r8, #4]
   14104:	beq	142e0 <rb_patricia_lookup+0x338>
   14108:	ldr	r2, [r6, #8]
   1410c:	mov	r3, #0
   14110:	ldr	r0, [sl]
   14114:	str	r8, [fp, #4]
   14118:	str	r3, [fp, #8]
   1411c:	add	r1, r2, #1
   14120:	str	r3, [fp, #12]
   14124:	str	r3, [fp, #16]
   14128:	cmp	r4, r0
   1412c:	str	r1, [r6, #8]
   14130:	str	r3, [fp, #20]
   14134:	beq	142b0 <rb_patricia_lookup+0x308>
   14138:	cmp	r4, r5
   1413c:	bne	1419c <rb_patricia_lookup+0x1f4>
   14140:	ldr	r3, [r6, #4]
   14144:	cmp	r4, r3
   14148:	bcc	14278 <rb_patricia_lookup+0x2d0>
   1414c:	str	sl, [fp, #8]
   14150:	ldr	r3, [sl, #16]
   14154:	str	r3, [fp, #16]
   14158:	ldr	r3, [sl, #16]
   1415c:	cmp	r3, #0
   14160:	streq	fp, [r6]
   14164:	beq	14178 <rb_patricia_lookup+0x1d0>
   14168:	ldr	r2, [r3, #12]
   1416c:	cmp	r2, sl
   14170:	streq	fp, [r3, #12]
   14174:	strne	fp, [r3, #8]
   14178:	str	fp, [sl, #16]
   1417c:	mov	r0, fp
   14180:	add	sp, sp, #12
   14184:	ldrd	r4, [sp]
   14188:	ldrd	r6, [sp, #8]
   1418c:	ldrd	r8, [sp, #16]
   14190:	ldrd	sl, [sp, #24]
   14194:	add	sp, sp, #32
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	mov	r1, #24
   141a0:	mov	r0, #1
   141a4:	str	r2, [sp, #4]
   141a8:	bl	45c0 <calloc@plt>
   141ac:	cmp	r0, #0
   141b0:	beq	142f8 <rb_patricia_lookup+0x350>
   141b4:	ldr	r2, [sp, #4]
   141b8:	mov	r3, #0
   141bc:	ldr	ip, [r6, #4]
   141c0:	ldr	r1, [sl, #16]
   141c4:	add	r2, r2, #2
   141c8:	str	r4, [r0]
   141cc:	str	r3, [r0, #4]
   141d0:	cmp	r4, ip
   141d4:	str	r2, [r6, #8]
   141d8:	str	r1, [r0, #16]
   141dc:	str	r3, [r0, #20]
   141e0:	bcc	14294 <rb_patricia_lookup+0x2ec>
   141e4:	str	fp, [r0, #8]
   141e8:	str	sl, [r0, #12]
   141ec:	str	r0, [fp, #16]
   141f0:	ldr	r3, [sl, #16]
   141f4:	cmp	r3, #0
   141f8:	streq	r0, [r6]
   141fc:	beq	14210 <rb_patricia_lookup+0x268>
   14200:	ldr	r2, [r3, #12]
   14204:	cmp	r2, sl
   14208:	streq	r0, [r3, #12]
   1420c:	strne	r0, [r3, #8]
   14210:	str	r0, [sl, #16]
   14214:	b	1417c <rb_patricia_lookup+0x1d4>
   14218:	mov	r0, r7
   1421c:	mov	r3, r9
   14220:	mov	ip, #8
   14224:	cmp	ip, r4
   14228:	bcs	1408c <rb_patricia_lookup+0xe4>
   1422c:	ldrb	r1, [r0, #1]!
   14230:	add	fp, ip, #8
   14234:	ldrb	lr, [r3, #1]!
   14238:	cmp	r1, lr
   1423c:	beq	142f0 <rb_patricia_lookup+0x348>
   14240:	eor	r1, r1, lr
   14244:	b	1406c <rb_patricia_lookup+0xc4>
   14248:	ldr	r3, [sl, #4]
   1424c:	cmp	r3, #0
   14250:	movne	fp, sl
   14254:	bne	1417c <rb_patricia_lookup+0x1d4>
   14258:	ldr	r3, [r8, #4]
   1425c:	cmp	r3, #0
   14260:	addne	r3, r3, #1
   14264:	strne	r3, [r8, #4]
   14268:	beq	14378 <rb_patricia_lookup+0x3d0>
   1426c:	mov	fp, sl
   14270:	str	r8, [sl, #4]
   14274:	b	1417c <rb_patricia_lookup+0x1d4>
   14278:	ldrb	r2, [r9, r4, lsr #3]
   1427c:	and	r3, r4, #7
   14280:	mov	r1, #128	; 0x80
   14284:	ands	r3, r2, r1, asr r3
   14288:	strne	sl, [fp, #12]
   1428c:	bne	14150 <rb_patricia_lookup+0x1a8>
   14290:	b	1414c <rb_patricia_lookup+0x1a4>
   14294:	ldrb	r2, [r7, r4, lsr #3]
   14298:	and	r3, r4, #7
   1429c:	mov	r1, #128	; 0x80
   142a0:	ands	r3, r2, r1, asr r3
   142a4:	strdne	sl, [r0, #8]
   142a8:	bne	141ec <rb_patricia_lookup+0x244>
   142ac:	b	141e4 <rb_patricia_lookup+0x23c>
   142b0:	ldr	r3, [r6, #4]
   142b4:	str	sl, [fp, #16]
   142b8:	cmp	r4, r3
   142bc:	bcs	142d8 <rb_patricia_lookup+0x330>
   142c0:	ldrb	r2, [r7, r4, lsr #3]
   142c4:	and	r3, r4, #7
   142c8:	mov	r1, #128	; 0x80
   142cc:	ands	r3, r2, r1, asr r3
   142d0:	strne	fp, [sl, #12]
   142d4:	bne	1417c <rb_patricia_lookup+0x1d4>
   142d8:	str	fp, [sl, #8]
   142dc:	b	1417c <rb_patricia_lookup+0x1d4>
   142e0:	mov	r0, r8
   142e4:	bl	13be0 <Ref_Prefix.part.0>
   142e8:	mov	r8, r0
   142ec:	b	14108 <rb_patricia_lookup+0x160>
   142f0:	mov	ip, fp
   142f4:	b	14224 <rb_patricia_lookup+0x27c>
   142f8:	bl	495c <rb_outofmemory@plt>
   142fc:	mov	r1, #24
   14300:	mov	r0, #1
   14304:	bl	45c0 <calloc@plt>
   14308:	subs	fp, r0, #0
   1430c:	beq	142f8 <rb_patricia_lookup+0x350>
   14310:	ldr	r3, [r8, #4]
   14314:	ldrh	r2, [r8, #2]
   14318:	cmp	r3, #0
   1431c:	addne	r3, r3, #1
   14320:	str	r2, [fp]
   14324:	strne	r3, [r8, #4]
   14328:	beq	14368 <rb_patricia_lookup+0x3c0>
   1432c:	ldr	r2, [r6, #8]
   14330:	mov	r3, #0
   14334:	str	fp, [r6]
   14338:	str	r8, [fp, #4]
   1433c:	str	r3, [fp, #8]
   14340:	str	r3, [fp, #12]
   14344:	add	r2, r2, #1
   14348:	str	r3, [fp, #16]
   1434c:	str	r3, [fp, #20]
   14350:	str	r2, [r6, #8]
   14354:	b	1417c <rb_patricia_lookup+0x1d4>
   14358:	cmp	sl, #0
   1435c:	bne	140bc <rb_patricia_lookup+0x114>
   14360:	mov	sl, r2
   14364:	b	140c8 <rb_patricia_lookup+0x120>
   14368:	mov	r0, r8
   1436c:	bl	13be0 <Ref_Prefix.part.0>
   14370:	mov	r8, r0
   14374:	b	1432c <rb_patricia_lookup+0x384>
   14378:	mov	r0, r8
   1437c:	bl	13be0 <Ref_Prefix.part.0>
   14380:	mov	r8, r0
   14384:	b	1426c <rb_patricia_lookup+0x2c4>

00014388 <rb_patricia_remove>:
   14388:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1438c:	mov	r4, r1
   14390:	ldr	r3, [r1, #8]
   14394:	ldr	r5, [r1, #12]
   14398:	strd	r6, [sp, #8]
   1439c:	mov	r7, r0
   143a0:	str	r8, [sp, #16]
   143a4:	str	lr, [sp, #20]
   143a8:	ldr	r0, [r1, #4]
   143ac:	cmp	r5, #0
   143b0:	beq	14450 <rb_patricia_remove+0xc8>
   143b4:	cmp	r3, #0
   143b8:	beq	143f8 <rb_patricia_remove+0x70>
   143bc:	cmp	r0, #0
   143c0:	beq	143d8 <rb_patricia_remove+0x50>
   143c4:	ldr	r3, [r0, #4]
   143c8:	sub	r3, r3, #1
   143cc:	cmp	r3, #0
   143d0:	str	r3, [r0, #4]
   143d4:	ble	14508 <rb_patricia_remove+0x180>
   143d8:	mov	r3, #0
   143dc:	str	r3, [r4, #4]
   143e0:	str	r3, [r4, #20]
   143e4:	ldrd	r4, [sp]
   143e8:	ldrd	r6, [sp, #8]
   143ec:	ldr	r8, [sp, #16]
   143f0:	add	sp, sp, #20
   143f4:	pop	{pc}		; (ldr pc, [sp], #4)
   143f8:	ldr	r6, [r1, #16]
   143fc:	cmp	r0, #0
   14400:	str	r6, [r5, #16]
   14404:	beq	1441c <rb_patricia_remove+0x94>
   14408:	ldr	r3, [r0, #4]
   1440c:	sub	r3, r3, #1
   14410:	cmp	r3, #0
   14414:	str	r3, [r0, #4]
   14418:	ble	14500 <rb_patricia_remove+0x178>
   1441c:	mov	r0, r4
   14420:	bl	46d4 <free@plt>
   14424:	ldr	r3, [r7, #8]
   14428:	cmp	r6, #0
   1442c:	streq	r5, [r7]
   14430:	sub	r3, r3, #1
   14434:	str	r3, [r7, #8]
   14438:	beq	143e4 <rb_patricia_remove+0x5c>
   1443c:	ldr	r3, [r6, #12]
   14440:	cmp	r3, r4
   14444:	streq	r5, [r6, #12]
   14448:	strne	r5, [r6, #8]
   1444c:	b	143e4 <rb_patricia_remove+0x5c>
   14450:	cmp	r3, #0
   14454:	ldr	r6, [r1, #16]
   14458:	movne	r5, r3
   1445c:	bne	143fc <rb_patricia_remove+0x74>
   14460:	cmp	r0, #0
   14464:	beq	14480 <rb_patricia_remove+0xf8>
   14468:	ldr	r3, [r0, #4]
   1446c:	sub	r3, r3, #1
   14470:	cmp	r3, #0
   14474:	str	r3, [r0, #4]
   14478:	bgt	14480 <rb_patricia_remove+0xf8>
   1447c:	bl	46d4 <free@plt>
   14480:	mov	r0, r4
   14484:	bl	46d4 <free@plt>
   14488:	ldr	r3, [r7, #8]
   1448c:	cmp	r6, #0
   14490:	streq	r6, [r7]
   14494:	sub	r3, r3, #1
   14498:	str	r3, [r7, #8]
   1449c:	beq	143e4 <rb_patricia_remove+0x5c>
   144a0:	ldr	r3, [r6, #12]
   144a4:	mov	r2, #0
   144a8:	cmp	r3, r4
   144ac:	ldreq	r3, [r6, #8]
   144b0:	streq	r2, [r6, #12]
   144b4:	strne	r2, [r6, #8]
   144b8:	ldr	r2, [r6, #4]
   144bc:	cmp	r2, #0
   144c0:	bne	143e4 <rb_patricia_remove+0x5c>
   144c4:	ldr	r2, [r6, #16]
   144c8:	cmp	r2, #0
   144cc:	streq	r3, [r7]
   144d0:	beq	144e4 <rb_patricia_remove+0x15c>
   144d4:	ldr	r1, [r2, #12]
   144d8:	cmp	r1, r6
   144dc:	streq	r3, [r2, #12]
   144e0:	strne	r3, [r2, #8]
   144e4:	mov	r0, r6
   144e8:	str	r2, [r3, #16]
   144ec:	bl	46d4 <free@plt>
   144f0:	ldr	r3, [r7, #8]
   144f4:	sub	r3, r3, #1
   144f8:	str	r3, [r7, #8]
   144fc:	b	143e4 <rb_patricia_remove+0x5c>
   14500:	bl	46d4 <free@plt>
   14504:	b	1441c <rb_patricia_remove+0x94>
   14508:	bl	46d4 <free@plt>
   1450c:	b	143d8 <rb_patricia_remove+0x50>

00014510 <make_and_lookup_ip>:
   14510:	strd	r4, [sp, #-16]!
   14514:	mov	r5, r0
   14518:	ldrh	r0, [r1]
   1451c:	str	r6, [sp, #8]
   14520:	str	lr, [sp, #12]
   14524:	cmp	r0, #10
   14528:	addeq	r1, r1, #8
   1452c:	addne	r1, r1, #4
   14530:	bl	13a34 <New_Prefix2.constprop.1>
   14534:	subs	r4, r0, #0
   14538:	moveq	r5, r4
   1453c:	beq	14564 <make_and_lookup_ip+0x54>
   14540:	mov	r0, r5
   14544:	mov	r1, r4
   14548:	bl	48cc <rb_patricia_lookup@plt>
   1454c:	ldr	r3, [r4, #4]
   14550:	mov	r5, r0
   14554:	sub	r3, r3, #1
   14558:	cmp	r3, #0
   1455c:	str	r3, [r4, #4]
   14560:	ble	14578 <make_and_lookup_ip+0x68>
   14564:	mov	r0, r5
   14568:	ldrd	r4, [sp]
   1456c:	ldr	r6, [sp, #8]
   14570:	add	sp, sp, #12
   14574:	pop	{pc}		; (ldr pc, [sp], #4)
   14578:	mov	r0, r4
   1457c:	bl	46d4 <free@plt>
   14580:	b	14564 <make_and_lookup_ip+0x54>

00014584 <make_and_lookup>:
   14584:	strd	r4, [sp, #-16]!
   14588:	mov	r5, r0
   1458c:	mov	r0, #2
   14590:	str	r6, [sp, #8]
   14594:	mov	r6, r1
   14598:	str	lr, [sp, #12]
   1459c:	bl	13af0 <ascii2prefix>
   145a0:	subs	r4, r0, #0
   145a4:	beq	145e0 <make_and_lookup+0x5c>
   145a8:	mov	r0, r5
   145ac:	mov	r1, r4
   145b0:	bl	48cc <rb_patricia_lookup@plt>
   145b4:	ldr	r3, [r4, #4]
   145b8:	mov	r5, r0
   145bc:	sub	r3, r3, #1
   145c0:	cmp	r3, #0
   145c4:	str	r3, [r4, #4]
   145c8:	ble	145fc <make_and_lookup+0x78>
   145cc:	mov	r0, r5
   145d0:	ldrd	r4, [sp]
   145d4:	ldr	r6, [sp, #8]
   145d8:	add	sp, sp, #12
   145dc:	pop	{pc}		; (ldr pc, [sp], #4)
   145e0:	mov	r1, r6
   145e4:	mov	r0, #10
   145e8:	bl	13af0 <ascii2prefix>
   145ec:	subs	r4, r0, #0
   145f0:	moveq	r5, r4
   145f4:	bne	145a8 <make_and_lookup+0x24>
   145f8:	b	145cc <make_and_lookup+0x48>
   145fc:	mov	r0, r4
   14600:	bl	46d4 <free@plt>
   14604:	b	145cc <make_and_lookup+0x48>

00014608 <rb_match_ip>:
   14608:	strd	r4, [sp, #-16]!
   1460c:	mov	r5, r0
   14610:	ldrh	r0, [r1]
   14614:	str	r6, [sp, #8]
   14618:	str	lr, [sp, #12]
   1461c:	cmp	r0, #10
   14620:	addeq	r1, r1, #8
   14624:	moveq	r2, #128	; 0x80
   14628:	beq	14638 <rb_match_ip+0x30>
   1462c:	add	r1, r1, #4
   14630:	mov	r2, #32
   14634:	mov	r0, #2
   14638:	bl	13a34 <New_Prefix2.constprop.1>
   1463c:	subs	r4, r0, #0
   14640:	moveq	r5, r4
   14644:	beq	1466c <rb_match_ip+0x64>
   14648:	mov	r0, r5
   1464c:	mov	r1, r4
   14650:	bl	4524 <rb_patricia_search_best@plt>
   14654:	ldr	r3, [r4, #4]
   14658:	mov	r5, r0
   1465c:	sub	r3, r3, #1
   14660:	cmp	r3, #0
   14664:	str	r3, [r4, #4]
   14668:	ble	14680 <rb_match_ip+0x78>
   1466c:	mov	r0, r5
   14670:	ldrd	r4, [sp]
   14674:	ldr	r6, [sp, #8]
   14678:	add	sp, sp, #12
   1467c:	pop	{pc}		; (ldr pc, [sp], #4)
   14680:	mov	r0, r4
   14684:	bl	46d4 <free@plt>
   14688:	b	1466c <rb_match_ip+0x64>

0001468c <rb_match_ip_exact>:
   1468c:	strd	r4, [sp, #-16]!
   14690:	mov	r5, r0
   14694:	ldrh	r0, [r1]
   14698:	str	r6, [sp, #8]
   1469c:	str	lr, [sp, #12]
   146a0:	cmp	r0, #10
   146a4:	beq	14700 <rb_match_ip_exact+0x74>
   146a8:	cmp	r2, #32
   146ac:	add	r1, r1, #4
   146b0:	movcs	r2, #32
   146b4:	mov	r0, #2
   146b8:	bl	13a34 <New_Prefix2.constprop.1>
   146bc:	subs	r4, r0, #0
   146c0:	moveq	r5, r4
   146c4:	beq	146ec <rb_match_ip_exact+0x60>
   146c8:	mov	r0, r5
   146cc:	mov	r1, r4
   146d0:	bl	4890 <rb_patricia_search_exact@plt>
   146d4:	ldr	r3, [r4, #4]
   146d8:	mov	r5, r0
   146dc:	sub	r3, r3, #1
   146e0:	cmp	r3, #0
   146e4:	str	r3, [r4, #4]
   146e8:	ble	14710 <rb_match_ip_exact+0x84>
   146ec:	mov	r0, r5
   146f0:	ldrd	r4, [sp]
   146f4:	ldr	r6, [sp, #8]
   146f8:	add	sp, sp, #12
   146fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14700:	cmp	r2, #128	; 0x80
   14704:	add	r1, r1, #8
   14708:	movcs	r2, #128	; 0x80
   1470c:	b	146b8 <rb_match_ip_exact+0x2c>
   14710:	mov	r0, r4
   14714:	bl	46d4 <free@plt>
   14718:	b	146ec <rb_match_ip_exact+0x60>

0001471c <rb_match_string>:
   1471c:	strd	r4, [sp, #-16]!
   14720:	mov	r5, r0
   14724:	mov	r0, #2
   14728:	str	r6, [sp, #8]
   1472c:	mov	r6, r1
   14730:	str	lr, [sp, #12]
   14734:	bl	13af0 <ascii2prefix>
   14738:	subs	r4, r0, #0
   1473c:	beq	14778 <rb_match_string+0x5c>
   14740:	mov	r0, r5
   14744:	mov	r1, r4
   14748:	bl	4524 <rb_patricia_search_best@plt>
   1474c:	ldr	r3, [r4, #4]
   14750:	mov	r5, r0
   14754:	sub	r3, r3, #1
   14758:	cmp	r3, #0
   1475c:	str	r3, [r4, #4]
   14760:	ble	14794 <rb_match_string+0x78>
   14764:	mov	r0, r5
   14768:	ldrd	r4, [sp]
   1476c:	ldr	r6, [sp, #8]
   14770:	add	sp, sp, #12
   14774:	pop	{pc}		; (ldr pc, [sp], #4)
   14778:	mov	r1, r6
   1477c:	mov	r0, #10
   14780:	bl	13af0 <ascii2prefix>
   14784:	subs	r4, r0, #0
   14788:	moveq	r5, r4
   1478c:	bne	14740 <rb_match_string+0x24>
   14790:	b	14764 <rb_match_string+0x48>
   14794:	mov	r0, r4
   14798:	bl	46d4 <free@plt>
   1479c:	b	14764 <rb_match_string+0x48>

000147a0 <rb_match_exact_string>:
   147a0:	strd	r4, [sp, #-16]!
   147a4:	mov	r5, r0
   147a8:	mov	r0, #2
   147ac:	str	r6, [sp, #8]
   147b0:	mov	r6, r1
   147b4:	str	lr, [sp, #12]
   147b8:	bl	13af0 <ascii2prefix>
   147bc:	subs	r4, r0, #0
   147c0:	beq	147fc <rb_match_exact_string+0x5c>
   147c4:	mov	r0, r5
   147c8:	mov	r1, r4
   147cc:	bl	4890 <rb_patricia_search_exact@plt>
   147d0:	ldr	r3, [r4, #4]
   147d4:	mov	r5, r0
   147d8:	sub	r3, r3, #1
   147dc:	cmp	r3, #0
   147e0:	str	r3, [r4, #4]
   147e4:	ble	14818 <rb_match_exact_string+0x78>
   147e8:	mov	r0, r5
   147ec:	ldrd	r4, [sp]
   147f0:	ldr	r6, [sp, #8]
   147f4:	add	sp, sp, #12
   147f8:	pop	{pc}		; (ldr pc, [sp], #4)
   147fc:	mov	r1, r6
   14800:	mov	r0, #10
   14804:	bl	13af0 <ascii2prefix>
   14808:	subs	r4, r0, #0
   1480c:	moveq	r5, r4
   14810:	bne	147c4 <rb_match_exact_string+0x24>
   14814:	b	147e8 <rb_match_exact_string+0x48>
   14818:	mov	r0, r4
   1481c:	bl	46d4 <free@plt>
   14820:	b	147e8 <rb_match_exact_string+0x48>

00014824 <stats_recurse>:
   14824:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14828:	mov	r5, r0
   1482c:	mov	r4, r1
   14830:	strd	r6, [sp, #8]
   14834:	mov	r7, r2
   14838:	mov	r6, #0
   1483c:	str	r8, [sp, #16]
   14840:	str	lr, [sp, #20]
   14844:	ldr	r3, [r7]
   14848:	cmp	r3, r4
   1484c:	strlt	r4, [r7]
   14850:	cmp	r5, #0
   14854:	beq	148a4 <stats_recurse+0x80>
   14858:	ldr	r3, [r5]
   1485c:	mov	r2, r7
   14860:	add	r1, r4, #1
   14864:	mov	ip, r4
   14868:	subs	r0, r3, #0
   1486c:	beq	14878 <stats_recurse+0x54>
   14870:	bl	14824 <stats_recurse>
   14874:	add	ip, r4, r0
   14878:	ldr	r5, [r5, #4]
   1487c:	add	r6, r6, ip
   14880:	add	r4, r4, #1
   14884:	cmp	r5, #0
   14888:	bne	14844 <stats_recurse+0x20>
   1488c:	mov	r0, r6
   14890:	ldrd	r4, [sp]
   14894:	ldrd	r6, [sp, #8]
   14898:	ldr	r8, [sp, #16]
   1489c:	add	sp, sp, #20
   148a0:	pop	{pc}		; (ldr pc, [sp], #4)
   148a4:	add	r6, r6, r4
   148a8:	b	1488c <stats_recurse+0x68>

000148ac <rb_dictionary_retune.isra.1>:
   148ac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   148b0:	ldr	r4, [r1]
   148b4:	strd	r6, [sp, #8]
   148b8:	strd	r8, [sp, #16]
   148bc:	str	lr, [sp, #24]
   148c0:	sub	sp, sp, #36	; 0x24
   148c4:	cmp	r4, #0
   148c8:	beq	149d4 <rb_dictionary_retune.isra.1+0x128>
   148cc:	add	r8, sp, #4
   148d0:	mov	r3, #0
   148d4:	mov	r6, r2
   148d8:	mov	r5, r0
   148dc:	mov	r9, r1
   148e0:	mov	r7, r8
   148e4:	str	r3, [sp, #4]
   148e8:	str	r3, [sp, #8]
   148ec:	mov	r0, r6
   148f0:	ldr	r3, [r5]
   148f4:	ldr	r1, [r4, #20]
   148f8:	blx	r3
   148fc:	cmp	r0, #0
   14900:	beq	149ec <rb_dictionary_retune.isra.1+0x140>
   14904:	blt	14958 <rb_dictionary_retune.isra.1+0xac>
   14908:	ldr	r3, [r4, #4]
   1490c:	cmp	r3, #0
   14910:	beq	149ec <rb_dictionary_retune.isra.1+0x140>
   14914:	mov	r0, r6
   14918:	ldr	r2, [r5]
   1491c:	ldr	r1, [r3, #20]
   14920:	blx	r2
   14924:	cmp	r0, #0
   14928:	ble	1498c <rb_dictionary_retune.isra.1+0xe0>
   1492c:	ldr	r3, [r4, #4]
   14930:	ldr	r2, [r3]
   14934:	str	r2, [r4, #4]
   14938:	ldr	r2, [r3, #4]
   1493c:	str	r4, [r3]
   14940:	cmp	r2, #0
   14944:	beq	149f4 <rb_dictionary_retune.isra.1+0x148>
   14948:	str	r3, [r7, #4]
   1494c:	mov	r7, r3
   14950:	ldr	r4, [r3, #4]
   14954:	b	148ec <rb_dictionary_retune.isra.1+0x40>
   14958:	ldr	r2, [r4]
   1495c:	cmp	r2, #0
   14960:	beq	149b4 <rb_dictionary_retune.isra.1+0x108>
   14964:	mov	r0, r6
   14968:	ldr	r3, [r5]
   1496c:	ldr	r1, [r2, #20]
   14970:	blx	r3
   14974:	cmp	r0, #0
   14978:	blt	14994 <rb_dictionary_retune.isra.1+0xe8>
   1497c:	str	r4, [r8]
   14980:	mov	r8, r4
   14984:	ldr	r4, [r4]
   14988:	b	148ec <rb_dictionary_retune.isra.1+0x40>
   1498c:	mov	r3, r4
   14990:	b	14948 <rb_dictionary_retune.isra.1+0x9c>
   14994:	ldr	r3, [r4]
   14998:	ldr	r2, [r3, #4]
   1499c:	str	r2, [r4]
   149a0:	ldr	r2, [r3]
   149a4:	str	r4, [r3, #4]
   149a8:	mov	r4, r3
   149ac:	cmp	r2, #0
   149b0:	bne	1497c <rb_dictionary_retune.isra.1+0xd0>
   149b4:	str	r2, [r7, #4]
   149b8:	ldr	r3, [r4, #4]
   149bc:	ldr	r2, [sp, #8]
   149c0:	str	r3, [r8]
   149c4:	ldr	r3, [sp, #4]
   149c8:	str	r2, [r4]
   149cc:	str	r3, [r4, #4]
   149d0:	str	r4, [r9]
   149d4:	add	sp, sp, #36	; 0x24
   149d8:	ldrd	r4, [sp]
   149dc:	ldrd	r6, [sp, #8]
   149e0:	ldrd	r8, [sp, #16]
   149e4:	add	sp, sp, #24
   149e8:	pop	{pc}		; (ldr pc, [sp], #4)
   149ec:	ldr	r2, [r4]
   149f0:	b	149b4 <rb_dictionary_retune.isra.1+0x108>
   149f4:	mov	r2, r4
   149f8:	mov	r4, r3
   149fc:	b	149b4 <rb_dictionary_retune.isra.1+0x108>

00014a00 <rb_dictionary_create>:
   14a00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a04:	mov	r5, r0
   14a08:	mov	r0, #1
   14a0c:	strd	r6, [sp, #8]
   14a10:	mov	r6, r1
   14a14:	mov	r1, #40	; 0x28
   14a18:	str	r8, [sp, #16]
   14a1c:	str	lr, [sp, #20]
   14a20:	bl	45c0 <calloc@plt>
   14a24:	subs	r4, r0, #0
   14a28:	beq	14ac8 <rb_dictionary_create+0xc8>
   14a2c:	mov	r0, r5
   14a30:	str	r6, [r4]
   14a34:	bl	47c4 <strlen@plt>
   14a38:	add	r6, r0, #1
   14a3c:	mov	r0, r6
   14a40:	bl	4980 <malloc@plt>
   14a44:	subs	r7, r0, #0
   14a48:	beq	14ac8 <rb_dictionary_create+0xc8>
   14a4c:	mov	r2, r6
   14a50:	mov	r1, r5
   14a54:	bl	47e8 <memcpy@plt>
   14a58:	ldr	r2, [pc, #108]	; 14acc <rb_dictionary_create+0xcc>
   14a5c:	mov	r3, #0
   14a60:	add	r1, r4, #28
   14a64:	str	r7, [r4, #20]
   14a68:	str	r4, [r4, #28]
   14a6c:	str	r3, [r4, #32]
   14a70:	add	r2, pc, r2
   14a74:	ldr	r3, [r2]
   14a78:	cmp	r3, #0
   14a7c:	str	r3, [r4, #36]	; 0x24
   14a80:	strne	r1, [r3, #4]
   14a84:	beq	14ab8 <rb_dictionary_create+0xb8>
   14a88:	ldr	r3, [pc, #64]	; 14ad0 <rb_dictionary_create+0xd0>
   14a8c:	mov	r0, r4
   14a90:	ldrd	r4, [sp]
   14a94:	ldrd	r6, [sp, #8]
   14a98:	add	r3, pc, r3
   14a9c:	ldr	r2, [r3, #8]
   14aa0:	ldr	r8, [sp, #16]
   14aa4:	add	sp, sp, #20
   14aa8:	str	r1, [r3]
   14aac:	add	r2, r2, #1
   14ab0:	str	r2, [r3, #8]
   14ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab8:	ldr	r3, [r2, #4]
   14abc:	cmp	r3, #0
   14ac0:	streq	r1, [r2, #4]
   14ac4:	b	14a88 <rb_dictionary_create+0x88>
   14ac8:	bl	495c <rb_outofmemory@plt>
   14acc:	.word	0x000324b4
   14ad0:	.word	0x0003248c

00014ad4 <rb_dictionary_set_comparator_func>:
   14ad4:	str	r1, [r0]
   14ad8:	bx	lr

00014adc <rb_dictionary_get_comparator_func>:
   14adc:	ldr	r0, [r0]
   14ae0:	bx	lr

00014ae4 <rb_dictionary_destroy>:
   14ae4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ae8:	ldr	r5, [r0, #8]
   14aec:	strd	r6, [sp, #8]
   14af0:	mov	r7, r0
   14af4:	str	r8, [sp, #16]
   14af8:	str	lr, [sp, #20]
   14afc:	cmp	r5, #0
   14b00:	beq	14b50 <rb_dictionary_destroy+0x6c>
   14b04:	mov	r6, r1
   14b08:	mov	r8, r2
   14b0c:	ldr	r4, [r5, #12]
   14b10:	cmp	r6, #0
   14b14:	mov	r1, r8
   14b18:	mov	r0, r5
   14b1c:	beq	14b24 <rb_dictionary_destroy+0x40>
   14b20:	blx	r6
   14b24:	mov	r0, r5
   14b28:	mov	r5, r4
   14b2c:	bl	46d4 <free@plt>
   14b30:	cmp	r4, #0
   14b34:	beq	14b50 <rb_dictionary_destroy+0x6c>
   14b38:	cmp	r6, #0
   14b3c:	mov	r1, r8
   14b40:	ldr	r4, [r4, #12]
   14b44:	mov	r0, r5
   14b48:	bne	14b20 <rb_dictionary_destroy+0x3c>
   14b4c:	b	14b24 <rb_dictionary_destroy+0x40>
   14b50:	ldrd	r2, [r7, #32]
   14b54:	cmp	r3, #0
   14b58:	beq	14bbc <rb_dictionary_destroy+0xd8>
   14b5c:	str	r2, [r3, #4]
   14b60:	ldr	r2, [r7, #32]
   14b64:	cmp	r2, #0
   14b68:	strne	r3, [r2, #8]
   14b6c:	beq	14bd4 <rb_dictionary_destroy+0xf0>
   14b70:	ldr	r2, [pc, #108]	; 14be4 <rb_dictionary_destroy+0x100>
   14b74:	mov	r3, #0
   14b78:	str	r3, [r7, #32]
   14b7c:	str	r3, [r7, #36]	; 0x24
   14b80:	ldr	r0, [r7, #20]
   14b84:	add	r2, pc, r2
   14b88:	ldr	r3, [r2, #8]
   14b8c:	cmp	r0, #0
   14b90:	sub	r3, r3, #1
   14b94:	str	r3, [r2, #8]
   14b98:	beq	14ba0 <rb_dictionary_destroy+0xbc>
   14b9c:	bl	46d4 <free@plt>
   14ba0:	mov	r0, r7
   14ba4:	ldrd	r4, [sp]
   14ba8:	ldrd	r6, [sp, #8]
   14bac:	ldr	r8, [sp, #16]
   14bb0:	ldr	lr, [sp, #20]
   14bb4:	add	sp, sp, #24
   14bb8:	b	46d4 <free@plt>
   14bbc:	ldr	r1, [pc, #36]	; 14be8 <rb_dictionary_destroy+0x104>
   14bc0:	cmp	r2, #0
   14bc4:	strne	r3, [r2, #8]
   14bc8:	add	r1, pc, r1
   14bcc:	str	r2, [r1, #4]
   14bd0:	bne	14b70 <rb_dictionary_destroy+0x8c>
   14bd4:	ldr	r2, [pc, #16]	; 14bec <rb_dictionary_destroy+0x108>
   14bd8:	add	r2, pc, r2
   14bdc:	str	r3, [r2]
   14be0:	b	14b70 <rb_dictionary_destroy+0x8c>
   14be4:	.word	0x000323a0
   14be8:	.word	0x0003235c
   14bec:	.word	0x0003234c

00014bf0 <rb_dictionary_foreach>:
   14bf0:	ldr	r0, [r0, #8]
   14bf4:	cmp	r0, #0
   14bf8:	bxeq	lr
   14bfc:	strd	r4, [sp, #-16]!
   14c00:	mov	r5, r1
   14c04:	cmp	r5, #0
   14c08:	ldr	r4, [r0, #12]
   14c0c:	str	r6, [sp, #8]
   14c10:	mov	r6, r2
   14c14:	mov	r1, r6
   14c18:	str	lr, [sp, #12]
   14c1c:	beq	14c24 <rb_dictionary_foreach+0x34>
   14c20:	blx	r5
   14c24:	cmp	r4, #0
   14c28:	mov	r0, r4
   14c2c:	beq	14c4c <rb_dictionary_foreach+0x5c>
   14c30:	cmp	r5, #0
   14c34:	mov	r1, r6
   14c38:	ldr	r4, [r4, #12]
   14c3c:	bne	14c20 <rb_dictionary_foreach+0x30>
   14c40:	cmp	r4, #0
   14c44:	mov	r0, r4
   14c48:	bne	14c30 <rb_dictionary_foreach+0x40>
   14c4c:	ldrd	r4, [sp]
   14c50:	ldr	r6, [sp, #8]
   14c54:	add	sp, sp, #12
   14c58:	pop	{pc}		; (ldr pc, [sp], #4)

00014c5c <rb_dictionary_search>:
   14c5c:	ldr	r0, [r0, #8]
   14c60:	cmp	r0, #0
   14c64:	beq	14cd4 <rb_dictionary_search+0x78>
   14c68:	strd	r4, [sp, #-16]!
   14c6c:	mov	r5, r1
   14c70:	cmp	r5, #0
   14c74:	ldr	r4, [r0, #12]
   14c78:	str	r6, [sp, #8]
   14c7c:	mov	r6, r2
   14c80:	mov	r1, r6
   14c84:	str	lr, [sp, #12]
   14c88:	beq	14c98 <rb_dictionary_search+0x3c>
   14c8c:	blx	r5
   14c90:	cmp	r0, #0
   14c94:	bne	14cc4 <rb_dictionary_search+0x68>
   14c98:	cmp	r4, #0
   14c9c:	mov	r0, r4
   14ca0:	beq	14cc0 <rb_dictionary_search+0x64>
   14ca4:	cmp	r5, #0
   14ca8:	mov	r1, r6
   14cac:	ldr	r4, [r4, #12]
   14cb0:	bne	14c8c <rb_dictionary_search+0x30>
   14cb4:	cmp	r4, #0
   14cb8:	mov	r0, r4
   14cbc:	bne	14ca4 <rb_dictionary_search+0x48>
   14cc0:	mov	r0, #0
   14cc4:	ldrd	r4, [sp]
   14cc8:	ldr	r6, [sp, #8]
   14ccc:	add	sp, sp, #12
   14cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd4:	mov	r0, #0
   14cd8:	bx	lr

00014cdc <rb_dictionary_foreach_cur>:
   14cdc:	ldr	r0, [r1]
   14ce0:	cmp	r0, #0
   14ce4:	ldrne	r0, [r0, #16]
   14ce8:	bx	lr

00014cec <rb_dictionary_foreach_next>:
   14cec:	ldr	r3, [r1]
   14cf0:	cmp	r3, #0
   14cf4:	beq	14d10 <rb_dictionary_foreach_next+0x24>
   14cf8:	ldr	r3, [r1, #4]
   14cfc:	cmp	r3, #0
   14d00:	str	r3, [r1]
   14d04:	ldrne	r3, [r3, #12]
   14d08:	strne	r3, [r1, #4]
   14d0c:	bx	lr
   14d10:	mov	r1, r0
   14d14:	ldr	r0, [pc, #4]	; 14d20 <rb_dictionary_foreach_next+0x34>
   14d18:	add	r0, pc, r0
   14d1c:	b	48f0 <rb_lib_log@plt>
   14d20:	.word	0x00002fb4

00014d24 <rb_dictionary_foreach_start>:
   14d24:	ldr	r2, [r0, #8]
   14d28:	mov	ip, #0
   14d2c:	cmp	r2, ip
   14d30:	stm	r1, {r2, ip}
   14d34:	beq	14d40 <rb_dictionary_foreach_start+0x1c>
   14d38:	str	r2, [r1, #4]
   14d3c:	b	46bc <rb_dictionary_foreach_next@plt>
   14d40:	bx	lr

00014d44 <rb_dictionary_find>:
   14d44:	mov	r2, r1
   14d48:	strd	r4, [sp, #-16]!
   14d4c:	mov	r4, r0
   14d50:	mov	r5, r1
   14d54:	add	r1, r0, #4
   14d58:	str	r6, [sp, #8]
   14d5c:	str	lr, [sp, #12]
   14d60:	bl	148ac <rb_dictionary_retune.isra.1>
   14d64:	ldr	r3, [r4, #4]
   14d68:	cmp	r3, #0
   14d6c:	beq	14d9c <rb_dictionary_find+0x58>
   14d70:	mov	r0, r5
   14d74:	ldr	r2, [r4]
   14d78:	ldr	r1, [r3, #20]
   14d7c:	blx	r2
   14d80:	cmp	r0, #0
   14d84:	bne	14d9c <rb_dictionary_find+0x58>
   14d88:	ldr	r0, [r4, #4]
   14d8c:	ldrd	r4, [sp]
   14d90:	ldr	r6, [sp, #8]
   14d94:	add	sp, sp, #12
   14d98:	pop	{pc}		; (ldr pc, [sp], #4)
   14d9c:	ldrd	r4, [sp]
   14da0:	mov	r0, #0
   14da4:	ldr	r6, [sp, #8]
   14da8:	add	sp, sp, #12
   14dac:	pop	{pc}		; (ldr pc, [sp], #4)

00014db0 <rb_dictionary_get_linear_index>:
   14db0:	str	r4, [sp, #-8]!
   14db4:	mov	r4, r0
   14db8:	str	lr, [sp, #4]
   14dbc:	bl	4a04 <rb_dictionary_find@plt>
   14dc0:	cmp	r0, #0
   14dc4:	beq	14e14 <rb_dictionary_get_linear_index+0x64>
   14dc8:	ldrb	r3, [r4, #24]
   14dcc:	tst	r3, #1
   14dd0:	beq	14e04 <rb_dictionary_get_linear_index+0x54>
   14dd4:	ldr	r3, [r4, #8]
   14dd8:	cmp	r3, #0
   14ddc:	beq	14df8 <rb_dictionary_get_linear_index+0x48>
   14de0:	mov	r2, #0
   14de4:	str	r2, [r3, #24]
   14de8:	add	r2, r2, #1
   14dec:	ldr	r3, [r3, #12]
   14df0:	cmp	r3, #0
   14df4:	bne	14de4 <rb_dictionary_get_linear_index+0x34>
   14df8:	ldrb	r3, [r4, #24]
   14dfc:	bfc	r3, #0, #1
   14e00:	strb	r3, [r4, #24]
   14e04:	ldr	r0, [r0, #24]
   14e08:	ldr	r4, [sp]
   14e0c:	add	sp, sp, #4
   14e10:	pop	{pc}		; (ldr pc, [sp], #4)
   14e14:	mvn	r0, #0
   14e18:	b	14e08 <rb_dictionary_get_linear_index+0x58>

00014e1c <rb_dictionary_add>:
   14e1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e20:	mov	r5, r0
   14e24:	mov	r0, #1
   14e28:	strd	r6, [sp, #8]
   14e2c:	mov	r6, r1
   14e30:	mov	r1, #28
   14e34:	mov	r7, r2
   14e38:	str	r8, [sp, #16]
   14e3c:	str	lr, [sp, #20]
   14e40:	bl	45c0 <calloc@plt>
   14e44:	subs	r4, r0, #0
   14e48:	beq	14f48 <rb_dictionary_add+0x12c>
   14e4c:	ldrb	r1, [r5, #24]
   14e50:	str	r7, [r4, #16]
   14e54:	ldr	r2, [r5, #4]
   14e58:	str	r6, [r4, #20]
   14e5c:	ldr	r3, [r5, #16]
   14e60:	orr	r1, r1, #1
   14e64:	cmp	r2, #0
   14e68:	strb	r1, [r5, #24]
   14e6c:	add	r3, r3, #1
   14e70:	str	r3, [r5, #16]
   14e74:	beq	14ef8 <rb_dictionary_add+0xdc>
   14e78:	mov	r2, r6
   14e7c:	add	r1, r5, #4
   14e80:	mov	r0, r5
   14e84:	bl	148ac <rb_dictionary_retune.isra.1>
   14e88:	ldr	r3, [r5]
   14e8c:	ldr	r2, [r5, #4]
   14e90:	ldr	r0, [r4, #20]
   14e94:	ldr	r1, [r2, #20]
   14e98:	blx	r3
   14e9c:	cmp	r0, #0
   14ea0:	ldr	r3, [r5, #4]
   14ea4:	blt	14f18 <rb_dictionary_add+0xfc>
   14ea8:	beq	14f4c <rb_dictionary_add+0x130>
   14eac:	ldr	r0, [r3, #4]
   14eb0:	mov	r1, #0
   14eb4:	ldr	r2, [r3, #12]
   14eb8:	str	r3, [r4]
   14ebc:	str	r0, [r4, #4]
   14ec0:	str	r1, [r3, #4]
   14ec4:	cmp	r2, r1
   14ec8:	strne	r4, [r2, #8]
   14ecc:	streq	r4, [r5, #12]
   14ed0:	str	r3, [r4, #8]
   14ed4:	str	r2, [r4, #12]
   14ed8:	str	r4, [r3, #12]
   14edc:	str	r4, [r5, #4]
   14ee0:	mov	r0, r4
   14ee4:	ldrd	r4, [sp]
   14ee8:	ldrd	r6, [sp, #8]
   14eec:	ldr	r8, [sp, #16]
   14ef0:	add	sp, sp, #20
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	str	r2, [r4]
   14efc:	str	r2, [r4, #4]
   14f00:	str	r4, [r5, #4]
   14f04:	str	r2, [r4, #8]
   14f08:	str	r4, [r5, #8]
   14f0c:	str	r2, [r4, #12]
   14f10:	str	r4, [r5, #12]
   14f14:	b	14ee0 <rb_dictionary_add+0xc4>
   14f18:	ldr	r0, [r3]
   14f1c:	mov	r1, #0
   14f20:	ldr	r2, [r3, #8]
   14f24:	stm	r4, {r0, r3}
   14f28:	str	r1, [r3]
   14f2c:	cmp	r2, r1
   14f30:	strne	r4, [r2, #12]
   14f34:	streq	r4, [r5, #8]
   14f38:	strd	r2, [r4, #8]
   14f3c:	str	r4, [r3, #8]
   14f40:	str	r4, [r5, #4]
   14f44:	b	14ee0 <rb_dictionary_add+0xc4>
   14f48:	bl	495c <rb_outofmemory@plt>
   14f4c:	ldr	r2, [r5, #16]
   14f50:	mov	r0, r4
   14f54:	ldr	r1, [r4, #16]
   14f58:	ldr	ip, [r4, #20]
   14f5c:	mov	r4, r3
   14f60:	sub	r2, r2, #1
   14f64:	str	r1, [r3, #16]
   14f68:	str	ip, [r3, #20]
   14f6c:	str	r2, [r5, #16]
   14f70:	bl	46d4 <free@plt>
   14f74:	b	14ee0 <rb_dictionary_add+0xc4>

00014f78 <rb_dictionary_delete>:
   14f78:	strd	r4, [sp, #-16]!
   14f7c:	mov	r4, r0
   14f80:	str	r6, [sp, #8]
   14f84:	str	lr, [sp, #12]
   14f88:	bl	4a04 <rb_dictionary_find@plt>
   14f8c:	cmp	r0, #0
   14f90:	moveq	r5, r0
   14f94:	beq	15058 <rb_dictionary_delete+0xe0>
   14f98:	ldrb	r2, [r4, #24]
   14f9c:	ldr	r3, [r4, #4]
   14fa0:	ldr	r5, [r0, #16]
   14fa4:	orr	r2, r2, #1
   14fa8:	cmp	r3, #0
   14fac:	strb	r2, [r4, #24]
   14fb0:	beq	15054 <rb_dictionary_delete+0xdc>
   14fb4:	ldm	r3, {r1, lr}
   14fb8:	ldr	r2, [r3, #12]
   14fbc:	cmp	r1, #0
   14fc0:	streq	lr, [r4, #4]
   14fc4:	beq	15014 <rb_dictionary_delete+0x9c>
   14fc8:	cmp	lr, #0
   14fcc:	streq	r1, [r4, #4]
   14fd0:	beq	15014 <rb_dictionary_delete+0x9c>
   14fd4:	cmp	r2, lr
   14fd8:	movne	ip, lr
   14fdc:	streq	r2, [r4, #4]
   14fe0:	streq	r1, [r2]
   14fe4:	bne	14ff0 <rb_dictionary_delete+0x78>
   14fe8:	b	15014 <rb_dictionary_delete+0x9c>
   14fec:	mov	ip, r1
   14ff0:	ldr	r1, [ip]
   14ff4:	cmp	r1, r2
   14ff8:	cmpne	r1, #0
   14ffc:	bne	14fec <rb_dictionary_delete+0x74>
   15000:	ldr	r1, [r2, #4]
   15004:	str	r1, [ip]
   15008:	ldr	r1, [r3]
   1500c:	str	r2, [r4, #4]
   15010:	stm	r2, {r1, lr}
   15014:	ldr	r1, [r3, #8]
   15018:	ldr	ip, [r4, #8]
   1501c:	cmp	r1, #0
   15020:	strne	r2, [r1, #12]
   15024:	ldrne	r2, [r3, #12]
   15028:	cmp	r3, ip
   1502c:	streq	r2, [r4, #8]
   15030:	cmp	r2, #0
   15034:	strne	r1, [r2, #8]
   15038:	ldr	r2, [r4, #12]
   1503c:	cmp	r3, r2
   15040:	ldreq	r3, [r3, #8]
   15044:	streq	r3, [r4, #12]
   15048:	ldr	r3, [r4, #16]
   1504c:	sub	r3, r3, #1
   15050:	str	r3, [r4, #16]
   15054:	bl	46d4 <free@plt>
   15058:	mov	r0, r5
   1505c:	ldrd	r4, [sp]
   15060:	ldr	r6, [sp, #8]
   15064:	add	sp, sp, #12
   15068:	pop	{pc}		; (ldr pc, [sp], #4)

0001506c <rb_dictionary_retrieve>:
   1506c:	str	r4, [sp, #-8]!
   15070:	str	lr, [sp, #4]
   15074:	bl	4a04 <rb_dictionary_find@plt>
   15078:	cmp	r0, #0
   1507c:	ldr	r4, [sp]
   15080:	add	sp, sp, #4
   15084:	ldrne	r0, [r0, #16]
   15088:	pop	{pc}		; (ldr pc, [sp], #4)

0001508c <rb_dictionary_size>:
   1508c:	ldr	r0, [r0, #16]
   15090:	bx	lr

00015094 <rb_dictionary_stats>:
   15094:	ldr	r3, [r0, #16]
   15098:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1509c:	mov	r4, r0
   150a0:	strd	r6, [sp, #8]
   150a4:	mov	r6, r1
   150a8:	mov	r7, r2
   150ac:	str	r8, [sp, #16]
   150b0:	str	lr, [sp, #20]
   150b4:	sub	sp, sp, #288	; 0x120
   150b8:	cmp	r3, #0
   150bc:	beq	15144 <rb_dictionary_stats+0xb0>
   150c0:	mov	r3, #0
   150c4:	add	r2, sp, #28
   150c8:	ldr	r0, [r0, #4]
   150cc:	mov	r1, r3
   150d0:	add	r5, sp, #32
   150d4:	str	r3, [sp, #28]
   150d8:	bl	14824 <stats_recurse>
   150dc:	ldr	r8, [r4, #16]
   150e0:	mov	ip, r0
   150e4:	mov	r1, #256	; 0x100
   150e8:	mov	r0, r5
   150ec:	ldr	lr, [pc, #148]	; 15188 <rb_dictionary_stats+0xf4>
   150f0:	str	ip, [sp, #8]
   150f4:	ldr	r3, [r4, #20]
   150f8:	udiv	ip, ip, r8
   150fc:	ldr	r4, [sp, #28]
   15100:	add	lr, pc, lr
   15104:	mov	r2, lr
   15108:	stm	sp, {r2, r8}
   1510c:	ldr	r2, [pc, #120]	; 1518c <rb_dictionary_stats+0xf8>
   15110:	str	ip, [sp, #12]
   15114:	add	r2, pc, r2
   15118:	str	r4, [sp, #16]
   1511c:	bl	4b84 <snprintf@plt>
   15120:	mov	r1, r7
   15124:	mov	r0, r5
   15128:	blx	r6
   1512c:	add	sp, sp, #288	; 0x120
   15130:	ldrd	r4, [sp]
   15134:	ldrd	r6, [sp, #8]
   15138:	ldr	r8, [sp, #16]
   1513c:	add	sp, sp, #20
   15140:	pop	{pc}		; (ldr pc, [sp], #4)
   15144:	ldr	r2, [pc, #68]	; 15190 <rb_dictionary_stats+0xfc>
   15148:	add	r5, sp, #32
   1514c:	mov	r1, #256	; 0x100
   15150:	mov	r0, r5
   15154:	ldr	ip, [pc, #56]	; 15194 <rb_dictionary_stats+0x100>
   15158:	ldr	r3, [r4, #20]
   1515c:	add	r2, pc, r2
   15160:	str	r2, [sp, #4]
   15164:	add	ip, pc, ip
   15168:	str	r2, [sp, #8]
   1516c:	str	r2, [sp, #12]
   15170:	str	r2, [sp, #16]
   15174:	ldr	r2, [pc, #28]	; 15198 <rb_dictionary_stats+0x104>
   15178:	str	ip, [sp]
   1517c:	add	r2, pc, r2
   15180:	bl	4b84 <snprintf@plt>
   15184:	b	15120 <rb_dictionary_stats+0x8c>
   15188:	.word	0x00002c44
   1518c:	.word	0x00002c0c
   15190:	.word	0x00001b58
   15194:	.word	0x00002be0
   15198:	.word	0x00002bd0

0001519c <rb_dictionary_stats_walk>:
   1519c:	ldr	r3, [pc, #72]	; 151ec <rb_dictionary_stats_walk+0x50>
   151a0:	strd	r4, [sp, #-16]!
   151a4:	ldr	r4, [pc, r3]
   151a8:	str	r6, [sp, #8]
   151ac:	str	lr, [sp, #12]
   151b0:	cmp	r4, #0
   151b4:	beq	151dc <rb_dictionary_stats_walk+0x40>
   151b8:	mov	r6, r0
   151bc:	mov	r5, r1
   151c0:	mov	r2, r5
   151c4:	mov	r1, r6
   151c8:	ldr	r0, [r4]
   151cc:	bl	4974 <rb_dictionary_stats@plt>
   151d0:	ldr	r4, [r4, #8]
   151d4:	cmp	r4, #0
   151d8:	bne	151c0 <rb_dictionary_stats_walk+0x24>
   151dc:	ldrd	r4, [sp]
   151e0:	ldr	r6, [sp, #8]
   151e4:	add	sp, sp, #12
   151e8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ec:	.word	0x00031d80

000151f0 <stats_recurse>:
   151f0:	ldr	r3, [r2]
   151f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151f8:	strd	r6, [sp, #8]
   151fc:	str	r8, [sp, #16]
   15200:	str	lr, [sp, #20]
   15204:	cmp	r3, r1
   15208:	strlt	r1, [r2]
   1520c:	ldr	r3, [r0]
   15210:	cmn	r3, #1
   15214:	moveq	r5, r1
   15218:	beq	15254 <stats_recurse+0x64>
   1521c:	mov	r6, r2
   15220:	mov	r4, r0
   15224:	add	r8, r1, #1
   15228:	add	r7, r0, #64	; 0x40
   1522c:	mov	r5, #0
   15230:	ldr	r3, [r4, #4]!
   15234:	mov	r2, r6
   15238:	mov	r1, r8
   1523c:	subs	r0, r3, #0
   15240:	beq	1524c <stats_recurse+0x5c>
   15244:	bl	151f0 <stats_recurse>
   15248:	add	r5, r5, r0
   1524c:	cmp	r4, r7
   15250:	bne	15230 <stats_recurse+0x40>
   15254:	mov	r0, r5
   15258:	ldrd	r4, [sp]
   1525c:	ldrd	r6, [sp, #8]
   15260:	ldr	r8, [sp, #16]
   15264:	add	sp, sp, #20
   15268:	pop	{pc}		; (ldr pc, [sp], #4)

0001526c <rb_radixtree_create>:
   1526c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15270:	ldr	r5, [pc, #196]	; 1533c <rb_radixtree_create+0xd0>
   15274:	strd	r6, [sp, #8]
   15278:	mov	r6, r0
   1527c:	mov	r7, r1
   15280:	mov	r0, #1
   15284:	mov	r1, #28
   15288:	str	r8, [sp, #16]
   1528c:	str	lr, [sp, #20]
   15290:	bl	45c0 <calloc@plt>
   15294:	subs	r4, r0, #0
   15298:	add	r5, pc, r5
   1529c:	beq	15338 <rb_radixtree_create+0xcc>
   152a0:	mov	r0, r6
   152a4:	str	r7, [r4]
   152a8:	bl	47c4 <strlen@plt>
   152ac:	add	r7, r0, #1
   152b0:	mov	r0, r7
   152b4:	bl	4980 <malloc@plt>
   152b8:	subs	r8, r0, #0
   152bc:	beq	15338 <rb_radixtree_create+0xcc>
   152c0:	mov	r2, r7
   152c4:	mov	r1, r6
   152c8:	bl	47e8 <memcpy@plt>
   152cc:	ldr	r3, [pc, #108]	; 15340 <rb_radixtree_create+0xd4>
   152d0:	mov	r2, #0
   152d4:	add	r1, r4, #16
   152d8:	str	r2, [r4, #4]
   152dc:	str	r8, [r4, #12]
   152e0:	str	r4, [r4, #16]
   152e4:	str	r2, [r4, #20]
   152e8:	ldr	r3, [r5, r3]
   152ec:	ldr	r2, [r3]
   152f0:	cmp	r2, #0
   152f4:	str	r2, [r4, #24]
   152f8:	strne	r1, [r2, #4]
   152fc:	beq	15328 <rb_radixtree_create+0xbc>
   15300:	ldr	r2, [r3, #8]
   15304:	mov	r0, r4
   15308:	ldrd	r4, [sp]
   1530c:	ldrd	r6, [sp, #8]
   15310:	add	r2, r2, #1
   15314:	ldr	r8, [sp, #16]
   15318:	add	sp, sp, #20
   1531c:	str	r1, [r3]
   15320:	str	r2, [r3, #8]
   15324:	pop	{pc}		; (ldr pc, [sp], #4)
   15328:	ldr	r2, [r3, #4]
   1532c:	cmp	r2, #0
   15330:	streq	r1, [r3, #4]
   15334:	b	15300 <rb_radixtree_create+0x94>
   15338:	bl	495c <rb_outofmemory@plt>
   1533c:	.word	0x00013d60
   15340:	.word	0x000003f0

00015344 <rb_radixtree_foreach>:
   15344:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15348:	strd	r6, [sp, #8]
   1534c:	str	r8, [sp, #16]
   15350:	ldr	r8, [r0, #4]
   15354:	str	lr, [sp, #20]
   15358:	cmp	r8, #0
   1535c:	beq	15418 <rb_radixtree_foreach+0xd4>
   15360:	ldr	r3, [r8]
   15364:	mov	r7, r1
   15368:	cmn	r3, #1
   1536c:	movne	r6, r2
   15370:	movne	r4, #0
   15374:	beq	1542c <rb_radixtree_foreach+0xe8>
   15378:	add	ip, r8, r4, lsl #2
   1537c:	add	r5, r4, #1
   15380:	b	15388 <rb_radixtree_foreach+0x44>
   15384:	add	r5, r5, #1
   15388:	ldr	r3, [ip, #4]!
   1538c:	cmp	r5, #15
   15390:	mov	r4, r5
   15394:	movgt	r0, #0
   15398:	movle	r0, #1
   1539c:	cmp	r3, #0
   153a0:	movne	r0, #0
   153a4:	cmp	r0, #0
   153a8:	bne	15384 <rb_radixtree_foreach+0x40>
   153ac:	cmp	r3, #0
   153b0:	beq	153e4 <rb_radixtree_foreach+0xa0>
   153b4:	ldr	r2, [r3]
   153b8:	cmn	r2, #1
   153bc:	movne	r4, r0
   153c0:	beq	153cc <rb_radixtree_foreach+0x88>
   153c4:	mov	r8, r3
   153c8:	b	15378 <rb_radixtree_foreach+0x34>
   153cc:	cmp	r7, #0
   153d0:	beq	153e4 <rb_radixtree_foreach+0xa0>
   153d4:	mov	r2, r6
   153d8:	ldr	r1, [r3, #4]
   153dc:	ldr	r0, [r3, #8]
   153e0:	blx	r7
   153e4:	cmp	r5, #15
   153e8:	ble	15458 <rb_radixtree_foreach+0x114>
   153ec:	ldr	r3, [r8, #68]	; 0x44
   153f0:	ldrb	r4, [r8, #72]	; 0x48
   153f4:	cmp	r3, #0
   153f8:	beq	15418 <rb_radixtree_foreach+0xd4>
   153fc:	add	r4, r4, #1
   15400:	cmp	r4, #15
   15404:	ble	153c4 <rb_radixtree_foreach+0x80>
   15408:	ldrb	r4, [r3, #72]	; 0x48
   1540c:	ldr	r3, [r3, #68]	; 0x44
   15410:	cmp	r3, #0
   15414:	bne	153fc <rb_radixtree_foreach+0xb8>
   15418:	ldrd	r4, [sp]
   1541c:	ldrd	r6, [sp, #8]
   15420:	ldr	r8, [sp, #16]
   15424:	add	sp, sp, #20
   15428:	pop	{pc}		; (ldr pc, [sp], #4)
   1542c:	cmp	r1, #0
   15430:	beq	15418 <rb_radixtree_foreach+0xd4>
   15434:	mov	r3, r1
   15438:	ldrd	r4, [sp]
   1543c:	ldr	r1, [r8, #4]
   15440:	ldr	r0, [r8, #8]
   15444:	ldrd	r6, [sp, #8]
   15448:	ldr	r8, [sp, #16]
   1544c:	ldr	lr, [sp, #20]
   15450:	add	sp, sp, #24
   15454:	bx	r3
   15458:	mov	r3, r8
   1545c:	b	153c4 <rb_radixtree_foreach+0x80>

00015460 <rb_radixtree_search>:
   15460:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15464:	ldr	r5, [r0, #4]
   15468:	strd	r6, [sp, #8]
   1546c:	str	r8, [sp, #16]
   15470:	str	lr, [sp, #20]
   15474:	cmp	r5, #0
   15478:	beq	15574 <rb_radixtree_search+0x114>
   1547c:	ldr	r3, [r5]
   15480:	mov	r8, r1
   15484:	cmn	r3, #1
   15488:	movne	r7, r2
   1548c:	movne	r4, #0
   15490:	beq	15548 <rb_radixtree_search+0xe8>
   15494:	add	r2, r5, r4, lsl #2
   15498:	add	r6, r4, #1
   1549c:	b	154a4 <rb_radixtree_search+0x44>
   154a0:	add	r6, r6, #1
   154a4:	ldr	r0, [r2, #4]!
   154a8:	cmp	r6, #15
   154ac:	mov	r4, r6
   154b0:	movgt	r3, #0
   154b4:	movle	r3, #1
   154b8:	cmp	r0, #0
   154bc:	movne	r3, #0
   154c0:	cmp	r3, #0
   154c4:	bne	154a0 <rb_radixtree_search+0x40>
   154c8:	cmp	r0, #0
   154cc:	beq	15504 <rb_radixtree_search+0xa4>
   154d0:	ldr	r2, [r0]
   154d4:	cmn	r2, #1
   154d8:	movne	r5, r0
   154dc:	movne	r4, r3
   154e0:	bne	15494 <rb_radixtree_search+0x34>
   154e4:	cmp	r8, #0
   154e8:	beq	15504 <rb_radixtree_search+0xa4>
   154ec:	mov	r2, r7
   154f0:	ldr	r1, [r0, #4]
   154f4:	ldr	r0, [r0, #8]
   154f8:	blx	r8
   154fc:	cmp	r0, #0
   15500:	bne	15534 <rb_radixtree_search+0xd4>
   15504:	cmp	r6, #15
   15508:	bgt	1551c <rb_radixtree_search+0xbc>
   1550c:	b	15494 <rb_radixtree_search+0x34>
   15510:	add	r4, r4, #1
   15514:	cmp	r4, #15
   15518:	ble	15494 <rb_radixtree_search+0x34>
   1551c:	ldrb	r4, [r5, #72]	; 0x48
   15520:	ldr	r5, [r5, #68]	; 0x44
   15524:	cmp	r5, #0
   15528:	bne	15510 <rb_radixtree_search+0xb0>
   1552c:	b	15494 <rb_radixtree_search+0x34>
   15530:	mov	r0, r1
   15534:	ldrd	r4, [sp]
   15538:	ldrd	r6, [sp, #8]
   1553c:	ldr	r8, [sp, #16]
   15540:	add	sp, sp, #20
   15544:	pop	{pc}		; (ldr pc, [sp], #4)
   15548:	cmp	r1, #0
   1554c:	beq	15530 <rb_radixtree_search+0xd0>
   15550:	mov	r3, r1
   15554:	ldr	r1, [r5, #4]
   15558:	ldr	r0, [r5, #8]
   1555c:	ldrd	r4, [sp]
   15560:	ldrd	r6, [sp, #8]
   15564:	ldr	r8, [sp, #16]
   15568:	ldr	lr, [sp, #20]
   1556c:	add	sp, sp, #24
   15570:	bx	r3
   15574:	mov	r0, r5
   15578:	b	15534 <rb_radixtree_search+0xd4>

0001557c <rb_radixtree_foreach_cur>:
   1557c:	cmp	r0, #0
   15580:	beq	15590 <rb_radixtree_foreach_cur+0x14>
   15584:	ldr	r0, [r1, #8]
   15588:	cmp	r0, #0
   1558c:	ldrne	r0, [r0, #4]
   15590:	bx	lr

00015594 <rb_radixtree_foreach_next>:
   15594:	cmp	r0, #0
   15598:	bxeq	lr
   1559c:	ldr	r3, [r1, #8]
   155a0:	cmp	r3, #0
   155a4:	bxeq	lr
   155a8:	strd	r4, [sp, #-16]!
   155ac:	str	r6, [sp, #8]
   155b0:	ldr	r6, [r1, #12]
   155b4:	str	lr, [sp, #12]
   155b8:	cmp	r6, #0
   155bc:	str	r6, [r1, #8]
   155c0:	beq	15664 <rb_radixtree_foreach_next+0xd0>
   155c4:	ldr	r0, [r6, #12]
   155c8:	mov	r5, r1
   155cc:	ldrb	r3, [r6, #16]
   155d0:	cmp	r0, #0
   155d4:	beq	1565c <rb_radixtree_foreach_next+0xc8>
   155d8:	add	lr, r0, r3, lsl #2
   155dc:	add	ip, r3, #1
   155e0:	b	155e8 <rb_radixtree_foreach_next+0x54>
   155e4:	add	ip, ip, #1
   155e8:	ldr	r4, [lr, #4]!
   155ec:	cmp	ip, #15
   155f0:	mov	r3, ip
   155f4:	movgt	r2, #0
   155f8:	movle	r2, #1
   155fc:	cmp	r4, #0
   15600:	movne	r2, #0
   15604:	cmp	r2, #0
   15608:	bne	155e4 <rb_radixtree_foreach_next+0x50>
   1560c:	cmp	r4, #0
   15610:	beq	15634 <rb_radixtree_foreach_next+0xa0>
   15614:	ldr	lr, [r4]
   15618:	cmn	lr, #1
   1561c:	movne	r3, r2
   15620:	beq	1562c <rb_radixtree_foreach_next+0x98>
   15624:	mov	r0, r4
   15628:	b	155d8 <rb_radixtree_foreach_next+0x44>
   1562c:	cmp	r6, r4
   15630:	bne	15674 <rb_radixtree_foreach_next+0xe0>
   15634:	cmp	ip, #15
   15638:	bgt	1564c <rb_radixtree_foreach_next+0xb8>
   1563c:	b	15690 <rb_radixtree_foreach_next+0xfc>
   15640:	add	r3, r3, #1
   15644:	cmp	r3, #15
   15648:	ble	155d8 <rb_radixtree_foreach_next+0x44>
   1564c:	ldrb	r3, [r0, #72]	; 0x48
   15650:	ldr	r0, [r0, #68]	; 0x44
   15654:	cmp	r0, #0
   15658:	bne	15640 <rb_radixtree_foreach_next+0xac>
   1565c:	mov	r3, #0
   15660:	str	r3, [r5, #12]
   15664:	ldrd	r4, [sp]
   15668:	ldr	r6, [sp, #8]
   1566c:	add	sp, sp, #12
   15670:	pop	{pc}		; (ldr pc, [sp], #4)
   15674:	ldr	r0, [r4, #8]
   15678:	ldr	r1, [r6, #8]
   1567c:	bl	4cb0 <strcmp@plt>
   15680:	cmp	r0, #0
   15684:	strge	r4, [r5, #12]
   15688:	bge	15664 <rb_radixtree_foreach_next+0xd0>
   1568c:	b	1565c <rb_radixtree_foreach_next+0xc8>
   15690:	mov	r4, r0
   15694:	b	15624 <rb_radixtree_foreach_next+0x90>

00015698 <rb_radixtree_foreach_start>:
   15698:	cmp	r0, #0
   1569c:	bxeq	lr
   156a0:	str	r4, [sp, #-8]!
   156a4:	mov	r4, r1
   156a8:	ldr	ip, [r0, #4]
   156ac:	str	lr, [sp, #4]
   156b0:	cmp	ip, #0
   156b4:	beq	15708 <rb_radixtree_foreach_start+0x70>
   156b8:	mov	r1, ip
   156bc:	ldr	lr, [r1], #64	; 0x40
   156c0:	cmn	lr, #1
   156c4:	beq	156ec <rb_radixtree_foreach_start+0x54>
   156c8:	mov	r3, ip
   156cc:	b	156d8 <rb_radixtree_foreach_start+0x40>
   156d0:	cmp	r3, r1
   156d4:	beq	156c0 <rb_radixtree_foreach_start+0x28>
   156d8:	ldr	r2, [r3, #4]!
   156dc:	cmp	r2, #0
   156e0:	beq	156d0 <rb_radixtree_foreach_start+0x38>
   156e4:	mov	ip, r2
   156e8:	b	156b8 <rb_radixtree_foreach_start+0x20>
   156ec:	mov	r1, r4
   156f0:	ldr	lr, [sp, #4]
   156f4:	str	ip, [r4, #8]
   156f8:	str	ip, [r4, #12]
   156fc:	ldr	r4, [sp]
   15700:	add	sp, sp, #8
   15704:	b	441c <rb_radixtree_foreach_next@plt>
   15708:	ldr	r4, [sp]
   1570c:	add	sp, sp, #4
   15710:	str	ip, [r1, #8]
   15714:	str	ip, [r1, #12]
   15718:	pop	{pc}		; (ldr pc, [sp], #4)

0001571c <rb_radixtree_elem_find>:
   1571c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15720:	mov	r4, r0
   15724:	mov	r0, r1
   15728:	strd	r6, [sp, #8]
   1572c:	mov	r6, r2
   15730:	strd	r8, [sp, #16]
   15734:	mov	r8, r1
   15738:	str	sl, [sp, #24]
   1573c:	str	lr, [sp, #28]
   15740:	sub	sp, sp, #256	; 0x100
   15744:	bl	47c4 <strlen@plt>
   15748:	ldr	r9, [r4]
   1574c:	mov	r5, r0
   15750:	cmp	r9, #0
   15754:	beq	157e4 <rb_radixtree_elem_find+0xc8>
   15758:	cmp	r0, #255	; 0xff
   1575c:	bls	157c0 <rb_radixtree_elem_find+0xa4>
   15760:	add	sl, r0, #1
   15764:	mov	r0, sl
   15768:	bl	4980 <malloc@plt>
   1576c:	subs	r7, r0, #0
   15770:	beq	15864 <rb_radixtree_elem_find+0x148>
   15774:	mov	r1, r8
   15778:	mov	r2, sl
   1577c:	bl	47e8 <memcpy@plt>
   15780:	mov	r0, r7
   15784:	blx	r9
   15788:	ldr	r4, [r4, #4]
   1578c:	cmp	r4, #0
   15790:	movne	r8, r7
   15794:	bne	15828 <rb_radixtree_elem_find+0x10c>
   15798:	mov	r0, r7
   1579c:	bl	46d4 <free@plt>
   157a0:	mov	r0, r4
   157a4:	add	sp, sp, #256	; 0x100
   157a8:	ldrd	r4, [sp]
   157ac:	ldrd	r6, [sp, #8]
   157b0:	ldrd	r8, [sp, #16]
   157b4:	ldr	sl, [sp, #24]
   157b8:	add	sp, sp, #28
   157bc:	pop	{pc}		; (ldr pc, [sp], #4)
   157c0:	mov	r7, sp
   157c4:	mov	r1, r8
   157c8:	mov	r0, r7
   157cc:	mov	r2, #256	; 0x100
   157d0:	bl	4680 <rb_strlcpy@plt>
   157d4:	mov	r0, r7
   157d8:	ldr	r3, [r4]
   157dc:	mov	r8, r7
   157e0:	blx	r3
   157e4:	ldr	r4, [r4, #4]
   157e8:	cmp	r4, #0
   157ec:	movne	r7, #0
   157f0:	bne	15828 <rb_radixtree_elem_find+0x10c>
   157f4:	b	157a0 <rb_radixtree_elem_find+0x84>
   157f8:	add	r2, r3, r3, lsr #31
   157fc:	cmp	r5, r2, asr #1
   15800:	movle	r3, #0
   15804:	ble	15818 <rb_radixtree_elem_find+0xfc>
   15808:	tst	r3, #1
   1580c:	ldrb	r3, [r8, r2, asr #1]
   15810:	asreq	r3, r3, #4
   15814:	and	r3, r3, #15
   15818:	add	r4, r4, r3, lsl #2
   1581c:	ldr	r4, [r4, #4]
   15820:	cmp	r4, #0
   15824:	beq	15850 <rb_radixtree_elem_find+0x134>
   15828:	ldr	r3, [r4]
   1582c:	cmn	r3, #1
   15830:	bne	157f8 <rb_radixtree_elem_find+0xdc>
   15834:	cmp	r6, #0
   15838:	bne	15850 <rb_radixtree_elem_find+0x134>
   1583c:	mov	r1, r8
   15840:	ldr	r0, [r4, #8]
   15844:	bl	4cb0 <strcmp@plt>
   15848:	cmp	r0, #0
   1584c:	movne	r4, #0
   15850:	cmp	r7, #0
   15854:	beq	157a0 <rb_radixtree_elem_find+0x84>
   15858:	mov	r0, r7
   1585c:	bl	46d4 <free@plt>
   15860:	b	157a0 <rb_radixtree_elem_find+0x84>
   15864:	bl	495c <rb_outofmemory@plt>

00015868 <rb_radixtree_foreach_start_from>:
   15868:	cmp	r2, #0
   1586c:	beq	158b8 <rb_radixtree_foreach_start_from+0x50>
   15870:	mov	r3, #0
   15874:	strd	r4, [sp, #-16]!
   15878:	mov	r4, r1
   1587c:	mov	r1, r2
   15880:	mov	r2, #1
   15884:	str	r6, [sp, #8]
   15888:	str	lr, [sp, #12]
   1588c:	mov	r5, r0
   15890:	str	r3, [r4, #8]
   15894:	bl	4b48 <rb_radixtree_elem_find@plt>
   15898:	mov	r1, r4
   1589c:	ldr	r6, [sp, #8]
   158a0:	ldr	lr, [sp, #12]
   158a4:	str	r0, [r4, #12]
   158a8:	mov	r0, r5
   158ac:	ldrd	r4, [sp]
   158b0:	add	sp, sp, #16
   158b4:	b	441c <rb_radixtree_foreach_next@plt>
   158b8:	b	43e0 <rb_radixtree_foreach_start@plt>

000158bc <rb_radixtree_elem_add>:
   158bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158c0:	mov	r4, r1
   158c4:	strd	r6, [sp, #8]
   158c8:	strd	r8, [sp, #16]
   158cc:	strd	sl, [sp, #24]
   158d0:	mov	fp, r0
   158d4:	mov	r0, r1
   158d8:	str	lr, [sp, #32]
   158dc:	sub	sp, sp, #20
   158e0:	str	r2, [sp, #4]
   158e4:	bl	47c4 <strlen@plt>
   158e8:	add	r5, r0, #1
   158ec:	mov	r6, r0
   158f0:	mov	r0, r5
   158f4:	bl	4980 <malloc@plt>
   158f8:	subs	sl, r0, #0
   158fc:	beq	15b88 <rb_radixtree_elem_add+0x2cc>
   15900:	mov	r2, r5
   15904:	mov	r1, r4
   15908:	bl	47e8 <memcpy@plt>
   1590c:	ldr	r3, [fp]
   15910:	cmp	r3, #0
   15914:	beq	15920 <rb_radixtree_elem_add+0x64>
   15918:	mov	r0, sl
   1591c:	blx	r3
   15920:	ldr	r4, [fp, #4]
   15924:	cmp	r4, #0
   15928:	str	r4, [sp, #8]
   1592c:	beq	15be8 <rb_radixtree_elem_add+0x32c>
   15930:	ldr	r3, [r4]
   15934:	cmn	r3, #1
   15938:	bne	15950 <rb_radixtree_elem_add+0x94>
   1593c:	b	159b8 <rb_radixtree_elem_add+0xfc>
   15940:	ldr	r3, [r5]
   15944:	cmn	r3, #1
   15948:	beq	159c4 <rb_radixtree_elem_add+0x108>
   1594c:	mov	r4, r5
   15950:	add	r2, r3, r3, lsr #31
   15954:	cmp	r6, r2, asr #1
   15958:	movle	r7, #0
   1595c:	ble	15970 <rb_radixtree_elem_add+0xb4>
   15960:	ldrb	r7, [sl, r2, asr #1]
   15964:	tst	r3, #1
   15968:	asreq	r7, r7, #4
   1596c:	and	r7, r7, #15
   15970:	add	r3, r4, r7, lsl #2
   15974:	ldr	r5, [r3, #4]
   15978:	cmp	r5, #0
   1597c:	bne	15940 <rb_radixtree_elem_add+0x84>
   15980:	mov	r5, r4
   15984:	mov	r1, r5
   15988:	ldr	r0, [r1], #64	; 0x40
   1598c:	cmn	r0, #1
   15990:	beq	15b80 <rb_radixtree_elem_add+0x2c4>
   15994:	mov	r3, r5
   15998:	b	159a4 <rb_radixtree_elem_add+0xe8>
   1599c:	cmp	r1, r3
   159a0:	beq	1598c <rb_radixtree_elem_add+0xd0>
   159a4:	ldr	r2, [r3, #4]!
   159a8:	cmp	r2, #0
   159ac:	beq	1599c <rb_radixtree_elem_add+0xe0>
   159b0:	mov	r5, r2
   159b4:	b	15984 <rb_radixtree_elem_add+0xc8>
   159b8:	ldr	r5, [sp, #8]
   159bc:	mov	r7, #18
   159c0:	mov	r4, #0
   159c4:	mov	r1, sl
   159c8:	ldr	r3, [r5, #8]
   159cc:	mov	r0, r3
   159d0:	str	r3, [sp, #12]
   159d4:	bl	4cb0 <strcmp@plt>
   159d8:	subs	r6, r0, #0
   159dc:	ldr	r3, [sp, #12]
   159e0:	beq	15c38 <rb_radixtree_elem_add+0x37c>
   159e4:	mov	r6, #0
   159e8:	mov	r2, sl
   159ec:	ldrb	r1, [sl]
   159f0:	mov	r9, r6
   159f4:	mov	r8, #4
   159f8:	b	15a18 <rb_radixtree_elem_add+0x15c>
   159fc:	add	r6, r6, #1
   15a00:	ldrb	r1, [sl, r6, asr #1]
   15a04:	asr	r9, r6, #1
   15a08:	tst	r6, #1
   15a0c:	movne	r8, r0
   15a10:	moveq	r8, #4
   15a14:	add	r2, sl, r9
   15a18:	ldrb	r0, [r3, r9]
   15a1c:	asr	r1, r1, r8
   15a20:	eor	r1, r1, r0, asr r8
   15a24:	ands	r0, r1, #15
   15a28:	beq	159fc <rb_radixtree_elem_add+0x140>
   15a2c:	cmp	r4, #0
   15a30:	beq	15a60 <rb_radixtree_elem_add+0x1a4>
   15a34:	ldr	r3, [r4]
   15a38:	cmp	r6, r3
   15a3c:	blt	15a50 <rb_radixtree_elem_add+0x194>
   15a40:	b	15b74 <rb_radixtree_elem_add+0x2b8>
   15a44:	ldr	r3, [r4]
   15a48:	cmp	r3, r6
   15a4c:	ble	15b74 <rb_radixtree_elem_add+0x2b8>
   15a50:	ldrb	r7, [r4, #72]	; 0x48
   15a54:	ldr	r4, [r4, #68]	; 0x44
   15a58:	cmp	r4, #0
   15a5c:	bne	15a44 <rb_radixtree_elem_add+0x188>
   15a60:	mov	r1, #76	; 0x4c
   15a64:	mov	r0, #1
   15a68:	str	r2, [sp, #12]
   15a6c:	bl	45c0 <calloc@plt>
   15a70:	cmp	r0, #0
   15a74:	beq	15b88 <rb_radixtree_elem_add+0x2cc>
   15a78:	ldr	r2, [sp, #12]
   15a7c:	mov	r3, r0
   15a80:	add	ip, r0, #64	; 0x40
   15a84:	mov	r1, #0
   15a88:	str	r6, [r0]
   15a8c:	str	r4, [r0, #68]	; 0x44
   15a90:	strb	r7, [r0, #72]	; 0x48
   15a94:	str	r1, [r3, #4]!
   15a98:	cmp	ip, r3
   15a9c:	bne	15a94 <rb_radixtree_elem_add+0x1d8>
   15aa0:	ldr	r3, [r5, #8]
   15aa4:	cmp	r4, #0
   15aa8:	ldrb	r3, [r3, r9]
   15aac:	asr	r3, r3, r8
   15ab0:	and	r3, r3, #15
   15ab4:	beq	15ba8 <rb_radixtree_elem_add+0x2ec>
   15ab8:	add	r7, r4, r7, lsl #2
   15abc:	add	r3, r0, r3, lsl #2
   15ac0:	ldr	r1, [r7, #4]
   15ac4:	ldr	ip, [r1]
   15ac8:	str	r1, [r3, #4]
   15acc:	ldr	r3, [r5, #8]
   15ad0:	cmn	ip, #1
   15ad4:	beq	15b8c <rb_radixtree_elem_add+0x2d0>
   15ad8:	str	r0, [r1, #68]	; 0x44
   15adc:	ldrb	r3, [r3, r9]
   15ae0:	asr	r3, r3, r8
   15ae4:	and	r3, r3, #15
   15ae8:	strb	r3, [r1, #72]	; 0x48
   15aec:	mov	r4, r0
   15af0:	str	r0, [r7, #4]
   15af4:	ldrb	r5, [r2]
   15af8:	mov	r1, #20
   15afc:	mov	r0, #1
   15b00:	bl	45c0 <calloc@plt>
   15b04:	cmp	r0, #0
   15b08:	asr	r5, r5, r8
   15b0c:	and	r5, r5, #15
   15b10:	beq	15b88 <rb_radixtree_elem_add+0x2cc>
   15b14:	add	r3, r4, r5, lsl #2
   15b18:	mvn	r1, #0
   15b1c:	ldr	r2, [fp, #8]
   15b20:	str	r0, [r3, #4]
   15b24:	str	r1, [r0]
   15b28:	ldr	r0, [sp, #4]
   15b2c:	add	r2, r2, #1
   15b30:	ldr	r1, [r3, #4]
   15b34:	str	r0, [r1, #4]
   15b38:	ldr	r1, [r3, #4]
   15b3c:	str	sl, [r1, #8]
   15b40:	ldr	r1, [r3, #4]
   15b44:	str	r4, [r1, #12]
   15b48:	ldr	r1, [r3, #4]
   15b4c:	strb	r5, [r1, #16]
   15b50:	ldr	r0, [r3, #4]
   15b54:	str	r2, [fp, #8]
   15b58:	add	sp, sp, #20
   15b5c:	ldrd	r4, [sp]
   15b60:	ldrd	r6, [sp, #8]
   15b64:	ldrd	r8, [sp, #16]
   15b68:	ldrd	sl, [sp, #24]
   15b6c:	add	sp, sp, #32
   15b70:	pop	{pc}		; (ldr pc, [sp], #4)
   15b74:	cmp	r6, r3
   15b78:	bgt	15a60 <rb_radixtree_elem_add+0x1a4>
   15b7c:	b	15af4 <rb_radixtree_elem_add+0x238>
   15b80:	ldr	r3, [r5, #8]
   15b84:	b	159e4 <rb_radixtree_elem_add+0x128>
   15b88:	bl	495c <rb_outofmemory@plt>
   15b8c:	str	r0, [r1, #12]
   15b90:	ldrb	r3, [r3, r9]
   15b94:	ldr	r1, [r7, #4]
   15b98:	asr	r3, r3, r8
   15b9c:	and	r3, r3, #15
   15ba0:	strb	r3, [r1, #16]
   15ba4:	b	15aec <rb_radixtree_elem_add+0x230>
   15ba8:	ldr	ip, [sp, #8]
   15bac:	add	r3, r0, r3, lsl #2
   15bb0:	ldr	r1, [ip]
   15bb4:	str	ip, [r3, #4]
   15bb8:	ldr	r3, [r5, #8]
   15bbc:	cmn	r1, #1
   15bc0:	beq	15c48 <rb_radixtree_elem_add+0x38c>
   15bc4:	ldr	r1, [sp, #8]
   15bc8:	str	r0, [r1, #68]	; 0x44
   15bcc:	ldrb	r3, [r3, r9]
   15bd0:	asr	r3, r3, r8
   15bd4:	and	r3, r3, #15
   15bd8:	strb	r3, [r1, #72]	; 0x48
   15bdc:	mov	r4, r0
   15be0:	str	r0, [fp, #4]
   15be4:	b	15af4 <rb_radixtree_elem_add+0x238>
   15be8:	mov	r1, #20
   15bec:	mov	r0, #1
   15bf0:	bl	45c0 <calloc@plt>
   15bf4:	subs	r3, r0, #0
   15bf8:	beq	15b88 <rb_radixtree_elem_add+0x2cc>
   15bfc:	mvn	r0, #0
   15c00:	ldr	r2, [fp, #8]
   15c04:	mov	r1, #18
   15c08:	str	r3, [fp, #4]
   15c0c:	str	r0, [r3]
   15c10:	ldr	r0, [sp, #4]
   15c14:	ldr	ip, [sp, #8]
   15c18:	add	r2, r2, #1
   15c1c:	str	r2, [fp, #8]
   15c20:	str	r0, [r3, #4]
   15c24:	mov	r0, r3
   15c28:	str	sl, [r3, #8]
   15c2c:	str	ip, [r3, #12]
   15c30:	strb	r1, [r3, #16]
   15c34:	b	15b58 <rb_radixtree_elem_add+0x29c>
   15c38:	mov	r0, sl
   15c3c:	bl	46d4 <free@plt>
   15c40:	mov	r0, r6
   15c44:	b	15b58 <rb_radixtree_elem_add+0x29c>
   15c48:	str	r0, [ip, #12]
   15c4c:	ldrb	r3, [r3, r9]
   15c50:	asr	r3, r3, r8
   15c54:	and	r3, r3, #15
   15c58:	strb	r3, [ip, #16]
   15c5c:	b	15bdc <rb_radixtree_elem_add+0x320>

00015c60 <rb_radixtree_add>:
   15c60:	str	r4, [sp, #-8]!
   15c64:	str	lr, [sp, #4]
   15c68:	bl	46f8 <rb_radixtree_elem_add@plt>
   15c6c:	adds	r0, r0, #0
   15c70:	ldr	r4, [sp]
   15c74:	add	sp, sp, #4
   15c78:	movne	r0, #1
   15c7c:	pop	{pc}		; (ldr pc, [sp], #4)

00015c80 <rb_radixtree_elem_delete>:
   15c80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c84:	mov	r5, r0
   15c88:	ldr	r0, [r1, #8]
   15c8c:	ldr	r4, [r1, #12]
   15c90:	strd	r6, [sp, #8]
   15c94:	mov	r6, r1
   15c98:	ldrb	r7, [r1, #16]
   15c9c:	cmp	r0, #0
   15ca0:	str	r8, [sp, #16]
   15ca4:	str	lr, [sp, #20]
   15ca8:	beq	15cb0 <rb_radixtree_elem_delete+0x30>
   15cac:	bl	46d4 <free@plt>
   15cb0:	mov	r0, r6
   15cb4:	bl	46d4 <free@plt>
   15cb8:	cmp	r4, #0
   15cbc:	streq	r4, [r5, #4]
   15cc0:	beq	15d6c <rb_radixtree_elem_delete+0xec>
   15cc4:	add	r7, r4, r7, lsl #2
   15cc8:	mov	r2, #0
   15ccc:	mvn	r0, #0
   15cd0:	mov	r3, r2
   15cd4:	str	r2, [r7, #4]
   15cd8:	b	15ce8 <rb_radixtree_elem_delete+0x68>
   15cdc:	cmp	r2, #16
   15ce0:	mov	r3, r2
   15ce4:	beq	15d24 <rb_radixtree_elem_delete+0xa4>
   15ce8:	add	r1, r4, r3, lsl #2
   15cec:	add	r2, r3, #1
   15cf0:	ldr	r1, [r1, #4]
   15cf4:	cmp	r1, #0
   15cf8:	beq	15cdc <rb_radixtree_elem_delete+0x5c>
   15cfc:	cmn	r0, #1
   15d00:	mov	r0, r3
   15d04:	beq	15cdc <rb_radixtree_elem_delete+0x5c>
   15d08:	cmp	r2, #16
   15d0c:	mvn	r0, #1
   15d10:	beq	15d6c <rb_radixtree_elem_delete+0xec>
   15d14:	add	r2, r3, #2
   15d18:	cmp	r2, #16
   15d1c:	mov	r3, r2
   15d20:	bne	15ce8 <rb_radixtree_elem_delete+0x68>
   15d24:	cmp	r0, #0
   15d28:	blt	15d6c <rb_radixtree_elem_delete+0xec>
   15d2c:	ldr	r2, [r4, #68]	; 0x44
   15d30:	add	r0, r4, r0, lsl #2
   15d34:	ldrb	r1, [r4, #72]	; 0x48
   15d38:	ldr	r3, [r0, #4]
   15d3c:	cmp	r2, #0
   15d40:	addne	r0, r2, r1, lsl #2
   15d44:	streq	r3, [r5, #4]
   15d48:	strne	r3, [r0, #4]
   15d4c:	ldr	r0, [r3]
   15d50:	cmn	r0, #1
   15d54:	mov	r0, r4
   15d58:	streq	r2, [r3, #12]
   15d5c:	strbeq	r1, [r3, #16]
   15d60:	strne	r2, [r3, #68]	; 0x44
   15d64:	strbne	r1, [r3, #72]	; 0x48
   15d68:	bl	46d4 <free@plt>
   15d6c:	ldr	r3, [r5, #8]
   15d70:	ldrd	r6, [sp, #8]
   15d74:	ldr	r8, [sp, #16]
   15d78:	sub	r3, r3, #1
   15d7c:	cmp	r3, #0
   15d80:	str	r3, [r5, #8]
   15d84:	streq	r3, [r5, #4]
   15d88:	ldrd	r4, [sp]
   15d8c:	add	sp, sp, #20
   15d90:	pop	{pc}		; (ldr pc, [sp], #4)

00015d94 <rb_radixtree_delete>:
   15d94:	mov	r2, #0
   15d98:	str	r4, [sp, #-8]!
   15d9c:	mov	r4, r0
   15da0:	str	lr, [sp, #4]
   15da4:	bl	4b48 <rb_radixtree_elem_find@plt>
   15da8:	subs	r3, r0, #0
   15dac:	moveq	r4, r3
   15db0:	beq	15dc4 <rb_radixtree_delete+0x30>
   15db4:	mov	r0, r4
   15db8:	mov	r1, r3
   15dbc:	ldr	r4, [r3, #4]
   15dc0:	bl	4380 <rb_radixtree_elem_delete@plt>
   15dc4:	mov	r0, r4
   15dc8:	ldr	r4, [sp]
   15dcc:	add	sp, sp, #4
   15dd0:	pop	{pc}		; (ldr pc, [sp], #4)

00015dd4 <rb_radixtree_destroy>:
   15dd4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15dd8:	mov	r4, r0
   15ddc:	strd	r6, [sp, #8]
   15de0:	mov	r7, r1
   15de4:	strd	r8, [sp, #16]
   15de8:	mov	r8, r2
   15dec:	ldr	r9, [pc, #232]	; 15edc <rb_radixtree_destroy+0x108>
   15df0:	str	lr, [sp, #24]
   15df4:	sub	sp, sp, #44	; 0x2c
   15df8:	mov	r6, sp
   15dfc:	mov	r1, r6
   15e00:	add	r9, pc, r9
   15e04:	bl	43e0 <rb_radixtree_foreach_start@plt>
   15e08:	b	15e44 <rb_radixtree_destroy+0x70>
   15e0c:	ldr	r5, [sp, #8]
   15e10:	cmp	r7, #0
   15e14:	ldr	r3, [r5, #8]
   15e18:	beq	15e2c <rb_radixtree_destroy+0x58>
   15e1c:	mov	r0, r3
   15e20:	ldr	r1, [r5, #4]
   15e24:	blx	r7
   15e28:	ldr	r3, [r5, #8]
   15e2c:	mov	r1, r3
   15e30:	mov	r0, r4
   15e34:	bl	4c98 <rb_radixtree_delete@plt>
   15e38:	mov	r1, r6
   15e3c:	mov	r0, r4
   15e40:	bl	441c <rb_radixtree_foreach_next@plt>
   15e44:	mov	r1, r6
   15e48:	mov	r0, r4
   15e4c:	bl	4788 <rb_radixtree_foreach_cur@plt>
   15e50:	cmp	r0, #0
   15e54:	mov	r2, r8
   15e58:	bne	15e0c <rb_radixtree_destroy+0x38>
   15e5c:	ldr	r1, [pc, #124]	; 15ee0 <rb_radixtree_destroy+0x10c>
   15e60:	ldr	r2, [r4, #24]
   15e64:	ldr	r3, [r4, #20]
   15e68:	cmp	r2, #0
   15e6c:	beq	15ed0 <rb_radixtree_destroy+0xfc>
   15e70:	str	r3, [r2, #4]
   15e74:	ldr	r1, [r9, r1]
   15e78:	ldr	r3, [r4, #20]
   15e7c:	cmp	r3, #0
   15e80:	ldr	r0, [r4, #12]
   15e84:	strne	r2, [r3, #8]
   15e88:	ldr	r3, [r1, #8]
   15e8c:	streq	r2, [r1]
   15e90:	mov	r2, #0
   15e94:	cmp	r0, r2
   15e98:	str	r2, [r4, #20]
   15e9c:	str	r2, [r4, #24]
   15ea0:	sub	r3, r3, #1
   15ea4:	str	r3, [r1, #8]
   15ea8:	beq	15eb0 <rb_radixtree_destroy+0xdc>
   15eac:	bl	46d4 <free@plt>
   15eb0:	mov	r0, r4
   15eb4:	add	sp, sp, #44	; 0x2c
   15eb8:	ldrd	r4, [sp]
   15ebc:	ldrd	r6, [sp, #8]
   15ec0:	ldrd	r8, [sp, #16]
   15ec4:	ldr	lr, [sp, #24]
   15ec8:	add	sp, sp, #28
   15ecc:	b	46d4 <free@plt>
   15ed0:	ldr	r1, [r9, r1]
   15ed4:	str	r3, [r1, #4]
   15ed8:	b	15e7c <rb_radixtree_destroy+0xa8>
   15edc:	.word	0x000131f8
   15ee0:	.word	0x000003f0

00015ee4 <rb_radixtree_retrieve>:
   15ee4:	mov	r2, #0
   15ee8:	str	r4, [sp, #-8]!
   15eec:	str	lr, [sp, #4]
   15ef0:	bl	4b48 <rb_radixtree_elem_find@plt>
   15ef4:	cmp	r0, #0
   15ef8:	ldr	r4, [sp]
   15efc:	add	sp, sp, #4
   15f00:	ldrne	r0, [r0, #4]
   15f04:	pop	{pc}		; (ldr pc, [sp], #4)

00015f08 <rb_radixtree_elem_get_key>:
   15f08:	ldr	r0, [r0, #8]
   15f0c:	bx	lr

00015f10 <rb_radixtree_elem_set_data>:
   15f10:	str	r1, [r0, #4]
   15f14:	bx	lr

00015f18 <rb_radixtree_elem_get_data>:
   15f18:	ldr	r0, [r0, #4]
   15f1c:	bx	lr

00015f20 <rb_radixtree_size>:
   15f20:	ldr	r0, [r0, #8]
   15f24:	bx	lr

00015f28 <rb_radixtree_stats>:
   15f28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f2c:	mov	r4, r0
   15f30:	mov	r3, #0
   15f34:	ldr	r0, [r0, #8]
   15f38:	strd	r6, [sp, #8]
   15f3c:	mov	r6, r1
   15f40:	mov	r7, r2
   15f44:	str	r8, [sp, #16]
   15f48:	str	lr, [sp, #20]
   15f4c:	sub	sp, sp, #288	; 0x120
   15f50:	cmp	r0, r3
   15f54:	str	r3, [sp, #28]
   15f58:	beq	15fd8 <rb_radixtree_stats+0xb0>
   15f5c:	mov	r1, r3
   15f60:	add	r2, sp, #28
   15f64:	ldr	r0, [r4, #4]
   15f68:	bl	151f0 <stats_recurse>
   15f6c:	ldr	r8, [r4, #8]
   15f70:	mov	ip, r0
   15f74:	add	r5, sp, #32
   15f78:	mov	r0, r5
   15f7c:	mov	r1, #256	; 0x100
   15f80:	ldr	lr, [pc, #148]	; 1601c <rb_radixtree_stats+0xf4>
   15f84:	str	ip, [sp, #8]
   15f88:	ldr	r3, [r4, #12]
   15f8c:	udiv	ip, ip, r8
   15f90:	ldr	r4, [sp, #28]
   15f94:	add	lr, pc, lr
   15f98:	mov	r2, lr
   15f9c:	stm	sp, {r2, r8}
   15fa0:	ldr	r2, [pc, #120]	; 16020 <rb_radixtree_stats+0xf8>
   15fa4:	str	ip, [sp, #12]
   15fa8:	add	r2, pc, r2
   15fac:	str	r4, [sp, #16]
   15fb0:	bl	4b84 <snprintf@plt>
   15fb4:	mov	r1, r7
   15fb8:	mov	r0, r5
   15fbc:	blx	r6
   15fc0:	add	sp, sp, #288	; 0x120
   15fc4:	ldrd	r4, [sp]
   15fc8:	ldrd	r6, [sp, #8]
   15fcc:	ldr	r8, [sp, #16]
   15fd0:	add	sp, sp, #20
   15fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd8:	ldr	r2, [pc, #68]	; 16024 <rb_radixtree_stats+0xfc>
   15fdc:	add	r5, sp, #32
   15fe0:	mov	r1, #256	; 0x100
   15fe4:	mov	r0, r5
   15fe8:	ldr	ip, [pc, #56]	; 16028 <rb_radixtree_stats+0x100>
   15fec:	ldr	r3, [r4, #12]
   15ff0:	add	r2, pc, r2
   15ff4:	str	r2, [sp, #4]
   15ff8:	add	ip, pc, ip
   15ffc:	str	r2, [sp, #8]
   16000:	str	r2, [sp, #12]
   16004:	str	r2, [sp, #16]
   16008:	ldr	r2, [pc, #28]	; 1602c <rb_radixtree_stats+0x104>
   1600c:	str	ip, [sp]
   16010:	add	r2, pc, r2
   16014:	bl	4b84 <snprintf@plt>
   16018:	b	15fb4 <rb_radixtree_stats+0x8c>
   1601c:	.word	0x00001ddc
   16020:	.word	0x00001d78
   16024:	.word	0x00000cc4
   16028:	.word	0x00001d78
   1602c:	.word	0x00001d3c

00016030 <rb_radixtree_stats_walk>:
   16030:	ldr	r3, [pc, #84]	; 1608c <rb_radixtree_stats_walk+0x5c>
   16034:	strd	r4, [sp, #-16]!
   16038:	ldr	r2, [pc, #80]	; 16090 <rb_radixtree_stats_walk+0x60>
   1603c:	str	r6, [sp, #8]
   16040:	str	lr, [sp, #12]
   16044:	add	r3, pc, r3
   16048:	ldr	r3, [r3, r2]
   1604c:	ldr	r4, [r3]
   16050:	cmp	r4, #0
   16054:	beq	1607c <rb_radixtree_stats_walk+0x4c>
   16058:	mov	r6, r0
   1605c:	mov	r5, r1
   16060:	mov	r2, r5
   16064:	mov	r1, r6
   16068:	ldr	r0, [r4]
   1606c:	bl	4620 <rb_radixtree_stats@plt>
   16070:	ldr	r4, [r4, #8]
   16074:	cmp	r4, #0
   16078:	bne	16060 <rb_radixtree_stats_walk+0x30>
   1607c:	ldrd	r4, [sp]
   16080:	ldr	r6, [sp, #8]
   16084:	add	sp, sp, #12
   16088:	pop	{pc}		; (ldr pc, [sp], #4)
   1608c:	.word	0x00012fb4
   16090:	.word	0x000003f0

Disassembly of section .fini:

00016094 <_fini>:
   16094:	push	{r3, lr}
   16098:	pop	{r3, pc}
