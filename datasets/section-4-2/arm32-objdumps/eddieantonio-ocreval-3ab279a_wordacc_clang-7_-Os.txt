
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010ad0 <.init>:
   10ad0:	push	{r3, lr}
   10ad4:	bl	10cd4 <__assert_fail@plt+0x4c>
   10ad8:	pop	{r3, pc}

Disassembly of section .plt:

00010adc <calloc@plt-0x14>:
   10adc:	push	{lr}		; (str lr, [sp, #-4]!)
   10ae0:	ldr	lr, [pc, #4]	; 10aec <calloc@plt-0x4>
   10ae4:	add	lr, pc, lr
   10ae8:	ldr	pc, [lr, #8]!
   10aec:	andeq	r7, r1, r4, lsl r5

00010af0 <calloc@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1300]!	; 0x514

00010afc <strcmp@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1292]!	; 0x50c

00010b08 <fopen@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1284]!	; 0x504

00010b14 <free@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b20 <utf8proc_get_property@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b2c <fgets@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b38 <utf8proc_encode_char@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b44 <strdup@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b50 <rewind@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b5c <unlink@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b68 <utf8proc_tolower@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b74 <__xstat@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b80 <fread@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b8c <utf8proc_iterate@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b98 <malloc@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1188]!	; 0x4a4

00010ba4 <__libc_start_main@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1180]!	; 0x49c

00010bb0 <__sysv_signal@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1172]!	; 0x494

00010bbc <__gmon_start__@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1164]!	; 0x48c

00010bc8 <getpid@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1156]!	; 0x484

00010bd4 <exit@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #94208	; 0x17000
   10bdc:	ldr	pc, [ip, #1148]!	; 0x47c

00010be0 <utf8proc_category@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #94208	; 0x17000
   10be8:	ldr	pc, [ip, #1140]!	; 0x474

00010bec <strlen@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #94208	; 0x17000
   10bf4:	ldr	pc, [ip, #1132]!	; 0x46c

00010bf8 <fprintf@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #94208	; 0x17000
   10c00:	ldr	pc, [ip, #1124]!	; 0x464

00010c04 <__isoc99_sscanf@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #94208	; 0x17000
   10c0c:	ldr	pc, [ip, #1116]!	; 0x45c

00010c10 <fclose@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #94208	; 0x17000
   10c18:	ldr	pc, [ip, #1108]!	; 0x454

00010c1c <utf8proc_NFC@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #94208	; 0x17000
   10c24:	ldr	pc, [ip, #1100]!	; 0x44c

00010c28 <fputc@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #94208	; 0x17000
   10c30:	ldr	pc, [ip, #1092]!	; 0x444

00010c34 <sprintf@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #94208	; 0x17000
   10c3c:	ldr	pc, [ip, #1084]!	; 0x43c

00010c40 <atoi@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #94208	; 0x17000
   10c48:	ldr	pc, [ip, #1076]!	; 0x434

00010c4c <utf8proc_errmsg@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #1068]!	; 0x42c

00010c58 <fputs@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #1060]!	; 0x424

00010c64 <strncmp@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #1052]!	; 0x41c

00010c70 <abort@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #1044]!	; 0x414

00010c7c <getc@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #1036]!	; 0x40c

00010c88 <__assert_fail@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #1028]!	; 0x404

Disassembly of section .text:

00010c98 <error@@Base-0x2108>:
   10c98:	mov	fp, #0
   10c9c:	mov	lr, #0
   10ca0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ca4:	mov	r2, sp
   10ca8:	push	{r2}		; (str r2, [sp, #-4]!)
   10cac:	push	{r0}		; (str r0, [sp, #-4]!)
   10cb0:	ldr	ip, [pc, #16]	; 10cc8 <__assert_fail@plt+0x40>
   10cb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10cb8:	ldr	r0, [pc, #12]	; 10ccc <__assert_fail@plt+0x44>
   10cbc:	ldr	r3, [pc, #12]	; 10cd0 <__assert_fail@plt+0x48>
   10cc0:	bl	10ba4 <__libc_start_main@plt>
   10cc4:	bl	10c70 <abort@plt>
   10cc8:	andeq	r3, r1, r0, ror #13
   10ccc:	andeq	r1, r1, r8, ror #9
   10cd0:	andeq	r3, r1, r0, lsl #13
   10cd4:	ldr	r3, [pc, #20]	; 10cf0 <__assert_fail@plt+0x68>
   10cd8:	ldr	r2, [pc, #20]	; 10cf4 <__assert_fail@plt+0x6c>
   10cdc:	add	r3, pc, r3
   10ce0:	ldr	r2, [r3, r2]
   10ce4:	cmp	r2, #0
   10ce8:	bxeq	lr
   10cec:	b	10bbc <__gmon_start__@plt>
   10cf0:	andeq	r7, r1, ip, lsl r3
   10cf4:	muleq	r0, r8, r0
   10cf8:	ldr	r0, [pc, #24]	; 10d18 <__assert_fail@plt+0x90>
   10cfc:	ldr	r3, [pc, #24]	; 10d1c <__assert_fail@plt+0x94>
   10d00:	cmp	r3, r0
   10d04:	bxeq	lr
   10d08:	ldr	r3, [pc, #16]	; 10d20 <__assert_fail@plt+0x98>
   10d0c:	cmp	r3, #0
   10d10:	bxeq	lr
   10d14:	bx	r3
   10d18:	ldrdeq	r8, [r2], -ip
   10d1c:	ldrdeq	r8, [r2], -ip
   10d20:	andeq	r0, r0, r0
   10d24:	ldr	r0, [pc, #36]	; 10d50 <__assert_fail@plt+0xc8>
   10d28:	ldr	r1, [pc, #36]	; 10d54 <__assert_fail@plt+0xcc>
   10d2c:	sub	r1, r1, r0
   10d30:	asr	r1, r1, #2
   10d34:	add	r1, r1, r1, lsr #31
   10d38:	asrs	r1, r1, #1
   10d3c:	bxeq	lr
   10d40:	ldr	r3, [pc, #16]	; 10d58 <__assert_fail@plt+0xd0>
   10d44:	cmp	r3, #0
   10d48:	bxeq	lr
   10d4c:	bx	r3
   10d50:	ldrdeq	r8, [r2], -ip
   10d54:	ldrdeq	r8, [r2], -ip
   10d58:	andeq	r0, r0, r0
   10d5c:	push	{r4, lr}
   10d60:	ldr	r4, [pc, #24]	; 10d80 <__assert_fail@plt+0xf8>
   10d64:	ldrb	r3, [r4]
   10d68:	cmp	r3, #0
   10d6c:	popne	{r4, pc}
   10d70:	bl	10cf8 <__assert_fail@plt+0x70>
   10d74:	mov	r3, #1
   10d78:	strb	r3, [r4]
   10d7c:	pop	{r4, pc}
   10d80:	strdeq	r8, [r2], -r0
   10d84:	b	10d24 <__assert_fail@plt+0x9c>
   10d88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10d8c:	add	fp, sp, #24
   10d90:	mov	r9, r0
   10d94:	movw	r0, #41260	; 0xa12c
   10d98:	mov	r8, r1
   10d9c:	mov	r1, #4
   10da0:	movt	r0, #2
   10da4:	add	r4, r0, r9, lsl #4
   10da8:	ldr	r0, [r4, #12]
   10dac:	add	r0, r0, #1
   10db0:	bl	12914 <__assert_fail@plt+0x1c8c>
   10db4:	ldr	r1, [r4, #12]
   10db8:	cmp	r1, #1
   10dbc:	blt	10e08 <__assert_fail@plt+0x180>
   10dc0:	movw	ip, #948	; 0x3b4
   10dc4:	rsb	r3, r9, #1
   10dc8:	mov	r4, #0
   10dcc:	mov	r2, #0
   10dd0:	mov	r7, #0
   10dd4:	movt	ip, #3
   10dd8:	ldr	r6, [ip, r9, lsl #2]
   10ddc:	add	r7, r7, #1
   10de0:	ldr	r5, [r6, r4]!
   10de4:	add	r4, r4, #8
   10de8:	add	r5, r5, r3
   10dec:	ldrb	r5, [r5, #12]
   10df0:	cmp	r5, #0
   10df4:	strne	r6, [r0, r2, lsl #2]
   10df8:	addne	r2, r2, #1
   10dfc:	cmp	r7, r1
   10e00:	blt	10dd8 <__assert_fail@plt+0x150>
   10e04:	b	10e0c <__assert_fail@plt+0x184>
   10e08:	mov	r2, #0
   10e0c:	str	r2, [r8]
   10e10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e18:	add	fp, sp, #28
   10e1c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e20:	movw	r8, #948	; 0x3b4
   10e24:	movw	r6, #41308	; 0xa15c
   10e28:	mov	r4, #0
   10e2c:	mov	r9, #1
   10e30:	movt	r8, #3
   10e34:	movt	r6, #2
   10e38:	ldr	r0, [sp]
   10e3c:	movw	r2, #32956	; 0x80bc
   10e40:	movt	r2, #2
   10e44:	ldr	r1, [r0, r4, lsl #2]
   10e48:	movw	r0, #41216	; 0xa100
   10e4c:	movt	r0, #2
   10e50:	add	r7, r0, r4, lsl #4
   10e54:	mov	r0, r7
   10e58:	bl	12f70 <error@@Base+0x1d0>
   10e5c:	cmp	r4, #0
   10e60:	bne	10e78 <__assert_fail@plt+0x1f0>
   10e64:	movw	r0, #32956	; 0x80bc
   10e68:	movt	r0, #2
   10e6c:	ldrb	r0, [r0, #11]
   10e70:	cmp	r0, #0
   10e74:	bne	10f70 <__assert_fail@plt+0x2e8>
   10e78:	movw	r0, #41260	; 0xa12c
   10e7c:	mov	r1, r7
   10e80:	movt	r0, #2
   10e84:	add	r5, r0, r4, lsl #4
   10e88:	mov	sl, r0
   10e8c:	mov	r0, r5
   10e90:	bl	12454 <__assert_fail@plt+0x17cc>
   10e94:	ldr	r0, [r5, #12]
   10e98:	mov	r1, #8
   10e9c:	add	r0, r0, #1
   10ea0:	bl	12914 <__assert_fail@plt+0x1c8c>
   10ea4:	ldr	r5, [sl, r4, lsl #4]
   10ea8:	str	r0, [r8, r4, lsl #2]
   10eac:	cmp	r5, #0
   10eb0:	beq	10f14 <__assert_fail@plt+0x28c>
   10eb4:	mov	sl, #0
   10eb8:	ldr	r1, [r5, #8]
   10ebc:	mov	r0, r6
   10ec0:	bl	121d4 <__assert_fail@plt+0x154c>
   10ec4:	mov	r7, r0
   10ec8:	cmp	r0, #0
   10ecc:	bne	10ef4 <__assert_fail@plt+0x26c>
   10ed0:	mov	r0, #1
   10ed4:	mov	r1, #16
   10ed8:	bl	12914 <__assert_fail@plt+0x1c8c>
   10edc:	mov	r7, r0
   10ee0:	ldr	r0, [r5, #8]
   10ee4:	mov	r1, r7
   10ee8:	str	r0, [r7, #8]
   10eec:	mov	r0, r6
   10ef0:	bl	1225c <__assert_fail@plt+0x15d4>
   10ef4:	add	r0, r7, r4
   10ef8:	strb	r9, [r0, #12]
   10efc:	ldr	r0, [r8, r4, lsl #2]
   10f00:	str	r7, [r0, sl]
   10f04:	add	sl, sl, #8
   10f08:	ldr	r5, [r5, #4]
   10f0c:	cmp	r5, #0
   10f10:	bne	10eb8 <__assert_fail@plt+0x230>
   10f14:	add	r4, r4, #1
   10f18:	cmp	r4, #2
   10f1c:	bcc	10e38 <__assert_fail@plt+0x1b0>
   10f20:	movw	r4, #940	; 0x3ac
   10f24:	mov	r0, #0
   10f28:	movt	r4, #3
   10f2c:	mov	r1, r4
   10f30:	bl	10d88 <__assert_fail@plt+0x100>
   10f34:	movw	r1, #936	; 0x3a8
   10f38:	movt	r1, #3
   10f3c:	str	r0, [r1]
   10f40:	ldr	r0, [r4]
   10f44:	cmp	r0, #65536	; 0x10000
   10f48:	bge	10f7c <__assert_fail@plt+0x2f4>
   10f4c:	movw	r1, #41252	; 0xa124
   10f50:	mov	r0, #1
   10f54:	movt	r1, #2
   10f58:	bl	10d88 <__assert_fail@plt+0x100>
   10f5c:	movw	r1, #41248	; 0xa120
   10f60:	movt	r1, #2
   10f64:	str	r0, [r1]
   10f68:	sub	sp, fp, #28
   10f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f70:	movw	r0, #14080	; 0x3700
   10f74:	movt	r0, #1
   10f78:	bl	12da0 <error@@Base>
   10f7c:	movw	r0, #14106	; 0x371a
   10f80:	movt	r0, #1
   10f84:	bl	12da0 <error@@Base>
   10f88:	cmp	r1, #0
   10f8c:	moveq	r0, #0
   10f90:	bxeq	lr
   10f94:	push	{fp, lr}
   10f98:	mov	fp, sp
   10f9c:	ldr	r3, [r1, #8]
   10fa0:	mov	ip, r0
   10fa4:	mov	r0, #0
   10fa8:	rsb	lr, r3, #0
   10fac:	cmp	lr, ip
   10fb0:	bge	10fd4 <__assert_fail@plt+0x34c>
   10fb4:	sub	lr, ip, #1
   10fb8:	add	r0, r3, lr
   10fbc:	ldr	r3, [r1, #12]
   10fc0:	bic	r0, r0, #1
   10fc4:	add	r0, r3, r0
   10fc8:	ldrh	r0, [r0]
   10fcc:	str	lr, [r2]
   10fd0:	ldr	r3, [r1, #8]
   10fd4:	cmp	r3, ip
   10fd8:	pop	{fp, lr}
   10fdc:	bxle	lr
   10fe0:	ldr	r1, [r1, #12]
   10fe4:	add	ip, ip, #1
   10fe8:	add	r3, r3, ip
   10fec:	bic	r3, r3, #1
   10ff0:	add	r1, r1, r3
   10ff4:	ldrh	r1, [r1]
   10ff8:	add	r1, r1, #1
   10ffc:	cmp	r1, r0
   11000:	movcs	r0, r1
   11004:	strcs	ip, [r2]
   11008:	bx	lr
   1100c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11010:	add	fp, sp, #24
   11014:	sub	sp, sp, #8
   11018:	mov	r8, r1
   1101c:	ldr	r1, [r1]
   11020:	add	r2, sp, #4
   11024:	mov	r4, r0
   11028:	bl	10f88 <__assert_fail@plt+0x300>
   1102c:	movw	r2, #940	; 0x3ac
   11030:	movw	r1, #41252	; 0xa124
   11034:	add	r5, r0, r4
   11038:	movt	r2, #3
   1103c:	movt	r1, #2
   11040:	ldr	r2, [r2]
   11044:	ldr	r1, [r1]
   11048:	cmp	r0, r2
   1104c:	cmplt	r5, r1
   11050:	blt	110a0 <__assert_fail@plt+0x418>
   11054:	mov	r3, r0
   11058:	cmp	r3, r2
   1105c:	movweq	r2, #944	; 0x3b0
   11060:	addeq	r0, r4, #1
   11064:	movteq	r2, #3
   11068:	streq	r0, [r2]
   1106c:	cmp	r5, r1
   11070:	movweq	r1, #932	; 0x3a4
   11074:	subeq	r0, r4, #1
   11078:	movteq	r1, #3
   1107c:	streq	r0, [r1]
   11080:	ldr	r0, [r8, #8]
   11084:	ldr	r1, [r8, #12]
   11088:	add	r0, r0, r4
   1108c:	bic	r0, r0, #1
   11090:	add	r0, r1, r0
   11094:	strh	r3, [r0]
   11098:	sub	sp, fp, #24
   1109c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   110a0:	movw	r3, #41248	; 0xa120
   110a4:	movt	r3, #2
   110a8:	ldr	r3, [r3]
   110ac:	add	r5, r3, r4, lsl #2
   110b0:	movw	r3, #936	; 0x3a8
   110b4:	movt	r3, #3
   110b8:	ldr	r6, [r3]
   110bc:	ldr	r3, [r5, r0, lsl #2]
   110c0:	ldr	r7, [r6, r0, lsl #2]
   110c4:	ldr	r3, [r3]
   110c8:	ldr	r7, [r7]
   110cc:	cmp	r7, r3
   110d0:	bne	110fc <__assert_fail@plt+0x474>
   110d4:	add	r3, r0, #1
   110d8:	cmp	r3, r2
   110dc:	bge	110f4 <__assert_fail@plt+0x46c>
   110e0:	add	r0, r4, r0
   110e4:	add	r0, r0, #1
   110e8:	cmp	r0, r1
   110ec:	mov	r0, r3
   110f0:	blt	110bc <__assert_fail@plt+0x434>
   110f4:	add	r5, r4, r3
   110f8:	b	11058 <__assert_fail@plt+0x3d0>
   110fc:	add	r5, r4, r0
   11100:	b	11054 <__assert_fail@plt+0x3cc>
   11104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11108:	add	fp, sp, #28
   1110c:	sub	sp, sp, #4
   11110:	movw	r0, #41252	; 0xa124
   11114:	movw	r9, #940	; 0x3ac
   11118:	movw	r7, #932	; 0x3a4
   1111c:	movw	r4, #944	; 0x3b0
   11120:	movt	r0, #2
   11124:	movt	r9, #3
   11128:	movt	r7, #3
   1112c:	movt	r4, #3
   11130:	ldr	r0, [r0]
   11134:	ldr	r1, [r9]
   11138:	str	r0, [r7]
   1113c:	rsb	r2, r1, #0
   11140:	sub	r0, r0, r1
   11144:	cmp	r0, r2
   11148:	str	r2, [r4]
   1114c:	blt	111f0 <__assert_fail@plt+0x568>
   11150:	movw	sl, #41292	; 0xa14c
   11154:	mvn	r8, #0
   11158:	movt	sl, #2
   1115c:	mov	r0, #1
   11160:	mov	r1, #16
   11164:	mov	r6, r8
   11168:	bl	12914 <__assert_fail@plt+0x1c8c>
   1116c:	add	r8, r8, #1
   11170:	mov	r5, r0
   11174:	mov	r1, #2
   11178:	str	r8, [r0, #8]
   1117c:	add	r0, r6, #2
   11180:	bl	12914 <__assert_fail@plt+0x1c8c>
   11184:	str	r0, [r5, #12]
   11188:	mov	r0, sl
   1118c:	mov	r1, r5
   11190:	bl	115e0 <__assert_fail@plt+0x958>
   11194:	mvn	r6, r6
   11198:	cmp	r8, r6
   1119c:	blt	111d0 <__assert_fail@plt+0x548>
   111a0:	ldr	r0, [r4]
   111a4:	cmp	r6, r0
   111a8:	blt	111c4 <__assert_fail@plt+0x53c>
   111ac:	ldr	r0, [r7]
   111b0:	cmp	r6, r0
   111b4:	bgt	111c4 <__assert_fail@plt+0x53c>
   111b8:	mov	r0, r6
   111bc:	mov	r1, r5
   111c0:	bl	1100c <__assert_fail@plt+0x384>
   111c4:	add	r6, r6, #2
   111c8:	cmp	r6, r8
   111cc:	ble	111a0 <__assert_fail@plt+0x518>
   111d0:	movw	r1, #41252	; 0xa124
   111d4:	ldr	r0, [r9]
   111d8:	movt	r1, #2
   111dc:	ldr	r1, [r1]
   111e0:	sub	r0, r1, r0
   111e4:	ldr	r1, [r4]
   111e8:	cmp	r1, r0
   111ec:	ble	1115c <__assert_fail@plt+0x4d4>
   111f0:	sub	sp, fp, #28
   111f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   111fc:	add	fp, sp, #24
   11200:	sub	sp, sp, #8
   11204:	movw	r0, #41292	; 0xa14c
   11208:	movt	r0, #2
   1120c:	ldr	r5, [r0, #4]
   11210:	cmp	r5, #0
   11214:	beq	1129c <__assert_fail@plt+0x614>
   11218:	movw	r0, #940	; 0x3ac
   1121c:	movw	r1, #41252	; 0xa124
   11220:	movw	r8, #936	; 0x3a8
   11224:	add	r4, sp, #4
   11228:	mov	r7, #1
   1122c:	movt	r0, #3
   11230:	movt	r1, #2
   11234:	movt	r8, #3
   11238:	ldr	r0, [r0]
   1123c:	ldr	r1, [r1]
   11240:	sub	r0, r1, r0
   11244:	ldr	r2, [r5, #8]
   11248:	ldr	r3, [r5, #12]
   1124c:	ldr	r1, [r5]
   11250:	add	r2, r2, r0
   11254:	bic	r2, r2, #1
   11258:	add	r2, r3, r2
   1125c:	ldrh	r6, [r2]
   11260:	mov	r2, r4
   11264:	bl	10f88 <__assert_fail@plt+0x300>
   11268:	cmp	r0, r6
   1126c:	bge	1128c <__assert_fail@plt+0x604>
   11270:	ldr	r1, [r8]
   11274:	sub	r1, r1, #4
   11278:	ldr	r2, [r1, r6, lsl #2]
   1127c:	sub	r6, r6, #1
   11280:	cmp	r6, r0
   11284:	strb	r7, [r2, #4]
   11288:	bgt	11278 <__assert_fail@plt+0x5f0>
   1128c:	ldr	r5, [r5]
   11290:	ldr	r0, [sp, #4]
   11294:	cmp	r5, #0
   11298:	bne	11244 <__assert_fail@plt+0x5bc>
   1129c:	sub	sp, fp, #24
   112a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   112a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112a8:	add	fp, sp, #28
   112ac:	sub	sp, sp, #4
   112b0:	mov	r4, r2
   112b4:	mov	sl, r1
   112b8:	mov	r6, r0
   112bc:	bl	1237c <__assert_fail@plt+0x16f4>
   112c0:	movw	r0, #8052	; 0x1f74
   112c4:	mov	r9, r6
   112c8:	ldr	r0, [r9, r0]!
   112cc:	cmp	r0, #1
   112d0:	blt	11380 <__assert_fail@plt+0x6f8>
   112d4:	movw	r0, #8048	; 0x1f70
   112d8:	mov	r8, #0
   112dc:	add	r5, r6, r0
   112e0:	ldr	r0, [r5]
   112e4:	ldr	r0, [r0, r8, lsl #2]
   112e8:	ldr	r7, [r0, #12]
   112ec:	ldr	r6, [r0, #16]
   112f0:	movw	r0, #49364	; 0xc0d4
   112f4:	movt	r0, #2
   112f8:	mov	r1, r7
   112fc:	mov	r2, r6
   11300:	bl	118b0 <__assert_fail@plt+0xc28>
   11304:	mov	r0, sl
   11308:	mov	r1, r7
   1130c:	mov	r2, r6
   11310:	bl	118b0 <__assert_fail@plt+0xc28>
   11314:	ldr	r0, [r5]
   11318:	ldr	r0, [r0, r8, lsl #2]
   1131c:	ldr	r0, [r0, #8]
   11320:	bl	10bec <strlen@plt>
   11324:	add	r0, sl, r0, lsl #3
   11328:	mov	r1, r7
   1132c:	mov	r2, r6
   11330:	bl	118b0 <__assert_fail@plt+0xc28>
   11334:	cmp	r4, #0
   11338:	beq	11370 <__assert_fail@plt+0x6e8>
   1133c:	sub	r0, r7, r6
   11340:	mov	r1, #1
   11344:	clz	r0, r0
   11348:	lsr	r6, r0, #5
   1134c:	mov	r0, r4
   11350:	mov	r2, r6
   11354:	bl	118b0 <__assert_fail@plt+0xc28>
   11358:	cmp	r7, #11
   1135c:	mov	r1, #1
   11360:	mov	r2, r6
   11364:	movge	r7, #11
   11368:	add	r0, r4, r7, lsl #3
   1136c:	bl	118b0 <__assert_fail@plt+0xc28>
   11370:	ldr	r0, [r9]
   11374:	add	r8, r8, #1
   11378:	cmp	r8, r0
   1137c:	blt	112e0 <__assert_fail@plt+0x658>
   11380:	sub	sp, fp, #28
   11384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1138c:	add	fp, sp, #28
   11390:	sub	sp, sp, #4
   11394:	movw	r9, #41260	; 0xa12c
   11398:	movt	r9, #2
   1139c:	ldr	r0, [r9, #12]
   113a0:	cmp	r0, #1
   113a4:	blt	11428 <__assert_fail@plt+0x7a0>
   113a8:	movw	r1, #49364	; 0xc0d4
   113ac:	movw	sl, #948	; 0x3b4
   113b0:	mov	r6, #0
   113b4:	mov	r7, #4
   113b8:	movt	r1, #2
   113bc:	movt	sl, #3
   113c0:	add	r1, r1, #928	; 0x3a0
   113c4:	str	r1, [sp]
   113c8:	ldr	r4, [sp]
   113cc:	mov	r5, #1
   113d0:	mov	r8, #0
   113d4:	add	r1, r6, r8
   113d8:	cmp	r1, r0
   113dc:	bge	11418 <__assert_fail@plt+0x790>
   113e0:	ldr	r0, [sl]
   113e4:	mov	r1, #1
   113e8:	add	r0, r0, r7
   113ec:	ldrb	r0, [r0, r8, lsl #3]
   113f0:	and	r5, r5, r0
   113f4:	clz	r0, r5
   113f8:	lsr	r2, r0, #5
   113fc:	mov	r0, r4
   11400:	bl	118b0 <__assert_fail@plt+0xc28>
   11404:	ldr	r0, [r9, #12]
   11408:	add	r8, r8, #1
   1140c:	add	r4, r4, #8
   11410:	cmp	r8, #8
   11414:	bcc	113d4 <__assert_fail@plt+0x74c>
   11418:	add	r6, r6, #1
   1141c:	add	r7, r7, #8
   11420:	cmp	r6, r0
   11424:	blt	113c8 <__assert_fail@plt+0x740>
   11428:	sub	sp, fp, #28
   1142c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11430:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11434:	add	fp, sp, #24
   11438:	movw	r8, #41260	; 0xa12c
   1143c:	movt	r8, #2
   11440:	ldr	r0, [r8, #12]
   11444:	cmp	r0, #1
   11448:	blt	114b4 <__assert_fail@plt+0x82c>
   1144c:	movw	r4, #49364	; 0xc0d4
   11450:	movw	r6, #948	; 0x3b4
   11454:	mov	r5, #0
   11458:	movw	r9, #9048	; 0x2358
   1145c:	movt	r4, #2
   11460:	movt	r6, #3
   11464:	add	r7, r4, #992	; 0x3e0
   11468:	ldr	r0, [r6]
   1146c:	ldr	r0, [r0, r5, lsl #3]
   11470:	ldr	r0, [r0, #8]
   11474:	bl	1186c <__assert_fail@plt+0xbe4>
   11478:	ldr	r2, [r6]
   1147c:	cmp	r0, #0
   11480:	mov	r0, r7
   11484:	addeq	r0, r4, r9
   11488:	ldr	r1, [r2, r5, lsl #3]!
   1148c:	ldrb	r2, [r2, #4]
   11490:	ldr	r1, [r1, #8]
   11494:	clz	r2, r2
   11498:	lsr	r3, r2, #5
   1149c:	mov	r2, #1
   114a0:	bl	118c4 <__assert_fail@plt+0xc3c>
   114a4:	ldr	r0, [r8, #12]
   114a8:	add	r5, r5, #1
   114ac:	cmp	r5, r0
   114b0:	blt	11468 <__assert_fail@plt+0x7e0>
   114b4:	movw	r4, #49364	; 0xc0d4
   114b8:	mov	r2, #0
   114bc:	movt	r4, #2
   114c0:	add	r0, r4, #992	; 0x3e0
   114c4:	add	r1, r4, #8
   114c8:	bl	112a4 <__assert_fail@plt+0x61c>
   114cc:	movw	r0, #9048	; 0x2358
   114d0:	add	r1, r4, #416	; 0x1a0
   114d4:	add	r2, r4, #824	; 0x338
   114d8:	add	r0, r4, r0
   114dc:	bl	112a4 <__assert_fail@plt+0x61c>
   114e0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   114e4:	b	11388 <__assert_fail@plt+0x700>
   114e8:	push	{fp, lr}
   114ec:	mov	fp, sp
   114f0:	sub	sp, sp, #8
   114f4:	movw	r2, #14130	; 0x3732
   114f8:	movw	r3, #32932	; 0x80a4
   114fc:	str	r0, [sp, #4]
   11500:	add	r0, sp, #4
   11504:	mov	r4, r1
   11508:	movt	r2, #1
   1150c:	movt	r3, #2
   11510:	bl	12b34 <__assert_fail@plt+0x1eac>
   11514:	ldr	r0, [sp, #4]
   11518:	bic	r0, r0, #1
   1151c:	cmp	r0, #2
   11520:	bne	11568 <__assert_fail@plt+0x8e0>
   11524:	movw	r0, #41256	; 0xa128
   11528:	movt	r0, #2
   1152c:	ldr	r0, [r0]
   11530:	bl	11714 <__assert_fail@plt+0xa8c>
   11534:	mov	r0, r4
   11538:	bl	10e14 <__assert_fail@plt+0x18c>
   1153c:	bl	11104 <__assert_fail@plt+0x47c>
   11540:	bl	111f8 <__assert_fail@plt+0x570>
   11544:	bl	11430 <__assert_fail@plt+0x7a8>
   11548:	ldr	r0, [sp, #4]
   1154c:	mov	r1, #0
   11550:	cmp	r0, #3
   11554:	movw	r0, #49364	; 0xc0d4
   11558:	ldreq	r1, [r4, #8]
   1155c:	movt	r0, #2
   11560:	bl	11cec <__assert_fail@plt+0x1064>
   11564:	bl	12d60 <__assert_fail@plt+0x20d8>
   11568:	movw	r0, #14191	; 0x376f
   1156c:	movt	r0, #1
   11570:	bl	12da0 <error@@Base>
   11574:	vmov.i32	q8, #0	; 0x00000000
   11578:	vst1.32	{d16-d17}, [r0]
   1157c:	bx	lr
   11580:	ldr	r3, [r0]
   11584:	mov	r2, r1
   11588:	mov	r1, #0
   1158c:	b	11590 <__assert_fail@plt+0x908>
   11590:	push	{r4, sl, fp, lr}
   11594:	add	fp, sp, #8
   11598:	cmp	r1, #0
   1159c:	mov	r4, r0
   115a0:	stm	r2, {r1, r3}
   115a4:	addne	r0, r1, #4
   115a8:	cmp	r3, #0
   115ac:	addeq	r3, r4, #4
   115b0:	str	r2, [r0]
   115b4:	str	r2, [r3]
   115b8:	ldr	r0, [r4, #8]
   115bc:	cmp	r0, #0
   115c0:	beq	115d0 <__assert_fail@plt+0x948>
   115c4:	bl	10b14 <free@plt>
   115c8:	mov	r0, #0
   115cc:	str	r0, [r4, #8]
   115d0:	ldr	r0, [r4, #12]
   115d4:	add	r0, r0, #1
   115d8:	str	r0, [r4, #12]
   115dc:	pop	{r4, sl, fp, pc}
   115e0:	mov	r2, r1
   115e4:	ldr	r1, [r0, #4]
   115e8:	mov	r3, #0
   115ec:	b	11590 <__assert_fail@plt+0x908>
   115f0:	mov	r3, r2
   115f4:	mov	r2, r1
   115f8:	ldr	r1, [r3]
   115fc:	b	11590 <__assert_fail@plt+0x908>
   11600:	ldr	r3, [r1, #4]
   11604:	b	11590 <__assert_fail@plt+0x908>
   11608:	push	{r4, r5, fp, lr}
   1160c:	add	fp, sp, #8
   11610:	mov	r4, r0
   11614:	ldm	r1, {r0, r2}
   11618:	mov	r5, #0
   1161c:	cmp	r0, #0
   11620:	streq	r2, [r4]
   11624:	strne	r2, [r0, #4]
   11628:	ldrne	r2, [r1, #4]
   1162c:	cmp	r2, #0
   11630:	addeq	r2, r4, #4
   11634:	str	r0, [r2]
   11638:	str	r5, [r1]
   1163c:	str	r5, [r1, #4]
   11640:	ldr	r0, [r4, #8]
   11644:	cmp	r0, #0
   11648:	beq	11654 <__assert_fail@plt+0x9cc>
   1164c:	bl	10b14 <free@plt>
   11650:	str	r5, [r4, #8]
   11654:	ldr	r0, [r4, #12]
   11658:	sub	r0, r0, #1
   1165c:	str	r0, [r4, #12]
   11660:	pop	{r4, r5, fp, pc}
   11664:	push	{r4, sl, fp, lr}
   11668:	add	fp, sp, #8
   1166c:	mov	r4, r0
   11670:	ldr	r0, [r0, #8]
   11674:	cmp	r0, #0
   11678:	beq	11680 <__assert_fail@plt+0x9f8>
   1167c:	pop	{r4, sl, fp, pc}
   11680:	ldr	r0, [r4, #12]
   11684:	cmp	r0, #0
   11688:	beq	1167c <__assert_fail@plt+0x9f4>
   1168c:	mov	r1, #4
   11690:	bl	12914 <__assert_fail@plt+0x1c8c>
   11694:	str	r0, [r4, #8]
   11698:	ldr	r1, [r4]
   1169c:	cmp	r1, #0
   116a0:	beq	1167c <__assert_fail@plt+0x9f4>
   116a4:	str	r1, [r0]
   116a8:	ldr	r0, [r1, #4]
   116ac:	cmp	r0, #0
   116b0:	popeq	{r4, sl, fp, pc}
   116b4:	mov	r1, #4
   116b8:	ldr	r2, [r4, #8]
   116bc:	str	r0, [r2, r1]
   116c0:	add	r1, r1, #4
   116c4:	ldr	r0, [r0, #4]
   116c8:	cmp	r0, #0
   116cc:	bne	116b8 <__assert_fail@plt+0xa30>
   116d0:	b	1167c <__assert_fail@plt+0x9f4>
   116d4:	push	{r4, r5, r6, sl, fp, lr}
   116d8:	add	fp, sp, #16
   116dc:	ldr	r6, [r0]
   116e0:	cmp	r6, #0
   116e4:	popeq	{r4, r5, r6, sl, fp, pc}
   116e8:	mov	r4, r1
   116ec:	mov	r5, r0
   116f0:	mov	r0, r5
   116f4:	mov	r1, r6
   116f8:	bl	11608 <__assert_fail@plt+0x980>
   116fc:	mov	r0, r6
   11700:	blx	r4
   11704:	ldr	r6, [r5]
   11708:	cmp	r6, #0
   1170c:	bne	116f0 <__assert_fail@plt+0xa68>
   11710:	pop	{r4, r5, r6, sl, fp, pc}
   11714:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11718:	add	fp, sp, #24
   1171c:	movw	r8, #33012	; 0x80f4
   11720:	mov	r1, r0
   11724:	movt	r8, #2
   11728:	ldrb	r0, [r8]
   1172c:	cmp	r0, #1
   11730:	beq	11860 <__assert_fail@plt+0xbd8>
   11734:	cmp	r1, #0
   11738:	beq	117e8 <__assert_fail@plt+0xb60>
   1173c:	movw	r4, #33016	; 0x80f8
   11740:	movw	r2, #32968	; 0x80c8
   11744:	movt	r4, #2
   11748:	movt	r2, #2
   1174c:	mov	r0, r4
   11750:	bl	12f70 <error@@Base+0x1d0>
   11754:	movw	r5, #33032	; 0x8108
   11758:	mov	r1, r4
   1175c:	movt	r5, #2
   11760:	mov	r0, r5
   11764:	bl	12454 <__assert_fail@plt+0x17cc>
   11768:	movw	r1, #2836	; 0xb14
   1176c:	mov	r0, r4
   11770:	movt	r1, #1
   11774:	bl	116d4 <__assert_fail@plt+0xa4c>
   11778:	ldr	r7, [r5]
   1177c:	cmp	r7, #0
   11780:	beq	11854 <__assert_fail@plt+0xbcc>
   11784:	movw	r4, #33048	; 0x8118
   11788:	movw	r5, #14271	; 0x37bf
   1178c:	movt	r4, #2
   11790:	movt	r5, #1
   11794:	ldr	r6, [r7, #8]
   11798:	mov	r0, r4
   1179c:	mov	r1, r6
   117a0:	bl	121d4 <__assert_fail@plt+0x154c>
   117a4:	cmp	r0, #0
   117a8:	beq	117bc <__assert_fail@plt+0xb34>
   117ac:	mov	r0, r5
   117b0:	mov	r1, r6
   117b4:	bl	12e28 <error@@Base+0x88>
   117b8:	b	117d8 <__assert_fail@plt+0xb50>
   117bc:	mov	r0, #1
   117c0:	mov	r1, #12
   117c4:	bl	12914 <__assert_fail@plt+0x1c8c>
   117c8:	mov	r1, r0
   117cc:	str	r6, [r0, #8]
   117d0:	mov	r0, r4
   117d4:	bl	1225c <__assert_fail@plt+0x15d4>
   117d8:	ldr	r7, [r7, #4]
   117dc:	cmp	r7, #0
   117e0:	bne	11794 <__assert_fail@plt+0xb0c>
   117e4:	b	11854 <__assert_fail@plt+0xbcc>
   117e8:	movw	r5, #14708	; 0x3974
   117ec:	movw	r4, #33048	; 0x8118
   117f0:	movw	r9, #14271	; 0x37bf
   117f4:	mov	r7, #0
   117f8:	movt	r5, #1
   117fc:	movt	r4, #2
   11800:	movt	r9, #1
   11804:	ldr	r6, [r5, r7, lsl #2]
   11808:	mov	r0, r4
   1180c:	mov	r1, r6
   11810:	bl	121d4 <__assert_fail@plt+0x154c>
   11814:	cmp	r0, #0
   11818:	beq	1182c <__assert_fail@plt+0xba4>
   1181c:	mov	r0, r9
   11820:	mov	r1, r6
   11824:	bl	12e28 <error@@Base+0x88>
   11828:	b	11848 <__assert_fail@plt+0xbc0>
   1182c:	mov	r0, #1
   11830:	mov	r1, #12
   11834:	bl	12914 <__assert_fail@plt+0x1c8c>
   11838:	mov	r1, r0
   1183c:	str	r6, [r0, #8]
   11840:	mov	r0, r4
   11844:	bl	1225c <__assert_fail@plt+0x15d4>
   11848:	add	r7, r7, #1
   1184c:	cmp	r7, #110	; 0x6e
   11850:	bne	11804 <__assert_fail@plt+0xb7c>
   11854:	mov	r0, #1
   11858:	strb	r0, [r8]
   1185c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11860:	movw	r0, #14215	; 0x3787
   11864:	movt	r0, #1
   11868:	bl	12da0 <error@@Base>
   1186c:	push	{fp, lr}
   11870:	mov	fp, sp
   11874:	mov	r1, r0
   11878:	movw	r0, #33012	; 0x80f4
   1187c:	movt	r0, #2
   11880:	ldrb	r0, [r0]
   11884:	cmp	r0, #0
   11888:	beq	118a4 <__assert_fail@plt+0xc1c>
   1188c:	movw	r0, #33048	; 0x8118
   11890:	movt	r0, #2
   11894:	bl	121d4 <__assert_fail@plt+0x154c>
   11898:	cmp	r0, #0
   1189c:	movwne	r0, #1
   118a0:	pop	{fp, pc}
   118a4:	movw	r0, #14245	; 0x37a5
   118a8:	movt	r0, #1
   118ac:	bl	12da0 <error@@Base>
   118b0:	ldm	r0, {r3, ip}
   118b4:	add	r1, r3, r1
   118b8:	add	r2, ip, r2
   118bc:	stm	r0, {r1, r2}
   118c0:	bx	lr
   118c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   118c8:	add	fp, sp, #24
   118cc:	mov	r8, r3
   118d0:	mov	r5, r2
   118d4:	mov	r4, r1
   118d8:	mov	r6, r0
   118dc:	bl	121d4 <__assert_fail@plt+0x154c>
   118e0:	mov	r7, r0
   118e4:	cmp	r0, #0
   118e8:	bne	11914 <__assert_fail@plt+0xc8c>
   118ec:	mov	r0, #1
   118f0:	mov	r1, #20
   118f4:	bl	12914 <__assert_fail@plt+0x1c8c>
   118f8:	mov	r7, r0
   118fc:	mov	r0, r4
   11900:	bl	10b44 <strdup@plt>
   11904:	str	r0, [r7, #8]
   11908:	mov	r0, r6
   1190c:	mov	r1, r7
   11910:	bl	1225c <__assert_fail@plt+0x15d4>
   11914:	ldr	r0, [r7, #12]
   11918:	ldr	r1, [r7, #16]
   1191c:	add	r0, r0, r5
   11920:	add	r1, r1, r8
   11924:	str	r0, [r7, #12]
   11928:	str	r1, [r7, #16]
   1192c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11930:	push	{r4, r5, r6, r7, fp, lr}
   11934:	add	fp, sp, #16
   11938:	sub	sp, sp, #8
   1193c:	mov	r6, r1
   11940:	movw	r1, #14524	; 0x38bc
   11944:	mov	r5, r0
   11948:	movt	r1, #1
   1194c:	mov	r0, r6
   11950:	bl	129b0 <__assert_fail@plt+0x1d28>
   11954:	mov	r4, r0
   11958:	movw	r0, #41104	; 0xa090
   1195c:	mov	r1, #99	; 0x63
   11960:	movt	r0, #2
   11964:	mov	r2, r4
   11968:	bl	10b2c <fgets@plt>
   1196c:	cmp	r0, #0
   11970:	beq	11ac4 <__assert_fail@plt+0xe3c>
   11974:	movw	r0, #41104	; 0xa090
   11978:	movw	r1, #15148	; 0x3b2c
   1197c:	mov	r2, #45	; 0x2d
   11980:	movt	r0, #2
   11984:	movt	r1, #1
   11988:	bl	10c64 <strncmp@plt>
   1198c:	cmp	r0, #0
   11990:	bne	11ac4 <__assert_fail@plt+0xe3c>
   11994:	movw	r0, #41104	; 0xa090
   11998:	mov	r1, #99	; 0x63
   1199c:	mov	r2, r4
   119a0:	movt	r0, #2
   119a4:	bl	10b2c <fgets@plt>
   119a8:	cmp	r0, #0
   119ac:	beq	11ac4 <__assert_fail@plt+0xe3c>
   119b0:	movw	r0, #41104	; 0xa090
   119b4:	movw	r1, #28939	; 0x710b
   119b8:	movt	r0, #2
   119bc:	movt	r1, #1
   119c0:	bl	10afc <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	bne	11ac4 <__assert_fail@plt+0xe3c>
   119cc:	add	r1, sp, #4
   119d0:	mov	r0, r4
   119d4:	bl	11ae0 <__assert_fail@plt+0xe58>
   119d8:	cmp	r0, #0
   119dc:	beq	11ac4 <__assert_fail@plt+0xe3c>
   119e0:	mov	r1, sp
   119e4:	mov	r0, r4
   119e8:	bl	11ae0 <__assert_fail@plt+0xe58>
   119ec:	cmp	r0, #0
   119f0:	beq	11ac4 <__assert_fail@plt+0xe3c>
   119f4:	movw	r0, #41104	; 0xa090
   119f8:	mov	r1, #99	; 0x63
   119fc:	mov	r2, r4
   11a00:	movt	r0, #2
   11a04:	bl	10b2c <fgets@plt>
   11a08:	cmp	r0, #0
   11a0c:	beq	11ac4 <__assert_fail@plt+0xe3c>
   11a10:	movw	r0, #41104	; 0xa090
   11a14:	mov	r1, #99	; 0x63
   11a18:	mov	r2, r4
   11a1c:	movt	r0, #2
   11a20:	bl	10b2c <fgets@plt>
   11a24:	cmp	r0, #0
   11a28:	beq	11ac4 <__assert_fail@plt+0xe3c>
   11a2c:	ldm	r5, {r0, r1}
   11a30:	ldr	r2, [sp, #4]
   11a34:	add	r0, r0, r2
   11a38:	ldr	r2, [sp]
   11a3c:	add	r1, r1, r2
   11a40:	stm	r5, {r0, r1}
   11a44:	add	r1, r5, #8
   11a48:	mov	r0, r4
   11a4c:	bl	11b34 <__assert_fail@plt+0xeac>
   11a50:	mov	r7, r0
   11a54:	add	r1, r5, #416	; 0x1a0
   11a58:	mov	r0, r4
   11a5c:	bl	11b34 <__assert_fail@plt+0xeac>
   11a60:	mov	r6, r0
   11a64:	add	r1, r5, #824	; 0x338
   11a68:	mov	r0, r4
   11a6c:	bl	11b34 <__assert_fail@plt+0xeac>
   11a70:	ldr	r0, [sp, #4]
   11a74:	cmp	r0, #1
   11a78:	blt	11ab4 <__assert_fail@plt+0xe2c>
   11a7c:	add	r1, r5, #920	; 0x398
   11a80:	mov	r0, r4
   11a84:	bl	11b34 <__assert_fail@plt+0xeac>
   11a88:	cmp	r7, #1
   11a8c:	blt	11a9c <__assert_fail@plt+0xe14>
   11a90:	add	r1, r5, #992	; 0x3e0
   11a94:	mov	r0, r4
   11a98:	bl	11c30 <__assert_fail@plt+0xfa8>
   11a9c:	cmp	r6, #1
   11aa0:	blt	11ab4 <__assert_fail@plt+0xe2c>
   11aa4:	movw	r0, #9048	; 0x2358
   11aa8:	add	r1, r5, r0
   11aac:	mov	r0, r4
   11ab0:	bl	11c30 <__assert_fail@plt+0xfa8>
   11ab4:	mov	r0, r4
   11ab8:	bl	12a28 <__assert_fail@plt+0x1da0>
   11abc:	sub	sp, fp, #16
   11ac0:	pop	{r4, r5, r6, r7, fp, pc}
   11ac4:	movw	r1, #15214	; 0x3b6e
   11ac8:	movw	r0, #15196	; 0x3b5c
   11acc:	cmp	r6, #0
   11ad0:	movt	r1, #1
   11ad4:	movt	r0, #1
   11ad8:	movne	r1, r6
   11adc:	bl	12de0 <error@@Base+0x40>
   11ae0:	push	{r4, sl, fp, lr}
   11ae4:	add	fp, sp, #8
   11ae8:	mov	r2, r0
   11aec:	movw	r0, #41104	; 0xa090
   11af0:	mov	r4, r1
   11af4:	mov	r1, #99	; 0x63
   11af8:	movt	r0, #2
   11afc:	bl	10b2c <fgets@plt>
   11b00:	cmp	r0, #0
   11b04:	moveq	r0, #0
   11b08:	popeq	{r4, sl, fp, pc}
   11b0c:	movw	r0, #41104	; 0xa090
   11b10:	movw	r1, #15327	; 0x3bdf
   11b14:	mov	r2, r4
   11b18:	movt	r0, #2
   11b1c:	movt	r1, #1
   11b20:	bl	10c04 <__isoc99_sscanf@plt>
   11b24:	sub	r0, r0, #1
   11b28:	clz	r0, r0
   11b2c:	lsr	r0, r0, #5
   11b30:	pop	{r4, sl, fp, pc}
   11b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b38:	add	fp, sp, #28
   11b3c:	sub	sp, sp, #12
   11b40:	mov	r5, r0
   11b44:	movw	r0, #41104	; 0xa090
   11b48:	mov	r4, r1
   11b4c:	mov	r1, #99	; 0x63
   11b50:	movt	r0, #2
   11b54:	mov	r2, r5
   11b58:	bl	10b2c <fgets@plt>
   11b5c:	mov	r6, #0
   11b60:	cmp	r0, #0
   11b64:	beq	11c24 <__assert_fail@plt+0xf9c>
   11b68:	movw	r7, #41104	; 0xa090
   11b6c:	mov	r1, #99	; 0x63
   11b70:	mov	r2, r5
   11b74:	movt	r7, #2
   11b78:	mov	r0, r7
   11b7c:	bl	10b2c <fgets@plt>
   11b80:	cmp	r0, #0
   11b84:	beq	11c24 <__assert_fail@plt+0xf9c>
   11b88:	add	r1, sp, #8
   11b8c:	add	r2, sp, #4
   11b90:	mov	r0, r5
   11b94:	bl	120cc <__assert_fail@plt+0x1444>
   11b98:	cmp	r0, #0
   11b9c:	beq	11c24 <__assert_fail@plt+0xf9c>
   11ba0:	movw	r8, #15315	; 0x3bd3
   11ba4:	mov	r6, #0
   11ba8:	add	r7, r7, #29
   11bac:	add	r9, sp, #8
   11bb0:	add	sl, sp, #4
   11bb4:	movt	r8, #1
   11bb8:	mov	r0, r7
   11bbc:	bl	10c40 <atoi@plt>
   11bc0:	cmp	r0, #0
   11bc4:	beq	11bd0 <__assert_fail@plt+0xf48>
   11bc8:	ldr	r1, [sp, #8]
   11bcc:	b	11bec <__assert_fail@plt+0xf64>
   11bd0:	mov	r0, r7
   11bd4:	mov	r1, r8
   11bd8:	bl	10afc <strcmp@plt>
   11bdc:	ldr	r1, [sp, #8]
   11be0:	cmp	r0, #0
   11be4:	movwne	r0, #11
   11be8:	moveq	r6, r1
   11bec:	mov	r2, r4
   11bf0:	ldr	r0, [r2, r0, lsl #3]!
   11bf4:	add	r0, r0, r1
   11bf8:	ldr	r1, [sp, #4]
   11bfc:	str	r0, [r2]
   11c00:	ldr	r0, [r2, #4]
   11c04:	add	r0, r0, r1
   11c08:	mov	r1, r9
   11c0c:	str	r0, [r2, #4]
   11c10:	mov	r0, r5
   11c14:	mov	r2, sl
   11c18:	bl	120cc <__assert_fail@plt+0x1444>
   11c1c:	cmp	r0, #0
   11c20:	bne	11bb8 <__assert_fail@plt+0xf30>
   11c24:	mov	r0, r6
   11c28:	sub	sp, fp, #28
   11c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c34:	add	fp, sp, #28
   11c38:	sub	sp, sp, #12
   11c3c:	mov	r5, r0
   11c40:	movw	r0, #41104	; 0xa090
   11c44:	mov	r4, r1
   11c48:	mov	r1, #99	; 0x63
   11c4c:	movt	r0, #2
   11c50:	mov	r2, r5
   11c54:	bl	10b2c <fgets@plt>
   11c58:	cmp	r0, #0
   11c5c:	beq	11ce4 <__assert_fail@plt+0x105c>
   11c60:	movw	r6, #41104	; 0xa090
   11c64:	mov	r1, #99	; 0x63
   11c68:	mov	r2, r5
   11c6c:	movt	r6, #2
   11c70:	mov	r0, r6
   11c74:	bl	10b2c <fgets@plt>
   11c78:	cmp	r0, #0
   11c7c:	beq	11ce4 <__assert_fail@plt+0x105c>
   11c80:	add	r1, sp, #8
   11c84:	add	r2, sp, #4
   11c88:	mov	r0, r5
   11c8c:	bl	120cc <__assert_fail@plt+0x1444>
   11c90:	cmp	r0, #0
   11c94:	beq	11ce4 <__assert_fail@plt+0x105c>
   11c98:	mov	sl, #0
   11c9c:	add	r7, r6, #29
   11ca0:	add	r8, sp, #8
   11ca4:	add	r9, sp, #4
   11ca8:	mov	r0, r6
   11cac:	bl	10bec <strlen@plt>
   11cb0:	ldr	r2, [sp, #8]
   11cb4:	ldr	r3, [sp, #4]
   11cb8:	add	r0, r6, r0
   11cbc:	mov	r1, r7
   11cc0:	strb	sl, [r0, #-1]
   11cc4:	mov	r0, r4
   11cc8:	bl	118c4 <__assert_fail@plt+0xc3c>
   11ccc:	mov	r0, r5
   11cd0:	mov	r1, r8
   11cd4:	mov	r2, r9
   11cd8:	bl	120cc <__assert_fail@plt+0x1444>
   11cdc:	cmp	r0, #0
   11ce0:	bne	11ca8 <__assert_fail@plt+0x1020>
   11ce4:	sub	sp, fp, #28
   11ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11cf0:	add	fp, sp, #24
   11cf4:	sub	sp, sp, #8
   11cf8:	mov	r2, r1
   11cfc:	movw	r1, #14499	; 0x38a3
   11d00:	mov	r5, r0
   11d04:	movt	r1, #1
   11d08:	mov	r0, r2
   11d0c:	bl	129b0 <__assert_fail@plt+0x1d28>
   11d10:	movw	r1, #15220	; 0x3b74
   11d14:	movw	r2, #15148	; 0x3b2c
   11d18:	movw	r3, #28939	; 0x710b
   11d1c:	mov	r4, r0
   11d20:	movt	r1, #1
   11d24:	movt	r2, #1
   11d28:	movt	r3, #1
   11d2c:	bl	10bf8 <fprintf@plt>
   11d30:	ldr	r2, [r5]
   11d34:	movw	r1, #15225	; 0x3b79
   11d38:	mov	r0, r4
   11d3c:	movt	r1, #1
   11d40:	bl	10bf8 <fprintf@plt>
   11d44:	ldr	r2, [r5, #4]
   11d48:	movw	r1, #15239	; 0x3b87
   11d4c:	mov	r0, r4
   11d50:	movt	r1, #1
   11d54:	bl	10bf8 <fprintf@plt>
   11d58:	mov	r0, r4
   11d5c:	mov	r1, r5
   11d60:	bl	11e60 <__assert_fail@plt+0x11d8>
   11d64:	movw	r0, #15261	; 0x3b9d
   11d68:	mov	r1, r4
   11d6c:	movt	r0, #1
   11d70:	bl	10c58 <fputs@plt>
   11d74:	movw	r3, #15274	; 0x3baa
   11d78:	mov	r7, #1
   11d7c:	mov	r8, #0
   11d80:	add	r1, r5, #8
   11d84:	mov	r0, r4
   11d88:	mov	r2, #50	; 0x32
   11d8c:	movt	r3, #1
   11d90:	str	r8, [sp]
   11d94:	str	r7, [sp, #4]
   11d98:	bl	11ec0 <__assert_fail@plt+0x1238>
   11d9c:	movw	r3, #15293	; 0x3bbd
   11da0:	add	r6, r5, #416	; 0x1a0
   11da4:	mov	r0, r4
   11da8:	mov	r2, #50	; 0x32
   11dac:	str	r8, [sp]
   11db0:	str	r7, [sp, #4]
   11db4:	movt	r3, #1
   11db8:	mov	r1, r6
   11dbc:	bl	11ec0 <__assert_fail@plt+0x1238>
   11dc0:	movw	r3, #15284	; 0x3bb4
   11dc4:	add	r1, r5, #824	; 0x338
   11dc8:	mov	r0, r4
   11dcc:	mov	r2, #10
   11dd0:	str	r7, [sp]
   11dd4:	str	r7, [sp, #4]
   11dd8:	movt	r3, #1
   11ddc:	bl	11ec0 <__assert_fail@plt+0x1238>
   11de0:	ldr	r0, [r5]
   11de4:	cmp	r0, #1
   11de8:	blt	11e50 <__assert_fail@plt+0x11c8>
   11dec:	movw	r3, #15307	; 0x3bcb
   11df0:	add	r1, r5, #920	; 0x398
   11df4:	mov	r0, r4
   11df8:	mov	r2, #8
   11dfc:	str	r8, [sp]
   11e00:	str	r8, [sp, #4]
   11e04:	movt	r3, #1
   11e08:	bl	11ec0 <__assert_fail@plt+0x1238>
   11e0c:	ldr	r0, [r5, #8]
   11e10:	cmp	r0, #1
   11e14:	blt	11e2c <__assert_fail@plt+0x11a4>
   11e18:	movw	r2, #15274	; 0x3baa
   11e1c:	add	r1, r5, #992	; 0x3e0
   11e20:	mov	r0, r4
   11e24:	movt	r2, #1
   11e28:	bl	11ffc <__assert_fail@plt+0x1374>
   11e2c:	ldr	r0, [r6]
   11e30:	cmp	r0, #1
   11e34:	blt	11e50 <__assert_fail@plt+0x11c8>
   11e38:	movw	r2, #15293	; 0x3bbd
   11e3c:	movw	r0, #9048	; 0x2358
   11e40:	add	r1, r5, r0
   11e44:	movt	r2, #1
   11e48:	mov	r0, r4
   11e4c:	bl	11ffc <__assert_fail@plt+0x1374>
   11e50:	mov	r0, r4
   11e54:	sub	sp, fp, #24
   11e58:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e5c:	b	12a28 <__assert_fail@plt+0x1da0>
   11e60:	mov	ip, r0
   11e64:	ldr	r0, [r1]
   11e68:	cmp	r0, #0
   11e6c:	beq	11ea8 <__assert_fail@plt+0x1220>
   11e70:	ldr	r1, [r1, #4]
   11e74:	vldr	d16, [pc, #60]	; 11eb8 <__assert_fail@plt+0x1230>
   11e78:	vmov	s2, r0
   11e7c:	sub	r1, r0, r1
   11e80:	mov	r0, ip
   11e84:	vmov	s0, r1
   11e88:	movw	r1, #15340	; 0x3bec
   11e8c:	vcvt.f64.s32	d17, s0
   11e90:	vcvt.f64.s32	d18, s2
   11e94:	movt	r1, #1
   11e98:	vmul.f64	d16, d17, d16
   11e9c:	vdiv.f64	d16, d16, d18
   11ea0:	vmov	r2, r3, d16
   11ea4:	b	10bf8 <fprintf@plt>
   11ea8:	movw	r0, #15331	; 0x3be3
   11eac:	mov	r1, ip
   11eb0:	movt	r0, #1
   11eb4:	b	10c58 <fputs@plt>
   11eb8:	andeq	r0, r0, r0
   11ebc:	subsmi	r0, r9, r0
   11ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec4:	add	fp, sp, #28
   11ec8:	sub	sp, sp, #4
   11ecc:	mov	r5, r1
   11ed0:	movw	r1, #15346	; 0x3bf2
   11ed4:	mov	r7, r2
   11ed8:	mov	r2, r3
   11edc:	mov	r4, r0
   11ee0:	movt	r1, #1
   11ee4:	bl	10bf8 <fprintf@plt>
   11ee8:	movw	r0, #15394	; 0x3c22
   11eec:	mov	r1, r4
   11ef0:	movt	r0, #1
   11ef4:	bl	10c58 <fputs@plt>
   11ef8:	movw	r0, #15421	; 0x3c3d
   11efc:	mov	r1, r4
   11f00:	movt	r0, #1
   11f04:	bl	10c58 <fputs@plt>
   11f08:	ldrb	sl, [fp, #8]
   11f0c:	movw	r0, #15351	; 0x3bf7
   11f10:	movw	r2, #15358	; 0x3bfe
   11f14:	movw	r1, #15347	; 0x3bf3
   11f18:	movt	r0, #1
   11f1c:	movt	r2, #1
   11f20:	movt	r1, #1
   11f24:	cmp	sl, #0
   11f28:	movne	r2, r0
   11f2c:	mov	r0, r4
   11f30:	bl	10bf8 <fprintf@plt>
   11f34:	ldr	r1, [fp, #12]
   11f38:	lsl	r0, r7, #16
   11f3c:	sxth	r6, r7
   11f40:	cmp	r0, #65536	; 0x10000
   11f44:	str	r1, [sp]
   11f48:	blt	11f94 <__assert_fail@plt+0x130c>
   11f4c:	movw	r8, #15365	; 0x3c05
   11f50:	mov	r7, #1
   11f54:	mov	r9, #1
   11f58:	movt	r8, #1
   11f5c:	mov	r1, r5
   11f60:	ldr	r0, [r1, r7, lsl #3]!
   11f64:	cmp	r0, #1
   11f68:	blt	11f84 <__assert_fail@plt+0x12fc>
   11f6c:	mov	r0, r4
   11f70:	bl	12128 <__assert_fail@plt+0x14a0>
   11f74:	mov	r0, r4
   11f78:	mov	r1, r8
   11f7c:	mov	r2, r7
   11f80:	bl	10bf8 <fprintf@plt>
   11f84:	add	r9, r9, #1
   11f88:	sxth	r7, r9
   11f8c:	cmp	r6, r7
   11f90:	bge	11f5c <__assert_fail@plt+0x12d4>
   11f94:	cmp	sl, #0
   11f98:	beq	11fc8 <__assert_fail@plt+0x1340>
   11f9c:	add	r1, r5, r6, lsl #3
   11fa0:	ldr	r0, [r1, #8]!
   11fa4:	cmp	r0, #1
   11fa8:	blt	11fc8 <__assert_fail@plt+0x1340>
   11fac:	mov	r0, r4
   11fb0:	bl	12128 <__assert_fail@plt+0x14a0>
   11fb4:	movw	r1, #15374	; 0x3c0e
   11fb8:	mov	r0, r4
   11fbc:	mov	r2, r6
   11fc0:	movt	r1, #1
   11fc4:	bl	10bf8 <fprintf@plt>
   11fc8:	ldr	r0, [sp]
   11fcc:	tst	r0, #255	; 0xff
   11fd0:	subeq	sp, fp, #28
   11fd4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fd8:	mov	r0, r4
   11fdc:	mov	r1, r5
   11fe0:	bl	12128 <__assert_fail@plt+0x14a0>
   11fe4:	movw	r0, #15315	; 0x3bd3
   11fe8:	mov	r1, r4
   11fec:	movt	r0, #1
   11ff0:	sub	sp, fp, #28
   11ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff8:	b	10c58 <fputs@plt>
   11ffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12000:	add	fp, sp, #24
   12004:	mov	r5, r0
   12008:	mov	r0, r1
   1200c:	mov	r6, r2
   12010:	mov	r4, r1
   12014:	bl	1237c <__assert_fail@plt+0x16f4>
   12018:	movw	r0, #8052	; 0x1f74
   1201c:	movw	r2, #8584	; 0x2188
   12020:	ldr	r0, [r4, r0]!
   12024:	movt	r2, #1
   12028:	mov	r7, r4
   1202c:	ldr	r1, [r7, #-4]!
   12030:	bl	13560 <error@@Base+0x7c0>
   12034:	movw	r1, #15346	; 0x3bf2
   12038:	mov	r0, r5
   1203c:	mov	r2, r6
   12040:	movt	r1, #1
   12044:	bl	10bf8 <fprintf@plt>
   12048:	movw	r0, #15394	; 0x3c22
   1204c:	mov	r1, r5
   12050:	movt	r0, #1
   12054:	bl	10c58 <fputs@plt>
   12058:	movw	r0, #15421	; 0x3c3d
   1205c:	mov	r1, r5
   12060:	movt	r0, #1
   12064:	bl	10c58 <fputs@plt>
   12068:	mov	r0, #10
   1206c:	mov	r1, r5
   12070:	bl	10c28 <fputc@plt>
   12074:	ldr	r0, [r4]
   12078:	cmp	r0, #1
   1207c:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   12080:	movw	r8, #15347	; 0x3bf3
   12084:	mov	r6, #0
   12088:	movt	r8, #1
   1208c:	ldr	r0, [r7]
   12090:	ldr	r0, [r0, r6, lsl #2]
   12094:	add	r1, r0, #12
   12098:	mov	r0, r5
   1209c:	bl	12128 <__assert_fail@plt+0x14a0>
   120a0:	ldr	r0, [r7]
   120a4:	mov	r1, r8
   120a8:	ldr	r0, [r0, r6, lsl #2]
   120ac:	ldr	r2, [r0, #8]
   120b0:	mov	r0, r5
   120b4:	bl	10bf8 <fprintf@plt>
   120b8:	ldr	r0, [r4]
   120bc:	add	r6, r6, #1
   120c0:	cmp	r6, r0
   120c4:	blt	1208c <__assert_fail@plt+0x1404>
   120c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120cc:	push	{r4, r5, fp, lr}
   120d0:	add	fp, sp, #8
   120d4:	mov	r4, r2
   120d8:	mov	r2, r0
   120dc:	movw	r0, #41104	; 0xa090
   120e0:	mov	r5, r1
   120e4:	mov	r1, #99	; 0x63
   120e8:	movt	r0, #2
   120ec:	bl	10b2c <fgets@plt>
   120f0:	cmp	r0, #0
   120f4:	moveq	r0, #0
   120f8:	popeq	{r4, r5, fp, pc}
   120fc:	movw	r0, #41104	; 0xa090
   12100:	movw	r1, #15323	; 0x3bdb
   12104:	mov	r2, r5
   12108:	mov	r3, r4
   1210c:	movt	r0, #2
   12110:	movt	r1, #1
   12114:	bl	10c04 <__isoc99_sscanf@plt>
   12118:	sub	r0, r0, #2
   1211c:	clz	r0, r0
   12120:	lsr	r0, r0, #5
   12124:	pop	{r4, r5, fp, pc}
   12128:	push	{r4, r5, fp, lr}
   1212c:	add	fp, sp, #8
   12130:	mov	r4, r0
   12134:	cmp	r1, #0
   12138:	beq	12164 <__assert_fail@plt+0x14dc>
   1213c:	ldm	r1, {r2, r3}
   12140:	mov	r5, r1
   12144:	movw	r1, #15383	; 0x3c17
   12148:	mov	r0, r4
   1214c:	movt	r1, #1
   12150:	bl	10bf8 <fprintf@plt>
   12154:	mov	r0, r4
   12158:	mov	r1, r5
   1215c:	bl	11e60 <__assert_fail@plt+0x11d8>
   12160:	b	12174 <__assert_fail@plt+0x14ec>
   12164:	movw	r0, #15394	; 0x3c22
   12168:	mov	r1, r4
   1216c:	movt	r0, #1
   12170:	bl	10c58 <fputs@plt>
   12174:	movw	r0, #15421	; 0x3c3d
   12178:	mov	r1, r4
   1217c:	movt	r0, #1
   12180:	pop	{r4, r5, fp, lr}
   12184:	b	10c58 <fputs@plt>
   12188:	ldr	r1, [r1, #8]
   1218c:	ldr	r0, [r0, #8]
   12190:	b	12934 <__assert_fail@plt+0x1cac>
   12194:	push	{r4, r5, r6, sl, fp, lr}
   12198:	add	fp, sp, #16
   1219c:	mov	r4, r0
   121a0:	movw	r6, #503	; 0x1f7
   121a4:	mov	r5, r0
   121a8:	mov	r0, r5
   121ac:	bl	11574 <__assert_fail@plt+0x8ec>
   121b0:	subs	r6, r6, #1
   121b4:	add	r5, r5, #16
   121b8:	bne	121a8 <__assert_fail@plt+0x1520>
   121bc:	movw	r0, #8052	; 0x1f74
   121c0:	mov	r1, #0
   121c4:	str	r1, [r4, r0]
   121c8:	movw	r0, #8048	; 0x1f70
   121cc:	str	r1, [r4, r0]
   121d0:	pop	{r4, r5, r6, sl, fp, pc}
   121d4:	push	{r4, r5, r6, sl, fp, lr}
   121d8:	add	fp, sp, #16
   121dc:	mov	r5, r1
   121e0:	ldrb	r1, [r1]
   121e4:	mov	r4, #0
   121e8:	mov	r2, #0
   121ec:	cmp	r1, #0
   121f0:	beq	12224 <__assert_fail@plt+0x159c>
   121f4:	add	r3, r5, #1
   121f8:	mov	r2, #0
   121fc:	uxtab	r2, r2, r1
   12200:	ldrb	r1, [r3], #1
   12204:	cmp	r1, #0
   12208:	bne	121fc <__assert_fail@plt+0x1574>
   1220c:	movw	r1, #20065	; 0x4e61
   12210:	movt	r1, #33354	; 0x824a
   12214:	umull	r1, r3, r2, r1
   12218:	lsr	r1, r3, #8
   1221c:	movw	r3, #503	; 0x1f7
   12220:	mls	r2, r1, r3, r2
   12224:	ldr	r6, [r0, r2, lsl #4]
   12228:	b	12244 <__assert_fail@plt+0x15bc>
   1222c:	ldr	r1, [r6, #8]
   12230:	mov	r0, r5
   12234:	bl	10afc <strcmp@plt>
   12238:	cmp	r0, #0
   1223c:	beq	12250 <__assert_fail@plt+0x15c8>
   12240:	ldr	r6, [r6, #4]
   12244:	cmp	r6, #0
   12248:	bne	1222c <__assert_fail@plt+0x15a4>
   1224c:	b	12254 <__assert_fail@plt+0x15cc>
   12250:	mov	r4, r6
   12254:	mov	r0, r4
   12258:	pop	{r4, r5, r6, sl, fp, pc}
   1225c:	push	{r4, r5, fp, lr}
   12260:	add	fp, sp, #8
   12264:	mov	r4, r0
   12268:	ldr	r0, [r1, #8]
   1226c:	ldrb	r2, [r0]
   12270:	cmp	r2, #0
   12274:	beq	122ac <__assert_fail@plt+0x1624>
   12278:	add	r3, r0, #1
   1227c:	mov	r0, #0
   12280:	uxtab	r0, r0, r2
   12284:	ldrb	r2, [r3], #1
   12288:	cmp	r2, #0
   1228c:	bne	12280 <__assert_fail@plt+0x15f8>
   12290:	movw	r2, #20065	; 0x4e61
   12294:	movt	r2, #33354	; 0x824a
   12298:	umull	r2, r3, r0, r2
   1229c:	lsr	r2, r3, #8
   122a0:	movw	r3, #503	; 0x1f7
   122a4:	mls	r0, r2, r3, r0
   122a8:	b	122b0 <__assert_fail@plt+0x1628>
   122ac:	mov	r0, #0
   122b0:	add	r0, r4, r0, lsl #4
   122b4:	bl	11580 <__assert_fail@plt+0x8f8>
   122b8:	movw	r0, #8048	; 0x1f70
   122bc:	mov	r5, r4
   122c0:	ldr	r0, [r5, r0]!
   122c4:	cmp	r0, #0
   122c8:	beq	122d8 <__assert_fail@plt+0x1650>
   122cc:	bl	10b14 <free@plt>
   122d0:	mov	r0, #0
   122d4:	str	r0, [r5]
   122d8:	movw	r0, #8052	; 0x1f74
   122dc:	ldr	r0, [r4, r0]!
   122e0:	add	r0, r0, #1
   122e4:	str	r0, [r4]
   122e8:	pop	{r4, r5, fp, pc}
   122ec:	push	{r4, r5, fp, lr}
   122f0:	add	fp, sp, #8
   122f4:	mov	r4, r0
   122f8:	ldr	r0, [r1, #8]
   122fc:	ldrb	r2, [r0]
   12300:	cmp	r2, #0
   12304:	beq	1233c <__assert_fail@plt+0x16b4>
   12308:	add	r3, r0, #1
   1230c:	mov	r0, #0
   12310:	uxtab	r0, r0, r2
   12314:	ldrb	r2, [r3], #1
   12318:	cmp	r2, #0
   1231c:	bne	12310 <__assert_fail@plt+0x1688>
   12320:	movw	r2, #20065	; 0x4e61
   12324:	movt	r2, #33354	; 0x824a
   12328:	umull	r2, r3, r0, r2
   1232c:	lsr	r2, r3, #8
   12330:	movw	r3, #503	; 0x1f7
   12334:	mls	r0, r2, r3, r0
   12338:	b	12340 <__assert_fail@plt+0x16b8>
   1233c:	mov	r0, #0
   12340:	add	r0, r4, r0, lsl #4
   12344:	bl	11608 <__assert_fail@plt+0x980>
   12348:	movw	r0, #8048	; 0x1f70
   1234c:	mov	r5, r4
   12350:	ldr	r0, [r5, r0]!
   12354:	cmp	r0, #0
   12358:	beq	12368 <__assert_fail@plt+0x16e0>
   1235c:	bl	10b14 <free@plt>
   12360:	mov	r0, #0
   12364:	str	r0, [r5]
   12368:	movw	r0, #8052	; 0x1f74
   1236c:	ldr	r0, [r4, r0]!
   12370:	sub	r0, r0, #1
   12374:	str	r0, [r4]
   12378:	pop	{r4, r5, fp, pc}
   1237c:	push	{r4, r5, fp, lr}
   12380:	add	fp, sp, #8
   12384:	mov	r4, r0
   12388:	movw	r0, #8048	; 0x1f70
   1238c:	mov	r5, r4
   12390:	ldr	r0, [r5, r0]!
   12394:	cmp	r0, #0
   12398:	bne	123f0 <__assert_fail@plt+0x1768>
   1239c:	movw	r0, #8052	; 0x1f74
   123a0:	ldr	r0, [r4, r0]
   123a4:	cmp	r0, #0
   123a8:	popeq	{r4, r5, fp, pc}
   123ac:	mov	r1, #4
   123b0:	bl	12914 <__assert_fail@plt+0x1c8c>
   123b4:	str	r0, [r5]
   123b8:	mov	r0, #0
   123bc:	movw	ip, #503	; 0x1f7
   123c0:	mov	r2, #0
   123c4:	ldr	r3, [r4, r2, lsl #4]
   123c8:	b	123dc <__assert_fail@plt+0x1754>
   123cc:	ldr	r1, [r5]
   123d0:	str	r3, [r1, r0, lsl #2]
   123d4:	add	r0, r0, #1
   123d8:	ldr	r3, [r3, #4]
   123dc:	cmp	r3, #0
   123e0:	bne	123cc <__assert_fail@plt+0x1744>
   123e4:	add	r2, r2, #1
   123e8:	cmp	r2, ip
   123ec:	bne	123c4 <__assert_fail@plt+0x173c>
   123f0:	pop	{r4, r5, fp, pc}
   123f4:	push	{r4, r5, r6, r7, fp, lr}
   123f8:	add	fp, sp, #16
   123fc:	mov	r5, r1
   12400:	mov	r4, r0
   12404:	movw	r7, #503	; 0x1f7
   12408:	mov	r6, r0
   1240c:	mov	r0, r6
   12410:	mov	r1, r5
   12414:	bl	116d4 <__assert_fail@plt+0xa4c>
   12418:	subs	r7, r7, #1
   1241c:	add	r6, r6, #16
   12420:	bne	1240c <__assert_fail@plt+0x1784>
   12424:	movw	r0, #8048	; 0x1f70
   12428:	mov	r5, r4
   1242c:	ldr	r0, [r5, r0]!
   12430:	cmp	r0, #0
   12434:	beq	12444 <__assert_fail@plt+0x17bc>
   12438:	bl	10b14 <free@plt>
   1243c:	mov	r0, #0
   12440:	str	r0, [r5]
   12444:	movw	r0, #8052	; 0x1f74
   12448:	mov	r1, #0
   1244c:	str	r1, [r4, r0]
   12450:	pop	{r4, r5, r6, r7, fp, pc}
   12454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12458:	add	fp, sp, #28
   1245c:	sub	sp, sp, #20
   12460:	ldr	sl, [r1]
   12464:	str	r0, [sp]
   12468:	cmp	sl, #0
   1246c:	str	sl, [sp, #8]
   12470:	beq	127d0 <__assert_fail@plt+0x1b48>
   12474:	add	r9, sp, #4
   12478:	b	12488 <__assert_fail@plt+0x1800>
   1247c:	cmp	r0, #29
   12480:	beq	12700 <__assert_fail@plt+0x1a78>
   12484:	b	127c0 <__assert_fail@plt+0x1b38>
   12488:	mov	r7, #17
   1248c:	mov	r6, r9
   12490:	mov	r0, r6
   12494:	mov	r8, r7
   12498:	bl	12858 <__assert_fail@plt+0x1bd0>
   1249c:	mov	r6, r0
   124a0:	bl	128a4 <__assert_fail@plt+0x1c1c>
   124a4:	mov	r7, r0
   124a8:	mov	r0, r6
   124ac:	bl	12858 <__assert_fail@plt+0x1bd0>
   124b0:	mov	r5, r0
   124b4:	bl	128a4 <__assert_fail@plt+0x1c1c>
   124b8:	mov	r4, r0
   124bc:	mov	r0, r5
   124c0:	bl	12858 <__assert_fail@plt+0x1bd0>
   124c4:	bl	128a4 <__assert_fail@plt+0x1c1c>
   124c8:	cmp	r7, #1
   124cc:	cmpeq	r4, #2
   124d0:	beq	1263c <__assert_fail@plt+0x19b4>
   124d4:	sub	r1, r7, #1
   124d8:	cmp	r1, #3
   124dc:	subcs	r1, r4, #1
   124e0:	cmpcs	r1, #3
   124e4:	bcc	126bc <__assert_fail@plt+0x1a34>
   124e8:	orr	r2, r7, #1
   124ec:	orr	r1, r4, #1
   124f0:	cmp	r2, #9
   124f4:	cmpeq	r1, #9
   124f8:	beq	1263c <__assert_fail@plt+0x19b4>
   124fc:	cmp	r2, #9
   12500:	bne	12528 <__assert_fail@plt+0x18a0>
   12504:	cmp	r4, #13
   12508:	bhi	12528 <__assert_fail@plt+0x18a0>
   1250c:	mov	r3, #1
   12510:	mov	r5, #13312	; 0x3400
   12514:	tst	r5, r3, lsl r4
   12518:	beq	12528 <__assert_fail@plt+0x18a0>
   1251c:	orr	r3, r0, #1
   12520:	cmp	r3, #9
   12524:	beq	1263c <__assert_fail@plt+0x19b4>
   12528:	orr	r3, r8, #1
   1252c:	cmp	r3, #9
   12530:	bne	12554 <__assert_fail@plt+0x18cc>
   12534:	cmp	r7, #13
   12538:	bhi	12554 <__assert_fail@plt+0x18cc>
   1253c:	mov	r3, #1
   12540:	mov	r5, #13312	; 0x3400
   12544:	tst	r5, r3, lsl r7
   12548:	beq	12554 <__assert_fail@plt+0x18cc>
   1254c:	cmp	r1, #9
   12550:	beq	1263c <__assert_fail@plt+0x19b4>
   12554:	cmp	r7, #8
   12558:	cmpeq	r4, #10
   1255c:	beq	1263c <__assert_fail@plt+0x19b4>
   12560:	cmp	r7, #8
   12564:	cmpeq	r4, #11
   12568:	beq	12628 <__assert_fail@plt+0x19a0>
   1256c:	cmp	r8, #8
   12570:	cmpeq	r7, #11
   12574:	beq	12634 <__assert_fail@plt+0x19ac>
   12578:	sub	r2, r2, #9
   1257c:	sub	r3, r7, #15
   12580:	clz	r2, r2
   12584:	clz	r3, r3
   12588:	lsr	ip, r2, #5
   1258c:	sub	r2, r4, #15
   12590:	lsr	r3, r3, #5
   12594:	clz	r2, r2
   12598:	orr	r5, r3, ip
   1259c:	lsr	r2, r2, #5
   125a0:	tst	r5, r2
   125a4:	subeq	r1, r1, #9
   125a8:	clzeq	r1, r1
   125ac:	lsreq	r1, r1, #5
   125b0:	andseq	r1, r3, r1
   125b4:	bne	1263c <__assert_fail@plt+0x19b4>
   125b8:	cmp	r8, #15
   125bc:	bne	125ec <__assert_fail@plt+0x1964>
   125c0:	orr	r2, r7, #2
   125c4:	sub	r1, r7, #10
   125c8:	sub	r2, r2, #14
   125cc:	clz	r1, r1
   125d0:	clz	r2, r2
   125d4:	lsr	r1, r1, #5
   125d8:	lsr	r2, r2, #5
   125dc:	orr	r1, r1, r2
   125e0:	cmp	r1, #1
   125e4:	cmpeq	r4, #15
   125e8:	beq	1263c <__assert_fail@plt+0x19b4>
   125ec:	cmp	r7, #15
   125f0:	bne	1264c <__assert_fail@plt+0x19c4>
   125f4:	orr	r2, r4, #2
   125f8:	sub	r1, r4, #10
   125fc:	sub	r2, r2, #14
   12600:	clz	r1, r1
   12604:	clz	r2, r2
   12608:	lsr	r1, r1, #5
   1260c:	lsr	r2, r2, #5
   12610:	orr	r1, r1, r2
   12614:	cmp	r1, #1
   12618:	bne	12658 <__assert_fail@plt+0x19d0>
   1261c:	cmp	r0, #15
   12620:	beq	1263c <__assert_fail@plt+0x19b4>
   12624:	b	12658 <__assert_fail@plt+0x19d0>
   12628:	cmp	r0, #8
   1262c:	beq	1263c <__assert_fail@plt+0x19b4>
   12630:	b	1256c <__assert_fail@plt+0x18e4>
   12634:	cmp	r4, #8
   12638:	bne	12578 <__assert_fail@plt+0x18f0>
   1263c:	ldr	r0, [r6, #4]
   12640:	cmp	r0, #0
   12644:	bne	12490 <__assert_fail@plt+0x1808>
   12648:	b	126c4 <__assert_fail@plt+0x1a3c>
   1264c:	cmp	r7, #7
   12650:	cmpeq	r4, #7
   12654:	beq	1263c <__assert_fail@plt+0x19b4>
   12658:	cmp	r4, #16
   1265c:	bne	12688 <__assert_fail@plt+0x1a00>
   12660:	orr	r0, r7, #8
   12664:	sub	r1, r7, #16
   12668:	sub	r0, r0, #15
   1266c:	clz	r1, r1
   12670:	clz	r0, r0
   12674:	lsr	r1, r1, #5
   12678:	lsr	r0, r0, #5
   1267c:	orr	r0, r0, ip
   12680:	orrs	r0, r1, r0
   12684:	bne	1263c <__assert_fail@plt+0x19b4>
   12688:	cmp	r7, #16
   1268c:	bne	126b0 <__assert_fail@plt+0x1a28>
   12690:	cmp	r4, #16
   12694:	bhi	126bc <__assert_fail@plt+0x1a34>
   12698:	movw	r1, #33664	; 0x8380
   1269c:	mov	r0, #1
   126a0:	movt	r1, #1
   126a4:	tst	r1, r0, lsl r4
   126a8:	bne	1263c <__assert_fail@plt+0x19b4>
   126ac:	b	126bc <__assert_fail@plt+0x1a34>
   126b0:	cmp	r7, #5
   126b4:	cmpeq	r4, #5
   126b8:	beq	1263c <__assert_fail@plt+0x19b4>
   126bc:	cmp	r6, #0
   126c0:	beq	127d0 <__assert_fail@plt+0x1b48>
   126c4:	mov	r7, r6
   126c8:	ldr	r6, [r6, #4]
   126cc:	cmp	r6, #0
   126d0:	beq	126e8 <__assert_fail@plt+0x1a60>
   126d4:	mov	r0, r6
   126d8:	bl	128a4 <__assert_fail@plt+0x1c1c>
   126dc:	orr	r0, r0, #2
   126e0:	cmp	r0, #6
   126e4:	beq	126c4 <__assert_fail@plt+0x1a3c>
   126e8:	ldr	r0, [sl, #12]
   126ec:	bl	10b20 <utf8proc_get_property@plt>
   126f0:	ldrsh	r0, [r0]
   126f4:	sub	r1, r0, #1
   126f8:	cmp	r1, #12
   126fc:	bcs	1247c <__assert_fail@plt+0x17f4>
   12700:	ldr	r5, [r7, #4]
   12704:	cmp	r5, sl
   12708:	beq	12778 <__assert_fail@plt+0x1af0>
   1270c:	mov	r4, #0
   12710:	mov	r6, sl
   12714:	cmp	r6, #0
   12718:	beq	127d8 <__assert_fail@plt+0x1b50>
   1271c:	ldr	r0, [r6, #12]
   12720:	mov	r1, r9
   12724:	bl	10b38 <utf8proc_encode_char@plt>
   12728:	cmp	r0, #0
   1272c:	beq	127f8 <__assert_fail@plt+0x1b70>
   12730:	ldr	r6, [r6, #4]
   12734:	add	r4, r0, r4
   12738:	cmp	r6, r5
   1273c:	bne	12714 <__assert_fail@plt+0x1a8c>
   12740:	add	r0, r4, #1
   12744:	bl	10b98 <malloc@plt>
   12748:	mov	r4, r0
   1274c:	mov	r6, #0
   12750:	cmp	sl, #0
   12754:	beq	12818 <__assert_fail@plt+0x1b90>
   12758:	ldr	r0, [sl, #12]
   1275c:	add	r1, r4, r6
   12760:	bl	10b38 <utf8proc_encode_char@plt>
   12764:	ldr	sl, [sl, #4]
   12768:	add	r6, r0, r6
   1276c:	cmp	sl, r5
   12770:	bne	12750 <__assert_fail@plt+0x1ac8>
   12774:	b	12788 <__assert_fail@plt+0x1b00>
   12778:	mov	r0, #1
   1277c:	bl	10b98 <malloc@plt>
   12780:	mov	r4, r0
   12784:	mov	r6, #0
   12788:	mov	r0, #0
   1278c:	mov	r1, #12
   12790:	strb	r0, [r4, r6]
   12794:	mov	r0, #1
   12798:	bl	12914 <__assert_fail@plt+0x1c8c>
   1279c:	mov	r5, r0
   127a0:	mov	r0, r4
   127a4:	bl	10c1c <utf8proc_NFC@plt>
   127a8:	str	r0, [r5, #8]
   127ac:	ldr	r0, [sp]
   127b0:	mov	r1, r5
   127b4:	bl	115e0 <__assert_fail@plt+0x958>
   127b8:	mov	r0, r4
   127bc:	bl	10b14 <free@plt>
   127c0:	ldr	sl, [r7, #4]
   127c4:	cmp	sl, #0
   127c8:	str	sl, [sp, #8]
   127cc:	bne	12488 <__assert_fail@plt+0x1800>
   127d0:	sub	sp, fp, #28
   127d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d8:	movw	r0, #28551	; 0x6f87
   127dc:	movw	r1, #28544	; 0x6f80
   127e0:	movw	r3, #28567	; 0x6f97
   127e4:	mov	r2, #249	; 0xf9
   127e8:	movt	r0, #1
   127ec:	movt	r1, #1
   127f0:	movt	r3, #1
   127f4:	bl	10c88 <__assert_fail@plt>
   127f8:	movw	r0, #28593	; 0x6fb1
   127fc:	movw	r1, #28544	; 0x6f80
   12800:	movw	r3, #28567	; 0x6f97
   12804:	mov	r2, #253	; 0xfd
   12808:	movt	r0, #1
   1280c:	movt	r1, #1
   12810:	movt	r3, #1
   12814:	bl	10c88 <__assert_fail@plt>
   12818:	movw	r0, #28551	; 0x6f87
   1281c:	movw	r1, #28544	; 0x6f80
   12820:	movw	r3, #28612	; 0x6fc4
   12824:	movw	r2, #269	; 0x10d
   12828:	movt	r0, #1
   1282c:	movt	r1, #1
   12830:	movt	r3, #1
   12834:	bl	10c88 <__assert_fail@plt>
   12838:	push	{r4, sl, fp, lr}
   1283c:	add	fp, sp, #8
   12840:	mov	r4, r0
   12844:	ldr	r0, [r0, #8]
   12848:	bl	10b14 <free@plt>
   1284c:	mov	r0, r4
   12850:	pop	{r4, sl, fp, lr}
   12854:	b	10b14 <free@plt>
   12858:	push	{r4, r5, fp, lr}
   1285c:	add	fp, sp, #8
   12860:	mov	r4, #0
   12864:	cmp	r0, #0
   12868:	beq	1289c <__assert_fail@plt+0x1c14>
   1286c:	ldr	r5, [r0, #4]
   12870:	b	1288c <__assert_fail@plt+0x1c04>
   12874:	mov	r0, r5
   12878:	bl	128a4 <__assert_fail@plt+0x1c1c>
   1287c:	orr	r0, r0, #2
   12880:	cmp	r0, #6
   12884:	bne	12898 <__assert_fail@plt+0x1c10>
   12888:	ldr	r5, [r5, #4]
   1288c:	cmp	r5, #0
   12890:	bne	12874 <__assert_fail@plt+0x1bec>
   12894:	b	1289c <__assert_fail@plt+0x1c14>
   12898:	mov	r4, r5
   1289c:	mov	r0, r4
   128a0:	pop	{r4, r5, fp, pc}
   128a4:	push	{r4, sl, fp, lr}
   128a8:	add	fp, sp, #8
   128ac:	cmp	r0, #0
   128b0:	moveq	r0, #18
   128b4:	popeq	{r4, sl, fp, pc}
   128b8:	ldr	lr, [r0, #12]
   128bc:	movw	ip, #15428	; 0x3c44
   128c0:	mov	r3, #0
   128c4:	movw	r2, #1092	; 0x444
   128c8:	movt	ip, #1
   128cc:	sub	r0, r2, r3
   128d0:	add	r1, r3, r0, lsr #1
   128d4:	add	r0, r1, r1, lsl #1
   128d8:	ldr	r4, [ip, r0, lsl #2]
   128dc:	cmp	r4, lr
   128e0:	bls	128f8 <__assert_fail@plt+0x1c70>
   128e4:	sub	r2, r1, #1
   128e8:	cmp	r2, r3
   128ec:	movcc	r0, #0
   128f0:	popcc	{r4, sl, fp, pc}
   128f4:	b	128cc <__assert_fail@plt+0x1c44>
   128f8:	add	r0, ip, r0, lsl #2
   128fc:	ldr	r3, [r0, #4]
   12900:	cmp	r3, lr
   12904:	ldrcs	r0, [r0, #8]
   12908:	popcs	{r4, sl, fp, pc}
   1290c:	add	r3, r1, #1
   12910:	b	128e8 <__assert_fail@plt+0x1c60>
   12914:	push	{fp, lr}
   12918:	mov	fp, sp
   1291c:	bl	10af0 <calloc@plt>
   12920:	cmp	r0, #0
   12924:	popne	{fp, pc}
   12928:	movw	r0, #28636	; 0x6fdc
   1292c:	movt	r0, #1
   12930:	bl	12da0 <error@@Base>
   12934:	push	{r4, r5, r6, sl, fp, lr}
   12938:	add	fp, sp, #16
   1293c:	ldrb	r3, [r0]
   12940:	ldrb	ip, [r1]
   12944:	mov	r2, r0
   12948:	mov	r0, #0
   1294c:	cmp	r3, #0
   12950:	beq	12988 <__assert_fail@plt+0x1d00>
   12954:	add	r6, r2, #1
   12958:	add	lr, r1, #1
   1295c:	mov	r2, #0
   12960:	uxtb	r4, ip
   12964:	uxtb	r5, r3
   12968:	cmp	r5, r4
   1296c:	bne	12998 <__assert_fail@plt+0x1d10>
   12970:	ldrb	r3, [r6, r2]
   12974:	ldrb	ip, [lr, r2]
   12978:	add	r2, r2, #1
   1297c:	cmp	r3, #0
   12980:	bne	12960 <__assert_fail@plt+0x1cd8>
   12984:	b	1298c <__assert_fail@plt+0x1d04>
   12988:	mov	r2, #0
   1298c:	cmp	ip, #0
   12990:	popeq	{r4, r5, r6, sl, fp, pc}
   12994:	mov	r3, #0
   12998:	ldrb	r1, [r1, r2]
   1299c:	uxtb	r2, r3
   129a0:	mov	r0, #1
   129a4:	cmp	r2, r1
   129a8:	mvncc	r0, #0
   129ac:	pop	{r4, r5, r6, sl, fp, pc}
   129b0:	push	{r4, r5, fp, lr}
   129b4:	add	fp, sp, #8
   129b8:	mov	r5, r1
   129bc:	cmp	r0, #0
   129c0:	beq	129f4 <__assert_fail@plt+0x1d6c>
   129c4:	mov	r1, r5
   129c8:	mov	r4, r0
   129cc:	bl	10b08 <fopen@plt>
   129d0:	cmp	r0, #0
   129d4:	popne	{r4, r5, fp, pc}
   129d8:	ldrb	r0, [r5]
   129dc:	cmp	r0, #119	; 0x77
   129e0:	bne	12a18 <__assert_fail@plt+0x1d90>
   129e4:	movw	r0, #28662	; 0x6ff6
   129e8:	mov	r1, r4
   129ec:	movt	r0, #1
   129f0:	bl	12de0 <error@@Base+0x40>
   129f4:	ldrb	r0, [r5]
   129f8:	movw	r1, #33000	; 0x80e8
   129fc:	movw	r2, #33004	; 0x80ec
   12a00:	movt	r1, #2
   12a04:	movt	r2, #2
   12a08:	cmp	r0, #114	; 0x72
   12a0c:	moveq	r2, r1
   12a10:	ldr	r0, [r2]
   12a14:	pop	{r4, r5, fp, pc}
   12a18:	movw	r0, #28684	; 0x700c
   12a1c:	mov	r1, r4
   12a20:	movt	r0, #1
   12a24:	bl	12de0 <error@@Base+0x40>
   12a28:	movw	r1, #33000	; 0x80e8
   12a2c:	movt	r1, #2
   12a30:	ldr	r1, [r1]
   12a34:	cmp	r1, r0
   12a38:	movwne	r1, #33004	; 0x80ec
   12a3c:	movtne	r1, #2
   12a40:	ldrne	r1, [r1]
   12a44:	cmpne	r1, r0
   12a48:	bxeq	lr
   12a4c:	b	10c10 <fclose@plt>
   12a50:	push	{fp, lr}
   12a54:	mov	fp, sp
   12a58:	sub	sp, sp, #88	; 0x58
   12a5c:	mov	r1, sp
   12a60:	bl	136e4 <error@@Base+0x944>
   12a64:	clz	r0, r0
   12a68:	lsr	r0, r0, #5
   12a6c:	mov	sp, fp
   12a70:	pop	{fp, pc}
   12a74:	push	{r4, sl, fp, lr}
   12a78:	add	fp, sp, #8
   12a7c:	movw	r0, #41204	; 0xa0f4
   12a80:	movt	r0, #2
   12a84:	ldrh	r1, [r0]
   12a88:	add	r1, r1, #1
   12a8c:	strh	r1, [r0]
   12a90:	sxth	r0, r1
   12a94:	bl	12aa8 <__assert_fail@plt+0x1e20>
   12a98:	mov	r4, r0
   12a9c:	bl	10b5c <unlink@plt>
   12aa0:	mov	r0, r4
   12aa4:	pop	{r4, sl, fp, pc}
   12aa8:	push	{r4, r5, fp, lr}
   12aac:	add	fp, sp, #8
   12ab0:	sub	sp, sp, #104	; 0x68
   12ab4:	mov	r4, r0
   12ab8:	movw	r0, #960	; 0x3c0
   12abc:	movt	r0, #3
   12ac0:	ldr	r5, [r0]
   12ac4:	bl	10bc8 <getpid@plt>
   12ac8:	movw	r1, #28725	; 0x7035
   12acc:	mov	r3, r0
   12ad0:	sxth	r0, r4
   12ad4:	add	r4, sp, #4
   12ad8:	mov	r2, r5
   12adc:	str	r0, [sp]
   12ae0:	movt	r1, #1
   12ae4:	mov	r0, r4
   12ae8:	bl	10c34 <sprintf@plt>
   12aec:	mov	r0, r4
   12af0:	bl	10b44 <strdup@plt>
   12af4:	sub	sp, fp, #8
   12af8:	pop	{r4, r5, fp, pc}
   12afc:	push	{r4, sl, fp, lr}
   12b00:	add	fp, sp, #8
   12b04:	mov	r4, r0
   12b08:	bl	10bec <strlen@plt>
   12b0c:	sub	r0, r0, #1
   12b10:	sxth	r0, r0
   12b14:	cmp	r0, #0
   12b18:	blt	12b28 <__assert_fail@plt+0x1ea0>
   12b1c:	ldrb	r1, [r4, r0]
   12b20:	cmp	r1, #47	; 0x2f
   12b24:	bne	12b0c <__assert_fail@plt+0x1e84>
   12b28:	add	r0, r4, r0
   12b2c:	add	r0, r0, #1
   12b30:	pop	{r4, sl, fp, pc}
   12b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b38:	add	fp, sp, #28
   12b3c:	sub	sp, sp, #12
   12b40:	str	r2, [sp]
   12b44:	stmib	sp, {r0, r1}
   12b48:	mov	r6, r3
   12b4c:	ldr	r4, [r1]
   12b50:	mov	r0, r4
   12b54:	bl	10bec <strlen@plt>
   12b58:	sub	r0, r0, #1
   12b5c:	sxth	r0, r0
   12b60:	cmp	r0, #0
   12b64:	blt	12b74 <__assert_fail@plt+0x1eec>
   12b68:	ldrb	r1, [r4, r0]
   12b6c:	cmp	r1, #47	; 0x2f
   12b70:	bne	12b58 <__assert_fail@plt+0x1ed0>
   12b74:	add	r0, r4, r0
   12b78:	movw	r1, #960	; 0x3c0
   12b7c:	movw	r4, #11880	; 0x2e68
   12b80:	add	r0, r0, #1
   12b84:	movt	r1, #3
   12b88:	movt	r4, #1
   12b8c:	str	r0, [r1]
   12b90:	mov	r0, #2
   12b94:	mov	r1, r4
   12b98:	bl	10bb0 <__sysv_signal@plt>
   12b9c:	mov	r0, #15
   12ba0:	mov	r1, r4
   12ba4:	bl	10bb0 <__sysv_signal@plt>
   12ba8:	ldr	r0, [sp, #4]
   12bac:	ldr	r5, [r0]
   12bb0:	cmp	r5, #1
   12bb4:	bne	12bcc <__assert_fail@plt+0x1f44>
   12bb8:	movw	r0, #32980	; 0x80d4
   12bbc:	movt	r0, #2
   12bc0:	ldrb	r0, [r0]
   12bc4:	cmp	r0, #0
   12bc8:	bne	12d48 <__assert_fail@plt+0x20c0>
   12bcc:	ldr	ip, [sp, #8]
   12bd0:	mov	r8, #0
   12bd4:	cmp	r5, #2
   12bd8:	blt	12d24 <__assert_fail@plt+0x209c>
   12bdc:	mov	r8, #0
   12be0:	mov	r7, #1
   12be4:	mov	r9, #1
   12be8:	ldr	r4, [ip, r7, lsl #2]
   12bec:	ldrb	r0, [r4]
   12bf0:	cmp	r0, #45	; 0x2d
   12bf4:	bne	12ccc <__assert_fail@plt+0x2044>
   12bf8:	ldrb	sl, [r4, #1]
   12bfc:	cmp	sl, #0
   12c00:	beq	12ccc <__assert_fail@plt+0x2044>
   12c04:	mov	r0, r4
   12c08:	bl	10bec <strlen@plt>
   12c0c:	mov	r2, r0
   12c10:	movw	r0, #28754	; 0x7052
   12c14:	mov	r1, r4
   12c18:	movt	r0, #1
   12c1c:	bl	10c64 <strncmp@plt>
   12c20:	cmp	r0, #0
   12c24:	beq	12d48 <__assert_fail@plt+0x20c0>
   12c28:	ldr	ip, [sp, #8]
   12c2c:	add	r1, r7, #1
   12c30:	mov	r0, #0
   12c34:	cmp	r1, r5
   12c38:	ldrlt	r0, [ip, r1, lsl #2]
   12c3c:	cmp	r6, #0
   12c40:	ldrbne	r2, [r6]
   12c44:	cmpne	r2, #0
   12c48:	beq	12d38 <__assert_fail@plt+0x20b0>
   12c4c:	mov	r1, #0
   12c50:	cmp	sl, r2
   12c54:	beq	12c7c <__assert_fail@plt+0x1ff4>
   12c58:	mov	r2, #1
   12c5c:	sxth	r1, r2
   12c60:	add	r3, r1, r1, lsl #1
   12c64:	ldrb	r3, [r6, r3, lsl #2]
   12c68:	cmp	r3, #0
   12c6c:	beq	12d38 <__assert_fail@plt+0x20b0>
   12c70:	add	r2, r2, #1
   12c74:	cmp	sl, r3
   12c78:	bne	12c5c <__assert_fail@plt+0x1fd4>
   12c7c:	add	r1, r1, r1, lsl #1
   12c80:	add	r3, r6, r1, lsl #2
   12c84:	ldr	r1, [r3, #4]
   12c88:	cmp	r1, #0
   12c8c:	beq	12cec <__assert_fail@plt+0x2064>
   12c90:	mov	r2, r4
   12c94:	cmp	r0, #0
   12c98:	ldrb	r7, [r2, #2]!
   12c9c:	cmpeq	r7, #0
   12ca0:	beq	12cec <__assert_fail@plt+0x2064>
   12ca4:	ldr	r3, [r1]
   12ca8:	cmp	r3, #0
   12cac:	bne	12d50 <__assert_fail@plt+0x20c8>
   12cb0:	cmp	r7, #0
   12cb4:	movne	r0, r2
   12cb8:	str	r0, [r1]
   12cbc:	ldrb	r0, [r2]
   12cc0:	cmp	r0, #0
   12cc4:	addeq	r9, r9, #1
   12cc8:	b	12cd8 <__assert_fail@plt+0x2050>
   12ccc:	sxth	r0, r8
   12cd0:	add	r8, r8, #1
   12cd4:	str	r4, [ip, r0, lsl #2]
   12cd8:	add	r9, r9, #1
   12cdc:	sxth	r7, r9
   12ce0:	cmp	r5, r7
   12ce4:	bgt	12be8 <__assert_fail@plt+0x1f60>
   12ce8:	b	12d24 <__assert_fail@plt+0x209c>
   12cec:	ldr	r0, [r3, #8]
   12cf0:	cmp	r0, #0
   12cf4:	beq	12d38 <__assert_fail@plt+0x20b0>
   12cf8:	ldrb	r1, [r4, #2]
   12cfc:	cmp	r1, #0
   12d00:	bne	12d38 <__assert_fail@plt+0x20b0>
   12d04:	ldrb	r1, [r0]
   12d08:	cmp	r1, #0
   12d0c:	bne	12d50 <__assert_fail@plt+0x20c8>
   12d10:	mov	r1, #1
   12d14:	strb	r1, [r0]
   12d18:	ldr	r0, [sp, #4]
   12d1c:	ldr	r5, [r0]
   12d20:	b	12cd8 <__assert_fail@plt+0x2050>
   12d24:	ldr	r1, [sp, #4]
   12d28:	sxth	r0, r8
   12d2c:	str	r0, [r1]
   12d30:	sub	sp, fp, #28
   12d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d38:	movw	r0, #28775	; 0x7067
   12d3c:	mov	r1, r4
   12d40:	movt	r0, #1
   12d44:	bl	12de0 <error@@Base+0x40>
   12d48:	ldr	r0, [sp]
   12d4c:	bl	12e98 <error@@Base+0xf8>
   12d50:	movw	r0, #28790	; 0x7076
   12d54:	mov	r1, r4
   12d58:	movt	r0, #1
   12d5c:	bl	12de0 <error@@Base+0x40>
   12d60:	push	{fp, lr}
   12d64:	mov	fp, sp
   12d68:	mov	r0, #0
   12d6c:	bl	12d70 <__assert_fail@plt+0x20e8>
   12d70:	push	{fp, lr}
   12d74:	mov	fp, sp
   12d78:	mov	r4, r0
   12d7c:	movw	r0, #964	; 0x3c4
   12d80:	movt	r0, #3
   12d84:	ldr	r0, [r0]
   12d88:	cmp	r0, #0
   12d8c:	beq	12d94 <__assert_fail@plt+0x210c>
   12d90:	blx	r0
   12d94:	bl	12ee8 <error@@Base+0x148>
   12d98:	mov	r0, r4
   12d9c:	bl	10bd4 <exit@plt>

00012da0 <error@@Base>:
   12da0:	push	{fp, lr}
   12da4:	mov	fp, sp
   12da8:	mov	r3, r0
   12dac:	movw	r0, #960	; 0x3c0
   12db0:	movw	r1, #28704	; 0x7020
   12db4:	movt	r0, #3
   12db8:	movt	r1, #1
   12dbc:	ldr	r2, [r0]
   12dc0:	movw	r0, #32992	; 0x80e0
   12dc4:	movt	r0, #2
   12dc8:	ldr	r0, [r0]
   12dcc:	bl	10bf8 <fprintf@plt>
   12dd0:	movw	r0, #32984	; 0x80d8
   12dd4:	movt	r0, #2
   12dd8:	ldr	r0, [r0]
   12ddc:	bl	12d70 <__assert_fail@plt+0x20e8>
   12de0:	push	{fp, lr}
   12de4:	mov	fp, sp
   12de8:	sub	sp, sp, #8
   12dec:	mov	r3, r0
   12df0:	movw	r0, #960	; 0x3c0
   12df4:	str	r1, [sp]
   12df8:	movw	r1, #28712	; 0x7028
   12dfc:	movt	r0, #3
   12e00:	movt	r1, #1
   12e04:	ldr	r2, [r0]
   12e08:	movw	r0, #32992	; 0x80e0
   12e0c:	movt	r0, #2
   12e10:	ldr	r0, [r0]
   12e14:	bl	10bf8 <fprintf@plt>
   12e18:	movw	r0, #32984	; 0x80d8
   12e1c:	movt	r0, #2
   12e20:	ldr	r0, [r0]
   12e24:	bl	12d70 <__assert_fail@plt+0x20e8>
   12e28:	push	{fp, lr}
   12e2c:	mov	fp, sp
   12e30:	sub	sp, sp, #8
   12e34:	mov	r3, r0
   12e38:	movw	r0, #960	; 0x3c0
   12e3c:	str	r1, [sp]
   12e40:	movw	r1, #28712	; 0x7028
   12e44:	movt	r0, #3
   12e48:	movt	r1, #1
   12e4c:	ldr	r2, [r0]
   12e50:	movw	r0, #32992	; 0x80e0
   12e54:	movt	r0, #2
   12e58:	ldr	r0, [r0]
   12e5c:	bl	10bf8 <fprintf@plt>
   12e60:	mov	sp, fp
   12e64:	pop	{fp, pc}
   12e68:	movw	r0, #41206	; 0xa0f6
   12e6c:	movt	r0, #2
   12e70:	ldrb	r1, [r0]
   12e74:	cmp	r1, #1
   12e78:	bxeq	lr
   12e7c:	push	{fp, lr}
   12e80:	mov	fp, sp
   12e84:	mov	r1, #1
   12e88:	strb	r1, [r0]
   12e8c:	movw	r0, #28739	; 0x7043
   12e90:	movt	r0, #1
   12e94:	bl	12da0 <error@@Base>
   12e98:	push	{fp, lr}
   12e9c:	mov	fp, sp
   12ea0:	mov	r3, r0
   12ea4:	movw	r0, #956	; 0x3bc
   12ea8:	movt	r0, #3
   12eac:	ldr	r0, [r0]
   12eb0:	cmp	r0, #0
   12eb4:	bne	12ee0 <error@@Base+0x140>
   12eb8:	movw	r0, #960	; 0x3c0
   12ebc:	movw	r1, #28760	; 0x7058
   12ec0:	movt	r0, #3
   12ec4:	movt	r1, #1
   12ec8:	ldr	r2, [r0]
   12ecc:	movw	r0, #32992	; 0x80e0
   12ed0:	movt	r0, #2
   12ed4:	ldr	r0, [r0]
   12ed8:	bl	10bf8 <fprintf@plt>
   12edc:	bl	12d60 <__assert_fail@plt+0x20d8>
   12ee0:	blx	r0
   12ee4:	bl	12d60 <__assert_fail@plt+0x20d8>
   12ee8:	push	{r4, r5, r6, sl, fp, lr}
   12eec:	add	fp, sp, #16
   12ef0:	movw	r5, #41204	; 0xa0f4
   12ef4:	movt	r5, #2
   12ef8:	ldrsh	r0, [r5]
   12efc:	cmp	r0, #1
   12f00:	poplt	{r4, r5, r6, sl, fp, pc}
   12f04:	mov	r6, #1
   12f08:	sxth	r0, r6
   12f0c:	bl	12aa8 <__assert_fail@plt+0x1e20>
   12f10:	mov	r4, r0
   12f14:	bl	10b5c <unlink@plt>
   12f18:	mov	r0, r4
   12f1c:	bl	10b14 <free@plt>
   12f20:	add	r0, r6, #1
   12f24:	sxth	r6, r0
   12f28:	ldrsh	r0, [r5]
   12f2c:	cmp	r6, r0
   12f30:	ble	12f08 <error@@Base+0x168>
   12f34:	pop	{r4, r5, r6, sl, fp, pc}
   12f38:	push	{r4, r5, r6, sl, fp, lr}
   12f3c:	add	fp, sp, #16
   12f40:	mov	r5, r1
   12f44:	mov	r6, r0
   12f48:	mov	r0, #1
   12f4c:	mov	r1, #16
   12f50:	mov	r4, r2
   12f54:	bl	12914 <__assert_fail@plt+0x1c8c>
   12f58:	strb	r5, [r0, #8]
   12f5c:	mov	r1, r0
   12f60:	str	r4, [r0, #12]
   12f64:	mov	r0, r6
   12f68:	pop	{r4, r5, r6, sl, fp, lr}
   12f6c:	b	115e0 <__assert_fail@plt+0x958>
   12f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f74:	add	fp, sp, #28
   12f78:	sub	sp, sp, #124	; 0x7c
   12f7c:	mov	r4, r2
   12f80:	mov	r2, r1
   12f84:	cmp	r1, #0
   12f88:	str	r0, [sp, #16]
   12f8c:	bne	12f9c <error@@Base+0x1fc>
   12f90:	ldrb	r0, [r4]
   12f94:	cmp	r0, #0
   12f98:	bne	132c4 <error@@Base+0x524>
   12f9c:	ldr	r0, [sp, #16]
   12fa0:	movw	r1, #14524	; 0x38bc
   12fa4:	movt	r1, #1
   12fa8:	ldr	r0, [r0, #4]
   12fac:	str	r0, [sp, #4]
   12fb0:	mov	r0, r2
   12fb4:	bl	129b0 <__assert_fail@plt+0x1d28>
   12fb8:	mov	r6, r0
   12fbc:	ldrb	r0, [r4]
   12fc0:	cmp	r0, #0
   12fc4:	beq	1300c <error@@Base+0x26c>
   12fc8:	add	r0, sp, #20
   12fcc:	mov	r1, #99	; 0x63
   12fd0:	mov	r2, r6
   12fd4:	bl	10b2c <fgets@plt>
   12fd8:	cmp	r0, #0
   12fdc:	beq	12ffc <error@@Base+0x25c>
   12fe0:	movw	r1, #28875	; 0x70cb
   12fe4:	add	r0, sp, #20
   12fe8:	mov	r2, #51	; 0x33
   12fec:	movt	r1, #1
   12ff0:	bl	10c64 <strncmp@plt>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13254 <error@@Base+0x4b4>
   12ffc:	mov	r0, r6
   13000:	bl	10b50 <rewind@plt>
   13004:	mov	r5, #0
   13008:	strb	r5, [r4, #11]
   1300c:	ldr	r9, [r4, #4]
   13010:	ldrb	r8, [r4, #1]
   13014:	mov	r0, r6
   13018:	str	r4, [sp, #8]
   1301c:	cmp	r9, #0
   13020:	movweq	r9, #94	; 0x5e
   13024:	bl	10c7c <getc@plt>
   13028:	cmn	r0, #1
   1302c:	beq	130f0 <error@@Base+0x350>
   13030:	add	r1, sp, #20
   13034:	mov	sl, #0
   13038:	sub	r4, fp, #32
   1303c:	add	r1, r1, #1
   13040:	str	r1, [sp, #12]
   13044:	movw	r1, #32256	; 0x7e00
   13048:	movt	r1, #2
   1304c:	add	r1, r1, r0
   13050:	ldrsb	r5, [r1]
   13054:	cmp	r5, #0
   13058:	ble	132a4 <error@@Base+0x504>
   1305c:	cmp	r5, #1
   13060:	strb	r0, [sp, #20]
   13064:	beq	13088 <error@@Base+0x2e8>
   13068:	ldr	r0, [sp, #12]
   1306c:	sub	r7, r5, #1
   13070:	mov	r1, #1
   13074:	mov	r3, r6
   13078:	mov	r2, r7
   1307c:	bl	10b80 <fread@plt>
   13080:	cmp	r0, r7
   13084:	bne	132b8 <error@@Base+0x518>
   13088:	add	r0, sp, #20
   1308c:	mov	r1, #4
   13090:	mov	r2, r4
   13094:	bl	10b8c <utf8proc_iterate@plt>
   13098:	cmp	r0, r5
   1309c:	bne	132b0 <error@@Base+0x510>
   130a0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   130a4:	cmp	r8, #0
   130a8:	beq	130b8 <error@@Base+0x318>
   130ac:	mov	r7, #1
   130b0:	cmp	r5, r9
   130b4:	beq	130dc <error@@Base+0x33c>
   130b8:	mov	r0, #1
   130bc:	mov	r1, #16
   130c0:	bl	12914 <__assert_fail@plt+0x1c8c>
   130c4:	strb	sl, [r0, #8]
   130c8:	mov	r1, r0
   130cc:	str	r5, [r0, #12]
   130d0:	ldr	r0, [sp, #16]
   130d4:	bl	115e0 <__assert_fail@plt+0x958>
   130d8:	mov	r7, #0
   130dc:	mov	r0, r6
   130e0:	bl	10c7c <getc@plt>
   130e4:	cmn	r0, #1
   130e8:	mov	sl, r7
   130ec:	bne	13044 <error@@Base+0x2a4>
   130f0:	mov	r0, r6
   130f4:	bl	12a28 <__assert_fail@plt+0x1da0>
   130f8:	ldr	r8, [sp, #8]
   130fc:	ldr	r9, [sp, #4]
   13100:	ldrb	r0, [r8, #9]
   13104:	cmp	r0, #0
   13108:	beq	13214 <error@@Base+0x474>
   1310c:	ldr	r0, [sp, #16]
   13110:	cmp	r9, #0
   13114:	addne	r0, r9, #4
   13118:	ldr	r6, [r0]
   1311c:	cmp	r6, #0
   13120:	beq	13214 <error@@Base+0x474>
   13124:	mov	r5, #32
   13128:	mov	r7, r6
   1312c:	ldr	r4, [r7, #12]
   13130:	mov	r0, r4
   13134:	bl	10b20 <utf8proc_get_property@plt>
   13138:	cmp	r4, #10
   1313c:	ble	13158 <error@@Base+0x3b8>
   13140:	sub	r1, r4, #11
   13144:	cmp	r1, #3
   13148:	bcc	1317c <error@@Base+0x3dc>
   1314c:	cmp	r4, #160	; 0xa0
   13150:	beq	1317c <error@@Base+0x3dc>
   13154:	b	13168 <error@@Base+0x3c8>
   13158:	cmp	r4, #9
   1315c:	beq	1317c <error@@Base+0x3dc>
   13160:	cmp	r4, #10
   13164:	beq	13180 <error@@Base+0x3e0>
   13168:	ldrsh	r0, [r0]
   1316c:	sub	r0, r0, #23
   13170:	cmp	r0, #2
   13174:	strls	r5, [r7, #12]
   13178:	b	13180 <error@@Base+0x3e0>
   1317c:	str	r5, [r7, #12]
   13180:	ldr	r7, [r7, #4]
   13184:	cmp	r7, #0
   13188:	bne	1312c <error@@Base+0x38c>
   1318c:	mov	r4, #0
   13190:	ldr	r1, [r6, #12]
   13194:	ldr	r5, [r6, #4]
   13198:	cmp	r1, #32
   1319c:	bne	131d8 <error@@Base+0x438>
   131a0:	tst	r4, #255	; 0xff
   131a4:	beq	131f4 <error@@Base+0x454>
   131a8:	cmp	r5, #0
   131ac:	ldrne	r1, [r5, #12]
   131b0:	cmpne	r1, #10
   131b4:	beq	131f4 <error@@Base+0x454>
   131b8:	mov	r0, #1
   131bc:	cmp	r1, #32
   131c0:	bne	131ec <error@@Base+0x44c>
   131c4:	ldrb	r0, [r6, #8]
   131c8:	ldrb	r1, [r5, #8]
   131cc:	orr	r0, r1, r0
   131d0:	strb	r0, [r5, #8]
   131d4:	b	131f4 <error@@Base+0x454>
   131d8:	subs	r0, r1, #10
   131dc:	movwne	r0, #1
   131e0:	tst	r4, #255	; 0xff
   131e4:	cmpeq	r1, #10
   131e8:	beq	131f4 <error@@Base+0x454>
   131ec:	mov	r4, r0
   131f0:	b	13208 <error@@Base+0x468>
   131f4:	ldr	r0, [sp, #16]
   131f8:	mov	r1, r6
   131fc:	bl	11608 <__assert_fail@plt+0x980>
   13200:	mov	r0, r6
   13204:	bl	10b14 <free@plt>
   13208:	cmp	r5, #0
   1320c:	mov	r6, r5
   13210:	bne	13190 <error@@Base+0x3f0>
   13214:	ldrb	r0, [r8, #10]
   13218:	cmp	r0, #0
   1321c:	beq	1324c <error@@Base+0x4ac>
   13220:	ldr	r0, [sp, #16]
   13224:	cmp	r9, #0
   13228:	addne	r0, r9, #4
   1322c:	ldr	r4, [r0]
   13230:	b	13244 <error@@Base+0x4a4>
   13234:	ldr	r0, [r4, #12]
   13238:	bl	10b68 <utf8proc_tolower@plt>
   1323c:	str	r0, [r4, #12]
   13240:	ldr	r4, [r4, #4]
   13244:	cmp	r4, #0
   13248:	bne	13234 <error@@Base+0x494>
   1324c:	sub	sp, fp, #28
   13250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13254:	movw	r8, #28931	; 0x7103
   13258:	mov	r7, #0
   1325c:	add	r9, sp, #20
   13260:	mov	r5, #1
   13264:	movt	r8, #1
   13268:	mov	r0, r9
   1326c:	mov	r1, #99	; 0x63
   13270:	mov	r2, r6
   13274:	bl	10b2c <fgets@plt>
   13278:	cmp	r0, #0
   1327c:	beq	13008 <error@@Base+0x268>
   13280:	mov	r0, r9
   13284:	mov	r1, r8
   13288:	bl	10afc <strcmp@plt>
   1328c:	cmp	r0, #0
   13290:	addeq	r7, r7, #1
   13294:	sxth	r7, r7
   13298:	cmp	r7, #2
   1329c:	blt	13268 <error@@Base+0x4c8>
   132a0:	b	13008 <error@@Base+0x268>
   132a4:	movw	r0, #28987	; 0x713b
   132a8:	movt	r0, #1
   132ac:	bl	12da0 <error@@Base>
   132b0:	bl	10c4c <utf8proc_errmsg@plt>
   132b4:	bl	12da0 <error@@Base>
   132b8:	movw	r0, #29011	; 0x7153
   132bc:	movt	r0, #1
   132c0:	bl	12da0 <error@@Base>
   132c4:	movw	r0, #28807	; 0x7087
   132c8:	movw	r1, #28823	; 0x7097
   132cc:	movt	r0, #1
   132d0:	movt	r1, #1
   132d4:	bl	12de0 <error@@Base+0x40>
   132d8:	push	{fp, lr}
   132dc:	mov	fp, sp
   132e0:	bl	10b38 <utf8proc_encode_char@plt>
   132e4:	cmp	r0, #0
   132e8:	sxtbgt	r0, r0
   132ec:	popgt	{fp, pc}
   132f0:	movw	r0, #28833	; 0x70a1
   132f4:	movt	r0, #1
   132f8:	bl	12da0 <error@@Base>
   132fc:	push	{r4, r5, r6, r7, fp, lr}
   13300:	add	fp, sp, #16
   13304:	mov	r6, r3
   13308:	mov	r4, r2
   1330c:	mov	r5, r1
   13310:	tst	r0, #255	; 0xff
   13314:	beq	13334 <error@@Base+0x594>
   13318:	mov	r0, #94	; 0x5e
   1331c:	mov	r1, r4
   13320:	bl	10b38 <utf8proc_encode_char@plt>
   13324:	cmp	r0, #0
   13328:	ble	133d0 <error@@Base+0x630>
   1332c:	sxtb	r7, r0
   13330:	b	13338 <error@@Base+0x598>
   13334:	mov	r7, #0
   13338:	cmp	r5, #10
   1333c:	bne	13364 <error@@Base+0x5c4>
   13340:	movw	r0, #28723	; 0x7033
   13344:	movw	r1, #28856	; 0x70b8
   13348:	tst	r6, #255	; 0xff
   1334c:	movt	r0, #1
   13350:	movt	r1, #1
   13354:	moveq	r1, r0
   13358:	add	r0, r4, r7
   1335c:	pop	{r4, r5, r6, r7, fp, lr}
   13360:	b	10c34 <sprintf@plt>
   13364:	mov	r0, r5
   13368:	bl	10b20 <utf8proc_get_property@plt>
   1336c:	cmp	r5, #32
   13370:	beq	13384 <error@@Base+0x5e4>
   13374:	ldrsh	r0, [r0]
   13378:	sub	r1, r0, #1
   1337c:	cmp	r1, #22
   13380:	bcs	133dc <error@@Base+0x63c>
   13384:	mov	r0, r5
   13388:	bl	10be0 <utf8proc_category@plt>
   1338c:	sub	r0, r0, #6
   13390:	cmp	r0, #2
   13394:	bhi	133b0 <error@@Base+0x610>
   13398:	add	r1, r4, r7
   1339c:	movw	r0, #9676	; 0x25cc
   133a0:	bl	10b38 <utf8proc_encode_char@plt>
   133a4:	cmp	r0, #0
   133a8:	ble	133d0 <error@@Base+0x630>
   133ac:	sxtab	r7, r7, r0
   133b0:	add	r1, r4, r7
   133b4:	mov	r0, r5
   133b8:	bl	10b38 <utf8proc_encode_char@plt>
   133bc:	cmp	r0, #0
   133c0:	sxtabgt	r0, r7, r0
   133c4:	movgt	r1, #0
   133c8:	strbgt	r1, [r4, r0]
   133cc:	popgt	{r4, r5, r6, r7, fp, pc}
   133d0:	movw	r0, #28833	; 0x70a1
   133d4:	movt	r0, #1
   133d8:	bl	12da0 <error@@Base>
   133dc:	cmp	r0, #29
   133e0:	beq	13384 <error@@Base+0x5e4>
   133e4:	add	r0, r4, r7
   133e8:	cmp	r5, #255	; 0xff
   133ec:	bhi	133fc <error@@Base+0x65c>
   133f0:	movw	r1, #28861	; 0x70bd
   133f4:	movt	r1, #1
   133f8:	b	13404 <error@@Base+0x664>
   133fc:	movw	r1, #28868	; 0x70c4
   13400:	movt	r1, #1
   13404:	mov	r2, r5
   13408:	pop	{r4, r5, r6, r7, fp, lr}
   1340c:	b	10c34 <sprintf@plt>
   13410:	push	{r4, r5, r6, r7, fp, lr}
   13414:	add	fp, sp, #16
   13418:	sub	sp, sp, #16
   1341c:	mov	r6, r2
   13420:	mov	r2, r1
   13424:	movw	r1, #14499	; 0x38a3
   13428:	mov	r5, r0
   1342c:	movt	r1, #1
   13430:	mov	r0, r2
   13434:	bl	129b0 <__assert_fail@plt+0x1d28>
   13438:	mov	r4, r0
   1343c:	cmp	r6, #0
   13440:	beq	1347c <error@@Base+0x6dc>
   13444:	movw	r0, #28875	; 0x70cb
   13448:	mov	r1, r4
   1344c:	movt	r0, #1
   13450:	bl	10c58 <fputs@plt>
   13454:	movw	r7, #28931	; 0x7103
   13458:	mov	r1, r4
   1345c:	movt	r7, #1
   13460:	mov	r0, r7
   13464:	bl	10c58 <fputs@plt>
   13468:	mov	r0, r4
   1346c:	blx	r6
   13470:	mov	r0, r7
   13474:	mov	r1, r4
   13478:	bl	10c58 <fputs@plt>
   1347c:	ldr	r6, [r5]
   13480:	cmp	r6, #0
   13484:	beq	134b8 <error@@Base+0x718>
   13488:	add	r5, sp, #7
   1348c:	ldr	r1, [r6, #12]
   13490:	ldrb	r0, [r6, #8]
   13494:	mov	r2, r5
   13498:	mov	r3, #0
   1349c:	bl	132fc <error@@Base+0x55c>
   134a0:	mov	r0, r5
   134a4:	mov	r1, r4
   134a8:	bl	10c58 <fputs@plt>
   134ac:	ldr	r6, [r6, #4]
   134b0:	cmp	r6, #0
   134b4:	bne	1348c <error@@Base+0x6ec>
   134b8:	mov	r0, r4
   134bc:	bl	12a28 <__assert_fail@plt+0x1da0>
   134c0:	sub	sp, fp, #16
   134c4:	pop	{r4, r5, r6, r7, fp, pc}
   134c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134cc:	add	fp, sp, #28
   134d0:	sub	sp, sp, #4
   134d4:	mov	r9, #0
   134d8:	mov	sl, r0
   134dc:	str	r9, [sp]
   134e0:	ldrb	r0, [r1]
   134e4:	cmp	r0, #0
   134e8:	beq	13548 <error@@Base+0x7a8>
   134ec:	mov	r4, r1
   134f0:	mov	r8, sp
   134f4:	mov	r7, #1
   134f8:	mov	r0, r4
   134fc:	mvn	r1, #0
   13500:	mov	r2, r8
   13504:	bl	10b8c <utf8proc_iterate@plt>
   13508:	cmp	r0, #1
   1350c:	blt	13550 <error@@Base+0x7b0>
   13510:	ldr	r5, [sp]
   13514:	mov	r6, r0
   13518:	mov	r0, #1
   1351c:	mov	r1, #16
   13520:	bl	12914 <__assert_fail@plt+0x1c8c>
   13524:	strb	r9, [r0, #8]
   13528:	mov	r1, r0
   1352c:	str	r5, [r0, #12]
   13530:	mov	r0, sl
   13534:	bl	115e0 <__assert_fail@plt+0x958>
   13538:	ldrb	r0, [r4, r6]!
   1353c:	cmp	r0, #0
   13540:	bne	134f8 <error@@Base+0x758>
   13544:	b	13554 <error@@Base+0x7b4>
   13548:	mov	r7, #1
   1354c:	b	13554 <error@@Base+0x7b4>
   13550:	mov	r7, #0
   13554:	mov	r0, r7
   13558:	sub	sp, fp, #28
   1355c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13560:	cmp	r0, #2
   13564:	bxlt	lr
   13568:	movw	r3, #41212	; 0xa0fc
   1356c:	movt	r3, #2
   13570:	str	r2, [r3]
   13574:	movw	r2, #41208	; 0xa0f8
   13578:	movt	r2, #2
   1357c:	str	r1, [r2]
   13580:	sub	r1, r0, #1
   13584:	mov	r0, #0
   13588:	b	1358c <error@@Base+0x7ec>
   1358c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13590:	add	fp, sp, #28
   13594:	sub	sp, sp, #4
   13598:	movw	r7, #41208	; 0xa0f8
   1359c:	movw	sl, #41212	; 0xa0fc
   135a0:	mov	r8, r1
   135a4:	mov	r9, r0
   135a8:	movt	r7, #2
   135ac:	movt	sl, #2
   135b0:	ldr	r0, [r7]
   135b4:	cmp	r9, r8
   135b8:	mov	r4, r8
   135bc:	mov	r5, r9
   135c0:	ldr	r6, [r0, r9, lsl #2]
   135c4:	bge	13658 <error@@Base+0x8b8>
   135c8:	mov	r5, r9
   135cc:	mov	r4, r8
   135d0:	cmp	r5, r4
   135d4:	bge	135fc <error@@Base+0x85c>
   135d8:	ldr	r0, [r7]
   135dc:	ldr	r2, [sl]
   135e0:	ldr	r1, [r0, r4, lsl #2]
   135e4:	mov	r0, r6
   135e8:	blx	r2
   135ec:	cmn	r0, #1
   135f0:	bgt	135fc <error@@Base+0x85c>
   135f4:	sub	r4, r4, #1
   135f8:	b	135d0 <error@@Base+0x830>
   135fc:	cmp	r5, r4
   13600:	beq	13614 <error@@Base+0x874>
   13604:	ldr	r0, [r7]
   13608:	ldr	r1, [r0, r4, lsl #2]
   1360c:	str	r1, [r0, r5, lsl #2]
   13610:	add	r5, r5, #1
   13614:	cmp	r5, r4
   13618:	bge	13638 <error@@Base+0x898>
   1361c:	ldr	r0, [r7]
   13620:	ldr	r2, [sl]
   13624:	ldr	r1, [r0, r5, lsl #2]
   13628:	mov	r0, r6
   1362c:	blx	r2
   13630:	cmp	r0, #1
   13634:	bge	13610 <error@@Base+0x870>
   13638:	cmp	r5, r4
   1363c:	ldrne	r0, [r7]
   13640:	ldrne	r1, [r0, r5, lsl #2]
   13644:	strne	r1, [r0, r4, lsl #2]
   13648:	subne	r4, r4, #1
   1364c:	cmp	r5, r4
   13650:	blt	135d0 <error@@Base+0x830>
   13654:	ldr	r0, [r7]
   13658:	sub	r1, r4, #1
   1365c:	str	r6, [r0, r4, lsl #2]
   13660:	cmp	r1, r9
   13664:	movgt	r0, r9
   13668:	blgt	1358c <error@@Base+0x7ec>
   1366c:	add	r9, r5, #1
   13670:	cmp	r9, r8
   13674:	subge	sp, fp, #28
   13678:	popge	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1367c:	b	135b0 <error@@Base+0x810>
   13680:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13684:	mov	r7, r0
   13688:	ldr	r6, [pc, #72]	; 136d8 <error@@Base+0x938>
   1368c:	ldr	r5, [pc, #72]	; 136dc <error@@Base+0x93c>
   13690:	add	r6, pc, r6
   13694:	add	r5, pc, r5
   13698:	sub	r6, r6, r5
   1369c:	mov	r8, r1
   136a0:	mov	r9, r2
   136a4:	bl	10ad0 <calloc@plt-0x20>
   136a8:	asrs	r6, r6, #2
   136ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136b0:	mov	r4, #0
   136b4:	add	r4, r4, #1
   136b8:	ldr	r3, [r5], #4
   136bc:	mov	r2, r9
   136c0:	mov	r1, r8
   136c4:	mov	r0, r7
   136c8:	blx	r3
   136cc:	cmp	r6, r4
   136d0:	bne	136b4 <error@@Base+0x914>
   136d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136d8:	andeq	r4, r1, r4, ror #14
   136dc:	andeq	r4, r1, ip, asr r7
   136e0:	bx	lr
   136e4:	mov	r2, r1
   136e8:	mov	r1, r0
   136ec:	mov	r0, #3
   136f0:	b	10b74 <__xstat@plt>

Disassembly of section .fini:

000136f4 <.fini>:
   136f4:	push	{r3, lr}
   136f8:	pop	{r3, pc}
