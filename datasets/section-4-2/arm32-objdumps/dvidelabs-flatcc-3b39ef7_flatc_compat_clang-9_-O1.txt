
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010e34 <.init>:
   10e34:	push	{r3, lr}
   10e38:	bl	10f98 <_start@@Base+0x3c>
   10e3c:	pop	{r3, pc}

Disassembly of section .plt:

00010e40 <strcmp@plt-0x14>:
   10e40:	push	{lr}		; (str lr, [sp, #-4]!)
   10e44:	ldr	lr, [pc, #4]	; 10e50 <strcmp@plt-0x4>
   10e48:	add	lr, pc, lr
   10e4c:	ldr	pc, [lr, #8]!
   10e50:			; <UNDEFINED> instruction: 0x000151b0

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e60 <printf@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #424]!	; 0x1a8

00010e6c <fopen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #416]!	; 0x1a0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #408]!	; 0x198

00010e84 <memcpy@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #400]!	; 0x190

00010e90 <ftell@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #392]!	; 0x188

00010e9c <rewind@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #384]!	; 0x180

00010ea8 <fwrite@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #376]!	; 0x178

00010eb4 <puts@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #368]!	; 0x170

00010ec0 <malloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #360]!	; 0x168

00010ecc <__libc_start_main@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #352]!	; 0x160

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #344]!	; 0x158

00010ee4 <exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #336]!	; 0x150

00010ef0 <fprintf@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #328]!	; 0x148

00010efc <posix_memalign@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #320]!	; 0x140

00010f08 <strncpy@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #312]!	; 0x138

00010f14 <fclose@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #304]!	; 0x130

00010f20 <fputc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #296]!	; 0x128

00010f2c <fread_unlocked@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #288]!	; 0x120

00010f38 <fseek@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #280]!	; 0x118

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #272]!	; 0x110

00010f50 <__assert_fail@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #264]!	; 0x108

Disassembly of section .text:

00010f5c <_start@@Base>:
   10f5c:	mov	fp, #0
   10f60:	mov	lr, #0
   10f64:	pop	{r1}		; (ldr r1, [sp], #4)
   10f68:	mov	r2, sp
   10f6c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f70:	push	{r0}		; (str r0, [sp, #-4]!)
   10f74:	ldr	ip, [pc, #16]	; 10f8c <_start@@Base+0x30>
   10f78:	push	{ip}		; (str ip, [sp, #-4]!)
   10f7c:	ldr	r0, [pc, #12]	; 10f90 <_start@@Base+0x34>
   10f80:	ldr	r3, [pc, #12]	; 10f94 <_start@@Base+0x38>
   10f84:	bl	10ecc <__libc_start_main@plt>
   10f88:	bl	10f44 <abort@plt>
   10f8c:	andeq	r3, r1, ip, asr #28
   10f90:	andeq	r1, r1, r4, lsl #30
   10f94:	andeq	r3, r1, ip, ror #27
   10f98:	ldr	r3, [pc, #20]	; 10fb4 <_start@@Base+0x58>
   10f9c:	ldr	r2, [pc, #20]	; 10fb8 <_start@@Base+0x5c>
   10fa0:	add	r3, pc, r3
   10fa4:	ldr	r2, [r3, r2]
   10fa8:	cmp	r2, #0
   10fac:	bxeq	lr
   10fb0:	b	10ed8 <__gmon_start__@plt>
   10fb4:	andeq	r5, r1, r8, asr r0
   10fb8:	andeq	r0, r0, r4, rrx
   10fbc:	ldr	r0, [pc, #24]	; 10fdc <_start@@Base+0x80>
   10fc0:	ldr	r3, [pc, #24]	; 10fe0 <_start@@Base+0x84>
   10fc4:	cmp	r3, r0
   10fc8:	bxeq	lr
   10fcc:	ldr	r3, [pc, #16]	; 10fe4 <_start@@Base+0x88>
   10fd0:	cmp	r3, #0
   10fd4:	bxeq	lr
   10fd8:	bx	r3
   10fdc:	andeq	r6, r2, r4, ror r0
   10fe0:	andeq	r6, r2, r4, ror r0
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldr	r0, [pc, #36]	; 11014 <_start@@Base+0xb8>
   10fec:	ldr	r1, [pc, #36]	; 11018 <_start@@Base+0xbc>
   10ff0:	sub	r1, r1, r0
   10ff4:	asr	r1, r1, #2
   10ff8:	add	r1, r1, r1, lsr #31
   10ffc:	asrs	r1, r1, #1
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <_start@@Base+0xc0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	r6, r2, r4, ror r0
   11018:	andeq	r6, r2, r4, ror r0
   1101c:	andeq	r0, r0, r0
   11020:	push	{r4, lr}
   11024:	ldr	r4, [pc, #24]	; 11044 <_start@@Base+0xe8>
   11028:	ldrb	r3, [r4]
   1102c:	cmp	r3, #0
   11030:	popne	{r4, pc}
   11034:	bl	10fbc <_start@@Base+0x60>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r4]
   11040:	pop	{r4, pc}
   11044:	andeq	r6, r2, ip, ror r0
   11048:	b	10fe8 <_start@@Base+0x8c>

0001104c <verify_monster@@Base>:
   1104c:	push	{r4, r5, r6, sl, fp, lr}
   11050:	add	fp, sp, #16
   11054:	mov	r6, r0
   11058:	bl	115c0 <verify_monster@@Base+0x574>
   1105c:	cmp	r0, #0
   11060:	beq	110a0 <verify_monster@@Base+0x54>
   11064:	mov	r4, r0
   11068:	bl	115f8 <verify_monster@@Base+0x5ac>
   1106c:	cmp	r0, #80	; 0x50
   11070:	bne	110ac <verify_monster@@Base+0x60>
   11074:	mov	r0, r4
   11078:	bl	11668 <verify_monster@@Base+0x61c>
   1107c:	cmp	r0, #0
   11080:	beq	110b8 <verify_monster@@Base+0x6c>
   11084:	mov	r5, r0
   11088:	sub	r0, r0, r6
   1108c:	tst	r0, #15
   11090:	beq	110c4 <verify_monster@@Base+0x78>
   11094:	movw	r0, #19362	; 0x4ba2
   11098:	movt	r0, #1
   1109c:	b	111dc <verify_monster@@Base+0x190>
   110a0:	movw	r0, #18755	; 0x4943
   110a4:	movt	r0, #1
   110a8:	b	111dc <verify_monster@@Base+0x190>
   110ac:	movw	r0, #19401	; 0x4bc9
   110b0:	movt	r0, #1
   110b4:	b	111dc <verify_monster@@Base+0x190>
   110b8:	movw	r0, #18777	; 0x4959
   110bc:	movt	r0, #1
   110c0:	b	111dc <verify_monster@@Base+0x190>
   110c4:	mov	r0, r5
   110c8:	bl	116d0 <verify_monster@@Base+0x684>
   110cc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   110d0:	vcmp.f32	s0, s2
   110d4:	vmrs	APSR_nzcv, fpscr
   110d8:	beq	110e8 <verify_monster@@Base+0x9c>
   110dc:	movw	r0, #19329	; 0x4b81
   110e0:	movt	r0, #1
   110e4:	b	111dc <verify_monster@@Base+0x190>
   110e8:	mov	r0, r5
   110ec:	bl	116e8 <verify_monster@@Base+0x69c>
   110f0:	vmov.f32	s2, #0	; 0x40000000  2.0
   110f4:	vcmp.f32	s0, s2
   110f8:	vmrs	APSR_nzcv, fpscr
   110fc:	beq	1110c <verify_monster@@Base+0xc0>
   11100:	movw	r0, #19296	; 0x4b60
   11104:	movt	r0, #1
   11108:	b	111dc <verify_monster@@Base+0x190>
   1110c:	mov	r0, r5
   11110:	bl	11704 <verify_monster@@Base+0x6b8>
   11114:	vmov.f32	s2, #8	; 0x40400000  3.0
   11118:	vcmp.f32	s0, s2
   1111c:	vmrs	APSR_nzcv, fpscr
   11120:	beq	11130 <verify_monster@@Base+0xe4>
   11124:	movw	r0, #19263	; 0x4b3f
   11128:	movt	r0, #1
   1112c:	b	111dc <verify_monster@@Base+0x190>
   11130:	mov	r0, r5
   11134:	bl	11720 <verify_monster@@Base+0x6d4>
   11138:	vmov.f64	d16, #8	; 0x40400000  3.0
   1113c:	vcmp.f64	d0, d16
   11140:	vmrs	APSR_nzcv, fpscr
   11144:	beq	11154 <verify_monster@@Base+0x108>
   11148:	movw	r0, #19243	; 0x4b2b
   1114c:	movt	r0, #1
   11150:	b	111dc <verify_monster@@Base+0x190>
   11154:	mov	r0, r5
   11158:	bl	11738 <verify_monster@@Base+0x6ec>
   1115c:	cmp	r0, #2
   11160:	bne	111c8 <verify_monster@@Base+0x17c>
   11164:	mov	r0, r5
   11168:	bl	1174c <verify_monster@@Base+0x700>
   1116c:	mov	r5, r0
   11170:	bl	11758 <verify_monster@@Base+0x70c>
   11174:	cmp	r0, #5
   11178:	bne	111d4 <verify_monster@@Base+0x188>
   1117c:	mov	r0, r5
   11180:	bl	11768 <verify_monster@@Base+0x71c>
   11184:	cmp	r0, #6
   11188:	bne	111d4 <verify_monster@@Base+0x188>
   1118c:	mov	r0, r4
   11190:	bl	1177c <verify_monster@@Base+0x730>
   11194:	mov	r5, r0
   11198:	bl	117fc <verify_monster@@Base+0x7b0>
   1119c:	cmp	r0, #9
   111a0:	bne	111e8 <verify_monster@@Base+0x19c>
   111a4:	movw	r1, #15985	; 0x3e71
   111a8:	movt	r1, #1
   111ac:	mov	r0, r5
   111b0:	bl	10e54 <strcmp@plt>
   111b4:	cmp	r0, #0
   111b8:	beq	111f4 <verify_monster@@Base+0x1a8>
   111bc:	movw	r0, #18796	; 0x496c
   111c0:	movt	r0, #1
   111c4:	b	111dc <verify_monster@@Base+0x190>
   111c8:	movw	r0, #19222	; 0x4b16
   111cc:	movt	r0, #1
   111d0:	b	111dc <verify_monster@@Base+0x190>
   111d4:	movw	r0, #19198	; 0x4afe
   111d8:	movt	r0, #1
   111dc:	bl	10eb4 <puts@plt>
   111e0:	mvn	r0, #0
   111e4:	pop	{r4, r5, r6, sl, fp, pc}
   111e8:	movw	r0, #19171	; 0x4ae3
   111ec:	movt	r0, #1
   111f0:	b	111dc <verify_monster@@Base+0x190>
   111f4:	mov	r0, r4
   111f8:	bl	11810 <verify_monster@@Base+0x7c4>
   111fc:	mov	r5, r0
   11200:	bl	1188c <verify_monster@@Base+0x840>
   11204:	cmp	r0, #5
   11208:	bne	1127c <verify_monster@@Base+0x230>
   1120c:	mov	r6, #0
   11210:	mov	r0, r5
   11214:	mov	r1, r6
   11218:	bl	11890 <verify_monster@@Base+0x844>
   1121c:	cmp	r6, r0
   11220:	bne	11288 <verify_monster@@Base+0x23c>
   11224:	add	r6, r6, #1
   11228:	cmp	r6, #5
   1122c:	bne	11210 <verify_monster@@Base+0x1c4>
   11230:	mov	r0, r4
   11234:	bl	118d8 <verify_monster@@Base+0x88c>
   11238:	cmp	r0, #0
   1123c:	beq	112a0 <verify_monster@@Base+0x254>
   11240:	mov	r5, r0
   11244:	bl	11954 <verify_monster@@Base+0x908>
   11248:	cmp	r0, #2
   1124c:	bne	112ac <verify_monster@@Base+0x260>
   11250:	mov	r0, r5
   11254:	mov	r1, #0
   11258:	bl	11968 <verify_monster@@Base+0x91c>
   1125c:	movw	r1, #16024	; 0x3e98
   11260:	movt	r1, #1
   11264:	bl	10e54 <strcmp@plt>
   11268:	cmp	r0, #0
   1126c:	beq	112b8 <verify_monster@@Base+0x26c>
   11270:	movw	r0, #19068	; 0x4a7c
   11274:	movt	r0, #1
   11278:	b	111dc <verify_monster@@Base+0x190>
   1127c:	movw	r0, #19144	; 0x4ac8
   11280:	movt	r0, #1
   11284:	b	111dc <verify_monster@@Base+0x190>
   11288:	movw	r0, #15995	; 0x3e7b
   1128c:	movt	r0, #1
   11290:	mov	r1, r6
   11294:	bl	10e60 <printf@plt>
   11298:	mvn	r0, #0
   1129c:	pop	{r4, r5, r6, sl, fp, pc}
   112a0:	movw	r0, #18816	; 0x4980
   112a4:	movt	r0, #1
   112a8:	b	111dc <verify_monster@@Base+0x190>
   112ac:	movw	r0, #19104	; 0x4aa0
   112b0:	movt	r0, #1
   112b4:	b	111dc <verify_monster@@Base+0x190>
   112b8:	mov	r0, r5
   112bc:	mov	r1, #1
   112c0:	bl	11968 <verify_monster@@Base+0x91c>
   112c4:	movw	r1, #16030	; 0x3e9e
   112c8:	movt	r1, #1
   112cc:	bl	10e54 <strcmp@plt>
   112d0:	cmp	r0, #0
   112d4:	beq	112e4 <verify_monster@@Base+0x298>
   112d8:	movw	r0, #19031	; 0x4a57
   112dc:	movt	r0, #1
   112e0:	b	111dc <verify_monster@@Base+0x190>
   112e4:	mov	r0, r4
   112e8:	bl	119bc <verify_monster@@Base+0x970>
   112ec:	cmp	r0, #1
   112f0:	bne	11328 <verify_monster@@Base+0x2dc>
   112f4:	mov	r0, r4
   112f8:	bl	11a2c <verify_monster@@Base+0x9e0>
   112fc:	cmp	r0, #0
   11300:	beq	11334 <verify_monster@@Base+0x2e8>
   11304:	bl	1177c <verify_monster@@Base+0x730>
   11308:	movw	r1, #19010	; 0x4a42
   1130c:	movt	r1, #1
   11310:	bl	10e54 <strcmp@plt>
   11314:	cmp	r0, #0
   11318:	beq	11340 <verify_monster@@Base+0x2f4>
   1131c:	movw	r0, #18991	; 0x4a2f
   11320:	movt	r0, #1
   11324:	b	111dc <verify_monster@@Base+0x190>
   11328:	movw	r0, #19015	; 0x4a47
   1132c:	movt	r0, #1
   11330:	b	111dc <verify_monster@@Base+0x190>
   11334:	movw	r0, #18844	; 0x499c
   11338:	movt	r0, #1
   1133c:	b	111dc <verify_monster@@Base+0x190>
   11340:	mov	r0, r4
   11344:	bl	11aa4 <verify_monster@@Base+0xa58>
   11348:	mov	r5, r0
   1134c:	bl	11b20 <verify_monster@@Base+0xad4>
   11350:	cmp	r0, #2
   11354:	bne	114a4 <verify_monster@@Base+0x458>
   11358:	mov	r0, r5
   1135c:	mov	r1, #0
   11360:	bl	11b34 <verify_monster@@Base+0xae8>
   11364:	mov	r6, r0
   11368:	bl	11758 <verify_monster@@Base+0x70c>
   1136c:	cmp	r0, #10
   11370:	bne	114b0 <verify_monster@@Base+0x464>
   11374:	mov	r0, r6
   11378:	bl	11768 <verify_monster@@Base+0x71c>
   1137c:	cmp	r0, #20
   11380:	bne	114bc <verify_monster@@Base+0x470>
   11384:	mov	r0, r5
   11388:	mov	r1, #1
   1138c:	bl	11b34 <verify_monster@@Base+0xae8>
   11390:	mov	r5, r0
   11394:	bl	11758 <verify_monster@@Base+0x70c>
   11398:	cmp	r0, #30
   1139c:	bne	114c8 <verify_monster@@Base+0x47c>
   113a0:	mov	r0, r5
   113a4:	bl	11768 <verify_monster@@Base+0x71c>
   113a8:	cmp	r0, #40	; 0x28
   113ac:	bne	114d4 <verify_monster@@Base+0x488>
   113b0:	mov	r0, r4
   113b4:	bl	11b74 <verify_monster@@Base+0xb28>
   113b8:	movw	r5, #51521	; 0xc941
   113bc:	movt	r5, #56697	; 0xdd79
   113c0:	cmp	r0, r5
   113c4:	bne	114e0 <verify_monster@@Base+0x494>
   113c8:	mov	r0, r4
   113cc:	bl	11be4 <verify_monster@@Base+0xb98>
   113d0:	cmp	r0, r5
   113d4:	bne	11500 <verify_monster@@Base+0x4b4>
   113d8:	mov	r0, r4
   113dc:	bl	11c54 <verify_monster@@Base+0xc08>
   113e0:	movw	r5, #32973	; 0x80cd
   113e4:	movt	r5, #28175	; 0x6e0f
   113e8:	eor	r1, r1, r5
   113ec:	movw	r6, #37249	; 0x9181
   113f0:	movt	r6, #62075	; 0xf27b
   113f4:	eor	r0, r0, r6
   113f8:	orrs	r0, r0, r1
   113fc:	bne	11520 <verify_monster@@Base+0x4d4>
   11400:	mov	r0, r4
   11404:	bl	11cc8 <verify_monster@@Base+0xc7c>
   11408:	eor	r1, r1, r5
   1140c:	eor	r0, r0, r6
   11410:	orrs	r0, r0, r1
   11414:	bne	11540 <verify_monster@@Base+0x4f4>
   11418:	mov	r0, r4
   1141c:	bl	11d3c <verify_monster@@Base+0xcf0>
   11420:	movw	r5, #42097	; 0xa471
   11424:	movt	r5, #36481	; 0x8e81
   11428:	cmp	r0, r5
   1142c:	bne	11560 <verify_monster@@Base+0x514>
   11430:	mov	r0, r4
   11434:	bl	11dac <verify_monster@@Base+0xd60>
   11438:	cmp	r0, r5
   1143c:	bne	11580 <verify_monster@@Base+0x534>
   11440:	mov	r0, r4
   11444:	bl	11e1c <verify_monster@@Base+0xdd0>
   11448:	movw	r5, #18652	; 0x48dc
   1144c:	movt	r5, #17401	; 0x43f9
   11450:	eor	r1, r1, r5
   11454:	movw	r6, #56817	; 0xddf1
   11458:	movt	r6, #51047	; 0xc767
   1145c:	eor	r0, r0, r6
   11460:	orrs	r0, r0, r1
   11464:	bne	115a0 <verify_monster@@Base+0x554>
   11468:	mov	r0, r4
   1146c:	bl	11e90 <verify_monster@@Base+0xe44>
   11470:	eor	r1, r1, r5
   11474:	eor	r0, r0, r6
   11478:	orrs	r0, r0, r1
   1147c:	mov	r0, #0
   11480:	popeq	{r4, r5, r6, sl, fp, pc}
   11484:	movw	r0, #16549	; 0x40a5
   11488:	movt	r0, #1
   1148c:	movw	r1, #16089	; 0x3ed9
   11490:	movt	r1, #1
   11494:	movw	r3, #16170	; 0x3f2a
   11498:	movt	r3, #1
   1149c:	mov	r2, #155	; 0x9b
   114a0:	bl	10f50 <__assert_fail@plt>
   114a4:	movw	r0, #18955	; 0x4a0b
   114a8:	movt	r0, #1
   114ac:	b	111dc <verify_monster@@Base+0x190>
   114b0:	movw	r0, #18933	; 0x49f5
   114b4:	movt	r0, #1
   114b8:	b	111dc <verify_monster@@Base+0x190>
   114bc:	movw	r0, #18911	; 0x49df
   114c0:	movt	r0, #1
   114c4:	b	111dc <verify_monster@@Base+0x190>
   114c8:	movw	r0, #18889	; 0x49c9
   114cc:	movt	r0, #1
   114d0:	b	111dc <verify_monster@@Base+0x190>
   114d4:	movw	r0, #18867	; 0x49b3
   114d8:	movt	r0, #1
   114dc:	b	111dc <verify_monster@@Base+0x190>
   114e0:	movw	r0, #16036	; 0x3ea4
   114e4:	movt	r0, #1
   114e8:	movw	r1, #16089	; 0x3ed9
   114ec:	movt	r1, #1
   114f0:	movw	r3, #16170	; 0x3f2a
   114f4:	movt	r3, #1
   114f8:	mov	r2, #148	; 0x94
   114fc:	bl	10f50 <__assert_fail@plt>
   11500:	movw	r0, #16197	; 0x3f45
   11504:	movt	r0, #1
   11508:	movw	r1, #16089	; 0x3ed9
   1150c:	movt	r1, #1
   11510:	movw	r3, #16170	; 0x3f2a
   11514:	movt	r3, #1
   11518:	mov	r2, #149	; 0x95
   1151c:	bl	10f50 <__assert_fail@plt>
   11520:	movw	r0, #16250	; 0x3f7a
   11524:	movt	r0, #1
   11528:	movw	r1, #16089	; 0x3ed9
   1152c:	movt	r1, #1
   11530:	movw	r3, #16170	; 0x3f2a
   11534:	movt	r3, #1
   11538:	mov	r2, #150	; 0x96
   1153c:	bl	10f50 <__assert_fail@plt>
   11540:	movw	r0, #16313	; 0x3fb9
   11544:	movt	r0, #1
   11548:	movw	r1, #16089	; 0x3ed9
   1154c:	movt	r1, #1
   11550:	movw	r3, #16170	; 0x3f2a
   11554:	movt	r3, #1
   11558:	mov	r2, #151	; 0x97
   1155c:	bl	10f50 <__assert_fail@plt>
   11560:	movw	r0, #16376	; 0x3ff8
   11564:	movt	r0, #1
   11568:	movw	r1, #16089	; 0x3ed9
   1156c:	movt	r1, #1
   11570:	movw	r3, #16170	; 0x3f2a
   11574:	movt	r3, #1
   11578:	mov	r2, #152	; 0x98
   1157c:	bl	10f50 <__assert_fail@plt>
   11580:	movw	r0, #16431	; 0x402f
   11584:	movt	r0, #1
   11588:	movw	r1, #16089	; 0x3ed9
   1158c:	movt	r1, #1
   11590:	movw	r3, #16170	; 0x3f2a
   11594:	movt	r3, #1
   11598:	mov	r2, #153	; 0x99
   1159c:	bl	10f50 <__assert_fail@plt>
   115a0:	movw	r0, #16485	; 0x4065
   115a4:	movt	r0, #1
   115a8:	movw	r1, #16089	; 0x3ed9
   115ac:	movt	r1, #1
   115b0:	movw	r3, #16170	; 0x3f2a
   115b4:	movt	r3, #1
   115b8:	mov	r2, #154	; 0x9a
   115bc:	bl	10f50 <__assert_fail@plt>
   115c0:	push	{r4, r5, fp, lr}
   115c4:	add	fp, sp, #8
   115c8:	mov	r5, #0
   115cc:	cmp	r0, #0
   115d0:	beq	115f0 <verify_monster@@Base+0x5a4>
   115d4:	mov	r4, r0
   115d8:	bl	122f8 <main@@Base+0x3f4>
   115dc:	cmp	r0, #0
   115e0:	beq	115f0 <verify_monster@@Base+0x5a4>
   115e4:	mov	r0, r4
   115e8:	bl	12320 <main@@Base+0x41c>
   115ec:	add	r5, r4, r0
   115f0:	mov	r0, r5
   115f4:	pop	{r4, r5, fp, pc}
   115f8:	push	{r4, r5, fp, lr}
   115fc:	add	fp, sp, #8
   11600:	cmp	r0, #0
   11604:	beq	11648 <verify_monster@@Base+0x5fc>
   11608:	mov	r4, r0
   1160c:	bl	12338 <main@@Base+0x434>
   11610:	sub	r5, r4, r0
   11614:	mov	r0, r5
   11618:	bl	12340 <main@@Base+0x43c>
   1161c:	cmp	r0, #10
   11620:	bcc	11640 <verify_monster@@Base+0x5f4>
   11624:	add	r0, r5, #8
   11628:	bl	12340 <main@@Base+0x43c>
   1162c:	cmp	r0, #0
   11630:	beq	11640 <verify_monster@@Base+0x5f4>
   11634:	add	r0, r4, r0
   11638:	pop	{r4, r5, fp, lr}
   1163c:	b	12348 <main@@Base+0x444>
   11640:	mov	r0, #100	; 0x64
   11644:	pop	{r4, r5, fp, pc}
   11648:	movw	r0, #16821	; 0x41b5
   1164c:	movt	r0, #1
   11650:	movw	r1, #16859	; 0x41db
   11654:	movt	r1, #1
   11658:	movw	r3, #16957	; 0x423d
   1165c:	movt	r3, #1
   11660:	movw	r2, #697	; 0x2b9
   11664:	bl	10f50 <__assert_fail@plt>
   11668:	push	{r4, r5, fp, lr}
   1166c:	add	fp, sp, #8
   11670:	cmp	r0, #0
   11674:	beq	116b0 <verify_monster@@Base+0x664>
   11678:	mov	r4, r0
   1167c:	bl	12338 <main@@Base+0x434>
   11680:	sub	r5, r4, r0
   11684:	mov	r0, r5
   11688:	bl	12340 <main@@Base+0x43c>
   1168c:	cmp	r0, #6
   11690:	bcc	116a8 <verify_monster@@Base+0x65c>
   11694:	add	r0, r5, #4
   11698:	bl	12340 <main@@Base+0x43c>
   1169c:	cmp	r0, #0
   116a0:	addne	r0, r4, r0
   116a4:	popne	{r4, r5, fp, pc}
   116a8:	mov	r0, #0
   116ac:	pop	{r4, r5, fp, pc}
   116b0:	movw	r0, #16821	; 0x41b5
   116b4:	movt	r0, #1
   116b8:	movw	r1, #16859	; 0x41db
   116bc:	movt	r1, #1
   116c0:	movw	r3, #17023	; 0x427f
   116c4:	movt	r3, #1
   116c8:	mov	r2, #696	; 0x2b8
   116cc:	bl	10f50 <__assert_fail@plt>
   116d0:	cmp	r0, #0
   116d4:	beq	116dc <verify_monster@@Base+0x690>
   116d8:	b	1235c <main@@Base+0x458>
   116dc:	vldr	s0, [pc]	; 116e4 <verify_monster@@Base+0x698>
   116e0:	bx	lr
   116e4:	andeq	r0, r0, r0
   116e8:	cmp	r0, #0
   116ec:	beq	116f8 <verify_monster@@Base+0x6ac>
   116f0:	add	r0, r0, #4
   116f4:	b	1235c <main@@Base+0x458>
   116f8:	vldr	s0, [pc]	; 11700 <verify_monster@@Base+0x6b4>
   116fc:	bx	lr
   11700:	andeq	r0, r0, r0
   11704:	cmp	r0, #0
   11708:	beq	11714 <verify_monster@@Base+0x6c8>
   1170c:	add	r0, r0, #8
   11710:	b	1235c <main@@Base+0x458>
   11714:	vldr	s0, [pc]	; 1171c <verify_monster@@Base+0x6d0>
   11718:	bx	lr
   1171c:	andeq	r0, r0, r0
   11720:	cmp	r0, #0
   11724:	beq	11730 <verify_monster@@Base+0x6e4>
   11728:	add	r0, r0, #16
   1172c:	b	12368 <main@@Base+0x464>
   11730:	vmov.i32	d0, #0	; 0x00000000
   11734:	bx	lr
   11738:	cmp	r0, #0
   1173c:	moveq	r0, #0
   11740:	bxeq	lr
   11744:	add	r0, r0, #24
   11748:	b	12374 <main@@Base+0x470>
   1174c:	cmp	r0, #0
   11750:	addne	r0, r0, #26
   11754:	bx	lr
   11758:	cmp	r0, #0
   1175c:	moveq	r0, #0
   11760:	bxeq	lr
   11764:	b	12348 <main@@Base+0x444>
   11768:	cmp	r0, #0
   1176c:	moveq	r0, #0
   11770:	bxeq	lr
   11774:	add	r0, r0, #2
   11778:	b	12380 <main@@Base+0x47c>
   1177c:	push	{r4, r5, fp, lr}
   11780:	add	fp, sp, #8
   11784:	cmp	r0, #0
   11788:	beq	117dc <verify_monster@@Base+0x790>
   1178c:	mov	r4, r0
   11790:	bl	12338 <main@@Base+0x434>
   11794:	sub	r5, r4, r0
   11798:	mov	r0, r5
   1179c:	bl	12340 <main@@Base+0x43c>
   117a0:	cmp	r0, #12
   117a4:	bcc	117d0 <verify_monster@@Base+0x784>
   117a8:	add	r0, r5, #10
   117ac:	bl	12340 <main@@Base+0x43c>
   117b0:	cmp	r0, #0
   117b4:	beq	117d0 <verify_monster@@Base+0x784>
   117b8:	add	r4, r4, r0
   117bc:	mov	r0, r4
   117c0:	bl	12320 <main@@Base+0x41c>
   117c4:	add	r0, r4, r0
   117c8:	add	r0, r0, #4
   117cc:	pop	{r4, r5, fp, pc}
   117d0:	movw	r0, #17192	; 0x4328
   117d4:	movt	r0, #1
   117d8:	b	117e4 <verify_monster@@Base+0x798>
   117dc:	movw	r0, #16821	; 0x41b5
   117e0:	movt	r0, #1
   117e4:	movw	r1, #16859	; 0x41db
   117e8:	movt	r1, #1
   117ec:	movw	r3, #17111	; 0x42d7
   117f0:	movt	r3, #1
   117f4:	movw	r2, #699	; 0x2bb
   117f8:	bl	10f50 <__assert_fail@plt>
   117fc:	cmp	r0, #0
   11800:	moveq	r0, #0
   11804:	bxeq	lr
   11808:	sub	r0, r0, #4
   1180c:	b	12320 <main@@Base+0x41c>
   11810:	push	{r4, r5, r6, sl, fp, lr}
   11814:	add	fp, sp, #16
   11818:	cmp	r0, #0
   1181c:	beq	1186c <verify_monster@@Base+0x820>
   11820:	mov	r4, r0
   11824:	bl	12338 <main@@Base+0x434>
   11828:	sub	r6, r4, r0
   1182c:	mov	r0, r6
   11830:	bl	12340 <main@@Base+0x43c>
   11834:	mov	r5, #0
   11838:	cmp	r0, #16
   1183c:	bcc	11864 <verify_monster@@Base+0x818>
   11840:	add	r0, r6, #14
   11844:	bl	12340 <main@@Base+0x43c>
   11848:	cmp	r0, #0
   1184c:	beq	11864 <verify_monster@@Base+0x818>
   11850:	add	r4, r4, r0
   11854:	mov	r0, r4
   11858:	bl	12320 <main@@Base+0x41c>
   1185c:	add	r0, r4, r0
   11860:	add	r5, r0, #4
   11864:	mov	r0, r5
   11868:	pop	{r4, r5, r6, sl, fp, pc}
   1186c:	movw	r0, #16821	; 0x41b5
   11870:	movt	r0, #1
   11874:	movw	r1, #16859	; 0x41db
   11878:	movt	r1, #1
   1187c:	movw	r3, #17225	; 0x4349
   11880:	movt	r3, #1
   11884:	movw	r2, #706	; 0x2c2
   11888:	bl	10f50 <__assert_fail@plt>
   1188c:	b	1238c <main@@Base+0x488>
   11890:	push	{r4, r5, fp, lr}
   11894:	add	fp, sp, #8
   11898:	mov	r4, r1
   1189c:	mov	r5, r0
   118a0:	bl	1238c <main@@Base+0x488>
   118a4:	cmp	r0, r4
   118a8:	bls	118b8 <verify_monster@@Base+0x86c>
   118ac:	add	r0, r5, r4
   118b0:	pop	{r4, r5, fp, lr}
   118b4:	b	123a0 <main@@Base+0x49c>
   118b8:	movw	r0, #17314	; 0x43a2
   118bc:	movt	r0, #1
   118c0:	movw	r1, #17369	; 0x43d9
   118c4:	movt	r1, #1
   118c8:	movw	r3, #17473	; 0x4441
   118cc:	movt	r3, #1
   118d0:	movw	r2, #395	; 0x18b
   118d4:	bl	10f50 <__assert_fail@plt>
   118d8:	push	{r4, r5, r6, sl, fp, lr}
   118dc:	add	fp, sp, #16
   118e0:	cmp	r0, #0
   118e4:	beq	11934 <verify_monster@@Base+0x8e8>
   118e8:	mov	r4, r0
   118ec:	bl	12338 <main@@Base+0x434>
   118f0:	sub	r6, r4, r0
   118f4:	mov	r0, r6
   118f8:	bl	12340 <main@@Base+0x43c>
   118fc:	mov	r5, #0
   11900:	cmp	r0, #26
   11904:	bcc	1192c <verify_monster@@Base+0x8e0>
   11908:	add	r0, r6, #24
   1190c:	bl	12340 <main@@Base+0x43c>
   11910:	cmp	r0, #0
   11914:	beq	1192c <verify_monster@@Base+0x8e0>
   11918:	add	r4, r4, r0
   1191c:	mov	r0, r4
   11920:	bl	12320 <main@@Base+0x41c>
   11924:	add	r0, r4, r0
   11928:	add	r5, r0, #4
   1192c:	mov	r0, r5
   11930:	pop	{r4, r5, r6, sl, fp, pc}
   11934:	movw	r0, #16821	; 0x41b5
   11938:	movt	r0, #1
   1193c:	movw	r1, #16859	; 0x41db
   11940:	movt	r1, #1
   11944:	movw	r3, #17539	; 0x4483
   11948:	movt	r3, #1
   1194c:	mov	r2, #712	; 0x2c8
   11950:	bl	10f50 <__assert_fail@plt>
   11954:	cmp	r0, #0
   11958:	moveq	r0, #0
   1195c:	bxeq	lr
   11960:	sub	r0, r0, #4
   11964:	b	12320 <main@@Base+0x41c>
   11968:	push	{r4, r5, fp, lr}
   1196c:	add	fp, sp, #8
   11970:	mov	r4, r1
   11974:	mov	r5, r0
   11978:	bl	1238c <main@@Base+0x488>
   1197c:	cmp	r0, r4
   11980:	bls	1199c <verify_monster@@Base+0x950>
   11984:	add	r4, r5, r4, lsl #2
   11988:	mov	r0, r4
   1198c:	bl	12320 <main@@Base+0x41c>
   11990:	add	r0, r4, r0
   11994:	add	r0, r0, #4
   11998:	pop	{r4, r5, fp, pc}
   1199c:	movw	r0, #17314	; 0x43a2
   119a0:	movt	r0, #1
   119a4:	movw	r1, #17369	; 0x43d9
   119a8:	movt	r1, #1
   119ac:	movw	r3, #17637	; 0x44e5
   119b0:	movt	r3, #1
   119b4:	mov	r2, #108	; 0x6c
   119b8:	bl	10f50 <__assert_fail@plt>
   119bc:	push	{r4, r5, fp, lr}
   119c0:	add	fp, sp, #8
   119c4:	cmp	r0, #0
   119c8:	beq	11a0c <verify_monster@@Base+0x9c0>
   119cc:	mov	r4, r0
   119d0:	bl	12338 <main@@Base+0x434>
   119d4:	sub	r5, r4, r0
   119d8:	mov	r0, r5
   119dc:	bl	12340 <main@@Base+0x43c>
   119e0:	cmp	r0, #20
   119e4:	bcc	11a04 <verify_monster@@Base+0x9b8>
   119e8:	add	r0, r5, #18
   119ec:	bl	12340 <main@@Base+0x43c>
   119f0:	cmp	r0, #0
   119f4:	beq	11a04 <verify_monster@@Base+0x9b8>
   119f8:	add	r0, r4, r0
   119fc:	pop	{r4, r5, fp, lr}
   11a00:	b	123ac <main@@Base+0x4a8>
   11a04:	mov	r0, #0
   11a08:	pop	{r4, r5, fp, pc}
   11a0c:	movw	r0, #16821	; 0x41b5
   11a10:	movt	r0, #1
   11a14:	movw	r1, #16859	; 0x41db
   11a18:	movt	r1, #1
   11a1c:	movw	r3, #17718	; 0x4536
   11a20:	movt	r3, #1
   11a24:	movw	r2, #717	; 0x2cd
   11a28:	bl	10f50 <__assert_fail@plt>
   11a2c:	push	{r4, r5, r6, sl, fp, lr}
   11a30:	add	fp, sp, #16
   11a34:	cmp	r0, #0
   11a38:	beq	11a84 <verify_monster@@Base+0xa38>
   11a3c:	mov	r4, r0
   11a40:	bl	12338 <main@@Base+0x434>
   11a44:	sub	r6, r4, r0
   11a48:	mov	r0, r6
   11a4c:	bl	12340 <main@@Base+0x43c>
   11a50:	mov	r5, #0
   11a54:	cmp	r0, #22
   11a58:	bcc	11a7c <verify_monster@@Base+0xa30>
   11a5c:	add	r0, r6, #20
   11a60:	bl	12340 <main@@Base+0x43c>
   11a64:	cmp	r0, #0
   11a68:	beq	11a7c <verify_monster@@Base+0xa30>
   11a6c:	add	r4, r4, r0
   11a70:	mov	r0, r4
   11a74:	bl	12320 <main@@Base+0x41c>
   11a78:	add	r5, r4, r0
   11a7c:	mov	r0, r5
   11a80:	pop	{r4, r5, r6, sl, fp, pc}
   11a84:	movw	r0, #16821	; 0x41b5
   11a88:	movt	r0, #1
   11a8c:	movw	r1, #16859	; 0x41db
   11a90:	movt	r1, #1
   11a94:	movw	r3, #17815	; 0x4597
   11a98:	movt	r3, #1
   11a9c:	movw	r2, #717	; 0x2cd
   11aa0:	bl	10f50 <__assert_fail@plt>
   11aa4:	push	{r4, r5, r6, sl, fp, lr}
   11aa8:	add	fp, sp, #16
   11aac:	cmp	r0, #0
   11ab0:	beq	11b00 <verify_monster@@Base+0xab4>
   11ab4:	mov	r4, r0
   11ab8:	bl	12338 <main@@Base+0x434>
   11abc:	sub	r6, r4, r0
   11ac0:	mov	r0, r6
   11ac4:	bl	12340 <main@@Base+0x43c>
   11ac8:	mov	r5, #0
   11acc:	cmp	r0, #24
   11ad0:	bcc	11af8 <verify_monster@@Base+0xaac>
   11ad4:	add	r0, r6, #22
   11ad8:	bl	12340 <main@@Base+0x43c>
   11adc:	cmp	r0, #0
   11ae0:	beq	11af8 <verify_monster@@Base+0xaac>
   11ae4:	add	r4, r4, r0
   11ae8:	mov	r0, r4
   11aec:	bl	12320 <main@@Base+0x41c>
   11af0:	add	r0, r4, r0
   11af4:	add	r5, r0, #4
   11af8:	mov	r0, r5
   11afc:	pop	{r4, r5, r6, sl, fp, pc}
   11b00:	movw	r0, #16821	; 0x41b5
   11b04:	movt	r0, #1
   11b08:	movw	r1, #16859	; 0x41db
   11b0c:	movt	r1, #1
   11b10:	movw	r3, #17897	; 0x45e9
   11b14:	movt	r3, #1
   11b18:	movw	r2, #718	; 0x2ce
   11b1c:	bl	10f50 <__assert_fail@plt>
   11b20:	cmp	r0, #0
   11b24:	moveq	r0, #0
   11b28:	bxeq	lr
   11b2c:	sub	r0, r0, #4
   11b30:	b	12320 <main@@Base+0x41c>
   11b34:	push	{r4, r5, fp, lr}
   11b38:	add	fp, sp, #8
   11b3c:	mov	r4, r1
   11b40:	mov	r5, r0
   11b44:	bl	1238c <main@@Base+0x488>
   11b48:	cmp	r0, r4
   11b4c:	addhi	r0, r5, r4, lsl #2
   11b50:	pophi	{r4, r5, fp, pc}
   11b54:	movw	r0, #17314	; 0x43a2
   11b58:	movt	r0, #1
   11b5c:	movw	r1, #16859	; 0x41db
   11b60:	movt	r1, #1
   11b64:	movw	r3, #17984	; 0x4640
   11b68:	movt	r3, #1
   11b6c:	mov	r2, #380	; 0x17c
   11b70:	bl	10f50 <__assert_fail@plt>
   11b74:	push	{r4, r5, fp, lr}
   11b78:	add	fp, sp, #8
   11b7c:	cmp	r0, #0
   11b80:	beq	11bc4 <verify_monster@@Base+0xb78>
   11b84:	mov	r4, r0
   11b88:	bl	12338 <main@@Base+0x434>
   11b8c:	sub	r5, r4, r0
   11b90:	mov	r0, r5
   11b94:	bl	12340 <main@@Base+0x43c>
   11b98:	cmp	r0, #38	; 0x26
   11b9c:	bcc	11bbc <verify_monster@@Base+0xb70>
   11ba0:	add	r0, r5, #36	; 0x24
   11ba4:	bl	12340 <main@@Base+0x43c>
   11ba8:	cmp	r0, #0
   11bac:	beq	11bbc <verify_monster@@Base+0xb70>
   11bb0:	add	r0, r4, r0
   11bb4:	pop	{r4, r5, fp, lr}
   11bb8:	b	123b8 <main@@Base+0x4b4>
   11bbc:	mov	r0, #0
   11bc0:	pop	{r4, r5, fp, pc}
   11bc4:	movw	r0, #16821	; 0x41b5
   11bc8:	movt	r0, #1
   11bcc:	movw	r1, #16859	; 0x41db
   11bd0:	movt	r1, #1
   11bd4:	movw	r3, #18075	; 0x469b
   11bd8:	movt	r3, #1
   11bdc:	mov	r2, #724	; 0x2d4
   11be0:	bl	10f50 <__assert_fail@plt>
   11be4:	push	{r4, r5, fp, lr}
   11be8:	add	fp, sp, #8
   11bec:	cmp	r0, #0
   11bf0:	beq	11c34 <verify_monster@@Base+0xbe8>
   11bf4:	mov	r4, r0
   11bf8:	bl	12338 <main@@Base+0x434>
   11bfc:	sub	r5, r4, r0
   11c00:	mov	r0, r5
   11c04:	bl	12340 <main@@Base+0x43c>
   11c08:	cmp	r0, #40	; 0x28
   11c0c:	bcc	11c2c <verify_monster@@Base+0xbe0>
   11c10:	add	r0, r5, #38	; 0x26
   11c14:	bl	12340 <main@@Base+0x43c>
   11c18:	cmp	r0, #0
   11c1c:	beq	11c2c <verify_monster@@Base+0xbe0>
   11c20:	add	r0, r4, r0
   11c24:	pop	{r4, r5, fp, lr}
   11c28:	b	123c4 <main@@Base+0x4c0>
   11c2c:	mov	r0, #0
   11c30:	pop	{r4, r5, fp, pc}
   11c34:	movw	r0, #16821	; 0x41b5
   11c38:	movt	r0, #1
   11c3c:	movw	r1, #16859	; 0x41db
   11c40:	movt	r1, #1
   11c44:	movw	r3, #18155	; 0x46eb
   11c48:	movt	r3, #1
   11c4c:	movw	r2, #725	; 0x2d5
   11c50:	bl	10f50 <__assert_fail@plt>
   11c54:	push	{r4, r5, fp, lr}
   11c58:	add	fp, sp, #8
   11c5c:	cmp	r0, #0
   11c60:	beq	11ca8 <verify_monster@@Base+0xc5c>
   11c64:	mov	r4, r0
   11c68:	bl	12338 <main@@Base+0x434>
   11c6c:	sub	r5, r4, r0
   11c70:	mov	r0, r5
   11c74:	bl	12340 <main@@Base+0x43c>
   11c78:	cmp	r0, #42	; 0x2a
   11c7c:	bcc	11c9c <verify_monster@@Base+0xc50>
   11c80:	add	r0, r5, #40	; 0x28
   11c84:	bl	12340 <main@@Base+0x43c>
   11c88:	cmp	r0, #0
   11c8c:	beq	11c9c <verify_monster@@Base+0xc50>
   11c90:	add	r0, r4, r0
   11c94:	pop	{r4, r5, fp, lr}
   11c98:	b	123d0 <main@@Base+0x4cc>
   11c9c:	mov	r0, #0
   11ca0:	mov	r1, #0
   11ca4:	pop	{r4, r5, fp, pc}
   11ca8:	movw	r0, #16821	; 0x41b5
   11cac:	movt	r0, #1
   11cb0:	movw	r1, #16859	; 0x41db
   11cb4:	movt	r1, #1
   11cb8:	movw	r3, #18236	; 0x473c
   11cbc:	movt	r3, #1
   11cc0:	movw	r2, #726	; 0x2d6
   11cc4:	bl	10f50 <__assert_fail@plt>
   11cc8:	push	{r4, r5, fp, lr}
   11ccc:	add	fp, sp, #8
   11cd0:	cmp	r0, #0
   11cd4:	beq	11d1c <verify_monster@@Base+0xcd0>
   11cd8:	mov	r4, r0
   11cdc:	bl	12338 <main@@Base+0x434>
   11ce0:	sub	r5, r4, r0
   11ce4:	mov	r0, r5
   11ce8:	bl	12340 <main@@Base+0x43c>
   11cec:	cmp	r0, #44	; 0x2c
   11cf0:	bcc	11d10 <verify_monster@@Base+0xcc4>
   11cf4:	add	r0, r5, #42	; 0x2a
   11cf8:	bl	12340 <main@@Base+0x43c>
   11cfc:	cmp	r0, #0
   11d00:	beq	11d10 <verify_monster@@Base+0xcc4>
   11d04:	add	r0, r4, r0
   11d08:	pop	{r4, r5, fp, lr}
   11d0c:	b	123dc <main@@Base+0x4d8>
   11d10:	mov	r0, #0
   11d14:	mov	r1, #0
   11d18:	pop	{r4, r5, fp, pc}
   11d1c:	movw	r0, #16821	; 0x41b5
   11d20:	movt	r0, #1
   11d24:	movw	r1, #16859	; 0x41db
   11d28:	movt	r1, #1
   11d2c:	movw	r3, #18316	; 0x478c
   11d30:	movt	r3, #1
   11d34:	movw	r2, #727	; 0x2d7
   11d38:	bl	10f50 <__assert_fail@plt>
   11d3c:	push	{r4, r5, fp, lr}
   11d40:	add	fp, sp, #8
   11d44:	cmp	r0, #0
   11d48:	beq	11d8c <verify_monster@@Base+0xd40>
   11d4c:	mov	r4, r0
   11d50:	bl	12338 <main@@Base+0x434>
   11d54:	sub	r5, r4, r0
   11d58:	mov	r0, r5
   11d5c:	bl	12340 <main@@Base+0x43c>
   11d60:	cmp	r0, #46	; 0x2e
   11d64:	bcc	11d84 <verify_monster@@Base+0xd38>
   11d68:	add	r0, r5, #44	; 0x2c
   11d6c:	bl	12340 <main@@Base+0x43c>
   11d70:	cmp	r0, #0
   11d74:	beq	11d84 <verify_monster@@Base+0xd38>
   11d78:	add	r0, r4, r0
   11d7c:	pop	{r4, r5, fp, lr}
   11d80:	b	123b8 <main@@Base+0x4b4>
   11d84:	mov	r0, #0
   11d88:	pop	{r4, r5, fp, pc}
   11d8c:	movw	r0, #16821	; 0x41b5
   11d90:	movt	r0, #1
   11d94:	movw	r1, #16859	; 0x41db
   11d98:	movt	r1, #1
   11d9c:	movw	r3, #18397	; 0x47dd
   11da0:	movt	r3, #1
   11da4:	mov	r2, #728	; 0x2d8
   11da8:	bl	10f50 <__assert_fail@plt>
   11dac:	push	{r4, r5, fp, lr}
   11db0:	add	fp, sp, #8
   11db4:	cmp	r0, #0
   11db8:	beq	11dfc <verify_monster@@Base+0xdb0>
   11dbc:	mov	r4, r0
   11dc0:	bl	12338 <main@@Base+0x434>
   11dc4:	sub	r5, r4, r0
   11dc8:	mov	r0, r5
   11dcc:	bl	12340 <main@@Base+0x43c>
   11dd0:	cmp	r0, #48	; 0x30
   11dd4:	bcc	11df4 <verify_monster@@Base+0xda8>
   11dd8:	add	r0, r5, #46	; 0x2e
   11ddc:	bl	12340 <main@@Base+0x43c>
   11de0:	cmp	r0, #0
   11de4:	beq	11df4 <verify_monster@@Base+0xda8>
   11de8:	add	r0, r4, r0
   11dec:	pop	{r4, r5, fp, lr}
   11df0:	b	123c4 <main@@Base+0x4c0>
   11df4:	mov	r0, #0
   11df8:	pop	{r4, r5, fp, pc}
   11dfc:	movw	r0, #16821	; 0x41b5
   11e00:	movt	r0, #1
   11e04:	movw	r1, #16859	; 0x41db
   11e08:	movt	r1, #1
   11e0c:	movw	r3, #18478	; 0x482e
   11e10:	movt	r3, #1
   11e14:	movw	r2, #729	; 0x2d9
   11e18:	bl	10f50 <__assert_fail@plt>
   11e1c:	push	{r4, r5, fp, lr}
   11e20:	add	fp, sp, #8
   11e24:	cmp	r0, #0
   11e28:	beq	11e70 <verify_monster@@Base+0xe24>
   11e2c:	mov	r4, r0
   11e30:	bl	12338 <main@@Base+0x434>
   11e34:	sub	r5, r4, r0
   11e38:	mov	r0, r5
   11e3c:	bl	12340 <main@@Base+0x43c>
   11e40:	cmp	r0, #50	; 0x32
   11e44:	bcc	11e64 <verify_monster@@Base+0xe18>
   11e48:	add	r0, r5, #48	; 0x30
   11e4c:	bl	12340 <main@@Base+0x43c>
   11e50:	cmp	r0, #0
   11e54:	beq	11e64 <verify_monster@@Base+0xe18>
   11e58:	add	r0, r4, r0
   11e5c:	pop	{r4, r5, fp, lr}
   11e60:	b	123d0 <main@@Base+0x4cc>
   11e64:	mov	r0, #0
   11e68:	mov	r1, #0
   11e6c:	pop	{r4, r5, fp, pc}
   11e70:	movw	r0, #16821	; 0x41b5
   11e74:	movt	r0, #1
   11e78:	movw	r1, #16859	; 0x41db
   11e7c:	movt	r1, #1
   11e80:	movw	r3, #18560	; 0x4880
   11e84:	movt	r3, #1
   11e88:	movw	r2, #730	; 0x2da
   11e8c:	bl	10f50 <__assert_fail@plt>
   11e90:	push	{r4, r5, fp, lr}
   11e94:	add	fp, sp, #8
   11e98:	cmp	r0, #0
   11e9c:	beq	11ee4 <verify_monster@@Base+0xe98>
   11ea0:	mov	r4, r0
   11ea4:	bl	12338 <main@@Base+0x434>
   11ea8:	sub	r5, r4, r0
   11eac:	mov	r0, r5
   11eb0:	bl	12340 <main@@Base+0x43c>
   11eb4:	cmp	r0, #52	; 0x34
   11eb8:	bcc	11ed8 <verify_monster@@Base+0xe8c>
   11ebc:	add	r0, r5, #50	; 0x32
   11ec0:	bl	12340 <main@@Base+0x43c>
   11ec4:	cmp	r0, #0
   11ec8:	beq	11ed8 <verify_monster@@Base+0xe8c>
   11ecc:	add	r0, r4, r0
   11ed0:	pop	{r4, r5, fp, lr}
   11ed4:	b	123dc <main@@Base+0x4d8>
   11ed8:	mov	r0, #0
   11edc:	mov	r1, #0
   11ee0:	pop	{r4, r5, fp, pc}
   11ee4:	movw	r0, #16821	; 0x41b5
   11ee8:	movt	r0, #1
   11eec:	movw	r1, #16859	; 0x41db
   11ef0:	movt	r1, #1
   11ef4:	movw	r3, #18641	; 0x48d1
   11ef8:	movt	r3, #1
   11efc:	movw	r2, #731	; 0x2db
   11f00:	bl	10f50 <__assert_fail@plt>

00011f04 <main@@Base>:
   11f04:	push	{r4, r5, r6, sl, fp, lr}
   11f08:	add	fp, sp, #16
   11f0c:	sub	sp, sp, #8
   11f10:	sub	r2, r0, #1
   11f14:	cmp	r2, #2
   11f18:	bcs	12028 <main@@Base+0x124>
   11f1c:	cmp	r0, #2
   11f20:	movw	r6, #24688	; 0x6070
   11f24:	movt	r6, #2
   11f28:	ldreq	r0, [r1, #4]
   11f2c:	streq	r0, [r6]
   11f30:	ldr	r0, [r6]
   11f34:	add	r1, sp, #4
   11f38:	bl	12050 <main@@Base+0x14c>
   11f3c:	mov	r5, r0
   11f40:	ldr	r0, [sp, #4]
   11f44:	add	r0, r0, #255	; 0xff
   11f48:	bic	r0, r0, #255	; 0xff
   11f4c:	bl	12148 <main@@Base+0x244>
   11f50:	mov	r4, r0
   11f54:	ldr	r2, [sp, #4]
   11f58:	mov	r1, r5
   11f5c:	bl	10e84 <memcpy@plt>
   11f60:	mov	r0, r5
   11f64:	bl	10e78 <free@plt>
   11f68:	cmp	r4, #0
   11f6c:	beq	11fd0 <main@@Base+0xcc>
   11f70:	movw	r5, #24696	; 0x6078
   11f74:	movt	r5, #2
   11f78:	ldr	r2, [r5]
   11f7c:	ldr	r1, [sp, #4]
   11f80:	mov	r0, r4
   11f84:	bl	12194 <main@@Base+0x290>
   11f88:	ldr	r1, [sp, #4]
   11f8c:	mov	r0, r4
   11f90:	bl	122d0 <main@@Base+0x3cc>
   11f94:	cmp	r0, #0
   11f98:	bne	11ff4 <main@@Base+0xf0>
   11f9c:	ldr	r1, [sp, #4]
   11fa0:	mov	r0, r4
   11fa4:	bl	122e4 <main@@Base+0x3e0>
   11fa8:	cmp	r0, #0
   11fac:	bne	12008 <main@@Base+0x104>
   11fb0:	mov	r0, r4
   11fb4:	bl	1104c <verify_monster@@Base>
   11fb8:	mov	r5, r0
   11fbc:	mov	r0, r4
   11fc0:	bl	10e78 <free@plt>
   11fc4:	mov	r0, r5
   11fc8:	sub	sp, fp, #16
   11fcc:	pop	{r4, r5, r6, sl, fp, pc}
   11fd0:	ldr	r2, [r6]
   11fd4:	movw	r0, #24696	; 0x6078
   11fd8:	movt	r0, #2
   11fdc:	ldr	r0, [r0]
   11fe0:	movw	r1, #16677	; 0x4125
   11fe4:	movt	r1, #1
   11fe8:	bl	10ef0 <fprintf@plt>
   11fec:	mvn	r5, #0
   11ff0:	b	11fc4 <main@@Base+0xc0>
   11ff4:	ldr	r3, [r5]
   11ff8:	movw	r0, #16719	; 0x414f
   11ffc:	movt	r0, #1
   12000:	mov	r1, #38	; 0x26
   12004:	b	12018 <main@@Base+0x114>
   12008:	ldr	r3, [r5]
   1200c:	movw	r0, #16758	; 0x4176
   12010:	movt	r0, #1
   12014:	mov	r1, #62	; 0x3e
   12018:	mov	r2, #1
   1201c:	bl	10ea8 <fwrite@plt>
   12020:	mvn	r5, #0
   12024:	b	11fbc <main@@Base+0xb8>
   12028:	movw	r0, #24696	; 0x6078
   1202c:	movt	r0, #2
   12030:	ldr	r3, [r0]
   12034:	movw	r0, #16613	; 0x40e5
   12038:	movt	r0, #1
   1203c:	mov	r1, #63	; 0x3f
   12040:	mov	r2, #1
   12044:	bl	10ea8 <fwrite@plt>
   12048:	mov	r0, #1
   1204c:	bl	10ee4 <exit@plt>
   12050:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12054:	add	fp, sp, #24
   12058:	sub	sp, sp, #8
   1205c:	add	r9, sp, #4
   12060:	cmp	r1, #0
   12064:	movne	r9, r1
   12068:	movw	r1, #18723	; 0x4923
   1206c:	movt	r1, #1
   12070:	bl	10e6c <fopen@plt>
   12074:	cmp	r0, #0
   12078:	beq	1210c <main@@Base+0x208>
   1207c:	mov	r6, r0
   12080:	mov	r8, #0
   12084:	mov	r1, #0
   12088:	mov	r2, #2
   1208c:	bl	10f38 <fseek@plt>
   12090:	mov	r0, r6
   12094:	bl	10e90 <ftell@plt>
   12098:	mov	r5, r0
   1209c:	str	r0, [r9]
   120a0:	cmp	r0, #1024	; 0x400
   120a4:	bhi	1211c <main@@Base+0x218>
   120a8:	mov	r0, r6
   120ac:	bl	10e9c <rewind@plt>
   120b0:	cmp	r5, #0
   120b4:	mov	r0, r5
   120b8:	movweq	r0, #1
   120bc:	bl	10ec0 <malloc@plt>
   120c0:	cmp	r0, #0
   120c4:	beq	1211c <main@@Base+0x218>
   120c8:	mov	r7, r0
   120cc:	mov	r8, r0
   120d0:	mov	r1, #0
   120d4:	mov	r4, r1
   120d8:	add	r0, r7, r1
   120dc:	sub	r2, r5, r1
   120e0:	mov	r1, #1
   120e4:	mov	r3, r6
   120e8:	bl	10f2c <fread_unlocked@plt>
   120ec:	add	r1, r0, r4
   120f0:	cmp	r0, #0
   120f4:	bne	120d4 <main@@Base+0x1d0>
   120f8:	cmp	r5, r4
   120fc:	bne	12114 <main@@Base+0x210>
   12100:	mov	r0, r6
   12104:	bl	10f14 <fclose@plt>
   12108:	b	12138 <main@@Base+0x234>
   1210c:	mov	r5, #0
   12110:	b	12134 <main@@Base+0x230>
   12114:	cmp	r6, #0
   12118:	beq	12124 <main@@Base+0x220>
   1211c:	mov	r0, r6
   12120:	bl	10f14 <fclose@plt>
   12124:	cmp	r8, #0
   12128:	beq	12134 <main@@Base+0x230>
   1212c:	mov	r0, r8
   12130:	bl	10e78 <free@plt>
   12134:	mov	r8, #0
   12138:	str	r5, [r9]
   1213c:	mov	r0, r8
   12140:	sub	sp, fp, #24
   12144:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12148:	push	{fp, lr}
   1214c:	mov	fp, sp
   12150:	sub	sp, sp, #8
   12154:	mov	r2, r0
   12158:	mov	r0, #0
   1215c:	str	r0, [sp, #4]
   12160:	add	r0, sp, #4
   12164:	mov	r1, #256	; 0x100
   12168:	bl	10efc <posix_memalign@plt>
   1216c:	cmp	r0, #0
   12170:	ldrne	r0, [sp, #4]
   12174:	cmpne	r0, #0
   12178:	beq	12188 <main@@Base+0x284>
   1217c:	bl	10e78 <free@plt>
   12180:	mov	r0, #0
   12184:	str	r0, [sp, #4]
   12188:	ldr	r0, [sp, #4]
   1218c:	mov	sp, fp
   12190:	pop	{fp, pc}
   12194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12198:	add	fp, sp, #28
   1219c:	sub	sp, sp, #20
   121a0:	mov	r4, r2
   121a4:	mov	r5, r1
   121a8:	mov	r6, r0
   121ac:	movw	r1, #18726	; 0x4926
   121b0:	movt	r1, #1
   121b4:	movw	r2, #15964	; 0x3e5c
   121b8:	movt	r2, #1
   121bc:	mov	r0, r4
   121c0:	bl	10ef0 <fprintf@plt>
   121c4:	cmp	r5, #0
   121c8:	beq	122b4 <main@@Base+0x3b0>
   121cc:	add	r7, sp, #3
   121d0:	movw	sl, #18745	; 0x4939
   121d4:	movt	sl, #1
   121d8:	mov	r8, #0
   121dc:	ands	r9, r8, #15
   121e0:	bne	12244 <main@@Base+0x340>
   121e4:	b	1225c <main@@Base+0x358>
   121e8:	mov	r0, r4
   121ec:	movw	r1, #18737	; 0x4931
   121f0:	movt	r1, #1
   121f4:	mov	r2, r8
   121f8:	bl	10ef0 <fprintf@plt>
   121fc:	ldrb	r2, [r6, r8]
   12200:	mov	r0, r4
   12204:	mov	r1, sl
   12208:	bl	10ef0 <fprintf@plt>
   1220c:	ldrb	r0, [r6, r8]
   12210:	sub	r1, r0, #32
   12214:	uxtb	r1, r1
   12218:	cmp	r1, #94	; 0x5e
   1221c:	movwhi	r0, #46	; 0x2e
   12220:	strb	r0, [r7, r9]
   12224:	add	r0, r7, r9
   12228:	mov	r1, #0
   1222c:	strb	r1, [r0, #1]
   12230:	add	r8, r8, #1
   12234:	cmp	r5, r8
   12238:	beq	1227c <main@@Base+0x378>
   1223c:	ands	r9, r8, #15
   12240:	beq	1225c <main@@Base+0x358>
   12244:	tst	r8, #7
   12248:	bne	121fc <main@@Base+0x2f8>
   1224c:	mov	r0, #32
   12250:	mov	r1, r4
   12254:	bl	10f20 <fputc@plt>
   12258:	b	121fc <main@@Base+0x2f8>
   1225c:	cmp	r8, #0
   12260:	beq	121e8 <main@@Base+0x2e4>
   12264:	mov	r0, r4
   12268:	movw	r1, #18731	; 0x492b
   1226c:	movt	r1, #1
   12270:	mov	r2, r7
   12274:	bl	10ef0 <fprintf@plt>
   12278:	b	121e8 <main@@Base+0x2e4>
   1227c:	tst	r5, #15
   12280:	beq	122b4 <main@@Base+0x3b0>
   12284:	add	r6, r5, #1
   12288:	movw	r5, #18751	; 0x493f
   1228c:	movt	r5, #1
   12290:	mov	r0, r5
   12294:	mov	r1, #3
   12298:	mov	r2, #1
   1229c:	mov	r3, r4
   122a0:	bl	10ea8 <fwrite@plt>
   122a4:	add	r0, r6, #1
   122a8:	tst	r6, #15
   122ac:	mov	r6, r0
   122b0:	bne	12290 <main@@Base+0x38c>
   122b4:	movw	r1, #18731	; 0x492b
   122b8:	movt	r1, #1
   122bc:	add	r2, sp, #3
   122c0:	mov	r0, r4
   122c4:	bl	10ef0 <fprintf@plt>
   122c8:	sub	sp, fp, #28
   122cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122d0:	movw	r2, #16714	; 0x414a
   122d4:	movt	r2, #1
   122d8:	movw	r3, #9192	; 0x23e8
   122dc:	movt	r3, #1
   122e0:	b	13694 <flatcc_verify_table_as_root@@Base>
   122e4:	movw	r2, #16714	; 0x414a
   122e8:	movt	r2, #1
   122ec:	movw	r3, #9192	; 0x23e8
   122f0:	movt	r3, #1
   122f4:	b	13694 <flatcc_verify_table_as_root@@Base>
   122f8:	push	{fp, lr}
   122fc:	mov	fp, sp
   12300:	add	r0, r0, #4
   12304:	bl	12328 <main@@Base+0x424>
   12308:	movw	r1, #45235	; 0xb0b3
   1230c:	movt	r1, #44209	; 0xacb1
   12310:	add	r0, r0, r1
   12314:	clz	r0, r0
   12318:	lsr	r0, r0, #5
   1231c:	pop	{fp, pc}
   12320:	ldr	r0, [r0]
   12324:	b	12334 <main@@Base+0x430>
   12328:	ldr	r0, [r0]
   1232c:	b	12330 <main@@Base+0x42c>
   12330:	bx	lr
   12334:	bx	lr
   12338:	ldr	r0, [r0]
   1233c:	b	12350 <main@@Base+0x44c>
   12340:	ldrh	r0, [r0]
   12344:	b	12354 <main@@Base+0x450>
   12348:	ldrsh	r0, [r0]
   1234c:	b	12358 <main@@Base+0x454>
   12350:	bx	lr
   12354:	bx	lr
   12358:	bx	lr
   1235c:	vldr	s0, [r0]
   12360:	b	12364 <main@@Base+0x460>
   12364:	bx	lr
   12368:	vldr	d0, [r0]
   1236c:	b	12370 <main@@Base+0x46c>
   12370:	bx	lr
   12374:	ldrsb	r0, [r0]
   12378:	b	1237c <main@@Base+0x478>
   1237c:	bx	lr
   12380:	ldrsb	r0, [r0]
   12384:	b	12388 <main@@Base+0x484>
   12388:	bx	lr
   1238c:	cmp	r0, #0
   12390:	moveq	r0, #0
   12394:	bxeq	lr
   12398:	sub	r0, r0, #4
   1239c:	b	12320 <main@@Base+0x41c>
   123a0:	ldrb	r0, [r0]
   123a4:	b	123a8 <main@@Base+0x4a4>
   123a8:	bx	lr
   123ac:	ldrb	r0, [r0]
   123b0:	b	123b4 <main@@Base+0x4b0>
   123b4:	bx	lr
   123b8:	ldr	r0, [r0]
   123bc:	b	123c0 <main@@Base+0x4bc>
   123c0:	bx	lr
   123c4:	ldr	r0, [r0]
   123c8:	b	123cc <main@@Base+0x4c8>
   123cc:	bx	lr
   123d0:	ldrd	r0, [r0]
   123d4:	b	123d8 <main@@Base+0x4d4>
   123d8:	bx	lr
   123dc:	ldrd	r0, [r0]
   123e0:	b	123e4 <main@@Base+0x4e0>
   123e4:	bx	lr
   123e8:	push	{r4, r5, r6, r7, fp, lr}
   123ec:	add	fp, sp, #16
   123f0:	sub	sp, sp, #8
   123f4:	mov	r4, r0
   123f8:	mov	r1, #0
   123fc:	mov	r2, #32
   12400:	mov	r3, #16
   12404:	bl	12d6c <flatcc_verify_field@@Base>
   12408:	cmp	r0, #0
   1240c:	bne	12814 <main@@Base+0x910>
   12410:	mov	r0, r4
   12414:	mov	r1, #2
   12418:	mov	r2, #2
   1241c:	mov	r3, #2
   12420:	bl	12d6c <flatcc_verify_field@@Base>
   12424:	cmp	r0, #0
   12428:	bne	12814 <main@@Base+0x910>
   1242c:	mov	r0, r4
   12430:	mov	r1, #1
   12434:	mov	r2, #2
   12438:	mov	r3, #2
   1243c:	bl	12d6c <flatcc_verify_field@@Base>
   12440:	cmp	r0, #0
   12444:	bne	12814 <main@@Base+0x910>
   12448:	mov	r0, r4
   1244c:	mov	r1, #3
   12450:	mov	r2, #1
   12454:	bl	12dd8 <flatcc_verify_string_field@@Base>
   12458:	cmp	r0, #0
   1245c:	bne	12814 <main@@Base+0x910>
   12460:	mov	r5, #1
   12464:	mov	r0, r4
   12468:	mov	r1, #6
   1246c:	mov	r2, #1
   12470:	mov	r3, #1
   12474:	bl	12d6c <flatcc_verify_field@@Base>
   12478:	cmp	r0, #0
   1247c:	bne	12814 <main@@Base+0x910>
   12480:	mvn	r0, #0
   12484:	str	r5, [sp]
   12488:	str	r0, [sp, #4]
   1248c:	mov	r0, r4
   12490:	mov	r1, #5
   12494:	mov	r2, #0
   12498:	mov	r3, #1
   1249c:	bl	12f2c <flatcc_verify_vector_field@@Base>
   124a0:	cmp	r0, #0
   124a4:	bne	12814 <main@@Base+0x910>
   124a8:	movw	r3, #9192	; 0x23e8
   124ac:	movt	r3, #1
   124b0:	mov	r0, r4
   124b4:	mov	r1, #11
   124b8:	mov	r2, #0
   124bc:	bl	13298 <flatcc_verify_table_vector_field@@Base>
   124c0:	cmp	r0, #0
   124c4:	bne	12814 <main@@Base+0x910>
   124c8:	mov	r0, r4
   124cc:	mov	r1, #10
   124d0:	mov	r2, #0
   124d4:	bl	1301c <flatcc_verify_string_vector_field@@Base>
   124d8:	cmp	r0, #0
   124dc:	bne	12814 <main@@Base+0x910>
   124e0:	mov	r0, r4
   124e4:	mov	r1, #28
   124e8:	mov	r2, #0
   124ec:	bl	1301c <flatcc_verify_string_vector_field@@Base>
   124f0:	cmp	r0, #0
   124f4:	bne	12814 <main@@Base+0x910>
   124f8:	mvn	r0, #0
   124fc:	mov	r1, #1
   12500:	str	r1, [sp]
   12504:	str	r0, [sp, #4]
   12508:	mov	r0, r4
   1250c:	mov	r1, #24
   12510:	mov	r2, #0
   12514:	mov	r3, #1
   12518:	bl	12f2c <flatcc_verify_vector_field@@Base>
   1251c:	cmp	r0, #0
   12520:	bne	12814 <main@@Base+0x910>
   12524:	mvn	r0, #-536870912	; 0xe0000000
   12528:	mov	r1, #4
   1252c:	str	r1, [sp]
   12530:	str	r0, [sp, #4]
   12534:	mov	r0, r4
   12538:	mov	r1, #29
   1253c:	mov	r2, #0
   12540:	mov	r3, #8
   12544:	bl	12f2c <flatcc_verify_vector_field@@Base>
   12548:	cmp	r0, #0
   1254c:	bne	12814 <main@@Base+0x910>
   12550:	movw	r5, #9192	; 0x23e8
   12554:	movt	r5, #1
   12558:	mov	r0, r4
   1255c:	mov	r1, #12
   12560:	mov	r2, #0
   12564:	mov	r3, r5
   12568:	bl	13124 <flatcc_verify_table_field@@Base>
   1256c:	cmp	r0, #0
   12570:	bne	12814 <main@@Base+0x910>
   12574:	movw	r3, #10300	; 0x283c
   12578:	movt	r3, #1
   1257c:	mov	r0, r4
   12580:	mov	r1, #8
   12584:	mov	r2, #0
   12588:	bl	13960 <flatcc_verify_union_field@@Base>
   1258c:	cmp	r0, #0
   12590:	bne	12814 <main@@Base+0x910>
   12594:	mvn	r6, #-1073741824	; 0xc0000000
   12598:	mov	r7, #2
   1259c:	str	r7, [sp]
   125a0:	str	r6, [sp, #4]
   125a4:	mov	r0, r4
   125a8:	mov	r1, #9
   125ac:	mov	r2, #0
   125b0:	mov	r3, #4
   125b4:	bl	12f2c <flatcc_verify_vector_field@@Base>
   125b8:	cmp	r0, #0
   125bc:	bne	12814 <main@@Base+0x910>
   125c0:	str	r7, [sp]
   125c4:	str	r6, [sp, #4]
   125c8:	mov	r0, r4
   125cc:	mov	r1, #31
   125d0:	mov	r2, #0
   125d4:	mov	r3, #4
   125d8:	bl	12f2c <flatcc_verify_vector_field@@Base>
   125dc:	cmp	r0, #0
   125e0:	bne	12814 <main@@Base+0x910>
   125e4:	mov	r0, #1
   125e8:	stm	sp, {r0, r5}
   125ec:	mov	r0, r4
   125f0:	mov	r1, #13
   125f4:	mov	r2, #0
   125f8:	mov	r3, #0
   125fc:	bl	13854 <flatcc_verify_table_as_nested_root@@Base>
   12600:	cmp	r0, #0
   12604:	bne	12814 <main@@Base+0x910>
   12608:	movw	r3, #10344	; 0x2868
   1260c:	movt	r3, #1
   12610:	mov	r0, r4
   12614:	mov	r1, #14
   12618:	mov	r2, #0
   1261c:	bl	13124 <flatcc_verify_table_field@@Base>
   12620:	cmp	r0, #0
   12624:	bne	12814 <main@@Base+0x910>
   12628:	mov	r0, r4
   1262c:	mov	r1, #15
   12630:	mov	r2, #1
   12634:	mov	r3, #1
   12638:	bl	12d6c <flatcc_verify_field@@Base>
   1263c:	cmp	r0, #0
   12640:	bne	12814 <main@@Base+0x910>
   12644:	mov	r0, r4
   12648:	mov	r1, #16
   1264c:	mov	r2, #4
   12650:	mov	r3, #4
   12654:	bl	12d6c <flatcc_verify_field@@Base>
   12658:	cmp	r0, #0
   1265c:	bne	12814 <main@@Base+0x910>
   12660:	mov	r0, r4
   12664:	mov	r1, #17
   12668:	mov	r2, #4
   1266c:	mov	r3, #4
   12670:	bl	12d6c <flatcc_verify_field@@Base>
   12674:	cmp	r0, #0
   12678:	bne	12814 <main@@Base+0x910>
   1267c:	mov	r0, r4
   12680:	mov	r1, #18
   12684:	mov	r2, #8
   12688:	mov	r3, #8
   1268c:	bl	12d6c <flatcc_verify_field@@Base>
   12690:	cmp	r0, #0
   12694:	bne	12814 <main@@Base+0x910>
   12698:	mov	r0, r4
   1269c:	mov	r1, #19
   126a0:	mov	r2, #8
   126a4:	mov	r3, #8
   126a8:	bl	12d6c <flatcc_verify_field@@Base>
   126ac:	cmp	r0, #0
   126b0:	bne	12814 <main@@Base+0x910>
   126b4:	mov	r0, r4
   126b8:	mov	r1, #20
   126bc:	mov	r2, #4
   126c0:	mov	r3, #4
   126c4:	bl	12d6c <flatcc_verify_field@@Base>
   126c8:	cmp	r0, #0
   126cc:	bne	12814 <main@@Base+0x910>
   126d0:	mov	r0, r4
   126d4:	mov	r1, #21
   126d8:	mov	r2, #4
   126dc:	mov	r3, #4
   126e0:	bl	12d6c <flatcc_verify_field@@Base>
   126e4:	cmp	r0, #0
   126e8:	bne	12814 <main@@Base+0x910>
   126ec:	mov	r0, r4
   126f0:	mov	r1, #22
   126f4:	mov	r2, #8
   126f8:	mov	r3, #8
   126fc:	bl	12d6c <flatcc_verify_field@@Base>
   12700:	cmp	r0, #0
   12704:	bne	12814 <main@@Base+0x910>
   12708:	mov	r0, r4
   1270c:	mov	r1, #23
   12710:	mov	r2, #8
   12714:	mov	r3, #8
   12718:	bl	12d6c <flatcc_verify_field@@Base>
   1271c:	cmp	r0, #0
   12720:	bne	12814 <main@@Base+0x910>
   12724:	mov	r0, r4
   12728:	mov	r1, #25
   1272c:	mov	r2, #4
   12730:	mov	r3, #4
   12734:	bl	12d6c <flatcc_verify_field@@Base>
   12738:	cmp	r0, #0
   1273c:	bne	12814 <main@@Base+0x910>
   12740:	mov	r0, r4
   12744:	mov	r1, #26
   12748:	mov	r2, #4
   1274c:	mov	r3, #4
   12750:	bl	12d6c <flatcc_verify_field@@Base>
   12754:	cmp	r0, #0
   12758:	bne	12814 <main@@Base+0x910>
   1275c:	mov	r0, r4
   12760:	mov	r1, #27
   12764:	mov	r2, #4
   12768:	mov	r3, #4
   1276c:	bl	12d6c <flatcc_verify_field@@Base>
   12770:	cmp	r0, #0
   12774:	bne	12814 <main@@Base+0x910>
   12778:	mvn	r0, #0
   1277c:	mov	r1, #1
   12780:	str	r1, [sp]
   12784:	str	r0, [sp, #4]
   12788:	mov	r0, r4
   1278c:	mov	r1, #30
   12790:	mov	r2, #0
   12794:	mov	r3, #1
   12798:	bl	12f2c <flatcc_verify_vector_field@@Base>
   1279c:	cmp	r0, #0
   127a0:	bne	12814 <main@@Base+0x910>
   127a4:	mvn	r5, #-536870912	; 0xe0000000
   127a8:	mov	r6, #8
   127ac:	str	r6, [sp]
   127b0:	str	r5, [sp, #4]
   127b4:	mov	r0, r4
   127b8:	mov	r1, #32
   127bc:	mov	r2, #0
   127c0:	mov	r3, #8
   127c4:	bl	12f2c <flatcc_verify_vector_field@@Base>
   127c8:	cmp	r0, #0
   127cc:	bne	12814 <main@@Base+0x910>
   127d0:	str	r6, [sp]
   127d4:	str	r5, [sp, #4]
   127d8:	mov	r0, r4
   127dc:	mov	r1, #33	; 0x21
   127e0:	mov	r2, #0
   127e4:	mov	r3, #8
   127e8:	bl	12f2c <flatcc_verify_vector_field@@Base>
   127ec:	cmp	r0, #0
   127f0:	bne	12814 <main@@Base+0x910>
   127f4:	movw	r3, #10432	; 0x28c0
   127f8:	movt	r3, #1
   127fc:	mov	r0, r4
   12800:	mov	r1, #34	; 0x22
   12804:	mov	r2, #0
   12808:	bl	13124 <flatcc_verify_table_field@@Base>
   1280c:	cmp	r0, #0
   12810:	beq	1281c <main@@Base+0x918>
   12814:	sub	sp, fp, #16
   12818:	pop	{r4, r5, r6, r7, fp, pc}
   1281c:	movw	r3, #10440	; 0x28c8
   12820:	movt	r3, #1
   12824:	mov	r0, r4
   12828:	mov	r1, #35	; 0x23
   1282c:	mov	r2, #0
   12830:	sub	sp, fp, #16
   12834:	pop	{r4, r5, r6, r7, fp, lr}
   12838:	b	13124 <flatcc_verify_table_field@@Base>
   1283c:	ldrb	r1, [r0, #12]
   12840:	sub	r1, r1, #1
   12844:	uxtb	r2, r1
   12848:	cmp	r2, #3
   1284c:	movhi	r0, #0
   12850:	bxhi	lr
   12854:	sxtb	r1, r1
   12858:	movw	r2, #19436	; 0x4bec
   1285c:	movt	r2, #1
   12860:	ldr	r1, [r2, r1, lsl #2]
   12864:	b	133f8 <flatcc_verify_union_table@@Base>
   12868:	push	{r4, sl, fp, lr}
   1286c:	add	fp, sp, #8
   12870:	mov	r4, r0
   12874:	mov	r1, #0
   12878:	mov	r2, #0
   1287c:	bl	12dd8 <flatcc_verify_string_field@@Base>
   12880:	cmp	r0, #0
   12884:	popne	{r4, sl, fp, pc}
   12888:	mov	r0, r4
   1288c:	mov	r1, #1
   12890:	mov	r2, #8
   12894:	mov	r3, #8
   12898:	bl	12d6c <flatcc_verify_field@@Base>
   1289c:	cmp	r0, #0
   128a0:	beq	128a8 <main@@Base+0x9a4>
   128a4:	pop	{r4, sl, fp, pc}
   128a8:	mov	r0, r4
   128ac:	mov	r1, #2
   128b0:	mov	r2, #2
   128b4:	mov	r3, #2
   128b8:	pop	{r4, sl, fp, lr}
   128bc:	b	12d6c <flatcc_verify_field@@Base>
   128c0:	mov	r0, #0
   128c4:	bx	lr
   128c8:	push	{r4, r5, r6, sl, fp, lr}
   128cc:	add	fp, sp, #16
   128d0:	sub	sp, sp, #8
   128d4:	mov	r4, r0
   128d8:	mvn	r5, #0
   128dc:	mov	r6, #1
   128e0:	str	r6, [sp]
   128e4:	str	r5, [sp, #4]
   128e8:	mov	r1, #0
   128ec:	mov	r2, #0
   128f0:	mov	r3, #1
   128f4:	bl	12f2c <flatcc_verify_vector_field@@Base>
   128f8:	cmp	r0, #0
   128fc:	bne	12924 <main@@Base+0xa20>
   12900:	str	r6, [sp]
   12904:	str	r5, [sp, #4]
   12908:	mov	r0, r4
   1290c:	mov	r1, #1
   12910:	mov	r2, #0
   12914:	mov	r3, #1
   12918:	bl	12f2c <flatcc_verify_vector_field@@Base>
   1291c:	cmp	r0, #0
   12920:	beq	1292c <main@@Base+0xa28>
   12924:	sub	sp, fp, #16
   12928:	pop	{r4, r5, r6, sl, fp, pc}
   1292c:	movw	r0, #9192	; 0x23e8
   12930:	movt	r0, #1
   12934:	mov	r1, #1
   12938:	str	r1, [sp]
   1293c:	str	r0, [sp, #4]
   12940:	mov	r0, r4
   12944:	mov	r1, #2
   12948:	mov	r2, #0
   1294c:	mov	r3, #0
   12950:	bl	13854 <flatcc_verify_table_as_nested_root@@Base>
   12954:	sub	sp, fp, #16
   12958:	pop	{r4, r5, r6, sl, fp, pc}
   1295c:	push	{r4, sl, fp, lr}
   12960:	add	fp, sp, #8
   12964:	mov	r4, r0
   12968:	mov	r1, #0
   1296c:	mov	r2, #1
   12970:	mov	r3, #1
   12974:	bl	12d6c <flatcc_verify_field@@Base>
   12978:	cmp	r0, #0
   1297c:	bne	129b8 <main@@Base+0xab4>
   12980:	mov	r0, r4
   12984:	mov	r1, #1
   12988:	mov	r2, #1
   1298c:	mov	r3, #1
   12990:	bl	12d6c <flatcc_verify_field@@Base>
   12994:	cmp	r0, #0
   12998:	popne	{r4, sl, fp, pc}
   1299c:	mov	r0, r4
   129a0:	mov	r1, #2
   129a4:	mov	r2, #1
   129a8:	mov	r3, #1
   129ac:	bl	12d6c <flatcc_verify_field@@Base>
   129b0:	cmp	r0, #0
   129b4:	beq	129bc <main@@Base+0xab8>
   129b8:	pop	{r4, sl, fp, pc}
   129bc:	mov	r0, r4
   129c0:	mov	r1, #3
   129c4:	mov	r2, #1
   129c8:	mov	r3, #1
   129cc:	pop	{r4, sl, fp, lr}
   129d0:	b	12d6c <flatcc_verify_field@@Base>
   129d4:	mov	r0, #0
   129d8:	bx	lr
   129dc:	push	{r4, sl, fp, lr}
   129e0:	add	fp, sp, #8
   129e4:	mov	r4, r0
   129e8:	movw	r3, #10820	; 0x2a44
   129ec:	movt	r3, #1
   129f0:	mov	r1, #0
   129f4:	mov	r2, #0
   129f8:	bl	13124 <flatcc_verify_table_field@@Base>
   129fc:	cmp	r0, #0
   12a00:	popne	{r4, sl, fp, pc}
   12a04:	movw	r3, #10924	; 0x2aac
   12a08:	movt	r3, #1
   12a0c:	mov	r0, r4
   12a10:	mov	r1, #1
   12a14:	mov	r2, #0
   12a18:	bl	13124 <flatcc_verify_table_field@@Base>
   12a1c:	cmp	r0, #0
   12a20:	beq	12a28 <main@@Base+0xb24>
   12a24:	pop	{r4, sl, fp, pc}
   12a28:	movw	r3, #10300	; 0x283c
   12a2c:	movt	r3, #1
   12a30:	mov	r0, r4
   12a34:	mov	r1, #3
   12a38:	mov	r2, #0
   12a3c:	pop	{r4, sl, fp, lr}
   12a40:	b	13acc <flatcc_verify_union_vector_field@@Base>
   12a44:	push	{r4, sl, fp, lr}
   12a48:	add	fp, sp, #8
   12a4c:	mov	r4, r0
   12a50:	movw	r3, #11092	; 0x2b54
   12a54:	movt	r3, #1
   12a58:	mov	r1, #0
   12a5c:	mov	r2, #0
   12a60:	bl	13124 <flatcc_verify_table_field@@Base>
   12a64:	cmp	r0, #0
   12a68:	popne	{r4, sl, fp, pc}
   12a6c:	movw	r3, #11340	; 0x2c4c
   12a70:	movt	r3, #1
   12a74:	mov	r0, r4
   12a78:	mov	r1, #1
   12a7c:	mov	r2, #0
   12a80:	bl	13124 <flatcc_verify_table_field@@Base>
   12a84:	cmp	r0, #0
   12a88:	beq	12a90 <main@@Base+0xb8c>
   12a8c:	pop	{r4, sl, fp, pc}
   12a90:	movw	r3, #11400	; 0x2c88
   12a94:	movt	r3, #1
   12a98:	mov	r0, r4
   12a9c:	mov	r1, #2
   12aa0:	mov	r2, #0
   12aa4:	pop	{r4, sl, fp, lr}
   12aa8:	b	13124 <flatcc_verify_table_field@@Base>
   12aac:	push	{r4, sl, fp, lr}
   12ab0:	add	fp, sp, #8
   12ab4:	mov	r4, r0
   12ab8:	movw	r3, #11460	; 0x2cc4
   12abc:	movt	r3, #1
   12ac0:	mov	r1, #1
   12ac4:	mov	r2, #0
   12ac8:	bl	13960 <flatcc_verify_union_field@@Base>
   12acc:	cmp	r0, #0
   12ad0:	bne	12b34 <main@@Base+0xc30>
   12ad4:	movw	r3, #11460	; 0x2cc4
   12ad8:	movt	r3, #1
   12adc:	mov	r0, r4
   12ae0:	mov	r1, #3
   12ae4:	mov	r2, #0
   12ae8:	bl	13960 <flatcc_verify_union_field@@Base>
   12aec:	cmp	r0, #0
   12af0:	bne	12b34 <main@@Base+0xc30>
   12af4:	movw	r3, #11460	; 0x2cc4
   12af8:	movt	r3, #1
   12afc:	mov	r0, r4
   12b00:	mov	r1, #5
   12b04:	mov	r2, #0
   12b08:	bl	13960 <flatcc_verify_union_field@@Base>
   12b0c:	cmp	r0, #0
   12b10:	popne	{r4, sl, fp, pc}
   12b14:	movw	r3, #11460	; 0x2cc4
   12b18:	movt	r3, #1
   12b1c:	mov	r0, r4
   12b20:	mov	r1, #7
   12b24:	mov	r2, #0
   12b28:	bl	13960 <flatcc_verify_union_field@@Base>
   12b2c:	cmp	r0, #0
   12b30:	beq	12b38 <main@@Base+0xc34>
   12b34:	pop	{r4, sl, fp, pc}
   12b38:	movw	r3, #11460	; 0x2cc4
   12b3c:	movt	r3, #1
   12b40:	mov	r0, r4
   12b44:	mov	r1, #9
   12b48:	mov	r2, #0
   12b4c:	pop	{r4, sl, fp, lr}
   12b50:	b	13acc <flatcc_verify_union_vector_field@@Base>
   12b54:	push	{r4, sl, fp, lr}
   12b58:	add	fp, sp, #8
   12b5c:	mov	r4, r0
   12b60:	mov	r1, #0
   12b64:	mov	r2, #0
   12b68:	bl	12dd8 <flatcc_verify_string_field@@Base>
   12b6c:	cmp	r0, #0
   12b70:	bne	12c30 <main@@Base+0xd2c>
   12b74:	mov	r0, r4
   12b78:	mov	r1, #1
   12b7c:	mov	r2, #4
   12b80:	mov	r3, #4
   12b84:	bl	12d6c <flatcc_verify_field@@Base>
   12b88:	cmp	r0, #0
   12b8c:	bne	12c30 <main@@Base+0xd2c>
   12b90:	mov	r0, r4
   12b94:	mov	r1, #2
   12b98:	mov	r2, #0
   12b9c:	bl	12dd8 <flatcc_verify_string_field@@Base>
   12ba0:	cmp	r0, #0
   12ba4:	bne	12c30 <main@@Base+0xd2c>
   12ba8:	mov	r0, r4
   12bac:	mov	r1, #3
   12bb0:	mov	r2, #8
   12bb4:	mov	r3, #8
   12bb8:	bl	12d6c <flatcc_verify_field@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12c30 <main@@Base+0xd2c>
   12bc4:	mov	r0, r4
   12bc8:	mov	r1, #4
   12bcc:	mov	r2, #0
   12bd0:	bl	12dd8 <flatcc_verify_string_field@@Base>
   12bd4:	cmp	r0, #0
   12bd8:	bne	12c30 <main@@Base+0xd2c>
   12bdc:	mov	r0, r4
   12be0:	mov	r1, #5
   12be4:	mov	r2, #8
   12be8:	mov	r3, #8
   12bec:	bl	12d6c <flatcc_verify_field@@Base>
   12bf0:	cmp	r0, #0
   12bf4:	bne	12c30 <main@@Base+0xd2c>
   12bf8:	mov	r0, r4
   12bfc:	mov	r1, #6
   12c00:	mov	r2, #4
   12c04:	mov	r3, #4
   12c08:	bl	12d6c <flatcc_verify_field@@Base>
   12c0c:	cmp	r0, #0
   12c10:	popne	{r4, sl, fp, pc}
   12c14:	mov	r0, r4
   12c18:	mov	r1, #7
   12c1c:	mov	r2, #8
   12c20:	mov	r3, #8
   12c24:	bl	12d6c <flatcc_verify_field@@Base>
   12c28:	cmp	r0, #0
   12c2c:	beq	12c34 <main@@Base+0xd30>
   12c30:	pop	{r4, sl, fp, pc}
   12c34:	mov	r0, r4
   12c38:	mov	r1, #8
   12c3c:	mov	r2, #4
   12c40:	mov	r3, #4
   12c44:	pop	{r4, sl, fp, lr}
   12c48:	b	12d6c <flatcc_verify_field@@Base>
   12c4c:	push	{r4, sl, fp, lr}
   12c50:	add	fp, sp, #8
   12c54:	mov	r4, r0
   12c58:	mov	r1, #0
   12c5c:	mov	r2, #8
   12c60:	mov	r3, #8
   12c64:	bl	12d6c <flatcc_verify_field@@Base>
   12c68:	cmp	r0, #0
   12c6c:	popne	{r4, sl, fp, pc}
   12c70:	mov	r0, r4
   12c74:	mov	r1, #1
   12c78:	mov	r2, #4
   12c7c:	mov	r3, #4
   12c80:	pop	{r4, sl, fp, lr}
   12c84:	b	12d6c <flatcc_verify_field@@Base>
   12c88:	push	{r4, sl, fp, lr}
   12c8c:	add	fp, sp, #8
   12c90:	mov	r4, r0
   12c94:	mov	r1, #0
   12c98:	mov	r2, #8
   12c9c:	mov	r3, #8
   12ca0:	bl	12d6c <flatcc_verify_field@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	popne	{r4, sl, fp, pc}
   12cac:	mov	r0, r4
   12cb0:	mov	r1, #1
   12cb4:	mov	r2, #4
   12cb8:	mov	r3, #4
   12cbc:	pop	{r4, sl, fp, lr}
   12cc0:	b	12d6c <flatcc_verify_field@@Base>
   12cc4:	ldrb	r2, [r0, #12]
   12cc8:	sub	r1, r2, #2
   12ccc:	cmp	r1, #9
   12cd0:	bhi	12d10 <main@@Base+0xe0c>
   12cd4:	add	r2, pc, #0
   12cd8:	ldr	pc, [r2, r1, lsl #2]
   12cdc:	andeq	r2, r1, r4, lsr #26
   12ce0:	andeq	r2, r1, ip, lsl sp
   12ce4:	andeq	r2, r1, ip, lsl sp
   12ce8:	andeq	r2, r1, ip, lsl sp
   12cec:	andeq	r2, r1, ip, lsl sp
   12cf0:	andeq	r2, r1, ip, lsl sp
   12cf4:	andeq	r2, r1, r0, lsr sp
   12cf8:	andeq	r2, r1, r4, lsl #26
   12cfc:	andeq	r2, r1, r4, lsl #26
   12d00:	andeq	r2, r1, r8, lsl sp
   12d04:	mov	r1, #4
   12d08:	mov	r2, #4
   12d0c:	b	1342c <flatcc_verify_union_struct@@Base>
   12d10:	cmp	r2, #255	; 0xff
   12d14:	bne	12d1c <main@@Base+0xe18>
   12d18:	b	134ac <flatcc_verify_union_string@@Base>
   12d1c:	mov	r0, #0
   12d20:	bx	lr
   12d24:	movw	r1, #11580	; 0x2d3c
   12d28:	movt	r1, #1
   12d2c:	b	133f8 <flatcc_verify_union_table@@Base>
   12d30:	mov	r1, #2
   12d34:	mov	r2, #2
   12d38:	b	1342c <flatcc_verify_union_struct@@Base>
   12d3c:	mov	r1, #0
   12d40:	mov	r2, #4
   12d44:	mov	r3, #4
   12d48:	b	12d6c <flatcc_verify_field@@Base>

00012d4c <flatcc_verify_error_string@@Base>:
   12d4c:	cmp	r0, #36	; 0x24
   12d50:	movwhi	r0, #20519	; 0x5027
   12d54:	movthi	r0, #1
   12d58:	bxhi	lr
   12d5c:	movw	r1, #20528	; 0x5030
   12d60:	movt	r1, #1
   12d64:	ldr	r0, [r1, r0, lsl #2]
   12d68:	bx	lr

00012d6c <flatcc_verify_field@@Base>:
   12d6c:	b	12d70 <flatcc_verify_field@@Base+0x4>
   12d70:	push	{r4, r5, r6, r7, fp, lr}
   12d74:	add	fp, sp, #16
   12d78:	mov	r4, r3
   12d7c:	mov	r6, r2
   12d80:	mov	r5, r0
   12d84:	ldr	r7, [r0]
   12d88:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   12d8c:	movw	r1, #65535	; 0xffff
   12d90:	tst	r0, r1
   12d94:	beq	12dcc <flatcc_verify_field@@Base+0x60>
   12d98:	uxtah	r2, r6, r0
   12d9c:	ldrh	r3, [r5, #20]
   12da0:	mov	r1, #13
   12da4:	cmp	r2, r3
   12da8:	bhi	12dd0 <flatcc_verify_field@@Base+0x64>
   12dac:	uxth	r0, r0
   12db0:	add	r0, r0, r7
   12db4:	ldr	r1, [r5, #16]
   12db8:	add	r0, r0, r1
   12dbc:	sub	r1, r4, #1
   12dc0:	ands	r0, r0, r1
   12dc4:	movwne	r0, #12
   12dc8:	pop	{r4, r5, r6, r7, fp, pc}
   12dcc:	mov	r1, #0
   12dd0:	mov	r0, r1
   12dd4:	pop	{r4, r5, r6, r7, fp, pc}

00012dd8 <flatcc_verify_string_field@@Base>:
   12dd8:	push	{r4, r5, r6, sl, fp, lr}
   12ddc:	add	fp, sp, #16
   12de0:	sub	sp, sp, #8
   12de4:	mov	r4, r0
   12de8:	add	r3, sp, #4
   12dec:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   12df0:	cmp	r0, #0
   12df4:	bne	12e2c <flatcc_verify_string_field@@Base+0x54>
   12df8:	ldr	r5, [sp, #4]
   12dfc:	cmp	r5, #0
   12e00:	beq	12e2c <flatcc_verify_string_field@@Base+0x54>
   12e04:	ldr	r6, [r4]
   12e08:	ldr	r4, [r4, #4]
   12e0c:	mov	r0, r6
   12e10:	mov	r1, r5
   12e14:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   12e18:	mov	r3, r0
   12e1c:	mov	r0, r6
   12e20:	mov	r1, r4
   12e24:	mov	r2, r5
   12e28:	bl	12eac <flatcc_verify_string_field@@Base+0xd4>
   12e2c:	sub	sp, fp, #16
   12e30:	pop	{r4, r5, r6, sl, fp, pc}
   12e34:	push	{r4, r5, r6, sl, fp, lr}
   12e38:	add	fp, sp, #16
   12e3c:	mov	r4, r3
   12e40:	mov	r6, r2
   12e44:	mov	r5, r0
   12e48:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   12e4c:	mov	r1, r0
   12e50:	movw	r0, #65535	; 0xffff
   12e54:	tst	r1, r0
   12e58:	beq	12e94 <flatcc_verify_string_field@@Base+0xbc>
   12e5c:	mov	r0, #4
   12e60:	uxtah	r2, r0, r1
   12e64:	ldrh	r3, [r5, #20]
   12e68:	mov	r0, #13
   12e6c:	cmp	r2, r3
   12e70:	bhi	12e90 <flatcc_verify_string_field@@Base+0xb8>
   12e74:	uxth	r0, r1
   12e78:	ldr	r1, [r5, #16]
   12e7c:	add	r1, r1, r0
   12e80:	mov	r0, #12
   12e84:	tst	r1, #3
   12e88:	streq	r1, [r4]
   12e8c:	moveq	r0, #0
   12e90:	pop	{r4, r5, r6, sl, fp, pc}
   12e94:	mov	r0, #0
   12e98:	str	r0, [r4]
   12e9c:	cmp	r6, #0
   12ea0:	movwne	r6, #1
   12ea4:	lsl	r0, r6, #2
   12ea8:	pop	{r4, r5, r6, sl, fp, pc}
   12eac:	push	{r4, r5, r6, r7, fp, lr}
   12eb0:	add	fp, sp, #16
   12eb4:	mov	r6, r3
   12eb8:	mov	r7, r2
   12ebc:	mov	r5, r1
   12ec0:	mov	r4, r0
   12ec4:	mov	r0, r1
   12ec8:	mov	r1, r2
   12ecc:	mov	r2, r3
   12ed0:	bl	13d54 <flatcc_verify_union_vector_field@@Base+0x288>
   12ed4:	cmp	r0, #0
   12ed8:	beq	12f18 <flatcc_verify_string_field@@Base+0x140>
   12edc:	add	r6, r6, r7
   12ee0:	mov	r0, r4
   12ee4:	mov	r1, r6
   12ee8:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   12eec:	add	r2, r6, #4
   12ef0:	sub	r3, r5, r2
   12ef4:	add	r7, r0, #1
   12ef8:	mov	r1, #8
   12efc:	cmp	r3, r7
   12f00:	bcc	12f1c <flatcc_verify_string_field@@Base+0x144>
   12f04:	add	r1, r4, r2
   12f08:	ldrb	r0, [r1, r0]
   12f0c:	cmp	r0, #0
   12f10:	movwne	r0, #7
   12f14:	pop	{r4, r5, r6, r7, fp, pc}
   12f18:	mov	r1, #17
   12f1c:	mov	r0, r1
   12f20:	pop	{r4, r5, r6, r7, fp, pc}
   12f24:	add	r0, r0, r1
   12f28:	b	13d80 <flatcc_verify_union_vector_field@@Base+0x2b4>

00012f2c <flatcc_verify_vector_field@@Base>:
   12f2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f30:	add	fp, sp, #24
   12f34:	sub	sp, sp, #16
   12f38:	mov	r4, r3
   12f3c:	mov	r6, r0
   12f40:	add	r3, sp, #12
   12f44:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   12f48:	cmp	r0, #0
   12f4c:	bne	12f94 <flatcc_verify_vector_field@@Base+0x68>
   12f50:	ldr	r5, [sp, #12]
   12f54:	cmp	r5, #0
   12f58:	beq	12f94 <flatcc_verify_vector_field@@Base+0x68>
   12f5c:	ldr	r8, [fp, #12]
   12f60:	ldr	r9, [fp, #8]
   12f64:	ldr	r7, [r6]
   12f68:	ldr	r6, [r6, #4]
   12f6c:	mov	r0, r7
   12f70:	mov	r1, r5
   12f74:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   12f78:	mov	r3, r0
   12f7c:	stm	sp, {r4, r9}
   12f80:	str	r8, [sp, #8]
   12f84:	mov	r0, r7
   12f88:	mov	r1, r6
   12f8c:	mov	r2, r5
   12f90:	bl	12f9c <flatcc_verify_vector_field@@Base+0x70>
   12f94:	sub	sp, fp, #24
   12f98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12fa0:	add	fp, sp, #24
   12fa4:	mov	r5, r3
   12fa8:	mov	r7, r2
   12fac:	mov	r4, r1
   12fb0:	mov	r6, r0
   12fb4:	ldr	r3, [fp, #12]
   12fb8:	mov	r0, r1
   12fbc:	mov	r1, r2
   12fc0:	mov	r2, r5
   12fc4:	bl	13d8c <flatcc_verify_union_vector_field@@Base+0x2c0>
   12fc8:	cmp	r0, #0
   12fcc:	beq	13014 <flatcc_verify_vector_field@@Base+0xe8>
   12fd0:	ldr	r8, [fp, #16]
   12fd4:	add	r5, r5, r7
   12fd8:	mov	r0, r6
   12fdc:	mov	r1, r5
   12fe0:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   12fe4:	mov	r1, r0
   12fe8:	mov	r0, #25
   12fec:	cmp	r1, r8
   12ff0:	bhi	13010 <flatcc_verify_vector_field@@Base+0xe4>
   12ff4:	ldr	r0, [fp, #8]
   12ff8:	mul	r1, r1, r0
   12ffc:	sub	r0, r4, r5
   13000:	sub	r2, r0, #4
   13004:	mov	r0, #0
   13008:	cmp	r2, r1
   1300c:	movwcc	r0, #26
   13010:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13014:	mov	r0, #16
   13018:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001301c <flatcc_verify_string_vector_field@@Base>:
   1301c:	push	{r4, r5, r6, sl, fp, lr}
   13020:	add	fp, sp, #16
   13024:	sub	sp, sp, #8
   13028:	mov	r4, r0
   1302c:	add	r3, sp, #4
   13030:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   13034:	cmp	r0, #0
   13038:	bne	13070 <flatcc_verify_string_vector_field@@Base+0x54>
   1303c:	ldr	r5, [sp, #4]
   13040:	cmp	r5, #0
   13044:	beq	13070 <flatcc_verify_string_vector_field@@Base+0x54>
   13048:	ldr	r6, [r4]
   1304c:	ldr	r4, [r4, #4]
   13050:	mov	r0, r6
   13054:	mov	r1, r5
   13058:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   1305c:	mov	r3, r0
   13060:	mov	r0, r6
   13064:	mov	r1, r4
   13068:	mov	r2, r5
   1306c:	bl	13078 <flatcc_verify_string_vector_field@@Base+0x5c>
   13070:	sub	sp, fp, #16
   13074:	pop	{r4, r5, r6, sl, fp, pc}
   13078:	push	{r4, r5, r6, r7, fp, lr}
   1307c:	add	fp, sp, #16
   13080:	sub	sp, sp, #16
   13084:	mov	r6, r3
   13088:	mov	r7, r2
   1308c:	mov	r4, r1
   13090:	mov	r5, r0
   13094:	mvn	r0, #-1073741824	; 0xc0000000
   13098:	mov	r1, #4
   1309c:	str	r1, [sp]
   130a0:	str	r1, [sp, #4]
   130a4:	str	r0, [sp, #8]
   130a8:	mov	r0, r5
   130ac:	mov	r1, r4
   130b0:	bl	12f9c <flatcc_verify_vector_field@@Base+0x70>
   130b4:	cmp	r0, #0
   130b8:	beq	130c4 <flatcc_verify_string_vector_field@@Base+0xa8>
   130bc:	sub	sp, fp, #16
   130c0:	pop	{r4, r5, r6, r7, fp, pc}
   130c4:	add	r7, r6, r7
   130c8:	mov	r0, r5
   130cc:	mov	r1, r7
   130d0:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   130d4:	cmp	r0, #0
   130d8:	beq	13118 <flatcc_verify_string_vector_field@@Base+0xfc>
   130dc:	mov	r6, r0
   130e0:	add	r7, r7, #4
   130e4:	mov	r0, r5
   130e8:	mov	r1, r7
   130ec:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   130f0:	mov	r3, r0
   130f4:	mov	r0, r5
   130f8:	mov	r1, r4
   130fc:	mov	r2, r7
   13100:	bl	12eac <flatcc_verify_string_field@@Base+0xd4>
   13104:	cmp	r0, #0
   13108:	bne	130bc <flatcc_verify_string_vector_field@@Base+0xa0>
   1310c:	subs	r6, r6, #1
   13110:	add	r7, r7, #4
   13114:	bne	130e4 <flatcc_verify_string_vector_field@@Base+0xc8>
   13118:	mov	r0, #0
   1311c:	sub	sp, fp, #16
   13120:	pop	{r4, r5, r6, r7, fp, pc}

00013124 <flatcc_verify_table_field@@Base>:
   13124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13128:	add	fp, sp, #24
   1312c:	sub	sp, sp, #16
   13130:	mov	r8, r3
   13134:	mov	r5, r0
   13138:	add	r3, sp, #12
   1313c:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   13140:	cmp	r0, #0
   13144:	bne	13184 <flatcc_verify_table_field@@Base+0x60>
   13148:	ldr	r6, [sp, #12]
   1314c:	cmp	r6, #0
   13150:	beq	13184 <flatcc_verify_table_field@@Base+0x60>
   13154:	ldr	r7, [r5]
   13158:	ldr	r4, [r5, #4]
   1315c:	mov	r0, r7
   13160:	mov	r1, r6
   13164:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13168:	mov	r3, r0
   1316c:	ldr	r0, [r5, #8]
   13170:	stm	sp, {r0, r8}
   13174:	mov	r0, r7
   13178:	mov	r1, r4
   1317c:	mov	r2, r6
   13180:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   13184:	sub	sp, fp, #24
   13188:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1318c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13190:	add	fp, sp, #24
   13194:	sub	sp, sp, #24
   13198:	mov	r4, r0
   1319c:	ldr	r0, [fp, #8]
   131a0:	subs	r0, r0, #1
   131a4:	str	r0, [sp, #8]
   131a8:	beq	13280 <flatcc_verify_table_field@@Base+0x15c>
   131ac:	mov	r6, r3
   131b0:	mov	r7, r2
   131b4:	mov	r5, r1
   131b8:	mov	r0, r1
   131bc:	mov	r1, r2
   131c0:	mov	r2, r3
   131c4:	bl	13d54 <flatcc_verify_union_vector_field@@Base+0x288>
   131c8:	cmp	r0, #0
   131cc:	beq	1328c <flatcc_verify_table_field@@Base+0x168>
   131d0:	add	r7, r6, r7
   131d4:	str	r7, [sp, #16]
   131d8:	mov	r0, r4
   131dc:	mov	r1, r7
   131e0:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   131e4:	sub	r6, r7, r0
   131e8:	mov	r0, #29
   131ec:	tst	r6, #-2147483647	; 0x80000001
   131f0:	bne	13278 <flatcc_verify_table_field@@Base+0x154>
   131f4:	add	r8, r6, #2
   131f8:	mov	r0, #27
   131fc:	cmp	r8, r5
   13200:	bhi	13278 <flatcc_verify_table_field@@Base+0x154>
   13204:	mov	r0, r4
   13208:	mov	r1, r6
   1320c:	bl	13dc8 <flatcc_verify_union_vector_field@@Base+0x2fc>
   13210:	mov	r1, r0
   13214:	strh	r0, [sp, #22]
   13218:	mov	r0, #30
   1321c:	tst	r1, #1
   13220:	bne	13278 <flatcc_verify_table_field@@Base+0x154>
   13224:	add	r2, r6, r1
   13228:	cmp	r2, r5
   1322c:	bhi	13278 <flatcc_verify_table_field@@Base+0x154>
   13230:	mov	r0, #28
   13234:	cmp	r1, #4
   13238:	bcc	13278 <flatcc_verify_table_field@@Base+0x154>
   1323c:	mov	r0, r4
   13240:	mov	r1, r8
   13244:	bl	13dc8 <flatcc_verify_union_vector_field@@Base+0x2fc>
   13248:	mov	r1, r0
   1324c:	strh	r0, [sp, #20]
   13250:	sub	r2, r5, r7
   13254:	mov	r0, #20
   13258:	cmp	r2, r1
   1325c:	bcc	13278 <flatcc_verify_table_field@@Base+0x154>
   13260:	ldr	r1, [fp, #12]
   13264:	stm	sp, {r4, r5}
   13268:	add	r0, r4, r6
   1326c:	str	r0, [sp, #12]
   13270:	mov	r0, sp
   13274:	blx	r1
   13278:	sub	sp, fp, #24
   1327c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13280:	mov	r0, #3
   13284:	sub	sp, fp, #24
   13288:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1328c:	mov	r0, #15
   13290:	sub	sp, fp, #24
   13294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013298 <flatcc_verify_table_vector_field@@Base>:
   13298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1329c:	add	fp, sp, #24
   132a0:	sub	sp, sp, #16
   132a4:	mov	r8, r3
   132a8:	mov	r5, r0
   132ac:	add	r3, sp, #12
   132b0:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   132b4:	cmp	r0, #0
   132b8:	bne	132f8 <flatcc_verify_table_vector_field@@Base+0x60>
   132bc:	ldr	r6, [sp, #12]
   132c0:	cmp	r6, #0
   132c4:	beq	132f8 <flatcc_verify_table_vector_field@@Base+0x60>
   132c8:	ldr	r7, [r5]
   132cc:	ldr	r4, [r5, #4]
   132d0:	mov	r0, r7
   132d4:	mov	r1, r6
   132d8:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   132dc:	mov	r3, r0
   132e0:	ldr	r0, [r5, #8]
   132e4:	stm	sp, {r0, r8}
   132e8:	mov	r0, r7
   132ec:	mov	r1, r4
   132f0:	mov	r2, r6
   132f4:	bl	13300 <flatcc_verify_table_vector_field@@Base+0x68>
   132f8:	sub	sp, fp, #24
   132fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13304:	add	fp, sp, #28
   13308:	sub	sp, sp, #12
   1330c:	ldr	r9, [fp, #8]
   13310:	cmp	r9, #1
   13314:	blt	133bc <flatcc_verify_table_vector_field@@Base+0x124>
   13318:	mov	r6, r3
   1331c:	mov	r7, r2
   13320:	mov	r4, r1
   13324:	mov	r5, r0
   13328:	mvn	r0, #-1073741824	; 0xc0000000
   1332c:	mov	r1, #4
   13330:	str	r1, [sp]
   13334:	str	r1, [sp, #4]
   13338:	str	r0, [sp, #8]
   1333c:	mov	r0, r5
   13340:	mov	r1, r4
   13344:	bl	12f9c <flatcc_verify_vector_field@@Base+0x70>
   13348:	mov	r8, r0
   1334c:	cmp	r0, #0
   13350:	bne	133c0 <flatcc_verify_table_vector_field@@Base+0x128>
   13354:	add	r7, r6, r7
   13358:	mov	r0, r5
   1335c:	mov	r1, r7
   13360:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13364:	mov	r8, #0
   13368:	cmp	r0, #0
   1336c:	beq	133c0 <flatcc_verify_table_vector_field@@Base+0x128>
   13370:	mov	r6, r0
   13374:	sub	r9, r9, #1
   13378:	ldr	sl, [fp, #12]
   1337c:	add	r7, r7, #4
   13380:	mov	r0, r5
   13384:	mov	r1, r7
   13388:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   1338c:	mov	r3, r0
   13390:	stm	sp, {r9, sl}
   13394:	mov	r0, r5
   13398:	mov	r1, r4
   1339c:	mov	r2, r7
   133a0:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   133a4:	cmp	r0, #0
   133a8:	bne	133cc <flatcc_verify_table_vector_field@@Base+0x134>
   133ac:	subs	r6, r6, #1
   133b0:	add	r7, r7, #4
   133b4:	bne	13380 <flatcc_verify_table_vector_field@@Base+0xe8>
   133b8:	b	133c0 <flatcc_verify_table_vector_field@@Base+0x128>
   133bc:	mov	r8, #3
   133c0:	mov	r0, r8
   133c4:	sub	sp, fp, #28
   133c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133cc:	mov	r0, r5
   133d0:	mov	r1, r7
   133d4:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   133d8:	mov	r3, r0
   133dc:	stm	sp, {r9, sl}
   133e0:	mov	r0, r5
   133e4:	mov	r1, r4
   133e8:	mov	r2, r7
   133ec:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   133f0:	sub	sp, fp, #28
   133f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000133f8 <flatcc_verify_union_table@@Base>:
   133f8:	push	{fp, lr}
   133fc:	mov	fp, sp
   13400:	sub	sp, sp, #8
   13404:	ldr	r2, [r0, #16]
   13408:	ldr	r3, [r0, #20]
   1340c:	ldm	r0, {ip, lr}
   13410:	ldr	r0, [r0, #8]
   13414:	stm	sp, {r0, r1}
   13418:	mov	r0, ip
   1341c:	mov	r1, lr
   13420:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   13424:	mov	sp, fp
   13428:	pop	{fp, pc}

0001342c <flatcc_verify_union_struct@@Base>:
   1342c:	push	{fp, lr}
   13430:	mov	fp, sp
   13434:	sub	sp, sp, #8
   13438:	mov	ip, r1
   1343c:	ldr	r3, [r0, #4]
   13440:	ldr	r1, [r0, #16]
   13444:	ldr	lr, [r0, #20]
   13448:	str	r2, [sp]
   1344c:	mov	r0, r3
   13450:	mov	r2, lr
   13454:	mov	r3, ip
   13458:	bl	13464 <flatcc_verify_union_struct@@Base+0x38>
   1345c:	mov	sp, fp
   13460:	pop	{fp, pc}
   13464:	mov	ip, r0
   13468:	mov	r0, #18
   1346c:	cmp	r2, #0
   13470:	beq	134a8 <flatcc_verify_union_struct@@Base+0x7c>
   13474:	add	r1, r2, r1
   13478:	cmp	r1, ip
   1347c:	bhi	134a8 <flatcc_verify_union_struct@@Base+0x7c>
   13480:	adds	r2, r1, r3
   13484:	mov	r0, #10
   13488:	bcs	134a8 <flatcc_verify_union_struct@@Base+0x7c>
   1348c:	mov	r0, #9
   13490:	cmp	r2, ip
   13494:	bxhi	lr
   13498:	ldr	r0, [sp]
   1349c:	sub	r0, r0, #1
   134a0:	ands	r0, r0, r1
   134a4:	movwne	r0, #11
   134a8:	bx	lr

000134ac <flatcc_verify_union_string@@Base>:
   134ac:	ldr	ip, [r0]
   134b0:	ldr	r1, [r0, #4]
   134b4:	ldr	r2, [r0, #16]
   134b8:	ldr	r3, [r0, #20]
   134bc:	mov	r0, ip
   134c0:	b	12eac <flatcc_verify_string_field@@Base+0xd4>

000134c4 <flatcc_verify_buffer_header@@Base>:
   134c4:	push	{r4, r5, fp, lr}
   134c8:	add	fp, sp, #8
   134cc:	mov	r4, r0
   134d0:	mov	r0, #5
   134d4:	tst	r4, #3
   134d8:	bne	13524 <flatcc_verify_buffer_header@@Base+0x60>
   134dc:	mov	r0, #6
   134e0:	cmn	r1, #9
   134e4:	bhi	13524 <flatcc_verify_buffer_header@@Base+0x60>
   134e8:	mov	r0, #1
   134ec:	cmp	r1, #8
   134f0:	popcc	{r4, r5, fp, pc}
   134f4:	cmp	r2, #0
   134f8:	beq	13528 <flatcc_verify_buffer_header@@Base+0x64>
   134fc:	mov	r0, r2
   13500:	bl	13530 <flatcc_verify_buffer_header@@Base+0x6c>
   13504:	mov	r5, r0
   13508:	mov	r0, r4
   1350c:	bl	13564 <flatcc_verify_buffer_header@@Base+0xa0>
   13510:	cmp	r5, #0
   13514:	movne	r1, r0
   13518:	movne	r0, #2
   1351c:	cmpne	r1, r5
   13520:	moveq	r0, #0
   13524:	pop	{r4, r5, fp, pc}
   13528:	mov	r0, #0
   1352c:	pop	{r4, r5, fp, pc}
   13530:	push	{fp, lr}
   13534:	mov	fp, sp
   13538:	sub	sp, sp, #8
   1353c:	mov	r1, r0
   13540:	mov	r0, #0
   13544:	str	r0, [sp, #4]
   13548:	add	r0, sp, #4
   1354c:	mov	r2, #4
   13550:	bl	10f08 <strncpy@plt>
   13554:	ldr	r0, [sp, #4]
   13558:	bl	13ddc <flatcc_verify_union_vector_field@@Base+0x310>
   1355c:	mov	sp, fp
   13560:	pop	{fp, pc}
   13564:	add	r0, r0, #4
   13568:	b	13de0 <flatcc_verify_union_vector_field@@Base+0x314>

0001356c <flatcc_verify_typed_buffer_header@@Base>:
   1356c:	push	{r4, sl, fp, lr}
   13570:	add	fp, sp, #8
   13574:	mov	r4, r2
   13578:	mov	r2, #5
   1357c:	tst	r0, #3
   13580:	bne	135b4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   13584:	mov	r2, #6
   13588:	cmn	r1, #9
   1358c:	bhi	135b4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   13590:	mov	r2, #1
   13594:	cmp	r1, #8
   13598:	bcc	135b4 <flatcc_verify_typed_buffer_header@@Base+0x48>
   1359c:	cmp	r4, #0
   135a0:	beq	135bc <flatcc_verify_typed_buffer_header@@Base+0x50>
   135a4:	bl	13564 <flatcc_verify_buffer_header@@Base+0xa0>
   135a8:	mov	r2, #2
   135ac:	cmp	r0, r4
   135b0:	moveq	r2, #0
   135b4:	mov	r0, r2
   135b8:	pop	{r4, sl, fp, pc}
   135bc:	mov	r2, #0
   135c0:	mov	r0, r2
   135c4:	pop	{r4, sl, fp, pc}

000135c8 <flatcc_verify_struct_as_root@@Base>:
   135c8:	push	{r4, r5, r6, r7, fp, lr}
   135cc:	add	fp, sp, #16
   135d0:	sub	sp, sp, #8
   135d4:	mov	r4, r3
   135d8:	mov	r7, r2
   135dc:	mov	r5, r1
   135e0:	mov	r6, r0
   135e4:	bl	134c4 <flatcc_verify_buffer_header@@Base>
   135e8:	cmp	r0, #0
   135ec:	beq	13608 <flatcc_verify_struct_as_root@@Base+0x40>
   135f0:	mov	r0, r6
   135f4:	mov	r1, r5
   135f8:	mov	r2, r7
   135fc:	sub	sp, fp, #16
   13600:	pop	{r4, r5, r6, r7, fp, lr}
   13604:	b	134c4 <flatcc_verify_buffer_header@@Base>
   13608:	ldr	r7, [fp, #8]
   1360c:	mov	r0, r6
   13610:	mov	r1, #0
   13614:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13618:	mov	r2, r0
   1361c:	str	r7, [sp]
   13620:	mov	r0, r5
   13624:	mov	r1, #0
   13628:	mov	r3, r4
   1362c:	bl	13464 <flatcc_verify_union_struct@@Base+0x38>
   13630:	sub	sp, fp, #16
   13634:	pop	{r4, r5, r6, r7, fp, pc}

00013638 <flatcc_verify_struct_as_typed_root@@Base>:
   13638:	push	{r4, r5, r6, r7, fp, lr}
   1363c:	add	fp, sp, #16
   13640:	sub	sp, sp, #8
   13644:	mov	r4, r3
   13648:	mov	r5, r1
   1364c:	mov	r6, r0
   13650:	bl	1356c <flatcc_verify_typed_buffer_header@@Base>
   13654:	cmp	r0, #0
   13658:	beq	13664 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   1365c:	sub	sp, fp, #16
   13660:	pop	{r4, r5, r6, r7, fp, pc}
   13664:	ldr	r7, [fp, #8]
   13668:	mov	r0, r6
   1366c:	mov	r1, #0
   13670:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13674:	mov	r2, r0
   13678:	str	r7, [sp]
   1367c:	mov	r0, r5
   13680:	mov	r1, #0
   13684:	mov	r3, r4
   13688:	bl	13464 <flatcc_verify_union_struct@@Base+0x38>
   1368c:	sub	sp, fp, #16
   13690:	pop	{r4, r5, r6, r7, fp, pc}

00013694 <flatcc_verify_table_as_root@@Base>:
   13694:	push	{r4, r5, r6, r7, fp, lr}
   13698:	add	fp, sp, #16
   1369c:	sub	sp, sp, #8
   136a0:	mov	r5, r3
   136a4:	mov	r7, r2
   136a8:	mov	r4, r1
   136ac:	mov	r6, r0
   136b0:	bl	134c4 <flatcc_verify_buffer_header@@Base>
   136b4:	cmp	r0, #0
   136b8:	beq	136d4 <flatcc_verify_table_as_root@@Base+0x40>
   136bc:	mov	r0, r6
   136c0:	mov	r1, r4
   136c4:	mov	r2, r7
   136c8:	sub	sp, fp, #16
   136cc:	pop	{r4, r5, r6, r7, fp, lr}
   136d0:	b	134c4 <flatcc_verify_buffer_header@@Base>
   136d4:	mov	r0, r6
   136d8:	mov	r1, #0
   136dc:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   136e0:	mov	r3, r0
   136e4:	mov	r0, #100	; 0x64
   136e8:	stm	sp, {r0, r5}
   136ec:	mov	r0, r6
   136f0:	mov	r1, r4
   136f4:	mov	r2, #0
   136f8:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   136fc:	sub	sp, fp, #16
   13700:	pop	{r4, r5, r6, r7, fp, pc}

00013704 <flatcc_verify_table_as_typed_root@@Base>:
   13704:	push	{r4, r5, r6, sl, fp, lr}
   13708:	add	fp, sp, #16
   1370c:	sub	sp, sp, #8
   13710:	mov	r5, r3
   13714:	mov	r4, r1
   13718:	mov	r6, r0
   1371c:	bl	1356c <flatcc_verify_typed_buffer_header@@Base>
   13720:	cmp	r0, #0
   13724:	beq	13730 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   13728:	sub	sp, fp, #16
   1372c:	pop	{r4, r5, r6, sl, fp, pc}
   13730:	mov	r0, r6
   13734:	mov	r1, #0
   13738:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   1373c:	mov	r3, r0
   13740:	mov	r0, #100	; 0x64
   13744:	stm	sp, {r0, r5}
   13748:	mov	r0, r6
   1374c:	mov	r1, r4
   13750:	mov	r2, #0
   13754:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   13758:	sub	sp, fp, #16
   1375c:	pop	{r4, r5, r6, sl, fp, pc}

00013760 <flatcc_verify_struct_as_nested_root@@Base>:
   13760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13764:	add	fp, sp, #28
   13768:	sub	sp, sp, #12
   1376c:	mov	r8, r3
   13770:	mov	r7, r2
   13774:	mov	r6, r1
   13778:	mov	r4, r0
   1377c:	mvn	sl, #0
   13780:	mov	r5, #1
   13784:	stm	sp, {r5, sl}
   13788:	ldr	r9, [fp, #12]
   1378c:	mov	r3, r9
   13790:	bl	12f2c <flatcc_verify_vector_field@@Base>
   13794:	cmp	r0, #0
   13798:	beq	137bc <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   1379c:	stm	sp, {r5, sl}
   137a0:	mov	r0, r4
   137a4:	mov	r1, r6
   137a8:	mov	r2, r7
   137ac:	mov	r3, r9
   137b0:	bl	12f2c <flatcc_verify_vector_field@@Base>
   137b4:	sub	sp, fp, #28
   137b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137bc:	mov	r0, r4
   137c0:	mov	r1, r6
   137c4:	bl	1381c <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   137c8:	cmp	r0, #0
   137cc:	beq	13810 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   137d0:	mov	r4, r0
   137d4:	ldr	r6, [fp, #8]
   137d8:	mov	r1, #0
   137dc:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   137e0:	add	r4, r0, r4
   137e4:	mov	r0, r4
   137e8:	mov	r1, #0
   137ec:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   137f0:	mov	r1, r0
   137f4:	str	r9, [sp]
   137f8:	add	r0, r4, #4
   137fc:	mov	r2, r8
   13800:	mov	r3, r6
   13804:	bl	135c8 <flatcc_verify_struct_as_root@@Base>
   13808:	sub	sp, fp, #28
   1380c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13810:	mov	r0, #0
   13814:	sub	sp, fp, #28
   13818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1381c:	push	{r4, sl, fp, lr}
   13820:	add	fp, sp, #8
   13824:	mov	r4, r0
   13828:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   1382c:	uxth	r0, r0
   13830:	cmp	r0, #0
   13834:	beq	1384c <flatcc_verify_struct_as_nested_root@@Base+0xec>
   13838:	ldr	r1, [r4]
   1383c:	ldr	r2, [r4, #16]
   13840:	add	r1, r1, r2
   13844:	add	r0, r1, r0
   13848:	pop	{r4, sl, fp, pc}
   1384c:	mov	r0, #0
   13850:	pop	{r4, sl, fp, pc}

00013854 <flatcc_verify_table_as_nested_root@@Base>:
   13854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13858:	add	fp, sp, #28
   1385c:	sub	sp, sp, #12
   13860:	mov	r8, r3
   13864:	mov	r7, r2
   13868:	mov	r6, r1
   1386c:	mov	r4, r0
   13870:	mvn	r9, #0
   13874:	mov	sl, #1
   13878:	str	sl, [sp]
   1387c:	str	r9, [sp, #4]
   13880:	ldr	r5, [fp, #8]
   13884:	mov	r3, r5
   13888:	bl	12f2c <flatcc_verify_vector_field@@Base>
   1388c:	cmp	r0, #0
   13890:	beq	138b8 <flatcc_verify_table_as_nested_root@@Base+0x64>
   13894:	str	sl, [sp]
   13898:	str	r9, [sp, #4]
   1389c:	mov	r0, r4
   138a0:	mov	r1, r6
   138a4:	mov	r2, r7
   138a8:	mov	r3, r5
   138ac:	bl	12f2c <flatcc_verify_vector_field@@Base>
   138b0:	sub	sp, fp, #28
   138b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138b8:	ldr	r9, [fp, #12]
   138bc:	mov	r0, r4
   138c0:	mov	r1, r6
   138c4:	bl	1381c <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   138c8:	cmp	r0, #0
   138cc:	beq	13924 <flatcc_verify_table_as_nested_root@@Base+0xd0>
   138d0:	mov	r5, r0
   138d4:	mov	r1, #0
   138d8:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   138dc:	add	r5, r0, r5
   138e0:	mov	r0, r5
   138e4:	mov	r1, #0
   138e8:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   138ec:	mov	r6, r0
   138f0:	add	r7, r5, #4
   138f4:	mov	r0, r7
   138f8:	mov	r1, r6
   138fc:	mov	r2, r8
   13900:	bl	134c4 <flatcc_verify_buffer_header@@Base>
   13904:	cmp	r0, #0
   13908:	beq	13930 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   1390c:	mov	r0, r7
   13910:	mov	r1, r6
   13914:	mov	r2, r8
   13918:	sub	sp, fp, #28
   1391c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13920:	b	134c4 <flatcc_verify_buffer_header@@Base>
   13924:	mov	r0, #0
   13928:	sub	sp, fp, #28
   1392c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13930:	mov	r0, r7
   13934:	mov	r1, #0
   13938:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   1393c:	mov	r3, r0
   13940:	ldr	r0, [r4, #8]
   13944:	stm	sp, {r0, r9}
   13948:	mov	r0, r7
   1394c:	mov	r1, r6
   13950:	mov	r2, #0
   13954:	bl	1318c <flatcc_verify_table_field@@Base+0x68>
   13958:	sub	sp, fp, #28
   1395c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013960 <flatcc_verify_union_field@@Base>:
   13960:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13964:	add	fp, sp, #24
   13968:	sub	sp, sp, #32
   1396c:	mov	r8, r3
   13970:	mov	r9, r2
   13974:	mov	r7, r1
   13978:	mov	r5, r0
   1397c:	sub	r0, r1, #1
   13980:	uxth	r4, r0
   13984:	mov	r0, r5
   13988:	mov	r1, r4
   1398c:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   13990:	uxth	r6, r0
   13994:	cmp	r6, #0
   13998:	beq	13a4c <flatcc_verify_union_field@@Base+0xec>
   1399c:	mov	r0, r5
   139a0:	mov	r1, r4
   139a4:	mov	r2, #1
   139a8:	mov	r3, #1
   139ac:	bl	12d70 <flatcc_verify_field@@Base+0x4>
   139b0:	cmp	r0, #0
   139b4:	bne	13a6c <flatcc_verify_union_field@@Base+0x10c>
   139b8:	mov	r0, r5
   139bc:	mov	r1, r7
   139c0:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   139c4:	ldr	r1, [r5]
   139c8:	ldr	r2, [r5, #16]
   139cc:	add	r4, r1, r2
   139d0:	ldrb	r1, [r4, r6]
   139d4:	movw	r2, #65535	; 0xffff
   139d8:	tst	r0, r2
   139dc:	beq	139ec <flatcc_verify_union_field@@Base+0x8c>
   139e0:	mov	r0, #24
   139e4:	cmp	r1, #0
   139e8:	beq	13a6c <flatcc_verify_union_field@@Base+0x10c>
   139ec:	cmp	r1, #0
   139f0:	beq	13a88 <flatcc_verify_union_field@@Base+0x128>
   139f4:	add	r3, sp, #28
   139f8:	mov	r0, r5
   139fc:	mov	r1, r7
   13a00:	mov	r2, r9
   13a04:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   13a08:	cmp	r0, #0
   13a0c:	bne	13a6c <flatcc_verify_union_field@@Base+0x10c>
   13a10:	ldr	r1, [sp, #28]
   13a14:	cmp	r1, #0
   13a18:	beq	13a6c <flatcc_verify_union_field@@Base+0x10c>
   13a1c:	ldm	r5, {r0, r2, r3}
   13a20:	str	r1, [sp, #20]
   13a24:	stmib	sp, {r0, r2, r3}
   13a28:	ldr	r0, [r5]
   13a2c:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13a30:	str	r0, [sp, #24]
   13a34:	ldrb	r0, [r4, r6]
   13a38:	strb	r0, [sp, #16]
   13a3c:	add	r0, sp, #4
   13a40:	blx	r8
   13a44:	sub	sp, fp, #24
   13a48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a4c:	mov	r0, r5
   13a50:	mov	r1, r7
   13a54:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   13a58:	mov	r1, r0
   13a5c:	mov	r0, #23
   13a60:	movw	r2, #65535	; 0xffff
   13a64:	tst	r1, r2
   13a68:	beq	13a74 <flatcc_verify_union_field@@Base+0x114>
   13a6c:	sub	sp, fp, #24
   13a70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a74:	cmp	r9, #0
   13a78:	movwne	r9, #21
   13a7c:	mov	r0, r9
   13a80:	sub	sp, fp, #24
   13a84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a88:	mov	r0, #0
   13a8c:	sub	sp, fp, #24
   13a90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a94:	push	{fp, lr}
   13a98:	mov	fp, sp
   13a9c:	mov	r2, #4
   13aa0:	add	r1, r2, r1, lsl #1
   13aa4:	uxth	r1, r1
   13aa8:	ldrh	r3, [r0, #22]
   13aac:	mov	r2, #0
   13ab0:	cmp	r1, r3
   13ab4:	bcs	13ac4 <flatcc_verify_union_field@@Base+0x164>
   13ab8:	ldr	r0, [r0, #12]
   13abc:	bl	13dc8 <flatcc_verify_union_vector_field@@Base+0x2fc>
   13ac0:	mov	r2, r0
   13ac4:	mov	r0, r2
   13ac8:	pop	{fp, pc}

00013acc <flatcc_verify_union_vector_field@@Base>:
   13acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ad0:	add	fp, sp, #28
   13ad4:	sub	sp, sp, #20
   13ad8:	mov	r8, r3
   13adc:	mov	r6, r2
   13ae0:	mov	sl, r1
   13ae4:	mov	r5, r0
   13ae8:	sub	r0, r1, #1
   13aec:	uxth	r4, r0
   13af0:	mov	r0, r5
   13af4:	mov	r1, r4
   13af8:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   13afc:	movw	r1, #65535	; 0xffff
   13b00:	tst	r0, r1
   13b04:	beq	13b50 <flatcc_verify_union_vector_field@@Base+0x84>
   13b08:	mvn	r9, #0
   13b0c:	mov	r7, #1
   13b10:	stm	sp, {r7, r9}
   13b14:	mov	r0, r5
   13b18:	mov	r1, r4
   13b1c:	mov	r2, r6
   13b20:	mov	r3, #1
   13b24:	bl	12f2c <flatcc_verify_vector_field@@Base>
   13b28:	cmp	r0, #0
   13b2c:	beq	13b78 <flatcc_verify_union_vector_field@@Base+0xac>
   13b30:	stm	sp, {r7, r9}
   13b34:	mov	r0, r5
   13b38:	mov	r1, r4
   13b3c:	mov	r2, r6
   13b40:	mov	r3, #1
   13b44:	bl	12f2c <flatcc_verify_vector_field@@Base>
   13b48:	sub	sp, fp, #28
   13b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b50:	mov	r0, r5
   13b54:	mov	r1, sl
   13b58:	bl	13a94 <flatcc_verify_union_field@@Base+0x134>
   13b5c:	cmp	r6, #0
   13b60:	beq	13b08 <flatcc_verify_union_vector_field@@Base+0x3c>
   13b64:	uxth	r1, r0
   13b68:	mov	r0, #22
   13b6c:	cmp	r1, #0
   13b70:	beq	13c10 <flatcc_verify_union_vector_field@@Base+0x144>
   13b74:	b	13b08 <flatcc_verify_union_vector_field@@Base+0x3c>
   13b78:	mov	r0, r5
   13b7c:	mov	r1, r4
   13b80:	bl	1381c <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   13b84:	cmp	r0, #0
   13b88:	beq	13c18 <flatcc_verify_union_vector_field@@Base+0x14c>
   13b8c:	mov	r4, r0
   13b90:	mov	r1, #0
   13b94:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13b98:	add	r4, r0, r4
   13b9c:	mov	r0, r4
   13ba0:	mov	r1, #0
   13ba4:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13ba8:	mov	r9, r0
   13bac:	add	r3, sp, #16
   13bb0:	mov	r0, r5
   13bb4:	mov	r1, sl
   13bb8:	mov	r2, r6
   13bbc:	bl	12e34 <flatcc_verify_string_field@@Base+0x5c>
   13bc0:	cmp	r0, #0
   13bc4:	bne	13c10 <flatcc_verify_union_vector_field@@Base+0x144>
   13bc8:	ldr	r6, [sp, #16]
   13bcc:	cmp	r6, #0
   13bd0:	beq	13c10 <flatcc_verify_union_vector_field@@Base+0x144>
   13bd4:	ldm	r5, {r7, sl}
   13bd8:	mov	r0, r7
   13bdc:	mov	r1, r6
   13be0:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13be4:	mov	r3, r0
   13be8:	ldr	r0, [r5, #8]
   13bec:	add	r1, r4, #4
   13bf0:	str	r9, [sp]
   13bf4:	str	r1, [sp, #4]
   13bf8:	str	r0, [sp, #8]
   13bfc:	str	r8, [sp, #12]
   13c00:	mov	r0, r7
   13c04:	mov	r1, sl
   13c08:	mov	r2, r6
   13c0c:	bl	13c24 <flatcc_verify_union_vector_field@@Base+0x158>
   13c10:	sub	sp, fp, #28
   13c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c18:	mov	r0, #0
   13c1c:	sub	sp, fp, #28
   13c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c28:	add	fp, sp, #28
   13c2c:	sub	sp, sp, #36	; 0x24
   13c30:	ldr	r8, [fp, #16]
   13c34:	cmp	r8, #1
   13c38:	blt	13cd0 <flatcc_verify_union_vector_field@@Base+0x204>
   13c3c:	mov	r6, r3
   13c40:	mov	r4, r2
   13c44:	mov	r7, r1
   13c48:	mov	r9, r0
   13c4c:	mvn	r0, #-1073741824	; 0xc0000000
   13c50:	mov	r1, #4
   13c54:	str	r1, [sp]
   13c58:	str	r1, [sp, #4]
   13c5c:	str	r0, [sp, #8]
   13c60:	mov	r0, r9
   13c64:	mov	r1, r7
   13c68:	bl	12f9c <flatcc_verify_vector_field@@Base+0x70>
   13c6c:	mov	r5, r0
   13c70:	cmp	r0, #0
   13c74:	bne	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13c78:	ldr	sl, [fp, #8]
   13c7c:	add	r4, r6, r4
   13c80:	mov	r0, r9
   13c84:	mov	r1, r4
   13c88:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13c8c:	mov	r5, #34	; 0x22
   13c90:	cmp	r0, sl
   13c94:	bne	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13c98:	mov	r6, r0
   13c9c:	sub	r0, r8, #1
   13ca0:	str	r0, [sp, #20]
   13ca4:	str	r7, [sp, #16]
   13ca8:	str	r9, [sp, #12]
   13cac:	mov	r5, #0
   13cb0:	cmp	r6, #0
   13cb4:	beq	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13cb8:	ldr	r0, [fp, #20]
   13cbc:	ldr	sl, [fp, #12]
   13cc0:	add	r7, r4, #4
   13cc4:	mov	r4, r0
   13cc8:	add	r8, sp, #12
   13ccc:	b	13cf8 <flatcc_verify_union_vector_field@@Base+0x22c>
   13cd0:	mov	r5, #3
   13cd4:	mov	r0, r5
   13cd8:	sub	sp, fp, #28
   13cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce0:	cmp	r1, #0
   13ce4:	bne	13d4c <flatcc_verify_union_vector_field@@Base+0x280>
   13ce8:	add	sl, sl, #1
   13cec:	subs	r6, r6, #1
   13cf0:	add	r7, r7, #4
   13cf4:	beq	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13cf8:	mov	r0, r9
   13cfc:	mov	r1, r7
   13d00:	bl	12f24 <flatcc_verify_string_field@@Base+0x14c>
   13d04:	ldrb	r1, [sl]
   13d08:	cmp	r0, #0
   13d0c:	beq	13ce0 <flatcc_verify_union_vector_field@@Base+0x214>
   13d10:	cmp	r1, #0
   13d14:	beq	13d44 <flatcc_verify_union_vector_field@@Base+0x278>
   13d18:	str	r0, [sp, #32]
   13d1c:	str	r7, [sp, #28]
   13d20:	strb	r1, [sp, #24]
   13d24:	mov	r0, r8
   13d28:	blx	r4
   13d2c:	cmp	r0, #0
   13d30:	beq	13ce8 <flatcc_verify_union_vector_field@@Base+0x21c>
   13d34:	add	r0, sp, #12
   13d38:	blx	r4
   13d3c:	mov	r5, r0
   13d40:	b	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13d44:	mov	r5, #33	; 0x21
   13d48:	b	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13d4c:	mov	r5, #32
   13d50:	b	13cd4 <flatcc_verify_union_vector_field@@Base+0x208>
   13d54:	mov	r3, r0
   13d58:	add	r2, r2, r1
   13d5c:	mov	r0, #0
   13d60:	cmp	r2, r1
   13d64:	bxls	lr
   13d68:	add	r1, r2, #4
   13d6c:	cmp	r1, r3
   13d70:	andls	r0, r2, #3
   13d74:	clzls	r0, r0
   13d78:	lsrls	r0, r0, #5
   13d7c:	bx	lr
   13d80:	ldr	r0, [r0]
   13d84:	b	13d88 <flatcc_verify_union_vector_field@@Base+0x2bc>
   13d88:	bx	lr
   13d8c:	mov	ip, r0
   13d90:	cmp	r3, #4
   13d94:	movls	r3, #4
   13d98:	add	r2, r2, r1
   13d9c:	mov	r0, #0
   13da0:	cmp	r2, r1
   13da4:	bxls	lr
   13da8:	add	r1, r2, #4
   13dac:	cmp	r1, ip
   13db0:	subls	r0, r3, #1
   13db4:	orrls	r0, r0, #3
   13db8:	andls	r0, r0, r1
   13dbc:	clzls	r0, r0
   13dc0:	lsrls	r0, r0, #5
   13dc4:	bx	lr
   13dc8:	add	r0, r0, r1
   13dcc:	b	13dd0 <flatcc_verify_union_vector_field@@Base+0x304>
   13dd0:	ldrh	r0, [r0]
   13dd4:	b	13dd8 <flatcc_verify_union_vector_field@@Base+0x30c>
   13dd8:	bx	lr
   13ddc:	bx	lr
   13de0:	ldr	r0, [r0]
   13de4:	b	13de8 <flatcc_verify_union_vector_field@@Base+0x31c>
   13de8:	bx	lr

00013dec <__libc_csu_init@@Base>:
   13dec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13df0:	mov	r7, r0
   13df4:	ldr	r6, [pc, #72]	; 13e44 <__libc_csu_init@@Base+0x58>
   13df8:	ldr	r5, [pc, #72]	; 13e48 <__libc_csu_init@@Base+0x5c>
   13dfc:	add	r6, pc, r6
   13e00:	add	r5, pc, r5
   13e04:	sub	r6, r6, r5
   13e08:	mov	r8, r1
   13e0c:	mov	r9, r2
   13e10:	bl	10e34 <strcmp@plt-0x20>
   13e14:	asrs	r6, r6, #2
   13e18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e1c:	mov	r4, #0
   13e20:	add	r4, r4, #1
   13e24:	ldr	r3, [r5], #4
   13e28:	mov	r2, r9
   13e2c:	mov	r1, r8
   13e30:	mov	r0, r7
   13e34:	blx	r3
   13e38:	cmp	r6, r4
   13e3c:	bne	13e20 <__libc_csu_init@@Base+0x34>
   13e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e44:	andeq	r2, r1, r8, lsl #2
   13e48:	andeq	r2, r1, r0, lsl #2

00013e4c <__libc_csu_fini@@Base>:
   13e4c:	bx	lr

Disassembly of section .fini:

00013e50 <.fini>:
   13e50:	push	{r3, lr}
   13e54:	pop	{r3, pc}
