
../repos/tbeu-matio-3dd266d/test/test_snprintf:     file format elf32-littlearm


Disassembly of section .init:

00010424 <.init>:
   10424:	push	{r3, lr}
   10428:	bl	10a64 <abort@plt+0x5b4>
   1042c:	pop	{r3, pc}

Disassembly of section .plt:

00010430 <strcmp@plt-0x14>:
   10430:	push	{lr}		; (str lr, [sp, #-4]!)
   10434:	ldr	lr, [pc, #4]	; 10440 <strcmp@plt-0x4>
   10438:	add	lr, pc, lr
   1043c:	ldr	pc, [lr, #8]!
   10440:	andeq	r0, r1, r0, asr #23

00010444 <strcmp@plt>:
   10444:	add	ip, pc, #0, 12
   10448:	add	ip, ip, #16, 20	; 0x10000
   1044c:	ldr	pc, [ip, #3008]!	; 0xbc0

00010450 <printf@plt>:
   10450:	add	ip, pc, #0, 12
   10454:	add	ip, ip, #16, 20	; 0x10000
   10458:	ldr	pc, [ip, #3000]!	; 0xbb8

0001045c <memcpy@plt>:
   1045c:	add	ip, pc, #0, 12
   10460:	add	ip, ip, #16, 20	; 0x10000
   10464:	ldr	pc, [ip, #2992]!	; 0xbb0

00010468 <pow@plt>:
   10468:	add	ip, pc, #0, 12
   1046c:	add	ip, ip, #16, 20	; 0x10000
   10470:	ldr	pc, [ip, #2984]!	; 0xba8

00010474 <puts@plt>:
   10474:	add	ip, pc, #0, 12
   10478:	add	ip, ip, #16, 20	; 0x10000
   1047c:	ldr	pc, [ip, #2976]!	; 0xba0

00010480 <__libc_start_main@plt>:
   10480:	add	ip, pc, #0, 12
   10484:	add	ip, ip, #16, 20	; 0x10000
   10488:	ldr	pc, [ip, #2968]!	; 0xb98

0001048c <__gmon_start__@plt>:
   1048c:	add	ip, pc, #0, 12
   10490:	add	ip, ip, #16, 20	; 0x10000
   10494:	ldr	pc, [ip, #2960]!	; 0xb90

00010498 <snprintf@plt>:
   10498:	add	ip, pc, #0, 12
   1049c:	add	ip, ip, #16, 20	; 0x10000
   104a0:	ldr	pc, [ip, #2952]!	; 0xb88

000104a4 <sprintf@plt>:
   104a4:	add	ip, pc, #0, 12
   104a8:	add	ip, ip, #16, 20	; 0x10000
   104ac:	ldr	pc, [ip, #2944]!	; 0xb80

000104b0 <abort@plt>:
   104b0:	add	ip, pc, #0, 12
   104b4:	add	ip, ip, #16, 20	; 0x10000
   104b8:	ldr	pc, [ip, #2936]!	; 0xb78

Disassembly of section .text:

000104c0 <.text>:
   104c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104c4:	vpush	{d8-d10}
   104c8:	ldr	r6, [pc, #1296]	; 109e0 <abort@plt+0x530>
   104cc:	ldr	r7, [pc, #1296]	; 109e4 <abort@plt+0x534>
   104d0:	add	r6, pc, r6
   104d4:	mov	lr, r6
   104d8:	sub	sp, sp, #2400	; 0x960
   104dc:	sub	sp, sp, #4
   104e0:	ldm	lr!, {r0, r1, r2, r3}
   104e4:	add	r5, sp, #176	; 0xb0
   104e8:	mov	ip, r5
   104ec:	add	r4, sp, #240	; 0xf0
   104f0:	stmia	ip!, {r0, r1, r2, r3}
   104f4:	add	r3, sp, #48	; 0x30
   104f8:	mov	r9, r3
   104fc:	str	r3, [sp, #32]
   10500:	ldm	lr!, {r0, r1, r2, r3}
   10504:	add	r8, sp, #64	; 0x40
   10508:	str	r4, [sp, #20]
   1050c:	str	r8, [sp, #28]
   10510:	stmia	ip!, {r0, r1, r2, r3}
   10514:	add	r7, pc, r7
   10518:	ldm	lr!, {r0, r1, r2, r3}
   1051c:	mov	sl, r4
   10520:	stmia	ip!, {r0, r1, r2, r3}
   10524:	ldm	lr, {r0, r1, r2, r3}
   10528:	stm	ip, {r0, r1, r2, r3}
   1052c:	mov	r0, r4
   10530:	add	r4, r6, #64	; 0x40
   10534:	mov	r1, r7
   10538:	mov	r2, #112	; 0x70
   1053c:	bl	1045c <memcpy@plt>
   10540:	ldm	r4!, {r0, r1, r2, r3}
   10544:	add	ip, sp, #88	; 0x58
   10548:	mov	lr, ip
   1054c:	add	r7, r7, #112	; 0x70
   10550:	stmia	lr!, {r0, r1, r2, r3}
   10554:	ldm	r4!, {r0, r1, r2, r3}
   10558:	str	ip, [sp, #24]
   1055c:	add	ip, r6, #108	; 0x6c
   10560:	stmia	lr!, {r0, r1, r2, r3}
   10564:	add	r3, sp, #132	; 0x84
   10568:	ldm	r4, {r0, r1, r2}
   1056c:	mov	r4, r3
   10570:	str	r3, [sp, #36]	; 0x24
   10574:	add	r6, r6, #152	; 0x98
   10578:	stm	lr, {r0, r1, r2}
   1057c:	mov	lr, r4
   10580:	ldm	r7!, {r0, r1, r2, r3}
   10584:	sub	r4, r9, #4
   10588:	stmia	r8!, {r0, r1, r2, r3}
   1058c:	ldm	r7, {r0, r1}
   10590:	stm	r8, {r0, r1}
   10594:	ldm	ip!, {r0, r1, r2, r3}
   10598:	stmia	lr!, {r0, r1, r2, r3}
   1059c:	ldm	ip!, {r0, r1, r2, r3}
   105a0:	stmia	lr!, {r0, r1, r2, r3}
   105a4:	ldm	ip, {r0, r1, r2}
   105a8:	stm	lr, {r0, r1, r2}
   105ac:	ldm	r6!, {r0, r1, r2, r3}
   105b0:	ldr	ip, [r6]
   105b4:	stmia	r4!, {r0, r1, r2, r3}
   105b8:	ldr	r0, [pc, #1064]	; 109e8 <abort@plt+0x538>
   105bc:	str	ip, [r4]
   105c0:	add	r0, pc, r0
   105c4:	bl	10474 <puts@plt>
   105c8:	ldr	r4, [sp, #176]	; 0xb0
   105cc:	cmp	r4, #0
   105d0:	beq	10a14 <abort@plt+0x564>
   105d4:	ldr	r3, [pc, #1040]	; 109ec <abort@plt+0x53c>
   105d8:	vldr	d10, [sl]
   105dc:	add	r3, pc, r3
   105e0:	vldr	d9, [pc, #992]	; 109c8 <abort@plt+0x518>
   105e4:	mov	r9, #0
   105e8:	str	r3, [sp, #12]
   105ec:	ldr	r3, [pc, #1020]	; 109f0 <abort@plt+0x540>
   105f0:	str	r5, [sp, #16]
   105f4:	mov	fp, r9
   105f8:	add	r5, sp, #352	; 0x160
   105fc:	add	r6, sp, #1376	; 0x560
   10600:	add	r3, pc, r3
   10604:	str	r3, [sp, #8]
   10608:	vcmp.f64	d10, d9
   1060c:	vmrs	APSR_nzcv, fpscr
   10610:	beq	106c8 <abort@plt+0x218>
   10614:	ldr	r3, [sp, #20]
   10618:	vmov.f64	d8, d10
   1061c:	add	sl, r3, #8
   10620:	b	10654 <abort@plt+0x1a4>
   10624:	cmp	r8, r7
   10628:	mov	r3, r4
   1062c:	mov	r2, r7
   10630:	mov	r1, r8
   10634:	ldr	r0, [sp, #8]
   10638:	beq	10644 <abort@plt+0x194>
   1063c:	bl	10450 <printf@plt>
   10640:	add	fp, fp, #1
   10644:	vldmia	sl!, {d8}
   10648:	vcmp.f64	d8, d9
   1064c:	vmrs	APSR_nzcv, fpscr
   10650:	beq	106c8 <abort@plt+0x218>
   10654:	mov	r1, #0
   10658:	mov	r2, r4
   1065c:	mov	r0, r1
   10660:	vstr	d8, [sp]
   10664:	bl	10498 <snprintf@plt>
   10668:	mov	r2, r4
   1066c:	mov	r1, #1024	; 0x400
   10670:	vstr	d8, [sp]
   10674:	add	r9, r9, #1
   10678:	mov	r8, r0
   1067c:	mov	r0, r5
   10680:	bl	10498 <snprintf@plt>
   10684:	vmov	r2, r3, d8
   10688:	mov	r1, r4
   1068c:	mov	r7, r0
   10690:	mov	r0, r6
   10694:	bl	104a4 <sprintf@plt>
   10698:	mov	r1, r6
   1069c:	mov	r0, r5
   106a0:	bl	10444 <strcmp@plt>
   106a4:	cmp	r0, #0
   106a8:	beq	10624 <abort@plt+0x174>
   106ac:	mov	r3, r6
   106b0:	mov	r2, r5
   106b4:	mov	r1, r4
   106b8:	ldr	r0, [sp, #12]
   106bc:	bl	10450 <printf@plt>
   106c0:	add	fp, fp, #1
   106c4:	b	10624 <abort@plt+0x174>
   106c8:	ldr	r3, [sp, #16]
   106cc:	ldr	r4, [r3, #4]!
   106d0:	cmp	r4, #0
   106d4:	str	r3, [sp, #16]
   106d8:	bne	10608 <abort@plt+0x158>
   106dc:	ldr	r7, [sp, #88]	; 0x58
   106e0:	cmp	r7, #0
   106e4:	beq	107f8 <abort@plt+0x348>
   106e8:	ldr	r3, [sp, #24]
   106ec:	str	fp, [sp, #8]
   106f0:	str	r3, [sp, #16]
   106f4:	ldr	r3, [sp, #64]	; 0x40
   106f8:	str	r3, [sp, #20]
   106fc:	ldr	r3, [pc, #752]	; 109f4 <abort@plt+0x544>
   10700:	add	r3, pc, r3
   10704:	str	r3, [sp, #24]
   10708:	ldr	r3, [pc, #744]	; 109f8 <abort@plt+0x548>
   1070c:	add	r3, pc, r3
   10710:	str	r3, [sp, #12]
   10714:	ldr	r3, [sp, #20]
   10718:	cmp	r3, #0
   1071c:	beq	107e0 <abort@plt+0x330>
   10720:	ldr	r3, [sp, #28]
   10724:	ldr	r4, [sp, #20]
   10728:	add	fp, r3, #4
   1072c:	b	10764 <abort@plt+0x2b4>
   10730:	cmp	sl, r8
   10734:	mov	r3, r7
   10738:	mov	r2, r8
   1073c:	mov	r1, sl
   10740:	ldr	r0, [sp, #12]
   10744:	beq	10758 <abort@plt+0x2a8>
   10748:	bl	10450 <printf@plt>
   1074c:	ldr	r3, [sp, #8]
   10750:	add	r3, r3, #1
   10754:	str	r3, [sp, #8]
   10758:	ldr	r4, [fp], #4
   1075c:	cmp	r4, #0
   10760:	beq	107e0 <abort@plt+0x330>
   10764:	mov	r1, #0
   10768:	mov	r3, r4
   1076c:	mov	r2, r7
   10770:	mov	r0, r1
   10774:	bl	10498 <snprintf@plt>
   10778:	mov	r3, r4
   1077c:	mov	r2, r7
   10780:	mov	r1, #1024	; 0x400
   10784:	add	r9, r9, #1
   10788:	mov	sl, r0
   1078c:	mov	r0, r5
   10790:	bl	10498 <snprintf@plt>
   10794:	mov	r2, r4
   10798:	mov	r1, r7
   1079c:	mov	r8, r0
   107a0:	mov	r0, r6
   107a4:	bl	104a4 <sprintf@plt>
   107a8:	mov	r1, r6
   107ac:	mov	r0, r5
   107b0:	bl	10444 <strcmp@plt>
   107b4:	cmp	r0, #0
   107b8:	beq	10730 <abort@plt+0x280>
   107bc:	mov	r3, r6
   107c0:	mov	r2, r5
   107c4:	mov	r1, r7
   107c8:	ldr	r0, [sp, #24]
   107cc:	bl	10450 <printf@plt>
   107d0:	ldr	r3, [sp, #8]
   107d4:	add	r3, r3, #1
   107d8:	str	r3, [sp, #8]
   107dc:	b	10730 <abort@plt+0x280>
   107e0:	ldr	r3, [sp, #16]
   107e4:	ldr	r7, [r3, #4]!
   107e8:	cmp	r7, #0
   107ec:	str	r3, [sp, #16]
   107f0:	bne	10714 <abort@plt+0x264>
   107f4:	ldr	fp, [sp, #8]
   107f8:	ldr	r7, [sp, #132]	; 0x84
   107fc:	cmp	r7, #0
   10800:	beq	108e8 <abort@plt+0x438>
   10804:	ldr	r3, [sp, #36]	; 0x24
   10808:	str	fp, [sp, #8]
   1080c:	str	r3, [sp, #16]
   10810:	ldr	r3, [sp, #44]	; 0x2c
   10814:	str	r3, [sp, #20]
   10818:	ldr	r3, [pc, #476]	; 109fc <abort@plt+0x54c>
   1081c:	add	r3, pc, r3
   10820:	str	r3, [sp, #24]
   10824:	ldr	r3, [pc, #468]	; 10a00 <abort@plt+0x550>
   10828:	add	r3, pc, r3
   1082c:	str	r3, [sp, #12]
   10830:	ldr	r3, [sp, #20]
   10834:	cmp	r3, #0
   10838:	beq	108d0 <abort@plt+0x420>
   1083c:	ldr	fp, [sp, #32]
   10840:	ldr	r4, [sp, #20]
   10844:	mov	r1, #0
   10848:	mov	r3, r4
   1084c:	mov	r2, r7
   10850:	mov	r0, r1
   10854:	bl	10498 <snprintf@plt>
   10858:	mov	r3, r4
   1085c:	mov	r2, r7
   10860:	mov	r1, #1024	; 0x400
   10864:	add	r9, r9, #1
   10868:	mov	sl, r0
   1086c:	mov	r0, r5
   10870:	bl	10498 <snprintf@plt>
   10874:	mov	r2, r4
   10878:	mov	r1, r7
   1087c:	mov	r8, r0
   10880:	mov	r0, r6
   10884:	bl	104a4 <sprintf@plt>
   10888:	mov	r1, r6
   1088c:	mov	r0, r5
   10890:	bl	10444 <strcmp@plt>
   10894:	cmp	r0, #0
   10898:	bne	109a0 <abort@plt+0x4f0>
   1089c:	cmp	sl, r8
   108a0:	mov	r3, r7
   108a4:	mov	r2, r8
   108a8:	mov	r1, sl
   108ac:	ldr	r0, [sp, #12]
   108b0:	beq	108c4 <abort@plt+0x414>
   108b4:	bl	10450 <printf@plt>
   108b8:	ldr	r3, [sp, #8]
   108bc:	add	r3, r3, #1
   108c0:	str	r3, [sp, #8]
   108c4:	ldr	r4, [fp], #4
   108c8:	cmp	r4, #0
   108cc:	bne	10844 <abort@plt+0x394>
   108d0:	ldr	r3, [sp, #16]
   108d4:	ldr	r7, [r3, #4]!
   108d8:	cmp	r7, #0
   108dc:	str	r3, [sp, #16]
   108e0:	bne	10830 <abort@plt+0x380>
   108e4:	ldr	fp, [sp, #8]
   108e8:	ldr	r0, [pc, #276]	; 10a04 <abort@plt+0x554>
   108ec:	mov	r2, r9
   108f0:	mov	r1, fp
   108f4:	add	r0, pc, r0
   108f8:	bl	10450 <printf@plt>
   108fc:	ldr	r0, [pc, #260]	; 10a08 <abort@plt+0x558>
   10900:	ldr	r7, [pc, #260]	; 10a0c <abort@plt+0x55c>
   10904:	add	r0, pc, r0
   10908:	bl	10474 <puts@plt>
   1090c:	vldr	d10, [pc, #188]	; 109d0 <abort@plt+0x520>
   10910:	vldr	d9, [pc, #192]	; 109d8 <abort@plt+0x528>
   10914:	add	r7, pc, r7
   10918:	mov	r4, #0
   1091c:	mov	r8, #1024	; 0x400
   10920:	b	10930 <abort@plt+0x480>
   10924:	add	r4, r4, #1
   10928:	cmp	r4, #100	; 0x64
   1092c:	beq	1098c <abort@plt+0x4dc>
   10930:	vmov	s15, r4
   10934:	vmov.f64	d0, d10
   10938:	vcvt.f64.s32	d1, s15
   1093c:	bl	10468 <pow@plt>
   10940:	mov	r2, r7
   10944:	mov	r1, r8
   10948:	mov	r0, r5
   1094c:	vmul.f64	d8, d0, d9
   10950:	vstr	d8, [sp]
   10954:	bl	10498 <snprintf@plt>
   10958:	vmov	r2, r3, d8
   1095c:	mov	r1, r7
   10960:	mov	r0, r6
   10964:	bl	104a4 <sprintf@plt>
   10968:	mov	r1, r6
   1096c:	mov	r0, r5
   10970:	bl	10444 <strcmp@plt>
   10974:	cmp	r0, #0
   10978:	beq	10924 <abort@plt+0x474>
   1097c:	ldr	r0, [pc, #140]	; 10a10 <abort@plt+0x560>
   10980:	sub	r1, r4, #1
   10984:	add	r0, pc, r0
   10988:	bl	10450 <printf@plt>
   1098c:	mov	r0, #0
   10990:	add	sp, sp, #2400	; 0x960
   10994:	add	sp, sp, #4
   10998:	vpop	{d8-d10}
   1099c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109a0:	mov	r3, r6
   109a4:	mov	r2, r5
   109a8:	mov	r1, r7
   109ac:	ldr	r0, [sp, #24]
   109b0:	bl	10450 <printf@plt>
   109b4:	ldr	r3, [sp, #8]
   109b8:	add	r3, r3, #1
   109bc:	str	r3, [sp, #8]
   109c0:	b	1089c <abort@plt+0x3ec>
   109c4:	nop			; (mov r0, r0)
	...
   109d4:	eormi	r0, r4, r0
   109d8:	smlsldcc	pc, r6, pc, r6	; <UNPREDICTABLE>
   109dc:	svccc	0x00bf9add
   109e0:	andeq	r0, r1, r8, ror #22
   109e4:	andeq	r0, r0, ip, lsr #13
   109e8:	andeq	r0, r0, r8, lsl #13
   109ec:	andeq	r0, r0, r4, lsr #13
   109f0:	andeq	r0, r0, r8, asr #13
   109f4:	andeq	r0, r0, r0, lsl #11
   109f8:			; <UNDEFINED> instruction: 0x000005bc
   109fc:	andeq	r0, r0, r4, ror #8
   10a00:	andeq	r0, r0, r0, lsr #9
   10a04:	strdeq	r0, [r0], -r4
   10a08:	andeq	r0, r0, r0, lsl #8
   10a0c:	andeq	r0, r0, r4, lsl r4
   10a10:	andeq	r0, r0, ip, lsr #7
   10a14:	mov	r9, r4
   10a18:	mov	fp, r4
   10a1c:	add	r5, sp, #352	; 0x160
   10a20:	add	r6, sp, #1376	; 0x560
   10a24:	b	106dc <abort@plt+0x22c>
   10a28:	mov	fp, #0
   10a2c:	mov	lr, #0
   10a30:	pop	{r1}		; (ldr r1, [sp], #4)
   10a34:	mov	r2, sp
   10a38:	push	{r2}		; (str r2, [sp, #-4]!)
   10a3c:	push	{r0}		; (str r0, [sp, #-4]!)
   10a40:	ldr	ip, [pc, #16]	; 10a58 <abort@plt+0x5a8>
   10a44:	push	{ip}		; (str ip, [sp, #-4]!)
   10a48:	ldr	r0, [pc, #12]	; 10a5c <abort@plt+0x5ac>
   10a4c:	ldr	r3, [pc, #12]	; 10a60 <abort@plt+0x5b0>
   10a50:	bl	10480 <__libc_start_main@plt>
   10a54:	bl	104b0 <abort@plt>
   10a58:			; <UNDEFINED> instruction: 0x00010bb0
   10a5c:	andeq	r0, r1, r0, asr #9
   10a60:	andeq	r0, r1, r0, asr fp
   10a64:	ldr	r3, [pc, #20]	; 10a80 <abort@plt+0x5d0>
   10a68:	ldr	r2, [pc, #20]	; 10a84 <abort@plt+0x5d4>
   10a6c:	add	r3, pc, r3
   10a70:	ldr	r2, [r3, r2]
   10a74:	cmp	r2, #0
   10a78:	bxeq	lr
   10a7c:	b	1048c <__gmon_start__@plt>
   10a80:	andeq	r0, r1, ip, lsl #11
   10a84:	andeq	r0, r0, r4, lsr r0
   10a88:	ldr	r3, [pc, #28]	; 10aac <abort@plt+0x5fc>
   10a8c:	ldr	r0, [pc, #28]	; 10ab0 <abort@plt+0x600>
   10a90:	sub	r3, r3, r0
   10a94:	cmp	r3, #6
   10a98:	bxls	lr
   10a9c:	ldr	r3, [pc, #16]	; 10ab4 <abort@plt+0x604>
   10aa0:	cmp	r3, #0
   10aa4:	bxeq	lr
   10aa8:	bx	r3
   10aac:	andeq	r1, r2, pc, ror #1
   10ab0:	andeq	r1, r2, ip, ror #1
   10ab4:	andeq	r0, r0, r0
   10ab8:	ldr	r1, [pc, #36]	; 10ae4 <abort@plt+0x634>
   10abc:	ldr	r0, [pc, #36]	; 10ae8 <abort@plt+0x638>
   10ac0:	sub	r1, r1, r0
   10ac4:	asr	r1, r1, #2
   10ac8:	add	r1, r1, r1, lsr #31
   10acc:	asrs	r1, r1, #1
   10ad0:	bxeq	lr
   10ad4:	ldr	r3, [pc, #16]	; 10aec <abort@plt+0x63c>
   10ad8:	cmp	r3, #0
   10adc:	bxeq	lr
   10ae0:	bx	r3
   10ae4:	andeq	r1, r2, ip, ror #1
   10ae8:	andeq	r1, r2, ip, ror #1
   10aec:	andeq	r0, r0, r0
   10af0:	push	{r4, lr}
   10af4:	ldr	r4, [pc, #24]	; 10b14 <abort@plt+0x664>
   10af8:	ldrb	r3, [r4]
   10afc:	cmp	r3, #0
   10b00:	popne	{r4, pc}
   10b04:	bl	10a88 <abort@plt+0x5d8>
   10b08:	mov	r3, #1
   10b0c:	strb	r3, [r4]
   10b10:	pop	{r4, pc}
   10b14:	andeq	r1, r2, ip, ror #1
   10b18:	ldr	r0, [pc, #40]	; 10b48 <abort@plt+0x698>
   10b1c:	ldr	r3, [r0]
   10b20:	cmp	r3, #0
   10b24:	bne	10b2c <abort@plt+0x67c>
   10b28:	b	10ab8 <abort@plt+0x608>
   10b2c:	ldr	r3, [pc, #24]	; 10b4c <abort@plt+0x69c>
   10b30:	cmp	r3, #0
   10b34:	beq	10b28 <abort@plt+0x678>
   10b38:	push	{r4, lr}
   10b3c:	blx	r3
   10b40:	pop	{r4, lr}
   10b44:	b	10ab8 <abort@plt+0x608>
   10b48:	andeq	r0, r2, ip, lsl #30
   10b4c:	andeq	r0, r0, r0
   10b50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b54:	mov	r7, r0
   10b58:	ldr	r6, [pc, #72]	; 10ba8 <abort@plt+0x6f8>
   10b5c:	ldr	r5, [pc, #72]	; 10bac <abort@plt+0x6fc>
   10b60:	add	r6, pc, r6
   10b64:	add	r5, pc, r5
   10b68:	sub	r6, r6, r5
   10b6c:	mov	r8, r1
   10b70:	mov	r9, r2
   10b74:	bl	10424 <strcmp@plt-0x20>
   10b78:	asrs	r6, r6, #2
   10b7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b80:	mov	r4, #0
   10b84:	add	r4, r4, #1
   10b88:	ldr	r3, [r5], #4
   10b8c:	mov	r2, r9
   10b90:	mov	r1, r8
   10b94:	mov	r0, r7
   10b98:	blx	r3
   10b9c:	cmp	r6, r4
   10ba0:	bne	10b84 <abort@plt+0x6d4>
   10ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ba8:	andeq	r0, r1, r0, lsr #7
   10bac:	muleq	r1, r8, r3
   10bb0:	bx	lr

Disassembly of section .fini:

00010bb4 <.fini>:
   10bb4:	push	{r3, lr}
   10bb8:	pop	{r3, pc}
