
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

000110fc <.init>:
   110fc:	push	{r3, lr}
   11100:	bl	11504 <__assert_fail@plt+0x4c>
   11104:	pop	{r3, pc}

Disassembly of section .plt:

00011108 <fdopen@plt-0x14>:
   11108:	push	{lr}		; (str lr, [sp, #-4]!)
   1110c:	ldr	lr, [pc, #4]	; 11118 <fdopen@plt-0x4>
   11110:	add	lr, pc, lr
   11114:	ldr	pc, [lr, #8]!
   11118:	andeq	sl, r1, r8, ror #29

0001111c <fdopen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3816]!	; 0xee8

00011128 <calloc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3808]!	; 0xee0

00011134 <fputs_unlocked@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3800]!	; 0xed8

00011140 <raise@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3792]!	; 0xed0

0001114c <fsync@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3784]!	; 0xec8

00011158 <strcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3776]!	; 0xec0

00011164 <fflush@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011170 <memmove@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3760]!	; 0xeb0

0001117c <free@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3752]!	; 0xea8

00011188 <_exit@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3744]!	; 0xea0

00011194 <memcpy@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3736]!	; 0xe98

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ac <mbsinit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3720]!	; 0xe88

000111b8 <time@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3712]!	; 0xe80

000111c4 <ftruncate64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3704]!	; 0xe78

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3696]!	; 0xe70

000111dc <fputc_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3688]!	; 0xe68

000111e8 <dcgettext@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3680]!	; 0xe60

000111f4 <unlink@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3672]!	; 0xe58

00011200 <realloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3664]!	; 0xe50

0001120c <textdomain@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3656]!	; 0xe48

00011218 <__fxstatat64@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3648]!	; 0xe40

00011224 <iswprint@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3640]!	; 0xe38

00011230 <__fxstat64@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3632]!	; 0xe30

0001123c <__memcpy_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3624]!	; 0xe28

00011248 <fwrite@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3616]!	; 0xe20

00011254 <ioctl@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3608]!	; 0xe18

00011260 <lseek64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3600]!	; 0xe10

0001126c <__ctype_get_mb_cur_max@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3592]!	; 0xe08

00011278 <__strcpy_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3584]!	; 0xe00

00011284 <__fpending@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011290 <mbrtowc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3568]!	; 0xdf0

0001129c <error@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3560]!	; 0xde8

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3552]!	; 0xde0

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112c0 <malloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112cc <__libc_start_main@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d8 <__freading@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3512]!	; 0xdb8

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112fc <__ctype_b_loc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3496]!	; 0xda8

00011308 <exit@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3488]!	; 0xda0

00011314 <strlen@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3480]!	; 0xd98

00011320 <strchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3472]!	; 0xd90

0001132c <getpagesize@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3464]!	; 0xd88

00011338 <__errno_location@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3456]!	; 0xd80

00011344 <__sprintf_chk@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3448]!	; 0xd78

00011350 <__cxa_atexit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3440]!	; 0xd70

0001135c <setvbuf@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3432]!	; 0xd68

00011368 <memset@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3424]!	; 0xd60

00011374 <renameat2@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3416]!	; 0xd58

00011380 <__printf_chk@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3408]!	; 0xd50

0001138c <write@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3400]!	; 0xd48

00011398 <fileno@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3392]!	; 0xd40

000113a4 <__fprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3384]!	; 0xd38

000113b0 <fclose@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3376]!	; 0xd30

000113bc <fseeko64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3368]!	; 0xd28

000113c8 <fcntl64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3360]!	; 0xd20

000113d4 <__overflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3352]!	; 0xd18

000113e0 <setlocale@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ec <__explicit_bzero_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3336]!	; 0xd08

000113f8 <strrchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3328]!	; 0xd00

00011404 <nl_langinfo@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3312]!	; 0xcf0

0001141c <fopen64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3304]!	; 0xce8

00011428 <renameat@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3296]!	; 0xce0

00011434 <bindtextdomain@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011440 <fread_unlocked@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #106496	; 0x1a000
   11448:	ldr	pc, [ip, #3280]!	; 0xcd0

0001144c <getrandom@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #106496	; 0x1a000
   11454:	ldr	pc, [ip, #3272]!	; 0xcc8

00011458 <aligned_alloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #106496	; 0x1a000
   11460:	ldr	pc, [ip, #3264]!	; 0xcc0

00011464 <sync@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #106496	; 0x1a000
   1146c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011470 <chmod@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #106496	; 0x1a000
   11478:	ldr	pc, [ip, #3248]!	; 0xcb0

0001147c <isatty@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #106496	; 0x1a000
   11484:	ldr	pc, [ip, #3240]!	; 0xca8

00011488 <strncmp@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #3232]!	; 0xca0

00011494 <fdatasync@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #3224]!	; 0xc98

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #3216]!	; 0xc90

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #3208]!	; 0xc88

000114b8 <__assert_fail@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

000114c8 <.text>:
   114c8:	mov	fp, #0
   114cc:	mov	lr, #0
   114d0:	pop	{r1}		; (ldr r1, [sp], #4)
   114d4:	mov	r2, sp
   114d8:	push	{r2}		; (str r2, [sp, #-4]!)
   114dc:	push	{r0}		; (str r0, [sp, #-4]!)
   114e0:	ldr	ip, [pc, #16]	; 114f8 <__assert_fail@plt+0x40>
   114e4:	push	{ip}		; (str ip, [sp, #-4]!)
   114e8:	ldr	r0, [pc, #12]	; 114fc <__assert_fail@plt+0x44>
   114ec:	ldr	r3, [pc, #12]	; 11500 <__assert_fail@plt+0x48>
   114f0:	bl	112cc <__libc_start_main@plt>
   114f4:	bl	114a0 <abort@plt>
   114f8:	andeq	r9, r1, r0, lsl fp
   114fc:	andeq	r2, r1, r8, lsl fp
   11500:			; <UNDEFINED> instruction: 0x00019ab0
   11504:	ldr	r3, [pc, #20]	; 11520 <__assert_fail@plt+0x68>
   11508:	ldr	r2, [pc, #20]	; 11524 <__assert_fail@plt+0x6c>
   1150c:	add	r3, pc, r3
   11510:	ldr	r2, [r3, r2]
   11514:	cmp	r2, #0
   11518:	bxeq	lr
   1151c:	b	112e4 <__gmon_start__@plt>
   11520:	andeq	sl, r1, ip, ror #21
   11524:	andeq	r0, r0, r4, asr #2
   11528:	ldr	r0, [pc, #24]	; 11548 <__assert_fail@plt+0x90>
   1152c:	ldr	r3, [pc, #24]	; 1154c <__assert_fail@plt+0x94>
   11530:	cmp	r3, r0
   11534:	bxeq	lr
   11538:	ldr	r3, [pc, #16]	; 11550 <__assert_fail@plt+0x98>
   1153c:	cmp	r3, #0
   11540:	bxeq	lr
   11544:	bx	r3
   11548:	muleq	r2, ip, r1
   1154c:	muleq	r2, ip, r1
   11550:	andeq	r0, r0, r0
   11554:	ldr	r0, [pc, #36]	; 11580 <__assert_fail@plt+0xc8>
   11558:	ldr	r1, [pc, #36]	; 11584 <__assert_fail@plt+0xcc>
   1155c:	sub	r1, r1, r0
   11560:	asr	r1, r1, #2
   11564:	add	r1, r1, r1, lsr #31
   11568:	asrs	r1, r1, #1
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0xd0>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	muleq	r2, ip, r1
   11584:	muleq	r2, ip, r1
   11588:	andeq	r0, r0, r0
   1158c:	push	{r4, lr}
   11590:	ldr	r4, [pc, #24]	; 115b0 <__assert_fail@plt+0xf8>
   11594:	ldrb	r3, [r4]
   11598:	cmp	r3, #0
   1159c:	popne	{r4, pc}
   115a0:	bl	11528 <__assert_fail@plt+0x70>
   115a4:	mov	r3, #1
   115a8:	strb	r3, [r4]
   115ac:	pop	{r4, pc}
   115b0:			; <UNDEFINED> instruction: 0x0002c1bc
   115b4:	b	11554 <__assert_fail@plt+0x9c>
   115b8:	str	r4, [sp, #-8]!
   115bc:	str	lr, [sp, #4]
   115c0:	movw	r3, #49600	; 0xc1c0
   115c4:	movt	r3, #2
   115c8:	ldr	r0, [r3]
   115cc:	bl	17068 <__assert_fail@plt+0x5bb0>
   115d0:	ldr	r4, [sp]
   115d4:	add	sp, sp, #4
   115d8:	pop	{pc}		; (ldr pc, [sp], #4)
   115dc:	strd	r4, [sp, #-16]!
   115e0:	str	r6, [sp, #8]
   115e4:	str	lr, [sp, #12]
   115e8:	mov	r5, r0
   115ec:	mov	r4, r1
   115f0:	mov	r1, #3
   115f4:	bl	13c04 <__assert_fail@plt+0x274c>
   115f8:	cmp	r0, #0
   115fc:	ble	11614 <__assert_fail@plt+0x15c>
   11600:	cmp	r4, #0
   11604:	orrne	r2, r0, #65536	; 0x10000
   11608:	biceq	r2, r0, #65536	; 0x10000
   1160c:	cmp	r2, r0
   11610:	bne	11624 <__assert_fail@plt+0x16c>
   11614:	ldrd	r4, [sp]
   11618:	ldr	r6, [sp, #8]
   1161c:	add	sp, sp, #12
   11620:	pop	{pc}		; (ldr pc, [sp], #4)
   11624:	mov	r1, #4
   11628:	mov	r0, r5
   1162c:	bl	13c04 <__assert_fail@plt+0x274c>
   11630:	b	11614 <__assert_fail@plt+0x15c>
   11634:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11638:	strd	r6, [sp, #8]
   1163c:	str	r8, [sp, #16]
   11640:	str	lr, [sp, #20]
   11644:	mov	r6, r0
   11648:	mov	r7, r1
   1164c:	bl	11494 <fdatasync@plt>
   11650:	cmp	r0, #0
   11654:	beq	116a0 <__assert_fail@plt+0x1e8>
   11658:	bl	11338 <__errno_location@plt>
   1165c:	mov	r5, r0
   11660:	ldr	r4, [r0]
   11664:	sub	r3, r4, #21
   11668:	cmp	r4, #9
   1166c:	cmpne	r3, #1
   11670:	bhi	116b4 <__assert_fail@plt+0x1fc>
   11674:	mov	r0, r6
   11678:	bl	1114c <fsync@plt>
   1167c:	cmp	r0, #0
   11680:	beq	116a0 <__assert_fail@plt+0x1e8>
   11684:	ldr	r4, [r5]
   11688:	sub	r3, r4, #21
   1168c:	cmp	r4, #9
   11690:	cmpne	r3, #1
   11694:	bhi	116e8 <__assert_fail@plt+0x230>
   11698:	bl	11464 <sync@plt>
   1169c:	mov	r0, #0
   116a0:	ldrd	r4, [sp]
   116a4:	ldrd	r6, [sp, #8]
   116a8:	ldr	r8, [sp, #16]
   116ac:	add	sp, sp, #20
   116b0:	pop	{pc}		; (ldr pc, [sp], #4)
   116b4:	mov	r2, #5
   116b8:	movw	r1, #40292	; 0x9d64
   116bc:	movt	r1, #1
   116c0:	mov	r0, #0
   116c4:	bl	111e8 <dcgettext@plt>
   116c8:	mov	r3, r7
   116cc:	mov	r2, r0
   116d0:	mov	r1, r4
   116d4:	mov	r0, #0
   116d8:	bl	1129c <error@plt>
   116dc:	str	r4, [r5]
   116e0:	mvn	r0, #0
   116e4:	b	116a0 <__assert_fail@plt+0x1e8>
   116e8:	mov	r2, #5
   116ec:	movw	r1, #40316	; 0x9d7c
   116f0:	movt	r1, #1
   116f4:	mov	r0, #0
   116f8:	bl	111e8 <dcgettext@plt>
   116fc:	mov	r3, r7
   11700:	mov	r2, r0
   11704:	mov	r1, r4
   11708:	mov	r0, #0
   1170c:	bl	1129c <error@plt>
   11710:	str	r4, [r5]
   11714:	mvn	r0, #0
   11718:	b	116a0 <__assert_fail@plt+0x1e8>
   1171c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11720:	strd	r6, [sp, #8]
   11724:	strd	r8, [sp, #16]
   11728:	strd	sl, [sp, #24]
   1172c:	str	lr, [sp, #32]
   11730:	sub	sp, sp, #2064	; 0x810
   11734:	sub	sp, sp, #4
   11738:	str	r0, [sp, #32]
   1173c:	mov	r4, r1
   11740:	str	r2, [sp, #40]	; 0x28
   11744:	str	r3, [sp, #64]	; 0x40
   11748:	ldr	r9, [sp, #2104]	; 0x838
   1174c:	ldrd	r2, [r3]
   11750:	strd	r2, [sp, #24]
   11754:	bl	1132c <getpagesize@plt>
   11758:	cmp	r9, #0
   1175c:	ble	117e8 <__assert_fail@plt+0x330>
   11760:	ubfx	r3, r9, #0, #12
   11764:	orr	r3, r3, r3, lsl #12
   11768:	ubfx	r2, r3, #4, #8
   1176c:	ubfx	r1, r3, #8, #8
   11770:	uxtb	r3, r3
   11774:	cmp	r3, r2
   11778:	cmpeq	r1, r2
   1177c:	movne	r3, #1
   11780:	moveq	r3, #0
   11784:	cmp	r3, #0
   11788:	movne	r3, #61440	; 0xf000
   1178c:	moveq	r3, #65536	; 0x10000
   11790:	str	r3, [sp, #48]	; 0x30
   11794:	ldr	r7, [sp, #48]	; 0x30
   11798:	add	r5, r7, #2
   1179c:	movw	r3, #43691	; 0xaaab
   117a0:	movt	r3, #43690	; 0xaaaa
   117a4:	umull	r3, r5, r3, r5
   117a8:	lsr	r5, r5, #1
   117ac:	add	r5, r5, r5, lsl #1
   117b0:	mov	r1, r5
   117b4:	bl	1812c <__assert_fail@plt+0x6c74>
   117b8:	mov	r6, r0
   117bc:	ldrd	r0, [sp, #24]
   117c0:	cmp	r0, #1
   117c4:	sbcs	r3, r1, #0
   117c8:	blt	1203c <__assert_fail@plt+0xb84>
   117cc:	mov	r3, #0
   117d0:	cmp	r0, r7
   117d4:	sbcs	r3, r1, r3
   117d8:	bge	1203c <__assert_fail@plt+0xb84>
   117dc:	mov	r3, #1
   117e0:	mov	r8, r3
   117e4:	b	12050 <__assert_fail@plt+0xb98>
   117e8:	mov	r3, #65536	; 0x10000
   117ec:	str	r3, [sp, #48]	; 0x30
   117f0:	b	11794 <__assert_fail@plt+0x2dc>
   117f4:	add	r2, sp, #752	; 0x2f0
   117f8:	mov	r3, #6
   117fc:	strh	r3, [r2]
   11800:	mov	r3, #1
   11804:	str	r3, [sp, #756]	; 0x2f4
   11808:	movw	r1, #27905	; 0x6d01
   1180c:	movt	r1, #16392	; 0x4008
   11810:	ldr	r0, [sp, #32]
   11814:	bl	11254 <ioctl@plt>
   11818:	cmp	r0, #0
   1181c:	bne	12060 <__assert_fail@plt+0xba8>
   11820:	b	1182c <__assert_fail@plt+0x374>
   11824:	orrs	r3, r0, r1
   11828:	bne	12090 <__assert_fail@plt+0xbd8>
   1182c:	cmp	r9, #0
   11830:	blt	11898 <__assert_fail@plt+0x3e0>
   11834:	mov	r3, #0
   11838:	ldrd	r0, [sp, #24]
   1183c:	cmp	r3, r1
   11840:	cmpeq	r5, r0
   11844:	bls	11eec <__assert_fail@plt+0xa34>
   11848:	mov	r5, r0
   1184c:	ubfx	r3, r9, #0, #12
   11850:	orr	r3, r3, r3, lsl #12
   11854:	lsr	r2, r3, #4
   11858:	strb	r2, [r6]
   1185c:	lsr	r2, r3, #8
   11860:	strb	r2, [r6, #1]
   11864:	strb	r3, [r6, #2]
   11868:	cmp	r0, #5
   1186c:	movls	r4, #3
   11870:	bls	11f2c <__assert_fail@plt+0xa74>
   11874:	lsr	r7, r0, #1
   11878:	b	11f0c <__assert_fail@plt+0xa54>
   1187c:	sub	r2, r5, r4
   11880:	mov	r1, r6
   11884:	add	r0, r6, r4
   11888:	bl	11194 <memcpy@plt>
   1188c:	tst	r9, #4096	; 0x1000
   11890:	beq	11f64 <__assert_fail@plt+0xaac>
   11894:	b	11f44 <__assert_fail@plt+0xa8c>
   11898:	movw	r3, #40536	; 0x9e58
   1189c:	movt	r3, #1
   118a0:	add	r2, sp, #2048	; 0x800
   118a4:	add	r2, r2, #8
   118a8:	ldr	r1, [r3]
   118ac:	str	r1, [sp, #2056]	; 0x808
   118b0:	ldrh	r1, [r3, #4]
   118b4:	strh	r1, [r2, #4]
   118b8:	ldrb	r3, [r3, #6]
   118bc:	strb	r3, [sp, #2062]	; 0x80e
   118c0:	b	11f98 <__assert_fail@plt+0xae0>
   118c4:	mov	r2, #5
   118c8:	movw	r1, #40372	; 0x9db4
   118cc:	movt	r1, #1
   118d0:	mov	r0, #0
   118d4:	bl	111e8 <dcgettext@plt>
   118d8:	add	r3, sp, #2048	; 0x800
   118dc:	add	r3, r3, #8
   118e0:	str	r3, [sp, #8]
   118e4:	ldr	r3, [sp, #2116]	; 0x844
   118e8:	str	r3, [sp, #4]
   118ec:	ldr	r3, [sp, #2112]	; 0x840
   118f0:	str	r3, [sp]
   118f4:	ldr	r3, [sp, #40]	; 0x28
   118f8:	mov	r2, r0
   118fc:	mov	r1, #0
   11900:	mov	r0, r1
   11904:	bl	1129c <error@plt>
   11908:	mov	r0, #0
   1190c:	bl	111b8 <time@plt>
   11910:	add	r3, r0, #5
   11914:	str	r3, [sp, #76]	; 0x4c
   11918:	b	11fac <__assert_fail@plt+0xaf4>
   1191c:	ldr	r5, [sp, #48]	; 0x30
   11920:	mov	r2, r5
   11924:	mov	r1, r6
   11928:	ldr	r0, [sp, #2108]	; 0x83c
   1192c:	bl	172e8 <__assert_fail@plt+0x5e30>
   11930:	cmp	r5, #0
   11934:	bne	11ee0 <__assert_fail@plt+0xa28>
   11938:	b	11988 <__assert_fail@plt+0x4d0>
   1193c:	mov	r3, #0
   11940:	mvn	r1, #0
   11944:	subs	r1, r1, sl
   11948:	str	r1, [sp, #88]	; 0x58
   1194c:	mvn	r1, #-2147483648	; 0x80000000
   11950:	sbc	r1, r1, fp
   11954:	str	r1, [sp, #92]	; 0x5c
   11958:	ldrd	r0, [sp, #88]	; 0x58
   1195c:	cmp	r0, r4
   11960:	sbcs	r1, r1, r3
   11964:	blt	11ba8 <__assert_fail@plt+0x6f0>
   11968:	adds	r1, r4, sl
   1196c:	str	r1, [sp, #24]
   11970:	adc	r3, r3, fp
   11974:	str	r3, [sp, #28]
   11978:	ldr	r1, [sp, #64]	; 0x40
   1197c:	ldrd	r2, [sp, #24]
   11980:	strd	r2, [r1]
   11984:	mov	r5, r4
   11988:	mov	r4, r5
   1198c:	mov	r5, #0
   11990:	b	11b2c <__assert_fail@plt+0x674>
   11994:	bl	11338 <__errno_location@plt>
   11998:	str	r0, [sp, #52]	; 0x34
   1199c:	ldr	r8, [r0]
   119a0:	eor	r3, r9, #1
   119a4:	cmp	r8, #22
   119a8:	movne	r3, #0
   119ac:	andeq	r3, r3, #1
   119b0:	cmp	r3, #0
   119b4:	bne	11aa8 <__assert_fail@plt+0x5f0>
   119b8:	mov	r2, #5
   119bc:	ldr	r1, [sp, #44]	; 0x2c
   119c0:	mov	r0, r7
   119c4:	bl	111e8 <dcgettext@plt>
   119c8:	str	r0, [sp, #36]	; 0x24
   119cc:	add	r2, sp, #752	; 0x2f0
   119d0:	adds	r0, sl, r4
   119d4:	adc	r1, fp, #0
   119d8:	bl	14a58 <__assert_fail@plt+0x35a0>
   119dc:	str	r0, [sp]
   119e0:	ldr	r3, [sp, #40]	; 0x28
   119e4:	ldr	r2, [sp, #36]	; 0x24
   119e8:	mov	r1, r8
   119ec:	mov	r0, r7
   119f0:	bl	1129c <error@plt>
   119f4:	cmp	r8, #5
   119f8:	bne	11af0 <__assert_fail@plt+0x638>
   119fc:	mvn	r8, r4, lsr #9
   11a00:	mvn	r8, r8, lsl #9
   11a04:	cmp	r8, r5
   11a08:	bcs	11af0 <__assert_fail@plt+0x638>
   11a0c:	add	r8, r8, #1
   11a10:	str	r7, [sp]
   11a14:	adds	r2, sl, r8
   11a18:	adc	r3, fp, #0
   11a1c:	ldr	r0, [sp, #32]
   11a20:	bl	11260 <lseek64@plt>
   11a24:	mvn	r2, #0
   11a28:	mvn	r3, #0
   11a2c:	cmp	r1, r3
   11a30:	cmpeq	r0, r2
   11a34:	beq	11ac0 <__assert_fail@plt+0x608>
   11a38:	sub	r0, r8, r4
   11a3c:	mov	r3, #1
   11a40:	str	r3, [sp, #36]	; 0x24
   11a44:	add	r4, r4, r0
   11a48:	cmp	r4, r5
   11a4c:	bcs	11b00 <__assert_fail@plt+0x648>
   11a50:	sub	r2, r5, r4
   11a54:	add	r1, r6, r4
   11a58:	ldr	r0, [sp, #32]
   11a5c:	bl	1138c <write@plt>
   11a60:	cmp	r0, #0
   11a64:	bgt	11a44 <__assert_fail@plt+0x58c>
   11a68:	ldrd	r2, [sp, #24]
   11a6c:	cmp	r2, #0
   11a70:	sbcs	r3, r3, #0
   11a74:	bge	11994 <__assert_fail@plt+0x4dc>
   11a78:	cmp	r0, #0
   11a7c:	beq	1193c <__assert_fail@plt+0x484>
   11a80:	bl	11338 <__errno_location@plt>
   11a84:	ldr	r8, [r0]
   11a88:	cmp	r8, #28
   11a8c:	beq	1193c <__assert_fail@plt+0x484>
   11a90:	eor	r9, r9, #1
   11a94:	cmp	r8, #22
   11a98:	movne	r9, #0
   11a9c:	andeq	r9, r9, #1
   11aa0:	cmp	r9, #0
   11aa4:	beq	11e8c <__assert_fail@plt+0x9d4>
   11aa8:	mov	r1, r7
   11aac:	ldr	r0, [sp, #32]
   11ab0:	bl	115dc <__assert_fail@plt+0x124>
   11ab4:	mov	r9, #1
   11ab8:	mov	r0, r7
   11abc:	b	11a44 <__assert_fail@plt+0x58c>
   11ac0:	ldr	r3, [sp, #52]	; 0x34
   11ac4:	ldr	r4, [r3]
   11ac8:	mov	r2, #5
   11acc:	movw	r1, #40432	; 0x9df0
   11ad0:	movt	r1, #1
   11ad4:	mov	r0, #0
   11ad8:	bl	111e8 <dcgettext@plt>
   11adc:	ldr	r3, [sp, #40]	; 0x28
   11ae0:	mov	r2, r0
   11ae4:	mov	r1, r4
   11ae8:	mov	r0, #0
   11aec:	bl	1129c <error@plt>
   11af0:	mov	r0, r6
   11af4:	bl	13eac <__assert_fail@plt+0x29f4>
   11af8:	mvn	r0, #0
   11afc:	b	11c94 <__assert_fail@plt+0x7dc>
   11b00:	mov	r5, #0
   11b04:	mvn	r3, #0
   11b08:	subs	r3, r3, sl
   11b0c:	str	r3, [sp, #80]	; 0x50
   11b10:	mvn	r3, #-2147483648	; 0x80000000
   11b14:	sbc	r3, r3, fp
   11b18:	str	r3, [sp, #84]	; 0x54
   11b1c:	ldrd	r2, [sp, #80]	; 0x50
   11b20:	cmp	r2, r4
   11b24:	sbcs	r3, r3, r5
   11b28:	blt	11ba8 <__assert_fail@plt+0x6f0>
   11b2c:	adds	sl, sl, r4
   11b30:	adc	fp, fp, r5
   11b34:	ldr	r3, [sp, #2116]	; 0x844
   11b38:	cmp	r3, #0
   11b3c:	beq	11fe0 <__assert_fail@plt+0xb28>
   11b40:	ldrd	r2, [sp, #24]
   11b44:	cmp	fp, r3
   11b48:	cmpeq	sl, r2
   11b4c:	bne	11e2c <__assert_fail@plt+0x974>
   11b50:	ldr	r3, [sp, #68]	; 0x44
   11b54:	ldrb	r3, [r3]
   11b58:	cmp	r3, #0
   11b5c:	bne	11cb4 <__assert_fail@plt+0x7fc>
   11b60:	mov	r0, #0
   11b64:	bl	111b8 <time@plt>
   11b68:	str	r0, [sp, #72]	; 0x48
   11b6c:	ldr	r2, [sp, #76]	; 0x4c
   11b70:	cmp	r2, r0
   11b74:	bgt	11fe0 <__assert_fail@plt+0xb28>
   11b78:	ldrd	r0, [sp, #24]
   11b7c:	mov	r4, r0
   11b80:	mov	r5, r1
   11b84:	mov	r2, #1
   11b88:	mov	r3, #0
   11b8c:	strd	r2, [sp, #8]
   11b90:	strd	r2, [sp]
   11b94:	movw	r3, #434	; 0x1b2
   11b98:	add	r2, sp, #100	; 0x64
   11b9c:	bl	13fb0 <__assert_fail@plt+0x2af8>
   11ba0:	mov	r7, r0
   11ba4:	b	11ce0 <__assert_fail@plt+0x828>
   11ba8:	mov	r2, #5
   11bac:	movw	r1, #40452	; 0x9e04
   11bb0:	movt	r1, #1
   11bb4:	mov	r0, #0
   11bb8:	bl	111e8 <dcgettext@plt>
   11bbc:	ldr	r3, [sp, #40]	; 0x28
   11bc0:	mov	r2, r0
   11bc4:	mov	r1, #0
   11bc8:	mov	r0, r1
   11bcc:	bl	1129c <error@plt>
   11bd0:	b	11af0 <__assert_fail@plt+0x638>
   11bd4:	mov	r2, #5
   11bd8:	movw	r1, #40472	; 0x9e18
   11bdc:	movt	r1, #1
   11be0:	mov	r0, #0
   11be4:	bl	111e8 <dcgettext@plt>
   11be8:	str	r7, [sp, #12]
   11bec:	add	r3, sp, #2048	; 0x800
   11bf0:	add	r3, r3, #8
   11bf4:	str	r3, [sp, #8]
   11bf8:	ldr	r3, [sp, #2116]	; 0x844
   11bfc:	str	r3, [sp, #4]
   11c00:	ldr	r3, [sp, #2112]	; 0x840
   11c04:	str	r3, [sp]
   11c08:	ldr	r3, [sp, #40]	; 0x28
   11c0c:	mov	r2, r0
   11c10:	mov	r1, #0
   11c14:	mov	r0, r1
   11c18:	bl	1129c <error@plt>
   11c1c:	b	11dd0 <__assert_fail@plt+0x918>
   11c20:	mov	r2, #100	; 0x64
   11c24:	mov	r3, #0
   11c28:	ldrd	r0, [sp, #24]
   11c2c:	bl	19824 <__assert_fail@plt+0x836c>
   11c30:	mov	r2, r0
   11c34:	mov	r3, r1
   11c38:	mov	r0, r4
   11c3c:	mov	r1, r5
   11c40:	bl	198f8 <__assert_fail@plt+0x8440>
   11c44:	mov	r5, r0
   11c48:	b	11d4c <__assert_fail@plt+0x894>
   11c4c:	add	r3, sp, #1392	; 0x570
   11c50:	add	r3, r3, #12
   11c54:	str	r3, [sp, #68]	; 0x44
   11c58:	b	11fe0 <__assert_fail@plt+0xb28>
   11c5c:	ldr	r1, [sp, #40]	; 0x28
   11c60:	ldr	r0, [sp, #32]
   11c64:	bl	11634 <__assert_fail@plt+0x17c>
   11c68:	cmp	r0, #0
   11c6c:	beq	11c88 <__assert_fail@plt+0x7d0>
   11c70:	bl	11338 <__errno_location@plt>
   11c74:	ldr	r3, [r0]
   11c78:	cmp	r3, #5
   11c7c:	bne	11af0 <__assert_fail@plt+0x638>
   11c80:	mov	r3, #1
   11c84:	str	r3, [sp, #36]	; 0x24
   11c88:	mov	r0, r6
   11c8c:	bl	13eac <__assert_fail@plt+0x29f4>
   11c90:	ldr	r0, [sp, #36]	; 0x24
   11c94:	add	sp, sp, #2064	; 0x810
   11c98:	add	sp, sp, #4
   11c9c:	ldrd	r4, [sp]
   11ca0:	ldrd	r6, [sp, #8]
   11ca4:	ldrd	r8, [sp, #16]
   11ca8:	ldrd	sl, [sp, #24]
   11cac:	add	sp, sp, #32
   11cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cb4:	ldrd	r0, [sp, #24]
   11cb8:	mov	r4, r0
   11cbc:	mov	r5, r1
   11cc0:	mov	r2, #1
   11cc4:	mov	r3, #0
   11cc8:	strd	r2, [sp, #8]
   11ccc:	strd	r2, [sp]
   11cd0:	movw	r3, #434	; 0x1b2
   11cd4:	add	r2, sp, #100	; 0x64
   11cd8:	bl	13fb0 <__assert_fail@plt+0x2af8>
   11cdc:	mov	r7, r0
   11ce0:	ldrd	r2, [sp, #24]
   11ce4:	cmp	r2, #0
   11ce8:	sbcs	r3, r3, #0
   11cec:	blt	11bd4 <__assert_fail@plt+0x71c>
   11cf0:	ldrd	r2, [sp, #24]
   11cf4:	orrs	r3, r2, r3
   11cf8:	moveq	r5, #100	; 0x64
   11cfc:	beq	11d4c <__assert_fail@plt+0x894>
   11d00:	add	r1, pc, #960	; 0x3c0
   11d04:	ldrd	r0, [r1]
   11d08:	cmp	r5, r1
   11d0c:	cmpeq	r4, r0
   11d10:	bhi	11c20 <__assert_fail@plt+0x768>
   11d14:	adds	r3, r4, r4
   11d18:	adc	r2, r5, r5
   11d1c:	adds	r3, r3, r4
   11d20:	adc	r2, r2, r5
   11d24:	lsl	r1, r2, #5
   11d28:	orr	r1, r1, r3, lsr #27
   11d2c:	lsl	r0, r3, #5
   11d30:	adds	r0, r3, r0
   11d34:	adc	r1, r2, r1
   11d38:	ldrd	r2, [sp, #24]
   11d3c:	adds	r0, r0, r4
   11d40:	adc	r1, r1, r5
   11d44:	bl	198f8 <__assert_fail@plt+0x8440>
   11d48:	mov	r5, r0
   11d4c:	mov	r2, #1
   11d50:	mov	r3, #0
   11d54:	strd	r2, [sp, #8]
   11d58:	strd	r2, [sp]
   11d5c:	mov	r3, #432	; 0x1b0
   11d60:	add	r2, sp, #752	; 0x2f0
   11d64:	ldrd	r0, [sp, #24]
   11d68:	bl	13fb0 <__assert_fail@plt+0x2af8>
   11d6c:	mov	r4, r0
   11d70:	ldrd	r2, [sp, #24]
   11d74:	cmp	fp, r3
   11d78:	cmpeq	sl, r2
   11d7c:	moveq	r7, r0
   11d80:	mov	r2, #5
   11d84:	movw	r1, #40500	; 0x9e34
   11d88:	movt	r1, #1
   11d8c:	mov	r0, #0
   11d90:	bl	111e8 <dcgettext@plt>
   11d94:	str	r5, [sp, #20]
   11d98:	str	r4, [sp, #16]
   11d9c:	str	r7, [sp, #12]
   11da0:	add	r3, sp, #2048	; 0x800
   11da4:	add	r3, r3, #8
   11da8:	str	r3, [sp, #8]
   11dac:	ldr	r3, [sp, #2116]	; 0x844
   11db0:	str	r3, [sp, #4]
   11db4:	ldr	r3, [sp, #2112]	; 0x840
   11db8:	str	r3, [sp]
   11dbc:	ldr	r3, [sp, #40]	; 0x28
   11dc0:	mov	r2, r0
   11dc4:	mov	r1, #0
   11dc8:	mov	r0, r1
   11dcc:	bl	1129c <error@plt>
   11dd0:	mov	r2, #652	; 0x28c
   11dd4:	mov	r1, r7
   11dd8:	add	r0, sp, #1392	; 0x570
   11ddc:	add	r0, r0, #12
   11de0:	bl	11278 <__strcpy_chk@plt>
   11de4:	ldr	r3, [sp, #72]	; 0x48
   11de8:	add	r3, r3, #5
   11dec:	str	r3, [sp, #76]	; 0x4c
   11df0:	ldr	r1, [sp, #40]	; 0x28
   11df4:	ldr	r0, [sp, #32]
   11df8:	bl	11634 <__assert_fail@plt+0x17c>
   11dfc:	cmp	r0, #0
   11e00:	beq	11c4c <__assert_fail@plt+0x794>
   11e04:	bl	11338 <__errno_location@plt>
   11e08:	ldr	r3, [r0]
   11e0c:	cmp	r3, #5
   11e10:	bne	11af0 <__assert_fail@plt+0x638>
   11e14:	add	r3, sp, #1392	; 0x570
   11e18:	add	r3, r3, #12
   11e1c:	str	r3, [sp, #68]	; 0x44
   11e20:	mov	r3, #1
   11e24:	str	r3, [sp, #36]	; 0x24
   11e28:	b	11fe0 <__assert_fail@plt+0xb28>
   11e2c:	mov	r0, #0
   11e30:	bl	111b8 <time@plt>
   11e34:	str	r0, [sp, #72]	; 0x48
   11e38:	ldr	r2, [sp, #76]	; 0x4c
   11e3c:	cmp	r2, r0
   11e40:	bgt	11fe0 <__assert_fail@plt+0xb28>
   11e44:	mov	r4, sl
   11e48:	mov	r5, fp
   11e4c:	mov	r2, #1
   11e50:	mov	r3, #0
   11e54:	strd	r2, [sp, #8]
   11e58:	strd	r2, [sp]
   11e5c:	movw	r3, #434	; 0x1b2
   11e60:	add	r2, sp, #100	; 0x64
   11e64:	mov	r0, sl
   11e68:	mov	r1, fp
   11e6c:	bl	13fb0 <__assert_fail@plt+0x2af8>
   11e70:	mov	r7, r0
   11e74:	mov	r1, r0
   11e78:	ldr	r0, [sp, #68]	; 0x44
   11e7c:	bl	11158 <strcmp@plt>
   11e80:	cmp	r0, #0
   11e84:	bne	11ce0 <__assert_fail@plt+0x828>
   11e88:	b	11fe0 <__assert_fail@plt+0xb28>
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #40400	; 0x9dd0
   11e94:	movt	r1, #1
   11e98:	mov	r0, #0
   11e9c:	bl	111e8 <dcgettext@plt>
   11ea0:	mov	r5, r0
   11ea4:	add	r2, sp, #752	; 0x2f0
   11ea8:	adds	r0, sl, r4
   11eac:	adc	r1, fp, #0
   11eb0:	bl	14a58 <__assert_fail@plt+0x35a0>
   11eb4:	str	r0, [sp]
   11eb8:	ldr	r3, [sp, #40]	; 0x28
   11ebc:	mov	r2, r5
   11ec0:	mov	r1, r8
   11ec4:	mov	r0, #0
   11ec8:	bl	1129c <error@plt>
   11ecc:	b	11af0 <__assert_fail@plt+0x638>
   11ed0:	ldr	r3, [sp, #2104]	; 0x838
   11ed4:	cmp	r3, #0
   11ed8:	blt	1191c <__assert_fail@plt+0x464>
   11edc:	ldr	r5, [sp, #48]	; 0x30
   11ee0:	mov	r4, #0
   11ee4:	mov	r7, r4
   11ee8:	b	11a50 <__assert_fail@plt+0x598>
   11eec:	ubfx	r3, r9, #0, #12
   11ef0:	orr	r3, r3, r3, lsl #12
   11ef4:	lsr	r2, r3, #4
   11ef8:	strb	r2, [r6]
   11efc:	lsr	r2, r3, #8
   11f00:	strb	r2, [r6, #1]
   11f04:	strb	r3, [r6, #2]
   11f08:	lsr	r7, r5, #1
   11f0c:	mov	r4, #3
   11f10:	mov	r2, r4
   11f14:	mov	r1, r6
   11f18:	add	r0, r6, r4
   11f1c:	bl	11194 <memcpy@plt>
   11f20:	lsl	r4, r4, #1
   11f24:	cmp	r4, r7
   11f28:	bls	11f10 <__assert_fail@plt+0xa58>
   11f2c:	cmp	r4, r5
   11f30:	bcc	1187c <__assert_fail@plt+0x3c4>
   11f34:	tst	r9, #4096	; 0x1000
   11f38:	beq	11f64 <__assert_fail@plt+0xaac>
   11f3c:	cmp	r5, #0
   11f40:	beq	11f64 <__assert_fail@plt+0xaac>
   11f44:	mov	r3, #0
   11f48:	mvn	r1, #127	; 0x7f
   11f4c:	ldrb	r2, [r6, r3]
   11f50:	eor	r2, r2, r1
   11f54:	strb	r2, [r6, r3]
   11f58:	add	r3, r3, #512	; 0x200
   11f5c:	cmp	r3, r5
   11f60:	bcc	11f4c <__assert_fail@plt+0xa94>
   11f64:	ldrb	r3, [r6, #2]
   11f68:	str	r3, [sp, #8]
   11f6c:	ldrb	r3, [r6, #1]
   11f70:	str	r3, [sp, #4]
   11f74:	ldrb	r3, [r6]
   11f78:	str	r3, [sp]
   11f7c:	movw	r3, #40356	; 0x9da4
   11f80:	movt	r3, #1
   11f84:	mov	r2, #7
   11f88:	mov	r1, #1
   11f8c:	add	r0, sp, #2048	; 0x800
   11f90:	add	r0, r0, #8
   11f94:	bl	11344 <__sprintf_chk@plt>
   11f98:	ldr	r3, [sp, #2116]	; 0x844
   11f9c:	cmp	r3, #0
   11fa0:	moveq	r3, #0
   11fa4:	streq	r3, [sp, #76]	; 0x4c
   11fa8:	bne	118c4 <__assert_fail@plt+0x40c>
   11fac:	movw	r3, #42188	; 0xa4cc
   11fb0:	movt	r3, #1
   11fb4:	str	r3, [sp, #68]	; 0x44
   11fb8:	mov	r3, #0
   11fbc:	str	r3, [sp, #36]	; 0x24
   11fc0:	str	r3, [sp, #72]	; 0x48
   11fc4:	mov	sl, #0
   11fc8:	mov	fp, #0
   11fcc:	movw	r3, #40400	; 0x9dd0
   11fd0:	movt	r3, #1
   11fd4:	str	r3, [sp, #44]	; 0x2c
   11fd8:	str	r9, [sp, #2104]	; 0x838
   11fdc:	mov	r9, r8
   11fe0:	ldrd	r0, [sp, #24]
   11fe4:	cmp	r0, #0
   11fe8:	sbcs	r3, r1, #0
   11fec:	blt	11ed0 <__assert_fail@plt+0xa18>
   11ff0:	subs	r3, r0, sl
   11ff4:	str	r3, [sp, #56]	; 0x38
   11ff8:	sbc	r3, r1, fp
   11ffc:	str	r3, [sp, #60]	; 0x3c
   12000:	ldr	r2, [sp, #48]	; 0x30
   12004:	mov	r3, #0
   12008:	ldrd	r4, [sp, #56]	; 0x38
   1200c:	cmp	r4, r2
   12010:	sbcs	r3, r5, r3
   12014:	bge	11ed0 <__assert_fail@plt+0xa18>
   12018:	cmp	r0, sl
   1201c:	sbcs	r3, r1, fp
   12020:	blt	11c5c <__assert_fail@plt+0x7a4>
   12024:	subs	r5, r0, sl
   12028:	beq	11c5c <__assert_fail@plt+0x7a4>
   1202c:	ldr	r3, [sp, #2104]	; 0x838
   12030:	cmp	r3, #0
   12034:	bge	11ee0 <__assert_fail@plt+0xa28>
   12038:	b	11920 <__assert_fail@plt+0x468>
   1203c:	mov	r1, #1
   12040:	ldr	r0, [sp, #32]
   12044:	bl	115dc <__assert_fail@plt+0x124>
   12048:	mov	r3, #0
   1204c:	mov	r8, r3
   12050:	ldr	r3, [r4, #16]
   12054:	and	r3, r3, #61440	; 0xf000
   12058:	cmp	r3, #8192	; 0x2000
   1205c:	beq	117f4 <__assert_fail@plt+0x33c>
   12060:	mov	r3, #0
   12064:	str	r3, [sp]
   12068:	mov	r2, #0
   1206c:	mov	r3, #0
   12070:	ldr	r0, [sp, #32]
   12074:	bl	11260 <lseek64@plt>
   12078:	cmp	r0, #1
   1207c:	sbcs	r3, r1, #0
   12080:	blt	11824 <__assert_fail@plt+0x36c>
   12084:	bl	11338 <__errno_location@plt>
   12088:	mov	r3, #22
   1208c:	str	r3, [r0]
   12090:	bl	11338 <__errno_location@plt>
   12094:	ldr	r4, [r0]
   12098:	mov	r2, #5
   1209c:	movw	r1, #40336	; 0x9d90
   120a0:	movt	r1, #1
   120a4:	mov	r0, #0
   120a8:	bl	111e8 <dcgettext@plt>
   120ac:	ldr	r3, [sp, #40]	; 0x28
   120b0:	mov	r2, r0
   120b4:	mov	r1, r4
   120b8:	mov	r0, #0
   120bc:	bl	1129c <error@plt>
   120c0:	b	11af0 <__assert_fail@plt+0x638>
   120c4:	nop	{0}
   120c8:			; <UNDEFINED> instruction: 0xf5c28f5c
   120cc:	addeq	r5, pc, #40, 24	; 0x2800
   120d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   120d4:	strd	r6, [sp, #8]
   120d8:	strd	r8, [sp, #16]
   120dc:	strd	sl, [sp, #24]
   120e0:	str	lr, [sp, #32]
   120e4:	sub	sp, sp, #188	; 0xbc
   120e8:	str	r0, [sp, #36]	; 0x24
   120ec:	str	r1, [sp, #20]
   120f0:	str	r2, [sp, #40]	; 0x28
   120f4:	mov	r6, r3
   120f8:	ldrb	r3, [r3, #20]
   120fc:	cmp	r3, #0
   12100:	ldrbne	r2, [r6, #22]
   12104:	ldrne	r3, [r6, #4]
   12108:	addne	r3, r2, r3
   1210c:	moveq	r3, #0
   12110:	str	r3, [sp, #64]	; 0x40
   12114:	add	r2, sp, #80	; 0x50
   12118:	ldr	r1, [sp, #36]	; 0x24
   1211c:	mov	r0, #3
   12120:	bl	11230 <__fxstat64@plt>
   12124:	subs	r3, r0, #0
   12128:	str	r3, [sp, #44]	; 0x2c
   1212c:	bne	121f0 <__assert_fail@plt+0xd38>
   12130:	ldr	r3, [sp, #96]	; 0x60
   12134:	and	r3, r3, #61440	; 0xf000
   12138:	cmp	r3, #8192	; 0x2000
   1213c:	beq	1222c <__assert_fail@plt+0xd74>
   12140:	ldr	r3, [sp, #96]	; 0x60
   12144:	and	r3, r3, #61440	; 0xf000
   12148:	cmp	r3, #49152	; 0xc000
   1214c:	cmpne	r3, #4096	; 0x1000
   12150:	moveq	r2, #1
   12154:	movne	r2, #0
   12158:	str	r2, [sp, #32]
   1215c:	beq	1223c <__assert_fail@plt+0xd84>
   12160:	cmp	r3, #32768	; 0x8000
   12164:	bne	12178 <__assert_fail@plt+0xcc0>
   12168:	ldrd	r2, [sp, #128]	; 0x80
   1216c:	cmp	r2, #0
   12170:	sbcs	r3, r3, #0
   12174:	blt	12270 <__assert_fail@plt+0xdb8>
   12178:	mov	r1, #4
   1217c:	ldr	r0, [r6, #4]
   12180:	bl	182d0 <__assert_fail@plt+0x6e18>
   12184:	mov	r8, r0
   12188:	ldrd	r2, [r6, #8]
   1218c:	mov	r0, r2
   12190:	mov	r1, r3
   12194:	strd	r0, [sp, #48]	; 0x30
   12198:	mvn	r2, #0
   1219c:	mvn	r3, #0
   121a0:	cmp	r1, r3
   121a4:	cmpeq	r0, r2
   121a8:	beq	1229c <__assert_fail@plt+0xde4>
   121ac:	ldr	r3, [sp, #96]	; 0x60
   121b0:	and	r3, r3, #61440	; 0xf000
   121b4:	cmp	r3, #32768	; 0x8000
   121b8:	movne	r2, #0
   121bc:	movne	r3, #0
   121c0:	strdne	r2, [sp, #56]	; 0x38
   121c4:	beq	123d0 <__assert_fail@plt+0xf18>
   121c8:	ldr	r7, [r6, #4]
   121cc:	str	r7, [sp, #68]	; 0x44
   121d0:	cmp	r7, #0
   121d4:	beq	125a0 <__assert_fail@plt+0x10e8>
   121d8:	mov	sl, r8
   121dc:	movw	r5, #39736	; 0x9b38
   121e0:	movt	r5, #1
   121e4:	mov	fp, #0
   121e8:	str	r5, [sp, #24]
   121ec:	b	12470 <__assert_fail@plt+0xfb8>
   121f0:	bl	11338 <__errno_location@plt>
   121f4:	ldr	r4, [r0]
   121f8:	mov	r2, #5
   121fc:	movw	r1, #40544	; 0x9e60
   12200:	movt	r1, #1
   12204:	mov	r0, #0
   12208:	bl	111e8 <dcgettext@plt>
   1220c:	ldr	r3, [sp, #20]
   12210:	mov	r2, r0
   12214:	mov	r1, r4
   12218:	mov	r0, #0
   1221c:	bl	1129c <error@plt>
   12220:	mov	r3, #0
   12224:	str	r3, [sp, #32]
   12228:	b	12670 <__assert_fail@plt+0x11b8>
   1222c:	ldr	r0, [sp, #36]	; 0x24
   12230:	bl	1147c <isatty@plt>
   12234:	cmp	r0, #0
   12238:	beq	12140 <__assert_fail@plt+0xc88>
   1223c:	mov	r2, #5
   12240:	movw	r1, #40564	; 0x9e74
   12244:	movt	r1, #1
   12248:	mov	r0, #0
   1224c:	bl	111e8 <dcgettext@plt>
   12250:	ldr	r3, [sp, #20]
   12254:	mov	r2, r0
   12258:	mov	r1, #0
   1225c:	mov	r0, r1
   12260:	bl	1129c <error@plt>
   12264:	mov	r3, #0
   12268:	str	r3, [sp, #32]
   1226c:	b	12670 <__assert_fail@plt+0x11b8>
   12270:	mov	r2, #5
   12274:	movw	r1, #40588	; 0x9e8c
   12278:	movt	r1, #1
   1227c:	mov	r0, #0
   12280:	bl	111e8 <dcgettext@plt>
   12284:	ldr	r3, [sp, #20]
   12288:	mov	r2, r0
   1228c:	mov	r1, #0
   12290:	mov	r0, r1
   12294:	bl	1129c <error@plt>
   12298:	b	12670 <__assert_fail@plt+0x11b8>
   1229c:	ldr	r3, [sp, #96]	; 0x60
   122a0:	and	r3, r3, #61440	; 0xf000
   122a4:	cmp	r3, #32768	; 0x8000
   122a8:	bne	12388 <__assert_fail@plt+0xed0>
   122ac:	ldrd	r0, [sp, #128]	; 0x80
   122b0:	strd	r0, [sp, #48]	; 0x30
   122b4:	ldrb	r3, [r6, #21]
   122b8:	cmp	r3, #0
   122bc:	bne	12420 <__assert_fail@plt+0xf68>
   122c0:	ldr	r4, [sp, #136]	; 0x88
   122c4:	sub	r3, r4, #1
   122c8:	cmp	r3, #536870912	; 0x20000000
   122cc:	movcs	r4, #512	; 0x200
   122d0:	asr	r5, r4, #31
   122d4:	mov	r2, r4
   122d8:	mov	r3, r5
   122dc:	bl	19824 <__assert_fail@plt+0x836c>
   122e0:	mov	r0, r2
   122e4:	mov	r1, r3
   122e8:	ldrd	r2, [sp, #48]	; 0x30
   122ec:	cmp	r2, r4
   122f0:	sbcs	r3, r3, r5
   122f4:	movlt	r3, #1
   122f8:	movge	r3, #0
   122fc:	ldr	ip, [sp, #48]	; 0x30
   12300:	ldr	r2, [sp, #52]	; 0x34
   12304:	orrs	r2, ip, r2
   12308:	moveq	r3, #0
   1230c:	cmp	r3, #0
   12310:	ldrdne	r2, [sp, #48]	; 0x30
   12314:	moveq	r2, #0
   12318:	moveq	r3, #0
   1231c:	strd	r2, [sp, #56]	; 0x38
   12320:	orrs	r3, r0, r1
   12324:	beq	121c8 <__assert_fail@plt+0xd10>
   12328:	mvn	r3, #0
   1232c:	ldr	r2, [sp, #48]	; 0x30
   12330:	subs	sl, r3, r2
   12334:	mvn	r3, #-2147483648	; 0x80000000
   12338:	ldr	r2, [sp, #52]	; 0x34
   1233c:	sbc	fp, r3, r2
   12340:	subs	r3, r4, r0
   12344:	str	r3, [sp, #24]
   12348:	sbc	r3, r5, r1
   1234c:	str	r3, [sp, #28]
   12350:	mov	r3, sl
   12354:	mov	r2, fp
   12358:	ldrd	r0, [sp, #24]
   1235c:	cmp	r0, sl
   12360:	sbcs	ip, r1, fp
   12364:	movlt	r3, r0
   12368:	movlt	r2, r1
   1236c:	ldr	r1, [sp, #48]	; 0x30
   12370:	adds	r3, r1, r3
   12374:	str	r3, [sp, #48]	; 0x30
   12378:	ldr	r3, [sp, #52]	; 0x34
   1237c:	adc	r3, r3, r2
   12380:	str	r3, [sp, #52]	; 0x34
   12384:	b	121c8 <__assert_fail@plt+0xd10>
   12388:	mov	r3, #2
   1238c:	str	r3, [sp]
   12390:	mov	r2, #0
   12394:	mov	r3, #0
   12398:	ldr	r0, [sp, #36]	; 0x24
   1239c:	bl	11260 <lseek64@plt>
   123a0:	cmp	r0, #1
   123a4:	sbcs	r3, r1, #0
   123a8:	blt	123c0 <__assert_fail@plt+0xf08>
   123ac:	strd	r0, [sp, #48]	; 0x30
   123b0:	mov	r2, #0
   123b4:	mov	r3, #0
   123b8:	strd	r2, [sp, #56]	; 0x38
   123bc:	b	121c8 <__assert_fail@plt+0xd10>
   123c0:	mov	r2, #0
   123c4:	mov	r3, #0
   123c8:	strd	r2, [sp, #56]	; 0x38
   123cc:	b	121c8 <__assert_fail@plt+0xd10>
   123d0:	ldrd	r2, [sp, #128]	; 0x80
   123d4:	strd	r2, [sp, #56]	; 0x38
   123d8:	ldr	r2, [sp, #136]	; 0x88
   123dc:	sub	r3, r2, #1
   123e0:	cmp	r3, #536870912	; 0x20000000
   123e4:	movcs	r2, #512	; 0x200
   123e8:	asr	r3, r2, #31
   123ec:	ldrd	r0, [sp, #48]	; 0x30
   123f0:	cmp	r0, r2
   123f4:	sbcs	ip, r1, r3
   123f8:	movlt	r2, r0
   123fc:	movlt	r3, r1
   12400:	ldrd	r0, [sp, #56]	; 0x38
   12404:	cmp	r0, r2
   12408:	sbcs	r3, r1, r3
   1240c:	blt	121c8 <__assert_fail@plt+0xd10>
   12410:	mov	r2, #0
   12414:	mov	r3, #0
   12418:	strd	r2, [sp, #56]	; 0x38
   1241c:	b	121c8 <__assert_fail@plt+0xd10>
   12420:	mov	r2, #0
   12424:	mov	r3, #0
   12428:	strd	r2, [sp, #56]	; 0x38
   1242c:	b	121c8 <__assert_fail@plt+0xd10>
   12430:	rsb	r3, r4, #0
   12434:	cmp	r3, r7
   12438:	bcs	12448 <__assert_fail@plt+0xf90>
   1243c:	sub	fp, fp, r4
   12440:	add	r7, r7, r4
   12444:	b	12470 <__assert_fail@plt+0xfb8>
   12448:	add	fp, fp, r7
   1244c:	b	124a8 <__assert_fail@plt+0xff0>
   12450:	lsl	r9, r4, #2
   12454:	mov	r2, r9
   12458:	mov	r1, r5
   1245c:	mov	r0, sl
   12460:	bl	11194 <memcpy@plt>
   12464:	add	r5, r5, r9
   12468:	add	sl, sl, r9
   1246c:	sub	r7, r7, r4
   12470:	ldr	r4, [r5]
   12474:	cmp	r4, #0
   12478:	ldreq	r5, [sp, #24]
   1247c:	beq	12470 <__assert_fail@plt+0xfb8>
   12480:	add	r5, r5, #4
   12484:	blt	12430 <__assert_fail@plt+0xf78>
   12488:	cmp	r4, r7
   1248c:	bls	12450 <__assert_fail@plt+0xf98>
   12490:	cmp	r7, #1
   12494:	bls	124a4 <__assert_fail@plt+0xfec>
   12498:	add	r2, r7, r7, lsl #1
   1249c:	cmp	r4, r2
   124a0:	bls	124d0 <__assert_fail@plt+0x1018>
   124a4:	add	fp, fp, r7
   124a8:	ldr	r3, [sp, #68]	; 0x44
   124ac:	sub	r7, r3, fp
   124b0:	sub	fp, fp, #1
   124b4:	mov	r5, fp
   124b8:	mov	r4, #0
   124bc:	sub	sl, r3, #1
   124c0:	mvn	r9, #0
   124c4:	str	r6, [sp, #24]
   124c8:	mov	r6, r3
   124cc:	b	1257c <__assert_fail@plt+0x10c4>
   124d0:	asr	r3, r4, #31
   124d4:	subs	r1, r4, #1
   124d8:	sbc	r9, r3, #0
   124dc:	str	r8, [sp, #24]
   124e0:	mov	r8, r1
   124e4:	b	1250c <__assert_fail@plt+0x1054>
   124e8:	ldr	r3, [r5]
   124ec:	str	r3, [sl], #4
   124f0:	sub	r7, r7, #1
   124f4:	add	r5, r5, #4
   124f8:	sub	r4, r4, #1
   124fc:	subs	r8, r8, #1
   12500:	sbc	r9, r9, #0
   12504:	cmp	r7, #0
   12508:	beq	12538 <__assert_fail@plt+0x1080>
   1250c:	cmp	r7, r4
   12510:	beq	124e8 <__assert_fail@plt+0x1030>
   12514:	mov	r2, r8
   12518:	mov	r3, r9
   1251c:	ldr	r0, [sp, #40]	; 0x28
   12520:	bl	16e68 <__assert_fail@plt+0x59b0>
   12524:	mov	r3, #0
   12528:	cmp	r1, r3
   1252c:	cmpeq	r0, r7
   12530:	bcs	124f4 <__assert_fail@plt+0x103c>
   12534:	b	124e8 <__assert_fail@plt+0x1030>
   12538:	ldr	r8, [sp, #24]
   1253c:	b	124a8 <__assert_fail@plt+0xff0>
   12540:	sub	r2, r7, r4
   12544:	subs	r2, r2, #1
   12548:	mov	r3, #0
   1254c:	sbc	r3, r3, #0
   12550:	ldr	r0, [sp, #40]	; 0x28
   12554:	bl	16e68 <__assert_fail@plt+0x59b0>
   12558:	ldr	r3, [r8, r4, lsl #2]
   1255c:	add	r0, r4, r0
   12560:	ldr	r2, [r8, r0, lsl #2]
   12564:	str	r2, [r8, r4, lsl #2]
   12568:	str	r3, [r8, r0, lsl #2]
   1256c:	sub	r5, r5, fp
   12570:	add	r4, r4, #1
   12574:	cmp	r6, r4
   12578:	beq	1259c <__assert_fail@plt+0x10e4>
   1257c:	cmp	fp, r5
   12580:	bcc	12540 <__assert_fail@plt+0x1088>
   12584:	add	r5, r5, sl
   12588:	ldr	r3, [r8, r4, lsl #2]
   1258c:	str	r3, [r8, r7, lsl #2]
   12590:	str	r9, [r8, r4, lsl #2]
   12594:	add	r7, r7, #1
   12598:	b	1256c <__assert_fail@plt+0x10b4>
   1259c:	ldr	r6, [sp, #24]
   125a0:	ldr	r0, [sp, #40]	; 0x28
   125a4:	bl	16e60 <__assert_fail@plt+0x59a8>
   125a8:	mov	r7, r0
   125ac:	mov	sl, #1
   125b0:	mov	fp, #0
   125b4:	ldrd	r2, [sp, #56]	; 0x38
   125b8:	ldr	r9, [sp, #36]	; 0x24
   125bc:	b	125c8 <__assert_fail@plt+0x1110>
   125c0:	mov	r2, fp
   125c4:	mov	r3, #0
   125c8:	orrs	r1, r2, r3
   125cc:	strdne	r2, [sp, #72]	; 0x48
   125d0:	movne	r5, #0
   125d4:	bne	125f0 <__assert_fail@plt+0x1138>
   125d8:	ldrd	r0, [sp, #48]	; 0x30
   125dc:	orrs	ip, r0, r1
   125e0:	beq	12658 <__assert_fail@plt+0x11a0>
   125e4:	strd	r0, [sp, #72]	; 0x48
   125e8:	ldr	r5, [sp, #64]	; 0x40
   125ec:	strd	r2, [sp, #48]	; 0x30
   125f0:	mov	r4, #0
   125f4:	ldr	r3, [sp, #44]	; 0x2c
   125f8:	str	r3, [sp, #24]
   125fc:	ldr	r2, [r6, #4]
   12600:	ldrb	r3, [r6, #22]
   12604:	add	r3, r3, r2
   12608:	cmp	r3, r4
   1260c:	bls	125c0 <__assert_fail@plt+0x1108>
   12610:	cmp	r2, r4
   12614:	ldrhi	r3, [r8, r4, lsl #2]
   12618:	ldrls	r3, [sp, #24]
   1261c:	add	r4, r4, #1
   12620:	str	r5, [sp, #12]
   12624:	str	r4, [sp, #8]
   12628:	str	r7, [sp, #4]
   1262c:	str	r3, [sp]
   12630:	add	r3, sp, #72	; 0x48
   12634:	ldr	r2, [sp, #20]
   12638:	add	r1, sp, #80	; 0x50
   1263c:	mov	r0, r9
   12640:	bl	1171c <__assert_fail@plt+0x264>
   12644:	cmp	r0, #0
   12648:	beq	125fc <__assert_fail@plt+0x1144>
   1264c:	blt	12668 <__assert_fail@plt+0x11b0>
   12650:	ldr	sl, [sp, #32]
   12654:	b	125fc <__assert_fail@plt+0x1144>
   12658:	ldr	r3, [r6, #16]
   1265c:	cmp	r3, #0
   12660:	streq	sl, [sp, #32]
   12664:	bne	12690 <__assert_fail@plt+0x11d8>
   12668:	mov	r0, r8
   1266c:	bl	13eac <__assert_fail@plt+0x29f4>
   12670:	ldr	r0, [sp, #32]
   12674:	add	sp, sp, #188	; 0xbc
   12678:	ldrd	r4, [sp]
   1267c:	ldrd	r6, [sp, #8]
   12680:	ldrd	r8, [sp, #16]
   12684:	ldrd	sl, [sp, #24]
   12688:	add	sp, sp, #32
   1268c:	pop	{pc}		; (ldr pc, [sp], #4)
   12690:	mov	r2, #0
   12694:	mov	r3, #0
   12698:	ldr	r0, [sp, #36]	; 0x24
   1269c:	bl	111c4 <ftruncate64@plt>
   126a0:	cmp	r0, #0
   126a4:	streq	sl, [sp, #32]
   126a8:	beq	12668 <__assert_fail@plt+0x11b0>
   126ac:	ldr	r3, [sp, #96]	; 0x60
   126b0:	and	r3, r3, #61440	; 0xf000
   126b4:	cmp	r3, #32768	; 0x8000
   126b8:	strne	sl, [sp, #32]
   126bc:	bne	12668 <__assert_fail@plt+0x11b0>
   126c0:	bl	11338 <__errno_location@plt>
   126c4:	ldr	r4, [r0]
   126c8:	mov	r2, #5
   126cc:	movw	r1, #40616	; 0x9ea8
   126d0:	movt	r1, #1
   126d4:	mov	r0, #0
   126d8:	bl	111e8 <dcgettext@plt>
   126dc:	ldr	r3, [sp, #20]
   126e0:	mov	r2, r0
   126e4:	mov	r1, r4
   126e8:	mov	r0, #0
   126ec:	bl	1129c <error@plt>
   126f0:	b	12668 <__assert_fail@plt+0x11b0>
   126f4:	push	{lr}		; (str lr, [sp, #-4]!)
   126f8:	sub	sp, sp, #60	; 0x3c
   126fc:	subs	r5, r0, #0
   12700:	beq	12748 <__assert_fail@plt+0x1290>
   12704:	movw	r3, #49584	; 0xc1b0
   12708:	movt	r3, #2
   1270c:	ldr	r4, [r3]
   12710:	mov	r2, #5
   12714:	movw	r1, #40648	; 0x9ec8
   12718:	movt	r1, #1
   1271c:	mov	r0, #0
   12720:	bl	111e8 <dcgettext@plt>
   12724:	movw	r3, #49616	; 0xc1d0
   12728:	movt	r3, #2
   1272c:	ldr	r3, [r3]
   12730:	mov	r2, r0
   12734:	mov	r1, #1
   12738:	mov	r0, r4
   1273c:	bl	113a4 <__fprintf_chk@plt>
   12740:	mov	r0, r5
   12744:	bl	11308 <exit@plt>
   12748:	mov	r2, #5
   1274c:	movw	r1, #40688	; 0x9ef0
   12750:	movt	r1, #1
   12754:	mov	r0, #0
   12758:	bl	111e8 <dcgettext@plt>
   1275c:	movw	r3, #49616	; 0xc1d0
   12760:	movt	r3, #2
   12764:	ldr	r2, [r3]
   12768:	mov	r1, r0
   1276c:	mov	r0, #1
   12770:	bl	11380 <__printf_chk@plt>
   12774:	mov	r2, #5
   12778:	movw	r1, #40720	; 0x9f10
   1277c:	movt	r1, #1
   12780:	mov	r0, #0
   12784:	bl	111e8 <dcgettext@plt>
   12788:	movw	r4, #49588	; 0xc1b4
   1278c:	movt	r4, #2
   12790:	ldr	r1, [r4]
   12794:	bl	11134 <fputs_unlocked@plt>
   12798:	mov	r2, #5
   1279c:	movw	r1, #40856	; 0x9f98
   127a0:	movt	r1, #1
   127a4:	mov	r0, #0
   127a8:	bl	111e8 <dcgettext@plt>
   127ac:	ldr	r1, [r4]
   127b0:	bl	11134 <fputs_unlocked@plt>
   127b4:	mov	r2, #5
   127b8:	movw	r1, #40896	; 0x9fc0
   127bc:	movt	r1, #1
   127c0:	mov	r0, #0
   127c4:	bl	111e8 <dcgettext@plt>
   127c8:	ldr	r1, [r4]
   127cc:	bl	11134 <fputs_unlocked@plt>
   127d0:	mov	r2, #5
   127d4:	movw	r1, #40972	; 0xa00c
   127d8:	movt	r1, #1
   127dc:	mov	r0, #0
   127e0:	bl	111e8 <dcgettext@plt>
   127e4:	mov	r2, #3
   127e8:	mov	r1, r0
   127ec:	mov	r0, #1
   127f0:	bl	11380 <__printf_chk@plt>
   127f4:	mov	r2, #5
   127f8:	movw	r1, #41236	; 0xa114
   127fc:	movt	r1, #1
   12800:	mov	r0, #0
   12804:	bl	111e8 <dcgettext@plt>
   12808:	ldr	r1, [r4]
   1280c:	bl	11134 <fputs_unlocked@plt>
   12810:	mov	r2, #5
   12814:	movw	r1, #41604	; 0xa284
   12818:	movt	r1, #1
   1281c:	mov	r0, #0
   12820:	bl	111e8 <dcgettext@plt>
   12824:	ldr	r1, [r4]
   12828:	bl	11134 <fputs_unlocked@plt>
   1282c:	mov	r2, #5
   12830:	movw	r1, #41652	; 0xa2b4
   12834:	movt	r1, #1
   12838:	mov	r0, #0
   1283c:	bl	111e8 <dcgettext@plt>
   12840:	ldr	r1, [r4]
   12844:	bl	11134 <fputs_unlocked@plt>
   12848:	mov	r2, #5
   1284c:	movw	r1, #41708	; 0xa2ec
   12850:	movt	r1, #1
   12854:	mov	r0, #0
   12858:	bl	111e8 <dcgettext@plt>
   1285c:	ldr	r1, [r4]
   12860:	bl	11134 <fputs_unlocked@plt>
   12864:	mov	r2, #5
   12868:	movw	r1, #42192	; 0xa4d0
   1286c:	movt	r1, #1
   12870:	mov	r0, #0
   12874:	bl	111e8 <dcgettext@plt>
   12878:	ldr	r1, [r4]
   1287c:	bl	11134 <fputs_unlocked@plt>
   12880:	movw	r3, #39736	; 0x9b38
   12884:	movt	r3, #1
   12888:	add	r0, r3, #220	; 0xdc
   1288c:	ldr	r1, [r3, #220]	; 0xdc
   12890:	ldr	r3, [r3, #224]	; 0xe0
   12894:	str	r1, [sp]
   12898:	str	r3, [sp, #4]
   1289c:	ldrd	r2, [r0, #8]
   128a0:	strd	r2, [sp, #8]
   128a4:	ldrd	r2, [r0, #16]
   128a8:	strd	r2, [sp, #16]
   128ac:	ldrd	r2, [r0, #24]
   128b0:	strd	r2, [sp, #24]
   128b4:	ldrd	r2, [r0, #32]
   128b8:	strd	r2, [sp, #32]
   128bc:	ldrd	r2, [r0, #40]	; 0x28
   128c0:	strd	r2, [sp, #40]	; 0x28
   128c4:	ldrd	r2, [r0, #48]	; 0x30
   128c8:	strd	r2, [sp, #48]	; 0x30
   128cc:	cmp	r1, #0
   128d0:	moveq	r4, sp
   128d4:	beq	12900 <__assert_fail@plt+0x1448>
   128d8:	mov	r4, sp
   128dc:	movw	r6, #40640	; 0x9ec0
   128e0:	movt	r6, #1
   128e4:	mov	r0, r6
   128e8:	bl	11158 <strcmp@plt>
   128ec:	cmp	r0, #0
   128f0:	beq	12900 <__assert_fail@plt+0x1448>
   128f4:	ldr	r1, [r4, #8]!
   128f8:	cmp	r1, #0
   128fc:	bne	128e4 <__assert_fail@plt+0x142c>
   12900:	ldr	r4, [r4, #4]
   12904:	cmp	r4, #0
   12908:	beq	12a64 <__assert_fail@plt+0x15ac>
   1290c:	mov	r2, #5
   12910:	movw	r1, #42480	; 0xa5f0
   12914:	movt	r1, #1
   12918:	mov	r0, #0
   1291c:	bl	111e8 <dcgettext@plt>
   12920:	movw	r3, #42504	; 0xa608
   12924:	movt	r3, #1
   12928:	movw	r2, #42544	; 0xa630
   1292c:	movt	r2, #1
   12930:	mov	r1, r0
   12934:	mov	r0, #1
   12938:	bl	11380 <__printf_chk@plt>
   1293c:	mov	r1, #0
   12940:	mov	r0, #5
   12944:	bl	113e0 <setlocale@plt>
   12948:	cmp	r0, #0
   1294c:	beq	12968 <__assert_fail@plt+0x14b0>
   12950:	mov	r2, #3
   12954:	movw	r1, #42560	; 0xa640
   12958:	movt	r1, #1
   1295c:	bl	11488 <strncmp@plt>
   12960:	cmp	r0, #0
   12964:	bne	129e4 <__assert_fail@plt+0x152c>
   12968:	mov	r2, #5
   1296c:	movw	r1, #42636	; 0xa68c
   12970:	movt	r1, #1
   12974:	mov	r0, #0
   12978:	bl	111e8 <dcgettext@plt>
   1297c:	movw	r6, #40640	; 0x9ec0
   12980:	movt	r6, #1
   12984:	mov	r3, r6
   12988:	movw	r2, #42504	; 0xa608
   1298c:	movt	r2, #1
   12990:	mov	r1, r0
   12994:	mov	r0, #1
   12998:	bl	11380 <__printf_chk@plt>
   1299c:	mov	r2, #5
   129a0:	movw	r1, #42664	; 0xa6a8
   129a4:	movt	r1, #1
   129a8:	mov	r0, #0
   129ac:	bl	111e8 <dcgettext@plt>
   129b0:	mov	r1, r0
   129b4:	movw	r2, #43132	; 0xa87c
   129b8:	movt	r2, #1
   129bc:	movw	r3, #42188	; 0xa4cc
   129c0:	movt	r3, #1
   129c4:	cmp	r4, r6
   129c8:	moveq	r3, r2
   129cc:	mov	r2, r4
   129d0:	mov	r0, #1
   129d4:	bl	11380 <__printf_chk@plt>
   129d8:	b	12740 <__assert_fail@plt+0x1288>
   129dc:	movw	r4, #40640	; 0x9ec0
   129e0:	movt	r4, #1
   129e4:	mov	r2, #5
   129e8:	movw	r1, #42564	; 0xa644
   129ec:	movt	r1, #1
   129f0:	mov	r0, #0
   129f4:	bl	111e8 <dcgettext@plt>
   129f8:	movw	r3, #49588	; 0xc1b4
   129fc:	movt	r3, #2
   12a00:	ldr	r1, [r3]
   12a04:	bl	11134 <fputs_unlocked@plt>
   12a08:	b	12968 <__assert_fail@plt+0x14b0>
   12a0c:	mov	r2, #5
   12a10:	movw	r1, #42636	; 0xa68c
   12a14:	movt	r1, #1
   12a18:	mov	r0, #0
   12a1c:	bl	111e8 <dcgettext@plt>
   12a20:	movw	r4, #40640	; 0x9ec0
   12a24:	movt	r4, #1
   12a28:	mov	r3, r4
   12a2c:	movw	r2, #42504	; 0xa608
   12a30:	movt	r2, #1
   12a34:	mov	r1, r0
   12a38:	mov	r0, #1
   12a3c:	bl	11380 <__printf_chk@plt>
   12a40:	mov	r2, #5
   12a44:	movw	r1, #42664	; 0xa6a8
   12a48:	movt	r1, #1
   12a4c:	mov	r0, #0
   12a50:	bl	111e8 <dcgettext@plt>
   12a54:	mov	r1, r0
   12a58:	movw	r3, #43132	; 0xa87c
   12a5c:	movt	r3, #1
   12a60:	b	129cc <__assert_fail@plt+0x1514>
   12a64:	mov	r2, #5
   12a68:	movw	r1, #42480	; 0xa5f0
   12a6c:	movt	r1, #1
   12a70:	mov	r0, #0
   12a74:	bl	111e8 <dcgettext@plt>
   12a78:	movw	r3, #42504	; 0xa608
   12a7c:	movt	r3, #1
   12a80:	movw	r2, #42544	; 0xa630
   12a84:	movt	r2, #1
   12a88:	mov	r1, r0
   12a8c:	mov	r0, #1
   12a90:	bl	11380 <__printf_chk@plt>
   12a94:	mov	r1, #0
   12a98:	mov	r0, #5
   12a9c:	bl	113e0 <setlocale@plt>
   12aa0:	cmp	r0, #0
   12aa4:	beq	12a0c <__assert_fail@plt+0x1554>
   12aa8:	mov	r2, #3
   12aac:	movw	r1, #42560	; 0xa640
   12ab0:	movt	r1, #1
   12ab4:	bl	11488 <strncmp@plt>
   12ab8:	cmp	r0, #0
   12abc:	bne	129dc <__assert_fail@plt+0x1524>
   12ac0:	mov	r2, #5
   12ac4:	movw	r1, #42636	; 0xa68c
   12ac8:	movt	r1, #1
   12acc:	mov	r0, #0
   12ad0:	bl	111e8 <dcgettext@plt>
   12ad4:	movw	r4, #40640	; 0x9ec0
   12ad8:	movt	r4, #1
   12adc:	mov	r3, r4
   12ae0:	movw	r2, #42504	; 0xa608
   12ae4:	movt	r2, #1
   12ae8:	mov	r1, r0
   12aec:	mov	r0, #1
   12af0:	bl	11380 <__printf_chk@plt>
   12af4:	mov	r2, #5
   12af8:	movw	r1, #42664	; 0xa6a8
   12afc:	movt	r1, #1
   12b00:	mov	r0, #0
   12b04:	bl	111e8 <dcgettext@plt>
   12b08:	mov	r1, r0
   12b0c:	movw	r3, #43132	; 0xa87c
   12b10:	movt	r3, #1
   12b14:	b	129cc <__assert_fail@plt+0x1514>
   12b18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b1c:	strd	r6, [sp, #8]
   12b20:	strd	r8, [sp, #16]
   12b24:	strd	sl, [sp, #24]
   12b28:	str	lr, [sp, #32]
   12b2c:	sub	sp, sp, #108	; 0x6c
   12b30:	mov	fp, r0
   12b34:	mov	r5, r1
   12b38:	mov	r2, #0
   12b3c:	mov	r3, #0
   12b40:	strd	r2, [sp, #80]	; 0x50
   12b44:	strd	r2, [sp, #88]	; 0x58
   12b48:	strd	r2, [sp, #96]	; 0x60
   12b4c:	ldr	r0, [r1]
   12b50:	bl	14ae4 <__assert_fail@plt+0x362c>
   12b54:	movw	r1, #42188	; 0xa4cc
   12b58:	movt	r1, #1
   12b5c:	mov	r0, #6
   12b60:	bl	113e0 <setlocale@plt>
   12b64:	movw	r4, #42548	; 0xa634
   12b68:	movt	r4, #1
   12b6c:	movw	r1, #42728	; 0xa6e8
   12b70:	movt	r1, #1
   12b74:	mov	r0, r4
   12b78:	bl	11434 <bindtextdomain@plt>
   12b7c:	mov	r0, r4
   12b80:	bl	1120c <textdomain@plt>
   12b84:	movw	r0, #14816	; 0x39e0
   12b88:	movt	r0, #1
   12b8c:	bl	19b14 <__assert_fail@plt+0x865c>
   12b90:	mov	r3, #3
   12b94:	str	r3, [sp, #84]	; 0x54
   12b98:	mvn	r2, #0
   12b9c:	mvn	r3, #0
   12ba0:	strd	r2, [sp, #88]	; 0x58
   12ba4:	mov	r6, #0
   12ba8:	movw	sl, #39736	; 0x9b38
   12bac:	movt	sl, #1
   12bb0:	add	r7, sl, #304	; 0x130
   12bb4:	movw	r4, #42876	; 0xa77c
   12bb8:	movt	r4, #1
   12bbc:	movw	r8, #49592	; 0xc1b8
   12bc0:	movt	r8, #2
   12bc4:	mov	r3, #0
   12bc8:	str	r3, [sp]
   12bcc:	mov	r3, r7
   12bd0:	mov	r2, r4
   12bd4:	mov	r1, r5
   12bd8:	mov	r0, fp
   12bdc:	bl	112f0 <getopt_long@plt>
   12be0:	cmn	r0, #1
   12be4:	beq	12e14 <__assert_fail@plt+0x195c>
   12be8:	cmp	r0, #115	; 0x73
   12bec:	beq	12d98 <__assert_fail@plt+0x18e0>
   12bf0:	ble	12c1c <__assert_fail@plt+0x1764>
   12bf4:	cmp	r0, #120	; 0x78
   12bf8:	beq	12dec <__assert_fail@plt+0x1934>
   12bfc:	bgt	12cdc <__assert_fail@plt+0x1824>
   12c00:	cmp	r0, #117	; 0x75
   12c04:	beq	12d40 <__assert_fail@plt+0x1888>
   12c08:	cmp	r0, #118	; 0x76
   12c0c:	bne	12e0c <__assert_fail@plt+0x1954>
   12c10:	mov	r3, #1
   12c14:	strb	r3, [sp, #100]	; 0x64
   12c18:	b	12bc4 <__assert_fail@plt+0x170c>
   12c1c:	cmn	r0, #2
   12c20:	beq	12e04 <__assert_fail@plt+0x194c>
   12c24:	ble	12c8c <__assert_fail@plt+0x17d4>
   12c28:	cmp	r0, #102	; 0x66
   12c2c:	beq	12d10 <__assert_fail@plt+0x1858>
   12c30:	cmp	r0, #110	; 0x6e
   12c34:	bne	12e0c <__assert_fail@plt+0x1954>
   12c38:	ldr	r9, [r8]
   12c3c:	mov	r2, #5
   12c40:	movw	r1, #42752	; 0xa700
   12c44:	movt	r1, #1
   12c48:	mov	r0, #0
   12c4c:	bl	111e8 <dcgettext@plt>
   12c50:	mov	r3, #0
   12c54:	str	r3, [sp, #16]
   12c58:	str	r0, [sp, #12]
   12c5c:	movw	r3, #42188	; 0xa4cc
   12c60:	movt	r3, #1
   12c64:	str	r3, [sp, #8]
   12c68:	mvn	r2, #-1073741824	; 0xc0000000
   12c6c:	mov	r3, #0
   12c70:	strd	r2, [sp]
   12c74:	mov	r2, #0
   12c78:	mov	r3, #0
   12c7c:	mov	r0, r9
   12c80:	bl	1874c <__assert_fail@plt+0x7294>
   12c84:	str	r0, [sp, #84]	; 0x54
   12c88:	b	12bc4 <__assert_fail@plt+0x170c>
   12c8c:	cmn	r0, #3
   12c90:	bne	12e0c <__assert_fail@plt+0x1954>
   12c94:	movw	r3, #49488	; 0xc150
   12c98:	movt	r3, #2
   12c9c:	movw	r0, #49588	; 0xc1b4
   12ca0:	movt	r0, #2
   12ca4:	mov	r4, #0
   12ca8:	str	r4, [sp, #4]
   12cac:	movw	r2, #42864	; 0xa770
   12cb0:	movt	r2, #1
   12cb4:	str	r2, [sp]
   12cb8:	ldr	r3, [r3]
   12cbc:	movw	r2, #42544	; 0xa630
   12cc0:	movt	r2, #1
   12cc4:	movw	r1, #40640	; 0x9ec0
   12cc8:	movt	r1, #1
   12ccc:	ldr	r0, [r0]
   12cd0:	bl	18054 <__assert_fail@plt+0x6b9c>
   12cd4:	mov	r0, r4
   12cd8:	bl	11308 <exit@plt>
   12cdc:	cmp	r0, #122	; 0x7a
   12ce0:	beq	12df8 <__assert_fail@plt+0x1940>
   12ce4:	cmp	r0, #256	; 0x100
   12ce8:	bne	12e0c <__assert_fail@plt+0x1954>
   12cec:	cmp	r6, #0
   12cf0:	beq	12d08 <__assert_fail@plt+0x1850>
   12cf4:	ldr	r1, [r8]
   12cf8:	mov	r0, r6
   12cfc:	bl	11158 <strcmp@plt>
   12d00:	cmp	r0, #0
   12d04:	bne	12d1c <__assert_fail@plt+0x1864>
   12d08:	ldr	r6, [r8]
   12d0c:	b	12bc4 <__assert_fail@plt+0x170c>
   12d10:	mov	r3, #1
   12d14:	strb	r3, [sp, #80]	; 0x50
   12d18:	b	12bc4 <__assert_fail@plt+0x170c>
   12d1c:	mov	r2, #5
   12d20:	movw	r1, #42780	; 0xa71c
   12d24:	movt	r1, #1
   12d28:	mov	r0, #0
   12d2c:	bl	111e8 <dcgettext@plt>
   12d30:	mov	r2, r0
   12d34:	mov	r1, #0
   12d38:	mov	r0, #1
   12d3c:	bl	1129c <error@plt>
   12d40:	ldr	r1, [r8]
   12d44:	cmp	r1, #0
   12d48:	moveq	r3, #3
   12d4c:	streq	r3, [sp, #96]	; 0x60
   12d50:	beq	12bc4 <__assert_fail@plt+0x170c>
   12d54:	mov	r3, #1
   12d58:	str	r3, [sp, #8]
   12d5c:	movw	r3, #49492	; 0xc154
   12d60:	movt	r3, #2
   12d64:	ldr	r3, [r3]
   12d68:	str	r3, [sp, #4]
   12d6c:	mov	r3, #4
   12d70:	str	r3, [sp]
   12d74:	add	r3, sl, #276	; 0x114
   12d78:	add	r2, sl, #288	; 0x120
   12d7c:	movw	r0, #42816	; 0xa740
   12d80:	movt	r0, #1
   12d84:	bl	137f4 <__assert_fail@plt+0x233c>
   12d88:	add	r0, sl, r0, lsl #2
   12d8c:	ldr	r3, [r0, #276]	; 0x114
   12d90:	str	r3, [sp, #96]	; 0x60
   12d94:	b	12bc4 <__assert_fail@plt+0x170c>
   12d98:	ldr	r9, [r8]
   12d9c:	mov	r2, #5
   12da0:	movw	r1, #42828	; 0xa74c
   12da4:	movt	r1, #1
   12da8:	mov	r0, #0
   12dac:	bl	111e8 <dcgettext@plt>
   12db0:	mov	r1, #0
   12db4:	str	r1, [sp, #16]
   12db8:	str	r0, [sp, #12]
   12dbc:	movw	r3, #42848	; 0xa760
   12dc0:	movt	r3, #1
   12dc4:	str	r3, [sp, #8]
   12dc8:	mvn	r2, #0
   12dcc:	mvn	r3, #-2147483648	; 0x80000000
   12dd0:	strd	r2, [sp]
   12dd4:	mov	r2, #0
   12dd8:	mov	r3, #0
   12ddc:	mov	r0, r9
   12de0:	bl	18628 <__assert_fail@plt+0x7170>
   12de4:	strd	r0, [sp, #88]	; 0x58
   12de8:	b	12bc4 <__assert_fail@plt+0x170c>
   12dec:	mov	r3, #1
   12df0:	strb	r3, [sp, #101]	; 0x65
   12df4:	b	12bc4 <__assert_fail@plt+0x170c>
   12df8:	mov	r3, #1
   12dfc:	strb	r3, [sp, #102]	; 0x66
   12e00:	b	12bc4 <__assert_fail@plt+0x170c>
   12e04:	mov	r0, #0
   12e08:	bl	126f4 <__assert_fail@plt+0x123c>
   12e0c:	mov	r0, #1
   12e10:	bl	126f4 <__assert_fail@plt+0x123c>
   12e14:	mov	r9, r0
   12e18:	movw	r3, #49576	; 0xc1a8
   12e1c:	movt	r3, #2
   12e20:	ldr	sl, [r3]
   12e24:	subs	r3, fp, sl
   12e28:	str	r3, [sp, #32]
   12e2c:	beq	12e80 <__assert_fail@plt+0x19c8>
   12e30:	mvn	r1, #0
   12e34:	mov	r0, r6
   12e38:	bl	16e3c <__assert_fail@plt+0x5984>
   12e3c:	movw	r3, #49600	; 0xc1c0
   12e40:	movt	r3, #2
   12e44:	str	r0, [r3]
   12e48:	cmp	r0, #0
   12e4c:	beq	12eac <__assert_fail@plt+0x19f4>
   12e50:	movw	r0, #5560	; 0x15b8
   12e54:	movt	r0, #1
   12e58:	bl	19b14 <__assert_fail@plt+0x865c>
   12e5c:	ldr	r3, [sp, #32]
   12e60:	cmp	r3, #0
   12e64:	ble	13408 <__assert_fail@plt+0x1f50>
   12e68:	add	sl, r5, sl, lsl #2
   12e6c:	mov	fp, #0
   12e70:	mov	r8, #1
   12e74:	str	r9, [sp, #52]	; 0x34
   12e78:	mov	r9, r8
   12e7c:	b	12f68 <__assert_fail@plt+0x1ab0>
   12e80:	mov	r2, #5
   12e84:	movw	r1, #42888	; 0xa788
   12e88:	movt	r1, #1
   12e8c:	mov	r0, #0
   12e90:	bl	111e8 <dcgettext@plt>
   12e94:	mov	r2, r0
   12e98:	mov	r1, #0
   12e9c:	mov	r0, r1
   12ea0:	bl	1129c <error@plt>
   12ea4:	mov	r0, #1
   12ea8:	bl	126f4 <__assert_fail@plt+0x123c>
   12eac:	bl	11338 <__errno_location@plt>
   12eb0:	ldr	r4, [r0]
   12eb4:	movw	r2, #42716	; 0xa6dc
   12eb8:	movt	r2, #1
   12ebc:	cmp	r6, #0
   12ec0:	movne	r2, r6
   12ec4:	mov	r1, #3
   12ec8:	mov	r0, #0
   12ecc:	bl	16c14 <__assert_fail@plt+0x575c>
   12ed0:	mov	r3, r0
   12ed4:	movw	r2, #43484	; 0xa9dc
   12ed8:	movt	r2, #1
   12edc:	mov	r1, r4
   12ee0:	mov	r0, #1
   12ee4:	bl	1129c <error@plt>
   12ee8:	bl	11338 <__errno_location@plt>
   12eec:	ldr	r4, [r0]
   12ef0:	mov	r2, #5
   12ef4:	movw	r1, #42916	; 0xa7a4
   12ef8:	movt	r1, #1
   12efc:	mov	r0, #0
   12f00:	bl	111e8 <dcgettext@plt>
   12f04:	ldr	r3, [sp, #24]
   12f08:	mov	r2, r0
   12f0c:	mov	r1, r4
   12f10:	mov	r0, #0
   12f14:	bl	1129c <error@plt>
   12f18:	mov	r0, #0
   12f1c:	b	12f4c <__assert_fail@plt+0x1a94>
   12f20:	mov	r2, #5
   12f24:	movw	r1, #42936	; 0xa7b8
   12f28:	movt	r1, #1
   12f2c:	mov	r0, #0
   12f30:	bl	111e8 <dcgettext@plt>
   12f34:	ldr	r3, [sp, #24]
   12f38:	mov	r2, r0
   12f3c:	mov	r1, #0
   12f40:	mov	r0, r1
   12f44:	bl	1129c <error@plt>
   12f48:	mov	r0, #0
   12f4c:	and	r9, r9, r0
   12f50:	ldr	r0, [sp, #24]
   12f54:	bl	13eac <__assert_fail@plt+0x29f4>
   12f58:	add	fp, fp, #1
   12f5c:	ldr	r3, [sp, #32]
   12f60:	cmp	r3, fp
   12f64:	beq	133e4 <__assert_fail@plt+0x1f2c>
   12f68:	ldr	r2, [sl]
   12f6c:	mov	r1, #3
   12f70:	mov	r0, #0
   12f74:	bl	16c14 <__assert_fail@plt+0x575c>
   12f78:	bl	185bc <__assert_fail@plt+0x7104>
   12f7c:	str	r0, [sp, #24]
   12f80:	ldr	r8, [sl], #4
   12f84:	movw	r1, #42912	; 0xa7a0
   12f88:	movt	r1, #1
   12f8c:	mov	r0, r8
   12f90:	bl	11158 <strcmp@plt>
   12f94:	cmp	r0, #0
   12f98:	bne	12fdc <__assert_fail@plt+0x1b24>
   12f9c:	movw	r3, #49600	; 0xc1c0
   12fa0:	movt	r3, #2
   12fa4:	ldr	r4, [r3]
   12fa8:	mov	r1, #3
   12fac:	mov	r0, #1
   12fb0:	bl	13c04 <__assert_fail@plt+0x274c>
   12fb4:	cmp	r0, #0
   12fb8:	blt	12ee8 <__assert_fail@plt+0x1a30>
   12fbc:	tst	r0, #1024	; 0x400
   12fc0:	bne	12f20 <__assert_fail@plt+0x1a68>
   12fc4:	add	r3, sp, #80	; 0x50
   12fc8:	mov	r2, r4
   12fcc:	ldr	r1, [sp, #24]
   12fd0:	mov	r0, #1
   12fd4:	bl	120d0 <__assert_fail@plt+0xc18>
   12fd8:	b	12f4c <__assert_fail@plt+0x1a94>
   12fdc:	movw	r3, #49600	; 0xc1c0
   12fe0:	movt	r3, #2
   12fe4:	ldr	r5, [r3]
   12fe8:	movw	r1, #257	; 0x101
   12fec:	mov	r0, r8
   12ff0:	bl	13e70 <__assert_fail@plt+0x29b8>
   12ff4:	subs	r4, r0, #0
   12ff8:	blt	130d8 <__assert_fail@plt+0x1c20>
   12ffc:	add	r3, sp, #80	; 0x50
   13000:	mov	r2, r5
   13004:	ldr	r1, [sp, #24]
   13008:	mov	r0, r4
   1300c:	bl	120d0 <__assert_fail@plt+0xc18>
   13010:	str	r0, [sp, #28]
   13014:	mov	r0, r4
   13018:	bl	114ac <close@plt>
   1301c:	cmp	r0, #0
   13020:	bne	13164 <__assert_fail@plt+0x1cac>
   13024:	ldr	r3, [sp, #28]
   13028:	cmp	r3, #0
   1302c:	beq	13120 <__assert_fail@plt+0x1c68>
   13030:	ldr	r3, [sp, #96]	; 0x60
   13034:	cmp	r3, #0
   13038:	beq	13120 <__assert_fail@plt+0x1c68>
   1303c:	mov	r0, r8
   13040:	bl	185bc <__assert_fail@plt+0x7104>
   13044:	mov	r4, r0
   13048:	str	r0, [sp, #40]	; 0x28
   1304c:	bl	138fc <__assert_fail@plt+0x2444>
   13050:	str	r0, [sp, #36]	; 0x24
   13054:	mov	r0, r4
   13058:	bl	13af0 <__assert_fail@plt+0x2638>
   1305c:	mov	r2, r0
   13060:	str	r0, [sp, #64]	; 0x40
   13064:	mov	r1, #3
   13068:	mov	r0, #0
   1306c:	bl	16c14 <__assert_fail@plt+0x575c>
   13070:	bl	185bc <__assert_fail@plt+0x7104>
   13074:	str	r0, [sp, #56]	; 0x38
   13078:	ldr	r3, [sp, #96]	; 0x60
   1307c:	cmp	r3, #3
   13080:	ldrne	r3, [sp, #52]	; 0x34
   13084:	strne	r3, [sp, #48]	; 0x30
   13088:	beq	131a0 <__assert_fail@plt+0x1ce8>
   1308c:	ldrb	r3, [sp, #100]	; 0x64
   13090:	cmp	r3, #0
   13094:	bne	131b4 <__assert_fail@plt+0x1cfc>
   13098:	ldr	r3, [sp, #96]	; 0x60
   1309c:	cmp	r3, #1
   130a0:	beq	132d0 <__assert_fail@plt+0x1e18>
   130a4:	ldr	r4, [sp, #36]	; 0x24
   130a8:	mov	r0, r4
   130ac:	bl	13964 <__assert_fail@plt+0x24ac>
   130b0:	add	r3, r4, r0
   130b4:	ldr	r1, [sp, #28]
   130b8:	str	r1, [sp, #60]	; 0x3c
   130bc:	str	r8, [sp, #44]	; 0x2c
   130c0:	str	r9, [sp, #68]	; 0x44
   130c4:	str	fp, [sp, #72]	; 0x48
   130c8:	mov	r9, r0
   130cc:	str	sl, [sp, #76]	; 0x4c
   130d0:	mov	sl, r3
   130d4:	b	13218 <__assert_fail@plt+0x1d60>
   130d8:	bl	11338 <__errno_location@plt>
   130dc:	mov	r6, r0
   130e0:	ldr	r3, [r0]
   130e4:	cmp	r3, #13
   130e8:	beq	1312c <__assert_fail@plt+0x1c74>
   130ec:	ldr	r4, [r6]
   130f0:	mov	r2, #5
   130f4:	movw	r1, #42984	; 0xa7e8
   130f8:	movt	r1, #1
   130fc:	mov	r0, #0
   13100:	bl	111e8 <dcgettext@plt>
   13104:	ldr	r3, [sp, #24]
   13108:	mov	r2, r0
   1310c:	mov	r1, r4
   13110:	mov	r0, #0
   13114:	bl	1129c <error@plt>
   13118:	mov	r3, #0
   1311c:	str	r3, [sp, #28]
   13120:	ldr	r3, [sp, #28]
   13124:	and	r9, r9, r3
   13128:	b	12f50 <__assert_fail@plt+0x1a98>
   1312c:	ldrb	r3, [sp, #80]	; 0x50
   13130:	cmp	r3, #0
   13134:	beq	130ec <__assert_fail@plt+0x1c34>
   13138:	mov	r1, #128	; 0x80
   1313c:	mov	r0, r8
   13140:	bl	11470 <chmod@plt>
   13144:	cmp	r0, #0
   13148:	bne	130ec <__assert_fail@plt+0x1c34>
   1314c:	movw	r1, #257	; 0x101
   13150:	mov	r0, r8
   13154:	bl	13e70 <__assert_fail@plt+0x29b8>
   13158:	subs	r4, r0, #0
   1315c:	bge	12ffc <__assert_fail@plt+0x1b44>
   13160:	b	130ec <__assert_fail@plt+0x1c34>
   13164:	bl	11338 <__errno_location@plt>
   13168:	ldr	r4, [r0]
   1316c:	mov	r2, #5
   13170:	movw	r1, #43016	; 0xa808
   13174:	movt	r1, #1
   13178:	mov	r0, #0
   1317c:	bl	111e8 <dcgettext@plt>
   13180:	ldr	r3, [sp, #24]
   13184:	mov	r2, r0
   13188:	mov	r1, r4
   1318c:	mov	r0, #0
   13190:	bl	1129c <error@plt>
   13194:	mov	r3, #0
   13198:	str	r3, [sp, #28]
   1319c:	b	13120 <__assert_fail@plt+0x1c68>
   131a0:	mov	r1, #18688	; 0x4900
   131a4:	ldr	r0, [sp, #64]	; 0x40
   131a8:	bl	13e70 <__assert_fail@plt+0x29b8>
   131ac:	str	r0, [sp, #48]	; 0x30
   131b0:	b	1308c <__assert_fail@plt+0x1bd4>
   131b4:	mov	r2, #5
   131b8:	movw	r1, #43036	; 0xa81c
   131bc:	movt	r1, #1
   131c0:	mov	r0, #0
   131c4:	bl	111e8 <dcgettext@plt>
   131c8:	ldr	r3, [sp, #24]
   131cc:	mov	r2, r0
   131d0:	mov	r1, #0
   131d4:	mov	r0, r1
   131d8:	bl	1129c <error@plt>
   131dc:	b	13098 <__assert_fail@plt+0x1be0>
   131e0:	mov	r5, r4
   131e4:	mov	r4, r5
   131e8:	ldrb	r1, [r4], #-1
   131ec:	ldr	r0, [pc, #672]	; 13494 <__assert_fail@plt+0x1fdc>
   131f0:	bl	11320 <strchr@plt>
   131f4:	cmp	r0, #0
   131f8:	beq	1327c <__assert_fail@plt+0x1dc4>
   131fc:	ldrb	r3, [r0, #1]
   13200:	cmp	r3, #0
   13204:	bne	13298 <__assert_fail@plt+0x1de0>
   13208:	strb	r6, [r4, #1]
   1320c:	cmp	r5, r7
   13210:	bne	131e0 <__assert_fail@plt+0x1d28>
   13214:	sub	r9, r9, #1
   13218:	cmp	r9, #0
   1321c:	beq	132c0 <__assert_fail@plt+0x1e08>
   13220:	mov	r2, r9
   13224:	mov	r1, #48	; 0x30
   13228:	ldr	r0, [sp, #36]	; 0x24
   1322c:	bl	11368 <memset@plt>
   13230:	mov	r3, #0
   13234:	strb	r3, [sl], #-1
   13238:	mov	fp, #1
   1323c:	str	fp, [sp]
   13240:	ldr	r3, [sp, #40]	; 0x28
   13244:	mvn	r2, #99	; 0x63
   13248:	ldr	r1, [sp, #44]	; 0x2c
   1324c:	mov	r0, r2
   13250:	bl	178c0 <__assert_fail@plt+0x6408>
   13254:	cmp	r0, #0
   13258:	beq	13410 <__assert_fail@plt+0x1f58>
   1325c:	bl	11338 <__errno_location@plt>
   13260:	ldr	r3, [r0]
   13264:	cmp	r3, #17
   13268:	bne	13214 <__assert_fail@plt+0x1d5c>
   1326c:	ldr	r7, [sp, #36]	; 0x24
   13270:	mov	r5, sl
   13274:	mov	r6, #48	; 0x30
   13278:	b	131e4 <__assert_fail@plt+0x1d2c>
   1327c:	ldr	r3, [pc, #532]	; 13498 <__assert_fail@plt+0x1fe0>
   13280:	mov	r2, #1000	; 0x3e8
   13284:	movw	r1, #43052	; 0xa82c
   13288:	movt	r1, #1
   1328c:	movw	r0, #43064	; 0xa838
   13290:	movt	r0, #1
   13294:	bl	114b8 <__assert_fail@plt>
   13298:	strb	r3, [r5]
   1329c:	b	1323c <__assert_fail@plt+0x1d84>
   132a0:	ldr	r1, [sp, #56]	; 0x38
   132a4:	ldr	r0, [sp, #48]	; 0x30
   132a8:	bl	11634 <__assert_fail@plt+0x17c>
   132ac:	cmp	r0, #0
   132b0:	ldr	r3, [sp, #28]
   132b4:	movne	r3, #0
   132b8:	str	r3, [sp, #28]
   132bc:	b	1341c <__assert_fail@plt+0x1f64>
   132c0:	ldr	r8, [sp, #44]	; 0x2c
   132c4:	ldr	r9, [sp, #68]	; 0x44
   132c8:	ldr	fp, [sp, #72]	; 0x48
   132cc:	ldr	sl, [sp, #76]	; 0x4c
   132d0:	mov	r0, r8
   132d4:	bl	111f4 <unlink@plt>
   132d8:	cmp	r0, #0
   132dc:	bne	13314 <__assert_fail@plt+0x1e5c>
   132e0:	ldrb	r3, [sp, #100]	; 0x64
   132e4:	cmp	r3, #0
   132e8:	bne	13350 <__assert_fail@plt+0x1e98>
   132ec:	ldr	r4, [sp, #48]	; 0x30
   132f0:	cmp	r4, #0
   132f4:	bge	1337c <__assert_fail@plt+0x1ec4>
   132f8:	ldr	r0, [sp, #40]	; 0x28
   132fc:	bl	13eac <__assert_fail@plt+0x29f4>
   13300:	ldr	r0, [sp, #64]	; 0x40
   13304:	bl	13eac <__assert_fail@plt+0x29f4>
   13308:	ldr	r0, [sp, #56]	; 0x38
   1330c:	bl	13eac <__assert_fail@plt+0x29f4>
   13310:	b	13120 <__assert_fail@plt+0x1c68>
   13314:	bl	11338 <__errno_location@plt>
   13318:	ldr	r4, [r0]
   1331c:	mov	r2, #5
   13320:	movw	r1, #43088	; 0xa850
   13324:	movt	r1, #1
   13328:	mov	r0, #0
   1332c:	bl	111e8 <dcgettext@plt>
   13330:	ldr	r3, [sp, #24]
   13334:	mov	r2, r0
   13338:	mov	r1, r4
   1333c:	mov	r0, #0
   13340:	bl	1129c <error@plt>
   13344:	mov	r3, #0
   13348:	str	r3, [sp, #28]
   1334c:	b	132ec <__assert_fail@plt+0x1e34>
   13350:	mov	r2, #5
   13354:	movw	r1, #43112	; 0xa868
   13358:	movt	r1, #1
   1335c:	mov	r0, #0
   13360:	bl	111e8 <dcgettext@plt>
   13364:	ldr	r3, [sp, #24]
   13368:	mov	r2, r0
   1336c:	mov	r1, #0
   13370:	mov	r0, r1
   13374:	bl	1129c <error@plt>
   13378:	b	132ec <__assert_fail@plt+0x1e34>
   1337c:	ldr	r1, [sp, #56]	; 0x38
   13380:	mov	r0, r4
   13384:	bl	11634 <__assert_fail@plt+0x17c>
   13388:	cmp	r0, #0
   1338c:	ldr	r3, [sp, #28]
   13390:	movne	r3, #0
   13394:	str	r3, [sp, #28]
   13398:	mov	r0, r4
   1339c:	bl	114ac <close@plt>
   133a0:	cmp	r0, #0
   133a4:	beq	132f8 <__assert_fail@plt+0x1e40>
   133a8:	bl	11338 <__errno_location@plt>
   133ac:	ldr	r4, [r0]
   133b0:	mov	r2, #5
   133b4:	movw	r1, #43016	; 0xa808
   133b8:	movt	r1, #1
   133bc:	mov	r0, #0
   133c0:	bl	111e8 <dcgettext@plt>
   133c4:	ldr	r3, [sp, #56]	; 0x38
   133c8:	mov	r2, r0
   133cc:	mov	r1, r4
   133d0:	mov	r0, #0
   133d4:	bl	1129c <error@plt>
   133d8:	mov	r3, #0
   133dc:	str	r3, [sp, #28]
   133e0:	b	132f8 <__assert_fail@plt+0x1e40>
   133e4:	mov	r8, r9
   133e8:	eor	r0, r8, #1
   133ec:	add	sp, sp, #108	; 0x6c
   133f0:	ldrd	r4, [sp]
   133f4:	ldrd	r6, [sp, #8]
   133f8:	ldrd	r8, [sp, #16]
   133fc:	ldrd	sl, [sp, #24]
   13400:	add	sp, sp, #32
   13404:	pop	{pc}		; (ldr pc, [sp], #4)
   13408:	mov	r8, #1
   1340c:	b	133e8 <__assert_fail@plt+0x1f30>
   13410:	ldr	r3, [sp, #48]	; 0x30
   13414:	cmp	r3, #0
   13418:	bge	132a0 <__assert_fail@plt+0x1de8>
   1341c:	ldrb	r3, [sp, #100]	; 0x64
   13420:	cmp	r3, #0
   13424:	beq	13474 <__assert_fail@plt+0x1fbc>
   13428:	ldr	r4, [sp, #24]
   1342c:	ldr	r3, [sp, #44]	; 0x2c
   13430:	ldr	r2, [sp, #60]	; 0x3c
   13434:	cmp	r2, #0
   13438:	moveq	r4, r3
   1343c:	mov	r2, #5
   13440:	movw	r1, #43068	; 0xa83c
   13444:	movt	r1, #1
   13448:	mov	r0, #0
   1344c:	bl	111e8 <dcgettext@plt>
   13450:	ldr	r3, [sp, #40]	; 0x28
   13454:	str	r3, [sp]
   13458:	mov	r3, r4
   1345c:	mov	r2, r0
   13460:	mov	r1, #0
   13464:	mov	r0, r1
   13468:	bl	1129c <error@plt>
   1346c:	mov	r3, #0
   13470:	str	r3, [sp, #60]	; 0x3c
   13474:	ldr	r1, [sp, #36]	; 0x24
   13478:	ldr	r3, [sp, #40]	; 0x28
   1347c:	sub	r0, r1, r3
   13480:	add	r2, r9, #1
   13484:	ldr	r3, [sp, #44]	; 0x2c
   13488:	add	r0, r3, r0
   1348c:	bl	11194 <memcpy@plt>
   13490:	b	13214 <__assert_fail@plt+0x1d5c>
   13494:	andeq	r9, r1, r8, lsl sp
   13498:	andeq	r9, r1, ip, asr sp
   1349c:	str	r4, [sp, #-8]!
   134a0:	str	lr, [sp, #4]
   134a4:	mov	r0, #1
   134a8:	bl	126f4 <__assert_fail@plt+0x123c>
   134ac:	ldr	r4, [sp]
   134b0:	add	sp, sp, #4
   134b4:	pop	{pc}		; (ldr pc, [sp], #4)
   134b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134bc:	strd	r6, [sp, #8]
   134c0:	strd	r8, [sp, #16]
   134c4:	strd	sl, [sp, #24]
   134c8:	str	lr, [sp, #32]
   134cc:	sub	sp, sp, #12
   134d0:	str	r0, [sp]
   134d4:	mov	r5, r1
   134d8:	mov	r6, r2
   134dc:	str	r2, [sp, #4]
   134e0:	mov	r9, r3
   134e4:	bl	11314 <strlen@plt>
   134e8:	ldr	r4, [r5]
   134ec:	cmp	r4, #0
   134f0:	beq	135ac <__assert_fail@plt+0x20f4>
   134f4:	mov	r8, r0
   134f8:	mov	fp, #0
   134fc:	mvn	sl, #0
   13500:	mov	r7, fp
   13504:	b	13524 <__assert_fail@plt+0x206c>
   13508:	mov	sl, r7
   1350c:	b	1358c <__assert_fail@plt+0x20d4>
   13510:	add	r7, r7, #1
   13514:	ldr	r4, [r5, #4]!
   13518:	add	r6, r6, r9
   1351c:	cmp	r4, #0
   13520:	beq	13584 <__assert_fail@plt+0x20cc>
   13524:	mov	r2, r8
   13528:	ldr	r1, [sp]
   1352c:	mov	r0, r4
   13530:	bl	11488 <strncmp@plt>
   13534:	cmp	r0, #0
   13538:	bne	13510 <__assert_fail@plt+0x2058>
   1353c:	mov	r0, r4
   13540:	bl	11314 <strlen@plt>
   13544:	cmp	r0, r8
   13548:	beq	13508 <__assert_fail@plt+0x2050>
   1354c:	cmn	sl, #1
   13550:	moveq	sl, r7
   13554:	beq	13510 <__assert_fail@plt+0x2058>
   13558:	ldr	r3, [sp, #4]
   1355c:	cmp	r3, #0
   13560:	moveq	fp, #1
   13564:	beq	13510 <__assert_fail@plt+0x2058>
   13568:	mov	r2, r9
   1356c:	mov	r1, r6
   13570:	mla	r0, r9, sl, r3
   13574:	bl	111d0 <memcmp@plt>
   13578:	cmp	r0, #0
   1357c:	movne	fp, #1
   13580:	b	13510 <__assert_fail@plt+0x2058>
   13584:	cmp	fp, #0
   13588:	mvnne	sl, #1
   1358c:	mov	r0, sl
   13590:	add	sp, sp, #12
   13594:	ldrd	r4, [sp]
   13598:	ldrd	r6, [sp, #8]
   1359c:	ldrd	r8, [sp, #16]
   135a0:	ldrd	sl, [sp, #24]
   135a4:	add	sp, sp, #32
   135a8:	pop	{pc}		; (ldr pc, [sp], #4)
   135ac:	mvn	sl, #0
   135b0:	b	1358c <__assert_fail@plt+0x20d4>
   135b4:	strd	r4, [sp, #-16]!
   135b8:	str	r6, [sp, #8]
   135bc:	str	lr, [sp, #12]
   135c0:	mov	r6, r0
   135c4:	ldr	r0, [r1]
   135c8:	cmp	r0, #0
   135cc:	beq	13614 <__assert_fail@plt+0x215c>
   135d0:	mov	r4, r1
   135d4:	mov	r5, #0
   135d8:	mov	r1, r6
   135dc:	bl	11158 <strcmp@plt>
   135e0:	cmp	r0, #0
   135e4:	beq	13600 <__assert_fail@plt+0x2148>
   135e8:	add	r5, r5, #1
   135ec:	ldr	r0, [r4, #4]!
   135f0:	cmp	r0, #0
   135f4:	bne	135d8 <__assert_fail@plt+0x2120>
   135f8:	mvn	r0, #0
   135fc:	b	13604 <__assert_fail@plt+0x214c>
   13600:	mov	r0, r5
   13604:	ldrd	r4, [sp]
   13608:	ldr	r6, [sp, #8]
   1360c:	add	sp, sp, #12
   13610:	pop	{pc}		; (ldr pc, [sp], #4)
   13614:	mvn	r0, #0
   13618:	b	13604 <__assert_fail@plt+0x214c>
   1361c:	strd	r4, [sp, #-16]!
   13620:	str	r6, [sp, #8]
   13624:	str	lr, [sp, #12]
   13628:	sub	sp, sp, #8
   1362c:	mov	r6, r0
   13630:	mov	r5, r1
   13634:	cmn	r2, #1
   13638:	mov	r2, #5
   1363c:	movweq	r1, #43368	; 0xa968
   13640:	movteq	r1, #1
   13644:	movwne	r1, #43396	; 0xa984
   13648:	movtne	r1, #1
   1364c:	mov	r0, #0
   13650:	bl	111e8 <dcgettext@plt>
   13654:	mov	r4, r0
   13658:	mov	r2, r5
   1365c:	mov	r1, #8
   13660:	mov	r0, #0
   13664:	bl	16a64 <__assert_fail@plt+0x55ac>
   13668:	mov	r5, r0
   1366c:	mov	r1, r6
   13670:	mov	r0, #1
   13674:	bl	16dc4 <__assert_fail@plt+0x590c>
   13678:	str	r0, [sp]
   1367c:	mov	r3, r5
   13680:	mov	r2, r4
   13684:	mov	r1, #0
   13688:	mov	r0, r1
   1368c:	bl	1129c <error@plt>
   13690:	add	sp, sp, #8
   13694:	ldrd	r4, [sp]
   13698:	ldr	r6, [sp, #8]
   1369c:	add	sp, sp, #12
   136a0:	pop	{pc}		; (ldr pc, [sp], #4)
   136a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   136a8:	strd	r6, [sp, #8]
   136ac:	strd	r8, [sp, #16]
   136b0:	strd	sl, [sp, #24]
   136b4:	str	lr, [sp, #32]
   136b8:	sub	sp, sp, #12
   136bc:	mov	r7, r0
   136c0:	mov	r4, r1
   136c4:	mov	r8, r2
   136c8:	mov	r2, #5
   136cc:	movw	r1, #43428	; 0xa9a4
   136d0:	movt	r1, #1
   136d4:	mov	r0, #0
   136d8:	bl	111e8 <dcgettext@plt>
   136dc:	movw	r3, #49584	; 0xc1b0
   136e0:	movt	r3, #2
   136e4:	ldr	r1, [r3]
   136e8:	bl	11134 <fputs_unlocked@plt>
   136ec:	ldr	r5, [r7]
   136f0:	cmp	r5, #0
   136f4:	beq	137a0 <__assert_fail@plt+0x22e8>
   136f8:	mov	r3, #0
   136fc:	str	r3, [sp]
   13700:	mov	r6, r3
   13704:	movw	sl, #49584	; 0xc1b0
   13708:	movt	sl, #2
   1370c:	movw	fp, #43452	; 0xa9bc
   13710:	movt	fp, #1
   13714:	movw	r3, #43460	; 0xa9c4
   13718:	movt	r3, #1
   1371c:	str	r3, [sp, #4]
   13720:	b	1375c <__assert_fail@plt+0x22a4>
   13724:	ldr	r9, [sl]
   13728:	mov	r0, r5
   1372c:	bl	16de0 <__assert_fail@plt+0x5928>
   13730:	mov	r3, r0
   13734:	mov	r2, fp
   13738:	mov	r1, #1
   1373c:	mov	r0, r9
   13740:	bl	113a4 <__fprintf_chk@plt>
   13744:	str	r4, [sp]
   13748:	add	r6, r6, #1
   1374c:	ldr	r5, [r7, #4]!
   13750:	add	r4, r4, r8
   13754:	cmp	r5, #0
   13758:	beq	137a0 <__assert_fail@plt+0x22e8>
   1375c:	cmp	r6, #0
   13760:	beq	13724 <__assert_fail@plt+0x226c>
   13764:	mov	r2, r8
   13768:	mov	r1, r4
   1376c:	ldr	r0, [sp]
   13770:	bl	111d0 <memcmp@plt>
   13774:	cmp	r0, #0
   13778:	bne	13724 <__assert_fail@plt+0x226c>
   1377c:	ldr	r9, [sl]
   13780:	mov	r0, r5
   13784:	bl	16de0 <__assert_fail@plt+0x5928>
   13788:	mov	r3, r0
   1378c:	ldr	r2, [sp, #4]
   13790:	mov	r1, #1
   13794:	mov	r0, r9
   13798:	bl	113a4 <__fprintf_chk@plt>
   1379c:	b	13748 <__assert_fail@plt+0x2290>
   137a0:	movw	r3, #49584	; 0xc1b0
   137a4:	movt	r3, #2
   137a8:	ldr	r0, [r3]
   137ac:	ldr	r3, [r0, #20]
   137b0:	ldr	r2, [r0, #24]
   137b4:	cmp	r3, r2
   137b8:	addcc	r2, r3, #1
   137bc:	strcc	r2, [r0, #20]
   137c0:	movcc	r2, #10
   137c4:	strbcc	r2, [r3]
   137c8:	bcs	137e8 <__assert_fail@plt+0x2330>
   137cc:	add	sp, sp, #12
   137d0:	ldrd	r4, [sp]
   137d4:	ldrd	r6, [sp, #8]
   137d8:	ldrd	r8, [sp, #16]
   137dc:	ldrd	sl, [sp, #24]
   137e0:	add	sp, sp, #32
   137e4:	pop	{pc}		; (ldr pc, [sp], #4)
   137e8:	mov	r1, #10
   137ec:	bl	113d4 <__overflow@plt>
   137f0:	b	137cc <__assert_fail@plt+0x2314>
   137f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   137f8:	strd	r6, [sp, #8]
   137fc:	str	r8, [sp, #16]
   13800:	str	lr, [sp, #20]
   13804:	mov	r7, r0
   13808:	mov	r5, r1
   1380c:	mov	r4, r2
   13810:	mov	r6, r3
   13814:	ldrb	r3, [sp, #32]
   13818:	cmp	r3, #0
   1381c:	beq	13850 <__assert_fail@plt+0x2398>
   13820:	ldr	r3, [sp, #24]
   13824:	mov	r2, r6
   13828:	mov	r1, r4
   1382c:	mov	r0, r5
   13830:	bl	134b8 <__assert_fail@plt+0x2000>
   13834:	cmp	r0, #0
   13838:	blt	13860 <__assert_fail@plt+0x23a8>
   1383c:	ldrd	r4, [sp]
   13840:	ldrd	r6, [sp, #8]
   13844:	ldr	r8, [sp, #16]
   13848:	add	sp, sp, #20
   1384c:	pop	{pc}		; (ldr pc, [sp], #4)
   13850:	mov	r1, r2
   13854:	mov	r0, r5
   13858:	bl	135b4 <__assert_fail@plt+0x20fc>
   1385c:	b	13834 <__assert_fail@plt+0x237c>
   13860:	mov	r2, r0
   13864:	mov	r1, r5
   13868:	mov	r0, r7
   1386c:	bl	1361c <__assert_fail@plt+0x2164>
   13870:	ldr	r2, [sp, #24]
   13874:	mov	r1, r6
   13878:	mov	r0, r4
   1387c:	bl	136a4 <__assert_fail@plt+0x21ec>
   13880:	ldr	r3, [sp, #28]
   13884:	blx	r3
   13888:	mvn	r0, #0
   1388c:	b	1383c <__assert_fail@plt+0x2384>
   13890:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13894:	strd	r6, [sp, #8]
   13898:	str	r8, [sp, #16]
   1389c:	str	lr, [sp, #20]
   138a0:	ldr	r7, [r1]
   138a4:	cmp	r7, #0
   138a8:	beq	138e4 <__assert_fail@plt+0x242c>
   138ac:	mov	r6, r3
   138b0:	mov	r8, r0
   138b4:	mov	r4, r2
   138b8:	mov	r5, r1
   138bc:	mov	r2, r6
   138c0:	mov	r1, r4
   138c4:	mov	r0, r8
   138c8:	bl	111d0 <memcmp@plt>
   138cc:	cmp	r0, #0
   138d0:	beq	138e4 <__assert_fail@plt+0x242c>
   138d4:	ldr	r7, [r5, #4]!
   138d8:	add	r4, r4, r6
   138dc:	cmp	r7, #0
   138e0:	bne	138bc <__assert_fail@plt+0x2404>
   138e4:	mov	r0, r7
   138e8:	ldrd	r4, [sp]
   138ec:	ldrd	r6, [sp, #8]
   138f0:	ldr	r8, [sp, #16]
   138f4:	add	sp, sp, #20
   138f8:	pop	{pc}		; (ldr pc, [sp], #4)
   138fc:	ldrb	r3, [r0]
   13900:	cmp	r3, #47	; 0x2f
   13904:	bne	13914 <__assert_fail@plt+0x245c>
   13908:	ldrb	r3, [r0, #1]!
   1390c:	cmp	r3, #47	; 0x2f
   13910:	beq	13908 <__assert_fail@plt+0x2450>
   13914:	ldrb	r2, [r0]
   13918:	cmp	r2, #0
   1391c:	bxeq	lr
   13920:	push	{lr}		; (str lr, [sp, #-4]!)
   13924:	mov	r1, r0
   13928:	mov	r3, #0
   1392c:	mov	lr, #1
   13930:	mov	ip, r3
   13934:	b	13950 <__assert_fail@plt+0x2498>
   13938:	cmp	r3, #0
   1393c:	movne	r0, r1
   13940:	movne	r3, ip
   13944:	ldrb	r2, [r1, #1]!
   13948:	cmp	r2, #0
   1394c:	beq	13960 <__assert_fail@plt+0x24a8>
   13950:	cmp	r2, #47	; 0x2f
   13954:	moveq	r3, lr
   13958:	bne	13938 <__assert_fail@plt+0x2480>
   1395c:	b	13944 <__assert_fail@plt+0x248c>
   13960:	pop	{pc}		; (ldr pc, [sp], #4)
   13964:	str	r4, [sp, #-8]!
   13968:	str	lr, [sp, #4]
   1396c:	mov	r4, r0
   13970:	bl	11314 <strlen@plt>
   13974:	cmp	r0, #1
   13978:	bls	13998 <__assert_fail@plt+0x24e0>
   1397c:	add	r3, r4, r0
   13980:	ldrb	r3, [r3, #-1]
   13984:	cmp	r3, #47	; 0x2f
   13988:	subeq	r0, r0, #2
   1398c:	addeq	r3, r4, r0
   13990:	rsbeq	r1, r4, #1
   13994:	beq	139a4 <__assert_fail@plt+0x24ec>
   13998:	ldr	r4, [sp]
   1399c:	add	sp, sp, #4
   139a0:	pop	{pc}		; (ldr pc, [sp], #4)
   139a4:	add	r0, r1, r3
   139a8:	cmp	r3, r4
   139ac:	beq	13998 <__assert_fail@plt+0x24e0>
   139b0:	ldrb	r2, [r3], #-1
   139b4:	cmp	r2, #47	; 0x2f
   139b8:	bne	13998 <__assert_fail@plt+0x24e0>
   139bc:	b	139a4 <__assert_fail@plt+0x24ec>
   139c0:	movw	r3, #49604	; 0xc1c4
   139c4:	movt	r3, #2
   139c8:	str	r0, [r3]
   139cc:	bx	lr
   139d0:	movw	r3, #49604	; 0xc1c4
   139d4:	movt	r3, #2
   139d8:	strb	r0, [r3, #4]
   139dc:	bx	lr
   139e0:	strd	r4, [sp, #-16]!
   139e4:	str	r6, [sp, #8]
   139e8:	str	lr, [sp, #12]
   139ec:	sub	sp, sp, #8
   139f0:	movw	r3, #49588	; 0xc1b4
   139f4:	movt	r3, #2
   139f8:	ldr	r0, [r3]
   139fc:	bl	18f10 <__assert_fail@plt+0x7a58>
   13a00:	cmp	r0, #0
   13a04:	beq	13a2c <__assert_fail@plt+0x2574>
   13a08:	movw	r3, #49604	; 0xc1c4
   13a0c:	movt	r3, #2
   13a10:	ldrb	r3, [r3, #4]
   13a14:	cmp	r3, #0
   13a18:	beq	13a58 <__assert_fail@plt+0x25a0>
   13a1c:	bl	11338 <__errno_location@plt>
   13a20:	ldr	r3, [r0]
   13a24:	cmp	r3, #32
   13a28:	bne	13a58 <__assert_fail@plt+0x25a0>
   13a2c:	movw	r3, #49584	; 0xc1b0
   13a30:	movt	r3, #2
   13a34:	ldr	r0, [r3]
   13a38:	bl	18f10 <__assert_fail@plt+0x7a58>
   13a3c:	cmp	r0, #0
   13a40:	bne	13ae0 <__assert_fail@plt+0x2628>
   13a44:	add	sp, sp, #8
   13a48:	ldrd	r4, [sp]
   13a4c:	ldr	r6, [sp, #8]
   13a50:	add	sp, sp, #12
   13a54:	pop	{pc}		; (ldr pc, [sp], #4)
   13a58:	mov	r2, #5
   13a5c:	movw	r1, #43468	; 0xa9cc
   13a60:	movt	r1, #1
   13a64:	mov	r0, #0
   13a68:	bl	111e8 <dcgettext@plt>
   13a6c:	mov	r4, r0
   13a70:	movw	r3, #49604	; 0xc1c4
   13a74:	movt	r3, #2
   13a78:	ldr	r5, [r3]
   13a7c:	cmp	r5, #0
   13a80:	beq	13ac0 <__assert_fail@plt+0x2608>
   13a84:	bl	11338 <__errno_location@plt>
   13a88:	ldr	r6, [r0]
   13a8c:	mov	r0, r5
   13a90:	bl	16bdc <__assert_fail@plt+0x5724>
   13a94:	str	r4, [sp]
   13a98:	mov	r3, r0
   13a9c:	movw	r2, #43480	; 0xa9d8
   13aa0:	movt	r2, #1
   13aa4:	mov	r1, r6
   13aa8:	mov	r0, #0
   13aac:	bl	1129c <error@plt>
   13ab0:	movw	r3, #49496	; 0xc158
   13ab4:	movt	r3, #2
   13ab8:	ldr	r0, [r3]
   13abc:	bl	11188 <_exit@plt>
   13ac0:	bl	11338 <__errno_location@plt>
   13ac4:	mov	r3, r4
   13ac8:	movw	r2, #43484	; 0xa9dc
   13acc:	movt	r2, #1
   13ad0:	ldr	r1, [r0]
   13ad4:	mov	r0, #0
   13ad8:	bl	1129c <error@plt>
   13adc:	b	13ab0 <__assert_fail@plt+0x25f8>
   13ae0:	movw	r3, #49496	; 0xc158
   13ae4:	movt	r3, #2
   13ae8:	ldr	r0, [r3]
   13aec:	bl	11188 <_exit@plt>
   13af0:	str	r4, [sp, #-8]!
   13af4:	str	lr, [sp, #4]
   13af8:	bl	13b90 <__assert_fail@plt+0x26d8>
   13afc:	cmp	r0, #0
   13b00:	beq	13b10 <__assert_fail@plt+0x2658>
   13b04:	ldr	r4, [sp]
   13b08:	add	sp, sp, #4
   13b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b10:	bl	185e4 <__assert_fail@plt+0x712c>
   13b14:	strd	r4, [sp, #-16]!
   13b18:	str	r6, [sp, #8]
   13b1c:	str	lr, [sp, #12]
   13b20:	mov	r4, r0
   13b24:	ldrb	ip, [r0]
   13b28:	cmp	ip, #47	; 0x2f
   13b2c:	movne	r5, #0
   13b30:	moveq	r5, #1
   13b34:	bl	138fc <__assert_fail@plt+0x2444>
   13b38:	sub	r0, r0, r4
   13b3c:	cmp	r0, r5
   13b40:	bls	13b80 <__assert_fail@plt+0x26c8>
   13b44:	add	r3, r4, r0
   13b48:	ldrb	r3, [r3, #-1]
   13b4c:	cmp	r3, #47	; 0x2f
   13b50:	bne	13b80 <__assert_fail@plt+0x26c8>
   13b54:	sub	r0, r0, #2
   13b58:	add	r3, r4, r0
   13b5c:	sub	ip, r4, #1
   13b60:	add	ip, ip, r5
   13b64:	rsb	r2, r4, #1
   13b68:	add	r0, r2, r3
   13b6c:	cmp	r3, ip
   13b70:	beq	13b80 <__assert_fail@plt+0x26c8>
   13b74:	ldrb	r1, [r3], #-1
   13b78:	cmp	r1, #47	; 0x2f
   13b7c:	beq	13b68 <__assert_fail@plt+0x26b0>
   13b80:	ldrd	r4, [sp]
   13b84:	ldr	r6, [sp, #8]
   13b88:	add	sp, sp, #12
   13b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b90:	strd	r4, [sp, #-16]!
   13b94:	str	r6, [sp, #8]
   13b98:	str	lr, [sp, #12]
   13b9c:	mov	r6, r0
   13ba0:	bl	13b14 <__assert_fail@plt+0x265c>
   13ba4:	mov	r4, r0
   13ba8:	add	r3, r0, #1
   13bac:	cmp	r0, #0
   13bb0:	movne	r0, r3
   13bb4:	addeq	r0, r3, #1
   13bb8:	bl	18e78 <__assert_fail@plt+0x79c0>
   13bbc:	subs	r5, r0, #0
   13bc0:	beq	13bf0 <__assert_fail@plt+0x2738>
   13bc4:	mov	r2, r4
   13bc8:	mov	r1, r6
   13bcc:	mov	r0, r5
   13bd0:	bl	11194 <memcpy@plt>
   13bd4:	cmp	r4, #0
   13bd8:	bne	13be8 <__assert_fail@plt+0x2730>
   13bdc:	mov	r3, #46	; 0x2e
   13be0:	strb	r3, [r5]
   13be4:	mov	r4, #1
   13be8:	mov	r3, #0
   13bec:	strb	r3, [r5, r4]
   13bf0:	mov	r0, r5
   13bf4:	ldrd	r4, [sp]
   13bf8:	ldr	r6, [sp, #8]
   13bfc:	add	sp, sp, #12
   13c00:	pop	{pc}		; (ldr pc, [sp], #4)
   13c04:	push	{r1, r2, r3}
   13c08:	strd	r4, [sp, #-16]!
   13c0c:	str	r6, [sp, #8]
   13c10:	str	lr, [sp, #12]
   13c14:	sub	sp, sp, #12
   13c18:	mov	r5, r0
   13c1c:	ldr	r1, [sp, #28]
   13c20:	add	r3, sp, #32
   13c24:	str	r3, [sp, #4]
   13c28:	cmp	r1, #0
   13c2c:	beq	13c74 <__assert_fail@plt+0x27bc>
   13c30:	movw	r3, #1030	; 0x406
   13c34:	cmp	r1, r3
   13c38:	beq	13cb0 <__assert_fail@plt+0x27f8>
   13c3c:	cmp	r1, #11
   13c40:	beq	13e60 <__assert_fail@plt+0x29a8>
   13c44:	bgt	13dec <__assert_fail@plt+0x2934>
   13c48:	cmp	r1, #3
   13c4c:	beq	13e60 <__assert_fail@plt+0x29a8>
   13c50:	ble	13dac <__assert_fail@plt+0x28f4>
   13c54:	cmp	r1, #8
   13c58:	beq	13dcc <__assert_fail@plt+0x2914>
   13c5c:	ble	13dc4 <__assert_fail@plt+0x290c>
   13c60:	cmp	r1, #9
   13c64:	beq	13e60 <__assert_fail@plt+0x29a8>
   13c68:	cmp	r1, #10
   13c6c:	bne	13e24 <__assert_fail@plt+0x296c>
   13c70:	b	13dcc <__assert_fail@plt+0x2914>
   13c74:	ldr	r3, [sp, #4]
   13c78:	add	r2, r3, #4
   13c7c:	str	r2, [sp, #4]
   13c80:	ldr	r2, [r3]
   13c84:	mov	r1, #0
   13c88:	bl	113c8 <fcntl64@plt>
   13c8c:	mov	r4, r0
   13c90:	mov	r0, r4
   13c94:	add	sp, sp, #12
   13c98:	ldrd	r4, [sp]
   13c9c:	ldr	r6, [sp, #8]
   13ca0:	ldr	lr, [sp, #12]
   13ca4:	add	sp, sp, #16
   13ca8:	add	sp, sp, #12
   13cac:	bx	lr
   13cb0:	ldr	r3, [sp, #4]
   13cb4:	add	r2, r3, #4
   13cb8:	str	r2, [sp, #4]
   13cbc:	ldr	r6, [r3]
   13cc0:	movw	r3, #49612	; 0xc1cc
   13cc4:	movt	r3, #2
   13cc8:	ldr	r3, [r3]
   13ccc:	cmp	r3, #0
   13cd0:	blt	13d38 <__assert_fail@plt+0x2880>
   13cd4:	mov	r2, r6
   13cd8:	movw	r1, #1030	; 0x406
   13cdc:	bl	113c8 <fcntl64@plt>
   13ce0:	subs	r4, r0, #0
   13ce4:	blt	13cfc <__assert_fail@plt+0x2844>
   13ce8:	movw	r3, #49612	; 0xc1cc
   13cec:	movt	r3, #2
   13cf0:	mov	r2, #1
   13cf4:	str	r2, [r3]
   13cf8:	b	13c90 <__assert_fail@plt+0x27d8>
   13cfc:	bl	11338 <__errno_location@plt>
   13d00:	ldr	r3, [r0]
   13d04:	cmp	r3, #22
   13d08:	bne	13ce8 <__assert_fail@plt+0x2830>
   13d0c:	mov	r2, r6
   13d10:	mov	r1, #0
   13d14:	mov	r0, r5
   13d18:	bl	113c8 <fcntl64@plt>
   13d1c:	subs	r4, r0, #0
   13d20:	blt	13c90 <__assert_fail@plt+0x27d8>
   13d24:	movw	r3, #49612	; 0xc1cc
   13d28:	movt	r3, #2
   13d2c:	mvn	r2, #0
   13d30:	str	r2, [r3]
   13d34:	b	13d60 <__assert_fail@plt+0x28a8>
   13d38:	mov	r2, r6
   13d3c:	mov	r1, #0
   13d40:	bl	113c8 <fcntl64@plt>
   13d44:	subs	r4, r0, #0
   13d48:	blt	13c90 <__assert_fail@plt+0x27d8>
   13d4c:	movw	r3, #49612	; 0xc1cc
   13d50:	movt	r3, #2
   13d54:	ldr	r3, [r3]
   13d58:	cmn	r3, #1
   13d5c:	bne	13c90 <__assert_fail@plt+0x27d8>
   13d60:	mov	r1, #1
   13d64:	mov	r0, r4
   13d68:	bl	113c8 <fcntl64@plt>
   13d6c:	subs	r2, r0, #0
   13d70:	blt	13d8c <__assert_fail@plt+0x28d4>
   13d74:	orr	r2, r2, #1
   13d78:	mov	r1, #2
   13d7c:	mov	r0, r4
   13d80:	bl	113c8 <fcntl64@plt>
   13d84:	cmn	r0, #1
   13d88:	bne	13c90 <__assert_fail@plt+0x27d8>
   13d8c:	bl	11338 <__errno_location@plt>
   13d90:	mov	r5, r0
   13d94:	ldr	r6, [r0]
   13d98:	mov	r0, r4
   13d9c:	bl	114ac <close@plt>
   13da0:	str	r6, [r5]
   13da4:	mvn	r4, #0
   13da8:	b	13c90 <__assert_fail@plt+0x27d8>
   13dac:	cmp	r1, #1
   13db0:	beq	13e60 <__assert_fail@plt+0x29a8>
   13db4:	bgt	13dcc <__assert_fail@plt+0x2914>
   13db8:	cmp	r1, #0
   13dbc:	bne	13e24 <__assert_fail@plt+0x296c>
   13dc0:	b	13dcc <__assert_fail@plt+0x2914>
   13dc4:	cmp	r1, #4
   13dc8:	bne	13e24 <__assert_fail@plt+0x296c>
   13dcc:	ldr	r3, [sp, #4]
   13dd0:	add	r2, r3, #4
   13dd4:	str	r2, [sp, #4]
   13dd8:	ldr	r2, [r3]
   13ddc:	mov	r0, r5
   13de0:	bl	113c8 <fcntl64@plt>
   13de4:	mov	r4, r0
   13de8:	b	13c90 <__assert_fail@plt+0x27d8>
   13dec:	movw	r3, #1031	; 0x407
   13df0:	cmp	r1, r3
   13df4:	bgt	13e44 <__assert_fail@plt+0x298c>
   13df8:	movw	r3, #1030	; 0x406
   13dfc:	cmp	r1, r3
   13e00:	bge	13dcc <__assert_fail@plt+0x2914>
   13e04:	movw	r3, #1025	; 0x401
   13e08:	cmp	r1, r3
   13e0c:	beq	13e60 <__assert_fail@plt+0x29a8>
   13e10:	movw	r3, #1026	; 0x402
   13e14:	cmp	r1, r3
   13e18:	beq	13dcc <__assert_fail@plt+0x2914>
   13e1c:	cmp	r1, #1024	; 0x400
   13e20:	beq	13dcc <__assert_fail@plt+0x2914>
   13e24:	ldr	r3, [sp, #4]
   13e28:	add	r2, r3, #4
   13e2c:	str	r2, [sp, #4]
   13e30:	ldr	r2, [r3]
   13e34:	mov	r0, r5
   13e38:	bl	113c8 <fcntl64@plt>
   13e3c:	mov	r4, r0
   13e40:	b	13c90 <__assert_fail@plt+0x27d8>
   13e44:	movw	r3, #1033	; 0x409
   13e48:	cmp	r1, r3
   13e4c:	beq	13dcc <__assert_fail@plt+0x2914>
   13e50:	blt	13e60 <__assert_fail@plt+0x29a8>
   13e54:	movw	r3, #1034	; 0x40a
   13e58:	cmp	r1, r3
   13e5c:	bne	13e24 <__assert_fail@plt+0x296c>
   13e60:	mov	r0, r5
   13e64:	bl	113c8 <fcntl64@plt>
   13e68:	mov	r4, r0
   13e6c:	b	13c90 <__assert_fail@plt+0x27d8>
   13e70:	push	{r1, r2, r3}
   13e74:	push	{lr}		; (str lr, [sp, #-4]!)
   13e78:	sub	sp, sp, #8
   13e7c:	ldr	r1, [sp, #12]
   13e80:	tst	r1, #64	; 0x40
   13e84:	addne	r3, sp, #20
   13e88:	strne	r3, [sp, #4]
   13e8c:	ldrne	r2, [sp, #16]
   13e90:	moveq	r2, #0
   13e94:	bl	112a8 <open64@plt>
   13e98:	bl	17b1c <__assert_fail@plt+0x6664>
   13e9c:	add	sp, sp, #8
   13ea0:	pop	{lr}		; (ldr lr, [sp], #4)
   13ea4:	add	sp, sp, #12
   13ea8:	bx	lr
   13eac:	strd	r4, [sp, #-12]!
   13eb0:	str	lr, [sp, #8]
   13eb4:	sub	sp, sp, #12
   13eb8:	mov	r5, r0
   13ebc:	bl	11338 <__errno_location@plt>
   13ec0:	mov	r4, r0
   13ec4:	ldr	r3, [r0]
   13ec8:	str	r3, [sp]
   13ecc:	str	r3, [sp, #4]
   13ed0:	mov	r3, #0
   13ed4:	str	r3, [r0]
   13ed8:	mov	r0, r5
   13edc:	bl	1117c <free@plt>
   13ee0:	ldr	r3, [r4]
   13ee4:	clz	r3, r3
   13ee8:	lsr	r3, r3, #5
   13eec:	add	r2, sp, #8
   13ef0:	add	r3, r2, r3, lsl #2
   13ef4:	ldr	r3, [r3, #-8]
   13ef8:	str	r3, [r4]
   13efc:	add	sp, sp, #12
   13f00:	ldrd	r4, [sp]
   13f04:	add	sp, sp, #8
   13f08:	pop	{pc}		; (ldr pc, [sp], #4)
   13f0c:	andeq	r0, r0, r0
   13f10:	str	r4, [sp, #-16]!
   13f14:	strd	r6, [sp, #4]
   13f18:	str	lr, [sp, #12]
   13f1c:	vpush	{d8}
   13f20:	vmov.f64	d8, d0
   13f24:	cmp	r0, #1
   13f28:	beq	13f90 <__assert_fail@plt+0x2ad8>
   13f2c:	mov	r4, r0
   13f30:	vldr	d7, [pc, #112]	; 13fa8 <__assert_fail@plt+0x2af0>
   13f34:	vcmpe.f64	d0, d7
   13f38:	vmrs	APSR_nzcv, fpscr
   13f3c:	bpl	13f90 <__assert_fail@plt+0x2ad8>
   13f40:	vmov	r0, r1, d0
   13f44:	bl	19948 <__assert_fail@plt+0x8490>
   13f48:	mov	r6, r0
   13f4c:	mov	r7, r1
   13f50:	cmp	r4, #0
   13f54:	movne	r0, #0
   13f58:	bne	13f78 <__assert_fail@plt+0x2ac0>
   13f5c:	mov	r0, r6
   13f60:	bl	197b0 <__assert_fail@plt+0x82f8>
   13f64:	vmov	d7, r0, r1
   13f68:	vcmp.f64	d7, d8
   13f6c:	vmrs	APSR_nzcv, fpscr
   13f70:	movne	r0, #1
   13f74:	moveq	r0, #0
   13f78:	adds	r2, r6, r0
   13f7c:	adc	r3, r7, r0, asr #31
   13f80:	mov	r0, r2
   13f84:	mov	r1, r3
   13f88:	bl	197b0 <__assert_fail@plt+0x82f8>
   13f8c:	vmov	d8, r0, r1
   13f90:	vmov.f64	d0, d8
   13f94:	vpop	{d8}
   13f98:	ldr	r4, [sp]
   13f9c:	ldrd	r6, [sp, #4]
   13fa0:	add	sp, sp, #12
   13fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fa8:	andeq	r0, r0, r0
   13fac:	mvnsmi	r0, #0
   13fb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13fb4:	strd	r6, [sp, #8]
   13fb8:	strd	r8, [sp, #16]
   13fbc:	strd	sl, [sp, #24]
   13fc0:	str	lr, [sp, #32]
   13fc4:	vpush	{d8-d9}
   13fc8:	sub	sp, sp, #124	; 0x7c
   13fcc:	mov	r6, r0
   13fd0:	mov	r7, r1
   13fd4:	mov	r8, r2
   13fd8:	str	r2, [sp, #36]	; 0x24
   13fdc:	mov	r9, r3
   13fe0:	and	r3, r3, #3
   13fe4:	str	r3, [sp, #8]
   13fe8:	ands	r3, r9, #32
   13fec:	str	r3, [sp, #44]	; 0x2c
   13ff0:	movne	r3, #1024	; 0x400
   13ff4:	moveq	r3, #1000	; 0x3e8
   13ff8:	str	r3, [sp, #40]	; 0x28
   13ffc:	bl	11410 <localeconv@plt>
   14000:	mov	r4, r0
   14004:	ldr	r5, [r0]
   14008:	mov	r0, r5
   1400c:	bl	11314 <strlen@plt>
   14010:	mov	fp, r0
   14014:	sub	r2, r0, #1
   14018:	cmp	r2, #16
   1401c:	movcc	fp, r0
   14020:	movcs	fp, #1
   14024:	movw	r3, #43520	; 0xaa00
   14028:	movt	r3, #1
   1402c:	cmp	r2, #15
   14030:	movhi	r5, r3
   14034:	ldr	sl, [r4, #8]
   14038:	ldr	r3, [r4, #4]
   1403c:	mov	r4, r3
   14040:	mov	r0, r3
   14044:	bl	11314 <strlen@plt>
   14048:	movw	r3, #42188	; 0xa4cc
   1404c:	movt	r3, #1
   14050:	mov	r1, r4
   14054:	cmp	r0, #16
   14058:	movhi	r1, r3
   1405c:	str	r1, [sp, #20]
   14060:	add	r3, r8, #644	; 0x284
   14064:	add	r3, r3, #3
   14068:	str	r3, [sp, #32]
   1406c:	ldrd	r2, [sp, #184]	; 0xb8
   14070:	ldrd	r0, [sp, #176]	; 0xb0
   14074:	cmp	r3, r1
   14078:	cmpeq	r2, r0
   1407c:	bhi	14200 <__assert_fail@plt+0x2d48>
   14080:	bl	198f8 <__assert_fail@plt+0x8440>
   14084:	orrs	r3, r2, r3
   14088:	bne	140cc <__assert_fail@plt+0x2c14>
   1408c:	ldrd	r2, [sp, #184]	; 0xb8
   14090:	ldrd	r0, [sp, #176]	; 0xb0
   14094:	bl	198f8 <__assert_fail@plt+0x8440>
   14098:	mov	r2, r0
   1409c:	mov	r3, r1
   140a0:	mul	r0, r0, r7
   140a4:	mla	ip, r6, r1, r0
   140a8:	umull	r0, r1, r2, r6
   140ac:	strd	r0, [sp, #24]
   140b0:	add	r1, ip, r1
   140b4:	str	r1, [sp, #28]
   140b8:	ldrd	r0, [sp, #24]
   140bc:	bl	198f8 <__assert_fail@plt+0x8440>
   140c0:	cmp	r1, r7
   140c4:	cmpeq	r0, r6
   140c8:	beq	1439c <__assert_fail@plt+0x2ee4>
   140cc:	ldrd	r0, [sp, #176]	; 0xb0
   140d0:	bl	197b0 <__assert_fail@plt+0x82f8>
   140d4:	vmov	d9, r0, r1
   140d8:	ldrd	r0, [sp, #184]	; 0xb8
   140dc:	bl	197b0 <__assert_fail@plt+0x82f8>
   140e0:	vmov	d7, r0, r1
   140e4:	vdiv.f64	d8, d9, d7
   140e8:	mov	r0, r6
   140ec:	mov	r1, r7
   140f0:	bl	197b0 <__assert_fail@plt+0x82f8>
   140f4:	vmov	d7, r0, r1
   140f8:	vmul.f64	d0, d8, d7
   140fc:	tst	r9, #16
   14100:	beq	142ec <__assert_fail@plt+0x2e34>
   14104:	vldr	d7, [pc, #1004]	; 144f8 <__assert_fail@plt+0x3040>
   14108:	mov	r7, #0
   1410c:	vldr	s13, [sp, #40]	; 0x28
   14110:	vcvt.f64.u32	d6, s13
   14114:	vmul.f64	d7, d7, d6
   14118:	add	r7, r7, #1
   1411c:	vmul.f64	d5, d6, d7
   14120:	vcmpe.f64	d5, d0
   14124:	vmrs	APSR_nzcv, fpscr
   14128:	movls	r3, #1
   1412c:	movhi	r3, #0
   14130:	cmp	r7, #7
   14134:	movgt	r3, #0
   14138:	andle	r3, r3, #1
   1413c:	cmp	r3, #0
   14140:	bne	14114 <__assert_fail@plt+0x2c5c>
   14144:	vdiv.f64	d8, d0, d7
   14148:	vmov.f64	d0, d8
   1414c:	ldr	r0, [sp, #8]
   14150:	bl	13f10 <__assert_fail@plt+0x2a58>
   14154:	vstr	d0, [sp]
   14158:	movw	r3, #43532	; 0xaa0c
   1415c:	movt	r3, #1
   14160:	mvn	r2, #0
   14164:	mov	r1, #1
   14168:	ldr	r4, [sp, #36]	; 0x24
   1416c:	mov	r0, r4
   14170:	bl	11344 <__sprintf_chk@plt>
   14174:	mov	r0, r4
   14178:	bl	11314 <strlen@plt>
   1417c:	mov	r8, r0
   14180:	add	fp, fp, #1
   14184:	ldr	r3, [sp, #44]	; 0x2c
   14188:	clz	r3, r3
   1418c:	lsr	r3, r3, #5
   14190:	add	r3, r3, #1
   14194:	add	r3, r3, fp
   14198:	cmp	r3, r0
   1419c:	bcc	141b8 <__assert_fail@plt+0x2d00>
   141a0:	tst	r9, #8
   141a4:	beq	14328 <__assert_fail@plt+0x2e70>
   141a8:	add	r3, r4, r0
   141ac:	ldrb	r3, [r3, #-1]
   141b0:	cmp	r3, #48	; 0x30
   141b4:	bne	14328 <__assert_fail@plt+0x2e70>
   141b8:	vldr	d9, [pc, #832]	; 14500 <__assert_fail@plt+0x3048>
   141bc:	vmul.f64	d0, d8, d9
   141c0:	ldr	r0, [sp, #8]
   141c4:	bl	13f10 <__assert_fail@plt+0x2a58>
   141c8:	vdiv.f64	d0, d0, d9
   141cc:	vstr	d0, [sp]
   141d0:	movw	r3, #43524	; 0xaa04
   141d4:	movt	r3, #1
   141d8:	mvn	r2, #0
   141dc:	mov	r1, #1
   141e0:	ldr	r4, [sp, #36]	; 0x24
   141e4:	mov	r0, r4
   141e8:	bl	11344 <__sprintf_chk@plt>
   141ec:	mov	r0, r4
   141f0:	bl	11314 <strlen@plt>
   141f4:	mov	r8, r0
   141f8:	mov	fp, #0
   141fc:	b	14328 <__assert_fail@plt+0x2e70>
   14200:	ldrd	r2, [sp, #176]	; 0xb0
   14204:	orrs	r3, r2, r3
   14208:	beq	140cc <__assert_fail@plt+0x2c14>
   1420c:	ldrd	r2, [sp, #176]	; 0xb0
   14210:	ldrd	r0, [sp, #184]	; 0xb8
   14214:	bl	198f8 <__assert_fail@plt+0x8440>
   14218:	orrs	r3, r2, r3
   1421c:	bne	140cc <__assert_fail@plt+0x2c14>
   14220:	ldrd	r2, [sp, #176]	; 0xb0
   14224:	ldrd	r0, [sp, #184]	; 0xb8
   14228:	bl	198f8 <__assert_fail@plt+0x8440>
   1422c:	strd	r0, [sp, #48]	; 0x30
   14230:	mov	r2, r0
   14234:	mov	r3, r1
   14238:	mov	r0, r6
   1423c:	mov	r1, r7
   14240:	bl	198f8 <__assert_fail@plt+0x8440>
   14244:	lsl	r1, r3, #2
   14248:	lsl	r4, r2, #2
   1424c:	orr	r0, r1, r2, lsr #30
   14250:	adds	r4, r4, r2
   14254:	adc	r3, r0, r3
   14258:	adds	r4, r4, r4
   1425c:	adc	r8, r3, r3
   14260:	ldrd	r2, [sp, #48]	; 0x30
   14264:	mov	r0, r4
   14268:	mov	r1, r8
   1426c:	bl	198f8 <__assert_fail@plt+0x8440>
   14270:	adds	r1, r2, r2
   14274:	str	r1, [sp, #56]	; 0x38
   14278:	adc	r3, r3, r3
   1427c:	str	r3, [sp, #60]	; 0x3c
   14280:	ldrd	r2, [sp, #48]	; 0x30
   14284:	mov	r0, r6
   14288:	mov	r1, r7
   1428c:	bl	198f8 <__assert_fail@plt+0x8440>
   14290:	strd	r0, [sp, #24]
   14294:	ldrd	r2, [sp, #48]	; 0x30
   14298:	mov	r0, r4
   1429c:	mov	r1, r8
   142a0:	bl	198f8 <__assert_fail@plt+0x8440>
   142a4:	mov	r6, r0
   142a8:	ldrd	r2, [sp, #48]	; 0x30
   142ac:	ldrd	r0, [sp, #56]	; 0x38
   142b0:	cmp	r3, r1
   142b4:	cmpeq	r2, r0
   142b8:	bls	142d0 <__assert_fail@plt+0x2e18>
   142bc:	mov	r3, r0
   142c0:	orrs	r3, r3, r1
   142c4:	movne	r4, #1
   142c8:	moveq	r4, #0
   142cc:	b	143a4 <__assert_fail@plt+0x2eec>
   142d0:	ldrd	r2, [sp, #48]	; 0x30
   142d4:	ldrd	r0, [sp, #56]	; 0x38
   142d8:	cmp	r3, r1
   142dc:	cmpeq	r2, r0
   142e0:	movcc	r4, #3
   142e4:	movcs	r4, #2
   142e8:	b	143a4 <__assert_fail@plt+0x2eec>
   142ec:	ldr	r0, [sp, #8]
   142f0:	bl	13f10 <__assert_fail@plt+0x2a58>
   142f4:	vstr	d0, [sp]
   142f8:	movw	r3, #43524	; 0xaa04
   142fc:	movt	r3, #1
   14300:	mvn	r2, #0
   14304:	mov	r1, #1
   14308:	ldr	r4, [sp, #36]	; 0x24
   1430c:	mov	r0, r4
   14310:	bl	11344 <__sprintf_chk@plt>
   14314:	mov	r0, r4
   14318:	bl	11314 <strlen@plt>
   1431c:	mov	r8, r0
   14320:	mov	fp, #0
   14324:	mvn	r7, #0
   14328:	ldr	r3, [sp, #32]
   1432c:	sub	r6, r3, r8
   14330:	mov	r2, r8
   14334:	ldr	r1, [sp, #36]	; 0x24
   14338:	mov	r0, r6
   1433c:	bl	11170 <memmove@plt>
   14340:	sub	r8, r8, fp
   14344:	add	r8, r6, r8
   14348:	tst	r9, #4
   1434c:	bne	146ec <__assert_fail@plt+0x3234>
   14350:	tst	r9, #128	; 0x80
   14354:	beq	1436c <__assert_fail@plt+0x2eb4>
   14358:	cmp	r7, #0
   1435c:	blt	1477c <__assert_fail@plt+0x32c4>
   14360:	and	r3, r9, #256	; 0x100
   14364:	orrs	r2, r3, r7
   14368:	bne	147dc <__assert_fail@plt+0x3324>
   1436c:	mov	r3, #0
   14370:	ldr	r2, [sp, #32]
   14374:	strb	r3, [r2]
   14378:	mov	r0, r6
   1437c:	add	sp, sp, #124	; 0x7c
   14380:	vpop	{d8-d9}
   14384:	ldrd	r4, [sp]
   14388:	ldrd	r6, [sp, #8]
   1438c:	ldrd	r8, [sp, #16]
   14390:	ldrd	sl, [sp, #24]
   14394:	add	sp, sp, #32
   14398:	pop	{pc}		; (ldr pc, [sp], #4)
   1439c:	mov	r4, #0
   143a0:	mov	r6, r4
   143a4:	ands	r3, r9, #16
   143a8:	str	r3, [sp, #48]	; 0x30
   143ac:	beq	14564 <__assert_fail@plt+0x30ac>
   143b0:	ldr	r8, [sp, #40]	; 0x28
   143b4:	mov	r3, #0
   143b8:	ldrd	r0, [sp, #24]
   143bc:	cmp	r3, r1
   143c0:	cmpeq	r8, r0
   143c4:	bhi	1459c <__assert_fail@plt+0x30e4>
   143c8:	mov	r7, #0
   143cc:	str	r5, [sp, #56]	; 0x38
   143d0:	str	fp, [sp, #64]	; 0x40
   143d4:	str	sl, [sp, #68]	; 0x44
   143d8:	mov	sl, r8
   143dc:	mov	fp, r3
   143e0:	b	14420 <__assert_fail@plt+0x2f68>
   143e4:	add	r4, r4, r5
   143e8:	cmp	r4, r8
   143ec:	movhi	r4, #3
   143f0:	movls	r4, #2
   143f4:	add	r7, r7, #1
   143f8:	ldrd	r2, [sp, #24]
   143fc:	cmp	fp, r3
   14400:	cmpeq	sl, r2
   14404:	movls	r3, #1
   14408:	movhi	r3, #0
   1440c:	cmp	r7, #7
   14410:	movgt	r3, #0
   14414:	andle	r3, r3, #1
   14418:	cmp	r3, #0
   1441c:	beq	14474 <__assert_fail@plt+0x2fbc>
   14420:	mov	r2, sl
   14424:	mov	r3, fp
   14428:	ldrd	r0, [sp, #24]
   1442c:	bl	198f8 <__assert_fail@plt+0x8440>
   14430:	add	r2, r2, r2, lsl #2
   14434:	add	r2, r6, r2, lsl #1
   14438:	udiv	r6, r2, r8
   1443c:	mls	r2, r8, r6, r2
   14440:	asr	r5, r4, #1
   14444:	add	r5, r5, r2, lsl #1
   14448:	mov	r2, sl
   1444c:	mov	r3, fp
   14450:	ldrd	r0, [sp, #24]
   14454:	bl	198f8 <__assert_fail@plt+0x8440>
   14458:	strd	r0, [sp, #24]
   1445c:	cmp	r8, r5
   14460:	bls	143e4 <__assert_fail@plt+0x2f2c>
   14464:	cmn	r4, r5
   14468:	movne	r4, #1
   1446c:	moveq	r4, #0
   14470:	b	143f4 <__assert_fail@plt+0x2f3c>
   14474:	ldr	r5, [sp, #56]	; 0x38
   14478:	ldr	fp, [sp, #64]	; 0x40
   1447c:	ldr	sl, [sp, #68]	; 0x44
   14480:	ldrd	r2, [sp, #24]
   14484:	cmp	r3, #0
   14488:	cmpeq	r2, #9
   1448c:	bhi	145a8 <__assert_fail@plt+0x30f0>
   14490:	ldr	r3, [sp, #8]
   14494:	cmp	r3, #1
   14498:	beq	14508 <__assert_fail@plt+0x3050>
   1449c:	adds	r3, r4, #0
   144a0:	movne	r3, #1
   144a4:	ldr	r2, [sp, #8]
   144a8:	cmp	r2, #0
   144ac:	movne	r3, #0
   144b0:	cmp	r3, #0
   144b4:	beq	14868 <__assert_fail@plt+0x33b0>
   144b8:	add	r6, r6, #1
   144bc:	cmp	r6, #10
   144c0:	beq	14520 <__assert_fail@plt+0x3068>
   144c4:	ldr	r3, [sp, #36]	; 0x24
   144c8:	add	r8, r3, #644	; 0x284
   144cc:	add	r8, r8, #2
   144d0:	add	r6, r6, #48	; 0x30
   144d4:	strb	r6, [r3, #646]	; 0x286
   144d8:	sub	r8, r8, fp
   144dc:	mov	r2, fp
   144e0:	mov	r1, r5
   144e4:	mov	r0, r8
   144e8:	bl	11194 <memcpy@plt>
   144ec:	mov	r6, #0
   144f0:	mov	r4, r6
   144f4:	b	1456c <__assert_fail@plt+0x30b4>
   144f8:	andeq	r0, r0, r0
   144fc:	svccc	0x00f00000	; IMB
   14500:	andeq	r0, r0, r0
   14504:	eormi	r0, r4, r0
   14508:	and	r3, r6, #1
   1450c:	add	r3, r3, r4
   14510:	cmp	r3, #2
   14514:	movle	r3, #0
   14518:	movgt	r3, #1
   1451c:	b	144b0 <__assert_fail@plt+0x2ff8>
   14520:	ldr	r3, [sp, #24]
   14524:	adds	r3, r3, #1
   14528:	str	r3, [sp, #24]
   1452c:	ldr	r3, [sp, #28]
   14530:	adc	r3, r3, #0
   14534:	str	r3, [sp, #28]
   14538:	ldrd	r2, [sp, #24]
   1453c:	cmp	r3, #0
   14540:	cmpeq	r2, #9
   14544:	bls	14558 <__assert_fail@plt+0x30a0>
   14548:	ldr	r8, [sp, #32]
   1454c:	mov	r4, #0
   14550:	mov	r6, r4
   14554:	b	1456c <__assert_fail@plt+0x30b4>
   14558:	mov	r4, #0
   1455c:	mov	r6, r4
   14560:	b	14870 <__assert_fail@plt+0x33b8>
   14564:	ldr	r8, [sp, #32]
   14568:	mvn	r7, #0
   1456c:	ldr	r3, [sp, #8]
   14570:	cmp	r3, #1
   14574:	beq	145b0 <__assert_fail@plt+0x30f8>
   14578:	ldr	r3, [sp, #8]
   1457c:	cmp	r3, #0
   14580:	movne	r6, #0
   14584:	bne	145dc <__assert_fail@plt+0x3124>
   14588:	add	r6, r6, r4
   1458c:	cmp	r6, #0
   14590:	movle	r6, #0
   14594:	movgt	r6, #1
   14598:	b	145dc <__assert_fail@plt+0x3124>
   1459c:	ldr	r8, [sp, #32]
   145a0:	mov	r7, #0
   145a4:	b	1456c <__assert_fail@plt+0x30b4>
   145a8:	ldr	r8, [sp, #32]
   145ac:	b	1456c <__assert_fail@plt+0x30b4>
   145b0:	ldr	r3, [sp, #24]
   145b4:	and	r0, r3, #1
   145b8:	mov	r1, #0
   145bc:	adds	r2, r0, r4
   145c0:	adc	r3, r1, r4, asr #31
   145c4:	orr	r2, r2, r3
   145c8:	cmp	r2, r1
   145cc:	addne	r6, r6, #1
   145d0:	cmp	r6, #5
   145d4:	movle	r6, #0
   145d8:	movgt	r6, #1
   145dc:	cmp	r6, #0
   145e0:	beq	14638 <__assert_fail@plt+0x3180>
   145e4:	ldr	r3, [sp, #24]
   145e8:	adds	r3, r3, #1
   145ec:	str	r3, [sp, #24]
   145f0:	ldr	r3, [sp, #28]
   145f4:	adc	r3, r3, #0
   145f8:	str	r3, [sp, #28]
   145fc:	ldr	r3, [sp, #48]	; 0x30
   14600:	cmp	r3, #0
   14604:	beq	14638 <__assert_fail@plt+0x3180>
   14608:	ldr	r2, [sp, #40]	; 0x28
   1460c:	mov	r3, #0
   14610:	ldrd	r0, [sp, #24]
   14614:	cmp	r3, r1
   14618:	cmpeq	r2, r0
   1461c:	moveq	r3, #1
   14620:	movne	r3, #0
   14624:	cmp	r7, #7
   14628:	movgt	r3, #0
   1462c:	andle	r3, r3, #1
   14630:	cmp	r3, #0
   14634:	bne	1465c <__assert_fail@plt+0x31a4>
   14638:	mov	r4, #10
   1463c:	mov	r5, #0
   14640:	mov	fp, r8
   14644:	strd	r4, [sp, #8]
   14648:	mov	r5, r9
   1464c:	mov	r9, r8
   14650:	mov	r8, r7
   14654:	ldrd	r6, [sp, #24]
   14658:	b	146a4 <__assert_fail@plt+0x31ec>
   1465c:	add	r7, r7, #1
   14660:	tst	r9, #8
   14664:	beq	14678 <__assert_fail@plt+0x31c0>
   14668:	sub	r6, r8, #1
   1466c:	mov	r3, #49	; 0x31
   14670:	strb	r3, [r8, #-1]
   14674:	b	14348 <__assert_fail@plt+0x2e90>
   14678:	mov	r3, #48	; 0x30
   1467c:	strb	r3, [r8, #-1]
   14680:	mvn	r3, fp
   14684:	add	r8, r8, r3
   14688:	mov	r2, fp
   1468c:	mov	r1, r5
   14690:	mov	r0, r8
   14694:	bl	11194 <memcpy@plt>
   14698:	b	14668 <__assert_fail@plt+0x31b0>
   1469c:	mov	r6, r0
   146a0:	mov	r7, r1
   146a4:	ldrd	r2, [sp, #8]
   146a8:	mov	r0, r6
   146ac:	mov	r1, r7
   146b0:	bl	198f8 <__assert_fail@plt+0x8440>
   146b4:	add	r2, r2, #48	; 0x30
   146b8:	strb	r2, [fp, #-1]!
   146bc:	ldrd	r2, [sp, #8]
   146c0:	mov	r0, r6
   146c4:	mov	r1, r7
   146c8:	bl	198f8 <__assert_fail@plt+0x8440>
   146cc:	cmp	r7, #0
   146d0:	cmpeq	r6, #9
   146d4:	bhi	1469c <__assert_fail@plt+0x31e4>
   146d8:	mov	r7, r8
   146dc:	mov	r8, r9
   146e0:	mov	r6, fp
   146e4:	mov	r9, r5
   146e8:	b	14348 <__assert_fail@plt+0x2e90>
   146ec:	sub	r4, r8, r6
   146f0:	ldr	r0, [sp, #20]
   146f4:	bl	11314 <strlen@plt>
   146f8:	mov	fp, r0
   146fc:	mov	r3, #41	; 0x29
   14700:	mov	r2, r4
   14704:	mov	r1, r6
   14708:	add	r0, sp, #76	; 0x4c
   1470c:	bl	1123c <__memcpy_chk@plt>
   14710:	mvn	r5, #0
   14714:	mov	r6, r8
   14718:	b	1475c <__assert_fail@plt+0x32a4>
   1471c:	cmp	r5, r4
   14720:	movcs	r5, r4
   14724:	sub	r6, r6, r5
   14728:	sub	r4, r4, r5
   1472c:	mov	r2, r5
   14730:	add	r3, sp, #76	; 0x4c
   14734:	add	r1, r3, r4
   14738:	mov	r0, r6
   1473c:	bl	11194 <memcpy@plt>
   14740:	cmp	r4, #0
   14744:	beq	14350 <__assert_fail@plt+0x2e98>
   14748:	sub	r6, r6, fp
   1474c:	mov	r2, fp
   14750:	ldr	r1, [sp, #20]
   14754:	mov	r0, r6
   14758:	bl	11194 <memcpy@plt>
   1475c:	ldrb	r3, [sl]
   14760:	cmp	r3, #0
   14764:	beq	1471c <__assert_fail@plt+0x3264>
   14768:	cmp	r3, #255	; 0xff
   1476c:	movne	r5, r3
   14770:	moveq	r5, r4
   14774:	add	sl, sl, #1
   14778:	b	1471c <__assert_fail@plt+0x3264>
   1477c:	ldrd	r2, [sp, #184]	; 0xb8
   14780:	cmp	r3, #0
   14784:	cmpeq	r2, #1
   14788:	movls	r7, #0
   1478c:	bls	14360 <__assert_fail@plt+0x2ea8>
   14790:	mov	r7, #1
   14794:	mov	r2, #1
   14798:	mov	r3, #0
   1479c:	ldr	r1, [sp, #40]	; 0x28
   147a0:	ldrd	r4, [sp, #184]	; 0xb8
   147a4:	mul	r0, r1, r3
   147a8:	umull	r2, r3, r2, r1
   147ac:	add	r3, r0, r3
   147b0:	cmp	r5, r3
   147b4:	cmpeq	r4, r2
   147b8:	bls	14360 <__assert_fail@plt+0x2ea8>
   147bc:	add	r7, r7, #1
   147c0:	cmp	r7, #8
   147c4:	bne	147a4 <__assert_fail@plt+0x32ec>
   147c8:	and	r3, r9, #256	; 0x100
   147cc:	tst	r9, #64	; 0x40
   147d0:	bne	147e4 <__assert_fail@plt+0x332c>
   147d4:	ldr	r2, [sp, #32]
   147d8:	b	147fc <__assert_fail@plt+0x3344>
   147dc:	tst	r9, #64	; 0x40
   147e0:	beq	14844 <__assert_fail@plt+0x338c>
   147e4:	ldr	r0, [sp, #36]	; 0x24
   147e8:	add	r2, r0, #648	; 0x288
   147ec:	mov	r1, #32
   147f0:	strb	r1, [r0, #647]	; 0x287
   147f4:	cmp	r7, #0
   147f8:	beq	1484c <__assert_fail@plt+0x3394>
   147fc:	ldr	ip, [sp, #44]	; 0x2c
   14800:	cmp	ip, #0
   14804:	cmpeq	r7, #1
   14808:	beq	14884 <__assert_fail@plt+0x33cc>
   1480c:	mov	r0, r2
   14810:	movw	r1, #43488	; 0xa9e0
   14814:	movt	r1, #1
   14818:	ldrb	r1, [r1, r7]
   1481c:	strb	r1, [r0], #1
   14820:	str	r0, [sp, #32]
   14824:	cmp	r3, #0
   14828:	beq	1436c <__assert_fail@plt+0x2eb4>
   1482c:	cmp	ip, #0
   14830:	movne	r3, #105	; 0x69
   14834:	strbne	r3, [r2, #1]
   14838:	addne	r2, r2, #2
   1483c:	ldreq	r2, [sp, #32]
   14840:	b	14858 <__assert_fail@plt+0x33a0>
   14844:	ldr	r2, [sp, #32]
   14848:	b	147f4 <__assert_fail@plt+0x333c>
   1484c:	cmp	r3, #0
   14850:	streq	r2, [sp, #32]
   14854:	beq	1436c <__assert_fail@plt+0x2eb4>
   14858:	mov	r3, #66	; 0x42
   1485c:	strb	r3, [r2], #1
   14860:	str	r2, [sp, #32]
   14864:	b	1436c <__assert_fail@plt+0x2eb4>
   14868:	cmp	r6, #0
   1486c:	bne	144c4 <__assert_fail@plt+0x300c>
   14870:	tst	r9, #8
   14874:	beq	144c4 <__assert_fail@plt+0x300c>
   14878:	ldr	r8, [sp, #32]
   1487c:	mov	r6, #0
   14880:	b	1456c <__assert_fail@plt+0x30b4>
   14884:	mov	r1, r2
   14888:	mov	r2, #107	; 0x6b
   1488c:	strb	r2, [r1], #1
   14890:	str	r1, [sp, #32]
   14894:	cmp	r3, #0
   14898:	beq	1436c <__assert_fail@plt+0x2eb4>
   1489c:	ldr	r2, [sp, #32]
   148a0:	b	14858 <__assert_fail@plt+0x33a0>
   148a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   148a8:	strd	r6, [sp, #8]
   148ac:	str	lr, [sp, #16]
   148b0:	sub	sp, sp, #20
   148b4:	mov	r7, r1
   148b8:	mov	r6, r2
   148bc:	subs	r4, r0, #0
   148c0:	beq	14944 <__assert_fail@plt+0x348c>
   148c4:	ldrb	r3, [r4]
   148c8:	cmp	r3, #39	; 0x27
   148cc:	addeq	r4, r4, #1
   148d0:	moveq	r5, #4
   148d4:	movne	r5, #0
   148d8:	movw	r1, #43488	; 0xa9e0
   148dc:	movt	r1, #1
   148e0:	mov	r3, #4
   148e4:	add	r2, r1, #12
   148e8:	add	r1, r1, #20
   148ec:	mov	r0, r4
   148f0:	bl	134b8 <__assert_fail@plt+0x2000>
   148f4:	cmp	r0, #0
   148f8:	blt	14994 <__assert_fail@plt+0x34dc>
   148fc:	movw	r3, #43488	; 0xa9e0
   14900:	movt	r3, #1
   14904:	add	r3, r3, r0, lsl #2
   14908:	ldr	r3, [r3, #12]
   1490c:	orr	r5, r5, r3
   14910:	mov	r2, #1
   14914:	mov	r3, #0
   14918:	strd	r2, [r6]
   1491c:	str	r5, [r7]
   14920:	mov	r0, #0
   14924:	ldrd	r2, [r6]
   14928:	orrs	r3, r2, r3
   1492c:	beq	14a30 <__assert_fail@plt+0x3578>
   14930:	add	sp, sp, #20
   14934:	ldrd	r4, [sp]
   14938:	ldrd	r6, [sp, #8]
   1493c:	add	sp, sp, #16
   14940:	pop	{pc}		; (ldr pc, [sp], #4)
   14944:	movw	r0, #43540	; 0xaa14
   14948:	movt	r0, #1
   1494c:	bl	112b4 <getenv@plt>
   14950:	subs	r4, r0, #0
   14954:	bne	148c4 <__assert_fail@plt+0x340c>
   14958:	movw	r0, #43552	; 0xaa20
   1495c:	movt	r0, #1
   14960:	bl	112b4 <getenv@plt>
   14964:	subs	r4, r0, #0
   14968:	bne	148c4 <__assert_fail@plt+0x340c>
   1496c:	movw	r0, #43564	; 0xaa2c
   14970:	movt	r0, #1
   14974:	bl	112b4 <getenv@plt>
   14978:	cmp	r0, #0
   1497c:	moveq	r2, #1024	; 0x400
   14980:	movne	r2, #512	; 0x200
   14984:	mov	r3, #0
   14988:	strd	r2, [r6]
   1498c:	mov	r5, #0
   14990:	b	1491c <__assert_fail@plt+0x3464>
   14994:	movw	r3, #43580	; 0xaa3c
   14998:	movt	r3, #1
   1499c:	str	r3, [sp]
   149a0:	mov	r3, r6
   149a4:	mov	r2, #0
   149a8:	add	r1, sp, #12
   149ac:	mov	r0, r4
   149b0:	bl	188b4 <__assert_fail@plt+0x73fc>
   149b4:	cmp	r0, #0
   149b8:	bne	14a10 <__assert_fail@plt+0x3558>
   149bc:	ldrb	r3, [r4]
   149c0:	sub	r3, r3, #48	; 0x30
   149c4:	uxtb	r3, r3
   149c8:	cmp	r3, #9
   149cc:	bls	1491c <__assert_fail@plt+0x3464>
   149d0:	ldr	r2, [sp, #12]
   149d4:	cmp	r2, r4
   149d8:	beq	149f8 <__assert_fail@plt+0x3540>
   149dc:	ldrb	r3, [r4, #1]!
   149e0:	sub	r3, r3, #48	; 0x30
   149e4:	uxtb	r3, r3
   149e8:	cmp	r3, #9
   149ec:	bls	1491c <__assert_fail@plt+0x3464>
   149f0:	cmp	r2, r4
   149f4:	bne	149dc <__assert_fail@plt+0x3524>
   149f8:	ldrb	r3, [r4, #-1]
   149fc:	cmp	r3, #66	; 0x42
   14a00:	orrne	r5, r5, #128	; 0x80
   14a04:	beq	14a1c <__assert_fail@plt+0x3564>
   14a08:	orr	r5, r5, #32
   14a0c:	b	1491c <__assert_fail@plt+0x3464>
   14a10:	mov	r3, #0
   14a14:	str	r3, [r7]
   14a18:	b	14924 <__assert_fail@plt+0x346c>
   14a1c:	orr	r5, r5, #384	; 0x180
   14a20:	ldrb	r3, [r4, #-2]
   14a24:	cmp	r3, #105	; 0x69
   14a28:	bne	1491c <__assert_fail@plt+0x3464>
   14a2c:	b	14a08 <__assert_fail@plt+0x3550>
   14a30:	movw	r0, #43564	; 0xaa2c
   14a34:	movt	r0, #1
   14a38:	bl	112b4 <getenv@plt>
   14a3c:	cmp	r0, #0
   14a40:	moveq	r2, #1024	; 0x400
   14a44:	movne	r2, #512	; 0x200
   14a48:	mov	r3, #0
   14a4c:	strd	r2, [r6]
   14a50:	mov	r0, #4
   14a54:	b	14930 <__assert_fail@plt+0x3478>
   14a58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a5c:	str	r6, [sp, #8]
   14a60:	strd	r8, [sp, #12]
   14a64:	str	lr, [sp, #20]
   14a68:	mov	r4, r0
   14a6c:	mov	r5, r1
   14a70:	add	r6, r2, #20
   14a74:	mov	r3, #0
   14a78:	strb	r3, [r2, #20]
   14a7c:	mov	r8, #10
   14a80:	mov	r9, #0
   14a84:	b	14a90 <__assert_fail@plt+0x35d8>
   14a88:	mov	r4, r0
   14a8c:	mov	r5, r1
   14a90:	mov	r2, r8
   14a94:	mov	r3, r9
   14a98:	mov	r0, r4
   14a9c:	mov	r1, r5
   14aa0:	bl	198f8 <__assert_fail@plt+0x8440>
   14aa4:	add	r2, r2, #48	; 0x30
   14aa8:	strb	r2, [r6, #-1]!
   14aac:	mov	r2, r8
   14ab0:	mov	r3, r9
   14ab4:	mov	r0, r4
   14ab8:	mov	r1, r5
   14abc:	bl	198f8 <__assert_fail@plt+0x8440>
   14ac0:	cmp	r5, #0
   14ac4:	cmpeq	r4, #9
   14ac8:	bhi	14a88 <__assert_fail@plt+0x35d0>
   14acc:	mov	r0, r6
   14ad0:	ldrd	r4, [sp]
   14ad4:	ldr	r6, [sp, #8]
   14ad8:	ldrd	r8, [sp, #12]
   14adc:	add	sp, sp, #20
   14ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae4:	strd	r4, [sp, #-16]!
   14ae8:	str	r6, [sp, #8]
   14aec:	str	lr, [sp, #12]
   14af0:	subs	r4, r0, #0
   14af4:	beq	14b90 <__assert_fail@plt+0x36d8>
   14af8:	mov	r1, #47	; 0x2f
   14afc:	mov	r0, r4
   14b00:	bl	113f8 <strrchr@plt>
   14b04:	subs	r5, r0, #0
   14b08:	beq	14b68 <__assert_fail@plt+0x36b0>
   14b0c:	add	r6, r5, #1
   14b10:	sub	r3, r6, r4
   14b14:	cmp	r3, #6
   14b18:	ble	14b68 <__assert_fail@plt+0x36b0>
   14b1c:	mov	r2, #7
   14b20:	movw	r1, #43676	; 0xaa9c
   14b24:	movt	r1, #1
   14b28:	sub	r0, r5, #6
   14b2c:	bl	11488 <strncmp@plt>
   14b30:	cmp	r0, #0
   14b34:	bne	14b68 <__assert_fail@plt+0x36b0>
   14b38:	mov	r2, #3
   14b3c:	movw	r1, #43684	; 0xaaa4
   14b40:	movt	r1, #1
   14b44:	mov	r0, r6
   14b48:	bl	11488 <strncmp@plt>
   14b4c:	cmp	r0, #0
   14b50:	movne	r4, r6
   14b54:	bne	14b68 <__assert_fail@plt+0x36b0>
   14b58:	add	r4, r5, #4
   14b5c:	movw	r3, #49568	; 0xc1a0
   14b60:	movt	r3, #2
   14b64:	str	r4, [r3]
   14b68:	movw	r3, #49616	; 0xc1d0
   14b6c:	movt	r3, #2
   14b70:	str	r4, [r3]
   14b74:	movw	r3, #49572	; 0xc1a4
   14b78:	movt	r3, #2
   14b7c:	str	r4, [r3]
   14b80:	ldrd	r4, [sp]
   14b84:	ldr	r6, [sp, #8]
   14b88:	add	sp, sp, #12
   14b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b90:	movw	r3, #49584	; 0xc1b0
   14b94:	movt	r3, #2
   14b98:	ldr	r3, [r3]
   14b9c:	mov	r2, #55	; 0x37
   14ba0:	mov	r1, #1
   14ba4:	movw	r0, #43620	; 0xaa64
   14ba8:	movt	r0, #1
   14bac:	bl	11248 <fwrite@plt>
   14bb0:	bl	114a0 <abort@plt>
   14bb4:	mov	r2, #0
   14bb8:	mov	r3, #0
   14bbc:	strd	r2, [r0]
   14bc0:	strd	r2, [r0, #8]
   14bc4:	strd	r2, [r0, #16]
   14bc8:	strd	r2, [r0, #24]
   14bcc:	strd	r2, [r0, #32]
   14bd0:	strd	r2, [r0, #40]	; 0x28
   14bd4:	cmp	r1, #10
   14bd8:	beq	14be4 <__assert_fail@plt+0x372c>
   14bdc:	str	r1, [r0]
   14be0:	bx	lr
   14be4:	str	r4, [sp, #-8]!
   14be8:	str	lr, [sp, #4]
   14bec:	bl	114a0 <abort@plt>
   14bf0:	strd	r4, [sp, #-16]!
   14bf4:	str	r6, [sp, #8]
   14bf8:	str	lr, [sp, #12]
   14bfc:	mov	r5, r0
   14c00:	mov	r6, r1
   14c04:	mov	r2, #5
   14c08:	mov	r1, r0
   14c0c:	mov	r0, #0
   14c10:	bl	111e8 <dcgettext@plt>
   14c14:	mov	r4, r0
   14c18:	cmp	r5, r0
   14c1c:	beq	14c34 <__assert_fail@plt+0x377c>
   14c20:	mov	r0, r4
   14c24:	ldrd	r4, [sp]
   14c28:	ldr	r6, [sp, #8]
   14c2c:	add	sp, sp, #12
   14c30:	pop	{pc}		; (ldr pc, [sp], #4)
   14c34:	bl	19238 <__assert_fail@plt+0x7d80>
   14c38:	ldrb	r3, [r0]
   14c3c:	bic	r3, r3, #32
   14c40:	cmp	r3, #85	; 0x55
   14c44:	bne	14cc8 <__assert_fail@plt+0x3810>
   14c48:	ldrb	r3, [r0, #1]
   14c4c:	bic	r3, r3, #32
   14c50:	cmp	r3, #84	; 0x54
   14c54:	bne	14c8c <__assert_fail@plt+0x37d4>
   14c58:	ldrb	r3, [r0, #2]
   14c5c:	bic	r3, r3, #32
   14c60:	cmp	r3, #70	; 0x46
   14c64:	bne	14c8c <__assert_fail@plt+0x37d4>
   14c68:	ldrb	r3, [r0, #3]
   14c6c:	cmp	r3, #45	; 0x2d
   14c70:	bne	14c8c <__assert_fail@plt+0x37d4>
   14c74:	ldrb	r3, [r0, #4]
   14c78:	cmp	r3, #56	; 0x38
   14c7c:	bne	14c8c <__assert_fail@plt+0x37d4>
   14c80:	ldrb	r3, [r0, #5]
   14c84:	cmp	r3, #0
   14c88:	beq	14ca8 <__assert_fail@plt+0x37f0>
   14c8c:	movw	r4, #43772	; 0xaafc
   14c90:	movt	r4, #1
   14c94:	movw	r3, #43792	; 0xab10
   14c98:	movt	r3, #1
   14c9c:	cmp	r6, #9
   14ca0:	movne	r4, r3
   14ca4:	b	14c20 <__assert_fail@plt+0x3768>
   14ca8:	ldrb	r2, [r4]
   14cac:	movw	r4, #43788	; 0xab0c
   14cb0:	movt	r4, #1
   14cb4:	movw	r3, #43776	; 0xab00
   14cb8:	movt	r3, #1
   14cbc:	cmp	r2, #96	; 0x60
   14cc0:	movne	r4, r3
   14cc4:	b	14c20 <__assert_fail@plt+0x3768>
   14cc8:	cmp	r3, #71	; 0x47
   14ccc:	bne	14c8c <__assert_fail@plt+0x37d4>
   14cd0:	ldrb	r3, [r0, #1]
   14cd4:	bic	r3, r3, #32
   14cd8:	cmp	r3, #66	; 0x42
   14cdc:	bne	14c8c <__assert_fail@plt+0x37d4>
   14ce0:	ldrb	r3, [r0, #2]
   14ce4:	cmp	r3, #49	; 0x31
   14ce8:	bne	14c8c <__assert_fail@plt+0x37d4>
   14cec:	ldrb	r3, [r0, #3]
   14cf0:	cmp	r3, #56	; 0x38
   14cf4:	bne	14c8c <__assert_fail@plt+0x37d4>
   14cf8:	ldrb	r3, [r0, #4]
   14cfc:	cmp	r3, #48	; 0x30
   14d00:	bne	14c8c <__assert_fail@plt+0x37d4>
   14d04:	ldrb	r3, [r0, #5]
   14d08:	cmp	r3, #51	; 0x33
   14d0c:	bne	14c8c <__assert_fail@plt+0x37d4>
   14d10:	ldrb	r3, [r0, #6]
   14d14:	cmp	r3, #48	; 0x30
   14d18:	bne	14c8c <__assert_fail@plt+0x37d4>
   14d1c:	ldrb	r3, [r0, #7]
   14d20:	cmp	r3, #0
   14d24:	bne	14c8c <__assert_fail@plt+0x37d4>
   14d28:	ldrb	r2, [r4]
   14d2c:	movw	r4, #43784	; 0xab08
   14d30:	movt	r4, #1
   14d34:	movw	r3, #43780	; 0xab04
   14d38:	movt	r3, #1
   14d3c:	cmp	r2, #96	; 0x60
   14d40:	movne	r4, r3
   14d44:	b	14c20 <__assert_fail@plt+0x3768>
   14d48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d4c:	strd	r6, [sp, #8]
   14d50:	strd	r8, [sp, #16]
   14d54:	strd	sl, [sp, #24]
   14d58:	str	lr, [sp, #32]
   14d5c:	sub	sp, sp, #116	; 0x74
   14d60:	str	r0, [sp, #64]	; 0x40
   14d64:	mov	r8, r1
   14d68:	str	r2, [sp, #48]	; 0x30
   14d6c:	str	r3, [sp, #24]
   14d70:	ldr	r7, [sp, #152]	; 0x98
   14d74:	bl	1126c <__ctype_get_mb_cur_max@plt>
   14d78:	str	r0, [sp, #76]	; 0x4c
   14d7c:	ldr	r3, [sp, #156]	; 0x9c
   14d80:	ubfx	r3, r3, #1, #1
   14d84:	str	r3, [sp, #32]
   14d88:	mov	r3, #1
   14d8c:	str	r3, [sp, #40]	; 0x28
   14d90:	mov	r3, #0
   14d94:	str	r3, [sp, #68]	; 0x44
   14d98:	str	r3, [sp, #36]	; 0x24
   14d9c:	str	r3, [sp, #28]
   14da0:	str	r3, [sp, #52]	; 0x34
   14da4:	str	r3, [sp, #60]	; 0x3c
   14da8:	str	r3, [sp, #72]	; 0x48
   14dac:	movw	r3, #43796	; 0xab14
   14db0:	movt	r3, #1
   14db4:	str	r3, [sp, #80]	; 0x50
   14db8:	mov	r9, r8
   14dbc:	mov	sl, r7
   14dc0:	cmp	sl, #10
   14dc4:	ldrls	pc, [pc, sl, lsl #2]
   14dc8:	b	14f8c <__assert_fail@plt+0x3ad4>
   14dcc:	andeq	r4, r1, ip, lsr #28
   14dd0:	andeq	r4, r1, r0, lsl #28
   14dd4:	andeq	r4, r1, r4, ror #30
   14dd8:	strdeq	r4, [r1], -r8
   14ddc:	andeq	r4, r1, r8, lsl pc
   14de0:	andeq	r4, r1, ip, lsr lr
   14de4:	andeq	r6, r1, r8, lsl #4
   14de8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14dec:	andeq	r4, r1, r8, ror lr
   14df0:	andeq	r4, r1, r8, ror lr
   14df4:	andeq	r4, r1, r8, ror lr
   14df8:	mov	r3, #1
   14dfc:	str	r3, [sp, #28]
   14e00:	mov	r3, #1
   14e04:	str	r3, [sp, #32]
   14e08:	str	r3, [sp, #52]	; 0x34
   14e0c:	movw	r3, #43792	; 0xab10
   14e10:	movt	r3, #1
   14e14:	str	r3, [sp, #60]	; 0x3c
   14e18:	mov	fp, #0
   14e1c:	mov	sl, #2
   14e20:	mov	r6, #0
   14e24:	ldr	r8, [sp, #64]	; 0x40
   14e28:	b	156a0 <__assert_fail@plt+0x41e8>
   14e2c:	mov	fp, sl
   14e30:	mov	r3, #0
   14e34:	str	r3, [sp, #32]
   14e38:	b	14e20 <__assert_fail@plt+0x3968>
   14e3c:	ldr	r3, [sp, #32]
   14e40:	cmp	r3, #0
   14e44:	bne	14fa4 <__assert_fail@plt+0x3aec>
   14e48:	cmp	r9, #0
   14e4c:	beq	14fc8 <__assert_fail@plt+0x3b10>
   14e50:	mov	r3, #34	; 0x22
   14e54:	ldr	r2, [sp, #64]	; 0x40
   14e58:	strb	r3, [r2]
   14e5c:	mov	fp, #1
   14e60:	str	fp, [sp, #28]
   14e64:	str	fp, [sp, #52]	; 0x34
   14e68:	movw	r3, #43772	; 0xaafc
   14e6c:	movt	r3, #1
   14e70:	str	r3, [sp, #60]	; 0x3c
   14e74:	b	14e20 <__assert_fail@plt+0x3968>
   14e78:	cmp	sl, #10
   14e7c:	bne	14eb0 <__assert_fail@plt+0x39f8>
   14e80:	ldr	r3, [sp, #32]
   14e84:	cmp	r3, #0
   14e88:	movne	fp, #0
   14e8c:	beq	14ed8 <__assert_fail@plt+0x3a20>
   14e90:	ldr	r0, [sp, #168]	; 0xa8
   14e94:	bl	11314 <strlen@plt>
   14e98:	str	r0, [sp, #52]	; 0x34
   14e9c:	ldr	r3, [sp, #168]	; 0xa8
   14ea0:	str	r3, [sp, #60]	; 0x3c
   14ea4:	mov	r3, #1
   14ea8:	str	r3, [sp, #28]
   14eac:	b	14e20 <__assert_fail@plt+0x3968>
   14eb0:	mov	r1, sl
   14eb4:	ldr	r0, [sp, #80]	; 0x50
   14eb8:	bl	14bf0 <__assert_fail@plt+0x3738>
   14ebc:	str	r0, [sp, #164]	; 0xa4
   14ec0:	mov	r1, sl
   14ec4:	movw	r0, #43792	; 0xab10
   14ec8:	movt	r0, #1
   14ecc:	bl	14bf0 <__assert_fail@plt+0x3738>
   14ed0:	str	r0, [sp, #168]	; 0xa8
   14ed4:	b	14e80 <__assert_fail@plt+0x39c8>
   14ed8:	ldr	r3, [sp, #164]	; 0xa4
   14edc:	ldrb	r3, [r3]
   14ee0:	cmp	r3, #0
   14ee4:	beq	14f10 <__assert_fail@plt+0x3a58>
   14ee8:	ldr	r2, [sp, #164]	; 0xa4
   14eec:	mov	fp, #0
   14ef0:	ldr	r1, [sp, #64]	; 0x40
   14ef4:	cmp	r9, fp
   14ef8:	strbhi	r3, [r1, fp]
   14efc:	add	fp, fp, #1
   14f00:	ldrb	r3, [r2, #1]!
   14f04:	cmp	r3, #0
   14f08:	bne	14ef4 <__assert_fail@plt+0x3a3c>
   14f0c:	b	14e90 <__assert_fail@plt+0x39d8>
   14f10:	mov	fp, #0
   14f14:	b	14e90 <__assert_fail@plt+0x39d8>
   14f18:	ldr	r3, [sp, #32]
   14f1c:	cmp	r3, #0
   14f20:	bne	14e00 <__assert_fail@plt+0x3948>
   14f24:	mov	r3, #1
   14f28:	str	r3, [sp, #28]
   14f2c:	cmp	r9, #0
   14f30:	beq	14fe4 <__assert_fail@plt+0x3b2c>
   14f34:	mov	r3, #39	; 0x27
   14f38:	ldr	r2, [sp, #64]	; 0x40
   14f3c:	strb	r3, [r2]
   14f40:	mov	r3, #0
   14f44:	str	r3, [sp, #32]
   14f48:	mov	fp, #1
   14f4c:	str	fp, [sp, #52]	; 0x34
   14f50:	movw	r3, #43792	; 0xab10
   14f54:	movt	r3, #1
   14f58:	str	r3, [sp, #60]	; 0x3c
   14f5c:	mov	sl, #2
   14f60:	b	14e20 <__assert_fail@plt+0x3968>
   14f64:	ldr	r3, [sp, #32]
   14f68:	cmp	r3, #0
   14f6c:	beq	14f2c <__assert_fail@plt+0x3a74>
   14f70:	mov	r3, #1
   14f74:	str	r3, [sp, #52]	; 0x34
   14f78:	movw	r3, #43792	; 0xab10
   14f7c:	movt	r3, #1
   14f80:	str	r3, [sp, #60]	; 0x3c
   14f84:	mov	fp, #0
   14f88:	b	14e20 <__assert_fail@plt+0x3968>
   14f8c:	bl	114a0 <abort@plt>
   14f90:	mov	fp, #0
   14f94:	str	fp, [sp, #32]
   14f98:	mov	r3, #1
   14f9c:	str	r3, [sp, #28]
   14fa0:	b	14e20 <__assert_fail@plt+0x3968>
   14fa4:	ldr	r3, [sp, #32]
   14fa8:	str	r3, [sp, #28]
   14fac:	mov	r3, #1
   14fb0:	str	r3, [sp, #52]	; 0x34
   14fb4:	movw	r3, #43772	; 0xaafc
   14fb8:	movt	r3, #1
   14fbc:	str	r3, [sp, #60]	; 0x3c
   14fc0:	mov	fp, #0
   14fc4:	b	14e20 <__assert_fail@plt+0x3968>
   14fc8:	mov	fp, #1
   14fcc:	str	fp, [sp, #28]
   14fd0:	str	fp, [sp, #52]	; 0x34
   14fd4:	movw	r3, #43772	; 0xaafc
   14fd8:	movt	r3, #1
   14fdc:	str	r3, [sp, #60]	; 0x3c
   14fe0:	b	14e20 <__assert_fail@plt+0x3968>
   14fe4:	mov	r3, #0
   14fe8:	str	r3, [sp, #32]
   14fec:	mov	fp, #1
   14ff0:	str	fp, [sp, #52]	; 0x34
   14ff4:	movw	r3, #43792	; 0xab10
   14ff8:	movt	r3, #1
   14ffc:	str	r3, [sp, #60]	; 0x3c
   15000:	mov	sl, #2
   15004:	b	14e20 <__assert_fail@plt+0x3968>
   15008:	mov	r3, r2
   1500c:	add	r4, r6, r2
   15010:	ldr	r2, [sp, #24]
   15014:	cmp	r3, #1
   15018:	movls	r3, #0
   1501c:	movhi	r3, #1
   15020:	cmn	r2, #1
   15024:	movne	r3, #0
   15028:	cmp	r3, #0
   1502c:	beq	1503c <__assert_fail@plt+0x3b84>
   15030:	ldr	r0, [sp, #48]	; 0x30
   15034:	bl	11314 <strlen@plt>
   15038:	str	r0, [sp, #24]
   1503c:	ldr	r3, [sp, #24]
   15040:	cmp	r4, r3
   15044:	bhi	16230 <__assert_fail@plt+0x4d78>
   15048:	ldr	r3, [sp, #48]	; 0x30
   1504c:	add	r4, r3, r6
   15050:	ldr	r2, [sp, #52]	; 0x34
   15054:	ldr	r1, [sp, #60]	; 0x3c
   15058:	mov	r0, r4
   1505c:	bl	111d0 <memcmp@plt>
   15060:	cmp	r0, #0
   15064:	bne	16230 <__assert_fail@plt+0x4d78>
   15068:	ldr	r3, [sp, #32]
   1506c:	cmp	r3, #0
   15070:	bne	15280 <__assert_fail@plt+0x3dc8>
   15074:	ldrb	r4, [r4]
   15078:	cmp	r4, #126	; 0x7e
   1507c:	ldrls	pc, [pc, r4, lsl #2]
   15080:	b	15b34 <__assert_fail@plt+0x467c>
   15084:	andeq	r5, r1, r4, asr #5
   15088:	andeq	r5, r1, r4, lsr fp
   1508c:	andeq	r5, r1, r4, lsr fp
   15090:	andeq	r5, r1, r4, lsr fp
   15094:	andeq	r5, r1, r4, lsr fp
   15098:	andeq	r5, r1, r4, lsr fp
   1509c:	andeq	r5, r1, r4, lsr fp
   150a0:	ldrdeq	r5, [r1], -ip
   150a4:	andeq	r5, r1, r0, ror #10
   150a8:	andeq	r5, r1, r4, lsl #18
   150ac:			; <UNDEFINED> instruction: 0x000159b0
   150b0:	andeq	r5, r1, r8, lsl r9
   150b4:	andeq	r5, r1, r4, ror r5
   150b8:	andeq	r5, r1, r8, lsl #11
   150bc:	andeq	r5, r1, r4, lsr fp
   150c0:	andeq	r5, r1, r4, lsr fp
   150c4:	andeq	r5, r1, r4, lsr fp
   150c8:	andeq	r5, r1, r4, lsr fp
   150cc:	andeq	r5, r1, r4, lsr fp
   150d0:	andeq	r5, r1, r4, lsr fp
   150d4:	andeq	r5, r1, r4, lsr fp
   150d8:	andeq	r5, r1, r4, lsr fp
   150dc:	andeq	r5, r1, r4, lsr fp
   150e0:	andeq	r5, r1, r4, lsr fp
   150e4:	andeq	r5, r1, r4, lsr fp
   150e8:	andeq	r5, r1, r4, lsr fp
   150ec:	andeq	r5, r1, r4, lsr fp
   150f0:	andeq	r5, r1, r4, lsr fp
   150f4:	andeq	r5, r1, r4, lsr fp
   150f8:	andeq	r5, r1, r4, lsr fp
   150fc:	andeq	r5, r1, r4, lsr fp
   15100:	andeq	r5, r1, r4, lsr fp
   15104:	andeq	r5, r1, r0, asr sl
   15108:	andeq	r5, r1, r4, ror sl
   1510c:	andeq	r5, r1, r4, ror sl
   15110:	andeq	r5, r1, ip, lsl #20
   15114:	andeq	r5, r1, r4, ror sl
   15118:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1511c:	andeq	r5, r1, r4, ror sl
   15120:	muleq	r1, r4, sl
   15124:	andeq	r5, r1, r4, ror sl
   15128:	andeq	r5, r1, r4, ror sl
   1512c:	andeq	r5, r1, r4, ror sl
   15130:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15134:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15138:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1513c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15140:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15144:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15148:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1514c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15150:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15154:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15158:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1515c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15160:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15164:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15168:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1516c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15170:	andeq	r5, r1, r4, ror sl
   15174:	andeq	r5, r1, r4, ror sl
   15178:	andeq	r5, r1, r4, ror sl
   1517c:	andeq	r5, r1, r4, ror sl
   15180:	strdeq	r5, [r1], -r4
   15184:	andeq	r5, r1, r4, lsr fp
   15188:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1518c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15190:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15194:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15198:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1519c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151a0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151a4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151a8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151ac:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151b0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151b4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151b8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151bc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151c0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151c4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151c8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151d0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151d4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151d8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151dc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151e0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151e4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151e8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151ec:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151f0:	andeq	r5, r1, r4, ror sl
   151f4:	andeq	r5, r1, ip, lsr #18
   151f8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   151fc:	andeq	r5, r1, r4, ror sl
   15200:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15204:	andeq	r5, r1, r4, ror sl
   15208:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1520c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15210:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15214:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15218:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1521c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15220:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15224:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15228:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1522c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15230:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15234:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15238:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1523c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15240:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15244:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15248:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1524c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15250:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15254:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15258:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1525c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15260:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15264:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15268:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1526c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   15270:	andeq	r5, r1, ip, ror #19
   15274:	andeq	r5, r1, r4, ror sl
   15278:	andeq	r5, r1, ip, ror #19
   1527c:	andeq	r5, r1, ip, lsl #20
   15280:	mov	r8, r9
   15284:	mov	r7, sl
   15288:	b	16188 <__assert_fail@plt+0x4cd0>
   1528c:	ldr	r3, [sp, #28]
   15290:	cmp	r3, #0
   15294:	bne	152b4 <__assert_fail@plt+0x3dfc>
   15298:	ldr	r3, [sp, #156]	; 0x9c
   1529c:	tst	r3, #1
   152a0:	bne	1569c <__assert_fail@plt+0x41e4>
   152a4:	ldr	r3, [sp, #28]
   152a8:	str	r3, [sp, #44]	; 0x2c
   152ac:	mov	r5, r3
   152b0:	b	155bc <__assert_fail@plt+0x4104>
   152b4:	ldr	r3, [sp, #32]
   152b8:	cmp	r3, #0
   152bc:	bne	16138 <__assert_fail@plt+0x4c80>
   152c0:	str	r3, [sp, #44]	; 0x2c
   152c4:	ldr	r3, [sp, #36]	; 0x24
   152c8:	eor	r3, r3, #1
   152cc:	cmp	sl, #2
   152d0:	movne	r3, #0
   152d4:	andeq	r3, r3, #1
   152d8:	cmp	r3, #0
   152dc:	beq	15334 <__assert_fail@plt+0x3e7c>
   152e0:	cmp	r9, fp
   152e4:	movhi	r2, #39	; 0x27
   152e8:	strbhi	r2, [r8, fp]
   152ec:	add	r2, fp, #1
   152f0:	cmp	r9, r2
   152f4:	movhi	r1, #36	; 0x24
   152f8:	strbhi	r1, [r8, r2]
   152fc:	add	r2, fp, #2
   15300:	cmp	r9, r2
   15304:	movhi	r1, #39	; 0x27
   15308:	strbhi	r1, [r8, r2]
   1530c:	add	r2, fp, #3
   15310:	cmp	r9, r2
   15314:	bls	161f4 <__assert_fail@plt+0x4d3c>
   15318:	mov	r1, #92	; 0x5c
   1531c:	strb	r1, [r8, r2]
   15320:	add	fp, fp, #4
   15324:	str	r3, [sp, #36]	; 0x24
   15328:	mov	r5, #0
   1532c:	mov	r4, #48	; 0x30
   15330:	b	15608 <__assert_fail@plt+0x4150>
   15334:	cmp	r9, fp
   15338:	bhi	15360 <__assert_fail@plt+0x3ea8>
   1533c:	add	r1, fp, #1
   15340:	ldr	r2, [sp, #56]	; 0x38
   15344:	cmp	r2, #0
   15348:	bne	15388 <__assert_fail@plt+0x3ed0>
   1534c:	mov	r3, r5
   15350:	ldr	r5, [sp, #56]	; 0x38
   15354:	mov	fp, r1
   15358:	mov	r4, #48	; 0x30
   1535c:	b	155bc <__assert_fail@plt+0x4104>
   15360:	mov	r2, #92	; 0x5c
   15364:	strb	r2, [r8, fp]
   15368:	add	r1, fp, #1
   1536c:	ldr	r2, [sp, #56]	; 0x38
   15370:	cmp	r2, #0
   15374:	moveq	r3, r5
   15378:	moveq	r5, r2
   1537c:	moveq	fp, r1
   15380:	moveq	r4, #48	; 0x30
   15384:	beq	15608 <__assert_fail@plt+0x4150>
   15388:	add	r2, r6, #1
   1538c:	ldr	r0, [sp, #24]
   15390:	cmp	r2, r0
   15394:	bcs	153b0 <__assert_fail@plt+0x3ef8>
   15398:	ldr	r0, [sp, #48]	; 0x30
   1539c:	ldrb	r2, [r0, r2]
   153a0:	sub	r2, r2, #48	; 0x30
   153a4:	uxtb	r2, r2
   153a8:	cmp	r2, #9
   153ac:	bls	153c8 <__assert_fail@plt+0x3f10>
   153b0:	mov	r2, r3
   153b4:	mov	r3, r5
   153b8:	mov	r5, r2
   153bc:	mov	fp, r1
   153c0:	mov	r4, #48	; 0x30
   153c4:	b	155e0 <__assert_fail@plt+0x4128>
   153c8:	cmp	r9, r1
   153cc:	movhi	r2, #48	; 0x30
   153d0:	strbhi	r2, [r8, r1]
   153d4:	add	r2, fp, #2
   153d8:	cmp	r9, r2
   153dc:	movhi	r1, #48	; 0x30
   153e0:	strbhi	r1, [r8, r2]
   153e4:	add	r1, fp, #3
   153e8:	b	153b0 <__assert_fail@plt+0x3ef8>
   153ec:	mov	r3, #0
   153f0:	str	r3, [sp, #44]	; 0x2c
   153f4:	cmp	sl, #2
   153f8:	beq	15414 <__assert_fail@plt+0x3f5c>
   153fc:	cmp	sl, #5
   15400:	beq	1542c <__assert_fail@plt+0x3f74>
   15404:	mov	r5, #0
   15408:	mov	r3, r5
   1540c:	mov	r4, #63	; 0x3f
   15410:	b	155bc <__assert_fail@plt+0x4104>
   15414:	ldr	r3, [sp, #32]
   15418:	cmp	r3, #0
   1541c:	bne	16144 <__assert_fail@plt+0x4c8c>
   15420:	mov	r5, r3
   15424:	mov	r4, #63	; 0x3f
   15428:	b	15b24 <__assert_fail@plt+0x466c>
   1542c:	ldr	r3, [sp, #156]	; 0x9c
   15430:	tst	r3, #4
   15434:	beq	15f5c <__assert_fail@plt+0x4aa4>
   15438:	add	r2, r6, #2
   1543c:	ldr	r3, [sp, #24]
   15440:	cmp	r2, r3
   15444:	bcs	15f6c <__assert_fail@plt+0x4ab4>
   15448:	ldr	r3, [sp, #48]	; 0x30
   1544c:	add	r3, r3, r6
   15450:	ldrb	r4, [r3, #1]
   15454:	cmp	r4, #63	; 0x3f
   15458:	movne	r5, #0
   1545c:	movne	r3, r5
   15460:	movne	r4, #63	; 0x3f
   15464:	bne	155bc <__assert_fail@plt+0x4104>
   15468:	ldr	r3, [sp, #48]	; 0x30
   1546c:	ldrb	r1, [r3, r2]
   15470:	sub	r3, r1, #33	; 0x21
   15474:	cmp	r3, #29
   15478:	ldrls	pc, [pc, r3, lsl #2]
   1547c:	b	15f7c <__assert_fail@plt+0x4ac4>
   15480:	strdeq	r5, [r1], -r8
   15484:	andeq	r5, r1, ip, ror pc
   15488:	andeq	r5, r1, ip, ror pc
   1548c:	andeq	r5, r1, ip, ror pc
   15490:	andeq	r5, r1, ip, ror pc
   15494:	andeq	r5, r1, ip, ror pc
   15498:	strdeq	r5, [r1], -r8
   1549c:	strdeq	r5, [r1], -r8
   154a0:	strdeq	r5, [r1], -r8
   154a4:	andeq	r5, r1, ip, ror pc
   154a8:	andeq	r5, r1, ip, ror pc
   154ac:	andeq	r5, r1, ip, ror pc
   154b0:	strdeq	r5, [r1], -r8
   154b4:	andeq	r5, r1, ip, ror pc
   154b8:	strdeq	r5, [r1], -r8
   154bc:	andeq	r5, r1, ip, ror pc
   154c0:	andeq	r5, r1, ip, ror pc
   154c4:	andeq	r5, r1, ip, ror pc
   154c8:	andeq	r5, r1, ip, ror pc
   154cc:	andeq	r5, r1, ip, ror pc
   154d0:	andeq	r5, r1, ip, ror pc
   154d4:	andeq	r5, r1, ip, ror pc
   154d8:	andeq	r5, r1, ip, ror pc
   154dc:	andeq	r5, r1, ip, ror pc
   154e0:	andeq	r5, r1, ip, ror pc
   154e4:	andeq	r5, r1, ip, ror pc
   154e8:	andeq	r5, r1, ip, ror pc
   154ec:	strdeq	r5, [r1], -r8
   154f0:	strdeq	r5, [r1], -r8
   154f4:	strdeq	r5, [r1], -r8
   154f8:	ldr	r3, [sp, #32]
   154fc:	cmp	r3, #0
   15500:	bne	161e8 <__assert_fail@plt+0x4d30>
   15504:	cmp	r9, fp
   15508:	movhi	r3, #63	; 0x3f
   1550c:	strbhi	r3, [r8, fp]
   15510:	add	r3, fp, #1
   15514:	cmp	r9, r3
   15518:	movhi	r0, #34	; 0x22
   1551c:	strbhi	r0, [r8, r3]
   15520:	add	r3, fp, #2
   15524:	cmp	r9, r3
   15528:	movhi	r0, #34	; 0x22
   1552c:	strbhi	r0, [r8, r3]
   15530:	add	r3, fp, #3
   15534:	cmp	r9, r3
   15538:	movhi	r0, #63	; 0x3f
   1553c:	strbhi	r0, [r8, r3]
   15540:	add	fp, fp, #4
   15544:	ldr	r3, [sp, #32]
   15548:	mov	r5, r3
   1554c:	mov	r4, r1
   15550:	mov	r6, r2
   15554:	b	155bc <__assert_fail@plt+0x4104>
   15558:	mov	r3, #0
   1555c:	str	r3, [sp, #44]	; 0x2c
   15560:	mov	r4, #8
   15564:	mov	r3, #98	; 0x62
   15568:	b	155a8 <__assert_fail@plt+0x40f0>
   1556c:	mov	r3, #0
   15570:	str	r3, [sp, #44]	; 0x2c
   15574:	mov	r4, #12
   15578:	mov	r3, #102	; 0x66
   1557c:	b	155a8 <__assert_fail@plt+0x40f0>
   15580:	mov	r3, #0
   15584:	str	r3, [sp, #44]	; 0x2c
   15588:	mov	r4, #13
   1558c:	mov	r3, #114	; 0x72
   15590:	ldr	r2, [sp, #32]
   15594:	cmp	sl, #2
   15598:	movne	r2, #0
   1559c:	andeq	r2, r2, #1
   155a0:	cmp	r2, #0
   155a4:	bne	159c8 <__assert_fail@plt+0x4510>
   155a8:	ldr	r2, [sp, #28]
   155ac:	cmp	r2, #0
   155b0:	bne	15fb0 <__assert_fail@plt+0x4af8>
   155b4:	mov	r5, r2
   155b8:	mov	r3, r2
   155bc:	ldr	r2, [sp, #28]
   155c0:	eor	r2, r2, #1
   155c4:	cmp	sl, #2
   155c8:	orreq	r2, r2, #1
   155cc:	eor	r2, r2, #1
   155d0:	ldr	r1, [sp, #32]
   155d4:	orr	r2, r1, r2
   155d8:	tst	r2, #255	; 0xff
   155dc:	beq	15608 <__assert_fail@plt+0x4150>
   155e0:	ldr	r2, [sp, #160]	; 0xa0
   155e4:	cmp	r2, #0
   155e8:	beq	15608 <__assert_fail@plt+0x4150>
   155ec:	ubfx	r1, r4, #5, #8
   155f0:	and	r2, r4, #31
   155f4:	ldr	r0, [sp, #160]	; 0xa0
   155f8:	ldr	r1, [r0, r1, lsl #2]
   155fc:	lsr	r2, r1, r2
   15600:	tst	r2, #1
   15604:	bne	15614 <__assert_fail@plt+0x415c>
   15608:	ldr	r2, [sp, #44]	; 0x2c
   1560c:	cmp	r2, #0
   15610:	beq	15968 <__assert_fail@plt+0x44b0>
   15614:	ldr	r3, [sp, #32]
   15618:	cmp	r3, #0
   1561c:	bne	16168 <__assert_fail@plt+0x4cb0>
   15620:	ldr	r3, [sp, #36]	; 0x24
   15624:	eor	r3, r3, #1
   15628:	cmp	sl, #2
   1562c:	movne	r3, #0
   15630:	andeq	r3, r3, #1
   15634:	cmp	r3, #0
   15638:	beq	15670 <__assert_fail@plt+0x41b8>
   1563c:	cmp	r9, fp
   15640:	movhi	r2, #39	; 0x27
   15644:	strbhi	r2, [r8, fp]
   15648:	add	r2, fp, #1
   1564c:	cmp	r9, r2
   15650:	movhi	r1, #36	; 0x24
   15654:	strbhi	r1, [r8, r2]
   15658:	add	r2, fp, #2
   1565c:	cmp	r9, r2
   15660:	movhi	r1, #39	; 0x27
   15664:	strbhi	r1, [r8, r2]
   15668:	add	fp, fp, #3
   1566c:	str	r3, [sp, #36]	; 0x24
   15670:	cmp	r9, fp
   15674:	movhi	r3, #92	; 0x5c
   15678:	strbhi	r3, [r8, fp]
   1567c:	add	fp, fp, #1
   15680:	cmp	fp, r9
   15684:	strbcc	r4, [r8, fp]
   15688:	add	fp, fp, #1
   1568c:	cmp	r5, #0
   15690:	ldr	r3, [sp, #40]	; 0x28
   15694:	moveq	r3, r5
   15698:	str	r3, [sp, #40]	; 0x28
   1569c:	add	r6, r6, #1
   156a0:	ldr	r3, [sp, #24]
   156a4:	cmn	r3, #1
   156a8:	beq	15fd8 <__assert_fail@plt+0x4b20>
   156ac:	ldr	r3, [sp, #24]
   156b0:	subs	r5, r3, r6
   156b4:	movne	r5, #1
   156b8:	cmp	r5, #0
   156bc:	beq	15fec <__assert_fail@plt+0x4b34>
   156c0:	ldr	r3, [sp, #28]
   156c4:	cmp	sl, #2
   156c8:	moveq	r3, #0
   156cc:	andne	r3, r3, #1
   156d0:	str	r3, [sp, #56]	; 0x38
   156d4:	ldr	r2, [sp, #52]	; 0x34
   156d8:	adds	r7, r2, #0
   156dc:	movne	r7, #1
   156e0:	ands	r3, r3, r7
   156e4:	str	r3, [sp, #44]	; 0x2c
   156e8:	bne	15008 <__assert_fail@plt+0x3b50>
   156ec:	ldr	r3, [sp, #48]	; 0x30
   156f0:	ldrb	r4, [r3, r6]
   156f4:	cmp	r4, #126	; 0x7e
   156f8:	ldrls	pc, [pc, r4, lsl #2]
   156fc:	b	15b34 <__assert_fail@plt+0x467c>
   15700:	andeq	r5, r1, ip, lsl #5
   15704:	andeq	r5, r1, r4, lsr fp
   15708:	andeq	r5, r1, r4, lsr fp
   1570c:	andeq	r5, r1, r4, lsr fp
   15710:	andeq	r5, r1, r4, lsr fp
   15714:	andeq	r5, r1, r4, lsr fp
   15718:	andeq	r5, r1, r4, lsr fp
   1571c:	ldrdeq	r5, [r1], -r4
   15720:	andeq	r5, r1, r0, ror #10
   15724:	andeq	r5, r1, r4, lsl #18
   15728:	andeq	r5, r1, r8, lsr #19
   1572c:	andeq	r5, r1, r8, lsl r9
   15730:	andeq	r5, r1, r4, ror r5
   15734:	andeq	r5, r1, r8, lsl #11
   15738:	andeq	r5, r1, r4, lsr fp
   1573c:	andeq	r5, r1, r4, lsr fp
   15740:	andeq	r5, r1, r4, lsr fp
   15744:	andeq	r5, r1, r4, lsr fp
   15748:	andeq	r5, r1, r4, lsr fp
   1574c:	andeq	r5, r1, r4, lsr fp
   15750:	andeq	r5, r1, r4, lsr fp
   15754:	andeq	r5, r1, r4, lsr fp
   15758:	andeq	r5, r1, r4, lsr fp
   1575c:	andeq	r5, r1, r4, lsr fp
   15760:	andeq	r5, r1, r4, lsr fp
   15764:	andeq	r5, r1, r4, lsr fp
   15768:	andeq	r5, r1, r4, lsr fp
   1576c:	andeq	r5, r1, r4, lsr fp
   15770:	andeq	r5, r1, r4, lsr fp
   15774:	andeq	r5, r1, r4, lsr fp
   15778:	andeq	r5, r1, r4, lsr fp
   1577c:	andeq	r5, r1, r4, lsr fp
   15780:	andeq	r5, r1, r0, asr sl
   15784:	andeq	r5, r1, ip, asr #20
   15788:	andeq	r5, r1, ip, asr #20
   1578c:	andeq	r5, r1, ip, lsl #20
   15790:	andeq	r5, r1, ip, asr #20
   15794:	andeq	r5, r1, r4, asr pc
   15798:	andeq	r5, r1, ip, asr #20
   1579c:	muleq	r1, r4, sl
   157a0:	andeq	r5, r1, ip, asr #20
   157a4:	andeq	r5, r1, ip, asr #20
   157a8:	andeq	r5, r1, ip, asr #20
   157ac:	andeq	r5, r1, r4, asr pc
   157b0:	andeq	r5, r1, r4, asr pc
   157b4:	andeq	r5, r1, r4, asr pc
   157b8:	andeq	r5, r1, r4, asr pc
   157bc:	andeq	r5, r1, r4, asr pc
   157c0:	andeq	r5, r1, r4, asr pc
   157c4:	andeq	r5, r1, r4, asr pc
   157c8:	andeq	r5, r1, r4, asr pc
   157cc:	andeq	r5, r1, r4, asr pc
   157d0:	andeq	r5, r1, r4, asr pc
   157d4:	andeq	r5, r1, r4, asr pc
   157d8:	andeq	r5, r1, r4, asr pc
   157dc:	andeq	r5, r1, r4, asr pc
   157e0:	andeq	r5, r1, r4, asr pc
   157e4:	andeq	r5, r1, r4, asr pc
   157e8:	andeq	r5, r1, r4, asr pc
   157ec:	andeq	r5, r1, ip, asr #20
   157f0:	andeq	r5, r1, ip, asr #20
   157f4:	andeq	r5, r1, ip, asr #20
   157f8:	andeq	r5, r1, ip, asr #20
   157fc:	strdeq	r5, [r1], -r4
   15800:	andeq	r5, r1, r4, lsr fp
   15804:	andeq	r5, r1, r4, asr pc
   15808:	andeq	r5, r1, r4, asr pc
   1580c:	andeq	r5, r1, r4, asr pc
   15810:	andeq	r5, r1, r4, asr pc
   15814:	andeq	r5, r1, r4, asr pc
   15818:	andeq	r5, r1, r4, asr pc
   1581c:	andeq	r5, r1, r4, asr pc
   15820:	andeq	r5, r1, r4, asr pc
   15824:	andeq	r5, r1, r4, asr pc
   15828:	andeq	r5, r1, r4, asr pc
   1582c:	andeq	r5, r1, r4, asr pc
   15830:	andeq	r5, r1, r4, asr pc
   15834:	andeq	r5, r1, r4, asr pc
   15838:	andeq	r5, r1, r4, asr pc
   1583c:	andeq	r5, r1, r4, asr pc
   15840:	andeq	r5, r1, r4, asr pc
   15844:	andeq	r5, r1, r4, asr pc
   15848:	andeq	r5, r1, r4, asr pc
   1584c:	andeq	r5, r1, r4, asr pc
   15850:	andeq	r5, r1, r4, asr pc
   15854:	andeq	r5, r1, r4, asr pc
   15858:	andeq	r5, r1, r4, asr pc
   1585c:	andeq	r5, r1, r4, asr pc
   15860:	andeq	r5, r1, r4, asr pc
   15864:	andeq	r5, r1, r4, asr pc
   15868:	andeq	r5, r1, r4, asr pc
   1586c:	andeq	r5, r1, ip, asr #20
   15870:	andeq	r5, r1, ip, lsr #18
   15874:	andeq	r5, r1, r4, asr pc
   15878:	andeq	r5, r1, ip, asr #20
   1587c:	andeq	r5, r1, r4, asr pc
   15880:	andeq	r5, r1, ip, asr #20
   15884:	andeq	r5, r1, r4, asr pc
   15888:	andeq	r5, r1, r4, asr pc
   1588c:	andeq	r5, r1, r4, asr pc
   15890:	andeq	r5, r1, r4, asr pc
   15894:	andeq	r5, r1, r4, asr pc
   15898:	andeq	r5, r1, r4, asr pc
   1589c:	andeq	r5, r1, r4, asr pc
   158a0:	andeq	r5, r1, r4, asr pc
   158a4:	andeq	r5, r1, r4, asr pc
   158a8:	andeq	r5, r1, r4, asr pc
   158ac:	andeq	r5, r1, r4, asr pc
   158b0:	andeq	r5, r1, r4, asr pc
   158b4:	andeq	r5, r1, r4, asr pc
   158b8:	andeq	r5, r1, r4, asr pc
   158bc:	andeq	r5, r1, r4, asr pc
   158c0:	andeq	r5, r1, r4, asr pc
   158c4:	andeq	r5, r1, r4, asr pc
   158c8:	andeq	r5, r1, r4, asr pc
   158cc:	andeq	r5, r1, r4, asr pc
   158d0:	andeq	r5, r1, r4, asr pc
   158d4:	andeq	r5, r1, r4, asr pc
   158d8:	andeq	r5, r1, r4, asr pc
   158dc:	andeq	r5, r1, r4, asr pc
   158e0:	andeq	r5, r1, r4, asr pc
   158e4:	andeq	r5, r1, r4, asr pc
   158e8:	andeq	r5, r1, r4, asr pc
   158ec:	andeq	r5, r1, ip, ror #19
   158f0:	andeq	r5, r1, ip, asr #20
   158f4:	andeq	r5, r1, ip, ror #19
   158f8:	andeq	r5, r1, ip, lsl #20
   158fc:	mov	r3, #0
   15900:	str	r3, [sp, #44]	; 0x2c
   15904:	mov	r4, #9
   15908:	mov	r3, #116	; 0x74
   1590c:	b	15590 <__assert_fail@plt+0x40d8>
   15910:	mov	r3, #0
   15914:	str	r3, [sp, #44]	; 0x2c
   15918:	mov	r4, #11
   1591c:	mov	r3, #118	; 0x76
   15920:	b	155a8 <__assert_fail@plt+0x40f0>
   15924:	mov	r3, #0
   15928:	str	r3, [sp, #44]	; 0x2c
   1592c:	cmp	sl, #2
   15930:	beq	15954 <__assert_fail@plt+0x449c>
   15934:	ldr	r3, [sp, #28]
   15938:	ldr	r2, [sp, #32]
   1593c:	and	r3, r3, r2
   15940:	tst	r7, r3
   15944:	bne	15fc8 <__assert_fail@plt+0x4b10>
   15948:	mov	r4, #92	; 0x5c
   1594c:	mov	r3, r4
   15950:	b	155a8 <__assert_fail@plt+0x40f0>
   15954:	ldr	r3, [sp, #32]
   15958:	cmp	r3, #0
   1595c:	bne	16150 <__assert_fail@plt+0x4c98>
   15960:	mov	r5, r3
   15964:	mov	r4, #92	; 0x5c
   15968:	eor	r3, r3, #1
   1596c:	ldr	r2, [sp, #36]	; 0x24
   15970:	and	r3, r3, r2
   15974:	tst	r3, #255	; 0xff
   15978:	beq	15680 <__assert_fail@plt+0x41c8>
   1597c:	cmp	r9, fp
   15980:	movhi	r3, #39	; 0x27
   15984:	strbhi	r3, [r8, fp]
   15988:	add	r3, fp, #1
   1598c:	cmp	r9, r3
   15990:	movhi	r2, #39	; 0x27
   15994:	strbhi	r2, [r8, r3]
   15998:	add	fp, fp, #2
   1599c:	mov	r3, #0
   159a0:	str	r3, [sp, #36]	; 0x24
   159a4:	b	15680 <__assert_fail@plt+0x41c8>
   159a8:	mov	r3, #110	; 0x6e
   159ac:	b	15590 <__assert_fail@plt+0x40d8>
   159b0:	mov	r3, #110	; 0x6e
   159b4:	b	15590 <__assert_fail@plt+0x40d8>
   159b8:	mov	r3, #0
   159bc:	str	r3, [sp, #44]	; 0x2c
   159c0:	mov	r3, #110	; 0x6e
   159c4:	b	15590 <__assert_fail@plt+0x40d8>
   159c8:	mov	r8, r9
   159cc:	mov	r7, #2
   159d0:	b	16170 <__assert_fail@plt+0x4cb8>
   159d4:	mov	r3, #97	; 0x61
   159d8:	b	155a8 <__assert_fail@plt+0x40f0>
   159dc:	mov	r3, #97	; 0x61
   159e0:	b	155a8 <__assert_fail@plt+0x40f0>
   159e4:	mov	r3, #0
   159e8:	str	r3, [sp, #44]	; 0x2c
   159ec:	ldr	r3, [sp, #24]
   159f0:	cmn	r3, #1
   159f4:	beq	15a20 <__assert_fail@plt+0x4568>
   159f8:	ldr	r3, [sp, #24]
   159fc:	subs	r3, r3, #1
   15a00:	movne	r3, #1
   15a04:	cmp	r3, #0
   15a08:	bne	15f88 <__assert_fail@plt+0x4ad0>
   15a0c:	cmp	r6, #0
   15a10:	beq	15a50 <__assert_fail@plt+0x4598>
   15a14:	mov	r5, #0
   15a18:	mov	r3, r5
   15a1c:	b	155bc <__assert_fail@plt+0x4104>
   15a20:	ldr	r3, [sp, #48]	; 0x30
   15a24:	ldrb	r3, [r3, #1]
   15a28:	adds	r3, r3, #0
   15a2c:	movne	r3, #1
   15a30:	b	15a04 <__assert_fail@plt+0x454c>
   15a34:	mov	r3, #0
   15a38:	str	r3, [sp, #44]	; 0x2c
   15a3c:	b	15a0c <__assert_fail@plt+0x4554>
   15a40:	mov	r3, #0
   15a44:	str	r3, [sp, #44]	; 0x2c
   15a48:	b	15a50 <__assert_fail@plt+0x4598>
   15a4c:	ldr	r5, [sp, #44]	; 0x2c
   15a50:	ldr	r3, [sp, #32]
   15a54:	cmp	sl, #2
   15a58:	movne	r3, #0
   15a5c:	andeq	r3, r3, #1
   15a60:	cmp	r3, #0
   15a64:	beq	155bc <__assert_fail@plt+0x4104>
   15a68:	mov	r8, r9
   15a6c:	mov	r7, #2
   15a70:	b	16170 <__assert_fail@plt+0x4cb8>
   15a74:	ldr	r5, [sp, #32]
   15a78:	b	15a50 <__assert_fail@plt+0x4598>
   15a7c:	mov	r3, #0
   15a80:	str	r3, [sp, #44]	; 0x2c
   15a84:	mov	r5, r3
   15a88:	b	15a50 <__assert_fail@plt+0x4598>
   15a8c:	mov	r3, #0
   15a90:	str	r3, [sp, #44]	; 0x2c
   15a94:	cmp	sl, #2
   15a98:	strne	r5, [sp, #68]	; 0x44
   15a9c:	movne	r3, #0
   15aa0:	movne	r4, #39	; 0x27
   15aa4:	bne	155bc <__assert_fail@plt+0x4104>
   15aa8:	ldr	r3, [sp, #32]
   15aac:	cmp	r3, #0
   15ab0:	bne	1615c <__assert_fail@plt+0x4ca4>
   15ab4:	ldr	r3, [sp, #72]	; 0x48
   15ab8:	clz	r3, r3
   15abc:	lsr	r3, r3, #5
   15ac0:	cmp	r9, #0
   15ac4:	moveq	r3, #0
   15ac8:	cmp	r3, #0
   15acc:	movne	r3, #0
   15ad0:	bne	15af8 <__assert_fail@plt+0x4640>
   15ad4:	cmp	r9, fp
   15ad8:	movhi	r3, #39	; 0x27
   15adc:	strbhi	r3, [r8, fp]
   15ae0:	add	r3, fp, #1
   15ae4:	cmp	r9, r3
   15ae8:	movhi	r2, #92	; 0x5c
   15aec:	strbhi	r2, [r8, r3]
   15af0:	mov	r3, r9
   15af4:	ldr	r9, [sp, #72]	; 0x48
   15af8:	add	r2, fp, #2
   15afc:	cmp	r2, r3
   15b00:	movcc	r1, #39	; 0x27
   15b04:	strbcc	r1, [r8, r2]
   15b08:	add	fp, fp, #3
   15b0c:	str	r5, [sp, #68]	; 0x44
   15b10:	ldr	r2, [sp, #32]
   15b14:	str	r2, [sp, #36]	; 0x24
   15b18:	str	r9, [sp, #72]	; 0x48
   15b1c:	mov	r9, r3
   15b20:	mov	r4, #39	; 0x27
   15b24:	mov	r3, #0
   15b28:	b	15608 <__assert_fail@plt+0x4150>
   15b2c:	mov	r3, #0
   15b30:	str	r3, [sp, #44]	; 0x2c
   15b34:	ldr	r7, [sp, #76]	; 0x4c
   15b38:	cmp	r7, #1
   15b3c:	bne	15b74 <__assert_fail@plt+0x46bc>
   15b40:	bl	112fc <__ctype_b_loc@plt>
   15b44:	ldr	r2, [r0]
   15b48:	lsl	r3, r4, #1
   15b4c:	ldrh	r5, [r2, r3]
   15b50:	ubfx	r5, r5, #14, #1
   15b54:	mov	ip, r7
   15b58:	eor	r3, r5, #1
   15b5c:	ldr	r2, [sp, #28]
   15b60:	and	r3, r3, r2
   15b64:	ands	r3, r3, #255	; 0xff
   15b68:	beq	155bc <__assert_fail@plt+0x4104>
   15b6c:	mov	r5, #0
   15b70:	b	15dd0 <__assert_fail@plt+0x4918>
   15b74:	mov	r2, #0
   15b78:	mov	r3, #0
   15b7c:	strd	r2, [sp, #104]	; 0x68
   15b80:	ldr	r3, [sp, #24]
   15b84:	cmn	r3, #1
   15b88:	beq	15bac <__assert_fail@plt+0x46f4>
   15b8c:	mov	r3, #0
   15b90:	str	r4, [sp, #88]	; 0x58
   15b94:	str	fp, [sp, #92]	; 0x5c
   15b98:	str	r8, [sp, #56]	; 0x38
   15b9c:	mov	r8, r3
   15ba0:	str	r9, [sp, #84]	; 0x54
   15ba4:	ldr	r9, [sp, #48]	; 0x30
   15ba8:	b	15cf8 <__assert_fail@plt+0x4840>
   15bac:	ldr	r0, [sp, #48]	; 0x30
   15bb0:	bl	11314 <strlen@plt>
   15bb4:	str	r0, [sp, #24]
   15bb8:	b	15b8c <__assert_fail@plt+0x46d4>
   15bbc:	mov	r1, fp
   15bc0:	ldr	r4, [sp, #88]	; 0x58
   15bc4:	mov	r2, r8
   15bc8:	mov	ip, r8
   15bcc:	ldr	fp, [sp, #92]	; 0x5c
   15bd0:	ldr	r8, [sp, #56]	; 0x38
   15bd4:	ldr	r9, [sp, #84]	; 0x54
   15bd8:	ldr	r0, [sp, #24]
   15bdc:	cmp	r7, r0
   15be0:	bcs	15d98 <__assert_fail@plt+0x48e0>
   15be4:	ldrb	r3, [r1]
   15be8:	cmp	r3, #0
   15bec:	beq	15da0 <__assert_fail@plt+0x48e8>
   15bf0:	mov	r3, r1
   15bf4:	add	r2, r2, #1
   15bf8:	add	r1, r6, r2
   15bfc:	cmp	r0, r1
   15c00:	bls	15da8 <__assert_fail@plt+0x48f0>
   15c04:	ldrb	r1, [r3, #1]!
   15c08:	cmp	r1, #0
   15c0c:	bne	15bf4 <__assert_fail@plt+0x473c>
   15c10:	mov	ip, r2
   15c14:	mov	r5, #0
   15c18:	b	15dc8 <__assert_fail@plt+0x4910>
   15c1c:	ldr	r3, [sp, #56]	; 0x38
   15c20:	str	r3, [sp, #64]	; 0x40
   15c24:	ldr	r8, [sp, #84]	; 0x54
   15c28:	mov	r7, #2
   15c2c:	b	16170 <__assert_fail@plt+0x4cb8>
   15c30:	cmp	r2, r7
   15c34:	beq	15cd4 <__assert_fail@plt+0x481c>
   15c38:	ldrb	r3, [r2], #1
   15c3c:	sub	r3, r3, #91	; 0x5b
   15c40:	cmp	r3, #33	; 0x21
   15c44:	ldrls	pc, [pc, r3, lsl #2]
   15c48:	b	15c30 <__assert_fail@plt+0x4778>
   15c4c:	andeq	r5, r1, ip, lsl ip
   15c50:	andeq	r5, r1, ip, lsl ip
   15c54:	andeq	r5, r1, r0, lsr ip
   15c58:	andeq	r5, r1, ip, lsl ip
   15c5c:	andeq	r5, r1, r0, lsr ip
   15c60:	andeq	r5, r1, ip, lsl ip
   15c64:	andeq	r5, r1, r0, lsr ip
   15c68:	andeq	r5, r1, r0, lsr ip
   15c6c:	andeq	r5, r1, r0, lsr ip
   15c70:	andeq	r5, r1, r0, lsr ip
   15c74:	andeq	r5, r1, r0, lsr ip
   15c78:	andeq	r5, r1, r0, lsr ip
   15c7c:	andeq	r5, r1, r0, lsr ip
   15c80:	andeq	r5, r1, r0, lsr ip
   15c84:	andeq	r5, r1, r0, lsr ip
   15c88:	andeq	r5, r1, r0, lsr ip
   15c8c:	andeq	r5, r1, r0, lsr ip
   15c90:	andeq	r5, r1, r0, lsr ip
   15c94:	andeq	r5, r1, r0, lsr ip
   15c98:	andeq	r5, r1, r0, lsr ip
   15c9c:	andeq	r5, r1, r0, lsr ip
   15ca0:	andeq	r5, r1, r0, lsr ip
   15ca4:	andeq	r5, r1, r0, lsr ip
   15ca8:	andeq	r5, r1, r0, lsr ip
   15cac:	andeq	r5, r1, r0, lsr ip
   15cb0:	andeq	r5, r1, r0, lsr ip
   15cb4:	andeq	r5, r1, r0, lsr ip
   15cb8:	andeq	r5, r1, r0, lsr ip
   15cbc:	andeq	r5, r1, r0, lsr ip
   15cc0:	andeq	r5, r1, r0, lsr ip
   15cc4:	andeq	r5, r1, r0, lsr ip
   15cc8:	andeq	r5, r1, r0, lsr ip
   15ccc:	andeq	r5, r1, r0, lsr ip
   15cd0:	andeq	r5, r1, ip, lsl ip
   15cd4:	ldr	r0, [sp, #100]	; 0x64
   15cd8:	bl	11224 <iswprint@plt>
   15cdc:	cmp	r0, #0
   15ce0:	moveq	r5, #0
   15ce4:	add	r8, r8, r4
   15ce8:	add	r0, sp, #104	; 0x68
   15cec:	bl	111ac <mbsinit@plt>
   15cf0:	cmp	r0, #0
   15cf4:	bne	15d64 <__assert_fail@plt+0x48ac>
   15cf8:	add	r7, r6, r8
   15cfc:	add	fp, r9, r7
   15d00:	add	r3, sp, #104	; 0x68
   15d04:	ldr	r2, [sp, #24]
   15d08:	sub	r2, r2, r7
   15d0c:	mov	r1, fp
   15d10:	add	r0, sp, #100	; 0x64
   15d14:	bl	1927c <__assert_fail@plt+0x7dc4>
   15d18:	subs	r4, r0, #0
   15d1c:	beq	15db4 <__assert_fail@plt+0x48fc>
   15d20:	cmn	r4, #1
   15d24:	beq	15d7c <__assert_fail@plt+0x48c4>
   15d28:	cmn	r4, #2
   15d2c:	beq	15bbc <__assert_fail@plt+0x4704>
   15d30:	ldr	r3, [sp, #32]
   15d34:	cmp	sl, #2
   15d38:	movne	r3, #0
   15d3c:	andeq	r3, r3, #1
   15d40:	cmp	r3, #0
   15d44:	beq	15cd4 <__assert_fail@plt+0x481c>
   15d48:	cmp	r4, #1
   15d4c:	bls	15cd4 <__assert_fail@plt+0x481c>
   15d50:	add	r2, r7, #1
   15d54:	add	r2, r9, r2
   15d58:	add	r3, r9, r4
   15d5c:	add	r7, r3, r7
   15d60:	b	15c38 <__assert_fail@plt+0x4780>
   15d64:	ldr	r4, [sp, #88]	; 0x58
   15d68:	mov	ip, r8
   15d6c:	ldr	fp, [sp, #92]	; 0x5c
   15d70:	ldr	r8, [sp, #56]	; 0x38
   15d74:	ldr	r9, [sp, #84]	; 0x54
   15d78:	b	15dc8 <__assert_fail@plt+0x4910>
   15d7c:	ldr	r4, [sp, #88]	; 0x58
   15d80:	mov	ip, r8
   15d84:	ldr	fp, [sp, #92]	; 0x5c
   15d88:	ldr	r8, [sp, #56]	; 0x38
   15d8c:	ldr	r9, [sp, #84]	; 0x54
   15d90:	mov	r5, #0
   15d94:	b	15dc8 <__assert_fail@plt+0x4910>
   15d98:	mov	r5, #0
   15d9c:	b	15dc8 <__assert_fail@plt+0x4910>
   15da0:	mov	r5, #0
   15da4:	b	15dc8 <__assert_fail@plt+0x4910>
   15da8:	mov	ip, r2
   15dac:	mov	r5, #0
   15db0:	b	15dc8 <__assert_fail@plt+0x4910>
   15db4:	ldr	r4, [sp, #88]	; 0x58
   15db8:	mov	ip, r8
   15dbc:	ldr	fp, [sp, #92]	; 0x5c
   15dc0:	ldr	r8, [sp, #56]	; 0x38
   15dc4:	ldr	r9, [sp, #84]	; 0x54
   15dc8:	cmp	ip, #1
   15dcc:	bls	15b58 <__assert_fail@plt+0x46a0>
   15dd0:	add	lr, r6, ip
   15dd4:	ldr	r3, [sp, #48]	; 0x30
   15dd8:	add	r1, r3, r6
   15ddc:	mov	r3, #0
   15de0:	eor	r0, r5, #1
   15de4:	ldr	r2, [sp, #28]
   15de8:	and	r0, r0, r2
   15dec:	uxtb	r0, r0
   15df0:	str	r0, [sp, #56]	; 0x38
   15df4:	mov	r7, #92	; 0x5c
   15df8:	ldr	ip, [sp, #36]	; 0x24
   15dfc:	str	r5, [sp, #84]	; 0x54
   15e00:	ldr	r2, [sp, #44]	; 0x2c
   15e04:	b	15e74 <__assert_fail@plt+0x49bc>
   15e08:	cmp	r2, #0
   15e0c:	beq	15e1c <__assert_fail@plt+0x4964>
   15e10:	cmp	r9, fp
   15e14:	strbhi	r7, [r8, fp]
   15e18:	add	fp, fp, #1
   15e1c:	add	r5, r6, #1
   15e20:	cmp	r5, lr
   15e24:	bcs	15f30 <__assert_fail@plt+0x4a78>
   15e28:	eor	r2, r3, #1
   15e2c:	and	r2, r2, ip
   15e30:	ands	r2, r2, #255	; 0xff
   15e34:	beq	15f4c <__assert_fail@plt+0x4a94>
   15e38:	cmp	r9, fp
   15e3c:	movhi	r2, #39	; 0x27
   15e40:	strbhi	r2, [r8, fp]
   15e44:	add	r2, fp, #1
   15e48:	cmp	r9, r2
   15e4c:	movhi	ip, #39	; 0x27
   15e50:	strbhi	ip, [r8, r2]
   15e54:	add	fp, fp, #2
   15e58:	ldr	ip, [sp, #56]	; 0x38
   15e5c:	mov	r2, ip
   15e60:	mov	r6, r5
   15e64:	cmp	r9, fp
   15e68:	strbhi	r4, [r8, fp]
   15e6c:	add	fp, fp, #1
   15e70:	ldrb	r4, [r1, #1]!
   15e74:	cmp	r0, #0
   15e78:	beq	15e08 <__assert_fail@plt+0x4950>
   15e7c:	ldr	r3, [sp, #32]
   15e80:	cmp	r3, #0
   15e84:	bne	16118 <__assert_fail@plt+0x4c60>
   15e88:	eor	r3, ip, #1
   15e8c:	cmp	sl, #2
   15e90:	movne	r3, #0
   15e94:	andeq	r3, r3, #1
   15e98:	cmp	r3, #0
   15e9c:	beq	15ed4 <__assert_fail@plt+0x4a1c>
   15ea0:	cmp	r9, fp
   15ea4:	movhi	ip, #39	; 0x27
   15ea8:	strbhi	ip, [r8, fp]
   15eac:	add	ip, fp, #1
   15eb0:	cmp	r9, ip
   15eb4:	movhi	r5, #36	; 0x24
   15eb8:	strbhi	r5, [r8, ip]
   15ebc:	add	ip, fp, #2
   15ec0:	cmp	r9, ip
   15ec4:	movhi	r5, #39	; 0x27
   15ec8:	strbhi	r5, [r8, ip]
   15ecc:	add	fp, fp, #3
   15ed0:	mov	ip, r3
   15ed4:	cmp	r9, fp
   15ed8:	strbhi	r7, [r8, fp]
   15edc:	add	r3, fp, #1
   15ee0:	cmp	r9, r3
   15ee4:	bls	15ef4 <__assert_fail@plt+0x4a3c>
   15ee8:	lsr	r5, r4, #6
   15eec:	add	r5, r5, #48	; 0x30
   15ef0:	strb	r5, [r8, r3]
   15ef4:	add	r3, fp, #2
   15ef8:	cmp	r9, r3
   15efc:	bls	15f0c <__assert_fail@plt+0x4a54>
   15f00:	ubfx	r5, r4, #3, #3
   15f04:	add	r5, r5, #48	; 0x30
   15f08:	strb	r5, [r8, r3]
   15f0c:	add	fp, fp, #3
   15f10:	and	r4, r4, #7
   15f14:	add	r4, r4, #48	; 0x30
   15f18:	add	r5, r6, #1
   15f1c:	cmp	r5, lr
   15f20:	bcs	15f3c <__assert_fail@plt+0x4a84>
   15f24:	ldr	r3, [sp, #56]	; 0x38
   15f28:	mov	r6, r5
   15f2c:	b	15e64 <__assert_fail@plt+0x49ac>
   15f30:	str	ip, [sp, #36]	; 0x24
   15f34:	ldr	r5, [sp, #84]	; 0x54
   15f38:	b	15968 <__assert_fail@plt+0x44b0>
   15f3c:	str	ip, [sp, #36]	; 0x24
   15f40:	ldr	r5, [sp, #84]	; 0x54
   15f44:	mov	r3, r0
   15f48:	b	15968 <__assert_fail@plt+0x44b0>
   15f4c:	mov	r6, r5
   15f50:	b	15e64 <__assert_fail@plt+0x49ac>
   15f54:	ldr	r3, [sp, #44]	; 0x2c
   15f58:	b	155bc <__assert_fail@plt+0x4104>
   15f5c:	mov	r5, #0
   15f60:	mov	r3, r5
   15f64:	mov	r4, #63	; 0x3f
   15f68:	b	155bc <__assert_fail@plt+0x4104>
   15f6c:	mov	r5, #0
   15f70:	mov	r3, r5
   15f74:	mov	r4, #63	; 0x3f
   15f78:	b	155bc <__assert_fail@plt+0x4104>
   15f7c:	mov	r5, #0
   15f80:	mov	r3, r5
   15f84:	b	155bc <__assert_fail@plt+0x4104>
   15f88:	mov	r5, #0
   15f8c:	mov	r3, r5
   15f90:	b	155bc <__assert_fail@plt+0x4104>
   15f94:	ldr	r5, [sp, #44]	; 0x2c
   15f98:	ldr	r3, [sp, #32]
   15f9c:	b	155bc <__assert_fail@plt+0x4104>
   15fa0:	ldr	r5, [sp, #44]	; 0x2c
   15fa4:	mov	r3, #0
   15fa8:	str	r3, [sp, #44]	; 0x2c
   15fac:	b	155bc <__assert_fail@plt+0x4104>
   15fb0:	mov	r4, r3
   15fb4:	mov	r5, #0
   15fb8:	b	15614 <__assert_fail@plt+0x415c>
   15fbc:	mov	r5, #0
   15fc0:	mov	r4, #97	; 0x61
   15fc4:	b	15614 <__assert_fail@plt+0x415c>
   15fc8:	mov	r5, #0
   15fcc:	mov	r3, r5
   15fd0:	mov	r4, #92	; 0x5c
   15fd4:	b	15968 <__assert_fail@plt+0x44b0>
   15fd8:	ldr	r3, [sp, #48]	; 0x30
   15fdc:	ldrb	r5, [r3, r6]
   15fe0:	adds	r5, r5, #0
   15fe4:	movne	r5, #1
   15fe8:	b	156b8 <__assert_fail@plt+0x4200>
   15fec:	cmp	sl, #2
   15ff0:	movne	r3, #0
   15ff4:	moveq	r3, #1
   15ff8:	ldr	r1, [sp, #32]
   15ffc:	cmp	fp, #0
   16000:	andeq	r2, r3, r1
   16004:	movne	r2, #0
   16008:	cmp	r2, #0
   1600c:	bne	1612c <__assert_fail@plt+0x4c74>
   16010:	eor	r2, r1, #1
   16014:	uxtb	r2, r2
   16018:	and	r3, r3, r2
   1601c:	ldr	r1, [sp, #68]	; 0x44
   16020:	ands	r3, r1, r3
   16024:	beq	160b8 <__assert_fail@plt+0x4c00>
   16028:	ldr	r2, [sp, #40]	; 0x28
   1602c:	cmp	r2, #0
   16030:	bne	16068 <__assert_fail@plt+0x4bb0>
   16034:	ldr	r2, [sp, #72]	; 0x48
   16038:	adds	r2, r2, #0
   1603c:	movne	r2, #1
   16040:	cmp	r9, #0
   16044:	movne	r2, #0
   16048:	str	r2, [sp, #68]	; 0x44
   1604c:	mov	sl, #2
   16050:	ldr	r1, [sp, #40]	; 0x28
   16054:	str	r1, [sp, #32]
   16058:	cmp	r2, #0
   1605c:	beq	160ac <__assert_fail@plt+0x4bf4>
   16060:	ldr	r9, [sp, #72]	; 0x48
   16064:	b	14dc0 <__assert_fail@plt+0x3908>
   16068:	ldr	r3, [sp, #168]	; 0xa8
   1606c:	str	r3, [sp, #16]
   16070:	ldr	r3, [sp, #164]	; 0xa4
   16074:	str	r3, [sp, #12]
   16078:	ldr	r3, [sp, #160]	; 0xa0
   1607c:	str	r3, [sp, #8]
   16080:	ldr	r3, [sp, #156]	; 0x9c
   16084:	str	r3, [sp, #4]
   16088:	mov	r3, #5
   1608c:	str	r3, [sp]
   16090:	ldr	r3, [sp, #24]
   16094:	ldr	r2, [sp, #48]	; 0x30
   16098:	ldr	r1, [sp, #72]	; 0x48
   1609c:	ldr	r0, [sp, #64]	; 0x40
   160a0:	bl	14d48 <__assert_fail@plt+0x3890>
   160a4:	mov	fp, r0
   160a8:	b	161c8 <__assert_fail@plt+0x4d10>
   160ac:	mov	r8, r9
   160b0:	mov	r2, r3
   160b4:	b	160bc <__assert_fail@plt+0x4c04>
   160b8:	mov	r8, r9
   160bc:	ldr	r3, [sp, #60]	; 0x3c
   160c0:	cmp	r3, #0
   160c4:	moveq	r2, #0
   160c8:	andne	r2, r2, #1
   160cc:	cmp	r2, #0
   160d0:	beq	16100 <__assert_fail@plt+0x4c48>
   160d4:	mov	r2, r3
   160d8:	ldrb	r3, [r3]
   160dc:	cmp	r3, #0
   160e0:	beq	16100 <__assert_fail@plt+0x4c48>
   160e4:	ldr	r1, [sp, #64]	; 0x40
   160e8:	cmp	r8, fp
   160ec:	strbhi	r3, [r1, fp]
   160f0:	add	fp, fp, #1
   160f4:	ldrb	r3, [r2, #1]!
   160f8:	cmp	r3, #0
   160fc:	bne	160e8 <__assert_fail@plt+0x4c30>
   16100:	cmp	r8, fp
   16104:	bls	161c8 <__assert_fail@plt+0x4d10>
   16108:	mov	r3, #0
   1610c:	ldr	r2, [sp, #64]	; 0x40
   16110:	strb	r3, [r2, fp]
   16114:	b	161c8 <__assert_fail@plt+0x4d10>
   16118:	mov	r8, r9
   1611c:	mov	r7, sl
   16120:	ldr	r3, [sp, #32]
   16124:	str	r3, [sp, #28]
   16128:	b	16170 <__assert_fail@plt+0x4cb8>
   1612c:	mov	r8, r9
   16130:	mov	r7, #2
   16134:	b	16170 <__assert_fail@plt+0x4cb8>
   16138:	mov	r8, r9
   1613c:	mov	r7, sl
   16140:	b	16170 <__assert_fail@plt+0x4cb8>
   16144:	mov	r8, r9
   16148:	mov	r7, sl
   1614c:	b	16170 <__assert_fail@plt+0x4cb8>
   16150:	mov	r8, r9
   16154:	mov	r7, sl
   16158:	b	16170 <__assert_fail@plt+0x4cb8>
   1615c:	mov	r8, r9
   16160:	mov	r7, sl
   16164:	b	16170 <__assert_fail@plt+0x4cb8>
   16168:	mov	r8, r9
   1616c:	mov	r7, sl
   16170:	ldr	r3, [sp, #28]
   16174:	cmp	r7, #2
   16178:	movne	r3, #0
   1617c:	andeq	r3, r3, #1
   16180:	cmp	r3, #0
   16184:	movne	r7, #4
   16188:	ldr	r3, [sp, #168]	; 0xa8
   1618c:	str	r3, [sp, #16]
   16190:	ldr	r3, [sp, #164]	; 0xa4
   16194:	str	r3, [sp, #12]
   16198:	mov	r3, #0
   1619c:	str	r3, [sp, #8]
   161a0:	ldr	r3, [sp, #156]	; 0x9c
   161a4:	bic	r3, r3, #2
   161a8:	str	r3, [sp, #4]
   161ac:	str	r7, [sp]
   161b0:	ldr	r3, [sp, #24]
   161b4:	ldr	r2, [sp, #48]	; 0x30
   161b8:	mov	r1, r8
   161bc:	ldr	r0, [sp, #64]	; 0x40
   161c0:	bl	14d48 <__assert_fail@plt+0x3890>
   161c4:	mov	fp, r0
   161c8:	mov	r0, fp
   161cc:	add	sp, sp, #116	; 0x74
   161d0:	ldrd	r4, [sp]
   161d4:	ldrd	r6, [sp, #8]
   161d8:	ldrd	r8, [sp, #16]
   161dc:	ldrd	sl, [sp, #24]
   161e0:	add	sp, sp, #32
   161e4:	pop	{pc}		; (ldr pc, [sp], #4)
   161e8:	mov	r8, r9
   161ec:	mov	r7, sl
   161f0:	b	16188 <__assert_fail@plt+0x4cd0>
   161f4:	add	fp, fp, #4
   161f8:	str	r3, [sp, #36]	; 0x24
   161fc:	mov	r5, #0
   16200:	mov	r4, #48	; 0x30
   16204:	b	155bc <__assert_fail@plt+0x4104>
   16208:	mov	r3, #1
   1620c:	str	r3, [sp, #32]
   16210:	str	r3, [sp, #28]
   16214:	str	r3, [sp, #52]	; 0x34
   16218:	movw	r3, #43772	; 0xaafc
   1621c:	movt	r3, #1
   16220:	str	r3, [sp, #60]	; 0x3c
   16224:	mov	fp, #0
   16228:	mov	sl, #5
   1622c:	b	14e20 <__assert_fail@plt+0x3968>
   16230:	ldr	r3, [sp, #48]	; 0x30
   16234:	ldrb	r4, [r3, r6]
   16238:	cmp	r4, #126	; 0x7e
   1623c:	ldrls	pc, [pc, r4, lsl #2]
   16240:	b	15b2c <__assert_fail@plt+0x4674>
   16244:			; <UNDEFINED> instruction: 0x000152b4
   16248:	andeq	r5, r1, ip, lsr #22
   1624c:	andeq	r5, r1, ip, lsr #22
   16250:	andeq	r5, r1, ip, lsr #22
   16254:	andeq	r5, r1, ip, lsr #22
   16258:	andeq	r5, r1, ip, lsr #22
   1625c:	andeq	r5, r1, ip, lsr #22
   16260:			; <UNDEFINED> instruction: 0x00015fbc
   16264:	andeq	r5, r1, r8, asr r5
   16268:	strdeq	r5, [r1], -ip
   1626c:			; <UNDEFINED> instruction: 0x000159b8
   16270:	andeq	r5, r1, r0, lsl r9
   16274:	andeq	r5, r1, ip, ror #10
   16278:	andeq	r5, r1, r0, lsl #11
   1627c:	andeq	r5, r1, ip, lsr #22
   16280:	andeq	r5, r1, ip, lsr #22
   16284:	andeq	r5, r1, ip, lsr #22
   16288:	andeq	r5, r1, ip, lsr #22
   1628c:	andeq	r5, r1, ip, lsr #22
   16290:	andeq	r5, r1, ip, lsr #22
   16294:	andeq	r5, r1, ip, lsr #22
   16298:	andeq	r5, r1, ip, lsr #22
   1629c:	andeq	r5, r1, ip, lsr #22
   162a0:	andeq	r5, r1, ip, lsr #22
   162a4:	andeq	r5, r1, ip, lsr #22
   162a8:	andeq	r5, r1, ip, lsr #22
   162ac:	andeq	r5, r1, ip, lsr #22
   162b0:	andeq	r5, r1, ip, lsr #22
   162b4:	andeq	r5, r1, ip, lsr #22
   162b8:	andeq	r5, r1, ip, lsr #22
   162bc:	andeq	r5, r1, ip, lsr #22
   162c0:	andeq	r5, r1, ip, lsr #22
   162c4:	andeq	r5, r1, r0, asr #20
   162c8:	andeq	r5, r1, ip, ror sl
   162cc:	andeq	r5, r1, ip, ror sl
   162d0:	andeq	r5, r1, r4, lsr sl
   162d4:	andeq	r5, r1, ip, ror sl
   162d8:	andeq	r5, r1, r0, lsr #31
   162dc:	andeq	r5, r1, ip, ror sl
   162e0:	andeq	r5, r1, ip, lsl #21
   162e4:	andeq	r5, r1, ip, ror sl
   162e8:	andeq	r5, r1, ip, ror sl
   162ec:	andeq	r5, r1, ip, ror sl
   162f0:	andeq	r5, r1, r0, lsr #31
   162f4:	andeq	r5, r1, r0, lsr #31
   162f8:	andeq	r5, r1, r0, lsr #31
   162fc:	andeq	r5, r1, r0, lsr #31
   16300:	andeq	r5, r1, r0, lsr #31
   16304:	andeq	r5, r1, r0, lsr #31
   16308:	andeq	r5, r1, r0, lsr #31
   1630c:	andeq	r5, r1, r0, lsr #31
   16310:	andeq	r5, r1, r0, lsr #31
   16314:	andeq	r5, r1, r0, lsr #31
   16318:	andeq	r5, r1, r0, lsr #31
   1631c:	andeq	r5, r1, r0, lsr #31
   16320:	andeq	r5, r1, r0, lsr #31
   16324:	andeq	r5, r1, r0, lsr #31
   16328:	andeq	r5, r1, r0, lsr #31
   1632c:	andeq	r5, r1, r0, lsr #31
   16330:	andeq	r5, r1, ip, ror sl
   16334:	andeq	r5, r1, ip, ror sl
   16338:	andeq	r5, r1, ip, ror sl
   1633c:	andeq	r5, r1, ip, ror sl
   16340:	andeq	r5, r1, ip, ror #7
   16344:	andeq	r5, r1, ip, lsr #22
   16348:	andeq	r5, r1, r0, lsr #31
   1634c:	andeq	r5, r1, r0, lsr #31
   16350:	andeq	r5, r1, r0, lsr #31
   16354:	andeq	r5, r1, r0, lsr #31
   16358:	andeq	r5, r1, r0, lsr #31
   1635c:	andeq	r5, r1, r0, lsr #31
   16360:	andeq	r5, r1, r0, lsr #31
   16364:	andeq	r5, r1, r0, lsr #31
   16368:	andeq	r5, r1, r0, lsr #31
   1636c:	andeq	r5, r1, r0, lsr #31
   16370:	andeq	r5, r1, r0, lsr #31
   16374:	andeq	r5, r1, r0, lsr #31
   16378:	andeq	r5, r1, r0, lsr #31
   1637c:	andeq	r5, r1, r0, lsr #31
   16380:	andeq	r5, r1, r0, lsr #31
   16384:	andeq	r5, r1, r0, lsr #31
   16388:	andeq	r5, r1, r0, lsr #31
   1638c:	andeq	r5, r1, r0, lsr #31
   16390:	andeq	r5, r1, r0, lsr #31
   16394:	andeq	r5, r1, r0, lsr #31
   16398:	andeq	r5, r1, r0, lsr #31
   1639c:	andeq	r5, r1, r0, lsr #31
   163a0:	andeq	r5, r1, r0, lsr #31
   163a4:	andeq	r5, r1, r0, lsr #31
   163a8:	andeq	r5, r1, r0, lsr #31
   163ac:	andeq	r5, r1, r0, lsr #31
   163b0:	andeq	r5, r1, ip, ror sl
   163b4:	andeq	r5, r1, r4, lsr #18
   163b8:	andeq	r5, r1, r0, lsr #31
   163bc:	andeq	r5, r1, ip, ror sl
   163c0:	andeq	r5, r1, r0, lsr #31
   163c4:	andeq	r5, r1, ip, ror sl
   163c8:	andeq	r5, r1, r0, lsr #31
   163cc:	andeq	r5, r1, r0, lsr #31
   163d0:	andeq	r5, r1, r0, lsr #31
   163d4:	andeq	r5, r1, r0, lsr #31
   163d8:	andeq	r5, r1, r0, lsr #31
   163dc:	andeq	r5, r1, r0, lsr #31
   163e0:	andeq	r5, r1, r0, lsr #31
   163e4:	andeq	r5, r1, r0, lsr #31
   163e8:	andeq	r5, r1, r0, lsr #31
   163ec:	andeq	r5, r1, r0, lsr #31
   163f0:	andeq	r5, r1, r0, lsr #31
   163f4:	andeq	r5, r1, r0, lsr #31
   163f8:	andeq	r5, r1, r0, lsr #31
   163fc:	andeq	r5, r1, r0, lsr #31
   16400:	andeq	r5, r1, r0, lsr #31
   16404:	andeq	r5, r1, r0, lsr #31
   16408:	andeq	r5, r1, r0, lsr #31
   1640c:	andeq	r5, r1, r0, lsr #31
   16410:	andeq	r5, r1, r0, lsr #31
   16414:	andeq	r5, r1, r0, lsr #31
   16418:	andeq	r5, r1, r0, lsr #31
   1641c:	andeq	r5, r1, r0, lsr #31
   16420:	andeq	r5, r1, r0, lsr #31
   16424:	andeq	r5, r1, r0, lsr #31
   16428:	andeq	r5, r1, r0, lsr #31
   1642c:	andeq	r5, r1, r0, lsr #31
   16430:	andeq	r5, r1, r4, ror #19
   16434:	andeq	r5, r1, ip, ror sl
   16438:	andeq	r5, r1, r4, ror #19
   1643c:	andeq	r5, r1, r4, lsr sl
   16440:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16444:	strd	r6, [sp, #8]
   16448:	strd	r8, [sp, #16]
   1644c:	strd	sl, [sp, #24]
   16450:	str	lr, [sp, #32]
   16454:	sub	sp, sp, #52	; 0x34
   16458:	mov	r5, r0
   1645c:	str	r1, [sp, #24]
   16460:	str	r2, [sp, #28]
   16464:	mov	r4, r3
   16468:	bl	11338 <__errno_location@plt>
   1646c:	str	r0, [sp, #32]
   16470:	ldr	r3, [r0]
   16474:	str	r3, [sp, #36]	; 0x24
   16478:	movw	r3, #49500	; 0xc15c
   1647c:	movt	r3, #2
   16480:	ldr	r6, [r3]
   16484:	cmn	r5, #-2147483647	; 0x80000001
   16488:	movne	r3, #0
   1648c:	moveq	r3, #1
   16490:	orrs	r3, r3, r5, lsr #31
   16494:	bne	165f8 <__assert_fail@plt+0x5140>
   16498:	movw	r3, #49500	; 0xc15c
   1649c:	movt	r3, #2
   164a0:	ldr	r2, [r3, #4]
   164a4:	cmp	r2, r5
   164a8:	bgt	16518 <__assert_fail@plt+0x5060>
   164ac:	str	r2, [sp, #44]	; 0x2c
   164b0:	add	r3, r3, #8
   164b4:	cmp	r6, r3
   164b8:	beq	165fc <__assert_fail@plt+0x5144>
   164bc:	sub	r2, r5, r2
   164c0:	mov	r3, #8
   164c4:	str	r3, [sp]
   164c8:	mvn	r3, #-2147483648	; 0x80000000
   164cc:	add	r2, r2, #1
   164d0:	add	r1, sp, #44	; 0x2c
   164d4:	mov	r0, r6
   164d8:	bl	1839c <__assert_fail@plt+0x6ee4>
   164dc:	mov	r6, r0
   164e0:	movw	r3, #49500	; 0xc15c
   164e4:	movt	r3, #2
   164e8:	str	r0, [r3]
   164ec:	movw	r7, #49500	; 0xc15c
   164f0:	movt	r7, #2
   164f4:	ldr	r0, [r7, #4]
   164f8:	ldr	r2, [sp, #44]	; 0x2c
   164fc:	sub	r2, r2, r0
   16500:	lsl	r2, r2, #3
   16504:	mov	r1, #0
   16508:	add	r0, r6, r0, lsl #3
   1650c:	bl	11368 <memset@plt>
   16510:	ldr	r3, [sp, #44]	; 0x2c
   16514:	str	r3, [r7, #4]
   16518:	add	fp, r6, r5, lsl #3
   1651c:	ldr	r8, [r6, r5, lsl #3]
   16520:	ldr	r7, [fp, #4]
   16524:	ldr	r3, [r4, #4]
   16528:	orr	r9, r3, #1
   1652c:	add	sl, r4, #8
   16530:	ldr	r3, [r4, #44]	; 0x2c
   16534:	str	r3, [sp, #16]
   16538:	ldr	r3, [r4, #40]	; 0x28
   1653c:	str	r3, [sp, #12]
   16540:	str	sl, [sp, #8]
   16544:	str	r9, [sp, #4]
   16548:	ldr	r3, [r4]
   1654c:	str	r3, [sp]
   16550:	ldr	r3, [sp, #28]
   16554:	ldr	r2, [sp, #24]
   16558:	mov	r1, r8
   1655c:	mov	r0, r7
   16560:	bl	14d48 <__assert_fail@plt+0x3890>
   16564:	cmp	r8, r0
   16568:	bhi	165cc <__assert_fail@plt+0x5114>
   1656c:	add	r8, r0, #1
   16570:	str	r8, [r6, r5, lsl #3]
   16574:	movw	r3, #49620	; 0xc1d4
   16578:	movt	r3, #2
   1657c:	cmp	r7, r3
   16580:	beq	1658c <__assert_fail@plt+0x50d4>
   16584:	mov	r0, r7
   16588:	bl	13eac <__assert_fail@plt+0x29f4>
   1658c:	mov	r0, r8
   16590:	bl	18198 <__assert_fail@plt+0x6ce0>
   16594:	mov	r7, r0
   16598:	str	r0, [fp, #4]
   1659c:	ldr	r3, [r4, #44]	; 0x2c
   165a0:	str	r3, [sp, #16]
   165a4:	ldr	r3, [r4, #40]	; 0x28
   165a8:	str	r3, [sp, #12]
   165ac:	str	sl, [sp, #8]
   165b0:	str	r9, [sp, #4]
   165b4:	ldr	r3, [r4]
   165b8:	str	r3, [sp]
   165bc:	ldr	r3, [sp, #28]
   165c0:	ldr	r2, [sp, #24]
   165c4:	mov	r1, r8
   165c8:	bl	14d48 <__assert_fail@plt+0x3890>
   165cc:	ldr	r3, [sp, #32]
   165d0:	ldr	r2, [sp, #36]	; 0x24
   165d4:	str	r2, [r3]
   165d8:	mov	r0, r7
   165dc:	add	sp, sp, #52	; 0x34
   165e0:	ldrd	r4, [sp]
   165e4:	ldrd	r6, [sp, #8]
   165e8:	ldrd	r8, [sp, #16]
   165ec:	ldrd	sl, [sp, #24]
   165f0:	add	sp, sp, #32
   165f4:	pop	{pc}		; (ldr pc, [sp], #4)
   165f8:	bl	114a0 <abort@plt>
   165fc:	sub	r2, r5, r2
   16600:	mov	r3, #8
   16604:	str	r3, [sp]
   16608:	mvn	r3, #-2147483648	; 0x80000000
   1660c:	add	r2, r2, #1
   16610:	add	r1, sp, #44	; 0x2c
   16614:	mov	r0, #0
   16618:	bl	1839c <__assert_fail@plt+0x6ee4>
   1661c:	mov	r6, r0
   16620:	movw	r3, #49500	; 0xc15c
   16624:	movt	r3, #2
   16628:	str	r0, [r3]
   1662c:	ldrd	r2, [r3, #8]
   16630:	strd	r2, [r0]
   16634:	b	164ec <__assert_fail@plt+0x5034>
   16638:	strd	r4, [sp, #-16]!
   1663c:	str	r6, [sp, #8]
   16640:	str	lr, [sp, #12]
   16644:	mov	r4, r0
   16648:	bl	11338 <__errno_location@plt>
   1664c:	mov	r5, r0
   16650:	ldr	r6, [r0]
   16654:	cmp	r4, #0
   16658:	ldr	r3, [pc, #32]	; 16680 <__assert_fail@plt+0x51c8>
   1665c:	moveq	r4, r3
   16660:	mov	r1, #48	; 0x30
   16664:	mov	r0, r4
   16668:	bl	1850c <__assert_fail@plt+0x7054>
   1666c:	str	r6, [r5]
   16670:	ldrd	r4, [sp]
   16674:	ldr	r6, [sp, #8]
   16678:	add	sp, sp, #12
   1667c:	pop	{pc}		; (ldr pc, [sp], #4)
   16680:	ldrdeq	ip, [r2], -r4
   16684:	subs	r3, r0, #0
   16688:	ldr	r2, [pc, #8]	; 16698 <__assert_fail@plt+0x51e0>
   1668c:	moveq	r3, r2
   16690:	ldr	r0, [r3]
   16694:	bx	lr
   16698:	ldrdeq	ip, [r2], -r4
   1669c:	subs	r3, r0, #0
   166a0:	ldr	r2, [pc, #8]	; 166b0 <__assert_fail@plt+0x51f8>
   166a4:	moveq	r3, r2
   166a8:	str	r1, [r3]
   166ac:	bx	lr
   166b0:	ldrdeq	ip, [r2], -r4
   166b4:	push	{lr}		; (str lr, [sp, #-4]!)
   166b8:	subs	r3, r0, #0
   166bc:	ldr	r0, [pc, #44]	; 166f0 <__assert_fail@plt+0x5238>
   166c0:	moveq	r3, r0
   166c4:	add	r3, r3, #8
   166c8:	lsr	lr, r1, #5
   166cc:	and	r1, r1, #31
   166d0:	ldr	ip, [r3, lr, lsl #2]
   166d4:	lsr	r0, ip, r1
   166d8:	eor	r2, r2, r0
   166dc:	and	r2, r2, #1
   166e0:	eor	r1, ip, r2, lsl r1
   166e4:	str	r1, [r3, lr, lsl #2]
   166e8:	and	r0, r0, #1
   166ec:	pop	{pc}		; (ldr pc, [sp], #4)
   166f0:	ldrdeq	ip, [r2], -r4
   166f4:	subs	r3, r0, #0
   166f8:	ldr	r2, [pc, #12]	; 1670c <__assert_fail@plt+0x5254>
   166fc:	moveq	r3, r2
   16700:	ldr	r0, [r3, #4]
   16704:	str	r1, [r3, #4]
   16708:	bx	lr
   1670c:	ldrdeq	ip, [r2], -r4
   16710:	subs	r3, r0, #0
   16714:	ldr	r0, [pc, #44]	; 16748 <__assert_fail@plt+0x5290>
   16718:	moveq	r3, r0
   1671c:	mov	r0, #10
   16720:	str	r0, [r3]
   16724:	cmp	r2, #0
   16728:	cmpne	r1, #0
   1672c:	beq	1673c <__assert_fail@plt+0x5284>
   16730:	str	r1, [r3, #40]	; 0x28
   16734:	str	r2, [r3, #44]	; 0x2c
   16738:	bx	lr
   1673c:	str	r4, [sp, #-8]!
   16740:	str	lr, [sp, #4]
   16744:	bl	114a0 <abort@plt>
   16748:	ldrdeq	ip, [r2], -r4
   1674c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16750:	strd	r6, [sp, #8]
   16754:	strd	r8, [sp, #16]
   16758:	str	sl, [sp, #24]
   1675c:	str	lr, [sp, #28]
   16760:	sub	sp, sp, #24
   16764:	mov	r7, r0
   16768:	mov	r8, r1
   1676c:	mov	r9, r2
   16770:	mov	sl, r3
   16774:	ldr	r4, [sp, #56]	; 0x38
   16778:	cmp	r4, #0
   1677c:	ldr	r3, [pc, #104]	; 167ec <__assert_fail@plt+0x5334>
   16780:	moveq	r4, r3
   16784:	bl	11338 <__errno_location@plt>
   16788:	mov	r5, r0
   1678c:	ldr	r6, [r0]
   16790:	ldr	r3, [r4, #44]	; 0x2c
   16794:	str	r3, [sp, #16]
   16798:	ldr	r3, [r4, #40]	; 0x28
   1679c:	str	r3, [sp, #12]
   167a0:	add	r3, r4, #8
   167a4:	str	r3, [sp, #8]
   167a8:	ldr	r3, [r4, #4]
   167ac:	str	r3, [sp, #4]
   167b0:	ldr	r3, [r4]
   167b4:	str	r3, [sp]
   167b8:	mov	r3, sl
   167bc:	mov	r2, r9
   167c0:	mov	r1, r8
   167c4:	mov	r0, r7
   167c8:	bl	14d48 <__assert_fail@plt+0x3890>
   167cc:	str	r6, [r5]
   167d0:	add	sp, sp, #24
   167d4:	ldrd	r4, [sp]
   167d8:	ldrd	r6, [sp, #8]
   167dc:	ldrd	r8, [sp, #16]
   167e0:	ldr	sl, [sp, #24]
   167e4:	add	sp, sp, #28
   167e8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ec:	ldrdeq	ip, [r2], -r4
   167f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   167f4:	strd	r6, [sp, #8]
   167f8:	strd	r8, [sp, #16]
   167fc:	strd	sl, [sp, #24]
   16800:	str	lr, [sp, #32]
   16804:	sub	sp, sp, #44	; 0x2c
   16808:	mov	r8, r0
   1680c:	mov	sl, r1
   16810:	mov	r6, r2
   16814:	subs	r4, r3, #0
   16818:	ldr	r3, [pc, #200]	; 168e8 <__assert_fail@plt+0x5430>
   1681c:	moveq	r4, r3
   16820:	bl	11338 <__errno_location@plt>
   16824:	mov	r7, r0
   16828:	ldr	fp, [r0]
   1682c:	ldr	r5, [r4, #4]
   16830:	cmp	r6, #0
   16834:	orreq	r5, r5, #1
   16838:	add	r9, r4, #8
   1683c:	ldr	r3, [r4, #44]	; 0x2c
   16840:	str	r3, [sp, #16]
   16844:	ldr	r3, [r4, #40]	; 0x28
   16848:	str	r3, [sp, #12]
   1684c:	str	r9, [sp, #8]
   16850:	str	r5, [sp, #4]
   16854:	ldr	r3, [r4]
   16858:	str	r3, [sp]
   1685c:	str	sl, [sp, #36]	; 0x24
   16860:	mov	r3, sl
   16864:	str	r8, [sp, #32]
   16868:	mov	r2, r8
   1686c:	mov	r1, #0
   16870:	mov	r0, r1
   16874:	bl	14d48 <__assert_fail@plt+0x3890>
   16878:	mov	sl, r0
   1687c:	add	r8, r0, #1
   16880:	mov	r0, r8
   16884:	bl	18198 <__assert_fail@plt+0x6ce0>
   16888:	str	r0, [sp, #28]
   1688c:	ldr	r3, [r4, #44]	; 0x2c
   16890:	str	r3, [sp, #16]
   16894:	ldr	r3, [r4, #40]	; 0x28
   16898:	str	r3, [sp, #12]
   1689c:	str	r9, [sp, #8]
   168a0:	str	r5, [sp, #4]
   168a4:	ldr	r3, [r4]
   168a8:	str	r3, [sp]
   168ac:	ldr	r3, [sp, #36]	; 0x24
   168b0:	ldr	r2, [sp, #32]
   168b4:	mov	r1, r8
   168b8:	bl	14d48 <__assert_fail@plt+0x3890>
   168bc:	str	fp, [r7]
   168c0:	cmp	r6, #0
   168c4:	strne	sl, [r6]
   168c8:	ldr	r0, [sp, #28]
   168cc:	add	sp, sp, #44	; 0x2c
   168d0:	ldrd	r4, [sp]
   168d4:	ldrd	r6, [sp, #8]
   168d8:	ldrd	r8, [sp, #16]
   168dc:	ldrd	sl, [sp, #24]
   168e0:	add	sp, sp, #32
   168e4:	pop	{pc}		; (ldr pc, [sp], #4)
   168e8:	ldrdeq	ip, [r2], -r4
   168ec:	str	r4, [sp, #-8]!
   168f0:	str	lr, [sp, #4]
   168f4:	mov	r3, r2
   168f8:	mov	r2, #0
   168fc:	bl	167f0 <__assert_fail@plt+0x5338>
   16900:	ldr	r4, [sp]
   16904:	add	sp, sp, #4
   16908:	pop	{pc}		; (ldr pc, [sp], #4)
   1690c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16910:	strd	r6, [sp, #8]
   16914:	str	r8, [sp, #16]
   16918:	str	lr, [sp, #20]
   1691c:	movw	r3, #49500	; 0xc15c
   16920:	movt	r3, #2
   16924:	ldr	r7, [r3]
   16928:	ldr	r3, [r3, #4]
   1692c:	cmp	r3, #1
   16930:	ble	1695c <__assert_fail@plt+0x54a4>
   16934:	mov	r4, #1
   16938:	add	r6, r7, #4
   1693c:	movw	r5, #49500	; 0xc15c
   16940:	movt	r5, #2
   16944:	ldr	r0, [r6, r4, lsl #3]
   16948:	bl	13eac <__assert_fail@plt+0x29f4>
   1694c:	add	r4, r4, #1
   16950:	ldr	r3, [r5, #4]
   16954:	cmp	r3, r4
   16958:	bgt	16944 <__assert_fail@plt+0x548c>
   1695c:	ldr	r0, [r7, #4]
   16960:	movw	r3, #49620	; 0xc1d4
   16964:	movt	r3, #2
   16968:	cmp	r0, r3
   1696c:	beq	16990 <__assert_fail@plt+0x54d8>
   16970:	bl	13eac <__assert_fail@plt+0x29f4>
   16974:	movw	r3, #49500	; 0xc15c
   16978:	movt	r3, #2
   1697c:	mov	r2, #256	; 0x100
   16980:	str	r2, [r3, #8]
   16984:	movw	r2, #49620	; 0xc1d4
   16988:	movt	r2, #2
   1698c:	str	r2, [r3, #12]
   16990:	ldr	r3, [pc, #64]	; 169d8 <__assert_fail@plt+0x5520>
   16994:	cmp	r7, r3
   16998:	beq	169b4 <__assert_fail@plt+0x54fc>
   1699c:	mov	r0, r7
   169a0:	bl	13eac <__assert_fail@plt+0x29f4>
   169a4:	movw	r3, #49500	; 0xc15c
   169a8:	movt	r3, #2
   169ac:	add	r2, r3, #8
   169b0:	str	r2, [r3]
   169b4:	movw	r3, #49500	; 0xc15c
   169b8:	movt	r3, #2
   169bc:	mov	r2, #1
   169c0:	str	r2, [r3, #4]
   169c4:	ldrd	r4, [sp]
   169c8:	ldrd	r6, [sp, #8]
   169cc:	ldr	r8, [sp, #16]
   169d0:	add	sp, sp, #20
   169d4:	pop	{pc}		; (ldr pc, [sp], #4)
   169d8:	andeq	ip, r2, r4, ror #2
   169dc:	str	r4, [sp, #-8]!
   169e0:	str	lr, [sp, #4]
   169e4:	ldr	r3, [pc, #16]	; 169fc <__assert_fail@plt+0x5544>
   169e8:	mvn	r2, #0
   169ec:	bl	16440 <__assert_fail@plt+0x4f88>
   169f0:	ldr	r4, [sp]
   169f4:	add	sp, sp, #4
   169f8:	pop	{pc}		; (ldr pc, [sp], #4)
   169fc:	ldrdeq	ip, [r2], -r4
   16a00:	str	r4, [sp, #-8]!
   16a04:	str	lr, [sp, #4]
   16a08:	ldr	r3, [pc, #12]	; 16a1c <__assert_fail@plt+0x5564>
   16a0c:	bl	16440 <__assert_fail@plt+0x4f88>
   16a10:	ldr	r4, [sp]
   16a14:	add	sp, sp, #4
   16a18:	pop	{pc}		; (ldr pc, [sp], #4)
   16a1c:	ldrdeq	ip, [r2], -r4
   16a20:	str	r4, [sp, #-8]!
   16a24:	str	lr, [sp, #4]
   16a28:	mov	r1, r0
   16a2c:	mov	r0, #0
   16a30:	bl	169dc <__assert_fail@plt+0x5524>
   16a34:	ldr	r4, [sp]
   16a38:	add	sp, sp, #4
   16a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a40:	str	r4, [sp, #-8]!
   16a44:	str	lr, [sp, #4]
   16a48:	mov	r2, r1
   16a4c:	mov	r1, r0
   16a50:	mov	r0, #0
   16a54:	bl	16a00 <__assert_fail@plt+0x5548>
   16a58:	ldr	r4, [sp]
   16a5c:	add	sp, sp, #4
   16a60:	pop	{pc}		; (ldr pc, [sp], #4)
   16a64:	strd	r4, [sp, #-12]!
   16a68:	str	lr, [sp, #8]
   16a6c:	sub	sp, sp, #52	; 0x34
   16a70:	mov	r4, r0
   16a74:	mov	r5, r2
   16a78:	mov	r0, sp
   16a7c:	bl	14bb4 <__assert_fail@plt+0x36fc>
   16a80:	mov	r3, sp
   16a84:	mvn	r2, #0
   16a88:	mov	r1, r5
   16a8c:	mov	r0, r4
   16a90:	bl	16440 <__assert_fail@plt+0x4f88>
   16a94:	add	sp, sp, #52	; 0x34
   16a98:	ldrd	r4, [sp]
   16a9c:	add	sp, sp, #8
   16aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa4:	strd	r4, [sp, #-16]!
   16aa8:	str	r6, [sp, #8]
   16aac:	str	lr, [sp, #12]
   16ab0:	sub	sp, sp, #48	; 0x30
   16ab4:	mov	r4, r0
   16ab8:	mov	r5, r2
   16abc:	mov	r6, r3
   16ac0:	mov	r0, sp
   16ac4:	bl	14bb4 <__assert_fail@plt+0x36fc>
   16ac8:	mov	r3, sp
   16acc:	mov	r2, r6
   16ad0:	mov	r1, r5
   16ad4:	mov	r0, r4
   16ad8:	bl	16440 <__assert_fail@plt+0x4f88>
   16adc:	add	sp, sp, #48	; 0x30
   16ae0:	ldrd	r4, [sp]
   16ae4:	ldr	r6, [sp, #8]
   16ae8:	add	sp, sp, #12
   16aec:	pop	{pc}		; (ldr pc, [sp], #4)
   16af0:	str	r4, [sp, #-8]!
   16af4:	str	lr, [sp, #4]
   16af8:	mov	r2, r1
   16afc:	mov	r1, r0
   16b00:	mov	r0, #0
   16b04:	bl	16a64 <__assert_fail@plt+0x55ac>
   16b08:	ldr	r4, [sp]
   16b0c:	add	sp, sp, #4
   16b10:	pop	{pc}		; (ldr pc, [sp], #4)
   16b14:	str	r4, [sp, #-8]!
   16b18:	str	lr, [sp, #4]
   16b1c:	mov	r3, r2
   16b20:	mov	r2, r1
   16b24:	mov	r1, r0
   16b28:	mov	r0, #0
   16b2c:	bl	16aa4 <__assert_fail@plt+0x55ec>
   16b30:	ldr	r4, [sp]
   16b34:	add	sp, sp, #4
   16b38:	pop	{pc}		; (ldr pc, [sp], #4)
   16b3c:	strd	r4, [sp, #-12]!
   16b40:	str	lr, [sp, #8]
   16b44:	sub	sp, sp, #52	; 0x34
   16b48:	mov	r4, r0
   16b4c:	mov	r5, r1
   16b50:	mov	r1, r2
   16b54:	ldr	r0, [pc, #92]	; 16bb8 <__assert_fail@plt+0x5700>
   16b58:	ldrd	r2, [r0]
   16b5c:	strd	r2, [sp]
   16b60:	ldrd	r2, [r0, #8]
   16b64:	strd	r2, [sp, #8]
   16b68:	ldrd	r2, [r0, #16]
   16b6c:	strd	r2, [sp, #16]
   16b70:	ldrd	r2, [r0, #24]
   16b74:	strd	r2, [sp, #24]
   16b78:	ldrd	r2, [r0, #32]
   16b7c:	strd	r2, [sp, #32]
   16b80:	ldrd	r2, [r0, #40]	; 0x28
   16b84:	strd	r2, [sp, #40]	; 0x28
   16b88:	mov	r2, #1
   16b8c:	mov	r0, sp
   16b90:	bl	166b4 <__assert_fail@plt+0x51fc>
   16b94:	mov	r3, sp
   16b98:	mov	r2, r5
   16b9c:	mov	r1, r4
   16ba0:	mov	r0, #0
   16ba4:	bl	16440 <__assert_fail@plt+0x4f88>
   16ba8:	add	sp, sp, #52	; 0x34
   16bac:	ldrd	r4, [sp]
   16bb0:	add	sp, sp, #8
   16bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bb8:	ldrdeq	ip, [r2], -r4
   16bbc:	str	r4, [sp, #-8]!
   16bc0:	str	lr, [sp, #4]
   16bc4:	mov	r2, r1
   16bc8:	mvn	r1, #0
   16bcc:	bl	16b3c <__assert_fail@plt+0x5684>
   16bd0:	ldr	r4, [sp]
   16bd4:	add	sp, sp, #4
   16bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bdc:	str	r4, [sp, #-8]!
   16be0:	str	lr, [sp, #4]
   16be4:	mov	r1, #58	; 0x3a
   16be8:	bl	16bbc <__assert_fail@plt+0x5704>
   16bec:	ldr	r4, [sp]
   16bf0:	add	sp, sp, #4
   16bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf8:	str	r4, [sp, #-8]!
   16bfc:	str	lr, [sp, #4]
   16c00:	mov	r2, #58	; 0x3a
   16c04:	bl	16b3c <__assert_fail@plt+0x5684>
   16c08:	ldr	r4, [sp]
   16c0c:	add	sp, sp, #4
   16c10:	pop	{pc}		; (ldr pc, [sp], #4)
   16c14:	strd	r4, [sp, #-12]!
   16c18:	str	lr, [sp, #8]
   16c1c:	sub	sp, sp, #100	; 0x64
   16c20:	mov	r4, r0
   16c24:	mov	r5, r2
   16c28:	mov	r0, sp
   16c2c:	bl	14bb4 <__assert_fail@plt+0x36fc>
   16c30:	ldrd	r2, [sp]
   16c34:	strd	r2, [sp, #48]	; 0x30
   16c38:	ldrd	r2, [sp, #8]
   16c3c:	strd	r2, [sp, #56]	; 0x38
   16c40:	ldrd	r2, [sp, #16]
   16c44:	strd	r2, [sp, #64]	; 0x40
   16c48:	ldrd	r2, [sp, #24]
   16c4c:	strd	r2, [sp, #72]	; 0x48
   16c50:	ldrd	r2, [sp, #32]
   16c54:	strd	r2, [sp, #80]	; 0x50
   16c58:	ldrd	r2, [sp, #40]	; 0x28
   16c5c:	strd	r2, [sp, #88]	; 0x58
   16c60:	mov	r2, #1
   16c64:	mov	r1, #58	; 0x3a
   16c68:	add	r0, sp, #48	; 0x30
   16c6c:	bl	166b4 <__assert_fail@plt+0x51fc>
   16c70:	add	r3, sp, #48	; 0x30
   16c74:	mvn	r2, #0
   16c78:	mov	r1, r5
   16c7c:	mov	r0, r4
   16c80:	bl	16440 <__assert_fail@plt+0x4f88>
   16c84:	add	sp, sp, #100	; 0x64
   16c88:	ldrd	r4, [sp]
   16c8c:	add	sp, sp, #8
   16c90:	pop	{pc}		; (ldr pc, [sp], #4)
   16c94:	strd	r4, [sp, #-20]!	; 0xffffffec
   16c98:	strd	r6, [sp, #8]
   16c9c:	str	lr, [sp, #16]
   16ca0:	sub	sp, sp, #52	; 0x34
   16ca4:	mov	r4, r0
   16ca8:	mov	r5, r3
   16cac:	ldr	r3, [pc, #92]	; 16d10 <__assert_fail@plt+0x5858>
   16cb0:	ldrd	r6, [r3]
   16cb4:	strd	r6, [sp]
   16cb8:	ldrd	r6, [r3, #8]
   16cbc:	strd	r6, [sp, #8]
   16cc0:	ldrd	r6, [r3, #16]
   16cc4:	strd	r6, [sp, #16]
   16cc8:	ldrd	r6, [r3, #24]
   16ccc:	strd	r6, [sp, #24]
   16cd0:	ldrd	r6, [r3, #32]
   16cd4:	strd	r6, [sp, #32]
   16cd8:	ldrd	r6, [r3, #40]	; 0x28
   16cdc:	strd	r6, [sp, #40]	; 0x28
   16ce0:	mov	r0, sp
   16ce4:	bl	16710 <__assert_fail@plt+0x5258>
   16ce8:	mov	r3, sp
   16cec:	ldr	r2, [sp, #72]	; 0x48
   16cf0:	mov	r1, r5
   16cf4:	mov	r0, r4
   16cf8:	bl	16440 <__assert_fail@plt+0x4f88>
   16cfc:	add	sp, sp, #52	; 0x34
   16d00:	ldrd	r4, [sp]
   16d04:	ldrd	r6, [sp, #8]
   16d08:	add	sp, sp, #16
   16d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d10:	ldrdeq	ip, [r2], -r4
   16d14:	push	{lr}		; (str lr, [sp, #-4]!)
   16d18:	sub	sp, sp, #12
   16d1c:	mvn	ip, #0
   16d20:	str	ip, [sp]
   16d24:	bl	16c94 <__assert_fail@plt+0x57dc>
   16d28:	add	sp, sp, #12
   16d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d30:	str	r4, [sp, #-8]!
   16d34:	str	lr, [sp, #4]
   16d38:	mov	r3, r2
   16d3c:	mov	r2, r1
   16d40:	mov	r1, r0
   16d44:	mov	r0, #0
   16d48:	bl	16d14 <__assert_fail@plt+0x585c>
   16d4c:	ldr	r4, [sp]
   16d50:	add	sp, sp, #4
   16d54:	pop	{pc}		; (ldr pc, [sp], #4)
   16d58:	push	{lr}		; (str lr, [sp, #-4]!)
   16d5c:	sub	sp, sp, #12
   16d60:	str	r3, [sp]
   16d64:	mov	r3, r2
   16d68:	mov	r2, r1
   16d6c:	mov	r1, r0
   16d70:	mov	r0, #0
   16d74:	bl	16c94 <__assert_fail@plt+0x57dc>
   16d78:	add	sp, sp, #12
   16d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d80:	str	r4, [sp, #-8]!
   16d84:	str	lr, [sp, #4]
   16d88:	ldr	r3, [pc, #12]	; 16d9c <__assert_fail@plt+0x58e4>
   16d8c:	bl	16440 <__assert_fail@plt+0x4f88>
   16d90:	ldr	r4, [sp]
   16d94:	add	sp, sp, #4
   16d98:	pop	{pc}		; (ldr pc, [sp], #4)
   16d9c:	andeq	ip, r2, ip, ror #2
   16da0:	str	r4, [sp, #-8]!
   16da4:	str	lr, [sp, #4]
   16da8:	mov	r2, r1
   16dac:	mov	r1, r0
   16db0:	mov	r0, #0
   16db4:	bl	16d80 <__assert_fail@plt+0x58c8>
   16db8:	ldr	r4, [sp]
   16dbc:	add	sp, sp, #4
   16dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc4:	str	r4, [sp, #-8]!
   16dc8:	str	lr, [sp, #4]
   16dcc:	mvn	r2, #0
   16dd0:	bl	16d80 <__assert_fail@plt+0x58c8>
   16dd4:	ldr	r4, [sp]
   16dd8:	add	sp, sp, #4
   16ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   16de0:	str	r4, [sp, #-8]!
   16de4:	str	lr, [sp, #4]
   16de8:	mov	r1, r0
   16dec:	mov	r0, #0
   16df0:	bl	16dc4 <__assert_fail@plt+0x590c>
   16df4:	ldr	r4, [sp]
   16df8:	add	sp, sp, #4
   16dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16e00:	strd	r4, [sp, #-16]!
   16e04:	str	r6, [sp, #8]
   16e08:	str	lr, [sp, #12]
   16e0c:	mov	r4, r0
   16e10:	mov	r0, #24
   16e14:	bl	18150 <__assert_fail@plt+0x6c98>
   16e18:	str	r4, [r0]
   16e1c:	mov	r4, #0
   16e20:	mov	r5, #0
   16e24:	strd	r4, [r0, #16]
   16e28:	strd	r4, [r0, #8]
   16e2c:	ldrd	r4, [sp]
   16e30:	ldr	r6, [sp, #8]
   16e34:	add	sp, sp, #12
   16e38:	pop	{pc}		; (ldr pc, [sp], #4)
   16e3c:	str	r4, [sp, #-8]!
   16e40:	str	lr, [sp, #4]
   16e44:	bl	1716c <__assert_fail@plt+0x5cb4>
   16e48:	cmp	r0, #0
   16e4c:	beq	16e54 <__assert_fail@plt+0x599c>
   16e50:	bl	16e00 <__assert_fail@plt+0x5948>
   16e54:	ldr	r4, [sp]
   16e58:	add	sp, sp, #4
   16e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e60:	ldr	r0, [r0]
   16e64:	bx	lr
   16e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e6c:	strd	r6, [sp, #8]
   16e70:	strd	r8, [sp, #16]
   16e74:	strd	sl, [sp, #24]
   16e78:	str	lr, [sp, #32]
   16e7c:	sub	sp, sp, #44	; 0x2c
   16e80:	str	r0, [sp, #28]
   16e84:	mov	sl, r2
   16e88:	mov	fp, r3
   16e8c:	ldr	r2, [r0]
   16e90:	str	r2, [sp, #24]
   16e94:	ldrd	r6, [r0, #8]
   16e98:	ldrd	r4, [r0, #16]
   16e9c:	adds	r3, sl, #1
   16ea0:	str	r3, [sp, #8]
   16ea4:	adc	r3, fp, #0
   16ea8:	str	r3, [sp, #12]
   16eac:	b	16f74 <__assert_fail@plt+0x5abc>
   16eb0:	add	r1, sp, #32
   16eb4:	ldr	r0, [sp, #24]
   16eb8:	bl	172e8 <__assert_fail@plt+0x5e30>
   16ebc:	add	ip, sp, #31
   16ec0:	lsl	r3, r7, #8
   16ec4:	orr	r3, r3, r6, lsr #24
   16ec8:	lsl	r2, r6, #8
   16ecc:	ldrb	r0, [ip, #1]!
   16ed0:	mov	r1, #0
   16ed4:	adds	r6, r0, r2
   16ed8:	adc	r7, r1, r3
   16edc:	lsl	r3, r5, #8
   16ee0:	orr	r3, r3, r4, lsr #24
   16ee4:	lsl	r2, r4, #8
   16ee8:	adds	r4, r2, #255	; 0xff
   16eec:	adc	r5, r3, #0
   16ef0:	cmp	fp, r5
   16ef4:	cmpeq	sl, r4
   16ef8:	bhi	16ec0 <__assert_fail@plt+0x5a08>
   16efc:	cmp	r5, fp
   16f00:	cmpeq	r4, sl
   16f04:	beq	16fb4 <__assert_fail@plt+0x5afc>
   16f08:	subs	r0, r4, sl
   16f0c:	str	r0, [sp, #16]
   16f10:	sbc	r3, r5, fp
   16f14:	mov	r1, r3
   16f18:	str	r3, [sp, #20]
   16f1c:	ldr	r2, [sp, #8]
   16f20:	ldr	r3, [sp, #12]
   16f24:	bl	198f8 <__assert_fail@plt+0x8440>
   16f28:	mov	r8, r2
   16f2c:	mov	r9, r3
   16f30:	ldr	r2, [sp, #8]
   16f34:	ldr	r3, [sp, #12]
   16f38:	mov	r0, r6
   16f3c:	mov	r1, r7
   16f40:	bl	198f8 <__assert_fail@plt+0x8440>
   16f44:	subs	r1, r4, r8
   16f48:	str	r1, [sp]
   16f4c:	sbc	r1, r5, r9
   16f50:	str	r1, [sp, #4]
   16f54:	ldrd	r0, [sp]
   16f58:	cmp	r7, r1
   16f5c:	cmpeq	r6, r0
   16f60:	bls	16fec <__assert_fail@plt+0x5b34>
   16f64:	subs	r4, r8, #1
   16f68:	sbc	r5, r9, #0
   16f6c:	mov	r6, r2
   16f70:	mov	r7, r3
   16f74:	cmp	r5, fp
   16f78:	cmpeq	r4, sl
   16f7c:	bcs	16efc <__assert_fail@plt+0x5a44>
   16f80:	mov	r0, r4
   16f84:	mov	r1, r5
   16f88:	mov	r2, #0
   16f8c:	lsl	r3, r1, #8
   16f90:	orr	r3, r3, r0, lsr #24
   16f94:	lsl	ip, r0, #8
   16f98:	adds	r0, ip, #255	; 0xff
   16f9c:	adc	r1, r3, #0
   16fa0:	add	r2, r2, #1
   16fa4:	cmp	fp, r1
   16fa8:	cmpeq	sl, r0
   16fac:	bhi	16f8c <__assert_fail@plt+0x5ad4>
   16fb0:	b	16eb0 <__assert_fail@plt+0x59f8>
   16fb4:	mov	r2, #0
   16fb8:	mov	r3, #0
   16fbc:	ldr	r1, [sp, #28]
   16fc0:	strd	r2, [r1, #16]
   16fc4:	strd	r2, [r1, #8]
   16fc8:	mov	r0, r6
   16fcc:	mov	r1, r7
   16fd0:	add	sp, sp, #44	; 0x2c
   16fd4:	ldrd	r4, [sp]
   16fd8:	ldrd	r6, [sp, #8]
   16fdc:	ldrd	r8, [sp, #16]
   16fe0:	ldrd	sl, [sp, #24]
   16fe4:	add	sp, sp, #32
   16fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fec:	mov	sl, r2
   16ff0:	mov	r9, r3
   16ff4:	ldr	r8, [sp, #8]
   16ff8:	mov	r2, r8
   16ffc:	ldr	r5, [sp, #12]
   17000:	mov	r3, r5
   17004:	mov	r0, r6
   17008:	mov	r1, r7
   1700c:	bl	198f8 <__assert_fail@plt+0x8440>
   17010:	ldr	r4, [sp, #28]
   17014:	strd	r0, [r4, #8]
   17018:	mov	r2, r8
   1701c:	mov	r3, r5
   17020:	ldr	r0, [sp, #16]
   17024:	ldr	r1, [sp, #20]
   17028:	bl	198f8 <__assert_fail@plt+0x8440>
   1702c:	strd	r0, [r4, #16]
   17030:	mov	r6, sl
   17034:	mov	r7, r9
   17038:	b	16fc8 <__assert_fail@plt+0x5b10>
   1703c:	str	r4, [sp, #-8]!
   17040:	str	lr, [sp, #4]
   17044:	mov	r4, r0
   17048:	mvn	r2, #0
   1704c:	mov	r1, #24
   17050:	bl	113ec <__explicit_bzero_chk@plt>
   17054:	mov	r0, r4
   17058:	bl	13eac <__assert_fail@plt+0x29f4>
   1705c:	ldr	r4, [sp]
   17060:	add	sp, sp, #4
   17064:	pop	{pc}		; (ldr pc, [sp], #4)
   17068:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1706c:	strd	r6, [sp, #8]
   17070:	str	r8, [sp, #16]
   17074:	str	lr, [sp, #20]
   17078:	mov	r5, r0
   1707c:	ldr	r0, [r0]
   17080:	bl	17448 <__assert_fail@plt+0x5f90>
   17084:	mov	r6, r0
   17088:	bl	11338 <__errno_location@plt>
   1708c:	mov	r4, r0
   17090:	ldr	r7, [r0]
   17094:	mov	r0, r5
   17098:	bl	1703c <__assert_fail@plt+0x5b84>
   1709c:	str	r7, [r4]
   170a0:	mov	r0, r6
   170a4:	ldrd	r4, [sp]
   170a8:	ldrd	r6, [sp, #8]
   170ac:	ldr	r8, [sp, #16]
   170b0:	add	sp, sp, #20
   170b4:	pop	{pc}		; (ldr pc, [sp], #4)
   170b8:	str	r7, [sp, #-8]!
   170bc:	str	lr, [sp, #4]
   170c0:	subs	r5, r0, #0
   170c4:	beq	1711c <__assert_fail@plt+0x5c64>
   170c8:	movw	r3, #49496	; 0xc158
   170cc:	movt	r3, #2
   170d0:	ldr	r6, [r3]
   170d4:	bl	11338 <__errno_location@plt>
   170d8:	ldr	r4, [r0]
   170dc:	cmp	r4, #0
   170e0:	mov	r2, #5
   170e4:	movweq	r1, #43900	; 0xab7c
   170e8:	movteq	r1, #1
   170ec:	movwne	r1, #43916	; 0xab8c
   170f0:	movtne	r1, #1
   170f4:	mov	r0, #0
   170f8:	bl	111e8 <dcgettext@plt>
   170fc:	mov	r7, r0
   17100:	mov	r0, r5
   17104:	bl	16de0 <__assert_fail@plt+0x5928>
   17108:	mov	r3, r0
   1710c:	mov	r2, r7
   17110:	mov	r1, r4
   17114:	mov	r0, r6
   17118:	bl	1129c <error@plt>
   1711c:	bl	114a0 <abort@plt>
   17120:	strd	r4, [sp, #-16]!
   17124:	str	r6, [sp, #8]
   17128:	str	lr, [sp, #12]
   1712c:	mov	r4, r0
   17130:	ldr	r5, [r0]
   17134:	mvn	r2, #0
   17138:	movw	r1, #2076	; 0x81c
   1713c:	bl	113ec <__explicit_bzero_chk@plt>
   17140:	mov	r0, r4
   17144:	bl	13eac <__assert_fail@plt+0x29f4>
   17148:	cmp	r5, #0
   1714c:	moveq	r0, #0
   17150:	beq	1715c <__assert_fail@plt+0x5ca4>
   17154:	mov	r0, r5
   17158:	bl	18f9c <__assert_fail@plt+0x7ae4>
   1715c:	ldrd	r4, [sp]
   17160:	ldr	r6, [sp, #8]
   17164:	add	sp, sp, #12
   17168:	pop	{pc}		; (ldr pc, [sp], #4)
   1716c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17170:	strd	r6, [sp, #8]
   17174:	strd	r8, [sp, #16]
   17178:	strd	sl, [sp, #24]
   1717c:	str	lr, [sp, #32]
   17180:	sub	sp, sp, #4
   17184:	subs	r6, r1, #0
   17188:	beq	17208 <__assert_fail@plt+0x5d50>
   1718c:	mov	r7, r0
   17190:	cmp	r0, #0
   17194:	beq	17284 <__assert_fail@plt+0x5dcc>
   17198:	movw	r1, #43932	; 0xab9c
   1719c:	movt	r1, #1
   171a0:	bl	190c8 <__assert_fail@plt+0x7c10>
   171a4:	subs	r5, r0, #0
   171a8:	beq	1727c <__assert_fail@plt+0x5dc4>
   171ac:	movw	r0, #2076	; 0x81c
   171b0:	bl	18150 <__assert_fail@plt+0x6c98>
   171b4:	mov	r4, r0
   171b8:	str	r5, [r0]
   171bc:	movw	r3, #28856	; 0x70b8
   171c0:	movt	r3, #1
   171c4:	str	r3, [r0, #4]
   171c8:	str	r7, [r0, #8]
   171cc:	cmp	r6, #2048	; 0x800
   171d0:	movcc	r3, r6
   171d4:	movcs	r3, #2048	; 0x800
   171d8:	mov	r2, #0
   171dc:	add	r1, r0, #12
   171e0:	mov	r0, r5
   171e4:	bl	1135c <setvbuf@plt>
   171e8:	mov	r0, r4
   171ec:	add	sp, sp, #4
   171f0:	ldrd	r4, [sp]
   171f4:	ldrd	r6, [sp, #8]
   171f8:	ldrd	r8, [sp, #16]
   171fc:	ldrd	sl, [sp, #24]
   17200:	add	sp, sp, #32
   17204:	pop	{pc}		; (ldr pc, [sp], #4)
   17208:	movw	r0, #2076	; 0x81c
   1720c:	bl	18150 <__assert_fail@plt+0x6c98>
   17210:	mov	r4, r0
   17214:	mov	r2, #0
   17218:	str	r2, [r0]
   1721c:	movw	r3, #28856	; 0x70b8
   17220:	movt	r3, #1
   17224:	str	r3, [r0, #4]
   17228:	str	r2, [r0, #8]
   1722c:	b	171e8 <__assert_fail@plt+0x5d30>
   17230:	cmp	r5, r6
   17234:	bcs	172cc <__assert_fail@plt+0x5e14>
   17238:	mov	r2, fp
   1723c:	sub	r1, r6, r5
   17240:	mov	r0, r5
   17244:	bl	1144c <getrandom@plt>
   17248:	cmp	r0, #0
   1724c:	addge	r5, r5, r0
   17250:	bge	17230 <__assert_fail@plt+0x5d78>
   17254:	bl	11338 <__errno_location@plt>
   17258:	mov	r8, r0
   1725c:	ldr	r9, [r0]
   17260:	cmp	r9, #4
   17264:	beq	17230 <__assert_fail@plt+0x5d78>
   17268:	mov	r0, r4
   1726c:	bl	17120 <__assert_fail@plt+0x5c68>
   17270:	str	r9, [r8]
   17274:	mov	r4, r7
   17278:	b	171e8 <__assert_fail@plt+0x5d30>
   1727c:	mov	r4, r5
   17280:	b	171e8 <__assert_fail@plt+0x5d30>
   17284:	movw	r0, #2076	; 0x81c
   17288:	bl	18150 <__assert_fail@plt+0x6c98>
   1728c:	mov	r4, r0
   17290:	mov	r3, #0
   17294:	str	r3, [r0]
   17298:	movw	r2, #28856	; 0x70b8
   1729c:	movt	r2, #1
   172a0:	str	r2, [r0, #4]
   172a4:	str	r3, [r0, #8]
   172a8:	str	r3, [r0, #12]
   172ac:	add	sl, r0, #16
   172b0:	cmp	r6, #1024	; 0x400
   172b4:	addls	r6, sl, r6
   172b8:	addhi	r6, sl, #1024	; 0x400
   172bc:	cmp	sl, r6
   172c0:	movcc	r5, sl
   172c4:	movcc	fp, #0
   172c8:	bcc	17238 <__assert_fail@plt+0x5d80>
   172cc:	mov	r0, sl
   172d0:	bl	176a0 <__assert_fail@plt+0x61e8>
   172d4:	b	171e8 <__assert_fail@plt+0x5d30>
   172d8:	str	r1, [r0, #4]
   172dc:	bx	lr
   172e0:	str	r1, [r0, #8]
   172e4:	bx	lr
   172e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   172ec:	strd	r6, [sp, #8]
   172f0:	strd	r8, [sp, #16]
   172f4:	str	sl, [sp, #24]
   172f8:	str	lr, [sp, #28]
   172fc:	mov	r6, r0
   17300:	mov	r5, r1
   17304:	mov	r4, r2
   17308:	ldr	r3, [r0]
   1730c:	cmp	r3, #0
   17310:	beq	1736c <__assert_fail@plt+0x5eb4>
   17314:	mov	r8, #1
   17318:	ldr	r3, [r6]
   1731c:	mov	r2, r4
   17320:	mov	r1, r8
   17324:	mov	r0, r5
   17328:	bl	11440 <fread_unlocked@plt>
   1732c:	mov	r7, r0
   17330:	bl	11338 <__errno_location@plt>
   17334:	ldr	r2, [r0]
   17338:	add	r5, r5, r7
   1733c:	subs	r4, r4, r7
   17340:	beq	17394 <__assert_fail@plt+0x5edc>
   17344:	ldr	r3, [r6]
   17348:	ldr	r3, [r3]
   1734c:	and	r3, r3, #32
   17350:	cmp	r3, #0
   17354:	moveq	r2, r3
   17358:	str	r2, [r0]
   1735c:	ldr	r3, [r6, #4]
   17360:	ldr	r0, [r6, #8]
   17364:	blx	r3
   17368:	b	17318 <__assert_fail@plt+0x5e60>
   1736c:	ldr	r7, [r0, #12]
   17370:	cmp	r2, r7
   17374:	bls	17424 <__assert_fail@plt+0x5f6c>
   17378:	add	r8, r0, #1040	; 0x410
   1737c:	add	r8, r8, #12
   17380:	add	sl, r0, #16
   17384:	mov	r9, #1024	; 0x400
   17388:	b	173c4 <__assert_fail@plt+0x5f0c>
   1738c:	mov	r3, #0
   17390:	str	r3, [r6, #12]
   17394:	ldrd	r4, [sp]
   17398:	ldrd	r6, [sp, #8]
   1739c:	ldrd	r8, [sp, #16]
   173a0:	ldr	sl, [sp, #24]
   173a4:	add	sp, sp, #28
   173a8:	pop	{pc}		; (ldr pc, [sp], #4)
   173ac:	mov	r1, r8
   173b0:	mov	r0, sl
   173b4:	bl	17460 <__assert_fail@plt+0x5fa8>
   173b8:	mov	r7, r9
   173bc:	cmp	r4, #1024	; 0x400
   173c0:	bls	17420 <__assert_fail@plt+0x5f68>
   173c4:	rsb	r1, r7, #1024	; 0x400
   173c8:	mov	r2, r7
   173cc:	add	r1, r8, r1
   173d0:	mov	r0, r5
   173d4:	bl	11194 <memcpy@plt>
   173d8:	add	r5, r5, r7
   173dc:	sub	r4, r4, r7
   173e0:	tst	r5, #3
   173e4:	bne	173ac <__assert_fail@plt+0x5ef4>
   173e8:	cmp	r4, #1024	; 0x400
   173ec:	bcc	173ac <__assert_fail@plt+0x5ef4>
   173f0:	add	r7, r6, #16
   173f4:	mov	r1, r5
   173f8:	mov	r0, r7
   173fc:	bl	17460 <__assert_fail@plt+0x5fa8>
   17400:	add	r5, r5, #1024	; 0x400
   17404:	subs	r4, r4, #1024	; 0x400
   17408:	beq	1738c <__assert_fail@plt+0x5ed4>
   1740c:	cmp	r4, #1024	; 0x400
   17410:	bcs	173f4 <__assert_fail@plt+0x5f3c>
   17414:	mov	r1, r8
   17418:	add	r0, r6, #16
   1741c:	bl	17460 <__assert_fail@plt+0x5fa8>
   17420:	mov	r7, #1024	; 0x400
   17424:	sub	r1, r6, r7
   17428:	mov	r2, r4
   1742c:	add	r1, r1, #2064	; 0x810
   17430:	add	r1, r1, #12
   17434:	mov	r0, r5
   17438:	bl	11194 <memcpy@plt>
   1743c:	sub	r4, r7, r4
   17440:	str	r4, [r6, #12]
   17444:	b	17394 <__assert_fail@plt+0x5edc>
   17448:	str	r4, [sp, #-8]!
   1744c:	str	lr, [sp, #4]
   17450:	bl	17120 <__assert_fail@plt+0x5c68>
   17454:	ldr	r4, [sp]
   17458:	add	sp, sp, #4
   1745c:	pop	{pc}		; (ldr pc, [sp], #4)
   17460:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17464:	strd	r6, [sp, #8]
   17468:	str	r8, [sp, #16]
   1746c:	str	lr, [sp, #20]
   17470:	ldr	r3, [r0, #1024]	; 0x400
   17474:	ldr	r6, [r0, #1028]	; 0x404
   17478:	ldr	r2, [r0, #1032]	; 0x408
   1747c:	add	r2, r2, #1
   17480:	str	r2, [r0, #1032]	; 0x408
   17484:	add	r8, r6, r2
   17488:	mov	lr, r0
   1748c:	add	r4, r1, #16
   17490:	add	r2, r0, #16
   17494:	add	r5, r0, #528	; 0x210
   17498:	eor	r3, r3, r3, lsl #13
   1749c:	ldr	ip, [r2, #496]	; 0x1f0
   174a0:	add	r3, r3, ip
   174a4:	ldr	ip, [r2, #-16]
   174a8:	and	r6, ip, #1020	; 0x3fc
   174ac:	ldr	r6, [lr, r6]
   174b0:	add	r6, r3, r6
   174b4:	add	r6, r6, r8
   174b8:	str	r6, [r2, #-16]
   174bc:	lsr	r6, r6, #8
   174c0:	and	r6, r6, #1020	; 0x3fc
   174c4:	ldr	r7, [lr, r6]
   174c8:	add	r7, ip, r7
   174cc:	str	r7, [r4, #-16]
   174d0:	eor	r3, r3, r3, lsr #6
   174d4:	ldr	ip, [r2, #500]	; 0x1f4
   174d8:	add	r3, r3, ip
   174dc:	ldr	r6, [r2, #-12]
   174e0:	and	ip, r6, #1020	; 0x3fc
   174e4:	ldr	ip, [lr, ip]
   174e8:	add	ip, r3, ip
   174ec:	add	ip, ip, r7
   174f0:	str	ip, [r2, #-12]
   174f4:	lsr	ip, ip, #8
   174f8:	and	ip, ip, #1020	; 0x3fc
   174fc:	ldr	r8, [lr, ip]
   17500:	add	r8, r6, r8
   17504:	str	r8, [r4, #-12]
   17508:	eor	r3, r3, r3, lsl #2
   1750c:	ldr	ip, [r2, #504]	; 0x1f8
   17510:	add	r3, r3, ip
   17514:	ldr	ip, [r2, #-8]
   17518:	and	r6, ip, #1020	; 0x3fc
   1751c:	ldr	r6, [lr, r6]
   17520:	add	r6, r3, r6
   17524:	add	r6, r6, r8
   17528:	str	r6, [r2, #-8]
   1752c:	lsr	r6, r6, #8
   17530:	and	r6, r6, #1020	; 0x3fc
   17534:	ldr	r7, [lr, r6]
   17538:	add	r7, ip, r7
   1753c:	str	r7, [r4, #-8]
   17540:	eor	r3, r3, r3, lsr #16
   17544:	ldr	ip, [r2, #508]	; 0x1fc
   17548:	add	r3, r3, ip
   1754c:	ldr	r6, [r2, #-4]
   17550:	and	ip, r6, #1020	; 0x3fc
   17554:	ldr	ip, [lr, ip]
   17558:	add	ip, r3, ip
   1755c:	add	ip, ip, r7
   17560:	str	ip, [r2, #-4]
   17564:	lsr	ip, ip, #8
   17568:	and	ip, ip, #1020	; 0x3fc
   1756c:	ldr	r8, [lr, ip]
   17570:	add	r8, r6, r8
   17574:	str	r8, [r4, #-4]
   17578:	add	r4, r4, #16
   1757c:	add	r2, r2, #16
   17580:	cmp	r2, r5
   17584:	bne	17498 <__assert_fail@plt+0x5fe0>
   17588:	add	r1, r1, #528	; 0x210
   1758c:	add	r2, r0, #528	; 0x210
   17590:	add	r4, r0, #1040	; 0x410
   17594:	eor	r3, r3, r3, lsl #13
   17598:	ldr	ip, [r2, #-528]	; 0xfffffdf0
   1759c:	add	r3, r3, ip
   175a0:	ldr	ip, [r2, #-16]
   175a4:	and	r5, ip, #1020	; 0x3fc
   175a8:	ldr	r6, [lr, r5]
   175ac:	add	r6, r3, r6
   175b0:	add	r6, r6, r8
   175b4:	str	r6, [r2, #-16]
   175b8:	lsr	r6, r6, #8
   175bc:	and	r6, r6, #1020	; 0x3fc
   175c0:	ldr	r7, [lr, r6]
   175c4:	add	r7, ip, r7
   175c8:	str	r7, [r1, #-16]
   175cc:	eor	r3, r3, r3, lsr #6
   175d0:	ldr	ip, [r2, #-524]	; 0xfffffdf4
   175d4:	add	r3, r3, ip
   175d8:	ldr	r5, [r2, #-12]
   175dc:	and	ip, r5, #1020	; 0x3fc
   175e0:	ldr	ip, [lr, ip]
   175e4:	add	ip, r3, ip
   175e8:	add	ip, ip, r7
   175ec:	str	ip, [r2, #-12]
   175f0:	lsr	ip, ip, #8
   175f4:	and	ip, ip, #1020	; 0x3fc
   175f8:	ldr	r6, [lr, ip]
   175fc:	add	r6, r5, r6
   17600:	str	r6, [r1, #-12]
   17604:	eor	r3, r3, r3, lsl #2
   17608:	ldr	ip, [r2, #-520]	; 0xfffffdf8
   1760c:	add	r3, r3, ip
   17610:	ldr	ip, [r2, #-8]
   17614:	and	r5, ip, #1020	; 0x3fc
   17618:	ldr	r5, [lr, r5]
   1761c:	add	r5, r3, r5
   17620:	add	r5, r5, r6
   17624:	str	r5, [r2, #-8]
   17628:	lsr	r5, r5, #8
   1762c:	and	r5, r5, #1020	; 0x3fc
   17630:	ldr	r5, [lr, r5]
   17634:	add	r5, ip, r5
   17638:	str	r5, [r1, #-8]
   1763c:	eor	r3, r3, r3, lsr #16
   17640:	ldr	ip, [r2, #-516]	; 0xfffffdfc
   17644:	add	r3, r3, ip
   17648:	ldr	r6, [r2, #-4]
   1764c:	and	ip, r6, #1020	; 0x3fc
   17650:	ldr	ip, [lr, ip]
   17654:	add	ip, r3, ip
   17658:	add	ip, ip, r5
   1765c:	str	ip, [r2, #-4]
   17660:	lsr	ip, ip, #8
   17664:	and	ip, ip, #1020	; 0x3fc
   17668:	ldr	r8, [lr, ip]
   1766c:	add	r8, r6, r8
   17670:	str	r8, [r1, #-4]
   17674:	add	r1, r1, #16
   17678:	add	r2, r2, #16
   1767c:	cmp	r2, r4
   17680:	bne	17594 <__assert_fail@plt+0x60dc>
   17684:	str	r3, [r0, #1024]	; 0x400
   17688:	str	r8, [r0, #1028]	; 0x404
   1768c:	ldrd	r4, [sp]
   17690:	ldrd	r6, [sp, #8]
   17694:	ldr	r8, [sp, #16]
   17698:	add	sp, sp, #20
   1769c:	pop	{pc}		; (ldr pc, [sp], #4)
   176a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   176a4:	strd	r6, [sp, #8]
   176a8:	strd	r8, [sp, #16]
   176ac:	str	sl, [sp, #24]
   176b0:	str	lr, [sp, #28]
   176b4:	mov	r2, r0
   176b8:	add	r6, r0, #1024	; 0x400
   176bc:	mov	r9, r0
   176c0:	movw	r5, #37145	; 0x9119
   176c4:	movt	r5, #12384	; 0x3060
   176c8:	movw	r4, #59931	; 0xea1b
   176cc:	movt	r4, #50415	; 0xc4ef
   176d0:	movw	lr, #15433	; 0x3c49
   176d4:	movt	lr, #42266	; 0xa51a
   176d8:	movw	ip, #19064	; 0x4a78
   176dc:	movt	ip, #55594	; 0xd92a
   176e0:	movw	r1, #6872	; 0x1ad8
   176e4:	movt	r1, #3906	; 0xf42
   176e8:	movw	r8, #15947	; 0x3e4b
   176ec:	movt	r8, #49942	; 0xc316
   176f0:	mov	r7, #89	; 0x59
   176f4:	movt	r7, #38361	; 0x95d9
   176f8:	movw	r3, #57178	; 0xdf5a
   176fc:	movt	r3, #4967	; 0x1367
   17700:	ldr	sl, [r9]
   17704:	add	r3, r3, sl
   17708:	ldr	sl, [r9, #4]
   1770c:	add	r7, r7, sl
   17710:	ldr	sl, [r9, #8]
   17714:	add	r8, r8, sl
   17718:	eor	r3, r3, r7, lsl #11
   1771c:	ldr	sl, [r9, #12]
   17720:	add	sl, r3, sl
   17724:	add	r1, sl, r1
   17728:	add	r7, r7, r8
   1772c:	eor	r7, r7, r8, lsr #2
   17730:	ldr	sl, [r9, #16]
   17734:	add	sl, r7, sl
   17738:	add	ip, sl, ip
   1773c:	add	r8, r8, r1
   17740:	eor	r8, r8, r1, lsl #8
   17744:	ldr	sl, [r9, #20]
   17748:	add	sl, r8, sl
   1774c:	add	lr, sl, lr
   17750:	add	r1, r1, ip
   17754:	eor	r1, r1, ip, lsr #16
   17758:	ldr	sl, [r9, #24]
   1775c:	add	sl, r1, sl
   17760:	add	r4, sl, r4
   17764:	add	ip, ip, lr
   17768:	eor	ip, ip, lr, lsl #10
   1776c:	ldr	sl, [r9, #28]
   17770:	add	sl, ip, sl
   17774:	add	r5, sl, r5
   17778:	add	lr, lr, r4
   1777c:	eor	lr, lr, r4, lsr #4
   17780:	add	r3, r3, lr
   17784:	add	r4, r4, r5
   17788:	eor	r4, r4, r5, lsl #8
   1778c:	add	r7, r7, r4
   17790:	add	r5, r5, r3
   17794:	eor	r5, r5, r3, lsr #9
   17798:	add	r8, r8, r5
   1779c:	add	r3, r3, r7
   177a0:	str	r3, [r9]
   177a4:	str	r7, [r9, #4]
   177a8:	str	r8, [r9, #8]
   177ac:	str	r1, [r9, #12]
   177b0:	str	ip, [r9, #16]
   177b4:	str	lr, [r9, #20]
   177b8:	str	r4, [r9, #24]
   177bc:	str	r5, [r9, #28]
   177c0:	add	r9, r9, #32
   177c4:	cmp	r9, r6
   177c8:	bne	17700 <__assert_fail@plt+0x6248>
   177cc:	ldr	r9, [r2]
   177d0:	add	r3, r3, r9
   177d4:	ldr	r9, [r2, #4]
   177d8:	add	r7, r7, r9
   177dc:	ldr	r9, [r2, #8]
   177e0:	add	r8, r8, r9
   177e4:	eor	r3, r3, r7, lsl #11
   177e8:	ldr	r9, [r2, #12]
   177ec:	add	r9, r3, r9
   177f0:	add	r1, r9, r1
   177f4:	add	r7, r7, r8
   177f8:	eor	r7, r7, r8, lsr #2
   177fc:	ldr	r9, [r2, #16]
   17800:	add	r9, r7, r9
   17804:	add	ip, r9, ip
   17808:	add	r8, r8, r1
   1780c:	eor	r8, r8, r1, lsl #8
   17810:	ldr	r9, [r2, #20]
   17814:	add	r9, r8, r9
   17818:	add	lr, r9, lr
   1781c:	add	r1, r1, ip
   17820:	eor	r1, r1, ip, lsr #16
   17824:	ldr	r9, [r2, #24]
   17828:	add	r9, r1, r9
   1782c:	add	r4, r9, r4
   17830:	add	ip, ip, lr
   17834:	eor	ip, ip, lr, lsl #10
   17838:	ldr	r9, [r2, #28]
   1783c:	add	r9, ip, r9
   17840:	add	r5, r9, r5
   17844:	add	lr, lr, r4
   17848:	eor	lr, lr, r4, lsr #4
   1784c:	add	r3, r3, lr
   17850:	add	r4, r4, r5
   17854:	eor	r4, r4, r5, lsl #8
   17858:	add	r7, r7, r4
   1785c:	add	r5, r5, r3
   17860:	eor	r5, r5, r3, lsr #9
   17864:	add	r8, r8, r5
   17868:	add	r3, r3, r7
   1786c:	str	r3, [r2]
   17870:	str	r7, [r2, #4]
   17874:	str	r8, [r2, #8]
   17878:	str	r1, [r2, #12]
   1787c:	str	ip, [r2, #16]
   17880:	str	lr, [r2, #20]
   17884:	str	r4, [r2, #24]
   17888:	str	r5, [r2, #28]
   1788c:	add	r2, r2, #32
   17890:	cmp	r2, r6
   17894:	bne	177cc <__assert_fail@plt+0x6314>
   17898:	mov	r3, #0
   1789c:	str	r3, [r0, #1032]	; 0x408
   178a0:	str	r3, [r0, #1028]	; 0x404
   178a4:	str	r3, [r0, #1024]	; 0x400
   178a8:	ldrd	r4, [sp]
   178ac:	ldrd	r6, [sp, #8]
   178b0:	ldrd	r8, [sp, #16]
   178b4:	ldr	sl, [sp, #24]
   178b8:	add	sp, sp, #28
   178bc:	pop	{pc}		; (ldr pc, [sp], #4)
   178c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178c4:	strd	r6, [sp, #8]
   178c8:	strd	r8, [sp, #16]
   178cc:	strd	sl, [sp, #24]
   178d0:	str	lr, [sp, #32]
   178d4:	sub	sp, sp, #220	; 0xdc
   178d8:	mov	sl, r0
   178dc:	mov	r7, r1
   178e0:	mov	r9, r2
   178e4:	mov	r6, r3
   178e8:	ldr	r4, [sp, #256]	; 0x100
   178ec:	str	r4, [sp]
   178f0:	bl	11374 <renameat2@plt>
   178f4:	subs	r5, r0, #0
   178f8:	bge	17994 <__assert_fail@plt+0x64dc>
   178fc:	bl	11338 <__errno_location@plt>
   17900:	mov	r8, r0
   17904:	ldr	r2, [r0]
   17908:	sub	r3, r2, #22
   1790c:	bic	r3, r3, #16
   17910:	cmp	r2, #95	; 0x5f
   17914:	cmpne	r3, #0
   17918:	movne	fp, #1
   1791c:	moveq	fp, #0
   17920:	bne	17994 <__assert_fail@plt+0x64dc>
   17924:	cmp	r4, #0
   17928:	beq	179b4 <__assert_fail@plt+0x64fc>
   1792c:	cmp	r4, #1
   17930:	bne	17988 <__assert_fail@plt+0x64d0>
   17934:	mov	r3, #256	; 0x100
   17938:	str	r3, [sp]
   1793c:	add	r3, sp, #112	; 0x70
   17940:	mov	r2, r6
   17944:	mov	r1, r9
   17948:	mov	r0, #3
   1794c:	bl	11218 <__fxstatat64@plt>
   17950:	cmp	r0, #0
   17954:	beq	17978 <__assert_fail@plt+0x64c0>
   17958:	ldr	r3, [r8]
   1795c:	cmp	r3, #75	; 0x4b
   17960:	beq	17978 <__assert_fail@plt+0x64c0>
   17964:	cmp	r3, #2
   17968:	moveq	fp, #1
   1796c:	beq	179b4 <__assert_fail@plt+0x64fc>
   17970:	mvn	r5, #0
   17974:	b	17994 <__assert_fail@plt+0x64dc>
   17978:	mov	r3, #17
   1797c:	str	r3, [r8]
   17980:	mvn	r5, #0
   17984:	b	17994 <__assert_fail@plt+0x64dc>
   17988:	mov	r3, #95	; 0x5f
   1798c:	str	r3, [r0]
   17990:	mvn	r5, #0
   17994:	mov	r0, r5
   17998:	add	sp, sp, #220	; 0xdc
   1799c:	ldrd	r4, [sp]
   179a0:	ldrd	r6, [sp, #8]
   179a4:	ldrd	r8, [sp, #16]
   179a8:	ldrd	sl, [sp, #24]
   179ac:	add	sp, sp, #32
   179b0:	pop	{pc}		; (ldr pc, [sp], #4)
   179b4:	mov	r0, r7
   179b8:	bl	11314 <strlen@plt>
   179bc:	mov	r4, r0
   179c0:	mov	r0, r6
   179c4:	bl	11314 <strlen@plt>
   179c8:	cmp	r0, #0
   179cc:	cmpne	r4, #0
   179d0:	beq	17a4c <__assert_fail@plt+0x6594>
   179d4:	add	r4, r7, r4
   179d8:	ldrb	r2, [r4, #-1]
   179dc:	add	r3, r6, r0
   179e0:	ldrb	r3, [r3, #-1]
   179e4:	cmp	r2, #47	; 0x2f
   179e8:	cmpne	r3, #47	; 0x2f
   179ec:	bne	17a68 <__assert_fail@plt+0x65b0>
   179f0:	mov	r3, #256	; 0x100
   179f4:	str	r3, [sp]
   179f8:	add	r3, sp, #8
   179fc:	mov	r2, r7
   17a00:	mov	r1, sl
   17a04:	mov	r0, #3
   17a08:	bl	11218 <__fxstatat64@plt>
   17a0c:	cmp	r0, #0
   17a10:	mvnne	r5, #0
   17a14:	bne	17994 <__assert_fail@plt+0x64dc>
   17a18:	cmp	fp, #0
   17a1c:	beq	17a94 <__assert_fail@plt+0x65dc>
   17a20:	ldr	r3, [sp, #24]
   17a24:	and	r3, r3, #61440	; 0xf000
   17a28:	cmp	r3, #16384	; 0x4000
   17a2c:	bne	17a84 <__assert_fail@plt+0x65cc>
   17a30:	mov	r3, r6
   17a34:	mov	r2, r9
   17a38:	mov	r1, r7
   17a3c:	mov	r0, sl
   17a40:	bl	11428 <renameat@plt>
   17a44:	mov	r5, r0
   17a48:	b	17994 <__assert_fail@plt+0x64dc>
   17a4c:	mov	r3, r6
   17a50:	mov	r2, r9
   17a54:	mov	r1, r7
   17a58:	mov	r0, sl
   17a5c:	bl	11428 <renameat@plt>
   17a60:	mov	r5, r0
   17a64:	b	17994 <__assert_fail@plt+0x64dc>
   17a68:	mov	r3, r6
   17a6c:	mov	r2, r9
   17a70:	mov	r1, r7
   17a74:	mov	r0, sl
   17a78:	bl	11428 <renameat@plt>
   17a7c:	mov	r5, r0
   17a80:	b	17994 <__assert_fail@plt+0x64dc>
   17a84:	mov	r3, #2
   17a88:	str	r3, [r8]
   17a8c:	mvn	r5, #0
   17a90:	b	17994 <__assert_fail@plt+0x64dc>
   17a94:	mov	r3, #256	; 0x100
   17a98:	str	r3, [sp]
   17a9c:	add	r3, sp, #112	; 0x70
   17aa0:	mov	r2, r6
   17aa4:	mov	r1, r9
   17aa8:	mov	r0, #3
   17aac:	bl	11218 <__fxstatat64@plt>
   17ab0:	cmp	r0, #0
   17ab4:	beq	17ae0 <__assert_fail@plt+0x6628>
   17ab8:	ldr	r3, [r8]
   17abc:	cmp	r3, #2
   17ac0:	mvnne	r5, #0
   17ac4:	bne	17994 <__assert_fail@plt+0x64dc>
   17ac8:	ldr	r3, [sp, #24]
   17acc:	and	r3, r3, #61440	; 0xf000
   17ad0:	cmp	r3, #16384	; 0x4000
   17ad4:	mvnne	r5, #0
   17ad8:	bne	17994 <__assert_fail@plt+0x64dc>
   17adc:	b	17a30 <__assert_fail@plt+0x6578>
   17ae0:	ldr	r3, [sp, #128]	; 0x80
   17ae4:	and	r3, r3, #61440	; 0xf000
   17ae8:	cmp	r3, #16384	; 0x4000
   17aec:	movne	r3, #20
   17af0:	strne	r3, [r8]
   17af4:	mvnne	r5, #0
   17af8:	bne	17994 <__assert_fail@plt+0x64dc>
   17afc:	ldr	r3, [sp, #24]
   17b00:	and	r3, r3, #61440	; 0xf000
   17b04:	cmp	r3, #16384	; 0x4000
   17b08:	beq	17a30 <__assert_fail@plt+0x6578>
   17b0c:	mov	r3, #21
   17b10:	str	r3, [r8]
   17b14:	mvn	r5, #0
   17b18:	b	17994 <__assert_fail@plt+0x64dc>
   17b1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17b20:	strd	r6, [sp, #8]
   17b24:	str	r8, [sp, #16]
   17b28:	str	lr, [sp, #20]
   17b2c:	mov	r4, r0
   17b30:	cmp	r0, #2
   17b34:	bls	17b50 <__assert_fail@plt+0x6698>
   17b38:	mov	r0, r4
   17b3c:	ldrd	r4, [sp]
   17b40:	ldrd	r6, [sp, #8]
   17b44:	ldr	r8, [sp, #16]
   17b48:	add	sp, sp, #20
   17b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b50:	bl	19328 <__assert_fail@plt+0x7e70>
   17b54:	mov	r6, r0
   17b58:	bl	11338 <__errno_location@plt>
   17b5c:	mov	r5, r0
   17b60:	ldr	r7, [r0]
   17b64:	mov	r0, r4
   17b68:	bl	114ac <close@plt>
   17b6c:	str	r7, [r5]
   17b70:	mov	r4, r6
   17b74:	b	17b38 <__assert_fail@plt+0x6680>
   17b78:	strd	r4, [sp, #-16]!
   17b7c:	str	r6, [sp, #8]
   17b80:	str	lr, [sp, #12]
   17b84:	sub	sp, sp, #32
   17b88:	mov	r4, r0
   17b8c:	ldr	r5, [sp, #48]	; 0x30
   17b90:	ldr	r6, [sp, #52]	; 0x34
   17b94:	cmp	r1, #0
   17b98:	beq	17c64 <__assert_fail@plt+0x67ac>
   17b9c:	str	r3, [sp, #4]
   17ba0:	str	r2, [sp]
   17ba4:	mov	r3, r1
   17ba8:	movw	r2, #43936	; 0xaba0
   17bac:	movt	r2, #1
   17bb0:	mov	r1, #1
   17bb4:	bl	113a4 <__fprintf_chk@plt>
   17bb8:	mov	r2, #5
   17bbc:	movw	r1, #43956	; 0xabb4
   17bc0:	movt	r1, #1
   17bc4:	mov	r0, #0
   17bc8:	bl	111e8 <dcgettext@plt>
   17bcc:	movw	r3, #2022	; 0x7e6
   17bd0:	str	r3, [sp]
   17bd4:	mov	r3, r0
   17bd8:	movw	r2, #44684	; 0xae8c
   17bdc:	movt	r2, #1
   17be0:	mov	r1, #1
   17be4:	mov	r0, r4
   17be8:	bl	113a4 <__fprintf_chk@plt>
   17bec:	mov	r1, r4
   17bf0:	mov	r0, #10
   17bf4:	bl	111dc <fputc_unlocked@plt>
   17bf8:	mov	r2, #5
   17bfc:	movw	r1, #43960	; 0xabb8
   17c00:	movt	r1, #1
   17c04:	mov	r0, #0
   17c08:	bl	111e8 <dcgettext@plt>
   17c0c:	movw	r3, #44132	; 0xac64
   17c10:	movt	r3, #1
   17c14:	mov	r2, r0
   17c18:	mov	r1, #1
   17c1c:	mov	r0, r4
   17c20:	bl	113a4 <__fprintf_chk@plt>
   17c24:	mov	r1, r4
   17c28:	mov	r0, #10
   17c2c:	bl	111dc <fputc_unlocked@plt>
   17c30:	cmp	r6, #9
   17c34:	ldrls	pc, [pc, r6, lsl #2]
   17c38:	b	17f3c <__assert_fail@plt+0x6a84>
   17c3c:	andeq	r7, r1, r8, lsr #25
   17c40:	andeq	r7, r1, r0, lsl #25
   17c44:			; <UNDEFINED> instruction: 0x00017cbc
   17c48:	strdeq	r7, [r1], -r0
   17c4c:	andeq	r7, r1, ip, lsr #26
   17c50:	andeq	r7, r1, r0, ror sp
   17c54:			; <UNDEFINED> instruction: 0x00017dbc
   17c58:	andeq	r7, r1, r0, lsl lr
   17c5c:	andeq	r7, r1, ip, ror #28
   17c60:	ldrdeq	r7, [r1], -r0
   17c64:	str	r3, [sp]
   17c68:	mov	r3, r2
   17c6c:	movw	r2, #43948	; 0xabac
   17c70:	movt	r2, #1
   17c74:	mov	r1, #1
   17c78:	bl	113a4 <__fprintf_chk@plt>
   17c7c:	b	17bb8 <__assert_fail@plt+0x6700>
   17c80:	mov	r2, #5
   17c84:	movw	r1, #44168	; 0xac88
   17c88:	movt	r1, #1
   17c8c:	mov	r0, #0
   17c90:	bl	111e8 <dcgettext@plt>
   17c94:	ldr	r3, [r5]
   17c98:	mov	r2, r0
   17c9c:	mov	r1, #1
   17ca0:	mov	r0, r4
   17ca4:	bl	113a4 <__fprintf_chk@plt>
   17ca8:	add	sp, sp, #32
   17cac:	ldrd	r4, [sp]
   17cb0:	ldr	r6, [sp, #8]
   17cb4:	add	sp, sp, #12
   17cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17cbc:	mov	r2, #5
   17cc0:	movw	r1, #44184	; 0xac98
   17cc4:	movt	r1, #1
   17cc8:	mov	r0, #0
   17ccc:	bl	111e8 <dcgettext@plt>
   17cd0:	ldr	r3, [r5, #4]
   17cd4:	str	r3, [sp]
   17cd8:	ldr	r3, [r5]
   17cdc:	mov	r2, r0
   17ce0:	mov	r1, #1
   17ce4:	mov	r0, r4
   17ce8:	bl	113a4 <__fprintf_chk@plt>
   17cec:	b	17ca8 <__assert_fail@plt+0x67f0>
   17cf0:	mov	r2, #5
   17cf4:	movw	r1, #44208	; 0xacb0
   17cf8:	movt	r1, #1
   17cfc:	mov	r0, #0
   17d00:	bl	111e8 <dcgettext@plt>
   17d04:	ldr	r3, [r5, #8]
   17d08:	str	r3, [sp, #4]
   17d0c:	ldr	r3, [r5, #4]
   17d10:	str	r3, [sp]
   17d14:	ldr	r3, [r5]
   17d18:	mov	r2, r0
   17d1c:	mov	r1, #1
   17d20:	mov	r0, r4
   17d24:	bl	113a4 <__fprintf_chk@plt>
   17d28:	b	17ca8 <__assert_fail@plt+0x67f0>
   17d2c:	mov	r2, #5
   17d30:	movw	r1, #44236	; 0xaccc
   17d34:	movt	r1, #1
   17d38:	mov	r0, #0
   17d3c:	bl	111e8 <dcgettext@plt>
   17d40:	ldr	r3, [r5, #12]
   17d44:	str	r3, [sp, #8]
   17d48:	ldr	r3, [r5, #8]
   17d4c:	str	r3, [sp, #4]
   17d50:	ldr	r3, [r5, #4]
   17d54:	str	r3, [sp]
   17d58:	ldr	r3, [r5]
   17d5c:	mov	r2, r0
   17d60:	mov	r1, #1
   17d64:	mov	r0, r4
   17d68:	bl	113a4 <__fprintf_chk@plt>
   17d6c:	b	17ca8 <__assert_fail@plt+0x67f0>
   17d70:	mov	r2, #5
   17d74:	movw	r1, #44268	; 0xacec
   17d78:	movt	r1, #1
   17d7c:	mov	r0, #0
   17d80:	bl	111e8 <dcgettext@plt>
   17d84:	ldr	r3, [r5, #16]
   17d88:	str	r3, [sp, #12]
   17d8c:	ldr	r3, [r5, #12]
   17d90:	str	r3, [sp, #8]
   17d94:	ldr	r3, [r5, #8]
   17d98:	str	r3, [sp, #4]
   17d9c:	ldr	r3, [r5, #4]
   17da0:	str	r3, [sp]
   17da4:	ldr	r3, [r5]
   17da8:	mov	r2, r0
   17dac:	mov	r1, #1
   17db0:	mov	r0, r4
   17db4:	bl	113a4 <__fprintf_chk@plt>
   17db8:	b	17ca8 <__assert_fail@plt+0x67f0>
   17dbc:	mov	r2, #5
   17dc0:	movw	r1, #44304	; 0xad10
   17dc4:	movt	r1, #1
   17dc8:	mov	r0, #0
   17dcc:	bl	111e8 <dcgettext@plt>
   17dd0:	ldr	r3, [r5, #20]
   17dd4:	str	r3, [sp, #16]
   17dd8:	ldr	r3, [r5, #16]
   17ddc:	str	r3, [sp, #12]
   17de0:	ldr	r3, [r5, #12]
   17de4:	str	r3, [sp, #8]
   17de8:	ldr	r3, [r5, #8]
   17dec:	str	r3, [sp, #4]
   17df0:	ldr	r3, [r5, #4]
   17df4:	str	r3, [sp]
   17df8:	ldr	r3, [r5]
   17dfc:	mov	r2, r0
   17e00:	mov	r1, #1
   17e04:	mov	r0, r4
   17e08:	bl	113a4 <__fprintf_chk@plt>
   17e0c:	b	17ca8 <__assert_fail@plt+0x67f0>
   17e10:	mov	r2, #5
   17e14:	movw	r1, #44344	; 0xad38
   17e18:	movt	r1, #1
   17e1c:	mov	r0, #0
   17e20:	bl	111e8 <dcgettext@plt>
   17e24:	ldr	r3, [r5, #24]
   17e28:	str	r3, [sp, #20]
   17e2c:	ldr	r3, [r5, #20]
   17e30:	str	r3, [sp, #16]
   17e34:	ldr	r3, [r5, #16]
   17e38:	str	r3, [sp, #12]
   17e3c:	ldr	r3, [r5, #12]
   17e40:	str	r3, [sp, #8]
   17e44:	ldr	r3, [r5, #8]
   17e48:	str	r3, [sp, #4]
   17e4c:	ldr	r3, [r5, #4]
   17e50:	str	r3, [sp]
   17e54:	ldr	r3, [r5]
   17e58:	mov	r2, r0
   17e5c:	mov	r1, #1
   17e60:	mov	r0, r4
   17e64:	bl	113a4 <__fprintf_chk@plt>
   17e68:	b	17ca8 <__assert_fail@plt+0x67f0>
   17e6c:	mov	r2, #5
   17e70:	movw	r1, #44388	; 0xad64
   17e74:	movt	r1, #1
   17e78:	mov	r0, #0
   17e7c:	bl	111e8 <dcgettext@plt>
   17e80:	ldr	r3, [r5, #28]
   17e84:	str	r3, [sp, #24]
   17e88:	ldr	r3, [r5, #24]
   17e8c:	str	r3, [sp, #20]
   17e90:	ldr	r3, [r5, #20]
   17e94:	str	r3, [sp, #16]
   17e98:	ldr	r3, [r5, #16]
   17e9c:	str	r3, [sp, #12]
   17ea0:	ldr	r3, [r5, #12]
   17ea4:	str	r3, [sp, #8]
   17ea8:	ldr	r3, [r5, #8]
   17eac:	str	r3, [sp, #4]
   17eb0:	ldr	r3, [r5, #4]
   17eb4:	str	r3, [sp]
   17eb8:	ldr	r3, [r5]
   17ebc:	mov	r2, r0
   17ec0:	mov	r1, #1
   17ec4:	mov	r0, r4
   17ec8:	bl	113a4 <__fprintf_chk@plt>
   17ecc:	b	17ca8 <__assert_fail@plt+0x67f0>
   17ed0:	mov	r2, #5
   17ed4:	movw	r1, #44436	; 0xad94
   17ed8:	movt	r1, #1
   17edc:	mov	r0, #0
   17ee0:	bl	111e8 <dcgettext@plt>
   17ee4:	ldr	r3, [r5, #32]
   17ee8:	str	r3, [sp, #28]
   17eec:	ldr	r3, [r5, #28]
   17ef0:	str	r3, [sp, #24]
   17ef4:	ldr	r3, [r5, #24]
   17ef8:	str	r3, [sp, #20]
   17efc:	ldr	r3, [r5, #20]
   17f00:	str	r3, [sp, #16]
   17f04:	ldr	r3, [r5, #16]
   17f08:	str	r3, [sp, #12]
   17f0c:	ldr	r3, [r5, #12]
   17f10:	str	r3, [sp, #8]
   17f14:	ldr	r3, [r5, #8]
   17f18:	str	r3, [sp, #4]
   17f1c:	ldr	r3, [r5, #4]
   17f20:	str	r3, [sp]
   17f24:	ldr	r3, [r5]
   17f28:	mov	r2, r0
   17f2c:	mov	r1, #1
   17f30:	mov	r0, r4
   17f34:	bl	113a4 <__fprintf_chk@plt>
   17f38:	b	17ca8 <__assert_fail@plt+0x67f0>
   17f3c:	mov	r2, #5
   17f40:	movw	r1, #44488	; 0xadc8
   17f44:	movt	r1, #1
   17f48:	mov	r0, #0
   17f4c:	bl	111e8 <dcgettext@plt>
   17f50:	ldr	r3, [r5, #32]
   17f54:	str	r3, [sp, #28]
   17f58:	ldr	r3, [r5, #28]
   17f5c:	str	r3, [sp, #24]
   17f60:	ldr	r3, [r5, #24]
   17f64:	str	r3, [sp, #20]
   17f68:	ldr	r3, [r5, #20]
   17f6c:	str	r3, [sp, #16]
   17f70:	ldr	r3, [r5, #16]
   17f74:	str	r3, [sp, #12]
   17f78:	ldr	r3, [r5, #12]
   17f7c:	str	r3, [sp, #8]
   17f80:	ldr	r3, [r5, #8]
   17f84:	str	r3, [sp, #4]
   17f88:	ldr	r3, [r5, #4]
   17f8c:	str	r3, [sp]
   17f90:	ldr	r3, [r5]
   17f94:	mov	r2, r0
   17f98:	mov	r1, #1
   17f9c:	mov	r0, r4
   17fa0:	bl	113a4 <__fprintf_chk@plt>
   17fa4:	b	17ca8 <__assert_fail@plt+0x67f0>
   17fa8:	strd	r4, [sp, #-12]!
   17fac:	str	lr, [sp, #8]
   17fb0:	sub	sp, sp, #12
   17fb4:	ldr	r5, [sp, #24]
   17fb8:	ldr	ip, [r5]
   17fbc:	cmp	ip, #0
   17fc0:	beq	17ff8 <__assert_fail@plt+0x6b40>
   17fc4:	mov	lr, r5
   17fc8:	mov	ip, #0
   17fcc:	add	ip, ip, #1
   17fd0:	ldr	r4, [lr, #4]!
   17fd4:	cmp	r4, #0
   17fd8:	bne	17fcc <__assert_fail@plt+0x6b14>
   17fdc:	str	ip, [sp, #4]
   17fe0:	str	r5, [sp]
   17fe4:	bl	17b78 <__assert_fail@plt+0x66c0>
   17fe8:	add	sp, sp, #12
   17fec:	ldrd	r4, [sp]
   17ff0:	add	sp, sp, #8
   17ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff8:	mov	ip, #0
   17ffc:	b	17fdc <__assert_fail@plt+0x6b24>
   18000:	strd	r4, [sp, #-12]!
   18004:	str	lr, [sp, #8]
   18008:	sub	sp, sp, #52	; 0x34
   1800c:	ldr	r5, [sp, #64]	; 0x40
   18010:	add	r4, sp, #8
   18014:	mov	ip, #0
   18018:	ldr	lr, [r5], #4
   1801c:	str	lr, [r4], #4
   18020:	cmp	lr, #0
   18024:	beq	18034 <__assert_fail@plt+0x6b7c>
   18028:	add	ip, ip, #1
   1802c:	cmp	ip, #10
   18030:	bne	18018 <__assert_fail@plt+0x6b60>
   18034:	str	ip, [sp, #4]
   18038:	add	ip, sp, #8
   1803c:	str	ip, [sp]
   18040:	bl	17b78 <__assert_fail@plt+0x66c0>
   18044:	add	sp, sp, #52	; 0x34
   18048:	ldrd	r4, [sp]
   1804c:	add	sp, sp, #8
   18050:	pop	{pc}		; (ldr pc, [sp], #4)
   18054:	push	{r3}		; (str r3, [sp, #-4]!)
   18058:	push	{lr}		; (str lr, [sp, #-4]!)
   1805c:	sub	sp, sp, #16
   18060:	add	r3, sp, #24
   18064:	str	r3, [sp, #12]
   18068:	str	r3, [sp]
   1806c:	ldr	r3, [sp, #20]
   18070:	bl	18000 <__assert_fail@plt+0x6b48>
   18074:	add	sp, sp, #16
   18078:	pop	{lr}		; (ldr lr, [sp], #4)
   1807c:	add	sp, sp, #4
   18080:	bx	lr
   18084:	str	r4, [sp, #-8]!
   18088:	str	lr, [sp, #4]
   1808c:	movw	r3, #49588	; 0xc1b4
   18090:	movt	r3, #2
   18094:	ldr	r1, [r3]
   18098:	mov	r0, #10
   1809c:	bl	111dc <fputc_unlocked@plt>
   180a0:	mov	r2, #5
   180a4:	movw	r1, #44548	; 0xae04
   180a8:	movt	r1, #1
   180ac:	mov	r0, #0
   180b0:	bl	111e8 <dcgettext@plt>
   180b4:	movw	r2, #44568	; 0xae18
   180b8:	movt	r2, #1
   180bc:	mov	r1, r0
   180c0:	mov	r0, #1
   180c4:	bl	11380 <__printf_chk@plt>
   180c8:	mov	r2, #5
   180cc:	movw	r1, #44592	; 0xae30
   180d0:	movt	r1, #1
   180d4:	mov	r0, #0
   180d8:	bl	111e8 <dcgettext@plt>
   180dc:	movw	r3, #42504	; 0xa608
   180e0:	movt	r3, #1
   180e4:	movw	r2, #42544	; 0xa630
   180e8:	movt	r2, #1
   180ec:	mov	r1, r0
   180f0:	mov	r0, #1
   180f4:	bl	11380 <__printf_chk@plt>
   180f8:	mov	r2, #5
   180fc:	movw	r1, #44612	; 0xae44
   18100:	movt	r1, #1
   18104:	mov	r0, #0
   18108:	bl	111e8 <dcgettext@plt>
   1810c:	movw	r2, #44652	; 0xae6c
   18110:	movt	r2, #1
   18114:	mov	r1, r0
   18118:	mov	r0, #1
   1811c:	bl	11380 <__printf_chk@plt>
   18120:	ldr	r4, [sp]
   18124:	add	sp, sp, #4
   18128:	pop	{pc}		; (ldr pc, [sp], #4)
   1812c:	str	r4, [sp, #-8]!
   18130:	str	lr, [sp, #4]
   18134:	bl	11458 <aligned_alloc@plt>
   18138:	cmp	r0, #0
   1813c:	beq	1814c <__assert_fail@plt+0x6c94>
   18140:	ldr	r4, [sp]
   18144:	add	sp, sp, #4
   18148:	pop	{pc}		; (ldr pc, [sp], #4)
   1814c:	bl	185e4 <__assert_fail@plt+0x712c>
   18150:	str	r4, [sp, #-8]!
   18154:	str	lr, [sp, #4]
   18158:	bl	18e78 <__assert_fail@plt+0x79c0>
   1815c:	cmp	r0, #0
   18160:	beq	18170 <__assert_fail@plt+0x6cb8>
   18164:	ldr	r4, [sp]
   18168:	add	sp, sp, #4
   1816c:	pop	{pc}		; (ldr pc, [sp], #4)
   18170:	bl	185e4 <__assert_fail@plt+0x712c>
   18174:	str	r4, [sp, #-8]!
   18178:	str	lr, [sp, #4]
   1817c:	bl	18e78 <__assert_fail@plt+0x79c0>
   18180:	cmp	r0, #0
   18184:	beq	18194 <__assert_fail@plt+0x6cdc>
   18188:	ldr	r4, [sp]
   1818c:	add	sp, sp, #4
   18190:	pop	{pc}		; (ldr pc, [sp], #4)
   18194:	bl	185e4 <__assert_fail@plt+0x712c>
   18198:	str	r4, [sp, #-8]!
   1819c:	str	lr, [sp, #4]
   181a0:	bl	18150 <__assert_fail@plt+0x6c98>
   181a4:	ldr	r4, [sp]
   181a8:	add	sp, sp, #4
   181ac:	pop	{pc}		; (ldr pc, [sp], #4)
   181b0:	strd	r4, [sp, #-16]!
   181b4:	str	r6, [sp, #8]
   181b8:	str	lr, [sp, #12]
   181bc:	mov	r5, r0
   181c0:	mov	r4, r1
   181c4:	bl	18eb4 <__assert_fail@plt+0x79fc>
   181c8:	cmp	r0, #0
   181cc:	beq	181e0 <__assert_fail@plt+0x6d28>
   181d0:	ldrd	r4, [sp]
   181d4:	ldr	r6, [sp, #8]
   181d8:	add	sp, sp, #12
   181dc:	pop	{pc}		; (ldr pc, [sp], #4)
   181e0:	adds	r4, r4, #0
   181e4:	movne	r4, #1
   181e8:	cmp	r5, #0
   181ec:	moveq	r4, #1
   181f0:	cmp	r4, #0
   181f4:	beq	181d0 <__assert_fail@plt+0x6d18>
   181f8:	bl	185e4 <__assert_fail@plt+0x712c>
   181fc:	str	r4, [sp, #-8]!
   18200:	str	lr, [sp, #4]
   18204:	cmp	r1, #0
   18208:	orreq	r1, r1, #1
   1820c:	bl	18eb4 <__assert_fail@plt+0x79fc>
   18210:	cmp	r0, #0
   18214:	beq	18224 <__assert_fail@plt+0x6d6c>
   18218:	ldr	r4, [sp]
   1821c:	add	sp, sp, #4
   18220:	pop	{pc}		; (ldr pc, [sp], #4)
   18224:	bl	185e4 <__assert_fail@plt+0x712c>
   18228:	strd	r4, [sp, #-16]!
   1822c:	str	r6, [sp, #8]
   18230:	str	lr, [sp, #12]
   18234:	mov	r4, r0
   18238:	mov	r6, r1
   1823c:	mov	r5, r2
   18240:	bl	192ec <__assert_fail@plt+0x7e34>
   18244:	cmp	r0, #0
   18248:	beq	1825c <__assert_fail@plt+0x6da4>
   1824c:	ldrd	r4, [sp]
   18250:	ldr	r6, [sp, #8]
   18254:	add	sp, sp, #12
   18258:	pop	{pc}		; (ldr pc, [sp], #4)
   1825c:	cmp	r4, #0
   18260:	beq	18270 <__assert_fail@plt+0x6db8>
   18264:	cmp	r6, #0
   18268:	cmpne	r5, #0
   1826c:	beq	1824c <__assert_fail@plt+0x6d94>
   18270:	bl	185e4 <__assert_fail@plt+0x712c>
   18274:	str	r4, [sp, #-8]!
   18278:	str	lr, [sp, #4]
   1827c:	bl	18228 <__assert_fail@plt+0x6d70>
   18280:	ldr	r4, [sp]
   18284:	add	sp, sp, #4
   18288:	pop	{pc}		; (ldr pc, [sp], #4)
   1828c:	str	r4, [sp, #-8]!
   18290:	str	lr, [sp, #4]
   18294:	mov	ip, r1
   18298:	mov	r3, r2
   1829c:	cmp	r2, #0
   182a0:	cmpne	r1, #0
   182a4:	moveq	r3, #1
   182a8:	moveq	ip, r3
   182ac:	mov	r2, r3
   182b0:	mov	r1, ip
   182b4:	bl	192ec <__assert_fail@plt+0x7e34>
   182b8:	cmp	r0, #0
   182bc:	beq	182cc <__assert_fail@plt+0x6e14>
   182c0:	ldr	r4, [sp]
   182c4:	add	sp, sp, #4
   182c8:	pop	{pc}		; (ldr pc, [sp], #4)
   182cc:	bl	185e4 <__assert_fail@plt+0x712c>
   182d0:	str	r4, [sp, #-8]!
   182d4:	str	lr, [sp, #4]
   182d8:	mov	r2, r1
   182dc:	mov	r1, r0
   182e0:	mov	r0, #0
   182e4:	bl	18228 <__assert_fail@plt+0x6d70>
   182e8:	ldr	r4, [sp]
   182ec:	add	sp, sp, #4
   182f0:	pop	{pc}		; (ldr pc, [sp], #4)
   182f4:	str	r4, [sp, #-8]!
   182f8:	str	lr, [sp, #4]
   182fc:	mov	r2, r1
   18300:	mov	r1, r0
   18304:	mov	r0, #0
   18308:	bl	1828c <__assert_fail@plt+0x6dd4>
   1830c:	ldr	r4, [sp]
   18310:	add	sp, sp, #4
   18314:	pop	{pc}		; (ldr pc, [sp], #4)
   18318:	strd	r4, [sp, #-16]!
   1831c:	str	r6, [sp, #8]
   18320:	str	lr, [sp, #12]
   18324:	mov	r5, r1
   18328:	ldr	r4, [r1]
   1832c:	cmp	r0, #0
   18330:	beq	18360 <__assert_fail@plt+0x6ea8>
   18334:	lsr	r3, r4, #1
   18338:	add	r3, r3, #1
   1833c:	adds	r4, r4, r3
   18340:	bcs	1837c <__assert_fail@plt+0x6ec4>
   18344:	mov	r1, r4
   18348:	bl	18228 <__assert_fail@plt+0x6d70>
   1834c:	str	r4, [r5]
   18350:	ldrd	r4, [sp]
   18354:	ldr	r6, [sp, #8]
   18358:	add	sp, sp, #12
   1835c:	pop	{pc}		; (ldr pc, [sp], #4)
   18360:	cmp	r4, #0
   18364:	bne	18344 <__assert_fail@plt+0x6e8c>
   18368:	mov	r4, #64	; 0x40
   1836c:	udiv	r4, r4, r2
   18370:	cmp	r2, #64	; 0x40
   18374:	addhi	r4, r4, #1
   18378:	b	18344 <__assert_fail@plt+0x6e8c>
   1837c:	bl	185e4 <__assert_fail@plt+0x712c>
   18380:	str	r4, [sp, #-8]!
   18384:	str	lr, [sp, #4]
   18388:	mov	r2, #1
   1838c:	bl	18318 <__assert_fail@plt+0x6e60>
   18390:	ldr	r4, [sp]
   18394:	add	sp, sp, #4
   18398:	pop	{pc}		; (ldr pc, [sp], #4)
   1839c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   183a0:	strd	r6, [sp, #8]
   183a4:	str	r8, [sp, #16]
   183a8:	str	lr, [sp, #20]
   183ac:	mov	r5, r1
   183b0:	ldr	lr, [sp, #24]
   183b4:	ldr	ip, [r1]
   183b8:	asr	r4, ip, #1
   183bc:	adds	r4, ip, r4
   183c0:	movvs	r1, #1
   183c4:	movvc	r1, #0
   183c8:	cmp	r1, #0
   183cc:	mvnne	r4, #-2147483648	; 0x80000000
   183d0:	mvn	r8, r3
   183d4:	lsr	r8, r8, #31
   183d8:	cmp	r3, r4
   183dc:	movge	r1, #0
   183e0:	andlt	r1, r8, #1
   183e4:	cmp	r1, #0
   183e8:	movne	r4, r3
   183ec:	smull	r6, r7, r4, lr
   183f0:	asr	r1, r6, #31
   183f4:	cmp	r1, r7
   183f8:	bne	18410 <__assert_fail@plt+0x6f58>
   183fc:	mov	r1, r6
   18400:	cmp	r6, #63	; 0x3f
   18404:	movle	r1, #64	; 0x40
   18408:	ble	18414 <__assert_fail@plt+0x6f5c>
   1840c:	b	18420 <__assert_fail@plt+0x6f68>
   18410:	mvn	r1, #-2147483648	; 0x80000000
   18414:	sdiv	r4, r1, lr
   18418:	mls	r6, lr, r4, r1
   1841c:	sub	r1, r1, r6
   18420:	cmp	r0, #0
   18424:	moveq	r6, #0
   18428:	streq	r6, [r5]
   1842c:	sub	r6, r4, ip
   18430:	cmp	r6, r2
   18434:	bge	1846c <__assert_fail@plt+0x6fb4>
   18438:	adds	r2, ip, r2
   1843c:	mov	r4, r2
   18440:	bvs	18488 <__assert_fail@plt+0x6fd0>
   18444:	cmp	r2, r3
   18448:	movle	r3, #0
   1844c:	andgt	r3, r8, #1
   18450:	cmp	r3, #0
   18454:	bne	18488 <__assert_fail@plt+0x6fd0>
   18458:	smull	r2, r3, r2, lr
   1845c:	asr	ip, r2, #31
   18460:	mov	r1, r2
   18464:	cmp	ip, r3
   18468:	bne	18488 <__assert_fail@plt+0x6fd0>
   1846c:	bl	181b0 <__assert_fail@plt+0x6cf8>
   18470:	str	r4, [r5]
   18474:	ldrd	r4, [sp]
   18478:	ldrd	r6, [sp, #8]
   1847c:	ldr	r8, [sp, #16]
   18480:	add	sp, sp, #20
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	bl	185e4 <__assert_fail@plt+0x712c>
   1848c:	str	r4, [sp, #-8]!
   18490:	str	lr, [sp, #4]
   18494:	bl	18e04 <__assert_fail@plt+0x794c>
   18498:	cmp	r0, #0
   1849c:	beq	184ac <__assert_fail@plt+0x6ff4>
   184a0:	ldr	r4, [sp]
   184a4:	add	sp, sp, #4
   184a8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ac:	bl	185e4 <__assert_fail@plt+0x712c>
   184b0:	str	r4, [sp, #-8]!
   184b4:	str	lr, [sp, #4]
   184b8:	mov	r1, #1
   184bc:	bl	1848c <__assert_fail@plt+0x6fd4>
   184c0:	ldr	r4, [sp]
   184c4:	add	sp, sp, #4
   184c8:	pop	{pc}		; (ldr pc, [sp], #4)
   184cc:	str	r4, [sp, #-8]!
   184d0:	str	lr, [sp, #4]
   184d4:	bl	18e04 <__assert_fail@plt+0x794c>
   184d8:	cmp	r0, #0
   184dc:	beq	184ec <__assert_fail@plt+0x7034>
   184e0:	ldr	r4, [sp]
   184e4:	add	sp, sp, #4
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	bl	185e4 <__assert_fail@plt+0x712c>
   184f0:	str	r4, [sp, #-8]!
   184f4:	str	lr, [sp, #4]
   184f8:	mov	r1, #1
   184fc:	bl	184cc <__assert_fail@plt+0x7014>
   18500:	ldr	r4, [sp]
   18504:	add	sp, sp, #4
   18508:	pop	{pc}		; (ldr pc, [sp], #4)
   1850c:	strd	r4, [sp, #-16]!
   18510:	str	r6, [sp, #8]
   18514:	str	lr, [sp, #12]
   18518:	mov	r5, r0
   1851c:	mov	r4, r1
   18520:	mov	r0, r1
   18524:	bl	18150 <__assert_fail@plt+0x6c98>
   18528:	mov	r2, r4
   1852c:	mov	r1, r5
   18530:	bl	11194 <memcpy@plt>
   18534:	ldrd	r4, [sp]
   18538:	ldr	r6, [sp, #8]
   1853c:	add	sp, sp, #12
   18540:	pop	{pc}		; (ldr pc, [sp], #4)
   18544:	strd	r4, [sp, #-16]!
   18548:	str	r6, [sp, #8]
   1854c:	str	lr, [sp, #12]
   18550:	mov	r5, r0
   18554:	mov	r4, r1
   18558:	mov	r0, r1
   1855c:	bl	18174 <__assert_fail@plt+0x6cbc>
   18560:	mov	r2, r4
   18564:	mov	r1, r5
   18568:	bl	11194 <memcpy@plt>
   1856c:	ldrd	r4, [sp]
   18570:	ldr	r6, [sp, #8]
   18574:	add	sp, sp, #12
   18578:	pop	{pc}		; (ldr pc, [sp], #4)
   1857c:	strd	r4, [sp, #-16]!
   18580:	str	r6, [sp, #8]
   18584:	str	lr, [sp, #12]
   18588:	mov	r5, r0
   1858c:	mov	r4, r1
   18590:	add	r0, r1, #1
   18594:	bl	18174 <__assert_fail@plt+0x6cbc>
   18598:	mov	r2, #0
   1859c:	strb	r2, [r0, r4]
   185a0:	mov	r2, r4
   185a4:	mov	r1, r5
   185a8:	bl	11194 <memcpy@plt>
   185ac:	ldrd	r4, [sp]
   185b0:	ldr	r6, [sp, #8]
   185b4:	add	sp, sp, #12
   185b8:	pop	{pc}		; (ldr pc, [sp], #4)
   185bc:	str	r4, [sp, #-8]!
   185c0:	str	lr, [sp, #4]
   185c4:	mov	r4, r0
   185c8:	bl	11314 <strlen@plt>
   185cc:	add	r1, r0, #1
   185d0:	mov	r0, r4
   185d4:	bl	1850c <__assert_fail@plt+0x7054>
   185d8:	ldr	r4, [sp]
   185dc:	add	sp, sp, #4
   185e0:	pop	{pc}		; (ldr pc, [sp], #4)
   185e4:	str	r4, [sp, #-8]!
   185e8:	str	lr, [sp, #4]
   185ec:	movw	r3, #49496	; 0xc158
   185f0:	movt	r3, #2
   185f4:	ldr	r4, [r3]
   185f8:	mov	r2, #5
   185fc:	movw	r1, #44732	; 0xaebc
   18600:	movt	r1, #1
   18604:	mov	r0, #0
   18608:	bl	111e8 <dcgettext@plt>
   1860c:	mov	r3, r0
   18610:	movw	r2, #43484	; 0xa9dc
   18614:	movt	r2, #1
   18618:	mov	r1, #0
   1861c:	mov	r0, r4
   18620:	bl	1129c <error@plt>
   18624:	bl	114a0 <abort@plt>
   18628:	strd	r4, [sp, #-16]!
   1862c:	str	r6, [sp, #8]
   18630:	str	lr, [sp, #12]
   18634:	sub	sp, sp, #16
   18638:	mov	r6, r0
   1863c:	mov	r4, r2
   18640:	mov	r5, r3
   18644:	ldr	r3, [sp, #40]	; 0x28
   18648:	str	r3, [sp]
   1864c:	add	r3, sp, #8
   18650:	mov	r2, r1
   18654:	mov	r1, #0
   18658:	bl	188b4 <__assert_fail@plt+0x73fc>
   1865c:	cmp	r0, #0
   18660:	bne	186d8 <__assert_fail@plt+0x7220>
   18664:	ldrd	r0, [sp, #8]
   18668:	ldrd	r2, [sp, #32]
   1866c:	cmp	r1, r3
   18670:	cmpeq	r0, r2
   18674:	movhi	r3, #1
   18678:	movls	r3, #0
   1867c:	cmp	r1, r5
   18680:	cmpeq	r0, r4
   18684:	orrcc	r3, r3, #1
   18688:	cmp	r3, #0
   1868c:	bne	186a4 <__assert_fail@plt+0x71ec>
   18690:	add	sp, sp, #16
   18694:	ldrd	r4, [sp]
   18698:	ldr	r6, [sp, #8]
   1869c:	add	sp, sp, #12
   186a0:	pop	{pc}		; (ldr pc, [sp], #4)
   186a4:	mvn	r2, #-1073741824	; 0xc0000000
   186a8:	mov	r3, #0
   186ac:	cmp	r1, r3
   186b0:	cmpeq	r0, r2
   186b4:	bls	186c8 <__assert_fail@plt+0x7210>
   186b8:	bl	11338 <__errno_location@plt>
   186bc:	mov	r3, #75	; 0x4b
   186c0:	str	r3, [r0]
   186c4:	b	186e8 <__assert_fail@plt+0x7230>
   186c8:	bl	11338 <__errno_location@plt>
   186cc:	mov	r3, #34	; 0x22
   186d0:	str	r3, [r0]
   186d4:	b	186e8 <__assert_fail@plt+0x7230>
   186d8:	cmp	r0, #1
   186dc:	beq	1872c <__assert_fail@plt+0x7274>
   186e0:	cmp	r0, #3
   186e4:	beq	1873c <__assert_fail@plt+0x7284>
   186e8:	ldr	r3, [sp, #48]	; 0x30
   186ec:	cmp	r3, #0
   186f0:	moveq	r3, #1
   186f4:	str	r3, [sp, #48]	; 0x30
   186f8:	bl	11338 <__errno_location@plt>
   186fc:	ldr	r4, [r0]
   18700:	cmp	r4, #22
   18704:	moveq	r4, #0
   18708:	mov	r0, r6
   1870c:	bl	16de0 <__assert_fail@plt+0x5928>
   18710:	str	r0, [sp]
   18714:	ldr	r3, [sp, #44]	; 0x2c
   18718:	movw	r2, #43480	; 0xa9d8
   1871c:	movt	r2, #1
   18720:	mov	r1, r4
   18724:	ldr	r0, [sp, #48]	; 0x30
   18728:	bl	1129c <error@plt>
   1872c:	bl	11338 <__errno_location@plt>
   18730:	mov	r3, #75	; 0x4b
   18734:	str	r3, [r0]
   18738:	b	186e8 <__assert_fail@plt+0x7230>
   1873c:	bl	11338 <__errno_location@plt>
   18740:	mov	r3, #0
   18744:	str	r3, [r0]
   18748:	b	186e8 <__assert_fail@plt+0x7230>
   1874c:	strd	r4, [sp, #-12]!
   18750:	str	lr, [sp, #8]
   18754:	sub	sp, sp, #28
   18758:	ldr	r1, [sp, #56]	; 0x38
   1875c:	str	r1, [sp, #16]
   18760:	ldr	r1, [sp, #52]	; 0x34
   18764:	str	r1, [sp, #12]
   18768:	ldr	r1, [sp, #48]	; 0x30
   1876c:	str	r1, [sp, #8]
   18770:	ldrd	r4, [sp, #40]	; 0x28
   18774:	strd	r4, [sp]
   18778:	mov	r1, #10
   1877c:	bl	18628 <__assert_fail@plt+0x7170>
   18780:	add	sp, sp, #28
   18784:	ldrd	r4, [sp]
   18788:	add	sp, sp, #8
   1878c:	pop	{pc}		; (ldr pc, [sp], #4)
   18790:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18794:	strd	r6, [sp, #8]
   18798:	strd	r8, [sp, #16]
   1879c:	strd	sl, [sp, #24]
   187a0:	str	lr, [sp, #32]
   187a4:	sub	sp, sp, #12
   187a8:	str	r0, [sp, #4]
   187ac:	cmp	r2, #0
   187b0:	beq	188ac <__assert_fail@plt+0x73f4>
   187b4:	sub	ip, r2, #1
   187b8:	ldrd	r2, [r0]
   187bc:	mov	r0, #0
   187c0:	mov	r8, r1
   187c4:	asr	r9, r1, #31
   187c8:	str	r1, [sp]
   187cc:	b	1881c <__assert_fail@plt+0x7364>
   187d0:	orrs	r4, r2, r3
   187d4:	movne	lr, #1
   187d8:	b	1882c <__assert_fail@plt+0x7374>
   187dc:	mov	sl, r3
   187e0:	ldr	fp, [sp]
   187e4:	umull	r6, r7, r1, r2
   187e8:	mov	r4, r7
   187ec:	mov	r5, #0
   187f0:	umlal	r4, r5, sl, fp
   187f4:	cmp	r5, #0
   187f8:	bne	18860 <__assert_fail@plt+0x73a8>
   187fc:	cmp	lr, #0
   18800:	bne	18878 <__assert_fail@plt+0x73c0>
   18804:	mov	r2, r6
   18808:	mov	r3, r4
   1880c:	orr	r0, r0, lr
   18810:	sub	ip, ip, #1
   18814:	cmn	ip, #1
   18818:	beq	18888 <__assert_fail@plt+0x73d0>
   1881c:	mov	lr, #0
   18820:	cmp	r8, #0
   18824:	sbcs	r4, r9, #0
   18828:	blt	187d0 <__assert_fail@plt+0x7318>
   1882c:	cmp	r9, #0
   18830:	bne	1884c <__assert_fail@plt+0x7394>
   18834:	cmp	r3, #0
   18838:	bne	187dc <__assert_fail@plt+0x7324>
   1883c:	umull	r2, r3, r1, r2
   18840:	mov	r6, r2
   18844:	mov	r4, r3
   18848:	b	187fc <__assert_fail@plt+0x7344>
   1884c:	cmp	r3, #0
   18850:	bne	18860 <__assert_fail@plt+0x73a8>
   18854:	mov	sl, r9
   18858:	mov	fp, r2
   1885c:	b	187e4 <__assert_fail@plt+0x732c>
   18860:	mul	r4, r1, r3
   18864:	mla	r4, r2, r9, r4
   18868:	umull	r6, r7, r1, r2
   1886c:	add	r4, r4, r7
   18870:	mov	lr, #1
   18874:	b	187fc <__assert_fail@plt+0x7344>
   18878:	mvn	r2, #0
   1887c:	mvn	r3, #0
   18880:	mov	lr, #1
   18884:	b	1880c <__assert_fail@plt+0x7354>
   18888:	ldr	r1, [sp, #4]
   1888c:	strd	r2, [r1]
   18890:	add	sp, sp, #12
   18894:	ldrd	r4, [sp]
   18898:	ldrd	r6, [sp, #8]
   1889c:	ldrd	r8, [sp, #16]
   188a0:	ldrd	sl, [sp, #24]
   188a4:	add	sp, sp, #32
   188a8:	pop	{pc}		; (ldr pc, [sp], #4)
   188ac:	mov	r0, #0
   188b0:	b	18890 <__assert_fail@plt+0x73d8>
   188b4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   188b8:	strd	r6, [sp, #8]
   188bc:	strd	r8, [sp, #16]
   188c0:	str	lr, [sp, #24]
   188c4:	sub	sp, sp, #20
   188c8:	cmp	r2, #36	; 0x24
   188cc:	bhi	18920 <__assert_fail@plt+0x7468>
   188d0:	mov	r5, r0
   188d4:	mov	r6, r1
   188d8:	mov	r7, r2
   188dc:	mov	r9, r3
   188e0:	cmp	r1, #0
   188e4:	addeq	r6, sp, #12
   188e8:	bl	11338 <__errno_location@plt>
   188ec:	mov	r8, r0
   188f0:	mov	r3, #0
   188f4:	str	r3, [r0]
   188f8:	ldrb	r4, [r5]
   188fc:	bl	112fc <__ctype_b_loc@plt>
   18900:	ldr	r1, [r0]
   18904:	mov	r2, r5
   18908:	lsl	r3, r4, #1
   1890c:	ldrh	r3, [r1, r3]
   18910:	tst	r3, #8192	; 0x2000
   18914:	beq	18940 <__assert_fail@plt+0x7488>
   18918:	ldrb	r4, [r2, #1]!
   1891c:	b	18908 <__assert_fail@plt+0x7450>
   18920:	movw	r3, #44752	; 0xaed0
   18924:	movt	r3, #1
   18928:	mov	r2, #85	; 0x55
   1892c:	movw	r1, #44764	; 0xaedc
   18930:	movt	r1, #1
   18934:	movw	r0, #44780	; 0xaeec
   18938:	movt	r0, #1
   1893c:	bl	114b8 <__assert_fail@plt>
   18940:	cmp	r4, #45	; 0x2d
   18944:	moveq	r4, #4
   18948:	beq	18adc <__assert_fail@plt+0x7624>
   1894c:	mov	r3, #0
   18950:	mov	r2, r7
   18954:	mov	r1, r6
   18958:	mov	r0, r5
   1895c:	bl	111a0 <__strtoull_internal@plt>
   18960:	strd	r0, [sp]
   18964:	ldr	r7, [r6]
   18968:	cmp	r7, r5
   1896c:	beq	18990 <__assert_fail@plt+0x74d8>
   18970:	ldr	r3, [r8]
   18974:	cmp	r3, #0
   18978:	beq	18ab4 <__assert_fail@plt+0x75fc>
   1897c:	cmp	r3, #34	; 0x22
   18980:	moveq	r4, #1
   18984:	beq	18ab8 <__assert_fail@plt+0x7600>
   18988:	mov	r4, #4
   1898c:	b	18adc <__assert_fail@plt+0x7624>
   18990:	ldr	r3, [sp, #48]	; 0x30
   18994:	cmp	r3, #0
   18998:	beq	18df4 <__assert_fail@plt+0x793c>
   1899c:	ldrb	r1, [r5]
   189a0:	cmp	r1, #0
   189a4:	moveq	r4, #4
   189a8:	beq	18adc <__assert_fail@plt+0x7624>
   189ac:	mov	r0, r3
   189b0:	bl	11320 <strchr@plt>
   189b4:	cmp	r0, #0
   189b8:	beq	18dfc <__assert_fail@plt+0x7944>
   189bc:	mov	r2, #1
   189c0:	mov	r3, #0
   189c4:	strd	r2, [sp]
   189c8:	ldrb	r5, [r7]
   189cc:	mov	r4, #0
   189d0:	mov	r1, r5
   189d4:	ldr	r0, [sp, #48]	; 0x30
   189d8:	bl	11320 <strchr@plt>
   189dc:	cmp	r0, #0
   189e0:	beq	18af8 <__assert_fail@plt+0x7640>
   189e4:	sub	r3, r5, #69	; 0x45
   189e8:	cmp	r3, #47	; 0x2f
   189ec:	ldrls	pc, [pc, r3, lsl #2]
   189f0:	b	18c44 <__assert_fail@plt+0x778c>
   189f4:	andeq	r8, r1, r8, lsl #22
   189f8:	andeq	r8, r1, r4, asr #24
   189fc:	andeq	r8, r1, r8, lsl #22
   18a00:	andeq	r8, r1, r4, asr #24
   18a04:	andeq	r8, r1, r4, asr #24
   18a08:	andeq	r8, r1, r4, asr #24
   18a0c:	andeq	r8, r1, r8, lsl #22
   18a10:	andeq	r8, r1, r4, asr #24
   18a14:	andeq	r8, r1, r8, lsl #22
   18a18:	andeq	r8, r1, r4, asr #24
   18a1c:	andeq	r8, r1, r4, asr #24
   18a20:	andeq	r8, r1, r8, lsl #22
   18a24:	andeq	r8, r1, r4, asr #24
   18a28:	andeq	r8, r1, r4, asr #24
   18a2c:	andeq	r8, r1, r4, asr #24
   18a30:	andeq	r8, r1, r8, lsl #22
   18a34:	andeq	r8, r1, r4, asr #24
   18a38:	andeq	r8, r1, r4, asr #24
   18a3c:	andeq	r8, r1, r4, asr #24
   18a40:	andeq	r8, r1, r4, asr #24
   18a44:	andeq	r8, r1, r8, lsl #22
   18a48:	andeq	r8, r1, r8, lsl #22
   18a4c:	andeq	r8, r1, r4, asr #24
   18a50:	andeq	r8, r1, r4, asr #24
   18a54:	andeq	r8, r1, r4, asr #24
   18a58:	andeq	r8, r1, r4, asr #24
   18a5c:	andeq	r8, r1, r4, asr #24
   18a60:	andeq	r8, r1, r4, asr #24
   18a64:	andeq	r8, r1, r4, asr #24
   18a68:	andeq	r8, r1, r4, asr #24
   18a6c:	andeq	r8, r1, r4, asr #24
   18a70:	andeq	r8, r1, r4, asr #24
   18a74:	andeq	r8, r1, r4, asr #24
   18a78:	andeq	r8, r1, r4, asr #24
   18a7c:	andeq	r8, r1, r8, lsl #22
   18a80:	andeq	r8, r1, r4, asr #24
   18a84:	andeq	r8, r1, r4, asr #24
   18a88:	andeq	r8, r1, r4, asr #24
   18a8c:	andeq	r8, r1, r8, lsl #22
   18a90:	andeq	r8, r1, r4, asr #24
   18a94:	andeq	r8, r1, r8, lsl #22
   18a98:	andeq	r8, r1, r4, asr #24
   18a9c:	andeq	r8, r1, r4, asr #24
   18aa0:	andeq	r8, r1, r4, asr #24
   18aa4:	andeq	r8, r1, r4, asr #24
   18aa8:	andeq	r8, r1, r4, asr #24
   18aac:	andeq	r8, r1, r4, asr #24
   18ab0:	andeq	r8, r1, r8, lsl #22
   18ab4:	mov	r4, #0
   18ab8:	ldr	r3, [sp, #48]	; 0x30
   18abc:	cmp	r3, #0
   18ac0:	strdeq	r0, [r9]
   18ac4:	beq	18adc <__assert_fail@plt+0x7624>
   18ac8:	ldrb	r5, [r7]
   18acc:	cmp	r5, #0
   18ad0:	bne	189d0 <__assert_fail@plt+0x7518>
   18ad4:	ldrd	r2, [sp]
   18ad8:	strd	r2, [r9]
   18adc:	mov	r0, r4
   18ae0:	add	sp, sp, #20
   18ae4:	ldrd	r4, [sp]
   18ae8:	ldrd	r6, [sp, #8]
   18aec:	ldrd	r8, [sp, #16]
   18af0:	add	sp, sp, #24
   18af4:	pop	{pc}		; (ldr pc, [sp], #4)
   18af8:	ldrd	r2, [sp]
   18afc:	strd	r2, [r9]
   18b00:	orr	r4, r4, #2
   18b04:	b	18adc <__assert_fail@plt+0x7624>
   18b08:	mov	r1, #48	; 0x30
   18b0c:	ldr	r0, [sp, #48]	; 0x30
   18b10:	bl	11320 <strchr@plt>
   18b14:	cmp	r0, #0
   18b18:	beq	18c50 <__assert_fail@plt+0x7798>
   18b1c:	ldrb	r3, [r7, #1]
   18b20:	cmp	r3, #68	; 0x44
   18b24:	beq	18c5c <__assert_fail@plt+0x77a4>
   18b28:	cmp	r3, #105	; 0x69
   18b2c:	beq	18c2c <__assert_fail@plt+0x7774>
   18b30:	cmp	r3, #66	; 0x42
   18b34:	moveq	r7, #2
   18b38:	movne	r7, #1
   18b3c:	moveq	r1, #1000	; 0x3e8
   18b40:	movne	r1, #1024	; 0x400
   18b44:	sub	r5, r5, #66	; 0x42
   18b48:	cmp	r5, #53	; 0x35
   18b4c:	ldrls	pc, [pc, r5, lsl #2]
   18b50:	b	18dc0 <__assert_fail@plt+0x7908>
   18b54:			; <UNDEFINED> instruction: 0x00018cb0
   18b58:	andeq	r8, r1, r0, asr #27
   18b5c:	andeq	r8, r1, r0, asr #27
   18b60:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b64:	andeq	r8, r1, r0, asr #27
   18b68:	andeq	r8, r1, r8, lsl #26
   18b6c:	andeq	r8, r1, r0, asr #27
   18b70:	andeq	r8, r1, r0, asr #27
   18b74:	andeq	r8, r1, r0, asr #27
   18b78:	andeq	r8, r1, r8, lsl sp
   18b7c:	andeq	r8, r1, r0, asr #27
   18b80:	andeq	r8, r1, r8, lsr #26
   18b84:	andeq	r8, r1, r0, asr #27
   18b88:	andeq	r8, r1, r0, asr #27
   18b8c:	andeq	r8, r1, r8, lsr sp
   18b90:	andeq	r8, r1, r0, asr #27
   18b94:	andeq	r8, r1, r0, asr #27
   18b98:	andeq	r8, r1, r0, asr #27
   18b9c:	andeq	r8, r1, r8, asr #26
   18ba0:	andeq	r8, r1, r0, asr #27
   18ba4:	andeq	r8, r1, r0, asr #27
   18ba8:	andeq	r8, r1, r0, asr #27
   18bac:	andeq	r8, r1, r0, asr #27
   18bb0:	andeq	r8, r1, r0, lsr #27
   18bb4:			; <UNDEFINED> instruction: 0x00018db0
   18bb8:	andeq	r8, r1, r0, asr #27
   18bbc:	andeq	r8, r1, r0, asr #27
   18bc0:	andeq	r8, r1, r0, asr #27
   18bc4:	andeq	r8, r1, r0, asr #27
   18bc8:	andeq	r8, r1, r0, asr #27
   18bcc:	andeq	r8, r1, r0, asr #27
   18bd0:	andeq	r8, r1, r0, asr #27
   18bd4:	andeq	r8, r1, r8, ror #24
   18bd8:	ldrdeq	r8, [r1], -r0
   18bdc:	andeq	r8, r1, r0, asr #27
   18be0:	andeq	r8, r1, r0, asr #27
   18be4:	andeq	r8, r1, r0, asr #27
   18be8:	andeq	r8, r1, r8, lsl #26
   18bec:	andeq	r8, r1, r0, asr #27
   18bf0:	andeq	r8, r1, r0, asr #27
   18bf4:	andeq	r8, r1, r0, asr #27
   18bf8:	andeq	r8, r1, r8, lsl sp
   18bfc:	andeq	r8, r1, r0, asr #27
   18c00:	andeq	r8, r1, r8, lsr #26
   18c04:	andeq	r8, r1, r0, asr #27
   18c08:	andeq	r8, r1, r0, asr #27
   18c0c:	andeq	r8, r1, r0, asr #27
   18c10:	andeq	r8, r1, r0, asr #27
   18c14:	andeq	r8, r1, r0, asr #27
   18c18:	andeq	r8, r1, r0, asr #27
   18c1c:	andeq	r8, r1, r8, asr #26
   18c20:	andeq	r8, r1, r0, asr #27
   18c24:	andeq	r8, r1, r0, asr #27
   18c28:	andeq	r8, r1, r8, asr sp
   18c2c:	ldrb	r3, [r7, #2]
   18c30:	cmp	r3, #66	; 0x42
   18c34:	movne	r7, #1
   18c38:	moveq	r7, #3
   18c3c:	mov	r1, #1024	; 0x400
   18c40:	b	18b44 <__assert_fail@plt+0x768c>
   18c44:	mov	r7, #1
   18c48:	mov	r1, #1024	; 0x400
   18c4c:	b	18b44 <__assert_fail@plt+0x768c>
   18c50:	mov	r7, #1
   18c54:	mov	r1, #1024	; 0x400
   18c58:	b	18b44 <__assert_fail@plt+0x768c>
   18c5c:	mov	r7, #2
   18c60:	mov	r1, #1000	; 0x3e8
   18c64:	b	18b44 <__assert_fail@plt+0x768c>
   18c68:	ldr	r3, [sp]
   18c6c:	ldr	ip, [sp, #4]
   18c70:	lsl	r2, ip, #9
   18c74:	orr	r2, r2, r3, lsr #23
   18c78:	lsl	r3, r3, #9
   18c7c:	mov	r0, #0
   18c80:	mov	r1, r0
   18c84:	lsr	r0, ip, #23
   18c88:	orrs	r1, r0, r1
   18c8c:	streq	r3, [sp]
   18c90:	streq	r2, [sp, #4]
   18c94:	moveq	r0, #0
   18c98:	beq	18dd4 <__assert_fail@plt+0x791c>
   18c9c:	mvn	r2, #0
   18ca0:	mvn	r3, #0
   18ca4:	strd	r2, [sp]
   18ca8:	mov	r0, #1
   18cac:	b	18dd4 <__assert_fail@plt+0x791c>
   18cb0:	ldr	r3, [sp]
   18cb4:	ldr	ip, [sp, #4]
   18cb8:	lsl	r2, ip, #10
   18cbc:	orr	r2, r2, r3, lsr #22
   18cc0:	lsl	r3, r3, #10
   18cc4:	mov	r0, #0
   18cc8:	mov	r1, r0
   18ccc:	lsr	r0, ip, #22
   18cd0:	orrs	r1, r0, r1
   18cd4:	streq	r3, [sp]
   18cd8:	streq	r2, [sp, #4]
   18cdc:	moveq	r0, #0
   18ce0:	beq	18dd4 <__assert_fail@plt+0x791c>
   18ce4:	mvn	r2, #0
   18ce8:	mvn	r3, #0
   18cec:	strd	r2, [sp]
   18cf0:	mov	r0, #1
   18cf4:	b	18dd4 <__assert_fail@plt+0x791c>
   18cf8:	mov	r2, #6
   18cfc:	mov	r0, sp
   18d00:	bl	18790 <__assert_fail@plt+0x72d8>
   18d04:	b	18dd4 <__assert_fail@plt+0x791c>
   18d08:	mov	r2, #3
   18d0c:	mov	r0, sp
   18d10:	bl	18790 <__assert_fail@plt+0x72d8>
   18d14:	b	18dd4 <__assert_fail@plt+0x791c>
   18d18:	mov	r2, #1
   18d1c:	mov	r0, sp
   18d20:	bl	18790 <__assert_fail@plt+0x72d8>
   18d24:	b	18dd4 <__assert_fail@plt+0x791c>
   18d28:	mov	r2, #2
   18d2c:	mov	r0, sp
   18d30:	bl	18790 <__assert_fail@plt+0x72d8>
   18d34:	b	18dd4 <__assert_fail@plt+0x791c>
   18d38:	mov	r2, #5
   18d3c:	mov	r0, sp
   18d40:	bl	18790 <__assert_fail@plt+0x72d8>
   18d44:	b	18dd4 <__assert_fail@plt+0x791c>
   18d48:	mov	r2, #4
   18d4c:	mov	r0, sp
   18d50:	bl	18790 <__assert_fail@plt+0x72d8>
   18d54:	b	18dd4 <__assert_fail@plt+0x791c>
   18d58:	ldr	r3, [sp]
   18d5c:	ldr	r2, [sp, #4]
   18d60:	adds	r3, r3, r3
   18d64:	adc	r2, r2, r2
   18d68:	mov	r1, #0
   18d6c:	mov	r0, r1
   18d70:	ldr	r1, [sp, #4]
   18d74:	lsr	r1, r1, #31
   18d78:	orrs	r1, r1, r0
   18d7c:	streq	r3, [sp]
   18d80:	streq	r2, [sp, #4]
   18d84:	moveq	r0, #0
   18d88:	beq	18dd4 <__assert_fail@plt+0x791c>
   18d8c:	mvn	r2, #0
   18d90:	mvn	r3, #0
   18d94:	strd	r2, [sp]
   18d98:	mov	r0, #1
   18d9c:	b	18dd4 <__assert_fail@plt+0x791c>
   18da0:	mov	r2, #8
   18da4:	mov	r0, sp
   18da8:	bl	18790 <__assert_fail@plt+0x72d8>
   18dac:	b	18dd4 <__assert_fail@plt+0x791c>
   18db0:	mov	r2, #7
   18db4:	mov	r0, sp
   18db8:	bl	18790 <__assert_fail@plt+0x72d8>
   18dbc:	b	18dd4 <__assert_fail@plt+0x791c>
   18dc0:	ldrd	r2, [sp]
   18dc4:	strd	r2, [r9]
   18dc8:	orr	r4, r4, #2
   18dcc:	b	18adc <__assert_fail@plt+0x7624>
   18dd0:	mov	r0, #0
   18dd4:	orr	r4, r4, r0
   18dd8:	ldr	r3, [r6]
   18ddc:	add	r2, r3, r7
   18de0:	str	r2, [r6]
   18de4:	ldrb	r3, [r3, r7]
   18de8:	cmp	r3, #0
   18dec:	orrne	r4, r4, #2
   18df0:	b	18ad4 <__assert_fail@plt+0x761c>
   18df4:	mov	r4, #4
   18df8:	b	18adc <__assert_fail@plt+0x7624>
   18dfc:	mov	r4, #4
   18e00:	b	18adc <__assert_fail@plt+0x7624>
   18e04:	strd	r4, [sp, #-16]!
   18e08:	str	r6, [sp, #8]
   18e0c:	str	lr, [sp, #12]
   18e10:	cmp	r1, #0
   18e14:	cmpne	r0, #0
   18e18:	beq	18e54 <__assert_fail@plt+0x799c>
   18e1c:	mov	r2, r0
   18e20:	mov	r3, r1
   18e24:	umull	r4, r5, r0, r1
   18e28:	adds	r1, r5, #0
   18e2c:	movne	r1, #1
   18e30:	cmp	r4, #0
   18e34:	movlt	r1, #1
   18e38:	cmp	r1, #0
   18e3c:	beq	18e5c <__assert_fail@plt+0x79a4>
   18e40:	bl	11338 <__errno_location@plt>
   18e44:	mov	r3, #12
   18e48:	str	r3, [r0]
   18e4c:	mov	r0, #0
   18e50:	b	18e68 <__assert_fail@plt+0x79b0>
   18e54:	mov	r3, #1
   18e58:	mov	r2, r3
   18e5c:	mov	r1, r3
   18e60:	mov	r0, r2
   18e64:	bl	11128 <calloc@plt>
   18e68:	ldrd	r4, [sp]
   18e6c:	ldr	r6, [sp, #8]
   18e70:	add	sp, sp, #12
   18e74:	pop	{pc}		; (ldr pc, [sp], #4)
   18e78:	str	r4, [sp, #-8]!
   18e7c:	str	lr, [sp, #4]
   18e80:	cmp	r0, #0
   18e84:	beq	18ea0 <__assert_fail@plt+0x79e8>
   18e88:	bge	18ea4 <__assert_fail@plt+0x79ec>
   18e8c:	bl	11338 <__errno_location@plt>
   18e90:	mov	r3, #12
   18e94:	str	r3, [r0]
   18e98:	mov	r0, #0
   18e9c:	b	18ea8 <__assert_fail@plt+0x79f0>
   18ea0:	mov	r0, #1
   18ea4:	bl	112c0 <malloc@plt>
   18ea8:	ldr	r4, [sp]
   18eac:	add	sp, sp, #4
   18eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   18eb4:	str	r4, [sp, #-8]!
   18eb8:	str	lr, [sp, #4]
   18ebc:	cmp	r0, #0
   18ec0:	beq	18ee4 <__assert_fail@plt+0x7a2c>
   18ec4:	cmp	r1, #0
   18ec8:	beq	18ef0 <__assert_fail@plt+0x7a38>
   18ecc:	cmp	r1, #0
   18ed0:	blt	18efc <__assert_fail@plt+0x7a44>
   18ed4:	bl	11200 <realloc@plt>
   18ed8:	ldr	r4, [sp]
   18edc:	add	sp, sp, #4
   18ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ee4:	mov	r0, r1
   18ee8:	bl	18e78 <__assert_fail@plt+0x79c0>
   18eec:	b	18ed8 <__assert_fail@plt+0x7a20>
   18ef0:	bl	13eac <__assert_fail@plt+0x29f4>
   18ef4:	mov	r0, #0
   18ef8:	b	18ed8 <__assert_fail@plt+0x7a20>
   18efc:	bl	11338 <__errno_location@plt>
   18f00:	mov	r3, #12
   18f04:	str	r3, [r0]
   18f08:	mov	r0, #0
   18f0c:	b	18ed8 <__assert_fail@plt+0x7a20>
   18f10:	strd	r4, [sp, #-16]!
   18f14:	str	r6, [sp, #8]
   18f18:	str	lr, [sp, #12]
   18f1c:	mov	r5, r0
   18f20:	bl	11284 <__fpending@plt>
   18f24:	mov	r6, r0
   18f28:	ldr	r4, [r5]
   18f2c:	and	r4, r4, #32
   18f30:	mov	r0, r5
   18f34:	bl	18f9c <__assert_fail@plt+0x7ae4>
   18f38:	cmp	r4, #0
   18f3c:	bne	18f70 <__assert_fail@plt+0x7ab8>
   18f40:	cmp	r0, #0
   18f44:	beq	18f60 <__assert_fail@plt+0x7aa8>
   18f48:	cmp	r6, #0
   18f4c:	bne	18f8c <__assert_fail@plt+0x7ad4>
   18f50:	bl	11338 <__errno_location@plt>
   18f54:	ldr	r0, [r0]
   18f58:	subs	r0, r0, #9
   18f5c:	mvnne	r0, #0
   18f60:	ldrd	r4, [sp]
   18f64:	ldr	r6, [sp, #8]
   18f68:	add	sp, sp, #12
   18f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f70:	cmp	r0, #0
   18f74:	bne	18f94 <__assert_fail@plt+0x7adc>
   18f78:	bl	11338 <__errno_location@plt>
   18f7c:	mov	r3, #0
   18f80:	str	r3, [r0]
   18f84:	mvn	r0, #0
   18f88:	b	18f60 <__assert_fail@plt+0x7aa8>
   18f8c:	mvn	r0, #0
   18f90:	b	18f60 <__assert_fail@plt+0x7aa8>
   18f94:	mvn	r0, #0
   18f98:	b	18f60 <__assert_fail@plt+0x7aa8>
   18f9c:	strd	r4, [sp, #-16]!
   18fa0:	str	r6, [sp, #8]
   18fa4:	str	lr, [sp, #12]
   18fa8:	sub	sp, sp, #8
   18fac:	mov	r4, r0
   18fb0:	bl	11398 <fileno@plt>
   18fb4:	cmp	r0, #0
   18fb8:	blt	19030 <__assert_fail@plt+0x7b78>
   18fbc:	mov	r0, r4
   18fc0:	bl	112d8 <__freading@plt>
   18fc4:	cmp	r0, #0
   18fc8:	beq	18ffc <__assert_fail@plt+0x7b44>
   18fcc:	mov	r0, r4
   18fd0:	bl	11398 <fileno@plt>
   18fd4:	mov	r3, #1
   18fd8:	str	r3, [sp]
   18fdc:	mov	r2, #0
   18fe0:	mov	r3, #0
   18fe4:	bl	11260 <lseek64@plt>
   18fe8:	mvn	r2, #0
   18fec:	mvn	r3, #0
   18ff0:	cmp	r1, r3
   18ff4:	cmpeq	r0, r2
   18ff8:	beq	1903c <__assert_fail@plt+0x7b84>
   18ffc:	mov	r0, r4
   19000:	bl	19058 <__assert_fail@plt+0x7ba0>
   19004:	cmp	r0, #0
   19008:	beq	1903c <__assert_fail@plt+0x7b84>
   1900c:	bl	11338 <__errno_location@plt>
   19010:	mov	r5, r0
   19014:	ldr	r6, [r0]
   19018:	mov	r0, r4
   1901c:	bl	113b0 <fclose@plt>
   19020:	cmp	r6, #0
   19024:	strne	r6, [r5]
   19028:	mvnne	r0, #0
   1902c:	b	19044 <__assert_fail@plt+0x7b8c>
   19030:	mov	r0, r4
   19034:	bl	113b0 <fclose@plt>
   19038:	b	19044 <__assert_fail@plt+0x7b8c>
   1903c:	mov	r0, r4
   19040:	bl	113b0 <fclose@plt>
   19044:	add	sp, sp, #8
   19048:	ldrd	r4, [sp]
   1904c:	ldr	r6, [sp, #8]
   19050:	add	sp, sp, #12
   19054:	pop	{pc}		; (ldr pc, [sp], #4)
   19058:	str	r4, [sp, #-8]!
   1905c:	str	lr, [sp, #4]
   19060:	sub	sp, sp, #8
   19064:	subs	r4, r0, #0
   19068:	beq	1907c <__assert_fail@plt+0x7bc4>
   1906c:	mov	r0, r4
   19070:	bl	112d8 <__freading@plt>
   19074:	cmp	r0, #0
   19078:	bne	19094 <__assert_fail@plt+0x7bdc>
   1907c:	mov	r0, r4
   19080:	bl	11164 <fflush@plt>
   19084:	add	sp, sp, #8
   19088:	ldr	r4, [sp]
   1908c:	add	sp, sp, #4
   19090:	pop	{pc}		; (ldr pc, [sp], #4)
   19094:	ldr	r3, [r4]
   19098:	tst	r3, #256	; 0x100
   1909c:	bne	190ac <__assert_fail@plt+0x7bf4>
   190a0:	mov	r0, r4
   190a4:	bl	11164 <fflush@plt>
   190a8:	b	19084 <__assert_fail@plt+0x7bcc>
   190ac:	mov	r3, #1
   190b0:	str	r3, [sp]
   190b4:	mov	r2, #0
   190b8:	mov	r3, #0
   190bc:	mov	r0, r4
   190c0:	bl	19178 <__assert_fail@plt+0x7cc0>
   190c4:	b	190a0 <__assert_fail@plt+0x7be8>
   190c8:	strd	r4, [sp, #-16]!
   190cc:	str	r6, [sp, #8]
   190d0:	str	lr, [sp, #12]
   190d4:	mov	r5, r1
   190d8:	bl	1141c <fopen64@plt>
   190dc:	subs	r4, r0, #0
   190e0:	beq	190f4 <__assert_fail@plt+0x7c3c>
   190e4:	mov	r0, r4
   190e8:	bl	11398 <fileno@plt>
   190ec:	cmp	r0, #2
   190f0:	bls	19108 <__assert_fail@plt+0x7c50>
   190f4:	mov	r0, r4
   190f8:	ldrd	r4, [sp]
   190fc:	ldr	r6, [sp, #8]
   19100:	add	sp, sp, #12
   19104:	pop	{pc}		; (ldr pc, [sp], #4)
   19108:	bl	19328 <__assert_fail@plt+0x7e70>
   1910c:	subs	r6, r0, #0
   19110:	blt	19158 <__assert_fail@plt+0x7ca0>
   19114:	mov	r0, r4
   19118:	bl	18f9c <__assert_fail@plt+0x7ae4>
   1911c:	cmp	r0, #0
   19120:	bne	19138 <__assert_fail@plt+0x7c80>
   19124:	mov	r1, r5
   19128:	mov	r0, r6
   1912c:	bl	1111c <fdopen@plt>
   19130:	subs	r4, r0, #0
   19134:	bne	190f4 <__assert_fail@plt+0x7c3c>
   19138:	bl	11338 <__errno_location@plt>
   1913c:	mov	r4, r0
   19140:	ldr	r5, [r0]
   19144:	mov	r0, r6
   19148:	bl	114ac <close@plt>
   1914c:	str	r5, [r4]
   19150:	mov	r4, #0
   19154:	b	190f4 <__assert_fail@plt+0x7c3c>
   19158:	bl	11338 <__errno_location@plt>
   1915c:	mov	r5, r0
   19160:	ldr	r6, [r0]
   19164:	mov	r0, r4
   19168:	bl	18f9c <__assert_fail@plt+0x7ae4>
   1916c:	str	r6, [r5]
   19170:	mov	r4, #0
   19174:	b	190f4 <__assert_fail@plt+0x7c3c>
   19178:	str	r4, [sp, #-16]!
   1917c:	strd	r6, [sp, #4]
   19180:	str	lr, [sp, #12]
   19184:	sub	sp, sp, #8
   19188:	mov	r4, r0
   1918c:	mov	r6, r2
   19190:	mov	r7, r3
   19194:	ldr	r2, [r0, #8]
   19198:	ldr	r3, [r0, #4]
   1919c:	cmp	r2, r3
   191a0:	beq	191d0 <__assert_fail@plt+0x7d18>
   191a4:	ldr	r3, [sp, #24]
   191a8:	str	r3, [sp]
   191ac:	mov	r2, r6
   191b0:	mov	r3, r7
   191b4:	mov	r0, r4
   191b8:	bl	113bc <fseeko64@plt>
   191bc:	add	sp, sp, #8
   191c0:	ldr	r4, [sp]
   191c4:	ldrd	r6, [sp, #4]
   191c8:	add	sp, sp, #12
   191cc:	pop	{pc}		; (ldr pc, [sp], #4)
   191d0:	ldr	r2, [r0, #20]
   191d4:	ldr	r3, [r0, #16]
   191d8:	cmp	r2, r3
   191dc:	bne	191a4 <__assert_fail@plt+0x7cec>
   191e0:	ldr	r3, [r0, #36]	; 0x24
   191e4:	cmp	r3, #0
   191e8:	bne	191a4 <__assert_fail@plt+0x7cec>
   191ec:	bl	11398 <fileno@plt>
   191f0:	ldr	r3, [sp, #24]
   191f4:	str	r3, [sp]
   191f8:	mov	r2, r6
   191fc:	mov	r3, r7
   19200:	bl	11260 <lseek64@plt>
   19204:	mvn	r2, #0
   19208:	mvn	r3, #0
   1920c:	cmp	r1, r3
   19210:	cmpeq	r0, r2
   19214:	beq	19230 <__assert_fail@plt+0x7d78>
   19218:	ldr	r3, [r4]
   1921c:	bic	r3, r3, #16
   19220:	str	r3, [r4]
   19224:	strd	r0, [r4, #80]	; 0x50
   19228:	mov	r0, #0
   1922c:	b	191bc <__assert_fail@plt+0x7d04>
   19230:	mvn	r0, #0
   19234:	b	191bc <__assert_fail@plt+0x7d04>
   19238:	str	r4, [sp, #-8]!
   1923c:	str	lr, [sp, #4]
   19240:	mov	r0, #14
   19244:	bl	11404 <nl_langinfo@plt>
   19248:	cmp	r0, #0
   1924c:	beq	19270 <__assert_fail@plt+0x7db8>
   19250:	ldrb	r2, [r0]
   19254:	movw	r3, #44820	; 0xaf14
   19258:	movt	r3, #1
   1925c:	cmp	r2, #0
   19260:	moveq	r0, r3
   19264:	ldr	r4, [sp]
   19268:	add	sp, sp, #4
   1926c:	pop	{pc}		; (ldr pc, [sp], #4)
   19270:	movw	r0, #44820	; 0xaf14
   19274:	movt	r0, #1
   19278:	b	19264 <__assert_fail@plt+0x7dac>
   1927c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19280:	strd	r6, [sp, #8]
   19284:	str	lr, [sp, #16]
   19288:	sub	sp, sp, #12
   1928c:	mov	r7, r1
   19290:	mov	r5, r2
   19294:	subs	r6, r0, #0
   19298:	addeq	r6, sp, #4
   1929c:	mov	r0, r6
   192a0:	bl	11290 <mbrtowc@plt>
   192a4:	mov	r4, r0
   192a8:	cmp	r5, #0
   192ac:	cmnne	r0, #3
   192b0:	bhi	192cc <__assert_fail@plt+0x7e14>
   192b4:	mov	r0, r4
   192b8:	add	sp, sp, #12
   192bc:	ldrd	r4, [sp]
   192c0:	ldrd	r6, [sp, #8]
   192c4:	add	sp, sp, #16
   192c8:	pop	{pc}		; (ldr pc, [sp], #4)
   192cc:	mov	r0, #0
   192d0:	bl	19348 <__assert_fail@plt+0x7e90>
   192d4:	cmp	r0, #0
   192d8:	bne	192b4 <__assert_fail@plt+0x7dfc>
   192dc:	ldrb	r3, [r7]
   192e0:	str	r3, [r6]
   192e4:	mov	r4, #1
   192e8:	b	192b4 <__assert_fail@plt+0x7dfc>
   192ec:	str	r4, [sp, #-8]!
   192f0:	str	lr, [sp, #4]
   192f4:	umull	r2, r3, r1, r2
   192f8:	cmp	r3, #0
   192fc:	bne	19314 <__assert_fail@plt+0x7e5c>
   19300:	mov	r1, r2
   19304:	bl	18eb4 <__assert_fail@plt+0x79fc>
   19308:	ldr	r4, [sp]
   1930c:	add	sp, sp, #4
   19310:	pop	{pc}		; (ldr pc, [sp], #4)
   19314:	bl	11338 <__errno_location@plt>
   19318:	mov	r3, #12
   1931c:	str	r3, [r0]
   19320:	mov	r0, #0
   19324:	b	19308 <__assert_fail@plt+0x7e50>
   19328:	str	r4, [sp, #-8]!
   1932c:	str	lr, [sp, #4]
   19330:	mov	r2, #3
   19334:	mov	r1, #0
   19338:	bl	13c04 <__assert_fail@plt+0x274c>
   1933c:	ldr	r4, [sp]
   19340:	add	sp, sp, #4
   19344:	pop	{pc}		; (ldr pc, [sp], #4)
   19348:	push	{lr}		; (str lr, [sp, #-4]!)
   1934c:	sub	sp, sp, #268	; 0x10c
   19350:	movw	r2, #257	; 0x101
   19354:	add	r1, sp, #4
   19358:	bl	193a4 <__assert_fail@plt+0x7eec>
   1935c:	cmp	r0, #0
   19360:	movne	r0, #0
   19364:	bne	1939c <__assert_fail@plt+0x7ee4>
   19368:	movw	r1, #44828	; 0xaf1c
   1936c:	movt	r1, #1
   19370:	add	r0, sp, #4
   19374:	bl	11158 <strcmp@plt>
   19378:	cmp	r0, #0
   1937c:	beq	19398 <__assert_fail@plt+0x7ee0>
   19380:	movw	r1, #44832	; 0xaf20
   19384:	movt	r1, #1
   19388:	add	r0, sp, #4
   1938c:	bl	11158 <strcmp@plt>
   19390:	adds	r0, r0, #0
   19394:	movne	r0, #1
   19398:	and	r0, r0, #1
   1939c:	add	sp, sp, #268	; 0x10c
   193a0:	pop	{pc}		; (ldr pc, [sp], #4)
   193a4:	strd	r4, [sp, #-16]!
   193a8:	str	r6, [sp, #8]
   193ac:	str	lr, [sp, #12]
   193b0:	mov	r6, r1
   193b4:	mov	r4, r2
   193b8:	mov	r1, #0
   193bc:	bl	113e0 <setlocale@plt>
   193c0:	subs	r5, r0, #0
   193c4:	beq	19408 <__assert_fail@plt+0x7f50>
   193c8:	mov	r0, r5
   193cc:	bl	11314 <strlen@plt>
   193d0:	cmp	r4, r0
   193d4:	bhi	19424 <__assert_fail@plt+0x7f6c>
   193d8:	cmp	r4, #0
   193dc:	moveq	r0, #34	; 0x22
   193e0:	beq	19438 <__assert_fail@plt+0x7f80>
   193e4:	sub	r4, r4, #1
   193e8:	mov	r2, r4
   193ec:	mov	r1, r5
   193f0:	mov	r0, r6
   193f4:	bl	11194 <memcpy@plt>
   193f8:	mov	r3, #0
   193fc:	strb	r3, [r6, r4]
   19400:	mov	r0, #34	; 0x22
   19404:	b	19438 <__assert_fail@plt+0x7f80>
   19408:	cmp	r4, #0
   1940c:	moveq	r0, #22
   19410:	beq	19438 <__assert_fail@plt+0x7f80>
   19414:	mov	r3, #0
   19418:	strb	r3, [r6]
   1941c:	mov	r0, #22
   19420:	b	19438 <__assert_fail@plt+0x7f80>
   19424:	add	r2, r0, #1
   19428:	mov	r1, r5
   1942c:	mov	r0, r6
   19430:	bl	11194 <memcpy@plt>
   19434:	mov	r0, #0
   19438:	ldrd	r4, [sp]
   1943c:	ldr	r6, [sp, #8]
   19440:	add	sp, sp, #12
   19444:	pop	{pc}		; (ldr pc, [sp], #4)
   19448:	str	r4, [sp, #-8]!
   1944c:	str	lr, [sp, #4]
   19450:	mov	r1, #0
   19454:	bl	113e0 <setlocale@plt>
   19458:	ldr	r4, [sp]
   1945c:	add	sp, sp, #4
   19460:	pop	{pc}		; (ldr pc, [sp], #4)
   19464:	eor	r1, r1, #-2147483648	; 0x80000000
   19468:	b	19470 <__assert_fail@plt+0x7fb8>
   1946c:	eor	r3, r3, #-2147483648	; 0x80000000
   19470:	push	{r4, r5, lr}
   19474:	lsl	r4, r1, #1
   19478:	lsl	r5, r3, #1
   1947c:	teq	r4, r5
   19480:	teqeq	r0, r2
   19484:	orrsne	ip, r4, r0
   19488:	orrsne	ip, r5, r2
   1948c:	mvnsne	ip, r4, asr #21
   19490:	mvnsne	ip, r5, asr #21
   19494:	beq	19680 <__assert_fail@plt+0x81c8>
   19498:	lsr	r4, r4, #21
   1949c:	rsbs	r5, r4, r5, lsr #21
   194a0:	rsblt	r5, r5, #0
   194a4:	ble	194c4 <__assert_fail@plt+0x800c>
   194a8:	add	r4, r4, r5
   194ac:	eor	r2, r0, r2
   194b0:	eor	r3, r1, r3
   194b4:	eor	r0, r2, r0
   194b8:	eor	r1, r3, r1
   194bc:	eor	r2, r0, r2
   194c0:	eor	r3, r1, r3
   194c4:	cmp	r5, #54	; 0x36
   194c8:	pophi	{r4, r5, pc}
   194cc:	tst	r1, #-2147483648	; 0x80000000
   194d0:	lsl	r1, r1, #12
   194d4:	mov	ip, #1048576	; 0x100000
   194d8:	orr	r1, ip, r1, lsr #12
   194dc:	beq	194e8 <__assert_fail@plt+0x8030>
   194e0:	rsbs	r0, r0, #0
   194e4:	rsc	r1, r1, #0
   194e8:	tst	r3, #-2147483648	; 0x80000000
   194ec:	lsl	r3, r3, #12
   194f0:	orr	r3, ip, r3, lsr #12
   194f4:	beq	19500 <__assert_fail@plt+0x8048>
   194f8:	rsbs	r2, r2, #0
   194fc:	rsc	r3, r3, #0
   19500:	teq	r4, r5
   19504:	beq	19668 <__assert_fail@plt+0x81b0>
   19508:	sub	r4, r4, #1
   1950c:	rsbs	lr, r5, #32
   19510:	blt	1952c <__assert_fail@plt+0x8074>
   19514:	lsl	ip, r2, lr
   19518:	adds	r0, r0, r2, lsr r5
   1951c:	adc	r1, r1, #0
   19520:	adds	r0, r0, r3, lsl lr
   19524:	adcs	r1, r1, r3, asr r5
   19528:	b	19548 <__assert_fail@plt+0x8090>
   1952c:	sub	r5, r5, #32
   19530:	add	lr, lr, #32
   19534:	cmp	r2, #1
   19538:	lsl	ip, r3, lr
   1953c:	orrcs	ip, ip, #2
   19540:	adds	r0, r0, r3, asr r5
   19544:	adcs	r1, r1, r3, asr #31
   19548:	and	r5, r1, #-2147483648	; 0x80000000
   1954c:	bpl	1955c <__assert_fail@plt+0x80a4>
   19550:	rsbs	ip, ip, #0
   19554:	rscs	r0, r0, #0
   19558:	rsc	r1, r1, #0
   1955c:	cmp	r1, #1048576	; 0x100000
   19560:	bcc	195a0 <__assert_fail@plt+0x80e8>
   19564:	cmp	r1, #2097152	; 0x200000
   19568:	bcc	19588 <__assert_fail@plt+0x80d0>
   1956c:	lsrs	r1, r1, #1
   19570:	rrxs	r0, r0
   19574:	rrx	ip, ip
   19578:	add	r4, r4, #1
   1957c:	lsl	r2, r4, #21
   19580:	cmn	r2, #4194304	; 0x400000
   19584:	bcs	196e0 <__assert_fail@plt+0x8228>
   19588:	cmp	ip, #-2147483648	; 0x80000000
   1958c:	lsrseq	ip, r0, #1
   19590:	adcs	r0, r0, #0
   19594:	adc	r1, r1, r4, lsl #20
   19598:	orr	r1, r1, r5
   1959c:	pop	{r4, r5, pc}
   195a0:	lsls	ip, ip, #1
   195a4:	adcs	r0, r0, r0
   195a8:	adc	r1, r1, r1
   195ac:	tst	r1, #1048576	; 0x100000
   195b0:	sub	r4, r4, #1
   195b4:	bne	19588 <__assert_fail@plt+0x80d0>
   195b8:	teq	r1, #0
   195bc:	moveq	r1, r0
   195c0:	moveq	r0, #0
   195c4:	clz	r3, r1
   195c8:	addeq	r3, r3, #32
   195cc:	sub	r3, r3, #11
   195d0:	subs	r2, r3, #32
   195d4:	bge	195f8 <__assert_fail@plt+0x8140>
   195d8:	adds	r2, r2, #12
   195dc:	ble	195f4 <__assert_fail@plt+0x813c>
   195e0:	add	ip, r2, #20
   195e4:	rsb	r2, r2, #12
   195e8:	lsl	r0, r1, ip
   195ec:	lsr	r1, r1, r2
   195f0:	b	19608 <__assert_fail@plt+0x8150>
   195f4:	add	r2, r2, #20
   195f8:	rsble	ip, r2, #32
   195fc:	lsl	r1, r1, r2
   19600:	orrle	r1, r1, r0, lsr ip
   19604:	lslle	r0, r0, r2
   19608:	subs	r4, r4, r3
   1960c:	addge	r1, r1, r4, lsl #20
   19610:	orrge	r1, r1, r5
   19614:	popge	{r4, r5, pc}
   19618:	mvn	r4, r4
   1961c:	subs	r4, r4, #31
   19620:	bge	1965c <__assert_fail@plt+0x81a4>
   19624:	adds	r4, r4, #12
   19628:	bgt	19644 <__assert_fail@plt+0x818c>
   1962c:	add	r4, r4, #20
   19630:	rsb	r2, r4, #32
   19634:	lsr	r0, r0, r4
   19638:	orr	r0, r0, r1, lsl r2
   1963c:	orr	r1, r5, r1, lsr r4
   19640:	pop	{r4, r5, pc}
   19644:	rsb	r4, r4, #12
   19648:	rsb	r2, r4, #32
   1964c:	lsr	r0, r0, r2
   19650:	orr	r0, r0, r1, lsl r4
   19654:	mov	r1, r5
   19658:	pop	{r4, r5, pc}
   1965c:	lsr	r0, r1, r4
   19660:	mov	r1, r5
   19664:	pop	{r4, r5, pc}
   19668:	teq	r4, #0
   1966c:	eor	r3, r3, #1048576	; 0x100000
   19670:	eoreq	r1, r1, #1048576	; 0x100000
   19674:	addeq	r4, r4, #1
   19678:	subne	r5, r5, #1
   1967c:	b	19508 <__assert_fail@plt+0x8050>
   19680:	mvns	ip, r4, asr #21
   19684:	mvnsne	ip, r5, asr #21
   19688:	beq	196f0 <__assert_fail@plt+0x8238>
   1968c:	teq	r4, r5
   19690:	teqeq	r0, r2
   19694:	beq	196a8 <__assert_fail@plt+0x81f0>
   19698:	orrs	ip, r4, r0
   1969c:	moveq	r1, r3
   196a0:	moveq	r0, r2
   196a4:	pop	{r4, r5, pc}
   196a8:	teq	r1, r3
   196ac:	movne	r1, #0
   196b0:	movne	r0, #0
   196b4:	popne	{r4, r5, pc}
   196b8:	lsrs	ip, r4, #21
   196bc:	bne	196d0 <__assert_fail@plt+0x8218>
   196c0:	lsls	r0, r0, #1
   196c4:	adcs	r1, r1, r1
   196c8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   196cc:	pop	{r4, r5, pc}
   196d0:	adds	r4, r4, #4194304	; 0x400000
   196d4:	addcc	r1, r1, #1048576	; 0x100000
   196d8:	popcc	{r4, r5, pc}
   196dc:	and	r5, r1, #-2147483648	; 0x80000000
   196e0:	orr	r1, r5, #2130706432	; 0x7f000000
   196e4:	orr	r1, r1, #15728640	; 0xf00000
   196e8:	mov	r0, #0
   196ec:	pop	{r4, r5, pc}
   196f0:	mvns	ip, r4, asr #21
   196f4:	movne	r1, r3
   196f8:	movne	r0, r2
   196fc:	mvnseq	ip, r5, asr #21
   19700:	movne	r3, r1
   19704:	movne	r2, r0
   19708:	orrs	r4, r0, r1, lsl #12
   1970c:	orrseq	r5, r2, r3, lsl #12
   19710:	teqeq	r1, r3
   19714:	orrne	r1, r1, #524288	; 0x80000
   19718:	pop	{r4, r5, pc}
   1971c:	teq	r0, #0
   19720:	moveq	r1, #0
   19724:	bxeq	lr
   19728:	push	{r4, r5, lr}
   1972c:	mov	r4, #1024	; 0x400
   19730:	add	r4, r4, #50	; 0x32
   19734:	mov	r5, #0
   19738:	mov	r1, #0
   1973c:	b	195b8 <__assert_fail@plt+0x8100>
   19740:	teq	r0, #0
   19744:	moveq	r1, #0
   19748:	bxeq	lr
   1974c:	push	{r4, r5, lr}
   19750:	mov	r4, #1024	; 0x400
   19754:	add	r4, r4, #50	; 0x32
   19758:	ands	r5, r0, #-2147483648	; 0x80000000
   1975c:	rsbmi	r0, r0, #0
   19760:	mov	r1, #0
   19764:	b	195b8 <__assert_fail@plt+0x8100>
   19768:	lsls	r2, r0, #1
   1976c:	asr	r1, r2, #3
   19770:	rrx	r1, r1
   19774:	lsl	r0, r2, #28
   19778:	andsne	r3, r2, #-16777216	; 0xff000000
   1977c:	teqne	r3, #-16777216	; 0xff000000
   19780:	eorne	r1, r1, #939524096	; 0x38000000
   19784:	bxne	lr
   19788:	bics	r2, r2, #-16777216	; 0xff000000
   1978c:	bxeq	lr
   19790:	teq	r3, #-16777216	; 0xff000000
   19794:	orreq	r1, r1, #524288	; 0x80000
   19798:	bxeq	lr
   1979c:	push	{r4, r5, lr}
   197a0:	mov	r4, #896	; 0x380
   197a4:	and	r5, r1, #-2147483648	; 0x80000000
   197a8:	bic	r1, r1, #-2147483648	; 0x80000000
   197ac:	b	195b8 <__assert_fail@plt+0x8100>
   197b0:	orrs	r2, r0, r1
   197b4:	bxeq	lr
   197b8:	push	{r4, r5, lr}
   197bc:	mov	r5, #0
   197c0:	b	197e0 <__assert_fail@plt+0x8328>
   197c4:	orrs	r2, r0, r1
   197c8:	bxeq	lr
   197cc:	push	{r4, r5, lr}
   197d0:	ands	r5, r1, #-2147483648	; 0x80000000
   197d4:	bpl	197e0 <__assert_fail@plt+0x8328>
   197d8:	rsbs	r0, r0, #0
   197dc:	rsc	r1, r1, #0
   197e0:	mov	r4, #1024	; 0x400
   197e4:	add	r4, r4, #50	; 0x32
   197e8:	lsrs	ip, r1, #22
   197ec:	beq	1955c <__assert_fail@plt+0x80a4>
   197f0:	mov	r2, #3
   197f4:	lsrs	ip, ip, #3
   197f8:	addne	r2, r2, #3
   197fc:	lsrs	ip, ip, #3
   19800:	addne	r2, r2, #3
   19804:	add	r2, r2, ip, lsr #3
   19808:	rsb	r3, r2, #32
   1980c:	lsl	ip, r0, r3
   19810:	lsr	r0, r0, r2
   19814:	orr	r0, r0, r1, lsl r3
   19818:	lsr	r1, r1, r2
   1981c:	add	r4, r4, r2
   19820:	b	1955c <__assert_fail@plt+0x80a4>
   19824:	cmp	r3, #0
   19828:	cmpeq	r2, #0
   1982c:	bne	19850 <__assert_fail@plt+0x8398>
   19830:	cmp	r1, #0
   19834:	movlt	r1, #-2147483648	; 0x80000000
   19838:	movlt	r0, #0
   1983c:	blt	1984c <__assert_fail@plt+0x8394>
   19840:	cmpeq	r0, #0
   19844:	mvnne	r1, #-2147483648	; 0x80000000
   19848:	mvnne	r0, #0
   1984c:	b	19934 <__assert_fail@plt+0x847c>
   19850:	sub	sp, sp, #8
   19854:	push	{sp, lr}
   19858:	cmp	r1, #0
   1985c:	blt	1987c <__assert_fail@plt+0x83c4>
   19860:	cmp	r3, #0
   19864:	blt	198b0 <__assert_fail@plt+0x83f8>
   19868:	bl	19988 <__assert_fail@plt+0x84d0>
   1986c:	ldr	lr, [sp, #4]
   19870:	add	sp, sp, #8
   19874:	pop	{r2, r3}
   19878:	bx	lr
   1987c:	rsbs	r0, r0, #0
   19880:	sbc	r1, r1, r1, lsl #1
   19884:	cmp	r3, #0
   19888:	blt	198d4 <__assert_fail@plt+0x841c>
   1988c:	bl	19988 <__assert_fail@plt+0x84d0>
   19890:	ldr	lr, [sp, #4]
   19894:	add	sp, sp, #8
   19898:	pop	{r2, r3}
   1989c:	rsbs	r0, r0, #0
   198a0:	sbc	r1, r1, r1, lsl #1
   198a4:	rsbs	r2, r2, #0
   198a8:	sbc	r3, r3, r3, lsl #1
   198ac:	bx	lr
   198b0:	rsbs	r2, r2, #0
   198b4:	sbc	r3, r3, r3, lsl #1
   198b8:	bl	19988 <__assert_fail@plt+0x84d0>
   198bc:	ldr	lr, [sp, #4]
   198c0:	add	sp, sp, #8
   198c4:	pop	{r2, r3}
   198c8:	rsbs	r0, r0, #0
   198cc:	sbc	r1, r1, r1, lsl #1
   198d0:	bx	lr
   198d4:	rsbs	r2, r2, #0
   198d8:	sbc	r3, r3, r3, lsl #1
   198dc:	bl	19988 <__assert_fail@plt+0x84d0>
   198e0:	ldr	lr, [sp, #4]
   198e4:	add	sp, sp, #8
   198e8:	pop	{r2, r3}
   198ec:	rsbs	r2, r2, #0
   198f0:	sbc	r3, r3, r3, lsl #1
   198f4:	bx	lr
   198f8:	cmp	r3, #0
   198fc:	cmpeq	r2, #0
   19900:	bne	19918 <__assert_fail@plt+0x8460>
   19904:	cmp	r1, #0
   19908:	cmpeq	r0, #0
   1990c:	mvnne	r1, #0
   19910:	mvnne	r0, #0
   19914:	b	19934 <__assert_fail@plt+0x847c>
   19918:	sub	sp, sp, #8
   1991c:	push	{sp, lr}
   19920:	bl	19988 <__assert_fail@plt+0x84d0>
   19924:	ldr	lr, [sp, #4]
   19928:	add	sp, sp, #8
   1992c:	pop	{r2, r3}
   19930:	bx	lr
   19934:	push	{r1, lr}
   19938:	mov	r0, #8
   1993c:	bl	11140 <raise@plt>
   19940:	pop	{r1, pc}
   19944:	andeq	r0, r0, r0
   19948:	vmov	d6, r0, r1
   1994c:	vldr	d7, [pc, #36]	; 19978 <__assert_fail@plt+0x84c0>
   19950:	vldr	d5, [pc, #40]	; 19980 <__assert_fail@plt+0x84c8>
   19954:	vmul.f64	d7, d6, d7
   19958:	vcvt.u32.f64	s14, d7
   1995c:	vcvt.f64.u32	d4, s14
   19960:	vmov	r1, s14
   19964:	vmls.f64	d6, d4, d5
   19968:	vcvt.u32.f64	s15, d6
   1996c:	vmov	r0, s15
   19970:	bx	lr
   19974:	nop			; (mov r0, r0)
   19978:	andeq	r0, r0, r0
   1997c:	ldclcc	0, cr0, [r0]
   19980:	andeq	r0, r0, r0
   19984:	mvnsmi	r0, r0
   19988:	cmp	r1, r3
   1998c:	cmpeq	r0, r2
   19990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19994:	mov	r4, r0
   19998:	movcc	r0, #0
   1999c:	mov	r5, r1
   199a0:	ldr	lr, [sp, #36]	; 0x24
   199a4:	movcc	r1, r0
   199a8:	bcc	19aa4 <__assert_fail@plt+0x85ec>
   199ac:	cmp	r3, #0
   199b0:	clzeq	ip, r2
   199b4:	clzne	ip, r3
   199b8:	addeq	ip, ip, #32
   199bc:	cmp	r5, #0
   199c0:	clzeq	r1, r4
   199c4:	addeq	r1, r1, #32
   199c8:	clzne	r1, r5
   199cc:	sub	ip, ip, r1
   199d0:	sub	sl, ip, #32
   199d4:	lsl	r9, r3, ip
   199d8:	rsb	fp, ip, #32
   199dc:	orr	r9, r9, r2, lsl sl
   199e0:	orr	r9, r9, r2, lsr fp
   199e4:	lsl	r8, r2, ip
   199e8:	cmp	r5, r9
   199ec:	cmpeq	r4, r8
   199f0:	movcc	r0, #0
   199f4:	movcc	r1, r0
   199f8:	bcc	19a14 <__assert_fail@plt+0x855c>
   199fc:	mov	r0, #1
   19a00:	subs	r4, r4, r8
   19a04:	lsl	r1, r0, sl
   19a08:	orr	r1, r1, r0, lsr fp
   19a0c:	lsl	r0, r0, ip
   19a10:	sbc	r5, r5, r9
   19a14:	cmp	ip, #0
   19a18:	beq	19aa4 <__assert_fail@plt+0x85ec>
   19a1c:	lsr	r6, r8, #1
   19a20:	orr	r6, r6, r9, lsl #31
   19a24:	lsr	r7, r9, #1
   19a28:	mov	r2, ip
   19a2c:	b	19a50 <__assert_fail@plt+0x8598>
   19a30:	subs	r3, r4, r6
   19a34:	sbc	r8, r5, r7
   19a38:	adds	r3, r3, r3
   19a3c:	adc	r8, r8, r8
   19a40:	adds	r4, r3, #1
   19a44:	adc	r5, r8, #0
   19a48:	subs	r2, r2, #1
   19a4c:	beq	19a6c <__assert_fail@plt+0x85b4>
   19a50:	cmp	r5, r7
   19a54:	cmpeq	r4, r6
   19a58:	bcs	19a30 <__assert_fail@plt+0x8578>
   19a5c:	adds	r4, r4, r4
   19a60:	adc	r5, r5, r5
   19a64:	subs	r2, r2, #1
   19a68:	bne	19a50 <__assert_fail@plt+0x8598>
   19a6c:	lsr	r3, r4, ip
   19a70:	orr	r3, r3, r5, lsl fp
   19a74:	lsr	r2, r5, ip
   19a78:	orr	r3, r3, r5, lsr sl
   19a7c:	adds	r0, r0, r4
   19a80:	mov	r4, r3
   19a84:	lsl	r3, r2, ip
   19a88:	orr	r3, r3, r4, lsl sl
   19a8c:	lsl	ip, r4, ip
   19a90:	orr	r3, r3, r4, lsr fp
   19a94:	adc	r1, r1, r5
   19a98:	subs	r0, r0, ip
   19a9c:	mov	r5, r2
   19aa0:	sbc	r1, r1, r3
   19aa4:	cmp	lr, #0
   19aa8:	strdne	r4, [lr]
   19aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ab0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ab4:	mov	r7, r0
   19ab8:	ldr	r6, [pc, #72]	; 19b08 <__assert_fail@plt+0x8650>
   19abc:	ldr	r5, [pc, #72]	; 19b0c <__assert_fail@plt+0x8654>
   19ac0:	add	r6, pc, r6
   19ac4:	add	r5, pc, r5
   19ac8:	sub	r6, r6, r5
   19acc:	mov	r8, r1
   19ad0:	mov	r9, r2
   19ad4:	bl	110fc <fdopen@plt-0x20>
   19ad8:	asrs	r6, r6, #2
   19adc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ae0:	mov	r4, #0
   19ae4:	add	r4, r4, #1
   19ae8:	ldr	r3, [r5], #4
   19aec:	mov	r2, r9
   19af0:	mov	r1, r8
   19af4:	mov	r0, r7
   19af8:	blx	r3
   19afc:	cmp	r6, r4
   19b00:	bne	19ae4 <__assert_fail@plt+0x862c>
   19b04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b08:	andeq	r2, r1, ip, asr #8
   19b0c:	andeq	r2, r1, r4, asr #8
   19b10:	bx	lr
   19b14:	ldr	r3, [pc, #12]	; 19b28 <__assert_fail@plt+0x8670>
   19b18:	mov	r1, #0
   19b1c:	add	r3, pc, r3
   19b20:	ldr	r2, [r3]
   19b24:	b	11350 <__cxa_atexit@plt>
   19b28:	andeq	r2, r1, r8, lsr #12

Disassembly of section .fini:

00019b2c <.fini>:
   19b2c:	push	{r3, lr}
   19b30:	pop	{r3, pc}
