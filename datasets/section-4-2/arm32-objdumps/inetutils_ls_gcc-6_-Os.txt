
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b38 <.init>:
   10b38:	push	{r3, lr}
   10b3c:	bl	10e20 <__assert_fail@plt+0x4c>
   10b40:	pop	{r3, pc}

Disassembly of section .plt:

00010b44 <fstatfs64@plt-0x14>:
   10b44:	push	{lr}		; (str lr, [sp, #-4]!)
   10b48:	ldr	lr, [pc, #4]	; 10b54 <fstatfs64@plt-0x4>
   10b4c:	add	lr, pc, lr
   10b50:	ldr	pc, [lr, #8]!
   10b54:	andeq	r7, r1, ip, lsr #9

00010b58 <fstatfs64@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #94208	; 0x17000
   10b60:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b64 <calloc@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b70 <raise@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1180]!	; 0x49c

00010b7c <strcmp@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #94208	; 0x17000
   10b84:	ldr	pc, [ip, #1172]!	; 0x494

00010b88 <getpwuid@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1164]!	; 0x48c

00010b94 <printf@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1156]!	; 0x484

00010ba0 <getuid@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bac <memmove@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1140]!	; 0x474

00010bb8 <free@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc4 <memcpy@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1124]!	; 0x464

00010bd0 <time@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bdc <ctime@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1108]!	; 0x454

00010be8 <realloc@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf4 <funlockfile@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1092]!	; 0x444

00010c00 <__fxstatat64@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1084]!	; 0x43c

00010c0c <__fxstat64@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1076]!	; 0x434

00010c18 <readlink@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1068]!	; 0x42c

00010c24 <ioctl@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1060]!	; 0x424

00010c30 <strcpy@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1052]!	; 0x41c

00010c3c <open64@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1044]!	; 0x414

00010c48 <getenv@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1036]!	; 0x40c

00010c54 <malloc@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1028]!	; 0x404

00010c60 <__libc_start_main@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c6c <strerror@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c78 <__gmon_start__@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c84 <__ctype_b_loc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c90 <strlen@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #988]!	; 0x3dc

00010c9c <strchr@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca8 <openat64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb4 <fprintf@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #964]!	; 0x3c4

00010cc0 <__errno_location@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #956]!	; 0x3bc

00010ccc <snprintf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd8 <memset@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce4 <putchar@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #932]!	; 0x3a4

00010cf0 <fcntl64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #924]!	; 0x39c

00010cfc <strrchr@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #916]!	; 0x394

00010d08 <fputc@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #908]!	; 0x38c

00010d14 <readdir64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #900]!	; 0x384

00010d20 <fdopendir@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #892]!	; 0x37c

00010d2c <dirfd@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #884]!	; 0x374

00010d38 <flockfile@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #876]!	; 0x36c

00010d44 <atoi@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #868]!	; 0x364

00010d50 <fchdir@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #860]!	; 0x35c

00010d5c <qsort@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #852]!	; 0x354

00010d68 <__xstat64@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #844]!	; 0x34c

00010d74 <isatty@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #836]!	; 0x344

00010d80 <fputs@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #828]!	; 0x33c

00010d8c <strncmp@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #820]!	; 0x334

00010d98 <abort@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #812]!	; 0x32c

00010da4 <close@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #804]!	; 0x324

00010db0 <__lxstat64@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #796]!	; 0x31c

00010dbc <closedir@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #788]!	; 0x314

00010dc8 <getgrgid@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #780]!	; 0x30c

00010dd4 <__assert_fail@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #772]!	; 0x304

Disassembly of section .text:

00010de0 <.text>:
   10de0:	b	11674 <__assert_fail@plt+0x8a0>
   10de4:	mov	fp, #0
   10de8:	mov	lr, #0
   10dec:	pop	{r1}		; (ldr r1, [sp], #4)
   10df0:	mov	r2, sp
   10df4:	push	{r2}		; (str r2, [sp, #-4]!)
   10df8:	push	{r0}		; (str r0, [sp, #-4]!)
   10dfc:	ldr	ip, [pc, #16]	; 10e14 <__assert_fail@plt+0x40>
   10e00:	push	{ip}		; (str ip, [sp, #-4]!)
   10e04:	ldr	r0, [pc, #12]	; 10e18 <__assert_fail@plt+0x44>
   10e08:	ldr	r3, [pc, #12]	; 10e1c <__assert_fail@plt+0x48>
   10e0c:	bl	10c60 <__libc_start_main@plt>
   10e10:	bl	10d98 <abort@plt>
   10e14:	andeq	r6, r1, r8, lsr #27
   10e18:	andeq	r0, r1, r0, ror #27
   10e1c:	andeq	r6, r1, r8, asr #26
   10e20:	ldr	r3, [pc, #20]	; 10e3c <__assert_fail@plt+0x68>
   10e24:	ldr	r2, [pc, #20]	; 10e40 <__assert_fail@plt+0x6c>
   10e28:	add	r3, pc, r3
   10e2c:	ldr	r2, [r3, r2]
   10e30:	cmp	r2, #0
   10e34:	bxeq	lr
   10e38:	b	10c78 <__gmon_start__@plt>
   10e3c:	ldrdeq	r7, [r1], -r0
   10e40:	andeq	r0, r0, r4, ror #1
   10e44:	ldr	r3, [pc, #28]	; 10e68 <__assert_fail@plt+0x94>
   10e48:	ldr	r0, [pc, #28]	; 10e6c <__assert_fail@plt+0x98>
   10e4c:	sub	r3, r3, r0
   10e50:	cmp	r3, #6
   10e54:	bxls	lr
   10e58:	ldr	r3, [pc, #16]	; 10e70 <__assert_fail@plt+0x9c>
   10e5c:	cmp	r3, #0
   10e60:	bxeq	lr
   10e64:	bx	r3
   10e68:	andeq	r8, r2, r3, lsl r1
   10e6c:	andeq	r8, r2, r0, lsl r1
   10e70:	andeq	r0, r0, r0
   10e74:	ldr	r1, [pc, #36]	; 10ea0 <__assert_fail@plt+0xcc>
   10e78:	ldr	r0, [pc, #36]	; 10ea4 <__assert_fail@plt+0xd0>
   10e7c:	sub	r1, r1, r0
   10e80:	asr	r1, r1, #2
   10e84:	add	r1, r1, r1, lsr #31
   10e88:	asrs	r1, r1, #1
   10e8c:	bxeq	lr
   10e90:	ldr	r3, [pc, #16]	; 10ea8 <__assert_fail@plt+0xd4>
   10e94:	cmp	r3, #0
   10e98:	bxeq	lr
   10e9c:	bx	r3
   10ea0:	andeq	r8, r2, r0, lsl r1
   10ea4:	andeq	r8, r2, r0, lsl r1
   10ea8:	andeq	r0, r0, r0
   10eac:	push	{r4, lr}
   10eb0:	ldr	r4, [pc, #24]	; 10ed0 <__assert_fail@plt+0xfc>
   10eb4:	ldrb	r3, [r4]
   10eb8:	cmp	r3, #0
   10ebc:	popne	{r4, pc}
   10ec0:	bl	10e44 <__assert_fail@plt+0x70>
   10ec4:	mov	r3, #1
   10ec8:	strb	r3, [r4]
   10ecc:	pop	{r4, pc}
   10ed0:	andeq	r8, r2, r4, lsl r1
   10ed4:	ldr	r0, [pc, #40]	; 10f04 <__assert_fail@plt+0x130>
   10ed8:	ldr	r3, [r0]
   10edc:	cmp	r3, #0
   10ee0:	bne	10ee8 <__assert_fail@plt+0x114>
   10ee4:	b	10e74 <__assert_fail@plt+0xa0>
   10ee8:	ldr	r3, [pc, #24]	; 10f08 <__assert_fail@plt+0x134>
   10eec:	cmp	r3, #0
   10ef0:	beq	10ee4 <__assert_fail@plt+0x110>
   10ef4:	push	{r4, lr}
   10ef8:	blx	r3
   10efc:	pop	{r4, lr}
   10f00:	b	10e74 <__assert_fail@plt+0xa0>
   10f04:	andeq	r7, r2, r4, lsl pc
   10f08:	andeq	r0, r0, r0
   10f0c:	ldr	r0, [r0]
   10f10:	ldrh	r3, [r0, #56]	; 0x38
   10f14:	cmp	r3, #7
   10f18:	beq	10f90 <__assert_fail@plt+0x1bc>
   10f1c:	ldr	r1, [r1]
   10f20:	ldrh	r2, [r1, #56]	; 0x38
   10f24:	cmp	r2, #7
   10f28:	beq	10f90 <__assert_fail@plt+0x1bc>
   10f2c:	cmp	r2, #10
   10f30:	cmpne	r3, #10
   10f34:	bne	10f50 <__assert_fail@plt+0x17c>
   10f38:	cmp	r2, #10
   10f3c:	movne	r3, #1
   10f40:	bne	10f94 <__assert_fail@plt+0x1c0>
   10f44:	cmp	r3, #10
   10f48:	bne	10f9c <__assert_fail@plt+0x1c8>
   10f4c:	b	12858 <__assert_fail@plt+0x1a84>
   10f50:	cmp	r3, r2
   10f54:	beq	10f84 <__assert_fail@plt+0x1b0>
   10f58:	ldr	ip, [r0, #48]	; 0x30
   10f5c:	cmp	ip, #0
   10f60:	bne	10f84 <__assert_fail@plt+0x1b0>
   10f64:	ldr	ip, [pc, #56]	; 10fa4 <__assert_fail@plt+0x1d0>
   10f68:	ldr	ip, [ip]
   10f6c:	cmp	ip, #0
   10f70:	bne	10f84 <__assert_fail@plt+0x1b0>
   10f74:	cmp	r3, #1
   10f78:	beq	10f94 <__assert_fail@plt+0x1c0>
   10f7c:	cmp	r2, #1
   10f80:	beq	10f9c <__assert_fail@plt+0x1c8>
   10f84:	ldr	r3, [pc, #28]	; 10fa8 <__assert_fail@plt+0x1d4>
   10f88:	ldr	r3, [r3]
   10f8c:	bx	r3
   10f90:	mov	r3, #0
   10f94:	mov	r0, r3
   10f98:	bx	lr
   10f9c:	mvn	r3, #0
   10fa0:	b	10f94 <__assert_fail@plt+0x1c0>
   10fa4:	muleq	r2, ip, r1
   10fa8:	andeq	r8, r2, r8, lsl r1
   10fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb0:	sub	sp, sp, #180	; 0xb4
   10fb4:	subs	r9, r1, #0
   10fb8:	str	r0, [sp, #52]	; 0x34
   10fbc:	beq	11360 <__assert_fail@plt+0x58c>
   10fc0:	ldr	r3, [pc, #1060]	; 113ec <__assert_fail@plt+0x618>
   10fc4:	ldr	r3, [r3]
   10fc8:	cmp	r3, #0
   10fcc:	bne	11160 <__assert_fail@plt+0x38c>
   10fd0:	ldr	r3, [pc, #1048]	; 113f0 <__assert_fail@plt+0x61c>
   10fd4:	ldr	r3, [r3]
   10fd8:	cmp	r3, #0
   10fdc:	bne	11160 <__assert_fail@plt+0x38c>
   10fe0:	ldr	r3, [pc, #1036]	; 113f4 <__assert_fail@plt+0x620>
   10fe4:	ldr	r8, [r3]
   10fe8:	adds	r8, r8, #0
   10fec:	movne	r8, #1
   10ff0:	mov	r2, #0
   10ff4:	mov	r3, #0
   10ff8:	mov	r4, r9
   10ffc:	mov	r5, #0
   11000:	str	r5, [sp, #32]
   11004:	str	r5, [sp, #20]
   11008:	str	r5, [sp, #16]
   1100c:	str	r5, [sp, #44]	; 0x2c
   11010:	str	r5, [sp, #40]	; 0x28
   11014:	str	r5, [sp, #12]
   11018:	str	r5, [sp, #8]
   1101c:	str	r5, [sp, #4]
   11020:	str	r5, [sp]
   11024:	str	r5, [sp, #36]	; 0x24
   11028:	strd	r2, [sp, #24]
   1102c:	ldrh	r3, [r4, #56]	; 0x38
   11030:	cmp	r3, #10
   11034:	cmpne	r3, #7
   11038:	bne	11168 <__assert_fail@plt+0x394>
   1103c:	ldr	r3, [pc, #948]	; 113f8 <__assert_fail@plt+0x624>
   11040:	ldr	r0, [r4, #32]
   11044:	ldr	r6, [r3]
   11048:	bl	10c6c <strerror@plt>
   1104c:	add	r2, r4, #168	; 0xa8
   11050:	ldr	r1, [pc, #932]	; 113fc <__assert_fail@plt+0x628>
   11054:	mov	r3, r0
   11058:	mov	r0, r6
   1105c:	bl	10cb4 <fprintf@plt>
   11060:	ldr	r2, [pc, #920]	; 11400 <__assert_fail@plt+0x62c>
   11064:	mov	r3, #1
   11068:	str	r3, [r4, #16]
   1106c:	str	r3, [r2]
   11070:	ldr	r4, [r4, #8]
   11074:	cmp	r4, #0
   11078:	bne	1102c <__assert_fail@plt+0x258>
   1107c:	ldr	r3, [sp, #32]
   11080:	cmp	r3, #0
   11084:	beq	11360 <__assert_fail@plt+0x58c>
   11088:	str	r3, [sp, #140]	; 0x8c
   1108c:	ldr	r3, [sp, #4]
   11090:	cmp	r8, #0
   11094:	str	r9, [sp, #128]	; 0x80
   11098:	str	r3, [sp, #144]	; 0x90
   1109c:	beq	11124 <__assert_fail@plt+0x350>
   110a0:	ldr	r3, [sp, #40]	; 0x28
   110a4:	ldr	r0, [sp, #12]
   110a8:	str	r3, [sp, #136]	; 0x88
   110ac:	ldr	r3, [sp, #36]	; 0x24
   110b0:	add	r2, sp, #56	; 0x38
   110b4:	asr	r1, r0, #31
   110b8:	str	r3, [sp, #132]	; 0x84
   110bc:	bl	161ac <__assert_fail@plt+0x53d8>
   110c0:	bl	10c90 <strlen@plt>
   110c4:	ldr	r3, [sp, #44]	; 0x2c
   110c8:	add	r2, sp, #56	; 0x38
   110cc:	str	r3, [sp, #152]	; 0x98
   110d0:	ldr	r3, [sp, #16]
   110d4:	mov	r1, #0
   110d8:	str	r3, [sp, #156]	; 0x9c
   110dc:	str	r0, [sp, #148]	; 0x94
   110e0:	ldr	r0, [sp]
   110e4:	bl	161ac <__assert_fail@plt+0x53d8>
   110e8:	bl	10c90 <strlen@plt>
   110ec:	add	r2, sp, #56	; 0x38
   110f0:	mov	r1, #0
   110f4:	str	r0, [sp, #160]	; 0xa0
   110f8:	ldr	r0, [sp, #8]
   110fc:	bl	161ac <__assert_fail@plt+0x53d8>
   11100:	bl	10c90 <strlen@plt>
   11104:	add	r2, sp, #56	; 0x38
   11108:	str	r0, [sp, #164]	; 0xa4
   1110c:	ldrd	r0, [sp, #24]
   11110:	bl	161ac <__assert_fail@plt+0x53d8>
   11114:	bl	10c90 <strlen@plt>
   11118:	ldr	r3, [sp, #20]
   1111c:	str	r3, [sp, #172]	; 0xac
   11120:	str	r0, [sp, #168]	; 0xa8
   11124:	ldr	r4, [pc, #728]	; 11404 <__assert_fail@plt+0x630>
   11128:	add	r0, sp, #128	; 0x80
   1112c:	ldr	r3, [r4, #4]
   11130:	blx	r3
   11134:	mov	r3, #1
   11138:	str	r3, [r4, #8]
   1113c:	ldr	r3, [pc, #684]	; 113f0 <__assert_fail@plt+0x61c>
   11140:	ldr	r3, [r3]
   11144:	cmp	r3, #0
   11148:	beq	11360 <__assert_fail@plt+0x58c>
   1114c:	ldr	r0, [r9, #20]
   11150:	bl	12b24 <__assert_fail@plt+0x1d50>
   11154:	ldr	r9, [r9, #8]
   11158:	cmp	r9, #0
   1115c:	b	11148 <__assert_fail@plt+0x374>
   11160:	mov	r8, #1
   11164:	b	10ff0 <__assert_fail@plt+0x21c>
   11168:	ldr	r2, [sp, #52]	; 0x34
   1116c:	cmp	r2, #0
   11170:	bne	11194 <__assert_fail@plt+0x3c0>
   11174:	cmp	r3, #1
   11178:	bne	111b4 <__assert_fail@plt+0x3e0>
   1117c:	ldr	r2, [pc, #644]	; 11408 <__assert_fail@plt+0x634>
   11180:	ldr	r2, [r2]
   11184:	cmp	r2, #0
   11188:	bne	111b4 <__assert_fail@plt+0x3e0>
   1118c:	str	r3, [r4, #16]
   11190:	b	11070 <__assert_fail@plt+0x29c>
   11194:	ldrb	r3, [r4, #168]	; 0xa8
   11198:	cmp	r3, #46	; 0x2e
   1119c:	bne	111b4 <__assert_fail@plt+0x3e0>
   111a0:	ldr	r3, [pc, #612]	; 1140c <__assert_fail@plt+0x638>
   111a4:	ldr	r3, [r3]
   111a8:	cmp	r3, #0
   111ac:	moveq	r3, #1
   111b0:	beq	1118c <__assert_fail@plt+0x3b8>
   111b4:	ldr	r3, [r4, #52]	; 0x34
   111b8:	ldr	r2, [sp, #4]
   111bc:	cmp	r2, r3
   111c0:	movcs	r3, r2
   111c4:	cmp	r8, #0
   111c8:	str	r3, [sp, #4]
   111cc:	beq	113d0 <__assert_fail@plt+0x5fc>
   111d0:	ldr	r0, [sp, #12]
   111d4:	ldrd	r2, [r4, #128]	; 0x80
   111d8:	ldr	r6, [sp]
   111dc:	asr	r1, r0, #31
   111e0:	cmp	r0, r2
   111e4:	sbcs	r1, r1, r3
   111e8:	ldr	r1, [sp, #12]
   111ec:	movlt	r1, r2
   111f0:	str	r1, [sp, #12]
   111f4:	ldrd	r0, [r4, #160]	; 0xa0
   111f8:	mov	r7, #0
   111fc:	ldr	ip, [sp]
   11200:	cmp	r1, r7
   11204:	cmpeq	r0, r6
   11208:	movhi	ip, r0
   1120c:	ldr	r1, [r4, #84]	; 0x54
   11210:	ldr	r0, [sp, #8]
   11214:	ldrd	r6, [sp, #24]
   11218:	cmp	r0, r1
   1121c:	movcs	r1, r0
   11220:	str	r1, [sp, #8]
   11224:	ldrd	r0, [r4, #112]	; 0x70
   11228:	str	ip, [sp]
   1122c:	cmp	r6, r0
   11230:	sbcs	ip, r7, r1
   11234:	strdlt	r0, [sp, #24]
   11238:	ldr	r1, [sp, #36]	; 0x24
   1123c:	add	r3, r1, r2
   11240:	str	r3, [sp, #36]	; 0x24
   11244:	ldr	r3, [pc, #420]	; 113f0 <__assert_fail@plt+0x61c>
   11248:	ldr	r3, [r3]
   1124c:	cmp	r3, #0
   11250:	beq	113d0 <__assert_fail@plt+0x5fc>
   11254:	ldr	r3, [pc, #436]	; 11410 <__assert_fail@plt+0x63c>
   11258:	ldr	r3, [r3]
   1125c:	cmp	r3, #0
   11260:	beq	11280 <__assert_fail@plt+0x4ac>
   11264:	mov	fp, #0
   11268:	ldr	r0, [r4, #88]	; 0x58
   1126c:	add	r2, sp, #80	; 0x50
   11270:	mov	r1, #0
   11274:	bl	161ac <__assert_fail@plt+0x53d8>
   11278:	mov	r7, r0
   1127c:	b	112ac <__assert_fail@plt+0x4d8>
   11280:	ldr	r0, [r4, #88]	; 0x58
   11284:	bl	10b88 <getpwuid@plt>
   11288:	subs	r7, r0, #0
   1128c:	ldr	r0, [r4, #92]	; 0x5c
   11290:	ldrne	r7, [r7]
   11294:	bl	10dc8 <getgrgid@plt>
   11298:	cmp	r0, #0
   1129c:	beq	113e0 <__assert_fail@plt+0x60c>
   112a0:	cmp	r7, #0
   112a4:	ldr	fp, [r0]
   112a8:	beq	11268 <__assert_fail@plt+0x494>
   112ac:	cmp	fp, #0
   112b0:	bne	112c8 <__assert_fail@plt+0x4f4>
   112b4:	ldr	r0, [r4, #92]	; 0x5c
   112b8:	add	r2, sp, #104	; 0x68
   112bc:	mov	r1, #0
   112c0:	bl	161ac <__assert_fail@plt+0x53d8>
   112c4:	mov	fp, r0
   112c8:	mov	r0, r7
   112cc:	bl	10c90 <strlen@plt>
   112d0:	ldr	r3, [sp, #20]
   112d4:	cmp	r3, r0
   112d8:	movlt	r3, r0
   112dc:	mov	sl, r0
   112e0:	mov	r0, fp
   112e4:	str	r3, [sp, #20]
   112e8:	bl	10c90 <strlen@plt>
   112ec:	ldr	r3, [sp, #16]
   112f0:	cmp	r3, r0
   112f4:	movlt	r3, r0
   112f8:	str	r3, [sp, #16]
   112fc:	ldr	r3, [pc, #272]	; 11414 <__assert_fail@plt+0x640>
   11300:	add	r2, sl, r0
   11304:	add	r0, r2, #19
   11308:	ldr	r3, [r3]
   1130c:	str	r2, [sp, #48]	; 0x30
   11310:	cmp	r3, #0
   11314:	movne	r3, r8
   11318:	add	r0, r0, r3
   1131c:	strne	r8, [sp, #44]	; 0x2c
   11320:	ldrne	r5, [pc, #240]	; 11418 <__assert_fail@plt+0x644>
   11324:	bl	16348 <__assert_fail@plt+0x5574>
   11328:	subs	r6, r0, #0
   1132c:	bne	11368 <__assert_fail@plt+0x594>
   11330:	ldr	r3, [pc, #192]	; 113f8 <__assert_fail@plt+0x624>
   11334:	ldr	r4, [r3]
   11338:	bl	10cc0 <__errno_location@plt>
   1133c:	ldr	r0, [r0]
   11340:	bl	10c6c <strerror@plt>
   11344:	ldr	r1, [pc, #208]	; 1141c <__assert_fail@plt+0x648>
   11348:	mov	r2, r0
   1134c:	mov	r0, r4
   11350:	bl	10cb4 <fprintf@plt>
   11354:	ldr	r3, [pc, #164]	; 11400 <__assert_fail@plt+0x62c>
   11358:	mov	r2, #1
   1135c:	str	r2, [r3]
   11360:	add	sp, sp, #180	; 0xb4
   11364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11368:	add	r0, r6, #12
   1136c:	mov	r1, r7
   11370:	str	r0, [r6]
   11374:	bl	10c30 <strcpy@plt>
   11378:	add	r0, sl, #13
   1137c:	add	r0, r6, r0
   11380:	str	r0, [r6, #4]
   11384:	mov	r1, fp
   11388:	bl	10c30 <strcpy@plt>
   1138c:	ldr	r2, [r4, #80]	; 0x50
   11390:	ldr	r3, [sp, #40]	; 0x28
   11394:	and	r2, r2, #45056	; 0xb000
   11398:	cmp	r2, #8192	; 0x2000
   1139c:	moveq	r3, r8
   113a0:	str	r3, [sp, #40]	; 0x28
   113a4:	ldr	r3, [pc, #104]	; 11414 <__assert_fail@plt+0x640>
   113a8:	ldr	r2, [r3]
   113ac:	cmp	r2, #0
   113b0:	beq	113cc <__assert_fail@plt+0x5f8>
   113b4:	ldr	r3, [sp, #48]	; 0x30
   113b8:	mov	r1, r5
   113bc:	add	r0, r3, #14
   113c0:	add	r0, r6, r0
   113c4:	str	r0, [r6, #8]
   113c8:	bl	10c30 <strcpy@plt>
   113cc:	str	r6, [r4, #20]
   113d0:	ldr	r3, [sp, #32]
   113d4:	add	r3, r3, #1
   113d8:	str	r3, [sp, #32]
   113dc:	b	11070 <__assert_fail@plt+0x29c>
   113e0:	cmp	r7, #0
   113e4:	bne	112b4 <__assert_fail@plt+0x4e0>
   113e8:	b	11264 <__assert_fail@plt+0x490>
   113ec:	andeq	r8, r2, ip, ror #2
   113f0:	andeq	r8, r2, r8, lsl #3
   113f4:	andeq	r8, r2, r4, asr r1
   113f8:	andeq	r8, r2, r0, lsl r1
   113fc:	andeq	r6, r1, fp, lsl #29
   11400:	andeq	r8, r2, r4, lsl #3
   11404:	andeq	r8, r2, r8, lsl r1
   11408:	muleq	r2, ip, r1
   1140c:	andeq	r8, r2, ip, lsr #3
   11410:	muleq	r2, r4, r1
   11414:	andeq	r8, r2, r4, ror #2
   11418:	andeq	r7, r1, lr, lsl r0
   1141c:	andeq	r6, r1, r0, lsl lr
   11420:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11424:	mov	r4, r2
   11428:	ldr	r3, [pc, #524]	; 1163c <__assert_fail@plt+0x868>
   1142c:	mov	r5, r1
   11430:	mov	sl, r0
   11434:	ldr	r2, [r3]
   11438:	ldr	r3, [pc, #512]	; 11640 <__assert_fail@plt+0x86c>
   1143c:	cmp	r2, #0
   11440:	moveq	r2, r3
   11444:	movne	r2, #0
   11448:	mov	r1, r4
   1144c:	mov	r0, r5
   11450:	bl	13d94 <__assert_fail@plt+0x2fc0>
   11454:	subs	r7, r0, #0
   11458:	bne	11498 <__assert_fail@plt+0x6c4>
   1145c:	ldr	r3, [pc, #480]	; 11644 <__assert_fail@plt+0x870>
   11460:	ldr	r5, [r5]
   11464:	ldr	r4, [r3]
   11468:	bl	10cc0 <__errno_location@plt>
   1146c:	ldr	r0, [r0]
   11470:	bl	10c6c <strerror@plt>
   11474:	mov	r2, r5
   11478:	ldr	r1, [pc, #456]	; 11648 <__assert_fail@plt+0x874>
   1147c:	mov	r3, r0
   11480:	mov	r0, r4
   11484:	bl	10cb4 <fprintf@plt>
   11488:	ldr	r3, [pc, #444]	; 1164c <__assert_fail@plt+0x878>
   1148c:	mov	r2, #1
   11490:	str	r2, [r3]
   11494:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11498:	mov	r1, #0
   1149c:	bl	14794 <__assert_fail@plt+0x39c0>
   114a0:	mov	r1, r0
   114a4:	mov	r0, #0
   114a8:	bl	10fac <__assert_fail@plt+0x1d8>
   114ac:	ldr	r3, [pc, #412]	; 11650 <__assert_fail@plt+0x87c>
   114b0:	ldr	r5, [r3]
   114b4:	cmp	r5, #0
   114b8:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114bc:	ldr	r6, [pc, #400]	; 11654 <__assert_fail@plt+0x880>
   114c0:	ldr	r3, [r6]
   114c4:	cmp	r3, #0
   114c8:	bne	114d4 <__assert_fail@plt+0x700>
   114cc:	ands	r5, r4, #8
   114d0:	movne	r5, #4096	; 0x1000
   114d4:	ldr	r8, [pc, #360]	; 11644 <__assert_fail@plt+0x870>
   114d8:	ldr	r9, [pc, #376]	; 11658 <__assert_fail@plt+0x884>
   114dc:	mov	r0, r7
   114e0:	bl	141a0 <__assert_fail@plt+0x33cc>
   114e4:	subs	r4, r0, #0
   114e8:	bne	1151c <__assert_fail@plt+0x748>
   114ec:	bl	10cc0 <__errno_location@plt>
   114f0:	ldr	r0, [r0]
   114f4:	cmp	r0, #0
   114f8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114fc:	ldr	r3, [pc, #320]	; 11644 <__assert_fail@plt+0x870>
   11500:	ldr	r4, [r3]
   11504:	bl	10c6c <strerror@plt>
   11508:	ldr	r1, [pc, #332]	; 1165c <__assert_fail@plt+0x888>
   1150c:	mov	r2, r0
   11510:	mov	r0, r4
   11514:	bl	10cb4 <fprintf@plt>
   11518:	b	11488 <__assert_fail@plt+0x6b4>
   1151c:	ldrh	r3, [r4, #56]	; 0x38
   11520:	sub	r3, r3, #1
   11524:	cmp	r3, #6
   11528:	ldrls	pc, [pc, r3, lsl #2]
   1152c:	b	114dc <__assert_fail@plt+0x708>
   11530:	andeq	r1, r1, ip, asr #10
   11534:	strdeq	r1, [r1], -r8
   11538:	ldrdeq	r1, [r1], -ip
   1153c:	andeq	r1, r1, ip, lsl #12
   11540:	ldrdeq	r1, [r1], -ip
   11544:	ldrdeq	r1, [r1], -ip
   11548:	andeq	r1, r1, ip, lsl #12
   1154c:	ldrb	r3, [r4, #168]	; 0xa8
   11550:	cmp	r3, #46	; 0x2e
   11554:	bne	11574 <__assert_fail@plt+0x7a0>
   11558:	ldr	r3, [r4, #48]	; 0x30
   1155c:	cmp	r3, #0
   11560:	beq	11574 <__assert_fail@plt+0x7a0>
   11564:	ldr	r3, [pc, #244]	; 11660 <__assert_fail@plt+0x88c>
   11568:	ldr	r3, [r3]
   1156c:	cmp	r3, #0
   11570:	beq	114dc <__assert_fail@plt+0x708>
   11574:	ldr	r3, [r9, #8]
   11578:	cmp	r3, #0
   1157c:	beq	115d8 <__assert_fail@plt+0x804>
   11580:	ldr	r1, [r4, #28]
   11584:	ldr	r0, [pc, #216]	; 11664 <__assert_fail@plt+0x890>
   11588:	bl	10b94 <printf@plt>
   1158c:	mov	r1, r5
   11590:	mov	r0, r7
   11594:	bl	14794 <__assert_fail@plt+0x39c0>
   11598:	mov	fp, r0
   1159c:	mov	r1, r0
   115a0:	mov	r0, r4
   115a4:	bl	10fac <__assert_fail@plt+0x1d8>
   115a8:	cmp	fp, #0
   115ac:	ldr	r3, [r6]
   115b0:	clz	r3, r3
   115b4:	lsr	r3, r3, #5
   115b8:	moveq	r3, #0
   115bc:	cmp	r3, #0
   115c0:	beq	114dc <__assert_fail@plt+0x708>
   115c4:	mov	r2, #4
   115c8:	mov	r1, r4
   115cc:	mov	r0, r7
   115d0:	bl	14768 <__assert_fail@plt+0x3994>
   115d4:	b	114dc <__assert_fail@plt+0x708>
   115d8:	cmp	sl, #1
   115dc:	ble	1158c <__assert_fail@plt+0x7b8>
   115e0:	ldr	r1, [r4, #28]
   115e4:	ldr	r0, [pc, #124]	; 11668 <__assert_fail@plt+0x894>
   115e8:	bl	10b94 <printf@plt>
   115ec:	mov	r3, #1
   115f0:	str	r3, [r9, #8]
   115f4:	b	1158c <__assert_fail@plt+0x7b8>
   115f8:	add	r2, r4, #168	; 0xa8
   115fc:	ldr	r1, [pc, #104]	; 1166c <__assert_fail@plt+0x898>
   11600:	ldr	r0, [r8]
   11604:	bl	10cb4 <fprintf@plt>
   11608:	b	114dc <__assert_fail@plt+0x708>
   1160c:	ldr	r0, [r4, #32]
   11610:	ldr	fp, [r8]
   11614:	bl	10c6c <strerror@plt>
   11618:	add	r2, r4, #168	; 0xa8
   1161c:	ldr	r1, [pc, #76]	; 11670 <__assert_fail@plt+0x89c>
   11620:	mov	r3, r0
   11624:	mov	r0, fp
   11628:	bl	10cb4 <fprintf@plt>
   1162c:	ldr	r2, [pc, #24]	; 1164c <__assert_fail@plt+0x878>
   11630:	mov	r3, #1
   11634:	str	r3, [r2]
   11638:	b	114dc <__assert_fail@plt+0x708>
   1163c:	andeq	r8, r2, r8, ror r1
   11640:	andeq	r0, r1, ip, lsl #30
   11644:	andeq	r8, r2, r0, lsl r1
   11648:	andeq	r6, r1, fp, lsl lr
   1164c:	andeq	r8, r2, r4, lsl #3
   11650:	muleq	r2, ip, r1
   11654:	andeq	r8, r2, r8, ror #2
   11658:	andeq	r8, r2, r8, lsl r1
   1165c:	andeq	r6, r1, pc, asr #28
   11660:	andeq	r8, r2, ip, lsr #3
   11664:	andeq	r6, r1, ip, lsr #28
   11668:	andeq	r6, r1, sp, lsr #28
   1166c:	andeq	r6, r1, r2, lsr lr
   11670:	andeq	r6, r1, fp, lsl #29
   11674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11678:	sub	sp, sp, #36	; 0x24
   1167c:	ldr	ip, [pc, #1640]	; 11cec <__assert_fail@plt+0xf18>
   11680:	stm	sp, {r0, r1}
   11684:	mov	r0, #0
   11688:	str	r0, [ip]
   1168c:	ldr	ip, [pc, #1628]	; 11cf0 <__assert_fail@plt+0xf1c>
   11690:	ldr	r3, [pc, #1628]	; 11cf4 <__assert_fail@plt+0xf20>
   11694:	ldr	r1, [pc, #1628]	; 11cf8 <__assert_fail@plt+0xf24>
   11698:	str	r0, [ip]
   1169c:	ldr	ip, [pc, #1624]	; 11cfc <__assert_fail@plt+0xf28>
   116a0:	str	r0, [r3]
   116a4:	ldr	r2, [pc, #1620]	; 11d00 <__assert_fail@plt+0xf2c>
   116a8:	str	r0, [ip]
   116ac:	ldr	ip, [pc, #1616]	; 11d04 <__assert_fail@plt+0xf30>
   116b0:	ldr	r3, [pc, #1616]	; 11d08 <__assert_fail@plt+0xf34>
   116b4:	ldr	sl, [pc, #1616]	; 11d0c <__assert_fail@plt+0xf38>
   116b8:	str	r0, [ip]
   116bc:	ldr	ip, [pc, #1612]	; 11d10 <__assert_fail@plt+0xf3c>
   116c0:	ldr	r4, [pc, #1612]	; 11d14 <__assert_fail@plt+0xf40>
   116c4:	ldr	r5, [pc, #1612]	; 11d18 <__assert_fail@plt+0xf44>
   116c8:	str	r0, [ip]
   116cc:	ldr	ip, [pc, #1608]	; 11d1c <__assert_fail@plt+0xf48>
   116d0:	ldr	r7, [pc, #1608]	; 11d20 <__assert_fail@plt+0xf4c>
   116d4:	ldr	r8, [pc, #1608]	; 11d24 <__assert_fail@plt+0xf50>
   116d8:	str	r0, [ip]
   116dc:	ldr	ip, [pc, #1604]	; 11d28 <__assert_fail@plt+0xf54>
   116e0:	ldr	r6, [pc, #1604]	; 11d2c <__assert_fail@plt+0xf58>
   116e4:	ldr	fp, [pc, #1604]	; 11d30 <__assert_fail@plt+0xf5c>
   116e8:	str	r0, [ip]
   116ec:	ldr	ip, [pc, #1600]	; 11d34 <__assert_fail@plt+0xf60>
   116f0:	ldr	r9, [pc, #1600]	; 11d38 <__assert_fail@plt+0xf64>
   116f4:	str	r0, [r3]
   116f8:	str	r0, [ip]
   116fc:	ldr	ip, [pc, #1592]	; 11d3c <__assert_fail@plt+0xf68>
   11700:	str	r0, [r4, #8]
   11704:	str	r0, [r1]
   11708:	str	r0, [ip]
   1170c:	ldr	ip, [pc, #1580]	; 11d40 <__assert_fail@plt+0xf6c>
   11710:	str	r0, [r2]
   11714:	str	r0, [r5]
   11718:	str	r0, [ip]
   1171c:	ldr	ip, [pc, #1568]	; 11d44 <__assert_fail@plt+0xf70>
   11720:	str	r0, [r7]
   11724:	str	r0, [r8]
   11728:	str	r0, [ip]
   1172c:	ldr	ip, [pc, #1556]	; 11d48 <__assert_fail@plt+0xf74>
   11730:	str	r0, [r6]
   11734:	str	r0, [fp]
   11738:	str	r0, [r9]
   1173c:	str	r0, [sl]
   11740:	str	r0, [ip]
   11744:	mov	r0, #1
   11748:	str	r3, [sp, #12]
   1174c:	str	r1, [sp, #8]
   11750:	str	r2, [sp, #16]
   11754:	bl	10d74 <isatty@plt>
   11758:	cmp	r0, #0
   1175c:	moveq	r3, #1
   11760:	streq	r3, [sl]
   11764:	beq	11790 <__assert_fail@plt+0x9bc>
   11768:	ldr	r0, [pc, #1500]	; 11d4c <__assert_fail@plt+0xf78>
   1176c:	bl	10c48 <getenv@plt>
   11770:	cmp	r0, #0
   11774:	beq	11930 <__assert_fail@plt+0xb5c>
   11778:	bl	10d44 <atoi@plt>
   1177c:	ldr	r3, [pc, #1484]	; 11d50 <__assert_fail@plt+0xf7c>
   11780:	str	r0, [r3]
   11784:	mov	r3, #1
   11788:	str	r3, [r9]
   1178c:	str	r3, [r7]
   11790:	bl	10ba0 <getuid@plt>
   11794:	ldr	sl, [pc, #1440]	; 11d3c <__assert_fail@plt+0xf68>
   11798:	mov	r9, #20
   1179c:	cmp	r0, #0
   117a0:	moveq	r3, #1
   117a4:	ldreq	r2, [sp, #12]
   117a8:	streq	r3, [r2]
   117ac:	ldr	r3, [pc, #1440]	; 11d54 <__assert_fail@plt+0xf80>
   117b0:	mov	r2, #1
   117b4:	str	r2, [r3]
   117b8:	ldr	r3, [pc, #1340]	; 11cfc <__assert_fail@plt+0xf28>
   117bc:	ldr	r2, [pc, #1428]	; 11d58 <__assert_fail@plt+0xf84>
   117c0:	ldm	sp, {r0, r1}
   117c4:	str	r3, [sp, #20]
   117c8:	bl	15354 <__assert_fail@plt+0x4580>
   117cc:	ldr	r3, [sp, #20]
   117d0:	cmn	r0, #1
   117d4:	bne	1195c <__assert_fail@plt+0xb88>
   117d8:	ldr	r3, [pc, #1396]	; 11d54 <__assert_fail@plt+0xf80>
   117dc:	ldr	r1, [r3]
   117e0:	ldr	r3, [sp]
   117e4:	sub	r0, r3, r1
   117e8:	ldr	r3, [r6]
   117ec:	cmp	r3, #0
   117f0:	bne	1185c <__assert_fail@plt+0xa88>
   117f4:	ldr	r2, [sp, #8]
   117f8:	ldr	r2, [r2]
   117fc:	cmp	r2, #0
   11800:	bne	11840 <__assert_fail@plt+0xa6c>
   11804:	ldr	r2, [pc, #1328]	; 11d3c <__assert_fail@plt+0xf68>
   11808:	ldr	r2, [r2]
   1180c:	cmp	r2, #0
   11810:	bne	11840 <__assert_fail@plt+0xa6c>
   11814:	ldr	r2, [pc, #1324]	; 11d48 <__assert_fail@plt+0xf74>
   11818:	ldr	r2, [r2]
   1181c:	cmp	r2, #0
   11820:	bne	11840 <__assert_fail@plt+0xa6c>
   11824:	ldr	r2, [pc, #1304]	; 11d44 <__assert_fail@plt+0xf70>
   11828:	ldr	r2, [r2]
   1182c:	cmp	r2, #0
   11830:	bne	11840 <__assert_fail@plt+0xa6c>
   11834:	ldr	r2, [r4, #12]
   11838:	cmp	r2, #0
   1183c:	orreq	r9, r9, #8
   11840:	ldr	r2, [fp]
   11844:	cmp	r2, #0
   11848:	bne	1185c <__assert_fail@plt+0xa88>
   1184c:	ldr	r2, [pc, #1268]	; 11d48 <__assert_fail@plt+0xf74>
   11850:	ldr	r2, [r2]
   11854:	cmp	r2, #0
   11858:	orreq	r9, r9, #1
   1185c:	ldr	r2, [pc, #1244]	; 11d40 <__assert_fail@plt+0xf6c>
   11860:	ldr	r2, [r2]
   11864:	cmp	r2, #0
   11868:	orrne	r9, r9, #128	; 0x80
   1186c:	cmp	r3, #0
   11870:	bne	11884 <__assert_fail@plt+0xab0>
   11874:	ldr	r2, [pc, #1216]	; 11d3c <__assert_fail@plt+0xf68>
   11878:	ldr	r2, [r2]
   1187c:	cmp	r2, #0
   11880:	beq	11890 <__assert_fail@plt+0xabc>
   11884:	ldr	r2, [pc, #1232]	; 11d5c <__assert_fail@plt+0xf88>
   11888:	mov	ip, #2
   1188c:	str	ip, [r2]
   11890:	ldr	r2, [pc, #1132]	; 11d04 <__assert_fail@plt+0xf30>
   11894:	ldr	r2, [r2]
   11898:	cmp	r2, #0
   1189c:	ldr	r2, [r4, #12]
   118a0:	beq	11c9c <__assert_fail@plt+0xec8>
   118a4:	cmp	r2, #1
   118a8:	beq	11c68 <__assert_fail@plt+0xe94>
   118ac:	cmp	r2, #2
   118b0:	beq	11c74 <__assert_fail@plt+0xea0>
   118b4:	cmp	r2, #0
   118b8:	ldreq	r2, [pc, #1184]	; 11d60 <__assert_fail@plt+0xf8c>
   118bc:	beq	11c6c <__assert_fail@plt+0xe98>
   118c0:	ldr	r2, [pc, #1092]	; 11d0c <__assert_fail@plt+0xf38>
   118c4:	ldr	r2, [r2]
   118c8:	cmp	r2, #0
   118cc:	ldrne	r3, [pc, #1168]	; 11d64 <__assert_fail@plt+0xf90>
   118d0:	bne	11904 <__assert_fail@plt+0xb30>
   118d4:	ldr	r2, [r5]
   118d8:	cmp	r2, #0
   118dc:	ldrne	r3, [pc, #1156]	; 11d68 <__assert_fail@plt+0xf94>
   118e0:	bne	11904 <__assert_fail@plt+0xb30>
   118e4:	cmp	r3, #0
   118e8:	ldrne	r3, [pc, #1148]	; 11d6c <__assert_fail@plt+0xf98>
   118ec:	bne	11904 <__assert_fail@plt+0xb30>
   118f0:	ldr	r3, [pc, #1072]	; 11d28 <__assert_fail@plt+0xf54>
   118f4:	ldr	r3, [r3]
   118f8:	cmp	r3, #0
   118fc:	ldrne	r3, [pc, #1132]	; 11d70 <__assert_fail@plt+0xf9c>
   11900:	ldreq	r3, [pc, #1132]	; 11d74 <__assert_fail@plt+0xfa0>
   11904:	cmp	r0, #0
   11908:	str	r3, [r4, #4]
   1190c:	ldrne	r3, [sp, #4]
   11910:	moveq	r0, #1
   11914:	addne	r1, r3, r1, lsl #2
   11918:	mov	r2, r9
   1191c:	ldreq	r1, [pc, #1108]	; 11d78 <__assert_fail@plt+0xfa4>
   11920:	bl	11420 <__assert_fail@plt+0x64c>
   11924:	ldr	r3, [pc, #1104]	; 11d7c <__assert_fail@plt+0xfa8>
   11928:	ldr	r0, [r3]
   1192c:	b	11c60 <__assert_fail@plt+0xe8c>
   11930:	add	r2, sp, #24
   11934:	ldr	r1, [pc, #1092]	; 11d80 <__assert_fail@plt+0xfac>
   11938:	mov	r0, #1
   1193c:	bl	16214 <__assert_fail@plt+0x5440>
   11940:	cmp	r0, #0
   11944:	bne	11784 <__assert_fail@plt+0x9b0>
   11948:	ldrh	r3, [sp, #26]
   1194c:	cmp	r3, #0
   11950:	ldrne	r2, [pc, #1016]	; 11d50 <__assert_fail@plt+0xf7c>
   11954:	strne	r3, [r2]
   11958:	b	11784 <__assert_fail@plt+0x9b0>
   1195c:	sub	r0, r0, #49	; 0x31
   11960:	cmp	r0, #71	; 0x47
   11964:	ldrls	pc, [pc, r0, lsl #2]
   11968:	b	11c5c <__assert_fail@plt+0xe88>
   1196c:	andeq	r1, r1, ip, lsl #21
   11970:	andeq	r1, r1, ip, asr ip
   11974:	andeq	r1, r1, ip, asr ip
   11978:	andeq	r1, r1, ip, asr ip
   1197c:	andeq	r1, r1, ip, asr ip
   11980:	andeq	r1, r1, ip, asr ip
   11984:	andeq	r1, r1, ip, asr ip
   11988:	andeq	r1, r1, ip, asr ip
   1198c:	andeq	r1, r1, ip, asr ip
   11990:	andeq	r1, r1, ip, asr ip
   11994:	andeq	r1, r1, ip, asr ip
   11998:	andeq	r1, r1, ip, asr ip
   1199c:	andeq	r1, r1, ip, asr ip
   119a0:	andeq	r1, r1, ip, asr ip
   119a4:	andeq	r1, r1, ip, asr ip
   119a8:	andeq	r1, r1, ip, asr ip
   119ac:			; <UNDEFINED> instruction: 0x00011bb0
   119b0:	andeq	r1, r1, ip, asr ip
   119b4:	andeq	r1, r1, ip, lsr #21
   119b8:	andeq	r1, r1, ip, asr ip
   119bc:	andeq	r1, r1, ip, asr ip
   119c0:	andeq	r1, r1, r8, lsl #23
   119c4:	andeq	r1, r1, ip, asr ip
   119c8:	andeq	r1, r1, ip, asr ip
   119cc:	andeq	r1, r1, ip, asr ip
   119d0:	andeq	r1, r1, ip, asr ip
   119d4:	andeq	r1, r1, ip, asr ip
   119d8:	muleq	r1, r4, fp
   119dc:	andeq	r1, r1, ip, asr ip
   119e0:	andeq	r1, r1, ip, asr ip
   119e4:	andeq	r1, r1, ip, asr ip
   119e8:	andeq	r1, r1, ip, asr ip
   119ec:	andeq	r1, r1, ip, asr ip
   119f0:	andeq	r1, r1, r0, lsr #23
   119f4:	andeq	r1, r1, r4, lsr #24
   119f8:	andeq	r1, r1, ip, lsr ip
   119fc:	andeq	r1, r1, ip, asr ip
   11a00:	andeq	r1, r1, ip, asr ip
   11a04:	andeq	r1, r1, r0, asr ip
   11a08:	andeq	r1, r1, ip, asr ip
   11a0c:	andeq	r1, r1, ip, asr ip
   11a10:	andeq	r1, r1, ip, asr ip
   11a14:	andeq	r1, r1, ip, asr ip
   11a18:	andeq	r1, r1, ip, asr ip
   11a1c:	andeq	r1, r1, ip, asr ip
   11a20:	andeq	r1, r1, ip, asr ip
   11a24:	andeq	r1, r1, ip, asr ip
   11a28:	andeq	r1, r1, ip, asr ip
   11a2c:	andeq	r1, r1, ip, lsr #23
   11a30:	andeq	r1, r1, ip, asr ip
   11a34:	andeq	r1, r1, r8, asr fp
   11a38:	andeq	r1, r1, r0, asr #23
   11a3c:	andeq	r1, r1, ip, asr ip
   11a40:	ldrdeq	r1, [r1], -r0
   11a44:			; <UNDEFINED> instruction: 0x000117bc
   11a48:	andeq	r1, r1, ip, asr ip
   11a4c:	ldrdeq	r1, [r1], -ip
   11a50:	andeq	r1, r1, ip, asr ip
   11a54:	andeq	r1, r1, r8, ror #23
   11a58:	ldrdeq	r1, [r1], -r4
   11a5c:	andeq	r1, r1, r4, lsl #22
   11a60:	andeq	r1, r1, r0, asr #22
   11a64:	strdeq	r1, [r1], -r4
   11a68:	andeq	r1, r1, r0, lsl #24
   11a6c:	andeq	r1, r1, ip, lsl #24
   11a70:	andeq	r1, r1, r8, lsl ip
   11a74:	andeq	r1, r1, r0, lsr ip
   11a78:	andeq	r1, r1, r8, asr #24
   11a7c:	andeq	r1, r1, r0, ror fp
   11a80:	andeq	r1, r1, ip, asr ip
   11a84:	andeq	r1, r1, ip, asr ip
   11a88:	andeq	r1, r1, ip, lsl fp
   11a8c:	ldr	r2, [pc, #632]	; 11d0c <__assert_fail@plt+0xf38>
   11a90:	mov	r1, #1
   11a94:	str	r1, [r2]
   11a98:	ldr	r1, [pc, #648]	; 11d28 <__assert_fail@plt+0xf54>
   11a9c:	mov	r2, #0
   11aa0:	str	r2, [r1]
   11aa4:	str	r2, [r6]
   11aa8:	b	11af8 <__assert_fail@plt+0xd24>
   11aac:	ldr	r1, [pc, #628]	; 11d28 <__assert_fail@plt+0xf54>
   11ab0:	mov	r2, #1
   11ab4:	str	r2, [r7]
   11ab8:	mov	r2, #0
   11abc:	str	r2, [r1]
   11ac0:	ldr	r1, [pc, #580]	; 11d0c <__assert_fail@plt+0xf38>
   11ac4:	str	r2, [r5]
   11ac8:	str	r2, [r6]
   11acc:	str	r2, [r1]
   11ad0:	b	117bc <__assert_fail@plt+0x9e8>
   11ad4:	ldr	r1, [pc, #528]	; 11cec <__assert_fail@plt+0xf18>
   11ad8:	mov	r2, #1
   11adc:	str	r2, [r6]
   11ae0:	mov	r2, #0
   11ae4:	str	r2, [r1]
   11ae8:	ldr	r1, [pc, #568]	; 11d28 <__assert_fail@plt+0xf54>
   11aec:	str	r2, [r1]
   11af0:	ldr	r1, [pc, #532]	; 11d0c <__assert_fail@plt+0xf38>
   11af4:	str	r2, [r1]
   11af8:	str	r2, [r5]
   11afc:	str	r2, [r7]
   11b00:	b	117bc <__assert_fail@plt+0x9e8>
   11b04:	ldr	r2, [pc, #540]	; 11d28 <__assert_fail@plt+0xf54>
   11b08:	mov	r1, #1
   11b0c:	str	r1, [r2]
   11b10:	mov	r2, #0
   11b14:	ldr	r1, [pc, #496]	; 11d0c <__assert_fail@plt+0xf38>
   11b18:	b	11aa0 <__assert_fail@plt+0xccc>
   11b1c:	ldr	r1, [pc, #516]	; 11d28 <__assert_fail@plt+0xf54>
   11b20:	mov	r2, #1
   11b24:	str	r2, [r5]
   11b28:	mov	r2, #0
   11b2c:	str	r2, [r1]
   11b30:	ldr	r1, [pc, #468]	; 11d0c <__assert_fail@plt+0xf38>
   11b34:	str	r2, [r6]
   11b38:	str	r2, [r1]
   11b3c:	b	11afc <__assert_fail@plt+0xd28>
   11b40:	ldr	r1, [pc, #420]	; 11cec <__assert_fail@plt+0xf18>
   11b44:	mov	r2, #1
   11b48:	str	r2, [r6]
   11b4c:	str	r2, [r1]
   11b50:	mov	r2, #0
   11b54:	b	11ae8 <__assert_fail@plt+0xd14>
   11b58:	ldr	r2, [pc, #468]	; 11d34 <__assert_fail@plt+0xf60>
   11b5c:	mov	r1, #1
   11b60:	str	r1, [r2]
   11b64:	mov	r2, #0
   11b68:	str	r2, [r8]
   11b6c:	b	117bc <__assert_fail@plt+0x9e8>
   11b70:	mov	r2, #1
   11b74:	str	r2, [r8]
   11b78:	ldr	r2, [pc, #436]	; 11d34 <__assert_fail@plt+0xf60>
   11b7c:	mov	r1, #0
   11b80:	str	r1, [r2]
   11b84:	b	117bc <__assert_fail@plt+0x9e8>
   11b88:	mov	r1, #1
   11b8c:	ldr	r2, [pc, #436]	; 11d48 <__assert_fail@plt+0xf74>
   11b90:	b	11b80 <__assert_fail@plt+0xdac>
   11b94:	bic	r9, r9, #16
   11b98:	orr	r9, r9, #2
   11b9c:	b	117bc <__assert_fail@plt+0x9e8>
   11ba0:	mov	r1, #1
   11ba4:	ldr	r2, [pc, #356]	; 11d10 <__assert_fail@plt+0xf3c>
   11ba8:	b	11b80 <__assert_fail@plt+0xdac>
   11bac:	orr	r9, r9, #32
   11bb0:	ldr	r1, [sp, #12]
   11bb4:	mov	r2, #1
   11bb8:	str	r2, [r1]
   11bbc:	b	117bc <__assert_fail@plt+0x9e8>
   11bc0:	mov	r2, #1
   11bc4:	str	r2, [fp]
   11bc8:	mov	r1, #0
   11bcc:	b	11ba4 <__assert_fail@plt+0xdd0>
   11bd0:	mov	r1, #1
   11bd4:	ldr	r2, [pc, #276]	; 11cf0 <__assert_fail@plt+0xf1c>
   11bd8:	b	11b80 <__assert_fail@plt+0xdac>
   11bdc:	mov	r2, #1
   11be0:	ldr	r1, [sp, #8]
   11be4:	b	11bb8 <__assert_fail@plt+0xde4>
   11be8:	mov	r1, #1024	; 0x400
   11bec:	ldr	r2, [pc, #360]	; 11d5c <__assert_fail@plt+0xf88>
   11bf0:	b	11b80 <__assert_fail@plt+0xdac>
   11bf4:	mov	r2, #1
   11bf8:	ldr	r1, [sp, #16]
   11bfc:	b	11bb8 <__assert_fail@plt+0xde4>
   11c00:	mov	r1, #1
   11c04:	ldr	r2, [pc, #312]	; 11d44 <__assert_fail@plt+0xf70>
   11c08:	b	11b80 <__assert_fail@plt+0xdac>
   11c0c:	mov	r1, #1
   11c10:	ldr	r2, [pc, #288]	; 11d38 <__assert_fail@plt+0xf64>
   11c14:	b	11b80 <__assert_fail@plt+0xdac>
   11c18:	mov	r1, #1
   11c1c:	ldr	r2, [pc, #224]	; 11d04 <__assert_fail@plt+0xf30>
   11c20:	b	11b80 <__assert_fail@plt+0xdac>
   11c24:	mov	r2, #1
   11c28:	str	r2, [r4, #12]
   11c2c:	b	117bc <__assert_fail@plt+0x9e8>
   11c30:	mov	r2, #1
   11c34:	str	r2, [sl]
   11c38:	b	117bc <__assert_fail@plt+0x9e8>
   11c3c:	mov	r2, #1
   11c40:	str	r2, [r3]
   11c44:	b	117bc <__assert_fail@plt+0x9e8>
   11c48:	mov	r2, #2
   11c4c:	b	11c28 <__assert_fail@plt+0xe54>
   11c50:	mov	r2, #1
   11c54:	ldr	r1, [pc, #228]	; 11d40 <__assert_fail@plt+0xf6c>
   11c58:	b	11bb8 <__assert_fail@plt+0xde4>
   11c5c:	bl	12834 <__assert_fail@plt+0x1a60>
   11c60:	add	sp, sp, #36	; 0x24
   11c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c68:	ldr	r2, [pc, #276]	; 11d84 <__assert_fail@plt+0xfb0>
   11c6c:	str	r2, [r4]
   11c70:	b	118c0 <__assert_fail@plt+0xaec>
   11c74:	ldr	r2, [r8]
   11c78:	cmp	r2, #0
   11c7c:	ldrne	r2, [pc, #260]	; 11d88 <__assert_fail@plt+0xfb4>
   11c80:	bne	11c6c <__assert_fail@plt+0xe98>
   11c84:	ldr	r2, [pc, #168]	; 11d34 <__assert_fail@plt+0xf60>
   11c88:	ldr	r2, [r2]
   11c8c:	cmp	r2, #0
   11c90:	ldrne	r2, [pc, #244]	; 11d8c <__assert_fail@plt+0xfb8>
   11c94:	ldreq	r2, [pc, #244]	; 11d90 <__assert_fail@plt+0xfbc>
   11c98:	b	11c6c <__assert_fail@plt+0xe98>
   11c9c:	cmp	r2, #1
   11ca0:	beq	11cbc <__assert_fail@plt+0xee8>
   11ca4:	cmp	r2, #2
   11ca8:	beq	11cc4 <__assert_fail@plt+0xef0>
   11cac:	cmp	r2, #0
   11cb0:	ldreq	r2, [pc, #220]	; 11d94 <__assert_fail@plt+0xfc0>
   11cb4:	bne	118c0 <__assert_fail@plt+0xaec>
   11cb8:	b	11c6c <__assert_fail@plt+0xe98>
   11cbc:	ldr	r2, [pc, #212]	; 11d98 <__assert_fail@plt+0xfc4>
   11cc0:	b	11c6c <__assert_fail@plt+0xe98>
   11cc4:	ldr	r2, [r8]
   11cc8:	cmp	r2, #0
   11ccc:	ldrne	r2, [pc, #200]	; 11d9c <__assert_fail@plt+0xfc8>
   11cd0:	bne	11c6c <__assert_fail@plt+0xe98>
   11cd4:	ldr	r2, [pc, #88]	; 11d34 <__assert_fail@plt+0xf60>
   11cd8:	ldr	r2, [r2]
   11cdc:	cmp	r2, #0
   11ce0:	ldrne	r2, [pc, #184]	; 11da0 <__assert_fail@plt+0xfcc>
   11ce4:	ldreq	r2, [pc, #184]	; 11da4 <__assert_fail@plt+0xfd0>
   11ce8:	b	11c6c <__assert_fail@plt+0xe98>
   11cec:	muleq	r2, r4, r1
   11cf0:	andeq	r8, r2, r8, ror r1
   11cf4:	andeq	r8, r2, r8, lsr #3
   11cf8:	andeq	r8, r2, ip, ror #2
   11cfc:	muleq	r2, r0, r1
   11d00:	andeq	r8, r2, r4, ror #2
   11d04:	andeq	r8, r2, r0, ror r1
   11d08:	andeq	r8, r2, ip, lsr #3
   11d0c:	andeq	r8, r2, ip, asr r1
   11d10:	andeq	r8, r2, r8, ror #2
   11d14:	andeq	r8, r2, r8, lsl r1
   11d18:	muleq	r2, r8, r1
   11d1c:	andeq	r8, r2, r8, asr r1
   11d20:	andeq	r8, r2, r0, ror #2
   11d24:	andeq	r8, r2, r4, ror r1
   11d28:			; <UNDEFINED> instruction: 0x000281b4
   11d2c:	andeq	r8, r2, r8, lsl #3
   11d30:	muleq	r2, ip, r1
   11d34:	andeq	r8, r2, r0, lsr #3
   11d38:			; <UNDEFINED> instruction: 0x000281b0
   11d3c:	andeq	r8, r2, r4, asr r1
   11d40:	andeq	r8, r2, r0, lsl #3
   11d44:	andeq	r8, r2, ip, lsl #3
   11d48:	andeq	r8, r2, ip, ror r1
   11d4c:	andeq	r6, r1, ip, asr lr
   11d50:	strdeq	r8, [r2], -r0
   11d54:	andeq	r8, r2, r4, lsl #2
   11d58:	andeq	r6, r1, r4, ror #28
   11d5c:	andeq	r8, r2, r4, lsr #3
   11d60:	andeq	r2, r1, r4, ror #16
   11d64:	andeq	r2, r1, ip, ror r0
   11d68:	ldrdeq	r2, [r1], -ip
   11d6c:	andeq	r2, r1, r8, ror r1
   11d70:	andeq	r2, r1, ip, ror #13
   11d74:	strdeq	r2, [r1], -r4
   11d78:	strdeq	r8, [r2], -r4
   11d7c:	andeq	r8, r2, r4, lsl #3
   11d80:	andeq	r5, r0, r3, lsl r4
   11d84:			; <UNDEFINED> instruction: 0x000129b8
   11d88:	andeq	r2, r1, ip, lsl #18
   11d8c:	andeq	r2, r1, r0, ror #18
   11d90:			; <UNDEFINED> instruction: 0x000128b8
   11d94:	andeq	r2, r1, r8, asr r8
   11d98:	andeq	r2, r1, r0, ror r9
   11d9c:	andeq	r2, r1, r8, asr #17
   11da0:	andeq	r2, r1, ip, lsl r9
   11da4:	andeq	r2, r1, r4, ror r8
   11da8:	push	{r0, r1, r4, r5, r6, lr}
   11dac:	add	r3, sp, #8
   11db0:	str	r0, [r3, #-4]!
   11db4:	mov	r0, r3
   11db8:	bl	10bdc <ctime@plt>
   11dbc:	mov	r4, r0
   11dc0:	add	r5, r0, #3
   11dc4:	add	r6, r0, #10
   11dc8:	ldrb	r0, [r5, #1]!
   11dcc:	bl	10ce4 <putchar@plt>
   11dd0:	cmp	r5, r6
   11dd4:	bne	11dc8 <__assert_fail@plt+0xff4>
   11dd8:	ldr	r3, [pc, #128]	; 11e60 <__assert_fail@plt+0x108c>
   11ddc:	ldr	r0, [r3]
   11de0:	cmp	r0, #0
   11de4:	beq	11e0c <__assert_fail@plt+0x1038>
   11de8:	add	r4, r4, #23
   11dec:	ldrb	r0, [r5, #1]!
   11df0:	bl	10ce4 <putchar@plt>
   11df4:	cmp	r4, r5
   11df8:	bne	11dec <__assert_fail@plt+0x1018>
   11dfc:	mov	r0, #32
   11e00:	bl	10ce4 <putchar@plt>
   11e04:	add	sp, sp, #8
   11e08:	pop	{r4, r5, r6, pc}
   11e0c:	ldr	r3, [sp, #4]
   11e10:	ldr	r6, [pc, #76]	; 11e64 <__assert_fail@plt+0x1090>
   11e14:	add	r6, r3, r6
   11e18:	bl	10bd0 <time@plt>
   11e1c:	cmp	r6, r0
   11e20:	blt	11e3c <__assert_fail@plt+0x1068>
   11e24:	add	r4, r4, #15
   11e28:	ldrb	r0, [r5, #1]!
   11e2c:	bl	10ce4 <putchar@plt>
   11e30:	cmp	r5, r4
   11e34:	bne	11e28 <__assert_fail@plt+0x1054>
   11e38:	b	11dfc <__assert_fail@plt+0x1028>
   11e3c:	mov	r0, #32
   11e40:	bl	10ce4 <putchar@plt>
   11e44:	add	r5, r4, #19
   11e48:	add	r4, r4, #23
   11e4c:	ldrb	r0, [r5, #1]!
   11e50:	bl	10ce4 <putchar@plt>
   11e54:	cmp	r5, r4
   11e58:	bne	11e4c <__assert_fail@plt+0x1078>
   11e5c:	b	11dfc <__assert_fail@plt+0x1028>
   11e60:	muleq	r2, r0, r1
   11e64:	strdeq	pc, [pc], #15	; <UNPREDICTABLE>
   11e68:	ldr	r3, [r0, #48]	; 0x30
   11e6c:	push	{r4, lr}
   11e70:	cmp	r3, #0
   11e74:	sub	sp, sp, #8192	; 0x2000
   11e78:	sub	sp, sp, #8
   11e7c:	add	r3, r0, #168	; 0xa8
   11e80:	bne	11ee8 <__assert_fail@plt+0x1114>
   11e84:	ldr	r2, [pc, #152]	; 11f24 <__assert_fail@plt+0x1150>
   11e88:	mov	r1, #4096	; 0x1000
   11e8c:	add	r0, sp, #8
   11e90:	bl	10ccc <snprintf@plt>
   11e94:	add	r4, sp, #4096	; 0x1000
   11e98:	add	r4, r4, #8
   11e9c:	ldr	r2, [pc, #132]	; 11f28 <__assert_fail@plt+0x1154>
   11ea0:	mov	r1, r4
   11ea4:	add	r0, sp, #8
   11ea8:	bl	10c18 <readlink@plt>
   11eac:	cmn	r0, #1
   11eb0:	bne	11f08 <__assert_fail@plt+0x1134>
   11eb4:	ldr	r3, [pc, #112]	; 11f2c <__assert_fail@plt+0x1158>
   11eb8:	ldr	r4, [r3]
   11ebc:	bl	10cc0 <__errno_location@plt>
   11ec0:	ldr	r0, [r0]
   11ec4:	bl	10c6c <strerror@plt>
   11ec8:	add	r2, sp, #8
   11ecc:	ldr	r1, [pc, #92]	; 11f30 <__assert_fail@plt+0x115c>
   11ed0:	mov	r3, r0
   11ed4:	mov	r0, r4
   11ed8:	bl	10cb4 <fprintf@plt>
   11edc:	add	sp, sp, #8192	; 0x2000
   11ee0:	add	sp, sp, #8
   11ee4:	pop	{r4, pc}
   11ee8:	ldr	r2, [r0, #4]
   11eec:	mov	r1, #4096	; 0x1000
   11ef0:	str	r3, [sp]
   11ef4:	add	r0, sp, #8
   11ef8:	ldr	r3, [r2, #24]
   11efc:	ldr	r2, [pc, #48]	; 11f34 <__assert_fail@plt+0x1160>
   11f00:	bl	10ccc <snprintf@plt>
   11f04:	b	11e94 <__assert_fail@plt+0x10c0>
   11f08:	mov	r3, #0
   11f0c:	strb	r3, [r4, r0]
   11f10:	ldr	r0, [pc, #32]	; 11f38 <__assert_fail@plt+0x1164>
   11f14:	bl	10b94 <printf@plt>
   11f18:	mov	r0, r4
   11f1c:	bl	127d4 <__assert_fail@plt+0x1a00>
   11f20:	b	11edc <__assert_fail@plt+0x1108>
   11f24:	andeq	r6, r1, r8, lsl lr
   11f28:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11f2c:	andeq	r8, r2, r0, lsl r1
   11f30:	andeq	r6, r1, r6, lsl #29
   11f34:	andeq	r6, r1, r0, lsl #29
   11f38:	muleq	r1, r3, lr
   11f3c:	and	r3, r0, #61440	; 0xf000
   11f40:	cmp	r3, #16384	; 0x4000
   11f44:	push	{r4, lr}
   11f48:	beq	11f8c <__assert_fail@plt+0x11b8>
   11f4c:	bhi	11f6c <__assert_fail@plt+0x1198>
   11f50:	cmp	r3, #4096	; 0x1000
   11f54:	moveq	r0, #124	; 0x7c
   11f58:	beq	11f80 <__assert_fail@plt+0x11ac>
   11f5c:	ands	r0, r0, #73	; 0x49
   11f60:	popeq	{r4, pc}
   11f64:	mov	r0, #42	; 0x2a
   11f68:	b	11f80 <__assert_fail@plt+0x11ac>
   11f6c:	cmp	r3, #40960	; 0xa000
   11f70:	beq	11f94 <__assert_fail@plt+0x11c0>
   11f74:	cmp	r3, #49152	; 0xc000
   11f78:	moveq	r0, #61	; 0x3d
   11f7c:	bne	11f5c <__assert_fail@plt+0x1188>
   11f80:	bl	10ce4 <putchar@plt>
   11f84:	mov	r0, #1
   11f88:	pop	{r4, pc}
   11f8c:	mov	r0, #47	; 0x2f
   11f90:	b	11f80 <__assert_fail@plt+0x11ac>
   11f94:	mov	r0, #64	; 0x40
   11f98:	b	11f80 <__assert_fail@plt+0x11ac>
   11f9c:	ldr	r3, [pc, #188]	; 12060 <__assert_fail@plt+0x128c>
   11fa0:	push	{r4, r5, r6, lr}
   11fa4:	mov	r5, r0
   11fa8:	ldr	r4, [r3]
   11fac:	mov	r6, r2
   11fb0:	cmp	r4, #0
   11fb4:	beq	11fc8 <__assert_fail@plt+0x11f4>
   11fb8:	ldr	r2, [r0, #160]	; 0xa0
   11fbc:	ldr	r0, [pc, #160]	; 12064 <__assert_fail@plt+0x1290>
   11fc0:	bl	10b94 <printf@plt>
   11fc4:	mov	r4, r0
   11fc8:	ldr	r3, [pc, #152]	; 12068 <__assert_fail@plt+0x1294>
   11fcc:	ldr	r3, [r3]
   11fd0:	cmp	r3, #0
   11fd4:	beq	12010 <__assert_fail@plt+0x123c>
   11fd8:	ldr	r3, [pc, #140]	; 1206c <__assert_fail@plt+0x1298>
   11fdc:	ldrd	r0, [r5, #128]	; 0x80
   11fe0:	ldr	r2, [r3]
   11fe4:	sub	ip, r2, #1
   11fe8:	adds	r0, r0, ip
   11fec:	asr	r3, r2, #31
   11ff0:	adc	r1, r1, ip, asr #31
   11ff4:	bl	16b00 <__assert_fail@plt+0x5d2c>
   11ff8:	mov	r2, r0
   11ffc:	mov	r3, r1
   12000:	ldr	r0, [pc, #104]	; 12070 <__assert_fail@plt+0x129c>
   12004:	mov	r1, r6
   12008:	bl	10b94 <printf@plt>
   1200c:	add	r4, r4, r0
   12010:	add	r0, r5, #168	; 0xa8
   12014:	bl	127d4 <__assert_fail@plt+0x1a00>
   12018:	ldr	r3, [pc, #84]	; 12074 <__assert_fail@plt+0x12a0>
   1201c:	ldr	r3, [r3]
   12020:	cmp	r3, #0
   12024:	add	r4, r4, r0
   12028:	bne	1204c <__assert_fail@plt+0x1278>
   1202c:	ldr	r3, [pc, #68]	; 12078 <__assert_fail@plt+0x12a4>
   12030:	ldr	r3, [r3]
   12034:	cmp	r3, #0
   12038:	beq	12058 <__assert_fail@plt+0x1284>
   1203c:	ldr	r3, [r5, #80]	; 0x50
   12040:	and	r3, r3, #61440	; 0xf000
   12044:	cmp	r3, #16384	; 0x4000
   12048:	bne	12058 <__assert_fail@plt+0x1284>
   1204c:	ldr	r0, [r5, #80]	; 0x50
   12050:	bl	11f3c <__assert_fail@plt+0x1168>
   12054:	add	r4, r4, r0
   12058:	mov	r0, r4
   1205c:	pop	{r4, r5, r6, pc}
   12060:	andeq	r8, r2, ip, ror #2
   12064:	muleq	r1, r8, lr
   12068:	andeq	r8, r2, r4, asr r1
   1206c:	andeq	r8, r2, r4, lsr #3
   12070:	ldrdeq	r6, [r1], -r0
   12074:	andeq	r8, r2, ip, ror r1
   12078:	andeq	r8, r2, ip, lsl #3
   1207c:	push	{r4, r5, r6, lr}
   12080:	mov	r5, r0
   12084:	ldr	r4, [r0]
   12088:	mov	r6, #10
   1208c:	cmp	r4, #0
   12090:	bne	12098 <__assert_fail@plt+0x12c4>
   12094:	pop	{r4, r5, r6, pc}
   12098:	ldr	r3, [r4, #16]
   1209c:	cmp	r3, #1
   120a0:	beq	120bc <__assert_fail@plt+0x12e8>
   120a4:	ldr	r2, [r5, #20]
   120a8:	ldr	r1, [r5, #32]
   120ac:	mov	r0, r4
   120b0:	bl	11f9c <__assert_fail@plt+0x11c8>
   120b4:	mov	r0, r6
   120b8:	bl	10ce4 <putchar@plt>
   120bc:	ldr	r4, [r4, #8]
   120c0:	b	1208c <__assert_fail@plt+0x12b8>
   120c4:	ldr	r3, [pc, #152]	; 12164 <__assert_fail@plt+0x1390>
   120c8:	push	{r4, r5, r6, lr}
   120cc:	mov	r5, r1
   120d0:	ldr	r3, [r3]
   120d4:	ldr	r1, [r0, #16]
   120d8:	cmp	r3, #0
   120dc:	ldrne	r3, [r0, #32]
   120e0:	addne	r3, r3, #1
   120e4:	addne	r1, r1, r3
   120e8:	ldr	r3, [pc, #120]	; 12168 <__assert_fail@plt+0x1394>
   120ec:	ldr	r3, [r3]
   120f0:	cmp	r3, #0
   120f4:	ldrne	r3, [r0, #20]
   120f8:	addne	r3, r3, #1
   120fc:	addne	r1, r1, r3
   12100:	ldr	r3, [pc, #100]	; 1216c <__assert_fail@plt+0x1398>
   12104:	ldr	r3, [r3]
   12108:	cmp	r3, #0
   1210c:	bne	12120 <__assert_fail@plt+0x134c>
   12110:	ldr	r3, [pc, #88]	; 12170 <__assert_fail@plt+0x139c>
   12114:	ldr	r3, [r3]
   12118:	cmp	r3, #0
   1211c:	beq	12124 <__assert_fail@plt+0x1350>
   12120:	add	r1, r1, #1
   12124:	ldr	r3, [pc, #72]	; 12174 <__assert_fail@plt+0x13a0>
   12128:	add	r1, r1, #1
   1212c:	ldr	r4, [r3]
   12130:	add	r4, r4, #1
   12134:	cmp	r4, r1, lsl #1
   12138:	bge	12148 <__assert_fail@plt+0x1374>
   1213c:	bl	1207c <__assert_fail@plt+0x12a8>
   12140:	mov	r0, #0
   12144:	pop	{r4, r5, r6, pc}
   12148:	mov	r0, r4
   1214c:	bl	168c0 <__assert_fail@plt+0x5aec>
   12150:	mov	r1, r0
   12154:	str	r0, [r5]
   12158:	mov	r0, r4
   1215c:	bl	168c0 <__assert_fail@plt+0x5aec>
   12160:	pop	{r4, r5, r6, pc}
   12164:	andeq	r8, r2, ip, ror #2
   12168:	andeq	r8, r2, r4, asr r1
   1216c:	andeq	r8, r2, ip, ror r1
   12170:	andeq	r8, r2, ip, lsl #3
   12174:	strdeq	r8, [r2], -r0
   12178:	ldr	r3, [r0]
   1217c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12180:	mov	r5, r0
   12184:	ldr	r3, [r3, #48]	; 0x30
   12188:	sub	sp, sp, #44	; 0x2c
   1218c:	cmp	r3, #0
   12190:	beq	121d8 <__assert_fail@plt+0x1404>
   12194:	ldr	r3, [pc, #532]	; 123b0 <__assert_fail@plt+0x15dc>
   12198:	ldr	r3, [r3]
   1219c:	cmp	r3, #0
   121a0:	bne	121b4 <__assert_fail@plt+0x13e0>
   121a4:	ldr	r3, [pc, #520]	; 123b4 <__assert_fail@plt+0x15e0>
   121a8:	ldr	r3, [r3]
   121ac:	cmp	r3, #0
   121b0:	beq	121d8 <__assert_fail@plt+0x1404>
   121b4:	ldr	r3, [pc, #508]	; 123b8 <__assert_fail@plt+0x15e4>
   121b8:	ldr	r1, [r3]
   121bc:	ldr	r3, [r5, #4]
   121c0:	sub	r0, r1, #1
   121c4:	add	r0, r0, r3
   121c8:	bl	166b4 <__assert_fail@plt+0x58e0>
   121cc:	mov	r1, r0
   121d0:	ldr	r0, [pc, #484]	; 123bc <__assert_fail@plt+0x15e8>
   121d4:	bl	10b94 <printf@plt>
   121d8:	ldr	r4, [r5]
   121dc:	ldr	r6, [pc, #476]	; 123c0 <__assert_fail@plt+0x15ec>
   121e0:	ldr	r7, [pc, #460]	; 123b4 <__assert_fail@plt+0x15e0>
   121e4:	cmp	r4, #0
   121e8:	bne	121f4 <__assert_fail@plt+0x1420>
   121ec:	add	sp, sp, #44	; 0x2c
   121f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   121f4:	ldr	r3, [r4, #16]
   121f8:	cmp	r3, #1
   121fc:	beq	1236c <__assert_fail@plt+0x1598>
   12200:	ldr	r3, [r6]
   12204:	cmp	r3, #0
   12208:	beq	1221c <__assert_fail@plt+0x1448>
   1220c:	ldr	r2, [r4, #160]	; 0xa0
   12210:	ldr	r1, [r5, #32]
   12214:	ldr	r0, [pc, #424]	; 123c4 <__assert_fail@plt+0x15f0>
   12218:	bl	10b94 <printf@plt>
   1221c:	ldr	r3, [r7]
   12220:	cmp	r3, #0
   12224:	beq	1225c <__assert_fail@plt+0x1488>
   12228:	ldr	r3, [pc, #392]	; 123b8 <__assert_fail@plt+0x15e4>
   1222c:	ldrd	r8, [r4, #128]	; 0x80
   12230:	ldr	r2, [r3]
   12234:	sub	ip, r2, #1
   12238:	adds	r0, r8, ip
   1223c:	asr	r3, r2, #31
   12240:	adc	r1, r9, ip, asr #31
   12244:	bl	16b00 <__assert_fail@plt+0x5d2c>
   12248:	mov	r2, r0
   1224c:	mov	r3, r1
   12250:	ldr	r0, [pc, #368]	; 123c8 <__assert_fail@plt+0x15f4>
   12254:	ldr	r1, [r5, #20]
   12258:	bl	10b94 <printf@plt>
   1225c:	add	r1, sp, #20
   12260:	ldr	r0, [r4, #80]	; 0x50
   12264:	bl	129c8 <__assert_fail@plt+0x1bf4>
   12268:	ldr	r8, [r4, #20]
   1226c:	ldr	r2, [r5, #36]	; 0x24
   12270:	add	r1, sp, #20
   12274:	ldr	r3, [r8, #4]
   12278:	ldr	r0, [pc, #332]	; 123cc <__assert_fail@plt+0x15f8>
   1227c:	str	r3, [sp, #12]
   12280:	ldr	r3, [r5, #28]
   12284:	str	r3, [sp, #8]
   12288:	ldr	r3, [r8]
   1228c:	str	r3, [sp, #4]
   12290:	ldr	r3, [r5, #44]	; 0x2c
   12294:	str	r3, [sp]
   12298:	ldr	r3, [r4, #84]	; 0x54
   1229c:	bl	10b94 <printf@plt>
   122a0:	ldr	r3, [pc, #296]	; 123d0 <__assert_fail@plt+0x15fc>
   122a4:	ldr	r3, [r3]
   122a8:	cmp	r3, #0
   122ac:	beq	122c0 <__assert_fail@plt+0x14ec>
   122b0:	ldr	r2, [r8, #8]
   122b4:	ldr	r1, [r5, #24]
   122b8:	ldr	r0, [pc, #276]	; 123d4 <__assert_fail@plt+0x1600>
   122bc:	bl	10b94 <printf@plt>
   122c0:	ldr	r3, [r4, #80]	; 0x50
   122c4:	and	r3, r3, #45056	; 0xb000
   122c8:	cmp	r3, #8192	; 0x2000
   122cc:	bne	12374 <__assert_fail@plt+0x15a0>
   122d0:	ldrb	r2, [r4, #96]	; 0x60
   122d4:	ldrb	r1, [r4, #97]	; 0x61
   122d8:	ldr	r0, [pc, #248]	; 123d8 <__assert_fail@plt+0x1604>
   122dc:	bl	10b94 <printf@plt>
   122e0:	ldr	r3, [pc, #244]	; 123dc <__assert_fail@plt+0x1608>
   122e4:	ldr	r3, [r3]
   122e8:	cmp	r3, #0
   122ec:	ldrne	r0, [r4, #136]	; 0x88
   122f0:	bne	12308 <__assert_fail@plt+0x1534>
   122f4:	ldr	r3, [pc, #228]	; 123e0 <__assert_fail@plt+0x160c>
   122f8:	ldr	r3, [r3]
   122fc:	cmp	r3, #0
   12300:	ldrne	r0, [r4, #152]	; 0x98
   12304:	ldreq	r0, [r4, #144]	; 0x90
   12308:	bl	11da8 <__assert_fail@plt+0xfd4>
   1230c:	add	r0, r4, #168	; 0xa8
   12310:	bl	127d4 <__assert_fail@plt+0x1a00>
   12314:	ldr	r3, [pc, #200]	; 123e4 <__assert_fail@plt+0x1610>
   12318:	ldr	r3, [r3]
   1231c:	cmp	r3, #0
   12320:	bne	12344 <__assert_fail@plt+0x1570>
   12324:	ldr	r3, [pc, #188]	; 123e8 <__assert_fail@plt+0x1614>
   12328:	ldr	r3, [r3]
   1232c:	cmp	r3, #0
   12330:	beq	1234c <__assert_fail@plt+0x1578>
   12334:	ldr	r3, [r4, #80]	; 0x50
   12338:	and	r3, r3, #61440	; 0xf000
   1233c:	cmp	r3, #16384	; 0x4000
   12340:	bne	1234c <__assert_fail@plt+0x1578>
   12344:	ldr	r0, [r4, #80]	; 0x50
   12348:	bl	11f3c <__assert_fail@plt+0x1168>
   1234c:	ldr	r3, [r4, #80]	; 0x50
   12350:	and	r3, r3, #61440	; 0xf000
   12354:	cmp	r3, #40960	; 0xa000
   12358:	bne	12364 <__assert_fail@plt+0x1590>
   1235c:	mov	r0, r4
   12360:	bl	11e68 <__assert_fail@plt+0x1094>
   12364:	mov	r0, #10
   12368:	bl	10ce4 <putchar@plt>
   1236c:	ldr	r4, [r4, #8]
   12370:	b	121e4 <__assert_fail@plt+0x1410>
   12374:	ldr	r3, [r5, #8]
   12378:	cmp	r3, #0
   1237c:	ldrd	r2, [r4, #112]	; 0x70
   12380:	beq	123a0 <__assert_fail@plt+0x15cc>
   12384:	strd	r2, [sp]
   12388:	ldr	r3, [r5, #40]	; 0x28
   1238c:	ldr	r2, [pc, #88]	; 123ec <__assert_fail@plt+0x1618>
   12390:	rsb	r1, r3, #8
   12394:	ldr	r0, [pc, #84]	; 123f0 <__assert_fail@plt+0x161c>
   12398:	bl	10b94 <printf@plt>
   1239c:	b	122e0 <__assert_fail@plt+0x150c>
   123a0:	ldr	r1, [r5, #40]	; 0x28
   123a4:	ldr	r0, [pc, #28]	; 123c8 <__assert_fail@plt+0x15f4>
   123a8:	bl	10b94 <printf@plt>
   123ac:	b	122e0 <__assert_fail@plt+0x150c>
   123b0:	andeq	r8, r2, r8, lsl #3
   123b4:	andeq	r8, r2, r4, asr r1
   123b8:	andeq	r8, r2, r4, lsr #3
   123bc:	muleq	r1, lr, lr
   123c0:	andeq	r8, r2, ip, ror #2
   123c4:	muleq	r1, r8, lr
   123c8:	ldrdeq	r6, [r1], -r0
   123cc:	andeq	r6, r1, r9, lsr #29
   123d0:	andeq	r8, r2, r4, ror #2
   123d4:			; <UNDEFINED> instruction: 0x00016ebd
   123d8:	andeq	r6, r1, r3, asr #29
   123dc:	andeq	r8, r2, r4, ror r1
   123e0:	andeq	r8, r2, r0, lsr #3
   123e4:	andeq	r8, r2, ip, ror r1
   123e8:	andeq	r8, r2, ip, lsl #3
   123ec:	andeq	r6, r1, r5, ror #29
   123f0:	andeq	r6, r1, sp, asr #29
   123f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123f8:	sub	sp, sp, #28
   123fc:	add	r1, sp, #20
   12400:	mov	r4, r0
   12404:	bl	120c4 <__assert_fail@plt+0x12f0>
   12408:	subs	r3, r0, #0
   1240c:	str	r3, [sp, #4]
   12410:	beq	12478 <__assert_fail@plt+0x16a4>
   12414:	ldr	r5, [pc, #416]	; 125bc <__assert_fail@plt+0x17e8>
   12418:	ldr	r1, [r4, #12]
   1241c:	ldr	r8, [pc, #412]	; 125c0 <__assert_fail@plt+0x17ec>
   12420:	ldr	r3, [r5]
   12424:	cmp	r1, r3
   12428:	ble	12480 <__assert_fail@plt+0x16ac>
   1242c:	lsl	r1, r1, #2
   12430:	ldr	r0, [r8]
   12434:	bl	16388 <__assert_fail@plt+0x55b4>
   12438:	cmp	r0, #0
   1243c:	strne	r0, [r8]
   12440:	ldrne	r3, [r4, #12]
   12444:	strne	r3, [r5]
   12448:	bne	12480 <__assert_fail@plt+0x16ac>
   1244c:	ldr	r3, [pc, #368]	; 125c4 <__assert_fail@plt+0x17f0>
   12450:	ldr	r5, [r3]
   12454:	bl	10cc0 <__errno_location@plt>
   12458:	ldr	r0, [r0]
   1245c:	bl	10c6c <strerror@plt>
   12460:	ldr	r1, [pc, #352]	; 125c8 <__assert_fail@plt+0x17f4>
   12464:	mov	r2, r0
   12468:	mov	r0, r5
   1246c:	bl	10cb4 <fprintf@plt>
   12470:	mov	r0, r4
   12474:	bl	1207c <__assert_fail@plt+0x12a8>
   12478:	add	sp, sp, #28
   1247c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12480:	ldr	r3, [r4]
   12484:	ldr	r2, [r8]
   12488:	mov	r5, #0
   1248c:	cmp	r3, #0
   12490:	bne	12534 <__assert_fail@plt+0x1760>
   12494:	ldr	r6, [sp, #20]
   12498:	mov	r0, r5
   1249c:	mov	r1, r6
   124a0:	bl	168c0 <__assert_fail@plt+0x5aec>
   124a4:	mov	r1, r6
   124a8:	mov	r7, r0
   124ac:	mov	r0, r5
   124b0:	bl	16ae0 <__assert_fail@plt+0x5d0c>
   124b4:	ldr	r3, [r4]
   124b8:	ldr	r3, [r3, #48]	; 0x30
   124bc:	cmp	r1, #0
   124c0:	addne	r7, r7, #1
   124c4:	cmp	r3, #0
   124c8:	beq	12510 <__assert_fail@plt+0x173c>
   124cc:	ldr	r3, [pc, #248]	; 125cc <__assert_fail@plt+0x17f8>
   124d0:	ldr	r3, [r3]
   124d4:	cmp	r3, #0
   124d8:	bne	124ec <__assert_fail@plt+0x1718>
   124dc:	ldr	r3, [pc, #236]	; 125d0 <__assert_fail@plt+0x17fc>
   124e0:	ldr	r3, [r3]
   124e4:	cmp	r3, #0
   124e8:	beq	12510 <__assert_fail@plt+0x173c>
   124ec:	ldr	r3, [pc, #224]	; 125d4 <__assert_fail@plt+0x1800>
   124f0:	ldr	r1, [r3]
   124f4:	ldr	r3, [r4, #4]
   124f8:	sub	r0, r1, #1
   124fc:	add	r0, r0, r3
   12500:	bl	166b4 <__assert_fail@plt+0x58e0>
   12504:	mov	r1, r0
   12508:	ldr	r0, [pc, #200]	; 125d8 <__assert_fail@plt+0x1804>
   1250c:	bl	10b94 <printf@plt>
   12510:	mov	r6, #0
   12514:	lsl	r3, r7, #2
   12518:	str	r3, [sp, #8]
   1251c:	cmp	r7, r6
   12520:	ble	12478 <__assert_fail@plt+0x16a4>
   12524:	lsl	fp, r6, #2
   12528:	mov	sl, r6
   1252c:	mov	r9, #0
   12530:	b	12554 <__assert_fail@plt+0x1780>
   12534:	ldr	r1, [r3, #16]
   12538:	cmp	r1, #1
   1253c:	strne	r3, [r2, r5, lsl #2]
   12540:	addne	r5, r5, #1
   12544:	ldr	r3, [r3, #8]
   12548:	b	1248c <__assert_fail@plt+0x16b8>
   1254c:	ldr	r3, [sp, #8]
   12550:	add	fp, fp, r3
   12554:	ldr	r0, [r8]
   12558:	ldr	r2, [r4, #20]
   1255c:	ldr	r1, [r4, #32]
   12560:	ldr	r0, [r0, fp]
   12564:	add	sl, sl, r7
   12568:	bl	11f9c <__assert_fail@plt+0x11c8>
   1256c:	cmp	r5, sl
   12570:	ble	125ac <__assert_fail@plt+0x17d8>
   12574:	ldr	r2, [sp, #20]
   12578:	add	r9, r9, #1
   1257c:	cmp	r9, r2
   12580:	beq	125ac <__assert_fail@plt+0x17d8>
   12584:	mov	r2, r0
   12588:	ldr	r3, [sp, #4]
   1258c:	cmp	r3, r2
   12590:	ble	1254c <__assert_fail@plt+0x1778>
   12594:	mov	r0, #32
   12598:	str	r2, [sp, #12]
   1259c:	bl	10ce4 <putchar@plt>
   125a0:	ldr	r2, [sp, #12]
   125a4:	add	r2, r2, #1
   125a8:	b	12588 <__assert_fail@plt+0x17b4>
   125ac:	mov	r0, #10
   125b0:	bl	10ce4 <putchar@plt>
   125b4:	add	r6, r6, #1
   125b8:	b	1251c <__assert_fail@plt+0x1748>
   125bc:	andeq	r8, r2, r0, lsl #2
   125c0:	andeq	r8, r2, r8, lsr #2
   125c4:	andeq	r8, r2, r0, lsl r1
   125c8:	ldrdeq	r6, [r1], -r7
   125cc:	andeq	r8, r2, r8, lsl #3
   125d0:	andeq	r8, r2, r4, asr r1
   125d4:	andeq	r8, r2, r4, lsr #3
   125d8:	muleq	r1, lr, lr
   125dc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   125e0:	add	r1, sp, #4
   125e4:	mov	r6, r0
   125e8:	bl	120c4 <__assert_fail@plt+0x12f0>
   125ec:	subs	r8, r0, #0
   125f0:	beq	1266c <__assert_fail@plt+0x1898>
   125f4:	ldr	r3, [r6]
   125f8:	ldr	r3, [r3, #48]	; 0x30
   125fc:	cmp	r3, #0
   12600:	beq	1264c <__assert_fail@plt+0x1878>
   12604:	ldr	r3, [pc, #208]	; 126dc <__assert_fail@plt+0x1908>
   12608:	ldr	r3, [r3]
   1260c:	cmp	r3, #0
   12610:	bne	12624 <__assert_fail@plt+0x1850>
   12614:	ldr	r3, [pc, #196]	; 126e0 <__assert_fail@plt+0x190c>
   12618:	ldr	r3, [r3]
   1261c:	cmp	r3, #0
   12620:	beq	1264c <__assert_fail@plt+0x1878>
   12624:	ldr	r3, [pc, #184]	; 126e4 <__assert_fail@plt+0x1910>
   12628:	ldr	r1, [r3]
   1262c:	ldr	r3, [r6, #4]
   12630:	sub	r0, r1, #1
   12634:	add	r0, r0, r3
   12638:	bl	166b4 <__assert_fail@plt+0x58e0>
   1263c:	mov	r3, #0
   12640:	mov	r2, r0
   12644:	ldr	r0, [pc, #156]	; 126e8 <__assert_fail@plt+0x1914>
   12648:	bl	10b94 <printf@plt>
   1264c:	ldr	r4, [r6]
   12650:	mov	r5, #0
   12654:	mov	r9, #32
   12658:	mov	sl, #10
   1265c:	cmp	r4, #0
   12660:	bne	12674 <__assert_fail@plt+0x18a0>
   12664:	mov	r0, #10
   12668:	bl	10ce4 <putchar@plt>
   1266c:	add	sp, sp, #8
   12670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12674:	ldr	r3, [r4, #16]
   12678:	cmp	r3, #1
   1267c:	beq	126bc <__assert_fail@plt+0x18e8>
   12680:	ldr	r3, [sp, #4]
   12684:	cmp	r5, r3
   12688:	blt	12698 <__assert_fail@plt+0x18c4>
   1268c:	mov	r0, sl
   12690:	bl	10ce4 <putchar@plt>
   12694:	mov	r5, #0
   12698:	ldr	r2, [r6, #20]
   1269c:	ldr	r1, [r6, #32]
   126a0:	mov	r0, r4
   126a4:	bl	11f9c <__assert_fail@plt+0x11c8>
   126a8:	ldr	r3, [sp, #4]
   126ac:	add	r5, r5, #1
   126b0:	cmp	r5, r3
   126b4:	movlt	r7, r0
   126b8:	blt	126d0 <__assert_fail@plt+0x18fc>
   126bc:	ldr	r4, [r4, #8]
   126c0:	b	1265c <__assert_fail@plt+0x1888>
   126c4:	mov	r0, r9
   126c8:	bl	10ce4 <putchar@plt>
   126cc:	add	r7, r7, #1
   126d0:	cmp	r8, r7
   126d4:	bgt	126c4 <__assert_fail@plt+0x18f0>
   126d8:	b	126bc <__assert_fail@plt+0x18e8>
   126dc:	andeq	r8, r2, r8, lsl #3
   126e0:	andeq	r8, r2, r4, asr r1
   126e4:	andeq	r8, r2, r4, lsr #3
   126e8:	andeq	r6, r1, r6, ror #29
   126ec:	ldr	r3, [pc, #208]	; 127c4 <__assert_fail@plt+0x19f0>
   126f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126f4:	mov	r7, r0
   126f8:	ldr	r4, [r3]
   126fc:	ldr	r3, [pc, #196]	; 127c8 <__assert_fail@plt+0x19f4>
   12700:	cmp	r4, #0
   12704:	ldr	r6, [r0]
   12708:	ldr	r3, [r3]
   1270c:	ldrne	r4, [r0, #32]
   12710:	ldr	r9, [pc, #180]	; 127cc <__assert_fail@plt+0x19f8>
   12714:	addne	r4, r4, #1
   12718:	cmp	r3, #0
   1271c:	mov	r5, #0
   12720:	ldrne	r3, [r0, #20]
   12724:	mov	r8, #44	; 0x2c
   12728:	addne	r3, r3, #1
   1272c:	addne	r4, r4, r3
   12730:	ldr	r3, [pc, #152]	; 127d0 <__assert_fail@plt+0x19fc>
   12734:	mov	sl, #32
   12738:	ldr	r3, [r3]
   1273c:	cmp	r3, #0
   12740:	addne	r4, r4, #1
   12744:	cmp	r6, #0
   12748:	bne	12758 <__assert_fail@plt+0x1984>
   1274c:	mov	r0, #10
   12750:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12754:	b	10ce4 <putchar@plt>
   12758:	ldr	r3, [r6, #16]
   1275c:	cmp	r3, #1
   12760:	beq	127b0 <__assert_fail@plt+0x19dc>
   12764:	cmp	r5, #0
   12768:	ble	1279c <__assert_fail@plt+0x19c8>
   1276c:	mov	r0, r8
   12770:	bl	10ce4 <putchar@plt>
   12774:	add	r5, r5, #2
   12778:	ldr	r2, [r6, #52]	; 0x34
   1277c:	add	r3, r4, r5
   12780:	add	r3, r3, r2
   12784:	ldr	r2, [r9]
   12788:	cmp	r3, r2
   1278c:	bcc	127b8 <__assert_fail@plt+0x19e4>
   12790:	mov	r0, #10
   12794:	bl	10ce4 <putchar@plt>
   12798:	mov	r5, #0
   1279c:	ldr	r2, [r7, #20]
   127a0:	ldr	r1, [r7, #32]
   127a4:	mov	r0, r6
   127a8:	bl	11f9c <__assert_fail@plt+0x11c8>
   127ac:	add	r5, r5, r0
   127b0:	ldr	r6, [r6, #8]
   127b4:	b	12744 <__assert_fail@plt+0x1970>
   127b8:	mov	r0, sl
   127bc:	bl	10ce4 <putchar@plt>
   127c0:	b	1279c <__assert_fail@plt+0x19c8>
   127c4:	andeq	r8, r2, ip, ror #2
   127c8:	andeq	r8, r2, r4, asr r1
   127cc:	strdeq	r8, [r2], -r0
   127d0:	andeq	r8, r2, ip, ror r1
   127d4:	push	{r4, r5, r6, r7, r8, lr}
   127d8:	mov	r6, r0
   127dc:	ldr	r7, [pc, #76]	; 12830 <__assert_fail@plt+0x1a5c>
   127e0:	mov	r5, r0
   127e4:	mov	r8, #63	; 0x3f
   127e8:	sub	r0, r5, r6
   127ec:	ldrb	r4, [r5], #1
   127f0:	cmp	r4, #0
   127f4:	bne	127fc <__assert_fail@plt+0x1a28>
   127f8:	pop	{r4, r5, r6, r7, r8, pc}
   127fc:	bl	10c84 <__ctype_b_loc@plt>
   12800:	lsl	r3, r4, #1
   12804:	ldr	r2, [r0]
   12808:	ldrh	r3, [r2, r3]
   1280c:	tst	r3, #16384	; 0x4000
   12810:	bne	12824 <__assert_fail@plt+0x1a50>
   12814:	ldr	r3, [r7]
   12818:	cmp	r3, #0
   1281c:	movne	r0, r8
   12820:	bne	12828 <__assert_fail@plt+0x1a54>
   12824:	mov	r0, r4
   12828:	bl	10ce4 <putchar@plt>
   1282c:	b	127e8 <__assert_fail@plt+0x1a14>
   12830:			; <UNDEFINED> instruction: 0x000281b0
   12834:	ldr	r3, [pc, #20]	; 12850 <__assert_fail@plt+0x1a7c>
   12838:	push	{r4, lr}
   1283c:	ldr	r1, [r3]
   12840:	ldr	r0, [pc, #12]	; 12854 <__assert_fail@plt+0x1a80>
   12844:	bl	10d80 <fputs@plt>
   12848:	mov	r0, #1
   1284c:	pop	{r4, pc}
   12850:	andeq	r8, r2, r0, lsl r1
   12854:	strdeq	r6, [r1], -r2
   12858:	add	r1, r1, #168	; 0xa8
   1285c:	add	r0, r0, #168	; 0xa8
   12860:	b	10b7c <strcmp@plt>
   12864:	add	r3, r1, #168	; 0xa8
   12868:	add	r1, r0, #168	; 0xa8
   1286c:	mov	r0, r3
   12870:	b	10b7c <strcmp@plt>
   12874:	ldr	r2, [r1, #144]	; 0x90
   12878:	ldr	r3, [r0, #144]	; 0x90
   1287c:	cmp	r2, r3
   12880:	bgt	12898 <__assert_fail@plt+0x1ac4>
   12884:	bne	128a0 <__assert_fail@plt+0x1acc>
   12888:	ldr	r2, [r1, #148]	; 0x94
   1288c:	ldr	r3, [r0, #148]	; 0x94
   12890:	cmp	r2, r3
   12894:	ble	128a0 <__assert_fail@plt+0x1acc>
   12898:	mov	r0, #1
   1289c:	bx	lr
   128a0:	blt	128b0 <__assert_fail@plt+0x1adc>
   128a4:	add	r1, r1, #168	; 0xa8
   128a8:	add	r0, r0, #168	; 0xa8
   128ac:	b	10b7c <strcmp@plt>
   128b0:	mvn	r0, #0
   128b4:	bx	lr
   128b8:	push	{r4, lr}
   128bc:	bl	12874 <__assert_fail@plt+0x1aa0>
   128c0:	rsb	r0, r0, #0
   128c4:	pop	{r4, pc}
   128c8:	ldr	r2, [r1, #136]	; 0x88
   128cc:	ldr	r3, [r0, #136]	; 0x88
   128d0:	cmp	r2, r3
   128d4:	bgt	128ec <__assert_fail@plt+0x1b18>
   128d8:	bne	128f4 <__assert_fail@plt+0x1b20>
   128dc:	ldr	r2, [r1, #140]	; 0x8c
   128e0:	ldr	r3, [r0, #140]	; 0x8c
   128e4:	cmp	r2, r3
   128e8:	ble	128f4 <__assert_fail@plt+0x1b20>
   128ec:	mov	r0, #1
   128f0:	bx	lr
   128f4:	blt	12904 <__assert_fail@plt+0x1b30>
   128f8:	add	r1, r1, #168	; 0xa8
   128fc:	add	r0, r0, #168	; 0xa8
   12900:	b	10b7c <strcmp@plt>
   12904:	mvn	r0, #0
   12908:	bx	lr
   1290c:	push	{r4, lr}
   12910:	bl	128c8 <__assert_fail@plt+0x1af4>
   12914:	rsb	r0, r0, #0
   12918:	pop	{r4, pc}
   1291c:	ldr	r2, [r1, #152]	; 0x98
   12920:	ldr	r3, [r0, #152]	; 0x98
   12924:	cmp	r2, r3
   12928:	bgt	12940 <__assert_fail@plt+0x1b6c>
   1292c:	bne	12948 <__assert_fail@plt+0x1b74>
   12930:	ldr	r2, [r1, #156]	; 0x9c
   12934:	ldr	r3, [r0, #156]	; 0x9c
   12938:	cmp	r2, r3
   1293c:	ble	12948 <__assert_fail@plt+0x1b74>
   12940:	mov	r0, #1
   12944:	bx	lr
   12948:	blt	12958 <__assert_fail@plt+0x1b84>
   1294c:	add	r1, r1, #168	; 0xa8
   12950:	add	r0, r0, #168	; 0xa8
   12954:	b	10b7c <strcmp@plt>
   12958:	mvn	r0, #0
   1295c:	bx	lr
   12960:	push	{r4, lr}
   12964:	bl	1291c <__assert_fail@plt+0x1b48>
   12968:	rsb	r0, r0, #0
   1296c:	pop	{r4, pc}
   12970:	ldrd	r2, [r0, #112]	; 0x70
   12974:	push	{r4, r5}
   12978:	ldrd	r4, [r1, #112]	; 0x70
   1297c:	cmp	r2, r4
   12980:	sbcs	ip, r3, r5
   12984:	blt	129a4 <__assert_fail@plt+0x1bd0>
   12988:	cmp	r4, r2
   1298c:	sbcs	r3, r5, r3
   12990:	blt	129b0 <__assert_fail@plt+0x1bdc>
   12994:	add	r1, r1, #168	; 0xa8
   12998:	add	r0, r0, #168	; 0xa8
   1299c:	pop	{r4, r5}
   129a0:	b	10b7c <strcmp@plt>
   129a4:	mov	r0, #1
   129a8:	pop	{r4, r5}
   129ac:	bx	lr
   129b0:	mvn	r0, #0
   129b4:	b	129a8 <__assert_fail@plt+0x1bd4>
   129b8:	push	{r4, lr}
   129bc:	bl	12970 <__assert_fail@plt+0x1b9c>
   129c0:	rsb	r0, r0, #0
   129c4:	pop	{r4, pc}
   129c8:	and	r3, r0, #61440	; 0xf000
   129cc:	cmp	r3, #32768	; 0x8000
   129d0:	moveq	r3, #45	; 0x2d
   129d4:	beq	12a20 <__assert_fail@plt+0x1c4c>
   129d8:	cmp	r3, #16384	; 0x4000
   129dc:	moveq	r3, #100	; 0x64
   129e0:	beq	12a20 <__assert_fail@plt+0x1c4c>
   129e4:	cmp	r3, #24576	; 0x6000
   129e8:	moveq	r3, #98	; 0x62
   129ec:	beq	12a20 <__assert_fail@plt+0x1c4c>
   129f0:	cmp	r3, #8192	; 0x2000
   129f4:	moveq	r3, #99	; 0x63
   129f8:	beq	12a20 <__assert_fail@plt+0x1c4c>
   129fc:	cmp	r3, #40960	; 0xa000
   12a00:	moveq	r3, #108	; 0x6c
   12a04:	beq	12a20 <__assert_fail@plt+0x1c4c>
   12a08:	cmp	r3, #4096	; 0x1000
   12a0c:	moveq	r3, #112	; 0x70
   12a10:	beq	12a20 <__assert_fail@plt+0x1c4c>
   12a14:	cmp	r3, #49152	; 0xc000
   12a18:	moveq	r3, #115	; 0x73
   12a1c:	movne	r3, #63	; 0x3f
   12a20:	tst	r0, #256	; 0x100
   12a24:	strb	r3, [r1]
   12a28:	movne	r3, #114	; 0x72
   12a2c:	moveq	r3, #45	; 0x2d
   12a30:	tst	r0, #128	; 0x80
   12a34:	strb	r3, [r1, #1]
   12a38:	movne	r3, #119	; 0x77
   12a3c:	moveq	r3, #45	; 0x2d
   12a40:	tst	r0, #2048	; 0x800
   12a44:	strb	r3, [r1, #2]
   12a48:	and	r3, r0, #64	; 0x40
   12a4c:	beq	12aec <__assert_fail@plt+0x1d18>
   12a50:	cmp	r3, #0
   12a54:	movne	r3, #115	; 0x73
   12a58:	moveq	r3, #83	; 0x53
   12a5c:	tst	r0, #32
   12a60:	strb	r3, [r1, #3]
   12a64:	movne	r3, #114	; 0x72
   12a68:	moveq	r3, #45	; 0x2d
   12a6c:	tst	r0, #16
   12a70:	strb	r3, [r1, #4]
   12a74:	movne	r3, #119	; 0x77
   12a78:	moveq	r3, #45	; 0x2d
   12a7c:	tst	r0, #1024	; 0x400
   12a80:	strb	r3, [r1, #5]
   12a84:	and	r3, r0, #8
   12a88:	beq	12afc <__assert_fail@plt+0x1d28>
   12a8c:	cmp	r3, #0
   12a90:	movne	r3, #115	; 0x73
   12a94:	moveq	r3, #83	; 0x53
   12a98:	tst	r0, #4
   12a9c:	strb	r3, [r1, #6]
   12aa0:	movne	r3, #114	; 0x72
   12aa4:	moveq	r3, #45	; 0x2d
   12aa8:	tst	r0, #2
   12aac:	strb	r3, [r1, #7]
   12ab0:	movne	r3, #119	; 0x77
   12ab4:	moveq	r3, #45	; 0x2d
   12ab8:	tst	r0, #512	; 0x200
   12abc:	strb	r3, [r1, #8]
   12ac0:	and	r0, r0, #1
   12ac4:	beq	12b0c <__assert_fail@plt+0x1d38>
   12ac8:	cmp	r0, #0
   12acc:	movne	r0, #116	; 0x74
   12ad0:	moveq	r0, #84	; 0x54
   12ad4:	mov	r3, #32
   12ad8:	strb	r3, [r1, #10]
   12adc:	mov	r3, #0
   12ae0:	strb	r0, [r1, #9]
   12ae4:	strb	r3, [r1, #11]
   12ae8:	bx	lr
   12aec:	cmp	r3, #0
   12af0:	movne	r3, #120	; 0x78
   12af4:	moveq	r3, #45	; 0x2d
   12af8:	b	12a5c <__assert_fail@plt+0x1c88>
   12afc:	cmp	r3, #0
   12b00:	movne	r3, #120	; 0x78
   12b04:	moveq	r3, #45	; 0x2d
   12b08:	b	12a98 <__assert_fail@plt+0x1cc4>
   12b0c:	cmp	r0, #0
   12b10:	movne	r0, #120	; 0x78
   12b14:	moveq	r0, #45	; 0x2d
   12b18:	b	12ad4 <__assert_fail@plt+0x1d00>
   12b1c:	ldr	r0, [r0, #16]
   12b20:	b	129c8 <__assert_fail@plt+0x1bf4>
   12b24:	push	{r0, r1, r2, r4, r5, lr}
   12b28:	mov	r5, r0
   12b2c:	bl	10cc0 <__errno_location@plt>
   12b30:	ldr	r3, [r0]
   12b34:	mov	r4, r0
   12b38:	str	r3, [sp]
   12b3c:	str	r3, [sp, #4]
   12b40:	mov	r3, #0
   12b44:	str	r3, [r0]
   12b48:	mov	r0, r5
   12b4c:	bl	10bb8 <free@plt>
   12b50:	ldr	r3, [r4]
   12b54:	add	r2, sp, #8
   12b58:	cmp	r3, #0
   12b5c:	moveq	r3, #4
   12b60:	movne	r3, #0
   12b64:	add	r3, r2, r3
   12b68:	ldr	r3, [r3, #-8]
   12b6c:	str	r3, [r4]
   12b70:	add	sp, sp, #12
   12b74:	pop	{r4, r5, pc}
   12b78:	ldrd	r2, [r1, #8]
   12b7c:	push	{r4, r5, lr}
   12b80:	ldrd	r4, [r0, #8]
   12b84:	cmp	r5, r3
   12b88:	cmpeq	r4, r2
   12b8c:	bne	12bac <__assert_fail@plt+0x1dd8>
   12b90:	ldrd	r4, [r0]
   12b94:	ldrd	r2, [r1]
   12b98:	cmp	r5, r3
   12b9c:	cmpeq	r4, r2
   12ba0:	moveq	r0, #1
   12ba4:	movne	r0, #0
   12ba8:	pop	{r4, r5, pc}
   12bac:	mov	r0, #0
   12bb0:	pop	{r4, r5, pc}
   12bb4:	push	{r4, lr}
   12bb8:	mov	r2, r1
   12bbc:	mov	r3, #0
   12bc0:	ldrd	r0, [r0, #8]
   12bc4:	bl	16bd4 <__assert_fail@plt+0x5e00>
   12bc8:	mov	r0, r2
   12bcc:	pop	{r4, pc}
   12bd0:	push	{r4, lr}
   12bd4:	mov	r2, r1
   12bd8:	mov	r3, #0
   12bdc:	ldrd	r0, [r0]
   12be0:	bl	16bd4 <__assert_fail@plt+0x5e00>
   12be4:	mov	r0, r2
   12be8:	pop	{r4, pc}
   12bec:	ldrd	r2, [r1]
   12bf0:	push	{r4, r5, lr}
   12bf4:	ldrd	r4, [r0]
   12bf8:	cmp	r5, r3
   12bfc:	cmpeq	r4, r2
   12c00:	moveq	r0, #1
   12c04:	movne	r0, #0
   12c08:	pop	{r4, r5, pc}
   12c0c:	ldr	r3, [r0]
   12c10:	push	{r4, r5, lr}
   12c14:	ldrd	r4, [r3, #160]	; 0xa0
   12c18:	ldr	r3, [r1]
   12c1c:	ldrd	r2, [r3, #160]	; 0xa0
   12c20:	cmp	r5, r3
   12c24:	cmpeq	r4, r2
   12c28:	movhi	r0, #1
   12c2c:	movls	r0, #0
   12c30:	movcc	r3, #1
   12c34:	movcs	r3, #0
   12c38:	sub	r0, r0, r3
   12c3c:	pop	{r4, r5, pc}
   12c40:	ldr	r3, [r1, #48]	; 0x30
   12c44:	push	{r4, r5, r6, lr}
   12c48:	cmp	r3, #0
   12c4c:	mov	r4, r1
   12c50:	add	r5, r1, #64	; 0x40
   12c54:	ldr	r3, [r0, #48]	; 0x30
   12c58:	bne	12c64 <__assert_fail@plt+0x1e90>
   12c5c:	tst	r3, #1
   12c60:	movne	r2, #1
   12c64:	lsl	r3, r3, #30
   12c68:	orrs	r3, r2, r3, lsr #31
   12c6c:	beq	12cd8 <__assert_fail@plt+0x1f04>
   12c70:	mov	r1, r5
   12c74:	ldr	r0, [r4, #24]
   12c78:	bl	16dac <__assert_fail@plt+0x5fd8>
   12c7c:	cmp	r0, #0
   12c80:	beq	12d00 <__assert_fail@plt+0x1f2c>
   12c84:	bl	10cc0 <__errno_location@plt>
   12c88:	ldr	r3, [r0]
   12c8c:	mov	r6, r0
   12c90:	cmp	r3, #2
   12c94:	bne	12cb8 <__assert_fail@plt+0x1ee4>
   12c98:	mov	r1, r5
   12c9c:	ldr	r0, [r4, #24]
   12ca0:	bl	16dcc <__assert_fail@plt+0x5ff8>
   12ca4:	cmp	r0, #0
   12ca8:	bne	12cb8 <__assert_fail@plt+0x1ee4>
   12cac:	str	r0, [r6]
   12cb0:	mov	r0, #13
   12cb4:	pop	{r4, r5, r6, pc}
   12cb8:	ldr	r3, [r6]
   12cbc:	str	r3, [r4, #32]
   12cc0:	mov	r2, #104	; 0x68
   12cc4:	mov	r1, #0
   12cc8:	mov	r0, r5
   12ccc:	bl	10cd8 <memset@plt>
   12cd0:	mov	r0, #10
   12cd4:	pop	{r4, r5, r6, pc}
   12cd8:	mov	r3, #256	; 0x100
   12cdc:	mov	r2, r5
   12ce0:	ldr	r1, [r4, #24]
   12ce4:	ldr	r0, [r0, #32]
   12ce8:	bl	16ddc <__assert_fail@plt+0x6008>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d00 <__assert_fail@plt+0x1f2c>
   12cf4:	bl	10cc0 <__errno_location@plt>
   12cf8:	ldr	r3, [r0]
   12cfc:	b	12cbc <__assert_fail@plt+0x1ee8>
   12d00:	ldr	r0, [r4, #80]	; 0x50
   12d04:	and	r0, r0, #61440	; 0xf000
   12d08:	cmp	r0, #16384	; 0x4000
   12d0c:	bne	12d50 <__assert_fail@plt+0x1f7c>
   12d10:	ldrb	r3, [r4, #168]	; 0xa8
   12d14:	cmp	r3, #46	; 0x2e
   12d18:	bne	12d68 <__assert_fail@plt+0x1f94>
   12d1c:	ldrb	r3, [r4, #169]	; 0xa9
   12d20:	cmp	r3, #0
   12d24:	beq	12d3c <__assert_fail@plt+0x1f68>
   12d28:	ldr	r3, [r4, #168]	; 0xa8
   12d2c:	bic	r3, r3, #-16777216	; 0xff000000
   12d30:	bic	r3, r3, #255	; 0xff
   12d34:	cmp	r3, #11776	; 0x2e00
   12d38:	bne	12d68 <__assert_fail@plt+0x1f94>
   12d3c:	ldr	r0, [r4, #48]	; 0x30
   12d40:	cmp	r0, #0
   12d44:	moveq	r0, #1
   12d48:	movne	r0, #5
   12d4c:	pop	{r4, r5, r6, pc}
   12d50:	cmp	r0, #40960	; 0xa000
   12d54:	beq	12d70 <__assert_fail@plt+0x1f9c>
   12d58:	cmp	r0, #32768	; 0x8000
   12d5c:	moveq	r0, #8
   12d60:	movne	r0, #3
   12d64:	pop	{r4, r5, r6, pc}
   12d68:	mov	r0, #1
   12d6c:	pop	{r4, r5, r6, pc}
   12d70:	mov	r0, #12
   12d74:	pop	{r4, r5, r6, pc}
   12d78:	ldr	r3, [r0, #40]	; 0x28
   12d7c:	push	{r4, r5, r6, r7, r8, lr}
   12d80:	cmp	r3, r2
   12d84:	mov	r4, r0
   12d88:	mov	r6, r1
   12d8c:	mov	r5, r2
   12d90:	ldr	r7, [r0, #44]	; 0x2c
   12d94:	bcs	12ddc <__assert_fail@plt+0x2008>
   12d98:	add	r1, r2, #40	; 0x28
   12d9c:	cmn	r1, #-1073741823	; 0xc0000001
   12da0:	str	r1, [r0, #40]	; 0x28
   12da4:	bls	12dc4 <__assert_fail@plt+0x1ff0>
   12da8:	ldr	r0, [r4, #8]
   12dac:	bl	12b24 <__assert_fail@plt+0x1d50>
   12db0:	mov	r3, #0
   12db4:	str	r3, [r4, #8]
   12db8:	str	r3, [r4, #40]	; 0x28
   12dbc:	mov	r0, r6
   12dc0:	pop	{r4, r5, r6, r7, r8, pc}
   12dc4:	lsl	r1, r1, #2
   12dc8:	ldr	r0, [r0, #8]
   12dcc:	bl	16388 <__assert_fail@plt+0x55b4>
   12dd0:	cmp	r0, #0
   12dd4:	beq	12da8 <__assert_fail@plt+0x1fd4>
   12dd8:	str	r0, [r4, #8]
   12ddc:	ldr	r0, [r4, #8]
   12de0:	mov	r2, r0
   12de4:	cmp	r6, #0
   12de8:	bne	12e24 <__assert_fail@plt+0x2050>
   12dec:	mov	r3, r7
   12df0:	mov	r2, #4
   12df4:	mov	r1, r5
   12df8:	bl	10d5c <qsort@plt>
   12dfc:	ldr	r2, [r4, #8]
   12e00:	mov	r3, r5
   12e04:	mov	r1, r2
   12e08:	ldr	r6, [r2]
   12e0c:	subs	r3, r3, #1
   12e10:	bne	12e30 <__assert_fail@plt+0x205c>
   12e14:	sub	r5, r5, #-1073741823	; 0xc0000001
   12e18:	ldr	r2, [r2, r5, lsl #2]
   12e1c:	str	r3, [r2, #8]
   12e20:	b	12dbc <__assert_fail@plt+0x1fe8>
   12e24:	str	r6, [r2], #4
   12e28:	ldr	r6, [r6, #8]
   12e2c:	b	12de4 <__assert_fail@plt+0x2010>
   12e30:	ldr	r0, [r1]
   12e34:	ldr	ip, [r1, #4]!
   12e38:	str	ip, [r0, #8]
   12e3c:	b	12e0c <__assert_fail@plt+0x2038>
   12e40:	push	{r4, r5, r6, r7, r8, lr}
   12e44:	mov	r6, r0
   12e48:	add	r0, r2, #176	; 0xb0
   12e4c:	bic	r0, r0, #7
   12e50:	mov	r7, r1
   12e54:	mov	r5, r2
   12e58:	bl	16348 <__assert_fail@plt+0x5574>
   12e5c:	subs	r4, r0, #0
   12e60:	beq	12eac <__assert_fail@plt+0x20d8>
   12e64:	mov	r2, r5
   12e68:	mov	r1, r7
   12e6c:	add	r0, r4, #168	; 0xa8
   12e70:	bl	10bc4 <memcpy@plt>
   12e74:	add	r2, r4, r5
   12e78:	mov	r3, #0
   12e7c:	strb	r3, [r2, #168]	; 0xa8
   12e80:	ldr	r2, [r6, #24]
   12e84:	str	r5, [r4, #52]	; 0x34
   12e88:	str	r2, [r4, #28]
   12e8c:	mov	r2, #3
   12e90:	str	r6, [r4, #44]	; 0x2c
   12e94:	str	r3, [r4, #32]
   12e98:	str	r3, [r4, #12]
   12e9c:	strh	r3, [r4, #58]	; 0x3a
   12ea0:	strh	r2, [r4, #60]	; 0x3c
   12ea4:	str	r3, [r4, #16]
   12ea8:	str	r3, [r4, #20]
   12eac:	mov	r0, r4
   12eb0:	pop	{r4, r5, r6, r7, r8, pc}
   12eb4:	ldr	ip, [r0, #48]	; 0x30
   12eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   12ebc:	tst	ip, #16
   12ec0:	ldr	lr, [pc, #40]	; 12ef0 <__assert_fail@plt+0x211c>
   12ec4:	ldr	r2, [pc, #40]	; 12ef4 <__assert_fail@plt+0x2120>
   12ec8:	moveq	r2, lr
   12ecc:	tst	ip, #512	; 0x200
   12ed0:	beq	12ee0 <__assert_fail@plt+0x210c>
   12ed4:	ldr	r0, [r0, #32]
   12ed8:	pop	{lr}		; (ldr lr, [sp], #4)
   12edc:	b	16240 <__assert_fail@plt+0x546c>
   12ee0:	mov	r0, r1
   12ee4:	pop	{lr}		; (ldr lr, [sp], #4)
   12ee8:	mov	r1, r2
   12eec:	b	16674 <__assert_fail@plt+0x58a0>
   12ef0:	andeq	r4, r8, r0, lsl #18
   12ef4:	andeq	ip, r8, r0, lsl #18
   12ef8:	push	{r4, r5, r6, lr}
   12efc:	mov	r4, r0
   12f00:	cmp	r4, #0
   12f04:	bne	12f0c <__assert_fail@plt+0x2138>
   12f08:	pop	{r4, r5, r6, pc}
   12f0c:	ldr	r0, [r4, #12]
   12f10:	ldr	r5, [r4, #8]
   12f14:	cmp	r0, #0
   12f18:	beq	12f20 <__assert_fail@plt+0x214c>
   12f1c:	bl	10dbc <closedir@plt>
   12f20:	mov	r0, r4
   12f24:	bl	12b24 <__assert_fail@plt+0x1d50>
   12f28:	mov	r4, r5
   12f2c:	b	12f00 <__assert_fail@plt+0x212c>
   12f30:	ldr	r2, [r0, #48]	; 0x30
   12f34:	ldr	r3, [pc, #28]	; 12f58 <__assert_fail@plt+0x2184>
   12f38:	ldr	r0, [r0, #56]	; 0x38
   12f3c:	and	r3, r3, r2
   12f40:	cmp	r3, #0
   12f44:	beq	12f54 <__assert_fail@plt+0x2180>
   12f48:	cmp	r0, #0
   12f4c:	bxeq	lr
   12f50:	b	15c58 <__assert_fail@plt+0x4e84>
   12f54:	b	12b24 <__assert_fail@plt+0x1d50>
   12f58:	andeq	r0, r0, r2, lsl #2
   12f5c:	push	{r4, lr}
   12f60:	mov	r4, r0
   12f64:	mov	r0, r4
   12f68:	bl	16118 <__assert_fail@plt+0x5344>
   12f6c:	cmp	r0, #0
   12f70:	beq	12f78 <__assert_fail@plt+0x21a4>
   12f74:	pop	{r4, pc}
   12f78:	mov	r0, r4
   12f7c:	bl	16164 <__assert_fail@plt+0x5390>
   12f80:	cmp	r0, #0
   12f84:	blt	12f64 <__assert_fail@plt+0x2190>
   12f88:	bl	10da4 <close@plt>
   12f8c:	b	12f64 <__assert_fail@plt+0x2190>
   12f90:	push	{r4, r5, r6, r7, lr}
   12f94:	sub	sp, sp, #100	; 0x64
   12f98:	ldr	r5, [r0, #44]	; 0x2c
   12f9c:	ldr	r3, [r5, #48]	; 0x30
   12fa0:	tst	r3, #512	; 0x200
   12fa4:	bne	12fb4 <__assert_fail@plt+0x21e0>
   12fa8:	mov	r0, #0
   12fac:	add	sp, sp, #100	; 0x64
   12fb0:	pop	{r4, r5, r6, r7, pc}
   12fb4:	ldr	r4, [r5, #52]	; 0x34
   12fb8:	mov	r7, r1
   12fbc:	cmp	r4, #0
   12fc0:	mov	r6, r0
   12fc4:	bne	12ff4 <__assert_fail@plt+0x2220>
   12fc8:	ldr	r3, [pc, #184]	; 13088 <__assert_fail@plt+0x22b4>
   12fcc:	mov	r1, r4
   12fd0:	str	r3, [sp]
   12fd4:	ldr	r2, [pc, #176]	; 1308c <__assert_fail@plt+0x22b8>
   12fd8:	ldr	r3, [pc, #176]	; 13090 <__assert_fail@plt+0x22bc>
   12fdc:	mov	r0, #13
   12fe0:	bl	15aec <__assert_fail@plt+0x4d18>
   12fe4:	cmp	r0, #0
   12fe8:	mov	r4, r0
   12fec:	str	r0, [r5, #52]	; 0x34
   12ff0:	beq	13014 <__assert_fail@plt+0x2240>
   12ff4:	ldrd	r2, [r6, #64]	; 0x40
   12ff8:	add	r1, sp, #96	; 0x60
   12ffc:	mov	r0, r4
   13000:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13004:	bl	158c8 <__assert_fail@plt+0x4af4>
   13008:	cmp	r0, #0
   1300c:	ldrne	r0, [r0, #8]
   13010:	bne	12fac <__assert_fail@plt+0x21d8>
   13014:	cmp	r7, #0
   13018:	blt	12fa8 <__assert_fail@plt+0x21d4>
   1301c:	add	r1, sp, #8
   13020:	mov	r0, r7
   13024:	bl	10b58 <fstatfs64@plt>
   13028:	cmp	r0, #0
   1302c:	bne	12fa8 <__assert_fail@plt+0x21d4>
   13030:	cmp	r4, #0
   13034:	beq	13080 <__assert_fail@plt+0x22ac>
   13038:	mov	r0, #16
   1303c:	bl	16348 <__assert_fail@plt+0x5574>
   13040:	subs	r5, r0, #0
   13044:	beq	13080 <__assert_fail@plt+0x22ac>
   13048:	ldrd	r2, [r6, #64]	; 0x40
   1304c:	mov	r1, r5
   13050:	mov	r0, r4
   13054:	strd	r2, [r5]
   13058:	ldr	r3, [sp, #8]
   1305c:	str	r3, [r5, #8]
   13060:	bl	15fc0 <__assert_fail@plt+0x51ec>
   13064:	cmp	r0, #0
   13068:	beq	13078 <__assert_fail@plt+0x22a4>
   1306c:	cmp	r5, r0
   13070:	beq	13080 <__assert_fail@plt+0x22ac>
   13074:	bl	10d98 <abort@plt>
   13078:	mov	r0, r5
   1307c:	bl	12b24 <__assert_fail@plt+0x1d50>
   13080:	ldr	r0, [sp, #8]
   13084:	b	12fac <__assert_fail@plt+0x21d8>
   13088:	andeq	r2, r1, r4, lsr #22
   1308c:	ldrdeq	r2, [r1], -r0
   13090:	andeq	r2, r1, ip, ror #23
   13094:	push	{r4, r5, r6, lr}
   13098:	mov	r5, r1
   1309c:	ldr	r1, [r0, #32]
   130a0:	cmn	r1, #100	; 0x64
   130a4:	sub	r3, r1, r5
   130a8:	clz	r3, r3
   130ac:	lsr	r3, r3, #5
   130b0:	moveq	r3, #0
   130b4:	cmp	r3, #0
   130b8:	beq	130c0 <__assert_fail@plt+0x22ec>
   130bc:	bl	10d98 <abort@plt>
   130c0:	cmp	r2, #0
   130c4:	mov	r4, r0
   130c8:	beq	130e8 <__assert_fail@plt+0x2314>
   130cc:	add	r0, r0, #60	; 0x3c
   130d0:	bl	16120 <__assert_fail@plt+0x534c>
   130d4:	cmp	r0, #0
   130d8:	blt	130e0 <__assert_fail@plt+0x230c>
   130dc:	bl	10da4 <close@plt>
   130e0:	str	r5, [r4, #32]
   130e4:	pop	{r4, r5, r6, pc}
   130e8:	ldr	r3, [r0, #48]	; 0x30
   130ec:	lsr	r3, r3, #2
   130f0:	eor	r3, r3, #1
   130f4:	cmp	r1, #0
   130f8:	movlt	r3, #0
   130fc:	andge	r3, r3, #1
   13100:	cmp	r3, #0
   13104:	beq	130e0 <__assert_fail@plt+0x230c>
   13108:	mov	r0, r1
   1310c:	b	130dc <__assert_fail@plt+0x2308>
   13110:	ldr	r3, [r0, #48]	; 0x30
   13114:	push	{r4, r5, r6, lr}
   13118:	ands	r4, r3, #4
   1311c:	mov	r5, r0
   13120:	movne	r4, #0
   13124:	bne	1313c <__assert_fail@plt+0x2368>
   13128:	tst	r3, #512	; 0x200
   1312c:	beq	1314c <__assert_fail@plt+0x2378>
   13130:	mov	r2, #1
   13134:	mvn	r1, #99	; 0x63
   13138:	bl	13094 <__assert_fail@plt+0x22c0>
   1313c:	add	r0, r5, #60	; 0x3c
   13140:	bl	12f5c <__assert_fail@plt+0x2188>
   13144:	mov	r0, r4
   13148:	pop	{r4, r5, r6, pc}
   1314c:	ldr	r0, [r0, #28]
   13150:	bl	10d50 <fchdir@plt>
   13154:	adds	r4, r0, #0
   13158:	movne	r4, #1
   1315c:	b	1313c <__assert_fail@plt+0x2368>
   13160:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13164:	subs	sl, r3, #0
   13168:	sub	sp, sp, #104	; 0x68
   1316c:	mov	r7, r0
   13170:	mov	r8, r1
   13174:	mov	r6, r2
   13178:	moveq	r9, sl
   1317c:	beq	13194 <__assert_fail@plt+0x23c0>
   13180:	ldr	r1, [pc, #368]	; 132f8 <__assert_fail@plt+0x2524>
   13184:	mov	r0, sl
   13188:	bl	10b7c <strcmp@plt>
   1318c:	clz	r9, r0
   13190:	lsr	r9, r9, #5
   13194:	ldr	r3, [r7, #48]	; 0x30
   13198:	ands	r4, r3, #4
   1319c:	beq	131c8 <__assert_fail@plt+0x23f4>
   131a0:	mvn	r4, r6
   131a4:	lsr	r4, r4, #31
   131a8:	ands	r4, r4, r3, lsr #9
   131ac:	beq	131bc <__assert_fail@plt+0x23e8>
   131b0:	mov	r0, r6
   131b4:	bl	10da4 <close@plt>
   131b8:	mov	r4, #0
   131bc:	mov	r0, r4
   131c0:	add	sp, sp, #104	; 0x68
   131c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131c8:	ands	r2, r9, r6, lsr #31
   131cc:	beq	132b8 <__assert_fail@plt+0x24e4>
   131d0:	tst	r3, #512	; 0x200
   131d4:	bne	131f4 <__assert_fail@plt+0x2420>
   131d8:	mov	r1, sl
   131dc:	mov	r0, r7
   131e0:	bl	12eb4 <__assert_fail@plt+0x20e0>
   131e4:	subs	r5, r0, #0
   131e8:	bge	13220 <__assert_fail@plt+0x244c>
   131ec:	mvn	r4, #0
   131f0:	b	131bc <__assert_fail@plt+0x23e8>
   131f4:	add	r5, r7, #60	; 0x3c
   131f8:	mov	r0, r5
   131fc:	bl	16118 <__assert_fail@plt+0x5344>
   13200:	cmp	r0, #0
   13204:	bne	131d8 <__assert_fail@plt+0x2404>
   13208:	mov	r0, r5
   1320c:	bl	16164 <__assert_fail@plt+0x5390>
   13210:	subs	r5, r0, #0
   13214:	movge	r6, r5
   13218:	movge	sl, r4
   1321c:	blt	131d8 <__assert_fail@plt+0x2404>
   13220:	ldr	r3, [r7, #48]	; 0x30
   13224:	tst	r3, #2
   13228:	bne	13248 <__assert_fail@plt+0x2474>
   1322c:	cmp	sl, #0
   13230:	beq	132c8 <__assert_fail@plt+0x24f4>
   13234:	ldr	r1, [pc, #188]	; 132f8 <__assert_fail@plt+0x2524>
   13238:	mov	r0, sl
   1323c:	bl	10b7c <strcmp@plt>
   13240:	cmp	r0, #0
   13244:	bne	132c8 <__assert_fail@plt+0x24f4>
   13248:	mov	r1, sp
   1324c:	mov	r0, r5
   13250:	bl	16dbc <__assert_fail@plt+0x5fe8>
   13254:	cmp	r0, #0
   13258:	bne	13290 <__assert_fail@plt+0x24bc>
   1325c:	ldrd	r0, [r8, #64]	; 0x40
   13260:	ldrd	r2, [sp]
   13264:	cmp	r1, r3
   13268:	cmpeq	r0, r2
   1326c:	bne	13284 <__assert_fail@plt+0x24b0>
   13270:	ldrd	r0, [r8, #160]	; 0xa0
   13274:	ldrd	r2, [sp, #96]	; 0x60
   13278:	cmp	r1, r3
   1327c:	cmpeq	r0, r2
   13280:	beq	132c8 <__assert_fail@plt+0x24f4>
   13284:	bl	10cc0 <__errno_location@plt>
   13288:	mov	r3, #2
   1328c:	str	r3, [r0]
   13290:	mvn	r4, #0
   13294:	cmp	r6, #0
   13298:	bge	131bc <__assert_fail@plt+0x23e8>
   1329c:	bl	10cc0 <__errno_location@plt>
   132a0:	ldr	r7, [r0]
   132a4:	mov	r6, r0
   132a8:	mov	r0, r5
   132ac:	bl	10da4 <close@plt>
   132b0:	str	r7, [r6]
   132b4:	b	131bc <__assert_fail@plt+0x23e8>
   132b8:	cmp	r6, #0
   132bc:	movge	r5, r6
   132c0:	bge	13220 <__assert_fail@plt+0x244c>
   132c4:	b	131d8 <__assert_fail@plt+0x2404>
   132c8:	ldr	r3, [r7, #48]	; 0x30
   132cc:	tst	r3, #512	; 0x200
   132d0:	beq	132e8 <__assert_fail@plt+0x2514>
   132d4:	eor	r2, r9, #1
   132d8:	mov	r1, r5
   132dc:	mov	r0, r7
   132e0:	bl	13094 <__assert_fail@plt+0x22c0>
   132e4:	b	131bc <__assert_fail@plt+0x23e8>
   132e8:	mov	r0, r5
   132ec:	bl	10d50 <fchdir@plt>
   132f0:	mov	r4, r0
   132f4:	b	13294 <__assert_fail@plt+0x24c0>
   132f8:	andeq	r6, r1, lr, lsr pc
   132fc:	ldr	r2, [r0, #48]	; 0x30
   13300:	ldr	r3, [pc, #164]	; 133ac <__assert_fail@plt+0x25d8>
   13304:	push	{r4, r5, r6, r7, lr}
   13308:	and	r3, r3, r2
   1330c:	cmp	r3, #0
   13310:	sub	sp, sp, #28
   13314:	beq	1334c <__assert_fail@plt+0x2578>
   13318:	ldrd	r4, [r1, #64]	; 0x40
   1331c:	ldrd	r2, [r1, #160]	; 0xa0
   13320:	ldr	r0, [r0, #56]	; 0x38
   13324:	mov	r1, sp
   13328:	strd	r4, [sp]
   1332c:	strd	r2, [sp, #8]
   13330:	bl	15ff0 <__assert_fail@plt+0x521c>
   13334:	cmp	r0, #0
   13338:	bne	13340 <__assert_fail@plt+0x256c>
   1333c:	bl	10d98 <abort@plt>
   13340:	bl	12b24 <__assert_fail@plt+0x1d50>
   13344:	add	sp, sp, #28
   13348:	pop	{r4, r5, r6, r7, pc}
   1334c:	ldr	ip, [r1, #4]
   13350:	cmp	ip, #0
   13354:	beq	13344 <__assert_fail@plt+0x2570>
   13358:	ldr	r3, [ip, #48]	; 0x30
   1335c:	cmp	r3, #0
   13360:	blt	13344 <__assert_fail@plt+0x2570>
   13364:	ldr	r3, [r0, #56]	; 0x38
   13368:	ldrd	r4, [r3, #16]
   1336c:	orrs	r2, r4, r5
   13370:	beq	1333c <__assert_fail@plt+0x2568>
   13374:	ldrd	r4, [r3]
   13378:	ldrd	r6, [r1, #160]	; 0xa0
   1337c:	cmp	r5, r7
   13380:	cmpeq	r4, r6
   13384:	bne	13344 <__assert_fail@plt+0x2570>
   13388:	ldrd	r6, [r3, #8]
   1338c:	ldrd	r4, [r1, #64]	; 0x40
   13390:	cmp	r7, r5
   13394:	cmpeq	r6, r4
   13398:	ldrdeq	r0, [ip, #64]	; 0x40
   1339c:	strdeq	r0, [r3, #8]
   133a0:	ldrdeq	r0, [ip, #160]	; 0xa0
   133a4:	strdeq	r0, [r3]
   133a8:	b	13344 <__assert_fail@plt+0x2570>
   133ac:	andeq	r0, r0, r2, lsl #2
   133b0:	ldr	r3, [r0, #36]	; 0x24
   133b4:	add	r1, r1, #256	; 0x100
   133b8:	adds	r1, r1, r3
   133bc:	push	{r4, r5, r6, lr}
   133c0:	mov	r5, r0
   133c4:	bcc	133ec <__assert_fail@plt+0x2618>
   133c8:	ldr	r0, [r0, #24]
   133cc:	mov	r4, #0
   133d0:	bl	12b24 <__assert_fail@plt+0x1d50>
   133d4:	str	r4, [r5, #24]
   133d8:	bl	10cc0 <__errno_location@plt>
   133dc:	mov	r3, #36	; 0x24
   133e0:	str	r3, [r0]
   133e4:	mov	r0, r4
   133e8:	pop	{r4, r5, r6, pc}
   133ec:	str	r1, [r0, #36]	; 0x24
   133f0:	ldr	r0, [r0, #24]
   133f4:	bl	16388 <__assert_fail@plt+0x55b4>
   133f8:	subs	r4, r0, #0
   133fc:	bne	13410 <__assert_fail@plt+0x263c>
   13400:	ldr	r0, [r5, #24]
   13404:	bl	12b24 <__assert_fail@plt+0x1d50>
   13408:	str	r4, [r5, #24]
   1340c:	b	133e4 <__assert_fail@plt+0x2610>
   13410:	str	r4, [r5, #24]
   13414:	mov	r0, #1
   13418:	pop	{r4, r5, r6, pc}
   1341c:	ldr	r2, [r0, #48]	; 0x30
   13420:	ldr	r3, [pc, #96]	; 13488 <__assert_fail@plt+0x26b4>
   13424:	push	{r0, r1, r4, lr}
   13428:	and	r3, r3, r2
   1342c:	cmp	r3, #0
   13430:	mov	r4, r0
   13434:	beq	13468 <__assert_fail@plt+0x2694>
   13438:	ldr	r3, [pc, #76]	; 1348c <__assert_fail@plt+0x26b8>
   1343c:	ldr	r2, [pc, #76]	; 13490 <__assert_fail@plt+0x26bc>
   13440:	str	r3, [sp]
   13444:	mov	r1, #0
   13448:	ldr	r3, [pc, #68]	; 13494 <__assert_fail@plt+0x26c0>
   1344c:	mov	r0, #31
   13450:	bl	15aec <__assert_fail@plt+0x4d18>
   13454:	str	r0, [r4, #56]	; 0x38
   13458:	adds	r0, r0, #0
   1345c:	movne	r0, #1
   13460:	add	sp, sp, #8
   13464:	pop	{r4, pc}
   13468:	mov	r0, #32
   1346c:	bl	16348 <__assert_fail@plt+0x5574>
   13470:	cmp	r0, #0
   13474:	str	r0, [r4, #56]	; 0x38
   13478:	beq	13460 <__assert_fail@plt+0x268c>
   1347c:	bl	163e4 <__assert_fail@plt+0x5610>
   13480:	mov	r0, #1
   13484:	b	13460 <__assert_fail@plt+0x268c>
   13488:	andeq	r0, r0, r2, lsl #2
   1348c:	andeq	r2, r1, r4, lsr #22
   13490:			; <UNDEFINED> instruction: 0x00012bb4
   13494:	andeq	r2, r1, r8, ror fp
   13498:	ldr	r2, [r0, #48]	; 0x30
   1349c:	ldr	r3, [pc, #168]	; 1354c <__assert_fail@plt+0x2778>
   134a0:	push	{r4, r5, r6, lr}
   134a4:	and	r3, r3, r2
   134a8:	cmp	r3, #0
   134ac:	mov	r6, r0
   134b0:	mov	r4, r1
   134b4:	beq	13528 <__assert_fail@plt+0x2754>
   134b8:	mov	r0, #24
   134bc:	bl	16348 <__assert_fail@plt+0x5574>
   134c0:	subs	r5, r0, #0
   134c4:	bne	134d0 <__assert_fail@plt+0x26fc>
   134c8:	mov	r0, #0
   134cc:	pop	{r4, r5, r6, pc}
   134d0:	ldrd	r2, [r4, #64]	; 0x40
   134d4:	ldr	r0, [r6, #56]	; 0x38
   134d8:	str	r4, [r5, #16]
   134dc:	strd	r2, [r5]
   134e0:	ldrd	r2, [r4, #160]	; 0xa0
   134e4:	mov	r1, r5
   134e8:	strd	r2, [r5, #8]
   134ec:	bl	15fc0 <__assert_fail@plt+0x51ec>
   134f0:	cmp	r5, r0
   134f4:	mov	r6, r0
   134f8:	bne	13504 <__assert_fail@plt+0x2730>
   134fc:	mov	r0, #1
   13500:	pop	{r4, r5, r6, pc}
   13504:	mov	r0, r5
   13508:	bl	12b24 <__assert_fail@plt+0x1d50>
   1350c:	cmp	r6, #0
   13510:	beq	134c8 <__assert_fail@plt+0x26f4>
   13514:	ldr	r3, [r6, #16]
   13518:	str	r3, [r4]
   1351c:	mov	r3, #2
   13520:	strh	r3, [r4, #56]	; 0x38
   13524:	b	134fc <__assert_fail@plt+0x2728>
   13528:	add	r1, r1, #64	; 0x40
   1352c:	ldr	r0, [r0, #56]	; 0x38
   13530:	bl	16400 <__assert_fail@plt+0x562c>
   13534:	cmp	r0, #0
   13538:	beq	134fc <__assert_fail@plt+0x2728>
   1353c:	mov	r3, #2
   13540:	str	r4, [r4]
   13544:	strh	r3, [r4, #56]	; 0x38
   13548:	pop	{r4, r5, r6, pc}
   1354c:	andeq	r0, r0, r2, lsl #2
   13550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13554:	sub	sp, sp, #60	; 0x3c
   13558:	ldr	r5, [r0]
   1355c:	mov	r4, r0
   13560:	str	r1, [sp, #8]
   13564:	ldr	r3, [r5, #12]
   13568:	cmp	r3, #0
   1356c:	str	r3, [sp, #4]
   13570:	beq	135c4 <__assert_fail@plt+0x27f0>
   13574:	mov	r0, r3
   13578:	bl	10d2c <dirfd@plt>
   1357c:	cmp	r0, #0
   13580:	str	r0, [sp, #52]	; 0x34
   13584:	bge	13638 <__assert_fail@plt+0x2864>
   13588:	ldr	r0, [r5, #12]
   1358c:	mov	r6, #0
   13590:	bl	10dbc <closedir@plt>
   13594:	str	r6, [r5, #12]
   13598:	ldr	r3, [sp, #8]
   1359c:	cmp	r3, #3
   135a0:	bne	13764 <__assert_fail@plt+0x2990>
   135a4:	mov	r3, #4
   135a8:	strh	r3, [r5, #56]	; 0x38
   135ac:	bl	10cc0 <__errno_location@plt>
   135b0:	ldr	r3, [r0]
   135b4:	str	r3, [r5, #32]
   135b8:	mov	r0, r6
   135bc:	add	sp, sp, #60	; 0x3c
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	ldr	r3, [r0, #48]	; 0x30
   135c8:	ldr	r1, [r5, #24]
   135cc:	and	r2, r3, #516	; 0x204
   135d0:	cmp	r2, #512	; 0x200
   135d4:	mvnne	r0, #99	; 0x63
   135d8:	ldreq	r0, [r0, #32]
   135dc:	ands	r2, r3, #16
   135e0:	beq	13600 <__assert_fail@plt+0x282c>
   135e4:	tst	r3, #1
   135e8:	moveq	r2, #32768	; 0x8000
   135ec:	beq	13600 <__assert_fail@plt+0x282c>
   135f0:	ldr	r2, [r5, #48]	; 0x30
   135f4:	cmp	r2, #0
   135f8:	movne	r2, #32768	; 0x8000
   135fc:	moveq	r2, #0
   13600:	add	r3, sp, #52	; 0x34
   13604:	bl	16274 <__assert_fail@plt+0x54a0>
   13608:	cmp	r0, #0
   1360c:	mov	r6, r0
   13610:	str	r0, [r5, #12]
   13614:	beq	13598 <__assert_fail@plt+0x27c4>
   13618:	ldrh	r3, [r5, #56]	; 0x38
   1361c:	cmp	r3, #11
   13620:	bne	1376c <__assert_fail@plt+0x2998>
   13624:	mov	r2, #0
   13628:	mov	r1, r5
   1362c:	mov	r0, r4
   13630:	bl	12c40 <__assert_fail@plt+0x1e6c>
   13634:	strh	r0, [r5, #56]	; 0x38
   13638:	ldr	r3, [r4, #44]	; 0x2c
   1363c:	cmp	r3, #0
   13640:	ldr	r3, [pc, #1824]	; 13d68 <__assert_fail@plt+0x2f94>
   13644:	mvnne	r3, #0
   13648:	str	r3, [sp, #36]	; 0x24
   1364c:	ldr	r3, [sp, #4]
   13650:	cmp	r3, #0
   13654:	beq	137b8 <__assert_fail@plt+0x29e4>
   13658:	mov	r3, #1
   1365c:	str	r3, [sp, #20]
   13660:	ldr	fp, [r5, #40]	; 0x28
   13664:	ldr	r2, [r5, #28]
   13668:	sub	r3, fp, #1
   1366c:	mov	r9, #0
   13670:	ldrb	r2, [r2, r3]
   13674:	mov	r8, r9
   13678:	mov	r6, r9
   1367c:	cmp	r2, #47	; 0x2f
   13680:	moveq	fp, r3
   13684:	ldr	r3, [r4, #48]	; 0x30
   13688:	str	r9, [sp, #24]
   1368c:	ands	r3, r3, #4
   13690:	streq	r3, [sp]
   13694:	ldrne	r3, [r4, #24]
   13698:	str	r9, [sp, #32]
   1369c:	addne	r2, r3, fp
   136a0:	addne	r2, r2, #1
   136a4:	strne	r2, [sp]
   136a8:	movne	r2, #47	; 0x2f
   136ac:	strbne	r2, [r3, fp]
   136b0:	add	r3, fp, #1
   136b4:	str	r3, [sp, #16]
   136b8:	ldr	r3, [r4, #36]	; 0x24
   136bc:	add	r2, fp, #1
   136c0:	sub	r3, r3, r2
   136c4:	str	r3, [sp, #28]
   136c8:	ldr	r3, [r5, #48]	; 0x30
   136cc:	add	r3, r3, #1
   136d0:	str	r3, [sp, #40]	; 0x28
   136d4:	ldr	r7, [r5, #12]
   136d8:	cmp	r7, #0
   136dc:	bne	138fc <__assert_fail@plt+0x2b28>
   136e0:	ldr	r3, [sp, #24]
   136e4:	cmp	r3, #0
   136e8:	bne	13c28 <__assert_fail@plt+0x2e54>
   136ec:	ldr	r3, [r4, #48]	; 0x30
   136f0:	tst	r3, #4
   136f4:	bne	13ca4 <__assert_fail@plt+0x2ed0>
   136f8:	ldr	r3, [sp, #20]
   136fc:	ldr	r2, [sp, #4]
   13700:	cmp	r2, #0
   13704:	movne	r3, #0
   13708:	andeq	r3, r3, #1
   1370c:	cmp	r3, #0
   13710:	beq	13ce8 <__assert_fail@plt+0x2f14>
   13714:	ldr	r3, [sp, #8]
   13718:	cmp	r8, #0
   1371c:	cmpne	r3, #1
   13720:	bne	13d14 <__assert_fail@plt+0x2f40>
   13724:	ldr	r3, [r5, #48]	; 0x30
   13728:	cmp	r3, #0
   1372c:	bne	13cd0 <__assert_fail@plt+0x2efc>
   13730:	mov	r0, r4
   13734:	bl	13110 <__assert_fail@plt+0x233c>
   13738:	adds	r0, r0, #0
   1373c:	movne	r0, #1
   13740:	cmp	r0, #0
   13744:	beq	13ce8 <__assert_fail@plt+0x2f14>
   13748:	mov	r3, #7
   1374c:	strh	r3, [r5, #56]	; 0x38
   13750:	ldr	r3, [r4, #48]	; 0x30
   13754:	orr	r3, r3, #8192	; 0x2000
   13758:	str	r3, [r4, #48]	; 0x30
   1375c:	mov	r0, r6
   13760:	bl	12ef8 <__assert_fail@plt+0x2124>
   13764:	mov	r6, #0
   13768:	b	135b8 <__assert_fail@plt+0x27e4>
   1376c:	ldr	r3, [r4, #48]	; 0x30
   13770:	tst	r3, #256	; 0x100
   13774:	beq	13638 <__assert_fail@plt+0x2864>
   13778:	mov	r1, r5
   1377c:	mov	r0, r4
   13780:	bl	132fc <__assert_fail@plt+0x2528>
   13784:	mov	r2, #0
   13788:	mov	r1, r5
   1378c:	mov	r0, r4
   13790:	bl	12c40 <__assert_fail@plt+0x1e6c>
   13794:	mov	r1, r5
   13798:	mov	r0, r4
   1379c:	bl	13498 <__assert_fail@plt+0x26c4>
   137a0:	subs	r6, r0, #0
   137a4:	bne	13638 <__assert_fail@plt+0x2864>
   137a8:	bl	10cc0 <__errno_location@plt>
   137ac:	mov	r3, #12
   137b0:	str	r3, [r0]
   137b4:	b	135b8 <__assert_fail@plt+0x27e4>
   137b8:	ldr	r3, [sp, #8]
   137bc:	cmp	r3, #2
   137c0:	beq	13810 <__assert_fail@plt+0x2a3c>
   137c4:	ldr	r3, [r4, #48]	; 0x30
   137c8:	and	r3, r3, #56	; 0x38
   137cc:	cmp	r3, #24
   137d0:	bne	138c8 <__assert_fail@plt+0x2af4>
   137d4:	ldr	r3, [r5, #84]	; 0x54
   137d8:	cmp	r3, #2
   137dc:	bne	138c8 <__assert_fail@plt+0x2af4>
   137e0:	ldr	r1, [sp, #52]	; 0x34
   137e4:	mov	r0, r5
   137e8:	bl	12f90 <__assert_fail@plt+0x21bc>
   137ec:	ldr	r3, [pc, #1400]	; 13d6c <__assert_fail@plt+0x2f98>
   137f0:	cmp	r0, r3
   137f4:	beq	138c8 <__assert_fail@plt+0x2af4>
   137f8:	bgt	138b0 <__assert_fail@plt+0x2adc>
   137fc:	ldr	r3, [pc, #1388]	; 13d70 <__assert_fail@plt+0x2f9c>
   13800:	cmp	r0, r3
   13804:	beq	138c8 <__assert_fail@plt+0x2af4>
   13808:	cmp	r0, #0
   1380c:	beq	138c8 <__assert_fail@plt+0x2af4>
   13810:	mov	r3, #0
   13814:	mov	r6, r3
   13818:	ldr	r3, [sp, #8]
   1381c:	sub	r7, r3, #3
   13820:	clz	r7, r7
   13824:	lsr	r7, r7, #5
   13828:	orrs	r3, r6, r7
   1382c:	str	r3, [sp, #20]
   13830:	beq	13660 <__assert_fail@plt+0x288c>
   13834:	ldr	r3, [r4, #48]	; 0x30
   13838:	tst	r3, #512	; 0x200
   1383c:	beq	13854 <__assert_fail@plt+0x2a80>
   13840:	mov	r2, #3
   13844:	ldr	r1, [pc, #1320]	; 13d74 <__assert_fail@plt+0x2fa0>
   13848:	ldr	r0, [sp, #52]	; 0x34
   1384c:	bl	164b0 <__assert_fail@plt+0x56dc>
   13850:	str	r0, [sp, #52]	; 0x34
   13854:	ldr	r2, [sp, #52]	; 0x34
   13858:	cmp	r2, #0
   1385c:	bge	138d0 <__assert_fail@plt+0x2afc>
   13860:	tst	r6, r7
   13864:	bne	138ec <__assert_fail@plt+0x2b18>
   13868:	ldrh	r3, [r5, #58]	; 0x3a
   1386c:	ldr	r0, [r5, #12]
   13870:	orr	r3, r3, #1
   13874:	strh	r3, [r5, #58]	; 0x3a
   13878:	bl	10dbc <closedir@plt>
   1387c:	ldr	r2, [r4, #48]	; 0x30
   13880:	mov	r3, #0
   13884:	tst	r2, #512	; 0x200
   13888:	str	r3, [r5, #12]
   1388c:	mov	r6, r3
   13890:	beq	138a4 <__assert_fail@plt+0x2ad0>
   13894:	ldr	r0, [sp, #52]	; 0x34
   13898:	cmp	r0, r3
   1389c:	blt	138a4 <__assert_fail@plt+0x2ad0>
   138a0:	bl	10da4 <close@plt>
   138a4:	str	r6, [r5, #12]
   138a8:	mov	r3, #0
   138ac:	b	1365c <__assert_fail@plt+0x2888>
   138b0:	ldr	r3, [pc, #1216]	; 13d78 <__assert_fail@plt+0x2fa4>
   138b4:	cmp	r0, r3
   138b8:	beq	138c8 <__assert_fail@plt+0x2af4>
   138bc:	ldr	r3, [pc, #1208]	; 13d7c <__assert_fail@plt+0x2fa8>
   138c0:	cmp	r0, r3
   138c4:	b	1380c <__assert_fail@plt+0x2a38>
   138c8:	mov	r3, #1
   138cc:	b	13814 <__assert_fail@plt+0x2a40>
   138d0:	mov	r3, #0
   138d4:	mov	r1, r5
   138d8:	mov	r0, r4
   138dc:	bl	13160 <__assert_fail@plt+0x238c>
   138e0:	cmp	r0, #0
   138e4:	bne	13860 <__assert_fail@plt+0x2a8c>
   138e8:	b	13658 <__assert_fail@plt+0x2884>
   138ec:	bl	10cc0 <__errno_location@plt>
   138f0:	ldr	r3, [r0]
   138f4:	str	r3, [r5, #32]
   138f8:	b	13868 <__assert_fail@plt+0x2a94>
   138fc:	bl	10cc0 <__errno_location@plt>
   13900:	mov	r3, #0
   13904:	str	r0, [sp, #12]
   13908:	str	r3, [r0]
   1390c:	mov	r0, r7
   13910:	bl	10d14 <readdir64@plt>
   13914:	subs	sl, r0, #0
   13918:	bne	13964 <__assert_fail@plt+0x2b90>
   1391c:	ldr	r3, [sp, #12]
   13920:	ldr	r3, [r3]
   13924:	cmp	r3, #0
   13928:	beq	13948 <__assert_fail@plt+0x2b74>
   1392c:	str	r3, [r5, #32]
   13930:	ldr	r3, [sp, #4]
   13934:	cmp	r8, #0
   13938:	cmpeq	r3, #0
   1393c:	moveq	r3, #4
   13940:	movne	r3, #7
   13944:	strh	r3, [r5, #56]	; 0x38
   13948:	ldr	r0, [r5, #12]
   1394c:	cmp	r0, #0
   13950:	beq	136e0 <__assert_fail@plt+0x290c>
   13954:	bl	10dbc <closedir@plt>
   13958:	mov	r3, #0
   1395c:	str	r3, [r5, #12]
   13960:	b	136e0 <__assert_fail@plt+0x290c>
   13964:	ldr	r3, [r4, #48]	; 0x30
   13968:	tst	r3, #32
   1396c:	bne	13994 <__assert_fail@plt+0x2bc0>
   13970:	ldrb	r3, [sl, #19]
   13974:	cmp	r3, #46	; 0x2e
   13978:	bne	13994 <__assert_fail@plt+0x2bc0>
   1397c:	ldrb	r3, [sl, #20]
   13980:	cmp	r3, #0
   13984:	beq	136d4 <__assert_fail@plt+0x2900>
   13988:	ldrh	r3, [sl, #20]
   1398c:	cmp	r3, #46	; 0x2e
   13990:	beq	136d4 <__assert_fail@plt+0x2900>
   13994:	add	r7, sl, #19
   13998:	mov	r0, r7
   1399c:	bl	10c90 <strlen@plt>
   139a0:	mov	r1, r7
   139a4:	mov	r2, r0
   139a8:	str	r0, [sp, #44]	; 0x2c
   139ac:	mov	r0, r4
   139b0:	bl	12e40 <__assert_fail@plt+0x206c>
   139b4:	subs	r7, r0, #0
   139b8:	beq	139f8 <__assert_fail@plt+0x2c24>
   139bc:	ldr	r2, [sp, #28]
   139c0:	ldr	r3, [sp, #44]	; 0x2c
   139c4:	cmp	r2, r3
   139c8:	bhi	13a78 <__assert_fail@plt+0x2ca4>
   139cc:	ldr	r2, [r4, #24]
   139d0:	add	r1, fp, #2
   139d4:	add	r1, r1, r3
   139d8:	mov	r0, r4
   139dc:	str	r2, [sp, #44]	; 0x2c
   139e0:	str	r3, [sp, #28]
   139e4:	bl	133b0 <__assert_fail@plt+0x25dc>
   139e8:	ldr	r3, [sp, #28]
   139ec:	ldr	r2, [sp, #44]	; 0x2c
   139f0:	cmp	r0, #0
   139f4:	bne	13a40 <__assert_fail@plt+0x2c6c>
   139f8:	ldr	r3, [sp, #12]
   139fc:	mov	r0, r7
   13a00:	ldr	r8, [r3]
   13a04:	bl	12b24 <__assert_fail@plt+0x1d50>
   13a08:	mov	r0, r6
   13a0c:	bl	12ef8 <__assert_fail@plt+0x2124>
   13a10:	ldr	r0, [r5, #12]
   13a14:	bl	10dbc <closedir@plt>
   13a18:	mov	r3, #7
   13a1c:	strh	r3, [r5, #56]	; 0x38
   13a20:	ldr	r3, [r4, #48]	; 0x30
   13a24:	mov	r6, #0
   13a28:	orr	r3, r3, #8192	; 0x2000
   13a2c:	str	r6, [r5, #12]
   13a30:	str	r3, [r4, #48]	; 0x30
   13a34:	ldr	r3, [sp, #12]
   13a38:	str	r8, [r3]
   13a3c:	b	135b8 <__assert_fail@plt+0x27e4>
   13a40:	ldr	r1, [r4, #24]
   13a44:	cmp	r2, r1
   13a48:	ldreq	r0, [sp, #24]
   13a4c:	beq	13a64 <__assert_fail@plt+0x2c90>
   13a50:	ldr	r2, [r4, #48]	; 0x30
   13a54:	tst	r2, #4
   13a58:	ldrne	r2, [sp, #16]
   13a5c:	addne	r2, r1, r2
   13a60:	strne	r2, [sp]
   13a64:	ldr	r2, [r4, #36]	; 0x24
   13a68:	ldr	r1, [sp, #16]
   13a6c:	str	r0, [sp, #24]
   13a70:	sub	r2, r2, r1
   13a74:	str	r2, [sp, #28]
   13a78:	ldr	r2, [sp, #16]
   13a7c:	adds	r3, r2, r3
   13a80:	bcc	13ac8 <__assert_fail@plt+0x2cf4>
   13a84:	mov	r0, r7
   13a88:	bl	12b24 <__assert_fail@plt+0x1d50>
   13a8c:	mov	r0, r6
   13a90:	bl	12ef8 <__assert_fail@plt+0x2124>
   13a94:	ldr	r0, [r5, #12]
   13a98:	bl	10dbc <closedir@plt>
   13a9c:	mov	r3, #7
   13aa0:	strh	r3, [r5, #56]	; 0x38
   13aa4:	ldr	r3, [r4, #48]	; 0x30
   13aa8:	ldr	r2, [sp, #12]
   13aac:	orr	r3, r3, #8192	; 0x2000
   13ab0:	mov	r6, #0
   13ab4:	str	r6, [r5, #12]
   13ab8:	str	r3, [r4, #48]	; 0x30
   13abc:	mov	r3, #36	; 0x24
   13ac0:	str	r3, [r2]
   13ac4:	b	135b8 <__assert_fail@plt+0x27e4>
   13ac8:	ldr	r2, [sp, #40]	; 0x28
   13acc:	str	r2, [r7, #48]	; 0x30
   13ad0:	ldr	r2, [r4]
   13ad4:	str	r3, [r7, #40]	; 0x28
   13ad8:	str	r2, [r7, #4]
   13adc:	ldrd	r2, [sl]
   13ae0:	strd	r2, [r7, #160]	; 0xa0
   13ae4:	ldr	r3, [r4, #48]	; 0x30
   13ae8:	tst	r3, #4
   13aec:	addeq	r3, r7, #168	; 0xa8
   13af0:	streq	r3, [r7, #24]
   13af4:	beq	13b14 <__assert_fail@plt+0x2d40>
   13af8:	ldr	r3, [r7, #28]
   13afc:	ldr	r2, [r7, #52]	; 0x34
   13b00:	str	r3, [r7, #24]
   13b04:	add	r2, r2, #1
   13b08:	add	r1, r7, #168	; 0xa8
   13b0c:	ldr	r0, [sp]
   13b10:	bl	10bac <memmove@plt>
   13b14:	ldr	r3, [r4, #44]	; 0x2c
   13b18:	cmp	r3, #0
   13b1c:	beq	13b2c <__assert_fail@plt+0x2d58>
   13b20:	ldr	r2, [r4, #48]	; 0x30
   13b24:	ands	r2, r2, #1024	; 0x400
   13b28:	beq	13c14 <__assert_fail@plt+0x2e40>
   13b2c:	ldr	r3, [r4, #48]	; 0x30
   13b30:	ands	r1, r3, #8
   13b34:	beq	13b58 <__assert_fail@plt+0x2d84>
   13b38:	ldrb	r2, [sl, #18]
   13b3c:	ands	r1, r2, #251	; 0xfb
   13b40:	beq	13b58 <__assert_fail@plt+0x2d84>
   13b44:	lsr	r3, r3, #4
   13b48:	and	r3, r3, #1
   13b4c:	cmp	r2, #10
   13b50:	moveq	r1, r3
   13b54:	orrne	r1, r3, #1
   13b58:	mov	r3, #11
   13b5c:	strh	r3, [r7, #56]	; 0x38
   13b60:	ldrb	r2, [sl, #18]
   13b64:	sub	r2, r2, #1
   13b68:	cmp	r2, r3
   13b6c:	lslls	r2, r2, #1
   13b70:	ldrls	r3, [pc, #520]	; 13d80 <__assert_fail@plt+0x2fac>
   13b74:	movhi	r3, #0
   13b78:	ldrhls	r3, [r3, r2]
   13b7c:	cmp	r1, #0
   13b80:	movne	r2, #1
   13b84:	str	r3, [r7, #80]	; 0x50
   13b88:	moveq	r2, #2
   13b8c:	mov	r3, #0
   13b90:	strd	r2, [r7, #112]	; 0x70
   13b94:	mov	r3, #0
   13b98:	cmp	r6, r3
   13b9c:	str	r3, [r7, #8]
   13ba0:	ldrne	r3, [sp, #32]
   13ba4:	moveq	r6, r7
   13ba8:	strne	r7, [r3, #8]
   13bac:	ldr	r3, [pc, #464]	; 13d84 <__assert_fail@plt+0x2fb0>
   13bb0:	cmp	r8, r3
   13bb4:	bne	13bfc <__assert_fail@plt+0x2e28>
   13bb8:	ldr	r3, [r4, #44]	; 0x2c
   13bbc:	cmp	r3, #0
   13bc0:	bne	13bfc <__assert_fail@plt+0x2e28>
   13bc4:	ldr	r1, [sp, #52]	; 0x34
   13bc8:	mov	r0, r5
   13bcc:	bl	12f90 <__assert_fail@plt+0x21bc>
   13bd0:	ldr	r3, [pc, #404]	; 13d6c <__assert_fail@plt+0x2f98>
   13bd4:	cmp	r0, r3
   13bd8:	beq	13bf8 <__assert_fail@plt+0x2e24>
   13bdc:	ldr	r3, [pc, #420]	; 13d88 <__assert_fail@plt+0x2fb4>
   13be0:	cmp	r0, r3
   13be4:	beq	13bf8 <__assert_fail@plt+0x2e24>
   13be8:	ldr	r3, [pc, #384]	; 13d70 <__assert_fail@plt+0x2f9c>
   13bec:	cmp	r0, r3
   13bf0:	movne	r9, #1
   13bf4:	bne	13bfc <__assert_fail@plt+0x2e28>
   13bf8:	mov	r9, #0
   13bfc:	ldr	r3, [sp, #36]	; 0x24
   13c00:	add	r8, r8, #1
   13c04:	cmp	r3, r8
   13c08:	bls	136e0 <__assert_fail@plt+0x290c>
   13c0c:	str	r7, [sp, #32]
   13c10:	b	136d4 <__assert_fail@plt+0x2900>
   13c14:	mov	r1, r7
   13c18:	mov	r0, r4
   13c1c:	bl	12c40 <__assert_fail@plt+0x1e6c>
   13c20:	strh	r0, [r7, #56]	; 0x38
   13c24:	b	13b94 <__assert_fail@plt+0x2dc0>
   13c28:	ldr	r1, [r4, #24]
   13c2c:	ldr	r3, [r4, #4]
   13c30:	cmp	r3, #0
   13c34:	bne	13c7c <__assert_fail@plt+0x2ea8>
   13c38:	mov	r3, r6
   13c3c:	ldr	r2, [r3, #48]	; 0x30
   13c40:	cmp	r2, #0
   13c44:	blt	136ec <__assert_fail@plt+0x2918>
   13c48:	ldr	r2, [r3, #24]
   13c4c:	add	r0, r3, #168	; 0xa8
   13c50:	cmp	r2, r0
   13c54:	ldrne	r0, [r3, #28]
   13c58:	str	r1, [r3, #28]
   13c5c:	subne	r2, r2, r0
   13c60:	addne	r2, r1, r2
   13c64:	strne	r2, [r3, #24]
   13c68:	ldr	r2, [r3, #8]
   13c6c:	cmp	r2, #0
   13c70:	ldreq	r2, [r3, #4]
   13c74:	mov	r3, r2
   13c78:	b	13c3c <__assert_fail@plt+0x2e68>
   13c7c:	ldr	r2, [r3, #24]
   13c80:	add	r0, r3, #168	; 0xa8
   13c84:	cmp	r2, r0
   13c88:	ldrne	r0, [r3, #28]
   13c8c:	str	r1, [r3, #28]
   13c90:	subne	r2, r2, r0
   13c94:	addne	r2, r1, r2
   13c98:	strne	r2, [r3, #24]
   13c9c:	ldr	r3, [r3, #8]
   13ca0:	b	13c30 <__assert_fail@plt+0x2e5c>
   13ca4:	ldr	r3, [r4, #36]	; 0x24
   13ca8:	ldr	r2, [sp, #16]
   13cac:	cmp	r8, #0
   13cb0:	cmpne	r3, r2
   13cb4:	ldreq	r3, [sp]
   13cb8:	subeq	r3, r3, #1
   13cbc:	streq	r3, [sp]
   13cc0:	ldr	r2, [sp]
   13cc4:	mov	r3, #0
   13cc8:	strb	r3, [r2]
   13ccc:	b	136f8 <__assert_fail@plt+0x2924>
   13cd0:	ldr	r3, [pc, #180]	; 13d8c <__assert_fail@plt+0x2fb8>
   13cd4:	mvn	r2, #0
   13cd8:	ldr	r1, [r5, #4]
   13cdc:	mov	r0, r4
   13ce0:	bl	13160 <__assert_fail@plt+0x238c>
   13ce4:	b	13738 <__assert_fail@plt+0x2964>
   13ce8:	cmp	r8, #0
   13cec:	bne	13d14 <__assert_fail@plt+0x2f40>
   13cf0:	ldr	r3, [sp, #8]
   13cf4:	cmp	r3, #3
   13cf8:	bne	1375c <__assert_fail@plt+0x2988>
   13cfc:	ldrh	r3, [r5, #56]	; 0x38
   13d00:	cmp	r3, #4
   13d04:	cmpne	r3, #7
   13d08:	movne	r3, #6
   13d0c:	strhne	r3, [r5, #56]	; 0x38
   13d10:	b	1375c <__assert_fail@plt+0x2988>
   13d14:	cmp	r9, #0
   13d18:	beq	13d40 <__assert_fail@plt+0x2f6c>
   13d1c:	ldr	r3, [pc, #108]	; 13d90 <__assert_fail@plt+0x2fbc>
   13d20:	mov	r1, r6
   13d24:	str	r3, [r4, #44]	; 0x2c
   13d28:	mov	r2, r8
   13d2c:	mov	r0, r4
   13d30:	bl	12d78 <__assert_fail@plt+0x1fa4>
   13d34:	mov	r3, #0
   13d38:	str	r3, [r4, #44]	; 0x2c
   13d3c:	mov	r6, r0
   13d40:	ldr	r3, [r4, #44]	; 0x2c
   13d44:	cmp	r3, #0
   13d48:	cmpne	r8, #1
   13d4c:	bls	135b8 <__assert_fail@plt+0x27e4>
   13d50:	mov	r1, r6
   13d54:	mov	r2, r8
   13d58:	mov	r0, r4
   13d5c:	bl	12d78 <__assert_fail@plt+0x1fa4>
   13d60:	mov	r6, r0
   13d64:	b	135b8 <__assert_fail@plt+0x27e4>
   13d68:	andeq	r8, r1, r0, lsr #13
   13d6c:	andeq	r6, r0, r9, ror #18
   13d70:			; <UNDEFINED> instruction: 0xff534d42
   13d74:	andeq	r0, r0, r6, lsl #8
   13d78:	andeq	r9, r0, r0, lsr #31
   13d7c:	movtpl	r4, #24911	; 0x614f
   13d80:	andeq	r6, r1, r6, lsr #30
   13d84:	andeq	r2, r0, r0, lsl r7
   13d88:			; <UNDEFINED> instruction: 0x01021994
   13d8c:	andeq	r6, r1, lr, lsr pc
   13d90:	andeq	r2, r1, ip, lsl #24
   13d94:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d98:	bic	r4, r1, #4080	; 0xff0
   13d9c:	bic	r4, r4, #15
   13da0:	cmp	r4, #0
   13da4:	beq	13dbc <__assert_fail@plt+0x2fe8>
   13da8:	bl	10cc0 <__errno_location@plt>
   13dac:	mov	r3, #22
   13db0:	str	r3, [r0]
   13db4:	mov	r4, #0
   13db8:	b	13dd8 <__assert_fail@plt+0x3004>
   13dbc:	and	r3, r1, #516	; 0x204
   13dc0:	cmp	r3, #516	; 0x204
   13dc4:	mov	r5, r1
   13dc8:	bne	13de4 <__assert_fail@plt+0x3010>
   13dcc:	bl	10cc0 <__errno_location@plt>
   13dd0:	mov	r3, #22
   13dd4:	str	r3, [r0]
   13dd8:	mov	r0, r4
   13ddc:	add	sp, sp, #12
   13de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de4:	ands	r4, r1, #18
   13de8:	beq	13dcc <__assert_fail@plt+0x2ff8>
   13dec:	mov	fp, r0
   13df0:	mov	r1, #96	; 0x60
   13df4:	mov	r0, #1
   13df8:	mov	sl, r2
   13dfc:	bl	16300 <__assert_fail@plt+0x552c>
   13e00:	subs	r4, r0, #0
   13e04:	beq	13dd8 <__assert_fail@plt+0x3004>
   13e08:	tst	r5, #2
   13e0c:	bicne	r3, r5, #512	; 0x200
   13e10:	orrne	r3, r3, #4
   13e14:	sub	r7, fp, #4
   13e18:	mov	r6, #0
   13e1c:	strne	r3, [r4, #48]	; 0x30
   13e20:	mvn	r3, #99	; 0x63
   13e24:	str	sl, [r4, #44]	; 0x2c
   13e28:	streq	r5, [r4, #48]	; 0x30
   13e2c:	str	r3, [r4, #32]
   13e30:	ldr	r9, [r7, #4]!
   13e34:	cmp	r9, #0
   13e38:	bne	13f60 <__assert_fail@plt+0x318c>
   13e3c:	add	r1, r6, #1
   13e40:	cmp	r1, #4096	; 0x1000
   13e44:	movcc	r1, #4096	; 0x1000
   13e48:	mov	r0, r4
   13e4c:	bl	133b0 <__assert_fail@plt+0x25dc>
   13e50:	subs	r3, r0, #0
   13e54:	str	r3, [sp]
   13e58:	beq	14074 <__assert_fail@plt+0x32a0>
   13e5c:	ldr	r7, [fp]
   13e60:	cmp	r7, #0
   13e64:	beq	13e88 <__assert_fail@plt+0x30b4>
   13e68:	mov	r2, r9
   13e6c:	ldr	r1, [pc, #524]	; 14080 <__assert_fail@plt+0x32ac>
   13e70:	mov	r0, r4
   13e74:	bl	12e40 <__assert_fail@plt+0x206c>
   13e78:	subs	r7, r0, #0
   13e7c:	beq	1406c <__assert_fail@plt+0x3298>
   13e80:	mvn	r3, #0
   13e84:	str	r3, [r7, #48]	; 0x30
   13e88:	cmp	sl, #0
   13e8c:	lsr	r5, r5, #11
   13e90:	ldrne	r8, [r4, #48]	; 0x30
   13e94:	eor	r5, r5, #1
   13e98:	lsrne	r8, r8, #10
   13e9c:	andne	r3, r8, #1
   13ea0:	mov	r8, #0
   13ea4:	mov	r9, r8
   13ea8:	mov	r6, r8
   13eac:	strne	r3, [sp]
   13eb0:	and	r3, r5, #1
   13eb4:	str	r3, [sp, #4]
   13eb8:	ldr	r5, [fp, r9, lsl #2]
   13ebc:	cmp	r5, #0
   13ec0:	bne	13f74 <__assert_fail@plt+0x31a0>
   13ec4:	cmp	sl, #0
   13ec8:	cmpne	r9, #1
   13ecc:	bls	13ee4 <__assert_fail@plt+0x3110>
   13ed0:	mov	r1, r6
   13ed4:	mov	r2, r9
   13ed8:	mov	r0, r4
   13edc:	bl	12d78 <__assert_fail@plt+0x1fa4>
   13ee0:	mov	r6, r0
   13ee4:	mov	r2, #0
   13ee8:	ldr	r1, [pc, #400]	; 14080 <__assert_fail@plt+0x32ac>
   13eec:	mov	r0, r4
   13ef0:	bl	12e40 <__assert_fail@plt+0x206c>
   13ef4:	cmp	r0, #0
   13ef8:	str	r0, [r4]
   13efc:	beq	1405c <__assert_fail@plt+0x3288>
   13f00:	mov	r3, #9
   13f04:	strh	r3, [r0, #56]	; 0x38
   13f08:	mov	r3, #1
   13f0c:	str	r6, [r0, #8]
   13f10:	str	r3, [r0, #48]	; 0x30
   13f14:	mov	r0, r4
   13f18:	bl	1341c <__assert_fail@plt+0x2648>
   13f1c:	cmp	r0, #0
   13f20:	beq	1405c <__assert_fail@plt+0x3288>
   13f24:	ldr	r3, [r4, #48]	; 0x30
   13f28:	tst	r3, #516	; 0x204
   13f2c:	bne	13f50 <__assert_fail@plt+0x317c>
   13f30:	ldr	r1, [pc, #332]	; 14084 <__assert_fail@plt+0x32b0>
   13f34:	mov	r0, r4
   13f38:	bl	12eb4 <__assert_fail@plt+0x20e0>
   13f3c:	cmp	r0, #0
   13f40:	str	r0, [r4, #28]
   13f44:	ldrlt	r3, [r4, #48]	; 0x30
   13f48:	orrlt	r3, r3, #4
   13f4c:	strlt	r3, [r4, #48]	; 0x30
   13f50:	mvn	r1, #0
   13f54:	add	r0, r4, #60	; 0x3c
   13f58:	bl	160ec <__assert_fail@plt+0x5318>
   13f5c:	b	13dd8 <__assert_fail@plt+0x3004>
   13f60:	mov	r0, r9
   13f64:	bl	10c90 <strlen@plt>
   13f68:	cmp	r6, r0
   13f6c:	movcc	r6, r0
   13f70:	b	13e30 <__assert_fail@plt+0x305c>
   13f74:	mov	r0, r5
   13f78:	bl	10c90 <strlen@plt>
   13f7c:	ldr	r1, [sp, #4]
   13f80:	cmp	r0, #2
   13f84:	movls	r1, #0
   13f88:	andhi	r1, r1, #1
   13f8c:	cmp	r1, #0
   13f90:	mov	r2, r0
   13f94:	beq	13fc4 <__assert_fail@plt+0x31f0>
   13f98:	sub	r0, r0, #1
   13f9c:	add	r1, r5, r0
   13fa0:	ldrb	r0, [r5, r0]
   13fa4:	cmp	r0, #47	; 0x2f
   13fa8:	bne	13fc4 <__assert_fail@plt+0x31f0>
   13fac:	ldrb	r0, [r1, #-1]!
   13fb0:	cmp	r0, #47	; 0x2f
   13fb4:	bne	13fc4 <__assert_fail@plt+0x31f0>
   13fb8:	sub	r2, r2, #1
   13fbc:	cmp	r2, #1
   13fc0:	bne	13fac <__assert_fail@plt+0x31d8>
   13fc4:	mov	r1, r5
   13fc8:	mov	r0, r4
   13fcc:	bl	12e40 <__assert_fail@plt+0x206c>
   13fd0:	subs	r5, r0, #0
   13fd4:	beq	1405c <__assert_fail@plt+0x3288>
   13fd8:	mov	r2, #0
   13fdc:	str	r2, [r5, #48]	; 0x30
   13fe0:	add	r2, r5, #168	; 0xa8
   13fe4:	str	r2, [r5, #24]
   13fe8:	ldr	r2, [sp]
   13fec:	str	r7, [r5, #4]
   13ff0:	cmp	r6, #0
   13ff4:	moveq	r2, #0
   13ff8:	andne	r2, r2, #1
   13ffc:	cmp	r2, #0
   14000:	beq	14048 <__assert_fail@plt+0x3274>
   14004:	mov	r0, #2
   14008:	mov	r1, #0
   1400c:	mov	r2, #11
   14010:	strh	r2, [r5, #56]	; 0x38
   14014:	strd	r0, [r5, #112]	; 0x70
   14018:	cmp	sl, #0
   1401c:	strne	r6, [r5, #8]
   14020:	bne	1403c <__assert_fail@plt+0x3268>
   14024:	cmp	r6, #0
   14028:	str	sl, [r5, #8]
   1402c:	moveq	r8, r5
   14030:	strne	r5, [r8, #8]
   14034:	movne	r8, r5
   14038:	movne	r5, r6
   1403c:	add	r9, r9, #1
   14040:	mov	r6, r5
   14044:	b	13eb8 <__assert_fail@plt+0x30e4>
   14048:	mov	r1, r5
   1404c:	mov	r0, r4
   14050:	bl	12c40 <__assert_fail@plt+0x1e6c>
   14054:	strh	r0, [r5, #56]	; 0x38
   14058:	b	14018 <__assert_fail@plt+0x3244>
   1405c:	mov	r0, r6
   14060:	bl	12ef8 <__assert_fail@plt+0x2124>
   14064:	mov	r0, r7
   14068:	bl	12b24 <__assert_fail@plt+0x1d50>
   1406c:	ldr	r0, [r4, #24]
   14070:	bl	12b24 <__assert_fail@plt+0x1d50>
   14074:	mov	r0, r4
   14078:	bl	12b24 <__assert_fail@plt+0x1d50>
   1407c:	b	13db4 <__assert_fail@plt+0x2fe0>
   14080:	andeq	r6, r1, r5, ror #29
   14084:	andeq	r6, r1, pc, lsr pc
   14088:	push	{r4, r5, r6, lr}
   1408c:	mov	r4, r0
   14090:	ldr	r0, [r0]
   14094:	cmp	r0, #0
   14098:	bne	14130 <__assert_fail@plt+0x335c>
   1409c:	ldr	r0, [r4, #4]
   140a0:	cmp	r0, #0
   140a4:	beq	140ac <__assert_fail@plt+0x32d8>
   140a8:	bl	12ef8 <__assert_fail@plt+0x2124>
   140ac:	ldr	r0, [r4, #8]
   140b0:	bl	12b24 <__assert_fail@plt+0x1d50>
   140b4:	ldr	r0, [r4, #24]
   140b8:	bl	12b24 <__assert_fail@plt+0x1d50>
   140bc:	ldr	r3, [r4, #48]	; 0x30
   140c0:	tst	r3, #512	; 0x200
   140c4:	beq	1415c <__assert_fail@plt+0x3388>
   140c8:	ldr	r0, [r4, #32]
   140cc:	cmp	r0, #0
   140d0:	bge	14144 <__assert_fail@plt+0x3370>
   140d4:	mov	r5, #0
   140d8:	add	r0, r4, #60	; 0x3c
   140dc:	bl	12f5c <__assert_fail@plt+0x2188>
   140e0:	ldr	r0, [r4, #52]	; 0x34
   140e4:	cmp	r0, #0
   140e8:	beq	140f0 <__assert_fail@plt+0x331c>
   140ec:	bl	15c58 <__assert_fail@plt+0x4e84>
   140f0:	mov	r0, r4
   140f4:	bl	12f30 <__assert_fail@plt+0x215c>
   140f8:	mov	r0, r4
   140fc:	bl	12b24 <__assert_fail@plt+0x1d50>
   14100:	cmp	r5, #0
   14104:	beq	14114 <__assert_fail@plt+0x3340>
   14108:	bl	10cc0 <__errno_location@plt>
   1410c:	str	r5, [r0]
   14110:	mvn	r5, #0
   14114:	mov	r0, r5
   14118:	pop	{r4, r5, r6, pc}
   1411c:	ldr	r5, [r0, #8]
   14120:	cmp	r5, #0
   14124:	ldreq	r5, [r0, #4]
   14128:	bl	12b24 <__assert_fail@plt+0x1d50>
   1412c:	mov	r0, r5
   14130:	ldr	r3, [r0, #48]	; 0x30
   14134:	cmp	r3, #0
   14138:	bge	1411c <__assert_fail@plt+0x3348>
   1413c:	bl	12b24 <__assert_fail@plt+0x1d50>
   14140:	b	1409c <__assert_fail@plt+0x32c8>
   14144:	bl	10da4 <close@plt>
   14148:	cmp	r0, #0
   1414c:	beq	140d4 <__assert_fail@plt+0x3300>
   14150:	bl	10cc0 <__errno_location@plt>
   14154:	ldr	r5, [r0]
   14158:	b	140d8 <__assert_fail@plt+0x3304>
   1415c:	tst	r3, #4
   14160:	bne	140d4 <__assert_fail@plt+0x3300>
   14164:	ldr	r0, [r4, #28]
   14168:	bl	10d50 <fchdir@plt>
   1416c:	subs	r5, r0, #0
   14170:	beq	1417c <__assert_fail@plt+0x33a8>
   14174:	bl	10cc0 <__errno_location@plt>
   14178:	ldr	r5, [r0]
   1417c:	ldr	r0, [r4, #28]
   14180:	bl	10da4 <close@plt>
   14184:	clz	r3, r5
   14188:	lsr	r3, r3, #5
   1418c:	cmp	r0, #0
   14190:	moveq	r3, #0
   14194:	cmp	r3, #0
   14198:	beq	140d8 <__assert_fail@plt+0x3304>
   1419c:	b	14150 <__assert_fail@plt+0x337c>
   141a0:	push	{r4, r5, r6, r7, r8, lr}
   141a4:	ldr	r4, [r0]
   141a8:	cmp	r4, #0
   141ac:	beq	144ac <__assert_fail@plt+0x36d8>
   141b0:	ldr	r1, [r0, #48]	; 0x30
   141b4:	mov	r5, r0
   141b8:	ands	r2, r1, #8192	; 0x2000
   141bc:	bne	144ac <__assert_fail@plt+0x36d8>
   141c0:	ldrh	r3, [r4, #60]	; 0x3c
   141c4:	mov	ip, #3
   141c8:	strh	ip, [r4, #60]	; 0x3c
   141cc:	cmp	r3, #1
   141d0:	bne	141e8 <__assert_fail@plt+0x3414>
   141d4:	mov	r1, r4
   141d8:	bl	12c40 <__assert_fail@plt+0x1e6c>
   141dc:	strh	r0, [r4, #56]	; 0x38
   141e0:	mov	r0, r4
   141e4:	pop	{r4, r5, r6, r7, r8, pc}
   141e8:	cmp	r3, #2
   141ec:	ldrh	r2, [r4, #56]	; 0x38
   141f0:	bne	142d0 <__assert_fail@plt+0x34fc>
   141f4:	sub	ip, r2, #12
   141f8:	cmp	ip, #1
   141fc:	bhi	142d0 <__assert_fail@plt+0x34fc>
   14200:	mov	r2, #1
   14204:	mov	r1, r4
   14208:	bl	12c40 <__assert_fail@plt+0x1e6c>
   1420c:	cmp	r0, #1
   14210:	strh	r0, [r4, #56]	; 0x38
   14214:	bne	1425c <__assert_fail@plt+0x3488>
   14218:	ldr	r3, [r5, #48]	; 0x30
   1421c:	tst	r3, #4
   14220:	bne	1425c <__assert_fail@plt+0x3488>
   14224:	ldr	r1, [pc, #1332]	; 14760 <__assert_fail@plt+0x398c>
   14228:	mov	r0, r5
   1422c:	bl	12eb4 <__assert_fail@plt+0x20e0>
   14230:	cmp	r0, #0
   14234:	str	r0, [r4, #36]	; 0x24
   14238:	ldrhge	r3, [r4, #58]	; 0x3a
   1423c:	orrge	r3, r3, #2
   14240:	strhge	r3, [r4, #58]	; 0x3a
   14244:	bge	1425c <__assert_fail@plt+0x3488>
   14248:	bl	10cc0 <__errno_location@plt>
   1424c:	ldr	r3, [r0]
   14250:	str	r3, [r4, #32]
   14254:	mov	r3, #7
   14258:	strh	r3, [r4, #56]	; 0x38
   1425c:	ldrh	r3, [r4, #56]	; 0x38
   14260:	str	r4, [r5]
   14264:	cmp	r3, #11
   14268:	bne	14290 <__assert_fail@plt+0x34bc>
   1426c:	ldrd	r2, [r4, #112]	; 0x70
   14270:	cmp	r3, #0
   14274:	cmpeq	r2, #2
   14278:	bne	14600 <__assert_fail@plt+0x382c>
   1427c:	mov	r2, #0
   14280:	mov	r1, r4
   14284:	mov	r0, r5
   14288:	bl	12c40 <__assert_fail@plt+0x1e6c>
   1428c:	strh	r0, [r4, #56]	; 0x38
   14290:	ldrh	r3, [r4, #56]	; 0x38
   14294:	cmp	r3, #1
   14298:	bne	141e0 <__assert_fail@plt+0x340c>
   1429c:	ldr	r3, [r4, #48]	; 0x30
   142a0:	cmp	r3, #0
   142a4:	ldrdeq	r2, [r4, #64]	; 0x40
   142a8:	strdeq	r2, [r5, #16]
   142ac:	mov	r0, r5
   142b0:	mov	r1, r4
   142b4:	bl	13498 <__assert_fail@plt+0x26c4>
   142b8:	subs	r5, r0, #0
   142bc:	bne	141e0 <__assert_fail@plt+0x340c>
   142c0:	bl	10cc0 <__errno_location@plt>
   142c4:	mov	r3, #12
   142c8:	str	r3, [r0]
   142cc:	b	144ac <__assert_fail@plt+0x36d8>
   142d0:	cmp	r2, #1
   142d4:	movne	r6, r4
   142d8:	bne	14460 <__assert_fail@plt+0x368c>
   142dc:	cmp	r3, #4
   142e0:	beq	14300 <__assert_fail@plt+0x352c>
   142e4:	tst	r1, #64	; 0x40
   142e8:	beq	14344 <__assert_fail@plt+0x3570>
   142ec:	ldrd	r6, [r4, #64]	; 0x40
   142f0:	ldrd	r2, [r5, #16]
   142f4:	cmp	r7, r3
   142f8:	cmpeq	r6, r2
   142fc:	beq	14344 <__assert_fail@plt+0x3570>
   14300:	ldrh	r3, [r4, #58]	; 0x3a
   14304:	tst	r3, #2
   14308:	beq	14314 <__assert_fail@plt+0x3540>
   1430c:	ldr	r0, [r4, #36]	; 0x24
   14310:	bl	10da4 <close@plt>
   14314:	ldr	r0, [r5, #4]
   14318:	cmp	r0, #0
   1431c:	beq	1432c <__assert_fail@plt+0x3558>
   14320:	bl	12ef8 <__assert_fail@plt+0x2124>
   14324:	mov	r3, #0
   14328:	str	r3, [r5, #4]
   1432c:	mov	r3, #6
   14330:	strh	r3, [r4, #56]	; 0x38
   14334:	mov	r1, r4
   14338:	mov	r0, r5
   1433c:	bl	132fc <__assert_fail@plt+0x2528>
   14340:	b	141e0 <__assert_fail@plt+0x340c>
   14344:	ldr	r0, [r5, #4]
   14348:	cmp	r0, #0
   1434c:	beq	1436c <__assert_fail@plt+0x3598>
   14350:	tst	r1, #4096	; 0x1000
   14354:	beq	1436c <__assert_fail@plt+0x3598>
   14358:	bic	r1, r1, #4096	; 0x1000
   1435c:	str	r1, [r5, #48]	; 0x30
   14360:	bl	12ef8 <__assert_fail@plt+0x2124>
   14364:	mov	r3, #0
   14368:	str	r3, [r5, #4]
   1436c:	ldr	r3, [r5, #4]
   14370:	cmp	r3, #0
   14374:	beq	1441c <__assert_fail@plt+0x3648>
   14378:	ldr	r3, [r4, #24]
   1437c:	mvn	r2, #0
   14380:	mov	r1, r4
   14384:	mov	r0, r5
   14388:	bl	13160 <__assert_fail@plt+0x238c>
   1438c:	cmp	r0, #0
   14390:	beq	143b8 <__assert_fail@plt+0x35e4>
   14394:	bl	10cc0 <__errno_location@plt>
   14398:	ldr	r3, [r0]
   1439c:	str	r3, [r4, #32]
   143a0:	ldrh	r3, [r4, #58]	; 0x3a
   143a4:	orr	r3, r3, #1
   143a8:	strh	r3, [r4, #58]	; 0x3a
   143ac:	ldr	r3, [r5, #4]
   143b0:	cmp	r3, #0
   143b4:	bne	14408 <__assert_fail@plt+0x3634>
   143b8:	mov	r3, #0
   143bc:	ldr	r4, [r5, #4]
   143c0:	str	r3, [r5, #4]
   143c4:	ldr	r0, [r4, #4]
   143c8:	ldr	r2, [r5, #24]
   143cc:	ldr	r1, [r0, #40]	; 0x28
   143d0:	ldr	r0, [r0, #28]
   143d4:	sub	r3, r1, #1
   143d8:	ldrb	r0, [r0, r3]
   143dc:	cmp	r0, #47	; 0x2f
   143e0:	movne	r3, r1
   143e4:	mov	r1, #47	; 0x2f
   143e8:	add	r0, r2, r3
   143ec:	strb	r1, [r2, r3]
   143f0:	ldr	r2, [r4, #52]	; 0x34
   143f4:	add	r1, r4, #168	; 0xa8
   143f8:	add	r2, r2, #1
   143fc:	add	r0, r0, #1
   14400:	bl	10bac <memmove@plt>
   14404:	b	1425c <__assert_fail@plt+0x3488>
   14408:	ldr	r2, [r3, #4]
   1440c:	ldr	r2, [r2, #24]
   14410:	str	r2, [r3, #24]
   14414:	ldr	r3, [r3, #8]
   14418:	b	143b0 <__assert_fail@plt+0x35dc>
   1441c:	mov	r1, #3
   14420:	mov	r0, r5
   14424:	bl	13550 <__assert_fail@plt+0x277c>
   14428:	cmp	r0, #0
   1442c:	str	r0, [r5, #4]
   14430:	bne	143b8 <__assert_fail@plt+0x35e4>
   14434:	ldr	r3, [r5, #48]	; 0x30
   14438:	tst	r3, #8192	; 0x2000
   1443c:	bne	144ac <__assert_fail@plt+0x36d8>
   14440:	ldr	r3, [r4, #32]
   14444:	cmp	r3, #0
   14448:	beq	14334 <__assert_fail@plt+0x3560>
   1444c:	ldrh	r3, [r4, #56]	; 0x38
   14450:	cmp	r3, #4
   14454:	beq	14334 <__assert_fail@plt+0x3560>
   14458:	mov	r3, #7
   1445c:	b	14330 <__assert_fail@plt+0x355c>
   14460:	ldr	r4, [r4, #8]
   14464:	cmp	r4, #0
   14468:	bne	144c0 <__assert_fail@plt+0x36ec>
   1446c:	ldr	r3, [r6, #4]
   14470:	ldr	r2, [r3, #12]
   14474:	cmp	r2, #0
   14478:	beq	14610 <__assert_fail@plt+0x383c>
   1447c:	str	r3, [r5]
   14480:	ldr	r2, [r5, #24]
   14484:	ldr	r3, [r3, #40]	; 0x28
   14488:	mov	r1, #3
   1448c:	mov	r0, r5
   14490:	strb	r4, [r2, r3]
   14494:	bl	13550 <__assert_fail@plt+0x277c>
   14498:	subs	r4, r0, #0
   1449c:	bne	144b4 <__assert_fail@plt+0x36e0>
   144a0:	ldr	r3, [r5, #48]	; 0x30
   144a4:	tst	r3, #8192	; 0x2000
   144a8:	beq	14610 <__assert_fail@plt+0x383c>
   144ac:	mov	r4, #0
   144b0:	b	141e0 <__assert_fail@plt+0x340c>
   144b4:	mov	r0, r6
   144b8:	bl	12b24 <__assert_fail@plt+0x1d50>
   144bc:	b	143c4 <__assert_fail@plt+0x35f0>
   144c0:	mov	r0, r6
   144c4:	str	r4, [r5]
   144c8:	bl	12b24 <__assert_fail@plt+0x1d50>
   144cc:	ldr	r6, [r4, #48]	; 0x30
   144d0:	cmp	r6, #0
   144d4:	bne	1457c <__assert_fail@plt+0x37a8>
   144d8:	mov	r0, r5
   144dc:	bl	13110 <__assert_fail@plt+0x233c>
   144e0:	cmp	r0, #0
   144e4:	ldrne	r3, [r5, #48]	; 0x30
   144e8:	orrne	r3, r3, #8192	; 0x2000
   144ec:	strne	r3, [r5, #48]	; 0x30
   144f0:	bne	144ac <__assert_fail@plt+0x36d8>
   144f4:	mov	r0, r5
   144f8:	bl	12f30 <__assert_fail@plt+0x215c>
   144fc:	ldr	r2, [r4, #52]	; 0x34
   14500:	add	r7, r4, #168	; 0xa8
   14504:	str	r2, [r4, #40]	; 0x28
   14508:	mov	r1, r7
   1450c:	add	r2, r2, #1
   14510:	ldr	r0, [r5, #24]
   14514:	bl	10bac <memmove@plt>
   14518:	mov	r1, #47	; 0x2f
   1451c:	mov	r0, r7
   14520:	bl	10cfc <strrchr@plt>
   14524:	cmp	r0, #0
   14528:	beq	14564 <__assert_fail@plt+0x3790>
   1452c:	cmp	r7, r0
   14530:	bne	14540 <__assert_fail@plt+0x376c>
   14534:	ldrb	r3, [r4, #169]	; 0xa9
   14538:	cmp	r3, #0
   1453c:	beq	14564 <__assert_fail@plt+0x3790>
   14540:	add	r6, r0, #1
   14544:	mov	r0, r6
   14548:	bl	10c90 <strlen@plt>
   1454c:	mov	r1, r6
   14550:	mov	r8, r0
   14554:	add	r2, r0, #1
   14558:	mov	r0, r7
   1455c:	bl	10bac <memmove@plt>
   14560:	str	r8, [r4, #52]	; 0x34
   14564:	ldr	r3, [r5, #24]
   14568:	mov	r0, r5
   1456c:	str	r3, [r4, #28]
   14570:	str	r3, [r4, #24]
   14574:	bl	1341c <__assert_fail@plt+0x2648>
   14578:	b	1425c <__assert_fail@plt+0x3488>
   1457c:	ldrh	r3, [r4, #60]	; 0x3c
   14580:	mov	r6, r4
   14584:	cmp	r3, #4
   14588:	beq	14460 <__assert_fail@plt+0x368c>
   1458c:	cmp	r3, #2
   14590:	bne	143c4 <__assert_fail@plt+0x35f0>
   14594:	mov	r2, #1
   14598:	mov	r1, r4
   1459c:	mov	r0, r5
   145a0:	bl	12c40 <__assert_fail@plt+0x1e6c>
   145a4:	cmp	r0, #1
   145a8:	strh	r0, [r4, #56]	; 0x38
   145ac:	bne	145f4 <__assert_fail@plt+0x3820>
   145b0:	ldr	r3, [r5, #48]	; 0x30
   145b4:	tst	r3, #4
   145b8:	bne	145f4 <__assert_fail@plt+0x3820>
   145bc:	ldr	r1, [pc, #412]	; 14760 <__assert_fail@plt+0x398c>
   145c0:	mov	r0, r5
   145c4:	bl	12eb4 <__assert_fail@plt+0x20e0>
   145c8:	cmp	r0, #0
   145cc:	str	r0, [r4, #36]	; 0x24
   145d0:	ldrhge	r3, [r4, #58]	; 0x3a
   145d4:	orrge	r3, r3, #2
   145d8:	strhge	r3, [r4, #58]	; 0x3a
   145dc:	bge	145f4 <__assert_fail@plt+0x3820>
   145e0:	bl	10cc0 <__errno_location@plt>
   145e4:	ldr	r3, [r0]
   145e8:	str	r3, [r4, #32]
   145ec:	mov	r3, #7
   145f0:	strh	r3, [r4, #56]	; 0x38
   145f4:	mov	r3, #3
   145f8:	strh	r3, [r4, #60]	; 0x3c
   145fc:	b	143c4 <__assert_fail@plt+0x35f0>
   14600:	cmp	r3, #0
   14604:	cmpeq	r2, #1
   14608:	beq	14290 <__assert_fail@plt+0x34bc>
   1460c:	bl	10d98 <abort@plt>
   14610:	ldr	r4, [r6, #4]
   14614:	mov	r0, r6
   14618:	str	r4, [r5]
   1461c:	bl	12b24 <__assert_fail@plt+0x1d50>
   14620:	ldr	r3, [r4, #48]	; 0x30
   14624:	cmn	r3, #1
   14628:	bne	14648 <__assert_fail@plt+0x3874>
   1462c:	mov	r0, r4
   14630:	bl	12b24 <__assert_fail@plt+0x1d50>
   14634:	bl	10cc0 <__errno_location@plt>
   14638:	mov	r4, #0
   1463c:	str	r4, [r0]
   14640:	str	r4, [r5]
   14644:	b	141e0 <__assert_fail@plt+0x340c>
   14648:	ldrh	r3, [r4, #56]	; 0x38
   1464c:	cmp	r3, #11
   14650:	beq	1460c <__assert_fail@plt+0x3838>
   14654:	ldr	r3, [r4, #40]	; 0x28
   14658:	ldr	r2, [r5, #24]
   1465c:	mov	r1, #0
   14660:	strb	r1, [r2, r3]
   14664:	ldr	r3, [r4, #48]	; 0x30
   14668:	cmp	r3, r1
   1466c:	bne	1469c <__assert_fail@plt+0x38c8>
   14670:	mov	r0, r5
   14674:	bl	13110 <__assert_fail@plt+0x233c>
   14678:	cmp	r0, #0
   1467c:	beq	146d4 <__assert_fail@plt+0x3900>
   14680:	bl	10cc0 <__errno_location@plt>
   14684:	ldr	r3, [r0]
   14688:	str	r3, [r4, #32]
   1468c:	ldr	r3, [r5, #48]	; 0x30
   14690:	orr	r3, r3, #8192	; 0x2000
   14694:	str	r3, [r5, #48]	; 0x30
   14698:	b	146d4 <__assert_fail@plt+0x3900>
   1469c:	ldrh	r3, [r4, #58]	; 0x3a
   146a0:	tst	r3, #2
   146a4:	beq	14740 <__assert_fail@plt+0x396c>
   146a8:	ldr	r3, [r5, #48]	; 0x30
   146ac:	tst	r3, #4
   146b0:	bne	146cc <__assert_fail@plt+0x38f8>
   146b4:	tst	r3, #512	; 0x200
   146b8:	beq	14714 <__assert_fail@plt+0x3940>
   146bc:	mov	r2, #1
   146c0:	ldr	r1, [r4, #36]	; 0x24
   146c4:	mov	r0, r5
   146c8:	bl	13094 <__assert_fail@plt+0x22c0>
   146cc:	ldr	r0, [r4, #36]	; 0x24
   146d0:	bl	10da4 <close@plt>
   146d4:	ldrh	r3, [r4, #56]	; 0x38
   146d8:	cmp	r3, #2
   146dc:	beq	14704 <__assert_fail@plt+0x3930>
   146e0:	ldr	r3, [r4, #32]
   146e4:	cmp	r3, #0
   146e8:	movne	r3, #7
   146ec:	moveq	r3, #6
   146f0:	strh	r3, [r4, #56]	; 0x38
   146f4:	bne	14704 <__assert_fail@plt+0x3930>
   146f8:	mov	r1, r4
   146fc:	mov	r0, r5
   14700:	bl	132fc <__assert_fail@plt+0x2528>
   14704:	ldr	r3, [r5, #48]	; 0x30
   14708:	tst	r3, #8192	; 0x2000
   1470c:	beq	141e0 <__assert_fail@plt+0x340c>
   14710:	b	144ac <__assert_fail@plt+0x36d8>
   14714:	ldr	r0, [r4, #36]	; 0x24
   14718:	bl	10d50 <fchdir@plt>
   1471c:	cmp	r0, #0
   14720:	beq	146cc <__assert_fail@plt+0x38f8>
   14724:	bl	10cc0 <__errno_location@plt>
   14728:	ldr	r3, [r0]
   1472c:	str	r3, [r4, #32]
   14730:	ldr	r3, [r5, #48]	; 0x30
   14734:	orr	r3, r3, #8192	; 0x2000
   14738:	str	r3, [r5, #48]	; 0x30
   1473c:	b	146cc <__assert_fail@plt+0x38f8>
   14740:	tst	r3, #1
   14744:	bne	146d4 <__assert_fail@plt+0x3900>
   14748:	ldr	r3, [pc, #20]	; 14764 <__assert_fail@plt+0x3990>
   1474c:	mvn	r2, #0
   14750:	ldr	r1, [r4, #4]
   14754:	mov	r0, r5
   14758:	bl	13160 <__assert_fail@plt+0x238c>
   1475c:	b	14678 <__assert_fail@plt+0x38a4>
   14760:	andeq	r6, r1, pc, lsr pc
   14764:	andeq	r6, r1, lr, lsr pc
   14768:	cmp	r2, #4
   1476c:	bls	14788 <__assert_fail@plt+0x39b4>
   14770:	push	{r4, lr}
   14774:	bl	10cc0 <__errno_location@plt>
   14778:	mov	r3, #22
   1477c:	str	r3, [r0]
   14780:	mov	r0, #1
   14784:	pop	{r4, pc}
   14788:	strh	r2, [r1, #60]	; 0x3c
   1478c:	mov	r0, #0
   14790:	bx	lr
   14794:	push	{r4, r5, r6, r7, r8, lr}
   14798:	bics	r8, r1, #4096	; 0x1000
   1479c:	beq	147b4 <__assert_fail@plt+0x39e0>
   147a0:	bl	10cc0 <__errno_location@plt>
   147a4:	mov	r3, #22
   147a8:	str	r3, [r0]
   147ac:	mov	r0, #0
   147b0:	pop	{r4, r5, r6, r7, r8, pc}
   147b4:	mov	r5, r0
   147b8:	ldr	r4, [r0]
   147bc:	mov	r7, r1
   147c0:	bl	10cc0 <__errno_location@plt>
   147c4:	mov	r6, r0
   147c8:	str	r8, [r0]
   147cc:	ldr	r0, [r5, #48]	; 0x30
   147d0:	ands	r0, r0, #8192	; 0x2000
   147d4:	bne	147ac <__assert_fail@plt+0x39d8>
   147d8:	ldrh	r3, [r4, #56]	; 0x38
   147dc:	cmp	r3, #9
   147e0:	bne	147ec <__assert_fail@plt+0x3a18>
   147e4:	ldr	r0, [r4, #8]
   147e8:	pop	{r4, r5, r6, r7, r8, pc}
   147ec:	cmp	r3, #1
   147f0:	popne	{r4, r5, r6, r7, r8, pc}
   147f4:	ldr	r0, [r5, #4]
   147f8:	cmp	r0, #0
   147fc:	beq	14804 <__assert_fail@plt+0x3a30>
   14800:	bl	12ef8 <__assert_fail@plt+0x2124>
   14804:	cmp	r7, #4096	; 0x1000
   14808:	moveq	r8, #2
   1480c:	ldreq	r3, [r5, #48]	; 0x30
   14810:	movne	r8, #1
   14814:	orreq	r3, r3, #4096	; 0x1000
   14818:	streq	r3, [r5, #48]	; 0x30
   1481c:	ldr	r3, [r4, #48]	; 0x30
   14820:	cmp	r3, #0
   14824:	bne	14844 <__assert_fail@plt+0x3a70>
   14828:	ldr	r3, [r4, #24]
   1482c:	ldrb	r3, [r3]
   14830:	cmp	r3, #47	; 0x2f
   14834:	beq	14844 <__assert_fail@plt+0x3a70>
   14838:	ldr	r0, [r5, #48]	; 0x30
   1483c:	ands	r4, r0, #4
   14840:	beq	14858 <__assert_fail@plt+0x3a84>
   14844:	mov	r1, r8
   14848:	mov	r0, r5
   1484c:	bl	13550 <__assert_fail@plt+0x277c>
   14850:	str	r0, [r5, #4]
   14854:	pop	{r4, r5, r6, r7, r8, pc}
   14858:	ldr	r1, [pc, #116]	; 148d4 <__assert_fail@plt+0x3b00>
   1485c:	mov	r0, r5
   14860:	bl	12eb4 <__assert_fail@plt+0x20e0>
   14864:	subs	r7, r0, #0
   14868:	strlt	r4, [r5, #4]
   1486c:	blt	147ac <__assert_fail@plt+0x39d8>
   14870:	mov	r1, r8
   14874:	mov	r0, r5
   14878:	bl	13550 <__assert_fail@plt+0x277c>
   1487c:	str	r0, [r5, #4]
   14880:	ldr	r0, [r5, #48]	; 0x30
   14884:	ands	r4, r0, #512	; 0x200
   14888:	beq	148a4 <__assert_fail@plt+0x3ad0>
   1488c:	mov	r2, #1
   14890:	mov	r1, r7
   14894:	mov	r0, r5
   14898:	bl	13094 <__assert_fail@plt+0x22c0>
   1489c:	ldr	r0, [r5, #4]
   148a0:	pop	{r4, r5, r6, r7, r8, pc}
   148a4:	mov	r0, r7
   148a8:	bl	10d50 <fchdir@plt>
   148ac:	cmp	r0, #0
   148b0:	beq	148c8 <__assert_fail@plt+0x3af4>
   148b4:	ldr	r5, [r6]
   148b8:	mov	r0, r7
   148bc:	bl	10da4 <close@plt>
   148c0:	str	r5, [r6]
   148c4:	b	147ac <__assert_fail@plt+0x39d8>
   148c8:	mov	r0, r7
   148cc:	bl	10da4 <close@plt>
   148d0:	b	1489c <__assert_fail@plt+0x3ac8>
   148d4:	andeq	r6, r1, pc, lsr pc
   148d8:	ldr	r3, [r1, #32]
   148dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148e0:	ldr	r7, [r1, #28]
   148e4:	ldr	r6, [r1]
   148e8:	add	r8, r0, r3, lsl #2
   148ec:	mov	lr, r6
   148f0:	mov	r4, r7
   148f4:	cmp	lr, r3
   148f8:	movle	r2, #0
   148fc:	movgt	r2, #1
   14900:	cmp	r4, r3
   14904:	movge	r2, #0
   14908:	cmp	r2, #0
   1490c:	bne	14924 <__assert_fail@plt+0x3b50>
   14910:	sub	r3, r6, r3
   14914:	add	r3, r3, r7
   14918:	str	r3, [r1, #28]
   1491c:	str	r6, [r1, #32]
   14920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14924:	sub	r2, r3, r4
   14928:	sub	r5, lr, r3
   1492c:	cmp	r5, r2
   14930:	lsl	ip, r4, #2
   14934:	addle	r2, r0, ip
   14938:	movle	r9, r8
   1493c:	movle	ip, #0
   14940:	ble	14974 <__assert_fail@plt+0x3ba0>
   14944:	sub	r2, lr, r2
   14948:	add	ip, r0, ip
   1494c:	add	r5, r0, r2, lsl #2
   14950:	add	lr, r0, lr, lsl #2
   14954:	ldr	r9, [ip]
   14958:	ldr	sl, [r5]
   1495c:	str	sl, [ip], #4
   14960:	str	r9, [r5], #4
   14964:	cmp	lr, r5
   14968:	bne	14954 <__assert_fail@plt+0x3b80>
   1496c:	mov	lr, r2
   14970:	b	148f4 <__assert_fail@plt+0x3b20>
   14974:	ldr	sl, [r2]
   14978:	ldr	fp, [r9]
   1497c:	add	ip, ip, #1
   14980:	cmp	r5, ip
   14984:	str	fp, [r2], #4
   14988:	str	sl, [r9], #4
   1498c:	bgt	14974 <__assert_fail@plt+0x3ba0>
   14990:	add	r4, r4, r5
   14994:	mov	r2, lr
   14998:	b	1496c <__assert_fail@plt+0x3b98>
   1499c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a0:	sub	sp, sp, #44	; 0x2c
   149a4:	mov	sl, r1
   149a8:	ldr	r4, [sp, #88]	; 0x58
   149ac:	str	r0, [sp, #36]	; 0x24
   149b0:	str	r2, [sp, #32]
   149b4:	ldr	r8, [r4, #20]
   149b8:	str	r3, [sp, #20]
   149bc:	mov	r9, r8
   149c0:	mov	r3, r9
   149c4:	ldrb	r6, [r3], #1
   149c8:	cmp	r6, #0
   149cc:	cmpne	r6, #61	; 0x3d
   149d0:	movne	r6, #1
   149d4:	moveq	r6, #0
   149d8:	bne	14aa0 <__assert_fail@plt+0x3ccc>
   149dc:	sub	r3, r9, r8
   149e0:	str	r3, [sp, #24]
   149e4:	ldr	r3, [sp, #20]
   149e8:	add	r7, r3, r6, lsl #4
   149ec:	ldr	r5, [r3, r6, lsl #4]
   149f0:	cmp	r5, #0
   149f4:	bne	14aa8 <__assert_fail@plt+0x3cd4>
   149f8:	mov	r8, r5
   149fc:	mov	r7, r5
   14a00:	mov	fp, r3
   14a04:	mvn	r3, #0
   14a08:	str	r3, [sp, #16]
   14a0c:	str	r5, [sp, #28]
   14a10:	str	r5, [sp, #12]
   14a14:	ldr	r0, [fp]
   14a18:	cmp	r0, #0
   14a1c:	bne	14adc <__assert_fail@plt+0x3d08>
   14a20:	cmp	r5, #0
   14a24:	cmpeq	r8, #0
   14a28:	beq	14c14 <__assert_fail@plt+0x3e40>
   14a2c:	ldr	r3, [sp, #92]	; 0x5c
   14a30:	cmp	r3, #0
   14a34:	beq	14a60 <__assert_fail@plt+0x3c8c>
   14a38:	cmp	r5, #0
   14a3c:	ldr	r7, [pc, #908]	; 14dd0 <__assert_fail@plt+0x3ffc>
   14a40:	beq	14ba0 <__assert_fail@plt+0x3dcc>
   14a44:	ldr	r3, [r4, #20]
   14a48:	ldr	r2, [sl]
   14a4c:	str	r3, [sp]
   14a50:	ldr	r1, [pc, #892]	; 14dd4 <__assert_fail@plt+0x4000>
   14a54:	ldr	r3, [sp, #96]	; 0x60
   14a58:	ldr	r0, [r7]
   14a5c:	bl	10cb4 <fprintf@plt>
   14a60:	ldr	r3, [sp, #28]
   14a64:	cmp	r3, #0
   14a68:	beq	14a74 <__assert_fail@plt+0x3ca0>
   14a6c:	mov	r0, r8
   14a70:	bl	12b24 <__assert_fail@plt+0x1d50>
   14a74:	ldr	r5, [r4, #20]
   14a78:	mov	r0, r5
   14a7c:	bl	10c90 <strlen@plt>
   14a80:	ldr	r3, [r4]
   14a84:	add	r3, r3, #1
   14a88:	str	r3, [r4]
   14a8c:	mov	r3, #0
   14a90:	add	r0, r5, r0
   14a94:	str	r0, [r4, #20]
   14a98:	str	r3, [r4, #8]
   14a9c:	b	14c9c <__assert_fail@plt+0x3ec8>
   14aa0:	mov	r9, r3
   14aa4:	b	149c0 <__assert_fail@plt+0x3bec>
   14aa8:	ldr	r2, [sp, #24]
   14aac:	mov	r1, r8
   14ab0:	mov	r0, r5
   14ab4:	bl	10d8c <strncmp@plt>
   14ab8:	cmp	r0, #0
   14abc:	bne	14ad4 <__assert_fail@plt+0x3d00>
   14ac0:	mov	r0, r5
   14ac4:	bl	10c90 <strlen@plt>
   14ac8:	ldr	r3, [sp, #24]
   14acc:	cmp	r3, r0
   14ad0:	beq	14ca8 <__assert_fail@plt+0x3ed4>
   14ad4:	add	r6, r6, #1
   14ad8:	b	149e4 <__assert_fail@plt+0x3c10>
   14adc:	ldr	r2, [sp, #24]
   14ae0:	ldr	r1, [r4, #20]
   14ae4:	bl	10d8c <strncmp@plt>
   14ae8:	cmp	r0, #0
   14aec:	bne	14b8c <__assert_fail@plt+0x3db8>
   14af0:	cmp	r7, #0
   14af4:	moveq	r7, fp
   14af8:	ldreq	r3, [sp, #12]
   14afc:	streq	r3, [sp, #16]
   14b00:	beq	14b8c <__assert_fail@plt+0x3db8>
   14b04:	ldr	r3, [sp, #84]	; 0x54
   14b08:	cmp	r3, #0
   14b0c:	bne	14b40 <__assert_fail@plt+0x3d6c>
   14b10:	ldr	r1, [r7, #4]
   14b14:	ldr	r2, [fp, #4]
   14b18:	cmp	r1, r2
   14b1c:	bne	14b40 <__assert_fail@plt+0x3d6c>
   14b20:	ldr	r1, [r7, #8]
   14b24:	ldr	r2, [fp, #8]
   14b28:	cmp	r1, r2
   14b2c:	bne	14b40 <__assert_fail@plt+0x3d6c>
   14b30:	ldr	r1, [r7, #12]
   14b34:	ldr	r2, [fp, #12]
   14b38:	cmp	r1, r2
   14b3c:	beq	14b8c <__assert_fail@plt+0x3db8>
   14b40:	cmp	r5, #0
   14b44:	bne	14b8c <__assert_fail@plt+0x3db8>
   14b48:	ldr	r3, [sp, #92]	; 0x5c
   14b4c:	cmp	r3, #0
   14b50:	beq	14b74 <__assert_fail@plt+0x3da0>
   14b54:	cmp	r8, #0
   14b58:	bne	14b80 <__assert_fail@plt+0x3dac>
   14b5c:	mov	r0, r6
   14b60:	bl	16348 <__assert_fail@plt+0x5574>
   14b64:	subs	r8, r0, #0
   14b68:	bne	14dac <__assert_fail@plt+0x3fd8>
   14b6c:	mov	r5, #1
   14b70:	b	14b8c <__assert_fail@plt+0x3db8>
   14b74:	cmp	r8, #0
   14b78:	mov	r5, #1
   14b7c:	beq	14b8c <__assert_fail@plt+0x3db8>
   14b80:	ldr	r3, [sp, #12]
   14b84:	mov	r2, #1
   14b88:	strb	r2, [r8, r3]
   14b8c:	ldr	r3, [sp, #12]
   14b90:	add	fp, fp, #16
   14b94:	add	r3, r3, #1
   14b98:	str	r3, [sp, #12]
   14b9c:	b	14a14 <__assert_fail@plt+0x3c40>
   14ba0:	ldr	r0, [r7]
   14ba4:	bl	10d38 <flockfile@plt>
   14ba8:	ldr	r3, [r4, #20]
   14bac:	ldr	r2, [sl]
   14bb0:	str	r3, [sp]
   14bb4:	ldr	r1, [pc, #540]	; 14dd8 <__assert_fail@plt+0x4004>
   14bb8:	ldr	r3, [sp, #96]	; 0x60
   14bbc:	ldr	r0, [r7]
   14bc0:	bl	10cb4 <fprintf@plt>
   14bc4:	ldr	r9, [pc, #528]	; 14ddc <__assert_fail@plt+0x4008>
   14bc8:	cmp	r6, r5
   14bcc:	bne	14be8 <__assert_fail@plt+0x3e14>
   14bd0:	ldr	r1, [r7]
   14bd4:	mov	r0, #10
   14bd8:	bl	10d08 <fputc@plt>
   14bdc:	ldr	r0, [r7]
   14be0:	bl	10bf4 <funlockfile@plt>
   14be4:	b	14a60 <__assert_fail@plt+0x3c8c>
   14be8:	ldrb	r3, [r8, r5]
   14bec:	cmp	r3, #0
   14bf0:	beq	14c0c <__assert_fail@plt+0x3e38>
   14bf4:	ldr	r3, [sp, #20]
   14bf8:	ldr	r2, [sp, #96]	; 0x60
   14bfc:	mov	r1, r9
   14c00:	ldr	r3, [r3, r5, lsl #4]
   14c04:	ldr	r0, [r7]
   14c08:	bl	10cb4 <fprintf@plt>
   14c0c:	add	r5, r5, #1
   14c10:	b	14bc8 <__assert_fail@plt+0x3df4>
   14c14:	cmp	r7, #0
   14c18:	bne	14cac <__assert_fail@plt+0x3ed8>
   14c1c:	ldr	r3, [sp, #84]	; 0x54
   14c20:	cmp	r3, #0
   14c24:	beq	14c58 <__assert_fail@plt+0x3e84>
   14c28:	ldr	r3, [r4]
   14c2c:	ldr	r3, [sl, r3, lsl #2]
   14c30:	ldrb	r3, [r3, #1]
   14c34:	cmp	r3, #45	; 0x2d
   14c38:	beq	14c58 <__assert_fail@plt+0x3e84>
   14c3c:	ldr	r3, [r4, #20]
   14c40:	ldr	r0, [sp, #32]
   14c44:	ldrb	r1, [r3]
   14c48:	bl	10c9c <strchr@plt>
   14c4c:	cmp	r0, #0
   14c50:	mvnne	r0, #0
   14c54:	bne	14ca0 <__assert_fail@plt+0x3ecc>
   14c58:	ldr	r3, [sp, #92]	; 0x5c
   14c5c:	cmp	r3, #0
   14c60:	beq	14c84 <__assert_fail@plt+0x3eb0>
   14c64:	ldr	r0, [pc, #356]	; 14dd0 <__assert_fail@plt+0x3ffc>
   14c68:	ldr	r3, [r4, #20]
   14c6c:	ldr	r2, [sl]
   14c70:	str	r3, [sp]
   14c74:	ldr	r1, [pc, #356]	; 14de0 <__assert_fail@plt+0x400c>
   14c78:	ldr	r3, [sp, #96]	; 0x60
   14c7c:	ldr	r0, [r0]
   14c80:	bl	10cb4 <fprintf@plt>
   14c84:	ldr	r3, [r4]
   14c88:	mov	r2, #0
   14c8c:	add	r3, r3, #1
   14c90:	str	r2, [r4, #20]
   14c94:	str	r3, [r4]
   14c98:	str	r2, [r4, #8]
   14c9c:	mov	r0, #63	; 0x3f
   14ca0:	add	sp, sp, #44	; 0x2c
   14ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ca8:	str	r6, [sp, #16]
   14cac:	ldr	r3, [r4]
   14cb0:	mov	r1, #0
   14cb4:	add	r2, r3, #1
   14cb8:	str	r2, [r4]
   14cbc:	str	r1, [r4, #20]
   14cc0:	ldrb	r1, [r9]
   14cc4:	cmp	r1, #0
   14cc8:	ldr	r1, [r7, #4]
   14ccc:	beq	14d14 <__assert_fail@plt+0x3f40>
   14cd0:	cmp	r1, #0
   14cd4:	addne	r9, r9, #1
   14cd8:	strne	r9, [r4, #12]
   14cdc:	bne	14d38 <__assert_fail@plt+0x3f64>
   14ce0:	ldr	r3, [sp, #92]	; 0x5c
   14ce4:	cmp	r3, #0
   14ce8:	beq	14d0c <__assert_fail@plt+0x3f38>
   14cec:	ldr	r0, [pc, #220]	; 14dd0 <__assert_fail@plt+0x3ffc>
   14cf0:	ldr	r3, [r7]
   14cf4:	ldr	r2, [sl]
   14cf8:	str	r3, [sp]
   14cfc:	ldr	r1, [pc, #224]	; 14de4 <__assert_fail@plt+0x4010>
   14d00:	ldr	r3, [sp, #96]	; 0x60
   14d04:	ldr	r0, [r0]
   14d08:	bl	10cb4 <fprintf@plt>
   14d0c:	ldr	r3, [r7, #12]
   14d10:	b	14a98 <__assert_fail@plt+0x3cc4>
   14d14:	cmp	r1, #1
   14d18:	bne	14d38 <__assert_fail@plt+0x3f64>
   14d1c:	ldr	r1, [sp, #36]	; 0x24
   14d20:	cmp	r2, r1
   14d24:	bge	14d60 <__assert_fail@plt+0x3f8c>
   14d28:	add	r3, r3, #2
   14d2c:	str	r3, [r4]
   14d30:	ldr	r3, [sl, r2, lsl #2]
   14d34:	str	r3, [r4, #12]
   14d38:	ldr	r3, [sp, #80]	; 0x50
   14d3c:	cmp	r3, #0
   14d40:	ldrne	r2, [sp, #16]
   14d44:	strne	r2, [r3]
   14d48:	ldr	r3, [r7, #8]
   14d4c:	ldr	r0, [r7, #12]
   14d50:	cmp	r3, #0
   14d54:	strne	r0, [r3]
   14d58:	movne	r0, #0
   14d5c:	b	14ca0 <__assert_fail@plt+0x3ecc>
   14d60:	ldr	r3, [sp, #92]	; 0x5c
   14d64:	cmp	r3, #0
   14d68:	beq	14d8c <__assert_fail@plt+0x3fb8>
   14d6c:	ldr	r0, [pc, #92]	; 14dd0 <__assert_fail@plt+0x3ffc>
   14d70:	ldr	r3, [r7]
   14d74:	ldr	r2, [sl]
   14d78:	str	r3, [sp]
   14d7c:	ldr	r1, [pc, #100]	; 14de8 <__assert_fail@plt+0x4014>
   14d80:	ldr	r3, [sp, #96]	; 0x60
   14d84:	ldr	r0, [r0]
   14d88:	bl	10cb4 <fprintf@plt>
   14d8c:	ldr	r3, [r7, #12]
   14d90:	str	r3, [r4, #8]
   14d94:	ldr	r3, [sp, #32]
   14d98:	ldrb	r0, [r3]
   14d9c:	cmp	r0, #58	; 0x3a
   14da0:	moveq	r0, #58	; 0x3a
   14da4:	movne	r0, #63	; 0x3f
   14da8:	b	14ca0 <__assert_fail@plt+0x3ecc>
   14dac:	mov	r2, r6
   14db0:	mov	r1, #0
   14db4:	bl	10cd8 <memset@plt>
   14db8:	ldr	r3, [sp, #16]
   14dbc:	mov	r2, #1
   14dc0:	strb	r2, [r8, r3]
   14dc4:	mov	r3, #1
   14dc8:	str	r3, [sp, #28]
   14dcc:	b	14b80 <__assert_fail@plt+0x3dac>
   14dd0:	andeq	r8, r2, r0, lsl r1
   14dd4:	andeq	r6, r1, r1, asr #30
   14dd8:	andeq	r6, r1, r1, ror #30
   14ddc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14de0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14de4:			; <UNDEFINED> instruction: 0x00016fb8
   14de8:	andeq	r6, r1, r5, ror #31
   14dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df0:	sub	sp, sp, #36	; 0x24
   14df4:	subs	r8, r0, #0
   14df8:	ldr	r4, [sp, #80]	; 0x50
   14dfc:	ldr	fp, [sp, #72]	; 0x48
   14e00:	ldr	r5, [sp, #76]	; 0x4c
   14e04:	ldr	r9, [r4, #4]
   14e08:	bgt	14e18 <__assert_fail@plt+0x4044>
   14e0c:	mvn	r0, #0
   14e10:	add	sp, sp, #36	; 0x24
   14e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e18:	mov	sl, r3
   14e1c:	mov	r3, #0
   14e20:	str	r3, [r4, #12]
   14e24:	ldr	r3, [r4]
   14e28:	mov	r7, r1
   14e2c:	cmp	r3, #0
   14e30:	mov	r6, r2
   14e34:	beq	14e58 <__assert_fail@plt+0x4084>
   14e38:	ldr	r3, [r4, #16]
   14e3c:	cmp	r3, #0
   14e40:	beq	14e60 <__assert_fail@plt+0x408c>
   14e44:	ldrb	r3, [r2]
   14e48:	sub	r3, r3, #43	; 0x2b
   14e4c:	tst	r3, #253	; 0xfd
   14e50:	addeq	r6, r2, #1
   14e54:	b	14e9c <__assert_fail@plt+0x40c8>
   14e58:	mov	r3, #1
   14e5c:	str	r3, [r4]
   14e60:	ldr	r3, [r4]
   14e64:	str	r3, [r4, #32]
   14e68:	str	r3, [r4, #28]
   14e6c:	mov	r3, #0
   14e70:	str	r3, [r4, #20]
   14e74:	ldrb	r2, [r6]
   14e78:	cmp	r2, #45	; 0x2d
   14e7c:	moveq	r3, #2
   14e80:	beq	14e8c <__assert_fail@plt+0x40b8>
   14e84:	cmp	r2, #43	; 0x2b
   14e88:	bne	14f9c <__assert_fail@plt+0x41c8>
   14e8c:	add	r6, r6, #1
   14e90:	str	r3, [r4, #24]
   14e94:	mov	r3, #1
   14e98:	str	r3, [r4, #16]
   14e9c:	ldrb	r3, [r6]
   14ea0:	cmp	r3, #58	; 0x3a
   14ea4:	ldr	r3, [r4, #20]
   14ea8:	moveq	r9, #0
   14eac:	cmp	r3, #0
   14eb0:	beq	14ec0 <__assert_fail@plt+0x40ec>
   14eb4:	ldrb	r3, [r3]
   14eb8:	cmp	r3, #0
   14ebc:	bne	15054 <__assert_fail@plt+0x4280>
   14ec0:	ldr	r3, [r4]
   14ec4:	ldr	r2, [r4, #32]
   14ec8:	cmp	r2, r3
   14ecc:	ldr	r2, [r4, #28]
   14ed0:	strgt	r3, [r4, #32]
   14ed4:	cmp	r3, r2
   14ed8:	ldr	r2, [r4, #24]
   14edc:	strlt	r3, [r4, #28]
   14ee0:	cmp	r2, #1
   14ee4:	bne	14f1c <__assert_fail@plt+0x4148>
   14ee8:	ldr	r1, [r4, #32]
   14eec:	ldr	r2, [r4, #28]
   14ef0:	cmp	r2, r1
   14ef4:	beq	14fcc <__assert_fail@plt+0x41f8>
   14ef8:	cmp	r3, r1
   14efc:	beq	14f0c <__assert_fail@plt+0x4138>
   14f00:	mov	r1, r4
   14f04:	mov	r0, r7
   14f08:	bl	148d8 <__assert_fail@plt+0x3b04>
   14f0c:	ldr	r3, [r4]
   14f10:	cmp	r8, r3
   14f14:	bgt	14fd8 <__assert_fail@plt+0x4204>
   14f18:	str	r3, [r4, #32]
   14f1c:	ldr	r3, [r4]
   14f20:	cmp	r8, r3
   14f24:	beq	14f7c <__assert_fail@plt+0x41a8>
   14f28:	ldr	r1, [pc, #920]	; 152c8 <__assert_fail@plt+0x44f4>
   14f2c:	ldr	r0, [r7, r3, lsl #2]
   14f30:	str	r3, [sp, #24]
   14f34:	bl	10b7c <strcmp@plt>
   14f38:	cmp	r0, #0
   14f3c:	bne	14f7c <__assert_fail@plt+0x41a8>
   14f40:	ldr	r1, [r4, #28]
   14f44:	ldr	r3, [sp, #24]
   14f48:	ldr	r2, [r4, #32]
   14f4c:	add	r3, r3, #1
   14f50:	cmp	r1, r2
   14f54:	str	r3, [r4]
   14f58:	streq	r3, [r4, #28]
   14f5c:	beq	14f74 <__assert_fail@plt+0x41a0>
   14f60:	cmp	r3, r2
   14f64:	beq	14f74 <__assert_fail@plt+0x41a0>
   14f68:	mov	r1, r4
   14f6c:	mov	r0, r7
   14f70:	bl	148d8 <__assert_fail@plt+0x3b04>
   14f74:	str	r8, [r4, #32]
   14f78:	str	r8, [r4]
   14f7c:	ldr	r2, [r4]
   14f80:	cmp	r8, r2
   14f84:	bne	15000 <__assert_fail@plt+0x422c>
   14f88:	ldr	r3, [r4, #28]
   14f8c:	ldr	r2, [r4, #32]
   14f90:	cmp	r3, r2
   14f94:	strne	r3, [r4]
   14f98:	b	14e0c <__assert_fail@plt+0x4038>
   14f9c:	ldr	r3, [sp, #84]	; 0x54
   14fa0:	cmp	r3, #0
   14fa4:	beq	14fb4 <__assert_fail@plt+0x41e0>
   14fa8:	mov	r3, #0
   14fac:	str	r3, [r4, #24]
   14fb0:	b	14e94 <__assert_fail@plt+0x40c0>
   14fb4:	ldr	r0, [pc, #784]	; 152cc <__assert_fail@plt+0x44f8>
   14fb8:	bl	10c48 <getenv@plt>
   14fbc:	cmp	r0, #0
   14fc0:	bne	14fa8 <__assert_fail@plt+0x41d4>
   14fc4:	mov	r3, #1
   14fc8:	b	14fac <__assert_fail@plt+0x41d8>
   14fcc:	cmp	r3, r2
   14fd0:	strne	r3, [r4, #28]
   14fd4:	b	14f0c <__assert_fail@plt+0x4138>
   14fd8:	ldr	r2, [r7, r3, lsl #2]
   14fdc:	ldrb	r1, [r2]
   14fe0:	cmp	r1, #45	; 0x2d
   14fe4:	bne	14ff4 <__assert_fail@plt+0x4220>
   14fe8:	ldrb	r2, [r2, #1]
   14fec:	cmp	r2, #0
   14ff0:	bne	14f18 <__assert_fail@plt+0x4144>
   14ff4:	add	r3, r3, #1
   14ff8:	str	r3, [r4]
   14ffc:	b	14f0c <__assert_fail@plt+0x4138>
   15000:	ldr	r3, [r7, r2, lsl #2]
   15004:	ldrb	r1, [r3]
   15008:	cmp	r1, #45	; 0x2d
   1500c:	bne	1501c <__assert_fail@plt+0x4248>
   15010:	ldrb	r1, [r3, #1]
   15014:	cmp	r1, #0
   15018:	bne	1503c <__assert_fail@plt+0x4268>
   1501c:	ldr	r1, [r4, #24]
   15020:	cmp	r1, #0
   15024:	beq	14e0c <__assert_fail@plt+0x4038>
   15028:	add	r2, r2, #1
   1502c:	str	r2, [r4]
   15030:	str	r3, [r4, #12]
   15034:	mov	r0, #1
   15038:	b	14e10 <__assert_fail@plt+0x403c>
   1503c:	cmp	sl, #0
   15040:	bne	150d0 <__assert_fail@plt+0x42fc>
   15044:	ldr	r3, [r4]
   15048:	ldr	r3, [r7, r3, lsl #2]
   1504c:	add	r3, r3, #1
   15050:	str	r3, [r4, #20]
   15054:	ldr	r3, [r4, #20]
   15058:	mov	r0, r6
   1505c:	add	r2, r3, #1
   15060:	str	r2, [r4, #20]
   15064:	ldrb	r5, [r3]
   15068:	str	r2, [sp, #28]
   1506c:	str	r3, [sp, #24]
   15070:	mov	r1, r5
   15074:	bl	10c9c <strchr@plt>
   15078:	ldr	r3, [sp, #24]
   1507c:	ldr	r2, [sp, #28]
   15080:	ldrb	r1, [r3, #1]
   15084:	cmp	r1, #0
   15088:	ldreq	r1, [r4]
   1508c:	addeq	r1, r1, #1
   15090:	streq	r1, [r4]
   15094:	sub	r1, r5, #58	; 0x3a
   15098:	cmp	r0, #0
   1509c:	cmpne	r1, #1
   150a0:	bhi	1517c <__assert_fail@plt+0x43a8>
   150a4:	cmp	r9, #0
   150a8:	beq	150c4 <__assert_fail@plt+0x42f0>
   150ac:	ldr	r0, [pc, #540]	; 152d0 <__assert_fail@plt+0x44fc>
   150b0:	mov	r3, r5
   150b4:	ldr	r2, [r7]
   150b8:	ldr	r1, [pc, #532]	; 152d4 <__assert_fail@plt+0x4500>
   150bc:	ldr	r0, [r0]
   150c0:	bl	10cb4 <fprintf@plt>
   150c4:	str	r5, [r4, #8]
   150c8:	mov	r0, #63	; 0x3f
   150cc:	b	14e10 <__assert_fail@plt+0x403c>
   150d0:	cmp	r1, #45	; 0x2d
   150d4:	bne	15110 <__assert_fail@plt+0x433c>
   150d8:	add	r3, r3, #2
   150dc:	str	r3, [r4, #20]
   150e0:	ldr	r3, [pc, #480]	; 152c8 <__assert_fail@plt+0x44f4>
   150e4:	str	r9, [sp, #12]
   150e8:	str	r3, [sp, #16]
   150ec:	str	r4, [sp, #8]
   150f0:	str	r5, [sp, #4]
   150f4:	str	fp, [sp]
   150f8:	mov	r3, sl
   150fc:	mov	r2, r6
   15100:	mov	r1, r7
   15104:	mov	r0, r8
   15108:	bl	1499c <__assert_fail@plt+0x3bc8>
   1510c:	b	14e10 <__assert_fail@plt+0x403c>
   15110:	cmp	r5, #0
   15114:	beq	15044 <__assert_fail@plt+0x4270>
   15118:	ldrb	r2, [r3, #2]
   1511c:	cmp	r2, #0
   15120:	bne	1513c <__assert_fail@plt+0x4368>
   15124:	mov	r0, r6
   15128:	str	r3, [sp, #24]
   1512c:	bl	10c9c <strchr@plt>
   15130:	ldr	r3, [sp, #24]
   15134:	cmp	r0, #0
   15138:	bne	15044 <__assert_fail@plt+0x4270>
   1513c:	add	r3, r3, #1
   15140:	str	r3, [r4, #20]
   15144:	ldr	r3, [pc, #396]	; 152d8 <__assert_fail@plt+0x4504>
   15148:	str	r9, [sp, #12]
   1514c:	str	r3, [sp, #16]
   15150:	str	r4, [sp, #8]
   15154:	str	r5, [sp, #4]
   15158:	str	fp, [sp]
   1515c:	mov	r3, sl
   15160:	mov	r2, r6
   15164:	mov	r1, r7
   15168:	mov	r0, r8
   1516c:	bl	1499c <__assert_fail@plt+0x3bc8>
   15170:	cmn	r0, #1
   15174:	bne	14e10 <__assert_fail@plt+0x403c>
   15178:	b	15044 <__assert_fail@plt+0x4270>
   1517c:	ldrb	r1, [r0]
   15180:	cmp	r1, #87	; 0x57
   15184:	ldrb	r1, [r0, #1]
   15188:	bne	15224 <__assert_fail@plt+0x4450>
   1518c:	cmp	sl, #0
   15190:	sub	ip, r1, #59	; 0x3b
   15194:	clz	ip, ip
   15198:	lsr	ip, ip, #5
   1519c:	moveq	ip, #0
   151a0:	cmp	ip, #0
   151a4:	beq	15224 <__assert_fail@plt+0x4450>
   151a8:	ldrb	r3, [r3, #1]
   151ac:	cmp	r3, #0
   151b0:	strne	r2, [r4, #12]
   151b4:	bne	15204 <__assert_fail@plt+0x4430>
   151b8:	ldr	r3, [r4]
   151bc:	cmp	r8, r3
   151c0:	ldrne	r3, [r7, r3, lsl #2]
   151c4:	strne	r3, [r4, #12]
   151c8:	bne	15204 <__assert_fail@plt+0x4430>
   151cc:	cmp	r9, #0
   151d0:	beq	151ec <__assert_fail@plt+0x4418>
   151d4:	ldr	r0, [pc, #244]	; 152d0 <__assert_fail@plt+0x44fc>
   151d8:	mov	r3, r5
   151dc:	ldr	r2, [r7]
   151e0:	ldr	r1, [pc, #244]	; 152dc <__assert_fail@plt+0x4508>
   151e4:	ldr	r0, [r0]
   151e8:	bl	10cb4 <fprintf@plt>
   151ec:	str	r5, [r4, #8]
   151f0:	ldrb	r0, [r6]
   151f4:	cmp	r0, #58	; 0x3a
   151f8:	moveq	r0, #58	; 0x3a
   151fc:	movne	r0, #63	; 0x3f
   15200:	b	14e10 <__assert_fail@plt+0x403c>
   15204:	ldr	r3, [r4, #12]
   15208:	ldr	r2, [pc, #208]	; 152e0 <__assert_fail@plt+0x450c>
   1520c:	str	r3, [r4, #20]
   15210:	mov	r3, #0
   15214:	str	r3, [r4, #12]
   15218:	str	r2, [sp, #16]
   1521c:	stmib	sp, {r3, r4, r9}
   15220:	b	150f4 <__assert_fail@plt+0x4320>
   15224:	cmp	r1, #58	; 0x3a
   15228:	bne	15274 <__assert_fail@plt+0x44a0>
   1522c:	ldrb	r1, [r0, #2]
   15230:	ldrb	r3, [r3, #1]
   15234:	cmp	r1, #58	; 0x3a
   15238:	bne	15254 <__assert_fail@plt+0x4480>
   1523c:	cmp	r3, #0
   15240:	strne	r2, [r4, #12]
   15244:	ldrne	r3, [r4]
   15248:	bne	15264 <__assert_fail@plt+0x4490>
   1524c:	str	r3, [r4, #12]
   15250:	b	1526c <__assert_fail@plt+0x4498>
   15254:	cmp	r3, #0
   15258:	ldr	r3, [r4]
   1525c:	beq	1527c <__assert_fail@plt+0x44a8>
   15260:	str	r2, [r4, #12]
   15264:	add	r3, r3, #1
   15268:	str	r3, [r4]
   1526c:	mov	r3, #0
   15270:	str	r3, [r4, #20]
   15274:	mov	r0, r5
   15278:	b	14e10 <__assert_fail@plt+0x403c>
   1527c:	cmp	r8, r3
   15280:	addne	r2, r3, #1
   15284:	strne	r2, [r4]
   15288:	ldrne	r3, [r7, r3, lsl #2]
   1528c:	bne	1524c <__assert_fail@plt+0x4478>
   15290:	cmp	r9, #0
   15294:	beq	152b0 <__assert_fail@plt+0x44dc>
   15298:	ldr	r0, [pc, #48]	; 152d0 <__assert_fail@plt+0x44fc>
   1529c:	mov	r3, r5
   152a0:	ldr	r2, [r7]
   152a4:	ldr	r1, [pc, #48]	; 152dc <__assert_fail@plt+0x4508>
   152a8:	ldr	r0, [r0]
   152ac:	bl	10cb4 <fprintf@plt>
   152b0:	str	r5, [r4, #8]
   152b4:	ldrb	r5, [r6]
   152b8:	cmp	r5, #58	; 0x3a
   152bc:	moveq	r5, #58	; 0x3a
   152c0:	movne	r5, #63	; 0x3f
   152c4:	b	1526c <__assert_fail@plt+0x4498>
   152c8:	andeq	r7, r1, sp, lsl r0
   152cc:	andeq	r7, r1, sp
   152d0:	andeq	r8, r2, r0, lsl r1
   152d4:	andeq	r7, r1, r0, lsr #32
   152d8:	andeq	r7, r1, lr, lsl r0
   152dc:	andeq	r7, r1, ip, lsr r0
   152e0:	andeq	r7, r1, r5, rrx
   152e4:	push	{r4, r5, lr}
   152e8:	sub	sp, sp, #20
   152ec:	ldr	r5, [pc, #84]	; 15348 <__assert_fail@plt+0x4574>
   152f0:	ldr	r4, [pc, #84]	; 1534c <__assert_fail@plt+0x4578>
   152f4:	ldr	ip, [r5]
   152f8:	str	r4, [sp, #8]
   152fc:	str	ip, [r4]
   15300:	ldr	ip, [r5, #4]
   15304:	str	ip, [r4, #4]
   15308:	ldr	ip, [sp, #40]	; 0x28
   1530c:	str	ip, [sp, #12]
   15310:	ldr	ip, [sp, #36]	; 0x24
   15314:	str	ip, [sp, #4]
   15318:	ldr	ip, [sp, #32]
   1531c:	str	ip, [sp]
   15320:	bl	14dec <__assert_fail@plt+0x4018>
   15324:	ldr	r3, [r4]
   15328:	ldr	r2, [r4, #12]
   1532c:	str	r3, [r5]
   15330:	ldr	r3, [pc, #24]	; 15350 <__assert_fail@plt+0x457c>
   15334:	str	r2, [r3]
   15338:	ldr	r3, [r4, #8]
   1533c:	str	r3, [r5, #8]
   15340:	add	sp, sp, #20
   15344:	pop	{r4, r5, pc}
   15348:	andeq	r8, r2, r4, lsl #2
   1534c:	andeq	r8, r2, ip, lsr #2
   15350:			; <UNDEFINED> instruction: 0x000281b8
   15354:	push	{r0, r1, r2, r3, r4, lr}
   15358:	mov	r3, #1
   1535c:	str	r3, [sp, #8]
   15360:	mov	r3, #0
   15364:	str	r3, [sp, #4]
   15368:	str	r3, [sp]
   1536c:	bl	152e4 <__assert_fail@plt+0x4510>
   15370:	add	sp, sp, #20
   15374:	pop	{pc}		; (ldr pc, [sp], #4)
   15378:	push	{r4, lr}
   1537c:	ror	r0, r0, #3
   15380:	bl	168a0 <__assert_fail@plt+0x5acc>
   15384:	mov	r0, r1
   15388:	pop	{r4, pc}
   1538c:	sub	r0, r1, r0
   15390:	clz	r0, r0
   15394:	lsr	r0, r0, #5
   15398:	bx	lr
   1539c:	push	{r4, lr}
   153a0:	mov	r4, r0
   153a4:	mov	r0, r1
   153a8:	ldr	r3, [r4, #24]
   153ac:	ldr	r1, [r4, #8]
   153b0:	blx	r3
   153b4:	ldr	r3, [r4, #8]
   153b8:	cmp	r0, r3
   153bc:	bcc	153c4 <__assert_fail@plt+0x45f0>
   153c0:	bl	10d98 <abort@plt>
   153c4:	ldr	r3, [r4]
   153c8:	add	r0, r3, r0, lsl #3
   153cc:	pop	{r4, pc}
   153d0:	push	{r4, r5, r6, r7, r8, lr}
   153d4:	mov	r6, r1
   153d8:	mov	r8, r2
   153dc:	mov	r5, r0
   153e0:	mov	r7, r3
   153e4:	bl	1539c <__assert_fail@plt+0x45c8>
   153e8:	str	r0, [r8]
   153ec:	ldr	r1, [r0]
   153f0:	cmp	r1, #0
   153f4:	bne	15404 <__assert_fail@plt+0x4630>
   153f8:	mov	r2, #0
   153fc:	mov	r0, r2
   15400:	pop	{r4, r5, r6, r7, r8, pc}
   15404:	cmp	r6, r1
   15408:	mov	r4, r0
   1540c:	bne	1544c <__assert_fail@plt+0x4678>
   15410:	cmp	r7, #0
   15414:	ldr	r2, [r4]
   15418:	beq	153fc <__assert_fail@plt+0x4628>
   1541c:	ldr	r3, [r4, #4]
   15420:	cmp	r3, #0
   15424:	streq	r3, [r4]
   15428:	beq	153fc <__assert_fail@plt+0x4628>
   1542c:	ldm	r3, {r0, r1}
   15430:	stm	r4, {r0, r1}
   15434:	mov	r1, #0
   15438:	str	r1, [r3]
   1543c:	ldr	r1, [r5, #36]	; 0x24
   15440:	str	r1, [r3, #4]
   15444:	str	r3, [r5, #36]	; 0x24
   15448:	b	153fc <__assert_fail@plt+0x4628>
   1544c:	ldr	r3, [r5, #28]
   15450:	mov	r0, r6
   15454:	blx	r3
   15458:	cmp	r0, #0
   1545c:	bne	15410 <__assert_fail@plt+0x463c>
   15460:	ldr	r3, [r4, #4]
   15464:	cmp	r3, #0
   15468:	beq	153f8 <__assert_fail@plt+0x4624>
   1546c:	ldr	r1, [r3]
   15470:	cmp	r6, r1
   15474:	bne	15494 <__assert_fail@plt+0x46c0>
   15478:	ldr	r3, [r4, #4]
   1547c:	cmp	r7, #0
   15480:	ldr	r2, [r3]
   15484:	beq	153fc <__assert_fail@plt+0x4628>
   15488:	ldr	r1, [r3, #4]
   1548c:	str	r1, [r4, #4]
   15490:	b	15434 <__assert_fail@plt+0x4660>
   15494:	ldr	r3, [r5, #28]
   15498:	mov	r0, r6
   1549c:	blx	r3
   154a0:	cmp	r0, #0
   154a4:	bne	15478 <__assert_fail@plt+0x46a4>
   154a8:	ldr	r4, [r4, #4]
   154ac:	b	15460 <__assert_fail@plt+0x468c>
   154b0:	push	{r4, r5, r6, lr}
   154b4:	ldrb	r4, [r1, #16]
   154b8:	cmp	r4, #0
   154bc:	bne	154e8 <__assert_fail@plt+0x4714>
   154c0:	vmov	s15, r0
   154c4:	vldr	s14, [r1, #8]
   154c8:	vcvt.f32.u32	s13, s15
   154cc:	vdiv.f32	s15, s13, s14
   154d0:	vldr	s14, [pc, #156]	; 15574 <__assert_fail@plt+0x47a0>
   154d4:	vcmpe.f32	s15, s14
   154d8:	vmrs	APSR_nzcv, fpscr
   154dc:	bge	15540 <__assert_fail@plt+0x476c>
   154e0:	vcvt.u32.f32	s15, s15
   154e4:	vmov	r0, s15
   154e8:	cmp	r0, #10
   154ec:	movcc	r0, #10
   154f0:	orr	r4, r0, #1
   154f4:	cmn	r4, #1
   154f8:	beq	15520 <__assert_fail@plt+0x474c>
   154fc:	mov	r6, #9
   15500:	mov	r5, #3
   15504:	cmp	r4, r6
   15508:	bhi	15550 <__assert_fail@plt+0x477c>
   1550c:	mov	r1, r5
   15510:	mov	r0, r4
   15514:	bl	168a0 <__assert_fail@plt+0x5acc>
   15518:	cmp	r1, #0
   1551c:	beq	15548 <__assert_fail@plt+0x4774>
   15520:	lsrs	r3, r4, #30
   15524:	movne	r3, #1
   15528:	moveq	r3, #0
   1552c:	tst	r4, #536870912	; 0x20000000
   15530:	bne	1553c <__assert_fail@plt+0x4768>
   15534:	cmp	r3, #0
   15538:	beq	15540 <__assert_fail@plt+0x476c>
   1553c:	mov	r4, #0
   15540:	mov	r0, r4
   15544:	pop	{r4, r5, r6, pc}
   15548:	add	r4, r4, #2
   1554c:	b	154f4 <__assert_fail@plt+0x4720>
   15550:	mov	r1, r5
   15554:	mov	r0, r4
   15558:	bl	168a0 <__assert_fail@plt+0x5acc>
   1555c:	cmp	r1, #0
   15560:	beq	1550c <__assert_fail@plt+0x4738>
   15564:	add	r3, r5, #1
   15568:	add	r5, r5, #2
   1556c:	add	r6, r6, r3, lsl #2
   15570:	b	15504 <__assert_fail@plt+0x4730>
   15574:	svcmi	0x00800000
   15578:	ldr	r3, [r0]
   1557c:	ldr	r2, [pc, #160]	; 15624 <__assert_fail@plt+0x4850>
   15580:	cmp	r3, r2
   15584:	beq	1560c <__assert_fail@plt+0x4838>
   15588:	vldr	s14, [r3, #8]
   1558c:	vldr	s13, [pc, #128]	; 15614 <__assert_fail@plt+0x4840>
   15590:	vcmpe.f32	s14, s13
   15594:	vmrs	APSR_nzcv, fpscr
   15598:	ble	15600 <__assert_fail@plt+0x482c>
   1559c:	vldr	s15, [pc, #116]	; 15618 <__assert_fail@plt+0x4844>
   155a0:	vcmpe.f32	s14, s15
   155a4:	vmrs	APSR_nzcv, fpscr
   155a8:	bpl	15600 <__assert_fail@plt+0x482c>
   155ac:	vldr	s12, [r3, #12]
   155b0:	vldr	s15, [pc, #100]	; 1561c <__assert_fail@plt+0x4848>
   155b4:	vcmpe.f32	s12, s15
   155b8:	vmrs	APSR_nzcv, fpscr
   155bc:	ble	15600 <__assert_fail@plt+0x482c>
   155c0:	vldr	s15, [r3]
   155c4:	vcmpe.f32	s15, #0.0
   155c8:	vmrs	APSR_nzcv, fpscr
   155cc:	blt	15600 <__assert_fail@plt+0x482c>
   155d0:	vadd.f32	s15, s15, s13
   155d4:	vldr	s13, [r3, #4]
   155d8:	vcmpe.f32	s15, s13
   155dc:	vmrs	APSR_nzcv, fpscr
   155e0:	bpl	15600 <__assert_fail@plt+0x482c>
   155e4:	vldr	s12, [pc, #52]	; 15620 <__assert_fail@plt+0x484c>
   155e8:	vcmpe.f32	s13, s12
   155ec:	vmrs	APSR_nzcv, fpscr
   155f0:	bhi	15600 <__assert_fail@plt+0x482c>
   155f4:	vcmpe.f32	s14, s15
   155f8:	vmrs	APSR_nzcv, fpscr
   155fc:	bgt	1560c <__assert_fail@plt+0x4838>
   15600:	str	r2, [r0]
   15604:	mov	r0, #0
   15608:	bx	lr
   1560c:	mov	r0, #1
   15610:	bx	lr
   15614:	stclcc	12, cr12, [ip, #820]	; 0x334
   15618:	svccc	0x00666666
   1561c:	svccc	0x008ccccd
   15620:	svccc	0x00800000
   15624:	andeq	r7, r1, ip, rrx
   15628:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1562c:	mov	r5, r0
   15630:	ldr	r4, [r1]
   15634:	mov	r7, r1
   15638:	mov	r8, r2
   1563c:	add	r4, r4, #8
   15640:	mov	r9, #0
   15644:	mov	sl, #8
   15648:	ldr	r2, [r7, #4]
   1564c:	sub	r3, r4, #8
   15650:	cmp	r2, r3
   15654:	bhi	15664 <__assert_fail@plt+0x4890>
   15658:	mov	r8, #1
   1565c:	mov	r0, r8
   15660:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15664:	ldr	r3, [r4, #-8]
   15668:	cmp	r3, #0
   1566c:	ldrne	r6, [r4, #-4]
   15670:	bne	156c8 <__assert_fail@plt+0x48f4>
   15674:	add	r4, r4, #8
   15678:	b	15648 <__assert_fail@plt+0x4874>
   1567c:	ldr	fp, [r6]
   15680:	mov	r0, r5
   15684:	mov	r1, fp
   15688:	bl	1539c <__assert_fail@plt+0x45c8>
   1568c:	ldr	r1, [r6, #4]
   15690:	ldr	r2, [r0]
   15694:	cmp	r2, #0
   15698:	streq	fp, [r0]
   1569c:	ldreq	r3, [r5, #12]
   156a0:	ldrne	r3, [r0, #4]
   156a4:	addeq	r3, r3, #1
   156a8:	streq	r3, [r5, #12]
   156ac:	streq	r2, [r6]
   156b0:	ldreq	r3, [r5, #36]	; 0x24
   156b4:	strne	r3, [r6, #4]
   156b8:	streq	r3, [r6, #4]
   156bc:	strne	r6, [r0, #4]
   156c0:	streq	r6, [r5, #36]	; 0x24
   156c4:	mov	r6, r1
   156c8:	cmp	r6, #0
   156cc:	bne	1567c <__assert_fail@plt+0x48a8>
   156d0:	cmp	r8, #0
   156d4:	ldr	fp, [r4, #-8]
   156d8:	str	r6, [r4, #-4]
   156dc:	bne	15674 <__assert_fail@plt+0x48a0>
   156e0:	mov	r1, fp
   156e4:	mov	r0, r5
   156e8:	bl	1539c <__assert_fail@plt+0x45c8>
   156ec:	ldr	r3, [r0]
   156f0:	mov	r6, r0
   156f4:	cmp	r3, #0
   156f8:	beq	15744 <__assert_fail@plt+0x4970>
   156fc:	ldr	r0, [r5, #36]	; 0x24
   15700:	cmp	r0, #0
   15704:	ldrne	r3, [r0, #4]
   15708:	strne	r3, [r5, #36]	; 0x24
   1570c:	bne	15720 <__assert_fail@plt+0x494c>
   15710:	mov	r0, sl
   15714:	bl	16348 <__assert_fail@plt+0x5574>
   15718:	cmp	r0, #0
   1571c:	beq	1565c <__assert_fail@plt+0x4888>
   15720:	ldr	r3, [r6, #4]
   15724:	str	fp, [r0]
   15728:	str	r3, [r0, #4]
   1572c:	str	r0, [r6, #4]
   15730:	ldr	r3, [r7, #12]
   15734:	str	r9, [r4, #-8]
   15738:	sub	r3, r3, #1
   1573c:	str	r3, [r7, #12]
   15740:	b	15674 <__assert_fail@plt+0x48a0>
   15744:	ldr	r3, [r5, #12]
   15748:	str	fp, [r0]
   1574c:	add	r3, r3, #1
   15750:	str	r3, [r5, #12]
   15754:	b	15730 <__assert_fail@plt+0x495c>
   15758:	ldr	r0, [r0, #8]
   1575c:	bx	lr
   15760:	ldr	r0, [r0, #12]
   15764:	bx	lr
   15768:	ldr	r0, [r0, #16]
   1576c:	bx	lr
   15770:	ldm	r0, {r3, ip}
   15774:	mov	r0, #0
   15778:	cmp	r3, ip
   1577c:	bcc	15784 <__assert_fail@plt+0x49b0>
   15780:	bx	lr
   15784:	ldr	r2, [r3]
   15788:	cmp	r2, #0
   1578c:	movne	r1, r3
   15790:	movne	r2, #1
   15794:	bne	157a4 <__assert_fail@plt+0x49d0>
   15798:	add	r3, r3, #8
   1579c:	b	15778 <__assert_fail@plt+0x49a4>
   157a0:	add	r2, r2, #1
   157a4:	ldr	r1, [r1, #4]
   157a8:	cmp	r1, #0
   157ac:	bne	157a0 <__assert_fail@plt+0x49cc>
   157b0:	cmp	r0, r2
   157b4:	movcc	r0, r2
   157b8:	b	15798 <__assert_fail@plt+0x49c4>
   157bc:	push	{lr}		; (str lr, [sp, #-4]!)
   157c0:	mov	r3, #0
   157c4:	ldm	r0, {r2, lr}
   157c8:	mov	r1, r3
   157cc:	cmp	r2, lr
   157d0:	bcc	157f4 <__assert_fail@plt+0x4a20>
   157d4:	ldr	r2, [r0, #12]
   157d8:	cmp	r1, r2
   157dc:	ldreq	r0, [r0, #16]
   157e0:	subeq	r0, r0, r3
   157e4:	clzeq	r0, r0
   157e8:	lsreq	r0, r0, #5
   157ec:	movne	r0, #0
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	ldr	ip, [r2]
   157f8:	cmp	ip, #0
   157fc:	addne	r1, r1, #1
   15800:	addne	r3, r3, #1
   15804:	movne	ip, r2
   15808:	bne	15818 <__assert_fail@plt+0x4a44>
   1580c:	add	r2, r2, #8
   15810:	b	157cc <__assert_fail@plt+0x49f8>
   15814:	add	r3, r3, #1
   15818:	ldr	ip, [ip, #4]
   1581c:	cmp	ip, #0
   15820:	bne	15814 <__assert_fail@plt+0x4a40>
   15824:	b	1580c <__assert_fail@plt+0x4a38>
   15828:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1582c:	mov	r4, r1
   15830:	ldr	r5, [r0, #8]
   15834:	ldr	r7, [r0, #12]
   15838:	mov	r6, r0
   1583c:	bl	15770 <__assert_fail@plt+0x499c>
   15840:	ldr	r2, [r6, #16]
   15844:	ldr	r1, [pc, #108]	; 158b8 <__assert_fail@plt+0x4ae4>
   15848:	mov	r8, r0
   1584c:	mov	r0, r4
   15850:	bl	10cb4 <fprintf@plt>
   15854:	mov	r2, r5
   15858:	ldr	r1, [pc, #92]	; 158bc <__assert_fail@plt+0x4ae8>
   1585c:	mov	r0, r4
   15860:	bl	10cb4 <fprintf@plt>
   15864:	vmov	s15, r7
   15868:	mov	r2, r7
   1586c:	ldr	r1, [pc, #76]	; 158c0 <__assert_fail@plt+0x4aec>
   15870:	mov	r0, r4
   15874:	vcvt.f64.u32	d6, s15
   15878:	vldr	d7, [pc, #48]	; 158b0 <__assert_fail@plt+0x4adc>
   1587c:	vmul.f64	d6, d6, d7
   15880:	vmov	s15, r5
   15884:	vcvt.f64.u32	d7, s15
   15888:	vdiv.f64	d5, d6, d7
   1588c:	vstr	d5, [sp]
   15890:	bl	10cb4 <fprintf@plt>
   15894:	mov	r2, r8
   15898:	ldr	r1, [pc, #36]	; 158c4 <__assert_fail@plt+0x4af0>
   1589c:	mov	r0, r4
   158a0:	add	sp, sp, #8
   158a4:	pop	{r4, r5, r6, r7, r8, lr}
   158a8:	b	10cb4 <fprintf@plt>
   158ac:	nop			; (mov r0, r0)
   158b0:	andeq	r0, r0, r0
   158b4:	subsmi	r0, r9, r0
   158b8:	andeq	r7, r1, r0, lsl #1
   158bc:	muleq	r1, r8, r0
   158c0:	strheq	r7, [r1], -r0
   158c4:	ldrdeq	r7, [r1], -r1
   158c8:	push	{r4, r5, r6, lr}
   158cc:	mov	r6, r0
   158d0:	mov	r5, r1
   158d4:	bl	1539c <__assert_fail@plt+0x45c8>
   158d8:	ldr	r3, [r0]
   158dc:	cmp	r3, #0
   158e0:	movne	r4, r0
   158e4:	bne	15910 <__assert_fail@plt+0x4b3c>
   158e8:	mov	r0, #0
   158ec:	pop	{r4, r5, r6, pc}
   158f0:	ldr	r3, [r6, #28]
   158f4:	mov	r0, r5
   158f8:	blx	r3
   158fc:	cmp	r0, #0
   15900:	bne	1591c <__assert_fail@plt+0x4b48>
   15904:	ldr	r4, [r4, #4]
   15908:	cmp	r4, #0
   1590c:	beq	158e8 <__assert_fail@plt+0x4b14>
   15910:	ldr	r1, [r4]
   15914:	cmp	r5, r1
   15918:	bne	158f0 <__assert_fail@plt+0x4b1c>
   1591c:	ldr	r0, [r4]
   15920:	pop	{r4, r5, r6, pc}
   15924:	ldr	r3, [r0, #16]
   15928:	cmp	r3, #0
   1592c:	beq	1595c <__assert_fail@plt+0x4b88>
   15930:	ldr	r3, [r0]
   15934:	ldr	r2, [r0, #4]
   15938:	cmp	r3, r2
   1593c:	bcc	15948 <__assert_fail@plt+0x4b74>
   15940:	push	{r4, lr}
   15944:	bl	10d98 <abort@plt>
   15948:	ldr	r0, [r3]
   1594c:	cmp	r0, #0
   15950:	bne	15960 <__assert_fail@plt+0x4b8c>
   15954:	add	r3, r3, #8
   15958:	b	15938 <__assert_fail@plt+0x4b64>
   1595c:	mov	r0, r3
   15960:	bx	lr
   15964:	push	{r4, r5, r6, lr}
   15968:	mov	r4, r0
   1596c:	mov	r5, r1
   15970:	bl	1539c <__assert_fail@plt+0x45c8>
   15974:	mov	r2, r0
   15978:	mov	r3, r0
   1597c:	ldr	r1, [r3]
   15980:	ldr	r3, [r3, #4]
   15984:	cmp	r5, r1
   15988:	bne	1599c <__assert_fail@plt+0x4bc8>
   1598c:	cmp	r3, #0
   15990:	beq	1599c <__assert_fail@plt+0x4bc8>
   15994:	ldr	r0, [r3]
   15998:	pop	{r4, r5, r6, pc}
   1599c:	cmp	r3, #0
   159a0:	bne	1597c <__assert_fail@plt+0x4ba8>
   159a4:	ldr	r3, [r4, #4]
   159a8:	add	r2, r2, #8
   159ac:	cmp	r2, r3
   159b0:	bcc	159bc <__assert_fail@plt+0x4be8>
   159b4:	mov	r0, #0
   159b8:	pop	{r4, r5, r6, pc}
   159bc:	ldr	r0, [r2]
   159c0:	cmp	r0, #0
   159c4:	beq	159a8 <__assert_fail@plt+0x4bd4>
   159c8:	pop	{r4, r5, r6, pc}
   159cc:	ldr	ip, [r0]
   159d0:	mov	r3, #0
   159d4:	push	{r4, r5, lr}
   159d8:	ldr	lr, [r0, #4]
   159dc:	cmp	ip, lr
   159e0:	bcc	159ec <__assert_fail@plt+0x4c18>
   159e4:	mov	r0, r3
   159e8:	pop	{r4, r5, pc}
   159ec:	ldr	lr, [ip]
   159f0:	cmp	lr, #0
   159f4:	beq	15a20 <__assert_fail@plt+0x4c4c>
   159f8:	add	r4, r1, r3, lsl #2
   159fc:	mov	lr, ip
   15a00:	cmp	r2, r3
   15a04:	bls	159e4 <__assert_fail@plt+0x4c10>
   15a08:	ldr	r5, [lr]
   15a0c:	add	r3, r3, #1
   15a10:	str	r5, [r4], #4
   15a14:	ldr	lr, [lr, #4]
   15a18:	cmp	lr, #0
   15a1c:	bne	15a00 <__assert_fail@plt+0x4c2c>
   15a20:	add	ip, ip, #8
   15a24:	b	159d8 <__assert_fail@plt+0x4c04>
   15a28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a2c:	mov	r7, r0
   15a30:	ldr	r4, [r0]
   15a34:	mov	r8, r1
   15a38:	mov	r9, r2
   15a3c:	mov	r6, #0
   15a40:	ldr	r3, [r7, #4]
   15a44:	cmp	r4, r3
   15a48:	bcc	15a54 <__assert_fail@plt+0x4c80>
   15a4c:	mov	r0, r6
   15a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a54:	ldr	r3, [r4]
   15a58:	cmp	r3, #0
   15a5c:	beq	15a88 <__assert_fail@plt+0x4cb4>
   15a60:	mov	r5, r4
   15a64:	mov	r1, r9
   15a68:	ldr	r0, [r5]
   15a6c:	blx	r8
   15a70:	cmp	r0, #0
   15a74:	beq	15a4c <__assert_fail@plt+0x4c78>
   15a78:	ldr	r5, [r5, #4]
   15a7c:	add	r6, r6, #1
   15a80:	cmp	r5, #0
   15a84:	bne	15a64 <__assert_fail@plt+0x4c90>
   15a88:	add	r4, r4, #8
   15a8c:	b	15a40 <__assert_fail@plt+0x4c6c>
   15a90:	push	{r4, r5, r6, lr}
   15a94:	sub	r4, r0, #1
   15a98:	mov	r5, r1
   15a9c:	mov	r0, #0
   15aa0:	mov	r6, #31
   15aa4:	ldrb	r3, [r4, #1]!
   15aa8:	cmp	r3, #0
   15aac:	bne	15ab4 <__assert_fail@plt+0x4ce0>
   15ab0:	pop	{r4, r5, r6, pc}
   15ab4:	mov	r1, r5
   15ab8:	mla	r0, r6, r0, r3
   15abc:	bl	168a0 <__assert_fail@plt+0x5acc>
   15ac0:	mov	r0, r1
   15ac4:	b	15aa4 <__assert_fail@plt+0x4cd0>
   15ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   15acc:	mov	ip, r0
   15ad0:	ldr	lr, [pc, #16]	; 15ae8 <__assert_fail@plt+0x4d14>
   15ad4:	ldm	lr!, {r0, r1, r2, r3}
   15ad8:	stmia	ip!, {r0, r1, r2, r3}
   15adc:	ldr	r3, [lr]
   15ae0:	str	r3, [ip]
   15ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae8:	andeq	r7, r1, ip, rrx
   15aec:	cmp	r2, #0
   15af0:	push	{r4, r5, r6, r7, r8, lr}
   15af4:	mov	r8, r0
   15af8:	ldr	r7, [pc, #176]	; 15bb0 <__assert_fail@plt+0x4ddc>
   15afc:	mov	r0, #40	; 0x28
   15b00:	movne	r7, r2
   15b04:	cmp	r3, #0
   15b08:	mov	r5, r1
   15b0c:	ldr	r6, [pc, #160]	; 15bb4 <__assert_fail@plt+0x4de0>
   15b10:	movne	r6, r3
   15b14:	bl	16348 <__assert_fail@plt+0x5574>
   15b18:	subs	r4, r0, #0
   15b1c:	beq	15b98 <__assert_fail@plt+0x4dc4>
   15b20:	ldr	r3, [pc, #144]	; 15bb8 <__assert_fail@plt+0x4de4>
   15b24:	cmp	r5, #0
   15b28:	mov	r0, r4
   15b2c:	moveq	r5, r3
   15b30:	str	r5, [r0, #20]!
   15b34:	bl	15578 <__assert_fail@plt+0x47a4>
   15b38:	cmp	r0, #0
   15b3c:	beq	15ba0 <__assert_fail@plt+0x4dcc>
   15b40:	mov	r1, r5
   15b44:	mov	r0, r8
   15b48:	bl	154b0 <__assert_fail@plt+0x46dc>
   15b4c:	cmp	r0, #0
   15b50:	str	r0, [r4, #8]
   15b54:	beq	15ba0 <__assert_fail@plt+0x4dcc>
   15b58:	mov	r1, #8
   15b5c:	bl	16300 <__assert_fail@plt+0x552c>
   15b60:	cmp	r0, #0
   15b64:	str	r0, [r4]
   15b68:	beq	15ba0 <__assert_fail@plt+0x4dcc>
   15b6c:	ldr	r3, [r4, #8]
   15b70:	ldr	r2, [sp, #24]
   15b74:	str	r7, [r4, #24]
   15b78:	add	r0, r0, r3, lsl #3
   15b7c:	mov	r3, #0
   15b80:	str	r0, [r4, #4]
   15b84:	str	r3, [r4, #12]
   15b88:	str	r3, [r4, #16]
   15b8c:	str	r6, [r4, #28]
   15b90:	str	r2, [r4, #32]
   15b94:	str	r3, [r4, #36]	; 0x24
   15b98:	mov	r0, r4
   15b9c:	pop	{r4, r5, r6, r7, r8, pc}
   15ba0:	mov	r0, r4
   15ba4:	bl	12b24 <__assert_fail@plt+0x1d50>
   15ba8:	mov	r4, #0
   15bac:	b	15b98 <__assert_fail@plt+0x4dc4>
   15bb0:	andeq	r5, r1, r8, ror r3
   15bb4:	andeq	r5, r1, ip, lsl #7
   15bb8:	andeq	r7, r1, ip, rrx
   15bbc:	push	{r4, r5, r6, r7, r8, lr}
   15bc0:	mov	r5, r0
   15bc4:	ldr	r4, [r0]
   15bc8:	mov	r7, #0
   15bcc:	add	r4, r4, #8
   15bd0:	ldr	r2, [r5, #4]
   15bd4:	sub	r3, r4, #8
   15bd8:	cmp	r2, r3
   15bdc:	bhi	15bf0 <__assert_fail@plt+0x4e1c>
   15be0:	mov	r3, #0
   15be4:	str	r3, [r5, #12]
   15be8:	str	r3, [r5, #16]
   15bec:	pop	{r4, r5, r6, r7, r8, pc}
   15bf0:	ldr	r3, [r4, #-8]
   15bf4:	cmp	r3, #0
   15bf8:	ldrne	r6, [r4, #-4]
   15bfc:	bne	15c30 <__assert_fail@plt+0x4e5c>
   15c00:	add	r4, r4, #8
   15c04:	b	15bd0 <__assert_fail@plt+0x4dfc>
   15c08:	cmp	r3, #0
   15c0c:	beq	15c18 <__assert_fail@plt+0x4e44>
   15c10:	ldr	r0, [r6]
   15c14:	blx	r3
   15c18:	ldr	r3, [r6, #4]
   15c1c:	ldr	r2, [r5, #36]	; 0x24
   15c20:	str	r7, [r6]
   15c24:	str	r2, [r6, #4]
   15c28:	str	r6, [r5, #36]	; 0x24
   15c2c:	mov	r6, r3
   15c30:	cmp	r6, #0
   15c34:	ldr	r3, [r5, #32]
   15c38:	bne	15c08 <__assert_fail@plt+0x4e34>
   15c3c:	cmp	r3, #0
   15c40:	beq	15c4c <__assert_fail@plt+0x4e78>
   15c44:	ldr	r0, [r4, #-8]
   15c48:	blx	r3
   15c4c:	str	r7, [r4, #-8]
   15c50:	str	r7, [r4, #-4]
   15c54:	b	15c00 <__assert_fail@plt+0x4e2c>
   15c58:	ldr	r3, [r0, #32]
   15c5c:	push	{r4, r5, r6, lr}
   15c60:	cmp	r3, #0
   15c64:	mov	r4, r0
   15c68:	bne	15c9c <__assert_fail@plt+0x4ec8>
   15c6c:	ldr	r5, [r4]
   15c70:	ldr	r3, [r4, #4]
   15c74:	cmp	r5, r3
   15c78:	bcc	15cec <__assert_fail@plt+0x4f18>
   15c7c:	ldr	r0, [r4, #36]	; 0x24
   15c80:	cmp	r0, #0
   15c84:	bne	15d0c <__assert_fail@plt+0x4f38>
   15c88:	ldr	r0, [r4]
   15c8c:	bl	12b24 <__assert_fail@plt+0x1d50>
   15c90:	mov	r0, r4
   15c94:	pop	{r4, r5, r6, lr}
   15c98:	b	12b24 <__assert_fail@plt+0x1d50>
   15c9c:	ldr	r3, [r0, #16]
   15ca0:	cmp	r3, #0
   15ca4:	ldrne	r5, [r0]
   15ca8:	beq	15c6c <__assert_fail@plt+0x4e98>
   15cac:	ldr	r3, [r4, #4]
   15cb0:	cmp	r5, r3
   15cb4:	bcs	15c6c <__assert_fail@plt+0x4e98>
   15cb8:	ldr	r3, [r5]
   15cbc:	cmp	r3, #0
   15cc0:	movne	r6, r5
   15cc4:	bne	15cd0 <__assert_fail@plt+0x4efc>
   15cc8:	add	r5, r5, #8
   15ccc:	b	15cac <__assert_fail@plt+0x4ed8>
   15cd0:	ldr	r0, [r6]
   15cd4:	ldr	r3, [r4, #32]
   15cd8:	blx	r3
   15cdc:	ldr	r6, [r6, #4]
   15ce0:	cmp	r6, #0
   15ce4:	bne	15cd0 <__assert_fail@plt+0x4efc>
   15ce8:	b	15cc8 <__assert_fail@plt+0x4ef4>
   15cec:	ldr	r0, [r5, #4]
   15cf0:	cmp	r0, #0
   15cf4:	addeq	r5, r5, #8
   15cf8:	beq	15c70 <__assert_fail@plt+0x4e9c>
   15cfc:	ldr	r6, [r0, #4]
   15d00:	bl	12b24 <__assert_fail@plt+0x1d50>
   15d04:	mov	r0, r6
   15d08:	b	15cf0 <__assert_fail@plt+0x4f1c>
   15d0c:	ldr	r5, [r0, #4]
   15d10:	bl	12b24 <__assert_fail@plt+0x1d50>
   15d14:	mov	r0, r5
   15d18:	b	15c80 <__assert_fail@plt+0x4eac>
   15d1c:	push	{r4, r5, lr}
   15d20:	mov	r4, r0
   15d24:	sub	sp, sp, #44	; 0x2c
   15d28:	mov	r0, r1
   15d2c:	ldr	r1, [r4, #20]
   15d30:	bl	154b0 <__assert_fail@plt+0x46dc>
   15d34:	subs	r5, r0, #0
   15d38:	bne	15d4c <__assert_fail@plt+0x4f78>
   15d3c:	mov	r5, #0
   15d40:	mov	r0, r5
   15d44:	add	sp, sp, #44	; 0x2c
   15d48:	pop	{r4, r5, pc}
   15d4c:	ldr	r3, [r4, #8]
   15d50:	cmp	r5, r3
   15d54:	beq	15e3c <__assert_fail@plt+0x5068>
   15d58:	mov	r1, #8
   15d5c:	bl	16300 <__assert_fail@plt+0x552c>
   15d60:	cmp	r0, #0
   15d64:	str	r0, [sp]
   15d68:	beq	15d3c <__assert_fail@plt+0x4f68>
   15d6c:	ldr	r3, [r4, #20]
   15d70:	add	r0, r0, r5, lsl #3
   15d74:	str	r3, [sp, #20]
   15d78:	ldr	r3, [r4, #24]
   15d7c:	mov	r2, #0
   15d80:	str	r3, [sp, #24]
   15d84:	ldr	r3, [r4, #28]
   15d88:	str	r0, [sp, #4]
   15d8c:	str	r3, [sp, #28]
   15d90:	ldr	r3, [r4, #32]
   15d94:	mov	r1, r4
   15d98:	str	r3, [sp, #32]
   15d9c:	ldr	r3, [r4, #36]	; 0x24
   15da0:	mov	r0, sp
   15da4:	str	r5, [sp, #8]
   15da8:	str	r2, [sp, #12]
   15dac:	str	r2, [sp, #16]
   15db0:	str	r3, [sp, #36]	; 0x24
   15db4:	bl	15628 <__assert_fail@plt+0x4854>
   15db8:	subs	r5, r0, #0
   15dbc:	beq	15df4 <__assert_fail@plt+0x5020>
   15dc0:	ldr	r0, [r4]
   15dc4:	bl	12b24 <__assert_fail@plt+0x1d50>
   15dc8:	ldr	r3, [sp]
   15dcc:	str	r3, [r4]
   15dd0:	ldr	r3, [sp, #4]
   15dd4:	str	r3, [r4, #4]
   15dd8:	ldr	r3, [sp, #8]
   15ddc:	str	r3, [r4, #8]
   15de0:	ldr	r3, [sp, #12]
   15de4:	str	r3, [r4, #12]
   15de8:	ldr	r3, [sp, #36]	; 0x24
   15dec:	str	r3, [r4, #36]	; 0x24
   15df0:	b	15d40 <__assert_fail@plt+0x4f6c>
   15df4:	ldr	r3, [sp, #36]	; 0x24
   15df8:	mov	r2, #1
   15dfc:	str	r3, [r4, #36]	; 0x24
   15e00:	mov	r1, sp
   15e04:	mov	r0, r4
   15e08:	bl	15628 <__assert_fail@plt+0x4854>
   15e0c:	cmp	r0, #0
   15e10:	bne	15e18 <__assert_fail@plt+0x5044>
   15e14:	bl	10d98 <abort@plt>
   15e18:	mov	r2, r5
   15e1c:	mov	r1, sp
   15e20:	mov	r0, r4
   15e24:	bl	15628 <__assert_fail@plt+0x4854>
   15e28:	cmp	r0, #0
   15e2c:	beq	15e14 <__assert_fail@plt+0x5040>
   15e30:	ldr	r0, [sp]
   15e34:	bl	12b24 <__assert_fail@plt+0x1d50>
   15e38:	b	15d40 <__assert_fail@plt+0x4f6c>
   15e3c:	mov	r5, #1
   15e40:	b	15d40 <__assert_fail@plt+0x4f6c>
   15e44:	push	{r0, r1, r4, r5, r6, lr}
   15e48:	subs	r6, r1, #0
   15e4c:	bne	15e54 <__assert_fail@plt+0x5080>
   15e50:	bl	10d98 <abort@plt>
   15e54:	mov	r5, r2
   15e58:	mov	r3, #0
   15e5c:	add	r2, sp, #4
   15e60:	mov	r4, r0
   15e64:	bl	153d0 <__assert_fail@plt+0x45fc>
   15e68:	cmp	r0, #0
   15e6c:	beq	15e84 <__assert_fail@plt+0x50b0>
   15e70:	cmp	r5, #0
   15e74:	strne	r0, [r5]
   15e78:	movne	r0, #0
   15e7c:	moveq	r0, r5
   15e80:	b	15f04 <__assert_fail@plt+0x5130>
   15e84:	vldr	s15, [r4, #12]
   15e88:	ldr	r3, [r4, #20]
   15e8c:	vcvt.f32.u32	s14, s15
   15e90:	vldr	s15, [r4, #8]
   15e94:	vldr	s13, [r3, #8]
   15e98:	vcvt.f32.u32	s15, s15
   15e9c:	vmul.f32	s15, s15, s13
   15ea0:	vcmpe.f32	s14, s15
   15ea4:	vmrs	APSR_nzcv, fpscr
   15ea8:	ble	15f40 <__assert_fail@plt+0x516c>
   15eac:	add	r0, r4, #20
   15eb0:	bl	15578 <__assert_fail@plt+0x47a4>
   15eb4:	vldr	s15, [r4, #8]
   15eb8:	ldr	r3, [r4, #20]
   15ebc:	vldr	s14, [r4, #12]
   15ec0:	vcvt.f32.u32	s15, s15
   15ec4:	vldr	s13, [r3, #8]
   15ec8:	vcvt.f32.u32	s14, s14
   15ecc:	vmul.f32	s12, s13, s15
   15ed0:	vcmpe.f32	s14, s12
   15ed4:	vmrs	APSR_nzcv, fpscr
   15ed8:	ble	15f40 <__assert_fail@plt+0x516c>
   15edc:	vldr	s14, [r3, #12]
   15ee0:	ldrb	r2, [r3, #16]
   15ee4:	vmul.f32	s15, s15, s14
   15ee8:	cmp	r2, #0
   15eec:	vldr	s14, [pc, #200]	; 15fbc <__assert_fail@plt+0x51e8>
   15ef0:	vmuleq.f32	s15, s15, s13
   15ef4:	vcmpe.f32	s15, s14
   15ef8:	vmrs	APSR_nzcv, fpscr
   15efc:	blt	15f0c <__assert_fail@plt+0x5138>
   15f00:	mvn	r0, #0
   15f04:	add	sp, sp, #8
   15f08:	pop	{r4, r5, r6, pc}
   15f0c:	vcvt.u32.f32	s15, s15
   15f10:	mov	r0, r4
   15f14:	vmov	r1, s15
   15f18:	bl	15d1c <__assert_fail@plt+0x4f48>
   15f1c:	cmp	r0, #0
   15f20:	beq	15f00 <__assert_fail@plt+0x512c>
   15f24:	mov	r3, #0
   15f28:	add	r2, sp, #4
   15f2c:	mov	r1, r6
   15f30:	mov	r0, r4
   15f34:	bl	153d0 <__assert_fail@plt+0x45fc>
   15f38:	cmp	r0, #0
   15f3c:	bne	15e50 <__assert_fail@plt+0x507c>
   15f40:	ldr	r3, [sp, #4]
   15f44:	ldr	r2, [r3]
   15f48:	cmp	r2, #0
   15f4c:	beq	15f9c <__assert_fail@plt+0x51c8>
   15f50:	ldr	r0, [r4, #36]	; 0x24
   15f54:	cmp	r0, #0
   15f58:	ldrne	r3, [r0, #4]
   15f5c:	strne	r3, [r4, #36]	; 0x24
   15f60:	bne	15f74 <__assert_fail@plt+0x51a0>
   15f64:	mov	r0, #8
   15f68:	bl	16348 <__assert_fail@plt+0x5574>
   15f6c:	cmp	r0, #0
   15f70:	beq	15f00 <__assert_fail@plt+0x512c>
   15f74:	ldr	r3, [sp, #4]
   15f78:	str	r6, [r0]
   15f7c:	ldr	r2, [r3, #4]
   15f80:	str	r2, [r0, #4]
   15f84:	str	r0, [r3, #4]
   15f88:	ldr	r3, [r4, #16]
   15f8c:	add	r3, r3, #1
   15f90:	str	r3, [r4, #16]
   15f94:	mov	r0, #1
   15f98:	b	15f04 <__assert_fail@plt+0x5130>
   15f9c:	str	r6, [r3]
   15fa0:	ldr	r3, [r4, #16]
   15fa4:	add	r3, r3, #1
   15fa8:	str	r3, [r4, #16]
   15fac:	ldr	r3, [r4, #12]
   15fb0:	add	r3, r3, #1
   15fb4:	str	r3, [r4, #12]
   15fb8:	b	15f94 <__assert_fail@plt+0x51c0>
   15fbc:	svcmi	0x00800000
   15fc0:	push	{r0, r1, r4, lr}
   15fc4:	add	r2, sp, #4
   15fc8:	mov	r4, r1
   15fcc:	bl	15e44 <__assert_fail@plt+0x5070>
   15fd0:	cmn	r0, #1
   15fd4:	moveq	r0, #0
   15fd8:	beq	15fe8 <__assert_fail@plt+0x5214>
   15fdc:	cmp	r0, #0
   15fe0:	movne	r0, r4
   15fe4:	ldreq	r0, [sp, #4]
   15fe8:	add	sp, sp, #8
   15fec:	pop	{r4, pc}
   15ff0:	push	{r0, r1, r4, r5, r6, lr}
   15ff4:	mov	r3, #1
   15ff8:	add	r2, sp, #4
   15ffc:	mov	r4, r0
   16000:	bl	153d0 <__assert_fail@plt+0x45fc>
   16004:	subs	r5, r0, #0
   16008:	beq	160c0 <__assert_fail@plt+0x52ec>
   1600c:	ldr	r3, [r4, #16]
   16010:	sub	r3, r3, #1
   16014:	str	r3, [r4, #16]
   16018:	ldr	r3, [sp, #4]
   1601c:	ldr	r3, [r3]
   16020:	cmp	r3, #0
   16024:	bne	160c0 <__assert_fail@plt+0x52ec>
   16028:	vldr	s14, [r4, #8]
   1602c:	ldr	r3, [r4, #12]
   16030:	sub	r3, r3, #1
   16034:	vcvt.f32.u32	s14, s14
   16038:	vmov	s15, r3
   1603c:	str	r3, [r4, #12]
   16040:	ldr	r3, [r4, #20]
   16044:	vcvt.f32.u32	s15, s15
   16048:	vldr	s13, [r3]
   1604c:	vmul.f32	s14, s14, s13
   16050:	vcmpe.f32	s15, s14
   16054:	vmrs	APSR_nzcv, fpscr
   16058:	bpl	160c0 <__assert_fail@plt+0x52ec>
   1605c:	add	r0, r4, #20
   16060:	bl	15578 <__assert_fail@plt+0x47a4>
   16064:	vldr	s15, [r4, #8]
   16068:	vldr	s14, [r4, #12]
   1606c:	ldr	r3, [r4, #20]
   16070:	vcvt.f32.u32	s15, s15
   16074:	vcvt.f32.u32	s13, s14
   16078:	vldr	s14, [r3]
   1607c:	vmul.f32	s14, s15, s14
   16080:	vcmpe.f32	s13, s14
   16084:	vmrs	APSR_nzcv, fpscr
   16088:	bpl	160c0 <__assert_fail@plt+0x52ec>
   1608c:	vldr	s14, [r3, #4]
   16090:	ldrb	r2, [r3, #16]
   16094:	mov	r0, r4
   16098:	vmul.f32	s15, s15, s14
   1609c:	cmp	r2, #0
   160a0:	vldreq	s14, [r3, #8]
   160a4:	vmuleq.f32	s15, s15, s14
   160a8:	vcvt.u32.f32	s15, s15
   160ac:	vmov	r1, s15
   160b0:	bl	15d1c <__assert_fail@plt+0x4f48>
   160b4:	cmp	r0, #0
   160b8:	ldreq	r0, [r4, #36]	; 0x24
   160bc:	beq	160d8 <__assert_fail@plt+0x5304>
   160c0:	mov	r0, r5
   160c4:	add	sp, sp, #8
   160c8:	pop	{r4, r5, r6, pc}
   160cc:	ldr	r6, [r0, #4]
   160d0:	bl	12b24 <__assert_fail@plt+0x1d50>
   160d4:	mov	r0, r6
   160d8:	cmp	r0, #0
   160dc:	bne	160cc <__assert_fail@plt+0x52f8>
   160e0:	str	r0, [r4, #36]	; 0x24
   160e4:	b	160c0 <__assert_fail@plt+0x52ec>
   160e8:	b	15ff0 <__assert_fail@plt+0x521c>
   160ec:	mov	r3, #1
   160f0:	strb	r3, [r0, #28]
   160f4:	mov	r3, #0
   160f8:	str	r3, [r0, #20]
   160fc:	str	r3, [r0, #24]
   16100:	str	r1, [r0]
   16104:	str	r1, [r0, #4]
   16108:	str	r1, [r0, #8]
   1610c:	str	r1, [r0, #12]
   16110:	str	r1, [r0, #16]
   16114:	bx	lr
   16118:	ldrb	r0, [r0, #28]
   1611c:	bx	lr
   16120:	ldrb	ip, [r0, #28]
   16124:	ldr	r3, [r0, #20]
   16128:	mov	r2, r0
   1612c:	eor	ip, ip, #1
   16130:	add	r3, ip, r3
   16134:	and	r3, r3, #3
   16138:	ldr	r0, [r0, r3, lsl #2]
   1613c:	str	r1, [r2, r3, lsl #2]
   16140:	ldr	r1, [r2, #24]
   16144:	str	r3, [r2, #20]
   16148:	cmp	r3, r1
   1614c:	addeq	r3, ip, r3
   16150:	andeq	r3, r3, #3
   16154:	streq	r3, [r2, #24]
   16158:	mov	r3, #0
   1615c:	strb	r3, [r2, #28]
   16160:	bx	lr
   16164:	ldrb	r2, [r0, #28]
   16168:	cmp	r2, #0
   1616c:	beq	16178 <__assert_fail@plt+0x53a4>
   16170:	push	{r4, lr}
   16174:	bl	10d98 <abort@plt>
   16178:	mov	r3, r0
   1617c:	ldr	r2, [r0, #20]
   16180:	ldr	r1, [r3, #16]
   16184:	ldr	r0, [r0, r2, lsl #2]
   16188:	str	r1, [r3, r2, lsl #2]
   1618c:	ldr	r1, [r3, #24]
   16190:	cmp	r2, r1
   16194:	addne	r2, r2, #3
   16198:	moveq	r2, #1
   1619c:	andne	r2, r2, #3
   161a0:	strbeq	r2, [r3, #28]
   161a4:	strne	r2, [r3, #20]
   161a8:	bx	lr
   161ac:	push	{r4, r5, r6, r8, r9, lr}
   161b0:	mov	r4, r0
   161b4:	mov	r5, r1
   161b8:	add	r6, r2, #20
   161bc:	mov	r8, #10
   161c0:	mov	r9, #0
   161c4:	mov	r3, #0
   161c8:	strb	r3, [r2, #20]
   161cc:	mov	r0, r4
   161d0:	mov	r1, r5
   161d4:	mov	r2, r8
   161d8:	mov	r3, r9
   161dc:	bl	16bd4 <__assert_fail@plt+0x5e00>
   161e0:	mov	r3, r9
   161e4:	mov	r0, r4
   161e8:	mov	r1, r5
   161ec:	add	r2, r2, #48	; 0x30
   161f0:	strb	r2, [r6, #-1]!
   161f4:	mov	r2, r8
   161f8:	bl	16bd4 <__assert_fail@plt+0x5e00>
   161fc:	mov	r4, r0
   16200:	mov	r5, r1
   16204:	orrs	r3, r4, r5
   16208:	bne	161cc <__assert_fail@plt+0x53f8>
   1620c:	mov	r0, r6
   16210:	pop	{r4, r5, r6, r8, r9, pc}
   16214:	push	{r1, r2, r3}
   16218:	push	{r0, r1, lr}
   1621c:	add	r3, sp, #16
   16220:	ldr	r2, [sp, #16]
   16224:	ldr	r1, [sp, #12]
   16228:	str	r3, [sp, #4]
   1622c:	bl	10c24 <ioctl@plt>
   16230:	add	sp, sp, #8
   16234:	pop	{lr}		; (ldr lr, [sp], #4)
   16238:	add	sp, sp, #12
   1623c:	bx	lr
   16240:	push	{r2, r3}
   16244:	push	{r0, r1, r2, lr}
   16248:	ldr	r2, [sp, #16]
   1624c:	ands	r3, r2, #64	; 0x40
   16250:	addne	r3, sp, #20
   16254:	strne	r3, [sp, #4]
   16258:	ldrne	r3, [sp, #20]
   1625c:	bl	10ca8 <openat64@plt>
   16260:	bl	162c4 <__assert_fail@plt+0x54f0>
   16264:	add	sp, sp, #12
   16268:	pop	{lr}		; (ldr lr, [sp], #4)
   1626c:	add	sp, sp, #8
   16270:	bx	lr
   16274:	orr	r2, r2, #540672	; 0x84000
   16278:	push	{r4, r5, r6, r7, r8, lr}
   1627c:	orr	r2, r2, #2304	; 0x900
   16280:	mov	r5, r3
   16284:	bl	16240 <__assert_fail@plt+0x546c>
   16288:	subs	r6, r0, #0
   1628c:	movlt	r4, #0
   16290:	blt	162bc <__assert_fail@plt+0x54e8>
   16294:	bl	10d20 <fdopendir@plt>
   16298:	subs	r4, r0, #0
   1629c:	strne	r6, [r5]
   162a0:	bne	162bc <__assert_fail@plt+0x54e8>
   162a4:	bl	10cc0 <__errno_location@plt>
   162a8:	ldr	r7, [r0]
   162ac:	mov	r5, r0
   162b0:	mov	r0, r6
   162b4:	bl	10da4 <close@plt>
   162b8:	str	r7, [r5]
   162bc:	mov	r0, r4
   162c0:	pop	{r4, r5, r6, r7, r8, pc}
   162c4:	cmp	r0, #2
   162c8:	push	{r4, r5, r6, r7, r8, lr}
   162cc:	mov	r4, r0
   162d0:	bhi	162f8 <__assert_fail@plt+0x5524>
   162d4:	bl	166a8 <__assert_fail@plt+0x58d4>
   162d8:	mov	r6, r0
   162dc:	bl	10cc0 <__errno_location@plt>
   162e0:	ldr	r7, [r0]
   162e4:	mov	r5, r0
   162e8:	mov	r0, r4
   162ec:	mov	r4, r6
   162f0:	bl	10da4 <close@plt>
   162f4:	str	r7, [r5]
   162f8:	mov	r0, r4
   162fc:	pop	{r4, r5, r6, r7, r8, pc}
   16300:	cmp	r1, #0
   16304:	cmpne	r0, #0
   16308:	moveq	r1, #1
   1630c:	moveq	r0, r1
   16310:	umull	r2, r3, r0, r1
   16314:	adds	r3, r3, #0
   16318:	movne	r3, #1
   1631c:	cmp	r2, #0
   16320:	blt	16330 <__assert_fail@plt+0x555c>
   16324:	cmp	r3, #0
   16328:	bne	16330 <__assert_fail@plt+0x555c>
   1632c:	b	10b64 <calloc@plt>
   16330:	push	{r4, lr}
   16334:	bl	10cc0 <__errno_location@plt>
   16338:	mov	r3, #12
   1633c:	str	r3, [r0]
   16340:	mov	r0, #0
   16344:	pop	{r4, pc}
   16348:	cmp	r0, #0
   1634c:	mov	r3, #0
   16350:	moveq	r0, #1
   16354:	adds	r3, r3, #0
   16358:	movne	r3, #1
   1635c:	cmp	r0, #0
   16360:	blt	16370 <__assert_fail@plt+0x559c>
   16364:	cmp	r3, #0
   16368:	bne	16370 <__assert_fail@plt+0x559c>
   1636c:	b	10c54 <malloc@plt>
   16370:	push	{r4, lr}
   16374:	bl	10cc0 <__errno_location@plt>
   16378:	mov	r3, #12
   1637c:	str	r3, [r0]
   16380:	mov	r0, #0
   16384:	pop	{r4, pc}
   16388:	cmp	r0, #0
   1638c:	push	{r4, lr}
   16390:	mov	r4, r1
   16394:	bne	163a4 <__assert_fail@plt+0x55d0>
   16398:	mov	r0, r1
   1639c:	pop	{r4, lr}
   163a0:	b	16348 <__assert_fail@plt+0x5574>
   163a4:	cmp	r1, #0
   163a8:	bne	163b8 <__assert_fail@plt+0x55e4>
   163ac:	bl	12b24 <__assert_fail@plt+0x1d50>
   163b0:	mov	r0, #0
   163b4:	pop	{r4, pc}
   163b8:	cmp	r1, #0
   163bc:	blt	163cc <__assert_fail@plt+0x55f8>
   163c0:	mov	r3, #0
   163c4:	cmp	r3, r3
   163c8:	beq	163dc <__assert_fail@plt+0x5608>
   163cc:	bl	10cc0 <__errno_location@plt>
   163d0:	mov	r3, #12
   163d4:	str	r3, [r0]
   163d8:	b	163b0 <__assert_fail@plt+0x55dc>
   163dc:	pop	{r4, lr}
   163e0:	b	10be8 <realloc@plt>
   163e4:	mov	r3, #0
   163e8:	mov	r2, #0
   163ec:	strd	r2, [r0, #16]
   163f0:	ldr	r3, [pc, #4]	; 163fc <__assert_fail@plt+0x5628>
   163f4:	str	r3, [r0, #24]
   163f8:	bx	lr
   163fc:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   16400:	ldr	r2, [r0, #24]
   16404:	ldr	r3, [pc, #148]	; 164a0 <__assert_fail@plt+0x56cc>
   16408:	push	{r4, r5, r6, r7, r8, lr}
   1640c:	cmp	r2, r3
   16410:	beq	16428 <__assert_fail@plt+0x5654>
   16414:	ldr	r3, [pc, #136]	; 164a4 <__assert_fail@plt+0x56d0>
   16418:	mov	r2, #60	; 0x3c
   1641c:	ldr	r1, [pc, #132]	; 164a8 <__assert_fail@plt+0x56d4>
   16420:	ldr	r0, [pc, #132]	; 164ac <__assert_fail@plt+0x56d8>
   16424:	bl	10dd4 <__assert_fail@plt>
   16428:	ldrd	r6, [r0, #16]
   1642c:	orrs	r3, r6, r7
   16430:	beq	16464 <__assert_fail@plt+0x5690>
   16434:	ldrd	r4, [r1, #96]	; 0x60
   16438:	ldrd	r2, [r0]
   1643c:	cmp	r5, r3
   16440:	cmpeq	r4, r2
   16444:	bne	16464 <__assert_fail@plt+0x5690>
   16448:	ldrd	r4, [r1]
   1644c:	ldrd	r2, [r0, #8]
   16450:	cmp	r5, r3
   16454:	cmpeq	r4, r2
   16458:	bne	16464 <__assert_fail@plt+0x5690>
   1645c:	mov	r0, #1
   16460:	pop	{r4, r5, r6, r7, r8, pc}
   16464:	adds	r2, r6, #1
   16468:	adc	r3, r7, #0
   1646c:	and	r6, r6, r2
   16470:	and	r7, r7, r3
   16474:	orrs	ip, r6, r7
   16478:	strd	r2, [r0, #16]
   1647c:	bne	16498 <__assert_fail@plt+0x56c4>
   16480:	orrs	r3, r2, r3
   16484:	beq	1645c <__assert_fail@plt+0x5688>
   16488:	ldrd	r2, [r1]
   1648c:	strd	r2, [r0, #8]
   16490:	ldrd	r2, [r1, #96]	; 0x60
   16494:	strd	r2, [r0]
   16498:	mov	r0, #0
   1649c:	pop	{r4, r5, r6, r7, r8, pc}
   164a0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   164a4:	andeq	r7, r1, r9, ror #1
   164a8:	strdeq	r7, [r1], -r5
   164ac:	andeq	r7, r1, r3, lsl #2
   164b0:	push	{r1, r2, r3}
   164b4:	push	{r0, r1, r4, r5, r6, r7, lr}
   164b8:	add	r2, sp, #32
   164bc:	ldr	r1, [sp, #28]
   164c0:	str	r2, [sp, #4]
   164c4:	cmp	r1, #0
   164c8:	beq	1650c <__assert_fail@plt+0x5738>
   164cc:	ldr	r3, [pc, #396]	; 16660 <__assert_fail@plt+0x588c>
   164d0:	mov	r6, r0
   164d4:	cmp	r1, r3
   164d8:	beq	16518 <__assert_fail@plt+0x5744>
   164dc:	cmp	r1, #11
   164e0:	beq	164fc <__assert_fail@plt+0x5728>
   164e4:	bgt	16628 <__assert_fail@plt+0x5854>
   164e8:	cmp	r1, #3
   164ec:	beq	164fc <__assert_fail@plt+0x5728>
   164f0:	bgt	16604 <__assert_fail@plt+0x5830>
   164f4:	cmp	r1, #1
   164f8:	bne	16610 <__assert_fail@plt+0x583c>
   164fc:	mov	r0, r6
   16500:	bl	10cf0 <fcntl64@plt>
   16504:	mov	r4, r0
   16508:	b	165c4 <__assert_fail@plt+0x57f0>
   1650c:	ldr	r2, [sp, #32]
   16510:	bl	10cf0 <fcntl64@plt>
   16514:	b	16504 <__assert_fail@plt+0x5730>
   16518:	ldr	r5, [pc, #324]	; 16664 <__assert_fail@plt+0x5890>
   1651c:	add	r3, sp, #36	; 0x24
   16520:	str	r3, [sp, #4]
   16524:	ldr	r3, [r5]
   16528:	ldr	r7, [r2]
   1652c:	cmp	r3, #0
   16530:	mov	r2, r7
   16534:	blt	165d8 <__assert_fail@plt+0x5804>
   16538:	bl	10cf0 <fcntl64@plt>
   1653c:	subs	r4, r0, #0
   16540:	bge	16554 <__assert_fail@plt+0x5780>
   16544:	bl	10cc0 <__errno_location@plt>
   16548:	ldr	r3, [r0]
   1654c:	cmp	r3, #22
   16550:	beq	165a4 <__assert_fail@plt+0x57d0>
   16554:	mov	r3, #1
   16558:	str	r3, [r5]
   1655c:	cmp	r4, #0
   16560:	blt	165c4 <__assert_fail@plt+0x57f0>
   16564:	ldr	r5, [r5]
   16568:	cmn	r5, #1
   1656c:	bne	165c4 <__assert_fail@plt+0x57f0>
   16570:	mov	r1, #1
   16574:	mov	r0, r4
   16578:	bl	10cf0 <fcntl64@plt>
   1657c:	subs	r2, r0, #0
   16580:	bge	165e8 <__assert_fail@plt+0x5814>
   16584:	bl	10cc0 <__errno_location@plt>
   16588:	ldr	r7, [r0]
   1658c:	mov	r6, r0
   16590:	mov	r0, r4
   16594:	bl	10da4 <close@plt>
   16598:	mov	r4, r5
   1659c:	str	r7, [r6]
   165a0:	b	165c4 <__assert_fail@plt+0x57f0>
   165a4:	mov	r2, r7
   165a8:	mov	r1, #0
   165ac:	mov	r0, r6
   165b0:	bl	10cf0 <fcntl64@plt>
   165b4:	subs	r4, r0, #0
   165b8:	mvnge	r3, #0
   165bc:	strge	r3, [r5]
   165c0:	bge	16564 <__assert_fail@plt+0x5790>
   165c4:	mov	r0, r4
   165c8:	add	sp, sp, #8
   165cc:	pop	{r4, r5, r6, r7, lr}
   165d0:	add	sp, sp, #12
   165d4:	bx	lr
   165d8:	mov	r1, #0
   165dc:	bl	10cf0 <fcntl64@plt>
   165e0:	mov	r4, r0
   165e4:	b	1655c <__assert_fail@plt+0x5788>
   165e8:	orr	r2, r2, #1
   165ec:	mov	r1, #2
   165f0:	mov	r0, r4
   165f4:	bl	10cf0 <fcntl64@plt>
   165f8:	cmn	r0, #1
   165fc:	bne	165c4 <__assert_fail@plt+0x57f0>
   16600:	b	16584 <__assert_fail@plt+0x57b0>
   16604:	cmp	r1, #8
   16608:	beq	16610 <__assert_fail@plt+0x583c>
   1660c:	bgt	16620 <__assert_fail@plt+0x584c>
   16610:	ldr	r3, [sp, #4]
   16614:	mov	r0, r6
   16618:	ldr	r2, [r3]
   1661c:	b	16510 <__assert_fail@plt+0x573c>
   16620:	cmp	r1, #9
   16624:	b	164f8 <__assert_fail@plt+0x5724>
   16628:	ldr	r2, [pc, #56]	; 16668 <__assert_fail@plt+0x5894>
   1662c:	cmp	r1, r2
   16630:	bgt	16648 <__assert_fail@plt+0x5874>
   16634:	cmp	r1, r3
   16638:	ldrlt	r3, [pc, #44]	; 1666c <__assert_fail@plt+0x5898>
   1663c:	bge	16610 <__assert_fail@plt+0x583c>
   16640:	cmp	r1, r3
   16644:	b	164f8 <__assert_fail@plt+0x5724>
   16648:	ldr	r3, [pc, #32]	; 16670 <__assert_fail@plt+0x589c>
   1664c:	cmp	r1, r3
   16650:	beq	16610 <__assert_fail@plt+0x583c>
   16654:	blt	164fc <__assert_fail@plt+0x5728>
   16658:	add	r3, r3, #1
   1665c:	b	16640 <__assert_fail@plt+0x586c>
   16660:	andeq	r0, r0, r6, lsl #8
   16664:	andeq	r8, r2, r0, asr r1
   16668:	andeq	r0, r0, r7, lsl #8
   1666c:	andeq	r0, r0, r1, lsl #8
   16670:	andeq	r0, r0, r9, lsl #8
   16674:	push	{r1, r2, r3}
   16678:	push	{r0, r1, lr}
   1667c:	ldr	r1, [sp, #12]
   16680:	ands	r2, r1, #64	; 0x40
   16684:	addne	r3, sp, #16
   16688:	ldrne	r2, [sp, #16]
   1668c:	strne	r3, [sp, #4]
   16690:	bl	10c3c <open64@plt>
   16694:	bl	162c4 <__assert_fail@plt+0x54f0>
   16698:	add	sp, sp, #8
   1669c:	pop	{lr}		; (ldr lr, [sp], #4)
   166a0:	add	sp, sp, #12
   166a4:	bx	lr
   166a8:	mov	r2, #3
   166ac:	mov	r1, #0
   166b0:	b	164b0 <__assert_fail@plt+0x56dc>
   166b4:	subs	r2, r1, #1
   166b8:	bxeq	lr
   166bc:	bcc	16894 <__assert_fail@plt+0x5ac0>
   166c0:	cmp	r0, r1
   166c4:	bls	16878 <__assert_fail@plt+0x5aa4>
   166c8:	tst	r1, r2
   166cc:	beq	16884 <__assert_fail@plt+0x5ab0>
   166d0:	clz	r3, r0
   166d4:	clz	r2, r1
   166d8:	sub	r3, r2, r3
   166dc:	rsbs	r3, r3, #31
   166e0:	addne	r3, r3, r3, lsl #1
   166e4:	mov	r2, #0
   166e8:	addne	pc, pc, r3, lsl #2
   166ec:	nop			; (mov r0, r0)
   166f0:	cmp	r0, r1, lsl #31
   166f4:	adc	r2, r2, r2
   166f8:	subcs	r0, r0, r1, lsl #31
   166fc:	cmp	r0, r1, lsl #30
   16700:	adc	r2, r2, r2
   16704:	subcs	r0, r0, r1, lsl #30
   16708:	cmp	r0, r1, lsl #29
   1670c:	adc	r2, r2, r2
   16710:	subcs	r0, r0, r1, lsl #29
   16714:	cmp	r0, r1, lsl #28
   16718:	adc	r2, r2, r2
   1671c:	subcs	r0, r0, r1, lsl #28
   16720:	cmp	r0, r1, lsl #27
   16724:	adc	r2, r2, r2
   16728:	subcs	r0, r0, r1, lsl #27
   1672c:	cmp	r0, r1, lsl #26
   16730:	adc	r2, r2, r2
   16734:	subcs	r0, r0, r1, lsl #26
   16738:	cmp	r0, r1, lsl #25
   1673c:	adc	r2, r2, r2
   16740:	subcs	r0, r0, r1, lsl #25
   16744:	cmp	r0, r1, lsl #24
   16748:	adc	r2, r2, r2
   1674c:	subcs	r0, r0, r1, lsl #24
   16750:	cmp	r0, r1, lsl #23
   16754:	adc	r2, r2, r2
   16758:	subcs	r0, r0, r1, lsl #23
   1675c:	cmp	r0, r1, lsl #22
   16760:	adc	r2, r2, r2
   16764:	subcs	r0, r0, r1, lsl #22
   16768:	cmp	r0, r1, lsl #21
   1676c:	adc	r2, r2, r2
   16770:	subcs	r0, r0, r1, lsl #21
   16774:	cmp	r0, r1, lsl #20
   16778:	adc	r2, r2, r2
   1677c:	subcs	r0, r0, r1, lsl #20
   16780:	cmp	r0, r1, lsl #19
   16784:	adc	r2, r2, r2
   16788:	subcs	r0, r0, r1, lsl #19
   1678c:	cmp	r0, r1, lsl #18
   16790:	adc	r2, r2, r2
   16794:	subcs	r0, r0, r1, lsl #18
   16798:	cmp	r0, r1, lsl #17
   1679c:	adc	r2, r2, r2
   167a0:	subcs	r0, r0, r1, lsl #17
   167a4:	cmp	r0, r1, lsl #16
   167a8:	adc	r2, r2, r2
   167ac:	subcs	r0, r0, r1, lsl #16
   167b0:	cmp	r0, r1, lsl #15
   167b4:	adc	r2, r2, r2
   167b8:	subcs	r0, r0, r1, lsl #15
   167bc:	cmp	r0, r1, lsl #14
   167c0:	adc	r2, r2, r2
   167c4:	subcs	r0, r0, r1, lsl #14
   167c8:	cmp	r0, r1, lsl #13
   167cc:	adc	r2, r2, r2
   167d0:	subcs	r0, r0, r1, lsl #13
   167d4:	cmp	r0, r1, lsl #12
   167d8:	adc	r2, r2, r2
   167dc:	subcs	r0, r0, r1, lsl #12
   167e0:	cmp	r0, r1, lsl #11
   167e4:	adc	r2, r2, r2
   167e8:	subcs	r0, r0, r1, lsl #11
   167ec:	cmp	r0, r1, lsl #10
   167f0:	adc	r2, r2, r2
   167f4:	subcs	r0, r0, r1, lsl #10
   167f8:	cmp	r0, r1, lsl #9
   167fc:	adc	r2, r2, r2
   16800:	subcs	r0, r0, r1, lsl #9
   16804:	cmp	r0, r1, lsl #8
   16808:	adc	r2, r2, r2
   1680c:	subcs	r0, r0, r1, lsl #8
   16810:	cmp	r0, r1, lsl #7
   16814:	adc	r2, r2, r2
   16818:	subcs	r0, r0, r1, lsl #7
   1681c:	cmp	r0, r1, lsl #6
   16820:	adc	r2, r2, r2
   16824:	subcs	r0, r0, r1, lsl #6
   16828:	cmp	r0, r1, lsl #5
   1682c:	adc	r2, r2, r2
   16830:	subcs	r0, r0, r1, lsl #5
   16834:	cmp	r0, r1, lsl #4
   16838:	adc	r2, r2, r2
   1683c:	subcs	r0, r0, r1, lsl #4
   16840:	cmp	r0, r1, lsl #3
   16844:	adc	r2, r2, r2
   16848:	subcs	r0, r0, r1, lsl #3
   1684c:	cmp	r0, r1, lsl #2
   16850:	adc	r2, r2, r2
   16854:	subcs	r0, r0, r1, lsl #2
   16858:	cmp	r0, r1, lsl #1
   1685c:	adc	r2, r2, r2
   16860:	subcs	r0, r0, r1, lsl #1
   16864:	cmp	r0, r1
   16868:	adc	r2, r2, r2
   1686c:	subcs	r0, r0, r1
   16870:	mov	r0, r2
   16874:	bx	lr
   16878:	moveq	r0, #1
   1687c:	movne	r0, #0
   16880:	bx	lr
   16884:	clz	r2, r1
   16888:	rsb	r2, r2, #31
   1688c:	lsr	r0, r0, r2
   16890:	bx	lr
   16894:	cmp	r0, #0
   16898:	mvnne	r0, #0
   1689c:	b	16c10 <__assert_fail@plt+0x5e3c>
   168a0:	cmp	r1, #0
   168a4:	beq	16894 <__assert_fail@plt+0x5ac0>
   168a8:	push	{r0, r1, lr}
   168ac:	bl	166b4 <__assert_fail@plt+0x58e0>
   168b0:	pop	{r1, r2, lr}
   168b4:	mul	r3, r2, r0
   168b8:	sub	r1, r1, r3
   168bc:	bx	lr
   168c0:	cmp	r1, #0
   168c4:	beq	16ad0 <__assert_fail@plt+0x5cfc>
   168c8:	eor	ip, r0, r1
   168cc:	rsbmi	r1, r1, #0
   168d0:	subs	r2, r1, #1
   168d4:	beq	16a9c <__assert_fail@plt+0x5cc8>
   168d8:	movs	r3, r0
   168dc:	rsbmi	r3, r0, #0
   168e0:	cmp	r3, r1
   168e4:	bls	16aa8 <__assert_fail@plt+0x5cd4>
   168e8:	tst	r1, r2
   168ec:	beq	16ab8 <__assert_fail@plt+0x5ce4>
   168f0:	clz	r2, r3
   168f4:	clz	r0, r1
   168f8:	sub	r2, r0, r2
   168fc:	rsbs	r2, r2, #31
   16900:	addne	r2, r2, r2, lsl #1
   16904:	mov	r0, #0
   16908:	addne	pc, pc, r2, lsl #2
   1690c:	nop			; (mov r0, r0)
   16910:	cmp	r3, r1, lsl #31
   16914:	adc	r0, r0, r0
   16918:	subcs	r3, r3, r1, lsl #31
   1691c:	cmp	r3, r1, lsl #30
   16920:	adc	r0, r0, r0
   16924:	subcs	r3, r3, r1, lsl #30
   16928:	cmp	r3, r1, lsl #29
   1692c:	adc	r0, r0, r0
   16930:	subcs	r3, r3, r1, lsl #29
   16934:	cmp	r3, r1, lsl #28
   16938:	adc	r0, r0, r0
   1693c:	subcs	r3, r3, r1, lsl #28
   16940:	cmp	r3, r1, lsl #27
   16944:	adc	r0, r0, r0
   16948:	subcs	r3, r3, r1, lsl #27
   1694c:	cmp	r3, r1, lsl #26
   16950:	adc	r0, r0, r0
   16954:	subcs	r3, r3, r1, lsl #26
   16958:	cmp	r3, r1, lsl #25
   1695c:	adc	r0, r0, r0
   16960:	subcs	r3, r3, r1, lsl #25
   16964:	cmp	r3, r1, lsl #24
   16968:	adc	r0, r0, r0
   1696c:	subcs	r3, r3, r1, lsl #24
   16970:	cmp	r3, r1, lsl #23
   16974:	adc	r0, r0, r0
   16978:	subcs	r3, r3, r1, lsl #23
   1697c:	cmp	r3, r1, lsl #22
   16980:	adc	r0, r0, r0
   16984:	subcs	r3, r3, r1, lsl #22
   16988:	cmp	r3, r1, lsl #21
   1698c:	adc	r0, r0, r0
   16990:	subcs	r3, r3, r1, lsl #21
   16994:	cmp	r3, r1, lsl #20
   16998:	adc	r0, r0, r0
   1699c:	subcs	r3, r3, r1, lsl #20
   169a0:	cmp	r3, r1, lsl #19
   169a4:	adc	r0, r0, r0
   169a8:	subcs	r3, r3, r1, lsl #19
   169ac:	cmp	r3, r1, lsl #18
   169b0:	adc	r0, r0, r0
   169b4:	subcs	r3, r3, r1, lsl #18
   169b8:	cmp	r3, r1, lsl #17
   169bc:	adc	r0, r0, r0
   169c0:	subcs	r3, r3, r1, lsl #17
   169c4:	cmp	r3, r1, lsl #16
   169c8:	adc	r0, r0, r0
   169cc:	subcs	r3, r3, r1, lsl #16
   169d0:	cmp	r3, r1, lsl #15
   169d4:	adc	r0, r0, r0
   169d8:	subcs	r3, r3, r1, lsl #15
   169dc:	cmp	r3, r1, lsl #14
   169e0:	adc	r0, r0, r0
   169e4:	subcs	r3, r3, r1, lsl #14
   169e8:	cmp	r3, r1, lsl #13
   169ec:	adc	r0, r0, r0
   169f0:	subcs	r3, r3, r1, lsl #13
   169f4:	cmp	r3, r1, lsl #12
   169f8:	adc	r0, r0, r0
   169fc:	subcs	r3, r3, r1, lsl #12
   16a00:	cmp	r3, r1, lsl #11
   16a04:	adc	r0, r0, r0
   16a08:	subcs	r3, r3, r1, lsl #11
   16a0c:	cmp	r3, r1, lsl #10
   16a10:	adc	r0, r0, r0
   16a14:	subcs	r3, r3, r1, lsl #10
   16a18:	cmp	r3, r1, lsl #9
   16a1c:	adc	r0, r0, r0
   16a20:	subcs	r3, r3, r1, lsl #9
   16a24:	cmp	r3, r1, lsl #8
   16a28:	adc	r0, r0, r0
   16a2c:	subcs	r3, r3, r1, lsl #8
   16a30:	cmp	r3, r1, lsl #7
   16a34:	adc	r0, r0, r0
   16a38:	subcs	r3, r3, r1, lsl #7
   16a3c:	cmp	r3, r1, lsl #6
   16a40:	adc	r0, r0, r0
   16a44:	subcs	r3, r3, r1, lsl #6
   16a48:	cmp	r3, r1, lsl #5
   16a4c:	adc	r0, r0, r0
   16a50:	subcs	r3, r3, r1, lsl #5
   16a54:	cmp	r3, r1, lsl #4
   16a58:	adc	r0, r0, r0
   16a5c:	subcs	r3, r3, r1, lsl #4
   16a60:	cmp	r3, r1, lsl #3
   16a64:	adc	r0, r0, r0
   16a68:	subcs	r3, r3, r1, lsl #3
   16a6c:	cmp	r3, r1, lsl #2
   16a70:	adc	r0, r0, r0
   16a74:	subcs	r3, r3, r1, lsl #2
   16a78:	cmp	r3, r1, lsl #1
   16a7c:	adc	r0, r0, r0
   16a80:	subcs	r3, r3, r1, lsl #1
   16a84:	cmp	r3, r1
   16a88:	adc	r0, r0, r0
   16a8c:	subcs	r3, r3, r1
   16a90:	cmp	ip, #0
   16a94:	rsbmi	r0, r0, #0
   16a98:	bx	lr
   16a9c:	teq	ip, r0
   16aa0:	rsbmi	r0, r0, #0
   16aa4:	bx	lr
   16aa8:	movcc	r0, #0
   16aac:	asreq	r0, ip, #31
   16ab0:	orreq	r0, r0, #1
   16ab4:	bx	lr
   16ab8:	clz	r2, r1
   16abc:	rsb	r2, r2, #31
   16ac0:	cmp	ip, #0
   16ac4:	lsr	r0, r3, r2
   16ac8:	rsbmi	r0, r0, #0
   16acc:	bx	lr
   16ad0:	cmp	r0, #0
   16ad4:	mvngt	r0, #-2147483648	; 0x80000000
   16ad8:	movlt	r0, #-2147483648	; 0x80000000
   16adc:	b	16c10 <__assert_fail@plt+0x5e3c>
   16ae0:	cmp	r1, #0
   16ae4:	beq	16ad0 <__assert_fail@plt+0x5cfc>
   16ae8:	push	{r0, r1, lr}
   16aec:	bl	168c8 <__assert_fail@plt+0x5af4>
   16af0:	pop	{r1, r2, lr}
   16af4:	mul	r3, r2, r0
   16af8:	sub	r1, r1, r3
   16afc:	bx	lr
   16b00:	cmp	r3, #0
   16b04:	cmpeq	r2, #0
   16b08:	bne	16b2c <__assert_fail@plt+0x5d58>
   16b0c:	cmp	r1, #0
   16b10:	movlt	r1, #-2147483648	; 0x80000000
   16b14:	movlt	r0, #0
   16b18:	blt	16b28 <__assert_fail@plt+0x5d54>
   16b1c:	cmpeq	r0, #0
   16b20:	mvnne	r1, #-2147483648	; 0x80000000
   16b24:	mvnne	r0, #0
   16b28:	b	16c10 <__assert_fail@plt+0x5e3c>
   16b2c:	sub	sp, sp, #8
   16b30:	push	{sp, lr}
   16b34:	cmp	r1, #0
   16b38:	blt	16b58 <__assert_fail@plt+0x5d84>
   16b3c:	cmp	r3, #0
   16b40:	blt	16b8c <__assert_fail@plt+0x5db8>
   16b44:	bl	16c20 <__assert_fail@plt+0x5e4c>
   16b48:	ldr	lr, [sp, #4]
   16b4c:	add	sp, sp, #8
   16b50:	pop	{r2, r3}
   16b54:	bx	lr
   16b58:	rsbs	r0, r0, #0
   16b5c:	sbc	r1, r1, r1, lsl #1
   16b60:	cmp	r3, #0
   16b64:	blt	16bb0 <__assert_fail@plt+0x5ddc>
   16b68:	bl	16c20 <__assert_fail@plt+0x5e4c>
   16b6c:	ldr	lr, [sp, #4]
   16b70:	add	sp, sp, #8
   16b74:	pop	{r2, r3}
   16b78:	rsbs	r0, r0, #0
   16b7c:	sbc	r1, r1, r1, lsl #1
   16b80:	rsbs	r2, r2, #0
   16b84:	sbc	r3, r3, r3, lsl #1
   16b88:	bx	lr
   16b8c:	rsbs	r2, r2, #0
   16b90:	sbc	r3, r3, r3, lsl #1
   16b94:	bl	16c20 <__assert_fail@plt+0x5e4c>
   16b98:	ldr	lr, [sp, #4]
   16b9c:	add	sp, sp, #8
   16ba0:	pop	{r2, r3}
   16ba4:	rsbs	r0, r0, #0
   16ba8:	sbc	r1, r1, r1, lsl #1
   16bac:	bx	lr
   16bb0:	rsbs	r2, r2, #0
   16bb4:	sbc	r3, r3, r3, lsl #1
   16bb8:	bl	16c20 <__assert_fail@plt+0x5e4c>
   16bbc:	ldr	lr, [sp, #4]
   16bc0:	add	sp, sp, #8
   16bc4:	pop	{r2, r3}
   16bc8:	rsbs	r2, r2, #0
   16bcc:	sbc	r3, r3, r3, lsl #1
   16bd0:	bx	lr
   16bd4:	cmp	r3, #0
   16bd8:	cmpeq	r2, #0
   16bdc:	bne	16bf4 <__assert_fail@plt+0x5e20>
   16be0:	cmp	r1, #0
   16be4:	cmpeq	r0, #0
   16be8:	mvnne	r1, #0
   16bec:	mvnne	r0, #0
   16bf0:	b	16c10 <__assert_fail@plt+0x5e3c>
   16bf4:	sub	sp, sp, #8
   16bf8:	push	{sp, lr}
   16bfc:	bl	16c20 <__assert_fail@plt+0x5e4c>
   16c00:	ldr	lr, [sp, #4]
   16c04:	add	sp, sp, #8
   16c08:	pop	{r2, r3}
   16c0c:	bx	lr
   16c10:	push	{r1, lr}
   16c14:	mov	r0, #8
   16c18:	bl	10b70 <raise@plt>
   16c1c:	pop	{r1, pc}
   16c20:	cmp	r1, r3
   16c24:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c28:	cmpeq	r0, r2
   16c2c:	mov	r4, r0
   16c30:	mov	r5, r1
   16c34:	ldr	r9, [sp, #28]
   16c38:	movcc	r0, #0
   16c3c:	movcc	r1, #0
   16c40:	bcc	16d38 <__assert_fail@plt+0x5f64>
   16c44:	cmp	r3, #0
   16c48:	clzeq	ip, r2
   16c4c:	clzne	ip, r3
   16c50:	addeq	ip, ip, #32
   16c54:	cmp	r5, #0
   16c58:	clzeq	r1, r4
   16c5c:	addeq	r1, r1, #32
   16c60:	clzne	r1, r5
   16c64:	sub	ip, ip, r1
   16c68:	sub	lr, ip, #32
   16c6c:	lsl	r7, r3, ip
   16c70:	rsb	r8, ip, #32
   16c74:	orr	r7, r7, r2, lsl lr
   16c78:	orr	r7, r7, r2, lsr r8
   16c7c:	lsl	r6, r2, ip
   16c80:	cmp	r5, r7
   16c84:	cmpeq	r4, r6
   16c88:	movcc	r0, #0
   16c8c:	movcc	r1, #0
   16c90:	bcc	16cac <__assert_fail@plt+0x5ed8>
   16c94:	mov	r3, #1
   16c98:	subs	r4, r4, r6
   16c9c:	lsl	r1, r3, lr
   16ca0:	lsl	r0, r3, ip
   16ca4:	orr	r1, r1, r3, lsr r8
   16ca8:	sbc	r5, r5, r7
   16cac:	cmp	ip, #0
   16cb0:	beq	16d38 <__assert_fail@plt+0x5f64>
   16cb4:	lsrs	r3, r7, #1
   16cb8:	rrx	r2, r6
   16cbc:	mov	r6, ip
   16cc0:	b	16ce4 <__assert_fail@plt+0x5f10>
   16cc4:	subs	r4, r4, r2
   16cc8:	sbc	r5, r5, r3
   16ccc:	adds	r4, r4, r4
   16cd0:	adc	r5, r5, r5
   16cd4:	adds	r4, r4, #1
   16cd8:	adc	r5, r5, #0
   16cdc:	subs	r6, r6, #1
   16ce0:	beq	16d00 <__assert_fail@plt+0x5f2c>
   16ce4:	cmp	r5, r3
   16ce8:	cmpeq	r4, r2
   16cec:	bcs	16cc4 <__assert_fail@plt+0x5ef0>
   16cf0:	adds	r4, r4, r4
   16cf4:	adc	r5, r5, r5
   16cf8:	subs	r6, r6, #1
   16cfc:	bne	16ce4 <__assert_fail@plt+0x5f10>
   16d00:	lsr	r6, r4, ip
   16d04:	lsr	r7, r5, ip
   16d08:	orr	r6, r6, r5, lsl r8
   16d0c:	adds	r2, r0, r4
   16d10:	orr	r6, r6, r5, lsr lr
   16d14:	adc	r3, r1, r5
   16d18:	lsl	r1, r7, ip
   16d1c:	orr	r1, r1, r6, lsl lr
   16d20:	lsl	r0, r6, ip
   16d24:	orr	r1, r1, r6, lsr r8
   16d28:	subs	r0, r2, r0
   16d2c:	mov	r4, r6
   16d30:	mov	r5, r7
   16d34:	sbc	r1, r3, r1
   16d38:	cmp	r9, #0
   16d3c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16d40:	strd	r4, [r9]
   16d44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d4c:	mov	r7, r0
   16d50:	ldr	r6, [pc, #72]	; 16da0 <__assert_fail@plt+0x5fcc>
   16d54:	ldr	r5, [pc, #72]	; 16da4 <__assert_fail@plt+0x5fd0>
   16d58:	add	r6, pc, r6
   16d5c:	add	r5, pc, r5
   16d60:	sub	r6, r6, r5
   16d64:	mov	r8, r1
   16d68:	mov	r9, r2
   16d6c:	bl	10b38 <fstatfs64@plt-0x20>
   16d70:	asrs	r6, r6, #2
   16d74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d78:	mov	r4, #0
   16d7c:	add	r4, r4, #1
   16d80:	ldr	r3, [r5], #4
   16d84:	mov	r2, r9
   16d88:	mov	r1, r8
   16d8c:	mov	r0, r7
   16d90:	blx	r3
   16d94:	cmp	r6, r4
   16d98:	bne	16d7c <__assert_fail@plt+0x5fa8>
   16d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16da0:			; <UNDEFINED> instruction: 0x000111b0
   16da4:	andeq	r1, r1, r8, lsr #3
   16da8:	bx	lr
   16dac:	mov	r2, r1
   16db0:	mov	r1, r0
   16db4:	mov	r0, #3
   16db8:	b	10d68 <__xstat64@plt>
   16dbc:	mov	r2, r1
   16dc0:	mov	r1, r0
   16dc4:	mov	r0, #3
   16dc8:	b	10c0c <__fxstat64@plt>
   16dcc:	mov	r2, r1
   16dd0:	mov	r1, r0
   16dd4:	mov	r0, #3
   16dd8:	b	10db0 <__lxstat64@plt>
   16ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   16de0:	sub	sp, sp, #12
   16de4:	str	r3, [sp]
   16de8:	mov	r3, r2
   16dec:	mov	r2, r1
   16df0:	mov	r1, r0
   16df4:	mov	r0, #3
   16df8:	bl	10c00 <__fxstatat64@plt>
   16dfc:	add	sp, sp, #12
   16e00:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00016e04 <.fini>:
   16e04:	push	{r3, lr}
   16e08:	pop	{r3, pc}
