
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b0c <.init>:
   10b0c:	push	{r3, lr}
   10b10:	bl	10d24 <__assert_fail@plt+0x48>
   10b14:	pop	{r3, pc}

Disassembly of section .plt:

00010b18 <calloc@plt-0x14>:
   10b18:	push	{lr}		; (str lr, [sp, #-4]!)
   10b1c:	ldr	lr, [pc, #4]	; 10b28 <calloc@plt-0x4>
   10b20:	add	lr, pc, lr
   10b24:	ldr	pc, [lr, #8]!
   10b28:	ldrdeq	r7, [r1], -r8

00010b2c <calloc@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b38 <strcmp@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b44 <strtol@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b50 <printf@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b5c <fopen@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b68 <free@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b74 <utf8proc_get_property@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b80 <fgets@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b8c <utf8proc_encode_char@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1176]!	; 0x498

00010b98 <strdup@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1168]!	; 0x490

00010ba4 <rewind@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1160]!	; 0x488

00010bb0 <unlink@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1152]!	; 0x480

00010bbc <utf8proc_tolower@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1144]!	; 0x478

00010bc8 <__xstat@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1136]!	; 0x470

00010bd4 <fwrite@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #94208	; 0x17000
   10bdc:	ldr	pc, [ip, #1128]!	; 0x468

00010be0 <fread@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #94208	; 0x17000
   10be8:	ldr	pc, [ip, #1120]!	; 0x460

00010bec <utf8proc_iterate@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #94208	; 0x17000
   10bf4:	ldr	pc, [ip, #1112]!	; 0x458

00010bf8 <malloc@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #94208	; 0x17000
   10c00:	ldr	pc, [ip, #1104]!	; 0x450

00010c04 <__libc_start_main@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #94208	; 0x17000
   10c0c:	ldr	pc, [ip, #1096]!	; 0x448

00010c10 <__sysv_signal@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #94208	; 0x17000
   10c18:	ldr	pc, [ip, #1088]!	; 0x440

00010c1c <__gmon_start__@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #94208	; 0x17000
   10c24:	ldr	pc, [ip, #1080]!	; 0x438

00010c28 <getpid@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #94208	; 0x17000
   10c30:	ldr	pc, [ip, #1072]!	; 0x430

00010c34 <exit@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #94208	; 0x17000
   10c3c:	ldr	pc, [ip, #1064]!	; 0x428

00010c40 <utf8proc_category@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #94208	; 0x17000
   10c48:	ldr	pc, [ip, #1056]!	; 0x420

00010c4c <strlen@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #1048]!	; 0x418

00010c58 <fprintf@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #1040]!	; 0x410

00010c64 <__isoc99_sscanf@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #1032]!	; 0x408

00010c70 <fclose@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #1024]!	; 0x400

00010c7c <utf8proc_NFC@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c88 <fputc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c94 <sprintf@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010ca0 <utf8proc_errmsg@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #992]!	; 0x3e0

00010cac <fputs@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb8 <strncmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #976]!	; 0x3d0

00010cc4 <abort@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #968]!	; 0x3c8

00010cd0 <getc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #960]!	; 0x3c0

00010cdc <__assert_fail@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #952]!	; 0x3b8

Disassembly of section .text:

00010ce8 <error@@Base-0xb94>:
   10ce8:	mov	fp, #0
   10cec:	mov	lr, #0
   10cf0:	pop	{r1}		; (ldr r1, [sp], #4)
   10cf4:	mov	r2, sp
   10cf8:	push	{r2}		; (str r2, [sp, #-4]!)
   10cfc:	push	{r0}		; (str r0, [sp, #-4]!)
   10d00:	ldr	ip, [pc, #16]	; 10d18 <__assert_fail@plt+0x3c>
   10d04:	push	{ip}		; (str ip, [sp, #-4]!)
   10d08:	ldr	r0, [pc, #12]	; 10d1c <__assert_fail@plt+0x40>
   10d0c:	ldr	r3, [pc, #12]	; 10d20 <__assert_fail@plt+0x44>
   10d10:	bl	10c04 <__libc_start_main@plt>
   10d14:	bl	10cc4 <abort@plt>
   10d18:	andeq	r3, r1, r8, ror sl
   10d1c:	andeq	r1, r1, r4, asr r0
   10d20:	andeq	r3, r1, r8, lsl sl
   10d24:	ldr	r3, [pc, #20]	; 10d40 <__assert_fail@plt+0x64>
   10d28:	ldr	r2, [pc, #20]	; 10d44 <__assert_fail@plt+0x68>
   10d2c:	add	r3, pc, r3
   10d30:	ldr	r2, [r3, r2]
   10d34:	cmp	r2, #0
   10d38:	bxeq	lr
   10d3c:	b	10c1c <__gmon_start__@plt>
   10d40:	andeq	r7, r1, ip, asr #5
   10d44:	strheq	r0, [r0], -ip
   10d48:	ldr	r0, [pc, #24]	; 10d68 <__assert_fail@plt+0x8c>
   10d4c:	ldr	r3, [pc, #24]	; 10d6c <__assert_fail@plt+0x90>
   10d50:	cmp	r3, r0
   10d54:	bxeq	lr
   10d58:	ldr	r3, [pc, #16]	; 10d70 <__assert_fail@plt+0x94>
   10d5c:	cmp	r3, #0
   10d60:	bxeq	lr
   10d64:	bx	r3
   10d68:	strdeq	r8, [r2], -ip
   10d6c:	strdeq	r8, [r2], -ip
   10d70:	andeq	r0, r0, r0
   10d74:	ldr	r0, [pc, #36]	; 10da0 <__assert_fail@plt+0xc4>
   10d78:	ldr	r1, [pc, #36]	; 10da4 <__assert_fail@plt+0xc8>
   10d7c:	sub	r1, r1, r0
   10d80:	asr	r1, r1, #2
   10d84:	add	r1, r1, r1, lsr #31
   10d88:	asrs	r1, r1, #1
   10d8c:	bxeq	lr
   10d90:	ldr	r3, [pc, #16]	; 10da8 <__assert_fail@plt+0xcc>
   10d94:	cmp	r3, #0
   10d98:	bxeq	lr
   10d9c:	bx	r3
   10da0:	strdeq	r8, [r2], -ip
   10da4:	strdeq	r8, [r2], -ip
   10da8:	andeq	r0, r0, r0
   10dac:	push	{r4, lr}
   10db0:	ldr	r4, [pc, #24]	; 10dd0 <__assert_fail@plt+0xf4>
   10db4:	ldrb	r3, [r4]
   10db8:	cmp	r3, #0
   10dbc:	popne	{r4, pc}
   10dc0:	bl	10d48 <__assert_fail@plt+0x6c>
   10dc4:	mov	r3, #1
   10dc8:	strb	r3, [r4]
   10dcc:	pop	{r4, pc}
   10dd0:	strdeq	r8, [r2], -ip
   10dd4:	b	10d74 <__assert_fail@plt+0x98>
   10dd8:	push	{fp, lr}
   10ddc:	mov	fp, sp
   10de0:	bl	11130 <__assert_fail@plt+0x454>
   10de4:	cmp	r0, #0
   10de8:	popeq	{fp, pc}
   10dec:	ldr	r1, [r0, #12]
   10df0:	ldr	r0, [r0, #16]
   10df4:	ldr	r2, [pc, #36]	; 10e20 <__assert_fail@plt+0x144>
   10df8:	ldr	r2, [pc, r2]
   10dfc:	ldr	r3, [r2]
   10e00:	sub	r1, r3, r1
   10e04:	str	r1, [r2]
   10e08:	ldr	r1, [pc, #20]	; 10e24 <__assert_fail@plt+0x148>
   10e0c:	ldr	r1, [pc, r1]
   10e10:	ldr	r2, [r1]
   10e14:	sub	r0, r2, r0
   10e18:	str	r0, [r1]
   10e1c:	pop	{fp, pc}
   10e20:	andeq	r7, r1, r0, lsr #5
   10e24:	andeq	r7, r1, r4, asr #5
   10e28:	ldr	r0, [pc, #96]	; 10e90 <__assert_fail@plt+0x1b4>
   10e2c:	vldr	d16, [pc, #84]	; 10e88 <__assert_fail@plt+0x1ac>
   10e30:	ldr	r0, [pc, r0]
   10e34:	ldr	r0, [r0]
   10e38:	ldr	r1, [pc, #84]	; 10e94 <__assert_fail@plt+0x1b8>
   10e3c:	ldr	r1, [pc, r1]
   10e40:	ldr	r2, [r1]
   10e44:	ldr	r1, [pc, #76]	; 10e98 <__assert_fail@plt+0x1bc>
   10e48:	sub	r0, r2, r0
   10e4c:	vmov	s2, r2
   10e50:	ldr	r1, [pc, r1]
   10e54:	vmov	s0, r0
   10e58:	vcvt.f64.s32	d17, s0
   10e5c:	vcvt.f64.s32	d18, s2
   10e60:	ldr	r2, [pc, #52]	; 10e9c <__assert_fail@plt+0x1c0>
   10e64:	vmul.f64	d16, d17, d16
   10e68:	add	r0, r1, #1
   10e6c:	vdiv.f64	d16, d16, d18
   10e70:	add	r2, pc, r2
   10e74:	str	r0, [r2]
   10e78:	vmov	r2, r3, d16
   10e7c:	ldr	r0, [pc, #28]	; 10ea0 <__assert_fail@plt+0x1c4>
   10e80:	add	r0, pc, r0
   10e84:	b	10b50 <printf@plt>
   10e88:	andeq	r0, r0, r0
   10e8c:	subsmi	r0, r9, r0
   10e90:	andeq	r7, r1, r0, lsr #5
   10e94:	andeq	r7, r1, ip, asr r2
   10e98:	andeq	r7, r1, r8, lsr #5
   10e9c:	andeq	r7, r1, r8, lsl #5
   10ea0:	andeq	r2, r0, r0, lsl #24
   10ea4:	nop	{0}
   10ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10eac:	add	fp, sp, #28
   10eb0:	sub	sp, sp, #4
   10eb4:	vpush	{d8}
   10eb8:	ldr	r5, [pc, #368]	; 11030 <__assert_fail@plt+0x354>
   10ebc:	ldr	r5, [pc, r5]
   10ec0:	ldm	r5, {r0, r1}
   10ec4:	ldr	r7, [pc, #360]	; 11034 <__assert_fail@plt+0x358>
   10ec8:	ldr	r7, [pc, r7]
   10ecc:	cmp	r0, #0
   10ed0:	str	r0, [r7]
   10ed4:	ldr	r6, [pc, #348]	; 11038 <__assert_fail@plt+0x35c>
   10ed8:	ldr	r6, [pc, r6]
   10edc:	str	r1, [r6]
   10ee0:	beq	1101c <__assert_fail@plt+0x340>
   10ee4:	sub	r2, r0, r1
   10ee8:	ldr	r1, [pc, #332]	; 1103c <__assert_fail@plt+0x360>
   10eec:	vmov	s2, r0
   10ef0:	vldr	d8, [pc, #304]	; 11028 <__assert_fail@plt+0x34c>
   10ef4:	vmov	s0, r2
   10ef8:	ldr	r1, [pc, r1]
   10efc:	vcvt.f64.s32	d16, s0
   10f00:	vcvt.f64.s32	d17, s2
   10f04:	ldr	r9, [pc, #308]	; 11040 <__assert_fail@plt+0x364>
   10f08:	vmul.f64	d16, d16, d8
   10f0c:	vdiv.f64	d16, d16, d17
   10f10:	vmov	r2, r3, d16
   10f14:	add	r0, r1, #1
   10f18:	add	r9, pc, r9
   10f1c:	str	r0, [r9]
   10f20:	ldr	r0, [pc, #284]	; 11044 <__assert_fail@plt+0x368>
   10f24:	add	r0, pc, r0
   10f28:	bl	10b50 <printf@plt>
   10f2c:	ldr	r0, [pc, #276]	; 11048 <__assert_fail@plt+0x36c>
   10f30:	ldr	r0, [pc, r0]
   10f34:	ldr	r4, [r0]
   10f38:	cmp	r4, #0
   10f3c:	beq	1101c <__assert_fail@plt+0x340>
   10f40:	ldr	r8, [pc, #260]	; 1104c <__assert_fail@plt+0x370>
   10f44:	movw	r0, #9048	; 0x2358
   10f48:	add	sl, r5, #992	; 0x3e0
   10f4c:	add	r5, r5, r0
   10f50:	add	r8, pc, r8
   10f54:	ldr	r1, [r4, #8]
   10f58:	mov	r0, sl
   10f5c:	bl	11130 <__assert_fail@plt+0x454>
   10f60:	cmp	r0, #0
   10f64:	beq	10f88 <__assert_fail@plt+0x2ac>
   10f68:	ldr	r1, [r0, #12]
   10f6c:	ldr	r2, [r7]
   10f70:	ldr	r0, [r0, #16]
   10f74:	sub	r1, r2, r1
   10f78:	str	r1, [r7]
   10f7c:	ldr	r1, [r6]
   10f80:	sub	r0, r1, r0
   10f84:	str	r0, [r6]
   10f88:	ldr	r1, [r4, #8]
   10f8c:	mov	r0, r5
   10f90:	bl	11130 <__assert_fail@plt+0x454>
   10f94:	cmp	r0, #0
   10f98:	beq	10fc8 <__assert_fail@plt+0x2ec>
   10f9c:	ldr	r1, [r0, #12]
   10fa0:	ldr	r2, [r0, #16]
   10fa4:	ldr	r0, [r7]
   10fa8:	sub	r0, r0, r1
   10fac:	ldr	r1, [r6]
   10fb0:	str	r0, [r7]
   10fb4:	sub	r1, r1, r2
   10fb8:	str	r1, [r6]
   10fbc:	cmp	r0, #0
   10fc0:	bne	10fd4 <__assert_fail@plt+0x2f8>
   10fc4:	b	1101c <__assert_fail@plt+0x340>
   10fc8:	ldr	r0, [r7]
   10fcc:	cmp	r0, #0
   10fd0:	beq	1101c <__assert_fail@plt+0x340>
   10fd4:	ldr	r1, [r6]
   10fd8:	vmov	s2, r0
   10fdc:	sub	r2, r0, r1
   10fe0:	ldr	r1, [pc, #104]	; 11050 <__assert_fail@plt+0x374>
   10fe4:	vmov	s0, r2
   10fe8:	ldr	r1, [pc, r1]
   10fec:	vcvt.f64.s32	d16, s0
   10ff0:	vcvt.f64.s32	d17, s2
   10ff4:	vmul.f64	d16, d16, d8
   10ff8:	vdiv.f64	d16, d16, d17
   10ffc:	vmov	r2, r3, d16
   11000:	add	r0, r1, #1
   11004:	str	r0, [r9]
   11008:	mov	r0, r8
   1100c:	bl	10b50 <printf@plt>
   11010:	ldr	r4, [r4, #4]
   11014:	cmp	r4, #0
   11018:	bne	10f54 <__assert_fail@plt+0x278>
   1101c:	vpop	{d8}
   11020:	add	sp, sp, #4
   11024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11028:	andeq	r0, r0, r0
   1102c:	subsmi	r0, r9, r0
   11030:	andeq	r7, r1, r0, lsl #4
   11034:	ldrdeq	r7, [r1], -r0
   11038:	strdeq	r7, [r1], -r8
   1103c:	andeq	r7, r1, r0, lsl #4
   11040:	andeq	r7, r1, r0, ror #3
   11044:	andeq	r2, r0, ip, asr fp
   11048:	andeq	r7, r1, ip, ror r1
   1104c:	andeq	r2, r0, r0, lsr fp
   11050:	andeq	r7, r1, r0, lsl r1
   11054:	push	{fp, lr}
   11058:	mov	fp, sp
   1105c:	sub	sp, sp, #8
   11060:	str	r0, [sp, #4]
   11064:	add	r0, sp, #4
   11068:	mov	r3, #0
   1106c:	mov	r4, r1
   11070:	ldr	r2, [pc, #96]	; 110d8 <__assert_fail@plt+0x3fc>
   11074:	add	r2, pc, r2
   11078:	bl	115f4 <__assert_fail@plt+0x918>
   1107c:	ldr	r0, [sp, #4]
   11080:	cmp	r0, #2
   11084:	bne	110cc <__assert_fail@plt+0x3f0>
   11088:	ldr	r1, [r4]
   1108c:	ldr	r5, [pc, #76]	; 110e0 <__assert_fail@plt+0x404>
   11090:	ldr	r5, [pc, r5]
   11094:	ldr	r2, [pc, #72]	; 110e4 <__assert_fail@plt+0x408>
   11098:	ldr	r2, [pc, r2]
   1109c:	mov	r0, r5
   110a0:	bl	12fb8 <error@@Base+0x173c>
   110a4:	ldr	r0, [pc, #60]	; 110e8 <__assert_fail@plt+0x40c>
   110a8:	mov	r1, r5
   110ac:	ldr	r0, [pc, r0]
   110b0:	bl	12760 <error@@Base+0xee4>
   110b4:	ldr	r1, [r4, #4]
   110b8:	ldr	r0, [pc, #44]	; 110ec <__assert_fail@plt+0x410>
   110bc:	ldr	r0, [pc, r0]
   110c0:	bl	11b28 <error@@Base+0x2ac>
   110c4:	bl	10ea8 <__assert_fail@plt+0x1cc>
   110c8:	bl	11838 <__assert_fail@plt+0xb5c>
   110cc:	ldr	r0, [pc, #8]	; 110dc <__assert_fail@plt+0x400>
   110d0:	add	r0, pc, r0
   110d4:	bl	1187c <error@@Base>
   110d8:	andeq	r2, r0, r8, lsl sl
   110dc:	andeq	r2, r0, r0, ror #19
   110e0:	andeq	r7, r1, ip
   110e4:	andeq	r7, r1, r0, lsl r0
   110e8:	andeq	r7, r1, r0
   110ec:	andeq	r7, r1, r0
   110f0:	push	{r4, r5, r6, sl, fp, lr}
   110f4:	add	fp, sp, #16
   110f8:	mov	r4, r0
   110fc:	movw	r6, #503	; 0x1f7
   11100:	mov	r5, r0
   11104:	mov	r0, r5
   11108:	bl	1360c <error@@Base+0x1d90>
   1110c:	subs	r6, r6, #1
   11110:	add	r5, r5, #16
   11114:	bne	11104 <__assert_fail@plt+0x428>
   11118:	movw	r0, #8052	; 0x1f74
   1111c:	mov	r1, #0
   11120:	str	r1, [r4, r0]
   11124:	movw	r0, #8048	; 0x1f70
   11128:	str	r1, [r4, r0]
   1112c:	pop	{r4, r5, r6, sl, fp, pc}
   11130:	push	{r4, r5, r6, sl, fp, lr}
   11134:	add	fp, sp, #16
   11138:	mov	r5, r1
   1113c:	ldrb	r1, [r1]
   11140:	mov	r4, #0
   11144:	mov	r2, #0
   11148:	cmp	r1, #0
   1114c:	beq	11180 <__assert_fail@plt+0x4a4>
   11150:	add	r3, r5, #1
   11154:	mov	r2, #0
   11158:	uxtab	r2, r2, r1
   1115c:	ldrb	r1, [r3], #1
   11160:	cmp	r1, #0
   11164:	bne	11158 <__assert_fail@plt+0x47c>
   11168:	movw	r1, #20065	; 0x4e61
   1116c:	movt	r1, #33354	; 0x824a
   11170:	umull	r1, r3, r2, r1
   11174:	lsr	r1, r3, #8
   11178:	movw	r3, #503	; 0x1f7
   1117c:	mls	r2, r1, r3, r2
   11180:	ldr	r6, [r0, r2, lsl #4]
   11184:	cmp	r6, #0
   11188:	bne	111a0 <__assert_fail@plt+0x4c4>
   1118c:	mov	r0, r4
   11190:	pop	{r4, r5, r6, sl, fp, pc}
   11194:	ldr	r6, [r6, #4]
   11198:	cmp	r6, #0
   1119c:	beq	1118c <__assert_fail@plt+0x4b0>
   111a0:	ldr	r1, [r6, #8]
   111a4:	mov	r0, r5
   111a8:	bl	10b38 <strcmp@plt>
   111ac:	cmp	r0, #0
   111b0:	bne	11194 <__assert_fail@plt+0x4b8>
   111b4:	mov	r4, r6
   111b8:	mov	r0, r4
   111bc:	pop	{r4, r5, r6, sl, fp, pc}
   111c0:	push	{r4, r5, fp, lr}
   111c4:	add	fp, sp, #8
   111c8:	mov	r4, r0
   111cc:	ldr	r0, [r1, #8]
   111d0:	ldrb	r2, [r0]
   111d4:	cmp	r2, #0
   111d8:	beq	11210 <__assert_fail@plt+0x534>
   111dc:	add	r3, r0, #1
   111e0:	mov	r0, #0
   111e4:	uxtab	r0, r0, r2
   111e8:	ldrb	r2, [r3], #1
   111ec:	cmp	r2, #0
   111f0:	bne	111e4 <__assert_fail@plt+0x508>
   111f4:	movw	r2, #20065	; 0x4e61
   111f8:	movt	r2, #33354	; 0x824a
   111fc:	umull	r2, r3, r0, r2
   11200:	lsr	r2, r3, #8
   11204:	movw	r3, #503	; 0x1f7
   11208:	mls	r0, r2, r3, r0
   1120c:	b	11214 <__assert_fail@plt+0x538>
   11210:	mov	r0, #0
   11214:	add	r0, r4, r0, lsl #4
   11218:	bl	13618 <error@@Base+0x1d9c>
   1121c:	movw	r0, #8048	; 0x1f70
   11220:	mov	r5, r4
   11224:	ldr	r0, [r5, r0]!
   11228:	cmp	r0, #0
   1122c:	beq	1123c <__assert_fail@plt+0x560>
   11230:	bl	10b68 <free@plt>
   11234:	mov	r0, #0
   11238:	str	r0, [r5]
   1123c:	movw	r0, #8052	; 0x1f74
   11240:	ldr	r0, [r4, r0]!
   11244:	add	r0, r0, #1
   11248:	str	r0, [r4]
   1124c:	pop	{r4, r5, fp, pc}
   11250:	push	{r4, r5, fp, lr}
   11254:	add	fp, sp, #8
   11258:	mov	r4, r0
   1125c:	ldr	r0, [r1, #8]
   11260:	ldrb	r2, [r0]
   11264:	cmp	r2, #0
   11268:	beq	112a0 <__assert_fail@plt+0x5c4>
   1126c:	add	r3, r0, #1
   11270:	mov	r0, #0
   11274:	uxtab	r0, r0, r2
   11278:	ldrb	r2, [r3], #1
   1127c:	cmp	r2, #0
   11280:	bne	11274 <__assert_fail@plt+0x598>
   11284:	movw	r2, #20065	; 0x4e61
   11288:	movt	r2, #33354	; 0x824a
   1128c:	umull	r2, r3, r0, r2
   11290:	lsr	r2, r3, #8
   11294:	movw	r3, #503	; 0x1f7
   11298:	mls	r0, r2, r3, r0
   1129c:	b	112a4 <__assert_fail@plt+0x5c8>
   112a0:	mov	r0, #0
   112a4:	add	r0, r4, r0, lsl #4
   112a8:	bl	13760 <error@@Base+0x1ee4>
   112ac:	movw	r0, #8048	; 0x1f70
   112b0:	mov	r5, r4
   112b4:	ldr	r0, [r5, r0]!
   112b8:	cmp	r0, #0
   112bc:	beq	112cc <__assert_fail@plt+0x5f0>
   112c0:	bl	10b68 <free@plt>
   112c4:	mov	r0, #0
   112c8:	str	r0, [r5]
   112cc:	movw	r0, #8052	; 0x1f74
   112d0:	ldr	r0, [r4, r0]!
   112d4:	sub	r0, r0, #1
   112d8:	str	r0, [r4]
   112dc:	pop	{r4, r5, fp, pc}
   112e0:	push	{r4, r5, fp, lr}
   112e4:	add	fp, sp, #8
   112e8:	mov	r4, r0
   112ec:	movw	r0, #8048	; 0x1f70
   112f0:	mov	r5, r4
   112f4:	ldr	r0, [r5, r0]!
   112f8:	cmp	r0, #0
   112fc:	bne	11358 <__assert_fail@plt+0x67c>
   11300:	movw	r0, #8052	; 0x1f74
   11304:	ldr	r0, [r4, r0]
   11308:	cmp	r0, #0
   1130c:	popeq	{r4, r5, fp, pc}
   11310:	mov	r1, #4
   11314:	bl	113bc <__assert_fail@plt+0x6e0>
   11318:	str	r0, [r5]
   1131c:	mov	r0, #0
   11320:	movw	ip, #503	; 0x1f7
   11324:	mov	r2, #0
   11328:	ldr	r3, [r4, r2, lsl #4]
   1132c:	cmp	r3, #0
   11330:	beq	1134c <__assert_fail@plt+0x670>
   11334:	ldr	r1, [r5]
   11338:	str	r3, [r1, r0, lsl #2]
   1133c:	add	r0, r0, #1
   11340:	ldr	r3, [r3, #4]
   11344:	cmp	r3, #0
   11348:	bne	11334 <__assert_fail@plt+0x658>
   1134c:	add	r2, r2, #1
   11350:	cmp	r2, ip
   11354:	bne	11328 <__assert_fail@plt+0x64c>
   11358:	pop	{r4, r5, fp, pc}
   1135c:	push	{r4, r5, r6, r7, fp, lr}
   11360:	add	fp, sp, #16
   11364:	mov	r5, r1
   11368:	mov	r4, r0
   1136c:	movw	r7, #503	; 0x1f7
   11370:	mov	r6, r0
   11374:	mov	r0, r6
   11378:	mov	r1, r5
   1137c:	bl	1382c <error@@Base+0x1fb0>
   11380:	subs	r7, r7, #1
   11384:	add	r6, r6, #16
   11388:	bne	11374 <__assert_fail@plt+0x698>
   1138c:	movw	r0, #8048	; 0x1f70
   11390:	mov	r5, r4
   11394:	ldr	r0, [r5, r0]!
   11398:	cmp	r0, #0
   1139c:	beq	113ac <__assert_fail@plt+0x6d0>
   113a0:	bl	10b68 <free@plt>
   113a4:	mov	r0, #0
   113a8:	str	r0, [r5]
   113ac:	movw	r0, #8052	; 0x1f74
   113b0:	mov	r1, #0
   113b4:	str	r1, [r4, r0]
   113b8:	pop	{r4, r5, r6, r7, fp, pc}
   113bc:	push	{fp, lr}
   113c0:	mov	fp, sp
   113c4:	bl	10b2c <calloc@plt>
   113c8:	cmp	r0, #0
   113cc:	popne	{fp, pc}
   113d0:	ldr	r0, [pc, #4]	; 113dc <__assert_fail@plt+0x700>
   113d4:	add	r0, pc, r0
   113d8:	bl	1187c <error@@Base>
   113dc:	strdeq	r2, [r0], -r4
   113e0:	push	{r4, r5, r6, sl, fp, lr}
   113e4:	add	fp, sp, #16
   113e8:	ldrb	r3, [r0]
   113ec:	ldrb	ip, [r1]
   113f0:	mov	r2, r0
   113f4:	mov	r0, #0
   113f8:	cmp	r3, #0
   113fc:	beq	11434 <__assert_fail@plt+0x758>
   11400:	add	r6, r2, #1
   11404:	add	lr, r1, #1
   11408:	mov	r2, #0
   1140c:	uxtb	r4, ip
   11410:	uxtb	r5, r3
   11414:	cmp	r5, r4
   11418:	bne	11444 <__assert_fail@plt+0x768>
   1141c:	ldrb	r3, [r6, r2]
   11420:	ldrb	ip, [lr, r2]
   11424:	add	r2, r2, #1
   11428:	cmp	r3, #0
   1142c:	bne	1140c <__assert_fail@plt+0x730>
   11430:	b	11438 <__assert_fail@plt+0x75c>
   11434:	mov	r2, #0
   11438:	cmp	ip, #0
   1143c:	popeq	{r4, r5, r6, sl, fp, pc}
   11440:	mov	r3, #0
   11444:	ldrb	r1, [r1, r2]
   11448:	uxtb	r2, r3
   1144c:	mov	r0, #1
   11450:	cmp	r2, r1
   11454:	mvncc	r0, #0
   11458:	pop	{r4, r5, r6, sl, fp, pc}
   1145c:	push	{r4, r5, fp, lr}
   11460:	add	fp, sp, #8
   11464:	mov	r5, r1
   11468:	cmp	r0, #0
   1146c:	beq	114a0 <__assert_fail@plt+0x7c4>
   11470:	mov	r1, r5
   11474:	mov	r4, r0
   11478:	bl	10b5c <fopen@plt>
   1147c:	cmp	r0, #0
   11480:	popne	{r4, r5, fp, pc}
   11484:	ldrb	r0, [r5]
   11488:	cmp	r0, #119	; 0x77
   1148c:	bne	114c4 <__assert_fail@plt+0x7e8>
   11490:	ldr	r0, [pc, #72]	; 114e0 <__assert_fail@plt+0x804>
   11494:	mov	r1, r4
   11498:	add	r0, pc, r0
   1149c:	bl	118cc <error@@Base+0x50>
   114a0:	ldrb	r0, [r5]
   114a4:	ldr	r1, [pc, #40]	; 114d4 <__assert_fail@plt+0x7f8>
   114a8:	ldr	r1, [pc, r1]
   114ac:	ldr	r2, [pc, #36]	; 114d8 <__assert_fail@plt+0x7fc>
   114b0:	cmp	r0, #114	; 0x72
   114b4:	ldr	r2, [pc, r2]
   114b8:	moveq	r2, r1
   114bc:	ldr	r0, [r2]
   114c0:	pop	{r4, r5, fp, pc}
   114c4:	ldr	r0, [pc, #16]	; 114dc <__assert_fail@plt+0x800>
   114c8:	mov	r1, r4
   114cc:	add	r0, pc, r0
   114d0:	bl	118cc <error@@Base+0x50>
   114d4:	andeq	r6, r1, r0, lsr #24
   114d8:	andeq	r6, r1, r8, lsl ip
   114dc:	andeq	r2, r0, ip, lsr #12
   114e0:	andeq	r2, r0, sl, asr #12
   114e4:	ldr	r1, [pc, #32]	; 1150c <__assert_fail@plt+0x830>
   114e8:	ldr	r1, [pc, r1]
   114ec:	ldr	r1, [r1]
   114f0:	cmp	r1, r0
   114f4:	ldrne	r1, [pc, #20]	; 11510 <__assert_fail@plt+0x834>
   114f8:	ldrne	r1, [pc, r1]
   114fc:	ldrne	r1, [r1]
   11500:	cmpne	r1, r0
   11504:	bxeq	lr
   11508:	b	10c70 <fclose@plt>
   1150c:	andeq	r6, r1, r0, ror #23
   11510:	ldrdeq	r6, [r1], -r4
   11514:	push	{fp, lr}
   11518:	mov	fp, sp
   1151c:	sub	sp, sp, #88	; 0x58
   11520:	mov	r1, r0
   11524:	mov	r2, sp
   11528:	mov	r0, #3
   1152c:	bl	10bc8 <__xstat@plt>
   11530:	clz	r0, r0
   11534:	lsr	r0, r0, #5
   11538:	mov	sp, fp
   1153c:	pop	{fp, pc}
   11540:	push	{r4, r5, fp, lr}
   11544:	add	fp, sp, #8
   11548:	sub	sp, sp, #104	; 0x68
   1154c:	ldr	r0, [pc, #92]	; 115b0 <__assert_fail@plt+0x8d4>
   11550:	add	r0, pc, r0
   11554:	ldrh	r1, [r0]
   11558:	add	r5, r1, #1
   1155c:	strh	r5, [r0]
   11560:	ldr	r0, [pc, #76]	; 115b4 <__assert_fail@plt+0x8d8>
   11564:	ldr	r0, [pc, r0]
   11568:	ldr	r4, [r0]
   1156c:	bl	10c28 <getpid@plt>
   11570:	mov	r3, r0
   11574:	sxth	r0, r5
   11578:	add	r5, sp, #4
   1157c:	mov	r2, r4
   11580:	str	r0, [sp]
   11584:	mov	r0, r5
   11588:	ldr	r1, [pc, #40]	; 115b8 <__assert_fail@plt+0x8dc>
   1158c:	add	r1, pc, r1
   11590:	bl	10c94 <sprintf@plt>
   11594:	mov	r0, r5
   11598:	bl	10b98 <strdup@plt>
   1159c:	mov	r4, r0
   115a0:	bl	10bb0 <unlink@plt>
   115a4:	mov	r0, r4
   115a8:	sub	sp, fp, #8
   115ac:	pop	{r4, r5, fp, pc}
   115b0:	andeq	r6, r1, ip, lsr #23
   115b4:	andeq	r6, r1, r4, asr fp
   115b8:	muleq	r0, r5, r5
   115bc:	push	{r4, sl, fp, lr}
   115c0:	add	fp, sp, #8
   115c4:	mov	r4, r0
   115c8:	bl	10c4c <strlen@plt>
   115cc:	sub	r0, r0, #1
   115d0:	sxth	r0, r0
   115d4:	cmp	r0, #0
   115d8:	blt	115e8 <__assert_fail@plt+0x90c>
   115dc:	ldrb	r1, [r4, r0]
   115e0:	cmp	r1, #47	; 0x2f
   115e4:	bne	115cc <__assert_fail@plt+0x8f0>
   115e8:	add	r0, r4, r0
   115ec:	add	r0, r0, #1
   115f0:	pop	{r4, sl, fp, pc}
   115f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115f8:	add	fp, sp, #28
   115fc:	sub	sp, sp, #12
   11600:	str	r2, [sp]
   11604:	stmib	sp, {r0, r1}
   11608:	mov	r6, r3
   1160c:	ldr	r4, [r1]
   11610:	mov	r0, r4
   11614:	bl	10c4c <strlen@plt>
   11618:	sub	r0, r0, #1
   1161c:	sxth	r0, r0
   11620:	cmp	r0, #0
   11624:	blt	11634 <__assert_fail@plt+0x958>
   11628:	ldrb	r1, [r4, r0]
   1162c:	cmp	r1, #47	; 0x2f
   11630:	bne	11618 <__assert_fail@plt+0x93c>
   11634:	ldr	r1, [pc, #484]	; 11820 <__assert_fail@plt+0xb44>
   11638:	add	r0, r4, r0
   1163c:	add	r0, r0, #1
   11640:	ldr	r1, [pc, r1]
   11644:	str	r0, [r1]
   11648:	mov	r0, #2
   1164c:	ldr	r4, [pc, #464]	; 11824 <__assert_fail@plt+0xb48>
   11650:	add	r4, pc, r4
   11654:	mov	r1, r4
   11658:	bl	10c10 <__sysv_signal@plt>
   1165c:	mov	r0, #15
   11660:	mov	r1, r4
   11664:	bl	10c10 <__sysv_signal@plt>
   11668:	ldr	r0, [sp, #4]
   1166c:	ldr	r5, [r0]
   11670:	cmp	r5, #1
   11674:	bne	1168c <__assert_fail@plt+0x9b0>
   11678:	ldr	r0, [pc, #424]	; 11828 <__assert_fail@plt+0xb4c>
   1167c:	ldr	r0, [pc, r0]
   11680:	ldrb	r0, [r0]
   11684:	cmp	r0, #0
   11688:	bne	11808 <__assert_fail@plt+0xb2c>
   1168c:	ldr	ip, [sp, #8]
   11690:	mov	r8, #0
   11694:	cmp	r5, #2
   11698:	blt	117e4 <__assert_fail@plt+0xb08>
   1169c:	mov	r8, #0
   116a0:	mov	r7, #1
   116a4:	mov	r9, #1
   116a8:	ldr	r4, [ip, r7, lsl #2]
   116ac:	ldrb	r0, [r4]
   116b0:	cmp	r0, #45	; 0x2d
   116b4:	bne	1178c <__assert_fail@plt+0xab0>
   116b8:	ldrb	sl, [r4, #1]
   116bc:	cmp	sl, #0
   116c0:	beq	1178c <__assert_fail@plt+0xab0>
   116c4:	mov	r0, r4
   116c8:	bl	10c4c <strlen@plt>
   116cc:	mov	r2, r0
   116d0:	ldr	r0, [pc, #340]	; 1182c <__assert_fail@plt+0xb50>
   116d4:	mov	r1, r4
   116d8:	add	r0, pc, r0
   116dc:	bl	10cb8 <strncmp@plt>
   116e0:	cmp	r0, #0
   116e4:	beq	11808 <__assert_fail@plt+0xb2c>
   116e8:	ldr	ip, [sp, #8]
   116ec:	add	r1, r7, #1
   116f0:	mov	r0, #0
   116f4:	cmp	r1, r5
   116f8:	ldrlt	r0, [ip, r1, lsl #2]
   116fc:	cmp	r6, #0
   11700:	ldrbne	r2, [r6]
   11704:	cmpne	r2, #0
   11708:	beq	117f8 <__assert_fail@plt+0xb1c>
   1170c:	mov	r1, #0
   11710:	cmp	sl, r2
   11714:	beq	1173c <__assert_fail@plt+0xa60>
   11718:	mov	r2, #1
   1171c:	sxth	r1, r2
   11720:	add	r3, r1, r1, lsl #1
   11724:	ldrb	r3, [r6, r3, lsl #2]
   11728:	cmp	r3, #0
   1172c:	beq	117f8 <__assert_fail@plt+0xb1c>
   11730:	add	r2, r2, #1
   11734:	cmp	sl, r3
   11738:	bne	1171c <__assert_fail@plt+0xa40>
   1173c:	add	r1, r1, r1, lsl #1
   11740:	add	r3, r6, r1, lsl #2
   11744:	ldr	r1, [r3, #4]
   11748:	cmp	r1, #0
   1174c:	beq	117ac <__assert_fail@plt+0xad0>
   11750:	mov	r2, r4
   11754:	cmp	r0, #0
   11758:	ldrb	r7, [r2, #2]!
   1175c:	cmpeq	r7, #0
   11760:	beq	117ac <__assert_fail@plt+0xad0>
   11764:	ldr	r3, [r1]
   11768:	cmp	r3, #0
   1176c:	bne	11810 <__assert_fail@plt+0xb34>
   11770:	cmp	r7, #0
   11774:	movne	r0, r2
   11778:	str	r0, [r1]
   1177c:	ldrb	r0, [r2]
   11780:	cmp	r0, #0
   11784:	addeq	r9, r9, #1
   11788:	b	11798 <__assert_fail@plt+0xabc>
   1178c:	sxth	r0, r8
   11790:	add	r8, r8, #1
   11794:	str	r4, [ip, r0, lsl #2]
   11798:	add	r9, r9, #1
   1179c:	sxth	r7, r9
   117a0:	cmp	r5, r7
   117a4:	bgt	116a8 <__assert_fail@plt+0x9cc>
   117a8:	b	117e4 <__assert_fail@plt+0xb08>
   117ac:	ldr	r0, [r3, #8]
   117b0:	cmp	r0, #0
   117b4:	beq	117f8 <__assert_fail@plt+0xb1c>
   117b8:	ldrb	r1, [r4, #2]
   117bc:	cmp	r1, #0
   117c0:	bne	117f8 <__assert_fail@plt+0xb1c>
   117c4:	ldrb	r1, [r0]
   117c8:	cmp	r1, #0
   117cc:	bne	11810 <__assert_fail@plt+0xb34>
   117d0:	mov	r1, #1
   117d4:	strb	r1, [r0]
   117d8:	ldr	r0, [sp, #4]
   117dc:	ldr	r5, [r0]
   117e0:	b	11798 <__assert_fail@plt+0xabc>
   117e4:	ldr	r1, [sp, #4]
   117e8:	sxth	r0, r8
   117ec:	str	r0, [r1]
   117f0:	sub	sp, fp, #28
   117f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117f8:	ldr	r0, [pc, #52]	; 11834 <__assert_fail@plt+0xb58>
   117fc:	mov	r1, r4
   11800:	add	r0, pc, r0
   11804:	bl	118cc <error@@Base+0x50>
   11808:	ldr	r0, [sp]
   1180c:	bl	119a8 <error@@Base+0x12c>
   11810:	ldr	r0, [pc, #24]	; 11830 <__assert_fail@plt+0xb54>
   11814:	mov	r1, r4
   11818:	add	r0, pc, r0
   1181c:	bl	118cc <error@@Base+0x50>
   11820:	andeq	r6, r1, r8, ror sl
   11824:	andeq	r0, r0, r8, lsl r3
   11828:	andeq	r6, r1, r4, lsr #20
   1182c:	andeq	r2, r0, r6, ror #8
   11830:	andeq	r2, r0, sl, asr #6
   11834:	andeq	r2, r0, r3, asr r3
   11838:	push	{fp, lr}
   1183c:	mov	fp, sp
   11840:	mov	r0, #0
   11844:	bl	11848 <__assert_fail@plt+0xb6c>
   11848:	push	{fp, lr}
   1184c:	mov	fp, sp
   11850:	mov	r4, r0
   11854:	ldr	r0, [pc, #28]	; 11878 <__assert_fail@plt+0xb9c>
   11858:	ldr	r0, [pc, r0]
   1185c:	ldr	r0, [r0]
   11860:	cmp	r0, #0
   11864:	beq	1186c <__assert_fail@plt+0xb90>
   11868:	blx	r0
   1186c:	bl	11a08 <error@@Base+0x18c>
   11870:	mov	r0, r4
   11874:	bl	10c34 <exit@plt>
   11878:	andeq	r6, r1, r8, ror #16

0001187c <error@@Base>:
   1187c:	push	{fp, lr}
   11880:	mov	fp, sp
   11884:	mov	r3, r0
   11888:	ldr	r0, [pc, #44]	; 118bc <error@@Base+0x40>
   1188c:	ldr	r0, [pc, r0]
   11890:	ldr	r2, [r0]
   11894:	ldr	r0, [pc, #36]	; 118c0 <error@@Base+0x44>
   11898:	ldr	r0, [pc, r0]
   1189c:	ldr	r0, [r0]
   118a0:	ldr	r1, [pc, #28]	; 118c4 <error@@Base+0x48>
   118a4:	add	r1, pc, r1
   118a8:	bl	10c58 <fprintf@plt>
   118ac:	ldr	r0, [pc, #20]	; 118c8 <error@@Base+0x4c>
   118b0:	ldr	r0, [pc, r0]
   118b4:	ldr	r0, [r0]
   118b8:	bl	11848 <__assert_fail@plt+0xb6c>
   118bc:	andeq	r6, r1, ip, lsr #16
   118c0:	andeq	r6, r1, r8, lsl r8
   118c4:	andeq	r2, r0, r8, ror #4
   118c8:	andeq	r6, r1, r4, lsr #16
   118cc:	push	{fp, lr}
   118d0:	mov	fp, sp
   118d4:	sub	sp, sp, #8
   118d8:	mov	r3, r0
   118dc:	ldr	r0, [pc, #48]	; 11914 <error@@Base+0x98>
   118e0:	ldr	r0, [pc, r0]
   118e4:	ldr	r2, [r0]
   118e8:	ldr	r0, [pc, #40]	; 11918 <error@@Base+0x9c>
   118ec:	ldr	r0, [pc, r0]
   118f0:	str	r1, [sp]
   118f4:	ldr	r0, [r0]
   118f8:	ldr	r1, [pc, #28]	; 1191c <error@@Base+0xa0>
   118fc:	add	r1, pc, r1
   11900:	bl	10c58 <fprintf@plt>
   11904:	ldr	r0, [pc, #20]	; 11920 <error@@Base+0xa4>
   11908:	ldr	r0, [pc, r0]
   1190c:	ldr	r0, [r0]
   11910:	bl	11848 <__assert_fail@plt+0xb6c>
   11914:	ldrdeq	r6, [r1], -r8
   11918:	andeq	r6, r1, r4, asr #15
   1191c:	andeq	r2, r0, r8, lsl r2
   11920:	andeq	r6, r1, ip, asr #15
   11924:	push	{fp, lr}
   11928:	mov	fp, sp
   1192c:	sub	sp, sp, #8
   11930:	mov	r3, r0
   11934:	ldr	r0, [pc, #40]	; 11964 <error@@Base+0xe8>
   11938:	ldr	r0, [pc, r0]
   1193c:	ldr	r2, [r0]
   11940:	ldr	r0, [pc, #32]	; 11968 <error@@Base+0xec>
   11944:	ldr	r0, [pc, r0]
   11948:	str	r1, [sp]
   1194c:	ldr	r0, [r0]
   11950:	ldr	r1, [pc, #20]	; 1196c <error@@Base+0xf0>
   11954:	add	r1, pc, r1
   11958:	bl	10c58 <fprintf@plt>
   1195c:	mov	sp, fp
   11960:	pop	{fp, pc}
   11964:	andeq	r6, r1, r0, lsl #15
   11968:	andeq	r6, r1, ip, ror #14
   1196c:	andeq	r2, r0, r0, asr #3
   11970:	ldr	r0, [pc, #40]	; 119a0 <error@@Base+0x124>
   11974:	add	r0, pc, r0
   11978:	ldrb	r1, [r0]
   1197c:	cmp	r1, #1
   11980:	bxeq	lr
   11984:	push	{fp, lr}
   11988:	mov	fp, sp
   1198c:	mov	r1, #1
   11990:	strb	r1, [r0]
   11994:	ldr	r0, [pc, #8]	; 119a4 <error@@Base+0x128>
   11998:	add	r0, pc, r0
   1199c:	bl	1187c <error@@Base>
   119a0:	andeq	r6, r1, sl, lsl #15
   119a4:	muleq	r0, r7, r1
   119a8:	push	{fp, lr}
   119ac:	mov	fp, sp
   119b0:	mov	r3, r0
   119b4:	ldr	r0, [pc, #60]	; 119f8 <error@@Base+0x17c>
   119b8:	ldr	r0, [pc, r0]
   119bc:	ldr	r0, [r0]
   119c0:	cmp	r0, #0
   119c4:	bne	119f0 <error@@Base+0x174>
   119c8:	ldr	r0, [pc, #44]	; 119fc <error@@Base+0x180>
   119cc:	ldr	r0, [pc, r0]
   119d0:	ldr	r2, [r0]
   119d4:	ldr	r0, [pc, #36]	; 11a00 <error@@Base+0x184>
   119d8:	ldr	r0, [pc, r0]
   119dc:	ldr	r0, [r0]
   119e0:	ldr	r1, [pc, #28]	; 11a04 <error@@Base+0x188>
   119e4:	add	r1, pc, r1
   119e8:	bl	10c58 <fprintf@plt>
   119ec:	bl	11838 <__assert_fail@plt+0xb5c>
   119f0:	blx	r0
   119f4:	bl	11838 <__assert_fail@plt+0xb5c>
   119f8:	andeq	r6, r1, ip, ror #13
   119fc:	andeq	r6, r1, ip, ror #13
   11a00:	ldrdeq	r6, [r1], -r8
   11a04:	andeq	r2, r0, r0, ror #2
   11a08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11a0c:	add	fp, sp, #24
   11a10:	sub	sp, sp, #104	; 0x68
   11a14:	ldr	r8, [pc, #124]	; 11a98 <error@@Base+0x21c>
   11a18:	add	r8, pc, r8
   11a1c:	ldrsh	r0, [r8]
   11a20:	cmp	r0, #1
   11a24:	blt	11a90 <error@@Base+0x214>
   11a28:	ldr	r9, [pc, #108]	; 11a9c <error@@Base+0x220>
   11a2c:	mov	r7, #1
   11a30:	add	r4, sp, #4
   11a34:	ldr	r9, [pc, r9]
   11a38:	ldr	r5, [pc, #96]	; 11aa0 <error@@Base+0x224>
   11a3c:	add	r5, pc, r5
   11a40:	ldr	r6, [r9]
   11a44:	bl	10c28 <getpid@plt>
   11a48:	mov	r3, r0
   11a4c:	sxth	r0, r7
   11a50:	mov	r1, r5
   11a54:	mov	r2, r6
   11a58:	str	r0, [sp]
   11a5c:	mov	r0, r4
   11a60:	bl	10c94 <sprintf@plt>
   11a64:	mov	r0, r4
   11a68:	bl	10b98 <strdup@plt>
   11a6c:	mov	r6, r0
   11a70:	bl	10bb0 <unlink@plt>
   11a74:	mov	r0, r6
   11a78:	bl	10b68 <free@plt>
   11a7c:	add	r0, r7, #1
   11a80:	sxth	r7, r0
   11a84:	ldrsh	r0, [r8]
   11a88:	cmp	r7, r0
   11a8c:	ble	11a40 <error@@Base+0x1c4>
   11a90:	sub	sp, fp, #24
   11a94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a98:	andeq	r6, r1, r4, ror #13
   11a9c:	andeq	r6, r1, r4, lsl #13
   11aa0:	andeq	r2, r0, r5, ror #1
   11aa4:	andeq	r0, r0, r0
   11aa8:	ldm	r0, {r3, ip}
   11aac:	add	r1, r3, r1
   11ab0:	add	r2, ip, r2
   11ab4:	stm	r0, {r1, r2}
   11ab8:	bx	lr
   11abc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11ac0:	add	fp, sp, #24
   11ac4:	mov	r8, r3
   11ac8:	mov	r5, r2
   11acc:	mov	r4, r1
   11ad0:	mov	r6, r0
   11ad4:	bl	11130 <__assert_fail@plt+0x454>
   11ad8:	mov	r7, r0
   11adc:	cmp	r0, #0
   11ae0:	bne	11b0c <error@@Base+0x290>
   11ae4:	mov	r0, #1
   11ae8:	mov	r1, #20
   11aec:	bl	113bc <__assert_fail@plt+0x6e0>
   11af0:	mov	r7, r0
   11af4:	mov	r0, r4
   11af8:	bl	10b98 <strdup@plt>
   11afc:	str	r0, [r7, #8]
   11b00:	mov	r0, r6
   11b04:	mov	r1, r7
   11b08:	bl	111c0 <__assert_fail@plt+0x4e4>
   11b0c:	ldr	r0, [r7, #12]
   11b10:	ldr	r1, [r7, #16]
   11b14:	add	r0, r0, r5
   11b18:	add	r1, r1, r8
   11b1c:	str	r0, [r7, #12]
   11b20:	str	r1, [r7, #16]
   11b24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b28:	push	{r4, r5, r6, r7, fp, lr}
   11b2c:	add	fp, sp, #16
   11b30:	sub	sp, sp, #8
   11b34:	mov	r6, r1
   11b38:	ldr	r1, [pc, #488]	; 11d28 <error@@Base+0x4ac>
   11b3c:	mov	r5, r0
   11b40:	mov	r0, r6
   11b44:	add	r1, pc, r1
   11b48:	bl	1145c <__assert_fail@plt+0x780>
   11b4c:	mov	r4, r0
   11b50:	ldr	r0, [pc, #468]	; 11d2c <error@@Base+0x4b0>
   11b54:	mov	r1, #99	; 0x63
   11b58:	mov	r2, r4
   11b5c:	add	r0, pc, r0
   11b60:	bl	10b80 <fgets@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11d0c <error@@Base+0x490>
   11b6c:	ldr	r0, [pc, #444]	; 11d30 <error@@Base+0x4b4>
   11b70:	ldr	r1, [pc, #444]	; 11d34 <error@@Base+0x4b8>
   11b74:	mov	r2, #45	; 0x2d
   11b78:	add	r0, pc, r0
   11b7c:	add	r1, pc, r1
   11b80:	bl	10cb8 <strncmp@plt>
   11b84:	cmp	r0, #0
   11b88:	bne	11d0c <error@@Base+0x490>
   11b8c:	ldr	r0, [pc, #420]	; 11d38 <error@@Base+0x4bc>
   11b90:	mov	r1, #99	; 0x63
   11b94:	mov	r2, r4
   11b98:	add	r0, pc, r0
   11b9c:	bl	10b80 <fgets@plt>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11d0c <error@@Base+0x490>
   11ba8:	ldr	r0, [pc, #396]	; 11d3c <error@@Base+0x4c0>
   11bac:	ldr	r1, [pc, #396]	; 11d40 <error@@Base+0x4c4>
   11bb0:	add	r0, pc, r0
   11bb4:	add	r1, pc, r1
   11bb8:	bl	10b38 <strcmp@plt>
   11bbc:	cmp	r0, #0
   11bc0:	bne	11d0c <error@@Base+0x490>
   11bc4:	ldr	r0, [pc, #376]	; 11d44 <error@@Base+0x4c8>
   11bc8:	mov	r1, #99	; 0x63
   11bcc:	mov	r2, r4
   11bd0:	add	r0, pc, r0
   11bd4:	bl	10b80 <fgets@plt>
   11bd8:	cmp	r0, #0
   11bdc:	beq	11d0c <error@@Base+0x490>
   11be0:	ldr	r0, [pc, #352]	; 11d48 <error@@Base+0x4cc>
   11be4:	ldr	r1, [pc, #352]	; 11d4c <error@@Base+0x4d0>
   11be8:	add	r2, sp, #4
   11bec:	add	r0, pc, r0
   11bf0:	add	r1, pc, r1
   11bf4:	bl	10c64 <__isoc99_sscanf@plt>
   11bf8:	cmp	r0, #1
   11bfc:	bne	11d0c <error@@Base+0x490>
   11c00:	ldr	r0, [pc, #328]	; 11d50 <error@@Base+0x4d4>
   11c04:	mov	r1, #99	; 0x63
   11c08:	mov	r2, r4
   11c0c:	add	r0, pc, r0
   11c10:	bl	10b80 <fgets@plt>
   11c14:	cmp	r0, #0
   11c18:	beq	11d0c <error@@Base+0x490>
   11c1c:	ldr	r0, [pc, #304]	; 11d54 <error@@Base+0x4d8>
   11c20:	ldr	r1, [pc, #304]	; 11d58 <error@@Base+0x4dc>
   11c24:	mov	r2, sp
   11c28:	add	r0, pc, r0
   11c2c:	add	r1, pc, r1
   11c30:	bl	10c64 <__isoc99_sscanf@plt>
   11c34:	cmp	r0, #1
   11c38:	bne	11d0c <error@@Base+0x490>
   11c3c:	ldr	r0, [pc, #280]	; 11d5c <error@@Base+0x4e0>
   11c40:	mov	r1, #99	; 0x63
   11c44:	mov	r2, r4
   11c48:	add	r0, pc, r0
   11c4c:	bl	10b80 <fgets@plt>
   11c50:	cmp	r0, #0
   11c54:	beq	11d0c <error@@Base+0x490>
   11c58:	ldr	r0, [pc, #256]	; 11d60 <error@@Base+0x4e4>
   11c5c:	mov	r1, #99	; 0x63
   11c60:	mov	r2, r4
   11c64:	add	r0, pc, r0
   11c68:	bl	10b80 <fgets@plt>
   11c6c:	cmp	r0, #0
   11c70:	beq	11d0c <error@@Base+0x490>
   11c74:	ldm	r5, {r0, r1}
   11c78:	ldr	r2, [sp, #4]
   11c7c:	add	r0, r0, r2
   11c80:	ldr	r2, [sp]
   11c84:	add	r1, r1, r2
   11c88:	stm	r5, {r0, r1}
   11c8c:	add	r1, r5, #8
   11c90:	mov	r0, r4
   11c94:	bl	11d6c <error@@Base+0x4f0>
   11c98:	mov	r7, r0
   11c9c:	add	r1, r5, #416	; 0x1a0
   11ca0:	mov	r0, r4
   11ca4:	bl	11d6c <error@@Base+0x4f0>
   11ca8:	mov	r6, r0
   11cac:	add	r1, r5, #824	; 0x338
   11cb0:	mov	r0, r4
   11cb4:	bl	11d6c <error@@Base+0x4f0>
   11cb8:	ldr	r0, [sp, #4]
   11cbc:	cmp	r0, #1
   11cc0:	blt	11cfc <error@@Base+0x480>
   11cc4:	add	r1, r5, #920	; 0x398
   11cc8:	mov	r0, r4
   11ccc:	bl	11d6c <error@@Base+0x4f0>
   11cd0:	cmp	r7, #1
   11cd4:	blt	11ce4 <error@@Base+0x468>
   11cd8:	add	r1, r5, #992	; 0x3e0
   11cdc:	mov	r0, r4
   11ce0:	bl	11ea4 <error@@Base+0x628>
   11ce4:	cmp	r6, #1
   11ce8:	blt	11cfc <error@@Base+0x480>
   11cec:	movw	r0, #9048	; 0x2358
   11cf0:	add	r1, r5, r0
   11cf4:	mov	r0, r4
   11cf8:	bl	11ea4 <error@@Base+0x628>
   11cfc:	mov	r0, r4
   11d00:	bl	114e4 <__assert_fail@plt+0x808>
   11d04:	sub	sp, fp, #16
   11d08:	pop	{r4, r5, r6, r7, fp, pc}
   11d0c:	ldr	r1, [pc, #80]	; 11d64 <error@@Base+0x4e8>
   11d10:	ldr	r0, [pc, #80]	; 11d68 <error@@Base+0x4ec>
   11d14:	cmp	r6, #0
   11d18:	add	r1, pc, r1
   11d1c:	add	r0, pc, r0
   11d20:	movne	r1, r6
   11d24:	bl	118cc <error@@Base+0x50>
   11d28:	andeq	r5, r0, sl, lsr #11
   11d2c:	andeq	r6, r1, r3, lsr #11
   11d30:	andeq	r6, r1, r7, lsl #11
   11d34:	strdeq	r1, [r0], -r7
   11d38:	andeq	r6, r1, r7, ror #10
   11d3c:	andeq	r6, r1, pc, asr #10
   11d40:	strdeq	r5, [r0], -r4
   11d44:	andeq	r6, r1, pc, lsr #10
   11d48:	andeq	r6, r1, r3, lsl r5
   11d4c:	andeq	r2, r0, r8, lsr r0
   11d50:	strdeq	r6, [r1], -r3
   11d54:	ldrdeq	r6, [r1], -r7
   11d58:	strdeq	r1, [r0], -ip
   11d5c:			; <UNDEFINED> instruction: 0x000164b7
   11d60:	muleq	r1, fp, r4
   11d64:	muleq	r0, sp, lr
   11d68:	andeq	r1, r0, r7, lsl #29
   11d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d70:	add	fp, sp, #28
   11d74:	sub	sp, sp, #12
   11d78:	mov	r5, r0
   11d7c:	ldr	r0, [pc, #268]	; 11e90 <error@@Base+0x614>
   11d80:	mov	r4, r1
   11d84:	mov	r1, #99	; 0x63
   11d88:	mov	r2, r5
   11d8c:	add	r0, pc, r0
   11d90:	bl	10b80 <fgets@plt>
   11d94:	mov	r6, #0
   11d98:	cmp	r0, #0
   11d9c:	beq	11e84 <error@@Base+0x608>
   11da0:	ldr	r0, [pc, #236]	; 11e94 <error@@Base+0x618>
   11da4:	mov	r1, #99	; 0x63
   11da8:	mov	r2, r5
   11dac:	add	r0, pc, r0
   11db0:	bl	10b80 <fgets@plt>
   11db4:	cmp	r0, #0
   11db8:	beq	11e84 <error@@Base+0x608>
   11dbc:	ldr	r7, [pc, #212]	; 11e98 <error@@Base+0x61c>
   11dc0:	mov	r1, #99	; 0x63
   11dc4:	mov	r2, r5
   11dc8:	add	r7, pc, r7
   11dcc:	mov	r0, r7
   11dd0:	bl	10b80 <fgets@plt>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e84 <error@@Base+0x608>
   11ddc:	mov	r6, #0
   11de0:	add	r9, sp, #8
   11de4:	add	sl, sp, #4
   11de8:	add	r8, r7, #29
   11dec:	ldr	r1, [pc, #168]	; 11e9c <error@@Base+0x620>
   11df0:	mov	r0, r7
   11df4:	mov	r2, r9
   11df8:	mov	r3, sl
   11dfc:	add	r1, pc, r1
   11e00:	bl	10c64 <__isoc99_sscanf@plt>
   11e04:	cmp	r0, #2
   11e08:	bne	11e84 <error@@Base+0x608>
   11e0c:	mov	r0, r8
   11e10:	mov	r1, #0
   11e14:	mov	r2, #10
   11e18:	bl	10b44 <strtol@plt>
   11e1c:	cmp	r0, #0
   11e20:	beq	11e2c <error@@Base+0x5b0>
   11e24:	ldr	r1, [sp, #8]
   11e28:	b	11e4c <error@@Base+0x5d0>
   11e2c:	ldr	r1, [pc, #108]	; 11ea0 <error@@Base+0x624>
   11e30:	mov	r0, r8
   11e34:	add	r1, pc, r1
   11e38:	bl	10b38 <strcmp@plt>
   11e3c:	ldr	r1, [sp, #8]
   11e40:	cmp	r0, #0
   11e44:	movwne	r0, #11
   11e48:	moveq	r6, r1
   11e4c:	mov	r2, r4
   11e50:	ldr	r0, [r2, r0, lsl #3]!
   11e54:	add	r0, r0, r1
   11e58:	ldr	r1, [sp, #4]
   11e5c:	str	r0, [r2]
   11e60:	ldr	r0, [r2, #4]
   11e64:	add	r0, r0, r1
   11e68:	mov	r1, #99	; 0x63
   11e6c:	str	r0, [r2, #4]
   11e70:	mov	r0, r7
   11e74:	mov	r2, r5
   11e78:	bl	10b80 <fgets@plt>
   11e7c:	cmp	r0, #0
   11e80:	bne	11dec <error@@Base+0x570>
   11e84:	mov	r0, r6
   11e88:	sub	sp, fp, #28
   11e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e90:	andeq	r6, r1, r3, ror r3
   11e94:	andeq	r6, r1, r3, asr r3
   11e98:	andeq	r6, r1, r7, lsr r3
   11e9c:	andeq	r1, r0, r8, lsr #28
   11ea0:	andeq	r1, r0, r8, ror #27
   11ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea8:	add	fp, sp, #28
   11eac:	sub	sp, sp, #12
   11eb0:	mov	r5, r0
   11eb4:	ldr	r0, [pc, #268]	; 11fc8 <error@@Base+0x74c>
   11eb8:	mov	r4, r1
   11ebc:	mov	r1, #99	; 0x63
   11ec0:	mov	r2, r5
   11ec4:	add	r0, pc, r0
   11ec8:	bl	10b80 <fgets@plt>
   11ecc:	cmp	r0, #0
   11ed0:	beq	11fc0 <error@@Base+0x744>
   11ed4:	ldr	r0, [pc, #240]	; 11fcc <error@@Base+0x750>
   11ed8:	mov	r1, #99	; 0x63
   11edc:	mov	r2, r5
   11ee0:	add	r0, pc, r0
   11ee4:	bl	10b80 <fgets@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	11fc0 <error@@Base+0x744>
   11ef0:	ldr	r6, [pc, #216]	; 11fd0 <error@@Base+0x754>
   11ef4:	mov	r1, #99	; 0x63
   11ef8:	mov	r2, r5
   11efc:	add	r6, pc, r6
   11f00:	mov	r0, r6
   11f04:	bl	10b80 <fgets@plt>
   11f08:	cmp	r0, #0
   11f0c:	beq	11fc0 <error@@Base+0x744>
   11f10:	add	r7, r6, #29
   11f14:	ldr	r1, [pc, #184]	; 11fd4 <error@@Base+0x758>
   11f18:	mov	r0, r6
   11f1c:	add	r2, sp, #8
   11f20:	add	r3, sp, #4
   11f24:	add	r1, pc, r1
   11f28:	bl	10c64 <__isoc99_sscanf@plt>
   11f2c:	cmp	r0, #2
   11f30:	bne	11fc0 <error@@Base+0x744>
   11f34:	mov	r0, r6
   11f38:	bl	10c4c <strlen@plt>
   11f3c:	ldr	r9, [sp, #8]
   11f40:	ldr	sl, [sp, #4]
   11f44:	add	r0, r6, r0
   11f48:	mov	r1, #0
   11f4c:	strb	r1, [r0, #-1]
   11f50:	mov	r0, r4
   11f54:	mov	r1, r7
   11f58:	bl	11130 <__assert_fail@plt+0x454>
   11f5c:	mov	r8, r0
   11f60:	cmp	r0, #0
   11f64:	bne	11f90 <error@@Base+0x714>
   11f68:	mov	r0, #1
   11f6c:	mov	r1, #20
   11f70:	bl	113bc <__assert_fail@plt+0x6e0>
   11f74:	mov	r8, r0
   11f78:	mov	r0, r7
   11f7c:	bl	10b98 <strdup@plt>
   11f80:	str	r0, [r8, #8]
   11f84:	mov	r0, r4
   11f88:	mov	r1, r8
   11f8c:	bl	111c0 <__assert_fail@plt+0x4e4>
   11f90:	ldr	r0, [r8, #12]
   11f94:	ldr	r1, [r8, #16]
   11f98:	mov	r2, r5
   11f9c:	add	r0, r0, r9
   11fa0:	add	r1, r1, sl
   11fa4:	str	r0, [r8, #12]
   11fa8:	str	r1, [r8, #16]
   11fac:	mov	r0, r6
   11fb0:	mov	r1, #99	; 0x63
   11fb4:	bl	10b80 <fgets@plt>
   11fb8:	cmp	r0, #0
   11fbc:	bne	11f14 <error@@Base+0x698>
   11fc0:	sub	sp, fp, #28
   11fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc8:	andeq	r6, r1, fp, lsr r2
   11fcc:	andeq	r6, r1, pc, lsl r2
   11fd0:	andeq	r6, r1, r3, lsl #4
   11fd4:	andeq	r1, r0, r0, lsl #26
   11fd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11fdc:	add	fp, sp, #24
   11fe0:	sub	sp, sp, #8
   11fe4:	mov	r2, r1
   11fe8:	ldr	r1, [pc, #448]	; 121b0 <error@@Base+0x934>
   11fec:	mov	r5, r0
   11ff0:	mov	r0, r2
   11ff4:	add	r1, pc, r1
   11ff8:	bl	1145c <__assert_fail@plt+0x780>
   11ffc:	ldr	r1, [pc, #432]	; 121b4 <error@@Base+0x938>
   12000:	ldr	r2, [pc, #432]	; 121b8 <error@@Base+0x93c>
   12004:	ldr	r3, [pc, #432]	; 121bc <error@@Base+0x940>
   12008:	mov	r4, r0
   1200c:	add	r1, pc, r1
   12010:	add	r2, pc, r2
   12014:	add	r3, pc, r3
   12018:	bl	10c58 <fprintf@plt>
   1201c:	ldr	r2, [r5]
   12020:	ldr	r1, [pc, #408]	; 121c0 <error@@Base+0x944>
   12024:	mov	r0, r4
   12028:	add	r1, pc, r1
   1202c:	bl	10c58 <fprintf@plt>
   12030:	ldr	r2, [r5, #4]
   12034:	ldr	r1, [pc, #392]	; 121c4 <error@@Base+0x948>
   12038:	mov	r0, r4
   1203c:	add	r1, pc, r1
   12040:	bl	10c58 <fprintf@plt>
   12044:	ldr	r0, [r5]
   12048:	cmp	r0, #0
   1204c:	beq	1208c <error@@Base+0x810>
   12050:	ldr	r1, [r5, #4]
   12054:	vldr	d16, [pc, #332]	; 121a8 <error@@Base+0x92c>
   12058:	vmov	s2, r0
   1205c:	sub	r1, r0, r1
   12060:	mov	r0, r4
   12064:	vmov	s0, r1
   12068:	vcvt.f64.s32	d17, s0
   1206c:	vcvt.f64.s32	d18, s2
   12070:	ldr	r1, [pc, #340]	; 121cc <error@@Base+0x950>
   12074:	vmul.f64	d16, d17, d16
   12078:	vdiv.f64	d16, d16, d18
   1207c:	vmov	r2, r3, d16
   12080:	add	r1, pc, r1
   12084:	bl	10c58 <fprintf@plt>
   12088:	b	120a4 <error@@Base+0x828>
   1208c:	ldr	r0, [pc, #308]	; 121c8 <error@@Base+0x94c>
   12090:	mov	r1, #8
   12094:	mov	r2, #1
   12098:	mov	r3, r4
   1209c:	add	r0, pc, r0
   120a0:	bl	10bd4 <fwrite@plt>
   120a4:	ldr	r0, [pc, #292]	; 121d0 <error@@Base+0x954>
   120a8:	mov	r1, #12
   120ac:	mov	r2, #1
   120b0:	mov	r3, r4
   120b4:	mov	r7, #1
   120b8:	add	r0, pc, r0
   120bc:	bl	10bd4 <fwrite@plt>
   120c0:	mov	r8, #0
   120c4:	str	r7, [sp, #4]
   120c8:	add	r1, r5, #8
   120cc:	mov	r0, r4
   120d0:	mov	r2, #50	; 0x32
   120d4:	str	r8, [sp]
   120d8:	ldr	r3, [pc, #244]	; 121d4 <error@@Base+0x958>
   120dc:	add	r3, pc, r3
   120e0:	bl	121f0 <error@@Base+0x974>
   120e4:	str	r8, [sp]
   120e8:	str	r7, [sp, #4]
   120ec:	add	r6, r5, #416	; 0x1a0
   120f0:	mov	r0, r4
   120f4:	mov	r2, #50	; 0x32
   120f8:	ldr	r3, [pc, #216]	; 121d8 <error@@Base+0x95c>
   120fc:	mov	r1, r6
   12100:	add	r3, pc, r3
   12104:	bl	121f0 <error@@Base+0x974>
   12108:	str	r7, [sp]
   1210c:	str	r7, [sp, #4]
   12110:	add	r1, r5, #824	; 0x338
   12114:	mov	r0, r4
   12118:	mov	r2, #10
   1211c:	ldr	r3, [pc, #184]	; 121dc <error@@Base+0x960>
   12120:	add	r3, pc, r3
   12124:	bl	121f0 <error@@Base+0x974>
   12128:	ldr	r0, [r5]
   1212c:	cmp	r0, #1
   12130:	blt	12198 <error@@Base+0x91c>
   12134:	str	r8, [sp]
   12138:	str	r8, [sp, #4]
   1213c:	add	r1, r5, #920	; 0x398
   12140:	mov	r0, r4
   12144:	mov	r2, #8
   12148:	ldr	r3, [pc, #144]	; 121e0 <error@@Base+0x964>
   1214c:	add	r3, pc, r3
   12150:	bl	121f0 <error@@Base+0x974>
   12154:	ldr	r0, [r5, #8]
   12158:	cmp	r0, #1
   1215c:	blt	12174 <error@@Base+0x8f8>
   12160:	ldr	r2, [pc, #124]	; 121e4 <error@@Base+0x968>
   12164:	add	r1, r5, #992	; 0x3e0
   12168:	mov	r0, r4
   1216c:	add	r2, pc, r2
   12170:	bl	125b0 <error@@Base+0xd34>
   12174:	ldr	r0, [r6]
   12178:	cmp	r0, #1
   1217c:	blt	12198 <error@@Base+0x91c>
   12180:	ldr	r2, [pc, #96]	; 121e8 <error@@Base+0x96c>
   12184:	movw	r0, #9048	; 0x2358
   12188:	add	r1, r5, r0
   1218c:	mov	r0, r4
   12190:	add	r2, pc, r2
   12194:	bl	125b0 <error@@Base+0xd34>
   12198:	mov	r0, r4
   1219c:	sub	sp, fp, #24
   121a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   121a4:	b	114e4 <__assert_fail@plt+0x808>
   121a8:	andeq	r0, r0, r0
   121ac:	subsmi	r0, r9, r0
   121b0:	andeq	r1, r0, r7, asr #23
   121b4:			; <UNDEFINED> instruction: 0x00001bb1
   121b8:	andeq	r1, r0, r3, ror #22
   121bc:	muleq	r0, r4, r0
   121c0:	muleq	r0, sl, fp
   121c4:	muleq	r0, r4, fp
   121c8:	muleq	r0, r0, fp
   121cc:			; <UNDEFINED> instruction: 0x00001bb5
   121d0:	andeq	r1, r0, lr, lsr #22
   121d4:	andeq	r1, r0, r7, lsl fp
   121d8:	andeq	r1, r0, r6, lsl #22
   121dc:	ldrdeq	r1, [r0], -sp
   121e0:	andeq	r1, r0, r8, asr #21
   121e4:	andeq	r1, r0, r7, lsl #21
   121e8:	andeq	r1, r0, r6, ror sl
   121ec:	nop	{0}
   121f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121f4:	add	fp, sp, #28
   121f8:	sub	sp, sp, #4
   121fc:	vpush	{d8}
   12200:	sub	sp, sp, #8
   12204:	mov	r5, r1
   12208:	ldr	r1, [pc, #832]	; 12550 <error@@Base+0xcd4>
   1220c:	mov	r8, r2
   12210:	mov	r2, r3
   12214:	mov	r4, r0
   12218:	add	r1, pc, r1
   1221c:	bl	10c58 <fprintf@plt>
   12220:	ldr	r0, [pc, #812]	; 12554 <error@@Base+0xcd8>
   12224:	mov	r1, #26
   12228:	mov	r2, #1
   1222c:	mov	r3, r4
   12230:	mov	r7, #1
   12234:	add	r0, pc, r0
   12238:	bl	10bd4 <fwrite@plt>
   1223c:	ldr	r0, [pc, #788]	; 12558 <error@@Base+0xcdc>
   12240:	mov	r1, #3
   12244:	mov	r2, #1
   12248:	mov	r3, r4
   1224c:	add	r0, pc, r0
   12250:	bl	10bd4 <fwrite@plt>
   12254:	ldrb	r1, [fp, #8]
   12258:	ldr	r0, [pc, #764]	; 1255c <error@@Base+0xce0>
   1225c:	ldr	r2, [pc, #764]	; 12560 <error@@Base+0xce4>
   12260:	str	r1, [sp]
   12264:	cmp	r1, #0
   12268:	add	r0, pc, r0
   1226c:	add	r2, pc, r2
   12270:	ldr	r1, [pc, #748]	; 12564 <error@@Base+0xce8>
   12274:	movne	r2, r0
   12278:	mov	r0, r4
   1227c:	add	r1, pc, r1
   12280:	bl	10c58 <fprintf@plt>
   12284:	ldr	r1, [fp, #12]
   12288:	lsl	r0, r8, #16
   1228c:	sxth	r6, r8
   12290:	cmp	r0, #65536	; 0x10000
   12294:	str	r1, [sp, #4]
   12298:	blt	12380 <error@@Base+0xb04>
   1229c:	ldr	sl, [pc, #708]	; 12568 <error@@Base+0xcec>
   122a0:	vldr	d8, [pc, #672]	; 12548 <error@@Base+0xccc>
   122a4:	mov	r8, #1
   122a8:	add	sl, pc, sl
   122ac:	mov	r0, r5
   122b0:	ldr	r2, [r0, r7, lsl #3]!
   122b4:	cmp	r2, #1
   122b8:	blt	12370 <error@@Base+0xaf4>
   122bc:	cmp	r0, #0
   122c0:	beq	12320 <error@@Base+0xaa4>
   122c4:	add	r9, r5, r7, lsl #3
   122c8:	mov	r0, r4
   122cc:	ldr	r3, [r9, #4]!
   122d0:	ldr	r1, [pc, #660]	; 1256c <error@@Base+0xcf0>
   122d4:	add	r1, pc, r1
   122d8:	bl	10c58 <fprintf@plt>
   122dc:	ldr	r0, [r5, r7, lsl #3]
   122e0:	cmp	r0, #0
   122e4:	beq	12330 <error@@Base+0xab4>
   122e8:	ldr	r1, [r9]
   122ec:	vmov	s2, r0
   122f0:	sub	r1, r0, r1
   122f4:	mov	r0, r4
   122f8:	vmov	s0, r1
   122fc:	vcvt.f64.s32	d16, s0
   12300:	vcvt.f64.s32	d17, s2
   12304:	ldr	r1, [pc, #616]	; 12574 <error@@Base+0xcf8>
   12308:	vmul.f64	d16, d16, d8
   1230c:	vdiv.f64	d16, d16, d17
   12310:	vmov	r2, r3, d16
   12314:	add	r1, pc, r1
   12318:	bl	10c58 <fprintf@plt>
   1231c:	b	12348 <error@@Base+0xacc>
   12320:	ldr	r0, [pc, #592]	; 12578 <error@@Base+0xcfc>
   12324:	mov	r1, #26
   12328:	add	r0, pc, r0
   1232c:	b	1233c <error@@Base+0xac0>
   12330:	ldr	r0, [pc, #568]	; 12570 <error@@Base+0xcf4>
   12334:	mov	r1, #8
   12338:	add	r0, pc, r0
   1233c:	mov	r2, #1
   12340:	mov	r3, r4
   12344:	bl	10bd4 <fwrite@plt>
   12348:	ldr	r0, [pc, #556]	; 1257c <error@@Base+0xd00>
   1234c:	mov	r1, #3
   12350:	mov	r2, #1
   12354:	mov	r3, r4
   12358:	add	r0, pc, r0
   1235c:	bl	10bd4 <fwrite@plt>
   12360:	mov	r0, r4
   12364:	mov	r1, sl
   12368:	mov	r2, r7
   1236c:	bl	10c58 <fprintf@plt>
   12370:	add	r8, r8, #1
   12374:	sxth	r7, r8
   12378:	cmp	r6, r7
   1237c:	bge	122ac <error@@Base+0xa30>
   12380:	ldr	r0, [sp]
   12384:	cmp	r0, #0
   12388:	beq	1245c <error@@Base+0xbe0>
   1238c:	add	r7, r6, #1
   12390:	mov	r0, r5
   12394:	ldr	r2, [r0, r7, lsl #3]!
   12398:	cmp	r2, #1
   1239c:	blt	1245c <error@@Base+0xbe0>
   123a0:	cmp	r0, #0
   123a4:	beq	12408 <error@@Base+0xb8c>
   123a8:	add	r8, r5, r7, lsl #3
   123ac:	mov	r0, r4
   123b0:	ldr	r3, [r8, #4]!
   123b4:	ldr	r1, [pc, #452]	; 12580 <error@@Base+0xd04>
   123b8:	add	r1, pc, r1
   123bc:	bl	10c58 <fprintf@plt>
   123c0:	ldr	r0, [r5, r7, lsl #3]
   123c4:	cmp	r0, #0
   123c8:	beq	12418 <error@@Base+0xb9c>
   123cc:	ldr	r1, [r8]
   123d0:	vldr	d16, [pc, #368]	; 12548 <error@@Base+0xccc>
   123d4:	vmov	s2, r0
   123d8:	sub	r1, r0, r1
   123dc:	mov	r0, r4
   123e0:	vmov	s0, r1
   123e4:	vcvt.f64.s32	d17, s0
   123e8:	vcvt.f64.s32	d18, s2
   123ec:	ldr	r1, [pc, #404]	; 12588 <error@@Base+0xd0c>
   123f0:	vmul.f64	d16, d17, d16
   123f4:	vdiv.f64	d16, d16, d18
   123f8:	vmov	r2, r3, d16
   123fc:	add	r1, pc, r1
   12400:	bl	10c58 <fprintf@plt>
   12404:	b	12430 <error@@Base+0xbb4>
   12408:	ldr	r0, [pc, #380]	; 1258c <error@@Base+0xd10>
   1240c:	mov	r1, #26
   12410:	add	r0, pc, r0
   12414:	b	12424 <error@@Base+0xba8>
   12418:	ldr	r0, [pc, #356]	; 12584 <error@@Base+0xd08>
   1241c:	mov	r1, #8
   12420:	add	r0, pc, r0
   12424:	mov	r2, #1
   12428:	mov	r3, r4
   1242c:	bl	10bd4 <fwrite@plt>
   12430:	ldr	r0, [pc, #344]	; 12590 <error@@Base+0xd14>
   12434:	mov	r1, #3
   12438:	mov	r2, #1
   1243c:	mov	r3, r4
   12440:	add	r0, pc, r0
   12444:	bl	10bd4 <fwrite@plt>
   12448:	ldr	r1, [pc, #324]	; 12594 <error@@Base+0xd18>
   1244c:	mov	r0, r4
   12450:	mov	r2, r6
   12454:	add	r1, pc, r1
   12458:	bl	10c58 <fprintf@plt>
   1245c:	ldr	r0, [sp, #4]
   12460:	tst	r0, #255	; 0xff
   12464:	beq	124cc <error@@Base+0xc50>
   12468:	cmp	r5, #0
   1246c:	beq	124dc <error@@Base+0xc60>
   12470:	ldm	r5, {r2, r3}
   12474:	ldr	r1, [pc, #284]	; 12598 <error@@Base+0xd1c>
   12478:	mov	r0, r4
   1247c:	add	r1, pc, r1
   12480:	bl	10c58 <fprintf@plt>
   12484:	ldr	r0, [r5]
   12488:	cmp	r0, #0
   1248c:	beq	124ec <error@@Base+0xc70>
   12490:	ldr	r1, [r5, #4]
   12494:	vldr	d16, [pc, #172]	; 12548 <error@@Base+0xccc>
   12498:	vmov	s2, r0
   1249c:	sub	r1, r0, r1
   124a0:	mov	r0, r4
   124a4:	vmov	s0, r1
   124a8:	vcvt.f64.s32	d17, s0
   124ac:	vcvt.f64.s32	d18, s2
   124b0:	ldr	r1, [pc, #232]	; 125a0 <error@@Base+0xd24>
   124b4:	vmul.f64	d16, d17, d16
   124b8:	vdiv.f64	d16, d16, d18
   124bc:	vmov	r2, r3, d16
   124c0:	add	r1, pc, r1
   124c4:	bl	10c58 <fprintf@plt>
   124c8:	b	12504 <error@@Base+0xc88>
   124cc:	sub	sp, fp, #40	; 0x28
   124d0:	vpop	{d8}
   124d4:	add	sp, sp, #4
   124d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124dc:	ldr	r0, [pc, #192]	; 125a4 <error@@Base+0xd28>
   124e0:	mov	r1, #26
   124e4:	add	r0, pc, r0
   124e8:	b	124f8 <error@@Base+0xc7c>
   124ec:	ldr	r0, [pc, #168]	; 1259c <error@@Base+0xd20>
   124f0:	mov	r1, #8
   124f4:	add	r0, pc, r0
   124f8:	mov	r2, #1
   124fc:	mov	r3, r4
   12500:	bl	10bd4 <fwrite@plt>
   12504:	ldr	r0, [pc, #156]	; 125a8 <error@@Base+0xd2c>
   12508:	mov	r1, #3
   1250c:	mov	r2, #1
   12510:	mov	r3, r4
   12514:	add	r0, pc, r0
   12518:	bl	10bd4 <fwrite@plt>
   1251c:	ldr	r0, [pc, #136]	; 125ac <error@@Base+0xd30>
   12520:	mov	r1, #7
   12524:	mov	r2, #1
   12528:	mov	r3, r4
   1252c:	add	r0, pc, r0
   12530:	sub	sp, fp, #40	; 0x28
   12534:	vpop	{d8}
   12538:	add	sp, sp, #4
   1253c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12540:	b	10bd4 <fwrite@plt>
   12544:	nop	{0}
   12548:	andeq	r0, r0, r0
   1254c:	subsmi	r0, r9, r0
   12550:	andeq	r1, r0, r3, lsr #20
   12554:	andeq	r1, r0, r7, lsr sl
   12558:	andeq	r1, r0, sl, lsr sl
   1255c:	ldrdeq	r1, [r0], -r8
   12560:	ldrdeq	r1, [r0], -fp
   12564:	andeq	r1, r0, r0, asr #19
   12568:	andeq	r1, r0, r6, lsr #19
   1256c:	andeq	r1, r0, ip, lsl #19
   12570:	strdeq	r1, [r0], -r4
   12574:	andeq	r1, r0, r1, lsr #18
   12578:	andeq	r1, r0, r3, asr #18
   1257c:	andeq	r1, r0, lr, lsr #18
   12580:	andeq	r1, r0, r8, lsr #17
   12584:	andeq	r1, r0, ip, lsl #16
   12588:	andeq	r1, r0, r9, lsr r8
   1258c:	andeq	r1, r0, fp, asr r8
   12590:	andeq	r1, r0, r6, asr #16
   12594:	andeq	r1, r0, r3, lsl #16
   12598:	andeq	r1, r0, r4, ror #15
   1259c:	andeq	r1, r0, r8, lsr r7
   125a0:	andeq	r1, r0, r5, ror r7
   125a4:	andeq	r1, r0, r7, lsl #15
   125a8:	andeq	r1, r0, r2, ror r7
   125ac:	strdeq	r1, [r0], -r0
   125b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b4:	add	fp, sp, #28
   125b8:	sub	sp, sp, #4
   125bc:	vpush	{d8}
   125c0:	mov	r5, r0
   125c4:	mov	r0, r1
   125c8:	mov	r6, r2
   125cc:	mov	r8, r1
   125d0:	bl	112e0 <__assert_fail@plt+0x604>
   125d4:	movw	r0, #8052	; 0x1f74
   125d8:	ldr	r0, [r8, r0]!
   125dc:	mov	r4, r8
   125e0:	ldr	r1, [r4, #-4]!
   125e4:	ldr	r2, [pc, #324]	; 12730 <error@@Base+0xeb4>
   125e8:	add	r2, pc, r2
   125ec:	bl	138ac <error@@Base+0x2030>
   125f0:	ldr	r1, [pc, #316]	; 12734 <error@@Base+0xeb8>
   125f4:	mov	r0, r5
   125f8:	mov	r2, r6
   125fc:	add	r1, pc, r1
   12600:	bl	10c58 <fprintf@plt>
   12604:	ldr	r0, [pc, #300]	; 12738 <error@@Base+0xebc>
   12608:	mov	r1, #26
   1260c:	mov	r2, #1
   12610:	mov	r3, r5
   12614:	add	r0, pc, r0
   12618:	bl	10bd4 <fwrite@plt>
   1261c:	ldr	r0, [pc, #280]	; 1273c <error@@Base+0xec0>
   12620:	mov	r1, #3
   12624:	mov	r2, #1
   12628:	mov	r3, r5
   1262c:	add	r0, pc, r0
   12630:	bl	10bd4 <fwrite@plt>
   12634:	mov	r0, #10
   12638:	mov	r1, r5
   1263c:	bl	10c88 <fputc@plt>
   12640:	ldr	r0, [r8]
   12644:	cmp	r0, #1
   12648:	blt	1271c <error@@Base+0xea0>
   1264c:	ldr	r7, [pc, #236]	; 12740 <error@@Base+0xec4>
   12650:	ldr	r6, [pc, #236]	; 12744 <error@@Base+0xec8>
   12654:	vldr	d8, [pc, #204]	; 12728 <error@@Base+0xeac>
   12658:	mov	sl, #0
   1265c:	add	r7, pc, r7
   12660:	add	r6, pc, r6
   12664:	ldr	r0, [r4]
   12668:	ldr	r9, [r0, sl, lsl #2]
   1266c:	mov	r0, r5
   12670:	ldr	r2, [r9, #12]
   12674:	ldr	r3, [r9, #16]
   12678:	ldr	r1, [pc, #200]	; 12748 <error@@Base+0xecc>
   1267c:	add	r1, pc, r1
   12680:	bl	10c58 <fprintf@plt>
   12684:	ldr	r0, [r9, #12]
   12688:	cmp	r0, #0
   1268c:	beq	126c8 <error@@Base+0xe4c>
   12690:	ldr	r1, [r9, #16]
   12694:	vmov	s2, r0
   12698:	sub	r1, r0, r1
   1269c:	mov	r0, r5
   126a0:	vmov	s0, r1
   126a4:	vcvt.f64.s32	d16, s0
   126a8:	vcvt.f64.s32	d17, s2
   126ac:	ldr	r1, [pc, #156]	; 12750 <error@@Base+0xed4>
   126b0:	vmul.f64	d16, d16, d8
   126b4:	vdiv.f64	d16, d16, d17
   126b8:	vmov	r2, r3, d16
   126bc:	add	r1, pc, r1
   126c0:	bl	10c58 <fprintf@plt>
   126c4:	b	126e0 <error@@Base+0xe64>
   126c8:	ldr	r0, [pc, #124]	; 1274c <error@@Base+0xed0>
   126cc:	mov	r1, #8
   126d0:	mov	r2, #1
   126d4:	mov	r3, r5
   126d8:	add	r0, pc, r0
   126dc:	bl	10bd4 <fwrite@plt>
   126e0:	mov	r0, r7
   126e4:	mov	r1, #3
   126e8:	mov	r2, #1
   126ec:	mov	r3, r5
   126f0:	bl	10bd4 <fwrite@plt>
   126f4:	ldr	r0, [r4]
   126f8:	mov	r1, r6
   126fc:	ldr	r0, [r0, sl, lsl #2]
   12700:	ldr	r2, [r0, #8]
   12704:	mov	r0, r5
   12708:	bl	10c58 <fprintf@plt>
   1270c:	ldr	r0, [r8]
   12710:	add	sl, sl, #1
   12714:	cmp	sl, r0
   12718:	blt	12664 <error@@Base+0xde8>
   1271c:	vpop	{d8}
   12720:	add	sp, sp, #4
   12724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12728:	andeq	r0, r0, r0
   1272c:	subsmi	r0, r9, r0
   12730:	andeq	r0, r0, r4, ror #2
   12734:	andeq	r1, r0, pc, lsr r6
   12738:	andeq	r1, r0, r7, asr r6
   1273c:	andeq	r1, r0, sl, asr r6
   12740:	andeq	r1, r0, sl, lsr #12
   12744:	ldrdeq	r1, [r0], -ip
   12748:	andeq	r1, r0, r4, ror #11
   1274c:	andeq	r1, r0, r4, asr r5
   12750:	andeq	r1, r0, r9, ror r5
   12754:	ldr	r1, [r1, #8]
   12758:	ldr	r0, [r0, #8]
   1275c:	b	113e0 <__assert_fail@plt+0x704>
   12760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12764:	add	fp, sp, #28
   12768:	sub	sp, sp, #28
   1276c:	ldr	r8, [r1]
   12770:	str	r0, [sp, #4]
   12774:	cmp	r8, #0
   12778:	str	r8, [sp, #16]
   1277c:	beq	12ed0 <error@@Base+0x1654>
   12780:	ldr	sl, [pc, #1968]	; 12f38 <error@@Base+0x16bc>
   12784:	add	r9, sp, #12
   12788:	add	sl, pc, sl
   1278c:	mov	r0, #17
   12790:	mov	r1, r8
   12794:	mov	r5, r9
   12798:	mov	lr, r0
   1279c:	mov	r9, #18
   127a0:	cmp	r5, #0
   127a4:	beq	12910 <error@@Base+0x1094>
   127a8:	mov	r5, r1
   127ac:	ldr	r0, [r5, #12]
   127b0:	mov	r2, #0
   127b4:	movw	r1, #1092	; 0x444
   127b8:	sub	r3, r1, r2
   127bc:	add	r3, r2, r3, lsr #1
   127c0:	add	r7, r3, r3, lsl #1
   127c4:	ldr	r6, [sl, r7, lsl #2]
   127c8:	cmp	r6, r0
   127cc:	bls	127e0 <error@@Base+0xf64>
   127d0:	sub	r1, r3, #1
   127d4:	cmp	r1, r2
   127d8:	bcs	127b8 <error@@Base+0xf3c>
   127dc:	b	1282c <error@@Base+0xfb0>
   127e0:	add	r2, sl, r7, lsl #2
   127e4:	ldr	r7, [r2, #4]
   127e8:	cmp	r7, r0
   127ec:	bcs	12800 <error@@Base+0xf84>
   127f0:	add	r2, r3, #1
   127f4:	cmp	r1, r2
   127f8:	bcs	127b8 <error@@Base+0xf3c>
   127fc:	b	1282c <error@@Base+0xfb0>
   12800:	ldr	r1, [r2, #8]
   12804:	orr	r1, r1, #2
   12808:	cmp	r1, #6
   1280c:	bne	1282c <error@@Base+0xfb0>
   12810:	ldr	r5, [r5, #4]
   12814:	cmp	r5, #0
   12818:	bne	127ac <error@@Base+0xf30>
   1281c:	mov	r2, #18
   12820:	mov	ip, #18
   12824:	mov	r5, #0
   12828:	b	12b10 <error@@Base+0x1294>
   1282c:	cmp	r5, #0
   12830:	beq	12910 <error@@Base+0x1094>
   12834:	mov	r2, #0
   12838:	movw	r1, #1092	; 0x444
   1283c:	sub	r3, r1, r2
   12840:	add	r3, r2, r3, lsr #1
   12844:	add	r7, r3, r3, lsl #1
   12848:	ldr	r6, [sl, r7, lsl #2]
   1284c:	cmp	r6, r0
   12850:	bls	12864 <error@@Base+0xfe8>
   12854:	sub	r1, r3, #1
   12858:	cmp	r1, r2
   1285c:	bcs	1283c <error@@Base+0xfc0>
   12860:	b	12880 <error@@Base+0x1004>
   12864:	add	r2, sl, r7, lsl #2
   12868:	ldr	r7, [r2, #4]
   1286c:	cmp	r7, r0
   12870:	bcs	12c64 <error@@Base+0x13e8>
   12874:	add	r2, r3, #1
   12878:	cmp	r1, r2
   1287c:	bcs	1283c <error@@Base+0xfc0>
   12880:	mov	ip, #0
   12884:	ldr	r6, [r5, #4]
   12888:	cmp	r6, #0
   1288c:	beq	1297c <error@@Base+0x1100>
   12890:	mov	r2, r6
   12894:	str	r5, [sp, #8]
   12898:	ldr	r0, [r2, #12]
   1289c:	mov	r4, #0
   128a0:	movw	r3, #1092	; 0x444
   128a4:	sub	r7, r3, r4
   128a8:	add	r7, r4, r7, lsr #1
   128ac:	add	r5, r7, r7, lsl #1
   128b0:	ldr	r1, [sl, r5, lsl #2]
   128b4:	cmp	r1, r0
   128b8:	bls	128cc <error@@Base+0x1050>
   128bc:	sub	r3, r7, #1
   128c0:	cmp	r3, r4
   128c4:	bcs	128a4 <error@@Base+0x1028>
   128c8:	b	12920 <error@@Base+0x10a4>
   128cc:	add	r5, sl, r5, lsl #2
   128d0:	ldr	r1, [r5, #4]
   128d4:	cmp	r1, r0
   128d8:	bcs	128ec <error@@Base+0x1070>
   128dc:	add	r4, r7, #1
   128e0:	cmp	r3, r4
   128e4:	bcs	128a4 <error@@Base+0x1028>
   128e8:	b	12920 <error@@Base+0x10a4>
   128ec:	ldr	r1, [r5, #8]
   128f0:	orr	r1, r1, #2
   128f4:	cmp	r1, #6
   128f8:	bne	12920 <error@@Base+0x10a4>
   128fc:	ldr	r2, [r2, #4]
   12900:	cmp	r2, #0
   12904:	bne	12898 <error@@Base+0x101c>
   12908:	mov	r2, #18
   1290c:	b	12990 <error@@Base+0x1114>
   12910:	mov	r5, #0
   12914:	mov	r2, #18
   12918:	mov	ip, #18
   1291c:	b	12b10 <error@@Base+0x1294>
   12920:	cmp	r2, #0
   12924:	beq	1298c <error@@Base+0x1110>
   12928:	mov	r3, #0
   1292c:	movw	r2, #1092	; 0x444
   12930:	sub	r1, r2, r3
   12934:	add	r7, r3, r1, lsr #1
   12938:	add	r5, r7, r7, lsl #1
   1293c:	ldr	r1, [sl, r5, lsl #2]
   12940:	cmp	r1, r0
   12944:	bls	12958 <error@@Base+0x10dc>
   12948:	sub	r2, r7, #1
   1294c:	cmp	r2, r3
   12950:	bcs	12930 <error@@Base+0x10b4>
   12954:	b	12984 <error@@Base+0x1108>
   12958:	add	r3, sl, r5, lsl #2
   1295c:	ldr	r1, [r3, #4]
   12960:	cmp	r1, r0
   12964:	bcs	12c6c <error@@Base+0x13f0>
   12968:	add	r3, r7, #1
   1296c:	cmp	r2, r3
   12970:	bcs	12930 <error@@Base+0x10b4>
   12974:	mov	r2, #0
   12978:	b	12990 <error@@Base+0x1114>
   1297c:	mov	r2, #18
   12980:	b	12b10 <error@@Base+0x1294>
   12984:	mov	r2, #0
   12988:	b	12990 <error@@Base+0x1114>
   1298c:	mov	r2, #18
   12990:	ldr	r0, [r6, #12]
   12994:	mov	r4, #0
   12998:	movw	r3, #1092	; 0x444
   1299c:	sub	r1, r3, r4
   129a0:	add	r7, r4, r1, lsr #1
   129a4:	add	r5, r7, r7, lsl #1
   129a8:	ldr	r1, [sl, r5, lsl #2]
   129ac:	cmp	r1, r0
   129b0:	bls	129c4 <error@@Base+0x1148>
   129b4:	sub	r3, r7, #1
   129b8:	cmp	r3, r4
   129bc:	bcs	1299c <error@@Base+0x1120>
   129c0:	b	12a0c <error@@Base+0x1190>
   129c4:	add	r5, sl, r5, lsl #2
   129c8:	ldr	r1, [r5, #4]
   129cc:	cmp	r1, r0
   129d0:	bcs	129e4 <error@@Base+0x1168>
   129d4:	add	r4, r7, #1
   129d8:	cmp	r3, r4
   129dc:	bcs	1299c <error@@Base+0x1120>
   129e0:	b	12a0c <error@@Base+0x1190>
   129e4:	ldr	r0, [r5, #8]
   129e8:	orr	r0, r0, #2
   129ec:	cmp	r0, #6
   129f0:	bne	12a0c <error@@Base+0x1190>
   129f4:	ldr	r6, [r6, #4]
   129f8:	cmp	r6, #0
   129fc:	bne	12990 <error@@Base+0x1114>
   12a00:	ldr	r5, [sp, #8]
   12a04:	mov	r9, #18
   12a08:	b	12b00 <error@@Base+0x1284>
   12a0c:	mov	r9, #18
   12a10:	cmp	r6, #0
   12a14:	beq	12a94 <error@@Base+0x1218>
   12a18:	ldr	r6, [r6, #4]
   12a1c:	cmp	r6, #0
   12a20:	beq	12a94 <error@@Base+0x1218>
   12a24:	ldr	r0, [r6, #12]
   12a28:	mov	r3, #0
   12a2c:	movw	r4, #1092	; 0x444
   12a30:	sub	r1, r4, r3
   12a34:	add	r7, r3, r1, lsr #1
   12a38:	add	r5, r7, r7, lsl #1
   12a3c:	ldr	r1, [sl, r5, lsl #2]
   12a40:	cmp	r1, r0
   12a44:	bls	12a58 <error@@Base+0x11dc>
   12a48:	sub	r4, r7, #1
   12a4c:	cmp	r4, r3
   12a50:	bcs	12a30 <error@@Base+0x11b4>
   12a54:	b	12a9c <error@@Base+0x1220>
   12a58:	add	r3, sl, r5, lsl #2
   12a5c:	ldr	r1, [r3, #4]
   12a60:	cmp	r1, r0
   12a64:	bcs	12a78 <error@@Base+0x11fc>
   12a68:	add	r3, r7, #1
   12a6c:	cmp	r4, r3
   12a70:	bcs	12a30 <error@@Base+0x11b4>
   12a74:	b	12a9c <error@@Base+0x1220>
   12a78:	ldr	r1, [r3, #8]
   12a7c:	orr	r1, r1, #2
   12a80:	cmp	r1, #6
   12a84:	bne	12a9c <error@@Base+0x1220>
   12a88:	ldr	r6, [r6, #4]
   12a8c:	cmp	r6, #0
   12a90:	bne	12a24 <error@@Base+0x11a8>
   12a94:	ldr	r5, [sp, #8]
   12a98:	b	12b00 <error@@Base+0x1284>
   12a9c:	ldr	r5, [sp, #8]
   12aa0:	cmp	r6, #0
   12aa4:	beq	12b00 <error@@Base+0x1284>
   12aa8:	mov	r4, #0
   12aac:	movw	r6, #1092	; 0x444
   12ab0:	sub	r1, r6, r4
   12ab4:	add	r3, r4, r1, lsr #1
   12ab8:	add	r7, r3, r3, lsl #1
   12abc:	ldr	r1, [sl, r7, lsl #2]
   12ac0:	cmp	r1, r0
   12ac4:	bls	12ad8 <error@@Base+0x125c>
   12ac8:	sub	r6, r3, #1
   12acc:	cmp	r6, r4
   12ad0:	bcs	12ab0 <error@@Base+0x1234>
   12ad4:	b	12afc <error@@Base+0x1280>
   12ad8:	add	r7, sl, r7, lsl #2
   12adc:	ldr	r1, [r7, #4]
   12ae0:	cmp	r1, r0
   12ae4:	bcs	12d08 <error@@Base+0x148c>
   12ae8:	add	r4, r3, #1
   12aec:	mov	r9, #0
   12af0:	cmp	r6, r4
   12af4:	bcs	12ab0 <error@@Base+0x1234>
   12af8:	b	12b00 <error@@Base+0x1284>
   12afc:	mov	r9, #0
   12b00:	cmp	ip, #1
   12b04:	moveq	r0, #1
   12b08:	cmpeq	r2, #2
   12b0c:	beq	12be4 <error@@Base+0x1368>
   12b10:	sub	r0, r2, #1
   12b14:	cmp	r0, #3
   12b18:	subcs	r0, ip, #1
   12b1c:	cmpcs	r0, #3
   12b20:	bcc	12d20 <error@@Base+0x14a4>
   12b24:	orr	r6, r2, #1
   12b28:	orr	r4, ip, #1
   12b2c:	cmp	r6, #9
   12b30:	cmpeq	r4, #9
   12b34:	beq	12be0 <error@@Base+0x1364>
   12b38:	cmp	r4, #9
   12b3c:	bne	12b64 <error@@Base+0x12e8>
   12b40:	cmp	r2, #13
   12b44:	bhi	12b64 <error@@Base+0x12e8>
   12b48:	mov	r0, #1
   12b4c:	mov	r1, #13312	; 0x3400
   12b50:	tst	r1, r0, lsl r2
   12b54:	beq	12b64 <error@@Base+0x12e8>
   12b58:	orr	r0, r9, #1
   12b5c:	cmp	r0, #9
   12b60:	beq	12be0 <error@@Base+0x1364>
   12b64:	orr	r0, lr, #1
   12b68:	cmp	r0, #9
   12b6c:	bne	12b90 <error@@Base+0x1314>
   12b70:	cmp	ip, #13
   12b74:	bhi	12b90 <error@@Base+0x1314>
   12b78:	mov	r0, #1
   12b7c:	mov	r1, #13312	; 0x3400
   12b80:	tst	r1, r0, lsl ip
   12b84:	beq	12b90 <error@@Base+0x1314>
   12b88:	cmp	r6, #9
   12b8c:	beq	12be0 <error@@Base+0x1364>
   12b90:	cmp	r2, #10
   12b94:	mov	r0, #8
   12b98:	cmpeq	ip, #8
   12b9c:	beq	12be4 <error@@Base+0x1368>
   12ba0:	cmp	r9, #8
   12ba4:	cmpeq	r2, #11
   12ba8:	beq	12bf4 <error@@Base+0x1378>
   12bac:	cmp	r2, #8
   12bb0:	cmpeq	lr, #8
   12bb4:	beq	12c00 <error@@Base+0x1384>
   12bb8:	sub	r0, r4, #9
   12bbc:	cmp	r2, #15
   12bc0:	clz	r0, r0
   12bc4:	lsr	r1, r0, #5
   12bc8:	bne	12c10 <error@@Base+0x1394>
   12bcc:	sub	r0, ip, #15
   12bd0:	clz	r0, r0
   12bd4:	lsr	r0, r0, #5
   12bd8:	orrs	r0, r0, r1
   12bdc:	beq	12c10 <error@@Base+0x1394>
   12be0:	mov	r0, ip
   12be4:	ldr	r1, [r5, #4]
   12be8:	cmp	r1, #0
   12bec:	bne	12798 <error@@Base+0xf1c>
   12bf0:	b	12d20 <error@@Base+0x14a4>
   12bf4:	cmp	ip, #8
   12bf8:	beq	12be4 <error@@Base+0x1368>
   12bfc:	b	12bac <error@@Base+0x1330>
   12c00:	mov	r0, #11
   12c04:	cmp	ip, #11
   12c08:	beq	12be4 <error@@Base+0x1368>
   12c0c:	b	12bb8 <error@@Base+0x133c>
   12c10:	cmp	ip, #15
   12c14:	mov	r0, #15
   12c18:	cmpeq	r6, #9
   12c1c:	beq	12be4 <error@@Base+0x1368>
   12c20:	cmp	lr, #15
   12c24:	cmpeq	r2, #15
   12c28:	beq	12ce0 <error@@Base+0x1464>
   12c2c:	cmp	ip, #15
   12c30:	bne	12c74 <error@@Base+0x13f8>
   12c34:	cmp	r9, #15
   12c38:	bne	12c84 <error@@Base+0x1408>
   12c3c:	orr	r7, r2, #2
   12c40:	sub	r3, r2, #10
   12c44:	sub	r7, r7, #14
   12c48:	clz	r3, r3
   12c4c:	clz	r7, r7
   12c50:	lsr	r3, r3, #5
   12c54:	lsr	r7, r7, #5
   12c58:	orrs	r3, r3, r7
   12c5c:	bne	12be4 <error@@Base+0x1368>
   12c60:	b	12c84 <error@@Base+0x1408>
   12c64:	ldr	ip, [r2, #8]
   12c68:	b	12884 <error@@Base+0x1008>
   12c6c:	ldr	r2, [r3, #8]
   12c70:	b	12990 <error@@Base+0x1114>
   12c74:	cmp	r2, #7
   12c78:	moveq	r0, #7
   12c7c:	cmpeq	ip, #7
   12c80:	beq	12be4 <error@@Base+0x1368>
   12c84:	cmp	r2, #16
   12c88:	bne	12cb4 <error@@Base+0x1438>
   12c8c:	orr	r0, ip, #8
   12c90:	sub	r0, r0, #15
   12c94:	clz	r0, r0
   12c98:	lsr	r0, r0, #5
   12c9c:	orr	r0, r0, r1
   12ca0:	sub	r1, ip, #16
   12ca4:	clz	r1, r1
   12ca8:	lsr	r1, r1, #5
   12cac:	orrs	r0, r1, r0
   12cb0:	bne	12be0 <error@@Base+0x1364>
   12cb4:	cmp	ip, #16
   12cb8:	bne	12d10 <error@@Base+0x1494>
   12cbc:	cmp	r2, #16
   12cc0:	bhi	12d20 <error@@Base+0x14a4>
   12cc4:	movw	r3, #33664	; 0x8380
   12cc8:	mov	r1, #1
   12ccc:	mov	r0, #16
   12cd0:	movt	r3, #1
   12cd4:	tst	r3, r1, lsl r2
   12cd8:	bne	12be4 <error@@Base+0x1368>
   12cdc:	b	12d20 <error@@Base+0x14a4>
   12ce0:	orr	r7, ip, #2
   12ce4:	sub	r3, ip, #10
   12ce8:	sub	r7, r7, #14
   12cec:	clz	r3, r3
   12cf0:	clz	r7, r7
   12cf4:	lsr	r3, r3, #5
   12cf8:	lsr	r7, r7, #5
   12cfc:	orrs	r3, r3, r7
   12d00:	bne	12be0 <error@@Base+0x1364>
   12d04:	b	12c2c <error@@Base+0x13b0>
   12d08:	ldr	r9, [r7, #8]
   12d0c:	b	12b00 <error@@Base+0x1284>
   12d10:	cmp	r2, #5
   12d14:	moveq	r0, #5
   12d18:	cmpeq	ip, #5
   12d1c:	beq	12be4 <error@@Base+0x1368>
   12d20:	cmp	r5, #0
   12d24:	add	r9, sp, #12
   12d28:	beq	12ed0 <error@@Base+0x1654>
   12d2c:	ldr	r1, [r5, #4]
   12d30:	cmp	r1, #0
   12d34:	beq	12dc8 <error@@Base+0x154c>
   12d38:	mov	r0, r1
   12d3c:	ldr	r1, [r1, #12]
   12d40:	mov	r4, r5
   12d44:	mov	r3, #0
   12d48:	movw	r2, #1092	; 0x444
   12d4c:	sub	r7, r2, r3
   12d50:	add	r7, r3, r7, lsr #1
   12d54:	add	r6, r7, r7, lsl #1
   12d58:	ldr	r5, [sl, r6, lsl #2]
   12d5c:	cmp	r5, r1
   12d60:	bls	12d74 <error@@Base+0x14f8>
   12d64:	sub	r2, r7, #1
   12d68:	cmp	r2, r3
   12d6c:	bcs	12d4c <error@@Base+0x14d0>
   12d70:	b	12db8 <error@@Base+0x153c>
   12d74:	add	r3, sl, r6, lsl #2
   12d78:	ldr	r6, [r3, #4]
   12d7c:	cmp	r6, r1
   12d80:	bcs	12d94 <error@@Base+0x1518>
   12d84:	add	r3, r7, #1
   12d88:	cmp	r2, r3
   12d8c:	bcs	12d4c <error@@Base+0x14d0>
   12d90:	b	12db8 <error@@Base+0x153c>
   12d94:	ldr	r1, [r3, #8]
   12d98:	orr	r1, r1, #2
   12d9c:	cmp	r1, #6
   12da0:	bne	12db8 <error@@Base+0x153c>
   12da4:	ldr	r1, [r0, #4]
   12da8:	mov	r5, r0
   12dac:	cmp	r1, #0
   12db0:	bne	12d38 <error@@Base+0x14bc>
   12db4:	b	12dcc <error@@Base+0x1550>
   12db8:	mov	r5, r4
   12dbc:	cmp	r4, #0
   12dc0:	bne	12dd0 <error@@Base+0x1554>
   12dc4:	b	12ed0 <error@@Base+0x1654>
   12dc8:	mov	r0, r5
   12dcc:	mov	r5, r0
   12dd0:	ldr	r0, [r8, #12]
   12dd4:	bl	10b74 <utf8proc_get_property@plt>
   12dd8:	ldrsh	r0, [r0]
   12ddc:	sub	r1, r0, #1
   12de0:	cmp	r1, #12
   12de4:	bcs	12ec0 <error@@Base+0x1644>
   12de8:	ldr	r4, [r5, #4]!
   12dec:	cmp	r4, r8
   12df0:	beq	12e60 <error@@Base+0x15e4>
   12df4:	mov	r6, #0
   12df8:	mov	r7, r8
   12dfc:	cmp	r7, #0
   12e00:	beq	12ed8 <error@@Base+0x165c>
   12e04:	ldr	r0, [r7, #12]
   12e08:	mov	r1, r9
   12e0c:	bl	10b8c <utf8proc_encode_char@plt>
   12e10:	cmp	r0, #0
   12e14:	beq	12ef8 <error@@Base+0x167c>
   12e18:	ldr	r7, [r7, #4]
   12e1c:	add	r6, r0, r6
   12e20:	cmp	r7, r4
   12e24:	bne	12dfc <error@@Base+0x1580>
   12e28:	add	r0, r6, #1
   12e2c:	bl	10bf8 <malloc@plt>
   12e30:	mov	r6, r0
   12e34:	mov	r9, #0
   12e38:	cmp	r8, #0
   12e3c:	beq	12f18 <error@@Base+0x169c>
   12e40:	ldr	r0, [r8, #12]
   12e44:	add	r1, r6, r9
   12e48:	bl	10b8c <utf8proc_encode_char@plt>
   12e4c:	ldr	r8, [r8, #4]
   12e50:	add	r9, r0, r9
   12e54:	cmp	r8, r4
   12e58:	bne	12e38 <error@@Base+0x15bc>
   12e5c:	b	12e70 <error@@Base+0x15f4>
   12e60:	mov	r0, #1
   12e64:	bl	10bf8 <malloc@plt>
   12e68:	mov	r6, r0
   12e6c:	mov	r9, #0
   12e70:	mov	r0, #0
   12e74:	mov	r1, #12
   12e78:	strb	r0, [r6, r9]
   12e7c:	mov	r0, #1
   12e80:	bl	113bc <__assert_fail@plt+0x6e0>
   12e84:	mov	r7, r0
   12e88:	mov	r0, r6
   12e8c:	bl	10c7c <utf8proc_NFC@plt>
   12e90:	str	r0, [r7, #8]
   12e94:	ldr	r0, [sp, #4]
   12e98:	mov	r1, r7
   12e9c:	bl	13668 <error@@Base+0x1dec>
   12ea0:	mov	r0, r6
   12ea4:	bl	10b68 <free@plt>
   12ea8:	add	r9, sp, #12
   12eac:	ldr	r8, [r5]
   12eb0:	cmp	r8, #0
   12eb4:	str	r8, [sp, #16]
   12eb8:	bne	1278c <error@@Base+0xf10>
   12ebc:	b	12ed0 <error@@Base+0x1654>
   12ec0:	cmp	r0, #29
   12ec4:	beq	12de8 <error@@Base+0x156c>
   12ec8:	add	r5, r5, #4
   12ecc:	b	12eac <error@@Base+0x1630>
   12ed0:	sub	sp, fp, #28
   12ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ed8:	ldr	r0, [pc, #92]	; 12f3c <error@@Base+0x16c0>
   12edc:	ldr	r1, [pc, #92]	; 12f40 <error@@Base+0x16c4>
   12ee0:	ldr	r3, [pc, #92]	; 12f44 <error@@Base+0x16c8>
   12ee4:	mov	r2, #249	; 0xf9
   12ee8:	add	r0, pc, r0
   12eec:	add	r1, pc, r1
   12ef0:	add	r3, pc, r3
   12ef4:	bl	10cdc <__assert_fail@plt>
   12ef8:	ldr	r0, [pc, #72]	; 12f48 <error@@Base+0x16cc>
   12efc:	ldr	r1, [pc, #72]	; 12f4c <error@@Base+0x16d0>
   12f00:	ldr	r3, [pc, #72]	; 12f50 <error@@Base+0x16d4>
   12f04:	mov	r2, #253	; 0xfd
   12f08:	add	r0, pc, r0
   12f0c:	add	r1, pc, r1
   12f10:	add	r3, pc, r3
   12f14:	bl	10cdc <__assert_fail@plt>
   12f18:	ldr	r0, [pc, #52]	; 12f54 <error@@Base+0x16d8>
   12f1c:	ldr	r1, [pc, #52]	; 12f58 <error@@Base+0x16dc>
   12f20:	ldr	r3, [pc, #52]	; 12f5c <error@@Base+0x16e0>
   12f24:	movw	r2, #269	; 0x10d
   12f28:	add	r0, pc, r0
   12f2c:	add	r1, pc, r1
   12f30:	add	r3, pc, r3
   12f34:	bl	10cdc <__assert_fail@plt>
   12f38:	andeq	r1, r0, r4, lsl #10
   12f3c:	andeq	r4, r0, r7, ror #1
   12f40:	ldrdeq	r4, [r0], -ip
   12f44:	andeq	r4, r0, pc, ror #1
   12f48:	strdeq	r4, [r0], -r1
   12f4c:	strheq	r4, [r0], -ip
   12f50:	andeq	r4, r0, pc, asr #1
   12f54:	andeq	r4, r0, r7, lsr #1
   12f58:	muleq	r0, ip, r0
   12f5c:	ldrdeq	r4, [r0], -ip
   12f60:	push	{r4, sl, fp, lr}
   12f64:	add	fp, sp, #8
   12f68:	mov	r4, r0
   12f6c:	ldr	r0, [r0, #8]
   12f70:	bl	10b68 <free@plt>
   12f74:	mov	r0, r4
   12f78:	pop	{r4, sl, fp, lr}
   12f7c:	b	10b68 <free@plt>
   12f80:	push	{r4, r5, r6, sl, fp, lr}
   12f84:	add	fp, sp, #16
   12f88:	mov	r5, r1
   12f8c:	mov	r6, r0
   12f90:	mov	r0, #1
   12f94:	mov	r1, #16
   12f98:	mov	r4, r2
   12f9c:	bl	113bc <__assert_fail@plt+0x6e0>
   12fa0:	strb	r5, [r0, #8]
   12fa4:	mov	r1, r0
   12fa8:	str	r4, [r0, #12]
   12fac:	mov	r0, r6
   12fb0:	pop	{r4, r5, r6, sl, fp, lr}
   12fb4:	b	13668 <error@@Base+0x1dec>
   12fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fbc:	add	fp, sp, #28
   12fc0:	sub	sp, sp, #124	; 0x7c
   12fc4:	mov	r4, r2
   12fc8:	mov	r2, r1
   12fcc:	cmp	r1, #0
   12fd0:	str	r0, [sp, #16]
   12fd4:	bne	12fe4 <error@@Base+0x1768>
   12fd8:	ldrb	r0, [r4]
   12fdc:	cmp	r0, #0
   12fe0:	bne	13310 <error@@Base+0x1a94>
   12fe4:	ldr	r0, [sp, #16]
   12fe8:	ldr	r0, [r0, #4]
   12fec:	str	r0, [sp, #4]
   12ff0:	mov	r0, r2
   12ff4:	ldr	r1, [pc, #808]	; 13324 <error@@Base+0x1aa8>
   12ff8:	add	r1, pc, r1
   12ffc:	bl	1145c <__assert_fail@plt+0x780>
   13000:	mov	r6, r0
   13004:	ldrb	r0, [r4]
   13008:	cmp	r0, #0
   1300c:	beq	13054 <error@@Base+0x17d8>
   13010:	add	r0, sp, #20
   13014:	mov	r1, #99	; 0x63
   13018:	mov	r2, r6
   1301c:	bl	10b80 <fgets@plt>
   13020:	cmp	r0, #0
   13024:	beq	13044 <error@@Base+0x17c8>
   13028:	ldr	r1, [pc, #760]	; 13328 <error@@Base+0x1aac>
   1302c:	add	r0, sp, #20
   13030:	mov	r2, #51	; 0x33
   13034:	add	r1, pc, r1
   13038:	bl	10cb8 <strncmp@plt>
   1303c:	cmp	r0, #0
   13040:	beq	132a0 <error@@Base+0x1a24>
   13044:	mov	r0, r6
   13048:	bl	10ba4 <rewind@plt>
   1304c:	mov	r5, #0
   13050:	strb	r5, [r4, #11]
   13054:	ldr	r9, [r4, #4]
   13058:	ldrb	r8, [r4, #1]
   1305c:	mov	r0, r6
   13060:	str	r4, [sp, #8]
   13064:	cmp	r9, #0
   13068:	movweq	r9, #94	; 0x5e
   1306c:	bl	10cd0 <getc@plt>
   13070:	cmn	r0, #1
   13074:	beq	13138 <error@@Base+0x18bc>
   13078:	add	r1, sp, #20
   1307c:	mov	sl, #0
   13080:	sub	r4, fp, #32
   13084:	add	r1, r1, #1
   13088:	str	r1, [sp, #12]
   1308c:	ldr	r1, [pc, #668]	; 13330 <error@@Base+0x1ab4>
   13090:	ldr	r1, [pc, r1]
   13094:	add	r1, r1, r0
   13098:	ldrsb	r5, [r1]
   1309c:	cmp	r5, #0
   130a0:	ble	132f0 <error@@Base+0x1a74>
   130a4:	cmp	r5, #1
   130a8:	strb	r0, [sp, #20]
   130ac:	beq	130d0 <error@@Base+0x1854>
   130b0:	ldr	r0, [sp, #12]
   130b4:	sub	r7, r5, #1
   130b8:	mov	r1, #1
   130bc:	mov	r3, r6
   130c0:	mov	r2, r7
   130c4:	bl	10be0 <fread@plt>
   130c8:	cmp	r0, r7
   130cc:	bne	13304 <error@@Base+0x1a88>
   130d0:	add	r0, sp, #20
   130d4:	mov	r1, #4
   130d8:	mov	r2, r4
   130dc:	bl	10bec <utf8proc_iterate@plt>
   130e0:	cmp	r0, r5
   130e4:	bne	132fc <error@@Base+0x1a80>
   130e8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   130ec:	cmp	r8, #0
   130f0:	beq	13100 <error@@Base+0x1884>
   130f4:	mov	r7, #1
   130f8:	cmp	r5, r9
   130fc:	beq	13124 <error@@Base+0x18a8>
   13100:	mov	r0, #1
   13104:	mov	r1, #16
   13108:	bl	113bc <__assert_fail@plt+0x6e0>
   1310c:	strb	sl, [r0, #8]
   13110:	mov	r1, r0
   13114:	str	r5, [r0, #12]
   13118:	ldr	r0, [sp, #16]
   1311c:	bl	13668 <error@@Base+0x1dec>
   13120:	mov	r7, #0
   13124:	mov	r0, r6
   13128:	bl	10cd0 <getc@plt>
   1312c:	cmn	r0, #1
   13130:	mov	sl, r7
   13134:	bne	1308c <error@@Base+0x1810>
   13138:	mov	r0, r6
   1313c:	bl	114e4 <__assert_fail@plt+0x808>
   13140:	ldr	r8, [sp, #8]
   13144:	ldr	r9, [sp, #4]
   13148:	ldrb	r0, [r8, #9]
   1314c:	cmp	r0, #0
   13150:	beq	1325c <error@@Base+0x19e0>
   13154:	ldr	r0, [sp, #16]
   13158:	cmp	r9, #0
   1315c:	addne	r0, r9, #4
   13160:	ldr	r6, [r0]
   13164:	cmp	r6, #0
   13168:	beq	1325c <error@@Base+0x19e0>
   1316c:	mov	r5, #32
   13170:	mov	r7, r6
   13174:	ldr	r4, [r7, #12]
   13178:	mov	r0, r4
   1317c:	bl	10b74 <utf8proc_get_property@plt>
   13180:	cmp	r4, #10
   13184:	ble	131a0 <error@@Base+0x1924>
   13188:	sub	r1, r4, #11
   1318c:	cmp	r1, #3
   13190:	bcc	131c4 <error@@Base+0x1948>
   13194:	cmp	r4, #160	; 0xa0
   13198:	beq	131c4 <error@@Base+0x1948>
   1319c:	b	131b0 <error@@Base+0x1934>
   131a0:	cmp	r4, #9
   131a4:	beq	131c4 <error@@Base+0x1948>
   131a8:	cmp	r4, #10
   131ac:	beq	131c8 <error@@Base+0x194c>
   131b0:	ldrsh	r0, [r0]
   131b4:	sub	r0, r0, #23
   131b8:	cmp	r0, #2
   131bc:	strls	r5, [r7, #12]
   131c0:	b	131c8 <error@@Base+0x194c>
   131c4:	str	r5, [r7, #12]
   131c8:	ldr	r7, [r7, #4]
   131cc:	cmp	r7, #0
   131d0:	bne	13174 <error@@Base+0x18f8>
   131d4:	mov	r4, #0
   131d8:	ldr	r1, [r6, #12]
   131dc:	ldr	r5, [r6, #4]
   131e0:	cmp	r1, #32
   131e4:	bne	13220 <error@@Base+0x19a4>
   131e8:	tst	r4, #255	; 0xff
   131ec:	beq	1323c <error@@Base+0x19c0>
   131f0:	cmp	r5, #0
   131f4:	ldrne	r1, [r5, #12]
   131f8:	cmpne	r1, #10
   131fc:	beq	1323c <error@@Base+0x19c0>
   13200:	mov	r0, #1
   13204:	cmp	r1, #32
   13208:	bne	13234 <error@@Base+0x19b8>
   1320c:	ldrb	r0, [r6, #8]
   13210:	ldrb	r1, [r5, #8]
   13214:	orr	r0, r1, r0
   13218:	strb	r0, [r5, #8]
   1321c:	b	1323c <error@@Base+0x19c0>
   13220:	subs	r0, r1, #10
   13224:	movwne	r0, #1
   13228:	tst	r4, #255	; 0xff
   1322c:	cmpeq	r1, #10
   13230:	beq	1323c <error@@Base+0x19c0>
   13234:	mov	r4, r0
   13238:	b	13250 <error@@Base+0x19d4>
   1323c:	ldr	r0, [sp, #16]
   13240:	mov	r1, r6
   13244:	bl	13760 <error@@Base+0x1ee4>
   13248:	mov	r0, r6
   1324c:	bl	10b68 <free@plt>
   13250:	cmp	r5, #0
   13254:	mov	r6, r5
   13258:	bne	131d8 <error@@Base+0x195c>
   1325c:	ldrb	r0, [r8, #10]
   13260:	cmp	r0, #0
   13264:	beq	13298 <error@@Base+0x1a1c>
   13268:	ldr	r0, [sp, #16]
   1326c:	cmp	r9, #0
   13270:	addne	r0, r9, #4
   13274:	ldr	r4, [r0]
   13278:	cmp	r4, #0
   1327c:	beq	13298 <error@@Base+0x1a1c>
   13280:	ldr	r0, [r4, #12]
   13284:	bl	10bbc <utf8proc_tolower@plt>
   13288:	str	r0, [r4, #12]
   1328c:	ldr	r4, [r4, #4]
   13290:	cmp	r4, #0
   13294:	bne	13280 <error@@Base+0x1a04>
   13298:	sub	sp, fp, #28
   1329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a0:	ldr	r8, [pc, #132]	; 1332c <error@@Base+0x1ab0>
   132a4:	mov	r7, #0
   132a8:	add	r9, sp, #20
   132ac:	mov	r5, #1
   132b0:	add	r8, pc, r8
   132b4:	mov	r0, r9
   132b8:	mov	r1, #99	; 0x63
   132bc:	mov	r2, r6
   132c0:	bl	10b80 <fgets@plt>
   132c4:	cmp	r0, #0
   132c8:	beq	13050 <error@@Base+0x17d4>
   132cc:	mov	r0, r9
   132d0:	mov	r1, r8
   132d4:	bl	10b38 <strcmp@plt>
   132d8:	cmp	r0, #0
   132dc:	addeq	r7, r7, #1
   132e0:	sxth	r7, r7
   132e4:	cmp	r7, #2
   132e8:	blt	132b4 <error@@Base+0x1a38>
   132ec:	b	13050 <error@@Base+0x17d4>
   132f0:	ldr	r0, [pc, #68]	; 1333c <error@@Base+0x1ac0>
   132f4:	add	r0, pc, r0
   132f8:	bl	1187c <error@@Base>
   132fc:	bl	10ca0 <utf8proc_errmsg@plt>
   13300:	bl	1187c <error@@Base>
   13304:	ldr	r0, [pc, #52]	; 13340 <error@@Base+0x1ac4>
   13308:	add	r0, pc, r0
   1330c:	bl	1187c <error@@Base>
   13310:	ldr	r0, [pc, #28]	; 13334 <error@@Base+0x1ab8>
   13314:	ldr	r1, [pc, #28]	; 13338 <error@@Base+0x1abc>
   13318:	add	r0, pc, r0
   1331c:	add	r1, pc, r1
   13320:	bl	118cc <error@@Base+0x50>
   13324:	strdeq	r4, [r0], -r6
   13328:	andeq	r4, r0, r4, lsr r0
   1332c:	strdeq	r3, [r0], -r0
   13330:	andeq	r5, r1, r4, lsr r0
   13334:	andeq	r3, r0, ip, lsl #26
   13338:	andeq	r3, r0, r8, lsl sp
   1333c:	andeq	r3, r0, r4, ror #27
   13340:	andeq	r3, r0, r8, ror #27
   13344:	push	{fp, lr}
   13348:	mov	fp, sp
   1334c:	bl	10b8c <utf8proc_encode_char@plt>
   13350:	cmp	r0, #0
   13354:	sxtbgt	r0, r0
   13358:	popgt	{fp, pc}
   1335c:	ldr	r0, [pc, #4]	; 13368 <error@@Base+0x1aec>
   13360:	add	r0, pc, r0
   13364:	bl	1187c <error@@Base>
   13368:	ldrdeq	r3, [r0], -lr
   1336c:	push	{r4, r5, r6, r7, fp, lr}
   13370:	add	fp, sp, #16
   13374:	mov	r6, r3
   13378:	mov	r4, r2
   1337c:	mov	r5, r1
   13380:	tst	r0, #255	; 0xff
   13384:	beq	133cc <error@@Base+0x1b50>
   13388:	mov	r0, #94	; 0x5e
   1338c:	mov	r1, r4
   13390:	bl	10b8c <utf8proc_encode_char@plt>
   13394:	cmp	r0, #0
   13398:	ble	13444 <error@@Base+0x1bc8>
   1339c:	sxtb	r7, r0
   133a0:	cmp	r5, #10
   133a4:	bne	133d8 <error@@Base+0x1b5c>
   133a8:	ldr	r0, [pc, #224]	; 13490 <error@@Base+0x1c14>
   133ac:	ldr	r1, [pc, #224]	; 13494 <error@@Base+0x1c18>
   133b0:	tst	r6, #255	; 0xff
   133b4:	add	r0, pc, r0
   133b8:	add	r1, pc, r1
   133bc:	moveq	r1, r0
   133c0:	add	r0, r4, r7
   133c4:	pop	{r4, r5, r6, r7, fp, lr}
   133c8:	b	10c94 <sprintf@plt>
   133cc:	mov	r7, #0
   133d0:	cmp	r5, #10
   133d4:	beq	133a8 <error@@Base+0x1b2c>
   133d8:	mov	r0, r5
   133dc:	bl	10b74 <utf8proc_get_property@plt>
   133e0:	cmp	r5, #32
   133e4:	beq	133f8 <error@@Base+0x1b7c>
   133e8:	ldrsh	r0, [r0]
   133ec:	sub	r1, r0, #1
   133f0:	cmp	r1, #22
   133f4:	bcs	13450 <error@@Base+0x1bd4>
   133f8:	mov	r0, r5
   133fc:	bl	10c40 <utf8proc_category@plt>
   13400:	sub	r0, r0, #6
   13404:	cmp	r0, #2
   13408:	bhi	13424 <error@@Base+0x1ba8>
   1340c:	add	r1, r4, r7
   13410:	movw	r0, #9676	; 0x25cc
   13414:	bl	10b8c <utf8proc_encode_char@plt>
   13418:	cmp	r0, #0
   1341c:	ble	13444 <error@@Base+0x1bc8>
   13420:	sxtab	r7, r7, r0
   13424:	add	r1, r4, r7
   13428:	mov	r0, r5
   1342c:	bl	10b8c <utf8proc_encode_char@plt>
   13430:	cmp	r0, #0
   13434:	sxtabgt	r0, r7, r0
   13438:	movgt	r1, #0
   1343c:	strbgt	r1, [r4, r0]
   13440:	popgt	{r4, r5, r6, r7, fp, pc}
   13444:	ldr	r0, [pc, #64]	; 1348c <error@@Base+0x1c10>
   13448:	add	r0, pc, r0
   1344c:	bl	1187c <error@@Base>
   13450:	cmp	r0, #29
   13454:	beq	133f8 <error@@Base+0x1b7c>
   13458:	add	r0, r4, r7
   1345c:	cmp	r5, #255	; 0xff
   13460:	bhi	13470 <error@@Base+0x1bf4>
   13464:	ldr	r1, [pc, #24]	; 13484 <error@@Base+0x1c08>
   13468:	add	r1, pc, r1
   1346c:	b	13478 <error@@Base+0x1bfc>
   13470:	ldr	r1, [pc, #16]	; 13488 <error@@Base+0x1c0c>
   13474:	add	r1, pc, r1
   13478:	mov	r2, r5
   1347c:	pop	{r4, r5, r6, r7, fp, lr}
   13480:	b	10c94 <sprintf@plt>
   13484:	strdeq	r3, [r0], -r2
   13488:	andeq	r3, r0, sp, ror #23
   1348c:	strdeq	r3, [r0], -r6
   13490:	andeq	r0, r0, fp, ror #14
   13494:	muleq	r0, sp, ip
   13498:	push	{r4, r5, r6, r7, fp, lr}
   1349c:	add	fp, sp, #16
   134a0:	sub	sp, sp, #16
   134a4:	mov	r6, r2
   134a8:	mov	r2, r1
   134ac:	ldr	r1, [pc, #180]	; 13568 <error@@Base+0x1cec>
   134b0:	mov	r5, r0
   134b4:	mov	r0, r2
   134b8:	add	r1, pc, r1
   134bc:	bl	1145c <__assert_fail@plt+0x780>
   134c0:	mov	r4, r0
   134c4:	cmp	r6, #0
   134c8:	beq	1351c <error@@Base+0x1ca0>
   134cc:	ldr	r0, [pc, #152]	; 1356c <error@@Base+0x1cf0>
   134d0:	mov	r1, #55	; 0x37
   134d4:	mov	r2, #1
   134d8:	mov	r3, r4
   134dc:	add	r0, pc, r0
   134e0:	bl	10bd4 <fwrite@plt>
   134e4:	ldr	r7, [pc, #132]	; 13570 <error@@Base+0x1cf4>
   134e8:	mov	r1, #55	; 0x37
   134ec:	mov	r2, #1
   134f0:	mov	r3, r4
   134f4:	add	r7, pc, r7
   134f8:	mov	r0, r7
   134fc:	bl	10bd4 <fwrite@plt>
   13500:	mov	r0, r4
   13504:	blx	r6
   13508:	mov	r0, r7
   1350c:	mov	r1, #55	; 0x37
   13510:	mov	r2, #1
   13514:	mov	r3, r4
   13518:	bl	10bd4 <fwrite@plt>
   1351c:	ldr	r6, [r5]
   13520:	cmp	r6, #0
   13524:	beq	13558 <error@@Base+0x1cdc>
   13528:	add	r5, sp, #7
   1352c:	ldr	r1, [r6, #12]
   13530:	ldrb	r0, [r6, #8]
   13534:	mov	r2, r5
   13538:	mov	r3, #0
   1353c:	bl	1336c <error@@Base+0x1af0>
   13540:	mov	r0, r5
   13544:	mov	r1, r4
   13548:	bl	10cac <fputs@plt>
   1354c:	ldr	r6, [r6, #4]
   13550:	cmp	r6, #0
   13554:	bne	1352c <error@@Base+0x1cb0>
   13558:	mov	r0, r4
   1355c:	bl	114e4 <__assert_fail@plt+0x808>
   13560:	sub	sp, fp, #16
   13564:	pop	{r4, r5, r6, r7, fp, pc}
   13568:	andeq	r0, r0, r3, lsl #14
   1356c:	andeq	r3, r0, ip, lsl #23
   13570:	andeq	r3, r0, ip, lsr #23
   13574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13578:	add	fp, sp, #28
   1357c:	sub	sp, sp, #4
   13580:	mov	r9, #0
   13584:	mov	sl, r0
   13588:	str	r9, [sp]
   1358c:	ldrb	r0, [r1]
   13590:	cmp	r0, #0
   13594:	beq	135f4 <error@@Base+0x1d78>
   13598:	mov	r4, r1
   1359c:	mov	r8, sp
   135a0:	mov	r7, #1
   135a4:	mov	r0, r4
   135a8:	mvn	r1, #0
   135ac:	mov	r2, r8
   135b0:	bl	10bec <utf8proc_iterate@plt>
   135b4:	cmp	r0, #1
   135b8:	blt	135fc <error@@Base+0x1d80>
   135bc:	ldr	r5, [sp]
   135c0:	mov	r6, r0
   135c4:	mov	r0, #1
   135c8:	mov	r1, #16
   135cc:	bl	113bc <__assert_fail@plt+0x6e0>
   135d0:	strb	r9, [r0, #8]
   135d4:	mov	r1, r0
   135d8:	str	r5, [r0, #12]
   135dc:	mov	r0, sl
   135e0:	bl	13668 <error@@Base+0x1dec>
   135e4:	ldrb	r0, [r4, r6]!
   135e8:	cmp	r0, #0
   135ec:	bne	135a4 <error@@Base+0x1d28>
   135f0:	b	13600 <error@@Base+0x1d84>
   135f4:	mov	r7, #1
   135f8:	b	13600 <error@@Base+0x1d84>
   135fc:	mov	r7, #0
   13600:	mov	r0, r7
   13604:	sub	sp, fp, #28
   13608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1360c:	vmov.i32	q8, #0	; 0x00000000
   13610:	vst1.32	{d16-d17}, [r0]
   13614:	bx	lr
   13618:	push	{r4, r5, fp, lr}
   1361c:	add	fp, sp, #8
   13620:	mov	r4, r0
   13624:	ldr	r0, [r0]
   13628:	mov	r5, #0
   1362c:	str	r5, [r1]
   13630:	cmp	r0, #0
   13634:	str	r0, [r1, #4]
   13638:	str	r1, [r4]
   1363c:	addeq	r0, r4, #4
   13640:	str	r1, [r0]
   13644:	ldr	r0, [r4, #8]
   13648:	cmp	r0, #0
   1364c:	beq	13658 <error@@Base+0x1ddc>
   13650:	bl	10b68 <free@plt>
   13654:	str	r5, [r4, #8]
   13658:	ldr	r0, [r4, #12]
   1365c:	add	r0, r0, #1
   13660:	str	r0, [r4, #12]
   13664:	pop	{r4, r5, fp, pc}
   13668:	push	{r4, r5, fp, lr}
   1366c:	add	fp, sp, #8
   13670:	mov	r4, r0
   13674:	ldr	r0, [r0, #4]
   13678:	mov	r5, #0
   1367c:	mov	r2, r4
   13680:	cmp	r0, #0
   13684:	stm	r1, {r0, r5}
   13688:	addne	r2, r0, #4
   1368c:	str	r1, [r2]
   13690:	str	r1, [r4, #4]
   13694:	ldr	r0, [r4, #8]
   13698:	cmp	r0, #0
   1369c:	beq	136a8 <error@@Base+0x1e2c>
   136a0:	bl	10b68 <free@plt>
   136a4:	str	r5, [r4, #8]
   136a8:	ldr	r0, [r4, #12]
   136ac:	add	r0, r0, #1
   136b0:	str	r0, [r4, #12]
   136b4:	pop	{r4, r5, fp, pc}
   136b8:	push	{r4, sl, fp, lr}
   136bc:	add	fp, sp, #8
   136c0:	mov	r4, r0
   136c4:	ldr	r0, [r2]
   136c8:	mov	r3, r4
   136cc:	cmp	r0, #0
   136d0:	stm	r1, {r0, r2}
   136d4:	addne	r3, r0, #4
   136d8:	str	r1, [r3]
   136dc:	str	r1, [r2]
   136e0:	ldr	r0, [r4, #8]
   136e4:	cmp	r0, #0
   136e8:	beq	136f8 <error@@Base+0x1e7c>
   136ec:	bl	10b68 <free@plt>
   136f0:	mov	r0, #0
   136f4:	str	r0, [r4, #8]
   136f8:	ldr	r0, [r4, #12]
   136fc:	add	r0, r0, #1
   13700:	str	r0, [r4, #12]
   13704:	pop	{r4, sl, fp, pc}
   13708:	push	{r4, sl, fp, lr}
   1370c:	add	fp, sp, #8
   13710:	mov	r4, r0
   13714:	mov	r0, r1
   13718:	cmp	r1, #0
   1371c:	ldr	r3, [r0, #4]!
   13720:	moveq	r0, r4
   13724:	cmp	r3, #0
   13728:	stm	r2, {r1, r3}
   1372c:	addeq	r3, r4, #4
   13730:	str	r2, [r0]
   13734:	str	r2, [r3]
   13738:	ldr	r0, [r4, #8]
   1373c:	cmp	r0, #0
   13740:	beq	13750 <error@@Base+0x1ed4>
   13744:	bl	10b68 <free@plt>
   13748:	mov	r0, #0
   1374c:	str	r0, [r4, #8]
   13750:	ldr	r0, [r4, #12]
   13754:	add	r0, r0, #1
   13758:	str	r0, [r4, #12]
   1375c:	pop	{r4, sl, fp, pc}
   13760:	push	{r4, r5, fp, lr}
   13764:	add	fp, sp, #8
   13768:	mov	r4, r0
   1376c:	ldm	r1, {r0, r2}
   13770:	mov	r5, #0
   13774:	cmp	r0, #0
   13778:	streq	r2, [r4]
   1377c:	strne	r2, [r0, #4]
   13780:	ldrne	r2, [r1, #4]
   13784:	cmp	r2, #0
   13788:	addeq	r2, r4, #4
   1378c:	str	r0, [r2]
   13790:	str	r5, [r1]
   13794:	str	r5, [r1, #4]
   13798:	ldr	r0, [r4, #8]
   1379c:	cmp	r0, #0
   137a0:	beq	137ac <error@@Base+0x1f30>
   137a4:	bl	10b68 <free@plt>
   137a8:	str	r5, [r4, #8]
   137ac:	ldr	r0, [r4, #12]
   137b0:	sub	r0, r0, #1
   137b4:	str	r0, [r4, #12]
   137b8:	pop	{r4, r5, fp, pc}
   137bc:	push	{r4, sl, fp, lr}
   137c0:	add	fp, sp, #8
   137c4:	mov	r4, r0
   137c8:	ldr	r0, [r0, #8]
   137cc:	cmp	r0, #0
   137d0:	beq	137d8 <error@@Base+0x1f5c>
   137d4:	pop	{r4, sl, fp, pc}
   137d8:	ldr	r0, [r4, #12]
   137dc:	cmp	r0, #0
   137e0:	beq	137d4 <error@@Base+0x1f58>
   137e4:	mov	r1, #4
   137e8:	bl	113bc <__assert_fail@plt+0x6e0>
   137ec:	str	r0, [r4, #8]
   137f0:	ldr	r1, [r4]
   137f4:	cmp	r1, #0
   137f8:	beq	137d4 <error@@Base+0x1f58>
   137fc:	str	r1, [r0]
   13800:	ldr	r0, [r1, #4]
   13804:	cmp	r0, #0
   13808:	popeq	{r4, sl, fp, pc}
   1380c:	mov	r1, #4
   13810:	ldr	r2, [r4, #8]
   13814:	str	r0, [r2, r1]
   13818:	add	r1, r1, #4
   1381c:	ldr	r0, [r0, #4]
   13820:	cmp	r0, #0
   13824:	bne	13810 <error@@Base+0x1f94>
   13828:	b	137d4 <error@@Base+0x1f58>
   1382c:	push	{r4, r5, r6, r7, fp, lr}
   13830:	add	fp, sp, #16
   13834:	ldr	r6, [r0]
   13838:	cmp	r6, #0
   1383c:	popeq	{r4, r5, r6, r7, fp, pc}
   13840:	mov	r4, r1
   13844:	mov	r5, r0
   13848:	mov	r7, #0
   1384c:	ldm	r6, {r0, r1}
   13850:	cmp	r0, #0
   13854:	streq	r1, [r5]
   13858:	strne	r1, [r0, #4]
   1385c:	ldrne	r1, [r6, #4]
   13860:	cmp	r1, #0
   13864:	addeq	r1, r5, #4
   13868:	str	r0, [r1]
   1386c:	str	r7, [r6]
   13870:	str	r7, [r6, #4]
   13874:	ldr	r0, [r5, #8]
   13878:	cmp	r0, #0
   1387c:	beq	13888 <error@@Base+0x200c>
   13880:	bl	10b68 <free@plt>
   13884:	str	r7, [r5, #8]
   13888:	ldr	r0, [r5, #12]
   1388c:	sub	r0, r0, #1
   13890:	str	r0, [r5, #12]
   13894:	mov	r0, r6
   13898:	blx	r4
   1389c:	ldr	r6, [r5]
   138a0:	cmp	r6, #0
   138a4:	bne	1384c <error@@Base+0x1fd0>
   138a8:	pop	{r4, r5, r6, r7, fp, pc}
   138ac:	cmp	r0, #2
   138b0:	bxlt	lr
   138b4:	ldr	r3, [pc, #28]	; 138d8 <error@@Base+0x205c>
   138b8:	add	r3, pc, r3
   138bc:	str	r2, [r3]
   138c0:	ldr	r2, [pc, #20]	; 138dc <error@@Base+0x2060>
   138c4:	add	r2, pc, r2
   138c8:	str	r1, [r2]
   138cc:	sub	r1, r0, #1
   138d0:	mov	r0, #0
   138d4:	b	138e0 <error@@Base+0x2064>
   138d8:			; <UNDEFINED> instruction: 0x000148b0
   138dc:	andeq	r4, r1, r0, lsr #17
   138e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138e4:	add	fp, sp, #24
   138e8:	mov	r8, r1
   138ec:	mov	r5, r0
   138f0:	b	13914 <error@@Base+0x2098>
   138f4:	sub	r1, r4, #1
   138f8:	str	r6, [r0, r4, lsl #2]
   138fc:	cmp	r1, r5
   13900:	movgt	r0, r5
   13904:	blgt	138e0 <error@@Base+0x2064>
   13908:	add	r5, r7, #1
   1390c:	cmp	r5, r8
   13910:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   13914:	ldr	r0, [pc, #220]	; 139f8 <error@@Base+0x217c>
   13918:	cmp	r5, r8
   1391c:	mov	r4, r8
   13920:	mov	r7, r5
   13924:	ldr	r0, [pc, r0]
   13928:	ldr	r6, [r0, r5, lsl #2]
   1392c:	bge	138f4 <error@@Base+0x2078>
   13930:	mov	r7, r5
   13934:	mov	r4, r8
   13938:	cmp	r7, r4
   1393c:	blt	13950 <error@@Base+0x20d4>
   13940:	b	13974 <error@@Base+0x20f8>
   13944:	sub	r4, r4, #1
   13948:	cmp	r7, r4
   1394c:	bge	13974 <error@@Base+0x20f8>
   13950:	ldr	r0, [pc, #164]	; 139fc <error@@Base+0x2180>
   13954:	ldr	r0, [pc, r0]
   13958:	ldr	r1, [r0, r4, lsl #2]
   1395c:	ldr	r2, [pc, #156]	; 13a00 <error@@Base+0x2184>
   13960:	mov	r0, r6
   13964:	ldr	r2, [pc, r2]
   13968:	blx	r2
   1396c:	cmn	r0, #1
   13970:	ble	13944 <error@@Base+0x20c8>
   13974:	cmp	r7, r4
   13978:	beq	13990 <error@@Base+0x2114>
   1397c:	ldr	r0, [pc, #128]	; 13a04 <error@@Base+0x2188>
   13980:	ldr	r0, [pc, r0]
   13984:	ldr	r1, [r0, r4, lsl #2]
   13988:	str	r1, [r0, r7, lsl #2]
   1398c:	add	r7, r7, #1
   13990:	cmp	r7, r4
   13994:	bge	139bc <error@@Base+0x2140>
   13998:	ldr	r0, [pc, #104]	; 13a08 <error@@Base+0x218c>
   1399c:	ldr	r0, [pc, r0]
   139a0:	ldr	r1, [r0, r7, lsl #2]
   139a4:	ldr	r2, [pc, #96]	; 13a0c <error@@Base+0x2190>
   139a8:	mov	r0, r6
   139ac:	ldr	r2, [pc, r2]
   139b0:	blx	r2
   139b4:	cmp	r0, #1
   139b8:	bge	1398c <error@@Base+0x2110>
   139bc:	cmp	r7, r4
   139c0:	bne	139d0 <error@@Base+0x2154>
   139c4:	cmp	r7, r4
   139c8:	blt	13948 <error@@Base+0x20cc>
   139cc:	b	139ec <error@@Base+0x2170>
   139d0:	ldr	r0, [pc, #56]	; 13a10 <error@@Base+0x2194>
   139d4:	ldr	r0, [pc, r0]
   139d8:	ldr	r1, [r0, r7, lsl #2]
   139dc:	str	r1, [r0, r4, lsl #2]
   139e0:	sub	r4, r4, #1
   139e4:	cmp	r7, r4
   139e8:	blt	13948 <error@@Base+0x20cc>
   139ec:	ldr	r0, [pc, #32]	; 13a14 <error@@Base+0x2198>
   139f0:	ldr	r0, [pc, r0]
   139f4:	b	138f4 <error@@Base+0x2078>
   139f8:	andeq	r4, r1, r0, asr #16
   139fc:	andeq	r4, r1, r0, lsl r8
   13a00:	andeq	r4, r1, r4, lsl #16
   13a04:	andeq	r4, r1, r4, ror #15
   13a08:	andeq	r4, r1, r8, asr #15
   13a0c:			; <UNDEFINED> instruction: 0x000147bc
   13a10:	muleq	r1, r0, r7
   13a14:	andeq	r4, r1, r4, ror r7
   13a18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a1c:	mov	r7, r0
   13a20:	ldr	r6, [pc, #72]	; 13a70 <error@@Base+0x21f4>
   13a24:	ldr	r5, [pc, #72]	; 13a74 <error@@Base+0x21f8>
   13a28:	add	r6, pc, r6
   13a2c:	add	r5, pc, r5
   13a30:	sub	r6, r6, r5
   13a34:	mov	r8, r1
   13a38:	mov	r9, r2
   13a3c:	bl	10b0c <calloc@plt-0x20>
   13a40:	asrs	r6, r6, #2
   13a44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a48:	mov	r4, #0
   13a4c:	add	r4, r4, #1
   13a50:	ldr	r3, [r5], #4
   13a54:	mov	r2, r9
   13a58:	mov	r1, r8
   13a5c:	mov	r0, r7
   13a60:	blx	r3
   13a64:	cmp	r6, r4
   13a68:	bne	13a4c <error@@Base+0x21d0>
   13a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a70:	andeq	r4, r1, ip, asr #9
   13a74:	andeq	r4, r1, r4, asr #9
   13a78:	bx	lr

Disassembly of section .fini:

00013a7c <.fini>:
   13a7c:	push	{r3, lr}
   13a80:	pop	{r3, pc}
