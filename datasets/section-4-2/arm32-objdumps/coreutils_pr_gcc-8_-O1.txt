
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	1142c <__assert_fail@plt+0x48>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	sp, r1, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <gmtime_r@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #118784	; 0x1d000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #118784	; 0x1d000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <strtol@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #118784	; 0x1d000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <posix_fadvise64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #118784	; 0x1d000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #118784	; 0x1d000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #118784	; 0x1d000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #118784	; 0x1d000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #118784	; 0x1d000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #118784	; 0x1d000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #118784	; 0x1d000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #118784	; 0x1d000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #118784	; 0x1d000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #118784	; 0x1d000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #118784	; 0x1d000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #118784	; 0x1d000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #118784	; 0x1d000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #118784	; 0x1d000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #118784	; 0x1d000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #118784	; 0x1d000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__ctype_tolower_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <__ctype_toupper_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <ungetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <__uflow@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3488]!	; 0xda0

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3480]!	; 0xd98

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3472]!	; 0xd90

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3464]!	; 0xd88

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3456]!	; 0xd80

00011390 <__strtoll_internal@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3448]!	; 0xd78

0001139c <fopen64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3440]!	; 0xd70

000113a8 <bindtextdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3432]!	; 0xd68

000113b4 <unsetenv@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3424]!	; 0xd60

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3416]!	; 0xd58

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3408]!	; 0xd50

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3400]!	; 0xd48

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x3c>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x40>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x44>
   11418:	bl	11228 <__libc_start_main@plt>
   1141c:	bl	113cc <abort@plt>
   11420:	andeq	ip, r1, r8, ror r9
   11424:	andeq	r4, r1, r8, ror #15
   11428:	andeq	ip, r1, r8, lsl r9
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x64>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x68>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	11264 <__gmon_start__@plt>
   11448:	andeq	sp, r1, r4, asr #23
   1144c:	andeq	r0, r0, r0, lsr r1
   11450:	ldr	r0, [pc, #24]	; 11470 <__assert_fail@plt+0x8c>
   11454:	ldr	r3, [pc, #24]	; 11474 <__assert_fail@plt+0x90>
   11458:	cmp	r3, r0
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x94>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	pc, r2, r8, asr #3
   11474:	andeq	pc, r2, r8, asr #3
   11478:	andeq	r0, r0, r0
   1147c:	ldr	r0, [pc, #36]	; 114a8 <__assert_fail@plt+0xc4>
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xc8>
   11484:	sub	r1, r1, r0
   11488:	asr	r1, r1, #2
   1148c:	add	r1, r1, r1, lsr #31
   11490:	asrs	r1, r1, #1
   11494:	bxeq	lr
   11498:	ldr	r3, [pc, #16]	; 114b0 <__assert_fail@plt+0xcc>
   1149c:	cmp	r3, #0
   114a0:	bxeq	lr
   114a4:	bx	r3
   114a8:	andeq	pc, r2, r8, asr #3
   114ac:	andeq	pc, r2, r8, asr #3
   114b0:	andeq	r0, r0, r0
   114b4:	push	{r4, lr}
   114b8:	ldr	r4, [pc, #24]	; 114d8 <__assert_fail@plt+0xf4>
   114bc:	ldrb	r3, [r4]
   114c0:	cmp	r3, #0
   114c4:	popne	{r4, pc}
   114c8:	bl	11450 <__assert_fail@plt+0x6c>
   114cc:	mov	r3, #1
   114d0:	strb	r3, [r4]
   114d4:	pop	{r4, pc}
   114d8:	andeq	pc, r2, ip, ror #3
   114dc:	b	1147c <__assert_fail@plt+0x98>
   114e0:	movw	r3, #61936	; 0xf1f0
   114e4:	movt	r3, #2
   114e8:	ldr	r3, [r3]
   114ec:	movw	r2, #61760	; 0xf140
   114f0:	movt	r2, #2
   114f4:	ldr	ip, [r2]
   114f8:	cmp	ip, #0
   114fc:	beq	11560 <__assert_fail@plt+0x17c>
   11500:	push	{lr}		; (str lr, [sp, #-4]!)
   11504:	movw	r2, #61760	; 0xf140
   11508:	movt	r2, #2
   1150c:	ldrb	lr, [r2, #4]
   11510:	mov	r0, #0
   11514:	mov	r2, r0
   11518:	b	11530 <__assert_fail@plt+0x14c>
   1151c:	add	r0, r0, #1
   11520:	add	r3, r3, #40	; 0x28
   11524:	add	r2, r2, #1
   11528:	cmp	r2, ip
   1152c:	beq	11568 <__assert_fail@plt+0x184>
   11530:	ldr	r1, [r3, #8]
   11534:	cmp	r1, #1
   11538:	bls	1151c <__assert_fail@plt+0x138>
   1153c:	cmp	lr, #0
   11540:	beq	11520 <__assert_fail@plt+0x13c>
   11544:	ldr	r1, [r3, #24]
   11548:	cmp	r1, #0
   1154c:	ble	11520 <__assert_fail@plt+0x13c>
   11550:	ldr	r1, [r3, #28]
   11554:	cmp	r1, #0
   11558:	bgt	1151c <__assert_fail@plt+0x138>
   1155c:	b	11520 <__assert_fail@plt+0x13c>
   11560:	mov	r0, ip
   11564:	bx	lr
   11568:	pop	{pc}		; (ldr pc, [sp], #4)
   1156c:	movw	r3, #61936	; 0xf1f0
   11570:	movt	r3, #2
   11574:	ldrb	r3, [r3, #4]
   11578:	cmp	r3, #0
   1157c:	movne	r3, #2
   11580:	strne	r3, [r0, #8]
   11584:	bne	115d0 <__assert_fail@plt+0x1ec>
   11588:	movw	r3, #61936	; 0xf1f0
   1158c:	movt	r3, #2
   11590:	ldr	r2, [r3]
   11594:	movw	r3, #61760	; 0xf140
   11598:	movt	r3, #2
   1159c:	ldr	r3, [r3]
   115a0:	cmp	r3, #0
   115a4:	beq	115d0 <__assert_fail@plt+0x1ec>
   115a8:	movw	r1, #61760	; 0xf140
   115ac:	movt	r1, #2
   115b0:	ldrb	r1, [r1, #4]
   115b4:	cmp	r1, #0
   115b8:	movne	r1, #1
   115bc:	moveq	r1, #2
   115c0:	str	r1, [r2, #8]
   115c4:	add	r2, r2, #40	; 0x28
   115c8:	subs	r3, r3, #1
   115cc:	bne	115c0 <__assert_fail@plt+0x1dc>
   115d0:	mov	r3, #0
   115d4:	str	r3, [r0, #28]
   115d8:	movw	r3, #61936	; 0xf1f0
   115dc:	movt	r3, #2
   115e0:	ldr	r2, [r3, #8]
   115e4:	sub	r2, r2, #1
   115e8:	str	r2, [r3, #8]
   115ec:	bx	lr
   115f0:	strd	r4, [sp, #-12]!
   115f4:	str	lr, [sp, #8]
   115f8:	movw	r3, #61760	; 0xf140
   115fc:	movt	r3, #2
   11600:	ldr	r2, [r3]
   11604:	movw	r3, #61936	; 0xf1f0
   11608:	movt	r3, #2
   1160c:	ldr	r5, [r3]
   11610:	cmp	r2, #0
   11614:	beq	11674 <__assert_fail@plt+0x290>
   11618:	movw	r3, #61936	; 0xf1f0
   1161c:	movt	r3, #2
   11620:	ldr	r0, [r3, #8]
   11624:	mov	r3, r5
   11628:	mov	ip, #0
   1162c:	mov	r4, ip
   11630:	mov	lr, #1
   11634:	b	11644 <__assert_fail@plt+0x260>
   11638:	add	r3, r3, #40	; 0x28
   1163c:	subs	r2, r2, #1
   11640:	beq	11660 <__assert_fail@plt+0x27c>
   11644:	ldr	r1, [r3, #8]
   11648:	cmp	r1, #2
   1164c:	bne	11638 <__assert_fail@plt+0x254>
   11650:	str	r4, [r3, #8]
   11654:	add	r0, r0, #1
   11658:	mov	ip, lr
   1165c:	b	11638 <__assert_fail@plt+0x254>
   11660:	cmp	ip, #0
   11664:	beq	11674 <__assert_fail@plt+0x290>
   11668:	movw	r3, #61936	; 0xf1f0
   1166c:	movt	r3, #2
   11670:	str	r0, [r3, #8]
   11674:	movw	r3, #61760	; 0xf140
   11678:	movt	r3, #2
   1167c:	ldrb	r3, [r3, #4]
   11680:	cmp	r3, #0
   11684:	beq	116a4 <__assert_fail@plt+0x2c0>
   11688:	ldr	r3, [r5, #8]
   1168c:	cmp	r3, #3
   11690:	movw	r3, #61936	; 0xf1f0
   11694:	movt	r3, #2
   11698:	moveq	r2, #0
   1169c:	movne	r2, #1
   116a0:	str	r2, [r3, #8]
   116a4:	ldrd	r4, [sp]
   116a8:	add	sp, sp, #8
   116ac:	pop	{pc}		; (ldr pc, [sp], #4)
   116b0:	strd	r4, [sp, #-16]!
   116b4:	str	r6, [sp, #8]
   116b8:	str	lr, [sp, #12]
   116bc:	mov	r4, r0
   116c0:	movw	r3, #61936	; 0xf1f0
   116c4:	movt	r3, #2
   116c8:	ldr	r2, [r3, #12]
   116cc:	ldr	r3, [r3, #16]
   116d0:	cmp	r2, r3
   116d4:	bcs	11704 <__assert_fail@plt+0x320>
   116d8:	movw	r3, #61936	; 0xf1f0
   116dc:	movt	r3, #2
   116e0:	ldr	r1, [r3, #20]
   116e4:	ldr	r2, [r3, #12]
   116e8:	add	r0, r2, #1
   116ec:	str	r0, [r3, #12]
   116f0:	strb	r4, [r1, r2]
   116f4:	ldrd	r4, [sp]
   116f8:	ldr	r6, [sp, #8]
   116fc:	add	sp, sp, #12
   11700:	pop	{pc}		; (ldr pc, [sp], #4)
   11704:	movw	r5, #61936	; 0xf1f0
   11708:	movt	r5, #2
   1170c:	add	r1, r5, #16
   11710:	ldr	r0, [r5, #20]
   11714:	bl	1a99c <__assert_fail@plt+0x95b8>
   11718:	str	r0, [r5, #20]
   1171c:	b	116d8 <__assert_fail@plt+0x2f4>
   11720:	str	r4, [sp, #-8]!
   11724:	str	lr, [sp, #4]
   11728:	mov	r2, #5
   1172c:	movw	r1, #52160	; 0xcbc0
   11730:	movt	r1, #1
   11734:	mov	r0, #0
   11738:	bl	11168 <dcgettext@plt>
   1173c:	mov	r2, r0
   11740:	mov	r1, #0
   11744:	mov	r0, #1
   11748:	bl	11204 <error@plt>
   1174c:	strd	r4, [sp, #-20]!	; 0xffffffec
   11750:	strd	r6, [sp, #8]
   11754:	str	lr, [sp, #16]
   11758:	sub	sp, sp, #36	; 0x24
   1175c:	mov	r6, r0
   11760:	mov	r7, r1
   11764:	mov	r4, r2
   11768:	mvn	r2, #0
   1176c:	mvn	r3, #0
   11770:	strd	r2, [sp, #8]
   11774:	movw	r3, #52296	; 0xcc48
   11778:	movt	r3, #1
   1177c:	str	r3, [sp]
   11780:	add	r3, sp, #16
   11784:	mov	r2, #10
   11788:	add	r1, sp, #28
   1178c:	mov	r0, r4
   11790:	bl	1bcc8 <__assert_fail@plt+0xa8e4>
   11794:	bics	r3, r0, #2
   11798:	bne	1180c <__assert_fail@plt+0x428>
   1179c:	ldr	r0, [sp, #28]
   117a0:	cmp	r0, r4
   117a4:	beq	11894 <__assert_fail@plt+0x4b0>
   117a8:	ldrd	r2, [sp, #16]
   117ac:	orrs	r3, r2, r3
   117b0:	beq	1189c <__assert_fail@plt+0x4b8>
   117b4:	ldrb	r3, [r0]
   117b8:	cmp	r3, #58	; 0x3a
   117bc:	beq	11824 <__assert_fail@plt+0x440>
   117c0:	ldr	r3, [sp, #28]
   117c4:	ldrb	r3, [r3]
   117c8:	cmp	r3, #0
   117cc:	movne	r0, #0
   117d0:	bne	117f8 <__assert_fail@plt+0x414>
   117d4:	movw	r3, #61936	; 0xf1f0
   117d8:	movt	r3, #2
   117dc:	ldrd	r0, [sp, #16]
   117e0:	strd	r0, [r3, #24]
   117e4:	movw	r3, #61760	; 0xf140
   117e8:	movt	r3, #2
   117ec:	ldrd	r0, [sp, #8]
   117f0:	strd	r0, [r3, #8]
   117f4:	mov	r0, #1
   117f8:	add	sp, sp, #36	; 0x24
   117fc:	ldrd	r4, [sp]
   11800:	ldrd	r6, [sp, #8]
   11804:	add	sp, sp, #16
   11808:	pop	{pc}		; (ldr pc, [sp], #4)
   1180c:	str	r4, [sp]
   11810:	movw	r3, #51616	; 0xc9a0
   11814:	movt	r3, #1
   11818:	mov	r2, r7
   1181c:	mov	r1, r6
   11820:	bl	1bae4 <__assert_fail@plt+0xa700>
   11824:	add	r5, r0, #1
   11828:	movw	r3, #52296	; 0xcc48
   1182c:	movt	r3, #1
   11830:	str	r3, [sp]
   11834:	add	r3, sp, #8
   11838:	mov	r2, #10
   1183c:	add	r1, sp, #28
   11840:	mov	r0, r5
   11844:	bl	1bcc8 <__assert_fail@plt+0xa8e4>
   11848:	cmp	r0, #0
   1184c:	bne	1187c <__assert_fail@plt+0x498>
   11850:	ldr	r3, [sp, #28]
   11854:	cmp	r3, r5
   11858:	moveq	r0, #0
   1185c:	beq	117f8 <__assert_fail@plt+0x414>
   11860:	ldrd	r0, [sp, #8]
   11864:	ldrd	r2, [sp, #16]
   11868:	cmp	r1, r3
   1186c:	cmpeq	r0, r2
   11870:	movcc	r0, #0
   11874:	bcs	117c0 <__assert_fail@plt+0x3dc>
   11878:	b	117f8 <__assert_fail@plt+0x414>
   1187c:	str	r4, [sp]
   11880:	movw	r3, #51616	; 0xc9a0
   11884:	movt	r3, #1
   11888:	mov	r2, r7
   1188c:	mov	r1, r6
   11890:	bl	1bae4 <__assert_fail@plt+0xa700>
   11894:	mov	r0, #0
   11898:	b	117f8 <__assert_fail@plt+0x414>
   1189c:	mov	r0, #0
   118a0:	b	117f8 <__assert_fail@plt+0x414>
   118a4:	str	r4, [sp, #-8]!
   118a8:	str	lr, [sp, #4]
   118ac:	mov	r4, r0
   118b0:	bl	11294 <strlen@plt>
   118b4:	movw	r3, #61936	; 0xf1f0
   118b8:	movt	r3, #2
   118bc:	str	r0, [r3, #32]
   118c0:	movw	r3, #61760	; 0xf140
   118c4:	movt	r3, #2
   118c8:	str	r4, [r3, #16]
   118cc:	ldr	r4, [sp]
   118d0:	add	sp, sp, #4
   118d4:	pop	{pc}		; (ldr pc, [sp], #4)
   118d8:	str	r4, [sp, #-8]!
   118dc:	str	lr, [sp, #4]
   118e0:	sub	sp, sp, #24
   118e4:	mov	r4, r2
   118e8:	mov	r2, #0
   118ec:	str	r2, [sp, #16]
   118f0:	str	r3, [sp, #12]
   118f4:	movw	r3, #52296	; 0xcc48
   118f8:	movt	r3, #1
   118fc:	str	r3, [sp, #8]
   11900:	mvn	r2, #-2147483648	; 0x80000000
   11904:	mov	r3, #0
   11908:	strd	r2, [sp]
   1190c:	mov	r2, r1
   11910:	asr	r3, r1, #31
   11914:	bl	1ad84 <__assert_fail@plt+0x99a0>
   11918:	str	r0, [r4]
   1191c:	add	sp, sp, #24
   11920:	ldr	r4, [sp]
   11924:	add	sp, sp, #4
   11928:	pop	{pc}		; (ldr pc, [sp], #4)
   1192c:	str	r4, [sp, #-8]!
   11930:	str	lr, [sp, #4]
   11934:	mov	r4, r0
   11938:	mov	r2, #5
   1193c:	movw	r1, #52180	; 0xcbd4
   11940:	movt	r1, #1
   11944:	mov	r0, #0
   11948:	bl	11168 <dcgettext@plt>
   1194c:	mov	r3, r0
   11950:	movw	r2, #61760	; 0xf140
   11954:	movt	r2, #2
   11958:	mov	r1, #1
   1195c:	mov	r0, r4
   11960:	bl	118d8 <__assert_fail@plt+0x4f4>
   11964:	movw	r3, #61936	; 0xf1f0
   11968:	movt	r3, #2
   1196c:	mov	r2, #1
   11970:	strb	r2, [r3, #36]	; 0x24
   11974:	ldr	r4, [sp]
   11978:	add	sp, sp, #4
   1197c:	pop	{pc}		; (ldr pc, [sp], #4)
   11980:	strd	r4, [sp, #-16]!
   11984:	str	r6, [sp, #8]
   11988:	str	lr, [sp, #12]
   1198c:	mov	r5, r0
   11990:	mov	r4, r1
   11994:	movw	r1, #52208	; 0xcbf0
   11998:	movt	r1, #1
   1199c:	bl	110c0 <strcmp@plt>
   119a0:	cmp	r0, #0
   119a4:	bne	11a28 <__assert_fail@plt+0x644>
   119a8:	mov	r2, #5
   119ac:	movw	r1, #52212	; 0xcbf4
   119b0:	movt	r1, #1
   119b4:	bl	11168 <dcgettext@plt>
   119b8:	str	r0, [r4, #4]
   119bc:	movw	r3, #61920	; 0xf1e0
   119c0:	movt	r3, #2
   119c4:	ldr	r3, [r3]
   119c8:	str	r3, [r4]
   119cc:	movw	r3, #61936	; 0xf1f0
   119d0:	movt	r3, #2
   119d4:	mov	r2, #1
   119d8:	strb	r2, [r3, #37]	; 0x25
   119dc:	ldr	r0, [r4]
   119e0:	cmp	r0, #0
   119e4:	beq	11a44 <__assert_fail@plt+0x660>
   119e8:	mov	r1, #2
   119ec:	bl	15684 <__assert_fail@plt+0x42a0>
   119f0:	mov	r3, #0
   119f4:	str	r3, [r4, #8]
   119f8:	strb	r3, [r4, #37]	; 0x25
   119fc:	movw	r3, #61936	; 0xf1f0
   11a00:	movt	r3, #2
   11a04:	ldr	r2, [r3, #40]	; 0x28
   11a08:	add	r2, r2, #1
   11a0c:	str	r2, [r3, #40]	; 0x28
   11a10:	mov	r4, #1
   11a14:	mov	r0, r4
   11a18:	ldrd	r4, [sp]
   11a1c:	ldr	r6, [sp, #8]
   11a20:	add	sp, sp, #12
   11a24:	pop	{pc}		; (ldr pc, [sp], #4)
   11a28:	str	r5, [r4, #4]
   11a2c:	movw	r1, #57556	; 0xe0d4
   11a30:	movt	r1, #1
   11a34:	mov	r0, r5
   11a38:	bl	157f0 <__assert_fail@plt+0x440c>
   11a3c:	str	r0, [r4]
   11a40:	b	119dc <__assert_fail@plt+0x5f8>
   11a44:	movw	r3, #61936	; 0xf1f0
   11a48:	movt	r3, #2
   11a4c:	mov	r2, #1
   11a50:	strb	r2, [r3, #38]	; 0x26
   11a54:	ldrb	r4, [r3, #39]	; 0x27
   11a58:	cmp	r4, #0
   11a5c:	movne	r4, #0
   11a60:	bne	11a14 <__assert_fail@plt+0x630>
   11a64:	bl	112c4 <__errno_location@plt>
   11a68:	ldr	r6, [r0]
   11a6c:	mov	r2, r5
   11a70:	mov	r1, #3
   11a74:	mov	r0, #0
   11a78:	bl	19988 <__assert_fail@plt+0x85a4>
   11a7c:	mov	r3, r0
   11a80:	movw	r2, #57728	; 0xe180
   11a84:	movt	r2, #1
   11a88:	mov	r1, r6
   11a8c:	mov	r0, #0
   11a90:	bl	11204 <error@plt>
   11a94:	b	11a14 <__assert_fail@plt+0x630>
   11a98:	strd	r4, [sp, #-20]!	; 0xffffffec
   11a9c:	strd	r6, [sp, #8]
   11aa0:	str	lr, [sp, #16]
   11aa4:	sub	sp, sp, #12
   11aa8:	mov	r6, r0
   11aac:	movw	r7, #61936	; 0xf1f0
   11ab0:	movt	r7, #2
   11ab4:	ldr	r3, [r7, #48]	; 0x30
   11ab8:	str	r3, [sp, #4]
   11abc:	movw	r4, #61760	; 0xf140
   11ac0:	movt	r4, #2
   11ac4:	ldr	r3, [r4, #20]
   11ac8:	str	r3, [sp]
   11acc:	movw	r3, #52228	; 0xcc04
   11ad0:	movt	r3, #1
   11ad4:	mvn	r2, #0
   11ad8:	mov	r1, #1
   11adc:	ldr	r0, [r7, #44]	; 0x2c
   11ae0:	bl	112d0 <__sprintf_chk@plt>
   11ae4:	ldr	r3, [r7, #48]	; 0x30
   11ae8:	add	r3, r3, #1
   11aec:	str	r3, [r7, #48]	; 0x30
   11af0:	ldr	r5, [r4, #20]
   11af4:	sub	r0, r0, r5
   11af8:	ldr	r4, [r7, #44]	; 0x2c
   11afc:	add	r4, r4, r0
   11b00:	cmp	r5, #0
   11b04:	ble	11b20 <__assert_fail@plt+0x73c>
   11b08:	add	r5, r4, r5
   11b0c:	ldr	r3, [r6, #16]
   11b10:	ldrb	r0, [r4], #1
   11b14:	blx	r3
   11b18:	cmp	r5, r4
   11b1c:	bne	11b0c <__assert_fail@plt+0x728>
   11b20:	movw	r3, #61760	; 0xf140
   11b24:	movt	r3, #2
   11b28:	ldr	r3, [r3]
   11b2c:	cmp	r3, #1
   11b30:	ble	11bec <__assert_fail@plt+0x808>
   11b34:	movw	r3, #61760	; 0xf140
   11b38:	movt	r3, #2
   11b3c:	ldrb	r0, [r3, #24]
   11b40:	cmp	r0, #9
   11b44:	beq	11ba4 <__assert_fail@plt+0x7c0>
   11b48:	ldr	r3, [r6, #16]
   11b4c:	blx	r3
   11b50:	movw	r3, #61936	; 0xf1f0
   11b54:	movt	r3, #2
   11b58:	ldrb	r3, [r3, #60]	; 0x3c
   11b5c:	cmp	r3, #0
   11b60:	beq	11b90 <__assert_fail@plt+0x7ac>
   11b64:	movw	r3, #61936	; 0xf1f0
   11b68:	movt	r3, #2
   11b6c:	ldrb	r3, [r3, #4]
   11b70:	cmp	r3, #0
   11b74:	bne	11b90 <__assert_fail@plt+0x7ac>
   11b78:	movw	r3, #61936	; 0xf1f0
   11b7c:	movt	r3, #2
   11b80:	ldr	r2, [r3, #64]	; 0x40
   11b84:	ldr	r1, [r3, #52]	; 0x34
   11b88:	add	r2, r2, r1
   11b8c:	str	r2, [r3, #64]	; 0x40
   11b90:	add	sp, sp, #12
   11b94:	ldrd	r4, [sp]
   11b98:	ldrd	r6, [sp, #8]
   11b9c:	add	sp, sp, #16
   11ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ba4:	movw	r3, #61936	; 0xf1f0
   11ba8:	movt	r3, #2
   11bac:	movw	r2, #61760	; 0xf140
   11bb0:	movt	r2, #2
   11bb4:	ldr	r3, [r3, #52]	; 0x34
   11bb8:	ldr	r2, [r2, #20]
   11bbc:	sub	r3, r3, r2
   11bc0:	sub	r4, r3, #1
   11bc4:	cmp	r3, #0
   11bc8:	ble	11b50 <__assert_fail@plt+0x76c>
   11bcc:	mov	r5, #32
   11bd0:	ldr	r3, [r6, #16]
   11bd4:	mov	r0, r5
   11bd8:	blx	r3
   11bdc:	sub	r4, r4, #1
   11be0:	cmn	r4, #1
   11be4:	bne	11bd0 <__assert_fail@plt+0x7ec>
   11be8:	b	11b50 <__assert_fail@plt+0x76c>
   11bec:	movw	r4, #61760	; 0xf140
   11bf0:	movt	r4, #2
   11bf4:	ldr	r3, [r6, #16]
   11bf8:	ldrb	r0, [r4, #24]
   11bfc:	blx	r3
   11c00:	ldrb	r3, [r4, #24]
   11c04:	cmp	r3, #9
   11c08:	bne	11b50 <__assert_fail@plt+0x76c>
   11c0c:	ldr	r3, [r4, #28]
   11c10:	movw	r2, #61936	; 0xf1f0
   11c14:	movt	r2, #2
   11c18:	ldr	r1, [r2, #56]	; 0x38
   11c1c:	sdiv	r1, r1, r3
   11c20:	mla	r3, r3, r1, r3
   11c24:	str	r3, [r2, #56]	; 0x38
   11c28:	b	11b50 <__assert_fail@plt+0x76c>
   11c2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11c30:	strd	r6, [sp, #8]
   11c34:	strd	r8, [sp, #16]
   11c38:	str	lr, [sp, #24]
   11c3c:	sub	sp, sp, #196	; 0xc4
   11c40:	mov	r7, r0
   11c44:	mov	r5, r1
   11c48:	movw	r1, #52208	; 0xcbf0
   11c4c:	movt	r1, #1
   11c50:	bl	110c0 <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11c90 <__assert_fail@plt+0x8ac>
   11c5c:	cmp	r5, #0
   11c60:	blt	11c94 <__assert_fail@plt+0x8b0>
   11c64:	add	r2, sp, #88	; 0x58
   11c68:	mov	r1, r5
   11c6c:	mov	r0, #3
   11c70:	bl	111bc <__fxstat64@plt>
   11c74:	cmp	r0, #0
   11c78:	bne	11c94 <__assert_fail@plt+0x8b0>
   11c7c:	ldr	r3, [sp, #168]	; 0xa8
   11c80:	str	r3, [sp, #80]	; 0x50
   11c84:	ldr	r3, [sp, #172]	; 0xac
   11c88:	str	r3, [sp, #84]	; 0x54
   11c8c:	b	11cb8 <__assert_fail@plt+0x8d4>
   11c90:	mvn	r5, #0
   11c94:	movw	r3, #61936	; 0xf1f0
   11c98:	movt	r3, #2
   11c9c:	ldr	r3, [r3, #68]	; 0x44
   11ca0:	cmp	r3, #0
   11ca4:	beq	11da4 <__assert_fail@plt+0x9c0>
   11ca8:	movw	r3, #61936	; 0xf1f0
   11cac:	movt	r3, #2
   11cb0:	ldrd	r2, [r3, #68]	; 0x44
   11cb4:	strd	r2, [sp, #80]	; 0x50
   11cb8:	ldr	r8, [sp, #84]	; 0x54
   11cbc:	movw	r3, #61936	; 0xf1f0
   11cc0:	movt	r3, #2
   11cc4:	add	r2, sp, #36	; 0x24
   11cc8:	add	r1, sp, #80	; 0x50
   11ccc:	ldr	r0, [r3, #76]	; 0x4c
   11cd0:	bl	19fd4 <__assert_fail@plt+0x8bf0>
   11cd4:	cmp	r0, #0
   11cd8:	beq	11db0 <__assert_fail@plt+0x9cc>
   11cdc:	movw	r4, #61936	; 0xf1f0
   11ce0:	movt	r4, #2
   11ce4:	str	r8, [sp, #4]
   11ce8:	ldr	r3, [r4, #76]	; 0x4c
   11cec:	str	r3, [sp]
   11cf0:	add	r3, sp, #36	; 0x24
   11cf4:	ldr	r2, [r4, #80]	; 0x50
   11cf8:	mvn	r1, #0
   11cfc:	mov	r0, #0
   11d00:	bl	17814 <__assert_fail@plt+0x6430>
   11d04:	add	r9, r0, #1
   11d08:	mov	r0, r9
   11d0c:	bl	1a76c <__assert_fail@plt+0x9388>
   11d10:	mov	r6, r0
   11d14:	str	r8, [sp, #4]
   11d18:	ldr	r3, [r4, #76]	; 0x4c
   11d1c:	str	r3, [sp]
   11d20:	add	r3, sp, #36	; 0x24
   11d24:	ldr	r2, [r4, #80]	; 0x50
   11d28:	mov	r1, r9
   11d2c:	bl	17814 <__assert_fail@plt+0x6430>
   11d30:	movw	r4, #61936	; 0xf1f0
   11d34:	movt	r4, #2
   11d38:	ldr	r0, [r4, #84]	; 0x54
   11d3c:	bl	158a0 <__assert_fail@plt+0x44bc>
   11d40:	str	r6, [r4, #84]	; 0x54
   11d44:	ldr	r3, [r4, #88]	; 0x58
   11d48:	cmp	r3, #0
   11d4c:	beq	11df0 <__assert_fail@plt+0xa0c>
   11d50:	movw	r4, #61936	; 0xf1f0
   11d54:	movt	r4, #2
   11d58:	str	r3, [r4, #92]	; 0x5c
   11d5c:	movw	r3, #61760	; 0xf140
   11d60:	movt	r3, #2
   11d64:	ldr	r5, [r3, #32]
   11d68:	mov	r1, #0
   11d6c:	mov	r0, r6
   11d70:	bl	15d78 <__assert_fail@plt+0x4994>
   11d74:	sub	r5, r5, r0
   11d78:	mov	r1, #0
   11d7c:	ldr	r0, [r4, #92]	; 0x5c
   11d80:	bl	15d78 <__assert_fail@plt+0x4994>
   11d84:	sub	r0, r5, r0
   11d88:	str	r0, [r4, #96]	; 0x60
   11d8c:	add	sp, sp, #196	; 0xc4
   11d90:	ldrd	r4, [sp]
   11d94:	ldrd	r6, [sp, #8]
   11d98:	ldrd	r8, [sp, #16]
   11d9c:	add	sp, sp, #24
   11da0:	pop	{pc}		; (ldr pc, [sp], #4)
   11da4:	ldr	r0, [pc, #88]	; 11e04 <__assert_fail@plt+0xa20>
   11da8:	bl	159c0 <__assert_fail@plt+0x45dc>
   11dac:	b	11ca8 <__assert_fail@plt+0x8c4>
   11db0:	mov	r0, #33	; 0x21
   11db4:	bl	1a76c <__assert_fail@plt+0x9388>
   11db8:	mov	r6, r0
   11dbc:	add	r2, sp, #12
   11dc0:	ldr	r0, [sp, #80]	; 0x50
   11dc4:	asr	r1, r0, #31
   11dc8:	bl	15a70 <__assert_fail@plt+0x468c>
   11dcc:	str	r8, [sp, #4]
   11dd0:	str	r0, [sp]
   11dd4:	movw	r3, #52232	; 0xcc08
   11dd8:	movt	r3, #1
   11ddc:	mov	r2, #33	; 0x21
   11de0:	mov	r1, #1
   11de4:	mov	r0, r6
   11de8:	bl	112d0 <__sprintf_chk@plt>
   11dec:	b	11d30 <__assert_fail@plt+0x94c>
   11df0:	movw	r3, #52296	; 0xcc48
   11df4:	movt	r3, #1
   11df8:	cmp	r5, #0
   11dfc:	movge	r3, r7
   11e00:	b	11d50 <__assert_fail@plt+0x96c>
   11e04:	andeq	pc, r2, r4, lsr r2	; <UNPREDICTABLE>
   11e08:	ldr	r3, [r0, #8]
   11e0c:	cmp	r3, #3
   11e10:	bxeq	lr
   11e14:	strd	r4, [sp, #-16]!
   11e18:	str	r6, [sp, #8]
   11e1c:	str	lr, [sp, #12]
   11e20:	mov	r4, r0
   11e24:	bl	112c4 <__errno_location@plt>
   11e28:	mov	r6, r0
   11e2c:	ldr	r5, [r0]
   11e30:	ldr	r0, [r4]
   11e34:	ldr	r3, [r0]
   11e38:	and	r3, r3, #32
   11e3c:	cmp	r3, #0
   11e40:	moveq	r5, r3
   11e44:	bl	11300 <fileno@plt>
   11e48:	cmp	r0, #0
   11e4c:	bne	11ebc <__assert_fail@plt+0xad8>
   11e50:	ldr	r0, [r4]
   11e54:	bl	11384 <clearerr_unlocked@plt>
   11e58:	cmp	r5, #0
   11e5c:	bne	11ee0 <__assert_fail@plt+0xafc>
   11e60:	movw	r3, #61936	; 0xf1f0
   11e64:	movt	r3, #2
   11e68:	ldrb	r3, [r3, #4]
   11e6c:	cmp	r3, #0
   11e70:	bne	11f08 <__assert_fail@plt+0xb24>
   11e74:	movw	r3, #61936	; 0xf1f0
   11e78:	movt	r3, #2
   11e7c:	ldr	r3, [r3]
   11e80:	movw	r2, #61760	; 0xf140
   11e84:	movt	r2, #2
   11e88:	ldr	r2, [r2]
   11e8c:	cmp	r2, #0
   11e90:	beq	11f18 <__assert_fail@plt+0xb34>
   11e94:	mov	r0, #3
   11e98:	mov	ip, #0
   11e9c:	str	r0, [r3, #8]
   11ea0:	ldr	r1, [r3, #24]
   11ea4:	cmp	r1, #0
   11ea8:	streq	ip, [r3, #28]
   11eac:	add	r3, r3, #40	; 0x28
   11eb0:	subs	r2, r2, #1
   11eb4:	bne	11e9c <__assert_fail@plt+0xab8>
   11eb8:	b	11f18 <__assert_fail@plt+0xb34>
   11ebc:	ldr	r0, [r4]
   11ec0:	bl	156c4 <__assert_fail@plt+0x42e0>
   11ec4:	adds	r0, r0, #0
   11ec8:	movne	r0, #1
   11ecc:	cmp	r5, #0
   11ed0:	movne	r0, #0
   11ed4:	cmp	r0, #0
   11ed8:	ldrne	r5, [r6]
   11edc:	b	11e58 <__assert_fail@plt+0xa74>
   11ee0:	ldr	r2, [r4, #4]
   11ee4:	mov	r1, #3
   11ee8:	mov	r0, #0
   11eec:	bl	19988 <__assert_fail@plt+0x85a4>
   11ef0:	mov	r3, r0
   11ef4:	movw	r2, #57728	; 0xe180
   11ef8:	movt	r2, #1
   11efc:	mov	r1, r5
   11f00:	mov	r0, #1
   11f04:	bl	11204 <error@plt>
   11f08:	mov	r3, #3
   11f0c:	str	r3, [r4, #8]
   11f10:	mov	r3, #0
   11f14:	str	r3, [r4, #28]
   11f18:	movw	r3, #61936	; 0xf1f0
   11f1c:	movt	r3, #2
   11f20:	ldr	r2, [r3, #8]
   11f24:	sub	r2, r2, #1
   11f28:	str	r2, [r3, #8]
   11f2c:	ldrd	r4, [sp]
   11f30:	ldr	r6, [sp, #8]
   11f34:	add	sp, sp, #12
   11f38:	pop	{pc}		; (ldr pc, [sp], #4)
   11f3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f40:	strd	r6, [sp, #8]
   11f44:	str	r8, [sp, #16]
   11f48:	str	lr, [sp, #20]
   11f4c:	mov	r5, r0
   11f50:	mov	r6, r1
   11f54:	ldr	r4, [r0]
   11f58:	ldr	r3, [r4, #4]
   11f5c:	ldr	r2, [r4, #8]
   11f60:	cmp	r3, r2
   11f64:	bcs	12008 <__assert_fail@plt+0xc24>
   11f68:	add	r2, r3, #1
   11f6c:	str	r2, [r4, #4]
   11f70:	ldrb	r0, [r3]
   11f74:	cmp	r0, #12
   11f78:	beq	12014 <__assert_fail@plt+0xc30>
   11f7c:	mov	r3, #0
   11f80:	strb	r3, [r5, #37]	; 0x25
   11f84:	cmp	r0, #12
   11f88:	movne	r7, #0
   11f8c:	moveq	r7, #1
   11f90:	movw	r3, #61936	; 0xf1f0
   11f94:	movt	r3, #2
   11f98:	ldrb	r3, [r3, #100]	; 0x64
   11f9c:	cmp	r3, #0
   11fa0:	beq	11fac <__assert_fail@plt+0xbc8>
   11fa4:	mov	r3, #1
   11fa8:	strb	r3, [r5, #37]	; 0x25
   11fac:	cmp	r0, #10
   11fb0:	beq	12148 <__assert_fail@plt+0xd64>
   11fb4:	cmp	r7, #0
   11fb8:	bne	120b8 <__assert_fail@plt+0xcd4>
   11fbc:	cmn	r0, #1
   11fc0:	beq	11ff8 <__assert_fail@plt+0xc14>
   11fc4:	ldr	r3, [r4, #4]
   11fc8:	ldr	r2, [r4, #8]
   11fcc:	cmp	r3, r2
   11fd0:	bcs	121c8 <__assert_fail@plt+0xde4>
   11fd4:	add	r2, r3, #1
   11fd8:	str	r2, [r4, #4]
   11fdc:	ldrb	r0, [r3]
   11fe0:	cmp	r0, #10
   11fe4:	beq	121d4 <__assert_fail@plt+0xdf0>
   11fe8:	cmp	r0, #12
   11fec:	beq	120b4 <__assert_fail@plt+0xcd0>
   11ff0:	cmn	r0, #1
   11ff4:	bne	11fc4 <__assert_fail@plt+0xbe0>
   11ff8:	mov	r0, r5
   11ffc:	bl	11e08 <__assert_fail@plt+0xa24>
   12000:	mov	r7, #0
   12004:	b	12148 <__assert_fail@plt+0xd64>
   12008:	mov	r0, r4
   1200c:	bl	1133c <__uflow@plt>
   12010:	b	11f74 <__assert_fail@plt+0xb90>
   12014:	ldrb	r8, [r5, #37]	; 0x25
   12018:	cmp	r8, #0
   1201c:	beq	121dc <__assert_fail@plt+0xdf8>
   12020:	ldr	r3, [r4, #4]
   12024:	ldr	r2, [r4, #8]
   12028:	cmp	r3, r2
   1202c:	bcs	1207c <__assert_fail@plt+0xc98>
   12030:	add	r2, r3, #1
   12034:	str	r2, [r4, #4]
   12038:	ldrb	r0, [r3]
   1203c:	cmp	r0, #10
   12040:	beq	12088 <__assert_fail@plt+0xca4>
   12044:	mov	r3, #0
   12048:	strb	r3, [r5, #37]	; 0x25
   1204c:	cmp	r0, #12
   12050:	movne	r7, #0
   12054:	moveq	r7, #1
   12058:	movw	r3, #61936	; 0xf1f0
   1205c:	movt	r3, #2
   12060:	ldrb	r3, [r3, #100]	; 0x64
   12064:	cmp	r3, #0
   12068:	bne	11fa4 <__assert_fail@plt+0xbc0>
   1206c:	cmp	r0, #12
   12070:	bne	11fbc <__assert_fail@plt+0xbd8>
   12074:	mov	r7, r8
   12078:	b	1211c <__assert_fail@plt+0xd38>
   1207c:	mov	r0, r4
   12080:	bl	1133c <__uflow@plt>
   12084:	b	1203c <__assert_fail@plt+0xc58>
   12088:	ldr	r3, [r4, #4]
   1208c:	ldr	r2, [r4, #8]
   12090:	cmp	r3, r2
   12094:	bcs	120a8 <__assert_fail@plt+0xcc4>
   12098:	add	r2, r3, #1
   1209c:	str	r2, [r4, #4]
   120a0:	ldrb	r0, [r3]
   120a4:	b	11f7c <__assert_fail@plt+0xb98>
   120a8:	mov	r0, r4
   120ac:	bl	1133c <__uflow@plt>
   120b0:	b	11f7c <__assert_fail@plt+0xb98>
   120b4:	mov	r7, #0
   120b8:	movw	r3, #61936	; 0xf1f0
   120bc:	movt	r3, #2
   120c0:	ldrb	r3, [r3, #100]	; 0x64
   120c4:	cmp	r3, #0
   120c8:	beq	1211c <__assert_fail@plt+0xd38>
   120cc:	movw	r3, #61936	; 0xf1f0
   120d0:	movt	r3, #2
   120d4:	ldrb	r3, [r3, #4]
   120d8:	cmp	r3, #0
   120dc:	movne	r3, #0
   120e0:	strbne	r3, [r5, #37]	; 0x25
   120e4:	bne	1211c <__assert_fail@plt+0xd38>
   120e8:	movw	r3, #61936	; 0xf1f0
   120ec:	movt	r3, #2
   120f0:	ldr	r2, [r3]
   120f4:	movw	r3, #61760	; 0xf140
   120f8:	movt	r3, #2
   120fc:	ldr	r3, [r3]
   12100:	cmp	r3, #0
   12104:	beq	1211c <__assert_fail@plt+0xd38>
   12108:	mov	r1, #0
   1210c:	strb	r1, [r2, #37]	; 0x25
   12110:	add	r2, r2, #40	; 0x28
   12114:	subs	r3, r3, #1
   12118:	bne	1210c <__assert_fail@plt+0xd28>
   1211c:	ldr	r3, [r4, #4]
   12120:	ldr	r2, [r4, #8]
   12124:	cmp	r3, r2
   12128:	bcs	121b0 <__assert_fail@plt+0xdcc>
   1212c:	add	r2, r3, #1
   12130:	str	r2, [r4, #4]
   12134:	ldrb	r0, [r3]
   12138:	cmp	r0, #10
   1213c:	bne	121bc <__assert_fail@plt+0xdd8>
   12140:	mov	r0, r5
   12144:	bl	1156c <__assert_fail@plt+0x188>
   12148:	movw	r3, #61760	; 0xf140
   1214c:	movt	r3, #2
   12150:	ldrb	r3, [r3, #36]	; 0x24
   12154:	cmp	r3, #0
   12158:	beq	1219c <__assert_fail@plt+0xdb8>
   1215c:	movw	r3, #61936	; 0xf1f0
   12160:	movt	r3, #2
   12164:	ldrb	r3, [r3, #4]
   12168:	eor	r3, r3, #1
   1216c:	cmp	r6, #1
   12170:	movne	r6, r3
   12174:	orreq	r6, r3, #1
   12178:	cmp	r6, #0
   1217c:	beq	1219c <__assert_fail@plt+0xdb8>
   12180:	cmp	r7, #0
   12184:	bne	1219c <__assert_fail@plt+0xdb8>
   12188:	movw	r3, #61760	; 0xf140
   1218c:	movt	r3, #2
   12190:	ldr	r2, [r3, #40]	; 0x28
   12194:	add	r2, r2, #1
   12198:	str	r2, [r3, #40]	; 0x28
   1219c:	ldrd	r4, [sp]
   121a0:	ldrd	r6, [sp, #8]
   121a4:	ldr	r8, [sp, #16]
   121a8:	add	sp, sp, #20
   121ac:	pop	{pc}		; (ldr pc, [sp], #4)
   121b0:	mov	r0, r4
   121b4:	bl	1133c <__uflow@plt>
   121b8:	b	12138 <__assert_fail@plt+0xd54>
   121bc:	mov	r1, r4
   121c0:	bl	112b8 <ungetc@plt>
   121c4:	b	12140 <__assert_fail@plt+0xd5c>
   121c8:	mov	r0, r4
   121cc:	bl	1133c <__uflow@plt>
   121d0:	b	11fe0 <__assert_fail@plt+0xbfc>
   121d4:	mov	r7, #0
   121d8:	b	12148 <__assert_fail@plt+0xd64>
   121dc:	movw	r3, #61936	; 0xf1f0
   121e0:	movt	r3, #2
   121e4:	ldrb	r7, [r3, #100]	; 0x64
   121e8:	cmp	r7, #0
   121ec:	moveq	r7, #1
   121f0:	bne	11fa4 <__assert_fail@plt+0xbc0>
   121f4:	b	1211c <__assert_fail@plt+0xd38>
   121f8:	strd	r4, [sp, #-16]!
   121fc:	str	r6, [sp, #8]
   12200:	str	lr, [sp, #12]
   12204:	mov	r5, r0
   12208:	ldr	r4, [r0]
   1220c:	ldr	r3, [r4, #4]
   12210:	ldr	r2, [r4, #8]
   12214:	cmp	r3, r2
   12218:	bcs	122c4 <__assert_fail@plt+0xee0>
   1221c:	add	r2, r3, #1
   12220:	str	r2, [r4, #4]
   12224:	ldrb	r0, [r3]
   12228:	cmp	r0, #10
   1222c:	beq	1229c <__assert_fail@plt+0xeb8>
   12230:	cmp	r0, #12
   12234:	beq	1224c <__assert_fail@plt+0xe68>
   12238:	cmn	r0, #1
   1223c:	bne	1220c <__assert_fail@plt+0xe28>
   12240:	mov	r0, r5
   12244:	bl	11e08 <__assert_fail@plt+0xa24>
   12248:	b	1229c <__assert_fail@plt+0xeb8>
   1224c:	ldr	r3, [r4, #4]
   12250:	ldr	r2, [r4, #8]
   12254:	cmp	r3, r2
   12258:	bcs	122ac <__assert_fail@plt+0xec8>
   1225c:	add	r2, r3, #1
   12260:	str	r2, [r4, #4]
   12264:	ldrb	r0, [r3]
   12268:	cmp	r0, #10
   1226c:	bne	122b8 <__assert_fail@plt+0xed4>
   12270:	movw	r3, #61936	; 0xf1f0
   12274:	movt	r3, #2
   12278:	ldrb	r3, [r3, #101]	; 0x65
   1227c:	cmp	r3, #0
   12280:	beq	12294 <__assert_fail@plt+0xeb0>
   12284:	movw	r3, #61936	; 0xf1f0
   12288:	movt	r3, #2
   1228c:	mov	r2, #1
   12290:	strb	r2, [r3, #102]	; 0x66
   12294:	mov	r0, r5
   12298:	bl	1156c <__assert_fail@plt+0x188>
   1229c:	ldrd	r4, [sp]
   122a0:	ldr	r6, [sp, #8]
   122a4:	add	sp, sp, #12
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	mov	r0, r4
   122b0:	bl	1133c <__uflow@plt>
   122b4:	b	12268 <__assert_fail@plt+0xe84>
   122b8:	mov	r1, r4
   122bc:	bl	112b8 <ungetc@plt>
   122c0:	b	12270 <__assert_fail@plt+0xe8c>
   122c4:	mov	r0, r4
   122c8:	bl	1133c <__uflow@plt>
   122cc:	b	12228 <__assert_fail@plt+0xe44>
   122d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   122d4:	strd	r6, [sp, #8]
   122d8:	str	r8, [sp, #16]
   122dc:	str	lr, [sp, #20]
   122e0:	movw	r3, #61936	; 0xf1f0
   122e4:	movt	r3, #2
   122e8:	ldr	r4, [r3, #56]	; 0x38
   122ec:	ldrb	r3, [r3, #103]	; 0x67
   122f0:	cmp	r3, #0
   122f4:	bne	12340 <__assert_fail@plt+0xf5c>
   122f8:	mov	r5, r0
   122fc:	movw	r6, #61924	; 0xf1e4
   12300:	movt	r6, #2
   12304:	mov	r7, #32
   12308:	add	r4, r4, #1
   1230c:	cmp	r5, r4
   12310:	blt	12364 <__assert_fail@plt+0xf80>
   12314:	ldr	r0, [r6]
   12318:	ldr	r3, [r0, #20]
   1231c:	ldr	r2, [r0, #24]
   12320:	cmp	r3, r2
   12324:	addcc	r2, r3, #1
   12328:	strcc	r2, [r0, #20]
   1232c:	strbcc	r7, [r3]
   12330:	bcc	12308 <__assert_fail@plt+0xf24>
   12334:	mov	r1, r7
   12338:	bl	11348 <__overflow@plt>
   1233c:	b	12308 <__assert_fail@plt+0xf24>
   12340:	movw	r3, #61936	; 0xf1f0
   12344:	movt	r3, #2
   12348:	sub	r0, r0, r4
   1234c:	str	r0, [r3, #104]	; 0x68
   12350:	ldrd	r4, [sp]
   12354:	ldrd	r6, [sp, #8]
   12358:	ldr	r8, [sp, #16]
   1235c:	add	sp, sp, #20
   12360:	pop	{pc}		; (ldr pc, [sp], #4)
   12364:	movw	r3, #61936	; 0xf1f0
   12368:	movt	r3, #2
   1236c:	str	r5, [r3, #56]	; 0x38
   12370:	b	12350 <__assert_fail@plt+0xf6c>
   12374:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12378:	strd	r6, [sp, #8]
   1237c:	str	r8, [sp, #16]
   12380:	str	lr, [sp, #20]
   12384:	movw	r3, #61936	; 0xf1f0
   12388:	movt	r3, #2
   1238c:	ldr	r5, [r3, #56]	; 0x38
   12390:	ldr	r6, [r3, #104]	; 0x68
   12394:	add	r6, r5, r6
   12398:	movw	r7, #61760	; 0xf140
   1239c:	movt	r7, #2
   123a0:	movw	r8, #61924	; 0xf1e4
   123a4:	movt	r8, #2
   123a8:	b	123b0 <__assert_fail@plt+0xfcc>
   123ac:	mov	r5, r4
   123b0:	sub	r3, r6, r5
   123b4:	cmp	r3, #1
   123b8:	ble	123fc <__assert_fail@plt+0x1018>
   123bc:	ldr	r3, [r7, #28]
   123c0:	sdiv	r4, r5, r3
   123c4:	mla	r4, r3, r4, r3
   123c8:	cmp	r6, r4
   123cc:	blt	123fc <__assert_fail@plt+0x1018>
   123d0:	ldrb	r1, [r7, #44]	; 0x2c
   123d4:	ldr	r0, [r8]
   123d8:	ldr	r3, [r0, #20]
   123dc:	ldr	r2, [r0, #24]
   123e0:	cmp	r3, r2
   123e4:	addcc	r2, r3, #1
   123e8:	strcc	r2, [r0, #20]
   123ec:	strbcc	r1, [r3]
   123f0:	bcc	123ac <__assert_fail@plt+0xfc8>
   123f4:	bl	11348 <__overflow@plt>
   123f8:	b	123ac <__assert_fail@plt+0xfc8>
   123fc:	movw	r4, #61924	; 0xf1e4
   12400:	movt	r4, #2
   12404:	mov	r7, #32
   12408:	add	r5, r5, #1
   1240c:	cmp	r6, r5
   12410:	blt	12440 <__assert_fail@plt+0x105c>
   12414:	ldr	r0, [r4]
   12418:	ldr	r3, [r0, #20]
   1241c:	ldr	r2, [r0, #24]
   12420:	cmp	r3, r2
   12424:	addcc	r2, r3, #1
   12428:	strcc	r2, [r0, #20]
   1242c:	strbcc	r7, [r3]
   12430:	bcc	12408 <__assert_fail@plt+0x1024>
   12434:	mov	r1, r7
   12438:	bl	11348 <__overflow@plt>
   1243c:	b	12408 <__assert_fail@plt+0x1024>
   12440:	movw	r3, #61936	; 0xf1f0
   12444:	movt	r3, #2
   12448:	str	r6, [r3, #56]	; 0x38
   1244c:	mov	r2, #0
   12450:	str	r2, [r3, #104]	; 0x68
   12454:	ldrd	r4, [sp]
   12458:	ldrd	r6, [sp, #8]
   1245c:	ldr	r8, [sp, #16]
   12460:	add	sp, sp, #20
   12464:	pop	{pc}		; (ldr pc, [sp], #4)
   12468:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1246c:	strd	r6, [sp, #8]
   12470:	strd	r8, [sp, #16]
   12474:	str	sl, [sp, #24]
   12478:	str	lr, [sp, #28]
   1247c:	movw	r3, #61936	; 0xf1f0
   12480:	movt	r3, #2
   12484:	ldr	r3, [r3, #108]	; 0x6c
   12488:	cmp	r3, #0
   1248c:	ble	124b8 <__assert_fail@plt+0x10d4>
   12490:	movw	r3, #61760	; 0xf140
   12494:	movt	r3, #2
   12498:	ldr	r9, [r3, #16]
   1249c:	movw	r3, #61936	; 0xf1f0
   124a0:	movt	r3, #2
   124a4:	ldr	r7, [r3, #32]
   124a8:	mov	r5, r3
   124ac:	movw	r8, #61924	; 0xf1e4
   124b0:	movt	r8, #2
   124b4:	b	12590 <__assert_fail@plt+0x11ac>
   124b8:	movw	r3, #61936	; 0xf1f0
   124bc:	movt	r3, #2
   124c0:	ldr	r3, [r3, #104]	; 0x68
   124c4:	cmp	r3, #0
   124c8:	bgt	124e4 <__assert_fail@plt+0x1100>
   124cc:	ldrd	r4, [sp]
   124d0:	ldrd	r6, [sp, #8]
   124d4:	ldrd	r8, [sp, #16]
   124d8:	ldr	sl, [sp, #24]
   124dc:	add	sp, sp, #28
   124e0:	pop	{pc}		; (ldr pc, [sp], #4)
   124e4:	bl	12374 <__assert_fail@plt+0xf90>
   124e8:	b	124cc <__assert_fail@plt+0x10e8>
   124ec:	ldr	r3, [r5, #104]	; 0x68
   124f0:	add	r3, r3, #1
   124f4:	str	r3, [r5, #104]	; 0x68
   124f8:	b	1252c <__assert_fail@plt+0x1148>
   124fc:	ldrb	r1, [r4, #-1]
   12500:	ldr	r0, [r8]
   12504:	ldr	r3, [r0, #20]
   12508:	ldr	r2, [r0, #24]
   1250c:	cmp	r3, r2
   12510:	addcc	r2, r3, #1
   12514:	strcc	r2, [r0, #20]
   12518:	strbcc	r1, [r3]
   1251c:	bcs	12558 <__assert_fail@plt+0x1174>
   12520:	ldr	r3, [r5, #56]	; 0x38
   12524:	add	r3, r3, #1
   12528:	str	r3, [r5, #56]	; 0x38
   1252c:	sub	r3, r6, r4
   12530:	cmp	r3, #0
   12534:	ble	12560 <__assert_fail@plt+0x117c>
   12538:	ldrb	r3, [r4], #1
   1253c:	cmp	r3, #32
   12540:	beq	124ec <__assert_fail@plt+0x1108>
   12544:	ldr	r3, [r5, #104]	; 0x68
   12548:	cmp	r3, #0
   1254c:	ble	124fc <__assert_fail@plt+0x1118>
   12550:	bl	12374 <__assert_fail@plt+0xf90>
   12554:	b	124fc <__assert_fail@plt+0x1118>
   12558:	bl	11348 <__overflow@plt>
   1255c:	b	12520 <__assert_fail@plt+0x113c>
   12560:	bic	r3, r7, r7, asr #31
   12564:	add	r9, r9, r3
   12568:	sub	r7, r7, #1
   1256c:	sub	r7, r7, r3
   12570:	ldr	r3, [r5, #104]	; 0x68
   12574:	cmp	r3, #0
   12578:	bgt	1259c <__assert_fail@plt+0x11b8>
   1257c:	ldr	r3, [r5, #108]	; 0x6c
   12580:	sub	r3, r3, #1
   12584:	str	r3, [r5, #108]	; 0x6c
   12588:	cmp	r3, #0
   1258c:	ble	124cc <__assert_fail@plt+0x10e8>
   12590:	mov	r4, r9
   12594:	add	r6, r9, r7
   12598:	b	1252c <__assert_fail@plt+0x1148>
   1259c:	bl	12374 <__assert_fail@plt+0xf90>
   125a0:	b	1257c <__assert_fail@plt+0x1198>
   125a4:	str	r4, [sp, #-8]!
   125a8:	str	lr, [sp, #4]
   125ac:	mov	r4, r0
   125b0:	ldr	r2, [r0, #32]
   125b4:	movw	r3, #61936	; 0xf1f0
   125b8:	movt	r3, #2
   125bc:	str	r2, [r3, #112]	; 0x70
   125c0:	ldr	r0, [r3, #32]
   125c4:	cmp	r2, r0
   125c8:	bgt	125f8 <__assert_fail@plt+0x1214>
   125cc:	movw	r3, #61936	; 0xf1f0
   125d0:	movt	r3, #2
   125d4:	ldrb	r3, [r3, #116]	; 0x74
   125d8:	cmp	r3, #0
   125dc:	bne	12614 <__assert_fail@plt+0x1230>
   125e0:	ldrb	r3, [r4, #36]	; 0x24
   125e4:	cmp	r3, #0
   125e8:	bne	1261c <__assert_fail@plt+0x1238>
   125ec:	ldr	r4, [sp]
   125f0:	add	sp, sp, #4
   125f4:	pop	{pc}		; (ldr pc, [sp], #4)
   125f8:	sub	r0, r2, r0
   125fc:	bl	122d0 <__assert_fail@plt+0xeec>
   12600:	movw	r3, #61936	; 0xf1f0
   12604:	movt	r3, #2
   12608:	mov	r2, #0
   1260c:	str	r2, [r3, #112]	; 0x70
   12610:	b	125cc <__assert_fail@plt+0x11e8>
   12614:	bl	12468 <__assert_fail@plt+0x1084>
   12618:	b	125e0 <__assert_fail@plt+0x11fc>
   1261c:	mov	r0, r4
   12620:	bl	11a98 <__assert_fail@plt+0x6b4>
   12624:	b	125ec <__assert_fail@plt+0x1208>
   12628:	strd	r4, [sp, #-16]!
   1262c:	str	r6, [sp, #8]
   12630:	str	lr, [sp, #12]
   12634:	sub	sp, sp, #312	; 0x138
   12638:	movw	r4, #61936	; 0xf1f0
   1263c:	movt	r4, #2
   12640:	mov	r3, #0
   12644:	str	r3, [r4, #56]	; 0x38
   12648:	ldr	r0, [r4, #120]	; 0x78
   1264c:	bl	122d0 <__assert_fail@plt+0xeec>
   12650:	bl	12374 <__assert_fail@plt+0xf90>
   12654:	ldrd	r4, [r4, #128]	; 0x80
   12658:	orrs	r3, r4, r5
   1265c:	beq	12720 <__assert_fail@plt+0x133c>
   12660:	mov	r2, #5
   12664:	movw	r1, #52264	; 0xcc28
   12668:	movt	r1, #1
   1266c:	mov	r0, #0
   12670:	bl	11168 <dcgettext@plt>
   12674:	add	r6, sp, #36	; 0x24
   12678:	strd	r4, [sp]
   1267c:	mov	r3, r0
   12680:	mov	r2, #276	; 0x114
   12684:	mov	r1, #1
   12688:	mov	r0, r6
   1268c:	bl	112d0 <__sprintf_chk@plt>
   12690:	movw	r4, #61936	; 0xf1f0
   12694:	movt	r4, #2
   12698:	ldr	r5, [r4, #96]	; 0x60
   1269c:	mov	r1, #0
   126a0:	mov	r0, r6
   126a4:	bl	15d78 <__assert_fail@plt+0x4994>
   126a8:	sub	r0, r5, r0
   126ac:	bic	r0, r0, r0, asr #31
   126b0:	asr	r2, r0, #1
   126b4:	str	r6, [sp, #24]
   126b8:	movw	r3, #52300	; 0xcc4c
   126bc:	movt	r3, #1
   126c0:	str	r3, [sp, #20]
   126c4:	sub	r0, r0, r2
   126c8:	str	r0, [sp, #16]
   126cc:	ldr	r1, [r4, #92]	; 0x5c
   126d0:	str	r1, [sp, #12]
   126d4:	str	r3, [sp, #8]
   126d8:	str	r2, [sp, #4]
   126dc:	ldr	r3, [r4, #84]	; 0x54
   126e0:	str	r3, [sp]
   126e4:	movw	r3, #52296	; 0xcc48
   126e8:	movt	r3, #1
   126ec:	ldr	r2, [r4, #120]	; 0x78
   126f0:	movw	r1, #52276	; 0xcc34
   126f4:	movt	r1, #1
   126f8:	mov	r0, #1
   126fc:	bl	112f4 <__printf_chk@plt>
   12700:	mov	r3, #0
   12704:	strb	r3, [r4, #136]	; 0x88
   12708:	str	r3, [r4, #56]	; 0x38
   1270c:	add	sp, sp, #312	; 0x138
   12710:	ldrd	r4, [sp]
   12714:	ldr	r6, [sp, #8]
   12718:	add	sp, sp, #12
   1271c:	pop	{pc}		; (ldr pc, [sp], #4)
   12720:	mov	r2, #5
   12724:	movw	r1, #52240	; 0xcc10
   12728:	movt	r1, #1
   1272c:	mov	r0, #0
   12730:	bl	11168 <dcgettext@plt>
   12734:	mov	r2, r0
   12738:	mov	r1, #0
   1273c:	mov	r0, #1
   12740:	bl	11204 <error@plt>
   12744:	strd	r4, [sp, #-12]!
   12748:	str	lr, [sp, #8]
   1274c:	sub	sp, sp, #20
   12750:	mov	r5, r0
   12754:	movw	r2, #61936	; 0xf1f0
   12758:	movt	r2, #2
   1275c:	ldr	r4, [r2, #140]	; 0x8c
   12760:	movw	r2, #61760	; 0xf140
   12764:	movt	r2, #2
   12768:	ldrb	r2, [r2, #45]	; 0x2d
   1276c:	cmp	r2, r0
   12770:	beq	127e0 <__assert_fail@plt+0x13fc>
   12774:	cmp	r0, #9
   12778:	beq	12968 <__assert_fail@plt+0x1584>
   1277c:	bl	1127c <__ctype_b_loc@plt>
   12780:	ldr	r2, [r0]
   12784:	lsl	r3, r5, #1
   12788:	ldrh	r3, [r2, r3]
   1278c:	tst	r3, #16384	; 0x4000
   12790:	bne	12950 <__assert_fail@plt+0x156c>
   12794:	movw	r3, #61936	; 0xf1f0
   12798:	movt	r3, #2
   1279c:	ldrb	r3, [r3, #145]	; 0x91
   127a0:	cmp	r3, #0
   127a4:	bne	1286c <__assert_fail@plt+0x1488>
   127a8:	movw	r3, #61936	; 0xf1f0
   127ac:	movt	r3, #2
   127b0:	ldrb	r3, [r3, #146]	; 0x92
   127b4:	cmp	r3, #0
   127b8:	beq	128f8 <__assert_fail@plt+0x1514>
   127bc:	tst	r5, #128	; 0x80
   127c0:	bne	128b4 <__assert_fail@plt+0x14d0>
   127c4:	mov	r3, #94	; 0x5e
   127c8:	strb	r3, [r4]
   127cc:	eor	r3, r5, #64	; 0x40
   127d0:	strb	r3, [r4, #1]
   127d4:	mov	r0, #2
   127d8:	mov	r2, r0
   127dc:	b	12820 <__assert_fail@plt+0x143c>
   127e0:	movw	r2, #61760	; 0xf140
   127e4:	movt	r2, #2
   127e8:	ldr	r2, [r2, #48]	; 0x30
   127ec:	movw	r1, #61936	; 0xf1f0
   127f0:	movt	r1, #2
   127f4:	ldr	ip, [r1, #64]	; 0x40
   127f8:	sdiv	r0, ip, r2
   127fc:	mls	r0, r2, r0, ip
   12800:	sub	r2, r2, r0
   12804:	ldrb	r1, [r1, #144]	; 0x90
   12808:	cmp	r1, #0
   1280c:	bne	12844 <__assert_fail@plt+0x1460>
   12810:	strb	r5, [r4]
   12814:	mov	r0, #1
   12818:	cmp	r2, #0
   1281c:	blt	1291c <__assert_fail@plt+0x1538>
   12820:	movw	r3, #61936	; 0xf1f0
   12824:	movt	r3, #2
   12828:	ldr	r1, [r3, #64]	; 0x40
   1282c:	add	r2, r1, r2
   12830:	str	r2, [r3, #64]	; 0x40
   12834:	add	sp, sp, #20
   12838:	ldrd	r4, [sp]
   1283c:	add	sp, sp, #8
   12840:	pop	{pc}		; (ldr pc, [sp], #4)
   12844:	cmp	r2, #0
   12848:	beq	128ac <__assert_fail@plt+0x14c8>
   1284c:	mov	r0, r2
   12850:	add	r2, r4, r0
   12854:	mov	r3, #32
   12858:	strb	r3, [r4], #1
   1285c:	cmp	r4, r2
   12860:	bne	12858 <__assert_fail@plt+0x1474>
   12864:	mov	r2, r0
   12868:	b	12818 <__assert_fail@plt+0x1434>
   1286c:	mov	r3, #92	; 0x5c
   12870:	strb	r3, [r4]
   12874:	str	r5, [sp]
   12878:	movw	r3, #52304	; 0xcc50
   1287c:	movt	r3, #1
   12880:	mov	r2, #4
   12884:	mov	r1, #1
   12888:	add	r0, sp, #12
   1288c:	bl	112d0 <__sprintf_chk@plt>
   12890:	ldrb	r3, [sp, #12]
   12894:	strb	r3, [r4, #1]
   12898:	ldrb	r3, [sp, #13]
   1289c:	strb	r3, [r4, #2]
   128a0:	ldrb	r3, [sp, #14]
   128a4:	strb	r3, [r4, #3]
   128a8:	mov	r2, #4
   128ac:	mov	r0, r2
   128b0:	b	12820 <__assert_fail@plt+0x143c>
   128b4:	mov	r3, #92	; 0x5c
   128b8:	strb	r3, [r4]
   128bc:	str	r5, [sp]
   128c0:	movw	r3, #52304	; 0xcc50
   128c4:	movt	r3, #1
   128c8:	mov	r2, #4
   128cc:	mov	r1, #1
   128d0:	add	r0, sp, #12
   128d4:	bl	112d0 <__sprintf_chk@plt>
   128d8:	ldrb	r3, [sp, #12]
   128dc:	strb	r3, [r4, #1]
   128e0:	ldrb	r3, [sp, #13]
   128e4:	strb	r3, [r4, #2]
   128e8:	ldrb	r3, [sp, #14]
   128ec:	strb	r3, [r4, #3]
   128f0:	mov	r2, #4
   128f4:	b	128ac <__assert_fail@plt+0x14c8>
   128f8:	cmp	r5, #8
   128fc:	strbne	r5, [r4]
   12900:	movne	r0, #1
   12904:	movne	r2, #0
   12908:	bne	12820 <__assert_fail@plt+0x143c>
   1290c:	mov	r3, #8
   12910:	strb	r3, [r4]
   12914:	mov	r0, #1
   12918:	mvn	r2, #0
   1291c:	movw	r3, #61936	; 0xf1f0
   12920:	movt	r3, #2
   12924:	ldr	r3, [r3, #64]	; 0x40
   12928:	cmp	r3, #0
   1292c:	beq	12960 <__assert_fail@plt+0x157c>
   12930:	rsb	r1, r2, #0
   12934:	cmp	r1, r3
   12938:	blt	12820 <__assert_fail@plt+0x143c>
   1293c:	movw	r3, #61936	; 0xf1f0
   12940:	movt	r3, #2
   12944:	mov	r2, #0
   12948:	str	r2, [r3, #64]	; 0x40
   1294c:	b	12834 <__assert_fail@plt+0x1450>
   12950:	strb	r5, [r4]
   12954:	mov	r0, #1
   12958:	mov	r2, r0
   1295c:	b	12820 <__assert_fail@plt+0x143c>
   12960:	mov	r0, r3
   12964:	b	12834 <__assert_fail@plt+0x1450>
   12968:	movw	r2, #61936	; 0xf1f0
   1296c:	movt	r2, #2
   12970:	ldr	r0, [r2, #64]	; 0x40
   12974:	rsbs	r1, r0, #0
   12978:	and	r0, r0, #7
   1297c:	and	r1, r1, #7
   12980:	rsbpl	r0, r1, #0
   12984:	rsb	r0, r0, #8
   12988:	ldrb	r2, [r2, #144]	; 0x90
   1298c:	cmp	r2, #0
   12990:	moveq	r2, r0
   12994:	beq	12810 <__assert_fail@plt+0x142c>
   12998:	b	12850 <__assert_fail@plt+0x146c>
   1299c:	str	r4, [sp, #-8]!
   129a0:	str	lr, [sp, #4]
   129a4:	mov	r4, r0
   129a8:	movw	r3, #61936	; 0xf1f0
   129ac:	movt	r3, #2
   129b0:	ldrb	r3, [r3, #103]	; 0x67
   129b4:	cmp	r3, #0
   129b8:	beq	12a44 <__assert_fail@plt+0x1660>
   129bc:	cmp	r0, #32
   129c0:	beq	12a10 <__assert_fail@plt+0x162c>
   129c4:	movw	r3, #61936	; 0xf1f0
   129c8:	movt	r3, #2
   129cc:	ldr	r3, [r3, #104]	; 0x68
   129d0:	cmp	r3, #0
   129d4:	bgt	12a28 <__assert_fail@plt+0x1644>
   129d8:	bl	1127c <__ctype_b_loc@plt>
   129dc:	ldr	r2, [r0]
   129e0:	lsl	r3, r4, #1
   129e4:	ldrh	r3, [r2, r3]
   129e8:	tst	r3, #16384	; 0x4000
   129ec:	bne	12a30 <__assert_fail@plt+0x164c>
   129f0:	cmp	r4, #8
   129f4:	bne	12a44 <__assert_fail@plt+0x1660>
   129f8:	movw	r3, #61936	; 0xf1f0
   129fc:	movt	r3, #2
   12a00:	ldr	r2, [r3, #56]	; 0x38
   12a04:	sub	r2, r2, #1
   12a08:	str	r2, [r3, #56]	; 0x38
   12a0c:	b	12a44 <__assert_fail@plt+0x1660>
   12a10:	movw	r3, #61936	; 0xf1f0
   12a14:	movt	r3, #2
   12a18:	ldr	r2, [r3, #104]	; 0x68
   12a1c:	add	r2, r2, #1
   12a20:	str	r2, [r3, #104]	; 0x68
   12a24:	b	12a6c <__assert_fail@plt+0x1688>
   12a28:	bl	12374 <__assert_fail@plt+0xf90>
   12a2c:	b	129d8 <__assert_fail@plt+0x15f4>
   12a30:	movw	r3, #61936	; 0xf1f0
   12a34:	movt	r3, #2
   12a38:	ldr	r2, [r3, #56]	; 0x38
   12a3c:	add	r2, r2, #1
   12a40:	str	r2, [r3, #56]	; 0x38
   12a44:	movw	r3, #61924	; 0xf1e4
   12a48:	movt	r3, #2
   12a4c:	ldr	r0, [r3]
   12a50:	ldr	r3, [r0, #20]
   12a54:	ldr	r2, [r0, #24]
   12a58:	cmp	r3, r2
   12a5c:	addcc	r2, r3, #1
   12a60:	strcc	r2, [r0, #20]
   12a64:	strbcc	r4, [r3]
   12a68:	bcs	12a78 <__assert_fail@plt+0x1694>
   12a6c:	ldr	r4, [sp]
   12a70:	add	sp, sp, #4
   12a74:	pop	{pc}		; (ldr pc, [sp], #4)
   12a78:	mov	r1, r4
   12a7c:	bl	11348 <__overflow@plt>
   12a80:	b	12a6c <__assert_fail@plt+0x1688>
   12a84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12a88:	strd	r6, [sp, #8]
   12a8c:	str	r8, [sp, #16]
   12a90:	str	lr, [sp, #20]
   12a94:	mov	r7, r0
   12a98:	ldr	r6, [r0, #20]
   12a9c:	add	r3, r6, #1
   12aa0:	str	r3, [r0, #20]
   12aa4:	movw	r3, #61936	; 0xf1f0
   12aa8:	movt	r3, #2
   12aac:	ldr	r5, [r3, #20]
   12ab0:	ldr	r2, [r3, #148]	; 0x94
   12ab4:	ldr	r4, [r2, r6, lsl #2]
   12ab8:	add	r4, r5, r4
   12abc:	add	r2, r2, r6, lsl #2
   12ac0:	ldr	r2, [r2, #4]
   12ac4:	add	r5, r5, r2
   12ac8:	mov	r2, #1
   12acc:	strb	r2, [r3, #152]	; 0x98
   12ad0:	ldrb	r3, [r3, #136]	; 0x88
   12ad4:	cmp	r3, #0
   12ad8:	bne	12b88 <__assert_fail@plt+0x17a4>
   12adc:	ldr	r3, [r7, #8]
   12ae0:	cmp	r3, #1
   12ae4:	beq	12b90 <__assert_fail@plt+0x17ac>
   12ae8:	movw	r3, #61936	; 0xf1f0
   12aec:	movt	r3, #2
   12af0:	ldr	r2, [r3, #32]
   12af4:	ldr	r0, [r3, #112]	; 0x70
   12af8:	cmp	r2, r0
   12afc:	blt	12c08 <__assert_fail@plt+0x1824>
   12b00:	movw	r3, #61936	; 0xf1f0
   12b04:	movt	r3, #2
   12b08:	ldrb	r3, [r3, #116]	; 0x74
   12b0c:	cmp	r3, #0
   12b10:	bne	12c24 <__assert_fail@plt+0x1840>
   12b14:	cmp	r4, r5
   12b18:	beq	12b2c <__assert_fail@plt+0x1748>
   12b1c:	ldrb	r0, [r4], #1
   12b20:	bl	1299c <__assert_fail@plt+0x15b8>
   12b24:	cmp	r5, r4
   12b28:	bne	12b1c <__assert_fail@plt+0x1738>
   12b2c:	movw	r3, #61936	; 0xf1f0
   12b30:	movt	r3, #2
   12b34:	ldr	r3, [r3, #104]	; 0x68
   12b38:	cmp	r3, #0
   12b3c:	bne	12b70 <__assert_fail@plt+0x178c>
   12b40:	ldr	r2, [r7, #32]
   12b44:	movw	r3, #61936	; 0xf1f0
   12b48:	movt	r3, #2
   12b4c:	ldr	r1, [r3, #156]	; 0x9c
   12b50:	ldr	r1, [r1, r6, lsl #2]
   12b54:	add	r1, r2, r1
   12b58:	str	r1, [r3, #56]	; 0x38
   12b5c:	ldr	r0, [r3, #32]
   12b60:	sub	r2, r2, r0
   12b64:	ldr	r3, [r3, #120]	; 0x78
   12b68:	cmp	r2, r3
   12b6c:	beq	12c2c <__assert_fail@plt+0x1848>
   12b70:	mov	r0, #1
   12b74:	ldrd	r4, [sp]
   12b78:	ldrd	r6, [sp, #8]
   12b7c:	ldr	r8, [sp, #16]
   12b80:	add	sp, sp, #20
   12b84:	pop	{pc}		; (ldr pc, [sp], #4)
   12b88:	bl	12628 <__assert_fail@plt+0x1244>
   12b8c:	b	12adc <__assert_fail@plt+0x16f8>
   12b90:	movw	r3, #61936	; 0xf1f0
   12b94:	movt	r3, #2
   12b98:	ldr	ip, [r3]
   12b9c:	movw	r3, #61760	; 0xf140
   12ba0:	movt	r3, #2
   12ba4:	ldr	r1, [r3]
   12ba8:	cmp	r1, #0
   12bac:	ble	12bd4 <__assert_fail@plt+0x17f0>
   12bb0:	add	r1, r1, #1
   12bb4:	mov	r2, ip
   12bb8:	mov	r3, #1
   12bbc:	mov	r0, #2
   12bc0:	str	r0, [r2, #8]
   12bc4:	add	r3, r3, #1
   12bc8:	add	r2, r2, #40	; 0x28
   12bcc:	cmp	r3, r1
   12bd0:	bne	12bc0 <__assert_fail@plt+0x17dc>
   12bd4:	ldr	r3, [ip, #28]
   12bd8:	cmp	r3, #0
   12bdc:	bgt	12ae8 <__assert_fail@plt+0x1704>
   12be0:	movw	r3, #61760	; 0xf140
   12be4:	movt	r3, #2
   12be8:	ldrb	r3, [r3, #52]	; 0x34
   12bec:	cmp	r3, #0
   12bf0:	bne	12b70 <__assert_fail@plt+0x178c>
   12bf4:	movw	r3, #61936	; 0xf1f0
   12bf8:	movt	r3, #2
   12bfc:	mov	r2, #0
   12c00:	strb	r2, [r3, #152]	; 0x98
   12c04:	b	12b70 <__assert_fail@plt+0x178c>
   12c08:	sub	r0, r0, r2
   12c0c:	bl	122d0 <__assert_fail@plt+0xeec>
   12c10:	movw	r3, #61936	; 0xf1f0
   12c14:	movt	r3, #2
   12c18:	mov	r2, #0
   12c1c:	str	r2, [r3, #112]	; 0x70
   12c20:	b	12b00 <__assert_fail@plt+0x171c>
   12c24:	bl	12468 <__assert_fail@plt+0x1084>
   12c28:	b	12b14 <__assert_fail@plt+0x1730>
   12c2c:	movw	r3, #61936	; 0xf1f0
   12c30:	movt	r3, #2
   12c34:	sub	r1, r1, r0
   12c38:	str	r1, [r3, #56]	; 0x38
   12c3c:	b	12b70 <__assert_fail@plt+0x178c>
   12c40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c44:	strd	r6, [sp, #8]
   12c48:	strd	r8, [sp, #16]
   12c4c:	str	sl, [sp, #24]
   12c50:	str	lr, [sp, #28]
   12c54:	mov	r4, r0
   12c58:	ldr	r0, [r0]
   12c5c:	ldr	r3, [r0, #4]
   12c60:	ldr	r2, [r0, #8]
   12c64:	cmp	r3, r2
   12c68:	bcs	12eec <__assert_fail@plt+0x1b08>
   12c6c:	add	r2, r3, #1
   12c70:	str	r2, [r0, #4]
   12c74:	ldrb	r5, [r3]
   12c78:	movw	r3, #61936	; 0xf1f0
   12c7c:	movt	r3, #2
   12c80:	ldr	r7, [r3, #64]	; 0x40
   12c84:	cmp	r5, #12
   12c88:	beq	12ef8 <__assert_fail@plt+0x1b14>
   12c8c:	mov	r3, #0
   12c90:	strb	r3, [r4, #37]	; 0x25
   12c94:	cmp	r5, #10
   12c98:	beq	12cb8 <__assert_fail@plt+0x18d4>
   12c9c:	cmp	r5, #12
   12ca0:	beq	12f68 <__assert_fail@plt+0x1b84>
   12ca4:	cmn	r5, #1
   12ca8:	beq	13030 <__assert_fail@plt+0x1c4c>
   12cac:	uxtb	r0, r5
   12cb0:	bl	12744 <__assert_fail@plt+0x1360>
   12cb4:	mov	r6, r0
   12cb8:	movw	r3, #61936	; 0xf1f0
   12cbc:	movt	r3, #2
   12cc0:	ldrb	r3, [r3, #60]	; 0x3c
   12cc4:	cmp	r3, #0
   12cc8:	beq	12ce4 <__assert_fail@plt+0x1900>
   12ccc:	movw	r3, #61936	; 0xf1f0
   12cd0:	movt	r3, #2
   12cd4:	ldr	r2, [r3, #64]	; 0x40
   12cd8:	ldr	r3, [r3, #164]	; 0xa4
   12cdc:	cmp	r2, r3
   12ce0:	bgt	13040 <__assert_fail@plt+0x1c5c>
   12ce4:	movw	r3, #5808	; 0x16b0
   12ce8:	movt	r3, #1
   12cec:	ldr	r2, [r4, #16]
   12cf0:	cmp	r2, r3
   12cf4:	beq	12e08 <__assert_fail@plt+0x1a24>
   12cf8:	movw	r3, #61936	; 0xf1f0
   12cfc:	movt	r3, #2
   12d00:	mov	r2, #1
   12d04:	strb	r2, [r3, #152]	; 0x98
   12d08:	ldrb	r3, [r3, #136]	; 0x88
   12d0c:	cmp	r3, #0
   12d10:	beq	12d28 <__assert_fail@plt+0x1944>
   12d14:	movw	r3, #61760	; 0xf140
   12d18:	movt	r3, #2
   12d1c:	ldrb	r3, [r3, #4]
   12d20:	cmp	r3, #0
   12d24:	beq	13054 <__assert_fail@plt+0x1c70>
   12d28:	movw	r3, #61936	; 0xf1f0
   12d2c:	movt	r3, #2
   12d30:	ldrb	r3, [r3, #4]
   12d34:	cmp	r3, #0
   12d38:	beq	12ddc <__assert_fail@plt+0x19f8>
   12d3c:	movw	r3, #61936	; 0xf1f0
   12d40:	movt	r3, #2
   12d44:	ldrb	r3, [r3, #168]	; 0xa8
   12d48:	cmp	r3, #0
   12d4c:	beq	12ddc <__assert_fail@plt+0x19f8>
   12d50:	movw	r3, #61936	; 0xf1f0
   12d54:	movt	r3, #2
   12d58:	ldr	sl, [r3, #108]	; 0x6c
   12d5c:	mov	r2, #0
   12d60:	str	r2, [r3, #108]	; 0x6c
   12d64:	ldr	r7, [r3]
   12d68:	cmp	sl, r2
   12d6c:	ble	12da0 <__assert_fail@plt+0x19bc>
   12d70:	add	sl, sl, #1
   12d74:	mov	r8, #1
   12d78:	mov	r9, r3
   12d7c:	mov	r0, r7
   12d80:	bl	125a4 <__assert_fail@plt+0x11c0>
   12d84:	ldr	r3, [r9, #108]	; 0x6c
   12d88:	add	r3, r3, #1
   12d8c:	str	r3, [r9, #108]	; 0x6c
   12d90:	add	r8, r8, #1
   12d94:	add	r7, r7, #40	; 0x28
   12d98:	cmp	r8, sl
   12d9c:	bne	12d7c <__assert_fail@plt+0x1998>
   12da0:	movw	r3, #61936	; 0xf1f0
   12da4:	movt	r3, #2
   12da8:	ldr	r2, [r4, #32]
   12dac:	str	r2, [r3, #112]	; 0x70
   12db0:	ldrb	r3, [r3, #60]	; 0x3c
   12db4:	cmp	r3, #0
   12db8:	movwne	r3, #61936	; 0xf1f0
   12dbc:	movtne	r3, #2
   12dc0:	ldrne	r2, [r3, #164]	; 0xa4
   12dc4:	moveq	r2, #0
   12dc8:	movw	r3, #61936	; 0xf1f0
   12dcc:	movt	r3, #2
   12dd0:	str	r2, [r3, #104]	; 0x68
   12dd4:	mov	r2, #0
   12dd8:	strb	r2, [r3, #168]	; 0xa8
   12ddc:	movw	r3, #61936	; 0xf1f0
   12de0:	movt	r3, #2
   12de4:	ldr	r2, [r3, #32]
   12de8:	ldr	r0, [r3, #112]	; 0x70
   12dec:	cmp	r2, r0
   12df0:	blt	1305c <__assert_fail@plt+0x1c78>
   12df4:	movw	r3, #61936	; 0xf1f0
   12df8:	movt	r3, #2
   12dfc:	ldrb	r3, [r3, #116]	; 0x74
   12e00:	cmp	r3, #0
   12e04:	bne	13078 <__assert_fail@plt+0x1c94>
   12e08:	ldrb	r3, [r4, #36]	; 0x24
   12e0c:	cmp	r3, #0
   12e10:	bne	13080 <__assert_fail@plt+0x1c9c>
   12e14:	movw	r3, #61936	; 0xf1f0
   12e18:	movt	r3, #2
   12e1c:	mov	r2, #0
   12e20:	strb	r2, [r3, #169]	; 0xa9
   12e24:	cmp	r5, #10
   12e28:	moveq	r0, #1
   12e2c:	beq	12ff0 <__assert_fail@plt+0x1c0c>
   12e30:	movw	r3, #61936	; 0xf1f0
   12e34:	movt	r3, #2
   12e38:	ldr	r5, [r3, #140]	; 0x8c
   12e3c:	cmp	r6, r2
   12e40:	beq	12e5c <__assert_fail@plt+0x1a78>
   12e44:	add	r6, r5, r6
   12e48:	ldr	r3, [r4, #16]
   12e4c:	ldrb	r0, [r5], #1
   12e50:	blx	r3
   12e54:	cmp	r6, r5
   12e58:	bne	12e48 <__assert_fail@plt+0x1a64>
   12e5c:	movw	r6, #61936	; 0xf1f0
   12e60:	movt	r6, #2
   12e64:	ldr	r0, [r4]
   12e68:	ldr	r3, [r0, #4]
   12e6c:	ldr	r2, [r0, #8]
   12e70:	cmp	r3, r2
   12e74:	bcs	1308c <__assert_fail@plt+0x1ca8>
   12e78:	add	r2, r3, #1
   12e7c:	str	r2, [r0, #4]
   12e80:	ldrb	r0, [r3]
   12e84:	cmp	r0, #10
   12e88:	beq	13128 <__assert_fail@plt+0x1d44>
   12e8c:	cmp	r0, #12
   12e90:	beq	13094 <__assert_fail@plt+0x1cb0>
   12e94:	cmn	r0, #1
   12e98:	beq	13104 <__assert_fail@plt+0x1d20>
   12e9c:	ldr	r5, [r6, #64]	; 0x40
   12ea0:	uxtb	r0, r0
   12ea4:	bl	12744 <__assert_fail@plt+0x1360>
   12ea8:	ldrb	r3, [r6, #60]	; 0x3c
   12eac:	cmp	r3, #0
   12eb0:	beq	12ec4 <__assert_fail@plt+0x1ae0>
   12eb4:	ldr	r2, [r6, #64]	; 0x40
   12eb8:	ldr	r3, [r6, #164]	; 0xa4
   12ebc:	cmp	r2, r3
   12ec0:	bgt	13114 <__assert_fail@plt+0x1d30>
   12ec4:	ldr	r5, [r6, #140]	; 0x8c
   12ec8:	cmp	r0, #0
   12ecc:	beq	12e64 <__assert_fail@plt+0x1a80>
   12ed0:	add	r7, r5, r0
   12ed4:	ldr	r3, [r4, #16]
   12ed8:	ldrb	r0, [r5], #1
   12edc:	blx	r3
   12ee0:	cmp	r7, r5
   12ee4:	bne	12ed4 <__assert_fail@plt+0x1af0>
   12ee8:	b	12e64 <__assert_fail@plt+0x1a80>
   12eec:	bl	1133c <__uflow@plt>
   12ef0:	mov	r5, r0
   12ef4:	b	12c78 <__assert_fail@plt+0x1894>
   12ef8:	ldrb	r3, [r4, #37]	; 0x25
   12efc:	cmp	r3, #0
   12f00:	beq	12f68 <__assert_fail@plt+0x1b84>
   12f04:	ldr	r0, [r4]
   12f08:	ldr	r3, [r0, #4]
   12f0c:	ldr	r2, [r0, #8]
   12f10:	cmp	r3, r2
   12f14:	bcs	12f50 <__assert_fail@plt+0x1b6c>
   12f18:	add	r2, r3, #1
   12f1c:	str	r2, [r0, #4]
   12f20:	ldrb	r5, [r3]
   12f24:	cmp	r5, #10
   12f28:	bne	12c8c <__assert_fail@plt+0x18a8>
   12f2c:	ldr	r0, [r4]
   12f30:	ldr	r3, [r0, #4]
   12f34:	ldr	r2, [r0, #8]
   12f38:	cmp	r3, r2
   12f3c:	bcs	12f5c <__assert_fail@plt+0x1b78>
   12f40:	add	r2, r3, #1
   12f44:	str	r2, [r0, #4]
   12f48:	ldrb	r5, [r3]
   12f4c:	b	12c8c <__assert_fail@plt+0x18a8>
   12f50:	bl	1133c <__uflow@plt>
   12f54:	mov	r5, r0
   12f58:	b	12f24 <__assert_fail@plt+0x1b40>
   12f5c:	bl	1133c <__uflow@plt>
   12f60:	mov	r5, r0
   12f64:	b	12c8c <__assert_fail@plt+0x18a8>
   12f68:	ldr	r0, [r4]
   12f6c:	ldr	r3, [r0, #4]
   12f70:	ldr	r2, [r0, #8]
   12f74:	cmp	r3, r2
   12f78:	bcs	13008 <__assert_fail@plt+0x1c24>
   12f7c:	add	r2, r3, #1
   12f80:	str	r2, [r0, #4]
   12f84:	ldrb	r0, [r3]
   12f88:	cmp	r0, #10
   12f8c:	bne	13010 <__assert_fail@plt+0x1c2c>
   12f90:	movw	r3, #61936	; 0xf1f0
   12f94:	movt	r3, #2
   12f98:	mov	r2, #1
   12f9c:	strb	r2, [r3, #160]	; 0xa0
   12fa0:	ldrb	r3, [r3, #136]	; 0x88
   12fa4:	cmp	r3, #0
   12fa8:	beq	12fc0 <__assert_fail@plt+0x1bdc>
   12fac:	movw	r3, #61760	; 0xf140
   12fb0:	movt	r3, #2
   12fb4:	ldrb	r3, [r3, #4]
   12fb8:	cmp	r3, #0
   12fbc:	beq	1301c <__assert_fail@plt+0x1c38>
   12fc0:	movw	r3, #61936	; 0xf1f0
   12fc4:	movt	r3, #2
   12fc8:	ldrb	r3, [r3, #101]	; 0x65
   12fcc:	cmp	r3, #0
   12fd0:	beq	12fe4 <__assert_fail@plt+0x1c00>
   12fd4:	movw	r3, #61936	; 0xf1f0
   12fd8:	movt	r3, #2
   12fdc:	mov	r2, #1
   12fe0:	strb	r2, [r3, #102]	; 0x66
   12fe4:	mov	r0, r4
   12fe8:	bl	1156c <__assert_fail@plt+0x188>
   12fec:	mov	r0, #1
   12ff0:	ldrd	r4, [sp]
   12ff4:	ldrd	r6, [sp, #8]
   12ff8:	ldrd	r8, [sp, #16]
   12ffc:	ldr	sl, [sp, #24]
   13000:	add	sp, sp, #28
   13004:	pop	{pc}		; (ldr pc, [sp], #4)
   13008:	bl	1133c <__uflow@plt>
   1300c:	b	12f88 <__assert_fail@plt+0x1ba4>
   13010:	ldr	r1, [r4]
   13014:	bl	112b8 <ungetc@plt>
   13018:	b	12f90 <__assert_fail@plt+0x1bac>
   1301c:	movw	r3, #61936	; 0xf1f0
   13020:	movt	r3, #2
   13024:	strb	r2, [r3, #152]	; 0x98
   13028:	bl	12628 <__assert_fail@plt+0x1244>
   1302c:	b	12fe4 <__assert_fail@plt+0x1c00>
   13030:	mov	r0, r4
   13034:	bl	11e08 <__assert_fail@plt+0xa24>
   13038:	mov	r0, #1
   1303c:	b	12ff0 <__assert_fail@plt+0x1c0c>
   13040:	movw	r3, #61936	; 0xf1f0
   13044:	movt	r3, #2
   13048:	str	r7, [r3, #64]	; 0x40
   1304c:	mov	r0, #0
   13050:	b	12ff0 <__assert_fail@plt+0x1c0c>
   13054:	bl	12628 <__assert_fail@plt+0x1244>
   13058:	b	12d28 <__assert_fail@plt+0x1944>
   1305c:	sub	r0, r0, r2
   13060:	bl	122d0 <__assert_fail@plt+0xeec>
   13064:	movw	r3, #61936	; 0xf1f0
   13068:	movt	r3, #2
   1306c:	mov	r2, #0
   13070:	str	r2, [r3, #112]	; 0x70
   13074:	b	12df4 <__assert_fail@plt+0x1a10>
   13078:	bl	12468 <__assert_fail@plt+0x1084>
   1307c:	b	12e08 <__assert_fail@plt+0x1a24>
   13080:	mov	r0, r4
   13084:	bl	11a98 <__assert_fail@plt+0x6b4>
   13088:	b	12e14 <__assert_fail@plt+0x1a30>
   1308c:	bl	1133c <__uflow@plt>
   13090:	b	12e84 <__assert_fail@plt+0x1aa0>
   13094:	ldr	r0, [r4]
   13098:	ldr	r3, [r0, #4]
   1309c:	ldr	r2, [r0, #8]
   130a0:	cmp	r3, r2
   130a4:	bcs	130f0 <__assert_fail@plt+0x1d0c>
   130a8:	add	r2, r3, #1
   130ac:	str	r2, [r0, #4]
   130b0:	ldrb	r0, [r3]
   130b4:	cmp	r0, #10
   130b8:	bne	130f8 <__assert_fail@plt+0x1d14>
   130bc:	movw	r3, #61936	; 0xf1f0
   130c0:	movt	r3, #2
   130c4:	ldrb	r3, [r3, #101]	; 0x65
   130c8:	cmp	r3, #0
   130cc:	beq	130e0 <__assert_fail@plt+0x1cfc>
   130d0:	movw	r3, #61936	; 0xf1f0
   130d4:	movt	r3, #2
   130d8:	mov	r2, #1
   130dc:	strb	r2, [r3, #102]	; 0x66
   130e0:	mov	r0, r4
   130e4:	bl	1156c <__assert_fail@plt+0x188>
   130e8:	mov	r0, #1
   130ec:	b	12ff0 <__assert_fail@plt+0x1c0c>
   130f0:	bl	1133c <__uflow@plt>
   130f4:	b	130b4 <__assert_fail@plt+0x1cd0>
   130f8:	ldr	r1, [r4]
   130fc:	bl	112b8 <ungetc@plt>
   13100:	b	130bc <__assert_fail@plt+0x1cd8>
   13104:	mov	r0, r4
   13108:	bl	11e08 <__assert_fail@plt+0xa24>
   1310c:	mov	r0, #1
   13110:	b	12ff0 <__assert_fail@plt+0x1c0c>
   13114:	movw	r3, #61936	; 0xf1f0
   13118:	movt	r3, #2
   1311c:	str	r5, [r3, #64]	; 0x40
   13120:	mov	r0, #0
   13124:	b	12ff0 <__assert_fail@plt+0x1c0c>
   13128:	mov	r0, #1
   1312c:	b	12ff0 <__assert_fail@plt+0x1c0c>
   13130:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13134:	strd	r6, [sp, #8]
   13138:	strd	r8, [sp, #16]
   1313c:	strd	sl, [sp, #24]
   13140:	str	lr, [sp, #32]
   13144:	sub	sp, sp, #52	; 0x34
   13148:	mov	r7, r0
   1314c:	mov	r6, r1
   13150:	movw	r3, #61760	; 0xf140
   13154:	movt	r3, #2
   13158:	ldr	r1, [r3, #56]	; 0x38
   1315c:	sub	r2, r1, #10
   13160:	movw	r3, #61936	; 0xf1f0
   13164:	movt	r3, #2
   13168:	str	r2, [r3, #172]	; 0xac
   1316c:	cmp	r2, #0
   13170:	ble	1318c <__assert_fail@plt+0x1da8>
   13174:	movw	r3, #61760	; 0xf140
   13178:	movt	r3, #2
   1317c:	ldrb	r3, [r3, #52]	; 0x34
   13180:	cmp	r3, #0
   13184:	bne	131b8 <__assert_fail@plt+0x1dd4>
   13188:	b	131ac <__assert_fail@plt+0x1dc8>
   1318c:	movw	r3, #61760	; 0xf140
   13190:	movt	r3, #2
   13194:	mov	r2, #0
   13198:	strb	r2, [r3, #52]	; 0x34
   1319c:	movw	r3, #61936	; 0xf1f0
   131a0:	movt	r3, #2
   131a4:	mov	r2, #1
   131a8:	strb	r2, [r3, #101]	; 0x65
   131ac:	movw	r3, #61936	; 0xf1f0
   131b0:	movt	r3, #2
   131b4:	str	r1, [r3, #172]	; 0xac
   131b8:	movw	r3, #61936	; 0xf1f0
   131bc:	movt	r3, #2
   131c0:	ldrb	r3, [r3, #176]	; 0xb0
   131c4:	cmp	r3, #0
   131c8:	beq	131e4 <__assert_fail@plt+0x1e00>
   131cc:	movw	r2, #61936	; 0xf1f0
   131d0:	movt	r2, #2
   131d4:	ldr	r3, [r2, #172]	; 0xac
   131d8:	add	r3, r3, r3, lsr #31
   131dc:	asr	r3, r3, #1
   131e0:	str	r3, [r2, #172]	; 0xac
   131e4:	cmp	r7, #0
   131e8:	bne	13434 <__assert_fail@plt+0x2050>
   131ec:	movw	r3, #61936	; 0xf1f0
   131f0:	movt	r3, #2
   131f4:	mov	r2, #0
   131f8:	strb	r2, [r3, #4]
   131fc:	movw	r3, #61760	; 0xf140
   13200:	movt	r3, #2
   13204:	ldrb	r3, [r3, #4]
   13208:	cmp	r3, #0
   1320c:	beq	13220 <__assert_fail@plt+0x1e3c>
   13210:	movw	r3, #61936	; 0xf1f0
   13214:	movt	r3, #2
   13218:	mov	r2, #1
   1321c:	strb	r2, [r3, #177]	; 0xb1
   13220:	movw	r3, #61760	; 0xf140
   13224:	movt	r3, #2
   13228:	ldr	r3, [r3]
   1322c:	cmp	r3, #1
   13230:	ble	134cc <__assert_fail@plt+0x20e8>
   13234:	movw	r3, #61936	; 0xf1f0
   13238:	movt	r3, #2
   1323c:	ldrb	r3, [r3, #116]	; 0x74
   13240:	cmp	r3, #0
   13244:	bne	13458 <__assert_fail@plt+0x2074>
   13248:	movw	r3, #61936	; 0xf1f0
   1324c:	movt	r3, #2
   13250:	ldrb	r1, [r3, #178]	; 0xb2
   13254:	movw	r3, #52312	; 0xcc58
   13258:	movt	r3, #1
   1325c:	movw	r2, #52300	; 0xcc4c
   13260:	movt	r2, #1
   13264:	cmp	r1, #0
   13268:	moveq	r3, r2
   1326c:	movw	r2, #61760	; 0xf140
   13270:	movt	r2, #2
   13274:	str	r3, [r2, #16]
   13278:	movw	r3, #61936	; 0xf1f0
   1327c:	movt	r3, #2
   13280:	mov	r2, #1
   13284:	str	r2, [r3, #32]
   13288:	strb	r2, [r3, #116]	; 0x74
   1328c:	movw	r3, #61936	; 0xf1f0
   13290:	movt	r3, #2
   13294:	mov	r2, #1
   13298:	strb	r2, [r3, #60]	; 0x3c
   1329c:	ldr	r3, [r3, #32]
   132a0:	cmp	r3, r2
   132a4:	beq	134b0 <__assert_fail@plt+0x20cc>
   132a8:	movw	r3, #61936	; 0xf1f0
   132ac:	movt	r3, #2
   132b0:	mov	r2, #1
   132b4:	strb	r2, [r3, #144]	; 0x90
   132b8:	movw	r3, #61936	; 0xf1f0
   132bc:	movt	r3, #2
   132c0:	mov	r2, #1
   132c4:	strb	r2, [r3, #103]	; 0x67
   132c8:	movw	r3, #61936	; 0xf1f0
   132cc:	movt	r3, #2
   132d0:	ldrb	r3, [r3, #178]	; 0xb2
   132d4:	cmp	r3, #0
   132d8:	beq	132ec <__assert_fail@plt+0x1f08>
   132dc:	movw	r3, #61936	; 0xf1f0
   132e0:	movt	r3, #2
   132e4:	mov	r2, #0
   132e8:	strb	r2, [r3, #60]	; 0x3c
   132ec:	movw	r3, #61936	; 0xf1f0
   132f0:	movt	r3, #2
   132f4:	ldrb	r0, [r3, #179]	; 0xb3
   132f8:	cmp	r0, #0
   132fc:	moveq	r1, #0
   13300:	beq	13348 <__assert_fail@plt+0x1f64>
   13304:	movw	r3, #61760	; 0xf140
   13308:	movt	r3, #2
   1330c:	ldr	r2, [r3, #60]	; 0x3c
   13310:	str	r2, [r3, #40]	; 0x28
   13314:	ldrb	r3, [r3, #24]
   13318:	cmp	r3, #9
   1331c:	beq	134e0 <__assert_fail@plt+0x20fc>
   13320:	movw	r3, #61760	; 0xf140
   13324:	movt	r3, #2
   13328:	ldr	r2, [r3, #20]
   1332c:	add	r1, r2, #1
   13330:	movw	r3, #61936	; 0xf1f0
   13334:	movt	r3, #2
   13338:	str	r1, [r3, #52]	; 0x34
   1333c:	ldrb	r3, [r3, #4]
   13340:	cmp	r3, #0
   13344:	moveq	r1, #0
   13348:	movw	r3, #61760	; 0xf140
   1334c:	movt	r3, #2
   13350:	ldr	ip, [r3]
   13354:	sub	r2, ip, #1
   13358:	movw	lr, #61936	; 0xf1f0
   1335c:	movt	lr, #2
   13360:	ldr	r3, [lr, #32]
   13364:	smull	r2, r3, r2, r3
   13368:	cmp	r3, r2, asr #31
   1336c:	moveq	r3, r2
   13370:	mvnne	r3, #-2147483648	; 0x80000000
   13374:	movw	r2, #61760	; 0xf140
   13378:	movt	r2, #2
   1337c:	ldr	r2, [r2, #32]
   13380:	sub	r2, r2, r1
   13384:	mov	r1, #0
   13388:	subs	r3, r2, r3
   1338c:	movvs	r1, #1
   13390:	subs	r2, r1, #0
   13394:	str	r2, [sp, #40]	; 0x28
   13398:	bne	141cc <__assert_fail@plt+0x2de8>
   1339c:	sdiv	r3, r3, ip
   133a0:	movw	r2, #61936	; 0xf1f0
   133a4:	movt	r2, #2
   133a8:	str	r3, [r2, #164]	; 0xa4
   133ac:	cmp	r3, #0
   133b0:	ble	141dc <__assert_fail@plt+0x2df8>
   133b4:	cmp	r0, #0
   133b8:	bne	13508 <__assert_fail@plt+0x2124>
   133bc:	movw	r5, #61936	; 0xf1f0
   133c0:	movt	r5, #2
   133c4:	ldr	r0, [r5, #140]	; 0x8c
   133c8:	bl	158a0 <__assert_fail@plt+0x44bc>
   133cc:	movw	r4, #61760	; 0xf140
   133d0:	movt	r4, #2
   133d4:	ldr	r0, [r4, #48]	; 0x30
   133d8:	cmp	r0, #8
   133dc:	movlt	r0, #8
   133e0:	bl	1a76c <__assert_fail@plt+0x9388>
   133e4:	str	r0, [r5, #140]	; 0x8c
   133e8:	mov	r3, #0
   133ec:	str	r3, [r5, #40]	; 0x28
   133f0:	ldr	r0, [r5]
   133f4:	bl	158a0 <__assert_fail@plt+0x44bc>
   133f8:	mov	r1, #40	; 0x28
   133fc:	ldr	r0, [r4]
   13400:	bl	1a8ec <__assert_fail@plt+0x9508>
   13404:	mov	r4, r0
   13408:	str	r0, [r5]
   1340c:	ldrb	r3, [r5, #4]
   13410:	cmp	r3, #0
   13414:	beq	1359c <__assert_fail@plt+0x21b8>
   13418:	sub	r5, r7, #1
   1341c:	cmp	r7, #0
   13420:	beq	13574 <__assert_fail@plt+0x2190>
   13424:	sub	r6, r6, #4
   13428:	movw	r7, #61760	; 0xf140
   1342c:	movt	r7, #2
   13430:	b	1354c <__assert_fail@plt+0x2168>
   13434:	movw	r3, #61936	; 0xf1f0
   13438:	movt	r3, #2
   1343c:	ldrb	r3, [r3, #4]
   13440:	cmp	r3, #0
   13444:	beq	131fc <__assert_fail@plt+0x1e18>
   13448:	movw	r3, #61760	; 0xf140
   1344c:	movt	r3, #2
   13450:	str	r7, [r3]
   13454:	b	131fc <__assert_fail@plt+0x1e18>
   13458:	movw	r3, #61936	; 0xf1f0
   1345c:	movt	r3, #2
   13460:	ldrb	r3, [r3, #178]	; 0xb2
   13464:	cmp	r3, #0
   13468:	bne	1328c <__assert_fail@plt+0x1ea8>
   1346c:	movw	r3, #61936	; 0xf1f0
   13470:	movt	r3, #2
   13474:	ldr	r3, [r3, #32]
   13478:	cmp	r3, #1
   1347c:	bne	1328c <__assert_fail@plt+0x1ea8>
   13480:	movw	r3, #61760	; 0xf140
   13484:	movt	r3, #2
   13488:	ldr	r3, [r3, #16]
   1348c:	ldrb	r3, [r3]
   13490:	cmp	r3, #9
   13494:	bne	1328c <__assert_fail@plt+0x1ea8>
   13498:	movw	r3, #61760	; 0xf140
   1349c:	movt	r3, #2
   134a0:	movw	r2, #52300	; 0xcc4c
   134a4:	movt	r2, #1
   134a8:	str	r2, [r3, #16]
   134ac:	b	1328c <__assert_fail@plt+0x1ea8>
   134b0:	movw	r3, #61760	; 0xf140
   134b4:	movt	r3, #2
   134b8:	ldr	r3, [r3, #16]
   134bc:	ldrb	r3, [r3]
   134c0:	cmp	r3, #9
   134c4:	bne	132a8 <__assert_fail@plt+0x1ec4>
   134c8:	b	132b8 <__assert_fail@plt+0x1ed4>
   134cc:	movw	r3, #61760	; 0xf140
   134d0:	movt	r3, #2
   134d4:	mov	r2, #0
   134d8:	strb	r2, [r3, #4]
   134dc:	b	132c8 <__assert_fail@plt+0x1ee4>
   134e0:	movw	r3, #61760	; 0xf140
   134e4:	movt	r3, #2
   134e8:	ldr	r2, [r3, #20]
   134ec:	rsbs	r1, r2, #0
   134f0:	and	r3, r2, #7
   134f4:	and	r1, r1, #7
   134f8:	rsbpl	r3, r1, #0
   134fc:	rsb	r3, r3, #8
   13500:	add	r1, r3, r2
   13504:	b	13330 <__assert_fail@plt+0x1f4c>
   13508:	movw	r4, #61936	; 0xf1f0
   1350c:	movt	r4, #2
   13510:	ldr	r0, [r4, #44]	; 0x2c
   13514:	bl	158a0 <__assert_fail@plt+0x44bc>
   13518:	movw	r3, #61760	; 0xf140
   1351c:	movt	r3, #2
   13520:	ldr	r0, [r3, #20]
   13524:	cmp	r0, #11
   13528:	movcc	r0, #11
   1352c:	add	r0, r0, #1
   13530:	bl	1a76c <__assert_fail@plt+0x9388>
   13534:	str	r0, [r4, #44]	; 0x2c
   13538:	b	133bc <__assert_fail@plt+0x1fd8>
   1353c:	add	r4, r4, #40	; 0x28
   13540:	sub	r5, r5, #1
   13544:	cmn	r5, #1
   13548:	beq	13574 <__assert_fail@plt+0x2190>
   1354c:	mov	r1, r4
   13550:	ldr	r0, [r6, #4]!
   13554:	bl	11980 <__assert_fail@plt+0x59c>
   13558:	cmp	r0, #0
   1355c:	bne	1353c <__assert_fail@plt+0x2158>
   13560:	sub	r4, r4, #40	; 0x28
   13564:	ldr	r3, [r7]
   13568:	sub	r3, r3, #1
   1356c:	str	r3, [r7]
   13570:	b	1353c <__assert_fail@plt+0x2158>
   13574:	movw	r3, #61760	; 0xf140
   13578:	movt	r3, #2
   1357c:	ldr	r3, [r3]
   13580:	cmp	r3, #0
   13584:	beq	13f70 <__assert_fail@plt+0x2b8c>
   13588:	mvn	r1, #0
   1358c:	movw	r0, #52296	; 0xcc48
   13590:	movt	r0, #1
   13594:	bl	11c2c <__assert_fail@plt+0x848>
   13598:	b	13684 <__assert_fail@plt+0x22a0>
   1359c:	cmp	r7, #0
   135a0:	ble	135dc <__assert_fail@plt+0x21f8>
   135a4:	mov	r1, r0
   135a8:	ldr	r0, [r6]
   135ac:	bl	11980 <__assert_fail@plt+0x59c>
   135b0:	cmp	r0, #0
   135b4:	beq	13f70 <__assert_fail@plt+0x2b8c>
   135b8:	ldr	r5, [r6]
   135bc:	ldr	r0, [r4]
   135c0:	bl	11300 <fileno@plt>
   135c4:	mov	r1, r0
   135c8:	mov	r0, r5
   135cc:	bl	11c2c <__assert_fail@plt+0x848>
   135d0:	mov	r3, #0
   135d4:	str	r3, [r4, #24]
   135d8:	b	13640 <__assert_fail@plt+0x225c>
   135dc:	mov	r2, #5
   135e0:	movw	r1, #52212	; 0xcbf4
   135e4:	movt	r1, #1
   135e8:	mov	r0, #0
   135ec:	bl	11168 <dcgettext@plt>
   135f0:	str	r0, [r4, #4]
   135f4:	movw	r3, #61920	; 0xf1e0
   135f8:	movt	r3, #2
   135fc:	ldr	r3, [r3]
   13600:	str	r3, [r4]
   13604:	movw	r3, #61936	; 0xf1f0
   13608:	movt	r3, #2
   1360c:	mov	r2, #1
   13610:	strb	r2, [r3, #37]	; 0x25
   13614:	mov	r5, #0
   13618:	str	r5, [r4, #8]
   1361c:	strb	r5, [r4, #37]	; 0x25
   13620:	ldr	r2, [r3, #40]	; 0x28
   13624:	add	r2, r2, #1
   13628:	str	r2, [r3, #40]	; 0x28
   1362c:	mvn	r1, #0
   13630:	movw	r0, #52296	; 0xcc48
   13634:	movt	r0, #1
   13638:	bl	11c2c <__assert_fail@plt+0x848>
   1363c:	str	r5, [r4, #24]
   13640:	ldr	r1, [r4, #4]
   13644:	ldr	r0, [r4]
   13648:	movw	r3, #61760	; 0xf140
   1364c:	movt	r3, #2
   13650:	ldr	r3, [r3]
   13654:	subs	r3, r3, #1
   13658:	beq	13684 <__assert_fail@plt+0x22a0>
   1365c:	add	r4, r4, #80	; 0x50
   13660:	mov	r2, #0
   13664:	str	r1, [r4, #-36]	; 0xffffffdc
   13668:	str	r0, [r4, #-40]	; 0xffffffd8
   1366c:	str	r2, [r4, #-32]	; 0xffffffe0
   13670:	strb	r2, [r4, #-3]
   13674:	str	r2, [r4, #-16]
   13678:	add	r4, r4, #40	; 0x28
   1367c:	subs	r3, r3, #1
   13680:	bne	13664 <__assert_fail@plt+0x2280>
   13684:	movw	r3, #61936	; 0xf1f0
   13688:	movt	r3, #2
   1368c:	ldr	r2, [r3, #40]	; 0x28
   13690:	str	r2, [r3, #8]
   13694:	movw	r3, #61760	; 0xf140
   13698:	movt	r3, #2
   1369c:	ldrb	r3, [r3, #4]
   136a0:	cmp	r3, #0
   136a4:	bne	13738 <__assert_fail@plt+0x2354>
   136a8:	movw	r3, #61936	; 0xf1f0
   136ac:	movt	r3, #2
   136b0:	ldrd	r2, [r3, #24]
   136b4:	strd	r2, [sp, #16]
   136b8:	cmp	r3, #0
   136bc:	cmpeq	r2, #1
   136c0:	bhi	13970 <__assert_fail@plt+0x258c>
   136c4:	movw	r3, #61936	; 0xf1f0
   136c8:	movt	r3, #2
   136cc:	mov	r0, #1
   136d0:	mov	r1, #0
   136d4:	strd	r0, [r3, #128]	; 0x80
   136d8:	movw	r3, #61936	; 0xf1f0
   136dc:	movt	r3, #2
   136e0:	ldr	r0, [r3, #120]	; 0x78
   136e4:	ldrb	r4, [r3, #60]	; 0x3c
   136e8:	cmp	r4, #0
   136ec:	moveq	ip, #0
   136f0:	beq	1399c <__assert_fail@plt+0x25b8>
   136f4:	movw	r3, #61936	; 0xf1f0
   136f8:	movt	r3, #2
   136fc:	ldrb	r3, [r3, #4]
   13700:	cmp	r3, #0
   13704:	beq	1398c <__assert_fail@plt+0x25a8>
   13708:	movw	r3, #61936	; 0xf1f0
   1370c:	movt	r3, #2
   13710:	ldrb	r3, [r3, #179]	; 0xb3
   13714:	cmp	r3, #0
   13718:	beq	1398c <__assert_fail@plt+0x25a8>
   1371c:	movw	r3, #61936	; 0xf1f0
   13720:	movt	r3, #2
   13724:	ldr	ip, [r3, #164]	; 0xa4
   13728:	add	ip, r0, ip
   1372c:	ldr	r3, [r3, #52]	; 0x34
   13730:	add	ip, ip, r3
   13734:	b	1399c <__assert_fail@plt+0x25b8>
   13738:	movw	r2, #61936	; 0xf1f0
   1373c:	movt	r2, #2
   13740:	movw	r3, #61760	; 0xf140
   13744:	movt	r3, #2
   13748:	ldr	r6, [r2, #172]	; 0xac
   1374c:	ldr	r3, [r3]
   13750:	smull	r6, r7, r6, r3
   13754:	cmp	r7, r6, asr #31
   13758:	bne	137e8 <__assert_fail@plt+0x2404>
   1375c:	mov	r3, #1
   13760:	adds	r8, r6, r3
   13764:	bvs	137e8 <__assert_fail@plt+0x2404>
   13768:	ldr	r4, [r2, #164]	; 0xa4
   1376c:	mov	r3, #1
   13770:	adds	r4, r4, r3
   13774:	bvs	137e8 <__assert_fail@plt+0x2404>
   13778:	smull	r4, r5, r6, r4
   1377c:	cmp	r5, r4, asr #31
   13780:	bne	137e8 <__assert_fail@plt+0x2404>
   13784:	movw	r9, #61936	; 0xf1f0
   13788:	movt	r9, #2
   1378c:	ldr	r0, [r9, #148]	; 0x94
   13790:	bl	158a0 <__assert_fail@plt+0x44bc>
   13794:	mov	r1, #4
   13798:	mov	r0, r8
   1379c:	bl	1a8ec <__assert_fail@plt+0x9508>
   137a0:	str	r0, [r9, #148]	; 0x94
   137a4:	ldr	r0, [r9, #156]	; 0x9c
   137a8:	bl	158a0 <__assert_fail@plt+0x44bc>
   137ac:	mov	r1, #4
   137b0:	mov	r0, r6
   137b4:	bl	1a8ec <__assert_fail@plt+0x9508>
   137b8:	str	r0, [r9, #156]	; 0x9c
   137bc:	ldr	r0, [r9, #20]
   137c0:	bl	158a0 <__assert_fail@plt+0x44bc>
   137c4:	ldrb	r1, [r9, #116]	; 0x74
   137c8:	add	r1, r1, #1
   137cc:	mov	r0, r4
   137d0:	bl	1a8ec <__assert_fail@plt+0x9508>
   137d4:	str	r0, [r9, #20]
   137d8:	ldrb	r3, [r9, #116]	; 0x74
   137dc:	mla	r4, r3, r4, r4
   137e0:	str	r4, [r9, #16]
   137e4:	b	136a8 <__assert_fail@plt+0x22c4>
   137e8:	bl	11720 <__assert_fail@plt+0x33c>
   137ec:	mov	r1, r4
   137f0:	mov	r0, r5
   137f4:	bl	11f3c <__assert_fail@plt+0xb58>
   137f8:	add	r4, r4, #1
   137fc:	add	r5, r5, #40	; 0x28
   13800:	ldr	r3, [r7]
   13804:	cmp	r4, r3
   13808:	bgt	1381c <__assert_fail@plt+0x2438>
   1380c:	ldr	r3, [r5, #8]
   13810:	cmp	r3, #0
   13814:	bne	137f8 <__assert_fail@plt+0x2414>
   13818:	b	137ec <__assert_fail@plt+0x2408>
   1381c:	add	sl, sl, #1
   13820:	ldr	r3, [r6, #172]	; 0xac
   13824:	cmp	sl, r3
   13828:	bge	138c0 <__assert_fail@plt+0x24dc>
   1382c:	ldr	r5, [r6]
   13830:	ldr	r3, [r7]
   13834:	cmp	r3, #0
   13838:	ble	1381c <__assert_fail@plt+0x2438>
   1383c:	mov	r4, #1
   13840:	b	1380c <__assert_fail@plt+0x2428>
   13844:	mov	r1, r5
   13848:	mov	r0, r4
   1384c:	bl	11f3c <__assert_fail@plt+0xb58>
   13850:	add	r5, r5, #1
   13854:	add	r4, r4, #40	; 0x28
   13858:	ldr	r2, [r7]
   1385c:	cmp	r5, r2
   13860:	bgt	13874 <__assert_fail@plt+0x2490>
   13864:	ldr	r3, [r4, #8]
   13868:	cmp	r3, #0
   1386c:	bne	13850 <__assert_fail@plt+0x246c>
   13870:	b	13844 <__assert_fail@plt+0x2460>
   13874:	ldrb	r3, [r7, #4]
   13878:	cmp	r3, #0
   1387c:	bne	138e0 <__assert_fail@plt+0x24fc>
   13880:	bl	115f0 <__assert_fail@plt+0x20c>
   13884:	mov	r3, #0
   13888:	strb	r3, [r6, #100]	; 0x64
   1388c:	ldr	r3, [r6, #8]
   13890:	cmp	r3, #0
   13894:	ble	13918 <__assert_fail@plt+0x2534>
   13898:	adds	r8, r8, #1
   1389c:	adc	r9, r9, #0
   138a0:	ldrd	r2, [sp, #16]
   138a4:	cmp	r3, r9
   138a8:	cmpeq	r2, r8
   138ac:	beq	1395c <__assert_fail@plt+0x2578>
   138b0:	ldr	r3, [r6, #172]	; 0xac
   138b4:	cmp	r3, #1
   138b8:	movgt	sl, #1
   138bc:	bgt	1382c <__assert_fail@plt+0x2448>
   138c0:	mov	r3, #1
   138c4:	strb	r3, [r6, #100]	; 0x64
   138c8:	ldr	r4, [r6]
   138cc:	ldr	r3, [r7]
   138d0:	cmp	r3, #0
   138d4:	ble	13880 <__assert_fail@plt+0x249c>
   138d8:	mov	r5, #1
   138dc:	b	13864 <__assert_fail@plt+0x2480>
   138e0:	ldr	r3, [r6]
   138e4:	cmp	r2, #0
   138e8:	ble	13880 <__assert_fail@plt+0x249c>
   138ec:	add	r2, r2, #1
   138f0:	mov	r1, #1
   138f4:	mov	ip, #2
   138f8:	ldr	r0, [r3, #8]
   138fc:	cmp	r0, #3
   13900:	strne	ip, [r3, #8]
   13904:	add	r1, r1, #1
   13908:	add	r3, r3, #40	; 0x28
   1390c:	cmp	r1, r2
   13910:	bne	138f8 <__assert_fail@plt+0x2514>
   13914:	b	13880 <__assert_fail@plt+0x249c>
   13918:	mov	r2, #5
   1391c:	movw	r1, #52340	; 0xcc74
   13920:	movt	r1, #1
   13924:	mov	r0, #0
   13928:	bl	11168 <dcgettext@plt>
   1392c:	strd	r8, [sp, #8]
   13930:	ldrd	r2, [sp, #16]
   13934:	strd	r2, [sp]
   13938:	mov	r2, r0
   1393c:	mov	r1, #0
   13940:	mov	r0, r1
   13944:	bl	11204 <error@plt>
   13948:	movw	r3, #61936	; 0xf1f0
   1394c:	movt	r3, #2
   13950:	ldr	r3, [r3, #8]
   13954:	cmp	r3, #0
   13958:	ble	13f70 <__assert_fail@plt+0x2b8c>
   1395c:	movw	r1, #61936	; 0xf1f0
   13960:	movt	r1, #2
   13964:	ldrd	r2, [r1, #24]
   13968:	strd	r2, [r1, #128]	; 0x80
   1396c:	b	136d8 <__assert_fail@plt+0x22f4>
   13970:	mov	r8, #1
   13974:	mov	r9, #0
   13978:	movw	r6, #61936	; 0xf1f0
   1397c:	movt	r6, #2
   13980:	movw	r7, #61760	; 0xf140
   13984:	movt	r7, #2
   13988:	b	138b0 <__assert_fail@plt+0x24cc>
   1398c:	movw	r3, #61936	; 0xf1f0
   13990:	movt	r3, #2
   13994:	ldr	ip, [r3, #164]	; 0xa4
   13998:	add	ip, r0, ip
   1399c:	movw	r3, #61936	; 0xf1f0
   139a0:	movt	r3, #2
   139a4:	ldr	fp, [r3, #32]
   139a8:	add	r0, r0, fp
   139ac:	ldr	r3, [r3]
   139b0:	movw	r2, #61760	; 0xf140
   139b4:	movt	r2, #2
   139b8:	ldr	lr, [r2]
   139bc:	cmp	lr, #1
   139c0:	ble	13ad4 <__assert_fail@plt+0x26f0>
   139c4:	movw	r2, #61760	; 0xf140
   139c8:	movt	r2, #2
   139cc:	ldrb	r6, [r2, #4]
   139d0:	movw	r2, #61936	; 0xf1f0
   139d4:	movt	r2, #2
   139d8:	ldrb	r5, [r2, #179]	; 0xb3
   139dc:	ldrb	r1, [r2, #4]
   139e0:	eor	r1, r1, #1
   139e4:	str	r1, [sp, #28]
   139e8:	ldr	r2, [r2, #164]	; 0xa4
   139ec:	str	r2, [sp, #16]
   139f0:	mov	r1, #1
   139f4:	movw	sl, #10652	; 0x299c
   139f8:	movt	sl, #1
   139fc:	movw	r9, #11328	; 0x2c40
   13a00:	movt	r9, #1
   13a04:	movw	r8, #5808	; 0x16b0
   13a08:	movt	r8, #1
   13a0c:	movw	r7, #10884	; 0x2a84
   13a10:	movt	r7, #1
   13a14:	mov	r2, #0
   13a18:	str	r2, [sp, #44]	; 0x2c
   13a1c:	b	13a38 <__assert_fail@plt+0x2654>
   13a20:	mov	ip, #0
   13a24:	ldr	r0, [sp, #44]	; 0x2c
   13a28:	add	r3, r3, #40	; 0x28
   13a2c:	add	r1, r1, #1
   13a30:	cmp	r1, lr
   13a34:	bge	13a88 <__assert_fail@plt+0x26a4>
   13a38:	cmp	r6, #0
   13a3c:	strne	r8, [r3, #16]
   13a40:	strne	r7, [r3, #12]
   13a44:	streq	sl, [r3, #16]
   13a48:	streq	r9, [r3, #12]
   13a4c:	cmp	r5, #0
   13a50:	moveq	r2, #0
   13a54:	beq	13a64 <__assert_fail@plt+0x2680>
   13a58:	ldr	r2, [sp, #28]
   13a5c:	cmp	r1, #1
   13a60:	orreq	r2, r2, #1
   13a64:	and	r2, r2, #1
   13a68:	strb	r2, [r3, #36]	; 0x24
   13a6c:	str	r0, [r3, #32]
   13a70:	cmp	r4, #0
   13a74:	beq	13a20 <__assert_fail@plt+0x263c>
   13a78:	add	r0, fp, ip
   13a7c:	ldr	r2, [sp, #16]
   13a80:	add	ip, r0, r2
   13a84:	b	13a28 <__assert_fail@plt+0x2644>
   13a88:	cmp	lr, #2
   13a8c:	movlt	lr, #2
   13a90:	movw	r2, #61760	; 0xf140
   13a94:	movt	r2, #2
   13a98:	ldrb	r2, [r2, #4]
   13a9c:	cmp	r2, #0
   13aa0:	beq	13adc <__assert_fail@plt+0x26f8>
   13aa4:	movw	r2, #61936	; 0xf1f0
   13aa8:	movt	r2, #2
   13aac:	ldrb	r2, [r2, #177]	; 0xb1
   13ab0:	cmp	r2, #0
   13ab4:	beq	13adc <__assert_fail@plt+0x26f8>
   13ab8:	movw	r2, #5808	; 0x16b0
   13abc:	movt	r2, #1
   13ac0:	str	r2, [r3, #16]
   13ac4:	movw	r2, #10884	; 0x2a84
   13ac8:	movt	r2, #1
   13acc:	str	r2, [r3, #12]
   13ad0:	b	13af4 <__assert_fail@plt+0x2710>
   13ad4:	mov	lr, #1
   13ad8:	b	13a90 <__assert_fail@plt+0x26ac>
   13adc:	movw	r2, #10652	; 0x299c
   13ae0:	movt	r2, #1
   13ae4:	str	r2, [r3, #16]
   13ae8:	movw	r2, #11328	; 0x2c40
   13aec:	movt	r2, #1
   13af0:	str	r2, [r3, #12]
   13af4:	movw	r2, #61936	; 0xf1f0
   13af8:	movt	r2, #2
   13afc:	ldrb	r2, [r2, #179]	; 0xb3
   13b00:	cmp	r2, #0
   13b04:	moveq	lr, #0
   13b08:	beq	13b28 <__assert_fail@plt+0x2744>
   13b0c:	movw	r2, #61936	; 0xf1f0
   13b10:	movt	r2, #2
   13b14:	ldrb	r2, [r2, #4]
   13b18:	eor	r2, r2, #1
   13b1c:	cmp	lr, #1
   13b20:	movne	lr, r2
   13b24:	orreq	lr, r2, #1
   13b28:	and	lr, lr, #1
   13b2c:	strb	lr, [r3, #36]	; 0x24
   13b30:	str	r0, [r3, #32]
   13b34:	movw	r3, #61936	; 0xf1f0
   13b38:	movt	r3, #2
   13b3c:	movw	r2, #61760	; 0xf140
   13b40:	movt	r2, #2
   13b44:	ldr	r2, [r2, #40]	; 0x28
   13b48:	str	r2, [r3, #48]	; 0x30
   13b4c:	movw	fp, #61760	; 0xf140
   13b50:	movt	fp, #2
   13b54:	mov	sl, r3
   13b58:	movw	r3, #61924	; 0xf1e4
   13b5c:	movt	r3, #2
   13b60:	str	r3, [sp, #16]
   13b64:	b	14124 <__assert_fail@plt+0x2d40>
   13b68:	mov	r3, #0
   13b6c:	str	r3, [sl, #12]
   13b70:	ldrb	r3, [sl, #177]	; 0xb1
   13b74:	cmp	r3, #0
   13b78:	ldr	r9, [fp]
   13b7c:	subeq	r9, r9, #1
   13b80:	ldr	r4, [sl]
   13b84:	cmp	r9, #0
   13b88:	ble	13cf0 <__assert_fail@plt+0x290c>
   13b8c:	add	r0, r9, #1
   13b90:	mov	r2, r4
   13b94:	mov	r3, #1
   13b98:	mov	r1, #0
   13b9c:	str	r1, [r2, #24]
   13ba0:	add	r3, r3, #1
   13ba4:	add	r2, r2, #40	; 0x28
   13ba8:	cmp	r3, r0
   13bac:	bne	13b9c <__assert_fail@plt+0x27b8>
   13bb0:	ldr	r3, [sl, #8]
   13bb4:	cmp	r3, #0
   13bb8:	moveq	r7, #0
   13bbc:	moveq	r5, r7
   13bc0:	beq	13c94 <__assert_fail@plt+0x28b0>
   13bc4:	mov	r7, #0
   13bc8:	mov	r8, #1
   13bcc:	mov	r5, r7
   13bd0:	b	13c78 <__assert_fail@plt+0x2894>
   13bd4:	mov	r0, r4
   13bd8:	bl	121f8 <__assert_fail@plt+0xe14>
   13bdc:	b	13c40 <__assert_fail@plt+0x285c>
   13be0:	ldr	r3, [r4, #24]
   13be4:	add	r3, r3, #1
   13be8:	str	r3, [r4, #24]
   13bec:	lsl	r3, r5, #2
   13bf0:	ldr	r2, [sl, #148]	; 0x94
   13bf4:	str	r7, [r2, r5, lsl #2]
   13bf8:	ldr	r2, [sl, #156]	; 0x9c
   13bfc:	ldr	r1, [sl, #64]	; 0x40
   13c00:	str	r1, [r2, r3]
   13c04:	add	r5, r5, #1
   13c08:	ldr	r7, [sl, #12]
   13c0c:	subs	r6, r6, #1
   13c10:	beq	13c5c <__assert_fail@plt+0x2878>
   13c14:	ldr	r3, [sl, #8]
   13c18:	cmp	r3, #0
   13c1c:	beq	13c94 <__assert_fail@plt+0x28b0>
   13c20:	ldr	r3, [r4, #8]
   13c24:	cmp	r3, #0
   13c28:	bne	13c0c <__assert_fail@plt+0x2828>
   13c2c:	str	r3, [sl, #64]	; 0x40
   13c30:	mov	r0, r4
   13c34:	bl	12c40 <__assert_fail@plt+0x185c>
   13c38:	cmp	r0, #0
   13c3c:	beq	13bd4 <__assert_fail@plt+0x27f0>
   13c40:	ldr	r3, [r4, #8]
   13c44:	cmp	r3, #0
   13c48:	beq	13be0 <__assert_fail@plt+0x27fc>
   13c4c:	ldr	r3, [sl, #12]
   13c50:	cmp	r3, r7
   13c54:	bne	13be0 <__assert_fail@plt+0x27fc>
   13c58:	b	13c0c <__assert_fail@plt+0x2828>
   13c5c:	add	r8, r8, #1
   13c60:	add	r4, r4, #40	; 0x28
   13c64:	cmp	r9, r8
   13c68:	blt	13c94 <__assert_fail@plt+0x28b0>
   13c6c:	ldr	r3, [sl, #8]
   13c70:	cmp	r3, #0
   13c74:	beq	13c94 <__assert_fail@plt+0x28b0>
   13c78:	str	r5, [r4, #20]
   13c7c:	ldr	r6, [sl, #172]	; 0xac
   13c80:	cmp	r6, #0
   13c84:	beq	13c5c <__assert_fail@plt+0x2878>
   13c88:	ldr	r3, [sl, #8]
   13c8c:	cmp	r3, #0
   13c90:	bne	13c20 <__assert_fail@plt+0x283c>
   13c94:	ldr	r3, [sl, #148]	; 0x94
   13c98:	str	r7, [r3, r5, lsl #2]
   13c9c:	ldrb	r7, [sl, #177]	; 0xb1
   13ca0:	cmp	r7, #0
   13ca4:	bne	13cfc <__assert_fail@plt+0x2918>
   13ca8:	ldr	r1, [fp]
   13cac:	ldr	ip, [sl]
   13cb0:	subs	r1, r1, #1
   13cb4:	beq	13d60 <__assert_fail@plt+0x297c>
   13cb8:	mov	r2, r1
   13cbc:	mov	r3, ip
   13cc0:	ldr	r0, [r3, #24]
   13cc4:	str	r0, [r3, #28]
   13cc8:	add	r3, r3, #40	; 0x28
   13ccc:	subs	r2, r2, #1
   13cd0:	bne	13cc0 <__assert_fail@plt+0x28dc>
   13cd4:	add	r1, r1, r1, lsl #2
   13cd8:	add	ip, ip, r1, lsl #3
   13cdc:	cmp	r7, #0
   13ce0:	beq	13d60 <__assert_fail@plt+0x297c>
   13ce4:	ldr	r3, [ip, #24]
   13ce8:	str	r3, [ip, #28]
   13cec:	b	14164 <__assert_fail@plt+0x2d80>
   13cf0:	mov	r7, #0
   13cf4:	mov	r5, r7
   13cf8:	b	13c94 <__assert_fail@plt+0x28b0>
   13cfc:	ldr	ip, [sl]
   13d00:	ldr	lr, [fp]
   13d04:	cmp	lr, #0
   13d08:	ble	13d50 <__assert_fail@plt+0x296c>
   13d0c:	sdiv	r4, r5, lr
   13d10:	mls	r5, lr, r4, r5
   13d14:	add	r6, r4, #1
   13d18:	add	lr, lr, #1
   13d1c:	mov	r2, ip
   13d20:	mov	r1, #0
   13d24:	mov	r3, #1
   13d28:	cmp	r5, r3
   13d2c:	movlt	r0, r4
   13d30:	movge	r0, r6
   13d34:	str	r0, [r2, #24]
   13d38:	str	r1, [r2, #20]
   13d3c:	add	r1, r1, r0
   13d40:	add	r3, r3, #1
   13d44:	add	r2, r2, #40	; 0x28
   13d48:	cmp	r3, lr
   13d4c:	bne	13d28 <__assert_fail@plt+0x2944>
   13d50:	ldr	r1, [fp]
   13d54:	subs	r1, r1, #1
   13d58:	bne	13cb8 <__assert_fail@plt+0x28d4>
   13d5c:	b	13ce4 <__assert_fail@plt+0x2900>
   13d60:	ldr	r3, [ip, #8]
   13d64:	cmp	r3, #0
   13d68:	ldreq	r3, [sl, #172]	; 0xac
   13d6c:	movne	r3, #0
   13d70:	str	r3, [ip, #28]
   13d74:	b	14164 <__assert_fail@plt+0x2d80>
   13d78:	ldr	r3, [r4, #8]
   13d7c:	cmp	r3, #1
   13d80:	beq	13de0 <__assert_fail@plt+0x29fc>
   13d84:	ldrb	r3, [sl, #4]
   13d88:	cmp	r3, #0
   13d8c:	beq	13da0 <__assert_fail@plt+0x29bc>
   13d90:	ldrb	r3, [sl, #169]	; 0xa9
   13d94:	cmp	r3, #0
   13d98:	strbne	r8, [sl, #168]	; 0xa8
   13d9c:	beq	13f8c <__assert_fail@plt+0x2ba8>
   13da0:	ldrb	r3, [sl, #116]	; 0x74
   13da4:	cmp	r3, #0
   13da8:	beq	13db8 <__assert_fail@plt+0x29d4>
   13dac:	ldr	r3, [sl, #108]	; 0x6c
   13db0:	add	r3, r3, #1
   13db4:	str	r3, [sl, #108]	; 0x6c
   13db8:	add	r6, r6, #1
   13dbc:	add	r4, r4, #40	; 0x28
   13dc0:	ldr	r3, [fp]
   13dc4:	cmp	r6, r3
   13dc8:	bgt	13f98 <__assert_fail@plt+0x2bb4>
   13dcc:	ldr	r3, [sp, #28]
   13dd0:	str	r3, [sl, #64]	; 0x40
   13dd4:	ldr	r3, [r4, #28]
   13dd8:	cmp	r3, #0
   13ddc:	ble	13d78 <__assert_fail@plt+0x2994>
   13de0:	mov	r3, #0
   13de4:	strb	r3, [sl, #160]	; 0xa0
   13de8:	ldr	r3, [r4, #32]
   13dec:	str	r3, [sl, #112]	; 0x70
   13df0:	ldr	r3, [r4, #12]
   13df4:	mov	r0, r4
   13df8:	blx	r3
   13dfc:	cmp	r0, #0
   13e00:	beq	13e70 <__assert_fail@plt+0x2a8c>
   13e04:	ldrb	r7, [sl, #152]	; 0x98
   13e08:	orr	r9, r7, r9
   13e0c:	ldr	r3, [r4, #28]
   13e10:	sub	r3, r3, #1
   13e14:	str	r3, [r4, #28]
   13e18:	cmp	r3, #0
   13e1c:	ble	13e7c <__assert_fail@plt+0x2a98>
   13e20:	ldrb	r3, [sl, #4]
   13e24:	cmp	r3, #0
   13e28:	beq	13da0 <__assert_fail@plt+0x29bc>
   13e2c:	ldr	r3, [r4, #8]
   13e30:	cmp	r3, #0
   13e34:	beq	13da0 <__assert_fail@plt+0x29bc>
   13e38:	ldrb	r2, [sl, #169]	; 0xa9
   13e3c:	cmp	r2, #0
   13e40:	strbne	r8, [sl, #168]	; 0xa8
   13e44:	bne	13da0 <__assert_fail@plt+0x29bc>
   13e48:	cmp	r3, #3
   13e4c:	beq	13e64 <__assert_fail@plt+0x2a80>
   13e50:	cmp	r3, #2
   13e54:	bne	13da0 <__assert_fail@plt+0x29bc>
   13e58:	ldrb	r3, [sl, #160]	; 0xa0
   13e5c:	cmp	r3, #0
   13e60:	beq	13da0 <__assert_fail@plt+0x29bc>
   13e64:	mov	r0, r4
   13e68:	bl	125a4 <__assert_fail@plt+0x11c0>
   13e6c:	b	13da0 <__assert_fail@plt+0x29bc>
   13e70:	mov	r0, r4
   13e74:	bl	121f8 <__assert_fail@plt+0xe14>
   13e78:	b	13e04 <__assert_fail@plt+0x2a20>
   13e7c:	bl	114e0 <__assert_fail@plt+0xfc>
   13e80:	cmp	r0, #0
   13e84:	bne	13e20 <__assert_fail@plt+0x2a3c>
   13e88:	cmp	r7, #0
   13e8c:	bne	13fa4 <__assert_fail@plt+0x2bc0>
   13e90:	ldrb	r3, [fp, #52]	; 0x34
   13e94:	cmp	r3, #0
   13e98:	bne	13fdc <__assert_fail@plt+0x2bf8>
   13e9c:	cmp	r5, #0
   13ea0:	bne	13ee0 <__assert_fail@plt+0x2afc>
   13ea4:	ldr	r3, [sl]
   13ea8:	ldr	r1, [fp]
   13eac:	cmp	r1, #0
   13eb0:	ble	13ee0 <__assert_fail@plt+0x2afc>
   13eb4:	add	r1, r1, #1
   13eb8:	mov	r2, #1
   13ebc:	mov	ip, r2
   13ec0:	ldr	r0, [r3, #8]
   13ec4:	cmp	r0, #0
   13ec8:	strbeq	ip, [r3, #37]	; 0x25
   13ecc:	add	r2, r2, #1
   13ed0:	add	r3, r3, #40	; 0x28
   13ed4:	cmp	r2, r1
   13ed8:	bne	13ec0 <__assert_fail@plt+0x2adc>
   13edc:	mov	r5, #0
   13ee0:	strb	r9, [sl, #152]	; 0x98
   13ee4:	cmp	r9, #0
   13ee8:	beq	13ef8 <__assert_fail@plt+0x2b14>
   13eec:	ldrb	r3, [fp, #52]	; 0x34
   13ef0:	cmp	r3, #0
   13ef4:	bne	1408c <__assert_fail@plt+0x2ca8>
   13ef8:	ldrb	r3, [sl, #101]	; 0x65
   13efc:	cmp	r3, #0
   13f00:	beq	13f40 <__assert_fail@plt+0x2b5c>
   13f04:	ldrb	r3, [sl, #102]	; 0x66
   13f08:	cmp	r3, #0
   13f0c:	beq	13f40 <__assert_fail@plt+0x2b5c>
   13f10:	ldr	r3, [sp, #16]
   13f14:	ldr	r0, [r3]
   13f18:	ldr	r3, [r0, #20]
   13f1c:	ldr	r2, [r0, #24]
   13f20:	cmp	r3, r2
   13f24:	addcc	r2, r3, #1
   13f28:	strcc	r2, [r0, #20]
   13f2c:	movcc	r2, #12
   13f30:	strbcc	r2, [r3]
   13f34:	bcs	14114 <__assert_fail@plt+0x2d30>
   13f38:	mov	r3, #0
   13f3c:	strb	r3, [sl, #102]	; 0x66
   13f40:	ldr	r3, [sl, #128]	; 0x80
   13f44:	ldr	r2, [sl, #132]	; 0x84
   13f48:	adds	r3, r3, #1
   13f4c:	str	r3, [sp, #32]
   13f50:	adc	r3, r2, #0
   13f54:	str	r3, [sp, #36]	; 0x24
   13f58:	ldrd	r0, [sp, #32]
   13f5c:	strd	r0, [sl, #128]	; 0x80
   13f60:	ldrd	r2, [fp, #8]
   13f64:	cmp	r1, r3
   13f68:	cmpeq	r0, r2
   13f6c:	bls	14120 <__assert_fail@plt+0x2d3c>
   13f70:	add	sp, sp, #52	; 0x34
   13f74:	ldrd	r4, [sp]
   13f78:	ldrd	r6, [sp, #8]
   13f7c:	ldrd	r8, [sp, #16]
   13f80:	ldrd	sl, [sp, #24]
   13f84:	add	sp, sp, #32
   13f88:	pop	{pc}		; (ldr pc, [sp], #4)
   13f8c:	mov	r0, r4
   13f90:	bl	125a4 <__assert_fail@plt+0x11c0>
   13f94:	b	13da0 <__assert_fail@plt+0x29bc>
   13f98:	ldrb	r3, [sl, #152]	; 0x98
   13f9c:	cmp	r3, #0
   13fa0:	beq	13fd0 <__assert_fail@plt+0x2bec>
   13fa4:	ldr	r3, [sp, #16]
   13fa8:	ldr	r0, [r3]
   13fac:	ldr	r3, [r0, #20]
   13fb0:	ldr	r2, [r0, #24]
   13fb4:	cmp	r3, r2
   13fb8:	addcc	r2, r3, #1
   13fbc:	strcc	r2, [r0, #20]
   13fc0:	movcc	r2, #10
   13fc4:	strbcc	r2, [r3]
   13fc8:	bcs	14040 <__assert_fail@plt+0x2c5c>
   13fcc:	sub	r5, r5, #1
   13fd0:	bl	114e0 <__assert_fail@plt+0xfc>
   13fd4:	cmp	r0, #0
   13fd8:	beq	13e90 <__assert_fail@plt+0x2aac>
   13fdc:	ldrb	r3, [sl, #176]	; 0xb0
   13fe0:	ands	r4, r9, r3
   13fe4:	bne	1404c <__assert_fail@plt+0x2c68>
   13fe8:	cmp	r5, #0
   13fec:	ble	13e9c <__assert_fail@plt+0x2ab8>
   13ff0:	bl	114e0 <__assert_fail@plt+0xfc>
   13ff4:	cmp	r0, #0
   13ff8:	beq	13e9c <__assert_fail@plt+0x2ab8>
   13ffc:	mov	r3, #0
   14000:	str	r3, [sl, #56]	; 0x38
   14004:	str	r3, [sl, #104]	; 0x68
   14008:	str	r3, [sl, #108]	; 0x6c
   1400c:	strb	r3, [sl, #152]	; 0x98
   14010:	strb	r3, [sl, #168]	; 0xa8
   14014:	mov	r3, #1
   14018:	strb	r3, [sl, #169]	; 0xa9
   1401c:	ldr	r4, [sl]
   14020:	ldr	r3, [fp]
   14024:	cmp	r3, #0
   14028:	ble	13fd0 <__assert_fail@plt+0x2bec>
   1402c:	mov	r6, #1
   14030:	mov	r3, #0
   14034:	str	r3, [sp, #28]
   14038:	mov	r8, r6
   1403c:	b	13dcc <__assert_fail@plt+0x29e8>
   14040:	mov	r1, #10
   14044:	bl	11348 <__overflow@plt>
   14048:	b	13fcc <__assert_fail@plt+0x2be8>
   1404c:	ldr	r3, [sp, #16]
   14050:	ldr	r0, [r3]
   14054:	ldr	r3, [r0, #20]
   14058:	ldr	r2, [r0, #24]
   1405c:	cmp	r3, r2
   14060:	addcc	r2, r3, #1
   14064:	strcc	r2, [r0, #20]
   14068:	movcc	r2, #10
   1406c:	strbcc	r2, [r3]
   14070:	bcs	14080 <__assert_fail@plt+0x2c9c>
   14074:	sub	r5, r5, #1
   14078:	mov	r9, r4
   1407c:	b	13fe8 <__assert_fail@plt+0x2c04>
   14080:	mov	r1, #10
   14084:	bl	11348 <__overflow@plt>
   14088:	b	14074 <__assert_fail@plt+0x2c90>
   1408c:	ldrb	r3, [sl, #180]	; 0xb4
   14090:	cmp	r3, #0
   14094:	bne	140d4 <__assert_fail@plt+0x2cf0>
   14098:	adds	r5, r5, #5
   1409c:	beq	13f40 <__assert_fail@plt+0x2b5c>
   140a0:	mov	r4, #10
   140a4:	ldr	r6, [sp, #16]
   140a8:	ldr	r0, [r6]
   140ac:	ldr	r3, [r0, #20]
   140b0:	ldr	r2, [r0, #24]
   140b4:	cmp	r3, r2
   140b8:	addcc	r2, r3, #1
   140bc:	strcc	r2, [r0, #20]
   140c0:	strbcc	r4, [r3]
   140c4:	bcs	14108 <__assert_fail@plt+0x2d24>
   140c8:	subs	r5, r5, #1
   140cc:	bne	140a8 <__assert_fail@plt+0x2cc4>
   140d0:	b	13f40 <__assert_fail@plt+0x2b5c>
   140d4:	ldr	r3, [sp, #16]
   140d8:	ldr	r0, [r3]
   140dc:	ldr	r3, [r0, #20]
   140e0:	ldr	r2, [r0, #24]
   140e4:	cmp	r3, r2
   140e8:	addcc	r2, r3, #1
   140ec:	strcc	r2, [r0, #20]
   140f0:	movcc	r2, #12
   140f4:	strbcc	r2, [r3]
   140f8:	bcc	13f40 <__assert_fail@plt+0x2b5c>
   140fc:	mov	r1, #12
   14100:	bl	11348 <__overflow@plt>
   14104:	b	13f40 <__assert_fail@plt+0x2b5c>
   14108:	mov	r1, r4
   1410c:	bl	11348 <__overflow@plt>
   14110:	b	140c8 <__assert_fail@plt+0x2ce4>
   14114:	mov	r1, #12
   14118:	bl	11348 <__overflow@plt>
   1411c:	b	13f38 <__assert_fail@plt+0x2b54>
   14120:	bl	115f0 <__assert_fail@plt+0x20c>
   14124:	ldrb	r3, [fp, #4]
   14128:	cmp	r3, #0
   1412c:	bne	13b68 <__assert_fail@plt+0x2784>
   14130:	ldr	r2, [fp]
   14134:	ldr	r3, [sl]
   14138:	cmp	r2, #0
   1413c:	beq	14164 <__assert_fail@plt+0x2d80>
   14140:	ldr	r0, [sl, #172]	; 0xac
   14144:	ldr	r1, [r3, #8]
   14148:	cmp	r1, #0
   1414c:	moveq	r1, r0
   14150:	movne	r1, #0
   14154:	str	r1, [r3, #28]
   14158:	add	r3, r3, #40	; 0x28
   1415c:	subs	r2, r2, #1
   14160:	bne	14144 <__assert_fail@plt+0x2d60>
   14164:	bl	114e0 <__assert_fail@plt+0xfc>
   14168:	cmp	r0, #0
   1416c:	beq	13f70 <__assert_fail@plt+0x2b8c>
   14170:	ldrb	r3, [fp, #52]	; 0x34
   14174:	cmp	r3, #0
   14178:	movne	r3, #1
   1417c:	strbne	r3, [sl, #136]	; 0x88
   14180:	mov	r3, #0
   14184:	strb	r3, [sl, #152]	; 0x98
   14188:	ldr	r5, [sl, #172]	; 0xac
   1418c:	ldrb	r3, [sl, #176]	; 0xb0
   14190:	cmp	r3, #0
   14194:	lslne	r5, r5, #1
   14198:	cmp	r5, #0
   1419c:	ldrgt	r9, [sp, #40]	; 0x28
   141a0:	bgt	13ff0 <__assert_fail@plt+0x2c0c>
   141a4:	cmp	r5, #0
   141a8:	bne	13ef8 <__assert_fail@plt+0x2b14>
   141ac:	ldr	r3, [sl]
   141b0:	ldr	r1, [fp]
   141b4:	cmp	r1, #0
   141b8:	ldrgt	r9, [sp, #40]	; 0x28
   141bc:	bgt	13eb4 <__assert_fail@plt+0x2ad0>
   141c0:	mov	r3, #0
   141c4:	strb	r3, [sl, #152]	; 0x98
   141c8:	b	13ef8 <__assert_fail@plt+0x2b14>
   141cc:	movw	r3, #61936	; 0xf1f0
   141d0:	movt	r3, #2
   141d4:	mov	r2, #0
   141d8:	str	r2, [r3, #164]	; 0xa4
   141dc:	mov	r2, #5
   141e0:	movw	r1, #52316	; 0xcc5c
   141e4:	movt	r1, #1
   141e8:	mov	r0, #0
   141ec:	bl	11168 <dcgettext@plt>
   141f0:	mov	r2, r0
   141f4:	mov	r1, #0
   141f8:	mov	r0, #1
   141fc:	bl	11204 <error@plt>
   14200:	push	{lr}		; (str lr, [sp, #-4]!)
   14204:	sub	sp, sp, #60	; 0x3c
   14208:	subs	r5, r0, #0
   1420c:	beq	14254 <__assert_fail@plt+0x2e70>
   14210:	movw	r3, #61912	; 0xf1d8
   14214:	movt	r3, #2
   14218:	ldr	r4, [r3]
   1421c:	mov	r2, #5
   14220:	movw	r1, #52396	; 0xccac
   14224:	movt	r1, #1
   14228:	mov	r0, #0
   1422c:	bl	11168 <dcgettext@plt>
   14230:	movw	r3, #62128	; 0xf2b0
   14234:	movt	r3, #2
   14238:	ldr	r3, [r3]
   1423c:	mov	r2, r0
   14240:	mov	r1, #1
   14244:	mov	r0, r4
   14248:	bl	1130c <__fprintf_chk@plt>
   1424c:	mov	r0, r5
   14250:	bl	11288 <exit@plt>
   14254:	mov	r2, #5
   14258:	movw	r1, #52436	; 0xccd4
   1425c:	movt	r1, #1
   14260:	mov	r0, #0
   14264:	bl	11168 <dcgettext@plt>
   14268:	movw	r3, #62128	; 0xf2b0
   1426c:	movt	r3, #2
   14270:	ldr	r2, [r3]
   14274:	mov	r1, r0
   14278:	mov	r0, #1
   1427c:	bl	112f4 <__printf_chk@plt>
   14280:	mov	r2, #5
   14284:	movw	r1, #52472	; 0xccf8
   14288:	movt	r1, #1
   1428c:	mov	r0, #0
   14290:	bl	11168 <dcgettext@plt>
   14294:	movw	r4, #61924	; 0xf1e4
   14298:	movt	r4, #2
   1429c:	ldr	r1, [r4]
   142a0:	bl	1109c <fputs_unlocked@plt>
   142a4:	mov	r2, #5
   142a8:	movw	r1, #52520	; 0xcd28
   142ac:	movt	r1, #1
   142b0:	mov	r0, #0
   142b4:	bl	11168 <dcgettext@plt>
   142b8:	ldr	r1, [r4]
   142bc:	bl	1109c <fputs_unlocked@plt>
   142c0:	mov	r2, #5
   142c4:	movw	r1, #52576	; 0xcd60
   142c8:	movt	r1, #1
   142cc:	mov	r0, #0
   142d0:	bl	11168 <dcgettext@plt>
   142d4:	ldr	r1, [r4]
   142d8:	bl	1109c <fputs_unlocked@plt>
   142dc:	mov	r2, #5
   142e0:	movw	r1, #52652	; 0xcdac
   142e4:	movt	r1, #1
   142e8:	mov	r0, #0
   142ec:	bl	11168 <dcgettext@plt>
   142f0:	ldr	r1, [r4]
   142f4:	bl	1109c <fputs_unlocked@plt>
   142f8:	mov	r2, #5
   142fc:	movw	r1, #52988	; 0xcefc
   14300:	movt	r1, #1
   14304:	mov	r0, #0
   14308:	bl	11168 <dcgettext@plt>
   1430c:	ldr	r1, [r4]
   14310:	bl	1109c <fputs_unlocked@plt>
   14314:	mov	r2, #5
   14318:	movw	r1, #53260	; 0xd00c
   1431c:	movt	r1, #1
   14320:	mov	r0, #0
   14324:	bl	11168 <dcgettext@plt>
   14328:	ldr	r1, [r4]
   1432c:	bl	1109c <fputs_unlocked@plt>
   14330:	mov	r2, #5
   14334:	movw	r1, #53660	; 0xd19c
   14338:	movt	r1, #1
   1433c:	mov	r0, #0
   14340:	bl	11168 <dcgettext@plt>
   14344:	ldr	r1, [r4]
   14348:	bl	1109c <fputs_unlocked@plt>
   1434c:	mov	r2, #5
   14350:	movw	r1, #54088	; 0xd348
   14354:	movt	r1, #1
   14358:	mov	r0, #0
   1435c:	bl	11168 <dcgettext@plt>
   14360:	ldr	r1, [r4]
   14364:	bl	1109c <fputs_unlocked@plt>
   14368:	mov	r2, #5
   1436c:	movw	r1, #54308	; 0xd424
   14370:	movt	r1, #1
   14374:	mov	r0, #0
   14378:	bl	11168 <dcgettext@plt>
   1437c:	ldr	r1, [r4]
   14380:	bl	1109c <fputs_unlocked@plt>
   14384:	mov	r2, #5
   14388:	movw	r1, #54452	; 0xd4b4
   1438c:	movt	r1, #1
   14390:	mov	r0, #0
   14394:	bl	11168 <dcgettext@plt>
   14398:	ldr	r1, [r4]
   1439c:	bl	1109c <fputs_unlocked@plt>
   143a0:	mov	r2, #5
   143a4:	movw	r1, #54800	; 0xd610
   143a8:	movt	r1, #1
   143ac:	mov	r0, #0
   143b0:	bl	11168 <dcgettext@plt>
   143b4:	ldr	r1, [r4]
   143b8:	bl	1109c <fputs_unlocked@plt>
   143bc:	mov	r2, #5
   143c0:	movw	r1, #55056	; 0xd710
   143c4:	movt	r1, #1
   143c8:	mov	r0, #0
   143cc:	bl	11168 <dcgettext@plt>
   143d0:	ldr	r1, [r4]
   143d4:	bl	1109c <fputs_unlocked@plt>
   143d8:	mov	r2, #5
   143dc:	movw	r1, #55384	; 0xd858
   143e0:	movt	r1, #1
   143e4:	mov	r0, #0
   143e8:	bl	11168 <dcgettext@plt>
   143ec:	ldr	r1, [r4]
   143f0:	bl	1109c <fputs_unlocked@plt>
   143f4:	mov	r2, #5
   143f8:	movw	r1, #55620	; 0xd944
   143fc:	movt	r1, #1
   14400:	mov	r0, #0
   14404:	bl	11168 <dcgettext@plt>
   14408:	ldr	r1, [r4]
   1440c:	bl	1109c <fputs_unlocked@plt>
   14410:	mov	r2, #5
   14414:	movw	r1, #55724	; 0xd9ac
   14418:	movt	r1, #1
   1441c:	mov	r0, #0
   14420:	bl	11168 <dcgettext@plt>
   14424:	ldr	r1, [r4]
   14428:	bl	1109c <fputs_unlocked@plt>
   1442c:	mov	r2, #5
   14430:	movw	r1, #56128	; 0xdb40
   14434:	movt	r1, #1
   14438:	mov	r0, #0
   1443c:	bl	11168 <dcgettext@plt>
   14440:	ldr	r1, [r4]
   14444:	bl	1109c <fputs_unlocked@plt>
   14448:	mov	r2, #5
   1444c:	movw	r1, #56344	; 0xdc18
   14450:	movt	r1, #1
   14454:	mov	r0, #0
   14458:	bl	11168 <dcgettext@plt>
   1445c:	ldr	r1, [r4]
   14460:	bl	1109c <fputs_unlocked@plt>
   14464:	mov	r2, #5
   14468:	movw	r1, #56392	; 0xdc48
   1446c:	movt	r1, #1
   14470:	mov	r0, #0
   14474:	bl	11168 <dcgettext@plt>
   14478:	ldr	r1, [r4]
   1447c:	bl	1109c <fputs_unlocked@plt>
   14480:	ldr	r0, [pc, #648]	; 14710 <__assert_fail@plt+0x332c>
   14484:	ldr	r1, [r0]
   14488:	ldr	r3, [r0, #4]
   1448c:	str	r1, [sp]
   14490:	str	r3, [sp, #4]
   14494:	ldrd	r2, [r0, #8]
   14498:	strd	r2, [sp, #8]
   1449c:	ldrd	r2, [r0, #16]
   144a0:	strd	r2, [sp, #16]
   144a4:	ldrd	r2, [r0, #24]
   144a8:	strd	r2, [sp, #24]
   144ac:	ldrd	r2, [r0, #32]
   144b0:	strd	r2, [sp, #32]
   144b4:	ldrd	r2, [r0, #40]	; 0x28
   144b8:	strd	r2, [sp, #40]	; 0x28
   144bc:	ldrd	r2, [r0, #48]	; 0x30
   144c0:	strd	r2, [sp, #48]	; 0x30
   144c4:	cmp	r1, #0
   144c8:	moveq	r4, sp
   144cc:	beq	144f8 <__assert_fail@plt+0x3114>
   144d0:	mov	r4, sp
   144d4:	movw	r6, #52392	; 0xcca8
   144d8:	movt	r6, #1
   144dc:	mov	r0, r6
   144e0:	bl	110c0 <strcmp@plt>
   144e4:	cmp	r0, #0
   144e8:	beq	144f8 <__assert_fail@plt+0x3114>
   144ec:	ldr	r1, [r4, #8]!
   144f0:	cmp	r1, #0
   144f4:	bne	144dc <__assert_fail@plt+0x30f8>
   144f8:	ldr	r4, [r4, #4]
   144fc:	cmp	r4, #0
   14500:	beq	1465c <__assert_fail@plt+0x3278>
   14504:	mov	r2, #5
   14508:	movw	r1, #56448	; 0xdc80
   1450c:	movt	r1, #1
   14510:	mov	r0, #0
   14514:	bl	11168 <dcgettext@plt>
   14518:	movw	r3, #56472	; 0xdc98
   1451c:	movt	r3, #1
   14520:	movw	r2, #56512	; 0xdcc0
   14524:	movt	r2, #1
   14528:	mov	r1, r0
   1452c:	mov	r0, #1
   14530:	bl	112f4 <__printf_chk@plt>
   14534:	mov	r1, #0
   14538:	mov	r0, #5
   1453c:	bl	11354 <setlocale@plt>
   14540:	cmp	r0, #0
   14544:	beq	14560 <__assert_fail@plt+0x317c>
   14548:	mov	r2, #3
   1454c:	movw	r1, #56528	; 0xdcd0
   14550:	movt	r1, #1
   14554:	bl	113c0 <strncmp@plt>
   14558:	cmp	r0, #0
   1455c:	bne	145dc <__assert_fail@plt+0x31f8>
   14560:	mov	r2, #5
   14564:	movw	r1, #56604	; 0xdd1c
   14568:	movt	r1, #1
   1456c:	mov	r0, #0
   14570:	bl	11168 <dcgettext@plt>
   14574:	movw	r6, #52392	; 0xcca8
   14578:	movt	r6, #1
   1457c:	mov	r3, r6
   14580:	movw	r2, #56472	; 0xdc98
   14584:	movt	r2, #1
   14588:	mov	r1, r0
   1458c:	mov	r0, #1
   14590:	bl	112f4 <__printf_chk@plt>
   14594:	mov	r2, #5
   14598:	movw	r1, #56632	; 0xdd38
   1459c:	movt	r1, #1
   145a0:	mov	r0, #0
   145a4:	bl	11168 <dcgettext@plt>
   145a8:	mov	r1, r0
   145ac:	movw	r2, #57280	; 0xdfc0
   145b0:	movt	r2, #1
   145b4:	movw	r3, #52296	; 0xcc48
   145b8:	movt	r3, #1
   145bc:	cmp	r4, r6
   145c0:	moveq	r3, r2
   145c4:	mov	r2, r4
   145c8:	mov	r0, #1
   145cc:	bl	112f4 <__printf_chk@plt>
   145d0:	b	1424c <__assert_fail@plt+0x2e68>
   145d4:	movw	r4, #52392	; 0xcca8
   145d8:	movt	r4, #1
   145dc:	mov	r2, #5
   145e0:	movw	r1, #56532	; 0xdcd4
   145e4:	movt	r1, #1
   145e8:	mov	r0, #0
   145ec:	bl	11168 <dcgettext@plt>
   145f0:	movw	r3, #61924	; 0xf1e4
   145f4:	movt	r3, #2
   145f8:	ldr	r1, [r3]
   145fc:	bl	1109c <fputs_unlocked@plt>
   14600:	b	14560 <__assert_fail@plt+0x317c>
   14604:	mov	r2, #5
   14608:	movw	r1, #56604	; 0xdd1c
   1460c:	movt	r1, #1
   14610:	mov	r0, #0
   14614:	bl	11168 <dcgettext@plt>
   14618:	movw	r4, #52392	; 0xcca8
   1461c:	movt	r4, #1
   14620:	mov	r3, r4
   14624:	movw	r2, #56472	; 0xdc98
   14628:	movt	r2, #1
   1462c:	mov	r1, r0
   14630:	mov	r0, #1
   14634:	bl	112f4 <__printf_chk@plt>
   14638:	mov	r2, #5
   1463c:	movw	r1, #56632	; 0xdd38
   14640:	movt	r1, #1
   14644:	mov	r0, #0
   14648:	bl	11168 <dcgettext@plt>
   1464c:	mov	r1, r0
   14650:	movw	r3, #57280	; 0xdfc0
   14654:	movt	r3, #1
   14658:	b	145c4 <__assert_fail@plt+0x31e0>
   1465c:	mov	r2, #5
   14660:	movw	r1, #56448	; 0xdc80
   14664:	movt	r1, #1
   14668:	mov	r0, #0
   1466c:	bl	11168 <dcgettext@plt>
   14670:	movw	r3, #56472	; 0xdc98
   14674:	movt	r3, #1
   14678:	movw	r2, #56512	; 0xdcc0
   1467c:	movt	r2, #1
   14680:	mov	r1, r0
   14684:	mov	r0, #1
   14688:	bl	112f4 <__printf_chk@plt>
   1468c:	mov	r1, #0
   14690:	mov	r0, #5
   14694:	bl	11354 <setlocale@plt>
   14698:	cmp	r0, #0
   1469c:	beq	14604 <__assert_fail@plt+0x3220>
   146a0:	mov	r2, #3
   146a4:	movw	r1, #56528	; 0xdcd0
   146a8:	movt	r1, #1
   146ac:	bl	113c0 <strncmp@plt>
   146b0:	cmp	r0, #0
   146b4:	bne	145d4 <__assert_fail@plt+0x31f0>
   146b8:	mov	r2, #5
   146bc:	movw	r1, #56604	; 0xdd1c
   146c0:	movt	r1, #1
   146c4:	mov	r0, #0
   146c8:	bl	11168 <dcgettext@plt>
   146cc:	movw	r4, #52392	; 0xcca8
   146d0:	movt	r4, #1
   146d4:	mov	r3, r4
   146d8:	movw	r2, #56472	; 0xdc98
   146dc:	movt	r2, #1
   146e0:	mov	r1, r0
   146e4:	mov	r0, #1
   146e8:	bl	112f4 <__printf_chk@plt>
   146ec:	mov	r2, #5
   146f0:	movw	r1, #56632	; 0xdd38
   146f4:	movt	r1, #1
   146f8:	mov	r0, #0
   146fc:	bl	11168 <dcgettext@plt>
   14700:	mov	r1, r0
   14704:	movw	r3, #57280	; 0xdfc0
   14708:	movt	r3, #1
   1470c:	b	145c4 <__assert_fail@plt+0x31e0>
   14710:	andeq	ip, r1, r0, asr fp
   14714:	strd	r4, [sp, #-20]!	; 0xffffffec
   14718:	strd	r6, [sp, #8]
   1471c:	str	lr, [sp, #16]
   14720:	sub	sp, sp, #20
   14724:	mov	r4, r0
   14728:	mov	r6, r1
   1472c:	mov	r5, r3
   14730:	ldrb	r3, [r0]
   14734:	sub	r1, r3, #48	; 0x30
   14738:	cmp	r1, #9
   1473c:	addhi	r4, r0, #1
   14740:	strbhi	r3, [r2]
   14744:	ldrb	r3, [r4]
   14748:	cmp	r3, #0
   1474c:	bne	14764 <__assert_fail@plt+0x3380>
   14750:	add	sp, sp, #20
   14754:	ldrd	r4, [sp]
   14758:	ldrd	r6, [sp, #8]
   1475c:	add	sp, sp, #16
   14760:	pop	{pc}		; (ldr pc, [sp], #4)
   14764:	movw	r3, #52296	; 0xcc48
   14768:	movt	r3, #1
   1476c:	str	r3, [sp]
   14770:	add	r3, sp, #12
   14774:	mov	r2, #10
   14778:	mov	r1, #0
   1477c:	mov	r0, r4
   14780:	bl	1b5e4 <__assert_fail@plt+0xa200>
   14784:	cmp	r0, #0
   14788:	bne	147a0 <__assert_fail@plt+0x33bc>
   1478c:	ldr	r3, [sp, #12]
   14790:	cmp	r3, #0
   14794:	ble	147a0 <__assert_fail@plt+0x33bc>
   14798:	str	r3, [r5]
   1479c:	b	14750 <__assert_fail@plt+0x336c>
   147a0:	bl	112c4 <__errno_location@plt>
   147a4:	ldr	r5, [r0]
   147a8:	mov	r2, #5
   147ac:	movw	r1, #56684	; 0xdd6c
   147b0:	movt	r1, #1
   147b4:	mov	r0, #0
   147b8:	bl	11168 <dcgettext@plt>
   147bc:	mov	r7, r0
   147c0:	mov	r0, r4
   147c4:	bl	19b54 <__assert_fail@plt+0x8770>
   147c8:	str	r0, [sp]
   147cc:	mov	r3, r6
   147d0:	mov	r2, r7
   147d4:	mov	r1, r5
   147d8:	mov	r0, #0
   147dc:	bl	11204 <error@plt>
   147e0:	mov	r0, #1
   147e4:	bl	14200 <__assert_fail@plt+0x2e1c>
   147e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147ec:	strd	r6, [sp, #8]
   147f0:	strd	r8, [sp, #16]
   147f4:	strd	sl, [sp, #24]
   147f8:	str	lr, [sp, #32]
   147fc:	sub	sp, sp, #68	; 0x44
   14800:	mov	r5, r0
   14804:	str	r0, [sp, #16]
   14808:	str	r1, [sp, #20]
   1480c:	mov	r3, #0
   14810:	str	r3, [sp, #60]	; 0x3c
   14814:	ldr	r0, [r1]
   14818:	bl	17858 <__assert_fail@plt+0x6474>
   1481c:	movw	r1, #52296	; 0xcc48
   14820:	movt	r1, #1
   14824:	mov	r0, #6
   14828:	bl	11354 <setlocale@plt>
   1482c:	movw	r4, #56516	; 0xdcc4
   14830:	movt	r4, #1
   14834:	movw	r1, #56780	; 0xddcc
   14838:	movt	r1, #1
   1483c:	mov	r0, r4
   14840:	bl	113a8 <bindtextdomain@plt>
   14844:	mov	r0, r4
   14848:	bl	1118c <textdomain@plt>
   1484c:	movw	r0, #21828	; 0x5544
   14850:	movt	r0, #1
   14854:	bl	1c97c <__assert_fail@plt+0xb598>
   14858:	cmp	r5, #1
   1485c:	movle	r3, #0
   14860:	strle	r3, [sp, #40]	; 0x28
   14864:	bgt	148ac <__assert_fail@plt+0x34c8>
   14868:	mov	r5, #0
   1486c:	mov	r8, r5
   14870:	str	r5, [sp, #36]	; 0x24
   14874:	str	r5, [sp, #32]
   14878:	str	r5, [sp, #28]
   1487c:	str	r5, [sp, #24]
   14880:	movw	r6, #51616	; 0xc9a0
   14884:	movt	r6, #1
   14888:	movw	r9, #61936	; 0xf1f0
   1488c:	movt	r9, #2
   14890:	movw	fp, #61928	; 0xf1e8
   14894:	movt	fp, #2
   14898:	movw	sl, #61760	; 0xf140
   1489c:	movt	sl, #2
   148a0:	add	r3, sl, #32
   148a4:	str	r3, [sp, #44]	; 0x2c
   148a8:	b	149e4 <__assert_fail@plt+0x3600>
   148ac:	mov	r1, #4
   148b0:	sub	r0, r5, #1
   148b4:	bl	1a8ec <__assert_fail@plt+0x9508>
   148b8:	str	r0, [sp, #40]	; 0x28
   148bc:	b	14868 <__assert_fail@plt+0x3484>
   148c0:	add	r7, r5, #1
   148c4:	ldr	r3, [sp, #60]	; 0x3c
   148c8:	cmp	r7, r3
   148cc:	bcs	148e4 <__assert_fail@plt+0x3500>
   148d0:	strb	r4, [r8, r5]
   148d4:	mov	r3, #0
   148d8:	strb	r3, [r8, r7]
   148dc:	mov	r5, r7
   148e0:	b	149e4 <__assert_fail@plt+0x3600>
   148e4:	add	r1, sp, #60	; 0x3c
   148e8:	mov	r0, r8
   148ec:	bl	1a99c <__assert_fail@plt+0x95b8>
   148f0:	mov	r8, r0
   148f4:	b	148d0 <__assert_fail@plt+0x34ec>
   148f8:	ldrd	r2, [r9, #24]
   148fc:	orrs	r3, r2, r3
   14900:	bne	14914 <__assert_fail@plt+0x3530>
   14904:	ldr	r2, [fp]
   14908:	ldrb	r3, [r2]
   1490c:	cmp	r3, #43	; 0x2b
   14910:	beq	14930 <__assert_fail@plt+0x354c>
   14914:	ldr	r3, [fp]
   14918:	ldr	r1, [sp, #40]	; 0x28
   1491c:	ldr	r2, [sp, #24]
   14920:	str	r3, [r1, r2, lsl #2]
   14924:	add	r3, r2, #1
   14928:	str	r3, [sp, #24]
   1492c:	b	149e0 <__assert_fail@plt+0x35fc>
   14930:	add	r2, r2, #1
   14934:	mov	r1, #43	; 0x2b
   14938:	mvn	r0, #1
   1493c:	bl	1174c <__assert_fail@plt+0x368>
   14940:	cmp	r0, #0
   14944:	bne	149e0 <__assert_fail@plt+0x35fc>
   14948:	b	14914 <__assert_fail@plt+0x3530>
   1494c:	ldr	r2, [fp]
   14950:	cmp	r2, #0
   14954:	beq	149a4 <__assert_fail@plt+0x35c0>
   14958:	mov	r1, #0
   1495c:	ldr	r0, [sp, #52]	; 0x34
   14960:	bl	1174c <__assert_fail@plt+0x368>
   14964:	cmp	r0, #0
   14968:	bne	149e0 <__assert_fail@plt+0x35fc>
   1496c:	mov	r2, #5
   14970:	movw	r1, #56856	; 0xde18
   14974:	movt	r1, #1
   14978:	bl	11168 <dcgettext@plt>
   1497c:	mov	r4, r0
   14980:	movw	r3, #61928	; 0xf1e8
   14984:	movt	r3, #2
   14988:	ldr	r0, [r3]
   1498c:	bl	19b54 <__assert_fail@plt+0x8770>
   14990:	mov	r3, r0
   14994:	mov	r2, r4
   14998:	mov	r1, #0
   1499c:	mov	r0, #1
   149a0:	bl	11204 <error@plt>
   149a4:	mov	r2, #5
   149a8:	movw	r1, #56804	; 0xdde4
   149ac:	movt	r1, #1
   149b0:	mov	r0, #0
   149b4:	bl	11168 <dcgettext@plt>
   149b8:	mov	r2, r0
   149bc:	mov	r1, #0
   149c0:	mov	r0, #1
   149c4:	bl	11204 <error@plt>
   149c8:	ldr	r0, [fp]
   149cc:	bl	1192c <__assert_fail@plt+0x548>
   149d0:	mov	r0, r8
   149d4:	bl	158a0 <__assert_fail@plt+0x44bc>
   149d8:	mov	r8, #0
   149dc:	str	r8, [sp, #60]	; 0x3c
   149e0:	mov	r5, #0
   149e4:	mvn	r3, #0
   149e8:	str	r3, [sp, #52]	; 0x34
   149ec:	add	r3, sp, #52	; 0x34
   149f0:	str	r3, [sp]
   149f4:	mov	r3, r6
   149f8:	add	r2, r6, #488	; 0x1e8
   149fc:	ldr	r1, [sp, #20]
   14a00:	ldr	r0, [sp, #16]
   14a04:	bl	11270 <getopt_long@plt>
   14a08:	mov	r4, r0
   14a0c:	cmn	r0, #1
   14a10:	beq	15180 <__assert_fail@plt+0x3d9c>
   14a14:	sub	r3, r0, #48	; 0x30
   14a18:	cmp	r3, #9
   14a1c:	bls	148c0 <__assert_fail@plt+0x34dc>
   14a20:	add	r4, r0, #3
   14a24:	cmp	r4, #260	; 0x104
   14a28:	ldrls	pc, [pc, r4, lsl #2]
   14a2c:	b	15168 <__assert_fail@plt+0x3d84>
   14a30:	andeq	r5, r1, r4, lsl r1
   14a34:	andeq	r5, r1, ip, lsl #2
   14a38:	andeq	r5, r1, r8, ror #2
   14a3c:	andeq	r5, r1, r8, ror #2
   14a40:	strdeq	r4, [r1], -r8
   14a44:	andeq	r5, r1, r8, ror #2
   14a48:	andeq	r5, r1, r8, ror #2
   14a4c:	andeq	r5, r1, r8, ror #2
   14a50:	andeq	r5, r1, r8, ror #2
   14a54:	andeq	r5, r1, r8, ror #2
   14a58:	andeq	r5, r1, r8, ror #2
   14a5c:	andeq	r5, r1, r8, ror #2
   14a60:	andeq	r5, r1, r8, ror #2
   14a64:	andeq	r5, r1, r8, ror #2
   14a68:	andeq	r5, r1, r8, ror #2
   14a6c:	andeq	r5, r1, r8, ror #2
   14a70:	andeq	r5, r1, r8, ror #2
   14a74:	andeq	r5, r1, r8, ror #2
   14a78:	andeq	r5, r1, r8, ror #2
   14a7c:	andeq	r5, r1, r8, ror #2
   14a80:	andeq	r5, r1, r8, ror #2
   14a84:	andeq	r5, r1, r8, ror #2
   14a88:	andeq	r5, r1, r8, ror #2
   14a8c:	andeq	r5, r1, r8, ror #2
   14a90:	andeq	r5, r1, r8, ror #2
   14a94:	andeq	r5, r1, r8, ror #2
   14a98:	andeq	r5, r1, r8, ror #2
   14a9c:	andeq	r5, r1, r8, ror #2
   14aa0:	andeq	r5, r1, r8, ror #2
   14aa4:	andeq	r5, r1, r8, ror #2
   14aa8:	andeq	r5, r1, r8, ror #2
   14aac:	andeq	r5, r1, r8, ror #2
   14ab0:	andeq	r5, r1, r8, ror #2
   14ab4:	andeq	r5, r1, r8, ror #2
   14ab8:	andeq	r5, r1, r8, ror #2
   14abc:	andeq	r5, r1, r8, ror #2
   14ac0:	andeq	r5, r1, r8, ror #2
   14ac4:	andeq	r5, r1, r8, ror #2
   14ac8:	andeq	r5, r1, r8, ror #2
   14acc:	andeq	r5, r1, r8, ror #2
   14ad0:	andeq	r5, r1, r8, ror #2
   14ad4:	andeq	r5, r1, r8, ror #2
   14ad8:	andeq	r5, r1, r8, ror #2
   14adc:	andeq	r5, r1, r8, ror #2
   14ae0:	andeq	r5, r1, r8, ror #2
   14ae4:	andeq	r5, r1, r8, ror #2
   14ae8:	andeq	r5, r1, r8, ror #2
   14aec:	andeq	r5, r1, r8, ror #2
   14af0:	andeq	r5, r1, r8, ror #2
   14af4:	andeq	r5, r1, r8, ror #2
   14af8:	andeq	r5, r1, r8, ror #2
   14afc:	andeq	r5, r1, r8, ror #2
   14b00:	andeq	r5, r1, r8, ror #2
   14b04:	andeq	r5, r1, r8, ror #2
   14b08:	andeq	r5, r1, r8, ror #2
   14b0c:	andeq	r5, r1, r8, ror #2
   14b10:	andeq	r5, r1, r8, ror #2
   14b14:	andeq	r5, r1, r8, ror #2
   14b18:	andeq	r5, r1, r8, ror #2
   14b1c:	andeq	r5, r1, r8, ror #2
   14b20:	andeq	r5, r1, r8, ror #2
   14b24:	andeq	r5, r1, r8, ror #2
   14b28:	andeq	r5, r1, r8, ror #2
   14b2c:	andeq	r5, r1, r8, ror #2
   14b30:	andeq	r5, r1, r8, ror #2
   14b34:	andeq	r5, r1, r8, ror #2
   14b38:	andeq	r5, r1, r8, ror #2
   14b3c:	andeq	r5, r1, r8, ror #2
   14b40:	andeq	r5, r1, r8, ror #2
   14b44:	andeq	r5, r1, r8, ror #2
   14b48:	andeq	r5, r1, r8, ror #2
   14b4c:	andeq	r4, r1, ip, ror lr
   14b50:	andeq	r5, r1, r8, ror #2
   14b54:			; <UNDEFINED> instruction: 0x00014eb0
   14b58:	andeq	r5, r1, r8, ror #2
   14b5c:	andeq	r5, r1, r8, ror #2
   14b60:	andeq	r5, r1, r8, ror #2
   14b64:	strdeq	r4, [r1], -r0
   14b68:	andeq	r5, r1, r8, ror #2
   14b6c:	andeq	r5, r1, r8, ror #2
   14b70:	andeq	r5, r1, r8, ror #2
   14b74:	andeq	r4, r1, r8, ror #30
   14b78:	andeq	r5, r1, r8, ror #2
   14b7c:	andeq	r5, r1, r8, ror #2
   14b80:	andeq	r5, r1, r8, ror #2
   14b84:	andeq	r5, r1, r8, ror #2
   14b88:	andeq	r5, r1, r0, lsl r0
   14b8c:	andeq	r5, r1, r4, rrx
   14b90:	andeq	r5, r1, r8, ror #2
   14b94:	andeq	r5, r1, r8, ror #2
   14b98:	andeq	r5, r1, ip, asr #1
   14b9c:	andeq	r5, r1, r8, ror #2
   14ba0:	andeq	r5, r1, r8, ror #2
   14ba4:	andeq	r5, r1, r8, ror #2
   14ba8:	andeq	r5, r1, r8, ror #2
   14bac:	andeq	r5, r1, r8, ror #2
   14bb0:	andeq	r5, r1, r8, ror #2
   14bb4:	andeq	r5, r1, r8, ror #2
   14bb8:	andeq	r5, r1, r8, ror #2
   14bbc:	andeq	r5, r1, r8, ror #2
   14bc0:	andeq	r4, r1, r4, asr #28
   14bc4:	andeq	r4, r1, r8, asr lr
   14bc8:	andeq	r4, r1, r4, ror #28
   14bcc:	andeq	r4, r1, r0, ror lr
   14bd0:	andeq	r4, r1, r8, lsl #29
   14bd4:			; <UNDEFINED> instruction: 0x00014eb0
   14bd8:	andeq	r5, r1, r8, ror #2
   14bdc:			; <UNDEFINED> instruction: 0x00014ebc
   14be0:	andeq	r4, r1, r8, asr #29
   14be4:	andeq	r5, r1, r8, ror #2
   14be8:	andeq	r5, r1, r8, ror #2
   14bec:	strdeq	r4, [r1], -ip
   14bf0:	andeq	r4, r1, ip, lsr #30
   14bf4:	andeq	r4, r1, r0, asr #30
   14bf8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14bfc:	andeq	r5, r1, r8, ror #2
   14c00:	andeq	r5, r1, r8, ror #2
   14c04:	andeq	r4, r1, ip, asr #31
   14c08:	ldrdeq	r4, [r1], -r8
   14c0c:	andeq	r5, r1, r0, asr r0
   14c10:	andeq	r5, r1, r8, ror #2
   14c14:	andeq	r5, r1, r4, ror r0
   14c18:	andeq	r5, r1, r0, lsl #1
   14c1c:	andeq	r5, r1, r8, ror #2
   14c20:	andeq	r5, r1, r8, ror #2
   14c24:	andeq	r5, r1, r8, ror #2
   14c28:	andeq	r5, r1, r8, ror #2
   14c2c:	andeq	r5, r1, r8, ror #2
   14c30:	andeq	r5, r1, r8, ror #2
   14c34:	andeq	r5, r1, r8, ror #2
   14c38:	andeq	r5, r1, r8, ror #2
   14c3c:	andeq	r5, r1, r8, ror #2
   14c40:	andeq	r5, r1, r8, ror #2
   14c44:	andeq	r5, r1, r8, ror #2
   14c48:	andeq	r5, r1, r8, ror #2
   14c4c:	andeq	r5, r1, r8, ror #2
   14c50:	andeq	r5, r1, r8, ror #2
   14c54:	andeq	r5, r1, r8, ror #2
   14c58:	andeq	r5, r1, r8, ror #2
   14c5c:	andeq	r5, r1, r8, ror #2
   14c60:	andeq	r5, r1, r8, ror #2
   14c64:	andeq	r5, r1, r8, ror #2
   14c68:	andeq	r5, r1, r8, ror #2
   14c6c:	andeq	r5, r1, r8, ror #2
   14c70:	andeq	r5, r1, r8, ror #2
   14c74:	andeq	r5, r1, r8, ror #2
   14c78:	andeq	r5, r1, r8, ror #2
   14c7c:	andeq	r5, r1, r8, ror #2
   14c80:	andeq	r5, r1, r8, ror #2
   14c84:	andeq	r5, r1, r8, ror #2
   14c88:	andeq	r5, r1, r8, ror #2
   14c8c:	andeq	r5, r1, r8, ror #2
   14c90:	andeq	r5, r1, r8, ror #2
   14c94:	andeq	r5, r1, r8, ror #2
   14c98:	andeq	r5, r1, r8, ror #2
   14c9c:	andeq	r5, r1, r8, ror #2
   14ca0:	andeq	r5, r1, r8, ror #2
   14ca4:	andeq	r5, r1, r8, ror #2
   14ca8:	andeq	r5, r1, r8, ror #2
   14cac:	andeq	r5, r1, r8, ror #2
   14cb0:	andeq	r5, r1, r8, ror #2
   14cb4:	andeq	r5, r1, r8, ror #2
   14cb8:	andeq	r5, r1, r8, ror #2
   14cbc:	andeq	r5, r1, r8, ror #2
   14cc0:	andeq	r5, r1, r8, ror #2
   14cc4:	andeq	r5, r1, r8, ror #2
   14cc8:	andeq	r5, r1, r8, ror #2
   14ccc:	andeq	r5, r1, r8, ror #2
   14cd0:	andeq	r5, r1, r8, ror #2
   14cd4:	andeq	r5, r1, r8, ror #2
   14cd8:	andeq	r5, r1, r8, ror #2
   14cdc:	andeq	r5, r1, r8, ror #2
   14ce0:	andeq	r5, r1, r8, ror #2
   14ce4:	andeq	r5, r1, r8, ror #2
   14ce8:	andeq	r5, r1, r8, ror #2
   14cec:	andeq	r5, r1, r8, ror #2
   14cf0:	andeq	r5, r1, r8, ror #2
   14cf4:	andeq	r5, r1, r8, ror #2
   14cf8:	andeq	r5, r1, r8, ror #2
   14cfc:	andeq	r5, r1, r8, ror #2
   14d00:	andeq	r5, r1, r8, ror #2
   14d04:	andeq	r5, r1, r8, ror #2
   14d08:	andeq	r5, r1, r8, ror #2
   14d0c:	andeq	r5, r1, r8, ror #2
   14d10:	andeq	r5, r1, r8, ror #2
   14d14:	andeq	r5, r1, r8, ror #2
   14d18:	andeq	r5, r1, r8, ror #2
   14d1c:	andeq	r5, r1, r8, ror #2
   14d20:	andeq	r5, r1, r8, ror #2
   14d24:	andeq	r5, r1, r8, ror #2
   14d28:	andeq	r5, r1, r8, ror #2
   14d2c:	andeq	r5, r1, r8, ror #2
   14d30:	andeq	r5, r1, r8, ror #2
   14d34:	andeq	r5, r1, r8, ror #2
   14d38:	andeq	r5, r1, r8, ror #2
   14d3c:	andeq	r5, r1, r8, ror #2
   14d40:	andeq	r5, r1, r8, ror #2
   14d44:	andeq	r5, r1, r8, ror #2
   14d48:	andeq	r5, r1, r8, ror #2
   14d4c:	andeq	r5, r1, r8, ror #2
   14d50:	andeq	r5, r1, r8, ror #2
   14d54:	andeq	r5, r1, r8, ror #2
   14d58:	andeq	r5, r1, r8, ror #2
   14d5c:	andeq	r5, r1, r8, ror #2
   14d60:	andeq	r5, r1, r8, ror #2
   14d64:	andeq	r5, r1, r8, ror #2
   14d68:	andeq	r5, r1, r8, ror #2
   14d6c:	andeq	r5, r1, r8, ror #2
   14d70:	andeq	r5, r1, r8, ror #2
   14d74:	andeq	r5, r1, r8, ror #2
   14d78:	andeq	r5, r1, r8, ror #2
   14d7c:	andeq	r5, r1, r8, ror #2
   14d80:	andeq	r5, r1, r8, ror #2
   14d84:	andeq	r5, r1, r8, ror #2
   14d88:	andeq	r5, r1, r8, ror #2
   14d8c:	andeq	r5, r1, r8, ror #2
   14d90:	andeq	r5, r1, r8, ror #2
   14d94:	andeq	r5, r1, r8, ror #2
   14d98:	andeq	r5, r1, r8, ror #2
   14d9c:	andeq	r5, r1, r8, ror #2
   14da0:	andeq	r5, r1, r8, ror #2
   14da4:	andeq	r5, r1, r8, ror #2
   14da8:	andeq	r5, r1, r8, ror #2
   14dac:	andeq	r5, r1, r8, ror #2
   14db0:	andeq	r5, r1, r8, ror #2
   14db4:	andeq	r5, r1, r8, ror #2
   14db8:	andeq	r5, r1, r8, ror #2
   14dbc:	andeq	r5, r1, r8, ror #2
   14dc0:	andeq	r5, r1, r8, ror #2
   14dc4:	andeq	r5, r1, r8, ror #2
   14dc8:	andeq	r5, r1, r8, ror #2
   14dcc:	andeq	r5, r1, r8, ror #2
   14dd0:	andeq	r5, r1, r8, ror #2
   14dd4:	andeq	r5, r1, r8, ror #2
   14dd8:	andeq	r5, r1, r8, ror #2
   14ddc:	andeq	r5, r1, r8, ror #2
   14de0:	andeq	r5, r1, r8, ror #2
   14de4:	andeq	r5, r1, r8, ror #2
   14de8:	andeq	r5, r1, r8, ror #2
   14dec:	andeq	r5, r1, r8, ror #2
   14df0:	andeq	r5, r1, r8, ror #2
   14df4:	andeq	r5, r1, r8, ror #2
   14df8:	andeq	r5, r1, r8, ror #2
   14dfc:	andeq	r5, r1, r8, ror #2
   14e00:	andeq	r5, r1, r8, ror #2
   14e04:	andeq	r5, r1, r8, ror #2
   14e08:	andeq	r5, r1, r8, ror #2
   14e0c:	andeq	r5, r1, r8, ror #2
   14e10:	andeq	r5, r1, r8, ror #2
   14e14:	andeq	r5, r1, r8, ror #2
   14e18:	andeq	r5, r1, r8, ror #2
   14e1c:	andeq	r5, r1, r8, ror #2
   14e20:	andeq	r5, r1, r8, ror #2
   14e24:	andeq	r5, r1, r8, ror #2
   14e28:	andeq	r5, r1, r8, ror #2
   14e2c:	andeq	r5, r1, r8, ror #2
   14e30:	andeq	r5, r1, r8, ror #2
   14e34:	andeq	r5, r1, r8, ror #2
   14e38:	andeq	r5, r1, r8, ror #2
   14e3c:	andeq	r4, r1, r8, asr #19
   14e40:	andeq	r4, r1, ip, asr #18
   14e44:	mov	r3, #1
   14e48:	strb	r3, [r9, #181]	; 0xb5
   14e4c:	mov	r3, #0
   14e50:	strb	r3, [sl, #4]
   14e54:	b	149e0 <__assert_fail@plt+0x35fc>
   14e58:	mov	r3, #1
   14e5c:	strb	r3, [r9, #177]	; 0xb1
   14e60:	b	149e0 <__assert_fail@plt+0x35fc>
   14e64:	mov	r3, #1
   14e68:	strb	r3, [r9, #146]	; 0x92
   14e6c:	b	149e0 <__assert_fail@plt+0x35fc>
   14e70:	mov	r3, #1
   14e74:	strb	r3, [r9, #176]	; 0xb0
   14e78:	b	149e0 <__assert_fail@plt+0x35fc>
   14e7c:	ldr	r3, [fp]
   14e80:	str	r3, [r9, #80]	; 0x50
   14e84:	b	149e0 <__assert_fail@plt+0x35fc>
   14e88:	ldr	r0, [fp]
   14e8c:	cmp	r0, #0
   14e90:	beq	14ea4 <__assert_fail@plt+0x3ac0>
   14e94:	add	r3, sl, #48	; 0x30
   14e98:	add	r2, sl, #45	; 0x2d
   14e9c:	mov	r1, #101	; 0x65
   14ea0:	bl	14714 <__assert_fail@plt+0x3330>
   14ea4:	mov	r3, #1
   14ea8:	strb	r3, [r9, #144]	; 0x90
   14eac:	b	149e0 <__assert_fail@plt+0x35fc>
   14eb0:	mov	r3, #1
   14eb4:	strb	r3, [r9, #180]	; 0xb4
   14eb8:	b	149e0 <__assert_fail@plt+0x35fc>
   14ebc:	ldr	r3, [fp]
   14ec0:	str	r3, [r9, #88]	; 0x58
   14ec4:	b	149e0 <__assert_fail@plt+0x35fc>
   14ec8:	ldr	r0, [fp]
   14ecc:	cmp	r0, #0
   14ed0:	beq	14ee4 <__assert_fail@plt+0x3b00>
   14ed4:	add	r3, sl, #28
   14ed8:	add	r2, sl, #44	; 0x2c
   14edc:	mov	r1, #105	; 0x69
   14ee0:	bl	14714 <__assert_fail@plt+0x3330>
   14ee4:	mov	r3, #1
   14ee8:	strb	r3, [r9, #103]	; 0x67
   14eec:	b	149e0 <__assert_fail@plt+0x35fc>
   14ef0:	mov	r3, #1
   14ef4:	strb	r3, [r9, #178]	; 0xb2
   14ef8:	b	149e0 <__assert_fail@plt+0x35fc>
   14efc:	ldr	r4, [fp]
   14f00:	mov	r2, #5
   14f04:	movw	r1, #56880	; 0xde30
   14f08:	movt	r1, #1
   14f0c:	mov	r0, #0
   14f10:	bl	11168 <dcgettext@plt>
   14f14:	mov	r3, r0
   14f18:	add	r2, sl, #56	; 0x38
   14f1c:	mov	r1, #1
   14f20:	mov	r0, r4
   14f24:	bl	118d8 <__assert_fail@plt+0x4f4>
   14f28:	b	149e0 <__assert_fail@plt+0x35fc>
   14f2c:	mov	r3, #1
   14f30:	strb	r3, [r9, #4]
   14f34:	mov	r3, #0
   14f38:	strb	r3, [sl, #4]
   14f3c:	b	149e0 <__assert_fail@plt+0x35fc>
   14f40:	mov	r3, #1
   14f44:	strb	r3, [r9, #179]	; 0xb3
   14f48:	ldr	r0, [fp]
   14f4c:	cmp	r0, #0
   14f50:	beq	149e0 <__assert_fail@plt+0x35fc>
   14f54:	add	r3, sl, #20
   14f58:	add	r2, sl, #24
   14f5c:	mov	r1, #110	; 0x6e
   14f60:	bl	14714 <__assert_fail@plt+0x3330>
   14f64:	b	149e0 <__assert_fail@plt+0x35fc>
   14f68:	mov	r0, #0
   14f6c:	strb	r0, [sl, #36]	; 0x24
   14f70:	ldr	r4, [fp]
   14f74:	mov	r2, #5
   14f78:	movw	r1, #56924	; 0xde5c
   14f7c:	movt	r1, #1
   14f80:	bl	11168 <dcgettext@plt>
   14f84:	mov	r3, r0
   14f88:	add	r2, sl, #60	; 0x3c
   14f8c:	mov	r1, #-2147483648	; 0x80000000
   14f90:	mov	r0, r4
   14f94:	bl	118d8 <__assert_fail@plt+0x4f4>
   14f98:	b	149e0 <__assert_fail@plt+0x35fc>
   14f9c:	ldr	r4, [fp]
   14fa0:	mov	r2, #5
   14fa4:	movw	r1, #56968	; 0xde88
   14fa8:	movt	r1, #1
   14fac:	mov	r0, #0
   14fb0:	bl	11168 <dcgettext@plt>
   14fb4:	mov	r3, r0
   14fb8:	add	r2, r9, #120	; 0x78
   14fbc:	mov	r1, #0
   14fc0:	mov	r0, r4
   14fc4:	bl	118d8 <__assert_fail@plt+0x4f4>
   14fc8:	b	149e0 <__assert_fail@plt+0x35fc>
   14fcc:	mov	r3, #1
   14fd0:	strb	r3, [r9, #39]	; 0x27
   14fd4:	b	149e0 <__assert_fail@plt+0x35fc>
   14fd8:	ldrb	r3, [r9, #116]	; 0x74
   14fdc:	str	r3, [sp, #28]
   14fe0:	cmp	r3, #0
   14fe4:	ldrne	r3, [sp, #28]
   14fe8:	strne	r3, [sp, #36]	; 0x24
   14fec:	bne	149e0 <__assert_fail@plt+0x35fc>
   14ff0:	ldr	r0, [fp]
   14ff4:	cmp	r0, #0
   14ff8:	beq	15170 <__assert_fail@plt+0x3d8c>
   14ffc:	bl	118a4 <__assert_fail@plt+0x4c0>
   15000:	mov	r3, #1
   15004:	str	r3, [sp, #36]	; 0x24
   15008:	str	r3, [sp, #28]
   1500c:	b	149e0 <__assert_fail@plt+0x35fc>
   15010:	movw	r3, #52296	; 0xcc48
   15014:	movt	r3, #1
   15018:	str	r3, [sl, #16]
   1501c:	mov	r3, #0
   15020:	str	r3, [r9, #32]
   15024:	mov	r3, #1
   15028:	strb	r3, [r9, #116]	; 0x74
   1502c:	ldr	r0, [fp]
   15030:	cmp	r0, #0
   15034:	moveq	r3, #0
   15038:	streq	r3, [sp, #36]	; 0x24
   1503c:	beq	149e0 <__assert_fail@plt+0x35fc>
   15040:	bl	118a4 <__assert_fail@plt+0x4c0>
   15044:	mov	r3, #0
   15048:	str	r3, [sp, #36]	; 0x24
   1504c:	b	149e0 <__assert_fail@plt+0x35fc>
   15050:	mov	r3, #0
   15054:	strb	r3, [sl, #52]	; 0x34
   15058:	mov	r3, #1
   1505c:	strb	r3, [r9, #101]	; 0x65
   15060:	b	149e0 <__assert_fail@plt+0x35fc>
   15064:	mov	r3, #0
   15068:	strb	r3, [sl, #52]	; 0x34
   1506c:	strb	r3, [r9, #101]	; 0x65
   15070:	b	149e0 <__assert_fail@plt+0x35fc>
   15074:	mov	r3, #1
   15078:	strb	r3, [r9, #145]	; 0x91
   1507c:	b	149e0 <__assert_fail@plt+0x35fc>
   15080:	ldr	r4, [fp]
   15084:	mov	r2, #5
   15088:	movw	r1, #57000	; 0xdea8
   1508c:	movt	r1, #1
   15090:	mov	r0, #0
   15094:	bl	11168 <dcgettext@plt>
   15098:	mov	r3, r0
   1509c:	add	r2, sp, #56	; 0x38
   150a0:	mov	r1, #1
   150a4:	mov	r0, r4
   150a8:	bl	118d8 <__assert_fail@plt+0x4f4>
   150ac:	ldrb	r3, [r9, #60]	; 0x3c
   150b0:	cmp	r3, #0
   150b4:	ldreq	r3, [sp, #56]	; 0x38
   150b8:	streq	r3, [sl, #32]
   150bc:	mov	r3, #1
   150c0:	str	r3, [sp, #32]
   150c4:	str	r3, [sp, #28]
   150c8:	b	149e0 <__assert_fail@plt+0x35fc>
   150cc:	mov	r4, #1
   150d0:	strb	r4, [r9, #60]	; 0x3c
   150d4:	ldr	r5, [fp]
   150d8:	mov	r2, #5
   150dc:	movw	r1, #57048	; 0xded8
   150e0:	movt	r1, #1
   150e4:	mov	r0, #0
   150e8:	bl	11168 <dcgettext@plt>
   150ec:	mov	r3, r0
   150f0:	ldr	r2, [sp, #44]	; 0x2c
   150f4:	mov	r1, r4
   150f8:	mov	r0, r5
   150fc:	bl	118d8 <__assert_fail@plt+0x4f4>
   15100:	mov	r3, #0
   15104:	str	r3, [sp, #32]
   15108:	b	149e0 <__assert_fail@plt+0x35fc>
   1510c:	mov	r0, #0
   15110:	bl	14200 <__assert_fail@plt+0x2e1c>
   15114:	movw	r3, #61824	; 0xf180
   15118:	movt	r3, #2
   1511c:	movw	r0, #61924	; 0xf1e4
   15120:	movt	r0, #2
   15124:	mov	r4, #0
   15128:	str	r4, [sp, #8]
   1512c:	movw	r2, #57096	; 0xdf08
   15130:	movt	r2, #1
   15134:	str	r2, [sp, #4]
   15138:	movw	r2, #57112	; 0xdf18
   1513c:	movt	r2, #1
   15140:	str	r2, [sp]
   15144:	ldr	r3, [r3]
   15148:	movw	r2, #56512	; 0xdcc0
   1514c:	movt	r2, #1
   15150:	movw	r1, #52392	; 0xcca8
   15154:	movt	r1, #1
   15158:	ldr	r0, [r0]
   1515c:	bl	1a694 <__assert_fail@plt+0x92b0>
   15160:	mov	r0, r4
   15164:	bl	11288 <exit@plt>
   15168:	mov	r0, #1
   1516c:	bl	14200 <__assert_fail@plt+0x2e1c>
   15170:	mov	r3, #1
   15174:	str	r3, [sp, #36]	; 0x24
   15178:	str	r3, [sp, #28]
   1517c:	b	149e0 <__assert_fail@plt+0x35fc>
   15180:	cmp	r8, #0
   15184:	beq	15198 <__assert_fail@plt+0x3db4>
   15188:	mov	r0, r8
   1518c:	bl	1192c <__assert_fail@plt+0x548>
   15190:	mov	r0, r8
   15194:	bl	158a0 <__assert_fail@plt+0x44bc>
   15198:	movw	r3, #61936	; 0xf1f0
   1519c:	movt	r3, #2
   151a0:	ldr	r3, [r3, #80]	; 0x50
   151a4:	cmp	r3, #0
   151a8:	beq	15284 <__assert_fail@plt+0x3ea0>
   151ac:	movw	r0, #57144	; 0xdf38
   151b0:	movt	r0, #1
   151b4:	bl	11210 <getenv@plt>
   151b8:	bl	19c70 <__assert_fail@plt+0x888c>
   151bc:	movw	r3, #61936	; 0xf1f0
   151c0:	movt	r3, #2
   151c4:	str	r0, [r3, #76]	; 0x4c
   151c8:	ldrd	r2, [r3, #24]
   151cc:	orrs	r3, r2, r3
   151d0:	bne	151e8 <__assert_fail@plt+0x3e04>
   151d4:	movw	r3, #61936	; 0xf1f0
   151d8:	movt	r3, #2
   151dc:	mov	r0, #1
   151e0:	mov	r1, #0
   151e4:	strd	r0, [r3, #24]
   151e8:	movw	r3, #61936	; 0xf1f0
   151ec:	movt	r3, #2
   151f0:	ldrb	ip, [r3, #4]
   151f4:	cmp	ip, #0
   151f8:	beq	15224 <__assert_fail@plt+0x3e40>
   151fc:	movw	r3, #61936	; 0xf1f0
   15200:	movt	r3, #2
   15204:	ldrb	r3, [r3, #36]	; 0x24
   15208:	cmp	r3, #0
   1520c:	bne	152d4 <__assert_fail@plt+0x3ef0>
   15210:	movw	r3, #61936	; 0xf1f0
   15214:	movt	r3, #2
   15218:	ldrb	r3, [r3, #181]	; 0xb5
   1521c:	cmp	r3, #0
   15220:	bne	152f8 <__assert_fail@plt+0x3f14>
   15224:	ldr	r3, [sp, #28]
   15228:	cmp	r3, #0
   1522c:	beq	1534c <__assert_fail@plt+0x3f68>
   15230:	ldr	r3, [sp, #32]
   15234:	cmp	r3, #0
   15238:	beq	15330 <__assert_fail@plt+0x3f4c>
   1523c:	cmp	ip, #0
   15240:	bne	15258 <__assert_fail@plt+0x3e74>
   15244:	movw	r3, #61936	; 0xf1f0
   15248:	movt	r3, #2
   1524c:	ldrb	r3, [r3, #36]	; 0x24
   15250:	cmp	r3, #0
   15254:	beq	1531c <__assert_fail@plt+0x3f38>
   15258:	movw	r3, #61936	; 0xf1f0
   1525c:	movt	r3, #2
   15260:	mov	r2, #1
   15264:	strb	r2, [r3, #60]	; 0x3c
   15268:	ldr	r3, [sp, #36]	; 0x24
   1526c:	cmp	r3, #0
   15270:	beq	1534c <__assert_fail@plt+0x3f68>
   15274:	movw	r3, #61936	; 0xf1f0
   15278:	movt	r3, #2
   1527c:	strb	r2, [r3, #116]	; 0x74
   15280:	b	1534c <__assert_fail@plt+0x3f68>
   15284:	movw	r0, #57128	; 0xdf28
   15288:	movt	r0, #1
   1528c:	bl	11210 <getenv@plt>
   15290:	cmp	r0, #0
   15294:	beq	152c8 <__assert_fail@plt+0x3ee4>
   15298:	mov	r0, #2
   1529c:	bl	15a14 <__assert_fail@plt+0x4630>
   152a0:	movw	r2, #56748	; 0xddac
   152a4:	movt	r2, #1
   152a8:	movw	r3, #56764	; 0xddbc
   152ac:	movt	r3, #1
   152b0:	cmp	r0, #0
   152b4:	movne	r2, r3
   152b8:	movw	r3, #61936	; 0xf1f0
   152bc:	movt	r3, #2
   152c0:	str	r2, [r3, #80]	; 0x50
   152c4:	b	151ac <__assert_fail@plt+0x3dc8>
   152c8:	movw	r2, #56764	; 0xddbc
   152cc:	movt	r2, #1
   152d0:	b	152b8 <__assert_fail@plt+0x3ed4>
   152d4:	mov	r2, #5
   152d8:	movw	r1, #57148	; 0xdf3c
   152dc:	movt	r1, #1
   152e0:	mov	r0, #0
   152e4:	bl	11168 <dcgettext@plt>
   152e8:	mov	r2, r0
   152ec:	mov	r1, #0
   152f0:	mov	r0, #1
   152f4:	bl	11204 <error@plt>
   152f8:	mov	r2, #5
   152fc:	movw	r1, #57208	; 0xdf78
   15300:	movt	r1, #1
   15304:	mov	r0, #0
   15308:	bl	11168 <dcgettext@plt>
   1530c:	mov	r2, r0
   15310:	mov	r1, #0
   15314:	mov	r0, #1
   15318:	bl	11204 <error@plt>
   1531c:	movw	r3, #61936	; 0xf1f0
   15320:	movt	r3, #2
   15324:	mov	r2, #1
   15328:	strb	r2, [r3, #178]	; 0xb2
   1532c:	b	1534c <__assert_fail@plt+0x3f68>
   15330:	movw	r3, #61936	; 0xf1f0
   15334:	movt	r3, #2
   15338:	ldrb	r3, [r3, #116]	; 0x74
   1533c:	eor	r3, r3, #1
   15340:	ldr	r2, [sp, #36]	; 0x24
   15344:	tst	r2, r3
   15348:	bne	1538c <__assert_fail@plt+0x3fa8>
   1534c:	movw	r3, #61904	; 0xf1d0
   15350:	movt	r3, #2
   15354:	ldr	r5, [r3]
   15358:	ldr	r3, [sp, #16]
   1535c:	cmp	r3, r5
   15360:	ble	1542c <__assert_fail@plt+0x4048>
   15364:	add	r2, r5, #1
   15368:	ldr	r3, [sp, #20]
   1536c:	add	r3, r3, r5, lsl #2
   15370:	ldr	r1, [sp, #40]	; 0x28
   15374:	ldr	r0, [sp, #24]
   15378:	add	r1, r1, r0, lsl #2
   1537c:	ldr	r4, [sp, #16]
   15380:	movw	lr, #61904	; 0xf1d0
   15384:	movt	lr, #2
   15388:	b	15400 <__assert_fail@plt+0x401c>
   1538c:	cmp	ip, #0
   15390:	bne	153a8 <__assert_fail@plt+0x3fc4>
   15394:	movw	r3, #61936	; 0xf1f0
   15398:	movt	r3, #2
   1539c:	ldrb	r3, [r3, #36]	; 0x24
   153a0:	cmp	r3, #0
   153a4:	beq	1534c <__assert_fail@plt+0x3f68>
   153a8:	movw	r3, #61936	; 0xf1f0
   153ac:	movt	r3, #2
   153b0:	ldrb	r3, [r3, #60]	; 0x3c
   153b4:	cmp	r3, #0
   153b8:	bne	153e8 <__assert_fail@plt+0x4004>
   153bc:	movw	r3, #61936	; 0xf1f0
   153c0:	movt	r3, #2
   153c4:	mov	r2, #1
   153c8:	strb	r2, [r3, #178]	; 0xb2
   153cc:	ldr	r3, [r3, #32]
   153d0:	cmp	r3, #0
   153d4:	ble	1534c <__assert_fail@plt+0x3f68>
   153d8:	movw	r3, #61936	; 0xf1f0
   153dc:	movt	r3, #2
   153e0:	strb	r2, [r3, #116]	; 0x74
   153e4:	b	1534c <__assert_fail@plt+0x3f68>
   153e8:	movw	r3, #61936	; 0xf1f0
   153ec:	movt	r3, #2
   153f0:	mov	r2, #1
   153f4:	strb	r2, [r3, #116]	; 0x74
   153f8:	b	1534c <__assert_fail@plt+0x3f68>
   153fc:	mov	r2, r0
   15400:	ldr	r0, [r3], #4
   15404:	str	r0, [r1], #4
   15408:	str	r2, [lr]
   1540c:	add	r0, r2, #1
   15410:	cmp	r2, r4
   15414:	bne	153fc <__assert_fail@plt+0x4018>
   15418:	ldr	r3, [sp, #16]
   1541c:	sub	r6, r3, r5
   15420:	ldr	r3, [sp, #24]
   15424:	add	r3, r3, r6
   15428:	str	r3, [sp, #24]
   1542c:	ldr	r3, [sp, #24]
   15430:	cmp	r3, #0
   15434:	beq	154d8 <__assert_fail@plt+0x40f4>
   15438:	cmp	ip, #0
   1543c:	bne	154e8 <__assert_fail@plt+0x4104>
   15440:	ldr	r3, [sp, #40]	; 0x28
   15444:	mov	r4, r3
   15448:	ldr	r2, [sp, #24]
   1544c:	add	r5, r3, r2, lsl #2
   15450:	mov	r6, #1
   15454:	mov	r1, r4
   15458:	mov	r0, r6
   1545c:	bl	13130 <__assert_fail@plt+0x1d4c>
   15460:	add	r4, r4, #4
   15464:	cmp	r4, r5
   15468:	bne	15454 <__assert_fail@plt+0x4070>
   1546c:	movw	r4, #61936	; 0xf1f0
   15470:	movt	r4, #2
   15474:	ldr	r0, [r4, #44]	; 0x2c
   15478:	bl	158a0 <__assert_fail@plt+0x44bc>
   1547c:	ldr	r0, [r4, #140]	; 0x8c
   15480:	bl	158a0 <__assert_fail@plt+0x44bc>
   15484:	ldr	r0, [r4]
   15488:	bl	158a0 <__assert_fail@plt+0x44bc>
   1548c:	ldr	r0, [r4, #148]	; 0x94
   15490:	bl	158a0 <__assert_fail@plt+0x44bc>
   15494:	ldr	r0, [r4, #156]	; 0x9c
   15498:	bl	158a0 <__assert_fail@plt+0x44bc>
   1549c:	ldr	r0, [r4, #20]
   154a0:	bl	158a0 <__assert_fail@plt+0x44bc>
   154a4:	ldrb	r3, [r4, #37]	; 0x25
   154a8:	cmp	r3, #0
   154ac:	beq	154c8 <__assert_fail@plt+0x40e4>
   154b0:	movw	r3, #61920	; 0xf1e0
   154b4:	movt	r3, #2
   154b8:	ldr	r0, [r3]
   154bc:	bl	156c4 <__assert_fail@plt+0x42e0>
   154c0:	cmn	r0, #1
   154c4:	beq	154f8 <__assert_fail@plt+0x4114>
   154c8:	movw	r3, #61936	; 0xf1f0
   154cc:	movt	r3, #2
   154d0:	ldrb	r0, [r3, #38]	; 0x26
   154d4:	bl	11288 <exit@plt>
   154d8:	mov	r1, #0
   154dc:	mov	r0, r1
   154e0:	bl	13130 <__assert_fail@plt+0x1d4c>
   154e4:	b	1546c <__assert_fail@plt+0x4088>
   154e8:	ldr	r1, [sp, #40]	; 0x28
   154ec:	ldr	r0, [sp, #24]
   154f0:	bl	13130 <__assert_fail@plt+0x1d4c>
   154f4:	b	1546c <__assert_fail@plt+0x4088>
   154f8:	bl	112c4 <__errno_location@plt>
   154fc:	ldr	r4, [r0]
   15500:	mov	r2, #5
   15504:	movw	r1, #52212	; 0xcbf4
   15508:	movt	r1, #1
   1550c:	mov	r0, #0
   15510:	bl	11168 <dcgettext@plt>
   15514:	mov	r2, r0
   15518:	mov	r1, r4
   1551c:	mov	r0, #1
   15520:	bl	11204 <error@plt>
   15524:	movw	r3, #62120	; 0xf2a8
   15528:	movt	r3, #2
   1552c:	str	r0, [r3]
   15530:	bx	lr
   15534:	movw	r3, #62120	; 0xf2a8
   15538:	movt	r3, #2
   1553c:	strb	r0, [r3, #4]
   15540:	bx	lr
   15544:	strd	r4, [sp, #-16]!
   15548:	str	r6, [sp, #8]
   1554c:	str	lr, [sp, #12]
   15550:	sub	sp, sp, #8
   15554:	movw	r3, #61924	; 0xf1e4
   15558:	movt	r3, #2
   1555c:	ldr	r0, [r3]
   15560:	bl	1c324 <__assert_fail@plt+0xaf40>
   15564:	cmp	r0, #0
   15568:	beq	15590 <__assert_fail@plt+0x41ac>
   1556c:	movw	r3, #62120	; 0xf2a8
   15570:	movt	r3, #2
   15574:	ldrb	r3, [r3, #4]
   15578:	cmp	r3, #0
   1557c:	beq	155bc <__assert_fail@plt+0x41d8>
   15580:	bl	112c4 <__errno_location@plt>
   15584:	ldr	r3, [r0]
   15588:	cmp	r3, #32
   1558c:	bne	155bc <__assert_fail@plt+0x41d8>
   15590:	movw	r3, #61912	; 0xf1d8
   15594:	movt	r3, #2
   15598:	ldr	r0, [r3]
   1559c:	bl	1c324 <__assert_fail@plt+0xaf40>
   155a0:	cmp	r0, #0
   155a4:	bne	15644 <__assert_fail@plt+0x4260>
   155a8:	add	sp, sp, #8
   155ac:	ldrd	r4, [sp]
   155b0:	ldr	r6, [sp, #8]
   155b4:	add	sp, sp, #12
   155b8:	pop	{pc}		; (ldr pc, [sp], #4)
   155bc:	mov	r2, #5
   155c0:	movw	r1, #57712	; 0xe170
   155c4:	movt	r1, #1
   155c8:	mov	r0, #0
   155cc:	bl	11168 <dcgettext@plt>
   155d0:	mov	r4, r0
   155d4:	movw	r3, #62120	; 0xf2a8
   155d8:	movt	r3, #2
   155dc:	ldr	r5, [r3]
   155e0:	cmp	r5, #0
   155e4:	beq	15624 <__assert_fail@plt+0x4240>
   155e8:	bl	112c4 <__errno_location@plt>
   155ec:	ldr	r6, [r0]
   155f0:	mov	r0, r5
   155f4:	bl	19950 <__assert_fail@plt+0x856c>
   155f8:	str	r4, [sp]
   155fc:	mov	r3, r0
   15600:	movw	r2, #57724	; 0xe17c
   15604:	movt	r2, #1
   15608:	mov	r1, r6
   1560c:	mov	r0, #0
   15610:	bl	11204 <error@plt>
   15614:	movw	r3, #61828	; 0xf184
   15618:	movt	r3, #2
   1561c:	ldr	r0, [r3]
   15620:	bl	11120 <_exit@plt>
   15624:	bl	112c4 <__errno_location@plt>
   15628:	mov	r3, r4
   1562c:	movw	r2, #57728	; 0xe180
   15630:	movt	r2, #1
   15634:	ldr	r1, [r0]
   15638:	mov	r0, #0
   1563c:	bl	11204 <error@plt>
   15640:	b	15614 <__assert_fail@plt+0x4230>
   15644:	movw	r3, #61828	; 0xf184
   15648:	movt	r3, #2
   1564c:	ldr	r0, [r3]
   15650:	bl	11120 <_exit@plt>
   15654:	strd	r4, [sp, #-12]!
   15658:	str	lr, [sp, #8]
   1565c:	sub	sp, sp, #20
   15660:	ldr	r1, [sp, #40]	; 0x28
   15664:	str	r1, [sp, #8]
   15668:	ldrd	r4, [sp, #32]
   1566c:	strd	r4, [sp]
   15670:	bl	110d8 <posix_fadvise64@plt>
   15674:	add	sp, sp, #20
   15678:	ldrd	r4, [sp]
   1567c:	add	sp, sp, #8
   15680:	pop	{pc}		; (ldr pc, [sp], #4)
   15684:	cmp	r0, #0
   15688:	bxeq	lr
   1568c:	str	r4, [sp, #-8]!
   15690:	str	lr, [sp, #4]
   15694:	sub	sp, sp, #16
   15698:	mov	r4, r1
   1569c:	bl	11300 <fileno@plt>
   156a0:	str	r4, [sp, #8]
   156a4:	mov	r2, #0
   156a8:	mov	r3, #0
   156ac:	strd	r2, [sp]
   156b0:	bl	110d8 <posix_fadvise64@plt>
   156b4:	add	sp, sp, #16
   156b8:	ldr	r4, [sp]
   156bc:	add	sp, sp, #4
   156c0:	pop	{pc}		; (ldr pc, [sp], #4)
   156c4:	strd	r4, [sp, #-16]!
   156c8:	str	r6, [sp, #8]
   156cc:	str	lr, [sp, #12]
   156d0:	sub	sp, sp, #8
   156d4:	mov	r4, r0
   156d8:	bl	11300 <fileno@plt>
   156dc:	cmp	r0, #0
   156e0:	blt	15758 <__assert_fail@plt+0x4374>
   156e4:	mov	r0, r4
   156e8:	bl	11240 <__freading@plt>
   156ec:	cmp	r0, #0
   156f0:	beq	15724 <__assert_fail@plt+0x4340>
   156f4:	mov	r0, r4
   156f8:	bl	11300 <fileno@plt>
   156fc:	mov	r3, #1
   15700:	str	r3, [sp]
   15704:	mov	r2, #0
   15708:	mov	r3, #0
   1570c:	bl	111d4 <lseek64@plt>
   15710:	mvn	r2, #0
   15714:	mvn	r3, #0
   15718:	cmp	r1, r3
   1571c:	cmpeq	r0, r2
   15720:	beq	15764 <__assert_fail@plt+0x4380>
   15724:	mov	r0, r4
   15728:	bl	15780 <__assert_fail@plt+0x439c>
   1572c:	cmp	r0, #0
   15730:	beq	15764 <__assert_fail@plt+0x4380>
   15734:	bl	112c4 <__errno_location@plt>
   15738:	mov	r5, r0
   1573c:	ldr	r6, [r0]
   15740:	mov	r0, r4
   15744:	bl	11318 <fclose@plt>
   15748:	cmp	r6, #0
   1574c:	strne	r6, [r5]
   15750:	mvnne	r0, #0
   15754:	b	1576c <__assert_fail@plt+0x4388>
   15758:	mov	r0, r4
   1575c:	bl	11318 <fclose@plt>
   15760:	b	1576c <__assert_fail@plt+0x4388>
   15764:	mov	r0, r4
   15768:	bl	11318 <fclose@plt>
   1576c:	add	sp, sp, #8
   15770:	ldrd	r4, [sp]
   15774:	ldr	r6, [sp, #8]
   15778:	add	sp, sp, #12
   1577c:	pop	{pc}		; (ldr pc, [sp], #4)
   15780:	str	r4, [sp, #-8]!
   15784:	str	lr, [sp, #4]
   15788:	sub	sp, sp, #8
   1578c:	subs	r4, r0, #0
   15790:	beq	157a4 <__assert_fail@plt+0x43c0>
   15794:	mov	r0, r4
   15798:	bl	11240 <__freading@plt>
   1579c:	cmp	r0, #0
   157a0:	bne	157bc <__assert_fail@plt+0x43d8>
   157a4:	mov	r0, r4
   157a8:	bl	110f0 <fflush@plt>
   157ac:	add	sp, sp, #8
   157b0:	ldr	r4, [sp]
   157b4:	add	sp, sp, #4
   157b8:	pop	{pc}		; (ldr pc, [sp], #4)
   157bc:	ldr	r3, [r4]
   157c0:	tst	r3, #256	; 0x100
   157c4:	bne	157d4 <__assert_fail@plt+0x43f0>
   157c8:	mov	r0, r4
   157cc:	bl	110f0 <fflush@plt>
   157d0:	b	157ac <__assert_fail@plt+0x43c8>
   157d4:	mov	r3, #1
   157d8:	str	r3, [sp]
   157dc:	mov	r2, #0
   157e0:	mov	r3, #0
   157e4:	mov	r0, r4
   157e8:	bl	15900 <__assert_fail@plt+0x451c>
   157ec:	b	157c8 <__assert_fail@plt+0x43e4>
   157f0:	strd	r4, [sp, #-16]!
   157f4:	str	r6, [sp, #8]
   157f8:	str	lr, [sp, #12]
   157fc:	mov	r5, r1
   15800:	bl	1139c <fopen64@plt>
   15804:	subs	r4, r0, #0
   15808:	beq	1581c <__assert_fail@plt+0x4438>
   1580c:	mov	r0, r4
   15810:	bl	11300 <fileno@plt>
   15814:	cmp	r0, #2
   15818:	bls	15830 <__assert_fail@plt+0x444c>
   1581c:	mov	r0, r4
   15820:	ldrd	r4, [sp]
   15824:	ldr	r6, [sp, #8]
   15828:	add	sp, sp, #12
   1582c:	pop	{pc}		; (ldr pc, [sp], #4)
   15830:	bl	1a198 <__assert_fail@plt+0x8db4>
   15834:	subs	r6, r0, #0
   15838:	blt	15880 <__assert_fail@plt+0x449c>
   1583c:	mov	r0, r4
   15840:	bl	156c4 <__assert_fail@plt+0x42e0>
   15844:	cmp	r0, #0
   15848:	bne	15860 <__assert_fail@plt+0x447c>
   1584c:	mov	r1, r5
   15850:	mov	r0, r6
   15854:	bl	11084 <fdopen@plt>
   15858:	subs	r4, r0, #0
   1585c:	bne	1581c <__assert_fail@plt+0x4438>
   15860:	bl	112c4 <__errno_location@plt>
   15864:	mov	r4, r0
   15868:	ldr	r5, [r0]
   1586c:	mov	r0, r6
   15870:	bl	113d8 <close@plt>
   15874:	str	r5, [r4]
   15878:	mov	r4, #0
   1587c:	b	1581c <__assert_fail@plt+0x4438>
   15880:	bl	112c4 <__errno_location@plt>
   15884:	mov	r5, r0
   15888:	ldr	r6, [r0]
   1588c:	mov	r0, r4
   15890:	bl	156c4 <__assert_fail@plt+0x42e0>
   15894:	str	r6, [r5]
   15898:	mov	r4, #0
   1589c:	b	1581c <__assert_fail@plt+0x4438>
   158a0:	strd	r4, [sp, #-12]!
   158a4:	str	lr, [sp, #8]
   158a8:	sub	sp, sp, #12
   158ac:	mov	r5, r0
   158b0:	bl	112c4 <__errno_location@plt>
   158b4:	mov	r4, r0
   158b8:	ldr	r3, [r0]
   158bc:	str	r3, [sp]
   158c0:	str	r3, [sp, #4]
   158c4:	mov	r3, #0
   158c8:	str	r3, [r0]
   158cc:	mov	r0, r5
   158d0:	bl	11108 <free@plt>
   158d4:	ldr	r3, [r4]
   158d8:	clz	r3, r3
   158dc:	lsr	r3, r3, #5
   158e0:	add	r2, sp, #8
   158e4:	add	r3, r2, r3, lsl #2
   158e8:	ldr	r3, [r3, #-8]
   158ec:	str	r3, [r4]
   158f0:	add	sp, sp, #12
   158f4:	ldrd	r4, [sp]
   158f8:	add	sp, sp, #8
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	str	r4, [sp, #-16]!
   15904:	strd	r6, [sp, #4]
   15908:	str	lr, [sp, #12]
   1590c:	sub	sp, sp, #8
   15910:	mov	r4, r0
   15914:	mov	r6, r2
   15918:	mov	r7, r3
   1591c:	ldr	r2, [r0, #8]
   15920:	ldr	r3, [r0, #4]
   15924:	cmp	r2, r3
   15928:	beq	15958 <__assert_fail@plt+0x4574>
   1592c:	ldr	r3, [sp, #24]
   15930:	str	r3, [sp]
   15934:	mov	r2, r6
   15938:	mov	r3, r7
   1593c:	mov	r0, r4
   15940:	bl	11324 <fseeko64@plt>
   15944:	add	sp, sp, #8
   15948:	ldr	r4, [sp]
   1594c:	ldrd	r6, [sp, #4]
   15950:	add	sp, sp, #12
   15954:	pop	{pc}		; (ldr pc, [sp], #4)
   15958:	ldr	r2, [r0, #20]
   1595c:	ldr	r3, [r0, #16]
   15960:	cmp	r2, r3
   15964:	bne	1592c <__assert_fail@plt+0x4548>
   15968:	ldr	r3, [r0, #36]	; 0x24
   1596c:	cmp	r3, #0
   15970:	bne	1592c <__assert_fail@plt+0x4548>
   15974:	bl	11300 <fileno@plt>
   15978:	ldr	r3, [sp, #24]
   1597c:	str	r3, [sp]
   15980:	mov	r2, r6
   15984:	mov	r3, r7
   15988:	bl	111d4 <lseek64@plt>
   1598c:	mvn	r2, #0
   15990:	mvn	r3, #0
   15994:	cmp	r1, r3
   15998:	cmpeq	r0, r2
   1599c:	beq	159b8 <__assert_fail@plt+0x45d4>
   159a0:	ldr	r3, [r4]
   159a4:	bic	r3, r3, #16
   159a8:	str	r3, [r4]
   159ac:	strd	r0, [r4, #80]	; 0x50
   159b0:	mov	r0, #0
   159b4:	b	15944 <__assert_fail@plt+0x4560>
   159b8:	mvn	r0, #0
   159bc:	b	15944 <__assert_fail@plt+0x4560>
   159c0:	str	r4, [sp, #-8]!
   159c4:	str	lr, [sp, #4]
   159c8:	mov	r1, r0
   159cc:	mov	r0, #0
   159d0:	bl	11114 <clock_gettime@plt>
   159d4:	ldr	r4, [sp]
   159d8:	add	sp, sp, #4
   159dc:	pop	{pc}		; (ldr pc, [sp], #4)
   159e0:	str	r4, [sp, #-8]!
   159e4:	str	lr, [sp, #4]
   159e8:	sub	sp, sp, #8
   159ec:	mov	r4, r0
   159f0:	mov	r0, sp
   159f4:	bl	159c0 <__assert_fail@plt+0x45dc>
   159f8:	ldrd	r2, [sp]
   159fc:	strd	r2, [r4]
   15a00:	mov	r0, r4
   15a04:	add	sp, sp, #8
   15a08:	ldr	r4, [sp]
   15a0c:	add	sp, sp, #4
   15a10:	pop	{pc}		; (ldr pc, [sp], #4)
   15a14:	push	{lr}		; (str lr, [sp, #-4]!)
   15a18:	sub	sp, sp, #268	; 0x10c
   15a1c:	movw	r2, #257	; 0x101
   15a20:	add	r1, sp, #4
   15a24:	bl	19b74 <__assert_fail@plt+0x8790>
   15a28:	cmp	r0, #0
   15a2c:	movne	r0, #0
   15a30:	bne	15a68 <__assert_fail@plt+0x4684>
   15a34:	movw	r1, #57732	; 0xe184
   15a38:	movt	r1, #1
   15a3c:	add	r0, sp, #4
   15a40:	bl	110c0 <strcmp@plt>
   15a44:	cmp	r0, #0
   15a48:	beq	15a64 <__assert_fail@plt+0x4680>
   15a4c:	movw	r1, #57736	; 0xe188
   15a50:	movt	r1, #1
   15a54:	add	r0, sp, #4
   15a58:	bl	110c0 <strcmp@plt>
   15a5c:	adds	r0, r0, #0
   15a60:	movne	r0, #1
   15a64:	and	r0, r0, #1
   15a68:	add	sp, sp, #268	; 0x10c
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a74:	strd	r6, [sp, #8]
   15a78:	strd	r8, [sp, #16]
   15a7c:	str	sl, [sp, #24]
   15a80:	str	lr, [sp, #28]
   15a84:	mov	r4, r0
   15a88:	mov	r5, r1
   15a8c:	add	r6, r2, #20
   15a90:	mov	r3, #0
   15a94:	strb	r3, [r2, #20]
   15a98:	cmp	r0, #0
   15a9c:	sbcs	r3, r1, #0
   15aa0:	movge	r8, #10
   15aa4:	movge	r9, #0
   15aa8:	movlt	r8, #10
   15aac:	movlt	r9, #0
   15ab0:	blt	15b14 <__assert_fail@plt+0x4730>
   15ab4:	mov	r2, r8
   15ab8:	mov	r3, r9
   15abc:	mov	r0, r4
   15ac0:	mov	r1, r5
   15ac4:	bl	1c70c <__assert_fail@plt+0xb328>
   15ac8:	add	r2, r2, #48	; 0x30
   15acc:	strb	r2, [r6, #-1]!
   15ad0:	mov	r2, r8
   15ad4:	mov	r3, r9
   15ad8:	mov	r0, r4
   15adc:	mov	r1, r5
   15ae0:	bl	1c70c <__assert_fail@plt+0xb328>
   15ae4:	mov	r4, r0
   15ae8:	mov	r5, r1
   15aec:	orrs	r3, r4, r5
   15af0:	bne	15ab4 <__assert_fail@plt+0x46d0>
   15af4:	mov	r0, r6
   15af8:	ldrd	r4, [sp]
   15afc:	ldrd	r6, [sp, #8]
   15b00:	ldrd	r8, [sp, #16]
   15b04:	ldr	sl, [sp, #24]
   15b08:	add	sp, sp, #28
   15b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b10:	mov	r6, r7
   15b14:	sub	r7, r6, #1
   15b18:	mov	r2, r8
   15b1c:	mov	r3, r9
   15b20:	mov	r0, r4
   15b24:	mov	r1, r5
   15b28:	bl	1c70c <__assert_fail@plt+0xb328>
   15b2c:	rsb	r2, r2, #48	; 0x30
   15b30:	strb	r2, [r6, #-1]
   15b34:	mov	r2, r8
   15b38:	mov	r3, r9
   15b3c:	mov	r0, r4
   15b40:	mov	r1, r5
   15b44:	bl	1c70c <__assert_fail@plt+0xb328>
   15b48:	mov	r4, r0
   15b4c:	mov	r5, r1
   15b50:	orrs	r3, r4, r5
   15b54:	bne	15b10 <__assert_fail@plt+0x472c>
   15b58:	sub	r6, r6, #2
   15b5c:	mov	r3, #45	; 0x2d
   15b60:	strb	r3, [r7, #-1]
   15b64:	b	15af4 <__assert_fail@plt+0x4710>
   15b68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b6c:	strd	r6, [sp, #8]
   15b70:	strd	r8, [sp, #16]
   15b74:	strd	sl, [sp, #24]
   15b78:	str	lr, [sp, #32]
   15b7c:	sub	sp, sp, #20
   15b80:	mov	r4, r0
   15b84:	mov	sl, r2
   15b88:	add	r8, r0, r1
   15b8c:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   15b90:	cmp	r0, #1
   15b94:	bls	15bb4 <__assert_fail@plt+0x47d0>
   15b98:	cmp	r4, r8
   15b9c:	bcs	15d68 <__assert_fail@plt+0x4984>
   15ba0:	mov	r5, #0
   15ba4:	mov	r6, #0
   15ba8:	mov	r7, #0
   15bac:	and	r9, sl, #2
   15bb0:	b	15c04 <__assert_fail@plt+0x4820>
   15bb4:	cmp	r4, r8
   15bb8:	movcs	r5, #0
   15bbc:	bcs	15ccc <__assert_fail@plt+0x48e8>
   15bc0:	bl	1127c <__ctype_b_loc@plt>
   15bc4:	ldr	r2, [r0]
   15bc8:	mov	r5, #0
   15bcc:	and	sl, sl, #2
   15bd0:	b	15d28 <__assert_fail@plt+0x4944>
   15bd4:	cmp	r3, #65	; 0x41
   15bd8:	bcc	15c28 <__assert_fail@plt+0x4844>
   15bdc:	cmp	r3, #95	; 0x5f
   15be0:	bls	15bf4 <__assert_fail@plt+0x4810>
   15be4:	sub	r3, r3, #97	; 0x61
   15be8:	uxtb	r3, r3
   15bec:	cmp	r3, #29
   15bf0:	bhi	15c28 <__assert_fail@plt+0x4844>
   15bf4:	add	r4, r4, #1
   15bf8:	add	r5, r5, #1
   15bfc:	cmp	r4, r8
   15c00:	bcs	15ccc <__assert_fail@plt+0x48e8>
   15c04:	ldrb	r3, [r4]
   15c08:	cmp	r3, #63	; 0x3f
   15c0c:	bhi	15bd4 <__assert_fail@plt+0x47f0>
   15c10:	cmp	r3, #37	; 0x25
   15c14:	bcs	15bf4 <__assert_fail@plt+0x4810>
   15c18:	sub	r3, r3, #32
   15c1c:	uxtb	r3, r3
   15c20:	cmp	r3, #3
   15c24:	bls	15bf4 <__assert_fail@plt+0x4810>
   15c28:	strd	r6, [sp, #8]
   15c2c:	b	15c70 <__assert_fail@plt+0x488c>
   15c30:	tst	sl, #1
   15c34:	bne	15d14 <__assert_fail@plt+0x4930>
   15c38:	add	r4, r4, #1
   15c3c:	add	r5, r5, #1
   15c40:	b	15bfc <__assert_fail@plt+0x4818>
   15c44:	tst	sl, #1
   15c48:	bne	15d14 <__assert_fail@plt+0x4930>
   15c4c:	add	r5, r5, #1
   15c50:	mov	r4, r8
   15c54:	b	15bfc <__assert_fail@plt+0x4818>
   15c58:	add	r5, r5, r0
   15c5c:	add	r4, r4, fp
   15c60:	add	r0, sp, #8
   15c64:	bl	11144 <mbsinit@plt>
   15c68:	cmp	r0, #0
   15c6c:	bne	15bfc <__assert_fail@plt+0x4818>
   15c70:	add	r3, sp, #8
   15c74:	sub	r2, r8, r4
   15c78:	mov	r1, r4
   15c7c:	add	r0, sp, #4
   15c80:	bl	1c660 <__assert_fail@plt+0xb27c>
   15c84:	mov	fp, r0
   15c88:	cmn	r0, #1
   15c8c:	beq	15c30 <__assert_fail@plt+0x484c>
   15c90:	cmn	r0, #2
   15c94:	beq	15c44 <__assert_fail@plt+0x4860>
   15c98:	cmp	r0, #0
   15c9c:	movne	fp, r0
   15ca0:	moveq	fp, #1
   15ca4:	ldr	r0, [sp, #4]
   15ca8:	bl	110fc <wcwidth@plt>
   15cac:	cmp	r0, #0
   15cb0:	blt	15cec <__assert_fail@plt+0x4908>
   15cb4:	movw	r3, #65535	; 0xffff
   15cb8:	movt	r3, #32767	; 0x7fff
   15cbc:	sub	r3, r3, r5
   15cc0:	cmp	r3, r0
   15cc4:	bge	15c58 <__assert_fail@plt+0x4874>
   15cc8:	mvn	r5, #-2147483648	; 0x80000000
   15ccc:	mov	r0, r5
   15cd0:	add	sp, sp, #20
   15cd4:	ldrd	r4, [sp]
   15cd8:	ldrd	r6, [sp, #8]
   15cdc:	ldrd	r8, [sp, #16]
   15ce0:	ldrd	sl, [sp, #24]
   15ce4:	add	sp, sp, #32
   15ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cec:	cmp	r9, #0
   15cf0:	bne	15d14 <__assert_fail@plt+0x4930>
   15cf4:	ldr	r0, [sp, #4]
   15cf8:	bl	11198 <iswcntrl@plt>
   15cfc:	cmp	r0, #0
   15d00:	bne	15c5c <__assert_fail@plt+0x4878>
   15d04:	cmn	r5, #-2147483647	; 0x80000001
   15d08:	beq	15cc8 <__assert_fail@plt+0x48e4>
   15d0c:	add	r5, r5, #1
   15d10:	b	15c5c <__assert_fail@plt+0x4878>
   15d14:	mvn	r5, #0
   15d18:	b	15ccc <__assert_fail@plt+0x48e8>
   15d1c:	add	r5, r5, #1
   15d20:	cmp	r8, r4
   15d24:	beq	15ccc <__assert_fail@plt+0x48e8>
   15d28:	ldrb	r3, [r4], #1
   15d2c:	lsl	r3, r3, #1
   15d30:	ldrh	r3, [r2, r3]
   15d34:	tst	r3, #16384	; 0x4000
   15d38:	beq	15d48 <__assert_fail@plt+0x4964>
   15d3c:	cmn	r5, #-2147483647	; 0x80000001
   15d40:	bne	15d1c <__assert_fail@plt+0x4938>
   15d44:	b	15ccc <__assert_fail@plt+0x48e8>
   15d48:	cmp	sl, #0
   15d4c:	bne	15d70 <__assert_fail@plt+0x498c>
   15d50:	tst	r3, #2
   15d54:	bne	15d20 <__assert_fail@plt+0x493c>
   15d58:	cmn	r5, #-2147483647	; 0x80000001
   15d5c:	beq	15ccc <__assert_fail@plt+0x48e8>
   15d60:	add	r5, r5, #1
   15d64:	b	15d20 <__assert_fail@plt+0x493c>
   15d68:	mov	r5, #0
   15d6c:	b	15ccc <__assert_fail@plt+0x48e8>
   15d70:	mvn	r5, #0
   15d74:	b	15ccc <__assert_fail@plt+0x48e8>
   15d78:	strd	r4, [sp, #-16]!
   15d7c:	str	r6, [sp, #8]
   15d80:	str	lr, [sp, #12]
   15d84:	mov	r4, r0
   15d88:	mov	r5, r1
   15d8c:	bl	11294 <strlen@plt>
   15d90:	mov	r2, r5
   15d94:	mov	r1, r0
   15d98:	mov	r0, r4
   15d9c:	bl	15b68 <__assert_fail@plt+0x4784>
   15da0:	ldrd	r4, [sp]
   15da4:	ldr	r6, [sp, #8]
   15da8:	add	sp, sp, #12
   15dac:	pop	{pc}		; (ldr pc, [sp], #4)
   15db0:	strd	r4, [sp, #-16]!
   15db4:	str	r6, [sp, #8]
   15db8:	str	lr, [sp, #12]
   15dbc:	mov	r5, r0
   15dc0:	subs	r4, r2, #0
   15dc4:	beq	15df4 <__assert_fail@plt+0x4a10>
   15dc8:	mov	r6, r1
   15dcc:	bl	1124c <__ctype_tolower_loc@plt>
   15dd0:	add	r3, r6, r4
   15dd4:	add	r2, r5, r4
   15dd8:	mov	r1, r6
   15ddc:	ldrb	lr, [r3, #-1]!
   15de0:	ldr	ip, [r0]
   15de4:	ldr	ip, [ip, lr, lsl #2]
   15de8:	strb	ip, [r2, #-1]!
   15dec:	cmp	r3, r1
   15df0:	bne	15ddc <__assert_fail@plt+0x49f8>
   15df4:	mov	r0, r5
   15df8:	ldrd	r4, [sp]
   15dfc:	ldr	r6, [sp, #8]
   15e00:	add	sp, sp, #12
   15e04:	pop	{pc}		; (ldr pc, [sp], #4)
   15e08:	strd	r4, [sp, #-16]!
   15e0c:	str	r6, [sp, #8]
   15e10:	str	lr, [sp, #12]
   15e14:	mov	r5, r0
   15e18:	subs	r4, r2, #0
   15e1c:	beq	15e4c <__assert_fail@plt+0x4a68>
   15e20:	mov	r6, r1
   15e24:	bl	11258 <__ctype_toupper_loc@plt>
   15e28:	add	r3, r6, r4
   15e2c:	add	r2, r5, r4
   15e30:	mov	r1, r6
   15e34:	ldrb	lr, [r3, #-1]!
   15e38:	ldr	ip, [r0]
   15e3c:	ldr	ip, [ip, lr, lsl #2]
   15e40:	strb	ip, [r2, #-1]!
   15e44:	cmp	r3, r1
   15e48:	bne	15e34 <__assert_fail@plt+0x4a50>
   15e4c:	mov	r0, r5
   15e50:	ldrd	r4, [sp]
   15e54:	ldr	r6, [sp, #8]
   15e58:	add	sp, sp, #12
   15e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e64:	strd	r6, [sp, #8]
   15e68:	strd	r8, [sp, #16]
   15e6c:	strd	sl, [sp, #24]
   15e70:	str	lr, [sp, #32]
   15e74:	sub	sp, sp, #1120	; 0x460
   15e78:	sub	sp, sp, #12
   15e7c:	str	r0, [sp, #28]
   15e80:	str	r1, [sp, #24]
   15e84:	mov	r7, r2
   15e88:	mov	r4, r3
   15e8c:	str	r3, [sp, #40]	; 0x28
   15e90:	ldrb	r3, [sp, #1168]	; 0x490
   15e94:	str	r3, [sp, #36]	; 0x24
   15e98:	ldr	r9, [sp, #1176]	; 0x498
   15e9c:	bl	112c4 <__errno_location@plt>
   15ea0:	str	r0, [sp, #32]
   15ea4:	ldr	r3, [r0]
   15ea8:	str	r3, [sp, #44]	; 0x2c
   15eac:	ldr	r5, [r4, #8]
   15eb0:	ldr	r2, [r4, #40]	; 0x28
   15eb4:	movw	r3, #52296	; 0xcc48
   15eb8:	movt	r3, #1
   15ebc:	cmp	r2, #0
   15ec0:	moveq	r2, r3
   15ec4:	str	r2, [sp, #48]	; 0x30
   15ec8:	cmp	r5, #12
   15ecc:	subgt	r5, r5, #12
   15ed0:	bgt	15edc <__assert_fail@plt+0x4af8>
   15ed4:	cmp	r5, #0
   15ed8:	moveq	r5, #12
   15edc:	ldrb	r3, [r7]
   15ee0:	cmp	r3, #0
   15ee4:	beq	17628 <__assert_fail@plt+0x6244>
   15ee8:	mov	fp, #0
   15eec:	movw	r2, #46021	; 0xb3c5
   15ef0:	movt	r2, #37282	; 0x91a2
   15ef4:	str	r2, [sp, #68]	; 0x44
   15ef8:	movw	r2, #34953	; 0x8889
   15efc:	movt	r2, #34952	; 0x8888
   15f00:	str	r2, [sp, #72]	; 0x48
   15f04:	movw	sl, #34079	; 0x851f
   15f08:	movt	sl, #20971	; 0x51eb
   15f0c:	movw	r8, #9363	; 0x2493
   15f10:	movt	r8, #37449	; 0x9249
   15f14:	movw	r6, #26215	; 0x6667
   15f18:	movt	r6, #26214	; 0x6666
   15f1c:	str	r5, [sp, #64]	; 0x40
   15f20:	str	sl, [sp, #56]	; 0x38
   15f24:	str	r8, [sp, #52]	; 0x34
   15f28:	str	r6, [sp, #60]	; 0x3c
   15f2c:	ldr	r6, [sp, #28]
   15f30:	b	15f68 <__assert_fail@plt+0x4b84>
   15f34:	cmp	r6, #0
   15f38:	beq	15f4c <__assert_fail@plt+0x4b68>
   15f3c:	cmp	r9, #1
   15f40:	bhi	15fc4 <__assert_fail@plt+0x4be0>
   15f44:	ldrb	r3, [r7]
   15f48:	strb	r3, [r6], #1
   15f4c:	add	fp, fp, r4
   15f50:	mov	r4, r7
   15f54:	add	r7, r4, #1
   15f58:	ldrb	r3, [r4, #1]
   15f5c:	mvn	r9, #0
   15f60:	cmp	r3, #0
   15f64:	beq	175fc <__assert_fail@plt+0x6218>
   15f68:	cmp	r3, #37	; 0x25
   15f6c:	beq	160f4 <__assert_fail@plt+0x4d10>
   15f70:	bic	r9, r9, r9, asr #31
   15f74:	cmp	r9, #1
   15f78:	movcs	r4, r9
   15f7c:	movcc	r4, #1
   15f80:	ldr	r3, [sp, #24]
   15f84:	sub	r3, r3, fp
   15f88:	cmp	r3, r4
   15f8c:	bhi	15f34 <__assert_fail@plt+0x4b50>
   15f90:	mov	r3, #34	; 0x22
   15f94:	ldr	r2, [sp, #32]
   15f98:	str	r3, [r2]
   15f9c:	mov	fp, #0
   15fa0:	mov	r0, fp
   15fa4:	add	sp, sp, #1120	; 0x460
   15fa8:	add	sp, sp, #12
   15fac:	ldrd	r4, [sp]
   15fb0:	ldrd	r6, [sp, #8]
   15fb4:	ldrd	r8, [sp, #16]
   15fb8:	ldrd	sl, [sp, #24]
   15fbc:	add	sp, sp, #32
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	sub	r9, r9, #1
   15fc8:	mov	r2, r9
   15fcc:	mov	r1, #32
   15fd0:	mov	r0, r6
   15fd4:	bl	112e8 <memset@plt>
   15fd8:	add	r6, r6, r9
   15fdc:	b	15f44 <__assert_fail@plt+0x4b60>
   15fe0:	str	r2, [sp, #28]
   15fe4:	b	15fec <__assert_fail@plt+0x4c08>
   15fe8:	mov	r5, r1
   15fec:	ldrb	r2, [r4, #1]!
   15ff0:	sub	r3, r2, #35	; 0x23
   15ff4:	cmp	r3, #60	; 0x3c
   15ff8:	ldrls	pc, [pc, r3, lsl #2]
   15ffc:	b	1611c <__assert_fail@plt+0x4d38>
   16000:	andeq	r5, r1, r8, ror #31
   16004:	andeq	r6, r1, ip, lsl r1
   16008:	andeq	r6, r1, ip, lsl r1
   1600c:	andeq	r6, r1, ip, lsl r1
   16010:	andeq	r6, r1, ip, lsl r1
   16014:	andeq	r6, r1, ip, lsl r1
   16018:	andeq	r6, r1, ip, lsl r1
   1601c:	andeq	r6, r1, ip, lsl r1
   16020:	andeq	r5, r1, r0, ror #31
   16024:	andeq	r6, r1, ip, lsl r1
   16028:	andeq	r5, r1, r0, ror #31
   1602c:	andeq	r6, r1, ip, lsl r1
   16030:	andeq	r6, r1, ip, lsl r1
   16034:	andeq	r5, r1, r0, ror #31
   16038:	andeq	r6, r1, ip, lsl r1
   1603c:	andeq	r6, r1, ip, lsl r1
   16040:	andeq	r6, r1, ip, lsl r1
   16044:	andeq	r6, r1, ip, lsl r1
   16048:	andeq	r6, r1, ip, lsl r1
   1604c:	andeq	r6, r1, ip, lsl r1
   16050:	andeq	r6, r1, ip, lsl r1
   16054:	andeq	r6, r1, ip, lsl r1
   16058:	andeq	r6, r1, ip, lsl r1
   1605c:	andeq	r6, r1, ip, lsl r1
   16060:	andeq	r6, r1, ip, lsl r1
   16064:	andeq	r6, r1, ip, lsl r1
   16068:	andeq	r6, r1, ip, lsl r1
   1606c:	andeq	r6, r1, ip, lsl r1
   16070:	andeq	r6, r1, ip, lsl r1
   16074:	andeq	r6, r1, ip, lsl r1
   16078:	andeq	r6, r1, ip, lsl r1
   1607c:	andeq	r6, r1, ip, lsl r1
   16080:	andeq	r6, r1, ip, lsl r1
   16084:	andeq	r6, r1, ip, lsl r1
   16088:	andeq	r6, r1, ip, lsl r1
   1608c:	andeq	r6, r1, ip, lsl r1
   16090:	andeq	r6, r1, ip, lsl r1
   16094:	andeq	r6, r1, ip, lsl r1
   16098:	andeq	r6, r1, ip, lsl r1
   1609c:	andeq	r6, r1, ip, lsl r1
   160a0:	andeq	r6, r1, ip, lsl r1
   160a4:	andeq	r6, r1, ip, lsl r1
   160a8:	andeq	r6, r1, ip, lsl r1
   160ac:	andeq	r6, r1, ip, lsl r1
   160b0:	andeq	r6, r1, ip, lsl r1
   160b4:	andeq	r6, r1, ip, lsl r1
   160b8:	andeq	r6, r1, ip, lsl r1
   160bc:	andeq	r6, r1, ip, lsl r1
   160c0:	andeq	r6, r1, ip, lsl r1
   160c4:	andeq	r6, r1, ip, lsl r1
   160c8:	andeq	r6, r1, ip, lsl r1
   160cc:	andeq	r6, r1, ip, lsl r1
   160d0:	andeq	r6, r1, ip, lsl r1
   160d4:	andeq	r6, r1, ip, lsl r1
   160d8:	andeq	r6, r1, ip, lsl r1
   160dc:	andeq	r6, r1, ip, lsl r1
   160e0:	andeq	r6, r1, ip, lsl r1
   160e4:	andeq	r6, r1, ip, lsl r1
   160e8:	andeq	r6, r1, ip, lsl r1
   160ec:	andeq	r6, r1, r0, lsl r1
   160f0:	andeq	r5, r1, r0, ror #31
   160f4:	ldr	r3, [sp, #36]	; 0x24
   160f8:	str	r3, [sp, #76]	; 0x4c
   160fc:	mov	r4, r7
   16100:	mov	r5, #0
   16104:	str	r5, [sp, #28]
   16108:	mov	r1, #1
   1610c:	b	15fec <__assert_fail@plt+0x4c08>
   16110:	mov	r3, #1
   16114:	str	r3, [sp, #76]	; 0x4c
   16118:	b	15fec <__assert_fail@plt+0x4c08>
   1611c:	sub	r2, r2, #48	; 0x30
   16120:	cmp	r2, #9
   16124:	bls	16340 <__assert_fail@plt+0x4f5c>
   16128:	ldrb	sl, [r4]
   1612c:	cmp	sl, #69	; 0x45
   16130:	beq	16398 <__assert_fail@plt+0x4fb4>
   16134:	cmp	sl, #79	; 0x4f
   16138:	movne	sl, #0
   1613c:	beq	16398 <__assert_fail@plt+0x4fb4>
   16140:	ldrb	r3, [r4]
   16144:	mov	r1, r3
   16148:	cmp	r3, #122	; 0x7a
   1614c:	ldrls	pc, [pc, r3, lsl #2]
   16150:	b	163e4 <__assert_fail@plt+0x5000>
   16154:	andeq	r6, r1, r0, ror #7
   16158:	andeq	r6, r1, r4, ror #7
   1615c:	andeq	r6, r1, r4, ror #7
   16160:	andeq	r6, r1, r4, ror #7
   16164:	andeq	r6, r1, r4, ror #7
   16168:	andeq	r6, r1, r4, ror #7
   1616c:	andeq	r6, r1, r4, ror #7
   16170:	andeq	r6, r1, r4, ror #7
   16174:	andeq	r6, r1, r4, ror #7
   16178:	andeq	r6, r1, r4, ror #7
   1617c:	andeq	r6, r1, r4, ror #7
   16180:	andeq	r6, r1, r4, ror #7
   16184:	andeq	r6, r1, r4, ror #7
   16188:	andeq	r6, r1, r4, ror #7
   1618c:	andeq	r6, r1, r4, ror #7
   16190:	andeq	r6, r1, r4, ror #7
   16194:	andeq	r6, r1, r4, ror #7
   16198:	andeq	r6, r1, r4, ror #7
   1619c:	andeq	r6, r1, r4, ror #7
   161a0:	andeq	r6, r1, r4, ror #7
   161a4:	andeq	r6, r1, r4, ror #7
   161a8:	andeq	r6, r1, r4, ror #7
   161ac:	andeq	r6, r1, r4, ror #7
   161b0:	andeq	r6, r1, r4, ror #7
   161b4:	andeq	r6, r1, r4, ror #7
   161b8:	andeq	r6, r1, r4, ror #7
   161bc:	andeq	r6, r1, r4, ror #7
   161c0:	andeq	r6, r1, r4, ror #7
   161c4:	andeq	r6, r1, r4, ror #7
   161c8:	andeq	r6, r1, r4, ror #7
   161cc:	andeq	r6, r1, r4, ror #7
   161d0:	andeq	r6, r1, r4, ror #7
   161d4:	andeq	r6, r1, r4, ror #7
   161d8:	andeq	r6, r1, r4, ror #7
   161dc:	andeq	r6, r1, r4, ror #7
   161e0:	andeq	r6, r1, r4, ror #7
   161e4:	andeq	r6, r1, r4, ror #7
   161e8:	ldrdeq	r6, [r1], -r4
   161ec:	andeq	r6, r1, r4, ror #7
   161f0:	andeq	r6, r1, r4, ror #7
   161f4:	andeq	r6, r1, r4, ror #7
   161f8:	andeq	r6, r1, r4, ror #7
   161fc:	andeq	r6, r1, r4, ror #7
   16200:	andeq	r6, r1, r4, ror #7
   16204:	andeq	r6, r1, r4, ror #7
   16208:	andeq	r6, r1, r4, ror #7
   1620c:	andeq	r6, r1, r4, ror #7
   16210:	andeq	r6, r1, r4, ror #7
   16214:	andeq	r6, r1, r4, ror #7
   16218:	andeq	r6, r1, r4, ror #7
   1621c:	andeq	r6, r1, r4, ror #7
   16220:	andeq	r6, r1, r4, ror #7
   16224:	andeq	r6, r1, r4, ror #7
   16228:	andeq	r6, r1, r4, ror #7
   1622c:	andeq	r6, r1, r4, ror #7
   16230:	andeq	r6, r1, r4, ror #7
   16234:	andeq	r6, r1, r4, ror #7
   16238:	andeq	r6, r1, r4, ror #7
   1623c:			; <UNDEFINED> instruction: 0x000163b0
   16240:	andeq	r6, r1, r4, ror #7
   16244:	andeq	r6, r1, r4, ror #7
   16248:	andeq	r6, r1, r4, ror #7
   1624c:	andeq	r6, r1, r4, ror #7
   16250:	andeq	r6, r1, r4, ror #7
   16254:	andeq	r6, r1, r4, ror #7
   16258:	andeq	r6, r1, ip, asr #10
   1625c:	andeq	r6, r1, ip, lsl #11
   16260:	andeq	r6, r1, r8, lsr #14
   16264:	andeq	r6, r1, r8, asr #15
   16268:	andeq	r6, r1, r4, ror #7
   1626c:	andeq	r6, r1, r4, lsl #21
   16270:	andeq	r7, r1, r8, lsr #32
   16274:			; <UNDEFINED> instruction: 0x00016ab8
   16278:	ldrdeq	r6, [r1], -r4
   1627c:	andeq	r6, r1, r4, ror #7
   16280:	andeq	r6, r1, r4, ror #7
   16284:	andeq	r6, r1, r4, ror #7
   16288:	andeq	r6, r1, r4, asr #22
   1628c:	muleq	r1, r4, fp
   16290:	andeq	r6, r1, r4, ror #7
   16294:			; <UNDEFINED> instruction: 0x00016db0
   16298:	andeq	r6, r1, r4, ror #7
   1629c:	andeq	r6, r1, r4, asr #11
   162a0:	andeq	r6, r1, r4, lsr lr
   162a4:	andeq	r6, r1, r0, lsr #7
   162a8:	andeq	r6, r1, ip, ror #31
   162ac:	andeq	r7, r1, r8, lsr #32
   162b0:	andeq	r7, r1, ip, ror r2
   162b4:	andeq	r6, r1, r0, lsl pc
   162b8:	strdeq	r7, [r1], -r0
   162bc:	andeq	r7, r1, r8, lsl #7
   162c0:	andeq	r6, r1, r4, ror #7
   162c4:	andeq	r6, r1, r4, ror #7
   162c8:	andeq	r6, r1, r4, ror #7
   162cc:	andeq	r6, r1, r4, ror #7
   162d0:	andeq	r6, r1, r4, ror #7
   162d4:	andeq	r6, r1, r4, ror #7
   162d8:	andeq	r6, r1, r4, lsl r5
   162dc:	andeq	r6, r1, ip, ror #10
   162e0:			; <UNDEFINED> instruction: 0x000165b0
   162e4:	andeq	r6, r1, r0, ror #15
   162e8:	strdeq	r6, [r1], -ip
   162ec:	andeq	r6, r1, r4, ror #7
   162f0:	andeq	r7, r1, r8, lsr #32
   162f4:	andeq	r6, r1, ip, ror #10
   162f8:	andeq	r6, r1, r4, ror #7
   162fc:	andeq	r6, r1, r0, lsl fp
   16300:	andeq	r6, r1, ip, ror #21
   16304:	andeq	r6, r1, r0, lsl #22
   16308:	andeq	r6, r1, r0, ror #22
   1630c:	andeq	r6, r1, r0, lsr #26
   16310:	andeq	r6, r1, r4, ror #7
   16314:			; <UNDEFINED> instruction: 0x00016db8
   16318:	strdeq	r6, [r1], -r8
   1631c:	andeq	r6, r1, r8, ror #13
   16320:	andeq	r6, r1, r0, asr lr
   16324:	andeq	r6, r1, r4, lsr #30
   16328:			; <UNDEFINED> instruction: 0x00016fb4
   1632c:	andeq	r6, r1, r4, ror #7
   16330:	ldrdeq	r7, [r1], -r4
   16334:			; <UNDEFINED> instruction: 0x000167b4
   16338:	andeq	r7, r1, r0, lsr r3
   1633c:	muleq	r1, ip, r4
   16340:	mov	r9, #0
   16344:	mov	r1, #10
   16348:	b	1635c <__assert_fail@plt+0x4f78>
   1634c:	ldrb	r3, [r4, #1]!
   16350:	sub	r3, r3, #48	; 0x30
   16354:	cmp	r3, #9
   16358:	bhi	16128 <__assert_fail@plt+0x4d44>
   1635c:	smull	r8, r9, r9, r1
   16360:	asr	r0, r8, #31
   16364:	mov	r2, r8
   16368:	cmp	r0, r9
   1636c:	mvnne	r9, #-2147483648	; 0x80000000
   16370:	bne	1634c <__assert_fail@plt+0x4f68>
   16374:	ldrb	r9, [r4]
   16378:	sub	r9, r9, #48	; 0x30
   1637c:	adds	r2, r2, r9
   16380:	movvs	r3, #1
   16384:	movvc	r3, #0
   16388:	cmp	r3, #0
   1638c:	moveq	r9, r2
   16390:	mvnne	r9, #-2147483648	; 0x80000000
   16394:	b	1634c <__assert_fail@plt+0x4f68>
   16398:	add	r4, r4, #1
   1639c:	b	16140 <__assert_fail@plt+0x4d5c>
   163a0:	mvn	r7, #0
   163a4:	movw	sl, #57744	; 0xe190
   163a8:	movt	sl, #1
   163ac:	b	165d0 <__assert_fail@plt+0x51ec>
   163b0:	add	r2, r4, #1
   163b4:	ldrb	r3, [r4, #1]
   163b8:	cmp	r3, #58	; 0x3a
   163bc:	movne	lr, #1
   163c0:	beq	1747c <__assert_fail@plt+0x6098>
   163c4:	cmp	r3, #122	; 0x7a
   163c8:	moveq	r4, r2
   163cc:	bne	163e4 <__assert_fail@plt+0x5000>
   163d0:	b	174a0 <__assert_fail@plt+0x60bc>
   163d4:	sub	r3, r4, #1
   163d8:	cmp	r7, r3
   163dc:	beq	16484 <__assert_fail@plt+0x50a0>
   163e0:	sub	r4, r4, #1
   163e4:	sub	r5, r4, r7
   163e8:	add	r5, r5, #1
   163ec:	ldr	r3, [sp, #28]
   163f0:	subs	r3, r3, #45	; 0x2d
   163f4:	movne	r3, #1
   163f8:	cmp	r9, #0
   163fc:	movlt	r3, #0
   16400:	cmp	r3, #0
   16404:	moveq	r9, #0
   16408:	mov	r8, r9
   1640c:	cmp	r9, r5
   16410:	movcc	r9, r5
   16414:	ldr	r3, [sp, #24]
   16418:	sub	r3, r3, fp
   1641c:	cmp	r3, r9
   16420:	bls	175d8 <__assert_fail@plt+0x61f4>
   16424:	cmp	r6, #0
   16428:	beq	1647c <__assert_fail@plt+0x5098>
   1642c:	cmp	r8, r5
   16430:	bls	1645c <__assert_fail@plt+0x5078>
   16434:	sub	r8, r8, r5
   16438:	ldr	r3, [sp, #28]
   1643c:	cmp	r3, #43	; 0x2b
   16440:	cmpne	r3, #48	; 0x30
   16444:	mov	r2, r8
   16448:	moveq	r1, #48	; 0x30
   1644c:	movne	r1, #32
   16450:	mov	r0, r6
   16454:	bl	112e8 <memset@plt>
   16458:	add	r6, r6, r8
   1645c:	ldr	r3, [sp, #76]	; 0x4c
   16460:	cmp	r3, #0
   16464:	beq	175e8 <__assert_fail@plt+0x6204>
   16468:	mov	r2, r5
   1646c:	mov	r1, r7
   16470:	mov	r0, r6
   16474:	bl	15e08 <__assert_fail@plt+0x4a24>
   16478:	add	r6, r6, r5
   1647c:	add	fp, fp, r9
   16480:	b	15f54 <__assert_fail@plt+0x4b70>
   16484:	ldr	r2, [sp, #28]
   16488:	mvn	r3, r9
   1648c:	lsr	r3, r3, #31
   16490:	cmp	r2, #45	; 0x2d
   16494:	moveq	r3, #0
   16498:	cmp	r3, #0
   1649c:	moveq	r9, #0
   164a0:	mov	r5, r9
   164a4:	cmp	r9, #1
   164a8:	movcc	r9, #1
   164ac:	ldr	r3, [sp, #24]
   164b0:	sub	r3, r3, fp
   164b4:	cmp	r3, r9
   164b8:	bls	16504 <__assert_fail@plt+0x5120>
   164bc:	cmp	r6, #0
   164c0:	beq	164fc <__assert_fail@plt+0x5118>
   164c4:	cmp	r5, #1
   164c8:	bls	164f4 <__assert_fail@plt+0x5110>
   164cc:	sub	r5, r5, #1
   164d0:	ldr	r3, [sp, #28]
   164d4:	cmp	r3, #43	; 0x2b
   164d8:	cmpne	r3, #48	; 0x30
   164dc:	mov	r2, r5
   164e0:	moveq	r1, #48	; 0x30
   164e4:	movne	r1, #32
   164e8:	mov	r0, r6
   164ec:	bl	112e8 <memset@plt>
   164f0:	add	r6, r6, r5
   164f4:	ldrb	r3, [r4]
   164f8:	strb	r3, [r6], #1
   164fc:	add	fp, fp, r9
   16500:	b	15f54 <__assert_fail@plt+0x4b70>
   16504:	mov	r3, #34	; 0x22
   16508:	ldr	r2, [sp, #32]
   1650c:	str	r3, [r2]
   16510:	b	15f9c <__assert_fail@plt+0x4bb8>
   16514:	cmp	sl, #0
   16518:	bne	163e4 <__assert_fail@plt+0x5000>
   1651c:	ldr	r3, [sp, #76]	; 0x4c
   16520:	cmp	r5, #0
   16524:	movne	r3, r5
   16528:	str	r3, [sp, #76]	; 0x4c
   1652c:	mov	r1, #97	; 0x61
   16530:	mov	r3, #32
   16534:	strb	r3, [sp, #88]	; 0x58
   16538:	mov	r3, #37	; 0x25
   1653c:	strb	r3, [sp, #89]	; 0x59
   16540:	mov	r8, #0
   16544:	add	r3, sp, #90	; 0x5a
   16548:	b	16864 <__assert_fail@plt+0x5480>
   1654c:	cmp	sl, #0
   16550:	bne	163e4 <__assert_fail@plt+0x5000>
   16554:	ldr	r3, [sp, #76]	; 0x4c
   16558:	cmp	r5, #0
   1655c:	movne	r3, r5
   16560:	str	r3, [sp, #76]	; 0x4c
   16564:	mov	r1, #65	; 0x41
   16568:	b	16530 <__assert_fail@plt+0x514c>
   1656c:	ldr	r3, [sp, #76]	; 0x4c
   16570:	cmp	r5, #0
   16574:	movne	r3, r5
   16578:	str	r3, [sp, #76]	; 0x4c
   1657c:	cmp	sl, #69	; 0x45
   16580:	movne	r8, #0
   16584:	bne	16dd8 <__assert_fail@plt+0x59f4>
   16588:	b	163e4 <__assert_fail@plt+0x5000>
   1658c:	cmp	sl, #69	; 0x45
   16590:	beq	163e4 <__assert_fail@plt+0x5000>
   16594:	ldr	r3, [sp, #76]	; 0x4c
   16598:	cmp	r5, #0
   1659c:	movne	r3, r5
   165a0:	str	r3, [sp, #76]	; 0x4c
   165a4:	mov	r1, #66	; 0x42
   165a8:	mov	r8, #0
   165ac:	b	16dd8 <__assert_fail@plt+0x59f4>
   165b0:	cmp	sl, #79	; 0x4f
   165b4:	beq	163e4 <__assert_fail@plt+0x5000>
   165b8:	mov	r1, #99	; 0x63
   165bc:	mov	r8, #0
   165c0:	b	16dd8 <__assert_fail@plt+0x59f4>
   165c4:	mvn	r7, #0
   165c8:	movw	sl, #57768	; 0xe1a8
   165cc:	movt	sl, #1
   165d0:	ldr	r3, [sp, #1188]	; 0x4a4
   165d4:	str	r3, [sp, #20]
   165d8:	ldr	r3, [sp, #1184]	; 0x4a0
   165dc:	str	r3, [sp, #16]
   165e0:	ldr	r3, [sp, #1180]	; 0x49c
   165e4:	str	r3, [sp, #12]
   165e8:	str	r7, [sp, #8]
   165ec:	ldr	r8, [sp, #28]
   165f0:	str	r8, [sp, #4]
   165f4:	ldr	r3, [sp, #76]	; 0x4c
   165f8:	str	r3, [sp]
   165fc:	ldr	r3, [sp, #40]	; 0x28
   16600:	mov	r2, sl
   16604:	mvn	r1, #0
   16608:	mov	r0, #0
   1660c:	bl	15e60 <__assert_fail@plt+0x4a7c>
   16610:	mov	r5, r0
   16614:	mvn	r3, r9
   16618:	lsr	r3, r3, #31
   1661c:	cmp	r8, #45	; 0x2d
   16620:	moveq	r3, #0
   16624:	cmp	r3, #0
   16628:	moveq	r9, #0
   1662c:	mov	r3, r9
   16630:	cmp	r9, r5
   16634:	movcc	r9, r5
   16638:	ldr	r2, [sp, #24]
   1663c:	sub	r8, r2, fp
   16640:	cmp	r8, r9
   16644:	bls	166d8 <__assert_fail@plt+0x52f4>
   16648:	cmp	r6, #0
   1664c:	beq	166d0 <__assert_fail@plt+0x52ec>
   16650:	cmp	r3, r5
   16654:	bls	1668c <__assert_fail@plt+0x52a8>
   16658:	sub	r3, r3, r5
   1665c:	str	r3, [sp, #80]	; 0x50
   16660:	ldr	r2, [sp, #28]
   16664:	cmp	r2, #43	; 0x2b
   16668:	cmpne	r2, #48	; 0x30
   1666c:	moveq	r2, r3
   16670:	moveq	r1, #48	; 0x30
   16674:	ldrne	r2, [sp, #80]	; 0x50
   16678:	movne	r1, #32
   1667c:	mov	r0, r6
   16680:	bl	112e8 <memset@plt>
   16684:	ldr	r3, [sp, #80]	; 0x50
   16688:	add	r6, r6, r3
   1668c:	ldr	r3, [sp, #1188]	; 0x4a4
   16690:	str	r3, [sp, #20]
   16694:	ldr	r3, [sp, #1184]	; 0x4a0
   16698:	str	r3, [sp, #16]
   1669c:	ldr	r3, [sp, #1180]	; 0x49c
   166a0:	str	r3, [sp, #12]
   166a4:	str	r7, [sp, #8]
   166a8:	ldr	r3, [sp, #28]
   166ac:	str	r3, [sp, #4]
   166b0:	ldr	r3, [sp, #76]	; 0x4c
   166b4:	str	r3, [sp]
   166b8:	ldr	r3, [sp, #40]	; 0x28
   166bc:	mov	r2, sl
   166c0:	mov	r1, r8
   166c4:	mov	r0, r6
   166c8:	bl	15e60 <__assert_fail@plt+0x4a7c>
   166cc:	add	r6, r6, r5
   166d0:	add	fp, fp, r9
   166d4:	b	15f54 <__assert_fail@plt+0x4b70>
   166d8:	mov	r3, #34	; 0x22
   166dc:	ldr	r2, [sp, #32]
   166e0:	str	r3, [r2]
   166e4:	b	15f9c <__assert_fail@plt+0x4bb8>
   166e8:	mov	r8, #0
   166ec:	b	16dd8 <__assert_fail@plt+0x59f4>
   166f0:	mov	r3, #34	; 0x22
   166f4:	ldr	r2, [sp, #32]
   166f8:	str	r3, [r2]
   166fc:	b	15f9c <__assert_fail@plt+0x4bb8>
   16700:	mov	r2, r5
   16704:	add	r1, sp, #105	; 0x69
   16708:	mov	r0, r6
   1670c:	bl	15db0 <__assert_fail@plt+0x49cc>
   16710:	b	16924 <__assert_fail@plt+0x5540>
   16714:	mov	r2, r5
   16718:	add	r1, sp, #105	; 0x69
   1671c:	mov	r0, r6
   16720:	bl	1112c <memcpy@plt>
   16724:	b	16924 <__assert_fail@plt+0x5540>
   16728:	cmp	sl, #69	; 0x45
   1672c:	beq	17630 <__assert_fail@plt+0x624c>
   16730:	ldr	r3, [sp, #40]	; 0x28
   16734:	ldr	r2, [r3, #20]
   16738:	movw	r8, #63636	; 0xf894
   1673c:	movt	r8, #65535	; 0xffff
   16740:	cmp	r2, r8
   16744:	movge	r8, #0
   16748:	movlt	r8, #1
   1674c:	add	r3, r2, #1888	; 0x760
   16750:	add	r3, r3, #12
   16754:	movw	r0, #1899	; 0x76b
   16758:	cmp	r3, r0
   1675c:	mvnls	r3, #98	; 0x62
   16760:	movhi	r3, #0
   16764:	add	r3, r3, r2
   16768:	ldr	r2, [sp, #56]	; 0x38
   1676c:	smull	r0, r2, r2, r3
   16770:	asr	r3, r3, #31
   16774:	rsb	r3, r3, r2, asr #5
   16778:	add	r3, r3, #19
   1677c:	mov	r2, #2
   16780:	str	r2, [sp, #80]	; 0x50
   16784:	ldr	r0, [sp, #28]
   16788:	mov	r2, r0
   1678c:	ldr	ip, [sp, #1172]	; 0x494
   16790:	cmp	r0, #0
   16794:	moveq	r2, ip
   16798:	str	r2, [sp, #28]
   1679c:	cmp	r2, #43	; 0x2b
   167a0:	movne	r2, #0
   167a4:	beq	16930 <__assert_fail@plt+0x554c>
   167a8:	str	r2, [sp, #84]	; 0x54
   167ac:	mov	r0, #0
   167b0:	b	16830 <__assert_fail@plt+0x544c>
   167b4:	cmp	sl, #79	; 0x4f
   167b8:	beq	163e4 <__assert_fail@plt+0x5000>
   167bc:	mov	r1, #120	; 0x78
   167c0:	mov	r8, #0
   167c4:	b	16dd8 <__assert_fail@plt+0x59f4>
   167c8:	cmp	sl, #0
   167cc:	bne	163e4 <__assert_fail@plt+0x5000>
   167d0:	mvn	r7, #0
   167d4:	movw	sl, #57776	; 0xe1b0
   167d8:	movt	sl, #1
   167dc:	b	165d0 <__assert_fail@plt+0x51ec>
   167e0:	cmp	sl, #69	; 0x45
   167e4:	beq	163e4 <__assert_fail@plt+0x5000>
   167e8:	ldr	r3, [sp, #40]	; 0x28
   167ec:	ldr	r3, [r3, #12]
   167f0:	mov	r2, #2
   167f4:	str	r2, [sp, #80]	; 0x50
   167f8:	b	16824 <__assert_fail@plt+0x5440>
   167fc:	cmp	sl, #69	; 0x45
   16800:	beq	163e4 <__assert_fail@plt+0x5000>
   16804:	ldr	r3, [sp, #40]	; 0x28
   16808:	ldr	r3, [r3, #12]
   1680c:	ldr	r2, [sp, #28]
   16810:	cmp	r2, #0
   16814:	mov	r2, #2
   16818:	str	r2, [sp, #80]	; 0x50
   1681c:	moveq	r2, #95	; 0x5f
   16820:	streq	r2, [sp, #28]
   16824:	lsr	r8, r3, #31
   16828:	mov	r0, #0
   1682c:	str	r0, [sp, #84]	; 0x54
   16830:	eor	r2, r8, #1
   16834:	cmp	sl, #79	; 0x4f
   16838:	movne	r2, #0
   1683c:	andeq	r2, r2, #1
   16840:	cmp	r2, #0
   16844:	beq	1695c <__assert_fail@plt+0x5578>
   16848:	mov	r3, #32
   1684c:	strb	r3, [sp, #88]	; 0x58
   16850:	mov	r3, #37	; 0x25
   16854:	strb	r3, [sp, #89]	; 0x59
   16858:	mov	r8, #0
   1685c:	strb	sl, [sp, #90]	; 0x5a
   16860:	add	r3, sp, #91	; 0x5b
   16864:	strb	r1, [r3]
   16868:	mov	r2, #0
   1686c:	strb	r2, [r3, #1]
   16870:	ldr	r3, [sp, #40]	; 0x28
   16874:	add	r2, sp, #88	; 0x58
   16878:	mov	r1, #1024	; 0x400
   1687c:	add	r0, sp, #104	; 0x68
   16880:	bl	11234 <strftime@plt>
   16884:	cmp	r0, #0
   16888:	beq	15f54 <__assert_fail@plt+0x4b70>
   1688c:	sub	r5, r0, #1
   16890:	ldr	r3, [sp, #28]
   16894:	subs	r3, r3, #45	; 0x2d
   16898:	movne	r3, #1
   1689c:	cmp	r9, #0
   168a0:	movlt	r3, #0
   168a4:	cmp	r3, #0
   168a8:	moveq	r9, #0
   168ac:	mov	r7, r9
   168b0:	cmp	r9, r5
   168b4:	movcc	r9, r5
   168b8:	ldr	r3, [sp, #24]
   168bc:	sub	r3, r3, fp
   168c0:	cmp	r3, r9
   168c4:	bls	166f0 <__assert_fail@plt+0x530c>
   168c8:	cmp	r6, #0
   168cc:	beq	16928 <__assert_fail@plt+0x5544>
   168d0:	cmp	r7, r5
   168d4:	bls	16900 <__assert_fail@plt+0x551c>
   168d8:	sub	r7, r7, r5
   168dc:	ldr	r3, [sp, #28]
   168e0:	cmp	r3, #43	; 0x2b
   168e4:	cmpne	r3, #48	; 0x30
   168e8:	mov	r2, r7
   168ec:	moveq	r1, #48	; 0x30
   168f0:	movne	r1, #32
   168f4:	mov	r0, r6
   168f8:	bl	112e8 <memset@plt>
   168fc:	add	r6, r6, r7
   16900:	cmp	r8, #0
   16904:	bne	16700 <__assert_fail@plt+0x531c>
   16908:	ldr	r3, [sp, #76]	; 0x4c
   1690c:	cmp	r3, #0
   16910:	beq	16714 <__assert_fail@plt+0x5330>
   16914:	mov	r2, r5
   16918:	add	r1, sp, #105	; 0x69
   1691c:	mov	r0, r6
   16920:	bl	15e08 <__assert_fail@plt+0x4a24>
   16924:	add	r6, r6, r5
   16928:	add	fp, fp, r9
   1692c:	b	15f54 <__assert_fail@plt+0x4b70>
   16930:	ldr	ip, [sp, #80]	; 0x50
   16934:	cmp	ip, #2
   16938:	movw	r2, #9999	; 0x270f
   1693c:	moveq	r0, #99	; 0x63
   16940:	movne	r0, r2
   16944:	cmp	ip, r9
   16948:	movge	r2, #0
   1694c:	movlt	r2, #1
   16950:	cmp	r3, r0
   16954:	orrhi	r2, r2, #1
   16958:	b	167a8 <__assert_fail@plt+0x53c4>
   1695c:	cmp	r8, #0
   16960:	rsbne	r3, r3, #0
   16964:	add	r5, sp, #102	; 0x66
   16968:	mov	r7, #58	; 0x3a
   1696c:	movw	lr, #52429	; 0xcccd
   16970:	movt	lr, #52428	; 0xcccc
   16974:	b	1697c <__assert_fail@plt+0x5598>
   16978:	mov	r3, r1
   1697c:	tst	r0, #1
   16980:	subne	ip, r5, #1
   16984:	strbne	r7, [r5, #-1]
   16988:	moveq	ip, r5
   1698c:	sub	r5, ip, #1
   16990:	umull	r2, r1, lr, r3
   16994:	lsr	r1, r1, #3
   16998:	add	r2, r1, r1, lsl #2
   1699c:	sub	r2, r3, r2, lsl #1
   169a0:	add	r2, r2, #48	; 0x30
   169a4:	strb	r2, [ip, #-1]
   169a8:	asrs	r0, r0, #1
   169ac:	movne	r2, #1
   169b0:	moveq	r2, #0
   169b4:	cmp	r3, #9
   169b8:	movls	r3, r2
   169bc:	orrhi	r3, r2, #1
   169c0:	cmp	r3, #0
   169c4:	bne	16978 <__assert_fail@plt+0x5594>
   169c8:	ldr	r3, [sp, #28]
   169cc:	cmp	r3, #0
   169d0:	moveq	r3, #48	; 0x30
   169d4:	str	r3, [sp, #28]
   169d8:	ldr	r3, [sp, #80]	; 0x50
   169dc:	cmp	r9, #0
   169e0:	movlt	r9, r3
   169e4:	cmp	r8, #0
   169e8:	bne	17648 <__assert_fail@plt+0x6264>
   169ec:	ldr	r3, [sp, #84]	; 0x54
   169f0:	cmp	r3, #0
   169f4:	bne	17744 <__assert_fail@plt+0x6360>
   169f8:	add	r7, sp, #102	; 0x66
   169fc:	sub	r7, r7, r5
   16a00:	ldr	r3, [sp, #28]
   16a04:	subs	r3, r3, #45	; 0x2d
   16a08:	movne	r3, #1
   16a0c:	sub	r8, r9, r7
   16a10:	cmp	r8, #0
   16a14:	movle	r8, #0
   16a18:	andgt	r8, r3, #1
   16a1c:	cmp	r8, #0
   16a20:	moveq	r8, r3
   16a24:	b	176b4 <__assert_fail@plt+0x62d0>
   16a28:	cmp	r6, #0
   16a2c:	beq	16a44 <__assert_fail@plt+0x5660>
   16a30:	mov	r2, sl
   16a34:	mov	r1, #32
   16a38:	mov	r0, r6
   16a3c:	bl	112e8 <memset@plt>
   16a40:	add	r6, r6, sl
   16a44:	add	fp, fp, sl
   16a48:	sub	r9, r9, sl
   16a4c:	b	17690 <__assert_fail@plt+0x62ac>
   16a50:	mov	r3, #34	; 0x22
   16a54:	ldr	r2, [sp, #32]
   16a58:	str	r3, [r2]
   16a5c:	b	15f9c <__assert_fail@plt+0x4bb8>
   16a60:	mov	r3, #34	; 0x22
   16a64:	ldr	r2, [sp, #32]
   16a68:	str	r3, [r2]
   16a6c:	b	15f9c <__assert_fail@plt+0x4bb8>
   16a70:	mov	r2, r7
   16a74:	mov	r1, r5
   16a78:	mov	r0, r6
   16a7c:	bl	1112c <memcpy@plt>
   16a80:	b	17738 <__assert_fail@plt+0x6354>
   16a84:	cmp	sl, #0
   16a88:	bne	163e4 <__assert_fail@plt+0x5000>
   16a8c:	ldr	r3, [sp, #28]
   16a90:	cmp	r3, #0
   16a94:	lsreq	r3, r9, #31
   16a98:	movne	r3, #0
   16a9c:	cmp	r3, #0
   16aa0:	bne	1778c <__assert_fail@plt+0x63a8>
   16aa4:	sub	r7, r9, #6
   16aa8:	bic	r7, r7, r7, asr #31
   16aac:	movw	sl, #57756	; 0xe19c
   16ab0:	movt	sl, #1
   16ab4:	b	165d0 <__assert_fail@plt+0x51ec>
   16ab8:	cmp	sl, #69	; 0x45
   16abc:	beq	163e4 <__assert_fail@plt+0x5000>
   16ac0:	ldr	r3, [sp, #40]	; 0x28
   16ac4:	ldr	r3, [r3, #8]
   16ac8:	mov	r2, #2
   16acc:	str	r2, [sp, #80]	; 0x50
   16ad0:	b	16824 <__assert_fail@plt+0x5440>
   16ad4:	cmp	sl, #69	; 0x45
   16ad8:	beq	163e4 <__assert_fail@plt+0x5000>
   16adc:	ldr	r3, [sp, #64]	; 0x40
   16ae0:	mov	r2, #2
   16ae4:	str	r2, [sp, #80]	; 0x50
   16ae8:	b	16824 <__assert_fail@plt+0x5440>
   16aec:	cmp	sl, #69	; 0x45
   16af0:	beq	163e4 <__assert_fail@plt+0x5000>
   16af4:	ldr	r3, [sp, #40]	; 0x28
   16af8:	ldr	r3, [r3, #8]
   16afc:	b	1680c <__assert_fail@plt+0x5428>
   16b00:	cmp	sl, #69	; 0x45
   16b04:	beq	163e4 <__assert_fail@plt+0x5000>
   16b08:	ldr	r3, [sp, #64]	; 0x40
   16b0c:	b	1680c <__assert_fail@plt+0x5428>
   16b10:	cmp	sl, #69	; 0x45
   16b14:	beq	163e4 <__assert_fail@plt+0x5000>
   16b18:	ldr	r3, [sp, #40]	; 0x28
   16b1c:	ldr	r3, [r3, #28]
   16b20:	cmn	r3, #1
   16b24:	movge	r8, #0
   16b28:	movlt	r8, #1
   16b2c:	add	r3, r3, #1
   16b30:	mov	r0, #0
   16b34:	str	r0, [sp, #84]	; 0x54
   16b38:	mov	r2, #3
   16b3c:	str	r2, [sp, #80]	; 0x50
   16b40:	b	16830 <__assert_fail@plt+0x544c>
   16b44:	cmp	sl, #69	; 0x45
   16b48:	beq	163e4 <__assert_fail@plt+0x5000>
   16b4c:	ldr	r3, [sp, #40]	; 0x28
   16b50:	ldr	r3, [r3, #4]
   16b54:	mov	r2, #2
   16b58:	str	r2, [sp, #80]	; 0x50
   16b5c:	b	16824 <__assert_fail@plt+0x5440>
   16b60:	cmp	sl, #69	; 0x45
   16b64:	beq	163e4 <__assert_fail@plt+0x5000>
   16b68:	ldr	r3, [sp, #40]	; 0x28
   16b6c:	ldr	r3, [r3, #16]
   16b70:	cmn	r3, #1
   16b74:	movge	r8, #0
   16b78:	movlt	r8, #1
   16b7c:	add	r3, r3, #1
   16b80:	mov	r0, #0
   16b84:	str	r0, [sp, #84]	; 0x54
   16b88:	mov	r2, #2
   16b8c:	str	r2, [sp, #80]	; 0x50
   16b90:	b	16830 <__assert_fail@plt+0x544c>
   16b94:	cmp	sl, #69	; 0x45
   16b98:	beq	163e4 <__assert_fail@plt+0x5000>
   16b9c:	cmp	r9, #0
   16ba0:	movle	r9, #9
   16ba4:	ldr	r3, [sp, #1188]	; 0x4a4
   16ba8:	mov	r5, #9
   16bac:	ldr	r0, [sp, #60]	; 0x3c
   16bb0:	b	16bc4 <__assert_fail@plt+0x57e0>
   16bb4:	sub	r5, r5, #1
   16bb8:	smull	r1, r2, r0, r3
   16bbc:	asr	r3, r3, #31
   16bc0:	rsb	r3, r3, r2, asr #2
   16bc4:	cmp	r5, r9
   16bc8:	bgt	16bb4 <__assert_fail@plt+0x57d0>
   16bcc:	cmp	r5, #1
   16bd0:	ble	16bf0 <__assert_fail@plt+0x580c>
   16bd4:	smull	r1, r2, r0, r3
   16bd8:	asr	r1, r3, #31
   16bdc:	rsb	r2, r1, r2, asr #2
   16be0:	add	r2, r2, r2, lsl #2
   16be4:	cmp	r3, r2, lsl #1
   16be8:	beq	16bb4 <__assert_fail@plt+0x57d0>
   16bec:	b	16bf8 <__assert_fail@plt+0x5814>
   16bf0:	cmp	r5, #1
   16bf4:	bne	16c44 <__assert_fail@plt+0x5860>
   16bf8:	add	r2, sp, #1120	; 0x460
   16bfc:	add	r2, r2, #8
   16c00:	add	r1, r2, r5
   16c04:	sub	r1, r1, #1040	; 0x410
   16c08:	sub	r1, r1, #1
   16c0c:	rsb	r0, r2, #1040	; 0x410
   16c10:	add	r0, r0, #1
   16c14:	ldr	ip, [sp, #60]	; 0x3c
   16c18:	smull	r2, lr, ip, r3
   16c1c:	asr	r2, r3, #31
   16c20:	rsb	r2, r2, lr, asr #2
   16c24:	add	lr, r2, r2, lsl #2
   16c28:	sub	r3, r3, lr, lsl #1
   16c2c:	add	r3, r3, #48	; 0x30
   16c30:	strb	r3, [r1], #-1
   16c34:	mov	r3, r2
   16c38:	add	r2, r0, r1
   16c3c:	cmp	r2, #0
   16c40:	bgt	16c18 <__assert_fail@plt+0x5834>
   16c44:	ldr	r3, [sp, #28]
   16c48:	cmp	r3, #0
   16c4c:	moveq	r3, #48	; 0x30
   16c50:	str	r3, [sp, #28]
   16c54:	mov	r7, r5
   16c58:	ldr	r3, [sp, #24]
   16c5c:	sub	r3, r3, fp
   16c60:	cmp	r3, r5
   16c64:	bls	16cec <__assert_fail@plt+0x5908>
   16c68:	cmp	r6, #0
   16c6c:	beq	16c90 <__assert_fail@plt+0x58ac>
   16c70:	ldr	r3, [sp, #76]	; 0x4c
   16c74:	cmp	r3, #0
   16c78:	beq	16cfc <__assert_fail@plt+0x5918>
   16c7c:	mov	r2, r5
   16c80:	add	r1, sp, #88	; 0x58
   16c84:	mov	r0, r6
   16c88:	bl	15e08 <__assert_fail@plt+0x4a24>
   16c8c:	add	r6, r6, r7
   16c90:	add	fp, r7, fp
   16c94:	ldr	r3, [sp, #28]
   16c98:	cmp	r3, #45	; 0x2d
   16c9c:	beq	177f0 <__assert_fail@plt+0x640c>
   16ca0:	sub	r5, r9, r5
   16ca4:	ldr	r3, [sp, #24]
   16ca8:	sub	r3, r3, fp
   16cac:	cmp	r3, r5
   16cb0:	bls	16d10 <__assert_fail@plt+0x592c>
   16cb4:	cmp	r6, #0
   16cb8:	cmpne	r5, #0
   16cbc:	beq	16ce4 <__assert_fail@plt+0x5900>
   16cc0:	ldr	r3, [sp, #28]
   16cc4:	cmp	r3, #43	; 0x2b
   16cc8:	cmpne	r3, #48	; 0x30
   16ccc:	mov	r2, r5
   16cd0:	moveq	r1, #48	; 0x30
   16cd4:	movne	r1, #32
   16cd8:	mov	r0, r6
   16cdc:	bl	112e8 <memset@plt>
   16ce0:	add	r6, r6, r5
   16ce4:	add	fp, fp, r5
   16ce8:	b	15f54 <__assert_fail@plt+0x4b70>
   16cec:	mov	r3, #34	; 0x22
   16cf0:	ldr	r2, [sp, #32]
   16cf4:	str	r3, [r2]
   16cf8:	b	15f9c <__assert_fail@plt+0x4bb8>
   16cfc:	mov	r2, r5
   16d00:	add	r1, sp, #88	; 0x58
   16d04:	mov	r0, r6
   16d08:	bl	1112c <memcpy@plt>
   16d0c:	b	16c8c <__assert_fail@plt+0x58a8>
   16d10:	mov	r3, #34	; 0x22
   16d14:	ldr	r2, [sp, #32]
   16d18:	str	r3, [r2]
   16d1c:	b	15f9c <__assert_fail@plt+0x4bb8>
   16d20:	ldr	r2, [sp, #28]
   16d24:	mvn	r3, r9
   16d28:	lsr	r3, r3, #31
   16d2c:	cmp	r2, #45	; 0x2d
   16d30:	moveq	r3, #0
   16d34:	cmp	r3, #0
   16d38:	moveq	r9, #0
   16d3c:	mov	r5, r9
   16d40:	cmp	r9, #1
   16d44:	movcc	r9, #1
   16d48:	ldr	r3, [sp, #24]
   16d4c:	sub	r3, r3, fp
   16d50:	cmp	r3, r9
   16d54:	bls	16da0 <__assert_fail@plt+0x59bc>
   16d58:	cmp	r6, #0
   16d5c:	beq	16d98 <__assert_fail@plt+0x59b4>
   16d60:	cmp	r5, #1
   16d64:	bls	16d90 <__assert_fail@plt+0x59ac>
   16d68:	sub	r5, r5, #1
   16d6c:	ldr	r3, [sp, #28]
   16d70:	cmp	r3, #43	; 0x2b
   16d74:	cmpne	r3, #48	; 0x30
   16d78:	mov	r2, r5
   16d7c:	moveq	r1, #48	; 0x30
   16d80:	movne	r1, #32
   16d84:	mov	r0, r6
   16d88:	bl	112e8 <memset@plt>
   16d8c:	add	r6, r6, r5
   16d90:	mov	r3, #10
   16d94:	strb	r3, [r6], #1
   16d98:	add	fp, fp, r9
   16d9c:	b	15f54 <__assert_fail@plt+0x4b70>
   16da0:	mov	r3, #34	; 0x22
   16da4:	ldr	r2, [sp, #32]
   16da8:	str	r3, [r2]
   16dac:	b	15f9c <__assert_fail@plt+0x4bb8>
   16db0:	mov	r8, #1
   16db4:	b	16dbc <__assert_fail@plt+0x59d8>
   16db8:	mov	r8, #0
   16dbc:	cmp	r5, #0
   16dc0:	movne	r8, r5
   16dc4:	mov	r1, #112	; 0x70
   16dc8:	cmp	r5, #0
   16dcc:	ldr	r3, [sp, #76]	; 0x4c
   16dd0:	movne	r3, #0
   16dd4:	str	r3, [sp, #76]	; 0x4c
   16dd8:	mov	r3, #32
   16ddc:	strb	r3, [sp, #88]	; 0x58
   16de0:	mov	r3, #37	; 0x25
   16de4:	strb	r3, [sp, #89]	; 0x59
   16de8:	cmp	sl, #0
   16dec:	addeq	r3, sp, #90	; 0x5a
   16df0:	beq	16864 <__assert_fail@plt+0x5480>
   16df4:	b	1685c <__assert_fail@plt+0x5478>
   16df8:	ldr	r3, [sp, #40]	; 0x28
   16dfc:	ldr	r2, [r3, #16]
   16e00:	cmp	sl, #79	; 0x4f
   16e04:	moveq	r1, #113	; 0x71
   16e08:	beq	16848 <__assert_fail@plt+0x5464>
   16e0c:	mov	r3, #11
   16e10:	mul	r3, r3, r2
   16e14:	asr	r3, r3, #5
   16e18:	add	r3, r3, #1
   16e1c:	mov	r0, #0
   16e20:	str	r0, [sp, #84]	; 0x54
   16e24:	mov	r8, r0
   16e28:	mov	r2, #1
   16e2c:	str	r2, [sp, #80]	; 0x50
   16e30:	b	16964 <__assert_fail@plt+0x5580>
   16e34:	cmp	sl, #69	; 0x45
   16e38:	beq	163e4 <__assert_fail@plt+0x5000>
   16e3c:	ldr	r3, [sp, #40]	; 0x28
   16e40:	ldr	r3, [r3]
   16e44:	mov	r2, #2
   16e48:	str	r2, [sp, #80]	; 0x50
   16e4c:	b	16824 <__assert_fail@plt+0x5440>
   16e50:	ldr	r1, [sp, #40]	; 0x28
   16e54:	ldrd	r2, [r1]
   16e58:	strd	r2, [sp, #104]	; 0x68
   16e5c:	ldrd	r2, [r1, #8]
   16e60:	strd	r2, [sp, #112]	; 0x70
   16e64:	ldrd	r2, [r1, #16]
   16e68:	strd	r2, [sp, #120]	; 0x78
   16e6c:	ldrd	r2, [r1, #24]
   16e70:	strd	r2, [sp, #128]	; 0x80
   16e74:	ldrd	r2, [r1, #32]
   16e78:	strd	r2, [sp, #136]	; 0x88
   16e7c:	ldr	r3, [r1, #40]	; 0x28
   16e80:	str	r3, [sp, #144]	; 0x90
   16e84:	mvn	r3, #0
   16e88:	str	r3, [sp, #132]	; 0x84
   16e8c:	add	r1, sp, #104	; 0x68
   16e90:	ldr	r0, [sp, #1184]	; 0x4a0
   16e94:	bl	1a080 <__assert_fail@plt+0x8c9c>
   16e98:	ldr	r3, [sp, #132]	; 0x84
   16e9c:	cmp	r3, #0
   16ea0:	blt	16f00 <__assert_fail@plt+0x5b1c>
   16ea4:	lsr	r8, r0, #31
   16ea8:	mov	r2, r0
   16eac:	add	r5, sp, #102	; 0x66
   16eb0:	ldr	r1, [sp, #60]	; 0x3c
   16eb4:	smull	r3, ip, r1, r2
   16eb8:	asr	ip, ip, #2
   16ebc:	asr	lr, r2, #31
   16ec0:	sub	r3, ip, lr
   16ec4:	add	r3, r3, r3, lsl #2
   16ec8:	sub	r3, r2, r3, lsl #1
   16ecc:	sub	r2, ip, lr
   16ed0:	cmp	r0, #0
   16ed4:	rsblt	r3, r3, #48	; 0x30
   16ed8:	addge	r3, r3, #48	; 0x30
   16edc:	uxtb	r3, r3
   16ee0:	strb	r3, [r5, #-1]!
   16ee4:	cmp	r2, #0
   16ee8:	bne	16eb4 <__assert_fail@plt+0x5ad0>
   16eec:	mov	r3, #0
   16ef0:	str	r3, [sp, #84]	; 0x54
   16ef4:	mov	r3, #1
   16ef8:	str	r3, [sp, #80]	; 0x50
   16efc:	b	169c8 <__assert_fail@plt+0x55e4>
   16f00:	mov	r3, #75	; 0x4b
   16f04:	ldr	r2, [sp, #32]
   16f08:	str	r3, [r2]
   16f0c:	b	15f9c <__assert_fail@plt+0x4bb8>
   16f10:	cmp	sl, #79	; 0x4f
   16f14:	beq	163e4 <__assert_fail@plt+0x5000>
   16f18:	mov	r1, #88	; 0x58
   16f1c:	mov	r8, #0
   16f20:	b	16dd8 <__assert_fail@plt+0x59f4>
   16f24:	ldr	r3, [sp, #28]
   16f28:	subs	r3, r3, #45	; 0x2d
   16f2c:	movne	r3, #1
   16f30:	cmp	r9, #0
   16f34:	movlt	r3, #0
   16f38:	cmp	r3, #0
   16f3c:	moveq	r9, #0
   16f40:	mov	r5, r9
   16f44:	cmp	r9, #1
   16f48:	movcc	r9, #1
   16f4c:	ldr	r3, [sp, #24]
   16f50:	sub	r3, r3, fp
   16f54:	cmp	r3, r9
   16f58:	bls	16fa4 <__assert_fail@plt+0x5bc0>
   16f5c:	cmp	r6, #0
   16f60:	beq	16f9c <__assert_fail@plt+0x5bb8>
   16f64:	cmp	r5, #1
   16f68:	bls	16f94 <__assert_fail@plt+0x5bb0>
   16f6c:	sub	r5, r5, #1
   16f70:	ldr	r3, [sp, #28]
   16f74:	cmp	r3, #43	; 0x2b
   16f78:	cmpne	r3, #48	; 0x30
   16f7c:	mov	r2, r5
   16f80:	moveq	r1, #48	; 0x30
   16f84:	movne	r1, #32
   16f88:	mov	r0, r6
   16f8c:	bl	112e8 <memset@plt>
   16f90:	add	r6, r6, r5
   16f94:	mov	r3, #9
   16f98:	strb	r3, [r6], #1
   16f9c:	add	fp, fp, r9
   16fa0:	b	15f54 <__assert_fail@plt+0x4b70>
   16fa4:	mov	r3, #34	; 0x22
   16fa8:	ldr	r2, [sp, #32]
   16fac:	str	r3, [r2]
   16fb0:	b	15f9c <__assert_fail@plt+0x4bb8>
   16fb4:	ldr	r3, [sp, #40]	; 0x28
   16fb8:	ldr	r3, [r3, #24]
   16fbc:	add	r3, r3, #6
   16fc0:	ldr	r2, [sp, #52]	; 0x34
   16fc4:	smull	r0, r2, r2, r3
   16fc8:	add	r0, r2, r3
   16fcc:	asr	r2, r3, #31
   16fd0:	rsb	r2, r2, r0, asr #2
   16fd4:	rsb	r2, r2, r2, lsl #3
   16fd8:	sub	r3, r3, r2
   16fdc:	add	r3, r3, #1
   16fe0:	mov	r2, #1
   16fe4:	str	r2, [sp, #80]	; 0x50
   16fe8:	b	16824 <__assert_fail@plt+0x5440>
   16fec:	cmp	sl, #69	; 0x45
   16ff0:	beq	163e4 <__assert_fail@plt+0x5000>
   16ff4:	ldr	r2, [sp, #40]	; 0x28
   16ff8:	ldr	r3, [r2, #28]
   16ffc:	ldr	r2, [r2, #24]
   17000:	sub	r3, r3, r2
   17004:	add	r3, r3, #7
   17008:	ldr	r2, [sp, #52]	; 0x34
   1700c:	smull	r0, r2, r2, r3
   17010:	add	r2, r2, r3
   17014:	asr	r3, r3, #31
   17018:	rsb	r3, r3, r2, asr #2
   1701c:	mov	r2, #2
   17020:	str	r2, [sp, #80]	; 0x50
   17024:	b	16824 <__assert_fail@plt+0x5440>
   17028:	cmp	sl, #69	; 0x45
   1702c:	beq	163e4 <__assert_fail@plt+0x5000>
   17030:	ldr	r2, [sp, #40]	; 0x28
   17034:	ldr	r5, [r2, #20]
   17038:	cmp	r5, #0
   1703c:	movlt	r0, #300	; 0x12c
   17040:	mvnge	r0, #99	; 0x63
   17044:	add	r0, r5, r0
   17048:	ldr	r7, [r2, #28]
   1704c:	ldr	r2, [r2, #24]
   17050:	str	r2, [sp, #80]	; 0x50
   17054:	sub	r2, r7, r2
   17058:	add	r2, r2, #380	; 0x17c
   1705c:	add	r2, r2, #2
   17060:	ldr	ip, [sp, #52]	; 0x34
   17064:	smull	ip, lr, ip, r2
   17068:	add	lr, lr, r2
   1706c:	asr	ip, r2, #31
   17070:	rsb	ip, ip, lr, asr #2
   17074:	rsb	ip, ip, ip, lsl #3
   17078:	sub	ip, r2, ip
   1707c:	sub	r8, r7, ip
   17080:	adds	r8, r8, #3
   17084:	bmi	17170 <__assert_fail@plt+0x5d8c>
   17088:	tst	r0, #3
   1708c:	movne	r2, #0
   17090:	bne	170cc <__assert_fail@plt+0x5ce8>
   17094:	ldr	r2, [sp, #56]	; 0x38
   17098:	smull	ip, r2, r2, r0
   1709c:	asr	ip, r0, #31
   170a0:	rsb	r2, ip, r2, asr #5
   170a4:	mov	ip, #100	; 0x64
   170a8:	mls	r2, ip, r2, r0
   170ac:	cmp	r2, #0
   170b0:	movne	r2, #1
   170b4:	bne	170cc <__assert_fail@plt+0x5ce8>
   170b8:	mov	ip, #400	; 0x190
   170bc:	sdiv	r2, r0, ip
   170c0:	mls	r2, ip, r2, r0
   170c4:	clz	r2, r2
   170c8:	lsr	r2, r2, #5
   170cc:	add	r2, r2, #364	; 0x16c
   170d0:	add	r2, r2, #1
   170d4:	sub	r2, r7, r2
   170d8:	ldr	r0, [sp, #80]	; 0x50
   170dc:	sub	r0, r2, r0
   170e0:	add	r0, r0, #380	; 0x17c
   170e4:	add	r0, r0, #2
   170e8:	ldr	ip, [sp, #52]	; 0x34
   170ec:	smull	ip, lr, ip, r0
   170f0:	add	lr, lr, r0
   170f4:	asr	ip, r0, #31
   170f8:	rsb	ip, ip, lr, asr #2
   170fc:	rsb	ip, ip, ip, lsl #3
   17100:	sub	ip, r0, ip
   17104:	sub	lr, r2, ip
   17108:	add	lr, lr, #3
   1710c:	cmp	lr, #0
   17110:	movge	r8, lr
   17114:	mvn	lr, lr
   17118:	lsr	lr, lr, #31
   1711c:	cmp	r3, #71	; 0x47
   17120:	beq	17228 <__assert_fail@plt+0x5e44>
   17124:	cmp	r3, #103	; 0x67
   17128:	bne	17258 <__assert_fail@plt+0x5e74>
   1712c:	ldr	ip, [sp, #56]	; 0x38
   17130:	smull	r2, r3, ip, r5
   17134:	asr	r2, r5, #31
   17138:	rsb	r2, r2, r3, asr #5
   1713c:	mov	r0, #100	; 0x64
   17140:	mls	r2, r0, r2, r5
   17144:	add	r2, r2, lr
   17148:	smull	r3, ip, ip, r2
   1714c:	asr	r3, r2, #31
   17150:	rsb	r3, r3, ip, asr #5
   17154:	mls	r3, r0, r3, r2
   17158:	cmp	r3, #0
   1715c:	blt	17200 <__assert_fail@plt+0x5e1c>
   17160:	mov	r8, #0
   17164:	mov	r2, #2
   17168:	str	r2, [sp, #80]	; 0x50
   1716c:	b	16784 <__assert_fail@plt+0x53a0>
   17170:	sub	r0, r0, #1
   17174:	tst	r0, #3
   17178:	movne	r2, #0
   1717c:	bne	171b8 <__assert_fail@plt+0x5dd4>
   17180:	ldr	r2, [sp, #56]	; 0x38
   17184:	smull	ip, r2, r2, r0
   17188:	asr	ip, r0, #31
   1718c:	rsb	r2, ip, r2, asr #5
   17190:	mov	ip, #100	; 0x64
   17194:	mls	r2, ip, r2, r0
   17198:	cmp	r2, #0
   1719c:	movne	r2, #1
   171a0:	bne	171b8 <__assert_fail@plt+0x5dd4>
   171a4:	mov	ip, #400	; 0x190
   171a8:	sdiv	r2, r0, ip
   171ac:	mls	r2, ip, r2, r0
   171b0:	clz	r2, r2
   171b4:	lsr	r2, r2, #5
   171b8:	add	r2, r2, #364	; 0x16c
   171bc:	add	r2, r2, #1
   171c0:	add	r2, r2, r7
   171c4:	ldr	r0, [sp, #80]	; 0x50
   171c8:	sub	r0, r2, r0
   171cc:	add	r0, r0, #380	; 0x17c
   171d0:	add	r0, r0, #2
   171d4:	ldr	ip, [sp, #52]	; 0x34
   171d8:	smull	ip, lr, ip, r0
   171dc:	add	lr, lr, r0
   171e0:	asr	ip, r0, #31
   171e4:	rsb	ip, ip, lr, asr #2
   171e8:	rsb	ip, ip, ip, lsl #3
   171ec:	sub	r0, r0, ip
   171f0:	sub	r0, r2, r0
   171f4:	add	r8, r0, #3
   171f8:	mvn	lr, #0
   171fc:	b	1711c <__assert_fail@plt+0x5d38>
   17200:	movw	r2, #63636	; 0xf894
   17204:	movt	r2, #65535	; 0xffff
   17208:	sub	r2, r2, lr
   1720c:	cmp	r2, r5
   17210:	rsbgt	r3, r3, #0
   17214:	addle	r3, r3, #100	; 0x64
   17218:	mov	r8, #0
   1721c:	mov	r2, #2
   17220:	str	r2, [sp, #80]	; 0x50
   17224:	b	16784 <__assert_fail@plt+0x53a0>
   17228:	movw	r3, #63636	; 0xf894
   1722c:	movt	r3, #65535	; 0xffff
   17230:	sub	r3, r3, lr
   17234:	cmp	r5, r3
   17238:	movge	r8, #0
   1723c:	movlt	r8, #1
   17240:	add	r3, r5, #1888	; 0x760
   17244:	add	r3, r3, #12
   17248:	add	r3, r3, lr
   1724c:	mov	r2, #4
   17250:	str	r2, [sp, #80]	; 0x50
   17254:	b	16784 <__assert_fail@plt+0x53a0>
   17258:	ldr	r3, [sp, #52]	; 0x34
   1725c:	smull	r2, r3, r3, r8
   17260:	add	r2, r3, r8
   17264:	asr	r3, r8, #31
   17268:	rsb	r3, r3, r2, asr #2
   1726c:	add	r3, r3, #1
   17270:	mov	r2, #2
   17274:	str	r2, [sp, #80]	; 0x50
   17278:	b	16824 <__assert_fail@plt+0x5440>
   1727c:	cmp	sl, #69	; 0x45
   17280:	beq	163e4 <__assert_fail@plt+0x5000>
   17284:	ldr	ip, [sp, #40]	; 0x28
   17288:	ldr	r3, [ip, #24]
   1728c:	add	r3, r3, #6
   17290:	ldr	lr, [sp, #52]	; 0x34
   17294:	smull	r0, r2, lr, r3
   17298:	add	r0, r2, r3
   1729c:	asr	r2, r3, #31
   172a0:	rsb	r2, r2, r0, asr #2
   172a4:	rsb	r2, r2, r2, lsl #3
   172a8:	sub	r2, r3, r2
   172ac:	ldr	r3, [ip, #28]
   172b0:	sub	r3, r3, r2
   172b4:	add	r3, r3, #7
   172b8:	smull	r0, r2, lr, r3
   172bc:	add	r2, r2, r3
   172c0:	asr	r3, r3, #31
   172c4:	rsb	r3, r3, r2, asr #2
   172c8:	mov	r2, #2
   172cc:	str	r2, [sp, #80]	; 0x50
   172d0:	b	16824 <__assert_fail@plt+0x5440>
   172d4:	cmp	sl, #69	; 0x45
   172d8:	beq	163e4 <__assert_fail@plt+0x5000>
   172dc:	ldr	r3, [sp, #40]	; 0x28
   172e0:	ldr	r3, [r3, #24]
   172e4:	mov	r2, #1
   172e8:	str	r2, [sp, #80]	; 0x50
   172ec:	b	16824 <__assert_fail@plt+0x5440>
   172f0:	cmp	sl, #69	; 0x45
   172f4:	beq	17638 <__assert_fail@plt+0x6254>
   172f8:	cmp	sl, #79	; 0x4f
   172fc:	beq	163e4 <__assert_fail@plt+0x5000>
   17300:	ldr	r3, [sp, #40]	; 0x28
   17304:	ldr	r3, [r3, #20]
   17308:	movw	r8, #63636	; 0xf894
   1730c:	movt	r8, #65535	; 0xffff
   17310:	cmp	r3, r8
   17314:	movge	r8, #0
   17318:	movlt	r8, #1
   1731c:	add	r3, r3, #1888	; 0x760
   17320:	add	r3, r3, #12
   17324:	mov	r2, #4
   17328:	str	r2, [sp, #80]	; 0x50
   1732c:	b	16784 <__assert_fail@plt+0x53a0>
   17330:	cmp	sl, #69	; 0x45
   17334:	beq	17640 <__assert_fail@plt+0x625c>
   17338:	ldr	r3, [sp, #40]	; 0x28
   1733c:	ldr	r2, [r3, #20]
   17340:	ldr	r3, [sp, #56]	; 0x38
   17344:	smull	r3, r0, r3, r2
   17348:	asr	r3, r2, #31
   1734c:	rsb	r3, r3, r0, asr #5
   17350:	mov	r0, #100	; 0x64
   17354:	mls	r3, r0, r3, r2
   17358:	cmp	r3, #0
   1735c:	blt	17370 <__assert_fail@plt+0x5f8c>
   17360:	mov	r8, #0
   17364:	mov	r2, #2
   17368:	str	r2, [sp, #80]	; 0x50
   1736c:	b	16784 <__assert_fail@plt+0x53a0>
   17370:	movw	r0, #63636	; 0xf894
   17374:	movt	r0, #65535	; 0xffff
   17378:	cmp	r2, r0
   1737c:	rsblt	r3, r3, #0
   17380:	addge	r3, r3, #100	; 0x64
   17384:	b	17360 <__assert_fail@plt+0x5f7c>
   17388:	cmp	r5, #0
   1738c:	ldr	r3, [sp, #76]	; 0x4c
   17390:	movne	r3, #0
   17394:	str	r3, [sp, #76]	; 0x4c
   17398:	ldr	r0, [sp, #48]	; 0x30
   1739c:	bl	11294 <strlen@plt>
   173a0:	mov	r8, r0
   173a4:	ldr	r3, [sp, #28]
   173a8:	subs	r3, r3, #45	; 0x2d
   173ac:	movne	r3, #1
   173b0:	cmp	r9, #0
   173b4:	movlt	r3, #0
   173b8:	cmp	r3, #0
   173bc:	moveq	r9, #0
   173c0:	mov	r7, r9
   173c4:	cmp	r9, r0
   173c8:	movcc	r9, r0
   173cc:	ldr	r3, [sp, #24]
   173d0:	sub	r3, r3, fp
   173d4:	cmp	r3, r9
   173d8:	bls	17444 <__assert_fail@plt+0x6060>
   173dc:	cmp	r6, #0
   173e0:	beq	1743c <__assert_fail@plt+0x6058>
   173e4:	cmp	r7, r0
   173e8:	bls	17414 <__assert_fail@plt+0x6030>
   173ec:	sub	r7, r7, r0
   173f0:	ldr	r3, [sp, #28]
   173f4:	cmp	r3, #43	; 0x2b
   173f8:	cmpne	r3, #48	; 0x30
   173fc:	mov	r2, r7
   17400:	moveq	r1, #48	; 0x30
   17404:	movne	r1, #32
   17408:	mov	r0, r6
   1740c:	bl	112e8 <memset@plt>
   17410:	add	r6, r6, r7
   17414:	cmp	r5, #0
   17418:	bne	17454 <__assert_fail@plt+0x6070>
   1741c:	ldr	r3, [sp, #76]	; 0x4c
   17420:	cmp	r3, #0
   17424:	beq	17468 <__assert_fail@plt+0x6084>
   17428:	mov	r2, r8
   1742c:	ldr	r1, [sp, #48]	; 0x30
   17430:	mov	r0, r6
   17434:	bl	15e08 <__assert_fail@plt+0x4a24>
   17438:	add	r6, r6, r8
   1743c:	add	fp, fp, r9
   17440:	b	15f54 <__assert_fail@plt+0x4b70>
   17444:	mov	r3, #34	; 0x22
   17448:	ldr	r2, [sp, #32]
   1744c:	str	r3, [r2]
   17450:	b	15f9c <__assert_fail@plt+0x4bb8>
   17454:	mov	r2, r8
   17458:	ldr	r1, [sp, #48]	; 0x30
   1745c:	mov	r0, r6
   17460:	bl	15db0 <__assert_fail@plt+0x49cc>
   17464:	b	17438 <__assert_fail@plt+0x6054>
   17468:	mov	r2, r8
   1746c:	ldr	r1, [sp, #48]	; 0x30
   17470:	mov	r0, r6
   17474:	bl	1112c <memcpy@plt>
   17478:	b	17438 <__assert_fail@plt+0x6054>
   1747c:	add	r0, r4, #2
   17480:	mov	lr, #1
   17484:	add	lr, lr, #1
   17488:	mov	r2, r0
   1748c:	ldrb	r3, [r0], #1
   17490:	cmp	r3, #58	; 0x3a
   17494:	bne	163c4 <__assert_fail@plt+0x4fe0>
   17498:	b	17484 <__assert_fail@plt+0x60a0>
   1749c:	mov	lr, #0
   174a0:	ldr	r2, [sp, #40]	; 0x28
   174a4:	ldr	r3, [r2, #32]
   174a8:	cmp	r3, #0
   174ac:	blt	15f54 <__assert_fail@plt+0x4b70>
   174b0:	ldr	r2, [r2, #36]	; 0x24
   174b4:	cmp	r2, #0
   174b8:	movlt	r8, #1
   174bc:	blt	174dc <__assert_fail@plt+0x60f8>
   174c0:	movne	r8, #0
   174c4:	bne	174dc <__assert_fail@plt+0x60f8>
   174c8:	ldr	r3, [sp, #48]	; 0x30
   174cc:	ldrb	r8, [r3]
   174d0:	cmp	r8, #45	; 0x2d
   174d4:	movne	r8, #0
   174d8:	moveq	r8, #1
   174dc:	ldr	r3, [sp, #68]	; 0x44
   174e0:	smull	r0, r3, r3, r2
   174e4:	add	r3, r3, r2
   174e8:	asr	r0, r2, #31
   174ec:	str	r0, [sp, #80]	; 0x50
   174f0:	rsb	r5, r0, r3, asr #11
   174f4:	ldr	ip, [sp, #72]	; 0x48
   174f8:	smull	r0, r3, ip, r2
   174fc:	add	r3, r3, r2
   17500:	ldr	r0, [sp, #80]	; 0x50
   17504:	rsb	r3, r0, r3, asr #5
   17508:	smull	ip, r0, ip, r3
   1750c:	add	r0, r0, r3
   17510:	asr	ip, r3, #31
   17514:	rsb	r0, ip, r0, asr #5
   17518:	rsb	r0, r0, r0, lsl #4
   1751c:	sub	r0, r3, r0, lsl #2
   17520:	rsb	r3, r3, r3, lsl #4
   17524:	sub	r3, r2, r3, lsl #2
   17528:	cmp	lr, #3
   1752c:	ldrls	pc, [pc, lr, lsl #2]
   17530:	b	163e4 <__assert_fail@plt+0x5000>
   17534:	andeq	r7, r1, r4, asr #10
   17538:	andeq	r7, r1, r4, ror #10
   1753c:	andeq	r7, r1, r4, lsl #11
   17540:			; <UNDEFINED> instruction: 0x000175b0
   17544:	mov	r3, #100	; 0x64
   17548:	mla	r3, r3, r5, r0
   1754c:	mov	r0, #0
   17550:	mov	r2, #1
   17554:	str	r2, [sp, #84]	; 0x54
   17558:	mov	r2, #5
   1755c:	str	r2, [sp, #80]	; 0x50
   17560:	b	16830 <__assert_fail@plt+0x544c>
   17564:	mov	r3, #100	; 0x64
   17568:	mla	r3, r3, r5, r0
   1756c:	mov	r0, #4
   17570:	mov	r2, #1
   17574:	str	r2, [sp, #84]	; 0x54
   17578:	mov	r2, #6
   1757c:	str	r2, [sp, #80]	; 0x50
   17580:	b	16830 <__assert_fail@plt+0x544c>
   17584:	mov	r2, #100	; 0x64
   17588:	mul	r0, r2, r0
   1758c:	movw	r2, #10000	; 0x2710
   17590:	mla	r5, r2, r5, r0
   17594:	add	r3, r5, r3
   17598:	mov	r0, #20
   1759c:	mov	r2, #1
   175a0:	str	r2, [sp, #84]	; 0x54
   175a4:	mov	r2, #9
   175a8:	str	r2, [sp, #80]	; 0x50
   175ac:	b	16830 <__assert_fail@plt+0x544c>
   175b0:	cmp	r3, #0
   175b4:	bne	17584 <__assert_fail@plt+0x61a0>
   175b8:	cmp	r0, #0
   175bc:	bne	17564 <__assert_fail@plt+0x6180>
   175c0:	mov	r3, r5
   175c4:	mov	r2, #1
   175c8:	str	r2, [sp, #84]	; 0x54
   175cc:	mov	r2, #3
   175d0:	str	r2, [sp, #80]	; 0x50
   175d4:	b	16830 <__assert_fail@plt+0x544c>
   175d8:	mov	r3, #34	; 0x22
   175dc:	ldr	r2, [sp, #32]
   175e0:	str	r3, [r2]
   175e4:	b	15f9c <__assert_fail@plt+0x4bb8>
   175e8:	mov	r2, r5
   175ec:	mov	r1, r7
   175f0:	mov	r0, r6
   175f4:	bl	1112c <memcpy@plt>
   175f8:	b	16478 <__assert_fail@plt+0x5094>
   175fc:	str	r6, [sp, #28]
   17600:	ldr	r2, [sp, #28]
   17604:	ldr	r3, [sp, #24]
   17608:	cmp	r2, #0
   1760c:	cmpne	r3, #0
   17610:	movne	r3, #0
   17614:	strbne	r3, [r2]
   17618:	ldr	r3, [sp, #32]
   1761c:	ldr	r2, [sp, #44]	; 0x2c
   17620:	str	r2, [r3]
   17624:	b	15fa0 <__assert_fail@plt+0x4bbc>
   17628:	mov	fp, #0
   1762c:	b	17600 <__assert_fail@plt+0x621c>
   17630:	mov	r1, #67	; 0x43
   17634:	b	16848 <__assert_fail@plt+0x5464>
   17638:	mov	r1, #89	; 0x59
   1763c:	b	16848 <__assert_fail@plt+0x5464>
   17640:	mov	r1, #121	; 0x79
   17644:	b	16848 <__assert_fail@plt+0x5464>
   17648:	add	r7, sp, #102	; 0x66
   1764c:	sub	r7, r7, r5
   17650:	sub	sl, r9, #1
   17654:	sub	sl, sl, r7
   17658:	ldr	r3, [sp, #28]
   1765c:	subs	r8, r3, #45	; 0x2d
   17660:	movne	r8, #1
   17664:	cmp	sl, #0
   17668:	movle	r3, #0
   1766c:	andgt	r3, r8, #1
   17670:	cmp	r3, #0
   17674:	bne	17804 <__assert_fail@plt+0x6420>
   17678:	mov	sl, #0
   1767c:	mov	r3, #45	; 0x2d
   17680:	str	r3, [sp, #80]	; 0x50
   17684:	ldr	r3, [sp, #28]
   17688:	cmp	r3, #95	; 0x5f
   1768c:	beq	16a28 <__assert_fail@plt+0x5644>
   17690:	ldr	r3, [sp, #24]
   17694:	sub	r3, r3, fp
   17698:	cmp	r3, #1
   1769c:	bls	16a50 <__assert_fail@plt+0x566c>
   176a0:	cmp	r6, #0
   176a4:	ldrne	r3, [sp, #80]	; 0x50
   176a8:	strbne	r3, [r6], #1
   176ac:	add	fp, fp, #1
   176b0:	sub	r9, r9, #1
   176b4:	cmp	r9, #0
   176b8:	movlt	r8, #0
   176bc:	andge	r8, r8, #1
   176c0:	cmp	r8, #0
   176c4:	moveq	r9, #0
   176c8:	mov	r8, r9
   176cc:	cmp	r9, r7
   176d0:	movcc	r9, r7
   176d4:	ldr	r3, [sp, #24]
   176d8:	sub	r3, r3, fp
   176dc:	cmp	r3, r9
   176e0:	bls	16a60 <__assert_fail@plt+0x567c>
   176e4:	cmp	r6, #0
   176e8:	beq	1773c <__assert_fail@plt+0x6358>
   176ec:	cmp	r8, r7
   176f0:	bls	1771c <__assert_fail@plt+0x6338>
   176f4:	sub	r8, r8, r7
   176f8:	ldr	r3, [sp, #28]
   176fc:	cmp	r3, #43	; 0x2b
   17700:	cmpne	r3, #48	; 0x30
   17704:	mov	r2, r8
   17708:	moveq	r1, #48	; 0x30
   1770c:	movne	r1, #32
   17710:	mov	r0, r6
   17714:	bl	112e8 <memset@plt>
   17718:	add	r6, r6, r8
   1771c:	ldr	r3, [sp, #76]	; 0x4c
   17720:	cmp	r3, #0
   17724:	beq	16a70 <__assert_fail@plt+0x568c>
   17728:	mov	r2, r7
   1772c:	mov	r1, r5
   17730:	mov	r0, r6
   17734:	bl	15e08 <__assert_fail@plt+0x4a24>
   17738:	add	r6, r6, r7
   1773c:	add	fp, fp, r9
   17740:	b	15f54 <__assert_fail@plt+0x4b70>
   17744:	add	r7, sp, #102	; 0x66
   17748:	sub	r7, r7, r5
   1774c:	sub	sl, r9, #1
   17750:	sub	sl, sl, r7
   17754:	ldr	r3, [sp, #28]
   17758:	subs	r3, r3, #45	; 0x2d
   1775c:	movne	r3, #1
   17760:	cmp	sl, #0
   17764:	movle	r8, #0
   17768:	andgt	r8, r3, #1
   1776c:	cmp	r8, #0
   17770:	movne	r3, #43	; 0x2b
   17774:	strne	r3, [sp, #80]	; 0x50
   17778:	bne	17684 <__assert_fail@plt+0x62a0>
   1777c:	mov	r2, #43	; 0x2b
   17780:	str	r2, [sp, #80]	; 0x50
   17784:	mov	sl, #0
   17788:	b	1780c <__assert_fail@plt+0x6428>
   1778c:	movw	r8, #57756	; 0xe19c
   17790:	movt	r8, #1
   17794:	ldr	r3, [sp, #1188]	; 0x4a4
   17798:	str	r3, [sp, #20]
   1779c:	ldr	r3, [sp, #1184]	; 0x4a0
   177a0:	str	r3, [sp, #16]
   177a4:	ldr	r3, [sp, #1180]	; 0x49c
   177a8:	str	r3, [sp, #12]
   177ac:	mov	r7, #4
   177b0:	str	r7, [sp, #8]
   177b4:	mov	r3, #43	; 0x2b
   177b8:	str	r3, [sp, #4]
   177bc:	ldr	r3, [sp, #76]	; 0x4c
   177c0:	str	r3, [sp]
   177c4:	ldr	r3, [sp, #40]	; 0x28
   177c8:	mov	r2, r8
   177cc:	mvn	r1, #0
   177d0:	mov	r0, #0
   177d4:	bl	15e60 <__assert_fail@plt+0x4a7c>
   177d8:	mov	r5, r0
   177dc:	mov	r9, sl
   177e0:	mov	sl, r8
   177e4:	mov	r3, #43	; 0x2b
   177e8:	str	r3, [sp, #28]
   177ec:	b	1662c <__assert_fail@plt+0x5248>
   177f0:	ldr	r3, [sp, #24]
   177f4:	cmp	r3, fp
   177f8:	beq	16d10 <__assert_fail@plt+0x592c>
   177fc:	mov	r5, #0
   17800:	b	16ce4 <__assert_fail@plt+0x5900>
   17804:	mov	r2, #45	; 0x2d
   17808:	str	r2, [sp, #80]	; 0x50
   1780c:	mov	r8, r3
   17810:	b	17684 <__assert_fail@plt+0x62a0>
   17814:	push	{lr}		; (str lr, [sp, #-4]!)
   17818:	sub	sp, sp, #36	; 0x24
   1781c:	mov	ip, #0
   17820:	strb	ip, [sp, #31]
   17824:	ldr	lr, [sp, #44]	; 0x2c
   17828:	str	lr, [sp, #20]
   1782c:	ldr	lr, [sp, #40]	; 0x28
   17830:	str	lr, [sp, #16]
   17834:	add	lr, sp, #31
   17838:	str	lr, [sp, #12]
   1783c:	mvn	lr, #0
   17840:	str	lr, [sp, #8]
   17844:	str	ip, [sp, #4]
   17848:	str	ip, [sp]
   1784c:	bl	15e60 <__assert_fail@plt+0x4a7c>
   17850:	add	sp, sp, #36	; 0x24
   17854:	pop	{pc}		; (ldr pc, [sp], #4)
   17858:	strd	r4, [sp, #-16]!
   1785c:	str	r6, [sp, #8]
   17860:	str	lr, [sp, #12]
   17864:	subs	r4, r0, #0
   17868:	beq	17904 <__assert_fail@plt+0x6520>
   1786c:	mov	r1, #47	; 0x2f
   17870:	mov	r0, r4
   17874:	bl	11360 <strrchr@plt>
   17878:	subs	r5, r0, #0
   1787c:	beq	178dc <__assert_fail@plt+0x64f8>
   17880:	add	r6, r5, #1
   17884:	sub	r3, r6, r4
   17888:	cmp	r3, #6
   1788c:	ble	178dc <__assert_fail@plt+0x64f8>
   17890:	mov	r2, #7
   17894:	movw	r1, #57844	; 0xe1f4
   17898:	movt	r1, #1
   1789c:	sub	r0, r5, #6
   178a0:	bl	113c0 <strncmp@plt>
   178a4:	cmp	r0, #0
   178a8:	bne	178dc <__assert_fail@plt+0x64f8>
   178ac:	mov	r2, #3
   178b0:	movw	r1, #57852	; 0xe1fc
   178b4:	movt	r1, #1
   178b8:	mov	r0, r6
   178bc:	bl	113c0 <strncmp@plt>
   178c0:	cmp	r0, #0
   178c4:	movne	r4, r6
   178c8:	bne	178dc <__assert_fail@plt+0x64f8>
   178cc:	add	r4, r5, #4
   178d0:	movw	r3, #61896	; 0xf1c8
   178d4:	movt	r3, #2
   178d8:	str	r4, [r3]
   178dc:	movw	r3, #62128	; 0xf2b0
   178e0:	movt	r3, #2
   178e4:	str	r4, [r3]
   178e8:	movw	r3, #61900	; 0xf1cc
   178ec:	movt	r3, #2
   178f0:	str	r4, [r3]
   178f4:	ldrd	r4, [sp]
   178f8:	ldr	r6, [sp, #8]
   178fc:	add	sp, sp, #12
   17900:	pop	{pc}		; (ldr pc, [sp], #4)
   17904:	movw	r3, #61912	; 0xf1d8
   17908:	movt	r3, #2
   1790c:	ldr	r3, [r3]
   17910:	mov	r2, #55	; 0x37
   17914:	mov	r1, #1
   17918:	movw	r0, #57788	; 0xe1bc
   1791c:	movt	r0, #1
   17920:	bl	111c8 <fwrite@plt>
   17924:	bl	113cc <abort@plt>
   17928:	mov	r2, #0
   1792c:	mov	r3, #0
   17930:	strd	r2, [r0]
   17934:	strd	r2, [r0, #8]
   17938:	strd	r2, [r0, #16]
   1793c:	strd	r2, [r0, #24]
   17940:	strd	r2, [r0, #32]
   17944:	strd	r2, [r0, #40]	; 0x28
   17948:	cmp	r1, #10
   1794c:	beq	17958 <__assert_fail@plt+0x6574>
   17950:	str	r1, [r0]
   17954:	bx	lr
   17958:	str	r4, [sp, #-8]!
   1795c:	str	lr, [sp, #4]
   17960:	bl	113cc <abort@plt>
   17964:	strd	r4, [sp, #-16]!
   17968:	str	r6, [sp, #8]
   1796c:	str	lr, [sp, #12]
   17970:	mov	r5, r0
   17974:	mov	r6, r1
   17978:	mov	r2, #5
   1797c:	mov	r1, r0
   17980:	mov	r0, #0
   17984:	bl	11168 <dcgettext@plt>
   17988:	mov	r4, r0
   1798c:	cmp	r5, r0
   17990:	beq	179a8 <__assert_fail@plt+0x65c4>
   17994:	mov	r0, r4
   17998:	ldrd	r4, [sp]
   1799c:	ldr	r6, [sp, #8]
   179a0:	add	sp, sp, #12
   179a4:	pop	{pc}		; (ldr pc, [sp], #4)
   179a8:	bl	1c61c <__assert_fail@plt+0xb238>
   179ac:	ldrb	r3, [r0]
   179b0:	bic	r3, r3, #32
   179b4:	cmp	r3, #85	; 0x55
   179b8:	bne	17a3c <__assert_fail@plt+0x6658>
   179bc:	ldrb	r3, [r0, #1]
   179c0:	bic	r3, r3, #32
   179c4:	cmp	r3, #84	; 0x54
   179c8:	bne	17a00 <__assert_fail@plt+0x661c>
   179cc:	ldrb	r3, [r0, #2]
   179d0:	bic	r3, r3, #32
   179d4:	cmp	r3, #70	; 0x46
   179d8:	bne	17a00 <__assert_fail@plt+0x661c>
   179dc:	ldrb	r3, [r0, #3]
   179e0:	cmp	r3, #45	; 0x2d
   179e4:	bne	17a00 <__assert_fail@plt+0x661c>
   179e8:	ldrb	r3, [r0, #4]
   179ec:	cmp	r3, #56	; 0x38
   179f0:	bne	17a00 <__assert_fail@plt+0x661c>
   179f4:	ldrb	r3, [r0, #5]
   179f8:	cmp	r3, #0
   179fc:	beq	17a1c <__assert_fail@plt+0x6638>
   17a00:	movw	r4, #57940	; 0xe254
   17a04:	movt	r4, #1
   17a08:	movw	r3, #57960	; 0xe268
   17a0c:	movt	r3, #1
   17a10:	cmp	r6, #9
   17a14:	movne	r4, r3
   17a18:	b	17994 <__assert_fail@plt+0x65b0>
   17a1c:	ldrb	r2, [r4]
   17a20:	movw	r4, #57956	; 0xe264
   17a24:	movt	r4, #1
   17a28:	movw	r3, #57944	; 0xe258
   17a2c:	movt	r3, #1
   17a30:	cmp	r2, #96	; 0x60
   17a34:	movne	r4, r3
   17a38:	b	17994 <__assert_fail@plt+0x65b0>
   17a3c:	cmp	r3, #71	; 0x47
   17a40:	bne	17a00 <__assert_fail@plt+0x661c>
   17a44:	ldrb	r3, [r0, #1]
   17a48:	bic	r3, r3, #32
   17a4c:	cmp	r3, #66	; 0x42
   17a50:	bne	17a00 <__assert_fail@plt+0x661c>
   17a54:	ldrb	r3, [r0, #2]
   17a58:	cmp	r3, #49	; 0x31
   17a5c:	bne	17a00 <__assert_fail@plt+0x661c>
   17a60:	ldrb	r3, [r0, #3]
   17a64:	cmp	r3, #56	; 0x38
   17a68:	bne	17a00 <__assert_fail@plt+0x661c>
   17a6c:	ldrb	r3, [r0, #4]
   17a70:	cmp	r3, #48	; 0x30
   17a74:	bne	17a00 <__assert_fail@plt+0x661c>
   17a78:	ldrb	r3, [r0, #5]
   17a7c:	cmp	r3, #51	; 0x33
   17a80:	bne	17a00 <__assert_fail@plt+0x661c>
   17a84:	ldrb	r3, [r0, #6]
   17a88:	cmp	r3, #48	; 0x30
   17a8c:	bne	17a00 <__assert_fail@plt+0x661c>
   17a90:	ldrb	r3, [r0, #7]
   17a94:	cmp	r3, #0
   17a98:	bne	17a00 <__assert_fail@plt+0x661c>
   17a9c:	ldrb	r2, [r4]
   17aa0:	movw	r4, #57952	; 0xe260
   17aa4:	movt	r4, #1
   17aa8:	movw	r3, #57948	; 0xe25c
   17aac:	movt	r3, #1
   17ab0:	cmp	r2, #96	; 0x60
   17ab4:	movne	r4, r3
   17ab8:	b	17994 <__assert_fail@plt+0x65b0>
   17abc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ac0:	strd	r6, [sp, #8]
   17ac4:	strd	r8, [sp, #16]
   17ac8:	strd	sl, [sp, #24]
   17acc:	str	lr, [sp, #32]
   17ad0:	sub	sp, sp, #116	; 0x74
   17ad4:	str	r0, [sp, #64]	; 0x40
   17ad8:	mov	r8, r1
   17adc:	str	r2, [sp, #48]	; 0x30
   17ae0:	str	r3, [sp, #24]
   17ae4:	ldr	r7, [sp, #152]	; 0x98
   17ae8:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   17aec:	str	r0, [sp, #76]	; 0x4c
   17af0:	ldr	r3, [sp, #156]	; 0x9c
   17af4:	ubfx	r3, r3, #1, #1
   17af8:	str	r3, [sp, #32]
   17afc:	mov	r3, #1
   17b00:	str	r3, [sp, #40]	; 0x28
   17b04:	mov	r3, #0
   17b08:	str	r3, [sp, #68]	; 0x44
   17b0c:	str	r3, [sp, #36]	; 0x24
   17b10:	str	r3, [sp, #28]
   17b14:	str	r3, [sp, #52]	; 0x34
   17b18:	str	r3, [sp, #60]	; 0x3c
   17b1c:	str	r3, [sp, #72]	; 0x48
   17b20:	movw	r3, #57964	; 0xe26c
   17b24:	movt	r3, #1
   17b28:	str	r3, [sp, #80]	; 0x50
   17b2c:	mov	r9, r8
   17b30:	mov	sl, r7
   17b34:	cmp	sl, #10
   17b38:	ldrls	pc, [pc, sl, lsl #2]
   17b3c:	b	17d00 <__assert_fail@plt+0x691c>
   17b40:	andeq	r7, r1, r0, lsr #23
   17b44:	andeq	r7, r1, r4, ror fp
   17b48:	ldrdeq	r7, [r1], -r8
   17b4c:	andeq	r7, r1, ip, ror #22
   17b50:	andeq	r7, r1, ip, lsl #25
   17b54:			; <UNDEFINED> instruction: 0x00017bb0
   17b58:	andeq	r8, r1, ip, ror pc
   17b5c:	andeq	r7, r1, r4, lsl #26
   17b60:	andeq	r7, r1, ip, ror #23
   17b64:	andeq	r7, r1, ip, ror #23
   17b68:	andeq	r7, r1, ip, ror #23
   17b6c:	mov	r3, #1
   17b70:	str	r3, [sp, #28]
   17b74:	mov	r3, #1
   17b78:	str	r3, [sp, #32]
   17b7c:	str	r3, [sp, #52]	; 0x34
   17b80:	movw	r3, #57960	; 0xe268
   17b84:	movt	r3, #1
   17b88:	str	r3, [sp, #60]	; 0x3c
   17b8c:	mov	fp, #0
   17b90:	mov	sl, #2
   17b94:	mov	r6, #0
   17b98:	ldr	r8, [sp, #64]	; 0x40
   17b9c:	b	18414 <__assert_fail@plt+0x7030>
   17ba0:	mov	fp, sl
   17ba4:	mov	r3, #0
   17ba8:	str	r3, [sp, #32]
   17bac:	b	17b94 <__assert_fail@plt+0x67b0>
   17bb0:	ldr	r3, [sp, #32]
   17bb4:	cmp	r3, #0
   17bb8:	bne	17d18 <__assert_fail@plt+0x6934>
   17bbc:	cmp	r9, #0
   17bc0:	beq	17d3c <__assert_fail@plt+0x6958>
   17bc4:	mov	r3, #34	; 0x22
   17bc8:	ldr	r2, [sp, #64]	; 0x40
   17bcc:	strb	r3, [r2]
   17bd0:	mov	fp, #1
   17bd4:	str	fp, [sp, #28]
   17bd8:	str	fp, [sp, #52]	; 0x34
   17bdc:	movw	r3, #57940	; 0xe254
   17be0:	movt	r3, #1
   17be4:	str	r3, [sp, #60]	; 0x3c
   17be8:	b	17b94 <__assert_fail@plt+0x67b0>
   17bec:	cmp	sl, #10
   17bf0:	bne	17c24 <__assert_fail@plt+0x6840>
   17bf4:	ldr	r3, [sp, #32]
   17bf8:	cmp	r3, #0
   17bfc:	movne	fp, #0
   17c00:	beq	17c4c <__assert_fail@plt+0x6868>
   17c04:	ldr	r0, [sp, #168]	; 0xa8
   17c08:	bl	11294 <strlen@plt>
   17c0c:	str	r0, [sp, #52]	; 0x34
   17c10:	ldr	r3, [sp, #168]	; 0xa8
   17c14:	str	r3, [sp, #60]	; 0x3c
   17c18:	mov	r3, #1
   17c1c:	str	r3, [sp, #28]
   17c20:	b	17b94 <__assert_fail@plt+0x67b0>
   17c24:	mov	r1, sl
   17c28:	ldr	r0, [sp, #80]	; 0x50
   17c2c:	bl	17964 <__assert_fail@plt+0x6580>
   17c30:	str	r0, [sp, #164]	; 0xa4
   17c34:	mov	r1, sl
   17c38:	movw	r0, #57960	; 0xe268
   17c3c:	movt	r0, #1
   17c40:	bl	17964 <__assert_fail@plt+0x6580>
   17c44:	str	r0, [sp, #168]	; 0xa8
   17c48:	b	17bf4 <__assert_fail@plt+0x6810>
   17c4c:	ldr	r3, [sp, #164]	; 0xa4
   17c50:	ldrb	r3, [r3]
   17c54:	cmp	r3, #0
   17c58:	beq	17c84 <__assert_fail@plt+0x68a0>
   17c5c:	ldr	r2, [sp, #164]	; 0xa4
   17c60:	mov	fp, #0
   17c64:	ldr	r1, [sp, #64]	; 0x40
   17c68:	cmp	r9, fp
   17c6c:	strbhi	r3, [r1, fp]
   17c70:	add	fp, fp, #1
   17c74:	ldrb	r3, [r2, #1]!
   17c78:	cmp	r3, #0
   17c7c:	bne	17c68 <__assert_fail@plt+0x6884>
   17c80:	b	17c04 <__assert_fail@plt+0x6820>
   17c84:	mov	fp, #0
   17c88:	b	17c04 <__assert_fail@plt+0x6820>
   17c8c:	ldr	r3, [sp, #32]
   17c90:	cmp	r3, #0
   17c94:	bne	17b74 <__assert_fail@plt+0x6790>
   17c98:	mov	r3, #1
   17c9c:	str	r3, [sp, #28]
   17ca0:	cmp	r9, #0
   17ca4:	beq	17d58 <__assert_fail@plt+0x6974>
   17ca8:	mov	r3, #39	; 0x27
   17cac:	ldr	r2, [sp, #64]	; 0x40
   17cb0:	strb	r3, [r2]
   17cb4:	mov	r3, #0
   17cb8:	str	r3, [sp, #32]
   17cbc:	mov	fp, #1
   17cc0:	str	fp, [sp, #52]	; 0x34
   17cc4:	movw	r3, #57960	; 0xe268
   17cc8:	movt	r3, #1
   17ccc:	str	r3, [sp, #60]	; 0x3c
   17cd0:	mov	sl, #2
   17cd4:	b	17b94 <__assert_fail@plt+0x67b0>
   17cd8:	ldr	r3, [sp, #32]
   17cdc:	cmp	r3, #0
   17ce0:	beq	17ca0 <__assert_fail@plt+0x68bc>
   17ce4:	mov	r3, #1
   17ce8:	str	r3, [sp, #52]	; 0x34
   17cec:	movw	r3, #57960	; 0xe268
   17cf0:	movt	r3, #1
   17cf4:	str	r3, [sp, #60]	; 0x3c
   17cf8:	mov	fp, #0
   17cfc:	b	17b94 <__assert_fail@plt+0x67b0>
   17d00:	bl	113cc <abort@plt>
   17d04:	mov	fp, #0
   17d08:	str	fp, [sp, #32]
   17d0c:	mov	r3, #1
   17d10:	str	r3, [sp, #28]
   17d14:	b	17b94 <__assert_fail@plt+0x67b0>
   17d18:	ldr	r3, [sp, #32]
   17d1c:	str	r3, [sp, #28]
   17d20:	mov	r3, #1
   17d24:	str	r3, [sp, #52]	; 0x34
   17d28:	movw	r3, #57940	; 0xe254
   17d2c:	movt	r3, #1
   17d30:	str	r3, [sp, #60]	; 0x3c
   17d34:	mov	fp, #0
   17d38:	b	17b94 <__assert_fail@plt+0x67b0>
   17d3c:	mov	fp, #1
   17d40:	str	fp, [sp, #28]
   17d44:	str	fp, [sp, #52]	; 0x34
   17d48:	movw	r3, #57940	; 0xe254
   17d4c:	movt	r3, #1
   17d50:	str	r3, [sp, #60]	; 0x3c
   17d54:	b	17b94 <__assert_fail@plt+0x67b0>
   17d58:	mov	r3, #0
   17d5c:	str	r3, [sp, #32]
   17d60:	mov	fp, #1
   17d64:	str	fp, [sp, #52]	; 0x34
   17d68:	movw	r3, #57960	; 0xe268
   17d6c:	movt	r3, #1
   17d70:	str	r3, [sp, #60]	; 0x3c
   17d74:	mov	sl, #2
   17d78:	b	17b94 <__assert_fail@plt+0x67b0>
   17d7c:	mov	r3, r2
   17d80:	add	r4, r6, r2
   17d84:	ldr	r2, [sp, #24]
   17d88:	cmp	r3, #1
   17d8c:	movls	r3, #0
   17d90:	movhi	r3, #1
   17d94:	cmn	r2, #1
   17d98:	movne	r3, #0
   17d9c:	cmp	r3, #0
   17da0:	beq	17db0 <__assert_fail@plt+0x69cc>
   17da4:	ldr	r0, [sp, #48]	; 0x30
   17da8:	bl	11294 <strlen@plt>
   17dac:	str	r0, [sp, #24]
   17db0:	ldr	r3, [sp, #24]
   17db4:	cmp	r4, r3
   17db8:	bhi	18fa4 <__assert_fail@plt+0x7bc0>
   17dbc:	ldr	r3, [sp, #48]	; 0x30
   17dc0:	add	r4, r3, r6
   17dc4:	ldr	r2, [sp, #52]	; 0x34
   17dc8:	ldr	r1, [sp, #60]	; 0x3c
   17dcc:	mov	r0, r4
   17dd0:	bl	11150 <memcmp@plt>
   17dd4:	cmp	r0, #0
   17dd8:	bne	18fa4 <__assert_fail@plt+0x7bc0>
   17ddc:	ldr	r3, [sp, #32]
   17de0:	cmp	r3, #0
   17de4:	bne	17ff4 <__assert_fail@plt+0x6c10>
   17de8:	ldrb	r4, [r4]
   17dec:	cmp	r4, #126	; 0x7e
   17df0:	ldrls	pc, [pc, r4, lsl #2]
   17df4:	b	188a8 <__assert_fail@plt+0x74c4>
   17df8:	andeq	r8, r1, r8, lsr r0
   17dfc:	andeq	r8, r1, r8, lsr #17
   17e00:	andeq	r8, r1, r8, lsr #17
   17e04:	andeq	r8, r1, r8, lsr #17
   17e08:	andeq	r8, r1, r8, lsr #17
   17e0c:	andeq	r8, r1, r8, lsr #17
   17e10:	andeq	r8, r1, r8, lsr #17
   17e14:	andeq	r8, r1, r0, asr r7
   17e18:	ldrdeq	r8, [r1], -r4
   17e1c:	andeq	r8, r1, r8, ror r6
   17e20:	andeq	r8, r1, r4, lsr #14
   17e24:	andeq	r8, r1, ip, lsl #13
   17e28:	andeq	r8, r1, r8, ror #5
   17e2c:	strdeq	r8, [r1], -ip
   17e30:	andeq	r8, r1, r8, lsr #17
   17e34:	andeq	r8, r1, r8, lsr #17
   17e38:	andeq	r8, r1, r8, lsr #17
   17e3c:	andeq	r8, r1, r8, lsr #17
   17e40:	andeq	r8, r1, r8, lsr #17
   17e44:	andeq	r8, r1, r8, lsr #17
   17e48:	andeq	r8, r1, r8, lsr #17
   17e4c:	andeq	r8, r1, r8, lsr #17
   17e50:	andeq	r8, r1, r8, lsr #17
   17e54:	andeq	r8, r1, r8, lsr #17
   17e58:	andeq	r8, r1, r8, lsr #17
   17e5c:	andeq	r8, r1, r8, lsr #17
   17e60:	andeq	r8, r1, r8, lsr #17
   17e64:	andeq	r8, r1, r8, lsr #17
   17e68:	andeq	r8, r1, r8, lsr #17
   17e6c:	andeq	r8, r1, r8, lsr #17
   17e70:	andeq	r8, r1, r8, lsr #17
   17e74:	andeq	r8, r1, r8, lsr #17
   17e78:	andeq	r8, r1, r4, asr #15
   17e7c:	andeq	r8, r1, r8, ror #15
   17e80:	andeq	r8, r1, r8, ror #15
   17e84:	andeq	r8, r1, r0, lsl #15
   17e88:	andeq	r8, r1, r8, ror #15
   17e8c:	andeq	r8, r1, r8, lsl #26
   17e90:	andeq	r8, r1, r8, ror #15
   17e94:	andeq	r8, r1, r8, lsl #16
   17e98:	andeq	r8, r1, r8, ror #15
   17e9c:	andeq	r8, r1, r8, ror #15
   17ea0:	andeq	r8, r1, r8, ror #15
   17ea4:	andeq	r8, r1, r8, lsl #26
   17ea8:	andeq	r8, r1, r8, lsl #26
   17eac:	andeq	r8, r1, r8, lsl #26
   17eb0:	andeq	r8, r1, r8, lsl #26
   17eb4:	andeq	r8, r1, r8, lsl #26
   17eb8:	andeq	r8, r1, r8, lsl #26
   17ebc:	andeq	r8, r1, r8, lsl #26
   17ec0:	andeq	r8, r1, r8, lsl #26
   17ec4:	andeq	r8, r1, r8, lsl #26
   17ec8:	andeq	r8, r1, r8, lsl #26
   17ecc:	andeq	r8, r1, r8, lsl #26
   17ed0:	andeq	r8, r1, r8, lsl #26
   17ed4:	andeq	r8, r1, r8, lsl #26
   17ed8:	andeq	r8, r1, r8, lsl #26
   17edc:	andeq	r8, r1, r8, lsl #26
   17ee0:	andeq	r8, r1, r8, lsl #26
   17ee4:	andeq	r8, r1, r8, ror #15
   17ee8:	andeq	r8, r1, r8, ror #15
   17eec:	andeq	r8, r1, r8, ror #15
   17ef0:	andeq	r8, r1, r8, ror #15
   17ef4:	andeq	r8, r1, r8, ror #2
   17ef8:	andeq	r8, r1, r8, lsr #17
   17efc:	andeq	r8, r1, r8, lsl #26
   17f00:	andeq	r8, r1, r8, lsl #26
   17f04:	andeq	r8, r1, r8, lsl #26
   17f08:	andeq	r8, r1, r8, lsl #26
   17f0c:	andeq	r8, r1, r8, lsl #26
   17f10:	andeq	r8, r1, r8, lsl #26
   17f14:	andeq	r8, r1, r8, lsl #26
   17f18:	andeq	r8, r1, r8, lsl #26
   17f1c:	andeq	r8, r1, r8, lsl #26
   17f20:	andeq	r8, r1, r8, lsl #26
   17f24:	andeq	r8, r1, r8, lsl #26
   17f28:	andeq	r8, r1, r8, lsl #26
   17f2c:	andeq	r8, r1, r8, lsl #26
   17f30:	andeq	r8, r1, r8, lsl #26
   17f34:	andeq	r8, r1, r8, lsl #26
   17f38:	andeq	r8, r1, r8, lsl #26
   17f3c:	andeq	r8, r1, r8, lsl #26
   17f40:	andeq	r8, r1, r8, lsl #26
   17f44:	andeq	r8, r1, r8, lsl #26
   17f48:	andeq	r8, r1, r8, lsl #26
   17f4c:	andeq	r8, r1, r8, lsl #26
   17f50:	andeq	r8, r1, r8, lsl #26
   17f54:	andeq	r8, r1, r8, lsl #26
   17f58:	andeq	r8, r1, r8, lsl #26
   17f5c:	andeq	r8, r1, r8, lsl #26
   17f60:	andeq	r8, r1, r8, lsl #26
   17f64:	andeq	r8, r1, r8, ror #15
   17f68:	andeq	r8, r1, r0, lsr #13
   17f6c:	andeq	r8, r1, r8, lsl #26
   17f70:	andeq	r8, r1, r8, ror #15
   17f74:	andeq	r8, r1, r8, lsl #26
   17f78:	andeq	r8, r1, r8, ror #15
   17f7c:	andeq	r8, r1, r8, lsl #26
   17f80:	andeq	r8, r1, r8, lsl #26
   17f84:	andeq	r8, r1, r8, lsl #26
   17f88:	andeq	r8, r1, r8, lsl #26
   17f8c:	andeq	r8, r1, r8, lsl #26
   17f90:	andeq	r8, r1, r8, lsl #26
   17f94:	andeq	r8, r1, r8, lsl #26
   17f98:	andeq	r8, r1, r8, lsl #26
   17f9c:	andeq	r8, r1, r8, lsl #26
   17fa0:	andeq	r8, r1, r8, lsl #26
   17fa4:	andeq	r8, r1, r8, lsl #26
   17fa8:	andeq	r8, r1, r8, lsl #26
   17fac:	andeq	r8, r1, r8, lsl #26
   17fb0:	andeq	r8, r1, r8, lsl #26
   17fb4:	andeq	r8, r1, r8, lsl #26
   17fb8:	andeq	r8, r1, r8, lsl #26
   17fbc:	andeq	r8, r1, r8, lsl #26
   17fc0:	andeq	r8, r1, r8, lsl #26
   17fc4:	andeq	r8, r1, r8, lsl #26
   17fc8:	andeq	r8, r1, r8, lsl #26
   17fcc:	andeq	r8, r1, r8, lsl #26
   17fd0:	andeq	r8, r1, r8, lsl #26
   17fd4:	andeq	r8, r1, r8, lsl #26
   17fd8:	andeq	r8, r1, r8, lsl #26
   17fdc:	andeq	r8, r1, r8, lsl #26
   17fe0:	andeq	r8, r1, r8, lsl #26
   17fe4:	andeq	r8, r1, r0, ror #14
   17fe8:	andeq	r8, r1, r8, ror #15
   17fec:	andeq	r8, r1, r0, ror #14
   17ff0:	andeq	r8, r1, r0, lsl #15
   17ff4:	mov	r8, r9
   17ff8:	mov	r7, sl
   17ffc:	b	18efc <__assert_fail@plt+0x7b18>
   18000:	ldr	r3, [sp, #28]
   18004:	cmp	r3, #0
   18008:	bne	18028 <__assert_fail@plt+0x6c44>
   1800c:	ldr	r3, [sp, #156]	; 0x9c
   18010:	tst	r3, #1
   18014:	bne	18410 <__assert_fail@plt+0x702c>
   18018:	ldr	r3, [sp, #28]
   1801c:	str	r3, [sp, #44]	; 0x2c
   18020:	mov	r5, r3
   18024:	b	18330 <__assert_fail@plt+0x6f4c>
   18028:	ldr	r3, [sp, #32]
   1802c:	cmp	r3, #0
   18030:	bne	18eac <__assert_fail@plt+0x7ac8>
   18034:	str	r3, [sp, #44]	; 0x2c
   18038:	ldr	r3, [sp, #36]	; 0x24
   1803c:	eor	r3, r3, #1
   18040:	cmp	sl, #2
   18044:	movne	r3, #0
   18048:	andeq	r3, r3, #1
   1804c:	cmp	r3, #0
   18050:	beq	180a8 <__assert_fail@plt+0x6cc4>
   18054:	cmp	r9, fp
   18058:	movhi	r2, #39	; 0x27
   1805c:	strbhi	r2, [r8, fp]
   18060:	add	r2, fp, #1
   18064:	cmp	r9, r2
   18068:	movhi	r1, #36	; 0x24
   1806c:	strbhi	r1, [r8, r2]
   18070:	add	r2, fp, #2
   18074:	cmp	r9, r2
   18078:	movhi	r1, #39	; 0x27
   1807c:	strbhi	r1, [r8, r2]
   18080:	add	r2, fp, #3
   18084:	cmp	r9, r2
   18088:	bls	18f68 <__assert_fail@plt+0x7b84>
   1808c:	mov	r1, #92	; 0x5c
   18090:	strb	r1, [r8, r2]
   18094:	add	fp, fp, #4
   18098:	str	r3, [sp, #36]	; 0x24
   1809c:	mov	r5, #0
   180a0:	mov	r4, #48	; 0x30
   180a4:	b	1837c <__assert_fail@plt+0x6f98>
   180a8:	cmp	r9, fp
   180ac:	bhi	180d4 <__assert_fail@plt+0x6cf0>
   180b0:	add	r1, fp, #1
   180b4:	ldr	r2, [sp, #56]	; 0x38
   180b8:	cmp	r2, #0
   180bc:	bne	180fc <__assert_fail@plt+0x6d18>
   180c0:	mov	r3, r5
   180c4:	ldr	r5, [sp, #56]	; 0x38
   180c8:	mov	fp, r1
   180cc:	mov	r4, #48	; 0x30
   180d0:	b	18330 <__assert_fail@plt+0x6f4c>
   180d4:	mov	r2, #92	; 0x5c
   180d8:	strb	r2, [r8, fp]
   180dc:	add	r1, fp, #1
   180e0:	ldr	r2, [sp, #56]	; 0x38
   180e4:	cmp	r2, #0
   180e8:	moveq	r3, r5
   180ec:	moveq	r5, r2
   180f0:	moveq	fp, r1
   180f4:	moveq	r4, #48	; 0x30
   180f8:	beq	1837c <__assert_fail@plt+0x6f98>
   180fc:	add	r2, r6, #1
   18100:	ldr	r0, [sp, #24]
   18104:	cmp	r2, r0
   18108:	bcs	18124 <__assert_fail@plt+0x6d40>
   1810c:	ldr	r0, [sp, #48]	; 0x30
   18110:	ldrb	r2, [r0, r2]
   18114:	sub	r2, r2, #48	; 0x30
   18118:	uxtb	r2, r2
   1811c:	cmp	r2, #9
   18120:	bls	1813c <__assert_fail@plt+0x6d58>
   18124:	mov	r2, r3
   18128:	mov	r3, r5
   1812c:	mov	r5, r2
   18130:	mov	fp, r1
   18134:	mov	r4, #48	; 0x30
   18138:	b	18354 <__assert_fail@plt+0x6f70>
   1813c:	cmp	r9, r1
   18140:	movhi	r2, #48	; 0x30
   18144:	strbhi	r2, [r8, r1]
   18148:	add	r2, fp, #2
   1814c:	cmp	r9, r2
   18150:	movhi	r1, #48	; 0x30
   18154:	strbhi	r1, [r8, r2]
   18158:	add	r1, fp, #3
   1815c:	b	18124 <__assert_fail@plt+0x6d40>
   18160:	mov	r3, #0
   18164:	str	r3, [sp, #44]	; 0x2c
   18168:	cmp	sl, #2
   1816c:	beq	18188 <__assert_fail@plt+0x6da4>
   18170:	cmp	sl, #5
   18174:	beq	181a0 <__assert_fail@plt+0x6dbc>
   18178:	mov	r5, #0
   1817c:	mov	r3, r5
   18180:	mov	r4, #63	; 0x3f
   18184:	b	18330 <__assert_fail@plt+0x6f4c>
   18188:	ldr	r3, [sp, #32]
   1818c:	cmp	r3, #0
   18190:	bne	18eb8 <__assert_fail@plt+0x7ad4>
   18194:	mov	r5, r3
   18198:	mov	r4, #63	; 0x3f
   1819c:	b	18898 <__assert_fail@plt+0x74b4>
   181a0:	ldr	r3, [sp, #156]	; 0x9c
   181a4:	tst	r3, #4
   181a8:	beq	18cd0 <__assert_fail@plt+0x78ec>
   181ac:	add	r2, r6, #2
   181b0:	ldr	r3, [sp, #24]
   181b4:	cmp	r2, r3
   181b8:	bcs	18ce0 <__assert_fail@plt+0x78fc>
   181bc:	ldr	r3, [sp, #48]	; 0x30
   181c0:	add	r3, r3, r6
   181c4:	ldrb	r4, [r3, #1]
   181c8:	cmp	r4, #63	; 0x3f
   181cc:	movne	r5, #0
   181d0:	movne	r3, r5
   181d4:	movne	r4, #63	; 0x3f
   181d8:	bne	18330 <__assert_fail@plt+0x6f4c>
   181dc:	ldr	r3, [sp, #48]	; 0x30
   181e0:	ldrb	r1, [r3, r2]
   181e4:	sub	r3, r1, #33	; 0x21
   181e8:	cmp	r3, #29
   181ec:	ldrls	pc, [pc, r3, lsl #2]
   181f0:	b	18cf0 <__assert_fail@plt+0x790c>
   181f4:	andeq	r8, r1, ip, ror #4
   181f8:	strdeq	r8, [r1], -r0
   181fc:	strdeq	r8, [r1], -r0
   18200:	strdeq	r8, [r1], -r0
   18204:	strdeq	r8, [r1], -r0
   18208:	strdeq	r8, [r1], -r0
   1820c:	andeq	r8, r1, ip, ror #4
   18210:	andeq	r8, r1, ip, ror #4
   18214:	andeq	r8, r1, ip, ror #4
   18218:	strdeq	r8, [r1], -r0
   1821c:	strdeq	r8, [r1], -r0
   18220:	strdeq	r8, [r1], -r0
   18224:	andeq	r8, r1, ip, ror #4
   18228:	strdeq	r8, [r1], -r0
   1822c:	andeq	r8, r1, ip, ror #4
   18230:	strdeq	r8, [r1], -r0
   18234:	strdeq	r8, [r1], -r0
   18238:	strdeq	r8, [r1], -r0
   1823c:	strdeq	r8, [r1], -r0
   18240:	strdeq	r8, [r1], -r0
   18244:	strdeq	r8, [r1], -r0
   18248:	strdeq	r8, [r1], -r0
   1824c:	strdeq	r8, [r1], -r0
   18250:	strdeq	r8, [r1], -r0
   18254:	strdeq	r8, [r1], -r0
   18258:	strdeq	r8, [r1], -r0
   1825c:	strdeq	r8, [r1], -r0
   18260:	andeq	r8, r1, ip, ror #4
   18264:	andeq	r8, r1, ip, ror #4
   18268:	andeq	r8, r1, ip, ror #4
   1826c:	ldr	r3, [sp, #32]
   18270:	cmp	r3, #0
   18274:	bne	18f5c <__assert_fail@plt+0x7b78>
   18278:	cmp	r9, fp
   1827c:	movhi	r3, #63	; 0x3f
   18280:	strbhi	r3, [r8, fp]
   18284:	add	r3, fp, #1
   18288:	cmp	r9, r3
   1828c:	movhi	r0, #34	; 0x22
   18290:	strbhi	r0, [r8, r3]
   18294:	add	r3, fp, #2
   18298:	cmp	r9, r3
   1829c:	movhi	r0, #34	; 0x22
   182a0:	strbhi	r0, [r8, r3]
   182a4:	add	r3, fp, #3
   182a8:	cmp	r9, r3
   182ac:	movhi	r0, #63	; 0x3f
   182b0:	strbhi	r0, [r8, r3]
   182b4:	add	fp, fp, #4
   182b8:	ldr	r3, [sp, #32]
   182bc:	mov	r5, r3
   182c0:	mov	r4, r1
   182c4:	mov	r6, r2
   182c8:	b	18330 <__assert_fail@plt+0x6f4c>
   182cc:	mov	r3, #0
   182d0:	str	r3, [sp, #44]	; 0x2c
   182d4:	mov	r4, #8
   182d8:	mov	r3, #98	; 0x62
   182dc:	b	1831c <__assert_fail@plt+0x6f38>
   182e0:	mov	r3, #0
   182e4:	str	r3, [sp, #44]	; 0x2c
   182e8:	mov	r4, #12
   182ec:	mov	r3, #102	; 0x66
   182f0:	b	1831c <__assert_fail@plt+0x6f38>
   182f4:	mov	r3, #0
   182f8:	str	r3, [sp, #44]	; 0x2c
   182fc:	mov	r4, #13
   18300:	mov	r3, #114	; 0x72
   18304:	ldr	r2, [sp, #32]
   18308:	cmp	sl, #2
   1830c:	movne	r2, #0
   18310:	andeq	r2, r2, #1
   18314:	cmp	r2, #0
   18318:	bne	1873c <__assert_fail@plt+0x7358>
   1831c:	ldr	r2, [sp, #28]
   18320:	cmp	r2, #0
   18324:	bne	18d24 <__assert_fail@plt+0x7940>
   18328:	mov	r5, r2
   1832c:	mov	r3, r2
   18330:	ldr	r2, [sp, #28]
   18334:	eor	r2, r2, #1
   18338:	cmp	sl, #2
   1833c:	orreq	r2, r2, #1
   18340:	eor	r2, r2, #1
   18344:	ldr	r1, [sp, #32]
   18348:	orr	r2, r1, r2
   1834c:	tst	r2, #255	; 0xff
   18350:	beq	1837c <__assert_fail@plt+0x6f98>
   18354:	ldr	r2, [sp, #160]	; 0xa0
   18358:	cmp	r2, #0
   1835c:	beq	1837c <__assert_fail@plt+0x6f98>
   18360:	ubfx	r1, r4, #5, #8
   18364:	and	r2, r4, #31
   18368:	ldr	r0, [sp, #160]	; 0xa0
   1836c:	ldr	r1, [r0, r1, lsl #2]
   18370:	lsr	r2, r1, r2
   18374:	tst	r2, #1
   18378:	bne	18388 <__assert_fail@plt+0x6fa4>
   1837c:	ldr	r2, [sp, #44]	; 0x2c
   18380:	cmp	r2, #0
   18384:	beq	186dc <__assert_fail@plt+0x72f8>
   18388:	ldr	r3, [sp, #32]
   1838c:	cmp	r3, #0
   18390:	bne	18edc <__assert_fail@plt+0x7af8>
   18394:	ldr	r3, [sp, #36]	; 0x24
   18398:	eor	r3, r3, #1
   1839c:	cmp	sl, #2
   183a0:	movne	r3, #0
   183a4:	andeq	r3, r3, #1
   183a8:	cmp	r3, #0
   183ac:	beq	183e4 <__assert_fail@plt+0x7000>
   183b0:	cmp	r9, fp
   183b4:	movhi	r2, #39	; 0x27
   183b8:	strbhi	r2, [r8, fp]
   183bc:	add	r2, fp, #1
   183c0:	cmp	r9, r2
   183c4:	movhi	r1, #36	; 0x24
   183c8:	strbhi	r1, [r8, r2]
   183cc:	add	r2, fp, #2
   183d0:	cmp	r9, r2
   183d4:	movhi	r1, #39	; 0x27
   183d8:	strbhi	r1, [r8, r2]
   183dc:	add	fp, fp, #3
   183e0:	str	r3, [sp, #36]	; 0x24
   183e4:	cmp	r9, fp
   183e8:	movhi	r3, #92	; 0x5c
   183ec:	strbhi	r3, [r8, fp]
   183f0:	add	fp, fp, #1
   183f4:	cmp	fp, r9
   183f8:	strbcc	r4, [r8, fp]
   183fc:	add	fp, fp, #1
   18400:	cmp	r5, #0
   18404:	ldr	r3, [sp, #40]	; 0x28
   18408:	moveq	r3, r5
   1840c:	str	r3, [sp, #40]	; 0x28
   18410:	add	r6, r6, #1
   18414:	ldr	r3, [sp, #24]
   18418:	cmn	r3, #1
   1841c:	beq	18d4c <__assert_fail@plt+0x7968>
   18420:	ldr	r3, [sp, #24]
   18424:	subs	r5, r3, r6
   18428:	movne	r5, #1
   1842c:	cmp	r5, #0
   18430:	beq	18d60 <__assert_fail@plt+0x797c>
   18434:	ldr	r3, [sp, #28]
   18438:	cmp	sl, #2
   1843c:	moveq	r3, #0
   18440:	andne	r3, r3, #1
   18444:	str	r3, [sp, #56]	; 0x38
   18448:	ldr	r2, [sp, #52]	; 0x34
   1844c:	adds	r7, r2, #0
   18450:	movne	r7, #1
   18454:	ands	r3, r3, r7
   18458:	str	r3, [sp, #44]	; 0x2c
   1845c:	bne	17d7c <__assert_fail@plt+0x6998>
   18460:	ldr	r3, [sp, #48]	; 0x30
   18464:	ldrb	r4, [r3, r6]
   18468:	cmp	r4, #126	; 0x7e
   1846c:	ldrls	pc, [pc, r4, lsl #2]
   18470:	b	188a8 <__assert_fail@plt+0x74c4>
   18474:	andeq	r8, r1, r0
   18478:	andeq	r8, r1, r8, lsr #17
   1847c:	andeq	r8, r1, r8, lsr #17
   18480:	andeq	r8, r1, r8, lsr #17
   18484:	andeq	r8, r1, r8, lsr #17
   18488:	andeq	r8, r1, r8, lsr #17
   1848c:	andeq	r8, r1, r8, lsr #17
   18490:	andeq	r8, r1, r8, asr #14
   18494:	ldrdeq	r8, [r1], -r4
   18498:	andeq	r8, r1, r8, ror r6
   1849c:	andeq	r8, r1, ip, lsl r7
   184a0:	andeq	r8, r1, ip, lsl #13
   184a4:	andeq	r8, r1, r8, ror #5
   184a8:	strdeq	r8, [r1], -ip
   184ac:	andeq	r8, r1, r8, lsr #17
   184b0:	andeq	r8, r1, r8, lsr #17
   184b4:	andeq	r8, r1, r8, lsr #17
   184b8:	andeq	r8, r1, r8, lsr #17
   184bc:	andeq	r8, r1, r8, lsr #17
   184c0:	andeq	r8, r1, r8, lsr #17
   184c4:	andeq	r8, r1, r8, lsr #17
   184c8:	andeq	r8, r1, r8, lsr #17
   184cc:	andeq	r8, r1, r8, lsr #17
   184d0:	andeq	r8, r1, r8, lsr #17
   184d4:	andeq	r8, r1, r8, lsr #17
   184d8:	andeq	r8, r1, r8, lsr #17
   184dc:	andeq	r8, r1, r8, lsr #17
   184e0:	andeq	r8, r1, r8, lsr #17
   184e4:	andeq	r8, r1, r8, lsr #17
   184e8:	andeq	r8, r1, r8, lsr #17
   184ec:	andeq	r8, r1, r8, lsr #17
   184f0:	andeq	r8, r1, r8, lsr #17
   184f4:	andeq	r8, r1, r4, asr #15
   184f8:	andeq	r8, r1, r0, asr #15
   184fc:	andeq	r8, r1, r0, asr #15
   18500:	andeq	r8, r1, r0, lsl #15
   18504:	andeq	r8, r1, r0, asr #15
   18508:	andeq	r8, r1, r8, asr #25
   1850c:	andeq	r8, r1, r0, asr #15
   18510:	andeq	r8, r1, r8, lsl #16
   18514:	andeq	r8, r1, r0, asr #15
   18518:	andeq	r8, r1, r0, asr #15
   1851c:	andeq	r8, r1, r0, asr #15
   18520:	andeq	r8, r1, r8, asr #25
   18524:	andeq	r8, r1, r8, asr #25
   18528:	andeq	r8, r1, r8, asr #25
   1852c:	andeq	r8, r1, r8, asr #25
   18530:	andeq	r8, r1, r8, asr #25
   18534:	andeq	r8, r1, r8, asr #25
   18538:	andeq	r8, r1, r8, asr #25
   1853c:	andeq	r8, r1, r8, asr #25
   18540:	andeq	r8, r1, r8, asr #25
   18544:	andeq	r8, r1, r8, asr #25
   18548:	andeq	r8, r1, r8, asr #25
   1854c:	andeq	r8, r1, r8, asr #25
   18550:	andeq	r8, r1, r8, asr #25
   18554:	andeq	r8, r1, r8, asr #25
   18558:	andeq	r8, r1, r8, asr #25
   1855c:	andeq	r8, r1, r8, asr #25
   18560:	andeq	r8, r1, r0, asr #15
   18564:	andeq	r8, r1, r0, asr #15
   18568:	andeq	r8, r1, r0, asr #15
   1856c:	andeq	r8, r1, r0, asr #15
   18570:	andeq	r8, r1, r8, ror #2
   18574:	andeq	r8, r1, r8, lsr #17
   18578:	andeq	r8, r1, r8, asr #25
   1857c:	andeq	r8, r1, r8, asr #25
   18580:	andeq	r8, r1, r8, asr #25
   18584:	andeq	r8, r1, r8, asr #25
   18588:	andeq	r8, r1, r8, asr #25
   1858c:	andeq	r8, r1, r8, asr #25
   18590:	andeq	r8, r1, r8, asr #25
   18594:	andeq	r8, r1, r8, asr #25
   18598:	andeq	r8, r1, r8, asr #25
   1859c:	andeq	r8, r1, r8, asr #25
   185a0:	andeq	r8, r1, r8, asr #25
   185a4:	andeq	r8, r1, r8, asr #25
   185a8:	andeq	r8, r1, r8, asr #25
   185ac:	andeq	r8, r1, r8, asr #25
   185b0:	andeq	r8, r1, r8, asr #25
   185b4:	andeq	r8, r1, r8, asr #25
   185b8:	andeq	r8, r1, r8, asr #25
   185bc:	andeq	r8, r1, r8, asr #25
   185c0:	andeq	r8, r1, r8, asr #25
   185c4:	andeq	r8, r1, r8, asr #25
   185c8:	andeq	r8, r1, r8, asr #25
   185cc:	andeq	r8, r1, r8, asr #25
   185d0:	andeq	r8, r1, r8, asr #25
   185d4:	andeq	r8, r1, r8, asr #25
   185d8:	andeq	r8, r1, r8, asr #25
   185dc:	andeq	r8, r1, r8, asr #25
   185e0:	andeq	r8, r1, r0, asr #15
   185e4:	andeq	r8, r1, r0, lsr #13
   185e8:	andeq	r8, r1, r8, asr #25
   185ec:	andeq	r8, r1, r0, asr #15
   185f0:	andeq	r8, r1, r8, asr #25
   185f4:	andeq	r8, r1, r0, asr #15
   185f8:	andeq	r8, r1, r8, asr #25
   185fc:	andeq	r8, r1, r8, asr #25
   18600:	andeq	r8, r1, r8, asr #25
   18604:	andeq	r8, r1, r8, asr #25
   18608:	andeq	r8, r1, r8, asr #25
   1860c:	andeq	r8, r1, r8, asr #25
   18610:	andeq	r8, r1, r8, asr #25
   18614:	andeq	r8, r1, r8, asr #25
   18618:	andeq	r8, r1, r8, asr #25
   1861c:	andeq	r8, r1, r8, asr #25
   18620:	andeq	r8, r1, r8, asr #25
   18624:	andeq	r8, r1, r8, asr #25
   18628:	andeq	r8, r1, r8, asr #25
   1862c:	andeq	r8, r1, r8, asr #25
   18630:	andeq	r8, r1, r8, asr #25
   18634:	andeq	r8, r1, r8, asr #25
   18638:	andeq	r8, r1, r8, asr #25
   1863c:	andeq	r8, r1, r8, asr #25
   18640:	andeq	r8, r1, r8, asr #25
   18644:	andeq	r8, r1, r8, asr #25
   18648:	andeq	r8, r1, r8, asr #25
   1864c:	andeq	r8, r1, r8, asr #25
   18650:	andeq	r8, r1, r8, asr #25
   18654:	andeq	r8, r1, r8, asr #25
   18658:	andeq	r8, r1, r8, asr #25
   1865c:	andeq	r8, r1, r8, asr #25
   18660:	andeq	r8, r1, r0, ror #14
   18664:	andeq	r8, r1, r0, asr #15
   18668:	andeq	r8, r1, r0, ror #14
   1866c:	andeq	r8, r1, r0, lsl #15
   18670:	mov	r3, #0
   18674:	str	r3, [sp, #44]	; 0x2c
   18678:	mov	r4, #9
   1867c:	mov	r3, #116	; 0x74
   18680:	b	18304 <__assert_fail@plt+0x6f20>
   18684:	mov	r3, #0
   18688:	str	r3, [sp, #44]	; 0x2c
   1868c:	mov	r4, #11
   18690:	mov	r3, #118	; 0x76
   18694:	b	1831c <__assert_fail@plt+0x6f38>
   18698:	mov	r3, #0
   1869c:	str	r3, [sp, #44]	; 0x2c
   186a0:	cmp	sl, #2
   186a4:	beq	186c8 <__assert_fail@plt+0x72e4>
   186a8:	ldr	r3, [sp, #28]
   186ac:	ldr	r2, [sp, #32]
   186b0:	and	r3, r3, r2
   186b4:	tst	r7, r3
   186b8:	bne	18d3c <__assert_fail@plt+0x7958>
   186bc:	mov	r4, #92	; 0x5c
   186c0:	mov	r3, r4
   186c4:	b	1831c <__assert_fail@plt+0x6f38>
   186c8:	ldr	r3, [sp, #32]
   186cc:	cmp	r3, #0
   186d0:	bne	18ec4 <__assert_fail@plt+0x7ae0>
   186d4:	mov	r5, r3
   186d8:	mov	r4, #92	; 0x5c
   186dc:	eor	r3, r3, #1
   186e0:	ldr	r2, [sp, #36]	; 0x24
   186e4:	and	r3, r3, r2
   186e8:	tst	r3, #255	; 0xff
   186ec:	beq	183f4 <__assert_fail@plt+0x7010>
   186f0:	cmp	r9, fp
   186f4:	movhi	r3, #39	; 0x27
   186f8:	strbhi	r3, [r8, fp]
   186fc:	add	r3, fp, #1
   18700:	cmp	r9, r3
   18704:	movhi	r2, #39	; 0x27
   18708:	strbhi	r2, [r8, r3]
   1870c:	add	fp, fp, #2
   18710:	mov	r3, #0
   18714:	str	r3, [sp, #36]	; 0x24
   18718:	b	183f4 <__assert_fail@plt+0x7010>
   1871c:	mov	r3, #110	; 0x6e
   18720:	b	18304 <__assert_fail@plt+0x6f20>
   18724:	mov	r3, #110	; 0x6e
   18728:	b	18304 <__assert_fail@plt+0x6f20>
   1872c:	mov	r3, #0
   18730:	str	r3, [sp, #44]	; 0x2c
   18734:	mov	r3, #110	; 0x6e
   18738:	b	18304 <__assert_fail@plt+0x6f20>
   1873c:	mov	r8, r9
   18740:	mov	r7, #2
   18744:	b	18ee4 <__assert_fail@plt+0x7b00>
   18748:	mov	r3, #97	; 0x61
   1874c:	b	1831c <__assert_fail@plt+0x6f38>
   18750:	mov	r3, #97	; 0x61
   18754:	b	1831c <__assert_fail@plt+0x6f38>
   18758:	mov	r3, #0
   1875c:	str	r3, [sp, #44]	; 0x2c
   18760:	ldr	r3, [sp, #24]
   18764:	cmn	r3, #1
   18768:	beq	18794 <__assert_fail@plt+0x73b0>
   1876c:	ldr	r3, [sp, #24]
   18770:	subs	r3, r3, #1
   18774:	movne	r3, #1
   18778:	cmp	r3, #0
   1877c:	bne	18cfc <__assert_fail@plt+0x7918>
   18780:	cmp	r6, #0
   18784:	beq	187c4 <__assert_fail@plt+0x73e0>
   18788:	mov	r5, #0
   1878c:	mov	r3, r5
   18790:	b	18330 <__assert_fail@plt+0x6f4c>
   18794:	ldr	r3, [sp, #48]	; 0x30
   18798:	ldrb	r3, [r3, #1]
   1879c:	adds	r3, r3, #0
   187a0:	movne	r3, #1
   187a4:	b	18778 <__assert_fail@plt+0x7394>
   187a8:	mov	r3, #0
   187ac:	str	r3, [sp, #44]	; 0x2c
   187b0:	b	18780 <__assert_fail@plt+0x739c>
   187b4:	mov	r3, #0
   187b8:	str	r3, [sp, #44]	; 0x2c
   187bc:	b	187c4 <__assert_fail@plt+0x73e0>
   187c0:	ldr	r5, [sp, #44]	; 0x2c
   187c4:	ldr	r3, [sp, #32]
   187c8:	cmp	sl, #2
   187cc:	movne	r3, #0
   187d0:	andeq	r3, r3, #1
   187d4:	cmp	r3, #0
   187d8:	beq	18330 <__assert_fail@plt+0x6f4c>
   187dc:	mov	r8, r9
   187e0:	mov	r7, #2
   187e4:	b	18ee4 <__assert_fail@plt+0x7b00>
   187e8:	ldr	r5, [sp, #32]
   187ec:	b	187c4 <__assert_fail@plt+0x73e0>
   187f0:	mov	r3, #0
   187f4:	str	r3, [sp, #44]	; 0x2c
   187f8:	mov	r5, r3
   187fc:	b	187c4 <__assert_fail@plt+0x73e0>
   18800:	mov	r3, #0
   18804:	str	r3, [sp, #44]	; 0x2c
   18808:	cmp	sl, #2
   1880c:	strne	r5, [sp, #68]	; 0x44
   18810:	movne	r3, #0
   18814:	movne	r4, #39	; 0x27
   18818:	bne	18330 <__assert_fail@plt+0x6f4c>
   1881c:	ldr	r3, [sp, #32]
   18820:	cmp	r3, #0
   18824:	bne	18ed0 <__assert_fail@plt+0x7aec>
   18828:	ldr	r3, [sp, #72]	; 0x48
   1882c:	clz	r3, r3
   18830:	lsr	r3, r3, #5
   18834:	cmp	r9, #0
   18838:	moveq	r3, #0
   1883c:	cmp	r3, #0
   18840:	movne	r3, #0
   18844:	bne	1886c <__assert_fail@plt+0x7488>
   18848:	cmp	r9, fp
   1884c:	movhi	r3, #39	; 0x27
   18850:	strbhi	r3, [r8, fp]
   18854:	add	r3, fp, #1
   18858:	cmp	r9, r3
   1885c:	movhi	r2, #92	; 0x5c
   18860:	strbhi	r2, [r8, r3]
   18864:	mov	r3, r9
   18868:	ldr	r9, [sp, #72]	; 0x48
   1886c:	add	r2, fp, #2
   18870:	cmp	r2, r3
   18874:	movcc	r1, #39	; 0x27
   18878:	strbcc	r1, [r8, r2]
   1887c:	add	fp, fp, #3
   18880:	str	r5, [sp, #68]	; 0x44
   18884:	ldr	r2, [sp, #32]
   18888:	str	r2, [sp, #36]	; 0x24
   1888c:	str	r9, [sp, #72]	; 0x48
   18890:	mov	r9, r3
   18894:	mov	r4, #39	; 0x27
   18898:	mov	r3, #0
   1889c:	b	1837c <__assert_fail@plt+0x6f98>
   188a0:	mov	r3, #0
   188a4:	str	r3, [sp, #44]	; 0x2c
   188a8:	ldr	r7, [sp, #76]	; 0x4c
   188ac:	cmp	r7, #1
   188b0:	bne	188e8 <__assert_fail@plt+0x7504>
   188b4:	bl	1127c <__ctype_b_loc@plt>
   188b8:	ldr	r2, [r0]
   188bc:	lsl	r3, r4, #1
   188c0:	ldrh	r5, [r2, r3]
   188c4:	ubfx	r5, r5, #14, #1
   188c8:	mov	ip, r7
   188cc:	eor	r3, r5, #1
   188d0:	ldr	r2, [sp, #28]
   188d4:	and	r3, r3, r2
   188d8:	ands	r3, r3, #255	; 0xff
   188dc:	beq	18330 <__assert_fail@plt+0x6f4c>
   188e0:	mov	r5, #0
   188e4:	b	18b44 <__assert_fail@plt+0x7760>
   188e8:	mov	r2, #0
   188ec:	mov	r3, #0
   188f0:	strd	r2, [sp, #104]	; 0x68
   188f4:	ldr	r3, [sp, #24]
   188f8:	cmn	r3, #1
   188fc:	beq	18920 <__assert_fail@plt+0x753c>
   18900:	mov	r3, #0
   18904:	str	r4, [sp, #88]	; 0x58
   18908:	str	fp, [sp, #92]	; 0x5c
   1890c:	str	r8, [sp, #56]	; 0x38
   18910:	mov	r8, r3
   18914:	str	r9, [sp, #84]	; 0x54
   18918:	ldr	r9, [sp, #48]	; 0x30
   1891c:	b	18a6c <__assert_fail@plt+0x7688>
   18920:	ldr	r0, [sp, #48]	; 0x30
   18924:	bl	11294 <strlen@plt>
   18928:	str	r0, [sp, #24]
   1892c:	b	18900 <__assert_fail@plt+0x751c>
   18930:	mov	r1, fp
   18934:	ldr	r4, [sp, #88]	; 0x58
   18938:	mov	r2, r8
   1893c:	mov	ip, r8
   18940:	ldr	fp, [sp, #92]	; 0x5c
   18944:	ldr	r8, [sp, #56]	; 0x38
   18948:	ldr	r9, [sp, #84]	; 0x54
   1894c:	ldr	r0, [sp, #24]
   18950:	cmp	r7, r0
   18954:	bcs	18b0c <__assert_fail@plt+0x7728>
   18958:	ldrb	r3, [r1]
   1895c:	cmp	r3, #0
   18960:	beq	18b14 <__assert_fail@plt+0x7730>
   18964:	mov	r3, r1
   18968:	add	r2, r2, #1
   1896c:	add	r1, r6, r2
   18970:	cmp	r0, r1
   18974:	bls	18b1c <__assert_fail@plt+0x7738>
   18978:	ldrb	r1, [r3, #1]!
   1897c:	cmp	r1, #0
   18980:	bne	18968 <__assert_fail@plt+0x7584>
   18984:	mov	ip, r2
   18988:	mov	r5, #0
   1898c:	b	18b3c <__assert_fail@plt+0x7758>
   18990:	ldr	r3, [sp, #56]	; 0x38
   18994:	str	r3, [sp, #64]	; 0x40
   18998:	ldr	r8, [sp, #84]	; 0x54
   1899c:	mov	r7, #2
   189a0:	b	18ee4 <__assert_fail@plt+0x7b00>
   189a4:	cmp	r2, r7
   189a8:	beq	18a48 <__assert_fail@plt+0x7664>
   189ac:	ldrb	r3, [r2], #1
   189b0:	sub	r3, r3, #91	; 0x5b
   189b4:	cmp	r3, #33	; 0x21
   189b8:	ldrls	pc, [pc, r3, lsl #2]
   189bc:	b	189a4 <__assert_fail@plt+0x75c0>
   189c0:	muleq	r1, r0, r9
   189c4:	muleq	r1, r0, r9
   189c8:	andeq	r8, r1, r4, lsr #19
   189cc:	muleq	r1, r0, r9
   189d0:	andeq	r8, r1, r4, lsr #19
   189d4:	muleq	r1, r0, r9
   189d8:	andeq	r8, r1, r4, lsr #19
   189dc:	andeq	r8, r1, r4, lsr #19
   189e0:	andeq	r8, r1, r4, lsr #19
   189e4:	andeq	r8, r1, r4, lsr #19
   189e8:	andeq	r8, r1, r4, lsr #19
   189ec:	andeq	r8, r1, r4, lsr #19
   189f0:	andeq	r8, r1, r4, lsr #19
   189f4:	andeq	r8, r1, r4, lsr #19
   189f8:	andeq	r8, r1, r4, lsr #19
   189fc:	andeq	r8, r1, r4, lsr #19
   18a00:	andeq	r8, r1, r4, lsr #19
   18a04:	andeq	r8, r1, r4, lsr #19
   18a08:	andeq	r8, r1, r4, lsr #19
   18a0c:	andeq	r8, r1, r4, lsr #19
   18a10:	andeq	r8, r1, r4, lsr #19
   18a14:	andeq	r8, r1, r4, lsr #19
   18a18:	andeq	r8, r1, r4, lsr #19
   18a1c:	andeq	r8, r1, r4, lsr #19
   18a20:	andeq	r8, r1, r4, lsr #19
   18a24:	andeq	r8, r1, r4, lsr #19
   18a28:	andeq	r8, r1, r4, lsr #19
   18a2c:	andeq	r8, r1, r4, lsr #19
   18a30:	andeq	r8, r1, r4, lsr #19
   18a34:	andeq	r8, r1, r4, lsr #19
   18a38:	andeq	r8, r1, r4, lsr #19
   18a3c:	andeq	r8, r1, r4, lsr #19
   18a40:	andeq	r8, r1, r4, lsr #19
   18a44:	muleq	r1, r0, r9
   18a48:	ldr	r0, [sp, #100]	; 0x64
   18a4c:	bl	111a4 <iswprint@plt>
   18a50:	cmp	r0, #0
   18a54:	moveq	r5, #0
   18a58:	add	r8, r8, r4
   18a5c:	add	r0, sp, #104	; 0x68
   18a60:	bl	11144 <mbsinit@plt>
   18a64:	cmp	r0, #0
   18a68:	bne	18ad8 <__assert_fail@plt+0x76f4>
   18a6c:	add	r7, r6, r8
   18a70:	add	fp, r9, r7
   18a74:	add	r3, sp, #104	; 0x68
   18a78:	ldr	r2, [sp, #24]
   18a7c:	sub	r2, r2, r7
   18a80:	mov	r1, fp
   18a84:	add	r0, sp, #100	; 0x64
   18a88:	bl	1c660 <__assert_fail@plt+0xb27c>
   18a8c:	subs	r4, r0, #0
   18a90:	beq	18b28 <__assert_fail@plt+0x7744>
   18a94:	cmn	r4, #1
   18a98:	beq	18af0 <__assert_fail@plt+0x770c>
   18a9c:	cmn	r4, #2
   18aa0:	beq	18930 <__assert_fail@plt+0x754c>
   18aa4:	ldr	r3, [sp, #32]
   18aa8:	cmp	sl, #2
   18aac:	movne	r3, #0
   18ab0:	andeq	r3, r3, #1
   18ab4:	cmp	r3, #0
   18ab8:	beq	18a48 <__assert_fail@plt+0x7664>
   18abc:	cmp	r4, #1
   18ac0:	bls	18a48 <__assert_fail@plt+0x7664>
   18ac4:	add	r2, r7, #1
   18ac8:	add	r2, r9, r2
   18acc:	add	r3, r9, r4
   18ad0:	add	r7, r3, r7
   18ad4:	b	189ac <__assert_fail@plt+0x75c8>
   18ad8:	ldr	r4, [sp, #88]	; 0x58
   18adc:	mov	ip, r8
   18ae0:	ldr	fp, [sp, #92]	; 0x5c
   18ae4:	ldr	r8, [sp, #56]	; 0x38
   18ae8:	ldr	r9, [sp, #84]	; 0x54
   18aec:	b	18b3c <__assert_fail@plt+0x7758>
   18af0:	ldr	r4, [sp, #88]	; 0x58
   18af4:	mov	ip, r8
   18af8:	ldr	fp, [sp, #92]	; 0x5c
   18afc:	ldr	r8, [sp, #56]	; 0x38
   18b00:	ldr	r9, [sp, #84]	; 0x54
   18b04:	mov	r5, #0
   18b08:	b	18b3c <__assert_fail@plt+0x7758>
   18b0c:	mov	r5, #0
   18b10:	b	18b3c <__assert_fail@plt+0x7758>
   18b14:	mov	r5, #0
   18b18:	b	18b3c <__assert_fail@plt+0x7758>
   18b1c:	mov	ip, r2
   18b20:	mov	r5, #0
   18b24:	b	18b3c <__assert_fail@plt+0x7758>
   18b28:	ldr	r4, [sp, #88]	; 0x58
   18b2c:	mov	ip, r8
   18b30:	ldr	fp, [sp, #92]	; 0x5c
   18b34:	ldr	r8, [sp, #56]	; 0x38
   18b38:	ldr	r9, [sp, #84]	; 0x54
   18b3c:	cmp	ip, #1
   18b40:	bls	188cc <__assert_fail@plt+0x74e8>
   18b44:	add	lr, r6, ip
   18b48:	ldr	r3, [sp, #48]	; 0x30
   18b4c:	add	r1, r3, r6
   18b50:	mov	r3, #0
   18b54:	eor	r0, r5, #1
   18b58:	ldr	r2, [sp, #28]
   18b5c:	and	r0, r0, r2
   18b60:	uxtb	r0, r0
   18b64:	str	r0, [sp, #56]	; 0x38
   18b68:	mov	r7, #92	; 0x5c
   18b6c:	ldr	ip, [sp, #36]	; 0x24
   18b70:	str	r5, [sp, #84]	; 0x54
   18b74:	ldr	r2, [sp, #44]	; 0x2c
   18b78:	b	18be8 <__assert_fail@plt+0x7804>
   18b7c:	cmp	r2, #0
   18b80:	beq	18b90 <__assert_fail@plt+0x77ac>
   18b84:	cmp	r9, fp
   18b88:	strbhi	r7, [r8, fp]
   18b8c:	add	fp, fp, #1
   18b90:	add	r5, r6, #1
   18b94:	cmp	r5, lr
   18b98:	bcs	18ca4 <__assert_fail@plt+0x78c0>
   18b9c:	eor	r2, r3, #1
   18ba0:	and	r2, r2, ip
   18ba4:	ands	r2, r2, #255	; 0xff
   18ba8:	beq	18cc0 <__assert_fail@plt+0x78dc>
   18bac:	cmp	r9, fp
   18bb0:	movhi	r2, #39	; 0x27
   18bb4:	strbhi	r2, [r8, fp]
   18bb8:	add	r2, fp, #1
   18bbc:	cmp	r9, r2
   18bc0:	movhi	ip, #39	; 0x27
   18bc4:	strbhi	ip, [r8, r2]
   18bc8:	add	fp, fp, #2
   18bcc:	ldr	ip, [sp, #56]	; 0x38
   18bd0:	mov	r2, ip
   18bd4:	mov	r6, r5
   18bd8:	cmp	r9, fp
   18bdc:	strbhi	r4, [r8, fp]
   18be0:	add	fp, fp, #1
   18be4:	ldrb	r4, [r1, #1]!
   18be8:	cmp	r0, #0
   18bec:	beq	18b7c <__assert_fail@plt+0x7798>
   18bf0:	ldr	r3, [sp, #32]
   18bf4:	cmp	r3, #0
   18bf8:	bne	18e8c <__assert_fail@plt+0x7aa8>
   18bfc:	eor	r3, ip, #1
   18c00:	cmp	sl, #2
   18c04:	movne	r3, #0
   18c08:	andeq	r3, r3, #1
   18c0c:	cmp	r3, #0
   18c10:	beq	18c48 <__assert_fail@plt+0x7864>
   18c14:	cmp	r9, fp
   18c18:	movhi	ip, #39	; 0x27
   18c1c:	strbhi	ip, [r8, fp]
   18c20:	add	ip, fp, #1
   18c24:	cmp	r9, ip
   18c28:	movhi	r5, #36	; 0x24
   18c2c:	strbhi	r5, [r8, ip]
   18c30:	add	ip, fp, #2
   18c34:	cmp	r9, ip
   18c38:	movhi	r5, #39	; 0x27
   18c3c:	strbhi	r5, [r8, ip]
   18c40:	add	fp, fp, #3
   18c44:	mov	ip, r3
   18c48:	cmp	r9, fp
   18c4c:	strbhi	r7, [r8, fp]
   18c50:	add	r3, fp, #1
   18c54:	cmp	r9, r3
   18c58:	bls	18c68 <__assert_fail@plt+0x7884>
   18c5c:	lsr	r5, r4, #6
   18c60:	add	r5, r5, #48	; 0x30
   18c64:	strb	r5, [r8, r3]
   18c68:	add	r3, fp, #2
   18c6c:	cmp	r9, r3
   18c70:	bls	18c80 <__assert_fail@plt+0x789c>
   18c74:	ubfx	r5, r4, #3, #3
   18c78:	add	r5, r5, #48	; 0x30
   18c7c:	strb	r5, [r8, r3]
   18c80:	add	fp, fp, #3
   18c84:	and	r4, r4, #7
   18c88:	add	r4, r4, #48	; 0x30
   18c8c:	add	r5, r6, #1
   18c90:	cmp	r5, lr
   18c94:	bcs	18cb0 <__assert_fail@plt+0x78cc>
   18c98:	ldr	r3, [sp, #56]	; 0x38
   18c9c:	mov	r6, r5
   18ca0:	b	18bd8 <__assert_fail@plt+0x77f4>
   18ca4:	str	ip, [sp, #36]	; 0x24
   18ca8:	ldr	r5, [sp, #84]	; 0x54
   18cac:	b	186dc <__assert_fail@plt+0x72f8>
   18cb0:	str	ip, [sp, #36]	; 0x24
   18cb4:	ldr	r5, [sp, #84]	; 0x54
   18cb8:	mov	r3, r0
   18cbc:	b	186dc <__assert_fail@plt+0x72f8>
   18cc0:	mov	r6, r5
   18cc4:	b	18bd8 <__assert_fail@plt+0x77f4>
   18cc8:	ldr	r3, [sp, #44]	; 0x2c
   18ccc:	b	18330 <__assert_fail@plt+0x6f4c>
   18cd0:	mov	r5, #0
   18cd4:	mov	r3, r5
   18cd8:	mov	r4, #63	; 0x3f
   18cdc:	b	18330 <__assert_fail@plt+0x6f4c>
   18ce0:	mov	r5, #0
   18ce4:	mov	r3, r5
   18ce8:	mov	r4, #63	; 0x3f
   18cec:	b	18330 <__assert_fail@plt+0x6f4c>
   18cf0:	mov	r5, #0
   18cf4:	mov	r3, r5
   18cf8:	b	18330 <__assert_fail@plt+0x6f4c>
   18cfc:	mov	r5, #0
   18d00:	mov	r3, r5
   18d04:	b	18330 <__assert_fail@plt+0x6f4c>
   18d08:	ldr	r5, [sp, #44]	; 0x2c
   18d0c:	ldr	r3, [sp, #32]
   18d10:	b	18330 <__assert_fail@plt+0x6f4c>
   18d14:	ldr	r5, [sp, #44]	; 0x2c
   18d18:	mov	r3, #0
   18d1c:	str	r3, [sp, #44]	; 0x2c
   18d20:	b	18330 <__assert_fail@plt+0x6f4c>
   18d24:	mov	r4, r3
   18d28:	mov	r5, #0
   18d2c:	b	18388 <__assert_fail@plt+0x6fa4>
   18d30:	mov	r5, #0
   18d34:	mov	r4, #97	; 0x61
   18d38:	b	18388 <__assert_fail@plt+0x6fa4>
   18d3c:	mov	r5, #0
   18d40:	mov	r3, r5
   18d44:	mov	r4, #92	; 0x5c
   18d48:	b	186dc <__assert_fail@plt+0x72f8>
   18d4c:	ldr	r3, [sp, #48]	; 0x30
   18d50:	ldrb	r5, [r3, r6]
   18d54:	adds	r5, r5, #0
   18d58:	movne	r5, #1
   18d5c:	b	1842c <__assert_fail@plt+0x7048>
   18d60:	cmp	sl, #2
   18d64:	movne	r3, #0
   18d68:	moveq	r3, #1
   18d6c:	ldr	r1, [sp, #32]
   18d70:	cmp	fp, #0
   18d74:	andeq	r2, r3, r1
   18d78:	movne	r2, #0
   18d7c:	cmp	r2, #0
   18d80:	bne	18ea0 <__assert_fail@plt+0x7abc>
   18d84:	eor	r2, r1, #1
   18d88:	uxtb	r2, r2
   18d8c:	and	r3, r3, r2
   18d90:	ldr	r1, [sp, #68]	; 0x44
   18d94:	ands	r3, r1, r3
   18d98:	beq	18e2c <__assert_fail@plt+0x7a48>
   18d9c:	ldr	r2, [sp, #40]	; 0x28
   18da0:	cmp	r2, #0
   18da4:	bne	18ddc <__assert_fail@plt+0x79f8>
   18da8:	ldr	r2, [sp, #72]	; 0x48
   18dac:	adds	r2, r2, #0
   18db0:	movne	r2, #1
   18db4:	cmp	r9, #0
   18db8:	movne	r2, #0
   18dbc:	str	r2, [sp, #68]	; 0x44
   18dc0:	mov	sl, #2
   18dc4:	ldr	r1, [sp, #40]	; 0x28
   18dc8:	str	r1, [sp, #32]
   18dcc:	cmp	r2, #0
   18dd0:	beq	18e20 <__assert_fail@plt+0x7a3c>
   18dd4:	ldr	r9, [sp, #72]	; 0x48
   18dd8:	b	17b34 <__assert_fail@plt+0x6750>
   18ddc:	ldr	r3, [sp, #168]	; 0xa8
   18de0:	str	r3, [sp, #16]
   18de4:	ldr	r3, [sp, #164]	; 0xa4
   18de8:	str	r3, [sp, #12]
   18dec:	ldr	r3, [sp, #160]	; 0xa0
   18df0:	str	r3, [sp, #8]
   18df4:	ldr	r3, [sp, #156]	; 0x9c
   18df8:	str	r3, [sp, #4]
   18dfc:	mov	r3, #5
   18e00:	str	r3, [sp]
   18e04:	ldr	r3, [sp, #24]
   18e08:	ldr	r2, [sp, #48]	; 0x30
   18e0c:	ldr	r1, [sp, #72]	; 0x48
   18e10:	ldr	r0, [sp, #64]	; 0x40
   18e14:	bl	17abc <__assert_fail@plt+0x66d8>
   18e18:	mov	fp, r0
   18e1c:	b	18f3c <__assert_fail@plt+0x7b58>
   18e20:	mov	r8, r9
   18e24:	mov	r2, r3
   18e28:	b	18e30 <__assert_fail@plt+0x7a4c>
   18e2c:	mov	r8, r9
   18e30:	ldr	r3, [sp, #60]	; 0x3c
   18e34:	cmp	r3, #0
   18e38:	moveq	r2, #0
   18e3c:	andne	r2, r2, #1
   18e40:	cmp	r2, #0
   18e44:	beq	18e74 <__assert_fail@plt+0x7a90>
   18e48:	mov	r2, r3
   18e4c:	ldrb	r3, [r3]
   18e50:	cmp	r3, #0
   18e54:	beq	18e74 <__assert_fail@plt+0x7a90>
   18e58:	ldr	r1, [sp, #64]	; 0x40
   18e5c:	cmp	r8, fp
   18e60:	strbhi	r3, [r1, fp]
   18e64:	add	fp, fp, #1
   18e68:	ldrb	r3, [r2, #1]!
   18e6c:	cmp	r3, #0
   18e70:	bne	18e5c <__assert_fail@plt+0x7a78>
   18e74:	cmp	r8, fp
   18e78:	bls	18f3c <__assert_fail@plt+0x7b58>
   18e7c:	mov	r3, #0
   18e80:	ldr	r2, [sp, #64]	; 0x40
   18e84:	strb	r3, [r2, fp]
   18e88:	b	18f3c <__assert_fail@plt+0x7b58>
   18e8c:	mov	r8, r9
   18e90:	mov	r7, sl
   18e94:	ldr	r3, [sp, #32]
   18e98:	str	r3, [sp, #28]
   18e9c:	b	18ee4 <__assert_fail@plt+0x7b00>
   18ea0:	mov	r8, r9
   18ea4:	mov	r7, #2
   18ea8:	b	18ee4 <__assert_fail@plt+0x7b00>
   18eac:	mov	r8, r9
   18eb0:	mov	r7, sl
   18eb4:	b	18ee4 <__assert_fail@plt+0x7b00>
   18eb8:	mov	r8, r9
   18ebc:	mov	r7, sl
   18ec0:	b	18ee4 <__assert_fail@plt+0x7b00>
   18ec4:	mov	r8, r9
   18ec8:	mov	r7, sl
   18ecc:	b	18ee4 <__assert_fail@plt+0x7b00>
   18ed0:	mov	r8, r9
   18ed4:	mov	r7, sl
   18ed8:	b	18ee4 <__assert_fail@plt+0x7b00>
   18edc:	mov	r8, r9
   18ee0:	mov	r7, sl
   18ee4:	ldr	r3, [sp, #28]
   18ee8:	cmp	r7, #2
   18eec:	movne	r3, #0
   18ef0:	andeq	r3, r3, #1
   18ef4:	cmp	r3, #0
   18ef8:	movne	r7, #4
   18efc:	ldr	r3, [sp, #168]	; 0xa8
   18f00:	str	r3, [sp, #16]
   18f04:	ldr	r3, [sp, #164]	; 0xa4
   18f08:	str	r3, [sp, #12]
   18f0c:	mov	r3, #0
   18f10:	str	r3, [sp, #8]
   18f14:	ldr	r3, [sp, #156]	; 0x9c
   18f18:	bic	r3, r3, #2
   18f1c:	str	r3, [sp, #4]
   18f20:	str	r7, [sp]
   18f24:	ldr	r3, [sp, #24]
   18f28:	ldr	r2, [sp, #48]	; 0x30
   18f2c:	mov	r1, r8
   18f30:	ldr	r0, [sp, #64]	; 0x40
   18f34:	bl	17abc <__assert_fail@plt+0x66d8>
   18f38:	mov	fp, r0
   18f3c:	mov	r0, fp
   18f40:	add	sp, sp, #116	; 0x74
   18f44:	ldrd	r4, [sp]
   18f48:	ldrd	r6, [sp, #8]
   18f4c:	ldrd	r8, [sp, #16]
   18f50:	ldrd	sl, [sp, #24]
   18f54:	add	sp, sp, #32
   18f58:	pop	{pc}		; (ldr pc, [sp], #4)
   18f5c:	mov	r8, r9
   18f60:	mov	r7, sl
   18f64:	b	18efc <__assert_fail@plt+0x7b18>
   18f68:	add	fp, fp, #4
   18f6c:	str	r3, [sp, #36]	; 0x24
   18f70:	mov	r5, #0
   18f74:	mov	r4, #48	; 0x30
   18f78:	b	18330 <__assert_fail@plt+0x6f4c>
   18f7c:	mov	r3, #1
   18f80:	str	r3, [sp, #32]
   18f84:	str	r3, [sp, #28]
   18f88:	str	r3, [sp, #52]	; 0x34
   18f8c:	movw	r3, #57940	; 0xe254
   18f90:	movt	r3, #1
   18f94:	str	r3, [sp, #60]	; 0x3c
   18f98:	mov	fp, #0
   18f9c:	mov	sl, #5
   18fa0:	b	17b94 <__assert_fail@plt+0x67b0>
   18fa4:	ldr	r3, [sp, #48]	; 0x30
   18fa8:	ldrb	r4, [r3, r6]
   18fac:	cmp	r4, #126	; 0x7e
   18fb0:	ldrls	pc, [pc, r4, lsl #2]
   18fb4:	b	188a0 <__assert_fail@plt+0x74bc>
   18fb8:	andeq	r8, r1, r8, lsr #32
   18fbc:	andeq	r8, r1, r0, lsr #17
   18fc0:	andeq	r8, r1, r0, lsr #17
   18fc4:	andeq	r8, r1, r0, lsr #17
   18fc8:	andeq	r8, r1, r0, lsr #17
   18fcc:	andeq	r8, r1, r0, lsr #17
   18fd0:	andeq	r8, r1, r0, lsr #17
   18fd4:	andeq	r8, r1, r0, lsr sp
   18fd8:	andeq	r8, r1, ip, asr #5
   18fdc:	andeq	r8, r1, r0, ror r6
   18fe0:	andeq	r8, r1, ip, lsr #14
   18fe4:	andeq	r8, r1, r4, lsl #13
   18fe8:	andeq	r8, r1, r0, ror #5
   18fec:	strdeq	r8, [r1], -r4
   18ff0:	andeq	r8, r1, r0, lsr #17
   18ff4:	andeq	r8, r1, r0, lsr #17
   18ff8:	andeq	r8, r1, r0, lsr #17
   18ffc:	andeq	r8, r1, r0, lsr #17
   19000:	andeq	r8, r1, r0, lsr #17
   19004:	andeq	r8, r1, r0, lsr #17
   19008:	andeq	r8, r1, r0, lsr #17
   1900c:	andeq	r8, r1, r0, lsr #17
   19010:	andeq	r8, r1, r0, lsr #17
   19014:	andeq	r8, r1, r0, lsr #17
   19018:	andeq	r8, r1, r0, lsr #17
   1901c:	andeq	r8, r1, r0, lsr #17
   19020:	andeq	r8, r1, r0, lsr #17
   19024:	andeq	r8, r1, r0, lsr #17
   19028:	andeq	r8, r1, r0, lsr #17
   1902c:	andeq	r8, r1, r0, lsr #17
   19030:	andeq	r8, r1, r0, lsr #17
   19034:	andeq	r8, r1, r0, lsr #17
   19038:			; <UNDEFINED> instruction: 0x000187b4
   1903c:	strdeq	r8, [r1], -r0
   19040:	strdeq	r8, [r1], -r0
   19044:	andeq	r8, r1, r8, lsr #15
   19048:	strdeq	r8, [r1], -r0
   1904c:	andeq	r8, r1, r4, lsl sp
   19050:	strdeq	r8, [r1], -r0
   19054:	andeq	r8, r1, r0, lsl #16
   19058:	strdeq	r8, [r1], -r0
   1905c:	strdeq	r8, [r1], -r0
   19060:	strdeq	r8, [r1], -r0
   19064:	andeq	r8, r1, r4, lsl sp
   19068:	andeq	r8, r1, r4, lsl sp
   1906c:	andeq	r8, r1, r4, lsl sp
   19070:	andeq	r8, r1, r4, lsl sp
   19074:	andeq	r8, r1, r4, lsl sp
   19078:	andeq	r8, r1, r4, lsl sp
   1907c:	andeq	r8, r1, r4, lsl sp
   19080:	andeq	r8, r1, r4, lsl sp
   19084:	andeq	r8, r1, r4, lsl sp
   19088:	andeq	r8, r1, r4, lsl sp
   1908c:	andeq	r8, r1, r4, lsl sp
   19090:	andeq	r8, r1, r4, lsl sp
   19094:	andeq	r8, r1, r4, lsl sp
   19098:	andeq	r8, r1, r4, lsl sp
   1909c:	andeq	r8, r1, r4, lsl sp
   190a0:	andeq	r8, r1, r4, lsl sp
   190a4:	strdeq	r8, [r1], -r0
   190a8:	strdeq	r8, [r1], -r0
   190ac:	strdeq	r8, [r1], -r0
   190b0:	strdeq	r8, [r1], -r0
   190b4:	andeq	r8, r1, r0, ror #2
   190b8:	andeq	r8, r1, r0, lsr #17
   190bc:	andeq	r8, r1, r4, lsl sp
   190c0:	andeq	r8, r1, r4, lsl sp
   190c4:	andeq	r8, r1, r4, lsl sp
   190c8:	andeq	r8, r1, r4, lsl sp
   190cc:	andeq	r8, r1, r4, lsl sp
   190d0:	andeq	r8, r1, r4, lsl sp
   190d4:	andeq	r8, r1, r4, lsl sp
   190d8:	andeq	r8, r1, r4, lsl sp
   190dc:	andeq	r8, r1, r4, lsl sp
   190e0:	andeq	r8, r1, r4, lsl sp
   190e4:	andeq	r8, r1, r4, lsl sp
   190e8:	andeq	r8, r1, r4, lsl sp
   190ec:	andeq	r8, r1, r4, lsl sp
   190f0:	andeq	r8, r1, r4, lsl sp
   190f4:	andeq	r8, r1, r4, lsl sp
   190f8:	andeq	r8, r1, r4, lsl sp
   190fc:	andeq	r8, r1, r4, lsl sp
   19100:	andeq	r8, r1, r4, lsl sp
   19104:	andeq	r8, r1, r4, lsl sp
   19108:	andeq	r8, r1, r4, lsl sp
   1910c:	andeq	r8, r1, r4, lsl sp
   19110:	andeq	r8, r1, r4, lsl sp
   19114:	andeq	r8, r1, r4, lsl sp
   19118:	andeq	r8, r1, r4, lsl sp
   1911c:	andeq	r8, r1, r4, lsl sp
   19120:	andeq	r8, r1, r4, lsl sp
   19124:	strdeq	r8, [r1], -r0
   19128:	muleq	r1, r8, r6
   1912c:	andeq	r8, r1, r4, lsl sp
   19130:	strdeq	r8, [r1], -r0
   19134:	andeq	r8, r1, r4, lsl sp
   19138:	strdeq	r8, [r1], -r0
   1913c:	andeq	r8, r1, r4, lsl sp
   19140:	andeq	r8, r1, r4, lsl sp
   19144:	andeq	r8, r1, r4, lsl sp
   19148:	andeq	r8, r1, r4, lsl sp
   1914c:	andeq	r8, r1, r4, lsl sp
   19150:	andeq	r8, r1, r4, lsl sp
   19154:	andeq	r8, r1, r4, lsl sp
   19158:	andeq	r8, r1, r4, lsl sp
   1915c:	andeq	r8, r1, r4, lsl sp
   19160:	andeq	r8, r1, r4, lsl sp
   19164:	andeq	r8, r1, r4, lsl sp
   19168:	andeq	r8, r1, r4, lsl sp
   1916c:	andeq	r8, r1, r4, lsl sp
   19170:	andeq	r8, r1, r4, lsl sp
   19174:	andeq	r8, r1, r4, lsl sp
   19178:	andeq	r8, r1, r4, lsl sp
   1917c:	andeq	r8, r1, r4, lsl sp
   19180:	andeq	r8, r1, r4, lsl sp
   19184:	andeq	r8, r1, r4, lsl sp
   19188:	andeq	r8, r1, r4, lsl sp
   1918c:	andeq	r8, r1, r4, lsl sp
   19190:	andeq	r8, r1, r4, lsl sp
   19194:	andeq	r8, r1, r4, lsl sp
   19198:	andeq	r8, r1, r4, lsl sp
   1919c:	andeq	r8, r1, r4, lsl sp
   191a0:	andeq	r8, r1, r4, lsl sp
   191a4:	andeq	r8, r1, r8, asr r7
   191a8:	strdeq	r8, [r1], -r0
   191ac:	andeq	r8, r1, r8, asr r7
   191b0:	andeq	r8, r1, r8, lsr #15
   191b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   191b8:	strd	r6, [sp, #8]
   191bc:	strd	r8, [sp, #16]
   191c0:	strd	sl, [sp, #24]
   191c4:	str	lr, [sp, #32]
   191c8:	sub	sp, sp, #52	; 0x34
   191cc:	mov	r5, r0
   191d0:	str	r1, [sp, #24]
   191d4:	str	r2, [sp, #28]
   191d8:	mov	r4, r3
   191dc:	bl	112c4 <__errno_location@plt>
   191e0:	str	r0, [sp, #32]
   191e4:	ldr	r3, [r0]
   191e8:	str	r3, [sp, #36]	; 0x24
   191ec:	movw	r3, #61832	; 0xf188
   191f0:	movt	r3, #2
   191f4:	ldr	r6, [r3]
   191f8:	cmn	r5, #-2147483647	; 0x80000001
   191fc:	movne	r3, #0
   19200:	moveq	r3, #1
   19204:	orrs	r3, r3, r5, lsr #31
   19208:	bne	1936c <__assert_fail@plt+0x7f88>
   1920c:	movw	r3, #61832	; 0xf188
   19210:	movt	r3, #2
   19214:	ldr	r2, [r3, #4]
   19218:	cmp	r2, r5
   1921c:	bgt	1928c <__assert_fail@plt+0x7ea8>
   19220:	str	r2, [sp, #44]	; 0x2c
   19224:	add	r3, r3, #8
   19228:	cmp	r6, r3
   1922c:	beq	19370 <__assert_fail@plt+0x7f8c>
   19230:	sub	r2, r5, r2
   19234:	mov	r3, #8
   19238:	str	r3, [sp]
   1923c:	mvn	r3, #-2147483648	; 0x80000000
   19240:	add	r2, r2, #1
   19244:	add	r1, sp, #44	; 0x2c
   19248:	mov	r0, r6
   1924c:	bl	1a9b8 <__assert_fail@plt+0x95d4>
   19250:	mov	r6, r0
   19254:	movw	r3, #61832	; 0xf188
   19258:	movt	r3, #2
   1925c:	str	r0, [r3]
   19260:	movw	r7, #61832	; 0xf188
   19264:	movt	r7, #2
   19268:	ldr	r0, [r7, #4]
   1926c:	ldr	r2, [sp, #44]	; 0x2c
   19270:	sub	r2, r2, r0
   19274:	lsl	r2, r2, #3
   19278:	mov	r1, #0
   1927c:	add	r0, r6, r0, lsl #3
   19280:	bl	112e8 <memset@plt>
   19284:	ldr	r3, [sp, #44]	; 0x2c
   19288:	str	r3, [r7, #4]
   1928c:	add	fp, r6, r5, lsl #3
   19290:	ldr	r8, [r6, r5, lsl #3]
   19294:	ldr	r7, [fp, #4]
   19298:	ldr	r3, [r4, #4]
   1929c:	orr	r9, r3, #1
   192a0:	add	sl, r4, #8
   192a4:	ldr	r3, [r4, #44]	; 0x2c
   192a8:	str	r3, [sp, #16]
   192ac:	ldr	r3, [r4, #40]	; 0x28
   192b0:	str	r3, [sp, #12]
   192b4:	str	sl, [sp, #8]
   192b8:	str	r9, [sp, #4]
   192bc:	ldr	r3, [r4]
   192c0:	str	r3, [sp]
   192c4:	ldr	r3, [sp, #28]
   192c8:	ldr	r2, [sp, #24]
   192cc:	mov	r1, r8
   192d0:	mov	r0, r7
   192d4:	bl	17abc <__assert_fail@plt+0x66d8>
   192d8:	cmp	r8, r0
   192dc:	bhi	19340 <__assert_fail@plt+0x7f5c>
   192e0:	add	r8, r0, #1
   192e4:	str	r8, [r6, r5, lsl #3]
   192e8:	movw	r3, #62132	; 0xf2b4
   192ec:	movt	r3, #2
   192f0:	cmp	r7, r3
   192f4:	beq	19300 <__assert_fail@plt+0x7f1c>
   192f8:	mov	r0, r7
   192fc:	bl	158a0 <__assert_fail@plt+0x44bc>
   19300:	mov	r0, r8
   19304:	bl	1a7b4 <__assert_fail@plt+0x93d0>
   19308:	mov	r7, r0
   1930c:	str	r0, [fp, #4]
   19310:	ldr	r3, [r4, #44]	; 0x2c
   19314:	str	r3, [sp, #16]
   19318:	ldr	r3, [r4, #40]	; 0x28
   1931c:	str	r3, [sp, #12]
   19320:	str	sl, [sp, #8]
   19324:	str	r9, [sp, #4]
   19328:	ldr	r3, [r4]
   1932c:	str	r3, [sp]
   19330:	ldr	r3, [sp, #28]
   19334:	ldr	r2, [sp, #24]
   19338:	mov	r1, r8
   1933c:	bl	17abc <__assert_fail@plt+0x66d8>
   19340:	ldr	r3, [sp, #32]
   19344:	ldr	r2, [sp, #36]	; 0x24
   19348:	str	r2, [r3]
   1934c:	mov	r0, r7
   19350:	add	sp, sp, #52	; 0x34
   19354:	ldrd	r4, [sp]
   19358:	ldrd	r6, [sp, #8]
   1935c:	ldrd	r8, [sp, #16]
   19360:	ldrd	sl, [sp, #24]
   19364:	add	sp, sp, #32
   19368:	pop	{pc}		; (ldr pc, [sp], #4)
   1936c:	bl	113cc <abort@plt>
   19370:	sub	r2, r5, r2
   19374:	mov	r3, #8
   19378:	str	r3, [sp]
   1937c:	mvn	r3, #-2147483648	; 0x80000000
   19380:	add	r2, r2, #1
   19384:	add	r1, sp, #44	; 0x2c
   19388:	mov	r0, #0
   1938c:	bl	1a9b8 <__assert_fail@plt+0x95d4>
   19390:	mov	r6, r0
   19394:	movw	r3, #61832	; 0xf188
   19398:	movt	r3, #2
   1939c:	str	r0, [r3]
   193a0:	ldrd	r2, [r3, #8]
   193a4:	strd	r2, [r0]
   193a8:	b	19260 <__assert_fail@plt+0x7e7c>
   193ac:	strd	r4, [sp, #-16]!
   193b0:	str	r6, [sp, #8]
   193b4:	str	lr, [sp, #12]
   193b8:	mov	r4, r0
   193bc:	bl	112c4 <__errno_location@plt>
   193c0:	mov	r5, r0
   193c4:	ldr	r6, [r0]
   193c8:	cmp	r4, #0
   193cc:	ldr	r3, [pc, #32]	; 193f4 <__assert_fail@plt+0x8010>
   193d0:	moveq	r4, r3
   193d4:	mov	r1, #48	; 0x30
   193d8:	mov	r0, r4
   193dc:	bl	1ab28 <__assert_fail@plt+0x9744>
   193e0:	str	r6, [r5]
   193e4:	ldrd	r4, [sp]
   193e8:	ldr	r6, [sp, #8]
   193ec:	add	sp, sp, #12
   193f0:	pop	{pc}		; (ldr pc, [sp], #4)
   193f4:			; <UNDEFINED> instruction: 0x0002f3b4
   193f8:	subs	r3, r0, #0
   193fc:	ldr	r2, [pc, #8]	; 1940c <__assert_fail@plt+0x8028>
   19400:	moveq	r3, r2
   19404:	ldr	r0, [r3]
   19408:	bx	lr
   1940c:			; <UNDEFINED> instruction: 0x0002f3b4
   19410:	subs	r3, r0, #0
   19414:	ldr	r2, [pc, #8]	; 19424 <__assert_fail@plt+0x8040>
   19418:	moveq	r3, r2
   1941c:	str	r1, [r3]
   19420:	bx	lr
   19424:			; <UNDEFINED> instruction: 0x0002f3b4
   19428:	push	{lr}		; (str lr, [sp, #-4]!)
   1942c:	subs	r3, r0, #0
   19430:	ldr	r0, [pc, #44]	; 19464 <__assert_fail@plt+0x8080>
   19434:	moveq	r3, r0
   19438:	add	r3, r3, #8
   1943c:	lsr	lr, r1, #5
   19440:	and	r1, r1, #31
   19444:	ldr	ip, [r3, lr, lsl #2]
   19448:	lsr	r0, ip, r1
   1944c:	eor	r2, r2, r0
   19450:	and	r2, r2, #1
   19454:	eor	r1, ip, r2, lsl r1
   19458:	str	r1, [r3, lr, lsl #2]
   1945c:	and	r0, r0, #1
   19460:	pop	{pc}		; (ldr pc, [sp], #4)
   19464:			; <UNDEFINED> instruction: 0x0002f3b4
   19468:	subs	r3, r0, #0
   1946c:	ldr	r2, [pc, #12]	; 19480 <__assert_fail@plt+0x809c>
   19470:	moveq	r3, r2
   19474:	ldr	r0, [r3, #4]
   19478:	str	r1, [r3, #4]
   1947c:	bx	lr
   19480:			; <UNDEFINED> instruction: 0x0002f3b4
   19484:	subs	r3, r0, #0
   19488:	ldr	r0, [pc, #44]	; 194bc <__assert_fail@plt+0x80d8>
   1948c:	moveq	r3, r0
   19490:	mov	r0, #10
   19494:	str	r0, [r3]
   19498:	cmp	r2, #0
   1949c:	cmpne	r1, #0
   194a0:	beq	194b0 <__assert_fail@plt+0x80cc>
   194a4:	str	r1, [r3, #40]	; 0x28
   194a8:	str	r2, [r3, #44]	; 0x2c
   194ac:	bx	lr
   194b0:	str	r4, [sp, #-8]!
   194b4:	str	lr, [sp, #4]
   194b8:	bl	113cc <abort@plt>
   194bc:			; <UNDEFINED> instruction: 0x0002f3b4
   194c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   194c4:	strd	r6, [sp, #8]
   194c8:	strd	r8, [sp, #16]
   194cc:	str	sl, [sp, #24]
   194d0:	str	lr, [sp, #28]
   194d4:	sub	sp, sp, #24
   194d8:	mov	r7, r0
   194dc:	mov	r8, r1
   194e0:	mov	r9, r2
   194e4:	mov	sl, r3
   194e8:	ldr	r4, [sp, #56]	; 0x38
   194ec:	cmp	r4, #0
   194f0:	ldr	r3, [pc, #104]	; 19560 <__assert_fail@plt+0x817c>
   194f4:	moveq	r4, r3
   194f8:	bl	112c4 <__errno_location@plt>
   194fc:	mov	r5, r0
   19500:	ldr	r6, [r0]
   19504:	ldr	r3, [r4, #44]	; 0x2c
   19508:	str	r3, [sp, #16]
   1950c:	ldr	r3, [r4, #40]	; 0x28
   19510:	str	r3, [sp, #12]
   19514:	add	r3, r4, #8
   19518:	str	r3, [sp, #8]
   1951c:	ldr	r3, [r4, #4]
   19520:	str	r3, [sp, #4]
   19524:	ldr	r3, [r4]
   19528:	str	r3, [sp]
   1952c:	mov	r3, sl
   19530:	mov	r2, r9
   19534:	mov	r1, r8
   19538:	mov	r0, r7
   1953c:	bl	17abc <__assert_fail@plt+0x66d8>
   19540:	str	r6, [r5]
   19544:	add	sp, sp, #24
   19548:	ldrd	r4, [sp]
   1954c:	ldrd	r6, [sp, #8]
   19550:	ldrd	r8, [sp, #16]
   19554:	ldr	sl, [sp, #24]
   19558:	add	sp, sp, #28
   1955c:	pop	{pc}		; (ldr pc, [sp], #4)
   19560:			; <UNDEFINED> instruction: 0x0002f3b4
   19564:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19568:	strd	r6, [sp, #8]
   1956c:	strd	r8, [sp, #16]
   19570:	strd	sl, [sp, #24]
   19574:	str	lr, [sp, #32]
   19578:	sub	sp, sp, #44	; 0x2c
   1957c:	mov	r8, r0
   19580:	mov	sl, r1
   19584:	mov	r6, r2
   19588:	subs	r4, r3, #0
   1958c:	ldr	r3, [pc, #200]	; 1965c <__assert_fail@plt+0x8278>
   19590:	moveq	r4, r3
   19594:	bl	112c4 <__errno_location@plt>
   19598:	mov	r7, r0
   1959c:	ldr	fp, [r0]
   195a0:	ldr	r5, [r4, #4]
   195a4:	cmp	r6, #0
   195a8:	orreq	r5, r5, #1
   195ac:	add	r9, r4, #8
   195b0:	ldr	r3, [r4, #44]	; 0x2c
   195b4:	str	r3, [sp, #16]
   195b8:	ldr	r3, [r4, #40]	; 0x28
   195bc:	str	r3, [sp, #12]
   195c0:	str	r9, [sp, #8]
   195c4:	str	r5, [sp, #4]
   195c8:	ldr	r3, [r4]
   195cc:	str	r3, [sp]
   195d0:	str	sl, [sp, #36]	; 0x24
   195d4:	mov	r3, sl
   195d8:	str	r8, [sp, #32]
   195dc:	mov	r2, r8
   195e0:	mov	r1, #0
   195e4:	mov	r0, r1
   195e8:	bl	17abc <__assert_fail@plt+0x66d8>
   195ec:	mov	sl, r0
   195f0:	add	r8, r0, #1
   195f4:	mov	r0, r8
   195f8:	bl	1a7b4 <__assert_fail@plt+0x93d0>
   195fc:	str	r0, [sp, #28]
   19600:	ldr	r3, [r4, #44]	; 0x2c
   19604:	str	r3, [sp, #16]
   19608:	ldr	r3, [r4, #40]	; 0x28
   1960c:	str	r3, [sp, #12]
   19610:	str	r9, [sp, #8]
   19614:	str	r5, [sp, #4]
   19618:	ldr	r3, [r4]
   1961c:	str	r3, [sp]
   19620:	ldr	r3, [sp, #36]	; 0x24
   19624:	ldr	r2, [sp, #32]
   19628:	mov	r1, r8
   1962c:	bl	17abc <__assert_fail@plt+0x66d8>
   19630:	str	fp, [r7]
   19634:	cmp	r6, #0
   19638:	strne	sl, [r6]
   1963c:	ldr	r0, [sp, #28]
   19640:	add	sp, sp, #44	; 0x2c
   19644:	ldrd	r4, [sp]
   19648:	ldrd	r6, [sp, #8]
   1964c:	ldrd	r8, [sp, #16]
   19650:	ldrd	sl, [sp, #24]
   19654:	add	sp, sp, #32
   19658:	pop	{pc}		; (ldr pc, [sp], #4)
   1965c:			; <UNDEFINED> instruction: 0x0002f3b4
   19660:	str	r4, [sp, #-8]!
   19664:	str	lr, [sp, #4]
   19668:	mov	r3, r2
   1966c:	mov	r2, #0
   19670:	bl	19564 <__assert_fail@plt+0x8180>
   19674:	ldr	r4, [sp]
   19678:	add	sp, sp, #4
   1967c:	pop	{pc}		; (ldr pc, [sp], #4)
   19680:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19684:	strd	r6, [sp, #8]
   19688:	str	r8, [sp, #16]
   1968c:	str	lr, [sp, #20]
   19690:	movw	r3, #61832	; 0xf188
   19694:	movt	r3, #2
   19698:	ldr	r7, [r3]
   1969c:	ldr	r3, [r3, #4]
   196a0:	cmp	r3, #1
   196a4:	ble	196d0 <__assert_fail@plt+0x82ec>
   196a8:	mov	r4, #1
   196ac:	add	r6, r7, #4
   196b0:	movw	r5, #61832	; 0xf188
   196b4:	movt	r5, #2
   196b8:	ldr	r0, [r6, r4, lsl #3]
   196bc:	bl	158a0 <__assert_fail@plt+0x44bc>
   196c0:	add	r4, r4, #1
   196c4:	ldr	r3, [r5, #4]
   196c8:	cmp	r3, r4
   196cc:	bgt	196b8 <__assert_fail@plt+0x82d4>
   196d0:	ldr	r0, [r7, #4]
   196d4:	movw	r3, #62132	; 0xf2b4
   196d8:	movt	r3, #2
   196dc:	cmp	r0, r3
   196e0:	beq	19704 <__assert_fail@plt+0x8320>
   196e4:	bl	158a0 <__assert_fail@plt+0x44bc>
   196e8:	movw	r3, #61832	; 0xf188
   196ec:	movt	r3, #2
   196f0:	mov	r2, #256	; 0x100
   196f4:	str	r2, [r3, #8]
   196f8:	movw	r2, #62132	; 0xf2b4
   196fc:	movt	r2, #2
   19700:	str	r2, [r3, #12]
   19704:	ldr	r3, [pc, #64]	; 1974c <__assert_fail@plt+0x8368>
   19708:	cmp	r7, r3
   1970c:	beq	19728 <__assert_fail@plt+0x8344>
   19710:	mov	r0, r7
   19714:	bl	158a0 <__assert_fail@plt+0x44bc>
   19718:	movw	r3, #61832	; 0xf188
   1971c:	movt	r3, #2
   19720:	add	r2, r3, #8
   19724:	str	r2, [r3]
   19728:	movw	r3, #61832	; 0xf188
   1972c:	movt	r3, #2
   19730:	mov	r2, #1
   19734:	str	r2, [r3, #4]
   19738:	ldrd	r4, [sp]
   1973c:	ldrd	r6, [sp, #8]
   19740:	ldr	r8, [sp, #16]
   19744:	add	sp, sp, #20
   19748:	pop	{pc}		; (ldr pc, [sp], #4)
   1974c:	muleq	r2, r0, r1
   19750:	str	r4, [sp, #-8]!
   19754:	str	lr, [sp, #4]
   19758:	ldr	r3, [pc, #16]	; 19770 <__assert_fail@plt+0x838c>
   1975c:	mvn	r2, #0
   19760:	bl	191b4 <__assert_fail@plt+0x7dd0>
   19764:	ldr	r4, [sp]
   19768:	add	sp, sp, #4
   1976c:	pop	{pc}		; (ldr pc, [sp], #4)
   19770:			; <UNDEFINED> instruction: 0x0002f3b4
   19774:	str	r4, [sp, #-8]!
   19778:	str	lr, [sp, #4]
   1977c:	ldr	r3, [pc, #12]	; 19790 <__assert_fail@plt+0x83ac>
   19780:	bl	191b4 <__assert_fail@plt+0x7dd0>
   19784:	ldr	r4, [sp]
   19788:	add	sp, sp, #4
   1978c:	pop	{pc}		; (ldr pc, [sp], #4)
   19790:			; <UNDEFINED> instruction: 0x0002f3b4
   19794:	str	r4, [sp, #-8]!
   19798:	str	lr, [sp, #4]
   1979c:	mov	r1, r0
   197a0:	mov	r0, #0
   197a4:	bl	19750 <__assert_fail@plt+0x836c>
   197a8:	ldr	r4, [sp]
   197ac:	add	sp, sp, #4
   197b0:	pop	{pc}		; (ldr pc, [sp], #4)
   197b4:	str	r4, [sp, #-8]!
   197b8:	str	lr, [sp, #4]
   197bc:	mov	r2, r1
   197c0:	mov	r1, r0
   197c4:	mov	r0, #0
   197c8:	bl	19774 <__assert_fail@plt+0x8390>
   197cc:	ldr	r4, [sp]
   197d0:	add	sp, sp, #4
   197d4:	pop	{pc}		; (ldr pc, [sp], #4)
   197d8:	strd	r4, [sp, #-12]!
   197dc:	str	lr, [sp, #8]
   197e0:	sub	sp, sp, #52	; 0x34
   197e4:	mov	r4, r0
   197e8:	mov	r5, r2
   197ec:	mov	r0, sp
   197f0:	bl	17928 <__assert_fail@plt+0x6544>
   197f4:	mov	r3, sp
   197f8:	mvn	r2, #0
   197fc:	mov	r1, r5
   19800:	mov	r0, r4
   19804:	bl	191b4 <__assert_fail@plt+0x7dd0>
   19808:	add	sp, sp, #52	; 0x34
   1980c:	ldrd	r4, [sp]
   19810:	add	sp, sp, #8
   19814:	pop	{pc}		; (ldr pc, [sp], #4)
   19818:	strd	r4, [sp, #-16]!
   1981c:	str	r6, [sp, #8]
   19820:	str	lr, [sp, #12]
   19824:	sub	sp, sp, #48	; 0x30
   19828:	mov	r4, r0
   1982c:	mov	r5, r2
   19830:	mov	r6, r3
   19834:	mov	r0, sp
   19838:	bl	17928 <__assert_fail@plt+0x6544>
   1983c:	mov	r3, sp
   19840:	mov	r2, r6
   19844:	mov	r1, r5
   19848:	mov	r0, r4
   1984c:	bl	191b4 <__assert_fail@plt+0x7dd0>
   19850:	add	sp, sp, #48	; 0x30
   19854:	ldrd	r4, [sp]
   19858:	ldr	r6, [sp, #8]
   1985c:	add	sp, sp, #12
   19860:	pop	{pc}		; (ldr pc, [sp], #4)
   19864:	str	r4, [sp, #-8]!
   19868:	str	lr, [sp, #4]
   1986c:	mov	r2, r1
   19870:	mov	r1, r0
   19874:	mov	r0, #0
   19878:	bl	197d8 <__assert_fail@plt+0x83f4>
   1987c:	ldr	r4, [sp]
   19880:	add	sp, sp, #4
   19884:	pop	{pc}		; (ldr pc, [sp], #4)
   19888:	str	r4, [sp, #-8]!
   1988c:	str	lr, [sp, #4]
   19890:	mov	r3, r2
   19894:	mov	r2, r1
   19898:	mov	r1, r0
   1989c:	mov	r0, #0
   198a0:	bl	19818 <__assert_fail@plt+0x8434>
   198a4:	ldr	r4, [sp]
   198a8:	add	sp, sp, #4
   198ac:	pop	{pc}		; (ldr pc, [sp], #4)
   198b0:	strd	r4, [sp, #-12]!
   198b4:	str	lr, [sp, #8]
   198b8:	sub	sp, sp, #52	; 0x34
   198bc:	mov	r4, r0
   198c0:	mov	r5, r1
   198c4:	mov	r1, r2
   198c8:	ldr	r0, [pc, #92]	; 1992c <__assert_fail@plt+0x8548>
   198cc:	ldrd	r2, [r0]
   198d0:	strd	r2, [sp]
   198d4:	ldrd	r2, [r0, #8]
   198d8:	strd	r2, [sp, #8]
   198dc:	ldrd	r2, [r0, #16]
   198e0:	strd	r2, [sp, #16]
   198e4:	ldrd	r2, [r0, #24]
   198e8:	strd	r2, [sp, #24]
   198ec:	ldrd	r2, [r0, #32]
   198f0:	strd	r2, [sp, #32]
   198f4:	ldrd	r2, [r0, #40]	; 0x28
   198f8:	strd	r2, [sp, #40]	; 0x28
   198fc:	mov	r2, #1
   19900:	mov	r0, sp
   19904:	bl	19428 <__assert_fail@plt+0x8044>
   19908:	mov	r3, sp
   1990c:	mov	r2, r5
   19910:	mov	r1, r4
   19914:	mov	r0, #0
   19918:	bl	191b4 <__assert_fail@plt+0x7dd0>
   1991c:	add	sp, sp, #52	; 0x34
   19920:	ldrd	r4, [sp]
   19924:	add	sp, sp, #8
   19928:	pop	{pc}		; (ldr pc, [sp], #4)
   1992c:			; <UNDEFINED> instruction: 0x0002f3b4
   19930:	str	r4, [sp, #-8]!
   19934:	str	lr, [sp, #4]
   19938:	mov	r2, r1
   1993c:	mvn	r1, #0
   19940:	bl	198b0 <__assert_fail@plt+0x84cc>
   19944:	ldr	r4, [sp]
   19948:	add	sp, sp, #4
   1994c:	pop	{pc}		; (ldr pc, [sp], #4)
   19950:	str	r4, [sp, #-8]!
   19954:	str	lr, [sp, #4]
   19958:	mov	r1, #58	; 0x3a
   1995c:	bl	19930 <__assert_fail@plt+0x854c>
   19960:	ldr	r4, [sp]
   19964:	add	sp, sp, #4
   19968:	pop	{pc}		; (ldr pc, [sp], #4)
   1996c:	str	r4, [sp, #-8]!
   19970:	str	lr, [sp, #4]
   19974:	mov	r2, #58	; 0x3a
   19978:	bl	198b0 <__assert_fail@plt+0x84cc>
   1997c:	ldr	r4, [sp]
   19980:	add	sp, sp, #4
   19984:	pop	{pc}		; (ldr pc, [sp], #4)
   19988:	strd	r4, [sp, #-12]!
   1998c:	str	lr, [sp, #8]
   19990:	sub	sp, sp, #100	; 0x64
   19994:	mov	r4, r0
   19998:	mov	r5, r2
   1999c:	mov	r0, sp
   199a0:	bl	17928 <__assert_fail@plt+0x6544>
   199a4:	ldrd	r2, [sp]
   199a8:	strd	r2, [sp, #48]	; 0x30
   199ac:	ldrd	r2, [sp, #8]
   199b0:	strd	r2, [sp, #56]	; 0x38
   199b4:	ldrd	r2, [sp, #16]
   199b8:	strd	r2, [sp, #64]	; 0x40
   199bc:	ldrd	r2, [sp, #24]
   199c0:	strd	r2, [sp, #72]	; 0x48
   199c4:	ldrd	r2, [sp, #32]
   199c8:	strd	r2, [sp, #80]	; 0x50
   199cc:	ldrd	r2, [sp, #40]	; 0x28
   199d0:	strd	r2, [sp, #88]	; 0x58
   199d4:	mov	r2, #1
   199d8:	mov	r1, #58	; 0x3a
   199dc:	add	r0, sp, #48	; 0x30
   199e0:	bl	19428 <__assert_fail@plt+0x8044>
   199e4:	add	r3, sp, #48	; 0x30
   199e8:	mvn	r2, #0
   199ec:	mov	r1, r5
   199f0:	mov	r0, r4
   199f4:	bl	191b4 <__assert_fail@plt+0x7dd0>
   199f8:	add	sp, sp, #100	; 0x64
   199fc:	ldrd	r4, [sp]
   19a00:	add	sp, sp, #8
   19a04:	pop	{pc}		; (ldr pc, [sp], #4)
   19a08:	strd	r4, [sp, #-20]!	; 0xffffffec
   19a0c:	strd	r6, [sp, #8]
   19a10:	str	lr, [sp, #16]
   19a14:	sub	sp, sp, #52	; 0x34
   19a18:	mov	r4, r0
   19a1c:	mov	r5, r3
   19a20:	ldr	r3, [pc, #92]	; 19a84 <__assert_fail@plt+0x86a0>
   19a24:	ldrd	r6, [r3]
   19a28:	strd	r6, [sp]
   19a2c:	ldrd	r6, [r3, #8]
   19a30:	strd	r6, [sp, #8]
   19a34:	ldrd	r6, [r3, #16]
   19a38:	strd	r6, [sp, #16]
   19a3c:	ldrd	r6, [r3, #24]
   19a40:	strd	r6, [sp, #24]
   19a44:	ldrd	r6, [r3, #32]
   19a48:	strd	r6, [sp, #32]
   19a4c:	ldrd	r6, [r3, #40]	; 0x28
   19a50:	strd	r6, [sp, #40]	; 0x28
   19a54:	mov	r0, sp
   19a58:	bl	19484 <__assert_fail@plt+0x80a0>
   19a5c:	mov	r3, sp
   19a60:	ldr	r2, [sp, #72]	; 0x48
   19a64:	mov	r1, r5
   19a68:	mov	r0, r4
   19a6c:	bl	191b4 <__assert_fail@plt+0x7dd0>
   19a70:	add	sp, sp, #52	; 0x34
   19a74:	ldrd	r4, [sp]
   19a78:	ldrd	r6, [sp, #8]
   19a7c:	add	sp, sp, #16
   19a80:	pop	{pc}		; (ldr pc, [sp], #4)
   19a84:			; <UNDEFINED> instruction: 0x0002f3b4
   19a88:	push	{lr}		; (str lr, [sp, #-4]!)
   19a8c:	sub	sp, sp, #12
   19a90:	mvn	ip, #0
   19a94:	str	ip, [sp]
   19a98:	bl	19a08 <__assert_fail@plt+0x8624>
   19a9c:	add	sp, sp, #12
   19aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   19aa4:	str	r4, [sp, #-8]!
   19aa8:	str	lr, [sp, #4]
   19aac:	mov	r3, r2
   19ab0:	mov	r2, r1
   19ab4:	mov	r1, r0
   19ab8:	mov	r0, #0
   19abc:	bl	19a88 <__assert_fail@plt+0x86a4>
   19ac0:	ldr	r4, [sp]
   19ac4:	add	sp, sp, #4
   19ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   19acc:	push	{lr}		; (str lr, [sp, #-4]!)
   19ad0:	sub	sp, sp, #12
   19ad4:	str	r3, [sp]
   19ad8:	mov	r3, r2
   19adc:	mov	r2, r1
   19ae0:	mov	r1, r0
   19ae4:	mov	r0, #0
   19ae8:	bl	19a08 <__assert_fail@plt+0x8624>
   19aec:	add	sp, sp, #12
   19af0:	pop	{pc}		; (ldr pc, [sp], #4)
   19af4:	str	r4, [sp, #-8]!
   19af8:	str	lr, [sp, #4]
   19afc:	ldr	r3, [pc, #12]	; 19b10 <__assert_fail@plt+0x872c>
   19b00:	bl	191b4 <__assert_fail@plt+0x7dd0>
   19b04:	ldr	r4, [sp]
   19b08:	add	sp, sp, #4
   19b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b10:	muleq	r2, r8, r1
   19b14:	str	r4, [sp, #-8]!
   19b18:	str	lr, [sp, #4]
   19b1c:	mov	r2, r1
   19b20:	mov	r1, r0
   19b24:	mov	r0, #0
   19b28:	bl	19af4 <__assert_fail@plt+0x8710>
   19b2c:	ldr	r4, [sp]
   19b30:	add	sp, sp, #4
   19b34:	pop	{pc}		; (ldr pc, [sp], #4)
   19b38:	str	r4, [sp, #-8]!
   19b3c:	str	lr, [sp, #4]
   19b40:	mvn	r2, #0
   19b44:	bl	19af4 <__assert_fail@plt+0x8710>
   19b48:	ldr	r4, [sp]
   19b4c:	add	sp, sp, #4
   19b50:	pop	{pc}		; (ldr pc, [sp], #4)
   19b54:	str	r4, [sp, #-8]!
   19b58:	str	lr, [sp, #4]
   19b5c:	mov	r1, r0
   19b60:	mov	r0, #0
   19b64:	bl	19b38 <__assert_fail@plt+0x8754>
   19b68:	ldr	r4, [sp]
   19b6c:	add	sp, sp, #4
   19b70:	pop	{pc}		; (ldr pc, [sp], #4)
   19b74:	strd	r4, [sp, #-16]!
   19b78:	str	r6, [sp, #8]
   19b7c:	str	lr, [sp, #12]
   19b80:	mov	r6, r1
   19b84:	mov	r4, r2
   19b88:	mov	r1, #0
   19b8c:	bl	11354 <setlocale@plt>
   19b90:	subs	r5, r0, #0
   19b94:	beq	19bd8 <__assert_fail@plt+0x87f4>
   19b98:	mov	r0, r5
   19b9c:	bl	11294 <strlen@plt>
   19ba0:	cmp	r4, r0
   19ba4:	bhi	19bf4 <__assert_fail@plt+0x8810>
   19ba8:	cmp	r4, #0
   19bac:	moveq	r0, #34	; 0x22
   19bb0:	beq	19c08 <__assert_fail@plt+0x8824>
   19bb4:	sub	r4, r4, #1
   19bb8:	mov	r2, r4
   19bbc:	mov	r1, r5
   19bc0:	mov	r0, r6
   19bc4:	bl	1112c <memcpy@plt>
   19bc8:	mov	r3, #0
   19bcc:	strb	r3, [r6, r4]
   19bd0:	mov	r0, #34	; 0x22
   19bd4:	b	19c08 <__assert_fail@plt+0x8824>
   19bd8:	cmp	r4, #0
   19bdc:	moveq	r0, #22
   19be0:	beq	19c08 <__assert_fail@plt+0x8824>
   19be4:	mov	r3, #0
   19be8:	strb	r3, [r6]
   19bec:	mov	r0, #22
   19bf0:	b	19c08 <__assert_fail@plt+0x8824>
   19bf4:	add	r2, r0, #1
   19bf8:	mov	r1, r5
   19bfc:	mov	r0, r6
   19c00:	bl	1112c <memcpy@plt>
   19c04:	mov	r0, #0
   19c08:	ldrd	r4, [sp]
   19c0c:	ldr	r6, [sp, #8]
   19c10:	add	sp, sp, #12
   19c14:	pop	{pc}		; (ldr pc, [sp], #4)
   19c18:	str	r4, [sp, #-8]!
   19c1c:	str	lr, [sp, #4]
   19c20:	mov	r1, #0
   19c24:	bl	11354 <setlocale@plt>
   19c28:	ldr	r4, [sp]
   19c2c:	add	sp, sp, #4
   19c30:	pop	{pc}		; (ldr pc, [sp], #4)
   19c34:	str	r4, [sp, #-8]!
   19c38:	str	lr, [sp, #4]
   19c3c:	subs	r1, r0, #0
   19c40:	beq	19c60 <__assert_fail@plt+0x887c>
   19c44:	mov	r2, #1
   19c48:	movw	r0, #57144	; 0xdf38
   19c4c:	movt	r0, #1
   19c50:	bl	112ac <setenv@plt>
   19c54:	ldr	r4, [sp]
   19c58:	add	sp, sp, #4
   19c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c60:	movw	r0, #57144	; 0xdf38
   19c64:	movt	r0, #1
   19c68:	bl	113b4 <unsetenv@plt>
   19c6c:	b	19c54 <__assert_fail@plt+0x8870>
   19c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19c74:	strd	r6, [sp, #8]
   19c78:	str	r8, [sp, #16]
   19c7c:	str	lr, [sp, #20]
   19c80:	subs	r6, r0, #0
   19c84:	beq	19cf8 <__assert_fail@plt+0x8914>
   19c88:	mov	r0, r6
   19c8c:	bl	11294 <strlen@plt>
   19c90:	add	r5, r0, #1
   19c94:	cmp	r5, #58	; 0x3a
   19c98:	movcs	r0, r5
   19c9c:	movcc	r0, #58	; 0x3a
   19ca0:	add	r0, r0, #9
   19ca4:	bic	r0, r0, #3
   19ca8:	bl	1c28c <__assert_fail@plt+0xaea8>
   19cac:	subs	r4, r0, #0
   19cb0:	beq	19ce0 <__assert_fail@plt+0x88fc>
   19cb4:	mov	r8, #0
   19cb8:	str	r8, [r4]
   19cbc:	mov	r3, #1
   19cc0:	strb	r3, [r4, #4]
   19cc4:	mov	r7, r4
   19cc8:	strb	r8, [r7, #5]!
   19ccc:	mov	r2, r5
   19cd0:	mov	r1, r6
   19cd4:	mov	r0, r7
   19cd8:	bl	1112c <memcpy@plt>
   19cdc:	strb	r8, [r7, r5]
   19ce0:	mov	r0, r4
   19ce4:	ldrd	r4, [sp]
   19ce8:	ldrd	r6, [sp, #8]
   19cec:	ldr	r8, [sp, #16]
   19cf0:	add	sp, sp, #20
   19cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf8:	mov	r0, #64	; 0x40
   19cfc:	bl	1c28c <__assert_fail@plt+0xaea8>
   19d00:	subs	r4, r0, #0
   19d04:	beq	19ce0 <__assert_fail@plt+0x88fc>
   19d08:	mov	r3, #0
   19d0c:	str	r3, [r4]
   19d10:	strb	r3, [r4, #4]
   19d14:	strb	r3, [r4, #5]
   19d18:	b	19ce0 <__assert_fail@plt+0x88fc>
   19d1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19d20:	strd	r6, [sp, #8]
   19d24:	str	r8, [sp, #16]
   19d28:	str	lr, [sp, #20]
   19d2c:	ldr	r6, [r1, #40]	; 0x28
   19d30:	cmp	r6, #0
   19d34:	moveq	r0, #1
   19d38:	beq	19d7c <__assert_fail@plt+0x8998>
   19d3c:	mov	r5, r0
   19d40:	mov	r7, r1
   19d44:	cmp	r1, r6
   19d48:	bhi	19d5c <__assert_fail@plt+0x8978>
   19d4c:	add	r3, r1, #44	; 0x2c
   19d50:	cmp	r6, r3
   19d54:	movcc	r0, #1
   19d58:	bcc	19d7c <__assert_fail@plt+0x8998>
   19d5c:	ldrb	r3, [r6]
   19d60:	cmp	r3, #0
   19d64:	addne	r4, r5, #5
   19d68:	bne	19de0 <__assert_fail@plt+0x89fc>
   19d6c:	movw	r4, #52296	; 0xcc48
   19d70:	movt	r4, #1
   19d74:	str	r4, [r7, #40]	; 0x28
   19d78:	mov	r0, #1
   19d7c:	ldrd	r4, [sp]
   19d80:	ldrd	r6, [sp, #8]
   19d84:	ldr	r8, [sp, #16]
   19d88:	add	sp, sp, #20
   19d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d90:	mov	r0, r6
   19d94:	bl	19c70 <__assert_fail@plt+0x888c>
   19d98:	str	r0, [r5]
   19d9c:	cmp	r0, #0
   19da0:	moveq	r0, #0
   19da4:	beq	19d7c <__assert_fail@plt+0x8998>
   19da8:	mov	r3, #0
   19dac:	strb	r3, [r0, #4]
   19db0:	add	r4, r0, #5
   19db4:	b	19d74 <__assert_fail@plt+0x8990>
   19db8:	mov	r0, r4
   19dbc:	bl	11294 <strlen@plt>
   19dc0:	add	r0, r0, #1
   19dc4:	ldrb	r3, [r4, r0]!
   19dc8:	cmp	r3, #0
   19dcc:	bne	19de0 <__assert_fail@plt+0x89fc>
   19dd0:	ldr	r3, [r5]
   19dd4:	cmp	r3, #0
   19dd8:	addne	r4, r3, #5
   19ddc:	movne	r5, r3
   19de0:	mov	r1, r6
   19de4:	mov	r0, r4
   19de8:	bl	110c0 <strcmp@plt>
   19dec:	cmp	r0, #0
   19df0:	beq	19d74 <__assert_fail@plt+0x8990>
   19df4:	ldrb	r3, [r4]
   19df8:	cmp	r3, #0
   19dfc:	bne	19db8 <__assert_fail@plt+0x89d4>
   19e00:	add	r3, r5, #5
   19e04:	cmp	r4, r3
   19e08:	bne	19e18 <__assert_fail@plt+0x8a34>
   19e0c:	ldrb	r3, [r5, #4]
   19e10:	cmp	r3, #0
   19e14:	bne	19db8 <__assert_fail@plt+0x89d4>
   19e18:	mov	r0, r6
   19e1c:	bl	11294 <strlen@plt>
   19e20:	add	r8, r0, #1
   19e24:	add	r3, r5, #64	; 0x40
   19e28:	sub	r3, r3, r4
   19e2c:	cmp	r3, r8
   19e30:	ble	19d90 <__assert_fail@plt+0x89ac>
   19e34:	mov	r2, r8
   19e38:	mov	r1, r6
   19e3c:	mov	r0, r4
   19e40:	bl	1112c <memcpy@plt>
   19e44:	mov	r3, #0
   19e48:	strb	r3, [r4, r8]
   19e4c:	b	19d74 <__assert_fail@plt+0x8990>
   19e50:	cmp	r0, #1
   19e54:	bxeq	lr
   19e58:	cmp	r0, #0
   19e5c:	bxeq	lr
   19e60:	str	r4, [sp, #-8]!
   19e64:	str	lr, [sp, #4]
   19e68:	ldr	r4, [r0]
   19e6c:	bl	158a0 <__assert_fail@plt+0x44bc>
   19e70:	mov	r0, r4
   19e74:	cmp	r4, #0
   19e78:	bne	19e68 <__assert_fail@plt+0x8a84>
   19e7c:	ldr	r4, [sp]
   19e80:	add	sp, sp, #4
   19e84:	pop	{pc}		; (ldr pc, [sp], #4)
   19e88:	strd	r4, [sp, #-16]!
   19e8c:	str	r6, [sp, #8]
   19e90:	str	lr, [sp, #12]
   19e94:	mov	r4, r0
   19e98:	movw	r0, #57144	; 0xdf38
   19e9c:	movt	r0, #1
   19ea0:	bl	11210 <getenv@plt>
   19ea4:	subs	r5, r0, #0
   19ea8:	beq	19ef0 <__assert_fail@plt+0x8b0c>
   19eac:	ldrb	r3, [r4, #4]
   19eb0:	cmp	r3, #0
   19eb4:	moveq	r0, #0
   19eb8:	beq	19ed0 <__assert_fail@plt+0x8aec>
   19ebc:	mov	r1, r5
   19ec0:	add	r0, r4, #5
   19ec4:	bl	110c0 <strcmp@plt>
   19ec8:	clz	r0, r0
   19ecc:	lsr	r0, r0, #5
   19ed0:	cmp	r0, #0
   19ed4:	movne	r5, #1
   19ed8:	beq	19f00 <__assert_fail@plt+0x8b1c>
   19edc:	mov	r0, r5
   19ee0:	ldrd	r4, [sp]
   19ee4:	ldr	r6, [sp, #8]
   19ee8:	add	sp, sp, #12
   19eec:	pop	{pc}		; (ldr pc, [sp], #4)
   19ef0:	ldrb	r0, [r4, #4]
   19ef4:	clz	r0, r0
   19ef8:	lsr	r0, r0, #5
   19efc:	b	19ed0 <__assert_fail@plt+0x8aec>
   19f00:	mov	r0, r5
   19f04:	bl	19c70 <__assert_fail@plt+0x888c>
   19f08:	subs	r5, r0, #0
   19f0c:	beq	19edc <__assert_fail@plt+0x8af8>
   19f10:	ldrb	r3, [r4, #4]
   19f14:	cmp	r3, #0
   19f18:	addne	r0, r4, #5
   19f1c:	moveq	r0, #0
   19f20:	bl	19c34 <__assert_fail@plt+0x8850>
   19f24:	cmp	r0, #0
   19f28:	beq	19f4c <__assert_fail@plt+0x8b68>
   19f2c:	bl	112c4 <__errno_location@plt>
   19f30:	mov	r4, r0
   19f34:	ldr	r6, [r0]
   19f38:	mov	r0, r5
   19f3c:	bl	19e50 <__assert_fail@plt+0x8a6c>
   19f40:	str	r6, [r4]
   19f44:	mov	r5, #0
   19f48:	b	19edc <__assert_fail@plt+0x8af8>
   19f4c:	bl	111b0 <tzset@plt>
   19f50:	b	19edc <__assert_fail@plt+0x8af8>
   19f54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19f58:	strd	r6, [sp, #8]
   19f5c:	str	r8, [sp, #16]
   19f60:	str	lr, [sp, #20]
   19f64:	cmp	r0, #1
   19f68:	moveq	r5, #1
   19f6c:	beq	19fb0 <__assert_fail@plt+0x8bcc>
   19f70:	mov	r4, r0
   19f74:	bl	112c4 <__errno_location@plt>
   19f78:	mov	r6, r0
   19f7c:	ldr	r7, [r0]
   19f80:	ldrb	r3, [r4, #4]
   19f84:	cmp	r3, #0
   19f88:	addne	r0, r4, #5
   19f8c:	moveq	r0, #0
   19f90:	bl	19c34 <__assert_fail@plt+0x8850>
   19f94:	cmp	r0, #0
   19f98:	beq	19fc8 <__assert_fail@plt+0x8be4>
   19f9c:	ldr	r7, [r6]
   19fa0:	mov	r5, #0
   19fa4:	mov	r0, r4
   19fa8:	bl	19e50 <__assert_fail@plt+0x8a6c>
   19fac:	str	r7, [r6]
   19fb0:	mov	r0, r5
   19fb4:	ldrd	r4, [sp]
   19fb8:	ldrd	r6, [sp, #8]
   19fbc:	ldr	r8, [sp, #16]
   19fc0:	add	sp, sp, #20
   19fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   19fc8:	bl	111b0 <tzset@plt>
   19fcc:	mov	r5, #1
   19fd0:	b	19fa4 <__assert_fail@plt+0x8bc0>
   19fd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19fd8:	strd	r6, [sp, #8]
   19fdc:	str	r8, [sp, #16]
   19fe0:	str	lr, [sp, #20]
   19fe4:	mov	r6, r1
   19fe8:	mov	r4, r2
   19fec:	subs	r5, r0, #0
   19ff0:	beq	1a05c <__assert_fail@plt+0x8c78>
   19ff4:	mov	r0, r5
   19ff8:	bl	19e88 <__assert_fail@plt+0x8aa4>
   19ffc:	subs	r7, r0, #0
   1a000:	moveq	r4, r7
   1a004:	beq	1a044 <__assert_fail@plt+0x8c60>
   1a008:	mov	r1, r4
   1a00c:	mov	r0, r6
   1a010:	bl	11180 <localtime_r@plt>
   1a014:	subs	r6, r0, #0
   1a018:	beq	1a070 <__assert_fail@plt+0x8c8c>
   1a01c:	mov	r1, r4
   1a020:	mov	r0, r5
   1a024:	bl	19d1c <__assert_fail@plt+0x8938>
   1a028:	mov	r5, r0
   1a02c:	mov	r0, r7
   1a030:	bl	19f54 <__assert_fail@plt+0x8b70>
   1a034:	and	r0, r0, r5
   1a038:	uxtb	r0, r0
   1a03c:	cmp	r0, #0
   1a040:	moveq	r4, #0
   1a044:	mov	r0, r4
   1a048:	ldrd	r4, [sp]
   1a04c:	ldrd	r6, [sp, #8]
   1a050:	ldr	r8, [sp, #16]
   1a054:	add	sp, sp, #20
   1a058:	pop	{pc}		; (ldr pc, [sp], #4)
   1a05c:	mov	r1, r2
   1a060:	mov	r0, r6
   1a064:	bl	110b4 <gmtime_r@plt>
   1a068:	mov	r4, r0
   1a06c:	b	1a044 <__assert_fail@plt+0x8c60>
   1a070:	mov	r0, r7
   1a074:	bl	19f54 <__assert_fail@plt+0x8b70>
   1a078:	mov	r4, r6
   1a07c:	b	1a044 <__assert_fail@plt+0x8c60>
   1a080:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a084:	strd	r6, [sp, #8]
   1a088:	str	lr, [sp, #16]
   1a08c:	sub	sp, sp, #52	; 0x34
   1a090:	mov	r4, r1
   1a094:	subs	r5, r0, #0
   1a098:	beq	1a114 <__assert_fail@plt+0x8d30>
   1a09c:	mov	r0, r5
   1a0a0:	bl	19e88 <__assert_fail@plt+0x8aa4>
   1a0a4:	subs	r7, r0, #0
   1a0a8:	beq	1a190 <__assert_fail@plt+0x8dac>
   1a0ac:	ldr	r3, [r4]
   1a0b0:	str	r3, [sp, #4]
   1a0b4:	ldr	r3, [r4, #4]
   1a0b8:	str	r3, [sp, #8]
   1a0bc:	ldr	r3, [r4, #8]
   1a0c0:	str	r3, [sp, #12]
   1a0c4:	ldr	r3, [r4, #12]
   1a0c8:	str	r3, [sp, #16]
   1a0cc:	ldr	r3, [r4, #16]
   1a0d0:	str	r3, [sp, #20]
   1a0d4:	ldr	r3, [r4, #20]
   1a0d8:	str	r3, [sp, #24]
   1a0dc:	mvn	r3, #0
   1a0e0:	str	r3, [sp, #32]
   1a0e4:	ldr	r3, [r4, #32]
   1a0e8:	str	r3, [sp, #36]	; 0x24
   1a0ec:	add	r0, sp, #4
   1a0f0:	bl	110e4 <mktime@plt>
   1a0f4:	mov	r6, r0
   1a0f8:	ldr	r3, [sp, #32]
   1a0fc:	cmp	r3, #0
   1a100:	bge	1a124 <__assert_fail@plt+0x8d40>
   1a104:	mov	r0, r7
   1a108:	bl	19f54 <__assert_fail@plt+0x8b70>
   1a10c:	mvn	r6, #0
   1a110:	b	1a178 <__assert_fail@plt+0x8d94>
   1a114:	mov	r0, r1
   1a118:	bl	11378 <timegm@plt>
   1a11c:	mov	r6, r0
   1a120:	b	1a178 <__assert_fail@plt+0x8d94>
   1a124:	add	r1, sp, #4
   1a128:	mov	r0, r5
   1a12c:	bl	19d1c <__assert_fail@plt+0x8938>
   1a130:	mov	r5, r0
   1a134:	mov	r0, r7
   1a138:	bl	19f54 <__assert_fail@plt+0x8b70>
   1a13c:	and	r0, r0, r5
   1a140:	tst	r0, #255	; 0xff
   1a144:	beq	1a10c <__assert_fail@plt+0x8d28>
   1a148:	ldrd	r2, [sp, #4]
   1a14c:	strd	r2, [r4]
   1a150:	ldrd	r2, [sp, #12]
   1a154:	strd	r2, [r4, #8]
   1a158:	ldrd	r2, [sp, #20]
   1a15c:	strd	r2, [r4, #16]
   1a160:	ldrd	r2, [sp, #28]
   1a164:	strd	r2, [r4, #24]
   1a168:	ldrd	r2, [sp, #36]	; 0x24
   1a16c:	strd	r2, [r4, #32]
   1a170:	ldr	r3, [sp, #44]	; 0x2c
   1a174:	str	r3, [r4, #40]	; 0x28
   1a178:	mov	r0, r6
   1a17c:	add	sp, sp, #52	; 0x34
   1a180:	ldrd	r4, [sp]
   1a184:	ldrd	r6, [sp, #8]
   1a188:	add	sp, sp, #16
   1a18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a190:	mvn	r6, #0
   1a194:	b	1a178 <__assert_fail@plt+0x8d94>
   1a198:	str	r4, [sp, #-8]!
   1a19c:	str	lr, [sp, #4]
   1a1a0:	mov	r2, #3
   1a1a4:	mov	r1, #0
   1a1a8:	bl	1c3b0 <__assert_fail@plt+0xafcc>
   1a1ac:	ldr	r4, [sp]
   1a1b0:	add	sp, sp, #4
   1a1b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1b8:	strd	r4, [sp, #-16]!
   1a1bc:	str	r6, [sp, #8]
   1a1c0:	str	lr, [sp, #12]
   1a1c4:	sub	sp, sp, #32
   1a1c8:	mov	r4, r0
   1a1cc:	ldr	r5, [sp, #48]	; 0x30
   1a1d0:	ldr	r6, [sp, #52]	; 0x34
   1a1d4:	cmp	r1, #0
   1a1d8:	beq	1a2a4 <__assert_fail@plt+0x8ec0>
   1a1dc:	str	r3, [sp, #4]
   1a1e0:	str	r2, [sp]
   1a1e4:	mov	r3, r1
   1a1e8:	movw	r2, #58068	; 0xe2d4
   1a1ec:	movt	r2, #1
   1a1f0:	mov	r1, #1
   1a1f4:	bl	1130c <__fprintf_chk@plt>
   1a1f8:	mov	r2, #5
   1a1fc:	movw	r1, #58088	; 0xe2e8
   1a200:	movt	r1, #1
   1a204:	mov	r0, #0
   1a208:	bl	11168 <dcgettext@plt>
   1a20c:	movw	r3, #2022	; 0x7e6
   1a210:	str	r3, [sp]
   1a214:	mov	r3, r0
   1a218:	movw	r2, #58816	; 0xe5c0
   1a21c:	movt	r2, #1
   1a220:	mov	r1, #1
   1a224:	mov	r0, r4
   1a228:	bl	1130c <__fprintf_chk@plt>
   1a22c:	mov	r1, r4
   1a230:	mov	r0, #10
   1a234:	bl	1115c <fputc_unlocked@plt>
   1a238:	mov	r2, #5
   1a23c:	movw	r1, #58092	; 0xe2ec
   1a240:	movt	r1, #1
   1a244:	mov	r0, #0
   1a248:	bl	11168 <dcgettext@plt>
   1a24c:	movw	r3, #58264	; 0xe398
   1a250:	movt	r3, #1
   1a254:	mov	r2, r0
   1a258:	mov	r1, #1
   1a25c:	mov	r0, r4
   1a260:	bl	1130c <__fprintf_chk@plt>
   1a264:	mov	r1, r4
   1a268:	mov	r0, #10
   1a26c:	bl	1115c <fputc_unlocked@plt>
   1a270:	cmp	r6, #9
   1a274:	ldrls	pc, [pc, r6, lsl #2]
   1a278:	b	1a57c <__assert_fail@plt+0x9198>
   1a27c:	andeq	sl, r1, r8, ror #5
   1a280:	andeq	sl, r1, r0, asr #5
   1a284:	strdeq	sl, [r1], -ip
   1a288:	andeq	sl, r1, r0, lsr r3
   1a28c:	andeq	sl, r1, ip, ror #6
   1a290:			; <UNDEFINED> instruction: 0x0001a3b0
   1a294:	strdeq	sl, [r1], -ip
   1a298:	andeq	sl, r1, r0, asr r4
   1a29c:	andeq	sl, r1, ip, lsr #9
   1a2a0:	andeq	sl, r1, r0, lsl r5
   1a2a4:	str	r3, [sp]
   1a2a8:	mov	r3, r2
   1a2ac:	movw	r2, #58080	; 0xe2e0
   1a2b0:	movt	r2, #1
   1a2b4:	mov	r1, #1
   1a2b8:	bl	1130c <__fprintf_chk@plt>
   1a2bc:	b	1a1f8 <__assert_fail@plt+0x8e14>
   1a2c0:	mov	r2, #5
   1a2c4:	movw	r1, #58300	; 0xe3bc
   1a2c8:	movt	r1, #1
   1a2cc:	mov	r0, #0
   1a2d0:	bl	11168 <dcgettext@plt>
   1a2d4:	ldr	r3, [r5]
   1a2d8:	mov	r2, r0
   1a2dc:	mov	r1, #1
   1a2e0:	mov	r0, r4
   1a2e4:	bl	1130c <__fprintf_chk@plt>
   1a2e8:	add	sp, sp, #32
   1a2ec:	ldrd	r4, [sp]
   1a2f0:	ldr	r6, [sp, #8]
   1a2f4:	add	sp, sp, #12
   1a2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2fc:	mov	r2, #5
   1a300:	movw	r1, #58316	; 0xe3cc
   1a304:	movt	r1, #1
   1a308:	mov	r0, #0
   1a30c:	bl	11168 <dcgettext@plt>
   1a310:	ldr	r3, [r5, #4]
   1a314:	str	r3, [sp]
   1a318:	ldr	r3, [r5]
   1a31c:	mov	r2, r0
   1a320:	mov	r1, #1
   1a324:	mov	r0, r4
   1a328:	bl	1130c <__fprintf_chk@plt>
   1a32c:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a330:	mov	r2, #5
   1a334:	movw	r1, #58340	; 0xe3e4
   1a338:	movt	r1, #1
   1a33c:	mov	r0, #0
   1a340:	bl	11168 <dcgettext@plt>
   1a344:	ldr	r3, [r5, #8]
   1a348:	str	r3, [sp, #4]
   1a34c:	ldr	r3, [r5, #4]
   1a350:	str	r3, [sp]
   1a354:	ldr	r3, [r5]
   1a358:	mov	r2, r0
   1a35c:	mov	r1, #1
   1a360:	mov	r0, r4
   1a364:	bl	1130c <__fprintf_chk@plt>
   1a368:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a36c:	mov	r2, #5
   1a370:	movw	r1, #58368	; 0xe400
   1a374:	movt	r1, #1
   1a378:	mov	r0, #0
   1a37c:	bl	11168 <dcgettext@plt>
   1a380:	ldr	r3, [r5, #12]
   1a384:	str	r3, [sp, #8]
   1a388:	ldr	r3, [r5, #8]
   1a38c:	str	r3, [sp, #4]
   1a390:	ldr	r3, [r5, #4]
   1a394:	str	r3, [sp]
   1a398:	ldr	r3, [r5]
   1a39c:	mov	r2, r0
   1a3a0:	mov	r1, #1
   1a3a4:	mov	r0, r4
   1a3a8:	bl	1130c <__fprintf_chk@plt>
   1a3ac:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a3b0:	mov	r2, #5
   1a3b4:	movw	r1, #58400	; 0xe420
   1a3b8:	movt	r1, #1
   1a3bc:	mov	r0, #0
   1a3c0:	bl	11168 <dcgettext@plt>
   1a3c4:	ldr	r3, [r5, #16]
   1a3c8:	str	r3, [sp, #12]
   1a3cc:	ldr	r3, [r5, #12]
   1a3d0:	str	r3, [sp, #8]
   1a3d4:	ldr	r3, [r5, #8]
   1a3d8:	str	r3, [sp, #4]
   1a3dc:	ldr	r3, [r5, #4]
   1a3e0:	str	r3, [sp]
   1a3e4:	ldr	r3, [r5]
   1a3e8:	mov	r2, r0
   1a3ec:	mov	r1, #1
   1a3f0:	mov	r0, r4
   1a3f4:	bl	1130c <__fprintf_chk@plt>
   1a3f8:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a3fc:	mov	r2, #5
   1a400:	movw	r1, #58436	; 0xe444
   1a404:	movt	r1, #1
   1a408:	mov	r0, #0
   1a40c:	bl	11168 <dcgettext@plt>
   1a410:	ldr	r3, [r5, #20]
   1a414:	str	r3, [sp, #16]
   1a418:	ldr	r3, [r5, #16]
   1a41c:	str	r3, [sp, #12]
   1a420:	ldr	r3, [r5, #12]
   1a424:	str	r3, [sp, #8]
   1a428:	ldr	r3, [r5, #8]
   1a42c:	str	r3, [sp, #4]
   1a430:	ldr	r3, [r5, #4]
   1a434:	str	r3, [sp]
   1a438:	ldr	r3, [r5]
   1a43c:	mov	r2, r0
   1a440:	mov	r1, #1
   1a444:	mov	r0, r4
   1a448:	bl	1130c <__fprintf_chk@plt>
   1a44c:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a450:	mov	r2, #5
   1a454:	movw	r1, #58476	; 0xe46c
   1a458:	movt	r1, #1
   1a45c:	mov	r0, #0
   1a460:	bl	11168 <dcgettext@plt>
   1a464:	ldr	r3, [r5, #24]
   1a468:	str	r3, [sp, #20]
   1a46c:	ldr	r3, [r5, #20]
   1a470:	str	r3, [sp, #16]
   1a474:	ldr	r3, [r5, #16]
   1a478:	str	r3, [sp, #12]
   1a47c:	ldr	r3, [r5, #12]
   1a480:	str	r3, [sp, #8]
   1a484:	ldr	r3, [r5, #8]
   1a488:	str	r3, [sp, #4]
   1a48c:	ldr	r3, [r5, #4]
   1a490:	str	r3, [sp]
   1a494:	ldr	r3, [r5]
   1a498:	mov	r2, r0
   1a49c:	mov	r1, #1
   1a4a0:	mov	r0, r4
   1a4a4:	bl	1130c <__fprintf_chk@plt>
   1a4a8:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a4ac:	mov	r2, #5
   1a4b0:	movw	r1, #58520	; 0xe498
   1a4b4:	movt	r1, #1
   1a4b8:	mov	r0, #0
   1a4bc:	bl	11168 <dcgettext@plt>
   1a4c0:	ldr	r3, [r5, #28]
   1a4c4:	str	r3, [sp, #24]
   1a4c8:	ldr	r3, [r5, #24]
   1a4cc:	str	r3, [sp, #20]
   1a4d0:	ldr	r3, [r5, #20]
   1a4d4:	str	r3, [sp, #16]
   1a4d8:	ldr	r3, [r5, #16]
   1a4dc:	str	r3, [sp, #12]
   1a4e0:	ldr	r3, [r5, #12]
   1a4e4:	str	r3, [sp, #8]
   1a4e8:	ldr	r3, [r5, #8]
   1a4ec:	str	r3, [sp, #4]
   1a4f0:	ldr	r3, [r5, #4]
   1a4f4:	str	r3, [sp]
   1a4f8:	ldr	r3, [r5]
   1a4fc:	mov	r2, r0
   1a500:	mov	r1, #1
   1a504:	mov	r0, r4
   1a508:	bl	1130c <__fprintf_chk@plt>
   1a50c:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a510:	mov	r2, #5
   1a514:	movw	r1, #58568	; 0xe4c8
   1a518:	movt	r1, #1
   1a51c:	mov	r0, #0
   1a520:	bl	11168 <dcgettext@plt>
   1a524:	ldr	r3, [r5, #32]
   1a528:	str	r3, [sp, #28]
   1a52c:	ldr	r3, [r5, #28]
   1a530:	str	r3, [sp, #24]
   1a534:	ldr	r3, [r5, #24]
   1a538:	str	r3, [sp, #20]
   1a53c:	ldr	r3, [r5, #20]
   1a540:	str	r3, [sp, #16]
   1a544:	ldr	r3, [r5, #16]
   1a548:	str	r3, [sp, #12]
   1a54c:	ldr	r3, [r5, #12]
   1a550:	str	r3, [sp, #8]
   1a554:	ldr	r3, [r5, #8]
   1a558:	str	r3, [sp, #4]
   1a55c:	ldr	r3, [r5, #4]
   1a560:	str	r3, [sp]
   1a564:	ldr	r3, [r5]
   1a568:	mov	r2, r0
   1a56c:	mov	r1, #1
   1a570:	mov	r0, r4
   1a574:	bl	1130c <__fprintf_chk@plt>
   1a578:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a57c:	mov	r2, #5
   1a580:	movw	r1, #58620	; 0xe4fc
   1a584:	movt	r1, #1
   1a588:	mov	r0, #0
   1a58c:	bl	11168 <dcgettext@plt>
   1a590:	ldr	r3, [r5, #32]
   1a594:	str	r3, [sp, #28]
   1a598:	ldr	r3, [r5, #28]
   1a59c:	str	r3, [sp, #24]
   1a5a0:	ldr	r3, [r5, #24]
   1a5a4:	str	r3, [sp, #20]
   1a5a8:	ldr	r3, [r5, #20]
   1a5ac:	str	r3, [sp, #16]
   1a5b0:	ldr	r3, [r5, #16]
   1a5b4:	str	r3, [sp, #12]
   1a5b8:	ldr	r3, [r5, #12]
   1a5bc:	str	r3, [sp, #8]
   1a5c0:	ldr	r3, [r5, #8]
   1a5c4:	str	r3, [sp, #4]
   1a5c8:	ldr	r3, [r5, #4]
   1a5cc:	str	r3, [sp]
   1a5d0:	ldr	r3, [r5]
   1a5d4:	mov	r2, r0
   1a5d8:	mov	r1, #1
   1a5dc:	mov	r0, r4
   1a5e0:	bl	1130c <__fprintf_chk@plt>
   1a5e4:	b	1a2e8 <__assert_fail@plt+0x8f04>
   1a5e8:	strd	r4, [sp, #-12]!
   1a5ec:	str	lr, [sp, #8]
   1a5f0:	sub	sp, sp, #12
   1a5f4:	ldr	r5, [sp, #24]
   1a5f8:	ldr	ip, [r5]
   1a5fc:	cmp	ip, #0
   1a600:	beq	1a638 <__assert_fail@plt+0x9254>
   1a604:	mov	lr, r5
   1a608:	mov	ip, #0
   1a60c:	add	ip, ip, #1
   1a610:	ldr	r4, [lr, #4]!
   1a614:	cmp	r4, #0
   1a618:	bne	1a60c <__assert_fail@plt+0x9228>
   1a61c:	str	ip, [sp, #4]
   1a620:	str	r5, [sp]
   1a624:	bl	1a1b8 <__assert_fail@plt+0x8dd4>
   1a628:	add	sp, sp, #12
   1a62c:	ldrd	r4, [sp]
   1a630:	add	sp, sp, #8
   1a634:	pop	{pc}		; (ldr pc, [sp], #4)
   1a638:	mov	ip, #0
   1a63c:	b	1a61c <__assert_fail@plt+0x9238>
   1a640:	strd	r4, [sp, #-12]!
   1a644:	str	lr, [sp, #8]
   1a648:	sub	sp, sp, #52	; 0x34
   1a64c:	ldr	r5, [sp, #64]	; 0x40
   1a650:	add	r4, sp, #8
   1a654:	mov	ip, #0
   1a658:	ldr	lr, [r5], #4
   1a65c:	str	lr, [r4], #4
   1a660:	cmp	lr, #0
   1a664:	beq	1a674 <__assert_fail@plt+0x9290>
   1a668:	add	ip, ip, #1
   1a66c:	cmp	ip, #10
   1a670:	bne	1a658 <__assert_fail@plt+0x9274>
   1a674:	str	ip, [sp, #4]
   1a678:	add	ip, sp, #8
   1a67c:	str	ip, [sp]
   1a680:	bl	1a1b8 <__assert_fail@plt+0x8dd4>
   1a684:	add	sp, sp, #52	; 0x34
   1a688:	ldrd	r4, [sp]
   1a68c:	add	sp, sp, #8
   1a690:	pop	{pc}		; (ldr pc, [sp], #4)
   1a694:	push	{r3}		; (str r3, [sp, #-4]!)
   1a698:	push	{lr}		; (str lr, [sp, #-4]!)
   1a69c:	sub	sp, sp, #16
   1a6a0:	add	r3, sp, #24
   1a6a4:	str	r3, [sp, #12]
   1a6a8:	str	r3, [sp]
   1a6ac:	ldr	r3, [sp, #20]
   1a6b0:	bl	1a640 <__assert_fail@plt+0x925c>
   1a6b4:	add	sp, sp, #16
   1a6b8:	pop	{lr}		; (ldr lr, [sp], #4)
   1a6bc:	add	sp, sp, #4
   1a6c0:	bx	lr
   1a6c4:	str	r4, [sp, #-8]!
   1a6c8:	str	lr, [sp, #4]
   1a6cc:	movw	r3, #61924	; 0xf1e4
   1a6d0:	movt	r3, #2
   1a6d4:	ldr	r1, [r3]
   1a6d8:	mov	r0, #10
   1a6dc:	bl	1115c <fputc_unlocked@plt>
   1a6e0:	mov	r2, #5
   1a6e4:	movw	r1, #58680	; 0xe538
   1a6e8:	movt	r1, #1
   1a6ec:	mov	r0, #0
   1a6f0:	bl	11168 <dcgettext@plt>
   1a6f4:	movw	r2, #58700	; 0xe54c
   1a6f8:	movt	r2, #1
   1a6fc:	mov	r1, r0
   1a700:	mov	r0, #1
   1a704:	bl	112f4 <__printf_chk@plt>
   1a708:	mov	r2, #5
   1a70c:	movw	r1, #58724	; 0xe564
   1a710:	movt	r1, #1
   1a714:	mov	r0, #0
   1a718:	bl	11168 <dcgettext@plt>
   1a71c:	movw	r3, #56472	; 0xdc98
   1a720:	movt	r3, #1
   1a724:	movw	r2, #56512	; 0xdcc0
   1a728:	movt	r2, #1
   1a72c:	mov	r1, r0
   1a730:	mov	r0, #1
   1a734:	bl	112f4 <__printf_chk@plt>
   1a738:	mov	r2, #5
   1a73c:	movw	r1, #58744	; 0xe578
   1a740:	movt	r1, #1
   1a744:	mov	r0, #0
   1a748:	bl	11168 <dcgettext@plt>
   1a74c:	movw	r2, #58784	; 0xe5a0
   1a750:	movt	r2, #1
   1a754:	mov	r1, r0
   1a758:	mov	r0, #1
   1a75c:	bl	112f4 <__printf_chk@plt>
   1a760:	ldr	r4, [sp]
   1a764:	add	sp, sp, #4
   1a768:	pop	{pc}		; (ldr pc, [sp], #4)
   1a76c:	str	r4, [sp, #-8]!
   1a770:	str	lr, [sp, #4]
   1a774:	bl	1c28c <__assert_fail@plt+0xaea8>
   1a778:	cmp	r0, #0
   1a77c:	beq	1a78c <__assert_fail@plt+0x93a8>
   1a780:	ldr	r4, [sp]
   1a784:	add	sp, sp, #4
   1a788:	pop	{pc}		; (ldr pc, [sp], #4)
   1a78c:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a790:	str	r4, [sp, #-8]!
   1a794:	str	lr, [sp, #4]
   1a798:	bl	1c28c <__assert_fail@plt+0xaea8>
   1a79c:	cmp	r0, #0
   1a7a0:	beq	1a7b0 <__assert_fail@plt+0x93cc>
   1a7a4:	ldr	r4, [sp]
   1a7a8:	add	sp, sp, #4
   1a7ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7b0:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a7b4:	str	r4, [sp, #-8]!
   1a7b8:	str	lr, [sp, #4]
   1a7bc:	bl	1a76c <__assert_fail@plt+0x9388>
   1a7c0:	ldr	r4, [sp]
   1a7c4:	add	sp, sp, #4
   1a7c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7cc:	strd	r4, [sp, #-16]!
   1a7d0:	str	r6, [sp, #8]
   1a7d4:	str	lr, [sp, #12]
   1a7d8:	mov	r5, r0
   1a7dc:	mov	r4, r1
   1a7e0:	bl	1c2c8 <__assert_fail@plt+0xaee4>
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1a7fc <__assert_fail@plt+0x9418>
   1a7ec:	ldrd	r4, [sp]
   1a7f0:	ldr	r6, [sp, #8]
   1a7f4:	add	sp, sp, #12
   1a7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7fc:	adds	r4, r4, #0
   1a800:	movne	r4, #1
   1a804:	cmp	r5, #0
   1a808:	moveq	r4, #1
   1a80c:	cmp	r4, #0
   1a810:	beq	1a7ec <__assert_fail@plt+0x9408>
   1a814:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a818:	str	r4, [sp, #-8]!
   1a81c:	str	lr, [sp, #4]
   1a820:	cmp	r1, #0
   1a824:	orreq	r1, r1, #1
   1a828:	bl	1c2c8 <__assert_fail@plt+0xaee4>
   1a82c:	cmp	r0, #0
   1a830:	beq	1a840 <__assert_fail@plt+0x945c>
   1a834:	ldr	r4, [sp]
   1a838:	add	sp, sp, #4
   1a83c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a840:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a844:	strd	r4, [sp, #-16]!
   1a848:	str	r6, [sp, #8]
   1a84c:	str	lr, [sp, #12]
   1a850:	mov	r4, r0
   1a854:	mov	r6, r1
   1a858:	mov	r5, r2
   1a85c:	bl	1c6d0 <__assert_fail@plt+0xb2ec>
   1a860:	cmp	r0, #0
   1a864:	beq	1a878 <__assert_fail@plt+0x9494>
   1a868:	ldrd	r4, [sp]
   1a86c:	ldr	r6, [sp, #8]
   1a870:	add	sp, sp, #12
   1a874:	pop	{pc}		; (ldr pc, [sp], #4)
   1a878:	cmp	r4, #0
   1a87c:	beq	1a88c <__assert_fail@plt+0x94a8>
   1a880:	cmp	r6, #0
   1a884:	cmpne	r5, #0
   1a888:	beq	1a868 <__assert_fail@plt+0x9484>
   1a88c:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a890:	str	r4, [sp, #-8]!
   1a894:	str	lr, [sp, #4]
   1a898:	bl	1a844 <__assert_fail@plt+0x9460>
   1a89c:	ldr	r4, [sp]
   1a8a0:	add	sp, sp, #4
   1a8a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8a8:	str	r4, [sp, #-8]!
   1a8ac:	str	lr, [sp, #4]
   1a8b0:	mov	ip, r1
   1a8b4:	mov	r3, r2
   1a8b8:	cmp	r2, #0
   1a8bc:	cmpne	r1, #0
   1a8c0:	moveq	r3, #1
   1a8c4:	moveq	ip, r3
   1a8c8:	mov	r2, r3
   1a8cc:	mov	r1, ip
   1a8d0:	bl	1c6d0 <__assert_fail@plt+0xb2ec>
   1a8d4:	cmp	r0, #0
   1a8d8:	beq	1a8e8 <__assert_fail@plt+0x9504>
   1a8dc:	ldr	r4, [sp]
   1a8e0:	add	sp, sp, #4
   1a8e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8e8:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a8ec:	str	r4, [sp, #-8]!
   1a8f0:	str	lr, [sp, #4]
   1a8f4:	mov	r2, r1
   1a8f8:	mov	r1, r0
   1a8fc:	mov	r0, #0
   1a900:	bl	1a844 <__assert_fail@plt+0x9460>
   1a904:	ldr	r4, [sp]
   1a908:	add	sp, sp, #4
   1a90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a910:	str	r4, [sp, #-8]!
   1a914:	str	lr, [sp, #4]
   1a918:	mov	r2, r1
   1a91c:	mov	r1, r0
   1a920:	mov	r0, #0
   1a924:	bl	1a8a8 <__assert_fail@plt+0x94c4>
   1a928:	ldr	r4, [sp]
   1a92c:	add	sp, sp, #4
   1a930:	pop	{pc}		; (ldr pc, [sp], #4)
   1a934:	strd	r4, [sp, #-16]!
   1a938:	str	r6, [sp, #8]
   1a93c:	str	lr, [sp, #12]
   1a940:	mov	r5, r1
   1a944:	ldr	r4, [r1]
   1a948:	cmp	r0, #0
   1a94c:	beq	1a97c <__assert_fail@plt+0x9598>
   1a950:	lsr	r3, r4, #1
   1a954:	add	r3, r3, #1
   1a958:	adds	r4, r4, r3
   1a95c:	bcs	1a998 <__assert_fail@plt+0x95b4>
   1a960:	mov	r1, r4
   1a964:	bl	1a844 <__assert_fail@plt+0x9460>
   1a968:	str	r4, [r5]
   1a96c:	ldrd	r4, [sp]
   1a970:	ldr	r6, [sp, #8]
   1a974:	add	sp, sp, #12
   1a978:	pop	{pc}		; (ldr pc, [sp], #4)
   1a97c:	cmp	r4, #0
   1a980:	bne	1a960 <__assert_fail@plt+0x957c>
   1a984:	mov	r4, #64	; 0x40
   1a988:	udiv	r4, r4, r2
   1a98c:	cmp	r2, #64	; 0x40
   1a990:	addhi	r4, r4, #1
   1a994:	b	1a960 <__assert_fail@plt+0x957c>
   1a998:	bl	1ac00 <__assert_fail@plt+0x981c>
   1a99c:	str	r4, [sp, #-8]!
   1a9a0:	str	lr, [sp, #4]
   1a9a4:	mov	r2, #1
   1a9a8:	bl	1a934 <__assert_fail@plt+0x9550>
   1a9ac:	ldr	r4, [sp]
   1a9b0:	add	sp, sp, #4
   1a9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a9bc:	strd	r6, [sp, #8]
   1a9c0:	str	r8, [sp, #16]
   1a9c4:	str	lr, [sp, #20]
   1a9c8:	mov	r5, r1
   1a9cc:	ldr	lr, [sp, #24]
   1a9d0:	ldr	ip, [r1]
   1a9d4:	asr	r4, ip, #1
   1a9d8:	adds	r4, ip, r4
   1a9dc:	movvs	r1, #1
   1a9e0:	movvc	r1, #0
   1a9e4:	cmp	r1, #0
   1a9e8:	mvnne	r4, #-2147483648	; 0x80000000
   1a9ec:	mvn	r8, r3
   1a9f0:	lsr	r8, r8, #31
   1a9f4:	cmp	r3, r4
   1a9f8:	movge	r1, #0
   1a9fc:	andlt	r1, r8, #1
   1aa00:	cmp	r1, #0
   1aa04:	movne	r4, r3
   1aa08:	smull	r6, r7, r4, lr
   1aa0c:	asr	r1, r6, #31
   1aa10:	cmp	r1, r7
   1aa14:	bne	1aa2c <__assert_fail@plt+0x9648>
   1aa18:	mov	r1, r6
   1aa1c:	cmp	r6, #63	; 0x3f
   1aa20:	movle	r1, #64	; 0x40
   1aa24:	ble	1aa30 <__assert_fail@plt+0x964c>
   1aa28:	b	1aa3c <__assert_fail@plt+0x9658>
   1aa2c:	mvn	r1, #-2147483648	; 0x80000000
   1aa30:	sdiv	r4, r1, lr
   1aa34:	mls	r6, lr, r4, r1
   1aa38:	sub	r1, r1, r6
   1aa3c:	cmp	r0, #0
   1aa40:	moveq	r6, #0
   1aa44:	streq	r6, [r5]
   1aa48:	sub	r6, r4, ip
   1aa4c:	cmp	r6, r2
   1aa50:	bge	1aa88 <__assert_fail@plt+0x96a4>
   1aa54:	adds	r2, ip, r2
   1aa58:	mov	r4, r2
   1aa5c:	bvs	1aaa4 <__assert_fail@plt+0x96c0>
   1aa60:	cmp	r2, r3
   1aa64:	movle	r3, #0
   1aa68:	andgt	r3, r8, #1
   1aa6c:	cmp	r3, #0
   1aa70:	bne	1aaa4 <__assert_fail@plt+0x96c0>
   1aa74:	smull	r2, r3, r2, lr
   1aa78:	asr	ip, r2, #31
   1aa7c:	mov	r1, r2
   1aa80:	cmp	ip, r3
   1aa84:	bne	1aaa4 <__assert_fail@plt+0x96c0>
   1aa88:	bl	1a7cc <__assert_fail@plt+0x93e8>
   1aa8c:	str	r4, [r5]
   1aa90:	ldrd	r4, [sp]
   1aa94:	ldrd	r6, [sp, #8]
   1aa98:	ldr	r8, [sp, #16]
   1aa9c:	add	sp, sp, #20
   1aaa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa4:	bl	1ac00 <__assert_fail@plt+0x981c>
   1aaa8:	str	r4, [sp, #-8]!
   1aaac:	str	lr, [sp, #4]
   1aab0:	bl	1c218 <__assert_fail@plt+0xae34>
   1aab4:	cmp	r0, #0
   1aab8:	beq	1aac8 <__assert_fail@plt+0x96e4>
   1aabc:	ldr	r4, [sp]
   1aac0:	add	sp, sp, #4
   1aac4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aac8:	bl	1ac00 <__assert_fail@plt+0x981c>
   1aacc:	str	r4, [sp, #-8]!
   1aad0:	str	lr, [sp, #4]
   1aad4:	mov	r1, #1
   1aad8:	bl	1aaa8 <__assert_fail@plt+0x96c4>
   1aadc:	ldr	r4, [sp]
   1aae0:	add	sp, sp, #4
   1aae4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aae8:	str	r4, [sp, #-8]!
   1aaec:	str	lr, [sp, #4]
   1aaf0:	bl	1c218 <__assert_fail@plt+0xae34>
   1aaf4:	cmp	r0, #0
   1aaf8:	beq	1ab08 <__assert_fail@plt+0x9724>
   1aafc:	ldr	r4, [sp]
   1ab00:	add	sp, sp, #4
   1ab04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab08:	bl	1ac00 <__assert_fail@plt+0x981c>
   1ab0c:	str	r4, [sp, #-8]!
   1ab10:	str	lr, [sp, #4]
   1ab14:	mov	r1, #1
   1ab18:	bl	1aae8 <__assert_fail@plt+0x9704>
   1ab1c:	ldr	r4, [sp]
   1ab20:	add	sp, sp, #4
   1ab24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab28:	strd	r4, [sp, #-16]!
   1ab2c:	str	r6, [sp, #8]
   1ab30:	str	lr, [sp, #12]
   1ab34:	mov	r5, r0
   1ab38:	mov	r4, r1
   1ab3c:	mov	r0, r1
   1ab40:	bl	1a76c <__assert_fail@plt+0x9388>
   1ab44:	mov	r2, r4
   1ab48:	mov	r1, r5
   1ab4c:	bl	1112c <memcpy@plt>
   1ab50:	ldrd	r4, [sp]
   1ab54:	ldr	r6, [sp, #8]
   1ab58:	add	sp, sp, #12
   1ab5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab60:	strd	r4, [sp, #-16]!
   1ab64:	str	r6, [sp, #8]
   1ab68:	str	lr, [sp, #12]
   1ab6c:	mov	r5, r0
   1ab70:	mov	r4, r1
   1ab74:	mov	r0, r1
   1ab78:	bl	1a790 <__assert_fail@plt+0x93ac>
   1ab7c:	mov	r2, r4
   1ab80:	mov	r1, r5
   1ab84:	bl	1112c <memcpy@plt>
   1ab88:	ldrd	r4, [sp]
   1ab8c:	ldr	r6, [sp, #8]
   1ab90:	add	sp, sp, #12
   1ab94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab98:	strd	r4, [sp, #-16]!
   1ab9c:	str	r6, [sp, #8]
   1aba0:	str	lr, [sp, #12]
   1aba4:	mov	r5, r0
   1aba8:	mov	r4, r1
   1abac:	add	r0, r1, #1
   1abb0:	bl	1a790 <__assert_fail@plt+0x93ac>
   1abb4:	mov	r2, #0
   1abb8:	strb	r2, [r0, r4]
   1abbc:	mov	r2, r4
   1abc0:	mov	r1, r5
   1abc4:	bl	1112c <memcpy@plt>
   1abc8:	ldrd	r4, [sp]
   1abcc:	ldr	r6, [sp, #8]
   1abd0:	add	sp, sp, #12
   1abd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1abd8:	str	r4, [sp, #-8]!
   1abdc:	str	lr, [sp, #4]
   1abe0:	mov	r4, r0
   1abe4:	bl	11294 <strlen@plt>
   1abe8:	add	r1, r0, #1
   1abec:	mov	r0, r4
   1abf0:	bl	1ab28 <__assert_fail@plt+0x9744>
   1abf4:	ldr	r4, [sp]
   1abf8:	add	sp, sp, #4
   1abfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac00:	str	r4, [sp, #-8]!
   1ac04:	str	lr, [sp, #4]
   1ac08:	movw	r3, #61828	; 0xf184
   1ac0c:	movt	r3, #2
   1ac10:	ldr	r4, [r3]
   1ac14:	mov	r2, #5
   1ac18:	movw	r1, #58864	; 0xe5f0
   1ac1c:	movt	r1, #1
   1ac20:	mov	r0, #0
   1ac24:	bl	11168 <dcgettext@plt>
   1ac28:	mov	r3, r0
   1ac2c:	movw	r2, #57728	; 0xe180
   1ac30:	movt	r2, #1
   1ac34:	mov	r1, #0
   1ac38:	mov	r0, r4
   1ac3c:	bl	11204 <error@plt>
   1ac40:	bl	113cc <abort@plt>
   1ac44:	strd	r4, [sp, #-16]!
   1ac48:	str	r6, [sp, #8]
   1ac4c:	str	lr, [sp, #12]
   1ac50:	sub	sp, sp, #16
   1ac54:	mov	r6, r0
   1ac58:	mov	r4, r2
   1ac5c:	mov	r5, r3
   1ac60:	ldr	r3, [sp, #40]	; 0x28
   1ac64:	str	r3, [sp]
   1ac68:	add	r3, sp, #8
   1ac6c:	mov	r2, r1
   1ac70:	mov	r1, #0
   1ac74:	bl	1af20 <__assert_fail@plt+0x9b3c>
   1ac78:	cmp	r0, #0
   1ac7c:	bne	1ad10 <__assert_fail@plt+0x992c>
   1ac80:	ldrd	r0, [sp, #8]
   1ac84:	ldrd	r2, [sp, #32]
   1ac88:	cmp	r2, r0
   1ac8c:	sbcs	r3, r3, r1
   1ac90:	movlt	r3, #1
   1ac94:	movge	r3, #0
   1ac98:	cmp	r0, r4
   1ac9c:	sbcs	r2, r1, r5
   1aca0:	orrlt	r3, r3, #1
   1aca4:	cmp	r3, #0
   1aca8:	bne	1acc0 <__assert_fail@plt+0x98dc>
   1acac:	add	sp, sp, #16
   1acb0:	ldrd	r4, [sp]
   1acb4:	ldr	r6, [sp, #8]
   1acb8:	add	sp, sp, #12
   1acbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc0:	cmp	r0, #1073741824	; 0x40000000
   1acc4:	sbcs	r3, r1, #0
   1acc8:	blt	1acdc <__assert_fail@plt+0x98f8>
   1accc:	bl	112c4 <__errno_location@plt>
   1acd0:	mov	r3, #75	; 0x4b
   1acd4:	str	r3, [r0]
   1acd8:	b	1ad20 <__assert_fail@plt+0x993c>
   1acdc:	mov	r2, #-1073741824	; 0xc0000000
   1ace0:	mvn	r3, #0
   1ace4:	cmp	r0, r2
   1ace8:	sbcs	r3, r1, r3
   1acec:	bge	1ad00 <__assert_fail@plt+0x991c>
   1acf0:	bl	112c4 <__errno_location@plt>
   1acf4:	mov	r3, #75	; 0x4b
   1acf8:	str	r3, [r0]
   1acfc:	b	1ad20 <__assert_fail@plt+0x993c>
   1ad00:	bl	112c4 <__errno_location@plt>
   1ad04:	mov	r3, #34	; 0x22
   1ad08:	str	r3, [r0]
   1ad0c:	b	1ad20 <__assert_fail@plt+0x993c>
   1ad10:	cmp	r0, #1
   1ad14:	beq	1ad64 <__assert_fail@plt+0x9980>
   1ad18:	cmp	r0, #3
   1ad1c:	beq	1ad74 <__assert_fail@plt+0x9990>
   1ad20:	ldr	r3, [sp, #48]	; 0x30
   1ad24:	cmp	r3, #0
   1ad28:	moveq	r3, #1
   1ad2c:	str	r3, [sp, #48]	; 0x30
   1ad30:	bl	112c4 <__errno_location@plt>
   1ad34:	ldr	r4, [r0]
   1ad38:	cmp	r4, #22
   1ad3c:	moveq	r4, #0
   1ad40:	mov	r0, r6
   1ad44:	bl	19b54 <__assert_fail@plt+0x8770>
   1ad48:	str	r0, [sp]
   1ad4c:	ldr	r3, [sp, #44]	; 0x2c
   1ad50:	movw	r2, #57724	; 0xe17c
   1ad54:	movt	r2, #1
   1ad58:	mov	r1, r4
   1ad5c:	ldr	r0, [sp, #48]	; 0x30
   1ad60:	bl	11204 <error@plt>
   1ad64:	bl	112c4 <__errno_location@plt>
   1ad68:	mov	r3, #75	; 0x4b
   1ad6c:	str	r3, [r0]
   1ad70:	b	1ad20 <__assert_fail@plt+0x993c>
   1ad74:	bl	112c4 <__errno_location@plt>
   1ad78:	mov	r3, #0
   1ad7c:	str	r3, [r0]
   1ad80:	b	1ad20 <__assert_fail@plt+0x993c>
   1ad84:	strd	r4, [sp, #-12]!
   1ad88:	str	lr, [sp, #8]
   1ad8c:	sub	sp, sp, #28
   1ad90:	ldr	r1, [sp, #56]	; 0x38
   1ad94:	str	r1, [sp, #16]
   1ad98:	ldr	r1, [sp, #52]	; 0x34
   1ad9c:	str	r1, [sp, #12]
   1ada0:	ldr	r1, [sp, #48]	; 0x30
   1ada4:	str	r1, [sp, #8]
   1ada8:	ldrd	r4, [sp, #40]	; 0x28
   1adac:	strd	r4, [sp]
   1adb0:	mov	r1, #10
   1adb4:	bl	1ac44 <__assert_fail@plt+0x9860>
   1adb8:	add	sp, sp, #28
   1adbc:	ldrd	r4, [sp]
   1adc0:	add	sp, sp, #8
   1adc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1adcc:	strd	r6, [sp, #8]
   1add0:	strd	r8, [sp, #16]
   1add4:	strd	sl, [sp, #24]
   1add8:	str	lr, [sp, #32]
   1addc:	sub	sp, sp, #20
   1ade0:	cmp	r2, #0
   1ade4:	beq	1aefc <__assert_fail@plt+0x9b18>
   1ade8:	sub	ip, r2, #1
   1adec:	mov	lr, #0
   1adf0:	mov	r2, r1
   1adf4:	asr	r3, r1, #31
   1adf8:	strd	r2, [sp, #8]
   1adfc:	mov	r8, lr
   1ae00:	b	1aea4 <__assert_fail@plt+0x9ac0>
   1ae04:	umull	r4, r5, r2, r1
   1ae08:	umull	r6, r7, r1, r3
   1ae0c:	strd	r6, [sp]
   1ae10:	cmp	r3, #0
   1ae14:	bge	1ae30 <__assert_fail@plt+0x9a4c>
   1ae18:	mov	sl, #0
   1ae1c:	subs	r6, r6, sl
   1ae20:	str	r6, [sp]
   1ae24:	ldr	r6, [sp, #4]
   1ae28:	sbc	r6, r6, r1
   1ae2c:	str	r6, [sp, #4]
   1ae30:	cmp	r1, #0
   1ae34:	bge	1ae50 <__assert_fail@plt+0x9a6c>
   1ae38:	ldr	r6, [sp]
   1ae3c:	subs	r6, r6, r2
   1ae40:	str	r6, [sp]
   1ae44:	ldr	r6, [sp, #4]
   1ae48:	sbc	r6, r6, r3
   1ae4c:	str	r6, [sp, #4]
   1ae50:	mov	sl, #0
   1ae54:	ldr	r6, [sp]
   1ae58:	adds	r6, r6, r5
   1ae5c:	ldr	r7, [sp, #4]
   1ae60:	adc	sl, r7, sl
   1ae64:	cmp	sl, r6, asr #31
   1ae68:	bne	1ae74 <__assert_fail@plt+0x9a90>
   1ae6c:	mov	r5, r6
   1ae70:	b	1aec0 <__assert_fail@plt+0x9adc>
   1ae74:	ldr	r4, [sp, #12]
   1ae78:	mul	r5, r2, r4
   1ae7c:	mla	r6, r1, r3, r5
   1ae80:	umull	sl, fp, r2, r1
   1ae84:	add	r5, r6, fp
   1ae88:	mov	r4, sl
   1ae8c:	mov	r9, #1
   1ae90:	b	1aec0 <__assert_fail@plt+0x9adc>
   1ae94:	orr	lr, lr, r3
   1ae98:	sub	ip, ip, #1
   1ae9c:	cmn	ip, #1
   1aea0:	beq	1af00 <__assert_fail@plt+0x9b1c>
   1aea4:	ldrd	r2, [r0]
   1aea8:	mov	r9, r8
   1aeac:	cmp	r3, r2, asr #31
   1aeb0:	bne	1ae04 <__assert_fail@plt+0x9a20>
   1aeb4:	smull	r6, r7, r2, r1
   1aeb8:	mov	r4, r6
   1aebc:	mov	r5, r7
   1aec0:	cmp	r9, #0
   1aec4:	streq	r4, [r0]
   1aec8:	streq	r5, [r0, #4]
   1aecc:	moveq	r3, r8
   1aed0:	beq	1ae94 <__assert_fail@plt+0x9ab0>
   1aed4:	cmp	r2, #0
   1aed8:	sbcs	r3, r3, #0
   1aedc:	mvnge	r2, #0
   1aee0:	mvnge	r3, #-2147483648	; 0x80000000
   1aee4:	movlt	r2, #0
   1aee8:	movlt	r3, #-2147483648	; 0x80000000
   1aeec:	str	r2, [r0]
   1aef0:	str	r3, [r0, #4]
   1aef4:	mov	r3, #1
   1aef8:	b	1ae94 <__assert_fail@plt+0x9ab0>
   1aefc:	mov	lr, #0
   1af00:	mov	r0, lr
   1af04:	add	sp, sp, #20
   1af08:	ldrd	r4, [sp]
   1af0c:	ldrd	r6, [sp, #8]
   1af10:	ldrd	r8, [sp, #16]
   1af14:	ldrd	sl, [sp, #24]
   1af18:	add	sp, sp, #32
   1af1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1af20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1af24:	strd	r6, [sp, #8]
   1af28:	strd	r8, [sp, #16]
   1af2c:	strd	sl, [sp, #24]
   1af30:	str	lr, [sp, #32]
   1af34:	sub	sp, sp, #20
   1af38:	cmp	r2, #36	; 0x24
   1af3c:	bhi	1afa8 <__assert_fail@plt+0x9bc4>
   1af40:	mov	r5, r0
   1af44:	mov	r4, r1
   1af48:	mov	r6, r2
   1af4c:	mov	r8, r3
   1af50:	cmp	r1, #0
   1af54:	addeq	r4, sp, #12
   1af58:	bl	112c4 <__errno_location@plt>
   1af5c:	mov	r7, r0
   1af60:	mov	r3, #0
   1af64:	str	r3, [r0]
   1af68:	mov	r2, r6
   1af6c:	mov	r1, r4
   1af70:	mov	r0, r5
   1af74:	bl	11390 <__strtoll_internal@plt>
   1af78:	strd	r0, [sp]
   1af7c:	ldr	r6, [r4]
   1af80:	cmp	r6, r5
   1af84:	beq	1afc8 <__assert_fail@plt+0x9be4>
   1af88:	ldr	r3, [r7]
   1af8c:	cmp	r3, #0
   1af90:	beq	1b0ec <__assert_fail@plt+0x9d08>
   1af94:	cmp	r3, #34	; 0x22
   1af98:	moveq	r5, #1
   1af9c:	beq	1b0f0 <__assert_fail@plt+0x9d0c>
   1afa0:	mov	r5, #4
   1afa4:	b	1b114 <__assert_fail@plt+0x9d30>
   1afa8:	movw	r3, #58884	; 0xe604
   1afac:	movt	r3, #1
   1afb0:	mov	r2, #85	; 0x55
   1afb4:	movw	r1, #58896	; 0xe610
   1afb8:	movt	r1, #1
   1afbc:	movw	r0, #58912	; 0xe620
   1afc0:	movt	r0, #1
   1afc4:	bl	113e4 <__assert_fail@plt>
   1afc8:	ldr	r3, [sp, #56]	; 0x38
   1afcc:	cmp	r3, #0
   1afd0:	beq	1b54c <__assert_fail@plt+0xa168>
   1afd4:	ldrb	r1, [r5]
   1afd8:	cmp	r1, #0
   1afdc:	moveq	r5, #4
   1afe0:	beq	1b114 <__assert_fail@plt+0x9d30>
   1afe4:	mov	r0, r3
   1afe8:	bl	112a0 <strchr@plt>
   1afec:	cmp	r0, #0
   1aff0:	beq	1b554 <__assert_fail@plt+0xa170>
   1aff4:	mov	r2, #1
   1aff8:	mov	r3, #0
   1affc:	strd	r2, [sp]
   1b000:	ldrb	r7, [r6]
   1b004:	mov	r5, #0
   1b008:	mov	r1, r7
   1b00c:	ldr	r0, [sp, #56]	; 0x38
   1b010:	bl	112a0 <strchr@plt>
   1b014:	cmp	r0, #0
   1b018:	beq	1b134 <__assert_fail@plt+0x9d50>
   1b01c:	sub	r3, r7, #69	; 0x45
   1b020:	cmp	r3, #47	; 0x2f
   1b024:	ldrls	pc, [pc, r3, lsl #2]
   1b028:	b	1b280 <__assert_fail@plt+0x9e9c>
   1b02c:	andeq	fp, r1, r4, asr #2
   1b030:	andeq	fp, r1, r0, lsl #5
   1b034:	andeq	fp, r1, r4, asr #2
   1b038:	andeq	fp, r1, r0, lsl #5
   1b03c:	andeq	fp, r1, r0, lsl #5
   1b040:	andeq	fp, r1, r0, lsl #5
   1b044:	andeq	fp, r1, r4, asr #2
   1b048:	andeq	fp, r1, r0, lsl #5
   1b04c:	andeq	fp, r1, r4, asr #2
   1b050:	andeq	fp, r1, r0, lsl #5
   1b054:	andeq	fp, r1, r0, lsl #5
   1b058:	andeq	fp, r1, r4, asr #2
   1b05c:	andeq	fp, r1, r0, lsl #5
   1b060:	andeq	fp, r1, r0, lsl #5
   1b064:	andeq	fp, r1, r0, lsl #5
   1b068:	andeq	fp, r1, r4, asr #2
   1b06c:	andeq	fp, r1, r0, lsl #5
   1b070:	andeq	fp, r1, r0, lsl #5
   1b074:	andeq	fp, r1, r0, lsl #5
   1b078:	andeq	fp, r1, r0, lsl #5
   1b07c:	andeq	fp, r1, r4, asr #2
   1b080:	andeq	fp, r1, r4, asr #2
   1b084:	andeq	fp, r1, r0, lsl #5
   1b088:	andeq	fp, r1, r0, lsl #5
   1b08c:	andeq	fp, r1, r0, lsl #5
   1b090:	andeq	fp, r1, r0, lsl #5
   1b094:	andeq	fp, r1, r0, lsl #5
   1b098:	andeq	fp, r1, r0, lsl #5
   1b09c:	andeq	fp, r1, r0, lsl #5
   1b0a0:	andeq	fp, r1, r0, lsl #5
   1b0a4:	andeq	fp, r1, r0, lsl #5
   1b0a8:	andeq	fp, r1, r0, lsl #5
   1b0ac:	andeq	fp, r1, r0, lsl #5
   1b0b0:	andeq	fp, r1, r0, lsl #5
   1b0b4:	andeq	fp, r1, r4, asr #2
   1b0b8:	andeq	fp, r1, r0, lsl #5
   1b0bc:	andeq	fp, r1, r0, lsl #5
   1b0c0:	andeq	fp, r1, r0, lsl #5
   1b0c4:	andeq	fp, r1, r4, asr #2
   1b0c8:	andeq	fp, r1, r0, lsl #5
   1b0cc:	andeq	fp, r1, r4, asr #2
   1b0d0:	andeq	fp, r1, r0, lsl #5
   1b0d4:	andeq	fp, r1, r0, lsl #5
   1b0d8:	andeq	fp, r1, r0, lsl #5
   1b0dc:	andeq	fp, r1, r0, lsl #5
   1b0e0:	andeq	fp, r1, r0, lsl #5
   1b0e4:	andeq	fp, r1, r0, lsl #5
   1b0e8:	andeq	fp, r1, r4, asr #2
   1b0ec:	mov	r5, #0
   1b0f0:	ldr	r3, [sp, #56]	; 0x38
   1b0f4:	cmp	r3, #0
   1b0f8:	strdeq	r0, [r8]
   1b0fc:	beq	1b114 <__assert_fail@plt+0x9d30>
   1b100:	ldrb	r7, [r6]
   1b104:	cmp	r7, #0
   1b108:	bne	1b008 <__assert_fail@plt+0x9c24>
   1b10c:	ldrd	r2, [sp]
   1b110:	strd	r2, [r8]
   1b114:	mov	r0, r5
   1b118:	add	sp, sp, #20
   1b11c:	ldrd	r4, [sp]
   1b120:	ldrd	r6, [sp, #8]
   1b124:	ldrd	r8, [sp, #16]
   1b128:	ldrd	sl, [sp, #24]
   1b12c:	add	sp, sp, #32
   1b130:	pop	{pc}		; (ldr pc, [sp], #4)
   1b134:	ldrd	r2, [sp]
   1b138:	strd	r2, [r8]
   1b13c:	orr	r5, r5, #2
   1b140:	b	1b114 <__assert_fail@plt+0x9d30>
   1b144:	mov	r1, #48	; 0x30
   1b148:	ldr	r0, [sp, #56]	; 0x38
   1b14c:	bl	112a0 <strchr@plt>
   1b150:	cmp	r0, #0
   1b154:	beq	1b28c <__assert_fail@plt+0x9ea8>
   1b158:	ldrb	r3, [r6, #1]
   1b15c:	cmp	r3, #68	; 0x44
   1b160:	beq	1b298 <__assert_fail@plt+0x9eb4>
   1b164:	cmp	r3, #105	; 0x69
   1b168:	beq	1b268 <__assert_fail@plt+0x9e84>
   1b16c:	cmp	r3, #66	; 0x42
   1b170:	moveq	r6, #2
   1b174:	movne	r6, #1
   1b178:	moveq	r1, #1000	; 0x3e8
   1b17c:	movne	r1, #1024	; 0x400
   1b180:	sub	r7, r7, #66	; 0x42
   1b184:	cmp	r7, #53	; 0x35
   1b188:	ldrls	pc, [pc, r7, lsl #2]
   1b18c:	b	1b518 <__assert_fail@plt+0xa134>
   1b190:	andeq	fp, r1, r8, asr #6
   1b194:	andeq	fp, r1, r8, lsl r5
   1b198:	andeq	fp, r1, r8, lsl r5
   1b19c:	andeq	fp, r1, ip, ror #7
   1b1a0:	andeq	fp, r1, r8, lsl r5
   1b1a4:	strdeq	fp, [r1], -ip
   1b1a8:	andeq	fp, r1, r8, lsl r5
   1b1ac:	andeq	fp, r1, r8, lsl r5
   1b1b0:	andeq	fp, r1, r8, lsl r5
   1b1b4:	andeq	fp, r1, ip, lsl #8
   1b1b8:	andeq	fp, r1, r8, lsl r5
   1b1bc:	andeq	fp, r1, ip, lsl r4
   1b1c0:	andeq	fp, r1, r8, lsl r5
   1b1c4:	andeq	fp, r1, r8, lsl r5
   1b1c8:	andeq	fp, r1, ip, lsr #8
   1b1cc:	andeq	fp, r1, r8, lsl r5
   1b1d0:	andeq	fp, r1, r8, lsl r5
   1b1d4:	andeq	fp, r1, r8, lsl r5
   1b1d8:	andeq	fp, r1, ip, lsr r4
   1b1dc:	andeq	fp, r1, r8, lsl r5
   1b1e0:	andeq	fp, r1, r8, lsl r5
   1b1e4:	andeq	fp, r1, r8, lsl r5
   1b1e8:	andeq	fp, r1, r8, lsl r5
   1b1ec:	strdeq	fp, [r1], -r8
   1b1f0:	andeq	fp, r1, r8, lsl #10
   1b1f4:	andeq	fp, r1, r8, lsl r5
   1b1f8:	andeq	fp, r1, r8, lsl r5
   1b1fc:	andeq	fp, r1, r8, lsl r5
   1b200:	andeq	fp, r1, r8, lsl r5
   1b204:	andeq	fp, r1, r8, lsl r5
   1b208:	andeq	fp, r1, r8, lsl r5
   1b20c:	andeq	fp, r1, r8, lsl r5
   1b210:	andeq	fp, r1, r4, lsr #5
   1b214:	andeq	fp, r1, r8, lsr #10
   1b218:	andeq	fp, r1, r8, lsl r5
   1b21c:	andeq	fp, r1, r8, lsl r5
   1b220:	andeq	fp, r1, r8, lsl r5
   1b224:	strdeq	fp, [r1], -ip
   1b228:	andeq	fp, r1, r8, lsl r5
   1b22c:	andeq	fp, r1, r8, lsl r5
   1b230:	andeq	fp, r1, r8, lsl r5
   1b234:	andeq	fp, r1, ip, lsl #8
   1b238:	andeq	fp, r1, r8, lsl r5
   1b23c:	andeq	fp, r1, ip, lsl r4
   1b240:	andeq	fp, r1, r8, lsl r5
   1b244:	andeq	fp, r1, r8, lsl r5
   1b248:	andeq	fp, r1, r8, lsl r5
   1b24c:	andeq	fp, r1, r8, lsl r5
   1b250:	andeq	fp, r1, r8, lsl r5
   1b254:	andeq	fp, r1, r8, lsl r5
   1b258:	andeq	fp, r1, ip, lsr r4
   1b25c:	andeq	fp, r1, r8, lsl r5
   1b260:	andeq	fp, r1, r8, lsl r5
   1b264:	andeq	fp, r1, ip, asr #8
   1b268:	ldrb	r3, [r6, #2]
   1b26c:	cmp	r3, #66	; 0x42
   1b270:	movne	r6, #1
   1b274:	moveq	r6, #3
   1b278:	mov	r1, #1024	; 0x400
   1b27c:	b	1b180 <__assert_fail@plt+0x9d9c>
   1b280:	mov	r6, #1
   1b284:	mov	r1, #1024	; 0x400
   1b288:	b	1b180 <__assert_fail@plt+0x9d9c>
   1b28c:	mov	r6, #1
   1b290:	mov	r1, #1024	; 0x400
   1b294:	b	1b180 <__assert_fail@plt+0x9d9c>
   1b298:	mov	r6, #2
   1b29c:	mov	r1, #1000	; 0x3e8
   1b2a0:	b	1b180 <__assert_fail@plt+0x9d9c>
   1b2a4:	ldrd	r2, [sp]
   1b2a8:	mov	ip, #0
   1b2ac:	cmp	r3, r2, asr #31
   1b2b0:	bne	1b2f8 <__assert_fail@plt+0x9f14>
   1b2b4:	lsl	r1, r3, #9
   1b2b8:	lsl	r0, r2, #9
   1b2bc:	orr	r1, r1, r2, lsr #23
   1b2c0:	cmp	ip, #0
   1b2c4:	streq	r0, [sp]
   1b2c8:	streq	r1, [sp, #4]
   1b2cc:	moveq	r0, #0
   1b2d0:	beq	1b52c <__assert_fail@plt+0xa148>
   1b2d4:	cmp	r2, #0
   1b2d8:	sbcs	r3, r3, #0
   1b2dc:	mvnge	r2, #0
   1b2e0:	mvnge	r3, #-2147483648	; 0x80000000
   1b2e4:	movlt	r2, #0
   1b2e8:	movlt	r3, #-2147483648	; 0x80000000
   1b2ec:	strd	r2, [sp]
   1b2f0:	mov	r0, #1
   1b2f4:	b	1b52c <__assert_fail@plt+0xa148>
   1b2f8:	mov	lr, #512	; 0x200
   1b2fc:	lsr	r7, r2, #23
   1b300:	lsl	r0, r2, #9
   1b304:	umull	sl, fp, lr, r3
   1b308:	cmp	r3, #0
   1b30c:	bge	1b31c <__assert_fail@plt+0x9f38>
   1b310:	mov	r1, #0
   1b314:	subs	sl, sl, r1
   1b318:	sbc	fp, fp, lr
   1b31c:	mov	r1, #0
   1b320:	mov	lr, r1
   1b324:	adds	r1, sl, r7
   1b328:	adc	lr, fp, lr
   1b32c:	cmp	lr, r1, asr #31
   1b330:	beq	1b2c0 <__assert_fail@plt+0x9edc>
   1b334:	lsl	r1, r3, #9
   1b338:	lsl	r0, r2, #9
   1b33c:	orr	r1, r1, r2, lsr #23
   1b340:	mov	ip, #1
   1b344:	b	1b2c0 <__assert_fail@plt+0x9edc>
   1b348:	ldrd	r2, [sp]
   1b34c:	mov	ip, #0
   1b350:	cmp	r3, r2, asr #31
   1b354:	bne	1b39c <__assert_fail@plt+0x9fb8>
   1b358:	lsl	r1, r3, #10
   1b35c:	lsl	r0, r2, #10
   1b360:	orr	r1, r1, r2, lsr #22
   1b364:	cmp	ip, #0
   1b368:	streq	r0, [sp]
   1b36c:	streq	r1, [sp, #4]
   1b370:	moveq	r0, #0
   1b374:	beq	1b52c <__assert_fail@plt+0xa148>
   1b378:	cmp	r2, #0
   1b37c:	sbcs	r3, r3, #0
   1b380:	mvnge	r2, #0
   1b384:	mvnge	r3, #-2147483648	; 0x80000000
   1b388:	movlt	r2, #0
   1b38c:	movlt	r3, #-2147483648	; 0x80000000
   1b390:	strd	r2, [sp]
   1b394:	mov	r0, #1
   1b398:	b	1b52c <__assert_fail@plt+0xa148>
   1b39c:	mov	lr, #1024	; 0x400
   1b3a0:	lsr	r7, r2, #22
   1b3a4:	lsl	r0, r2, #10
   1b3a8:	umull	sl, fp, lr, r3
   1b3ac:	cmp	r3, #0
   1b3b0:	bge	1b3c0 <__assert_fail@plt+0x9fdc>
   1b3b4:	mov	r1, #0
   1b3b8:	subs	sl, sl, r1
   1b3bc:	sbc	fp, fp, lr
   1b3c0:	mov	r1, #0
   1b3c4:	mov	lr, r1
   1b3c8:	adds	r1, sl, r7
   1b3cc:	adc	lr, fp, lr
   1b3d0:	cmp	lr, r1, asr #31
   1b3d4:	beq	1b364 <__assert_fail@plt+0x9f80>
   1b3d8:	lsl	r1, r3, #10
   1b3dc:	lsl	r0, r2, #10
   1b3e0:	orr	r1, r1, r2, lsr #22
   1b3e4:	mov	ip, #1
   1b3e8:	b	1b364 <__assert_fail@plt+0x9f80>
   1b3ec:	mov	r2, #6
   1b3f0:	mov	r0, sp
   1b3f4:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b3f8:	b	1b52c <__assert_fail@plt+0xa148>
   1b3fc:	mov	r2, #3
   1b400:	mov	r0, sp
   1b404:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b408:	b	1b52c <__assert_fail@plt+0xa148>
   1b40c:	mov	r2, #1
   1b410:	mov	r0, sp
   1b414:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b418:	b	1b52c <__assert_fail@plt+0xa148>
   1b41c:	mov	r2, #2
   1b420:	mov	r0, sp
   1b424:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b428:	b	1b52c <__assert_fail@plt+0xa148>
   1b42c:	mov	r2, #5
   1b430:	mov	r0, sp
   1b434:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b438:	b	1b52c <__assert_fail@plt+0xa148>
   1b43c:	mov	r2, #4
   1b440:	mov	r0, sp
   1b444:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b448:	b	1b52c <__assert_fail@plt+0xa148>
   1b44c:	ldrd	r2, [sp]
   1b450:	mov	lr, #0
   1b454:	cmp	r3, r2, asr #31
   1b458:	bne	1b49c <__assert_fail@plt+0xa0b8>
   1b45c:	adds	r0, r2, r2
   1b460:	adc	r1, r3, r3
   1b464:	cmp	lr, #0
   1b468:	streq	r0, [sp]
   1b46c:	streq	r1, [sp, #4]
   1b470:	moveq	r0, #0
   1b474:	beq	1b52c <__assert_fail@plt+0xa148>
   1b478:	cmp	r2, #0
   1b47c:	sbcs	r3, r3, #0
   1b480:	mvnge	r2, #0
   1b484:	mvnge	r3, #-2147483648	; 0x80000000
   1b488:	movlt	r2, #0
   1b48c:	movlt	r3, #-2147483648	; 0x80000000
   1b490:	strd	r2, [sp]
   1b494:	mov	r0, #1
   1b498:	b	1b52c <__assert_fail@plt+0xa148>
   1b49c:	mov	ip, #2
   1b4a0:	mov	r1, #0
   1b4a4:	adds	r7, r2, r2
   1b4a8:	adc	sl, r1, r1
   1b4ac:	umull	r0, r1, ip, r3
   1b4b0:	cmp	r3, #0
   1b4b4:	bge	1b4c4 <__assert_fail@plt+0xa0e0>
   1b4b8:	mov	r9, #0
   1b4bc:	subs	r0, r0, r9
   1b4c0:	sbc	r1, r1, ip
   1b4c4:	mov	ip, #0
   1b4c8:	mov	r9, ip
   1b4cc:	adds	ip, r0, sl
   1b4d0:	adc	r9, r1, r9
   1b4d4:	cmp	r9, ip, asr #31
   1b4d8:	bne	1b4e8 <__assert_fail@plt+0xa104>
   1b4dc:	mov	r0, r7
   1b4e0:	mov	r1, ip
   1b4e4:	b	1b464 <__assert_fail@plt+0xa080>
   1b4e8:	adds	r0, r2, r2
   1b4ec:	adc	r1, r3, r3
   1b4f0:	mov	lr, #1
   1b4f4:	b	1b464 <__assert_fail@plt+0xa080>
   1b4f8:	mov	r2, #8
   1b4fc:	mov	r0, sp
   1b500:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b504:	b	1b52c <__assert_fail@plt+0xa148>
   1b508:	mov	r2, #7
   1b50c:	mov	r0, sp
   1b510:	bl	1adc8 <__assert_fail@plt+0x99e4>
   1b514:	b	1b52c <__assert_fail@plt+0xa148>
   1b518:	ldrd	r2, [sp]
   1b51c:	strd	r2, [r8]
   1b520:	orr	r5, r5, #2
   1b524:	b	1b114 <__assert_fail@plt+0x9d30>
   1b528:	mov	r0, #0
   1b52c:	orr	r5, r5, r0
   1b530:	ldr	r3, [r4]
   1b534:	add	r2, r3, r6
   1b538:	str	r2, [r4]
   1b53c:	ldrb	r3, [r3, r6]
   1b540:	cmp	r3, #0
   1b544:	orrne	r5, r5, #2
   1b548:	b	1b10c <__assert_fail@plt+0x9d28>
   1b54c:	mov	r5, #4
   1b550:	b	1b114 <__assert_fail@plt+0x9d30>
   1b554:	mov	r5, #4
   1b558:	b	1b114 <__assert_fail@plt+0x9d30>
   1b55c:	cmp	r2, #0
   1b560:	beq	1b5cc <__assert_fail@plt+0xa1e8>
   1b564:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b568:	strd	r6, [sp, #8]
   1b56c:	str	lr, [sp, #16]
   1b570:	mov	r4, r0
   1b574:	sub	ip, r2, #1
   1b578:	mov	r0, #0
   1b57c:	mov	r6, r0
   1b580:	mov	r7, #1
   1b584:	b	1b598 <__assert_fail@plt+0xa1b4>
   1b588:	orr	r0, r0, r3
   1b58c:	sub	ip, ip, #1
   1b590:	cmn	ip, #1
   1b594:	beq	1b5d4 <__assert_fail@plt+0xa1f0>
   1b598:	ldr	lr, [r4]
   1b59c:	smull	r2, r3, lr, r1
   1b5a0:	asr	r5, r2, #31
   1b5a4:	cmp	r5, r3
   1b5a8:	streq	r2, [r4]
   1b5ac:	moveq	r3, r6
   1b5b0:	beq	1b588 <__assert_fail@plt+0xa1a4>
   1b5b4:	cmp	lr, #0
   1b5b8:	movlt	r3, #-2147483648	; 0x80000000
   1b5bc:	mvnge	r3, #-2147483648	; 0x80000000
   1b5c0:	str	r3, [r4]
   1b5c4:	mov	r3, r7
   1b5c8:	b	1b588 <__assert_fail@plt+0xa1a4>
   1b5cc:	mov	r0, #0
   1b5d0:	bx	lr
   1b5d4:	ldrd	r4, [sp]
   1b5d8:	ldrd	r6, [sp, #8]
   1b5dc:	add	sp, sp, #16
   1b5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b5e8:	strd	r6, [sp, #8]
   1b5ec:	str	r8, [sp, #16]
   1b5f0:	strd	sl, [sp, #20]
   1b5f4:	str	lr, [sp, #28]
   1b5f8:	sub	sp, sp, #8
   1b5fc:	cmp	r2, #36	; 0x24
   1b600:	bhi	1b66c <__assert_fail@plt+0xa288>
   1b604:	mov	r5, r0
   1b608:	mov	r4, r1
   1b60c:	mov	r6, r2
   1b610:	mov	r8, r3
   1b614:	cmp	r1, #0
   1b618:	addeq	r4, sp, #4
   1b61c:	bl	112c4 <__errno_location@plt>
   1b620:	mov	r7, r0
   1b624:	mov	r3, #0
   1b628:	str	r3, [r0]
   1b62c:	mov	r2, r6
   1b630:	mov	r1, r4
   1b634:	mov	r0, r5
   1b638:	bl	110cc <strtol@plt>
   1b63c:	str	r0, [sp]
   1b640:	ldr	r6, [r4]
   1b644:	cmp	r6, r5
   1b648:	beq	1b68c <__assert_fail@plt+0xa2a8>
   1b64c:	ldr	r3, [r7]
   1b650:	cmp	r3, #0
   1b654:	beq	1b7ac <__assert_fail@plt+0xa3c8>
   1b658:	cmp	r3, #34	; 0x22
   1b65c:	moveq	r5, #1
   1b660:	beq	1b7b0 <__assert_fail@plt+0xa3cc>
   1b664:	mov	r5, #4
   1b668:	b	1b7d4 <__assert_fail@plt+0xa3f0>
   1b66c:	movw	r3, #58952	; 0xe648
   1b670:	movt	r3, #1
   1b674:	mov	r2, #85	; 0x55
   1b678:	movw	r1, #58896	; 0xe610
   1b67c:	movt	r1, #1
   1b680:	movw	r0, #58912	; 0xe620
   1b684:	movt	r0, #1
   1b688:	bl	113e4 <__assert_fail@plt>
   1b68c:	ldr	r3, [sp, #40]	; 0x28
   1b690:	cmp	r3, #0
   1b694:	beq	1bad4 <__assert_fail@plt+0xa6f0>
   1b698:	ldrb	r1, [r5]
   1b69c:	cmp	r1, #0
   1b6a0:	moveq	r5, #4
   1b6a4:	beq	1b7d4 <__assert_fail@plt+0xa3f0>
   1b6a8:	mov	r0, r3
   1b6ac:	bl	112a0 <strchr@plt>
   1b6b0:	cmp	r0, #0
   1b6b4:	beq	1badc <__assert_fail@plt+0xa6f8>
   1b6b8:	mov	r3, #1
   1b6bc:	str	r3, [sp]
   1b6c0:	ldrb	r7, [r6]
   1b6c4:	mov	r5, #0
   1b6c8:	mov	r1, r7
   1b6cc:	ldr	r0, [sp, #40]	; 0x28
   1b6d0:	bl	112a0 <strchr@plt>
   1b6d4:	cmp	r0, #0
   1b6d8:	beq	1b7f4 <__assert_fail@plt+0xa410>
   1b6dc:	sub	r3, r7, #69	; 0x45
   1b6e0:	cmp	r3, #47	; 0x2f
   1b6e4:	ldrls	pc, [pc, r3, lsl #2]
   1b6e8:	b	1b940 <__assert_fail@plt+0xa55c>
   1b6ec:	andeq	fp, r1, r4, lsl #16
   1b6f0:	andeq	fp, r1, r0, asr #18
   1b6f4:	andeq	fp, r1, r4, lsl #16
   1b6f8:	andeq	fp, r1, r0, asr #18
   1b6fc:	andeq	fp, r1, r0, asr #18
   1b700:	andeq	fp, r1, r0, asr #18
   1b704:	andeq	fp, r1, r4, lsl #16
   1b708:	andeq	fp, r1, r0, asr #18
   1b70c:	andeq	fp, r1, r4, lsl #16
   1b710:	andeq	fp, r1, r0, asr #18
   1b714:	andeq	fp, r1, r0, asr #18
   1b718:	andeq	fp, r1, r4, lsl #16
   1b71c:	andeq	fp, r1, r0, asr #18
   1b720:	andeq	fp, r1, r0, asr #18
   1b724:	andeq	fp, r1, r0, asr #18
   1b728:	andeq	fp, r1, r4, lsl #16
   1b72c:	andeq	fp, r1, r0, asr #18
   1b730:	andeq	fp, r1, r0, asr #18
   1b734:	andeq	fp, r1, r0, asr #18
   1b738:	andeq	fp, r1, r0, asr #18
   1b73c:	andeq	fp, r1, r4, lsl #16
   1b740:	andeq	fp, r1, r4, lsl #16
   1b744:	andeq	fp, r1, r0, asr #18
   1b748:	andeq	fp, r1, r0, asr #18
   1b74c:	andeq	fp, r1, r0, asr #18
   1b750:	andeq	fp, r1, r0, asr #18
   1b754:	andeq	fp, r1, r0, asr #18
   1b758:	andeq	fp, r1, r0, asr #18
   1b75c:	andeq	fp, r1, r0, asr #18
   1b760:	andeq	fp, r1, r0, asr #18
   1b764:	andeq	fp, r1, r0, asr #18
   1b768:	andeq	fp, r1, r0, asr #18
   1b76c:	andeq	fp, r1, r0, asr #18
   1b770:	andeq	fp, r1, r0, asr #18
   1b774:	andeq	fp, r1, r4, lsl #16
   1b778:	andeq	fp, r1, r0, asr #18
   1b77c:	andeq	fp, r1, r0, asr #18
   1b780:	andeq	fp, r1, r0, asr #18
   1b784:	andeq	fp, r1, r4, lsl #16
   1b788:	andeq	fp, r1, r0, asr #18
   1b78c:	andeq	fp, r1, r4, lsl #16
   1b790:	andeq	fp, r1, r0, asr #18
   1b794:	andeq	fp, r1, r0, asr #18
   1b798:	andeq	fp, r1, r0, asr #18
   1b79c:	andeq	fp, r1, r0, asr #18
   1b7a0:	andeq	fp, r1, r0, asr #18
   1b7a4:	andeq	fp, r1, r0, asr #18
   1b7a8:	andeq	fp, r1, r4, lsl #16
   1b7ac:	mov	r5, #0
   1b7b0:	ldr	r3, [sp, #40]	; 0x28
   1b7b4:	cmp	r3, #0
   1b7b8:	streq	r0, [r8]
   1b7bc:	beq	1b7d4 <__assert_fail@plt+0xa3f0>
   1b7c0:	ldrb	r7, [r6]
   1b7c4:	cmp	r7, #0
   1b7c8:	bne	1b6c8 <__assert_fail@plt+0xa2e4>
   1b7cc:	ldr	r3, [sp]
   1b7d0:	str	r3, [r8]
   1b7d4:	mov	r0, r5
   1b7d8:	add	sp, sp, #8
   1b7dc:	ldrd	r4, [sp]
   1b7e0:	ldrd	r6, [sp, #8]
   1b7e4:	ldr	r8, [sp, #16]
   1b7e8:	ldrd	sl, [sp, #20]
   1b7ec:	add	sp, sp, #28
   1b7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7f4:	ldr	r3, [sp]
   1b7f8:	str	r3, [r8]
   1b7fc:	orr	r5, r5, #2
   1b800:	b	1b7d4 <__assert_fail@plt+0xa3f0>
   1b804:	mov	r1, #48	; 0x30
   1b808:	ldr	r0, [sp, #40]	; 0x28
   1b80c:	bl	112a0 <strchr@plt>
   1b810:	cmp	r0, #0
   1b814:	beq	1b94c <__assert_fail@plt+0xa568>
   1b818:	ldrb	r3, [r6, #1]
   1b81c:	cmp	r3, #68	; 0x44
   1b820:	beq	1b958 <__assert_fail@plt+0xa574>
   1b824:	cmp	r3, #105	; 0x69
   1b828:	beq	1b928 <__assert_fail@plt+0xa544>
   1b82c:	cmp	r3, #66	; 0x42
   1b830:	moveq	r6, #2
   1b834:	movne	r6, #1
   1b838:	moveq	r1, #1000	; 0x3e8
   1b83c:	movne	r1, #1024	; 0x400
   1b840:	sub	r7, r7, #66	; 0x42
   1b844:	cmp	r7, #53	; 0x35
   1b848:	ldrls	pc, [pc, r7, lsl #2]
   1b84c:	b	1baa0 <__assert_fail@plt+0xa6bc>
   1b850:	andeq	fp, r1, r4, lsr #19
   1b854:	andeq	fp, r1, r0, lsr #21
   1b858:	andeq	fp, r1, r0, lsr #21
   1b85c:	andeq	fp, r1, r4, ror #19
   1b860:	andeq	fp, r1, r0, lsr #21
   1b864:	strdeq	fp, [r1], -r4
   1b868:	andeq	fp, r1, r0, lsr #21
   1b86c:	andeq	fp, r1, r0, lsr #21
   1b870:	andeq	fp, r1, r0, lsr #21
   1b874:	andeq	fp, r1, r4, lsl #20
   1b878:	andeq	fp, r1, r0, lsr #21
   1b87c:	andeq	fp, r1, r4, lsl sl
   1b880:	andeq	fp, r1, r0, lsr #21
   1b884:	andeq	fp, r1, r0, lsr #21
   1b888:	andeq	fp, r1, r4, lsr #20
   1b88c:	andeq	fp, r1, r0, lsr #21
   1b890:	andeq	fp, r1, r0, lsr #21
   1b894:	andeq	fp, r1, r0, lsr #21
   1b898:	andeq	fp, r1, r4, lsr sl
   1b89c:	andeq	fp, r1, r0, lsr #21
   1b8a0:	andeq	fp, r1, r0, lsr #21
   1b8a4:	andeq	fp, r1, r0, lsr #21
   1b8a8:	andeq	fp, r1, r0, lsr #21
   1b8ac:	andeq	fp, r1, r0, lsl #21
   1b8b0:	muleq	r1, r0, sl
   1b8b4:	andeq	fp, r1, r0, lsr #21
   1b8b8:	andeq	fp, r1, r0, lsr #21
   1b8bc:	andeq	fp, r1, r0, lsr #21
   1b8c0:	andeq	fp, r1, r0, lsr #21
   1b8c4:	andeq	fp, r1, r0, lsr #21
   1b8c8:	andeq	fp, r1, r0, lsr #21
   1b8cc:	andeq	fp, r1, r0, lsr #21
   1b8d0:	andeq	fp, r1, r4, ror #18
   1b8d4:			; <UNDEFINED> instruction: 0x0001bab0
   1b8d8:	andeq	fp, r1, r0, lsr #21
   1b8dc:	andeq	fp, r1, r0, lsr #21
   1b8e0:	andeq	fp, r1, r0, lsr #21
   1b8e4:	strdeq	fp, [r1], -r4
   1b8e8:	andeq	fp, r1, r0, lsr #21
   1b8ec:	andeq	fp, r1, r0, lsr #21
   1b8f0:	andeq	fp, r1, r0, lsr #21
   1b8f4:	andeq	fp, r1, r4, lsl #20
   1b8f8:	andeq	fp, r1, r0, lsr #21
   1b8fc:	andeq	fp, r1, r4, lsl sl
   1b900:	andeq	fp, r1, r0, lsr #21
   1b904:	andeq	fp, r1, r0, lsr #21
   1b908:	andeq	fp, r1, r0, lsr #21
   1b90c:	andeq	fp, r1, r0, lsr #21
   1b910:	andeq	fp, r1, r0, lsr #21
   1b914:	andeq	fp, r1, r0, lsr #21
   1b918:	andeq	fp, r1, r4, lsr sl
   1b91c:	andeq	fp, r1, r0, lsr #21
   1b920:	andeq	fp, r1, r0, lsr #21
   1b924:	andeq	fp, r1, r4, asr #20
   1b928:	ldrb	r3, [r6, #2]
   1b92c:	cmp	r3, #66	; 0x42
   1b930:	movne	r6, #1
   1b934:	moveq	r6, #3
   1b938:	mov	r1, #1024	; 0x400
   1b93c:	b	1b840 <__assert_fail@plt+0xa45c>
   1b940:	mov	r6, #1
   1b944:	mov	r1, #1024	; 0x400
   1b948:	b	1b840 <__assert_fail@plt+0xa45c>
   1b94c:	mov	r6, #1
   1b950:	mov	r1, #1024	; 0x400
   1b954:	b	1b840 <__assert_fail@plt+0xa45c>
   1b958:	mov	r6, #2
   1b95c:	mov	r1, #1000	; 0x3e8
   1b960:	b	1b840 <__assert_fail@plt+0xa45c>
   1b964:	ldr	r3, [sp]
   1b968:	asr	r1, r3, #31
   1b96c:	lsl	r2, r1, #9
   1b970:	orr	r2, r2, r3, lsr #23
   1b974:	lsl	r1, r3, #9
   1b978:	asr	r0, r1, #31
   1b97c:	cmp	r0, r2
   1b980:	streq	r1, [sp]
   1b984:	moveq	r0, #0
   1b988:	beq	1bab4 <__assert_fail@plt+0xa6d0>
   1b98c:	cmp	r3, #0
   1b990:	movlt	r3, #-2147483648	; 0x80000000
   1b994:	mvnge	r3, #-2147483648	; 0x80000000
   1b998:	str	r3, [sp]
   1b99c:	mov	r0, #1
   1b9a0:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1b9a4:	ldr	r3, [sp]
   1b9a8:	asr	r1, r3, #31
   1b9ac:	lsl	r2, r1, #10
   1b9b0:	orr	r2, r2, r3, lsr #22
   1b9b4:	lsl	r1, r3, #10
   1b9b8:	asr	r0, r1, #31
   1b9bc:	cmp	r0, r2
   1b9c0:	streq	r1, [sp]
   1b9c4:	moveq	r0, #0
   1b9c8:	beq	1bab4 <__assert_fail@plt+0xa6d0>
   1b9cc:	cmp	r3, #0
   1b9d0:	movlt	r3, #-2147483648	; 0x80000000
   1b9d4:	mvnge	r3, #-2147483648	; 0x80000000
   1b9d8:	str	r3, [sp]
   1b9dc:	mov	r0, #1
   1b9e0:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1b9e4:	mov	r2, #6
   1b9e8:	mov	r0, sp
   1b9ec:	bl	1b55c <__assert_fail@plt+0xa178>
   1b9f0:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1b9f4:	mov	r2, #3
   1b9f8:	mov	r0, sp
   1b9fc:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba00:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba04:	mov	r2, #1
   1ba08:	mov	r0, sp
   1ba0c:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba10:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba14:	mov	r2, #2
   1ba18:	mov	r0, sp
   1ba1c:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba20:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba24:	mov	r2, #5
   1ba28:	mov	r0, sp
   1ba2c:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba30:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba34:	mov	r2, #4
   1ba38:	mov	r0, sp
   1ba3c:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba40:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba44:	ldr	r1, [sp]
   1ba48:	asr	fp, r1, #31
   1ba4c:	adds	r2, r1, r1
   1ba50:	adc	r3, fp, fp
   1ba54:	asr	r0, r2, #31
   1ba58:	cmp	r0, r3
   1ba5c:	streq	r2, [sp]
   1ba60:	moveq	r0, #0
   1ba64:	beq	1bab4 <__assert_fail@plt+0xa6d0>
   1ba68:	cmp	r1, #0
   1ba6c:	movlt	r3, #-2147483648	; 0x80000000
   1ba70:	mvnge	r3, #-2147483648	; 0x80000000
   1ba74:	str	r3, [sp]
   1ba78:	mov	r0, #1
   1ba7c:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba80:	mov	r2, #8
   1ba84:	mov	r0, sp
   1ba88:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba8c:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1ba90:	mov	r2, #7
   1ba94:	mov	r0, sp
   1ba98:	bl	1b55c <__assert_fail@plt+0xa178>
   1ba9c:	b	1bab4 <__assert_fail@plt+0xa6d0>
   1baa0:	ldr	r3, [sp]
   1baa4:	str	r3, [r8]
   1baa8:	orr	r5, r5, #2
   1baac:	b	1b7d4 <__assert_fail@plt+0xa3f0>
   1bab0:	mov	r0, #0
   1bab4:	orr	r5, r5, r0
   1bab8:	ldr	r3, [r4]
   1babc:	add	r2, r3, r6
   1bac0:	str	r2, [r4]
   1bac4:	ldrb	r3, [r3, r6]
   1bac8:	cmp	r3, #0
   1bacc:	orrne	r5, r5, #2
   1bad0:	b	1b7cc <__assert_fail@plt+0xa3e8>
   1bad4:	mov	r5, #4
   1bad8:	b	1b7d4 <__assert_fail@plt+0xa3f0>
   1badc:	mov	r5, #4
   1bae0:	b	1b7d4 <__assert_fail@plt+0xa3f0>
   1bae4:	push	{lr}		; (str lr, [sp, #-4]!)
   1bae8:	sub	sp, sp, #20
   1baec:	movw	ip, #61828	; 0xf184
   1baf0:	movt	ip, #2
   1baf4:	ldr	r5, [ip]
   1baf8:	sub	r0, r0, #1
   1bafc:	cmp	r0, #3
   1bb00:	ldrls	pc, [pc, r0, lsl #2]
   1bb04:	b	1bb24 <__assert_fail@plt+0xa740>
   1bb08:	andeq	fp, r1, r8, lsr #22
   1bb0c:	andeq	fp, r1, r8, lsl fp
   1bb10:	andeq	fp, r1, r8, lsl fp
   1bb14:	andeq	fp, r1, r4, lsr fp
   1bb18:	movw	r0, #59020	; 0xe68c
   1bb1c:	movt	r0, #1
   1bb20:	b	1bb3c <__assert_fail@plt+0xa758>
   1bb24:	bl	113cc <abort@plt>
   1bb28:	movw	r0, #58960	; 0xe650
   1bb2c:	movt	r0, #1
   1bb30:	b	1bb3c <__assert_fail@plt+0xa758>
   1bb34:	movw	r0, #58992	; 0xe670
   1bb38:	movt	r0, #1
   1bb3c:	cmp	r1, #0
   1bb40:	blt	1bb84 <__assert_fail@plt+0xa7a0>
   1bb44:	ldr	r6, [r3, r1, lsl #4]
   1bb48:	movw	r4, #59060	; 0xe6b4
   1bb4c:	movt	r4, #1
   1bb50:	mov	r2, #5
   1bb54:	mov	r1, r0
   1bb58:	mov	r0, #0
   1bb5c:	bl	11168 <dcgettext@plt>
   1bb60:	ldr	r3, [sp, #24]
   1bb64:	str	r3, [sp, #4]
   1bb68:	str	r6, [sp]
   1bb6c:	mov	r3, r4
   1bb70:	mov	r2, r0
   1bb74:	mov	r1, #0
   1bb78:	mov	r0, r5
   1bb7c:	bl	11204 <error@plt>
   1bb80:	bl	113cc <abort@plt>
   1bb84:	movw	r4, #59060	; 0xe6b4
   1bb88:	movt	r4, #1
   1bb8c:	sub	r4, r4, r1
   1bb90:	strb	r2, [sp, #12]
   1bb94:	mov	r3, #0
   1bb98:	strb	r3, [sp, #13]
   1bb9c:	add	r6, sp, #12
   1bba0:	b	1bb50 <__assert_fail@plt+0xa76c>
   1bba4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bba8:	strd	r6, [sp, #8]
   1bbac:	strd	r8, [sp, #16]
   1bbb0:	strd	sl, [sp, #24]
   1bbb4:	str	lr, [sp, #32]
   1bbb8:	sub	sp, sp, #12
   1bbbc:	str	r0, [sp, #4]
   1bbc0:	cmp	r2, #0
   1bbc4:	beq	1bcc0 <__assert_fail@plt+0xa8dc>
   1bbc8:	sub	ip, r2, #1
   1bbcc:	ldrd	r2, [r0]
   1bbd0:	mov	r0, #0
   1bbd4:	mov	r8, r1
   1bbd8:	asr	r9, r1, #31
   1bbdc:	str	r1, [sp]
   1bbe0:	b	1bc30 <__assert_fail@plt+0xa84c>
   1bbe4:	orrs	r4, r2, r3
   1bbe8:	movne	lr, #1
   1bbec:	b	1bc40 <__assert_fail@plt+0xa85c>
   1bbf0:	mov	sl, r3
   1bbf4:	ldr	fp, [sp]
   1bbf8:	umull	r6, r7, r1, r2
   1bbfc:	mov	r4, r7
   1bc00:	mov	r5, #0
   1bc04:	umlal	r4, r5, sl, fp
   1bc08:	cmp	r5, #0
   1bc0c:	bne	1bc74 <__assert_fail@plt+0xa890>
   1bc10:	cmp	lr, #0
   1bc14:	bne	1bc8c <__assert_fail@plt+0xa8a8>
   1bc18:	mov	r2, r6
   1bc1c:	mov	r3, r4
   1bc20:	orr	r0, r0, lr
   1bc24:	sub	ip, ip, #1
   1bc28:	cmn	ip, #1
   1bc2c:	beq	1bc9c <__assert_fail@plt+0xa8b8>
   1bc30:	mov	lr, #0
   1bc34:	cmp	r8, #0
   1bc38:	sbcs	r4, r9, #0
   1bc3c:	blt	1bbe4 <__assert_fail@plt+0xa800>
   1bc40:	cmp	r9, #0
   1bc44:	bne	1bc60 <__assert_fail@plt+0xa87c>
   1bc48:	cmp	r3, #0
   1bc4c:	bne	1bbf0 <__assert_fail@plt+0xa80c>
   1bc50:	umull	r2, r3, r1, r2
   1bc54:	mov	r6, r2
   1bc58:	mov	r4, r3
   1bc5c:	b	1bc10 <__assert_fail@plt+0xa82c>
   1bc60:	cmp	r3, #0
   1bc64:	bne	1bc74 <__assert_fail@plt+0xa890>
   1bc68:	mov	sl, r9
   1bc6c:	mov	fp, r2
   1bc70:	b	1bbf8 <__assert_fail@plt+0xa814>
   1bc74:	mul	r4, r1, r3
   1bc78:	mla	r4, r2, r9, r4
   1bc7c:	umull	r6, r7, r1, r2
   1bc80:	add	r4, r4, r7
   1bc84:	mov	lr, #1
   1bc88:	b	1bc10 <__assert_fail@plt+0xa82c>
   1bc8c:	mvn	r2, #0
   1bc90:	mvn	r3, #0
   1bc94:	mov	lr, #1
   1bc98:	b	1bc20 <__assert_fail@plt+0xa83c>
   1bc9c:	ldr	r1, [sp, #4]
   1bca0:	strd	r2, [r1]
   1bca4:	add	sp, sp, #12
   1bca8:	ldrd	r4, [sp]
   1bcac:	ldrd	r6, [sp, #8]
   1bcb0:	ldrd	r8, [sp, #16]
   1bcb4:	ldrd	sl, [sp, #24]
   1bcb8:	add	sp, sp, #32
   1bcbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcc0:	mov	r0, #0
   1bcc4:	b	1bca4 <__assert_fail@plt+0xa8c0>
   1bcc8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bccc:	strd	r6, [sp, #8]
   1bcd0:	strd	r8, [sp, #16]
   1bcd4:	str	lr, [sp, #24]
   1bcd8:	sub	sp, sp, #20
   1bcdc:	cmp	r2, #36	; 0x24
   1bce0:	bhi	1bd34 <__assert_fail@plt+0xa950>
   1bce4:	mov	r5, r0
   1bce8:	mov	r6, r1
   1bcec:	mov	r7, r2
   1bcf0:	mov	r9, r3
   1bcf4:	cmp	r1, #0
   1bcf8:	addeq	r6, sp, #12
   1bcfc:	bl	112c4 <__errno_location@plt>
   1bd00:	mov	r8, r0
   1bd04:	mov	r3, #0
   1bd08:	str	r3, [r0]
   1bd0c:	ldrb	r4, [r5]
   1bd10:	bl	1127c <__ctype_b_loc@plt>
   1bd14:	ldr	r1, [r0]
   1bd18:	mov	r2, r5
   1bd1c:	lsl	r3, r4, #1
   1bd20:	ldrh	r3, [r1, r3]
   1bd24:	tst	r3, #8192	; 0x2000
   1bd28:	beq	1bd54 <__assert_fail@plt+0xa970>
   1bd2c:	ldrb	r4, [r2, #1]!
   1bd30:	b	1bd1c <__assert_fail@plt+0xa938>
   1bd34:	movw	r3, #59064	; 0xe6b8
   1bd38:	movt	r3, #1
   1bd3c:	mov	r2, #85	; 0x55
   1bd40:	movw	r1, #58896	; 0xe610
   1bd44:	movt	r1, #1
   1bd48:	movw	r0, #58912	; 0xe620
   1bd4c:	movt	r0, #1
   1bd50:	bl	113e4 <__assert_fail@plt>
   1bd54:	cmp	r4, #45	; 0x2d
   1bd58:	moveq	r4, #4
   1bd5c:	beq	1bef0 <__assert_fail@plt+0xab0c>
   1bd60:	mov	r3, #0
   1bd64:	mov	r2, r7
   1bd68:	mov	r1, r6
   1bd6c:	mov	r0, r5
   1bd70:	bl	11138 <__strtoull_internal@plt>
   1bd74:	strd	r0, [sp]
   1bd78:	ldr	r7, [r6]
   1bd7c:	cmp	r7, r5
   1bd80:	beq	1bda4 <__assert_fail@plt+0xa9c0>
   1bd84:	ldr	r3, [r8]
   1bd88:	cmp	r3, #0
   1bd8c:	beq	1bec8 <__assert_fail@plt+0xaae4>
   1bd90:	cmp	r3, #34	; 0x22
   1bd94:	moveq	r4, #1
   1bd98:	beq	1becc <__assert_fail@plt+0xaae8>
   1bd9c:	mov	r4, #4
   1bda0:	b	1bef0 <__assert_fail@plt+0xab0c>
   1bda4:	ldr	r3, [sp, #48]	; 0x30
   1bda8:	cmp	r3, #0
   1bdac:	beq	1c208 <__assert_fail@plt+0xae24>
   1bdb0:	ldrb	r1, [r5]
   1bdb4:	cmp	r1, #0
   1bdb8:	moveq	r4, #4
   1bdbc:	beq	1bef0 <__assert_fail@plt+0xab0c>
   1bdc0:	mov	r0, r3
   1bdc4:	bl	112a0 <strchr@plt>
   1bdc8:	cmp	r0, #0
   1bdcc:	beq	1c210 <__assert_fail@plt+0xae2c>
   1bdd0:	mov	r2, #1
   1bdd4:	mov	r3, #0
   1bdd8:	strd	r2, [sp]
   1bddc:	ldrb	r5, [r7]
   1bde0:	mov	r4, #0
   1bde4:	mov	r1, r5
   1bde8:	ldr	r0, [sp, #48]	; 0x30
   1bdec:	bl	112a0 <strchr@plt>
   1bdf0:	cmp	r0, #0
   1bdf4:	beq	1bf0c <__assert_fail@plt+0xab28>
   1bdf8:	sub	r3, r5, #69	; 0x45
   1bdfc:	cmp	r3, #47	; 0x2f
   1be00:	ldrls	pc, [pc, r3, lsl #2]
   1be04:	b	1c058 <__assert_fail@plt+0xac74>
   1be08:	andeq	fp, r1, ip, lsl pc
   1be0c:	andeq	ip, r1, r8, asr r0
   1be10:	andeq	fp, r1, ip, lsl pc
   1be14:	andeq	ip, r1, r8, asr r0
   1be18:	andeq	ip, r1, r8, asr r0
   1be1c:	andeq	ip, r1, r8, asr r0
   1be20:	andeq	fp, r1, ip, lsl pc
   1be24:	andeq	ip, r1, r8, asr r0
   1be28:	andeq	fp, r1, ip, lsl pc
   1be2c:	andeq	ip, r1, r8, asr r0
   1be30:	andeq	ip, r1, r8, asr r0
   1be34:	andeq	fp, r1, ip, lsl pc
   1be38:	andeq	ip, r1, r8, asr r0
   1be3c:	andeq	ip, r1, r8, asr r0
   1be40:	andeq	ip, r1, r8, asr r0
   1be44:	andeq	fp, r1, ip, lsl pc
   1be48:	andeq	ip, r1, r8, asr r0
   1be4c:	andeq	ip, r1, r8, asr r0
   1be50:	andeq	ip, r1, r8, asr r0
   1be54:	andeq	ip, r1, r8, asr r0
   1be58:	andeq	fp, r1, ip, lsl pc
   1be5c:	andeq	fp, r1, ip, lsl pc
   1be60:	andeq	ip, r1, r8, asr r0
   1be64:	andeq	ip, r1, r8, asr r0
   1be68:	andeq	ip, r1, r8, asr r0
   1be6c:	andeq	ip, r1, r8, asr r0
   1be70:	andeq	ip, r1, r8, asr r0
   1be74:	andeq	ip, r1, r8, asr r0
   1be78:	andeq	ip, r1, r8, asr r0
   1be7c:	andeq	ip, r1, r8, asr r0
   1be80:	andeq	ip, r1, r8, asr r0
   1be84:	andeq	ip, r1, r8, asr r0
   1be88:	andeq	ip, r1, r8, asr r0
   1be8c:	andeq	ip, r1, r8, asr r0
   1be90:	andeq	fp, r1, ip, lsl pc
   1be94:	andeq	ip, r1, r8, asr r0
   1be98:	andeq	ip, r1, r8, asr r0
   1be9c:	andeq	ip, r1, r8, asr r0
   1bea0:	andeq	fp, r1, ip, lsl pc
   1bea4:	andeq	ip, r1, r8, asr r0
   1bea8:	andeq	fp, r1, ip, lsl pc
   1beac:	andeq	ip, r1, r8, asr r0
   1beb0:	andeq	ip, r1, r8, asr r0
   1beb4:	andeq	ip, r1, r8, asr r0
   1beb8:	andeq	ip, r1, r8, asr r0
   1bebc:	andeq	ip, r1, r8, asr r0
   1bec0:	andeq	ip, r1, r8, asr r0
   1bec4:	andeq	fp, r1, ip, lsl pc
   1bec8:	mov	r4, #0
   1becc:	ldr	r3, [sp, #48]	; 0x30
   1bed0:	cmp	r3, #0
   1bed4:	strdeq	r0, [r9]
   1bed8:	beq	1bef0 <__assert_fail@plt+0xab0c>
   1bedc:	ldrb	r5, [r7]
   1bee0:	cmp	r5, #0
   1bee4:	bne	1bde4 <__assert_fail@plt+0xaa00>
   1bee8:	ldrd	r2, [sp]
   1beec:	strd	r2, [r9]
   1bef0:	mov	r0, r4
   1bef4:	add	sp, sp, #20
   1bef8:	ldrd	r4, [sp]
   1befc:	ldrd	r6, [sp, #8]
   1bf00:	ldrd	r8, [sp, #16]
   1bf04:	add	sp, sp, #24
   1bf08:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf0c:	ldrd	r2, [sp]
   1bf10:	strd	r2, [r9]
   1bf14:	orr	r4, r4, #2
   1bf18:	b	1bef0 <__assert_fail@plt+0xab0c>
   1bf1c:	mov	r1, #48	; 0x30
   1bf20:	ldr	r0, [sp, #48]	; 0x30
   1bf24:	bl	112a0 <strchr@plt>
   1bf28:	cmp	r0, #0
   1bf2c:	beq	1c064 <__assert_fail@plt+0xac80>
   1bf30:	ldrb	r3, [r7, #1]
   1bf34:	cmp	r3, #68	; 0x44
   1bf38:	beq	1c070 <__assert_fail@plt+0xac8c>
   1bf3c:	cmp	r3, #105	; 0x69
   1bf40:	beq	1c040 <__assert_fail@plt+0xac5c>
   1bf44:	cmp	r3, #66	; 0x42
   1bf48:	moveq	r7, #2
   1bf4c:	movne	r7, #1
   1bf50:	moveq	r1, #1000	; 0x3e8
   1bf54:	movne	r1, #1024	; 0x400
   1bf58:	sub	r5, r5, #66	; 0x42
   1bf5c:	cmp	r5, #53	; 0x35
   1bf60:	ldrls	pc, [pc, r5, lsl #2]
   1bf64:	b	1c1d4 <__assert_fail@plt+0xadf0>
   1bf68:	andeq	ip, r1, r4, asr #1
   1bf6c:	ldrdeq	ip, [r1], -r4
   1bf70:	ldrdeq	ip, [r1], -r4
   1bf74:	andeq	ip, r1, ip, lsl #2
   1bf78:	ldrdeq	ip, [r1], -r4
   1bf7c:	andeq	ip, r1, ip, lsl r1
   1bf80:	ldrdeq	ip, [r1], -r4
   1bf84:	ldrdeq	ip, [r1], -r4
   1bf88:	ldrdeq	ip, [r1], -r4
   1bf8c:	andeq	ip, r1, ip, lsr #2
   1bf90:	ldrdeq	ip, [r1], -r4
   1bf94:	andeq	ip, r1, ip, lsr r1
   1bf98:	ldrdeq	ip, [r1], -r4
   1bf9c:	ldrdeq	ip, [r1], -r4
   1bfa0:	andeq	ip, r1, ip, asr #2
   1bfa4:	ldrdeq	ip, [r1], -r4
   1bfa8:	ldrdeq	ip, [r1], -r4
   1bfac:	ldrdeq	ip, [r1], -r4
   1bfb0:	andeq	ip, r1, ip, asr r1
   1bfb4:	ldrdeq	ip, [r1], -r4
   1bfb8:	ldrdeq	ip, [r1], -r4
   1bfbc:	ldrdeq	ip, [r1], -r4
   1bfc0:	ldrdeq	ip, [r1], -r4
   1bfc4:			; <UNDEFINED> instruction: 0x0001c1b4
   1bfc8:	andeq	ip, r1, r4, asr #3
   1bfcc:	ldrdeq	ip, [r1], -r4
   1bfd0:	ldrdeq	ip, [r1], -r4
   1bfd4:	ldrdeq	ip, [r1], -r4
   1bfd8:	ldrdeq	ip, [r1], -r4
   1bfdc:	ldrdeq	ip, [r1], -r4
   1bfe0:	ldrdeq	ip, [r1], -r4
   1bfe4:	ldrdeq	ip, [r1], -r4
   1bfe8:	andeq	ip, r1, ip, ror r0
   1bfec:	andeq	ip, r1, r4, ror #3
   1bff0:	ldrdeq	ip, [r1], -r4
   1bff4:	ldrdeq	ip, [r1], -r4
   1bff8:	ldrdeq	ip, [r1], -r4
   1bffc:	andeq	ip, r1, ip, lsl r1
   1c000:	ldrdeq	ip, [r1], -r4
   1c004:	ldrdeq	ip, [r1], -r4
   1c008:	ldrdeq	ip, [r1], -r4
   1c00c:	andeq	ip, r1, ip, lsr #2
   1c010:	ldrdeq	ip, [r1], -r4
   1c014:	andeq	ip, r1, ip, lsr r1
   1c018:	ldrdeq	ip, [r1], -r4
   1c01c:	ldrdeq	ip, [r1], -r4
   1c020:	ldrdeq	ip, [r1], -r4
   1c024:	ldrdeq	ip, [r1], -r4
   1c028:	ldrdeq	ip, [r1], -r4
   1c02c:	ldrdeq	ip, [r1], -r4
   1c030:	andeq	ip, r1, ip, asr r1
   1c034:	ldrdeq	ip, [r1], -r4
   1c038:	ldrdeq	ip, [r1], -r4
   1c03c:	andeq	ip, r1, ip, ror #2
   1c040:	ldrb	r3, [r7, #2]
   1c044:	cmp	r3, #66	; 0x42
   1c048:	movne	r7, #1
   1c04c:	moveq	r7, #3
   1c050:	mov	r1, #1024	; 0x400
   1c054:	b	1bf58 <__assert_fail@plt+0xab74>
   1c058:	mov	r7, #1
   1c05c:	mov	r1, #1024	; 0x400
   1c060:	b	1bf58 <__assert_fail@plt+0xab74>
   1c064:	mov	r7, #1
   1c068:	mov	r1, #1024	; 0x400
   1c06c:	b	1bf58 <__assert_fail@plt+0xab74>
   1c070:	mov	r7, #2
   1c074:	mov	r1, #1000	; 0x3e8
   1c078:	b	1bf58 <__assert_fail@plt+0xab74>
   1c07c:	ldr	r3, [sp]
   1c080:	ldr	ip, [sp, #4]
   1c084:	lsl	r2, ip, #9
   1c088:	orr	r2, r2, r3, lsr #23
   1c08c:	lsl	r3, r3, #9
   1c090:	mov	r0, #0
   1c094:	mov	r1, r0
   1c098:	lsr	r0, ip, #23
   1c09c:	orrs	r1, r0, r1
   1c0a0:	streq	r3, [sp]
   1c0a4:	streq	r2, [sp, #4]
   1c0a8:	moveq	r0, #0
   1c0ac:	beq	1c1e8 <__assert_fail@plt+0xae04>
   1c0b0:	mvn	r2, #0
   1c0b4:	mvn	r3, #0
   1c0b8:	strd	r2, [sp]
   1c0bc:	mov	r0, #1
   1c0c0:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c0c4:	ldr	r3, [sp]
   1c0c8:	ldr	ip, [sp, #4]
   1c0cc:	lsl	r2, ip, #10
   1c0d0:	orr	r2, r2, r3, lsr #22
   1c0d4:	lsl	r3, r3, #10
   1c0d8:	mov	r0, #0
   1c0dc:	mov	r1, r0
   1c0e0:	lsr	r0, ip, #22
   1c0e4:	orrs	r1, r0, r1
   1c0e8:	streq	r3, [sp]
   1c0ec:	streq	r2, [sp, #4]
   1c0f0:	moveq	r0, #0
   1c0f4:	beq	1c1e8 <__assert_fail@plt+0xae04>
   1c0f8:	mvn	r2, #0
   1c0fc:	mvn	r3, #0
   1c100:	strd	r2, [sp]
   1c104:	mov	r0, #1
   1c108:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c10c:	mov	r2, #6
   1c110:	mov	r0, sp
   1c114:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c118:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c11c:	mov	r2, #3
   1c120:	mov	r0, sp
   1c124:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c128:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c12c:	mov	r2, #1
   1c130:	mov	r0, sp
   1c134:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c138:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c13c:	mov	r2, #2
   1c140:	mov	r0, sp
   1c144:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c148:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c14c:	mov	r2, #5
   1c150:	mov	r0, sp
   1c154:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c158:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c15c:	mov	r2, #4
   1c160:	mov	r0, sp
   1c164:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c168:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c16c:	ldr	r3, [sp]
   1c170:	ldr	r2, [sp, #4]
   1c174:	adds	r3, r3, r3
   1c178:	adc	r2, r2, r2
   1c17c:	mov	r1, #0
   1c180:	mov	r0, r1
   1c184:	ldr	r1, [sp, #4]
   1c188:	lsr	r1, r1, #31
   1c18c:	orrs	r1, r1, r0
   1c190:	streq	r3, [sp]
   1c194:	streq	r2, [sp, #4]
   1c198:	moveq	r0, #0
   1c19c:	beq	1c1e8 <__assert_fail@plt+0xae04>
   1c1a0:	mvn	r2, #0
   1c1a4:	mvn	r3, #0
   1c1a8:	strd	r2, [sp]
   1c1ac:	mov	r0, #1
   1c1b0:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c1b4:	mov	r2, #8
   1c1b8:	mov	r0, sp
   1c1bc:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c1c0:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c1c4:	mov	r2, #7
   1c1c8:	mov	r0, sp
   1c1cc:	bl	1bba4 <__assert_fail@plt+0xa7c0>
   1c1d0:	b	1c1e8 <__assert_fail@plt+0xae04>
   1c1d4:	ldrd	r2, [sp]
   1c1d8:	strd	r2, [r9]
   1c1dc:	orr	r4, r4, #2
   1c1e0:	b	1bef0 <__assert_fail@plt+0xab0c>
   1c1e4:	mov	r0, #0
   1c1e8:	orr	r4, r4, r0
   1c1ec:	ldr	r3, [r6]
   1c1f0:	add	r2, r3, r7
   1c1f4:	str	r2, [r6]
   1c1f8:	ldrb	r3, [r3, r7]
   1c1fc:	cmp	r3, #0
   1c200:	orrne	r4, r4, #2
   1c204:	b	1bee8 <__assert_fail@plt+0xab04>
   1c208:	mov	r4, #4
   1c20c:	b	1bef0 <__assert_fail@plt+0xab0c>
   1c210:	mov	r4, #4
   1c214:	b	1bef0 <__assert_fail@plt+0xab0c>
   1c218:	strd	r4, [sp, #-16]!
   1c21c:	str	r6, [sp, #8]
   1c220:	str	lr, [sp, #12]
   1c224:	cmp	r1, #0
   1c228:	cmpne	r0, #0
   1c22c:	beq	1c268 <__assert_fail@plt+0xae84>
   1c230:	mov	r2, r0
   1c234:	mov	r3, r1
   1c238:	umull	r4, r5, r0, r1
   1c23c:	adds	r1, r5, #0
   1c240:	movne	r1, #1
   1c244:	cmp	r4, #0
   1c248:	movlt	r1, #1
   1c24c:	cmp	r1, #0
   1c250:	beq	1c270 <__assert_fail@plt+0xae8c>
   1c254:	bl	112c4 <__errno_location@plt>
   1c258:	mov	r3, #12
   1c25c:	str	r3, [r0]
   1c260:	mov	r0, #0
   1c264:	b	1c27c <__assert_fail@plt+0xae98>
   1c268:	mov	r3, #1
   1c26c:	mov	r2, r3
   1c270:	mov	r1, r3
   1c274:	mov	r0, r2
   1c278:	bl	11090 <calloc@plt>
   1c27c:	ldrd	r4, [sp]
   1c280:	ldr	r6, [sp, #8]
   1c284:	add	sp, sp, #12
   1c288:	pop	{pc}		; (ldr pc, [sp], #4)
   1c28c:	str	r4, [sp, #-8]!
   1c290:	str	lr, [sp, #4]
   1c294:	cmp	r0, #0
   1c298:	beq	1c2b4 <__assert_fail@plt+0xaed0>
   1c29c:	bge	1c2b8 <__assert_fail@plt+0xaed4>
   1c2a0:	bl	112c4 <__errno_location@plt>
   1c2a4:	mov	r3, #12
   1c2a8:	str	r3, [r0]
   1c2ac:	mov	r0, #0
   1c2b0:	b	1c2bc <__assert_fail@plt+0xaed8>
   1c2b4:	mov	r0, #1
   1c2b8:	bl	1121c <malloc@plt>
   1c2bc:	ldr	r4, [sp]
   1c2c0:	add	sp, sp, #4
   1c2c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2c8:	str	r4, [sp, #-8]!
   1c2cc:	str	lr, [sp, #4]
   1c2d0:	cmp	r0, #0
   1c2d4:	beq	1c2f8 <__assert_fail@plt+0xaf14>
   1c2d8:	cmp	r1, #0
   1c2dc:	beq	1c304 <__assert_fail@plt+0xaf20>
   1c2e0:	cmp	r1, #0
   1c2e4:	blt	1c310 <__assert_fail@plt+0xaf2c>
   1c2e8:	bl	11174 <realloc@plt>
   1c2ec:	ldr	r4, [sp]
   1c2f0:	add	sp, sp, #4
   1c2f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2f8:	mov	r0, r1
   1c2fc:	bl	1c28c <__assert_fail@plt+0xaea8>
   1c300:	b	1c2ec <__assert_fail@plt+0xaf08>
   1c304:	bl	158a0 <__assert_fail@plt+0x44bc>
   1c308:	mov	r0, #0
   1c30c:	b	1c2ec <__assert_fail@plt+0xaf08>
   1c310:	bl	112c4 <__errno_location@plt>
   1c314:	mov	r3, #12
   1c318:	str	r3, [r0]
   1c31c:	mov	r0, #0
   1c320:	b	1c2ec <__assert_fail@plt+0xaf08>
   1c324:	strd	r4, [sp, #-16]!
   1c328:	str	r6, [sp, #8]
   1c32c:	str	lr, [sp, #12]
   1c330:	mov	r5, r0
   1c334:	bl	111ec <__fpending@plt>
   1c338:	mov	r6, r0
   1c33c:	ldr	r4, [r5]
   1c340:	and	r4, r4, #32
   1c344:	mov	r0, r5
   1c348:	bl	156c4 <__assert_fail@plt+0x42e0>
   1c34c:	cmp	r4, #0
   1c350:	bne	1c384 <__assert_fail@plt+0xafa0>
   1c354:	cmp	r0, #0
   1c358:	beq	1c374 <__assert_fail@plt+0xaf90>
   1c35c:	cmp	r6, #0
   1c360:	bne	1c3a0 <__assert_fail@plt+0xafbc>
   1c364:	bl	112c4 <__errno_location@plt>
   1c368:	ldr	r0, [r0]
   1c36c:	subs	r0, r0, #9
   1c370:	mvnne	r0, #0
   1c374:	ldrd	r4, [sp]
   1c378:	ldr	r6, [sp, #8]
   1c37c:	add	sp, sp, #12
   1c380:	pop	{pc}		; (ldr pc, [sp], #4)
   1c384:	cmp	r0, #0
   1c388:	bne	1c3a8 <__assert_fail@plt+0xafc4>
   1c38c:	bl	112c4 <__errno_location@plt>
   1c390:	mov	r3, #0
   1c394:	str	r3, [r0]
   1c398:	mvn	r0, #0
   1c39c:	b	1c374 <__assert_fail@plt+0xaf90>
   1c3a0:	mvn	r0, #0
   1c3a4:	b	1c374 <__assert_fail@plt+0xaf90>
   1c3a8:	mvn	r0, #0
   1c3ac:	b	1c374 <__assert_fail@plt+0xaf90>
   1c3b0:	push	{r1, r2, r3}
   1c3b4:	strd	r4, [sp, #-16]!
   1c3b8:	str	r6, [sp, #8]
   1c3bc:	str	lr, [sp, #12]
   1c3c0:	sub	sp, sp, #12
   1c3c4:	mov	r5, r0
   1c3c8:	ldr	r1, [sp, #28]
   1c3cc:	add	r3, sp, #32
   1c3d0:	str	r3, [sp, #4]
   1c3d4:	cmp	r1, #0
   1c3d8:	beq	1c420 <__assert_fail@plt+0xb03c>
   1c3dc:	movw	r3, #1030	; 0x406
   1c3e0:	cmp	r1, r3
   1c3e4:	beq	1c45c <__assert_fail@plt+0xb078>
   1c3e8:	cmp	r1, #11
   1c3ec:	beq	1c60c <__assert_fail@plt+0xb228>
   1c3f0:	bgt	1c598 <__assert_fail@plt+0xb1b4>
   1c3f4:	cmp	r1, #3
   1c3f8:	beq	1c60c <__assert_fail@plt+0xb228>
   1c3fc:	ble	1c558 <__assert_fail@plt+0xb174>
   1c400:	cmp	r1, #8
   1c404:	beq	1c578 <__assert_fail@plt+0xb194>
   1c408:	ble	1c570 <__assert_fail@plt+0xb18c>
   1c40c:	cmp	r1, #9
   1c410:	beq	1c60c <__assert_fail@plt+0xb228>
   1c414:	cmp	r1, #10
   1c418:	bne	1c5d0 <__assert_fail@plt+0xb1ec>
   1c41c:	b	1c578 <__assert_fail@plt+0xb194>
   1c420:	ldr	r3, [sp, #4]
   1c424:	add	r2, r3, #4
   1c428:	str	r2, [sp, #4]
   1c42c:	ldr	r2, [r3]
   1c430:	mov	r1, #0
   1c434:	bl	11330 <fcntl64@plt>
   1c438:	mov	r4, r0
   1c43c:	mov	r0, r4
   1c440:	add	sp, sp, #12
   1c444:	ldrd	r4, [sp]
   1c448:	ldr	r6, [sp, #8]
   1c44c:	ldr	lr, [sp, #12]
   1c450:	add	sp, sp, #16
   1c454:	add	sp, sp, #12
   1c458:	bx	lr
   1c45c:	ldr	r3, [sp, #4]
   1c460:	add	r2, r3, #4
   1c464:	str	r2, [sp, #4]
   1c468:	ldr	r6, [r3]
   1c46c:	movw	r3, #62436	; 0xf3e4
   1c470:	movt	r3, #2
   1c474:	ldr	r3, [r3]
   1c478:	cmp	r3, #0
   1c47c:	blt	1c4e4 <__assert_fail@plt+0xb100>
   1c480:	mov	r2, r6
   1c484:	movw	r1, #1030	; 0x406
   1c488:	bl	11330 <fcntl64@plt>
   1c48c:	subs	r4, r0, #0
   1c490:	blt	1c4a8 <__assert_fail@plt+0xb0c4>
   1c494:	movw	r3, #62436	; 0xf3e4
   1c498:	movt	r3, #2
   1c49c:	mov	r2, #1
   1c4a0:	str	r2, [r3]
   1c4a4:	b	1c43c <__assert_fail@plt+0xb058>
   1c4a8:	bl	112c4 <__errno_location@plt>
   1c4ac:	ldr	r3, [r0]
   1c4b0:	cmp	r3, #22
   1c4b4:	bne	1c494 <__assert_fail@plt+0xb0b0>
   1c4b8:	mov	r2, r6
   1c4bc:	mov	r1, #0
   1c4c0:	mov	r0, r5
   1c4c4:	bl	11330 <fcntl64@plt>
   1c4c8:	subs	r4, r0, #0
   1c4cc:	blt	1c43c <__assert_fail@plt+0xb058>
   1c4d0:	movw	r3, #62436	; 0xf3e4
   1c4d4:	movt	r3, #2
   1c4d8:	mvn	r2, #0
   1c4dc:	str	r2, [r3]
   1c4e0:	b	1c50c <__assert_fail@plt+0xb128>
   1c4e4:	mov	r2, r6
   1c4e8:	mov	r1, #0
   1c4ec:	bl	11330 <fcntl64@plt>
   1c4f0:	subs	r4, r0, #0
   1c4f4:	blt	1c43c <__assert_fail@plt+0xb058>
   1c4f8:	movw	r3, #62436	; 0xf3e4
   1c4fc:	movt	r3, #2
   1c500:	ldr	r3, [r3]
   1c504:	cmn	r3, #1
   1c508:	bne	1c43c <__assert_fail@plt+0xb058>
   1c50c:	mov	r1, #1
   1c510:	mov	r0, r4
   1c514:	bl	11330 <fcntl64@plt>
   1c518:	subs	r2, r0, #0
   1c51c:	blt	1c538 <__assert_fail@plt+0xb154>
   1c520:	orr	r2, r2, #1
   1c524:	mov	r1, #2
   1c528:	mov	r0, r4
   1c52c:	bl	11330 <fcntl64@plt>
   1c530:	cmn	r0, #1
   1c534:	bne	1c43c <__assert_fail@plt+0xb058>
   1c538:	bl	112c4 <__errno_location@plt>
   1c53c:	mov	r5, r0
   1c540:	ldr	r6, [r0]
   1c544:	mov	r0, r4
   1c548:	bl	113d8 <close@plt>
   1c54c:	str	r6, [r5]
   1c550:	mvn	r4, #0
   1c554:	b	1c43c <__assert_fail@plt+0xb058>
   1c558:	cmp	r1, #1
   1c55c:	beq	1c60c <__assert_fail@plt+0xb228>
   1c560:	bgt	1c578 <__assert_fail@plt+0xb194>
   1c564:	cmp	r1, #0
   1c568:	bne	1c5d0 <__assert_fail@plt+0xb1ec>
   1c56c:	b	1c578 <__assert_fail@plt+0xb194>
   1c570:	cmp	r1, #4
   1c574:	bne	1c5d0 <__assert_fail@plt+0xb1ec>
   1c578:	ldr	r3, [sp, #4]
   1c57c:	add	r2, r3, #4
   1c580:	str	r2, [sp, #4]
   1c584:	ldr	r2, [r3]
   1c588:	mov	r0, r5
   1c58c:	bl	11330 <fcntl64@plt>
   1c590:	mov	r4, r0
   1c594:	b	1c43c <__assert_fail@plt+0xb058>
   1c598:	movw	r3, #1031	; 0x407
   1c59c:	cmp	r1, r3
   1c5a0:	bgt	1c5f0 <__assert_fail@plt+0xb20c>
   1c5a4:	movw	r3, #1030	; 0x406
   1c5a8:	cmp	r1, r3
   1c5ac:	bge	1c578 <__assert_fail@plt+0xb194>
   1c5b0:	movw	r3, #1025	; 0x401
   1c5b4:	cmp	r1, r3
   1c5b8:	beq	1c60c <__assert_fail@plt+0xb228>
   1c5bc:	movw	r3, #1026	; 0x402
   1c5c0:	cmp	r1, r3
   1c5c4:	beq	1c578 <__assert_fail@plt+0xb194>
   1c5c8:	cmp	r1, #1024	; 0x400
   1c5cc:	beq	1c578 <__assert_fail@plt+0xb194>
   1c5d0:	ldr	r3, [sp, #4]
   1c5d4:	add	r2, r3, #4
   1c5d8:	str	r2, [sp, #4]
   1c5dc:	ldr	r2, [r3]
   1c5e0:	mov	r0, r5
   1c5e4:	bl	11330 <fcntl64@plt>
   1c5e8:	mov	r4, r0
   1c5ec:	b	1c43c <__assert_fail@plt+0xb058>
   1c5f0:	movw	r3, #1033	; 0x409
   1c5f4:	cmp	r1, r3
   1c5f8:	beq	1c578 <__assert_fail@plt+0xb194>
   1c5fc:	blt	1c60c <__assert_fail@plt+0xb228>
   1c600:	movw	r3, #1034	; 0x40a
   1c604:	cmp	r1, r3
   1c608:	bne	1c5d0 <__assert_fail@plt+0xb1ec>
   1c60c:	mov	r0, r5
   1c610:	bl	11330 <fcntl64@plt>
   1c614:	mov	r4, r0
   1c618:	b	1c43c <__assert_fail@plt+0xb058>
   1c61c:	str	r4, [sp, #-8]!
   1c620:	str	lr, [sp, #4]
   1c624:	mov	r0, #14
   1c628:	bl	1136c <nl_langinfo@plt>
   1c62c:	cmp	r0, #0
   1c630:	beq	1c654 <__assert_fail@plt+0xb270>
   1c634:	ldrb	r2, [r0]
   1c638:	movw	r3, #59076	; 0xe6c4
   1c63c:	movt	r3, #1
   1c640:	cmp	r2, #0
   1c644:	moveq	r0, r3
   1c648:	ldr	r4, [sp]
   1c64c:	add	sp, sp, #4
   1c650:	pop	{pc}		; (ldr pc, [sp], #4)
   1c654:	movw	r0, #59076	; 0xe6c4
   1c658:	movt	r0, #1
   1c65c:	b	1c648 <__assert_fail@plt+0xb264>
   1c660:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c664:	strd	r6, [sp, #8]
   1c668:	str	lr, [sp, #16]
   1c66c:	sub	sp, sp, #12
   1c670:	mov	r7, r1
   1c674:	mov	r5, r2
   1c678:	subs	r6, r0, #0
   1c67c:	addeq	r6, sp, #4
   1c680:	mov	r0, r6
   1c684:	bl	111f8 <mbrtowc@plt>
   1c688:	mov	r4, r0
   1c68c:	cmp	r5, #0
   1c690:	cmnne	r0, #3
   1c694:	bhi	1c6b0 <__assert_fail@plt+0xb2cc>
   1c698:	mov	r0, r4
   1c69c:	add	sp, sp, #12
   1c6a0:	ldrd	r4, [sp]
   1c6a4:	ldrd	r6, [sp, #8]
   1c6a8:	add	sp, sp, #16
   1c6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6b0:	mov	r0, #0
   1c6b4:	bl	15a14 <__assert_fail@plt+0x4630>
   1c6b8:	cmp	r0, #0
   1c6bc:	bne	1c698 <__assert_fail@plt+0xb2b4>
   1c6c0:	ldrb	r3, [r7]
   1c6c4:	str	r3, [r6]
   1c6c8:	mov	r4, #1
   1c6cc:	b	1c698 <__assert_fail@plt+0xb2b4>
   1c6d0:	str	r4, [sp, #-8]!
   1c6d4:	str	lr, [sp, #4]
   1c6d8:	umull	r2, r3, r1, r2
   1c6dc:	cmp	r3, #0
   1c6e0:	bne	1c6f8 <__assert_fail@plt+0xb314>
   1c6e4:	mov	r1, r2
   1c6e8:	bl	1c2c8 <__assert_fail@plt+0xaee4>
   1c6ec:	ldr	r4, [sp]
   1c6f0:	add	sp, sp, #4
   1c6f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6f8:	bl	112c4 <__errno_location@plt>
   1c6fc:	mov	r3, #12
   1c700:	str	r3, [r0]
   1c704:	mov	r0, #0
   1c708:	b	1c6ec <__assert_fail@plt+0xb308>
   1c70c:	cmp	r3, #0
   1c710:	cmpeq	r2, #0
   1c714:	bne	1c738 <__assert_fail@plt+0xb354>
   1c718:	cmp	r1, #0
   1c71c:	movlt	r1, #-2147483648	; 0x80000000
   1c720:	movlt	r0, #0
   1c724:	blt	1c734 <__assert_fail@plt+0xb350>
   1c728:	cmpeq	r0, #0
   1c72c:	mvnne	r1, #-2147483648	; 0x80000000
   1c730:	mvnne	r0, #0
   1c734:	b	1c7e0 <__assert_fail@plt+0xb3fc>
   1c738:	sub	sp, sp, #8
   1c73c:	push	{sp, lr}
   1c740:	cmp	r1, #0
   1c744:	blt	1c764 <__assert_fail@plt+0xb380>
   1c748:	cmp	r3, #0
   1c74c:	blt	1c798 <__assert_fail@plt+0xb3b4>
   1c750:	bl	1c7f0 <__assert_fail@plt+0xb40c>
   1c754:	ldr	lr, [sp, #4]
   1c758:	add	sp, sp, #8
   1c75c:	pop	{r2, r3}
   1c760:	bx	lr
   1c764:	rsbs	r0, r0, #0
   1c768:	sbc	r1, r1, r1, lsl #1
   1c76c:	cmp	r3, #0
   1c770:	blt	1c7bc <__assert_fail@plt+0xb3d8>
   1c774:	bl	1c7f0 <__assert_fail@plt+0xb40c>
   1c778:	ldr	lr, [sp, #4]
   1c77c:	add	sp, sp, #8
   1c780:	pop	{r2, r3}
   1c784:	rsbs	r0, r0, #0
   1c788:	sbc	r1, r1, r1, lsl #1
   1c78c:	rsbs	r2, r2, #0
   1c790:	sbc	r3, r3, r3, lsl #1
   1c794:	bx	lr
   1c798:	rsbs	r2, r2, #0
   1c79c:	sbc	r3, r3, r3, lsl #1
   1c7a0:	bl	1c7f0 <__assert_fail@plt+0xb40c>
   1c7a4:	ldr	lr, [sp, #4]
   1c7a8:	add	sp, sp, #8
   1c7ac:	pop	{r2, r3}
   1c7b0:	rsbs	r0, r0, #0
   1c7b4:	sbc	r1, r1, r1, lsl #1
   1c7b8:	bx	lr
   1c7bc:	rsbs	r2, r2, #0
   1c7c0:	sbc	r3, r3, r3, lsl #1
   1c7c4:	bl	1c7f0 <__assert_fail@plt+0xb40c>
   1c7c8:	ldr	lr, [sp, #4]
   1c7cc:	add	sp, sp, #8
   1c7d0:	pop	{r2, r3}
   1c7d4:	rsbs	r2, r2, #0
   1c7d8:	sbc	r3, r3, r3, lsl #1
   1c7dc:	bx	lr
   1c7e0:	push	{r1, lr}
   1c7e4:	mov	r0, #8
   1c7e8:	bl	110a8 <raise@plt>
   1c7ec:	pop	{r1, pc}
   1c7f0:	cmp	r1, r3
   1c7f4:	cmpeq	r0, r2
   1c7f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7fc:	mov	r4, r0
   1c800:	movcc	r0, #0
   1c804:	mov	r5, r1
   1c808:	ldr	lr, [sp, #36]	; 0x24
   1c80c:	movcc	r1, r0
   1c810:	bcc	1c90c <__assert_fail@plt+0xb528>
   1c814:	cmp	r3, #0
   1c818:	clzeq	ip, r2
   1c81c:	clzne	ip, r3
   1c820:	addeq	ip, ip, #32
   1c824:	cmp	r5, #0
   1c828:	clzeq	r1, r4
   1c82c:	addeq	r1, r1, #32
   1c830:	clzne	r1, r5
   1c834:	sub	ip, ip, r1
   1c838:	sub	sl, ip, #32
   1c83c:	lsl	r9, r3, ip
   1c840:	rsb	fp, ip, #32
   1c844:	orr	r9, r9, r2, lsl sl
   1c848:	orr	r9, r9, r2, lsr fp
   1c84c:	lsl	r8, r2, ip
   1c850:	cmp	r5, r9
   1c854:	cmpeq	r4, r8
   1c858:	movcc	r0, #0
   1c85c:	movcc	r1, r0
   1c860:	bcc	1c87c <__assert_fail@plt+0xb498>
   1c864:	mov	r0, #1
   1c868:	subs	r4, r4, r8
   1c86c:	lsl	r1, r0, sl
   1c870:	orr	r1, r1, r0, lsr fp
   1c874:	lsl	r0, r0, ip
   1c878:	sbc	r5, r5, r9
   1c87c:	cmp	ip, #0
   1c880:	beq	1c90c <__assert_fail@plt+0xb528>
   1c884:	lsr	r6, r8, #1
   1c888:	orr	r6, r6, r9, lsl #31
   1c88c:	lsr	r7, r9, #1
   1c890:	mov	r2, ip
   1c894:	b	1c8b8 <__assert_fail@plt+0xb4d4>
   1c898:	subs	r3, r4, r6
   1c89c:	sbc	r8, r5, r7
   1c8a0:	adds	r3, r3, r3
   1c8a4:	adc	r8, r8, r8
   1c8a8:	adds	r4, r3, #1
   1c8ac:	adc	r5, r8, #0
   1c8b0:	subs	r2, r2, #1
   1c8b4:	beq	1c8d4 <__assert_fail@plt+0xb4f0>
   1c8b8:	cmp	r5, r7
   1c8bc:	cmpeq	r4, r6
   1c8c0:	bcs	1c898 <__assert_fail@plt+0xb4b4>
   1c8c4:	adds	r4, r4, r4
   1c8c8:	adc	r5, r5, r5
   1c8cc:	subs	r2, r2, #1
   1c8d0:	bne	1c8b8 <__assert_fail@plt+0xb4d4>
   1c8d4:	lsr	r3, r4, ip
   1c8d8:	orr	r3, r3, r5, lsl fp
   1c8dc:	lsr	r2, r5, ip
   1c8e0:	orr	r3, r3, r5, lsr sl
   1c8e4:	adds	r0, r0, r4
   1c8e8:	mov	r4, r3
   1c8ec:	lsl	r3, r2, ip
   1c8f0:	orr	r3, r3, r4, lsl sl
   1c8f4:	lsl	ip, r4, ip
   1c8f8:	orr	r3, r3, r4, lsr fp
   1c8fc:	adc	r1, r1, r5
   1c900:	subs	r0, r0, ip
   1c904:	mov	r5, r2
   1c908:	sbc	r1, r1, r3
   1c90c:	cmp	lr, #0
   1c910:	strdne	r4, [lr]
   1c914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c918:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c91c:	mov	r7, r0
   1c920:	ldr	r6, [pc, #72]	; 1c970 <__assert_fail@plt+0xb58c>
   1c924:	ldr	r5, [pc, #72]	; 1c974 <__assert_fail@plt+0xb590>
   1c928:	add	r6, pc, r6
   1c92c:	add	r5, pc, r5
   1c930:	sub	r6, r6, r5
   1c934:	mov	r8, r1
   1c938:	mov	r9, r2
   1c93c:	bl	11064 <fdopen@plt-0x20>
   1c940:	asrs	r6, r6, #2
   1c944:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c948:	mov	r4, #0
   1c94c:	add	r4, r4, #1
   1c950:	ldr	r3, [r5], #4
   1c954:	mov	r2, r9
   1c958:	mov	r1, r8
   1c95c:	mov	r0, r7
   1c960:	blx	r3
   1c964:	cmp	r6, r4
   1c968:	bne	1c94c <__assert_fail@plt+0xb568>
   1c96c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c970:	andeq	r2, r1, r4, ror #11
   1c974:	ldrdeq	r2, [r1], -ip
   1c978:	bx	lr
   1c97c:	ldr	r3, [pc, #12]	; 1c990 <__assert_fail@plt+0xb5ac>
   1c980:	mov	r1, #0
   1c984:	add	r3, pc, r3
   1c988:	ldr	r2, [r3]
   1c98c:	b	112dc <__cxa_atexit@plt>
   1c990:			; <UNDEFINED> instruction: 0x000127b0

Disassembly of section .fini:

0001c994 <.fini>:
   1c994:	push	{r3, lr}
   1c998:	pop	{r3, pc}
